
#Область ОписаниеПеременных

&НаКлиенте
Перем ХарактеристикиСценария; // Хранит характеристики сценария планирования.

#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	уатЗащищенныеФункцииСервер.уатДокументФормаЭлементаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, Объект, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// уатСогласованиеДокументов
	ИмяДокументаСогласование = "ПланированиеРаботыТС";
	ЭлементыДоступность = Новый Структура("ГруппаШапка, СтраницыИтогов, ГруппаСтраницы, ОтветственныйКомментарий");
	уатСогласованиеДокументовСервер.ПриСозданииНаСервере(ЭтотОбъект, ЭлементыДоступность);
	// Конец уатСогласованиеДокументов

	// Установка реквизитов формы.
	мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	ВалютаРасчетов = Объект.Сценарий.Валюта;
	НациональнаяВалюта = мВалютаРегламентированногоУчета;
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата,
						Новый Структура("Валюта", НациональнаяВалюта));
	КурсНациональнаяВалюта = СтруктураПоВалюте.Курс;
	КратностьНациональнаяВалюта = СтруктураПоВалюте.Кратность;
	
	Если Объект.Ссылка.Пустая() Тогда
		Если НЕ ЗначениеЗаполнено(Объект.ДатаПланирования) Тогда
			Объект.ДатаПланирования = НачалоМесяца(ДобавитьМесяц(ТекущаяДата(), 1));
		КонецЕсли;
	КонецЕсли;
	
	мТекущийСценарий = Объект.Сценарий;
	ОрганизацияПередИзменением = Объект.Организация;
	уатОбщегоНазначенияСервер.НастроитьПолеПодразделение(Элементы.Подразделение, "Объект.Организация");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	уатЗащищенныеФункцииКлиент.уатДокументФормаЭлементаПриОткрытии(Отказ, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// уатСогласованиеДокументов
	уатСогласованиеДокументовКлиент.ОбновитьСтатусСогласования(ЭтотОбъект);
	// Конец уатСогласованиеДокументов

	ВыполнитьДействияПриИзмененииСценария(Объект.Сценарий);
	ПриОткрытииСервер();

	НДСВсего = СоставПланаПериоды.Итог("СоставПланаПериодыСуммаНДС_Всего");
	ВывестиСуммовыеИтогиДокумента();
	ОбновитьВсегоВТЧ();
	ОбновитьНадписьПериодПланирования();
	
	УстановитьВидимостьИДоступностьЭлементовФормы();
		
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ОбновитьВсегоВТЧСервер();
	ОбновитьПараметрВыработкиВременныйСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	ПередЗаписьюСервер();
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ОбновитьВсегоВТЧСервер();
	ОбновитьПараметрВыработкиВременныйСервер();
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// уатСогласованиеДокументов
	уатСогласованиеДокументовКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр);
	// Конец уатСогласованиеДокументов

	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если флВопросЗакрытиеФормы Тогда
		Отказ = Истина;
		Оповещ = Новый ОписаниеОповещения("ПередЗакрытиемВопрос", ЭтотОбъект);
		ПоказатьВопрос(Оповещ, "При проверке корректности заполнения документа возникли предупреждения!
			|Продолжить закрытие формы?", РежимДиалогаВопрос.ОКОтмена);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// уатСогласованиеДокументов
	уатСогласованиеДокументовКлиент.ПослеЗаписи(ЭтотОбъект);
	// Конец уатСогласованиеДокументов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПланированияПриИзменении(Элемент)
	
	Если СоставПланаПериоды.Количество() > 0 Тогда
		ТекстНСТР = НСтр("ru='Принять изменение и очистить табличную часть?'");
		
		ПоказатьВопрос(Новый ОписаниеОповещения("СценарийПриИзмененииВопрос", ЭтотОбъект), 
		ТекстНСТР, РежимДиалогаВопрос.ОКОтмена, 0, КодВозвратаДиалога.Отмена);
		
		Возврат;
		
	КонецЕсли;
	
	ВыполнитьДействияПриИзмененииСценария(Объект.Сценарий, Истина);
	
	ВывестиСуммовыеИтогиДокумента();
	УстановитьВидимостьИДоступностьЭлементовФормы();
	ВариантОтображенияПриИзменении();

	СценарийПриИзмененииПродолжение();

	уатОбщегоНазначенияТиповые.уатВыровнятьДатуПоНачалуПериода(Объект.ДатаПланирования,
	уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.Сценарий, "Периодичность"));
	ОбновитьНадписьПериодПланирования();
	
КонецПроцедуры

&НаКлиенте
Процедура ТребуетСогласованияПриИзменении(Элемент)
	
	// уатСогласованиеДокументов
	уатСогласованиеДокументовКлиент.ТребуетСогласованияПриИзменении(ЭтотОбъект);
	// Конец уатСогласованиеДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСогласованНажатие(Элемент)
	
	// уатСогласованиеДокументов
	уатСогласованиеДокументовКлиент.НадписьСогласованНажатие(ЭтотОбъект);
	// Конец уатСогласованиеДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура СценарийПриИзменении(Элемент)
	
	Если мТекущийСценарий <> Объект.Сценарий Тогда
		
		Если СоставПланаПериоды.Количество() > 0 Тогда
			ТекстНСТР = НСтр("ru='Принять изменение и очистить табличную часть?'");
			
			ПоказатьВопрос(Новый ОписаниеОповещения("СценарийПриИзмененииВопрос", ЭтотОбъект), 
				ТекстНСТР, РежимДиалогаВопрос.ОКОтмена, 0, КодВозвратаДиалога.Отмена);
				
			Возврат;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ВыполнитьДействияПриИзмененииСценария(Объект.Сценарий, Истина, Истина);
	
	ВывестиСуммовыеИтогиДокумента();
	УстановитьВидимостьИДоступностьЭлементовФормы();
	ВариантОтображенияПриИзменении();

	СценарийПриИзмененииПродолжение();
КонецПроцедуры

&НаКлиенте
Процедура СценарийПриИзмененииВопрос(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	КодВозврата = РезультатВопроса;
	
	Если КодВозврата = КодВозвратаДиалога.ОК Тогда
		СоставПланаПериоды.Очистить();
	Иначе
		Объект.Сценарий = мТекущийСценарий;
	КонецЕсли;
	
	ВыполнитьДействияПриИзмененииСценария(Объект.Сценарий, Истина, Истина);
	
	ВывестиСуммовыеИтогиДокумента();
	УстановитьВидимостьИДоступностьЭлементовФормы();
	ВариантОтображенияПриИзменении();

	уатОбщегоНазначенияТиповые.уатВыровнятьДатуПоНачалуПериода(Объект.ДатаПланирования, ХарактеристикиСценария.Периодичность);
	ОбновитьНадписьПериодПланирования();
	
	СценарийПриИзмененииПродолжение();

КонецПроцедуры

&НаКлиенте
Процедура СценарийПриИзмененииПродолжение()
	// установка валюты из сценария
	Если ХарактеристикиСценария.Раздел =
			ПредопределенноеЗначение("Перечисление.уатРазделыПланирования.ПредоставленныеУслуги")
		ИЛИ ХарактеристикиСценария.Раздел =
			ПредопределенноеЗначение("Перечисление.уатРазделыПланирования.ДоходыРасходы") Тогда
			
		СтруктураДанные = ПолучитьДанныеСценарийПриИзменении(Объект.Дата, Объект.ВалютаДокумента, Объект.Сценарий);
		ВалютаРасчетовПередИзменением = ВалютаРасчетов;
		ВалютаРасчетов = СтруктураДанные.ВалютаРасчетов;
		Если ЗначениеЗаполнено(Объект.Сценарий) Тогда 
			Объект.КурсДокумента	   = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Курс = 0, 1,
											СтруктураДанные.ВалютаРасчетовКурсКратность.Курс);
			Объект.КратностьДокумента = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность = 0, 1,
											СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность);
		КонецЕсли;
		Если (ЗначениеЗаполнено(Объект.Сценарий)
			И ЗначениеЗаполнено(ВалютаРасчетов)
			И Объект.Сценарий <> мТекущийСценарий
			И ВалютаРасчетовПередИзменением <> СтруктураДанные.ВалютаРасчетов)
			И Объект.ВалютаДокумента <> СтруктураДанные.ВалютаРасчетов Тогда
			
			Объект.ВалютаДокумента = СтруктураДанные.ВалютаРасчетов;
			
			//ПоказатьПредупреждение(Неопределено, НСтр("en='Changed currency script!"
			// "You need to check the currency of the document!';ru='Изменилась валюта по сценарию! "
			//" Необходимо проверить валюту документа!'"));
			//ОбработатьИзмененияПоКнопкеЦеныИВалюты(ВалютаРасчетовПередИзменением, Истина);
			
			ПересчитатьЦеныТабличнойЧастиПоВалюте(ВалютаРасчетовПередИзменением);
			ПересчитатьСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС();
			ОбновитьВсегоВТЧ();
			РассчитатьСуммуДокумента();
	    КонецЕсли;
	Иначе
		Объект.ВалютаДокумента    = Неопределено;
		Объект.КурсДокумента      = 0;
		Объект.КратностьДокумента = 0;
		Объект.УчитыватьНДС       = Ложь;
		Объект.СуммаВключаетНДС   = Ложь;
	КонецЕсли;
		
	уатОбщегоНазначенияТиповые.уатВыровнятьДатуПоНачалуПериода(Объект.ДатаПланирования,
		уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.Сценарий, "Периодичность"));
	ОбновитьНадписьПериодПланирования();
	
	// установки по типу планируемых показателей
	ВывестиСуммовыеИтогиДокумента();
	
	ФорматироватьКолонкиДетализации();
	
	мТекущийСценарий = Объект.Сценарий;
КонецПроцедуры

// Получает набор данных с сервера для процедуры СценарийПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеСценарийПриИзменении(Дата, ВалютаДокумента, Сценарий)
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
	"ВалютаРасчетов",
	Сценарий.Валюта);
	
	СтруктураДанные.Вставить(
	"ВалютаРасчетовКурсКратность",
	РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", Сценарий.Валюта)));
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДоговорПриИзменении()

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	Если Объект.Организация = ОрганизацияПередИзменением Тогда
		Возврат;
	КонецЕсли;
	
	// уатСогласованиеДокументов
	уатСогласованиеДокументовКлиент.ОрганизацияПодразделениеПриИзменении(ЭтотОбъект);
	// Конец уатСогласованиеДокументов

	ОрганизацияПередИзменением = Объект.Организация;
	
	УчитыватьНДСПередИзменением     = Объект.УчитыватьНДС;
	СуммаВключаетНДСПередИзменением = Объект.СуммаВключаетНДС;
	
	Объект.УчитыватьНДС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.УчитыватьНДС"));
	Объект.СуммаВключаетНДС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.СуммаВключаетНДС"));

	Если Объект.УчитыватьНДС <> УчитыватьНДСПередИзменением ИЛИ Объект.СуммаВключаетНДС <> СуммаВключаетНДСПередИзменением Тогда
		ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
		ПересчитатьСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС();
		ОбновитьВсегоВТЧ();
		РассчитатьСуммуДокумента();
		ВывестиСуммовыеИтогиДокумента();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормы_СоставПлана

&НаКлиенте
Процедура СоставПланаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекСтрока = Элементы.СоставПланаПериоды.ТекущиеДанные;
		
	Если ТекСтрока.ПараметрВыработкиВременный Тогда
		ФорматРедактирования = "ЧДЦ=2; ЧРД=:";
	Иначе
		ФорматРедактирования = "";
	КонецЕсли;
	
	ПодставлятьСтавку = НоваяСтрока И НЕ Копирование И Объект.УчитыватьНДС
			И (ХарактеристикиСценария.Раздел
				= ПредопределенноеЗначение("Перечисление.уатРазделыПланирования.ПредоставленныеУслуги") 
			ИЛИ ХарактеристикиСценария.Раздел
				= ПредопределенноеЗначение("Перечисление.уатРазделыПланирования.ДоходыРасходы"));
	
	ОсновнаяСтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнаяСтавкаНДС");
	Элементы["СоставПланаПериодыКоличество_Всего"].ФорматРедактирования = ФорматРедактирования;
	Если ПодставлятьСтавку Тогда
		ТекСтрока["СоставПланаПериодыСтавкаНДС_Всего"] = ОсновнаяСтавкаНДС;
	КонецЕсли;
	
	Если ИспользоватьКраткосрочноеПланирование Тогда
		Для Сч = 0 По КоличествоИнтервалов Цикл
			Элементы["СоставПланаПериодыКоличество_" + Сч].ФорматРедактирования = ФорматРедактирования;
			Если ПодставлятьСтавку Тогда
				ТекСтрока["СоставПланаПериодыСтавкаНДС_" + Сч] = ОсновнаяСтавкаНДС;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоставПланаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	РассчитатьСуммуДокумента();
	ОбновитьВсегоВТЧ();
КонецПроцедуры

&НаКлиенте
Процедура СоставПланаПослеУдаления(Элемент)
	РассчитатьСуммуДокумента();
	ОбновитьВсегоВТЧ();
КонецПроцедуры

&НаКлиенте
Процедура СоставПланаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекСтрока = Элементы.СоставПланаПериоды.ТекущиеДанные;
	
	Если Поле = Элементы.СоставПланаПериодыРучнойВвод Тогда
		ТекСтрока.РучнойВвод = НЕ ТекСтрока.РучнойВвод;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоставПланаПараметрВыработкиПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.СоставПланаПериоды.ТекущиеДанные;
	
	ОбновитьПараметрВыработкиВременныйСервер();
	
	Если СтрокаТабличнойЧасти.ПараметрВыработкиВременный Тогда
		ФорматРедактирования = "ЧДЦ=2; ЧРД=:";
	Иначе
		ФорматРедактирования = "";
	КонецЕсли;
	
	Элементы["СоставПланаПериодыКоличество_Всего"].ФорматРедактирования = ФорматРедактирования;
	
	Если ИспользоватьКраткосрочноеПланирование Тогда
		Для Сч = 0 По КоличествоИнтервалов Цикл
			Элементы["СоставПланаПериодыКоличество_" + Сч].ФорматРедактирования = ФорматРедактирования;
		КонецЦикла;	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СоставПланаКоличествоПриИзменении(Элемент)
	
	ТекСтрока = Элементы.СоставПланаПериоды.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекСтрока.АлгоритмРасчетаПараметра) Тогда
		ТекСтрока.РучнойВвод = Истина;
	КонецЕсли;
	Если ТекСтрока.ПараметрВыработкиВременный Тогда
		уатЗащищенныеФункцииСервер.КонтрольВводаВремени(ТекСтрока[Элемент.Имя]);
	КонецЕсли;
	
	Если СтрНайти(Элемент.Имя, "Всего") <> 0 Тогда
		Индекс = "Всего";
	Иначе
		Индекс = Сред(Элемент.Имя, СтрНайти(Элемент.Имя, "_") + 1, СтрДлина(Элемент.Имя));
	КонецЕсли;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрока, Индекс);
	АвтоматическоеОбновленияИтоговыхПоказателей(ТекСтрока, Индекс);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СоставПланаЦенаПриИзменении(Элемент)
	
	ТекСтрока = Элементы.СоставПланаПериоды.ТекущиеДанные;
		
	Если СтрНайти(Элемент.Имя, "Всего") <> 0 Тогда
		Индекс = "Всего";
	Иначе
		Индекс = Сред(Элемент.Имя, СтрНайти(Элемент.Имя, "_") + 1, СтрДлина(Элемент.Имя));
	КонецЕсли;

	РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрока, Индекс);
	АвтоматическоеОбновленияИтоговыхПоказателей(ТекСтрока, Индекс);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СоставПланаСуммаПриИзменении(Элемент)
	
	ТекСтрока = Элементы.СоставПланаПериоды.ТекущиеДанные;
		
	Если СтрНайти(Элемент.Имя, "Всего") <> 0 Тогда
		Индекс = "Всего";
	Иначе
		Индекс = Сред(Элемент.Имя, СтрНайти(Элемент.Имя, "_") + 1, СтрДлина(Элемент.Имя));
	КонецЕсли;

	Количество = ТекСтрока["СоставПланаПериодыКоличество_" + Индекс];
	Если Количество <> 0 Тогда
		ТекСтрока["СоставПланаПериодыЦена_" + Индекс]
			= ТекСтрока["СоставПланаПериодыСумма_" + Индекс] / Количество;
	КонецЕсли;
	
	РассчитатьСуммуНДС(ТекСтрока, Индекс);
	АвтоматическоеОбновленияИтоговыхПоказателей(ТекСтрока, Индекс);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СоставПланаСтавкаНДСПриИзменении(Элемент)
	
	ТекСтрока = Элементы.СоставПланаПериоды.ТекущиеДанные;
		
	Если СтрНайти(Элемент.Имя, "Всего") <> 0 Тогда
		Индекс = "Всего";
	Иначе
		Индекс = Сред(Элемент.Имя, СтрНайти(Элемент.Имя, "_") + 1, СтрДлина(Элемент.Имя));
	КонецЕсли;
	
	РассчитатьСуммуНДС(ТекСтрока, Индекс);
	АвтоматическоеОбновленияИтоговыхПоказателей(ТекСтрока, Индекс);
	
КонецПроцедуры

&НаКлиенте
Процедура СоставПланаНоменклатураПриИзменении(Элемент)
	Если Объект.УчитыватьНДС 
		И (уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.Сценарий, "Раздел")
		= ПредопределенноеЗначение("Перечисление.уатРазделыПланирования.ПредоставленныеУслуги")
		ИЛИ уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.Сценарий, "Раздел")
		= ПредопределенноеЗначение("Перечисление.уатРазделыПланирования.ДоходыРасходы")) Тогда
		
		СтрокаТабличнойЧасти = Элементы.СоставПланаПериоды.ТекущиеДанные;
		
		Если ИспользоватьКраткосрочноеПланирование Тогда
			Для Сч = 0 По КоличествоИнтервалов Цикл
				СтрокаТабличнойЧасти["СоставПланаПериодыСтавкаНДС_" + Сч]
					= уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(СтрокаТабличнойЧасти.Номенклатура, "СтавкаНДС");
				РассчитатьСуммуНДС(СтрокаТабличнойЧасти, Сч);
			КонецЦикла;
		КонецЕсли;
		СтрокаТабличнойЧасти["СоставПланаПериодыСтавкаНДС_Всего"]
			= уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(СтрокаТабличнойЧасти.Номенклатура, "СтавкаНДС");		
		РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоставПланаПериодыДетализацияПланированияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Элемент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.уатТС") Тогда 
		уатИнтерфейсВводаТС.РеквизитТСНачалоВыбора(Элемент,
			Элементы.СоставПланаПериоды.ТекущиеДанные.ДетализацияПланирования, ДанныеВыбора,
			СтандартнаяОбработка, СтруктураОтборТС());
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоставПланаПериодыДетализацияПланированияАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Элемент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.уатТС") Тогда 
		уатИнтерфейсВводаТС.РеквизитТСАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание,
			СтандартнаяОбработка, СтруктураОтборТС());
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоставПланаПериодыДетализацияПланированияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	Если Элемент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.уатТС") Тогда
		уатИнтерфейсВводаТС.РеквизитТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
			СтандартнаяОбработка, СтруктураОтборТС());
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоставПланаПериодыДетализацияПланированияПриИзменении(Элемент)
	Если Элемент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.уатТС") Тогда
		ТекСтрока = Элементы.СоставПланаПериоды.ТекущиеДанные;
	
		Если НЕ ЗначениеЗаполнено(ТекСтрока.Колонна) Тогда
			МестонахождениеТС = уатОбщегоНазначения.МестонахождениеТС(ТекСтрока.ДетализацияПланирования,
				Объект.ДатаПланирования);
			ТекСтрока.Колонна = МестонахождениеТС.Колонна;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура РедактироватьЦеныИВалюту(Команда)
	ОбработатьИзмененияПоКнопкеЦеныИВалюты(Объект.ВалютаДокумента);
	ОбновитьВсегоВТЧ();
	РассчитатьСуммуДокумента();
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура АвтоматическийРежимОбновленияИтоговыхПоказателей(Команда)
	
	Если Объект.АвтоматическийРежимОбновленияИтоговыхПоказателей Тогда 
		Возврат;
	КонецЕсли;
	
	Объект.АвтоматическийРежимОбновленияИтоговыхПоказателей = Истина;
	УстановитьВидимостьИДоступностьЭлементовФормы();
	Для Каждого ТекСтрока Из СоставПланаПериоды Цикл
		АвтоматическоеОбновленияИтоговыхПоказателей(ТекСтрока, "Всего");
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РучнойРежимОбновленияИтоговыхПоказателей(Команда)
	
	Если НЕ Объект.АвтоматическийРежимОбновленияИтоговыхПоказателей Тогда 
		Возврат;
	КонецЕсли;
	
	Объект.АвтоматическийРежимОбновленияИтоговыхПоказателей = Ложь;
	УстановитьВидимостьИДоступностьЭлементовФормы();

КонецПроцедуры

&НаКлиенте
Процедура ПолныйВариантОтображения(Команда)
	
	Если ВариантОтображения = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	ВариантОтображения = 0;
	УстановитьВидимостьИДоступностьЭлементовФормы();
	ВариантОтображенияПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура КомпактныйВариантОтображения(Команда)
	
	Если ВариантОтображения = 1 Тогда 
		Возврат;
	КонецЕсли;
	
	ВариантОтображения = 1;
	УстановитьВидимостьИДоступностьЭлементовФормы();
	ВариантОтображенияПриИзменении();

КонецПроцедуры

// Процедура выполняет пересчет в табличной части документа после изменений 
// в форме "Цены и валюта".Выполняется пересчет колонок: цена, скидка, сумма,
// сумма НДС, всего.
//
&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты(Знач ВалютаРасчетовПередИзменением, ПересчитатьЦены = Ложь)
	
	// 1. Формируем структуру параметров для заполнения формы "Цены и Валюта".
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВалютаДокумента",		  Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("ИзменениеВалютыДокумента", Ложь);
	СтруктураПараметров.Вставить("КурсДокумента",		  Объект.КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента",	  Объект.КратностьДокумента);
	//СтруктураПараметров.Вставить("Контрагент",			  Объект.Контрагент);
	//СтруктураПараметров.Вставить("Договор",				  Объект.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("Организация",			  Объект.Организация);
	СтруктураПараметров.Вставить("ДатаДокумента",		  Объект.Дата);
	СтруктураПараметров.Вставить("ПерезаполнитьЦены",	  Ложь);
	СтруктураПараметров.Вставить("ПересчитатьЦены",		  ПересчитатьЦены);
	СтруктураПараметров.Вставить("БылиВнесеныИзменения",  Ложь);
	СтруктураПараметров.Вставить("СуммаВключаетНДС",      Объект.СуммаВключаетНДС);
	СтруктураПараметров.Вставить("НалогообложениеНДС",	  Объект.УчитыватьНДС);
	// Для объедининенного решения с БП 3
	СтруктураПараметров.Вставить("ДокументБезНДС",       НЕ Объект.УчитыватьНДС);
	// Для объедининенного решения с БП 3

	Если НЕ ПравоРедактированиеДокумента() Тогда
		СтруктураПараметров.Вставить("ТолькоПросмотр", Истина);
	КонецЕсли;
	
	// 2. Открываем форму "Цены и Валюта".
	ДополнительныеПараметры = Новый Структура("ВалютаРасчетовПередИзменением, ПересчитатьЦены", ВалютаРасчетовПередИзменением, ПересчитатьЦены);
	СтруктураЦеныИВалюта = ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров,,,,,
		Новый ОписаниеОповещения("ОбработкаЗакрытияФормыЦеныИВалюта", ЭтотОбъект, ДополнительныеПараметры));
	
КонецПроцедуры // ОбработатьИзмененияПоКнопкеЦеныИВалюты()

&НаКлиенте
Процедура ОбработкаЗакрытияФормыЦеныИВалюта(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Отмена ИЛИ НЕ ПравоРедактированиеДокумента() Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураЦеныИВалюта = Результат;
	
	// 3. Перезаполняем табличную часть "Номенклатура", если были внесены изменения в форме "Цены и Валюта".
	Если ТипЗнч(СтруктураЦеныИВалюта) = Тип("Структура") Тогда
		
		// Для объедининенного решения с БП 3
		уатОбщегоНазначенияКлиент.ЗаполнитьСтруктуруЦеныИВалютыДляБП3(СтруктураЦеныИВалюта, Объект.ВалютаДокумента,
			ДополнительныеПараметры.ВалютаРасчетовПередИзменением, Объект.УчитыватьНДС, Объект.СуммаВключаетНДС);
		// Для объедининенного решения с БП 3
		
		Если СтруктураЦеныИВалюта.Свойство("ВалютаДокумента") И СтруктураЦеныИВалюта.Свойство("Курс") И СтруктураЦеныИВалюта.Свойство("Кратность") И
			СтруктураЦеныИВалюта.Свойство("СуммаВключаетНДС") И  СтруктураЦеныИВалюта.Свойство("НалогообложениеНДС") Тогда
			Объект.ВалютаДокумента		   = СтруктураЦеныИВалюта.ВалютаДокумента;
			Объект.КурсДокумента	   = СтруктураЦеныИВалюта.Курс;
			Объект.КратностьДокумента = СтруктураЦеныИВалюта.Кратность;
			Объект.СуммаВключаетНДС		   = СтруктураЦеныИВалюта.СуммаВключаетНДС;
			Объект.УчитыватьНДС			   = СтруктураЦеныИВалюта.НалогообложениеНДС;
		КонецЕсли;
		// Пересчитываем сумму если изменился признак Налогообложение НДС.
		Если СтруктураЦеныИВалюта.Свойство("НалогообложениеНДС") И СтруктураЦеныИВалюта.Свойство("ПредНалогообложениеНДС") Тогда
			Если СтруктураЦеныИВалюта.НалогообложениеНДС <> СтруктураЦеныИВалюта.ПредНалогообложениеНДС Тогда
				ЗаполнитьСтавкуНДСПоНалогообложениеНДС();		
			КонецЕсли;
		КонецЕсли;
		
		// Пересчитываем цены по валюте.
		Если СтруктураЦеныИВалюта.Свойство("ПересчитатьЦены") Тогда
			Если СтруктураЦеныИВалюта.ПересчитатьЦены Тогда	
				ПересчитатьЦеныТабличнойЧастиПоВалюте(ДополнительныеПараметры.ВалютаРасчетовПередИзменением);
			КонецЕсли;
		КонецЕсли;
		
		// Пересчитываем сумму если изменился признак "Сумма включает НДС".
		Если СтруктураЦеныИВалюта.Свойство("СуммаВключаетНДС") И СтруктураЦеныИВалюта.Свойство("ПредСуммаВключаетНДС") Тогда
			Если СтруктураЦеныИВалюта.СуммаВключаетНДС <> СтруктураЦеныИВалюта.ПредСуммаВключаетНДС Тогда
				ПересчитатьСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьВсегоВТЧ();
	РассчитатьСуммуДокумента();
	ВывестиСуммовыеИтогиДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПлан(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Сценарий) Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Не заполнен сценарий планирования!'"));
		Возврат;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(Объект.ДатаПланирования) Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("ru = 'Не указан период планирования!'"));
		Возврат;
	КонецЕсли;
	
	Если СоставПланаПериоды.Количество() > 0 Тогда
		ТекстНСТР = НСтр("en='Clear the tabular section before filling?';ru='Очистить табличную часть перед заполнением?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПланЗавершение1", ЭтотОбъект), ТекстНСТР, РежимДиалогаВопрос.ДаНетОтмена);
        Возврат;
	КонецЕсли;
	
	ЗаполнитьПланФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПланЗавершение1(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Отмена Тогда
        Возврат;
    ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
        Объект.СоставПлана.Очистить();
		СоставПланаПериоды.Очистить();
    КонецЕсли;
    
    ЗаполнитьПланФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПланФрагмент()
    
    Перем ПараметрыФормы, Рез;
    
    ПараметрыФормы = Новый Структура;
    ПараметрыФормы.Вставить("Сценарий", Объект.Сценарий);
    ПараметрыФормы.Вставить("Организация", Объект.Организация);
    ПараметрыФормы.Вставить("Подразделение", Объект.Подразделение);
    ПараметрыФормы.Вставить("ДатаНач", Объект.ДатаПланирования);
    ПараметрыФормы.Вставить("ДатаКон", Объект.ДатаПланирования);
    ПараметрыФормы.Вставить("УчитыватьНДС", Объект.УчитыватьНДС);
    ПараметрыФормы.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
    уатОбщегоНазначенияТиповые.уатВыровнятьДатуПоКонцуПериода(ПараметрыФормы.ДатаКон,
    	уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.Сценарий, "Периодичность"));
    
    Рез = Неопределено;
    
    
    ОткрытьФорму("Обработка.уатПомощникПланированияРаботыТС.Форма", ПараметрыФормы, ЭтотОбъект,,,, Новый ОписаниеОповещения("ЗаполнитьПланЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПланЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Рез = Результат;
    Если ТипЗнч(Рез) = Тип("Массив") Тогда
		флПланированиеУслуг = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.Сценарий, "Раздел") = ПредопределенноеЗначение("Перечисление.уатРазделыПланирования.ПредоставленныеУслуги");
		Для Каждого ТекСтрока Из Рез Цикл
            НоваяСтрока = СоставПланаПериоды.Добавить();
            ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			//Если Объект.УчитыватьНДС И флПланированиеУслуг И НЕ ЗначениеЗаполнено(НоваяСтрока.СтавкаНДС) Тогда
			//	НоваяСтрока.СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнаяСтавкаНДС");
			//	РассчитатьСуммуНДС(НоваяСтрока);
			//КонецЕсли;
			Если ИспользоватьКраткосрочноеПланирование Тогда
				Для Сч = 0 По КоличествоИнтервалов Цикл
					НоваяСтрока["СоставПланаПериодыКоличество_" + Сч] = ТекСтрока["СоставПланаКоличество_" + Сч];
					НоваяСтрока["СоставПланаПериодыЦена_" + Сч]       = ТекСтрока["СоставПланаЦена_" + Сч];
					НоваяСтрока["СоставПланаПериодыСумма_" + Сч]      = ТекСтрока["СоставПланаСумма_" + Сч];
					НоваяСтрока["СоставПланаПериодыСтавкаНДС_" + Сч]  = ТекСтрока["СоставПланаСтавкаНДС_" + Сч];
					НоваяСтрока["СоставПланаПериодыСуммаНДС_" + Сч]   = ТекСтрока["СоставПланаСуммаНДС_" + Сч];
					НоваяСтрока["СоставПланаПериодыВсего_" + Сч]      = ТекСтрока["СоставПланаВсего_" + Сч];
				КонецЦикла;
			КонецЕсли;
			НоваяСтрока["СоставПланаПериодыЦена_Всего"]            = ТекСтрока["СоставПланаЦена_Всего"];
			НоваяСтрока["СоставПланаПериодыКоличество_Всего"]      = ТекСтрока["СоставПланаКоличество_Всего"];
			НоваяСтрока["СоставПланаПериодыСумма_Всего"]           = ТекСтрока["СоставПланаСумма_Всего"];
			НоваяСтрока["СоставПланаПериодыСуммаНДС_Всего"]        = ТекСтрока["СоставПланаСуммаНДС_Всего"];
			НоваяСтрока["СоставПланаПериодыСтавкаНДС_Всего"]       = ТекСтрока["СоставПланаСтавкаНДС_Всего"];
			НоваяСтрока["СоставПланаПериоды_Всего"]                = ТекСтрока["СоставПлана_Всего"];

		КонецЦикла;
        
        ОбновитьВсегоВТЧСервер();
        ОбновитьПараметрВыработкиВременныйСервер();
        Элементы.СоставПланаПериоды.Обновить();
		РассчитатьСуммуДокумента();
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПланЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Да Тогда
       СоставПланаПериоды.Очистить();
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПлан(Команда)
	Если СоставПланаПериоды.Количество() > 0 Тогда
		ТекстНСТР = НСтр("en='Plan will be cleared. Continue?';ru='Будет выполнена очистка состава плана. Продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ОчиститьПланЗавершение", ЭтотОбъект),
			ТекстНСТР, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
	КонецЕСли;
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПоТарифам(Команда)
	Если СоставПланаПериоды.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстНстр = Нстр("ru = 'Цена и сумма услуг будет перезаполнена по тарифам ТС во всех строках. Продолжить?'");
	ПоказатьВопрос(Новый ОписаниеОповещения("РассчитатьПоТарифамЗавершение", ЭтотОбъект),
		ТекстНстр, РежимДиалогаВопрос.ОКОтмена);
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПоФормуле(Команда)
	
	Если СоставПланаПериоды.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;

	РассчитатьПоФормулеСервер();
	ОбновитьСуммуВТЧ();
	РассчитатьСуммуДокумента();
	ОбновитьВсегоВТЧ();
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПоТарифамЗавершение(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	РассчитатьПоТарифамСервер(ХарактеристикиСценария);
	Для Каждого ТекСтрока Из СоставПланаПериоды Цикл
		РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрока, "Всего");
		Если ИспользоватьКраткосрочноеПланирование Тогда
			Для Сч = 0 По КоличествоИнтервалов Цикл
				РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрока, Сч);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

	РассчитатьСуммуДокумента();
	ОбновитьВсегоВТЧ();
КонецПроцедуры

&НаСервере
Процедура РассчитатьПоТарифамСервер(ХарактеристикиСценария)
	КешУскорения = Неопределено;
	Для Каждого ТекСтрока Из СоставПланаПериоды Цикл
		РассчитатьУслугуПоТарифамВСтроке(ТекСтрока, КешУскорения, ХарактеристикиСценария);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура РассчитатьУслугуПоТарифамВСтроке(ТекСтрока, КешУскорения, ХарактеристикиСценария)
	
	СписокФильтров = Новый Структура();
	СписокФильтров.Вставить("Дата",                 Объект.ДатаПланирования);
	СписокФильтров.Вставить("Организация",          Объект.Организация);
	СписокФильтров.Вставить("Контрагент",           ТекСтрока.Контрагент);
	СписокФильтров.Вставить("ДоговорКонтрагента",   ТекСтрока.Договор);
	СписокФильтров.Вставить("ОбъектСтроительства",  ТекСтрока.ОбъектСтроительства);
	СписокФильтров.Вставить("ВидПеревозки",         ТекСтрока.ВидПеревозки);
	СписокФильтров.Вставить("НаправлениеПеревозки", ТекСтрока.НаправлениеПеревозки);
	СписокФильтров.Вставить("Номенклатура",         ТекСтрока.Номенклатура);
	
	Если ХарактеристикиСценария.ВариантАналитикиМаршрут = Перечисления.уатВариантыАналитик.Маршрут Тогда
		СписокФильтров.Вставить("Маршрут",          ТекСтрока.Маршрут);
	ИначеЕсли ХарактеристикиСценария.ВариантАналитикиМаршрут = Перечисления.уатВариантыАналитик.ПунктНазначения Тогда
		СписокФильтров.Вставить("ПунктНазначения",  ТекСтрока.Маршрут);
	Иначе
		СписокФильтров.Вставить("ПунктОтправления", ТекСтрока.Маршрут);
	КонецЕсли;
	
	// Параметры сложных тарифов
	мГрузоподъемность = 0;
	мОбъемКузова      = 0;
	мКлассГруза       = 0;

	Если ТипЗнч(ТекСтрока.ДетализацияПланирования) = Тип("СправочникСсылка.уатТС") Тогда
		СписокФильтров.Вставить("Тягач",        ТекСтрока.ДетализацияПланирования);
		СписокФильтров.Вставить("МодельТягача", ТекСтрока.ДетализацияПланирования.Модель);
		СписокФильтров.Вставить("ТипТягача",    ТекСтрока.ДетализацияПланирования.ТипТС);
		
		мГрузоподъемность = ТекСтрока.ДетализацияПланирования.Модель.Грузоподъемность;
		мОбъемКузова      = ТекСтрока.ДетализацияПланирования.Модель.ОбъемКузова;
		
	ИначеЕсли ТипЗнч(ТекСтрока.ДетализацияПланирования) = Тип("СправочникСсылка.уатМоделиТС") Тогда
		СписокФильтров.Вставить("МодельТягача", ТекСтрока.ДетализацияПланирования);
		СписокФильтров.Вставить("ТипТягача",    ТекСтрока.ДетализацияПланирования.ТипТС);
		
		мГрузоподъемность = ТекСтрока.ДетализацияПланирования.Грузоподъемность;
		мОбъемКузова      = ТекСтрока.ДетализацияПланирования.ОбъемКузова;
	ИначеЕсли ТипЗнч(ТекСтрока.ДетализацияПланирования) = Тип("СправочникСсылка.уатТипыТС") Тогда
		СписокФильтров.Вставить("ТипТягача",  ТекСтрока.ДетализацияПланирования);
	КонецЕсли;
	
	ДопФильтры = Новый Структура();
	ДопФильтры.Вставить("Услуга",                ТекСтрока.Услуга);
	
	ПрейскурантПоставщика = Объект.Сценарий.ПолучательУслуг = Перечисления.уатПолучателиУслуг.НашаОрганизация
		ИЛИ ТипЗнч(ТекСтрока.Статья) = Тип("СправочникСсылка.уатСтатьиРасходов");
	ДопФильтры.Вставить("ПрейскурантПоставщика", ПрейскурантПоставщика);
	ДопФильтры.Вставить("Контрагент",            ТекСтрока.Контрагент);
	ДопФильтры.Вставить("ПараметрВыработки",     ТекСтрока.ПараметрВыработки);
	
	мРасстояниеГруз = 0;
	мВремяРаботы    = 0;
	мКоличествоТонн = 0;
	мОбъем          = 0;
	Если ТекСтрока.ПараметрВыработки = Справочники.уатПараметрыВыработки.ПробегСГрузом Тогда
		мРасстояниеГруз = ТекСтрока.СоставПланаПериодыКоличество_Всего;
	ИначеЕсли ТекСтрока.ПараметрВыработки = Справочники.уатПараметрыВыработки.ВремяВРаботе Тогда
		мВремяРаботы = уатОбщегоНазначения.уатВремяВСекунды(ТекСтрока.СоставПланаПериодыКоличество_Всего);
	ИначеЕсли ТекСтрока.ПараметрВыработки = Справочники.уатПараметрыВыработки.ВесГруза Тогда
		мКоличествоТонн = ТекСтрока.СоставПланаПериодыКоличество_Всего;
	ИначеЕсли ТекСтрока.ПараметрВыработки = Справочники.уатПараметрыВыработки.Объем Тогда
		мОбъем = ТекСтрока.СоставПланаПериодыКоличество_Всего;
	КонецЕсли;
	
	ЗначенияГруппировок = Новый Соответствие;
	ЗначенияГруппировок.Вставить(Справочники.уатПараметрыВыработки.ПробегСГрузом, мРасстояниеГруз);
	ЗначенияГруппировок.Вставить(Справочники.уатПараметрыВыработки.ВремяВРаботе, мВремяРаботы/3600);
	ЗначенияГруппировок.Вставить(Справочники.уатПараметрыВыработки.ВесГруза, мКоличествоТонн);
	ЗначенияГруппировок.Вставить(Справочники.уатПараметрыВыработки.Объем, мОбъем);
	ЗначенияГруппировок.Вставить(Справочники.уатПараметрыВыработки.ТнКм, мКоличествоТонн * мРасстояниеГруз);
	ЗначенияГруппировок.Вставить(Справочники.уатПараметрыВыработки.ОбъемКм, мОбъем * мРасстояниеГруз);
	ЗначенияГруппировок.Вставить(Перечисления.уатГруппировкиТарифов.Расстояние, мРасстояниеГруз);
	ЗначенияГруппировок.Вставить(Перечисления.уатГруппировкиТарифов.ВремяРаботы, мВремяРаботы/3600);
	ЗначенияГруппировок.Вставить(Перечисления.уатГруппировкиТарифов.Грузоподъемность, мГрузоподъемность);
	ЗначенияГруппировок.Вставить(Перечисления.уатГруппировкиТарифов.ОбъемКузова, мОбъемКузова);
	ЗначенияГруппировок.Вставить(Перечисления.уатГруппировкиТарифов.ВесГруза, мКоличествоТонн);
	ЗначенияГруппировок.Вставить(Перечисления.уатГруппировкиТарифов.ОбъемГруза, мОбъем);
	ЗначенияГруппировок.Вставить(Перечисления.уатГруппировкиТарифов.КлассГруза, мКлассГруза);
		
	// промежуточная таблица стоимости услуг для выбора оптимального тарифа
	тблСтоимость = Новый ТаблицаЗначений;
	тблСтоимость.Колонки.Добавить("ПараметрВыработки");
	тблСтоимость.Колонки.Добавить("Контрагент");
	тблСтоимость.Колонки.Добавить("Договор");
	тблСтоимость.Колонки.Добавить("Маршрут");
	тблСтоимость.Колонки.Добавить("ОбъектСтроительства");
	тблСтоимость.Колонки.Добавить("ВидПеревозки");
	тблСтоимость.Колонки.Добавить("НаправлениеПеревозки");
	тблСтоимость.Колонки.Добавить("НоменклатураУслуги");
	тблСтоимость.Колонки.Добавить("Количество");
	тблСтоимость.Колонки.Добавить("Цена");
	тблСтоимость.Колонки.Добавить("Сумма");
	тблСтоимость.Колонки.Добавить("СтавкаНДС");
	тблСтоимость.Колонки.Добавить("СуммаНДС");
	тблСтоимость.Колонки.Добавить("Прейскурант");
	тблСтоимость.Колонки.Добавить("Тариф");
	тблСтоимость.Колонки.Добавить("СтепеньСовпаденияФильтров");
		
	// ищем прейскурант
	мТаблицаПрейскурант = уатРасчетыПоТарифам.НайтиПрейскурант(СписокФильтров, Объект.Организация, Объект.ДатаПланирования, ДопФильтры, КешУскорения);
		
	// не нашли прейскурант
	Если мТаблицаПрейскурант.Количество() = 0 Тогда
		ТекСтрока.СоставПланаПериодыЦена_Всего = 0;
		Возврат;
	КонецЕсли;	
		
	// нашли прейскурант с тарифами - перебираем, добавляем строки стоимости
	Для Каждого ТекСтрокаТариф из мТаблицаПрейскурант Цикл
		мСсылкаТариф = ТекСтрокаТариф.Тариф;
		мПрейскурант = ТекСтрокаТариф.Прейскурант;
		
		// процентные тарифы игнорируем
		Если мСсылкаТариф.МетодРасчета <> Перечисления.уатМетодыРасчетаПоТарифам.ФиксированнойСуммой
			И мСсылкаТариф.МетодРасчета <> Перечисления.уатМетодыРасчетаПоТарифам.ПоПараметруВыработки Тогда
			Продолжить;
		КонецЕсли;
		
		мТариф = уатРасчетыПоТарифам.ЗначениеТарифа(мСсылкаТариф, ЗначенияГруппировок, ТекСтрокаТариф.ID);
			
		Рез = ДобавитьСтрокуСтоимости(ТекСтрока, ТекСтрока.ПараметрВыработки, ТекСтрока.СоставПланаПериодыКоличество_Всего, 
			мПрейскурант, мСсылкаТариф, мТариф,, ТекСтрокаТариф.ID, тблСтоимость, ТекСтрокаТариф.СтепеньСовпаденияФильтров);
	КонецЦикла;
	
	// Для фикс. тарифов с условием применения "Всегда" оставляем только максимальный по степени совпадения фильтров
	МаксСтепеньСовпадения = 0;
	Для Каждого ТекСтрокаСтоимость Из тблСтоимость Цикл
		Если ТекСтрокаСтоимость.Тариф.МетодРасчета = Перечисления.уатМетодыРасчетаПоТарифам.ФиксированнойСуммой
			И ТекСтрокаСтоимость.Тариф.УсловиеПримененияФиксТарифа = 1
			И ТипЗнч(ТекСтрокаСтоимость.СтепеньСовпаденияФильтров) = Тип("Число") Тогда
			
			МаксСтепеньСовпадения = Макс(МаксСтепеньСовпадения, ТекСтрокаСтоимость.СтепеньСовпаденияФильтров);
		КонецЕсли;
	КонецЦикла;
	Сч = тблСтоимость.Количество() - 1;
	Пока Сч >= 0 Цикл
		ТекСтрокаСтоимость = тблСтоимость[Сч];
		Если ТекСтрокаСтоимость.Тариф.МетодРасчета = Перечисления.уатМетодыРасчетаПоТарифам.ФиксированнойСуммой
			И ТекСтрокаСтоимость.Тариф.УсловиеПримененияФиксТарифа = 1
			И ТипЗнч(ТекСтрокаСтоимость.СтепеньСовпаденияФильтров) = Тип("Число")
			И ТекСтрокаСтоимость.СтепеньСовпаденияФильтров < МаксСтепеньСовпадения Тогда
			тблСтоимость.Удалить(ТекСтрокаСтоимость);
		КонецЕсли;
		Сч = Сч - 1;
	КонецЦикла;
			
	// Удаляем лишние тарифы согласно настройке приоритета тарифов по стоимости в прейскуранте
	Сч = тблСтоимость.Количество() - 1;
	Пока Сч >= 0 Цикл
		ТекСтрокаСтоимость = тблСтоимость[Сч];
		
		Для Каждого ТекСтрокаПоиска Из тблСтоимость Цикл
			Если ТекСтрокаПоиска <> ТекСтрокаСтоимость
				И ТекСтрокаПоиска.Прейскурант = ТекСтрокаСтоимость.Прейскурант
				И ТекСтрокаПоиска.ПараметрВыработки = ТекСтрокаСтоимость.ПараметрВыработки
				И (ТекСтрокаСтоимость.Прейскурант.ПриоритетТарифов = 0 И ТекСтрокаСтоимость.Сумма <= ТекСтрокаПоиска.Сумма
				ИЛИ ТекСтрокаСтоимость.Прейскурант.ПриоритетТарифов = 1 И ТекСтрокаСтоимость.Сумма >= ТекСтрокаПоиска.Сумма) Тогда
				
				тблСтоимость.Удалить(ТекСтрокаСтоимость);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Сч = Сч - 1;
	КонецЦикла;
		
	Если тблСтоимость.Количество() > 0 Тогда
		//ТекСтрока.Номенклатура = тблСтоимость[0].НоменклатураУслуги;
		ТекСтрока.СоставПланаПериодыЦена_Всего = тблСтоимость[0].Цена;
		ТекСтрока.СоставПланаПериодыКоличество_Всего = тблСтоимость[0].Количество;
		ТекСтрока.СоставПланаПериодыСумма_Всего = тблСтоимость[0].Сумма;
		Если Объект.УчитыватьНДС И уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.Сценарий, "Раздел")
			= ПредопределенноеЗначение("Перечисление.уатРазделыПланирования.ПредоставленныеУслуги") Тогда
			ТекСтрока.СоставПланаПериодыСтавкаНДС_Всего = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрока.Номенклатура, "СтавкаНДС");
			ТекСтрока.СоставПланаПериодыСуммаНДС_Всего  = тблСтоимость[0].СуммаНДС;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры //РассчитатьСтоимостьУслуг

&НаСервере
Функция ДобавитьСтрокуСтоимости(ТекСтрока, ПараметрВыработки, Количество, СсылкаПрейскурант, СсылкаТариф, Тариф, БазовыйТариф = 0, IDСтроки = Неопределено, тблСтоимость, СтепеньСовпаденияФильтров = Неопределено)
	ЭтоСтандарт = уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД();
	
	ФиксТариф = (СсылкаТариф.МетодРасчета = Перечисления.уатМетодыРасчетаПоТарифам.ФиксированнойСуммой);
	ВырабТариф = (СсылкаТариф.МетодРасчета = Перечисления.уатМетодыРасчетаПоТарифам.ПоПараметруВыработки);
	КоличествоВыраб = уатОбщегоНазначения.уатВремяВСекунды(Количество)/3600;
			
	Если Тариф > 0 И (ФиксТариф ИЛИ Количество > 0) Тогда
		СуммаВключаетНДС = СсылкаПрейскурант.СуммаВключаетНДС;
		НоваяСтрока = тблСтоимость.Добавить();
		НоваяСтрока.СтепеньСовпаденияФильтров = СтепеньСовпаденияФильтров;
		НоваяСтрока.Прейскурант = СсылкаПрейскурант;
		НоваяСтрока.Тариф = СсылкаТариф;
		НоваяСтрока.НоменклатураУслуги = СсылкаТариф.НоменклатураУслуги;
		
		КурсКратностьВалютыДокумента = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.ДатаПланирования);
		КурсКратностьВалютыПрейскуранта = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(СсылкаПрейскурант.Валюта, Объект.ДатаПланирования);
			
		Если ФиксТариф Тогда
			КоличествоЗначение = 1;
			ЦенаЗначение = Тариф;
			СуммаЗначение = Тариф;
			
			// не используем тариф, если минимальная выработка больше выработки по документу
			Если СсылкаТариф.ТарифнаяСетка Тогда
				СтрокаТарифа = СсылкаТариф.СтрокиТарифнойСетки.Найти(IDстроки, "ID");
				Если СтрокаТарифа = Неопределено Тогда
					МинВыраб = 0;
				Иначе
					МинВыраб = СтрокаТарифа.МинимальнаяВыработка;
				КонецЕсли;
			Иначе
				МинВыраб = СсылкаТариф.МинимальнаяВыработка;
			КонецЕсли;
			Если КоличествоВыраб < МинВыраб И СсылкаТариф.УсловиеПримененияФиксТарифа = 0 Тогда
				тблСтоимость.Удалить(НоваяСтрока);
				Возврат Ложь;
			КонецЕсли;
			
		ИначеЕсли ВырабТариф Тогда
			КоличествоЗначение = КоличествоВыраб;
			ЦенаЗначение = Тариф;
			СуммаЗначение = КоличествоЗначение * Тариф;
			
			Если СсылкаТариф.ТарифнаяСетка Тогда
				СтрокаТарифа = СсылкаТариф.СтрокиТарифнойСетки.Найти(IDстроки, "ID");
				Если СтрокаТарифа = Неопределено Тогда
					МинСтоим = 0;
					МинВыраб = 0;
					СпособЗаполн = 0;
				Иначе
					МинСтоим = СтрокаТарифа.МинимальнаяСтоимость;
					МинВыраб = СтрокаТарифа.МинимальнаяВыработка;
					СпособЗаполн = СтрокаТарифа.СпособЗаполненияКоличества;
				КонецЕсли;
			Иначе
				МинСтоим = СсылкаТариф.МинимальнаяСтоимость;
				МинВыраб = СсылкаТариф.МинимальнаяВыработка;
				СпособЗаполн = СсылкаТариф.СпособЗаполненияКоличества;
			КонецЕсли;
				
			Если СуммаЗначение < МинСтоим Тогда
				СуммаЗначение = МинСтоим;
				Если СпособЗаполн = 0 Тогда
					ЦенаЗначение = СуммаЗначение / КоличествоЗначение;
				ИначеЕсли СпособЗаполн = 1 Тогда
					КоличествоЗначение = ?(Тариф = 0, 0, СуммаЗначение / Тариф);
				Иначе
					КоличествоЗначение = 1;
					ЦенаЗначение = СуммаЗначение;
				КонецЕсли;
			ИначеЕсли КоличествоЗначение < МинВыраб Тогда
				СуммаЗначение = МинВыраб * Тариф;
				Если СпособЗаполн = 0 Тогда
					ЦенаЗначение = СуммаЗначение / КоличествоЗначение;
				ИначеЕсли СпособЗаполн = 1 Тогда
					КоличествоЗначение = МинВыраб;
				Иначе
					КоличествоЗначение = 1;
					ЦенаЗначение = СуммаЗначение;
				КонецЕсли;
			КонецЕсли;
			
		Иначе
			КоличествоЗначение = 1;
			ЦенаЗначение = БазовыйТариф * Тариф / 100;
			СуммаЗначение = ЦенаЗначение;
			
		КонецЕсли;
		
		ТекСтавкаНДС = НоваяСтрока.НоменклатураУслуги.СтавкаНДС;
		СуммаНДСЗначение = 0;
		Если Объект.УчитыватьНДС И ЗначениеЗаполнено(ТекСтавкаНДС) Тогда
			НоваяСтрока.СтавкаНДС = ТекСтавкаНДС;
			СуммаНДСЗначение = уатОбщегоНазначенияТиповые.уатРассчитатьСуммуНДС(СуммаЗначение,
				Объект.УчитыватьНДС, СсылкаПрейскурант.СуммаВключаетНДС,
				уатОбщегоНазначенияТиповые.уатПолучитьСтавкуНДС(НоваяСтрока.СтавкаНДС));
			Если НЕ Объект.СуммаВключаетНДС И СсылкаПрейскурант.СуммаВключаетНДС Тогда
				СуммаЗначение = СуммаЗначение - СуммаНДСЗначение;
				ЦенаЗначение = ?(КоличествоЗначение = 0, 0, СуммаЗначение / КоличествоЗначение);
			ИначеЕсли Объект.СуммаВключаетНДС И НЕ СсылкаПрейскурант.СуммаВключаетНДС Тогда
				СуммаЗначение = СуммаЗначение + СуммаНДСЗначение;
				ЦенаЗначение = ?(КоличествоЗначение = 0, 0, СуммаЗначение / КоличествоЗначение);
			КонецЕсли;
		КонецЕсли;
		
		// пересчитываем по валюте документа
		Если ФиксТариф ИЛИ ВырабТариф Тогда 
			ЦенаЗначение = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ЦенаЗначение, 
				СсылкаПрейскурант.Валюта, Объект.ВалютаДокумента,
				КурсКратностьВалютыПрейскуранта.Курс, КурсКратностьВалютыДокумента.Курс,
				КурсКратностьВалютыПрейскуранта.Кратность, КурсКратностьВалютыДокумента.Кратность);
			СуммаЗначение = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(СуммаЗначение, 
				СсылкаПрейскурант.Валюта, Объект.ВалютаДокумента,
				КурсКратностьВалютыПрейскуранта.Курс, КурсКратностьВалютыДокумента.Курс,
				КурсКратностьВалютыПрейскуранта.Кратность, КурсКратностьВалютыДокумента.Кратность);
			СуммаНДСЗначение = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(СуммаНДСЗначение, 
				СсылкаПрейскурант.Валюта, Объект.ВалютаДокумента,
				КурсКратностьВалютыПрейскуранта.Курс, КурсКратностьВалютыДокумента.Курс,
				КурсКратностьВалютыПрейскуранта.Кратность, КурсКратностьВалютыДокумента.Кратность);
		КонецЕсли;
		
		НоваяСтрока.Количество = КоличествоЗначение;
		НоваяСтрока.Цена = ЦенаЗначение;
		НоваяСтрока.Сумма = СуммаЗначение;
		НоваяСтрока.СуммаНДС = СуммаНДСЗначение;
		
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура УстановитьВидимостьИДоступностьЭлементовФормы()

	Если Объект.АвтоматическийРежимОбновленияИтоговыхПоказателей Тогда 
		Элементы.СоставПланаПериодыАвтоматическийРежим.Пометка = Истина;
		Элементы.СоставПланаПериодыРучнойРежим.Пометка         = Ложь;
	Иначе 
		Элементы.СоставПланаПериодыАвтоматическийРежим.Пометка = Ложь;
		Элементы.СоставПланаПериодыРучнойРежим.Пометка         = Истина;
	КонецЕсли;
	
	Элементы.СоставПланаПериодыПолныйВариантОтображения.Пометка     = ВариантОтображения = 0;
	Элементы.СоставПланаПериодыКомпактныйВариантОтображения.Пометка = ВариантОтображения = 1;
	
	Элементы.СоставПланаПериодыВариантОтображения.Видимость 
		= ХарактеристикиСценария.ИспользоватьКраткосрочноеПланирование;
	Элементы.СоставПланаПериодыРежимОбновленияИтоговыхПоказателей.Видимость 
		= ХарактеристикиСценария.ИспользоватьКраткосрочноеПланирование;
		
	Если ЗначениеЗаполнено(Объект.Сценарий)
			И НЕ ХарактеристикиСценария.ИспользоватьКраткосрочноеПланирование Тогда
		ВариантОтображения = 1;
	Конецесли;
	
	флПланированиеУслуг = ХарактеристикиСценария.флПланированиеУслуг ИЛИ ХарактеристикиСценария.флДоходыРасходы;
	
	Элементы.СоставПланаПериодыЦена_Всего.Видимость        = флПланированиеУслуг;
	Элементы.СоставПланаПериодыСумма_Всего.Видимость       = флПланированиеУслуг;
	Элементы.СоставПланаПериодыСтавкаНДС_Всего.Видимость   = флПланированиеУслуг И Объект.УчитыватьНДС;
	Элементы.СоставПланаПериодыСуммаНДС_Всего.Видимость    = флПланированиеУслуг И Объект.УчитыватьНДС;
	Элементы.СоставПланаПериоды_Всего.Видимость            = флПланированиеУслуг И Объект.УчитыватьНДС;
	Элементы.СоставПланаРассчитатьПоТарифам.Видимость      = флПланированиеУслуг;
	Элементы.СтраницыИтогов.Видимость                      = флПланированиеУслуг;

	Если ИспользоватьКраткосрочноеПланирование Тогда
		Для Сч = 0 По КоличествоИнтервалов Цикл
			Элементы["СоставПланаПериодыЦена_" + Сч].Видимость             = флПланированиеУслуг;
			Элементы["СоставПланаПериодыСумма_" + Сч].Видимость            = флПланированиеУслуг;
			Элементы["СоставПланаПериодыСтавкаНДС_" + Сч].Видимость        = флПланированиеУслуг И Объект.УчитыватьНДС;
			Элементы["СоставПланаПериодыСуммаНДС_" + Сч].Видимость         = флПланированиеУслуг И Объект.УчитыватьНДС;
			Элементы["СоставПланаПериодыВсего_" + Сч].Видимость            = флПланированиеУслуг И Объект.УчитыватьНДС;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура для обновления надписи периода планирования в соответствии с периодичностью плана
//
&НаСервере
Процедура ОбновитьНадписьПериодПланирования()
	Если Объект.ДатаПланирования = '00010101' Тогда
		НадписьПериод = "<не указан>";
		Возврат;
	КонецЕсли;
	
	НачДата = Объект.ДатаПланирования;
	КонДата = Объект.ДатаПланирования;
	уатОбщегоНазначенияТиповые.уатВыровнятьПериод(НачДата, КонДата, Объект.Сценарий.Периодичность);
	НадписьПериод = Формат(НачДата, "ДФ = дд.ММ.гггг") + " - " + Формат(КонДата, "ДФ = дд.ММ.гггг");
КонецПроцедуры

// Устанавливает текст шапки в колонке "Детализация"
&НаКлиенте
Процедура ФорматироватьКолонкиДетализации()
	
	Если ХарактеристикиСценария.флОбъемыПеревозок Тогда
		Элементы.СоставПланаПериодыДетализацияПланирования.Видимость = ХарактеристикиСценария.флТС;
		Элементы.СоставПланаПериодыКолонна.Видимость                 = Ложь;
	Иначе
		Элементы.СоставПланаПериодыДетализацияПланирования.Видимость = Истина;
		Элементы.СоставПланаПериодыКолонна.Видимость                 = Истина;
	КонецЕсли;
	Элементы.СоставПланаПериодыПараметрВыработки.Видимость    = ХарактеристикиСценария.флВыработка
		ИЛИ ХарактеристикиСценария.флПараметрВыработки;
	Элементы.СоставПланаПериодыВидПеревозки.Видимость         = ХарактеристикиСценария.флВидПеревозки;
	Элементы.СоставПланаПериодыКонтрагент.Видимость           = ХарактеристикиСценария.флКонтрагент;
	Элементы.СоставПланаПериодыДоговор.Видимость              = ХарактеристикиСценария.флДоговор;
	Элементы.СоставПланаПериодыМаршрут.Видимость              = ХарактеристикиСценария.флМаршрут;
	Элементы.СоставПланаПериодыОбъектСтроительства.Видимость  = ХарактеристикиСценария.флОбъектСтроительства;
	Элементы.СоставПланаПериодыНаправлениеПеревозки.Видимость = ХарактеристикиСценария.флНаправлениеПеревозки;
	Элементы.СоставПланаПериодыНоменклатура.Видимость         = ХарактеристикиСценария.флНоменклатураГруза;
	Элементы.СоставПланаПериодыУслуга.Видимость               = ХарактеристикиСценария.флУслуга;
	Элементы.СоставПланаПериодыСтатья.Видимость               = ХарактеристикиСценария.флСтатья;
	
	Элементы.СоставПланаПериодыКонтрагент.АвтоОтметкаНезаполненного = ХарактеристикиСценария.флОбъемыПеревозок;
	Элементы.СоставПланаПериодыДоговор.АвтоОтметкаНезаполненного = ХарактеристикиСценария.флОбъемыПеревозок;
	Элементы.СоставПланаПериодыДетализацияПланирования.АвтоОтметкаНезаполненного = Не ХарактеристикиСценария.флОбъемыПеревозок;
	
	Элементы.СоставПланаПериодыДетализацияПланирования.ВыборГруппИЭлементов =
		?(ХарактеристикиСценария.флТСГруппы, ГруппыИЭлементы.Группы, ГруппыИЭлементы.Элементы);
	Элементы.СоставПланаПериодыКолонна.ВыборГруппИЭлементов                 =
		?(ХарактеристикиСценария.флКолоннаГруппы, ГруппыИЭлементы.Группы, ГруппыИЭлементы.Элементы);
	Элементы.СоставПланаПериодыВидПеревозки.ВыборГруппИЭлементов            =
		?(ХарактеристикиСценария.флВидПеревозкиГруппы, ГруппыИЭлементы.Группы, ГруппыИЭлементы.Элементы);
	Элементы.СоставПланаПериодыКонтрагент.ВыборГруппИЭлементов              =
		?(ХарактеристикиСценария.флКонтрагентГруппы, ГруппыИЭлементы.Группы, ГруппыИЭлементы.Элементы);
	Элементы.СоставПланаПериодыМаршрут.ВыборГруппИЭлементов                 =
		?(ХарактеристикиСценария.флМаршрутГруппы, ГруппыИЭлементы.Группы, ГруппыИЭлементы.Элементы);
	Элементы.СоставПланаПериодыНаправлениеПеревозки.ВыборГруппИЭлементов    =
		?(ХарактеристикиСценария.флНаправлениеПеревозкиГруппы, ГруппыИЭлементы.Группы, ГруппыИЭлементы.Элементы);
	Элементы.СоставПланаПериодыОбъектСтроительства.ВыборГруппИЭлементов     =
		?(ХарактеристикиСценария.флОбъектСтроительстваГруппы, ГруппыИЭлементы.Группы, ГруппыИЭлементы.Элементы);
	Элементы.СоставПланаПериодыНоменклатура.ВыборГруппИЭлементов            =
		?(ХарактеристикиСценария.флНоменклатураГрузаГруппы, ГруппыИЭлементы.Группы, ГруппыИЭлементы.Элементы);
	Элементы.СоставПланаПериодыУслуга.ВыборГруппИЭлементов                  =
		?(ХарактеристикиСценария.флУслугаГруппы, ГруппыИЭлементы.Группы, ГруппыИЭлементы.Элементы);

	Если ХарактеристикиСценария.флТС Тогда
		ВариантАналитики = ХарактеристикиСценария.ВариантАналитикиТС;
		Если ВариантАналитики = ПредопределенноеЗначение("Перечисление.уатВариантыАналитик.ТС") Тогда
			Элементы.СоставПланаПериодыДетализацияПланирования.Заголовок       = НСтр("en='Vehicle';ru='ТС'");
			Элементы.СоставПланаПериодыДетализацияПланирования.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.уатТС");
		ИначеЕсли ВариантАналитики = ПредопределенноеЗначение("Перечисление.уатВариантыАналитик.МодельТС") Тогда
			Элементы.СоставПланаПериодыДетализацияПланирования.Заголовок       = НСтр("en='Vehicle';ru='Модель ТС'");
			Элементы.СоставПланаПериодыДетализацияПланирования.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.уатМоделиТС");
		ИначеЕсли ВариантАналитики = ПредопределенноеЗначение("Перечисление.уатВариантыАналитик.ТипТС") Тогда
			Элементы.СоставПланаПериодыДетализацияПланирования.Заголовок       = НСтр("en='Vehicle';ru='Тип ТС'");
			Элементы.СоставПланаПериодыДетализацияПланирования.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.уатТипыТС");
		ИначеЕсли ВариантАналитики = ПредопределенноеЗначение("Перечисление.уатВариантыАналитик.ПринадлежностьТС") Тогда
			Элементы.СоставПланаПериодыДетализацияПланирования.Заголовок       = НСтр("en='Vehicle';ru='Принадлежность ТС'");
			Элементы.СоставПланаПериодыДетализацияПланирования.ОграничениеТипа = Новый ОписаниеТипов("ПеречислениеСсылка.уатПринадлежностьТС");
		КонецЕсли;
	Иначе
		Элементы.СоставПланаПериодыДетализацияПланирования.Заголовок       = НСтр("en='Vehicle';ru='ТС'");
		Элементы.СоставПланаПериодыДетализацияПланирования.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.уатТС");
	КонецЕсли;
	
	Если ХарактеристикиСценария.флКонтрагент Тогда
		Элементы.СоставПланаПериодыКонтрагент.Заголовок = ХарактеристикиСценария.ВариантАналитикиКонтрагент;
	КонецЕсли;
	
	Если ХарактеристикиСценария.флМаршрут Тогда
		ВариантАналитики = ХарактеристикиСценария.ВариантАналитикиМаршрут;
		Если ВариантАналитики = ПредопределенноеЗначение("Перечисление.уатВариантыАналитик.Маршрут") Тогда
			Элементы.СоставПланаПериодыМаршрут.Заголовок       = ВариантАналитики;
			Элементы.СоставПланаПериодыМаршрут.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.уатМаршруты");
		Иначе
			Элементы.СоставПланаПериодыМаршрут.Заголовок       = ВариантАналитики;
			Элементы.СоставПланаПериодыМаршрут.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.уатПунктыНазначения");
		КонецЕсли;
	КонецЕсли;
	
	Если ХарактеристикиСценария.флСтатья Тогда
		ВариантАналитики = ХарактеристикиСценария.ВариантАналитикиСтатья;
		Если ВариантАналитики = ПредопределенноеЗначение("Перечисление.уатВариантыАналитик.СтатьяДоходов") Тогда
			Элементы.СоставПланаПериодыСтатья.Заголовок       = ВариантАналитики;
			Элементы.СоставПланаПериодыСтатья.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.уатСтатьиДоходов");
		Иначе
			Элементы.СоставПланаПериодыСтатья.Заголовок       = ВариантАналитики;
			Элементы.СоставПланаПериодыСтатья.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.уатСтатьиРасходов");
		КонецЕсли;
	КонецЕсли;
	
	Если ХарактеристикиСценария.флПланированиеУслуг Тогда
		Элементы.ГруппаСоставПлана.Заголовок = НСтр("ru='Услуги'");
	ИначеЕсли ХарактеристикиСценария.флДоходыРасходы Тогда
		Если ХарактеристикиСценария.флСтатья
			И ХарактеристикиСценария.ВариантАналитикиСтатья = ПредопределенноеЗначение("Перечисление.уатВариантыАналитик.СтатьяРасходов") Тогда
			Элементы.ГруппаСоставПлана.Заголовок = НСтр("ru='Расходы'");
		Иначе
			Элементы.ГруппаСоставПлана.Заголовок = НСтр("ru='Доходы'");
		КонецЕсли;
	Иначе
		Элементы.ГруппаСоставПлана.Заголовок = НСтр("ru = 'Выработка'; en = 'Output'");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуВсегоВстрокеТЧ(ТекСтрока)
	
	ТекСтрока.СоставПланаПериоды_Всего = ТекСтрока.СоставПланаПериодыСумма_Всего
		+ ?(Объект.УчитыватьНДС И НЕ Объект.СуммаВключаетНДС, ТекСтрока.СоставПланаПериодыСуммаНДС_Всего, 0);
	
	Если НЕ ИспользоватьКраткосрочноеПланирование Тогда
		Возврат;
	КонецЕсли;
	
	Для Сч = 0 По КоличествоИнтервалов Цикл
		ТекСтрока["СоставПланаПериодыВсего_" + Сч] = ТекСтрока["СоставПланаПериодыСумма_" + Сч]
			+ ?(Объект.УчитыватьНДС И НЕ Объект.СуммаВключаетНДС, ТекСтрока["СоставПланаПериодыСуммаНДС_" + Сч], 0);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВсегоВТЧ()
	Для Каждого СтрокаТабличнойЧасти Из СоставПланаПериоды Цикл
		РассчитатьСуммуВсегоВстрокеТЧ(СтрокаТабличнойЧасти);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСуммуВТЧ()
	Для Каждого СтрокаТабличнойЧасти Из СоставПланаПериоды Цикл
		РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти, "Всего");
		
		Если ИспользоватьКраткосрочноеПланирование Тогда
			Для Сч = 0 По КоличествоИнтервалов Цикл
				
				РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти, Сч);
				
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОбновитьВсегоВТЧСервер()
	Для Каждого ТекСтрока Из СоставПланаПериоды Цикл
		ТекСтрока["СоставПланаПериоды_Всего"]       = ТекСтрока["СоставПланаПериодыСумма_Всего"]
		+ ?(Объект.УчитыватьНДС И НЕ Объект.СуммаВключаетНДС, ТекСтрока["СоставПланаПериодыСуммаНДС_Всего"], 0);
		
		Если НЕ ИспользоватьКраткосрочноеПланирование Тогда
			Возврат;
		КонецЕсли;
		
		Для Сч = 0 По КоличествоИнтервалов Цикл
			ТекСтрока["СоставПланаПериодыВсего_" + Сч]       = ТекСтрока["СоставПланаПериодыСумма_" + Сч]
			+ ?(Объект.УчитыватьНДС И НЕ Объект.СуммаВключаетНДС, ТекСтрока["СоставПланаПериодыСуммаНДС_" + Сч], 0);
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОбновитьПараметрВыработкиВременныйСервер()
	Для Каждого ТекСтрокаТЧ Из СоставПланаПериоды Цикл
		ТекСтрокаТЧ.ПараметрВыработкиВременный = ТекСтрокаТЧ.ПараметрВыработки.Временный;
		ТекСтрокаТЧ.АлгоритмРасчетаПараметра   = ТекСтрокаТЧ.ПараметрВыработки.АлгоритмРасчетаПараметра;
	КонецЦикла;
КонецПроцедуры

// Процедура заполняет Ставку НДС в табличной части по системе налогообложения.
// 
&НаСервере
Процедура ЗаполнитьСтавкуНДСПоНалогообложениеНДС()
	
	//СтавкаНДСПоУмолчанию = уатОбщегоНазначенияПовтИсп.ПолучитьСтавкуНДСНоль();
	СтавкаНДСПоУмолчанию = Перечисления.СтавкиНДС.ПустаяСсылка();
	Для каждого СтрокаТабличнойЧасти Из СоставПланаПериоды Цикл
		СтрокаТабличнойЧасти.СоставПланаПериодыСуммаНДС_Всего  = 0;
		СтрокаТабличнойЧасти.СоставПланаПериодыСтавкаНДС_Всего = СтавкаНДСПоУмолчанию;
		
		Если ИспользоватьКраткосрочноеПланирование Тогда
			Для Сч = 0 По КоличествоИнтервалов Цикл
				СтрокаТабличнойЧасти["СоставПланаПериодыСтавкаНДС_" + Сч] = СтавкаНДСПоУмолчанию;
				СтрокаТабличнойЧасти["СоставПланаПериодыСуммаНДС_" + Сч]  = 0;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Если Объект.УчитыватьНДС Тогда
		
			Элементы.СоставПланаПериодыСуммаНДС_Всего.Видимость  = Истина;
			Элементы.СоставПланаПериодыСтавкаНДС_Всего.Видимость = Истина;
			Элементы.СоставПланаПериоды_Всего.Видимость          = Истина;
			
			Если ИспользоватьКраткосрочноеПланирование Тогда
				Для Сч = 0 По КоличествоИнтервалов Цикл
					Элементы["СоставПланаПериодыСтавкаНДС_" + Сч].Видимость = Истина;
					Элементы["СоставПланаПериодыСуммаНДС_" + Сч].Видимость  = Истина;
					Элементы["СоставПланаПериодыВсего_" + Сч].Видимость     = Истина;
				КонецЦикла;
			КонецЕсли;

		Для Каждого СтрокаТабличнойЧасти Из СоставПланаПериоды Цикл
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС) Тогда
				СтавкаНДС = СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
				СтрокаТабличнойЧасти.СоставПланаПериодыСтавкаНДС_Всего = СтавкаНДС;
				
				Если ИспользоватьКраткосрочноеПланирование Тогда
					Для Сч = 0 По КоличествоИнтервалов Цикл
						СтрокаТабличнойЧасти["СоставПланаПериодыСтавкаНДС_" + Сч] = СтавкаНДС;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			Если ИспользоватьКраткосрочноеПланирование Тогда
				Для Сч = 0 По КоличествоИнтервалов Цикл
					СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеСтавкиНДС(
						СтрокаТабличнойЧасти["СоставПланаПериодыСтавкаНДС_" + Сч]);
					Сумма     = СтрокаТабличнойЧасти["СоставПланаПериодыСумма_" + Сч];
									СтрокаТабличнойЧасти["СоставПланаПериодыСуммаНДС_" + Сч] = ?(Объект.СуммаВключаетНДС, 
									Сумма - (Сумма) / ((СтавкаНДС + 100) / 100),
									Сумма * СтавкаНДС / 100);
				КонецЦикла;
			КонецЕсли;
			
			СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеСтавкиНДС(
				СтрокаТабличнойЧасти.СоставПланаПериодыСтавкаНДС_Всего);
			Сумма     = СтрокаТабличнойЧасти.СоставПланаПериодыСумма_Всего;
			СтрокаТабличнойЧасти.СоставПланаПериодыСуммаНДС_Всего = ?(Объект.СуммаВключаетНДС, 
									  		Сумма - (Сумма) / ((СтавкаНДС + 100) / 100),
									  		Сумма * СтавкаНДС / 100);
			
		КонецЦикла;
		
	Иначе
		Элементы.СоставПланаПериодыСуммаНДС_Всего.Видимость  = Ложь;
		Элементы.СоставПланаПериодыСтавкаНДС_Всего.Видимость = Ложь;
		Элементы.СоставПланаПериоды_Всего.Видимость          = Ложь;
		
		Если ИспользоватьКраткосрочноеПланирование Тогда
			Для Сч = 0 По КоличествоИнтервалов Цикл
				Элементы["СоставПланаПериодыСтавкаНДС_" + Сч].Видимость = Ложь;
				Элементы["СоставПланаПериодыСуммаНДС_" + Сч].Видимость  = Ложь;
				Элементы["СоставПланаПериодыВсего_" + Сч].Видимость     = Ложь;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСтавкуНДСПоНалогообложениеНДС()

// Процедура рассчитывает сумму в строке табличной части.
//
&НаКлиенте
Процедура РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти = Неопределено, Индекс = "Всего")
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Количество = СтрокаТабличнойЧасти["СоставПланаПериодыКоличество_" + Индекс];
	Если СтрокаТабличнойЧасти.ПараметрВыработкиВременный Тогда
		Количество = Цел(Количество) + (Количество - Цел(Количество) / 60 * 100);
	КонецЕсли;
	
	СтрокаТабличнойЧасти["СоставПланаПериодыСумма_" + Индекс] = Количество * СтрокаТабличнойЧасти["СоставПланаПериодыЦена_" + Индекс];
	
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти, Индекс);
	
КонецПроцедуры // РассчитатьСуммуВСтрокеТабличнойЧасти()

// Рассчитывается сумма НДС в строке табличной части.
//
&НаКлиенте
Процедура РассчитатьСуммуНДС(СтрокаТабличнойЧасти, Индекс = "Всего")
	
	СтавкаНДС = СтрокаТабличнойЧасти["СоставПланаПериодыСтавкаНДС_" + Индекс];
	СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеСтавкиНДС(СтавкаНДС);
	
	Сумма     = СтрокаТабличнойЧасти["СоставПланаПериодыСумма_" + Индекс];
	
	СтрокаТабличнойЧасти["СоставПланаПериодыСуммаНДС_" + Индекс] = 
		?(Объект.СуммаВключаетНДС, Сумма - (Сумма) / ((СтавкаНДС + 100) / 100),
		Сумма * СтавкаНДС / 100);
	
КонецПроцедуры // РассчитатьСуммуНДС()
	
&НаКлиенте
Процедура РассчитатьСуммуДокумента()
	НДСВсего = СоставПланаПериоды.Итог("СоставПланаПериодыСуммаНДС_Всего");
	Объект.СуммаДокумента = СоставПланаПериоды.Итог("СоставПланаПериодыСумма_Всего");
	Если Объект.УчитыватьНДС И НЕ Объект.СуммаВключаетНДС Тогда
		Объект.СуммаДокумента = Объект.СуммаДокумента + НДСВсего;
	КонецЕсли;
	ВывестиСуммовыеИтогиДокумента();
КонецПроцедуры

&НаСервере
Процедура ВывестиСуммовыеИтогиДокумента()
	
	Если Объект.УчитыватьНДС Тогда 
		Если Объект.СуммаВключаетНДС Тогда 
			НадписьВсегоНДС = НСтр("en='VAT amount';ru='НДС в сумме'") + ":";
		Иначе 
			НадписьВсегоНДС = НСтр("en='VAT from above';ru='НДС сверху'") + ":";
		КонецЕсли;
		НадписьВсего = НСтр("en='Total including VAT';ru='Всего с НДС'");
		Элементы.СтраницыИтогов.ТекущаяСтраница = Элементы.ИтогоУчетНДС;
	Иначе 
		НадписьВсего = НСтр("en='Total';ru='Всего'");
		Элементы.СтраницыИтогов.ТекущаяСтраница = Элементы.ИтогоБезНДС;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ВалютаДокумента) Или Объект.ВалютаДокумента = мВалютаРегламентированногоУчета Тогда 
		НадписьКурс = "(1.0000)";
		Элементы.НадписьКурс.Видимость = Ложь;
		Элементы.НадписьКурс2.Видимость = Ложь;
	Иначе 
		НадписьКурс = "(" + Формат(Объект.КурсДокумента, "ЧДЦ=4; ЧРД=.; ЧН=0.0000; ЧГ=0") + ")";
		Элементы.НадписьКурс.Видимость = Истина;
		Элементы.НадписьКурс2.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПравоРедактированиеДокумента()
	Рез = ПравоДоступа("Редактирование", Метаданные.Документы.уатПланированиеРаботыТС);
	Возврат Рез;
КонецФункции

&НаКлиенте
Процедура ПересчитатьСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС()
	Для Каждого СтрокаТабличнойЧасти Из СоставПланаПериоды Цикл
		Если ИспользоватьКраткосрочноеПланирование Тогда
			Для Сч = 0 По КоличествоИнтервалов Цикл
				РассчитатьСуммуНДС(СтрокаТабличнойЧасти, Сч);
			КонецЦикла;
		КонецЕсли;
		РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПересчитатьЦеныТабличнойЧастиПоВалюте(ВалютаРасчетовПередИзменением)
	//уатОбщегоНазначенияСервер.ПересчитатьЦеныТабличнойЧастиПоВалюте(Объект, ВалютаРасчетовПередИзменением, ИмяТЧ);
	СтруктураКурсы = уатОбщегоНазначенияСервер.ПолучитьКурсыВалют(ВалютаРасчетовПередИзменением, 
		Объект.ВалютаДокумента, Объект.ДатаПланирования);
			
	Для Каждого СтрокаТабличнойЧасти Из СоставПланаПериоды Цикл
		Если ИспользоватьКраткосрочноеПланирование Тогда
			Для Сч = 0 По КоличествоИнтервалов Цикл
				СтрокаТабличнойЧасти["СоставПланаПериодыЦена_" + Сч] = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(
					СтрокаТабличнойЧасти["СоставПланаПериодыЦена_" + Сч], 
					ВалютаРасчетовПередИзменением, Объект.ВалютаДокумента,
					СтруктураКурсы.КурсНач,        СтруктураКурсы.Курс, 
					СтруктураКурсы.КратностьНач,   СтруктураКурсы.Кратность);
			КонецЦикла;
		КонецЕсли;
		
		СтрокаТабличнойЧасти["СоставПланаПериодыЦена_Всего"] = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(
			СтрокаТабличнойЧасти["СоставПланаПериодыЦена_Всего"], 
			ВалютаРасчетовПередИзменением, Объект.ВалютаДокумента,
			СтруктураКурсы.КурсНач,        СтруктураКурсы.Курс, 
			СтруктураКурсы.КратностьНач,   СтруктураКурсы.Кратность);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемВопрос(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.ОК Тогда
		флВопросЗакрытиеФормы = Ложь;
		Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаполнитьХарактеристикиСценария(Сценарий)
	
	ХарактеристикиСценария = уатОбщегоНазначения_проф.ЗаполнитьХарактеристикиСценария(Сценарий);
	Возврат ХарактеристикиСценария;

КонецФункции

&НаКлиенте
Процедура ЗаполнитьНастраиваемыеХарактеристикиСценария(Сценарий, ХарактеристикиСценария, ВыводитьСообщение = Ложь)
	
	Если ХарактеристикиСценария.Раздел <> ПредопределенноеЗначение("Перечисление.уатРазделыПланирования.Выработка") Тогда
		Возврат;
	КонецЕсли;
	
	УчетВыработкиПоПодразделениям = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
			ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоПодразделениям"));
	УчетВыработкиПоКонтрагентам = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
			ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоКонтрагентам"));
	УчетВыработкиПоОбъектамСтроительства = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
			ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоОбъектамСтроительства"));
	УчетВыработкиПоНаправлениямПеревозок = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
			ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоНаправлениямПеревозок"));
	УчетВыработкиПоВидамПеревозок = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
			ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоВидамПеревозок"));
	УчетВыработкиПоМаршрутам = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
			ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоМаршрутам"));

	СтрокаУчетВыработки = "";
	
	Если НЕ УчетВыработкиПоПодразделениям 
		И ХарактеристикиСценария.флПодразделение Тогда
		ХарактеристикиСценария.флПодразделение = Ложь;
		СтрокаУчетВыработки = "Подразделение";
	КонецЕсли;
	
	Если НЕ УчетВыработкиПоКонтрагентам 
		И ХарактеристикиСценария.флКонтрагент Тогда
		ХарактеристикиСценария.флКонтрагент = Ложь;
		СтрокаУчетВыработки = СтрокаУчетВыработки + ?(ЗначениеЗаполнено(СтрокаУчетВыработки), ", ", "") + "Контрагент";
	КонецЕсли;
	
	Если НЕ УчетВыработкиПоОбъектамСтроительства 
		И ХарактеристикиСценария.флОбъектСтроительства Тогда
		ХарактеристикиСценария.флОбъектСтроительства = Ложь;
		СтрокаУчетВыработки = СтрокаУчетВыработки + ?(ЗначениеЗаполнено(СтрокаУчетВыработки), ", ", "") + "Объект строительства";
	КонецЕсли;
	
	Если НЕ УчетВыработкиПоНаправлениямПеревозок 
		И ХарактеристикиСценария.флНаправлениеПеревозки Тогда
		ХарактеристикиСценария.флНаправлениеПеревозки = Ложь;
		СтрокаУчетВыработки = СтрокаУчетВыработки + ?(ЗначениеЗаполнено(СтрокаУчетВыработки), ", ", "") + "Направление перевозки";
	КонецЕсли;
	
	Если НЕ УчетВыработкиПоВидамПеревозок 
		И ХарактеристикиСценария.флВидПеревозки Тогда
		ХарактеристикиСценария.флВидПеревозки = Ложь;
		СтрокаУчетВыработки = СтрокаУчетВыработки + ?(ЗначениеЗаполнено(СтрокаУчетВыработки), ", ", "") + "Вид перевозки";
	КонецЕсли;
	
	Если НЕ УчетВыработкиПоМаршрутам 
		И ХарактеристикиСценария.флМаршрут Тогда
		ХарактеристикиСценария.флМаршрут = Ложь;
		СтрокаУчетВыработки = СтрокаУчетВыработки + ?(ЗначениеЗаполнено(СтрокаУчетВыработки), ", ", "") + "Маршрут";
	КонецЕсли;

	Если ЗначениеЗаполнено(Объект.Организация)
		И ЗначениеЗаполнено(СтрокаУчетВыработки) 
		И ВыводитьСообщение Тогда
		ТекстНСТР = НСтр("ru='Учет выработки по аналитикам <%1> отключен для данной организации в ""Правах и настройках"".'");
		ТекстНСТР = СтрШаблон(ТекстНСТР, СтрокаУчетВыработки);
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСоставПланаПериод(ХарактеристикиСценария)
	
	уатОбщегоНазначения_проф.ЗаполнитьСоставПланаПериод(ЭтотОбъект, Объект.ДатаПланирования,
		ХарактеристикиСценария, КоличествоИнтервалов);

КонецПроцедуры

&НаСервере
Процедура ОчиститьСоставПланаПериод(ХарактеристикиСценария)

	уатОбщегоНазначения_проф.ОчиститьСоставПланаПериод(ЭтотОбъект, ХарактеристикиСценария, КоличествоИнтервалов);

КонецПроцедуры

&НаКлиенте
Процедура АвтоматическоеОбновленияИтоговыхПоказателей(ТекСтрока, Индекс)

	Если Объект.АвтоматическийРежимОбновленияИтоговыхПоказателей И КоличествоИнтервалов > 0 Тогда
		Если Индекс = "Всего" Тогда
			КоличествоВсего = ТекСтрока["СоставПланаПериодыКоличество_" + Индекс];
			Количество      = КоличествоВсего / (КоличествоИнтервалов + 1);
			Цена            = ТекСтрока["СоставПланаПериодыЦена_" + Индекс];
			СтавкаНДС       = ТекСтрока["СоставПланаПериодыСтавкаНДС_" + Индекс];
			
			ТекКоличество = 0;
			ТекИнтервал   = 0;
			Для Сч = 0 По КоличествоИнтервалов Цикл
				Если ТекИнтервал = КоличествоИнтервалов Тогда
					Количество = КоличествоВсего - ТекКоличество;
				КонецЕсли;
				
				ТекСтрока["СоставПланаПериодыЦена_" + Сч]        = Цена;
				ТекСтрока["СоставПланаПериодыКоличество_" + Сч]  = Количество;
				ТекСтрока["СоставПланаПериодыСумма_" + Сч]       = Цена * Количество;
				ТекСтрока["СоставПланаПериодыСтавкаНДС_" + Сч]   = СтавкаНДС;
				РассчитатьСуммуНДС(ТекСтрока, Строка(Сч));
				
				ТекИнтервал   = ТекИнтервал + 1;
				ТекКоличество = ТекКоличество + ТекСтрока["СоставПланаПериодыКоличество_" + Сч];
			КонецЦикла;
		Иначе
			Количество = 0;
			Сумма      = 0;
			Для Сч = 0 По КоличествоИнтервалов Цикл
				Количество = Количество + ТекСтрока["СоставПланаПериодыКоличество_" + Сч];
				Сумма      = Сумма + ТекСтрока["СоставПланаПериодыСумма_" + Сч];
			КонецЦикла;
			
			ТекСтрока["СоставПланаПериодыКоличество_Всего"] = Количество;
			ТекСтрока["СоставПланаПериодыСумма_Всего"]      = Сумма;
			ТекСтрока["СоставПланаПериодыЦена_Всего"]       = Сумма / Количество;
			
			РассчитатьСуммуНДС(ТекСтрока);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВариантОтображенияПриИзменении()
	
	Если НЕ ИспользоватьКраткосрочноеПланирование Тогда
		Возврат;
	КонецЕсли;
	
	Для Сч = 0 По КоличествоИнтервалов Цикл
		Элементы["СоставПланаПериодыГруппаВсего" + Сч].Видимость = ВариантОтображения = 0;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПриОткрытииСервер()
	мСоставПлана = Объект.СоставПлана.Выгрузить();
	мСоставПлана.Свернуть("НомерСтрокиРодитель");
	

	Для Каждого ТекСтрока Из мСоставПлана Цикл
		
		мНомерСтрокиРодитель = Объект.СоставПлана.НайтиСтроки(Новый Структура("НомерСтрокиРодитель", ТекСтрока.НомерСтрокиРодитель));
		
		Если НЕ ТекСтрока.НомерСтрокиРодитель = 0 Тогда
			НоваяСтрока = СоставПланаПериоды.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, мНомерСтрокиРодитель[0]);
		КонецЕсли;
		
		Для Каждого мТекСтрока Из мНомерСтрокиРодитель Цикл
			Если ТекСтрока.НомерСтрокиРодитель = 0 Тогда
				НоваяСтрока = СоставПланаПериоды.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, мТекСтрока);
			КонецЕсли;
			Если мТекСтрока.НомерИнтервала = 0 Тогда
				НоваяСтрока["СоставПланаПериодыКоличество_Всего"] = мТекСтрока.Количество;
				НоваяСтрока["СоставПланаПериодыЦена_Всего"]       = мТекСтрока.Цена;
				НоваяСтрока["СоставПланаПериодыСумма_Всего"]      = мТекСтрока.Сумма;
				НоваяСтрока["СоставПланаПериодыСтавкаНДС_Всего"]  = мТекСтрока.СтавкаНДС;
				НоваяСтрока["СоставПланаПериодыСуммаНДС_Всего"]   = мТекСтрока.СуммаНДС;
			Иначе
				ТекИнтервал = мТекСтрока.НомерИнтервала - 1;
				Если ИспользоватьКраткосрочноеПланирование 
					И ТекИнтервал <= КоличествоИнтервалов Тогда
					НоваяСтрока["СоставПланаПериодыКоличество_" + ТекИнтервал] = мТекСтрока.Количество;
					НоваяСтрока["СоставПланаПериодыЦена_" + ТекИнтервал]       = мТекСтрока.Цена;
					НоваяСтрока["СоставПланаПериодыСумма_" + ТекИнтервал]      = мТекСтрока.Сумма;
					НоваяСтрока["СоставПланаПериодыСтавкаНДС_" + ТекИнтервал]  = мТекСтрока.СтавкаНДС;
					НоваяСтрока["СоставПланаПериодыСуммаНДС_" +ТекИнтервал]   = мТекСтрока.СуммаНДС;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦИкла;
	ОбновитьПараметрВыработкиВременныйСервер();
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюСервер()
	НомерСтрокиРодитель = 1;
	НачДата = Объект.ДатаПланирования;
	КонДата = Объект.ДатаПланирования;
	уатОбщегоНазначенияТиповые.уатВыровнятьПериод(НачДата, КонДата, Объект.Сценарий.Периодичность);
	ПериодичностьКраткосрочногоПланирования = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.Сценарий, "ПериодичностьКраткосрочногоПланирования");
	
	Объект.СоставПлана.Очистить();
	Для Каждого ТекСтрока Из СоставПланаПериоды Цикл
		ДобавлениеДатаОкончания = НачДата;
		Если ИспользоватьКраткосрочноеПланирование Тогда
			Для Сч = 0 По КоличествоИнтервалов Цикл
				
				ДобавлениеДатаНачала    = ПланированиеКлиентСервер.РассчитатьДатуНачалаПериода(ДобавлениеДатаОкончания + 1, ПериодичностьКраткосрочногоПланирования);
				ДобавлениеДатаОкончания = ПланированиеКлиентСервер.РассчитатьДатуОкончанияПериода(ДобавлениеДатаНачала, ПериодичностьКраткосрочногоПланирования);
				
				НоваяСтрока = Объект.СоставПлана.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
				НоваяСтрока.НомерИнтервала      = Сч + 1;
				НоваяСтрока.НомерСтрокиРодитель = НомерСтрокиРодитель;
				НоваяСтрока.Количество = ТекСтрока["СоставПланаПериодыКоличество_" + Сч];
				НоваяСтрока.Цена       = ТекСтрока["СоставПланаПериодыЦена_" + Сч];
				НоваяСтрока.Сумма      = ТекСтрока["СоставПланаПериодыСумма_" + Сч];
				НоваяСтрока.СтавкаНДС  = ТекСтрока["СоставПланаПериодыСтавкаНДС_" + Сч];
				НоваяСтрока.СуммаНДС   = ТекСтрока["СоставПланаПериодыСуммаНДС_" + Сч];
				НоваяСтрока.Дата       = ДобавлениеДатаНачала;
				
			КонецЦикла;
		КонецЕсли;
		
		НоваяСтрока = Объект.СоставПлана.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		НоваяСтрока.НомерИнтервала      = 0;
		НоваяСтрока.НомерСтрокиРодитель = НомерСтрокиРодитель;
		НоваяСтрока.Количество = ТекСтрока["СоставПланаПериодыКоличество_Всего"];
		НоваяСтрока.Цена       = ТекСтрока["СоставПланаПериодыЦена_Всего"];
		НоваяСтрока.Сумма      = ТекСтрока["СоставПланаПериодыСумма_Всего"];
		НоваяСтрока.СтавкаНДС  = ТекСтрока["СоставПланаПериодыСтавкаНДС_Всего"];
		НоваяСтрока.СуммаНДС   = ТекСтрока["СоставПланаПериодыСуммаНДС_Всего"];
		НоваяСтрока.Дата       = НачДата;
		
		НомерСтрокиРодитель = НомерСтрокиРодитель + 1;
	КонецЦИкла;
КонецПроцедуры

&НаСервере
Процедура РассчитатьПоФормулеСервер()
	
	МассивПараметров = Новый Массив();
	Для Каждого ТекСтрока Из СоставПланаПериоды Цикл
		Если МассивПараметров.Найти(ТекСтрока.ПараметрВыработки) = Неопределено Тогда
			МассивПараметров.Добавить(ТекСтрока.ПараметрВыработки);
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивПараметров", МассивПараметров);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	уатПараметрыВыработки.Наименование КАК Наименование,
	               |	уатПараметрыВыработки.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.уатПараметрыВыработки КАК уатПараметрыВыработки
	               |ГДЕ
	               |	НЕ уатПараметрыВыработки.ПометкаУдаления
	               |	И уатПараметрыВыработки.Ссылка В(&МассивПараметров)";
	Выборка = Запрос.Выполнить().Выбрать();
	
	СоответствиеПараметров = Новый Соответствие();
	Пока Выборка.Следующий() Цикл
		СоответствиеПараметров.Вставить(Выборка.Наименование, Выборка.Ссылка);
	КонецЦикла;
	 
	Для Каждого ТекСтрока Из СоставПланаПериоды Цикл
		Если НЕ ТекСтрока.РучнойВвод Тогда
			АлгоритмРасчетаПараметра = ТекСтрока.АлгоритмРасчетаПараметра;
			Если ЗначениеЗаполнено(АлгоритмРасчетаПараметра) Тогда
				РассчитатьПоФормулеВСтроке(ТекСтрока, АлгоритмРасчетаПараметра, СоответствиеПараметров);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьПоФормулеВСтроке(ТекСтрока, АлгоритмРасчетаПараметра, СоответствиеПараметров)
	
	СтрокаЗамены = СтрЗаменить(АлгоритмРасчетаПараметра, "[", "ДокументОбъект.");
	СтрокаЗамены = СтрЗаменить(СтрокаЗамены, "]", "");
	СтрокаЗамены = СтрЗаменить(АлгоритмРасчетаПараметра, "{", "Подключаемый_ПолучитьПараметрВыработки(""");
	СтрокаЗамены = СтрЗаменить(СтрокаЗамены, "}", """, ТекСтрока, СоответствиеПараметров, Индекс)");
	
	
	Индекс = "Всего";
	Попытка 
		ЗначениеПараметра = Вычислить(СтрокаЗамены);
		Если ТипЗнч(ЗначениеПараметра) <> Тип("Число") Тогда
			ЗначениеПараметра = "ошибка";
		КонецЕсли;
	Исключение
		ЗначениеПараметра = "ошибка";
	КонецПопытки;

	Если ЗначениеПараметра <> "ошибка" Тогда
		Если ТекСтрока.ПараметрВыработки.Временный Тогда
			// Переводим значение из секунд в часы
			ТекСтрока["СоставПланаПериодыКоличество_" + Индекс] = ЗначениеПараметра / 3600;
		Иначе
			ТекСтрока["СоставПланаПериодыКоличество_" + Индекс] = ЗначениеПараметра;
		КонецЕсли;
	Иначе
		ТекСтрока["СоставПланаПериодыКоличество_" + Индекс] = 0;
	КонецЕсли;

	Если ИспользоватьКраткосрочноеПланирование Тогда
		Для Сч = 0 По КоличествоИнтервалов Цикл
			
			Индекс = Сч;
			Попытка 
				ЗначениеПараметра = Вычислить(СтрокаЗамены);
				Если ТипЗнч(ЗначениеПараметра) <> Тип("Число") Тогда
					ЗначениеПараметра = "ошибка";
				КонецЕсли;
			Исключение
				ЗначениеПараметра = "ошибка";
			КонецПопытки;
			
			Если ЗначениеПараметра <> "ошибка" Тогда
				Если ТекСтрока.ПараметрВыработки.Временный Тогда
					// Переводим значение из секунд в часы
					ТекСтрока["СоставПланаПериодыКоличество_" + Индекс] = ЗначениеПараметра / 3600;
				Иначе
					ТекСтрока["СоставПланаПериодыКоличество_" + Индекс] = ЗначениеПараметра;
				КонецЕсли;
			Иначе
				ТекСтрока["СоставПланаПериодыКоличество_" + Индекс] = 0;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция Подключаемый_ПолучитьПараметрВыработки(ПараметрВыработкиНаименование, ТекСтрока, СоответствиеПараметров, Индекс = "Всего")
	
	ПарметрВыработки = СоответствиеПараметров.Получить(ПараметрВыработкиНаименование);
	Если ПарметрВыработки = Неопределено Тогда 
		Возврат 0;
	КонецЕсли;
	
	ТекСтруктураСтроки = Новый Структура("ДетализацияПланирования, Контрагент, Колонна, ПараметрВыработки, ВидПеревозки,
			|Договор, Маршрут, ОбъектСтроительства, НаправлениеПеревозки, Номенклатура, Услуга, Статья");
	ЗаполнитьЗначенияСвойств(ТекСтруктураСтроки, ТекСтрока);
	ТекСтруктураСтроки.ПараметрВыработки = ПарметрВыработки;
	
	НайденнаяСтрока = СоставПланаПериоды.НайтиСтроки(ТекСтруктураСтроки);
	Если НайденнаяСтрока.Количество() <> 0 Тогда
		НайденнаяСтрока = НайденнаяСтрока[0];
		
		Количество = НайденнаяСтрока["СоставПланаПериодыКоличество_" + Индекс];
		Если НайденнаяСтрока.ПараметрВыработки.Временный Тогда
			// В формулах для временных параметров используется их значение в секундах, а не в часах
			Возврат Количество * 3600;
		Иначе
			Возврат Количество;
		КонецЕсли;
	Иначе
		Возврат 0;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ВыполнитьДействияПриИзмененииСценария(Сценарий, ТребуетсяОчистка = Ложь, ВыводитьСообщение = Ложь)
	
	Если ТребуетсяОчистка Тогда
		// Удалим динамические колонки "СоставПланаПериоды"
		ОчиститьСоставПланаПериод(ХарактеристикиСценария);
	КонецЕсли;
	
	// Заполним характеричтики сценария
	ХарактеристикиСценария = ЗаполнитьХарактеристикиСценария(Объект.Сценарий);
	ИспользоватьКраткосрочноеПланирование = ХарактеристикиСценария.ИспользоватьКраткосрочноеПланирование;
	
	// Заполним флаги включения разделов из настроек по Организации
	ЗаполнитьНастраиваемыеХарактеристикиСценария(Объект.Сценарий, ХарактеристикиСценария, ВыводитьСообщение);
	
	ФорматироватьКолонкиДетализации();
	
	НастроитьСвязиКолонкиДоговор(ХарактеристикиСценария);
	
	// Заполним динамические колонки "СоставПланаПериоды"
	ЗаполнитьСоставПланаПериод(ХарактеристикиСценария);
	
КонецПроцедуры

&НаКлиенте
Функция СтруктураОтборТС()
	СтруктураОтбор = Новый Структура("Организация", Объект.Организация);
	Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
		СтруктураОтбор.Вставить("Подразделение", Объект.Подразделение);
	КонецЕсли;
	
	Возврат СтруктураОтбор;
КонецФункции

&НаСервере
Процедура НастроитьСвязиКолонкиДоговор(ХарактеристикиСценария)
	
	мСвязиПараметровВыбора = Новый Массив();
	СвязьПараметров = Новый СвязьПараметраВыбора("Отбор.Владелец", "Элементы.СоставПланаПериоды.ТекущиеДанные.Контрагент", РежимИзмененияСвязанногоЗначения.Очищать);
	мСвязиПараметровВыбора.Добавить(СвязьПараметров);
	
	Если ХарактеристикиСценария.Раздел = ПредопределенноеЗначение("Перечисление.уатРазделыПланирования.ОбъемыПеревозок") Тогда
		мПараметрыВыбора = Новый Массив();
		Параметр = Новый ПараметрВыбора("Отбор.ПланированиеОбъемовПеревозок", Истина);
		мПараметрыВыбора.Добавить(Параметр);
		Элементы.СоставПланаПериодыДоговор.ПараметрыВыбора = Новый ФиксированныйМассив(мПараметрыВыбора);
	Иначе
		СвязьПараметров = Новый СвязьПараметраВыбора("Отбор.ВалютаВзаиморасчетов", "Объект.ВалютаДокумента", РежимИзмененияСвязанногоЗначения.Очищать);
		мСвязиПараметровВыбора.Добавить(СвязьПараметров);
	КонецЕсли;
	
	Элементы.СоставПланаПериодыДоговор.СвязиПараметровВыбора = Новый ФиксированныйМассив(мСвязиПараметровВыбора);
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатПланированиеРаботыТС";
	КомандаПечати.Идентификатор = "ПланированиеРаботыТС";
	КомандаПечати.Представление = НСтр("en='Working plan of vehicle';ru='План работы ТС'");
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр).
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной
//                                                            параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной
//                                            параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если НЕ уатОбщегоНазначенияСервер.РазрешениеПечатиНепроведенногоДокумента(МассивОбъектов) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПланированиеРаботыТС") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПланированиеРаботыТС",
			"Планирование работы ТС", ПечатьПланРаботыТС(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
	уатОбщегоНазначенияСервер.УстановитьРедактированиеПечатныхФормДокумента(КоллекцияПечатныхФорм);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	Настройки.ПриПолученииСлужебныхРеквизитов = Ложь;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// Позволяет переопределить ограничение, указанное в модуле менеджера объекта метаданных.
//
// Параметры:
//  Ограничение - Структура:
//    * Текст                             - Строка - ограничение доступа для пользователей.
//                                          Если пустая строка, значит, доступ разрешен.
//    * ТекстДляВнешнихПользователей      - Строка - ограничение доступа для внешних пользователей.
//                                          Если пустая строка, значит, доступ запрещен.
//    * ПоВладельцуБезЗаписиКлючейДоступа - Неопределено - определить автоматически.
//                                        - Булево - если Ложь, то всегда записывать ключи доступа,
//                                          если Истина, тогда не записывать ключи доступа,
//                                          а использовать ключи доступа владельца (требуется,
//                                          чтобы ограничение было строго по объекту-владельцу).
//   * ПоВладельцуБезЗаписиКлючейДоступаДляВнешнихПользователей - Неопределено, Булево - также
//                                          как у параметра ПоВладельцуБезЗаписиКлючейДоступа.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Подразделение)";
	
	Ограничение.ТекстДляВнешнихПользователей = Ограничение.Текст;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	
	ХарактеристикиСценария = уатОбщегоНазначения_проф.ЗаполнитьХарактеристикиСценария(ДокументСсылка.Сценарий);
	
	Раздел        = ХарактеристикиСценария.Раздел;
	Периодичность = ХарактеристикиСценария.Периодичность;
	ПериодичностьКраткосрочногоПланирования = ХарактеристикиСценария.ПериодичностьКраткосрочногоПланирования;
	
	флПланированиеСуммы = (Раздел = Перечисления.уатРазделыПланирования.ПредоставленныеУслуги)
		ИЛИ (Раздел = Перечисления.уатРазделыПланирования.ДоходыРасходы);
	
    мЗапрос = Новый Запрос;
	мЗапрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатПланированиеРаботыТССоставПлана.Ссылка КАК Регистратор,
	|	уатПланированиеРаботыТССоставПлана.Ссылка КАК ДокументПланирования,
	|	уатПланированиеРаботыТССоставПлана.Дата КАК Период,
	|	уатПланированиеРаботыТССоставПлана.Ссылка.Сценарий КАК Сценарий,
	|	уатПланированиеРаботыТССоставПлана.Ссылка.Сценарий.Раздел КАК РазделПланирования,
	|	уатПланированиеРаботыТССоставПлана.Ссылка.Организация КАК Организация,
	|	уатПланированиеРаботыТССоставПлана.Ссылка.Подразделение КАК Подразделение,
	|	уатПланированиеРаботыТССоставПлана.Колонна КАК Колонна,
	|	уатПланированиеРаботыТССоставПлана.Менеджер КАК Менеджер,
	|	уатПланированиеРаботыТССоставПлана.ДетализацияПланирования КАК ДетализацияПланирования,
	|	уатПланированиеРаботыТССоставПлана.ПараметрВыработки КАК ПараметрВыработки,
	|	уатПланированиеРаботыТССоставПлана.ВидПеревозки КАК ВидПеревозки,
	|	уатПланированиеРаботыТССоставПлана.Контрагент КАК Контрагент,
	|	уатПланированиеРаботыТССоставПлана.Договор КАК Договор,
	|	уатПланированиеРаботыТССоставПлана.Маршрут КАК Маршрут,
	|	уатПланированиеРаботыТССоставПлана.ОбъектСтроительства КАК ОбъектСтроительства,
	|	уатПланированиеРаботыТССоставПлана.НаправлениеПеревозки КАК НаправлениеПеревозки,
	|	уатПланированиеРаботыТССоставПлана.Номенклатура КАК Номенклатура,
	|	уатПланированиеРаботыТССоставПлана.Услуга КАК Услуга,
	|	уатПланированиеРаботыТССоставПлана.Статья КАК Статья,
	|	уатПланированиеРаботыТССоставПлана.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА уатПланированиеРаботыТССоставПлана.Ссылка.УчитыватьНДС
	|				И НЕ уатПланированиеРаботыТССоставПлана.Ссылка.СуммаВключаетНДС
	|			ТОГДА уатПланированиеРаботыТССоставПлана.Сумма + уатПланированиеРаботыТССоставПлана.СуммаНДС
	|		ИНАЧЕ уатПланированиеРаботыТССоставПлана.Сумма
	|	КОНЕЦ КАК Сумма,
	|	уатПланированиеРаботыТССоставПлана.СуммаНДС КАК СуммаНДСВал,
	|	0 КАК СуммаРегл,
	|	0 КАК СуммаНДС,
	|	уатПланированиеРаботыТССоставПлана.НомерИнтервала КАК НомерИнтервала
	|ИЗ
	|	Документ.уатПланированиеРаботыТС.СоставПлана КАК уатПланированиеРаботыТССоставПлана
	|ГДЕ
	|	уатПланированиеРаботыТССоставПлана.Ссылка = &Ссылка";
	
	мЗапрос.УстановитьПараметр("Ссылка",    ДокументСсылка);
	мЗапрос.УстановитьПараметр("ДатаСреза", ДокументСсылка.Дата);
	
	мТаб = мЗапрос.Выполнить().Выгрузить();
    мТаб.Колонки.Добавить("Периодичность", Новый ОписаниеТипов("ПеречислениеСсылка.Периодичность"));
	
	Для Каждого ТекСтрока ИЗ мТаб Цикл
		Если ТекСтрока.НомерИнтервала = 0 Тогда
			ТекСтрока.Периодичность = Периодичность;
		Иначе
			ТекСтрока.Периодичность = ПериодичностьКраткосрочногоПланирования;
		КонецЕсли;
		
		Если флПланированиеСуммы Тогда
			ТекСтрока.СуммаРегл = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.Сумма,
				ДокументСсылка.ВалютаДокумента,    СтруктураДополнительныеСвойства.ВалютаРеглУчета,
				ДокументСсылка.КурсДокумента,      СтруктураДополнительныеСвойства.КурсРегл,
				ДокументСсылка.КратностьДокумента, СтруктураДополнительныеСвойства.КратностьРегл);
		
			ТекСтрока.СуммаНДС = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаНДСВал,
				ДокументСсылка.ВалютаДокумента,    СтруктураДополнительныеСвойства.ВалютаРеглУчета, 
				ДокументСсылка.КурсДокумента,      СтруктураДополнительныеСвойства.КурсРегл, 
				ДокументСсылка.КратностьДокумента, СтруктураДополнительныеСвойства.КратностьРегл);
		КонецЕсли;
		
		Если ТекСтрока.ПараметрВыработки.Временный Тогда
			ТекСтрока.Количество = Цел(ТекСтрока.Количество) * 3600 + (ТекСтрока.Количество - Цел(ТекСтрока.Количество))*100*60;
		КонецЕсли;
	КонецЦикла;
	
	Если ХарактеристикиСценария.флВыработка Тогда
		УчетВыработкиПоПодразделениям = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументСсылка.Организация,
			ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоПодразделениям"));
			
		Если НЕ УчетВыработкиПоПодразделениям Тогда
			мТаб.ЗаполнитьЗначения(Неопределено, "Подразделение");
		КонецЕсли;

	КонецЕсли;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПланаРаботыТС", мТаб);
		
КонецПроцедуры // ИнициализироватьДанныеДокумента()

Процедура ВыполнитьКонтроль(ДокументСсылка, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь) Экспорт
	
	Если Не УдалениеПроведения
		И ДокументСсылка.Сценарий.Раздел = Перечисления.уатРазделыПланирования.ОбъемыПеревозок Тогда
		
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатПланированиеРаботыТС.Ссылка КАК Ссылка,
		|	уатПланированиеРаботыТС.ДатаПланирования КАК НачалоАктуальногоПлана,
		|	ВЫБОР
		|		КОГДА уатПланированиеРаботыТС.Сценарий.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Декада)
		|			ТОГДА КОНЕЦПЕРИОДА(уатПланированиеРаботыТС.ДатаПланирования, ДЕКАДА)
		|		КОГДА уатПланированиеРаботыТС.Сценарий.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
		|			ТОГДА КОНЕЦПЕРИОДА(уатПланированиеРаботыТС.ДатаПланирования, МЕСЯЦ)
		|		КОГДА уатПланированиеРаботыТС.Сценарий.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
		|			ТОГДА КОНЕЦПЕРИОДА(уатПланированиеРаботыТС.ДатаПланирования, КВАРТАЛ)
		|		КОГДА уатПланированиеРаботыТС.Сценарий.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие)
		|			ТОГДА КОНЕЦПЕРИОДА(уатПланированиеРаботыТС.ДатаПланирования, ПОЛУГОДИЕ)
		|		КОГДА уатПланированиеРаботыТС.Сценарий.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Год)
		|			ТОГДА КОНЕЦПЕРИОДА(уатПланированиеРаботыТС.ДатаПланирования, ГОД)
		|		ИНАЧЕ уатПланированиеРаботыТС.ДатаПланирования
		|	КОНЕЦ КАК КонецАктуальногоПлана
		|ПОМЕСТИТЬ втАктуальныеПланы
		|ИЗ
		|	Документ.уатПланированиеРаботыТС КАК уатПланированиеРаботыТС
		|ГДЕ
		|	уатПланированиеРаботыТС.Ссылка <> &Ссылка
		|	И уатПланированиеРаботыТС.Организация = &Организация
		|	И уатПланированиеРаботыТС.Подразделение = &Подразделение
		|	И Не (уатПланированиеРаботыТС.ДатаПланирования > &КонецПериода
		|			ИЛИ ВЫБОР
		|				КОГДА уатПланированиеРаботыТС.Сценарий.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Декада)
		|					ТОГДА КОНЕЦПЕРИОДА(уатПланированиеРаботыТС.ДатаПланирования, ДЕКАДА)
		|				КОГДА уатПланированиеРаботыТС.Сценарий.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
		|					ТОГДА КОНЕЦПЕРИОДА(уатПланированиеРаботыТС.ДатаПланирования, МЕСЯЦ)
		|				КОГДА уатПланированиеРаботыТС.Сценарий.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
		|					ТОГДА КОНЕЦПЕРИОДА(уатПланированиеРаботыТС.ДатаПланирования, КВАРТАЛ)
		|				КОГДА уатПланированиеРаботыТС.Сценарий.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие)
		|					ТОГДА КОНЕЦПЕРИОДА(уатПланированиеРаботыТС.ДатаПланирования, ПОЛУГОДИЕ)
		|				КОГДА уатПланированиеРаботыТС.Сценарий.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Год)
		|					ТОГДА КОНЕЦПЕРИОДА(уатПланированиеРаботыТС.ДатаПланирования, ГОД)
		|				ИНАЧЕ уатПланированиеРаботыТС.ДатаПланирования
		|			КОНЕЦ < &НачалоПериода)
		|	И уатПланированиеРаботыТС.Проведен = ИСТИНА
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втАктуальныеПланы.Ссылка КАК Ссылка,
		|	СоставНовыхПланов.Контрагент КАК Контрагент,
		|	втАктуальныеПланы.НачалоАктуальногоПлана КАК НачалоАктуальногоПлана,
		|	втАктуальныеПланы.КонецАктуальногоПлана КАК КонецАктуальногоПлана
		|ИЗ
		|	втАктуальныеПланы КАК втАктуальныеПланы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатПланированиеРаботыТС.СоставПлана КАК СоставСуществующихПланов
		|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатПланированиеРаботыТС.СоставПлана КАК СоставНовыхПланов
		|			ПО СоставСуществующихПланов.Контрагент = СоставНовыхПланов.Контрагент
		|		ПО втАктуальныеПланы.Ссылка = СоставСуществующихПланов.Ссылка
		|ГДЕ
		|	СоставНовыхПланов.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	втАктуальныеПланы.Ссылка,
		|	СоставНовыхПланов.Контрагент,
		|	втАктуальныеПланы.НачалоАктуальногоПлана,
		|	втАктуальныеПланы.КонецАктуальногоПлана");
		Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
		Запрос.УстановитьПараметр("Организация", ДокументСсылка.Организация);
		Запрос.УстановитьПараметр("Подразделение", ДокументСсылка.Подразделение);
		НачалоПериода = ДокументСсылка.ДатаПланирования;
		КонецПериода = ДокументСсылка.ДатаПланирования;
		уатОбщегоНазначенияТиповые.уатВыровнятьПериод(НачалоПериода, КонецПериода, ДокументСсылка.Сценарий.Периодичность);
		Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
		Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			Заголовок = уатОбщегоНазначенияТиповые.уатПредставлениеДокументаПриПроведении(ДокументСсылка);
			Выборка = РезультатЗапроса.Выбрать();
			Пока Выборка.Следующий() Цикл
				ТекстНСтр = СтрШаблон(
				НСтр("ru = 'Для перевозчика %1 обнаружен конфликтующий план в документе ""%2"" за период с %3 по %4'"),
				Выборка.Контрагент, Выборка.Ссылка, Выборка.НачалоАктуальногоПлана, Выборка.КонецАктуальногоПлана);
				уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСтр, Отказ, Заголовок);
			КонецЦикла; 
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// Функция формирует табличный документ с печатной формой
//
// Возвращаемое значение:
//  Табличный документ - печатная форма
//
Функция ПечатьПланРаботыТС(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_ПланированиеРаботыТС";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.уатПланированиеРаботыТС.ПланРаботыТС");
	
	ПервыйДокумент = Истина;
	
	Для Каждого ТекущийДокумент Из МассивОбъектов Цикл
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент);
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатПланированиеРаботыТС.Организация КАК Организация,
		|	уатПланированиеРаботыТС.Номер КАК Номер,
		|	уатПланированиеРаботыТС.Дата КАК Дата,
		|	уатПланированиеРаботыТС.ДатаПланирования КАК ДатаПланирования,
		|	уатПланированиеРаботыТС.Ответственный.Представление КАК ОтветственныйПредставление,
		|	уатПланированиеРаботыТС.Подразделение.Представление КАК ПодразделениеПредставление,
		|	уатПланированиеРаботыТС.Сценарий.Представление КАК СценарийПредставление,
		|	уатПланированиеРаботыТС.Сценарий.Периодичность КАК ПериодичностьДетализации,
		|	уатПланированиеРаботыТС.СоставПлана.(
		|		ДетализацияПланирования.Представление КАК ДетализацияПланированияПредставление,
		|		ДетализацияПланирования КАК ДетализацияПланирования,
		|		Номенклатура.Представление КАК НоменклатураПредставление,
		|		Номенклатура КАК Номенклатура,
		|		Колонна КАК Колонна,
		|		ВидПеревозки КАК ВидПеревозки,
		|		Контрагент КАК Контрагент,
		|		Договор КАК Договор,
		|		Маршрут КАК Маршрут,
		|		ОбъектСтроительства КАК ОбъектСтроительства,
		|		НаправлениеПеревозки КАК НаправлениеПеревозки,
		|		Услуга КАК Услуга,
		|		Статья КАК Статья,
		|		Количество КАК Количество,
		|		Сумма КАК Сумма,
		|		СуммаНДС КАК СуммаНДС,
		|		ПараметрВыработки.Представление КАК ПараметрВыработкиПредставление,
		|		НомерСтрокиРодитель КАК НомерСтроки,
		|		НомерИнтервала КАК НомерИнтервала,
		|		СтавкаНДС КАК СтавкаНДС
		|	) КАК СоставПлана,
		|	уатПланированиеРаботыТС.Ответственный КАК Ответственный,
		|	уатПланированиеРаботыТС.Подразделение КАК Подразделение,
		|	уатПланированиеРаботыТС.Сценарий КАК Сценарий,
		|	уатПланированиеРаботыТС.УчитыватьНДС КАК УчитыватьНДС,
		|	уатПланированиеРаботыТС.СуммаВключаетНДС КАК СуммаВключаетНДС,
		|	уатПланированиеРаботыТС.Сценарий.Раздел = ЗНАЧЕНИЕ(Перечисление.уатРазделыПланирования.ПредоставленныеУслуги) КАК ПланированиеУслуг
		|ИЗ
		|	Документ.уатПланированиеРаботыТС КАК уатПланированиеРаботыТС
		|ГДЕ
		|	уатПланированиеРаботыТС.Ссылка = &ТекущийДокумент";
		
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();
		ВыборкаСоставПлана = Шапка.СоставПлана.Выбрать();
		
		ТабличныйДокумент = Новый ТабличныйДокумент;
		ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_уатПланированиеРаботыТС_ПланРаботыТС";
		Макет = ПолучитьМакет("ПланРаботыТС");
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(Шапка, "План работы ТС");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаРеквизиты");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		
		ДатаНачала    = Шапка.ДатаПланирования;
		ДатаОкончания = Шапка.ДатаПланирования;
		уатОбщегоНазначенияТиповые.уатВыровнятьПериод(ДатаНачала, ДатаОкончания, Шапка.ПериодичностьДетализации);
		ОбластьМакета.Параметры.ПериодПланирования = ПредставлениеПериода(ДатаНачала, ДатаОкончания, "ФП=Истина");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ХарактеристикиСценария = уатОбщегоНазначения_проф.ЗаполнитьХарактеристикиСценария(ТекущийДокумент.Сценарий);

		ОбластьШапки = Макет.ПолучитьОбласть("Шапка|Номер");
		ТабличныйДокумент.Присоединить(ОбластьШапки);
		
		ОбластьШапки = Макет.ПолучитьОбласть("Шапка|ВариантАналитикиТС");
		ОбластьШапки.Параметры.ВариантАналитикиТС = ХарактеристикиСценария.ВариантАналитикиТС;
		ТабличныйДокумент.Присоединить(ОбластьШапки);
		
		ОбластьШапки = Макет.ПолучитьОбласть("Шапка|Колонна");
		ТабличныйДокумент.Присоединить(ОбластьШапки);
		
		Если ХарактеристикиСценария.флПараметрВыработки Тогда
			ОбластьШапки = Макет.ПолучитьОбласть("Шапка|ПараметрВыработки");
			ТабличныйДокумент.Присоединить(ОбластьШапки);
		КонецЕсли;
		
		Если ХарактеристикиСценария.флВидПеревозки Тогда
			ОбластьШапки = Макет.ПолучитьОбласть("Шапка|ВидПеревозки");
			ТабличныйДокумент.Присоединить(ОбластьШапки);
		КонецЕсли;
		
		Если ХарактеристикиСценария.флКонтрагент Тогда
			ОбластьШапки = Макет.ПолучитьОбласть("Шапка|Контрагент");
			ТабличныйДокумент.Присоединить(ОбластьШапки);
		КонецЕсли;
		
		Если ХарактеристикиСценария.флДоговор Тогда
			ОбластьШапки = Макет.ПолучитьОбласть("Шапка|Договор");
			ТабличныйДокумент.Присоединить(ОбластьШапки);
		КонецЕсли;
		
		Если ХарактеристикиСценария.флМаршрут Тогда
			ОбластьШапки = Макет.ПолучитьОбласть("Шапка|Маршрут");
			ТабличныйДокумент.Присоединить(ОбластьШапки);
		КонецЕсли;
		
		Если ХарактеристикиСценария.флОбъектСтроительства Тогда
			ОбластьШапки = Макет.ПолучитьОбласть("Шапка|ОбъектСтроительства");
			ТабличныйДокумент.Присоединить(ОбластьШапки);
		КонецЕсли;
		
		Если ХарактеристикиСценария.флНаправлениеПеревозки Тогда
			ОбластьШапки = Макет.ПолучитьОбласть("Шапка|НаправлениеПеревозки");
			ТабличныйДокумент.Присоединить(ОбластьШапки);
		КонецЕсли;
		
		Если ХарактеристикиСценария.флНоменклатураГруза Тогда
			ОбластьШапки = Макет.ПолучитьОбласть("Шапка|Номенклатура");
			ТабличныйДокумент.Присоединить(ОбластьШапки);
		КонецЕсли;
		
		Если ХарактеристикиСценария.флУслуга Тогда
			ОбластьШапки = Макет.ПолучитьОбласть("Шапка|Услуга");
			ТабличныйДокумент.Присоединить(ОбластьШапки);
		КонецЕсли;
		
		Если ХарактеристикиСценария.флСтатья Тогда
			ОбластьШапки = Макет.ПолучитьОбласть("Шапка|Статья");
			ТабличныйДокумент.Присоединить(ОбластьШапки);
		КонецЕсли;
		
		ОбластьШапки = Макет.ПолучитьОбласть("Шапка|Количество");
		ТабличныйДокумент.Присоединить(ОбластьШапки);
		
		Если НЕ ХарактеристикиСценария.флВыработка Тогда
			ОбластьШапки = Макет.ПолучитьОбласть("Шапка|Сумма");
			ТабличныйДокумент.Присоединить(ОбластьШапки);
		КонецЕсли;
		
		Сумма    = 0;
		СуммаНДС = 0;
		
		ВыборкаСоставПлана = Шапка.СоставПлана.Выбрать();
		Пока ВыборкаСоставПлана.Следующий() Цикл
			Если ВыборкаСоставПлана.НомерИнтервала <> 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ОбластьСтроки = Макет.ПолучитьОбласть("Строка|Номер");
			ОбластьСтроки.Параметры.Заполнить(ВыборкаСоставПлана);
			ТабличныйДокумент.Вывести(ОбластьСтроки);
		
			ОбластьСтроки = Макет.ПолучитьОбласть("Строка|ВариантАналитикиТС");
			ОбластьСтроки.Параметры.Заполнить(ВыборкаСоставПлана);
			ТабличныйДокумент.Присоединить(ОбластьСтроки);
			
			ОбластьСтроки = Макет.ПолучитьОбласть("Строка|Колонна");
			ОбластьСтроки.Параметры.Заполнить(ВыборкаСоставПлана);
			ТабличныйДокумент.Присоединить(ОбластьСтроки);
			
			Если ХарактеристикиСценария.флПараметрВыработки Тогда
				ОбластьСтроки = Макет.ПолучитьОбласть("Строка|ПараметрВыработки");
				ОбластьСтроки.Параметры.Заполнить(ВыборкаСоставПлана);
				ТабличныйДокумент.Присоединить(ОбластьСтроки);
			КонецЕсли;
			
			Если ХарактеристикиСценария.флВидПеревозки Тогда
				ОбластьСтроки = Макет.ПолучитьОбласть("Строка|ВидПеревозки");
				ОбластьСтроки.Параметры.Заполнить(ВыборкаСоставПлана);
				ТабличныйДокумент.Присоединить(ОбластьСтроки);
			КонецЕсли;
			
			Если ХарактеристикиСценария.флКонтрагент Тогда
				ОбластьСтроки = Макет.ПолучитьОбласть("Строка|Контрагент");
				ОбластьСтроки.Параметры.Заполнить(ВыборкаСоставПлана);
				ТабличныйДокумент.Присоединить(ОбластьСтроки);
			КонецЕсли;
			
			Если ХарактеристикиСценария.флДоговор Тогда
				ОбластьСтроки = Макет.ПолучитьОбласть("Строка|Договор");
				ОбластьСтроки.Параметры.Заполнить(ВыборкаСоставПлана);
				ТабличныйДокумент.Присоединить(ОбластьСтроки);
			КонецЕсли;
			
			Если ХарактеристикиСценария.флМаршрут Тогда
				ОбластьСтроки = Макет.ПолучитьОбласть("Строка|Маршрут");
				ОбластьСтроки.Параметры.Заполнить(ВыборкаСоставПлана);;
				ТабличныйДокумент.Присоединить(ОбластьСтроки);
			КонецЕсли;
			
			Если ХарактеристикиСценария.флОбъектСтроительства Тогда
				ОбластьСтроки = Макет.ПолучитьОбласть("Строка|ОбъектСтроительства");
				ОбластьСтроки.Параметры.Заполнить(ВыборкаСоставПлана);
				ТабличныйДокумент.Присоединить(ОбластьСтроки);
			КонецЕсли;
			
			Если ХарактеристикиСценария.флНаправлениеПеревозки Тогда
				ОбластьСтроки = Макет.ПолучитьОбласть("Строка|НаправлениеПеревозки");
				ОбластьСтроки.Параметры.Заполнить(ВыборкаСоставПлана);
				ТабличныйДокумент.Присоединить(ОбластьСтроки);
			КонецЕсли;
			
			Если ХарактеристикиСценария.флНоменклатураГруза Тогда
				ОбластьСтроки = Макет.ПолучитьОбласть("Строка|Номенклатура");
				ОбластьСтроки.Параметры.Заполнить(ВыборкаСоставПлана);
				ТабличныйДокумент.Присоединить(ОбластьСтроки);
			КонецЕсли;
			
			Если ХарактеристикиСценария.флУслуга Тогда
				ОбластьСтроки = Макет.ПолучитьОбласть("Строка|Услуга");
				ОбластьСтроки.Параметры.Заполнить(ВыборкаСоставПлана);
				ТабличныйДокумент.Присоединить(ОбластьСтроки);
			КонецЕсли;
			
			Если ХарактеристикиСценария.флСтатья Тогда
				ОбластьСтроки = Макет.ПолучитьОбласть("Строка|Статья");
				ОбластьСтроки.Параметры.Заполнить(ВыборкаСоставПлана);
				ТабличныйДокумент.Присоединить(ОбластьСтроки);
			КонецЕсли;
			
			ОбластьСтроки = Макет.ПолучитьОбласть("Строка|Количество");
			ОбластьСтроки.Параметры.Заполнить(ВыборкаСоставПлана);
			ТабличныйДокумент.Присоединить(ОбластьСтроки);
			
			Если НЕ ХарактеристикиСценария.флВыработка Тогда
				
				ОбластьСтроки = Макет.ПолучитьОбласть("Строка|Сумма");
				ОбластьСтроки.Параметры.Заполнить(ВыборкаСоставПлана);
				ТабличныйДокумент.Присоединить(ОбластьСтроки);
				
			КонецЕсли;
			
			Сумма    = Сумма    + ВыборкаСоставПлана.Сумма;
			СуммаНДС = СуммаНДС + ВыборкаСоставПлана.СуммаНДС;
		КонецЦикла;
		
		Если НЕ ХарактеристикиСценария.флВыработка Тогда
			// Вывести Итого
			ОбластьМакета                 = Макет.ПолучитьОбласть("Итого");
			ОбластьМакета.Параметры.Всего = уатОбщегоНазначенияТиповые.уатФорматСумм(Сумма);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			// Вывести ИтогоНДС
			Если Шапка.УчитыватьНДС Тогда
				СтавкиНДС = ОбщегоНазначения.ВыгрузитьКолонку(Шапка.СоставПлана.Выгрузить(), "СтавкаНДС", Истина);
				ОбластьМакета                    = Макет.ПолучитьОбласть("ИтогоНДС");
				ДанныеПечатиНДС = уатОбщегоНазначенияТиповые.уатДанныеПечатиИтоговНДС(СуммаНДС, СтавкиНДС, Шапка.СуммаВключаетНДС, ":"); 
				
				ОбластьМакета.Параметры.ВсегоНДС = ДанныеПечатиНДС.ВсегоНДС;
				ОбластьМакета.Параметры.НДС      = ДанныеПечатиНДС.НДС;
				ТабличныйДокумент.Вывести(ОбластьМакета);
			КонецЕсли;
		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		ОбластьМакета.Параметры.ОтветственныйПредставление = "/" + Шапка.ОтветственныйПредставление + "/";
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ТекущийДокумент);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатьПланаПроизводства()

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	уатЗащищенныеФункцииСервер.уатДокументФормаЭлементаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, Объект, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Взаимодействия
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Взаимодействия") Тогда
		МодульВзаимодействия = ОбщегоНазначения.ОбщийМодуль("Взаимодействия");
		МодульВзаимодействия.ПодготовитьОповещения(ЭтотОбъект, Параметры, Ложь);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Взаимодействия
		
	// уатУправлениеАвтотранспортом.МодификацияКонфигурации
	уатМодификацияКонфигурацииПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	// Конец уатУправлениеАвтотранспортом.МодификацияКонфигурации
	
	
	уатОбщегоНазначенияСервер.НастроитьПолеДоговорКонтрагента(Элементы.ДоговорКонтрагента, "Объект.Организация", "Объект.Контрагент", "СПоставщиком");
	
	Контрагент                 = Объект.Контрагент;
	Договор                    = Объект.ДоговорКонтрагента;
	ОрганизацияПередИзменением = Объект.Организация;
	ПрофильОбмена              = Объект.Контрагент.ПрофильОбменаССервисомСтрахования;
	ТипСоответствияКолонок     = ПрофильОбмена.ТипСоответствияКолонок;
	СоответствиеКолонок.Загрузить(ПрофильОбмена.СоответствиеКолонок.Выгрузить());
	ЗаполнитьВалютыУчета();


КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// уатУправлениеАвтотранспортом.МодификацияКонфигурации
	уатМодификацияКонфигурацииКлиентПереопределяемый.ПриОткрытии(ЭтотОбъект, Отказ);
	// Конец уатУправлениеАвтотранспортом.МодификацияКонфигурации
	
	уатЗащищенныеФункцииКлиент.уатДокументФормаЭлементаПриОткрытии(Отказ, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// уатУправлениеАвтотранспортом.МодификацияКонфигурации
&НаКлиенте
Процедура Подключаемый_ПолеФормыНажатие(Элемент, СтандартнаяОбработка)
	
	уатМодификацияКонфигурацииКлиентПереопределяемый.ПолеФормыНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	Если Объект.Организация = ОрганизацияПередИзменением Тогда
		Возврат;
	КонецЕсли;
	ОрганизацияПередИзменением = Объект.Организация;
	
	ПриИзмененииКонтрагентаИлиОрганизации();

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПередИзменением = Контрагент;
	Контрагент                = Объект.Контрагент;
	
	Если КонтрагентПередИзменением <> Объект.Контрагент Тогда
		ПриИзмененииКонтрагентаИлиОрганизации();
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СверкаПриИзменении(Элемент)
	ТекСтрока = Элементы.Сверка.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекСтрока.РезультатСопоставления = ?(ЗначениеЗаполнено(ТекСтрока.СтраховойСертификат), 
	ТекСтрока.Сумма <> ТекСтрока.СуммаУчет И ТекСтрока.Валюта <> ТекСтрока.ВалютаУчет, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаСоздание(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВидДоговораДоступныеЗначения = Новый Массив;
	
	мВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком");
	ВидДоговораДоступныеЗначения.Добавить(мВидДоговора);
	
	ПараметрыФормы = Новый Структура(); 
	ПараметрыФормы.Вставить("Владелец", Объект.Контрагент);
	ПараметрыФормы.Вставить("ВидДоговораДоступныеЗначения", ВидДоговораДоступныеЗначения);
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// уатУправлениеАвтотранспортом.МодификацияКонфигурации
&НаКлиенте
Процедура Подключаемый_уатВыполнитьКоманду(Команда)
	
	уатМодификацияКонфигурацииКлиентПереопределяемый.ВыполнитьПодключаемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры
// Конец уатУправлениеАвтотранспортом.МодификацияКонфигурации

&НаКлиенте
Процедура СоздатьДоговорКонтрагента(Команда)
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ОповещениеОВыполнении = Новый ОписаниеОповещения("СоздатьДоговорКонтрагентаВопрос", ЭтотОбъект);
		ТекстВопроса = Нстр("ru = 'Будет создан и подставлен в документ новый договор. Продолжить?'");
		ПоказатьВопрос(ОповещениеОВыполнении, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	Иначе
		СоздатьДоговорКонтрагентаЗавершение();
	КонецЕсли;
КонецПроцедуры 

&НаКлиенте
Процедура СоздатьДоговорКонтрагентаВопрос(РезультатВопроса, ДопПараметоы) Экспорт 
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		СоздатьДоговорКонтрагентаЗавершение();
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

&НаКлиенте
Процедура НастройкаПериода(Команда)
	
	ДиалогПериода = Новый ДиалогРедактированияСтандартногоПериода();
	ДиалогПериода.Период.ДатаНачала = Объект.ДатаНачалаПериода;
	ДиалогПериода.Период.ДатаОкончания = Объект.ДатаОкончанияПериода;
	ДиалогПериода.Показать(Новый ОписаниеОповещения("НастройкаПериодаЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДаннымУчета(Команда)
	Если Объект.Сверка.Количество() Тогда 
		ТекстНСТР = НСтр("en='Clear the list before the selection?';ru='Очистить список перед заполнением?'");
		Оповещение = Новый ОписаниеОповещения("ОчисткаТЧСверка", ЭтотОбъект, Новый Структура("ЗаполнитьПоДаннымУчета", Истина));
		ПоказатьВопрос(Оповещение, ТекстНСТР, РежимДиалогаВопрос.ДаНетОтмена);
	Иначе 
		ЗаполнитьПоДаннымУчетаНаСервере();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	
	Если НЕ ЗначениеЗаполнено(ПрофильОбмена) Тогда
		ТекстНСТР = НСтр("ru='В контрагенте не выбран профиль обмена с сервисом страхования.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		Возврат;
	КонецЕсли;
	
	Если Объект.Сверка.Количество() Тогда 
		ТекстНСТР = НСтр("en='Clear the list before the selection?';ru='Очистить список перед заполнением?'");
		Оповещение = Новый ОписаниеОповещения("ОчисткаТЧСверка", ЭтотОбъект, Новый Структура("ЗагрузитьИзФайла", Истина));
		ПоказатьВопрос(Оповещение, ТекстНСТР, РежимДиалогаВопрос.ДаНетОтмена);
	Иначе 
		ЗагрузитьИзФайлаПродолжение();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Очистить(Команда)
	Если Объект.Сверка.Количество() Тогда 
		ТекстНСТР = НСтр("en='Clear the list before the selection?';ru='Очистить список?'");
		Оповещение = Новый ОписаниеОповещения("ОчисткаТЧСверка", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстНСТР, РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Сопоставить(Команда)
	СопоставитьСервер();
КонецПроцедуры

&НаСервере
Процедура СопоставитьСервер()
	МассивДляУдаления = Новый Массив();
	
	Для Каждого ТекСтрока Из Объект.Сверка Цикл
		Если НЕ ЗначениеЗаполнено(ТекСтрока.СтраховойСертификат) Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокиСопоставления = Объект.Сверка.НайтиСтроки(Новый Структура("СтраховойСертификат, ВходящийНомер", 
		Документы.уатСтраховойСертификат_уэ.ПустаяСсылка(), ТекСтрока.ВходящийНомерУчет));
		Если СтрокиСопоставления.Количество() <> 0 Тогда
			ТекСтрока.ВходящийНомер          = СтрокиСопоставления[0].ВходящийНомер;
			ТекСтрока.ДатаВходящегоДокумента = СтрокиСопоставления[0].ДатаВходящегоДокумента;
			ТекСтрока.Сумма                  = СтрокиСопоставления[0].Сумма;
			ТекСтрока.Валюта                 = СтрокиСопоставления[0].Валюта;
			ТекСтрока.РезультатСопоставления = ?(ЗначениеЗаполнено(ТекСтрока.СтраховойСертификат), 
				ТекСтрока.Сумма <> ТекСтрока.СуммаУчет И ТекСтрока.Валюта <> ТекСтрока.ВалютаУчет, Ложь);
			МассивДляУдаления.Добавить(СтрокиСопоставления[0]);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекСтрока Из МассивДляУдаления Цикл
		Объект.Сверка.Удалить(ТекСтрока);
	КонецЦИкла;
КонецПроцедуры


#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ОчисткаТЧСверка(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда 
		Объект.Сверка.Очистить();
	КонецЕсли;
	
	Если ДополнительныеПараметры = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ЗаполнитьПоДаннымУчета") Тогда
		ЗаполнитьПоДаннымУчетаНаСервере();
	ИначеЕсли ДополнительныеПараметры.Свойство("ЗагрузитьИзФайла") Тогда
		ЗагрузитьИзФайлаПродолжение();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииКонтрагентаИлиОрганизации()
	
	ДанныеОбменаССервером = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, Дата");
	ЗаполнитьЗначенияСвойств(ДанныеОбменаССервером, Объект);
	// Получим данные с сервера
	ДанныеОбменаССервером.ДоговорКонтрагента = Объект.ДоговорКонтрагента;
	ЗначенияДляЗаполнения                    = ИзменениеКонтрагентаСервер(ДанныеОбменаССервером);
	Объект.ДоговорКонтрагента                = ЗначенияДляЗаполнения.ДоговорКонтрагента;

	ДоговорПередИзменением = Договор;
	Договор                = Объект.ДоговорКонтрагента;

	
КонецПроцедуры

&НаСервере
Функция ИзменениеКонтрагентаСервер(ДанныеДляЗаполнения)
	
	СтруктураПараметровДляПолученияДоговора =
		уатЗаполнениеДокументов.ПолучитьСтруктуруПараметровДляПолученияДоговораПродажи();
	
	ЗначенияДляЗаполнения = уатОбщегоНазначенияСервер.ПриИзмененииЗначенияКонтрагента(
		ДанныеДляЗаполнения,
		СтруктураПараметровДляПолученияДоговора
	);
	
	ПрофильОбмена              = Объект.Контрагент.ПрофильОбменаССервисомСтрахования;
	ТипСоответствияКолонок     = ПрофильОбмена.ТипСоответствияКолонок;
	СоответствиеКолонок.Загрузить(ПрофильОбмена.СоответствиеКолонок.Выгрузить());
	
	Возврат ЗначенияДляЗаполнения;
	
КонецФункции

&НаКлиенте
Процедура СоздатьДоговорКонтрагентаЗавершение()
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Владелец",    Объект.Контрагент);
	ПараметрыЗаполнения.Вставить("Контрагент",  Объект.Контрагент);
	ПараметрыЗаполнения.Вставить("Организация", Объект.Организация);
	Объект.ДоговорКонтрагента = уатНастройкиШаблонов.СоздатьДоговорКонтрагентаПоШаблону(ПараметрыЗаполнения, "1", Истина);
КонецПроцедуры

&НаКлиенте
Процедура НастройкаПериодаЗавершение(Период, ДополнительныеПараметры) Экспорт
	
	Если Период = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.ДатаНачалаПериода    = Период.ДатаНачала;
	Объект.ДатаОкончанияПериода = Период.ДатаОкончания;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоДаннымУчетаНаСервере()
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДатаНачалаПериода",    Объект.ДатаНачалаПериода);
	Запрос.УстановитьПараметр("ДатаОкончанияПериода", Объект.ДатаОкончанияПериода);
	Запрос.УстановитьПараметр("Организация",          Объект.Организация);
	Запрос.УстановитьПараметр("Организация",          Объект.Организация);
	Запрос.УстановитьПараметр("Контрагент",           Объект.Контрагент);
	Запрос.УстановитьПараметр("ДоговорКонтрагента",   Объект.ДоговорКонтрагента);
	Запрос.Текст = "ВЫБРАТЬ
	               |	уатСтраховойСертификат_уэ.Ссылка КАК Ссылка,
	               |	уатСтраховойСертификат_уэ.ВалютаДокумента КАК ВалютаДокумента,
	               |	уатСтраховойСертификат_уэ.СуммаДокумента КАК СуммаДокумента,
	               |	уатСтраховойСертификат_уэ.ВходящийНомер КАК ВходящийНомер
	               |ИЗ
	               |	Документ.уатСтраховойСертификат_уэ КАК уатСтраховойСертификат_уэ
	               |ГДЕ
	               |	уатСтраховойСертификат_уэ.Проведен = ИСТИНА
	               |	И уатСтраховойСертификат_уэ.Дата МЕЖДУ &ДатаНачалаПериода И &ДатаОкончанияПериода
	               |	И уатСтраховойСертификат_уэ.Организация = &Организация
	               |	И уатСтраховойСертификат_уэ.ДоговорКонтрагента = &ДоговорКонтрагента
	               |	И уатСтраховойСертификат_уэ.Контрагент = &Контрагент";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Объект.Сверка.Добавить();
		НоваяСтрока.СтраховойСертификат = Выборка.Ссылка;
		НоваяСтрока.ВалютаУчет = Выборка.ВалютаДокумента;
		НоваяСтрока.СуммаУчет  = Выборка.СуммаДокумента;
		НоваяСтрока.ВходящийНомерУчет = Выборка.ВходящийНомер;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаПродолжение()
	
	Обработчик = Новый ОписаниеОповещения("ПоказатьДиалогВыбораФайла", ЭтотОбъект);
	НачатьПодключениеРасширенияРаботыСФайлами(Обработчик);

КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуЗавершениеВыбора(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПутьКФайлу = ВыбранныеФайлы[0];
	
	ПустаяСтрокаИмяФайла = ПустаяСтрока(ПутьКФайлу);
	Если ПустаяСтрокаИмяФайла Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru = 'Не указано имя файла!'"));
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из СоответствиеКолонок Цикл
		Если НЕ ТекСтрока.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипСоответствияКолонок = 0 И ПустаяСтрока(ТекСтрока.ИмяКолонкиФайла)
			ИЛИ ТипСоответствияКолонок = 1 И ТекСтрока.НомерКолонкиФайла = 0 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru = 'Не указано соответствие для колонки документа ""'") + ТекСтрока.КолонкаДокументаПредставление + """!");
			Возврат;
		КонецЕсли;
	КонецЦикла;
	
	СтрокаОшибки = "";
	Попытка
		ВыполнитьЗагрузкуДанных(СтрокаОшибки);
	Исключение
		СтрокаОшибки = Нстр("ru = 'Данные документа не были загружены. Проверьте настройки профиля обмена.'");
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Функция ВыполнитьЗагрузкуДанных(СтрокаОшибки = "")
	
	мсвЗагруженныеДанные = Новый Массив(); 
	Состояние(Нстр("ru = 'Открытие файла ...'"));
	Если ВыполнитьЗагрузкуДанныхExcel(мсвЗагруженныеДанные, СтрокаОшибки) Тогда
		Для Каждого ТекСтрока Из мсвЗагруженныеДанные Цикл
			НоваяЗаправка = Объект.Сверка.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗаправка, ТекСтрока);
		КонецЦикла;
		Модифицированность = Истина;
	КонецЕсли;
КонецФункции

&НаСервере
Функция ВыполнитьЗагрузкуДанныхExcel(мсвЗагруженныеДанные, СтрокаОшибки)
	
	ДлинаДаты        = СтрДлина("01.01.1900");
	ДлинаДатыСокр    = СтрДлина("01.01.19");
	ДлинаВремени     = СтрДлина("12:00:00");
	ДлинаВремениСокр = СтрДлина("12:00");
		
	Попытка
		НашФайл = ПолучитьCOMОбъект(ПутьКФайлу);
	Исключение
		СтрокаОшибки = ИнформацияОбОшибке().Описание + ?(ИнформацияОбОшибке().Причина = Неопределено, "", " по причине: " + ИнформацияОбОшибке().Причина.Описание + " (возможно, не установлен MS Excel!)");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	
	Попытка
		НашЛист = НашФайл.WorkSheets.Item(1);
		ПослСтр = НашЛист.Cells(1,1).SpecialCells(11).Row;
	Исключение
		СтрокаОшибки = ИнформацияОбОшибке().Описание + ?(ИнформацияОбОшибке().Причина = Неопределено, "", " по причине: " + ИнформацияОбОшибке().Причина.Описание + " (возможно, файл уже открыт в MS Excel, закройте файл и повторите попытку)");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат Ложь;
	КонецПопытки;
	
	ТекКарточка = "";
		
	мсвЗагруженныеДанные = Новый Массив;
	Колич = ПослСтр;
	
	Если Колич = 0 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Сч = 0;
	ПредИндикатор = Неопределено;
	
	НачСтр = ?(ТипСоответствияКолонок = 0, 2, 1);
	
	СоответствиеКолонокВрем.Очистить();
	Для Каждого ТекСтрока Из СоответствиеКолонок Цикл
		НоваяСтрока = СоответствиеКолонокВрем.Добавить();
		НоваяСтрока.КолонкаДокумента = ТекСтрока.КолонкаДокумента;
		НоваяСтрока.ИмяКолонкиФайла = ТекСтрока.ИмяКолонкиФайла;
		НоваяСтрока.КолонкаДокументаПредставление = ТекСтрока.КолонкаДокументаПредставление;
		НоваяСтрока.НомерКолонкиФайла = ТекСтрока.НомерКолонкиФайла;
		НоваяСтрока.Использование = ТекСтрока.Использование;
	КонецЦикла;
	
	// Если тип соответствия колонок "по имени", то проставляем номера колонок
	Если ТипСоответствияКолонок = 0 Тогда
		Для НомКолонки = 1 По НашЛист.Columns.Count Цикл
			ИмяКолонки = СокрЛП(НашЛист.Cells(1, НомКолонки).Value);
			Для Каждого ТекСоотв Из СоответствиеКолонокВрем Цикл
				Если НЕ ТекСоотв.Использование Тогда
					Продолжить;
				КонецЕсли;
				Если НЕ ЗначениеЗаполнено(ТекСоотв.НомерКолонкиФайла) И ТекСоотв.ИмяКолонкиФайла = ИмяКолонки Тогда
					ТекСоотв.НомерКолонкиФайла = НомКолонки;
				КонецЕсли;
				Если ЗначениеЗаполнено(ТекСоотв.ИмяКолонкиФайла) И ТекСоотв.ИмяКолонкиФайла = ИмяКолонки Тогда
					ТекСоотв.ИмяКолонкиФайла = ИмяКолонки;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	// Проверяем на наличие всех колонок в файле, отмеченных флагом в таблице соответствий колонок
	флОшибкиСоотв = Ложь;
	Для Каждого ТекСоотв Из СоответствиеКолонокВрем Цикл
		Если НЕ ТекСоотв.Использование Тогда
			Продолжить;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ТекСоотв.НомерКолонкиФайла) Тогда
			флОшибкиСоотв = Истина;
			СтрокаОшибки = Нстр("ru = 'Не найдена колонка файла или не указано соответствие для колонки документа ""'")
				+ ТекСоотв.КолонкаДокументаПредставление + """!";
		КонецЕсли;
	КонецЦикла;	
	Если флОшибкиСоотв Тогда
		ОчиститьНомераИменаКолонок();
		Возврат Ложь;
	КонецЕсли;
	
	// формируем структуру колонок в удобном виде [ИмяКолонкиДок, НомКолонкиФайла]
	СтруктураКолонок = Новый Структура;
	Для Каждого ТекСоотв Из СоответствиеКолонокВрем Цикл
		Если НЕ ТекСоотв.Использование Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураКолонок.Вставить(ТекСоотв.КолонкаДокумента, ТекСоотв.НомерКолонкиФайла);
	КонецЦикла;
	
	ВходящийНомерПред = Неопределено;
	// Читаем строки с данными
	Для НомСтр = НачСтр По ПослСтр Цикл                              
		Сч = Сч + 1;
		ТекИндикатор = Цел(Сч / Колич * 100);
		
		// пропускаем строки с незаполненными картами
		Попытка
			Если ПустаяСтрока(НашЛист.Cells(НомСтр, СтруктураКолонок.ВходящийНомер).Value)
				И Не ЗначениеЗаполнено(ВходящийНомерПред) Тогда
				Продолжить;
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		// пытаемся получить дату из строки
		ДатаВходящегоДокумента = Неопределено;
		Попытка
			ДатаВремяСтрока = СокрЛП(СтрЗаменить(СтрЗаменить(НашЛист.Cells(НомСтр, СтруктураКолонок.ДатаВходящегоДокумента).Value,Символы.НПП,"")," ",""));
			ДатаСтрока      = Лев(ДатаВремяСтрока, +10);
			ВремяСтрока     = Сред(ДатаВремяСтрока,11,+8);
			
			флДата      = (СтрДлина(ДатаСтрока)  = ДлинаДаты);
			флДатаСокр  = (СтрДлина(ДатаСтрока)  = ДлинаДатыСокр);
			флВремя     = (СтрДлина(ВремяСтрока) = ДлинаВремени);
			флВремяСокр = (СтрДлина(ВремяСтрока) = ДлинаВремениСокр);
			
			Если Не флДата
				И Не флВремяСокр Тогда
				ДатаВремяСтрока = СокрЛП(СтрЗаменить(СтрЗаменить(НашЛист.Cells(НомСтр, СтруктураКолонок.ДатаВходящегоДокумента).Text,Символы.НПП,"")," ",""));
				ДатаСтрока      = Лев(ДатаВремяСтрока, +10);
				
				флДатаЗаправки     = (СтрДлина(ДатаСтрока) = ДлинаДаты);
				флДатаЗаправкиСокр = (СтрДлина(ДатаСтрока) = ДлинаДатыСокр);
			КонецЕсли;
			
			Если Не флВремя
				И Не флВремяСокр Тогда
				ВремяЗаправкиСтрока = Сред(ДатаВремяСтрока,11,+8);

				Если СтрДлина(ВремяСтрока) = 7 Тогда
					ВремяСтрока = "0" + ВремяСтрока;
				КонецЕсли;
				флВремя     = (СтрДлина(ВремяСтрока)     = ДлинаВремени);
				флВремяСокр = (СтрДлина(ВремяСтрока)     = ДлинаВремениСокр);
			КонецЕсли;

			Если (флДата ИЛИ флДатаСокр) И (флВремя ИЛИ флВремяСокр) Тогда
				Месяц_ = Число(Сред(ДатаСтрока, 4, 2));
				День_  = Число(Лев(ДатаСтрока, 2));
				Если флДата Тогда
					Год_ = Число(Сред(ДатаСтрока, 7, 4));
				Иначе
					Год_ = Цел(Год(ТекущаяДата())/100)*100 + Число(Сред(ДатаСтрока, 7, 2));
				КонецЕсли;
				
				Час_ = Число(Лев(ВремяСтрока, 2));
				Минута_ = Число(Сред(ВремяСтрока, 4, 2));
				Если флВремя Тогда
					Секунда_ = Число(Прав(ВремяСтрока, 2));
				Иначе
					Секунда_ = 0;
				КонецЕсли;
								
				ДатаВходящегоДокумента = Дата(Год_, Месяц_, День_, Час_, Минута_, Секунда_);
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		Если ТипЗнч(ДатаВходящегоДокумента) <> Тип("Дата") Тогда
			Продолжить;
		КонецЕсли;
		
		Если ДатаВходящегоДокумента >= Объект.ДатаНачалаПериода
			И (Объект.ДатаОкончанияПериода = '00010101' ИЛИ ДатаВходящегоДокумента <= КонецДня(Объект.ДатаОкончанияПериода)) Тогда
			
			СтруктураСтроки = Новый Структура;
			СтруктураСтроки.Вставить("ДатаВходящегоДокумента", ДатаВходящегоДокумента);
			
			ВходящийНомер = НашЛист.Cells(НомСтр, СтруктураКолонок.ВходящийНомер).Value;
			Если ТипЗнч(ВходящийНомер) = Тип("Число") Тогда 
				ВходящийНомер = Формат(ВходящийНомер, "ЧГ=0");
			КонецЕсли;
			Если ЗначениеЗаполнено(ВходящийНомер) Тогда
				ВходящийНомерПред = ВходящийНомер;
			КонецЕсли;
			СтруктураСтроки.Вставить("ВходящийНомер", ВходящийНомерПред);
			
			Если СтруктураКолонок.Свойство("Сумма") Тогда
				СтруктураСтроки.Вставить("Сумма", НашЛист.Cells(НомСтр, СтруктураКолонок.Сумма).Value);
			Иначе
				СтруктураСтроки.Вставить("Сумма", 0);
			КонецЕсли;
			Если СтруктураКолонок.Свойство("Валюта") Тогда
				ТекВалюта = НашЛист.Cells(НомСтр, СтруктураКолонок.Валюта).Value;
				Если ТипЗнч(ТекВалюта) = Тип("Число") Тогда 
					ТекВалюта = Формат(ТекВалюта, "ЧГ=0");
				КонецЕсли;
				
				СтруктураСтроки.Вставить("Валюта", УстановитьВалютуСтроки(ТекВалюта));
			Иначе
				СтруктураСтроки.Вставить("Валюта", ПредопределенноеЗначение("Справочник.Валюты.ПустаяСсылка"));
			КонецЕсли;
			
			мсвЗагруженныеДанные.Добавить(СтруктураСтроки);
		КонецЕсли;
		Если ТекИндикатор <> ПредИндикатор Тогда
			ПредИндикатор = ТекИндикатор;
		КонецЕсли;
	КонецЦикла;
	ОчиститьНомераИменаКолонок();
	
	Если мсвЗагруженныеДанные.Количество() = 0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru = 'В файле отсутствуют данные или не найдена колонка с информацией о вх. дате!'"));
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

&НаСервере
Функция УстановитьВалютуСтроки(ТекВалюта)
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Код", ТекВалюта);
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	               |	Валюты.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.Валюты КАК Валюты
	               |ГДЕ
	               |	(Валюты.Код = &Код
	               |			ИЛИ Валюты.Наименование = &Код)";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	КонецЕсли;
	
	Возврат Справочники.Валюты.ПустаяСсылка();
	
КонецФункции

&НаСервере
Процедура ОчиститьНомераИменаКолонок()
	Для Каждого ТекСтрока Из СоответствиеКолонок Цикл
		Если ТипСоответствияКолонок = 0 Тогда
			ТекСтрока.НомерКолонкиФайла = 0;
		Иначе
			ТекСтрока.ИмяКолонкиФайла = "";
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СверкаСтраховойСертификатПриИзменении(Элемент)
	
	ТекаДанные = Элементы.Сверка.ТекущиеДанные;
	Если ТекаДанные = Неопределено 
		ИЛИ НЕ ЗначениеЗаполнено(ТекаДанные.СтраховойСертификат) Тогда
		Возврат;
	КонецЕсли;
	ТекаДанные.ВалютаУчет        = ПолучитьЗначениеРеквизита(ТекаДанные.СтраховойСертификат, "ВалютаДокумента");
	ТекаДанные.СуммаУчет         = ПолучитьЗначениеРеквизита(ТекаДанные.СтраховойСертификат, "СуммаДокумента");
	ТекаДанные.ВходящийНомерУчет = ПолучитьЗначениеРеквизита(ТекаДанные.СтраховойСертификат, "ВходящийНомер");
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВалютыУчета()
	Для Каждого ТекСтрока Из Объект.Сверка Цикл
		ТекСтрока.ВалютаУчет        = ПолучитьЗначениеРеквизита(ТекСтрока.СтраховойСертификат, "ВалютаДокумента");
		ТекСтрока.СуммаУчет         = ПолучитьЗначениеРеквизита(ТекСтрока.СтраховойСертификат, "СуммаДокумента");
		ТекСтрока.ВходящийНомерУчет = ПолучитьЗначениеРеквизита(ТекСтрока.СтраховойСертификат, "ВходящийНомер");
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначениеРеквизита(Объект, ИмяРеквизита)
	Возврат уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект, ИмяРеквизита);
КонецФункции

&НаКлиенте
Процедура ПоказатьДиалогВыбораФайла(Подключено, ДополнительныеПараметры) Экспорт
	
	Если НЕ Подключено Тогда
		
		Оповещение = Новый ОписаниеОповещения("НачатьУстановкуРасширенияРаботыСФайламиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ТекстСообщения = НСтр("ru = 'Для продолжении работы необходимо установить расширение для веб-клиента ""1С:Предприятие"". Установить?'");
		ПоказатьВопрос(Оповещение, ТекстСообщения, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	ОповещениеВыбора = Новый ОписаниеОповещения("ПутьКФайлуЗавершениеВыбора", ЭтотОбъект);
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.ПолноеИмяФайла     = ПутьКФайлу;
	ДиалогВыбораФайла.Фильтр             = НСтр("en='Excel file';ru='Файлы Excel'") + "(*.xls; *.xlsx)|*.xls;*.xlsx";
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	ДиалогВыбораФайла.Заголовок          = НСтр("ru='Выберите файл с данными'");
	
	ДиалогВыбораФайла.Показать(ОповещениеВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьУстановкуРасширенияРаботыСФайламиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		НачатьУстановкуРасширенияРаботыСФайлами();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
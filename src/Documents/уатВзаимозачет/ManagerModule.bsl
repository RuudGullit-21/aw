#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// Позволяет переопределить ограничение, указанное в модуле менеджера объекта метаданных.
//
// Параметры:
//  Ограничение - Структура:
//    * Текст                             - Строка - ограничение доступа для пользователей.
//                                          Если пустая строка, значит, доступ разрешен.
//    * ТекстДляВнешнихПользователей      - Строка - ограничение доступа для внешних пользователей.
//                                          Если пустая строка, значит, доступ запрещен.
//    * ПоВладельцуБезЗаписиКлючейДоступа - Неопределено - определить автоматически.
//                                        - Булево - если Ложь, то всегда записывать ключи доступа,
//                                          если Истина, тогда не записывать ключи доступа,
//                                          а использовать ключи доступа владельца (требуется,
//                                          чтобы ограничение было строго по объекту-владельцу).
//   * ПоВладельцуБезЗаписиКлючейДоступаДляВнешнихПользователей - Неопределено, Булево - также
//                                          как у параметра ПоВладельцуБезЗаписиКлючейДоступа.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Подразделение)";
	
	Ограничение.ТекстДляВнешнихПользователей = Ограничение.Текст;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура("Информация", "Дебитор");
	Возврат Результат;
	
КонецФункции

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	
	мЗапрос = Новый Запрос;
	мЗапрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	мЗапрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	уатВзаимозачетСостав.Ссылка.Дата КАК Период,
	|	уатВзаимозачетСостав.Ссылка КАК Регистратор,
	|	уатВзаимозачетСостав.Ссылка.Кредитор КАК Контрагент,
	|	уатВзаимозачетСостав.Ссылка.Организация КАК Организация,
	|	уатВзаимозачетСостав.СделкаКредитора КАК Сделка,
	|	уатВзаимозачетСостав.ДоговорКредитора КАК ДоговорКонтрагента,
	|	уатВзаимозачетСостав.ВалютаКредитора КАК Валюта,
	|	уатВзаимозачетСостав.КурсКредитора КАК Курс,
	|	уатВзаимозачетСостав.КратностьКредитора КАК Кратность,
	|	уатВзаимозачетСостав.СуммаКредитора КАК СуммаВзаиморасчетов,
	|	уатВзаимозачетСостав.СуммаКредитора КАК СуммаУпр
	|ИЗ
	|	Документ.уатВзаимозачет.Состав КАК уатВзаимозачетСостав
	|ГДЕ
	|	уатВзаимозачетСостав.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	уатВзаимозачетСостав.Ссылка.Дата,
	|	уатВзаимозачетСостав.Ссылка,
	|	уатВзаимозачетСостав.Ссылка.Дебитор,
	|	уатВзаимозачетСостав.Ссылка.Организация,
	|	уатВзаимозачетСостав.СделкаДебитора,
	|	уатВзаимозачетСостав.ДоговорДебитора,
	|	уатВзаимозачетСостав.ВалютаДебитора,
	|	уатВзаимозачетСостав.КурсДебитора,
	|	уатВзаимозачетСостав.КратностьДебитора,
	|	уатВзаимозачетСостав.СуммаДебитора,
	|	уатВзаимозачетСостав.СуммаДебитора
	|ИЗ
	|	Документ.уатВзаимозачет.Состав КАК уатВзаимозачетСостав
	|ГДЕ
	|	уатВзаимозачетСостав.Ссылка = &Ссылка";
	
	тблВзаиморасчеты = мЗапрос.Выполнить().Выгрузить();
	
	Для Каждого ТекСтрока Из тблВзаиморасчеты Цикл
		Если СтруктураДополнительныеСвойства.Свойство("ВалютаУпрУчета") Тогда
			Если ТекСтрока.Валюта <> СтруктураДополнительныеСвойства.ВалютаУпрУчета Тогда
				ТекСтрока.СуммаУпр = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаУпр,
					ТекСтрока.Валюта,    СтруктураДополнительныеСвойства.ВалютаУпрУчета,
					ТекСтрока.Курс,      СтруктураДополнительныеСвойства.КурсУпр,
					ТекСтрока.Кратность, СтруктураДополнительныеСвойства.КратностьУпр);
			КонецЕсли;
		Иначе
			ТекСтрока.СтоимостьУпр = 0;								
		КонецЕсли;
	КонецЦикла;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаВзаиморасчетов", тблВзаиморасчеты);
	
КонецПроцедуры // ИнициализироватьДанныеДокумента()

Процедура ВыполнитьКонтроль(ДокументСсылка, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь) Экспорт
	Заглушка = Истина;	
КонецПроцедуры // ВыполнитьКонтроль()

#КонецОбласти

#КонецЕсли
&НаКлиенте
Перем ВалютаРасчетовПередИзменением;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	уатЗащищенныеФункцииСервер.уатДокументФормаЭлементаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, Объект, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	НесколькоВалют = ?(Объект.Мультивалютный, 1, 0);
	
	ОбновитьДинамическиеКолонки();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	уатЗащищенныеФункцииКлиент.уатДокументФормаЭлементаПриОткрытии(Отказ, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	УстановитьВидимость();
	ВывестиСуммовыеИтогиДокумента();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ОбновитьДинамическиеКолонки();
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДебиторПриИзменении(Элемент)
	Для Каждого ТекСтрока Из Объект.Состав Цикл
		ТекСтрока.ВалютаДебитора    = Неопределено;
		ТекСтрока.КурсДебитора      = Неопределено;
		ТекСтрока.КратностьДебитора = Неопределено;
	КонецЦикла;
	ОбновитьДинамическиеКолонки();
КонецПроцедуры

&НаКлиенте
Процедура КредиторПриИзменении(Элемент)
	Для Каждого ТекСтрока Из Объект.Состав Цикл
		ТекСтрока.ВалютаКредитора    = Неопределено;
		ТекСтрока.КурсКредитора      = Неопределено;
		ТекСтрока.КратностьКредитора = Неопределено;
	КонецЦикла;
	ОбновитьДинамическиеКолонки();
КонецПроцедуры

&НаКлиенте
Процедура НесколькоВалютПриИзменении(Элемент)
	
	Модифицированность = Истина;
	Объект.Мультивалютный = (НесколькоВалют = 1);
	
	Если Объект.Мультивалютный Тогда
		Объект.ВалютаДокумента = Неопределено;
		
	Иначе
		Объект.ВалютаДокумента = мВалютаРегламентированногоУчета;
		СтруктураКурс = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
		Объект.Курс = СтруктураКурс.Курс;
		Объект.Кратность = СтруктураКурс.Кратность;
		ВалютаПриИзменении(Неопределено);
		
	КонецЕсли;
		
	РассчитатьСуммуДокумента();
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	Если Объект.ВалютаДокумента = ВалютаРасчетовПередИзменением Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураКурс = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
	
	Объект.Курс      = СтруктураКурс.Курс;
	Объект.Кратность = СтруктураКурс.Кратность;
	
	РассчитатьСуммуДокумента();
	
	Для Каждого СтрокаТЧ Из Объект.Состав Цикл
		Если уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(СтрокаТЧ.ДоговорДебитора, "ВалютаВзаиморасчетов") <> Объект.ВалютаДокумента Тогда
			СтрокаТЧ.ДоговорДебитора   = Неопределено;
			СтрокаТЧ.ВалютаДебитора    = Неопределено;
			СтрокаТЧ.КурсДебитора      = 0;
			СтрокаТЧ.КратностьДебитора = 0;
		КонецЕсли;
		Если уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(СтрокаТЧ.ДоговорКредитора, "ВалютаВзаиморасчетов") <> Объект.ВалютаДокумента Тогда
			СтрокаТЧ.ДоговорКредитора   = Неопределено;
			СтрокаТЧ.ВалютаКредитора    = Неопределено;
			СтрокаТЧ.КурсКредитора      = 0;
			СтрокаТЧ.КратностьКредитора = 0;
		КонецЕсли;
	КонецЦикла;
	
	ВалютаРасчетовПередИзменением = Объект.ВалютаДокумента;
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормы_РасшифровкаПлатежа

&НаКлиенте
Процедура СоставДоговорВзаиморасчетовДебиторПриИзменении(Элемент)
	СтрокаПлатеж = Элементы.Состав.ТекущиеДанные;
	
	СтрокаПлатеж.ВалютаДебитора = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(СтрокаПлатеж.ДоговорДебитора, "ВалютаВзаиморасчетов");
	СоставВалютаДебитораПриИзменении(Неопределено);
	УстановитьОграничениеТипаСделка();
	ОбновитьДинамическиеКолонки();
КонецПроцедуры

&НаКлиенте
Процедура СоставДоговорВзаиморасчетовКредиторПриИзменении(Элемент)
	СтрокаПлатеж = Элементы.Состав.ТекущиеДанные;
	
	СтрокаПлатеж.ВалютаКредитора = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(СтрокаПлатеж.ДоговорКредитора, "ВалютаВзаиморасчетов");
	СоставВалютаКредитораПриИзменении(Неопределено);
	УстановитьОграничениеТипаСделка();
	ОбновитьДинамическиеКолонки();
КонецПроцедуры

&НаКлиенте
Процедура СоставПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	УстановитьОграничениеТипаСделка(); 
	УстановитьОтборДоговоры();
КонецПроцедуры

&НаКлиенте
Процедура СоставПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	РассчитатьСуммуДокумента();
КонецПроцедуры

&НаКлиенте
Процедура СоставСуммаДебитораПриИзменении(Элемент)
	ТекСтрока = Элементы.Состав.ТекущиеДанные;
	Если ТекСтрока.ВалютаДебитора = ТекСтрока.ВалютаКредитора Тогда
		ТекСтрока.СуммаКредитора = ТекСтрока.СуммаДебитора;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоставСуммаКредитораПриИзменении(Элемент)
	ТекСтрока = Элементы.Состав.ТекущиеДанные;
	Если ТекСтрока.ВалютаДебитора = ТекСтрока.ВалютаКредитора Тогда
		ТекСтрока.СуммаДебитора = ТекСтрока.СуммаКредитора;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоставВалютаДебитораПриИзменении(Элемент)
	СтрокаПлатеж = Элементы.Состав.ТекущиеДанные;
	СтруктураКурсаВзаиморасчетов   = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(СтрокаПлатеж.ВалютаДебитора, Объект.Дата);
	СтрокаПлатеж.КурсДебитора      = СтруктураКурсаВзаиморасчетов.Курс;
	СтрокаПлатеж.КратностьДебитора = СтруктураКурсаВзаиморасчетов.Кратность;
КонецПроцедуры

&НаКлиенте
Процедура СоставВалютаКредитораПриИзменении(Элемент)
	СтрокаПлатеж = Элементы.Состав.ТекущиеДанные;
	СтруктураКурсаВзаиморасчетов    = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(СтрокаПлатеж.ВалютаКредитора, Объект.Дата);
	СтрокаПлатеж.КурсКредитора      = СтруктураКурсаВзаиморасчетов.Курс;
	СтрокаПлатеж.КратностьКредитора = СтруктураКурсаВзаиморасчетов.Кратность;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаСервере
Процедура ОбновитьДинамическиеКолонки()
	Для Каждого ТекСтрока Из Объект.Состав Цикл
		ТекСтрока.СделкаДебитораАвтоотметка = (ТекСтрока.ДоговорДебитора.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоНакладным
			ИЛИ ТекСтрока.ДоговорДебитора.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам 
			ИЛИ ТекСтрока.ДоговорДебитора.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказамНаТС);
		ТекСтрока.СделкаКредитораАвтоотметка = (ТекСтрока.ДоговорКредитора.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоНакладным
			ИЛИ ТекСтрока.ДоговорКредитора.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам
			ИЛИ ТекСтрока.ДоговорКредитора.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказамНаТС);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОграничениеТипаСделка()
	
	СтрокаПлатеж = Элементы.Состав.ТекущиеДанные;
	
	ВедениеВзаиморасчетов = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(СтрокаПлатеж.ДоговорДебитора, "ВедениеВзаиморасчетов");
	Если ВедениеВзаиморасчетов = ПредопределенноеЗначение("Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоНакладным") Тогда
		Элементы.СоставСделкаДебитор.ОграничениеТипа = Новый ОписаниеТипов("ДокументСсылка.уатПоступлениеТоваровУслуг, ДокументСсылка.уатРеализацияУслуг");
	ИначеЕсли ВедениеВзаиморасчетов = ПредопределенноеЗначение("Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам") Тогда
		Элементы.СоставСделкаДебитор.ОграничениеТипа = Новый ОписаниеТипов("ДокументСсылка.уатСчетНаОплатуПокупателю, ДокументСсылка.уатСчетНаОплатуПоставщика");
	ИначеЕсли ВедениеВзаиморасчетов = ПредопределенноеЗначение("Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказамНаТС") Тогда
		Элементы.СоставСделкаДебитор.ОграничениеТипа = Новый ОписаниеТипов("ДокументСсылка.уатЗаказГрузоотправителя");
	Иначе
		Элементы.СоставСделкаДебитор.ОграничениеТипа = Новый ОписаниеТипов("Неопределено");
	КонецЕсли;
	
	ВедениеВзаиморасчетов = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(СтрокаПлатеж.ДоговорКредитора, "ВедениеВзаиморасчетов");
	Если ВедениеВзаиморасчетов = ПредопределенноеЗначение("Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоНакладным") Тогда
		Элементы.СоставСделкаКредитор.ОграничениеТипа = Новый ОписаниеТипов("ДокументСсылка.уатПоступлениеТоваровУслуг, ДокументСсылка.уатРеализацияУслуг");
	ИначеЕсли ВедениеВзаиморасчетов = ПредопределенноеЗначение("Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам") Тогда
		Элементы.СоставСделкаКредитор.ОграничениеТипа = Новый ОписаниеТипов("ДокументСсылка.уатСчетНаОплатуПокупателю, ДокументСсылка.уатСчетНаОплатуПоставщика");
	ИначеЕсли ВедениеВзаиморасчетов = ПредопределенноеЗначение("Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказамНаТС") Тогда
		Элементы.СоставСделкаКредитор.ОграничениеТипа = Новый ОписаниеТипов("ДокументСсылка.уатЗаказГрузоотправителя");
	Иначе
		Элементы.СоставСделкаКредитор.ОграничениеТипа = Новый ОписаниеТипов("Неопределено");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборДоговоры()
	мсвСвязиПараметровВыбораДебитор = Новый Массив;
	мсвСвязиПараметровВыбораДебитор.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Дебитор"));
	мсвСвязиПараметровВыбораДебитор.Добавить(Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация"));
	Если НЕ Объект.Мультивалютный Тогда
		мсвСвязиПараметровВыбораДебитор.Добавить(Новый СвязьПараметраВыбора("Отбор.ВалютаВзаиморасчетов", "Объект.ВалютаДокумента"));
	КонецЕсли;
	Элементы.СоставДоговорВзаиморасчетовДебитор.СвязиПараметровВыбора = Новый ФиксированныйМассив(мсвСвязиПараметровВыбораДебитор);
	
	мсвСвязиПараметровВыбораКредитор = Новый Массив;
	мсвСвязиПараметровВыбораКредитор.Добавить(Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Кредитор"));
	мсвСвязиПараметровВыбораКредитор.Добавить(Новый СвязьПараметраВыбора("Отбор.Организация", "Объект.Организация"));
	Если НЕ Объект.Мультивалютный Тогда
		мсвСвязиПараметровВыбораКредитор.Добавить(Новый СвязьПараметраВыбора("Отбор.ВалютаВзаиморасчетов", "Объект.ВалютаДокумента"));
	КонецЕсли;
	Элементы.СоставДоговорВзаиморасчетовКредитор.СвязиПараметровВыбора = Новый ФиксированныйМассив(мсвСвязиПараметровВыбораКредитор);
КонецПроцедуры

&НаСервере
Процедура РассчитатьСуммуДокумента()
	Объект.СуммаДокумента = 0;
	Для Каждого ТекСтрока Из Объект.Состав Цикл
		Если Объект.Мультивалютный Тогда
			ТекСумма = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаДебитора,
				ТекСтрока.ВалютаДебитора,    Объект.ВалютаДокумента,
				ТекСтрока.КурсДебитора,      Объект.Курс,
				ТекСтрока.КратностьДебитора, Объект.Кратность);
		Иначе
			ТекСумма = ТекСтрока.СуммаДебитора;
		КонецЕсли;
		Объект.СуммаДокумента = Объект.СуммаДокумента + ТекСумма;
	КонецЦикла;
	
	ВывестиСуммовыеИтогиДокумента();
КонецПроцедуры

&НаСервере
Процедура ВывестиСуммовыеИтогиДокумента()
	Если Не Объект.Мультивалютный Тогда
		Если НЕ ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда 
			Элементы.НадписьКурс.Видимость = Ложь;
		Иначе
			//СтруктураКурс = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
			НадписьКурс = "(" + Формат(Объект.Курс, "ЧДЦ=4; ЧРД=.; ЧН=0.0000; ЧГ=0") + ")";
			Элементы.НадписьКурс.Видимость = Истина;
		КонецЕсли;
		
		// удаляем мультивалютные реквизиты
		мсвУдалитьРеквизиты = Новый Массив;
		Для Сч = 1 по 1000 Цикл //различных валют и курсов может быть несколько, примем гипотетический максимум = 1000
			ТекПолеИтого = Элементы.Найти("Всего" + Сч);
			Если ТекПолеИтого = Неопределено Тогда
				Прервать;
			КонецЕсли;
			
			мсвУдалитьРеквизиты.Добавить("Всего" + Сч);
			мсвУдалитьРеквизиты.Добавить("ВалютаРасчетов" + Сч);
			
			Элементы.Удалить(Элементы["Всего" + Сч]);
			Элементы.Удалить(Элементы["ВалютаРасчетов" + Сч]);
		КонецЦикла;

		Если мсвУдалитьРеквизиты.Количество() > 0 Тогда
			ИзменитьРеквизиты(, мсвУдалитьРеквизиты);
		КонецЕсли;
		
	Иначе
		тблИтогиПоВалютам = Объект.Состав.Выгрузить();
		тблИтогиПоВалютам.Колонки.СуммаДебитора.Имя     = "Сумма";
		тблИтогиПоВалютам.Колонки.ВалютаДебитора.Имя    = "Валюта";
		тблИтогиПоВалютам.Колонки.КурсДебитора.Имя      = "Курс";
		тблИтогиПоВалютам.Колонки.КратностьДебитора.Имя = "Кратность";
		
		тблИтогиПоВалютам.Свернуть("Валюта, Курс, Кратность", "Сумма");
		тблИтогиПоВалютам.Сортировать("Валюта, Курс, Кратность");
		
		// добавляем мультивалютные реквизиты
		мсвДобавитьРеквизиты = Новый Массив;
		Сч = 1;
		Для Каждого ТекСтрока Из тблИтогиПоВалютам Цикл
			Если Элементы.Найти("Всего" + Сч) = Неопределено Тогда
				мсвДобавитьРеквизиты.Добавить(Новый РеквизитФормы("Всего" + Сч, Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2))));
				мсвДобавитьРеквизиты.Добавить(Новый РеквизитФормы("ВалютаРасчетов" + Сч, Новый ОписаниеТипов("Строка")));
			КонецЕсли;
						
			Сч = Сч + 1;
		КонецЦикла;
		Колич = Сч-1;
		
		// удаляем лишние мультивалютные реквизиты
		мсвУдалитьРеквизиты = Новый Массив;
		Для Сч = Колич+1 По 1000 Цикл
			ТекПолеИтого = Элементы.Найти("Всего" + Сч);
			Если ТекПолеИтого = Неопределено Тогда
				Прервать;
			КонецЕсли;
			
			мсвУдалитьРеквизиты.Добавить("Всего" + Сч);
			мсвУдалитьРеквизиты.Добавить("ВалютаРасчетов" + Сч);
			
			Элементы.Удалить(Элементы["Всего" + Сч]);
			Элементы.Удалить(Элементы["ВалютаРасчетов" + Сч]);
		КонецЦикла;
				
		ИзменитьРеквизиты(мсвДобавитьРеквизиты, мсвУдалитьРеквизиты);
		
		Сч = 1;
		Для Каждого ТекСтрока Из тблИтогиПоВалютам Цикл
			ЭтотОбъект["Всего" + Сч] = ТекСтрока.Сумма;
			ТекСтрокаВалюта = "" + ТекСтрока.Валюта + " (" + Формат(ТекСтрока.Курс, "ЧДЦ=4; ЧРД=.; ЧН=0.0000; ЧГ=0") + ")";
			Если Сч < тблИтогиПоВалютам.Количество() Тогда
				ТекСтрокаВалюта = ТекСтрокаВалюта + ", ";
			КонецЕсли;
			ЭтотОбъект["ВалютаРасчетов" + Сч] = ТекСтрокаВалюта;
			
			Если Элементы.Найти("Всего" + Сч) = Неопределено Тогда
				НовыйЭлем = Элементы.Добавить("Всего" + Сч, Тип("ПолеФормы"), Элементы.ИтогоМноговалютный);
				НовыйЭлем.Вид = ВидПоляФормы.ПолеВвода;
				НовыйЭлем.ПутьКДанным = "Всего" + Сч;
				НовыйЭлем.Ширина = 10;
				НовыйЭлем.РастягиватьПоГоризонтали = Ложь;
				НовыйЭлем.ТолькоПросмотр = Истина;
				Если Сч = 1 Тогда
					НовыйЭлем.Заголовок = НСтр("en='Total';ru='Всего'");
				Иначе
					НовыйЭлем.ПоложениеЗаголовка=ПоложениеЗаголовкаЭлементаФормы.Нет;
				КонецЕсли;
			КонецЕсли;
			
			Если Элементы.Найти("ВалютаРасчетов" + Сч) = Неопределено Тогда
				НовыйЭлем = Элементы.Добавить("ВалютаРасчетов" + Сч, Тип("ПолеФормы"), Элементы.ИтогоМноговалютный);
				НовыйЭлем.Вид = ВидПоляФормы.ПолеНадписи;
				НовыйЭлем.ПутьКДанным = "ВалютаРасчетов" + Сч;
				НовыйЭлем.Ширина = 10;
				НовыйЭлем.РастягиватьПоГоризонтали = Ложь;
				НовыйЭлем.ПоложениеЗаголовка=ПоложениеЗаголовкаЭлементаФормы.Нет;
			КонецЕсли;
						
			Сч = Сч + 1;
		КонецЦикла;
				
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимость()
	Элементы.Валюта.Доступность                          = НЕ Объект.Мультивалютный;
	Элементы.Итого.Видимость                             = НЕ Объект.Мультивалютный;
	Элементы.ИтогоМноговалютный.Видимость                = Объект.Мультивалютный;
	Элементы.СоставВалютаДебитора.Видимость              = Объект.Мультивалютный;
	Элементы.СоставВалютаКредитора.Видимость             = Объект.Мультивалютный;
	Элементы.СоставКурсВалютыДоговораДебитора.Видимость  = Объект.Мультивалютный;
	Элементы.СоставКурсВалютыДоговораКредитора.Видимость = Объект.Мультивалютный;
	Элементы.СоставКратностьДебитора.Видимость           = Объект.Мультивалютный;
	Элементы.СоставКратностьКредитора.Видимость          = Объект.Мультивалютный;
КонецПроцедуры

#КонецОбласти

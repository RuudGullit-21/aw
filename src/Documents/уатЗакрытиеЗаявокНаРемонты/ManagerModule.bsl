#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	Настройки.ПриПолученииСлужебныхРеквизитов = Ложь;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	// необходима для подключения внешних ПФ
	Заглушка = Истина;
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.УправлениеДоступом

// Позволяет переопределить ограничение, указанное в модуле менеджера объекта метаданных.
//
// Параметры:
//  Ограничение - Структура:
//    * Текст                             - Строка - ограничение доступа для пользователей.
//                                          Если пустая строка, значит, доступ разрешен.
//    * ТекстДляВнешнихПользователей      - Строка - ограничение доступа для внешних пользователей.
//                                          Если пустая строка, значит, доступ запрещен.
//    * ПоВладельцуБезЗаписиКлючейДоступа - Неопределено - определить автоматически.
//                                        - Булево - если Ложь, то всегда записывать ключи доступа,
//                                          если Истина, тогда не записывать ключи доступа,
//                                          а использовать ключи доступа владельца (требуется,
//                                          чтобы ограничение было строго по объекту-владельцу).
//   * ПоВладельцуБезЗаписиКлючейДоступаДляВнешнихПользователей - Неопределено, Булево - также
//                                          как у параметра ПоВладельцуБезЗаписиКлючейДоступа.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Подразделение)";
	
	Ограничение.ТекстДляВнешнихПользователей = Ограничение.Текст;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// СтандартныеПодсистемы.ВариантыОтчетов

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВариантыОтчетов

#КонецОбласти

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.уатЗаявкиНаРемонт");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = ДокументСсылка.Заявки;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ЗаявкаНаРемонт", "ЗаявкаНаРемонт");
	Блокировка.Заблокировать();
	
	мЗапрос = Новый Запрос;
	мЗапрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатЗаявкиНаРемонтОстатки.Организация,
	|	уатЗаявкиНаРемонтОстатки.ТС,
	|	уатЗаявкиНаРемонтОстатки.Колонна,
	|	уатЗаявкиНаРемонтОстатки.ЗаявкаНаРемонт,
	|	уатЗаявкиНаРемонтОстатки.ВидОбслуживания,
	|	уатЗаявкиНаРемонтОстатки.Номенклатура,
	|	уатЗаявкиНаРемонтОстатки.КоличествоОстаток КАК Количество,
	|	уатЗакрытиеЗаявокНаРемонтыЗаявки.Ссылка КАК Регистратор,
	|	уатЗакрытиеЗаявокНаРемонтыЗаявки.Ссылка.Дата КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения
	|ИЗ
	|	РегистрНакопления.уатЗаявкиНаРемонт.Остатки(
	|			&МоментВремени,
	|			ЗаявкаНаРемонт В
	|				(ВЫБРАТЬ РАЗЛИЧНЫЕ
	|					уатЗакрытиеЗаявокНаРемонтыЗаявки.ЗаявкаНаРемонт
	|				ИЗ
	|					Документ.уатЗакрытиеЗаявокНаРемонты.Заявки КАК уатЗакрытиеЗаявокНаРемонтыЗаявки
	|				ГДЕ
	|					уатЗакрытиеЗаявокНаРемонтыЗаявки.Ссылка = &Ссылка)) КАК уатЗаявкиНаРемонтОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатЗакрытиеЗаявокНаРемонты.Заявки КАК уатЗакрытиеЗаявокНаРемонтыЗаявки
	|		ПО уатЗаявкиНаРемонтОстатки.ЗаявкаНаРемонт = уатЗакрытиеЗаявокНаРемонтыЗаявки.ЗаявкаНаРемонт
	|			И уатЗаявкиНаРемонтОстатки.Организация = уатЗакрытиеЗаявокНаРемонтыЗаявки.Ссылка.Организация
	|			И уатЗаявкиНаРемонтОстатки.ТС = уатЗакрытиеЗаявокНаРемонтыЗаявки.ЗаявкаНаРемонт.ТС
	|			И уатЗаявкиНаРемонтОстатки.ВидОбслуживания = уатЗакрытиеЗаявокНаРемонтыЗаявки.ЗаявкаНаРемонт.ВидОбслуживания
	|ГДЕ
	|	уатЗакрытиеЗаявокНаРемонтыЗаявки.Ссылка = &Ссылка";
	
	мЗапрос.УстановитьПараметр("Ссылка"       , ДокументСсылка);
	мЗапрос.УстановитьПараметр("МоментВремени", ДокументСсылка.МоментВремени());
	
	ТаблицаЗаявокНаРемонт = мЗапрос.Выполнить().Выгрузить();   
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗаявокНаРемонт", ТаблицаЗаявокНаРемонт);
	
КонецПроцедуры // ИнициализироватьДанныеДокумента()

Процедура ВыполнитьКонтроль(ДокументСсылка, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь) Экспорт

	// Документ всегда закрывает фактические остатки при проведении. Контроль не требуется. 
		
КонецПроцедуры

#КонецОбласти

#КонецЕсли
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатВводВЭксплуатациюТСиОборудования";
	КомандаПечати.Идентификатор = "ВводВЭксплуатацию";
	КомандаПечати.Представление = НСтр("en='Commissioning';ru='Ввод в эксплуатацию'");
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр).
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной
//                                                            параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной
//                                            параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ВводВЭксплуатацию") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ВводВЭксплуатацию",
			"Ввод в эксплуатацию", ПечатьВводВЭксплуатацию(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
	уатОбщегоНазначенияСервер.УстановитьРедактированиеПечатныхФормДокумента(КоллекцияПечатныхФорм);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	Настройки.ПриПолученииСлужебныхРеквизитов = Ложь;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// Позволяет переопределить ограничение, указанное в модуле менеджера объекта метаданных.
//
// Параметры:
//  Ограничение - Структура:
//    * Текст                             - Строка - ограничение доступа для пользователей.
//                                          Если пустая строка, значит, доступ разрешен.
//    * ТекстДляВнешнихПользователей      - Строка - ограничение доступа для внешних пользователей.
//                                          Если пустая строка, значит, доступ запрещен.
//    * ПоВладельцуБезЗаписиКлючейДоступа - Неопределено - определить автоматически.
//                                        - Булево - если Ложь, то всегда записывать ключи доступа,
//                                          если Истина, тогда не записывать ключи доступа,
//                                          а использовать ключи доступа владельца (требуется,
//                                          чтобы ограничение было строго по объекту-владельцу).
//   * ПоВладельцуБезЗаписиКлючейДоступаДляВнешнихПользователей - Неопределено, Булево - также
//                                          как у параметра ПоВладельцуБезЗаписиКлючейДоступа.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Подразделение)";
	
	Ограничение.ТекстДляВнешнихПользователей = Ограничение.Текст;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	СформироватьТаблицуТС(ДокументСсылка, СтруктураДополнительныеСвойства);
КонецПроцедуры // ИнициализироватьДанныеДокумента()

Процедура ВыполнитьКонтроль(ДокументСсылка, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь) Экспорт
	//Зарезервировано
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицуТС(ДокументСсылка, СтруктураДополнительныеСвойства)
	тблМестонахожденияТС = Новый ТаблицаЗначений;
	тблМестонахожденияТС.Колонки.Добавить("Регистратор");
	тблМестонахожденияТС.Колонки.Добавить("Период");
	тблМестонахожденияТС.Колонки.Добавить("ТС");
	тблМестонахожденияТС.Колонки.Добавить("Организация");
	тблМестонахожденияТС.Колонки.Добавить("Подразделение");
	тблМестонахожденияТС.Колонки.Добавить("Колонна");
	
	Для Каждого ТекСтрокаТС Из ДокументСсылка.ТС Цикл
		НоваяСтрока = тблМестонахожденияТС.Добавить();
		НоваяСтрока.Период = ТекСтрокаТС.ДатаВвода;
		НоваяСтрока.Регистратор = ДокументСсылка;
		НоваяСтрока.ТС = ТекСтрокаТС.ТС;
		НоваяСтрока.Организация = ДокументСсылка.Организация;
		НоваяСтрока.Подразделение = ДокументСсылка.Подразделение;
		НоваяСтрока.Колонна = ДокументСсылка.Колонна;
	КонецЦикла;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаМестонахожденияТС", тблМестонахожденияТС);
КонецПроцедуры // СформироватьТаблицуАгрегатыТС()

Функция ПечатьВводВЭксплуатацию(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_уатВводВЭксплуатациюТСиОборудования";
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ПервыйДокумент = Истина;
	
	мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Для Каждого ТекущийДокумент Из МассивОбъектов Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_уатВводВЭксплуатациюТСиОборудования";
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.уатВводВЭксплуатациюТСиОборудования.ПФ_MXL_ВводВЭксплуатацию");
		
		// Выводим шапку
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ТекущийДокумент, НСтр("en='Commissioning of vehicles';ru='Ввод в эксплуатацию ТС и оборудования'"));
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("РеквизитыОрганизации");
		СписокТребуемыхПараметров	= "НаименованиеДляПечатныхФорм";
		СведенияОбОбъекте			= уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(ТекущийДокумент.Организация);
		ОбластьМакета.Параметры.Организация		= уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(СведенияОбОбъекте, СписокТребуемыхПараметров);
		ОбластьМакета.Параметры.Подразделение	= ТекущийДокумент.Подразделение;
		ОбластьМакета.Параметры.Колонна = ТекущийДокумент.Колонна;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// формируем таблицы ТС и оборудования
		тблТС = ТекущийДокумент.ТС.Выгрузить().Скопировать();
		Сч = тблТС.Количество()-1;
		Пока Сч >= 0 Цикл
			Если НЕ тблТС[Сч].ТС.ВидМоделиТС = Перечисления.уатВидыМоделейТС.Автотранспорт Тогда
				тблТС.Удалить(Сч);
			КонецЕсли;
			Сч = Сч - 1;
		КонецЦикла;
		тблОборудование = ТекущийДокумент.ТС.Выгрузить().Скопировать();
		Сч = тблОборудование.Количество()-1;
		Пока Сч >= 0 Цикл
			Если тблОборудование[Сч].ТС.ВидМоделиТС = Перечисления.уатВидыМоделейТС.Автотранспорт Тогда
				тблОборудование.Удалить(Сч);
			КонецЕсли;
			Сч = Сч - 1;
		КонецЦикла;
		
		// Выводим таблицу ТС
		Если тблТС.Количество() > 0 Тогда
			ТекОбласть = Макет.ПолучитьОбласть("ШапкаТаблицы");
			ТабличныйДокумент.Вывести(ТекОбласть);
			НомерСтроки = 1;
			Для Каждого ТекСтрока Из тблТС Цикл
				ТекОбласть = Макет.ПолучитьОбласть("Строка");
				ТекОбласть.Параметры.НомерСтроки = НомерСтроки;
				ТекОбласть.Параметры.ПредставлениеТС = Строка(ТекСтрока.ТС);
                ТекОбласть.Параметры.ДатаВвода = ТекСтрока.ДатаВвода;
				НомерСтроки = НомерСтроки + 1;
				ТабличныйДокумент.Вывести(ТекОбласть);
			КонецЦикла;
			ТекОбласть = Макет.ПолучитьОбласть("Итого");
			ТабличныйДокумент.Вывести(ТекОбласть);
		КонецЕсли;
		
		// Выводим таблицу оборудования
		Если тблОборудование.Количество() > 0 Тогда
			ТекОбласть = Макет.ПолучитьОбласть("ШапкаТаблицыОборудование");
			ТабличныйДокумент.Вывести(ТекОбласть);
			НомерСтроки = 1;			
			Для Каждого ТекСтрока Из тблОборудование Цикл
				ТекОбласть = Макет.ПолучитьОбласть("СтрокаОборудование");
				ТекОбласть.Параметры.НомерСтроки = НомерСтроки;
				ТекОбласть.Параметры.Оборудование = Строка(ТекСтрока.ТС);
                ТекОбласть.Параметры.ДатаВвода = ТекСтрока.ДатаВвода;
				НомерСтроки = НомерСтроки + 1;	
				ТабличныйДокумент.Вывести(ТекОбласть);
			КонецЦикла;
			ТекОбласть = Макет.ПолучитьОбласть("ИтогоОборудование");
			ТабличныйДокумент.Вывести(ТекОбласть);
		КонецЕсли;
		
		// Вывести подписи
		ТекОбласть = Макет.ПолучитьОбласть("Подвал");
		ТекОбласть.Параметры.Ответственный = ТекущийДокумент.Ответственный;
		ТабличныйДокумент.Вывести(ТекОбласть);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ТекущийДокумент);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатнаяФорма()

#КонецОбласти

#КонецЕсли
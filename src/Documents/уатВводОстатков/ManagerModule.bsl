#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	Настройки.ПриПолученииСлужебныхРеквизитов = Ложь;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	// необходима для подключения внешних ПФ
	Заглушка = Истина;
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.УправлениеДоступом

// Позволяет переопределить ограничение, указанное в модуле менеджера объекта метаданных.
//
// Параметры:
//  Ограничение - Структура:
//    * Текст                             - Строка - ограничение доступа для пользователей.
//                                          Если пустая строка, значит, доступ разрешен.
//    * ТекстДляВнешнихПользователей      - Строка - ограничение доступа для внешних пользователей.
//                                          Если пустая строка, значит, доступ запрещен.
//    * ПоВладельцуБезЗаписиКлючейДоступа - Неопределено - определить автоматически.
//                                        - Булево - если Ложь, то всегда записывать ключи доступа,
//                                          если Истина, тогда не записывать ключи доступа,
//                                          а использовать ключи доступа владельца (требуется,
//                                          чтобы ограничение было строго по объекту-владельцу).
//   * ПоВладельцуБезЗаписиКлючейДоступаДляВнешнихПользователей - Неопределено, Булево - также
//                                          как у параметра ПоВладельцуБезЗаписиКлючейДоступа.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Подразделение)";
	
	Ограничение.ТекстДляВнешнихПользователей = Ограничение.Текст;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	Если ДокументСсылка.ВидОперации = Перечисления.уатВидыОперацийВводОстатков.ОперативныеДоходы ИЛИ ДокументСсылка.ВидОперации = Перечисления.уатВидыОперацийВводОстатков.ОперативныеРасходы Тогда
		ФормированиеТаблицыДоходовРасходов(ДокументСсылка, СтруктураДополнительныеСвойства);
	ИначеЕсли ДокументСсылка.ВидОперации = Перечисления.уатВидыОперацийВводОстатков.ОстаткиДСПодотчетныхЛиц Тогда
		ФормированиеТаблицыОстаткиДСПодотчетныхЛиц(ДокументСсылка, СтруктураДополнительныеСвойства);
	ИначеЕсли ДокументСсылка.ВидОперации = Перечисления.уатВидыОперацийВводОстатков.ОстаткиДСВКассах
		ИЛИ ДокументСсылка.ВидОперации = Перечисления.уатВидыОперацийВводОстатков.ОстаткиДСНаСчетах Тогда
		ФормированиеТаблицыОстаткиДС(ДокументСсылка, СтруктураДополнительныеСвойства);
	КонецЕсли;
КонецПроцедуры // ИнициализироватьДанныеДокумента()

// Процедура формирует таблицу остатков ДС у подотчетных лиц
//
Процедура ФормированиеТаблицыОстаткиДСПодотчетныхЛиц(ДокументСсылка, СтруктураДополнительныеСвойства)
	мЗапрос = Новый Запрос;
	мЗапрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатВводОстатковОстаткиДСПодотчетныхЛиц.ДатаОтражения КАК Период,
	|	уатВводОстатковОстаткиДСПодотчетныхЛиц.Ссылка КАК Регистратор,
	|	уатВводОстатковОстаткиДСПодотчетныхЛиц.Ссылка.Организация КАК Организация,
	|	уатВводОстатковОстаткиДСПодотчетныхЛиц.ПодотчетноеЛицо КАК ПодотчетноеЛицо,
	|	уатВводОстатковОстаткиДСПодотчетныхЛиц.Сумма КАК Сумма,
	|	0 КАК СуммаУпр,
	|	уатВводОстатковОстаткиДСПодотчетныхЛиц.Валюта
	|ИЗ
	|	Документ.уатВводОстатков.ОстаткиДСПодотчетныхЛиц КАК уатВводОстатковОстаткиДСПодотчетныхЛиц
	|ГДЕ
	|	уатВводОстатковОстаткиДСПодотчетныхЛиц.Ссылка = &Ссылка";
	мЗапрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	ТаблицаДокумента = мЗапрос.Выполнить().Выгрузить();
	
	Если уатОбщегоНазначенияТиповые.уатЕстьКонстанта("ВалютаУправленческогоУчета") Тогда 
		ВалютаУпр = Константы.ВалютаУправленческогоУчета.Получить();
	Иначе
		ВалютаУпр = Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;
	
	Для Каждого ТекСтрока Из ТаблицаДокумента Цикл
		ТекСтрока.СуммаУпр = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.Сумма,
			ТекСтрока.Валюта, ВалютаУпр, ДокументСсылка.Дата, ДокументСсылка.Дата);
	КонецЦикла;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаОстаткиДСУПодотчетныхЛиц", ТаблицаДокумента);
КонецПроцедуры

// Процедура формирует таблицу остатков ДС
//
Процедура ФормированиеТаблицыОстаткиДС(ДокументСсылка, СтруктураДополнительныеСвойства)
	мЗапрос = Новый Запрос;
	мЗапрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатВводОстатковОстаткиДС.ДатаОтражения КАК Период,
	|	уатВводОстатковОстаткиДС.Ссылка КАК Регистратор,
	|	уатВводОстатковОстаткиДС.Ссылка.Организация КАК Организация,
	|	уатВводОстатковОстаткиДС.БанковскийСчетКасса КАК БанковскийСчетКасса,
	|	уатВводОстатковОстаткиДС.Сумма КАК Сумма,
	|	0 КАК СуммаУпр,
	|	уатВводОстатковОстаткиДС.БанковскийСчетКасса.ВалютаДенежныхСредств КАК Валюта,
	|	ВЫБОР
	|		КОГДА уатВводОстатковОстаткиДС.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.уатВидыОперацийВводОстатков.ОстаткиДСВКассах)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.уатФормыОплаты.Наличные)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.уатФормыОплаты.Безналичные)
	|	КОНЕЦ КАК ВидДенежныхСредств,
	|	уатВводОстатковОстаткиДС.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств
	|ИЗ
	|	Документ.уатВводОстатков.ОстаткиДС КАК уатВводОстатковОстаткиДС
	|ГДЕ
	|	уатВводОстатковОстаткиДС.Ссылка = &Ссылка";
	мЗапрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	ТаблицаДокумента = мЗапрос.Выполнить().Выгрузить();
	
	Если уатОбщегоНазначенияТиповые.уатЕстьКонстанта("ВалютаУправленческогоУчета") Тогда 
		ВалютаУпр = Константы.ВалютаУправленческогоУчета.Получить();
	Иначе
		ВалютаУпр = Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;
	
	Для Каждого ТекСтрока Из ТаблицаДокумента Цикл
		ТекСтрока.СуммаУпр = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.Сумма,
			ТекСтрока.Валюта, ВалютаУпр, ДокументСсылка.Дата, ДокументСсылка.Дата);
	КонецЦикла;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаОстаткиДС", ТаблицаДокумента);
КонецПроцедуры

// Процедура формирует таблицу доходов/расходов
//
Процедура ФормированиеТаблицыДоходовРасходов(ДокументСсылка, СтруктураДополнительныеСвойства)
	мЗапрос = Новый Запрос;
	Если ДокументСсылка.ВидОперации = Перечисления.уатВидыОперацийВводОстатков.ОперативныеДоходы Тогда
		мЗапрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатВводОстатковДоходы.ДатаОтражения КАК Период,
		|	уатВводОстатковДоходы.Ссылка КАК Регистратор,
		|	уатВводОстатковДоходы.Ссылка.Организация КАК Организация,
		|	уатВводОстатковДоходы.Ссылка.Подразделение КАК Подразделение,
		|	уатВводОстатковДоходы.Колонна КАК Колонна,
		|	уатВводОстатковДоходы.ТС КАК ТС,
		|	уатВводОстатковДоходы.СтатьяДоходов,
		|	уатВводОстатковДоходы.Сумма КАК Сумма,
		|	уатВводОстатковДоходы.Сумма КАК СуммаРегл,
		|	уатВводОстатковДоходы.Сумма КАК СуммаУпр,
		|	уатВводОстатковДоходы.СуммаНДС,
		|	уатВводОстатковДоходы.СуммаНДС КАК СуммаНДСУпр,
		|	уатВводОстатковДоходы.УчитыватьНДС,
		|	уатВводОстатковДоходы.СуммаВключаетНДС,
		|	уатВводОстатковДоходы.Заказ,
		|	уатВводОстатковДоходы.Заказ.Ответственный КАК Менеджер,
		|	уатВводОстатковДоходы.Контрагент,
		|	уатВводОстатковДоходы.ОбъектСтроительства,
		|	уатВводОстатковДоходы.Маршрут,
		|	уатВводОстатковДоходы.ВидПеревозки,
		|	уатВводОстатковДоходы.НаправлениеПеревозки,
		|	уатВводОстатковДоходы.ПараметрВыработки,
		|	уатВводОстатковДоходы.НоменклатураУслуги,
		|	уатВводОстатковДоходы.Валюта
		|ИЗ
		|	Документ.уатВводОстатков.Доходы КАК уатВводОстатковДоходы
		|ГДЕ
		|	уатВводОстатковДоходы.Ссылка = &Ссылка";
	Иначе
		мЗапрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатВводОстатковРасходы.ДатаОтражения КАК Период,
		|	уатВводОстатковРасходы.Ссылка КАК Регистратор,
		|	уатВводОстатковРасходы.Ссылка.Организация КАК Организация,
		|	уатВводОстатковРасходы.Ссылка.Подразделение КАК Подразделение,
		|	уатВводОстатковРасходы.Колонна КАК Колонна,
		|	уатВводОстатковРасходы.ОбъектСтроительства КАК ОбъектСтроительства,
		|	уатВводОстатковРасходы.ТС КАК ТС,
		|	уатВводОстатковРасходы.СтатьяРасходов,
		|	уатВводОстатковРасходы.Сумма КАК Сумма,
		|	уатВводОстатковРасходы.Сумма КАК СуммаРегл,
		|	уатВводОстатковРасходы.Сумма КАК СуммаУпр,
		|	уатВводОстатковРасходы.СуммаНДС,
		|	уатВводОстатковРасходы.СуммаНДС КАК СуммаНДСУпр,
		|	уатВводОстатковРасходы.СуммаВключаетНДС,
		|	уатВводОстатковРасходы.УчитыватьНДС,
		|	уатВводОстатковРасходы.Заказ,
		|	уатВводОстатковРасходы.Заказ.Ответственный КАК Менеджер,
		|	уатВводОстатковРасходы.Контрагент,
		|	уатВводОстатковРасходы.Маршрут,
		|	уатВводОстатковРасходы.ВидПеревозки,
		|	уатВводОстатковРасходы.НаправлениеПеревозки,
		|	уатВводОстатковРасходы.Затрата,
		|	уатВводОстатковРасходы.НоменклатураУслуги,
		|	уатВводОстатковРасходы.Валюта
		|ИЗ
		|	Документ.уатВводОстатков.Расходы КАК уатВводОстатковРасходы
		|ГДЕ
		|	уатВводОстатковРасходы.Ссылка = &Ссылка";
	КонецЕсли;
	
	мЗапрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	ТаблицаДокумента = мЗапрос.Выполнить().Выгрузить();
	
	ВалютаРегл = Константы.ВалютаРегламентированногоУчета.Получить();
	Если уатОбщегоНазначенияТиповые.уатЕстьКонстанта("ВалютаУправленческогоУчета") Тогда 
		ВалютаУпр = Константы.ВалютаУправленческогоУчета.Получить();
	Иначе
		ВалютаУпр = ВалютаРегл;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из ТаблицаДокумента Цикл
		СуммаВсего = ТекСтрока.Сумма + ?(ТекСтрока.УчитыватьНДС И НЕ ТекСтрока.СуммаВключаетНДС, ТекСтрока.СуммаНДС, 0);
		
		ТекСтрока.СуммаРегл = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(СуммаВсего,
			ТекСтрока.Валюта, ВалютаРегл, ДокументСсылка.Дата, ДокументСсылка.Дата);
		ТекСтрока.СуммаУпр = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(СуммаВсего,
			ТекСтрока.Валюта, ВалютаУпр, ДокументСсылка.Дата, ДокументСсылка.Дата);
		ТекСтрока.СуммаНДС = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаНДС,
			ТекСтрока.Валюта, ВалютаРегл, ДокументСсылка.Дата, ДокументСсылка.Дата);
		ТекСтрока.СуммаНДСУпр = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаНДСУпр,
			ТекСтрока.Валюта, ВалютаУпр, ДокументСсылка.Дата, ДокументСсылка.Дата);
	КонецЦикла;
	
	Если ДокументСсылка.ВидОперации = Перечисления.уатВидыОперацийВводОстатков.ОперативныеДоходы Тогда
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДоходы", ТаблицаДокумента);
	Иначе
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРасходы", ТаблицаДокумента);
	КонецЕсли;
КонецПроцедуры

// Выполняет контроль при проведении.
//
Процедура ВыполнитьКонтроль(ДокументСсылка, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь) Экспорт
	
	Заглушка = Истина;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
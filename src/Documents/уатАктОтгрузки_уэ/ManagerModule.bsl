#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	Настройки.ПриПолученииСлужебныхРеквизитов = Ложь;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатАктОтгрузки_уэ";
	КомандаПечати.Идентификатор = "НакладнаяТовары";
	КомандаПечати.Представление = НСтр("en='Act of cargo transfer (details by goods)';ru='Акт отгрузки (детализация по товарам)'");
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатАктОтгрузки_уэ";
	КомандаПечати.Идентификатор = "НакладнаяГрМеста";
	КомандаПечати.Представление = НСтр("en='Act of cargo transfer (detailing by packages)';ru='Акт отгрузки (детализация по грузовым местам)'");
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатАктОтгрузки_уэ";
	КомандаПечати.Идентификатор = "Бланк";
	КомандаПечати.Представление = НСтр("en='Cargo transfer form';ru='Бланк отгрузки'");
	КомандаПечати.ФункциональныеОпции = "уатРазделятьПланФактВСкладскихАктах_уэ";
	
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор  = "Реестр";
	КомандаПечати.Представление  = НСтр("en='Document register';ru='Реестр документов'");
	КомандаПечати.ЗаголовокФормы = НСтр("en='Registry of documents ""Act of consignment""';ru='Реестр документов ""Акт отгрузки""'");
	КомандаПечати.Обработчик     = "уатОбщегоНазначенияТиповыеКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм     = "ФормаСписка";
	КомандаПечати.Порядок        = 100;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр).
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной
//                                                            параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной
//                                            параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если НЕ уатОбщегоНазначенияСервер.РазрешениеПечатиНепроведенногоДокумента(МассивОбъектов) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Накладная") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Накладная",
			"Акт отгрузки", ПечатьНакладная(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "НакладнаяТовары") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "НакладнаяТовары",
			НСтр("en='Consignment note';ru='Накладная'"), ПечатьНакладная(МассивОбъектов, ОбъектыПечати));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "НакладнаяГрМеста") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "НакладнаяГрМеста",
			НСтр("en='Consignment note';ru='Накладная'"), ПечатьНакладная(МассивОбъектов, ОбъектыПечати, "ГрузМеста"));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Бланк") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Бланк",
			НСтр("en='Receipt';ru='Бланк отгрузки'"), ПечатьНакладная(МассивОбъектов, ОбъектыПечати, "Бланк"));
	КонецЕсли;
		
	уатОбщегоНазначенияСервер.УстановитьРедактированиеПечатныхФормДокумента(КоллекцияПечатныхФорм);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.УправлениеДоступом

// Позволяет переопределить ограничение, указанное в модуле менеджера объекта метаданных.
//
// Параметры:
//  Ограничение - Структура:
//    * Текст                             - Строка - ограничение доступа для пользователей.
//                                          Если пустая строка, значит, доступ разрешен.
//    * ТекстДляВнешнихПользователей      - Строка - ограничение доступа для внешних пользователей.
//                                          Если пустая строка, значит, доступ запрещен.
//    * ПоВладельцуБезЗаписиКлючейДоступа - Неопределено - определить автоматически.
//                                        - Булево - если Ложь, то всегда записывать ключи доступа,
//                                          если Истина, тогда не записывать ключи доступа,
//                                          а использовать ключи доступа владельца (требуется,
//                                          чтобы ограничение было строго по объекту-владельцу).
//   * ПоВладельцуБезЗаписиКлючейДоступаДляВнешнихПользователей - Неопределено, Булево - также
//                                          как у параметра ПоВладельцуБезЗаписиКлючейДоступа.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";
	
	Ограничение.ТекстДляВнешнихПользователей = Ограничение.Текст;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// СтандартныеПодсистемы.ВариантыОтчетов

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВариантыОтчетов

// СтандартныеПодсистемы.ШаблоныСообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf",
//                           "png", "jpg", mxl" и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
	
	// Данные из Заказа на ТС из строки ТЧ Грузы
	МодульРаботаСУведомлениями = ОбщегоНазначения.ОбщийМодуль("уатРаботаСУведомлениями_уэ");
	МодульРаботаСУведомлениями.ПриПодготовкеШаблонаСообщения_ДобавитьДанныеЗаказаНаТС(Реквизиты, "уатАктОтгрузки_уэ");
	
	МодульРаботаСУведомлениями.ПриПодготовкеШаблонаСообщения_ДобавитьДанныеСтрокиТЧГрузы(Реквизиты, "уатАктОтгрузки_уэ");
	
	// Удаление из списка вложений печатной формы "Реестр документов"
	НомСтроки = Вложения.Количество()-1;
	Пока НомСтроки >= 0 Цикл
	    Если Вложения[НомСтроки].Имя = "Реестр" И Вложения[НомСтроки].Статус = "ПечатнаяФорма" Тогда
	        Вложения.Удалить(НомСтроки);
	    КонецЕсли;
    	НомСтроки = НомСтроки - 1;
	КонецЦикла;
	
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов 
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
	// Данные из Заказа на ТС из строки ТЧ Грузы
	МодульРаботаСУведомлениями = ОбщегоНазначения.ОбщийМодуль("уатРаботаСУведомлениями_уэ");
	МодульРаботаСУведомлениями.ПриФормированииСообщения_ДобавитьДанныеЗаказаНаТС(Сообщение, ПредметСообщения, ДополнительныеПараметры);
	
	МодульРаботаСУведомлениями.ПриФормированииСообщения_ДобавитьДанныеСтрокиТЧГрузы(Сообщение, ПредметСообщения, ДополнительныеПараметры, "уатАктОтгрузки_уэ");
	
КонецПроцедуры

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS.
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - СправочникСсылка - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма.
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ШаблоныСообщений

#КонецОбласти

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства, Отказ) Экспорт
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	уатАктОтгрузки_уэ.Ссылка КАК Ссылка,
	|	уатАктОтгрузки_уэГрузы.ГрузовоеМесто КАК Контейнер
	|ИЗ
	|	Документ.уатАктОтгрузки_уэ.Грузы КАК уатАктОтгрузки_уэГрузы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатАктОтгрузки_уэ КАК уатАктОтгрузки_уэ
	|		ПО уатАктОтгрузки_уэГрузы.Ссылка = уатАктОтгрузки_уэ.Ссылка
	|ГДЕ
	|	уатАктОтгрузки_уэ.Ссылка = &Ссылка
	|	И уатАктОтгрузки_уэ.ВидОперации В(&ВидыОперацииЗакрытиеКонтейнеров)
	|	И ВЫРАЗИТЬ(уатАктОтгрузки_уэГрузы.ГрузовоеМесто КАК Справочник.уатГрузовыеМеста_уэ).Контейнер
	|	И ВЫРАЗИТЬ(уатАктОтгрузки_уэГрузы.ГрузовоеМесто КАК Справочник.уатГрузовыеМеста_уэ).УникальноеГрузовоеМесто");
	ВидыОперацииЗакрытиеКонтейнеров = Новый Массив;
	ВидыОперацииЗакрытиеКонтейнеров.Добавить(Перечисления.уатВидыОперацийАктОтгрузки_уэ.Грузополучателю);
	ВидыОперацииЗакрытиеКонтейнеров.Добавить(Перечисления.уатВидыОперацийАктОтгрузки_уэ.ПрочееСписание);
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ВидыОперацииЗакрытиеКонтейнеров", ВидыОперацииЗакрытиеКонтейнеров);
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ТаблицаБлокировки = РезультатЗапроса.Выгрузить();
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.уатОстаткиГрузовВКонтейнерах_уэ");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = ТаблицаБлокировки;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Контейнер", "Контейнер");
		Блокировка.Заблокировать();
	КонецЕсли;
	
	мЗапрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатАктОтгрузки_уэГрузы.Ссылка КАК Регистратор,
	|	уатАктОтгрузки_уэГрузы.Ссылка.ОкончаниеОперации КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	уатАктОтгрузки_уэГрузы.Заказ.ДетализацияЗакрытия КАК Детализация,
	|	уатАктОтгрузки_уэГрузы.Ссылка.Склад КАК Склад,
	|	ВЫБОР
	|		КОГДА уатАктОтгрузки_уэГрузы.Заказ.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам)
	|				И ВЫРАЗИТЬ(уатАктОтгрузки_уэГрузы.ГрузовоеМесто КАК Справочник.уатГрузовыеМеста_уэ).Контейнер
	|				И ВЫРАЗИТЬ(уатАктОтгрузки_уэГрузы.ГрузовоеМесто КАК Справочник.уатГрузовыеМеста_уэ).УникальноеГрузовоеМесто
	|			ТОГДА ЗНАЧЕНИЕ(Документ.уатЗаказГрузоотправителя.ПустаяСсылка)
	|		ИНАЧЕ уатАктОтгрузки_уэГрузы.Заказ
	|	КОНЕЦ КАК ЗаказГрузоотправителя,
	|	ВЫБОР
	|		КОГДА уатАктОтгрузки_уэГрузы.Заказ.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ уатАктОтгрузки_уэГрузы.ГрузовоеМесто
	|	КОНЕЦ КАК ГрузовоеМесто,
	|	ВЫБОР
	|		КОГДА уатАктОтгрузки_уэГрузы.Заказ.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ уатАктОтгрузки_уэГрузы.ЕдиницаИзмерения
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	СУММА(уатАктОтгрузки_уэГрузы.Количество) КАК Количество
	|ИЗ
	|	Документ.уатАктОтгрузки_уэ.Грузы КАК уатАктОтгрузки_уэГрузы
	|ГДЕ
	|	уатАктОтгрузки_уэГрузы.Ссылка = &Ссылка
	|	И уатАктОтгрузки_уэГрузы.Количество > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	ВЫБОР
	|		КОГДА уатАктОтгрузки_уэГрузы.Заказ.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ уатАктОтгрузки_уэГрузы.ГрузовоеМесто
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА уатАктОтгрузки_уэГрузы.Заказ.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ уатАктОтгрузки_уэГрузы.ЕдиницаИзмерения
	|	КОНЕЦ,
	|	уатАктОтгрузки_уэГрузы.Ссылка,
	|	уатАктОтгрузки_уэГрузы.Ссылка.ОкончаниеОперации,
	|	уатАктОтгрузки_уэГрузы.Заказ.ДетализацияЗакрытия,
	|	уатАктОтгрузки_уэГрузы.Ссылка.Склад,
	|	ВЫБОР
	|		КОГДА уатАктОтгрузки_уэГрузы.Заказ.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам)
	|				И ВЫРАЗИТЬ(уатАктОтгрузки_уэГрузы.ГрузовоеМесто КАК Справочник.уатГрузовыеМеста_уэ).Контейнер
	|				И ВЫРАЗИТЬ(уатАктОтгрузки_уэГрузы.ГрузовоеМесто КАК Справочник.уатГрузовыеМеста_уэ).УникальноеГрузовоеМесто
	|			ТОГДА ЗНАЧЕНИЕ(Документ.уатЗаказГрузоотправителя.ПустаяСсылка)
	|		ИНАЧЕ уатАктОтгрузки_уэГрузы.Заказ
	|	КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатАктОтгрузки_уэГрузы.Ссылка КАК Регистратор,
	|	ВЫБОР
	|		КОГДА уатАктОтгрузки_уэГрузы.Ссылка.СтатусВыполнения = ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.ВРаботе)
	|			ТОГДА уатАктОтгрузки_уэГрузы.Ссылка.НачалоОперации
	|		КОГДА уатАктОтгрузки_уэГрузы.Ссылка.СтатусВыполнения = ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Выполнен)
	|			ТОГДА уатАктОтгрузки_уэГрузы.Ссылка.ОкончаниеОперации
	|		ИНАЧЕ уатАктОтгрузки_уэГрузы.Ссылка.Дата
	|	КОНЕЦ КАК Период,
	|	уатАктОтгрузки_уэГрузы.Заказ КАК Заказ,
	|	ВЫБОР
	|		КОГДА уатАктОтгрузки_уэГрузы.Заказ.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам)
	|			ТОГДА ЕСТЬNULL(уатАктОтгрузки_уэГрузы.ГрузовоеМесто, ЗНАЧЕНИЕ(Справочник.уатГрузовыеМеста_уэ.ПустаяСсылка))
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.уатГрузовыеМеста_уэ.ПустаяСсылка)
	|	КОНЕЦ КАК ГрузовоеМесто,
	|	МАКСИМУМ(ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.ВыданСоСклада)) КАК Статус
	|ИЗ
	|	Документ.уатАктОтгрузки_уэ.Грузы КАК уатАктОтгрузки_уэГрузы
	|ГДЕ
	|	уатАктОтгрузки_уэГрузы.Ссылка = &Ссылка
	|	И уатАктОтгрузки_уэГрузы.Заказ <> ЗНАЧЕНИЕ(Документ.уатЗаказГрузоотправителя.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	уатАктОтгрузки_уэГрузы.Ссылка,
	|	ВЫБОР
	|		КОГДА уатАктОтгрузки_уэГрузы.Заказ.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам)
	|			ТОГДА ЕСТЬNULL(уатАктОтгрузки_уэГрузы.ГрузовоеМесто, ЗНАЧЕНИЕ(Справочник.уатГрузовыеМеста_уэ.ПустаяСсылка))
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.уатГрузовыеМеста_уэ.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА уатАктОтгрузки_уэГрузы.Ссылка.СтатусВыполнения = ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.ВРаботе)
	|			ТОГДА уатАктОтгрузки_уэГрузы.Ссылка.НачалоОперации
	|		КОГДА уатАктОтгрузки_уэГрузы.Ссылка.СтатусВыполнения = ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Выполнен)
	|			ТОГДА уатАктОтгрузки_уэГрузы.Ссылка.ОкончаниеОперации
	|		ИНАЧЕ уатАктОтгрузки_уэГрузы.Ссылка.Дата
	|	КОНЕЦ,
	|	уатАктОтгрузки_уэГрузы.Заказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатАктОтгрузки_уэГрузы.Заказ КАК Заказ,
	|	уатАктОтгрузки_уэГрузы.ГрузовоеМесто КАК ГрузовоеМесто,
	|	СУММА(-уатАктОтгрузки_уэГрузы.КоличествоМест) КАК КоличествоМест,
	|	СУММА(-уатАктОтгрузки_уэГрузы.ВесБрутто) КАК Вес,
	|	СУММА(-уатАктОтгрузки_уэГрузы.Объем) КАК Объем,
	|	уатАктОтгрузки_уэГрузы.Ссылка.Склад КАК Склад,
	|	уатАктОтгрузки_уэГрузы.Ссылка.ОкончаниеОперации КАК Период,
	|	ЗНАЧЕНИЕ(Перечисление.уатВидыСкладскихОпераций_уэ.Отгрузка) КАК ВидОперации,
	|	СУММА(-уатАктОтгрузки_уэГрузы.Количество) КАК Количество
	|ИЗ
	|	Документ.уатАктОтгрузки_уэ.Грузы КАК уатАктОтгрузки_уэГрузы
	|ГДЕ
	|	уатАктОтгрузки_уэГрузы.Ссылка = &Ссылка
	|	И уатАктОтгрузки_уэГрузы.Заказ <> ЗНАЧЕНИЕ(Документ.уатЗаказГрузоотправителя.ПустаяСсылка)
	|	И уатАктОтгрузки_уэГрузы.Количество > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	уатАктОтгрузки_уэГрузы.Заказ,
	|	уатАктОтгрузки_уэГрузы.ГрузовоеМесто,
	|	уатАктОтгрузки_уэГрузы.Ссылка.Склад,
	|	уатАктОтгрузки_уэГрузы.Ссылка.ОкончаниеОперации
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатАктОтгрузки_уэГрузы.Ссылка КАК Регистратор,
	|	уатАктОтгрузки_уэГрузы.Ссылка.ОкончаниеОперации КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	уатАктОтгрузки_уэГрузы.Ссылка.Склад КАК Склад,
	|	уатАктОтгрузки_уэГрузы.Заказ КАК ЗаказГрузоотправителя,
	|	ВЫБОР
	|		КОГДА уатАктОтгрузки_уэГрузы.Заказ.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ уатАктОтгрузки_уэГрузы.ГрузовоеМесто
	|	КОНЕЦ КАК ГрузовоеМесто,
	|	ВЫБОР
	|		КОГДА уатАктОтгрузки_уэГрузы.Заказ.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ уатАктОтгрузки_уэГрузы.ЕдиницаИзмерения
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	СУММА(уатАктОтгрузки_уэГрузы.Количество) КАК Количество,
	|	уатАктОтгрузки_уэ.МаршрутныйЛист КАК МаршрутныйЛист,
	|	уатАктОтгрузки_уэ.МаршрутныйЛист.ТС КАК ТС
	|ИЗ
	|	Документ.уатАктОтгрузки_уэ.Грузы КАК уатАктОтгрузки_уэГрузы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатАктОтгрузки_уэ КАК уатАктОтгрузки_уэ
	|		ПО уатАктОтгрузки_уэГрузы.Ссылка = уатАктОтгрузки_уэ.Ссылка
	|ГДЕ
	|	уатАктОтгрузки_уэГрузы.Ссылка = &Ссылка
	|	И уатАктОтгрузки_уэГрузы.Количество > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	уатАктОтгрузки_уэГрузы.Заказ,
	|	ВЫБОР
	|		КОГДА уатАктОтгрузки_уэГрузы.Заказ.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ уатАктОтгрузки_уэГрузы.ГрузовоеМесто
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА уатАктОтгрузки_уэГрузы.Заказ.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам)
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ уатАктОтгрузки_уэГрузы.ЕдиницаИзмерения
	|	КОНЕЦ,
	|	уатАктОтгрузки_уэГрузы.Ссылка,
	|	уатАктОтгрузки_уэГрузы.Ссылка.ОкончаниеОперации,
	|	уатАктОтгрузки_уэГрузы.Ссылка.Склад,
	|	уатАктОтгрузки_уэ.МаршрутныйЛист,
	|	уатАктОтгрузки_уэ.МаршрутныйЛист.ТС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатАктОтгрузки_уэГрузы.ГрузовоеМесто КАК Контейнер,
	|	уатАктОтгрузки_уэГрузы.Ссылка.ОкончаниеОперации КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	уатОстаткиГрузовВКонтейнерах_уэОстатки.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя,
	|	уатОстаткиГрузовВКонтейнерах_уэОстатки.ЗаказНаКонтейнер КАК ЗаказНаКонтейнер,
	|	уатОстаткиГрузовВКонтейнерах_уэОстатки.ГрузовоеМесто КАК ГрузовоеМесто,
	|	уатОстаткиГрузовВКонтейнерах_уэОстатки.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	уатОстаткиГрузовВКонтейнерах_уэОстатки.КоличествоОстаток КАК Количество
	|ИЗ
	|	Документ.уатАктОтгрузки_уэ.Грузы КАК уатАктОтгрузки_уэГрузы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.уатОстаткиГрузовВКонтейнерах_уэ.Остатки КАК уатОстаткиГрузовВКонтейнерах_уэОстатки
	|		ПО уатАктОтгрузки_уэГрузы.ГрузовоеМесто = уатОстаткиГрузовВКонтейнерах_уэОстатки.Контейнер
	|ГДЕ
	|	уатАктОтгрузки_уэГрузы.Ссылка = &Ссылка");

	мЗапрос.УстановитьПараметр("Ссылка", ДокументСсылка);
		
	МассивРезультатов = мЗапрос.ВыполнитьПакет();
	
	ТаблицаОстаткиГрузов = МассивРезультатов[0].Выгрузить();
	ТаблицаСтатусыГрузов = МассивРезультатов[1].Выгрузить();
	ТаблицаСкладскоеХранениеГрузов = МассивРезультатов[2].Выгрузить();
	ТаблицаГрузыВРейсах = МассивРезультатов[3].Выгрузить();
	ТаблицаОстаткиГрузовВКонтейнерах = МассивРезультатов[4].Выгрузить();
	
	Для Каждого ТекСтрока Из ТаблицаОстаткиГрузов Цикл
		Если ТекСтрока.Детализация = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам Тогда
			ТекСтрока.Количество = ТекСтрока.Количество * ТекСтрока.ГрузовоеМесто.ЕдиницаХраненияОстатков.Коэффициент;
		КонецЕсли;
	КонецЦикла;
	
	// управляемая блокировка
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.уатОстаткиГрузовНаСкладеКомплектации_уэ");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = ТаблицаОстаткиГрузов;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Склад", "Склад");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ЗаказГрузоотправителя", "ЗаказГрузоотправителя");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ГрузовоеМесто", "ГрузовоеМесто");
	Блокировка.Заблокировать();
	
	ДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаОстаткиГрузов", ТаблицаОстаткиГрузов);
	ДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСтатусыГрузов", ТаблицаСтатусыГрузов);
	ДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСкладскоеХранениеГрузов", ТаблицаСкладскоеХранениеГрузов);
	ДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаГрузыВРейсах", ТаблицаГрузыВРейсах);
	ДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаОстаткиГрузовВКонтейнерах", ТаблицаОстаткиГрузовВКонтейнерах);
	
КонецПроцедуры // ИнициализироватьДанныеДокумента()

Процедура ВыполнитьКонтроль(ДокументСсылка, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь) Экспорт
	мЗапрос = Новый Запрос;
	мЗапрос.МенеджерВременныхТаблиц = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц; 
	мЗапрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаДокумента.ГрузовоеМесто,
	|	ТаблицаДокумента.Заказ,
	|	ТаблицаДокумента.Заказ.ДетализацияЗакрытия КАК ДетализацияЗакрытия,
	|	ТаблицаДокумента.Ссылка КАК Регистратор,
	|	уатОстаткиГрузовНаСкладеКомплектации_уэ.КоличествоОстаток
	|ИЗ
	|	Документ.уатАктОтгрузки_уэ.Грузы КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.уатОстаткиГрузовНаСкладеКомплектации_уэ.Остатки(
	|				&МоментВремени,
	|				Склад = &Склад) КАК уатОстаткиГрузовНаСкладеКомплектации_уэ
	|		ПО (уатОстаткиГрузовНаСкладеКомплектации_уэ.Склад = &Склад)
	|			И ТаблицаДокумента.Заказ = уатОстаткиГрузовНаСкладеКомплектации_уэ.ЗаказГрузоотправителя
	|			И (ТаблицаДокумента.ГрузовоеМесто = уатОстаткиГрузовНаСкладеКомплектации_уэ.ГрузовоеМесто
	|				ИЛИ ТаблицаДокумента.Заказ.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам))
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|	И ЕСТЬNULL(уатОстаткиГрузовНаСкладеКомплектации_уэ.КоличествоОстаток, 0) < 0";
	
	мЗапрос.УстановитьПараметр("Склад"        , ДокументСсылка.Склад);
	мЗапрос.УстановитьПараметр("Ссылка"       , ДокументСсылка);
	МоментКонтроля = Новый МоментВремени(ДокументСсылка.ОкончаниеОперации, ДокументСсылка);
	мГраницаКонтроля = Новый Граница(МоментКонтроля, ВидГраницы.Включая);
	мЗапрос.УстановитьПараметр("МоментВремени", мГраницаКонтроля);
	
	Выборка = мЗапрос.Выполнить().Выбрать();
	Если Выборка.Количество() тогда
		Заголовок = уатОбщегоНазначенияТиповые.уатПредставлениеДокументаПриПроведении(ДокументСсылка);
		Пока Выборка.Следующий() Цикл
			ТекстНСТР = НСтр("en='For the cargo ""%1"" (%2) negative balances were received in temporary storage area ""%3"": %4';ru='Для груза ""%1"" (%2) получены отрицательные остатки на складе комплектации ""%3"": %4'");
			ТекстНСТР = СтрШаблон(ТекстНСТР, Выборка.ГрузовоеМесто, Выборка.Заказ, мЗапрос.Параметры.Склад, Выборка.КоличествоОстаток);
			уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР,, Заголовок);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура("Информация", "Склад");
	Возврат Результат;
	
КонецФункции

Процедура ЗаполнитьТаблицуГрузовПоЗаказуНаТС(АктОтгрузкиОбъект, ЗаказСсылка) Экспорт
	
	флРазделятьПланФакт = ПолучитьФункциональнуюОпцию("уатРазделятьПланФактВСкладскихАктах_уэ");
	Если ЗаказСсылка.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам Тогда
		Для Каждого ТекСтрока Из ЗаказСсылка.Товары Цикл
			НоваяСтрока = АктОтгрузкиОбъект.Грузы.Добавить();
			НоваяСтрока.Заказ = ЗаказСсылка;
			НоваяСтрока.ГрузовоеМесто = ТекСтрока.Номенклатура;
			НоваяСтрока.ЕдиницаИзмерения = ТекСтрока.ЕдиницаИзмерения;
			Если флРазделятьПланФакт Тогда
				НоваяСтрока.КоличествоПлан = ТекСтрока.Количество;
			Иначе
				НоваяСтрока.Количество = ТекСтрока.Количество;
			КонецЕсли;
			НоваяСтрока.Статус = СтатусНовогоГруза(АктОтгрузкиОбъект.ВидОперации);
		КонецЦикла;
	ИначеЕсли ЗаказСсылка.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам Тогда
		Для Каждого ТекСтрока Из ЗаказСсылка.ГрузовойСостав Цикл
			НоваяСтрока = АктОтгрузкиОбъект.Грузы.Добавить();
			НоваяСтрока.Заказ = ЗаказСсылка;
			НоваяСтрока.ГрузовоеМесто = ТекСтрока.ГрузовоеМесто;
			
			Если ТекСтрока.ГрузовоеМесто.Контейнер Тогда
				НоваяСтрока.ЕдиницаИзмерения = ТекСтрока.ТипКонтейнера;
			Иначе
				НоваяСтрока.ЕдиницаИзмерения = ТекСтрока.ВидУпаковки;
			КОнецЕсли;
			
			Если флРазделятьПланФакт Тогда
				НоваяСтрока.КоличествоПлан = ТекСтрока.КоличествоМест;
			Иначе
				НоваяСтрока.Количество = ТекСтрока.КоличествоМест;
			КонецЕсли;
			НоваяСтрока.Статус = СтатусНовогоГруза(АктОтгрузкиОбъект.ВидОперации);
		КонецЦикла;
	Иначе
		НоваяСтрока = АктОтгрузкиОбъект.Грузы.Добавить();
		НоваяСтрока.Заказ = ЗаказСсылка;
		Если флРазделятьПланФакт Тогда
			НоваяСтрока.КоличествоПлан = 1;
		Иначе
			НоваяСтрока.Количество = 1;
		КонецЕсли;
		НоваяСтрока.Статус = СтатусНовогоГруза(АктОтгрузкиОбъект.ВидОперации);
	КонецЕсли;
	АктОтгрузкиОбъект.ЗаполнитьВесоОбъемныеПоказателиПлан();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция помещает в структуру все данные, отображаемые при печати документа.
// Вызывается из функции ПечатьОприходованияТоваров и из веб-приложения
//
// Возвращаемое значение:
//  Структура
//
Функция ПолучитьДанныеДляПечатиАктОтгрузки(МассивОбъектов, ТипПФ)
	
	тзПараметрыПечати = Новый ТаблицаЗначений();
	тзПараметрыПечати.Колонки.Добавить("Ссылка");
	тзПараметрыПечати.Колонки.Добавить("ТекстЗаголовка");
	тзПараметрыПечати.Колонки.Добавить("ПредставлениеОрганизации");
	тзПараметрыПечати.Колонки.Добавить("Организация");
	тзПараметрыПечати.Колонки.Добавить("Ответственный");
	тзПараметрыПечати.Колонки.Добавить("Отпустил");
	тзПараметрыПечати.Колонки.Добавить("Получил");
	тзПараметрыПечати.Колонки.Добавить("ПредставлениеСклада");
	тзПараметрыПечати.Колонки.Добавить("ЕдиницаИзмеренияВес");
	тзПараметрыПечати.Колонки.Добавить("ЕдиницаИзмеренияОбъем");
	тзПараметрыПечати.Колонки.Добавить("ЕдиницаИзмеренияМеста");
	тзПараметрыПечати.Колонки.Добавить("Позиции");
	тзПараметрыПечати.Колонки.Добавить("КоличествоНаименований");
	тзПараметрыПечати.Колонки.Добавить("ПеревезеноВес");
	тзПараметрыПечати.Колонки.Добавить("ПеревезеноОбъем");
	тзПараметрыПечати.Колонки.Добавить("ПеревезеноКолМест");
	тзПараметрыПечати.Колонки.Добавить("ПеревезеноВесПлан");
	тзПараметрыПечати.Колонки.Добавить("ПеревезеноОбъемПлан");
	тзПараметрыПечати.Колонки.Добавить("ПеревезеноКолМестПлан");

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ТипПФ", ТипПФ);

	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументАкт.Номер КАК Номер,
	|	ДокументАкт.Дата КАК Дата,
	|	ДокументАкт.Организация КАК Организация,
	|	ДокументАкт.Склад.Представление КАК Склад,
	|	ДокументАкт.Ответственный КАК Ответственный,
	|	ДокументАкт.Отпустил КАК Отпустил,
	|	ДокументАкт.Получил КАК Получил,
	|	ДокументАкт.Ссылка КАК Ссылка,
	|	ДокументАкт.ВидОперации КАК ВидОперации
	|ИЗ
	|	Документ.уатАктОтгрузки_уэ КАК ДокументАкт
	|ГДЕ
	|	ДокументАкт.Ссылка В(&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДокументАктГрузы.НомерСтроки КАК НомерСтроки,
	|	ДокументАктГрузы.Заказ КАК Заказ,
	|	ВЫБОР
	|		КОГДА &ТипПФ = ""Грузы""
	|			ТОГДА ВЫБОР
	|					КОГДА ТИПЗНАЧЕНИЯ(ДокументАктГрузы.ГрузовоеМесто) = ТИП(Справочник.Номенклатура)
	|						ТОГДА ДокументАктГрузы.ГрузовоеМесто
	|					ИНАЧЕ """"
	|				КОНЕЦ
	|		КОГДА &ТипПФ = ""ГрузМеста""
	|			ТОГДА ВЫБОР
	|					КОГДА ТИПЗНАЧЕНИЯ(ДокументАктГрузы.ГрузовоеМесто) = ТИП(Справочник.уатГрузовыеМеста_уэ)
	|						ТОГДА ДокументАктГрузы.ГрузовоеМесто
	|					ИНАЧЕ """"
	|				КОНЕЦ
	|		ИНАЧЕ ДокументАктГрузы.ГрузовоеМесто
	|	КОНЕЦ КАК Номенклатура,
	|	ДокументАктГрузы.Количество КАК Количество,
	|	ДокументАктГрузы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ДокументАктГрузы.ВесБрутто КАК Вес,
	|	ДокументАктГрузы.Объем КАК Объем,
	|	ДокументАктГрузы.КоличествоМест КАК КоличествоМест,
	|	ДокументАктГрузы.КоличествоПлан КАК КоличествоПлан,
	|	ДокументАктГрузы.ВесБруттоПлан КАК ВесПлан,
	|	ДокументАктГрузы.ОбъемПлан КАК ОбъемПлан,
	|	ДокументАктГрузы.КоличествоМестПлан КАК КоличествоМестПлан,
	|	ДокументАктГрузы.Ссылка КАК Ссылка,
	|	ДокументАктГрузы.Ссылка.Номер КАК Номер,
	|	ДокументАктГрузы.Заказ.Номер КАК ЗаказНомер,
	|	ДокументАктГрузы.Заказ.Дата КАК ЗаказДата
	|ИЗ
	|	Документ.уатАктОтгрузки_уэ.Грузы КАК ДокументАктГрузы
	|ГДЕ
	|	ДокументАктГрузы.Ссылка В(&МассивОбъектов)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номер,
	|	НомерСтроки";

	НаборРезультатов = Запрос.ВыполнитьПакет();
	
	ВыборкаЗаголовок     = НаборРезультатов[0].Выбрать();
	ВыборкаНоменклатура  = НаборРезультатов[1].Выгрузить();
	
	Пока ВыборкаЗаголовок.Следующий() Цикл
		
		СтрокаОперация = " (" + ВыборкаЗаголовок.ВидОперации + ")";

		ПараметрыПечати = тзПараметрыПечати.Добавить();
		ПараметрыПечати.Ссылка                   = ВыборкаЗаголовок.Ссылка;
		Если ТипПФ = "Бланк" Тогда
			НазваниеДокумента = НСтр("en='Cargo receipt';ru='Бланк отгрузки'")
		Иначе
			НазваниеДокумента = НСтр("en='Act of cargo receipt';ru='Акт отгрузки'");
		КонецЕсли;
		ПараметрыПечати.ТекстЗаголовка           = уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ВыборкаЗаголовок, НазваниеДокумента + СтрокаОперация);
		ПараметрыПечати.ПредставлениеОрганизации = уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(
					уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(ВыборкаЗаголовок.Организация, ВыборкаЗаголовок.Дата), "НаименованиеДляПечатныхФорм,");
		ПараметрыПечати.Организация              = ВыборкаЗаголовок.Организация;
		ПараметрыПечати.ПредставлениеСклада      = ВыборкаЗаголовок.Склад;
		ПараметрыПечати.Ответственный            = ВыборкаЗаголовок.Ответственный;
		ПараметрыПечати.Отпустил                 = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ВыборкаЗаголовок.Отпустил);
		ПараметрыПечати.Получил                  = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ВыборкаЗаголовок.Получил);
		
		// Вывести табличную часть
		Позиции = Новый Массив();
		
		КоличествоНаименований = 0;
		ПеревезеноВес          = 0;
		ПеревезеноВесПлан      = 0;
		ПеревезеноОбъем        = 0;
		ПеревезеноОбъемПлан    = 0;
		ПеревезеноКолМест	   = 0;
		ПеревезеноКолМестПлан  = 0;
		ЕдиницаИзмеренияВес    = Константы.уатЕдиницаИзмеренияВеса.Получить();
		ЕдиницаИзмеренияОбъем  = Константы.уатЕдиницаИзмеренияОбъема.Получить();
		ЕдиницаИзмеренияМеста  = Справочники.уатВидыУпаковки_уэ.ПолучитьОсновнойВидУпаковки().КраткоеНаименование;
		ТекДокумент = ВыборкаНоменклатура.НайтиСтроки(Новый Структура("Ссылка", ВыборкаЗаголовок.Ссылка));
		Для Каждого ТекСтрока Из ТекДокумент Цикл
			ПараметрыПозиции = Новый Структура();
			ПараметрыПозиции.Вставить("Ссылка"					, ТекСтрока.Ссылка);
			ПараметрыПозиции.Вставить("Заказ"					, ТекСтрока.Заказ);
			ПараметрыПозиции.Вставить("НомерЗаказа"				, ТекСтрока.ЗаказНомер);
			ПараметрыПозиции.Вставить("ДатаЗаказа"				, ТекСтрока.ЗаказДата);
			ПараметрыПозиции.Вставить("Номенклатура"			, ТекСтрока.Номенклатура);
			ПараметрыПозиции.Вставить("НомерСтроки"				, ТекСтрока.НомерСтроки);
			ПараметрыПозиции.Вставить("Количество"				, ТекСтрока.Количество);
			ПараметрыПозиции.Вставить("КоличествоПлан"			, ТекСтрока.КоличествоПлан);
			ПараметрыПозиции.Вставить("ЕдиницаИзмерения"		, ТекСтрока.ЕдиницаИзмерения);
			ПараметрыПозиции.Вставить("Вес"						, ТекСтрока.Вес);
			ПараметрыПозиции.Вставить("ВесПлан"					, ТекСтрока.ВесПлан);
			ПараметрыПозиции.Вставить("Объем"					, ТекСтрока.Объем);
			ПараметрыПозиции.Вставить("ОбъемПлан"				, ТекСтрока.ОбъемПлан);
			ПараметрыПозиции.Вставить("КоличествоМест"			, ТекСтрока.КоличествоМест);
			ПараметрыПозиции.Вставить("КоличествоМестПлан"		, ТекСтрока.КоличествоМестПлан);
			
			Позиции.Добавить(ПараметрыПозиции);
			КоличествоНаименований = КоличествоНаименований + 1;
			ПеревезеноВес          = ПеревезеноВес + ТекСтрока.Вес;
			ПеревезеноВесПлан      = ПеревезеноВесПлан + ТекСтрока.ВесПлан;
			ПеревезеноОбъем        = ПеревезеноОбъем + ТекСтрока.Объем;
			ПеревезеноОбъемПлан    = ПеревезеноОбъемПлан + ТекСтрока.ОбъемПлан;
			ПеревезеноКолМест      = ПеревезеноКолМест + ТекСтрока.КоличествоМест;
			ПеревезеноКолМестПлан  = ПеревезеноКолМестПлан + ТекСтрока.КоличествоМестПлан;
		КонецЦикла;
		
		ПараметрыПечати.Позиции = Позиции;
		ПараметрыПечати.ЕдиницаИзмеренияВес    = "(" + ЕдиницаИзмеренияВес +")";
		ПараметрыПечати.ЕдиницаИзмеренияОбъем  = "(" + ЕдиницаИзмеренияОбъем +")";
		ПараметрыПечати.ЕдиницаИзмеренияМеста  = ЕдиницаИзмеренияМеста;
		ПараметрыПечати.КоличествоНаименований = ?(КоличествоНаименований = 0, "", КоличествоНаименований);
		ПараметрыПечати.ПеревезеноВес          = ?(ПеревезеноВес = 0, "", Строка(ПеревезеноВес) + " " + ЕдиницаИзмеренияВес);
		ПараметрыПечати.ПеревезеноВесПлан      = ?(ПеревезеноВесПлан = 0, "", Строка(ПеревезеноВесПлан) + " " + ЕдиницаИзмеренияВес);
		ПараметрыПечати.ПеревезеноОбъем        = ?(ПеревезеноОбъем = 0, "", Строка(ПеревезеноОбъем) + " " + ЕдиницаИзмеренияОбъем);
		ПараметрыПечати.ПеревезеноОбъемПлан    = ?(ПеревезеноОбъемПлан = 0, "", Строка(ПеревезеноОбъемПлан) + " " + ЕдиницаИзмеренияОбъем);
		ПараметрыПечати.ПеревезеноКолМест      = ?(ПеревезеноКолМест = 0, "", Строка(ПеревезеноКолМест) + " " + ЕдиницаИзмеренияМеста);
		ПараметрыПечати.ПеревезеноКолМестПлан  = ?(ПеревезеноКолМестПлан = 0, "", Строка(ПеревезеноКолМестПлан) + " " + ЕдиницаИзмеренияМеста);
		
	КонецЦикла;
	
	Возврат тзПараметрыПечати;

КонецФункции //ПолучитьДанныеДляПечатиОприходованияТоваров()

Функция ПечатьНакладная(МассивОбъектов, ОбъектыПечати, ТипПФ = "Грузы")
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_АктОтгрузки";
	
	ПервыйДокумент = Истина;
	
	тзПараметрыПечати = ПолучитьДанныеДляПечатиАктОтгрузки(МассивОбъектов, ТипПФ);
	
	Для Каждого ТекущийДокумент Из МассивОбъектов Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АктОтгрузки_Накладная";
		Если ТипПФ = "Бланк" Тогда
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.уатАктПриемки_уэ.ПФ_MXL_БланкПриемки");
		Иначе
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.уатАктОтгрузки_уэ.ПФ_MXL_Накладная");
		КонецЕсли;
		
		ПараметрыПечати = тзПараметрыПечати.НайтиСтроки(Новый Структура("Ссылка", ТекущийДокумент));
		Если ПараметрыПечати.Количество() = 0 Тогда
			Продолжить;
		КОнецЕсли;
		
		ОбластьЗаголовка           = "Заголовок";
		ОбластьРеквизитовЗаголовка = "ЗаголовокРеквизиты";
		ОбластьШапки               = "НоменклатураШапка";
		ОбластьСтроки              = "Номенклатура";
		ОбластьПодвал              = "ПодвалНоменклатура";
		ОбластьПодписи             = "Подписи";
		
		// Выводим шапку накладной
		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьЗаголовка);
		ОбластьМакета.Параметры.Заполнить(ПараметрыПечати[0]);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьРеквизитовЗаголовка);
		ОбластьМакета.Параметры.Заполнить(ПараметрыПечати[0]);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Вывести табличную часть
		Если ПараметрыПечати[0].Позиции.Количество() Тогда
			ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
			ОбластьМакета.Параметры.Заполнить(ПараметрыПечати[0]);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтроки);
			
			Для каждого ПараметрыПозиции Из ПараметрыПечати[0].Позиции Цикл
				ОбластьМакета.Параметры.Заполнить(ПараметрыПозиции);
				ТабличныйДокумент.Вывести(ОбластьМакета);
			КонецЦикла;
			
			// Вывести Сумму прописью
			ОбластьМакета = Макет.ПолучитьОбласть(ОбластьПодвал);
			ОбластьМакета.Параметры.Заполнить(ПараметрыПечати[0]);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			Если Не (ТипПФ = "Бланк") Тогда
				// Вывести подписи
				ОбластьМакета = Макет.ПолучитьОбласть(ОбластьПодписи);
				ОбластьМакета.Параметры.Заполнить(ПараметрыПечати[0]);
				ТабличныйДокумент.Вывести(ОбластьМакета);
			КонецЕсли;
			
		КонецЕсли;
	
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ТекущийДокумент);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатнаяФорма()

Функция СтатусНовогоГруза(ВидОперации) Экспорт
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийАктОтгрузки_уэ.ВРейс") Тогда
		Статус = ПредопределенноеЗначение("Справочник.уатСтатусы_уэ.ВыданВРейс");
	Иначе
		Статус = ПредопределенноеЗначение("Справочник.уатСтатусы_уэ.ВыданСоСклада");
	КонецЕсли;
	Возврат Статус;
КонецФункции

#КонецОбласти

#КонецЕсли
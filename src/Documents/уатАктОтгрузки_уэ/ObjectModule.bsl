
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ВидОперации <> Перечисления.уатВидыОперацийАктОтгрузки_уэ.ВРейс
		И ВидОперации <> Перечисления.уатВидыОперацийАктОтгрузки_уэ.ВРейсВПункте Тогда 
		ПринадлежностьПеревозки = Перечисления.уатПринадлежностьТС.Собственное;
		Перевозчик              = Организация;
		Водитель1               = Неопределено;
	КонецЕсли;
	
	РазделятьПланФакт = ПолучитьФункциональнуюОпцию("уатРазделятьПланФактВСкладскихАктах_уэ");
	ИспользоватьУведомления = ПолучитьФункциональнуюОпцию("уатИспользоватьУведомления_уэ");
	
	// Расхождения между плановыми и фактическими данными
	ОбнаруженыРасхождения = Ложь;
	мсвСтрокиСРасхождениемПланаФакта = Новый Массив;
	Если Не Отказ И РежимЗаписи = РежимЗаписиДокумента.Проведение 
		И ЭтотОбъект.ОперацияВыполнена И РазделятьПланФакт Тогда
		
		Для Сч = 0 По Грузы.Количество()-1 Цикл
			ТекСтрока = Грузы[Сч];
			Если ТекСтрока.ВесБрутто = ТекСтрока.ВесБруттоПлан 
				И ТекСтрока.Количество = ТекСтрока.КоличествоПлан
				И ТекСтрока.КоличествоМест = ТекСтрока.КоличествоМестПлан
				И ТекСтрока.Объем = ТекСтрока.ОбъемПлан Тогда
				// Расхождений между плановыми и фактическими данными нет
				Продолжить;
			КонецЕсли;
			
			Если Ссылка.ОперацияВыполнена И Ссылка.Грузы.Количество() = Грузы.Количество() Тогда
				// Если эти же расхождения есть в сохраненной в базе версии документа, то уведомление формировать повторно не нужно.
				// Повторно устанавливат флаг ЕстьРасхождения тоже не нужно.
				СохраненнаяСтрока = Ссылка.Грузы[Сч];
				Если ТекСтрока.ВесБрутто <> СохраненнаяСтрока.ВесБрутто
					Или ТекСтрока.ВесБруттоПлан <> СохраненнаяСтрока.ВесБруттоПлан
					Или ТекСтрока.Количество <> СохраненнаяСтрока.Количество
					Или ТекСтрока.КоличествоПлан <> СохраненнаяСтрока.КоличествоПлан
					Или ТекСтрока.КоличествоМест <> СохраненнаяСтрока.КоличествоМест
					Или ТекСтрока.КоличествоМестПлан <> СохраненнаяСтрока.КоличествоМестПлан
					Или ТекСтрока.Объем <> СохраненнаяСтрока.Объем
					Или ТекСтрока.ОбъемПлан <> СохраненнаяСтрока.ОбъемПлан Тогда
					мсвСтрокиСРасхождениемПланаФакта.Добавить(ТекСтрока);
				КонецЕсли;
			Иначе
				мсвСтрокиСРасхождениемПланаФакта.Добавить(ТекСтрока);
			КонецЕсли;
		КонецЦикла;
		ОбнаруженыРасхождения = мсвСтрокиСРасхождениемПланаФакта.Количество() > 0;
	КонецЕсли;
	
	УстанавливатьФлагЕстьРасхождения = Не ДополнительныеСвойства.Свойство("НеУстанавливатьФлагЕстьРасхождения")
		Или Не ДополнительныеСвойства.НеУстанавливатьФлагЕстьРасхождения;
		
	Если ОбнаруженыРасхождения И УстанавливатьФлагЕстьРасхождения Тогда
		// Этот акт
		ЭтотОбъект.ЕстьРасхождения = Истина;
		
		// Маршрутный лист
		Если ЗначениеЗаполнено(ЭтотОбъект.МаршрутныйЛист)
			И Не ЭтотОбъект.МаршрутныйЛист.ЕстьРасхождения Тогда
			МаршрутныйЛистОбъект = ЭтотОбъект.МаршрутныйЛист.ПолучитьОбъект();
			МаршрутныйЛистОбъект.ЕстьРасхождения = Истина;
			// Устанавливается один флаг, который ни на что не влияет. Не требуется выполнять обработчики записи/проведения.
			МаршрутныйЛистОбъект.ОбменДанными.Загрузка = Истина;
			МаршрутныйЛистОбъект.Записать();
		КонецЕсли;
		
		// Заказы на ТС, в которых обнаружены новые расхождения
		ЗаказыСРасхождениями = Новый Массив();
		Для Каждого ТекСтрока Из мсвСтрокиСРасхождениемПланаФакта Цикл
			ЗаказыСРасхождениями.Добавить(ТекСтрока.Заказ);
		КонецЦикла;
		уатОбщегоНазначения_уэ.УстановитьФлагЕстьРасхожденияВЗаказахНаТС(ЗаказыСРасхождениями);
	КонецЕсли;
	
	// Уведомления
	Если Не Отказ И Не ПометкаУдаления И ИспользоватьУведомления Тогда
		// Заполнение ТЧ "Получатели уведомлений"
		Если Модифицированность() Тогда
			тблПолучатели = уатОбщегоНазначения_уэ.СформироватьСписокПолучателейУведомлений(ЭтотОбъект);
			ПолучателиУведомлений.Загрузить(тблПолучатели);
		КонецЕсли;
		
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			// Отслеживаем событие "Изменение статуса"
			флИзменениеСтатуса = Ссылка.Пустая() Или Ссылка.СтатусВыполнения <> СтатусВыполнения;
			ДополнительныеСвойства.Вставить("флИзменениеСтатуса", флИзменениеСтатуса);
			
			// Отслеживаем событие "Расхождения по складскому акту"
			ДополнительныеСвойства.Вставить("мсвСтрокиСРасхождениемПланаФакта", мсвСтрокиСРасхождениемПланаФакта);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	// Уведомления
	Если ДополнительныеСвойства.Свойство("флИзменениеСтатуса") И ДополнительныеСвойства.флИзменениеСтатуса Тогда
		уатОбщегоНазначения_уэ.СформироватьУведомление(Ссылка, Перечисления.уатТипыСобытийДляУведомления_уэ.ИзменениеСтатуса);
	КонецЕсли;
	Если ДополнительныеСвойства.Свойство("мсвСтрокиСРасхождениемПланаФакта") 
		И ДополнительныеСвойства.мсвСтрокиСРасхождениемПланаФакта.Количество() > 0 Тогда
		Для Каждого ТекСтрока Из ДополнительныеСвойства.мсвСтрокиСРасхождениемПланаФакта Цикл
			ДополнительныеПараметрыСобытия = Новый Структура;
			ДополнительныеПараметрыСобытия.Вставить("ДополнительныйДокумент", ТекСтрока.Заказ);
			ДополнительныеПараметрыСобытия.Вставить("ГрузовоеМесто", ТекСтрока.ГрузовоеМесто);
						
			уатОбщегоНазначения_уэ.СформироватьУведомление(Ссылка,
				Перечисления.уатТипыСобытийДляУведомления_уэ.РасхожденияПоСкладскомуАкту,
				ДополнительныеПараметрыСобытия
			);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	// Инициализация дополнительных свойств для проведения документа.
	уатПроведение.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	Документы.уатАктОтгрузки_уэ.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	уатПроведение.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	Если ЭтотОбъект.ОперацияВыполнена Тогда
		уатПроведение_уэ.ОтразитьСтатусыГрузов(ДополнительныеСвойства, Движения, Отказ);
		Если ВидОперации = Перечисления.уатВидыОперацийАктОтгрузки_уэ.Грузополучателю
			Или ВидОперации = Перечисления.уатВидыОперацийАктОтгрузки_уэ.ВРейс
			Или ВидОперации = Перечисления.уатВидыОперацийАктОтгрузки_уэ.ПрочееСписание Тогда
			уатПроведение_уэ.ОтразитьОстаткиГрузовНаСкладеКомплектации(ДополнительныеСвойства, Движения, Отказ);
			уатПроведение_уэ.ОтразитьСкладскоеХранениеГрузов(ДополнительныеСвойства, Движения, Отказ);
		КонецЕсли;
		Если ВидОперации = Перечисления.уатВидыОперацийАктОтгрузки_уэ.Грузополучателю
			Или ВидОперации = Перечисления.уатВидыОперацийАктОтгрузки_уэ.ПрочееСписание Тогда
			уатПроведение_уэ.ОтразитьОстаткиГрузовВКонтейнерах(ДополнительныеСвойства, Движения, Отказ);
		КонецЕсли;
		Если ВидОперации = Перечисления.уатВидыОперацийАктОтгрузки_уэ.ВРейсВПункте
			Или ВидОперации = Перечисления.уатВидыОперацийАктОтгрузки_уэ.ВРейс Тогда
			уатПроведение_уэ.ОтразитьГрузыВРейсах(ДополнительныеСвойства, Движения, Отказ);
		КонецЕсли;
	КонецЕсли;
	
	уатПроведение.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	Документы.уатАктОтгрузки_уэ.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа
	уатПроведение.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	уатПроведение.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	уатПроведение.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль
	Документы.уатАктОтгрузки_уэ.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ, Истина);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	уатОбщегоНазначенияСервер.Заполнить(ЭтотОбъект, ДанныеЗаполнения);

	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") Тогда
		
		Если ДанныеЗаполнения.Мультимодальный И (Не ДанныеЗаполнения.ЭтоЭтап 
			Или Не ЗначениеЗаполнено(ДанныеЗаполнения.РодительскийЗаказ)) Тогда 
			Возврат;
		КонецЕсли;
		
		Если ДополнительныеСвойства.Свойство("ИспользоватьВходящуюТаблицуЗаказов") Тогда // Интерактивный ввод: ФормаАкта.ПриСозданииНаСервере
			Если ДополнительныеСвойства.ИспользоватьВходящуюТаблицуЗаказов = Истина Тогда // Этап 2: склад передачи известен, входящая таблица заказов - это и есть грузы к передаче
				Дата        = ТекущаяДата();
				ВидОперации = Перечисления.уатВидыОперацийАктОтгрузки_уэ.Грузополучателю;
				Организация = ДанныеЗаполнения.Организация;
				
				флРазделятьПланФакт = ПолучитьФункциональнуюОпцию("уатРазделятьПланФактВСкладскихАктах_уэ");
				Для Каждого ТекСтрокаОперации Из ДополнительныеСвойства.ТаблицаЗаказы Цикл
					НоваяСтрока = Грузы.Добавить();
					НоваяСтрока.Заказ = ТекСтрокаОперации.ЗаказГрузоотправителя;
					НоваяСтрока.ГрузовоеМесто = ТекСтрокаОперации.ГрузовоеМесто;
					НоваяСтрока.ЕдиницаИзмерения = ТекСтрокаОперации.ЕдиницаИзмерения;
					Если флРазделятьПланФакт Тогда
						НоваяСтрока.КоличествоПлан   = ТекСтрокаОперации.Количество;
					Иначе
						НоваяСтрока.Количество   = ТекСтрокаОперации.Количество;
					КонецЕсли;
					НоваяСтрока.Статус = Справочники.уатСтатусы_уэ.ВыданСоСклада;
				КонецЦикла;
				ЗаполнитьВесоОбъемныеПоказателиПлан();
				
				мсвСклады = Новый Массив;
				мсвСклады.Добавить(Склад);
				ДополнительныеСвойства.Вставить("мсвСклады", мсвСклады);
				
			Иначе // Этап 1: получение грузов к поступлению по заказу, получение списка складов передачи для выбора.
				// Общий текст запроса, возвращающий грузы, еще не переданные в рейс по указанному заказу.
				Запрос = Новый Запрос(
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	уатОстаткиГрузовНаСкладеКомплектации_уэОстатки.Склад,
				|	уатОстаткиГрузовНаСкладеКомплектации_уэОстатки.ЗаказГрузоотправителя,
				|	уатОстаткиГрузовНаСкладеКомплектации_уэОстатки.ГрузовоеМесто КАК ГрузовоеМесто,
				|	уатОстаткиГрузовНаСкладеКомплектации_уэОстатки.ЕдиницаИзмерения,
				|	уатОстаткиГрузовНаСкладеКомплектации_уэОстатки.КоличествоОстаток КАК Количество
				|ИЗ
				|	РегистрНакопления.уатОстаткиГрузовНаСкладеКомплектации_уэ.Остатки(, ЗаказГрузоотправителя = &Заказ) КАК уатОстаткиГрузовНаСкладеКомплектации_уэОстатки");
				Запрос.УстановитьПараметр("Заказ", ДанныеЗаполнения);
				тблЗапрос = Запрос.Выполнить().Выгрузить();
				
				// Выходной массив складов для выбора
				мсвСклады = Новый Массив;
				Если тблЗапрос.Количество() > 0 Тогда
					Для Каждого ТекСтрока Из тблЗапрос Цикл
						Если мсвСклады.Найти(ТекСтрока.Склад) = Неопределено Тогда
							мсвСклады.Добавить(ТекСтрока.Склад);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				ДополнительныеСвойства.Вставить("ТаблицаЗаказы", тблЗапрос);
				ДополнительныеСвойства.Вставить("мсвСклады", мсвСклады);
				Если тблЗапрос.Количество() = 0 Тогда
					ДополнительныеСвойства.Вставить("ВсеГрузыПереданыСоСклада", Истина);
				КонецЕсли;
				
				// Всего один склад, заполняем документ сразу по нему
				Если мсвСклады.Количество() = 1 Тогда
					Дата        = ТекущаяДата();
					ВидОперации = Перечисления.уатВидыОперацийАктОтгрузки_уэ.Грузополучателю;
					Организация = ДанныеЗаполнения.Организация;
					
					Склад = мсвСклады[0];
					Для Каждого ТекСтрокаОперации Из ДополнительныеСвойства.ТаблицаЗаказы Цикл
						НоваяСтрока = Грузы.Добавить();
						НоваяСтрока.Заказ = ТекСтрокаОперации.ЗаказГрузоотправителя;
						НоваяСтрока.ГрузовоеМесто = ТекСтрокаОперации.ГрузовоеМесто;
						НоваяСтрока.ЕдиницаИзмерения = ТекСтрокаОперации.ЕдиницаИзмерения;
						Если ПолучитьФункциональнуюОпцию("уатРазделятьПланФактВСкладскихАктах_уэ") Тогда
							НоваяСтрока.КоличествоПлан   = ТекСтрокаОперации.Количество;
						Иначе
							НоваяСтрока.Количество   = ТекСтрокаОперации.Количество;
						КонецЕсли;
						НоваяСтрока.Статус = Справочники.уатСтатусы_уэ.ВыданСоСклада;
					КонецЦикла;
					ЗаполнитьВесоОбъемныеПоказателиПлан();
				КонецЕсли;
			КонецЕсли;
			
		Иначе // Программное создание: ДокОбъектАкт.Заполнить(ЗаказНаТССсылка)
			Дата                = ТекущаяДата();
			ВидОперации         = Перечисления.уатВидыОперацийАктОтгрузки_уэ.Грузополучателю;
			Организация         = ДанныеЗаполнения.Организация;
			ДокументОснование   = ДанныеЗаполнения;
						
			//Для Каждого ТекСтрокаОперации Из ДанныеЗаполнения.Заказы Цикл
			//	Если ТекСтрокаОперации.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка
			//		И (ТекСтрокаОперации.ЗаказГрузоотправителя.ВидДоставки = Перечисления.уатВидыДоставки_уэ.ДверьСклад
			//		ИЛИ ТекСтрокаОперации.ЗаказГрузоотправителя.ВидДоставки = Перечисления.уатВидыДоставки_уэ.СкладСклад) Тогда
			//		
			//		НоваяСтрока = Грузы.Добавить();
			//		НоваяСтрока.Заказ = ТекСтрокаОперации.ЗаказГрузоотправителя;
			//		НоваяСтрока.ГрузовоеМесто = ТекСтрокаОперации.Номенклатура;
			//		НоваяСтрока.ЕдиницаИзмерения = ТекСтрокаОперации.ЕдиницаИзмерения;
			//		НоваяСтрока.Количество 	 = ТекСтрокаОперации.Количество;
			//	КонецЕсли;
			//КонецЦикла;
			
		КонецЕсли;
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.уатМаршрутныйЛист") Тогда
		Если ДополнительныеСвойства.Свойство("ИспользоватьВходящуюТаблицуЗаказов") Тогда // Интерактивный ввод: ФормаАкта.ПриСозданииНаСервере
			Если ДополнительныеСвойства.ИспользоватьВходящуюТаблицуЗаказов = Истина Тогда // Этап 2: склад поступления известен, входящая таблица заказов - это и есть грузы к поступлению
				Дата        = ТекущаяДата();
				ВидОперации = Перечисления.уатВидыОперацийАктОтгрузки_уэ.ВРейс;
				Организация = ДанныеЗаполнения.Организация;
				
				Если ДополнительныеСвойства.ТаблицаЗаказы.Количество() = 0 Тогда
					ДополнительныеСвойства.Вставить("ВсеГрузыПереданыСоСклада", Истина);
				КонецЕсли;
				
				флРазделятьПланФакт = ПолучитьФункциональнуюОпцию("уатРазделятьПланФактВСкладскихАктах_уэ");
				Для Каждого ТекСтрокаОперации Из ДополнительныеСвойства.ТаблицаЗаказы Цикл
					НоваяСтрока = Грузы.Добавить();
					НоваяСтрока.Заказ = ТекСтрокаОперации.ЗаказГрузоотправителя;
					НоваяСтрока.ГрузовоеМесто = ТекСтрокаОперации.ГрузовоеМесто;
					НоваяСтрока.ЕдиницаИзмерения = ТекСтрокаОперации.ЕдиницаИзмерения;
					Если флРазделятьПланФакт Тогда
						НоваяСтрока.КоличествоПлан = ТекСтрокаОперации.Количество;
					Иначе
						НоваяСтрока.Количество = ТекСтрокаОперации.Количество;
					КонецЕсли;
					НоваяСтрока.Статус = Справочники.уатСтатусы_уэ.ВыданСоСклада;
				КонецЦикла;
				ЗаполнитьВесоОбъемныеПоказателиПлан();
				
				// Добавление строк с нулевым количеством
				Если ДополнительныеСвойства.Свойство("ТаблицаВсеЗаказы") Тогда
					СтруктураПоиска = Новый Структура("Заказ, ГрузовоеМесто");
					Для Каждого СтрокаТаблицы Из ДополнительныеСвойства.ТаблицаВсеЗаказы Цикл
						СтруктураПоиска.Заказ = СтрокаТаблицы.Значение.ЗаказГрузоотправителя;
						СтруктураПоиска.ГрузовоеМесто = СтрокаТаблицы.Значение.ГрузовоеМесто;
						Если Грузы.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
							НоваяСтрока = Грузы.Добавить();
							НоваяСтрока.Заказ = СтрокаТаблицы.Значение.ЗаказГрузоотправителя;
							НоваяСтрока.ГрузовоеМесто = СтрокаТаблицы.Значение.ГрузовоеМесто;
							НоваяСтрока.ЕдиницаИзмерения = СтрокаТаблицы.Значение.ЕдиницаИзмерения;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				мсвСклады = Новый Массив;
				Если ЗначениеЗаполнено(Склад) Тогда
					мсвСклады.Добавить(Склад);
				КонецЕсли;
				Если ДополнительныеСвойства.ТаблицаЗаказы.Количество() > 0 Тогда
					Для Каждого ТекСтрока Из ДополнительныеСвойства.ТаблицаЗаказы Цикл
						Если мсвСклады.Найти(ТекСтрока.Склад) = Неопределено Тогда
							мсвСклады.Добавить(ТекСтрока.Склад);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				ДополнительныеСвойства.Вставить("мсвСклады", мсвСклады);
			
			Иначе //Этап 1: получение грузов к поступлению по таблице грузов и заказов МЛ, получение списка складов поступления для выбора
				
				// Общий текст запроса, возвращающий грузы, еще не полученные по указанному заказу.
				// Склад не учитываем, поскольку количество и состав складов могут отличаться от указанного в заказе.
				// Также для грузов, которых на складе нет, возвращается возможность их получить из других этапов
				// того же мультимодального заказа.
				Запрос = Новый Запрос(
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	СУММА(уатМаршрутныйЛистЗаказы.Количество) КАК КоличествоТребуется,
				|	уатМаршрутныйЛистЗаказы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
				|	уатМаршрутныйЛистЗаказы.Номенклатура КАК ГрузовоеМесто,
				|	уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя,
				|	МАКСИМУМ(ВЫБОР
				|			КОГДА уатМаршрутныйЛистЗаказы.Выполнен
				|					И &УчитыватьПлановоеВремяВМаршрутныхЛистах
				|				ТОГДА уатМаршрутныйЛистЗаказы.ПрибытиеФакт
				|			КОГДА уатМаршрутныйЛистЗаказы.Выполнен
				|					И НЕ &УчитыватьПлановоеВремяВМаршрутныхЛистах
				|				ТОГДА уатМаршрутныйЛистЗаказы.ПрибытиеПлан
				|			ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
				|		КОНЕЦ) КАК НачалоОперацииФакт,
				|	МАКСИМУМ(ВЫБОР
				|			КОГДА уатМаршрутныйЛистЗаказы.Выполнен
				|					И &УчитыватьПлановоеВремяВМаршрутныхЛистах
				|				ТОГДА уатМаршрутныйЛистЗаказы.УбытиеФакт
				|			КОГДА уатМаршрутныйЛистЗаказы.Выполнен
				|					И НЕ &УчитыватьПлановоеВремяВМаршрутныхЛистах
				|				ТОГДА уатМаршрутныйЛистЗаказы.УбытиеПлан
				|			ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
				|		КОНЕЦ) КАК ОкончаниеОперацииФакт
				|ПОМЕСТИТЬ втДанныеМЛ
				|ИЗ
				|	Документ.уатМаршрутныйЛист.Заказы КАК уатМаршрутныйЛистЗаказы
				|ГДЕ
				|	уатМаршрутныйЛистЗаказы.ТипТочкиМаршрута = ЗНАЧЕНИЕ(Перечисление.уатТипыТочекМаршрута.Погрузка)
				|	И уатМаршрутныйЛистЗаказы.Ссылка = &Ссылка
				|
				|СГРУППИРОВАТЬ ПО
				|	уатМаршрутныйЛистЗаказы.ЕдиницаИзмерения,
				|	уатМаршрутныйЛистЗаказы.Номенклатура,
				|	уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя
				|
				|ИНДЕКСИРОВАТЬ ПО
				|	ЗаказГрузоотправителя
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ЕСТЬNULL(уатЭтапыМультимодальныхПеревозок_НовыйЭтап.Этап, втДанныеМЛ.ЗаказГрузоотправителя) КАК Этап,
				|	втДанныеМЛ.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя,
				|	втДанныеМЛ.ГрузовоеМесто КАК ГрузовоеМесто,
				|	втДанныеМЛ.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
				|	втДанныеМЛ.КоличествоТребуется КАК КоличествоТребуется,
				|	втДанныеМЛ.НачалоОперацииФакт КАК НачалоОперацииФакт,
				|	втДанныеМЛ.ОкончаниеОперацииФакт КАК ОкончаниеОперацииФакт
				|ПОМЕСТИТЬ втЗаказыСНовымиЭтапами
				|ИЗ
				|	втДанныеМЛ КАК втДанныеМЛ
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатЭтапыМультимодальныхПеревозок_уэ КАК уатЭтапыМультимодальныхПеревозок_ИсходныйЭтап
				|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.уатЭтапыМультимодальныхПеревозок_уэ КАК уатЭтапыМультимодальныхПеревозок_НовыйЭтап
				|			ПО уатЭтапыМультимодальныхПеревозок_ИсходныйЭтап.ЗаказГрузоотправителя = уатЭтапыМультимодальныхПеревозок_НовыйЭтап.ЗаказГрузоотправителя
				|		ПО втДанныеМЛ.ЗаказГрузоотправителя = уатЭтапыМультимодальныхПеревозок_ИсходныйЭтап.Этап
				|
				|ИНДЕКСИРОВАТЬ ПО
				|	ЗаказГрузоотправителя,
				|	ГрузовоеМесто
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	втЗаказыСНовымиЭтапами.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя,
				|	втЗаказыСНовымиЭтапами.ГрузовоеМесто КАК ГрузовоеМесто,
				|	втЗаказыСНовымиЭтапами.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
				|	втЗаказыСНовымиЭтапами.КоличествоТребуется КАК КоличествоТребуется,
				|	втЗаказыСНовымиЭтапами.Этап КАК Этап,
				|	ЕСТЬNULL(уатОстаткиГрузовНаСкладеКомплектации_уэОстатки.Склад, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) КАК Склад,
				|	ВЫБОР
				|		КОГДА втЗаказыСНовымиЭтапами.КоличествоТребуется < ЕСТЬNULL(уатОстаткиГрузовНаСкладеКомплектации_уэОстатки.КоличествоОстаток, 0)
				|			ТОГДА втЗаказыСНовымиЭтапами.КоличествоТребуется
				|		ИНАЧЕ ЕСТЬNULL(уатОстаткиГрузовНаСкладеКомплектации_уэОстатки.КоличествоОстаток, 0)
				|	КОНЕЦ КАК КоличествоНаСкладе,
				|	ВЫБОР
				|		КОГДА втЗаказыСНовымиЭтапами.ЗаказГрузоотправителя = втЗаказыСНовымиЭтапами.Этап
				|				И ЕСТЬNULL(уатОстаткиГрузовНаСкладеКомплектации_уэОстатки.Склад, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
				|			ТОГДА 1
				|		КОГДА втЗаказыСНовымиЭтапами.ЗаказГрузоотправителя <> втЗаказыСНовымиЭтапами.Этап
				|				И ЕСТЬNULL(уатОстаткиГрузовНаСкладеКомплектации_уэОстатки.Склад, ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)) <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
				|			ТОГДА 2
				|		ИНАЧЕ 3
				|	КОНЕЦ КАК Порядок,
				|	втЗаказыСНовымиЭтапами.ЗаказГрузоотправителя.Номер КАК НомерИсходногоЭтапа,
				|	втЗаказыСНовымиЭтапами.Этап.Номер КАК НомерНовогоЭтапа,
				|	втЗаказыСНовымиЭтапами.НачалоОперацииФакт КАК НачалоОперацииФакт,
				|	втЗаказыСНовымиЭтапами.ОкончаниеОперацииФакт КАК ОкончаниеОперацииФакт
				|ИЗ
				|	втЗаказыСНовымиЭтапами КАК втЗаказыСНовымиЭтапами
				|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.уатОстаткиГрузовНаСкладеКомплектации_уэ.Остатки КАК уатОстаткиГрузовНаСкладеКомплектации_уэОстатки
				|		ПО втЗаказыСНовымиЭтапами.Этап = уатОстаткиГрузовНаСкладеКомплектации_уэОстатки.ЗаказГрузоотправителя
				|			И (втЗаказыСНовымиЭтапами.ГрузовоеМесто = уатОстаткиГрузовНаСкладеКомплектации_уэОстатки.ГрузовоеМесто
				|				ИЛИ втЗаказыСНовымиЭтапами.ЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам))
				|			И (уатОстаткиГрузовНаСкладеКомплектации_уэОстатки.КоличествоОстаток > 0)
				|
				|УПОРЯДОЧИТЬ ПО
				|	Порядок
				|ИТОГИ
				|	МАКСИМУМ(КоличествоТребуется)
				|ПО
				|	ЗаказГрузоотправителя,
				|	ГрузовоеМесто,
				|	Склад
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ
				|	втДанныеМЛ.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
				|	втДанныеМЛ.ГрузовоеМесто КАК ГрузовоеМесто,
				|	втДанныеМЛ.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя,
				|	втДанныеМЛ.КоличествоТребуется КАК КоличествоТребуется
				|ИЗ
				|	втДанныеМЛ КАК втДанныеМЛ");
				
				Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
				Запрос.УстановитьПараметр("УчитыватьПлановоеВремяВМаршрутныхЛистах", Константы.уатУчетПланФактаПоМаршрутуВМаршрутныхЛистах.Получить());
				РезультатЗапроса = Запрос.ВыполнитьПакет();
				
				// Список всех заказанных грузовых мест нужен для отображения строк с пустым количеством в акте отгрузки
				//ТаблицаВсеЗаказы = Новый ТаблицаЗначений;
				//ТаблицаВсеЗаказы.Колонки.Добавить("ЗаказГрузоотправителя", Новый ОписаниеТипов("ДокументСсылка.уатЗаказГрузоотправителя"));
				//ТаблицаВсеЗаказы.Колонки.Добавить("ГрузовоеМесто", Новый ОписаниеТипов("СправочникСсылка.уатГрузовыеМеста_уэ, СправочникСсылка.Номенклатура"));
				//ТаблицаВсеЗаказы.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.уатТипыКонтейнеров_уэ, 
				//|	СправочникСсылка.уатВидыУпаковки_уэ, СправочникСсылка.ЕдиницыИзмерения, СправочникСсылка.КлассификаторЕдиницИзмерения"));
				ТаблицаВсеЗаказы = РезультатЗапроса[3].Выгрузить();
				//Пока ВыборкаВсеЗаказы.Следующий() Цикл
				//	НоваяСтрока = ТаблицаВсеЗаказы.Добавить();
				//	НоваяСтрока.ЗаказГрузоотправителя = ВыборкаВсеЗаказы.ЗаказГрузоотправителя;
				//	НоваяСтрока.ГрузовоеМесто = ВыборкаВсеЗаказы.ГрузовоеМесто;
				//	НоваяСтрока.ЕдиницаИзмерения = ВыборкаВсеЗаказы.ЕдиницаИзмерения;
				//КонецЦикла;
				ДополнительныеСвойства.Вставить("ТаблицаВсеЗаказы", ТаблицаВсеЗаказы);
				
				ВыборкаЗаказ = РезультатЗапроса[2].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
				
				ТаблицаЗаказы = Новый ТаблицаЗначений;
				ТаблицаЗаказы.Колонки.Добавить("ЗаказГрузоотправителя", Новый ОписаниеТипов("ДокументСсылка.уатЗаказГрузоотправителя"));
				ТаблицаЗаказы.Колонки.Добавить("Этап", Новый ОписаниеТипов("ДокументСсылка.уатЗаказГрузоотправителя"));
				ТаблицаЗаказы.Колонки.Добавить("ГрузовоеМесто", Новый ОписаниеТипов("СправочникСсылка.уатГрузовыеМеста_уэ, СправочникСсылка.Номенклатура"));
				ТаблицаЗаказы.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.уатТипыКонтейнеров_уэ, 
				|	СправочникСсылка.уатВидыУпаковки_уэ, СправочникСсылка.ЕдиницыИзмерения, СправочникСсылка.КлассификаторЕдиницИзмерения"));
				ТаблицаЗаказы.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
				ТаблицаЗаказы.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
				ТаблицаЗаказы.Колонки.Добавить("ЗаказВМаршрутномЛисте", Новый ОписаниеТипов("Булево"));
				ТаблицаЗаказы.Колонки.Добавить("НомерИсходногоЭтапа");
				ТаблицаЗаказы.Колонки.Добавить("НомерНовогоЭтапа");
				ТаблицаЗаказы.Колонки.Добавить("НачалоОперации",    Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
				ТаблицаЗаказы.Колонки.Добавить("ОкончаниеОперации", Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
				
				// Теперь выбираем этапы по мултьтимодальным заказам и количество грузов так, чтобы не взять лишнего.
				мсвСклады = Новый Массив; // Выходной массив складов для выбора
				Пока ВыборкаЗаказ.Следующий() Цикл
					ВыборкаГрузовоеМесто = ВыборкаЗаказ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
					Пока ВыборкаГрузовоеМесто.Следующий() Цикл
						ВыборкаСклад = ВыборкаГрузовоеМесто.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
						Пока ВыборкаСклад.Следующий() Цикл
							КоличествоТребуется = ВыборкаСклад.КоличествоТребуется;
							ВыборкаДетали = ВыборкаСклад.Выбрать();
							Пока ВыборкаДетали.Следующий() Цикл
								
								НоваяСтрока = ТаблицаЗаказы.Добавить();
								НоваяСтрока.ЗаказГрузоотправителя = ВыборкаДетали.ЗаказГрузоотправителя;
								НоваяСтрока.ГрузовоеМесто = ВыборкаДетали.ГрузовоеМесто;
								НоваяСтрока.ЕдиницаИзмерения = ВыборкаДетали.ЕдиницаИзмерения;
								НоваяСтрока.Склад = ВыборкаДетали.Склад;
								НоваяСтрока.Количество = ВыборкаДетали.ЗаказГрузоотправителя;
								НоваяСтрока.Этап = ВыборкаДетали.Этап;
								НоваяСтрока.ЗаказВМаршрутномЛисте = (НоваяСтрока.Этап = НоваяСтрока.ЗаказГрузоотправителя);
								НоваяСтрока.Количество = Мин(ВыборкаДетали.КоличествоНаСкладе, КоличествоТребуется);
								НоваяСтрока.НомерИсходногоЭтапа = ВыборкаДетали.НомерИсходногоЭтапа;
								НоваяСтрока.НомерНовогоЭтапа = ВыборкаДетали.НомерНовогоЭтапа;
								НоваяСтрока.НачалоОперации = ВыборкаДетали.НачалоОперацииФакт;
								НоваяСтрока.ОкончаниеОперации = ВыборкаДетали.ОкончаниеОперацииФакт;
								КоличествоТребуется = КоличествоТребуется - НоваяСтрока.Количество;
								
								Если ЗначениеЗаполнено(НоваяСтрока.Склад) И мсвСклады.Найти(НоваяСтрока.Склад) = Неопределено Тогда
									мсвСклады.Добавить(НоваяСтрока.Склад);
								КонецЕсли;
								Если Не КоличествоТребуется > 0 Тогда
									Прервать;
								КонецЕсли;
							КонецЦикла;
						КонецЦикла;
					КонецЦикла;
				КонецЦикла;
				
				ДополнительныеСвойства.Вставить("ТаблицаЗаказы", ТаблицаЗаказы);
				ДополнительныеСвойства.Вставить("мсвСклады", мсвСклады);
				Если ТаблицаЗаказы.Количество() = 0 Тогда
					ДополнительныеСвойства.Вставить("ВсеГрузыПереданыСоСклада", Истина);
				КонецЕсли;
				
				Если мсвСклады.Количество() <= 1 Тогда 
					// Всего один склад, заполняем документ сразу по нему.
					// Или остатков на складе вообще нет, и складов 0.
					// Вопрос про изменение этапов тоже задавать не надо.
					Дата        = ТекущаяДата();
					ВидОперации = Перечисления.уатВидыОперацийАктОтгрузки_уэ.ВРейс;
					Организация = ДанныеЗаполнения.Организация;
					
					Если мсвСклады.Количество() = 1 Тогда
						Склад = мсвСклады[0];
						НайденныеСтроки = ТаблицаЗаказы.НайтиСтроки(Новый Структура("Склад", Склад));
						Если НайденныеСтроки.Количество() > 0 Тогда
							НачалоОперации = НайденныеСтроки[0].НачалоОперации;
							ОкончаниеОперации = НайденныеСтроки[0].ОкончаниеОперации;
						КонецЕсли;
					КонецЕсли;
					флРазделятьПланФакт = ПолучитьФункциональнуюОпцию("уатРазделятьПланФактВСкладскихАктах_уэ");
					Для Каждого ТекСтрокаОперации Из ДополнительныеСвойства.ТаблицаЗаказы Цикл
						НоваяСтрока = Грузы.Добавить();
						НоваяСтрока.Заказ = ТекСтрокаОперации.ЗаказГрузоотправителя;
						НоваяСтрока.ГрузовоеМесто = ТекСтрокаОперации.ГрузовоеМесто;
						НоваяСтрока.ЕдиницаИзмерения = ТекСтрокаОперации.ЕдиницаИзмерения;
						Если флРазделятьПланФакт Тогда
							НоваяСтрока.КоличествоПлан = ТекСтрокаОперации.Количество;
						Иначе
							НоваяСтрока.Количество = ТекСтрокаОперации.Количество;
						КонецЕсли;
						НоваяСтрока.Статус = Справочники.уатСтатусы_уэ.ВыданСоСклада;
					КонецЦикла;
					ЗаполнитьВесоОбъемныеПоказателиПлан();
					
					// Добавление строк с нулевым количеством.
					СтруктураПоиска = Новый Структура("Заказ, ГрузовоеМесто");
					Для Каждого СтрокаТаблицы Из ТаблицаВсеЗаказы Цикл
						СтруктураПоиска.Заказ = СтрокаТаблицы.ЗаказГрузоотправителя;
						СтруктураПоиска.ГрузовоеМесто = СтрокаТаблицы.ГрузовоеМесто;
						Если Грузы.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
							НоваяСтрока = Грузы.Добавить();
							НоваяСтрока.Заказ = СтрокаТаблицы.ЗаказГрузоотправителя;
							НоваяСтрока.ГрузовоеМесто = СтрокаТаблицы.ГрузовоеМесто;
							НоваяСтрока.ЕдиницаИзмерения = СтрокаТаблицы.ЕдиницаИзмерения;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
		Иначе //Программное создание: ДокОбъектАкт.Заполнить(МаршрутныйЛистСсылка)
			Дата                = ТекущаяДата();
			ВидОперации         = Перечисления.уатВидыОперацийАктОтгрузки_уэ.ВРейс;
			Организация         = ДанныеЗаполнения.Организация;
			ДокументОснование   = ДанныеЗаполнения;
			МаршрутныйЛист      = ДанныеЗаполнения;
			
			//Для Каждого ТекСтрокаОперации Из ДанныеЗаполнения.Заказы Цикл
			//	Если ТекСтрокаОперации.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка
			//		И (ТекСтрокаОперации.ЗаказГрузоотправителя.ВидДоставки = Перечисления.уатВидыДоставки_уэ.СкладДверь
			//		ИЛИ ТекСтрокаОперации.ЗаказГрузоотправителя.ВидДоставки = Перечисления.уатВидыДоставки_уэ.СкладСклад) Тогда
			//		
			//		НоваяСтрока = Грузы.Добавить();
			//		НоваяСтрока.Заказ = ТекСтрокаОперации.ЗаказГрузоотправителя;
			//		НоваяСтрока.ГрузовоеМесто = ТекСтрокаОперации.Номенклатура;
			//		НоваяСтрока.ЕдиницаИзмерения = ТекСтрокаОперации.ЕдиницаИзмерения;
			//		НоваяСтрока.Количество 	 = ТекСтрокаОперации.Количество;
			//	КонецЕсли;
			//КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.уатАктПриемки_уэ") Тогда
		Дата              = ТекущаяДата();
		ВидОперации       = Перечисления.уатВидыОперацийАктОтгрузки_уэ.Грузополучателю;
		Организация       = ДанныеЗаполнения.Организация;
		ДокументОснование = ДанныеЗаполнения;
		Склад             = ДанныеЗаполнения.Склад;
		
		//Для Каждого ТекСтрокаОперации Из ДанныеЗаполнения.Грузы Цикл
		//	НоваяСтрока = Грузы.Добавить();
		//	НоваяСтрока.Заказ = ТекСтрокаОперации.Заказ;
		//	НоваяСтрока.ГрузовоеМесто = ТекСтрокаОперации.ГрузовоеМесто;
		//	НоваяСтрока.ЕдиницаИзмерения = ТекСтрокаОперации.ЕдиницаИзмерения;
		//	НоваяСтрока.Количество 	 = ТекСтрокаОперации.Количество;
		//КонецЦикла;
		
		Если ДополнительныеСвойства.Свойство("ИнтерактивныйВвод") Тогда
			// общий текст запроса, возвращающий грузы, еще не переданные по указанному заказу
			Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ТаблицаЗаказы.Заказ КАК Заказ,
			|	ТаблицаЗаказы.ГрузовоеМесто КАК ГрузовоеМесто,
			|	ТаблицаЗаказы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	ТаблицаЗаказы.Количество КАК Количество,
			|	ТаблицаЗаказы.ВесБрутто КАК ВесБрутто,
			|	ТаблицаЗаказы.Объем КАК Объем,
			|	ТаблицаЗаказы.КоличествоМест КАК КоличествоМест,
			|	ВЫБОР
			|		КОГДА ТаблицаЗаказы.Статус = ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.ДоставленНаСклад)
			|			ТОГДА ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.ВыданСоСклада)
			|		ИНАЧЕ ТаблицаЗаказы.Статус
			|	КОНЕЦ КАК Статус
			|ПОМЕСТИТЬ уатЗаказы
			|ИЗ
			|	Документ.уатАктПриемки_уэ.Грузы КАК ТаблицаЗаказы
			|ГДЕ
			|	ТаблицаЗаказы.Ссылка = &АктПриемки
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	уатЗаказыГрузоотправителейОстаткиИОбороты.Заказ КАК Заказ,
			|	уатЗаказыГрузоотправителейОстаткиИОбороты.ГрузовоеМесто КАК ГрузовоеМесто,
			|	уатЗаказыГрузоотправителейОстаткиИОбороты.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	ВЫБОР
			|		КОГДА уатЗаказыГрузоотправителейОстаткиИОбороты.Количество < уатОстаткиГрузовНаСкладеКомплектации_уэОстатки.КоличествоОстаток
			|			ТОГДА уатЗаказыГрузоотправителейОстаткиИОбороты.Количество
			|		ИНАЧЕ уатОстаткиГрузовНаСкладеКомплектации_уэОстатки.КоличествоОстаток
			|	КОНЕЦ КАК Количество,
			|	уатЗаказыГрузоотправителейОстаткиИОбороты.Количество КАК КоличествоАктаПоступления,
			|	уатЗаказыГрузоотправителейОстаткиИОбороты.ВесБрутто КАК ВесБруттоАктаПоступления,
			|	уатЗаказыГрузоотправителейОстаткиИОбороты.Объем КАК ОбъемАктаПоступления,
			|	уатЗаказыГрузоотправителейОстаткиИОбороты.КоличествоМест КАК КоличествоМестАктаПоступления,
			|	уатЗаказыГрузоотправителейОстаткиИОбороты.Статус КАК Статус
			|ПОМЕСТИТЬ втГрузы
			|ИЗ
			|	уатЗаказы КАК уатЗаказыГрузоотправителейОстаткиИОбороты
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.уатОстаткиГрузовНаСкладеКомплектации_уэ.Остатки(, Склад = &Склад) КАК уатОстаткиГрузовНаСкладеКомплектации_уэОстатки
			|		ПО уатЗаказыГрузоотправителейОстаткиИОбороты.Заказ = уатОстаткиГрузовНаСкладеКомплектации_уэОстатки.ЗаказГрузоотправителя
			|			И (уатЗаказыГрузоотправителейОстаткиИОбороты.ГрузовоеМесто = уатОстаткиГрузовНаСкладеКомплектации_уэОстатки.ГрузовоеМесто
			|				ИЛИ уатЗаказыГрузоотправителейОстаткиИОбороты.Заказ.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам))
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	втГрузы.Заказ КАК Заказ,
			|	втГрузы.ГрузовоеМесто КАК ГрузовоеМесто,
			|	втГрузы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
			|	втГрузы.Количество КАК Количество,
			|	ВЫБОР
			|		КОГДА втГрузы.КоличествоАктаПоступления = 0
			|			ТОГДА 0
			|		ИНАЧЕ втГрузы.ВесБруттоАктаПоступления / втГрузы.КоличествоАктаПоступления * втГрузы.Количество
			|	КОНЕЦ КАК ВесБрутто,
			|	ВЫБОР
			|		КОГДА втГрузы.КоличествоАктаПоступления = 0
			|			ТОГДА 0
			|		ИНАЧЕ втГрузы.ОбъемАктаПоступления / втГрузы.КоличествоАктаПоступления * втГрузы.Количество
			|	КОНЕЦ КАК Объем,
			|	ВЫБОР
			|		КОГДА втГрузы.КоличествоАктаПоступления = 0
			|			ТОГДА 0
			|		ИНАЧЕ втГрузы.КоличествоМестАктаПоступления / втГрузы.КоличествоАктаПоступления * втГрузы.Количество
			|	КОНЕЦ КАК КоличествоМест,
			|	втГрузы.Статус КАК Статус
			|ИЗ
			|	втГрузы КАК втГрузы");
			Запрос.УстановитьПараметр("АктПриемки", ДанныеЗаполнения);
			Запрос.УстановитьПараметр("Склад", Склад);
			тблЗапрос = Запрос.Выполнить().Выгрузить();
			Если ПолучитьФункциональнуюОпцию("уатРазделятьПланФактВСкладскихАктах_уэ") Тогда
				тблЗапрос.Колонки.Количество.Имя = "КоличествоПлан";
				тблЗапрос.Колонки.Объем.Имя = "ОбъемПлан";
				тблЗапрос.Колонки.ВесБрутто.Имя = "ВесБруттоПлан";
				тблЗапрос.Колонки.КоличествоМест.Имя = "КоличествоМестПлан";
			КонецЕсли;
			Грузы.Загрузить(тблЗапрос);
			Если тблЗапрос.Количество() = 0 Тогда
				ДополнительныеСвойства.Вставить("ВсеГрузыПереданыСоСклада", Истина);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийАктОтгрузки_уэ.ВРейсВПункте") Тогда
		ИмяНеПроверяемогоРеквизита = "Склад";
	Иначе
		ИмяНеПроверяемогоРеквизита = "Пункт";
	КонецЕсли;
	уатОбщегоНазначенияСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, ИмяНеПроверяемогоРеквизита);
	
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийАктОтгрузки_уэ.Грузополучателю")
		Или ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийАктОтгрузки_уэ.ПрочееСписание") Тогда
		уатОбщегоНазначенияСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "МаршрутныйЛист");
	КонецЕсли;
	
	Если ОперацияВыполнена Тогда
		ПроверяемыеРеквизиты.Добавить("НачалоОперации");
		ПроверяемыеРеквизиты.Добавить("ОкончаниеОперации");
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	ЕстьРасхождения = Ложь;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ВыполнитьОперацию() Экспорт
	
	СтатусВыполненияПредыдущееЗначение = СтатусВыполнения;
	НачалоОперацииПредыдущееЗначение = НачалоОперации;
	ОкончаниеОперацииПредыдущееЗначение = ОкончаниеОперации;
	Попытка
		ОперацияВыполнена = Истина;
		СтатусВыполнения = Справочники.уатСтатусы_уэ.Выполнен;
		Если Не ЗначениеЗаполнено(НачалоОперации) Тогда
			НачалоОперации = ТекущаяДата();
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ОкончаниеОперации) Тогда
			ОкончаниеОперации = ТекущаяДата();
		КонецЕсли;
		Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ОперацияВыполнена = Ложь;
		СтатусВыполнения = СтатусВыполненияПредыдущееЗначение;
		НачалоОперации = НачалоОперацииПредыдущееЗначение;
		ОкончаниеОперации = ОкончаниеОперацииПредыдущееЗначение;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

// Процедура переносит плановые показатели объема, веса и количества мест из Заказов на ТС.
Процедура ЗаполнитьВесоОбъемныеПоказателиПлан() Экспорт
	Если ПолучитьФункциональнуюОпцию("уатРазделятьПланФактВСкладскихАктах_уэ") Тогда
		ТаблицаГрузы = Грузы.Выгрузить(,"ГрузовоеМесто, Заказ, КоличествоПлан, ЕдиницаИзмерения, НомерСтроки");
		ТаблицаПоказателиПлан = Документы.уатАктПриемки_уэ.ПолучитьВесоОбъемныеПоказателиПлан(ТаблицаГрузы);
		
		Для Каждого СтрокаТовара Из ТаблицаПоказателиПлан Цикл
			ТекСтрока = Грузы[СтрокаТовара.НомерСтроки-1];
			ТекСтрока.ВесБруттоПлан      = СтрокаТовара.Вес;
			ТекСтрока.ОбъемПлан          = СтрокаТовара.Объем;
			ТекСтрока.КоличествоМестПлан = СтрокаТовара.КоличествоМест;
		КонецЦикла;
	Иначе
		ТаблицаГрузы = Грузы.Выгрузить(,"ГрузовоеМесто, Заказ, Количество, ЕдиницаИзмерения, НомерСтроки");
		ТаблицаГрузы.Колонки.Количество.Имя = "КоличествоПлан";
		ТаблицаПоказателиПлан = Документы.уатАктПриемки_уэ.ПолучитьВесоОбъемныеПоказателиПлан(ТаблицаГрузы);
		Для Каждого СтрокаТовара Из ТаблицаПоказателиПлан Цикл
			ТекСтрока = Грузы[СтрокаТовара.НомерСтроки-1];
			ТекСтрока.ВесБрутто      = СтрокаТовара.Вес;
			ТекСтрока.Объем          = СтрокаТовара.Объем;
			ТекСтрока.КоличествоМест = СтрокаТовара.КоличествоМест;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#КонецЕсли

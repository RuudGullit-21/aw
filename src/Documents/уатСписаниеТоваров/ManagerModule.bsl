#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	Настройки.ПриПолученииСлужебныхРеквизитов = Ложь;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатСписаниеТоваров";
	КомандаПечати.Идентификатор = "Накладная";
	КомандаПечати.Представление = НСтр("en='Goods write-off';ru='Списание товаров'");
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатСписаниеТоваров";
	КомандаПечати.Идентификатор = "ТОРГ16";
	КомандаПечати.Представление = НСтр("en='TORG-16 (Write-off cases)';ru='ТОРГ-16 (Акт о списании товаров)'");
	
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор  = "Реестр";
	КомандаПечати.Представление  = НСтр("en='Document register';ru='Реестр документов'");
	КомандаПечати.ЗаголовокФормы = НСтр("en='Registry of documents ""Goods write-off""';ru='Реестр документов ""Списание товаров""'");
	КомандаПечати.Обработчик     = "уатОбщегоНазначенияТиповыеКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм     = "ФормаСписка";
	КомандаПечати.Порядок        = 100;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр).
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной
//                                                            параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной
//                                            параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если НЕ уатОбщегоНазначенияСервер.РазрешениеПечатиНепроведенногоДокумента(МассивОбъектов) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Накладная") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Накладная",
			"Списание товаров", ПечатьСписаниеТоваров(МассивОбъектов, ОбъектыПечати));
			
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТОРГ16") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ТОРГ16",
			"ТОРГ-16 (Акт о списании товаров)", ПечатьТОРГ16(МассивОбъектов, ОбъектыПечати));
			
	КонецЕсли;
	
	уатОбщегоНазначенияСервер.УстановитьРедактированиеПечатныхФормДокумента(КоллекцияПечатныхФорм);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.УправлениеДоступом

// Позволяет переопределить ограничение, указанное в модуле менеджера объекта метаданных.
//
// Параметры:
//  Ограничение - Структура:
//    * Текст                             - Строка - ограничение доступа для пользователей.
//                                          Если пустая строка, значит, доступ разрешен.
//    * ТекстДляВнешнихПользователей      - Строка - ограничение доступа для внешних пользователей.
//                                          Если пустая строка, значит, доступ запрещен.
//    * ПоВладельцуБезЗаписиКлючейДоступа - Неопределено - определить автоматически.
//                                        - Булево - если Ложь, то всегда записывать ключи доступа,
//                                          если Истина, тогда не записывать ключи доступа,
//                                          а использовать ключи доступа владельца (требуется,
//                                          чтобы ограничение было строго по объекту-владельцу).
//   * ПоВладельцуБезЗаписиКлючейДоступаДляВнешнихПользователей - Неопределено, Булево - также
//                                          как у параметра ПоВладельцуБезЗаписиКлючейДоступа.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Подразделение)";
	
	Ограничение.ТекстДляВнешнихПользователей = Ограничение.Текст;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// СтандартныеПодсистемы.ВариантыОтчетов

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВариантыОтчетов

#КонецОбласти

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	
	Если уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД() Тогда
		флЯчеистыйСклад = Ложь;
	Иначе
		флЯчеистыйСклад = ПолучитьФункциональнуюОпцию("уатАдресноеХранение") = ИСТИНА
			И ДокументСсылка.Склад.АдресноеХранение;
	КонецЕсли;
		
	мЗапрос = Новый Запрос;
	мЗапрос.УстановитьПараметр("Ссылка"          , ДокументСсылка);
	мЗапрос.УстановитьПараметр("Склад"           , ДокументСсылка.Склад);
	мЗапрос.УстановитьПараметр("МоментВремени"   , СтруктураДополнительныеСвойства.ДляПроведения.МоментКонтроля);
	мЗапрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	мЗапрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаДокумента.Ссылка КАК Регистратор,
	|	ТаблицаДокумента.Ссылка.Дата КАК Период,
	|	ТаблицаДокумента.Ссылка.Склад КАК Склад,
	|	ТаблицаДокумента.Номенклатура КАК Номенклатура,
	|	ТаблицаДокумента.Количество * ЕСТЬNULL(ТаблицаДокумента.ЕдиницаИзмерения.Коэффициент, 1) / ТаблицаДокумента.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Количество,
	|	ТаблицаДокумента.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ПОМЕСТИТЬ ТаблицаДокументаТовары
	|ИЗ
	|	Документ.уатСписаниеТоваров.Товары КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ТаблицаДокументаТовары.Склад КАК Склад,
	|	НЕОПРЕДЕЛЕНО КАК Ячейка,
	|	ТаблицаДокументаТовары.Номенклатура КАК Номенклатура
	|ИЗ
	|	ТаблицаДокументаТовары КАК ТаблицаДокументаТовары";	
	
	Если НЕ уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД() Тогда
		мЗапрос.Текст = СтрЗаменить(мЗапрос.Текст, "НЕОПРЕДЕЛЕНО", "ТаблицаДокументаТовары.Склад.ТранзитнаяЯчейка");
	КонецЕсли;
	
	МассивРезультатов = мЗапрос.ВыполнитьПакет();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.уатПартииТоваровНаСкладах");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = МассивРезультатов[1];
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Склад", "Склад");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
	Если флЯчеистыйСклад Тогда 
		ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.уатТоварыВЯчейках");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = МассивРезультатов[1].Выгрузить();
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Склад", "Склад");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ячейка", "Ячейка");
	КонецЕсли;
	Блокировка.Заблокировать();

	мЗапрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТабНоменклатуры.Склад,
	|	ТабНоменклатуры.Номенклатура,
	|	ТабНоменклатуры.Количество,
	|	ТабНоменклатуры.Период
	|ИЗ 
	|	ТаблицаДокументаТовары КАК ТабНоменклатуры";
	
	ТаблицаПартий = уатПроведение.ПолучитьТаблицуПартийДляСписания(мЗапрос.Выполнить().Выгрузить(),
		уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументСсылка.Организация, "СпособОценкиМПЗ"),
		СтруктураДополнительныеСвойства.ДляПроведения.МоментКонтроля);
	
	ЗапросПартии = Новый Запрос();
	ЗапросПартии.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТабДанных.Склад КАК Склад,
	|	ТабДанных.Номенклатура КАК Номенклатура,
	|	ТабДанных.Партия КАК Партия,
	|	ТабДанных.Количество КАК Количество,
	|	ТабДанных.Стоимость КАК Стоимость,
	|	ТабДанных.СтоимостьУпр КАК СтоимостьУпр,
	|	ТабДанных.СуммаНДС КАК СуммаНДС
	|ПОМЕСТИТЬ ВремТаблицаПартий
	|ИЗ
	|	&ТаблицаПарам КАК ТабДанных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период КАК Период,
	|	&Регистратор КАК Регистратор,
	|	ТабДанных.Склад КАК Склад,
	|	ТабДанных.Партия КАК Партия,
	|	ТабДанных.Номенклатура КАК Номенклатура,
	|	ТабДанных.Количество КАК Количество,
	|	ТабДанных.Стоимость КАК Стоимость,
	|	ТабДанных.СтоимостьУпр КАК СтоимостьУпр,
	|	ТабДанных.СуммаНДС КАК СуммаНДС
	|ИЗ
	|	ВремТаблицаПартий КАК ТабДанных";
	
	ЗапросПартии.УстановитьПараметр("Период"         , ДокументСсылка.Дата);
	ЗапросПартии.УстановитьПараметр("ТаблицаПарам"   , ТаблицаПартий);
	ЗапросПартии.УстановитьПараметр("Регистратор"    , ДокументСсылка);

	МассивРезультатов = ЗапросПартии.ВыполнитьПакет();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПартии", МассивРезультатов[1].Выгрузить());
	
	Если флЯчеистыйСклад Тогда
		ЗапросЯчейки = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
		|	ТаблицаДокумента.Ссылка.Дата КАК Период,
		|	ТаблицаДокумента.Ссылка КАК Регистратор,
		|	ТаблицаДокумента.Ссылка.Склад КАК Склад,
		|	ТаблицаДокумента.Ссылка.Склад.ТранзитнаяЯчейка КАК Ячейка,
		|	ТаблицаДокумента.Номенклатура КАК Номенклатура,
		|	ТаблицаДокумента.Количество * ЕСТЬNULL(ТаблицаДокумента.ЕдиницаИзмерения.Коэффициент, 1) / ТаблицаДокумента.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Количество
		|ИЗ
		|	Документ.уатСписаниеТоваров.Товары КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка");
		ЗапросЯчейки.УстановитьПараметр("Ссылка", ДокументСсылка);
		тблТоварыВЯчейках = ЗапросЯчейки.Выполнить().Выгрузить(); 
		
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаТоварыВЯчейках", тблТоварыВЯчейках);
	КонецЕсли;
	
КонецПроцедуры // ИнициализироватьДанныеДокумента()

Процедура ВыполнитьКонтроль(ДокументСсылка, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь) Экспорт
	
	Заголовок = уатОбщегоНазначенияТиповые.уатПредставлениеДокументаПриПроведении(ДокументСсылка);
	
	мЗапрос = Новый Запрос;
	мЗапрос.МенеджерВременныхТаблиц = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц; 
	Если уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД() Тогда
		мЗапрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаДокумента.Номенклатура КАК Номенклатура,
		|	ТаблицаДокумента.Ссылка КАК Регистратор,
		|	ЕСТЬNULL(уатПартииТоваровНаСкладахОстатки.КоличествоОстаток, 0) КАК КоличествоОстаток
		|ИЗ
		|	Документ.уатСписаниеТоваров.Товары КАК ТаблицаДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.уатПартииТоваровНаСкладах.Остатки(
		|				&МоментВремени,
		|				Склад = &Склад
		|					И Номенклатура В
		|						(ВЫБРАТЬ
		|							ТабНоменклатуры.Номенклатура
		|						ИЗ
		|							Документ.уатСписаниеТоваров.Товары КАК ТабНоменклатуры
		|						ГДЕ
		|							ТабНоменклатуры.Ссылка = &Ссылка)) КАК уатПартииТоваровНаСкладахОстатки
		|		ПО ТаблицаДокумента.Номенклатура = уатПартииТоваровНаСкладахОстатки.Номенклатура
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка
		|	И ЕСТЬNULL(уатПартииТоваровНаСкладахОстатки.КоличествоОстаток, 0) < 0";
	Иначе
		мЗапрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаДокумента.Номенклатура КАК Номенклатура,
		|	ТаблицаДокумента.Ссылка КАК Регистратор,
		|	ЕСТЬNULL(уатПартииТоваровНаСкладахОстатки.КоличествоОстаток, 0) КАК КоличествоОстаток,
		|	ЕСТЬNULL(уатТоварыВЯчейкахОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЯчейка
		|ИЗ
		|	Документ.уатСписаниеТоваров.Товары КАК ТаблицаДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.уатПартииТоваровНаСкладах.Остатки(
		|				&МоментВремени,
		|				Склад = &Склад
		|					И Номенклатура В
		|						(ВЫБРАТЬ
		|							ТабНоменклатуры.Номенклатура
		|						ИЗ
		|							Документ.уатСписаниеТоваров.Товары КАК ТабНоменклатуры
		|						ГДЕ
		|							ТабНоменклатуры.Ссылка = &Ссылка)) КАК уатПартииТоваровНаСкладахОстатки
		|		ПО ТаблицаДокумента.Номенклатура = уатПартииТоваровНаСкладахОстатки.Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.уатТоварыВЯчейках.Остатки(
		|				&МоментВремени,
		|				Склад = &Склад
		|					И Ячейка = Склад.ТранзитнаяЯчейка
		|					И Номенклатура В
		|						(ВЫБРАТЬ
		|							ТабНоменклатуры.Номенклатура
		|						ИЗ
		|							Документ.уатСписаниеТоваров.Товары КАК ТабНоменклатуры
		|						ГДЕ
		|							ТабНоменклатуры.Ссылка = &Ссылка)) КАК уатТоварыВЯчейкахОстатки
		|		ПО ТаблицаДокумента.Номенклатура = уатТоварыВЯчейкахОстатки.Номенклатура
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка
		|	И (ЕСТЬNULL(уатПартииТоваровНаСкладахОстатки.КоличествоОстаток, 0) < 0
		|			ИЛИ ЕСТЬNULL(уатТоварыВЯчейкахОстатки.КоличествоОстаток, 0) < 0)";
	КонецЕсли;
	
	мЗапрос.УстановитьПараметр("Склад"        , ДокументСсылка.Склад);
	мЗапрос.УстановитьПараметр("Ссылка"       , ДокументСсылка);
	мЗапрос.УстановитьПараметр("МоментВремени", ДополнительныеСвойства.ДляПроведения.МоментКонтроля);
	
	Выборка = мЗапрос.Выполнить().Выбрать();
	
	Если НЕ уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД()	И ПолучитьФункциональнуюОпцию("уатАдресноеХранение")
		И ДокументСсылка.Склад.АдресноеХранение Тогда
		ТекстШаблона = "Обнаружен отрицательный остаток номенклатуры ""%1"" на складе ""%2"" (транзитная ячейка): %3";
	Иначе
		ТекстШаблона = "Обнаружен отрицательный остаток номенклатуры ""%1"" на складе ""%2"": %3";
	КонецЕсли;
	
	Если Выборка.Количество() тогда
		Пока Выборка.Следующий() Цикл
			ТекстНСТР = СтрШаблон(ТекстШаблона, Выборка.Номенклатура, мЗапрос.Параметры.Склад,
				?(уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД(), Выборка.КоличествоОстаток,
				Мин(Выборка.КоличествоОстаток, Выборка.КоличествоОстатокЯчейка)));
			уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, Отказ, Заголовок);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьКонтроль()

// Функция рассчитывает сумму списанную по текущей строке документа
//
// Параметры:
//  ТекСтрока	 - 	 - 
//  ТабДвижений	 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция РассчитатьСуммуСписания(ТекСтрока, ТабДвижений) Экспорт
	
	СтруктПоиска = Новый Структура;
	СтруктПоиска.Вставить( "Номенклатура",               ТекСтрока.Номенклатура);
	
	НаборСтрок = ТабДвижений.НайтиСтроки(СтруктПоиска);
	КолСписать = ТекСтрока.Количество;
	Сумма      = 0;
	
	//Для Каждого СтрокаДвиж Из НаборСтрок Цикл
	//	Если КолСписать >= ТекСтрока.Количество Тогда
	//		Сумма      = Сумма      + СтрокаДвиж.Стоимость;
	//		КолСписать = КолСписать - СтрокаДвиж.Количество;
	//		СтрокаДвиж.Стоимость  = 0;
	//		СтрокаДвиж.Количество = 0;
	//	Иначе
	//		Если Не СтрокаДвиж.Количество = 0 Тогда
	//			СумСписать = Окр( СтрокаДвиж.Стоимость * КолСписать / СтрокаДвиж.Количество, 2, 1);
	//			Сумма      = Сумма + СумСписать;
	//			СтрокаДвиж.Стоимость  = СтрокаДвиж.Стоимость  - СумСписать;
	//			СтрокаДвиж.Количество = СтрокаДвиж.Количество - КолСписать;
	//		Иначе
	//			Сумма = Сумма + СтрокаДвиж.Стоимость;
	//			СтрокаДвиж.Стоимость = 0;
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЦикла;
	
	Для Каждого СтрокаДвиж Из НаборСтрок Цикл
		Сумма = Сумма + СтрокаДвиж.Стоимость;
	КонецЦикла;
	
	Возврат Сумма;
	
КонецФункции // РассчитатьСуммуСписания()

// Получает дополнительные реквизиты для отображения в отчете "Реестр документов"
// 
// Возвращаемое значение:
//  Структура - доп. реквизитов
//
Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура("Информация", "Склад");
	Возврат Результат;
	
КонецФункции

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Функция ПечатьСписаниеТоваров(МассивОбъектов, ОбъектыПечати)
	
	мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_СписаниеТоваров";
	
	ПервыйДокумент = Истина;
	
	Для Каждого ТекущийДокумент Из МассивОбъектов Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		РежимВыводаКодаВДокументах = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ПользователиКлиентСервер.АвторизованныйПользователь(), 
			ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.РежимВыводаКодаВДокументах"));
		ТекстКодАртикул = РежимВыводаКодаВДокументах;
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент.Ссылка);
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СписаниеТоваров.Номер,
		|	СписаниеТоваров.Дата,
		|	СписаниеТоваров.Организация КАК Организация,
		|	СписаниеТоваров.Организация.Представление,
		|	СписаниеТоваров.Подразделение,
		|	СписаниеТоваров.Подразделение.Представление,
		|	СписаниеТоваров.Склад,
		|	СписаниеТоваров.Склад.Представление,
		|	СписаниеТоваров.Товары.(
		|		Номенклатура,
		|		Номенклатура.НаименованиеПолное КАК Товар,
		|		Номенклатура."+ ТекстКодАртикул + " КАК Код,
		|		Количество,
		|		ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения
		|	)
		|ИЗ
		|	Документ.уатСписаниеТоваров КАК СписаниеТоваров
		|ГДЕ
		|	СписаниеТоваров.Ссылка = &ТекущийДокумент
		|
		|УПОРЯДОЧИТЬ ПО
		|	СписаниеТоваров.Товары.НомерСтроки";
		
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();
		ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
		
		ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СписаниеТоваров_Накладная";
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.уатСписаниеТоваров.ПФ_MXL_Накладная");
		
		// Печать штрихкода
		Если уатЗащищенныеФункцииСервер_проф.ИспользоватьШтрихкодированиеОбъекта(ТекущийДокумент) Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокШтрихкод");
			уатЗащищенныеФункцииСервер_проф.ОтобразитьШКнаПФ(ОбластьМакета, ТекущийДокумент);
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		// Выводим шапку накладной
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(Шапка, НСтр("en='Consignment on write-off';ru='Накладная на списание'"));
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("РеквизитыОрганизации");
		СписокТребуемыхПараметров	= "НаименованиеДляПечатныхФорм";
		СведенияОбОбъекте			= уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(Шапка.Организация);
		ОбластьМакета.Параметры.ПредставлениеОрганизации	= уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(СведенияОбОбъекте, СписокТребуемыхПараметров);
		ОбластьМакета.Параметры.ПредставлениеПодразделения	= Шапка.ПодразделениеПредставление;
		ОбластьМакета.Параметры.ПредставлениеСклада = Шапка.СкладПредставление;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ВыводитьКоды = Истина;
		Колонка         = РежимВыводаКодаВДокументах;

		
		ДокОбъект = ТекущийДокумент.ПолучитьОбъект();
		ДокОбъект.Движения.уатПартииТоваровНаСкладах.Прочитать();
		ТабДвижений = ДокОбъект.Движения.уатПартииТоваровНаСкладах.Выгрузить();
		
		ОбластьНомера = Макет.ПолучитьОбласть("ШапкаТаблицы|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("ШапкаТаблицы|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("ШапкаТаблицы|Данные");
		
		ТабличныйДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
			ТабличныйДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		ОбластьКолонкаТовар = Макет.Область("Товар");
		Если Не ВыводитьКоды Тогда
			ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки
			+ Макет.Область("КолонкаКодов").ШиринаКолонки;
		КонецЕсли;
		
		ОбластьНомера = Макет.ПолучитьОбласть("Строка|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("Строка|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("Строка|Данные");
		
		СуммаИтого = 0;
		Ном        = 0;
		
		// Товары
		Пока ВыборкаСтрокТовары.Следующий() Цикл
			
			Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
				ТекстНСТР = НСтр("en='In one of the rows value of products and services not filled - string when printing is missing.';ru='В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.'");
				уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, , , СтатусСообщения.Важное);
				Продолжить;
			КонецЕсли;
			
			Ном = Ном + 1;
			
			ОбластьНомера.Параметры.Заполнить(ВыборкаСтрокТовары);
			ОбластьНомера.Параметры.НомерСтроки = Ном;
			ТабличныйДокумент.Вывести(ОбластьНомера);
			
			Если ВыводитьКоды Тогда
				Если ВыборкаСтрокТовары.Код = "" Тогда
					ОбластьКодов.Параметры.Артикул = НСтр("en='-';ru='-'");
				Иначе
					ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Код;
				КонецЕсли;
				ТабличныйДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			
			ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
			ОбластьДанных.Параметры.Товар = ВыборкаСтрокТовары.Товар;
			ОбластьДанных.Параметры.ЕдиницаХранения = ВыборкаСтрокТовары.Номенклатура.ЕдиницаХраненияОстатков;
			
			ОбластьДанных.Параметры.Сумма = РассчитатьСуммуСписания(ВыборкаСтрокТовары, ТабДвижений);
			ОбластьДанных.Параметры.Цена  = Окр(ОбластьДанных.Параметры.Сумма / ОбластьДанных.Параметры.Количество, 2, 1);
			
			ТабличныйДокумент.Присоединить(ОбластьДанных);
			
			СуммаИтого = СуммаИтого + ОбластьДанных.Параметры.Сумма;
			
		КонецЦикла;
		
		// Вывести Итого
		ОбластьНомера = Макет.ПолучитьОбласть("Итого|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("Итого|КолонкаКодов");
		ОбластьДанных = Макет.ПолучитьОбласть("Итого|Данные");
		
		ТабличныйДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ОбластьДанных.Параметры.Всего = уатОбщегоНазначенияТиповые.уатФорматСумм(СуммаИтого);
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		
		// Вывести Сумму прописью
		ОбластьМакета                          = Макет.ПолучитьОбласть("СуммаПрописью");
		ОбластьМакета.Параметры.ИтоговаяСтрока = "Всего наименований " + ВыборкаСтрокТовары.Количество()
		+ ", на сумму " + уатОбщегоНазначенияТиповые.уатФорматСумм(СуммаИтого, мВалютаРегламентированногоУчета);
		ОбластьМакета.Параметры.СуммаПрописью  = уатОбщегоНазначенияТиповые.уатСформироватьСуммуПрописью(СуммаИтого, мВалютаРегламентированногоУчета);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Вывести подписи
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ОбластьМакета.Параметры.Отпустил = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ТекущийДокумент.Отпустил);
		ОбластьМакета.Параметры.Получил  = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ТекущийДокумент.Получил);
		ТабличныйДокумент.Вывести(ОбластьМакета);
				
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ТекущийДокумент);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатнаяФорма()

Функция ПечатьТОРГ16(МассивОбъектов, ОбъектыПечати)
	
	мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_СписаниеТоваров";
	
	ПервыйДокумент = Истина;
	
	Для Каждого ТекущийДокумент Из МассивОбъектов Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ВалютаПечати = мВалютаРегламентированногоУчета;
		Запрос       = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент.Ссылка);
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Номер КАК НомерДокумента,
		|	Дата  КАК ДатаДокумента,
		|	Организация,
		|	Склад,
		|	Склад.Представление КАК ПредставлениеСклада,
		|	Константы.ВалютаРегламентированногоУчета КАК ВалютаДокумента,
		|	Товары.(
		|		Номенклатура,
		|		Номенклатура.НаименованиеПолное КАК ТоварНаименование,
		|		Номенклатура.Код КАК ТоварКод,
		|		Количество,
		|		ЕдиницаИзмерения.Представление               КАК ЕдиницаИзмеренияНаименование,
		|		ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКодПоОКЕИ
		|	)
		|ИЗ
		|	Документ.уатСписаниеТоваров КАК СписаниеТоваров, Константы
		|
		|ГДЕ
		|	СписаниеТоваров.Ссылка = &ТекущийДокумент
		|
		|УПОРЯДОЧИТЬ ПО
		|	Товары.НомерСтроки
		|";
		
		ДокОбъект = ТекущийДокумент.ПолучитьОбъект();
		ДокОбъект.Движения.уатПартииТоваровНаСкладах.Прочитать();
		ТабДвижений = ДокОбъект.Движения.уатПартииТоваровНаСкладах.Выгрузить();
		
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();
		
		тзПартии = Новый ТаблицаЗначений();
		тзПартии.Колонки.Добавить("Партия");
		тзПартии.Колонки.Добавить("ДатаПоступленияТовара");
		тзПартии.Колонки.Добавить("ДатаСписанияТовара");
		тзПартии.Колонки.Добавить("ТоварнаяНакладнаяНомер");
		тзПартии.Колонки.Добавить("ТоварнаяНакладнаяДата");
		Для Каждого ТекСтрока Из ТабДвижений Цикл
			Партия       = ТекСтрока.Партия;
			Если НЕ ЗначениеЗаполнено(Партия) Тогда
				Продолжить;
			КонецЕсли;
			СтрокиПартий = тзПартии.НайтиСтроки(Новый Структура("Партия", Партия));
			Если СтрокиПартий.Количество() > 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = тзПартии.Добавить();
			НоваяСтрока.Партия = Партия;
			НоваяСтрока.ДатаПоступленияТовара  = Партия.Дата;
			НоваяСтрока.ДатаСписанияТовара     = Шапка.ДатаДокумента;
			НоваяСтрока.ТоварнаяНакладнаяНомер = Партия.Номер;
			НоваяСтрока.ТоварнаяНакладнаяДата  = Партия.Дата;
		КонецЦикла;
		тзПартии.Сортировать("ДатаПоступленияТовара");
		
		Партии = ТабДвижений.ВыгрузитьКолонку("Партия");
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();
		
		ТабличныйДокумент.ИмяПараметровПечати = "ПараметрыПечати_СписаниеТоваров_ТОРГ16";
		Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_ТОРГ16");
		
		// Выводим общие реквизиты шапки
		ОписаниеОрганизации = уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(Шапка.Организация, Шапка.ДатаДокумента);
		ОбластьМакета       = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		
		ПечатьПрефиксовВключена = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ТекущийДокумент.Организация, ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ВыводитьПрефиксПриПечати"));
		Если ПечатьПрефиксовВключена Тогда
			ОбластьМакета.Параметры.НомерДокумента = ТекущийДокумент.Номер;
		Иначе
			ОбластьМакета.Параметры.НомерДокумента = уатОбщегоНазначенияКлиентСервер.НомерДокументаНаПечать(ТекущийДокумент.Номер, Истина, Истина);
		КонецЕсли;
		
		ОбластьМакета.Параметры.ДатаДокумента            = Шапка.ДатаДокумента;
		ОбластьМакета.Параметры.ПредставлениеОрганизации = уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(ОписаниеОрганизации);
		ОбластьМакета.Параметры.ОрганизацияПоОКПО        = ОписаниеОрганизации.КодПоОКПО;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		СтрокНаСтранице = 23;
		СтрокШапки      = 11;
		СтрокПодвала    = 0;
		НомерСтраницы   = 1;
		Ном             = 0;
		
		ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
		КоличествоСтрок    = ВыборкаСтрокТовары.Количество();
		
		Если КоличествоСтрок = 1 Тогда
			ПереноситьПоследнююСтроку = 0;
		Иначе
			ЦелыхСтраницСПодвалом     = Цел((СтрокШапки + КоличествоСтрок + СтрокПодвала) / СтрокНаСтранице);
			ЦелыхСтраницБезПодвала    = Цел((СтрокШапки + КоличествоСтрок - 1) / СтрокНаСтранице);
			ПереноситьПоследнююСтроку = ЦелыхСтраницСПодвалом - ЦелыхСтраницБезПодвала;
		КонецЕсли;
		
		// Выводим заголовок таблицы
		ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицыПервогоЛиста");
		ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
		
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаПервогоЛиста");
		
		// Товары
		Для Каждого ТекСтрока Из тзПартии Цикл
			
			Ном = Ном + 1;
			// Начинаем новую страницу, если предыдущая строка была последней на странице
			// или пора переносить последнюю строку на последнюю страницу с подвалом.
			ЦелаяСтраница = (СтрокШапки + Ном - 1) / СтрокНаСтранице;
			Если (ЦелаяСтраница = Цел(ЦелаяСтраница))
				или ((ПереноситьПоследнююСтроку = 1) и (Ном = КоличествоСтрок)) Тогда
				
				ИтогоСтоимостьПоСтранице = 0;
				НомерСтраницы            = НомерСтраницы + 1;
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
			КонецЕсли;
			
			ОбластьМакета.Параметры.Заполнить(ТекСтрока);
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЦикла;
		
		СтрокНаСтранице = 27;
		СтрокШапки      = 5;
		СтрокПодвала    = 11;
		НомерСтраницы   = 1;
		Ном             = 0;
		
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		
		НомерСтраницы                            = НомерСтраницы + 1;
		ЗаголовокТаблицы                         = Макет.ПолучитьОбласть("ЗаголовокТаблицыВторогоЛиста");
		ЗаголовокТаблицы.Параметры.НомерСтраницы = НСтр("en='Page ';ru='Страница '") + НомерСтраницы; 
		ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
		
		Если КоличествоСтрок = 1 Тогда
			ПереноситьПоследнююСтроку = 0;
		Иначе
			ЦелыхСтраницСПодвалом     = Цел((СтрокШапки + КоличествоСтрок + СтрокПодвала) / СтрокНаСтранице);
			ЦелыхСтраницБезПодвала    = Цел((СтрокШапки + КоличествоСтрок - 1) / СтрокНаСтранице);
			ПереноситьПоследнююСтроку = ЦелыхСтраницСПодвалом - ЦелыхСтраницБезПодвала;
		КонецЕсли;
		
		ИтогоСтоимость = 0;
		
		// Выводим многострочную часть документа
		ОбластьМакета = Макет.ПолучитьОбласть("СтрокаВторогоЛиста");
		
		// Товары
		ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
		Пока ВыборкаСтрокТовары.Следующий() Цикл
			
			Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
				ТекстНСТР = НСтр("en='In one of the rows value of products and services not filled - string when printing is missing.';ru='В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.'");
				уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, , , СтатусСообщения.Важное);
				Продолжить;
			КонецЕсли;
			
			Ном = Ном + 1;
			
			// Начинаем новую страницу, если предыдущая строка была последней на странице
			// или пора переносить последнюю строку на последнюю страницу с подвалом.
			ЦелаяСтраница = (СтрокШапки + Ном - 1) / СтрокНаСтранице;
			
			Если (ЦелаяСтраница = Цел(ЦелаяСтраница))
				или ((ПереноситьПоследнююСтроку = 1) и (Ном = КоличествоСтрок)) Тогда
				
				ИтогоСтоимостьПоСтранице = 0;
				НомерСтраницы            = НомерСтраницы + 1;
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ЗаголовокТаблицы.Параметры.НомерСтраницы = НСтр("en='Page ';ru='Страница '") + НомерСтраницы;
				ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
			КонецЕсли;
			
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
			
			ОбластьМакета.Параметры.КоличествоМест = ВыборкаСтрокТовары.Количество;
			ОбластьМакета.Параметры.Стоимость = РассчитатьСуммуСписания(ВыборкаСтрокТовары, ТабДвижений);
			ОбластьМакета.Параметры.Цена  = Окр(ОбластьМакета.Параметры.Стоимость / ВыборкаСтрокТовары.Количество, 2, 1);
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			// Обновим итоги по документу
			ИтогоСтоимость = ИтогоСтоимость + ОбластьМакета.Параметры.Стоимость;
		КонецЦикла;
		
		// Выводим итоги по документу в общем
		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		ОбластьМакета.Параметры.Итого = ИтогоСтоимость;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Выводим подвал документа
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.СуммаСписанияПрописью = уатОбщегоНазначенияТиповые.уатСформироватьСуммуПрописью(ИтогоСтоимость, Шапка.ВалютаДокумента);
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Зададим параметры макета
		ТабличныйДокумент.ПолеСверху = 0;
		ТабличныйДокумент.ПолеСлева  = 0;
		ТабличныйДокумент.ПолеСнизу  = 0;
		ТабличныйДокумент.ПолеСправа = 0;
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ТекущийДокумент);
		
	КонецЦикла;
	                                                                            
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатнаяФорма()

#КонецОбласти

#КонецЕсли
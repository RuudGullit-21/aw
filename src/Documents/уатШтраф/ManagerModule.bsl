#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатШтраф";
	КомандаПечати.Идентификатор = "СогласиеНаУдержание";
	КомандаПечати.Представление = НСтр("en='Agreement for withholding';ru='Согласие на удержание'");
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатШтраф";
	КомандаПечати.Идентификатор  = "СогласиеНаУдержаниеСоСкидкой";
	КомандаПечати.Представление  = НСтр("en='Agreement for withholding';ru='Согласие на удержание (со скидкой)'");
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр).
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной
//                                                            параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной
//                                            параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СогласиеНаУдержание") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "СогласиеНаУдержание",
			"Согласие на удержание", ПечатьСогласиеНаУдержание(МассивОбъектов, ОбъектыПечати, 0));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СогласиеНаУдержаниеСоСкидкой") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "СогласиеНаУдержаниеСоСкидкой",
			"Согласие на удержание (со скидкой)", ПечатьСогласиеНаУдержание(МассивОбъектов, ОбъектыПечати, 0, Истина));
	КонецЕсли;
	
	уатОбщегоНазначенияСервер.УстановитьРедактированиеПечатныхФормДокумента(КоллекцияПечатныхФорм);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.УправлениеДоступом

// Позволяет переопределить ограничение, указанное в модуле менеджера объекта метаданных.
//
// Параметры:
//  Ограничение - Структура:
//    * Текст                             - Строка - ограничение доступа для пользователей.
//                                          Если пустая строка, значит, доступ разрешен.
//    * ТекстДляВнешнихПользователей      - Строка - ограничение доступа для внешних пользователей.
//                                          Если пустая строка, значит, доступ запрещен.
//    * ПоВладельцуБезЗаписиКлючейДоступа - Неопределено - определить автоматически.
//                                        - Булево - если Ложь, то всегда записывать ключи доступа,
//                                          если Истина, тогда не записывать ключи доступа,
//                                          а использовать ключи доступа владельца (требуется,
//                                          чтобы ограничение было строго по объекту-владельцу).
//   * ПоВладельцуБезЗаписиКлючейДоступаДляВнешнихПользователей - Неопределено, Булево - также
//                                          как у параметра ПоВладельцуБезЗаписиКлючейДоступа.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Подразделение)";
	
	Ограничение.ТекстДляВнешнихПользователей = Ограничение.Текст;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Функция ПечатьСогласиеНаУдержание(МассивОбъектов, ОбъектыПечати, ФлагПечати = 0, Скидка = Ложь)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_СогласиеНаУдержание";
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	ПервыйДокумент = Истина;
	
	регВалюта = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Для Каждого ТекущийДокумент Из МассивОбъектов Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_СогласиеНаУдержание";
		Если Скидка 
			И ЗначениеЗаполнено(ТекущийДокумент.РазмерСкидки) Тогда
			
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.уатШтраф.ПФ_MXL_СогласиеНаУдержаниеСкидка");
			
			Обл   = Макет.ПолучитьОбласть("Область");

			РазмерСкидки = 100 - ТекущийДокумент.РазмерСкидки;
			Обл.Параметры.РазмерСкидки = РазмерСкидки;
			СуммаШтрафаСкидка = (ТекущийДокумент.СуммаШтрафа * РазмерСкидки) / 100;
			Обл.Параметры.СуммаШтрафаСкидка = Окр(СуммаШтрафаСкидка, 2);
			Обл.Параметры.СуммаПрописью     = уатОбщегоНазначенияТиповые.уатСформироватьСуммуПрописью(Окр(СуммаШтрафаСкидка, 2), регВалюта);
			Обл.Параметры.СуммаШтрафа       = ТекущийДокумент.СуммаШтрафа;
		Иначе
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.уатШтраф.ПФ_MXL_СогласиеНаУдержание");
			
			Обл   = Макет.ПолучитьОбласть("Область");

			Обл.Параметры.СуммаШтрафа   = ТекущийДокумент.СуммаШтрафа;
			Обл.Параметры.СуммаПрописью = уатОбщегоНазначенияТиповые.уатСформироватьСуммуПрописью(Окр(ТекущийДокумент.СуммаШтрафа, 2), регВалюта);
		КонецЕсли;

		СписокТребуемыхПараметров	= "НаименованиеДляПечатныхФорм";
		СведенияОбОбъекте			= уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(ТекущийДокумент.Организация);
		Обл.Параметры.Организация	= уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(СведенияОбОбъекте, СписокТребуемыхПараметров);
		Обл.Параметры.НомерПостановления = ТекущийДокумент.НомерПостановления;
		мЗапрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ОтветственныеЛицаОрганизацийСрезПоследних.ФизическоеЛицо КАК ФизическоеЛицо,
		|	ОтветственныеЛицаОрганизацийСрезПоследних.Должность КАК Должность
		|ПОМЕСТИТЬ ВТ_ФизЛицо
		|ИЗ
		|	РегистрСведений.ОтветственныеЛицаОрганизаций.СрезПоследних(
		|			&ДатаСреза,
		|			СтруктурнаяЕдиница = &Организация
		|				И ОтветственноеЛицо = &ОтветственноеЛицо) КАК ОтветственныеЛицаОрганизацийСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВТ_ФизЛицо.ФизическоеЛицо.Наименование КАК Наименование,
		|	ВТ_ФизЛицо.Должность КАК Должность,
		|	ВТ_ФизЛицо.ФизическоеЛицо.Пол КАК Пол,
		|	ФИОФизическихЛицСрезПоследних.Фамилия КАК Фамилия,
		|	ФИОФизическихЛицСрезПоследних.Имя КАК Имя,
		|	ФИОФизическихЛицСрезПоследних.Отчество КАК Отчество
		|ИЗ
		|	ВТ_ФизЛицо КАК ВТ_ФизЛицо
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ФИОФизическихЛиц.СрезПоследних(&ДатаСреза, ) КАК ФИОФизическихЛицСрезПоследних
		|		ПО ВТ_ФизЛицо.ФизическоеЛицо = ФИОФизическихЛицСрезПоследних.ФизическоеЛицо");
		
		мЗапрос.УстановитьПараметр("ДатаСреза", ТекущийДокумент.Дата);
		мЗапрос.УстановитьПараметр("Организация", ТекущийДокумент.Организация);
		мЗапрос.УстановитьПараметр("ОтветственноеЛицо", Перечисления.ОтветственныеЛицаОрганизаций.Руководитель);
		мВыборка = мЗапрос.Выполнить().Выбрать();
		Если мВыборка.Следующий() Тогда
			
			Если мВыборка.Пол = Перечисления.ПолФизическогоЛица.Мужской Тогда
				мПол = 1;
			ИначеЕсли мВыборка.Пол = Перечисления.ПолФизическогоЛица.Женский Тогда
				мПол = 2;
			Иначе
				мПол = Неопределено;
			КонецЕсли;
			
			мДолжность = СокрЛП(мВыборка.Должность);
			Если ЗначениеЗаполнено(мДолжность) Тогда
				мДолжность = СклонениеПредставленийОбъектов.ПросклонятьПредставление(мДолжность, 3);
			КонецЕсли;
			
			мРезультат = "";
			Если ЗначениеЗаполнено(мВыборка.Фамилия) Тогда	
				мРезультат = СклонениеПредставленийОбъектов.ПросклонятьФИО(СокрЛП(мВыборка.Фамилия), 3,, мПол);
				мИмя = ?(ЗначениеЗаполнено(мВыборка.Имя), Лев(СокрЛП(мВыборка.Имя),1)+".", "");
				мОтчество = ?(ЗначениеЗаполнено(мВыборка.Отчество), Лев(СокрЛП(мВыборка.Отчество),1)+".", "");
				мРезультат = мРезультат + " " + мИмя + мОтчество;	
			Иначе
				мРезультат = СклонениеПредставленийОбъектов.ПросклонятьФИО(СокрЛП(мВыборка.Наименование), 3,, мПол);		
			КонецЕсли;		

			Обл.Параметры.РуководительФИО = мРезультат;
			Обл.Параметры.РуководительДолжность = ТРег(мДолжность);
			
		КонецЕсли;
			
		РеквизитыВодителя = уатОбщегоНазначения.уатПрочитатьРеквизитыВодителя(
			ТекущийДокумент.Водитель, ТекущийДокумент.Дата, ТекущийДокумент.Организация);
			
		мДолжность = СокрЛП(РеквизитыВодителя.Должность);
			Если ЗначениеЗаполнено(мДолжность) Тогда
		мДолжность = СклонениеПредставленийОбъектов.ПросклонятьПредставление(мДолжность, 2);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущийДокумент.Водитель.ФизическоеЛицо) Тогда
			ФИОФизЛица = уатОбщегоНазначения.уатФИОФизЛица(ТекущийДокумент.Водитель.ФизическоеЛицо, ТекущийДокумент.Дата);
			
			Если ФИОФизЛица = Неопределено ИЛИ НЕ ЗначениеЗаполнено(ФИОФизЛица.Фамилия) Тогда
				ФИОПолные = ТекущийДокумент.Водитель.Наименование;
			Иначе
				ФИОПолные = ФИОФизЛица.Фамилия + " " + ФИОФизЛица.Имя + " " + ФИОФизЛица.Отчество;
			КонецЕсли;
			Если ТекущийДокумент.Водитель.ФизическоеЛицо.Пол = Перечисления.ПолФизическогоЛица.Мужской Тогда
				мПол = 1;
			ИначеЕсли ТекущийДокумент.Водитель.ФизическоеЛицо.Пол = Перечисления.ПолФизическогоЛица.Женский Тогда
				мПол = 2;
			Иначе
				мПол = Неопределено;
			КонецЕсли;

			мФИО = СклонениеПредставленийОбъектов.ПросклонятьФИО(СокрЛП(ФИОПолные), 2,, мПол);
		Иначе
			мФИО = СклонениеПредставленийОбъектов.ПросклонятьФИО(СокрЛП(ТекущийДокумент.Водитель.Наименование), 2,, Неопределено);
		КонецЕсли;
		
		Обл.Параметры.ВодительФИО = мФИО;
		Обл.Параметры.ВодительДолжность = НРег(мДолжность);
		   
		ТабличныйДокумент.Вывести(Обл);
				
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ТекущийДокумент);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатнаяФорма()

Функция ВодительТСпоПЛ(ТС, мДатаНарушения) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	уатПутевойЛист.Водитель1 КАК Водитель,
	               |	уатПутевойЛист.Ссылка КАК ПутевойЛист,
	               |	ВЫБОР
	               |		КОГДА уатПутевойЛист.ТранспортноеСредство = &ТранспортноеСредство
	               |			ТОГДА 1
	               |		ИНАЧЕ 2
	               |	КОНЕЦ КАК Приоритет
	               |ИЗ
	               |	Документ.уатПутевойЛист КАК уатПутевойЛист
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатПутевойЛист.Прицепы КАК уатПутевойЛистПрицепы
	               |		ПО (уатПутевойЛистПрицепы.Ссылка = уатПутевойЛист.Ссылка)
	               |ГДЕ
	               |	уатПутевойЛист.Проведен
	               |	И НЕ уатПутевойЛист.ПометкаУдаления
	               |	И уатПутевойЛист.ДатаВыезда <= &ДатаНарушения
	               |	И уатПутевойЛист.ДатаВозвращения >= &ДатаНарушения
	               |	И (уатПутевойЛист.ТранспортноеСредство = &ТранспортноеСредство
	               |			ИЛИ уатПутевойЛистПрицепы.ТС = &ТранспортноеСредство)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Приоритет";
	
	Запрос.УстановитьПараметр("ДатаНарушения", мДатаНарушения);
	Запрос.УстановитьПараметр("ТранспортноеСредство", ТС);
	
	Результат = Новый Структура();
	Результат.Вставить("Водитель", Справочники.Сотрудники.ПустаяСсылка());
	Результат.Вставить("ДокументОснование", Документы.уатПутевойЛист.ПустаяСсылка());
	
	мВыборка = Запрос.Выполнить().Выбрать();
	Если мВыборка.Следующий() Тогда
		Результат.Водитель = мВыборка.Водитель;
		Результат.ДокументОснование = мВыборка.ПутевойЛист;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли
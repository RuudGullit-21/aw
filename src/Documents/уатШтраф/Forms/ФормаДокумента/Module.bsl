
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	уатЗащищенныеФункцииСервер.уатДокументФормаЭлементаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, Объект, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства

	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если Объект.ОплатаСоСкидкой = Истина
		И ЗначениеЗаполнено(Объект.РазмерСкидки) Тогда
		Элементы.ГруппаСкидка.Заголовок = Нстр("ru = 'Скидка'") + " " + Объект.РазмерСкидки + "%" 
		+ ?(ЗначениеЗаполнено(Объект.ДатаСкидки), " " + Нстр("ru = 'до'") + " " + Формат(Объект.ДатаСкидки, "ДФ=dd.MM.yyyy"), "");
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("уатИспользоватьСервисШтрафовНет") = ЛОЖЬ Тогда
		Элементы.ПодменюЗагрузкаДанных.Видимость = Ложь;
	КонецЕсли;
	
	МассивФайлов = ПолучитьВсеПодчиненныеФайлы(Объект.Ссылка);
	Если МассивФайлов.Количество() > 0 Тогда
		НомерКартинки = 0;
		Файл          = МассивФайлов[0];
	Иначе
		Элементы.ГруппаИзображение.Видимость = Ложь;
	КонецЕсли;

	Элементы.ГруппаМодельТС.Видимость = ЗначениеЗаполнено(Объект.ТС);
	Элементы.СопоставитьТС.Видимость  = НЕ ЗначениеЗаполнено(Объект.ТС);
	ЗаполнитьДанныеОТСВСервисе();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	уатЗащищенныеФункцииКлиент.уатДокументФормаЭлементаПриОткрытии(Отказ, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства

	ОбновитьСписокВыбораЭкипажа();
	
	Если ЗначениеЗаполнено(Файл) Тогда
		Картинка = РаботаСФайламиКлиент.ДанныеФайла(Файл).СсылкаНаДвоичныеДанныеФайла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства

	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТСПриИзменении(Элемент)
	
	Объект.Водитель = Неопределено;
	Если ЗначениеЗаполнено(Объект.ДатаНарушения) Тогда //из ПЛ
		ЗаполнитьЗначенияСвойств(Объект, ВодительТСпоПЛ(Объект.ТС, Объект.ДатаНарушения));
	КонецЕсли;
	
	Элементы.ГруппаМодельТС.Видимость = ЗначениеЗаполнено(Объект.ТС);
	Элементы.СопоставитьТС.Видимость  = НЕ ЗначениеЗаполнено(Объект.ТС);
	
	// установим текущее местонахождение ТС
	МестонахождениеТС = уатОбщегоНазначения.МестонахождениеТС(Объект.ТС, Объект.Дата);
	Если НЕ ЗначениеЗаполнено(Объект.Колонна) Тогда
		Объект.Колонна = МестонахождениеТС.Колонна;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = МестонахождениеТС.Организация;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.Подразделение) Тогда
		Объект.Подразделение = МестонахождениеТС.Подразделение;
	КонецЕсли;
	
	ОбновитьСписокВыбораЭкипажа(); 
	
КонецПроцедуры

&НаКлиенте
Процедура ТСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.РеквизитТСНачалоВыбора(Элемент, Объект.ТС, ДанныеВыбора,
		СтандартнаяОбработка, СтруктураОтборТС());
КонецПроцедуры

&НаКлиенте
Процедура ТСАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.РеквизитТСАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание,
		СтандартнаяОбработка, СтруктураОтборТС());
КонецПроцедуры

&НаКлиенте
Процедура ТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.РеквизитТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
		СтандартнаяОбработка, СтруктураОтборТС());
КонецПроцедуры

&НаКлиенте
Процедура ВодительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ДиалогВыбораСотрудника(Элемент, Объект.Водитель, Новый Структура("Организация", Объект.Организация), СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ВодительОткрытие(Элемент, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ОткрытьФормуСотрудника(Объект.Водитель, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ВодительАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	Если Ожидание = 0 Тогда //выбор из списка
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура ВодительОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура ДатаНарушенияПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.ТС) Тогда
		Если ЗначениеЗаполнено(Объект.ДатаНарушения) Тогда
			ТекстНСТР = НСтр("en='Changed the date of violation. Search through the relevant waybills?';ru='Изменилась дата нарушения. Произвести поиск по соответствующим путевым листам?'");
			ПоказатьВопрос(Новый ОписаниеОповещения("ДатаНарушенияПриИзмененииЗавершение", ЭтотОбъект),
				ТекстНСТР, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);
		КонецЕсли;	
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

&НаКлиенте
Процедура ПолучательПлатежаПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.ПолучательПлатежа) Тогда
		СписокДоговоров = Новый СписокЗначений;
		СписокДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"));
		
		СтруктураПараметровДляПолученияДоговора = Новый Структура;
		СтруктураПараметровДляПолученияДоговора.Вставить("СписокДопустимыхВидовДоговоров", СписокДоговоров);
		
		Объект.ДоговорПолучателя = уатОбщегоНазначенияТиповыеСервер.уатПолучитьДоговорПоОрганизацииИКонтрагенту(Объект.Организация, 
			Объект.ПолучательПлатежа, СтруктураПараметровДляПолученияДоговора);
		Объект.СчетПолучателя    = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(Объект.ПолучательПлатежа, "ОсновнойБанковскийСчет");
		Объект.КодБК             = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(Объект.ПолучательПлатежа, "КБК");
		Объект.КодПоОКТМО        = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(Объект.ПолучательПлатежа, "КодПоОКТМО");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОплатаСоСкидкойПриИзменении(Элемент)
	Если Объект.ОплатаСоСкидкой = Истина
		И ЗначениеЗаполнено(Объект.РазмерСкидки) Тогда
		Элементы.ГруппаСкидка.Заголовок = Нстр("ru = 'Скидка'") + " " + Объект.РазмерСкидки + "%" 
		+ ?(ЗначениеЗаполнено(Объект.ДатаСкидки), " " + Нстр("ru = 'до'") + " " + Формат(Объект.ДатаСкидки, "ДФ=dd.MM.yyyy"), "");
	Иначе
		Элементы.ГруппаСкидка.Заголовок = Нстр("ru = 'Скидка'");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДатаСкидкиПриИзменении(Элемент)
	Если Объект.ОплатаСоСкидкой = Истина
		И ЗначениеЗаполнено(Объект.РазмерСкидки) Тогда
		Элементы.ГруппаСкидка.Заголовок = Нстр("ru = 'Скидка'") + " " + Объект.РазмерСкидки + "%" 
		+ ?(ЗначениеЗаполнено(Объект.ДатаСкидки), " " + Нстр("ru = 'до'") + " " + Формат(Объект.ДатаСкидки, "ДФ=dd.MM.yyyy"), "");
	Иначе
		Элементы.ГруппаСкидка.Заголовок = Нстр("ru = 'Скидка'");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РазмерСкидкиПриИзменении(Элемент)
	Если Объект.ОплатаСоСкидкой = Истина
		И ЗначениеЗаполнено(Объект.РазмерСкидки) Тогда
		Элементы.ГруппаСкидка.Заголовок = Нстр("ru = 'Скидка'") + " " + Объект.РазмерСкидки + "%" 
		+ ?(ЗначениеЗаполнено(Объект.ДатаСкидки), " " + Нстр("ru = 'до'") + " " + Формат(Объект.ДатаСкидки, "ДФ=dd.MM.yyyy"), "");
	Иначе
		Элементы.ГруппаСкидка.Заголовок = Нстр("ru = 'Скидка'");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КартинкаНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(Файл) Тогда
		КартинкаНажатиеЗавершение = Новый ОписаниеОповещения("КартинкаНажатиеЗавершение", ЭтотОбъект);
		РаботаСФайламиКлиент.ОткрытьФормуФайла(Файл, СтандартнаяОбработка,,КартинкаНажатиеЗавершение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДоговорПолучательСоздание(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура();   
	ПараметрыФормы.Вставить("Владелец", Объект.ПолучательПлатежа);
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ОбновитьДанные(Команда)
	
	Если Объект.ПометкаУдаления Тогда
		ТекстНСТР = НСтр("ru='Помеченный на удаление документ не может быть обновлен!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		Возврат;
	КонецЕсли;
	
	Если Модифицированность
		ИЛИ Объект.Ссылка.Пустая() Тогда
		ТекстНСТР = НСтр("en='To perform this operation it is necessary to record the document. Continue?';
		|ru='Для выполнения данной операции необходимо записать документ. Продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбновитьДанныеФрагмент", ЭтотОбъект),
		ТекстНСТР, РежимДиалогаВопрос.ОКОтмена);
	Иначе
		ОбновитьДанныеФрагментЗавершение();
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьФото(Команда)
	
	Если Объект.ПометкаУдаления Тогда
		ТекстНСТР = НСтр("ru='Помеченный на удаление документ не может быть обновлен!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		Возврат;
	КонецЕсли;

	ОбновитьДанныеСервер(Истина);
	Прочитать();
	Если ЗначениеЗаполнено(Файл) Тогда
		Картинка = РаботаСФайламиКлиент.ДанныеФайла(Файл).СсылкаНаДвоичныеДанныеФайла;
	КонецЕсли;
	
	Нстр = НСтр("ru='Загрузка фото завершена'");
	ПоказатьПредупреждение(Неопределено, Нстр);

КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	НазадНаСервере(Объект.Ссылка, НомерКартинки, Файл);
	Если ЗначениеЗаполнено(Файл) Тогда
		Картинка = РаботаСФайламиКлиент.ДанныеФайла(Файл).СсылкаНаДвоичныеДанныеФайла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Вперед(Команда)
	
	ВпередНаСервере(Объект.Ссылка, НомерКартинки, Файл);
	Если ЗначениеЗаполнено(Файл) Тогда
		Картинка = РаботаСФайламиКлиент.ДанныеФайла(Файл).СсылкаНаДвоичныеДанныеФайла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьКарточкуШтрафа(Команда)
	
	Если Объект.ПометкаУдаления Тогда
		ТекстНСТР = НСтр("ru='Помеченный на удаление документ не может быть обновлен!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		Возврат;
	КонецЕсли;

	ФайлСсылка = Неопределено;
	ОбновитьДанныеСервер(, Истина, ФайлСсылка);
	
	Нстр = НСтр("ru='Загрузка карточки штрафа завершена'");
	ПоказатьПредупреждение(Неопределено, Нстр);
	
	Если ЗначениеЗаполнено(ФайлСсылка) Тогда
		ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаДляОткрытия(ФайлСсылка, Неопределено, УникальныйИдентификатор);
		РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла, Ложь);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Файл) Тогда
		Картинка = РаботаСФайламиКлиент.ДанныеФайла(Файл).СсылкаНаДвоичныеДанныеФайла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставитьТС(Команда)
	Если НЕ ЗначениеЗаполнено(Объект.ИнформацияОТС) Тогда
		ТекстНСТР = НСтр("ru='Не удалось сопоставить ТС. Не заполнена информация о ТС в сервисе.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		Возврат;
	КонецЕсли;
	
	ДанныеТС = СопоставитьТССервер(Объект.ИнформацияОТС);
	
	ГосНомер          = ДанныеТС.Получить("grz");
	СТС               = ДанныеТС.Получить("sts");
	Наименование      = ДанныеТС.Получить("name");
	ИДвСервисеШтрафов = СтрЗаменить(СтрЗаменить(Строка(ДанныеТС.Получить("id")), " ", ""), Символы.НПП, "");
	
	ТекТС = ПолучитьСопоставленнуюТССервер(ИДвСервисеШтрафов, ГосНомер, СТС, Наименование);
	Объект.ТС = ТекТС;
	
	Если НЕ ЗначениеЗаполнено(Объект.ТС) Тогда
		ТекстНСТР = НСтр("ru='Не удалось сопоставить ТС.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
	КонецЕсли;
	
	Элементы.ГруппаМодельТС.Видимость = ЗначениеЗаполнено(Объект.ТС);
	Элементы.СопоставитьТС.Видимость  = НЕ ЗначениеЗаполнено(Объект.ТС);
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьДанныеОТСВСервисе()
	
	Если НЕ ЗначениеЗаполнено(Объект.ИнформацияОТС) Тогда
		Возврат;
	КонецЕсли;
	
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(Объект.ИнформацияОТС);
	Response = ПрочитатьJSON(ЧтениеJSON, Истина);
	ЧтениеJSON.Закрыть();
	
	ДанныеТС = Response;
	ТС_Госномер          = ДанныеТС.Получить("grz");
	ТС_СТС               = ДанныеТС.Получить("sts");
	ТС_Наименование      = ДанныеТС.Получить("name");
	ТС_ИДвСервисеШтрафов = СтрЗаменить(СтрЗаменить(Строка(ДанныеТС.Получить("id")), " ", ""), Символы.НПП, "");

КонецПроцедуры

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура КартинкаНажатиеЗавершение(Результат, ДопПараметры) Экспорт
	Картинка = РаботаСФайламиКлиент.ДанныеФайла(Файл).СсылкаНаДвоичныеДанныеФайла;
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеСервер(ЗагрузкаФото = Ложь, ЗагрузкаКарточкиШтрафа = Ложь, КарточкаШтрафа = Неопределено)
	
	УчетныеЗаписиСервисаШтрафов = Объект.УчетнаяЗапись;
	
	Если НЕ ЗначениеЗаполнено(УчетныеЗаписиСервисаШтрафов) Тогда
		Возврат;
	КонецЕсли;
	
	ИдентификаторШтрафа = Объект.НомерПостановления;
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторШтрафа) Тогда
		Возврат;
	КонецЕсли;
	
	МассивТС = Новый Массив();
	МассивТС.Добавить(Объект.ТС.ИДвСервисеШтрафов);
	
	уатИнтеграции_проф.ШтрафовНет_ОбновитьШтраф(МассивТС, УчетныеЗаписиСервисаШтрафов,
		ИдентификаторШтрафа, ЗагрузкаФото, ЗагрузкаКарточкиШтрафа);
		
	Если ЗагрузкаКарточкиШтрафа Тогда
		МассивФайлов = РаботаСФайламиСлужебный.ПолучитьВсеПодчиненныеФайлы(Объект.Ссылка);
		Для Каждого ТекСтрока Из МассивФайлов Цикл
			Если ТекСтрока.Наименование = "Карточка штрафа.pdf" 
				И НЕ ТекСтрока.ПометкаУдаления Тогда
				КарточкаШтрафа = ТекСтрока;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	МассивФайлов = ПолучитьВсеПодчиненныеФайлы(Объект.Ссылка);
	Если МассивФайлов.Количество() > 0 Тогда
		НомерКартинки = 0;
		Файл          = МассивФайлов[0];
		Элементы.ГруппаИзображение.Видимость = Истина;
	Иначе
		Элементы.ГруппаИзображение.Видимость = Ложь;
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ВодительТСпоПЛ(ТС, мДатаНарушения)
	
	Возврат Документы.уатШтраф.ВодительТСпоПЛ(ТС, мДатаНарушения);
	
КонецФункции

&НаКлиенте
Процедура ОбновитьСписокВыбораЭкипажа()
	Элементы.Водитель.СписокВыбора.Очистить();
	
	ЭкипажТССписок = уатЗащищенныеФункцииСервер.ЭкипажТССписок(Объект.ТС, Объект.Дата);
	ЭкипажТССписок_Количество = ЭкипажТССписок.Количество();
	
	Элементы.Водитель.КнопкаВыпадающегоСписка = (ЭкипажТССписок_Количество > 0);
	
	Если ЭкипажТССписок_Количество = 0 Тогда	
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекСотр Из ЭкипажТССписок Цикл
		Элементы.Водитель.СписокВыбора.Добавить(ТекСотр.Значение);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ДатаНарушенияПриИзмененииНаСервере()
	
	Если ЗначениеЗаполнено(Объект.ДатаНарушения) Тогда
		ЗаполнитьЗначенияСвойств(Объект, ВодительТСпоПЛ(Объект.ТС, Объект.ДатаНарушения));
	//Иначе
	//	Объект.Водитель = ОсновнойВодительТС(Объект.ТС);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаНарушенияПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт 
    Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
        ДатаНарушенияПриИзмененииНаСервере();
    КонецЕсли;	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ВпередНаСервере(ДокСсылка, НомерКартинки, Файл)
	МассивФайлов = ПолучитьВсеПодчиненныеФайлы(ДокСсылка);
	Если МассивФайлов.Количество() > НомерКартинки + 1 Тогда
		НомерКартинки = НомерКартинки + 1;
		Файл          = МассивФайлов[НомерКартинки];
	Иначе
		
		НомерКартинки = 0;
		Если МассивФайлов.Количество() > НомерКартинки + 1 Тогда
			Файл = МассивФайлов[НомерКартинки];
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура НазадНаСервере(ДокСсылка, НомерКартинки, Файл)
	МассивФайлов = ПолучитьВсеПодчиненныеФайлы(ДокСсылка);
	Если МассивФайлов.Количество() > 0
		И МассивФайлов.Количество() > НомерКартинки - 1 Тогда
		
		НомерКартинки = НомерКартинки - 1;
		Если НомерКартинки < 0 Тогда
			НомерКартинки = МассивФайлов.Количество() - 1;
		КонецЕсли;
		
		Файл          = МассивФайлов[НомерКартинки];
		
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьВсеПодчиненныеФайлы(ДокСсылка)
	мМассивФайлов = РаботаСФайламиСлужебный.ПолучитьВсеПодчиненныеФайлы(ДокСсылка);
	МассивФайлов = Новый Массив();
	Для Каждого ТекСтрока Из мМассивФайлов Цикл
		Если ТекСтрока.ПометкаУдаления Тогда
			Продолжить;
		КонецЕсли;
		Попытка
			ДвоичныеДанныеФайла = РаботаСФайлами.ДвоичныеДанныеФайла(ТекСтрока);
			Картинка            = Новый Картинка(ДвоичныеДанныеФайла);
			ТипКартинки         = Картинка.Формат();
			Если (ТипКартинки = ФорматКартинки.НеизвестныйФормат 
				ИЛИ ТипКартинки = Неопределено) Тогда
				Продолжить;
			КонецЕсли;
		Исключение
		КонецПопытки;
	
		МассивФайлов.Добавить(ТекСтрока);
	КонецЦикла;
	
	Возврат МассивФайлов;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьДанныеФрагмент(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	Если Ответ <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		флЗаписан = Записать();
	Исключение
		Возврат;
	КонецПопытки;
	
	Если НЕ флЗаписан Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьДанныеФрагментЗавершение();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеФрагментЗавершение() 
	
	ОбновитьДанныеСервер();
	Прочитать();
	
	Элементы.ГруппаМодельТС.Видимость = ЗначениеЗаполнено(Объект.ТС);
	Элементы.СопоставитьТС.Видимость  = НЕ ЗначениеЗаполнено(Объект.ТС);
	ЗаполнитьДанныеОТСВСервисе();
	
	Нстр = НСтр("ru='Обновление завершено'");
	ПоказатьПредупреждение(Неопределено, Нстр);
	
	Если ЗначениеЗаполнено(Файл) Тогда
		Картинка = РаботаСФайламиКлиент.ДанныеФайла(Файл).СсылкаНаДвоичныеДанныеФайла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСопоставленнуюТССервер(ИДвСервисеШтрафов, ГосударственныйНомер, СТС, Наименование)
	
	ТекТС = уатИнтеграции_проф.ШтрафовНет_ПолучитьСопоставленнуюТС(ИДвСервисеШтрафов, ГосударственныйНомер, СТС, Наименование);
	Возврат ТекТС;
	
КонецФункции

&НаСервереБезКонтекста
Функция СопоставитьТССервер(ИнформацияОТС)
	ЧтениеJSON = Новый ЧтениеJSON();
	ЧтениеJSON.УстановитьСтроку(ИнформацияОТС);
	Response = ПрочитатьJSON(ЧтениеJSON, Истина);
	ЧтениеJSON.Закрыть();

	Возврат Response;
КонецФункции

&НаКлиенте
Функция СтруктураОтборТС()
	СтруктураОтбор = Новый Структура("Организация", Объект.Организация);
	Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
		СтруктураОтбор.Вставить("Подразделение", Объект.Подразделение);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Колонна) Тогда
		СтруктураОтбор.Вставить("Колонна", Объект.Колонна);
	КонецЕсли;
	
	Возврат СтруктураОтбор;
КонецФункции

#КонецОбласти

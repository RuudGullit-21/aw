#Область ПеременныеФормы

&НаКлиенте
Перем ДанныеСтрокиРасходы; // Хранит данные строки ТЧ Доходы/Расходы перед началом редактирования.

#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	уатЗащищенныеФункцииСервер.уатДокументФормаЭлементаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, Объект, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.Взаимодействия
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Взаимодействия") Тогда
		МодульВзаимодействия = ОбщегоНазначения.ОбщийМодуль("Взаимодействия");
		МодульВзаимодействия.ПодготовитьОповещения(ЭтотОбъект, Параметры, Ложь);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Взаимодействия
	
	// СтандартныеПодсистемы.УчетОригиналовПервчиныхДокументов
	УчетОригиналовПервичныхДокументов.ПриСозданииНаСервере_ФормаДокумента(ЭтотОбъект, Элементы.ГруппаУчетПервичныхДокументов);
	уатУчетОригиналовПервичныхДокументов.ОтобразитьДатуПоследнегоИзмененияПервичныхДокументов(ЭтотОбъект, Элементы.ГруппаУчетПервичныхДокументов);
	// Конец СтандартныеПодсистемы.УчетОригиналовПервчиныхДокументов
	
	ИспользоватьОбменЭД = ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭД"); 
	
	мОтображатьСтатус = Истина;
	
	Если Параметры.Ключ.Пустая() Тогда 
		Если Не ЗначениеЗаполнено(Объект.СтатусВыполнения) Тогда 
			Объект.СтатусВыполнения = Справочники.уатСтатусы_уэ.Новый;
		КонецЕсли;
		Если Параметры.Свойство("СтруктураПеревозки") Тогда 
			Объект.ТС       = Параметры.СтруктураПеревозки.ТС;
			Объект.Водитель = Параметры.СтруктураПеревозки.Водитель;
			Объект.Прицеп1  = Параметры.СтруктураПеревозки.Прицеп1;
			Объект.Прицеп2  = Параметры.СтруктураПеревозки.Прицеп2;
		КонецЕсли; 
		Если Параметры.Свойство("Перевозчик") Тогда 
			Объект.Контрагент = Параметры.Перевозчик;  
			ДанныеОбменаССервером = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, УчитыватьНДС, Дата");
			ЗаполнитьЗначенияСвойств(ДанныеОбменаССервером, Объект);
			// Получим данные с сервера
			ДанныеОбменаССервером.ДоговорКонтрагента = Объект.ДоговорКонтрагента;
			ЗначенияДляЗаполнения = ИзменениеКонтрагентаСервер(ДанныеОбменаССервером);
			Объект.ДоговорКонтрагента = ЗначенияДляЗаполнения.ДоговорКонтрагента;

		КонецЕсли;
	КонецЕсли;
	
	// Инициализация реквизитов формы.
	МноговалютныйУчет = ПолучитьФункциональнуюОпцию("уатМноговалютныйУчет");
	мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) И ЗначениеЗаполнено(Параметры.Основание) Тогда
		РассчитатьСуммуДокумента();
	КонецЕсли;
	
	СтруктураОбъектовНастроек = Новый Структура;
	СтруктураОбъектовНастроек.Вставить("Организация", Объект.Организация);
	СтруктураОбъектовНастроек.Вставить("Пользователь", ПользователиКлиентСервер.АвторизованныйПользователь());
	
	Если Объект.Ссылка.Пустая() И Объект.ВидПеревозки.Пустая() Тогда
		Объект.ВидПеревозки = ПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, ПланыВидовХарактеристик.уатПраваИНастройки.ОсновнойВидПеревозок);
	КонецЕсли;
		
	Контрагент = Объект.Контрагент;
	Если НЕ Объект.Ссылка.Пустая() ИЛИ НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Договор = Объект.ДоговорКонтрагента;
	КонецЕсли;
	ВалютаРасчетов = Объект.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	НациональнаяВалюта = мВалютаРегламентированногоУчета;
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", НациональнаяВалюта));
	КурсНациональнаяВалюта = СтруктураПоВалюте.Курс;
	КратностьНациональнаяВалюта = СтруктураПоВалюте.Кратность;
	
	ИспользоватьПлановыеУслуги = ПолучитьФункциональнуюОпцию("уатИспользоватьПлановыеУслуги_уэ");
	
	уатОбщегоНазначенияСервер.НастроитьПолеЕдиницыИзмерения(ЭтотОбъект, "Грузы", "ГрузовоеМесто");
	
	ОбновитьДинамическиеПоляСервер();
	
	Если ЗначениеЗаполнено(Объект.МаршрутныйЛист) Тогда 
		РежимЗаполнения     = 1; // По маршрутным листам.
		ПредРежимЗаполнения = 1;
		ЗаполнитьДеревоЗаказовПоМЛ();
	Иначе 
		РежимЗаполнения     = 0; // По заказам на ТС.
		ПредРежимЗаполнения = 0;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() И Объект.Выработка.Количество() = 0 Тогда
		ЗаполнитьДопВыработкуПриСоздании();
	КонецЕсли;
	
	Элементы.ЗаказыДеревоКоличествоМест.Заголовок = Справочники.уатВидыУпаковки_уэ.ПолучитьОсновнойВидУпаковки().КраткоеНаименование;
	
	ПредставлениеЕдиницыИзмеренияВеса = уатОбщегоНазначенияПовтИсп.ПолучитьПредставлениеОсновнойЕдиницыИзмеренияВеса();
	Если ЗначениеЗаполнено(ПредставлениеЕдиницыИзмеренияВеса) Тогда
		Элементы.ГрузыВесБрутто.Заголовок        = НСтр("en='Weight';ru='Вес'") + ", " + ПредставлениеЕдиницыИзмеренияВеса;
		Элементы.ЗаказыДеревоВесБрутто.Заголовок = НСтр("en='Weight';ru='Вес'") + ", " + ПредставлениеЕдиницыИзмеренияВеса;
	КонецЕсли;
	
	ПредставлениеЕдиницыИзмеренияОбъема = уатОбщегоНазначенияПовтИсп.ПолучитьПредставлениеОсновнойЕдиницыИзмеренияОбъема();
	Если ЗначениеЗаполнено(ПредставлениеЕдиницыИзмеренияОбъема) Тогда
		Элементы.ГрузыОбъем.Заголовок        = НСтр("en='Volume';ru='Объем'") + ", " + ПредставлениеЕдиницыИзмеренияОбъема;
		Элементы.ЗаказыДеревоОбъем.Заголовок = НСтр("en='Volume';ru='Объем'") + ", " + ПредставлениеЕдиницыИзмеренияОбъема;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Прицеп1) Тогда 
		Элементы.ГруппаПрицеп1.Видимость = Истина;
	Иначе 
		Элементы.ГруппаПрицеп1.Видимость = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Прицеп2) Тогда 
		Элементы.Прицеп2.Видимость = Истина;
	Иначе 
		Элементы.Прицеп2.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ДобавитьПрицеп.Видимость = Не (Элементы.ГруппаПрицеп1.Видимость И Элементы.Прицеп2.Видимость);
	уатОбщегоНазначенияСервер.ПереместитьКнопкуКонтакты(Элементы);
	
	флПересчетИтогов = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ПользователиКлиентСервер.АвторизованныйПользователь(),
		"ЗаказПеревозчикуПерерасчетИтоговПриПроведении");
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаКурса) Тогда
		Если ЗначениеЗаполнено(Объект.Дата) Тогда
			Объект.ДатаКурса = Объект.Дата;
		Иначе
			Объект.ДатаКурса = ТекущаяДата();
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЭлектронныеПеревозочныеДокументы, "Рейс", Объект.Ссылка);
	
	ОбновитьПодвалРасходов();
	Элементы.ПодменюФинансы.Видимость = уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП();
	
	// Настройка интерфейса формы для внешнего польователя.
	АвторизованныйКонтрагент = уатЗащищенныеФункцииСервер_проф.АвторизованныйКонтрагент(АвторизованВнешнийПользователь);
	УровеньДоступаКРасходам = уатОбщегоНазначенияСервер.УровеньДоступаКонтрагентаКУслугам(АвторизованныйКонтрагент).РедактированиеРасходов;
	
	Если Не АвторизованВнешнийПользователь 
		Или УровеньДоступаКРасходам = Перечисления.уатУровеньДоступаКУслугам.РедактированиеЗапрещено Тогда
		// Для внешнего пользователя проверяется отдельно УровеньДоступаКРасходам
		УстановитьВозможностьРедактированияДоходовРасходов();
	КонецЕсли;
	
	Если уатОбщегоНазначенияСервер.АвторизованВнещнийПеревозчик() Тогда
		КомандаСоздатьНаОсновании = Элементы.Найти("ФормаДокументуатСчетНаОплатуПоставщикаСоздатьНаОсновании");
		Если КомандаСоздатьНаОсновании <> Неопределено Тогда
			КомандаСоздатьНаОсновании.Заголовок = НСтр("ru = 'Счет на оплату'");
		КонецЕсли;
		КомандаСоздатьНаОсновании = Элементы.Найти("ФормаДокументуатПоступлениеТоваровУслугСоздатьНаОсновании");
		Если КомандаСоздатьНаОсновании <> Неопределено Тогда
			КомандаСоздатьНаОсновании.Заголовок = НСтр("ru = 'Реализация услуг'");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	уатЗащищенныеФункцииКлиент.уатДокументФормаЭлементаПриОткрытии(Отказ, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если Объект.Ссылка.Пустая() И ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		уатОбщегоНазначенияКлиент.ПриИзмененииДоговора(ЭтаФорма, Неопределено, Договор);
	КонецЕсли;
		
	УстановитьВидимость();
	
	Если НЕ ПравоРедактированиеДокумента() Тогда
		Элементы.ГруппаШапкаПравая.ТолькоПросмотр = Истина;
		Элементы.СтатусВыполнения.Доступность     = Ложь;
	КонецЕсли; 
	
	Элементы.ГруппаСостояниеЭДО.Видимость = ИспользоватьОбменЭД;
	Если Элементы.ГруппаСостояниеЭДО.Видимость
		И НЕ Объект.Ссылка.Пустая() Тогда
		КолВоЭПД = ПолучитьКоличествоЭПД(Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ОбновитьСтатусыГрузовСервер();
	ОбновитьПунктыОтправленияНазначенияГрузовСервер();
	ОбновитьВсегоВТЧОперацииСервер();
	ОбновитьНадписьИтоги();
	УстановитьУсловноеОформлениеПолейСтатусов();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Интерактивно", Истина);
	Если ПараметрыЗаписи.Свойство("НеПересчитыватьИтоги") Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("НеПересчитыватьИтоги", Истина);
	КонецЕсли;
	
	Если ИспользоватьОбменЭД
		И НЕ Объект.Ссылка.Пустая()
		И уатОбменСГИСЭПД.КлючевыхРеквизитыЭТрНИзменены(ТекущийОбъект) Тогда 
		флВопросИзменениеЭТрН = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьДинамическиеПоляСервер();
	
	флВыполненАвтопересчетУслугПриЗаписи = ТекущийОбъект.ДополнительныеСвойства.Свойство("ВыполненАвтопересчетУслуг");
	Если ТекущийОбъект.ДополнительныеСвойства.Свойство("ПересчетИтогов") Тогда
		флПересчетИтогов = ТекущийОбъект.ДополнительныеСвойства.ПересчетИтогов;
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЭлектронныеПеревозочныеДокументы, "Рейс", Объект.Ссылка);
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.уатШаблоныУслуг_уэ") Тогда
		ЗаполнитьУслугиПоШаблонуСервер(ВыбранноеЗначение);
		РассчитатьСуммуДокумента();
		ОбновитьВсегоВТЧОперацииСервер();
		ВывестиСуммовыеИтогиДокумента();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	Если ИмяСобытия = "Запись_ДокументыЭПД" Тогда
		КолВоЭПД = ПолучитьКоличествоЭПД(Объект.Ссылка);
		Элементы.ЭлектронныеПеревозочныеДокументы.Обновить();
	КонецЕсли;
	// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов	
	УчетОригиналовПервичныхДокументовКлиент.ОбработчикОповещенияФормаДокумента(ИмяСобытия, ЭтотОбъект);
	// Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Взаимодействия
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Взаимодействия") Тогда
		МодульВзаимодействияКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ВзаимодействияКлиент");
		МодульВзаимодействияКлиент.ВзаимодействиеПредметПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи, "уатЗаказГрузоотправителя");
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Взаимодействия
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
		
	Если РежимЗаполнения = 1 И ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда 
		ОбновитьДанныеПоТСиВодителюВМЛ();
	КонецЕсли;
	
	Если флВопросИзменениеЭТрН 
		И ИспользоватьОбменЭД Тогда  
		МассивЭПД = ПолучитьЭТрН(Объект.Ссылка);
		Если МассивЭПД.Количество() = 0 Тогда
			флВопросИзменениеЭТрН = Ложь;
		Иначе
			Режим = РежимДиалогаВопрос.ДаНет;
			ТекстПредупреждения = НСтр("ru = 'В документе изменились ключевые ревизиты ЭТрН.
			|Открыть ""Электронную транспортную накладную""?'"); 
			ПоказатьВопрос(Новый ОписаниеОповещения("ВопросИзменениеЭТрН", ЭтотОбъект, МассивЭПД), ТекстПредупреждения, Режим);
		КонецЕсли;
	Иначе
		флВопросИзменениеЭТрН = Ложь;
	КонецЕсли;
	
	Если флВыполненАвтопересчетУслугПриЗаписи Тогда
		Если флПересчетИтогов Тогда
			ЗаголовокНСТР = "";
			ОписаниеНСТР = НСтр("en='Expenses was calculated automaticaly'; ru='Выполнен автоматический пересчет расходов'");
			ПоказатьОповещениеПользователя(ЗаголовокНСТР,, ОписаниеНСТР);
		Иначе
			ПоказатьПредупреждение(Неопределено, НСтр("en='It is necessary to recalculate of tabular section ""Expenses"" was not done!';ru='Необходимо выполнить пересчет табличной части ""Расходы""!'"));
		КонецЕсли;
		флВыполненАвтопересчетУслугПриЗаписи = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если флВопросЗакрытиеФормы Тогда
		Отказ = Истина;
		Оповещ = Новый ОписаниеОповещения("ПередЗакрытиемВопрос", ЭтотОбъект);
		ПоказатьВопрос(Оповещ, "При проверке корректности заполнения документа возникли предупреждения!
			|Продолжить закрытие формы?", РежимДиалогаВопрос.ОКОтмена);
	КонецЕсли; 
	Если НЕ ВопросИзменениеЭТрН  
		И флВопросИзменениеЭТрН Тогда
		СтандартнаяОбработка		 = Ложь;
		ЗавершениеРаботы			 = Ложь;
		Отказ						 = Истина;
		ВопросИзменениеЭТрН			 = Истина; 
		флВопросИзменениеЭТрН		 = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура Подключаемый_ДекорацияСостояниеОригиналаНажатие()

	// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	УчетОригиналовПервичныхДокументовКлиент.ОткрытьМенюВыбораСостояния(ЭтотОбъект, Элементы.ДекорацияСостояниеОригинала);
	//Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	КонтрагентПередИзменением = Контрагент;
	Контрагент = Объект.Контрагент;
	
	Если КонтрагентПередИзменением <> Объект.Контрагент Тогда
		ПриИзмененииКонтрагентаИлиОрганизации(Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("РегистрСведений.уатСведенияОКонтрагентах_уэ.Форма.ФормаВыбораПеревозчика",, Элемент,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииКонтрагентаИлиОрганизации(Знач Оповещение)
	
	ДанныеОбменаССервером = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, УчитыватьНДС, Дата");
	ЗаполнитьЗначенияСвойств(ДанныеОбменаССервером, Объект);
	// Получим данные с сервера
	ДанныеОбменаССервером.ДоговорКонтрагента = Объект.ДоговорКонтрагента;
	ЗначенияДляЗаполнения = ИзменениеКонтрагентаСервер(ДанныеОбменаССервером);
	Объект.ДоговорКонтрагента = ЗначенияДляЗаполнения.ДоговорКонтрагента;
	
	ДоговорПередИзменением = Договор;
	//Договор = Объект.ДоговорКонтрагента;
	
	Оповещ = Новый ОписаниеОповещения("ПриИзмененииКонтрагентаИлиОрганизацииЗавершение", ЭтотОбъект, Новый Структура("Оповещение", Оповещение));
	уатОбщегоНазначенияКлиент.ПриИзмененииДоговора(ЭтаФорма, Оповещ, ДоговорПередИзменением);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииКонтрагентаИлиОрганизацииЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Оповещение = ДополнительныеПараметры.Оповещение;
    
	Если Не Оповещение = Неопределено Тогда 
		ВыполнитьОбработкуОповещения(Оповещение);
	КонецЕсли;

КонецПроцедуры // ПриИзмененииКонтрагентаИлиОрганизацииЗавершение()

&НаСервереБезКонтекста
Функция ИзменениеКонтрагентаСервер(ДанныеДляЗаполнения)
	СтруктураПараметровДляПолученияДоговора = 
		уатЗаполнениеДокументов.ПолучитьСтруктуруПараметровДляПолученияДоговораПокупки();
	
	ЗначенияДляЗаполнения = уатОбщегоНазначенияСервер.ПриИзмененииЗначенияКонтрагента(ДанныеДляЗаполнения,
							СтруктураПараметровДляПолученияДоговора);
	Возврат ЗначенияДляЗаполнения;
КонецФункции

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	Оповещ = Новый ОписаниеОповещения("ДоговорКонтрагентаПриИзмененииЗавершение", ЭтотОбъект);
	уатОбщегоНазначенияКлиент.ДоговорКонтрагентаПриИзменении(ЭтаФорма, Оповещ);
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзмененииЗавершение(Результат, ДопПараметры) Экспорт
	уатОбщегоНазначенияКлиент.ПриИзмененииДоговора(ЭтаФорма, Неопределено, Договор);
КонецПроцедуры

// Вызывается из процедуры уатОбщегоНазначенияКлиент.ПриИзмененииДоговора()
//
&НаКлиенте
Процедура ПриИзмененииДоговораЛокальныеОбработчики() Экспорт
	ОбновитьВсегоВТЧОперацииСервер();
	РассчитатьСуммуДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ТСПриИзменении(Элемент)
	КонтрагентПередИзменением = Контрагент;
	Контрагент = Объект.Контрагент;
	ТСПриИзмененииСервер();
	Если КонтрагентПередИзменением <> Объект.Контрагент Тогда
		ПриИзмененииКонтрагентаИлиОрганизации(Неопределено);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ТС)
		И уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.ТС, "ПринадлежностьТС")
		= ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное") Тогда
		МестонахождениеТС = уатОбщегоНазначения.МестонахождениеТС(Объект.ТС, Объект.ДатаИВремяОтправления);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ТСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтруктураОтбора = Новый Структура();
	
	СтруктураОтбора.Вставить("ПринадлежностьТС", ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Привлеченное"));
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		СтруктураОтбора.Вставить("ВладелецТС", Объект.Контрагент);
	КонецЕсли;
	
	РазрешенныеВидыТС = Новый Массив();
	РазрешенныеВидыТС.Добавить(ВидМоделиТСПоВидуПеревозки(Объект.ВидПеревозки));
	СтруктураОтбора.Вставить("ВидМоделиТС", РазрешенныеВидыТС);
	
	уатИнтерфейсВводаТС.РеквизитТСНачалоВыбора(Элемент, Объект.ТС, ДанныеВыбора, СтандартнаяОбработка, СтруктураОтбора);
КонецПроцедуры

&НаКлиенте
Процедура ТСАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СтруктураОтбора = Новый Структура();
	
	СтруктураОтбора.Вставить("ПринадлежностьТС", ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Привлеченное"));
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		СтруктураОтбора.Вставить("ВладелецТС", Объект.Контрагент);
	КонецЕсли;
	
	РазрешенныеВидыТС = Новый Массив();
	РазрешенныеВидыТС.Добавить(ВидМоделиТСПоВидуПеревозки(Объект.ВидПеревозки));
	СтруктураОтбора.Вставить("ВидМоделиТС", РазрешенныеВидыТС);
	
	уатИнтерфейсВводаТС.РеквизитТСАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка, СтруктураОтбора);
КонецПроцедуры

&НаКлиенте
Процедура ТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтруктураОтбора = Новый Структура();
	
	СтруктураОтбора.Вставить("ПринадлежностьТС", ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Привлеченное"));
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		СтруктураОтбора.Вставить("ВладелецТС", Объект.Контрагент);
	КонецЕсли;
	
	РазрешенныеВидыТС = Новый Массив();
	РазрешенныеВидыТС.Добавить(ВидМоделиТСПоВидуПеревозки(Объект.ВидПеревозки));
	СтруктураОтбора.Вставить("ВидМоделиТС", РазрешенныеВидыТС);
	
	уатИнтерфейсВводаТС.РеквизитТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка, СтруктураОтбора);
КонецПроцедуры

&НаСервере
Процедура ТСПриИзмененииСервер()
	Объект.Водитель = Объект.ТС.Водитель;
	ЗаполнитьПустогоПеревозчикаПоТС();
	
	Объект.Прицеп1 = Справочники.уатТС.ПустаяСсылка();
	Объект.Прицеп2 = Справочники.уатТС.ПустаяСсылка();
	
	Если Элементы.ГруппаПрицеп1.Видимость Тогда 
		Прицеп = ПолучитьПрицеп(Объект.ТС, Объект.Прицеп2);
		Если Не Прицеп = Неопределено Тогда 
			Объект.Прицеп1 = Прицеп;
		КонецЕсли;
	КонецЕсли;
	Если Элементы.Прицеп2.Видимость Тогда
		Прицеп = ПолучитьПрицеп(Объект.ТС, Объект.Прицеп1);
		Если Не Прицеп = Неопределено Тогда 
			Объект.Прицеп2 = Прицеп;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьВсегоПоДокументуНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура();
	
	Если РежимЗаполнения = 1 Тогда // Данные из МЛ.
		ДанныеПоМЛ = ПолучитьДанныеПоМЛСервер(Объект.МаршрутныйЛист);
		ПараметрыФормы.Вставить("Расстояние",     ДанныеПоМЛ.Расстояние);
		ПараметрыФормы.Вставить("ПробегСГрузом",  ДанныеПоМЛ.ПробегСГрузом);
		ПараметрыФормы.Вставить("ПробегПорожний", ДанныеПоМЛ.ПробегПорожний);
		ПараметрыФормы.Вставить("ВремяВПути",     ДанныеПоМЛ.ВремяВПути);
		ПараметрыФормы.Вставить("ВремяСтоянок",   ОбщееВремяСтоянок);
		ПараметрыФормы.Вставить("ВесБрутто",      ДанныеПоМЛ.ВесБрутто);
		ПараметрыФормы.Вставить("Объем",          ДанныеПоМЛ.Объем);
		ПараметрыФормы.Вставить("КоличествоМест", ДанныеПоМЛ.КоличествоМест);
		ПараметрыФормы.Вставить("ВидДокумента",   "уатЗаказПеревозчику_уэ");
				
		ДопВыработка = Новый Массив;
		Для Каждого ТекСтрока Из ДанныеПоМЛ.ВыработкаТСиСотрудников Цикл
			Если НЕ уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрока.ПараметрВыработки, "Предопределенный")
				И уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрока.ПараметрВыработки, "СпособВводаЗначений")
				= ПредопределенноеЗначение("Перечисление.уатСпособыВводаЗначенийВыработкивМЛ_уэ.ВЦеломПоДокументу") Тогда
				ДопВыработка.Добавить(Новый Структура("ПараметрВыработки, Значение", ТекСтрока.ПараметрВыработки, ТекСтрока.КоличествоПлан));
			КонецЕсли;
		КонецЦикла;
		ПараметрыФормы.Вставить("ДопВыработка", ДопВыработка);
		ПараметрыФормы.Вставить("ТолькоПросмотр", Истина);
		
		ВсегоДопВыработка = ВсегоДопВыработка();
		ПараметрыФормы.Вставить("Выработка1", ВсегоДопВыработка.Выработка1);
		ПараметрыФормы.Вставить("Выработка2", ВсегоДопВыработка.Выработка2);
		ПараметрыФормы.Вставить("ПараметрВыработки1", ВсегоДопВыработка.ПараметрВыработки1);
		ПараметрыФормы.Вставить("ПараметрВыработки2", ВсегоДопВыработка.ПараметрВыработки2);
	Иначе 
		ПараметрыФормы.Вставить("Расстояние",                 Объект.Расстояние);
		ПараметрыФормы.Вставить("ВремяВПути",                 Объект.Время);
		ПараметрыФормы.Вставить("ВремяСтоянок",               Объект.Стоянка);
		ПараметрыФормы.Вставить("ВесБрутто",                  Объект.ВесБрутто);
		ПараметрыФормы.Вставить("Объем",                      Объект.Объем);
		ПараметрыФормы.Вставить("КоличествоМест",             Объект.КоличествоМест);
		ПараметрыФормы.Вставить("СтоимостьГруза",             Объект.СтоимостьГруза);
		ПараметрыФормы.Вставить("ВидДокумента",               "уатЗаказПеревозчику_уэ");
		ПараметрыФормы.Вставить("ЗаказПеревозчику_ПоЗаказам", Объект.МаршрутныйЛист.Пустая());
		
		ДопВыработка = Новый Массив;
		Для Каждого ТекСтрока Из Объект.Выработка Цикл
			ДопВыработка.Добавить(Новый Структура("ПараметрВыработки, Значение", ТекСтрока.ПараметрВыработки, ТекСтрока.Значение));
		КонецЦикла;
		ПараметрыФормы.Вставить("ДопВыработка", ДопВыработка);
	КонецЕсли;
		
	ПараметрыФормы.Вставить("ОтображатьСтоимость", Ложь);
	
	Оповещение = Новый ОписаниеОповещения("НадписьВсегоПоДокументуНажатиеЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("ОбщаяФорма.уатРедактированиеМаршрутныхПоказателей", ПараметрыФормы, ЭтотОбъект,,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьВсегоПоДокументуНажатиеЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если РежимЗаполнения = 0 Тогда
		РезультатЗакрытия.Свойство("Расстояние",     Объект.Расстояние);
		РезультатЗакрытия.Свойство("ВремяВПути",     Объект.Время);
		РезультатЗакрытия.Свойство("ВремяСтоянок",   Объект.Стоянка);
		РезультатЗакрытия.Свойство("ВесБрутто",      Объект.ВесБрутто);
		РезультатЗакрытия.Свойство("Объем",          Объект.Объем);
		РезультатЗакрытия.Свойство("КоличествоМест", Объект.КоличествоМест);
		РезультатЗакрытия.Свойство("СтоимостьГруза", Объект.СтоимостьГруза);
	КонецЕсли;
	
	Если РезультатЗакрытия.Свойство("ДопВыработка") Тогда
		Объект.Выработка.Очистить();
		Для Каждого ТекДопВыработка Из РезультатЗакрытия.ДопВыработка Цикл
			НоваяСтрока = Объект.Выработка.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекДопВыработка);
		КонецЦикла;
	КонецЕсли;
	
	РассчитатьПоказателиСервер();
	РассчитатьУслугиПриИзмененииПоказателей();
	ОбновитьДинамическиеПоляСервер();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНадписьИтоги()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если РежимЗаполнения = 1 Тогда // Данные из МЛ.
		НадписьВсегоПоДокументу = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 км / %2 / %3 %4 / %5 %6 / %7 %8",
			Объект.МаршрутныйЛист.Расстояние,
			Формат(уатЗащищенныеФункцииСервер.СложитьВремя(Объект.МаршрутныйЛист.ВремяВПути, ОбщееВремяСтоянок), "ЧДЦ=2; ЧРД=:; ЧН=00:00; ЧГ="),
			Объект.МаршрутныйЛист.ВесБрутто,
			Константы.уатЕдиницаИзмеренияВеса.Получить(),
			Объект.МаршрутныйЛист.Объем, 
			Константы.уатЕдиницаИзмеренияОбъема.Получить(),
			Объект.МаршрутныйЛист.КоличествоМест,
			Справочники.уатВидыУпаковки_уэ.ПолучитьОсновнойВидУпаковки().КраткоеНаименование);
		
	Иначе 
		НадписьВсегоПоДокументу = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 км / %2 / %3 %4 / %5 %6",
			Объект.Расстояние,
			Формат(уатЗащищенныеФункцииСервер.СложитьВремя(Объект.Время, Объект.Стоянка), "ЧДЦ=2; ЧРД=:; ЧН=00:00; ЧГ="),
			Объект.ВесБрутто, 
			Константы.уатЕдиницаИзмеренияВеса.Получить(),
			Объект.Объем,
			Константы.уатЕдиницаИзмеренияОбъема.Получить());
	КонецЕсли;
	
	Если Объект.Выработка.Итог("Значение") Тогда
		НадписьВсегоПоДокументу = НадписьВсегоПоДокументу + " + доп. выработка";
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

&НаКлиенте
Процедура СтатусВыполненияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("Отбор", Новый Структура("ДействуетНаЗаказыПеревозчику", Истина));
	Оповещение = Новый ОписаниеОповещения("СтатусВыполненияПослеВыбораСтатуса", ЭтотОбъект);
	ОткрытьФорму("Справочник.уатСтатусы_уэ.ФормаВыбора", ПараметрыФормы, ЭтотОбъект,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура РежимЗаполненияПриИзменении(Элемент)
	
	Если Объект.Грузы.Количество() ИЛИ Объект.Расходы.Количество() Тогда 
		ТекстНСТР = НСтр("en='Tabular sections ""Order for trucking"" and ""Expenses"" will be cleared. Continue?';ru='Табличные части ""Заказы на ТС"" и ""Расходы"" будут очищены. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("РежимЗаполненияПриИзмененииОтвет", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстНСТР, РежимДиалогаВопрос.ОКОтмена);
	Иначе 
		РежимЗаполненияПриИзмененииЗавершение();
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		ЗаполнитьДопВыработкуПриСоздании();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутныйЛистПриИзменении(Элемент)
	
	ЗаполнитьДеревоЗаказовПоМЛ();
	
	КонтрагентИзменен = Ложь;
	ЗаполнитьРеквизитыПеревозчика(КонтрагентИзменен);
	Если КонтрагентИзменен Тогда 
		ПриИзмененииКонтрагентаИлиОрганизации(Неопределено);
	КонецЕсли;
	
	РассчитатьПоказателиСервер();
	ОбновитьНадписьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура ВодительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ПараметрФормы = Новый Структура("РежимВыбора, Отбор", Истина, Новый Структура("Контрагент", Объект.Контрагент));
	ОткрытьФорму("РегистрСведений.уатСотрудникиКонтрагентов.ФормаСписка", ПараметрФормы, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ВодительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("РегистрСведенийКлючЗаписи.уатСотрудникиКонтрагентов") тогда
		СтандартнаяОбработка = Ложь;
		Объект.Водитель = ФизЛицоВодителяКонтрагента(ВыбранноеЗначение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Прицеп1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура("ТекущаяСтрока", Объект.Прицеп1);
	ФормаВыбора = ПолучитьФорму("Справочник.уатТС.ФормаВыбора", ПараметрыФормы, Элемент);
	
	ЭлементОтбора = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("Ссылка");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.НеРавно;
	ЭлементОтбора.ПравоеЗначение   = Объект.Прицеп2;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.Использование    = Истина;
	
	ЭлементОтбора = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("ЭтоГруппа");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение   = Ложь;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.Использование    = Истина;
	
	ЭлементОтбора = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("ПометкаУдаления");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение   = Ложь;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.Использование    = Истина;
	
	ГруппаОтбора = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы        = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	ГруппаОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ГруппаОтбора.Использование    = Истина;
	
	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("ВидМоделиТС");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение   = ПредопределенноеЗначение("Перечисление.уатВидыМоделейТС.Прицеп");
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.Использование    = Истина;
	
	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("ВидМоделиТС");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение   = ПредопределенноеЗначение("Перечисление.уатВидыМоделейТС.Оборудование");
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.Использование    = Истина;
	
	Если АвторизованВнешнийПользователь Тогда
		ЭлементОтбора = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("ВладелецТС");
		ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение   = Объект.Контрагент;
		ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		ЭлементОтбора.Использование    = Истина;
	КонецЕсли;
	
	ФормаВыбора.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Прицеп1АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	УстановитьСписокПрицеповДляПодбора(
		?(Ожидание=0, "", Текст),
		Объект.Прицеп2,
		ДанныеВыбора,
		АвторизованВнешнийПользователь,
		Объект.Контрагент
	);
	
КонецПроцедуры

&НаКлиенте
Процедура Прицеп1ОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если Текст = "" Тогда 
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	УстановитьСписокПрицеповДляПодбора(
		Текст,
		Объект.Прицеп2,
		ДанныеВыбора,
		АвторизованВнешнийПользователь,
		Объект.Контрагент
	);
	
КонецПроцедуры

&НаКлиенте
Процедура Прицеп2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура("ТекущаяСтрока", Объект.Прицеп2);
	ФормаВыбора = ПолучитьФорму("Справочник.уатТС.ФормаВыбора", ПараметрыФормы, Элемент);
	
	ЭлементОтбора = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("Ссылка");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.НеРавно;
	ЭлементОтбора.ПравоеЗначение   = Объект.Прицеп1;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.Использование    = Истина;
	
	ЭлементОтбора = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("ЭтоГруппа");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение   = Ложь;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.Использование    = Истина;
	
	ЭлементОтбора = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("ПометкаУдаления");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение   = Ложь;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.Использование    = Истина;
	
	ГруппаОтбора = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы        = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	ГруппаОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ГруппаОтбора.Использование    = Истина;
	
	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("ВидМоделиТС");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение   = ПредопределенноеЗначение("Перечисление.уатВидыМоделейТС.Прицеп");
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.Использование    = Истина;
	
	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("ВидМоделиТС");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение   = ПредопределенноеЗначение("Перечисление.уатВидыМоделейТС.Оборудование");
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.Использование    = Истина;
	
	Если АвторизованВнешнийПользователь Тогда
		ЭлементОтбора = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("ВладелецТС");
		ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение   = Объект.Контрагент;
		ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		ЭлементОтбора.Использование    = Истина;
	КонецЕсли;
	
	ФормаВыбора.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Прицеп2АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	УстановитьСписокПрицеповДляПодбора(
		?(Ожидание=0, "", Текст),
		Объект.Прицеп1,
		ДанныеВыбора,
		АвторизованВнешнийПользователь,
		Объект.Контрагент
	);
	
КонецПроцедуры

&НаКлиенте
Процедура Прицеп2ОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если Текст = "" Тогда 
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	УстановитьСписокПрицеповДляПодбора(
		Текст,
		Объект.Прицеп1,
		ДанныеВыбора,
		АвторизованВнешнийПользователь,
		Объект.Контрагент
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	мВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком");
	
	уатОбщегоНазначенияТиповыеКлиент.уатНачалоВыбораЗначенияДоговораКонтрагента(Объект, ЭтотОбъект, Элемент, Объект.Контрагент, 
	Объект.ДоговорКонтрагента, мВидДоговора, СтандартнаяОбработка);
КонецПроцедуры   

&НаКлиенте
Процедура ДоговорКонтрагентаСоздание(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВидДоговораДоступныеЗначения = Новый Массив;
	
	мВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком");
	ВидДоговораДоступныеЗначения.Добавить(мВидДоговора);
	
	ПараметрыФормы = Новый Структура(); 
	ПараметрыФормы.Вставить("Владелец", Объект.Контрагент);
	ПараметрыФормы.Вставить("ВидДоговораДоступныеЗначения", ВидДоговораДоступныеЗначения);
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыГрузы

&НаКлиенте
Процедура ГрузыПриИзменении(Элемент)
	
	ОбновитьДинамическиеПоляСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда	
		ТекДанные = Элементы.Грузы.ТекущиеДанные;
		ТекДанные.Количество = 1;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОбновитьСтатусыГрузовСервер();
	ОбновитьВсегоВТЧОперацииСервер();
КонецПроцедуры

&НаКлиенте
Процедура ГрузыКоличествоПриИзменении(Элемент)
	ОбновитьВесоОбъемныеПоказателиСервер();
КонецПроцедуры

&НаКлиенте
Процедура ГрузыГрузПриИзменении(Элемент)
	ТекСтрока = Элементы.Грузы.ТекущиеДанные;
	Если ТекСтрока = Неопределено ИЛИ НЕ ЗначениеЗаполнено(ТекСтрока.Заказ) Тогда
		Возврат;
	КонецЕсли;
	
	ТекСтрока.ГрузовоеМесто = Неопределено;
	ТекСтрока.Количество = 1;
	ТекСтрока.ЕдиницаИзмерения = Неопределено;
	
	ОбновитьВесоОбъемныеПоказателиСервер();
КонецПроцедуры

&НаКлиенте
Процедура ГрузыПакетНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ТекСтрока = Элементы.Грузы.ТекущиеДанные;
	Если ТекСтрока = Неопределено ИЛИ НЕ ЗначениеЗаполнено(ТекСтрока.Заказ) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеВыбора = СписокГрузМестЗаказаСервер(ТекСтрока.Заказ);
КонецПроцедуры

&НаКлиенте
Процедура ГрузыПакетОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекДанные = Элементы.Грузы.ТекущиеДанные;
	Если ТекДанные = Неопределено ИЛИ НЕ ЗначениеЗаполнено(ТекДанные.Заказ) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Номенклатура") И ЗначениеЗаполнено(ВыбранноеЗначение) тогда
		ТекДанные.ЕдиницаИзмерения = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "ЕдиницаХраненияОстатков");
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.уатГрузовыеМеста_уэ") И ЗначениеЗаполнено(ВыбранноеЗначение) тогда
		РеквизитыГрузовогоМеста = уатОбщегоНазначенияТиповые.ПолучитьЗначенияРеквизитов(ВыбранноеЗначение, "ВидУпаковки, ТипКонтейнера, Контейнер");
		Если РеквизитыГрузовогоМеста.Контейнер Тогда
			ТекДанные.ЕдиницаИзмерения = РеквизитыГрузовогоМеста.ТипКонтейнера;
		Иначе
			ТекДанные.ЕдиницаИзмерения = РеквизитыГрузовогоМеста.ВидУпаковки;
		КонецЕсли;
	Иначе
		ТекДанные.ЕдиницаИзмерения = Неопределено;
	КонецЕсли;
	
	ТекДанные.Количество = ПолучитьКоличествоГрузаПоЗаказу(ТекДанные.Заказ, ВыбранноеЗначение, ТекДанные.ЕдиницаИзмерения);
	
	ОбновитьВесоОбъемныеПоказателиСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузыПакетПриИзменении(Элемент)
	
	ОбновитьВесоОбъемныеПоказателиСервер();
	
	ТекДанные = Элементы.Грузы.ТекущиеДанные;
	Если ТекДанные = Неопределено ИЛИ НЕ ЗначениеЗаполнено(ТекДанные.Заказ) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекДанные.ГрузовоеМесто) = Тип("СправочникСсылка.Номенклатура") И ЗначениеЗаполнено(ТекДанные.ГрузовоеМесто) тогда
		ТекДанные.ЕдиницаИзмерения = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекДанные.ГрузовоеМесто, "ЕдиницаХраненияОстатков");
	ИначеЕсли ТипЗнч(ТекДанные.ГрузовоеМесто) = Тип("СправочникСсылка.уатГрузовыеМеста_уэ") И ЗначениеЗаполнено(ТекДанные.ГрузовоеМесто) тогда
		РеквизитыГрузовогоМеста = уатОбщегоНазначенияТиповые.ПолучитьЗначенияРеквизитов(ТекДанные.ГрузовоеМесто, "ВидУпаковки, ТипКонтейнера, Контейнер");
		Если РеквизитыГрузовогоМеста.Контейнер Тогда
			ТекДанные.ЕдиницаИзмерения = РеквизитыГрузовогоМеста.ТипКонтейнера;
		Иначе
			ТекДанные.ЕдиницаИзмерения = РеквизитыГрузовогоМеста.ВидУпаковки;
		КонецЕсли;
	Иначе
		ТекДанные.ЕдиницаИзмерения = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыОперации

&НаКлиенте
Процедура ОперацииПослеУдаления(Элемент)
	РассчитатьСуммуДокумента();
	ОбновитьВсегоВТЧОперацииСервер();
	ОбновитьПараметрВыработкиВременный();
	ОбновитьПодвалРасходов();
КонецПроцедуры

&НаКлиенте
Процедура ОперацииВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекСтрока = Элементы.Операции.ТекущиеДанные;
	
	Если Поле = Элементы.ОперацииТариф Тогда
		ПоказатьЗначение(Неопределено, ТекСтрока.Тариф);
		
	ИначеЕсли Поле = Элементы.ОперацииТарифПараметрВыработки Тогда
		ПоказатьЗначение(Неопределено, ТекСтрока.ПараметрВыработки);
		
	ИначеЕсли Поле = Элементы.ОперацииРучнойВвод
		И (Не АвторизованВнешнийПользователь Или УровеньДоступаКРасходам = ПредопределенноеЗначение("Перечисление.уатУровеньДоступаКУслугам.РедактированиеУслугРазрешено")) Тогда
		ТекСтрока.РучнойВвод = НЕ ТекСтрока.РучнойВвод;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОперацииПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекСтрока = Элементы.Операции.ТекущиеДанные;
		
	Если НоваяСтрока Тогда
		ТекСтрока.РучнойВвод = Истина;
		
		Если НЕ Копирование Тогда
			ТекСтрока.СтатьяРасходов = ПредопределенноеЗначение("Справочник.уатСтатьиРасходов.ОсновнаяСтатьяРасходов");
			ТекСтрока.Валюта         = мВалютаРегламентированногоУчета;
			Если Объект.УчитыватьНДС Тогда
				ТекСтрока.СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
					ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнаяСтавкаНДС");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьФорматРедактированияКоличествоВыработки();
	
	ДанныеСтрокиРасходы = Новый Структура("Валюта", ТекСтрока.Валюта);
КонецПроцедуры

&НаКлиенте
Процедура ОперацииПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОбновитьПараметрВыработкиВременный();
	ОбновитьПодвалРасходов();
КонецПроцедуры

&НаКлиенте
Процедура ОперацииПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если АвторизованВнешнийПользователь
		И УровеньДоступаКРасходам = ПредопределенноеЗначение("Перечисление.уатУровеньДоступаКУслугам.РедактированиеЗапрещено") Тогда
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОперацииПередНачаломИзменения(Элемент, Отказ)
	ТекДанныеСтроки = Элементы.Операции.ТекущиеДанные;
	Если АвторизованВнешнийПользователь Тогда
		Если УровеньДоступаКРасходам = ПредопределенноеЗначение("Перечисление.уатУровеньДоступаКУслугам.РедактированиеЗапрещено") Тогда
			Отказ = Истина;
		ИначеЕсли УровеньДоступаКРасходам = ПредопределенноеЗначение("Перечисление.уатУровеньДоступаКУслугам.РедактированиеСтрокРучногоВводаРазрешено") И Не ТекДанныеСтроки.РучнойВвод Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОперацииПередУдалением(Элемент, Отказ)
	ТекДанныеСтроки = Элементы.Операции.ТекущиеДанные;
	Если АвторизованВнешнийПользователь Тогда
		Если УровеньДоступаКРасходам = ПредопределенноеЗначение("Перечисление.уатУровеньДоступаКУслугам.РедактированиеЗапрещено") Тогда
			Отказ = Истина;
		ИначеЕсли УровеньДоступаКРасходам = ПредопределенноеЗначение("Перечисление.уатУровеньДоступаКУслугам.РедактированиеСтрокРучногоВводаРазрешено") И Не ТекДанныеСтроки.РучнойВвод Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОперацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура")
		И ВыбранноеЗначение.Свойство("ТаблицаРаспределения")
		И ВыбранноеЗначение.ИмяТЧ = "Расходы" Тогда
		
		ДопПараметры = Новый Структура("ВыбранноеЗначение", ВыбранноеЗначение);
		
		Если Объект.Расходы.Количество() > 0 Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ПолучаемыеУслугиОбработкаВыбораВопрос", ЭтотОбъект, ДопПараметры);
			ТекстНСТР = НСтр("en='Delete unassigned lines?';ru='Удалить нераспределенные строки?'");
			ПоказатьВопрос(ОписаниеОповещения, ТекстНСТР, РежимДиалогаВопрос.ДаНетОтмена,,КодВозвратаДиалога.Да);
		Иначе
			ПолучаемыеУслугиОбработкаВыбораЗавершение(ДопПараметры);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПолучаемыеУслугиОбработкаВыбораВопрос(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		мсвСтрокУдалить = Объект.Расходы.НайтиСтроки(Новый Структура("Груз", ПредопределенноеЗначение("Документ.уатЗаказГрузоотправителя.ПустаяСсылка")));
		Для Каждого ТекСтрока Из мсвСтрокУдалить Цикл
			Объект.Расходы.Удалить(ТекСтрока);
		КонецЦикла;
		Модифицированность = Истина;
	ИначеЕсли Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	ПолучаемыеУслугиОбработкаВыбораЗавершение(ДопПараметры);
КонецПроцедуры

&НаСервере
Процедура ПолучаемыеУслугиОбработкаВыбораЗавершение(ДопПараметры)
	мТаб = Неопределено;
	ДопПараметры.ВыбранноеЗначение.Свойство("ТаблицаРаспределения", мТаб);
	Для Каждого ТекСтрока Из мТаб Цикл
		НовСтрока = Объект.Расходы.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока, ТекСтрока);
		НовСтрока.Груз = ТекСтрока.ЗаказГрузоотправителя;
		РассчитатьСуммуВсегоВстрокеТЧСервер(НовСтрока);
		Модифицированность = Истина;
	КонецЦикла;
	ОбновитьПараметрВыработкиВременный();
	РассчитатьСуммуДокумента();
	ОбновитьВсегоВТЧОперацииСервер();
КонецПроцедуры

&НаКлиенте
Процедура ОперацииНоменклатураПриИзменении(Элемент)
	ТекСтрокаТабличнойЧасти = Элементы.Операции.ТекущиеДанные;
	
	ТекСтрокаТабличнойЧасти.Тариф = Неопределено;
	ТекСтрокаТабличнойЧасти.Цена = 0;
	ТекСтрокаТабличнойЧасти.Количество = 0;
	ТекСтрокаТабличнойЧасти.СтатьяРасходов = уатОбщегоНазначенияСервер.СтатьяРасходовНоменклатуры(
		ТекСтрокаТабличнойЧасти.Номенклатура);
	
	Если Объект.УчитыватьНДС Тогда
		ТекСтрокаТабличнойЧасти.СтавкаНДС = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(
			ТекСтрокаТабличнойЧасти.Номенклатура, "СтавкаНДС");
	Иначе
		ТекСтрокаТабличнойЧасти.СтавкаНДС = Неопределено;
	КонецЕсли;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрокаТабличнойЧасти);
	
	УстановитьФлагРучногоРедактирования(ТекСтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура ОперацииКоличествоПриИзменении(Элемент)
	ТекСтрокаТабличнойЧасти = Элементы.Операции.ТекущиеДанные;
	Если ТекСтрокаТабличнойЧасти.ПараметрВыработкиВременный Тогда 
		уатЗащищенныеФункцииСервер.КонтрольВводаВремени(ТекСтрокаТабличнойЧасти.КоличествоВыработка);
		ТекСтрокаТабличнойЧасти.Количество = уатОбщегоНазначения.уатВремяВСекунды(ТекСтрокаТабличнойЧасти.КоличествоВыработка)/3600;
	Иначе
		ТекСтрокаТабличнойЧасти.Количество = ТекСтрокаТабличнойЧасти.КоличествоВыработка;
	КонецЕсли;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрокаТабличнойЧасти, "Факт");
	
	УстановитьФлагРучногоРедактирования(ТекСтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура ОперацииЦенаПриИзменении(Элемент)
	ТекСтрокаТабличнойЧасти = Элементы.Операции.ТекущиеДанные;
	РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрокаТабличнойЧасти, "Факт");
	УстановитьФлагРучногоРедактирования(ТекСтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура ОперацииСуммаПриИзменении(Элемент)
	ТекСтрокаТабличнойЧасти = Элементы.Операции.ТекущиеДанные;
	
	Если ТекСтрокаТабличнойЧасти.Количество <> 0 Тогда
		ТекСтрокаТабличнойЧасти.Цена = ТекСтрокаТабличнойЧасти.Сумма / ТекСтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	
	РассчитатьСуммуНДС(ТекСтрокаТабличнойЧасти, "Факт");
	РассчитатьСуммуВсегоВстрокеТЧ(ТекСтрокаТабличнойЧасти, "Факт");
	
	УстановитьФлагРучногоРедактирования(ТекСтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура ОперацииСуммаНДСПриИзменении(Элемент)
	ТекСтрокаТабличнойЧасти = Элементы.Операции.ТекущиеДанные;
	РассчитатьСуммуВсегоВстрокеТЧ(ТекСтрокаТабличнойЧасти, "Факт");
	
	УстановитьФлагРучногоРедактирования(ТекСтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура ОперацииСуммаНДСПланПриИзменении(Элемент)
	ТекСтрокаТабличнойЧасти = Элементы.Операции.ТекущиеДанные;
	РассчитатьСуммуВсегоВстрокеТЧ(ТекСтрокаТабличнойЧасти, "План");
	
	УстановитьФлагРучногоРедактирования(ТекСтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура ОперацииСтавкаНДСПриИзменении(Элемент)
	ТекСтрокаТабличнойЧасти = Элементы.Операции.ТекущиеДанные;
	РассчитатьСуммуНДС(ТекСтрокаТабличнойЧасти);
	УстановитьФлагРучногоРедактирования(ТекСтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура ОперацииКоличествоПланПриИзменении(Элемент)
	ТекСтрокаТабличнойЧасти = Элементы.Операции.ТекущиеДанные;
	Если ТекСтрокаТабличнойЧасти.ПараметрВыработкиВременный Тогда 
		уатЗащищенныеФункцииСервер.КонтрольВводаВремени(ТекСтрокаТабличнойЧасти.КоличествоВыработкаПлан);
		ТекСтрокаТабличнойЧасти.КоличествоПлан = уатОбщегоНазначения.уатВремяВСекунды(ТекСтрокаТабличнойЧасти.КоличествоВыработкаПлан)/3600;
	Иначе
		ТекСтрокаТабличнойЧасти.КоличествоПлан = ТекСтрокаТабличнойЧасти.КоличествоВыработкаПлан;
	КонецЕсли;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрокаТабличнойЧасти, "План");
	
	УстановитьФлагРучногоРедактирования(ТекСтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура ОперацииЦенаПланПриИзменении(Элемент)
	ТекСтрокаТабличнойЧасти = Элементы.Операции.ТекущиеДанные;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрокаТабличнойЧасти, "План");
	УстановитьФлагРучногоРедактирования(ТекСтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура ОперацииСуммаПланПриИзменении(Элемент)
	ТекСтрокаТабличнойЧасти = Элементы.Операции.ТекущиеДанные;
	
	Если ТекСтрокаТабличнойЧасти.КоличествоПлан <> 0 Тогда
		ТекСтрокаТабличнойЧасти.ЦенаПлан = ТекСтрокаТабличнойЧасти.СуммаПлан / ТекСтрокаТабличнойЧасти.КоличествоПлан;
	КонецЕсли;
	
	РассчитатьСуммуНДС(ТекСтрокаТабличнойЧасти, "План");
	РассчитатьСуммуВсегоВстрокеТЧ(ТекСтрокаТабличнойЧасти, "План");
	
	УстановитьФлагРучногоРедактирования(ТекСтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура ОперацииВалютаПриИзменении(Элемент)
	РасходыПриИзмененииВалюты();
КонецПроцедуры

&НаКлиенте
Процедура ОперацииСтатьяРасходовПриИзменении(Элемент)
	ТекСтрокаТабличнойЧасти = Элементы.Операции.ТекущиеДанные;
	УстановитьФлагРучногоРедактирования(ТекСтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура ВидПеревозкиПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЭлектронныеПеревозочныеДокументы

&НаКлиенте
Процедура ЭлектронныеПеревозочныеДокументыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ЭлектронныеПеревозочныеДокументы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Поле = Элементы.ЭлектронныеПеревозочныеДокументыСостояниеЭДО Тогда
		// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
		ОбменСКонтрагентамиКлиент.СостояниеЭДОНажатие_ФормаСписка(ТекущиеДанные.ЭПД, СтандартнаяОбработка);
		// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами 
	ИначеЕсли Поле = Элементы.ЭлектронныеПеревозочныеДокументыЗаказНаТС 
		И ЗначениеЗаполнено(ТекущиеДанные.ЗаказНаТС) Тогда
		ПоказатьЗначение(Неопределено, ТекущиеДанные.ЗаказНаТС);
	Иначе
		ПоказатьЗначение(Неопределено, ТекущиеДанные.ЭПД);
	КонецЕсли; 
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ЗаполнитьУслугиПоШаблону(Команда)
	Если Объект.Расходы.Количество() > 0 Тогда
		ОписаниеОповещ = Новый ОписаниеОповещения("ЗаполнитьУслугиПоШаблонуВопрос", ЭтотОбъект);
		ТекстНСТР = НСтр("en='To fill with cleaning tables?';ru='Заполнить с очисткой таблицы?'");
		ПоказатьВопрос(ОписаниеОповещ, ТекстНСТР, РежимДиалогаВопрос.ДаНетОтмена);
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Справочник.уатШаблоныУслуг_уэ.ФормаВыбора",, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьУслугиПоШаблонуВопрос(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.Расходы.Очистить();
		Модифицированность = Истина;
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
	Иначе
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Справочник.уатШаблоныУслуг_уэ.ФормаВыбора",, ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУслугиПоШаблонуСервер(Шаблон)
	ОсновнаяСтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
		ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнаяСтавкаНДС");
	
	Для Каждого ТекСтрока Из Шаблон.Услуги Цикл
		НоваяСтрока = Объект.Расходы.Добавить();
		НоваяСтрока.Номенклатура = ТекСтрока.Номенклатура;
		НоваяСтрока.Количество   = ТекСтрока.Количество;
		Если ИспользоватьПлановыеУслуги Тогда
			НоваяСтрока.КоличествоПлан = ТекСтрока.Количество;
		КонецЕсли;
		Если Объект.УчитыватьНДС Тогда
			Если ЗначениеЗаполнено(НоваяСтрока.Номенклатура.СтавкаНДС) Тогда
				НоваяСтрока.СтавкаНДС = НоваяСтрока.Номенклатура.СтавкаНДС;
			Иначе
				НоваяСтрока.СтавкаНДС = ОсновнаяСтавкаНДС;
			КонецЕсли;
		КонецЕсли;
		
		НоваяСтрока.СтатьяРасходов = уатОбщегоНазначенияСервер.СтатьяРасходовНоменклатуры(НоваяСтрока.Номенклатура);
	КонецЦикла;
	
	ОбновитьПараметрВыработкиВременный();
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПолучаемыеУслуги(Команда)
	Если Объект.Расходы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстНСТР = НСтр("en='Clear rendering services?';ru='Очистить получаемые услуги?'");
	ПоказатьВопрос(Новый ОписаниеОповещения("ОчиститьПолучаемыеУслугиОтвет", ЭтотОбъект),
		ТекстНСТР, РежимДиалогаВопрос.ОКОтмена);
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПолучаемыеУслугиОтвет(Результат, ДопПараметры) Экспорт
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Объект.Расходы.Очистить();
		РассчитатьСуммуДокумента();
		ОбновитьВсегоВТЧОперацииСервер();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьПолучаемыеУслугиПоГрузам(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Дата", Объект.Дата);
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("ИмяТЧ", "Расходы");
	
	мГрузы = Новый Массив;
	Для Каждого ТекСтрока Из Объект.Грузы Цикл
		Если мГрузы.Найти(ТекСтрока.Заказ) = Неопределено Тогда
			мГрузы.Добавить(ТекСтрока.Заказ);
		КонецЕсли;
	КонецЦикла;
	ПараметрыФормы.Вставить("Грузы", мГрузы);
	
	флУчитыватьНДС = Ложь;
	мУслуги = Новый Массив;
	Для Каждого ТекСтрока Из Объект.Расходы Цикл
		Если ЗначениеЗаполнено(ТекСтрока.Груз) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураСтроки = Новый Структура("ЗаказГрузоотправителя, Номенклатура, СтатьяРасходов, Тариф, Цена, Количество, Сумма, СтавкаНДС, СуммаНДС, Валюта, УчитыватьНДС, СуммаВключаетНДС, РучнойВвод");
		Если ИспользоватьПлановыеУслуги Тогда
			СтруктураСтроки.Вставить("ЦенаПлан");
			СтруктураСтроки.Вставить("КоличествоПлан");
			СтруктураСтроки.Вставить("СуммаПлан");
			СтруктураСтроки.Вставить("СуммаНДСПлан");
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтруктураСтроки, ТекСтрока);
		СтруктураСтроки.ЗаказГрузоотправителя = ТекСтрока.Груз;
		//СтруктураСтроки.Валюта = Объект.ВалютаДокумента;
		СтруктураСтроки.УчитыватьНДС = Объект.УчитыватьНДС;
		СтруктураСтроки.СуммаВключаетНДС = Объект.СуммаВключаетНДС;
		мУслуги.Добавить(СтруктураСтроки);
		
		флУчитыватьНДС = флУчитыватьНДС ИЛИ СтруктураСтроки.УчитыватьНДС;
	КонецЦикла;
	
	ПараметрыФормы.Вставить("Услуги", мУслуги);
	ПараметрыФормы.Вставить("УчитыватьНДС", флУчитыватьНДС);
	
	СтруктураНеРедактируемыхПараметров = Новый Структура("Организация");
	ПараметрыФормы.Вставить("НередактируемыеПараметры", СтруктураНеРедактируемыхПараметров);
	
	ПараметрыФормы.Вставить("ДокументОбъект", уатОбщегоНазначенияКлиентСервер.СтруктураДокумента(Объект, "уатЗаказПеревозчику_уэ"));
	ПараметрыФормы.Вставить("ИмяДокумента", "уатЗаказПеревозчику_уэ");
	ПараметрыФормы.Вставить("ИспользоватьПлановыеУслуги", ИспользоватьПлановыеУслуги);
	
	ОткрытьФорму("ОбщаяФорма.уатРаспределениеУслугПоЗаказам_уэ", ПараметрыФормы, Элементы.Операции);
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПолучаемыеУслуги(Команда)
	Если Модифицированность Тогда
		ТекстНСТР = НСтр("en='To perform this operation it is necessary to record the document. Continue?';ru='Для выполнения данной операции необходимо записать документ. Продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("РассчитатьПолучаемыеУслугиЗаписать", ЭтотОбъект, Новый	Структура("План", Ложь)),
			ТекстНСТР, РежимДиалогаВопрос.ОКОтмена, , КодВозвратаДиалога.ОК);
		Возврат;
	КонецЕсли;
	
	РассчитатьПолучаемыеУслугиДействия();
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПолучаемыеУслугиЗаписать(Результат, ДопПараметры) Экспорт
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Записать(Новый Структура("НеПересчитыватьИтоги", Истина));
	Исключение
		Возврат;
	КонецПопытки;
	
	РассчитатьПолучаемыеУслугиДействия(ДопПараметры.План);
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПолучаемыеУслугиДействия(флПлан = Ложь)
	Если Объект.Расходы.Количество() > 0 Тогда
		флЕстьРучнойВвод = (Объект.Расходы.НайтиСтроки(Новый Структура("РучнойВвод", Истина)).Количество()>0);
		Если ИспользоватьПлановыеУслуги Тогда
			Если флПлан Тогда
				ТекстАнгл = "Routine data table portion will be cleared! Continue?";
				ТекстРус = "Плановые данные табличной части будут очищены! Продолжить?";
			Иначе
				ТекстАнгл = "The actual data of tabular section will be cleared! Continue?";
				ТекстРус = "Фактические данные табличной части будут очищены! Продолжить?";
			КонецЕсли;
		Иначе
			ТекстАнгл = "Tabular section will be cleared! Continue?";
			ТекстРус = "Табличная часть будет очищена! Продолжить?";
		КонецЕсли;
		
		Если флЕстьРучнойВвод Тогда
			ТекстАнгл = ТекстАнгл + "
				|Yes - save manual input data, No - clear manual input data.";
			ТекстРус = ТекстРус + "
				|Да - сохранить строки с ручным вводом, Нет - удалить строки с ручным вводом.";
			РежимДиалога = РежимДиалогаВопрос.ДаНетОтмена;
		Иначе
			РежимДиалога = РежимДиалогаВопрос.ОКОтмена;
		КонецЕсли;
		
		ТекстНСТР = НСтр("en='" + ТекстАнгл + "'; ru='" + ТекстРус + "'");
		ПоказатьВопрос(Новый ОписаниеОповещения("РассчитатьПолучаемыеУслугиОтвет", ЭтотОбъект, Новый Структура("План", флПлан)), ТекстНСТР, РежимДиалога);
	Иначе
		РассчитатьПолучаемыеУслугиЗавершение(флПлан);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПолучаемыеУслугиОтвет(Результат, ДопПараметры) Экспорт
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	флУдалитьРучнойВвод = (Результат = КодВозвратаДиалога.Нет);
	
	РассчитатьПолучаемыеУслугиЗавершение(ДопПараметры.План,, флУдалитьРучнойВвод);
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПолучаемыеУслугиЗавершение(флПлан = Ложь, флСообщение = Ложь, флУдалитьРучнойВвод = Ложь)
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "ЗаказПеревозчику.РасчетРасходов");
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
	Если флУдалитьРучнойВвод Тогда
		мсвСтрокиУдалить = Объект.Расходы.НайтиСтроки(Новый Структура("РучнойВвод", Истина));
		Для Каждого ТекСтрокаУдалить Из мсвСтрокиУдалить Цикл
			Объект.Расходы.Удалить(ТекСтрокаУдалить);
		КонецЦикла;
	КонецЕсли;
	
	ДопПараметры = Новый Структура("ЗаполнятьТЧРасходы", Ложь);
	СтруктураДокумента = уатОбщегоНазначенияКлиентСервер.СтруктураДокумента(Объект, "уатЗаказПеревозчику_уэ", ДопПараметры);
	РассчитатьУслугиСервер(СтруктураДокумента, флПлан);
	уатРасчетыПоТарифамКлиентСервер_уэ.ЗаполнитьДоходыРасходыИзСтруктуры(Объект, СтруктураДокумента, "Расходы", "уатЗаказПеревозчику_уэ", флПлан, флСообщение);
	
	РассчитатьСуммуДокумента();
	ОбновитьДинамическиеПоляСервер();
	
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПолучаемыеУслугиПлан(Команда)
	Если Модифицированность Тогда
		ТекстНСТР = НСтр("en='To perform this operation it is necessary to record the document. Continue?';ru='Для выполнения данной операции необходимо записать документ. Продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("РассчитатьПолучаемыеУслугиЗаписать", ЭтотОбъект, Новый Структура("План", Истина)),
			ТекстНСТР, РежимДиалогаВопрос.ОКОтмена, , КодВозвратаДиалога.ОК);
		Возврат;
	КонецЕсли;
	
	РассчитатьПолучаемыеУслугиДействия(Истина);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура РассчитатьУслугиСервер(СтруктураДокумента, флПлан = Ложь)
	уатРасчетыПоТарифам_уэ.РассчитатьУслугиПоЗаказуПеревозчику(СтруктураДокумента, флПлан);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьФактИзПлана(Команда)
	Если Объект.Расходы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	ТекстНСТР = НСтр("en='The actual data table will be cleared. To continue the operation?';ru='Фактические данные табличной части будут очищены. Продолжить выполнение операции?'");
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьФактИзПланаОтвет", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстНСТР, РежимДиалогаВопрос.ОКОтмена, 0);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьФактИзПланаОтвет(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.ОК Тогда
		ЗаполнитьФактИзПланаЗавершениеСервер();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФактИзПланаЗавершениеСервер()
	Для Каждого ТекСтрока Из Объект.Расходы Цикл
		Если ТекСтрока.СтатьяРасходов.НеКопироватьПлановыеРасходыВФактические Тогда
			Продолжить;
		КонецЕсли;
		
		ТекСтрока.Количество = ТекСтрока.КоличествоПлан;
		ТекСтрока.Цена = ТекСтрока.ЦенаПлан;
		ТекСтрока.Сумма = ТекСтрока.СуммаПлан;
		ТекСтрока.СуммаНДС = ТекСтрока.СуммаНДСПлан;
		ТекСтрока.Всего = ТекСтрока.ВсегоПлан;
	КонецЦикла;
	
	РассчитатьСуммуДокумента();
	ОбновитьДинамическиеПоляСервер();
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПоказатели(Команда)
	РассчитатьПоказателиСервер();
	РассчитатьУслугиПриИзмененииПоказателей();
	ОбновитьДинамическиеПоляСервер();
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Процедура РассчитатьПоказателиСервер()
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	ДокОбъект.РассчитатьИтоговыеПоказатели();
	ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьРасходыВСтроке(Команда)
	ТекСтрока = Элементы.Операции.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПересчитатьРасходыВТекущейСтроке(ТекСтрока, Ложь);
	
	РассчитатьСуммуДокумента();
	ОбновитьПараметрВыработкиВременный();
	ОбновитьВсегоВТЧОперацииСервер();
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьРасходыВСтрокеПлан(Команда)
	ТекСтрока = Элементы.Операции.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПересчитатьРасходыВТекущейСтроке(ТекСтрока, Истина);
	
	РассчитатьСуммуДокумента();
	ОбновитьПараметрВыработкиВременный();
	ОбновитьВсегоВТЧОперацииСервер();
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьРасходы(Команда)
	Для Каждого ТекСтрока Из Объект.Расходы Цикл
		ПересчитатьРасходыВТекущейСтроке(ТекСтрока, Ложь);
	КонецЦикла;
	
	РассчитатьСуммуДокумента();
	ОбновитьПараметрВыработкиВременный();
	ОбновитьВсегоВТЧОперацииСервер();
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьРасходыПлан(Команда)
	Для Каждого ТекСтрока Из Объект.Расходы Цикл
		ПересчитатьРасходыВТекущейСтроке(ТекСтрока, Истина);
	КонецЦикла;
	
	РассчитатьСуммуДокумента();
	ОбновитьПараметрВыработкиВременный();
	ОбновитьВсегоВТЧОперацииСервер();
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьРасходыВТекущейСтроке(ТекСтрока, флПлан = Ложь)
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Расстояние", Объект.Расстояние);
	ДопПараметры.Вставить("Время", Объект.Время);
	ДопПараметры.Вставить("ВесГруза", Объект.ВесБрутто);
	ДопПараметры.Вставить("ОбъемГруза", Объект.Объем);
	ДопПараметры.Вставить("КоличествоМест", Объект.КоличествоМест);
	ДопПараметры.Вставить("СтоимостьГруза", уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрока.Груз, "СтоимостьГруза"));
	ДопПараметры.Вставить("ВалютаТоваров", уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрока.Груз, "ВалютаТоваров"));
	ДопПараметры.Вставить("Грузоподъемность", 0);
	ДопПараметры.Вставить("КлассГруза", 0);
	ДопПараметры.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	ДопПараметры.Вставить("КурсДокумента", Объект.КурсВзаиморасчетов);
	ДопПараметры.Вставить("КратностьДокумента", Объект.КратностьВзаиморасчетов);
	ДопПараметры.Вставить("Дата", Объект.Дата);
	
	ДопПараметры.Вставить("ИмяТЧ", "Расходы");
	ДопПараметры.Вставить("НомерСтрокиДокумента", ТекСтрока.НомерСтроки-1);
	ДопПараметры.Вставить("Контрагент", Объект.Контрагент);
	ДопПараметры.Вставить("ПересчетКоличества", Истина);
	ДопПараметры.Вставить("флПлан", флПлан);
	
	Если флПлан Тогда
		СтруктураСтроки = Новый Структура("Тариф, Цена, Количество, Сумма, СтавкаНДС",
			ТекСтрока.Тариф, ТекСтрока.ЦенаПлан, ТекСтрока.КоличествоПлан, ТекСтрока.СуммаПлан, ТекСтрока.СтавкаНДС);
		РассчитатьСтоимостьУслуги(СтруктураСтроки, ДопПараметры);
		ТекСтрока.Тариф = СтруктураСтроки.Тариф;
		ТекСтрока.ЦенаПлан = СтруктураСтроки.Цена;
		ТекСтрока.КоличествоПлан = СтруктураСтроки.Количество;
		ТекСтрока.СуммаПлан = СтруктураСтроки.Сумма;
		ТекСтрока.СтавкаНДС = СтруктураСтроки.СтавкаНДС;
		РассчитатьСуммуНДС(ТекСтрока, "План");
		РассчитатьСуммуВсегоВстрокеТЧ(ТекСтрока, "План");
	Иначе
		СтруктураСтроки = Новый Структура("Тариф, Цена, Количество, Сумма, СтавкаНДС",
			ТекСтрока.Тариф, ТекСтрока.Цена, ТекСтрока.Количество, ТекСтрока.Сумма, ТекСтрока.СтавкаНДС);
		РассчитатьСтоимостьУслуги(СтруктураСтроки, ДопПараметры);
		ЗаполнитьЗначенияСвойств(ТекСтрока, СтруктураСтроки);
		РассчитатьСуммуНДС(ТекСтрока, "Факт");
		РассчитатьСуммуВсегоВстрокеТЧ(ТекСтрока, "Факт");
	КонецЕсли;
	
	ВывестиСуммовыеИтогиДокумента();
	ОбновитьПодвалРасходов();
	
	ТекСтрока.РучнойВвод = Ложь;
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПрицеп(Команда)
	
	Если Не Элементы.ГруппаПрицеп1.Видимость Тогда 
		Элементы.ГруппаПрицеп1.Видимость = Истина;
		Прицеп = ПолучитьПрицеп(Объект.ТС, Объект.Прицеп2);
		Если Не Прицеп = Неопределено Тогда 
			Объект.Прицеп1 = Прицеп;
		КонецЕсли;
	ИначеЕсли Не Элементы.Прицеп2.Видимость Тогда
		Элементы.Прицеп2.Видимость = Истина;
		Прицеп = ПолучитьПрицеп(Объект.ТС, Объект.Прицеп1);
		Если Не Прицеп = Неопределено Тогда 
			Объект.Прицеп2 = Прицеп;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ДобавитьПрицеп.Видимость = Не (Элементы.ГруппаПрицеп1.Видимость И Элементы.Прицеп2.Видимость);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборЗаказов(Команда)
	
	Если Объект.Грузы.Количество() Тогда 
		ТекстНСТР = НСтр("en='Clear the list of orders before the selection?';ru='Очистить список заказов перед подбором?'");
		Оповещение = Новый ОписаниеОповещения("ПодборЗаказовОчисткаТЧ", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстНСТР, РежимДиалогаВопрос.ДаНетОтмена);
	Иначе 
		ПодборЗаказовОткрытьФормуПодбора();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДоговорКонтрагента(Команда)
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Оповещ = Новый ОписаниеОповещения("СоздатьДоговорКонтрагентаВопрос", ЭтотОбъект);
		ПоказатьВопрос(Оповещ, "Будет создан и подставлен в документ новый договор. Продолжить?", РежимДиалогаВопрос.ОКОтмена);
	Иначе
		СоздатьДоговорКонтрагентаЗавершение();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДоговорКонтрагентаВопрос(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.ОК Тогда
		СоздатьДоговорКонтрагентаЗавершение();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДоговорКонтрагентаЗавершение()
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Владелец", Объект.Контрагент);
	ПараметрыЗаполнения.Вставить("Контрагент", Объект.Контрагент);
	ПараметрыЗаполнения.Вставить("Организация", Объект.Организация);
	Объект.ДоговорКонтрагента = уатНастройкиШаблонов.СоздатьДоговорКонтрагентаПоШаблону(ПараметрыЗаполнения, "2", Истина);
	ДоговорКонтрагентаПриИзменении(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура НастроитьШаблонДоговора(Команда)
	ПараметрыФормы = Новый Структура("ОбъектНастройки, ОбъектДоговора", "Справочник_ДоговорыКонтрагентов", "2");
	ОткрытьФорму("ОбщаяФорма.уатНастройкаШаблона", ПараметрыФормы, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
КонецПроцедуры

&НаКлиенте
Процедура ОформлениеДокументов(Команда)
	Если Объект.Ссылка.Пустая() Тогда
		ТекстНСТР = НСтр("en='To perform this operation, you must record the item. The document will be recorded.';ru='Для выполнения данной операции необходимо записать документ. Данные будут записаны.'");
		
		ОповещениеЗаписатьОбъект = Новый ОписаниеОповещения("ОформлениеДокументовПродолжение", ЭтотОбъект);
		
		ПоказатьВопрос(ОповещениеЗаписатьОбъект, ТекстНСТР, РежимДиалогаВопрос.ДаНет);
	Иначе
		ОткрытьФорму("ОбщаяФорма.уатФормаОформленияДокументов_уэ",,ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПолучателейУведомлений(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Документ", Объект);
	ПараметрыФормы.Вставить("ТипДокумента", ПредопределенноеЗначение("Перечисление.уатТипыОбъектовДляУведомлений_уэ.ЗаказПеревозчику"));
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ПолучателиУведомленийЗакрытиеФормы", ЭтаФорма);
	
	ОткрытьФорму("Документ.уатПотребностьВПеревозке_уэ.Форма.ФормаПолучателейУведомлений",
		ПараметрыФормы,
		ЭтаФорма,,,,
		ОписаниеОповещенияОЗакрытии,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
КонецПроцедуры

&НаКлиенте
Процедура ОформитьЭТрН(Команда)
	Если Объект.Ссылка.Пустая() Тогда
		ТекстПредупреждения = НСтр("ru = 'Документ еще не записан. Ввод ЭПД возможен только на основании записанных документов.';
		|en = 'The document is not saved yet. You can enter the electronic shipping document only based on the saved documents.'");
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	уатОбменСГИСЭПДКлиент.ПроверитьИСоздатьЭТрН(Объект.Ссылка, ЭтотОбъект); 
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаСервере
Процедура УстановитьВидимость()
	
	Элементы.ОперацииСтавкаНДС.Видимость = Объект.УчитыватьНДС;
	Элементы.ОперацииСуммаНДС.Видимость = Объект.УчитыватьНДС;
	Элементы.ОперацииСуммаНДС.Видимость = Объект.УчитыватьНДС;
	Элементы.ОперацииВсего.Видимость = Объект.УчитыватьНДС;
	
	Элементы.ГрузыСтатус.Видимость = мОтображатьСтатус;
	
	Если РежимЗаполнения = 1 Тогда // По маршрутным листам.
		Элементы.МаршрутныйЛист.Видимость = Истина;
		Элементы.ГруппаОперации.Заголовок = НСтр("en='Preliminary expenses';ru='Предварительные расходы'");
		Элементы.ГруппаГрузы.Видимость    = Ложь;
		Элементы.ГруппаМаршрут.Видимость  = Истина;
		Элементы.ОперацииЗаказ.Видимость  = Ложь;
		
		Элементы.ОперацииРасчитатьПолучаемыеУслуги.Заголовок = НСтр("en='Calculate on tariffs';ru='Рассчитать по тарифам'");
		Элементы.ОперацииРассчитатьПолучаемыеУслугиПлан.Видимость = Ложь;
		Элементы.ОперацииПересчитатьРасходы.Заголовок = НСтр("en='Recalculate all rows';ru='Пересчитать во всех строках'");
		Элементы.ОперацииПересчитатьРасходыПлан.Видимость = Ложь;
		Элементы.ОперацииПересчитатьРасходыВСтроке.Заголовок = НСтр("en='Recalculate current row';ru='Пересчитать в текущей строке'");
		Элементы.ОперацииПересчитатьРасходыВСтрокеПлан.Видимость = Ложь;
		Элементы.ОперацииЗаполнитьФактИзПлана.Видимость = Ложь;
		Элементы.ОперацииКоличество.Заголовок = НСтр("en='Quantity';ru='Колич.'");
		Элементы.ОперацииЦена.Заголовок = НСтр("en='Price';ru='Цена'");
		Элементы.ОперацииСумма.Заголовок = НСтр("en='Sum';ru='Сумма'");
		Элементы.ОперацииСуммаНДС.Заголовок = НСтр("en='VAT';ru='НДС'");
		Элементы.ОперацииВсего.Заголовок = НСтр("en='Total';ru='Всего'");
		Элементы.ОперацииКоличествоПлан.Видимость = Ложь;
		Элементы.ОперацииЦенаПлан.Видимость = Ложь;
		Элементы.ОперацииСуммаПлан.Видимость = Ложь;
		Элементы.ОперацииСуммаНДСПлан.Видимость = Ложь;
		Элементы.ОперацииВсегоПлан.Видимость = Ложь;
	Иначе // По заказам на ТС.
		Элементы.МаршрутныйЛист.Видимость = Ложь;
		Элементы.ГруппаОперации.Заголовок = НСтр("en='Expenses';ru='Расходы'");
		Элементы.ГруппаГрузы.Видимость    = Истина;
		Элементы.ГруппаМаршрут.Видимость  = Ложь;
		Элементы.ОперацииЗаказ.Видимость  = Истина;
		
		Если ИспользоватьПлановыеУслуги Тогда
			Элементы.ОперацииРасчитатьПолучаемыеУслуги.Заголовок = НСтр("en='Calculate fact by tariffs';ru='Рассчитать факт по тарифам'");
			Элементы.ОперацииРассчитатьПолучаемыеУслугиПлан.Видимость = Истина;
			Элементы.ОперацииПересчитатьРасходы.Заголовок = НСтр("en='Recalculate the fact in all rows';ru='Пересчитать факт во всех строках'");
			Элементы.ОперацииПересчитатьРасходыПлан.Видимость = Истина;
			Элементы.ОперацииПересчитатьРасходыВСтроке.Заголовок = НСтр("en='Recalculate the fact in current row';ru='Пересчитать факт в текущей строке'");
			Элементы.ОперацииПересчитатьРасходыВСтрокеПлан.Видимость = Истина;
			Элементы.ОперацииЗаполнитьФактИзПлана.Видимость = Истина;
			Элементы.ОперацииКоличество.Заголовок = НСтр("en='Quantity (fact)';ru='Колич. (факт)'");
			Элементы.ОперацииЦена.Заголовок = НСтр("en='Price (fact)';ru='Цена (факт)'");
			Элементы.ОперацииСумма.Заголовок = НСтр("en='Sum (fact)';ru='Сумма (факт)'");
			Элементы.ОперацииСуммаНДС.Заголовок = НСтр("en='VAT (fact)';ru='НДС (факт)'");
			Элементы.ОперацииВсего.Заголовок = НСтр("en='Total (fact)';ru='Всего (факт)'");
			Элементы.ОперацииКоличествоПлан.Видимость = Истина;
			Элементы.ОперацииЦенаПлан.Видимость = Истина;
			Элементы.ОперацииСуммаПлан.Видимость = Истина;
			Элементы.ОперацииСуммаНДСПлан.Видимость = Объект.УчитыватьНДС;
			Элементы.ОперацииВсегоПлан.Видимость = Объект.УчитыватьНДС;
		Иначе
			Элементы.ОперацииРасчитатьПолучаемыеУслуги.Заголовок = НСтр("en='Calculate on tariffs';ru='Рассчитать по тарифам'");
			Элементы.ОперацииРассчитатьПолучаемыеУслугиПлан.Видимость = Ложь;
			Элементы.ОперацииПересчитатьРасходы.Заголовок = НСтр("en='Recalculate all rows';ru='Пересчитать во всех строках'");
			Элементы.ОперацииПересчитатьРасходыПлан.Видимость = Ложь;
			Элементы.ОперацииПересчитатьРасходыВСтроке.Заголовок = НСтр("en='Recalculate current row';ru='Пересчитать в текущей строке'");
			Элементы.ОперацииПересчитатьРасходыВСтрокеПлан.Видимость = Ложь;
			Элементы.ОперацииЗаполнитьФактИзПлана.Видимость = Ложь;
			Элементы.ОперацииКоличество.Заголовок = НСтр("en='Quantity';ru='Колич.'");
			Элементы.ОперацииЦена.Заголовок = НСтр("en='Price';ru='Цена'");
			Элементы.ОперацииСумма.Заголовок = НСтр("en='Sum';ru='Сумма'");
			Элементы.ОперацииСуммаНДС.Заголовок = НСтр("en='VAT';ru='НДС'");
			Элементы.ОперацииВсего.Заголовок = НСтр("en='Total';ru='Всего'");
			Элементы.ОперацииКоличествоПлан.Видимость = Ложь;
			Элементы.ОперацииЦенаПлан.Видимость = Ложь;
			Элементы.ОперацииСуммаПлан.Видимость = Ложь;
			Элементы.ОперацииСуммаНДСПлан.Видимость = Ложь;
			Элементы.ОперацииВсегоПлан.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ОперацииВалюта.ТолькоПросмотр = НЕ МноговалютныйУчет;
	
	// Внешний пользователь
	Если АвторизованВнешнийПользователь Тогда
		
		Элементы.Ответственный.Доступность = Ложь;
		Элементы.Организация.Доступность = Ложь;
		Элементы.РежимЗаполнения.Доступность = Ложь;
		
		Элементы.ВидПеревозки.ТолькоПросмотр = Истина;
		Элементы.ВидПеревозки.КнопкаВыпадающегоСписка = Ложь;
		Элементы.ВидПеревозки.КнопкаОткрытия = Ложь;
		
		Элементы.Контрагент.ТолькоПросмотр = Истина;
		Элементы.Контрагент.КнопкаВыпадающегоСписка = Ложь;
		Элементы.Прицеп1.КнопкаОткрытия = Ложь;
		Элементы.Прицеп2.КнопкаОткрытия = Ложь;
		Элементы.СоздатьДоговорКонтрагента.Видимость = Ложь;
		Элементы.ДоговорКонтрагента.ТолькоПросмотр = Истина;
		Элементы.МаршрутныйЛист.ТолькоПросмотр = Истина;
		
		Элементы.ТС.КнопкаОткрытия = Ложь;
		Элементы.ТСМодель.КнопкаОткрытия = Ложь;
		Элементы.ДокументОснование.ТолькоПросмотр = Истина;
		Элементы.ДокументОснование.КнопкаВыбора = Ложь;
		Элементы.ДокументОснование.КнопкаОткрытия = Ложь;
		
		Элементы.ПодменюПечать.Видимость = Ложь;
		Элементы.ПодменюЗаполнить.Видимость = Ложь;
		Элементы.ФормаВзаимодействия.Видимость = Ложь;
		Элементы.ПодменюФинансы.Видимость = Ложь;
		Элементы.ФормаНастроитьШаблонДоговора.Видимость = Ложь;
		
		// Настройка вкладки "Расходы"
		Если УровеньДоступаКРасходам = ПредопределенноеЗначение("Перечисление.уатУровеньДоступаКУслугам.РедактированиеЗапрещено") Тогда
			Элементы.Операции.ТолькоПросмотр = Истина;
			Элементы.ГруппаОперацииКоманды.Видимость = Ложь;
			Элементы.СтраницыИтогов.Доступность = Ложь;
		ИначеЕсли УровеньДоступаКРасходам = ПредопределенноеЗначение("Перечисление.уатУровеньДоступаКУслугам.РедактированиеСтрокРучногоВводаРазрешено") Тогда
			Элементы.ОперацииГруппаЗаполнить.Видимость = Ложь;
			Элементы.ОперацииГруппаРассчитать.Видимость = Ложь;
			Элементы.СтраницыИтогов.Доступность = Ложь;
		Иначе
			Элементы.ОперацииГруппаЗаполнить.Видимость = Ложь;
			Элементы.ОперацииГруппаРассчитать.Видимость = Ложь;
			Элементы.ОперацииСтатьяРасходов.ТолькоПросмотр = Истина;
		КонецЕсли;
		
		Элементы.Грузы.Доступность = Ложь;
		Элементы.Грузы.КоманднаяПанель.Видимость = Ложь;
		
		Элементы.ЗаказыДерево.Доступность = Ложь;
		
	КонецЕсли;
	
	ТекВидМоделиТС = ВидМоделиТСПоВидуПеревозки(Объект.ВидПеревозки);
	
	СкрытьВодителейСотрудников = ТекВидМоделиТС = ПредопределенноеЗначение("Перечисление.уатВидыМоделейТС.АвиационныйТранспорт")
	Или ТекВидМоделиТС = ПредопределенноеЗначение("Перечисление.уатВидыМоделейТС.ЖДТранспорт") 
	Или ТекВидМоделиТС = ПредопределенноеЗначение("Перечисление.уатВидыМоделейТС.МорскойТранспорт");
	
	Если Объект.ВидПеревозки = ПредопределенноеЗначение("Справочник.уатВидыПеревозок.Авиационная")
		ИЛИ Объект.ВидПеревозки = ПредопределенноеЗначение("Справочник.уатВидыПеревозок.Железнодорожная")
		ИЛИ Объект.ВидПеревозки = ПредопределенноеЗначение("Справочник.уатВидыПеревозок.Морская")
		Или СкрытьВодителейСотрудников Тогда 
		
		Элементы.Водитель.Видимость  = Ложь;
	Иначе 
		Элементы.Водитель.Видимость  = Истина;
	КонецЕсли;
	
	Элементы.ПолучаемыеУслугиРаспределитьПолучаемыеУслугиПоГрузам.Видимость = (РежимЗаполнения = 0);
	
	ВывестиСуммовыеИтогиДокумента();
	
КонецПроцедуры // УстановитьВидимость()

&НаКлиенте
Процедура РедактироватьЦеныИВалюту(Команда)
	
	ОбработатьИзмененияПоКнопкеЦеныИВалюты(Новый ОписаниеОповещения("РедактироватьЦеныИВалютуЗавершение", ЭтотОбъект), Объект.ВалютаДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура ОформлениеДокументовПродолжение(Результат, ДопПараметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если Не ПроверитьЗаполнение() Тогда
			Возврат;
		КонецЕсли;
		
		Попытка
			Записать();
			ОткрытьФорму("ОбщаяФорма.уатФормаОформленияДокументов_уэ",,ЭтотОбъект);
		Исключение
			ТекстСообщения = ИнформацияОбОшибке().Описание;
			ТекПричина = ИнформацияОбОшибке().Причина;
			Сч = 1; МаксСч = 10;
			Пока ТекПричина <> Неопределено И Сч <= МаксСч Цикл
				ТекстСообщения = ТекстСообщения + " \ " + ТекПричина.Описание;
				ТекПричина = ТекПричина.Причина;
				Сч = Сч + 1;
			КонецЦикла;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЦеныИВалютуЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    РассчитатьСуммуДокумента();
	ОбновитьВсегоВТЧОперацииСервер();
	УстановитьВидимость();
	Модифицированность = Истина;

КонецПроцедуры

// Процедура выполняет пересчет в табличной части документа после изменений 
// в форме "Цены и валюта".Выполняется пересчет колонок: цена, скидка, сумма,
// сумма НДС, всего.
//
&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты(Знач Оповещение, Знач ВалютаРасчетовПередИзменением, ПересчитатьЦены = Ложь)
	
	// 1. Формируем структуру параметров для заполнения формы "Цены и Валюта".
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВалютаДокумента",		  Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("Курс",				  Объект.КурсВзаиморасчетов);
	СтруктураПараметров.Вставить("Кратность",			  Объект.КратностьВзаиморасчетов);
	СтруктураПараметров.Вставить("ДатаКурса",             Объект.ДатаКурса);
	СтруктураПараметров.Вставить("Контрагент",			  Объект.Контрагент);
	СтруктураПараметров.Вставить("Договор",				  Объект.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("Организация",			  Объект.Организация);
	СтруктураПараметров.Вставить("ДатаДокумента",		  Объект.Дата);
	СтруктураПараметров.Вставить("ПерезаполнитьЦены",	  Ложь);
	СтруктураПараметров.Вставить("ПересчитатьЦены",		  ПересчитатьЦены);
	СтруктураПараметров.Вставить("БылиВнесеныИзменения",  Ложь);
	СтруктураПараметров.Вставить("СуммаВключаетНДС",      Объект.СуммаВключаетНДС);
	СтруктураПараметров.Вставить("НалогообложениеНДС",	  Объект.УчитыватьНДС);
	// Для объедининенного решения с БП 3
	СтруктураПараметров.Вставить("ДокументБезНДС",        НЕ Объект.УчитыватьНДС);
	// Для объедининенного решения с БП 3
	
	Если НЕ ПравоРедактированиеДокумента() Тогда
		СтруктураПараметров.Вставить("ТолькоПросмотр", Истина);
	КонецЕсли;
	
	// 2. Открываем форму "Цены и Валюта".
	ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров,,,,, Новый ОписаниеОповещения("ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение",
		ЭтотОбъект, Новый Структура("ВалютаРасчетовПередИзменением, Оповещение", ВалютаРасчетовПередИзменением, Оповещение)),
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
КонецПроцедуры // ОбработатьИзмененияПоКнопкеЦеныИВалюты()

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено ИЛИ НЕ ПравоРедактированиеДокумента() Тогда
		Возврат;
	КонецЕсли;
	
	ВалютаРасчетовПередИзменением = ДополнительныеПараметры.ВалютаРасчетовПередИзменением;
	Оповещение                    = ДополнительныеПараметры.Оповещение;
	СтруктураЦеныИВалюта          = Результат;
	
	// 3. Перезаполняем табличную часть "Номенклатура", если были внесены изменения в форме "Цены и Валюта".
	Если ТипЗнч(СтруктураЦеныИВалюта) = Тип("Структура")  Тогда
		ДопПараметры = Новый Структура("ПредКурс, ПредКратность, Курс, Кратность",
			Объект.КурсВзаиморасчетов, Объект.КратностьВзаиморасчетов, СтруктураЦеныИВалюта.Курс, СтруктураЦеныИВалюта.Кратность);
			
		Если СтруктураЦеныИВалюта.Свойство("ВалютаДокумента") И СтруктураЦеныИВалюта.Свойство("Курс") И СтруктураЦеныИВалюта.Свойство("Кратность") И
			СтруктураЦеныИВалюта.Свойство("СуммаВключаетНДС") И  СтруктураЦеныИВалюта.Свойство("НалогообложениеНДС") Тогда
			
			Объект.ВалютаДокумента		   = СтруктураЦеныИВалюта.ВалютаДокумента;
			Объект.КурсВзаиморасчетов	   = СтруктураЦеныИВалюта.Курс;
			Объект.КратностьВзаиморасчетов = СтруктураЦеныИВалюта.Кратность;
			Объект.ДатаКурса               = СтруктураЦеныИВалюта.ДатаКурса;
			Объект.СуммаВключаетНДС		   = СтруктураЦеныИВалюта.СуммаВключаетНДС;
			Объект.УчитыватьНДС			   = СтруктураЦеныИВалюта.НалогообложениеНДС;
			
			Если НЕ МноговалютныйУчет Тогда
				Для Каждого ТекСтрока Из Объект.Расходы Цикл
					ТекСтрока.Валюта = Объект.ВалютаДокумента;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		// Пересчитываем сумму если изменился признак Налогообложение НДС.
		Если СтруктураЦеныИВалюта.Свойство("НалогообложениеНДС") И СтруктураЦеныИВалюта.Свойство("ПредНалогообложениеНДС") Тогда
			Если СтруктураЦеныИВалюта.НалогообложениеНДС <> СтруктураЦеныИВалюта.ПредНалогообложениеНДС Тогда
				ЗаполнитьСтавкуНДСПоНалогообложениеНДС();		
			КонецЕсли;
		КонецЕсли;
		
		// Пересчитываем цены по валюте.
		Если НЕ МноговалютныйУчет И СтруктураЦеныИВалюта.ПересчитатьЦены Тогда	
			ПересчитатьЦеныТабличнойЧастиПоВалюте(ВалютаРасчетовПередИзменением, "Расходы");
		КонецЕсли;
		
		// Пересчитываем сумму если изменился признак "Сумма включает НДС".
		Если СтруктураЦеныИВалюта.Свойство("СуммаВключаетНДС") И СтруктураЦеныИВалюта.Свойство("ПредСуммаВключаетНДС") Тогда
			Если СтруктураЦеныИВалюта.СуммаВключаетНДС <> СтруктураЦеныИВалюта.ПредСуммаВключаетНДС Тогда                       	
				ПересчитатьСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС("Расходы");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	РассчитатьСуммуДокумента();
	ОбновитьВсегоВТЧОперацииСервер();
    ОбновитьПодвалРасходов();
	УстановитьВидимость();
	
	Если Оповещение <> Неопределено Тогда 
		ВыполнитьОбработкуОповещения(Оповещение);
	КонецЕсли;

КонецПроцедуры // ОбработатьИзмененияПоКнопкеЦеныИВалюты()

// Процедура заполняет Ставку НДС в табличной части по системе налогообложения.
// 
&НаСервере
Процедура ЗаполнитьСтавкуНДСПоНалогообложениеНДС()
	
	//СтавкаНДСПоУмолчанию = уатОбщегоНазначенияПовтИсп.ПолучитьСтавкуНДСНоль();
	СтавкаНДСПоУмолчанию = Перечисления.СтавкиНДС.ПустаяСсылка();
	Для каждого СтрокаТабличнойЧасти Из Объект.Расходы Цикл
		СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
		СтрокаТабличнойЧасти.СуммаНДС = 0;
	КонецЦикла;
	
	Если Объект.УчитыватьНДС Тогда
		Элементы.ОперацииСтавкаНДС.Видимость = Истина;
		Элементы.ОперацииСуммаНДС.Видимость  = Истина;
		Элементы.ОперацииВсего.Видимость     = Истина;
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Расходы Цикл
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС) Тогда
				СтрокаТабличнойЧасти.СтавкаНДС = СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
			КонецЕсли;	
			
			СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
			СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
									  		СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
									  		СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
			
		КонецЦикла;
		
	Иначе
		Элементы.ОперацииСтавкаНДС.Видимость = Ложь;
		Элементы.ОперацииСуммаНДС.Видимость  = Ложь;
		Элементы.ОперацииВсего.Видимость     = Ложь;
		
	КонецЕсли;	
	
КонецПроцедуры // ЗаполнитьСтавкуНДСПоНалогообложениеНДС()

&НаСервере
Процедура РассчитатьСуммуДокумента()
	СтруктураДокумента = уатОбщегоНазначенияКлиентСервер.СтруктураДокумента(Объект, "уатЗаказПеревозчику_уэ");
	Объект.СуммаДокумента = уатОбщегоНазначенияТиповые.уатПолучитьСуммуДокументаСНДС(СтруктураДокумента, "Расходы");
	
	Если Константы.уатИспользоватьПлановыеУслуги_уэ.Получить() Тогда
		Объект.СуммаДокументаПлан = уатОбщегоНазначенияТиповые.уатПолучитьСуммуДокументаСНДС(СтруктураДокумента, "Расходы",,Истина);
	КонецЕсли;
	
	ВывестиСуммовыеИтогиДокумента();
КонецПроцедуры

// Процедура рассчитывает сумму в строке табличной части.
//
&НаКлиенте
Процедура РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти = Неопределено, ПланФакт = Неопределено)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПланФакт = Неопределено ИЛИ ПланФакт = "План" Тогда
		СтрокаТабличнойЧасти.СуммаПлан = СтрокаТабличнойЧасти.КоличествоПлан * СтрокаТабличнойЧасти.ЦенаПлан;
	КонецЕсли;
	Если ПланФакт = Неопределено ИЛИ ПланФакт = "Факт" Тогда
		СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
	КонецЕсли;
	
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти, ПланФакт);
	
КонецПроцедуры // РассчитатьСуммуВСтрокеТабличнойЧасти()

// Рассчитывается сумма НДС в строке табличной части.
//
&НаКлиенте
Процедура РассчитатьСуммуНДС(СтрокаТабличнойЧасти, ПланФакт = Неопределено)
	СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	
	Если ПланФакт = Неопределено ИЛИ ПланФакт = "План" Тогда
		СтрокаТабличнойЧасти.СуммаНДСПлан = ?(Объект.СуммаВключаетНДС, 
			СтрокаТабличнойЧасти.СуммаПлан - (СтрокаТабличнойЧасти.СуммаПлан) / ((СтавкаНДС + 100) / 100),
			СтрокаТабличнойЧасти.СуммаПлан * СтавкаНДС / 100);
	КонецЕсли;
	Если ПланФакт = Неопределено ИЛИ ПланФакт = "Факт" Тогда
		СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
			СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
			СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
	КонецЕсли;
КонецПроцедуры // РассчитатьСуммуНДС()

&НаКлиенте
Процедура РассчитатьСуммуВсегоВстрокеТЧ(СтрокаТабличнойЧасти, ПланФакт = Неопределено)
	Если ПланФакт = Неопределено ИЛИ ПланФакт = "План" Тогда
		СтрокаТабличнойЧасти.ВсегоПлан = СтрокаТабличнойЧасти.СуммаПлан
			+ ?(Объект.УчитыватьНДС И НЕ Объект.СуммаВключаетНДС, СтрокаТабличнойЧасти.СуммаНДСПлан, 0);
	КонецЕсли;
	Если ПланФакт = Неопределено ИЛИ ПланФакт = "Факт" Тогда
		СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма
			+ ?(Объект.УчитыватьНДС И НЕ Объект.СуммаВключаетНДС, СтрокаТабличнойЧасти.СуммаНДС, 0);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура РассчитатьСуммуВсегоВстрокеТЧСервер(СтрокаТабличнойЧасти, ПланФакт = Неопределено)
	Если ПланФакт = Неопределено ИЛИ ПланФакт = "План" Тогда
		СтрокаТабличнойЧасти.ВсегоПлан = СтрокаТабличнойЧасти.СуммаПлан
			+ ?(Объект.УчитыватьНДС И НЕ Объект.СуммаВключаетНДС, СтрокаТабличнойЧасти.СуммаНДСПлан, 0);
	КонецЕсли;
	Если ПланФакт = Неопределено ИЛИ ПланФакт = "Факт" Тогда
		СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма
			+ ?(Объект.УчитыватьНДС И НЕ Объект.СуммаВключаетНДС, СтрокаТабличнойЧасти.СуммаНДС, 0);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьВсегоВТЧОперацииСервер()
	Для Каждого СтрокаТабличнойЧасти Из Объект.Расходы Цикл
		РассчитатьСуммуВсегоВстрокеТЧСервер(СтрокаТабличнойЧасти);
	КонецЦикла;
	ОбновитьПодвалРасходов();
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатусыГрузовСервер()
	
	мсвЗаказы = Новый Массив();
	Для Каждого ТекСтрока Из Объект.Грузы Цикл
		мсвЗаказы.Добавить(ТекСтрока.Заказ);
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("мсвЗаказы", мсвЗаказы);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатЗаказГрузоотправителя.Ссылка КАК Заказ
	|ПОМЕСТИТЬ ВРТ_Документы
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	|ГДЕ
	|	уатЗаказГрузоотправителя.Ссылка В(&мсвЗаказы)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатЭтапыМультимодальныхПеревозок_уэ.Этап
	|ИЗ
	|	РегистрСведений.уатЭтапыМультимодальныхПеревозок_уэ КАК уатЭтапыМультимодальныхПеревозок_уэ
	|ГДЕ
	|	уатЭтапыМультимодальныхПеревозок_уэ.ЗаказГрузоотправителя В(&мсвЗаказы)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Заказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатСтатусыГрузов_уэСрезПоследних.Период КАК Период,
	|	уатСтатусыГрузов_уэСрезПоследних.Заказ КАК Заказ,
	|	уатСтатусыГрузов_уэСрезПоследних.ГрузовоеМесто КАК ГрузовоеМесто,
	|	уатСтатусыГрузов_уэСрезПоследних.Статус КАК Статус
	|ИЗ
	|	РегистрСведений.уатСтатусыГрузов_уэ.СрезПоследних(
	|			,
	|			Заказ В
	|				(ВЫБРАТЬ
	|					ВТ.Заказ
	|				ИЗ
	|					ВРТ_Документы КАК ВТ)) КАК уатСтатусыГрузов_уэСрезПоследних
	|
	|УПОРЯДОЧИТЬ ПО
	|	Заказ,
	|	ГрузовоеМесто,
	|	Период УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатЗаказГрузоотправителя.Ссылка КАК Заказ,
	|	ВЫБОР
	|		КОГДА уатЗаказГрузоотправителя.Мультимодальный
	|				И НЕ уатЗаказГрузоотправителя.ЭтоЭтап
	|			ТОГДА ЕСТЬNULL(СтатусРодительскогоЗаказа.СтатусЭтапа, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый))
	|		ИНАЧЕ ВЫБОР
	|				КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЕСТЬNULL(уатСтатусыГрузов_уэСрезПоследних.Статус, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый))) > 1
	|					ТОГДА ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Составной)
	|				ИНАЧЕ МАКСИМУМ(ЕСТЬNULL(уатСтатусыГрузов_уэСрезПоследних.Статус, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый)))
	|			КОНЕЦ
	|	КОНЕЦ КАК СтатусЗаказа
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатСтатусыГрузов_уэ.СрезПоследних КАК уатСтатусыГрузов_уэСрезПоследних
	|		ПО (уатСтатусыГрузов_уэСрезПоследних.Заказ = уатЗаказГрузоотправителя.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВЫБОР
	|				КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЕСТЬNULL(уатСтатусыГрузов_уэСрезПоследних.Статус, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый))) > 1
	|					ТОГДА ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Составной)
	|				ИНАЧЕ МАКСИМУМ(ЕСТЬNULL(уатСтатусыГрузов_уэСрезПоследних.Статус, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый)))
	|			КОНЕЦ КАК СтатусЭтапа,
	|			уатЭтапыМультимодальныхПеревозок_уэ.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя
	|		ИЗ
	|			РегистрСведений.уатЭтапыМультимодальныхПеревозок_уэ КАК уатЭтапыМультимодальныхПеревозок_уэ
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатСтатусыГрузов_уэ.СрезПоследних КАК уатСтатусыГрузов_уэСрезПоследних
	|				ПО (уатСтатусыГрузов_уэСрезПоследних.Заказ = уатЭтапыМультимодальныхПеревозок_уэ.Этап)
	|		ГДЕ
	|			уатЭтапыМультимодальныхПеревозок_уэ.ЗаказГрузоотправителя В(&мсвЗаказы)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			уатЭтапыМультимодальныхПеревозок_уэ.ЗаказГрузоотправителя) КАК СтатусРодительскогоЗаказа
	|		ПО уатЗаказГрузоотправителя.Ссылка = СтатусРодительскогоЗаказа.ЗаказГрузоотправителя
	|ГДЕ
	|	уатЗаказГрузоотправителя.Ссылка В(&мсвЗаказы)
	|
	|СГРУППИРОВАТЬ ПО
	|	уатЗаказГрузоотправителя.Мультимодальный,
	|	уатЗаказГрузоотправителя.ЭтоЭтап,
	|	СтатусРодительскогоЗаказа.СтатусЭтапа,
	|	уатЗаказГрузоотправителя.Ссылка";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	табСтатусыГрузов  = РезультатЗапроса[1].Выгрузить();
	табСтатусыЗаказов = РезультатЗапроса[2].Выгрузить();
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого ТекСтрока Из Объект.Грузы Цикл 
		
		Если ТекСтрока.Заказ.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам Тогда 
			НайдСтроки = табСтатусыГрузов.НайтиСтроки(Новый Структура("Заказ, ГрузовоеМесто", ТекСтрока.Заказ, ТекСтрока.ГрузовоеМесто));
			Если НайдСтроки.Количество() Тогда 
				ТекСтрока.Статус = НайдСтроки[0].Статус;
			Иначе 
				ТекСтрока.Статус = Неопределено;
			КонецЕсли;
			
		Иначе 
			НайдСтроки = табСтатусыЗаказов.НайтиСтроки(Новый Структура("Заказ", ТекСтрока.Заказ));
			Если НайдСтроки.Количество() Тогда 
				ТекСтрока.Статус = НайдСтроки[0].СтатусЗаказа;
			Иначе 
				ТекСтрока.Статус = Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьДетализациюЗаказовСервер();
	УстановитьПривилегированныйРежим(Ложь);
	
	ОбновитьВесоОбъемныеПоказателиСервер();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДетализациюЗаказовСервер()
	Для Каждого ТекСтрока Из Объект.Грузы Цикл
		ТекСтрока.ДетализацияЗаказа = ТекСтрока.Заказ.ДетализацияЗакрытия;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОбновитьВесоОбъемныеПоказателиСервер()
	УстановитьПривилегированныйРежим(Истина);
	Для Каждого ТекСтрока Из Объект.Грузы Цикл
		ТекСтрока.УникальноеГрузовоеМесто = ?(ТипЗнч(ТекСтрока.ГрузовоеМесто) = Тип("СправочникСсылка.уатГрузовыеМеста_уэ"),
			ТекСтрока.ГрузовоеМесто.УникальноеГрузовоеМесто, Ложь);
			
		Если ТекСтрока.Заказ.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам Тогда
			СтрокаГруза = ТекСтрока.Заказ.ГрузовойСостав.Найти(ТекСтрока.ГрузовоеМесто, "ГрузовоеМесто");
			Если Не СтрокаГруза = Неопределено Тогда 
				ТекСтрока.ВесБрутто      = СтрокаГруза.ВесБрутто * ?(СтрокаГруза.КоличествоМест=0, 0, (ТекСтрока.Количество / СтрокаГруза.КоличествоМест));
				ТекСтрока.Объем          = СтрокаГруза.Объем * ?(СтрокаГруза.КоличествоМест=0, 0, (ТекСтрока.Количество / СтрокаГруза.КоличествоМест));
				
				Если ТекСтрока.ГрузовоеМесто.Контейнер Тогда
					ТекСтрока.КоличествоМест = ТекСтрока.Количество;
				Иначе
					ТекСтрока.КоличествоМест = ?(СтрокаГруза.ВидУпаковки.Коэффициент = 0, 0, ТекСтрока.Количество / СтрокаГруза.ВидУпаковки.Коэффициент);
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ТекСтрока.Заказ.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам Тогда
			СтрокиТовара = ТекСтрока.Заказ.Товары.НайтиСтроки(Новый Структура("Номенклатура, ЕдиницаИзмерения", ТекСтрока.ГрузовоеМесто, ТекСтрока.ЕдиницаИзмерения));
			Если СтрокиТовара.Количество() Тогда 
				ТекСтрока.ВесБрутто      = СтрокиТовара[0].ВесБрутто * ?(СтрокиТовара[0].Количество=0, 0, (ТекСтрока.Количество / СтрокиТовара[0].Количество));
				ТекСтрока.Объем          = СтрокиТовара[0].Объем * ?(СтрокиТовара[0].Количество=0, 0, (ТекСтрока.Количество / СтрокиТовара[0].Количество));
				ТекСтрока.КоличествоМест = СтрокиТовара[0].КоличествоМест * ?(СтрокиТовара[0].Количество=0, 0, (ТекСтрока.Количество / СтрокиТовара[0].Количество));
			КонецЕсли;
			
		ИначеЕсли ТекСтрока.Заказ.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам Тогда 
			ТекСтрока.ВесБрутто = ТекСтрока.Заказ.ВесБрутто;
			ТекСтрока.Объем = ТекСтрока.Заказ.Объем;
			ТекСтрока.КоличествоМест = ТекСтрока.Заказ.КоличествоМест;
			
		Иначе
			ТекСтрока.ВесБрутто = 0;
			ТекСтрока.Объем = 0;
			ТекСтрока.КоличествоМест = 0;
		КонецЕсли;
	КонецЦикла;
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПустогоПеревозчикаПоТС()
	Если ЗначениеЗаполнено(Объект.ТС) И НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Объект.Контрагент = Объект.ТС.ВладелецТС;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВывестиСуммовыеИтогиДокумента()
	
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	ВсегоНДС = уатОбщегоНазначенияТиповые.ПолучитьНДСДокумента(ДокОбъект, "Расходы");
	
	Если Объект.УчитыватьНДС Тогда 
		Если Объект.СуммаВключаетНДС Тогда 
			НадписьВсегоНДС = НСтр("en='VAT amount';ru='НДС в сумме'") + ":";
		Иначе 
			НадписьВсегоНДС = НСтр("en='VAT from above';ru='НДС сверху'") + ":";
		КонецЕсли;
		НадписьВсего = НСтр("en='Total including VAT';ru='Всего с НДС'");
		Элементы.СтраницыИтогов.ТекущаяСтраница = Элементы.ИтогоУчетНДС;
	Иначе 
		НадписьВсего = НСтр("en='Total';ru='Всего'");
		Элементы.СтраницыИтогов.ТекущаяСтраница = Элементы.ИтогоБезНДС;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ВалютаДокумента) Или Объект.ВалютаДокумента = мВалютаРегламентированногоУчета Тогда 
		НадписьКурс = "(1.0000)";
		Элементы.НадписьКурс.Видимость = Ложь;
		Элементы.НадписьКурс2.Видимость = Ложь;
	Иначе 
		НадписьКурс = "(" + Формат(
			?(Объект.КратностьВзаиморасчетов = 0, Объект.КурсВзаиморасчетов, Объект.КурсВзаиморасчетов/Объект.КратностьВзаиморасчетов),
			"ЧДЦ=4; ЧРД=.; ЧН=0.0000; ЧГ=0") + ")";
		Элементы.НадписьКурс.Видимость = Истина;
		Элементы.НадписьКурс2.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПараметрВыработкиВременный()
	Для Каждого СтрокаТабличнойЧасти Из Объект.Расходы Цикл
		Если СтрокаТабличнойЧасти.Тариф.МетодРасчета = Перечисления.уатМетодыРасчетаПоТарифам.ПроцентомОтСуммы Тогда
			СтрокаТабличнойЧасти.ПараметрВыработки = Справочники.уатПараметрыВыработки.Наценка;
		Иначе
			СтрокаТабличнойЧасти.ПараметрВыработки = СтрокаТабличнойЧасти.Тариф.ПараметрВыработки;
		КонецЕсли;
		СтрокаТабличнойЧасти.ПараметрВыработкиВременный = СтрокаТабличнойЧасти.ПараметрВыработки.Временный;
		Если СтрокаТабличнойЧасти.ПараметрВыработкиВременный Тогда
			СтрокаТабличнойЧасти.КоличествоВыработка = уатОбщегоНазначения.уатВремяВЧЧ_ММ(СтрокаТабличнойЧасти.Количество*3600);
			СтрокаТабличнойЧасти.КоличествоВыработкаПлан = уатОбщегоНазначения.уатВремяВЧЧ_ММ(СтрокаТабличнойЧасти.КоличествоПлан*3600);
		Иначе
			СтрокаТабличнойЧасти.КоличествоВыработка = СтрокаТабличнойЧасти.Количество;
			СтрокаТабличнойЧасти.КоличествоВыработкаПлан = СтрокаТабличнойЧасти.КоличествоПлан;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФорматРедактированияКоличествоВыработки()
	ТекСтрока = Элементы.Операции.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекСтрока.ПараметрВыработкиВременный Тогда
		Элементы.ОперацииКоличество.ФорматРедактирования = "ЧДЦ=2; ЧРД=:";
		Если ИспользоватьПлановыеУслуги Тогда
			Элементы.ОперацииКоличествоПлан.ФорматРедактирования = "ЧДЦ=2; ЧРД=:";
		КонецЕсли;
	Иначе
		Элементы.ОперацииКоличество.ФорматРедактирования = "";
		Если ИспользоватьПлановыеУслуги Тогда
			Элементы.ОперацииКоличествоПлан.ФорматРедактирования = "";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеПолейСтатусов()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатСтатусы_уэ.Ссылка,
	|	уатСтатусы_уэ.Наименование,
	|	уатСтатусы_уэ.ЦветФонаПоУмолчанию,
	|	уатСтатусы_уэ.ЦветТекстаПоУмолчанию
	|ИЗ
	|	Справочник.уатСтатусы_уэ КАК уатСтатусы_уэ
	|ГДЕ
	|	НЕ уатСтатусы_уэ.ПометкаУдаления
	|	И уатСтатусы_уэ.ДействуетНаЗаказыПеревозчику";
	
	ВыборкаЦвета = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЦвета.Следующий() Цикл 
		ЦветФона   = Неопределено;
		ЦветТекста = Неопределено;
		
		ХранилищеЦветФона = ВыборкаЦвета.ЦветФонаПоУмолчанию;
		Если Не ХранилищеЦветФона = Неопределено Тогда 
			ДанныеЦветФона = ХранилищеЦветФона.Получить();
			Если Не ДанныеЦветФона = Неопределено И ТипЗнч(ДанныеЦветФона) = Тип("Цвет") Тогда
				ЦветФона = ДанныеЦветФона;
			КонецЕсли;
		КонецЕсли;
		
		ХранилищеЦветТекста = ВыборкаЦвета.ЦветТекстаПоУмолчанию;
		Если Не ХранилищеЦветТекста = Неопределено Тогда 
			ДанныеЦветТекста = ХранилищеЦветТекста.Получить();
			Если Не ДанныеЦветТекста = Неопределено И ТипЗнч(ДанныеЦветТекста) = Тип("Цвет") Тогда
				ЦветТекста = ДанныеЦветТекста;
			КонецЕсли;
		КонецЕсли;
		
		Если ЦветТекста = Неопределено И ЦветФона = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		// Установка цвета реквизита шапки
		Если ВыборкаЦвета.Ссылка = Объект.СтатусВыполнения Тогда 
			Если Не ЦветТекста = Неопределено Тогда 
				Элементы.СтатусВыполнения.ЦветТекста = ЦветТекста;
			КонецЕсли;
			
			Если Не ЦветФона = Неопределено Тогда 
				Элементы.СтатусВыполнения.ЦветФона = ЦветФона;
			КонецЕсли;
			
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Цвет статуса в ТЧ Грузы
	
	мсвУдаляемыхЭлементов = Новый Массив();
	Для Каждого ЭлементУсловногоОформления Из УсловноеОформление.Элементы Цикл
		Если ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "Предустановленный_ЦветаСтатусовЗаказов" Тогда
			мсвУдаляемыхЭлементов.Добавить(ЭлементУсловногоОформления);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементУсловногоОформления Из мсвУдаляемыхЭлементов Цикл
		УсловноеОформление.Элементы.Удалить(ЭлементУсловногоОформления);
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатСтатусы_уэ.Ссылка,
	|	уатСтатусы_уэ.Наименование,
	|	уатСтатусы_уэ.ЦветФонаПоУмолчанию,
	|	уатСтатусы_уэ.ЦветТекстаПоУмолчанию
	|ИЗ
	|	Справочник.уатСтатусы_уэ КАК уатСтатусы_уэ
	|ГДЕ
	|	НЕ уатСтатусы_уэ.ПометкаУдаления
	|	И уатСтатусы_уэ.ДействуетНаЗаказыГрузоотправителей";
	
	ВыборкаЦвета = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЦвета.Следующий() Цикл 
		ЦветФона   = Неопределено;
		ЦветТекста = Неопределено;
		
		ХранилищеЦветФона = ВыборкаЦвета.ЦветФонаПоУмолчанию;
		Если Не ХранилищеЦветФона = Неопределено Тогда 
			ДанныеЦветФона = ХранилищеЦветФона.Получить();
			Если Не ДанныеЦветФона = Неопределено И ТипЗнч(ДанныеЦветФона) = Тип("Цвет") Тогда
				ЦветФона = ДанныеЦветФона;
			КонецЕсли;
		КонецЕсли;
		
		ХранилищеЦветТекста = ВыборкаЦвета.ЦветТекстаПоУмолчанию;
		Если Не ХранилищеЦветТекста = Неопределено Тогда 
			ДанныеЦветТекста = ХранилищеЦветТекста.Получить();
			Если Не ДанныеЦветТекста = Неопределено И ТипЗнч(ДанныеЦветТекста) = Тип("Цвет") Тогда
				ЦветТекста = ДанныеЦветТекста;
			КонецЕсли;
		КонецЕсли;
		
		Если ЦветТекста = Неопределено И ЦветФона = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		
		ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.Грузы.Статус");
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = ВыборкаЦвета.Ссылка;
		
		Если Не ЦветТекста = Неопределено Тогда 
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветТекста);
		КонецЕсли;
		
		Если Не ЦветФона = Неопределено Тогда 
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветФона);
		КонецЕсли;
		
		ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "Предустановленный_ЦветаСтатусовЗаказов";
		ЭлементУсловногоОформления.Представление = НСтр("en='By status color';ru='По цвету статуса '") + ВыборкаЦвета.Наименование;
		
		ПолеОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ГрузыСтатус");
		ПолеОформления.Использование = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусВыполненияПослеВыбораСтатуса(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Объект.СтатусВыполнения = РезультатЗакрытия;
	УстановитьУсловноеОформлениеПолейСтатусов();
	
КонецПроцедуры

&НаКлиенте
Процедура РежимЗаполненияПриИзмененииОтвет(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.ОК Тогда 
		РежимЗаполнения = ПредРежимЗаполнения;
		Возврат;
	КонецЕсли;
	
	Объект.Грузы.Очистить();
	Объект.Расходы.Очистить();
	РассчитатьСуммуДокумента();
	ОбновитьВсегоВТЧОперацииСервер();
	
	РежимЗаполненияПриИзмененииЗавершение();
	
КонецПроцедуры

&НаКлиенте
Процедура РежимЗаполненияПриИзмененииЗавершение()
	
	ПредРежимЗаполнения = РежимЗаполнения;
	
	Если РежимЗаполнения = 1 Тогда // По маршрутным листам.
		Для Каждого ТекСтрока Из Объект.Расходы Цикл 
			ТекСтрока.Груз = Неопределено;
		КонецЦикла;
		
	Иначе // По заказам на ТС.
		Объект.МаршрутныйЛист = Неопределено;
	КонецЕсли;
	
	УстановитьВидимость();
	
	ЗаполнитьДеревоЗаказовПоМЛ();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоЗаказовПоМЛ()
	
	Перем НовСтрокаПункт, ПредПункт, НовСтрокаЗаказ, ПредЗаказ, ПредСтрока;
	
	ЗаказыДерево.ПолучитьЭлементы().Очистить();
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", Объект.МаршрутныйЛист);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатМаршрутныйЛистЗаказы.НомерСтроки КАК НомерСтроки,
	|	уатМаршрутныйЛистЗаказы.ВесБрутто КАК ВесБрутто,
	|	уатМаршрутныйЛистЗаказы.Время КАК Время,
	|	уатМаршрутныйЛистЗаказы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя,
	|	уатМаршрутныйЛистЗаказы.Количество КАК Количество,
	|	уатМаршрутныйЛистЗаказы.КоличествоМест КАК КоличествоМест,
	|	уатМаршрутныйЛистЗаказы.Контрагент КАК Контрагент,
	|	уатМаршрутныйЛистЗаказы.Номенклатура КАК Номенклатура,
	|	уатМаршрутныйЛистЗаказы.Объем КАК Объем,
	|	уатМаршрутныйЛистЗаказы.ПрибытиеПлан КАК ПрибытиеПлан,
	|	уатМаршрутныйЛистЗаказы.УбытиеПлан КАК УбытиеПлан,
	|	уатМаршрутныйЛистЗаказы.Пункт КАК Пункт,
	|	уатМаршрутныйЛистЗаказы.Расстояние КАК Расстояние,
	|	уатМаршрутныйЛистЗаказы.Стоянка КАК Стоянка,
	|	уатМаршрутныйЛистЗаказы.СтоянкаИзПункта КАК СтоянкаИзПункта,
	|	уатМаршрутныйЛистЗаказы.Ожидание КАК Ожидание,
	|	уатМаршрутныйЛистЗаказы.ТипТочкиМаршрута КАК ТипТочкиМаршрута,
	|	уатМаршрутныйЛистЗаказы.Ссылка.ДатаИВремяОтправленияПлан КАК ДатаИВремяОтправленияПлан
	|ИЗ
	|	Документ.уатМаршрутныйЛист.Заказы КАК уатМаршрутныйЛистЗаказы
	|ГДЕ
	|	уатМаршрутныйЛистЗаказы.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	СменилсяПункт = Ложь;
	ПредСтрока    = Неопределено;
	ПредПункт     = Ложь;
	
	ТаблицаЗаказы = Запрос.Выполнить().Выгрузить();
	ВремяПоЗаказам = ПолучитьВремяОтправленияДоставкиПоЗаказам(ТаблицаЗаказы);
		
	УстановитьПривилегированныйРежим(Истина);
	Для Каждого ТекСтрока Из ТаблицаЗаказы Цикл
		//пункт
		Если ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка Тогда
			ТекПункт = ?(ЗначениеЗаполнено(ТекСтрока.Пункт), ТекСтрока.Пункт, ТекСтрока.ЗаказГрузоотправителя.АдресОтправления);
		ИначеЕсли ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка Тогда
			ТекПункт = ?(ЗначениеЗаполнено(ТекСтрока.Пункт), ТекСтрока.Пункт, ТекСтрока.ЗаказГрузоотправителя.АдресНазначения);
		Иначе
			ТекПункт = ТекСтрока.Пункт;
		КонецЕсли;
		
		Если ТекСтрока.ЗаказГрузоотправителя.Пустая() Или ТекСтрока.ТипТочкиМаршрута.Пустая() Тогда
			НовСтрокаПункт = ЗаказыДерево.ПолучитьЭлементы().Добавить();
			НовСтрокаПункт.ПунктЗаказНоменклатура = ТекПункт;
			НовСтрокаПункт.Расстояние             = ТекСтрока.Расстояние;
			НовСтрокаПункт.Время                  = ТекСтрока.Время;
			НовСтрокаПункт.ПрибытиеПлан           = ТекСтрока.ПрибытиеПлан;
			НовСтрокаПункт.Ожидание               = ТекСтрока.Ожидание;
			НовСтрокаПункт.Стоянка                = ТекСтрока.Стоянка;
			НовСтрокаПункт.СтоянкаИзПункта        = ТекСтрока.СтоянкаИзПункта;
			
			ПредПункт     = ТекПункт;
			СменилсяПункт = Истина;
			
			Если ЗначениеЗаполнено(ТекСтрока.УбытиеПлан) Тогда 
				НовСтрокаПункт.УбытиеПлан = ТекСтрока.УбытиеПлан;
			ИначеЕсли ЗаказыДерево.ПолучитьЭлементы().Индекс(НовСтрокаПункт) = 0 Тогда
				НовСтрокаПункт.УбытиеПлан = ТекСтрока.ДатаИВремяОтправленияПлан;
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
		
		Если Не ТекПункт = ПредПункт Или СменилсяПункт Тогда
			НовСтрокаПункт = ЗаказыДерево.ПолучитьЭлементы().Добавить();
			НовСтрокаПункт.ПунктЗаказНоменклатура = ТекПункт;
			НовСтрокаПункт.Расстояние             = ТекСтрока.Расстояние;
			НовСтрокаПункт.Время                  = ТекСтрока.Время;
			НовСтрокаПункт.ПрибытиеПлан           = ТекСтрока.ПрибытиеПлан;
			НовСтрокаПункт.Ожидание               = ТекСтрока.Ожидание;
			НовСтрокаПункт.СтоянкаИзПункта        = ТекСтрока.СтоянкаИзПункта;
			
			ПредПункт     = ТекПункт;
			СменилсяПункт = Истина;
			
			Если ЗначениеЗаполнено(ТекСтрока.УбытиеПлан) Тогда 
				НовСтрокаПункт.УбытиеПлан = ТекСтрока.УбытиеПлан;
			ИначеЕсли ЗаказыДерево.ПолучитьЭлементы().Индекс(НовСтрокаПункт) = 0 Тогда
				НовСтрокаПункт.УбытиеПлан = ТекСтрока.ДатаИВремяОтправленияПлан;
			КонецЕсли;
		КонецЕсли;
		
		//Заказ
		Если Не ТекСтрока.ЗаказГрузоотправителя = ПредЗаказ Или СменилсяПункт
			Или (Не ПредСтрока = Неопределено И Не ТекСтрока.ТипТочкиМаршрута = ПредСтрока.ТипТочкиМаршрута) Тогда
			НовСтрокаЗаказ = НовСтрокаПункт.ПолучитьЭлементы().Добавить();
			НовСтрокаЗаказ.ПунктЗаказНоменклатура = ТекСтрока.ЗаказГрузоотправителя;
			НовСтрокаЗаказ.ТипТочкиМаршрута       = ТекСтрока.ТипТочкиМаршрута;
			НовСтрокаЗаказ.ВесБрутто              = ТекСтрока.ВесБрутто;
			НовСтрокаЗаказ.Объем                  = ТекСтрока.Объем;
			НовСтрокаЗаказ.КоличествоМест         = ТекСтрока.КоличествоМест;
			НовСтрокаЗаказ.Стоянка                = ТекСтрока.Стоянка;
			НовСтрокаЗаказ.СтоянкаИзПункта        = ТекСтрока.СтоянкаИзПункта;
			НовСтрокаЗаказ.Расстояние             = ТекСтрока.Расстояние;
			
			Если ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка Тогда
				НовСтрокаЗаказ.ОкноС  = ВремяПоЗаказам.Получить(ТекСтрока.НомерСтроки).ОтправлениеС;
				НовСтрокаЗаказ.ОкноПо = ВремяПоЗаказам.Получить(ТекСтрока.НомерСтроки).ОтправлениеПо;
			ИначеЕсли ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка Тогда
				НовСтрокаЗаказ.ОкноС  = ВремяПоЗаказам.Получить(ТекСтрока.НомерСтроки).ДоставкаС;
				НовСтрокаЗаказ.ОкноПо = ВремяПоЗаказам.Получить(ТекСтрока.НомерСтроки).ДоставкаПо;
			КонецЕсли;
			
			ПредЗаказ     = ТекСтрока.ЗаказГрузоотправителя;
			СменилсяПункт = Ложь;
		КонецЕсли;
		
		Если ТекСтрока.ЗаказГрузоотправителя.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам Тогда
			ПустаяЕИ = Справочники.ЕдиницыИзмерения.ПустаяСсылка();
			
			НовСтрокаЗаказ.Количество       = ТекСтрока.Количество;
			НовСтрокаЗаказ.ВесБрутто        = ТекСтрока.ВесБрутто;
			НовСтрокаЗаказ.Объем            = ТекСтрока.Объем;
			НовСтрокаЗаказ.КоличествоМест   = ТекСтрока.КоличествоМест;
			НовСтрокаЗаказ.ЕдиницаИзмерения = ПустаяЕИ;
			
		Иначе
			//номенклатура
			НовСтрокаНоменклатура = НовСтрокаЗаказ.ПолучитьЭлементы().Добавить();
			НовСтрокаНоменклатура.ПунктЗаказНоменклатура = ТекСтрока.Номенклатура;
			НовСтрокаНоменклатура.Количество             = ТекСтрока.Количество;
			НовСтрокаНоменклатура.ВесБрутто              = ТекСтрока.ВесБрутто;
			НовСтрокаНоменклатура.Объем                  = ТекСтрока.Объем;
			НовСтрокаНоменклатура.КоличествоМест         = ТекСтрока.КоличествоМест;
			НовСтрокаНоменклатура.ЕдиницаИзмерения       = ТекСтрока.ЕдиницаИзмерения;
		КонецЕсли;
		
		ПредСтрока = ТекСтрока;
	КонецЦикла;
	
	ОбновитьМаршрутныеПараметрыДереваЗаказов();
	ОбновитьГрузовыеПараметрыДереваЗаказов();
	ОбновитьТипыЗначенийСтрокДереваЗаказов();
	УстановитьПривилегированныйРежим(Ложь);
	ОбновитьНадписьИтоги();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьМаршрутныеПараметрыДереваЗаказов()
	
	ЭлементыДерева = ЗаказыДерево.ПолучитьЭлементы();
	
	Если ЭлементыДерева.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПредВремяОтпр       = ЭлементыДерева[0].УбытиеПлан;
	ПредПунктСтрока     = Неопределено;
	СуммарноеРасстояние = 0;
	СуммарноеВремя      = 0;
	ОбщееВремяСтоянок   = 0;
	
	Для Каждого ТекСтрокаПункт Из ЭлементыДерева Цикл
		СуммарноеВремяСтоянки = 0;
		
		ЭлементыПункта = ТекСтрокаПункт.ПолучитьЭлементы();
		Если ЭлементыПункта.Количество() = 0 Тогда
			СуммарноеВремяСтоянки = уатЗащищенныеФункцииСервер.СложитьВремя(СуммарноеВремяСтоянки, ТекСтрокаПункт.Стоянка);
		КонецЕсли;
		
		Для Каждого ТекСтрокаЗаказ Из ЭлементыПункта Цикл 
			СуммарноеВремяСтоянки = уатЗащищенныеФункцииСервер.СложитьВремя(СуммарноеВремяСтоянки, ТекСтрокаЗаказ.Стоянка);
		КонецЦикла;
		
		СуммарноеВремяСтоянки = уатЗащищенныеФункцииСервер.СложитьВремя(СуммарноеВремяСтоянки, ТекСтрокаПункт.СтоянкаИзПункта);
		
		ТекСтрокаПункт.Стоянка = СуммарноеВремяСтоянки;
		СуммарноеРасстояние    = СуммарноеРасстояние + ТекСтрокаПункт.Расстояние;
		ОбщееВремяСтоянок      = уатЗащищенныеФункцииСервер.СложитьВремя(ОбщееВремяСтоянок, ТекСтрокаПункт.Стоянка);
		
		Если ЭлементыДерева.Индекс(ТекСтрокаПункт) = 0 Тогда
			ПредВремяОтпр = ТекСтрокаПункт.УбытиеПлан;
		Иначе 
			ТекПрибытиеПлан = уатЗащищенныеФункцииСервер.СложитьВремя(ПредВремяОтпр, ПредПунктСтрока.Время);
			ТекСтрокаПункт.ПрибытиеПлан = уатЗащищенныеФункцииСервер.СложитьВремя(ТекПрибытиеПлан, ТекСтрокаПункт.Ожидание);
			ТекСтрокаПункт.УбытиеПлан   = уатЗащищенныеФункцииСервер.СложитьВремя(ТекСтрокаПункт.ПрибытиеПлан, СуммарноеВремяСтоянки);
			ПредВремяОтпр               = ТекСтрокаПункт.УбытиеПлан;
		КонецЕсли;
		
		ПредПунктСтрока = ТекСтрокаПункт;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьГрузовыеПараметрыДереваЗаказов()
	
	ТекВес   = 0; ТекОбъем   = 0; ТекКолМест   = 0;
	ЗаказВес = 0; ЗаказОбъем = 0; ЗаказКолМест = 0;
	
	СтрокиДерева = ЗаказыДерево.ПолучитьЭлементы();
	
	мсвЗаказыСДетализациейВцеломПоЗаказу = Новый Массив();
	Для Каждого ТекПункт Из СтрокиДерева Цикл
		Для Каждого ТекЗаказ Из ТекПункт.ПолучитьЭлементы() Цикл
			Если ЗначениеЗаполнено(ТекЗаказ.ПунктЗаказНоменклатура)
					И мсвЗаказыСДетализациейВцеломПоЗаказу.Найти(ТекЗаказ.ПунктЗаказНоменклатура) = Неопределено
					И ТекЗаказ.ПунктЗаказНоменклатура.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам Тогда
				мсвЗаказыСДетализациейВцеломПоЗаказу.Добавить(ТекЗаказ.ПунктЗаказНоменклатура)
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого ТекПункт Из СтрокиДерева Цикл
		Для Каждого ТекЗаказ Из ТекПункт.ПолучитьЭлементы() Цикл
			
			ЗаказВес = 0; ЗаказОбъем = 0; ЗаказКолМест = 0;
			
			Если ЗначениеЗаполнено(ТекЗаказ.ПунктЗаказНоменклатура)
				И мсвЗаказыСДетализациейВцеломПоЗаказу.Найти(ТекЗаказ.ПунктЗаказНоменклатура) <> Неопределено Тогда
				
				ЗаказВес     = ТекЗаказ.ПунктЗаказНоменклатура.ВесБрутто;
				ЗаказОбъем   = ТекЗаказ.ПунктЗаказНоменклатура.Объем;
				ЗаказКолМест = ТекЗаказ.ПунктЗаказНоменклатура.КоличествоМест;
			Иначе
				Для Каждого ТекНоменклатура Из ТекЗаказ.ПолучитьЭлементы() Цикл
					ЗаказВес     = ЗаказВес     + ТекНоменклатура.ВесБрутто;
					ЗаказОбъем   = ЗаказОбъем   + ТекНоменклатура.Объем;
					ЗаказКолМест = ЗаказКолМест + ТекНоменклатура.КоличествоМест;
				КонецЦикла;
			КонецЕсли;
			
			ТекЗаказ.ВесБрутто      = ЗаказВес;
			ТекЗаказ.Объем          = ЗаказОбъем;
			ТекЗаказ.КоличествоМест = ЗаказКолМест;
			Если ТекЗаказ.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка Тогда
				ТекВес     = ТекВес     + ЗаказВес;
				ТекОбъем   = ТекОбъем   + ЗаказОбъем;
				ТекКолМест = ТекКолМест + ЗаказКолМест;
			ИначеЕсли ТекЗаказ.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка Тогда
				ТекВес     = ТекВес     - ЗаказВес;
				ТекОбъем   = ТекОбъем   - ЗаказОбъем;
				ТекКолМест = ТекКолМест - ЗаказКолМест;
			КонецЕсли;
		КонецЦикла;
		
		ТекПункт.ВесБрутто      = ТекВес;
		ТекПункт.Объем          = ТекОбъем;
		ТекПункт.КоличествоМест = ТекКолМест;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТипыЗначенийСтрокДереваЗаказов(Узел = Неопределено)
	// Типы значений строки:
	// 1 - СправочникСсылка.уатПунктыНазначения 
	// 2 - ДокументСсылка.уатЗаказГрузоотправителя
	// 3 - Строка
	// 4 - СправочникСсылка.Номенклатура
	// 5 - СправочникСсылка.уатГрузовыеМеста_уэ
	
	Если Узел = Неопределено Тогда 
		Узел = ЗаказыДерево;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из Узел.ПолучитьЭлементы() Цикл 
		ОбновитьТипыЗначенийСтрокДереваЗаказов(ТекСтрока);
		Если ТипЗнч(ТекСтрока.ПунктЗаказНоменклатура) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда 
			ТекСтрока.ТипЗначенияСтроки = 1;
		ИначеЕсли ТипЗнч(ТекСтрока.ПунктЗаказНоменклатура) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") Тогда 
			ТекСтрока.ТипЗначенияСтроки = 2;
		ИначеЕсли ТипЗнч(ТекСтрока.ПунктЗаказНоменклатура) = Тип("Строка") Тогда 
			ТекСтрока.ТипЗначенияСтроки = 3;
		ИначеЕсли ТипЗнч(ТекСтрока.ПунктЗаказНоменклатура) = Тип("СправочникСсылка.Номенклатура") Тогда 
			ТекСтрока.ТипЗначенияСтроки = 4;
		ИначеЕсли ТипЗнч(ТекСтрока.ПунктЗаказНоменклатура) = Тип("СправочникСсылка.уатГрузовыеМеста_уэ") Тогда 
			ТекСтрока.ТипЗначенияСтроки = 5;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДанныеПоТСиВодителюИзМЛ(Знач МаршрутныйЛист)
	
	ДанныеПоТСиВодителю = Новый Структура("ТС, Водитель1", МаршрутныйЛист.ТС, МаршрутныйЛист.Водитель1);
	
	Возврат ДанныеПоТСиВодителю;
	
КонецФункции // ДанныеПоТСиВодителюИзМЛ()

&НаКлиенте
Процедура ОбновитьДанныеПоТСиВодителюВМЛ()
	
	ДанныеПоТСиВодителю = ДанныеПоТСиВодителюИзМЛ(Объект.МаршрутныйЛист);
	Если (ЗначениеЗаполнено(ДанныеПоТСиВодителю.ТС) И ЗначениеЗаполнено(Объект.ТС) И Объект.ТС <> ДанныеПоТСиВодителю.ТС)
		ИЛИ (ЗначениеЗаполнено(ДанныеПоТСиВодителю.Водитель1) И ЗначениеЗаполнено(Объект.Водитель) И Объект.Водитель <> ДанныеПоТСиВодителю.Водитель1) Тогда
		
		ТекстНСТР = НСтр("en='Data for the vehicle/driver in the route list differ from the order. Replace?';ru='Данные по ТС/водителю в маршрутном листе отличаются от заказа. Заменить?'");
		Оповещение = Новый ОписаниеОповещения("ОбновитьДанныеПоТСиВодителюВМЛОтвет", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстНСТР, РежимДиалогаВопрос.ДаНет);
	//Иначе 
	//	ОбновитьДанныеПоТСиВодителюВМЛЗавершение();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеПоТСиВодителюВМЛОтвет(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;
	
	ОповеститьМЛОбИзменении = Ложь;
	ОбновитьДанныеПоТСиВодителюВМЛЗавершение(ОповеститьМЛОбИзменении);
	Если ОповеститьМЛОбИзменении Тогда
		Оповестить("ИзменениеТС", Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПоТСиВодителюВМЛЗавершение(ОповеститьМЛОбИзменении = Ложь)
	
	Если Не ЗначениеЗаполнено(Объект.ТС) И Не ЗначениеЗаполнено(Объект.Водитель) Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.МаршрутныйЛист) Тогда 
		Возврат;
	КонецЕсли;
	
	ДокОб = Объект.МаршрутныйЛист.ПолучитьОбъект();
	
	ДокОб.ДополнительныеСвойства.Вставить("ИзменениеМЛизЗаказаПеревозчику");
	Если ЗначениеЗаполнено(Объект.ТС) Тогда 
		ДокОб.ПринадлежностьПеревозки = Объект.ТС.ПринадлежностьТС;
		ДокОб.ТС = Объект.ТС;
		ДокОб.Контрагент = Объект.Контрагент;
		ДокОб.ДоговорКонтрагента = Объект.ДоговорКонтрагента;
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Водитель) Тогда 
		ДокОб.Водитель1 = Объект.Водитель;
	КонецЕсли;
	
	Попытка
		ДокОб.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		Попытка
			ДокОб.Записать(РежимЗаписиДокумента.Запись);
			ОповеститьМЛОбИзменении = Истина;
		Исключение
			ИнформацияОбОшибке = ИнформацияОбОшибке();
			Если ИнформацияОбОшибке.Причина = Неопределено Тогда 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ИнформацияОбОшибке.Описание);
			Иначе 
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ИнформацияОбОшибке.Причина.Описание);
			КонецЕсли;
		КонецПопытки;
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеПоМЛСервер(Знач МаршрутныйЛистСсылка)
	
	Результат = Новый Структура("Расстояние,ПробегСГрузом,ПробегПорожний,ВремяВПути,ВесБрутто,Объем,КоличествоМест,ВыработкаТСиСотрудников",
		0, 0, 0, 0, 0, 0, 0, Новый Массив());
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", МаршрутныйЛистСсылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатМаршрутныйЛист.Расстояние,
	|	уатМаршрутныйЛист.ПробегСГрузом,
	|	уатМаршрутныйЛист.ПробегПорожний,
	|	уатМаршрутныйЛист.ВремяВПути,
	|	уатМаршрутныйЛист.ВесБрутто,
	|	уатМаршрутныйЛист.Объем,
	|	уатМаршрутныйЛист.КоличествоМест,
	|	уатМаршрутныйЛист.ВыработкаТСиСотрудников.(
	|		ПараметрВыработки,
	|		КоличествоПлан
	|	)
	|ИЗ
	|	Документ.уатМаршрутныйЛист КАК уатМаршрутныйЛист
	|ГДЕ
	|	уатМаршрутныйЛист.Ссылка = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда 
		ЗаполнитьЗначенияСвойств(Результат, Выборка,, "ВыработкаТСиСотрудников");
		
		ВыборкаВыработка = Выборка.ВыработкаТСиСотрудников.Выбрать();
		Пока ВыборкаВыработка.Следующий() Цикл 
			Результат.ВыработкаТСиСотрудников.Добавить(
				Новый Структура("ПараметрВыработки, КоличествоПлан",
				ВыборкаВыработка.ПараметрВыработки, ВыборкаВыработка.КоличествоПлан));
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПолучитьДанныеПоМЛСервер()

&НаСервере
Процедура ЗаполнитьРеквизитыПеревозчика(КонтрагентИзменен)
	
	Если ТипЗнч(Объект.МаршрутныйЛист.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда 
		Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда 
			Объект.Контрагент = Объект.МаршрутныйЛист.Контрагент;
			Контрагент = Объект.Контрагент;
			Объект.ДоговорКонтрагента = Объект.МаршрутныйЛист.ДоговорКонтрагента;
			Договор = Объект.ДоговорКонтрагента;
			
			КонтрагентИзменен = Истина;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.ТС) Тогда 
			Объект.ТС = Объект.МаршрутныйЛист.ТС;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПравоРедактированиеДокумента()
	Рез = ПравоДоступа("Редактирование", Метаданные.Документы.уатЗаказПеревозчику_уэ);
	Возврат Рез;
КонецФункции

&НаСервереБезКонтекста
Функция ФизЛицоВодителяКонтрагента(КлючЗаписи)
	Возврат КлючЗаписи.ФизЛицо;
КонецФункции

&НаСервере
Функция ВсегоДопВыработка()
	Рез = Новый Структура("Выработка1, Выработка2, ПараметрВыработки1, ПараметрВыработки2", 0, 0, Неопределено, Неопределено);
	
	Для Каждого ТекВыработка Из Объект.МаршрутныйЛист.ВыработкаТСиСотрудников Цикл
		Если НЕ ТекВыработка.ПараметрВыработки.Предопределенный
			И ТекВыработка.ПараметрВыработки.СпособВводаЗначений = Перечисления.уатСпособыВводаЗначенийВыработкивМЛ_уэ.ВТабличнойЧасти Тогда
			
			Если Рез.ПараметрВыработки1 = Неопределено Тогда
				Рез.ПараметрВыработки1 = ТекВыработка.ПараметрВыработки;
			Иначе
				Рез.ПараметрВыработки2 = ТекВыработка.ПараметрВыработки;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Рез.ПараметрВыработки1 = Неопределено Тогда
		Возврат Рез;
	КонецЕсли;
	
	тблУчитанныеСтроки = Новый ТаблицаЗначений;
	тблУчитанныеСтроки.Колонки.Добавить("Пункт");
	тблУчитанныеСтроки.Колонки.Добавить("Заказ");
	Для Каждого ТекСтрока Из Объект.МаршрутныйЛист.Заказы Цикл
		Если тблУчитанныеСтроки.НайтиСтроки(Новый Структура("Пункт, Заказ",
			ТекСтрока.Пункт, ТекСтрока.ЗаказГрузоотправителя)).Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Рез.ПараметрВыработки1) И ТекСтрока.Выработка1 > 0 Тогда
			Если Рез.ПараметрВыработки1.Временный Тогда
				Рез.Выработка1 = уатЗащищенныеФункцииСервер.СложитьВремя(Рез.Выработка1, ТекСтрока.Выработка1);
			Иначе
				Рез.Выработка1 = Рез.Выработка1 + ТекСтрока.Выработка1;
			КонецЕсли;
			НоваяСтрока = тблУчитанныеСтроки.Добавить();
			НоваяСтрока.Пункт = ТекСтрока.Пункт;
			НоваяСтрока.Заказ = ТекСтрока.ЗаказГрузоотправителя;
		КонецЕсли;
		Если ЗначениеЗаполнено(Рез.ПараметрВыработки2) И ТекСтрока.Выработка2 > 0 Тогда
			Если Рез.ПараметрВыработки2.Временный Тогда
				Рез.Выработка2 = уатЗащищенныеФункцииСервер.СложитьВремя(Рез.Выработка2, ТекСтрока.Выработка2);
			Иначе
				Рез.Выработка2 = Рез.Выработка2 + ТекСтрока.Выработка2;
			КонецЕсли;
			НоваяСтрока = тблУчитанныеСтроки.Добавить();
			НоваяСтрока.Пункт = ТекСтрока.Пункт;
			НоваяСтрока.Заказ = ТекСтрока.ЗаказГрузоотправителя;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Рез;
КонецФункции

&НаСервере
Процедура ЗаполнитьДопВыработкуПриСоздании()
	Объект.Выработка.Очистить();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатПараметрыВыработки.Ссылка
	|ИЗ
	|	Справочник.уатПараметрыВыработки КАК уатПараметрыВыработки
	|ГДЕ
	|	уатПараметрыВыработки.ИспользоватьВДопВыработкеМЛ
	|	И НЕ уатПараметрыВыработки.Предопределенный
	|	И НЕ уатПараметрыВыработки.ПометкаУдаления
	|	И (уатПараметрыВыработки.ИспользоватьДляЗаказовИПотребности И НЕ &ПоМЛ
	|	ИЛИ уатПараметрыВыработки.ИспользоватьДляМаршрутныхЛистов И &ПоМЛ)");
	Запрос.УстановитьПараметр("ПоМЛ", РежимЗаполнения = 1);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Объект.Выработка.Добавить();
		НоваяСтрока.ПараметрВыработки = Выборка.Ссылка;
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКоличествоГрузаПоЗаказу(ЗаказНаТС, Груз, ЕдиницаИзмерения)
	
	Если ТипЗнч(Груз) = Тип("СправочникСсылка.уатГрузовыеМеста_уэ") Тогда 
		СтрокаГруза = ЗаказНаТС.ГрузовойСостав.Найти(Груз, "ГрузовоеМесто");
		Если СтрокаГруза = Неопределено Тогда 
			Возврат 1;
		Иначе 
			Возврат СтрокаГруза.КоличествоМест;
		КонецЕсли;
		
	Иначе 
		СтрокиГруза = ЗаказНаТС.Товары.НайтиСтроки(Новый Структура("Номенклатура, ЕдиницаИзмерения", Груз, ЕдиницаИзмерения));
		Если СтрокиГруза.Количество() Тогда 
			Возврат СтрокиГруза[0].Количество;
		Иначе 
			Возврат 1;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции // ПолучитьКоличествоГрузаПоЗаказу()

&НаСервереБезКонтекста
Функция ПолучитьПрицеп(ТС, ИсключитьТС)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ВСоставе",    ТС);
	Запрос.УстановитьПараметр("ИсключитьТС", ИсключитьТС);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|	уатСоставТС.ТС КАК ТС
	|ИЗ
	|	РегистрСведений.уатСоставТС КАК уатСоставТС
	|ГДЕ
	|	НЕ уатСоставТС.ТС = &ИсключитьТС
	|	И уатСоставТС.ВСоставе = &ВСоставе
	|	И НЕ уатСоставТС.ТС.ЭтоГруппа
	|	И НЕ уатСоставТС.ТС.ПометкаУдаления
	|	И (уатСоставТС.ТС.ВидМоделиТС = ЗНАЧЕНИЕ(Перечисление.уатВидыМоделейТС.Прицеп)
	|			ИЛИ уатСоставТС.ТС.ВидМоделиТС = ЗНАЧЕНИЕ(Перечисление.уатВидыМоделейТС.Оборудование))
	|	И ВЫБОР
	|			КОГДА уатСоставТС.ТС.ПринадлежностьТС = ЗНАЧЕНИЕ(Перечисление.уатПринадлежностьТС.Привлеченное)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ уатСоставТС.ТС.ДатаВыбытия = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					И НЕ уатСоставТС.ТС.ДатаВводаВЭксплуатацию = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		КОНЕЦ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.ТС;
	Иначе 
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции // ПолучитьСписокПрицепов()

&НаСервереБезКонтекста
Процедура УстановитьСписокПрицеповДляПодбора(ТекстПодбора, ИсключитьТС, ДанныеВыбора, АвторизованВнешнийПользователь, ОбъектКонтрагент)
	
	Если ДанныеВыбора = Неопределено Тогда 
		ДанныеВыбора = Новый СписокЗначений();
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ИсключитьТС",   ИсключитьТС);
	Запрос.УстановитьПараметр("СтрокаПодбора", "" + ТекстПодбора + "%");
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатТС.Ссылка КАК Ссылка,
	|	уатТС.Наименование КАК Наименование,
	|	уатТС.ВладелецТС КАК ВладелецТС
	|ИЗ
	|	Справочник.уатТС КАК уатТС
	|ГДЕ
	|	НЕ уатТС.ЭтоГруппа
	|	И НЕ уатТС.ПометкаУдаления
	|	И НЕ уатТС.Ссылка = &ИсключитьТС
	|	И (уатТС.ВидМоделиТС = ЗНАЧЕНИЕ(Перечисление.уатВидыМоделейТС.Прицеп)
	|			ИЛИ уатТС.ВидМоделиТС = ЗНАЧЕНИЕ(Перечисление.уатВидыМоделейТС.Оборудование))
	|	И уатТС.Наименование ПОДОБНО &СтрокаПодбора";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		
		Если АвторизованВнешнийПользователь
			И Выборка.ВладелецТС <> ОбъектКонтрагент Тогда
			Продолжить;
		КонецЕсли;
		
		врПозицияОтсечения = СтрДлина(ТекстПодбора);
		тПредставление = Новый ФорматированнаяСтрока(
			Новый ФорматированнаяСтрока(Лев(Выборка.Наименование, врПозицияОтсечения),, ЦветаСтиля.уатЦветТекстаПриАвтоподборе), 
			Новый ФорматированнаяСтрока(Прав(Выборка.Наименование, СтрДлина(Выборка.Наименование)-врПозицияОтсечения)));
		ДанныеВыбора.Добавить(Выборка.Ссылка, тПредставление);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборЗаказовОчисткаТЧ(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда 
		Объект.Грузы.Очистить();
		
		ПодборЗаказовОткрытьФормуПодбора();
		
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		ПодборЗаказовОткрытьФормуПодбора();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборЗаказовОткрытьФормуПодбора()
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ДокументПодбора", "уатЗаказПеревозчику_уэ");
	
	Оповещение = Новый ОписаниеОповещения("ПодборЗаказовПослеПодбора", ЭтотОбъект);
	
	ОткрытьФорму("ОбщаяФорма.уатПодборЗаказов", ПараметрыФормы, ЭтотОбъект,,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборЗаказовПослеПодбора(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из РезультатЗакрытия.ПодобранныеЗаказы Цикл 
		НоваяСтрока = Объект.Грузы.Добавить();
		НоваяСтрока.Заказ            = ТекСтрока.Заказ;
		НоваяСтрока.ГрузовоеМесто    = ТекСтрока.Номенклатура;
		НоваяСтрока.ЕдиницаИзмерения = ТекСтрока.ЕдиницаИзмерения;
		НоваяСтрока.Количество       = ТекСтрока.Количество;
	КонецЦикла;
	
	РассчитатьПоказателиСервер();
	ОбновитьПунктыОтправленияНазначенияГрузовСервер();
	ОбновитьСтатусыГрузовСервер();
	ОбновитьВсегоВТЧОперацииСервер();
	ОбновитьНадписьИтоги();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС(ИмяТЧ)
	уатОбщегоНазначенияСервер.ПересчитатьСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС(Объект[ИмяТЧ], Объект.СуммаВключаетНДС);
КонецПроцедуры

&НаСервере
Процедура ПересчитатьЦеныТабличнойЧастиПоВалюте(ВалютаРасчетовПередИзменением, ИмяТЧ)
	уатОбщегоНазначенияСервер.ПересчитатьЦеныТабличнойЧастиПоВалюте(Объект, ВалютаРасчетовПередИзменением, ИмяТЧ);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПраваИНастройкиПользователя(Организация, НастройкаПольз)
	Возврат уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, НастройкаПольз);
КонецФункции

&НаКлиенте
Процедура РассчитатьУслугиПриИзмененииПоказателей()
	Если ИспользоватьПлановыеУслуги Тогда
		РассчитатьПолучаемыеУслугиЗавершение(Истина, Истина);
	КонецЕсли;
	РассчитатьПолучаемыеУслугиЗавершение(Ложь, Истина);
КонецПроцедуры

&НаСервере
Процедура УстановитьВозможностьРедактированияДоходовРасходов()
	РазрешитьРедактированиеДоходовРасходов = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(
		ПользователиКлиентСервер.АвторизованныйПользователь(), ПланыВидовХарактеристик.уатПраваИНастройки.РазрешитьРедактированиеДоходовРасходов);
		
	Если НЕ РазрешитьРедактированиеДоходовРасходов Тогда
		Элементы.ОперацииРучнойВвод.Доступность = Ложь;
		Элементы.ОперацииНоменклатура.Доступность = Ложь;
		Элементы.ОперацииТариф.ТолькоПросмотр = Истина;
		Элементы.ОперацииКоличество.Доступность = Ложь;
		Элементы.ОперацииЦена.Доступность = Ложь;
		Элементы.ОперацииСумма.Доступность = Ложь;
		Элементы.ОперацииКоличествоПлан.Доступность = Ложь;
		Элементы.ОперацииЦенаПлан.Доступность = Ложь;
		Элементы.ОперацииСуммаПлан.Доступность = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемВопрос(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.ОК Тогда
		флВопросЗакрытиеФормы = Ложь;
		Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлагРучногоРедактирования(ТекСтрокаТабличнойЧасти)
	ТекСтрокаТабличнойЧасти.РучнойВвод = Истина;
	РассчитатьСуммуДокумента();
	ОбновитьВсегоВТЧОперацииСервер();
КонецПроцедуры

&НаСервереБезКонтекста
Функция СписокГрузМестЗаказаСервер(ТекЗаказ)
	СписРез = Новый СписокЗначений;
	Если ТекЗаказ.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам Тогда
		Для Каждого ТекСтрока Из ТекЗаказ.ГрузовойСостав Цикл
			Если СписРез.НайтиПоЗначению(ТекСтрока.ГрузовоеМесто) = Неопределено Тогда
				СписРез.Добавить(ТекСтрока.ГрузовоеМесто);
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ТекЗаказ.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам Тогда
		Для Каждого ТекСтрока Из ТекЗаказ.Товары Цикл
			Если СписРез.НайтиПоЗначению(ТекСтрока.Номенклатура) = Неопределено Тогда
				СписРез.Добавить(ТекСтрока.Номенклатура);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СписРез;
КонецФункции

&НаСервере
Процедура РассчитатьСтоимостьУслуги(СтруктураСтроки, Знач ДопПараметры)
	ДопПараметры.Вставить("ДокументОбъект", РеквизитФормыВЗначение("Объект"));
	уатРасчетыПоТарифам_уэ.РассчитатьСтоимостьУслуги(СтруктураСтроки, ДопПараметры);
КонецПроцедуры

&НаКлиенте
Процедура РасходыПриИзмененииВалюты()
	ТекСтрока = Элементы.Операции.ТекущиеДанные;
	
	Если ТекСтрока.Валюта = ДанныеСтрокиРасходы.Валюта Тогда
		Возврат;
	КонецЕсли;
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ТекСтрока", ТекСтрока);
		
	Если ТекСтрока.Цена = 0 И ТекСтрока.ЦенаПлан = 0 Тогда
		РасходыПриИзмененииВалютыЗавершение(КодВозвратаДиалога.Нет, ДопПараметры);
	Иначе
		Оповещ = Новый ОписаниеОповещения("РасходыПриИзмененииВалютыЗавершение", ЭтотОбъект, ДопПараметры);
		ПоказатьВопрос(Оповещ, "Изменилась валюта строки. Пересчитать цену и сумму по курсу?", РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РасходыПриИзмененииВалютыЗавершение(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда //пересчет сумм в строке по курсу
		СтруктураКурсаПред = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ДанныеСтрокиРасходы.Валюта, Объект.ДатаКурса);
		СтруктураКурса = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ДопПараметры.ТекСтрока.Валюта, Объект.ДатаКурса);
				
		ДопПараметры.ТекСтрока.Цена = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ДопПараметры.ТекСтрока.Цена,
			ДанныеСтрокиРасходы.Валюта,
			ДопПараметры.ТекСтрока.Валюта,
			СтруктураКурсаПред.Курс,
			СтруктураКурса.Курс,
			СтруктураКурсаПред.Кратность,
			СтруктураКурса.Кратность);
		РассчитатьСуммуВСтрокеТабличнойЧасти(ДопПараметры.ТекСтрока, "Факт");
		
		Если ИспользоватьПлановыеУслуги Тогда
			ДопПараметры.ТекСтрока.ЦенаПлан = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ДопПараметры.ТекСтрока.ЦенаПлан,
				ДанныеСтрокиРасходы.Валюта,
				ДопПараметры.ТекСтрока.Валюта,
				СтруктураКурсаПред.Курс,
				СтруктураКурса.Курс,
				СтруктураКурсаПред.Кратность,
				СтруктураКурса.Кратность);
			РассчитатьСуммуВСтрокеТабличнойЧасти(ДопПараметры.ТекСтрока, "План");
		КонецЕсли;
		
		РассчитатьСуммуНДС(ДопПараметры.ТекСтрока);
		РассчитатьСуммуВсегоВстрокеТЧ(ДопПараметры.ТекСтрока);
	КонецЕсли;
	
	ОбновитьВсегоВТЧОперацииСервер();
	ОбновитьНадписьИтоги();
	ВывестиСуммовыеИтогиДокумента();
	
	ДанныеСтрокиРасходы.Валюта = ДопПараметры.ТекСтрока.Валюта;
	
	ДопПараметры.ТекСтрока.РучнойВвод = Истина;
	Модифицированность = Истина;	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПодвалРасходов()
	СтрокаКолонки = "Сумма, СуммаНДС, Всего";
	Если ИспользоватьПлановыеУслуги Тогда
		СтрокаКолонки = СтрокаКолонки + ", СуммаПлан, СуммаНДСПлан, ВсегоПлан";
	КонецЕсли;
	СтруктураКолонки = Новый Структура(СтрокаКолонки);
	
	соотвИтогиВВалюте = Новый Соответствие;
	Для Каждого ТекСтрока Из Объект.Расходы Цикл
		ТекЭлем = соотвИтогиВВалюте.Получить(ТекСтрока.Валюта);
		Если ТекЭлем = Неопределено Тогда
			ТекСтруктураКолонки = Новый Структура(СтрокаКолонки);
			ЗаполнитьЗначенияСвойств(ТекСтруктураКолонки, ТекСтрока);
			соотвИтогиВВалюте.Вставить(ТекСтрока.Валюта, ТекСтруктураКолонки);
		Иначе
			Для Каждого КолонкаИтоги Из СтруктураКолонки Цикл
				ТекЭлем[КолонкаИтоги.Ключ] = ТекЭлем[КолонкаИтоги.Ключ] + ТекСтрока[КолонкаИтоги.Ключ];
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	мВысотаПодвала = 1;
	
	Для Каждого КолонкаИтоги Из СтруктураКолонки Цикл
		ТекТекстПодвала = "";
		мКоличВалют = 0;
		
		Для Каждого ТекСтрокаИтогиВВалюте Из соотвИтогиВВалюте Цикл
			ТекИтого = ТекСтрокаИтогиВВалюте.Значение[КолонкаИтоги.Ключ];
			Если ТекИтого = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ТекТекстПодвала = ТекТекстПодвала + "
				|" + Формат(ТекИтого, "ЧДЦ=2") + " " + ТекСтрокаИтогиВВалюте.Ключ + "";
			
			мКоличВалют = мКоличВалют + 1;
		КонецЦикла;
		
		Элементы["Операции" + КолонкаИтоги.Ключ].ТекстПодвала = Сред(ТекТекстПодвала, 2);
		
		мВысотаПодвала = Макс(мВысотаПодвала, мКоличВалют);
	КонецЦикла;
	
	Если Элементы.Операции.ВысотаПодвала <> мВысотаПодвала Тогда
		Элементы.Операции.ВысотаПодвала = мВысотаПодвала;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиУведомленийЗакрытиеФормы(Результат, ДопПараметры) Экспорт
	Если ТипЗнч(Результат) = Тип("ДанныеФормыКоллекция") Тогда
		Объект.ПолучателиУведомлений.Очистить();
		Для Каждого ТекСтрока Из Результат Цикл
			НоваяСтрока = Объект.ПолучателиУведомлений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		КонецЦикла;
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьПунктыОтправленияНазначенияГрузовСервер()
	
	ТекЗаказ = Неопределено;
	мсвОтрезкиПути = Новый Массив;
	Для Каждого ТекСтрока Из Объект.Грузы Цикл
		
		ТекСтрока.АдресОтправления = ТекСтрока.Заказ.АдресОтправления;
		ТекСтрока.АдресНазначения = ТекСтрока.Заказ.АдресНазначения;
		
		Если ТекСтрока.Заказ.FTL Тогда
			
			НомерСтрокиГруза = 0;
			
			// Упрощение - не храним номер строки груза и считаем, что первая найденная строка грузов с совпадающей номеклатурой (грузовым местом) - искомая
			Если ТекСтрока.Заказ.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам Тогда
				СтрокаГруза = ТекСтрока.Заказ.ГрузовойСостав.Найти(ТекСтрока.ГрузовоеМесто, "ГрузовоеМесто");
				Если СтрокаГруза <> Неопределено Тогда
					НомерСтрокиГруза = СтрокаГруза.НомерСтроки;
				КонецЕсли;
			ИначеЕсли ТекСтрока.Заказ.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам Тогда
				СтрокиТовара = ТекСтрока.Заказ.Товары.НайтиСтроки(Новый Структура("Номенклатура, ЕдиницаИзмерения", ТекСтрока.ГрузовоеМесто, ТекСтрока.ЕдиницаИзмерения));
				Если СтрокиТовара.Количество() Тогда 
					НомерСтрокиГруза = СтрокиТовара[0].НомерСтроки;
				КонецЕсли;
			КонецЕсли;
			
			Если ТекЗаказ <> ТекСтрока.Заказ Тогда
				ТекЗаказ = ТекСтрока.Заказ;
				Если ТекСтрока.Заказ.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам Тогда
					КоличествоГрузов = ТекСтрока.Заказ.ГрузовойСостав.Количество();
				ИначеЕсли ТекСтрока.Заказ.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам Тогда
					КоличествоГрузов = ТекСтрока.Заказ.Товары.Количество();
				Иначе
					КоличествоГрузов = 0;
				КонецЕсли;
				КоличествоПунктов = ТекСтрока.Заказ.ПромежуточныеПункты.Количество();
				мсвОтрезкиПути = уатОбщегоНазначения_проф.ПолучитьНачальныеКонечныеПунктыГрузов(ТекСтрока.Заказ.ОтрезкиПути, КоличествоГрузов, КоличествоПунктов);
			КонецЕсли;
			Если НомерСтрокиГруза > 0 Тогда
				Если мсвОтрезкиПути[НомерСтрокиГруза-1].От >= 0 Тогда
					ТекСтрока.АдресОтправления = ТекСтрока.Заказ.ПромежуточныеПункты[мсвОтрезкиПути[НомерСтрокиГруза-1].От-1].Пункт;
				КонецЕсли;
				Если мсвОтрезкиПути[НомерСтрокиГруза-1].До >= 0 Тогда
					ТекСтрока.АдресНазначения = ТекСтрока.Заказ.ПромежуточныеПункты[мсвОтрезкиПути[НомерСтрокиГруза-1].До-1].Пункт;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьВремяОтправленияДоставкиПоЗаказам(ТаблицаЗаказы)
	
	Результат = Новый Соответствие;
	НомераОбработанныхСтрокFTLЗаказов = Новый Соответствие;
	
	Для Каждого ТекЗаказ Из ТаблицаЗаказы Цикл 
		СтрокаРезультата = Новый Структура("ОтправлениеС, ОтправлениеПо, ДоставкаС, ДоставкаПо");
		
		Если ЗначениеЗаполнено(ТекЗаказ.ЗаказГрузоотправителя) И ТекЗаказ.ЗаказГрузоотправителя.FTL Тогда 
			ОкноС = '00010101000000';
			ОкноПо = '00010101000000';
			НомерОбработаннойСтрокиЗаказа = НомераОбработанныхСтрокFTLЗаказов.Получить(ТекЗаказ.ЗаказГрузоотправителя);
			Если НомерОбработаннойСтрокиЗаказа = Неопределено Тогда
				НомерТекущейСтрокиЗаказа = 0;
			Иначе
				НомерТекущейСтрокиЗаказа = НомерОбработаннойСтрокиЗаказа;
			КонецЕсли;
			Пока НомерТекущейСтрокиЗаказа < ТекЗаказ.ЗаказГрузоотправителя.ПромежуточныеПункты.Количество() Цикл
				Если ТекЗаказ.Пункт = ТекЗаказ.ЗаказГрузоотправителя.ПромежуточныеПункты[НомерТекущейСтрокиЗаказа].Пункт
					И ТекЗаказ.ТипТочкиМаршрута = ТекЗаказ.ЗаказГрузоотправителя.ПромежуточныеПункты[НомерТекущейСтрокиЗаказа].ТипТочкиМаршрута Тогда
					ОкноС  = ТекЗаказ.ЗаказГрузоотправителя.ПромежуточныеПункты[НомерТекущейСтрокиЗаказа].ОкноС;
					ОкноПо = ТекЗаказ.ЗаказГрузоотправителя.ПромежуточныеПункты[НомерТекущейСтрокиЗаказа].ОкноПо;
					Прервать;
				Иначе
					НомерТекущейСтрокиЗаказа = НомерТекущейСтрокиЗаказа + 1;
				КонецЕсли;
			КонецЦикла;
			Если НомерТекущейСтрокиЗаказа <> НомерОбработаннойСтрокиЗаказа Тогда
				НомераОбработанныхСтрокFTLЗаказов.Вставить(ТекЗаказ.ЗаказГрузоотправителя, НомерТекущейСтрокиЗаказа);
			КонецЕсли;
			СтрокаРезультата.ОтправлениеС  = ОкноС;
			СтрокаРезультата.ОтправлениеПо = ОкноПо;
			СтрокаРезультата.ДоставкаС     = ОкноС;
			СтрокаРезультата.ДоставкаПо    = ОкноПо;
		ИначеЕсли ЗначениеЗаполнено(ТекЗаказ.ЗаказГрузоотправителя) Тогда
			СтрокаРезультата.ОтправлениеС  = ТекЗаказ.ЗаказГрузоотправителя.ОтправлениеС;
			СтрокаРезультата.ОтправлениеПо = ТекЗаказ.ЗаказГрузоотправителя.ОтправлениеПо;
			СтрокаРезультата.ДоставкаС     = ТекЗаказ.ЗаказГрузоотправителя.ДоставкаС;
			СтрокаРезультата.ДоставкаПо    = ТекЗаказ.ЗаказГрузоотправителя.ДоставкаПо;
		Иначе 
			СтрокаРезультата.ОтправлениеС  = '00010101000000';
			СтрокаРезультата.ОтправлениеПо = '00010101000000';
			СтрокаРезультата.ДоставкаС     = '00010101000000';
			СтрокаРезультата.ДоставкаПо    = '00010101000000';
		КонецЕсли;
		
		Результат.Вставить(ТекЗаказ.НомерСтроки, СтрокаРезультата);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // ПолучитьВремяОтправленияДоставкиПоЗаказу()

&НаСервере
Процедура ОбновитьДинамическиеПоляСервер()
	ОбновитьСтатусыГрузовСервер();
	ОбновитьПунктыОтправленияНазначенияГрузовСервер();
	ОбновитьВсегоВТЧОперацииСервер();
	ОбновитьНадписьИтоги();
	ОбновитьПараметрВыработкиВременный();
	УстановитьУсловноеОформлениеПолейСтатусов();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВидМоделиТСПоВидуПеревозки(ВидПеревозки)
	
	Возврат ВидПеревозки.ВидМоделиТС;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКоличествоЭПД(Документ)
	
	Возврат уатОбменСГИСЭПД.ПолучитьКоличествоЭПД(Документ);
	
КонецФункции

&НаКлиенте
Процедура ВопросИзменениеЭТрН(РезультатВопроса, МассивЭПД) Экспорт

	ВопросИзменениеЭТрН = Истина; 
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Для Каждого ТекЭПД Из МассивЭПД Цикл
			ПараметрыФормы = Новый Структура();
			ПараметрыФормы.Вставить("Ключ", ТекЭПД);
			
			ОткрытьФорму("Документ.ЭлектроннаяТранспортнаяНакладная.Форма.ОсновнаяФорма", ПараметрыФормы,ЭтотОбъект);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЭТрН(Рейс)
	
	Запрос = Новый Запрос(); 
	Запрос.УстановитьПараметр("Рейс", Рейс);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	уатСвязанныеДокументыЭПД.ЭПД КАК ЭПД
	               |ИЗ
	               |	РегистрСведений.уатСвязанныеДокументыЭПД КАК уатСвязанныеДокументыЭПД
	               |ГДЕ
	               |	уатСвязанныеДокументыЭПД.Рейс = &Рейс
	               |	И ТИПЗНАЧЕНИЯ(уатСвязанныеДокументыЭПД.ЭПД) = ТИП(Документ.ЭлектроннаяТранспортнаяНакладная)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	уатСвязанныеДокументыЭПД.ЭПД";
	Выборка   = Запрос.Выполнить().Выбрать();
	
	МассивЭПД = Новый Массив();
	Пока Выборка.Следующий() Цикл
		МассивЭПД.Добавить(Выборка.ЭПД);
	КонецЦикла;  
	
	Возврат МассивЭПД;
	
КонецФункции

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПеременныеОбъекта

Перем мВалютаРегламентированногоУчета Экспорт; //Переменная хранит значение валюты регламентированного учёта, полученное из констант
Перем Права Экспорт; // Наличие единиц измерения у номенклатуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Расчитывает итоговые показатели (по кнопке "Рассчитать" внизу формы документа)
//
Процедура РассчитатьИтоговыеПоказатели() Экспорт
	
	мВесБрутто  = 0; 
	мОбъем      = 0; 
	мКолМест    = 0;
	мСтоимость  = 0;
	мВремя      = 0;
	мРасстояние = 0;
	мСтоянка    = 0;
	
	Для Каждого ТекСтрока Из Грузы Цикл
		// Стоимость товаров
		Если ТекСтрока.Заказ.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам Тогда
			КурсКратностьВалютыТоваров = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ТекСтрока.Заказ.ВалютаТоваров, Дата);
			СтоимостьЗаказаВВалютеДокумента = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.Заказ.СтоимостьГруза, 
				ТекСтрока.Заказ.ВалютаТоваров, ВалютаДокумента,
				КурсКратностьВалютыТоваров.Курс, КурсВзаиморасчетов,
				КурсКратностьВалютыТоваров.Кратность, КратностьВзаиморасчетов);
			мСтоимость = мСтоимость + СтоимостьЗаказаВВалютеДокумента;
			
		ИначеЕсли ТекСтрока.Заказ.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам Тогда
			Если НЕ ЗначениеЗаполнено(ТекСтрока.ГрузовоеМесто) Тогда
				Продолжить;
			КонецЕсли;
			
			КурсКратностьВалютыТоваров = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ТекСтрока.ГрузовоеМесто.Валюта, Дата);
			СтрокаГМВЗаказе = ТекСтрока.Заказ.ГрузовойСостав.Найти(ТекСтрока.ГрузовоеМесто, "ГрузовоеМесто");
			Если Не СтрокаГМВЗаказе = Неопределено Тогда 
				СтоимостьЗаказаВВалютеДокумента = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(СтрокаГМВЗаказе.Стоимость, 
					ТекСтрока.ГрузовоеМесто.Валюта, ВалютаДокумента,
					КурсКратностьВалютыТоваров.Курс, КурсВзаиморасчетов,
					КурсКратностьВалютыТоваров.Кратность, КратностьВзаиморасчетов);
				мСтоимость = мСтоимость + СтоимостьЗаказаВВалютеДокумента;
			КонецЕсли;
			
		Иначе 
			КурсКратностьВалютыТоваров = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ТекСтрока.Заказ.ВалютаТоваров, Дата);
			СтрокаТовараВЗаказе = ТекСтрока.Заказ.Товары.Найти(ТекСтрока.ГрузовоеМесто, "Номенклатура");
			Если Не СтрокаТовараВЗаказе = Неопределено Тогда 
				мСуммаСтроки = ?(СтрокаТовараВЗаказе.Количество=0, 0, СтрокаТовараВЗаказе.Сумма * ТекСтрока.Количество / СтрокаТовараВЗаказе.Количество);
				СтоимостьЗаказаВВалютеДокумента = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(мСуммаСтроки, 
					ТекСтрока.Заказ.ВалютаТоваров, ВалютаДокумента,
					КурсКратностьВалютыТоваров.Курс, КурсВзаиморасчетов,
					КурсКратностьВалютыТоваров.Кратность, КратностьВзаиморасчетов);
				мСтоимость = мСтоимость + СтоимостьЗаказаВВалютеДокумента;
			КонецЕсли;
		КонецЕсли;
		
		// Весо-объемные характеристики
		Если ТекСтрока.Заказ.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам Тогда
			СтрокаГруза = ТекСтрока.Заказ.ГрузовойСостав.Найти(ТекСтрока.ГрузовоеМесто, "ГрузовоеМесто");
			Если СтрокаГруза <> Неопределено Тогда 
				МножительКоличество = ?(СтрокаГруза.КоличествоМест=0, 0, (ТекСтрока.Количество / СтрокаГруза.КоличествоМест));
				
				мВесБрутто = мВесБрутто + СтрокаГруза.ВесБрутто * МножительКоличество;
				мОбъем     = мОбъем     + СтрокаГруза.Объем     * МножительКоличество;
				мКолМест   = мКолМест   + ТекСтрока.Количество;
			КонецЕсли;
			
		ИначеЕсли ТекСтрока.Заказ.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам Тогда
			СтрокиТовара = ТекСтрока.Заказ.Товары.НайтиСтроки(Новый Структура("Номенклатура, ЕдиницаИзмерения", ТекСтрока.ГрузовоеМесто, ТекСтрока.ЕдиницаИзмерения));
			Если СтрокиТовара.Количество() Тогда 
				МножительКоличество = ?(СтрокиТовара[0].Количество = 0, 0, (ТекСтрока.Количество / СтрокиТовара[0].Количество));
				
				мВесБрутто = мВесБрутто + СтрокиТовара[0].ВесБрутто      * МножительКоличество;
				мОбъем     = мОбъем     + СтрокиТовара[0].Объем          * МножительКоличество;
				мКолМест   = мКолМест   + СтрокиТовара[0].КоличествоМест * МножительКоличество;
			КонецЕсли;
			
		ИначеЕсли ТекСтрока.Заказ.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам Тогда 
			мВесБрутто = мВесБрутто + ТекСтрока.Заказ.ВесБрутто;
			мОбъем     = мОбъем     + ТекСтрока.Заказ.Объем;
			мКолМест   = мКолМест   + ТекСтрока.Заказ.КоличествоМест;
			
		КонецЕсли;
	КонецЦикла;
	
	тблЗаказы = Грузы.Выгрузить().Скопировать();
	тблЗаказы.Свернуть("Заказ");
	Для Каждого ТекСтрока Из тблЗаказы Цикл
		мВремя      = уатЗащищенныеФункцииСервер.СложитьВремя(мВремя, ТекСтрока.Заказ.Время);
		мРасстояние = мРасстояние + ТекСтрока.Заказ.Расстояние;
		мСтоянка    = уатЗащищенныеФункцииСервер.СложитьВремя(мСтоянка, ТекСтрока.Заказ.Стоянка);
	КонецЦикла;
	
	ВесБрутто      = мВесБрутто;
	Объем          = мОбъем; 
	КоличествоМест = мКолМест;
	СтоимостьГруза = мСтоимость;
	Время          = мВремя;
	Расстояние     = мРасстояние;
	Стоянка        = мСтоянка;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Отказ 
		И НЕ ЗначениеЗаполнено(ВидПеревозки)
		И Не Константы.уатИспользоватьМультимодальныеПеревозки_уэ.Получить() Тогда 
		ВидПеревозки = Справочники.уатВидыПеревозок.АвтомобильнаяГрузовая;
	КонецЕсли;
	
	Если Не Отказ И Не ПометкаУдаления И РежимЗаписи <> РежимЗаписиДокумента.ОтменаПроведения И НЕ ЗначениеЗаполнено(МаршрутныйЛист) Тогда
		Права_ = Неопределено;
		флПересчетИтогов = (уатПраваИНастройки.уатПраво("ЗаказПеревозчикуПерерасчетИтоговПриПроведении", Права_) = Истина);
		Если флПересчетИтогов Тогда
			РассчитатьИтоговыеПоказатели();
		КонецЕсли;
		Если (Ссылка.Пустая() ИЛИ флПересчетИтогов) И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			АвтоматическийПересчетРасходов();
		КонецЕсли;
	КонецЕсли;
	
	СуммаДокумента = уатОбщегоНазначенияТиповые.уатПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Расходы");
	
	Если Константы.уатИспользоватьПлановыеУслуги_уэ.Получить() Тогда
		СуммаДокументаПлан = уатОбщегоНазначенияТиповые.уатПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Расходы",,Истина);
	КонецЕсли;
	
	// Уведомления
	Если Не Отказ И Не ПометкаУдаления И ПолучитьФункциональнуюОпцию("уатИспользоватьУведомления_уэ") Тогда
		// Заполнение ТЧ "Получатели уведомлений"
		Если Модифицированность() Тогда
			тблПолучатели = уатОбщегоНазначения_уэ.СформироватьСписокПолучателейУведомлений(ЭтотОбъект);
			ПолучателиУведомлений.Загрузить(тблПолучатели);
		КонецЕсли;
		
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			
			// Отслеживаем событие "Изменение перевозчика"
			флИзменениеПеревозчика = Ссылка.Пустая() Или Ссылка.Контрагент <> Контрагент;
			ДополнительныеСвойства.Вставить("флИзменениеПеревозчика", флИзменениеПеревозчика);
			
			// Отслеживаем событие "Изменение ТС"
			флИзменениеТС = Ссылка.Пустая() Или Ссылка.ТС <> ТС;
			ДополнительныеСвойства.Вставить("флИзменениеТС", флИзменениеТС);
			
			// Отслеживаем событие "Изменение водителя"
			флИзменениеВодителя = Ссылка.Пустая() Или Ссылка.Водитель <> Водитель;
			ДополнительныеСвойства.Вставить("флИзменениеВодителя", флИзменениеВодителя);
			
			// Отслеживаем событие "Изменение статуса"
			флИзменениеСтатуса = Ссылка.Пустая() Или Ссылка.СтатусВыполнения <> СтатусВыполнения;
			ДополнительныеСвойства.Вставить("флИзменениеСтатуса", флИзменениеСтатуса);
			
		КонецЕсли;
	КонецЕсли;
	
	// заполнение реквизитов многовалютного учета
	Если НЕ Отказ И РежимЗаписи <> РежимЗаписиДокумента.ОтменаПроведения Тогда
		Обработки.уатОтложенноеОбновлениеИБ.ЗаполнитьРеквизитыДокументаМноговалютныйУчет_1_1_7_1(ЭтотОбъект);
	КонецЕсли;
	
	уатПроведение_проф.ПолучитьСтарыеЗаказыПередЗаписью(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	
	// Инициализация дополнительных свойств для проведения документа.
	уатПроведение.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	Документы.уатЗаказПеревозчику_уэ.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	уатПроведение.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	Если НЕ ЗначениеЗаполнено(МаршрутныйЛист) Тогда 
		уатПроведение.ОтразитьПредоставленныеУслуги(ДополнительныеСвойства, Движения, Отказ);
		уатПроведение.ОтразитьРасходы(ДополнительныеСвойства, Движения, Отказ);
		Если ПолучитьФункциональнуюОпцию("уатИспользоватьПлановыеУслуги_уэ") Тогда
			уатПроведение_уэ.ОтразитьПлановыеУслуги(ДополнительныеСвойства, Движения, Отказ);
		КонецЕсли;
	КонецЕсли;
	
	уатПроведение.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	уатПроведение_проф.ОбновитьТекущееСостояниеОплатыЗаказов(ЭтотОбъект);
	
	Документы.уатЗаказПеревозчику_уэ.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);
	
	уатУчетОригиналовПервичныхДокументов.СформироватьДвиженияРеестрДокументов(Ссылка);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	// Инициализация дополнительных свойств для проведения документа
	уатПроведение.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	уатПроведение.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	уатПроведение.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	уатПроведение_проф.ОбновитьТекущееСостояниеОплатыЗаказов(ЭтотОбъект);
	
	// Контроль
	Документы.уатЗаказПеревозчику_уэ.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ, Истина);
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка) 
	
	уатОбщегоНазначенияСервер.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
	Основание = ДанныеЗаполнения;
	
	ТипДокументСсылкаТендер = Неопределено;
	Если уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП() Тогда
		ТипДокументСсылкаТендер = Тип("ДокументСсылка.уатТендер_уэ");
	КонецЕсли;
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") Тогда
		СтандартнаяОбработка = Ложь;
		
		ДокументОснование = Основание.Ссылка;
		ВалютаДокумента   = Основание.ВалютаДокумента;
		Комментарий       = Основание.Комментарий;
		СтатусВыполнения  = Справочники.уатСтатусы_уэ.Новый;
		
		КратностьВзаиморасчетов = Основание.КратностьВзаиморасчетов;
		КурсВзаиморасчетов      = Основание.КурсВзаиморасчетов;
		Организация             = Основание.Организация;
		Ответственный           = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
						  ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнойОтветственный");
		СуммаВключаетНДС        = Основание.СуммаВключаетНДС;
		УчитыватьНДС            = Основание.УчитыватьНДС;
		ВидПеревозки            = Основание.ВидПеревозки;
		
		ЗаполнитьГрузыПоЗаказуНаТС(Основание);
		
		РассчитатьИтоговыеПоказатели();
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.уатМаршрутныйЛист") Тогда
		СтандартнаяОбработка = Ложь;
	
		ДокументОснование = Основание.Ссылка;
		МаршрутныйЛист    = Основание.Ссылка;
		Организация       = Основание.Организация;
		Ответственный     = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
						  ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнойОтветственный");
		ВидПеревозки      = Основание.ВидПеревозки;
		
		Если Основание.ТС.ПринадлежностьТС = Перечисления.уатПринадлежностьТС.Привлеченное Тогда
			ТС                 = Основание.ТС;
			Прицеп1            = Основание.Прицеп1;
			Прицеп2            = Основание.Прицеп2;
			Водитель           = Основание.Водитель1;
			Контрагент         = Основание.Контрагент;
			ДоговорКонтрагента = Основание.ДоговорКонтрагента;
		КонецЕсли;
		
		Комментарий = Основание.Комментарий;
		
		ОснЗаказ = Неопределено;
		Для Каждого ТекСтрокаЗаказ Из ДокументОснование.Заказы Цикл
			Если ТекСтрокаЗаказ.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка
				И ЗначениеЗаполнено(ТекСтрокаЗаказ.ЗаказГрузоотправителя) Тогда
				ОснЗаказ = ТекСтрокаЗаказ.ЗаказГрузоотправителя;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если ОснЗаказ <> Неопределено Тогда
			ВалютаДокумента         = ОснЗаказ.ВалютаДокумента;
			КратностьВзаиморасчетов = ОснЗаказ.КратностьВзаиморасчетов;
			КурсВзаиморасчетов      = ОснЗаказ.КурсВзаиморасчетов;
			СуммаВключаетНДС        = ОснЗаказ.СуммаВключаетНДС;
			УчитыватьНДС            = ОснЗаказ.УчитыватьНДС;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.уатСчетНаОплатуПоставщика") Тогда
		СтандартнаяОбработка = Ложь;
		
		ДокументОснование = Основание.Ссылка;
		
		Контрагент              = Основание.Контрагент;
		ДоговорКонтрагента      = Основание.ДоговорКонтрагента;
		ВалютаДокумента         = Основание.ВалютаДокумента;
		КратностьВзаиморасчетов = Основание.КратностьВзаиморасчетов;
		КурсВзаиморасчетов      = Основание.КурсВзаиморасчетов;
		Организация             = Основание.Организация;
		Ответственный           = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
						  ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнойОтветственный");
		СуммаВключаетНДС        = Основание.СуммаВключаетНДС;
		УчитыватьНДС            = Основание.УчитыватьНДС;
		
		Для каждого ТекСтрока ИЗ Основание.Услуги Цикл 
			НовСтрока = Расходы.Добавить();
			НовСтрока.Номенклатура = ТекСтрока.Номенклатура;
			НовСтрока.Количество   = ТекСтрока.Количество;
			НовСтрока.СтавкаНДС    = ТекСтрока.СтавкаНДС;
			НовСтрока.Цена         = ТекСтрока.ЦенаВалютная;
			НовСтрока.СуммаНДС     = ТекСтрока.СуммаНДСВалютная;
			НовСтрока.Сумма        = ТекСтрока.СуммаВалютная;
			НовСтрока.Валюта       = ТекСтрока.Валюта;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Основание) = ТипДокументСсылкаТендер Тогда
		СтандартнаяОбработка = Ложь;
		
		ДокументОснование       = Основание;
		Комментарий             = Основание.Комментарий;
		Организация             = Основание.Организация;
		Ответственный           = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
						  ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнойОтветственный");
		Контрагент              = Основание.Победитель;
		ВидПеревозки            = Справочники.уатВидыПеревозок.АвтомобильнаяГрузовая;
		
		ДоговорКонтрагента = уатОбщегоНазначенияТиповыеСервер.уатПолучитьДоговорПоОрганизацииИКонтрагенту(
			Организация, 
			Контрагент, 
			уатЗаполнениеДокументов.ПолучитьСтруктуруПараметровДляПолученияДоговораПокупки());
		
		Для Каждого ТекГруз Из Основание.Грузы Цикл 
			НоваяСтрока = Грузы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекГруз);
		КонецЦикла;
		
		СтрокаПеревозчика = Основание.Перевозчики.Найти(Основание.Победитель, "Перевозчик");
		Если Не СтрокаПеревозчика = Неопределено Тогда 
			СтрокаЗатрат = Расходы.Добавить();
			
			СтрокаЗатрат.Количество   = 1;
			СтрокаЗатрат.Номенклатура = СтрокаПеревозчика.Услуга;
			СтрокаЗатрат.СтавкаНДС    = СтрокаПеревозчика.СтавкаНДС;
			СтрокаЗатрат.Сумма        = СтрокаПеревозчика.Сумма;
			СтрокаЗатрат.СуммаНДС     = СтрокаПеревозчика.СуммаНДС;
			СтрокаЗатрат.Цена         = СтрокаПеревозчика.Сумма;
			
			СуммаВключаетНДС          = СтрокаПеревозчика.СуммаВключаетНДС;
			УчитыватьНДС              = СтрокаПеревозчика.УчитыватьНДС;
			ВалютаДокумента           = СтрокаПеревозчика.Валюта;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Основание.МаршрутныйЛист) Тогда 
			МаршрутныйЛист = Основание.МаршрутныйЛист;
			Если Основание.МаршрутныйЛист.Контрагент = Основание.Победитель Тогда 
				ТС             = Основание.МаршрутныйЛист.ТС;
				Водитель       = Основание.МаршрутныйЛист.Водитель1;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	Заголовок = уатОбщегоНазначенияТиповые.уатПредставлениеДокументаПриПроведении(Ссылка);
	
	ПроверитьЗаполнениеТабличнойЧастиГрузы(Отказ, Заголовок);
	
	уатОбщегоНазначенияТиповые.уатПроверитьЧтоНетТоваров(ЭтотОбъект, "Расходы", , Отказ, Заголовок);
	ПроверитьДублиГрузовыхМест(Отказ);
	
	Если УчитыватьНДС Тогда
		ПроверяемыеРеквизиты.Добавить("Расходы.СтавкаНДС");
	КонецЕсли;
	
	// проверка наличия строк с одинаковыми услугами и разными валютами
	тблУслугиПоВалютам = Расходы.Выгрузить(, "Номенклатура, Валюта").Скопировать();
	тблУслугиПоВалютам.Свернуть("Номенклатура, Валюта");
	тблУслугиСвернутая = тблУслугиПоВалютам.Скопировать();
	тблУслугиСвернутая.Свернуть("Номенклатура");
	Если тблУслугиПоВалютам.Количество() <> тблУслугиСвернутая.Количество() Тогда
		уатОбщегоНазначенияТиповые.СообщитьОбОшибке("В табличной части ""Расходы"" не должно быть строк с одной номенклатурой, но разными валютами!",
		Отказ, Заголовок);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("флИзменениеПеревозчика") И ДополнительныеСвойства.флИзменениеПеревозчика Тогда
		уатОбщегоНазначения_уэ.СформироватьУведомление(Ссылка, Перечисления.уатТипыСобытийДляУведомления_уэ.ИзменениеПеревозчика);
	КонецЕсли;
	Если ДополнительныеСвойства.Свойство("флИзменениеТС") И ДополнительныеСвойства.флИзменениеТС Тогда
		уатОбщегоНазначения_уэ.СформироватьУведомление(Ссылка, Перечисления.уатТипыСобытийДляУведомления_уэ.ИзменениеТС);
	КонецЕсли;
	Если ДополнительныеСвойства.Свойство("флИзменениеВодителя") И ДополнительныеСвойства.флИзменениеВодителя Тогда
		уатОбщегоНазначения_уэ.СформироватьУведомление(Ссылка, Перечисления.уатТипыСобытийДляУведомления_уэ.ИзменениеВодителя);
	КонецЕсли;
	Если ДополнительныеСвойства.Свойство("флИзменениеСтатуса") И ДополнительныеСвойства.флИзменениеСтатуса Тогда
		уатОбщегоНазначения_уэ.СформироватьУведомление(Ссылка, Перечисления.уатТипыСобытийДляУведомления_уэ.ИзменениеСтатуса);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Выработка.Очистить();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ПроверитьЗаполнениеТабличнойЧастиГрузы(Отказ, Заголовок)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатЗаказПеревозчику_уэГрузы.Заказ КАК Груз,
	|	уатЗаказПеревозчику_уэГрузы.Заказ.АдресОтправления КАК ПунктОтправления,
	|	уатЗаказПеревозчику_уэГрузы.Заказ.АдресНазначения КАК ПунктНазначения,
	|	уатСтатусГруза_уэСрезПоследних.Статус КАК Статус
	|ИЗ
	|	Документ.уатЗаказПеревозчику_уэ.Грузы КАК уатЗаказПеревозчику_уэГрузы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатСтатусыГрузов_уэ.СрезПоследних(
	|				&МоментВремени,
	|				Заказ В
	|					(ВЫБРАТЬ
	|						уатЗаказПеревозчику_уэГрузы.Заказ
	|					ИЗ
	|						Документ.уатЗаказПеревозчику_уэ.Грузы КАК уатЗаказПеревозчику_уэГрузы
	|					ГДЕ
	|						уатЗаказПеревозчику_уэГрузы.Ссылка = &Ссылка)) КАК уатСтатусГруза_уэСрезПоследних
	|		ПО уатЗаказПеревозчику_уэГрузы.Заказ = уатСтатусГруза_уэСрезПоследних.Заказ
	|		И уатЗаказПеревозчику_уэГрузы.ГрузовоеМесто = уатСтатусГруза_уэСрезПоследних.ГрузовоеМесто
	|ГДЕ
	|	уатЗаказПеревозчику_уэГрузы.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка"                     , Ссылка);
	Запрос.УстановитьПараметр("МоментВремени"              , МоментВремени());
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ПредставлениеГруза = СокрЛП(Выборка.Груз.НазваниеГруза) + ", № " + СокрЛП(Выборка.Груз.Номер)
			+ " от " + Формат(Выборка.Груз.Дата, "ДФ=dd.MM.yyyy");
		
		Если Выборка.Статус = Справочники.уатСтатусы_уэ.Закрыт Тогда
			ТекстНСТР = НСтр("en='Orde ""%1"" to ""Closed"" status cannot be added to order to carrier.';ru='Заказ ""%1"" в статусе ""Закрыт"" не может быть добавлен в заказ перевозчику.'");
			ТекстНСТР = СтрШаблон(ТекстНСТР, ПредставлениеГруза);
			уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, Отказ, Заголовок);
			
		ИначеЕсли Выборка.Статус = Справочники.уатСтатусы_уэ.Доставлен тогда
			ТекстНСТР = НСтр("en='Order ""%1"" in the status ""Delivered"" cannot be added to order to carrier.';ru='Заказ ""%1"" в статусе ""Доставлен"" не может быть добавлен в заказ перевозчику.'");
			ТекстНСТР = СтрШаблон(ТекстНСТР, ПредставлениеГруза);
			уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, Отказ, Заголовок);
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура АвтоматическийПересчетРасходов() Экспорт
	Если ДополнительныеСвойства.Свойство("НеПересчитыватьИтоги") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Ссылка.Пустая() И Расходы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	флАвторасчетПриСоздании = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(
		ПользователиКлиентСервер.АвторизованныйПользователь(), "ЗаказПеревозчикуАвторасчетРасходовПриСоздании");
	Если НЕ флАвторасчетПриСоздании И Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	флПересчетИтогов = флАвторасчетПриСоздании ИЛИ уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(
		ПользователиКлиентСервер.АвторизованныйПользователь(), "ЗаказПеревозчикуПерерасчетИтоговПриПроведении");
	Если НЕ флПересчетИтогов Тогда
		Возврат;
	КонецЕсли;
	
	флПлановыеУслуги = ПолучитьФункциональнуюОпцию("уатИспользоватьПлановыеУслуги_уэ");
	флИнтерактивно = ДополнительныеСвойства.Свойство("Интерактивно");
	флСообщение = Ложь;
	
	СуммаРасходовСтарая = уатОбщегоНазначенияТиповые.уатПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Расходы");
	
	ДопПараметры = Новый Структура("ЗаполнятьТЧРасходы", Ложь);
	СтруктураДокумента = уатОбщегоНазначенияКлиентСервер.СтруктураДокумента(ЭтотОбъект, "уатЗаказПеревозчику_уэ", ДопПараметры);
	СтруктураДокументаДопФакт = Неопределено;
	
	// заполнение промежуточной структуры документа
	Если флПлановыеУслуги Тогда
		уатРасчетыПоТарифам_уэ.РассчитатьУслугиПоЗаказуПеревозчику(СтруктураДокумента, Истина); //пересчет плана
	КонецЕсли;
	Если НЕ флПлановыеУслуги ИЛИ НЕ Ссылка.Пустая() Тогда
		Если флПлановыеУслуги Тогда //нужно пересчитать и план, и факт. Здесь есть сложность: факт затирает план
			СтруктураДокументаДопФакт = уатОбщегоНазначенияКлиентСервер.СтруктураДокумента(ЭтотОбъект, "уатЗаказПеревозчику_уэ", ДопПараметры);
			уатРасчетыПоТарифам_уэ.РассчитатьУслугиПоЗаказуПеревозчику(СтруктураДокументаДопФакт); //пересчет факта
		Иначе
			уатРасчетыПоТарифам_уэ.РассчитатьУслугиПоЗаказуПеревозчику(СтруктураДокумента); //пересчет факта
		КонецЕсли;
	КонецЕсли;
	
	// перенос значений из структуры в документ-объект
	Если СтруктураДокументаДопФакт = Неопределено Тогда
		уатРасчетыПоТарифамКлиентСервер_уэ.ЗаполнитьДоходыРасходыИзСтруктуры(ЭтотОбъект, СтруктураДокумента, "Расходы", "уатЗаказПеревозчику_уэ", Ложь, флСообщение);
	Иначе
		уатРасчетыПоТарифамКлиентСервер_уэ.ЗаполнитьДоходыРасходыИзСтруктуры(ЭтотОбъект, СтруктураДокумента, "Расходы", "уатЗаказПеревозчику_уэ", Истина, флСообщение);
		уатРасчетыПоТарифамКлиентСервер_уэ.ЗаполнитьДоходыРасходыИзСтруктуры(ЭтотОбъект, СтруктураДокументаДопФакт, "Расходы", "уатЗаказПеревозчику_уэ", Ложь, флСообщение);
	КонецЕсли;
	
	СуммаРасходовНовая = уатОбщегоНазначенияТиповые.уатПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Расходы");
	СуммаДокумента = СуммаРасходовНовая;
	
	Если Константы.уатИспользоватьПлановыеУслуги_уэ.Получить() Тогда
		СуммаДокументаПлан = уатОбщегоНазначенияТиповые.уатПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Расходы",,Истина); 
	КонецЕсли;
	
	Если Не Ссылка.Пустая() И СуммаРасходовНовая <> СуммаРасходовСтарая Тогда 
		Если НЕ флИнтерактивно Тогда //неинтерактивный пересчет, например при групповом проведении документов
			ТекстНСТР = НСтр("en='Automatically recalculate tabular section ""Expenses"" in """ + ЭтотОбъект
				+ """';ru='Выполнен автоматический пересчет табличной части ""Расходы"" в документе """ + ЭтотОбъект + """'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР, ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
		
	ДополнительныеСвойства.Вставить("ПересчетИтогов", флПересчетИтогов);
	Если СуммаРасходовНовая <> СуммаРасходовСтарая Тогда
		ДополнительныеСвойства.Вставить("ВыполненАвтопересчетУслуг");
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗаполнитьГрузыПоЗаказуНаТС(ЗаказНаТС) Экспорт
	Если ЗаказНаТС.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам Тогда
		Для Каждого ТекГруз Из ЗаказНаТС.ГрузовойСостав Цикл
			СтрокаГруз = Грузы.Добавить();
			СтрокаГруз.Заказ            = ЗаказНаТС.Ссылка;
			СтрокаГруз.ГрузовоеМесто    = ТекГруз.ГрузовоеМесто;
			СтрокаГруз.Количество       = ТекГруз.КоличествоМест;
			СтрокаГруз.ЕдиницаИзмерения = ТекГруз.ВидУпаковки;
		КонецЦикла;
		
	ИначеЕсли ЗаказНаТС.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам Тогда
		Для Каждого ТекГруз Из ЗаказНаТС.Товары Цикл
			СтрокаГруз = Грузы.Добавить();
			СтрокаГруз.Заказ            = ЗаказНаТС.Ссылка;
			СтрокаГруз.ГрузовоеМесто    = ТекГруз.Номенклатура;
			СтрокаГруз.Количество       = ТекГруз.Количество;
			СтрокаГруз.ЕдиницаИзмерения = ТекГруз.ЕдиницаИзмерения;
		КонецЦикла;
		
	Иначе 
		СтрокаГруз = Грузы.Добавить();
		СтрокаГруз.Заказ      = ЗаказНаТС.Ссылка;
		СтрокаГруз.Количество = 1;
	КонецЕсли;
КонецПроцедуры

Процедура ПроверитьДублиГрузовыхМест(Отказ)
	
	СоответсвиеСтрок = Новый Соответствие;
	Для Каждого ТекСтрока Из Грузы Цикл
		Если ТипЗнч(ТекСтрока.ГрузовоеМесто) = Тип("СправочникСсылка.уатГрузовыеМеста_уэ")
			И ТекСтрока.ГрузовоеМесто.УникальноеГрузовоеМесто Тогда
			Если СоответсвиеСтрок.Получить(ТекСтрока.ГрузовоеМесто) = Неопределено Тогда
				СоответсвиеСтрок.Вставить(ТекСтрока.ГрузовоеМесто, ТекСтрока.ГрузовоеМесто);
			Иначе
				ТекстНСТР = НСтр("ru = 'В табличной части ""Грузы"" обнаружено дублирование уникальных грузовых мест!
                                  |Уникальное грузовое место может быть добавлено только 1 раз'");
				уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, Отказ);
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ИсполняемаяЧастьМодуля

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

#КонецОбласти

#КонецЕсли
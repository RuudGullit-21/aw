#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатЗаказПеревозчику_уэ";
	КомандаПечати.Идентификатор = "ЗаказПеревозчикуТовары";
	КомандаПечати.Представление = НСтр("en='Order to carrier (details by goods)';ru='Заказ перевозчику (детализация по товарам)'");
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатЗаказПеревозчику_уэ";
	КомандаПечати.Идентификатор = "ЗаказПеревозчикуГрМеста";
	КомандаПечати.Представление = НСтр("en='Order to carrier (detailing by packages)';ru='Заказ перевозчику (детализация по грузовым местам)'");
	
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор  = "Реестр";
	КомандаПечати.Представление  = НСтр("en='Document register';ru='Реестр документов'");
	КомандаПечати.ЗаголовокФормы = НСтр("en='Register of documents ""Order to carrier""';ru='Реестр документов ""Заказ перевозчику""'");
	КомандаПечати.Обработчик     = "уатОбщегоНазначенияТиповыеКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм     = "ФормаСписка";
	КомандаПечати.Порядок        = 100;
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр).
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной
//                                                            параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной
//                                            параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если НЕ уатОбщегоНазначенияСервер.РазрешениеПечатиНепроведенногоДокумента(МассивОбъектов) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЗаказПеревозчикуТовары") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ЗаказПеревозчикуТовары",
		НСтр("en='Order to carrier';ru='Заказ перевозчику'"), ПечатьЗаказПеревозчику(МассивОбъектов, ОбъектыПечати));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЗаказПеревозчикуГрМеста") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ЗаказПеревозчикуГрМеста",
		НСтр("en='Order to carrier';ru='Заказ перевозчику'"), ПечатьЗаказПеревозчику(МассивОбъектов, ОбъектыПечати, "ГрузМеста"));
	КонецЕсли;
	
	уатОбщегоНазначенияСервер.УстановитьРедактированиеПечатныхФормДокумента(КоллекцияПечатныхФорм); 
	уатУправлениеПечатью.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов, КоллекцияПечатныхФорм);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.Взаимодействия

// Возвращает контакты по предмету.
//
// Параметры:
//  Ссылка	 - СправочникСсылка	 - Ссылка на предмет-владелец контактов
// 
// Возвращаемое значение:
//  Массив - массив контактов
// 
Функция ПолучитьКонтакты(Ссылка) Экспорт
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПоКонтактам();
	Запрос.УстановитьПараметр("Предмет", Ссылка);
	
	НачатьТранзакцию();
	Попытка
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			Результат = Неопределено;
		Иначе
			Результат = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Контакт");
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Возвращает текст запроса по контактам взаимодействий, содержащимся в документе.
//
// Параметры:
//  ТекстВременнаяТаблица - Строка - Имя временной таблицы, в которую помещаются полученные данные.
//  Объединить  - Булево  - признак, указывающий на необходимость добавления конструкции ОБЪЕДИНИТЬ в запрос.
//
// Возвращаемое значение:
//   Строка   - сформированный текст запроса для получения контактов взаимодействий объекта.
//
Функция ТекстЗапросаПоКонтактам(ТекстВременнаяТаблица = "", Объединить = Ложь) Экспорт
	
	ШаблонВыбрать = ?(Объединить, "ВЫБРАТЬ РАЗЛИЧНЫЕ", "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ");
	
	ТекстЗапроса = "
	               |%ШаблонВыбрать%
	               |	уатЗаказПеревозчику_уэ.Контрагент КАК Контакт " + ТекстВременнаяТаблица + "
	               |ИЗ
	               |	Документ.уатЗаказПеревозчику_уэ КАК уатЗаказПеревозчику_уэ
	               |ГДЕ
	               |	уатЗаказПеревозчику_уэ.Ссылка = &Предмет
	               |	И ТИПЗНАЧЕНИЯ(уатЗаказПеревозчику_уэ.Контрагент) = ТИП(Справочник.Контрагенты)
	               |	И НЕ уатЗаказПеревозчику_уэ.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	уатЗаказПеревозчику_уэ.Водитель
	               |ИЗ
	               |	Документ.уатЗаказПеревозчику_уэ КАК уатЗаказПеревозчику_уэ
	               |ГДЕ
	               |	уатЗаказПеревозчику_уэ.Ссылка = &Предмет
	               |	И НЕ уатЗаказПеревозчику_уэ.Водитель = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	               |	И ТИПЗНАЧЕНИЯ(уатЗаказПеревозчику_уэ.Водитель) = ТИП(Справочник.ФизическиеЛица)";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ШаблонВыбрать%", ШаблонВыбрать);
	
	Если Объединить Тогда
		
		ТекстЗапроса = "
		| ОБЪЕДИНИТЬ ВСЕ
		|" + ТекстЗапроса;
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Конец СтандартныеПодсистемы.Взаимодействия

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	Настройки.ПриПолученииСлужебныхРеквизитов = Ложь;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// Позволяет переопределить ограничение, указанное в модуле менеджера объекта метаданных.
//
// Параметры:
//  Ограничение - Структура:
//    * Текст                             - Строка - ограничение доступа для пользователей.
//                                          Если пустая строка, значит, доступ разрешен.
//    * ТекстДляВнешнихПользователей      - Строка - ограничение доступа для внешних пользователей.
//                                          Если пустая строка, значит, доступ запрещен.
//    * ПоВладельцуБезЗаписиКлючейДоступа - Неопределено - определить автоматически.
//                                        - Булево - если Ложь, то всегда записывать ключи доступа,
//                                          если Истина, тогда не записывать ключи доступа,
//                                          а использовать ключи доступа владельца (требуется,
//                                          чтобы ограничение было строго по объекту-владельцу).
//   * ПоВладельцуБезЗаписиКлючейДоступаДляВнешнихПользователей - Неопределено, Булево - также
//                                          как у параметра ПоВладельцуБезЗаписиКлючейДоступа.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";
	
	Ограничение.ТекстДляВнешнихПользователей = Ограничение.Текст;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// СтандартныеПодсистемы.ВариантыОтчетов

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВариантыОтчетов

// СтандартныеПодсистемы.ШаблоныСообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf",
//                           "png", "jpg", mxl" и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
	// Удаление из списка вложений печатной формы "Реестр документов"
	НомСтроки = Вложения.Количество()-1;
	Пока НомСтроки >= 0 Цикл
	    Если Вложения[НомСтроки].Имя = "Реестр" И Вложения[НомСтроки].Статус = "ПечатнаяФорма" Тогда
	        Вложения.Удалить(НомСтроки);
	    КонецЕсли;
    	НомСтроки = НомСтроки - 1;
	КонецЦикла;
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов 
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS.
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - СправочникСсылка - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма.
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ШаблоныСообщений

#КонецОбласти

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	уатОбменСГИСЭПД.ДобавитьКомандуЭТрНСоздатьНаОсновании(КомандыСозданияНаОсновании);

КонецПроцедуры

#КонецОбласти

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт

	СтруктураДополнительныеСвойства.Вставить("СообщенияОшибкиРаспределенияПоЗаказам", Новый Массив);
		
	СформироватьПредоставленныеУслуги(ДокументСсылка, СтруктураДополнительныеСвойства);
	СформироватьЗатратыТС(ДокументСсылка, СтруктураДополнительныеСвойства);
	Если ПолучитьФункциональнуюОпцию("уатИспользоватьПлановыеУслуги_уэ") Тогда
		СформироватьПлановыеУслуги(ДокументСсылка, СтруктураДополнительныеСвойства);
	КонецЕсли;
	
	// сообщение об ошибках распределения по Заказам
	Если СтруктураДополнительныеСвойства.СообщенияОшибкиРаспределенияПоЗаказам.Количество() > 0 Тогда
		ТекстНСТР = "Распределение услуг по Заказам не выполнено или выполнено частично: отсутствует выработка по Параметру"
			+ " распределения между вложенными Заказами (статья доходов/расходов - распределение между аналитиками)";
		уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР,,, СтатусСообщения.Внимание);
	КонецЕсли;
		
КонецПроцедуры // ИнициализироватьДанныеДокумента()

Процедура ВыполнитьКонтроль(ДокументСсылка, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь) Экспорт
	
КонецПроцедуры

// Получает дополнительные реквизиты для отображения в отчете "Реестр документов"
// 
// Возвращаемое значение:
//   Структура доп. реквизитов
//
Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура("Информация", "Контрагент");
	Возврат Результат;
	
КонецФункции

// Функция подготавливает таблицу для проведения по регистру "уатПредоставленныеУслуги"
//
// Параметры:
//  ДокументСсылка					 - 	 - 
//  СтруктураДополнительныеСвойства	 - 	 - 
//
Процедура СформироватьПредоставленныеУслуги(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатЗаказПеревозчику_уэПолучаемыеУслуги.Ссылка.Дата КАК Период,
	|	уатЗаказПеревозчику_уэПолучаемыеУслуги.Ссылка КАК Регистратор,
	|	уатЗаказПеревозчику_уэПолучаемыеУслуги.Номенклатура КАК Номенклатура,
	|	уатЗаказПеревозчику_уэПолучаемыеУслуги.Количество КАК Количество,
	|	уатЗаказПеревозчику_уэПолучаемыеУслуги.Сумма + ВЫБОР
	|		КОГДА уатЗаказПеревозчику_уэПолучаемыеУслуги.Ссылка.УчитыватьНДС
	|				И НЕ уатЗаказПеревозчику_уэПолучаемыеУслуги.Ссылка.СуммаВключаетНДС
	|			ТОГДА уатЗаказПеревозчику_уэПолучаемыеУслуги.СуммаНДС
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма,
	|	уатЗаказПеревозчику_уэПолучаемыеУслуги.Сумма + ВЫБОР
	|		КОГДА уатЗаказПеревозчику_уэПолучаемыеУслуги.Ссылка.УчитыватьНДС
	|				И НЕ уатЗаказПеревозчику_уэПолучаемыеУслуги.Ссылка.СуммаВключаетНДС
	|			ТОГДА уатЗаказПеревозчику_уэПолучаемыеУслуги.СуммаНДС
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаРегл,
	|	уатЗаказПеревозчику_уэПолучаемыеУслуги.Сумма + ВЫБОР
	|		КОГДА уатЗаказПеревозчику_уэПолучаемыеУслуги.Ссылка.УчитыватьНДС
	|				И НЕ уатЗаказПеревозчику_уэПолучаемыеУслуги.Ссылка.СуммаВключаетНДС
	|			ТОГДА уатЗаказПеревозчику_уэПолучаемыеУслуги.СуммаНДС
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаУпр,
	|	уатЗаказПеревозчику_уэПолучаемыеУслуги.СуммаНДС КАК СуммаНДС,
	|	уатЗаказПеревозчику_уэПолучаемыеУслуги.СтавкаНДС КАК СтавкаНДС,
	|	уатЗаказПеревозчику_уэПолучаемыеУслуги.Ссылка.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.уатПолучателиУслуг.НашаОрганизация) КАК ПолучательУслуг,
	|	уатЗаказПеревозчику_уэПолучаемыеУслуги.Груз КАК ЗаказГрузоотправителя,
	|	уатЗаказПеревозчику_уэПолучаемыеУслуги.Груз КАК Этап,
	|	уатЗаказПеревозчику_уэПолучаемыеУслуги.Груз КАК ЗаказНаТС,
	|	уатЗаказПеревозчику_уэПолучаемыеУслуги.Ссылка КАК ЗаказПеревозчику,
	|	уатЗаказПеревозчику_уэПолучаемыеУслуги.Ссылка.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	уатЗаказПеревозчику_уэПолучаемыеУслуги.Груз.ОбъектСтроительства КАК ОбъектСтроительства,
	|	уатЗаказПеревозчику_уэПолучаемыеУслуги.Груз.Маршрут КАК Маршрут,
	|	уатЗаказПеревозчику_уэПолучаемыеУслуги.Груз.ВидПеревозки КАК ВидПеревозки,
	|	уатЗаказПеревозчику_уэПолучаемыеУслуги.Груз.НаправлениеПеревозки КАК НаправлениеПеревозки,
	|	уатЗаказПеревозчику_уэПолучаемыеУслуги.СтатьяРасходов КАК СтатьяРасходов,
	|	ВЫБОР
	|		КОГДА уатЗаказПеревозчику_уэПолучаемыеУслуги.Тариф.МетодРасчета = ЗНАЧЕНИЕ(Перечисление.уатМетодыРасчетаПоТарифам.ПроцентомОтСуммы)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.Наценка)
	|		ИНАЧЕ уатЗаказПеревозчику_уэПолучаемыеУслуги.Тариф.ПараметрВыработки
	|	КОНЕЦ КАК ПараметрВыработки,
	|	уатЗаказПеревозчику_уэПолучаемыеУслуги.Ссылка.ТС КАК ТС,
	|	уатЗаказПеревозчику_уэПолучаемыеУслуги.Валюта КАК Валюта
	|ИЗ
	|	Документ.уатЗаказПеревозчику_уэ.Расходы КАК уатЗаказПеревозчику_уэПолучаемыеУслуги
	|ГДЕ
	|	уатЗаказПеревозчику_уэПолучаемыеУслуги.Ссылка = &Ссылка
	|	И уатЗаказПеревозчику_уэПолучаемыеУслуги.Количество <> 0
	|	И уатЗаказПеревозчику_уэПолучаемыеУслуги.Сумма <> 0");
	Запрос.УстановитьПараметр("Ссылка"                     , ДокументСсылка);
	Запрос.УстановитьПараметр("ПустойЗаказГрузоотправителя", Документы.уатЗаказГрузоотправителя.ПустаяСсылка());
	
	ТаблицаДвижений = Запрос.Выполнить().Выгрузить();
	
	КэшКурсов = Неопределено;
	Для каждого ТекСтрока ИЗ ТаблицаДвижений Цикл
		Если ЗначениеЗаполнено(ТекСтрока.Валюта) Тогда
			ВалютаСтроки = ТекСтрока.Валюта;
			ДатаКурса = ?(ДокументСсылка.ДатаКурса = '00010101', ДокументСсылка.Дата, ДокументСсылка.ДатаКурса);
			СтруктураКурсаСтроки = СтруктураКурсаВалютыСтроки(ТекСтрока.Валюта, ДатаКурса, КэшКурсов);
		Иначе
			ВалютаСтроки = ДокументСсылка.ВалютаДокумента;
			СтруктураКурсаСтроки = Новый Структура("Курс, Кратность",
				СтруктураДополнительныеСвойства.КурсДокумента, СтруктураДополнительныеСвойства.КратностьДокумента);
		КонецЕсли;
		
		Если ВалютаСтроки <> СтруктураДополнительныеСвойства.ВалютаРеглУчета Тогда
			ТекСтрока.СуммаРегл = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаРегл,
				ВалютаСтроки,                   СтруктураДополнительныеСвойства.ВалютаРеглУчета,
				СтруктураКурсаСтроки.Курс,      СтруктураДополнительныеСвойства.КурсРегл,
				СтруктураКурсаСтроки.Кратность, СтруктураДополнительныеСвойства.КратностьРегл);
			ТекСтрока.СуммаНДС 	= уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаНДС,
				ВалютаСтроки,                   СтруктураДополнительныеСвойства.ВалютаРеглУчета,
				СтруктураКурсаСтроки.Курс,      СтруктураДополнительныеСвойства.КурсРегл,
				СтруктураКурсаСтроки.Кратность, СтруктураДополнительныеСвойства.КратностьРегл);
		КонецЕсли;
	КонецЦикла;
	
	уатРасчетыПоТарифам_уэ.РаспределитьДоходыРасходыМеждуЗаказами(ТаблицаДвижений, СтруктураДополнительныеСвойства.СообщенияОшибкиРаспределенияПоЗаказам);
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПредоставленныхУслуг", ТаблицаДвижений);
КонецПроцедуры

// Функция подготавливает таблицу для проведения по регистру "уатРасходы"
//
// Параметры:
//  ДокументСсылка					 - 	 - 
//  СтруктураДополнительныеСвойства	 - 	 - 
//
Процедура СформироватьЗатратыТС(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатЗаказПеревозчику_уэ.Ссылка КАК Регистратор,
	|	уатЗаказПеревозчику_уэ.Дата КАК Период,
	|	уатЗаказПеревозчику_уэПолучаемыеУслуги.Груз КАК Заказ,
	|	уатЗаказПеревозчику_уэПолучаемыеУслуги.Груз.Ответственный КАК Менеджер,
	|	уатЗаказПеревозчику_уэПолучаемыеУслуги.Номенклатура КАК Затрата,
	|	уатЗаказПеревозчику_уэПолучаемыеУслуги.Номенклатура КАК НоменклатураУслуги,
	|	уатЗаказПеревозчику_уэ.Ссылка.Контрагент КАК Контрагент,
	|	уатЗаказПеревозчику_уэ.Ссылка.ДоговорКонтрагента КАК Договор,
	|	уатЗаказПеревозчику_уэ.Организация КАК Организация,
	|	уатЗаказГрузоотправителя.Подразделение КАК Подразделение,
	|	уатЗаказГрузоотправителя.ОбъектСтроительства КАК ОбъектСтроительства,
	|	уатЗаказГрузоотправителя.Маршрут КАК Маршрут,
	|	уатЗаказГрузоотправителя.ВидПеревозки КАК ВидПеревозки,
	|	уатЗаказГрузоотправителя.НаправлениеПеревозки КАК НаправлениеПеревозки,
	|	ВЫБОР
	|		КОГДА уатЗаказПеревозчику_уэПолучаемыеУслуги.Тариф.МетодРасчета = ЗНАЧЕНИЕ(Перечисление.уатМетодыРасчетаПоТарифам.ПроцентомОтСуммы)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.Наценка)
	|		ИНАЧЕ уатЗаказПеревозчику_уэПолучаемыеУслуги.Тариф.ПараметрВыработки
	|	КОНЕЦ КАК ПараметрВыработки,
	|	уатЗаказПеревозчику_уэПолучаемыеУслуги.СтатьяРасходов КАК СтатьяРасходов,
	|	уатЗаказПеревозчику_уэ.ТС КАК ТС,
	|	уатЗаказПеревозчику_уэПолучаемыеУслуги.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА уатЗаказПеревозчику_уэ.УчитыватьНДС И НЕ уатЗаказПеревозчику_уэ.СуммаВключаетНДС
	|			ТОГДА (уатЗаказПеревозчику_уэПолучаемыеУслуги.Сумма + уатЗаказПеревозчику_уэПолучаемыеУслуги.СуммаНДС)
	|		ИНАЧЕ уатЗаказПеревозчику_уэПолучаемыеУслуги.Сумма
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР
	|		КОГДА уатЗаказПеревозчику_уэ.УчитыватьНДС И НЕ уатЗаказПеревозчику_уэ.СуммаВключаетНДС
	|			ТОГДА (уатЗаказПеревозчику_уэПолучаемыеУслуги.Сумма + уатЗаказПеревозчику_уэПолучаемыеУслуги.СуммаНДС)
	|		ИНАЧЕ уатЗаказПеревозчику_уэПолучаемыеУслуги.Сумма
	|	КОНЕЦ КАК СуммаРегл,
	|	ВЫБОР
	|		КОГДА уатЗаказПеревозчику_уэ.УчитыватьНДС И НЕ уатЗаказПеревозчику_уэ.СуммаВключаетНДС
	|			ТОГДА (уатЗаказПеревозчику_уэПолучаемыеУслуги.Сумма + уатЗаказПеревозчику_уэПолучаемыеУслуги.СуммаНДС)
	|		ИНАЧЕ уатЗаказПеревозчику_уэПолучаемыеУслуги.Сумма
	|	КОНЕЦ КАК СуммаУпр,
	|	уатЗаказПеревозчику_уэПолучаемыеУслуги.СуммаНДС КАК СуммаНДС,
	|	уатЗаказПеревозчику_уэПолучаемыеУслуги.СуммаНДС КАК СуммаНДСУпр,
	|	уатЗаказПеревозчику_уэПолучаемыеУслуги.Валюта КАК Валюта
	|ИЗ
	|	Документ.уатЗаказПеревозчику_уэ.Расходы КАК уатЗаказПеревозчику_уэПолучаемыеУслуги
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатЗаказПеревозчику_уэ КАК уатЗаказПеревозчику_уэ
	|		ПО уатЗаказПеревозчику_уэПолучаемыеУслуги.Ссылка = уатЗаказПеревозчику_уэ.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	|		ПО уатЗаказПеревозчику_уэПолучаемыеУслуги.Груз = уатЗаказГрузоотправителя.Ссылка
	|ГДЕ
	|	уатЗаказПеревозчику_уэПолучаемыеУслуги.Ссылка = &Ссылка
	|	И уатЗаказПеревозчику_уэПолучаемыеУслуги.Груз <> ЗНАЧЕНИЕ(Документ.уатЗаказГрузоотправителя.ПустаяСсылка)
	|	И уатЗаказПеревозчику_уэПолучаемыеУслуги.Количество <> 0
	|	И уатЗаказПеревозчику_уэПолучаемыеУслуги.Сумма <> 0");
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	ТаблицаРасходы = Запрос.Выполнить().Выгрузить();
	
	КэшКурсов = Неопределено;
    Для Каждого ТекСтрока Из ТаблицаРасходы Цикл
		Если ЗначениеЗаполнено(ТекСтрока.Валюта) Тогда
			ВалютаСтроки = ТекСтрока.Валюта;
			ДатаКурса = ?(ДокументСсылка.ДатаКурса = '00010101', ДокументСсылка.Дата, ДокументСсылка.ДатаКурса);
			СтруктураКурсаСтроки = СтруктураКурсаВалютыСтроки(ТекСтрока.Валюта, ДатаКурса, КэшКурсов);
		Иначе
			ВалютаСтроки = ДокументСсылка.ВалютаДокумента;
			СтруктураКурсаСтроки = Новый Структура("Курс, Кратность",
				СтруктураДополнительныеСвойства.КурсДокумента, СтруктураДополнительныеСвойства.КратностьДокумента);
		КонецЕсли;
		
		Если ВалютаСтроки <> СтруктураДополнительныеСвойства.ВалютаУпрУчета Тогда
			ТекСтрока.СуммаУпр = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаУпр,
				ВалютаСтроки,                   СтруктураДополнительныеСвойства.ВалютаУпрУчета,
				СтруктураКурсаСтроки.Курс,      СтруктураДополнительныеСвойства.КурсУпр,
				СтруктураКурсаСтроки.Кратность, СтруктураДополнительныеСвойства.КратностьУпр);
			ТекСтрока.СуммаНДСУпр = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаНДСУпр,
				ВалютаСтроки,                   СтруктураДополнительныеСвойства.ВалютаУпрУчета,
				СтруктураКурсаСтроки.Курс,      СтруктураДополнительныеСвойства.КурсУпр,
				СтруктураКурсаСтроки.Кратность, СтруктураДополнительныеСвойства.КратностьУпр);
		КонецЕсли;
		Если ВалютаСтроки <> СтруктураДополнительныеСвойства.ВалютаРеглУчета Тогда
			ТекСтрока.СуммаРегл = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаРегл,
				ВалютаСтроки,                   СтруктураДополнительныеСвойства.ВалютаРеглУчета,
				СтруктураКурсаСтроки.Курс,      СтруктураДополнительныеСвойства.КурсРегл,
				СтруктураКурсаСтроки.Кратность, СтруктураДополнительныеСвойства.КратностьРегл);
			ТекСтрока.СуммаНДС 	= уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаНДС,
				ВалютаСтроки,                   СтруктураДополнительныеСвойства.ВалютаРеглУчета,
				СтруктураКурсаСтроки.Курс,      СтруктураДополнительныеСвойства.КурсРегл,
				СтруктураКурсаСтроки.Кратность, СтруктураДополнительныеСвойства.КратностьРегл);	
		КонецЕсли;
	КонецЦикла;
	
	уатРасчетыПоТарифам_уэ.РаспределитьДоходыРасходыМеждуЗаказами(ТаблицаРасходы, СтруктураДополнительныеСвойства.СообщенияОшибкиРаспределенияПоЗаказам);
		
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРасходы", ТаблицаРасходы);
	
КонецПроцедуры

// Функция подготавливает таблицу для проведения по регистру "уатПлановыеУслуги_уэ"
//
// Параметры:
//  ДокументСсылка					 - 	 - 
//  СтруктураДополнительныеСвойства	 - 	 - 
//
Процедура СформироватьПлановыеУслуги(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗНАЧЕНИЕ(Перечисление.уатПолучателиУслуг.НашаОрганизация) КАК ПолучательУслуг,
	|	уатЗаказПеревозчику_уэ.Ссылка КАК Регистратор,
	|	уатЗаказПеревозчику_уэ.Дата КАК Период,
	|	уатЗаказПеревозчику_уэ.Организация КАК Организация,
	|	уатЗаказПеревозчику_уэ.Контрагент КАК Контрагент,
	|	уатЗаказПеревозчику_уэ.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	уатЗаказПеревозчику_уэ.ТС КАК ТС,
	|	ЕСТЬNULL(уатЗаказГрузоотправителя.Маршрут, ЗНАЧЕНИЕ(Справочник.уатМаршруты.ПустаяСсылка)) КАК Маршрут,
	|	ЕСТЬNULL(уатЗаказГрузоотправителя.ОбъектСтроительства, ЗНАЧЕНИЕ(Справочник.уатОбъектыСтроительства.ПустаяСсылка)) КАК ОбъектСтроительства,
	|	ЕСТЬNULL(уатЗаказГрузоотправителя.ВидПеревозки, ЗНАЧЕНИЕ(Справочник.уатВидыПеревозок.ПустаяСсылка)) КАК ВидПеревозки,
	|	ЕСТЬNULL(уатЗаказГрузоотправителя.НаправлениеПеревозки, ЗНАЧЕНИЕ(Справочник.уатНаправленияПеревозок.ПустаяСсылка)) КАК НаправлениеПеревозки,
	|	ЕСТЬNULL(уатЗаказГрузоотправителя.Подразделение, ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)) КАК Подразделение,
	|	уатЗаказПеревозчику_уэПолучаемыеУслуги.Груз КАК ЗаказНаТС,
	|	уатЗаказПеревозчику_уэПолучаемыеУслуги.Номенклатура КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА уатЗаказПеревозчику_уэПолучаемыеУслуги.Тариф.МетодРасчета = ЗНАЧЕНИЕ(Перечисление.уатМетодыРасчетаПоТарифам.ПроцентомОтСуммы)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.Наценка)
	|		ИНАЧЕ уатЗаказПеревозчику_уэПолучаемыеУслуги.Тариф.ПараметрВыработки
	|	КОНЕЦ КАК ПараметрВыработки,
	|	уатЗаказПеревозчику_уэПолучаемыеУслуги.СтатьяРасходов КАК СтатьяРасходов,
	|	уатЗаказПеревозчику_уэПолучаемыеУслуги.СтавкаНДС КАК СтавкаНДС,
	|	уатЗаказПеревозчику_уэПолучаемыеУслуги.КоличествоПлан КАК Количество,
	|	ВЫБОР
	|		КОГДА уатЗаказПеревозчику_уэ.УчитыватьНДС
	|				И НЕ уатЗаказПеревозчику_уэ.СуммаВключаетНДС
	|			ТОГДА уатЗаказПеревозчику_уэПолучаемыеУслуги.СуммаПлан + уатЗаказПеревозчику_уэПолучаемыеУслуги.СуммаНДСПлан
	|		ИНАЧЕ уатЗаказПеревозчику_уэПолучаемыеУслуги.СуммаПлан
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР
	|		КОГДА уатЗаказПеревозчику_уэ.УчитыватьНДС
	|				И НЕ уатЗаказПеревозчику_уэ.СуммаВключаетНДС
	|			ТОГДА уатЗаказПеревозчику_уэПолучаемыеУслуги.СуммаПлан + уатЗаказПеревозчику_уэПолучаемыеУслуги.СуммаНДСПлан
	|		ИНАЧЕ уатЗаказПеревозчику_уэПолучаемыеУслуги.СуммаПлан
	|	КОНЕЦ КАК СуммаРегл,
	|	ВЫБОР
	|		КОГДА уатЗаказПеревозчику_уэ.УчитыватьНДС
	|				И НЕ уатЗаказПеревозчику_уэ.СуммаВключаетНДС
	|			ТОГДА уатЗаказПеревозчику_уэПолучаемыеУслуги.СуммаПлан + уатЗаказПеревозчику_уэПолучаемыеУслуги.СуммаНДСПлан
	|		ИНАЧЕ уатЗаказПеревозчику_уэПолучаемыеУслуги.СуммаПлан
	|	КОНЕЦ КАК СуммаУпр,
	|	уатЗаказПеревозчику_уэПолучаемыеУслуги.СуммаНДСПлан КАК СуммаНДС,
	|	0 КАК СуммаНДСУпр,
	|	уатЗаказПеревозчику_уэПолучаемыеУслуги.Валюта КАК Валюта
	|ИЗ
	|	Документ.уатЗаказПеревозчику_уэ.Расходы КАК уатЗаказПеревозчику_уэПолучаемыеУслуги
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатЗаказПеревозчику_уэ КАК уатЗаказПеревозчику_уэ
	|		ПО уатЗаказПеревозчику_уэПолучаемыеУслуги.Ссылка = уатЗаказПеревозчику_уэ.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	|		ПО уатЗаказПеревозчику_уэПолучаемыеУслуги.Груз = уатЗаказГрузоотправителя.Ссылка
	|ГДЕ
	|	уатЗаказПеревозчику_уэПолучаемыеУслуги.Ссылка = &Ссылка
	|	И уатЗаказПеревозчику_уэПолучаемыеУслуги.КоличествоПлан <> 0
	|	И уатЗаказПеревозчику_уэПолучаемыеУслуги.СуммаПлан <> 0");
	Запрос.УстановитьПараметр("Ссылка",            ДокументСсылка);

	ТаблицаПлановыеУслуги = Запрос.Выполнить().Выгрузить();
	
	КэшКурсов = Неопределено;
	
	Для Каждого ТекСтрока Из ТаблицаПлановыеУслуги Цикл
		Если ЗначениеЗаполнено(ТекСтрока.Валюта) Тогда
			ВалютаСтроки = ТекСтрока.Валюта;
			ДатаКурса = ?(ДокументСсылка.ДатаКурса = '00010101', ДокументСсылка.Дата, ДокументСсылка.ДатаКурса);
			СтруктураКурсаСтроки = СтруктураКурсаВалютыСтроки(ТекСтрока.Валюта, ДатаКурса, КэшКурсов);
		Иначе
			ВалютаСтроки = ДокументСсылка.ВалютаДокумента;
			СтруктураКурсаСтроки = Новый Структура("Курс, Кратность",
				СтруктураДополнительныеСвойства.КурсДокумента, СтруктураДополнительныеСвойства.КратностьДокумента);
		КонецЕсли;
		
		Если ВалютаСтроки <> СтруктураДополнительныеСвойства.ВалютаУпрУчета Тогда
			ТекСтрока.СуммаУпр  = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаУпр,
				ВалютаСтроки,                   СтруктураДополнительныеСвойства.ВалютаУпрУчета,
				СтруктураКурсаСтроки.Курс,      СтруктураДополнительныеСвойства.КурсУпр,
				СтруктураКурсаСтроки.Кратность, СтруктураДополнительныеСвойства.КратностьУпр);
			ТекСтрока.СуммаНДСУпр = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаНДС,
				ВалютаСтроки,                   СтруктураДополнительныеСвойства.ВалютаУпрУчета,
				СтруктураКурсаСтроки.Курс,      СтруктураДополнительныеСвойства.КурсУпр,
				СтруктураКурсаСтроки.Кратность, СтруктураДополнительныеСвойства.КратностьУпр);
		КонецЕсли;
		Если ВалютаСтроки <> СтруктураДополнительныеСвойства.ВалютаРеглУчета Тогда
			ТекСтрока.СуммаРегл = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаРегл,
				ВалютаСтроки,                   СтруктураДополнительныеСвойства.ВалютаРеглУчета,
				СтруктураКурсаСтроки.Курс,      СтруктураДополнительныеСвойства.КурсРегл,
				СтруктураКурсаСтроки.Кратность, СтруктураДополнительныеСвойства.КратностьРегл);
			ТекСтрока.СуммаНДС 	= уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаНДС,
				ВалютаСтроки,                   СтруктураДополнительныеСвойства.ВалютаРеглУчета,
				СтруктураКурсаСтроки.Курс,      СтруктураДополнительныеСвойства.КурсРегл,
				СтруктураКурсаСтроки.Кратность, СтруктураДополнительныеСвойства.КратностьРегл);
		КонецЕсли;
	КонецЦикла;
	
	уатРасчетыПоТарифам_уэ.РаспределитьДоходыРасходыМеждуЗаказами(ТаблицаПлановыеУслуги, СтруктураДополнительныеСвойства.СообщенияОшибкиРаспределенияПоЗаказам);
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПлановыеУслуги", ТаблицаПлановыеУслуги);
	
КонецПроцедуры

// Формирует печатную форму основного макета документа
//
// Параметры:
//  МассивОбъектов	 - 	 - 
//  ОбъектыПечати	 - 	 - 
//  ТипПФ			 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция ПечатьЗаказПеревозчику(МассивОбъектов, ОбъектыПечати, ТипПФ = "Грузы") Экспорт
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПараметрыПечати_ЗаказПеревозчику_ЗаказПеревозчику";
	
	ПервыйДокумент = Истина;
	
	тзПараметрыПечати = ПолучитьДанныеДляПечатиЗаказПеревозчику(МассивОбъектов, ТипПФ);
	
	Для Каждого ТекущийДокумент Из МассивОбъектов Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.уатЗаказПеревозчику_уэ.ПФ_MXL_ЗаказПеревозчику");
		
		ПараметрыПечати = тзПараметрыПечати.НайтиСтроки(Новый Структура("Ссылка", ТекущийДокумент));
		Если ПараметрыПечати.Количество() = 0 Тогда
			Продолжить;
		КОнецЕсли;
		
		ОбластьЗаголовка           = "Заголовок";
		ОбластьРеквизитовЗаголовка = "ЗаголовокРеквизиты";
		ОбластьШапки               = "НоменклатураШапка";
		ОбластьСтроки              = "Номенклатура";
		ОбластьПодвал              = "ПодвалНоменклатура";
		ОбластьШапкиУслуги         = "УслугиШапка";
		ОбластьСтрокиУслуги        = "Услуги";
		ОбластьИтого               = "Итого";
		ОбластьПодвалУслуги        = "ПодвалУслуги";
		ОбластьПодписи             = "Подписи";
		
		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьЗаголовка);
		ОбластьМакета.Параметры.Заполнить(ПараметрыПечати[0]);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьРеквизитовЗаголовка);
		ОбластьМакета.Параметры.Заполнить(ПараметрыПечати[0]);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Вывести табличную часть
		Если ПараметрыПечати[0].Позиции.Количество() Тогда
			ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
			ОбластьМакета.Параметры.Заполнить(ПараметрыПечати[0]);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтроки);
			
			Для каждого ПараметрыПозиции Из ПараметрыПечати[0].Позиции Цикл
				ОбластьМакета.Параметры.Заполнить(ПараметрыПозиции);
				ТабличныйДокумент.Вывести(ОбластьМакета);
			КонецЦикла;
			
			ОбластьМакета = Макет.ПолучитьОбласть(ОбластьПодвал);
			ОбластьМакета.Параметры.Заполнить(ПараметрыПечати[0]);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		КонецЕсли;
		
		Сумма    = 0;
		СуммаНДС = 0;

		Если ТекущийДокумент.Расходы.Количество()Тогда
			ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапкиУслуги);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			КэшКурсов = Неопределено;
			
			Для Каждого ТекСтрокаУслуги Из ТекущийДокумент.Расходы Цикл 
				ОбластьУслуги = Макет.ПолучитьОбласть(ОбластьСтрокиУслуги);
				ОбластьУслуги.Параметры.Заполнить(ТекСтрокаУслуги);
				ОбластьУслуги.Параметры.Номенклатура = уатОбщегоНазначенияСервер.ПолучитьНаименованиеУслугиДляПечати(ТекСтрокаУслуги.Номенклатура, "");
				
				Если ЗначениеЗаполнено(ТекСтрокаУслуги.Валюта) И ТекСтрокаУслуги.Валюта <> ТекущийДокумент.ВалютаДокумента Тогда
					ДатаКурса = ?(ТекущийДокумент.ДатаКурса = '00010101', ТекущийДокумент.Дата, ТекущийДокумент.ДатаКурса);
					СтруктураКурсаСтроки = СтруктураКурсаВалютыСтроки(ТекСтрокаУслуги.Валюта, ДатаКурса, КэшКурсов);
					
					ТекЦена  = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрокаУслуги.Цена,
						ТекСтрокаУслуги.Валюта,         ТекущийДокумент.ВалютаДокумента,
						СтруктураКурсаСтроки.Курс,      ТекущийДокумент.КурсВзаиморасчетов,
						СтруктураКурсаСтроки.Кратность, ТекущийДокумент.КратностьВзаиморасчетов);
						
					ТекСумма  = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрокаУслуги.Сумма,
						ТекСтрокаУслуги.Валюта,         ТекущийДокумент.ВалютаДокумента,
						СтруктураКурсаСтроки.Курс,      ТекущийДокумент.КурсВзаиморасчетов,
						СтруктураКурсаСтроки.Кратность, ТекущийДокумент.КратностьВзаиморасчетов);
						
					ТекСуммаНДС  = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрокаУслуги.СуммаНДС,
						ТекСтрокаУслуги.Валюта,         ТекущийДокумент.ВалютаДокумента,
						СтруктураКурсаСтроки.Курс,      ТекущийДокумент.КурсВзаиморасчетов,
						СтруктураКурсаСтроки.Кратность, ТекущийДокумент.КратностьВзаиморасчетов);
						
					ОбластьУслуги.Параметры.Цена     = ТекЦена;
					ОбластьУслуги.Параметры.Сумма    = ТекСумма;
				Иначе
					ТекСумма    = ТекСтрокаУслуги.Сумма;
					ТекСуммаНДС = ТекСтрокаУслуги.СуммаНДС;
				КонецЕсли;
				
				Сумма    = Сумма    + ТекСумма;
				СуммаНДС = СуммаНДС + ТекСуммаНДС;
				
				ТабличныйДокумент.Вывести(ОбластьУслуги);
			КонецЦикла;
			
			ОбластьМакета = Макет.ПолучитьОбласть(ОбластьИтого);
			ОбластьМакета.Параметры.Всего = уатОбщегоНазначенияТиповые.уатФорматСумм(Сумма);
			
			Если ТекущийДокумент.УчитыватьНДС Тогда
				СтавкиНДС = ОбщегоНазначения.ВыгрузитьКолонку(ТекущийДокумент.Расходы, "СтавкаНДС", Истина);
				ДанныеПечатиНДС = уатОбщегоНазначенияТиповые.уатДанныеПечатиИтоговНДС(СуммаНДС, СтавкиНДС, ТекущийДокумент.СуммаВключаетНДС, ":"); 
				
				ОбластьМакета.Параметры.ВсегоНДС = ДанныеПечатиНДС.ВсегоНДС;
				ОбластьМакета.Параметры.НДС      = ДанныеПечатиНДС.НДС;
			КонецЕсли;
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			// Подвал
			ОбластьМакета = Макет.ПолучитьОбласть(ОбластьПодвалУслуги);
			СуммаКПрописи = Сумма + ?(ТекущийДокумент.СуммаВключаетНДС, 0, СуммаНДС);
			Если ТекущийДокумент.УчитыватьНДС И СуммаНДС <> 0 Тогда
				ОбластьМакета.Параметры.ИтоговаяСтрока = "Всего оказано услуг " + ТекущийДокумент.Расходы.Количество()
				+ ", на сумму " + уатОбщегоНазначенияТиповые.уатФорматСумм(СуммаКПрописи, ТекущийДокумент.ВалютаДокумента) + ", в том числе НДС "
				+ уатОбщегоНазначенияТиповые.уатФорматСумм(СуммаНДС, ТекущийДокумент.ВалютаДокумента);
				ОбластьМакета.Параметры.СуммаПрописью  = уатОбщегоНазначенияТиповые.уатСформироватьСуммуПрописью(СуммаКПрописи, ТекущийДокумент.ВалютаДокумента)
				+ ", в том числе НДС " + уатОбщегоНазначенияТиповые.уатСформироватьСуммуПрописью(СуммаНДС, ТекущийДокумент.ВалютаДокумента);
			Иначе
				ОбластьМакета.Параметры.ИтоговаяСтрока = "Всего оказано услуг " + ТекущийДокумент.Расходы.Количество()
				+ ", на сумму " + уатОбщегоНазначенияТиповые.уатФорматСумм(СуммаКПрописи, ТекущийДокумент.ВалютаДокумента);
				ОбластьМакета.Параметры.СуммаПрописью  = уатОбщегоНазначенияТиповые.уатСформироватьСуммуПрописью(СуммаКПрописи, ТекущийДокумент.ВалютаДокумента);		
			КонецЕсли;
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		КонецЕсли;
		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьПодписи);
		ТабличныйДокумент.Вывести(ОбластьМакета);

		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ТекущийДокумент);
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции 



// Функция возвращает таблицу выработки по документу
//  Структура таблицы: [Заказ, ПараметрВыработки, Количество]
//
// Параметры:
//  ДокументСсылка	 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция РассчитатьВыработкуПоЗаказам(ДокументСсылка) Экспорт
	// инициализация возвращаемой таблицы
	ТаблицаВыработка = Новый ТаблицаЗначений;
	ТаблицаВыработка.Колонки.Добавить("Заказ", Новый ОписаниеТипов("ДокументСсылка.уатЗаказГрузоотправителя"));
	ТаблицаВыработка.Колонки.Добавить("ПараметрВыработки", Новый ОписаниеТипов("СправочникСсылка.уатПараметрыВыработки"));
	ТаблицаВыработка.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ТаблицаВыработка.Колонки.Добавить("Контрагент", Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаВыработка.Колонки.Добавить("ВидПеревозки", Новый ОписаниеТипов("СправочникСсылка.уатВидыПеревозок"));
	ТаблицаВыработка.Колонки.Добавить("НаправлениеПеревозки", Новый ОписаниеТипов("СправочникСсылка.уатНаправленияПеревозок"));
	ТаблицаВыработка.Колонки.Добавить("ТипПункта", Новый ОписаниеТипов("СправочникСсылка.уатТипыПунктов"));
	ТаблицаВыработка.Колонки.Добавить("ТипТочкиМаршрута", Новый ОписаниеТипов("ПеречислениеСсылка.уатТипыТочекМаршрута"));
	ТаблицаВыработка.Колонки.Добавить("ВидУпаковки", Новый ОписаниеТипов("СправочникСсылка.уатВидыУпаковки_уэ"));
	ТаблицаВыработка.Колонки.Добавить("ТипКонтейнера", Новый ОписаниеТипов("СправочникСсылка.уатТипыКонтейнеров_уэ"));
	ТаблицаВыработка.Колонки.Добавить("ВидСкладскойОперации", Новый ОписаниеТипов("ПеречислениеСсылка.уатВидыСкладскихОпераций_уэ"));
	ТаблицаВыработка.Колонки.Добавить("КоличествоМест", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ТаблицаВыработка.Колонки.Добавить("Вес", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ТаблицаВыработка.Колонки.Добавить("Объем", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ТаблицаВыработка.Колонки.Добавить("КоличествоМестДни", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ТаблицаВыработка.Колонки.Добавить("ВесДни", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ТаблицаВыработка.Колонки.Добавить("ОбъемДни", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ТаблицаВыработка.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
	
	// Весо-объемные характеристики
	ОсновнойВидУпаковки = Справочники.уатВидыУпаковки_уэ.ПолучитьОсновнойВидУпаковки();
	табКоличествоУпаковокПоВидам = Новый ТаблицаЗначений();
	табКоличествоУпаковокПоВидам.Колонки.Добавить("Заказ",       Новый ОписаниеТипов("ДокументСсылка.уатЗаказГрузоотправителя"));
	табКоличествоУпаковокПоВидам.Колонки.Добавить("ВидУпаковки", Новый ОписаниеТипов("СправочникСсылка.уатВидыУпаковки_уэ"));
	табКоличествоУпаковокПоВидам.Колонки.Добавить("Количество",  Новый ОписаниеТипов("Число"));
	табКоличествоКонтейнеровПоТипам = Новый ТаблицаЗначений;
	табКоличествоКонтейнеровПоТипам.Колонки.Добавить("Заказ",         Новый ОписаниеТипов("ДокументСсылка.уатЗаказГрузоотправителя"));
	табКоличествоКонтейнеровПоТипам.Колонки.Добавить("ТипКонтейнера", Новый ОписаниеТипов("СправочникСсылка.уатТипыКонтейнеров_уэ"));
	табКоличествоКонтейнеровПоТипам.Колонки.Добавить("Количество",    Новый ОписаниеТипов("Число"));
	Для Каждого ТекСтрока Из ДокументСсылка.Грузы Цикл
		Если ТекСтрока.Заказ.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам Тогда 
			// вес груза
			ДопПараметры = Новый Структура("Заказ", ТекСтрока.Заказ);
			ДобавитьВыработку(ТаблицаВыработка, Справочники.уатПараметрыВыработки.ВесГруза, ТекСтрока.Заказ.ВесБрутто,
				ДопПараметры);
			// объем груза
			ДопПараметры = Новый Структура("Заказ", ТекСтрока.Заказ);
			ДобавитьВыработку(ТаблицаВыработка, Справочники.уатПараметрыВыработки.Объем, ТекСтрока.Заказ.Объем,
				ДопПараметры);
			// количество упаковок
			ДопПараметры = Новый Структура("Заказ, ВидУпаковки", ТекСтрока.Заказ, ОсновнойВидУпаковки);
			ДобавитьВыработку(ТаблицаВыработка, Справочники.уатПараметрыВыработки.КоличествоУпаковок, ТекСтрока.Заказ.КоличествоМест,
				ДопПараметры);
			Для Каждого СтрокаГруза Из ТекСтрока.Заказ.ГрузовойСостав Цикл
				НоваяСтрока = табКоличествоУпаковокПоВидам.Добавить();
				НоваяСтрока.Заказ = ТекСтрока.Заказ;
				НоваяСтрока.ВидУпаковки = СтрокаГруза.ВидУпаковки;
				НоваяСтрока.Количество = СтрокаГруза.КоличествоМест;
				// количество контейнеров
				Если СтрокаГруза.ГрузовоеМесто.Контейнер Тогда
					ДопПараметры = Новый Структура("Заказ, ТипКонтейнера", ТекСтрока.Заказ, СтрокаГруза.ГрузовоеМесто.ТипКонтейнера);
					ДобавитьВыработку(ТаблицаВыработка, Справочники.уатПараметрыВыработки.КоличествоУпаковок,
						СтрокаГруза.КоличествоМест, ДопПараметры);
					НоваяСтрока = табКоличествоКонтейнеровПоТипам.Добавить();
					НоваяСтрока.Заказ = ТекСтрока.Заказ;
					НоваяСтрока.ВидУпаковки = СтрокаГруза.ГрузовоеМесто.ТипКонтейнера;
					НоваяСтрока.Количество  = СтрокаГруза.КоличествоМест;
				КонецЕсли;
			КонецЦикла;
		
		ИначеЕсли ТипЗнч(ТекСтрока.ГрузовоеМесто) = Тип("СправочникСсылка.уатГрузовыеМеста_уэ") Тогда
			СтрокаГруза = ТекСтрока.Заказ.ГрузовойСостав.Найти(ТекСтрока.ГрузовоеМесто, "ГрузовоеМесто");
			Если СтрокаГруза <> Неопределено Тогда 
				// вес груза
				ДопПараметры = Новый Структура("Заказ", ТекСтрока.Заказ);
				ДобавитьВыработку(ТаблицаВыработка, Справочники.уатПараметрыВыработки.ВесГруза,
					СтрокаГруза.ВесБрутто * (ТекСтрока.Количество / СтрокаГруза.КоличествоМест), ДопПараметры);
				// объем груза
				ДопПараметры = Новый Структура("Заказ", ТекСтрока.Заказ);
				ДобавитьВыработку(ТаблицаВыработка, Справочники.уатПараметрыВыработки.Объем,
					СтрокаГруза.Объем * (ТекСтрока.Количество / СтрокаГруза.КоличествоМест), ДопПараметры);
				// количество упаковок
				ДопПараметры = Новый Структура("Заказ, ВидУпаковки", ТекСтрока.Заказ, СтрокаГруза.ВидУпаковки);
				ДобавитьВыработку(ТаблицаВыработка, Справочники.уатПараметрыВыработки.КоличествоУпаковок,
					ТекСтрока.Количество, ДопПараметры);
				НоваяСтрока = табКоличествоУпаковокПоВидам.Добавить();
				НоваяСтрока.Заказ = ТекСтрока.Заказ;
				НоваяСтрока.ВидУпаковки = СтрокаГруза.ВидУпаковки;
				НоваяСтрока.Количество = ТекСтрока.Количество;
				// количество контейнеров
				Если СтрокаГруза.ГрузовоеМесто.Контейнер Тогда
					ДопПараметры = Новый Структура("Заказ, ТипКонтейнера", ТекСтрока.Заказ, СтрокаГруза.ГрузовоеМесто.ТипКонтейнера);
					ДобавитьВыработку(ТаблицаВыработка, Справочники.уатПараметрыВыработки.КоличествоКонтейнеров,
						ТекСтрока.Количество, ДопПараметры);
					НоваяСтрока = табКоличествоКонтейнеровПоТипам.Добавить();
					НоваяСтрока.Заказ = ТекСтрока.Заказ;
					НоваяСтрока.ТипКонтейнера = СтрокаГруза.ГрузовоеМесто.ТипКонтейнера;
					НоваяСтрока.Количество  = ТекСтрока.Количество;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ТекСтрока.ГрузовоеМесто) = Тип("СправочникСсылка.Номенклатура") Тогда
			СтрокиТовара = ТекСтрока.Заказ.Товары.НайтиСтроки(Новый Структура("Номенклатура, ЕдиницаИзмерения", ТекСтрока.ГрузовоеМесто, ТекСтрока.ЕдиницаИзмерения));
			Если СтрокиТовара.Количество() Тогда 
				// вес груза
				ДопПараметры = Новый Структура("Заказ", ТекСтрока.Заказ);
				ДобавитьВыработку(ТаблицаВыработка, Справочники.уатПараметрыВыработки.ВесГруза,
					СтрокиТовара[0].ВесБрутто * (ТекСтрока.Количество / СтрокиТовара[0].Количество), ДопПараметры);
				// объем груза
				ДопПараметры = Новый Структура("Заказ", ТекСтрока.Заказ);
				ДобавитьВыработку(ТаблицаВыработка, Справочники.уатПараметрыВыработки.Объем,
					СтрокиТовара[0].Объем * (ТекСтрока.Количество / СтрокиТовара[0].Количество), ДопПараметры);
				// количество упаковок
				ДопПараметры = Новый Структура("Заказ, ВидУпаковки", ТекСтрока.Заказ, ОсновнойВидУпаковки);
				ДобавитьВыработку(ТаблицаВыработка, Справочники.уатПараметрыВыработки.КоличествоУпаковок,
					ТекСтрока.Количество, ДопПараметры);
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
	табКоличествоУпаковокПоВидам.Свернуть("Заказ, ВидУпаковки", "Количество");
	табКоличествоКонтейнеровПоТипам.Свернуть("Заказ, ТипКонтейнера", "Количество");
	
	// Складская обработка
	Для Каждого ТекСтрока Из ДокументСсылка.Грузы Цикл
		тблСкладскаяВыработка = уатОбщегоНазначения_уэ.ПолучитьСкладскуюВыработку(ТекСтрока.Заказ, ТекСтрока.ГрузовоеМесто);
		Для Каждого СтрокаСкладскойВыработки Из тблСкладскаяВыработка Цикл
			ДопПараметры = Новый Структура("Заказ, ВидУпаковки, ТипКонтейнера, ВидСкладскойОперации, КоличествоМест, Вес, Объем, КоличествоМестДни, ВесДни, ОбъемДни, Склад",
				ТекСтрока.Заказ, СтрокаСкладскойВыработки.ВидУпаковки, СтрокаСкладскойВыработки.ТипКонтейнера, СтрокаСкладскойВыработки.ВидСкладскойОперации,
				СтрокаСкладскойВыработки.КоличествоМест, СтрокаСкладскойВыработки.Вес, СтрокаСкладскойВыработки.Объем,
				СтрокаСкладскойВыработки.КоличествоМестДни, СтрокаСкладскойВыработки.ВесДни, СтрокаСкладскойВыработки.ОбъемДни,
				СтрокаСкладскойВыработки.Склад);
			ДобавитьВыработку(ТаблицаВыработка, СтрокаСкладскойВыработки.ПараметрВыработки, СтрокаСкладскойВыработки.Количество, ДопПараметры);
		КонецЦикла;
	КонецЦикла;
	
	КоличествоТочек = 0;
	тблПунктыПоТипам = Новый ТаблицаЗначений();
	тблПунктыПоТипам.Колонки.Добавить("Заказ", Новый ОписаниеТипов("ДокументСсылка.уатЗаказГрузоотправителя"));
	тблПунктыПоТипам.Колонки.Добавить("ТипПункта",  Новый ОписаниеТипов("СправочникСсылка.уатТипыПунктов"));
	тблПунктыПоТипам.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	тблТочкиПоТипам = Новый ТаблицаЗначений();
	тблТочкиПоТипам.Колонки.Добавить("Заказ", Новый ОписаниеТипов("ДокументСсылка.уатЗаказГрузоотправителя"));
	тблТочкиПоТипам.Колонки.Добавить("ТипТочки",   Новый ОписаниеТипов("ПеречислениеСсылка.уатТипыТочекМаршрута"));
	тблТочкиПоТипам.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	тблПунктыПробегВнеГеозоны = Новый ТаблицаЗначений();
	тблПунктыПробегВнеГеозоны.Колонки.Добавить("Пункт",      Новый ОписаниеТипов("СправочникСсылка.уатПунктыНазначения"));
	тблПунктыПробегВнеГеозоны.Колонки.Добавить("ТипПункта",  Новый ОписаниеТипов("СправочникСсылка.уатТипыПунктов"));
	тблПунктыПробегВнеГеозоны.Колонки.Добавить("ТипТочки",   Новый ОписаниеТипов("ПеречислениеСсылка.уатТипыТочекМаршрута"));
	тблПунктыПробегВнеГеозоны.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));  
	тблПунктыПробегВнеГеозоны.Колонки.Добавить("Заказ",      Новый ОписаниеТипов("ДокументСсылка.уатЗаказГрузоотправителя"));

	мсвЗаказы = Новый Массив;
	Для Каждого ТекЗаказ Из ДокументСсылка.Грузы Цикл
		Если мсвЗаказы.Найти(ТекЗаказ.Заказ) = Неопределено Тогда
			мсвЗаказы.Добавить(ТекЗаказ.Заказ);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекЗаказ Из мсвЗаказы Цикл
		// количество заказов
		ДопПараметры = Новый Структура("Заказ", ТекЗаказ);
		ДобавитьВыработку(ТаблицаВыработка, Справочники.уатПараметрыВыработки.КоличествоЗаказов, 1, ДопПараметры);
		
		//время
		ДопПараметры = Новый Структура("Заказ", ТекЗаказ);
		ДобавитьВыработку(ТаблицаВыработка, Справочники.уатПараметрыВыработки.ВремяВРаботе, ТекЗаказ.Время, ДопПараметры);
		// пробег с грузом
		ДопПараметры = Новый Структура("Заказ", ТекЗаказ);
		ДобавитьВыработку(ТаблицаВыработка, Справочники.уатПараметрыВыработки.ПробегСГрузом, ТекЗаказ.Расстояние,
			ДопПараметры);
		// пробег общий
		ДопПараметры = Новый Структура("Заказ", ТекЗаказ);
		ДобавитьВыработку(ТаблицаВыработка, Справочники.уатПараметрыВыработки.ПробегОбщий, ТекЗаказ.Расстояние,
			ДопПараметры);
		//стоянки
		ДопПараметры = Новый Структура("Заказ", ТекЗаказ);
		ДобавитьВыработку(ТаблицаВыработка, Справочники.уатПараметрыВыработки.ВремяВПростое, ТекЗаказ.СтоянкаПунктОтправления,
			ДопПараметры);
		ДобавитьВыработку(ТаблицаВыработка, Справочники.уатПараметрыВыработки.ВремяВПростое, ТекЗаказ.СтоянкаПунктНазначения,
			ДопПараметры);
		
		// тн км, м3 км
		мсвСтрокиПробегСГрузом = ТаблицаВыработка.НайтиСтроки(Новый Структура("Заказ, ПараметрВыработки", ТекЗаказ, Справочники.уатПараметрыВыработки.ПробегСГрузом));
		мсвСтрокиВесГруза = ТаблицаВыработка.НайтиСтроки(Новый Структура("Заказ, ПараметрВыработки", ТекЗаказ, Справочники.уатПараметрыВыработки.ВесГруза));
		мсвСтрокиОбъемГруза = ТаблицаВыработка.НайтиСтроки(Новый Структура("Заказ, ПараметрВыработки", ТекЗаказ, Справочники.уатПараметрыВыработки.Объем));
		Если мсвСтрокиПробегСГрузом.Количество() > 0 И мсвСтрокиВесГруза.Количество() > 0 Тогда
			ДопПараметры = Новый Структура("Заказ", ТекЗаказ);
			ДобавитьВыработку(ТаблицаВыработка, Справочники.уатПараметрыВыработки.ТнКм,
				мсвСтрокиПробегСГрузом[0].Количество * мсвСтрокиВесГруза[0].Количество/1000, ДопПараметры);
		КонецЕсли;
		Если мсвСтрокиПробегСГрузом.Количество() > 0 И мсвСтрокиОбъемГруза.Количество() > 0 Тогда
			ДопПараметры = Новый Структура("Заказ", ТекЗаказ);
			ДобавитьВыработку(ТаблицаВыработка, Справочники.уатПараметрыВыработки.ОбъемКм,
				мсвСтрокиПробегСГрузом[0].Количество * мсвСтрокиОбъемГруза[0].Количество, ДопПараметры);
		КонецЕсли;
			
		// количество точек
		Если ТекЗаказ.FTL Тогда 
			Для Каждого ТекПунктПоЗаказу Из ТекЗаказ.ПромежуточныеПункты Цикл 
				КоличествоТочек = КоличествоТочек + 1;
				
				Если ТипЗнч(ТекПунктПоЗаказу.Пункт) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда  
					ТипПункта = ТекПунктПоЗаказу.Пункт.ТипПункта;
					
					НовСтр = тблПунктыПоТипам.Добавить();
					НовСтр.ТипПункта  = ТипПункта;
					НовСтр.Количество = 1;
					НовСтр.Заказ = ТекЗаказ;  
					
					НовСтр = тблПунктыПробегВнеГеозоны.Добавить();
					НовСтр.Пункт      = ТекПунктПоЗаказу.Пункт;
					НовСтр.ТипПункта  = ТипПункта;
					НовСтр.ТипТочки   = ТекПунктПоЗаказу.ТипТочкиМаршрута;
					НовСтр.Количество = ТекПунктПоЗаказу.Пункт.ПробегВнеГеозоны; 
					НовСтр.Заказ = ТекЗаказ;
				КонецЕсли;
				
				НовСтр = тблТочкиПоТипам.Добавить();
				НовСтр.ТипТочки   = ТекПунктПоЗаказу.ТипТочкиМаршрута;
				НовСтр.Количество = 1;
				НовСтр.Заказ = ТекЗаказ;
			КонецЦикла;
			
		Иначе 
			КоличествоТочек = КоличествоТочек + 2;
			
			Если ТипЗнч(ТекЗаказ.АдресОтправления) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда
				ТипПункта = ТекЗаказ.АдресОтправления.ТипПункта;
				
				НовСтр = тблПунктыПоТипам.Добавить();
				НовСтр.ТипПункта  = ТипПункта;
				НовСтр.Количество = 1;
				НовСтр.Заказ = ТекЗаказ;
				
				НовСтр = тблПунктыПробегВнеГеозоны.Добавить();
				НовСтр.Пункт      = ТекЗаказ.АдресОтправления;
				НовСтр.ТипПункта  = ТипПункта;
				НовСтр.ТипТочки   = Перечисления.уатТипыТочекМаршрута.Погрузка;
				НовСтр.Количество = ТекЗаказ.АдресОтправления.ПробегВнеГеозоны; 
				НовСтр.Заказ      = ТекЗаказ;
			КонецЕсли;
			
			Если ТипЗнч(ТекЗаказ.АдресНазначения) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда 
				ТипПункта = ТекЗаказ.АдресНазначения.ТипПункта;
				
				НовСтр = тблПунктыПоТипам.Добавить();
				НовСтр.ТипПункта  = ТипПункта;
				НовСтр.Количество = 1;
				НовСтр.Заказ = ТекЗаказ; 
				
				НовСтр = тблПунктыПробегВнеГеозоны.Добавить();
				НовСтр.Пункт      = ТекЗаказ.АдресНазначения;
				НовСтр.ТипПункта  = ТипПункта;
				НовСтр.ТипТочки   = Перечисления.уатТипыТочекМаршрута.Разгрузка;
				НовСтр.Количество = ТекЗаказ.АдресНазначения.ПробегВнеГеозоны;
				НовСтр.Заказ      = ТекЗаказ;
			КонецЕсли;
			
			НовСтр = тблТочкиПоТипам.Добавить();
			НовСтр.ТипТочки   = Перечисления.уатТипыТочекМаршрута.Погрузка;
			НовСтр.Количество = 1;
			НовСтр.Заказ = ТекЗаказ;
			
			НовСтр = тблТочкиПоТипам.Добавить();
			НовСтр.ТипТочки   = Перечисления.уатТипыТочекМаршрута.Разгрузка;
			НовСтр.Количество = 1;
			НовСтр.Заказ = ТекЗаказ;
		КонецЕсли;
		
		ДопПараметры = Новый Структура("Заказ", ТекЗаказ);
		ДобавитьВыработку(ТаблицаВыработка, Справочники.уатПараметрыВыработки.КоличествоТочек,
			КоличествоТочек, ДопПараметры);
		
		// Ночная доставка
		флНочнаяДоставка = уатРасчетыПоТарифам_уэ.ЭтоНочнаяДоставка(ТекЗаказ.ОтправлениеС, ТекЗаказ.ДоставкаПо, ДокументСсылка.Организация);
		Если флНочнаяДоставка Тогда
			ДопПараметры = Новый Структура("Заказ", ТекЗаказ);
			ДобавитьВыработку(ТаблицаВыработка, Справочники.уатПараметрыВыработки.НочнаяДоставка,
				1, ДопПараметры);
		КонецЕсли;
			
		// Стоимость груза
		ДопПараметры = Новый Структура("Заказ", ТекЗаказ);
		ДобавитьВыработку(ТаблицаВыработка, Справочники.уатПараметрыВыработки.СтоимостьГруза, ТекЗаказ.СтоимостьГруза, ДопПараметры);	
		
	КонецЦикла;
	
	тблПунктыПоТипам.Свернуть("Заказ, ТипПункта", "Количество");
	Для Каждого ТекПункт Из тблПунктыПоТипам Цикл
		ДопПараметры = Новый Структура("Заказ, ТипПункта", ТекПункт.Заказ, ТекПункт.ТипПункта);
		ДобавитьВыработку(ТаблицаВыработка, Справочники.уатПараметрыВыработки.КоличествоТочекПоТипуПункта,
			ТекПункт.Количество, ДопПараметры);
	КонецЦикла;
	
	тблТочкиПоТипам.Свернуть("Заказ, ТипТочки", "Количество");
	Для Каждого ТекТочка Из тблТочкиПоТипам Цикл
		ДопПараметры = Новый Структура("Заказ, ТипТочкиМаршрута", ТекТочка.Заказ, ТекТочка.ТипТочки);
		ДобавитьВыработку(ТаблицаВыработка, Справочники.уатПараметрыВыработки.КоличествоТочекПоВидуОперации,
		ТекТочка.Количество, ДопПараметры);
	КонецЦикла;
	
	текТблПунктыПробегВнеГеозоны = тблПунктыПробегВнеГеозоны.Скопировать();
	текТблПунктыПробегВнеГеозоны.Свернуть("Заказ, ТипТочки", "Количество");
	Для Каждого ТекТочка Из текТблПунктыПробегВнеГеозоны Цикл
		ДопПараметры = Новый Структура("Заказ, ТипТочкиМаршрута", ТекТочка.Заказ, ТекТочка.ТипТочки);
		ДобавитьВыработку(ТаблицаВыработка, Справочники.уатПараметрыВыработки.ПробегВнеГеозоныПоВидуОперации,
		ТекТочка.Количество, ДопПараметры);
	КонецЦикла; 
	текТблПунктыПробегВнеГеозоны = тблПунктыПробегВнеГеозоны.Скопировать();
	текТблПунктыПробегВнеГеозоны.Свернуть("Заказ, ТипПункта", "Количество");
	Для Каждого ТекТочка Из текТблПунктыПробегВнеГеозоны Цикл 
		ДопПараметры = Новый Структура("Заказ, ТипПункта", ТекПункт.Заказ, ТекПункт.ТипПункта);
		ДобавитьВыработку(ТаблицаВыработка, Справочники.уатПараметрыВыработки.ПробегВнеГеозоныПоТипуПункта,
			ТекПункт.Количество, ДопПараметры);
	КонецЦикла;  
	текТблПунктыПробегВнеГеозоны = тблПунктыПробегВнеГеозоны.Скопировать();
	текТблПунктыПробегВнеГеозоны.Свернуть("Пункт", "Количество");
	
	ПробегВнеГеозоны = 0;
	Для Каждого ТекТочка Из текТблПунктыПробегВнеГеозоны Цикл
		ПробегВнеГеозоны = ПробегВнеГеозоны + ТекТочка.Количество;
	КонецЦикла;   
	ДопПараметры = Новый Структура("Заказ", ТекПункт.Заказ);
	ДобавитьВыработку(ТаблицаВыработка, Справочники.уатПараметрыВыработки.ПробегВнеГеозоны,
		ПробегВнеГеозоны, ДопПараметры);
		
	ДопПараметры = Новый Структура("ИспользоватьКолонкуЗаказ", Истина);
	уатОбщегоНазначения_уэ.ЗаписатьПараметрыВыработкиСАналитикой(табКоличествоУпаковокПоВидам, табКоличествоКонтейнеровПоТипам, тблПунктыПоТипам, тблТочкиПоТипам, ТаблицаВыработка, ДопПараметры);
	
	ТаблицаВыработка.Свернуть("Заказ, ПараметрВыработки, Контрагент, ВидПеревозки, НаправлениеПеревозки, ТипПункта" +
		", ТипТочкиМаршрута, ВидУпаковки, ТипКонтейнера, ВидСкладскойОперации, Вес, Объем, КоличествоМест" +
		", Склад, ВесДни, ОбъемДни, КоличествоМестДни", "Количество");
	
	// расчет доп. выработки по шапке
	Для Каждого ТекВыработка Из ДокументСсылка.Выработка Цикл
		Если ТекВыработка.Значение > 0 Тогда
			ДопПараметры = Новый Структура("ДопВыработка", Истина);
			ДобавитьВыработку(ТаблицаВыработка, ТекВыработка.ПараметрВыработки, ТекВыработка.Значение, ДопПараметры);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаВыработка;
КонецФункции

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// Функция помещает в структуру все данные, отображаемые при печати документа.
// Вызывается из функции ПечатьОприходованияТоваров и из веб-приложения
//
// Возвращаемое значение:
//  Структура
//
Функция ПолучитьДанныеДляПечатиЗаказПеревозчику(МассивОбъектов, ТипПФ)
	
	тзПараметрыПечати = Новый ТаблицаЗначений();
	тзПараметрыПечати.Колонки.Добавить("Ссылка");
	тзПараметрыПечати.Колонки.Добавить("ТекстЗаголовка");
	тзПараметрыПечати.Колонки.Добавить("ПредставлениеОрганизации");
	тзПараметрыПечати.Колонки.Добавить("ПредставлениеПеревозчика");
	тзПараметрыПечати.Колонки.Добавить("Ответственный");
	тзПараметрыПечати.Колонки.Добавить("ПредставлениеВидПеревозки");
	тзПараметрыПечати.Колонки.Добавить("ПредставлениеТС");
	тзПараметрыПечати.Колонки.Добавить("ПредставлениеДоговора");
	тзПараметрыПечати.Колонки.Добавить("ЕдиницаИзмеренияВес");
	тзПараметрыПечати.Колонки.Добавить("ЕдиницаИзмеренияОбъем");
	тзПараметрыПечати.Колонки.Добавить("ЕдиницаИзмеренияМеста");
	тзПараметрыПечати.Колонки.Добавить("Позиции");
	тзПараметрыПечати.Колонки.Добавить("КоличествоНаименований");
	тзПараметрыПечати.Колонки.Добавить("ПеревезеноВес");
	тзПараметрыПечати.Колонки.Добавить("ПеревезеноОбъем");
	тзПараметрыПечати.Колонки.Добавить("ПеревезеноКолМест");
	тзПараметрыПечати.Колонки.Добавить("ПредставлениеВодителя");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);
	Запрос.УстановитьПараметр("ТипПФ", ТипПФ);

	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатЗаказПеревозчику_уэ.Номер КАК Номер,
	|	уатЗаказПеревозчику_уэ.Дата КАК Дата,
	|	уатЗаказПеревозчику_уэ.Организация КАК Организация,
	|	уатЗаказПеревозчику_уэ.Водитель КАК Водитель,
	|	уатЗаказПеревозчику_уэ.Ответственный КАК Ответственный,
	|	уатЗаказПеревозчику_уэ.Ссылка КАК Ссылка,
	|	уатЗаказПеревозчику_уэ.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	уатЗаказПеревозчику_уэ.ВидПеревозки КАК ВидПеревозки,
	|	уатЗаказПеревозчику_уэ.Контрагент КАК Контрагент,
	|	уатЗаказПеревозчику_уэ.ВесБрутто КАК Вес,
	|	уатЗаказПеревозчику_уэ.КоличествоМест КАК КоличествоМест,
	|	уатЗаказПеревозчику_уэ.Объем КАК Объем,
	|	уатЗаказПеревозчику_уэ.ТС КАК ТС
	|ИЗ
	|	Документ.уатЗаказПеревозчику_уэ КАК уатЗаказПеревозчику_уэ
	|ГДЕ
	|	уатЗаказПеревозчику_уэ.Ссылка В(&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатЗаказПеревозчику_уэ.НомерСтроки КАК НомерСтроки,
	|	уатЗаказПеревозчику_уэ.Заказ КАК Заказ,
	|	уатЗаказПеревозчику_уэ.ГрузовоеМесто КАК Номенклатура,
	|	уатЗаказПеревозчику_уэ.Количество КАК Количество,
	|	уатЗаказПеревозчику_уэ.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА уатЗаказГрузоотправителяТовары.ВесБрутто ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ уатЗаказГрузоотправителяТовары.ВесБрутто * (уатЗаказПеревозчику_уэ.Количество / уатЗаказГрузоотправителяТовары.Количество)
	|	КОНЕЦ КАК Вес,
	|	уатЕдиницаИзмеренияВеса.Значение КАК ЕдиницаИзмеренияВес,
	|	ВЫБОР
	|		КОГДА уатЗаказГрузоотправителяТовары.Объем ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ уатЗаказГрузоотправителяТовары.Объем * (уатЗаказПеревозчику_уэ.Количество / уатЗаказГрузоотправителяТовары.Количество)
	|	КОНЕЦ КАК Объем,
	|	уатЕдиницаИзмеренияОбъема.Значение КАК ЕдиницаИзмеренияОбъем,
	|	ЕСТЬNULL(уатЗаказГрузоотправителяТовары.КоличествоМест, 0) КАК КоличествоМест,
	|	уатЗаказГрузоотправителяТовары.ЕдиницаИзмерения КАК ЕдиницаИзмеренияМеста,
	|	уатЗаказПеревозчику_уэ.Ссылка КАК Ссылка,
	|	уатЗаказПеревозчику_уэ.Ссылка.Номер КАК Номер,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(уатЗаказПеревозчику_уэ.ГрузовоеМесто) = ТИП(Справочник.Номенклатура)
	|			ТОГДА уатЗаказПеревозчику_уэ.ГрузовоеМесто
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК НоменклатураНаименование,
	|	уатЗаказГрузоотправителяТовары.Сумма КАК Сумма,
	|	уатЗаказГрузоотправителяТовары.Ссылка.ВалютаТоваров КАК ВалютаДокумента
	|ПОМЕСТИТЬ втТовары
	|ИЗ
	|	Документ.уатЗаказПеревозчику_уэ.Грузы КАК уатЗаказПеревозчику_уэ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя.Товары КАК уатЗаказГрузоотправителяТовары
	|		ПО уатЗаказПеревозчику_уэ.Заказ = уатЗаказГрузоотправителяТовары.Ссылка
	|			И уатЗаказПеревозчику_уэ.ГрузовоеМесто = уатЗаказГрузоотправителяТовары.Номенклатура
	|			И уатЗаказПеревозчику_уэ.ЕдиницаИзмерения = уатЗаказГрузоотправителяТовары.ЕдиницаИзмерения,
	|	Константа.уатЕдиницаИзмеренияВеса КАК уатЕдиницаИзмеренияВеса,
	|	Константа.уатЕдиницаИзмеренияОбъема КАК уатЕдиницаИзмеренияОбъема
	|ГДЕ
	|	уатЗаказПеревозчику_уэ.Ссылка В(&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатЗаказПеревозчику_уэ.НомерСтроки КАК НомерСтроки,
	|	уатЗаказПеревозчику_уэ.Заказ КАК Заказ,
	|	уатЗаказПеревозчику_уэ.ГрузовоеМесто КАК Номенклатура,
	|	уатЗаказПеревозчику_уэ.Количество КАК Количество,
	|	уатЗаказПеревозчику_уэ.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА уатЗаказГрузоотправителяГрузовойСостав.ВесБрутто ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ уатЗаказГрузоотправителяГрузовойСостав.ВесБрутто * (уатЗаказПеревозчику_уэ.Количество / уатЗаказГрузоотправителяГрузовойСостав.КоличествоМест)
	|	КОНЕЦ КАК Вес,
	|	уатЕдиницаИзмеренияВеса.Значение КАК ЕдиницаИзмеренияВес,
	|	ВЫБОР
	|		КОГДА уатЗаказГрузоотправителяГрузовойСостав.Объем ЕСТЬ NULL
	|			ТОГДА 0
	|		ИНАЧЕ уатЗаказГрузоотправителяГрузовойСостав.Объем * (уатЗаказПеревозчику_уэ.Количество / уатЗаказГрузоотправителяГрузовойСостав.КоличествоМест)
	|	КОНЕЦ КАК Объем,
	|	уатЕдиницаИзмеренияОбъема.Значение КАК ЕдиницаИзмеренияОбъем,
	|	ЕСТЬNULL(уатЗаказГрузоотправителяГрузовойСостав.КоличествоМест, 0) КАК КоличествоМест,
	|	уатЗаказГрузоотправителяГрузовойСостав.ВидУпаковки КАК ЕдиницаИзмеренияМеста,
	|	уатЗаказПеревозчику_уэ.Ссылка КАК Ссылка,
	|	уатЗаказПеревозчику_уэ.Ссылка.Номер КАК Номер,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(уатЗаказПеревозчику_уэ.ГрузовоеМесто) = ТИП(Справочник.Номенклатура)
	|			ТОГДА """"
	|		ИНАЧЕ уатЗаказПеревозчику_уэ.ГрузовоеМесто
	|	КОНЕЦ КАК НоменклатураНаименование,
	|	уатЗаказГрузоотправителяГрузовойСостав.Стоимость КАК Стоимость,
	|	ВЫБОР
	|		КОГДА уатЗаказГрузоотправителяГрузовойСостав.ГрузовоеМесто = ЗНАЧЕНИЕ(Справочник.уатГрузовыеМеста_уэ.ПустаяССылка)
	|				ИЛИ уатЗаказГрузоотправителяГрузовойСостав.ГрузовоеМесто = НЕОПРЕДЕЛЕНО
	|			ТОГДА уатЗаказГрузоотправителяГрузовойСостав.Ссылка.ВалютаТоваров
	|		ИНАЧЕ уатЗаказГрузоотправителяГрузовойСостав.ГрузовоеМесто.Валюта
	|	КОНЕЦ КАК ВалютаДокумента
	|ПОМЕСТИТЬ втГрузовойСостав
	|ИЗ
	|	Документ.уатЗаказПеревозчику_уэ.Грузы КАК уатЗаказПеревозчику_уэ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя.ГрузовойСостав КАК уатЗаказГрузоотправителяГрузовойСостав
	|		ПО уатЗаказПеревозчику_уэ.Заказ = уатЗаказГрузоотправителяГрузовойСостав.Ссылка
	|			И уатЗаказПеревозчику_уэ.ГрузовоеМесто = уатЗаказГрузоотправителяГрузовойСостав.ГрузовоеМесто,
	|	Константа.уатЕдиницаИзмеренияВеса КАК уатЕдиницаИзмеренияВеса,
	|	Константа.уатЕдиницаИзмеренияОбъема КАК уатЕдиницаИзмеренияОбъема
	|ГДЕ
	|	уатЗаказПеревозчику_уэ.Ссылка В(&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втГрузовойСостав.НомерСтроки КАК НомерСтроки,
	|	втГрузовойСостав.Заказ КАК Заказ,
	|	ВЫБОР
	|		КОГДА &ТипПФ = ""Грузы""
	|			ТОГДА втТовары.НоменклатураНаименование
	|		ИНАЧЕ втГрузовойСостав.НоменклатураНаименование
	|	КОНЕЦ КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(втТовары.Номенклатура) = ТИП(Справочник.Номенклатура)
	|			ТОГДА втТовары.Количество
	|		ИНАЧЕ ВЫБОР
	|				КОГДА втГрузовойСостав.Заказ.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам)
	|						И втТовары.Номенклатура = НЕОПРЕДЕЛЕНО
	|					ТОГДА 1
	|				ИНАЧЕ втГрузовойСостав.Количество
	|			КОНЕЦ
	|	КОНЕЦ КАК Количество,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(втТовары.Номенклатура) = ТИП(Справочник.Номенклатура)
	|			ТОГДА втТовары.ЕдиницаИзмерения
	|		ИНАЧЕ втГрузовойСостав.ЕдиницаИзмерения
	|	КОНЕЦ КАК ЕдиницаИзмерения,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(втТовары.Номенклатура) = ТИП(Справочник.Номенклатура)
	|			ТОГДА втТовары.Вес
	|		ИНАЧЕ ВЫБОР
	|				КОГДА втГрузовойСостав.Заказ.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам)
	|					ТОГДА втГрузовойСостав.Заказ.ВесБрутто
	|				ИНАЧЕ втГрузовойСостав.Вес
	|			КОНЕЦ
	|	КОНЕЦ КАК Вес,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(втТовары.Номенклатура) = ТИП(Справочник.Номенклатура)
	|			ТОГДА втТовары.ЕдиницаИзмеренияВес
	|		ИНАЧЕ втГрузовойСостав.ЕдиницаИзмеренияВес
	|	КОНЕЦ КАК ЕдиницаИзмеренияВес,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(втТовары.Номенклатура) = ТИП(Справочник.Номенклатура)
	|			ТОГДА втТовары.Объем
	|		ИНАЧЕ ВЫБОР
	|				КОГДА втГрузовойСостав.Заказ.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам)
	|					ТОГДА втГрузовойСостав.Заказ.Объем
	|				ИНАЧЕ втГрузовойСостав.Объем
	|			КОНЕЦ
	|	КОНЕЦ КАК Объем,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(втТовары.Номенклатура) = ТИП(Справочник.Номенклатура)
	|			ТОГДА втТовары.ЕдиницаИзмеренияОбъем
	|		ИНАЧЕ втГрузовойСостав.ЕдиницаИзмеренияОбъем
	|	КОНЕЦ КАК ЕдиницаИзмеренияОбъем,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(втТовары.Номенклатура) = ТИП(Справочник.Номенклатура)
	|			ТОГДА втТовары.КоличествоМест
	|		ИНАЧЕ ВЫБОР
	|				КОГДА втГрузовойСостав.Заказ.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам)
	|					ТОГДА втГрузовойСостав.Заказ.КоличествоМест
	|				ИНАЧЕ втГрузовойСостав.КоличествоМест
	|			КОНЕЦ
	|	КОНЕЦ КАК КоличествоМест,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(втТовары.Номенклатура) = ТИП(Справочник.Номенклатура)
	|			ТОГДА втТовары.ЕдиницаИзмеренияМеста
	|		ИНАЧЕ втГрузовойСостав.ЕдиницаИзмеренияМеста
	|	КОНЕЦ КАК ЕдиницаИзмеренияМеста,
	|	втТовары.Ссылка КАК Ссылка,
	|	втГрузовойСостав.Номер КАК Номер,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(втТовары.Номенклатура) = ТИП(Справочник.Номенклатура)
	|			ТОГДА втТовары.Сумма
	|		ИНАЧЕ втГрузовойСостав.Стоимость
	|	КОНЕЦ КАК Стоимость,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(втТовары.Номенклатура) = ТИП(Справочник.Номенклатура)
	|			ТОГДА втТовары.ВалютаДокумента
	|		ИНАЧЕ втГрузовойСостав.ВалютаДокумента
	|	КОНЕЦ КАК Валюта
	|ИЗ
	|	втТовары КАК втТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втГрузовойСостав КАК втГрузовойСостав
	|		ПО втТовары.НомерСтроки = втГрузовойСостав.НомерСтроки
	|			И втТовары.Ссылка = втГрузовойСостав.Ссылка
	|			И втТовары.Заказ = втГрузовойСостав.Заказ
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номер,
	|	НомерСтроки";

	НаборРезультатов = Запрос.ВыполнитьПакет();
	
	ВыборкаЗаголовок     = НаборРезультатов[0].Выбрать();
	ВыборкаНоменклатура  = НаборРезультатов[3].Выгрузить();
	
	Пока ВыборкаЗаголовок.Следующий() Цикл
		
		ПараметрыПечати = тзПараметрыПечати.Добавить();
		ПараметрыПечати.Ссылка                    = ВыборкаЗаголовок.Ссылка;
		ПараметрыПечати.ТекстЗаголовка            = уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ВыборкаЗаголовок, НСтр("en='Order to carrier';ru='Заказ перевозчику'"));
		ПараметрыПечати.ПредставлениеОрганизации  = уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(
					уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(ВыборкаЗаголовок.Организация, ВыборкаЗаголовок.Дата), "НаименованиеДляПечатныхФорм,");
		ПараметрыПечати.ПредставлениеПеревозчика  = ВыборкаЗаголовок.Контрагент;
		ПараметрыПечати.ПредставлениеВидПеревозки = ВыборкаЗаголовок.ВидПеревозки;
		ПараметрыПечати.ПредставлениеТС           = Строка(ВыборкаЗаголовок.ТС) + ?(ЗначениеЗаполнено(Строка(ВыборкаЗаголовок.ТС)), " (" + уатОбщегоНазначения.уатПредставлениеМоделиТС(ВыборкаЗаголовок.ТС) + ")", "");
		ПараметрыПечати.Ответственный             = ВыборкаЗаголовок.Ответственный;
		ПараметрыПечати.ПредставлениеДоговора     = ВыборкаЗаголовок.ДоговорКонтрагента;
		ПараметрыПечати.ПредставлениеВодителя     = ВыборкаЗаголовок.Водитель;
		
		// Вывести табличную часть
		Позиции = Новый Массив();
		
		КоличествоНаименований = 0;
		ПеревезеноВес          = 0;
		ПеревезеноОбъем        = 0;
		ПеревезеноКолМест	   = 0;
		ЕдиницаИзмеренияВес    = Константы.уатЕдиницаИзмеренияВеса.Получить();
		ЕдиницаИзмеренияОбъем  = Константы.уатЕдиницаИзмеренияОбъема.Получить();
		ЕдиницаИзмеренияМеста  = Справочники.уатВидыУпаковки_уэ.ПолучитьОсновнойВидУпаковки().КраткоеНаименование;
		
		Если ЗначениеЗаполнено(ВыборкаЗаголовок.Ссылка.МаршрутныйЛист) Тогда
			ЗаполнитьДеревоЗаказовПоМЛ(ВыборкаЗаголовок.Ссылка, ТипПФ, Позиции, ЕдиницаИзмеренияВес, ЕдиницаИзмеренияОбъем, ЕдиницаИзмеренияМеста, ПараметрыПечати);
		Иначе
			ТекДокумент = ВыборкаНоменклатура.НайтиСтроки(Новый Структура("Ссылка", ВыборкаЗаголовок.Ссылка));
			Для Каждого ТекСтрока Из ТекДокумент Цикл
				ПараметрыПозиции = Новый Структура();
				ПараметрыПозиции.Вставить("Ссылка"					, ТекСтрока.Ссылка);
				ПараметрыПозиции.Вставить("Заказ"					, ТекСтрока.Заказ);
				ПараметрыПозиции.Вставить("Номенклатура"			, ТекСтрока.Номенклатура);
				ПараметрыПозиции.Вставить("НомерСтроки"				, ТекСтрока.НомерСтроки);
				ПараметрыПозиции.Вставить("Количество"				, ТекСтрока.Количество);
				ПараметрыПозиции.Вставить("ЕдиницаИзмерения"		, ТекСтрока.ЕдиницаИзмерения);
				ПараметрыПозиции.Вставить("Вес"						, ТекСтрока.Вес);
				ПараметрыПозиции.Вставить("Объем"					, ТекСтрока.Объем);
				ПараметрыПозиции.Вставить("КоличествоМест"			, ТекСтрока.КоличествоМест);
				ПараметрыПозиции.Вставить("Стоимость"				, ТекСтрока.Стоимость);
				ПараметрыПозиции.Вставить("Валюта"					, ТекСтрока.Валюта);
				
				Позиции.Добавить(ПараметрыПозиции);
				КоличествоНаименований = КоличествоНаименований + 1;
			КонецЦикла;
			
			ПеревезеноВес          = ВыборкаЗаголовок.Вес;
			ПеревезеноОбъем        = ВыборкаЗаголовок.Объем;
			ПеревезеноКолМест      = ВыборкаЗаголовок.КоличествоМест;
			
			ПараметрыПечати.Позиции = Позиции;
			ПараметрыПечати.Позиции = Позиции;
			ПараметрыПечати.ЕдиницаИзмеренияВес    = "(" + ЕдиницаИзмеренияВес +")";
			ПараметрыПечати.ЕдиницаИзмеренияОбъем  = "(" + ЕдиницаИзмеренияОбъем +")";
			ПараметрыПечати.ЕдиницаИзмеренияМеста  = ЕдиницаИзмеренияМеста;
			ПараметрыПечати.КоличествоНаименований = ?(КоличествоНаименований = 0, "", КоличествоНаименований);
			ПараметрыПечати.ПеревезеноВес          = ?(ПеревезеноВес = 0, "", Формат(ПеревезеноВес, "ЧДЦ=3") + " " + ЕдиницаИзмеренияВес);
			ПараметрыПечати.ПеревезеноОбъем        = ?(ПеревезеноОбъем = 0, "", Формат(ПеревезеноОбъем, "ЧДЦ=3") + " " + ЕдиницаИзмеренияОбъем);
			ПараметрыПечати.ПеревезеноКолМест      = ?(ПеревезеноКолМест = 0, "", Формат(ПеревезеноКолМест, "ЧДЦ=3") + " " + ЕдиницаИзмеренияМеста);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат тзПараметрыПечати;

КонецФункции //ПолучитьДанныеДляПечатиОприходованияТоваров()

Процедура ЗаполнитьДеревоЗаказовПоМЛ(ТекДокумент, ТипПФ, Позиции, ЕдиницаИзмеренияВес, ЕдиницаИзмеренияОбъем, ЕдиницаИзмеренияМеста, ПараметрыПечати)
	
	Перем НовСтрокаПункт, ПредПункт, НовСтрокаЗаказ, ПредЗаказ, ПредСтрока;
	
	ЗаказыДерево = Новый ДеревоЗначений();
	ЗаказыДерево.Колонки.Добавить("ПунктЗаказНоменклатура");
	ЗаказыДерево.Колонки.Добавить("Время",             Новый ОписаниеТипов("Число"));
	ЗаказыДерево.Колонки.Добавить("Расстояние",        Новый ОписаниеТипов("Число"));
	ЗаказыДерево.Колонки.Добавить("ТипТочкиМаршрута");
	ЗаказыДерево.Колонки.Добавить("ЕдиницаИзмерения");
	ЗаказыДерево.Колонки.Добавить("Стоянка",           Новый ОписаниеТипов("Число"));
	ЗаказыДерево.Колонки.Добавить("СтоянкаИзПункта",   Новый ОписаниеТипов("Число"));
	ЗаказыДерево.Колонки.Добавить("Количество",        Новый ОписаниеТипов("Число"));
	ЗаказыДерево.Колонки.Добавить("ПрибытиеПлан");
	ЗаказыДерево.Колонки.Добавить("ОкноС");
	ЗаказыДерево.Колонки.Добавить("УбытиеПлан");
	ЗаказыДерево.Колонки.Добавить("ОкноПо");
	ЗаказыДерево.Колонки.Добавить("ВесБрутто",         Новый ОписаниеТипов("Число"));
	ЗаказыДерево.Колонки.Добавить("Объем",             Новый ОписаниеТипов("Число"));
	ЗаказыДерево.Колонки.Добавить("КоличествоМест",    Новый ОписаниеТипов("Число"));
	ЗаказыДерево.Колонки.Добавить("Контрагент");
	ЗаказыДерево.Колонки.Добавить("ТипЗначенияСтроки");
	ЗаказыДерево.Колонки.Добавить("Комментарий");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", ТекДокумент.МаршрутныйЛист);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатМаршрутныйЛистЗаказы.НомерСтроки КАК НомерСтроки,
	|	уатМаршрутныйЛистЗаказы.ВесБрутто КАК ВесБрутто,
	|	уатМаршрутныйЛистЗаказы.Время КАК Время,
	|	уатМаршрутныйЛистЗаказы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя,
	|	уатМаршрутныйЛистЗаказы.Количество КАК Количество,
	|	уатМаршрутныйЛистЗаказы.КоличествоМест КАК КоличествоМест,
	|	уатМаршрутныйЛистЗаказы.Контрагент КАК Контрагент,
	|	уатМаршрутныйЛистЗаказы.Номенклатура КАК Номенклатура,
	|	уатМаршрутныйЛистЗаказы.Объем КАК Объем,
	|	уатМаршрутныйЛистЗаказы.ПрибытиеПлан КАК ПрибытиеПлан,
	|	уатМаршрутныйЛистЗаказы.Пункт КАК Пункт,
	|	уатМаршрутныйЛистЗаказы.Расстояние КАК Расстояние,
	|	уатМаршрутныйЛистЗаказы.Стоянка КАК Стоянка,
	|	уатМаршрутныйЛистЗаказы.СтоянкаИзПункта КАК СтоянкаИзПункта,
	|	уатМаршрутныйЛистЗаказы.ТипТочкиМаршрута КАК ТипТочкиМаршрута,
	|	уатМаршрутныйЛистЗаказы.Ссылка.ДатаИВремяОтправленияПлан КАК ДатаИВремяОтправленияПлан
	|ИЗ
	|	Документ.уатМаршрутныйЛист.Заказы КАК уатМаршрутныйЛистЗаказы
	|ГДЕ
	|	уатМаршрутныйЛистЗаказы.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	СменилсяПункт = Ложь;
	ПредСтрока    = Неопределено;
	ПредПункт     = Ложь;
	
	УстановитьПривилегированныйРежим(Истина);
	
	Для Каждого ТекСтрока Из Запрос.Выполнить().Выгрузить() Цикл
		//пункт
		Если ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка Тогда
			ТекПункт = ?(ЗначениеЗаполнено(ТекСтрока.Пункт), ТекСтрока.Пункт, ТекСтрока.ЗаказГрузоотправителя.АдресОтправления);
		ИначеЕсли ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка Тогда
			ТекПункт = ?(ЗначениеЗаполнено(ТекСтрока.Пункт), ТекСтрока.Пункт, ТекСтрока.ЗаказГрузоотправителя.АдресНазначения);
		Иначе
			ТекПункт = ТекСтрока.Пункт;
		КонецЕсли;
		
		Если ТекДокумент.МаршрутныйЛист.ВидОперации = Перечисления.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя
			И ТекСтрока.ЗаказГрузоотправителя.Пустая()
			ИЛИ ТекСтрока.ТипТочкиМаршрута.Пустая() Тогда
			
			НовСтрокаПункт = ЗаказыДерево.Строки.Добавить();
			НовСтрокаПункт.ПунктЗаказНоменклатура = ТекПункт;
			НовСтрокаПункт.Расстояние             = ТекСтрока.Расстояние;
			НовСтрокаПункт.Время                  = ТекСтрока.Время;
			НовСтрокаПункт.ПрибытиеПлан           = ТекСтрока.ПрибытиеПлан;
			
			ПредПункт     = ТекПункт;
			СменилсяПункт = Истина;
			
			Если ЗаказыДерево.Строки.Индекс(НовСтрокаПункт) = 0 Тогда
				НовСтрокаПункт.УбытиеПлан = ТекСтрока.ДатаИВремяОтправленияПлан;
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
		
		Если ТекПункт <> ПредПункт Или СменилсяПункт Тогда
			НовСтрокаПункт = ЗаказыДерево.Строки.Добавить();
			НовСтрокаПункт.ПунктЗаказНоменклатура = ТекПункт;
			НовСтрокаПункт.Расстояние             = ТекСтрока.Расстояние;
			НовСтрокаПункт.Время                  = ТекСтрока.Время;
			НовСтрокаПункт.ПрибытиеПлан           = ТекСтрока.ПрибытиеПлан;
			НовСтрокаПункт.СтоянкаИзПункта        = ТекСтрока.СтоянкаИзПункта;
			
			ПредПункт     = ТекПункт;
			СменилсяПункт = Истина;
			
			Если ЗаказыДерево.Строки.Индекс(НовСтрокаПункт) = 0 Тогда
				НовСтрокаПункт.УбытиеПлан = ТекСтрока.ДатаИВремяОтправленияПлан;
			КонецЕсли;
		КонецЕсли;
		
		//Заказ
		Если Не ТекСтрока.ЗаказГрузоотправителя = ПредЗаказ 
				Или (Не ПредСтрока = Неопределено И Не ТекСтрока.ТипТочкиМаршрута = ПредСтрока.ТипТочкиМаршрута) 
				Или СменилсяПункт Тогда
			НовСтрокаЗаказ = НовСтрокаПункт.Строки.Добавить();
			НовСтрокаЗаказ.ПунктЗаказНоменклатура = ТекСтрока.ЗаказГрузоотправителя;
			НовСтрокаЗаказ.ТипТочкиМаршрута       = ТекСтрока.ТипТочкиМаршрута;
			НовСтрокаЗаказ.ВесБрутто              = ТекСтрока.ВесБрутто;
			НовСтрокаЗаказ.Объем                  = ТекСтрока.Объем;
			НовСтрокаЗаказ.КоличествоМест         = ТекСтрока.КоличествоМест;
			НовСтрокаЗаказ.Стоянка                = ТекСтрока.Стоянка;
			НовСтрокаЗаказ.СтоянкаИзПункта        = ТекСтрока.СтоянкаИзПункта;
			НовСтрокаЗаказ.Расстояние             = ТекСтрока.Расстояние;
			
			Если ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка Тогда
				НовСтрокаЗаказ.ОкноС  = ТекСтрока.ЗаказГрузоотправителя.ОтправлениеС;
				НовСтрокаЗаказ.ОкноПо = ТекСтрока.ЗаказГрузоотправителя.ОтправлениеПо;
				
			ИначеЕсли ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка Тогда
				НовСтрокаЗаказ.ОкноС  = ТекСтрока.ЗаказГрузоотправителя.ДоставкаС;
				НовСтрокаЗаказ.ОкноПо = ТекСтрока.ЗаказГрузоотправителя.ДоставкаПо;
			КонецЕсли;
			
			ПредЗаказ     = ТекСтрока.ЗаказГрузоотправителя;
			СменилсяПункт = Ложь;
		КонецЕсли;
		
		Если ТекСтрока.ЗаказГрузоотправителя.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам Тогда
			ПустаяЕИ = Справочники.ЕдиницыИзмерения.ПустаяСсылка();
			
			НовСтрокаЗаказ.Количество       = ТекСтрока.Количество;
			НовСтрокаЗаказ.ВесБрутто        = ТекСтрока.ВесБрутто;
			НовСтрокаЗаказ.Объем            = ТекСтрока.Объем;
			НовСтрокаЗаказ.КоличествоМест   = ТекСтрока.КоличествоМест;
			НовСтрокаЗаказ.ЕдиницаИзмерения = ПустаяЕИ;
			
		Иначе
			//номенклатура
			НовСтрокаНоменклатура = НовСтрокаЗаказ.Строки.Добавить();
			НовСтрокаНоменклатура.ПунктЗаказНоменклатура = ТекСтрока.Номенклатура;
			НовСтрокаНоменклатура.Количество             = ТекСтрока.Количество;
			НовСтрокаНоменклатура.ВесБрутто              = ТекСтрока.ВесБрутто;
			НовСтрокаНоменклатура.Объем                  = ТекСтрока.Объем;
			НовСтрокаНоменклатура.КоличествоМест         = ТекСтрока.КоличествоМест;
			НовСтрокаНоменклатура.ЕдиницаИзмерения       = ТекСтрока.ЕдиницаИзмерения;
		КонецЕсли;
		ПредСтрока = ТекСтрока;
	КонецЦикла;
	
	ЭлементыДерева = ЗаказыДерево.Строки;
	
	Если ЭлементыДерева.Количество() <> 0 Тогда
		ПредВремяОтпр       = ЭлементыДерева[0].УбытиеПлан;
		ПредПунктСтрока     = Неопределено;
		СуммарноеРасстояние = 0;
		СуммарноеВремя      = 0;
	КонецЕсли;
	
	Для Каждого ТекСтрокаПункт Из ЭлементыДерева Цикл
		СуммарноеВремяСтоянки = 0;
		
		Для Каждого ТекСтрокаЗаказ Из ТекСтрокаПункт.Строки Цикл 
			СуммарноеВремяСтоянки = уатЗащищенныеФункцииСервер.СложитьВремя(СуммарноеВремяСтоянки, ТекСтрокаЗаказ.Стоянка);
		КонецЦикла;
		
		СуммарноеВремяСтоянки = уатЗащищенныеФункцииСервер.СложитьВремя(СуммарноеВремяСтоянки, ТекСтрокаПункт.СтоянкаИзПункта);
		
		ТекСтрокаПункт.Стоянка = СуммарноеВремяСтоянки;
		СуммарноеРасстояние    = СуммарноеРасстояние + ТекСтрокаПункт.Расстояние;
		
		Если ЭлементыДерева.Индекс(ТекСтрокаПункт) = 0 Тогда
			ПредВремяОтпр = ТекСтрокаПункт.УбытиеПлан;
		Иначе 
			ТекСтрокаПункт.ПрибытиеПлан = уатЗащищенныеФункцииСервер.СложитьВремя(ПредВремяОтпр,               ПредПунктСтрока.Время);
			ТекСтрокаПункт.УбытиеПлан   = уатЗащищенныеФункцииСервер.СложитьВремя(ТекСтрокаПункт.ПрибытиеПлан, СуммарноеВремяСтоянки);
			ПредВремяОтпр               = ТекСтрокаПункт.УбытиеПлан;
		КонецЕсли;
		
		ПредПунктСтрока = ТекСтрокаПункт;
	КонецЦикла;
	
	ТекВес   = 0; ТекОбъем   = 0; ТекКолМест   = 0;
	ЗаказВес = 0; ЗаказОбъем = 0; ЗаказКолМест = 0;
	
	СтрокиДерева = ЗаказыДерево.Строки;
	
	мсвЗаказыСДетализациейВцеломПоЗаказу = Новый Массив();
	Для Каждого ТекПункт Из СтрокиДерева Цикл
		Для Каждого ТекЗаказ Из ТекПункт.Строки Цикл
			Если ЗначениеЗаполнено(ТекЗаказ.ПунктЗаказНоменклатура)
					И мсвЗаказыСДетализациейВцеломПоЗаказу.Найти(ТекЗаказ.ПунктЗаказНоменклатура) = Неопределено
					И ТекЗаказ.ПунктЗаказНоменклатура.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам Тогда
				мсвЗаказыСДетализациейВцеломПоЗаказу.Добавить(ТекЗаказ.ПунктЗаказНоменклатура)
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	НомерСтроки = 1;
	Для Каждого ТекПункт Из СтрокиДерева Цикл
					
		Для Каждого ТекЗаказ Из ТекПункт.Строки Цикл
			
			ЗаказВес = 0; ЗаказОбъем = 0; ЗаказКолМест = 0;
			
			Если ЗначениеЗаполнено(ТекЗаказ.ПунктЗаказНоменклатура)
				И мсвЗаказыСДетализациейВцеломПоЗаказу.Найти(ТекЗаказ.ПунктЗаказНоменклатура) <> Неопределено Тогда
				
				ЗаказВес     = ТекЗаказ.ПунктЗаказНоменклатура.ВесБрутто;
				ЗаказОбъем   = ТекЗаказ.ПунктЗаказНоменклатура.Объем;
				ЗаказКолМест = ТекЗаказ.ПунктЗаказНоменклатура.КоличествоМест;
				
				Если ТекЗаказ.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка Тогда
					ПараметрыПозиции = Новый Структура();
					ПараметрыПозиции.Вставить("Ссылка"					, ТекДокумент);
					ПараметрыПозиции.Вставить("Заказ"					, ТекЗаказ.ПунктЗаказНоменклатура);
					ПараметрыПозиции.Вставить("Номенклатура"			, "");
					ПараметрыПозиции.Вставить("НомерСтроки"				, НомерСтроки);
					ПараметрыПозиции.Вставить("Количество"				, ТекЗаказ.Количество);
					ПараметрыПозиции.Вставить("ЕдиницаИзмерения"		, ТекЗаказ.ЕдиницаИзмерения);
					ПараметрыПозиции.Вставить("Вес"						, ТекЗаказ.ВесБрутто);
					ПараметрыПозиции.Вставить("Объем"					, ТекЗаказ.Объем);
					ПараметрыПозиции.Вставить("КоличествоМест"			, ТекЗаказ.КоличествоМест);
					ПараметрыПозиции.Вставить("Стоимость"				, "");
					ПараметрыПозиции.Вставить("Валюта"					, "");
					Позиции.Добавить(ПараметрыПозиции);
					
					НомерСтроки = НомерСтроки + 1;
				КонецЕсли;
			Иначе
				Для Каждого ТекНоменклатура Из ТекЗаказ.Строки Цикл
					ЗаказВес     = ЗаказВес     + ТекНоменклатура.ВесБрутто;
					ЗаказОбъем   = ЗаказОбъем   + ТекНоменклатура.Объем;
					ЗаказКолМест = ЗаказКолМест + ТекНоменклатура.КоличествоМест;
					
					Если ТекЗаказ.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка Тогда
						ПараметрыПозиции = Новый Структура();
						ПараметрыПозиции.Вставить("Ссылка"					, ТекДокумент);
						ПараметрыПозиции.Вставить("Заказ"					, ТекЗаказ.ПунктЗаказНоменклатура);
						Если ТипПФ = "Грузы" Тогда
							ПараметрыПозиции.Вставить("Номенклатура"			, ?(ТипЗнч(ТекНоменклатура.ПунктЗаказНоменклатура) = Тип("СправочникСсылка.Номенклатура"),ТекНоменклатура.ПунктЗаказНоменклатура, ""));
						Иначе
							ПараметрыПозиции.Вставить("Номенклатура"			, ?(ТипЗнч(ТекНоменклатура.ПунктЗаказНоменклатура) = Тип("СправочникСсылка.Номенклатура"),"", ТекНоменклатура.ПунктЗаказНоменклатура));
						КонецЕсли;
						ПараметрыПозиции.Вставить("НомерСтроки"				, НомерСтроки);
						ПараметрыПозиции.Вставить("Количество"				, ТекНоменклатура.Количество);
						ПараметрыПозиции.Вставить("ЕдиницаИзмерения"		, ТекНоменклатура.ЕдиницаИзмерения);
						ПараметрыПозиции.Вставить("Вес"						, ТекНоменклатура.ВесБрутто);
						ПараметрыПозиции.Вставить("Объем"					, ТекНоменклатура.Объем);
						ПараметрыПозиции.Вставить("КоличествоМест"			, ТекНоменклатура.КоличествоМест);
						ПараметрыПозиции.Вставить("Стоимость"				, "");
						ПараметрыПозиции.Вставить("Валюта"					, "");
						Позиции.Добавить(ПараметрыПозиции);
						
						НомерСтроки = НомерСтроки + 1;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			ТекЗаказ.ВесБрутто      = ЗаказВес;
			ТекЗаказ.Объем          = ЗаказОбъем;
			ТекЗаказ.КоличествоМест = ЗаказКолМест;
			Если ТекЗаказ.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка Тогда
				ТекВес     = ТекВес     + ЗаказВес;
				ТекОбъем   = ТекОбъем   + ЗаказОбъем;
				ТекКолМест = ТекКолМест + ЗаказКолМест;
			ИначеЕсли ТекЗаказ.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка Тогда
				ТекВес     = ТекВес     - ЗаказВес;
				ТекОбъем   = ТекОбъем   - ЗаказОбъем;
				ТекКолМест = ТекКолМест - ЗаказКолМест;
			КонецЕсли;
		КонецЦикла;
		
		ТекПункт.ВесБрутто      = ТекВес;
		ТекПункт.Объем          = ТекОбъем;
		ТекПункт.КоличествоМест = ТекКолМест;
	КонецЦикла;
	
	ПараметрыПечати.Позиции = Позиции;
	ПараметрыПечати.КоличествоНаименований = ?(СтрокиДерева.Количество() = 0 , "", НомерСтроки);
	ПараметрыПечати.ПеревезеноВес          = ?(ТекДокумент.МаршрутныйЛист.ВесБрутто = 0, "", Формат(ТекДокумент.МаршрутныйЛист.ВесБрутто, "ЧДЦ=3") + " " + ЕдиницаИзмеренияВес);
	ПараметрыПечати.ПеревезеноОбъем        = ?(ТекДокумент.МаршрутныйЛист.Объем = 0, "", Формат(ТекДокумент.МаршрутныйЛист.Объем, "ЧДЦ=3") + " " + ЕдиницаИзмеренияОбъем);
	ПараметрыПечати.ПеревезеноКолМест      = ?(ТекДокумент.МаршрутныйЛист.КоличествоМест = 0, "", Формат(ТекДокумент.МаршрутныйЛист.КоличествоМест, "ЧДЦ=3") + " " + ЕдиницаИзмеренияМеста);
	ПараметрыПечати.ЕдиницаИзмеренияМеста  = ЕдиницаИзмеренияМеста;
	
КонецПроцедуры

Процедура ДобавитьВыработку(ТаблицаВыработки, ПараметрВыработки, Количество, ДопПараметры = Неопределено)
	
	Если НЕ ПараметрВыработки.ИспользоватьДляЗаказовИПотребности Тогда
		Возврат;
	КонецЕсли;
	Если Количество <= 0 Тогда
		Возврат;
	КонецЕсли;
		
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = Новый Структура;
	КонецЕсли;
	Если НЕ ДопПараметры.Свойство("Заказ") Тогда
		ДопПараметры.Вставить("Заказ", Документы.уатЗаказГрузоотправителя.ПустаяСсылка());
	КонецЕсли;
	Если НЕ ДопПараметры.Свойство("ТипПункта") Тогда
		ДопПараметры.Вставить("ТипПункта", Неопределено);
	КонецЕсли;
	Если НЕ ДопПараметры.Свойство("ТипТочкиМаршрута") Тогда
		ДопПараметры.Вставить("ТипТочкиМаршрута", Неопределено);
	КонецЕсли;
	Если НЕ ДопПараметры.Свойство("ВидУпаковки") Тогда
		ДопПараметры.Вставить("ВидУпаковки", Неопределено);
	КонецЕсли;
	Если НЕ ДопПараметры.Свойство("ТипКонтейнера") Тогда
		ДопПараметры.Вставить("ТипКонтейнера", Неопределено);
	КонецЕсли;
	Если НЕ ДопПараметры.Свойство("ВидСкладскойОперации") Тогда
		ДопПараметры.Вставить("ВидСкладскойОперации", Неопределено);
	КонецЕсли;
	Если НЕ ДопПараметры.Свойство("Склад") Тогда
		ДопПараметры.Вставить("Склад", Неопределено);
	КонецЕсли;
	Если НЕ ДопПараметры.Свойство("КоличествоМест") Тогда
		ДопПараметры.Вставить("КоличествоМест", 0);
	КонецЕсли;
	Если НЕ ДопПараметры.Свойство("Вес") Тогда
		ДопПараметры.Вставить("Вес", 0);
	КонецЕсли;
	Если НЕ ДопПараметры.Свойство("Объем") Тогда
		ДопПараметры.Вставить("Объем", 0);
	КонецЕсли;
	Если НЕ ДопПараметры.Свойство("КоличествоМестДни") Тогда
		ДопПараметры.Вставить("КоличествоМестДни", 0);
	КонецЕсли;
	Если НЕ ДопПараметры.Свойство("ВесДни") Тогда
		ДопПараметры.Вставить("ВесДни", 0);
	КонецЕсли;
	Если НЕ ДопПараметры.Свойство("ОбъемДни") Тогда
		ДопПараметры.Вставить("ОбъемДни", 0);
	КонецЕсли;
	Если НЕ ДопПараметры.Свойство("ДопВыработка") Тогда
		ДопПараметры.Вставить("ДопВыработка", Ложь);
	КонецЕсли;
	
	стрПоиска = Новый Структура("Заказ, ПараметрВыработки", ДопПараметры.Заказ, ПараметрВыработки);
	Если ДопПараметры.ТипПункта <> Неопределено Тогда 
		стрПоиска.Вставить("ТипПункта", ДопПараметры.ТипПункта);
	ИначеЕсли ДопПараметры.ТипТочкиМаршрута <> Неопределено Тогда 
		стрПоиска.Вставить("ТипТочкиМаршрута", ДопПараметры.ТипТочкиМаршрута);
	ИначеЕсли ДопПараметры.ВидУпаковки <> Неопределено Тогда
		стрПоиска.Вставить("ВидУпаковки", ДопПараметры.ВидУпаковки);
	ИначеЕсли ДопПараметры.ТипКонтейнера <> Неопределено Тогда
		стрПоиска.Вставить("ТипКонтейнера", ДопПараметры.ТипКонтейнера);
	КонецЕсли;
	Если ДопПараметры.ВидСкладскойОперации <> Неопределено Тогда
		стрПоиска.Вставить("ВидСкладскойОперации", ДопПараметры.ВидСкладскойОперации);
	КонецЕсли;
	
	ДобавлятьНовуюСтроку = Ложь;
	Если ПараметрВыработки = Справочники.уатПараметрыВыработки.СкладскаяОбработка Тогда
		// Каждую строку нужно обрабатывать отдельно
		ДобавлятьНовуюСтроку = Истина;
	КонецЕсли;	
	
	Если Не ДобавлятьНовуюСтроку Тогда
		мсвСтрокиПоиска = ТаблицаВыработки.НайтиСтроки(стрПоиска);
		ДобавлятьНовуюСтроку = (мсвСтрокиПоиска.Количество() = 0);
	КонецЕсли;
	
	Если ДобавлятьНовуюСтроку Тогда
		ТекСтрокаВыработки = ТаблицаВыработки.Добавить();
		ТекСтрокаВыработки.Заказ                = ДопПараметры.Заказ;
		ТекСтрокаВыработки.ПараметрВыработки    = ПараметрВыработки;
		ТекСтрокаВыработки.Количество           = 0;
		ТекСтрокаВыработки.Контрагент           = ТекСтрокаВыработки.Заказ.Контрагент;
		ТекСтрокаВыработки.ВидПеревозки         = ТекСтрокаВыработки.Заказ.ВидПеревозки;
		ТекСтрокаВыработки.НаправлениеПеревозки = ТекСтрокаВыработки.Заказ.НаправлениеПеревозки;
		ТекСтрокаВыработки.ТипПункта            = ДопПараметры.ТипПункта;
		ТекСтрокаВыработки.ТипТочкиМаршрута     = ДопПараметры.ТипТочкиМаршрута;
		ТекСтрокаВыработки.ВидУпаковки          = ДопПараметры.ВидУпаковки;
		ТекСтрокаВыработки.ТипКонтейнера        = ДопПараметры.ТипКонтейнера;
		ТекСтрокаВыработки.ВидСкладскойОперации = ДопПараметры.ВидСкладскойОперации;
		ТекСтрокаВыработки.КоличествоМест       = ДопПараметры.КоличествоМест;
		ТекСтрокаВыработки.Вес                  = ДопПараметры.Вес;
		ТекСтрокаВыработки.Объем                = ДопПараметры.Объем;
		ТекСтрокаВыработки.Склад                = ДопПараметры.Склад;
		ТекСтрокаВыработки.КоличествоМестДни    = ДопПараметры.КоличествоМестДни;
		ТекСтрокаВыработки.ВесДни               = ДопПараметры.ВесДни;
		ТекСтрокаВыработки.ОбъемДни             = ДопПараметры.ОбъемДни;
	Иначе
		ТекСтрокаВыработки = мсвСтрокиПоиска[0];
	КонецЕсли;
	
	Если ПараметрВыработки.Временный Тогда
		Если ДопПараметры.ДопВыработка Тогда
			ТекСтрокаВыработки.Количество = ТекСтрокаВыработки.Количество + Количество * 3600;
		Иначе
			ТекСтрокаВыработки.Количество = ТекСтрокаВыработки.Количество + уатОбщегоНазначения.уатВремяВСекунды(Количество);
		КонецЕсли;
	Иначе
		ТекСтрокаВыработки.Количество = ТекСтрокаВыработки.Количество + Количество;
	КонецЕсли;
	
КонецПроцедуры

Функция СтруктураКурсаВалютыСтроки(Валюта, ДатаКурса, КэшКурсов = Неопределено)
	// Кеширование используется для исключения повторного получения курса для одной и той же валюты
	Если КэшКурсов = Неопределено Тогда
		КэшКурсов = Новый Соответствие;
	КонецЕсли;
	
	СтруктураКурсаСтроки = КэшКурсов.Получить(Валюта);
	Если СтруктураКурсаСтроки = Неопределено Тогда
		СтруктураКурсаСтроки = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(Валюта, ДатаКурса);
		КэшКурсов.Вставить(Валюта, СтруктураКурсаСтроки);
	КонецЕсли;
	
	Возврат СтруктураКурсаСтроки;
КонецФункции

// Процедура - Заполнить структуру получателей печатных форм
//
// Параметры:
//  СтруктураДанныхОбъектаПечати - Структура - Структура данных получателей печатной формы
//
Процедура ЗаполнитьСтруктуруПолучателейПечатныхФорм(СтруктураДанныхОбъектаПечати) Экспорт
	
	СтруктураДанныхОбъектаПечати.ОсновнойПолучатель = "Контрагент";
	 
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Контрагент");
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("КонтактноеЛицо");
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Грузоотправитель");
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Грузополучатель");
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
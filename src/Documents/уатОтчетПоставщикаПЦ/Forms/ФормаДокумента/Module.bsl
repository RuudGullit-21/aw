
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	уатЗащищенныеФункцииСервер.уатДокументФормаЭлементаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, Объект, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Элементы.Контрагент.Видимость = НЕ Объект.АЗС.ЭтоАЗССклад;
	
	СтавкаНДСпоУмолчанию = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
		ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнаяСтавкаНДС");
	ЗаполнитьСтавкиНДССервер();
	
	уатОбщегоНазначенияСервер.НастроитьПолеПодразделение(Элементы.Подразделение, "Объект.Организация");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	уатЗащищенныеФункцииКлиент.уатДокументФормаЭлементаПриОткрытии(Отказ, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьВсегоВТЧЗаправки();
	УстановитьВидимость();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбновитьВсегоВТЧЗаправки();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если флВопросЗакрытиеФормы Тогда
		Отказ = Истина;
		Оповещ = Новый ОписаниеОповещения("ПередЗакрытиемВопрос", ЭтотОбъект);
		ПоказатьВопрос(Оповещ, "При проверке корректности заполнения документа возникли предупреждения!
			|Продолжить закрытие формы?", РежимДиалогаВопрос.ОКОтмена);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура АЗСПриИзменении(Элемент)
	Объект.Контрагент = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.АЗС, "Контрагент_Склад");
	
	ЭтоАЗСсклад = (уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.АЗС, "ЭтоАЗССклад") = Истина);
	Если Элементы.Контрагент.Видимость = ЭтоАЗССклад Тогда
		Элементы.Контрагент.Видимость = НЕ ЭтоАЗССклад;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗаправки

&НаКлиенте
Процедура ЗаправкиТСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтруктураОтбор = Новый Структура("Организация", Объект.Организация);
	уатИнтерфейсВводаТС.РеквизитТСНачалоВыбора(Элемент, Элементы.Заправки.ТекущиеДанные.ТС, ДанныеВыбора, СтандартнаяОбработка, СтруктураОтбор);
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиТСАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СтруктураОтбор = Новый Структура("Организация", Объект.Организация);
	уатИнтерфейсВводаТС.РеквизитТСАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка, СтруктураОтбор);
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтруктураОтбор = Новый Структура("Организация", Объект.Организация);
	уатИнтерфейсВводаТС.РеквизитТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка, СтруктураОтбор);
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ТекСтрока = Элементы.Заправки.ТекущиеДанные;
	ДополнительныеПараметры = Новый Структура("ЗначениеГСМДоИзменения", ТекСтрока.ГСМ);
	ОписаниеОповещенияЗакр  = Новый ОписаниеОповещения("ОписаниеОповещенияВыбораГСМ", ЭтотОбъект, ДополнительныеПараметры);
	
	уатЗащищенныеФункцииКлиент.СписокГСМдляТС(Объект.Организация, ТекСтрока.ТС,
		ПредопределенноеЗначение("Перечисление.уатГруппыГСМ.Топливо"),, Истина, ОписаниеОповещенияЗакр);
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМПриИзменении(Элемент)
	ТекСтрока = Элементы.Заправки.ТекущиеДанные;
	ЗаполнитьСтавкуНДСвТекущейСтроке(ТекСтрока);
КонецПроцедуры

// Подключаемый динамически обработчик оповещения
&НаКлиенте
Процедура ОписаниеОповещенияВыбораГСМ(Результат, ДопПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		Элементы.Заправки.ТекущиеДанные.ГСМ = Результат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ТекСтрока = Элементы.Заправки.ТекущиеДанные;
	
	СтандартнаяОбработка = Ложь;
	мсвГруппДляОтбора = Новый Массив;
	мсвГруппДляОтбора.Добавить(ПредопределенноеЗначение("Перечисление.уатГруппыГСМ.Топливо"));
	ДопПараметры = Новый Структура("ТС, Организация, УчитыватьТЖ", ТекСтрока.ТС, Объект.Организация, Истина);
	ДанныеВыбора = уатГСМ.ПолучитьСписокАвтоподбораПоляГСМ(Текст, мсвГруппДляОтбора, ДопПараметры);
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ПараметрыПолученияДанных.СтрокаПоиска = "";
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиПластиковаяКартаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Справочник.уатПластиковыеКарты.ФормаВыбора",, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОбновитьВсегоВТЧЗаправки();
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиПослеУдаления(Элемент)
	ОбновитьВсегоВТЧЗаправки();
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиСуммаПриИзменении(Элемент)
	РассчитатьСуммуНДСвТабЧасти();
	РассчитатьСуммуВсегоВстрокеТЧ(Элементы.Заправки.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиСуммаНДСПриИзменении(Элемент)
	РассчитатьСуммуВсегоВстрокеТЧ(Элементы.Заправки.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиСтавкаНДСПриИзменении(Элемент)
	РассчитатьСуммуНДСвТабЧасти();
	РассчитатьСуммуВсегоВстрокеТЧ(Элементы.Заправки.ТекущиеДанные);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ЗагрузитьЗаправки(Команда)
	ВидЗагрузкиДанныхОтПЦ = ЗначениеРеквизитаОбъекта(Объект.АЗС, "ВидЗагрузкиДанныхОтПЦ");
	Если ВидЗагрузкиДанныхОтПЦ = ПредопределенноеЗначение("Перечисление.уатВидыЗагрузкиДанныхОтПЦ.ЗагрузкаИзФайла") Тогда
		ЗагрузитьЗаправкиИзФайла();
	Иначе
		УчетнаяЗаписьПЦ = ЗначениеРеквизитаОбъекта(Объект.АЗС, "УчетнаяЗаписьПЦ");
		Если ЗначениеЗаполнено(УчетнаяЗаписьПЦ) Тогда
			ЗагрузитьЗаправкиИзAPI();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиОтметитьВсе(Команда)
	Для Каждого ТекСтрока Из Объект.Заправки Цикл
		ТекСтрока.Проверено = Истина;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиСнятьВсе(Команда)
	Для Каждого ТекСтрока Из Объект.Заправки Цикл
		ТекСтрока.Проверено = Ложь;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаправки(Команда)
	ЗаполнитьВсе();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьГСМиКарты(Команда)
	НайтиЗаполнитьГСМиКарты();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТСпоКартам(Команда)
	НайтиЗаполнитьТСпоКартам();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтавкуНДС(Команда)
	
	Если Объект.УчитыватьНДС Тогда
		ИндексСтавки = СтрЗаменить(Команда.Имя, "ЗаполнитьСтавкуНДС_", "");
		ИндексСтавки = Число(ИндексСтавки);
		
		ЗаполнитьСтавкиНДСвСтроках(ИндексСтавки);
		РассчитатьСуммуНДСвТабЧасти();
		ОбновитьВсегоВТЧЗаправки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьНалоги(Команда)
	ОбработатьИзмененияПоКнопкеНалоги(Новый ОписаниеОповещения("РедактироватьНалогиЗавершение", ЭтотОбъект), Объект.ВалютаДокумента);
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьНалогиЗавершение(Результат, ДополнительныеПараметры) Экспорт
    ОбновитьВсегоВТЧЗаправки();
КонецПроцедуры

// Процедура выполняет пересчет в табличной части документа после изменений 
// в форме "Налоги".Выполняется пересчет колонок: цена, сумма,
// сумма НДС, всего.
//
&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеНалоги(Знач Оповещение, Знач ВалютаРасчетовПередИзменением)
	
	// 1. Формируем структуру параметров для заполнения формы "Налоги".
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВалютаДокумента",		  Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("Контрагент",			  Объект.Контрагент);
	СтруктураПараметров.Вставить("Организация",			  Объект.Организация);
	СтруктураПараметров.Вставить("ДатаДокумента",		  Объект.Дата);
	СтруктураПараметров.Вставить("БылиВнесеныИзменения",  Ложь);
	СтруктураПараметров.Вставить("СуммаВключаетНДС",      Объект.СуммаВключаетНДС);
	СтруктураПараметров.Вставить("НалогообложениеНДС",	  Объект.УчитыватьНДС);
	
	Если НЕ ПравоРедактированиеДокумента() Тогда
		СтруктураПараметров.Вставить("ТолькоПросмотр", Истина);
	КонецЕсли;
	
	//ОткрытьФорму("Документ.уатЗаправкаГСМ.Форма.ФормаНалоги",СтруктураПараметров,,,,, Новый ОписаниеОповещения("ОбработатьИзмененияПоКнопкеНалогиЗавершение", ЭтотОбъект, Новый Структура("Оповещение", Оповещение)), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров,,,,,
		Новый ОписаниеОповещения("ОбработатьИзмененияПоКнопкеНалогиЗавершение", ЭтотОбъект,
		Новый Структура("ВалютаРасчетовПередИзменением, Оповещение", ВалютаРасчетовПередИзменением, Оповещение)),
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеНалогиЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Оповещение = ДополнительныеПараметры.Оповещение;
    ВалютаРасчетовПередИзменением = ДополнительныеПараметры.ВалютаРасчетовПередИзменением;
	
    // 2. Открываем форму "Налоги".
    СтруктураНалоги = Результат;
    
    // 3. Перезаполняем табличную часть "Номенклатура", если были внесены изменения в форме "Цены и Валюта".
    Если ТипЗнч(СтруктураНалоги) = Тип("Структура") И СтруктураНалоги.БылиВнесеныИзменения Тогда
		Объект.ВалютаДокумента		   = СтруктураНалоги.ВалютаДокумента;
        Объект.СуммаВключаетНДС		   = СтруктураНалоги.СуммаВключаетНДС;
        Объект.УчитыватьНДС			   = СтруктураНалоги.НалогообложениеНДС;
		
		// Пересчитываем цены по валюте.
        Если СтруктураНалоги.Свойство("ПересчитатьЦены") Тогда
            Если СтруктураНалоги.ПересчитатьЦены Тогда	
                ПересчитатьЦеныТабличнойЧастиПоВалюте(ВалютаРасчетовПередИзменением, "Заправки");
            КонецЕсли;
		КонецЕсли;
		
        // Пересчитываем сумму если изменился признак Налогообложение НДС.
        Если СтруктураНалоги.НалогообложениеНДС <> СтруктураНалоги.ПредНалогообложениеНДС Тогда
            УстановитьВидимость();
            РассчитатьСуммуНДСвТабЧасти();		
        КонецЕсли;
        
        // Пересчитываем сумму если изменился признак "Сумма включает НДС".
        Если СтруктураНалоги.СуммаВключаетНДС <> СтруктураНалоги.ПредСуммаВключаетНДС Тогда
            РассчитатьСуммуНДСвТабЧасти();
		КонецЕсли;
		
		ВывестиСуммовыеИтогиДокумента();
    КонецЕсли;
    
	Если Оповещение <> Неопределено Тогда 
		ВыполнитьОбработкуОповещения(Оповещение);
	КонецЕсли;

КонецПроцедуры // ОбработатьИзмененияПоКнопкеЦеныИВалюты()

&НаСервере
Процедура ПересчитатьЦеныТабличнойЧастиПоВалюте(ВалютаРасчетовПередИзменением, ИмяТЧ)
	уатОбщегоНазначенияСервер.ПересчитатьЦеныТабличнойЧастиПоВалюте(Объект, ВалютаРасчетовПередИзменением, ИмяТЧ);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// Функция ищет ГСМ
&НаСервереБезКонтекста
Функция НайтиГСМвБазе(мНоменклатураОтчета, мАЗС)
	
	Возврат уатЗагрузкаПЦ.НайтиГСМвБазе(мНоменклатураОтчета, мАЗС);
	
КонецФункции	

// Функция ищет карточку
&НаСервереБезКонтекста
Функция НайтиКартуВБазе(мПластиковаяКартаОтчета, Дата = Неопределено)
	
	Возврат уатЗагрузкаПЦ.НайтиКартуВБазе(мПластиковаяКартаОтчета, Дата);
	
КонецФункции	

&НаКлиенте
Процедура НайтиЗаполнитьГСМиКарты()
	КэшЗагрузкиГСМ.Очистить();
	КэшКарт.Очистить();
		
	// При первом проходе составляем таблицу ГСМ и карточек
	КолСтрок = Объект.Заправки.Количество();
	Инд = 0;
	ПредИндикатор = Неопределено;
	
	Для Каждого ТекСтрока Из Объект.Заправки Цикл
		ОбработкаПрерыванияПользователя();
		
		Инд = Инд + 1;
		ТекИндикатор = Цел(Инд / КолСтрок * 100 / 5);
		
		// найдем соответствующий ГСМ
		мсвСтрокиПоиска = КэшЗагрузкиГСМ.НайтиСтроки(Новый Структура("НоменклатураОтчета, АЗС", ТекСтрока.НоменклатураОтчета,
							Объект.АЗС));
		Если мсвСтрокиПоиска.Количество() = 0 Тогда
			ТекГСМ = НайтиГСМвБазе(ТекСтрока.НоменклатураОтчета, Объект.АЗС);
			ТекСтрока.ГСМ = ТекГСМ;
			
			НоваяСтрокаКэш = КэшЗагрузкиГСМ.Добавить();
			НоваяСтрокаКэш.НоменклатураОтчета = ТекСтрока.НоменклатураОтчета;
			НоваяСтрокаКэш.АЗС = Объект.АЗС;
			НоваяСтрокаКэш.ГСМ = ТекГСМ;
		Иначе	
			ТекСтрока.ГСМ = мсвСтрокиПоиска[0].ГСМ;
		КонецЕсли;
		
		// найдем соответствующую пластиковую карту
		мсвСтрокиПоиска = КэшКарт.НайтиСтроки(Новый Структура("ПластиковаяКартаОтчета", ТекСтрока.ПластиковаяКартаОтчета));
		Если мсвСтрокиПоиска.Количество() = 0 Тогда
			ТекКарта = НайтиКартуВБазе(ТекСтрока.ПластиковаяКартаОтчета, ТекСтрока.Дата);
			ТекСтрока.ПластиковаяКарта = ТекКарта;
			
			НоваяСтрокаКэш = КэшКарт.Добавить();
			НоваяСтрокаКэш.ПластиковаяКартаОтчета = ТекСтрока.ПластиковаяКартаОтчета;
			НоваяСтрокаКэш.ПластиковаяКарта = ТекКарта;
		Иначе	
			ТекСтрока.ПластиковаяКарта = мсвСтрокиПоиска[0].ПластиковаяКарта;
		КонецЕсли;
		
		Если ТекИндикатор <> ПредИндикатор Тогда //отображаем обновление состояния каждые 5% для ускорения вывода
			ТекстНСТР = НСтр("en='Identification of fuels and fuel cards ...';ru='Идентификация ГСМ и топливных карт ...'");
			Состояние(ТекстНСТР, Цел(Инд/КолСтрок * 100));
			ПредИндикатор = ТекИндикатор;
		КонецЕсли;

	КонецЦикла;
	
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НайтиЗаполнитьТСпоКартам()
	КэшВладельцыКарты.Очистить();
	КэшТСизПЛ.Очистить();
		
	КолСтрок = Объект.Заправки.Количество();
	Инд = 0;
	ПредИндикатор = Неопределено;
	
	Для Каждого ТекСтрока Из Объект.Заправки Цикл
		ОбработкаПрерыванияПользователя();
		
		Инд = Инд + 1;
		ТекИндикатор = Цел(Инд / КолСтрок * 100 / 5);
		
		// найдем соответствующий ТС
		мсвСтрокиПоиска = КэшВладельцыКарты.НайтиСтроки(Новый Структура("ПластиковаяКарта, Дата", ТекСтрока.ПластиковаяКарта, ТекСтрока.Дата));
		Если мсвСтрокиПоиска.Количество() = 0 Тогда
			мВладелецКарты = уатОбщегоНазначения.уатВладелецПластиковойКарты(ТекСтрока.ПластиковаяКарта, ТекСтрока.Дата);
			
			НоваяСтрокаКэш = КэшВладельцыКарты.Добавить();
			НоваяСтрокаКэш.ПластиковаяКарта = ТекСтрока.ПластиковаяКарта;
			НоваяСтрокаКэш.Владелец = мВладелецКарты;
			НоваяСтрокаКэш.Дата = ТекСтрока.Дата;
		Иначе
			мВладелецКарты = мсвСтрокиПоиска[0].Владелец;
		КонецЕсли;
			
		// если карта закреплена за ТС - то все просто
		Если ТипЗнч(мВладелецКарты) = Тип("СправочникСсылка.уатТС") Тогда
			ТекСтрока.ТС = мВладелецКарты;
		ИначеЕсли ТипЗнч(мВладелецКарты) = Тип("СправочникСсылка.Сотрудники") Тогда
			// Если за водителем - то вначале ищем п/л для водителя по дате заправки и из него берем ТС	
			мсвСтрокиПоиска = КэшТСизПЛ.НайтиСтроки(Новый Структура("Владелец, Дата", мВладелецКарты, ТекСтрока.Дата));
			Если мсвСтрокиПоиска.Количество() = 0 Тогда
				ТекСтрока.ТС = НайтиТСизПЛ(мВладелецКарты, ТекСтрока.Дата);
				
				НоваяСтрокаКэш = КэшТСизПЛ.Добавить();
				НоваяСтрокаКэш.Владелец = мВладелецКарты;
				НоваяСтрокаКэш.Дата = ТекСтрока.Дата;
				НоваяСтрокаКэш.ТС = ТекСтрока.ТС;
			Иначе
				ТекСтрока.ТС = мсвСтрокиПоиска[0].ТС;
			КонецЕсли;
		КонецЕсли;
		
		Если ТекИндикатор <> ПредИндикатор Тогда //отображаем обновление состояния каждые 5% для ускорения вывода
			ТекстНСТР = НСтр("en='Identification of vehicle by fuel cards ...';ru='Идентификация ТС по топливным картам ...'");
			Состояние(ТекстНСТР, ТекИндикатор*5, "");
			ПредИндикатор = ТекИндикатор;
		КонецЕсли;
		
	КонецЦикла;
	
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтавкиНДССервер()
	
	Для Сч = 0 По Перечисления.СтавкиНДС.Количество() - 1 Цикл
		Ставка = Перечисления.СтавкиНДС.Получить(Сч);
		
		Команда = Команды.Добавить("ЗаполнитьСтавкуНДС_" + Сч);
		Команда.Действие = "ЗаполнитьСтавкуНДС";
		Команда.ИзменяетСохраняемыеДанные = Истина;
		НоваяКнопка = Элементы.Добавить("ЗаполнитьСтавкуНДС_" + Сч, Тип("КнопкаФормы"), Элементы.ЗаправкиЗаполнитьСтавкуНДС);
		НоваяКнопка.Вид        = ВидКнопкиФормы.КнопкаКоманднойПанели;
		НоваяКнопка.ИмяКоманды = Строка("ЗаполнитьСтавкуНДС_" + Сч);
		НоваяКнопка.Заголовок  = Строка(Ставка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиТСизПЛ(мВладелецКарты, мДатаЗаправки)
	Возврат уатЗагрузкаПЦ.НайтиТСизПЛ(мВладелецКарты, мДатаЗаправки);
КонецФункции

&НаКлиенте
Процедура ЗаполнитьВсе()
	НайтиЗаполнитьГСМиКарты();
	НайтиЗаполнитьТСпоКартам();
КонецПроцедуры

// Функция возвращает обработку загрузки данных 
&НаСервере
Функция ПолучитьОбработкуЗагрузки()
	Рез = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатАЗС.ФайлВнешнейОбработки КАК Данные,
	|	уатАЗС.ИспользоватьСтандартнуюОбработкуЗагрузкиДанныхПЦ КАК ИспользоватьСтандартнуюОбработкуЗагрузкиДанныхПЦ
	|ИЗ
	|	Справочник.уатАЗС КАК уатАЗС
	|ГДЕ
	|	уатАЗС.Ссылка = &Объект";
	
	Запрос.УстановитьПараметр("Объект", Объект.АЗС);
	
	РезультатЗапроса = Запрос.Выполнить().Выбрать();
	Если РезультатЗапроса.Следующий() Тогда
		ИмяФайлаОбработкиЗагрузки = ПолучитьИмяВременногоФайла(".epf");
		
		ОписаниеЗащитыОтОпасныхДействий = Неопределено;
		// Обход ошибки обычного приложения
		Если ТекущийРежимЗапуска() <> РежимЗапускаКлиентскогоПриложения.ОбычноеПриложение Тогда
			Попытка
				ОписаниеЗащитыОтОпасныхДействий = Новый ("ОписаниеЗащитыОтОпасныхДействий");
				ОписаниеЗащитыОтОпасныхДействий.ПредупреждатьОбОпасныхДействиях = Ложь;
			Исключение
				// Исключение возможно на предыдущих версиях платформы без механизма
				// защиты от опасных действий
			КонецПопытки;
		КонецЕсли;
		
		Попытка
			Если РезультатЗапроса.ИспользоватьСтандартнуюОбработкуЗагрузкиДанныхПЦ Тогда
				ТекДанные = ПолучитьОбщийМакет("уатСтандартнаяОбработкаЗагрузкиДанныхПЦ");
			Иначе
				ТекДанные = РезультатЗапроса.Данные.Получить();
				Если НЕ ЗначениеЗаполнено(ТекДанные) Тогда
					ТекДанные = ПолучитьОбщийМакет("уатСтандартнаяОбработкаЗагрузкиДанныхПЦ");
				КонецЕсли;
			КонецЕсли;
			ТекДанные.Записать(ИмяФайлаОбработкиЗагрузки);
			
			Если ОписаниеЗащитыОтОпасныхДействий = Неопределено Тогда
				// Предыдущие версии платформы без механизма защиты
				МенеджерОбработки = ВнешниеОбработки.Создать(ИмяФайлаОбработкиЗагрузки, Ложь);
			Иначе
				МенеджерОбработки = ВнешниеОбработки.Создать(
					ВнешниеОбработки.Подключить(
						ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяФайлаОбработкиЗагрузки)),
						, 
						Ложь, 
						ОписаниеЗащитыОтОпасныхДействий
					)
				);
			КонецЕсли;
			
			ПолноеИмя = МенеджерОбработки.Метаданные().ПолноеИмя();
			Рез = ПолноеИмя;
			
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		КонецПопытки;
		
		// удаление врем. файла
		ВремФайл = Новый Файл(ИмяФайлаОбработкиЗагрузки);
		Если ВремФайл.Существует() Тогда
			Попытка
				УдалитьФайлы(ВремФайл);
			Исключение
				ТекстНСТР = НСтр("en='Failed to remove temporary file of data processor';ru='Не удалось удалить временный файл обработки'");
				ТекстНСТР = ТекстНСТР + Символы.ПС + ОписаниеОшибки();
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
			КонецПопытки;
		КонецЕсли;
			
	КонецЕсли;
	
	Возврат Рез;
КонецФункции // ПолучитьОбработкуЗагрузки

&НаКлиенте
Процедура ЗагрузитьЗаправкиИзФайлаВопрос(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.Заправки.Очистить();
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
	Иначе
		Возврат;
    КонецЕсли;
	
	ЗагрузитьЗаправкиИзФайлаПродолжение(ДополнительныеПараметры.ОбработкаЗагрузкиПолноеИмя);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьЗаправкиИзAPIВопрос(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.Заправки.Очистить();
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
	Иначе
		Возврат;
	КонецЕсли;
	
	ЗагрузитьЗаправкиИзAPIПродолжение();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьЗаправкиИзФайлаПродолжение(ОбработкаЗагрузкиПолноеИмя)
	Попытка
		ПараметрыОткрытия = Новый Структура();
		ПараметрыОткрытия.Вставить("ПрофильОбменаСПЦ", ЗначениеРеквизитаОбъекта(Объект.АЗС, "ПрофильОбменаСПЦ"));
		ОткрытьФорму(ОбработкаЗагрузкиПолноеИмя + ".Форма",ПараметрыОткрытия,ЭтотОбъект,,,, Новый ОписаниеОповещения("ЗагрузитьЗаправкиИзФайлаЗавершение", ЭтотОбъект),
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Исключение
		ТекстНСТР = НСтр("en='Error while filling tabular section ""Refueling"": ';ru='Ошибка при заполнении табличной части ""Заправки"": '");
		ТекстНСТР = ТекстНСТР + ОписаниеОшибки();
		ПоказатьПредупреждение(Неопределено, ТекстНСТР);
		Возврат;
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьЗаправкиИзAPIПродолжение()
	Попытка
		ТекущийПериод = Новый СтандартныйПериод;
		Обработчик    = Новый ОписаниеОповещения("ЗагрузитьЗаправкиИзAPIЗавершение", ЭтотОбъект, Новый Структура("АЗС", Объект.АЗС));
		Диалог = Новый ДиалогРедактированияСтандартногоПериода;
		Диалог.Период = ТекущийПериод;
		Диалог.Показать(Обработчик);
	Исключение
		ТекстНСТР = НСтр("en='Error while filling tabular section ""Refueling"": ';ru='Ошибка при заполнении табличной части ""Заправки"": '");
		ТекстНСТР = ТекстНСТР + ОписаниеОшибки();
		ПоказатьПредупреждение(Неопределено, ТекстНСТР);
		Возврат;
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьЗаправкиИзAPIЗавершение(Период, ДопПараметры) Экспорт
	
	Если НЕ ЗначениеЗаполнено(Период) Тогда
		Возврат;
	КонецЕсли;
	
	ДатаНачала    = НачалоДня(Период.ДатаНачала);
	ДатаОкончания = НачалоДня(Период.ДатаОкончания);
	РазницаВМесяцах = (Год(ДатаОкончания) - Год(ДатаНачала))*12 +
		Месяц(ДатаОкончания) - Месяц(ДатаНачала) - ?(День(ДатаОкончания) >= День(ДатаНачала), 0, 1);
	Лет = ЦЕЛ(РазницаВМесяцах / 12);
	РазницаВМесяцах = РазницаВМесяцах - Лет * 12;

	
	УчетнаяЗаписьПЦ     = ЗначениеРеквизитаОбъекта(ДопПараметры.АЗС, "УчетнаяЗаписьПЦ");
	ВнешняяСистема      = ЗначениеРеквизитаОбъекта(УчетнаяЗаписьПЦ, "ВнешняяСистема");
	
	Если (ВнешняяСистема = ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.Роснефть") 
		И РазницаВМесяцах > 0) Тогда
		ТекстНстр = Нстр("ru = 'Длина периода не должна превышать календарный месяц.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНстр);
		Возврат;
	КонецЕсли;
	
	Если (ВнешняяСистема <> ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.Роснефть") 
		И РазницаВМесяцах > 2) Тогда
		ТекстНстр = Нстр("ru = 'Длина периода не должна превышать 3 календарных месяцев.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНстр);
		Возврат;
	КонецЕсли;

	СохранятьОтчетВФайл = ЗначениеРеквизитаОбъекта(УчетнаяЗаписьПЦ, "СохранятьОтчетВКаталог");
	Если СохранятьОтчетВФайл Тогда
		КаталогФайлаДанных = ЗначениеРеквизитаОбъекта(УчетнаяЗаписьПЦ, "КаталогФайлаДанных");
		ИмяФайлаДанных     = КаталогФайлаДанных + "\" + НСтр("ru = 'ТранзакционныйОтчетЗаПериод'") + Формат(ТекущаяДата(), "ДФ='ddMMyyyyHHmmss'") + ".xlsx";
		Если НЕ ЗначениеЗаполнено(КаталогФайлаДанных) Тогда
			ПараметрыОткрытия = Новый Структура("Период, АЗС, УчетнаяЗаписьПЦ, ИмяФайлаДанных", Период, ДопПараметры.АЗС, УчетнаяЗаписьПЦ, ИмяФайлаДанных);
			Обработчик        = Новый ОписаниеОповещения("ПоказатьДиалогВыбораФайла", ЭтотОбъект, ПараметрыОткрытия);
			НачатьПодключениеРасширенияРаботыСФайлами(Обработчик);
		Иначе
			мсвЗагруженныеДанные = Новый Массив;
			ЗагрузитьЗаправкиИзAPIЗавершениеСервер(Период, ДопПараметры.АЗС, УчетнаяЗаписьПЦ, мсвЗагруженныеДанные, ИмяФайлаДанных, ДопПараметры);
			ЗагрузитьЗаправкиИзФайлаЗавершение(мсвЗагруженныеДанные, Неопределено);
		КонецЕсли;
	Иначе
		мсвЗагруженныеДанные = Новый Массив;
		ЗагрузитьЗаправкиИзAPIЗавершениеСервер(Период, ДопПараметры.АЗС, УчетнаяЗаписьПЦ, мсвЗагруженныеДанные,, ДопПараметры);
		ЗагрузитьЗаправкиИзФайлаЗавершение(мсвЗагруженныеДанные, Неопределено);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СохранитьОтчетПослеВыбораФайла(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	мсвЗагруженныеДанные = Новый Массив;
	ЗагрузитьЗаправкиИзAPIЗавершениеСервер(ДополнительныеПараметры.Период,
		ДополнительныеПараметры.АЗС,
		ДополнительныеПараметры.УчетнаяЗаписьПЦ, мсвЗагруженныеДанные, ВыбранныеФайлы[0], ДополнительныеПараметры);
	ЗагрузитьЗаправкиИзФайлаЗавершение(мсвЗагруженныеДанные, Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьЗаправкиИзAPIЗавершениеСервер(Период, АЗС, УчетнаяЗаписьПЦ, мсвЗагруженныеДанные, ВременныйФайл = "", ДопПараметры)
	
	СтруктураПараметровУчетнойЗаписи = уатЗагрузкаПЦ.ПолучитьСтруктуруПараметровДляРаботыСПЦ(УчетнаяЗаписьПЦ);
	СтруктураПараметровУчетнойЗаписи.Вставить("АЗС", АЗС);
	
	уатЗагрузкаПЦ.ЗагрузитьЗаправкиИзAPI(Период, мсвЗагруженныеДанные, ВременныйФайл, СтруктураПараметровУчетнойЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьЗаправкиИзФайлаЗавершение(мсвЗагруженныеДанные, ДополнительныеПараметры) Экспорт
	
	УчетнаяЗаписьПЦ = ЗначениеРеквизитаОбъекта(Объект.АЗС, "УчетнаяЗаписьПЦ");
	
	Если НЕ ЗначениеЗаполнено(УчетнаяЗаписьПЦ) Тогда
		СтруктураПараметровУчетнойЗаписи = Новый Структура("РазбиватьНаОтделы", Ложь);
		СтруктураПараметровУчетнойЗаписи.Вставить("АЗС",           Объект.АЗС);
		СтруктураПараметровУчетнойЗаписи.Вставить("Организация",   Объект.Организация);
		СтруктураПараметровУчетнойЗаписи.Вставить("Подразделение", Объект.Подразделение);
		СтруктураПараметровУчетнойЗаписи.Вставить("Ответственный", Объект.Ответственный);
		СтруктураПараметровУчетнойЗаписи.Вставить("ВнешняяСистема");

	Иначе
		СтруктураПараметровУчетнойЗаписи = уатЗагрузкаПЦ.ПолучитьСтруктуруПараметровДляРаботыСПЦ(УчетнаяЗаписьПЦ);
		СтруктураПараметровУчетнойЗаписи.Вставить("АЗС", Объект.АЗС);
	КонецЕсли;
	
	мсвЗаправок = Новый Массив();
	уатЗагрузкаПЦ.СоздатьЗаправкиВОтчетеПЦ(СтруктураПараметровУчетнойЗаписи, мсвЗагруженныеДанные,,, Объект, мсвЗаправок);
	
	Для Каждого ТекСтрока Из мсвЗаправок Цикл
		НоваяЗаправка = Объект.Заправки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗаправка, ТекСтрока);
	КОнецЦикла;
	Объект.Заправки.Сортировать("Дата, ПластиковаяКартаОтчета, Количество УБЫВ");
	ОбновитьВсегоВТЧЗаправки();
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВсегоВТЧЗаправки()
	Для Каждого СтрокаТабличнойЧасти Из Объект.Заправки Цикл
		РассчитатьСуммуВсегоВстрокеТЧ(СтрокаТабличнойЧасти);
	КонецЦикла;
	ВывестиСуммовыеИтогиДокумента();
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуВсегоВстрокеТЧ(СтрокаТабличнойЧасти)
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма
		+ ?(Объект.УчитыватьНДС И НЕ Объект.СуммаВключаетНДС, СтрокаТабличнойЧасти.СуммаНДС, 0);
КонецПроцедуры

&НаСервере
Процедура РассчитатьСуммуНДСвТабЧасти()
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	Для Каждого ТекСтрока Из Объект.Заправки Цикл
		уатОбщегоНазначенияТиповыеСервер.уатРассчитатьСуммуНДСТабЧасти(ТекСтрока, ДокОбъект);
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСтавкуНДСвТекущейСтроке(ТекСтрока)
	Если Объект.УчитыватьНДС Тогда
		Если НЕ ЗначениеЗаполнено(ТекСтрока.СтавкаНДС) Тогда
			СтавкаНДС = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(
				ТекСтрока.ГСМ, "СтавкаНДС");
			ТекСтрока.СтавкаНДС = ?(ЗначениеЗаполнено(СтавкаНДС), СтавкаНДС, СтавкаНДСпоУмолчанию);
		КонецЕсли;
		РассчитатьСуммуНДСвТабЧасти();
		ОбновитьВсегоВТЧЗаправки();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтавкиНДСвСтроках(ИндексСтавки)
	Для Каждого ТекСтрока Из Объект.Заправки Цикл
		ТекСтрока.СтавкаНДС = Перечисления.СтавкиНДС.Получить(ИндексСтавки);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ВывестиСуммовыеИтогиДокумента()
	НДСВсего = Объект.Заправки.Итог("СуммаНДС");
	СуммаДокумента = Объект.Заправки.Итог("Сумма");
	Если Объект.УчитыватьНДС И НЕ Объект.СуммаВключаетНДС Тогда
		СуммаДокумента = СуммаДокумента + НДСВсего;
	КонецЕсли;
	
	Если Объект.УчитыватьНДС Тогда 
		Если Объект.СуммаВключаетНДС Тогда 
			НадписьВсегоНДС = НСтр("en='VAT amount';ru='НДС в сумме'") + ":";
		Иначе 
			НадписьВсегоНДС = НСтр("en='VAT from above';ru='НДС сверху'") + ":";
		КонецЕсли;
		НадписьВсего = НСтр("en='Total including VAT';ru='Всего с НДС'");
		Элементы.СтраницыИтогов.ТекущаяСтраница = Элементы.ИтогоУчетНДС;
	Иначе 
		НадписьВсего = НСтр("en='Total';ru='Всего'");
		Элементы.СтраницыИтогов.ТекущаяСтраница = Элементы.ИтогоБезНДС;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимость()
	Элементы.ЗаправкиЗаполнитьСтавкуНДС.Доступность	 = Объект.УчитыватьНДС;
	Элементы.ЗаправкиСтавкаНДС.Видимость			 = Объект.УчитыватьНДС;
	Элементы.ЗаправкиСуммаНДС.Видимость				 = Объект.УчитыватьНДС;
	Элементы.ЗаправкиВсего.Видимость 				 = Объект.УчитыватьНДС;
	ВывестиСуммовыеИтогиДокумента();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПравоРедактированиеДокумента()
	Рез = ПравоДоступа("Редактирование", Метаданные.Документы.уатОтчетПоставщикаПЦ);
	Возврат Рез;
КонецФункции

&НаКлиенте
Процедура ПередЗакрытиемВопрос(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.ОК Тогда
		флВопросЗакрытиеФормы = Ложь;
		Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьЗаправкиИзФайла()
	
	ОбработкаЗагрузкиПолноеИмя = ПолучитьОбработкуЗагрузки();
	
	Если НЕ ЗначениеЗаполнено(ОбработкаЗагрузкиПолноеИмя) Тогда
		ТекстНСТР = НСтр("en='Incorrect name of the processing for loading of gas station data!"
		"To correct, make changes to catalog ""Gas station""';ru='Неправильное имя обработки для загрузки данных АЗС!"
		"Для исправления внесите изменения в справочник ""АЗС""'");
		ПоказатьПредупреждение(Неопределено, ТекстНСТР);
		Возврат;				
	КонецЕсли;
	
	Если Объект.Заправки.Количество() > 0 Тогда
		ТекстНСТР = НСтр("en='Clear refueling table before download?';ru='Очистить таблицу заправок перед загрузкой?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗагрузитьЗаправкиИзФайлаВопрос", ЭтотОбъект,
		Новый Структура("ОбработкаЗагрузкиПолноеИмя", ОбработкаЗагрузкиПолноеИмя)),
		ТекстНСТР, РежимДиалогаВопрос.ДаНетОтмена);
		Возврат;
	КонецЕсли;
	
	ЗагрузитьЗаправкиИзФайлаПродолжение(ОбработкаЗагрузкиПолноеИмя);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьЗаправкиИзAPI()
	
	Если Объект.Заправки.Количество() > 0 Тогда
		ТекстНСТР = НСтр("en='Clear refueling table before download?';ru='Очистить таблицу заправок перед загрузкой?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗагрузитьЗаправкиИзAPIВопрос", ЭтотОбъект),
		ТекстНСТР, РежимДиалогаВопрос.ДаНетОтмена);
		Возврат;
	КонецЕсли;
	
	ЗагрузитьЗаправкиИзAPIПродолжение();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита);
КонецФункции

&НаКлиенте
Процедура ЗаправкиТСПриИзменении(Элемент)
	ТекСтрока = Элементы.Заправки.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекСтрока.ТС)
		И ТипЗнч(ТекСтрока.ТС) = Тип("СправочникСсылка.уатТС")
		И уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрока.ТС, "ПринадлежностьТС")
		= ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное") Тогда
		МестонахождениеТС = уатОбщегоНазначения.МестонахождениеТС(ТекСтрока.ТС, ТекСтрока.Дата);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДиалогВыбораФайла(Подключено, ДополнительныеПараметры) Экспорт
	
	Если НЕ Подключено Тогда
		
		Оповещение = Новый ОписаниеОповещения("НачатьУстановкуРасширенияРаботыСФайламиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ТекстСообщения = НСтр("ru = 'Для продолжении работы необходимо установить расширение для веб-клиента ""1С:Предприятие"". Установить?'");
		ПоказатьВопрос(Оповещение, ТекстСообщения, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбораФайла.ПолноеИмяФайла = ДополнительныеПараметры.ИмяФайлаДанных;
	ДиалогВыбораФайла.Фильтр = НСтр("en = 'Excel book'; ru = 'Книга Excel'") + " (*.xlsx)|*.xlsx";
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	ДиалогВыбораФайла.Заголовок = НСтр("ru = 'Выберите файл'; en = 'Select file'");
	
	ДопПараметры = Новый Структура();
	ДопПараметры.Вставить("Период",          ДополнительныеПараметры.Период);
	ДопПараметры.Вставить("АЗС",             ДополнительныеПараметры.АЗС);
	ДопПараметры.Вставить("УчетнаяЗаписьПЦ", ДополнительныеПараметры.УчетнаяЗаписьПЦ);
	Оповещение = Новый ОписаниеОповещения("СохранитьОтчетПослеВыбораФайла", ЭтотОбъект, ДопПараметры);
	
	ДиалогВыбораФайла.Показать(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура НачатьУстановкуРасширенияРаботыСФайламиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		НачатьУстановкуРасширенияРаботыСФайлами();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

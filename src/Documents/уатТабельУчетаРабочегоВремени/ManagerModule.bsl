#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

	
#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки	 - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	Настройки.ПриПолученииСлужебныхРеквизитов = Ложь;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.Печать

// Заполняет список команд печати.
//
// Параметры:
//  КомандыПечати	 - ТаблицаЗначений	 - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатТабельУчетаРабочегоВремени";
	КомандаПечати.Идентификатор = "ФормаТ13";
	КомандаПечати.Представление = НСтр("en='Form T13';ru='Форма Т13'");
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр).
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной
//                                                            параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной
//                                            параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ФормаТ13") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ФормаТ13",
			"Форма Т13", ПечатьТабеля(МассивОбъектов, ОбъектыПечати));
			
	КонецЕсли;
	
	уатОбщегоНазначенияСервер.УстановитьРедактированиеПечатныхФормДокумента(КоллекцияПечатныхФорм);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.УправлениеДоступом

// Позволяет переопределить ограничение, указанное в модуле менеджера объекта метаданных.
//
// Параметры:
//  Ограничение - Структура:
//    * Текст                             - Строка - ограничение доступа для пользователей.
//                                          Если пустая строка, значит, доступ разрешен.
//    * ТекстДляВнешнихПользователей      - Строка - ограничение доступа для внешних пользователей.
//                                          Если пустая строка, значит, доступ запрещен.
//    * ПоВладельцуБезЗаписиКлючейДоступа - Неопределено - определить автоматически.
//                                        - Булево - если Ложь, то всегда записывать ключи доступа,
//                                          если Истина, тогда не записывать ключи доступа,
//                                          а использовать ключи доступа владельца (требуется,
//                                          чтобы ограничение было строго по объекту-владельцу).
//   * ПоВладельцуБезЗаписиКлючейДоступаДляВнешнихПользователей - Неопределено, Булево - также
//                                          как у параметра ПоВладельцуБезЗаписиКлючейДоступа.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Подразделение)";
	
	Ограничение.ТекстДляВнешнихПользователей = Ограничение.Текст;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

#Область ПроцедурыЗаполнения

// Возвращает выборку из запроса с полями
//
// Параметры:
//  ДанныеТабеля		 - 	 - 
//  СписокСотрудников	 - 	 - 
// 
// Возвращаемое значение:
//  Структура с полями:
//  - Сотрудник,
//  - Дата,
//  - ВидУчетаВремени,
//  - Дни,
//  - Часы
//
Функция ДанныеОВремениСотрудников(ДанныеТабеля, СписокСотрудников = Неопределено) Экспорт
	
	// таблица-результат, в конце потребуется преобразовать её в выборку запроса
	тблРез = Новый ТаблицаЗначений;
	тблРез.Колонки.Добавить("Сотрудник", Новый ОписаниеТипов("СправочникСсылка.Сотрудники"));
	тблРез.Колонки.Добавить("ВидУчетаВремени", Новый ОписаниеТипов("СправочникСсылка.уатВидыИспользованияРабочегоВремени"));
	тблРез.Колонки.Добавить("Дата", Новый ОписаниеТипов("Дата"));
	тблРез.Колонки.Добавить("Часы", Новый ОписаниеТипов("Число"));
	тблРез.Колонки.Добавить("ПриоритетВидаВремени", Новый ОписаниеТипов("Число"));
	
	// получаем таблицу РН "Рабочее время" с добавленной аналитикой Подразделение
	тблРабочееВремяПоПодразделениям = уатОбщегоНазначения.РабочееВремяСотрудниковПоПодразделениям(
		ДанныеТабеля.ДатаНачалаПериода, КонецДня(ДанныеТабеля.ДатаОкончанияПериода), СписокСотрудников, ДанныеТабеля.Организация);
	Если ЗначениеЗаполнено(ДанныеТабеля.Подразделение) Тогда	
		тблРабочееВремяПоПодразделениям.Свернуть("ВидИспользованияРабочегоВремени, ДатаРаботы, Сотрудник, Подразделение", "ВремяОборот");
	Иначе
		тблРабочееВремяПоПодразделениям.Свернуть("ВидИспользованияРабочегоВремени, ДатаРаботы, Сотрудник", "ВремяОборот");
	КонецЕсли;
	
	// Получаем кадровую историю для отбора по подразделению,
	// графики работы нужны для определения выходных (нерабочих) дней
	ЗапросКадроваяИстория = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатКадроваяИсторияСотрудников.Период КАК НачалоПериода,
	|	уатКадроваяИсторияСотрудников.Сотрудник КАК Сотрудник,
	|	уатКадроваяИсторияСотрудников.Подразделение КАК Подразделение,
	|	уатКадроваяИсторияСотрудников.ГрафикРаботы КАК ГрафикРаботы,
	|	уатКадроваяИсторияСотрудников.Организация КАК Организация
	|ИЗ
	|	РегистрСведений.уатКадроваяИсторияСотрудников КАК уатКадроваяИсторияСотрудников
	|ГДЕ
	|	(&мсвСотрудникиНеопределено
	|			ИЛИ уатКадроваяИсторияСотрудников.Сотрудник В (&мсвСотрудники))
	|	И уатКадроваяИсторияСотрудников.Период <= &ДатаКон
	|	И (уатКадроваяИсторияСотрудников.Сотрудник.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ уатКадроваяИсторияСотрудников.Сотрудник.ДатаУвольнения > &ДатаНач)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Сотрудник,
	|	НачалоПериода");
	ЗапросКадроваяИстория.УстановитьПараметр("ДатаНач", ДанныеТабеля.ДатаНачалаПериода);
	ЗапросКадроваяИстория.УстановитьПараметр("ДатаКон", КонецДня(ДанныеТабеля.ДатаОкончанияПериода));
	ЗапросКадроваяИстория.УстановитьПараметр("мсвСотрудники", СписокСотрудников);
	ЗапросКадроваяИстория.УстановитьПараметр("мсвСотрудникиНеопределено", СписокСотрудников = Неопределено);
	ЗапросКадроваяИстория.УстановитьПараметр("Организация", ДанныеТабеля.Организация);
	тблКадроваяИстория = ЗапросКадроваяИстория.Выполнить().Выгрузить();
		
	// Заполнение концов интервалов кадровой истории и одновременно отбор сотрудников,
	// которые работали в организации и подразделении Табеля за период Табеля
	мсвСотрудники = Новый Массив;
	мсвГрафики = Новый Массив;
	тблКадроваяИстория.Колонки.Добавить("КонецПериода", Новый ОписаниеТипов("Дата"));
	Для Сч = 0 По тблКадроваяИстория.Количество()-1 Цикл
		ТекСтрока = тблКадроваяИстория[Сч];
		Если Сч = тблКадроваяИстория.Количество()-1 Тогда
			СледСтрока = Неопределено;
		Иначе
			СледСтрока = тблКадроваяИстория[Сч+1];
		КонецЕсли;
		
		Если СледСтрока <> Неопределено И СледСтрока.Сотрудник = ТекСтрока.Сотрудник Тогда
			ТекСтрока.КонецПериода = СледСтрока.НачалоПериода - 24*3600;
		КонецЕсли;
		
		// период кадровой истории, пересекающийся с периодом табеля
		Если ТекСтрока.Организация = ДанныеТабеля.Организация
			И (НЕ ЗначениеЗаполнено(ДанныеТабеля.Подразделение) ИЛИ ТекСтрока.Подразделение = ДанныеТабеля.Подразделение)
			И ТекСтрока.НачалоПериода <= ДанныеТабеля.ДатаОкончанияПериода
			И (ТекСтрока.КонецПериода = '00010101' ИЛИ ТекСтрока.КонецПериода >= ДанныеТабеля.ДатаНачалаПериода) Тогда
			
			Если мсвСотрудники.Найти(ТекСтрока.Сотрудник) = Неопределено Тогда
				мсвСотрудники.Добавить(ТекСтрока.Сотрудник);
			КонецЕсли;
			Если мсвГрафики.Найти(ТекСтрока.ГрафикРаботы) = Неопределено Тогда
				мсвГрафики.Добавить(ТекСтрока.ГрафикРаботы);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// получаем графики работы сотрудников за период табеля для учёта выходных дней
	ЗапросГрафикиВыходные = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	КалендарныеГрафики.Календарь КАК ГрафикРаботы,
	|	КалендарныеГрафики.ДатаГрафика КАК ДатаГрафика
	|ИЗ
	|	РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	|ГДЕ
	|	КалендарныеГрафики.Календарь В (&мсвГрафики)
	|	И КалендарныеГрафики.ДатаГрафика МЕЖДУ &ДатаНач И &ДатаКон
	|	И НЕ КалендарныеГрафики.ДеньВключенВГрафик");
	ЗапросГрафикиВыходные.УстановитьПараметр("ДатаНач", ДанныеТабеля.ДатаНачалаПериода);
	ЗапросГрафикиВыходные.УстановитьПараметр("ДатаКон", КонецДня(ДанныеТабеля.ДатаОкончанияПериода));
	ЗапросГрафикиВыходные.УстановитьПараметр("мсвГрафики", мсвГрафики);
	тблГрафикиВыходные = ЗапросГрафикиВыходные.Выполнить().Выгрузить();
	
	// Главный цикл: матрица Сотрудник-ДеньМесяца, в каждой ячейке информация о часах, виде времени, выходном дне
	ТекДата = ДанныеТабеля.ДатаНачалаПериода;
	Пока ТекДата <= ДанныеТабеля.ДатаОкончанияПериода Цикл
		Для Каждого ТекСотрудник Из мсвСотрудники Цикл
			Если ЗначениеЗаполнено(ДанныеТабеля.Подразделение) Тогда
				СтруктураПоиска = Новый Структура("ДатаРаботы, Сотрудник, Подразделение", ТекДата, ТекСотрудник, ДанныеТабеля.Подразделение);
			Иначе
				СтруктураПоиска = Новый Структура("ДатаРаботы, Сотрудник", ТекДата, ТекСотрудник);
			КонецЕсли;
			мсвСтрокиРабВремя = тблРабочееВремяПоПодразделениям.НайтиСтроки(СтруктураПоиска);
			
			// ночные часы
			ТекНочноеВремя = 0;
			Для Каждого ТекСтрокаПоиск Из мсвСтрокиРабВремя Цикл
				Если ТекСтрокаПоиск.ВидИспользованияРабочегоВремени = Справочники.уатВидыИспользованияРабочегоВремени.РаботаНочныеЧасы Тогда
					ТекНочноеВремя = ТекНочноеВремя + ТекСтрокаПоиск.ВремяОборот;
				КонецЕсли;
			КонецЦикла;
						
			// рабочие дни
			Для Каждого ТекСтрокаПоиск Из мсвСтрокиРабВремя Цикл
				НоваяСтрока = тблРез.Добавить();
				НоваяСтрока.Дата = ТекДата;
				НоваяСтрока.Сотрудник = ТекСотрудник;
				НоваяСтрока.ВидУчетаВремени = ТекСтрокаПоиск.ВидИспользованияРабочегоВремени;
				
				Если ТекСтрокаПоиск.ВидИспользованияРабочегоВремени = Справочники.уатВидыИспользованияРабочегоВремени.Явка
					ИЛИ ТекСтрокаПоиск.ВидИспользованияРабочегоВремени = Справочники.уатВидыИспользованияРабочегоВремени.ВыходныеДни
					ИЛИ ТекСтрокаПоиск.ВидИспользованияРабочегоВремени = Справочники.уатВидыИспользованияРабочегоВремени.Праздники Тогда
					
					НоваяСтрока.Часы = (ТекСтрокаПоиск.ВремяОборот - ТекНочноеВремя)/3600;
				ИначеЕсли ТекСтрокаПоиск.ВремяОборот = 24*3600 Тогда
					НоваяСтрока.Часы = 0;
				Иначе
					НоваяСтрока.Часы = ТекСтрокаПоиск.ВремяОборот/3600;
				КонецЕсли;
								
				Если ТекСтрокаПоиск.ВидИспользованияРабочегоВремени = Справочники.уатВидыИспользованияРабочегоВремени.Явка
					ИЛИ ТекСтрокаПоиск.ВидИспользованияРабочегоВремени = Справочники.уатВидыИспользованияРабочегоВремени.ВыходныеДни
					ИЛИ ТекСтрокаПоиск.ВидИспользованияРабочегоВремени = Справочники.уатВидыИспользованияРабочегоВремени.Праздники Тогда
					НоваяСтрока.ПриоритетВидаВремени = 1;
				ИначеЕсли ТекСтрокаПоиск.ВидИспользованияРабочегоВремени = Справочники.уатВидыИспользованияРабочегоВремени.РаботаВечерниеЧасы Тогда
					НоваяСтрока.ПриоритетВидаВремени = 2;
				ИначеЕсли ТекСтрокаПоиск.ВидИспользованияРабочегоВремени = Справочники.уатВидыИспользованияРабочегоВремени.РаботаНочныеЧасы Тогда
					НоваяСтрока.ПриоритетВидаВремени = 3;
				ИначеЕсли ТекСтрокаПоиск.ВидИспользованияРабочегоВремени = Справочники.уатВидыИспользованияРабочегоВремени.Сверхурочные Тогда
					НоваяСтрока.ПриоритетВидаВремени = 4;
				Иначе
					НоваяСтрока.ПриоритетВидаВремени = 5;
				КонецЕсли;
			КонецЦикла;
			
			// выходные дни
			ТекГрафик = Неопределено;
			Если ЗначениеЗаполнено(ДанныеТабеля.Подразделение) Тогда
				СтруктураПоиска = Новый Структура("Сотрудник, Подразделение", ТекСотрудник, ДанныеТабеля.Подразделение);
			Иначе
				СтруктураПоиска = Новый Структура("Сотрудник", ТекСотрудник);
			КонецЕсли;
			мсвСтрокиКадроваяИстория = тблКадроваяИстория.НайтиСтроки(СтруктураПоиска);
			Для Каждого ТекСтрокаКадроваяИстория Из мсвСтрокиКадроваяИстория Цикл
				Если ТекСтрокаКадроваяИстория.НачалоПериода <= ТекДата
					И (ТекСтрокаКадроваяИстория.КонецПериода >= ТекДата ИЛИ ТекСтрокаКадроваяИстория.КонецПериода = '00010101') Тогда
					ТекГрафик = ТекСтрокаКадроваяИстория.ГрафикРаботы;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если ЗначениеЗаполнено(ТекГрафик) Тогда
				мсвСтрокиГрафикВыходные = тблГрафикиВыходные.НайтиСтроки(Новый Структура("ГрафикРаботы, ДатаГрафика", ТекГрафик, ТекДата));
				Если мсвСтрокиГрафикВыходные.Количество() > 0 Тогда
					НоваяСтрока = тблРез.Добавить();
					НоваяСтрока.Дата = ТекДата;
					НоваяСтрока.Сотрудник = ТекСотрудник;
					НоваяСтрока.ВидУчетаВремени = Справочники.уатВидыИспользованияРабочегоВремени.ВыходныеДни;
					НоваяСтрока.Часы = 0;
					НоваяСтрока.ПриоритетВидаВремени = 0;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ТекДата = ТекДата + 24*3600;
	КонецЦикла;

	тблРез.Сортировать("Сотрудник, Дата, ПриоритетВидаВремени");
	
	// преобразование таблицы в выборку для использования в типовом коде
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	тблРез.Дата КАК Дата,
	|	тблРез.Сотрудник КАК Сотрудник,
	|	тблРез.ВидУчетаВремени КАК ВидУчетаВремени,
	|	тблРез.Часы КАК Часы,
	|	тблРез.ПриоритетВидаВремени КАК ПриоритетВидаВремени
	|ПОМЕСТИТЬ ВТ_тблРез
	|ИЗ
	|	&тблРез КАК тблРез
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ВТ_тблРез.Дата КАК Дата,
	|	ВТ_тблРез.Сотрудник КАК Сотрудник,
	|	ВТ_тблРез.ВидУчетаВремени КАК ВидУчетаВремени,
	|	ВТ_тблРез.Часы КАК Часы,
	|	ВТ_тблРез.ПриоритетВидаВремени КАК ПриоритетВидаВремени
	|ИЗ
	|	ВТ_тблРез КАК ВТ_тблРез");
	Запрос.УстановитьПараметр("тблРез", тблРез);
		
	Возврат Запрос.Выполнить().Выбрать();
КонецФункции

Функция ДоступныеДляВводаВидыВремени() Экспорт
	ДоступныеДляВводаВидыВремени = Новый Соответствие;
	
	//ВидВремениРабочееВремя = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.уатВидыИспользованияРабочегоВремени.РабочееВремя");	
	ВидВремениРабочееВремя = ОбщегоНазначенияКлиентСервер.ПредопределенныйЭлемент("Справочник.уатВидыИспользованияРабочегоВремени.ПустаяСсылка");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("РабочееВремя", ВидВремениРабочееВремя);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	уатВидыИспользованияРабочегоВремени.Ссылка
	|ИЗ
	|	Справочник.уатВидыИспользованияРабочегоВремени КАК уатВидыИспользованияРабочегоВремени
	|ГДЕ
	|	уатВидыИспользованияРабочегоВремени.Ссылка <> &РабочееВремя";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДоступныеДляВводаВидыВремени.Вставить(Выборка.Ссылка, Истина);
	КонецЦикла;
	
	Возврат ДоступныеДляВводаВидыВремени;
КонецФункции

Функция ТабельПредставлениеВремениПоВиду(КоличествоЧасов, ВидОтображенияВремени = "0") Экспорт 
	
	Если КоличествоЧасов <> 0 Тогда
		Если ВидОтображенияВремени = "0" Тогда
			Возврат Формат(КоличествоЧасов, "ЧГ=");
		Иначе
			мМинуты = Окр(Окр(КоличествоЧасов - Цел(КоличествоЧасов), 2)*60);
			мЧасы   = Цел(КоличествоЧасов);
			Если мМинуты = 0 И мЧасы = 0 Тогда
				Возврат "";
			Иначе
				мДата   = мЧасы + (мМинуты/100);
				мДата   = Формат(мДата, "ЧДЦ=2; ЧРД=:");
				Возврат мДата;
			КонецЕсли;
		КонецЕсли;
	Иначе
		Возврат "";
	КонецЕсли;
	
КонецФункции

#КонецОбласти

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Функция ПечатьТабеля(МассивОбъектов, ОбъектыПечати)
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.АвтоМасштаб = Истина;
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_УНИФИЦИРОВАННАЯ_ФОРМА_Т_13";
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ВидВремениВыходной = Справочники.уатВидыИспользованияРабочегоВремени.ВыходныеДни;
	ВидВремениКомандировка = Справочники.уатВидыИспользованияРабочегоВремени.Командировка;
	
	мсвВидыРабочегоВремени = Новый Массив;
	мсвВидыРабочегоВремени.Добавить(Справочники.уатВидыИспользованияРабочегоВремени.Вахта);
	мсвВидыРабочегоВремени.Добавить(Справочники.уатВидыИспользованияРабочегоВремени.Командировка);
	мсвВидыРабочегоВремени.Добавить(Справочники.уатВидыИспользованияРабочегоВремени.Праздники);
	мсвВидыРабочегоВремени.Добавить(Справочники.уатВидыИспользованияРабочегоВремени.ПраздникиБезПовышеннойОплаты);
	мсвВидыРабочегоВремени.Добавить(Справочники.уатВидыИспользованияРабочегоВремени.РаботаВечерниеЧасы);
	мсвВидыРабочегоВремени.Добавить(Справочники.уатВидыИспользованияРабочегоВремени.РаботаВРежимеНеполногоВремени);
	мсвВидыРабочегоВремени.Добавить(Справочники.уатВидыИспользованияРабочегоВремени.РаботаНочныеЧасы);
	мсвВидыРабочегоВремени.Добавить(Справочники.уатВидыИспользованияРабочегоВремени.РабочееВремя);
	мсвВидыРабочегоВремени.Добавить(Справочники.уатВидыИспользованияРабочегоВремени.Ремонт);
	мсвВидыРабочегоВремени.Добавить(Справочники.уатВидыИспользованияРабочегоВремени.Сверхурочные);
	мсвВидыРабочегоВремени.Добавить(Справочники.уатВидыИспользованияРабочегоВремени.СверхурочныеБезПовышеннойОплаты);
	мсвВидыРабочегоВремени.Добавить(Справочники.уатВидыИспользованияРабочегоВремени.СокращенноеВремяОбучающихся);
	мсвВидыРабочегоВремени.Добавить(Справочники.уатВидыИспользованияРабочегоВремени.СокращенноеРабочееВремя);
	мсвВидыРабочегоВремени.Добавить(Справочники.уатВидыИспользованияРабочегоВремени.Явка);
	
	ПервыйДокумент = Истина;
	
	Для Каждого ДанныеДокумента Из МассивОбъектов Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_УнифицированнаяФормаТ13");
	
		ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
		ОбластьШапка.Параметры.ДатаЗаполнения = ДанныеДокумента.Дата;
		
		ПечатьПрефиксовВключена = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДанныеДокумента.Организация, ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ВыводитьПрефиксПриПечати"));
		Если ПечатьПрефиксовВключена Тогда
			ОбластьШапка.Параметры.НомерДокумента = ДанныеДокумента.Номер;
		Иначе
			ОбластьШапка.Параметры.НомерДокумента = уатОбщегоНазначенияКлиентСервер.НомерДокументаНаПечать(ДанныеДокумента.Номер, Истина, Истина);
		КонецЕсли;
		
		ОбластьШапка.Параметры.ДатаНачала = ДанныеДокумента.ДатаНачалаПериода;
		ОбластьШапка.Параметры.ДатаОкончания = ДанныеДокумента.ДатаОкончанияПериода;
		ОбластьШапка.Параметры.ОрганизацияНаименование = уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(
			ДанныеДокумента.Организация, ДанныеДокумента.Дата), "НаименованиеДляПечатныхФорм,ОГРН,ЮридическийАдрес,Телефоны");;
		ОбластьШапка.Параметры.ОрганизацияКодПоОКПО = ДанныеДокумента.Организация.КодПоОКПО;
		ОбластьШапка.Параметры.ПодразделениеНаименование = ДанныеДокумента.Подразделение;
		
		ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ТабличныйДокумент.Вывести(ОбластьШапка);
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		
		Если ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда 
			ВидВремени = ХранилищеНастроекДанныхФорм.Загрузить("Документ.уатТабельУчетаРабочегоВремени.Форма", "уатТабельУчетаРабочегоВремени_Настройки");
		Иначе
			ВидВремени = "0";
		КонецЕсли;
		
		Если ТипЗнч(ВидВремени) = Тип("Структура") 
			И ВидВремени.Свойство("ПереключательВидаОтображенияВремени") Тогда 
			ВидВремени = ВидВремени.ПереключательВидаОтображенияВремени;
		КонецЕсли;
		
		ТекстЗапроса = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТабельУчетаРабочегоВремениДанныеОВремени.Сотрудник КАК Сотрудник,
		|	МИНИМУМ(ТабельУчетаРабочегоВремениДанныеОВремени.НомерСтроки) КАК НомерСтроки
		|ПОМЕСТИТЬ ВТПорядокСотрудниковВДокументах
		|ИЗ
		|	Документ.уатТабельУчетаРабочегоВремени.ДанныеОВремени КАК ТабельУчетаРабочегоВремениДанныеОВремени
		|ГДЕ
		|	ТабельУчетаРабочегоВремениДанныеОВремени.Ссылка = &ТекущийДокумент
		|
		|СГРУППИРОВАТЬ ПО
		|	ТабельУчетаРабочегоВремениДанныеОВремени.Сотрудник
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТабельУчетаРабочегоВремениДанныеОВремени.Ссылка КАК Ссылка,
		|	ТабельУчетаРабочегоВремениДанныеОВремени.Сотрудник КАК Сотрудник,
		|	ТабельУчетаРабочегоВремениДанныеОВремени.Часов1 КАК Часов,
		|	ТабельУчетаРабочегоВремениДанныеОВремени.ВидВремени1 КАК ВидВремени,
		|	ТабельУчетаРабочегоВремениДанныеОВремени.ВидВремени1.БуквенныйКод КАК БуквенныйКод,
		|	НАЧАЛОПЕРИОДА(ТабельУчетаРабочегоВремениДанныеОВремени.Ссылка.ДатаНачалаПериода, МЕСЯЦ) КАК Дата,
		|	ТабельУчетаРабочегоВремениДанныеОВремени.Ссылка.Дата КАК ДатаДокумента,
		|	ВЫБОР
		|		КОГДА ТабельУчетаРабочегоВремениДанныеОВремени.ВидВремени1 = ЗНАЧЕНИЕ(Справочник.уатВидыИспользованияРабочегоВремени.Явка)
		|			ТОГДА 1
		|		КОГДА ТабельУчетаРабочегоВремениДанныеОВремени.ВидВремени1 = ЗНАЧЕНИЕ(Справочник.уатВидыИспользованияРабочегоВремени.РаботаВечерниеЧасы)
		|			ТОГДА 2
		|		КОГДА ТабельУчетаРабочегоВремениДанныеОВремени.ВидВремени1 = ЗНАЧЕНИЕ(Справочник.уатВидыИспользованияРабочегоВремени.РаботаНочныеЧасы)
		|			ТОГДА 3
		|		КОГДА ТабельУчетаРабочегоВремениДанныеОВремени.ВидВремени1 = ЗНАЧЕНИЕ(Справочник.уатВидыИспользованияРабочегоВремени.Сверхурочные)
		|			ТОГДА 4
		|		ИНАЧЕ 5
		|	КОНЕЦ КАК ПриоритетВидаВремени
		|ПОМЕСТИТЬ ВТДанныеОВремени
		|ИЗ
		|	Документ.уатТабельУчетаРабочегоВремени.ДанныеОВремени КАК ТабельУчетаРабочегоВремениДанныеОВремени
		|ГДЕ
		|	ТабельУчетаРабочегоВремениДанныеОВремени.Ссылка = &ТекущийДокумент
		|	И ТабельУчетаРабочегоВремениДанныеОВремени.ВидВремени1 <> ЗНАЧЕНИЕ(Справочник.уатВидыИспользованияРабочегоВремени.ПустаяСсылка)";
		Для Сч = 2 По 31 Цикл
			ТекстЗапроса = ТекстЗапроса + "
			|	ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	ТабельУчетаРабочегоВремениДанныеОВремени.Ссылка,
			|	ТабельУчетаРабочегоВремениДанныеОВремени.Сотрудник,
			|	ТабельУчетаРабочегоВремениДанныеОВремени.Часов" + Сч + ",
			|	ТабельУчетаРабочегоВремениДанныеОВремени.ВидВремени" + Сч + ",
			|	ТабельУчетаРабочегоВремениДанныеОВремени.ВидВремени" + Сч + ".БуквенныйКод,
			|	ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ТабельУчетаРабочегоВремениДанныеОВремени.Ссылка.ДатаНачалаПериода, МЕСЯЦ), ДЕНЬ, " + Строка(Сч - 1) + "),
			|	ТабельУчетаРабочегоВремениДанныеОВремени.Ссылка.Дата,
			|	ВЫБОР
			|		КОГДА ТабельУчетаРабочегоВремениДанныеОВремени.ВидВремени" + Сч + " = ЗНАЧЕНИЕ(Справочник.уатВидыИспользованияРабочегоВремени.Явка)
			|			ТОГДА 1
			|		КОГДА ТабельУчетаРабочегоВремениДанныеОВремени.ВидВремени" + Сч + " = ЗНАЧЕНИЕ(Справочник.уатВидыИспользованияРабочегоВремени.РаботаВечерниеЧасы)
			|			ТОГДА 2
			|		КОГДА ТабельУчетаРабочегоВремениДанныеОВремени.ВидВремени" + Сч + " = ЗНАЧЕНИЕ(Справочник.уатВидыИспользованияРабочегоВремени.РаботаНочныеЧасы)
			|			ТОГДА 3
			|		КОГДА ТабельУчетаРабочегоВремениДанныеОВремени.ВидВремени" + Сч + " = ЗНАЧЕНИЕ(Справочник.уатВидыИспользованияРабочегоВремени.Сверхурочные)
			|			ТОГДА 4
			|		ИНАЧЕ 5
			|	КОНЕЦ
			|ИЗ
			|	Документ.уатТабельУчетаРабочегоВремени.ДанныеОВремени КАК ТабельУчетаРабочегоВремениДанныеОВремени
			|ГДЕ
			|	ТабельУчетаРабочегоВремениДанныеОВремени.Ссылка = &ТекущийДокумент 
			|	И ТабельУчетаРабочегоВремениДанныеОВремени.ВидВремени" + Сч + " <> ЗНАЧЕНИЕ(Справочник.уатВидыИспользованияРабочегоВремени.ПустаяСсылка)";
		КонецЦикла;
		ТекстЗапроса = ТекстЗапроса + "
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВТДанныеОВремени.Ссылка КАК Ссылка,
		|	ВТДанныеОВремени.Сотрудник КАК Сотрудник,
		|	ВТДанныеОВремени.Часов КАК Часов,
		|	ВТДанныеОВремени.ВидВремени КАК ВидВремени,
		|	ВТДанныеОВремени.БуквенныйКод КАК БуквенныйКод,
		|	ВТДанныеОВремени.Дата КАК Дата,
		|	ВТДанныеОВремени.ДатаДокумента КАК ДатаДокумента,
		|	ВТДанныеОВремени.ПриоритетВидаВремени КАК ПриоритетВидаВремени,
		|	ВТПорядокСотрудниковВДокументах.НомерСтроки КАК ПорядковыйНомерСотрудника
		|ИЗ
		|	ВТДанныеОВремени КАК ВТДанныеОВремени
		|	ВНУТРЕННЕЕ СОЕДИНЕНИЕ
		|	ВТПорядокСотрудниковВДокументах КАК ВТПорядокСотрудниковВДокументах
		|	ПО ВТДанныеОВремени.Сотрудник = ВТПорядокСотрудниковВДокументах.Сотрудник
		|УПОРЯДОЧИТЬ ПО
		|	ПорядковыйНомерСотрудника,
		|	Сотрудник,
		|	Дата,
		|	ПриоритетВидаВремени";
		
		Запрос = Новый Запрос(ТекстЗапроса);
		Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.УстановитьПараметр("ТекущийДокумент", ДанныеДокумента);
		
		ВыборкаДанныхОВремени = Запрос.Выполнить().Выбрать();
		
		// получение должностей сотрудников
		мсвСотрудники = Новый Массив;
		Для Каждого ТекСтрока Из ДанныеДокумента.ДанныеОВремени Цикл
			Если мсвСотрудники.Найти(ТекСтрока.Сотрудник) = Неопределено Тогда
				мсвСотрудники.Добавить(ТекСтрока.Сотрудник);
			КонецЕсли;
		КонецЦикла;
		
		ЗапросДолжности = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатКадроваяИсторияСотрудниковСрезПоследних.Сотрудник КАК Сотрудник,
		|	уатКадроваяИсторияСотрудниковСрезПоследних.Должность КАК Должность
		|ИЗ
		|	РегистрСведений.уатКадроваяИсторияСотрудников.СрезПоследних(
		|			&ДатаНачала,
		|			Сотрудник В (&мсвСотрудники)
		|				И Организация = &Организация) КАК уатКадроваяИсторияСотрудниковСрезПоследних
		|ГДЕ
		|	уатКадроваяИсторияСотрудниковСрезПоследних.Сотрудник.ДатаПриема <= &ДатаОкончания
		|	И ВЫБОР
		|			КОГДА уатКадроваяИсторияСотрудниковСрезПоследних.Сотрудник.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1)
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ уатКадроваяИсторияСотрудниковСрезПоследних.Сотрудник.ДатаУвольнения >= &ДатаНачала
		|		КОНЕЦ");
		ЗапросДолжности.УстановитьПараметр("мсвСотрудники", мсвСотрудники);
		ЗапросДолжности.УстановитьПараметр("Организация", ДанныеДокумента.Организация);
		ЗапросДолжности.УстановитьПараметр("ДатаНачала", ДанныеДокумента.ДатаНачалаПериода);
		ЗапросДолжности.УстановитьПараметр("ДатаОкончания", ДанныеДокумента.ДатаОкончанияПериода);
		тблДолжности = ЗапросДолжности.Выполнить().Выгрузить();
				
		НомерСотрудника = 0;
		Пока ВыборкаДанныхОВремени.СледующийПоЗначениюПоля("Сотрудник") Цикл
			ОтработаноДнейЗаПервуюПоловинуМесяца = 0;
			ОтработаноЧасовЗаВторуюПоловинуМесяца = 0;
			ОтработаноДнейЗаВторуюПоловинуМесяца = 0;
			ОтработаноЧасовЗаПервуюПоловинуМесяца = 0;
			ОтработаноДнейЗаМесяц = 0;
			ОтработаноЧасовЗаМесяц = 0;
			
			НомерСотрудника = НомерСотрудника + 1;
			
			ОбластьДанныеОВремени = Макет.ПолучитьОбласть("Строка");
			
			ФИО = уатОбщегоНазначения.уатФИОСотрудникаПолноеСтрокой(ВыборкаДанныхОВремени.Сотрудник, ДанныеДокумента.Дата);
			
			СтрокаДолжность = тблДолжности.Найти(ВыборкаДанныхОВремени.Сотрудник, "Сотрудник");
			Если СтрокаДолжность = Неопределено Тогда
				ОбластьДанныеОВремени.Параметры.Сотрудник = ФИО;
			Иначе
				ОбластьДанныеОВремени.Параметры.Сотрудник = ФИО + "
													|(" + СтрокаДолжность.Должность + ")";	
			КонецЕсли;
													
			ОбластьДанныеОВремени.Параметры.ТабельныйНомер = ВыборкаДанныхОВремени.Сотрудник.Код;	
			
			ОбластьДанныеОВремени.Параметры.НомерПП = НомерСотрудника;	
			
			ОтклоненияПоСотруднику = Новый ТаблицаЗначений;
			ОтклоненияПоСотруднику.Колонки.Добавить("ВидВремени");
			ОтклоненияПоСотруднику.Колонки.Добавить("БуквенныйКод");
			ОтклоненияПоСотруднику.Колонки.Добавить("Часов");
			ОтклоненияПоСотруднику.Колонки.Добавить("Дней");
			
			Пока ВыборкаДанныхОВремени.СледующийПоЗначениюПоля("Дата") Цикл 
				ПредставлениеВидовВремени = "";
				ЧасыПоВидамВремениСтрока = "";
				
				КоличествоЗаписейНаДату = 0;
				ЭтоКомандировка = Ложь;
	
				РабочийДень = Ложь;
				Пока ВыборкаДанныхОВремени.Следующий() Цикл
					флРабочееВремя = (мсвВидыРабочегоВремени.Найти(ВыборкаДанныхОВремени.ВидВремени) <> Неопределено);
					Если (НЕ флРабочееВремя)
						И ВыборкаДанныхОВремени.ВидВремени <> ВидВремениВыходной Тогда
						
						ОтклоненияПоВидуВремени = ОтклоненияПоСотруднику.Добавить();
						
						ОтклоненияПоВидуВремени.ВидВремени = ВыборкаДанныхОВремени.ВидВремени;
						ОтклоненияПоВидуВремени.БуквенныйКод = ВыборкаДанныхОВремени.БуквенныйКод;
						ОтклоненияПоВидуВремени.Дней = 1;
						ОтклоненияПоВидуВремени.Часов = ВыборкаДанныхОВремени.Часов;
						
					КонецЕсли;
					
					ПредставлениеВидовВремени = ПредставлениеВидовВремени + "/"+  ВыборкаДанныхОВремени.БуквенныйКод;
					
					ЧасыПоВидамВремениСтрока = ЧасыПоВидамВремениСтрока +  "/" + ТабельПредставлениеВремениПоВиду(ВыборкаДанныхОВремени.Часов, ВидВремени);
					
					Если флРабочееВремя Тогда
						РабочийДень = Истина;
						ОтработаноЧасовЗаМесяц = ОтработаноЧасовЗаМесяц + ВыборкаДанныхОВремени.Часов;
						
						Если День(ВыборкаДанныхОВремени.Дата) > 15 Тогда
							ОтработаноЧасовЗаВторуюПоловинуМесяца = ОтработаноЧасовЗаВторуюПоловинуМесяца + ВыборкаДанныхОВремени.Часов;
						Иначе
							ОтработаноЧасовЗаПервуюПоловинуМесяца = ОтработаноЧасовЗаПервуюПоловинуМесяца + ВыборкаДанныхОВремени.Часов;
						КонецЕсли;
					КонецЕсли;
					
					КоличествоЗаписейНаДату = КоличествоЗаписейНаДату + 1;
					ЭтоКомандировка = (ВыборкаДанныхОВремени.ВидВремени = ВидВремениКомандировка);
					
				КонецЦикла;
				
				Если КоличествоЗаписейНаДату = 1
					И ЭтоКомандировка Тогда  
					
					ЧасыПоВидамВремениСтрока = "";
				КонецЕсли;
				
				Если РабочийДень Тогда
					ОтработаноДнейЗаМесяц = ОтработаноДнейЗаМесяц + 1;
					Если День(ВыборкаДанныхОВремени.Дата) > 15 Тогда
						ОтработаноДнейЗаВторуюПоловинуМесяца = ОтработаноДнейЗаВторуюПоловинуМесяца + 1;
					Иначе
						ОтработаноДнейЗаПервуюПоловинуМесяца = ОтработаноДнейЗаПервуюПоловинуМесяца + 1;
					КонецЕсли;
				КонецЕсли;
				
				НомерДня = День(ВыборкаДанныхОВремени.Дата);
				
				ОбластьДанныеОВремени.Параметры["Символ" + НомерДня] = Сред(ПредставлениеВидовВремени, 2);
				
				ОбластьДанныеОВремени.Параметры["ДополнительноеЗначение"+ НомерДня] = Сред(ЧасыПоВидамВремениСтрока, 2);
				
			КонецЦикла;
			
			ОбластьДанныеОВремени.Параметры.ДниПерваяПоловина = ОтработаноДнейЗаПервуюПоловинуМесяца;
			ОбластьДанныеОВремени.Параметры.ЧасыПерваяПоловина = ТабельПредставлениеВремениПоВиду(ОтработаноЧасовЗаПервуюПоловинуМесяца, ВидВремени);
			ОбластьДанныеОВремени.Параметры.ДниВтораяПоловина = ОтработаноДнейЗаВторуюПоловинуМесяца;
			ОбластьДанныеОВремени.Параметры.ЧасыВтораяПоловина = ТабельПредставлениеВремениПоВиду(ОтработаноЧасовЗаВторуюПоловинуМесяца, ВидВремени);
			ОбластьДанныеОВремени.Параметры.ДниЗаМесяц = ОтработаноДнейЗаМесяц;
			ОбластьДанныеОВремени.Параметры.ЧасыЗаМесяц = ТабельПредставлениеВремениПоВиду(ОтработаноЧасовЗаМесяц, ВидВремени);
			
			ОтклоненияПоСотруднику.Свернуть("ВидВремени, БуквенныйКод", "Дней, Часов");
			
			СчОтклонений = 1;
			Для Каждого ОтклонениеПоВидуВремени Из ОтклоненияПоСотруднику Цикл
				Если СчОтклонений > 8 Тогда
					Прервать;
				КонецЕсли;
				
				ОбластьДанныеОВремени.Параметры["НеявкаКод" + СчОтклонений] = ОтклонениеПоВидуВремени.БуквенныйКод;
				ОбластьДанныеОВремени.Параметры["НеявкаДниЧасы" + СчОтклонений] = Строка(ОтклонениеПоВидуВремени.Дней) + 
						?(ОтклонениеПоВидуВремени.Часов > 0, "(" + ТабельПредставлениеВремениПоВиду(ОтклонениеПоВидуВремени.Часов, ВидВремени)+ ")", "");
				
				СчОтклонений = СчОтклонений + 1;
			КонецЦикла;
			
			МассивОбластей = Новый Массив;
			МассивОбластей.Добавить(ОбластьДанныеОВремени);
			
			Если НЕ ОбщегоНазначения.ПроверитьВыводТабличногоДокумента(ТабличныйДокумент, МассивОбластей) Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьДанныеОВремени);
		КонецЦикла;
		
		ОбластьПодвал.Параметры.ФИООтветственного = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ДанныеДокумента.Ответственный.ФизическоеЛицо);
		//СтрокаДолжность = тблДолжности.Найти(ДанныеДокумента.Ответственный, "Сотрудник");
		//Если СтрокаДолжность <> Неопределено Тогда
		//	ОбластьПодвал.Параметры.ДолжностьОтветственного	= СтрокаДолжность.Должность;
		//КонецЕсли;
		уатОтветственныеЛицаОрганизаций = уатОбщегоНазначенияТиповые.уатОтветственныеЛицаОрганизаций(ДанныеДокумента.Организация, ДанныеДокумента.Дата);
		ОбластьПодвал.Параметры.ФИОРуководителя = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(уатОтветственныеЛицаОрганизаций.Руководитель);
		ОбластьПодвал.Параметры.ДолжностьРуководителя = уатОтветственныеЛицаОрганизаций.РуководительДолжность;
		ТабличныйДокумент.Вывести(ОбластьПодвал);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаДанныхОВремени.Ссылка);
		
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
КонецФункции

#КонецОбласти


#КонецЕсли
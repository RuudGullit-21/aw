#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	Настройки.ПриПолученииСлужебныхРеквизитов = Ложь;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатПеремещениеТоваров";
	КомандаПечати.Идентификатор = "Накладная";
	КомандаПечати.Представление = НСтр("en='Goods movement';ru='Перемещение товаров'");
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатПеремещениеТоваров";
	КомандаПечати.Идентификатор = "ТОРГ13";
	КомандаПечати.Представление = НСтр("en='TORG-13 (internal transfer Slip)';ru='ТОРГ-13 (Накладная на внутреннее перемещение)'");
	
	Если ПолучитьФункциональнуюОпцию("уатАдресноеХранение") Тогда
		КомандаПечати = КомандыПечати.Добавить();
		КомандаПечати.МенеджерПечати = "Документ.уатПеремещениеТоваров";
		КомандаПечати.Идентификатор = "СборочныйЛист";
		КомандаПечати.Представление = НСтр("en='Assembly sheet';ru='Сборочный лист'");
	КонецЕсли;
	
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор  = "Реестр";
	КомандаПечати.Представление  = НСтр("en='Document register';ru='Реестр документов'");
	КомандаПечати.ЗаголовокФормы = НСтр("en='Register of documents ""Goods movement""';ru='Реестр документов ""Перемещение товаров""'");
	КомандаПечати.Обработчик     = "уатОбщегоНазначенияТиповыеКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм     = "ФормаСписка";
	КомандаПечати.Порядок        = 100;
	
	// Печать этикеток
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Этикетки";
	КомандаПечати.Представление = НСтр("ru = 'Этикетки'");
	КомандаПечати.ЗаголовокФормы = НСтр("ru='Печать этикеток номенклатуры'");
	КомандаПечати.Обработчик = "уатОбщегоНазначенияТиповыеКлиент.ВыполнитьКомандуПечатиЭтикеток";
	КомандаПечати.МенеджерПечати = "";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Порядок = 50;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр).
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной
//                                                            параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной
//                                            параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если НЕ уатОбщегоНазначенияСервер.РазрешениеПечатиНепроведенногоДокумента(МассивОбъектов) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Накладная") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Накладная",
			"Перемещение товаров", ПечатьПеремещениеТоваров(МассивОбъектов, ОбъектыПечати));
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТОРГ13") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ТОРГ13",
			"ТОРГ-13 (Накладная на внутреннее перемещение)", ПечатьТОРГ13(МассивОбъектов, ОбъектыПечати));
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СборочныйЛист") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "СборочныйЛист",
			"Сборочный лист", ПечатьСборочныйЛист(МассивОбъектов, ОбъектыПечати));
		
	КонецЕсли;
	
	уатОбщегоНазначенияСервер.УстановитьРедактированиеПечатныхФормДокумента(КоллекцияПечатныхФорм);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.УправлениеДоступом

// Позволяет переопределить ограничение, указанное в модуле менеджера объекта метаданных.
//
// Параметры:
//  Ограничение - Структура:
//    * Текст                             - Строка - ограничение доступа для пользователей.
//                                          Если пустая строка, значит, доступ разрешен.
//    * ТекстДляВнешнихПользователей      - Строка - ограничение доступа для внешних пользователей.
//                                          Если пустая строка, значит, доступ запрещен.
//    * ПоВладельцуБезЗаписиКлючейДоступа - Неопределено - определить автоматически.
//                                        - Булево - если Ложь, то всегда записывать ключи доступа,
//                                          если Истина, тогда не записывать ключи доступа,
//                                          а использовать ключи доступа владельца (требуется,
//                                          чтобы ограничение было строго по объекту-владельцу).
//   * ПоВладельцуБезЗаписиКлючейДоступаДляВнешнихПользователей - Неопределено, Булево - также
//                                          как у параметра ПоВладельцуБезЗаписиКлючейДоступа.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Подразделение)";
	
	Ограничение.ТекстДляВнешнихПользователей = Ограничение.Текст;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// СтандартныеПодсистемы.ВариантыОтчетов

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВариантыОтчетов

#КонецОбласти

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт

	флЯчеистыйСклад = ПолучитьФункциональнуюОпцию("уатАдресноеХранение") = ИСТИНА
		И (ДокументСсылка.СкладОтправитель.АдресноеХранение ИЛИ ДокументСсылка.СкладПолучатель.АдресноеХранение);
	
	мЗапрос = Новый Запрос;
	мЗапрос.УстановитьПараметр("Ссылка"          , ДокументСсылка);
	мЗапрос.УстановитьПараметр("СкладОтправитель", ДокументСсылка.СкладОтправитель);
	мЗапрос.УстановитьПараметр("СкладПолучатель" , ДокументСсылка.СкладПолучатель);
	мЗапрос.УстановитьПараметр("МоментВремени"   , СтруктураДополнительныеСвойства.ДляПроведения.МоментКонтроля);
	мЗапрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	мЗапрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаДокумента.Ссылка.СкладОтправитель КАК СкладОтправитель,
	|	ТаблицаДокумента.ЯчейкаОтправитель КАК ЯчейкаОтправитель,
	|	ТаблицаДокумента.Количество * ЕСТЬNULL(ТаблицаДокумента.ЕдиницаИзмерения.Коэффициент, 1) / ТаблицаДокумента.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Количество,
	|	ТаблицаДокумента.Номенклатура
	|ПОМЕСТИТЬ ТаблицаДокументаТовары
	|ИЗ
	|	Документ.уатПеремещениеТоваров.Товары КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаДокументаТовары.СкладОтправитель КАК Склад,
	|	ТаблицаДокументаТовары.ЯчейкаОтправитель КАК Ячейка,
	|	ТаблицаДокументаТовары.Номенклатура,
	|	ТаблицаДокументаТовары.Количество
	|ИЗ
	|	ТаблицаДокументаТовары КАК ТаблицаДокументаТовары";	
	
	МассивРезультатов = мЗапрос.ВыполнитьПакет();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.уатПартииТоваровНаСкладах");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = МассивРезультатов[1].Выгрузить();
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Склад", "Склад");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
	
	Если флЯчеистыйСклад Тогда 
		ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.уатТоварыВЯчейках");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = МассивРезультатов[1].Выгрузить();
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Склад", "Склад");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ячейка", "Ячейка");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
	КонецЕсли;
	
	Блокировка.Заблокировать();
	
	мЗапрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТабНоменклатуры.СкладОтправитель КАК Склад,
	|	ТабНоменклатуры.Номенклатура КАК Номенклатура,
	|	СУММА(ТабНоменклатуры.Количество) КАК Количество
	|ИЗ
	|	ТаблицаДокументаТовары КАК ТабНоменклатуры
	|
	|СГРУППИРОВАТЬ ПО
	|	ТабНоменклатуры.СкладОтправитель,
	|	ТабНоменклатуры.Номенклатура";
	
	ТаблицаПартий = уатПроведение.ПолучитьТаблицуПартийДляСписания(мЗапрос.Выполнить().Выгрузить(),
		уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументСсылка.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.СпособОценкиМПЗ),
		СтруктураДополнительныеСвойства.ДляПроведения.МоментКонтроля);
	
	ЗапросПартии = Новый Запрос();
	ЗапросПартии.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТабДанных.Склад КАК Склад,
	|	ТабДанных.Номенклатура КАК Номенклатура,
	|	ТабДанных.Партия КАК Партия,
	|	ТабДанных.Количество КАК Количество,
	|	ТабДанных.Стоимость КАК Стоимость,
	|	ТабДанных.СтоимостьУпр КАК СтоимостьУпр,
	|	ТабДанных.СуммаНДС КАК СуммаНДС
	|ПОМЕСТИТЬ ВремТаблицаПартий
	|ИЗ
	|	&ТаблицаПарам КАК ТабДанных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период КАК Период,
	|	&Регистратор КАК Регистратор,
	|	ТабДанных.Склад КАК Склад,
	|	ТабДанных.Партия КАК Партия,
	|	ТабДанных.Номенклатура КАК Номенклатура,
	|	ТабДанных.Количество КАК Количество,
	|	ТабДанных.Стоимость КАК Стоимость,
	|	ТабДанных.СтоимостьУпр КАК СтоимостьУпр,
	|	ТабДанных.СуммаНДС КАК СуммаНДС
	|ИЗ
	|	ВремТаблицаПартий КАК ТабДанных
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	&Период,
	|	&Регистратор,
	|	&СкладПолучатель,
	|	ТабДанных.Партия,
	|	ТабДанных.Номенклатура,
	|	ТабДанных.Количество,
	|	ТабДанных.Стоимость,
	|	ТабДанных.СтоимостьУпр,
	|	ТабДанных.СуммаНДС
	|ИЗ
	|	ВремТаблицаПартий КАК ТабДанных";
	ЗапросПартии.УстановитьПараметр("Период"         , ДокументСсылка.Дата);
	ЗапросПартии.УстановитьПараметр("ТаблицаПарам"   , ТаблицаПартий);
	ЗапросПартии.УстановитьПараметр("Регистратор"    , ДокументСсылка);
	ЗапросПартии.УстановитьПараметр("СкладПолучатель", ДокументСсылка.СкладПолучатель);
	
	МассивРезультатов = ЗапросПартии.ВыполнитьПакет();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПартии", МассивРезультатов[1].Выгрузить());
	
	Если флЯчеистыйСклад Тогда
		ЗапросЯчейки = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
		|	ТаблицаДокумента.Ссылка.Дата КАК Период,
		|	ТаблицаДокумента.Ссылка КАК Регистратор,
		|	ТаблицаДокумента.Ссылка.СкладОтправитель КАК Склад,
		|	ТаблицаДокумента.ЯчейкаОтправитель КАК Ячейка,
		|	ТаблицаДокумента.Номенклатура КАК Номенклатура,
		|	ТаблицаДокумента.Количество КАК Количество
		|ИЗ
		|	Документ.уатПеремещениеТоваров.Товары КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка.СкладОтправитель.АдресноеХранение И ТаблицаДокумента.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
		|	ТаблицаДокумента.Ссылка.Дата,
		|	ТаблицаДокумента.Ссылка,
		|	ТаблицаДокумента.Ссылка.СкладПолучатель,
		|	ТаблицаДокумента.ЯчейкаПолучатель,
		|	ТаблицаДокумента.Номенклатура,
		|	ТаблицаДокумента.Количество
		|ИЗ
		|	Документ.уатПеремещениеТоваров.Товары КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка.СкладПолучатель.АдресноеХранение И ТаблицаДокумента.Ссылка = &Ссылка");
		ЗапросЯчейки.УстановитьПараметр("Ссылка", ДокументСсылка);
		тблТоварыВЯчейках = ЗапросЯчейки.Выполнить().Выгрузить();
		
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаТоварыВЯчейках", тблТоварыВЯчейках);
	КонецЕсли;
	
КонецПроцедуры // ИнициализироватьДанныеДокумента()

Процедура ВыполнитьКонтроль(ДокументСсылка, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь) Экспорт
	
	Заголовок = уатОбщегоНазначенияТиповые.уатПредставлениеДокументаПриПроведении(ДокументСсылка);
	
	мЗапрос = Новый Запрос;
	мЗапрос.МенеджерВременныхТаблиц = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц; 
	мЗапрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаДокумента.Номенклатура КАК Номенклатура,
	|	ТаблицаДокумента.Ссылка КАК Регистратор,
	|	ЕСТЬNULL(уатПартииТоваровНаСкладахОстатки.КоличествоОстаток, 0) КАК КоличествоОстаток,
	|	ЕСТЬNULL(уатТоварыВЯчейкахОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЯчейка
	|ИЗ
	|	Документ.уатПеремещениеТоваров.Товары КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.уатПартииТоваровНаСкладах.Остатки(
	|				&МоментВремени,
	|				Склад = &Склад
	|					И Номенклатура В
	|						(ВЫБРАТЬ
	|							ТабНоменклатуры.Номенклатура
	|						ИЗ
	|							Документ.уатПеремещениеТоваров.Товары КАК ТабНоменклатуры
	|						ГДЕ
	|							ТабНоменклатуры.Ссылка = &Ссылка)) КАК уатПартииТоваровНаСкладахОстатки
	|		ПО (&Склад = уатПартииТоваровНаСкладахОстатки.Склад)
	|			И ТаблицаДокумента.Номенклатура = уатПартииТоваровНаСкладахОстатки.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.уатТоварыВЯчейках.Остатки(
	|				&МоментВремени,
	|				Склад = &Склад
	|					И Ячейка = Склад.ТранзитнаяЯчейка
	|					И Номенклатура В
	|						(ВЫБРАТЬ
	|							ТабНоменклатуры.Номенклатура
	|						ИЗ
	|							Документ.уатСписаниеТоваров.Товары КАК ТабНоменклатуры
	|						ГДЕ
	|							ТабНоменклатуры.Ссылка = &Ссылка)) КАК уатТоварыВЯчейкахОстатки
	|		ПО ТаблицаДокумента.Номенклатура = уатТоварыВЯчейкахОстатки.Номенклатура
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|	И ЕСТЬNULL(уатПартииТоваровНаСкладахОстатки.КоличествоОстаток, 0) < 0";
	
	Если НЕ УдалениеПроведения тогда
		СкладКонтроль = ДокументСсылка.СкладОтправитель;
		мЗапрос.УстановитьПараметр("МоментВремени", ДополнительныеСвойства.ДляПроведения.МоментКонтроля);
	Иначе
		СкладКонтроль = ДокументСсылка.СкладПолучатель;
		мЗапрос.Текст = СтрЗаменить(мЗапрос.Текст, "&МоментВремени", "");
	КонецЕсли;
	мЗапрос.УстановитьПараметр("Склад",  СкладКонтроль);
	мЗапрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Выборка = мЗапрос.Выполнить().Выбрать();
	
	Если ПолучитьФункциональнуюОпцию("уатАдресноеХранение") И СкладКонтроль.АдресноеХранение Тогда
		ТекстШаблона = "Обнаружен отрицательный остаток номенклатуры ""%1"" на складе ""%2"" (транзитная ячейка): %3";
	Иначе
		ТекстШаблона = "Обнаружен отрицательный остаток номенклатуры ""%1"" на складе ""%2"": %3";
	КонецЕсли;
	
	Если Выборка.Количество() тогда
		Пока Выборка.Следующий() Цикл
			ТекстНСТР = СтрШаблон(ТекстШаблона, Выборка.Номенклатура, мЗапрос.Параметры.Склад,
				Мин(Выборка.КоличествоОстаток, Выборка.КоличествоОстатокЯчейка));
			уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, Отказ, Заголовок);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьКонтроль()

// Получает дополнительные реквизиты для отображения в отчете "Реестр документов"
// 
// Возвращаемое значение:
//  Структура - доп. реквизитов
//
Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура("Информация", "СкладПолучатель");
	Возврат Результат;
	
КонецФункции

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Функция ПечатьПеремещениеТоваров(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_ПеремещениеТоваров";
	
	ПервыйДокумент = Истина;
	
	Для Каждого ТекущийДокумент Из МассивОбъектов Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		РежимВыводаКодаВДокументах = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ПользователиКлиентСервер.АвторизованныйПользователь(), 
		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.РежимВыводаКодаВДокументах"));
		
		Колонка         = РежимВыводаКодаВДокументах;
		ТекстКодАртикул = РежимВыводаКодаВДокументах;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент.Ссылка);
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПеремещениеТоваров.Номер,
		|	ПеремещениеТоваров.Дата,
		|	ПеремещениеТоваров.Организация,
		|	ПеремещениеТоваров.СкладОтправитель,
		|	ПеремещениеТоваров.СкладОтправитель.Представление КАК Поставщик,
		|	ПеремещениеТоваров.СкладПолучатель,
		|	ПеремещениеТоваров.СкладПолучатель.Представление КАК Покупатель,
		|	ПеремещениеТоваров.Товары.(
		|		Номенклатура,
		|		Номенклатура.НаименованиеПолное КАК Товар,
		|		Номенклатура."+ ТекстКодАртикул + " КАК Код,
		|		Количество,
		|		ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения
		|	)
		|ИЗ
		|	Документ.уатПеремещениеТоваров КАК ПеремещениеТоваров
		|ГДЕ
		|	ПеремещениеТоваров.Ссылка = &ТекущийДокумент
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПеремещениеТоваров.Товары.НомерСтроки";
		
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();
		ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
		
		ТабличныйДокумент = Новый ТабличныйДокумент;
		ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПеремещениеТоваров_Накладная";
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.уатПеремещениеТоваров.ПФ_MXL_Накладная");
		
		// Печать штрихкода
		Если уатЗащищенныеФункцииСервер_проф.ИспользоватьШтрихкодированиеОбъекта(ТекущийДокумент) Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокШтрихкод");
			уатЗащищенныеФункцииСервер_проф.ОтобразитьШКнаПФ(ОбластьМакета, ТекущийДокумент);
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		// Выводим шапку накладной
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(Шапка, НСтр("en='Invoice on replacement';ru='Накладная на перемещение'"));
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ОбластьМакета.Параметры.ПредставлениеПоставщика = Шапка.Поставщик;
		ОбластьМакета.Параметры.Поставщик = Шапка.СкладОтправитель;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		ОбластьМакета.Параметры.ПредставлениеПолучателя = Шапка.Покупатель;
		ОбластьМакета.Параметры.Получатель = Шапка.СкладПолучатель;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Вывести табличную часть
		ВыводитьКоды = Истина;
		
		ИмяШапки  = "ШапкаТаблицы";
		ИмяСтроки = "Строка";
		
		ФлагПечатиМест = Ложь;
		ОбластьНомера  = Макет.ПолучитьОбласть(ИмяШапки + "|НомерСтроки");
		ОбластьКодов   = Макет.ПолучитьОбласть(ИмяШапки + "|КолонкаКодов");
		ОбластьТовар   = Макет.ПолучитьОбласть(ИмяШапки + "|Товар");
		ОбластьМест    = Макет.ПолучитьОбласть(ИмяШапки + "|Мест");
		ОбластьДанных  = Макет.ПолучитьОбласть(ИмяШапки + "|Данные");
		
		ТабличныйДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ОбластьКодов.Параметры.ИмяКолонкиКодов = Колонка;
			ТабличныйДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ТабличныйДокумент.Присоединить(ОбластьТовар);
		ОбластьКолонкаТовар = Макет.Область("Товар");
		Если ВыводитьКоды Тогда
			ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки
			+ ?(ФлагПечатиМест, 0, Макет.Область("R14C5").ШиринаКолонки + Макет.Область("R14C6").ШиринаКолонки);
		Иначе
			ОбластьКолонкаТовар.ШиринаКолонки = ОбластьКолонкаТовар.ШиринаКолонки
			+ Макет.Область("КолонкаКодов").ШиринаКолонки
			+ ?(ФлагПечатиМест, 0, Макет.Область("R14C5").ШиринаКолонки + Макет.Область("R14C6").ШиринаКолонки);
		КонецЕсли;
		Если ФлагПечатиМест Тогда
			ТабличныйДокумент.Присоединить(ОбластьМест);
		КонецЕсли;
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		
		ОбластьНомера = Макет.ПолучитьОбласть(ИмяСтроки + "|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть(ИмяСтроки + "|КолонкаКодов");
		ОбластьТовар  = Макет.ПолучитьОбласть(ИмяСтроки + "|Товар");
		ОбластьМест   = Макет.ПолучитьОбласть(ИмяСтроки + "|Мест");
		ОбластьДанных = Макет.ПолучитьОбласть(ИмяСтроки + "|Данные");
		
		Ном = 0;
		
		// Выборка товаров
		Пока ВыборкаСтрокТовары.Следующий() Цикл
			
			Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
				ТекстНСТР = НСтр("en='In one of the rows value of products and services not filled - string when printing is missing.';ru='В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.'");
				уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР,,, СтатусСообщения.Важное);
				Продолжить;
			КонецЕсли;
			
			Ном = Ном + 1;
			
			//ОбластьНомера.Параметры.Заполнить(ВыборкаСтрокТовары);
			ОбластьНомера.Параметры.НомерСтроки = Ном;
			ТабличныйДокумент.Вывести(ОбластьНомера);
			
			Если ВыводитьКоды Тогда
				Если ВыборкаСтрокТовары.Код = "" Тогда
					ОбластьКодов.Параметры.Артикул = НСтр("en='-';ru='-'");
				Иначе
					ОбластьКодов.Параметры.Артикул = ВыборкаСтрокТовары.Код;
				КонецЕсли;
				ТабличныйДокумент.Присоединить(ОбластьКодов);
			КонецЕсли;
			
			ОбластьТовар.Параметры.Товар = ВыборкаСтрокТовары.Товар;
			ТабличныйДокумент.Присоединить(ОбластьТовар);
			
			Если ФлагПечатиМест Тогда
				ОбластьМест.Параметры.Заполнить(ВыборкаСтрокТовары);
				ТабличныйДокумент.Присоединить(ОбластьМест);
			КонецЕсли;
			
			ОбластьДанных.Параметры.Заполнить(ВыборкаСтрокТовары);
			ТабличныйДокумент.Присоединить(ОбластьДанных);
			
		КонецЦикла;
		
		// Вывести подвал
		ОбластьНомера = Макет.ПолучитьОбласть("Подвал|НомерСтроки");
		ОбластьКодов  = Макет.ПолучитьОбласть("Подвал|КолонкаКодов");
		ОбластьТовар  = Макет.ПолучитьОбласть("Подвал|Товар");
		ОбластьМест   = Макет.ПолучитьОбласть("Подвал|Мест");
		ОбластьДанных = Макет.ПолучитьОбласть("Подвал|Данные");
		
		ТабличныйДокумент.Вывести(ОбластьНомера);
		Если ВыводитьКоды Тогда
			ТабличныйДокумент.Присоединить(ОбластьКодов);
		КонецЕсли;
		ТабличныйДокумент.Присоединить(ОбластьТовар);
		Если ФлагПечатиМест Тогда
			ТабличныйДокумент.Присоединить(ОбластьМест);
		КонецЕсли;
		ТабличныйДокумент.Присоединить(ОбластьДанных);
		
		// Вывести подписи
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ОбластьМакета.Параметры.Отпустил = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ТекущийДокумент.Отпустил);
		ОбластьМакета.Параметры.Получил  = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ТекущийДокумент.Получил);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ТекущийДокумент);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатнаяФорма()

Функция ПечатьТОРГ13(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_ПеремещениеТоваров";
	
	ПервыйДокумент = Истина;
	
	Для Каждого ТекущийДокумент Из МассивОбъектов Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		мЗапрос = Новый Запрос;
		мЗапрос.УстановитьПараметр("Ссылка", ТекущийДокумент.Ссылка);
		мЗапрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатПеремещениеТоваровТовары.Ссылка КАК Ссылка,
		|	уатПеремещениеТоваровТовары.Ссылка.Организация КАК Организация,
		|	уатПеремещениеТоваровТовары.Ссылка.Номер КАК НомерДокумента,
		|	уатПеремещениеТоваровТовары.Ссылка.Дата КАК ДатаДокумента,
		|	уатПеремещениеТоваровТовары.Ссылка.СкладОтправитель КАК ОтправительПодразделение,
		|	уатПеремещениеТоваровТовары.Ссылка.СкладПолучатель КАК ПолучательПодразделение,
		|	уатПеремещениеТоваровТовары.НомерСтроки КАК НомерСтроки,
		|	уатПеремещениеТоваровТовары.Номенклатура КАК Номенклатура,
		|	уатПеремещениеТоваровТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	уатПеремещениеТоваровТовары.Количество КАК КоличествоМест,
		|	уатПеремещениеТоваровТовары.Номенклатура.Код КАК ТоварКод,
		|	уатПеремещениеТоваровТовары.Номенклатура.НаименованиеПолное КАК ТоварНаименование,
		|	уатПеремещениеТоваровТовары.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмеренияНаименование,
		|	ВЫРАЗИТЬ(уатПеремещениеТоваровТовары.Количество * уатПеремещениеТоваровТовары.ЕдиницаИзмерения.Коэффициент / уатПеремещениеТоваровТовары.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК ЧИСЛО(15, 3)) КАК КолЕдХрОстатков,
		|	0 КАК Сумма,
		|	уатПеремещениеТоваровТовары.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКодПоОКЕИ
		|ИЗ
		|	Документ.уатПеремещениеТоваров.Товары КАК уатПеремещениеТоваровТовары
		|ГДЕ
		|	уатПеремещениеТоваровТовары.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатПартииТоваровНаСкладах.Номенклатура КАК Номенклатура,
		|	уатПартииТоваровНаСкладах.Партия КАК Партия,
		|	уатПартииТоваровНаСкладах.Количество КАК Количество,
		|	уатПартииТоваровНаСкладах.Стоимость КАК Стоимость,
		|	уатПартииТоваровНаСкладах.СтоимостьУпр КАК СтоимостьУпр,
		|	уатПартииТоваровНаСкладах.Количество КАК ОсталосьКоличество,
		|	уатПартииТоваровНаСкладах.Стоимость КАК ОсталосьСумма
		|ИЗ
		|	РегистрНакопления.уатПартииТоваровНаСкладах КАК уатПартииТоваровНаСкладах
		|ГДЕ
		|	уатПартииТоваровНаСкладах.Регистратор = &Ссылка
		|	И уатПартииТоваровНаСкладах.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
		|
		|УПОРЯДОЧИТЬ ПО
		|	уатПартииТоваровНаСкладах.НомерСтроки
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатПеремещениеТоваров.Ссылка КАК Ссылка,
		|	уатПеремещениеТоваров.Номер КАК НомерДокумента,
		|	уатПеремещениеТоваров.Дата КАК ДатаДокумента,
		|	уатПеремещениеТоваров.Организация КАК Организация,
		|	уатПеремещениеТоваров.СкладОтправитель КАК ОтправительПодразделение,
		|	уатПеремещениеТоваров.СкладПолучатель КАК ПолучательПодразделение,
		|	уатПеремещениеТоваров.Отпустил КАК Отпустил,
		|	уатПеремещениеТоваров.Получил КАК Получил
		|ИЗ
		|	Документ.уатПеремещениеТоваров КАК уатПеремещениеТоваров
		|ГДЕ
		|	уатПеремещениеТоваров.Ссылка = &Ссылка";
		
		МассивРезультатов = мЗапрос.ВыполнитьПакет();
		ТабНоменклатурыДок = МассивРезультатов[0].Выгрузить();
		ТабПартийДок       = МассивРезультатов[1].Выгрузить();
		ВыборкаШапка       = МассивРезультатов[2].Выбрать();
		ВыборкаШапка.следующий();
		Для Каждого ТекСтрокаДок ИЗ ТабНоменклатурыДок Цикл
			Если ТекСтрокаДок.КолЕдХрОстатков = 0 тогда продолжить; КонецЕсли;
			Для Каждого ТекСтрокаПартии ИЗ ТабПартийДок Цикл
				Если ТекСтрокаПартии.Номенклатура <> ТекСтрокаДок.Номенклатура 
					ИЛИ ТекСтрокаПартии.ОсталосьКоличество = 0 тогда
					Продолжить;
				КонецЕсли;
				СписатьКол = Мин(ТекСтрокаПартии.ОсталосьКоличество,ТекСтрокаДок.КолЕдХрОстатков);
				Если СписатьКол = ТекСтрокаПартии.ОсталосьКоличество тогда
					ТекСтрокаДок.Сумма = ТекСтрокаДок.Сумма + ТекСтрокаПартии.ОсталосьСумма;
				Иначе
					ТекСтрокаДок.Сумма = ТекСтрокаДок.Сумма + ТекСтрокаПартии.Стоимость/ТекСтрокаПартии.Количество * СписатьКол;
					ТекСтрокаПартии.ОсталосьСумма = ТекСтрокаПартии.ОсталосьСумма - ТекСтрокаДок.Сумма;
				КонецЕсли;
				ТекСтрокаДок.КолЕдХрОстатков = ТекСтрокаДок.КолЕдХрОстатков - СписатьКол;
				ТекСтрокаПартии.ОсталосьКоличество = ТекСтрокаПартии.ОсталосьКоличество - СписатьКол;
			КонецЦикла;
		КонецЦикла;
		
		ТабличныйДокумент.ИмяПараметровПечати = "ПараметрыПечати_ПеремещениеТоваров_ТОРГ13";
		Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_ТОРГ13");
		
		// Выводим общие реквизиты шапки
		СведенияОбОрганизации = уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(ВыборкаШапка.Организация, ВыборкаШапка.ДатаДокумента);
		ОбластьМакета         = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакета.Параметры.Заполнить(ВыборкаШапка);
		ОбластьМакета.Параметры.ПредставлениеОрганизации = уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(ВыборкаШапка.Организация, ВыборкаШапка.ДатаДокумента));
		
		ПечатьПрефиксовВключена = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ТекущийДокумент.Организация, ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ВыводитьПрефиксПриПечати"));
		Если ПечатьПрефиксовВключена Тогда
			НомерНаПечать = ТекущийДокумент.Номер;
		Иначе
			НомерНаПечать = уатОбщегоНазначенияКлиентСервер.НомерДокументаНаПечать(ТекущийДокумент.Номер, Истина, Истина);
		КонецЕсли;
		
		ОбластьМакета.Параметры.НомерДокумента           = НомерНаПечать;
		ОбластьМакета.Параметры.ДатаДокумента            = ВыборкаШапка.ДатаДокумента;
		ОбластьМакета.Параметры.ОрганизацияПоОКПО        = СведенияОбОрганизации.КодПоОКПО;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		СтрокНаСтранице = 23;
		СтрокШапки      = 10;
		СтрокПодвала    = 9;
		НомерСтраницы   = 1;
		
		// Выводим заголовок таблицы
		ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ЗаголовокТаблицы.Параметры.НомерСтраницы = НСтр("en='Page ';ru='Страница '") + НомерСтраницы; 
		ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
		
		КоличествоСтрок = ТабНоменклатурыДок.Количество();
		
		Если КоличествоСтрок = 1 Тогда
			ПереноситьПоследнююСтроку = 0;
		Иначе
			ЦелыхСтраницСПодвалом     = Цел((СтрокШапки + КоличествоСтрок + СтрокПодвала) / СтрокНаСтранице);
			ЦелыхСтраницБезПодвала    = Цел((СтрокШапки + КоличествоСтрок - 1) / СтрокНаСтранице);
			ПереноситьПоследнююСтроку = ЦелыхСтраницСПодвалом - ЦелыхСтраницБезПодвала;
		КонецЕсли;
		
		// инициализация итогов по странице
		//ИтогКоличествоМестПоСтранице = 0;
		ИтогМассаБруттоПоСтранице    = 0;
		ИтогМассыНеттоПоСтранице     = 0;
		ИтогСуммыПоСтранице          = 0;
		
		// инициализация итогов по документу
		ИтогоКоличество  = 0;
		ИтогоМассаБрутто = 0;
		ИтогоМассаНетто  = 0;
		ИтогоСумма       = 0;
		
		Ном = 0;
		
		// Выводим многострочную часть документа
		ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогиПоСтранице");
		ОбластьМакета           = Макет.ПолучитьОбласть("Строка");
		
		// Выборка товаров
		Для Каждого ТекСтрокаДок ИЗ ТабНоменклатурыДок Цикл
			
			Если НЕ ЗначениеЗаполнено(ТекСтрокаДок.Номенклатура) Тогда
				ТекстНСТР = НСтр("en='In one of the rows value of products and services not filled - string when printing is missing.';ru='В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.'");
				уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР,,, СтатусСообщения.Важное);
				Продолжить;
			КонецЕсли;
			
			Ном = Ном + 1;
			// Начинаем новую страницу, если предыдущая строка была последней на странице
			// или пора переносить последнюю строку на последнюю страницу с подвалом.
			ЦелаяСтраница = (СтрокШапки + Ном - 1) / СтрокНаСтранице;
			
			Если (ЦелаяСтраница = Цел(ЦелаяСтраница))
				или ((ПереноситьПоследнююСтроку = 1) и (Ном = КоличествоСтрок)) Тогда
				
				//ОбластьИтоговПоСтранице.Параметры.ИтогКоличествоМестПоСтранице = ИтогКоличествоМестПоСтранице;
				ОбластьИтоговПоСтранице.Параметры.ИтогМассаБруттоПоСтранице    = ИтогМассаБруттоПоСтранице;
				ОбластьИтоговПоСтранице.Параметры.ИтогМассыНеттоПоСтранице     = ИтогМассыНеттоПоСтранице;
				ОбластьИтоговПоСтранице.Параметры.ИтогСуммыПоСтранице          = ИтогСуммыПоСтранице;
				
				ТабличныйДокумент.Вывести(ОбластьИтоговПоСтранице);
				
				// инициализация итогов по странице
				ИтогКоличествоМестПоСтранице = 0;
				ИтогМассаБруттоПоСтранице    = 0;
				ИтогМассаНеттоПоСтранице     = 0;
				ИтогСуммыПоСтранице          = 0;
				
				НомерСтраницы = НомерСтраницы + 1;
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ЗаголовокТаблицы.Параметры.НомерСтраницы = НСтр("en='Page ';ru='Страница '") + НомерСтраницы;
				ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
			КонецЕсли;
			
			ОбластьМакета.Параметры.Заполнить(ТекСтрокаДок);
			ОбластьМакета.Параметры.ТоварНаименование = ТекСтрокаДок.ТоварНаименование;
			
			Если ТекСтрокаДок.КоличествоМест = 0 Тогда
				Сумма = 0;
				Цена  = 0;
			Иначе
				Сумма = ТекСтрокаДок.Сумма;
				Цена  = Окр(Сумма / ТекСтрокаДок.КоличествоМест, 2);
			КонецЕсли;
			ОбластьМакета.Параметры.Цена  = Цена;
			ОбластьМакета.Параметры.Сумма = Сумма;
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			// Обновим итоги по странице
			//ИтогКоличествоМестПоСтранице = ИтогКоличествоМестПоСтранице + ВыборкаСтрокТовары.Количество;
			ИтогМассаБруттоПоСтранице    = ИтогМассаБруттоПоСтранице    + 0;
			ИтогМассыНеттоПоСтранице     = ИтогМассыНеттоПоСтранице     + 0;
			ИтогСуммыПоСтранице          = ИтогСуммыПоСтранице          + Сумма;
			
			// Обновим итогов по документу
			ИтогоКоличество  = ИтогоКоличество  + ТекСтрокаДок.КоличествоМест;
			ИтогоМассаБрутто = ИтогоМассаБрутто + 0;
			ИтогоМассаНетто  = ИтогоМассаНетто  + 0;
			ИтогоСумма       = ИтогоСумма       + Сумма;
			
		КонецЦикла;
		
		//ОбластьИтоговПоСтранице.Параметры.ИтогКоличествоМестПоСтранице = ИтогКоличествоМестПоСтранице;
		ОбластьИтоговПоСтранице.Параметры.ИтогМассаБруттоПоСтранице    = ИтогМассаБруттоПоСтранице;
		ОбластьИтоговПоСтранице.Параметры.ИтогМассыНеттоПоСтранице     = ИтогМассыНеттоПоСтранице;
		ОбластьИтоговПоСтранице.Параметры.ИтогСуммыПоСтранице          = ИтогСуммыПоСтранице;
		
		ТабличныйДокумент.Вывести(ОбластьИтоговПоСтранице);
		
		// Выводим итоги по документу в целом
		ОбластьМакета = Макет.ПолучитьОбласть("Всего");
		//ОбластьМакета.Параметры.ИтогоКоличествоМест = ИтогоКоличество;
		ОбластьМакета.Параметры.ИтогоМассаБрутто    = ИтогоМассаБрутто;
		ОбластьМакета.Параметры.ИтогоМассаНетто     = ИтогоМассаНетто;
		ОбластьМакета.Параметры.ИтогоСумма          = ИтогоСумма;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Выводим подвал документа
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		ОбластьМакета.Параметры.Заполнить(ВыборкаШапка);
		ОбластьМакета.Параметры.ФИООтправителя = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ТекущийДокумент.Отпустил);
		ОбластьМакета.Параметры.ФИОПолучателя  = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ТекущийДокумент.Получил);
		ОбластьМакета.Параметры.ДолжностьОтправителя = ТекущийДокумент.Отпустил.Должность;
		ОбластьМакета.Параметры.ДолжностьПолучателя  = ТекущийДокумент.Получил.Должность;
		ОбластьМакета.Параметры.ИтогоСуммаПрописью = уатОбщегоНазначенияТиповые.уатСформироватьСуммуПрописью(ИтогоСумма,
			Константы.ВалютаРегламентированногоУчета.Получить());
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Зададим параметры макета
		ТабличныйДокумент.ПолеСверху = 0;
		ТабличныйДокумент.ПолеСлева  = 0;
		ТабличныйДокумент.ПолеСнизу  = 0;
		ТабличныйДокумент.ПолеСправа = 0;
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ТекущийДокумент);
		
	КонецЦикла;
	                                                                            
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатнаяФорма()

Функция ПечатьСборочныйЛист(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_ПеремещениеТоваров";
	
	ПервыйДокумент = Истина;
	
	Для Каждого ТекущийДокумент Из МассивОбъектов Цикл
		Если НЕ ТекущийДокумент.СкладОтправитель.АдресноеХранение Тогда
			ТекстНСТР = НСтр("ru='%1 не выведен на печать: для склада-отправителя %2 не используется адресное хранение.'");
			ТекстНСТР = СтрШаблон(ТекстНСТР, ТекущийДокумент, ТекущийДокумент.СкладОтправитель);
			уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР,,, СтатусСообщения.Важное);
			Продолжить;
		КонецЕсли;
		
		Если НЕ ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатПеремещениеТоваров.Номер,
		|	уатПеремещениеТоваров.Дата,
		|	уатПеремещениеТоваров.Организация,
		|	уатПеремещениеТоваров.СкладОтправитель КАК Склад,
		|	уатПеремещениеТоваров.Товары.(
		|		НомерСтроки,
		|		Номенклатура,
		|		Номенклатура.НаименованиеПолное КАК Товар,
		|		Номенклатура.Код КАК Код,
		|		Номенклатура.Артикул КАК Артикул,
		|		Количество,
		|		ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
		|		ЯчейкаОтправитель.Представление КАК ЯчейкаОтправитель
		|	)
		|ИЗ
		|	Документ.уатПеремещениеТоваров КАК уатПеремещениеТоваров
		|ГДЕ
		|	уатПеремещениеТоваров.Ссылка = &ТекущийДокумент
		|
		|УПОРЯДОЧИТЬ ПО
		|	уатПеремещениеТоваров.Товары.НомерСтроки");
		
		ТекстКодАртикул = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(
			ПользователиКлиентСервер.АвторизованныйПользователь(), "РежимВыводаКодаВДокументах");
		Если ТекстКодАртикул = Перечисления.уатРежимыВыводаКодаВДокументах.Артикул Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "Номенклатура.Код", "Номенклатура.Артикул");
		КонецЕсли;
		
		Запрос.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент.Ссылка);
		
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();
		ВыборкаСтрокТовары = Шапка.Товары.Выбрать();
		
		ТабличныйДокумент = Новый ТабличныйДокумент;
		ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПеремещениеТоваров_СборочныйЛист";
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.уатПеремещениеТоваров.ПФ_MXL_СборочныйЛист");
		
		// Печать штрихкода
		Если уатЗащищенныеФункцииСервер_проф.ИспользоватьШтрихкодированиеОбъекта(ТекущийДокумент) Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокШтрихкод");
			уатЗащищенныеФункцииСервер_проф.ОтобразитьШКнаПФ(ОбластьМакета, ТекущийДокумент);
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		// Выводим шапку накладной
		ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(Шапка,
			НСтр("en='Invoice on inner movement';ru='Сборочный лист'"));
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		ОбластьЗаголовок = Макет.ПолучитьОбласть("Склад");
		ОбластьЗаголовок.Параметры.Склад = Шапка.Склад;
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		// Вывести табличную часть
		ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		
		// Выборка товаров
		Пока ВыборкаСтрокТовары.Следующий() Цикл
			ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
			ОбластьСтрока.Параметры.Заполнить(ВыборкаСтрокТовары);
			ТабличныйДокумент.Вывести(ОбластьСтрока);
		КонецЦикла;
		
		// Вывести подвал
		ОбластьПодвал = Макет.ПолучитьОбласть("Подвал");
		ТабличныйДокумент.Вывести(ОбластьПодвал);
		
		// Вывести подписи
		ОбластьПодписи = Макет.ПолучитьОбласть("Подписи");
		ОбластьПодписи.Параметры.Отпустил = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ТекущийДокумент.Отпустил);
		ОбластьПодписи.Параметры.Получил  = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ТекущийДокумент.Получил);
		ТабличныйДокумент.Вывести(ОбластьПодписи);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ТекущийДокумент);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Функция помещает необходимые данные в структуру. Структура помещается во временное хранилище.
//
// Возвращаемое значение:
//   Строка - адрес структуры данных во временном хранилище.
//
Функция ДанныеДляПечатиЭтикеток(МассивДокументов) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Товары.Количество КАК КоличествоЭтикеток,
	|	Товары.Количество КАК КоличествоВДокументе
	|ИЗ
	|	Документ.уатПеремещениеТоваров.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка В(&МассивДокументов)";
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	мсвТовары = Запрос.Выполнить().Выгрузить();
	
	// Подготовка данных для заполенения табличной части обработки печати этикеток.
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("Товары", мсвТовары);
	СтруктураРезультат.Вставить("Организация", МассивДокументов[0].Организация);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураРезультат);
	
КонецФункции

#КонецОбласти

#КонецЕсли
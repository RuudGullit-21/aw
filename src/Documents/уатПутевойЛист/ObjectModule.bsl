	
#Область ОписаниеПеременных

Перем ДанныеИзменились Экспорт;// Признак изменения данных документа (экспорт сделан для использования формой объекта).
Перем мВремяВНаряде Экспорт;// Время в наряде(общее время). Используется для расчета по временным параметрам выработки.
Перем мВремяВРаботе Экспорт; // Время в работе (рабочее). Используется для расчета по временным параметрам выработки.
Перем мВремяВПростое Экспорт; // Время в простое (простои). Используется для расчета по временным параметрам выработки.
Перем мВремяВПростоеСВклДвигателем Экспорт; // Время в простое с вкл. двигателем (простои).
Перем мВремяНочь Экспорт; // Время ночное. Используется для доп. начислений за ночную выработку.
Перем мКоличествоДней Экспорт; // Количество дней по путевому листу
Перем мПробегОбщий Экспорт; // Общий пробег
Перем мТаблицаПоСписаниюГСМ;
Перем ПодставлятьОбщийПробегВПЛпоGPS;

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

#Область РасчетИтогов

// Функция рассчитывает итоги работы по пут. листу
Функция РасчетИтогов(Отказ, флЗаписывать = Истина) Экспорт 
	Заголовок = НСтр("en='Errors in calculation of balance of the work by waybill №';ru='Ошибки при расчете итогов работы по путевому листу №'") + Номер + " :";
	
	ПроверкаКорректностиПЛ_РасчетИтогов(Заголовок, Отказ);
	
	Если Не Отказ Тогда
		РасчетВыработкиТС(Отказ);
		РасчетВыработкиСотрудников(Отказ);
		РасчетРасходаГСМ(Заголовок, Отказ);
		РасчетРасходаТЖ();
		РасчетЗП(Отказ);
	КонецЕсли;
	
	Рассчитан = Не Отказ;
	Если НЕ Рассчитан Тогда
		ТекстНСТР = СтрШаблон(НСтр("en='Document ""%1"">: was not calculate.';ru='Документ ""%1"">: не был рассчитан.'"), ЭтотОбъект);
		уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР,,, СтатусСообщения.Внимание);
	КонецЕсли;
	
	Если флЗаписывать И (НЕ Отказ) Тогда
		Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
	
	Возврат Рассчитан;
КонецФункции //РасчетИтогов()

// Процедура рассчитывает выработку ТС
//
Процедура РасчетВыработкиТС(Отказ) Экспорт
	Перем мТаблицаТТД;
	
	Если ТранспортноеСредство.Модель.НаличиеСпидометра Тогда
		мПробегОбщий = уатОбщегоНазначения.уатРазностьПоказанийСчетчика(СпидометрВыезда, СпидометрВозвращения);
	Иначе
		мПробегОбщий = 0;
	КонецЕсли;
	
	уатПутевыеЛисты.РасчитатьВременныеПараметры(ЭтотОбъект);
	
	// удалим строки выработки с ТС/прицепами, которых нет в ПЛ
	мсвТС = Новый Массив;
	мсвТС.Добавить(ТранспортноеСредство);
	Для Каждого ТекСтрока Из Прицепы Цикл
		Если ЗначениеЗаполнено(ТекСтрока.ТС) Тогда
			мсвТС.Добавить(ТекСтрока.ТС);
		КонецЕсли;
	КонецЦикла;
	Для Каждого ТекСтрока Из Задание Цикл
		Если ТекСтрока.Выполнено Тогда
			Если ЗначениеЗаполнено(ТекСтрока.Прицеп1) Тогда
				мсвТС.Добавить(ТекСтрока.Прицеп1);
			КонецЕсли;
			Если ЗначениеЗаполнено(ТекСтрока.Прицеп2) Тогда
				мсвТС.Добавить(ТекСтрока.Прицеп2);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Сч = ВыработкаТС.Количество() - 1;
	Пока Сч >= 0 Цикл
		ТекСтрокаВыработка = ВыработкаТС[Сч];
		Если мсвТС.Найти(ТекСтрокаВыработка.ТС) = Неопределено Тогда
			ВыработкаТС.Удалить(ТекСтрокаВыработка);
		КонецЕсли;
		Сч = Сч - 1;
	КонецЦикла;
	
	СтруктураОбъектовНастроек = Новый Структура;
	СтруктураОбъектовНастроек.Вставить("Организация", Организация);
	Если ЗначениеЗаполнено(Подразделение) Тогда 
		СтруктураОбъектовНастроек.Вставить("Подразделение", Подразделение);
	Иначе
		СтруктураОбъектовНастроек.Вставить("Подразделение", ТранспортноеСредство.Подразделение);
	КонецЕсли;
	ПраваОрганизации = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек);
	
	Если уатПраваИНастройки.уатПраво("АвтообновлениеПЛпоGPS", ПраваОрганизации) Тогда 
		ОбновитьДанныеВыработкиПоGPS();
	КонецЕсли;
	
	ПодставлятьВремяВРаботеВПЛпоGPS = уатПраваИНастройки.уатПраво("ПодставлятьВремяВРаботеВПЛпоGPS", ПраваОрганизации);
	ПодставлятьОбщийПробегВПЛпоGPS  = ПодставлятьОбщийПробегВПЛпоGPS(ПраваОрганизации); 
	
	// расчет по заданию
	Если РежимРасчетаВыработки = Перечисления.уатРежимыРасчетаВыработкиПЛ.ПоЗаданию Тогда
		РасчетВыработкиТС_ПоЗаданию(Отказ, ПодставлятьВремяВРаботеВПЛпоGPS, ПодставлятьОбщийПробегВПЛпоGPS);
		
	// расчет выработки по ТТД
	ИначеЕсли РежимРасчетаВыработки = Перечисления.уатРежимыРасчетаВыработкиПЛ.ПоТТД Тогда
		РасчетВыработкиТС_ПоТТД(Отказ, ПодставлятьВремяВРаботеВПЛпоGPS, ПодставлятьОбщийПробегВПЛпоGPS);
		
	// расчет ручной
	ИначеЕсли РежимРасчетаВыработки = Перечисления.уатРежимыРасчетаВыработкиПЛ.Ручной Тогда
		РасчетВыработкиТС_Ручной(Отказ, ПодставлятьВремяВРаботеВПЛпоGPS, ПодставлятьОбщийПробегВПЛпоGPS);
		
	КонецЕсли;
	
	// расчет произвольных параметров выработки
	РезультатЗапросаПоПараметрамСПроизвольнымРасчетом = ПолучитьПараметрыВыработкиСПроизвольнымРасчетом();
	
	Если РежимРасчетаВыработки <> Перечисления.уатРежимыРасчетаВыработкиПЛ.НеРассчитывать Тогда
		// произвольные параметры выработки (по шапке)
		ПараметрыСРасчетомПоШапке = РезультатЗапросаПоПараметрамСПроизвольнымРасчетом[1].Выгрузить();
		Для Каждого Параметр Из ПараметрыСРасчетомПоШапке Цикл
			Если Параметр.ДействуетНаТС Тогда
				ЗначениеПараметра = ВычислитьПроизвольныйПараметрВыработкиПоШапке(Параметр);
				Если НЕ ЗначениеПараметра = "ошибка" Тогда
					ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Параметр.Ссылка, ЗначениеПараметра);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		// произвольные параметры выработки (по заданию)
		ПараметрыСРасчетомПоЗаданию = РезультатЗапросаПоПараметрамСПроизвольнымРасчетом[0].Выгрузить();
		ТаблицаЗаданиеСвернутая = ПолучитьЗаданиеСвернутоеСУчетомЭтапов(Ложь);
		Для Каждого ТекСтрЗадание Из ТаблицаЗаданиеСвернутая Цикл
			Если НЕ ТекСтрЗадание.Выполнено Тогда
				Продолжить;
			КонецЕсли;
			Для Каждого Параметр Из ПараметрыСРасчетомПоЗаданию Цикл
				Если Параметр.ДействуетНаТС Тогда
					ЗначениеПараметра = ВычислитьПроизвольныйПараметрВыработки(Параметр, ТекСтрЗадание);
					Если НЕ ЗначениеПараметра = "ошибка" Тогда
						ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Параметр.Ссылка, ЗначениеПараметра,
							Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут, ВидПеревозки, НаправлениеПеревозки",
							ТекСтрЗадание.Подразделение, ТекСтрЗадание.Контрагент, ТекСтрЗадание.ОбъектСтроительства,
							ТекСтрЗадание.Маршрут, ТекСтрЗадание.ВидПеревозки, ТекСтрЗадание.НаправлениеПеревозки), Ложь);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		// произвольные параметры выработки (по ТТД)
		ПараметрыСРасчетомПоТТД = РезультатЗапросаПоПараметрамСПроизвольнымРасчетом[2].Выгрузить();
		ПараметрыОтбора = Новый Структура("ДействуетНаТС", Истина);
		ПараметрыДействующиеНаТС = ПараметрыСРасчетомПоТТД.НайтиСтроки(ПараметрыОтбора);
		Если ПараметрыДействующиеНаТС.Количество() И ПроверкаТТД(мТаблицаТТД, ПараметрыДействующиеНаТС, "выработки ТС") Тогда
			Для Каждого ТекСтр из мТаблицаТТД Цикл
				мТТД = ТекСтр.ТТД;
				Для Каждого ТекСтрЗадание из мТТД.Выработка Цикл
					Если ТекСтрЗадание.ПутЛист <> Ссылка Тогда
						Продолжить;
					КонецЕсли;
					Для Каждого Параметр Из ПараметрыДействующиеНаТС Цикл
						Если Параметр.ДействуетНаТС Тогда
							ЗначениеПараметра = ВычислитьПроизвольныйПараметрВыработки(Параметр, ТекСтрЗадание);
							Если НЕ ЗначениеПараметра = "ошибка" Тогда
								ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Параметр.Ссылка, ЗначениеПараметра,
									Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут, ВидПеревозки, НаправлениеПеревозки",
									Подразделение, мТТД.Контрагент, ТекСтрЗадание.ОбъектСтроительства, ТекСтрЗадание.Маршрут, ТекСтрЗадание.ВидПеревозки, ТекСтрЗадание.НаправлениеПеревозки), Ложь);
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	СвернутьВыработкуТСпоУчетнойПолитике();
КонецПроцедуры //РасчетВыработкиТС()

// Процедура добавляет строку выработки ТС
// ДопАналитика: структура, содержащая ключи Подразделение, Контрагент, ОбъектСтроительства, Маршрут
//	флУдалитьСтрокиБезДопАналитик - если Истина, тогда перед добавлением новой строки выработки будут очищены
//		не только строки, соотв. структуре ДопАналитика, но также и все остальные строки, для которых
//		значения ТС и Параметра выработки совпадают с входными параметрами. Имеет смысл только для значения
//		флЗамещать = Истина
//
Процедура ЗаписатьСтрокуВыработкиТС(ВыбТС, ПараметрВыработки, КоличествоВыработки, ДопАналитика = Неопределено, Знач флЗамещать = Истина, флУдалитьСтрокиБезДопАналитик = Ложь) Экспорт
	ДопПараметры = Новый Структура("флЗамещать, флУдалитьСтрокиБезДопАналитик", флЗамещать, флУдалитьСтрокиБезДопАналитик);
	уатПутевыеЛисты.ЗаписатьСтрокуВыработкиТС(ВыработкаТС, ВыбТС, ПараметрВыработки, КоличествоВыработки, ДопАналитика, ДопПараметры);
КонецПроцедуры

// Процедура рассчитывает выработку сотрудников
//
Процедура РасчетВыработкиСотрудников(Отказ) Экспорт
	Перем мТаблицаТТД;
	
	Если ТранспортноеСредство.Модель.НаличиеСпидометра Тогда
		мПробегОбщий = уатОбщегоНазначения.уатРазностьПоказанийСчетчика(СпидометрВыезда,СпидометрВозвращения);
	Иначе
		мПробегОбщий = 0;
	КонецЕсли;
	
	уатПутевыеЛисты.РасчитатьВременныеПараметры(ЭтотОбъект);
	РасчетФОВ();
	
	// составим список задействованных сотрудников
	списСотрудники = Новый СписокЗначений();
	списСотрудники.Добавить(Водитель1);
	Если ЗначениеЗаполнено(Водитель2) Тогда
		списСотрудники.Добавить(Водитель2);
	КонецЕсли;
	Если ЗначениеЗаполнено(Сотрудник1) Тогда
		списСотрудники.Добавить(Сотрудник1);
	КонецЕсли;
	Если ЗначениеЗаполнено(Сотрудник2) Тогда
		списСотрудники.Добавить(Сотрудник2);
	КонецЕсли;
	
	РезультатЗапросаПоПараметрамСПроизвольнымРасчетом = ПолучитьПараметрыВыработкиСПроизвольнымРасчетом();
	
	// удалим строки выработки с водителями/сотрудниками, которых нет в ПЛ
	мсвСотрудников = списСотрудники.ВыгрузитьЗначения();
	Сч = ВыработкаСотрудников.Количество() - 1;
	Пока Сч >= 0 Цикл
		ТекСтрокаВыработка = ВыработкаСотрудников[Сч];
		Если мсвСотрудников.Найти(ТекСтрокаВыработка.Сотрудник) = Неопределено Тогда
			ВыработкаСотрудников.Удалить(ТекСтрокаВыработка);
		КонецЕсли;
		Сч = Сч - 1;
	КонецЦикла;
	
	// расчет по заданию
	Если РежимРасчетаВыработки = Перечисления.уатРежимыРасчетаВыработкиПЛ.ПоЗаданию Тогда
		РасчетВыработкиСотрудников_ПоЗаданию(Отказ, списСотрудники, РезультатЗапросаПоПараметрамСПроизвольнымРасчетом);
		
		// расчет выработки по ТТД
	ИначеЕсли РежимРасчетаВыработки = Перечисления.уатРежимыРасчетаВыработкиПЛ.ПоТТД Тогда
		РасчетВыработкиСотрудников_ПоТТД(Отказ, списСотрудники, РезультатЗапросаПоПараметрамСПроизвольнымРасчетом);
		
		// расчет ручной
	ИначеЕсли РежимРасчетаВыработки = Перечисления.уатРежимыРасчетаВыработкиПЛ.Ручной Тогда
		РасчетВыработкиСотрудников_Ручной(Отказ, списСотрудники, РезультатЗапросаПоПараметрамСПроизвольнымРасчетом);
		
	КонецЕсли;
	
	// расчет произвольных параметров выработки
	Если РежимРасчетаВыработки <> Перечисления.уатРежимыРасчетаВыработкиПЛ.НеРассчитывать Тогда
		// произвольные параметры выработки (по шапке)
		ПараметрыСРасчетомПоШапке = РезультатЗапросаПоПараметрамСПроизвольнымРасчетом[1].Выгрузить();
		Для сч = 0 По списСотрудники.Количество() - 1 Цикл
			мСотрудник = списСотрудники[сч].Значение;
			Для Каждого Параметр Из ПараметрыСРасчетомПоШапке Цикл
				Если Параметр.ДействуетНаСотрудников Тогда
					ЗначениеПараметра = ВычислитьПроизвольныйПараметрВыработкиПоШапке(Параметр);
					Если НЕ ЗначениеПараметра = "ошибка" Тогда
						ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Параметр.Ссылка, ЗначениеПараметра);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		// произвольные параметры выработки (по заданию)
		ПараметрыСРасчетомПоЗаданию = РезультатЗапросаПоПараметрамСПроизвольнымРасчетом[0].Выгрузить();
		Для сч = 0 По списСотрудники.Количество() - 1 Цикл
			мСотрудник = списСотрудники[сч].Значение;
			ТаблицаЗаданиеСвернутая = ПолучитьЗаданиеСвернутоеСУчетомЭтапов(Ложь);
			Для Каждого ТекСтрЗадание Из ТаблицаЗаданиеСвернутая Цикл
				Если НЕ ТекСтрЗадание.Выполнено Тогда
					Продолжить;
				КонецЕсли;
				Для Каждого Параметр Из ПараметрыСРасчетомПоЗаданию Цикл
					Если Параметр.ДействуетНаСотрудников Тогда
						ЗначениеПараметра = ВычислитьПроизвольныйПараметрВыработки(Параметр, ТекСтрЗадание);
						Если НЕ ЗначениеПараметра = "ошибка" Тогда
							ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Параметр.Ссылка, ЗначениеПараметра,
								Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут, ВидПеревозки, НаправлениеПеревозки",
								ТекСтрЗадание.Подразделение, ТекСтрЗадание.Контрагент, ТекСтрЗадание.ОбъектСтроительства,
								ТекСтрЗадание.Маршрут, ТекСтрЗадание.ВидПеревозки, ТекСтрЗадание.НаправлениеПеревозки), Ложь);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
		// произвольные параметры выработки (по ТТД)
		ПараметрыСРасчетомПоТТД = РезультатЗапросаПоПараметрамСПроизвольнымРасчетом[2].Выгрузить();	
		ПараметрыОтбора = Новый Структура("ДействуетНаСотрудников", Истина);
		ПараметрыДействующиеНаСотрудников = ПараметрыСРасчетомПоТТД.НайтиСтроки(ПараметрыОтбора);
		Если ПараметрыДействующиеНаСотрудников.Количество() И ПроверкаТТД(мТаблицаТТД, ПараметрыДействующиеНаСотрудников, "выработки сотрудников") Тогда
			Для Каждого ТекСтр из мТаблицаТТД Цикл
				Для сч = 0 По списСотрудники.Количество() - 1 Цикл
					мСотрудник = списСотрудники[сч].Значение;
					мТТД = ТекСтр.ТТД;
					Для Каждого ТекСтрЗадание из мТТД.Выработка Цикл
						Если ТекСтрЗадание.ПутЛист <> Ссылка Тогда
							Продолжить;
						КонецЕсли;
						
						Для Каждого Параметр Из ПараметрыДействующиеНаСотрудников Цикл
							Если Параметр.ДействуетНаСотрудников Тогда
								ЗначениеПараметра = ВычислитьПроизвольныйПараметрВыработки(Параметр, ТекСтрЗадание);
								Если НЕ ЗначениеПараметра = "ошибка" Тогда
									ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Параметр.Ссылка, ЗначениеПараметра,
										Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут, ВидПеревозки, НаправлениеПеревозки",
										Подразделение, мТТД.Контрагент, ТекСтрЗадание.ОбъектСтроительства, ТекСтрЗадание.Маршрут,
										ТекСтрЗадание.ВидПеревозки, ТекСтрЗадание.НаправлениеПеревозки), Ложь);
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
					КонецЦикла;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	СвернутьВыработкуСотрудниковпоУчетнойПолитике();
КонецПроцедуры //РасчетВыработкиСотрудников()

// Процедура записывает строку выработки сотрудника
//	флУдалитьСтрокиБезДопАналитик - если Истина, тогда перед добавлением новой строки выработки будут очищены
//		не только строки, соотв. структуре ДопАналитика, но также и все остальные строки, для которых
//		значения сотрудника и Параметра выработки совпадают с входными параметрами. Имеет смысл только для значения
//		флЗамещать = Истина
Процедура ЗаписатьСтрокуВыработкиСотрудника(ВыбСотрудник, ПараметрВыработки, КоличествоВыработки, ДопАналитика = Неопределено, Знач флЗамещать = Истина, флУдалитьСтрокиБезДопАналитик = Ложь) Экспорт
	ВыбПодразделение = Неопределено;
	ВыбКонтрагент = Неопределено;
	ВыбОбъектСтроительства = Неопределено;
	ВыбМаршрут = Неопределено;
	ВыбВидПеревозки = Неопределено;
	ВыбНаправлениеПеревозки = Неопределено;
	
	Если ДопАналитика <> Неопределено И ДопАналитика.Свойство("Подразделение") Тогда
		ВыбПодразделение = ДопАналитика.Подразделение;
	КонецЕсли;
	Если ДопАналитика <> Неопределено И ДопАналитика.Свойство("Контрагент") Тогда
		ВыбКонтрагент = ДопАналитика.Контрагент;
	КонецЕсли;
	Если ДопАналитика <> Неопределено И ДопАналитика.Свойство("ОбъектСтроительства") Тогда
		ВыбОбъектСтроительства = ДопАналитика.ОбъектСтроительства;
	КонецЕсли;
	Если ДопАналитика <> Неопределено И ДопАналитика.Свойство("Маршрут") Тогда
		ВыбМаршрут = ДопАналитика.Маршрут;
	КонецЕсли;
	Если ДопАналитика <> Неопределено И ДопАналитика.Свойство("ВидПеревозки") Тогда
		ВыбВидПеревозки = ДопАналитика.ВидПеревозки;
	КонецЕсли;
	Если ДопАналитика <> Неопределено И ДопАналитика.Свойство("НаправлениеПеревозки") Тогда
		ВыбНаправлениеПеревозки = ДопАналитика.НаправлениеПеревозки;
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("Сотрудник, ПараметрВыработки", ВыбСотрудник, ПараметрВыработки);
	Если ЗначениеЗаполнено(ВыбПодразделение) Тогда
		СтруктураОтбора.Вставить("Подразделение", ВыбПодразделение);
	Иначе
		СтруктураОтбора.Вставить("Подразделение", Справочники.ПодразделенияОрганизаций.ПустаяСсылка());
	КонецЕсли;
	Если ЗначениеЗаполнено(ВыбКонтрагент) Тогда
		СтруктураОтбора.Вставить("Контрагент", ВыбКонтрагент);
	Иначе
		СтруктураОтбора.Вставить("Контрагент", Справочники.Контрагенты.ПустаяСсылка());
	КонецЕсли;
	Если ЗначениеЗаполнено(ВыбОбъектСтроительства) Тогда
		СтруктураОтбора.Вставить("ОбъектСтроительства", ВыбОбъектСтроительства);
	Иначе
		СтруктураОтбора.Вставить("ОбъектСтроительства", Справочники.уатОбъектыСтроительства.ПустаяСсылка());
	КонецЕсли;
	Если ЗначениеЗаполнено(ВыбМаршрут) Тогда
		СтруктураОтбора.Вставить("Маршрут", ВыбМаршрут);
	Иначе
		СтруктураОтбора.Вставить("Маршрут", Справочники.уатМаршруты.ПустаяСсылка());
	КонецЕсли;
	Если ЗначениеЗаполнено(ВыбВидПеревозки) Тогда
		СтруктураОтбора.Вставить("ВидПеревозки", ВыбВидПеревозки);
	Иначе
		СтруктураОтбора.Вставить("ВидПеревозки", Справочники.уатВидыПеревозок.ПустаяСсылка());
	КонецЕсли;
	Если ЗначениеЗаполнено(ВыбНаправлениеПеревозки) Тогда
		СтруктураОтбора.Вставить("НаправлениеПеревозки", ВыбНаправлениеПеревозки);
	Иначе
		СтруктураОтбора.Вставить("НаправлениеПеревозки", Справочники.уатНаправленияПеревозок.ПустаяСсылка());
	КонецЕсли;
	
	мМассивСтрок = ВыработкаСотрудников.НайтиСтроки(СтруктураОтбора);
	Если мМассивСтрок.Количество() = 0 Тогда
		ТекСтрокаВыработки = ВыработкаСотрудников.Добавить();
		ТекСтрокаВыработки.Сотрудник = ВыбСотрудник;
		ТекСтрокаВыработки.ПараметрВыработки = ПараметрВыработки;
		ТекСтрокаВыработки.Подразделение = ВыбПодразделение;
		ТекСтрокаВыработки.Контрагент = ВыбКонтрагент;
		ТекСтрокаВыработки.ОбъектСтроительства = ВыбОбъектСтроительства;
		ТекСтрокаВыработки.Маршрут = ВыбМаршрут;
		ТекСтрокаВыработки.ВидПеревозки = ВыбВидПеревозки;
		ТекСтрокаВыработки.НаправлениеПеревозки = ВыбНаправлениеПеревозки;
	Иначе
		ТекСтрокаВыработки = мМассивСтрок[0];
	КонецЕсли;
	Если флЗамещать Тогда
		// Очистим все строки с указанным сотрудником и парам. выработки, кроме найденной строки
		Если флУдалитьСтрокиБезДопАналитик Тогда
			СтруктураОтбора = Новый Структура("Сотрудник, ПараметрВыработки", ВыбСотрудник, ПараметрВыработки);
			мМассивСтрок = ВыработкаСотрудников.НайтиСтроки(СтруктураОтбора);
			Для Каждого ТекСтрока Из мМассивСтрок Цикл
				Если ТекСтрока <> ТекСтрокаВыработки Тогда
					ВыработкаСотрудников.Удалить(ТекСтрока);
				КонецЕсли;
			КонецЦикла;
			// чистим заодно и доп. аналитики
			ТекСтрокаВыработки.Подразделение = Неопределено;
			ТекСтрокаВыработки.Контрагент = Неопределено;
			ТекСтрокаВыработки.ОбъектСтроительства = Неопределено;
			ТекСтрокаВыработки.Маршрут = Неопределено;
			ТекСтрокаВыработки.ВидПеревозки = Неопределено;
			ТекСтрокаВыработки.НаправлениеПеревозки = Неопределено;
		КонецЕсли;
		ТекСтрокаВыработки.Количество = КоличествоВыработки;
	Иначе //приплюсуем к тому что есть уже
		ТекСтрокаВыработки.Количество = ТекСтрокаВыработки.Количество + КоличествоВыработки;
	КонецЕсли;
	
	Если ТекСтрокаВыработки.Количество = 0 Тогда
		ВыработкаСотрудников.Удалить(ТекСтрокаВыработки);
	Иначе
		мПараметрВыработки = уатОбщегоНазначения.уатПараметрыВыработкиВодителей();
		мМассивПараметров = мПараметрВыработки.НайтиСтроки(Новый СТруктура("ПараметрВыработки", ТекСтрокаВыработки.ПараметрВыработки));
		Если мМассивПараметров.Количество() = 0 Тогда
			ВыработкаСотрудников.Удалить(ТекСтрокаВыработки);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры //ЗаписатьСтрокуВыработкиСотрудника()

// Процедура рассчитывает расход ГСМ
Процедура РасчетРасходаГСМ(Заголовок, Отказ) Экспорт 
	
	// очищаем строки с ненайденными ТС и оборудованием
	мсвТС = Новый Массив;
	Если ЗначениеЗаполнено(ТранспортноеСредство) Тогда
		мсвТС.Добавить(ТранспортноеСредство);
	КонецЕсли;
	Для Каждого ТекПрицеп Из Прицепы Цикл
		Если ЗначениеЗаполнено(ТекПрицеп.ТС) Тогда
			мсвТС.Добавить(ТекПрицеп.ТС);
		КонецЕсли;
	КонецЦикла;
	Для Каждого ТекСтрокаЗадание Из Задание Цикл
		Если ЗначениеЗаполнено(ТекСтрокаЗадание.Прицеп1) Тогда
			мсвТС.Добавить(ТекСтрокаЗадание.Прицеп1);
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекСтрокаЗадание.Прицеп2) Тогда
			мсвТС.Добавить(ТекСтрокаЗадание.Прицеп2);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекСтрокаРасходГСМ Из РасходГСМ Цикл
		Если мсвТС.Найти(ТекСтрокаРасходГСМ.ТС) = Неопределено Тогда
			РасходГСМ.Удалить(ТекСтрокаРасходГСМ);
		КонецЕсли;
	КонецЦикла;
	
	СтруктураОбъектовНастроек = Новый Структура;
	СтруктураОбъектовНастроек.Вставить("Организация", Организация);
	Если ЗначениеЗаполнено(Подразделение) Тогда 
		СтруктураОбъектовНастроек.Вставить("Подразделение", Подразделение);
	Иначе
		СтруктураОбъектовНастроек.Вставить("Подразделение", ТранспортноеСредство.Подразделение);
	КонецЕсли;
	
	ПраваОрганизации = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек);
	Если уатПраваИНастройки.уатПраво("АвтообновлениеПЛпоGPS", ПраваОрганизации) Тогда 
		ОбновитьДанныеПоРасходуГСМпоGPS();
	КонецЕсли;
	
	Если НеПересчитыватьРасходГСМ Тогда
		ТекстНСТР = СтрШаблон(НСтр("en='Calculation of fuels consumption on waybill №%1 failed: set checked box ""Not recalculate fuels consumption""';ru='Расчет расхода ГСМ по путевому листу №%1 не выполнен: установлен флажок ""Не пересчитывать расход ГСМ""'"), Номер);
		уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР,,, СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	СтруктураПолей = Новый Структура("ТС, ГСМ");
	уатОбщегоНазначенияТиповые.уатПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "РасходГСМ", СтруктураПолей, Отказ, Заголовок);
	Если Отказ Тогда Возврат КонецЕсли;
	
	ФлагТопливоАктивно = Ложь;
	Для Каждого ТекСтрока Из РасходГСМ Цикл
		Если ТекСтрока.ТС = ТранспортноеСредство И ТекСтрока.Активен Тогда
			ФлагТопливоАктивно = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ФлагТопливоАктивно Тогда
		ТекстНСТР = НСтр("en='In table ""Movement of fuels"" for vehicles not listed active fuel to calculate!';ru='В таблице ""Движение ГСМ"" для автомобиля не указано активное топливо для расчета!'");
		уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР,,, СтатусСообщения.Важное);
	КонецЕсли;
	
	ПредупреждатьПриПревышенииУровняТопливаВБаке = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, ПланыВидовХарактеристик.уатПраваИНастройки.ПредупреждатьПриПревышенииУровняТопливаВБаке);
	ТочностьОстатковТоплива = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, ПланыВидовХарактеристик.уатПраваИНастройки.ТочностьОстатковТоплива);
	
	ПараметрыРасчетаГСМ = уатПутевыеЛисты.ПолучитьПараметрыРасчетаРасходаГСМ(ЭтотОбъект);
	
	Для Каждого ТекСтрока Из РасходГСМ Цикл
		Если уатГСМ.ЭтоТехническаяЖидкость(ТекСтрока.ГСМ) Тогда
			Продолжить;
		КонецЕсли;
			
		Если ТекСтрока.Активен Тогда
			ТекСтрока.РасходПоНорме = уатГСМ.РасчитатьРасходГСМПоНорме(ПараметрыРасчетаГСМ, ТекСтрока.ТС, ТекСтрока.ГСМ, Отказ);
				
			Если Отказ Тогда
				Возврат;
			КонецЕсли;
			
			Если РасчетФактРасходаГСМ = Перечисления.уатВидыРасчетаРасходаГСМ.ПоНорме Тогда
				мРасходПоФакту = ТекСтрока.РасходПоНорме;
				ТекСтрока.ОстатокПриВозвращении = Окр(ТекСтрока.ОстатокПриВыезде - мРасходПоФакту
					+ ТекСтрока.Выдано - ТекСтрока.Сдано, ТочностьОстатковТоплива);
				
			ИначеЕсли РасчетФактРасходаГСМ = Перечисления.уатВидыРасчетаРасходаГСМ.ПоGPS
				И ЗначениеЗаполнено(ТекСтрока.ТС.ИспользуемаяСистемаGPS)
				И ЗначениеЗаполнено(ТекСтрока.ТС.ИДвСистемеНавигации) Тогда
				
				мРасходПоФакту = ТекСтрока.РасходПоGPS;
				ТекСтрока.ОстатокПриВозвращении = Окр(ТекСтрока.ОстатокПриВыезде - мРасходПоФакту
					+ ТекСтрока.Выдано - ТекСтрока.Сдано, ТочностьОстатковТоплива);
				
			Иначе
				мРасходПоФакту = Окр(ТекСтрока.ОстатокПриВыезде - ТекСтрока.ОстатокПриВозвращении
					+ ТекСтрока.Выдано - ТекСтрока.Сдано, ТочностьОстатковТоплива);
					
			КонецЕсли;
				
			ОбъемБака = уатГСМ.ОбъемБакаТС(ТекСтрока.ТС, ТекСтрока.ГСМ);
			Если ПредупреждатьПриПревышенииУровняТопливаВБаке И ЗначениеЗаполнено(ОбъемБака) Тогда
				Если ТекСтрока.ОстатокПриВозвращении > ОбъемБака Тогда
					ТекстНСТР = НСтр("en='Fuel level increase in vehicle tank';ru='Превышение уровня топлива в баке ТС'") + " """ + ТекСтрока.ТС + """";
					уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР,,, СтатусСообщения.Внимание);
				КонецЕсли;
			КонецЕсли;	
			
		Иначе
			ТекСтрока.РасходПоНорме = 0;
			
			Если РасчетФактРасходаГСМ = Перечисления.уатВидыРасчетаРасходаГСМ.ПоНорме Тогда
				мРасходПоФакту = 0;
			ИначеЕсли РасчетФактРасходаГСМ = Перечисления.уатВидыРасчетаРасходаГСМ.ПоGPS
				И ЗначениеЗаполнено(ТекСтрока.ТС.ИспользуемаяСистемаGPS)
				И ЗначениеЗаполнено(ТекСтрока.ТС.ИДвСистемеНавигации) Тогда
				мРасходПоФакту = 0;
			Иначе
				мРасходПоФакту = Окр(ТекСтрока.ОстатокПриВыезде - ТекСтрока.ОстатокПриВозвращении
					+ ТекСтрока.Выдано - ТекСтрока.Сдано, ТочностьОстатковТоплива);
			КонецЕсли;
		КонецЕсли;
		Если РасчетФактРасходаГСМ <> перечисления.уатВидыРасчетаРасходаГСМ.НеРассчитывать Тогда
			ТекСтрока.РасходПоФакту = мРасходПоФакту;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры //РасчетРасходаГСМ()

// Процедура рассчитывает расход технических жидкостей
Процедура РасчетРасходаТЖ() Экспорт
	// обнулим расход ТЖ
	Для Каждого ТекСтрокаРасходГСМ Из РасходГСМ Цикл
		Если уатГСМ.ЭтоТехническаяЖидкость(ТекСтрокаРасходГСМ.ГСМ) Тогда
			ТекСтрокаРасходГСМ.РасходПоНорме = 0;
			Если РасчетФактРасходаГСМ <> перечисления.уатВидыРасчетаРасходаГСМ.НеРассчитывать Тогда
				ТекСтрокаРасходГСМ.РасходПоФакту = 0;
			КонецЕсли;
			ТекСтрокаРасходГСМ.Активен = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, ПланыВидовХарактеристик.уатПраваИНастройки.ИспользоватьУчетНормативногоРасходаТехЖидкостей) = ЛОЖЬ Тогда
		Возврат;
	КонецЕсли;
	
	// получим нормы расхода тех. жидкостей
	мсвТС = Новый Массив;
	мсвТС.Добавить(ТранспортноеСредство);
	Для Каждого ТекСтрока Из Прицепы Цикл
		мсвТС.Добавить(ТекСтрока.ТС);
	КонецЦикла;
	Для Каждого ТекСтрока Из Задание Цикл
		мсвТС.Добавить(ТекСтрока.Прицеп1);
		мсвТС.Добавить(ТекСтрока.Прицеп2);
	КонецЦикла;
	тблНормыРасходаТЖ = уатОбщегоНазначения.ПолучитьНормыРасходаТЖ(мсвТС, ДатаВозвращения);
	
	// свернем все прицепы в одну табличку
	тблПрицепы = Новый ТаблицаЗначений;
	тблПрицепы.Колонки.Добавить("ТС");
	тблПрицепы.Колонки.Добавить("Моточасы");
	Для Каждого ТекПрицеп Из Прицепы Цикл
		Если ЗначениеЗаполнено(ТекПрицеп.ТС) Тогда
			СтрокаПрицепа = тблПрицепы.Найти(ТекПрицеп.ТС, "ТС");
			Если СтрокаПрицепа = Неопределено Тогда
				СтрокаПрицепа = тблПрицепы.Добавить();
				СтрокаПрицепа.ТС = ТекПрицеп.ТС;
				СтрокаПрицепа.Моточасы = 0;
			КонецЕсли;
			СтрокаПрицепа.Моточасы = СтрокаПрицепа.Моточасы + уатОбщегоНазначения.уатРазностьПоказанийСчетчика(
				ТекПрицеп.СчетчикМЧВыезда, ТекПрицеп.СчетчикМЧВозвращения);
		КонецЕсли;
	КонецЦикла;
	Для Каждого ТекЗадание Из Задание Цикл
		Если ЗначениеЗаполнено(ТекЗадание.Прицеп1) Тогда
			СтрокаПрицепа = тблПрицепы.Найти(ТекЗадание.Прицеп1, "ТС");
			Если СтрокаПрицепа = Неопределено Тогда
				СтрокаПрицепа = тблПрицепы.Добавить();
				СтрокаПрицепа.ТС = ТекЗадание.Прицеп1;
				СтрокаПрицепа.Моточасы = 0;
			КонецЕсли;
			СтрокаПрицепа.Моточасы = СтрокаПрицепа.Моточасы + ТекЗадание.КоличествоЧасовПрицеп1;
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекЗадание.Прицеп2) Тогда
			СтрокаПрицепа = тблПрицепы.Найти(ТекЗадание.Прицеп2, "ТС");
			Если СтрокаПрицепа = Неопределено Тогда
				СтрокаПрицепа = тблПрицепы.Добавить();
				СтрокаПрицепа.ТС = ТекЗадание.Прицеп2;
				СтрокаПрицепа.Моточасы = 0;
			КонецЕсли;
			СтрокаПрицепа.Моточасы = СтрокаПрицепа.Моточасы + ТекЗадание.КоличествоЧасовПрицеп2;
		КонецЕсли;
	КонецЦикла;
	
	ОбщийПробегНаработка = уатОбщегоНазначения.уатРазностьПоказанийСчетчика(СпидометрВыезда, СпидометрВозвращения);
	
	// перебираем все строки расхода ТЖ
	Для Каждого ТекСтрокаТЖ Из РасходГСМ Цикл
		Если НЕ уатГСМ.ЭтоТехническаяЖидкость(ТекСтрокаТЖ.ГСМ) Тогда
			Продолжить;
		КонецЕсли;
		
		мсвНормыРасходаТЖ = тблНормыРасходаТЖ.НайтиСтроки(Новый Структура("МодельТС, ГСМ", ТекСтрокаТЖ.ТС, ТекСтрокаТЖ.ГСМ));
		Если мсвНормыРасходаТЖ.Количество() = 0 Тогда
			мсвНормыРасходаТЖ = тблНормыРасходаТЖ.НайтиСтроки(Новый Структура("МодельТС, ГСМ", ТекСтрокаТЖ.ТС.Модель, ТекСтрокаТЖ.ГСМ));
		КонецЕсли;
		Если мсвНормыРасходаТЖ.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		НормыРасходаТЖ = мсвНормыРасходаТЖ[0];
		
		СтрокаРасходГСМОснТопливо = РасходГСМ.Найти(ТекСтрокаТЖ.ТС.Модель.ОсновноеТопливо, "ГСМ");
		Если ЗначениеЗаполнено(ТекСтрокаТЖ.ТС.Модель.ДополнительноеТопливо) Тогда
			СтрокаРасходГСМДопТопливо = РасходГСМ.Найти(ТекСтрокаТЖ.ТС.Модель.ДополнительноеТопливо, "ГСМ");
		Иначе
			СтрокаРасходГСМДопТопливо = Неопределено;
		КонецЕсли;
		
		// норму на осн. и доп. топливо считаем и для одометра и для счетчика моточасов
		Если СтрокаРасходГСМОснТопливо <> Неопределено И ЗначениеЗаполнено(НормыРасходаТЖ.Норма) Тогда
			ТекСтрокаТЖ.РасходПоНорме = СтрокаРасходГСМОснТопливо.РасходПоНорме * НормыРасходаТЖ.Норма / 100;
			ТекСтрокаТЖ.РасходПоФакту = СтрокаРасходГСМОснТопливо.РасходПоФакту * НормыРасходаТЖ.Норма / 100;
		КонецЕсли;
		Если СтрокаРасходГСМДопТопливо <> Неопределено И ЗначениеЗаполнено(НормыРасходаТЖ.НормаНаДопТопливо) Тогда
			ТекСтрокаТЖ.РасходПоНорме = ТекСтрокаТЖ.РасходПоНорме 
				+ СтрокаРасходГСМДопТопливо.РасходПоНорме * НормыРасходаТЖ.НормаНаДопТопливо / 100;
			ТекСтрокаТЖ.РасходПоФакту = ТекСтрокаТЖ.РасходПоФакту
				+ СтрокаРасходГСМДопТопливо.РасходПоФакту * НормыРасходаТЖ.НормаНаДопТопливо / 100;
		КонецЕсли;
		
		Если ТекСтрокаТЖ.ТС.Модель.НаличиеСпидометра И ЗначениеЗаполнено(НормыРасходаТЖ.ЛинейнаяНорма) Тогда
			ТекСтрокаТЖ.РасходПоНорме = ТекСтрокаТЖ.РасходПоНорме + ОбщийПробегНаработка * НормыРасходаТЖ.ЛинейнаяНорма / 100;
			ТекСтрокаТЖ.РасходПоФакту = ТекСтрокаТЖ.РасходПоНорме;
		ИначеЕсли НЕ ТекСтрокаТЖ.ТС.Модель.НаличиеСпидометра И ЗначениеЗаполнено(НормыРасходаТЖ.НормаНаМоточас) Тогда
			Если ТекСтрокаТЖ.ТС <> ТранспортноеСредство Тогда // это прицеп или оборудование из ТЧ Прицепы
				ТекСтрокаПрицепа = тблПрицепы.Найти(ТекСтрокаТЖ.ТС, "ТС");
				Если ТекСтрокаПрицепа <> Неопределено Тогда
					ОбщийПробегНаработка = ТекСтрокаПрицепа.Моточасы;
				КонецЕсли;
			КонецЕсли;
			ТекСтрокаТЖ.РасходПоНорме = ТекСтрокаТЖ.РасходПоНорме + ОбщийПробегНаработка * НормыРасходаТЖ.НормаНаМоточас;
			ТекСтрокаТЖ.РасходПоФакту = ТекСтрокаТЖ.РасходПоНорме;
		КонецЕсли;
		
		//СтрокиПоискаТЖ[0].ОстатокПриВыезде = уатОбщегоНазначения_проф.ОстатокТЖнаТС(ТекСтрокаТЖ.ТС, ТекСтрокаТЖ.ГСМ, ДатаВыезда);
		
		Если уатГСМ.УчитыватьОстаткиТЖ(ТекСтрокаТЖ.ГСМ) Тогда
			ТекСтрокаТЖ.ОстатокПриВозвращении = ТекСтрокаТЖ.ОстатокПриВыезде - ТекСтрокаТЖ.РасходПоФакту + ТекСтрокаТЖ.Выдано - ТекСтрокаТЖ.Сдано;
		КонецЕсли;
		
		Если ТекСтрокаТЖ.РасходПоФакту > 0 Тогда
			ТекСтрокаТЖ.Активен = Истина;
		КонецЕсли;
	КонецЦикла;
	
	уатПутевыеЛисты.ПересчетВыданногоГСМ(ЭтотОбъект);
	ПересчетСданногоГСМ();
	
КонецПроцедуры

// Процедура рассчитывает начисление з/п по пут. листу
// Вызывается из документа при выборе действия расчета.
//
Процедура РасчетЗП(Отказ, вхСотрудникИндекс = Неопределено) Экспорт
	Перем мТаблицаТТД;
	
	Если НЕ ЗначениеЗаполнено(ТранспортноеСредство.Модель) Тогда
		ТекстНСТР = НСтр("en='For vehicle not specified model!';ru='Для ТС не указана модель!'");
		уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, Отказ,, СтатусСообщения.Важное);
	КонецЕсли;
	
	Если РежимРасчетаВыработки = Перечисления.уатРежимыРасчетаВыработкиПЛ.ПоТТД И (НЕ ПроверкаТТД(мТаблицаТТД, , "зарплаты")) Тогда
		Возврат;
	КонецЕсли;
	
	Если вхСотрудникИндекс = Неопределено Тогда
		Если НачислятьЗПВодителю1 Тогда
			РасчетЗП(Отказ, 1);
		КонецЕсли;	
		
		Если НачислятьЗПВодителю2 Тогда
			РасчетЗП(Отказ, 2);
		КонецЕсли;	
		
		Если НачислятьЗПСотруднику1 Тогда
			РасчетЗП(Отказ, 3);
		КонецЕсли;	
		
		Если НачислятьЗПСотруднику2 Тогда
			РасчетЗП(Отказ, 4);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Если вхСотрудникИндекс = 1 Тогда
		вхСотрудник = Водитель1;
	ИначеЕсли вхСотрудникИндекс = 2 Тогда
		вхСотрудник = Водитель2;
	ИначеЕсли вхСотрудникИндекс = 3 Тогда
		вхСотрудник = Сотрудник1;
	ИначеЕсли вхСотрудникИндекс = 4 Тогда
		вхСотрудник = Сотрудник2;
	ИначеЕсли ТипЗнч(вхСотрудникИндекс) = Тип("СправочникСсылка.Сотрудники") Тогда
		вхСотрудник = вхСотрудникИндекс;
	Иначе
		Возврат;
	КонецЕсли;
	
	// не удаляем вручную введенные начисления
	мЗП = Зарплата.НайтиСтроки(Новый Структура("Сотрудник, РучнойВвод", вхСотрудник, Ложь));
	Для мСч = 0 По мЗП.Количество() - 1 Цикл
		Зарплата.Удалить(мЗП[мСч]);
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(вхСотрудник) Тогда
		Возврат;
	КонецЕсли;
	
	тблЗарплатаВрем = Зарплата.Выгрузить();
	тблЗарплатаВрем.Колонки.Добавить("ВесФильтров");
	тблЗарплатаВрем.Колонки.Добавить("ПараметрВыработкиДоп");
	тблЗарплатаВрем.Колонки.Добавить("НомерСтрокиДляПострочныхТарифов", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1,0,ДопустимыйЗнак.Неотрицательный)));
	тблЗарплатаВрем.Очистить();
	тблЗарплатаВремФикс = тблЗарплатаВрем.Скопировать();
	
	мТарифы = уатРасчетыПоТарифам.НайтиТарифыЗП(вхСотрудник, ДатаЗакрытия, Новый Структура("Применение", 0));
	Если мТарифы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Ищем выработку для некоторых параметров выработки
	мГрузоподъемность = уатПутевыеЛисты.уатГрузоподъемностьПоПЛ(ЭтотОбъект);
	мОбъемКузова = уатПутевыеЛисты.уатОбъемКузоваПоПЛ(ЭтотОбъект);
	
	мВыработкаПроизвольная = Новый Соответствие;
	мВыработкаПроизвольная.Вставить(Перечисления.уатГруппировкиТарифов.Грузоподъемность, мГрузоподъемность);
	мВыработкаПроизвольная.Вставить(Перечисления.уатГруппировкиТарифов.ОбъемКузова, мОбъемКузова);
	// Класс груза получаем как максимальный класс грузов, указанных в задании
	мКлассГруза = 0;
	Для Каждого ТекСтрока Из Задание Цикл
		Если ТекСтрока.Выполнено Тогда
			мКлассГруза = Макс(мКлассГруза, уатОбщегоНазначения.уатКлассГруза(ТекСтрока.Номенклатура));
		КонецЕсли;
	КонецЦикла;
	мВыработкаПроизвольная.Вставить(Перечисления.уатГруппировкиТарифов.КлассГруза, мКлассГруза);
	мВыработка = ВыработкаСотрудников.НайтиСтроки(Новый Структура("Сотрудник, ПараметрВыработки", вхСотрудник, Справочники.уатПараметрыВыработки.ПробегСГрузом));
	Если мВыработка.Количество() > 0 Тогда
		мВыработкаЗначение = 0;
		Для Каждого ТекВыработка Из мВыработка Цикл
			мВыработкаЗначение = мВыработкаЗначение + ТекВыработка.Количество;
		КонецЦикла;
		мВыработкаПроизвольная.Вставить(Справочники.уатПараметрыВыработки.ПробегСГрузом, мВыработкаЗначение);
	КонецЕсли;
	мВыработка = ВыработкаСотрудников.НайтиСтроки(Новый Структура("Сотрудник, ПараметрВыработки", вхСотрудник, Справочники.уатПараметрыВыработки.ВремяВРаботе));
	Если мВыработка.Количество() > 0 Тогда
		мВыработкаЗначение = 0;
		Для Каждого ТекВыработка Из мВыработка Цикл
			мВыработкаЗначение = мВыработкаЗначение + ТекВыработка.Количество;
		КонецЦикла;
		мВыработкаПроизвольная.Вставить(Справочники.уатПараметрыВыработки.ВремяВРаботе, мВыработкаЗначение / 3600);
	КонецЕсли;
	
	// Теперь найдем выработку по произвольным параметрам выработки, 
	// по которым происходит (не построчный) расчет группировок сложных тарифов.
	Для Каждого ТекСтрокаТарифа Из мТарифы Цикл
		ТекТариф = ТекСтрокаТарифа.ТарифЗП;
		Если Не ТекТариф.РасчетПоСтрокам Тогда
			МассивГруппировокТарифа = Новый Массив;
			МассивГруппировокТарифа.Добавить(ТекТариф.ГруппировкаТарифа1);
			МассивГруппировокТарифа.Добавить(ТекТариф.ГруппировкаТарифа2);
			МассивГруппировокТарифа.Добавить(ТекТариф.ГруппировкаТарифа3);
			Для Каждого ГруппировкаТарифа Из МассивГруппировокТарифа Цикл
				Если ЗначениеЗаполнено(ГруппировкаТарифа)
					И ТипЗнч(ГруппировкаТарифа) = Тип("СправочникСсылка.уатПараметрыВыработки")
					И мВыработкаПроизвольная[ГруппировкаТарифа] = Неопределено Тогда
					мВыработка = ВыработкаСотрудников.НайтиСтроки(Новый Структура("Сотрудник, ПараметрВыработки", вхСотрудник, ГруппировкаТарифа));
					мВыработкаЗначение = 0;
					Для Каждого ТекВыработка Из мВыработка Цикл
						мВыработкаЗначение = мВыработкаЗначение + ТекВыработка.Количество;
					КонецЦикла;
					Если ГруппировкаТарифа.Временный Тогда
						мВыработкаПроизвольная.Вставить(ГруппировкаТарифа, мВыработкаЗначение / 3600);
					Иначе
						мВыработкаПроизвольная.Вставить(ГруппировкаТарифа, мВыработкаЗначение);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	мКлассВодителя = вхСотрудник.Класс;
	
	Если уатОбщегоНазначенияТиповые.уатЕстьКонстанта("ВалютаУправленческогоУчета") Тогда 
		мВалютаУпрУчета = Константы.ВалютаУправленческогоУчета.Получить();
	Иначе
		мВалютаУпрУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;
	
	Если Ссылка.Пустая() Тогда
		тблВыручка = Новый ТаблицаЗначений;
		тблВыручка.Колонки.Добавить("Сумма", Новый ОписаниеТипов("Число"));
	Иначе
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	""ТТД"" КАК Раздел,
		|	уатТТДСтоимость.Ссылка КАК Документ,
		|	уатТТДСтоимость.Сумма КАК Сумма,
		|	уатТТДСтоимость.Маршрут КАК Маршрут,
		|	уатТТДСтоимость.Ссылка.ВалютаДокумента КАК Валюта,
		|	уатТТДСтоимость.ПараметрВыработки КАК ПараметрВыработки,
		|	уатТТДСтоимость.Ссылка.Контрагент КАК Контрагент,
		|	уатТТДСтоимость.ВидПеревозки КАК ВидПеревозки,
		|	уатТТДСтоимость.ОбъектСтроительства КАК ОбъектСтроительства,
		|	уатТТДСтоимость.НаправлениеПеревозки КАК НаправлениеПеревозки
		|ИЗ
		|	Документ.уатТТД.Стоимость КАК уатТТДСтоимость
		|ГДЕ
		|	уатТТДСтоимость.ПутЛист = &ПутЛист
		|	И уатТТДСтоимость.Ссылка.Проведен
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""БилетныйЛист"",
		|	уатБилетныйЛистБилеты.Ссылка,
		|	уатБилетныйЛистБилеты.Сумма,
		|	уатБилетныйЛистБилеты.Маршрут,
		|	&ВалютаУпр,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО
		|ИЗ
		|	Документ.уатБилетныйЛист.Билеты КАК уатБилетныйЛистБилеты
		|ГДЕ
		|	уатБилетныйЛистБилеты.ПутевойЛист = &ПутЛист
		|	И уатБилетныйЛистБилеты.Ссылка.Проведен
		|	И уатБилетныйЛистБилеты.Ссылка.Сотрудник = &Сотрудник
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""ПосадочнаяВедомость"",
		|	уатПосадочнаяВедомостьБилеты.Ссылка,
		|	уатПосадочнаяВедомостьБилеты.Сумма,
		|	уатПосадочнаяВедомостьБилеты.Маршрут,
		|	&ВалютаУпр,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО
		|ИЗ
		|	Документ.уатПосадочнаяВедомость.Билеты КАК уатПосадочнаяВедомостьБилеты
		|ГДЕ
		|	уатПосадочнаяВедомостьБилеты.ПутевойЛист = &ПутЛист
		|	И уатПосадочнаяВедомостьБилеты.Ссылка.Проведен
		|	И уатПосадочнаяВедомостьБилеты.Ссылка.Сотрудник = &Сотрудник
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	""ВыручкаВодителей"",
		|	уатВыручкаВодителей.Ссылка,
		|	уатВыручкаВодителей.Сумма,
		|	уатВыручкаВодителей.Маршрут,
		|	&ВалютаУпр,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО,
		|	НЕОПРЕДЕЛЕНО
		|ИЗ
		|	Документ.уатВыручкаВодителей КАК уатВыручкаВодителей
		|ГДЕ
		|	уатВыручкаВодителей.ПутевойЛист = &ПутЛист
		|	И уатВыручкаВодителей.Ссылка.Проведен
		|	И уатВыручкаВодителей.Ссылка.Сотрудник = &Сотрудник");
		Запрос.УстановитьПараметр("Сотрудник", вхСотрудник);
		Запрос.УстановитьПараметр("ПутЛист", Ссылка);
		Запрос.УстановитьПараметр("ВалютаУпр", мВалютаУпрУчета);
		тблВыручка = Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	
	// пересчет в валюту упр. учета
	Для Каждого ТекСтрока Из тблВыручка Цикл
		Если ТекСтрока.Раздел = "ТТД" И ТекСтрока.Валюта <> мВалютаУпрУчета Тогда
			ТекСтрока.Сумма = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.Сумма,
				ТекСтрока.Валюта, мВалютаУпрУчета, ДатаЗакрытия, ДатаЗакрытия);
		КонецЕсли;
	КонецЦикла;
	
	мВыручка = тблВыручка.Итог("Сумма");
	мВыработкаПроизвольная.Вставить(Перечисления.уатГруппировкиТарифов.Выручка, мВыручка);
		
	// Переменные для кэширования свернутых таблиц Задание (Путевого листа) и Выработка (ТТД)
	ТТДСвернутые = Новый Соответствие;
	ТаблицаЗаданиеСвернутая = Неопределено;
	
	// 1-2. Сдельные тарифы от выработки и Тарифы с фиксированной суммой
	мТарифыСдельныеИФиксированные = Новый Массив;
	Для Каждого ТекСтрокаТариф Из мТарифы Цикл
		Если ТекСтрокаТариф.СпособРасчетаОплатыТруда = Перечисления.уатСпособыРасчетаОплатыТруда.СдельныйЗаработок
			ИЛИ ТекСтрокаТариф.СпособРасчетаОплатыТруда = Перечисления.уатСпособыРасчетаОплатыТруда.ФиксированнойСуммой Тогда
			мТарифыСдельныеИФиксированные.Добавить(ТекСтрокаТариф);
		КонецЕсли;
	КонецЦикла;
	Для Каждого ТекСтрокаТариф Из мТарифыСдельныеИФиксированные Цикл
		// простои посчитаем потом
		Если ТекСтрокаТариф.ПараметрВыработки = Справочники.уатПараметрыВыработки.ВремяВПростое Тогда
			Продолжить;
		КонецЕсли;
		// Расчет оплаты за ремонт в путевых листах не ведется
		Если ТекСтрокаТариф.ВидНачисления = ПланыВидовРасчета.уатОсновныеНачисления.ОплатаЗаРемонт Тогда
			Продолжить;
		КонецЕсли;
		
		флФиксТариф = (ТекСтрокаТариф.СпособРасчетаОплатыТруда
			= Перечисления.уатСпособыРасчетаОплатыТруда.ФиксированнойСуммой);
		
		// расчет зарплаты по строкам задания/ТТД
		Если ТекСтрокаТариф.ТарифЗП.РасчетПоСтрокам Тогда
			Если РежимРасчетаВыработки = Перечисления.уатРежимыРасчетаВыработкиПЛ.ПоЗаданию Тогда
				Если ТаблицаЗаданиеСвернутая = Неопределено Тогда
					ТаблицаЗаданиеСвернутая = ПолучитьЗаданиеСвернутоеСУчетомЭтапов(Ложь);
				КонецЕсли;
				Для Каждого ТекСтрокаЗадания Из ТаблицаЗаданиеСвернутая Цикл
					Если НЕ ТекСтрокаЗадания.Выполнено Тогда
						Продолжить;
					КонецЕсли;
					
					// Дополнительно отбираем тарифы по контрагенту и маршруту, действующие только для построчных тарифов
					ВесФильтровВрем = 0;
					СтруктураОбластьДействия = Новый Структура;
					СтруктураОбластьДействия.Вставить("ТС", ТранспортноеСредство);
					СтруктураОбластьДействия.Вставить("Контрагент", ТекСтрокаЗадания.Контрагент);
					СтруктураОбластьДействия.Вставить("Маршрут", ТекСтрокаЗадания.Маршрут);
					СтруктураОбластьДействия.Вставить("ОбъектСтроительства", ТекСтрокаЗадания.ОбъектСтроительства);
					СтруктураОбластьДействия.Вставить("Подразделение", ТекСтрокаЗадания.Подразделение);
					СтруктураОбластьДействия.Вставить("ВидПеревозки", ТекСтрокаЗадания.ВидПеревозки);
					СтруктураОбластьДействия.Вставить("НаправлениеПеревозки", ТекСтрокаЗадания.НаправлениеПеревозки);
					СтруктураОбластьДействия.Вставить("ПунктОтправления", ТекСтрокаЗадания.АдресПрибытия);
					СтруктураОбластьДействия.Вставить("ПунктНазначения", ТекСтрокаЗадания.АдресУбытия);
					СтруктураОбластьДействия.Вставить("Номенклатура", ТекСтрокаЗадания.Номенклатура);
					СтруктураОбластьДействия.Вставить("КлассВодителя", мКлассВодителя);
					ДобавитьВСтруктуруОбластиДействияПрицепы(СтруктураОбластьДействия);
					
					Если Не уатРасчетыПоТарифам.ТарифЗПвОбластиДействия(ТекСтрокаТариф.ТарифЗП, Организация, СтруктураОбластьДействия, ВесФильтровВрем) Тогда
						Продолжить;
					КонецЕсли;
					
					// Теперь получим значение параметра выработки и полей группировок сложного тарифа
					// Это - значение параметра выработки
					Если флФиксТариф Тогда
						мКоличество = 1;
					Иначе
						мКоличество = ПолучитьВыработкуПоСтрокеЗаданияСвернутого(ТекСтрокаТариф.ПараметрВыработки, ТекСтрокаЗадания);
					КонецЕсли;
					
					Прицеп1 = ТекСтрокаЗадания.Прицеп1;
					Прицеп2 = ТекСтрокаЗадания.Прицеп2;
					СтрокаГрузоподъемность = мГрузоподъемность;
					СтрокаОбъемКузова = мОбъемКузова;
					
					Если Прицеп1 <> Справочники.уатТС.ПустаяСсылка()
						И Прицеп1.Модель <> Неопределено Тогда
						СтрокаГрузоподъемность = СтрокаГрузоподъемность + Прицеп1.Модель.Грузоподъемность;
						СтрокаОбъемКузова = СтрокаОбъемКузова + Прицеп1.Модель.ОбъемКузова;
					КонецЕсли;
					
					Если Прицеп2 <> Справочники.уатТС.ПустаяСсылка()
						И Прицеп2.Модель <> Неопределено Тогда
						СтрокаГрузоподъемность = СтрокаГрузоподъемность + Прицеп2.Модель.Грузоподъемность;
						СтрокаОбъемКузова = СтрокаОбъемКузова + Прицеп2.Модель.ОбъемКузова;
					КонецЕсли;
					
					ЗначенияГруппировок = Новый Соответствие;
					ЗначенияГруппировок.Вставить(Перечисления.уатГруппировкиТарифов.Грузоподъемность, СтрокаГрузоподъемность);
					ЗначенияГруппировок.Вставить(Перечисления.уатГруппировкиТарифов.ОбъемКузова, СтрокаОбъемКузова);
					ЗначенияГруппировок.Вставить(Перечисления.уатГруппировкиТарифов.КлассГруза, уатОбщегоНазначения.уатКлассГруза(ТекСтрокаЗадания.Номенклатура));
					ЗначенияГруппировок.Вставить(Перечисления.уатГруппировкиТарифов.Выручка, мВыручка);
					МассивГруппировокТарифа = Новый Массив;
					МассивГруппировокТарифа.Добавить(ТекСтрокаТариф.ТарифЗП.ГруппировкаТарифа1);
					МассивГруппировокТарифа.Добавить(ТекСтрокаТариф.ТарифЗП.ГруппировкаТарифа2);
					МассивГруппировокТарифа.Добавить(ТекСтрокаТариф.ТарифЗП.ГруппировкаТарифа3);
					Для Каждого ГруппировкаТарифа Из МассивГруппировокТарифа Цикл
						Если ЗначениеЗаполнено(ГруппировкаТарифа)
							И ТипЗнч(ГруппировкаТарифа) = Тип("СправочникСсылка.уатПараметрыВыработки")
							И ЗначенияГруппировок[ГруппировкаТарифа] = Неопределено Тогда
							мВыработка = ПолучитьВыработкуПоСтрокеЗаданияСвернутого(ГруппировкаТарифа, ТекСтрокаЗадания);
							ЗначенияГруппировок.Вставить(ГруппировкаТарифа, мВыработка);
						КонецЕсли;
					КонецЦикла;
					
					мТариф = уатРасчетыПоТарифам.ЗначениеТарифаЗП(ТекСтрокаТариф.ТарифЗП, ЗначенияГруппировок);
					
					Если флФиксТариф Тогда
						НоваяСтрока = тблЗарплатаВремФикс.Добавить();
					Иначе
						НоваяСтрока = тблЗарплатаВрем.Добавить();
					КонецЕсли;
					
					НоваяСтрока.ВидНачисления        = ТекСтрокаТариф.ВидНачисления;
					НоваяСтрока.Сотрудник            = вхСотрудник;
					НоваяСтрока.Сумма                = мКоличество * мТариф;
					НоваяСтрока.РучнойВвод           = Ложь;
					НоваяСтрока.ВесФильтров          = ВесФильтровВрем;
					НоваяСтрока.ПараметрВыработки    = ТекСтрокаТариф.ПараметрВыработки;
					НоваяСтрока.ПараметрВыработкиДоп = Строка(ТекСтрокаТариф.ПараметрВыработки);
					НоваяСтрока.НомерСтрокиДляПострочныхТарифов = ТекСтрокаЗадания.НомерСтроки;
					
				КонецЦикла;
				
			ИначеЕсли РежимРасчетаВыработки = Перечисления.уатРежимыРасчетаВыработкиПЛ.ПоТТД Тогда
				Для Каждого ТекСтр из мТаблицаТТД Цикл
					мТТД = ТекСтр.ТТД;
					ТаблицаВыработкаСвернутая = ТТДСвернутые.Получить(мТТД);
					Если ТаблицаВыработкаСвернутая = Неопределено Тогда
						мТТДОбъект = мТТД.ПолучитьОбъект();
						ТаблицаВыработкаСвернутая = мТТДОбъект.ПолучитьВыработкуСвернутуюСУчетомЭтапов(Ложь);
						ТТДСвернутые.Вставить(мТТД, ТаблицаВыработкаСвернутая);
					КонецЕсли;
					Для Каждого ТекСтрокаЗадания из ТаблицаВыработкаСвернутая Цикл
						Если ТекСтрокаЗадания.ПутЛист <> Ссылка Тогда
							Продолжить;
						КонецЕсли;
						
						// Дополнительно отбираем тарифы по контрагенту и маршруту, действующие только для построчных тарифов
						ВесФильтровВрем = 0;
						СтруктураОбластьДействия = Новый Структура;
						СтруктураОбластьДействия.Вставить("ТС", ТранспортноеСредство);
						СтруктураОбластьДействия.Вставить("Контрагент", мТТД.Контрагент);
						СтруктураОбластьДействия.Вставить("Маршрут", ТекСтрокаЗадания.Маршрут);
						СтруктураОбластьДействия.Вставить("ОбъектСтроительства", ТекСтрокаЗадания.ОбъектСтроительства);
						СтруктураОбластьДействия.Вставить("ВидПеревозки", ТекСтрокаЗадания.ВидПеревозки);
						СтруктураОбластьДействия.Вставить("НаправлениеПеревозки", ТекСтрокаЗадания.НаправлениеПеревозки);
						СтруктураОбластьДействия.Вставить("Номенклатура", ТекСтрокаЗадания.Номенклатура);
						СтруктураОбластьДействия.Вставить("КлассВодителя", мКлассВодителя);
						ДобавитьВСтруктуруОбластиДействияПрицепы(СтруктураОбластьДействия);
						
						Если Не уатРасчетыПоТарифам.ТарифЗПвОбластиДействия(ТекСтрокаТариф.ТарифЗП, Организация, СтруктураОбластьДействия, ВесФильтровВрем) Тогда
							Продолжить;
						КонецЕсли;
						
						// Теперь получим значение параметра выработки и полей группировок сложного тарифа
						// Это - значение параметра выработки
						Если флФиксТариф Тогда
							мКоличество = 1;
						Иначе
							мКоличество = ПолучитьВыработкуПоСтрокеТТДСвернутого(ТекСтрокаТариф.ПараметрВыработки, ТекСтрокаЗадания);
						КонецЕсли;
						
						ЗначенияГруппировок = Новый Соответствие;
						ЗначенияГруппировок.Вставить(Перечисления.уатГруппировкиТарифов.Грузоподъемность, мГрузоподъемность);
						ЗначенияГруппировок.Вставить(Перечисления.уатГруппировкиТарифов.ОбъемКузова, мОбъемКузова);
						ЗначенияГруппировок.Вставить(Перечисления.уатГруппировкиТарифов.КлассГруза, уатОбщегоНазначения.уатКлассГруза(ТекСтрокаЗадания.Номенклатура));
						ЗначенияГруппировок.Вставить(Перечисления.уатГруппировкиТарифов.Выручка, мВыручка);
						МассивГруппировокТарифа = Новый Массив;
						МассивГруппировокТарифа.Добавить(ТекСтрокаТариф.ТарифЗП.ГруппировкаТарифа1);
						МассивГруппировокТарифа.Добавить(ТекСтрокаТариф.ТарифЗП.ГруппировкаТарифа2);
						МассивГруппировокТарифа.Добавить(ТекСтрокаТариф.ТарифЗП.ГруппировкаТарифа3);
						Для Каждого ГруппировкаТарифа Из МассивГруппировокТарифа Цикл
							Если ЗначениеЗаполнено(ГруппировкаТарифа)
								И ТипЗнч(ГруппировкаТарифа) = Тип("СправочникСсылка.уатПараметрыВыработки")
								И ЗначенияГруппировок[ГруппировкаТарифа] = Неопределено Тогда
								мВыработка = ПолучитьВыработкуПоСтрокеТТДСвернутого(ГруппировкаТарифа, ТекСтрокаЗадания);
								ЗначенияГруппировок.Вставить(ГруппировкаТарифа, мВыработка);
							КонецЕсли;
						КонецЦикла;
						
						мТариф = уатРасчетыПоТарифам.ЗначениеТарифаЗП(ТекСтрокаТариф.ТарифЗП, ЗначенияГруппировок);
						
						Если флФиксТариф Тогда
							НоваяСтрока = тблЗарплатаВремФикс.Добавить();
						Иначе
							НоваяСтрока = тблЗарплатаВрем.Добавить();
						КонецЕсли;
					
						НоваяСтрока.ВидНачисления        = ТекСтрокаТариф.ВидНачисления;
						НоваяСтрока.Сотрудник            = вхСотрудник;
						НоваяСтрока.Сумма                = мКоличество * мТариф;
						НоваяСтрока.РучнойВвод           = Ложь;
						НоваяСтрока.ВесФильтров          = ВесФильтровВрем;
						НоваяСтрока.ПараметрВыработки    = ТекСтрокаТариф.ПараметрВыработки;
						НоваяСтрока.ПараметрВыработкиДоп = Строка(ТекСтрокаТариф.ПараметрВыработки);
						НоваяСтрока.НомерСтрокиДляПострочныхТарифов = ТекСтрокаЗадания.НомерСтроки;
						
					КонецЦикла;	
				КонецЦикла;
			КонецЕсли;
			
		Иначе  //расчет зарплаты по таблице выработки (свернутой)
			Если флФиксТариф Тогда
				ВесФильтровВрем = 0;
				СтруктураОбластьДействия = Новый Структура("ТС", ТранспортноеСредство);
				ДобавитьВСтруктуруОбластиДействияПрицепы(СтруктураОбластьДействия);
				СтруктураОбластьДействия.Вставить("КлассВодителя", мКлассВодителя);
				
				Если Не уатРасчетыПоТарифам.ТарифЗПвОбластиДействия(ТекСтрокаТариф.ТарифЗП, Организация, СтруктураОбластьДействия, ВесФильтровВрем) Тогда
					Продолжить;
				КонецЕсли;
				
				мТариф = уатРасчетыПоТарифам.ЗначениеТарифаЗП(ТекСтрокаТариф.ТарифЗП, мВыработкаПроизвольная);
				
				НоваяСтрока = тблЗарплатаВремФикс.Добавить();
				НоваяСтрока.ВидНачисления        = ТекСтрокаТариф.ВидНачисления;
				НоваяСтрока.Сотрудник            = вхСотрудник;
				НоваяСтрока.Сумма                = мТариф;
				НоваяСтрока.РучнойВвод           = Ложь;
				НоваяСтрока.ВесФильтров          = ВесФильтровВрем;
				НоваяСтрока.ПараметрВыработки    = Справочники.уатПараметрыВыработки.ПустаяСсылка();
				НоваяСтрока.ПараметрВыработкиДоп = "";
			Иначе
				мВыработка = ВыработкаСотрудников.НайтиСтроки(Новый Структура("Сотрудник, ПараметрВыработки", вхСотрудник, ТекСтрокаТариф.ПараметрВыработки));
				Для Каждого ТекСтрокаВыработки Из мВыработка Цикл
					Если ТекСтрокаВыработки.Количество = 0 Тогда
						Продолжить;
					КонецЕсли;	
					
					ВесФильтровВрем = 0;
					СтруктураОбластьДействия = Новый Структура("ТС", ТранспортноеСредство);
					ДобавитьВСтруктуруОбластиДействияПрицепы(СтруктураОбластьДействия);
					СтруктураОбластьДействия.Вставить("КлассВодителя", мКлассВодителя);
					
					Если Не уатРасчетыПоТарифам.ТарифЗПвОбластиДействия(ТекСтрокаТариф.ТарифЗП, Организация, СтруктураОбластьДействия, ВесФильтровВрем) Тогда
						Продолжить;
					КонецЕсли;
					
					Если ТекСтрокаВыработки.ПараметрВыработки.Временный Тогда
						мКоличество = ТекСтрокаВыработки.Количество / 3600;
					Иначе	
						мКоличество = ТекСтрокаВыработки.Количество;
					КонецЕсли;	
					
					мТариф = уатРасчетыПоТарифам.ЗначениеТарифаЗП(ТекСтрокаТариф.ТарифЗП, мВыработкаПроизвольная);
					
					НоваяСтрока = тблЗарплатаВрем.Добавить();
					НоваяСтрока.ВидНачисления        = ТекСтрокаТариф.ВидНачисления;
					НоваяСтрока.Сотрудник            = вхСотрудник;
					НоваяСтрока.Сумма                = мКоличество * мТариф;
					НоваяСтрока.РучнойВвод           = Ложь;
					НоваяСтрока.ВесФильтров          = ВесФильтровВрем;
					НоваяСтрока.ПараметрВыработки    = ТекСтрокаТариф.ПараметрВыработки;
					НоваяСтрока.ПараметрВыработкиДоп = Строка(ТекСтрокаТариф.ПараметрВыработки);
					
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	УдалитьЛишниеТарифыЗП(тблЗарплатаВремФикс);
	УдалитьЛишниеТарифыЗП(тблЗарплатаВрем, "ПараметрВыработкиДоп");
	
	// 3. Проценты от выручки
	мТарифыПроцентОтВыручки = мТарифы.НайтиСтроки(Новый Структура("СпособРасчетаОплатыТруда",
		Перечисления.уатСпособыРасчетаОплатыТруда.ПроцентомОтВыручки));
	Для Каждого ТекСтрокаВыручка Из тблВыручка Цикл
		Для сч = 0 По мТарифыПроцентОтВыручки.Количество() - 1 Цикл
			ВесФильтровВрем = 0;
			СтруктураОбластьДействия = Новый Структура("ТС, Маршрут", ТранспортноеСредство, ТекСтрокаВыручка.Маршрут);
			Если ТекСтрокаВыручка.Раздел = "ТТД" Тогда
				СтруктураОбластьДействия.Вставить("Контрагент", ТекСтрокаВыручка.Контрагент);
			КонецЕсли;
			ДобавитьВСтруктуруОбластиДействияПрицепы(СтруктураОбластьДействия);
			СтруктураОбластьДействия.Вставить("КлассВодителя", мКлассВодителя);
			СтруктураОбластьДействия.Вставить("ВидПеревозки", ТекСтрокаВыручка.ВидПеревозки);
			СтруктураОбластьДействия.Вставить("ОбъектСтроительства", ТекСтрокаВыручка.ОбъектСтроительства);
			СтруктураОбластьДействия.Вставить("НаправлениеПеревозки", ТекСтрокаВыручка.НаправлениеПеревозки);
			
			Если НЕ уатРасчетыПоТарифам.ТарифЗПвОбластиДействия(мТарифыПроцентОтВыручки[сч].ТарифЗП, Организация, СтруктураОбластьДействия, ВесФильтровВрем) Тогда
				Продолжить;
			КонецЕсли;	
			
			НоваяСтрока 				= тблЗарплатаВрем.Добавить();
			НоваяСтрока.ВидНачисления 	= мТарифыПроцентОтВыручки[сч].ВидНачисления;
			НоваяСтрока.Сотрудник 		= вхСотрудник;
			НоваяСтрока.Сумма 			= Окр(ТекСтрокаВыручка.Сумма * мТарифыПроцентОтВыручки[сч].ТарифЗП.Тариф / 100, 2);
			НоваяСтрока.РучнойВвод 		= Ложь;
			НоваяСтрока.ВесФильтров		= ВесФильтровВрем;
			Если ТекСтрокаВыручка.Раздел = "ТТД" Тогда
				НоваяСтрока.ПараметрВыработки = ТекСтрокаВыручка.ПараметрВыработки;
				НоваяСтрока.ПараметрВыработкиДоп = Строка(ТекСтрокаВыручка.ПараметрВыработки);
			КонецЕсли;
		КонецЦикла;
		УдалитьЛишниеТарифыЗП(тблЗарплатаВрем);
	КонецЦикла;	
	
	// 4. Время в простое (простой с оплатой водителю)
	// берем не из таблицы выработки, а из таблицы простоев, т.к. нужно смотреть признак оплаты
	мТарифыСдельные = мТарифы.НайтиСтроки(Новый Структура("СпособРасчетаОплатыТруда, ПараметрВыработки",
	Перечисления.уатСпособыРасчетаОплатыТруда.СдельныйЗаработок,
	Справочники.уатПараметрыВыработки.ВремяВПростое));
	Для Каждого ТекСтрокаТарифыСдельные Из мТарифыСдельные Цикл
		ВесФильтровВрем = 0;
		СтруктураОбластьДействия = Новый Структура("ТС", ТранспортноеСредство);
		ДобавитьВСтруктуруОбластиДействияПрицепы(СтруктураОбластьДействия);
		СтруктураОбластьДействия.Вставить("КлассВодителя", мКлассВодителя);
		
		Если Не уатРасчетыПоТарифам.ТарифЗПвОбластиДействия(ТекСтрокаТарифыСдельные.ТарифЗП, Организация, СтруктураОбластьДействия, ВесФильтровВрем) Тогда
			Продолжить;
		КонецЕсли;
		
		мВремяВПростое = 0;
		тблПростои = Документы.уатПутевойЛист.ТаблицаПростоевБезОбедов(ЭтотОбъект);
		Для Каждого мТекСтрокаПростои Из тблПростои Цикл
			Если мТекСтрокаПростои.ВидПростоя.ОплатаВодителю Тогда
				мВремяВПростое = мВремяВПростое + мТекСтрокаПростои.Продолжительность;
			КонецЕсли;	
		КонецЦикла;	
		
		мТариф = уатРасчетыПоТарифам.ЗначениеТарифаЗП(ТекСтрокаТарифыСдельные.ТарифЗП, мВыработкаПроизвольная);
		
		НоваяСтрока = тблЗарплатаВрем.Добавить();
		НоваяСтрока.ВидНачисления        = ТекСтрокаТарифыСдельные.ВидНачисления;
		НоваяСтрока.Сотрудник            = вхСотрудник;
		НоваяСтрока.Сумма                = мВремяВПростое  / 3600 * мТариф;
		НоваяСтрока.РучнойВвод           = Ложь;
		НоваяСтрока.ВесФильтров          = ВесФильтровВрем;
		НоваяСтрока.ПараметрВыработки    = Справочники.уатПараметрыВыработки.ВремяВПростое;
		НоваяСтрока.ПараметрВыработкиДоп = "Время в простое";
	КонецЦикла;
	УдалитьЛишниеТарифыЗП(тблЗарплатаВрем, "ПараметрВыработкиДоп");
	
	// 5. Надбавка за ночные
	// вначале смотрим есть ли ночное время в выработке водителя
	мВыработка = ВыработкаСотрудников.НайтиСтроки(Новый Структура("Сотрудник, ПараметрВыработки", вхСотрудник, Справочники.уатПараметрыВыработки.ВремяНочное));
	Если мВыработка.Количество() > 0 Тогда	
		Если мВыработка[0].Количество > 0 Тогда
			РасчетДоплатЗП(вхСотрудник, мТарифы, Перечисления.уатСпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы, мКлассВодителя);
		КонецЕсли;
	КонецЕсли;
	
	// 6. Надбавка за выходные и праздники
	Если ЕстьВыходныеПраздникиПоПЛ(вхСотрудник) Тогда
		РасчетДоплатЗП(вхСотрудник, мТарифы, Перечисления.уатСпособыРасчетаОплатыТруда.ДоплатаЗаПраздничныеИВыходные, мКлассВодителя);
	КонецЕсли;
	
	// 7. Прочие надбавки (процентом от видов начислений)
	РасчетДоплатЗП(вхСотрудник, мТарифы, Перечисления.уатСпособыРасчетаОплатыТруда.ПроцентомОтВидовНачислений, мКлассВодителя);
		
	Зарплата.Свернуть("Сотрудник, ВидНачисления, РучнойВвод, ПараметрВыработки", "Сумма");
	
КонецПроцедуры // РасчетЗП()

// Процедура рассчитывает фактически отработанное время сотрудников по путевому листу
//
Процедура РасчетФОВ(ВыполнитьПринудительно = Ложь) Экспорт
	Если НеВыполнятьАвтоРасчетФОВ И (НЕ ВыполнитьПринудительно) Тогда
		Возврат;
	КонецЕсли;
	
	ФактическиОтработанноеВремя.Очистить();
	
	тблРабочееВремя = уатПутевыеЛисты.РасчетВремени(ДатаВыезда, ДатаВозвращения, Организация, РежимРаботыТС, Простои.Выгрузить());
	
	// составим список задействованных сотрудников
	мсвСотрудники = Новый Массив;
	мсвСотрудники.Добавить(Водитель1);
	Если ЗначениеЗаполнено(Водитель2) Тогда
		мсвСотрудники.Добавить(Водитель2);
	КонецЕсли;	
	Если ЗначениеЗаполнено(Сотрудник1) Тогда
		мсвСотрудники.Добавить(Сотрудник1);
	КонецЕсли;	
	Если ЗначениеЗаполнено(Сотрудник2) Тогда
		мсвСотрудники.Добавить(Сотрудник2);
	КонецЕсли;	
	
	ВидыИспользованияРабочегоВремени_Явка = "Дневные";
	ВидыИспользованияРабочегоВремени_РаботаНочныеЧасы = Справочники.уатВидыИспользованияРабочегоВремени.РаботаНочныеЧасы;
	
	Для Каждого ТекСотрудник Из мсвСотрудники Цикл
		Для Каждого ТекСтрока Из тблРабочееВремя Цикл
			Если ТекСтрока.ВидВремени <> ВидыИспользованияРабочегоВремени_Явка
				И ТекСтрока.ВидВремени <> ВидыИспользованияРабочегоВремени_РаботаНочныеЧасы
				ИЛИ ТекСтрока.Продолжительность = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ФактическиОтработанноеВремя.Добавить();
			НоваяСтрока.Дата = ТекСтрока.ДатаРаботы;
			НоваяСтрока.Сотрудник = ТекСотрудник;
			Если ТекСтрока.ВидВремени = ВидыИспользованияРабочегоВремени_Явка Тогда
				НоваяСтрока.ВремяДневное = ТекСтрока.Продолжительность;
			ИначеЕсли ТекСтрока.ВидВремени = ВидыИспользованияРабочегоВремени_РаботаНочныеЧасы Тогда
				НоваяСтрока.ВремяНочное = ТекСтрока.Продолжительность;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ФактическиОтработанноеВремя.Свернуть("Сотрудник, Дата", "ВремяДневное, ВремяНочное");
	
	//// сейчас в таблице время дневное - это время в работе.
	//// корректируем дневное время = время в работе - время ночное
	//Для Каждого ТекСтрока Из ФактическиОтработанноеВремя Цикл
	//	ТекСтрока.ВремяДневное = ТекСтрока.ВремяДневное - ТекСтрока.ВремяНочное;
	//КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область Служебные

// Процедура рассчитывает кол-во сданного топлива в таб. части Сливы ГСМ и заносит это
// значение в табл. часть Расход ГСМ в реквизит Сдано
Процедура ПересчетСданногоГСМ(ТаблицаСливыГСМ = Неопределено) Экспорт
	Если ТаблицаСливыГСМ = Неопределено Тогда
		ТаблицаСливыГСМ = уатОбщегоНазначения.уатПолучитьСливыДляПЛ(Ссылка);
	КонецЕсли;
	
	Для Каждого ТекСтрока Из РасходГСМ Цикл
		мМассивСтрокСливовГСМ = ТаблицаСливыГСМ.НайтиСтроки(Новый Структура("ТС", ТекСтрока.ТС));
		
		тзАналогиГСМ = уатОбщегоНазначения.уатПолучитьАналогиГСМ(ТекСтрока.ГСМ);
		
		чСдано = 0;
		Для сч = 0 По мМассивСтрокСливовГСМ.Количество() - 1 Цикл
			// если заправка не проведена - не учитываем
			Если НЕ мМассивСтрокСливовГСМ[сч].Ссылка.Проведен Тогда
				Продолжить;
			КонецЕсли;
			
			// слив ГСМ или его аналога
			мГСМ		= мМассивСтрокСливовГСМ[сч].ГСМ;
			мКоличество = мМассивСтрокСливовГСМ[сч].Количество;
			
			Если тзАналогиГСМ.Найти(мГСМ, "Аналог") <> Неопределено Или	мГСМ = ТекСтрока.ГСМ Тогда
				чСдано = чСдано + мКоличество;
			КонецЕсли;	
		КонецЦикла;	
		
		Если ТекСтрока.Сдано <> Окр(чСдано, 3) Тогда
			ТекСтрока.Сдано = чСдано;
			Если Рассчитан Тогда
				ТекСтрока.РасходПоФакту = ТекСтрока.ОстатокПриВыезде - ТекСтрока.ОстатокПриВозвращении + ТекСтрока.Выдано - ТекСтрока.Сдано;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Функция проверяет таблицу выработки ТС.
// В случае успеха возвращается Истина, иначе - Ложь
Функция ПроверитьТаблицуВыработкиТС(ТекстСообщения = "") Экспорт
	
	мсвТС = Новый Массив();
	мсвТС.Добавить(ТранспортноеСредство);
	
	Для Каждого ТекОборуд Из Прицепы Цикл
		мсвТС.Добавить(ТекОборуд.ТС);
	КонецЦикла;
	
	Для Каждого ТекТС Из мсвТС Цикл
		Если Не ТекТС.Модель.НаличиеСпидометра Тогда
			Продолжить;
		КонецЕсли;
		
		мПробегОбщий              = 0;
		мПробегСГрузом            = 0;
		мПробегПорожний           = 0;
		мПробегСПассажирами       = 0;
		мПробегСпециальнойРаботы1 = 0;
		мПробегСпециальнойРаботы2 = 0;
		мПробегСпециальнойРаботы3 = 0;
		мПробегСпециальнойРаботы4 = 0;
		мПробегСпециальнойРаботы5 = 0;
		мПробегНаБуксире          = 0;
		
		Для Каждого ТекСтрокаВыработки Из ВыработкаТС Цикл
			Если ТекСтрокаВыработки.ТС <> ТекТС Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТекСтрокаВыработки.ПараметрВыработки = Справочники.уатПараметрыВыработки.ПробегОбщий Тогда
				мПробегОбщий = мПробегОбщий + ТекСтрокаВыработки.Количество;
				
			ИначеЕсли ТекСтрокаВыработки.ПараметрВыработки = Справочники.уатПараметрыВыработки.ПробегСГрузом Тогда
				мПробегСГрузом = мПробегСГрузом + ТекСтрокаВыработки.Количество;
				
			ИначеЕсли ТекСтрокаВыработки.ПараметрВыработки = Справочники.уатПараметрыВыработки.ПробегПорожний Тогда
				мПробегПорожний = мПробегПорожний + ТекСтрокаВыработки.Количество;
				
			ИначеЕсли ТекСтрокаВыработки.ПараметрВыработки = Справочники.уатПараметрыВыработки.ПробегСПассажирами Тогда
				мПробегСПассажирами = мПробегСПассажирами + ТекСтрокаВыработки.Количество;
				
			ИначеЕсли ТекСтрокаВыработки.ПараметрВыработки = Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы
					И Не Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы.Временный Тогда
				мПробегСпециальнойРаботы1 = мПробегСпециальнойРаботы1 + ТекСтрокаВыработки.Количество;
				
			ИначеЕсли ТекСтрокаВыработки.ПараметрВыработки = Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы2
					И Не Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы2.Временный Тогда
				мПробегСпециальнойРаботы2 = мПробегСпециальнойРаботы2 + ТекСтрокаВыработки.Количество;
				
			ИначеЕсли ТекСтрокаВыработки.ПараметрВыработки = Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы3
					И Не Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы3.Временный Тогда
				мПробегСпециальнойРаботы3 = мПробегСпециальнойРаботы3 + ТекСтрокаВыработки.Количество;
				
			ИначеЕсли ТекСтрокаВыработки.ПараметрВыработки = Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы4
					И Не Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы4.Временный Тогда
				мПробегСпециальнойРаботы4 = мПробегСпециальнойРаботы4 + ТекСтрокаВыработки.Количество;
				
			ИначеЕсли ТекСтрокаВыработки.ПараметрВыработки = Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы5
					И Не Справочники.уатПараметрыВыработки.ПробегСпециальнойРаботы5.Временный Тогда
				мПробегСпециальнойРаботы5 = мПробегСпециальнойРаботы5 + ТекСтрокаВыработки.Количество;
				
			ИначеЕсли ТекСтрокаВыработки.ПараметрВыработки = Справочники.уатПараметрыВыработки.ПробегНаБуксире Тогда
				мПробегНаБуксире = мПробегНаБуксире + ТекСтрокаВыработки.Количество;
			КонецЕсли;
		КонецЦикла;
		
		Если Окр(мПробегСГрузом, 1) > Окр(мПробегОбщий, 1) Тогда
			ТекстСообщения = Нстр("en='Mileage with cargo is more than the total mileage';ru='Пробег с грузом превышает общий пробег'");
			Возврат Ложь;
		КонецЕсли;
		
		Если Окр(мПробегПорожний, 1) > Окр(мПробегОбщий, 1) Тогда
			ТекстСообщения = Нстр("en='Empty mileage exceed total mileage';ru='Пробег порожний превышает общий пробег'");
			Возврат Ложь;
		КонецЕсли;
		
		Если Окр(мПробегСПассажирами, 1) > Окр(мПробегОбщий, 1) Тогда
			ТекстСообщения = Нстр("en='Mileage with passengers exceeds of total mileage';ru='Пробег с пассажирами превышает общий пробег'");
			Возврат Ложь;
		КонецЕсли;
		
		Если Окр(мПробегСпециальнойРаботы1, 1) > Окр(мПробегОбщий, 1) Тогда
			ТекстСообщения = Нстр("en='Mileage of spec. work 1 more than total mileage';ru='Пробег спец. работы 1 превышает общий пробег'");
			Возврат Ложь;
		КонецЕсли;
		
		Если Окр(мПробегСпециальнойРаботы2, 1) > Окр(мПробегОбщий, 1) Тогда
			ТекстСообщения = Нстр("en='Mileage of spec. work 2 more than total mileage';ru='Пробег спец. работы 2 превышает общий пробег'");
			Возврат Ложь;
		КонецЕсли;
		
		Если Окр(мПробегСпециальнойРаботы3, 1) > Окр(мПробегОбщий, 1) Тогда
			ТекстСообщения = Нстр("en='Mileage of spec. 3 exceeds total mileage';ru='Пробег спец. работы 3 превышает общий пробег'");
			Возврат Ложь;
		КонецЕсли;
		
		Если Окр(мПробегСпециальнойРаботы4, 1) > Окр(мПробегОбщий, 1) Тогда
			ТекстСообщения = Нстр("en='Mileage spec. work 4 more than total mileage';ru='Пробег спец. работы 4 превышает общий пробег'");
			Возврат Ложь;
		КонецЕсли;
		
		Если Окр(мПробегСпециальнойРаботы5, 1) > Окр(мПробегОбщий, 1) Тогда
			ТекстСообщения = Нстр("en='Mileage of spec. work 5 exceeds total mileage';ru='Пробег спец. работы 5 превышает общий пробег'");
			Возврат Ложь;
		КонецЕсли;
		
		Если Окр(мПробегНаБуксире, 1) > Окр(мПробегОбщий, 1) Тогда
			ТекстСообщения = Нстр("en='Mileage on tug exceeds of total mileage';ru='Пробег на буксире превышает общий пробег'");
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции //ПроверитьТаблицуВыработкиТС

// Функция проверяет таблицу простоев.
// Строка - текущая строка таблицы значений. Если значение не передано, то проверяется
// вся таблица, иначе - только строка.
// В случае успеха возвращается Истина, иначе - Ложь
Функция ПроверитьТаблицуПростоев(ТекстСообщения = "") Экспорт
	Результат = Истина;
		
	Для Каждого ТекСтрока Из Простои Цикл
		Если НачалоДня(ТекСтрока.НачалоПростоя) = '00010101' Тогда
			ТекстСообщения = ТекстСообщения + Символы.ПС + НСтр("en=' not specified date in line ';ru=' не указана дата в строке '") + ТекСтрока.НомерСтроки;
			Результат = Ложь;
			
		ИначеЕсли ТекСтрока.НачалоПростоя > ТекСтрока.КонецПростоя Тогда
			ТекстСообщения = ТекстСообщения + Символы.ПС + НСтр("en=' is incorrect period in line ';ru=' указан некорректный период в строке '") + ТекСтрока.НомерСтроки;
			Результат = Ложь;
			
		ИначеЕсли ДатаВыезда <> '00010101' И ДатаВозвращения <> '00010101'
			И (ТекСтрока.НачалоПростоя < ДатаВыезда ИЛИ ТекСтрока.КонецПростоя > ДатаВозвращения) Тогда
			ТекстСообщения = ТекстСообщения + Символы.ПС + НСтр("en=' downtime period goes beyond limits of waybill in line';ru=' период простоя выходит за границы путевого листа в строке '") + ТекСтрока.НомерСтроки;
			Результат = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции //ПроверитьТаблицуПростоев

// Функция проверяет ТТД по данному путевому листу
// Если ТТД нет, или есть непроведенные ТТД, то возвращается Ложь
Функция ПроверкаТТД(мТаблицаТТД, ПроизвольныеПараметрыВыработки = Неопределено, Знач ДопСообщениеРазделУчета = "") Экспорт
	мТаблицаТТД = уатПутевыеЛисты.уатТТДДляПЛ(Ссылка);
	
	ДопСообщениеРазделУчета = ?(ЗначениеЗаполнено(ДопСообщениеРазделУчета), ДопСообщениеРазделУчета, НСтр("en='Vehicle outputs';ru='выработки ТС'"));
	
	Если мТаблицаТТД.Количество() = 0 Тогда
		Если ПроизвольныеПараметрыВыработки = Неопределено Тогда
			ТекстНСТР = НСтр("en='Calculation of %1 at the waybill №%2 is not met: the waybill is not entered SD';ru='Расчет %1 по путевому листу №%2 не выполнен: по путевому листу не введены ТТД'");
			ТекстНСТР = СтрШаблон(ТекстНСТР, ДопСообщениеРазделУчета, Номер);
			уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР,,, СтатусСообщения.Внимание);
		Иначе
			ТекстНСТР = НСтр("en='Calculating of arbitrary parameters %3 of output of %1 on waybill №%2 failed: SD is not entered on waybill';ru='Расчет произвольных параметров %1 %3 по путевому листу №%2 не выполнен: по путевому листу не введены ТТД'");
			НужнаЗапятая = Ложь;
			СтрокаПараметрыВыработки = "";
			Для Каждого ТекСтрока Из ПроизвольныеПараметрыВыработки Цикл
				СтрокаПараметрыВыработки = СтрокаПараметрыВыработки + ?(НужнаЗапятая, " ,""", """") + Строка(ТекСтрока.Ссылка) + """";
				НужнаЗапятая = Истина;
			КонецЦикла;
			ТекстНСТР = СтрШаблон(ТекстНСТР, ДопСообщениеРазделУчета, Номер, СтрокаПараметрыВыработки);
			уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР,,, СтатусСообщения.Внимание);
		КонецЕсли;
		
		Возврат Ложь;
	КонецЕсли;
	
	Для Каждого ТекСтр из мТаблицаТТД Цикл
		Если Не ТекСтр.ТТД.Проведен Тогда
			Если ПроизвольныеПараметрыВыработки = Неопределено Тогда
				ТекстНСТР = НСтр("en='Calculation of %1 at waybill №%2 failed: on waybill is unposted SD';ru='Расчет %1 по путевому листу №%2 не выполнен: по путевому листу есть непроведенные ТТД'");
				ТекстНСТР = СтрШаблон(ТекстНСТР, ДопСообщениеРазделУчета, Номер);
				уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР,,, СтатусСообщения.Внимание);
			Иначе
				ТекстНСТР = НСтр("en='Calculation of arbitrary parameters %3 of %1 on the waybill No.%1 is not fulfilled: there are unposted SDs on the waybill';ru='Расчет произвольных параметров %1 %3 по путевому листу №%2 не выполнен: по путевому листу есть непроведенные ТТД'");
				НужнаЗапятая = Ложь;
				СтрокаПараметрыВыработки = "";
				Для Каждого ТекСтрока Из ПроизвольныеПараметрыВыработки Цикл
					СтрокаПараметрыВыработки = СтрокаПараметрыВыработки + ?(НужнаЗапятая, " ,""", """") + Строка(ТекСтрока.Ссылка) + """";
					НужнаЗапятая = Истина;
				КонецЦикла;
				ТекстНСТР = СтрШаблон(ТекстНСТР, ДопСообщениеРазделУчета, Номер, СтрокаПараметрыВыработки);
				уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР,,, СтатусСообщения.Внимание);
			КонецЕсли;
			
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции //ПроверкаТТД()

// Процедура удаляет строки из документы Заправки ГСМ, соответствующие данному п/л. 
// Если строк не осталось, то сам документ помечаем на удаление.
Процедура УдалитьЗаправку(вхЗаправка, вхТС = Неопределено, вхДата = Неопределено, вхКоличество = Неопределено) Экспорт
	
	Если вхТС = Неопределено Тогда
		
		мСтроки = вхЗаправка.Заправки.НайтиСтроки(Новый Структура("ПутевойЛист", Ссылка));
		
	Иначе
		
		мСтроки = вхЗаправка.Заправки.НайтиСтроки(Новый Структура("ПутевойЛист, ТС, Дата, Количество", Ссылка, вхТС,
			вхДата, вхКоличество));
		
	КонецЕсли;
	
	Для сч = 0 По мСтроки.Количество() - 1 Цикл
		
		ТекСтрока = мСтроки[сч];
		вхЗаправка.Заправки.Удалить(ТекСтрока);
		
	КонецЦикла;	
	
	Если вхЗаправка.Заправки.Количество() = 0 Тогда
		вхЗаправка.Записать();
		вхЗаправка.УстановитьПометкуУдаления(Истина);
	Иначе
		
		Если вхЗаправка.Проведен Тогда
			мРежимЗаписи = РежимЗаписиДокумента.Проведение;
		Иначе
			мРежимЗаписи = РежимЗаписиДокумента.Запись;
		КонецЕсли;
		
		вхЗаправка.Записать(мРежимЗаписи);
		
	КонецЕсли;
КонецПроцедуры

// Процедура удаляет строки из документы ТТД, соответствующие данному п/л. 
// Если строк не осталось, то сам документ помечаем на удаление.
Процедура УдалитьТТД(вхТТД) Экспорт
	
	мСтроки = вхТТД.Выработка.НайтиСтроки(Новый Структура("ПутЛист", Ссылка));
	Для сч = 0 По мСтроки.Количество() - 1 Цикл
		вхТТД.Выработка.Удалить(мСтроки[сч]);
	КонецЦикла;	
	
	мСтроки = вхТТД.Стоимость.НайтиСтроки(Новый Структура("ПутЛист", Ссылка));
	Для сч = 0 По мСтроки.Количество() - 1 Цикл
		вхТТД.Стоимость.Удалить(мСтроки[сч]);
	КонецЦикла;	
	
	Если вхТТД.Выработка.Количество() = 0 Тогда
		вхТТД.Записать();
		вхТТД.УстановитьПометкуУдаления(Истина);
	Иначе
		
		Если вхТТД.Проведен Тогда
			мРежимЗаписи = РежимЗаписиДокумента.Проведение;
		Иначе
			мРежимЗаписи = РежимЗаписиДокумента.Запись;
		КонецЕсли;
		
		вхТТД.Записать(мРежимЗаписи);
		
	КонецЕсли;
КонецПроцедуры

// Процедура удаляет строки из документы Билетный Лист, соответствующие данному п/л. 
// Если строк не осталось, то сам документ помечаем на удаление.
Процедура УдалитьБилетныйЛист(вхБилетныйЛист) Экспорт
	
	//Если вхТС = Неопределено Тогда
	
	мСтроки = вхБилетныйЛист.Билеты.НайтиСтроки(Новый Структура("ПутевойЛист", Ссылка));
	
	//Иначе
	//	
	//	мСтроки = вхБилетныйЛист.Билеты.НайтиСтроки(Новый Структура("ПутевойЛист, ТС, Дата, Количество", 
	//	Ссылка, вхТС, вхДата, вхКоличество));
	//	
	//КонецЕсли;
	
	Для сч = 0 По мСтроки.Количество() - 1 Цикл
		
		ТекСтрока = мСтроки[сч];
		вхБилетныйЛист.Билеты.Удалить(ТекСтрока);
		
	КонецЦикла;	
	
	Если вхБилетныйЛист.Билеты.Количество() = 0 Тогда
		вхБилетныйЛист.Записать();
		вхБилетныйЛист.УстановитьПометкуУдаления(Истина);
	Иначе
		
		Если вхБилетныйЛист.Проведен Тогда
			мРежимЗаписи = РежимЗаписиДокумента.Проведение;
		Иначе
			мРежимЗаписи = РежимЗаписиДокумента.Запись;
		КонецЕсли;
		
		вхБилетныйЛист.Записать(мРежимЗаписи);
		
	КонецЕсли;
КонецПроцедуры

// Процедура удаляет строки из документы Билетный Лист, соответствующие данному п/л. 
// Если строк не осталось, то сам документ помечаем на удаление.
Процедура УдалитьПосадочнуюВедомость(вхПосадочнаяВедомость) Экспорт
	
	мСтроки = вхПосадочнаяВедомость.Билеты.НайтиСтроки(Новый Структура("ПутевойЛист", Ссылка));
	
	Для сч = 0 По мСтроки.Количество() - 1 Цикл
		
		ТекСтрока = мСтроки[сч];
		вхПосадочнаяВедомость.Билеты.Удалить(ТекСтрока);
		
	КонецЦикла;	
	
	Если вхПосадочнаяВедомость.Билеты.Количество() = 0 Тогда
		вхПосадочнаяВедомость.Записать();
		вхПосадочнаяВедомость.УстановитьПометкуУдаления(Истина);
	Иначе
		
		Если вхПосадочнаяВедомость.Проведен Тогда
			мРежимЗаписи = РежимЗаписиДокумента.Проведение;
		Иначе
			мРежимЗаписи = РежимЗаписиДокумента.Запись;
		КонецЕсли;
		
		вхПосадочнаяВедомость.Записать(мРежимЗаписи);
		
	КонецЕсли;
КонецПроцедуры

// Процедура удаляет документы Выручка, соответствующие данному п/л. 
// Если строк не осталось, то сам документ помечаем на удаление.
Процедура УдалитьДокументыВыручка(вхВыручка) Экспорт
	
	вхВыручка.УстановитьПометкуУдаления(Истина);
	
КонецПроцедуры

// Функция возвращает массив агрегатов установленных на ТС с их параметрами выработки
//
Функция ВывестиПараметрВыработкиПользовательскихАгрегатов() Экспорт 
	МассивАгрегатов = Новый Массив;
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатАгрегатыТССрезПоследних.СерияНоменклатуры КАК СерияНоменклатуры,
	|	уатАгрегатыТССрезПоследних.ТС КАК ТС,
	|	уатАгрегатыТССрезПоследних.СерияНоменклатуры.ПараметрВыработки КАК ПараметрВыработки,
	|	уатАгрегатыТССрезПоследних.СостояниеАгрегата КАК СостояниеАгрегата
	|ПОМЕСТИТЬ Временная
	|ИЗ
	|	РегистрСведений.уатАгрегатыТС.СрезПоследних(&Дата, ТС В (&ТС)) КАК уатАгрегатыТССрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	уатПутевойЛистВыработкаТС.ТС КАК ТС,
	|	Временная.СерияНоменклатуры КАК Агрегат,
	|	уатПутевойЛистВыработкаТС.ПараметрВыработки КАК ПараметрВыработки,
	|	СУММА(уатПутевойЛистВыработкаТС.Количество) КАК Количество
	|ИЗ
	|	Временная КАК Временная
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатПутевойЛист.ВыработкаТС КАК уатПутевойЛистВыработкаТС
	|		ПО (уатПутевойЛистВыработкаТС.ТС = Временная.ТС)
	|			И (уатПутевойЛистВыработкаТС.ПараметрВыработки = Временная.ПараметрВыработки)
	|			И (Временная.СостояниеАгрегата = &СостояниеАгрегата)
	|ГДЕ
	|	уатПутевойЛистВыработкаТС.Ссылка = &Ссылка
	|	И уатПутевойЛистВыработкаТС.ПараметрВыработки В
	|			(ВЫБРАТЬ
	|				Временная.ПараметрВыработки
	|			ИЗ
	|				Временная)
	|
	|СГРУППИРОВАТЬ ПО
	|	Временная.СерияНоменклатуры,
	|	уатПутевойЛистВыработкаТС.ТС,
	|	уатПутевойЛистВыработкаТС.ПараметрВыработки";
	Запрос.УстановитьПараметр("Дата", Новый Граница(ДатаЗакрытия, ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("СостояниеАгрегата", Перечисления.уатСостоянияАгрегатов.УстановленоВРаботе);
	Запрос.УстановитьПараметр("ТС", ВыработкаТС.ВыгрузитьКолонку("ТС"));
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	ВыработкаАгрегатов = Новый ТаблицаЗначений;
	ВыработкаАгрегатов = ВыработкаТС.Выгрузить();
	ВыработкаАгрегатов.Свернуть("ТС,ПараметрВыработки","Количество");
	Пока Выборка.Следующий() Цикл
		СтрокаТЧ = ВыработкаАгрегатов.Найти(Выборка.ПараметрВыработки,"ПараметрВыработки");
		Если СтрокаТЧ <> Неопределено Тогда
			СтруктураАгрегатов = Новый Структура;
			СтруктураАгрегатов.Вставить("ТС",Выборка.ТС);
			СтруктураАгрегатов.Вставить("Агрегат",Выборка.Агрегат);
			СтруктураАгрегатов.Вставить("ПараметрВыработки",Выборка.ПараметрВыработки);
			СтруктураАгрегатов.Вставить("Количество",СтрокаТЧ.Количество);
			МассивАгрегатов.Добавить(СтруктураАгрегатов);
		КонецЕсли;
	КонецЦикла;
	ВывестиПарметрыВыработкиШин(МассивАгрегатов);
	Возврат МассивАгрегатов;
КонецФункции

#КонецОбласти

#КонецОбласти


#Область ОбработчикиСобытий

Процедура ПриКопировании(ОбъектКопирования)
	
	Дата = ТекущаяДата();
	ДатаВыезда      = '00010101';
	ДатаВозвращения = '00010101';
	
	Прицепы.Очистить();
	РасходГСМ.Очистить();
	ВыработкаСотрудников.Очистить();
	ВыработкаТС.Очистить();
	Зарплата.Очистить();
	Простои.Очистить();
	
	ТекДата = ТекущаяДата();
	
	Для Каждого ТексТрока из Задание Цикл
		Если ЗначениеЗаполнено(ТексТрока.ВремяПрибытия) И НачалоДня(ТексТрока.ВремяПрибытия) < НачалоДня(ТекДата) Тогда
			ТексТрока.ВремяПрибытия = НачалоДня(ТекДата)+ (ТексТрока.ВремяПрибытия - НачалоДня(ТексТрока.ВремяПрибытия));
		КонецЕсли;
		Если ЗначениеЗаполнено(ТексТрока.ВремяУбытия) И НачалоДня(ТексТрока.ВремяУбытия) < НачалоДня(ТекДата) Тогда 
			ТексТрока.ВремяУбытия = НачалоДня(ТекДата) + (ТексТрока.ВремяУбытия - НачалоДня(ТексТрока.ВремяУбытия));
		КонецЕсли;
	КонецЦикла;
	
	СпидометрВозвращения     = 0;
	ВыдатьГорючее            = Неопределено;
	ВыдатьКоличествоГорючего = 0;
	ВремяРаботыОтопителя     = 0;
	ЗакрытВодителем          = Ложь;
	ДокументОснование        = Неопределено;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	уатОбщегоНазначенияСервер.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
	Основание = ДанныеЗаполнения;
	Если ТипЗнч(Основание) = Тип("ДокументОбъект.уатМаршрутныйЛист") 
		Или ТипЗнч(Основание) = Тип("ДокументСсылка.уатМаршрутныйЛист") Тогда
		
		Дата = ТекущаяДата();
		Рассчитан = Ложь;
		
		ДокументОснование = Основание.Ссылка;
		
		Организация = Основание.Организация;
		ТранспортноеСредство = Основание.ТС;
		Водитель1 = Основание.Водитель1;
		Водитель2 = Основание.Водитель2;
		Сотрудник1 = Основание.Сотрудник1;
		Сотрудник2 = Основание.Сотрудник2;
		Гараж = Основание.ТС.Гараж;
		ВидСообщения = Основание.ТС.ОсновнойВидСообщения;
		ВидПеревозки = Основание.ВидПеревозки;
		
		ПлановоеВремяВыездаМЛ = Документы.уатМаршрутныйЛист.ПолучитьВремяОтправленияПлан(ДокументОснование);
		ПлановоеВремяВозвратаМЛ = Документы.уатМаршрутныйЛист.ПолучитьВремяВозвратаПлан(ДокументОснование);
		
		Если ЗначениеЗаполнено(Основание.ТС.ОсновнойРежимРаботы) Тогда
			ДатаВыезда = НачалоДня(?(ПлановоеВремяВыездаМЛ = '00010101', Основание.Дата, ПлановоеВремяВыездаМЛ))
				+ (Основание.ТС.ОсновнойРежимРаботы.НачалоРаботы - '00010101');
			ДатаВозвращения = НачалоДня(?(ПлановоеВремяВозвратаМЛ = '00010101', Основание.Дата, ПлановоеВремяВозвратаМЛ))
				+ (Основание.ТС.ОсновнойРежимРаботы.КонецРаботы - '00010101');
		Иначе
				
			ВремяВыездаПЛ		 = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация,
			ПланыВидовХарактеристик.уатПраваИНастройки.ВремяВыездаПЛ);
			ВремяВозращенияПЛ	 = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация,
			ПланыВидовХарактеристик.уатПраваИНастройки.ВремяВозращенияПЛ);
		
			Если ЗначениеЗаполнено(ВремяВыездаПЛ) И ЗначениеЗаполнено(ВремяВозращенияПЛ) Тогда
				ДатаВыезда		 = НачалоДня(?(ПлановоеВремяВыездаМЛ = '00010101', Основание.Дата, ПлановоеВремяВыездаМЛ))
					 + (ВремяВыездаПЛ - '00010101');
				ДатаВозвращения	 = НачалоДня(?(ПлановоеВремяВозвратаМЛ = '00010101', Основание.Дата, ПлановоеВремяВозвратаМЛ))
					+ (ВремяВозращенияПЛ - '00010101');
			Иначе
				Если ЗначениеЗаполнено(ПлановоеВремяВыездаМЛ) И ЗначениеЗаполнено(ПлановоеВремяВозвратаМЛ) Тогда
					ДатаВыезда = ПлановоеВремяВыездаМЛ;
					ДатаВозвращения = ПлановоеВремяВозвратаМЛ;
				Иначе
					ДатаВыезда = НачалоДня(?(ПлановоеВремяВыездаМЛ = '00010101', Основание.Дата, ПлановоеВремяВыездаМЛ))
					+ (уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация,
					ПланыВидовХарактеристик.уатПраваИНастройки.ВремяВыездаПЛ) - '00010101');
					ДатаВозвращения = НачалоДня(?(ПлановоеВремяВозвратаМЛ = '00010101', Основание.Дата, ПлановоеВремяВозвратаМЛ))
					+ (уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация,
					ПланыВидовХарактеристик.уатПраваИНастройки.ВремяВозращенияПЛ) - '00010101');
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		Если ДатаВозвращения <= ДатаВыезда Тогда //ночной режим работы
			ДатаВозвращения = НачалоДня(ДатаВыезда) + 86400 + (ДатаВозвращения - НачалоДня(ДатаВозвращения));
		КонецЕсли;
		
		ДатаЗакрытия = ?(ДатаВозвращения > ДатаВыезда, ДатаВозвращения - 1, ДатаВозвращения);
		
		// Заполнение табличной части "Задание" реализовано в форме документа.
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументОбъект.уатЗаказГрузоотправителя") Или
		ТипЗнч(Основание) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") Тогда
		
		Дата = ТекущаяДата();
		Рассчитан = Ложь;
		
		ДокументОснование = Основание.Ссылка;
		
		Организация = Основание.Организация;
		ОбъектСтроительства = Основание.ОбъектСтроительства;
		ВидПеревозки = Основание.ВидПеревозки;

		ВремяВыездаПЛ		 = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация,
				ПланыВидовХарактеристик.уатПраваИНастройки.ВремяВыездаПЛ);
		ВремяВозращенияПЛ	 = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация,
				ПланыВидовХарактеристик.уатПраваИНастройки.ВремяВозращенияПЛ);
		
		Если ЗначениеЗаполнено(ВремяВыездаПЛ) И ЗначениеЗаполнено(ВремяВозращенияПЛ) Тогда
			ДатаВыезда		 = НачалоДня(Основание.ОтправлениеС) + (ВремяВыездаПЛ - '00010101');
			ДатаВозвращения	 = НачалоДня(Основание.ДоставкаПо) + (ВремяВозращенияПЛ - '00010101');
		Иначе
			ДатаВыезда		 = Основание.ОтправлениеС;
			ДатаВозвращения	 = Основание.ДоставкаПо;
		КонецЕсли;

		Если ДатаВозвращения < ДатаВыезда Тогда //ночной режим работы
			ДатаВозвращения = НачалоДня(ДатаВыезда) + 86400 + (ДатаВозвращения - НачалоДня(ДатаВозвращения));
		КонецЕсли;
		
		уатПутевыеЛисты.ЗаполнитьЗаданиеПоЗаказам(Основание, ЭтотОбъект);
		
	КонецЕсли;
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	уатПроведение.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа.
	Документы.уатПутевойЛист.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	уатПроведение.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета. Движения которые выполняются всегда
	уатПроведение.ОтразитьСостояниеТС(ДополнительныеСвойства, Движения, Отказ);
	уатПроведение.ОтразитьПланированиеРаботыТС(ДополнительныеСвойства, Движения, Отказ);
	
	// Отражение в разделах учета. Часть движений которые выполняются только когда путевой лист рассчитан
	Если Рассчитан Тогда 
		уатПроведение.ОтразитьСчетчикиТС(ДополнительныеСвойства, Движения, Отказ);
		уатПроведение.ОтразитьВыработкуТС(ДополнительныеСвойства, Движения, Отказ);
		уатПроведение.ОтразитьВыработкуСотрудников(ДополнительныеСвойства, Движения, Отказ);
		уатПроведение.ОтразитьПростои(ДополнительныеСвойства, Движения, Отказ);
		уатПроведение.ОтразитьОстаткиГСМНаТС(ДополнительныеСвойства, Движения, Отказ);
		уатПроведение.ОтразитьРасходГСМНаТС(ДополнительныеСвойства, Движения, Отказ);
		Если уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация,
				ПланыВидовХарактеристик.уатПраваИНастройки.ИспользоватьУчетНормативногоРасходаТехЖидкостей) тогда
			уатПроведение.ОтразитьПартииТЖ(ДополнительныеСвойства, Движения, Отказ);
			уатПроведение.ОтразитьРасходТЖ(ДополнительныеСвойства, Движения, Отказ);
		КонецЕсли;
		уатПроведение.ОтразитьИзносПробегШин(ДополнительныеСвойства, Движения, Отказ);
		уатПроведение_проф.ОтразитьВыработкуАгрегатов(ДополнительныеСвойства, Движения, Отказ);
		уатПроведение.ОтразитьОсновныеНачисления(ДополнительныеСвойства, Движения, Отказ);
		Если уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация,
				ПланыВидовХарактеристик.уатПраваИНастройки.УчетРабочегоВремени) Тогда
			уатПроведение.ОтразитьРабочееВремяРаботниковОрганизаций(ДополнительныеСвойства, Движения, Отказ);
		КонецЕсли;
		Если ПолучитьФункциональнуюОпцию("уатИспользоватьУчетДоходовИРасходов") = ИСТИНА Тогда
			уатПроведение.ОтразитьРасходы(ДополнительныеСвойства, Движения, Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если Константы.уатЗакрытиеЗаказовНаТСПутевымиЛистами.Получить() = Истина Тогда
		уатПроведение_уэ.ОтразитьСтатусыГрузов(ДополнительныеСвойства, Движения, Отказ);
		уатПроведение_уэ.ОтразитьГрузыКПеревозке(ДополнительныеСвойства, Движения, Отказ);
		уатПроведение.ОтразитьЗаказыГрузоотправителей(ДополнительныеСвойства, Движения, Отказ);
	КонецЕсли;
	
	// Запись наборов записей.
	уатПроведение.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль возникновения отрицательного остатка.
	Документы.уатПутевойЛист.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("МодифицированностьДокумента", Модифицированность());
	
	//уатЖурналыТранспортныхДокументов.НайтиРасхождениеКлючевыхРеквизитов(ЭтотОбъект);
	
	// режим записи - всегда проведение
	Если РежимЗаписи = РежимЗаписиДокумента.Запись И (НЕ Отказ) и (Не ПометкаУдаления) Тогда
		РежимЗаписи = РежимЗаписиДокумента.Проведение;
	КонецЕсли;
	
	// В случае если дата закрытия равна дате выезда, то прибавим 1 сек для корректного расчета ГСМ
	Если ДатаЗакрытия = ДатаВыезда Тогда
		ДатаЗакрытия = ДатаЗакрытия + 1;
	КонецЕсли;
	
	Если ПометкаУдаления Тогда
		// Удаляем данные в заправках, ТТД и билетных листах
		мТаблицаЗаправкиГСМ = уатОбщегоНазначения.уатПолучитьЗаправкиДляПЛ(Ссылка);
		мТаблицаСливыГСМ    = уатОбщегоНазначения.уатПолучитьСливыДляПЛ(Ссылка);
		мТаблицаСливыНаТС   = уатОбщегоНазначения.уатПолучитьСливыНаТСДляПЛ(Ссылка);
		мТаблицаТТД         = уатПутевыеЛисты.уатТТДДляПЛ(Ссылка);
		
		Попытка
			мТаблицаБилетныеЛисты = Вычислить("уатПолучитьБилетныеЛистыДляПЛ(Ссылка)");
		Исключение
			мТаблицаБилетныеЛисты = Новый ТаблицаЗначений;
		КонецПопытки;
		
		Попытка
			мТаблицаВыручка = Вычислить("уатПолучитьВыручкуДляПЛ(Ссылка)");
		Исключение
			мТаблицаВыручка = Новый ТаблицаЗначений;
		КонецПопытки;
		
		ТекстСообщенияЗаправкиСливы = "";
		флЗапретПометкиУдаленияПЛприНаличииЗаправокСливовГСМ = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(
			Организация, "ЗапретПометкиУдаленияПЛприНаличииЗаправокСливовГСМ");
		Если мТаблицаСливыГСМ.Количество() > 0 ИЛИ мТаблицаСливыНаТС.Количество() > 0 Тогда
			Если флЗапретПометкиУдаленияПЛприНаличииЗаправокСливовГСМ Тогда
				Отказ = Истина;
				ТекстСообщенияЗаправкиСливы = "Пометка удаления запрещена: по Путевому листу введены Сливы ГСМ!";
			Иначе
				Для Каждого ТекСтрока Из мТаблицаСливыГСМ Цикл
					ДокСлив = ТекСтрока.Ссылка.ПолучитьОбъект();
					ДокСлив.ПутевойЛист = Неопределено;
					ДокСлив.Записать();
					Если Не ЗначениеЗаполнено(ДокСлив.ПутевойЛистПриемник) Тогда 
						ДокСлив.УстановитьПометкуУдаления(Истина);
					КонецЕсли;
				КонецЦикла;
				Для Каждого ТекСтрока Из мТаблицаСливыНаТС Цикл
					ДокСлив = ТекСтрока.Ссылка.ПолучитьОбъект();
					ДокСлив.ПутевойЛистПриемник = Неопределено;
					ДокСлив.Записать();
					Если Не ЗначениеЗаполнено(ДокСлив.ПутевойЛист) Тогда 
						ДокСлив.УстановитьПометкуУдаления(Истина);
					КонецЕсли;
				КонецЦикла;
				ТекстСообщенияЗаправкиСливы = "При пометке удаления была удалена информация о Сливах ГСМ, введенных по Путевому листу";
			КонецЕсли;
		КонецЕсли;
		Если мТаблицаЗаправкиГСМ.Количество() > 0 Тогда
			Если флЗапретПометкиУдаленияПЛприНаличииЗаправокСливовГСМ Тогда
				Отказ = Истина;
				Если ПустаяСтрока(ТекстСообщенияЗаправкиСливы) Тогда
					ТекстСообщенияЗаправкиСливы = "Пометка удаления запрещена: по Путевому листу введены Заправки ГСМ!";
				Иначе
					ТекстСообщенияЗаправкиСливы = "Пометка удаления запрещена: по Путевому листу введены Заправки и Сливы ГСМ!";
				КонецЕсли;
			Иначе
				Для Каждого ТекСтрока Из мТаблицаЗаправкиГСМ Цикл
					УдалитьЗаправку(ТекСтрока.Ссылка.ПолучитьОбъект());
				КонецЦикла;
				Если ПустаяСтрока(ТекстСообщенияЗаправкиСливы) Тогда
					ТекстСообщенияЗаправкиСливы = "При пометке удаления была удалена информация о Заправках ГСМ, введенных по Путевому листу";
				Иначе
					ТекстСообщенияЗаправкиСливы = "При пометке удаления была удалена информация о Заправках и Сливах ГСМ, введенных по Путевому листу";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если НЕ ПустаяСтрока(ТекстСообщенияЗаправкиСливы) Тогда
			флОтказ = Ложь;
			уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстСообщенияЗаправкиСливы, флОтказ);
		КонецЕсли;
		
		Для Каждого ТекСтрока Из мТаблицаТТД Цикл
			УдалитьТТД(ТекСтрока.ТТД.ПолучитьОбъект());
		КонецЦикла;
		
		Для Каждого ТекСтрока Из мТаблицаБилетныеЛисты Цикл
			УдалитьБилетныйЛист(ТекСтрока.Ссылка.ПолучитьОбъект());
		КонецЦикла;
		
		Для Каждого ТекСтрока Из мТаблицаВыручка Цикл
			УдалитьДокументыВыручка(ТекСтрока.Ссылка.ПолучитьОбъект());
		КонецЦикла;
	КонецЕсли;
	
	// Сброс флага Рассчитан
	Если НЕ Отказ И РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения И Рассчитан Тогда
		Рассчитан = Ложь;
	КонецЕсли;
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение и Не ПометкаУдаления Тогда
		// Проверка заполнения документа
		уатПутевыеЛисты.ПроверитьЗаполнениеДокумента(ЭтотОбъект, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		
		Если Рассчитан тогда
			Права_ = Неопределено;
			флРассчитатьИтоги = (уатПраваИНастройки.уатПраво("ПутевойЛистПерерасчетИтоговПриПроведении", Права_) = Истина);
			Если флРассчитатьИтоги Тогда
				РасчетИтогов(Отказ, Ложь);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// запись служебных реквизитов ОборудованиеПрицеп1 и ОборудованиеПрицеп2
	ОборудованиеПрицеп1 = Неопределено;
	ОборудованиеПрицеп2 = Неопределено;
	Если Прицепы.Количество() > 0 Тогда
		ОборудованиеПрицеп1 = Прицепы[0].ТС;
		Если Прицепы.Количество() > 1 Тогда
			ОборудованиеПрицеп2 = Прицепы[1].ТС;
		КонецЕсли;
	КонецЕсли;
	Для Каждого ТекЗадание Из Задание Цикл
		Если ЗначениеЗаполнено(ОборудованиеПрицеп1) И ЗначениеЗаполнено(ОборудованиеПрицеп2) Тогда
			Прервать;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекЗадание.Прицеп1) Тогда
			Если НЕ ЗначениеЗаполнено(ОборудованиеПрицеп1) Тогда
				ОборудованиеПрицеп1 = ТекЗадание.Прицеп1;
			ИначеЕсли НЕ ЗначениеЗаполнено(ОборудованиеПрицеп2) Тогда
				ОборудованиеПрицеп2 = ТекЗадание.Прицеп1;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекЗадание.Прицеп2) Тогда
			Если НЕ ЗначениеЗаполнено(ОборудованиеПрицеп1) Тогда
				ОборудованиеПрицеп1 = ТекЗадание.Прицеп2;
			ИначеЕсли НЕ ЗначениеЗаполнено(ОборудованиеПрицеп2) Тогда
				ОборудованиеПрицеп2 = ТекЗадание.Прицеп2;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры // ПередЗаписью

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Отказ И уатЗащищенныеФункцииСервер_проф.ИспользоватьШтрихкодированиеОбъекта("уатПутевойЛист") Тогда
		уатЗащищенныеФункцииСервер_проф.ПолучитьСформироватьШтрихкодОбъекта(Ссылка);
	КонецЕсли;
	
	Если НЕ Отказ И ПолучитьФункциональнуюОпцию("уатИспользоватьЖурналыТранспортныхДокументов") Тогда
		уатЖурналыТранспортныхДокументов.ИзменитьСостоянияПодписейПЛ(Ссылка);
	КонецЕсли;
		
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если ТипЗнч(МедработникВыезд) = Тип("СправочникСсылка.ФизическиеЛица") тогда
		ПроверяемыеРеквизиты.Добавить("Медорганизация");
	КонецЕсли;
	Если ТипЗнч(ВыпустилМеханик) = Тип("СправочникСсылка.ФизическиеЛица") тогда
		ПроверяемыеРеквизиты.Добавить("КонтрольТранспорта");
	КонецЕсли;
	Если ТипЗнч(УполномоченныйНаПроставлениеОдометраПриВыезде) = Тип("СправочникСсылка.ФизическиеЛица") тогда
		ПроверяемыеРеквизиты.Добавить("ПоказанияОдометра");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Процедура ОбновитьДанныеВыработкиПоGPS()
	
	// Обновление пробега, времени работы по GPS
	ОбъектСтруктура = Новый Структура;
	ОбъектСтруктура.Вставить("Организация",           Организация);
	ОбъектСтруктура.Вставить("ТранспортноеСредство",  ТранспортноеСредство);
	ОбъектСтруктура.Вставить("ДатаВыезда",            ДатаВыезда);
	ОбъектСтруктура.Вставить("ДатаВозвращения",       ДатаВозвращения);
	ОбъектСтруктура.Вставить("СпидометрВыезда",       СпидометрВыезда);
	ОбъектСтруктура.Вставить("СпидометрВозвращения",  СпидометрВозвращения);
	ОбъектСтруктура.Вставить("флТолькоОдометрВозвращения", Истина);
	ОбъектСтруктура.Вставить("Прицепы",               Новый Массив());
	
	Для Каждого ТекПрицеп Из Прицепы Цикл 
		СтрокаПрицепа = Новый Структура("ТС, СпидометрВыезда, СпидометрВозвращения",
			ТекПрицеп.ТС,
			ТекПрицеп.СчетчикМЧВыезда,
			ТекПрицеп.СчетчикМЧВозвращения);
		ОбъектСтруктура.Прицепы.Добавить(СтрокаПрицепа);
	КонецЦикла;
	
	РезультатСтруктура = Новый Структура;
	
	//РАСЧЕТ
	уатМониторинг.РассчитатьСпидометрПоМониторингу(ОбъектСтруктура, РезультатСтруктура);
	
	// заполнение основных реквизитов
	Если РезультатСтруктура.Свойство("СчетчикПоGPS") Тогда
		ПробегПоGPS = РезультатСтруктура.СчетчикПоGPS;
	КонецЕсли;
	Если РезультатСтруктура.Свойство("ПробегПоGPS") Тогда
		ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ПробегОбщийПоДаннымGPS, 
			Окр(РезультатСтруктура.ПробегПоGPS, 2, РежимОкругления.Окр15как20),, Истина, Истина);
	КонецЕсли;
	Если РезультатСтруктура.Свойство("МоточасыПоGPS") Тогда 
		ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВРаботеПоДаннымGPS, 
			Окр(РезультатСтруктура.МоточасыПоGPS*3600, 2),, Истина, Истина);
	КонецЕсли;
	
	// Заполнение данных по прицепам
	Для Каждого ТекПрицеп Из РезультатСтруктура.Прицепы Цикл 
		Если ТекПрицеп.Свойство("СчетчикПоGPS") Тогда
			НайдСтроки = Прицепы.НайтиСтроки(Новый Структура("ТС", ТекПрицеп.ТС));
			Если НайдСтроки.Количество() Тогда 
				НайдСтроки[0].СчетчикМЧGPS = ТекПрицеп.СчетчикПоGPS;
			КонецЕсли;
		КонецЕсли;
		Если ТекПрицеп.Свойство("ПробегПоGPS") Тогда
			ЗаписатьСтрокуВыработкиТС(ТекПрицеп.ТС, Справочники.уатПараметрыВыработки.ПробегОбщийПоДаннымGPS, 
				Окр(ТекПрицеп.ПробегПоGPS, 2, РежимОкругления.Окр15как20),, Истина, Истина);
		КонецЕсли;
		Если ТекПрицеп.Свойство("МоточасыПоGPS") Тогда
			ЗаписатьСтрокуВыработкиТС(ТекПрицеп.ТС, Справочники.уатПараметрыВыработки.ВремяВРаботеПоДаннымGPS, 
				Окр(ТекПрицеп.МоточасыПоGPS*3600, 2),, Истина, Истина);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьВыработкуПоGPS(ТекТС, ТекПараметрВыработки)
	
	НайдСтроки = ВыработкаТС.НайтиСтроки(Новый Структура("ТС,ПараметрВыработки",ТекТС,ТекПараметрВыработки));
	Если НайдСтроки.Количество() Тогда 
		Возврат НайдСтроки[0].Количество;
	Иначе 
		Возврат 0;
	КонецЕсли;
	
КонецФункции // ПолучитьВыработкуПоGPS()

// Процедура рассчитывает выработку ТС по ТЧ Задание
//
Процедура РасчетВыработкиТС_ПоЗаданию(Отказ, ПодставлятьВремяВРаботеВПЛпоGPS, ПодставлятьОбщийПробегВПЛпоGPS)
	// Очистка выработки - только для предопределенных параметров выработки
	// и для параметров с произвольным расчетом, если задана формула расчета
	
	СтрокиПробегПоGPS  = ВыработкаТС.НайтиСтроки(Новый Структура("ПараметрВыработки", Справочники.уатПараметрыВыработки.ПробегОбщийПоДаннымGPS));
	мСтрокиПробегПоGPS = Новый Массив();
	Для Каждого ТекСтрока Из СтрокиПробегПоGPS Цикл
		мСтрокиПробегПоGPS.Добавить(Новый Структура("ТС, Количество", ТекСтрока.ТС, ТекСтрока.Количество));
	КонецЦикла;
	
	СтрокиВремяВРаботеПоGPS  = ВыработкаТС.НайтиСтроки(Новый Структура("ПараметрВыработки", Справочники.уатПараметрыВыработки.ВремяВРаботеПоДаннымGPS));
	мСтрокиВремяВРаботеПоGPS = Новый Массив();
	Для Каждого ТекСтрока Из СтрокиВремяВРаботеПоGPS Цикл
		мСтрокиВремяВРаботеПоGPS.Добавить(Новый Структура("ТС, Количество", ТекСтрока.ТС, ТекСтрока.Количество));
	КонецЦикла;

	Сч = ВыработкаТС.Количество() - 1;
	Пока Сч >= 0 Цикл
		ТекСтрока = ВыработкаТС[Сч];
		Если ТекСтрока.ПараметрВыработки.Предопределенный
			ИЛИ НЕ ТекСтрока.ПараметрВыработки.Предопределенный И ЗначениеЗаполнено(ТекСтрока.ПараметрВыработки.АлгоритмРасчетаПараметра) 
			ИЛИ Задание.Найти(ТекСтрока.ПараметрВыработки) <> Неопределено Тогда
			ВыработкаТС.Удалить(ТекСтрока);
		КонецЕсли;
		Сч = Сч - 1;
	КонецЦикла;
	
	// пробег общий для ТС со счетчиком моточасов
	Если НЕ ТранспортноеСредство.Модель.НаличиеСпидометра Тогда
		мПробегОбщий = НулевойПробегВыезда + НулевойПробегВозвращения;
		// Пробег с грузом и порожний пробег будут добавлены позднее.
	КонецЕсли;
	
	Для Каждого ТекСтрока Из мСтрокиПробегПоGPS Цикл
		ЗаписатьСтрокуВыработкиТС(ТекСтрока.ТС, Справочники.уатПараметрыВыработки.ПробегОбщийПоДаннымGPS, ТекСтрока.Количество);
	КонецЦикла;
	
	Для Каждого ТекСтрока Из мСтрокиВремяВРаботеПоGPS Цикл
		ЗаписатьСтрокуВыработкиТС(ТекСтрока.ТС, Справочники.уатПараметрыВыработки.ВремяВРаботеПоДаннымGPS, ТекСтрока.Количество);
	КонецЦикла;

	// время в наряде
	ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВНаряде, мВремяВНаряде);
	
	// время в простое
	ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВПростое, мВремяВПростое - мВремяВПростоеСВклДвигателем);
	
	// время в простое с вкл. двигателем
	ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВПростоеСВклДвигателем, мВремяВПростоеСВклДвигателем);
	
	// количество дней
	ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.КоличествоДней, мКоличествоДней);
	
	// количество рейсов
	ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.КоличествоРейсов, 1, , Ложь);
	
	мКоличествоКмСГрузом = 0;
	мКоличествоЧасов = 0;
	мПробегПорожний = 0;
	мПробегОбщийПоЗаданию = 0;
	мПробегСпецНеВкл = 0;
	мОбщаяНаработка = уатОбщегоНазначения.уатПоказанияСчетчикаВСекунды(уатОбщегоНазначения.уатРазностьПоказанийСчетчика(СпидометрВыезда, СпидометрВозвращения));
	мПрибытиеВнеРасписания = 0;
	
	// делаем таблицу с номерами этапов
	мЭтапыЗадания = Задание.Выгрузить();
	мЭтапыЗадания.Свернуть("НомерЕздки");
	
	СуммированиеПоЭтапам = ПараметрыВыработкиСуммированиеПоЭтапам();
	ПараметрВыработкиПробегСГрузом = ПолучитьПараметрВыработкиПробегСГрузомПассажирами();
	ТаблицаЗаданиеСвернутая = ПолучитьЗаданиеСвернутоеСУчетомЭтапов(Истина);
	
	ПредНомерЕздки = -1;
	Для Каждого ТекСтрЗадание Из ТаблицаЗаданиеСвернутая Цикл
		СтруктураСтроки = Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут, ВидПеревозки, НаправлениеПеревозки",
			ТекСтрЗадание.Подразделение, ТекСтрЗадание.Контрагент, ТекСтрЗадание.ОбъектСтроительства, ТекСтрЗадание.Маршрут, ТекСтрЗадание.ВидПеревозки, ТекСтрЗадание.НаправлениеПеревозки);
		
		// время в работе
		Если Не (ПодставлятьВремяВРаботеВПЛпоGPS И ЗначениеЗаполнено(ТранспортноеСредство.ИспользуемаяСистемаGPS) И ЗначениеЗаполнено(ТранспортноеСредство.ИДвСистемеНавигации)) Тогда 
			Если ТранспортноеСредство.Модель.НаличиеСпидометра Тогда
				ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВРаботе, уатОбщегоНазначения.уатВремяВСекунды(ТекСтрЗадание.КоличествоЧасов), СтруктураСтроки, Ложь);
			Иначе
				// Отдельно для порожнего пробега
				// время работы записываем, если общая наработка больше чем уже учтенная до этого
				// (нельзя записать время в работе больше чем разность показаний счетчика в шапке)
				Если мКоличествоЧасов < мОбщаяНаработка Тогда
					ТекНаработка = Мин(мОбщаяНаработка - мКоличествоЧасов, уатОбщегоНазначения.уатВремяВСекунды(ТекСтрЗадание.КоличествоЧасов));
					ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВРаботе, ТекНаработка, СтруктураСтроки, Ложь);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// Когда рассчитывается макс. значение параметра для всех строк по этапу, 
		// тогда в свернутой таблице оно одинаковое для строк с одинаковым номером ездки и нужно взять только одно из них
		Если ТекСтрЗадание.НомерЕздки = 0 ИЛИ СуммированиеПоЭтапам.ВесГруза Или ТекСтрЗадание.НомерЕздки <> ПредНомерЕздки Тогда
			ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВесГруза,	ТекСтрЗадание.КоличествоТонн, СтруктураСтроки, Ложь);
		КонецЕсли;
		Если ТекСтрЗадание.НомерЕздки = 0 ИЛИ СуммированиеПоЭтапам.Объем Или ТекСтрЗадание.НомерЕздки <> ПредНомерЕздки Тогда
			ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.Объем, ТекСтрЗадание.Объем, СтруктураСтроки, Ложь);
		КонецЕсли;
		Если ТекСтрЗадание.НомерЕздки = 0 ИЛИ СуммированиеПоЭтапам.КоличествоЕздок Или ТекСтрЗадание.НомерЕздки <> ПредНомерЕздки Тогда
			ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.КоличествоЕздок, ТекСтрЗадание.КоличествоЕздок, СтруктураСтроки, Ложь);
		КонецЕсли;
		
		// количество операций
		Если ТекСтрЗадание.НомерЕздки = 0 ИЛИ СуммированиеПоЭтапам.КоличествоОпераций Или ТекСтрЗадание.НомерЕздки <> ПредНомерЕздки Тогда
			ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.КоличествоОпераций, ТекСтрЗадание.КоличествоОпераций, СтруктураСтроки, Ложь);
		КонецЕсли;
		
		// Фактическое время опоздания и простоя
		Если ТекСтрЗадание.НомерЕздки = 0 ИЛИ СуммированиеПоЭтапам.ФактическоеВремяОпоздания Или ТекСтрЗадание.НомерЕздки <> ПредНомерЕздки Тогда
			ОпозданиеСекунд = уатОбщегоНазначения.уатВремяВСекунды(ТекСтрЗадание.ФактическоеВремяОпоздания);
			ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ФактическоеВремяОпоздания, ОпозданиеСекунд, СтруктураСтроки, Ложь);
		КонецЕсли;
		Если ТекСтрЗадание.НомерЕздки = 0 ИЛИ СуммированиеПоЭтапам.ФактическоеВремяПростоя Или ТекСтрЗадание.НомерЕздки <> ПредНомерЕздки Тогда
			ПростойСекунд = уатОбщегоНазначения.уатВремяВСекунды(ТекСтрЗадание.ФактическоеВремяПростоя);
			ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ФактическоеВремяПростоя, ПростойСекунд, СтруктураСтроки, Ложь);
		КонецЕсли;
		
		// подача
		ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.Подача, уатОбщегоНазначения.уатВремяВСекунды(ТекСтрЗадание.Подача), СтруктураСтроки, Ложь);
		
		// пробег с грузом/пассажирами
		Если ТекСтрЗадание.НомерЕздки = 0 ИЛИ СуммированиеПоЭтапам.ПробегСГрузомПассажирами Или ТекСтрЗадание.НомерЕздки <> ПредНомерЕздки Тогда
			Если НЕ ТранспортноеСредство.Модель.НаличиеСпидометра Тогда
				мПробегОбщий = мПробегОбщий + ТекСтрЗадание.КоличествоКмГруз;
			КонецЕсли;
			мПробегОбщийПоЗаданию = мПробегОбщийПоЗаданию + ТекСтрЗадание.КоличествоКмГруз;
			мКоличествоКмСГрузом = мКоличествоКмСГрузом + ТекСтрЗадание.КоличествоКмГруз;
			ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, ПараметрВыработкиПробегСГрузом, ТекСтрЗадание.КоличествоКмГруз, СтруктураСтроки, Ложь);
			ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ПробегОбщий, ТекСтрЗадание.КоличествоКмГруз, СтруктураСтроки, Ложь);
		КонецЕсли;
		
		// пробег порожний
		Если ТекСтрЗадание.НомерЕздки = 0 ИЛИ СуммированиеПоЭтапам.ПробегПорожний Или ТекСтрЗадание.НомерЕздки <> ПредНомерЕздки Тогда
			ТекПробегПорожний = ТекСтрЗадание.КоличествоКмПорожний;
			Если НЕ ТранспортноеСредство.Модель.НаличиеСпидометра Тогда
				мПробегОбщий = мПробегОбщий + ТекСтрЗадание.КоличествоКмПорожний;
			КонецЕсли;
			ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ПробегПорожний, ТекПробегПорожний, СтруктураСтроки, Ложь);
			ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ПробегОбщий, ТекПробегПорожний, СтруктураСтроки, Ложь);
			мПробегПорожний = мПробегПорожний + ТекПробегПорожний;
			мПробегОбщийПоЗаданию = мПробегОбщийПоЗаданию + ТекПробегПорожний;
		КонецЕсли;
		
		// Спец. работы.
		ТекПробегСпецНеВкл = 0;
		Для Сч = 1 По ТекСтрЗадание.КоличествоСпецработ Цикл
			Если ТекСтрЗадание.НомерЕздки = 0 ИЛИ ТекСтрЗадание["СпецРабота" + Сч].СпособРасчетаПоНомеруЭтапа = 0 Или ТекСтрЗадание.НомерЕздки <> ПредНомерЕздки Тогда
				ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, ТекСтрЗадание["СпецРабота" + Сч],
					ТекСтрЗадание["КоличествоСпецРаботы" + Сч], СтруктураСтроки, Ложь);
				Если ТекСтрЗадание["СпецРабота" + Сч].УвеличитьОбщийПробегНаПробегСпец Тогда
					ТекПробегСпецНеВкл = ТекПробегСпецНеВкл + ТекСтрЗадание["КоличествоСпецРаботы" + Сч];
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		мПробегСпецНеВкл = мПробегСпецНеВкл + ТекПробегСпецНеВкл;
		мПробегОбщийПоЗаданию = мПробегОбщийПоЗаданию + ТекПробегСпецНеВкл;
		ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ПробегОбщий, ТекПробегСпецНеВкл, СтруктураСтроки, Ложь);
					
		// тн*км
		ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ТнКм, ТекСтрЗадание.ТнКм, СтруктураСтроки, Ложь);
		
		// объем*км
		ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ОбъемКм, ТекСтрЗадание.ОбъемКм, СтруктураСтроки, Ложь);
		
		// количество пассажиров
		ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.КоличествоПассажиров, ТекСтрЗадание.КоличествоПассажиров, СтруктураСтроки, Ложь);
		
		// время в работе оборудования, у которого есть спидометр, а не счетчик моточасов
		Для Каждого ТекСтрПрицепы из Прицепы Цикл
			Если ТекСтрПрицепы.ТС.Модель.НаличиеСпидометра И ТекСтрЗадание.КоличествоЧасов > 0 Тогда
				Если ПодставлятьВремяВРаботеВПЛпоGPS И ЗначениеЗаполнено(ТекСтрПрицепы.ТС.ИспользуемаяСистемаGPS) И ЗначениеЗаполнено(ТекСтрПрицепы.ТС.ИДвСистемеНавигации) Тогда 
					КоличествоВыработкиПоGPS = ПолучитьВыработкуПоGPS(ТекСтрПрицепы.ТС, Справочники.уатПараметрыВыработки.ВремяВРаботеПоДаннымGPS);
					ЗаписатьСтрокуВыработкиТС(ТекСтрПрицепы.ТС, Справочники.уатПараметрыВыработки.ВремяВРаботе, КоличествоВыработкиПоGPS, СтруктураСтроки, Истина);
				Иначе 
					ЗаписатьСтрокуВыработкиТС(ТекСтрПрицепы.ТС, Справочники.уатПараметрыВыработки.ВремяВРаботе, уатОбщегоНазначения.уатВремяВСекунды(ТекСтрЗадание.КоличествоЧасов), СтруктураСтроки, Ложь);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		// Прибытие вне расписания по Заказам на ТС. Равно 1, если прибытие не по расписанию хотя бы для 1 заказа.
		Если ЗначениеЗаполнено(ТекСтрЗадание.ЗаказНаТС) И ЗначениеЗаполнено(ТекСтрЗадание.ВремяУбытия)
			И уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП() Тогда
			Если НачалоМинуты(ТекСтрЗадание.ВремяУбытия) <> НачалоМинуты(ТекСтрЗадание.ЗаказНаТС.ПрибытиеПоРасписанию) Тогда
				мПрибытиеВнеРасписания = 1;
			КонецЕсли;
		КонецЕсли;
		
		мКоличествоЧасов = мКоличествоЧасов + уатОбщегоНазначения.уатВремяВСекунды(ТекСтрЗадание.КоличествоЧасов);
		ПредНомерЕздки = ТекСтрЗадание.НомерЕздки;
	КонецЦикла;
	
	// Выработка прицепов и оборудования, указанных в Задании.
	// Здесь не используется свернутая таблица выработки, чтобы не потерять данные по прицепам
	Для Каждого ТекЭтапЗадания из мЭтапыЗадания Цикл
		// выбираем строки для каждого этапа задания
		мСтрокиЗадания = Задание.НайтиСтроки(Новый Структура("НомерЕздки, Выполнено", ТекЭтапЗадания.НомерЕздки, Истина));
		
		Для Каждого ТекСтрЗадание Из мСтрокиЗадания Цикл
			
			// прицеп1
			Если ЗначениеЗаполнено(ТекСтрЗадание.Прицеп1) Тогда
				Если Не (ПодставлятьВремяВРаботеВПЛпоGPS И ЗначениеЗаполнено(ТекСтрЗадание.Прицеп1.ИспользуемаяСистемаGPS) И ЗначениеЗаполнено(ТекСтрЗадание.Прицеп1.ИДвСистемеНавигации)) И Не ТекСтрЗадание.Прицеп1.Модель.НаличиеСпидометра Тогда
					ЗаписатьСтрокуВыработкиТС(ТекСтрЗадание.Прицеп1, Справочники.уатПараметрыВыработки.ВремяВРаботе, уатОбщегоНазначения.уатВремяВСекунды(ТекСтрЗадание.КоличествоЧасовПрицеп1), СтруктураСтроки, Ложь);
				КонецЕсли;
				
				// Порожний пробег
				ТекПробегПорожний = ТекСтрЗадание.КоличествоКмПорожний * ТекСтрЗадание.КоличествоЕздок;
				Если Не СуммированиеПоЭтапам.ПробегПорожний И ТекСтрЗадание.НомерЕздки <> 0 Тогда 
					// Ищем максимальное значение по всем строкам, содержащим этот прицеп
					мНомерСтрокиМакс = ТекСтрЗадание.НомерСтроки;
					СчПоиск = Задание.Количество()-1;
					Пока СчПоиск >= 0 Цикл
						ТекСтрокаПоиска = Задание[СчПоиск];
						Если ТекСтрокаПоиска.НомерЕздки = ТекСтрЗадание.НомерЕздки И ТекСтрокаПоиска.КоличествоКмПорожний >= ТекПробегПорожний
							И (ТекСтрЗадание.Прицеп1 = ТекСтрокаПоиска.Прицеп1 Или ТекСтрЗадание.Прицеп1 = ТекСтрокаПоиска.Прицеп2) Тогда
							мНомерСтрокиМакс = ТекСтрокаПоиска.НомерСтроки;
							ТекПробегПорожний = ТекСтрокаПоиска.КоличествоКмПорожний;
						КонецЕсли;
						СчПоиск = СчПоиск - 1;
					КонецЦикла;
					Если ТекСтрЗадание.НомерСтроки <> мНомерСтрокиМакс Тогда
						ТекПробегПорожний = 0;
					КонецЕсли;
				КонецЕсли;
				
				ЗаписатьСтрокуВыработкиТС(ТекСтрЗадание.Прицеп1, Справочники.уатПараметрыВыработки.ПробегПорожний, ТекПробегПорожний, СтруктураСтроки, Ложь);
				ЗаписатьСтрокуВыработкиТС(ТекСтрЗадание.Прицеп1, Справочники.уатПараметрыВыработки.ПробегОбщий, ТекПробегПорожний, СтруктураСтроки, Ложь);
				
				// Пробег с грузом
				ТекПробегСГрузом = ТекСтрЗадание.КоличествоКмГруз * ТекСтрЗадание.КоличествоЕздок;
				Если Не СуммированиеПоЭтапам.ПробегСГрузом И ТекСтрЗадание.НомерЕздки <> 0 Тогда 
					// Ищем максимальное значение по всем строкам, содержащим этот прицеп
					мНомерСтрокиМакс = ТекСтрЗадание.НомерСтроки;
					СчПоиск = Задание.Количество()-1;
					Пока СчПоиск >= 0 Цикл
						ТекСтрокаПоиска = Задание[СчПоиск];
						Если ТекСтрокаПоиска.НомерЕздки = ТекСтрЗадание.НомерЕздки И ТекСтрокаПоиска.КоличествоКмГруз >= ТекПробегСГрузом
							И (ТекСтрЗадание.Прицеп1 = ТекСтрокаПоиска.Прицеп1 Или ТекСтрЗадание.Прицеп1 = ТекСтрокаПоиска.Прицеп2) Тогда
							мНомерСтрокиМакс = ТекСтрокаПоиска.НомерСтроки;
							ТекПробегСГрузом = ТекСтрокаПоиска.КоличествоКмГруз;
						КонецЕсли;
						СчПоиск = СчПоиск - 1;
					КонецЦикла;
					Если ТекСтрЗадание.НомерСтроки <> мНомерСтрокиМакс Тогда
						ТекПробегСГрузом = 0;
					КонецЕсли;
				КонецЕсли;
				
				ЗаписатьСтрокуВыработкиТС(ТекСтрЗадание.Прицеп1, Справочники.уатПараметрыВыработки.ПробегСГрузом, ТекПробегСГрузом, СтруктураСтроки, Ложь);
				ЗаписатьСтрокуВыработкиТС(ТекСтрЗадание.Прицеп1, Справочники.уатПараметрыВыработки.ПробегОбщий, ТекПробегСГрузом, СтруктураСтроки, Ложь);
			КонецЕсли;
			
			// прицеп2
			Если ЗначениеЗаполнено(ТекСтрЗадание.Прицеп2) Тогда
				Если Не (ПодставлятьВремяВРаботеВПЛпоGPS И ЗначениеЗаполнено(ТекСтрЗадание.Прицеп2.ИспользуемаяСистемаGPS) И ЗначениеЗаполнено(ТекСтрЗадание.Прицеп2.ИДвСистемеНавигации)) И Не ТекСтрЗадание.Прицеп2.Модель.НаличиеСпидометра Тогда
					ЗаписатьСтрокуВыработкиТС(ТекСтрЗадание.Прицеп2, Справочники.уатПараметрыВыработки.ВремяВРаботе, уатОбщегоНазначения.уатВремяВСекунды(ТекСтрЗадание.КоличествоЧасовПрицеп2), СтруктураСтроки, Ложь);
				КонецЕсли;
				
				// Порожний пробег
				ТекПробегПорожний = ТекСтрЗадание.КоличествоКмПорожний * ТекСтрЗадание.КоличествоЕздок;
				Если Не СуммированиеПоЭтапам.ПробегПорожний И ТекСтрЗадание.НомерЕздки <> 0 Тогда 
					// Ищем максимальное значение по всем строкам, содержащим этот прицеп
					мНомерСтрокиМакс = ТекСтрЗадание.НомерСтроки;
					СчПоиск = Задание.Количество()-1;
					Пока СчПоиск >= 0 Цикл
						ТекСтрокаПоиска = Задание[СчПоиск];
						Если ТекСтрокаПоиска.НомерЕздки = ТекСтрЗадание.НомерЕздки И ТекСтрокаПоиска.КоличествоКмПорожний >= ТекПробегПорожний
							И (ТекСтрЗадание.Прицеп2 = ТекСтрокаПоиска.Прицеп1 Или ТекСтрЗадание.Прицеп2 = ТекСтрокаПоиска.Прицеп2) Тогда
							мНомерСтрокиМакс = ТекСтрокаПоиска.НомерСтроки;
							ТекПробегПорожний = ТекСтрокаПоиска.КоличествоКмПорожний;
						КонецЕсли;
						СчПоиск = СчПоиск - 1;
					КонецЦикла;
					Если ТекСтрЗадание.НомерСтроки <> мНомерСтрокиМакс Тогда
						ТекПробегПорожний = 0;
					КонецЕсли;
				КонецЕсли;
				
				ЗаписатьСтрокуВыработкиТС(ТекСтрЗадание.Прицеп2, Справочники.уатПараметрыВыработки.ПробегПорожний, ТекПробегПорожний, СтруктураСтроки, Ложь);
				ЗаписатьСтрокуВыработкиТС(ТекСтрЗадание.Прицеп2, Справочники.уатПараметрыВыработки.ПробегОбщий, ТекПробегПорожний, СтруктураСтроки, Ложь);
				
				// Пробег с грузом
				ТекПробегСГрузом = ТекСтрЗадание.КоличествоКмГруз * ТекСтрЗадание.КоличествоЕздок;
				Если Не СуммированиеПоЭтапам.ПробегСГрузом И ТекСтрЗадание.НомерЕздки <> 0 Тогда 
					// Ищем максимальное значение по всем строкам, содержащих этот прицеп
					мНомерСтрокиМакс = ТекСтрЗадание.НомерСтроки;
					СчПоиск = Задание.Количество()-1;
					Пока СчПоиск >= 0 Цикл
						ТекСтрокаПоиска = Задание[СчПоиск];
						Если ТекСтрокаПоиска.НомерЕздки = ТекСтрЗадание.НомерЕздки И ТекСтрокаПоиска.КоличествоКмГруз >= ТекПробегСГрузом
							И (ТекСтрЗадание.Прицеп2 = ТекСтрокаПоиска.Прицеп1 Или ТекСтрЗадание.Прицеп2 = ТекСтрокаПоиска.Прицеп2) Тогда
							мНомерСтрокиМакс = ТекСтрокаПоиска.НомерСтроки;
							ТекПробегСГрузом = ТекСтрокаПоиска.КоличествоКмГруз;
						КонецЕсли;
						СчПоиск = СчПоиск - 1;
					КонецЦикла;
					Если ТекСтрЗадание.НомерСтроки <> мНомерСтрокиМакс Тогда
						ТекПробегСГрузом = 0;
					КонецЕсли;
				КонецЕсли;
				
				ЗаписатьСтрокуВыработкиТС(ТекСтрЗадание.Прицеп2, Справочники.уатПараметрыВыработки.ПробегСГрузом, ТекПробегСГрузом, СтруктураСтроки, Ложь);
				ЗаписатьСтрокуВыработкиТС(ТекСтрЗадание.Прицеп2, Справочники.уатПараметрыВыработки.ПробегОбщий, ТекПробегСГрузом, СтруктураСтроки, Ложь);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// используем пробег общий по заданию, если он больше, чем пробег общий по одометру
	Если мПробегОбщий < мПробегОбщийПоЗаданию Тогда
		мПробегОбщий = мПробегОбщийПоЗаданию;
	КонецЕсли;
	
	// порожний пробег, величина которого превышает пробег по заданию
	ТекПробегПорожнийНеВЗадании = мПробегОбщий - мКоличествоКмСГрузом - мПробегПорожний - мПробегСпецНеВкл - НулевойПробегВыезда - НулевойПробегВозвращения;
	Если ТекПробегПорожнийНеВЗадании > 0 Тогда
		ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ПробегПорожний, ТекПробегПорожнийНеВЗадании,,Ложь);
	КонецЕсли;
	
	// общий пробег, величина которого превышает пробег по заданию
	Если ПодставлятьОбщийПробегВПЛпоGPS И ЗначениеЗаполнено(ТранспортноеСредство.ИспользуемаяСистемаGPS) И ЗначениеЗаполнено(ТранспортноеСредство.ИДвСистемеНавигации) Тогда 
		КоличествоВыработкиПоGPS = ПолучитьВыработкуПоGPS(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ПробегОбщийПоДаннымGPS);
		ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ПробегОбщий, КоличествоВыработкиПоGPS,, Истина, Истина);
	Иначе 
		Если мПробегОбщий - мПробегОбщийПоЗаданию > 0 Тогда
			ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ПробегОбщий, мПробегОбщий - мПробегОбщийПоЗаданию,, Ложь);
		КонецЕсли;
	КонецЕсли;
	
	// время в работе основного ТС
	Если ПодставлятьВремяВРаботеВПЛпоGPS И ЗначениеЗаполнено(ТранспортноеСредство.ИспользуемаяСистемаGPS) И ЗначениеЗаполнено(ТранспортноеСредство.ИДвСистемеНавигации) Тогда 
		КоличествоВыработкиПоGPS = ПолучитьВыработкуПоGPS(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВРаботеПоДаннымGPS);
		ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВРаботе, КоличествоВыработкиПоGPS);
	Иначе 
		Если ТранспортноеСредство.Модель.НаличиеСпидометра Тогда
			Если мКоличествоЧасов = 0 Тогда
				ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВРаботе, мВремяВРаботе);
			КонецЕсли;
		Иначе
			мНаработка = уатОбщегоНазначения.уатПоказанияСчетчикаВСекунды(уатОбщегоНазначения.уатРазностьПоказанийСчетчика(СпидометрВыезда, СпидометрВозвращения));
			Если мКоличествоЧасов = 0 Тогда
				ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВРаботе, мНаработка);
			ИначеЕсли мНаработка > мКоличествоЧасов Тогда
				ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВРаботе, мНаработка - мКоличествоЧасов,, Ложь);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// теперь прицепы
	Для Каждого ТекСтрПрицепы из Прицепы Цикл
		Если ТекСтрПрицепы.ТС.Модель.ВидМоделиТС = Перечисления.уатВидыМоделейТС.Автотранспорт 
			ИЛИ ТекСтрПрицепы.Тс.Модель.ВидМоделиТС = Перечисления.уатВидыМоделейТС.Прицеп Тогда
			// пробег общий
			Если ПодставлятьОбщийПробегВПЛпоGPS И ЗначениеЗаполнено(ТекСтрПрицепы.ТС.ИспользуемаяСистемаGPS) И ЗначениеЗаполнено(ТекСтрПрицепы.ТС.ИДвСистемеНавигации) Тогда 
				КоличествоВыработкиПоGPS = ПолучитьВыработкуПоGPS(ТекСтрПрицепы.ТС, Справочники.уатПараметрыВыработки.ПробегОбщийПоДаннымGPS);
				ЗаписатьСтрокуВыработкиТС(ТекСтрПрицепы.ТС, Справочники.уатПараметрыВыработки.ПробегОбщий, КоличествоВыработкиПоGPS);
			Иначе 
				ЗаписатьСтрокуВыработкиТС(ТекСтрПрицепы.ТС, Справочники.уатПараметрыВыработки.ПробегОбщий, мПробегОбщий);
			КонецЕсли;
			
			// пробег с грузом
			ЗаписатьСтрокуВыработкиТС(ТекСтрПрицепы.ТС, Справочники.уатПараметрыВыработки.ПробегСГрузом, мКоличествоКмСГрузом);
		
			// пробег порожний
			ЗаписатьСтрокуВыработкиТС(ТекСтрПрицепы.ТС, Справочники.уатПараметрыВыработки.ПробегПорожний, мПробегОбщий - мКоличествоКмСГрузом);
		КонецЕсли;
		
		// время в работе
		Если ПодставлятьВремяВРаботеВПЛпоGPS И ЗначениеЗаполнено(ТекСтрПрицепы.ТС.ИспользуемаяСистемаGPS) И ЗначениеЗаполнено(ТекСтрПрицепы.ТС.ИДвСистемеНавигации) Тогда 
			КоличествоВыработкиПоGPS = ПолучитьВыработкуПоGPS(ТекСтрПрицепы.ТС, Справочники.уатПараметрыВыработки.ВремяВРаботеПоДаннымGPS);
			ЗаписатьСтрокуВыработкиТС(ТекСтрПрицепы.ТС, Справочники.уатПараметрыВыработки.ВремяВРаботе, КоличествоВыработкиПоGPS);
		Иначе 
			Если ТекСтрПрицепы.ТС.Модель.НаличиеСпидометра Тогда
				Если мКоличествоЧасов = 0 Тогда
					ЗаписатьСтрокуВыработкиТС(ТекСтрПрицепы.ТС, Справочники.уатПараметрыВыработки.ВремяВРаботе, мВремяВРаботе, Новый Структура("Подразделение, Контрагент", Подразделение, Контрагент));
				КонецЕсли;
			Иначе
				мНаработка = уатОбщегоНазначения.уатПоказанияСчетчикаВСекунды(уатОбщегоНазначения.уатРазностьПоказанийСчетчика(ТекСтрПрицепы.СчетчикМЧВыезда, ТекСтрПрицепы.СчетчикМЧВозвращения));
				ЗаписатьСтрокуВыработкиТС(ТекСтрПрицепы.ТС, Справочники.уатПараметрыВыработки.ВремяВРаботе, мНаработка);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// количество ТС
	Если Справочники.уатПараметрыВыработки.КоличествоТС.ДействуетНаТС Тогда
		ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.КоличествоТС, 1);
	КонецЕсли;
	
	// Прибытие вне расписания по Заказам на ТС.
	ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВнеРасписания, мПрибытиеВнеРасписания, СтруктураСтроки, Ложь);
	
	// свертка выработки по аналитикам
	ТЗ = ВыработкаТС.Выгрузить();
	флСвертка = Ложь;
	Если НЕ уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация,
		ПланыВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоКонтрагентам) Тогда
		
		ТЗ.ЗаполнитьЗначения(Неопределено, "Контрагент");
		флСвертка = Истина;
	КонецЕсли;
	Если НЕ уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация,
		ПланыВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоПодразделениям) Тогда
		
		ТЗ.ЗаполнитьЗначения(Неопределено, "Подразделение");
		флСвертка = Истина;
	КонецЕсли;
	Если НЕ уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация,
		ПланыВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоМаршрутам) Тогда
		
		ТЗ.ЗаполнитьЗначения(Неопределено, "Маршрут");
		флСвертка = Истина;
	КонецЕсли;
	Если НЕ уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация,
		ПланыВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоОбъектамСтроительства) Тогда
		
		ТЗ.ЗаполнитьЗначения(Неопределено, "ОбъектСтроительства");
		флСвертка = Истина;
	КонецЕсли;
	Если НЕ уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация,
		ПланыВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоВидамПеревозок) Тогда
		
		ТЗ.ЗаполнитьЗначения(Неопределено, "ВидПеревозки");
		флСвертка = Истина;
	КонецЕсли;
	Если НЕ уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация,
		ПланыВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоНаправлениямПеревозок) Тогда
		
		ТЗ.ЗаполнитьЗначения(Неопределено, "НаправлениеПеревозки");
		флСвертка = Истина;
	КонецЕсли;
	
	// Таблица выработки сворачивается всегда, так как разные строки ТЧ Задание могут дать строки с одинаковыми аналитиками
	ТЗ.Свернуть("ТС, ПараметрВыработки, Подразделение, Контрагент, ОбъектСтроительства, Маршрут, ВидПеревозки, НаправлениеПеревозки", "Количество");
	ВыработкаТС.Загрузить(ТЗ);
	
КонецПроцедуры

// Процедура рассчитывает выработку ТС по документам ТТД
//
Процедура РасчетВыработкиТС_ПоТТД(Отказ, ПодставлятьВремяВРаботеВПЛпоGPS, ПодставлятьОбщийПробегВПЛпоGPS)
	Перем мТаблицаТТД;
	
	мПроверкаТТД = ПроверкаТТД(мТаблицаТТД);
	
	// получим массив произвольных параметров выработки ТТД
	мсвПроизвольныеПараметрыВыработки = ПроизвольныеПараметрыВыработкиТТД(мТаблицаТТД.ВыгрузитьКолонку("ТТД"));
	
	СтрокиПробегПоGPS  = ВыработкаТС.НайтиСтроки(Новый Структура("ПараметрВыработки", Справочники.уатПараметрыВыработки.ПробегОбщийПоДаннымGPS));
	мСтрокиПробегПоGPS = Новый Массив();
	Для Каждого ТекСтрока Из СтрокиПробегПоGPS Цикл
		мСтрокиПробегПоGPS.Добавить(Новый Структура("ТС, Количество", ТекСтрока.ТС, ТекСтрока.Количество));
	КонецЦикла;
	
	СтрокиВремяВРаботеПоGPS  = ВыработкаТС.НайтиСтроки(Новый Структура("ПараметрВыработки", Справочники.уатПараметрыВыработки.ВремяВРаботеПоДаннымGPS));
	мСтрокиВремяВРаботеПоGPS = Новый Массив();
	Для Каждого ТекСтрока Из СтрокиВремяВРаботеПоGPS Цикл
		мСтрокиВремяВРаботеПоGPS.Добавить(Новый Структура("ТС, Количество", ТекСтрока.ТС, ТекСтрока.Количество));
	КонецЦикла;
	// Очистка выработки - только для предопределенных параметров выработки
	// и для параметров с произвольным расчетом, если задана формула расчета
	Сч = ВыработкаТС.Количество() - 1;
	Пока Сч >= 0 Цикл
		ТекСтрока = ВыработкаТС[Сч];
		// Также надо очистить непредопределенные параметры, которые указаны в произвольном параметре выработке в ТТД
		Если ТекСтрока.ПараметрВыработки.Предопределенный ИЛИ мсвПроизвольныеПараметрыВыработки.Найти(ТекСтрока.ПараметрВыработки) <> Неопределено
			ИЛИ НЕ ТекСтрока.ПараметрВыработки.Предопределенный И ЗначениеЗаполнено(ТекСтрока.ПараметрВыработки.АлгоритмРасчетаПараметра)
			ИЛИ Задание.Найти(ТекСтрока.ПараметрВыработки) <> Неопределено Тогда
			ВыработкаТС.Удалить(ТекСтрока);
		КонецЕсли;
		
		Сч = Сч - 1;
	КонецЦикла;
	
	Если НЕ мПроверкаТТД Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;	
	
	// пробег общий для ТС со счетчиком моточасов
	Если НЕ ТранспортноеСредство.Модель.НаличиеСпидометра Тогда
		мПробегОбщий = НулевойПробегВыезда + НулевойПробегВозвращения;
		// Пробег с грузом и порожний пробег будут добавлены позднее
	КонецЕсли;
	
	Для Каждого ТекСтрока Из мСтрокиПробегПоGPS Цикл
		ЗаписатьСтрокуВыработкиТС(ТекСтрока.ТС, Справочники.уатПараметрыВыработки.ПробегОбщийПоДаннымGPS, ТекСтрока.Количество);
	КонецЦикла;
	
	Для Каждого ТекСтрока Из мСтрокиВремяВРаботеПоGPS Цикл
		ЗаписатьСтрокуВыработкиТС(ТекСтрока.ТС, Справочники.уатПараметрыВыработки.ВремяВРаботеПоДаннымGPS, ТекСтрока.Количество);
	КонецЦикла;
	
	// время в наряде
	ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВНаряде, мВремяВНаряде);
	
	// время в простое
	ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВПростое, мВремяВПростое - мВремяВПростоеСВклДвигателем);
	
	// время в простое с вкл. двигателем
	ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВПростоеСВклДвигателем, мВремяВПростоеСВклДвигателем);
	
	// количество дней
	ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.КоличествоДней, мКоличествоДней);
	
	//выручка
	Если ВидПЛ = Перечисления.уатВидыПЛ._3 ИЛИ ВидПЛ = Перечисления.уатВидыПЛ._ПА1
		ИЛИ ВидПЛ = Перечисления.уатВидыПЛ._6 ИЛИ ВидПЛ = Перечисления.уатВидыПЛ._6С Тогда
		Если уатОбщегоНазначенияТиповые.уатЕстьДокумент("уатБилетныйЛист") Тогда
			мКоличествоПассажиров = 0;
			мТаблицаВыручка	= Новый ТаблицаЗначений;
			мТаблицаВыручка = Вычислить("уатЗащищенныеФункцииСервер_проф.ПолучитьБилетныеЛистыДляПЛ(Ссылка)");
			Для Каждого ТекСтр из мТаблицаВыручка Цикл
				мБилетныйЛист = ТекСтр.Ссылка;
				Для Каждого ТекСтрВыработка из мБилетныйЛист.Билеты Цикл
					Если ТекСтрВыработка.ПутевойЛист = Ссылка Тогда
						мКоличествоПассажиров = мКоличествоПассажиров + ТекСтрВыработка.Количество;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			// количество пассажиров
			ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.КоличествоПассажиров, мКоличествоПассажиров);
		КонецЕсли;
	КонецЕсли;
	
	мКоличествоКмСГрузом = 0;
	мКоличествоЧасов = 0;
	мПробегПорожний = 0;
	мПробегОбщийПоЗаданию = 0;
	мПробегСпецНеВкл = 0;
	мОбщаяНаработка = уатОбщегоНазначения.уатПоказанияСчетчикаВСекунды(уатОбщегоНазначения.уатРазностьПоказанийСчетчика(СпидометрВыезда, СпидометрВозвращения));
	
	СуммированиеПоЭтапам = ПараметрыВыработкиСуммированиеПоЭтапам();
	ПараметрВыработкиПробегСГрузом = ПолучитьПараметрВыработкиПробегСГрузомПассажирами();
	
	ТТДСвернутые = Новый Соответствие;
	Для Каждого ТекСтр из мТаблицаТТД Цикл
		мТТД = ТекСтр.ТТД;
		мТТДОбъект = мТТД.ПолучитьОбъект();
		ТаблицаВыработкаСвернутая = мТТДОбъект.ПолучитьВыработкуСвернутуюСУчетомЭтапов(Истина);
		ТТДСвернутые.Вставить(мТТД, ТаблицаВыработкаСвернутая);
	КонецЦикла;
	
	Для Каждого ТекСтр из мТаблицаТТД Цикл
		мТТД = ТекСтр.ТТД;
		ТаблицаВыработкаСвернутая = ТТДСвернутые.Получить(мТТД);
		
		ПредНомерЕздки = -1;
		Для Каждого ТекСтрЗадание из ТаблицаВыработкаСвернутая Цикл
			Если ТекСтрЗадание.ПутЛист <> Ссылка Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураСтроки = Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут, ВидПеревозки, НаправлениеПеревозки",
				Подразделение, мТТД.Контрагент, ТекСтрЗадание.ОбъектСтроительства, ТекСтрЗадание.Маршрут, ТекСтрЗадание.ВидПеревозки, ТекСтрЗадание.НаправлениеПеревозки);
			
			// время в работе
			Если НЕ (ПодставлятьВремяВРаботеВПЛпоGPS И ЗначениеЗаполнено(ТранспортноеСредство.ИспользуемаяСистемаGPS) И ЗначениеЗаполнено(ТранспортноеСредство.ИДвСистемеНавигации)) Тогда 
				Если ТранспортноеСредство.Модель.НаличиеСпидометра Тогда
					ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВРаботе, уатОбщегоНазначения.уатВремяВСекунды(ТекСтрЗадание.КоличествоЧасов), СтруктураСтроки, Ложь);
				Иначе
					// Отдельно для порожнего пробега
					// время работы записываем, если общая наработка больше чем уже учтенная до этого
					// (нельзя записать время в работе больше чем разность показаний счетчика в шапке)
					Если мКоличествоЧасов < мОбщаяНаработка Тогда
						ТекНаработка = Мин(мОбщаяНаработка - мКоличествоЧасов, уатОбщегоНазначения.уатВремяВСекунды(ТекСтрЗадание.КоличествоЧасов));
						ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВРаботе, ТекНаработка, СтруктураСтроки, Ложь);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			// вес груза
			Если ТекСтрЗадание.НомерЕздки = 0 ИЛИ СуммированиеПоЭтапам.ВесГруза Или ТекСтрЗадание.НомерЕздки <> ПредНомерЕздки Тогда
				ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВесГруза, ТекСтрЗадание.КоличествоТонн, СтруктураСтроки, Ложь);
			КонецЕсли;
			
			// объем
			Если ТекСтрЗадание.НомерЕздки = 0 ИЛИ СуммированиеПоЭтапам.Объем Или ТекСтрЗадание.НомерЕздки <> ПредНомерЕздки Тогда
				ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.Объем, ТекСтрЗадание.Объем, СтруктураСтроки, Ложь);
			КонецЕсли;
			
			// количество ездок
			Если ТекСтрЗадание.НомерЕздки = 0 ИЛИ СуммированиеПоЭтапам.КоличествоЕздок Или ТекСтрЗадание.НомерЕздки <> ПредНомерЕздки Тогда
				ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.КоличествоЕздок, ТекСтрЗадание.КоличествоЕздок, СтруктураСтроки, Ложь);
			КонецЕсли;
			
			// количество операций
			Если ТекСтрЗадание.НомерЕздки = 0 ИЛИ СуммированиеПоЭтапам.КоличествоОпераций Или ТекСтрЗадание.НомерЕздки <> ПредНомерЕздки Тогда
				ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.КоличествоОпераций, ТекСтрЗадание.КоличествоОпераций, СтруктураСтроки, Ложь);
			КонецЕсли;
			
			// подача
			ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.Подача, уатОбщегоНазначения.уатВремяВСекунды(ТекСтрЗадание.Подача), СтруктураСтроки, Ложь);
			
			// пробег с грузом
			Если ТекСтрЗадание.НомерЕздки = 0 ИЛИ СуммированиеПоЭтапам.ПробегСГрузомПассажирами Или ТекСтрЗадание.НомерЕздки <> ПредНомерЕздки Тогда 
				Если НЕ ТранспортноеСредство.Модель.НаличиеСпидометра Тогда
					мПробегОбщий = мПробегОбщий + ТекСтрЗадание.КоличествоКмГруз;
				КонецЕсли;
				мКоличествоКмСГрузом = мКоличествоКмСГрузом + ТекСтрЗадание.КоличествоКмГруз;
				мПробегОбщийПоЗаданию = мПробегОбщийПоЗаданию + ТекСтрЗадание.КоличествоКмГруз;
				ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, ПараметрВыработкиПробегСГрузом, ТекСтрЗадание.КоличествоКмГруз, СтруктураСтроки, Ложь);
				ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ПробегОбщий, ТекСтрЗадание.КоличествоКмГруз, СтруктураСтроки, Ложь);
			КонецЕсли;
			
			// пробег порожний
			Если ТекСтрЗадание.НомерЕздки = 0 ИЛИ СуммированиеПоЭтапам.ПробегПорожний Или ТекСтрЗадание.НомерЕздки <> ПредНомерЕздки Тогда
				Если НЕ ТранспортноеСредство.Модель.НаличиеСпидометра Тогда
					мПробегОбщий = мПробегОбщий + ТекСтрЗадание.КоличествоКмПорожний;
				КонецЕсли;
				ТекПробегПорожний = ТекСтрЗадание.КоличествоКмПорожний;
				ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ПробегПорожний, ТекПробегПорожний, СтруктураСтроки, Ложь);
				ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ПробегОбщий, ТекПробегПорожний, СтруктураСтроки, Ложь);
				мПробегПорожний = мПробегПорожний + ТекПробегПорожний;
				мПробегОбщийПоЗаданию = мПробегОбщийПоЗаданию + ТекПробегПорожний;
			КонецЕсли;
			
			// простой под погрузкой
			ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ПростойПодПогрузкой, уатОбщегоНазначения.уатВремяВСекунды(ТекСтрЗадание.ПростойПодПогрузкой), СтруктураСтроки, Ложь);
			
			// простой под разгрузкой
			ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ПростойПодРазгрузкой, уатОбщегоНазначения.уатВремяВСекунды(ТекСтрЗадание.ПростойПодРазгрузкой), СтруктураСтроки, Ложь);
			
			// погрузочно-разгрузочные работы
			ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ПогрузочноРазгрузочныеРаботы, ТекСтрЗадание.ПогрузочноРазгрузочныеРаботы, СтруктураСтроки, Ложь);
			
			// Спец. работы
			ТекПробегСпецНеВкл = 0;
			Для Сч = 1 По ТекСтрЗадание.КоличествоСпецработ Цикл
				Если ТекСтрЗадание.НомерЕздки = 0 ИЛИ ТекСтрЗадание["СпецРабота" + Сч].СпособРасчетаПоНомеруЭтапа = 0 Или ТекСтрЗадание.НомерЕздки <> ПредНомерЕздки Тогда
					ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, ТекСтрЗадание["СпецРабота" + Сч],
						ТекСтрЗадание["КоличествоСпецРаботы" + Сч], СтруктураСтроки, Ложь);
					Если ТекСтрЗадание["СпецРабота" + Сч].УвеличитьОбщийПробегНаПробегСпец Тогда
						ТекПробегСпецНеВкл = ТекПробегСпецНеВкл + ТекСтрЗадание["КоличествоСпецРаботы" + Сч];
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ПробегОбщий, ТекПробегСпецНеВкл, СтруктураСтроки, Ложь);
			мПробегСпецНеВкл = мПробегСпецНеВкл + ТекПробегСпецНеВкл;
			мПробегОбщийПоЗаданию = мПробегОбщийПоЗаданию + ТекПробегСпецНеВкл;
			
			// тн*км
			ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ТнКм, ТекСтрЗадание.ТнКм, СтруктураСтроки, Ложь);
			
			// объем*км
			ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ОбъемКм, ТекСтрЗадание.ОбъемКм, СтруктураСтроки, Ложь);
			
			// ручной произвольный параметр выработки
			Если ЗначениеЗаполнено(ТекСтрЗадание.ПараметрВыработки) И ТекСтрЗадание.Выработка > 0 Тогда
				Если ТекСтрЗадание.ПараметрВыработки.Временный Тогда
					ТекВыработка = уатОбщегоНазначения.уатВремяВСекунды(ТекСтрЗадание.Выработка);
				Иначе
					ТекВыработка = ТекСтрЗадание.Выработка;
				КонецЕсли;
				ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, ТекСтрЗадание.ПараметрВыработки, ТекВыработка, СтруктураСтроки, Ложь);
			КонецЕсли;
			
			мКоличествоЧасов = мКоличествоЧасов + уатОбщегоНазначения.уатВремяВСекунды(ТекСтрЗадание.КоличествоЧасов);
			ПредНомерЕздки = ТекСтрЗадание.НомерЕздки;
		КонецЦикла;
	КонецЦикла;
	
	// используем пробег общий по заданию, если он больше, чем пробег общий по одометру
	Если мПробегОбщий < мПробегОбщийПоЗаданию Тогда
		мПробегОбщий = мПробегОбщийПоЗаданию;
	КонецЕсли;
	
	// время в работе основного ТС
	Если ПодставлятьВремяВРаботеВПЛпоGPS И ЗначениеЗаполнено(ТранспортноеСредство.ИспользуемаяСистемаGPS) И ЗначениеЗаполнено(ТранспортноеСредство.ИДвСистемеНавигации) Тогда 
		КоличествоВыработкиПоGPS = ПолучитьВыработкуПоGPS(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВРаботеПоДаннымGPS);
		ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВРаботе, КоличествоВыработкиПоGPS);
	Иначе 
		Если ТранспортноеСредство.Модель.НаличиеСпидометра Тогда //спидометр
			Если мКоличествоЧасов = 0 Тогда
				Если мТаблицаТТД.Количество() = 1 Тогда
					ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВРаботе, мВремяВРаботе, Новый Структура("Подразделение, Контрагент", Подразделение, мТаблицаТТД[0].Контрагент));
				Иначе
					ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВРаботе, мВремяВРаботе);
				КонецЕсли;
			КонецЕсли;
			
		Иначе //счетчик м/ч
			мНаработка = уатОбщегоНазначения.уатПоказанияСчетчикаВСекунды(уатОбщегоНазначения.уатРазностьПоказанийСчетчика(СпидометрВыезда, СпидометрВозвращения));
			Если мКоличествоЧасов = 0 Тогда
				Если мТаблицаТТД.Количество() = 1 Тогда
					ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВРаботе, мНаработка, Новый Структура("Подразделение, Контрагент", Подразделение, мТаблицаТТД[0].Контрагент));
				Иначе
					ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВРаботе, мНаработка, Новый Структура("Подразделение, Контрагент", Подразделение, Контрагент));
				КонецЕсли;
			ИначеЕсли мНаработка > мКоличествоЧасов Тогда
				Если мТаблицаТТД.Количество() = 1 Тогда
					ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВРаботе, мНаработка-мКоличествоЧасов, Новый Структура("Подразделение, Контрагент", Подразделение, мТаблицаТТД[0].Контрагент), Ложь);
				Иначе
					ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВРаботе, мНаработка-мКоличествоЧасов, Новый Структура("Подразделение, Контрагент", Подразделение, Контрагент), Ложь);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// теперь прицепы
	Для Каждого ТекСтрПрицепы из Прицепы Цикл
		Если ТекСтрПрицепы.ТС.Модель.ВидМоделиТС = Перечисления.уатВидыМоделейТС.Автотранспорт 
			ИЛИ ТекСтрПрицепы.ТС.Модель.ВидМоделиТС = Перечисления.уатВидыМоделейТС.Прицеп Тогда
			// пробег общий
			Если ПодставлятьОбщийПробегВПЛпоGPS И ЗначениеЗаполнено(ТекСтрПрицепы.ТС.ИспользуемаяСистемаGPS) И ЗначениеЗаполнено(ТекСтрПрицепы.ТС.ИДвСистемеНавигации) Тогда 
				КоличествоВыработкиПоGPS = ПолучитьВыработкуПоGPS(ТекСтрПрицепы.ТС, Справочники.уатПараметрыВыработки.ПробегОбщийПоДаннымGPS);
				ЗаписатьСтрокуВыработкиТС(ТекСтрПрицепы.ТС, Справочники.уатПараметрыВыработки.ПробегОбщий, КоличествоВыработкиПоGPS);
			Иначе 
				ЗаписатьСтрокуВыработкиТС(ТекСтрПрицепы.ТС, Справочники.уатПараметрыВыработки.ПробегОбщий, мПробегОбщий);
			КонецЕсли;
			
			// пробег с грузом
			ЗаписатьСтрокуВыработкиТС(ТекСтрПрицепы.ТС, Справочники.уатПараметрыВыработки.ПробегСГрузом, мКоличествоКмСГрузом);
			
			// пробег порожний
			ЗаписатьСтрокуВыработкиТС(ТекСтрПрицепы.ТС, Справочники.уатПараметрыВыработки.ПробегПорожний, мПробегОбщий - мКоличествоКмСГрузом);
		КонецЕсли;
		
		Если ТекСтрПрицепы.ТС.Модель.НаличиеСпидометра Тогда
			мНаработка = ?(мКоличествоЧасов = 0, мВремяВРаботе, мКоличествоЧасов);
		Иначе
			мНаработка = уатОбщегоНазначения.уатПоказанияСчетчикаВСекунды(уатОбщегоНазначения.уатРазностьПоказанийСчетчика(ТекСтрПрицепы.СчетчикМЧВыезда, ТекСтрПрицепы.СчетчикМЧВозвращения));
		КонецЕсли;
		
		// время в работе
		Если ПодставлятьВремяВРаботеВПЛпоGPS И ЗначениеЗаполнено(ТекСтрПрицепы.ТС.ИспользуемаяСистемаGPS) И ЗначениеЗаполнено(ТекСтрПрицепы.ТС.ИДвСистемеНавигации) Тогда 
			КоличествоВыработкиПоGPS = ПолучитьВыработкуПоGPS(ТекСтрПрицепы.ТС, Справочники.уатПараметрыВыработки.ВремяВРаботеПоДаннымGPS);
			ЗаписатьСтрокуВыработкиТС(ТекСтрПрицепы.ТС, Справочники.уатПараметрыВыработки.ВремяВРаботе, КоличествоВыработкиПоGPS);
		Иначе 
			ЗаписатьСтрокуВыработкиТС(ТекСтрПрицепы.ТС, Справочники.уатПараметрыВыработки.ВремяВРаботе, мНаработка);
		КонецЕсли;
	КонецЦикла;
	
	// порожний пробег, величина которого превышает пробег по заданию
	ТекПробегПорожнийНеВЗадании = мПробегОбщий - мКоличествоКмСГрузом - мПробегПорожний - мПробегСпецНеВкл - НулевойПробегВыезда - НулевойПробегВозвращения;
	Если ТекПробегПорожнийНеВЗадании > 0 Тогда
		ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ПробегПорожний, ТекПробегПорожнийНеВЗадании,,Ложь);
	КонецЕсли;
	
	// общий пробег, величина которого превышает пробег по заданию
	Если ПодставлятьОбщийПробегВПЛпоGPS И ЗначениеЗаполнено(ТранспортноеСредство.ИспользуемаяСистемаGPS) И ЗначениеЗаполнено(ТранспортноеСредство.ИДвСистемеНавигации) Тогда 
		КоличествоВыработкиПоGPS = ПолучитьВыработкуПоGPS(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ПробегОбщийПоДаннымGPS);
		ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ПробегОбщий, КоличествоВыработкиПоGPS,, Истина, Истина);
	Иначе 
		Если мПробегОбщий - мПробегОбщийПоЗаданию > 0 Тогда
			ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ПробегОбщий, мПробегОбщий - мПробегОбщийПоЗаданию,, Ложь);
		КонецЕсли;
	КонецЕсли;
	
	// если из ТТД не пришло количество рейсов
	НайденнаяСтрока = ВыработкаТС.Найти(Справочники.уатПараметрыВыработки.КоличествоРейсов, "ПараметрВыработки");
	Если НайденнаяСтрока = Неопределено Тогда
		ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.КоличествоРейсов, 1, , , Ложь);
	КонецЕсли;
	
	// количество ТС
	Если Справочники.уатПараметрыВыработки.КоличествоТС.ДействуетНаТС Тогда
		ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.КоличествоТС, 1);
	КонецЕсли;
КонецПроцедуры

// Процедура рассчитывает выработку ТС вручную
// При этом следующие параметры пересчитываются при расчете итогов:
// - Пробег общий,
// - Время в работе,
// - Время в наряде,
// - Время ночное,
// - Время в простое.
// Остальные параметры не пересчитываются.
//
Процедура РасчетВыработкиТС_Ручной(Отказ, ПодставлятьВремяВРаботеВПЛпоGPS, ПодставлятьОбщийПробегВПЛпоGPS)
	
	// Очистка выработки - только параметров с произвольным расчетом, если задана формула расчета
	Сч = ВыработкаТС.Количество() - 1;
	Пока Сч >= 0 Цикл
		ТекСтрока = ВыработкаТС[Сч];
		Если НЕ ТекСтрока.ПараметрВыработки.Предопределенный И ЗначениеЗаполнено(ТекСтрока.ПараметрВыработки.АлгоритмРасчетаПараметра) Тогда
			ВыработкаТС.Удалить(ТекСтрока);
		КонецЕсли;
		Сч = Сч - 1;
	КонецЦикла;
	
	//пробег
	Если ПодставлятьОбщийПробегВПЛпоGPS И ЗначениеЗаполнено(ТранспортноеСредство.ИспользуемаяСистемаGPS) И ЗначениеЗаполнено(ТранспортноеСредство.ИДвСистемеНавигации) Тогда 
		КоличествоВыработкиПоGPS = ПолучитьВыработкуПоGPS(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ПробегОбщийПоДаннымGPS);
		ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ПробегОбщий, КоличествоВыработкиПоGPS,, Истина, Истина);
	Иначе 
		ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ПробегОбщий, мПробегОбщий,, Истина, Истина);
	КонецЕсли;
	
	// пробег порожний
	ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ПробегПорожний, мПробегОбщий,, Истина, Истина);
	
	// время в наряде
	ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВНаряде, мВремяВНаряде,, Истина, Истина);
	
	// Время в работе. Если у ТС спидометр, то время берем из задания, иначе показания спидометра используются
	// как счетчики моточасов
	Если ТранспортноеСредство.Модель.НаличиеСпидометра Тогда
		мНаработка = мВремяВРаботе;
	Иначе
		мНаработка = уатОбщегоНазначения.уатПоказанияСчетчикаВСекунды(уатОбщегоНазначения.уатРазностьПоказанийСчетчика(СпидометрВыезда,СпидометрВозвращения));
	КонецЕсли;
	
	Если ПодставлятьВремяВРаботеВПЛпоGPS И ЗначениеЗаполнено(ТранспортноеСредство.ИспользуемаяСистемаGPS) И ЗначениеЗаполнено(ТранспортноеСредство.ИДвСистемеНавигации) Тогда 
		КоличествоВыработкиПоGPS = ПолучитьВыработкуПоGPS(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВРаботеПоДаннымGPS);
		ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВРаботе, КоличествоВыработкиПоGPS,, Истина, Истина);
	Иначе 
		ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВРаботе, мНаработка,, Истина, Истина);
	КонецЕсли;
	
	// время в простое
	ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВПростое, мВремяВПростое - мВремяВПростоеСВклДвигателем,, Истина, Истина);
	
	// время в простое с вкл. двигателем
	ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.ВремяВПростоеСВклДвигателем, мВремяВПростоеСВклДвигателем,, Истина, Истина);
	
	// количество дней
	ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.КоличествоДней, мКоличествоДней,, Истина, Истина);
	
	// количество рейсов
	ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.КоличествоРейсов, 1,, Истина, Истина);
	
	// теперь прицепы
	Для Каждого ТекСтрПрицепы из Прицепы Цикл
		//Если рсТС.Модель.Автотранспорт Тогда
		Если ТекСтрПрицепы.ТС.Модель.ВидМоделиТС = Перечисления.уатВидыМоделейТС.Автотранспорт 
			ИЛИ ТекСтрПрицепы.ТС.Модель.ВидМоделиТС = Перечисления.уатВидыМоделейТС.Прицеп Тогда 
			//пробег
			Если ПодставлятьОбщийПробегВПЛпоGPS И ЗначениеЗаполнено(ТекСтрПрицепы.ТС.ИспользуемаяСистемаGPS) И ЗначениеЗаполнено(ТекСтрПрицепы.ТС.ИДвСистемеНавигации) Тогда 
				КоличествоВыработкиПоGPS = ПолучитьВыработкуПоGPS(ТекСтрПрицепы.ТС, Справочники.уатПараметрыВыработки.ПробегОбщийПоДаннымGPS);
				ЗаписатьСтрокуВыработкиТС(ТекСтрПрицепы.ТС, Справочники.уатПараметрыВыработки.ПробегОбщий, КоличествоВыработкиПоGPS,, Истина, Истина);
			Иначе 
				ЗаписатьСтрокуВыработкиТС(ТекСтрПрицепы.ТС, Справочники.уатПараметрыВыработки.ПробегОбщий, мПробегОбщий,, Истина, Истина);
			КонецЕсли;
			
			// пробег порожний
			ЗаписатьСтрокуВыработкиТС(ТекСтрПрицепы.ТС, Справочники.уатПараметрыВыработки.ПробегПорожний, мПробегОбщий,, Истина, Истина);
		КонецЕсли;
		
		Если Не ТекСтрПрицепы.ТС.Модель.НаличиеСпидометра Тогда //Счетчик моточасов
			Если ПодставлятьВремяВРаботеВПЛпоGPS И ЗначениеЗаполнено(ТекСтрПрицепы.ТС.ИспользуемаяСистемаGPS) И ЗначениеЗаполнено(ТекСтрПрицепы.ТС.ИДвСистемеНавигации) Тогда 
				КоличествоВыработкиПоGPS = ПолучитьВыработкуПоGPS(ТекСтрПрицепы.ТС, Справочники.уатПараметрыВыработки.ВремяВРаботеПоДаннымGPS);
				ЗаписатьСтрокуВыработкиТС(ТекСтрПрицепы.ТС, Справочники.уатПараметрыВыработки.ВремяВРаботе, КоличествоВыработкиПоGPS,, Истина, Истина);
			Иначе 
				мНаработка = уатОбщегоНазначения.уатПоказанияСчетчикаВСекунды(уатОбщегоНазначения.уатРазностьПоказанийСчетчика(ТекСтрПрицепы.СчетчикМЧВыезда, ТекСтрПрицепы.СчетчикМЧВозвращения));
				// время в работе
				Если мНаработка <> 0 Тогда
					ЗаписатьСтрокуВыработкиТС(ТекСтрПрицепы.ТС, Справочники.уатПараметрыВыработки.ВремяВРаботе, мНаработка,, Истина, Истина);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// количество ТС
	Если Справочники.уатПараметрыВыработки.КоличествоТС.ДействуетНаТС Тогда
		ЗаписатьСтрокуВыработкиТС(ТранспортноеСредство, Справочники.уатПараметрыВыработки.КоличествоТС, 1,,, Истина);
	КонецЕсли;
КонецПроцедуры

// Процедура рассчитывает выработку сотрудников по ТЧ Задание
//
Процедура РасчетВыработкиСотрудников_ПоЗаданию(Отказ, списСотрудники, РезультатЗапросаПоПараметрам)
	
	// Очистка выработки - только для предопределенных параметров выработки
	// и для параметров с произвольным расчетом, если задана формула расчета
	Сч = ВыработкаСотрудников.Количество() - 1;
	Пока Сч >= 0 Цикл
		ТекСтрока = ВыработкаСотрудников[Сч];
		Если ТекСтрока.ПараметрВыработки.Предопределенный 
				Или Не ТекСтрока.ПараметрВыработки.Предопределенный И ЗначениеЗаполнено(ТекСтрока.ПараметрВыработки.АлгоритмРасчетаПараметра)
				Или Не Задание.Найти(ТекСтрока.ПараметрВыработки) = Неопределено Тогда
			ВыработкаСотрудников.Удалить(ТекСтрока);
		КонецЕсли;
		Сч = Сч - 1;
	КонецЦикла;
	
	СуммированиеПоЭтапам = ПараметрыВыработкиСуммированиеПоЭтапам();
	ПараметрВыработкиПробегСГрузом = ПолучитьПараметрВыработкиПробегСГрузомПассажирами();
	ТаблицаЗаданиеСвернутая = ПолучитьЗаданиеСвернутоеСУчетомЭтапов(Истина);
	
	Для сч = 0 По списСотрудники.Количество() - 1 Цикл
		мСотрудник = списСотрудники[сч].Значение;
		
		ЗаписатьВыработкуСотрудникаРабочееВремя(мСотрудник);
		
		// время в простое
		ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ВремяВПростое, мВремяВПростое - мВремяВПростоеСВклДвигателем);
		
		// время в простое с вкл. двигателем
		ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ВремяВПростоеСВклДвигателем, мВремяВПростоеСВклДвигателем);
		
		// количество дней
		ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.КоличествоДней, мКоличествоДней);
		
		// количество рейсов
		ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.КоличествоРейсов, 1,, Ложь);
		
		// делаем таблицу с номерами этапов
		мЭтапыЗадания = Задание.Выгрузить();
		мЭтапыЗадания.Свернуть("НомерЕздки");
		
		мКоличествоЧасов = 0;
		мПробегПорожний = 0;
		мКоличествоКмСГрузом = 0;
		мПробегОбщийПоЗаданию = 0;
		мПробегСпецНеВкл = 0;
		мПрибытиеВнеРасписания = 0;
		
		ПредНомерЕздки = -1;
		Для Каждого ТекСтрЗадание из ТаблицаЗаданиеСвернутая Цикл
			СтруктураСтроки = Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут, ВидПеревозки, НаправлениеПеревозки",
				ТекСтрЗадание.Подразделение, ТекСтрЗадание.Контрагент, ТекСтрЗадание.ОбъектСтроительства, ТекСтрЗадание.Маршрут, ТекСтрЗадание.ВидПеревозки, ТекСтрЗадание.НаправлениеПеревозки);
			
			// количество пассажиров
			Если ВидПЛ = Перечисления.уатВидыПЛ._3 ИЛИ ВидПЛ = Перечисления.уатВидыПЛ._ПА1 ИЛИ 
				ВидПЛ = Перечисления.уатВидыПЛ._6 ИЛИ ВидПЛ = Перечисления.уатВидыПЛ._6С Тогда
				ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.КоличествоПассажиров, ТекСтрЗадание.КоличествоПассажиров, СтруктураСтроки, Ложь);
			КонецЕсли;
			
			// пробег с грузом/пассажирами
			Если ТекСтрЗадание.НомерЕздки = 0 ИЛИ СуммированиеПоЭтапам.ПробегСГрузомПассажирами Или ТекСтрЗадание.НомерЕздки <> ПредНомерЕздки Тогда
				мКоличествоКмСГрузом = мКоличествоКмСГрузом + ТекСтрЗадание.КоличествоКмГруз;
				мПробегОбщийПоЗаданию = мПробегОбщийПоЗаданию + ТекСтрЗадание.КоличествоКмГруз;
				ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, ПараметрВыработкиПробегСГрузом, ТекСтрЗадание.КоличествоКмГруз, СтруктураСтроки, Ложь);
				ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ПробегОбщий, ТекСтрЗадание.КоличествоКмГруз, СтруктураСтроки, Ложь);
			КонецЕсли;
			
			// пробег порожний
			Если ТекСтрЗадание.НомерЕздки = 0 ИЛИ СуммированиеПоЭтапам.ПробегПорожний Или ТекСтрЗадание.НомерЕздки <> ПредНомерЕздки Тогда
				ТекПробегПорожний = ТекСтрЗадание.КоличествоКмПорожний;
				мПробегПорожний = мПробегПорожний + ТекПробегПорожний; 
				мПробегОбщийПоЗаданию = мПробегОбщийПоЗаданию + ТекПробегПорожний;
				ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ПробегПорожний, ТекПробегПорожний, СтруктураСтроки, Ложь);
				ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ПробегОбщий, ТекПробегПорожний, СтруктураСтроки, Ложь);
			КонецЕсли;
			
			// спец. работа
			ТекПробегСпецНеВкл = 0;
			Для СчСпец = 1 По ТекСтрЗадание.КоличествоСпецработ Цикл
				Если ТекСтрЗадание.НомерЕздки = 0 ИЛИ ТекСтрЗадание["СпецРабота" + СчСпец].СпособРасчетаПоНомеруЭтапа = 0 Или ТекСтрЗадание.НомерЕздки <> ПредНомерЕздки Тогда
					ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, ТекСтрЗадание["СпецРабота" + СчСпец],
						ТекСтрЗадание["КоличествоСпецРаботы" + СчСпец], СтруктураСтроки, Ложь);
					Если ТекСтрЗадание["СпецРабота" + СчСпец].УвеличитьОбщийПробегНаПробегСпец Тогда
						ТекПробегСпецНеВкл = ТекПробегСпецНеВкл + ТекСтрЗадание["КоличествоСпецРаботы" + СчСпец];
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ПробегОбщий, ТекПробегСпецНеВкл, СтруктураСтроки, Ложь);
			мПробегСпецНеВкл = мПробегСпецНеВкл + ТекПробегСпецНеВкл;
			мПробегОбщийПоЗаданию = мПробегОбщийПоЗаданию + ТекПробегСпецНеВкл;
			
			// тн*км
			ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ТнКм, ТекСтрЗадание.ТнКм, СтруктураСтроки, Ложь);
			
			// объем*км
			ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ОбъемКм, ТекСтрЗадание.ОбъемКм, СтруктураСтроки, Ложь);				
			
			// количество операций
			Если ТекСтрЗадание.НомерЕздки = 0 ИЛИ СуммированиеПоЭтапам.КоличествоОпераций Или ТекСтрЗадание.НомерЕздки <> ПредНомерЕздки Тогда
				ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.КоличествоОпераций, ТекСтрЗадание.КоличествоОпераций, СтруктураСтроки, Ложь);
			КонецЕсли;
			
			//подача
			ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.Подача, уатОбщегоНазначения.уатВремяВСекунды(ТекСтрЗадание.Подача), СтруктураСтроки, Ложь);
			
			// Вес, объем груза, количество ездок для номера этапа = 0 (учет по этапам не ведется)
			Если ТекСтрЗадание.НомерЕздки = 0 ИЛИ СуммированиеПоЭтапам.ВесГруза Или ТекСтрЗадание.НомерЕздки <> ПредНомерЕздки Тогда
				ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ВесГруза, ТекСтрЗадание.КоличествоТонн, СтруктураСтроки, Ложь);
			КонецЕсли;
			Если ТекСтрЗадание.НомерЕздки = 0 ИЛИ СуммированиеПоЭтапам.Объем Или ТекСтрЗадание.НомерЕздки <> ПредНомерЕздки Тогда
				ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.Объем, ТекСтрЗадание.Объем, СтруктураСтроки, Ложь);
			КонецЕсли;
			Если ТекСтрЗадание.НомерЕздки = 0 ИЛИ СуммированиеПоЭтапам.КоличествоЕздок Или ТекСтрЗадание.НомерЕздки <> ПредНомерЕздки Тогда
				ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.КоличествоЕздок, ТекСтрЗадание.КоличествоЕздок, СтруктураСтроки, Ложь);
			КонецЕсли;
			
			// Фактическое время опоздания и простоя
			Если ТекСтрЗадание.НомерЕздки = 0 ИЛИ СуммированиеПоЭтапам.ФактическоеВремяОпоздания Или ТекСтрЗадание.НомерЕздки <> ПредНомерЕздки Тогда
				ОпозданиеСекунд = уатОбщегоНазначения.уатВремяВСекунды(ТекСтрЗадание.ФактическоеВремяОпоздания);
				ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ФактическоеВремяОпоздания, ОпозданиеСекунд, СтруктураСтроки, Ложь);
			КонецЕсли;
			Если ТекСтрЗадание.НомерЕздки = 0 ИЛИ СуммированиеПоЭтапам.ФактическоеВремяПростоя Или ТекСтрЗадание.НомерЕздки <> ПредНомерЕздки Тогда
				ПростойСекунд = уатОбщегоНазначения.уатВремяВСекунды(ТекСтрЗадание.ФактическоеВремяПростоя);
				ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ФактическоеВремяПростоя, ПростойСекунд, СтруктураСтроки, Ложь);
			КонецЕсли;
			
			// Прибытие вне расписания по Заказам на ТС. Равно 1, если прибытие не по расписанию хотя бы для 1 заказа.
			Если ЗначениеЗаполнено(ТекСтрЗадание.ЗаказНаТС) И ЗначениеЗаполнено(ТекСтрЗадание.ВремяУбытия)
				И уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП() Тогда
				Если НачалоМинуты(ТекСтрЗадание.ВремяУбытия) <> НачалоМинуты(ТекСтрЗадание.ЗаказНаТС.ПрибытиеПоРасписанию) Тогда
					мПрибытиеВнеРасписания = 1;
				КонецЕсли;
			КонецЕсли;
			
			ПредНомерЕздки = ТекСтрЗадание.НомерЕздки;
		КонецЦикла;
		
		// используем пробег общий по заданию, если он больше, чем пробег общий по одометру
		Если мПробегОбщий < мПробегОбщийПоЗаданию Тогда
			мПробегОбщий = мПробегОбщийПоЗаданию;
		КонецЕсли;
	
		// порожний пробег, величина которого превышает пробег по заданию
		ТекПробегПорожнийНеВЗадании = мПробегОбщий - мКоличествоКмСГрузом - мПробегПорожний - мПробегСпецНеВкл - НулевойПробегВыезда - НулевойПробегВозвращения;
		Если ТекПробегПорожнийНеВЗадании > 0 Тогда
			ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ПробегПорожний, ТекПробегПорожнийНеВЗадании,,Ложь);
		КонецЕсли;
		
		// общий пробег, величина которого превышает пробег по заданию
		Если мПробегОбщий - мПробегОбщийПоЗаданию > 0 Тогда
			ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ПробегОбщий, мПробегОбщий - мПробегОбщийПоЗаданию,, Ложь);
		КонецЕсли;
		
		// количество ТС
		Если Справочники.уатПараметрыВыработки.КоличествоТС.ДействуетНаСотрудников Тогда
			ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.КоличествоТС, 1);
		КонецЕсли;
		
	КонецЦикла;
	
	// Прибытие вне расписания по Заказам на ТС.
	ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ВнеРасписания, мПрибытиеВнеРасписания,, Ложь);
	
	
	// свертка выработки по аналитикам
	ТЗ = ВыработкаСотрудников.Выгрузить();
	флСвертка = Ложь;
	Если НЕ уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация,
		ПланыВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоКонтрагентам) Тогда
		
		ТЗ.ЗаполнитьЗначения(Неопределено, "Контрагент");
		флСвертка = Истина;
	КонецЕсли;
	Если НЕ уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация,
		ПланыВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоПодразделениям) Тогда
		
		ТЗ.ЗаполнитьЗначения(Неопределено, "Подразделение");
		флСвертка = Истина;
	КонецЕсли;
	Если НЕ уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация,
		ПланыВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоМаршрутам) Тогда
		
		ТЗ.ЗаполнитьЗначения(Неопределено, "Маршрут");
		флСвертка = Истина;
	КонецЕсли;
	Если НЕ уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация,
		ПланыВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоОбъектамСтроительства) Тогда
		
		ТЗ.ЗаполнитьЗначения(Неопределено, "ОбъектСтроительства");
		флСвертка = Истина;
	КонецЕсли;
	Если НЕ уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация,
		ПланыВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоВидамПеревозок) Тогда
		
		ТЗ.ЗаполнитьЗначения(Неопределено, "ВидПеревозки");
		флСвертка = Истина;
	КонецЕсли;
	Если НЕ уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация,
		ПланыВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоНаправлениямПеревозок) Тогда
		
		ТЗ.ЗаполнитьЗначения(Неопределено, "НаправлениеПеревозки");
		флСвертка = Истина;
	КонецЕсли;
	
	ТЗ.Свернуть("Сотрудник, ПараметрВыработки, Подразделение, Контрагент, ОбъектСтроительства, Маршрут, ВидПеревозки, НаправлениеПеревозки", "Количество");
	ВыработкаСотрудников.Загрузить(ТЗ);
	
КонецПроцедуры

// Процедура рассчитывает выработку сотрудников по документам ТТД
//
Процедура РасчетВыработкиСотрудников_ПоТТД(Отказ, списСотрудники, РезультатЗапросаПоПараметрам)
	Перем мТаблицаТТД;
	
	мПроверкаТТД = ПроверкаТТД(мТаблицаТТД, , "выработки сотрудников");
	
	// получим массив произвольных параметров выработки ТТД
	мсвПроизвольныеПараметрыВыработки = ПроизвольныеПараметрыВыработкиТТД(мТаблицаТТД.ВыгрузитьКолонку("ТТД"));
	
	// Очистка выработки - только для предопределенных параметров выработки
	// и для параметров с произвольным расчетом, если задана формула расчета
	Сч = ВыработкаСотрудников.Количество() - 1;
	Пока Сч >= 0 Цикл
		ТекСтрока = ВыработкаСотрудников[Сч];
		// Также надо очистить непредопределенные параметры, которые указаны в произвольном параметре выработке в ТТД
		Если ТекСтрока.ПараметрВыработки.Предопределенный ИЛИ мсвПроизвольныеПараметрыВыработки.Найти(ТекСтрока.ПараметрВыработки) <> Неопределено
				Или Не ТекСтрока.ПараметрВыработки.Предопределенный И ЗначениеЗаполнено(ТекСтрока.ПараметрВыработки.АлгоритмРасчетаПараметра)
				Или Не Задание.Найти(ТекСтрока.ПараметрВыработки) = Неопределено Тогда
			ВыработкаСотрудников.Удалить(ТекСтрока);
		КонецЕсли;
		
		Сч = Сч - 1;
	КонецЦикла;
	
	Если НЕ мПроверкаТТД Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;	
	
	СуммированиеПоЭтапам = ПараметрыВыработкиСуммированиеПоЭтапам();
	ПараметрВыработкиПробегСГрузом = ПолучитьПараметрВыработкиПробегСГрузомПассажирами();
	ТТДСвернутые = Новый Соответствие;
	Для Каждого ТекСтр из мТаблицаТТД Цикл
		мТТД = ТекСтр.ТТД;
		мТТДОбъект = мТТД.ПолучитьОбъект();
		ТаблицаВыработкаСвернутая = мТТДОбъект.ПолучитьВыработкуСвернутуюСУчетомЭтапов(Истина);
		ТТДСвернутые.Вставить(мТТД, ТаблицаВыработкаСвернутая);
	КонецЦикла;
	
	Для сч = 0 По списСотрудники.Количество() - 1 Цикл
		мСотрудник = списСотрудники[сч].Значение;
		
		ЗаписатьВыработкуСотрудникаРабочееВремя(мСотрудник);
		
		// время в простое
		ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ВремяВПростое, мВремяВПростое - мВремяВПростоеСВклДвигателем);
		
		// время в простое с вкл. двигателем
		ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ВремяВПростоеСВклДвигателем, мВремяВПростоеСВклДвигателем);
		
		// количество дней
		ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.КоличествоДней, мКоличествоДней);
		
		//выручка
		Если ВидПЛ = Перечисления.уатВидыПЛ._3 ИЛИ ВидПЛ = Перечисления.уатВидыПЛ._ПА1 ИЛИ 
			ВидПЛ = Перечисления.уатВидыПЛ._6 ИЛИ ВидПЛ = Перечисления.уатВидыПЛ._6С Тогда
			Если уатОбщегоНазначенияТиповые.уатЕстьДокумент("уатБилетныйЛист") Тогда
				мКоличествоПассажиров = 0;
				мТаблицаВыручка	= Новый ТаблицаЗначений;
				мТаблицаВыручка = Вычислить("уатЗащищенныеФункцииСервер_проф.ПолучитьБилетныеЛистыДляПЛ(Ссылка)");
				Для Каждого ТекСтр из мТаблицаВыручка Цикл
					мБилетныйЛист = ТекСтр.Ссылка;
					Для Каждого ТекСтрВыработка из мБилетныйЛист.Билеты Цикл
						Если ТекСтрВыработка.ПутевойЛист = Ссылка Тогда
							мКоличествоПассажиров = мКоличествоПассажиров + ТекСтрВыработка.Количество;
						КонецЕсли;	
					КонецЦикла;	
				КонецЦикла;	
				
				// количество пассажиров
				ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.КоличествоПассажиров, мКоличествоПассажиров);
			КонецЕсли;	
		КонецЕсли;
		
		мКоличествоЧасов = 0;
		мПробегПорожний = 0;
		мКоличествоКмСГрузом = 0;
		мПробегОбщийПоЗаданию = 0;
		мПробегСпецНеВкл = 0;
		
		Для Каждого ТекСтр из мТаблицаТТД Цикл
			мТТД = ТекСтр.ТТД;
			ТаблицаВыработкаСвернутая = ТТДСвернутые.Получить(мТТД);
			
			ПредНомерЕздки = -1;
			Для Каждого ТекСтрВыработка из ТаблицаВыработкаСвернутая Цикл
				Если ТекСтрВыработка.ПутЛист <> Ссылка Тогда
					Продолжить;
				КонецЕсли;
				
				СтруктураСтроки = Новый Структура("Подразделение, Контрагент, ОбъектСтроительства, Маршрут, ВидПеревозки, НаправлениеПеревозки",
					Подразделение, мТТД.Контрагент, ТекСтрВыработка.ОбъектСтроительства, ТекСтрВыработка.Маршрут, ТекСтрВыработка.ВидПеревозки, ТекСтрВыработка.НаправлениеПеревозки);
					
				// вес груза
				Если ТекСтрВыработка.НомерЕздки = 0 ИЛИ СуммированиеПоЭтапам.ВесГруза Или ТекСтрВыработка.НомерЕздки <> ПредНомерЕздки Тогда
					ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ВесГруза, ТекСтрВыработка.КоличествоТонн, СтруктураСтроки, Ложь);
				КонецЕсли;
				
				// объем
				Если ТекСтрВыработка.НомерЕздки = 0 ИЛИ СуммированиеПоЭтапам.Объем Или ТекСтрВыработка.НомерЕздки <> ПредНомерЕздки Тогда
					ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.Объем, ТекСтрВыработка.Объем, СтруктураСтроки, Ложь);
				КонецЕсли;
				
				// количество ездок
				Если ТекСтрВыработка.НомерЕздки = 0 ИЛИ СуммированиеПоЭтапам.КоличествоЕздок Или ТекСтрВыработка.НомерЕздки <> ПредНомерЕздки Тогда
					ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.КоличествоЕздок, ТекСтрВыработка.КоличествоЕздок, СтруктураСтроки, Ложь);
				КонецЕсли;
				
				// количество операций
				Если ТекСтрВыработка.НомерЕздки = 0 ИЛИ СуммированиеПоЭтапам.КоличествоОпераций Или ТекСтрВыработка.НомерЕздки <> ПредНомерЕздки Тогда
					ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.КоличествоОпераций, ТекСтрВыработка.КоличествоОпераций, СтруктураСтроки, Ложь);
				КонецЕсли;
				
				// подача
				ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.Подача, уатОбщегоНазначения.уатВремяВСекунды(ТекСтрВыработка.Подача), СтруктураСтроки, Ложь);
				
				// пробег с грузом
				Если ТекСтрВыработка.НомерЕздки = 0 ИЛИ СуммированиеПоЭтапам.ПробегСГрузомПассажирами Или ТекСтрВыработка.НомерЕздки <> ПредНомерЕздки Тогда
					Если НЕ ТранспортноеСредство.Модель.НаличиеСпидометра Тогда
						мПробегОбщий = мПробегОбщий + ТекСтрВыработка.КоличествоКмГруз;
					КонецЕсли;
					мКоличествоКмСГрузом = мКоличествоКмСГрузом + ТекСтрВыработка.КоличествоКмГруз;
					мПробегОбщийПоЗаданию = мПробегОбщийПоЗаданию + ТекСтрВыработка.КоличествоКмГруз;
					ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, ПараметрВыработкиПробегСГрузом, ТекСтрВыработка.КоличествоКмГруз, СтруктураСтроки, Ложь);
					ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ПробегОбщий, ТекСтрВыработка.КоличествоКмГруз, СтруктураСтроки, Ложь);
				КонецЕсли;
				
				// пробег порожний
				Если СуммированиеПоЭтапам.ПробегПорожний ИЛИ ТекСтрВыработка.НомерЕздки = 0 Или ТекСтрВыработка.НомерЕздки <> ПредНомерЕздки Тогда
					ТекПробегПорожний = ТекСтрВыработка.КоличествоКмПорожний;
					ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ПробегПорожний, ТекПробегПорожний, СтруктураСтроки, Ложь);
					ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ПробегОбщий, ТекПробегПорожний, СтруктураСтроки, Ложь);
					мПробегПорожний = мПробегПорожний + ТекПробегПорожний;
					мПробегОбщийПоЗаданию = мПробегОбщийПоЗаданию + ТекПробегПорожний;
				КонецЕсли;
				
				// простой под погрузкой
				ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ПростойПодПогрузкой, уатОбщегоНазначения.уатВремяВСекунды(ТекСтрВыработка.ПростойПодПогрузкой), СтруктураСтроки, Ложь);
				
				// простой под разгрузкой
				ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ПростойПодРазгрузкой, уатОбщегоНазначения.уатВремяВСекунды(ТекСтрВыработка.ПростойПодРазгрузкой), СтруктураСтроки, Ложь);
				
				// погрузочно-разгрузочные работы
				ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ПогрузочноРазгрузочныеРаботы, ТекСтрВыработка.ПогрузочноРазгрузочныеРаботы, СтруктураСтроки, Ложь);
								
				// Спец. работы
				ТекПробегСпецНеВкл = 0;
				Для СчСпец = 1 По ТекСтрВыработка.КоличествоСпецработ Цикл
					Если ТекСтрВыработка.НомерЕздки = 0 ИЛИ ТекСтрВыработка["СпецРабота" + СчСпец].СпособРасчетаПоНомеруЭтапа = 0 Или ТекСтрВыработка.НомерЕздки <> ПредНомерЕздки Тогда
						ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, ТекСтрВыработка["СпецРабота" + СчСпец],
							ТекСтрВыработка["КоличествоСпецРаботы" + СчСпец], СтруктураСтроки, Ложь);
						Если ТекСтрВыработка["СпецРабота" + СчСпец].УвеличитьОбщийПробегНаПробегСпец Тогда
							ТекПробегСпецНеВкл = ТекПробегСпецНеВкл + ТекСтрВыработка["КоличествоСпецРаботы" + СчСпец];
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ПробегОбщий, ТекПробегСпецНеВкл, СтруктураСтроки, Ложь);
				мПробегСпецНеВкл = мПробегСпецНеВкл + ТекПробегСпецНеВкл;
				мПробегОбщийПоЗаданию = мПробегОбщийПоЗаданию + ТекПробегСпецНеВкл;
				
				// тн*км
				ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ТнКм, ТекСтрВыработка.ТнКм, СтруктураСтроки, Ложь);
				
				// объем*км
				ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ОбъемКм, ТекСтрВыработка.ОбъемКм, СтруктураСтроки, Ложь);
				
				// ручной произвольный параметр выработки
				Если ЗначениеЗаполнено(ТекСтрВыработка.ПараметрВыработки) И ТекСтрВыработка.Выработка > 0 Тогда
					Если ТекСтрВыработка.ПараметрВыработки.Временный Тогда
						ТекВыработка = уатОбщегоНазначения.уатВремяВСекунды(ТекСтрВыработка.Выработка);
					Иначе
						ТекВыработка = ТекСтрВыработка.Выработка;
					КонецЕсли;
					ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, ТекСтрВыработка.ПараметрВыработки, ТекВыработка, СтруктураСтроки, Ложь);
				КонецЕсли;
				
				ПредНомерЕздки = ТекСтрВыработка.НомерЕздки;
			КонецЦикла;
		КонецЦикла;
		
		// используем пробег общий по заданию, если он больше, чем пробег общий по одометру
		Если мПробегОбщий < мПробегОбщийПоЗаданию Тогда
			мПробегОбщий = мПробегОбщийПоЗаданию;
		КонецЕсли;
		
		// порожний пробег, величина которого превышает пробег по заданию
		ТекПробегПорожнийНеВЗадании = мПробегОбщий - мКоличествоКмСГрузом - мПробегПорожний - мПробегСпецНеВкл - НулевойПробегВыезда - НулевойПробегВозвращения;
		Если ТекПробегПорожнийНеВЗадании > 0 Тогда
			ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ПробегПорожний, ТекПробегПорожнийНеВЗадании,,Ложь);
		КонецЕсли;
		
		// общий пробег, величина которого превышает пробег по заданию
		Если мПробегОбщий - мПробегОбщийПоЗаданию > 0 Тогда
			ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ПробегОбщий, мПробегОбщий - мПробегОбщийПоЗаданию,, Ложь);
		КонецЕсли;
		
		// если из ТТД не пришло количество рейсов
		мсвНайденныеСтроки = ВыработкаСотрудников.НайтиСтроки(Новый Структура("Сотрудник, ПараметрВыработки", мСотрудник, Справочники.уатПараметрыВыработки.КоличествоРейсов));
		Если мсвНайденныеСтроки.Количество() = 0 Тогда
			ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.КоличествоРейсов, 1, , Ложь);
		КонецЕсли;
		
		// количество ТС
		Если Справочники.уатПараметрыВыработки.КоличествоТС.ДействуетНаСотрудников Тогда
			ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.КоличествоТС, 1);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Процедура рассчитывает выработку сотрудников вручную
// При этом следующие параметры пересчитываются при расчете итогов:
// - Пробег общий,
// - Время в работе,
// - Время в наряде,
// - Время ночное,
// - Время в простое.
// Остальные параметры не пересчитываются.
//
Процедура РасчетВыработкиСотрудников_Ручной(Отказ, списСотрудники, РезультатЗапросаПоПараметрам)
	
	// Очистка выработки - только для предопределенных параметров выработки
	// и для параметров с произвольным расчетом, если задана формула расчета
	Сч = ВыработкаТС.Количество() - 1;
	Пока Сч >= 0 Цикл
		ТекСтрока = ВыработкаТС[Сч];
		Если НЕ ТекСтрока.ПараметрВыработки.Предопределенный И ЗначениеЗаполнено(ТекСтрока.ПараметрВыработки.АлгоритмРасчетаПараметра) Тогда
			ВыработкаТС.Удалить(ТекСтрока);
		КонецЕсли;
		Сч = Сч - 1;
	КонецЦикла;	
	
	Для сч = 0 По списСотрудники.Количество() - 1 Цикл
		мСотрудник = списСотрудники[сч].Значение;
		
		ЗаписатьВыработкуСотрудникаРабочееВремя(мСотрудник, Истина);
		
		//пробег
		ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ПробегОбщий, мПробегОбщий,, Истина, Истина);
		
		// время в простое
		ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ВремяВПростое, мВремяВПростое - мВремяВПростоеСВклДвигателем,, Истина, Истина);
		
		// время в простое с вкл. двигателем
		ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ВремяВПростоеСВклДвигателем, мВремяВПростоеСВклДвигателем,, Истина, Истина);
		
		// количество дней
		ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.КоличествоДней, мКоличествоДней,, Истина, Истина);
		
		// количество рейсов
		ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.КоличествоРейсов, 1,, Истина, Истина);
		
		// количество ТС
		Если Справочники.уатПараметрыВыработки.КоличествоТС.ДействуетНаСотрудников Тогда
			ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.КоличествоТС, 1,, Истина, Истина);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ОбновитьДанныеПоРасходуГСМпоGPS()
	
	Если Не ЗначениеЗаполнено(ДатаВыезда) Или Не ЗначениеЗаполнено(ДатаВозвращения) Тогда 
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаРасхода Из РасходГСМ Цикл 
		ТекОсновноеТопливо = СтрокаРасхода.ТС.Модель.ОсновноеТопливо;
		Если ЗначениеЗаполнено(СтрокаРасхода.ТС)
			И ЗначениеЗаполнено(ТекОсновноеТопливо)
			И СтрокаРасхода.ГСМ = ТекОсновноеТопливо Тогда
			Отказ = Ложь;
			
			мсвОбъектыКЗапросу = Новый Массив();
			мсвОбъектыКЗапросу.Добавить(СтрокаРасхода.ТС);
			
			СвобныеДанные = уатМониторинг.ПолучитьСводныеДанныеМониторинга(ДатаВыезда,
				ДатаВозвращения, мсвОбъектыКЗапросу);
			СтруктураДанных = СвобныеДанные.Получить(СтрокаРасхода.ТС);
			
			Если СтруктураДанных <> Неопределено Тогда
				СтрокаРасхода.РасходПоGPS = СтруктураДанных.РасходТоплива;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура рассчитывает доплаты (за ночные и прочие) к з/п по пут. листу
// и добавляет их в ТЧ Зарплата
// Параметры:
//	вхСотрудник - сотрудник, по которому рассчитываются доплаты
//	вхТарифыЗП - таблица тарифов, колонки [СпособРасчетаОплатыТруда, ВидНачисления, ТарифЗП]
//	вхВидДоплаты - СпособРасчетаОплатыТруда, по которому ведется расчет доплат
//
Процедура РасчетДоплатЗП(вхСотрудник, вхТарифыЗП, вхВидДоплаты, КлассВодителя)
	тблЗарплатаВрем = Зарплата.Выгрузить();
	тблЗарплатаВрем.Очистить();
	тблЗарплатаВрем.Колонки.Добавить("ВесФильтров");
	тблЗарплатаВрем.Колонки.Добавить("НомерСтрокиДляПострочныхТарифов",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1,0,ДопустимыйЗнак.Неотрицательный)));
	
	СтруктураОбластьДействия = Новый Структура("ТС", ТранспортноеСредство);
	ДобавитьВСтруктуруОбластиДействияПрицепы(СтруктураОбластьДействия);
	СтруктураОбластьДействия.Вставить("КлассВодителя", КлассВодителя);
	
	мТарифыДоплата = вхТарифыЗП.НайтиСтроки(Новый Структура("СпособРасчетаОплатыТруда", вхВидДоплаты));
	Для счТарифы = 0 По мТарифыДоплата.Количество() - 1 Цикл
		ТекСтрока = мТарифыДоплата[счТарифы];
		мВидНачисления = ТекСтрока.ВидНачисления;
		ВесФильтровВрем = 0;
		
		Если НЕ уатРасчетыПоТарифам.ТарифЗПвОбластиДействия(ТекСтрока.ТарифЗП, Организация, СтруктураОбластьДействия,
				ВесФильтровВрем) Тогда
			Продолжить;
		КонецЕсли;
		
		мСумма = 0;
		
		Для Каждого ТекСтрокаИсточник Из мВидНачисления.БазовыеВидыРасчета Цикл
			мЗП = Зарплата.НайтиСтроки(Новый Структура("Сотрудник, ВидНачисления", вхСотрудник, ТекСтрокаИсточник.ВидРасчета));
			
			Если мЗП.Количество() = 0 Тогда
				мЗП = тблЗарплатаВрем.НайтиСтроки(Новый Структура("Сотрудник, ВидНачисления", вхСотрудник, ТекСтрокаИсточник.ВидРасчета));
			КонецЕсли;

			// просуммируем все начисления данного вида
			Для счЗП = 0 По мЗП.Количество() - 1 Цикл
				мСумма = мСумма + мЗП[счЗП].Сумма;
			КонецЦикла;	
		КонецЦикла;	
		
		НоваяСтрока 					= тблЗарплатаВрем.Добавить();
		НоваяСтрока.ВидНачисления 		= мВидНачисления;
		НоваяСтрока.Сотрудник 			= вхСотрудник;
		НоваяСтрока.Сумма 				= Окр(мСумма * ТекСтрока.ТарифЗП.Тариф / 100,2);
		НоваяСтрока.РучнойВвод 			= Ложь;
		НоваяСтрока.ВесФильтров		= ВесФильтровВрем;
		НоваяСтрока.ПараметрВыработки = ТекСтрока.ПараметрВыработки;
	КонецЦикла;
	
	УдалитьЛишниеТарифыЗП(тблЗарплатаВрем);
КонецПроцедуры

// Процедура удаляет "лишние" тарифы из блока з/п (лишним считается тариф с меньшим весом совпадения фильтров)
// тблЗарплатаВрем - таблица со структурой аналогичной ТЧ Зарплата, плюс доп. поля сортировки
// СтрокаДопСортировка - строка доп поля таблицы тблЗарплатаВрем, доп. аналитика для отбора "нужных" тарифов
Процедура УдалитьЛишниеТарифыЗП(тблЗарплатаВрем, СтрокаДопСортировка = Неопределено)
	Если тблЗарплатаВрем.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Удаляем сначала лишние тарифы с отключенным флагом "Построчно" (общие тарифы).
	// Если вес фильтра найденных построчных тарифов выше, чем вес фильтра общего тарифа,
	// то последний является лишним и будет удален
	Если СтрокаДопСортировка = Неопределено Тогда
		тблЗарплатаВрем.Сортировать("ВесФильтров УБЫВ");
		МаксВесФильтров = тблЗарплатаВрем[0].ВесФильтров;
		Сч = тблЗарплатаВрем.Количество();
		Пока Сч > 0 Цикл
			Сч = Сч - 1;
			Если тблЗарплатаВрем[Сч].ВесФильтров <> МаксВесФильтров И
					тблЗарплатаВрем[Сч].НомерСтрокиДляПострочныхТарифов = 0 Тогда
				тблЗарплатаВрем.Удалить(Сч);
			КонецЕсли;
		КонецЦикла;
	Иначе
		тблЗарплатаВрем.Сортировать(СтрокаДопСортировка + " УБЫВ, ВесФильтров УБЫВ");
		мсвНайденныхДопАналитикТарифов = Новый Массив;
		
		ТекАналитикаВрем = "";
		ПострочныйТарифИмеетМаксимальныйВес = Ложь;
		мсвСтрокДляУдаления = Новый Массив;
		Для каждого ТекСтрока Из тблЗарплатаВрем Цикл
			ТекАналитика = ТекСтрока[СтрокаДопСортировка];
			Если ТекАналитикаВрем <> ТекАналитика Тогда //перешли на новое значение аналитики - текущую строку включаем в ТЧ
				МаксВесФильтровПоАналитике = ТекСтрока.ВесФильтров;
				ТекАналитикаВрем = ТекАналитика;
				ПострочныйТарифИмеетМаксимальныйВес = (ТекСтрока.НомерСтрокиДляПострочныхТарифов <> 0);
				Продолжить;
			КонецЕсли;
			
			// вес фильтров в тек. строке ниже, значит ее удаляем
			Если ТекСтрока.ВесФильтров <> МаксВесФильтровПоАналитике И ТекСтрока.НомерСтрокиДляПострочныхТарифов = 0 Тогда
				
				мсвСтрокДляУдаления.Добавить(ТекСтрока);
				
				// ТОНКИЙ МОМЕНТ! вес фильтров в текущей строке равен максимальному,
				// но максимальный вес также соответствует и построчному тарифу
				// значит удаляем общий тариф
			ИначеЕсли ТекСтрока.ВесФильтров = МаксВесФильтровПоАналитике И ТекСтрока.НомерСтрокиДляПострочныхТарифов = 0
				И ПострочныйТарифИмеетМаксимальныйВес Тогда
				
				мсвСтрокДляУдаления.Добавить(ТекСтрока);
			КонецЕсли;
		КонецЦикла; 
		Для Каждого ТекСтрокаУдаления Из мсвСтрокДляУдаления Цикл
			тблЗарплатаВрем.Удалить(ТекСтрокаУдаления);
		КонецЦикла;
	КонецЕсли;
	
	// Удаляем лишние тарифы с включенным флагом "Построчно"
	// (для них НомерСтроки во временной таблице ненулевой и соответствует номеру строки Задания)
	тблЗарплатаВремПострочныеТарифы = тблЗарплатаВрем.Скопировать();
	тблЗарплатаВремПострочныеТарифы.Очистить();
	тблЗарплатаВрем.Сортировать("НомерСтрокиДляПострочныхТарифов УБЫВ");
	МаксНомерСтроки = тблЗарплатаВрем[0].НомерСтрокиДляПострочныхТарифов;
	Для Сч = 1 По МаксНомерСтроки Цикл
		тблЗарплатаВремПоСтроке = тблЗарплатаВрем.Скопировать();
		СчПоСтроке = тблЗарплатаВремПоСтроке.Количество()-1;
		Пока СчПоСтроке >= 0 Цикл
			Если тблЗарплатаВремПоСтроке[СчПоСтроке].НомерСтрокиДляПострочныхТарифов <> Сч Тогда
				тблЗарплатаВремПоСтроке.Удалить(СчПоСтроке);
			КонецЕсли;
			СчПоСтроке = СчПоСтроке - 1;
		КонецЦикла;
		
		// Если тблЗарплатаВремПоСтроке.Количество() < 2 Тогда // Если тариф найден один или не найден,то оставляем его как есть
		//	Если тблЗарплатаВремПоСтроке.Количество() = 1 Тогда
		//		НоваяСтрокаПостр = тблЗарплатаВремПострочныеТарифы.Добавить();
		//		ЗаполнитьЗначенияСвойств(НоваяСтрокаПостр, тблЗарплатаВремПоСтроке[0]);
		//	КонецЕсли;
		//	
		//	Продолжить;
		//КонецЕсли;
		Если тблЗарплатаВремПоСтроке.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДопСортировка = Неопределено Тогда
			МаксВесФильтровДляОбщихТарифов = 0;
			Для Каждого ТекСтрока Из тблЗарплатаВрем Цикл
				Если ТекСтрока.НомерСтрокиДляПострочныхТарифов = 0 И ТекСтрока.ВесФильтров > МаксВесФильтровДляОбщихТарифов Тогда
					МаксВесФильтровДляОбщихТарифов = ТекСтрока.ВесФильтров;
				КонецЕсли;
			КонецЦикла;
			
			тблЗарплатаВрем1 = тблЗарплатаВрем.Скопировать();
			тблЗарплатаВрем1.Сортировать("ВесФильтров УБЫВ");
			МаксВесФильтровДляОбщихТарифов = тблЗарплатаВрем1[0].ВесФильтров;
			
			тблЗарплатаВремПоСтроке.Сортировать("ВесФильтров УБЫВ");
			МаксВесФильтров = тблЗарплатаВремПоСтроке[0].ВесФильтров;
			СчПоСтроке = тблЗарплатаВремПоСтроке.Количество();
			Пока СчПоСтроке > 0 Цикл
				СчПоСтроке = СчПоСтроке - 1;
				Если тблЗарплатаВремПоСтроке[СчПоСтроке].ВесФильтров = МаксВесФильтров И
						тблЗарплатаВремПоСтроке[СчПоСтроке].ВесФильтров >= МаксВесФильтровДляОбщихТарифов Тогда
					НоваяСтрокаПостр = тблЗарплатаВремПострочныеТарифы.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаПостр, тблЗарплатаВремПоСтроке[СчПоСтроке]);
				КонецЕсли;
			КонецЦикла;
		Иначе
			тблЗарплатаВремПоСтроке.Сортировать(СтрокаДопСортировка + " УБЫВ, ВесФильтров УБЫВ");
			мсвНайденныхДопАналитикТарифов = Новый Массив;
			
			ТекАналитикаВрем = "";
			мсвСтрокДляУдаления = Новый Массив;
			Для каждого ТекСтрока Из тблЗарплатаВремПоСтроке Цикл
				ТекАналитика = ТекСтрока[СтрокаДопСортировка];
				Если ТекАналитикаВрем <> ТекАналитика Тогда //перешли на новое значение аналитики - текущую строку включаем в ТЧ
					МаксВесФильтровПоАналитике = ТекСтрока.ВесФильтров;
					ТекАналитикаВрем = ТекАналитика;
					
					МаксВесФильтровДляОбщихТарифов = 0;
					Для Каждого ТекСтрокаМаксВес Из тблЗарплатаВрем Цикл
						Если ТекСтрокаМаксВес.НомерСтрокиДляПострочныхТарифов = 0 И
								ТекСтрокаМаксВес[СтрокаДопСортировка] = ТекАналитика
							И ТекСтрокаМаксВес.ВесФильтров > МаксВесФильтровДляОбщихТарифов Тогда
							МаксВесФильтровДляОбщихТарифов = ТекСтрокаМаксВес.ВесФильтров;
						КонецЕсли;
					КонецЦикла;
					//Продолжить;
				КонецЕсли;
				
				Если ТекСтрока.ВесФильтров = МаксВесФильтровПоАналитике И
						ТекСтрока.ВесФильтров >= МаксВесФильтровДляОбщихТарифов Тогда
					НоваяСтрокаПостр = тблЗарплатаВремПострочныеТарифы.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаПостр, ТекСтрока);
				КонецЕсли;
			КонецЦикла; 
		КонецЕсли;
	КонецЦикла;
	
	// Удаляем все построчные тарифы из входной таблицы тблЗарплатаВрем
	// и добавляем обработанные (очищенные от лишних) построчные тарифы в туже таблицу тблЗарплатаВрем
	Сч = тблЗарплатаВрем.Количество()-1;
	Пока Сч >= 0 Цикл
		Если тблЗарплатаВрем[Сч].НомерСтрокиДляПострочныхТарифов <> 0 Тогда
			тблЗарплатаВрем.Удалить(Сч);
		КонецЕсли;
		Сч = Сч - 1;
	КонецЦикла;
	Для Каждого ТекСтрокаПостр Из тблЗарплатаВремПострочныеТарифы Цикл
		НоваяСтрокаВрем = тблЗарплатаВрем.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаВрем, ТекСтрокаПостр);
	КонецЦикла;
	
	// заливаем обработанную временную таблицу тарифов в ТЧ Зарплата
	Для Каждого ТекСтрокаВрем Из тблЗарплатаВрем Цикл
		Если ТекСтрокаВрем.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = Зарплата.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаВрем);
	КонецЦикла;
	
	тблЗарплатаВрем.Очистить();
КонецПроцедуры

Процедура ДобавитьВСтруктуруОбластиДействияПрицепы(СтруктураОбластьДействия)
	мсвПрицепы = новый Массив;
	Для Каждого ТекСтрока Из Прицепы Цикл
		Если ЗначениеЗаполнено(ТекСтрока.ТС) И мсвПрицепы.Найти(ТекСтрока.ТС) = Неопределено Тогда
			мсвПрицепы.Добавить(ТекСтрока.ТС);
		КонецЕсли;
	КонецЦикла;
	Если мсвПрицепы.Количество() > 0 Тогда
		списТСиПрицепы = Новый СписокЗначений;
		списТСиПрицепы.ЗагрузитьЗначения(мсвПрицепы);
		списТСиПрицепы.Добавить(СтруктураОбластьДействия.ТС);
		СтруктураОбластьДействия.ТС = списТСиПрицепы;
	КонецЕсли;
КонецПроцедуры

// Процедура запрашивает данные по ТС.
// Устанавливаются начальные данные по остаткам ГСМ, данные спидометра/счетчика, экипаж ТС и т.п.
//
// Параметры:
//	ОстатокТопливаВыезд - остаток топлива в баке ТС при выезде, перезаполняется при выполнении процедуры;
//	СоставТС - состав ТС (прицепы и доп. оборудование со своим баком);
//	флЗаполнитьВодителейПоУмолчанию - признак перезаполнения водителей при инициализации ТС (можно отключить)
//
Процедура ИнициализацияДанныхАвтомобиля(ОстатокТопливаВыезд = 0, СоставТС,
		флЗаполнитьВодителейПоУмолчанию = Истина) Экспорт
	РасходГСМ.Очистить();
	Прицепы.Очистить();
	
	Если ЗначениеЗаполнено(ТранспортноеСредство) Тогда
		
		ОстатокТопливаВыезд 	= уатОбщегоНазначения.уатОстатокГСМнаТС(ДатаВыезда, ТранспортноеСредство,
			ТранспортноеСредство.Модель.ОсновноеТопливо, Ссылка);
		ОстатокТопливаВозврат 	= 0;
		
		Если ЗначениеЗаполнено(ТранспортноеСредство.Модель.ОсновноеТопливо) Тогда
			НоваяСтрокаГСМ 						= РасходГСМ.Добавить();
			НоваяСтрокаГСМ.Активен 				= Истина;
			НоваяСтрокаГСМ.ТС 					= ТранспортноеСредство;
			НоваяСтрокаГСМ.ГСМ 					= ТранспортноеСредство.Модель.ОсновноеТопливо;
			НоваяСтрокаГСМ.ОстатокПриВыезде 	= ОстатокТопливаВыезд;
			НоваяСтрокаГСМ.ОстатокПриВозвращении = ОстатокТопливаВозврат;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТранспортноеСредство.Модель.ДополнительноеТопливо) Тогда
			НоваяСтрокаГСМ 					= РасходГСМ.Добавить();
			НоваяСтрокаГСМ.Активен			= РаботаНаДвухВидахТоплива;
			НоваяСтрокаГСМ.ТС 				= ТранспортноеСредство;
			НоваяСтрокаГСМ.ГСМ 				= ТранспортноеСредство.Модель.ДополнительноеТопливо;
			НоваяСтрокаГСМ.ОстатокПриВыезде = уатОбщегоНазначения.уатОстатокГСМнаТС(ДатаВыезда,ТранспортноеСредство,
												НоваяСтрокаГСМ.ГСМ, Ссылка);
			НоваяСтрокаГСМ.ОстатокПриВозвращении = 0;
		КонецЕсли;
		
		// Добавляем остатки ТЖ при выезде
		// а также и ТЖ, по которым учет норм ведется, но остатков нет
		тблОстаткиТЖнаТС = уатПутевыеЛисты.ОстаткиТЖнаТС(ТранспортноеСредство, ДатаВыезда);
		Для Каждого ТекСтрокаТЖ Из тблОстаткиТЖнаТС Цикл
			НоваяСтрокаГСМ 					= РасходГСМ.Добавить();
			НоваяСтрокаГСМ.ТС 				= ТранспортноеСредство;
			НоваяСтрокаГСМ.ГСМ 				= ТекСтрокаТЖ.ТЖ;
			НоваяСтрокаГСМ.ОстатокПриВыезде = ТекСтрокаТЖ.Количество;
			НоваяСтрокаГСМ.ОстатокПриВозвращении = 0;
		КонецЦикла;
		
		ЗаполнятьПробегПрицепов = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация,
			ПланыВидовХарактеристик.уатПраваИНастройки.ЗаполнятьПробегПрицепов);
		
		Для Каждого ТекТС из СоставТС Цикл
			Если ЗначениеЗаполнено(ТекТС) Тогда
				НоваяСтрокаПрицеп = Прицепы.Добавить();
				НоваяСтрокаПрицеп.ТС = ТекТС;
				Если ТекТС.Модель.НаличиеСпидометра Тогда
					Если ТекТС.Модель.ВидМоделиТС <> Перечисления.уатВидыМоделейТС.Прицеп ИЛИ ЗаполнятьПробегПрицепов Тогда
						НоваяСтрокаПрицеп.СчетчикМЧВыезда = уатОбщегоНазначения.уатТекущийСпидометр(ТекТС, ДатаВыезда);
					КонецЕсли;
				Иначе
					НоваяСтрокаПрицеп.СчетчикМЧВыезда = уатОбщегоНазначения.уатТекущийСчетчикМЧ(ТекТС, ДатаВыезда);
				КонецЕсли;
				НоваяСтрокаПрицеп.СчетчикМЧВозвращения = 0;
				
				Если ЗначениеЗаполнено(ТекТС.Модель.ОсновноеТопливо) И ТекТС.Модель.НаличиеТопливногоБака Тогда
					НоваяСтрокаГСМ = РасходГСМ.Добавить();
					НоваяСтрокаГСМ.Активен = Истина;
					НоваяСтрокаГСМ.ТС                    = ТекТС;
					НоваяСтрокаГСМ.ГСМ                   = ТекТС.Модель.ОсновноеТопливо;
					НоваяСтрокаГСМ.ОстатокПриВыезде      = уатОбщегоНазначения.уатОстатокГСМнаТС(ДатаВыезда, ТекТС,
															НоваяСтрокаГСМ.ГСМ, Ссылка);
					НоваяСтрокаГСМ.ОстатокПриВозвращении = 0;
				КонецЕсли;	
			КонецЕсли;
			
			// добавляем остатки ТЖ при выезде
			тблОстаткиТЖнаТС = уатПутевыеЛисты.ОстаткиТЖнаТС(ТекТС, ДатаВыезда);
			Для Каждого ТекСтрокаТЖ Из тблОстаткиТЖнаТС Цикл
				НоваяСтрокаГСМ 					= РасходГСМ.Добавить();
				НоваяСтрокаГСМ.ТС 				= ТекТС;
				НоваяСтрокаГСМ.ГСМ 				= ТекСтрокаТЖ.ТЖ;
				НоваяСтрокаГСМ.ОстатокПриВыезде = ТекСтрокаТЖ.Количество;
				НоваяСтрокаГСМ.ОстатокПриВозвращении = 0;
			КонецЦикла;
		КонецЦикла;
		
		Если ТранспортноеСредство.Модель.НаличиеСпидометра Тогда
			СпидометрВыезда = уатОбщегоНазначения.уатТекущийСпидометр(ТранспортноеСредство, ДатаВыезда);
		Иначе
			СпидометрВыезда = уатОбщегоНазначения.уатТекущийСчетчикМЧ(ТранспортноеСредство, ДатаВыезда);
		КонецЕсли;	
		
		// заполняем экипаж
		Если флЗаполнитьВодителейПоУмолчанию Тогда
			Водитель1  = Неопределено;
			Водитель2  = Неопределено;
			Сотрудник1 = Неопределено;
			Сотрудник2 = Неопределено;
			уатОбщегоНазначения.ЗаполнитьЭкипажТС(ТранспортноеСредство, Организация, ДатаВыезда,
				Водитель1, Водитель2, Сотрудник1, Сотрудник2, Истина, ДатаВозвращения, Истина);
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(УсловиеРаботы) = Истина Тогда
			УсловиеРаботы = ТранспортноеСредство.ОсновноеУсловиеРаботы;
		КонецЕсли;
		
		ВыдатьГорючее = ТранспортноеСредство.Модель.ОсновноеТопливо;
	Иначе
		СпидометрВыезда = 0;
	КонецЕсли;	
	
КонецПроцедуры // ИнициализацияДанныхАвтомобиля()

// Процедура для шин ТС определяет параметр выработки пробег общий
//
Процедура ВывестиПарметрыВыработкиШин(МассивАгрегатов)
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатАгрегатыТССрезПоследних.СерияНоменклатуры КАК СерияНоменклатуры,
	|	уатАгрегатыТССрезПоследних.ТС КАК ТС,
	|	уатАгрегатыТССрезПоследних.СостояниеАгрегата КАК СостояниеАгрегата
	|ПОМЕСТИТЬ Временная
	|ИЗ
	|	РегистрСведений.уатАгрегатыТС.СрезПоследних(
	|			&Дата,
	|			ТС В (&ТС)
	|				И СерияНоменклатуры.ТипАгрегата = ЗНАЧЕНИЕ(Справочник.уатТипыАгрегатов.Шина)) КАК уатАгрегатыТССрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	уатПутевойЛистВыработкаТС.ТС КАК ТС,
	|	Временная.СерияНоменклатуры КАК Агрегат,
	|	уатПутевойЛистВыработкаТС.ПараметрВыработки КАК ПараметрВыработки,
	|	СУММА(уатПутевойЛистВыработкаТС.Количество) КАК Количество
	|ИЗ
	|	Временная КАК Временная
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатПутевойЛист.ВыработкаТС КАК уатПутевойЛистВыработкаТС
	|		ПО (уатПутевойЛистВыработкаТС.ТС = Временная.ТС)
	|			И (Временная.СостояниеАгрегата В(&СостояниеАгрегата))
	|ГДЕ
	|	уатПутевойЛистВыработкаТС.Ссылка = &Ссылка
	|	И уатПутевойЛистВыработкаТС.ПараметрВыработки = ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ПробегОбщий)
	|
	|СГРУППИРОВАТЬ ПО
	|	Временная.СерияНоменклатуры,
	|	уатПутевойЛистВыработкаТС.ПараметрВыработки,
	|	уатПутевойЛистВыработкаТС.ТС";
	
	Запрос.УстановитьПараметр("Дата", Новый Граница(ДатаЗакрытия, ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("ТС", ВыработкаТС.ВыгрузитьКолонку("ТС"));
	СписокСостоянийАгрегата = Новый СписокЗначений();
	СписокСостоянийАгрегата.Добавить(Перечисления.уатСостоянияАгрегатов.УстановленоВРаботе);
	Если уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, ПланыВидовХарактеристик.уатПраваИНастройки.НачислятьИзносНаЗапаску) Тогда
		СписокСостоянийАгрегата.Добавить(Перечисления.уатСостоянияАгрегатов.УстановленоВЗапас);
	КонецЕсли;
	Запрос.УстановитьПараметр("СостояниеАгрегата", СписокСостоянийАгрегата);
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Выборка =  Запрос.Выполнить().Выбрать(); 
	ВыработкаШин = Новый ТаблицаЗначений;
	ВыработкаШин = ВыработкаТС.Выгрузить();
	ВыработкаШин.Свернуть("ТС,ПараметрВыработки","Количество");
	Пока Выборка.Следующий() Цикл
		СтрокаТЧ = ВыработкаШин.Найти(Выборка.ПараметрВыработки,"ПараметрВыработки");
		Если СтрокаТЧ <> Неопределено Тогда
		СтруктураАгрегатов = Новый Структура;
		СтруктураАгрегатов.Вставить("ТС",Выборка.ТС);
		СтруктураАгрегатов.Вставить("Агрегат",Выборка.Агрегат);
		СтруктураАгрегатов.Вставить("ПараметрВыработки",Выборка.ПараметрВыработки);
		СтруктураАгрегатов.Вставить("Количество",СтрокаТЧ.Количество);
		МассивАгрегатов.Добавить(СтруктураАгрегатов);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ЕстьВыходныеПраздникиПоПЛ(Сотрудник)
	Если ДатаВыезда = '00010101' ИЛИ ДатаВозвращения = '00010101' Тогда
		Возврат Ложь;
	КонецЕсли;
	
	тчГрафикиРабот = уатОбщегоНазначения.ПолучитьГрафикиРаботыСотрудниковЗаПериод(Сотрудник, НачалоДня(ДатаВыезда), НачалоДня(ДатаВозвращения));
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	тчГрафикиРабот.Период КАК Период,
	|	тчГрафикиРабот.ПроизводственныйКалендарь КАК ПроизводственныйКалендарь,
	|	тчГрафикиРабот.ГрафикРаботы КАК ГрафикРаботы
	|ПОМЕСТИТЬ втПроизводственныйКалендарь
	|ИЗ
	|	&тчГрафикиРабот КАК тчГрафикиРабот
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	КалендарныеГрафики.ДатаГрафика КАК ДатаГрафика
	|ИЗ
	|	втПроизводственныйКалендарь КАК втПроизводственныйКалендарь
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	|		ПО втПроизводственныйКалендарь.Период = КалендарныеГрафики.ДатаГрафика
	|			И втПроизводственныйКалендарь.ГрафикРаботы = КалендарныеГрафики.Календарь
	|			И (КалендарныеГрафики.ДеньВключенВГрафик = ЛОЖЬ)";
	Запрос.УстановитьПараметр("тчГрафикиРабот", тчГрафикиРабот);
	Если НЕ Запрос.Выполнить().Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

// Функция возвращает все параметры выработки с произвольным расчетом
//
Функция ПолучитьПараметрыВыработкиСПроизвольнымРасчетом ()
	
	// параметры выработки с произвольным расчетом
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатПараметрыВыработки.Ссылка,
	|	уатПараметрыВыработки.АлгоритмРасчетаПараметра,
	|	уатПараметрыВыработки.ДействуетНаСотрудников,
	|	уатПараметрыВыработки.ДействуетНаТС
	|ИЗ
	|	Справочник.уатПараметрыВыработки КАК уатПараметрыВыработки
	|ГДЕ
	|	(НЕ уатПараметрыВыработки.Предопределенный)
	|	И уатПараметрыВыработки.СпособРасчетаПараметровВыработки = ЗНАЧЕНИЕ(Перечисление.уатСпособРасчетаПараметровВыработки.ПоЗаданию)
	|	И (НЕ уатПараметрыВыработки.ПометкаУдаления)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатПараметрыВыработки.Ссылка,
	|	уатПараметрыВыработки.АлгоритмРасчетаПараметра,
	|	уатПараметрыВыработки.ДействуетНаСотрудников,
	|	уатПараметрыВыработки.ДействуетНаТС
	|ИЗ
	|	Справочник.уатПараметрыВыработки КАК уатПараметрыВыработки
	|ГДЕ
	|	(НЕ уатПараметрыВыработки.Предопределенный)
	|	И уатПараметрыВыработки.СпособРасчетаПараметровВыработки = ЗНАЧЕНИЕ(Перечисление.уатСпособРасчетаПараметровВыработки.ПоШапке)
	|	И (НЕ уатПараметрыВыработки.ПометкаУдаления)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатПараметрыВыработки.Ссылка,
	|	уатПараметрыВыработки.АлгоритмРасчетаПараметра,
	|	уатПараметрыВыработки.ДействуетНаСотрудников,
	|	уатПараметрыВыработки.ДействуетНаТС
	|ИЗ
	|	Справочник.уатПараметрыВыработки КАК уатПараметрыВыработки
	|ГДЕ
	|	(НЕ уатПараметрыВыработки.Предопределенный)
	|	И уатПараметрыВыработки.СпособРасчетаПараметровВыработки = ЗНАЧЕНИЕ(Перечисление.уатСпособРасчетаПараметровВыработки.ПоТТД)
	|	И (НЕ уатПараметрыВыработки.ПометкаУдаления)";
	
	Возврат Запрос.ВыполнитьПакет();
	
КонецФункции

// Процедура сворачивает выработку ТС по настройкам учета выработки согласно учетной политике
// Перед сверткой, если по аналитике (напр. Подразделение) не ведется учет, то она заполняется пустыми значениями
//
Процедура СвернутьВыработкуТСпоУчетнойПолитике()
	УчетВыработкиПоКонтрагентам = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, ПланыВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоКонтрагентам);
	УчетВыработкиПоПодразделениям = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, ПланыВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоПодразделениям);
	УчетВыработкиПоОбъектамСтроительства = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, ПланыВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоОбъектамСтроительства);
	УчетВыработкиПоМаршрутам = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, ПланыВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоМаршрутам);
	УчетВыработкиПоВидамПеревозок = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, ПланыВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоВидамПеревозок);
	УчетВыработкиПоНаправлениямПеревозок = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, ПланыВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоНаправлениямПеревозок);
		
	Для Каждого ТекСтрока Из ВыработкаТС Цикл
		Если НЕ УчетВыработкиПоКонтрагентам Тогда
			ТекСтрока.Контрагент = Неопределено;
		КонецЕсли;
		Если НЕ УчетВыработкиПоПодразделениям Тогда
			ТекСтрока.Подразделение = Неопределено;
		КонецЕсли;
		Если НЕ УчетВыработкиПоОбъектамСтроительства Тогда
			ТекСтрока.ОбъектСтроительства = Неопределено;
		КонецЕсли;
		Если НЕ УчетВыработкиПоМаршрутам Тогда
			ТекСтрока.Маршрут = Неопределено;
		КонецЕсли;
		Если НЕ УчетВыработкиПоВидамПеревозок Тогда
			ТекСтрока.ВидПеревозки = Неопределено;
		КонецЕсли;
		Если НЕ УчетВыработкиПоНаправлениямПеревозок Тогда
			ТекСтрока.НаправлениеПеревозки = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	ВыработкаТС.Свернуть("ТС, ПараметрВыработки, Подразделение, Контрагент, ОбъектСтроительства, Маршрут, ВидПеревозки, НаправлениеПеревозки", "Количество");
	
КонецПроцедуры

// Процедура сворачивает выработку сотрудников по настройкам учета выработки согласно учетной политике
// Перед сверткой, если по аналитике (напр. Подразделение) не ведется учет, то она заполняется пустыми значениями
//
Процедура СвернутьВыработкуСотрудниковпоУчетнойПолитике()
	УчетВыработкиПоКонтрагентам = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, ПланыВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоКонтрагентам);
	УчетВыработкиПоПодразделениям = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, ПланыВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоПодразделениям);
	УчетВыработкиПоОбъектамСтроительства = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, ПланыВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоОбъектамСтроительства);
	УчетВыработкиПоМаршрутам = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, ПланыВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоМаршрутам);
	УчетВыработкиПоВидамПеревозок = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, ПланыВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоВидамПеревозок);
	УчетВыработкиПоНаправлениямПеревозок = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, ПланыВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоНаправлениямПеревозок);
	Для Каждого ТекСтрока Из ВыработкаСотрудников Цикл
		Если НЕ УчетВыработкиПоКонтрагентам Тогда
			ТекСтрока.Контрагент = Неопределено;
		КонецЕсли;
		Если НЕ УчетВыработкиПоПодразделениям Тогда
			ТекСтрока.Подразделение = Неопределено;
		КонецЕсли;
		Если НЕ УчетВыработкиПоОбъектамСтроительства Тогда
			ТекСтрока.ОбъектСтроительства = Неопределено;
		КонецЕсли;
		Если НЕ УчетВыработкиПоМаршрутам Тогда
			ТекСтрока.Маршрут = Неопределено;
		КонецЕсли;
		Если НЕ УчетВыработкиПоВидамПеревозок Тогда
			ТекСтрока.ВидПеревозки = Неопределено;
		КонецЕсли;
		Если НЕ УчетВыработкиПоНаправлениямПеревозок Тогда
			ТекСтрока.НаправлениеПеревозки = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекСтрока Из ВыработкаСотрудников Цикл 
		Если Не ЗначениеЗаполнено(ТекСтрока.Подразделение) Тогда 
			ТекСтрока.Подразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		КонецЕсли;
	КонецЦикла;
	
	ВыработкаСотрудников.Свернуть("Сотрудник, ПараметрВыработки, Подразделение, Контрагент, ОбъектСтроительства, Маршрут, ВидПеревозки, НаправлениеПеревозки", "Количество");
	
КонецПроцедуры

// Функция вычисляет произвольный параметр выработки рассчитанный по шапке
//
Функция ВычислитьПроизвольныйПараметрВыработкиПоШапке(Параметр)
	СтрокаЗамены = СтрЗаменить(Параметр.АлгоритмРасчетаПараметра, "[", "");
	СтрокаЗамены = СтрЗаменить(СтрокаЗамены, "]", "");
	Попытка 
		ЗначениеПараметра = Вычислить(СтрокаЗамены);
		Если ТипЗнч(ЗначениеПараметра) <> Тип("Число") Тогда
			ЗначениеПараметра = "ошибка";
		КонецЕсли;
	Исключение
		ЗначениеПараметра = "ошибка";
	КонецПопытки;
	
	Если ЗначениеПараметра = "ошибка" Тогда
		ТекстНСТР = СтрШаблон(НСтр("en='When calculating the output parameter ""%1"" error occurred. Check correctness of formula and input data.';ru='При расчете параметра выработки ""%1"" произошла ошибка. Проверьте правильность формулы и введенных данных.'"), Параметр.Ссылка.Наименование);
		уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР);
	КонецЕсли;
	
	Возврат ЗначениеПараметра;
КонецФункции

// Функция подготовливает для вычисления произвольный параметр выработки рассчитанный по заданию или по ттд
//
Функция ВычислитьПроизвольныйПараметрВыработки(Параметр, ТекСтрЗадание)
	СтрокаЗамены = СтрЗаменить(Параметр.АлгоритмРасчетаПараметра, "[", "ТекСтрЗадание.");
	СтрокаЗамены = СтрЗаменить(СтрокаЗамены, "]", "");
	Попытка
		// Знак подчеркивания ставим временно, чтобы замена КоличествоЧасов не затерла КоличествоЧасовПрицеп1 и КоличествоЧасовПрицеп2
		СтрокаЗамены = СтрЗаменить(СтрокаЗамены, "ТекСтрЗадание.КоличествоЧасовПрицеп1",
			"уатОбщегоНазначения.уатВремяВСекунды(ТекСтрЗадание_.КоличествоЧасовПрицеп1)");
		СтрокаЗамены = СтрЗаменить(СтрокаЗамены, "ТекСтрЗадание.КоличествоЧасовПрицеп2",
			"уатОбщегоНазначения.уатВремяВСекунды(ТекСтрЗадание_.КоличествоЧасовПрицеп2)");
		
		СтрокаЗамены = СтрЗаменить(СтрокаЗамены, "ТекСтрЗадание.КоличествоЧасов",
			"уатОбщегоНазначения.уатВремяВСекунды(ТекСтрЗадание.КоличествоЧасов)");
		
		СтрокаЗамены = СтрЗаменить(СтрокаЗамены, "ТекСтрЗадание_.КоличествоЧасовПрицеп1", "ТекСтрЗадание.КоличествоЧасовПрицеп1");
		СтрокаЗамены = СтрЗаменить(СтрокаЗамены, "ТекСтрЗадание_.КоличествоЧасовПрицеп2", "ТекСтрЗадание.КоличествоЧасовПрицеп2");
		
		СтрокаЗамены = СтрЗаменить(СтрокаЗамены, "ТекСтрЗадание.Подача",
			"уатОбщегоНазначения.уатВремяВСекунды(ТекСтрЗадание.Подача)");
		
		ЗначениеПараметра = Вычислить(СтрокаЗамены);
		
		Если ТипЗнч(ЗначениеПараметра) <> Тип("Число") Тогда
			ЗначениеПараметра = "ошибка";
		КонецЕсли;
	Исключение
		ЗначениеПараметра = "ошибка";
	КонецПопытки;
	
	Если ЗначениеПараметра = "ошибка" Тогда
		ТекстНСТР = СтрШаблон(НСтр("en='When calculating the output parameter ""%1"" error occurred. Check correctness of formula and input data.';ru='При расчете параметра выработки ""%1"" произошла ошибка. Проверьте правильность формулы и введенных данных.'"), Параметр.Ссылка.Наименование);
		уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР);
	КонецЕсли;
	
	Возврат ЗначениеПараметра;
КонецФункции

// Процедура проверяет корректность заполнения ПЛ перед расчетом итогов по документу
Процедура ПроверкаКорректностиПЛ_РасчетИтогов(Заголовок, Отказ)
	
	Отказ = Ложь;
	
	СтруктураПолей = Новый Структура("ТранспортноеСредство, Водитель1, ДатаВыезда, ДатаВозвращения");
	уатОбщегоНазначенияТиповые.уатПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураПолей, Отказ, Заголовок);
	
	Если НЕ ЗначениеЗаполнено(ТранспортноеСредство.Модель) Тогда
		ТекстНСТР = НСтр("en='For vehicle not specified model!';ru='Для ТС не указана модель!'");
		уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, Отказ,, СтатусСообщения.Важное);
	КонецЕсли;
	
	// Проверка превышения пробега в строках расхода ГСМ значения общего пробега по одометру
	Если РаботаНаДвухВидахТоплива Тогда
		ОбщийПробегПЛ = уатОбщегоНазначения.уатРазностьПоказанийСчетчика(СпидометрВыезда, СпидометрВозвращения);
		Для Каждого ТекСтрокаГСМ Из РасходГСМ Цикл
			Если ТекСтрокаГСМ.Пробег > ОбщийПробегПЛ Тогда
				Если ТранспортноеСредство.Модель.НаличиеСпидометра Тогда
					ТекстСообщ = "В табличной части ""Расход ГСМ"" пробег превышает общий пробег по одометру!";
				Иначе
					ТекстСообщ = "В табличной части ""Расход ГСМ"" наработка превышает общую наработку по счетчику моточасов!";
				КонецЕсли;
				уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстСообщ, Отказ,, СтатусСообщения.Важное);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Если включены детальные условия работы, то выполняется проверка на распределение пробега по условиям
	// если пробег распределен не полностью, или перераспределен, то расчет итогов отменяется
	Если уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, "ДетальныйУчетУсловийРаботы") Тогда
		Для Каждого ТекСтрокаЗадание Из Задание Цикл
			Если НЕ ЗначениеЗаполнено(ТекСтрокаЗадание.ID) Тогда
				Продолжить;
			КонецЕсли;
			
			мсвСтрокиУсловияРаботы = УсловияРаботыДетально.НайтиСтроки(Новый Структура("ID", ТекСтрокаЗадание.ID));
			Если мсвСтрокиУсловияРаботы.Количество() > 0 Тогда
				ТекПробегСГрузомПоУсловиям  = 0;
				ТекПробегПорожнийПоУсловиям = 0;
				Для Каждого ТекСтрокаУсловиеРаботы Из мсвСтрокиУсловияРаботы Цикл
					ТекПробегСГрузомПоУсловиям = ТекПробегСГрузомПоУсловиям + ТекСтрокаУсловиеРаботы.КоличествоКмГруз;
					ТекПробегПорожнийПоУсловиям = ТекПробегПорожнийПоУсловиям + ТекСтрокаУсловиеРаботы.КоличествоКмПорожний;
				КонецЦикла;
				Если ТекПробегСГрузомПоУсловиям <> ТекСтрокаЗадание.КоличествоКмГруз
					ИЛИ ТекПробегПорожнийПоУсловиям <> ТекСтрокаЗадание.КоличествоКмПорожний Тогда
					ТекстСообщ = СтрШаблон("В строке %1 задания пробег отличается от распределенного по условиям работы",
						ТекСтрокаЗадание.НомерСтроки);
					уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстСообщ, Отказ,, СтатусСообщения.Важное);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Функция получает значение одного параметра выработки по строке ТЧ Выработка документа ТТД.
// Используется при расчете ЗП.
Функция ПолучитьВыработкуПоСтрокеТТДСвернутого(ПараметрВыработки, ТекСтрокаЗадания)
	
	// время в работе
	Если ПараметрВыработки = Справочники.уатПараметрыВыработки.ВремяВРаботе И ТекСтрокаЗадания.КоличествоЧасов > 0 Тогда
		мКоличество = уатОбщегоНазначения.уатВремяВСекунды(ТекСтрокаЗадания.КоличествоЧасов)/3600;
		
	// вес груза
	ИначеЕсли ПараметрВыработки = Справочники.уатПараметрыВыработки.ВесГруза И ТекСтрокаЗадания.КоличествоТонн > 0 Тогда
		мКоличество = ТекСтрокаЗадания.КоличествоТонн;
		
	//объем
	ИначеЕсли ПараметрВыработки = Справочники.уатПараметрыВыработки.Объем И ТекСтрокаЗадания.Объем > 0 Тогда
		мКоличество = ТекСтрокаЗадания.Объем;
		
	// количество ездок
	ИначеЕсли ПараметрВыработки = Справочники.уатПараметрыВыработки.КоличествоЕздок И ТекСтрокаЗадания.КоличествоЕздок > 0 Тогда
		мКоличество = ТекСтрокаЗадания.КоличествоЕздок;
		
	// количество операций
	ИначеЕсли ПараметрВыработки = Справочники.уатПараметрыВыработки.КоличествоОпераций И ТекСтрокаЗадания.КоличествоОпераций > 0 Тогда
		мКоличество = ТекСтрокаЗадания.КоличествоОпераций;
		
	//подача
	ИначеЕсли ПараметрВыработки = Справочники.уатПараметрыВыработки.Подача И ТекСтрокаЗадания.Подача > 0 Тогда
		мКоличество = уатОбщегоНазначения.уатВремяВСекунды(ТекСтрокаЗадания.Подача)/3600;
		
	// пробег порожний
	ИначеЕсли ПараметрВыработки = Справочники.уатПараметрыВыработки.ПробегПорожний И ТекСтрокаЗадания.КоличествоКмПорожний > 0 Тогда
		мКоличество = ТекСтрокаЗадания.КоличествоКмПорожний;
		
	// пробег с грузом
	ИначеЕсли ПараметрВыработки = Справочники.уатПараметрыВыработки.ПробегСГрузом И ТекСтрокаЗадания.КоличествоКмГруз > 0 Тогда
		мКоличество = ТекСтрокаЗадания.КоличествоКмГруз;
		
	// тн*км
	ИначеЕсли ПараметрВыработки = Справочники.уатПараметрыВыработки.ТнКм И ТекСтрокаЗадания.ТнКм > 0 Тогда
		мКоличество = ТекСтрокаЗадания.ТнКм;
		
	// объем*км
	ИначеЕсли ПараметрВыработки = Справочники.уатПараметрыВыработки.ОбъемКм И ТекСтрокаЗадания.ОбъемКм > 0 Тогда
		мКоличество = ТекСтрокаЗадания.ТекСтрокаЗадания.ОбъемКм;
		
	// погрузочно-разгрузочные работы
	ИначеЕсли ПараметрВыработки = Справочники.уатПараметрыВыработки.ПогрузочноРазгрузочныеРаботы И ТекСтрокаЗадания.ПогрузочноРазгрузочныеРаботы > 0 Тогда
		мКоличество = ТекСтрокаЗадания.ПогрузочноРазгрузочныеРаботы;
		
	// простой под погрузкой
	ИначеЕсли ПараметрВыработки = Справочники.уатПараметрыВыработки.ПростойПодПогрузкой И ТекСтрокаЗадания.ПростойПодПогрузкой > 0 Тогда
		мКоличество = уатОбщегоНазначения.уатВремяВСекунды(ТекСтрокаЗадания.ПростойПодПогрузкой)/3600;
		
	// простой под разгрузкой
	ИначеЕсли ПараметрВыработки = Справочники.уатПараметрыВыработки.ПростойПодРазгрузкой И ТекСтрокаЗадания.ПростойПодРазгрузкой > 0 Тогда
		мКоличество = уатОбщегоНазначения.уатВремяВСекунды(ТекСтрокаЗадания.ПростойПодРазгрузкой)/3600;
		
	// ручной произвольный параметр выработки
	ИначеЕсли ПараметрВыработки = ТекСтрокаЗадания.ПараметрВыработки И ТекСтрокаЗадания.Выработка > 0 Тогда
		Если ПараметрВыработки.Временный Тогда
			мКоличество = уатОбщегоНазначения.уатВремяВСекунды(ТекСтрокаЗадания.Выработка)/3600;
		Иначе
			мКоличество = ТекСтрокаЗадания.Выработка;
		КонецЕсли;
		
	ИначеЕсли НЕ ПараметрВыработки.Предопределенный
		И ПараметрВыработки.СпособРасчетаПараметровВыработки = Перечисления.уатСпособРасчетаПараметровВыработки.ПоЗаданию
		И ПараметрВыработки.ДействуетНаСотрудников Тогда
		
		ЗначениеПараметра = ВычислитьПроизвольныйПараметрВыработки(ПараметрВыработки, ТекСтрокаЗадания);
		Если ЗначениеПараметра = "ошибка" Тогда
			мКоличество = 0;
		Иначе
			Если ПараметрВыработки.Временный Тогда
				мКоличество = ЗначениеПараметра / 3600;
			Иначе
				мКоличество = ЗначениеПараметра;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		мКоличество = 0;
		
	КонецЕсли;
	
	// Спец. работы
	мКоличество = мКоличество + ПолучитьВыработкуСпецработыПоСтрокеЗаданияСвернутого(ПараметрВыработки, ТекСтрокаЗадания);

	Возврат мКоличество;
		
КонецФункции

Функция ПодставлятьОбщийПробегВПЛпоGPS(Знач ПраваОрганизации = Неопределено)
	Если ПраваОрганизации = Неопределено Тогда
		СтруктураОбъектовНастроек = Новый Структура;
		СтруктураОбъектовНастроек.Вставить("Организация", Организация);
		Если ЗначениеЗаполнено(Подразделение) Тогда 
			СтруктураОбъектовНастроек.Вставить("Подразделение", Подразделение);
		Иначе
			СтруктураОбъектовНастроек.Вставить("Подразделение", ТранспортноеСредство.Подразделение);
		КонецЕсли;
		ПраваОрганизации = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек);
	КонецЕсли;
	Рез = уатПраваИНастройки.уатПраво("ПодставлятьОбщийПробегВПЛпоGPS",  ПраваОрганизации); 
	
	Возврат Рез;
КонецФункции

// Функция подготавливает таблицу Задание, в которой свернуты строки с одинаковыми номерами этапов
Функция ПолучитьЗаданиеСвернутоеСУчетомЭтапов(ГруппироватьПоСсылочнымРеквизитам = Истина)
	СуммированиеПоЭтапам = ПараметрыВыработкиСуммированиеПоЭтапам();
	
	ЗаданиеСвернутое = Задание.ВыгрузитьКолонки();
	
	// Считаем ТнКм и ОбъемКм здесь, потому что после свертки их посчитать точно так же не получится.
	ЗаданиеСвернутое.Колонки.Добавить("ТнКм", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ЗаданиеСвернутое.Колонки.Добавить("ОбъемКм", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)));
	ЗаданиеСвернутое.Колонки.Добавить("КоличествоСпецработ", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(3, 0)));
	ЗаданиеСвернутое.Колонки.Добавить("ФактическоеВремяОпоздания", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(6, 2)));
	ЗаданиеСвернутое.Колонки.Добавить("ФактическоеВремяПростоя", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(6, 2)));
	
	мЭтапыЗадания = Задание.Выгрузить();
	мЭтапыЗадания.Свернуть("НомерЕздки");
	
	СекундВМинуте = 60;
	ДопустимоеВремяОпозданияСекунд = СекундВМинуте * уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(
		Организация, ПланыВидовХарактеристик.уатПраваИНастройки.ДопустимоеОтклонениеОтВремениПрибытия);
	РассчитыватьФактическиеПростоиОпоздания = Константы.уатУчетПланФактаПоМаршрутуВПутевыхЛистах.Получить();
	
	Для Каждого ТекЭтапЗадания из мЭтапыЗадания Цикл
		// выбираем строки для каждого этапа задания
		мСтрокиЗадания = Задание.НайтиСтроки(Новый Структура("НомерЕздки, Выполнено", ТекЭтапЗадания.НомерЕздки, Истина));
		
		// Вес, объем груза, количество ездок для номера этапа <> 0 (учет по этапам ведется)
		// для разных строк с одинаковым номером этапа либо суммируем, либо выбираем максимальное значение
		Если ТекЭтапЗадания.НомерЕздки <> 0 И мСтрокиЗадания.Количество() > 1 Тогда
			
			// Сначала - расчет максимальных значений для тех параметров выработки, для которых считается максимум 
			// по строкам с одинаковым этапом
			мВесГруза = 0;
			мОбъем = 0;
			мКоличествоЕздок = 0;
			мПробегСГрузом = 0;
			мПробегПорожний = 0;
			мКоличествоОпераций = 0;
			мФактическоеВремяОпоздания = 0;
			мФактическоеВремяПростоя = 0;
			СоотвСпецРаботыМаксимум = Новый Соответствие;
			
			Для Каждого ТекСтрЗадание Из мСтрокиЗадания Цикл
				Если НЕ СуммированиеПоЭтапам.ВесГруза И мВесГруза < ТекСтрЗадание.КоличествоТонн * ТекСтрЗадание.КоличествоЕздок Тогда
					мВесГруза = ТекСтрЗадание.КоличествоТонн * ТекСтрЗадание.КоличествоЕздок;
				КонецЕсли;
				Если НЕ СуммированиеПоЭтапам.Объем И мОбъем < ТекСтрЗадание.Объем * ТекСтрЗадание.КоличествоЕздок Тогда
					мОбъем = ТекСтрЗадание.Объем * ТекСтрЗадание.КоличествоЕздок;
				КонецЕсли;
				Если НЕ СуммированиеПоЭтапам.КоличествоЕздок И мКоличествоЕздок < ТекСтрЗадание.КоличествоЕздок Тогда
					мКоличествоЕздок = ТекСтрЗадание.КоличествоЕздок;
				КонецЕсли;
				Если НЕ СуммированиеПоЭтапам.КоличествоОпераций И мКоличествоОпераций < ТекСтрЗадание.КоличествоОпераций Тогда
					мКоличествоОпераций = ТекСтрЗадание.КоличествоОпераций;
				КонецЕсли;
				
				// Фактическое время опоздания и простоя
				Если НЕ СуммированиеПоЭтапам.ФактическоеВремяОпоздания И РассчитыватьФактическиеПростоиОпоздания
					И ЗначениеЗаполнено(ТекСтрЗадание.ВремяПрибытияФакт) И ЗначениеЗаполнено(ТекСтрЗадание.ВремяПрибытия) Тогда
					ОпозданиеСекунд = ТекСтрЗадание.ВремяПрибытияФакт - ТекСтрЗадание.ВремяПрибытия;
					Если ОпозданиеСекунд > ДопустимоеВремяОпозданияСекунд Тогда
						мФактическоеВремяОпоздания = Макс(мФактическоеВремяОпоздания, уатОбщегоНазначения.уатВремяВЧЧ_ММ(ОпозданиеСекунд));
					КонецЕсли;
				КонецЕсли;
				Если НЕ СуммированиеПоЭтапам.ФактическоеВремяПростоя И РассчитыватьФактическиеПростоиОпоздания
					И ЗначениеЗаполнено(ТекСтрЗадание.ВремяУбытияФакт) И ЗначениеЗаполнено(ТекСтрЗадание.ВремяУбытия) Тогда
					ПростойСекунд = ТекСтрЗадание.ВремяУбытияФакт - ТекСтрЗадание.ВремяУбытия;
					Если ПростойСекунд > 0 Тогда
						мФактическоеВремяПростоя = Макс(мФактическоеВремяПростоя, уатОбщегоНазначения.уатВремяВЧЧ_ММ(ПростойСекунд));
					КонецЕсли;
				КонецЕсли;
				
				Для СчСпец = 1 По 5 Цикл
					Если ТекСтрЗадание["КоличествоСпецРаботы" + СчСпец] > 0 
						И ТекСтрЗадание["СпецРабота" + СчСпец].СпособРасчетаПоНомеруЭтапа = 1 Тогда
						СтруктураСпец = СоотвСпецРаботыМаксимум.Получить(ТекСтрЗадание["СпецРабота" + СчСпец]);
						Если СтруктураСпец = Неопределено Тогда
							СтруктураСпец = Новый Структура("Количество", 0);
						КонецЕсли;
						Если СтруктураСпец.Количество < ТекСтрЗадание["КоличествоСпецРаботы" + СчСпец] * ТекСтрЗадание.КоличествоЕздок Тогда
							СтруктураСпец.Количество = ТекСтрЗадание["КоличествоСпецРаботы" + СчСпец] * ТекСтрЗадание.КоличествоЕздок;
						КонецЕсли;
						СоотвСпецРаботыМаксимум.Вставить(ТекСтрЗадание["СпецРабота" + СчСпец], СтруктураСпец);
					КонецЕсли;
				КонецЦикла;
				
				// пробег
				Если Не СуммированиеПоЭтапам.ПробегСГрузомПассажирами И мПробегСГрузом < ТекСтрЗадание.КоличествоКмГруз * ТекСтрЗадание.КоличествоЕздок Тогда
					мПробегСГрузом = ТекСтрЗадание.КоличествоКмГруз * ТекСтрЗадание.КоличествоЕздок;
				КонецЕсли;
				Если Не СуммированиеПоЭтапам.ПробегПорожний И мПробегПорожний < ТекСтрЗадание.КоличествоКмПорожний * ТекСтрЗадание.КоличествоЕздок Тогда
					мПробегПорожний = ТекСтрЗадание.КоличествоКмПорожний * ТекСтрЗадание.КоличествоЕздок;
				КонецЕсли;
				
			КонецЦикла;
			
			// Теперь создаем новые строки (если необходимо - больше одной для данного этапа, с разными ссылочными аналитиками)
			Если ГруппироватьПоСсылочнымРеквизитам Тогда
				КолонкиГруппировок = "ВидПеревозки,	Контрагент, Маршрут, НаправлениеПеревозки, ОбъектСтроительства, Подразделение";
				СвернутыеСтроки = Задание.Выгрузить(мСтрокиЗадания);
				СвернутыеСтроки.Свернуть(КолонкиГруппировок);
			Иначе
				СвернутыеСтроки = Новый Массив;
				СвернутыеСтроки.Добавить(мСтрокиЗадания[0]);
			КонецЕсли;
			Для Каждого ТекСтрока Из СвернутыеСтроки Цикл
				Если ГруппироватьПоСсылочнымРеквизитам Тогда
					СтруктураПоиска = Новый Структура(КолонкиГруппировок);
					ЗаполнитьЗначенияСвойств(СтруктураПоиска, ТекСтрока);
					СтруктураПоиска.Вставить("НомерЕздки", мСтрокиЗадания[0].НомерЕздки);
					СтруктураПоиска.Вставить("Выполнено", Истина);
					НеСвернутыеСтроки = Задание.НайтиСтроки(СтруктураПоиска);
				Иначе
					НеСвернутыеСтроки = мСтрокиЗадания;
				КонецЕсли;
				
				НоваяСтрока = ЗаданиеСвернутое.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, НеСвернутыеСтроки[0]);
				Если СуммированиеПоЭтапам.ВесГруза Тогда
					НоваяСтрока.КоличествоТонн = 0;
				Иначе
					НоваяСтрока.КоличествоТонн = мВесГруза;
				КонецЕсли;
				Если СуммированиеПоЭтапам.Объем Тогда
					НоваяСтрока.Объем = 0;
				Иначе
					НоваяСтрока.Объем = мОбъем;
				КонецЕсли;
				Если СуммированиеПоЭтапам.КоличествоЕздок Тогда
					НоваяСтрока.КоличествоЕздок = 0;
				Иначе
					НоваяСтрока.КоличествоЕздок = мКоличествоЕздок;
				КонецЕсли;
				Если СуммированиеПоЭтапам.ПробегСГрузомПассажирами Тогда
					НоваяСтрока.КоличествоКмГруз = 0;
				Иначе
					НоваяСтрока.КоличествоКмГруз = мПробегСГрузом;
				КонецЕсли;
				Если СуммированиеПоЭтапам.ПробегПорожний Тогда
					НоваяСтрока.КоличествоКмПорожний = 0;
				Иначе
					НоваяСтрока.КоличествоКмПорожний = мПробегПорожний;
				КонецЕсли;
				Если СуммированиеПоЭтапам.КоличествоОпераций Тогда
					НоваяСтрока.КоличествоОпераций = 0;
				Иначе
					НоваяСтрока.КоличествоОпераций = мКоличествоОпераций;
				КонецЕсли;
				Если СуммированиеПоЭтапам.ФактическоеВремяОпоздания Тогда
					НоваяСтрока.ФактическоеВремяОпоздания = 0;
				Иначе
					НоваяСтрока.ФактическоеВремяОпоздания = мФактическоеВремяОпоздания;
				КонецЕсли;
				Если СуммированиеПоЭтапам.ФактическоеВремяПростоя Тогда
					НоваяСтрока.ФактическоеВремяПростоя = 0;
				Иначе
					НоваяСтрока.ФактическоеВремяПростоя = мФактическоеВремяПростоя;
				КонецЕсли;
				НоваяСтрока.КоличествоПассажиров = 0;
				НоваяСтрока.КоличествоЧасов = 0;
				НоваяСтрока.ТнКм = 0;
				НоваяСтрока.ОбъемКм = 0;
												
				// Суммируем спецработы
				СоотвСпецРаботыСуммирование = Новый Соответствие;
				Для Каждого ТекСтрокаНеСвернутая Из НеСвернутыеСтроки Цикл
					Для СчСпец = 1 По 5 Цикл
						Если ТекСтрокаНеСвернутая["КоличествоСпецРаботы" + СчСпец] > 0
							И ТекСтрокаНеСвернутая["СпецРабота" + СчСпец].СпособРасчетаПоНомеруЭтапа = 0 Тогда
							СтруктураСпец = СоотвСпецРаботыСуммирование.Получить(ТекСтрокаНеСвернутая["СпецРабота" + СчСпец]);
							Если СтруктураСпец = Неопределено Тогда
								СтруктураСпец = Новый Структура("Количество", 0);
							КонецЕсли;
							СтруктураСпец.Количество = СтруктураСпец.Количество + ТекСтрокаНеСвернутая["КоличествоСпецРаботы" + СчСпец] * ТекСтрокаНеСвернутая.КоличествоЕздок;
							СоотвСпецРаботыСуммирование.Вставить(ТекСтрокаНеСвернутая["СпецРабота" + СчСпец], СтруктураСпец);
						КонецЕсли;
					КонецЦикла;
				КонецЦикла;
				
				СчСпец = 0;
				Для Каждого ТекСоотвСпец Из СоотвСпецРаботыСуммирование Цикл	
					СчСпец = СчСпец + 1;
					Если СчСпец > 5 Тогда
						// Проверяем, нужно ли добавить еще колонки для спец. работ
						Если ЗаданиеСвернутое.Колонки.Найти("СпецРабота" + СчСпец) = Неопределено Тогда
							ЗаданиеСвернутое.Колонки.Добавить("КоличествоСпецРаботы" + СчСпец, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(7, 1)));
							ЗаданиеСвернутое.Колонки.Добавить("СпецРабота" + СчСпец, Новый ОписаниеТипов("СправочникСсылка.уатПараметрыВыработки"));
						КонецЕсли;
					КонецЕсли;
					НоваяСтрока["СпецРабота" + СчСпец] = ТекСоотвСпец.Ключ;
					НоваяСтрока["КоличествоСпецРаботы" + СчСпец] = ТекСоотвСпец.Значение.Количество;
					НоваяСтрока.КоличествоСпецработ = СчСпец;
				КонецЦикла;
				
				Для Каждого ТекСоотвСпец Из СоотвСпецРаботыМаксимум Цикл	
					СчСпец = СчСпец + 1;
					Если СчСпец > 5 Тогда
						// Проверяем, нужно ли добавить еще колонки для спец. работ
						Если ЗаданиеСвернутое.Колонки.Найти("СпецРабота" + СчСпец) = Неопределено Тогда
							ЗаданиеСвернутое.Колонки.Добавить("КоличествоСпецРаботы" + СчСпец, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(7, 1)));
							ЗаданиеСвернутое.Колонки.Добавить("СпецРабота" + СчСпец, Новый ОписаниеТипов("СправочникСсылка.уатПараметрыВыработки"));
						КонецЕсли;
					КонецЕсли;
					НоваяСтрока["СпецРабота" + СчСпец] = ТекСоотвСпец.Ключ;
					НоваяСтрока["КоличествоСпецРаботы" + СчСпец] = ТекСоотвСпец.Значение.Количество;
					НоваяСтрока.КоличествоСпецработ = СчСпец;
				КонецЦикла;
				
				// Суммируем прочие параметры
				мКоличествоЧасовВСекундах = 0;
				мКоличествоЧасовПрицеп1ВСекундах = 0;
				мКоличествоЧасовПрицеп2ВСекундах = 0;
				мПодачаВСекундах = 0;
				мФактическоеВремяОпозданияВСекундах = 0;
				мФактическоеВремяПростояВСекундах = 0;
				Для Каждого ТекСтрокаНеСвернутая Из НеСвернутыеСтроки Цикл
					Если СуммированиеПоЭтапам.ВесГруза Тогда
						НоваяСтрока.КоличествоТонн = НоваяСтрока.КоличествоТонн + ТекСтрокаНеСвернутая.КоличествоТонн * ТекСтрокаНеСвернутая.КоличествоЕздок;
					КонецЕсли;
					Если СуммированиеПоЭтапам.Объем Тогда
						НоваяСтрока.Объем = НоваяСтрока.Объем + ТекСтрокаНеСвернутая.Объем * ТекСтрокаНеСвернутая.КоличествоЕздок;
					КонецЕсли;
					Если СуммированиеПоЭтапам.КоличествоЕздок Тогда
						НоваяСтрока.КоличествоЕздок = НоваяСтрока.КоличествоЕздок + ТекСтрокаНеСвернутая.КоличествоЕздок;
					КонецЕсли;
					Если СуммированиеПоЭтапам.ПробегСГрузомПассажирами Тогда
						НоваяСтрока.КоличествоКмГруз = НоваяСтрока.КоличествоКмГруз + ТекСтрокаНеСвернутая.КоличествоКмГруз * ТекСтрокаНеСвернутая.КоличествоЕздок;
					КонецЕсли;
					Если СуммированиеПоЭтапам.ПробегПорожний Тогда
						НоваяСтрока.КоличествоКмПорожний = НоваяСтрока.КоличествоКмПорожний + ТекСтрокаНеСвернутая.КоличествоКмПорожний * ТекСтрокаНеСвернутая.КоличествоЕздок;
					КонецЕсли;
					Если СуммированиеПоЭтапам.КоличествоОпераций Тогда
						НоваяСтрока.КоличествоОпераций = НоваяСтрока.КоличествоОпераций + ТекСтрокаНеСвернутая.КоличествоОпераций;
					КонецЕсли;
					
					// Суммирование временных параметров
					мКоличествоЧасовВСекундах        = мКоличествоЧасовВСекундах        + уатОбщегоНазначения.уатВремяВСекунды(ТекСтрокаНеСвернутая.КоличествоЧасов);
					мКоличествоЧасовПрицеп1ВСекундах = мКоличествоЧасовПрицеп1ВСекундах + уатОбщегоНазначения.уатВремяВСекунды(ТекСтрокаНеСвернутая.КоличествоЧасовПрицеп1);
					мКоличествоЧасовПрицеп2ВСекундах = мКоличествоЧасовПрицеп2ВСекундах + уатОбщегоНазначения.уатВремяВСекунды(ТекСтрокаНеСвернутая.КоличествоЧасовПрицеп2);
					мПодачаВСекундах                 = мПодачаВСекундах                 + уатОбщегоНазначения.уатВремяВСекунды(ТекСтрокаНеСвернутая.Подача);
					
					// Фактическое время опоздания и простоя
					Если СуммированиеПоЭтапам.ФактическоеВремяОпоздания И РассчитыватьФактическиеПростоиОпоздания
						И ЗначениеЗаполнено(ТекСтрокаНеСвернутая.ВремяПрибытияФакт) И ЗначениеЗаполнено(ТекСтрокаНеСвернутая.ВремяПрибытия) Тогда
						ОпозданиеСекунд = ТекСтрокаНеСвернутая.ВремяПрибытияФакт - ТекСтрокаНеСвернутая.ВремяПрибытия;
						Если ОпозданиеСекунд > ДопустимоеВремяОпозданияСекунд Тогда
							мФактическоеВремяОпозданияВСекундах = мФактическоеВремяОпозданияВСекундах + ОпозданиеСекунд;
						КонецЕсли;
					КонецЕсли;
					Если СуммированиеПоЭтапам.ФактическоеВремяПростоя И РассчитыватьФактическиеПростоиОпоздания
						И ЗначениеЗаполнено(ТекСтрокаНеСвернутая.ВремяУбытияФакт) И ЗначениеЗаполнено(ТекСтрокаНеСвернутая.ВремяУбытия) Тогда
						ПростойСекунд = ТекСтрокаНеСвернутая.ВремяУбытияФакт - ТекСтрокаНеСвернутая.ВремяУбытия;
						Если ПростойСекунд > 0 Тогда
							мФактическоеВремяПростояВСекундах = мФактическоеВремяПростояВСекундах + ПростойСекунд;
						КонецЕсли;
					КонецЕсли;
					
					НоваяСтрока.КоличествоПассажиров = НоваяСтрока.КоличествоПассажиров + ТекСтрокаНеСвернутая.КоличествоПассажиров;
					
					НоваяСтрока.ТнКм = НоваяСтрока.ТнКм + ТекСтрокаНеСвернутая.КоличествоТонн * ТекСтрокаНеСвернутая.КоличествоКмГруз * ТекСтрокаНеСвернутая.КоличествоЕздок;
					НоваяСтрока.ОбъемКм = НоваяСтрока.ОбъемКм + ТекСтрокаНеСвернутая.Объем * ТекСтрокаНеСвернутая.КоличествоКмГруз * ТекСтрокаНеСвернутая.КоличествоЕздок;
				КонецЦикла;
				НоваяСтрока.КоличествоЧасов        = уатОбщегоНазначения.уатВремяВЧЧ_ММ(мКоличествоЧасовВСекундах);
				НоваяСтрока.КоличествоЧасовПрицеп1 = уатОбщегоНазначения.уатВремяВЧЧ_ММ(мКоличествоЧасовПрицеп1ВСекундах);
				НоваяСтрока.КоличествоЧасовПрицеп2 = уатОбщегоНазначения.уатВремяВЧЧ_ММ(мКоличествоЧасовПрицеп2ВСекундах);
				НоваяСтрока.Подача                 = уатОбщегоНазначения.уатВремяВЧЧ_ММ(мПодачаВСекундах);
				Если СуммированиеПоЭтапам.ФактическоеВремяОпоздания Тогда
					НоваяСтрока.ФактическоеВремяОпоздания = уатОбщегоНазначения.уатВремяВЧЧ_ММ(мФактическоеВремяОпозданияВСекундах);
				КонецЕсли;
				Если СуммированиеПоЭтапам.ФактическоеВремяПростоя Тогда
					НоваяСтрока.ФактическоеВремяПростоя = уатОбщегоНазначения.уатВремяВЧЧ_ММ(мФактическоеВремяПростояВСекундах);
				КонецЕсли;
			КонецЦикла;
		Иначе
			Для Каждого ТекСтрЗадание Из мСтрокиЗадания Цикл
				НоваяСтрока = ЗаданиеСвернутое.Добавить();
				ИсключаемыеСвойства = "СпецРабота1, СпецРабота2, СпецРабота3, СпецРабота4, СпецРабота5, 
					|КоличествоСпецРаботы1, КоличествоСпецРаботы2, КоличествоСпецРаботы3, КоличествоСпецРаботы4, КоличествоСпецРаботы5";
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрЗадание,,ИсключаемыеСвойства);
				
				// Те параметры выработки, которые умножаются на количество ездок, умножаются на него здесь.
				НоваяСтрока.КоличествоКмГруз = ТекСтрЗадание.КоличествоКмГруз * ТекСтрЗадание.КоличествоЕздок;
				НоваяСтрока.КоличествоКмПорожний = ТекСтрЗадание.КоличествоКмПорожний * ТекСтрЗадание.КоличествоЕздок;
				НоваяСтрока.ТнКм = ТекСтрЗадание.КоличествоТонн * ТекСтрЗадание.КоличествоКмГруз * ТекСтрЗадание.КоличествоЕздок;
				НоваяСтрока.ОбъемКм = ТекСтрЗадание.Объем * ТекСтрЗадание.КоличествоКмГруз * ТекСтрЗадание.КоличествоЕздок;
				НоваяСтрока.КоличествоТонн = ТекСтрЗадание.КоличествоТонн * ТекСтрЗадание.КоличествоЕздок;
				НоваяСтрока.Объем = ТекСтрЗадание.Объем * ТекСтрЗадание.КоличествоЕздок;
				
				// Фактическое время опоздания и простоя
				Если РассчитыватьФактическиеПростоиОпоздания
					И ЗначениеЗаполнено(НоваяСтрока.ВремяПрибытияФакт) И ЗначениеЗаполнено(НоваяСтрока.ВремяПрибытия) Тогда
					ОпозданиеСекунд = НоваяСтрока.ВремяПрибытияФакт - НоваяСтрока.ВремяПрибытия;
					Если ОпозданиеСекунд > ДопустимоеВремяОпозданияСекунд Тогда
						НоваяСтрока.ФактическоеВремяОпоздания = уатОбщегоНазначения.уатВремяВЧЧ_ММ(ОпозданиеСекунд);
					КонецЕсли;
				КонецЕсли;
				Если РассчитыватьФактическиеПростоиОпоздания
					И ЗначениеЗаполнено(НоваяСтрока.ВремяУбытияФакт) И ЗначениеЗаполнено(НоваяСтрока.ВремяУбытия) Тогда
					ПростойСекунд = НоваяСтрока.ВремяУбытияФакт - НоваяСтрока.ВремяУбытия;
					Если ПростойСекунд > 0 Тогда
						НоваяСтрока.ФактическоеВремяПростоя = уатОбщегоНазначения.уатВремяВЧЧ_ММ(ПростойСекунд);
					КонецЕсли;
				КонецЕсли;
				
				// Спец. работы
				// Соответствие спецработ используется, чтобы спецработы имели номера от 1 до НоваяСтрока.КоличествоСпецРабот
				СоотвСпецРаботы = Новый Соответствие;
				Для СчСпец = 1 По 5 Цикл
					Если ТекСтрЗадание["КоличествоСпецРаботы" + СчСпец] > 0 Тогда
						СтруктураСпец = СоотвСпецРаботы.Получить(ТекСтрЗадание["СпецРабота" + СчСпец]);
						Если СтруктураСпец = Неопределено Тогда
							СтруктураСпец = Новый Структура("Количество", 0);
						КонецЕсли;
						СтруктураСпец.Количество = СтруктураСпец.Количество + ТекСтрЗадание["КоличествоСпецРаботы" + СчСпец] * ТекСтрЗадание.КоличествоЕздок;
						СоотвСпецРаботы.Вставить(ТекСтрЗадание["СпецРабота" + СчСпец], СтруктураСпец);
					КонецЕсли;
				КонецЦикла;
				
				СчСпец = 0;
				Для Каждого ТекСоотвСпец Из СоотвСпецРаботы Цикл	
					СчСпец = СчСпец + 1;
					НоваяСтрока["СпецРабота" + СчСпец] = ТекСоотвСпец.Ключ;
					НоваяСтрока["КоличествоСпецРаботы" + СчСпец] = ТекСоотвСпец.Значение.Количество;
					НоваяСтрока.КоличествоСпецработ = СчСпец;
				КонецЦикла;
				
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЗаданиеСвернутое;
	
КонецФункции

Функция ПараметрыВыработкиСуммированиеПоЭтапам()
	Результат = Справочники.уатПараметрыВыработки.ПараметрыВыработкиСуммированиеПоЭтапам();
	ПараметрВыработкиПробегСГрузом = ПолучитьПараметрВыработкиПробегСГрузомПассажирами();
	Если ПараметрВыработкиПробегСГрузом = Справочники.уатПараметрыВыработки.ПробегСГрузом Тогда
		Результат.Вставить("ПробегСГрузомПассажирами", Результат.ПробегСГрузом);
	Иначе
		Результат.Вставить("ПробегСГрузомПассажирами", Результат.ПробегСПассажирами);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция ПолучитьПараметрВыработкиПробегСГрузомПассажирами()
	Если (ВидПЛ = Перечисления.уатВидыПЛ._3 Или ВидПЛ = Перечисления.уатВидыПЛ._ПА1
		Или ВидПЛ = Перечисления.уатВидыПЛ._6 Или ВидПЛ = Перечисления.уатВидыПЛ._6С) Тогда
		ПараметрВыработкиПробегСГрузомПассажирами = Справочники.уатПараметрыВыработки.ПробегСПассажирами;
	Иначе
		ПараметрВыработкиПробегСГрузомПассажирами = Справочники.уатПараметрыВыработки.ПробегСГрузом;
	КонецЕсли;
	Возврат ПараметрВыработкиПробегСГрузомПассажирами;
КонецФункции

// Функция получает значение одного параметра выработки по строке свернутой по этапам ТЧ Задание.
// Используется при расчете ЗП.
Функция ПолучитьВыработкуПоСтрокеЗаданияСвернутого(ПараметрВыработки, ТекСтрокаЗадания)
	
	// время в работе
	Если ПараметрВыработки = Справочники.уатПараметрыВыработки.ВремяВРаботе И ТекСтрокаЗадания.КоличествоЧасов > 0 Тогда
		мКоличество = уатОбщегоНазначения.уатВремяВСекунды(ТекСтрокаЗадания.КоличествоЧасов)/3600;
		
	// вес груза
	ИначеЕсли ПараметрВыработки = Справочники.уатПараметрыВыработки.ВесГруза И ТекСтрокаЗадания.КоличествоТонн > 0 Тогда
		мКоличество = ТекСтрокаЗадания.КоличествоТонн;
				
	// объем
	ИначеЕсли ПараметрВыработки = Справочники.уатПараметрыВыработки.Объем И ТекСтрокаЗадания.Объем > 0 Тогда
		мКоличество = ТекСтрокаЗадания.Объем;
		
	// количество ездок
	ИначеЕсли ПараметрВыработки = Справочники.уатПараметрыВыработки.КоличествоЕздок И ТекСтрокаЗадания.КоличествоЕздок > 0 Тогда
		мКоличество = ТекСтрокаЗадания.КоличествоЕздок;
				
	// количество операций
	ИначеЕсли ПараметрВыработки = Справочники.уатПараметрыВыработки.КоличествоОпераций И ТекСтрокаЗадания.КоличествоОпераций > 0 Тогда
		мКоличество = ТекСтрокаЗадания.КоличествоОпераций;
		
	// количество пассажиров
	ИначеЕсли ПараметрВыработки = Справочники.уатПараметрыВыработки.КоличествоПассажиров И ТекСтрокаЗадания.КоличествоПассажиров > 0 Тогда
		мКоличество = ТекСтрокаЗадания.КоличествоПассажиров;
		
	// подача
	ИначеЕсли ПараметрВыработки = Справочники.уатПараметрыВыработки.Подача И ТекСтрокаЗадания.Подача > 0 Тогда
		мКоличество = уатОбщегоНазначения.уатВремяВСекунды(ТекСтрокаЗадания.Подача)/3600;
		
	// пробег порожний
	ИначеЕсли ПараметрВыработки = Справочники.уатПараметрыВыработки.ПробегПорожний И ТекСтрокаЗадания.КоличествоКмПорожний > 0 Тогда
		мКоличество = ТекСтрокаЗадания.КоличествоКмПорожний;
				
	// пробег с грузом/пассажирами
	ИначеЕсли (ПараметрВыработки = Справочники.уатПараметрыВыработки.ПробегСГрузом
		ИЛИ ПараметрВыработки = Справочники.уатПараметрыВыработки.ПробегСПассажирами)
		И ТекСтрокаЗадания.КоличествоКмГруз > 0 Тогда
		мКоличество = ТекСтрокаЗадания.КоличествоКмГруз;
				
	// тн*км
	ИначеЕсли ПараметрВыработки = Справочники.уатПараметрыВыработки.ТнКм И ТекСтрокаЗадания.ТнКм > 0 Тогда
		мКоличество = ТекСтрокаЗадания.ТнКм;
		
	// объем*км
	ИначеЕсли ПараметрВыработки = Справочники.уатПараметрыВыработки.ОбъемКм И ТекСтрокаЗадания.ОбъемКм Тогда
		мКоличество = ТекСтрокаЗадания.ОбъемКм;
		
	ИначеЕсли НЕ ПараметрВыработки.Предопределенный
		И ПараметрВыработки.СпособРасчетаПараметровВыработки = Перечисления.уатСпособРасчетаПараметровВыработки.ПоЗаданию
		И ПараметрВыработки.ДействуетНаСотрудников Тогда
		
		ЗначениеПараметра = ВычислитьПроизвольныйПараметрВыработки(ПараметрВыработки, ТекСтрокаЗадания);
		Если ЗначениеПараметра = "ошибка" Тогда
			мКоличество = 0;
		Иначе
			Если ПараметрВыработки.Временный Тогда
				мКоличество = ЗначениеПараметра / 3600;
			Иначе
				мКоличество = ЗначениеПараметра;
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		мКоличество = 0;
		
	КонецЕсли;
	
	// Спец. работы
	мКоличество = мКоличество + ПолучитьВыработкуСпецработыПоСтрокеЗаданияСвернутого(ПараметрВыработки, ТекСтрокаЗадания);
	
	Возврат мКоличество;
	
КонецФункции

// Функция получает значение одного параметра выработки по спецработам 
// из строки документа Путевой лист (ТЧ Задание) или документа ТТД (ТЧ Выработка).
// Используется при расчете ЗП.
Функция ПолучитьВыработкуСпецработыПоСтрокеЗаданияСвернутого(ПараметрВыработки, ТекСтрокаЗадания)
	
	мКоличество = 0;
	
	Для Сч = 1 По ТекСтрокаЗадания.КоличествоСпецработ Цикл
		Если ПараметрВыработки = ТекСтрокаЗадания["СпецРабота"+Сч] И ТекСтрокаЗадания["КоличествоСпецРаботы"+Сч] > 0 Тогда
			Если ПараметрВыработки.Временный Тогда
				мКоличество = мКоличество + ТекСтрокаЗадания["КоличествоСпецРаботы"+Сч] / 3600;
			Иначе
				мКоличество = мКоличество + ТекСтрокаЗадания["КоличествоСпецРаботы"+Сч];
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
		
	Возврат мКоличество;
	
КонецФункции

Функция ПроизвольныеПараметрыВыработкиТТД(мсвТТД)
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	уатТТДВыработка.ПараметрВыработки КАК ПараметрВыработки,
	|	уатТТДВыработка.СпецРабота1 КАК СпецРабота1,
	|	уатТТДВыработка.СпецРабота2 КАК СпецРабота2,
	|	уатТТДВыработка.СпецРабота3 КАК СпецРабота3,
	|	уатТТДВыработка.СпецРабота4 КАК СпецРабота4,
	|	уатТТДВыработка.СпецРабота5 КАК СпецРабота5
	|ПОМЕСТИТЬ втПараметрыВыработки
	|ИЗ
	|	Документ.уатТТД.Выработка КАК уатТТДВыработка
	|ГДЕ
	|	уатТТДВыработка.Ссылка В(&мсвТТД)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПараметрыВыработки.ПараметрВыработки КАК ПараметрВыработки
	|ПОМЕСТИТЬ втПараметрыВыработкиДляСвертки
	|ИЗ
	|	втПараметрыВыработки КАК втПараметрыВыработки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втПараметрыВыработки.СпецРабота1
	|ИЗ
	|	втПараметрыВыработки КАК втПараметрыВыработки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втПараметрыВыработки.СпецРабота2
	|ИЗ
	|	втПараметрыВыработки КАК втПараметрыВыработки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втПараметрыВыработки.СпецРабота3
	|ИЗ
	|	втПараметрыВыработки КАК втПараметрыВыработки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втПараметрыВыработки.СпецРабота4
	|ИЗ
	|	втПараметрыВыработки КАК втПараметрыВыработки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втПараметрыВыработки.СпецРабота5
	|ИЗ
	|	втПараметрыВыработки КАК втПараметрыВыработки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПараметрыВыработкиДляСвертки.ПараметрВыработки КАК ПараметрВыработки
	|ИЗ
	|	втПараметрыВыработкиДляСвертки КАК втПараметрыВыработкиДляСвертки
	|
	|СГРУППИРОВАТЬ ПО
	|	втПараметрыВыработкиДляСвертки.ПараметрВыработки");
	Запрос.УстановитьПараметр("мсвТТД", мсвТТД);
	мсвПроизвольныеПараметрыВыработки = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ПараметрВыработки");
	Возврат мсвПроизвольныеПараметрыВыработки;
КонецФункции

Процедура ЗаписатьВыработкуСотрудникаРабочееВремя(мСотрудник, флЗамещать = Ложь)
	мВремяДеньСотрудника = 0;
	мВремяНочьСотрудника = 0;
	мВремяВыходнойСотрудника = 0;
	мВремяПраздникСотрудника = 0;
	мВремяВРаботеСотрудника = 0;
	Для Каждого ТекСтрока Из ФактическиОтработанноеВремя Цикл
		Если ТекСтрока.Сотрудник = мСотрудник Тогда
			мВремяДеньСотрудника = мВремяДеньСотрудника + ТекСтрока.ВремяДневное;
			мВремяНочьСотрудника = мВремяНочьСотрудника + ТекСтрока.ВремяНочное;
			мВремяВРаботеСотрудника = мВремяВРаботеСотрудника + ТекСтрока.ВремяДневное + ТекСтрока.ВремяНочное;
			
			флПраздник = уатПутевыеЛисты.ПраздникПоГрафику(ТекСтрока.Сотрудник, Организация, ТекСтрока.Дата);
			Если флПраздник Тогда
				мВремяПраздникСотрудника = мВремяПраздникСотрудника + ТекСтрока.ВремяДневное + ТекСтрока.ВремяНочное;
			Иначе
				флВыходной = уатПутевыеЛисты.ВыходнойПоГрафику(ТекСтрока.Сотрудник, Организация, ТекСтрока.Дата);
				Если флВыходной Тогда
					мВремяВыходнойСотрудника = мВремяВыходнойСотрудника + ТекСтрока.ВремяДневное + ТекСтрока.ВремяНочное;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// время в наряде
	ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ВремяВНаряде, мВремяВНаряде,, флЗамещать, флЗамещать);
	
	// время в работе
	ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ВремяВРаботе, мВремяВРаботеСотрудника,, флЗамещать, флЗамещать);
	
	// время в работе в выходной
	ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ВремяРаботыВВыходныеДни, мВремяВыходнойСотрудника,, флЗамещать, флЗамещать);
	
	// время в работе в праздник
	ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ВремяПраздничное, мВремяПраздникСотрудника,, флЗамещать, флЗамещать);
	
	// время дневное
	ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ВремяДневное, мВремяДеньСотрудника,, флЗамещать, флЗамещать);
	
	// время ночное
	ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, Справочники.уатПараметрыВыработки.ВремяНочное, мВремяНочьСотрудника,, флЗамещать, флЗамещать);
КонецПроцедуры

#КонецОбласти


#Область Инициализация

ДанныеИзменились = Ложь;

#КонецОбласти

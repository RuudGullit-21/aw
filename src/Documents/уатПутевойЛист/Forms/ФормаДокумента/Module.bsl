
#Область ПеременныеФормы

&НаКлиенте
Перем ПрицепОлд;
&НаКлиенте
Перем ПрицепЗадание1Олд;
&НаКлиенте
Перем ПрицепЗадание2Олд;
&НаКлиенте
Перем ПредупреждениеПревышениеУровняТопливаВБаке;
&НаКлиенте
Перем мсвСпецработы;
&НаКлиенте
Перем ДопПараметрыОбработчикОжидания;
&НаКлиенте
Перем СоответвиеПЛЭД;

#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Если уатЖурналыТранспортныхДокументов.ЗапретОткрытияФормыОбъекта(Отказ, СтандартнаяОбработка,
		Метаданные.Документы.уатПутевойЛист) Тогда
		Возврат;
	КонецЕсли;
	
	уатЗащищенныеФункцииСервер.уатДокументФормаЭлементаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, Объект, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	СгруппироватьКомандыПечати();
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	УстановитьВидПодменюКарты();
	
	Если ЗначениеЗаполнено(Параметры.Основание) И ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.уатМаршрутныйЛист") Тогда 
		ЗаполнитьЗаданиеПоДаннымМЛ(Параметры.Основание);
		мМаршрутныйЛистОснование = Параметры.Основание;
	КонецЕсли;
	
	ПараметрОбъектКопирования = Параметры.ЗначениеКопирования;
	мКопированиеДокумента = ЗначениеЗаполнено(ПараметрОбъектКопирования);
	ИспользоватьОбменЭД   = ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭД"); 
	
	// Установка реквизитов формы.
	Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
		Объект.Дата = ТекущаяДата();
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда 
		Если НЕ ЗначениеЗаполнено(Объект.ДатаЗакрытия) Тогда
			Объект.ДатаЗакрытия = ТекущаяДата();
		КонецЕсли;
		
		Объект.Рассчитан = Ложь;
		
		СтруктураОбъектовНастроек = Новый Структура;
		СтруктураОбъектовНастроек.Вставить("Организация", Объект.Организация);
		СтруктураОбъектовНастроек.Вставить("Подразделение", ПодразделениеНастройки());
		СтруктураОбъектовНастроек.Вставить("Пользователь", ПользователиКлиентСервер.АвторизованныйПользователь());
		
		СтруктураОбъектовНастроекБезПользовательскихНастроек = Новый Структура;
		СтруктураОбъектовНастроекБезПользовательскихНастроек.Вставить("Организация", Объект.Организация);
		СтруктураОбъектовНастроекБезПользовательскихНастроек.Вставить("Подразделение", ПодразделениеНастройки());
		
		Если Объект.ВидПЛ.Пустая() Тогда
			Объект.ВидПЛ = ПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, ПланыВидовХарактеристик.уатПраваИНастройки.ОсновнойВидПЛ);
		КонецЕсли;
		Если Объект.РежимРасчетаВыработки.Пустая() Тогда
			Объект.РежимРасчетаВыработки = ПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек,
				ПланыВидовХарактеристик.уатПраваИНастройки.ОсновнойРежимРасчетаВыработкиПЛ);
		КонецЕсли;
			
	Иначе
		Элементы.ФормаПроверитьДокументы.Доступность = Истина;
		
	КонецЕсли;
	
	// отбор списка ТТД
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТТД, "ПутЛист", Объект.Ссылка); 
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЭлектронныеПеревозочныеДокументы, "Рейс", Объект.Ссылка);
	Если Объект.Ссылка.Пустая() Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(ТТД.Отбор, "Ссылка", Документы.уатТТД.ПустаяСсылка());
	КонецЕсли;
	
	РедактироватьЗаправкуГСМВДиалоге = ХранилищеОбщихНастроек.Загрузить("Документ.уатПутевойЛист",
		"РедактироватьЗаправкуГСМВДиалоге");
	РедактироватьСливГСМВДиалоге = ХранилищеОбщихНастроек.Загрузить("Документ.уатПутевойЛист",
		"РедактироватьСливГСМВДиалоге");
		
	мМакет = ХранилищеОбщихНастроек.Загрузить("Документ.уатПутевойЛист", "ПечатнаяФорма");
	
	ВидПЛДоИзменения = Объект.ВидПЛ;

	уатОбщегоНазначенияСервер.НастроитьПолеПодразделение(Элементы.Подразделение, "Объект.Организация");
	уатОбщегоНазначенияСервер.НастроитьПолеПодразделение(Элементы.ЗаданиеПодразделение, "Объект.Организация");
	уатОбщегоНазначенияСервер.НастроитьПолеПодразделение(Элементы.ВыработкаТСПодразделение, "Объект.Организация");
	уатОбщегоНазначенияСервер.НастроитьПолеПодразделение(Элементы.ВыработкаСотрудниковПодразделение, "Объект.Организация");
	Если НЕ ПравоДоступа("Редактирование", Метаданные.Документы.уатПутевойЛист) Тогда
		Элементы.ОстатокТопливаВыезд.ТолькоПросмотр = Истина;
		Элементы.ОстатокТопливаВозврат.ТолькоПросмотр = Истина;
		Элементы.ВыработкаТСсводная.ТолькоПросмотр = Истина;
		Элементы.ВыработкаСотрудниковСводная.ТолькоПросмотр = Истина;
		Элементы.ЗарплатаСводная.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	АвтомобильОлд = Объект.ТранспортноеСредство;
	
	Если Объект.Ссылка.Пустая() Тогда 
		Если ЗначениеЗаполнено(Объект.Организация) Тогда
			ПриИзмененииОрганизации(Истина);
		КонецЕсли;
		
		Если Объект.ДатаВыезда = '00010101' И Объект.ДатаВозвращения = '00010101' Тогда
			УстановитьДатыВыездаВозвращения();
		КонецЕсли;
		
		// Было копирование п/л или ввод на основании
		Если ЗначениеЗаполнено(Объект.ТранспортноеСредство) Тогда
			АвтомобильОлд = Неопределено;
			ИнициализацияДанныхАвтомобиляСервер(Ложь);
		КонецЕсли;
		
		Если Объект.ВидПЛ.Пустая() Тогда
			СтруктураОбъектовНастроек = Новый Структура;
			СтруктураОбъектовНастроек.Вставить("Организация", Объект.Организация);
			СтруктураОбъектовНастроек.Вставить("Подразделение", ПодразделениеНастройки());
			СтруктураОбъектовНастроек.Вставить("Пользователь", ПользователиКлиентСервер.АвторизованныйПользователь());
			Объект.ВидПЛ = ПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ОсновнойВидПЛ"));
		КонецЕсли;
		
		УстановитьДействителенДоПоУмолчанию();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ТранспортноеСредство) Тогда 
		МодельТС = ПолучитьЗначениеРеквизита(Объект.ТранспортноеСредство, "Модель");
		Если ЗначениеЗаполнено(МодельТС) Тогда
			Если ПолучитьЗначениеРеквизита(МодельТС, "НаличиеСпидометра") Тогда
				Элементы.СпидометрВыезда.Заголовок = НСтр("en='Odometer';ru='Одометр'");
				Элементы.РасходГСМПробег.Заголовок = НСтр("en='Mileage, km';ru='Пробег, км'");
			Иначе
				Элементы.СпидометрВыезда.Заголовок = НСтр("en='Counter m/h';ru='Счетчик м/ч'");
				Элементы.РасходГСМПробег.Заголовок = НСтр("en='Result, m/h';ru='Наработка, м/ч'");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.НомерПачки.Видимость = ПолучитьПраваИНастройкиПользователя(Объект.Организация,
		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ИспользоватьУчетПутЛистовПоПачкам"));
	
	Элементы.ПланЗатрат.Видимость = ПолучитьФункциональнуюОпцию("уатИспользоватьУчетДоходовИРасходов");
		
	ВывестиТаблицуВыработкаСотрудников();
	ВывестиТаблицуВыработкаТС();
	
	ВывестиТаблицуЗаправокСервер();
	ВывестиТаблицуСливовСервер();
	Элементы.РасходГСМПробег.Видимость             = Объект.РаботаНаДвухВидахТоплива;
	Элементы.ПереключательДваВидаТоплива.Видимость = Объект.РаботаНаДвухВидахТоплива;
	Элементы.РаботаНаДвухВидахТоплива.Заголовок    = ?(Объект.РаботаНаДвухВидахТоплива,
		"Два вида топлива:", "Два вида топлива");
	
	ПроцентИзмененияНормыТемпература = Строка(уатПутевыеЛисты.уатПолучитьКоэффициентИзмененияНормыДляТемпературы(Объект.Температура)) + "%";
	УстановитьФорматированиеТочностиОстатковГСМ();
	
	Если НЕ Объект.Рассчитан Тогда
		ПересчетВыданногоГСМСервер();
		ПересчетСданногоГСМСервер();
	КонецЕсли;
	Для Каждого ТекСтрока Из Объект.РасходГСМ Цикл
		Если Объект.ТранспортноеСредство = ТекСтрока.ТС Тогда
			ОстатокТопливаВыезд = ТекСтрока.ОстатокПриВыезде;
			ОстатокТопливаВозврат = ТекСтрока.ОстатокПриВозвращении;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	ОбновитьДинамическиеКолонкиРасходГСМ();
	ВывестиТаблицуЗП(ЭтотОбъект);
	
	ВремяРаботыОтопителя = уатОбщегоНазначения.уатВремяВЧЧ_ММ(Объект.ВремяРаботыОтопителя);
	
	НастроитьВидимостьВыработки();
	
	Элементы.ВидПЛ.СписокВыбора.Очистить();
	Для Каждого ТекВидПЛ Из уатПутевыеЛисты.уатВидыПЛ() Цикл
		Элементы.ВидПЛ.СписокВыбора.Добавить(ТекВидПЛ.Значение, ТекВидПЛ.Представление);
	КонецЦикла;
	
	Элементы.РедактироватьЗаправкуГСМВДиалоге.Пометка = РедактироватьЗаправкуГСМВДиалоге;
	Элементы.РедактироватьСливГСМВДиалоге.Пометка = РедактироватьСливГСМВДиалоге;
	Элементы.ЗаправкиГСМНомер.ТолькоПросмотр = НЕ РедактироватьЗаправкуГСМВДиалоге;
	Элементы.СливыГСМНомер.ТолькоПросмотр = НЕ РедактироватьСливГСМВДиалоге;
	
	Элементы.ЗаправкиГСМВидЗаправки.СписокВыбора.Очистить();
	Для Каждого ТекВидЗаправки Из уатОбщегоНазначения.СписокВидовЗаправок() Цикл
		Элементы.ЗаправкиГСМВидЗаправки.СписокВыбора.Добавить(ТекВидЗаправки.Значение, ТекВидЗаправки.Представление);
	КонецЦикла;
	
	УстановитьДоступностьРассчитанногоДокумента();
		
	Если Не ПравоДоступаИзменениеЗаправкиГСМ() Тогда
		Элементы.ЗаправкиГСМ.ТолькоПросмотр = Истина;
		Элементы.РедактироватьЗаправкуГСМВДиалоге.Доступность = Ложь;
		Элементы.ЗаправкиГСМДобавитьСуществующуюЗаправку.Доступность = Ложь;
	КонецЕсли;
	
	Если Не ПравоДоступаИзменениеСливыГСМ() Тогда
		Элементы.СливыГСМ.ТолькоПросмотр = Истина;
		Элементы.РедактироватьСливГСМВДиалоге.Доступность = Ложь;
	КонецЕсли;
	
	ОбновитьНадписьРассчитанСервер();
	СформироватьСписокВыбораТСвЗаправкахГСМСервер();
	ОбновитьСписокВыбораЭкипажаСервер();
	
	// Обновим картинки просроченных документов
	ОбновитьФлагПросроченныхДокументовТС();
	ОбновитьФлагПросроченныхДокументовВодителей();
	
	// ++ проф/корп
	Если НЕ Константы.уатИспользоватьOmnicomm.Получить()
			И НЕ Константы.уатИспользоватьWialon.Получить()
			И НЕ Константы.уатИспользоватьАвтоГРАФ.Получить()
			И НЕ Константы.уатИспользоватьСКАУТ.Получить()
			// ITOB +++
			И НЕ Константы.уатИспользоватьЦСМ.Получить() Тогда
			// ITOB ---
			
		Элементы.ФормаЗаполнитьПоМониторингуПриВыезде.Видимость = Ложь;
		Элементы.ФормаЗаполнитьПоМониторингуПриВозврате.Видимость = Ложь;
		Если Константы.уатИспользоватьМониторинг.Получить() И уатРаботаСРасширениями.ПСМ_ПроверитьПодключение() Тогда
			Элементы.ФормаЗаполнитьПоМониторингуПриВозврате.Видимость = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если (НЕ Константы.уатИспользоватьЦСМ.Получить()
		ИЛИ (НЕ РольДоступна("ItobАдминистраторМониторинга")
		И НЕ РольДоступна("ПолныеПрава"))) Тогда
		Элементы.ЗаданиеЗаполнитьЗаданиеПоДаннымGPS.Видимость = Ложь;
	КонецЕсли;
	
	ВывестиТаблицуБилетыСервер();
	ВывестиТаблицуВыручкиСервер();
	ВывестиТаблицуПосВедСервер();
	
	Если ПолучитьФункциональнуюОпцию("уатИспользоватьУчетДоходовИРасходов") = ЛОЖЬ Тогда
		Элементы.ГруппаПрочиеРасходы.Видимость = Ложь;
	КонецЕсли;
	
	УчетЗаказовВПЛ = ПолучитьФункциональнуюОпцию("уатУчетЗаказовНаТСвПутевыхЛистах");
	ИспользоватьЖурналыТранспортныхДокументов = ПолучитьФункциональнуюОпцию("уатИспользоватьЖурналыТранспортныхДокументов");
	флИспользоватьПланФактВремени = Константы.уатУчетПланФактаПоМаршрутуВПутевыхЛистах.Получить();
		
	Если ИспользоватьЖурналыТранспортныхДокументов И Объект.Ссылка.Пустая() И НЕ ЗначениеЗаполнено(Объект.Журнал) Тогда
		СтруктураНастройки = Новый Структура("Организация, Подразделение", Объект.Организация, Объект.Подразделение);
		Объект.Журнал = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураНастройки,
			ПланыВидовХарактеристик.уатПраваИНастройки.ОсновнойЖурналУчетаДвиженияПутевыхЛистов);
	КонецЕсли;
		
	ОбновитьКэшПравПоGPS();
	Если НЕ Объект.Рассчитан Тогда
		УстановитьВозможностьРедактированияДанныхПоGPS();
	КонецЕсли;
	
	Если Объект.Организация <> Справочники.Организации.ПустаяСсылка() Тогда
		мВидимостьРеквизитовНДС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
		ПланыВидовХарактеристик.уатПраваИНастройки.УчитыватьНДС);
	КонецЕсли;
	
	ПереключательДваВидаТоплива = ?(Объект.РаботаНаДвухВидахТопливаОдновременно, "Одновременно", "Поочередно");

	флЭЦП = ПолучитьФункциональнуюОпцию("ИспользоватьЭлектронныеПодписи");
	флЖТД = ПолучитьФункциональнуюОпцию("уатИспользоватьЖурналыТранспортныхДокументов");
	флЭД  = ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭД");
	
	Элементы.ФормаПодписать.Видимость = (флЖТД ИЛИ флЭД) И флЭЦП
		И ПравоДоступа("Изменение", Метаданные.РегистрыСведений.уатСостоянияПодписиПутевыхЛистов);
	// -- проф/корп
	
	ОбновитьДинамическиеКолонкиТЧСервер();
	УстановитьСистемныеНастройки();
	
	ВариантМедосмотр         = ?(ЗначениеЗаполнено(Объект.Медорганизация), 1, 0);
	ВариантТехконтроль       = ?(ЗначениеЗаполнено(Объект.КонтрольТранспорта), 1, 0);
	ВариантПоказанияОдометра = ?(ЗначениеЗаполнено(Объект.ПоказанияОдометра), 1, 0);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	уатЗащищенныеФункцииКлиент.уатДокументФормаЭлементаПриОткрытии(Отказ, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ++ проф/корп
	Элементы.РедактироватьВыручкуВДиалоге.Пометка = РедактироватьВыручкуВДиалоге;
	Элементы.РедактироватьБилетыВДиалоге.Пометка = РедактироватьБилетыВДиалоге;
	Элементы.РедактироватьПосВедВДиалоге.Пометка = РедактироватьПосВедВДиалоге;
	// -- проф/корп
	
	СоответвиеПЛЭД = Новый Соответствие();
	Элементы.ГруппаСостояниеЭДО.Видимость = ИспользоватьОбменЭД;
	
	ЗаполнитьВидимостьТитуловПодписания(СоответвиеПЛЭД);
	Если ИспользоватьОбменЭД 
		И НЕ Объект.Ссылка.Пустая() Тогда
		КолВоЭПД = ПолучитьКоличествоЭПД(Объект.Ссылка);
	КонецЕсли;

	ОтображениеВыработкиСводноПриИзменении(Неопределено);
	ОтображениеВыработкиСотрудниковСводноПриИзменении(Неопределено);
	
	ОбновитьЗаправкиВсего();
	ОбновитьСписокСпецработ();
	мКопированиеДокумента = Ложь;
	мМаршрутныйЛистОснование = Неопределено;
	Модифицированность = Ложь;
	
	Если Объект.Ссылка.Пустая() Тогда
		ПроверитьПредыдущийПЛНеРассчитан();
	КонецЕсли;
	
	ПредДатаВыезда = Объект.ДатаВыезда;
	УстановитьВидимость();
	УставновитьВидимостьОтветвенныеЛица();

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если Не ЗавершениеРаботы Тогда 
		СохранитьНастройкиСервер();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ОбновитьДинамическиеКолонкиТЧСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	// проверка попадания заправок в период ПЛ
	Если ПараметрыЗаписи.РежимЗаписи <> РежимЗаписиДокумента.ОтменаПроведения
		И НЕ ПараметрыЗаписи.Свойство("ЗаписьЗаправкиГСМ")
		И НЕ уатПутевыеЛисты.ПроверитьПопаданиеЗаправокСливовВПериодПЛ(Объект.Организация, Объект.Ссылка, Объект.ДатаВыезда, Объект.ДатаВозвращения) Тогда
		
		ТекстНСТР = НСтр("en='Waybill was not recorded: entered fuelling and fuel drain does not fall within the period of waybill!';ru='Путевой лист не был записан: введенные заправки и сливы ГСМ не попадают в период путевого листа!'");
		уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, Отказ,, СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	// изменение времени заправки на время выезда ПЛ
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		уатПутевыеЛисты.ИзменитьВремяЗаправокПЛ(ТекущийОбъект);
	КонецЕсли;
		
	// отбор списка ТТД
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТТД, "ПутЛист", ТекущийОбъект.Ссылка);
	Если НЕ Объект.Ссылка.Пустая() Тогда
		ОбщегоНазначенияКлиентСервер.УдалитьЭлементыГруппыОтбора(ТТД.Отбор, "Ссылка");
	КонецЕсли;
	
	ОбновитьДинамическиеКолонкиТЧСервер();
	
	Элементы.ФормаПроверитьДокументы.Доступность = Истина;
	ОбновитьНадписьРассчитанСервер();
		
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		УстановитьДоступностьРассчитанногоДокумента();
	КонецЕсли;
	
	// аннулирование подписей при изменении ключевых реквизитов
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение
		И ИспользоватьЖурналыТранспортныхДокументов
		И АннулируемыеПодписи.Количество() > 0 Тогда
		
		ДопПараметры = Новый Структура("АннулируемыеПодписи", АннулируемыеПодписи);
		уатЖурналыТранспортныхДокументов.ИзменитьСостоянияПодписейПЛ(ТекущийОбъект.Ссылка, ДопПараметры);
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЭлектронныеПеревозочныеДокументы, "Рейс", Объект.Ссылка);
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ИмяСобытия = "Обновление для ПЛ из ТТД" Тогда 
		Элементы.ТТД.Обновить();
	ИначеЕсли ИмяСобытия = "ЗаправкаГСМ_Запись" Тогда 
		ВывестиТаблицуЗаправок();
		ПересчетВыданногоГСМСервер();
	ИначеЕсли (ИмяСобытия = "ДобавлениеЗаправкиИзПЛ" ИЛИ ИмяСобытия = "РедактированиеЗаправкиИзПЛ") И
			ЗначениеЗаполнено(Параметр) Тогда
		ВывестиТаблицуЗаправок();
		ПересчетВыданногоГСМСервер();
		Попытка
			Записать(Новый Структура("ЗаписьЗаправкиГСМ"));
		Исключение
		КонецПопытки;
	ИначеЕсли (ИмяСобытия = "ДобавлениеСливаИзПЛ" ИЛИ ИмяСобытия = "РедактированиеСливаИзПЛ") И ЗначениеЗаполнено(Параметр) Тогда
		ВывестиТаблицуСливов();
		ПересчетСданногоГСМСервер();
		Попытка
			Записать(Новый Структура("ЗаписьЗаправкиГСМ"));
		Исключение
		КонецПопытки;
	ИначеЕсли ИмяСобытия = "ПревышениеУровняТопливаВБаке" Тогда
		//ПоказатьПредупреждение(Неопределено, Параметр);
		ПредупреждениеПревышениеУровняТопливаВБаке = Параметр;
		ПодключитьОбработчикОжидания("Подключаемый_ПревышениеУровняТопливаВБаке", 0.1, Истина);
		
	ИначеЕсли (ИмяСобытия = "ДобавлениеВыручкиИзПЛ" ИЛИ ИмяСобытия = "РедактированиеВыручкиИзПЛ") Тогда
		ВывестиТаблицуВыручки();
		
	ИначеЕсли (ИмяСобытия = "ДобавлениеБилетовИзПЛ" ИЛИ ИмяСобытия = "РедактированиеБилетовИзПЛ") Тогда
		ВывестиТаблицуБилеты();
		
	ИначеЕсли (ИмяСобытия = "ДобавлениеПосадочнойВедомостиИзПЛ" ИЛИ ИмяСобытия = "РедактированиеПосадочнойВедомостиИзПЛ") Тогда
		ВывестиТаблицуПосВед();
		
	ИначеЕсли ИмяСобытия = "ПриПолученииПодписи" Тогда
		ОтобразитьКартинкиПодписейОтветственныхЛиц();
		
	ИначеЕсли ИмяСобытия = "Запись_ДокументыЭПД" Тогда
		КолВоЭПД = ПолучитьКоличествоЭПД(Объект.Ссылка);
		СоответвиеПЛЭД = Новый Соответствие();    
		ЗаполнитьВидимостьТитуловПодписания(СоответвиеПЛЭД);
		ОтобразитьКартинкиПодписейОтветственныхЛиц();
		Элементы.ЭлектронныеПеревозочныеДокументы.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбновитьВремяФОВ();
	Оповестить("Изменен путевой лист", Объект.Ссылка, ЭтотОбъект);
	
	Если флВопросИзменениеЭПЛ 
		И ИспользоватьОбменЭД Тогда
		Если ИзмененныеТитулыЭПЛ.Количество() = 0 Тогда
			флВопросИзменениеЭПЛ = Ложь;
		Иначе    
			ТекстПредупреждения = "";
			ДанныеЭПЛ = СоответвиеПЛЭД.Получить(Объект.Ссылка);
			Для Каждого ТекСтрока Из ИзмененныеТитулыЭПЛ Цикл
				Если ТекСтрока.Представление = "ДиспетчерПредрейсовый"
					И ДанныеЭПЛ <> Неопределено Тогда
					Если ДанныеЭПЛ.Титул1Подписан Тогда
						ТекстПредупреждения = НСтр("ru = 'В документе изменились ключевые ревизиты титула ЭПЛ ""Информация оформителя"".
						|Изменение ранее отправленных данных Путевого листа в ГИС ЭПД невозможно.
						|Открыть ""Электронный путевой лист""?'"); 
					ИначеЕсли ДанныеЭПЛ.ЕстьТитул1 Тогда
						ТекстПредупреждения = НСтр("ru = 'В документе изменились ключевые ревизиты титула ЭПЛ ""Информация оформителя"".
						|Открыть ""Электронный путевой лист""?'");
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			Если ТекстПредупреждения <> "" Тогда
				Режим = РежимДиалогаВопрос.ДаНет;
				ПоказатьВопрос(Новый ОписаниеОповещения("ВопросИзменениеЭПЛ", ЭтотОбъект, ДанныеЭПЛ.ЭПЛ), ТекстПредупреждения, Режим);
			Иначе
				флВопросИзменениеЭПЛ = Ложь;
			КонецЕсли;
		КонецЕсли;
	Иначе
		флВопросИзменениеЭПЛ       = Ложь;
	КонецЕсли;
	
	Если флВопросПереадресовкаТСЭПД
		И ИспользоватьОбменЭД Тогда  
		МассивЭПД = ПолучитьЭПДДляЗаменыТСВодителя(Объект.Ссылка);
		Если МассивЭПД.Количество() = 0 Тогда
			флВопросПереадресовкаТСЭПД = Ложь;
		Иначе
			Режим = РежимДиалогаВопрос.ДаНет;
			ТекстНСТР = НСтр("ru = 'В документе изменилось ТС/Водитель.
                              |Открыть ""Электронную транспортную накладную""?'");
			ПоказатьВопрос(Новый ОписаниеОповещения("ВопросПереадресовкаТСЭПДЗавершение", ЭтотОбъект, МассивЭПД), ТекстНСТР, Режим);
		КонецЕсли;
	Иначе
		флВопросПереадресовкаТСЭПД = Ложь;
	КонецЕсли;
	
	Если флВопросИзменениеЭТрН 
		И ИспользоватьОбменЭД Тогда  
		МассивЭПД = ПолучитьЭТрН(Объект.Ссылка);
		Если МассивЭПД.Количество() = 0 Тогда
			флВопросИзменениеЭТрН = Ложь;
		Иначе 
			Режим = РежимДиалогаВопрос.ДаНет;
			ТекстПредупреждения = НСтр("ru = 'В документе изменились ключевые ревизиты ЭТрН.
			|Открыть ""Электронную транспортную накладную""?'"); 
			ПоказатьВопрос(Новый ОписаниеОповещения("ВопросИзменениеЭТрН", ЭтотОбъект, МассивЭПД), ТекстПредупреждения, Режим);
		КонецЕсли;
	Иначе
		флВопросИзменениеЭТрН = Ложь;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства

	// Контроль вызываем здесь, а не в ОбработкаПроверкиЗаполненияНаСервере, поскольку тот не срабатывает
	// при записи. Режим проведения устанавливается программно позже - в модуле объекта в процедуре ПередЗаписью
	Если флПроверкаПередЗакрытием <> Неопределено Тогда
		Отказ = Отказ ИЛИ флПроверкаПередЗакрытием.Отказ;
		Для Каждого ТекСообщение Из флПроверкаПередЗакрытием.Сообщения Цикл
			уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекСообщение);
		КонецЦикла;
		флПроверкаПередЗакрытием = Неопределено;
	ИначеЕсли ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Запись
		ИЛИ ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		КонтрольПредыдущийПЛНеРассчитан(Отказ);
		КонтрольЗакрытияБудущимВременем(Отказ); 
		Если ИспользоватьОбменЭД Тогда  
			ИзмененныеТитулыЭПЛ = уатОбменСГИСЭПД.ПолучитьИзмененияКлючевыхРеквизитовЭПЛ(ТекущийОбъект);
			Если ИзмененныеТитулыЭПЛ.Количество() <> 0 Тогда
				флВопросИзменениеЭПЛ = Истина;
				КонтрольИзмененияКлючевыхРеквизитов(Отказ);
			Конецесли;
		ИначеЕсли ИспользоватьЖурналыТранспортныхДокументов Тогда
			АннулируемыеПодписи =
				уатЖурналыТранспортныхДокументов.ПолучитьАннулируемыеПодписи(ТекущийОбъект);
			КонтрольИзмененияКлючевыхРеквизитов(Отказ);
		КонецЕсли;
	КонецЕсли; 
	Если ИспользоватьОбменЭД
		И НЕ Объект.Ссылка.Пустая()
		И уатОбменСГИСЭПД.КлючевыхРеквизитыЭТрНИзменены(ТекущийОбъект) Тогда 
		флВопросИзменениеЭТрН = Истина;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	Если НЕ ВопросПереадресовкаТСЭПД 
		И флВопросПереадресовкаТСЭПД Тогда
		СтандартнаяОбработка		 = Ложь;
		ЗавершениеРаботы			 = Ложь;
		Отказ						 = Истина;
		ВопросПереадресовкаТСЭПД	 = Истина; 
		флВопросПереадресовкаТСЭПД   = Ложь;
	КонецЕсли;
	Если НЕ ВопросИзменениеЭПЛ 
		И флВопросИзменениеЭПЛ Тогда
		СтандартнаяОбработка		 = Ложь;
		ЗавершениеРаботы			 = Ложь;
		Отказ						 = Истина;
		ВопросИзменениеЭПЛ			 = Истина; 
		флВопросИзменениеЭПЛ		 = Ложь;
	КонецЕсли;
	Если НЕ ВопросИзменениеЭТрН  
		И флВопросИзменениеЭТрН Тогда
		СтандартнаяОбработка		 = Ложь;
		ЗавершениеРаботы			 = Ложь;
		Отказ						 = Истина;
		ВопросИзменениеЭТрН			 = Истина; 
		флВопросИзменениеЭТрН		 = Ложь;
	КонецЕсли;
	
	Если флВопросЗакрытиеФормы Тогда
		Отказ = Истина;
		Оповещ = Новый ОписаниеОповещения("ПередЗакрытиемВопрос", ЭтотОбъект);
		флВопросЗакрытиеФормы = Ложь;
		ПоказатьВопрос(Оповещ, "При проверке корректности заполнения документа возникли предупреждения!
			|Продолжить закрытие формы?", РежимДиалогаВопрос.ОКОтмена);
	ИначеЕсли Модифицированность И НЕ Объект.Ссылка.Пустая() Тогда
		флОтказ = Ложь;
		мсвСообщения = Новый Массив;
		КонтрольПредыдущийПЛНеРассчитан(флОтказ, Истина, мсвСообщения);
		КонтрольЗакрытияБудущимВременем(флОтказ, Истина, мсвСообщения);
		КонтрольИзмененияКлючевыхРеквизитов(флОтказ, Истина, мсвСообщения);
		флПроверкаПередЗакрытием = Новый Структура("Отказ, Сообщения", флОтказ, мсвСообщения);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ВыработкаТСкратко(Команда)
	Элементы.ГруппаВыработкаТСстраницы.ТекущаяСтраница = Элементы.ГруппаВыработкаТСкратко;
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаТСподробно(Команда)
	Элементы.ГруппаВыработкаТСстраницы.ТекущаяСтраница = Элементы.ГруппаВыработкаТСподробно;
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаСотрудниковКратко(Команда)
	Элементы.ГруппаВыработкаСотрудниковСтраницы.ТекущаяСтраница = Элементы.ГруппаВыработкаСотрудниковКратко;
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаСотрудниковПодробно(Команда)
	Элементы.ГруппаВыработкаСотрудниковСтраницы.ТекущаяСтраница = Элементы.ГруппаВыработкаСотрудниковПодробно;
КонецПроцедуры

&НаКлиенте
Процедура ОтображениеВыработкиСводноПриИзменении(Элемент)
	Если ОтображениеВыработкиТССводно Тогда
		Элементы.ГруппаВыработкаСводнаяКомПанель.Видимость   = Истина;
		Элементы.ГруппаВыработкаПодробнаяКомПанель.Видимость = Ложь;
		Элементы.ГруппаВыработкаТСстраницы.ТекущаяСтраница   = Элементы.ГруппаВыработкаТСкратко;
	Иначе
		Элементы.ГруппаВыработкаСводнаяКомПанель.Видимость   = Ложь;
		Элементы.ГруппаВыработкаПодробнаяКомПанель.Видимость = Истина;
		Элементы.ГруппаВыработкаТСстраницы.ТекущаяСтраница   = Элементы.ГруппаВыработкаТСподробно;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтображениеВыработкиСотрудниковСводноПриИзменении(Элемент)
	Если ОтображениеВыработкиСотрудниковСводно Тогда
		Элементы.ГруппаВыработкаСотрудниковСводнаяКомПанель.Видимость   = Истина;
		Элементы.ГруппаВыработкаСотрудниковПодробнаяКомПанель.Видимость = Ложь;
		Элементы.ГруппаВыработкаСотрудниковСтраницы.ТекущаяСтраница     = Элементы.ГруппаВыработкаСотрудниковКратко;
	Иначе
		Элементы.ГруппаВыработкаСотрудниковСводнаяКомПанель.Видимость   = Ложь;
		Элементы.ГруппаВыработкаСотрудниковПодробнаяКомПанель.Видимость = Истина;
		Элементы.ГруппаВыработкаСотрудниковСтраницы.ТекущаяСтраница     = Элементы.ГруппаВыработкаСотрудниковПодробно;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаАгрегатов(Команда)
	
	Если Объект.Рассчитан И Не Объект.Ссылка.Пустая() Тогда
		ПарамерОткрытия = Новый Структура;
		ПарамерОткрытия.Вставить("Массив",  ПолучитьВыработкуПоАгрегатам());
		ОткрытьФорму("Документ.уатПутевойЛист.Форма.ФормаВыработкиАгрегатов",ПарамерОткрытия);
	ИначеЕсли Не Объект.Ссылка.Пустая() Тогда
		ТекстНСТР = НСтр("en='Necessary to calculate waybill';ru='Необходимо рассчитать путевой лист'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
	ИначеЕсли Объект.Рассчитан Тогда
		ТекстНСТР = НСтр("en='Necessary to save waybill';ru='Необходимо записать путевой лист'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
	Иначе
		ТекстНСТР = НСтр("en='Necessary to save and calculate waybill';ru='Необходимо рассчитать и записать путевой лист'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетИтогов(Команда)
	Перем Отказ;
	
	// проверка попадания заправок в период ПЛ
	Если НЕ уатПутевыеЛисты.ПроверитьПопаданиеЗаправокСливовВПериодПЛ(Объект.Организация, Объект.Ссылка, Объект.ДатаВыезда, Объект.ДатаВозвращения) Тогда
		Объект.Рассчитан = Ложь;
		ТекстНСТР = НСтр("en='Document was not calculated: input fuelings are not included in period of the waybill!';ru='Документ не был рассчитан: введенные заправки ГСМ не попадают в период путевого листа!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	НаименованиеССМ = "";
	Если ТребуетсяПолучениеДанныхПоGPS(НаименованиеССМ) Тогда 
		ТекстОповещения = НСтр("en = 'NTRS'; ru = 'Выполняется получение данных из'") + " " + НаименованиеССМ;
		Состояние(,, ТекстОповещения, БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	ТекстСообщОшибки = "";
	Объект.Рассчитан = РасчетИтоговСервер(Отказ, Ложь, ТекстСообщОшибки);
	
	ОбновитьНадписьРассчитан();
	
	Если НЕ ПустаяСтрока(ТекстСообщОшибки) Тогда
		ТекстНСТР = НСтр("en='Incorrectly completed table of vehicle output';ru='Неправильно заполнена таблица выработки ТС'") + " (" + ТекстСообщОшибки + ")";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНачальныеОстатки(Команда)
	Если ЗначениеЗаполнено(Объект.ТранспортноеСредство) Тогда
		МодельТС = ПолучитьЗначениеРеквизита(Объект.ТранспортноеСредство, "Модель");
		МодельТСРеквизиты = ПолучитьЗначенияРеквизитов(МодельТС, "ОсновноеТопливо, ДополнительноеТопливо, НаличиеСпидометра");
		
		ОстатокТопливаВыезд = уатОбщегоНазначения.уатОстатокГСМнаТС(Объект.ДатаВыезда, Объект.ТранспортноеСредство,
			МодельТСРеквизиты.ОсновноеТопливо, Объект.Ссылка);
		ОстатокТопливаВыездПриИзменении(Элементы.ОстатокТопливаВыезд);
		
		Если ЗначениеЗаполнено(МодельТСРеквизиты.ДополнительноеТопливо) Тогда
			Для Каждого ТекСтрока Из Объект.РасходГСМ Цикл
				Если Объект.ТранспортноеСредство = ТекСтрока.ТС И МодельТСРеквизиты.ДополнительноеТопливо = ТекСтрока.ГСМ Тогда
					ТекСтрока.ОстатокПриВыезде = уатОбщегоНазначения.уатОстатокГСМнаТС(Объект.ДатаВыезда,
						Объект.ТранспортноеСредство, ТекСтрока.ГСМ, Объект.Ссылка);
					Прервать;
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;
		
		ОстатокТЖВыезд(Объект.ДатаВыезда, Объект.ТранспортноеСредство);
		
		Если МодельТСРеквизиты.НаличиеСпидометра = Истина Тогда
			Объект.СпидометрВыезда = уатОбщегоНазначения.уатТекущийСпидометр(Объект.ТранспортноеСредство, Объект.ДатаВыезда);
		Иначе
			Объект.СпидометрВыезда = уатОбщегоНазначения.уатТекущийСчетчикМЧ(Объект.ТранспортноеСредство, Объект.ДатаВыезда);
		КонецЕсли;
	КонецЕсли;	
	
	ЗаполнятьПробегПрицепов = ПолучитьПраваИНастройкиПользователя(Объект.Организация,
		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ЗаполнятьПробегПрицепов"));
	
	Для Каждого ТекСтрока Из Объект.Прицепы Цикл
		МодельПрицепа = ПолучитьЗначениеРеквизита(ТекСтрока.ТС, "Модель");
		МодельПрицепаРеквизиты = ПолучитьЗначенияРеквизитов(МодельПрицепа, "НаличиеСпидометра, ВидМоделиТС, ОсновноеТопливо, НаличиеТопливногоБака");
		
		Если МодельПрицепаРеквизиты.НаличиеСпидометра = Истина Тогда
			Если МодельПрицепаРеквизиты.ВидМоделиТС <> ПредопределенноеЗначение("Перечисление.уатВидыМоделейТС.Прицеп")
				ИЛИ ЗаполнятьПробегПрицепов Тогда
				
				ТекСтрока.СчетчикМЧВыезда = уатОбщегоНазначения.уатТекущийСпидометр(ТекСтрока.ТС, Объект.ДатаВыезда);
			КонецЕсли;
		Иначе
			ТекСтрока.СчетчикМЧВыезда = уатОбщегоНазначения.уатТекущийСчетчикМЧ(ТекСтрока.ТС, Объект.ДатаВыезда);
		КонецЕсли;
				
		Если ЗначениеЗаполнено(МодельПрицепаРеквизиты.ОсновноеТопливо) И МодельПрицепаРеквизиты.НаличиеТопливногоБака = Истина Тогда
			Для Каждого ТекСтрокаГСМ Из Объект.РасходГСМ Цикл
				Если ТекСтрока.ТС = ТекСтрокаГСМ.ТС И МодельПрицепаРеквизиты.ОсновноеТопливо = ТекСтрокаГСМ.ГСМ Тогда
					ТекСтрокаГСМ.ОстатокПриВыезде = уатОбщегоНазначения.уатОстатокГСМнаТС(Объект.ДатаВыезда, ТекСтрокаГСМ.ТС,
						ТекСтрокаГСМ.ГСМ, Объект.Ссылка);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ОстатокТЖВыезд(Объект.ДатаВыезда, ТекСтрока.ТС);
		
	КонецЦикла;
	
	ОбновитьНадписьПробег();
	ЗаполнитьПробегПоУмолчаниюПриРаботеНаДвухВидахТоплива();
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСпидометрПоЗаданию(Команда)
	
	РежимыРасчетаПробегов = ПолучитьРежимыРасчетаПробеговПоЗаданию();
	
	мЗначениеСпидометра = 0;
	мЗначениеСчетчика   = 0;
	
	мЭтапыЗадания = Новый Массив;
	Для Каждого ТекСтрока Из Объект.Задание Цикл
		Если мЭтапыЗадания.Найти(ТекСтрока.НомерЕздки) = Неопределено Тогда
			мЭтапыЗадания.Добавить(ТекСтрока.НомерЕздки);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекНомерЭтапа Из мЭтапыЗадания Цикл
		ТекПробегСГрузом  = 0;
		ТекПробегПорожний = 0;
		
		Для Каждого ТекСтрока Из Объект.Задание Цикл
			Если НЕ ТекСтрока.Выполнено ИЛИ ТекСтрока.НомерЕздки <> ТекНомерЭтапа Тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ РежимыРасчетаПробегов.ПробегСГрузом_СуммированиеПоЭтапам И ТекСтрока.НомерЕздки <> 0 Тогда
				ТекПробегСГрузом = Макс(ТекПробегСГрузом, ТекСтрока.КоличествоКмГруз * ТекСтрока.КоличествоЕздок);
			Иначе
				ТекПробегСГрузом = ТекПробегСГрузом + ТекСтрока.КоличествоКмГруз * ТекСтрока.КоличествоЕздок;
			КонецЕсли;
			
			Если НЕ РежимыРасчетаПробегов.ПробегПорожний_СуммированиеПоЭтапам И ТекСтрока.НомерЕздки <> 0 Тогда
				ТекПробегПорожний = Макс(ТекПробегПорожний, ТекСтрока.КоличествоКмПорожний * ТекСтрока.КоличествоЕздок);
			Иначе
				ТекПробегПорожний = ТекПробегПорожний + ТекСтрока.КоличествоКмПорожний * ТекСтрока.КоличествоЕздок;
			КонецЕсли;
			
			мЗначениеСчетчика = мЗначениеСчетчика + Цел(ТекСтрока.КоличествоЧасов) + (ТекСтрока.КоличествоЧасов -
				Цел(ТекСтрока.КоличествоЧасов))*100/60;
				
			// добавляем спецработы
			ДобавитьПробегСпецработ(мЗначениеСпидометра, ТекСтрока);
		КонецЦикла;
		
		мЗначениеСпидометра = мЗначениеСпидометра + ТекПробегСГрузом + ТекПробегПорожний;
	КонецЦикла;
			
	Если ПолучитьЗначениеРеквизита(ПолучитьЗначениеРеквизита(Объект.ТранспортноеСредство, "Модель"), "НаличиеСпидометра") Тогда 
		Объект.СпидометрВозвращения = Объект.СпидометрВыезда + мЗначениеСпидометра;
		Объект.СпидометрВозвращения = Объект.СпидометрВозвращения + Объект.НулевойПробегВыезда + Объект.НулевойПробегВозвращения;
	Иначе 
		Объект.СпидометрВозвращения = Объект.СпидометрВыезда + мЗначениеСчетчика;
	КонецЕсли;
	
	ЗаполнятьПробегПрицепов = ПолучитьПраваИНастройкиПользователя(Объект.Организация,
		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ЗаполнятьПробегПрицепов"));
		
	Для Каждого ТекПрицеп Из Объект.Прицепы Цикл
		МодельПрицепа = ПолучитьЗначениеРеквизита(ТекПрицеп.ТС, "Модель");
		МодельПрицепаРеквизиты = ПолучитьЗначенияРеквизитов(МодельПрицепа, "НаличиеСпидометра, ВидМоделиТС");
			
		Если МодельПрицепаРеквизиты.НаличиеСпидометра Тогда 
			Если МодельПрицепаРеквизиты.ВидМоделиТС <> ПредопределенноеЗначение("Перечисление.уатВидыМоделейТС.Прицеп")
				ИЛИ ЗаполнятьПробегПрицепов Тогда
				
				ТекПрицеп.СчетчикМЧВозвращения = ТекПрицеп.СчетчикМЧВыезда + мЗначениеСпидометра
					+ Объект.НулевойПробегВыезда + Объект.НулевойПробегВозвращения;
			КонецЕсли;
		Иначе 
			ТекПрицеп.СчетчикМЧВозвращения = ТекПрицеп.СчетчикМЧВыезда + мЗначениеСчетчика;
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьНадписьПробег();
	ЗаполнитьПробегПоУмолчаниюПриРаботеНаДвухВидахТоплива();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаданиеПоМаршруту(Команда)
	Если Объект.Задание.Количество() > 0 Тогда
		ТекстНСТР = НСтр("en='Do you want to clear the table before filling?';ru='Очистить таблицу перед заполнением?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьЗаданиеПоМаршрутуЗавершение1", ЭтотОбъект), ТекстНСТР, РежимДиалогаВопрос.ДаНетОтмена,,КодВозвратаДиалога.Нет);
        Возврат;	
	КонецЕсли;
	
	ЗаполнитьЗаданиеПоМаршрутуФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаданиеПоМаршрутуЗавершение1(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Отмена Тогда
        Возврат;
    ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
        Объект.Задание.Очистить();
        Модифицированность = Истина;
    КонецЕсли;	
    
    ЗаполнитьЗаданиеПоМаршрутуФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаданиеПоМаршрутуФрагмент()
	
	ОткрытьФорму("Справочник.уатМаршруты.ФормаВыбора",,,,,,
		Новый ОписаниеОповещения("ЗаполнитьЗаданиеПоМаршрутуЗавершение", ЭтотОбъект),
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаданиеПоМаршрутуЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    спрМаршрут = Результат;
    Если НЕ ЗначениеЗаполнено(спрМаршрут) Тогда
        Возврат;
    КонецЕсли;
    
    спрМаршрутЭтапы = ЭтапыМаршрута(спрМаршрут);
	УсловиеРаботы = УсловиеРаботыМаршрута(спрМаршрут);
	ВидПеревозки = ПолучитьВидПеревозки(Объект.Организация, Объект.ТранспортноеСредство);
    Если спрМаршрутЭтапы.Количество() = 0 Тогда
        НоваяСтрока = Объект.Задание.Добавить();
		НоваяСтрока.Маршрут = спрМаршрут;
        НоваяСтрока.КоличествоЕздок = 1;
        РеквизитыМаршрута = уатОбщегоНазначенияТиповые.ПолучитьЗначенияРеквизитов(спрМаршрут, "Расстояние, ВремяВПути");
		НоваяСтрока.КоличествоКмГруз = РеквизитыМаршрута.Расстояние;
		НоваяСтрока.КоличествоЧасов = РеквизитыМаршрута.ВремяВПути;
		НоваяСтрока.УсловиеРаботы = УсловиеРаботы;
		НоваяСтрока.ВидПеревозки = ВидПеревозки;
    Иначе	
        Для Каждого ТекСтрока Из спрМаршрутЭтапы Цикл
            НоваяСтрока = Объект.Задание.Добавить();
            НоваяСтрока.Маршрут = спрМаршрут;
            НоваяСтрока.АдресПрибытия = ТекСтрока.ПунктОтправления;
            НоваяСтрока.АдресУбытия   = ТекСтрока.ПунктПрибытия;
            НоваяСтрока.КоличествоЕздок = 1;
            НоваяСтрока.КоличествоКмГруз = ТекСтрока.Расстояние;
			НоваяСтрока.КоличествоЧасов = ТекСтрока.ВремяВПути;
			НоваяСтрока.УсловиеРаботы = УсловиеРаботы;
			НоваяСтрока.ВидПеревозки = ВидПеревозки;
        КонецЦикла;
	КонецЕсли;
	
	ОбновитьНадписьУсловияРаботы();
    Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаданиеПоРейсам(Команда)
	Если Объект.Задание.Количество() > 0 Тогда
		ТекстНСТР = НСтр("en='Do you want to clear the table before filling?';ru='Очистить таблицу перед заполнением?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьЗаданиеПоРейсамЗавершение1", ЭтотОбъект), ТекстНСТР, РежимДиалогаВопрос.ДаНетОтмена,,КодВозвратаДиалога.Нет);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗаданиеПоРейсамФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаданиеПоРейсамЗавершение1(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
		Объект.Задание.Очистить();
		Модифицированность = Истина;
	КонецЕсли;
	
	ЗаполнитьЗаданиеПоРейсамФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаданиеПоРейсамФрагмент()
	
	ОткрытьФорму("Документ.уатПутевойЛист.Форма.ЗаполнениеПоРасписанию",, ЭтотОбъект,,,,
		Новый ОписаниеОповещения("ЗаполнитьЗаданиеПоРейсамЗавершение", ЭтотОбъект),
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаданиеПоРейсамЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		мМаршрут = Результат.Маршрут;
		мВыход = Результат.Выход;
		мРейс = Результат.Рейс;
		ИспользоватьВыходы = Результат.ИспользоватьВыходы;
		
		Если НЕ ЗначениеЗаполнено(мМаршрут)
			ИЛИ НЕ ЗначениеЗаполнено(мВыход) И ИспользоватьВыходы
			ИЛИ НЕ ЗначениеЗаполнено(мРейс) Тогда
			Возврат;
		КонецЕсли;
		
		ЗаполнитьЗаданиеПоРейсамСервер(мМаршрут, мВыход, мРейс);
		
		ОбновитьНадписьУсловияРаботы();
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗаданиеПоРейсамСервер(мМаршрут, мВыход, мРейс)
	Если мМаршрут.Этапы.Количество() = 0 Тогда
		// Расписание подобрать невозможно, из-за некорректного маршрута
		Возврат;
	КонецЕсли;
	УИДПервогоПункта = мМаршрут.Этапы[0].УИД;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	уатРасписаниеРейсов.ДатаУстановки КАК ДатаУстановки,
	|	уатРасписаниеРейсов.Маршрут КАК Маршрут,
	|	уатРасписаниеРейсов.Выход КАК Выход,
	|	уатРасписаниеРейсов.Рейс КАК Рейс,
	|	уатРасписаниеРейсов.ДействуетС КАК ДействуетС,
	|	уатРасписаниеРейсов.ДействуетПо КАК ДействуетПо
	|ПОМЕСТИТЬ втСтрокаРасписания
	|ИЗ
	|	РегистрСведений.уатРасписаниеРейсов КАК уатРасписаниеРейсов
	|ГДЕ
	|	уатРасписаниеРейсов.Маршрут = &Маршрут
	|	И уатРасписаниеРейсов.Выход = &Выход
	|	И уатРасписаниеРейсов.Рейс = &Рейс
	|	И (уатРасписаниеРейсов.Пн
	|				И &Пн
	|			ИЛИ уатРасписаниеРейсов.Вт
	|				И &Вт
	|			ИЛИ уатРасписаниеРейсов.Ср
	|				И &Ср
	|			ИЛИ уатРасписаниеРейсов.Чт
	|				И &Чт
	|			ИЛИ уатРасписаниеРейсов.Пт
	|				И &Пт
	|			ИЛИ уатРасписаниеРейсов.Сб
	|				И &Сб
	|			ИЛИ уатРасписаниеРейсов.Вс
	|				И &Вс)
	|	И уатРасписаниеРейсов.ДействуетС <= &ДеньВыезда
	|	И (уатРасписаниеРейсов.ДействуетПо >= &ДеньВыезда
	|			ИЛИ уатРасписаниеРейсов.ДействуетПо = ДАТАВРЕМЯ(1, 1, 1))
	|	И уатРасписаниеРейсов.УИДПункта = &УИДПервогоПункта
	|
	|СГРУППИРОВАТЬ ПО
	|	уатРасписаниеРейсов.ДатаУстановки,
	|	уатРасписаниеРейсов.Маршрут,
	|	уатРасписаниеРейсов.Выход,
	|	уатРасписаниеРейсов.Рейс,
	|	уатРасписаниеРейсов.ДействуетС,
	|	уатРасписаниеРейсов.ДействуетПо
	|
	|ИМЕЮЩИЕ
	|	уатРасписаниеРейсов.ДатаУстановки = МАКСИМУМ(уатРасписаниеРейсов.ДатаУстановки)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	уатРасписаниеРейсов.ВремяПрибытия КАК ВремяПрибытия,
	|	уатРасписаниеРейсов.ВремяУбытия КАК ВремяУбытия,
	|	уатМаршрутыЭтапы.ПунктОтправления КАК ПунктОтправления,
	|	уатМаршрутыЭтапы.ПунктПрибытия КАК ПунктПрибытия,
	|	уатРасписаниеРейсов.Пн КАК Пн,
	|	уатРасписаниеРейсов.Вт КАК Вт,
	|	уатРасписаниеРейсов.Ср КАК Ср,
	|	уатРасписаниеРейсов.Чт КАК Чт,
	|	уатРасписаниеРейсов.Пт КАК Пт,
	|	уатРасписаниеРейсов.Сб КАК Сб,
	|	уатРасписаниеРейсов.Вс КАК Вс,
	|	&ДеньВыезда КАК ДатаНачала,
	|	уатМаршрутыЭтапы.ВремяВПути КАК ВремяВПути,
	|	уатМаршрутыЭтапы.Расстояние КАК Расстояние
	|ИЗ
	|	Справочник.уатМаршруты.Этапы КАК уатМаршрутыЭтапы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.уатРасписаниеРейсов КАК уатРасписаниеРейсов
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ втСтрокаРасписания КАК втСтрокаРасписания
	|			ПО уатРасписаниеРейсов.Маршрут = втСтрокаРасписания.Маршрут
	|				И уатРасписаниеРейсов.Выход = втСтрокаРасписания.Выход
	|				И уатРасписаниеРейсов.Рейс = втСтрокаРасписания.Рейс
	|				И уатРасписаниеРейсов.ДатаУстановки = втСтрокаРасписания.ДатаУстановки
	|				И уатРасписаниеРейсов.ДействуетС = втСтрокаРасписания.ДействуетС
	|				И уатРасписаниеРейсов.ДействуетПо = втСтрокаРасписания.ДействуетПо
	|		ПО уатМаршрутыЭтапы.Ссылка = уатРасписаниеРейсов.Маршрут
	|			И уатМаршрутыЭтапы.УИД = уатРасписаниеРейсов.УИДПункта
	|
	|УПОРЯДОЧИТЬ ПО
	|	уатМаршрутыЭтапы.НомерСтроки";
	Запрос.УстановитьПараметр("Маршрут", мМаршрут);
	Запрос.УстановитьПараметр("Выход", мВыход);
	Запрос.УстановитьПараметр("Рейс", мРейс);
	Запрос.УстановитьПараметр("Пн", ДеньНедели(Объект.ДатаВыезда)=1);
	Запрос.УстановитьПараметр("Вт", ДеньНедели(Объект.ДатаВыезда)=2);
	Запрос.УстановитьПараметр("Ср", ДеньНедели(Объект.ДатаВыезда)=3);
	Запрос.УстановитьПараметр("Чт", ДеньНедели(Объект.ДатаВыезда)=4);
	Запрос.УстановитьПараметр("Пт", ДеньНедели(Объект.ДатаВыезда)=5);
	Запрос.УстановитьПараметр("Сб", ДеньНедели(Объект.ДатаВыезда)=6);
	Запрос.УстановитьПараметр("Вс", ДеньНедели(Объект.ДатаВыезда)=7);
	Запрос.УстановитьПараметр("УИДПервогоПункта", УИДПервогоПункта);
	Запрос.УстановитьПараметр("ДеньВыезда", НачалоДня(Объект.ДатаВыезда));
	
	Результат = Запрос.ВыполнитьПакетСПромежуточнымиДанными();
	тбл = Результат[1].Выгрузить();
	вт = Результат[0].Выгрузить();
	
	КоличСтрок = тбл.Количество(); 
	ТекНомСтр = 1;
	СекундВДне = 24*60*60;
	
	ТекущаяДата = Объект.ДатаВыезда;
	ПредВремяПрибытия = Неопределено;
	ПредВремяУбытия = Неопределено;
	Для Каждого ТекСтрокаПункт Из тбл Цикл
		Если мМаршрут.ПредставлениеМаршрутаОднимПунктом Тогда
			// ПредВремяПрибытия - начало, ВремяПрибытия из текущей строки - конец
			ТекущийДеньРазрешен = (ПредВремяПрибытия = Неопределено Или ПредВремяПрибытия < ТекСтрокаПункт.ВремяПрибытия);
		Иначе
			// ВремяПрибытия - начало, ВремяУбытия - конец
			ТекущийДеньРазрешен = Истина;
			Если ПредВремяПрибытия <> Неопределено Тогда
				// Проверяем, что с начала прошлой строки нигде не было перехода через полночь
				ТекущийДеньРазрешен = ТекущийДеньРазрешен
					И ТекСтрокаПункт.ВремяПрибытия > ПредВремяУбытия
					И ПредВремяУбытия > ПредВремяПрибытия;
			КонецЕсли;
		КонецЕсли;
		ТекСтрокаПункт.ДатаНачала = уатОбщегоНазначения_уэ.ПолучитьСледующийДеньПоДнямНедели(ТекущаяДата, ТекСтрокаПункт.Пн,
			ТекСтрокаПункт.Вт, ТекСтрокаПункт.Ср, ТекСтрокаПункт.Чт, ТекСтрокаПункт.Пт, ТекСтрокаПункт.Сб, ТекСтрокаПункт.Вс,
			ТекущийДеньРазрешен);
		Если ТекСтрокаПункт.ДатаНачала = Неопределено Тогда
			ТекСтрокаПункт.ДатаНачала = ТекущаяДата;
		Иначе
			ТекущаяДата = ТекСтрокаПункт.ДатаНачала;
		КонецЕсли;
		ПредВремяПрибытия = ТекСтрокаПункт.ВремяПрибытия;
		ПредВремяУбытия = ТекСтрокаПункт.ВремяУбытия;
	КонецЦикла;
	
	ВидПеревозки = ПолучитьВидПеревозки(Объект.Организация, Объект.ТранспортноеСредство);
	Если мМаршрут.ПредставлениеМаршрутаОднимПунктом Тогда
		
		// представление маршрута в виде одиночных пунктов следования
		
		Для Каждого ТекСтрокаПункт Из тбл Цикл
			Если ТекНомСтр = КоличСтрок Тогда
				Прервать;
			КонецЕсли;
			
			СтрокаСледПункт = тбл[ТекНомСтр];
			
			НоваяСтрокаЗадания = Объект.Задание.Добавить();
			НоваяСтрокаЗадания.Маршрут = мМаршрут;
			НоваяСтрокаЗадания.КоличествоЕздок = 1;
			НоваяСтрокаЗадания.АдресПрибытия = ТекСтрокаПункт.ПунктОтправления;
			НоваяСтрокаЗадания.ВремяПрибытия = ТекСтрокаПункт.ДатаНачала + (ТекСтрокаПункт.ВремяУбытия - '00010101');
			НоваяСтрокаЗадания.АдресУбытия = СтрокаСледПункт.ПунктОтправления;
			НоваяСтрокаЗадания.ВремяУбытия = СтрокаСледПункт.ДатаНачала + (СтрокаСледПункт.ВремяПрибытия - '00010101');
			НоваяСтрокаЗадания.УсловиеРаботы = мМаршрут.УсловиеРаботы;
			НоваяСтрокаЗадания.ВидПеревозки = ВидПеревозки;
			НоваяСтрокаЗадания.КоличествоКмГруз = ТекСтрокаПункт.Расстояние;
			НоваяСтрокаЗадания.КоличествоЧасов = ТекСтрокаПункт.ВремяВПути;
			
			ТекНомСтр = ТекНомСтр + 1;
		КонецЦикла;
	Иначе
		
		// представление маршрута в виде пары пунктов следования
		
		Для Каждого ТекСтрокаПункт Из тбл Цикл
			
			НоваяСтрокаЗадания = Объект.Задание.Добавить();
			НоваяСтрокаЗадания.Маршрут = мМаршрут;
			НоваяСтрокаЗадания.КоличествоЕздок = 1;         
			НоваяСтрокаЗадания.АдресПрибытия = ТекСтрокаПункт.ПунктОтправления;
			НоваяСтрокаЗадания.ВремяПрибытия = ТекСтрокаПункт.ДатаНачала + (ТекСтрокаПункт.ВремяПрибытия - '00010101');
			НоваяСтрокаЗадания.АдресУбытия = ТекСтрокаПункт.ПунктПрибытия;
			НоваяСтрокаЗадания.ВремяУбытия = ТекСтрокаПункт.ДатаНачала + (ТекСтрокаПункт.ВремяУбытия - '00010101');
			Если ТекСтрокаПункт.ВремяПрибытия > ТекСтрокаПункт.ВремяУбытия Тогда
				// Переход через полночь, который не отслеживается по дням недели
				НоваяСтрокаЗадания.ВремяУбытия = НоваяСтрокаЗадания.ВремяУбытия + СекундВДне;
			КонецЕсли;
			НоваяСтрокаЗадания.УсловиеРаботы = мМаршрут.УсловиеРаботы;
			НоваяСтрокаЗадания.ВидПеревозки = ВидПеревозки;
			НоваяСтрокаЗадания.КоличествоКмГруз = ТекСтрокаПункт.Расстояние;
			НоваяСтрокаЗадания.КоличествоЧасов = ТекСтрокаПункт.ВремяВПути;
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьЗаданиеПоДаннымGPSНаСервере()
	
	Результат = Новый Массив;
	
	ТабДвижения = ItobОперативныйМониторинг.ПолучитьИнтервалыДвижения(Объект.ТранспортноеСредство, 
		Объект.ДатаВыезда, Объект.ДатаВозвращения, Истина);
	
	Для Каждого ТекСтрока Из ТабДвижения Цикл 
		ДанныеСтроки = Новый Структура("ВремяНач, ВремяКон, СостояниеСтрока, Длительность, Пробег, МестоСтоянки");
		ЗаполнитьЗначенияСвойств(ДанныеСтроки, ТекСтрока);
		Результат.Добавить(ДанныеСтроки);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьЗаданиеПоДаннымGPS(Команда)
	
	Если Не ЗначениеЗаполнено(ItobОперативныйМониторингВызовСервера.ПолучитьПривязанныйТерминал(Объект.ТранспортноеСредство)) Тогда
		ПоказатьПредупреждение(Неопределено, 
			НСтр("en='For this vehicle is not tied to the GLONASS/GPS tracker!"
"A list of compatible hardware is available at http://itob.ru/products/mobile/.';ru='Для данного транспортного средства не привязан ГЛОНАСС/GPS трекер!"
"Список совместимого оборудования доступен по ссылке http://itob.ru/products/mobile/ .'"));
		Возврат;
		
	КонецЕсли;
	
	Если Объект.Задание.Количество() > 0 Тогда
		ТекстВопроса = НСтр("en='Clear task table?';ru='Очистить таблицу задания?'");
		Оповещение   = Новый ОписаниеОповещения("ЗаполнитьЗаданиеПоДаннымGPSОтвет", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе 
		ЗаполнитьЗаданиеПоДаннымGPSЗавершение();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаданиеПоДаннымGPSОтвет(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда 
		ЗаполнитьЗаданиеПоДаннымGPSЗавершение();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаданиеПоДаннымGPSЗавершение()
	
	мсвИнтерваловДвижения = ЗаполнитьЗаданиеПоДаннымGPSНаСервере();
	
	Объект.Задание.Очистить();
	ПробегЕздки = 0;
	
	Для Сч = 0 По мсвИнтерваловДвижения.Количество()-1 Цикл
		ТекущаяСтрока = мсвИнтерваловДвижения[Сч];
		
		ПробегЕздки = ПробегЕздки + ТекущаяСтрока.Пробег;
		
		НовСтрокаЗадание = Объект.Задание.Добавить();
		НовСтрокаЗадание.Выполнено        = Истина;
		НовСтрокаЗадание.КоличествоКмГруз = ПробегЕздки;
		НовСтрокаЗадание.КоличествоЕздок  = 1;
		НовСтрокаЗадание.АдресПрибытия    = ТекущаяСтрока.МестоСтоянки;
		Если флИспользоватьПланФактВремени Тогда
			НовСтрокаЗадание.ВремяПрибытияФакт = ТекущаяСтрока.ВремяНач;
			НовСтрокаЗадание.ВремяУбытияФакт   = ТекущаяСтрока.ВремяКон;
		Иначе
			НовСтрокаЗадание.ВремяПрибытия     = ТекущаяСтрока.ВремяНач;
			НовСтрокаЗадание.ВремяУбытия       = ТекущаяСтрока.ВремяКон;
		КонецЕсли;
		НовСтрокаЗадание.УсловиеРаботы = Объект.УсловиеРаботы;
		
		ПробегЕздки = 0;
	КонецЦикла;
	
	Если ПробегЕздки > 0 Тогда
		НовСтрокаЗадание = Объект.Задание.Добавить();
		НовСтрокаЗадание.Выполнено = Истина;
		
		НовСтрокаЗадание.КоличествоКмГруз = ПробегЕздки;
		НовСтрокаЗадание.КоличествоЕздок  = 1;
		НовСтрокаЗадание.УсловиеРаботы = Объект.УсловиеРаботы;
	КонецЕсли;
	
	ОбновитьНадписьУсловияРаботы();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаданиеПоЗаказуНаТС(Команда)
	Если Объект.Задание.Количество() > 0 Тогда
		ТекстВопроса = НСтр("en='Clear the tabular section before filling?';ru='Очистить табличную часть перед заполнением?'");
		ТекстЗаголовка = НСтр("en='Clear the table';ru='Очистка табличной части'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьЗаданиеПоЗаказуНаТСВопрос", ЭтотОбъект), ТекстВопроса,
			РежимДиалогаВопрос.ДаНетОтмена,,КодВозвратаДиалога.Нет, ТекстЗаголовка);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗаданиеПоЗаказуНаТСФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаданиеПоЗаказуНаТСВопрос(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
		Объект.Задание.Очистить();
		Модифицированность = Истина;
	КонецЕсли;
	
	ЗаполнитьЗаданиеПоЗаказуНаТСФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаданиеПоЗаказуНаТСФрагмент()
	
	//ОткрытьФорму("Документ.уатЗаказГрузоотправителя.Форма.ФормаВыбора", , ЭтотОбъект,,,,
	//	Новый ОписаниеОповещения("ЗаполнитьЗаданиеПоЗаказуНаТСЗавершение", ЭтотОбъект),
	//	РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
	ПеренесенныеЗаказы = Новый Массив;
	мсвКонтрагенты     = Новый Массив;
	Для Каждого ТекСтрока Из Объект.Задание Цикл 
		Если ЗначениеЗаполнено(ТекСтрока.ЗаказНаТС) Тогда
			ДетализацияЗакрытия = ПолучитьЗначениеРеквизита(ТекСтрока.ЗаказНаТС, "ДетализацияЗакрытия");
			Если ДетализацияЗакрытия
				= ПредопределенноеЗначение("Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам") Тогда
				ДанныеЗаказа = Новый Структура;
				ДанныеЗаказа.Вставить("Заказ",      ТекСтрока.ЗаказНаТС);
				ДанныеЗаказа.Вставить("Груз",       ТекСтрока.Номенклатура);
				ДанныеЗаказа.Вставить("Количество", ТекСтрока.Количество);
				ПеренесенныеЗаказы.Добавить(ДанныеЗаказа);
			ИначеЕсли ДетализацияЗакрытия
				= ПредопределенноеЗначение("Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам") Тогда
				мсвГрузовыеМеста = ПолучитьГрузовойСоставЗаказа(ТекСтрока.ЗаказНаТС);
				Для Каждого ТекГрузМесто Из мсвГрузовыеМеста Цикл
					ДанныеЗаказа = Новый Структура;
					ДанныеЗаказа.Вставить("Заказ", ТекСтрока.ЗаказНаТС);
					ДанныеЗаказа.Вставить("Груз", ТекГрузМесто);
					ДанныеЗаказа.Вставить("Количество", 1);
					ПеренесенныеЗаказы.Добавить(ДанныеЗаказа);
				КонецЦикла;
			Иначе
				ДанныеЗаказа = Новый Структура;
				ДанныеЗаказа.Вставить("Заказ", ТекСтрока.ЗаказНаТС);
				ДанныеЗаказа.Вставить("Груз", Неопределено);
				ДанныеЗаказа.Вставить("Количество", 1);
				ПеренесенныеЗаказы.Добавить(ДанныеЗаказа);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекСтрока.Контрагент) И мсвКонтрагенты.Найти(ТекСтрока.Контрагент) = Неопределено Тогда
			мсвКонтрагенты.Добавить(ТекСтрока.Контрагент);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ДокументПодбора",    "уатПутевойЛист");
	ПараметрыФормы.Вставить("ТекущийПЛ",          Объект.Ссылка);
	ПараметрыФормы.Вставить("ПеренесенныеЗаказы", ПеренесенныеЗаказы);
	ПараметрыФормы.Вставить("ДатаВыезда",         Неопределено);
	Если мсвКонтрагенты.Количество() = 1 Тогда
		ПараметрыФормы.Вставить("Отбор_Контрагент", мсвКонтрагенты[0]);
	КонецЕсли;
		
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьЗаданиеПоЗаказуНаТСЗавершение", ЭтотОбъект, Неопределено);
	
	ОткрытьФорму("ОбщаяФорма.уатПодборЗаказов", ПараметрыФормы, ЭтотОбъект,,,, Оповещение);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаданиеПоЗаказуНаТСЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбработкаЗаполненияТЧЗаданиеПоЗаказуНаТС(Результат);
	
	ТекстСообщения = НСтр("ru = 'Табличная часть ""Задание"" заполнена.
                      |Необходимо проверить правильность заполнения и вручную изменить даты выезда и возвращения на закладке ""Основное"".'");
	Состояние(,, ТекстСообщения, БиблиотекаКартинок.Информация32);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтапыМаршрута(спрМаршрут)
	массивЭтапов = Новый Массив;
	Для Каждого ТекЭтап Из спрМаршрут.Этапы Цикл
		массивЭтапов.Добавить(Новый Структура("ПунктОтправления, ПунктПрибытия, Расстояние, ВремяВПути",
			ТекЭтап.ПунктОтправления, ТекЭтап.ПунктПрибытия, ТекЭтап.Расстояние, ТекЭтап.ВремяВПути));
	КонецЦикла;
	
	Возврат массивЭтапов;
КонецФункции

&НаКлиенте
Процедура ItobПоказатьМаршрутНаКарте(Команда)
	ПараметрыФормы = Новый Структура("РежимОткрытия", "ПостроениеМаршрутов");
	ОткрытьФорму("Обработка.ItobРабочееМестоДиспетчера.Форма", ПараметрыФормы);
	ПараметрыОповещения = Новый Структура("НачПериода, КонПериода, Объект",
	НачалоДня(?(Объект.ДатаВыезда = '00010101', ТекущаяДата(), Объект.ДатаВыезда)),
	КонецДня(?(Объект.ДатаВозвращения = '00010101', ТекущаяДата(), Объект.ДатаВозвращения)),
	Объект.ТранспортноеСредство);
	
	Оповестить("РежимМаршрута", ПараметрыОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоМониторингуПриВыезде(Команда)
	
	ОбъектСтруктура = Новый Структура;
	ОбъектСтруктура.Вставить("Организация",           Объект.Организация);
	ОбъектСтруктура.Вставить("ТранспортноеСредство",  Объект.ТранспортноеСредство);
	ОбъектСтруктура.Вставить("ДатаВыезда",            Объект.ДатаВыезда);
	ОбъектСтруктура.Вставить("ДатаВозвращения",       Объект.ДатаВозвращения);
	ОбъектСтруктура.Вставить("СпидометрВыезда",       Объект.СпидометрВыезда);
	ОбъектСтруктура.Вставить("СпидометрВозвращения",  Объект.СпидометрВозвращения);
	ОбъектСтруктура.Вставить("РасчетФактРасходаГСМ",  Объект.РасчетФактРасходаГСМ);
	ОбъектСтруктура.Вставить("Прицепы", Новый Массив());
	ОбъектСтруктура.Вставить("флВыезд", Истина);
	
	Для Каждого ТекПрицеп Из Объект.Прицепы Цикл 
		СтрокаПрицепа = Новый Структура("ТС, СпидометрВыезда, СпидометрВозвращения",
			ТекПрицеп.ТС,
			ТекПрицеп.СчетчикМЧВыезда,
			ТекПрицеп.СчетчикМЧВозвращения);
		ОбъектСтруктура.Прицепы.Добавить(СтрокаПрицепа);
	КонецЦикла;
	
	РезультатСтруктура = Новый Структура;

	// РАСЧЕТ.
	уатМониторинг.РассчитатьСпидометрПоМониторингу(ОбъектСтруктура, РезультатСтруктура);
	
	// Заполнение основных реквизитов.
	Если РезультатСтруктура.Свойство("НачальныйПробегПоGPS") Тогда
		Объект.СпидометрВыезда = РезультатСтруктура.НачальныйПробегПоGPS;
	КонецЕсли;
	
	// Заполнение данных по прицепам.
	Для Каждого ТекПрицеп Из РезультатСтруктура.Прицепы Цикл 
		НайдСтроки = Объект.Прицепы.НайтиСтроки(Новый Структура("ТС", ТекПрицеп.ТС));
		Если НайдСтроки.Количество() Тогда
			Если ТекПрицеп.Свойство("НачальныйПробегПоGPS") Тогда
				НайдСтроки[0].СчетчикМЧВыезда = ТекПрицеп.НачальныйПробегПоGPS;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнитьГСМПоGPSСервер(РезультатСтруктура, Истина);

	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоМониторингуПриВозврате(Команда)
	
	ОбъектСтруктура = Новый Структура;
	ОбъектСтруктура.Вставить("Организация",           Объект.Организация);
	ОбъектСтруктура.Вставить("ТранспортноеСредство",  Объект.ТранспортноеСредство);
	ОбъектСтруктура.Вставить("ДатаВыезда",            Объект.ДатаВыезда);
	ОбъектСтруктура.Вставить("ДатаВозвращения",       Объект.ДатаВозвращения);
	ОбъектСтруктура.Вставить("СпидометрВыезда",       Объект.СпидометрВыезда);
	ОбъектСтруктура.Вставить("СпидометрВозвращения",  Объект.СпидометрВозвращения);
	ОбъектСтруктура.Вставить("РасчетФактРасходаГСМ",  Объект.РасчетФактРасходаГСМ);
	ОбъектСтруктура.Вставить("Прицепы",               Новый Массив());
	
	Для Каждого ТекПрицеп Из Объект.Прицепы Цикл 
		СтрокаПрицепа = Новый Структура("ТС, СпидометрВыезда, СпидометрВозвращения",
			ТекПрицеп.ТС,
			ТекПрицеп.СчетчикМЧВыезда,
			ТекПрицеп.СчетчикМЧВозвращения);
		ОбъектСтруктура.Прицепы.Добавить(СтрокаПрицепа);
	КонецЦикла;
	
	РезультатСтруктура = Новый Структура;
	
	// РАСЧЕТ.
	уатМониторинг.РассчитатьСпидометрПоМониторингу(ОбъектСтруктура, РезультатСтруктура);
	
	НайденныеСтроки = ВыработкаТСсводная.НайтиСтроки(Новый Структура("ПараметрВыработки", 
		ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.ПробегОбщийПоДаннымGPS")));
	Если НайденныеСтроки.Количество() > 0 Тогда 
		СтрокаВыработкиПробег = НайденныеСтроки[0];
	Иначе 
		СтрокаВыработкиПробег = Неопределено;
	КонецЕсли;
	
	НайденныеСтроки = ВыработкаТСсводная.НайтиСтроки(Новый Структура("ПараметрВыработки", 
		ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.ВремяВРаботеПоДаннымGPS")));
	Если НайденныеСтроки.Количество() > 0 Тогда 
		СтрокаВыработкиВремяВРаботе = НайденныеСтроки[0];
	Иначе 
		СтрокаВыработкиВремяВРаботе = Неопределено;
	КонецЕсли;
	
	// Заполнение основных реквизитов.
	Если РезультатСтруктура.Свойство("СчетчикВозвращения") Тогда
		Объект.СпидометрВозвращения = РезультатСтруктура.СчетчикВозвращения;
	КонецЕсли;
	Если РезультатСтруктура.Свойство("СчетчикПоGPS") Тогда
		Объект.ПробегПоGPS = РезультатСтруктура.СчетчикПоGPS;
	КонецЕсли;
	Если РезультатСтруктура.Свойство("ПробегПоGPS") И Не СтрокаВыработкиПробег = Неопределено Тогда
		СтрокаВыработкиПробег.К1 = Окр(РезультатСтруктура.ПробегПоGPS, 2, РежимОкругления.Окр15как20);
		ЗаписатьСтрокуВыработкиТСсервер(Объект.ТранспортноеСредство, СтрокаВыработкиПробег.ПараметрВыработки, СтрокаВыработкиПробег.К1);
	КонецЕсли;
	Если РезультатСтруктура.Свойство("МоточасыПоGPS") И Не СтрокаВыработкиВремяВРаботе = Неопределено Тогда
		СтрокаВыработкиВремяВРаботе.К1 = ВремяВЧЧ_ММ(РезультатСтруктура.МоточасыПоGPS*3600);
		ЗаписатьСтрокуВыработкиТСсервер(Объект.ТранспортноеСредство, СтрокаВыработкиВремяВРаботе.ПараметрВыработки,
			уатОбщегоНазначения.уатВремяВСекунды(СтрокаВыработкиВремяВРаботе.К1));
	КонецЕсли;
	
	// Заполнение данных по прицепам.
	Для Каждого ТекПрицеп Из РезультатСтруктура.Прицепы Цикл 
		НайдСтроки = Объект.Прицепы.НайтиСтроки(Новый Структура("ТС", ТекПрицеп.ТС));
		Если НайдСтроки.Количество() Тогда
			Если ТекПрицеп.Свойство("СчетчикВозвращения") Тогда
				НайдСтроки[0].СчетчикМЧВозвращения = ТекПрицеп.СчетчикВозвращения;
			КонецЕсли;
			Если ТекПрицеп.Свойство("СчетчикПоGPS") Тогда
				НайдСтроки[0].СчетчикМЧGPS = ТекПрицеп.СчетчикПоGPS;
			КонецЕсли;
			Если ТекПрицеп.Свойство("ПробегПоGPS") И Не СтрокаВыработкиПробег = Неопределено Тогда
				СтрокаВыработкиПробег["К" + Строка(НайдСтроки[0].НомерСтроки + 1)] = Окр(ТекПрицеп.ПробегПоGPS, 2, РежимОкругления.Окр15как20);
				ЗаписатьСтрокуВыработкиТСсервер(ТекПрицеп.ТС, СтрокаВыработкиПробег.ПараметрВыработки, СтрокаВыработкиПробег["К" + Строка(НайдСтроки[0].НомерСтроки + 1)]);
			КонецЕсли;
			Если ТекПрицеп.Свойство("МоточасыПоGPS") И Не СтрокаВыработкиВремяВРаботе = Неопределено Тогда
				СтрокаВыработкиВремяВРаботе["К" + Строка(НайдСтроки[0].НомерСтроки + 1)] = ВремяВЧЧ_ММ(ТекПрицеп.МоточасыПоGPS*3600);
				ЗаписатьСтрокуВыработкиТСсервер(ТекПрицеп.ТС, СтрокаВыработкиВремяВРаботе.ПараметрВыработки, 
					уатОбщегоНазначения.уатВремяВСекунды(СтрокаВыработкиВремяВРаботе["К" + Строка(НайдСтроки[0].НомерСтроки + 1)]));
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьПараметрВыработкиТСВременный();
	
	ЗаполнитьГСМПоGPSСервер(РезультатСтруктура);

	ОбновитьНадписьПробег();
	ЗаполнитьПробегПоУмолчаниюПриРаботеНаДвухВидахТоплива();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ItobОтчетПоТопливу(Команда)
	
	// Определяем привязанный терминал
	ПривязанныйТерминал = ItobОперативныйМониторингВызовСервера.ПолучитьПривязанныйТерминал(Объект.ТранспортноеСредство, Объект.ДатаВозвращения);
	Если НЕ ЗначениеЗаполнено(ПривязанныйТерминал) Тогда
		ТекстНСТР = НСтр("en='There is no terminal for vehicle';ru='К транспортному средству не привязан терминал'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		Возврат;
	КонецЕсли;
	
	СписокПараметров = Новый СписокЗначений;
	СписокПараметров.Добавить(НачалоДня(?(Объект.ДатаВыезда='00010101',ТекущаяДата(),Объект.ДатаВыезда)),"НачПериода");
	СписокПараметров.Добавить(КонецДня(?(Объект.ДатаВозвращения='00010101',ТекущаяДата(),Объект.ДатаВозвращения)),"КонПериода");
	СписокПараметров.Добавить(Объект.ТранспортноеСредство,"Объект");
	СписокПараметров.Добавить("Пробег","Метод");
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("СписокПараметров", СписокПараметров);
	ПараметрыОтчета.Вставить("Терминал", ПривязанныйТерминал);
	ПараметрыОтчета.Вставить("Объект",   ПривязанныйТерминал);
	ОткрытьФорму("Отчет.ItobОтчетПоТопливу.Форма", ПараметрыОтчета);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьВсеЗадания(Команда)
	Для Каждого ТекСтрока Из Объект.Задание Цикл
		ТекСтрока.Выполнено = Истина;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсеОтметкиВЗаданиях(Команда)
	Для Каждого ТекСтрока Из Объект.Задание Цикл
		ТекСтрока.Выполнено = Ложь;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьФактПосещение(Команда)
	
	ИмяКлючевойОперации = "уатОперации.ФактическоеПосещениеПунктов.ПутевойЛистВручную";
	ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики(ИмяКлючевойОперации, 1);
	
	УстановитьАдресХранилищаДляРезультатаЗаполненияФактПосещения();
	уатОбщегоНазначенияКлиент_проф.ФактическоеПосещениеПунктовПоДаннымССМ(Объект, Объект.Задание, АдресХранилищаФактПосещения);
	
	ПодключитьОбработчикОжидания("ФактическоеПосещениеПунктовПоДаннымМониторингаЗавершение", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ФактическоеПосещениеПунктовПоДаннымМониторингаЗавершение()
	
	НайденныйРезультат = ПолучитьИзВременногоХранилища(АдресХранилищаФактПосещения);
	Если ТипЗнч(НайденныйРезультат) = Тип("Массив") Тогда
		ОтключитьОбработчикОжидания("ФактическоеПосещениеПунктовПоДаннымМониторингаЗавершение");
		
		Для Каждого ТекСтрока Из НайденныйРезультат Цикл
			НайдСтроки = Объект.Задание.НайтиСтроки(Новый Структура("НомерСтроки", ТекСтрока.НомерСтроки));
			Для Каждого Строка Из НайдСтроки Цикл
				Если флИспользоватьПланФактВремени Тогда
					Строка.ВремяПрибытияФакт = ТекСтрока.ПрибытиеФакт;
					Строка.ВремяУбытияФакт   = ТекСтрока.УбытиеФакт;
				Иначе
					Строка.ВремяПрибытия	 = ТекСтрока.ПрибытиеФакт;
					Строка.ВремяУбытия		 = ТекСтрока.УбытиеФакт;
				КонецЕсли;
				
				Строка.Выполнено = ТекСтрока.Выполнен;
			КонецЦикла;
		КонецЦикла;
	Иначе
		ПодключитьОбработчикОжидания("ФактическоеПосещениеПунктовПоДаннымМониторингаЗавершение", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаданиеПоМЛ_ПунктыПогрузкиЗаказы(Команда)
	ЗаполнитьЗаданиеПоМЛ_ОбщиеДействия(
		ПредопределенноеЗначение("Перечисление.уатВариантыЗаполненияЗаданияПЛпоМЛ.ПунктыПогрузки"),
		"Факт");
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаданиеПоМЛ_ОдиночныеПункты(Команда)
	ЗаполнитьЗаданиеПоМЛ_ОбщиеДействия(
		ПредопределенноеЗначение("Перечисление.уатВариантыЗаполненияЗаданияПЛпоМЛ.ОдиночныеПункты"),
		"Факт");
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаданиеПоМЛ_ПарныеПункты(Команда)
	ЗаполнитьЗаданиеПоМЛ_ОбщиеДействия(
		ПредопределенноеЗначение("Перечисление.уатВариантыЗаполненияЗаданияПЛпоМЛ.ПарныеПункты"),
		"Факт");
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаданиеПоМЛ_ПунктыПогрузкиЗаказыПлан(Команда)
	ЗаполнитьЗаданиеПоМЛ_ОбщиеДействия(
		ПредопределенноеЗначение("Перечисление.уатВариантыЗаполненияЗаданияПЛпоМЛ.ПунктыПогрузки"),
		"План");
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаданиеПоМЛ_ОдиночныеПунктыПлан(Команда)
	ЗаполнитьЗаданиеПоМЛ_ОбщиеДействия(
		ПредопределенноеЗначение("Перечисление.уатВариантыЗаполненияЗаданияПЛпоМЛ.ОдиночныеПункты"),
		"План");
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаданиеПоМЛ_ПарныеПунктыПлан(Команда)
	ЗаполнитьЗаданиеПоМЛ_ОбщиеДействия(
		ПредопределенноеЗначение("Перечисление.уатВариантыЗаполненияЗаданияПЛпоМЛ.ПарныеПункты"),
		"План");
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаданиеПоМЛ_ОбщиеДействия(РежимЗаполнения, ПланФакт)
	Если Объект.Задание.Количество() Тогда 
		ТекстВопроса = НСтр("en='Do you want to clear the table before filling?';ru='Очистить таблицу перед заполнением?'");
		ДопПараметры = Новый Структура("РежимЗаполнения, ПланФакт", РежимЗаполнения, ПланФакт);
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ЗаполнитьЗаданиеПоМЛ_ОбщиеДействияПродолжение", ЭтотОбъект, ДопПараметры),
			ТекстВопроса,
			РежимДиалогаВопрос.ДаНетОтмена);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗаданиеПоМЛ(РежимЗаполнения, ПланФакт);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаданиеПоМЛ_ОбщиеДействияПродолжение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда 
		Объект.Задание.Очистить();
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда 
	Иначе
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗаданиеПоМЛ(ДополнительныеПараметры.РежимЗаполнения, ДополнительныеПараметры.ПланФакт);
КонецПроцедуры

&НаКлиенте
Процедура ОбнулитьСчетчикРаспечатанныхКопийПЛ(Команда)
	Если Объект.Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	ОбнулитьСчетчикРаспечатанныхКопийПЛСервер(Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьТТДПоСтрокеЗадания(Команда)
	
	Если Элементы.Задание.ТекущиеДанные = Неопределено Тогда
		ТекстНСТР = НСтр("en='No currently selected row of ""Job"" table.';ru='Не выбрана строка задания.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		Возврат;
	КонецЕсли;
	
	СтрокиПутевогоЛиста = Новый Массив;
	СтрокиПутевогоЛиста.Добавить(Элементы.Задание.ТекущиеДанные.НомерСтроки-1);
	ПараметрыЗаполненияТТД = Новый Структура("СтрокиПутевогоЛиста", СтрокиПутевогоЛиста);
	
	Если Модифицированность Или Объект.Ссылка.Пустая() Тогда
		ТекстНСТР = НСтр("en='To perform this operation it is necessary to record the document. Continue?';
			|ru='Для выполнения данной операции необходимо записать документ. Продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("СоздатьТТДПоСтрокамЗаданияФрагмент", ЭтотОбъект, ПараметрыЗаполненияТТД),
			ТекстНСТР, РежимДиалогаВопрос.ОКОтмена);
	Иначе
		СоздатьТТДПоСтрокамЗаданияЗавершение(ПараметрыЗаполненияТТД);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьТТДПоКонтрагентуСтрокиЗадания(Команда)
	
	Если Элементы.Задание.ТекущиеДанные = Неопределено Тогда
		ТекстНСТР = НСтр("en='No currently selected row of ""Job"" table.';ru='Не выбрана строка задания.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		Возврат;
	КонецЕсли;
		
	СтрокиПутевогоЛиста = Новый Массив;
	ТекКонтрагент = Элементы.Задание.ТекущиеДанные.Контрагент;
	Для Каждого ТекСтрока Из Объект.Задание Цикл
		Если ТекСтрока.Контрагент = ТекКонтрагент Тогда
			СтрокиПутевогоЛиста.Добавить(ТекСтрока.НомерСтроки-1);
		КонецЕсли;
	КонецЦикла;
	ПараметрыЗаполненияТТД = Новый Структура("СтрокиПутевогоЛиста", СтрокиПутевогоЛиста);
	
	Если Модифицированность Или Объект.Ссылка.Пустая() Тогда
		ТекстНСТР = НСтр("en='To perform this operation it is necessary to record the document. Continue?';
			|ru='Для выполнения данной операции необходимо записать документ. Продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("СоздатьТТДПоСтрокамЗаданияФрагмент", ЭтотОбъект, ПараметрыЗаполненияТТД),
			ТекстНСТР, РежимДиалогаВопрос.ОКОтмена);
	Иначе
		СоздатьТТДПоСтрокамЗаданияЗавершение(ПараметрыЗаполненияТТД);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьТТДДляКаждогоКонтрагента(Команда)
	
	Если Объект.Задание.Количество() = 0 Тогда
		ТекстНСТР = НСтр("en='""Job"" table empty.';ru='В задании нет ни одной строки.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		Возврат;
	КонецЕсли;
	
	мсвКонтрагенты = Новый Массив;
	Для Каждого ТекСтрока Из Объект.Задание Цикл
		Если мсвКонтрагенты.Найти(ТекСтрока.Контрагент) = Неопределено Тогда
			мсвКонтрагенты.Добавить(ТекСтрока.Контрагент);
		КонецЕсли;
	КонецЦикла;
	
	НаборыСтрокПутевогоЛиста = Новый Массив;
	Для Каждого ТекКонтрагент Из мсвКонтрагенты Цикл
		СтрокиПутевогоЛиста = Новый Массив;
		Для Каждого ТекСтрока Из Объект.Задание Цикл
			Если ТекСтрока.Контрагент = ТекКонтрагент Тогда
				СтрокиПутевогоЛиста.Добавить(ТекСтрока.НомерСтроки-1);
			КонецЕсли;
		КонецЦикла;
		НаборыСтрокПутевогоЛиста.Добавить(СтрокиПутевогоЛиста);
	КонецЦикла;
	ПараметрыЗаполненияТТД = Новый Структура("НаборыСтрокПутевогоЛиста", НаборыСтрокПутевогоЛиста);
	
	Если Модифицированность Или Объект.Ссылка.Пустая() Тогда
		ТекстНСТР = НСтр("en='To perform this operation it is necessary to record the document. Continue?';
			|ru='Для выполнения данной операции необходимо записать документ. Продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("СоздатьТТДПоСтрокамЗаданияФрагмент", ЭтотОбъект, ПараметрыЗаполненияТТД),
			ТекстНСТР, РежимДиалогаВопрос.ОКОтмена);
	Иначе
		СоздатьТТДПоСтрокамЗаданияЗавершение(ПараметрыЗаполненияТТД);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьТТДДляКаждойСтрокиЗадания(Команда)
	
	Если Объект.Задание.Количество() = 0 Тогда
		ТекстНСТР = НСтр("en='""Job"" table empty.';ru='В задании нет ни одной строки.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		Возврат;
	КонецЕсли;
	
	НаборыСтрокПутевогоЛиста = Новый Массив;
	Для Каждого ТекСтрока Из Объект.Задание Цикл
		СтрокиПутевогоЛиста = Новый Массив;
		СтрокиПутевогоЛиста.Добавить(ТекСтрока.НомерСтроки-1);
		НаборыСтрокПутевогоЛиста.Добавить(СтрокиПутевогоЛиста);
	КонецЦикла;
	ПараметрыЗаполненияТТД = Новый Структура("НаборыСтрокПутевогоЛиста", НаборыСтрокПутевогоЛиста);
	
	Если Модифицированность Или Объект.Ссылка.Пустая() Тогда
		ТекстНСТР = НСтр("en='To perform this operation it is necessary to record the document. Continue?';
			|ru='Для выполнения данной операции необходимо записать документ. Продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("СоздатьТТДПоСтрокамЗаданияФрагмент", ЭтотОбъект, ПараметрыЗаполненияТТД),
			ТекстНСТР, РежимДиалогаВопрос.ОКОтмена);
	Иначе
		СоздатьТТДПоСтрокамЗаданияЗавершение(ПараметрыЗаполненияТТД);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьТТДПоСтрокамЗаданияФрагмент(РезультатВопроса, ДопПараметры) Экспорт

    Если РезультатВопроса <> КодВозвратаДиалога.ОК Тогда
        Возврат;
    КонецЕсли;
    
    Если НЕ ПроверитьЗаполнениеДокумента() Тогда
        Возврат;
    КонецЕсли;
    
	Попытка
		флЗаписан = Записать();
	Исключение
		Возврат;
	КонецПопытки;
	
	Если НЕ флЗаписан Тогда
		Возврат;
	КонецЕсли;
	
	ДопПараметрыОбработчикОжидания = ДопПараметры;
	ПодключитьОбработчикОжидания("ОбработчикОжиданияСоздатьТТДПоСтрокамЗаданияЗавершение", 0.5, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикОжиданияСоздатьТТДПоСтрокамЗаданияЗавершение()
	
	СоздатьТТДПоСтрокамЗаданияЗавершение(ДопПараметрыОбработчикОжидания);
	ДопПараметрыОбработчикОжидания = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьТТДПоСтрокамЗаданияЗавершение(ДопПараметры)
	
	ПравоОрганизации = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация, ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.АвтоматическиРассчитыватьНовыеТТД"), Ложь);
	
	Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
		ПравоПоздразделения = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Подразделение, ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.АвтоматическиРассчитыватьНовыеТТД"), Ложь);
	Иначе
		ПравоПоздразделения = Ложь;
	КонецЕсли;
	
	Если ПравоОрганизации Или ПравоПоздразделения Тогда		
		СтруктураДокументов = СоздатьТТДПоСтрокамЗаданияЗавершениеНаСервере(ДопПараметры);
		
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияПредупреждение",
		ЭтотОбъект);	
		
		ПоказатьПредупреждение(Оповещение,СтруктураДокументов.ТекстПредупреждения,,НСтр("en='Warning';ru='Внимание'")); 	
	Иначе
		
		Если ТипЗнч(ДопПараметры) <> Тип("Структура") Тогда
			Возврат;
		КонецЕсли;
		
		Если ДопПараметры.Свойство("СтрокиПутевогоЛиста") Тогда
			ПараметрыОткрытия = Новый Структура;
			Если ДопПараметры.Свойство("ТТД") Тогда
				ПараметрыОткрытия.Вставить("Ключ", ДопПараметры.ТТД);
			КонецЕсли;
			ПараметрыОткрытия.Вставить("ВводТТДизПЛ", Истина);
			ПараметрыОткрытия.Вставить("ПЛ", Объект.Ссылка);
			ПараметрыОткрытия.Вставить("СтрокиПутевогоЛиста", ДопПараметры.СтрокиПутевогоЛиста);
			ОткрытьФорму("Документ.уатТТД.ФормаОбъекта", ПараметрыОткрытия);
		ИначеЕсли ДопПараметры.Свойство("НаборыСтрокПутевогоЛиста") Тогда
			Для Каждого НаборСтрок Из ДопПараметры.НаборыСтрокПутевогоЛиста Цикл
				ПараметрыОткрытия = Новый Структура;
				ПараметрыОткрытия.Вставить("ВводТТДизПЛ", Истина);
				ПараметрыОткрытия.Вставить("ПЛ", Объект.Ссылка);
				ПараметрыОткрытия.Вставить("СтрокиПутевогоЛиста", НаборСтрок);
				ОткрытьФорму("Документ.уатТТД.ФормаОбъекта", ПараметрыОткрытия,, Истина);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьИнтерфейс();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияПредупреждение(Параметры) Экспорт
	ДопОбработкаНеТребуется = Истина;
КонецПроцедуры

&НаСервере
Функция СоздатьТТДПоСтрокамЗаданияЗавершениеНаСервере(ДопПараметры)
	
	Если ТипЗнч(ДопПараметры) <> Тип("Структура") Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ДокументовСоздано    = 0;
	ДокументовСоздать    = 0;
	СоответствиеСсылок   = Новый Соответствие();
	мСсылкиНаДокументы   = Новый Массив();
	Сообщение 			 = Новый СообщениеПользователю();
	мСтрок 				 = Новый Массив();
	ТекстОшибки			 = "";
	ТекстПервойСтроки = НСтр("en=''; ru='Создано ТТД: %1 из %2%3'");
	
	
	Если ДопПараметры.Свойство("СтрокиПутевогоЛиста") Тогда
		
		ДокументовСоздать = 1;
		
		мТТД = Документы.уатТТД.СоздатьДокумент();
		мТТД.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийТТД.ПоПутевомуЛисту");
		мТТД.ДополнительныеСвойства.Вставить("СтрокиПутевогоЛиста", ДопПараметры.СтрокиПутевогоЛиста);
		мТТД.Заполнить(Объект.Ссылка);
				
		ДанныеОбменаССервером = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, УчитыватьНДС, Дата");
		ЗаполнитьЗначенияСвойств(ДанныеОбменаССервером, мТТД);
		// Получим данные с сервера
		ДанныеОбменаССервером.ДоговорКонтрагента = мТТД.ДоговорКонтрагента;
		ЗначенияДляЗаполнения = ИзменениеКонтрагентаСервер(ДанныеОбменаССервером);
		мТТД.ДоговорКонтрагента = ЗначенияДляЗаполнения.ДоговорКонтрагента;
		мТТД.ВалютаДокумента = мТТД.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		
		Если Не ЗначениеЗаполнено(мТТД.Контрагент) Тогда
			НомерСтрокиСОшибкой = ДопПараметры.СтрокиПутевогоЛиста[0] + 1;
			ТекстНСтр = НСтр("en=''; ru='В строке задания №%1 не заполнено поле ""Контрагент""'");
			ТекстОшибки = СтрШаблон(ТекстНСтр, НомерСтрокиСОшибкой);
		ИначеЕсли Не ЗначениеЗаполнено(мТТД.ДоговорКонтрагента) Тогда
			НомерСтрокиСОшибкой = ДопПараметры.СтрокиПутевогоЛиста[0] + 1;
			ТекстНСтр = НСтр("en=''; ru='В строке задания №%1 нет подходящего договора контрагента'");
			ТекстОшибки = СтрШаблон(ТекстНСтр, НомерСтрокиСОшибкой);
		ИначеЕсли Не ЗначениеЗаполнено(мТТД.ВалютаДокумента) Тогда
			НомерСтрокиСОшибкой = ДопПараметры.СтрокиПутевогоЛиста[0] + 1;
			ТекстНСтр = НСтр("en=''; ru='В строке задания №%1 не заполнена валюта документа'");
			ТекстОшибки = СтрШаблон(ТекстНСтр, НомерСтрокиСОшибкой);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			Сообщение.Текст = ТекстОшибки;
			Сообщение.Сообщить();
			ПерваяСтрока = СтрШаблон(ТекстПервойСтроки, ДокументовСоздано, ДокументовСоздать, Символы.ПС);
			мСтрок.Добавить(ПерваяСтрока);
			СтрокаВозврата = Новый ФорматированнаяСтрока(мСтрок);	
			СтруктураВозврата = Новый Структура("ТекстПредупреждения", СтрокаВозврата);
			Возврат СтруктураВозврата;
		КонецЕсли;
		
		уатРасчетыПоТарифам.РассчитатьСтоимостьУслугТТД(мТТД);
		
		Попытка
			мТТД.Записать(РежимЗаписиДокумента.Проведение);
			ДокументовСоздано = 1;
			НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(мТТД.Ссылка);
			СоответствиеСсылок.Вставить(мТТД.Ссылка, НавигационнаяСсылка);
			мСсылкиНаДокументы.Добавить(мТТД.Ссылка);
		Исключение
			ТекстОшибки = ОписаниеОшибки();
			Сообщение.Текст = ТекстОшибки;
			Сообщение.Сообщить();
		КонецПопытки;
				
	ИначеЕсли ДопПараметры.Свойство("НаборыСтрокПутевогоЛиста") Тогда
		
		ДокументовСоздать = ДопПараметры.НаборыСтрокПутевогоЛиста.Количество();
		
		Для Каждого НаборСтрок Из ДопПараметры.НаборыСтрокПутевогоЛиста Цикл
						
			мТТД = Документы.уатТТД.СоздатьДокумент();
			мТТД.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийТТД.ПоПутевомуЛисту");
			мТТД.ДополнительныеСвойства.Вставить("СтрокиПутевогоЛиста", НаборСтрок);
			мТТД.Заполнить(Объект.Ссылка);
			
			ДанныеОбменаССервером = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, УчитыватьНДС, Дата");
			ЗаполнитьЗначенияСвойств(ДанныеОбменаССервером, мТТД);
			// Получим данные с сервера
			ДанныеОбменаССервером.ДоговорКонтрагента = мТТД.ДоговорКонтрагента;
			ЗначенияДляЗаполнения = ИзменениеКонтрагентаСервер(ДанныеОбменаССервером);
			мТТД.ДоговорКонтрагента = ЗначенияДляЗаполнения.ДоговорКонтрагента;
			мТТД.ВалютаДокумента = мТТД.ДоговорКонтрагента.ВалютаВзаиморасчетов;
			
			Если Не ЗначениеЗаполнено(мТТД.Контрагент) Тогда
				НомерСтрокиСОшибкой = НаборСтрок[0] + 1;
				ТекстНСтр = НСтр("en=''; ru='В строке задания №%1 не заполнено поле ""Контрагент""'");
				Сообщение.Текст = СтрШаблон(ТекстНСтр, НомерСтрокиСОшибкой);
				Сообщение.Сообщить();
				Продолжить;
			ИначеЕсли Не ЗначениеЗаполнено(мТТД.ДоговорКонтрагента) Тогда
				НомерСтрокиСОшибкой = НаборСтрок[0] + 1;
				ТекстНСтр = НСтр("en=''; ru='В строке задания №%1 нет подходящего договора контрагента'");
				Сообщение.Текст = СтрШаблон(ТекстНСтр, НомерСтрокиСОшибкой);
				Сообщение.Сообщить();
				Продолжить;
			ИначеЕсли Не ЗначениеЗаполнено(мТТД.ВалютаДокумента) Тогда
				НомерСтрокиСОшибкой = НаборСтрок[0] + 1;
				ТекстНСтр = НСтр("en=''; ru='В строке задания №%1 не заполнена валюта документа'");
				Сообщение.Текст = СтрШаблон(ТекстНСтр, НомерСтрокиСОшибкой);
				Сообщение.Сообщить();
				Продолжить;
			КонецЕсли;

			уатРасчетыПоТарифам.РассчитатьСтоимостьУслугТТД(мТТД);
			
			Попытка   
				мТТД.Записать(РежимЗаписиДокумента.Проведение);
				ДокументовСоздано 	= ДокументовСоздано + 1;
				НавигационнаяСсылка = ПолучитьНавигационнуюСсылку(мТТД.Ссылка);
				СоответствиеСсылок.Вставить(мТТД.Ссылка, НавигационнаяСсылка);
				мСсылкиНаДокументы.Добавить(мТТД.Ссылка);
			Исключение	
				ТекстОшибки = ОписаниеОшибки();
				Сообщение.Текст = ТекстОшибки;
				Сообщение.Сообщить();
			КонецПопытки;
							
		КонецЦикла;
	КонецЕсли;
			
	ПерваяСтрока = СтрШаблон(ТекстПервойСтроки, ДокументовСоздано, ДокументовСоздать, Символы.ПС);
	мСтрок.Добавить(ПерваяСтрока);
	
	Для Каждого ТекСсылка Из мСсылкиНаДокументы Цикл 
		ТекСтрока = Новый ФорматированнаяСтрока(Строка(ТекСсылка) + Символы.ПС,,ЦветаСтиля.ГиперссылкаЦвет,,СоответствиеСсылок[ТекСсылка]); 
		мСтрок.Добавить(ТекСтрока);
	КонецЦикла;
	
	СтрокаВозврата = Новый ФорматированнаяСтрока(мСтрок);	
	СтруктураВозврата = Новый Структура("ТекстПредупреждения", СтрокаВозврата);
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИзменениеКонтрагентаСервер(ДанныеДляЗаполнения)
	СтруктураПараметровДляПолученияДоговора = 
		уатЗаполнениеДокументов.ПолучитьСтруктуруПараметровДляПолученияДоговораПродажи();
	
	ЗначенияДляЗаполнения = уатОбщегоНазначенияСервер.ПриИзмененииЗначенияКонтрагента(ДанныеДляЗаполнения, 
		СтруктураПараметровДляПолученияДоговора);
	Возврат ЗначенияДляЗаполнения;
КонецФункции

&НаКлиенте
Процедура Подписать(Команда)

	Если НЕ уатЗащищенныеФункцииКлиент.ИТСОтраслевой_ПроверкаДоступностиСервисов() Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКлючевойОперации = "уатОперации.ПодписаниеЭПЛизПЛУАТ";
	ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики(ИмяКлючевойОперации, 1);
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		мсвДокументы = Новый Массив;
		мсвДокументы.Добавить(Объект.Ссылка);
		флПодписан = уатЖурналыТранспортныхДокументов.ДокументыПодписаны(мсвДокументы);
		Если флПодписан Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
		Оповещ = Новый ОписаниеОповещения("ПодписатьЗаписатьДокумент", ЭтотОбъект);
		ТекстСообщ = "Перед подписанием документ будет проведен. Продолжить?";
		ПоказатьВопрос(Оповещ, ТекстСообщ, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
	КонецЕсли;
	
	ПодписатьЗавершение();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьЗаписатьДокумент(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		флОК = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		Если флОК Тогда
			ПодписатьЗавершение();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьЗавершение()
	
	Если флЭД Тогда
		мсвДокументы = Новый Массив();
		мсвДокументы.Добавить(Объект.Ссылка);
		
		ПараметрыОткрытия = Новый Структура("мсвДокументы", мсвДокументы);
		ОткрытьФорму("Документ.уатПутевойЛист.Форма.ФормаПодписейОтвЛица", ПараметрыОткрытия, ЭтотОбъект);
	Иначе
		ДопПараметры = Новый Структура("ОповеститьОЗавершении", Истина);
		уатЖурналыТранспортныхДокументовКлиент.Подписать(Объект.Ссылка, УникальныйИдентификатор, ДопПараметры);
	Конецесли;
	
КонецПроцедуры

&НаКлиенте
Процедура АннулироватьВсеПодписи(Команда)
	
	Оповещ = Новый ОписаниеОповещения("АннулироватьВсеПодписиОтвет", ЭтотОбъект);
	ПоказатьВопрос(Оповещ,
		"Будет удалена информация по подписям всех ответственных лиц и водителей Путевого листа! Продолжить?",
		РежимДиалогаВопрос.ОКОтмена);
		
КонецПроцедуры

&НаКлиенте
Процедура АннулироватьВсеПодписиОтвет(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		ДопПараметры = Новый Структура("АннулируемыеПодписи", Неопределено);
		уатЖурналыТранспортныхДокументов.ИзменитьСостоянияПодписейПЛ(Объект.Ссылка, ДопПараметры);
		ОтобразитьКартинкиПодписейОтветственныхЛиц();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьДокументы(Команда)
	уатОбщегоНазначенияКлиент.ОткрытьОтчетПоДокументамТСиВодителей(Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура ОформитьЭПЛ(Команда)
	Если Объект.Ссылка.Пустая() Тогда
		ТекстПредупреждения = НСтр("ru = 'Документ еще не записан. Ввод ЭПД возможен только на основании записанных документов.';
		|en = 'The document is not saved yet. You can enter the electronic shipping document only based on the saved documents.'");
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	уатОбменСГИСЭПДКлиент.ПроверитьИСоздатьЭПЛ(Объект.Ссылка, ЭтотОбъект); 
КонецПроцедуры

&НаКлиенте
Процедура ОформитьЭТрН(Команда)
	Если Объект.Ссылка.Пустая() Тогда
		ТекстПредупреждения = НСтр("ru = 'Документ еще не записан. Ввод ЭПД возможен только на основании записанных документов.';
		|en = 'The document is not saved yet. You can enter the electronic shipping document only based on the saved documents.'");
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	уатОбменСГИСЭПДКлиент.ПроверитьИСоздатьЭТрН(Объект.Ссылка, ЭтотОбъект); 
КонецПроцедуры

&НаКлиенте
Процедура Подписи_ПерейтиТитул1(Команда) 
	Если ИспользоватьОбменЭД Тогда
		ПараметрыОткрытия = Новый Структура();
		ПараметрыОткрытия.Вставить("Ключ", ЭПЛ);
		ПараметрыОткрытия.Вставить("ТитулОткрытия", ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул1"));
		ОткрытьФорму("Документ.ЭлектронныйПутевойЛист.Форма.ОсновнаяФорма", ПараметрыОткрытия, ЭтотОбъект);
	Иначе
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подписи_ПерейтиТитул2(Команда) 
	Если ИспользоватьОбменЭД Тогда
		ПараметрыОткрытия = Новый Структура();
		ПараметрыОткрытия.Вставить("Ключ", ЭПЛ);
		ПараметрыОткрытия.Вставить("ТитулОткрытия", ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул2"));
		ОткрытьФорму("Документ.ЭлектронныйПутевойЛист.Форма.ОсновнаяФорма", ПараметрыОткрытия, ЭтотОбъект);
	Иначе  
		СозданныеДокументыМедосмотр = уатЖурналыТранспортныхДокументов.СозданныеДокументыМедосмотраПоПЛ(Объект.Ссылка);
		
		ПараметрыОткрытия = Новый Структура();
		ПараметрыОткрытия.Вставить("Ключ", СозданныеДокументыМедосмотр.Предрейсовый1);
		ОткрытьФорму("Документ.уатЖурналМедицинскогоОсмотраВодителей.Форма.ФормаДокумента", ПараметрыОткрытия, ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подписи_ПерейтиТитул6(Команда)
	Если ИспользоватьОбменЭД Тогда
		ПараметрыОткрытия = Новый Структура();
		ПараметрыОткрытия.Вставить("Ключ", ЭПЛ);
		ПараметрыОткрытия.Вставить("ТитулОткрытия", ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул6"));
		ОткрытьФорму("Документ.ЭлектронныйПутевойЛист.Форма.ОсновнаяФорма", ПараметрыОткрытия, ЭтотОбъект);
	Иначе
		СозданныеДокументыМедосмотр = уатЖурналыТранспортныхДокументов.СозданныеДокументыМедосмотраПоПЛ(Объект.Ссылка);
		
		ПараметрыОткрытия = Новый Структура();
		ПараметрыОткрытия.Вставить("Ключ", СозданныеДокументыМедосмотр.Послерейсовый1);
		ОткрытьФорму("Документ.уатЖурналМедицинскогоОсмотраВодителей.Форма.ФормаДокумента", ПараметрыОткрытия, ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подписи_ПерейтиТитул3(Команда)  
	Если ИспользоватьОбменЭД Тогда
		ПараметрыОткрытия = Новый Структура(); 
		ПараметрыОткрытия.Вставить("Ключ", ЭПЛ);
		ПараметрыОткрытия.Вставить("ТитулОткрытия", ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул3"));
		ОткрытьФорму("Документ.ЭлектронныйПутевойЛист.Форма.ОсновнаяФорма", ПараметрыОткрытия, ЭтотОбъект); 
	Иначе
		СозданныеДокументыМедосмотр = уатЖурналыТранспортныхДокументов.СозданныеДокументыКонтроляТСПоПЛ(Объект.Ссылка);
		
		ПараметрыОткрытия = Новый Структура();
		ПараметрыОткрытия.Вставить("Ключ", СозданныеДокументыМедосмотр.Предрейсовый);
		ОткрытьФорму("Документ.уатЖурналПредрейсовогоИПослерейсовогоКонтроляТС.Форма.ФормаДокумента", ПараметрыОткрытия, ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подписи_ПерейтиТитул4(Команда)
	Если ИспользоватьОбменЭД Тогда
		ПараметрыОткрытия = Новый Структура();
		ПараметрыОткрытия.Вставить("Ключ", ЭПЛ);
		ПараметрыОткрытия.Вставить("ТитулОткрытия", ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул4"));
		ОткрытьФорму("Документ.ЭлектронныйПутевойЛист.Форма.ОсновнаяФорма", ПараметрыОткрытия, ЭтотОбъект); 
	Иначе
		СозданныеДокументыМедосмотр = уатЖурналыТранспортныхДокументов.СозданныеДокументыОсмотровОдометровПоПЛ(Объект.Ссылка);
		
		ПараметрыОткрытия = Новый Структура();
		ПараметрыОткрытия.Вставить("Ключ", СозданныеДокументыМедосмотр.Предрейсовый);
		ОткрытьФорму("Документ.уатЖурналУчетаПоказанийОдометра.Форма.ФормаДокумента", ПараметрыОткрытия, ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подписи_ПерейтиТитул5(Команда)
	Если ИспользоватьОбменЭД Тогда
		ПараметрыОткрытия = Новый Структура();
		ПараметрыОткрытия.Вставить("Ключ", ЭПЛ);
		ПараметрыОткрытия.Вставить("ТитулОткрытия", ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул5"));
		ОткрытьФорму("Документ.ЭлектронныйПутевойЛист.Форма.ОсновнаяФорма", ПараметрыОткрытия, ЭтотОбъект);
	Иначе
		СозданныеДокументыМедосмотр = уатЖурналыТранспортныхДокументов.СозданныеДокументыОсмотровОдометровПоПЛ(Объект.Ссылка);
		
		ПараметрыОткрытия = Новый Структура();
		ПараметрыОткрытия.Вставить("Ключ", СозданныеДокументыМедосмотр.Послерейсовый);
		ОткрытьФорму("Документ.уатЖурналУчетаПоказанийОдометра.Форма.ФормаДокумента", ПараметрыОткрытия, ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьQR(Команда)
	Если НЕ ЗначениеЗаполнено(ЭПЛ) Тогда
		ПоказатьПредупреждение(, НСтр("ru='Для формирования QR-кода необходимо создать ЭПЛ.'")); 
		Возврат;
	КонецЕсли;
	
	Если ЭПЛ_Титул4Подписан = Ложь Тогда
		ПоказатьПредупреждение(, НСтр("ru='Для формирования QR-кода требуется оформить титул внесения показаний одометра при выезде.'"));
	Иначе 
		СтруктураДанных = ПолучитьЗначенияРеквизитов(ЭПЛ, "УИДМинтранс,
		|ТитулОформлениеНомерПутевогоЛиста,ТитулОформлениеДатаПутевогоЛиста,ИдентификаторОформителя");
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("УИДМинтранс", СтруктураДанных.УИДМинтранс);
		ПараметрыФормы.Вставить("Отправитель", СтруктураДанных.ИдентификаторОформителя);
		ПараметрыФормы.Вставить("НомерДокумента", СтруктураДанных.ТитулОформлениеНомерПутевогоЛиста);
		ПараметрыФормы.Вставить("ДатаДокумента", СтруктураДанных.ТитулОформлениеДатаПутевогоЛиста); 
		ПараметрыФормы.Вставить("ТипДокумента", ПредопределенноеЗначение("Перечисление.ТипыДокументовЭДО.ЭПЛ"));
		
		ОткрытьФорму("ОбщаяФорма.ОтправкаQR", 
						ПараметрыФормы, 
						ЭтотОбъект, 
						УникальныйИдентификатор, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьQRСписок(Команда)
	ТекущиеДанные = Элементы.ЭлектронныеПеревозочныеДокументы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.ЭПД) = Тип("ДокументСсылка.ЭлектронныйПутевойЛист") Тогда
		
		Если ТекущиеДанные.ЭПД <> ЭПЛ Тогда
			ТекЭПЛ = СоответвиеПЛЭД.Получить(Объект.Ссылка);
			Если ТекЭПЛ <> Неопределено Тогда
				ТекЭПЛ_Титул4Подписан = ТекЭПЛ.ЕстьТитул5; 
			Иначе
				ПоказатьПредупреждение(, НСтр("ru='Для формирования сформировать ЭПЛ.'")); 
				Возврат;
			КонецЕсли;
		Иначе
			ТекЭПЛ_Титул4Подписан = ЭПЛ_Титул4Подписан;
		КонецЕсли;
		
	Иначе
		ПоказатьПредупреждение(, НСтр("ru='Для формирования QR-кода требуется выбрать ЭПЛ.'"));
		Возврат;
	Конецесли;
	
	Если ТекЭПЛ_Титул4Подписан = Ложь Тогда
		ПоказатьПредупреждение(, НСтр("ru='Для формирования QR-кода требуется оформить титул внесения показаний одометра при выезде.'"));
	Иначе 
		СтруктураДанных = ПолучитьЗначенияРеквизитов(ТекущиеДанные.ЭПД, "УИДМинтранс,
		|ТитулОформлениеНомерПутевогоЛиста,ТитулОформлениеДатаПутевогоЛиста,ИдентификаторОформителя");
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("УИДМинтранс", СтруктураДанных.УИДМинтранс);
		ПараметрыФормы.Вставить("Отправитель", СтруктураДанных.ИдентификаторОформителя);
		ПараметрыФормы.Вставить("НомерДокумента", СтруктураДанных.ТитулОформлениеНомерПутевогоЛиста);
		ПараметрыФормы.Вставить("ДатаДокумента", СтруктураДанных.ТитулОформлениеДатаПутевогоЛиста); 
		ПараметрыФормы.Вставить("ТипДокумента", ПредопределенноеЗначение("Перечисление.ТипыДокументовЭДО.ЭПЛ"));
		
		ОткрытьФорму("ОбщаяФорма.ОтправкаQR", 
						ПараметрыФормы, 
						ЭтотОбъект, 
						УникальныйИдентификатор, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры


#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	УстановитьДатыВыездаВозвращения();
	
	ИнициализацияДанныхАвтомобиля(Новый ОписаниеОповещения("ДатаПриИзмененииЗавершение", ЭтотОбъект));
	
	// Обновим картинки просроченных документов
	ОбновитьФлагПросроченныхДокументовТС();
	ОбновитьФлагПросроченныхДокументовВодителей();

КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	УстановитьДействителенДоПоУмолчанию();

КонецПроцедуры

&НаКлиенте
Процедура ВидПЛПриИзменении(Элемент)
	ВидПЛПриИзмененииСервер();
	
	УстановитьВидимость();
	
	// для обновления настроек формы
	ОбновитьИнтерфейс();
КонецПроцедуры

&НаСервере
Процедура ВидПЛПриИзмененииСервер()
	Если ВидПЛДоИзменения <> Объект.ВидПЛ Тогда
		СохранитьНастройкиСервер();
		УстановитьСистемныеНастройки();
		ВидПЛДоИзменения = Объект.ВидПЛ;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДатаВыездаПриИзменении(Элемент)
	
	Если Объект.ДатаВыезда > Дата('39991231235959') Тогда // М1.12.3999 23:59:59, максимальная дата.
		ТекстНСТР = Нстр("ru = 'Нельзя использовать даты больше 3999 года'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		Объект.ДатаВыезда = ПредДатаВыезда;
		Возврат;
	КонецЕсли;
	
	Если Объект.ДатаВыезда = ПредДатаВыезда Тогда
		Возврат;
	КонецЕсли;
	
	ДатаВыездаПриИзмененииСервер(Истина);
	ПроверитьПредыдущийПЛНеРассчитан();
	
	ПредДатаВыезда = Объект.ДатаВыезда;
	
	// Обновим картинки просроченных документов
	ОбновитьФлагПросроченныхДокументовТС();
	ОбновитьФлагПросроченныхДокументовВодителей();

КонецПроцедуры

&НаСервере
Процедура ДатаВыездаПриИзмененииСервер(флЗаполнятьЭкипаж = Ложь)
	Если ЗначениеЗаполнено(Объект.ТранспортноеСредство) Тогда
		// обновляем остатки топлива ТС при выезде
		ОснТопливо = Объект.ТранспортноеСредство.Модель.ОсновноеТопливо;
		ДопТопливо = Объект.ТранспортноеСредство.Модель.ДополнительноеТопливо;
		
		ОстатокТопливаВыезд = уатОбщегоНазначения.уатОстатокГСМнаТС(Объект.ДатаВыезда, Объект.ТранспортноеСредство, ОснТопливо, Объект.Ссылка);
		ОстатокТопливаВыездПриИзмененииСервер();
		
		Если ЗначениеЗаполнено(ДопТопливо) Тогда
			мсвСтрокиДопТопливо = Объект.РасходГСМ.НайтиСтроки(Новый Структура("ТС, ГСМ", Объект.ТранспортноеСредство, ДопТопливо));
			Если мсвСтрокиДопТопливо.Количество() > 0 Тогда
				мсвСтрокиДопТопливо[0].ОстатокПриВыезде = уатОбщегоНазначения.уатОстатокГСМнаТС(Объект.ДатаВыезда, Объект.ТранспортноеСредство, ДопТопливо, Объект.Ссылка);
				ПересчетРасходФактВСтрокеСервер(мсвСтрокиДопТопливо[0]);
			КонецЕсли;
		КонецЕсли;
		
		// обновляем остатки ТЖ ТС при выезде
		тблОстаткиТЖнаТС = уатПутевыеЛисты.ОстаткиТЖнаТС(Объект.ТранспортноеСредство, Объект.ДатаВыезда);
		Для Каждого ТекСтрокаТЖ Из тблОстаткиТЖнаТС Цикл
			мсвСтрокиТЖ = Объект.РасходГСМ.НайтиСтроки(Новый Структура("ТС, ГСМ", Объект.ТранспортноеСредство, ТекСтрокаТЖ.ТЖ));
			Если мсвСтрокиТЖ.Количество() > 0 Тогда
				мсвСтрокиТЖ[0].ОстатокПриВыезде = ТекСтрокаТЖ.Количество;
				ПересчетРасходФактВСтрокеСервер(мсвСтрокиТЖ[0]);
			КонецЕсли;
		КонецЦикла;
		
		Если ПолучитьЗначениеРеквизита(ПолучитьЗначениеРеквизита(Объект.ТранспортноеСредство, "Модель"),
			"НаличиеСпидометра") = Истина Тогда
			Объект.СпидометрВыезда = уатОбщегоНазначения.уатТекущийСпидометр(Объект.ТранспортноеСредство, Объект.ДатаВыезда);
		Иначе
			Объект.СпидометрВыезда = уатОбщегоНазначения.уатТекущийСчетчикМЧ(Объект.ТранспортноеСредство, Объект.ДатаВыезда);
		КонецЕсли;
	КонецЕсли;
	
	СписокПрицепы = Новый СписокЗначений;
	Для Каждого ТекПрицеп Из Объект.Прицепы Цикл 
		Если СписокПрицепы.НайтиПоЗначению(ТекПрицеп.ТС) = Неопределено Тогда
			СписокПрицепы.Добавить(ТекПрицеп.ТС);
		КонецЕсли;
	КонецЦикла;
	Для Каждого ТекЗадание Из Объект.Задание Цикл 
		Если ЗначениеЗаполнено(ТекЗадание.Прицеп1) И СписокПрицепы.НайтиПоЗначению(ТекЗадание.Прицеп1) = Неопределено Тогда
			СписокПрицепы.Добавить(ТекЗадание.Прицеп1,, Истина);
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекЗадание.Прицеп2) И СписокПрицепы.НайтиПоЗначению(ТекЗадание.Прицеп2) = Неопределено Тогда
			СписокПрицепы.Добавить(ТекЗадание.Прицеп2,, Истина);
		КонецЕсли;
	КонецЦикла;
	
	ЗаполнятьПробегПрицепов = ПолучитьПраваИНастройкиПользователя(Объект.Организация,
		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ЗаполнятьПробегПрицепов"));
		
	Для Каждого ТекПрицеп Из СписокПрицепы Цикл 
		// обновляем остатки топлива прицепов при выезде
		ТопливоПрицеп = ТекПрицеп.Значение.Модель.ОсновноеТопливо;
		Если ЗначениеЗаполнено(ТопливоПрицеп) Тогда
			мсвСтрокиТопливоПрицеп = Объект.РасходГСМ.НайтиСтроки(Новый Структура("ТС, ГСМ", ТекПрицеп.Значение, ТопливоПрицеп));
			Если мсвСтрокиТопливоПрицеп.Количество() > 0 Тогда
				мсвСтрокиТопливоПрицеп[0].ОстатокПриВыезде = уатОбщегоНазначения.уатОстатокГСМнаТС(Объект.ДатаВыезда, ТекПрицеп.Значение, ТопливоПрицеп, Объект.Ссылка);
				ПересчетРасходФактВСтрокеСервер(мсвСтрокиТопливоПрицеп[0]);
			КонецЕсли;
		КонецЕсли;
		
		// обновляем остатки ТЖ прицепов при выезде
		тблОстаткиТЖнаПрицепе = уатПутевыеЛисты.ОстаткиТЖнаТС(ТекПрицеп.Значение, Объект.ДатаВыезда);
		Для Каждого ТекСтрокаТЖ Из тблОстаткиТЖнаПрицепе Цикл
			мсвСтрокиТЖ = Объект.РасходГСМ.НайтиСтроки(Новый Структура("ТС, ГСМ", ТекПрицеп.Значение, ТекСтрокаТЖ.ТЖ));
			Если мсвСтрокиТЖ.Количество() > 0 Тогда
				мсвСтрокиТЖ[0].ОстатокПриВыезде = ТекСтрокаТЖ.Количество;
				ПересчетРасходФактВСтрокеСервер(мсвСтрокиТЖ[0]);
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ТекПрицеп.Пометка Тогда
			мсвСтрокаПрицеп = Объект.Прицепы.НайтиСтроки(Новый Структура("ТС", ТекПрицеп.Значение));
			Если ТекПрицеп.Значение.Модель.НаличиеСпидометра Тогда 
				Если ТекПрицеп.Значение.Модель.ВидМоделиТС <> Перечисления.уатВидыМоделейТС.Прицеп ИЛИ ЗаполнятьПробегПрицепов Тогда
					мсвСтрокаПрицеп[0].СчетчикМЧВыезда = уатОбщегоНазначения.уатТекущийСпидометр(ТекПрицеп.Значение, Объект.ДатаВыезда);
				КонецЕсли;
			Иначе 
				мсвСтрокаПрицеп[0].СчетчикМЧВыезда = уатОбщегоНазначения.уатТекущийСчетчикМЧ(ТекПрицеп.Значение, Объект.ДатаВыезда);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если Объект.ДатаВыезда > Объект.ДатаВозвращения Тогда
		Объект.ДатаВозвращения = Объект.ДатаВыезда;
		ДатаВозвращенияПриИзмененииСервер(флЗаполнятьЭкипаж);
	Иначе
		Если ЗначениеЗаполнено(Объект.ТранспортноеСредство) И флЗаполнятьЭкипаж Тогда
			уатОбщегоНазначения.ЗаполнитьЭкипажТС(Объект.ТранспортноеСредство, Объект.Организация, Объект.ДатаВыезда,
				Объект.Водитель1, Объект.Водитель2, Объект.Сотрудник1, Объект.Сотрудник2,
				Объект.Ссылка.Пустая(), Объект.ДатаВозвращения, Истина, Истина);
			флЗаполнятьЭкипаж = Ложь;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДатаВозвращенияПриИзменении(Элемент)
	
	Если Объект.ДатаВозвращения > Дата('39991231235959') Тогда // М1.12.3999 23:59:59, максимальная дата.
		ТекстНСТР = Нстр("ru = 'Нельзя использовать даты больше 3999 года'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		Объект.ДатаВозвращения = Объект.ДатаЗакрытия;
	КонецЕсли;
	
	Объект.ДатаЗакрытия = ?(Объект.ДатаВозвращения > Объект.ДатаВыезда, Объект.ДатаВозвращения - 1, Объект.ДатаВозвращения);
	Если Объект.ДатаВыезда > Объект.ДатаВозвращения Тогда
		Объект.ДатаВыезда = Объект.ДатаВозвращения;
		ДатаВыездаПриИзменении(Неопределено);
	Иначе
		ДатаВозвращенияПриИзмененииСервер(Истина);
	КонецЕсли;
	
	// Обновим картинки просроченных документов
	ОбновитьФлагПросроченныхДокументовТС();
	ОбновитьФлагПросроченныхДокументовВодителей();

КонецПроцедуры

&НаСервере
Процедура ДатаВозвращенияПриИзмененииСервер(флЗаполнятьЭкипаж = Ложь)
	Объект.ДатаЗакрытия = ?(Объект.ДатаВозвращения > Объект.ДатаВыезда, Объект.ДатаВозвращения - 1, Объект.ДатаВозвращения);
	
	Если Объект.ДатаВыезда > Объект.ДатаВозвращения Тогда
		Объект.ДатаВыезда = Объект.ДатаВозвращения;
		ДатаВыездаПриИзмененииСервер(флЗаполнятьЭкипаж);
	Иначе
		Если флЗаполнятьЭкипаж Тогда
			уатОбщегоНазначения.ЗаполнитьЭкипажТС(Объект.ТранспортноеСредство, Объект.Организация, Объект.ДатаВыезда,
				Объект.Водитель1, Объект.Водитель2, Объект.Сотрудник1, Объект.Сотрудник2,
				Объект.Ссылка.Пустая(), Объект.ДатаВозвращения, Истина, Истина);
			флЗаполнятьЭкипаж = Ложь;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ПриИзмененииОрганизации();
	УставновитьВидимостьОтветвенныеЛица();
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииОрганизации(ВызовПриОткрытии = Ложь)
	Если НЕ мКопированиеДокумента Тогда
		СтруктураОбъектовНастроек = Новый Структура;
		СтруктураОбъектовНастроек.Вставить("Организация", Объект.Организация);
		СтруктураОбъектовНастроек.Вставить("Подразделение", ПодразделениеНастройки());
		ТекПользователь = Пользователи.АвторизованныйПользователь();
	    СтруктураОбъектовНастроек.Вставить("Пользователь", ТекПользователь);
		ОтветствЛица = уатПутевыеЛисты.ОтветственныеЛицаПоУмолчанию(СтруктураОбъектовНастроек, Объект.дата);
		ЗаполнитьЗначенияСвойств(Объект, ОтветствЛица);
		
		ВариантМедосмотр         = ?(ЗначениеЗаполнено(Объект.Медорганизация), 1, 0);
		ВариантТехконтроль       = ?(ЗначениеЗаполнено(Объект.КонтрольТранспорта), 1, 0);
		ВариантПоказанияОдометра = ?(ЗначениеЗаполнено(Объект.ПоказанияОдометра), 1, 0);

	КонецЕсли;
	
	УстановитьФорматированиеТочностиОстатковГСМ();
	УстановитьДействителенДоПоУмолчанию();
	
	Если ПолучитьФункциональнуюОпцию("уатИспользоватьУчетДоходовИРасходов") Тогда
		Если Не уатОбщегоНазначения.уатНайтиПланЗатрат(Объект.ПланЗатрат, Объект.Организация, Объект.ТранспортноеСредство,
			ПолучитьЗначениеРеквизита(Объект.ТранспортноеСредство, "Колонна")) Тогда
			
			ТекстНСТР = НСтр("en='Cost plan is not found!';ru='Не найден план затрат!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		КонецЕсли;	
	КонецЕсли;
	
	Элементы.ПланЗатрат.Видимость = ПолучитьФункциональнуюОпцию("уатИспользоватьУчетДоходовИРасходов");
	
	ПоказыватьЗаданиеПЛ = ПолучитьПраваИНастройкиПользователя(Объект.Организация,
		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ПоказыватьЗаданиеПЛ"));
	Элементы.ГруппаЗадание.Видимость = ПоказыватьЗаданиеПЛ;
	Если НЕ ПоказыватьЗаданиеПЛ Тогда
		Объект.Задание.Очистить();
	КонецЕсли;
	
	Если ПолучитьПраваИНастройкиПользователя(Объект.Организация, ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ИспользоватьУчетНормативногоРасходаТехЖидкостей")) = ЛОЖЬ Тогда
		мсвСтрокУдаления = Новый Массив;
		Для Каждого ТекСтрока Из Объект.РасходГСМ Цикл
			Если уатГСМ.ЭтоТехническаяЖидкость(ТекСтрока.ГСМ) Тогда
				мсвСтрокУдаления.Добавить(ТекСтрока);
			КонецЕсли;
		КонецЦикла;
		Для Каждого ТекСтрока Из мсвСтрокУдаления Цикл
			Объект.РасходГСМ.Удалить(ТекСтрока);
		КонецЦикла;
	КонецЕсли;
		
	Если (НЕ ЗначениеЗаполнено(Объект.ТранспортноеСредство)) И
			(НЕ ЗначениеЗаполнено(Объект.ВидПЛ)) И ВызовПриОткрытии = Истина
		ИЛИ (НЕ ЗначениеЗаполнено(Объект.ТранспортноеСредство)) И ВызовПриОткрытии = Ложь Тогда
		СтруктураОбъектовНастроек = Новый Структура;
		СтруктураОбъектовНастроек.Вставить("Организация", Объект.Организация);
		СтруктураОбъектовНастроек.Вставить("Пользователь", ПользователиКлиентСервер.АвторизованныйПользователь());
		Объект.ВидПЛ = ПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ОсновнойВидПЛ"));
	КонецЕсли;
	
	Если Объект.РежимРасчетаВыработки.Пустая() Тогда
		Объект.РежимРасчетаВыработки = ПолучитьПраваИНастройкиПользователя(Объект.Организация,
			ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ОсновнойРежимРасчетаВыработкиПЛ"));
	КонецЕсли;
	
	Если ВызовПриОткрытии = Истина И Объект.ДатаВыезда = '00010101' И Объект.ДатаВозвращения = '00010101' ИЛИ
		ВызовПриОткрытии = Ложь Тогда
		
		УстановитьДатыВыездаВозвращения(Истина);
	КонецЕсли;
	
	СтруктураОбъектовНастроек = Новый Структура;
	СтруктураОбъектовНастроек.Вставить("Организация", Объект.Организация);
	СтруктураОбъектовНастроек.Вставить("Подразделение", ПодразделениеНастройки());
	Объект.РасчетФактРасходаГСМ = ПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, "РасчетФактРасходаГСМ");

	Если ЗначениеЗаполнено(Объект.НомерПачки) Тогда
		Объект.НомерПачки = 0;
	КонецЕсли;	
	Элементы.НомерПачки.Видимость = ПолучитьПраваИНастройкиПользователя(Объект.Организация,
		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ИспользоватьУчетПутЛистовПоПачкам"));
		
	Если Объект.Организация <> Справочники.Организации.ПустаяСсылка() Тогда
		мВидимостьРеквизитовНДС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
			ПланыВидовХарактеристик.уатПраваИНастройки.УчитыватьНДС);
	КонецЕсли;
	
	НастроитьВидимостьВыработки();
	
	ОбновитьКэшПравПоGPS();
	УстановитьВозможностьРедактированияДанныхПоGPS();
КонецПроцедуры

&НаКлиенте
Процедура ОстатокТопливаВыездПриИзменении(Элемент)
	ОснТопливо = ПолучитьЗначениеРеквизита(ПолучитьЗначениеРеквизита(Объект.ТранспортноеСредство, "Модель"),
		"ОсновноеТопливо");
	Для Каждого ТекСтрока Из Объект.РасходГСМ Цикл
		Если Объект.ТранспортноеСредство = ТекСтрока.ТС И ОснТопливо = ТекСтрока.ГСМ Тогда
			ТекСтрока.ОстатокПриВыезде = ОстатокТопливаВыезд;
			ПересчетРасходФактВСтроке(ТекСтрока);
			Прервать;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОстатокТопливаВыездПриИзмененииСервер()
	ОснТопливо = ПолучитьЗначениеРеквизита(ПолучитьЗначениеРеквизита(Объект.ТранспортноеСредство, "Модель"), "ОсновноеТопливо");
	Для Каждого ТекСтрока Из Объект.РасходГСМ Цикл
		Если Объект.ТранспортноеСредство = ТекСтрока.ТС И ОснТопливо = ТекСтрока.ГСМ Тогда
			ТекСтрока.ОстатокПриВыезде = ОстатокТопливаВыезд;
			ПересчетРасходФактВСтрокеСервер(ТекСтрока);
			Прервать;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОстатокТопливаВозвратПриИзменении(Элемент)
	ОснТопливо = ПолучитьЗначениеРеквизита(ПолучитьЗначениеРеквизита(Объект.ТранспортноеСредство, "Модель"),
		"ОсновноеТопливо");
	Для Каждого ТекСтрока Из Объект.РасходГСМ Цикл
		Если Объект.ТранспортноеСредство = ТекСтрока.ТС И ОснТопливо = ТекСтрока.ГСМ Тогда
			ТекСтрока.ОстатокПриВозвращении = ОстатокТопливаВозврат;
			ПересчетРасходФактВСтроке(ТекСтрока);
			Прервать;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОстатокТопливаВозвратПриИзмененииСервер()
	ОснТопливо = ПолучитьЗначениеРеквизита(ПолучитьЗначениеРеквизита(Объект.ТранспортноеСредство, "Модель"), "ОсновноеТопливо");
	Для Каждого ТекСтрока Из Объект.РасходГСМ Цикл
		Если Объект.ТранспортноеСредство = ТекСтрока.ТС И ОснТопливо = ТекСтрока.ГСМ Тогда
			ТекСтрока.ОстатокПриВозвращении = ОстатокТопливаВозврат;
			ПересчетРасходФактВСтрокеСервер(ТекСтрока);
			Прервать;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ВыдатьГорючееНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ДополнительныеПараметры = Новый Структура("ЗначениеГСМДоИзменения", Объект.ВыдатьГорючее);
	ОписаниеОповещенияЗакр  = Новый ОписаниеОповещения("ОписаниеОповещенияВыдатьГорючее", ЭтотОбъект, ДополнительныеПараметры);
	уатЗащищенныеФункцииКлиент.СписокГСМдляТС(Объект.Организация, Объект.ТранспортноеСредство,
		ПредопределенноеЗначение("Перечисление.уатГруппыГСМ.Топливо"),,, ОписаниеОповещенияЗакр);
КонецПроцедуры

// Подключаемый динамически обработчик оповещения
&НаКлиенте
Процедура ОписаниеОповещенияВыдатьГорючее(Результат, ДопПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		Объект.ВыдатьГорючее = Результат;
		Если ДопПараметры.ЗначениеГСМДоИзменения <> Результат Тогда 
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыдатьГорючееАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	мсвГруппДляОтбора = Новый Массив;
	мсвГруппДляОтбора.Добавить(ПредопределенноеЗначение("Перечисление.уатГруппыГСМ.Топливо"));
	ДопПараметры = Новый Структура("ТС, Организация, УчитыватьТЖ", Объект.ТранспортноеСредство, Объект.Организация, Ложь);
	ДанныеВыбора = уатГСМ.ПолучитьСписокАвтоподбораПоляГСМ(Текст, мсвГруппДляОтбора, ДопПараметры);
КонецПроцедуры

&НаКлиенте
Процедура ВыдатьГорючееОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ПараметрыПолученияДанных.СтрокаПоиска = "";
КонецПроцедуры

&НаКлиенте
Процедура РежимРаботыТСПриИзменении(Элемент)
	УстановитьДатыВыездаВозвращения(Истина);
	ПроверитьПредыдущийПЛНеРассчитан();
КонецПроцедуры

&НаКлиенте
Процедура ТемператураПриИзменении(Элемент)
	ПроцентИзмененияНормыТемпература = Строка(уатПутевыеЛисты.уатПолучитьКоэффициентИзмененияНормыДляТемпературы(
		Объект.Температура)) + "%";
КонецПроцедуры

&НаКлиенте
Процедура СпидометрВыездаПриИзменении(Элемент)
	ОбновитьНадписьПробег();
	ЗаполнитьПробегПоУмолчаниюПриРаботеНаДвухВидахТоплива();
КонецПроцедуры

&НаКлиенте
Процедура СпидометрВозвращенияПриИзменении(Элемент)
	ОбновитьНадписьПробег();
	ЗаполнитьПробегПоУмолчаниюПриРаботеНаДвухВидахТоплива();
КонецПроцедуры

&НаКлиенте
Процедура ТранспортноеСредствоПриИзменении(Элемент)
	Если АвтомобильОлд = Объект.ТранспортноеСредство Тогда
		Возврат;
	КонецЕсли;
	флВопросПереадресовкаТСЭПД = Истина;
	ИнициализацияДанныхАвтомобиля(Новый ОписаниеОповещения("ТранспортноеСредствоПриИзмененииЗавершение", ЭтотОбъект));
КонецПроцедуры

&НаКлиенте
Процедура ТранспортноеСредствоПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ИспользоватьУчетЗатрат()
		И Не уатОбщегоНазначения.уатНайтиПланЗатрат(Объект.ПланЗатрат, Объект.Организация, Объект.ТранспортноеСредство,
		ПолучитьЗначениеРеквизита(Объект.ТранспортноеСредство, "Колонна")) Тогда 
		
		ТекстНСТР = НСтр("en='Cost plan is not found!';ru='Не найден план затрат!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
	КонецЕсли;
	
	АвтомобильОлд = Объект.ТранспортноеСредство;
	
	ВывестиТаблицуВыработкаТС();
	ВывестиТаблицуВыработкаСотрудников();
	
	ОбновитьФлагПросроченныхДокументовТС();
	ОбновитьФлагПросроченныхДокументовВодителей();
	ОбновитьНадписьПробег();
	ЗаполнитьПробегПоУмолчаниюПриРаботеНаДвухВидахТоплива();
	СформироватьСписокВыбораТСвЗаправкахГСМ();
	ОбновитьСписокВыбораЭкипажа();

КонецПроцедуры

&НаКлиенте
Процедура ТранспортноеСредствоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.РеквизитТСНачалоВыбора(Элемент, Объект.ТранспортноеСредство, ДанныеВыбора, СтандартнаяОбработка, СтруктураОтбораТС());
КонецПроцедуры

&НаКлиенте
Процедура ТранспортноеСредствоАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.РеквизитТСАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка, СтруктураОтбораТС());
КонецПроцедуры

&НаКлиенте
Процедура ТранспортноеСредствоОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.РеквизитТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка, СтруктураОтбораТС());
КонецПроцедуры

&НаКлиенте
Процедура Водитель1ПриИзменении(Элемент)
	флВопросПереадресовкаТСЭПД = Истина;
	ПриИзменииВодителяСервер(1);
	ОбновитьФОВПриИзмененииВодителя();
	ВывестиТаблицуЗП(ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ПриИзменииВодителяСервер(НомерВодителя)
	ИнициализацияЗП();
	ВывестиТаблицуВыработкаСотрудников();
	ОбновитьФлагПросроченныхДокументовВодителей(НомерВодителя);
КонецПроцедуры

&НаКлиенте
Процедура Водитель1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ДиалогВыбораСотрудника(Элемент, Объект.Водитель1, Новый Структура("Организация", Объект.Организация), СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Водитель1Открытие(Элемент, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ОткрытьФормуСотрудника(Объект.Водитель1, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Водитель1АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Ожидание = 0 Тогда //выбор из списка
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура Водитель1ОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура Водитель2ПриИзменении(Элемент)
	флВопросПереадресовкаТСЭПД = Истина;
	ПриИзменииВодителяСервер(2);
	ОбновитьФОВПриИзмененииВодителя();
	ВывестиТаблицуЗП(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Водитель2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ДиалогВыбораСотрудника(Элемент, Объект.Водитель2, Новый Структура("Организация", Объект.Организация), СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Водитель2Открытие(Элемент, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ОткрытьФормуСотрудника(Объект.Водитель2, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Водитель2АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Ожидание = 0 Тогда //выбор из списка
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура Водитель2ОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура Сотрудник1ПриИзменении(Элемент)
	ПриИзменииВодителяСервер(3);
	ОбновитьФОВПриИзмененииВодителя();
	ВывестиТаблицуЗП(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Сотрудник1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ДиалогВыбораСотрудника(Элемент, Объект.Сотрудник1, Новый Структура("Организация", Объект.Организация), СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Сотрудник1Открытие(Элемент, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ОткрытьФормуСотрудника(Объект.Сотрудник1, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Сотрудник1АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Ожидание = 0 Тогда //выбор из списка
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура Сотрудник1ОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура Сотрудник2ПриИзменении(Элемент)
	ПриИзменииВодителяСервер(4);
	ОбновитьФОВПриИзмененииВодителя();
	ВывестиТаблицуЗП(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Сотрудник2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ДиалогВыбораСотрудника(Элемент, Объект.Сотрудник2, Новый Структура("Организация", Объект.Организация), СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Сотрудник2Открытие(Элемент, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ОткрытьФормуСотрудника(Объект.Сотрудник2, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Сотрудник2АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Ожидание = 0 Тогда //выбор из списка
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура Сотрудник2ОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура МедработникВыездНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если ВариантМедосмотр = 0 Тогда
		уатЗащищенныеФункцииКлиент.ДиалогВыбораСотрудника(Элемент, Объект.МедработникВыезд, Новый Структура("Организация", Объект.Организация), СтандартнаяОбработка);
	Иначе 
		СтандартнаяОбработка = Ложь;
		ПараметрФормы = Новый Структура("РежимВыбора, Отборы", Истина, Новый Структура("Контрагент", Объект.Медорганизация));
		ОткрытьФорму("Справочник.ФизическиеЛица.ФормаВыбора", ПараметрФормы, Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МедработникВыездОткрытие(Элемент, СтандартнаяОбработка)
	Если ВариантМедосмотр = 0 Тогда
		уатЗащищенныеФункцииКлиент.ОткрытьФормуСотрудника(Объект.МедработникВыезд, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МедработникВыездАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если ВариантМедосмотр = 0 Тогда
		СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
		уатИнтерфейсВводаСотрудников.СотрудникАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МедработникВыездОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	Если ВариантМедосмотр = 0 Тогда
		СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
		уатИнтерфейсВводаСотрудников.СотрудникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МедработникВозвратНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если ВариантМедосмотр = 0 Тогда
		уатЗащищенныеФункцииКлиент.ДиалогВыбораСотрудника(Элемент, Объект.МедработникВозврат, Новый Структура("Организация", Объект.Организация), СтандартнаяОбработка);
	Иначе 
		СтандартнаяОбработка = Ложь;
		ПараметрФормы = Новый Структура("РежимВыбора, Отборы", Истина, Новый Структура("Контрагент", Объект.Медорганизация));
		ОткрытьФорму("Справочник.ФизическиеЛица.ФормаВыбора", ПараметрФормы, Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МедработникВозвратОткрытие(Элемент, СтандартнаяОбработка)
	Если ВариантМедосмотр = 0 Тогда
		уатЗащищенныеФункцииКлиент.ОткрытьФормуСотрудника(Объект.МедработникВозврат, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МедработникВозвратАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если ВариантМедосмотр = 0 Тогда
		СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
		уатИнтерфейсВводаСотрудников.СотрудникАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МедработникВозвратОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	Если ВариантМедосмотр = 0 Тогда
		СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
		уатИнтерфейсВводаСотрудников.СотрудникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыдалДиспетчерНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ДиалогВыбораСотрудника(Элемент, Объект.ВыдалДиспетчер, Новый Структура("Организация", Объект.Организация), СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ВыдалДиспетчерОткрытие(Элемент, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ОткрытьФормуСотрудника(Объект.ВыдалДиспетчер, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ВыдалДиспетчерАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура ВыдалДиспетчерОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура ВыпустилМеханикНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если ВариантТехконтроль = 0 Тогда
		уатЗащищенныеФункцииКлиент.ДиалогВыбораСотрудника(Элемент, Объект.ВыпустилМеханик, Новый Структура("Организация", Объект.Организация), СтандартнаяОбработка); 
	Иначе
		СтандартнаяОбработка = Ложь;
		ПараметрФормы = Новый Структура("РежимВыбора, Отборы", Истина, Новый Структура("Контрагент", Объект.КонтрольТранспорта));
		ОткрытьФорму("Справочник.ФизическиеЛица.ФормаВыбора", ПараметрФормы, Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыпустилМеханикОткрытие(Элемент, СтандартнаяОбработка)
	Если ВариантТехконтроль = 0 Тогда
		уатЗащищенныеФункцииКлиент.ОткрытьФормуСотрудника(Объект.ВыпустилМеханик, СтандартнаяОбработка); 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыпустилМеханикАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если ВариантТехконтроль = 0 Тогда
		СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
		уатИнтерфейсВводаСотрудников.СотрудникАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыпустилМеханикОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	Если ВариантТехконтроль = 0 Тогда
		СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
		уатИнтерфейсВводаСотрудников.СотрудникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров); 
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПринялДиспетчерНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ДиалогВыбораСотрудника(Элемент, Объект.ПринялДиспетчер, Новый Структура("Организация", Объект.Организация), СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПринялДиспетчерОткрытие(Элемент, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ОткрытьФормуСотрудника(Объект.ПринялДиспетчер, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПринялДиспетчерАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура ПринялДиспетчерОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура ПринялМеханикНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если ВариантТехконтроль = 0 Тогда
		уатЗащищенныеФункцииКлиент.ДиалогВыбораСотрудника(Элемент, Объект.ПринялМеханик, Новый Структура("Организация", Объект.Организация), СтандартнаяОбработка);
	Иначе 
		СтандартнаяОбработка = Ложь;
		ПараметрФормы = Новый Структура("РежимВыбора, Отборы", Истина, Новый Структура("Контрагент", Объект.КонтрольТранспорта));
		ОткрытьФорму("Справочник.ФизическиеЛица.ФормаВыбора", ПараметрФормы, Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПринялМеханикОткрытие(Элемент, СтандартнаяОбработка)
	Если ВариантТехконтроль = 0 Тогда
		уатЗащищенныеФункцииКлиент.ОткрытьФормуСотрудника(Объект.ПринялМеханик, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПринялМеханикАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка) 
	Если ВариантТехконтроль = 0 Тогда
		СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
		уатИнтерфейсВводаСотрудников.СотрудникАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПринялМеханикОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	Если ВариантТехконтроль = 0 Тогда
		СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
		уатИнтерфейсВводаСотрудников.СотрудникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УполномоченныйНаПроставлениеОдометраПриВыездеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если ВариантПоказанияОдометра = 0 Тогда
		уатЗащищенныеФункцииКлиент.ДиалогВыбораСотрудника(Элемент, Объект.УполномоченныйНаПроставлениеОдометраПриВыезде, Новый Структура("Организация", Объект.Организация), СтандартнаяОбработка);
	Иначе 
		СтандартнаяОбработка = Ложь;
		ПараметрФормы = Новый Структура("РежимВыбора, Отборы", Истина, Новый Структура("Контрагент", Объект.КонтрольТранспорта));
		ОткрытьФорму("Справочник.ФизическиеЛица.ФормаВыбора", ПараметрФормы, Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УполномоченныйНаПроставлениеОдометраПриВыездеОткрытие(Элемент, СтандартнаяОбработка)
	Если ВариантПоказанияОдометра = 0 Тогда
		уатЗащищенныеФункцииКлиент.ОткрытьФормуСотрудника(Объект.УполномоченныйНаПроставлениеОдометраПриВыезде, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УполномоченныйНаПроставлениеОдометраПриВыездеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка) 
	Если ВариантПоказанияОдометра = 0 Тогда
		СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
		уатИнтерфейсВводаСотрудников.СотрудникАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УполномоченныйНаПроставлениеОдометраПриВыездеОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	Если ВариантПоказанияОдометра = 0 Тогда
		СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
		уатИнтерфейсВводаСотрудников.СотрудникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УполномоченныйНаПроставлениеОдометраПриВозвратеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если ВариантПоказанияОдометра = 0 Тогда
		уатЗащищенныеФункцииКлиент.ДиалогВыбораСотрудника(Элемент, Объект.УполномоченныйНаПроставлениеОдометраПриВозврате, Новый Структура("Организация", Объект.Организация), СтандартнаяОбработка);
	Иначе 
		СтандартнаяОбработка = Ложь;
		ПараметрФормы = Новый Структура("РежимВыбора, Отборы", Истина, Новый Структура("Контрагент", Объект.КонтрольТранспорта));
		ОткрытьФорму("Справочник.ФизическиеЛица.ФормаВыбора", ПараметрФормы, Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УполномоченныйНаПроставлениеОдометраПриВозвратеОткрытие(Элемент, СтандартнаяОбработка)
	Если ВариантПоказанияОдометра = 0 Тогда
		уатЗащищенныеФункцииКлиент.ОткрытьФормуСотрудника(Объект.УполномоченныйНаПроставлениеОдометраПриВозврате, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УполномоченныйНаПроставлениеОдометраПриВозвратеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка) 
	Если ВариантПоказанияОдометра = 0 Тогда
		СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
		уатИнтерфейсВводаСотрудников.СотрудникАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УполномоченныйНаПроставлениеОдометраПриВозвратеОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	Если ВариантПоказанияОдометра = 0 Тогда
		СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
		уатИнтерфейсВводаСотрудников.СотрудникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	ПодразделениеПриИзмененииСервер(Истина);
	УстановитьВидимость();
	УставновитьВидимостьОтветвенныеЛица();
КонецПроцедуры

&НаСервере
Процедура ПодразделениеПриИзмененииСервер(флЗаполнятьЭкипаж = Ложь)
	
	СтруктураОбъектовНастроек = Новый Структура;
	СтруктураОбъектовНастроек.Вставить("Организация", Объект.Организация);
	СтруктураОбъектовНастроек.Вставить("Подразделение", ПодразделениеНастройки());
	ТекПользователь = Пользователи.АвторизованныйПользователь();
	СтруктураОбъектовНастроек.Вставить("Пользователь", ТекПользователь);
	
	ВидПЛ_ТС = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.ТранспортноеСредство, "ОсновнойВидПЛ");
	Если НЕ ЗначениеЗаполнено(ВидПЛ_ТС) Тогда
		ВидПЛ_ = ПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, ПланыВидовХарактеристик.уатПраваИНастройки.ОсновнойВидПЛ);
		Если ЗначениеЗаполнено(ВидПЛ_) Тогда
			Объект.ВидПЛ = ВидПЛ_;
			ВидПЛПриИзмененииСервер();
		КонецЕсли;
	КонецЕсли;
	
	Объект.РежимРасчетаВыработки = ПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, ПланыВидовХарактеристик.уатПраваИНастройки.ОсновнойРежимРасчетаВыработкиПЛ);
	Объект.РасчетФактРасходаГСМ  = ПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, ПланыВидовХарактеристик.уатПраваИНастройки.РасчетФактРасходаГСМ);
	
	ОтветствЛица = уатПутевыеЛисты.ОтветственныеЛицаПоУмолчанию(СтруктураОбъектовНастроек, Объект.Дата); 
	ЗаполнитьЗначенияСвойств(Объект, ОтветствЛица);
	
	ВариантМедосмотр         = ?(ЗначениеЗаполнено(Объект.Медорганизация), 1, 0);
	ВариантТехконтроль       = ?(ЗначениеЗаполнено(Объект.КонтрольТранспорта), 1, 0);
	ВариантПоказанияОдометра = ?(ЗначениеЗаполнено(Объект.ПоказанияОдометра), 1, 0);

	УстановитьДатыВыездаВозвращения(флЗаполнятьЭкипаж);
	УстановитьДействителенДоПоУмолчанию();
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьПробегНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Элементы.ГруппаШапка.ТолькоПросмотр Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТолькоПросмотр", (мКэшПравGPS_ЗапретитьРучноеИзменениеПоказанийОдометра И уатОбщегоНазначения_проф.уатПроверитьИспользованиеGPS(Объект.ТранспортноеСредство)) Или ЭтаФорма.ТолькоПросмотр);
	ПараметрыФормы.Вставить("ПробегПоОдометру", Объект.СпидометрВозвращения - Объект.СпидометрВыезда);
	ПараметрыФормы.Вставить("ПробегПоGPS", Объект.ПробегПоGPS);
	Если ЗначениеЗаполнено(Объект.ТранспортноеСредство) И
		НЕ ПолучитьЗначениеРеквизита(ПолучитьЗначениеРеквизита(Объект.ТранспортноеСредство, "Модель"), "НаличиеСпидометра") Тогда
		
		ПараметрыФормы.Вставить("флМоточасы", Истина);
	КонецЕсли;
	
	Рез = Неопределено;
	
	ОткрытьФорму("Документ.уатПутевойЛист.Форма.ВводЗначенийПробега", ПараметрыФормы, ЭтотОбъект,,,, Новый ОписаниеОповещения("НадписьПробегНажатиеЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьПробегНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Элементы.ГруппаШапка.ТолькоПросмотр Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Объект.ПробегПоGPS = Результат.ПробегПоGPS;
		Объект.СпидометрВозвращения = Объект.СпидометрВыезда + Результат.ПробегПоОдометру;
		ОбновитьНадписьПробег();
		ЗаполнитьПробегПоУмолчаниюПриРаботеНаДвухВидахТоплива();
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПрицепы(Команда)
	Если Объект.Прицепы.Количество() > 0 Тогда
		ТекстНСТР = НСтр("en='Before filling tabular section will be cleared! Continue?';ru='Перед заполнением табличная часть будет очищена! Продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПрицепыЗавершение", ЭтотОбъект), ТекстНСТР, РежимДиалогаВопрос.ОКОтмена);
        Возврат;
	КонецЕсли;
	
	ЗаполнитьПрицепыФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПрицепыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ <> КодВозвратаДиалога.ОК Тогда
        Возврат;
    КонецЕсли;
    
    ЗаполнитьПрицепыФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПрицепыФрагмент()
	
	Перем мсвСоставТС, мсвСтрокУдаления, НоваяСтрокаПрицеп, ТекПрицеп, ТекСтрока, ТекСтрокаУдаления;
	
	Объект.Прицепы.Очистить();
	
	мсвСтрокУдаления = Новый Массив;
	Для Каждого ТекСтрока Из Объект.РасходГСМ Цикл
		Если ТекСтрока.ТС <> Объект.ТранспортноеСредство Тогда
			мсвСтрокУдаления.Добавить(ТекСтрока);
		КонецЕсли;
	КонецЦикла;
	Для Каждого ТекСтрокаУдаления Из мсвСтрокУдаления Цикл
		Объект.РасходГСМ.Удалить(ТекСтрокаУдаления);
	КонецЦикла;
	
	ЗаполнятьПробегПрицепов = ПолучитьПраваИНастройкиПользователя(Объект.Организация,
		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ЗаполнятьПробегПрицепов"));
		
	мсвСоставТС = уатОбщегоНазначения.уатСоставТС(Объект.ТранспортноеСредство);
	Для Каждого ТекПрицеп Из мсвСоставТС Цикл
		Если ЗначениеЗаполнено(ТекПрицеп) Тогда
			НоваяСтрокаПрицеп = Объект.Прицепы.Добавить();
			НоваяСтрокаПрицеп.ТС = ТекПрицеп;
			
			МодельПрицепа = ПолучитьЗначениеРеквизита(ТекПрицеп, "Модель");
			МодельПрицепаРеквизиты = ПолучитьЗначенияРеквизитов(МодельПрицепа, "НаличиеСпидометра, ВидМоделиТС");
			
			Если МодельПрицепаРеквизиты.НаличиеСпидометра = Истина Тогда
				Если МодельПрицепаРеквизиты.ВидМоделиТС <> ПредопределенноеЗначение("Перечисление.уатВидыМоделейТС.Прицеп")
					ИЛИ ЗаполнятьПробегПрицепов Тогда
					
					НоваяСтрокаПрицеп.СчетчикМЧВыезда = уатОбщегоНазначения.уатТекущийСпидометр(ТекПрицеп, Объект.ДатаВыезда);
				КонецЕсли;
			Иначе
				НоваяСтрокаПрицеп.СчетчикМЧВыезда = уатОбщегоНазначения.уатТекущийСчетчикМЧ(ТекПрицеп, Объект.ДатаВыезда);
			КонецЕсли;
			
			ИнициализацияДанныхПрицепа(Неопределено, ТекПрицеп);
		КонецЕсли;
	КонецЦикла;
	
	ВывестиТаблицуВыработкаТС();
	ОбновитьНадписьПробег();
	
КонецПроцедуры

&НаКлиенте
Процедура РежимРаботыНаДвухВидахТопливаПриИзменении(Элемент)
	Объект.РаботаНаДвухВидахТопливаОдновременно = (ПереключательДваВидаТоплива = "Одновременно");
	
	// Корректировка пробега доп. топлива
	ОбщийПробегПЛ = уатОбщегоНазначения.уатРазностьПоказанийСчетчика(Объект.СпидометрВыезда, Объект.СпидометрВозвращения);
	Для Каждого ТекСтрока Из Объект.РасходГСМ Цикл
		Если уатГСМ.ЭтоТехническаяЖидкость(ТекСтрока.ГСМ) Тогда
			Продолжить;
		КонецЕсли;
		ОсновноеТопливо = ПолучитьЗначениеРеквизита(ПолучитьЗначениеРеквизита(ТекСтрока.ТС, "Модель"), "ОсновноеТопливо");
		
		Если Объект.РаботаНаДвухВидахТопливаОдновременно И ТекСтрока.ГСМ = ОсновноеТопливо Тогда
			ТекСтрока.Пробег = ОбщийПробегПЛ;
		ИначеЕсли НЕ Объект.РаботаНаДвухВидахТопливаОдновременно И ТекСтрока.ГСМ <> ОсновноеТопливо Тогда
			мсвСтрокиОснТопливо = Объект.РасходГСМ.НайтиСтроки(Новый Структура("ТС, ГСМ", ТекСтрока.ТС, ОсновноеТопливо));
			Если мсвСтрокиОснТопливо.Количество() > 0 Тогда
				СтрокаОснТопливо = мсвСтрокиОснТопливо[0];
				Если СтрокаОснТопливо.Пробег + ТекСтрока.Пробег > ОбщийПробегПЛ Тогда
					ТекСтрока.Пробег = ОбщийПробегПЛ - СтрокаОснТопливо.Пробег;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

&НаКлиенте
Процедура ВариантМедосмотрПриИзменении(Элемент)

	Если ВариантМедосмотр = 0 Тогда
		Объект.Медорганизация = Неопределено;
	КонецЕсли;
	
	Объект.МедработникВыезд   = ?(ВариантМедосмотр = 0, ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка"),
		ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка"));
	Объект.МедработникВозврат = ?(ВариантМедосмотр = 0, ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка"),
		ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка"));
	УставновитьВидимостьОтветвенныеЛица();

КонецПроцедуры

&НаКлиенте
Процедура ВариантТехконтрольПриИзменении(Элемент)

	Если ВариантТехконтроль = 0 Тогда
		Объект.КонтрольТранспорта = Неопределено;
	КонецЕсли;
	Объект.ВыпустилМеханик   = ?(ВариантТехконтроль = 0, ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка"),
		ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка"));
	Объект.ПринялМеханик = ?(ВариантТехконтроль = 0, ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка"),
		ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка"));
	УставновитьВидимостьОтветвенныеЛица();

КонецПроцедуры

&НаКлиенте
Процедура ВариантПоказанияОдометраПриИзменении(Элемент)

	Если ВариантПоказанияОдометра = 0 Тогда
		Объект.ПоказанияОдометра = Неопределено;
	КонецЕсли;
	Объект.УполномоченныйНаПроставлениеОдометраПриВыезде   = ?(ВариантПоказанияОдометра = 0,
		ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка"),
		ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка"));
	Объект.УполномоченныйНаПроставлениеОдометраПриВозврате = ?(ВариантПоказанияОдометра = 0,
		ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка"),
		ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка"));
	УставновитьВидимостьОтветвенныеЛица();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЭлектронныеПеревозочныеДокументы

&НаКлиенте
Процедура ЭлектронныеПеревозочныеДокументыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ЭлектронныеПеревозочныеДокументы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Поле = Элементы.ЭлектронныеПеревозочныеДокументыСостояниеЭДО Тогда
		// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
		ОбменСКонтрагентамиКлиент.СостояниеЭДОНажатие_ФормаСписка(ТекущиеДанные.ЭПД, СтандартнаяОбработка);
		// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами 
	ИначеЕсли Поле = Элементы.ЭлектронныеПеревозочныеДокументыЗаказНаТС 
		И ЗначениеЗаполнено(ТекущиеДанные.ЗаказНаТС) Тогда
		ПоказатьЗначение(Неопределено, ТекущиеДанные.ЗаказНаТС);
	Иначе
		ПоказатьЗначение(Неопределено, ТекущиеДанные.ЭПД);
	КонецЕсли; 
КонецПроцедуры

&НаКлиенте
Процедура ЭлектронныеПеревозочныеДокументыПослеУдаления(Элемент)
	Оповестить("Запись_ДокументыЭПД");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПрицепы

&НаКлиенте
Процедура ПрицепыПриИзменении(Элемент)
	ОбновитьНадписьПробег();
КонецПроцедуры

&НаКлиенте
Процедура ПрицепыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле.Имя = "ПрицепыТСМодель" Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(Новый ОписаниеОповещения("ПрицепыВыборЗавершение1", ЭтотОбъект), ПолучитьЗначениеРеквизита(Элементы.Прицепы.ТекущиеДанные.ТС, "Модель"));
		
	ИначеЕсли Поле.Имя = "ПрицепыНадписьПробег" Тогда 
		СтандартнаяОбработка = Ложь;
		
		ТекСтрока = Элементы.Прицепы.ТекущиеДанные;
		Если ТекСтрока = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура;
		Если Объект.Проведен И Объект.Рассчитан
			ИЛИ мКэшПравGPS_ЗапретитьРучноеИзменениеПоказанийОдометра
			И уатОбщегоНазначения_проф.уатПроверитьИспользованиеGPS(ТекСтрока.ТС) Тогда
			ПараметрыФормы.Вставить("ТолькоПросмотр", Истина);
		КонецЕсли;
		ПараметрыФормы.Вставить("ПробегПоОдометру", ТекСтрока.СчетчикМЧВозвращения - ТекСтрока.СчетчикМЧВыезда);
		ПараметрыФормы.Вставить("ПробегПоGPS",      ТекСтрока.СчетчикМЧGPS);
		Если ЗначениеЗаполнено(ТекСтрока.ТС) И Не ПолучитьЗначениеРеквизита(ПолучитьЗначениеРеквизита(ТекСтрока.ТС, "Модель"), "НаличиеСпидометра") Тогда
			ПараметрыФормы.Вставить("флМоточасы", Истина);
		КонецЕсли;
		
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ТекСтрока", ТекСтрока);
				
		Оповещение = Новый ОписаниеОповещения("ПрицепыНадписьПробегНажатиеЗавершение", ЭтотОбъект, ДопПараметры);
		
		ОткрытьФорму("Документ.уатПутевойЛист.Форма.ВводЗначенийПробега", ПараметрыФормы, ЭтотОбъект,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПрицепыНадписьПробегНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ТекСтрока = ДополнительныеПараметры.ТекСтрока;
	Если ТекСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ТекСтрока.СчетчикМЧGPS = Результат.ПробегПоGPS;
		ТекСтрока.СчетчикМЧВозвращения = ТекСтрока.СчетчикМЧВыезда + Результат.ПробегПоОдометру;
		ОбновитьНадписьПробег();
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПрицепыВыборЗавершение1(ДополнительныеПараметры) Экспорт
	Заглушка = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПрицепыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока = Истина Тогда
		ПрицепОлд = "";
	Иначе	
		ПрицепОлд = Элементы.Прицепы.ТекущиеДанные.ТС;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПрицепыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли; 
	
	ТекСтрока = Элементы.Прицепы.ТекущиеДанные;
	
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ТекСтрока.ТС) Тогда
		Если Объект.Прицепы.НайтиСтроки(Новый Структура("ТС", ТекСтрока.ТС)).Количество() > 1 Тогда
			Отказ = Истина;
			ПоказатьПредупреждение(Новый ОписаниеОповещения("ПрицепыПередОкончаниемРедактированияЗавершение1", ЭтотОбъект),
				НСтр("en='Trailer/equipment is already entered!';ru='Прицеп/оборудование уже введен!'"), 30);
			
		ИначеЕсли ТекСтрока.ТС = Объект.ТранспортноеСредство Тогда
			Отказ = Истина;
			ПоказатьПредупреждение(Новый ОписаниеОповещения("ПрицепыПередОкончаниемРедактированияЗавершение", ЭтотОбъект),
				НСтр("en='Cannot set the equipment on itself!';ru='Нельзя установить оборудование на само себя!'"), 30);
			
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПрицепыПередОкончаниемРедактированияЗавершение1(ДополнительныеПараметры) Экспорт
	Заглушка = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПрицепыПередОкончаниемРедактированияЗавершение(ДополнительныеПараметры) Экспорт
	Заглушка = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПрицепыПередУдалением(Элемент, Отказ)
	ИнициализацияДанныхПрицепа(ПрицепОлд, "");
КонецПроцедуры

&НаКлиенте
Процедура ПрицепыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ВывестиТаблицуВыработкаТС();
	СформироватьСписокВыбораТСвЗаправкахГСМ();
КонецПроцедуры

&НаКлиенте
Процедура ПрицепыПослеУдаления(Элемент)
	ВывестиТаблицуВыработкаТС();
	СформироватьСписокВыбораТСвЗаправкахГСМ();
КонецПроцедуры

&НаКлиенте
Процедура ПрицепыТСПриИзменении(Элемент)
	ТекСтрока = Элементы.Прицепы.ТекущиеДанные;
	
	Если ПрицепОлд <> ТекСтрока.ТС Тогда
		ИнициализацияДанныхПрицепа(ПрицепОлд, ТекСтрока.ТС);
		
		Если ЗначениеЗаполнено(ТекСтрока.ТС) Тогда
			МодельПрицепаРеквизиты = ПолучитьЗначенияРеквизитов(
				ПолучитьЗначениеРеквизита(ТекСтрока.ТС, "Модель"), "НаличиеСпидометра, ВидМоделиТС");
			
			Если МодельПрицепаРеквизиты.НаличиеСпидометра = Истина Тогда
				Если МодельПрицепаРеквизиты.ВидМоделиТС <> ПредопределенноеЗначение("Перечисление.уатВидыМоделейТС.Прицеп")
					ИЛИ ПолучитьПраваИНастройкиПользователя(Объект.Организация,
					ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ЗаполнятьПробегПрицепов")) Тогда
					
					ТекСтрока.СчетчикМЧВыезда = уатОбщегоНазначения.уатТекущийСпидометр(ТекСтрока.ТС, Объект.ДатаВыезда);
				КонецЕсли;
			Иначе
				ТекСтрока.СчетчикМЧВыезда = уатОбщегоНазначения.уатТекущийСчетчикМЧ(ТекСтрока.ТС, Объект.ДатаВыезда);
			КонецЕсли;
		КонецЕсли;
		
		ТекСтрока.СчетчикМЧВозвращения = 0;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПрицепыТСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтруктураОтбор = Новый Структура("Организация", Объект.Организация);
	уатИнтерфейсВводаТС.РеквизитТСНачалоВыбора(Элемент, Элементы.Прицепы.ТекущиеДанные.ТС, ДанныеВыбора, СтандартнаяОбработка, СтруктураОтбор);
КонецПроцедуры

&НаКлиенте
Процедура ПрицепыТСАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СтруктураОтбор = Новый Структура("Организация", Объект.Организация);
	уатИнтерфейсВводаТС.РеквизитТСАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка, СтруктураОтбор);
КонецПроцедуры

&НаКлиенте
Процедура ПрицепыТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтруктураОтбор = Новый Структура("Организация", Объект.Организация);
	уатИнтерфейсВводаТС.РеквизитТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка, СтруктураОтбор);
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыЗадание

&НаКлиенте
Процедура ЗаданиеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		ТекСтрока = Элементы.Задание.ТекущиеДанные;
		ТекСтрока.ID = "";
		Если НЕ Копирование Тогда
			ТекСтрока.УсловиеРаботы = Объект.УсловиеРаботы;
			ТекСтрока.Подразделение = Объект.Подразделение;
			ТекСтрока.ВидПеревозки  = ПолучитьВидПеревозки(Объект.Организация, Объект.ТранспортноеСредство);
			
			ТекСтрока.ВремяПрибытия = Объект.ДатаВыезда;
			ТекСтрока.ВремяУбытия   = Объект.ДатаВозвращения;
			
			ТекСтрока.КоличествоЕздок = 1;
			Попытка
				ТекСтрока.Контрагент = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
					ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнойПокупатель");
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	Если НоваяСтрока Тогда
		ПрицепЗадание1Олд = "";
		ПрицепЗадание2Олд = "";
	Иначе	
		ПрицепЗадание1Олд = Элементы.Задание.ТекущиеДанные.Прицеп1;
		ПрицепЗадание2Олд = Элементы.Задание.ТекущиеДанные.Прицеп2;
	КонецЕсли;
	
	ОбновитьСписокСпецРабот();
	ОбновитьНадписьУсловияРаботы();
КонецПроцедуры

&НаКлиенте
Процедура ЗаданиеПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	СформироватьСписокВыбораТСвЗаправкахГСМ();
	УдалитьСпецработыИзВыработки();
	
	Если НЕ ОтменаРедактирования Тогда
		ОбновитьЕдиницыИзмеренияПоЗаказамВЗадании(Элементы.Задание.ТекущиеДанные.НомерСтроки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаданиеПослеУдаления(Элемент)
	СформироватьСписокВыбораТСвЗаправкахГСМ();
	УдалитьСпецработыИзВыработки();
КонецПроцедуры

&НаКлиенте
Процедура ЗаданиеПриАктивизацииСтроки(Элемент)
	ТекСтрока = Элементы.Задание.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	УстановитьОтборОбъектСтроительства(ТекСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ЗаданиеПриИзменении(Элемент)
	ОбновитьНадписьСпецРабот();
	ОбновитьНадписьУсловияРаботы();
КонецПроцедуры

&НаКлиенте
Процедура ЗаданиеПередУдалением(Элемент, Отказ)
	ИнициализацияДанныхПрицепа(ПрицепЗадание1Олд, "", 1);
	ИнициализацияДанныхПрицепа(ПрицепЗадание2Олд, "", 2);
КонецПроцедуры

&НаКлиенте
Процедура ЗаданиеВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекСтрока = Элементы.Задание.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Если Поле = Элементы.ЗаданиеНадписьСпецРаботы Тогда	
		ЗаданиеНадписьСпецРаботыНажатие(Неопределено, СтандартнаяОбработка);
		Возврат;
		
	ИначеЕсли Поле = Элементы.ЗаданиеНадписьУсловияРаботы Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("УсловияРаботы",  ПолучитьСписокУсловийРаботы(ТекСтрока.ID));
		ПараметрыОткрытия.Вставить("УсловиеРаботы",  ТекСтрока.УсловиеРаботы);
		ПараметрыОткрытия.Вставить("ПробегСГрузом",  ТекСтрока.КоличествоКмГруз);
		ПараметрыОткрытия.Вставить("ПробегПорожний", ТекСтрока.КоличествоКмПорожний);
		ПараметрыОткрытия.Вставить("ТолькоПросмотр", Элементы.ГруппаШапка.ТолькоПросмотр);
				
		Если ПараметрыОткрытия.ТолькоПросмотр Тогда
			Оповещение = Неопределено;
		Иначе
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияФормыУсловияРаботыДетально", ЭтотОбъект, ТекСтрока);
		КонецЕсли;
		
		ОткрытьФорму("Документ.уатПутевойЛист.Форма.УсловияРаботыДетально", ПараметрыОткрытия, ЭтотОбъект,,,, Оповещение);
		Возврат;
		
	КонецЕсли;
	
	Если Элементы.ГруппаШапка.ТолькоПросмотр Тогда
		Если Поле = Элементы.ЗаданиеУсловиеРаботы
			ИЛИ Поле = Элементы.ЗаданиеКонтрагент
			ИЛИ Поле = Элементы.ЗаданиеПодразделение
			ИЛИ Поле = Элементы.ЗаданиеМаршрут
			ИЛИ Поле = Элементы.ЗаданиеЗаказНаТС
			ИЛИ Поле = Элементы.ЗаданиеАдресПрибытия
			ИЛИ Поле = Элементы.ЗаданиеАдресУбытия
			ИЛИ Поле = Элементы.ЗаданиеНоменклатура
			ИЛИ Поле = Элементы.ЗаданиеВидПеревозки
			ИЛИ Поле = Элементы.ЗаданиеНаправлениеПеревозки
			ИЛИ Поле = Элементы.ЗаданиеОбъектСтроительства Тогда
			ТекЗначение = ТекСтрока[Сред(Поле.Имя, 8)];
			ПоказатьЗначение(Неопределено, ТекЗначение);
		ИначеЕсли Поле = Элементы.ЗаданиеНоменклатураГруза Тогда
			ПоказатьЗначение(Неопределено, ТекСтрока.Номенклатура);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокУсловийРаботы(IDСтрокиЗадания)
	мсвСтрокиУсловияРаботы = Объект.УсловияРаботыДетально.НайтиСтроки(Новый Структура("ID", IDСтрокиЗадания));
	мсвСтрок = Новый Массив;
	Для Каждого ТекСтрока Из мсвСтрокиУсловияРаботы Цикл
		СтруктураСтроки = Новый Структура;
		СтруктураСтроки.Вставить("УсловиеРаботы", ТекСтрока.УсловиеРаботы);
		СтруктураСтроки.Вставить("КоличествоКмГруз", ТекСтрока.КоличествоКмГруз);
		СтруктураСтроки.Вставить("КоличествоКмПорожний", ТекСтрока.КоличествоКмПорожний);
		мсвСтрок.Добавить(СтруктураСтроки);
	КонецЦикла;
	
	Возврат мсвСтрок;
КонецФункции

// Подключаемый динамически обработчик оповещения
&НаКлиенте
Процедура ПослеЗакрытияФормыУсловияРаботыДетально(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекСтрока = Элементы.Задание.ТекущиеДанные;
	Если ПустаяСтрока(ТекСтрока.ID) Тогда
		ТекСтрока.ID = Новый УникальныйИдентификатор();
	КонецЕсли;
	
	ЗагрузитьДанныеПоУсловиямРаботы(РезультатЗакрытия, ТекСтрока.НомерСтроки - 1);
	
	ОбновитьНадписьУсловияРаботы();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеПоУсловиямРаботы(мсвСтрокУсловия, ИндексСтрокиЗадания)
	ТекСтрокаЗадания = Объект.Задание[ИндексСтрокиЗадания];
	IDСтрокиЗадания  = ТекСтрокаЗадания.ID;
	
	// удаление старых строк условий работы по текущему ID строки задания
	Сч = Объект.УсловияРаботыДетально.Количество() - 1;
	Пока Сч >= 0 Цикл
		Если Объект.УсловияРаботыДетально[Сч].ID = IDСтрокиЗадания Тогда
			Объект.УсловияРаботыДетально.Удалить(Сч);
		КонецЕсли;
		Сч = Сч - 1;
	КонецЦикла;
	
	// добавление новых строк условий работы по текущему ID строки задания
	Для Каждого ТекСтрока Из мсвСтрокУсловия Цикл
		НоваяСтрокаУсловие = Объект.УсловияРаботыДетально.Добавить();
		НоваяСтрокаУсловие.ID = IDСтрокиЗадания;
		НоваяСтрокаУсловие.УсловиеРаботы = ТекСтрока.УсловиеРаботы;
		НоваяСтрокаУсловие.КоличествоКмГруз = ТекСтрока.КоличествоКмГруз;
		НоваяСтрокаУсловие.КоличествоКмПорожний = ТекСтрока.КоличествоКмПорожний;
	КонецЦикла;
	
	Если мсвСтрокУсловия.Количество() = 1 Тогда
		ТекСтрокаЗадания.УсловиеРаботы = мсвСтрокУсловия[0].УсловиеРаботы;
	Иначе
		ТекСтрокаЗадания.УсловиеРаботы = Неопределено;
	КонецЕсли;
КонецПроцедуры

// Подключаемый динамически обработчик оповещения
&НаКлиенте
Процедура ПослеЗакрытияФормыРедактированияСпецРабот(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Или ДополнительныеПараметры = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	РезультатЗакрытия.Свойство("СпецРабота1", ДополнительныеПараметры.СпецРабота1);
	РезультатЗакрытия.Свойство("СпецРабота2", ДополнительныеПараметры.СпецРабота2);
	РезультатЗакрытия.Свойство("СпецРабота3", ДополнительныеПараметры.СпецРабота3);
	РезультатЗакрытия.Свойство("СпецРабота4", ДополнительныеПараметры.СпецРабота4);
	РезультатЗакрытия.Свойство("СпецРабота5", ДополнительныеПараметры.СпецРабота5);
	РезультатЗакрытия.Свойство("КоличествоСпецРаботы1", ДополнительныеПараметры.КоличествоСпецРаботы1);
	РезультатЗакрытия.Свойство("КоличествоСпецРаботы2", ДополнительныеПараметры.КоличествоСпецРаботы2);
	РезультатЗакрытия.Свойство("КоличествоСпецРаботы3", ДополнительныеПараметры.КоличествоСпецРаботы3);
	РезультатЗакрытия.Свойство("КоличествоСпецРаботы4", ДополнительныеПараметры.КоличествоСпецРаботы4);
	РезультатЗакрытия.Свойство("КоличествоСпецРаботы5", ДополнительныеПараметры.КоличествоСпецРаботы5);
	
	ОбновитьНадписьСпецРабот();
	УдалитьСпецработыИзВыработки();
	
	Модифицированность = Истина;
	
КонецПроцедуры
	
&НаКлиенте
Процедура ЗаданиеКоличествоЧасовПриИзменении(Элемент)
	ТекСтрока = Элементы.Задание.ТекущиеДанные;
	уатЗащищенныеФункцииСервер.КонтрольВводаВремени(ТекСтрока.КоличествоЧасов);
КонецПроцедуры

&НаКлиенте
Процедура ЗаданиеПодачаПриИзменении(Элемент)
	ТекСтрока = Элементы.Задание.ТекущиеДанные;
	уатЗащищенныеФункцииСервер.КонтрольВводаВремени(ТекСтрока.Подача);
КонецПроцедуры

&НаКлиенте
Процедура ЗаданиеНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекСтрока = Элементы.Задание.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекСтрока.ЗаказНаТС) Тогда
		СтруктураОтбора = Новый Структура("Номенклатура", СписокГрузМестЗаказаСервер(ТекСтрока.ЗаказНаТС));
		ДопПараметры    = Новый Структура("ПараметрыОтбора", СтруктураОтбора);
	Иначе
		ДопПараметры    = Неопределено;
	КонецЕсли;
	
	уатЗащищенныеФункцииКлиент.ДиалогВыбораГруза(
		Элемент, ТекСтрока.Номенклатура, Элемент, СтандартнаяОбработка, ДопПараметры);
КонецПроцедуры

&НаКлиенте
Процедура ЗаданиеКонтрагентПриИзменении(Элемент)
	ТекСтрока = Элементы.Задание.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	УстановитьОтборОбъектСтроительства(ТекСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ЗаданиеМаршрутПриИзменении(Элемент)
	ТекСтрокаЗадание = Элементы.Задание.ТекущиеДанные;
	
	мМаршрут = ТекСтрокаЗадание.Маршрут;
	мМаршрутЭтапы = ЭтапыМаршрута(мМаршрут);
	Если мМаршрутЭтапы.Количество() > 0 Тогда
		ТекСтрокаЗадание.АдресПрибытия = мМаршрутЭтапы[0].ПунктОтправления;
		Если уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(мМаршрут, "ПредставлениеМаршрутаОднимПунктом") Тогда
			ТекСтрокаЗадание.АдресУбытия = мМаршрутЭтапы[мМаршрутЭтапы.Количество()-1].ПунктОтправления;
		Иначе	
			ТекСтрокаЗадание.АдресУбытия = мМаршрутЭтапы[мМаршрутЭтапы.Количество()-1].ПунктПрибытия;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ТекСтрокаЗадание.НаправлениеПеревозки) И ТипЗнч(ТекСтрокаЗадание.АдресУбытия) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда
			ТекСтрокаЗадание.НаправлениеПеревозки = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрокаЗадание.АдресУбытия, "НаправлениеПеревозки");
		КонецЕсли;
	КонецЕсли;
	
	мУсловиеРаботы = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(мМаршрут, "УсловиеРаботы");
	Если ЗначениеЗаполнено(мУсловиеРаботы) Тогда
		ТекСтрокаЗадание.УсловиеРаботы = мУсловиеРаботы;
	КонецЕсли;
	
	ТекСтрокаЗадание.КоличествоЕздок = 1;
	КоличествоКмГруз = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(мМаршрут, "Расстояние");
	КоличествоЧасов  = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(мМаршрут, "ВремяВПути");
	Если ЗначениеЗаполнено(КоличествоКмГруз) И ЗначениеЗаполнено(КоличествоЧасов) Тогда
		ТекСтрокаЗадание.КоличествоКмГруз = КоличествоКмГруз;
		ТекСтрокаЗадание.КоличествоЧасов  = КоличествоЧасов;
	Иначе
		РассчитатьРасстояниеВремяМеждуПунктами(ТекСтрокаЗадание);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаданиеОбъектСтроительстваПриИзменении(Элемент)
	ТекСтрока = Элементы.Задание.ТекущиеДанные;
	КонтрОбъекта = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(ТекСтрока.ОбъектСтроительства, "Контрагент");
	Если ЗначениеЗаполнено(КонтрОбъекта) Тогда
		ТекСтрока.Контрагент = КонтрОбъекта;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаданиеПрицеп1ПриИзменении(Элемент)
	ТекСтрока = Элементы.Задание.ТекущиеДанные;
	ИнициализацияДанныхПрицепа(ПрицепЗадание1Олд, ТекСтрока.Прицеп1, 1);
КонецПроцедуры

&НаКлиенте
Процедура ЗаданиеПрицеп1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтруктураОтбор = Новый Структура("Организация", Объект.Организация);
	уатИнтерфейсВводаТС.РеквизитТСНачалоВыбора(Элемент, Элементы.Задание.ТекущиеДанные.Прицеп1, ДанныеВыбора, СтандартнаяОбработка, СтруктураОтбор);
КонецПроцедуры

&НаКлиенте
Процедура ЗаданиеПрицеп1АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СтруктураОтбор = Новый Структура("Организация", Объект.Организация);
	уатИнтерфейсВводаТС.РеквизитТСАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка, СтруктураОтбор);
КонецПроцедуры

&НаКлиенте
Процедура ЗаданиеПрицеп1ОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтруктураОтбор = Новый Структура("Организация", Объект.Организация);
	уатИнтерфейсВводаТС.РеквизитТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка, СтруктураОтбор);
КонецПроцедуры

&НаКлиенте
Процедура ЗаданиеПрицеп2ПриИзменении(Элемент)
	ТекСтрока = Элементы.Задание.ТекущиеДанные;
	ИнициализацияДанныхПрицепа(ПрицепЗадание2Олд, ТекСтрока.Прицеп2, 2);
КонецПроцедуры

&НаКлиенте
Процедура ЗаданиеПрицеп2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтруктураОтбор = Новый Структура("Организация", Объект.Организация);
	уатИнтерфейсВводаТС.РеквизитТСНачалоВыбора(Элемент, Элементы.Задание.ТекущиеДанные.Прицеп2, ДанныеВыбора, СтандартнаяОбработка, СтруктураОтбор);
КонецПроцедуры

&НаКлиенте
Процедура ЗаданиеПрицеп2АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СтруктураОтбор = Новый Структура("Организация", Объект.Организация);
	уатИнтерфейсВводаТС.РеквизитТСАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка, СтруктураОтбор);
КонецПроцедуры

&НаКлиенте
Процедура ЗаданиеПрицеп2ОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтруктураОтбор = Новый Структура("Организация", Объект.Организация);
	уатИнтерфейсВводаТС.РеквизитТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка, СтруктураОтбор);
КонецПроцедуры

&НаКлиенте
Процедура ЗаданиеКоличествоЧасовПрицеп1ПриИзменении(Элемент)
	ТекСтрока = Элементы.Задание.ТекущиеДанные;
	уатЗащищенныеФункцииСервер.КонтрольВводаВремени(ТекСтрока.КоличествоЧасовПрицеп1);
КонецПроцедуры

&НаКлиенте
Процедура ЗаданиеКоличествоЧасовПрицеп2ПриИзменении(Элемент)
	ТекСтрока = Элементы.Задание.ТекущиеДанные;
	уатЗащищенныеФункцииСервер.КонтрольВводаВремени(ТекСтрока.КоличествоЧасовПрицеп2);
КонецПроцедуры

&НаКлиенте
Процедура ЗаданиеАдресПрибытияПриИзменении(Элемент)
	
	ТекСтрокаЗадание = Элементы.Задание.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекСтрокаЗадание.АдресПрибытия) 
		И ЗначениеЗаполнено(ТекСтрокаЗадание.АдресУбытия) Тогда
		РассчитатьРасстояниеВремяМеждуПунктами(ТекСтрокаЗадание)
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаданиеАдресУбытияПриИзменении(Элемент)
	
	ТекСтрокаЗадание = Элементы.Задание.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекСтрокаЗадание.АдресПрибытия) 
		И ЗначениеЗаполнено(ТекСтрокаЗадание.АдресУбытия) Тогда
		РассчитатьРасстояниеВремяМеждуПунктами(ТекСтрокаЗадание);
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекСтрокаЗадание.НаправлениеПеревозки) И ТипЗнч(ТекСтрокаЗадание.АдресУбытия) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда
		ТекСтрокаЗадание.НаправлениеПеревозки = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрокаЗадание.АдресУбытия, "НаправлениеПеревозки");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаданиеУсловиеРаботыПриИзменении(Элемент)
	ТекСтрока = Элементы.Задание.ТекущиеДанные;
	Если ТекСтрока.НомерЕздки = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекСтрокаПоиск Из Объект.Задание Цикл
		Если ТекСтрокаПоиск.НомерЕздки = ТекСтрока.НомерЕздки
			И ТекСтрокаПоиск.УсловиеРаботы <> ТекСтрока.УсловиеРаботы Тогда
			ТекСтрокаПоиск.УсловиеРаботы = ТекСтрока.УсловиеРаботы;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаданиеНадписьСпецРаботыНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекСтрока = Элементы.Задание.ТекущиеДанные;
	
	ОбновитьСписокСпецРабот();
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ИмяДокумента", "уатПутевойЛист");
	ПараметрыОткрытия.Вставить("ТолькоПросмотр", Элементы.ГруппаШапка.ТолькоПросмотр);
	ПараметрыОткрытия.Вставить("СпецРабота1", ТекСтрока.СпецРабота1);
	ПараметрыОткрытия.Вставить("СпецРабота2", ТекСтрока.СпецРабота2);
	ПараметрыОткрытия.Вставить("СпецРабота3", ТекСтрока.СпецРабота3);
	ПараметрыОткрытия.Вставить("СпецРабота4", ТекСтрока.СпецРабота4);
	ПараметрыОткрытия.Вставить("СпецРабота5", ТекСтрока.СпецРабота5);
	ПараметрыОткрытия.Вставить("КоличествоСпецРаботы1", ТекСтрока.КоличествоСпецРаботы1);
	ПараметрыОткрытия.Вставить("КоличествоСпецРаботы2", ТекСтрока.КоличествоСпецРаботы2);
	ПараметрыОткрытия.Вставить("КоличествоСпецРаботы3", ТекСтрока.КоличествоСпецРаботы3);
	ПараметрыОткрытия.Вставить("КоличествоСпецРаботы4", ТекСтрока.КоличествоСпецРаботы4);
	ПараметрыОткрытия.Вставить("КоличествоСпецРаботы5", ТекСтрока.КоличествоСпецРаботы5);
	Если ЗначениеЗаполнено(Объект.ТранспортноеСредство) Тогда
		ПараметрыОткрытия.Вставить("ТС", Объект.ТранспортноеСредство);
	КонецЕсли;
			
	Если ПараметрыОткрытия.ТолькоПросмотр Тогда
		Оповещение = Неопределено;
	Иначе
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияФормыРедактированияСпецРабот", ЭтотОбъект, ТекСтрока);
	КонецЕсли;
	
	ОткрытьФорму("Документ.уатПутевойЛист.Форма.ФормаРедактированияСпецРабот", ПараметрыОткрытия, ЭтотОбъект,,,, Оповещение);
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыТТД

&НаКлиенте
Процедура ДобавитьВСуществующийТТД(Команда)
	
	Если Элементы.Задание.ТекущиеДанные = Неопределено Тогда
		ТекстНСТР = НСтр("en='No currently selected row of ""Job"" table.';ru='Не выбрана строка задания.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		Возврат;
	КонецЕсли;
	
	СтрокиПутевогоЛиста = Новый Массив;
	СтрокиПутевогоЛиста.Добавить(Элементы.Задание.ТекущиеДанные.НомерСтроки-1);
	ПараметрыЗаполненияТТД = Новый Структура("СтрокиПутевогоЛиста", СтрокиПутевогоЛиста);
	
	Если Модифицированность Или Объект.Ссылка.Пустая() Тогда
		ТекстНСТР = НСтр("en='To perform this operation it is necessary to record the document. Continue?';
			|ru='Для выполнения данной операции необходимо записать документ. Продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьВСуществующийТТДФрагмент", ЭтотОбъект, ПараметрыЗаполненияТТД),
			ТекстНСТР, РежимДиалогаВопрос.ОКОтмена);
	Иначе
		ДобавитьВСуществующийТТДВыборТТД(ПараметрыЗаполненияТТД);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВСуществующийТТДФрагмент(Результат, ДопПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.ОК Тогда
        Возврат;
    КонецЕсли;
    
    Если НЕ ПроверитьЗаполнениеДокумента() Тогда
        Возврат;
    КонецЕсли;
    
    Попытка
		флЗаписан = Записать();
	Исключение
		Возврат;
	КонецПопытки;
	
	Если НЕ флЗаписан Тогда
		Возврат;
	КонецЕсли;
	
	ДобавитьВСуществующийТТДВыборТТД(ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВСуществующийТТДВыборТТД(ПараметрыЗаполненияТТД)

	ОтборФормыВыбораТТД = Новый Структура("Организация", Объект.Организация);
	ТекСтрокаЗадание = Элементы.Задание.ТекущиеДанные;
	Если ТекСтрокаЗадание <> Неопределено 
		И ЗначениеЗаполнено(ТекСтрокаЗадание.Контрагент) Тогда
		ОтборФормыВыбораТТД.Вставить("Контрагент", ТекСтрокаЗадание.Контрагент);
	КонецЕсли;
	
	ОткрытьФорму("Документ.уатТТД.ФормаВыбора", Новый Структура("Отбор", ОтборФормыВыбораТТД),,,,,
		Новый ОписаниеОповещения("ДобавитьВСуществующийТТДЗавершение", ЭтотОбъект, ПараметрыЗаполненияТТД));
	
КонецПроцедуры
	
&НаКлиенте
Процедура ДобавитьВСуществующийТТДЗавершение(Результат, ДопПараметры) Экспорт
    
    дТТД = Результат;
    Если дТТД = Неопределено Тогда
        Возврат;
    КонецЕсли;	
    
    ДопПараметры.Вставить("ТТД", дТТД);
	СоздатьТТДПоСтрокамЗаданияЗавершение(ДопПараметры);

КонецПроцедуры

&НаКлиенте
Процедура ТТДПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	УдалитьТТД(Элементы.ТТД.ТекущиеДанные);
	Элементы.ТТД.Обновить();
КонецПроцедуры

// Процедура удаляет строки из документы ТТД, соответствующие данному п/л. 
// Если строк не осталось, то сам документ помечаем на удаление.
//
&НаСервере
Процедура УдалитьТТД(вхТТДссылка)
	
	вхТТД = вхТТДссылка.ПолучитьОбъект();
	
	мСтроки = вхТТД.Выработка.НайтиСтроки(Новый Структура("ПутЛист", Объект.Ссылка));
	Для сч = 0 По мСтроки.Количество() - 1 Цикл
		вхТТД.Выработка.Удалить(мСтроки[сч]);
	КонецЦикла;	
	
	мСтроки = вхТТД.Стоимость.НайтиСтроки(Новый Структура("ПутЛист", Объект.Ссылка));
	Для сч = 0 По мСтроки.Количество() - 1 Цикл
		вхТТД.Стоимость.Удалить(мСтроки[сч]);
	КонецЦикла;	
	
	//вхТТД.ПакетнаяОбработкаТиповыхДокументов = Ложь;
	Если вхТТД.Выработка.Количество() = 0 Тогда
		вхТТД.Записать();
		вхТТД.УстановитьПометкуУдаления(Истина);
	Иначе
		
		Если вхТТД.Проведен Тогда
			мРежимЗаписи = РежимЗаписиДокумента.Проведение;
		Иначе
			мРежимЗаписи = РежимЗаписиДокумента.Запись;
		КонецЕсли;
		
		вхТТД.Записать(мРежимЗаписи);
		
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыПростои

&НаКлиенте
Процедура ПростоиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока и Не Копирование  Тогда
		Элементы.Простои.ТекущиеДанные.НачалоПростоя = НачалоДня(Объект.ДатаВыезда);
		Элементы.Простои.ТекущиеДанные.КонецПростоя = НачалоДня(Объект.ДатаВыезда);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВремяРаботыОтопителяПриИзменении(Элемент)
	уатЗащищенныеФункцииСервер.КонтрольВводаВремени(ВремяРаботыОтопителя);
	Объект.ВремяРаботыОтопителя = уатОбщегоНазначения.уатВремяВСекунды(ВремяРаботыОтопителя);
КонецПроцедуры

&НаКлиенте
Процедура ПростоиДатаПростояПриИзменении(Элемент)
	ТекСтрока = Элементы.Простои.ТекущиеДанные;
	
	Если ТекСтрока.КонецПростоя = НачалоДня(ТекСтрока.КонецПростоя) Тогда //если конец простоя 0:00, то перещелкиваем на начало след. дня
		ТекСтрока.КонецПростоя = НачалоДня(ТекСтрока.НачалоПростоя) + 24*3600;
	ИначеЕсли НачалоДня(ТекСтрока.НачалоПростоя) <> НачалоДня(ТекСтрока.КонецПростоя) Тогда //если конец простоя не той же даты, что и начало
		ТекСтрока.КонецПростоя = НачалоДня(ТекСтрока.НачалоПростоя) + (ТекСтрока.КонецПростоя - НачалоДня(ТекСтрока.КонецПростоя));
	КонецЕсли;
	
	ТекСтрока.ВремяПростоя = '00010101' + (ТекСтрока.КонецПростоя - ТекСтрока.НачалоПростоя);
КонецПроцедуры

&НаКлиенте
Процедура ПростоиНачалоПриИзменении(Элемент)
	ТекСтрока = Элементы.Простои.ТекущиеДанные;
	
	Если ТекСтрока.НачалоПростоя > ТекСтрока.КонецПростоя Тогда
		ТекСтрока.КонецПростоя = ТекСтрока.НачалоПростоя;
	КонецЕсли;	
	
	ТекСтрока.ВремяПростоя = '00010101' + (ТекСтрока.КонецПростоя - ТекСтрока.НачалоПростоя);	
КонецПроцедуры

&НаКлиенте
Процедура ПростоиКонецПростояПриИзменении(Элемент)
	ТекСтрока = Элементы.Простои.ТекущиеДанные;
	
	Если ТекСтрока.КонецПростоя = НачалоДня(ТекСтрока.КонецПростоя) Тогда //если конец простоя 0:00, то перещелкиваем на начало след. дня
		ТекСтрока.КонецПростоя = НачалоДня(ТекСтрока.НачалоПростоя) + 24*3600;
	ИначеЕсли НачалоДня(ТекСтрока.НачалоПростоя) <> НачалоДня(ТекСтрока.КонецПростоя) Тогда //если конец простоя не той же даты
		ТекСтрока.КонецПростоя = НачалоДня(ТекСтрока.НачалоПростоя) + (ТекСтрока.КонецПростоя - НачалоДня(ТекСтрока.КонецПростоя));
	КонецЕсли;
	
	Если ТекСтрока.НачалоПростоя > ТекСтрока.КонецПростоя Тогда
		ТекСтрока.НачалоПростоя = ТекСтрока.КонецПростоя;
	КонецЕсли;
	
	ТекСтрока.ВремяПростоя = '00010101' + (ТекСтрока.КонецПростоя - ТекСтрока.НачалоПростоя);
КонецПроцедуры

&НаКлиенте
Процедура ПростоиВремяПростояПриИзменении(Элемент)
	ТекСтрока = Элементы.Простои.ТекущиеДанные;
	Секунды = ТекСтрока.ВремяПростоя - Дата(1,1,1);
	ТекСтрока.КонецПростоя = ТекСтрока.НачалоПростоя + Секунды;
	Секунды = ТекСтрока.ВремяПростоя - Дата(1,1,1);
	ПроверкаДата = ТекСтрока.НачалоПростоя + Секунды;
	Если ПроверкаДата> КонецДня(ТекСтрока.НачалоПростоя) Тогда
		ТекСтрока.ВремяПростоя = Дата(1,1,1) + (КонецДня(ТекСтрока.НачалоПростоя)-59 - ТекСтрока.НачалоПростоя+60);
		ТекСтрока.КонецПростоя = ТекСтрока.НачалоПростоя +(КонецДня(ТекСтрока.НачалоПростоя)-59 - ТекСтрока.НачалоПростоя+60);
		ТекСтрока.КонецПростоя = ТекСтрока.КонецПростоя - 86400;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыРасходГСМ

&НаКлиенте
Процедура РасшифровкаРасходаГСМ(Команда)
	Перем СписокНормРасхода, Отказ;
	
	Отказ = Ложь;
	
	ТекСтрока = Элементы.РасходГСМ.ТекущиеДанные;
	
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	флЭтоТЖ = Неопределено;
	РасшифровкаРасходаГСМСервер(ТекСтрока.ТС, ТекСтрока.ГСМ, Отказ, СписокНормРасхода, флЭтоТЖ);
		
	Если Не Отказ Тогда
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("СписокНормРасхода", СписокНормРасхода);
		ПараметрыОткрытия.Вставить("ЭтоТЖ", флЭтоТЖ);
		ПараметрыОткрытия.Вставить("ДатаВыезда", Объект.ДатаВыезда);
		ПараметрыОткрытия.Вставить("ДатаВозвращения", Объект.ДатаВозвращения);
		ПараметрыОткрытия.Вставить("ТС", ТекСтрока.ТС);
		ПараметрыОткрытия.Вставить("ГСМ", ТекСтрока.ГСМ);
		ПараметрыОткрытия.Вставить("ПЛ", Объект.Ссылка);
		ПараметрыОткрытия.Вставить("НеПересчитыватьРасходГСМ", Объект.НеПересчитыватьРасходГСМ);
		
		мсвЗаправкиГСМ = Новый Массив;
		Для Каждого ТекЗаправка Из ЗаправкиГСМ Цикл
			Если ТекЗаправка.ТС = ТекСтрока.ТС Тогда
				СтруктураСтроки = Новый Структура("ГСМ, Количество", ТекЗаправка.ГСМ, ТекЗаправка.Количество);
				мсвЗаправкиГСМ.Добавить(СтруктураСтроки);
			КонецЕсли;
		КонецЦикла;
		ПараметрыОткрытия.Вставить("ЗаправкиГСМ", мсвЗаправкиГСМ);
		
		мсвСливыГСМ = Новый Массив;
		Для Каждого ТекСлив Из СливыГСМ Цикл
			Если ТекСлив.ТС = ТекСтрока.ТС Тогда
				СтруктураСтроки = Новый Структура("ГСМ, Количество", ТекСлив.ГСМ, ТекСлив.Количество);
				мсвСливыГСМ.Добавить(СтруктураСтроки);
			КонецЕсли;
		КонецЦикла;
		ПараметрыОткрытия.Вставить("СливыГСМ", мсвСливыГСМ);
		
		ОткрытьФорму("Документ.уатПутевойЛист.Форма.РасшифровкаНормыРасходаГСМ", ПараметрыОткрытия, ЭтотОбъект,,,,
			Новый ОписаниеОповещения("РасшифровкаРасходаГСМЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура РасшифровкаРасходаГСМСервер(ТС, ГСМ, Отказ, СписокНормРасхода, флЭтоТЖ)
	флЭтоТЖ = уатГСМ.ЭтоТехническаяЖидкость(ГСМ);
	Если флЭтоТЖ Тогда
		СписокНормРасхода = ПолучитьРасшифровкуРасходаТЖ(ТС, ГСМ);
	Иначе
		ПараметрыРасчетаГСМ = уатПутевыеЛисты.ПолучитьПараметрыРасчетаРасходаГСМ(Объект);
		уатГСМ.РасчитатьРасходГСМПоНорме(ПараметрыРасчетаГСМ, ТС, ГСМ, Отказ, СписокНормРасхода);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаРасходаГСМЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Заглушка = Истина;
КонецПроцедуры

&НаСервере
Функция ПолучитьРасшифровкуРасходаТЖ(ТС, ТЖ)
	Рез = Новый СписокЗначений();
	
	Если уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация, "ИспользоватьУчетНормативногоРасходаТехЖидкостей") = ЛОЖЬ Тогда
		Возврат Рез;
	КонецЕсли;
	
	// получим нормы расхода тех. жидкостей
	тблНормыРасходаТЖ = уатОбщегоНазначения.ПолучитьНормыРасходаТЖ(ТС, Объект.ДатаВозвращения, ТЖ);
	
	// формируем сводную таблицу прицепов
	тблПрицепы = Новый ТаблицаЗначений;
	тблПрицепы.Колонки.Добавить("ТС");
	тблПрицепы.Колонки.Добавить("Моточасы");
	Для Каждого ТекПрицеп Из Объект.Прицепы Цикл
		Если ЗначениеЗаполнено(ТекПрицеп.ТС) Тогда
			СтрокаПрицепа = тблПрицепы.Найти(ТекПрицеп.ТС, "ТС");
			Если СтрокаПрицепа = Неопределено Тогда
				СтрокаПрицепа = тблПрицепы.Добавить();
				СтрокаПрицепа.ТС = ТекПрицеп.ТС;
				СтрокаПрицепа.Моточасы = 0;
			КонецЕсли;
			СтрокаПрицепа.Моточасы = СтрокаПрицепа.Моточасы + уатОбщегоНазначения.уатРазностьПоказанийСчетчика(
				ТекПрицеп.СчетчикМЧВыезда, ТекПрицеп.СчетчикМЧВозвращения);
		КонецЕсли;
	КонецЦикла;
	Для Каждого ТекЗадание Из Объект.Задание Цикл
		Если ЗначениеЗаполнено(ТекЗадание.Прицеп1) Тогда
			СтрокаПрицепа = тблПрицепы.Найти(ТекЗадание.Прицеп1, "ТС");
			Если СтрокаПрицепа = Неопределено Тогда
				СтрокаПрицепа = тблПрицепы.Добавить();
				СтрокаПрицепа.ТС = ТекЗадание.Прицеп1;
				СтрокаПрицепа.Моточасы = 0;
			КонецЕсли;
			СтрокаПрицепа.Моточасы = СтрокаПрицепа.Моточасы + ТекЗадание.КоличествоЧасовПрицеп1;
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекЗадание.Прицеп2) Тогда
			СтрокаПрицепа = тблПрицепы.Найти(ТекЗадание.Прицеп2, "ТС");
			Если СтрокаПрицепа = Неопределено Тогда
				СтрокаПрицепа = тблПрицепы.Добавить();
				СтрокаПрицепа.ТС = ТекЗадание.Прицеп2;
				СтрокаПрицепа.Моточасы = 0;
			КонецЕсли;
			СтрокаПрицепа.Моточасы = СтрокаПрицепа.Моточасы + ТекЗадание.КоличествоЧасовПрицеп2;
		КонецЕсли;
	КонецЦикла;
	
	Если ТС = Объект.ТранспортноеСредство Тогда
		ОбщийПробегНаработка = уатОбщегоНазначения.уатРазностьПоказанийСчетчика(Объект.СпидометрВыезда, Объект.СпидометрВозвращения);
	Иначе // это прицеп или оборудование из ТЧ Прицепы
		ТекСтрокаПрицепа = тблПрицепы.Найти(ТС, "ТС");
		Если ТекСтрокаПрицепа <> Неопределено Тогда
			ОбщийПробегНаработка = ТекСтрокаПрицепа.Моточасы;
		КонецЕсли;
	КонецЕсли;
	
	СтрокиПоискаТЖ = Объект.РасходГСМ.НайтиСтроки(Новый Структура("ТС, ГСМ", ТС, ТЖ));
	Если СтрокиПоискаТЖ.Количество() > 0 Тогда
		ТекСтрокаТЖ = СтрокиПоискаТЖ[0];
		
		мсвНормыРасходаТЖ = тблНормыРасходаТЖ.НайтиСтроки(Новый Структура("МодельТС", ТекСтрокаТЖ.ТС));
		Если мсвНормыРасходаТЖ.Количество() = 0 Тогда
			мсвНормыРасходаТЖ = тблНормыРасходаТЖ.НайтиСтроки(Новый Структура("МодельТС", ТекСтрокаТЖ.ТС.Модель));
		КонецЕсли;
		Если мсвНормыРасходаТЖ.Количество() > 0 Тогда
			НормыРасходаТЖ = мсвНормыРасходаТЖ[0];
		
			мсвПоиск = Объект.РасходГСМ.НайтиСтроки(Новый Структура("ГСМ", ТекСтрокаТЖ.ТС.Модель.ОсновноеТопливо));
			Если мсвПоиск.Количество() > 0 Тогда
				СтрокаРасходГСМОснТопливо = мсвПоиск[0];
			Иначе
				СтрокаРасходГСМОснТопливо = Неопределено;
			КонецЕсли;
			мсвПоиск = Объект.РасходГСМ.НайтиСтроки(Новый Структура("ГСМ", ТекСтрокаТЖ.ТС.Модель.ДополнительноеТопливо));
			Если мсвПоиск.Количество() > 0 Тогда
				СтрокаРасходГСМДопТопливо = мсвПоиск[0];
			Иначе
				СтрокаРасходГСМДопТопливо = Неопределено;
			КонецЕсли;
			
			// норму на осн. и доп. топливо считаем и для одометра и для счетчика моточасов
			Если СтрокаРасходГСМОснТопливо <> Неопределено И ЗначениеЗаполнено(НормыРасходаТЖ.Норма) Тогда
				ТекРасходГСМ = СтрокаРасходГСМОснТопливо.РасходПоНорме * НормыРасходаТЖ.Норма / 100;
				Если ТекРасходГСМ > 0 Тогда
					Рез.Добавить(Формат(ТекРасходГСМ, "ЧДЦ=3; ЧН=0"), "Расход на основное топливо");
				КонецЕсли;
			КонецЕсли;
			Если СтрокаРасходГСМДопТопливо <> Неопределено И ЗначениеЗаполнено(НормыРасходаТЖ.НормаНаДопТопливо) Тогда
				ТекРасходГСМ = СтрокаРасходГСМДопТопливо.РасходПоНорме * НормыРасходаТЖ.НормаНаДопТопливо / 100;
				Если ТекРасходГСМ > 0 Тогда
					Рез.Добавить(Формат(ТекРасходГСМ, "ЧДЦ=3; ЧН=0"), "Расход на доп. топливо");
				КонецЕсли;
			КонецЕсли;
			
			Если ТекСтрокаТЖ.ТС.Модель.НаличиеСпидометра И ЗначениеЗаполнено(НормыРасходаТЖ.ЛинейнаяНорма) Тогда
				ТекРасходГСМ = ОбщийПробегНаработка * НормыРасходаТЖ.ЛинейнаяНорма / 100;
				Если ТекРасходГСМ > 0 Тогда
					Рез.Добавить(Формат(ТекРасходГСМ, "ЧДЦ=3; ЧН=0"), "Расход на 100 км пробега (линейная норма)");
				КонецЕсли;
			ИначеЕсли НЕ ТекСтрокаТЖ.ТС.Модель.НаличиеСпидометра И ЗначениеЗаполнено(НормыРасходаТЖ.НормаНаМоточас) Тогда
				ТекРасходГСМ = ОбщийПробегНаработка * НормыРасходаТЖ.НормаНаМоточас;
				Если ТекРасходГСМ > 0 Тогда
					Рез.Добавить(Формат(ТекРасходГСМ, "ЧДЦ=3; ЧН=0"), "Расход по моточасам");
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
	Возврат Рез;
КонецФункции

&НаКлиенте
Процедура РаботаНаДвухВидахТопливаПриИзменении(Элемент)
	Если НЕ Объект.РаботаНаДвухВидахТоплива И Объект.РаботаНаДвухВидахТопливаОдновременно Тогда
		ПереключательДваВидаТоплива = "Поочередно";
		Объект.РаботаНаДвухВидахТопливаОдновременно = Ложь;
		РежимРаботыНаДвухВидахТопливаПриИзменении(Неопределено);
	КонецЕсли;
	
	Элементы.РасходГСМПробег.Видимость             = Объект.РаботаНаДвухВидахТоплива;
	Элементы.ПереключательДваВидаТоплива.Видимость = Объект.РаботаНаДвухВидахТоплива;
	Элементы.РаботаНаДвухВидахТоплива.Заголовок    = ?(Объект.РаботаНаДвухВидахТоплива,
		"Два вида топлива:", "Два вида топлива");
	
	ЗаполнитьПробегПоУмолчаниюПриРаботеНаДвухВидахТоплива();
КонецПроцедуры

&НаКлиенте
Процедура РасходГСМПриИзменении(Элемент)
	ОбновитьДинамическиеКолонкиРасходГСМ();
КонецПроцедуры

&НаКлиенте
Процедура РасходГСМОстатокПриВыездеПриИзменении(Элемент)
	ПересчетОстаткаГСМ("ОстатокПриВыезде");
КонецПроцедуры

&НаКлиенте
Процедура РасходГСМОстатокПриВозвращенииПриИзменении(Элемент)
	ПересчетОстаткаГСМ("ОстатокПриВозвращении");
КонецПроцедуры

&НаКлиенте
Процедура РасходГСМРасходПоФактуПриИзменении(Элемент)
	ТекСтрока = Элементы.РасходГСМ.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТекСтрока.ЭтоТЖ Тогда
		ТекСтрока.ОстатокПриВозвращении = ТекСтрока.ОстатокПриВыезде - ТекСтрока.РасходПоФакту + ТекСтрока.Выдано - ТекСтрока.Сдано;
	Иначе
		ПересчетОстаткаГСМ("РасходПоФакту");
		ПересчитатьРасходТЖсервер();
	КонецЕсли;
	
	ОбновитьДинамическиеКолонкиРасходГСМ();
КонецПроцедуры

&НаКлиенте
Процедура РасходГСМПробегПриИзменении(Элемент)
	мТекущиеДанные = Элементы.РасходГСМ.ТекущиеДанные;
	ОбщийПробегПЛ = уатОбщегоНазначения.уатРазностьПоказанийСчетчика(Объект.СпидометрВыезда, Объект.СпидометрВозвращения);
	
	Если мТекущиеДанные.Пробег > ОбщийПробегПЛ Тогда
		мТекущиеДанные.Пробег = ОбщийПробегПЛ;
	КонецЕсли;
	
	Если Объект.РаботаНаДвухВидахТопливаОдновременно Тогда
		Возврат;
	КонецЕсли;
		
	ПараметрыОтбора = Новый Структура;
	ПараметрыОтбора.Вставить("ТС", мТекущиеДанные.ТС);
	мСтроки = Объект.РасходГСМ.НайтиСтроки(ПараметрыОтбора);
	Для Каждого ТекСтрока Из мСтроки Цикл
		Если уатГСМ.ЭтоТехническаяЖидкость(ТекСтрока.ГСМ) Тогда
			Продолжить;
		КонецЕсли;
		Если ТекСтрока.ГСМ <> мТекущиеДанные.ГСМ Тогда
			ТекСтрока.Пробег = ОбщийПробегПЛ - мТекущиеДанные.Пробег;
			Прервать;
		КонецЕсли;	
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПересчитатьРасходТЖсервер()
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	ДокОбъект.РасчетРасходаТЖ();
	ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
	ОбновитьДинамическиеКолонкиТЧСервер();
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыЗаправкиГСМ

&НаКлиенте
Процедура РедактироватьЗаправкуГСМВДиалоге(Команда)
	Элементы.РедактироватьЗаправкуГСМВДиалоге.Пометка = НЕ Элементы.РедактироватьЗаправкуГСМВДиалоге.Пометка;
	РедактироватьЗаправкуГСМВДиалоге = Элементы.РедактироватьЗаправкуГСМВДиалоге.Пометка;
	Элементы.ЗаправкиГСМНомер.ТолькоПросмотр = НЕ РедактироватьЗаправкуГСМВДиалоге;
	СохранитьНастройкиСервер();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСуществующуюЗаправку(Команда)
	Если Объект.Рассчитан Тогда
		Объект.Рассчитан = Ложь;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		ТекстНСТР = НСтр("en='To perform this operation it is necessary to record the document. Continue?';ru='Для выполнения данной операции необходимо записать документ. Продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьСуществующуюЗаправкуЗавершение1", ЭтотОбъект),
			ТекстНСТР, РежимДиалогаВопрос.ОКОтмена);
        Возврат;
	КонецЕсли;
	
	ДобавитьСуществующуюЗаправкуФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСуществующуюЗаправкуЗавершение1(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ <> КодВозвратаДиалога.ОК Тогда
        Возврат;
    КонецЕсли;
    
    Если НЕ ПроверитьЗаполнениеДокумента() Тогда
        Возврат;
    КонецЕсли;
    
    Попытка
		флЗаписан = Записать();
	Исключение
		Возврат;
	КонецПопытки;
	
	Если НЕ флЗаписан Тогда
		Возврат;
	КонецЕсли;
    
    ДобавитьСуществующуюЗаправкуФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСуществующуюЗаправкуФрагмент()
    
    СтруктураОтбора = Новый Структура;
    СтруктураОтбора.Вставить("ПометкаУдаления", Ложь);
    СтруктураОтбора.Вставить("Организация", Объект.Организация);
	
	СписТС = Новый СписокЗначений;
    СписТС.Добавить(Объект.ТранспортноеСредство);
    Для Каждого ТекСтрокаОборудование Из Объект.Прицепы Цикл
        СписТС.Добавить(ТекСтрокаОборудование.ТС);
	КонецЦикла;
	
    ОткрытьФорму("Документ.уатЗаправкаГСМ.ФормаВыбора", Новый Структура("Отбор, СписокТС",
		СтруктураОтбора, СписТС),,,,,
		Новый ОписаниеОповещения("ДобавитьСуществующуюЗаправкуЗавершение", ЭтотОбъект),
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСуществующуюЗаправкуЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    дЗаправкаГСМ = Результат;
    Если дЗаправкаГСМ = Неопределено Тогда
        Возврат;
    КонецЕсли;	
    
    Если РедактироватьЗаправкуГСМВДиалоге Тогда
        ДобавитьЗаправкуГСМВДиалоге(, дЗаправкаГСМ);
	Иначе
		ДобавитьСуществующуюЗаправкуСервер(дЗаправкаГСМ);
        ДобавитьЗаправкуГСМВСписке();
		ОбновитьНадписьРассчитан();
    КонецЕсли;
    
КонецПроцедуры

&НаСервере
Процедура ДобавитьСуществующуюЗаправкуСервер(дЗаправкаГСМ)
	ДокЗаправка = дЗаправкаГСМ.ПолучитьОбъект();
	ДокЗаправка.ПризнакРедактированияИзПутевогоЛиста = Истина;
	ДокЗаправка.ПризнакРедактированияИзПутевогоЛистаСсылка = Объект.Ссылка;
	ДокЗаправка.Заполнить(Объект.Ссылка);
	Если НЕ РедактироватьЗаправкуГСМВДиалоге Тогда
		ДокЗаправка.Записать();
	КонецЕсли;
	ЗначениеВРеквизитФормы(ДокЗаправка, "мДокументЗаправкаГСМ");
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМПриИзменении(Элемент)
	ОбновитьДинамическиеКолонкиРасходГСМ();
	ОбновитьКартинкиЗаправкиГСМ();
	ОбновитьЗаправкиВсего();
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
	
	Если Объект.Рассчитан Тогда
		Объект.Рассчитан = Ложь;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		ТекстНСТР = НСтр("en='To perform this operation it is necessary to record the document. Continue?';ru='Для выполнения данной операции необходимо записать документ. Продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаправкиГСМПередНачаломДобавленияЗавершение", ЭтотОбъект,
			Новый Структура("Копирование", Копирование)), ТекстНСТР, РежимДиалогаВопрос.ОКОтмена);
        Возврат;
	КонецЕсли;
	
	ЗаправкиГСМПередНачаломДобавленияФрагмент(Копирование);
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМПередНачаломДобавленияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Копирование = ДополнительныеПараметры.Копирование;
    
    
    Ответ = РезультатВопроса;
    Если Ответ <> КодВозвратаДиалога.ОК Тогда
        Возврат;
    КонецЕсли;
    
    Если НЕ ПроверитьЗаполнениеДокумента() Тогда
        Возврат;
    КонецЕсли;
    
    Попытка
		флЗаписан = Записать();
	Исключение
		Возврат;
	КонецПопытки;
	
	Если НЕ флЗаписан Тогда
		Возврат;
	КонецЕсли;
    
    ЗаправкиГСМПередНачаломДобавленияФрагмент(Копирование);

КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМПередНачаломДобавленияФрагмент(Знач Копирование)
    
    Перем мТекущаяСтрокаСтруктура;
    
    Если РедактироватьЗаправкуГСМВДиалоге Тогда
        ДобавитьЗаправкуГСМВДиалоге(Копирование);
    Иначе
        мТекущаяСтрокаСтруктура = СтруктураСтрокиЗаправкиГСМ();
        Если Копирование Тогда
            ЗаполнитьЗначенияСвойств(мТекущаяСтрокаСтруктура, Элементы.ЗаправкиГСМ.ТекущиеДанные);
        КонецЕсли;
        ДобавитьЗаправкуГСМсервер(Копирование, мТекущаяСтрокаСтруктура);
        ДобавитьЗаправкуГСМВСписке();
    КонецЕсли;
    
    ОбновитьДинамическиеКолонкиРасходГСМ();
    ОбновитьКартинкиЗаправкиГСМ();
    ОбновитьЗаправкиВсего();
    ОбновитьНадписьРассчитан();

КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМПередНачаломИзменения(Элемент, Отказ)
	Если РедактироватьЗаправкуГСМВДиалоге Тогда
		ИзменитьЗаправкуГСМВДиалоге();
		Отказ = Истина;
	Иначе
		ТекЗаправка = Элементы.ЗаправкиГСМ.ТекущиеДанные.Ссылка;
		НачалоИзмененияЗаправкиГСМсервер(ТекЗаправка);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура НачалоИзмененияЗаправкиГСМсервер(ТекЗаправка)
	ДокЗаправка = ТекЗаправка.ПолучитьОбъект();
	ДокЗаправка.ПризнакРедактированияИзПутевогоЛиста = Истина;
	ДокЗаправка.ПризнакРедактированияИзПутевогоЛистаСсылка = Объект.Ссылка;
	ЗначениеВРеквизитФормы(ДокЗаправка, "мДокументЗаправкаГСМ");
КонецПроцедуры

&НаСервере
Процедура ДобавитьЗаправкуГСМсервер(флКопирование = Ложь, мТекущаяСтрокаСтруктура = Неопределено)
	Если флКопирование = Истина Тогда
		ДокОбъект = мТекущаяСтрокаСтруктура.Ссылка.Скопировать();
	Иначе
		ДокОбъект = Документы.уатЗаправкаГСМ.СоздатьДокумент();
	КонецЕсли;
	
	ДокОбъект.ПризнакРедактированияИзПутевогоЛиста = Истина;
	ДокОбъект.ПризнакРедактированияИзПутевогоЛистаСсылка = Объект.Ссылка;
	ДокОбъект.Заполнить(Объект.Ссылка);
	ДокОбъект.УчитыватьНДС = мВидимостьРеквизитовНДС;
	ДокОбъект.СуммаВключаетНДС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
		ПланыВидовХарактеристик.уатПраваИНастройки.СуммаВключаетНДС);
		
	СтруктураОбъектовНастроек = Новый Структура;
	СтруктураОбъектовНастроек.Вставить("Организация",	 Объект.Организация);
	Если Элементы.Подразделение.Видимость Тогда
		СтруктураОбъектовНастроек.Вставить("Подразделение",	 Объект.Подразделение);
	
		ДокОбъект.ПодразделениеОрганизации = Объект.Подразделение;
	КонецЕсли;
		
	Если флКопирование = Истина Тогда
		ДокОбъект.Заправки.Очистить();
		НоваяЗаправка = ДокОбъект.Заправки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗаправка, мТекущаяСтрокаСтруктура);
		НоваяЗаправка.ПутевойЛист = Объект.Ссылка;
	Иначе
		ДокОбъект.ВидДвиженияГСМ = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек,
				ПланыВидовХарактеристик.уатПраваИНастройки.ОсновнойВидЗаправки);
		ДокОбъект.АЗС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек,
				ПланыВидовХарактеристик.уатПраваИНастройки.ОсновнаяАЗС);
	КонецЕсли;
	
	Попытка
		ДокОбъект.Записать();
		ЗначениеВРеквизитФормы(ДокОбъект, "мДокументЗаправкаГСМ");
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Не удалось добавить заправку ГСМ: " + КраткоеПредставлениеОшибки(ИнформацияОбОшибке()));
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗаправкуГСМВДиалоге(флКопирование = Ложь, дЗаправкаГСМ = Неопределено)
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ДобавлениеЗаправкиИзПЛ", Истина);
	ПараметрыОткрытия.Вставить("ПутевойЛист", Объект.Ссылка);
	Если дЗаправкаГСМ <> Неопределено Тогда
		ПараметрыОткрытия.Вставить("Ключ", дЗаправкаГСМ);
	КонецЕсли;
	
	Если флКопирование = Истина Тогда
		ТекСтрока = Элементы.ЗаправкиГСМ.ТекущиеДанные;
		Если ТекСтрока <> Неопределено Тогда
			мТекущаяСтрокаСтруктура = СтруктураСтрокиЗаправкиГСМ();
			ЗаполнитьЗначенияСвойств(мТекущаяСтрокаСтруктура, ТекСтрока);
			мТекущаяСтрокаСтруктура.Договор = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрока.Ссылка, "ДоговорКонтрагента");
			ПараметрыОткрытия.Вставить("ЗаправкаКопирование", мТекущаяСтрокаСтруктура);
		КонецЕсли;
	КонецЕсли;
	
	ОткрытьФорму("Документ.уатЗаправкаГСМ.ФормаОбъекта", ПараметрыОткрытия, ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЗаправкуГСМВДиалоге()
	ТекСтрока = Элементы.ЗаправкиГСМ.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("Ключ",                       ТекСтрока.Ссылка);
	ПараметрыОткрытия.Вставить("РедактированиеЗаправкиИзПЛ", Истина);
	ПараметрыОткрытия.Вставить("ПутевойЛист",                Объект.Ссылка);
	
	ОткрытьФорму("Документ.уатЗаправкаГСМ.ФормаОбъекта", ПараметрыОткрытия,,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЗаправкуГСМВСписке()
	мТекущаяСтрока = Элементы.ЗаправкиГСМ.ТекущиеДанные;
	мсвНайдСтроки = мДокументЗаправкаГСМ.Заправки.НайтиСтроки(Новый Структура("НомерСтроки", мТекущаяСтрока.НомерСтроки));
	Если мсвНайдСтроки.Количество() = 0 Тогда
		НайденнаяСтрока = Неопределено;
	Иначе
		НайденнаяСтрока = мсвНайдСтроки[0];
	КонецЕсли;
	
	Если НайденнаяСтрока = Неопределено Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("en='Error writing document ""Fueling""!"
"Maybe the document was changed by another user!';ru='Ошибка при записи документа ""Заправка ГСМ""!"
"Возможно документ был изменен другим пользователем!'"));
	Иначе
		мТекущаяСтрокаСтруктура = СтруктураСтрокиЗаправкиГСМ();
		ЗаполнитьЗначенияСвойств(мТекущаяСтрокаСтруктура, мТекущаяСтрока);
		
		СообщениеПревышениеУровняТопливаВБаке = "";
		
		ИзменитьЗаправкуГСМВСпискеСервер(мТекущаяСтрокаСтруктура, СообщениеПревышениеУровняТопливаВБаке);
		
		Если НЕ ПустаяСтрока(СообщениеПревышениеУровняТопливаВБаке) Тогда
			ПоказатьПредупреждение(Неопределено, СообщениеПревышениеУровняТопливаВБаке);
			//уатОбщегоНазначенияТиповые.СообщитьОбОшибке(СообщениеПревышениеУровняТопливаВБаке);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция СтруктураСтрокиЗаправкиГСМ()
	Рез = Новый Структура;
	Для Каждого ТекРеквизит Из Метаданные.Документы.уатЗаправкаГСМ.ТабличныеЧасти.Заправки.Реквизиты Цикл
		Рез.Вставить(ТекРеквизит.Имя);
	КонецЦикла;
	Рез.Вставить("АЗС");
	Рез.Вставить("Договор");
	Рез.Вставить("ВидДвиженияГСМ");
	Рез.Вставить("Страна");
	Рез.Вставить("НомерСтроки");
	Рез.Вставить("Ссылка");
	Рез.Вставить("ДатаЗаправки");
	Рез.Вставить("УчитыватьНДС");
	Рез.Вставить("СуммаВключаетНДС");
	
	Возврат Рез;
КонецФункции

&НаСервере
Процедура ИзменитьЗаправкуГСМВСпискеСервер(мТекущаяСтрокаСтруктура, СообщениеПревышениеУровняТопливаВБаке)
	Рез = Истина;
	
	ДокЗаправка = РеквизитФормыВЗначение("мДокументЗаправкаГСМ");
	ДокЗаправка.АЗС = мТекущаяСтрокаСтруктура.АЗС;
	ДокЗаправка.ВидДвиженияГСМ = мТекущаяСтрокаСтруктура.ВидДвиженияГСМ;
	ДокЗаправка.Страна = мТекущаяСтрокаСтруктура.Страна;
	ДокЗаправка.Дата = мТекущаяСтрокаСтруктура.Дата;
	ДокЗаправка.УчитыватьНДС	    = мТекущаяСтрокаСтруктура.УчитыватьНДС;
	ДокЗаправка.СуммаВключаетНДС	= мТекущаяСтрокаСтруктура.СуммаВключаетНДС;
	
	НайденнаяСтрока = ДокЗаправка.Заправки.Найти(мТекущаяСтрокаСтруктура.НомерСтроки, "НомерСтроки");
	НайденнаяСтрока.Дата 			= мТекущаяСтрокаСтруктура.ДатаЗаправки;
	НайденнаяСтрока.ТС 				= мТекущаяСтрокаСтруктура.ТС;
	НайденнаяСтрока.Водитель 		= мТекущаяСтрокаСтруктура.Водитель;
	НайденнаяСтрока.ГСМ 			= мТекущаяСтрокаСтруктура.ГСМ;
	НайденнаяСтрока.Цена 			= мТекущаяСтрокаСтруктура.Цена;
	НайденнаяСтрока.Количество 		= мТекущаяСтрокаСтруктура.Количество;
	НайденнаяСтрока.Сумма 			= мТекущаяСтрокаСтруктура.Сумма;
	НайденнаяСтрока.Валюта 			= мТекущаяСтрокаСтруктура.Валюта;
	НайденнаяСтрока.ПластиковаяКарта= мТекущаяСтрокаСтруктура.ПластиковаяКарта;
	НайденнаяСтрока.НомераТалонов	= мТекущаяСтрокаСтруктура.НомераТалонов;
	НайденнаяСтрока.СтавкаНДС	    = мТекущаяСтрокаСтруктура.СтавкаНДС;
	
	Если ЗначениеЗаполнено(НайденнаяСтрока.СтавкаНДС) Тогда
		уатОбщегоНазначенияТиповыеСервер.уатРассчитатьСуммуНДСТабЧасти(НайденнаяСтрока, ДокЗаправка);
	КонецЕсли;
	
	Попытка
		ДокЗаправка.Записать(РежимЗаписиДокумента.Проведение);
		ЗначениеВРеквизитФормы(ДокЗаправка, "мДокументЗаправкаГСМ");
	Исключение
		Рез = Ложь;
	КонецПопытки;
	
	Если Рез Тогда
		ПересчетВыданногоГСМСервер();
		УстановитьПривилегированныйРежим(Истина);
		Попытка
			Записать(Новый Структура("ЗаписьЗаправкиГСМ"));
		Исключение
		КонецПопытки;
		
		тблЗаправки = ДокЗаправка.Заправки.Выгрузить();
		уатГСМ.ПроверитьПревышениеУровняТопливаВБаке(тблЗаправки, ДокЗаправка.Организация, ДокЗаправка.АЗС, СообщениеПревышениеУровняТопливаВБаке);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗаправкуГСМВСписке()
	Если мДокументЗаправкаГСМ.Заправки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекСтрокаНовойЗаправки = мДокументЗаправкаГСМ.Заправки[мДокументЗаправкаГСМ.Заправки.Количество()-1];
	
	НоваяСтрока = ЗаправкиГСМ.Добавить();
	НоваяСтрока.Ссылка = мДокументЗаправкаГСМ.Ссылка;
	НоваяСтрока.НомерСтроки	= ТекСтрокаНовойЗаправки.НомерСтроки;
	НоваяСтрока.Номер = мДокументЗаправкаГСМ.Номер;
	НоваяСтрока.Дата = мДокументЗаправкаГСМ.Дата;
	НоваяСтрока.ДатаЗаправки = ТекСтрокаНовойЗаправки.Дата;
	НоваяСтрока.АЗС = мДокументЗаправкаГСМ.АЗС;
	НоваяСтрока.ВидДвиженияГСМ = мДокументЗаправкаГСМ.ВидДвиженияГСМ;
	НоваяСтрока.ТС = ТекСтрокаНовойЗаправки.ТС;
	НоваяСтрока.Водитель = Объект.Водитель1;
	НоваяСтрока.ГСМ = ТекСтрокаНовойЗаправки.ГСМ;
	Если (НЕ ЗначениеЗаполнено(НоваяСтрока.ГСМ)) И ЗначениеЗаполнено(ТекСтрокаНовойЗаправки.ТС) Тогда
		НоваяСтрока.ГСМ = ПолучитьЗначениеРеквизита(ПолучитьЗначениеРеквизита(ТекСтрокаНовойЗаправки.ТС, "Модель"),
			"ОсновноеТопливо");
		ЗаправкиПриИзмененииГСМ(НоваяСтрока);
	КонецЕсли;
	
	Если НоваяСтрока.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаТалоны")
		И (НЕ ЗначениеЗаполнено(НоваяСтрока.НомераТалонов))
		И ЗначениеЗаполнено(ТекСтрокаНовойЗаправки.НомераТалонов) Тогда
		
		НоваяСтрока.НомераТалонов = ТекСтрокаНовойЗаправки.НомераТалонов;
	КонецЕсли;
		
	Если (НоваяСтрока.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКарта")
		ИЛИ НоваяСтрока.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад"))
		И НЕ ЗначениеЗаполнено(НоваяСтрока.ПластиковаяКарта)
		И ЗначениеЗаполнено(ТекСтрокаНовойЗаправки.ПластиковаяКарта) Тогда
		
		НоваяСтрока.ПластиковаяКарта = ТекСтрокаНовойЗаправки.ПластиковаяКарта;
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.ПластиковаяКарта) Тогда
			Если ЗначениеЗаполнено(НоваяСтрока.АЗС) Тогда
				КемВыдана = НоваяСтрока.АЗС;
			Иначе
				КемВыдана = Неопределено;
			КонецЕсли;

			НоваяСтрока.ПластиковаяКарта = уатОбщегоНазначения.уатПластиковаяКартаТСВодителя(ТекСтрокаНовойЗаправки.ТС,
				Объект.Водитель1,КемВыдана,НоваяСтрока.Дата);
		КонецЕсли;
		
	//ИначеЕсли НоваяСтрока.ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаНаличные Тогда
	//	НоваяСтрока.Сумма = 0;
	КонецЕсли;
	
	НоваяСтрока.Количество = ТекСтрокаНовойЗаправки.Количество;
	НоваяСтрока.Цена = ТекСтрокаНовойЗаправки.Цена;
	НоваяСтрока.Сумма = ТекСтрокаНовойЗаправки.Сумма;
	НоваяСтрока.Валюта = ТекСтрокаНовойЗаправки.Валюта;
	
	Если НЕ ЗначениеЗаполнено(НоваяСтрока.Валюта) Тогда
		НоваяСтрока.Валюта = ВалютаРегламентированногоУчета();
	КонецЕсли;
	
	НоваяСтрока.УчитыватьНДС = мДокументЗаправкаГСМ.УчитыватьНДС;
	НоваяСтрока.СуммаВключаетНДС = мДокументЗаправкаГСМ.СуммаВключаетНДС;
	
	НоваяСтрока.СуммаНДС = ТекСтрокаНовойЗаправки.СуммаНДС;
	НоваяСтрока.СтавкаНДС = ТекСтрокаНовойЗаправки.СтавкаНДС;
	ПолучитьСтавку(НоваяСтрока);
	
	Элементы.ЗаправкиГСМ.ТекущаяСтрока = ЗаправкиГСМ[ЗаправкиГСМ.Количество() - 1].ПолучитьИдентификатор();
	ТекущийЭлемент = Элементы.ЗаправкиГСМКоличество;
	Элементы.ЗаправкиГСМКоличество.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
	
	ОбновитьКартинкиЗаправкиГСМ();
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	
	Если ЗаправкиГСМ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекСтрока = Элементы.ЗаправкиГСМ.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстНСТР = НСтр("en='Delete fuelling?';ru='Удалить заправку ГСМ?'");
	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаправкиГСМПередУдалениемЗавершение", ЭтотОбъект,
		Новый Структура("ТекСтрока", ТекСтрока)), ТекстНСТР, РежимДиалогаВопрос.ОКОтмена);
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМПередУдалениемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ТекСтрока = ДополнительныеПараметры.ТекСтрока;
    
    Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		ЗаправкаГСМСсылка = ТекСтрока.Ссылка;
		ЗаправкаГСМТС = ТекСтрока.ТС;
		ЗаправкаГСМДата = ТекСтрока.ДатаЗаправки;
		ЗаправкаГСМКоличество = ТекСтрока.Количество;
		ЗаправкиГСМ.Удалить(ТекСтрока);
		ЗаправкиГСМПередУдалениемЗавершениеСервер(ЗаправкаГСМСсылка, ЗаправкаГСМТС, ЗаправкаГСМДата, ЗаправкаГСМКоличество);
    КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаправкиГСМПередУдалениемЗавершениеСервер(ЗаправкаГСМСсылка, ЗаправкаГСМТС, ЗаправкаГСМДата, ЗаправкаГСМКоличество)
	УдалитьЗаправкуСервер(ЗаправкаГСМСсылка, ЗаправкаГСМТС, ЗаправкаГСМДата, ЗаправкаГСМКоличество);
	ПересчетВыданногоГСМСервер();
	УстановитьПривилегированныйРежим(Истина);
	Попытка
		Записать(Новый Структура("ЗаписьЗаправкиГСМ"));
	Исключение
	КонецПопытки;
КонецПроцедуры

&НаСервере
Процедура УдалитьЗаправкуСервер(ТекЗаправка, ТекТС, ТекДата, ТекКоличество)
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	ДокОбъект.УдалитьЗаправку(ТекЗаправка.ПолучитьОбъект(), ТекТС, ТекДата, ТекКоличество);
	ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
	ОбновитьДинамическиеКолонкиТЧСервер();
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ОбновитьСписокПластиковыхКарт();
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если ОтменаРедактирования Тогда
		ВывестиТаблицуЗаправок();
		Возврат;
	КонецЕсли; 
	
	ТекСтрока = Элементы.ЗаправкиГСМ.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(ТекСтрока.ТС) Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, НСтр("en='It is necessary to select the vehicle!';ru='Необходимо выбрать ТС!'"), 30);
		Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(ТекСтрока.Водитель) Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, НСтр("en='It is necessary to choose driver!';ru='Необходимо выбрать водителя!'"), 30);
		Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(ТекСтрока.ГСМ) Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, НСтр("en='It is necessary to select fuels!';ru='Необходимо выбрать ГСМ!'"), 30);
		Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(ТекСтрока.АЗС) Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, НСтр("en='You should select gas station!';ru='Необходимо выбрать АЗС!'"), 30);
		Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(ТекСтрока.ВидДвиженияГСМ) Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, НСтр("en='It is necessary to choose type of refueling!';ru='Необходимо выбрать вид заправки!'"), 30);
		Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(ТекСтрока.Количество) Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, НСтр("en='You must specify a number!';ru='Необходимо указать количество!'"), 30);
		Возврат;
	ИначеЕсли (ТекСтрока.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКарта")
		ИЛИ ТекСтрока.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад")) Тогда
		
		Если НЕ ЗначениеЗаполнено(ТекСтрока.ПластиковаяКарта) Тогда
			Отказ = Истина;
			ПоказатьПредупреждение(Неопределено, НСтр("en='It is necessary to specify plastic card!';ru='Необходимо указать пластиковую карту!'"), 30);
			Возврат;
		ИначеЕсли ПластиковаяКартаПросрочена(ТекСтрока.ПластиковаяКарта,ТекСтрока.Дата) Тогда
			Отказ = Истина;
			ПоказатьПредупреждение(Неопределено, НСтр("en='Plastic card expired!';ru='Пластиковая карта просрочена!'"), 30);
			Возврат;
		КонецЕсли;
		
	ИначеЕсли (ТекСтрока.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаНаличные")
		ИЛИ ТекСтрока.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПоставщик")
		ИЛИ ТекСтрока.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКарта"))
		И ТекСтрока.УчитыватьНДС
		И НЕ ЗначениеЗаполнено(ТекСтрока.СтавкаНДС) Тогда
		
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, НСтр("en='It is necessary to specify VAT rate!';ru='Необходимо указать ставку НДС!'"), 30);
		Возврат;
	КонецЕсли;
	
	Если Не РедактироватьЗаправкуГСМВДиалоге И Не Отказ Тогда
		Попытка
			ИзменитьЗаправкуГСМВСписке();
		Исключение
			Отказ = Истина;
		КонецПопытки;
		// Сохранение индекса текущей строки
		ТекЗаправкаГСМ = Новый Структура();
		ТекЗаправкаГСМ.Вставить("Ссылка", ТекСтрока.Ссылка);
		ТекЗаправкаГСМ.Вставить("НомерСтроки", ТекСтрока.НомерСтроки);
		
		ВывестиТаблицуЗаправок();
		
		Элементы.ЗаправкиГСМ.Обновить();
		ТекСтрока = ЗаправкиГСМ.НайтиСтроки(ТекЗаправкаГСМ);
		Если ТекСтрока.Количество() <> 0 Тогда
			Элементы.ЗаправкиГСМ.ТекущаяСтрока = ТекСтрока[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ЗаправкиГСМКоличество.РежимРедактирования = РежимРедактированияКолонки.Вход;
	ОбновитьДинамическиеКолонкиРасходГСМ();
	//ОбновитьКартинкиЗаправкиГСМ();
	ОбновитьЗаправкиВсего();
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элементы.ЗаправкиГСМ.ТолькоПросмотр Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(Неопределено, Элемент.ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДанныеТСВЗаправкеГСМ(мТС)
	ТекСтрока = Элементы.ЗаправкиГСМ.ТекущиеДанные;
	ТекСтрока.ТС = мТС;
	
	Если ТекСтрока.ВидДвиженияГСМ <> ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаТалоны") Тогда
		ТекСтрока.ГСМ = ПолучитьЗначениеРеквизита(ПолучитьЗначениеРеквизита(мТС, "Модель"), "ОсновноеТопливо");
		ЗаправкиПриИзмененииГСМ(ТекСтрока);
		
		Если ТекСтрока.ВидДвиженияГСМ =	ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКарта")
			ИЛИ ТекСтрока.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад") Тогда
			Если ЗначениеЗаполнено(ТекСтрока.АЗС) Тогда
				КемВыдана = ТекСтрока.АЗС;
			Иначе
				КемВыдана = Неопределено;
			КонецЕсли;
			ПластиковаяКарта = уатОбщегоНазначения.уатПластиковаяКартаТСВодителя(мТС, Объект.Водитель1,КемВыдана,ТекСтрока.Дата);
			Если ЗначениеЗаполнено(ПластиковаяКарта) Тогда
				ТекСтрока.ПластиковаяКарта = ПластиковаяКарта;
			КонецЕсли;
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМТСПриИзменении(Элемент)
	ТекСтрока = Элементы.ЗаправкиГСМ.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекСтрока.ТС) Тогда
		УстановитьДанныеТСВЗаправкеГСМ(ТекСтрока.ТС);
	КонецЕсли;
	
	Если ТекСтрока.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКарта")
		ИЛИ ТекСтрока.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад") Тогда
		Если ЗначениеЗаполнено(ТекСтрока.ТС) Тогда
			Если ЗначениеЗаполнено(ТекСтрока.АЗС) Тогда
				КемВыдана = ТекСтрока.АЗС;
			Иначе
				КемВыдана = Неопределено;
			КонецЕсли;
			ПластиковаяКарта = уатОбщегоНазначения.уатПластиковаяКартаТСВодителя(ТекСтрока.ТС,ТекСтрока.Водитель,КемВыдана, ТекСтрока.Дата);
			Если ЗначениеЗаполнено(ПластиковаяКарта) Тогда
				ТекСтрока.ПластиковаяКарта = ПластиковаяКарта;
			Иначе
				ПластиковаяКарта = уатОбщегоНазначения.уатПластиковаяКартаТСВодителя(Объект.ТранспортноеСредство,Объект.Водитель1,КемВыдана, ТекСтрока.Дата);
				Если ЗначениеЗаполнено(ПластиковаяКарта) Тогда
					ТекСтрока.ПластиковаяКарта = ПластиковаяКарта;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьСписокПластиковыхКарт();
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМВодительПриИзменении(Элемент)
	мТС = Элементы.ЗаправкиГСМ.ТекущиеДанные.ТС;
	Если ЗначениеЗаполнено(мТС) Тогда
		УстановитьДанныеТСВЗаправкеГСМ(мТС);
	КонецЕсли;
	
	ОбновитьСписокПластиковыхКарт();
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМВодительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекСтрока = Элементы.ЗаправкиГСМ.ТекущиеДанные;
	уатЗащищенныеФункцииКлиент.ДиалогВыбораСотрудника(Элемент, ТекСтрока.Водитель,
		Новый Структура("Организация", Объект.Организация), СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМВодительАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Ожидание = 0 Тогда //выбор из списка
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМВодительОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМВидЗаправкиПриИзменении(Элемент)
	
	ТекСтрока = Элементы.ЗаправкиГСМ.ТекущиеДанные;
	ТекСтрока.Сумма = ТекСтрока.Цена * ТекСтрока.Количество;
	РассчитатьСуммуНДС(ТекСтрока);
	//ТекСтрока.ГСМ = Неопределено;
	
	Если ТекСтрока.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКарта")
		ИЛИ ТекСтрока.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад") Тогда
		мТС = ТекСтрока.ТС;
		Если ЗначениеЗаполнено(мТС) Тогда
			УстановитьДанныеТСВЗаправкеГСМ(мТС);
		КонецЕсли;
	Иначе
		ТекСтрока.ПластиковаяКарта = Неопределено; 
	КонецЕсли;
	
	Если ТекСтрока.АЗС = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПолучитьЗначениеРеквизита(ТекСтрока.АЗС, "ЭтоАЗССклад") = Ложь
		И (ТекСтрока.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаСклад")
		ИЛИ ТекСтрока.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад")
		ИЛИ ТекСтрока.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаТалоны")) Тогда
		
		ТекСтрока.АЗС = Неопределено;
		Возврат;
	КонецЕсли;
	Если ПолучитьЗначениеРеквизита(ТекСтрока.АЗС, "ЭтоАЗССклад") = Истина 
		И (ТекСтрока.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПоставщик")
		ИЛИ ТекСтрока.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКарта")
		ИЛИ ТекСтрока.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаНаличные")) Тогда
		
		ТекСтрока.АЗС = Неопределено;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМАЗСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ТекСтрока = Элементы.ЗаправкиГСМ.ТекущиеДанные;
	ЗаправкаСоСклада = (ТекСтрока.ВидДвиженияГСМ =
		ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаСклад")
		ИЛИ ТекСтрока.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад")
		ИЛИ ТекСтрока.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаТалоны"));
		
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Отбор", Новый Структура("ЭтоАЗССклад", ?(ЗаправкаСоСклада, Истина, Ложь)));
	ПараметрыОткрытия.Вставить("ТекущаяСтрока", ТекСтрока.АЗС);
	ОткрытьФорму("Справочник.уатАЗС.ФормаВыбора", ПараметрыОткрытия, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМГСМНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если Элементы.ЗаправкиГСМ.ТекущиеДанные.ВидДвиженияГСМ =
		ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаТалоны") Тогда
		
		мГруппаГСМ = ПредопределенноеЗначение("Перечисление.уатГруппыГСМ.Талон");
		мУчитыватьТЖ = Ложь;
	Иначе
		мГруппаГСМ = ПредопределенноеЗначение("Перечисление.уатГруппыГСМ.Топливо");
		мУчитыватьТЖ = Истина;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("ЗначениеГСМДоИзменения", Элементы.ЗаправкиГСМ.ТекущиеДанные.ГСМ);
	ОписаниеОповещенияЗакр  = Новый ОписаниеОповещения("ОписаниеОповещенияЗаправкиГСМ", ЭтотОбъект, ДополнительныеПараметры);
	уатЗащищенныеФункцииКлиент.СписокГСМдляТС(Объект.Организация, Элементы.ЗаправкиГСМ.ТекущиеДанные.ТС, мГруппаГСМ,, мУчитыватьТЖ, ОписаниеОповещенияЗакр);
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМГСМАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ТекСтрока = Элементы.ЗаправкиГСМ.ТекущиеДанные;
	
	СтандартнаяОбработка = Ложь;
	мсвГруппДляОтбора = Новый Массив;
	Если ТекСтрока.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаТалоны") Тогда
		мсвГруппДляОтбора.Добавить(ПредопределенноеЗначение("Перечисление.уатГруппыГСМ.Талон"));
		мУчитыватьТЖ = Ложь;
	Иначе	
		мсвГруппДляОтбора.Добавить(ПредопределенноеЗначение("Перечисление.уатГруппыГСМ.Топливо"));
		мУчитыватьТЖ = Истина;
	КонецЕсли;
	ДопПараметры = Новый Структура("ТС, Организация, УчитыватьТЖ", ТекСтрока.ТС, Объект.Организация, мУчитыватьТЖ);
	ДанныеВыбора = уатГСМ.ПолучитьСписокАвтоподбораПоляГСМ(Текст, мсвГруппДляОтбора, ДопПараметры);
КонецПроцедуры

// Подключаемый динамически обработчик оповещения
&НаКлиенте
Процедура ОписаниеОповещенияЗаправкиГСМ(Результат, ДопПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		Элементы.ЗаправкиГСМ.ТекущиеДанные.ГСМ = Результат;
		ЗаправкиГСМГСМПриИзменении(Неопределено);
		Если ДопПараметры.ЗначениеГСМДоИзменения <> Результат Тогда 
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМГСМОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ПараметрыПолученияДанных.СтрокаПоиска = "";
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМГСМПриИзменении(Элемент)
	ЗаправкиПриИзмененииГСМ(Элементы.ЗаправкиГСМ.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМАЗСПриИзменении(Элемент)
	ЗаправкиПриИзмененииГСМ(Элементы.ЗаправкиГСМ.ТекущиеДанные);
	
	ТекСтрока = Элементы.ЗаправкиГСМ.ТекущиеДанные;
	Контрагент_Склад = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрока.АЗС, "Контрагент_Склад");
	Если ТипЗнч(Контрагент_Склад) = Тип("СправочникСсылка.Контрагенты") Тогда
		Если уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(мДокументЗаправкаГСМ.ДоговорКонтрагента, "Владелец") <> Контрагент_Склад Тогда
			мДокументЗаправкаГСМ.ДоговорКонтрагента = уатЗаполнениеДокументов.ПолучитьОсновнойДоговорКонтрагента(Контрагент_Склад, "СПоставщиком", Объект.Организация);
		КонецЕсли;
	КонецЕсли;
	
		
	Если ТекСтрока.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКарта")
		ИЛИ ТекСтрока.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад") Тогда
		Если ЗначениеЗаполнено(ТекСтрока.ТС) Тогда
			Если ЗначениеЗаполнено(ТекСтрока.АЗС) Тогда
				КемВыдана = ТекСтрока.АЗС;
			Иначе
				КемВыдана = Неопределено;
			КонецЕсли;
			ПластиковаяКарта = уатОбщегоНазначения.уатПластиковаяКартаТСВодителя(ТекСтрока.ТС,ТекСтрока.Водитель,КемВыдана, ТекСтрока.Дата);
			Если ЗначениеЗаполнено(ПластиковаяКарта) Тогда
				ТекСтрока.ПластиковаяКарта = ПластиковаяКарта;
			Иначе
				ПластиковаяКарта = уатОбщегоНазначения.уатПластиковаяКартаТСВодителя(Объект.ТранспортноеСредство,Объект.Водитель1,КемВыдана, ТекСтрока.Дата);
				Если ЗначениеЗаполнено(ПластиковаяКарта) Тогда
					ТекСтрока.ПластиковаяКарта = ПластиковаяКарта;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиПриИзмененииГСМ(ТекСтрока)
	СтруктураЦенаВалюта = уатОбщегоНазначения.уатНайтиЦенуНоменклатуры(ТекСтрока.Дата, ТекСтрока.ГСМ,
		ТекСтрока.АЗС, Ложь);
	Если ЗначениеЗаполнено(СтруктураЦенаВалюта.Цена) Тогда
		ТекСтрока.Цена = СтруктураЦенаВалюта.Цена;
		ТекСтрока.Валюта = СтруктураЦенаВалюта.Валюта;
		ТекСтрока.Сумма = ТекСтрока.Цена*ТекСтрока.Количество;
	КонецЕсли;
	ПолучитьСтавку(ТекСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМПластиковаяКартаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ЗаправкиГСМ.ТекущиеДанные;
	
	СписокВладельцев = Новый СписокЗначений;
	Если ЗначениеЗаполнено(ТекущиеДанные.ТС) Тогда
		СписокВладельцев.Добавить(ТекущиеДанные.ТС);
	КонецЕсли;
	ТСВладелец = уатОбщегоНазначения.ПолучитьВладельцаТС(ТекущиеДанные.ТС);
	Если ТСВладелец <> Неопределено Тогда
		СписокВладельцев.Добавить(ТСВладелец);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Водитель) Тогда
		СписокВладельцев.Добавить(ТекущиеДанные.Водитель);
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура();
	Если СписокВладельцев.Количество() <> 0 Тогда
		СтруктураОтбора.Вставить("КомуВыдана", СписокВладельцев);
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекущиеДанные.АЗС) Тогда
		СтруктураОтбора.Вставить("КемВыдана", ТекущиеДанные.АЗС);
	КонецЕсли;
	
	ПарамВыбора = Новый Структура("Отбор", СтруктураОтбора);

	ОткрытьФорму("Справочник.уатПластиковыеКарты.ФормаВыбора", ПарамВыбора, Элемент,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМКоличествоПриИзменении(Элемент)
	ТекСтрока = Элементы.ЗаправкиГСМ.ТекущиеДанные;
	ТекСтрока.Сумма = ТекСтрока.Цена * ТекСтрока.Количество;
	РассчитатьСуммуНДС(ТекСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМЦенаПриИзменении(Элемент)
	ТекСтрока = Элементы.ЗаправкиГСМ.ТекущиеДанные;
	ТекСтрока.Сумма = ТекСтрока.Цена * ТекСтрока.Количество;
	РассчитатьСуммуНДС(ТекСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМСуммаПриИзменении(Элемент)
	ТекСтрока = Элементы.ЗаправкиГСМ.ТекущиеДанные;
	ТекСтрока.Цена = ?(ТекСтрока.Количество = 0, 0, ТекСтрока.Сумма / ТекСтрока.Количество);
	РассчитатьСуммуНДС(ТекСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМСтавкаНДСПриИзменении(Элемент)
	ТекСтрока = Элементы.ЗаправкиГСМ.ТекущиеДанные;
	РассчитатьСуммуНДС(ТекСтрока);
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыСливыГСМ

&НаСервере
Процедура НачалоИзмененияСливаГСМсервер(ТекДок)
	Док = ТекДок.ПолучитьОбъект();
	//Док.ПризнакРедактированияИзПутевогоЛиста = Истина;
	//Док.ПризнакРедактированияИзПутевогоЛистаСсылка = Объект.Ссылка;
	ЗначениеВРеквизитФормы(Док, "мДокументСливГСМ");
КонецПроцедуры

&НаСервере
Процедура ДобавитьСливГСМсервер(флКопирование = Ложь, мТекущаяСтрокаСтруктура = Неопределено)
	Если флКопирование = Истина Тогда
		ДокОбъект = мТекущаяСтрокаСтруктура.Ссылка.Скопировать();
		ДокОбъект.Дата = мТекущаяСтрокаСтруктура.Дата;
	Иначе
		ДокОбъект = Документы.уатСливГСМ.СоздатьДокумент();
		ДокОбъект.Заполнить(Объект.Ссылка);
		ДокОбъект.ПутевойЛистПриемник = мТекущаяСтрокаСтруктура.ПутевойЛистПриемник;
	КонецЕсли;
	
	ДокОбъект.Записать();
	
	ЗначениеВРеквизитФормы(ДокОбъект, "мДокументСливГСМ");
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСливГСМВДиалоге(флКопирование = Ложь)
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ДобавлениеСливаИзПЛ", Истина);
	ПараметрыОткрытия.Вставить("ПутевойЛист", Объект.Ссылка);
	Если флКопирование = Истина Тогда
		ТекСтрока = Элементы.СливыГСМ.ТекущиеДанные;
		Если ТекСтрока <> Неопределено Тогда
			мТекущаяСтрокаСтруктура = СтруктураСтрокиСливаГСМ();
			ЗаполнитьЗначенияСвойств(мТекущаяСтрокаСтруктура, ТекСтрока);
			ПараметрыОткрытия.Вставить("СливКопирование", мТекущаяСтрокаСтруктура);
		КонецЕсли;
	КонецЕсли;
	ОткрытьФорму("Документ.уатСливГСМ.ФормаОбъекта", ПараметрыОткрытия, ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСливГСМВДиалоге()
	ТекСтрока = Элементы.СливыГСМ.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Ключ", ТекСтрока.Ссылка);
	ПараметрыОткрытия.Вставить("РедактированиеСливаИзПЛ", Истина);
	ПараметрыОткрытия.Вставить("ПутевойЛист", Объект.Ссылка);
	
	ОткрытьФорму("Документ.уатСливГСМ.ФормаОбъекта", ПараметрыОткрытия,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Функция ИзменитьСливГСМВСписке()
	мТекущаяСтрока = Элементы.СливыГСМ.ТекущиеДанные;
	
	мТекущаяСтрокаСтруктура = СтруктураСтрокиСливаГСМ();
	ЗаполнитьЗначенияСвойств(мТекущаяСтрокаСтруктура, мТекущаяСтрока);
	
	СообщениеПревышениеУровняТопливаВБаке = "";
	
	Рез = ИзменитьСливГСМВСпискеСервер(мТекущаяСтрокаСтруктура, СообщениеПревышениеУровняТопливаВБаке);
	
	Если НЕ ПустаяСтрока(СообщениеПревышениеУровняТопливаВБаке) Тогда
		ПоказатьПредупреждение(Неопределено, СообщениеПревышениеУровняТопливаВБаке);
		//уатОбщегоНазначенияТиповые.СообщитьОбОшибке(СообщениеПревышениеУровняТопливаВБаке);
	КонецЕсли;
		
	Возврат Рез;
КонецФункции

&НаСервереБезКонтекста
Функция СтруктураСтрокиСливаГСМ()
	Рез = Новый Структура;
	Рез.Вставить("ТС");
	Рез.Вставить("ГСМ");
	Рез.Вставить("АЗС");
	Рез.Вставить("Количество");
	Рез.Вставить("Дата");
	Рез.Вставить("ВидОперации");
	Рез.Вставить("Ссылка");
	Рез.Вставить("Проведен");
	Рез.Вставить("ПометкаУдаления");
	Рез.Вставить("Картинка");
	Рез.Вставить("ПутевойЛист");
	Рез.Вставить("ПутевойЛистПриемник");
	
	Возврат Рез;
КонецФункции

&НаСервере
Функция ИзменитьСливГСМВСпискеСервер(мТекущаяСтрокаСтруктура, СообщениеПревышениеУровняТопливаВБаке)
	Рез = Истина;
	
	Док = РеквизитФормыВЗначение("мДокументСливГСМ");
	Док.АЗС = мТекущаяСтрокаСтруктура.АЗС;
	Док.ВидОперации = мТекущаяСтрокаСтруктура.ВидОперации;
	Док.Дата = мТекущаяСтрокаСтруктура.Дата;
	Док.ТС = мТекущаяСтрокаСтруктура.ТС;
	Док.ГСМ = мТекущаяСтрокаСтруктура.ГСМ;
	Док.Количество = мТекущаяСтрокаСтруктура.Количество;
	Док.ПутевойЛистПриемник = мТекущаяСтрокаСтруктура.ПутевойЛистПриемник;
	
	Попытка
		Док.Записать(РежимЗаписиДокумента.Проведение);
		ЗначениеВРеквизитФормы(Док, "мДокументСливГСМ");
    Исключение
		Рез = Ложь;
	КонецПопытки;
	
	Если Рез Тогда
		ПересчетВыданногоГСМСервер();
		ПересчетСданногоГСМСервер();
		УстановитьПривилегированныйРежим(Истина);
		Попытка
			Записать(Новый Структура("ЗаписьЗаправкиГСМ"));
		Исключение
		КонецПопытки;
		
		Если Док.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийСливГСМ.НаТС") Тогда
			тблСлив = Новый ТаблицаЗначений;
			тблСлив.Колонки.Добавить("Дата");
			тблСлив.Колонки.Добавить("ТС");
			тблСлив.Колонки.Добавить("ГСМ");
			тблСлив.Колонки.Добавить("ПутевойЛист");
			тблСлив.Колонки.Добавить("Количество");
			
			НоваяСтрока             = тблСлив.Добавить();
			НоваяСтрока.Дата        = Док.Дата;
			НоваяСтрока.ТС          = Док.АЗС;
			НоваяСтрока.ГСМ         = Док.ГСМ;
			НоваяСтрока.ПутевойЛист = Док.ПутевойЛистПриемник;
			НоваяСтрока.Количество  = Док.Количество;
			
			уатГСМ.ПроверитьПревышениеУровняТопливаВБаке(тблСлив, Док.Организация, Док.АЗС, СообщениеПревышениеУровняТопливаВБаке);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Рез;
КонецФункции

&НаКлиенте
Процедура ДобавитьСливГСМВСписке()
	
	НоваяСтрока = СливыГСМ.Добавить();
	НоваяСтрока.Ссылка              = мДокументСливГСМ.Ссылка;
	НоваяСтрока.Номер               = мДокументСливГСМ.Номер;
	НоваяСтрока.Дата                = мДокументСливГСМ.Дата;
	НоваяСтрока.АЗС                 = мДокументСливГСМ.АЗС;
	НоваяСтрока.ВидОперации         = мДокументСливГСМ.ВидОперации;
	НоваяСтрока.ТС                  = мДокументСливГСМ.ТС;
	НоваяСтрока.ГСМ                 = мДокументСливГСМ.ГСМ;
	НоваяСтрока.ПутевойЛист         = мДокументСливГСМ.ПутевойЛист;
	НоваяСтрока.ПутевойЛистПриемник = мДокументСливГСМ.ПутевойЛистПриемник;
	
	Если (Не ЗначениеЗаполнено(НоваяСтрока.ГСМ)) И ЗначениеЗаполнено(НоваяСтрока.ТС) Тогда
		НоваяСтрока.ГСМ = ПолучитьЗначениеРеквизита(ПолучитьЗначениеРеквизита(НоваяСтрока.ТС, "Модель"), "ОсновноеТопливо");
	КонецЕсли;
	
	НоваяСтрока.Количество      = мДокументСливГСМ.Количество;
	НоваяСтрока.Проведен        = мДокументСливГСМ.Проведен;
	НоваяСтрока.ПометкаУдаления = мДокументСливГСМ.ПометкаУдаления;
	НоваяСтрока.Картинка        = ?(НоваяСтрока.Проведен, 1, ?(НоваяСтрока.ПометкаУдаления, 2, 0));
	
	Элементы.СливыГСМ.ТекущаяСтрока = СливыГСМ[СливыГСМ.Количество() - 1].ПолучитьИдентификатор();
	ТекущийЭлемент = Элементы.СливыГСМКоличество;
	Элементы.СливыГСМКоличество.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
	
	ОбновитьКартинкиСливыГСМ();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьСливСервер(ТекДок)
	ДокСлив = ТекДок.ПолучитьОбъект();
	ДокСлив.ПутевойЛист = Неопределено;
	ДокСлив.Записать();
	ДокСлив.УстановитьПометкуУдаления(Истина);
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьСливГСМВДиалоге(Команда)
	Элементы.РедактироватьСливГСМВДиалоге.Пометка = НЕ Элементы.РедактироватьСливГСМВДиалоге.Пометка;
	РедактироватьСливГСМВДиалоге = Элементы.РедактироватьСливГСМВДиалоге.Пометка;
	Элементы.СливыГСМНомер.ТолькоПросмотр = НЕ РедактироватьСливГСМВДиалоге;
	СохранитьНастройкиСервер();
КонецПроцедуры

&НаКлиенте
Процедура СливыГСМПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	
	Если Объект.Рассчитан Тогда
		Объект.Рассчитан = Ложь;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		ТекстНСТР = НСтр("en='To perform this operation it is necessary to record the document. Continue?';ru='Для выполнения данной операции необходимо записать документ. Продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("СливыГСМПередНачаломДобавленияЗавершение", ЭтотОбъект,
			Новый Структура("Копирование", Копирование)), ТекстНСТР, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
	КонецЕсли;
	
	СливыГСМПередНачаломДобавленияФрагмент(Копирование);
КонецПроцедуры

&НаКлиенте
Процедура СливыГСМПередНачаломДобавленияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Копирование = ДополнительныеПараметры.Копирование;
    
    
    Ответ = РезультатВопроса;
    Если Ответ <> КодВозвратаДиалога.ОК Тогда
        Возврат;
    КонецЕсли;
    
    Если НЕ ПроверитьЗаполнениеДокумента() Тогда
        Возврат;
    КонецЕсли;
    
    Попытка
        флЗаписан = Записать(Новый Структура("ЗаписьЗаправкиГСМ"));
    Исключение
        Возврат;
    КонецПопытки;
	
	Если НЕ флЗаписан Тогда
		Возврат;
	КонецЕсли;
	
    СливыГСМПередНачаломДобавленияФрагмент(Копирование);

КонецПроцедуры

&НаКлиенте
Процедура СливыГСМПередНачаломДобавленияФрагмент(Знач Копирование)
    
    Перем мТекущаяСтрокаСтруктура;
    
    Если РедактироватьСливГСМВДиалоге Тогда
        ДобавитьСливГСМВДиалоге(Копирование);
    Иначе
        мТекущаяСтрокаСтруктура = СтруктураСтрокиСливаГСМ();
        Если Копирование Тогда
            ЗаполнитьЗначенияСвойств(мТекущаяСтрокаСтруктура, Элементы.СливыГСМ.ТекущиеДанные);
        КонецЕсли;
        ДобавитьСливГСМсервер(Копирование, мТекущаяСтрокаСтруктура);
        ДобавитьСливГСМВСписке();
    КонецЕсли;
    
    ОбновитьКартинкиСливыГСМ();
    
    ОбновитьНадписьРассчитан();

КонецПроцедуры

&НаКлиенте
Процедура СливыГСМПередНачаломИзменения(Элемент, Отказ)
	
	ТекущиеДанные = Элементы.СливыГСМ.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если (ЗначениеЗаполнено(ТекущиеДанные.ТС) И Не ТекущиеДанные.ТС = Объект.ТранспортноеСредство)
			Или ПолучитьЗначениеРеквизита(ТекущиеДанные.ПутевойЛистПриемник, "Рассчитан") Тогда 
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если РедактироватьСливГСМВДиалоге Тогда
		ИзменитьСливГСМВДиалоге();
		Отказ = Истина;
	Иначе
		ТекДок = Элементы.СливыГСМ.ТекущиеДанные.Ссылка;
		НачалоИзмененияСливаГСМсервер(ТекДок);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СливыГСМПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	
	Если СливыГСМ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекСтрока = Элементы.СливыГСМ.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если (ЗначениеЗаполнено(ТекСтрока.ТС) И Не ТекСтрока.ТС = Объект.ТранспортноеСредство)
			Или ПолучитьЗначениеРеквизита(ТекСтрока.ПутевойЛистПриемник, "Рассчитан") Тогда 
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ТекстНСТР = НСтр("en='Remove fuel drain?';ru='Удалить слив ГСМ?'");
	ПоказатьВопрос(Новый ОписаниеОповещения("СливыГСМПередУдалениемЗавершение", ЭтотОбъект,
		Новый Структура("ТекСтрока", ТекСтрока)), ТекстНСТР, РежимДиалогаВопрос.ОКОтмена);
КонецПроцедуры

&НаКлиенте
Процедура СливыГСМПередУдалениемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ТекСтрока = ДополнительныеПараметры.ТекСтрока;
    
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		СливГСМСсылка = ТекСтрока.Ссылка;
		СливыГСМ.Удалить(ТекСтрока);
		СливыГСМПередУдалениемЗавершениеСервер(СливГСМСсылка);
    КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СливыГСМПередУдалениемЗавершениеСервер(СливГСМСсылка)
	УдалитьСливСервер(СливГСМСсылка);
	ПересчетСданногоГСМСервер();
	УстановитьПривилегированныйРежим(Истина);
	Попытка
		Записать(Новый Структура("ЗаписьЗаправкиГСМ"));
	Исключение
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура СливыГСМПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если ОтменаРедактирования Тогда
		ВывестиТаблицуСливов();
		Возврат;
	КонецЕсли; 
	
	ТекСтрока = Элементы.СливыГСМ.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(ТекСтрока.ТС) Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, НСтр("en='It is necessary to select the vehicle!';ru='Необходимо выбрать ТС!'"), 30);
		Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(ТекСтрока.ГСМ) Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, НСтр("en='It is necessary to select fuels!';ru='Необходимо выбрать ГСМ!'"), 30);
		Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(ТекСтрока.АЗС) Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(Новый ОписаниеОповещения("СливыГСМПередОкончаниемРедактированияЗавершение", ЭтотОбъект),
			НСтр("en='You should select gas station!';ru='Необходимо выбрать АЗС!'"), 30);
		Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(ТекСтрока.ВидОперации) Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, НСтр("en='It is necessary to choose drain type!';ru='Необходимо выбрать вид слива!'"), 30);
		Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(ТекСтрока.Количество) Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, НСтр("en='You must specify a number!';ru='Необходимо указать количество!'"), 30);
		Возврат;
	КонецЕсли;
	
	Если Не РедактироватьСливГСМВДиалоге И Не Отказ Тогда
		Попытка
			Рез = ИзменитьСливГСМВСписке();
		Исключение
			Рез = Ложь;
		КонецПопытки;
		Если НЕ Рез Тогда
			Отказ = Истина;
		КонецЕсли;
		ВывестиТаблицуСливов();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СливыГСМПередОкончаниемРедактированияЗавершение(ДополнительныеПараметры) Экспорт
	Заглушка = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СливыГСМПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.СливыГСМКоличество.РежимРедактирования = РежимРедактированияКолонки.Вход;
	ОбновитьКартинкиСливыГСМ();
КонецПроцедуры

&НаКлиенте
Процедура СливыГСМВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элементы.СливыГСМ.ТолькоПросмотр Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(Неопределено, Элемент.ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СливыГСМВидСливаГСМПриИзменении(Элемент)
	ТекСтрока = Элементы.СливыГСМ.ТекущиеДанные;
	Если ТекСтрока.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийСливГСМ.НаТС") Тогда
		ТекСтрока.АЗС = ПредопределенноеЗначение("Справочник.уатТС.ПустаяСсылка");
	Иначе
		ТекСтрока.АЗС = ПредопределенноеЗначение("Справочник.уатАЗС.ПустаяСсылка");
		ТекСтрока.ПутевойЛистПриемник = Неопределено;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СливыГСМГСМНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДополнительныеПараметры = Новый Структура("ЗначениеГСМДоИзменения", Элементы.СливыГСМ.ТекущиеДанные.ГСМ);
	ОписаниеОповещенияЗакр  = Новый ОписаниеОповещения("ОписаниеОповещенияВыбораГСМ", ЭтотОбъект, ДополнительныеПараметры);

	уатЗащищенныеФункцииКлиент.СписокГСМдляТС(Объект.Организация, Элементы.СливыГСМ.ТекущиеДанные.ТС,
		ПредопределенноеЗначение("Перечисление.уатГруппыГСМ.Топливо"),,,ОписаниеОповещенияЗакр);
КонецПроцедуры

// Подключаемый динамически обработчик оповещения
&НаКлиенте
Процедура ОписаниеОповещенияВыбораГСМ(Результат, ДопПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		Элементы.СливыГСМ.ТекущиеДанные.ГСМ = Результат;
		Если ДопПараметры.ЗначениеГСМДоИзменения <> Результат Тогда 
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СливыГСМГСМАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ТекСтрока = Элементы.СливыГСМ.ТекущиеДанные;
	
	СтандартнаяОбработка = Ложь;
	мсвГруппДляОтбора = Новый Массив;
	мсвГруппДляОтбора.Добавить(ПредопределенноеЗначение("Перечисление.уатГруппыГСМ.Топливо"));
	ДопПараметры = Новый Структура("ТС, Организация", ТекСтрока.ТС, Объект.Организация);
	ДанныеВыбора = уатГСМ.ПолучитьСписокАвтоподбораПоляГСМ(Текст, мсвГруппДляОтбора, ДопПараметры);
КонецПроцедуры

&НаКлиенте
Процедура СливыГСМГСМОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ПараметрыПолученияДанных.СтрокаПоиска = "";
КонецПроцедуры

&НаКлиенте
Процедура СливыГСМАЗСПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СливыГСМ.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ТекущиеДанные.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийСливГСМ.НаТС") Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ПутевойЛистПриемник) И ТСПрисутствуетВПутевомЛисте(ТекущиеДанные.АЗС, ТекущиеДанные.ПутевойЛистПриемник) Тогда 
		Возврат;
	КонецЕсли;
	
	СписокЗаправок = ПолучитьПутевыеЛистыПоТС(ТекущиеДанные.АЗС, ТекущиеДанные.Дата);
	Если СписокЗаправок.Количество() Тогда 
		ТекущиеДанные.ПутевойЛистПриемник = СписокЗаправок[0].Значение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СливыГСМАЗСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ТекСтрока = Элементы.СливыГСМ.ТекущиеДанные;
	
	Если ТекСтрока.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийСливГСМ.НаТС") Тогда
		ОткрытьФорму("Справочник.уатТС.ФормаВыбора", , Элемент);
	Иначе
		СливНаСклад = (ТекСтрока.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийСливГСМ.НаСклад"));
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("Отбор", Новый Структура("ЭтоАЗССклад", СливНаСклад));
		ПараметрыОткрытия.Вставить("ТекущаяСтрока", ТекСтрока.АЗС);
		ОткрытьФорму("Справочник.уатАЗС.ФормаВыбора", ПараметрыОткрытия, Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СливыГСМАЗСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.СливыГСМ.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ТекущиеДанные.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийСливГСМ.НаТС") Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ПутевойЛистПриемник) И ТСПрисутствуетВПутевомЛисте(ВыбранноеЗначение, ТекущиеДанные.ПутевойЛистПриемник) Тогда 
		Возврат;
	КонецЕсли;
	
	СписокЗаправок = ПолучитьПутевыеЛистыПоТС(ВыбранноеЗначение, ТекущиеДанные.Дата);
	Если СписокЗаправок.Количество() Тогда 
		ТекущиеДанные.ПутевойЛистПриемник = СписокЗаправок[0].Значение;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СливыГСМПутевойЛистПриемникПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СливыГСМ.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ТекущиеДанные.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийСливГСМ.НаТС") Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.АЗС) И ТСПрисутствуетВПутевомЛисте(ТекущиеДанные.АЗС, ТекущиеДанные.ПутевойЛистПриемник) Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.АЗС = ПолучитьЗначениеРеквизита(ТекущиеДанные.ПутевойЛистПриемник, "ТранспортноеСредство");
	
КонецПроцедуры

&НаКлиенте
Процедура СливыГСМПутевойЛистПриемникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.СливыГСМ.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ТекущиеДанные.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийСливГСМ.НаТС") Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Отбор", Новый Структура("Ссылка", ПолучитьПутевыеЛистыПоТС(ТекущиеДанные.АЗС, ТекущиеДанные.Дата)));
	ОткрытьФорму("Документ.уатПутевойЛист.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура СливыГСМПутевойЛистПриемникОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.СливыГСМ.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ТекущиеДанные.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийСливГСМ.НаТС") Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.АЗС) И ТСПрисутствуетВПутевомЛисте(ТекущиеДанные.АЗС, ВыбранноеЗначение) Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.АЗС = ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "ТранспортноеСредство");
	
КонецПроцедуры

&НаКлиенте
Процедура СливыГСМПутевойЛистПриемникАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.СливыГСМ.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	СписокПЛПодбор = ПолучитьПутевыеЛистыПоТС(ТекущиеДанные.АЗС, ТекущиеДанные.Дата, Текст);
	Если СписокПЛПодбор.Количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = СписокПЛПодбор;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СливыГСМПутевойЛистПриемникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.СливыГСМ.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеВыбора = ПолучитьПутевыеЛистыПоТС(ТекущиеДанные.АЗС, ТекущиеДанные.Дата, Текст);
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыВыработкаТС

&НаКлиенте
Процедура ВыработкаТСПриИзменении(Элемент)
	ВывестиТаблицуВыработкаТС();
	ОбновитьПараметрВыработкиТСВременный();
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаТСПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекСтрока = Элементы.ВыработкаТС.ТекущиеДанные;
	Если ПолучитьЗначениеРеквизита(ТекСтрока.ПараметрВыработки, "Временный") = Истина Тогда
		ТекСтрока.КоличествоФормат = ВремяВЧЧ_ММ(ТекСтрока.Количество);
		Элементы.ВыработкаТСКоличествоФормат.ФорматРедактирования = "ЧДЦ=2; ЧРД=:";
	ИначеЕсли ТекСтрока.ПараметрВыработки = ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.ПробегСГрузом")
		ИЛИ ТекСтрока.ПараметрВыработки = ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.ПробегПорожний") Тогда 
		Элементы.ВыработкаТСКоличествоФормат.ФорматРедактирования = "ЧДЦ=3";
	Иначе
		ТекСтрока.КоличествоФормат = ТекСтрока.Количество;
		Элементы.ВыработкаТСКоличествоФормат.ФорматРедактирования = "ЧДЦ=2; ЧРД=" + Сред(Строка(1.5), 2, 1) + "";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаТСТСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтруктураОтбор = Новый Структура("Организация", Объект.Организация);
	уатИнтерфейсВводаТС.РеквизитТСНачалоВыбора(Элемент, Элементы.ВыработкаТС.ТекущиеДанные.ТС, ДанныеВыбора, СтандартнаяОбработка, СтруктураОтбор);
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаТСТСАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СтруктураОтбор = Новый Структура("Организация", Объект.Организация);
	уатИнтерфейсВводаТС.РеквизитТСАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка, СтруктураОтбор);
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаТСТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтруктураОтбор = Новый Структура("Организация", Объект.Организация);
	уатИнтерфейсВводаТС.РеквизитТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка, СтруктураОтбор);
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаТСсводнаяПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекЭлем = Элементы.ВыработкаТСсводная.ТекущийЭлемент;
	Если ТекЭлем.Имя = "ВыработкаТСсводнаяПараметрВыработки" Тогда
		Возврат;
	КонецЕсли;
	
	ТекСтрока = Элементы.ВыработкаТСсводная.ТекущиеДанные;
	
	Если ТекСтрока.ПараметрВыработкиВременный Тогда
		//ТекСтрока[ТекИмяКолонкиДанных] = ВремяВЧЧ_ММ(ТекСтрока[ТекИмяКолонкиДанных]);
		ТекЭлем.ФорматРедактирования = "ЧДЦ=2; ЧРД=:";
	ИначеЕсли ТекСтрока.ПараметрВыработки = ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.ПробегСГрузом")
		ИЛИ ТекСтрока.ПараметрВыработки = ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.ПробегПорожний") Тогда 
		ТекЭлем.ФорматРедактирования = "ЧДЦ=3";
	Иначе
		//ТекСтрока[ТекИмяКолонкиДанных] = ВремяВЧЧ_ММ(ТекСтрока[ТекИмяКолонкиДанных]);
		ТекЭлем.ФорматРедактирования = "ЧДЦ=2; ЧРД=" + Сред(Строка(1.5), 2, 1) + "";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаТСКоличествоФорматПриИзменении(Элемент)
	ТекСтрока = Элементы.ВыработкаТС.ТекущиеДанные;
	Если ПолучитьЗначениеРеквизита(ТекСтрока.ПараметрВыработки, "Временный") = Истина Тогда
		уатЗащищенныеФункцииСервер.КонтрольВводаВремени(ТекСтрока.КоличествоФормат);
		ТекСтрока.Количество = уатОбщегоНазначения.уатВремяВСекунды(ТекСтрока.КоличествоФормат);
	Иначе
		ТекСтрока.Количество = ТекСтрока.КоличествоФормат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КоличествоВыработкиТСПриИзменении(Элемент)
	ТекСтрока = Элементы.ВыработкаТСсводная.ТекущиеДанные;
	
	Разделитель = Найти(Элемент.Имя, "_");
	Если Разделитель = 0 Тогда
		Возврат;
	КонецЕсли;
	ТекИмяКолонкиДанных = Сред(Элемент.Имя, Разделитель+1);
		
	мТС = мСоответствиеВыработкаТС[ТекИмяКолонкиДанных];
	мТекПарамВыработки = ТекСтрока.ПараметрВыработки;
	мТекПарамВыработкиВременный = ПолучитьЗначениеРеквизита(мТекПарамВыработки, "Временный");
	
	Если мТекПарамВыработкиВременный = Истина Тогда
		уатЗащищенныеФункцииСервер.КонтрольВводаВремени(ТекСтрока[ТекИмяКолонкиДанных]);
	КонецЕсли;
		
	мТекКоличество = ?(мТекПарамВыработкиВременный = Истина,
		уатОбщегоНазначения.уатВремяВСекунды(ТекСтрока[ТекИмяКолонкиДанных]), ТекСтрока[ТекИмяКолонкиДанных]);
	ЗаписатьСтрокуВыработкиТСсервер(мТС, мТекПарамВыработки, мТекКоличество);
	ОбновитьПараметрВыработкиТСВременный();
	
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Процедура ЗаписатьСтрокуВыработкиТСсервер(мТС, мТекПарамВыработки, мТекКоличество)
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	ДокОбъект.ЗаписатьСтрокуВыработкиТС(мТС, мТекПарамВыработки, мТекКоличество,,,Истина);
	ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
	ОбновитьДинамическиеКолонкиТЧСервер();
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыВыработкаСотрудников

&НаКлиенте
Процедура ВыработкаСотрудниковПриИзменении(Элемент)
	ВывестиТаблицуВыработкаСотрудников();
	ОбновитьПараметрВыработкиСотрудниковВременный();
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаСотрудниковПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекСтрока = Элементы.ВыработкаСотрудников.ТекущиеДанные;
	Если ПолучитьЗначениеРеквизита(ТекСтрока.ПараметрВыработки, "Временный") Тогда
		ТекСтрока.КоличествоФормат = ВремяВЧЧ_ММ(ТекСтрока.Количество);
		Элементы.ВыработкаСотрудниковКоличествоФормат.ФорматРедактирования = "ЧДЦ=2; ЧРД=:";
	ИначеЕсли ТекСтрока.ПараметрВыработки = ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.ПробегСГрузом")
		ИЛИ ТекСтрока.ПараметрВыработки = ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.ПробегПорожний") Тогда 
		Элементы.ВыработкаСотрудниковКоличествоФормат.ФорматРедактирования = "ЧДЦ=3";
	Иначе
		ТекСтрока.КоличествоФормат = ТекСтрока.Количество;
		Элементы.ВыработкаСотрудниковКоличествоФормат.ФорматРедактирования = "ЧДЦ=2; ЧРД=" + Сред(Строка(1.5), 2, 1) + "";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаСотрудниковСводнаяПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекЭлем = Элементы.ВыработкаСотрудниковСводная.ТекущийЭлемент;
	Если ТекЭлем.Имя = "ВыработкаСотрудниковсводнаяПараметрВыработки" Тогда
		Возврат;
	КонецЕсли;
	
	ТекСтрока = Элементы.ВыработкаСотрудниковСводная.ТекущиеДанные;
	
	Если ТекСтрока.ПараметрВыработкиВременный Тогда
		//ТекСтрока[ТекИмяКолонкиДанных] = ВремяВЧЧ_ММ(ТекСтрока[ТекИмяКолонкиДанных]);
		ТекЭлем.ФорматРедактирования = "ЧДЦ=2; ЧРД=:";
	ИначеЕсли ТекСтрока.ПараметрВыработки = ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.ПробегСГрузом")
		ИЛИ ТекСтрока.ПараметрВыработки = ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.ПробегПорожний") Тогда 
		ТекЭлем.ФорматРедактирования = "ЧДЦ=3";
	Иначе
		//ТекСтрока[ТекИмяКолонкиДанных] = ВремяВЧЧ_ММ(ТекСтрока[ТекИмяКолонкиДанных]);
		ТекЭлем.ФорматРедактирования = "ЧДЦ=2; ЧРД=" + Сред(Строка(1.5), 2, 1) + "";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаСотрудниковКоличествоФорматПриИзменении(Элемент)
	ТекСтрока = Элементы.ВыработкаСотрудников.ТекущиеДанные;
	Если ПолучитьЗначениеРеквизита(ТекСтрока.ПараметрВыработки, "Временный") = Истина Тогда
		уатЗащищенныеФункцииСервер.КонтрольВводаВремени(ТекСтрока.КоличествоФормат);
		ТекСтрока.Количество = уатОбщегоНазначения.уатВремяВСекунды(ТекСтрока.КоличествоФормат);
	Иначе
		ТекСтрока.Количество = ТекСтрока.КоличествоФормат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КоличествоВыработкиСотрудниковПриИзменении(Элемент)
	ТекСтрока = Элементы.ВыработкаСотрудниковСводная.ТекущиеДанные;
	
	Разделитель = Найти(Элемент.Имя, "_");
	Если Разделитель = 0 Тогда
		Возврат;
	КонецЕсли;
	ТекИмяКолонкиДанных = Сред(Элемент.Имя, Разделитель+1);
		
	мСотрудник = мСоответствиеВыработкаСотрудников[ТекИмяКолонкиДанных];
	мТекПарамВыработки = ТекСтрока.ПараметрВыработки;
	мТекПарамВыработкиВременный = ПолучитьЗначениеРеквизита(мТекПарамВыработки, "Временный");
	
	Если мТекПарамВыработкиВременный = Истина Тогда
		уатЗащищенныеФункцииСервер.КонтрольВводаВремени(ТекСтрока[ТекИмяКолонкиДанных]);
	КонецЕсли;
		
	мТекКоличество = ?(мТекПарамВыработкиВременный = Истина,
		уатОбщегоНазначения.уатВремяВСекунды(ТекСтрока[ТекИмяКолонкиДанных]), ТекСтрока[ТекИмяКолонкиДанных]);
	ЗаписатьСтрокуВыработкиСотрудникаСервер(мСотрудник, мТекПарамВыработки, мТекКоличество);
	ОбновитьПараметрВыработкиСотрудниковВременный();
	
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Процедура ЗаписатьСтрокуВыработкиСотрудникаСервер(мСотрудник, мТекПарамВыработки, мТекКоличество)
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	ДокОбъект.ЗаписатьСтрокуВыработкиСотрудника(мСотрудник, мТекПарамВыработки, мТекКоличество,,,Истина);
	ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
	ОбновитьДинамическиеКолонкиТЧСервер();
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаСотрудниковСотрудникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ДиалогВыбораСотрудника(Элемент, Элементы.ВыработкаСотрудников.ТекущиеДанные.Сотрудник, Новый Структура("Организация", Объект.Организация), СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаСотрудниковСотрудникОткрытие(Элемент, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ОткрытьФормуСотрудника(Элементы.ВыработкаСотрудников.ТекущиеДанные.Сотрудник, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаСотрудниковСотрудникАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаСотрудниковСотрудникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыЗарплата

&НаКлиенте
Процедура ЗарплатаСводнаяПриАктивизацииСтроки(Элемент)
	ТекСтрока = Элементы.ЗарплатаСводная.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Элементы.Зарплата.ОтборСтрок = Новый ФиксированнаяСтруктура(Новый Структура("Сотрудник", ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка")));
	Иначе
		Элементы.Зарплата.ОтборСтрок = Новый ФиксированнаяСтруктура(Новый Структура("Сотрудник", ТекСтрока.Сотрудник));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаСводнаяВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ОткрытьФормуСотрудника(Элементы.ЗарплатаСводная.ТекущиеДанные.Сотрудник, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаСводнаяНачислятьЗарплатуПриИзменении(Элемент)
	ТекСтрокаЗП = Элементы.ЗарплатаСводная.ТекущиеДанные;
	
	// соотв. флаг расчета для сотрудника в шапке документа
	Если ТекСтрокаЗП.Сотрудник = Объект.Водитель1 Тогда
		Объект.НачислятьЗПВодителю1 = ТекСтрокаЗП.НачислятьЗарплату;
	ИначеЕсли ТекСтрокаЗП.Сотрудник = Объект.Водитель2 Тогда
		Объект.НачислятьЗПВодителю2 = ТекСтрокаЗП.НачислятьЗарплату;
	ИначеЕсли ТекСтрокаЗП.Сотрудник = Объект.Сотрудник1 Тогда
		Объект.НачислятьЗПСотруднику1 = ТекСтрокаЗП.НачислятьЗарплату;
	ИначеЕсли ТекСтрокаЗП.Сотрудник = Объект.Сотрудник2 Тогда
		Объект.НачислятьЗПСотруднику2 = ТекСтрокаЗП.НачислятьЗарплату;
	КонецЕсли;
	
	Если ТекСтрокаЗП.НачислятьЗарплату Тогда //перерасчет з/п по сотруднику
		Отказ_ = Ложь;
		РасчетЗПсервер(Отказ_, ТекСтрокаЗП.Сотрудник);
		ВывестиТаблицуЗП(ЭтотОбъект, ТекСтрокаЗП.Сотрудник);
		
	Иначе //удаляем предыдущие начисления по сотруднику, т.к. это в любом случае нужно сделать
		мЗП = Объект.Зарплата.НайтиСтроки(Новый Структура("Сотрудник", ТекСтрокаЗП.Сотрудник));
		Сч = Объект.Зарплата.Количество()-1;
		Пока Сч >= 0 Цикл
			ТекСтрока = Объект.Зарплата[Сч];
			Если ТекСтрока.Сотрудник = ТекСтрокаЗП.Сотрудник Тогда
				Объект.Зарплата.Удалить(Сч);
			КонецЕсли;
			Сч = Сч - 1;
		КонецЦикла;
		ТекСтрокаЗП.Сумма = 0;
		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура РасчетЗПсервер(Отказ, ТекСотрудник)
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	ДокОбъект.РасчетЗП(Отказ, ТекСотрудник);
	ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
	ОбновитьДинамическиеКолонкиТЧСервер();
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаПередНачаломИзменения(Элемент, Отказ)
	Если НЕ Элементы.Зарплата.ТекущиеДанные.РучнойВвод Тогда
		ТекстНСТР = НСтр("en='To edit the accrual is possible only for manual input and calculation type of ""Fixed amount""!';ru='Редактировать начисления можно только для ручного ввода и вида начисления ""Фиксированной суммой""!'");
		уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, Отказ,, СтатусСообщения.Внимание);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаПередУдалением(Элемент, Отказ)
	Если НЕ Элементы.Зарплата.ТекущиеДанные.РучнойВвод Тогда
		ТекстНСТР = НСтр("en='To edit the accrual is possible only for manual input and calculation type of ""Fixed amount""!';ru='Редактировать начисления можно только для ручного ввода и вида начисления ""Фиксированной суммой""!'");
		уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, Отказ,, СтатусСообщения.Внимание);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаПослеУдаления(Элемент)
	ВывестиТаблицуЗП(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		ТекСтрока = Элементы.Зарплата.ТекущиеДанные;
		ТекСтрока.РучнойВвод = Истина;
		ТекСтрока.ВидНачисления = ПредопределенноеЗначение("ПланВидовРасчета.уатОсновныеНачисления.ФиксированнойСуммой");
		
		ТекСтрокаЗППоСотрудникам = Элементы.ЗарплатаСводная.ТекущиеДанные;
		Если ТекСтрокаЗППоСотрудникам <> Неопределено Тогда
			ТекСтрока.Сотрудник = ТекСтрокаЗППоСотрудникам.Сотрудник;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ТекСтрокаЗППоСотрудникам = Элементы.ЗарплатаСводная.ТекущиеДанные;
	мТекСотрудник = Неопределено;
	Если ТекСтрокаЗППоСотрудникам <> Неопределено Тогда
		мТекСотрудник = ТекСтрокаЗППоСотрудникам.Сотрудник;
	КонецЕсли;
	
	ВывестиТаблицуЗП(ЭтотОбъект, мТекСотрудник);
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыВыручка

// Процедура заполняет таблицу списком заправок
//
&НаКлиенте
Процедура ВывестиТаблицуВыручки()
	
	Выручка.Очистить();
	Для Каждого ТекСтрока Из ПолучитьТаблицуВыручкиСервер(Объект.Ссылка) Цикл
		НоваяСтрока = Выручка.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет таблицу списком заправок
//
&НаСервере
Процедура ВывестиТаблицуВыручкиСервер()
	
	Выручка.Очистить();
	Для Каждого ТекСтрока Из ПолучитьТаблицуВыручкиСервер(Объект.Ссылка) Цикл
		НоваяСтрока = Выручка.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТаблицуВыручкиСервер(Ссылка)
	Возврат уатЗащищенныеФункцииСервер_проф.ПолучитьВыручкуДляПЛ(Ссылка);
КонецФункции

&НаСервере
Процедура ОбновитьКартинкиВыручка()
	Для Каждого ТекСтрока Из Выручка Цикл
		Если ТекСтрока.Ссылка.Проведен Тогда
			ТекСтрока.Картинка = 1;
		ИначеЕсли ТекСтрока.Ссылка.ПометкаУдаления Тогда
			ТекСтрока.Картинка = 2;
		Иначе
			ТекСтрока.Картинка = 0;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура НачалоИзмененияВыручкиСервер(ТекДок)
	Док = ТекДок.ПолучитьОбъект();
	ЗначениеВРеквизитФормы(Док, "мДокументВыручка");
КонецПроцедуры

&НаСервере
Процедура ДобавитьВыручкуСервер(флКопирование = Ложь, мТекущаяСтрокаСтруктура = Неопределено)
	Если флКопирование = Истина Тогда
		ДокОбъект = мТекущаяСтрокаСтруктура.Ссылка.Скопировать();
		ДокОбъект.Дата = мТекущаяСтрокаСтруктура.Дата;
	Иначе
		ДокОбъект = Документы.уатВыручкаВодителей.СоздатьДокумент();
		ДокОбъект.Заполнить(Объект.Ссылка);
	КонецЕсли;
	
	ДокОбъект.Записать();
	
	ЗначениеВРеквизитФормы(ДокОбъект, "мДокументВыручка");
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВыручкуВДиалоге(флКопирование = Ложь)
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ДобавлениеВыручкиИзПЛ", Истина);
	ПараметрыОткрытия.Вставить("ПутевойЛист", Объект.Ссылка);
	Если флКопирование = Истина Тогда
		ТекСтрока = Элементы.Выручка.ТекущиеДанные;
		Если ТекСтрока <> Неопределено Тогда
			мТекущаяСтрокаСтруктура = СтруктураСтрокиВыручки();
			ЗаполнитьЗначенияСвойств(мТекущаяСтрокаСтруктура, ТекСтрока);
			ПараметрыОткрытия.Вставить("ВыручкаКопирование", мТекущаяСтрокаСтруктура);
			ПараметрыОткрытия.Вставить("ЗначениеКопирования", мТекущаяСтрокаСтруктура.Ссылка);
		КонецЕсли;
	КонецЕсли;
	ОткрытьФорму("Документ.уатВыручкаВодителей.ФормаОбъекта", ПараметрыОткрытия, ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВыручкуВДиалоге()
	ТекСтрока = Элементы.Выручка.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Ключ", ТекСтрока.Ссылка);
	ПараметрыОткрытия.Вставить("РедактированиеВыручкиИзПЛ", Истина);
	ПараметрыОткрытия.Вставить("ПутевойЛист", Объект.Ссылка);
	
	ОткрытьФорму("Документ.уатВыручкаВодителей.ФормаОбъекта", ПараметрыОткрытия,,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Функция ИзменитьВыручкуВСписке()
	мТекущаяСтрока = Элементы.Выручка.ТекущиеДанные;
	
	мТекущаяСтрокаСтруктура = СтруктураСтрокиВыручки();
	ЗаполнитьЗначенияСвойств(мТекущаяСтрокаСтруктура, мТекущаяСтрока);
	
	Рез = ИзменитьВыручкуВСпискеСервер(мТекущаяСтрокаСтруктура);
	
	Возврат Рез;
КонецФункции

&НаСервереБезКонтекста
Функция СтруктураСтрокиВыручки()
	Рез = Новый Структура;
	Рез.Вставить("Сотрудник");
	Рез.Вставить("ПутевойЛист");
	Рез.Вставить("Количество");
	Рез.Вставить("Сумма");
	Рез.Вставить("Дата");
	Рез.Вставить("ВидОперации");
	Рез.Вставить("Ссылка");
	Рез.Вставить("Проведен");
	Рез.Вставить("ПометкаУдаления");
	Рез.Вставить("Картинка");
	
	Возврат Рез;
КонецФункции

&НаСервере
Функция ИзменитьВыручкуВСпискеСервер(мТекущаяСтрокаСтруктура)
	Рез = Истина;
	
	Док = РеквизитФормыВЗначение("мДокументВыручка");
	Док.Сотрудник = мТекущаяСтрокаСтруктура.Сотрудник;
	Док.ПутевойЛист = Объект.Ссылка;
	Док.Дата = мТекущаяСтрокаСтруктура.Дата;
	Док.Количество = мТекущаяСтрокаСтруктура.Количество;
	Док.Сумма = мТекущаяСтрокаСтруктура.Сумма;
	
	Попытка
		Док.Записать(РежимЗаписиДокумента.Проведение);
		ЗначениеВРеквизитФормы(Док, "мДокументВыручка");
	Исключение
		Рез = Ложь;
	КонецПопытки;
	
	Возврат Рез;
КонецФункции

&НаКлиенте
Процедура ДобавитьВыручкуВСписке()
	НоваяСтрока = Выручка.Добавить();
	НоваяСтрока.Ссылка = мДокументВыручка.Ссылка;
	НоваяСтрока.Номер = мДокументВыручка.Номер;
	НоваяСтрока.Дата = мДокументВыручка.Дата;
	НоваяСтрока.Сотрудник = мДокументВыручка.Сотрудник;
	НоваяСтрока.Количество = мДокументВыручка.Количество;
	НоваяСтрока.Сумма = мДокументВыручка.Сумма;
	НоваяСтрока.Проведен = мДокументВыручка.Проведен;
	НоваяСтрока.ПометкаУдаления = мДокументВыручка.ПометкаУдаления;
	НоваяСтрока.Картинка = ?(НоваяСтрока.Проведен, 1, ?(НоваяСтрока.ПометкаУдаления, 2, 0));
	
	Элементы.Выручка.ТекущаяСтрока = Выручка[Выручка.Количество() - 1].ПолучитьИдентификатор();
	ТекущийЭлемент = Элементы.ВыручкаКоличество;
	Элементы.ВыручкаКоличество.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
	
	ОбновитьКартинкиВыручка();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьВыручкуСервер(ТекДок)
	ДокВыручка = ТекДок.ПолучитьОбъект();
	ДокВыручка.ПутевойЛист = Неопределено;
	ДокВыручка.Записать();
	ДокВыручка.УстановитьПометкуУдаления(Истина);
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьВыручкуВДиалоге(Команда)
	Элементы.РедактироватьВыручкуВДиалоге.Пометка = НЕ Элементы.РедактироватьВыручкуВДиалоге.Пометка;
	РедактироватьВыручкуВДиалоге = Элементы.РедактироватьВыручкуВДиалоге.Пометка;
	СохранитьНастройкиСервер();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСуществующуюВыручку(Команда)
	Если Объект.Рассчитан Тогда
		Объект.Рассчитан = Ложь;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		ТекстНСТР = НСтр("en='To perform this operation it is necessary to record the document. Continue?';ru='Для выполнения данной операции необходимо записать документ. Продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьСуществующуюВыручкуЗавершение1", ЭтотОбъект),
			ТекстНСТР, РежимДиалогаВопрос.ОКОтмена);
        Возврат;
	КонецЕсли;
	
	ДобавитьСуществующуюВыручкуФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСуществующуюВыручкуЗавершение1(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ <> КодВозвратаДиалога.ОК Тогда
        Возврат;
    КонецЕсли;
    
    Если НЕ ПроверитьЗаполнениеДокумента() Тогда
        Возврат;
    КонецЕсли;
    
    ДобавитьСуществующуюВыручкуФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСуществующуюВыручкуФрагмент()
    
    СтруктураОтбора = Новый Структура;
    СтруктураОтбора.Вставить("ПометкаУдаления", Ложь);
    СтруктураОтбора.Вставить("Организация", Объект.Организация);
    
    ОткрытьФорму("Документ.уатВыручкаВодителей.ФормаВыбора", Новый Структура("Отбор", СтруктураОтбора),,,,,
		Новый ОписаниеОповещения("ДобавитьСуществующуюВыручкуЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСуществующуюВыручкуЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Если Результат = Неопределено Тогда
        Возврат;
    КонецЕсли;	
    
    ДобавитьСуществующуюВыручкуСервер(Результат);
    
    Если РедактироватьВыручкуВДиалоге Тогда
        ДобавитьВыручкуВДиалоге();
    Иначе
        ДобавитьВыручкуВСписке();
    КонецЕсли;
    
    ОбновитьНадписьРассчитан();

КонецПроцедуры

&НаСервере
Процедура ДобавитьСуществующуюВыручкуСервер(докСсылка)
	Док = докСсылка.ПолучитьОбъект();
	//Док.ПризнакРедактированияИзПутевогоЛистаСсылка = Объект.Ссылка;
	//Док.Заполнить(Объект.Ссылка);
	Док.ПутевойЛист = Объект.Ссылка;
	Если НЕ РедактироватьВыручкуВДиалоге Тогда
		Док.Записать();
	КонецЕсли;
	ЗначениеВРеквизитФормы(Док, "мДокументВыручка");
КонецПроцедуры

&НаКлиенте
Процедура ВыручкаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
	
	Если Объект.Рассчитан Тогда
		Объект.Рассчитан = Ложь;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		ТекстНСТР = НСтр("en='To perform this operation it is necessary to record the document. Continue?';ru='Для выполнения данной операции необходимо записать документ. Продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ВыручкаПередНачаломДобавленияЗавершение", ЭтотОбъект,
			Новый Структура("Копирование", Копирование)), ТекстНСТР, РежимДиалогаВопрос.ОКОтмена);
        Возврат;
	КонецЕсли;
	
	ВыручкаПередНачаломДобавленияФрагмент(Копирование);
КонецПроцедуры

&НаКлиенте
Процедура ВыручкаПередНачаломДобавленияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Копирование = ДополнительныеПараметры.Копирование;
	
	Ответ = РезультатВопроса;
	Если Ответ <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПроверитьЗаполнениеДокумента() Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		флЗаписан = Записать();
	Исключение
		Возврат;
	КонецПопытки;
	
	Если НЕ флЗаписан Тогда
		Возврат;
	КонецЕсли;
	
	ВыручкаПередНачаломДобавленияФрагмент(Копирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыручкаПередНачаломДобавленияФрагмент(Знач Копирование)
    
    Перем мТекущаяСтрокаСтруктура;
    
    Если РедактироватьВыручкуВДиалоге Тогда
        ДобавитьВыручкуВДиалоге(Копирование);
    Иначе
        мТекущаяСтрокаСтруктура = СтруктураСтрокиВыручки();
        Если Копирование Тогда
            ЗаполнитьЗначенияСвойств(мТекущаяСтрокаСтруктура, Элементы.Выручка.ТекущиеДанные);
        КонецЕсли;
        ДобавитьВыручкуСервер(Копирование, мТекущаяСтрокаСтруктура);
        ДобавитьВыручкуВСписке();
    КонецЕсли;
    //Если Копирование и ЗначениеЗаполнено(Элементы.Выручка.ТекущиеДанные.Количество) Тогда
    //	ИзменитьВыручкуВСписке();
    //КонецЕсли;
    
    ОбновитьКартинкиВыручка();
    ОбновитьНадписьРассчитан();

КонецПроцедуры

&НаКлиенте
Процедура ВыручкаПередНачаломИзменения(Элемент, Отказ)
	Если РедактироватьВыручкуВДиалоге Тогда
		ИзменитьВыручкуВДиалоге();
		Отказ = Истина;
	Иначе
		ТекДок = Элементы.Выручка.ТекущиеДанные.Ссылка;
		НачалоИзмененияВыручкиСервер(ТекДок);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыручкаПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	
	Если Выручка.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекСтрока = Элементы.Выручка.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстНСТР = НСтр("en='Delete revenues?';ru='Удалить выручку?'");
	ПоказатьВопрос(Новый ОписаниеОповещения("ВыручкаПередУдалениемЗавершение", ЭтотОбъект,
		Новый Структура("ТекСтрока", ТекСтрока)), ТекстНСТР, РежимДиалогаВопрос.ОКОтмена);
КонецПроцедуры

&НаКлиенте
Процедура ВыручкаПередУдалениемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ТекСтрока = ДополнительныеПараметры.ТекСтрока;
    
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		ДокСсылка = ТекСтрока.Ссылка;
		Выручка.Удалить(ТекСтрока);
		ВыручкаПередУдалениемЗавершениеСервер(ДокСсылка);
    КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ВыручкаПередУдалениемЗавершениеСервер(ДокСсылка)
	УдалитьВыручкуСервер(ДокСсылка);
КонецПроцедуры

&НаКлиенте
Процедура ВыручкаПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если ОтменаРедактирования Тогда
		ВывестиТаблицуВыручки();
		Возврат;
	КонецЕсли; 
	
	ТекСтрока = Элементы.Выручка.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(ТекСтрока.Сотрудник) Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, НСтр("en='You must select an employee!';ru='Необходимо выбрать сотрудника!'"), 30);
		Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(ТекСтрока.Количество) Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, НСтр("en='You must specify a number!';ru='Необходимо указать количество!'"), 30);
		Возврат;
	КонецЕсли;
	
	Если Не РедактироватьВыручкуВДиалоге И Не Отказ Тогда
		Попытка
			Рез = ИзменитьВыручкуВСписке();
		Исключение
			Рез = Ложь;
		КонецПопытки;
		Если НЕ Рез Тогда
			Отказ = Истина;
		КонецЕсли;
		ВывестиТаблицуВыручки();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыручкаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ВыручкаКоличество.РежимРедактирования = РежимРедактированияКолонки.Вход;
	//// Была отмена редактирования, нужно заново сформировать таблицу заправок
	//Если ОтменаРедактирования Тогда
	//	мИндекс = Элементы.СливыГСМ.ТекущиеДанные.ПолучитьИдентификатор();
	//	ВывестиТаблицуЗаправок();
	//	Элементы.ЗаправкиГСМ.ТекущаяСтрока = мИндекс;
	//КонецЕсли;
	ОбновитьКартинкиВыручка();
КонецПроцедуры

&НаКлиенте
Процедура ВыручкаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Элементы.Выручка.ТолькоПросмотр Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(Неопределено, Элементы.Выручка.ТекущиеДанные.Ссылка);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыБилеты

&НаКлиенте
Процедура РедактироватьБилетыВДиалоге(Команда)
	Элементы.РедактироватьБилетыВДиалоге.Пометка = НЕ Элементы.РедактироватьБилетыВДиалоге.Пометка;
	РедактироватьБилетыВДиалоге = Элементы.РедактироватьБилетыВДиалоге.Пометка;
	СохранитьНастройкиСервер();
КонецПроцедуры

// Процедура заполняет таблицу списком заправок
//
&НаКлиенте
Процедура ВывестиТаблицуБилеты()
	
	Билеты.Очистить();
	Для Каждого ТекСтрока Из ПолучитьТблБилетыСервер(Объект.Ссылка) Цикл
		НоваяСтрока = Билеты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет таблицу списком заправок
//
&НаСервере
Процедура ВывестиТаблицуБилетыСервер()
	
	Билеты.Очистить();
	Для Каждого ТекСтрока Из ПолучитьТблБилетыСервер(Объект.Ссылка) Цикл
		НоваяСтрока = Билеты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТблБилетыСервер(Ссылка)
	Возврат уатЗащищенныеФункцииСервер_проф.ПолучитьБилетныеЛистыДляПЛ(Ссылка);
КонецФункции

&НаКлиенте
Процедура ДобавитьСуществующийБилетныйЛист(Команда)
	Если Объект.Ссылка.Пустая() Тогда
		ТекстНСТР = НСтр("en='To perform this operation it is necessary to record the document. Continue?';ru='Для выполнения данной операции необходимо записать документ. Продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьСуществующийБилетныйЛистЗавершение1", ЭтотОбъект),
			ТекстНСТР, РежимДиалогаВопрос.ОКОтмена);
        Возврат;
	КонецЕсли;
	
	ДобавитьСуществующийБилетныйЛистФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСуществующийБилетныйЛистЗавершение1(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ <> КодВозвратаДиалога.ОК Тогда
        Возврат;
    КонецЕсли;
    
    Если НЕ ПроверитьЗаполнениеДокумента() Тогда
        Возврат;
    КонецЕсли;
    
    Попытка
		флЗаписан = Записать();
	Исключение
		Возврат;
	КонецПопытки;
	
	Если НЕ флЗаписан Тогда
		Возврат;
	КонецЕсли;
    
    ДобавитьСуществующийБилетныйЛистФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСуществующийБилетныйЛистФрагмент()
    
    СтруктураОтбора = Новый Структура;
    СтруктураОтбора.Вставить("ПометкаУдаления", Ложь);
    СтруктураОтбора.Вставить("Организация", Объект.Организация);
	СтруктураОтбора.Вставить("ТС", Объект.ТранспортноеСредство);
    
    ОткрытьФорму("Документ.уатБилетныйЛист.ФормаВыбора", Новый Структура("Отбор", СтруктураОтбора),,,,,
		Новый ОписаниеОповещения("ДобавитьСуществующийБилетныйЛистЗавершение", ЭтотОбъект),
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСуществующийБилетныйЛистЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Если Результат = Неопределено Тогда
        Возврат;
    КонецЕсли;	
    
    Если РедактироватьБилетыВДиалоге Тогда
        ДобавитьБилетныйЛистВДиалоге(, Результат);
	Иначе
		ДобавитьСуществующийБилетныйЛистСервер(Результат);
        ДобавитьБилетныйЛистВСписке();
		ОбновитьНадписьРассчитан();
    КонецЕсли;
    
КонецПроцедуры

&НаСервере
Процедура ДобавитьСуществующийБилетныйЛистСервер(докСсылка)
	ДокОбъект = докСсылка.ПолучитьОбъект();
	ДокОбъект.Заполнить(Объект.Ссылка);
	Если НЕ РедактироватьБилетыВДиалоге Тогда
		ДокОбъект.Записать();
	КонецЕсли;
	ЗначениеВРеквизитФормы(ДокОбъект, "мДокументБилетныйЛист");
КонецПроцедуры

&НаСервере
Процедура ОбновитьКартинкиБилеты()
	Для Каждого ТекСтрока Из Билеты Цикл
		Если ТекСтрока.Ссылка.Проведен Тогда
			ТекСтрока.Картинка = 1;
		ИначеЕсли ТекСтрока.Ссылка.ПометкаУдаления Тогда
			ТекСтрока.Картинка = 2;
		Иначе
			ТекСтрока.Картинка = 0;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура БилетыПриИзменении(Элемент)
	ОбновитьКартинкиБилеты();
КонецПроцедуры

&НаКлиенте
Процедура БилетыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
	
	Если Объект.Ссылка.Пустая() Тогда
		ТекстНСТР = НСтр("en='To perform this operation it is necessary to record the document. Continue?';ru='Для выполнения данной операции необходимо записать документ. Продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("БилетыПередНачаломДобавленияЗавершение", ЭтотОбъект,
			Новый Структура("Копирование", Копирование)), ТекстНСТР, РежимДиалогаВопрос.ОКОтмена);
        Возврат;
	КонецЕсли;
	
	БилетыПередНачаломДобавленияФрагмент(Копирование);
КонецПроцедуры

&НаКлиенте
Процедура БилетыПередНачаломДобавленияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса <> КодВозвратаДиалога.ОК Тогда
        Возврат;
    КонецЕсли;
    
    Если НЕ ПроверитьЗаполнениеДокумента() Тогда
        Возврат;
    КонецЕсли;
    
    Попытка
		флЗаписан = Записать();
	Исключение
		Возврат;
	КонецПопытки;
	
	Если НЕ флЗаписан Тогда
		Возврат;
	КонецЕсли;
    
    БилетыПередНачаломДобавленияФрагмент(ДополнительныеПараметры.Копирование);

КонецПроцедуры

&НаКлиенте
Процедура БилетыПередНачаломДобавленияФрагмент(Знач Копирование)
    
    Если РедактироватьБилетыВДиалоге Тогда
        ДобавитьБилетныйЛистВДиалоге(Копирование);
    Иначе
        мТекущаяСтрокаСтруктура = СтруктураСтрокиБилетныйЛист();
        Если Копирование Тогда
            ЗаполнитьЗначенияСвойств(мТекущаяСтрокаСтруктура, Элементы.Билеты.ТекущиеДанные);
        КонецЕсли;
        ДобавитьБилетныйЛистСервер(Копирование, мТекущаяСтрокаСтруктура);
        ДобавитьБилетныйЛистВСписке();
    КонецЕсли;
    
    ОбновитьКартинкиБилеты();
    ОбновитьНадписьРассчитан();

КонецПроцедуры

&НаКлиенте
Процедура БилетыПередНачаломИзменения(Элемент, Отказ)
	Если РедактироватьБилетыВДиалоге Тогда
		ИзменитьБилетныйЛистВДиалоге();
		Отказ = Истина;
	Иначе
		ТекДок = Элементы.Билеты.ТекущиеДанные.Ссылка;
		НачалоИзмененияБилетногоЛистаСервер(ТекДок);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура НачалоИзмененияБилетногоЛистаСервер(ТекДок)
	ДокОбъект = ТекДок.ПолучитьОбъект();
	ЗначениеВРеквизитФормы(ДокОбъект, "мДокументБилетныйЛист");
КонецПроцедуры

&НаСервере
Процедура ДобавитьБилетныйЛистСервер(флКопирование = Ложь, мТекущаяСтрокаСтруктура = Неопределено)
	Если флКопирование = Истина Тогда
		ДокОбъект = мТекущаяСтрокаСтруктура.Ссылка.Скопировать();
		ДокОбъект.Дата = мТекущаяСтрокаСтруктура.Дата;
	Иначе
		ДокОбъект = Документы.уатБилетныйЛист.СоздатьДокумент();
		ДокОбъект.Заполнить(Объект.Ссылка);
	КонецЕсли;
		
	ДокОбъект.Записать();
	
	ЗначениеВРеквизитФормы(ДокОбъект, "мДокументБилетныйЛист");
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьБилетныйЛистВДиалоге(флКопирование = Ложь, докСсылка = Неопределено)
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ДобавлениеБилетовИзПЛ", Истина);
	ПараметрыОткрытия.Вставить("ПутевойЛист", Объект.Ссылка);
	Если докСсылка <> Неопределено Тогда
		ПараметрыОткрытия.Вставить("Ключ", докСсылка);
	КонецЕсли;
	
	Если флКопирование = Истина Тогда
		ТекСтрока = Элементы.Билеты.ТекущиеДанные;
		Если ТекСтрока <> Неопределено Тогда
			мТекущаяСтрокаСтруктура = СтруктураСтрокиБилетныйЛист();
			ЗаполнитьЗначенияСвойств(мТекущаяСтрокаСтруктура, ТекСтрока);
			ПараметрыОткрытия.Вставить("БилетныйЛистКопирование", мТекущаяСтрокаСтруктура);
			ПараметрыОткрытия.Вставить("ЗначениеКопирования", мТекущаяСтрокаСтруктура.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	ОткрытьФорму("Документ.уатБилетныйЛист.ФормаОбъекта", ПараметрыОткрытия, ЭтотОбъект,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьБилетныйЛистВДиалоге()
	ТекСтрока = Элементы.Билеты.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("Ключ",                       ТекСтрока.Ссылка);
	ПараметрыОткрытия.Вставить("РедактированиеБилетногоЛистаИзПЛ", Истина);
	ПараметрыОткрытия.Вставить("ПутевойЛист",                Объект.Ссылка);
	
	ОткрытьФорму("Документ.уатБилетныйЛист.ФормаОбъекта", ПараметрыОткрытия,,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьБилетныйЛистВСписке()
	мТекущаяСтрока = Элементы.Билеты.ТекущиеДанные;
	мсвНайдСтроки = мДокументБилетныйЛист.Билеты.НайтиСтроки(Новый Структура("НомерСтроки", мТекущаяСтрока.НомерСтроки));
	Если мсвНайдСтроки.Количество() = 0 Тогда
		НайденнаяСтрока = Неопределено;
	Иначе
		НайденнаяСтрока = мсвНайдСтроки[0];
	КонецЕсли;
	
	Если НайденнаяСтрока = Неопределено Тогда
		ПоказатьПредупреждение(Неопределено,
			НСтр("en='Error writing document ""Ticket""!"
"Maybe the document was changed by another user!';ru='Ошибка при записи документа ""Билетный лист""!"
"Возможно документ был изменен другим пользователем!'"));
	Иначе
		мТекущаяСтрокаСтруктура = СтруктураСтрокиБилетныйЛист();
		ЗаполнитьЗначенияСвойств(мТекущаяСтрокаСтруктура, мТекущаяСтрока);
		ИзменитьБилетныйЛистВСпискеСервер(мТекущаяСтрокаСтруктура);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция СтруктураСтрокиБилетныйЛист()
	Рез = Новый Структура;
	Рез.Вставить("Ссылка");
	Рез.Вставить("Номер");
	Рез.Вставить("Дата");
	Рез.Вставить("НомерСтроки");
	Рез.Вставить("Сотрудник");
	Рез.Вставить("ТС");
	Рез.Вставить("Склад");
	Рез.Вставить("Билет");
	Рез.Вставить("Маршрут");
	Рез.Вставить("Количество");
	Рез.Вставить("Сумма");
	Рез.Вставить("НомерНачальный");
	Рез.Вставить("НомерКонечный");
	
	Возврат Рез;
КонецФункции

&НаСервере
Процедура ИзменитьБилетныйЛистВСпискеСервер(мТекущаяСтрокаСтруктура)
	Рез = Истина;
	
	ДокОбъект = РеквизитФормыВЗначение("мДокументБилетныйЛист");
	ДокОбъект.Дата = мТекущаяСтрокаСтруктура.Дата;
	ДокОбъект.Номер = мТекущаяСтрокаСтруктура.Номер;
	ДокОбъект.Сотрудник = мТекущаяСтрокаСтруктура.Сотрудник;
	ДокОбъект.ТС = Объект.ТранспортноеСредство;
	ДокОбъект.Склад = мТекущаяСтрокаСтруктура.Склад;
	НайденнаяСтрока = ДокОбъект.Билеты.Найти(мТекущаяСтрокаСтруктура.НомерСтроки, "НомерСтроки");
	ЗаполнитьЗначенияСвойств(НайденнаяСтрока, мТекущаяСтрокаСтруктура);
	НайденнаяСтрока.ПутевойЛист = Объект.Ссылка;
	
	Попытка
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		ЗначениеВРеквизитФормы(ДокОбъект, "мДокументБилетныйЛист");
	Исключение
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьБилетныйЛистВСписке()
	Если мДокументБилетныйЛист.Билеты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекСтрокаБилета = мДокументБилетныйЛист.Билеты[мДокументБилетныйЛист.Билеты.Количество()-1];
	
	НоваяСтрока = Билеты.Добавить();
	НоваяСтрока.Ссылка = мДокументБилетныйЛист.Ссылка;
	НоваяСтрока.Номер = мДокументБилетныйЛист.Номер;
	НоваяСтрока.Дата = мДокументБилетныйЛист.Дата;
	НоваяСтрока.Сотрудник = мДокументБилетныйЛист.Сотрудник;
	НоваяСтрока.Маршрут = ТекСтрокаБилета.Маршрут;
	НоваяСтрока.Склад = мДокументБилетныйЛист.Склад;
	НоваяСтрока.НомерСтроки	= ТекСтрокаБилета.НомерСтроки;
	НоваяСтрока.Билет = ТекСтрокаБилета.Билет;
	НоваяСтрока.Количество = ТекСтрокаБилета.Количество;
	НоваяСтрока.Сумма = ТекСтрокаБилета.Сумма;
	
	Элементы.Билеты.ТекущаяСтрока = Билеты[Билеты.Количество() - 1].ПолучитьИдентификатор();
	ТекущийЭлемент = Элементы.БилетыКоличество;
	Элементы.БилетыКоличество.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
	
	ОбновитьКартинкиБилеты();
КонецПроцедуры

&НаКлиенте
Процедура БилетыПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	
	Если Билеты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекСтрока = Элементы.Билеты.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстНСТР = НСтр("en='Delete ticket sheet?';ru='Удалить билетный лист?'");
	ПоказатьВопрос(Новый ОписаниеОповещения("БилетыПередУдалениемЗавершение", ЭтотОбъект,
		Новый Структура("ТекСтрока", ТекСтрока)), ТекстНСТР, РежимДиалогаВопрос.ОКОтмена);
КонецПроцедуры

&НаКлиенте
Процедура БилетыПередУдалениемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ТекСтрока = ДополнительныеПараметры.ТекСтрока;
    
    Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		БилетныйЛистСсылка = ТекСтрока.Ссылка;
		Билеты.Удалить(ТекСтрока);
		БилетыПередУдалениемЗавершениеСервер(БилетныйЛистСсылка);
    КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура БилетыПередУдалениемЗавершениеСервер(ДокументСсылка)
	УдалитьБилетныйЛистСервер(ДокументСсылка);
КонецПроцедуры

&НаСервере
Процедура УдалитьБилетныйЛистСервер(ДокСсылка)
	ДокСсылка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
КонецПроцедуры

&НаКлиенте
Процедура БилетыПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если ОтменаРедактирования Тогда
		ВывестиТаблицуБилеты();
		Возврат;
	КонецЕсли; 
	
	ТекСтрока = Элементы.Билеты.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(ТекСтрока.Сотрудник) Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, НСтр("en='You must select an employee!';ru='Необходимо выбрать сотрудника!'"), 30);
		Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(ТекСтрока.Маршрут) Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, НСтр("en='You need to choose the route!';ru='Необходимо выбрать маршрут!'"), 30);
		Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(ТекСтрока.Склад) Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, НСтр("en='Need a warehouse!';ru='Необходимо склад!'"), 30);
		Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(ТекСтрока.Билет) Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, НСтр("en='You should select ticket!';ru='Необходимо выбрать билет!'"), 30);
		Возврат;
	КонецЕсли;
	
	Если Не РедактироватьБилетыВДиалоге И Не Отказ Тогда
		Попытка
			ИзменитьБилетныйЛистВСписке();
		Исключение
			Отказ = Истина;
		КонецПопытки;	
		ВывестиТаблицуБилеты();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура БилетыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.БилетыКоличество.РежимРедактирования = РежимРедактированияКолонки.Вход;
	ОбновитьКартинкиБилеты();
КонецПроцедуры

&НаКлиенте
Процедура БилетыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Элементы.Билеты.ТолькоПросмотр Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(Неопределено, Элементы.Билеты.ТекущиеДанные.Ссылка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура БилетыКоличествоПриИзменении(Элемент)
	ТекСтрока = Элементы.Билеты.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекСтрока.Билет) Тогда
		ТекСтрока.Сумма = ТекСтрока.Количество * уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрока.Билет, "Цена");
	Иначе
		ТекСтрока.Сумма = 0;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыПосадочныеВедомости

&НаКлиенте
Процедура РедактироватьПосадочныеВедомостиВДиалоге(Команда)
	Элементы.РедактироватьПосВедВДиалоге.Пометка = НЕ Элементы.РедактироватьПосВедВДиалоге.Пометка;
	РедактироватьПосВедВДиалоге = Элементы.РедактироватьПосВедВДиалоге.Пометка;
	СохранитьНастройкиСервер();
КонецПроцедуры

&НаКлиенте
Процедура ВывестиТаблицуПосВед()
	
	ПосадочныеВедомости.Очистить();
	Для Каждого ТекСтрока Из ПолучитьТблПосВедСервер(Объект.Ссылка) Цикл
		НоваяСтрока = ПосадочныеВедомости.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиТаблицуПосВедСервер()
	
	ПосадочныеВедомости.Очистить();
	Для Каждого ТекСтрока Из ПолучитьТблПосВедСервер(Объект.Ссылка) Цикл
		НоваяСтрока = ПосадочныеВедомости.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТблПосВедСервер(Ссылка)
	Возврат уатЗащищенныеФункцииСервер_проф.ПолучитьПосадочныеВедомостиДляПЛ(Ссылка);
КонецФункции

&НаКлиенте
Процедура ДобавитьСуществующуюПосадочнуюВедомость(Команда)
	Если Объект.Ссылка.Пустая() Тогда
		ТекстНСТР = НСтр("en='To perform this operation it is necessary to record the document. Continue?';ru='Для выполнения данной операции необходимо записать документ. Продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьСуществующуюПосадочнуюВедомостьЗавершение1", ЭтотОбъект),
			ТекстНСТР, РежимДиалогаВопрос.ОКОтмена);
        Возврат;
	КонецЕсли;
	
	ДобавитьСуществующуюПосадочнуюВедомостьФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСуществующуюПосадочнуюВедомостьЗавершение1(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ <> КодВозвратаДиалога.ОК Тогда
        Возврат;
    КонецЕсли;
    
    Если НЕ ПроверитьЗаполнениеДокумента() Тогда
        Возврат;
    КонецЕсли;
    
    Попытка
		флЗаписан = Записать();
	Исключение
		Возврат;
	КонецПопытки;
	
	Если НЕ флЗаписан Тогда
		Возврат;
	КонецЕсли;
    
    ДобавитьСуществующуюПосадочнуюВедомостьФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСуществующуюПосадочнуюВедомостьФрагмент()
    
    СтруктураОтбора = Новый Структура;
    СтруктураОтбора.Вставить("ПометкаУдаления", Ложь);
    СтруктураОтбора.Вставить("Организация", Объект.Организация);
	СтруктураОтбора.Вставить("ТС", Объект.ТранспортноеСредство);
    
    ОткрытьФорму("Документ.уатПосадочнаяВедомость.ФормаВыбора", Новый Структура("Отбор", СтруктураОтбора),,,,,
		Новый ОписаниеОповещения("ДобавитьСуществующуюПосадочнуюВедомостьЗавершение", ЭтотОбъект),
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСуществующуюПосадочнуюВедомостьЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Если Результат = Неопределено Тогда
        Возврат;
    КонецЕсли;	
    
    Если РедактироватьПосВедВДиалоге Тогда
        ДобавитьПосадочнуюВедомостьВДиалоге(, Результат);
	Иначе
		ДобавитьСуществующуюПосадочнуюВедомостьСервер(Результат);
        ДобавитьПосадочнуюВедомостьВСписке();
		ОбновитьНадписьРассчитан();
    КонецЕсли;
    
КонецПроцедуры

&НаСервере
Процедура ДобавитьСуществующуюПосадочнуюВедомостьСервер(докСсылка)
	ДокОбъект = докСсылка.ПолучитьОбъект();
	ДокОбъект.Заполнить(Объект.Ссылка);
	Если НЕ РедактироватьПосВедВДиалоге Тогда
		ДокОбъект.Записать();
	КонецЕсли;
	ЗначениеВРеквизитФормы(ДокОбъект, "мДокументПосадочнаяВедомость");
КонецПроцедуры

&НаСервере
Процедура ОбновитьКартинкиПосВед()
	Для Каждого ТекСтрока Из ПосадочныеВедомости Цикл
		Если ТекСтрока.Ссылка.Проведен Тогда
			ТекСтрока.Картинка = 1;
		ИначеЕсли ТекСтрока.Ссылка.ПометкаУдаления Тогда
			ТекСтрока.Картинка = 2;
		Иначе
			ТекСтрока.Картинка = 0;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПосадочныеВедомостиПриИзменении(Элемент)
	ОбновитьКартинкиПосВед();
КонецПроцедуры

&НаКлиенте
Процедура ПосадочныеВедомостиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
	
	Если Объект.Ссылка.Пустая() Тогда
		ТекстНСТР = НСтр("en='To perform this operation it is necessary to record the document. Continue?';ru='Для выполнения данной операции необходимо записать документ. Продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ПосадочныеВедомостиПередНачаломДобавленияЗавершение", ЭтотОбъект,
			Новый Структура("Копирование", Копирование)), ТекстНСТР, РежимДиалогаВопрос.ОКОтмена);
        Возврат;
	КонецЕсли;
	
	ПосадочныеВедомостиПередНачаломДобавленияФрагмент(Копирование);
КонецПроцедуры

&НаКлиенте
Процедура ПосадочныеВедомостиПередНачаломДобавленияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса <> КодВозвратаДиалога.ОК Тогда
        Возврат;
    КонецЕсли;
    
    Если НЕ ПроверитьЗаполнениеДокумента() Тогда
        Возврат;
    КонецЕсли;
    
    Попытка
		флЗаписан = Записать();
	Исключение
		Возврат;
	КонецПопытки;
	
	Если НЕ флЗаписан Тогда
		Возврат;
	КонецЕсли;
    
    ПосадочныеВедомостиПередНачаломДобавленияФрагмент(ДополнительныеПараметры.Копирование);

КонецПроцедуры

&НаКлиенте
Процедура ПосадочныеВедомостиПередНачаломДобавленияФрагмент(Знач Копирование)
    
    Если РедактироватьПосВедВДиалоге Тогда
        ДобавитьПосадочнуюВедомостьВДиалоге(Копирование);
    Иначе
        мТекущаяСтрокаСтруктура = СтруктураСтрокиПосадочнаяВедомость();
        Если Копирование Тогда
            ЗаполнитьЗначенияСвойств(мТекущаяСтрокаСтруктура, Элементы.ПосадочныеВедомости.ТекущиеДанные);
        КонецЕсли;
        ДобавитьПосадочнуюВедомостьСервер(Копирование, мТекущаяСтрокаСтруктура);
        ДобавитьПосадочнуюВедомостьВСписке();
    КонецЕсли;
    
    ОбновитьКартинкиПосВед();
    ОбновитьНадписьРассчитан();

КонецПроцедуры

&НаКлиенте
Процедура ПосадочныеВедомостиПередНачаломИзменения(Элемент, Отказ)
	Если РедактироватьПосВедВДиалоге Тогда
		ИзменитьПосадочнуюВедомостьВДиалоге();
		Отказ = Истина;
	Иначе
		ТекДок = Элементы.ПосадочныеВедомости.ТекущиеДанные.Ссылка;
		НачалоИзмененияПосадочнойВедомостиСервер(ТекДок);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура НачалоИзмененияПосадочнойВедомостиСервер(ТекДок)
	ДокОбъект = ТекДок.ПолучитьОбъект();
	ЗначениеВРеквизитФормы(ДокОбъект, "мДокументПосадочнаяВедомость");
КонецПроцедуры

&НаСервере
Процедура ДобавитьПосадочнуюВедомостьСервер(флКопирование = Ложь, мТекущаяСтрокаСтруктура = Неопределено)
	Если флКопирование = Истина Тогда
		ДокОбъект = мТекущаяСтрокаСтруктура.Ссылка.Скопировать();
		ДокОбъект.Дата = мТекущаяСтрокаСтруктура.Дата;
	Иначе
		ДокОбъект = Документы.уатПосадочнаяВедомость.СоздатьДокумент();
		ДокОбъект.Заполнить(Объект.Ссылка);
	КонецЕсли;
		
	ДокОбъект.Записать();
	
	ЗначениеВРеквизитФормы(ДокОбъект, "мДокументПосадочнаяВедомость");
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПосадочнуюВедомостьВДиалоге(флКопирование = Ложь, докСсылка = Неопределено)
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ДобавлениеПосадочнойВедомостиИзПЛ", Истина);
	ПараметрыОткрытия.Вставить("ПутевойЛист", Объект.Ссылка);
	Если докСсылка <> Неопределено Тогда
		ПараметрыОткрытия.Вставить("Ключ", докСсылка);
	КонецЕсли;
	
	Если флКопирование = Истина Тогда
		ТекСтрока = Элементы.ПосадочныеВедомости.ТекущиеДанные;
		Если ТекСтрока <> Неопределено Тогда
			мТекущаяСтрокаСтруктура = СтруктураСтрокиПосадочнаяВедомость();
			ЗаполнитьЗначенияСвойств(мТекущаяСтрокаСтруктура, ТекСтрока);
			ПараметрыОткрытия.Вставить("ПосадочнаяВедомостьКопирование", мТекущаяСтрокаСтруктура);
			ПараметрыОткрытия.Вставить("ЗначениеКопирования", мТекущаяСтрокаСтруктура.Ссылка);
		КонецЕсли;
	КонецЕсли;
	
	ОткрытьФорму("Документ.уатПосадочнаяВедомость.ФормаОбъекта", ПараметрыОткрытия, ЭтотОбъект,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПосадочнуюВедомостьВДиалоге()
	ТекСтрока = Элементы.ПосадочныеВедомости.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("Ключ",                       ТекСтрока.Ссылка);
	ПараметрыОткрытия.Вставить("РедактированиеПосадочнойВедомостиИзПЛ", Истина);
	ПараметрыОткрытия.Вставить("ПутевойЛист",                Объект.Ссылка);
	
	ОткрытьФорму("Документ.уатПосадочнаяВедомость.ФормаОбъекта", ПараметрыОткрытия,,,,,,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПосадочнуюВедомостьВСписке()
	мТекущаяСтрока = Элементы.ПосадочныеВедомости.ТекущиеДанные;
	мсвНайдСтроки = мДокументПосадочнаяВедомость.Билеты.НайтиСтроки(Новый Структура("НомерСтроки", мТекущаяСтрока.НомерСтроки));
	Если мсвНайдСтроки.Количество() = 0 Тогда
		НайденнаяСтрока = Неопределено;
	Иначе
		НайденнаяСтрока = мсвНайдСтроки[0];
	КонецЕсли;
	
	Если НайденнаяСтрока = Неопределено Тогда
		ПоказатьПредупреждение(Неопределено,
		НСтр("en='Error occurred while record of document ""Boarding statement!"
"Perhaps the document was changed by another user!';ru='Ошибка при записи документа ""Посадочная ведомость""!"
"Возможно документ был изменен другим пользователем!'"));
	Иначе
		мТекущаяСтрокаСтруктура = СтруктураСтрокиПосадочнаяВедомость();
		ЗаполнитьЗначенияСвойств(мТекущаяСтрокаСтруктура, мТекущаяСтрока);
		ИзменитьПосадочнуюВедомостьВСпискеСервер(мТекущаяСтрокаСтруктура);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция СтруктураСтрокиПосадочнаяВедомость()
	Рез = Новый Структура;
	Рез.Вставить("Ссылка");
	Рез.Вставить("Номер");
	Рез.Вставить("Дата");
	Рез.Вставить("НомерСтроки");
	Рез.Вставить("Сотрудник");
	Рез.Вставить("ТС");
	Рез.Вставить("Автостанция");
	Рез.Вставить("КомиссияАвтостанции");
	Рез.Вставить("Билет");
	Рез.Вставить("Маршрут");
	Рез.Вставить("Количество");
	Рез.Вставить("Сумма");
		
	Возврат Рез;
КонецФункции

&НаСервере
Процедура ИзменитьПосадочнуюВедомостьВСпискеСервер(мТекущаяСтрокаСтруктура)
	Рез = Истина;
	
	ДокОбъект = РеквизитФормыВЗначение("мДокументПосадочнаяВедомость");
	ДокОбъект.Дата = мТекущаяСтрокаСтруктура.Дата;
	ДокОбъект.Номер = мТекущаяСтрокаСтруктура.Номер;
	ДокОбъект.Сотрудник = мТекущаяСтрокаСтруктура.Сотрудник;
	ДокОбъект.ТС = Объект.ТранспортноеСредство;
	ДокОбъект.Автостанция = мТекущаяСтрокаСтруктура.Автостанция;
	НайденнаяСтрока = ДокОбъект.Билеты.Найти(мТекущаяСтрокаСтруктура.НомерСтроки, "НомерСтроки");
	ЗаполнитьЗначенияСвойств(НайденнаяСтрока, мТекущаяСтрокаСтруктура);
	НайденнаяСтрока.ПутевойЛист = Объект.Ссылка;
	
	Попытка
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		ЗначениеВРеквизитФормы(ДокОбъект, "мДокументПосадочнаяВедомость");
	Исключение
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПосадочнуюВедомостьВСписке()
	Если мДокументПосадочнаяВедомость.Билеты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекСтрокаПосВед = мДокументПосадочнаяВедомость.Билеты[мДокументПосадочнаяВедомость.Билеты.Количество()-1];
	
	НоваяСтрока = ПосадочныеВедомости.Добавить();
	НоваяСтрока.Ссылка = мДокументПосадочнаяВедомость.Ссылка;
	НоваяСтрока.Номер = мДокументПосадочнаяВедомость.Номер;
	НоваяСтрока.Дата = мДокументПосадочнаяВедомость.Дата;
	НоваяСтрока.Сотрудник = мДокументПосадочнаяВедомость.Сотрудник;
	НоваяСтрока.Маршрут = ТекСтрокаПосВед.Маршрут;
	НоваяСтрока.Автостанция = мДокументПосадочнаяВедомость.Автостанция;
	НоваяСтрока.НомерСтроки	= ТекСтрокаПосВед.НомерСтроки;
	НоваяСтрока.КомиссияАвтостанции	= ТекСтрокаПосВед.КомиссияАвтостанции;
	НоваяСтрока.Билет = ТекСтрокаПосВед.Билет;
	НоваяСтрока.Количество = ТекСтрокаПосВед.Количество;
	НоваяСтрока.Сумма = ТекСтрокаПосВед.Сумма;
	
	Элементы.ПосадочныеВедомости.ТекущаяСтрока = ПосадочныеВедомости[ПосадочныеВедомости.Количество() - 1].ПолучитьИдентификатор();
	ТекущийЭлемент = Элементы.ПосадочныеВедомостиКоличество;
	Элементы.ПосадочныеВедомостиКоличество.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
	
	ОбновитьКартинкиПосВед();
КонецПроцедуры

&НаКлиенте
Процедура ПосадочныеВедомостиПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	
	Если ПосадочныеВедомости.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекСтрока = Элементы.ПосадочныеВедомости.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстНСТР = НСтр("en='Delete boarding statement?';ru='Удалить посадочную ведомость?'");
	ПоказатьВопрос(Новый ОписаниеОповещения("ПосадочныеВедомостиПередУдалениемЗавершение", ЭтотОбъект,
		Новый Структура("ТекСтрока", ТекСтрока)), ТекстНСТР, РежимДиалогаВопрос.ОКОтмена);
КонецПроцедуры

&НаКлиенте
Процедура ПосадочныеВедомостиПередУдалениемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ТекСтрока = ДополнительныеПараметры.ТекСтрока;
    
    Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		ДокСсылка = ТекСтрока.Ссылка;
		ПосадочныеВедомости.Удалить(ТекСтрока);
		ПосадочныеВедомостиПередУдалениемЗавершениеСервер(ДокСсылка);
    КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПосадочныеВедомостиПередУдалениемЗавершениеСервер(ДокументСсылка)
	ДокументСсылка.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПосадочныеВедомостиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если ОтменаРедактирования Тогда
		ВывестиТаблицуПосВед();
		Возврат;
	КонецЕсли; 
	
	ТекСтрока = Элементы.ПосадочныеВедомости.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(ТекСтрока.Сотрудник) Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, НСтр("en='You must select an employee!';ru='Необходимо выбрать сотрудника!'"), 30);
		Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(ТекСтрока.Маршрут) Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, НСтр("en='You need to choose the route!';ru='Необходимо выбрать маршрут!'"), 30);
		Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(ТекСтрока.Автостанция) Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, НСтр("en='Select bus station!';ru='Необходимо выбрать автостанцию!'"), 30);
		Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(ТекСтрока.Билет) Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, НСтр("en='You should select ticket!';ru='Необходимо выбрать билет!'"), 30);
		Возврат;
	КонецЕсли;
	
	Если Не РедактироватьПосВедВДиалоге И Не Отказ Тогда
		Попытка
			ИзменитьПосадочнуюВедомостьВСписке();
		Исключение
			Отказ = Истина;
		КонецПопытки;	
		ВывестиТаблицуПосВед();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПосадочныеВедомостиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ПосадочныеВедомостиКоличество.РежимРедактирования = РежимРедактированияКолонки.Вход;
	ОбновитьКартинкиПосВед();
КонецПроцедуры

&НаКлиенте
Процедура ПосадочныеВедомостиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Элементы.ПосадочныеВедомости.ТолькоПросмотр Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(Неопределено, Элементы.ПосадочныеВедомости.ТекущиеДанные.Ссылка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПосадочныеВедомостиАвтостанцияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Справочник.уатПунктыНазначения.Форма.ФормаВыбораАвтостанции",,Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПосадочныеВедомостиКоличествоПриИзменении(Элемент)
	ТекСтрока = Элементы.ПосадочныеВедомости.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекСтрока.Билет) Тогда
		ТекСтрока.Сумма = ТекСтрока.Количество * уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрока.Билет, "Цена");
	Иначе
		ТекСтрока.Сумма = 0;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыФОВ

&НаКлиенте
Процедура ПересчитатьФОВ(Команда)
	Если Объект.ФактическиОтработанноеВремя.Количество() > 0 Тогда
		ТекстНСТР = НСтр("en='Table will be cleared before filling! Continue?';ru='Перед заполнением таблица будет очищена! Продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ПересчитатьФОВЗавершение", ЭтотОбъект), ТекстНСТР, РежимДиалогаВопрос.ОКОтмена);
        Возврат;
	КонецЕсли;
	
	ПересчитатьФОВФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьФОВЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса <> КодВозвратаДиалога.ОК Тогда
        Возврат;
    КонецЕсли;
    
    ПересчитатьФОВФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьФОВФрагмент()
    
    РасчетВремениСервер();
    РасчетФОВСервер(Истина);
    ОбновитьВремяФОВ();

КонецПроцедуры

&НаСервере
Процедура РасчетВремениСервер()
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	уатПутевыеЛисты.РасчитатьВременныеПараметры(ДокОбъект);
	ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
	ОбновитьДинамическиеКолонкиТЧСервер();
КонецПроцедуры

&НаСервере
Процедура РасчетФОВСервер(ВыполнитьПринудительно)
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	ДокОбъект.РасчетФОВ(ВыполнитьПринудительно);
	ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
	ОбновитьДинамическиеКолонкиТЧСервер();
КонецПроцедуры

&НаКлиенте
Процедура ФактическиОтработанноеВремяПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Объект.НеВыполнятьАвтоРасчетФОВ Тогда
		Объект.НеВыполнятьАвтоРасчетФОВ = Истина;
	КонецЕсли;
	
	РасчетВыработкиСотрудниковСервер();
	ВывестиТаблицуВыработкаСотрудников();
	ОбновитьВремяФОВ();
КонецПроцедуры

&НаСервере
Процедура РасчетВыработкиСотрудниковСервер()
	Док = РеквизитФормыВЗначение("Объект");
	Отказ = Ложь;
	Док.РасчетВыработкиСотрудников(Отказ);
	ЗначениеВРеквизитФормы(Док, "Объект");
	ОбновитьДинамическиеКолонкиТЧСервер();
КонецПроцедуры

&НаКлиенте
Процедура ФактическиОтработанноеВремяДневноеФорматПриИзменении(Элемент)
	ТекСтрока = Элементы.ФактическиОтработанноеВремя.ТекущиеДанные;
	уатЗащищенныеФункцииСервер.КонтрольВводаВремени(ТекСтрока.ВремяДневноеФормат);
	ТекСтрока.ВремяДневное = уатОбщегоНазначения.уатВремяВСекунды(ТекСтрока.ВремяДневноеФормат);
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ФактическиОтработанноеВремяНочноеФорматПриИзменении(Элемент)
	ТекСтрока = Элементы.ФактическиОтработанноеВремя.ТекущиеДанные;
	уатЗащищенныеФункцииСервер.КонтрольВводаВремени(ТекСтрока.ВремяНочноеФормат);
	ТекСтрока.ВремяНочное = уатОбщегоНазначения.уатВремяВСекунды(ТекСтрока.ВремяНочноеФормат);
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ФактическиОтработанноеВремяСотрудникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекСтрока = Элементы.ФактическиОтработанноеВремя.ТекущиеДанные;
	уатЗащищенныеФункцииКлиент.ДиалогВыбораСотрудника(Элемент, ТекСтрока.Сотрудник, Новый Структура("Организация", Объект.Организация), СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыПрочиеРасходы

&НаКлиенте
Процедура ПрочиеРасходыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И НЕ Копирование Тогда
		ТекСтрока = Элементы.ПрочиеРасходы.ТекущиеДанные;
		ТекСтрока.Валюта = ВалютаРегламентированногоУчета();
		КурсКратностьВалюты = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ТекСтрока.Валюта, Объект.Дата);
		ТекСтрока.Курс      = КурсКратностьВалюты.Курс;
		ТекСтрока.Кратность = КурсКратностьВалюты.Кратность;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыСуммаПриИзменении(Элемент)
	ПрочиеРасходыРассчитатьСтроку(Элементы.ПрочиеРасходы.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыСуммаНДСПриИзменении(Элемент)
	ПрочиеРасходыРассчитатьСуммуВсего(Элементы.ПрочиеРасходы.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыУчитыватьНДСПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ПрочиеРасходы.ТекущиеДанные;
	Если НЕ СтрокаТабличнойЧасти.УчитыватьНДС Тогда
		Если СтрокаТабличнойЧасти.СуммаВключаетНДС Тогда
			СтрокаТабличнойЧасти.СуммаВключаетНДС = Ложь;
		КонецЕсли;
		СтрокаТабличнойЧасти.СтавкаНДС = Неопределено;
	КонецЕсли;
	
	ПрочиеРасходыРассчитатьСтроку(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыСуммаВключаетНДСПриИзменении(Элемент)
	ПрочиеРасходыРассчитатьСтроку(Элементы.ПрочиеРасходы.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыСтавкаНДСПриИзменении(Элемент)
	ПрочиеРасходыРассчитатьСтроку(Элементы.ПрочиеРасходы.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыРассчитатьСтроку(СтрокаТабличнойЧасти)
	СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	
	СтрокаТабличнойЧасти.СуммаНДС = ?(СтрокаТабличнойЧасти.СуммаВключаетНДС, 
		СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
		СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
		
	ПрочиеРасходыРассчитатьСуммуВсего(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыРассчитатьСуммуВсего(СтрокаТабличнойЧасти)
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма
		+ ?(СтрокаТабличнойЧасти.УчитыватьНДС И НЕ СтрокаТабличнойЧасти.СуммаВключаетНДС, СтрокаТабличнойЧасти.СуммаНДС, 0);
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеРасходыВалютаПриИзменении(Элемент)
	ТекСтрока = Элементы.ПрочиеРасходы.ТекущиеДанные;
	КурсКратностьВалюты = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ТекСтрока.Валюта, Объект.Дата);
	ТекСтрока.Курс      = КурсКратностьВалюты.Курс;
	ТекСтрока.Кратность = КурсКратностьВалюты.Кратность;
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура УстановитьВидимость()
	
	// модификация видимости для международного ПЛ
	Если Объект.ВидПЛ = ПредопределенноеЗначение("Перечисление.уатВидыПЛ._4М") Тогда
		Элементы.ЗаправкиГСМСтрана.Видимость = Истина;
	Иначе
		Элементы.ЗаправкиГСМСтрана.Видимость = Ложь;
	КонецЕсли;	
	
	// модификация заголовков для сопровождающих лиц и пробега в задании
	Если Объект.ВидПЛ = ПредопределенноеЗначение("Перечисление.уатВидыПЛ._3") Тогда
		Элементы.Сотрудник1.Заголовок = НСтр("en='Attendant1';ru='Сопр.лицо 1'");
		Элементы.Сотрудник2.Заголовок = НСтр("en='Attendant2';ru='Сопр.лицо 2'");
		Элементы.ЗаданиеКоличествоКмГруз.Заголовок = НСтр("en='Mileage with passengers';ru='Пробег с пассажирами'");
		Элементы.ЗаданиеКоличествоКмГруз.Подсказка = НСтр("en='Mileage with passengers';ru='Пробег с пассажирами'");
	ИначеЕсли Объект.ВидПЛ = ПредопределенноеЗначение("Перечисление.уатВидыПЛ._6")
		ИЛИ Объект.ВидПЛ = ПредопределенноеЗначение("Перечисление.уатВидыПЛ._6С")
		ИЛИ Объект.ВидПЛ = ПредопределенноеЗначение("Перечисление.уатВидыПЛ._ПА1") Тогда
		Элементы.Сотрудник1.Заголовок = НСтр("en='Conductor 1';ru='Кондуктор 1'");
		Элементы.Сотрудник2.Заголовок = НСтр("en='Conductor 2';ru='Кондуктор 2'");
		Элементы.ЗаданиеКоличествоКмГруз.Заголовок = НСтр("en='Mileage with passengers';ru='Пробег с пассажирами'");
		Элементы.ЗаданиеКоличествоКмГруз.Подсказка = НСтр("en='Mileage with passengers';ru='Пробег с пассажирами'");
	Иначе	
		Элементы.Сотрудник1.Заголовок = НСтр("en='Attendant1';ru='Сопр.лицо 1'");
		Элементы.Сотрудник2.Заголовок = НСтр("en='Attendant2';ru='Сопр.лицо 2'");
		Элементы.ЗаданиеКоличествоКмГруз.Заголовок = НСтр("en='Mileage with cargo';ru='Пробег с грузом'");
		Элементы.ЗаданиеКоличествоКмГруз.Подсказка = НСтр("en='Mileage with cargo';ru='Пробег с грузом'");
	КонецЕсли;
	
	Если уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП() ИЛИ уатОбщегоНазначенияПовтИсп.ВариантПоставкиПРОФ() Тогда
		Если Объект.ВидПЛ = ПредопределенноеЗначение("Перечисление.уатВидыПЛ._3") Тогда
			Элементы.ГруппаВыручка.Видимость = Ложь;
			Элементы.ГруппаБилеты.Видимость = Ложь;
		Иначе
			Если Объект.ВидПЛ = ПредопределенноеЗначение("Перечисление.уатВидыПЛ._6")
				ИЛИ Объект.ВидПЛ = ПредопределенноеЗначение("Перечисление.уатВидыПЛ._6С")
				ИЛИ Объект.ВидПЛ = ПредопределенноеЗначение("Перечисление.уатВидыПЛ._ПА1") Тогда
				
				МодульОбщегоНазначенияПовтИспПроф = ОбщегоНазначенияКлиент.ОбщийМодуль("уатОбщегоНазначенияКлиент_проф");
				
				Если МодульОбщегоНазначенияПовтИспПроф.ИспользоватьУчетБилетовИВыручки() Тогда 
					Элементы.ГруппаВыручка.Видимость = Истина;
					Элементы.ГруппаБилеты.Видимость = Истина;
				Иначе 
					Элементы.ГруппаВыручка.Видимость = Ложь;
					Элементы.ГруппаБилеты.Видимость = Ложь;
				КонецЕсли;
			Иначе
				Элементы.ГруппаВыручка.Видимость = Ложь;
				Элементы.ГруппаБилеты.Видимость = Ложь;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ЗаданиеГруппаЗаказНаТС.Видимость = УчетЗаказовВПЛ;
	Элементы.ЗаданиеНоменклатура.Видимость    = НЕ УчетЗаказовВПЛ;
	
	Если флИспользоватьПланФактВремени Тогда
		Элементы.ЗаданиеГруппаПрибытияДатаФакт.Видимость  = Истина;
		Элементы.ЗаданиеГруппаУбытияДатаФакт.Видимость    = Истина;
		Элементы.ЗаданиеДатаПрибытия.Заголовок            = "Дата (план)";
		Элементы.ЗаданиеДатаУбытия.Заголовок              = "Дата (план)";
	Иначе
		Элементы.ЗаданиеГруппаПрибытияДатаФакт.Видимость  = Ложь;
		Элементы.ЗаданиеГруппаУбытияДатаФакт.Видимость    = Ложь;
		Элементы.ЗаданиеДатаПрибытия.Заголовок            = "Дата";
		Элементы.ЗаданиеДатаУбытия.Заголовок              = "Дата";
	КонецЕсли;
	Если флИспользоватьПланФактВремени И ИспользоватьПланФактВремениМЛ() Тогда
		Элементы.ЗаданиеГруппаЗаполнитьПоМЛПлан.Видимость = Истина;
		Элементы.ЗаданиеЗаполнитьЗаданиеПоМЛ_ПунктыПогрузкиЗаказы.Заголовок = "Пункты погрузки / Заказы (факт)";
		Элементы.ЗаданиеЗаполнитьЗаданиеПоМЛ_ОдиночныеПункты.Заголовок      = "Одиночные пункты (факт)";
		Элементы.ЗаданиеЗаполнитьЗаданиеПоМЛ_ПарныеПункты.Заголовок         = "Парные пункты (факт)";
	Иначе
		Элементы.ЗаданиеГруппаЗаполнитьПоМЛПлан.Видимость = Ложь;
		Элементы.ЗаданиеЗаполнитьЗаданиеПоМЛ_ПунктыПогрузкиЗаказы.Заголовок = "Пункты погрузки / Заказы";
		Элементы.ЗаданиеЗаполнитьЗаданиеПоМЛ_ОдиночныеПункты.Заголовок      = "Одиночные пункты";
		Элементы.ЗаданиеЗаполнитьЗаданиеПоМЛ_ПарныеПункты.Заголовок         = "Парные пункты";
	КонецЕсли;
	
	флДетальныйУчетУсловий = ПолучитьПраваИНастройкиПользователя(Объект.Организация,
		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ДетальныйУчетУсловийРаботы"))
		И ПолучитьЗначениеРеквизита(ПолучитьЗначениеРеквизита(Объект.ТранспортноеСредство, "Модель"), "НаличиеСпидометра");
	Элементы.ЗаданиеНадписьУсловияРаботы.Видимость = флДетальныйУчетУсловий;
	Элементы.ЗаданиеУсловиеРаботы.Видимость        = НЕ флДетальныйУчетУсловий;
	
	Элементы.ФормаЗаполнитьПоМониторингуПриВыезде.Видимость =
		ВидимостьКнопкиЗаполнитьПоМониторингуПриВыезде(Объект.ТранспортноеСредство);
		
	ИдентификаторДействия = "Документ.уатПутевойЛист.УстановитьВидимость";
	#Если Не ТолстыйКлиентОбычноеПриложение Тогда
	уатРаботаСРасширениямиКлиент.ПСМ_ВыполнитьДействияВФорме(ИдентификаторДействия,
	ПолучитьЗначениеРеквизита(ПолучитьЗначениеРеквизита(Объект.ТранспортноеСредство, "ИспользуемаяСистемаGPS"),
		"НаименованиеПС"),,ЭтотОбъект);
	#КонецЕсли
	ОтобразитьКартинкиПодписейОтветственныхЛиц();   
	
	Если ОтображениеВыработкиТССводно Тогда
		Элементы.ОтображениеВыработкиТССводно.Пометка = Истина;
		Элементы.ОтображениеВыработкиТСПодробно.Пометка = Ложь;
	Иначе
		Элементы.ОтображениеВыработкиТССводно.Пометка = Ложь;
		Элементы.ОтображениеВыработкиТСПодробно.Пометка = Истина;  
	КонецЕсли; 
	
	Если ОтображениеВыработкиСотрудниковСводно Тогда 
		Элементы.ОтображениеВыработкиСотрудниковСводно.Пометка = Истина; 
		Элементы.ОтображениеВыработкиСотрудниковПодробно.Пометка = Ложь;
	Иначе    
		Элементы.ОтображениеВыработкиСотрудниковСводно.Пометка = Ложь; 
		Элементы.ОтображениеВыработкиСотрудниковПодробно.Пометка = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВидимостьКнопкиЗаполнитьПоМониторингуПриВыезде(ТС)
		
	Возврат ТС.ИспользуемаяСистемаGPS = Справочники.уатВнешниеСистемы.Omnicomm
			ИЛИ ТС.ИспользуемаяСистемаGPS = Справочники.уатВнешниеСистемы.СКАУТ
			ИЛИ ТС.ИспользуемаяСистемаGPS = Справочники.уатВнешниеСистемы.Wialon
			ИЛИ ТС.ИспользуемаяСистемаGPS = Справочники.уатВнешниеСистемы._1СЦСМ
			ИЛИ (ТС.ИспользуемаяСистемаGPS = Справочники.уатВнешниеСистемы.АвтоГРАФ
			И (ТС.УчетнаяЗаписьСистемыМониторинга.Версия = Перечисления.уатВерсииАвтоГРАФ.АвтоГРАФ_5
				ИЛИ ТС.УчетнаяЗаписьСистемыМониторинга.Версия = Перечисления.уатВерсииАвтоГРАФ.АвтоГРАФ_7))
			ИЛИ ТС.ИспользуемаяСистемаGPS = Справочники.уатВнешниеСистемы.НайтиПоНаименованию("Waliot")
			ИЛИ ТС.ИспользуемаяСистемаGPS = Справочники.уатВнешниеСистемы.НайтиПоНаименованию("Monitor3S");
			
	
КонецФункции

&НаСервере
Процедура НастроитьВидимостьВыработки()
	Элементы.ГруппаЗадание.Видимость = ПолучитьПраваИНастройкиПользователя(Объект.Организация,
		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ПоказыватьЗаданиеПЛ"));
	
	УчетВыработкиПоКонтрагентам = ПолучитьПраваИНастройкиПользователя(Объект.Организация,
		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоКонтрагентам"));
	УчетВыработкиПоПодразделениям = ПолучитьПраваИНастройкиПользователя(Объект.Организация,
		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоПодразделениям"));
	УчетВыработкиПоОбъектамСтроительства = ПолучитьПраваИНастройкиПользователя(Объект.Организация,
		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоОбъектамСтроительства"));
	УчетВыработкиПоМаршрутам = ПолучитьПраваИНастройкиПользователя(Объект.Организация,
		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоМаршрутам"));
	УчетВыработкиПоВидамПеревозок = ПолучитьПраваИНастройкиПользователя(Объект.Организация,
		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоВидамПеревозок"));
	УчетВыработкиПоНаправлениямПеревозок = ПолучитьПраваИНастройкиПользователя(Объект.Организация,
		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоНаправлениямПеревозок"));
		
	Элементы.ВыработкаТСКонтрагент.Видимость = УчетВыработкиПоКонтрагентам;
	Элементы.ВыработкаТСПодразделение.Видимость = УчетВыработкиПоПодразделениям;
	Элементы.ВыработкаТСОбъектСтроительства.Видимость = УчетВыработкиПоОбъектамСтроительства;
	Элементы.ВыработкаТСМаршрут.Видимость = УчетВыработкиПоМаршрутам;
	Элементы.ВыработкаТСВидПеревозки.Видимость = УчетВыработкиПоВидамПеревозок;
	Элементы.ВыработкаТСНаправлениеПеревозки.Видимость = УчетВыработкиПоНаправлениямПеревозок;
	Элементы.ВыработкаСотрудниковКонтрагент.Видимость = УчетВыработкиПоКонтрагентам;
	Элементы.ВыработкаСотрудниковПодразделение.Видимость = УчетВыработкиПоПодразделениям;
	Элементы.ВыработкаСотрудниковОбъектСтроительства.Видимость = УчетВыработкиПоОбъектамСтроительства;
	Элементы.ВыработкаСотрудниковМаршрут.Видимость = УчетВыработкиПоМаршрутам;
	Элементы.ВыработкаСотрудниковВидПеревозки.Видимость = УчетВыработкиПоВидамПеревозок;
	Элементы.ВыработкаСотрудниковНаправлениеПеревозки.Видимость = УчетВыработкиПоНаправлениямПеревозок;
	Элементы.Контрагент.Видимость = УчетВыработкиПоКонтрагентам;
	Элементы.Подразделение.Видимость = УчетВыработкиПоПодразделениям;
	
	Элементы.РасходГСМРасходПоНорме.Доступность = уатПраваИНастройки.уатПраво("РедактированиеНормативногоРасходаГСМ");
КонецПроцедуры

&НаСервере
Процедура УстановитьФорматированиеТочностиОстатковГСМ()
	ТочностьОстТоплива = ПолучитьПраваИНастройкиПользователя(Объект.Организация,
		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ТочностьОстатковТоплива"));
	ТекФормат = "ЧЦ=" + (10-3+ТочностьОстТоплива) + "; ЧДЦ=" + ТочностьОстТоплива;
	
	Элементы.ОстатокТопливаВозврат.Формат                        = ТекФормат;
	Элементы.ОстатокТопливаВозврат.ФорматРедактирования          = ТекФормат;
	Элементы.ОстатокТопливаВыезд.Формат                          = ТекФормат;
	Элементы.ОстатокТопливаВыезд.ФорматРедактирования            = ТекФормат;
	Элементы.РасходГСМОстатокПриВыезде.Формат                    = ТекФормат;
	Элементы.РасходГСМОстатокПриВыезде.ФорматРедактирования      = ТекФормат;
	Элементы.РасходГСМОстатокПриВозвращении.Формат               = ТекФормат;
	Элементы.РасходГСМОстатокПриВозвращении.ФорматРедактирования = ТекФормат;
	Элементы.РасходГСМРасходПоНорме.Формат                       = ТекФормат;
	Элементы.РасходГСМРасходПоНорме.ФорматРедактирования         = ТекФормат;
	Элементы.РасходГСМРасходПоФакту.Формат                       = ТекФормат;
	Элементы.РасходГСМРасходПоФакту.ФорматРедактирования         = ТекФормат;
	Элементы.РасходГСМЭкономия.Формат                            = ТекФормат;
	Элементы.РасходГСМЭкономия.ФорматРедактирования              = ТекФормат;
	Элементы.РасходГСМВыдано.Формат                              = ТекФормат;
	Элементы.РасходГСМВыдано.ФорматРедактирования                = ТекФормат;
	Элементы.РасходГСМСдано.Формат                               = ТекФормат;
	Элементы.РасходГСМСдано.ФорматРедактирования                 = ТекФормат;
	Если Элементы.Найти("РасходГСМРасходПоGPS") <> Неопределено Тогда
		Элементы.РасходГСМРасходПоGPS.Формат               = ТекФормат;
		Элементы.РасходГСМРасходПоGPS.ФорматРедактирования = ТекФормат;
	КонецЕсли;
КонецПроцедуры

// Выполняет обновление таблицы ФОВ при изменении водителей
// Удаляет лишние строки
//
&НаКлиенте
Процедура ОбновитьФОВПриИзмененииВодителя()
	мсвСотрудники = Новый Массив;
	Если ЗначениеЗаполнено(Объект.Водитель1) Тогда
		мсвСотрудники.Добавить(Объект.Водитель1);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Водитель2) Тогда
		мсвСотрудники.Добавить(Объект.Водитель2);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Сотрудник1) Тогда
		мсвСотрудники.Добавить(Объект.Сотрудник1);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Сотрудник2) Тогда
		мсвСотрудники.Добавить(Объект.Сотрудник2);
	КонецЕсли;
	
	мсвСтрокУдаления = Новый Массив;
	Для Каждого ТекСтрока Из Объект.ФактическиОтработанноеВремя Цикл
		Если мсвСотрудники.Найти(ТекСтрока.Сотрудник) = Неопределено Тогда
			мсвСтрокУдаления.Добавить(ТекСтрока);
		КонецЕсли;
	КонецЦикла;
	Для Каждого ТекСтрока Из мсвСтрокУдаления Цикл
		Объект.ФактическиОтработанноеВремя.Удалить(ТекСтрока);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНадписьРассчитан()
	Если Объект.Рассчитан Тогда
		ДекорацияРассчитан = "Рассчитан";
		Элементы.ДекорацияРассчитан.ЦветТекста = Новый Цвет(130, 120, 90);
	Иначе
		ДекорацияРассчитан = "Не рассчитан";
		Элементы.ДекорацияРассчитан.ЦветТекста = WebЦвета.Кирпичный;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьНадписьРассчитанСервер()
	Если Объект.Рассчитан Тогда
		ДекорацияРассчитан = "Рассчитан";
		Элементы.ДекорацияРассчитан.ЦветТекста = Новый Цвет(130, 120, 90);
	Иначе
		ДекорацияРассчитан = "Не рассчитан";
		Элементы.ДекорацияРассчитан.ЦветТекста = WebЦвета.Кирпичный;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНадписьПробег()
	
	// основное ТС
	мПробегПоОдометру = 0;
	Если ЗначениеЗаполнено(Объект.СпидометрВозвращения) Тогда
		мПробегПоОдометру = уатОбщегоНазначения.уатРазностьПоказанийСчетчика(Объект.СпидометрВыезда, Объект.СпидометрВозвращения);
	КонецЕсли;
	НадписьПробег = СформироватьНадписьПробег(Объект.ТранспортноеСредство, мПробегПоОдометру, Объект.ПробегПоGPS);
	
	// оборудование и прицепы
	Для Каждого СтрокаПрицепа Из Объект.Прицепы Цикл 
		пПробегПоОдометру = 0;
		Если ЗначениеЗаполнено(СтрокаПрицепа.СчетчикМЧВозвращения) Тогда
			пПробегПоОдометру = уатОбщегоНазначения.уатРазностьПоказанийСчетчика(СтрокаПрицепа.СчетчикМЧВыезда, СтрокаПрицепа.СчетчикМЧВозвращения);
		КонецЕсли;
		СтрокаПрицепа.НадписьПробег = СформироватьНадписьПробег(СтрокаПрицепа.ТС, пПробегПоОдометру, СтрокаПрицепа.СчетчикМЧGPS);		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНадписьПробегСервер()
	
	УстановитьПривилегированныйРежим(Истина); 
	
	// основное ТС
	мПробегПоОдометру = 0;
	Если ЗначениеЗаполнено(Объект.СпидометрВозвращения) Тогда
		мПробегПоОдометру = уатОбщегоНазначения.уатРазностьПоказанийСчетчика(Объект.СпидометрВыезда, Объект.СпидометрВозвращения);
	КонецЕсли;
	НадписьПробег = СформироватьНадписьПробег(Объект.ТранспортноеСредство, мПробегПоОдометру, Объект.ПробегПоGPS);
		
	// оборудование и прицепы
	Для Каждого СтрокаПрицепа Из Объект.Прицепы Цикл 
		пПробегПоОдометру = 0;
		Если ЗначениеЗаполнено(СтрокаПрицепа.СчетчикМЧВозвращения) Тогда
			пПробегПоОдометру = уатОбщегоНазначения.уатРазностьПоказанийСчетчика(СтрокаПрицепа.СчетчикМЧВыезда, СтрокаПрицепа.СчетчикМЧВозвращения);
		КонецЕсли;
		СтрокаПрицепа.НадписьПробег = СформироватьНадписьПробег(СтрокаПрицепа.ТС, пПробегПоОдометру, СтрокаПрицепа.СчетчикМЧGPS);		
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьФлагПросроченныхДокументовТС()
	Если НЕ ЗначениеЗаполнено(Объект.ДатаВыезда) И НЕ ЗначениеЗаполнено(Объект.ДатаВозвращения) Тогда
		ДатаКонтроля = Объект.Дата;
	Иначе 
		ДатаКонтроля = Макс(Объект.ДатаВыезда, Объект.ДатаВозвращения);
	КонецЕсли;
	
	Элементы.ДекорацияТСПредупреждение.Видимость = ЗначениеЗаполнено(Объект.ТранспортноеСредство) И
		ПросроченныеДокументыТС(ДатаКонтроля,
			ПолучитьПраваИНастройкиПользователя(Объект.Организация, "ДниДоОкончанияДействияДокументовТС"),
			Объект.ТранспортноеСредство) = Истина;
КонецПроцедуры

&НаСервере
Процедура ОбновитьФлагПросроченныхДокументовВодителей(НомерЧленаЭкипажа = 0)
	Если НомерЧленаЭкипажа = 0 Тогда
		ОбновитьФлагПросроченныхДокументовВодителей(1);
		ОбновитьФлагПросроченныхДокументовВодителей(2);
		ОбновитьФлагПросроченныхДокументовВодителей(3);
		ОбновитьФлагПросроченныхДокументовВодителей(4);
		Возврат;
	КонецЕсли;
	
	мДниДоОкончанияДействияДокументовВодителей = ПолучитьПраваИНастройкиПользователя(Объект.Организация, "ДниДоОкончанияДействияДокументовВодителей");
	Если НЕ ЗначениеЗаполнено(Объект.ДатаВыезда) И НЕ ЗначениеЗаполнено(Объект.ДатаВозвращения) Тогда
		ДатаКонтроля = Объект.Дата;
	Иначе 
		ДатаКонтроля = Макс(Объект.ДатаВыезда, Объект.ДатаВозвращения);
	КонецЕсли;
	
	Если НомерЧленаЭкипажа = 1 Тогда
		Элементы.ДекорацияВодитель1Предупреждение.Видимость = ЗначениеЗаполнено(Объект.Водитель1)
			И ПросроченныеДокументыВодителя(ДатаКонтроля, мДниДоОкончанияДействияДокументовВодителей,
				Объект.Водитель1) = Истина;
		Элементы.ДекорацияВодитель1ПредупреждениеПустая.Видимость = НЕ Элементы.ДекорацияВодитель1Предупреждение.Видимость;
		
	ИначеЕсли НомерЧленаЭкипажа = 2 Тогда
		Элементы.ДекорацияВодитель2Предупреждение.Видимость = ЗначениеЗаполнено(Объект.Водитель2)
			И ПросроченныеДокументыВодителя(ДатаКонтроля, мДниДоОкончанияДействияДокументовВодителей,
				Объект.Водитель2) = Истина;
		Элементы.ДекорацияВодитель2ПредупреждениеПустая.Видимость = НЕ Элементы.ДекорацияВодитель2Предупреждение.Видимость;
		
	ИначеЕсли НомерЧленаЭкипажа = 3 Тогда
		Элементы.ДекорацияСотрудник1Предупреждение.Видимость = ЗначениеЗаполнено(Объект.Сотрудник1)
			И ПросроченныеДокументыВодителя(ДатаКонтроля, мДниДоОкончанияДействияДокументовВодителей,
				Объект.Сотрудник1) = Истина;
		Элементы.ДекорацияСотрудник1ПредупреждениеПустая.Видимость = НЕ Элементы.ДекорацияСотрудник1Предупреждение.Видимость;
		
	ИначеЕсли НомерЧленаЭкипажа = 4 Тогда
		Элементы.ДекорацияСотрудник2Предупреждение.Видимость = ЗначениеЗаполнено(Объект.Сотрудник2)
			И ПросроченныеДокументыВодителя(ДатаКонтроля, мДниДоОкончанияДействияДокументовВодителей,
				Объект.Сотрудник2) = Истина;
		Элементы.ДекорацияСотрудник2ПредупреждениеПустая.Видимость = НЕ Элементы.ДекорацияСотрудник2Предупреждение.Видимость;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВремяФОВ()
	Для Каждого ТекСтрокаТЧ Из Объект.ФактическиОтработанноеВремя Цикл
		ТекСтрокаТЧ.ВремяДневноеФормат = ВремяВЧЧ_ММ(ТекСтрокаТЧ.ВремяДневное);
		ТекСтрокаТЧ.ВремяНочноеФормат = ВремяВЧЧ_ММ(ТекСтрокаТЧ.ВремяНочное);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОбновитьВремяФОВ_Сервер()
	Для Каждого ТекСтрокаТЧ Из Объект.ФактическиОтработанноеВремя Цикл
		ТекСтрокаТЧ.ВремяДневноеФормат = ВремяВЧЧ_ММ_Сервер(ТекСтрокаТЧ.ВремяДневное);
		ТекСтрокаТЧ.ВремяНочноеФормат = ВремяВЧЧ_ММ_Сервер(ТекСтрокаТЧ.ВремяНочное);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПараметрВыработкиТСВременный()
	Для Каждого ТекСтрока Из Объект.ВыработкаТС Цикл
		ТекСтрока.ПараметрВыработкиВременный = ПолучитьЗначениеРеквизита(ТекСтрока.ПараметрВыработки, "Временный");
		Если ТекСтрока.ПараметрВыработкиВременный = Истина Тогда
			ТекСтрока.КоличествоФормат = ВремяВЧЧ_ММ(ТекСтрока.Количество);
		Иначе
			ТекСтрока.КоличествоФормат = ТекСтрока.Количество;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПараметрВыработкиСотрудниковВременный()
	Для Каждого ТекСтрока Из Объект.ВыработкаСотрудников Цикл
		ТекСтрока.ПараметрВыработкиВременный = ПолучитьЗначениеРеквизита(ТекСтрока.ПараметрВыработки, "Временный");
		Если ТекСтрока.ПараметрВыработкиВременный = Истина Тогда
			ТекСтрока.КоличествоФормат = ВремяВЧЧ_ММ(ТекСтрока.Количество);
		Иначе
			ТекСтрока.КоличествоФормат = ТекСтрока.Количество;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОбновитьКоличествоВыработкаПодробноСервер()
	Для Каждого ТекСтрока Из Объект.ВыработкаТС Цикл
		ТекСтрока.ПараметрВыработкиВременный = ТекСтрока.ПараметрВыработки.Временный;
		Если ТекСтрока.ПараметрВыработкиВременный = Истина Тогда
			ТекСтрока.КоличествоФормат = уатОбщегоНазначения.уатВремяВЧЧ_ММ(ТекСтрока.Количество);
		Иначе
			ТекСтрока.КоличествоФормат = ТекСтрока.Количество;
		КонецЕсли;
	КонецЦикла;
	Для Каждого ТекСтрока Из Объект.ВыработкаСотрудников Цикл
		ТекСтрока.ПараметрВыработкиВременный = ТекСтрока.ПараметрВыработки.Временный;
		Если ТекСтрока.ПараметрВыработкиВременный = Истина Тогда
			ТекСтрока.КоличествоФормат = уатОбщегоНазначения.уатВремяВЧЧ_ММ(ТекСтрока.Количество);
		Иначе
			ТекСтрока.КоличествоФормат = ТекСтрока.Количество;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОбновитьДинамическиеКолонкиТЧСервер()
	ОбновитьДинамическиеКолонкиРасходГСМСервер();
	ОбновитьКоличествоВыработкаПодробноСервер();
	ОбновитьВремяФОВ_Сервер();
	ОбновитьНадписьПробегСервер(); 
	ОбновитьПрочиеРасходыВсего();
	ОбновитьНадписьСпецРабот();
	ОбновитьНадписьУсловияРаботы();
	ОбновитьЕдиницыИзмеренияПоЗаказамВЗадании();
КонецПроцедуры

&НаСервере
Процедура ОбновитьДинамическиеКолонкиРасходГСМ()
	Для Каждого ТекСтрока Из Объект.РасходГСМ Цикл
		ТекСтрока.ЭтоТЖ           = уатГСМ.ЭтоТехническаяЖидкость(ТекСтрока.ГСМ);
		ТекСтрока.Экономия        = ТекСтрока.РасходПоНорме - ТекСтрока.РасходПоФакту;
		ТекСтрока.ОсновноеТопливо = (ПолучитьЗначениеРеквизита(
			ПолучитьЗначениеРеквизита(Объект.ТранспортноеСредство, "Модель"), "ОсновноеТопливо")
			= ТекСтрока.ГСМ);
		ОстатокПриВозвращенииРазница = ТекСтрока.ОстатокПриВозвращении - 
			(ТекСтрока.ОстатокПриВыезде - ТекСтрока.РасходПоФакту + ТекСтрока.Выдано - ТекСтрока.Сдано); 
		ТекСтрока.ОстатокПриВозвращенииЕстьРазница = Макс(ОстатокПриВозвращенииРазница, - ОстатокПриВозвращенииРазница) > 0.5;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОбновитьДинамическиеКолонкиРасходГСМСервер()
	Для Каждого ТекСтрока Из Объект.РасходГСМ Цикл
		ТекСтрока.ЭтоТЖ           = уатГСМ.ЭтоТехническаяЖидкость(ТекСтрока.ГСМ);
		ТекСтрока.Экономия        = ТекСтрока.РасходПоНорме - ТекСтрока.РасходПоФакту;
		ТекСтрока.ОсновноеТопливо = (Объект.ТранспортноеСредство.Модель.ОсновноеТопливо = ТекСтрока.ГСМ);
	КонецЦикла;
КонецПроцедуры
	
&НаКлиенте
Процедура ОбновитьСписокПластиковыхКарт()
	ТекущиеДанные = Элементы.ЗаправкиГСМ.ТекущиеДанные;
	
	ВладельцыКарт = Новый СписокЗначений();
	ВладельцыКарт.Добавить(ТекущиеДанные.ТС);
	ВладельцыКарт.Добавить(ТекущиеДанные.Водитель);
	СписокПластикКарт = уатОбщегоНазначения.уатСписокТопливныхКарт(ВладельцыКарт, ТекущиеДанные.Дата);
	Элементы.ЗаправкиГСМПластиковаяКарта.СписокВыбора.ЗагрузитьЗначения(СписокПластикКарт.ВыгрузитьЗначения());
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначениеРеквизита(Объект, ИмяРеквизита)
	Возврат уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект, ИмяРеквизита);
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЗначенияРеквизитов(Объект, ИменаРеквизитов)
	Возврат уатОбщегоНазначенияТиповые.ПолучитьЗначенияРеквизитов(Объект, ИменаРеквизитов);
КонецФункции

&НаСервереБезКонтекста
Функция УстановленСчетчикМоточасов(ТС)
	
	Если НЕ ЗначениеЗаполнено(ТС) Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(ТС.Модель) Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Возврат НЕ ТС.Модель.НаличиеСпидометра;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьНадписьПробег(ТС, ПробегОдометр, ПробегМониторинг)

	тПробег = "";
	
	ПробегРазница = ПробегОдометр - ПробегМониторинг;
	
	Если ПробегРазница = 0 Тогда
		тПробег = НСтр("
			| ru = 'Одометр: " 		+ ПробегОдометр 	+ " км;
			|  мониторинг: " 		+ ПробегМониторинг 	+ " км.';
			| en = 'Odometer: " 	+ ПробегОдометр 	+ " km;
			|  monitoring " 		+ ПробегМониторинг 	+ " km.'");
	Иначе
		тПробег = НСтр("
			| ru = 'Одометр: " 		+ ПробегОдометр 	+ " км;
			|  мониторинг: " 		+ ПробегМониторинг 	+ " км;
			|  разница: " 			+ ПробегРазница		+ " км.';
			| en = 'Odometer: " 	+ ПробегОдометр 	+ " km;
			|  monitoring: " 		+ ПробегМониторинг 	+ " km;
			|  difference: " 		+ ПробегРазница 	+ " km.'");
	КонецЕсли;
	
	Если УстановленСчетчикМоточасов(ТС) Тогда
		тПробег = СтрЗаменить(тПробег,"км", "ч");
		тПробег = СтрЗаменить(тПробег,"km", "h");
		тПробег = СтрЗаменить(тПробег,"Одометр", "Счетчик м/ч");
		тПробег = СтрЗаменить(тПробег,"Odometer", "Сounter m/h");		
	КонецЕсли;
	
	тПробег = СтрЗаменить(тПробег, Символы.ПС, "");
	
	Возврат тПробег;
	
КонецФункции

&НаСервере
Процедура УстановитьВидПодменюКарты()
	
	Если Константы.уатИспользоватьЦСМ.Получить() И Константы.уатИспользоватьЭлектронныеКарты.Получить() Тогда 
		Элементы.ФормаГруппаКарты.Вид = ВидГруппыФормы.Подменю;
	Иначе 
		Элементы.ФормаГруппаКарты.Вид = ВидГруппыФормы.ГруппаКнопок;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ВремяВЧЧ_ММ(Время)
	Часы = Цел(Время / 3600);
	//Минуты = Цел((Время - (Часы * 3600))/60)/100;
	Минуты = Окр((Время - (Часы * 3600))/60)/100;
	Результат = Часы + Минуты;
	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Функция ВремяВЧЧ_ММ_Сервер(Время)
	Возврат уатОбщегоНазначения.уатВремяВЧЧ_ММ(Время);
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПраваИНастройкиПользователя(Организация, НастройкаПольз)
	Возврат уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, НастройкаПольз);
КонецФункции

&НаСервере
// Процедура устанавливает дату "Действителен до" документа.
//
Процедура УстановитьДействителенДоПоУмолчанию()
	
	СтруктураОбъектовНастроек = Новый Структура;
	СтруктураОбъектовНастроек.Вставить("Организация",   Объект.Организация);
	СтруктураОбъектовНастроек.Вставить("Подразделение", ПодразделениеНастройки());
	
	мСрокДействияПутевогоЛиста = ПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, ПланыВидовХарактеристик.уатПраваИНастройки.СрокДействияПутевогоЛиста);
	мСрокДействияПутевогоЛиста = ?(мСрокДействияПутевогоЛиста <> Неопределено, мСрокДействияПутевогоЛиста, 0);
	
	Объект.ДействителенДо = КонецДня(Объект.Дата + мСрокДействияПутевогоЛиста * 3600 * 24 + 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализацияДанныхАвтомобиля(Знач Оповещение, флЗаполнитьВодителейПоУмолчанию = Истина)
	
	Если АвтомобильОлд = Объект.ТранспортноеСредство Тогда
		Если Не Оповещение = Неопределено Тогда 
			ВыполнитьОбработкуОповещения(Оповещение);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если НЕ ((Объект.Прицепы.Количество() = 0) И (Объект.РасходГСМ.Количество() = 0) И (Объект.ВыработкаТС.Количество() = 0)) Тогда
		ТекстНСТР = НСтр("en='document is completed table to be cleaned! Continue?';ru='В документе есть заполненные таблицы, которые будут очищены! Продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ИнициализацияДанныхАвтомобиляЗавершение", ЭтотОбъект,
			Новый Структура("Оповещение, флЗаполнитьВодителейПоУмолчанию", Оповещение, флЗаполнитьВодителейПоУмолчанию)),
			ТекстНСТР, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
	КонецЕсли;
	
	ИнициализацияДанныхАвтомобиляФрагмент(Оповещение, флЗаполнитьВодителейПоУмолчанию);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализацияДанныхАвтомобиляЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Оповещение = ДополнительныеПараметры.Оповещение;
    флЗаполнитьВодителейПоУмолчанию = ДополнительныеПараметры.флЗаполнитьВодителейПоУмолчанию;
    
    Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
        Объект.Прицепы.Очистить();
        Объект.РасходГСМ.Очистить();
        Объект.ВыработкаТС.Очистить();
        ВыработкаТСсводная.Очистить();
    Иначе
        Объект.ТранспортноеСредство = АвтомобильОлд;
		Если Не Оповещение = Неопределено Тогда 
			ВыполнитьОбработкуОповещения(Оповещение);
		КонецЕсли;
        Возврат;
    КонецЕсли;
    
    ИнициализацияДанныхАвтомобиляФрагмент(Оповещение, флЗаполнитьВодителейПоУмолчанию);

КонецПроцедуры

&НаКлиенте
Процедура ИнициализацияДанныхАвтомобиляФрагмент(Знач Оповещение, Знач флЗаполнитьВодителейПоУмолчанию)
	
	Если ЗаправкиГСМ.Количество() > 0 Тогда
		ПоказатьПредупреждение(Новый ОписаниеОповещения("ИнициализацияДанныхАвтомобиляФрагментЗавершение", ЭтотОбъект,
		Новый Структура("Оповещение, флЗаполнитьВодителейПоУмолчанию", Оповещение, флЗаполнитьВодителейПоУмолчанию)),
		НСтр("en='It is necessary to change fueling documents!';ru='Необходимо изменить документы заправки ГСМ!'"), 10);
		Возврат;
	КонецЕсли;
	
	ИнициализацияДанныхАвтомобиляФрагментФрагмент(Оповещение, флЗаполнитьВодителейПоУмолчанию);
КонецПроцедуры

&НаКлиенте
Процедура ИнициализацияДанныхАвтомобиляФрагментЗавершение(ДополнительныеПараметры) Экспорт
    
    Оповещение = ДополнительныеПараметры.Оповещение;
    флЗаполнитьВодителейПоУмолчанию = ДополнительныеПараметры.флЗаполнитьВодителейПоУмолчанию;
    
    
    ИнициализацияДанныхАвтомобиляФрагментФрагмент(Оповещение, флЗаполнитьВодителейПоУмолчанию);

КонецПроцедуры

&НаКлиенте
Процедура ИнициализацияДанныхАвтомобиляФрагментФрагмент(Знач Оповещение, Знач флЗаполнитьВодителейПоУмолчанию)
	
	Если Объект.РаботаНаДвухВидахТоплива
		И НЕ ЗначениеЗаполнено(ПолучитьЗначениеРеквизита(ПолучитьЗначениеРеквизита(
			Объект.ТранспортноеСредство, "Модель"), "ДополнительноеТопливо")) Тогда
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
			"Флаг ""Работа на двух видах топлива"" снят автоматически, т.к. выбранное ТС работает на одном виде топлива");
	КонецЕсли;
		
	ИнициализацияДанныхАвтомобиляСервер(флЗаполнитьВодителейПоУмолчанию);
	
	ПроверитьПредыдущийПЛНеРассчитан();
	УстановитьВидимость();
	УстановитьВозможностьРедактированияДанныхПоGPS();
	
	Если Оповещение <> Неопределено Тогда 
		ВыполнитьОбработкуОповещения(Оповещение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализацияДанныхАвтомобиляСервер(флЗаполнитьВодителейПоУмолчанию)
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияТС = уатОбщегоНазначения.МестонахождениеТС(Объект.ТранспортноеСредство, Объект.ДатаВыезда).Организация;
		Если Объект.Организация <> ОрганизацияТС Тогда
			Объект.Организация = ОрганизацияТС;
			ПриИзмененииОрганизации();
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ТранспортноеСредство.ЗаполнятьПутевойЛистСпискомОборудования Тогда
		мСоставТС = ?(мКопированиеДокумента, ПолучитьМассивПрицепов(ПараметрОбъектКопирования), уатОбщегоНазначения.уатСоставТС(Объект.ТранспортноеСредство));
	ИначеЕсли ЗначениеЗаполнено(мМаршрутныйЛистОснование) Тогда
		мСоставТС = ПолучитьМассивПрицеповПоМаршрутномуЛисту(мМаршрутныйЛистОснование)
	Иначе
		мСоставТС = Новый Массив;
	КонецЕсли;
	
	Объект.РежимРаботыТС = Неопределено;
	ОснРежРаботыТС = Объект.ТранспортноеСредство.ОсновнойРежимРаботы;
	Если ЗначениеЗаполнено(ОснРежРаботыТС) Тогда
		Объект.РежимРаботыТС = ОснРежРаботыТС;
		УстановитьДатыВыездаВозвращения();
	КонецЕсли;
	
	Объект.ВидСообщения = Объект.ТранспортноеСредство.ОсновнойВидСообщения;
	Объект.ВидПеревозки = Объект.ТранспортноеСредство.ОсновнойВидПеревозки;

	ДокОбъект = РеквизитФормыВЗначение("Объект");
	ДокОбъект.ИнициализацияДанныхАвтомобиля(ОстатокТопливаВыезд, мСоставТС, флЗаполнитьВодителейПоУмолчанию);
	ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
	
	ИнициализацияЗП();
	
	ОстатокТопливаВозвратПриИзмененииСервер();
	
	ПредВидПЛ = Объект.ВидПЛ;
	ОснВидПЛпоТС = Объект.ТранспортноеСредство.ОсновнойВидПЛ;
	Если ЗначениеЗаполнено(ОснВидПЛпоТС) Тогда
		Объект.ВидПЛ = ОснВидПЛпоТС;
	Иначе
		СтруктураОбъектовНастроек = Новый Структура;
		СтруктураОбъектовНастроек.Вставить("Организация", Объект.Организация);
		СтруктураОбъектовНастроек.Вставить("Подразделение", ПодразделениеНастройки());
		СтруктураОбъектовНастроек.Вставить("Пользователь", ПользователиКлиентСервер.АвторизованныйПользователь());
		Объект.ВидПЛ = ПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, ПланыВидовХарактеристик.уатПраваИНастройки.ОсновнойВидПЛ);
	КонецЕсли;	
	Если Объект.ВидПЛ <> ПредВидПЛ Тогда
		ВидПЛПриИзмененииСервер();
	КонецЕсли;	
	
	Если Объект.ТранспортноеСредство.Модель.НаличиеСпидометра Тогда
		Элементы.СпидометрВыезда.Заголовок = НСтр("en='Odometer';ru='Одометр'");
		Элементы.РасходГСМПробег.Заголовок = НСтр("en='Mileage';ru='Пробег'");
	Иначе
		Элементы.СпидометрВыезда.Заголовок = НСтр("en='Counter m/h';ru='Счетчик м/ч'");
		Элементы.РасходГСМПробег.Заголовок = НСтр("en='M/hours';ru='М/часы'");
	КонецЕсли;
	
	Объект.РаботаНаДвухВидахТоплива = ЗначениеЗаполнено(Объект.ТранспортноеСредство.Модель.ДополнительноеТопливо);
	Элементы.РаботаНаДвухВидахТоплива.Доступность    = Объект.РаботаНаДвухВидахТоплива;
	Элементы.РасходГСМПробег.Видимость               = Объект.РаботаНаДвухВидахТоплива;
	Элементы.ПереключательДваВидаТоплива.Видимость   = Объект.РаботаНаДвухВидахТоплива;
	Элементы.РаботаНаДвухВидахТоплива.Заголовок      = ?(Объект.РаботаНаДвухВидахТоплива,
		"Два вида топлива:", "Два вида топлива");
	
	ПодразделениеТС = Объект.ТранспортноеСредство.Подразделение;
	Если Объект.Подразделение <> ПодразделениеТС Тогда
		Объект.Подразделение = ПодразделениеТС;
		ПодразделениеПриИзмененииСервер();
	КонецЕсли;
	
	ПересчетВыданногоГСМСервер();
	ОбновитьДинамическиеКолонкиТЧСервер();
	
	Если Объект.ТранспортноеСредство.АвтоматическиСписыватьРасходТопливаНаЗапуск И Объект.КоличествоЗапусков = 0 Тогда
		Объект.КоличествоЗапусков = 1;
	КонецЕсли;
	
	Объект.Гараж = Объект.ТранспортноеСредство.Гараж;
	
	АвтомобильОлд = Объект.ТранспортноеСредство;
КонецПроцедуры
	
&НаСервереБезКонтекста
Функция ПолучитьМассивПрицепов(СсылкаПЛ)
	Возврат СсылкаПЛ.Прицепы.ВыгрузитьКолонку("ТС");
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьМассивПрицеповПоМаршрутномуЛисту(МаршрутныйЛист)
	
	мсвПрицепы = Новый Массив;
	
	ПрицепыМаршрутногоЛиста = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(МаршрутныйЛист, "Прицеп1, Прицеп2");
	Если ЗначениеЗаполнено(ПрицепыМаршрутногоЛиста.Прицеп1)
		И мсвПрицепы.Найти(ПрицепыМаршрутногоЛиста.Прицеп1) = Неопределено Тогда
		мсвПрицепы.Добавить(ПрицепыМаршрутногоЛиста.Прицеп1);
	КонецЕсли;
	Если ЗначениеЗаполнено(ПрицепыМаршрутногоЛиста.Прицеп2)
		И мсвПрицепы.Найти(ПрицепыМаршрутногоЛиста.Прицеп2) = Неопределено Тогда
		мсвПрицепы.Добавить(ПрицепыМаршрутногоЛиста.Прицеп2);
	КонецЕсли;
	
	Возврат мсвПрицепы
	
КонецФункции

// НомерПрицепа - 0- для прицепов в ТЧ Прицепы, 1,2 - для прицепов в ТЧ Задание
&НаКлиенте
Процедура ИнициализацияДанныхПрицепа(ПрицепОлд_, Прицеп, НомерПрицепа = 0)
	Если ЗначениеЗаполнено(Прицеп) И Прицеп = ПрицепОлд_ Тогда
		Возврат;
	КонецЕсли;	
	
	Если НомерПрицепа = 0 Тогда
		// удаление строк с прицепом из ТЧ РасходГСМ
		мсвСтрокУдаления = Новый Массив;
		Для Каждого ТекСтрока Из Объект.РасходГСМ Цикл
			Если ТекСтрока.ТС = ПрицепОлд_ ИЛИ ТекСтрока.ТС = Прицеп Тогда
				мсвСтрокУдаления.Добавить(ТекСтрока);
			КонецЕсли;
		КонецЦикла;
		Для Каждого ТекСтрокаУдалить Из мсвСтрокУдаления Цикл
			Объект.РасходГСМ.Удалить(ТекСтрокаУдалить);
		КонецЦикла;
		
		Если ЗначениеЗаполнено(Прицеп) Тогда
			ИнициализацияДанныхПрицепаСервер(Прицеп);
		КонецЕсли;
	Иначе
		ТекСтрокаЗадание = Элементы.Задание.ТекущиеДанные;
		флУдалитьПрицеп = Истина;
		Для Каждого ТекЗадание Из Объект.Задание Цикл
			Если ТекЗадание.НомерСтроки <> ТекСтрокаЗадание.НомерСтроки Тогда
				Если ТекЗадание.Прицеп1 = ПрицепОлд_ ИЛИ ТекЗадание.Прицеп2 = ПрицепОлд_ Тогда
					флУдалитьПрицеп = Ложь;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		мсвСтрокУдаления = Новый Массив;
		Для Каждого ТекСтрока Из Объект.РасходГСМ Цикл
			Если флУдалитьПрицеп И ТекСтрока.ТС = ПрицепОлд_ Тогда
				мсвСтрокУдаления.Добавить(ТекСтрока);
			КонецЕсли;
		КонецЦикла;
		Для Каждого ТекСтрокаУдалить Из мсвСтрокУдаления Цикл
			Объект.РасходГСМ.Удалить(ТекСтрокаУдалить);
		КонецЦикла;
		
		Если ЗначениеЗаполнено(Прицеп)
			И Объект.РасходГСМ.НайтиСтроки(Новый Структура("ТС", Прицеп)).Количество()=0 Тогда
			ИнициализацияДанныхПрицепаСервер(Прицеп);
		КонецЕсли;
	КонецЕсли;
	
	ПрицепОлд_ = Прицеп;
КонецПроцедуры

&НаСервере
Процедура ИнициализацияДанныхПрицепаСервер(Прицеп)
	Если ЗначениеЗаполнено(Прицеп.Модель.ОсновноеТопливо) И Прицеп.Модель.НаличиеТопливногоБака = Истина Тогда
		НоваяСтрокаГСМ = Объект.РасходГСМ.Добавить();
		НоваяСтрокаГСМ.Активен = Истина;
		НоваяСтрокаГСМ.ТС = Прицеп;
		НоваяСтрокаГСМ.ГСМ = Прицеп.Модель.ОсновноеТопливо;
		НоваяСтрокаГСМ.ОстатокПриВыезде = уатОбщегоНазначения.уатОстатокГСМнаТС(Объект.ДатаВыезда, Прицеп,
			Прицеп.Модель.ОсновноеТопливо, Объект.Ссылка);
		НоваяСтрокаГСМ.ОстатокПриВозвращении = 0;
	КонецЕсли;
	
	// добавляем остатки ТЖ при выезде
	тблОстаткиТЖнаТС = уатПутевыеЛисты.ОстаткиТЖнаТС(Прицеп, Объект.ДатаВыезда);
	Для Каждого ТекСтрокаТЖ Из тблОстаткиТЖнаТС Цикл
		НоваяСтрокаГСМ 					= Объект.РасходГСМ.Добавить();
		НоваяСтрокаГСМ.ТС 				= Прицеп;
		НоваяСтрокаГСМ.ГСМ 				= ТекСтрокаТЖ.ТЖ;
		НоваяСтрокаГСМ.ОстатокПриВыезде = ТекСтрокаТЖ.Количество;
		НоваяСтрокаГСМ.ОстатокПриВозвращении = 0;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ИнициализацияЗП()
	мсвСотрудникиЗП = Новый Массив;
	Если ЗначениеЗаполнено(Объект.Водитель1) Тогда мсвСотрудникиЗП.Добавить(Объект.Водитель1); КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Водитель2) Тогда мсвСотрудникиЗП.Добавить(Объект.Водитель2); КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Сотрудник1) Тогда мсвСотрудникиЗП.Добавить(Объект.Сотрудник1); КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Сотрудник2) Тогда мсвСотрудникиЗП.Добавить(Объект.Сотрудник2); КонецЕсли;
	
	// Удалим из З/п строки с сотрудниками, не содержащимися в шапке документа (водитель 1,2 или сотрудник 1,2)
	Сч = Объект.Зарплата.Количество()-1;
	Пока Сч >= 0 Цикл
		ТекСтрока = Объект.Зарплата[Сч];
		Если мсвСотрудникиЗП.Найти(ТекСтрока.Сотрудник) = Неопределено Тогда
			Объект.Зарплата.Удалить(ТекСтрока);
		КонецЕсли;
		Сч = Сч - 1;
	КонецЦикла;
	
	Объект.НачислятьЗПВодителю1   = ЗначениеЗаполнено(Объект.Водитель1);
	Объект.НачислятьЗПВодителю2   = ЗначениеЗаполнено(Объект.Водитель2);
	Объект.НачислятьЗПСотруднику1 = ЗначениеЗаполнено(Объект.Сотрудник1);
	Объект.НачислятьЗПСотруднику2 = ЗначениеЗаполнено(Объект.Сотрудник2);
КонецПроцедуры

&НаСервере
Процедура ВывестиТаблицуВыработкаСотрудников()
	ОписаниеТипаРезультатРаботы = Новый ОписаниеТипов("Число");
	
	// Привилегированный режим, чтобы не было ошибок при получении ФИО сотрудников из запрещенных организаций.
	УстановитьПривилегированныйРежим(Истина);
	
	// определяем, нужно ли перестраивать таблицу (изменять состав колонок)
	списСотрудниковПЛ = Новый СписокЗначений;
	Если ЗначениеЗаполнено(Объект.Водитель1) Тогда
		списСотрудниковПЛ.Добавить(уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(Объект.Водитель1));
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Водитель2) Тогда
		списСотрудниковПЛ.Добавить(уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(Объект.Водитель2));
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Сотрудник1) Тогда
		списСотрудниковПЛ.Добавить(уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(Объект.Сотрудник1));
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Сотрудник2) Тогда
		списСотрудниковПЛ.Добавить(уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(Объект.Сотрудник2));
	КонецЕсли;
	списСотрудниковТЧ = Новый СписокЗначений;
	Для Каждого ТекЭлементКолонка Из ПолучитьРеквизиты("ВыработкаСотрудниковСводная") Цикл
		Если Найти(ТекЭлементКолонка.Имя, "ПараметрВыработки") = 0 Тогда
			списСотрудниковТЧ.Добавить(ТекЭлементКолонка.Заголовок);
		КонецЕсли;
	КонецЦикла;
		
	ПерестраиватьТаблицу = НЕ ОбщегоНазначения.КоллекцииИдентичны(списСотрудниковПЛ, списСотрудниковТЧ);
		
	Если ПерестраиватьТаблицу Тогда
		МассивКолонокДобавить = Новый Массив;
		МассивКолонокУдалить = Новый Массив;
		МассивЭлементовУдалить = Новый Массив;
		
		Для Каждого ТекЭлементКолонка Из Элементы.ВыработкаСотрудниковСводная.ПодчиненныеЭлементы Цикл
			Если Найти(ТекЭлементКолонка.Имя, "ПараметрВыработки") = 0 Тогда
				МассивКолонокУдалить.Добавить(ТекЭлементКолонка.ПутьКДанным);
				МассивЭлементовУдалить.Добавить(ТекЭлементКолонка); 
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ТекЭлем Из МассивЭлементовУдалить Цикл
			Элементы.Удалить(ТекЭлем);
		КонецЦикла;
	КонецЕсли;

	ТабличноеПолеВыработкаСотрудников = Новый ТаблицаЗначений;
	ТабличноеПолеВыработкаСотрудников.Колонки.Добавить("ПараметрВыработки");
	ТабличноеПолеВыработкаСотрудников.Колонки.Добавить("ПараметрВыработкиВременный");
	
	мСоответствиеВыработкаСотрудников = Новый Структура;
	мСчетчикКолонок = 0;
	Если ЗначениеЗаполнено(Объект.Водитель1) Тогда
		мСчетчикКолонок = мСчетчикКолонок + 1;
		ИмяКолонки = "К" + Строка(мСчетчикКолонок);
		ЗаголовокКолонки = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(Объект.Водитель1);
		
		мСоответствиеВыработкаСотрудников.Вставить(ИмяКолонки, Объект.Водитель1);
		
		Если ПерестраиватьТаблицу Тогда
			МассивКолонокДобавить.Добавить(Новый РеквизитФормы(ИмяКолонки, ОписаниеТипаРезультатРаботы,
				"ВыработкаСотрудниковСводная", ЗаголовокКолонки));
		КонецЕсли;
			
		ТабличноеПолеВыработкаСотрудников.Колонки.Добавить(ИмяКолонки, ОписаниеТипаРезультатРаботы, , 100);
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Объект.Водитель2) Тогда
		мСчетчикКолонок = мСчетчикКолонок + 1;
		ИмяКолонки = "К" + Строка(мСчетчикКолонок);
		ЗаголовокКолонки = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(Объект.Водитель2);
		
		мСоответствиеВыработкаСотрудников.Вставить(ИмяКолонки, Объект.Водитель2);
		
		Если ПерестраиватьТаблицу Тогда
			МассивКолонокДобавить.Добавить(Новый РеквизитФормы(ИмяКолонки, ОписаниеТипаРезультатРаботы,
				"ВыработкаСотрудниковСводная", ЗаголовокКолонки));
		КонецЕсли;
				
		ТабличноеПолеВыработкаСотрудников.Колонки.Добавить(ИмяКолонки, ОписаниеТипаРезультатРаботы,	, 100);
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Объект.Сотрудник1) Тогда
		мСчетчикКолонок = мСчетчикКолонок + 1;
		ИмяКолонки = "К" + Строка(мСчетчикКолонок);
		ЗаголовокКолонки = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(Объект.Сотрудник1);
		
		мСоответствиеВыработкаСотрудников.Вставить(ИмяКолонки, Объект.Сотрудник1);
		
		Если ПерестраиватьТаблицу Тогда
			МассивКолонокДобавить.Добавить(Новый РеквизитФормы(ИмяКолонки, ОписаниеТипаРезультатРаботы,
				"ВыработкаСотрудниковСводная", ЗаголовокКолонки));
		КонецЕсли;
				
		ТабличноеПолеВыработкаСотрудников.Колонки.Добавить(ИмяКолонки, ОписаниеТипаРезультатРаботы, , 100);
	КонецЕсли;	
	
	Если ЗначениеЗаполнено(Объект.Сотрудник2) Тогда
		мСчетчикКолонок = мСчетчикКолонок + 1;
		ИмяКолонки = "К" + Строка(мСчетчикКолонок);
		ЗаголовокКолонки = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(Объект.Сотрудник2);
		
		мСоответствиеВыработкаСотрудников.Вставить(ИмяКолонки, Объект.Сотрудник2);
		
		Если ПерестраиватьТаблицу Тогда
			МассивКолонокДобавить.Добавить(Новый РеквизитФормы(ИмяКолонки, ОписаниеТипаРезультатРаботы,
				"ВыработкаСотрудниковСводная", ЗаголовокКолонки));
		КонецЕсли;
				
		ТабличноеПолеВыработкаСотрудников.Колонки.Добавить(ИмяКолонки, ОписаниеТипаРезультатРаботы, , 100);
	КонецЕсли;	
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ПерестраиватьТаблицу Тогда
		ИзменитьРеквизиты(МассивКолонокДобавить, МассивКолонокУдалить);
	КонецЕсли;
			
	мПараметрВыработки = уатОбщегоНазначения.уатПараметрыВыработкиВодителей();
	Для Каждого ТекСтрока Из мПараметрВыработки Цикл
		НовСтр = ТабличноеПолеВыработкаСотрудников.Добавить();
		НовСтр.ПараметрВыработки = ТекСтрока.ПараметрВыработки;
		НовСтр.ПараметрВыработкиВременный = ТекСтрока.Временный;
	КонецЦикла;	
	
	ВыработкаСотрудниковСвернутая1 = Объект.ВыработкаСотрудников.Выгрузить().Скопировать();
	ВыработкаСотрудниковСвернутая1.Свернуть("Сотрудник, ПараметрВыработки", "Количество");
	
	Для счКолонок = 1 По ТабличноеПолеВыработкаСотрудников.Колонки.Количество() - 1 Цикл
		Для каждого ТекСтр Из ТабличноеПолеВыработкаСотрудников Цикл
			Для каждого ТекСтрРезультат Из ВыработкаСотрудниковСвернутая1 Цикл
				Если ТекСтрРезультат.ПараметрВыработки = ТекСтр.ПараметрВыработки Тогда
					Для каждого ТекСоответствие Из мСоответствиеВыработкаСотрудников Цикл
						мСотрудник = ТекСоответствие.Значение;
						мКлюч = ТекСоответствие.Ключ;
						Если ТабличноеПолеВыработкаСотрудников.Колонки[счКолонок].Имя = мКлюч и
								мСотрудник = ТекСтрРезультат.Сотрудник Тогда
							Если ТекСтр.ПараметрВыработкиВременный Тогда
								ТекСтр[счКолонок] = ВремяВЧЧ_ММ_Сервер(ТекСтрРезультат.Количество);
							Иначе	
								ТекСтр[счКолонок] = ТекСтрРезультат.Количество;
							КонецЕсли;	
						КонецЕсли;	
					КонецЦикла;	
				КонецЕсли;	
			КонецЦикла;	
		КонецЦикла;	
	КонецЦикла;	
	
	//ТабличноеПолеВыработкаСотрудников.Сортировать("ПараметрВыработки");
	
	Если ПерестраиватьТаблицу Тогда
		Для Каждого Колонка Из ТабличноеПолеВыработкаСотрудников.Колонки Цикл
			Если Найти(Колонка.Имя, "ПараметрВыработки") <> 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НовыйЭлемент = Элементы.Добавить("ВыработкаСотрудниковСводная_" + Колонка.Имя, Тип("ПолеФормы"),
				Элементы.ВыработкаСотрудниковСводная);
			НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
			НовыйЭлемент.ПутьКДанным = "ВыработкаСотрудниковСводная." + Колонка.Имя;
			НовыйЭлемент.ТолькоПросмотр = Ложь;
			НовыйЭлемент.УстановитьДействие("ПриИзменении", "КоличествоВыработкиСотрудниковПриИзменении");
			НовыйЭлемент.Ширина = 15;
		КонецЦикла;
	КонецЕсли;
	
	ВыработкаСотрудниковСводная.Очистить();
	Для Каждого ТекСтрока Из ТабличноеПолеВыработкаСотрудников Цикл
		НовСтр = ВыработкаСотрудниковСводная.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, ТекСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиТаблицуВыработкаТС()
	ОписаниеТипаРезультатРаботы = Новый ОписаниеТипов("Число");
	
	// определяем, нужно ли перестраивать таблицу (изменять состав колонок)
	списТСПЛ = Новый СписокЗначений;
	Если ЗначениеЗаполнено(Объект.ТранспортноеСредство) Тогда
		списТСПЛ.Добавить(Строка(Объект.ТранспортноеСредство));
	КонецЕсли;
	Для каждого ТекСтрПрицепы Из Объект.Прицепы Цикл
		Если ЗначениеЗаполнено(ТекСтрПрицепы.ТС) Тогда
			списТСПЛ.Добавить(Строка(ТекСтрПрицепы.ТС));
		КонецЕсли;
	КонецЦикла;
	Для Каждого ТекСтрокаЗадания Из Объект.Задание Цикл
		Если ЗначениеЗаполнено(ТекСтрокаЗадания.Прицеп1) Тогда
			Прицеп1Представление = Строка(ТекСтрокаЗадания.Прицеп1);
			Если списТСПЛ.НайтиПоЗначению(Прицеп1Представление) = Неопределено Тогда
				списТСПЛ.Добавить(Прицеп1Представление);
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекСтрокаЗадания.Прицеп2) Тогда
			Прицеп2Представление = Строка(ТекСтрокаЗадания.Прицеп2);
			Если списТСПЛ.НайтиПоЗначению(Прицеп2Представление) = Неопределено Тогда
				списТСПЛ.Добавить(Прицеп2Представление);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	списТСПЛ.СортироватьПоЗначению();
	
	списТСТЧ = Новый СписокЗначений;
	Для Каждого ТекЭлементКолонка Из ПолучитьРеквизиты("ВыработкаТССводная") Цикл
		Если Найти(ТекЭлементКолонка.Имя, "ПараметрВыработки") = 0 Тогда
			списТСТЧ.Добавить(ТекЭлементКолонка.Заголовок);
		КонецЕсли;
	КонецЦикла;
	списТСТЧ.СортироватьПоЗначению();
		
	ПерестраиватьТаблицу = НЕ ОбщегоНазначения.КоллекцииИдентичны(списТСПЛ, списТСТЧ);
	
	Если ПерестраиватьТаблицу Тогда
		МассивКолонокДобавить = Новый Массив;
		МассивКолонокУдалить = Новый Массив;
		МассивЭлементовУдалить = Новый Массив;
		
		Для Каждого ТекЭлементКолонка Из Элементы.ВыработкаТСсводная.ПодчиненныеЭлементы Цикл
			Если Найти(ТекЭлементКолонка.Имя, "ПараметрВыработки") = 0 Тогда
				МассивКолонокУдалить.Добавить(ТекЭлементКолонка.ПутьКДанным);
				МассивЭлементовУдалить.Добавить(ТекЭлементКолонка); 
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ТекЭлем Из МассивЭлементовУдалить Цикл
			Элементы.Удалить(ТекЭлем);
		КонецЦикла;
	КонецЕсли;
	
	ТабличноеПолеВыработкаТС = Новый ТаблицаЗначений;
	ТабличноеПолеВыработкаТС.Колонки.Добавить("ПараметрВыработки");
	ТабличноеПолеВыработкаТС.Колонки.Добавить("ПараметрВыработкиВременный");
	
	мСоответствиеВыработкаТС = Новый Структура;
	
	мСчетчикКолонок = 0;
	Если ЗначениеЗаполнено(Объект.ТранспортноеСредство) Тогда
		мСчетчикКолонок = мСчетчикКолонок + 1;
		ИмяКолонки = "К" + Строка(мСчетчикКолонок);
		ЗаголовокКолонки = Строка(Объект.ТранспортноеСредство);
		
		мСоответствиеВыработкаТС.Вставить(ИмяКолонки, Объект.ТранспортноеСредство);
		Если ПерестраиватьТаблицу Тогда
			МассивКолонокДобавить.Добавить(Новый РеквизитФормы(ИмяКолонки, ОписаниеТипаРезультатРаботы, "ВыработкаТСсводная",
				ЗаголовокКолонки));
		КонецЕсли;
			
		ТабличноеПолеВыработкаТС.Колонки.Добавить(ИмяКолонки, ОписаниеТипаРезультатРаботы, ЗаголовокКолонки, 100);
	КонецЕсли;	
	
	мсвПрицепы = Новый Массив;
	Для каждого ТекСтрПрицепы Из Объект.Прицепы Цикл
		мсвПрицепы.Добавить(ТекСтрПрицепы.ТС);
	КонецЦикла;
	Для Каждого ТекСтрокаЗадания Из Объект.Задание Цикл
		Если ЗначениеЗаполнено(ТекСтрокаЗадания.Прицеп1) И мсвПрицепы.Найти(ТекСтрокаЗадания.Прицеп1) = Неопределено Тогда
			мсвПрицепы.Добавить(ТекСтрокаЗадания.Прицеп1);
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекСтрокаЗадания.Прицеп2) И мсвПрицепы.Найти(ТекСтрокаЗадания.Прицеп2) = Неопределено Тогда
			мсвПрицепы.Добавить(ТекСтрокаЗадания.Прицеп2);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ТекПрицеп Из мсвПрицепы Цикл
		Попытка
			мСчетчикКолонок = мСчетчикКолонок + 1;
			ИмяКолонки = "К" + Строка(мСчетчикКолонок);
			ЗаголовокКолонки = Строка(ТекПрицеп);
		
			мСоответствиеВыработкаТС.Вставить(ИмяКолонки, ТекПрицеп);
			Если ПерестраиватьТаблицу Тогда
				МассивКолонокДобавить.Добавить(Новый РеквизитФормы(ИмяКолонки, ОписаниеТипаРезультатРаботы, "ВыработкаТСсводная",
					ЗаголовокКолонки));
			КонецЕсли;
				
			ТабличноеПолеВыработкаТС.Колонки.Добавить(ИмяКолонки, ОписаниеТипаРезультатРаботы, ЗаголовокКолонки, 100);
		Исключение
			ТекстНСТР = СтрШаблон(НСтр("en='Error when filling output table vehicle and mechanisms. Trailer/equipment ""%1""';ru='Ошибка при заполнении таблицы выработки ТС и механизмов. Прицеп/оборудование ""%1""'"), ТекПрицеп);
			ТекстНСТР = ТекстНСТР + ": 
				|" + ОписаниеОшибки();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		КонецПопытки;
	КонецЦикла;
	
	Если ПерестраиватьТаблицу Тогда
		ИзменитьРеквизиты(МассивКолонокДобавить, МассивКолонокУдалить);
	КонецЕсли;
		
	мПараметрВыработки = уатПутевыеЛисты.уатПараметрыВыработкиТС();
	Для Каждого ТекСтрока Из мПараметрВыработки Цикл
		НовСтр = ТабличноеПолеВыработкаТС.Добавить();
		НовСтр.ПараметрВыработки = ТекСтрока.ПараметрВыработки;
		НовСтр.ПараметрВыработкиВременный = ТекСтрока.Временный;
	КонецЦикла;
	
	ВыработкаТССвернутая1 = Объект.ВыработкаТС.Выгрузить().Скопировать();
	ВыработкаТССвернутая1.Свернуть("ТС, ПараметрВыработки", "Количество");
	
	Для счКолонок = 1 По ТабличноеПолеВыработкаТС.Колонки.Количество() - 1 Цикл
		Для каждого ТекСтр Из ТабличноеПолеВыработкаТС Цикл
			Для каждого ТекСтрРезультат Из ВыработкаТССвернутая1 Цикл
				Если ТекСтрРезультат.ПараметрВыработки = ТекСтр.ПараметрВыработки Тогда
					Для каждого ТекСоответствие Из мСоответствиеВыработкаТС Цикл
						мТС = ТекСоответствие.Значение;
						мКлюч = ТекСоответствие.Ключ;
						Если ТабличноеПолеВыработкаТС.Колонки[счКолонок].Имя = мКлюч и мТС = ТекСтрРезультат.ТС Тогда
							Если ТекСтр.ПараметрВыработкиВременный Тогда
								ТекСтр[счКолонок] = ВремяВЧЧ_ММ_Сервер(ТекСтрРезультат.Количество);
							Иначе
								ТекСтр[счКолонок] = ТекСтрРезультат.Количество;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	//ТабличноеПолеВыработкаТС.Сортировать("ПараметрВыработки");
	
	Если ПерестраиватьТаблицу Тогда
		Для Каждого Колонка Из ТабличноеПолеВыработкаТС.Колонки Цикл
			Если Найти(Колонка.Имя, "ПараметрВыработки") <> 0 Тогда
				Продолжить;
			КонецЕсли;
			
			НовыйЭлемент = Элементы.Добавить("ВыработкаТССводная_" + Колонка.Имя, Тип("ПолеФормы"), Элементы.ВыработкаТСсводная);
			НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
			НовыйЭлемент.ПутьКДанным = "ВыработкаТСсводная." + Колонка.Имя;
			НовыйЭлемент.ТолькоПросмотр = Ложь;
			НовыйЭлемент.УстановитьДействие("ПриИзменении", "КоличествоВыработкиТСПриИзменении");
			НовыйЭлемент.Ширина = 15;
		КонецЦикла;
	КонецЕсли;
	
	ВыработкаТСсводная.Очистить();
	Для Каждого ТекСтрока Из ТабличноеПолеВыработкаТС Цикл
		НовСтр = ВыработкаТСсводная.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтр, ТекСтрока);
	КонецЦикла;
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ВывестиТаблицуЗП(Форма, Сотрудник = Неопределено)
	Если Сотрудник = Неопределено Тогда
		Форма.ЗарплатаСводная.Очистить();
		ВывестиТаблицуЗП(Форма, Форма.Объект.Водитель1);
		ВывестиТаблицуЗП(Форма, Форма.Объект.Водитель2);
		ВывестиТаблицуЗП(Форма, Форма.Объект.Сотрудник1);
		ВывестиТаблицуЗП(Форма, Форма.Объект.Сотрудник2);
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Сотрудник) Тогда
		Возврат;
	КонецЕсли;
	
	мСумма = 0;
	Для Каждого ТекСтрока Из Форма.Объект.Зарплата Цикл
		Если ТекСтрока.Сотрудник = Сотрудник Тогда
			мСумма = мСумма + ТекСтрока.Сумма;
		КонецЕсли;	
	КонецЦикла;
	
	мсвСтрок = Форма.ЗарплатаСводная.НайтиСтроки(Новый Структура("Сотрудник", Сотрудник));
	Если мсвСтрок.Количество() = 0 Тогда
		СтрПоиска = Форма.ЗарплатаСводная.Добавить();
		СтрПоиска.Сотрудник = Сотрудник;
	Иначе
		СтрПоиска = мсвСтрок[0];
	КонецЕсли;
	Если Сотрудник = Форма.Объект.Водитель1 Тогда
		СтрПоиска.НачислятьЗарплату = Форма.Объект.НачислятьЗПВодителю1;
	ИначеЕсли Сотрудник = Форма.Объект.Водитель2 Тогда
		СтрПоиска.НачислятьЗарплату = Форма.Объект.НачислятьЗПВодителю2;
	ИначеЕсли Сотрудник = Форма.Объект.Сотрудник1 Тогда
		СтрПоиска.НачислятьЗарплату = Форма.Объект.НачислятьЗПСотруднику1;
	ИначеЕсли Сотрудник = Форма.Объект.Сотрудник2 Тогда
		СтрПоиска.НачислятьЗарплату = Форма.Объект.НачислятьЗПСотруднику2;
	КонецЕсли;
	СтрПоиска.Сумма = мСумма;
КонецПроцедуры

&НаКлиенте
// Процедура заполняет таблицу списком заправок
//
Процедура ВывестиТаблицуЗаправок()
	
	ЗаправкиГСМ.Очистить();
	
	мсвЗаправок = уатПутевыеЛисты.ПолучитьЗаправкиДляПЛ(Объект.Ссылка);
	
	// Если есть хотя бы одна заправка не со склада и по талонам, делаем видимыми столбцы сумма и валюта
	мВидимостьСуммы = Ложь;
	
	Для Каждого ТекСтрока Из мсвЗаправок Цикл
		НоваяСтрока = ЗаправкиГСМ.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		
		Если ТекСтрока.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаНаличные")
			ИЛИ ТекСтрока.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПоставщик")
			ИЛИ ТекСтрока.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКарта")
			Тогда
			
			мВидимостьСуммы = Истина;
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьДинамическиеКолонкиРасходГСМ();
	ОбновитьЗаправкиВсего();
	ОбновитьКартинкиЗаправкиГСМ();
	
	Если Элементы.ЗаправкиГСМСумма.Видимость <> мВидимостьСуммы Тогда
		Элементы.ЗаправкиГСМВалюта.Видимость = мВидимостьСуммы;
		Элементы.ЗаправкиГСМСумма.Видимость = мВидимостьСуммы;
		Элементы.ЗаправкиГСМЦена.Видимость = мВидимостьСуммы;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиТаблицуЗаправокСервер()
	ЗаправкиГСМ.Очистить();
	
	мсвЗаправок = уатПутевыеЛисты.ПолучитьЗаправкиДляПЛ(Объект.Ссылка);
	
	// Если есть хотя бы одна заправка не со склада и по талонам, делаем видимыми столбцы сумма и валюта
	мВидимостьСуммы = Ложь;
	
	Для Каждого ТекСтрока Из мсвЗаправок Цикл
		НоваяСтрока = ЗаправкиГСМ.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		
		Если ТекСтрока.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаНаличные")
			ИЛИ ТекСтрока.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПоставщик")
			ИЛИ ТекСтрока.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКарта")
			Тогда
			
			мВидимостьСуммы = Истина;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ВывестиТаблицуСливов()
	СливыГСМ.Очистить();
	
	мсвСтрок = ПолучитьТаблицуСливовСервер(Объект.Ссылка);
	Для Каждого ТекСтрока Из мсвСтрок Цикл
		НоваяСтрока = СливыГСМ.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ВывестиТаблицуСливовСервер()
	СливыГСМ.Очистить();
	
	мсвСтрок = ПолучитьТаблицуСливовСервер(Объект.Ссылка);
	Для Каждого ТекСтрока Из мсвСтрок Цикл
		НоваяСтрока = СливыГСМ.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТаблицуСливовСервер(ПЛ)
	
	тблСливы     = уатОбщегоНазначения.уатПолучитьСливыДляПЛ(ПЛ);
	тблСливыНаТС = уатОбщегоНазначения.уатПолучитьСливыНаТСДляПЛ(ПЛ);
	
	мсвРез = Новый Массив();
	
	Для Каждого ТекСтрока Из тблСливы Цикл
		СтруктураСтроки = Новый Структура;
		Для Каждого ТекКолонка Из тблСливы.Колонки Цикл
			СтруктураСтроки.Вставить(ТекКолонка.Имя, ТекСтрока[ТекКолонка.Имя]);
		КонецЦикла;
		СтруктураСтроки.Вставить("Картинка", ?(ТекСтрока.Проведен, 1, ?(ТекСтрока.ПометкаУдаления, 2, 0)));
		
		мсвРез.Добавить(СтруктураСтроки);
	КонецЦикла;
	
	Для Каждого ТекСтрока Из тблСливыНаТС Цикл
		// Проверка на дубли сливов, они возникают когда выполняется слив с ТС на оборудование или наоборот
		Если тблСливы.Найти(ТекСтрока.Ссылка, "Ссылка") <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураСтроки = Новый Структура();
		Для Каждого ТекКолонка Из тблСливыНаТС.Колонки Цикл
			СтруктураСтроки.Вставить(ТекКолонка.Имя, ТекСтрока[ТекКолонка.Имя]);
		КонецЦикла;
		СтруктураСтроки.Вставить("Картинка", ?(ТекСтрока.Проведен, 1, ?(ТекСтрока.ПометкаУдаления, 2, 0)));
		
		мсвРез.Добавить(СтруктураСтроки);
	КонецЦикла;
	
	Возврат мсвРез;
	
КонецФункции

&НаСервере
Процедура ОбновитьКартинкиЗаправкиГСМ()
	Для Каждого ТекСтрока Из ЗаправкиГСМ Цикл
		Если ТекСтрока.Ссылка.Проведен Тогда
			ТекСтрока.Картинка = 1;
		ИначеЕсли ТекСтрока.Ссылка.ПометкаУдаления Тогда
			ТекСтрока.Картинка = 2;
		Иначе
			ТекСтрока.Картинка = 0;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОбновитьКартинкиСливыГСМ()
	Для Каждого ТекСтрока Из СливыГСМ Цикл
		Если ТекСтрока.Проведен Тогда
			ТекСтрока.Картинка = 1;
		ИначеЕсли ТекСтрока.ПометкаУдаления Тогда
			ТекСтрока.Картинка = 2;
		Иначе
			ТекСтрока.Картинка = 0;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаправкиВсего()
	Для Каждого СтрокаТабличнойЧасти Из ЗаправкиГСМ Цикл
		СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма
			+ ?(СтрокаТабличнойЧасти.УчитыватьНДС И НЕ СтрокаТабличнойЧасти.СуммаВключаетНДС, СтрокаТабличнойЧасти.СуммаНДС, 0);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОбновитьПрочиеРасходыВсего()
	Для Каждого СтрокаТабличнойЧасти Из Объект.ПрочиеРасходы Цикл
		СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма
			+ ?(СтрокаТабличнойЧасти.УчитыватьНДС И НЕ СтрокаТабличнойЧасти.СуммаВключаетНДС, СтрокаТабличнойЧасти.СуммаНДС, 0);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПересчетОстаткаГСМ(ТекКолонкаИмя = "РасходПоФакту", ТекСтрока = Неопределено)
	Если ТекСтрока = Неопределено Тогда
		ТекСтрока = Элементы.РасходГСМ.ТекущиеДанные;
	КонецЕсли;
	
	Если ТекКолонкаИмя = "ОстатокПриВыезде" Тогда
		ПересчетРасходФактВСтроке(ТекСтрока);
	ИначеЕсли ТекКолонкаИмя = "ОстатокПриВозвращении" Тогда
		ПересчетРасходФактВСтроке(ТекСтрока);
	Иначе //Если ТекКолонкаИмя = "РасходПоФакту" Тогда
		ТекСтрока.ОстатокПриВозвращении = ТекСтрока.ОстатокПриВыезде - ТекСтрока.РасходПоФакту + ТекСтрока.Выдано - ТекСтрока.Сдано;
		ОстатокПриВозвращенииРазница = ТекСтрока.ОстатокПриВозвращении - 
			(ТекСтрока.ОстатокПриВыезде - ТекСтрока.РасходПоФакту + ТекСтрока.Выдано - ТекСтрока.Сдано); 
		ТекСтрока.ОстатокПриВозвращенииЕстьРазница = Макс(ОстатокПриВозвращенииРазница, - ОстатокПриВозвращенииРазница) > 0.5;
	КонецЕсли;
	
	Если Объект.ТранспортноеСредство = ТекСтрока.ТС Тогда
		Если ПолучитьЗначениеРеквизита(ПолучитьЗначениеРеквизита(Объект.ТранспортноеСредство, "Модель"),
				"ОсновноеТопливо") = ТекСтрока.ГСМ Тогда
			ОстатокТопливаВыезд = ТекСтрока.ОстатокПриВыезде;
			ОстатокТопливаВозврат = ТекСтрока.ОстатокПриВозвращении;
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьДинамическиеКолонкиРасходГСМ();
КонецПроцедуры

&НаСервере
Процедура ПересчетВыданногоГСМСервер()
	уатПутевыеЛисты.ПересчетВыданногоГСМ(Объект, ЗаправкиГСМ);
КонецПроцедуры

&НаСервере
Процедура ПересчетСданногоГСМСервер()
	ТочностьОстатковТоплива = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
		ПланыВидовХарактеристик.уатПраваИНастройки.ТочностьОстатковТоплива);
		
	Для Каждого ТекСтрока Из Объект.РасходГСМ Цикл
		мМассивСтрокСливовГСМ = СливыГСМ.НайтиСтроки(Новый Структура("ТС", ТекСтрока.ТС));
		
		тзАналогиГСМ = уатОбщегоНазначения.уатПолучитьАналогиГСМ(ТекСтрока.ГСМ);
		
		чСдано = 0;
		Для сч = 0 По мМассивСтрокСливовГСМ.Количество() - 1 Цикл
			// если заправка не проведена - не учитываем
			Если НЕ мМассивСтрокСливовГСМ[сч].Ссылка.Проведен Тогда
				Продолжить;
			КонецЕсли;
			
			// слив ГСМ или его аналога
			мГСМ		= мМассивСтрокСливовГСМ[сч].ГСМ;
			мКоличество = мМассивСтрокСливовГСМ[сч].Количество;
			
			Если тзАналогиГСМ.Найти(мГСМ, "Аналог") <> Неопределено Или	мГСМ = ТекСтрока.ГСМ Тогда
				чСдано = чСдано + Окр(мКоличество, ТочностьОстатковТоплива);
			КонецЕсли;	
		КонецЦикла;	
		
		Если ТекСтрока.Сдано <> Окр(чСдано, 3) Тогда
			ТекСтрока.Сдано = чСдано;
		КонецЕсли;
		
		ПересчетРасходФактВСтрокеСервер(ТекСтрока);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПересчетРасходФактВСтроке(СтрокаРасходГСМ)
	СтрокаРасходГСМ.РасходПоФакту = СтрокаРасходГСМ.ОстатокПриВыезде - СтрокаРасходГСМ.ОстатокПриВозвращении
		+ СтрокаРасходГСМ.Выдано - СтрокаРасходГСМ.Сдано; 
КонецПроцедуры

&НаСервере
Процедура ПересчетРасходФактВСтрокеСервер(СтрокаРасходГСМ)
	СтрокаРасходГСМ.РасходПоФакту = СтрокаРасходГСМ.ОстатокПриВыезде - СтрокаРасходГСМ.ОстатокПриВозвращении
		+ СтрокаРасходГСМ.Выдано - СтрокаРасходГСМ.Сдано;
КонецПроцедуры

&НаСервере
Функция РасчетИтоговСервер(Отказ, флЗаписывать = Ложь, ТекстСообщОшибки = "")
	ВывестиТаблицуЗаправокСервер();
	ПересчетВыданногоГСМСервер();
	ВывестиТаблицуСливовСервер();
	ПересчетСданногоГСМСервер();
	
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	Рез = ДокОбъект.РасчетИтогов(Отказ, флЗаписывать);
	ДокОбъект.ПроверитьТаблицуВыработкиТС(ТекстСообщОшибки);
	ДокОбъект.ПроверитьТаблицуПростоев(ТекстСообщОшибки);
	ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
	
	ОбновитьДинамическиеКолонкиТЧСервер();
	
	ВывестиТаблицуВыработкаТС();
	ВывестиТаблицуВыработкаСотрудников();
	
	ВывестиТаблицуЗП(ЭтотОбъект);
	
	Если Объект.РасчетФактРасходаГСМ = Перечисления.уатВидыРасчетаРасходаГСМ.ПоНорме Или Объект.РасчетФактРасходаГСМ = Перечисления.уатВидыРасчетаРасходаГСМ.ПоGPS Тогда
		ОснТопливо = ПолучитьЗначениеРеквизита(ПолучитьЗначениеРеквизита(Объект.ТранспортноеСредство, "Модель"), "ОсновноеТопливо");
		Для Каждого ТекСтрока Из Объект.РасходГСМ Цикл
			Если ТекСтрока.Активен Тогда
				Если ТекСтрока.ТС = Объект.ТранспортноеСредство И ТекСтрока.ГСМ = ОснТопливо Тогда
					ОстатокТопливаВозврат = ТекСтрока.ОстатокПриВозвращении;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Рез;
КонецФункции

&НаСервере
Процедура УстановитьДатыВыездаВозвращения(флЗаполнитьЭкипаж = Ложь)
	уатПутевыеЛисты.УстановитьДатыВыездаВозвращения(Объект);
	ДатаВыездаПриИзмененииСервер(флЗаполнитьЭкипаж);
	ДатаВозвращенияПриИзмененииСервер(флЗаполнитьЭкипаж);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПросроченныеДокументыВодителя(ТекДата, мДниДоОкончанияДействияДокументовВодителей, Водитель)
	Возврат уатОбщегоНазначения.уатПросроченныеДокументыВодителя(ТекДата, мДниДоОкончанияДействияДокументовВодителей,
		Водитель);
КонецФункции

&НаСервереБезКонтекста
Функция ПросроченныеДокументыТС(ТекДата, мДниДоОкончанияДействияДокументовТС, ТС)
	Возврат уатОбщегоНазначения.уатПросроченныеДокументыТС(ТекДата, мДниДоОкончанияДействияДокументовТС, ТС);
КонецФункции

&НаСервере
Процедура СохранитьНастройкиСервер()
	УстановитьПривилегированныйРежим(Истина);
	
	ХранилищеОбщихНастроек.Сохранить("Документ.уатПутевойЛист", "РедактироватьЗаправкуГСМВДиалоге",
		РедактироватьЗаправкуГСМВДиалоге);
		
	НастройкиФормы = ХранилищеНастроекДанныхФорм.Загрузить("Документ.уатПутевойЛист.Форма.ФормаДокумента", "ОбщиеНастройки");
	Если (НастройкиФормы = Неопределено ИЛИ ТипЗнч(НастройкиФормы) <> Тип("Соответствие")) Тогда
		НастройкиФормы = Новый Соответствие;
	КонецЕсли;
	НастройкаОтображенияФормы = ХранилищеСистемныхНастроек.Загрузить("Документ.уатПутевойЛист.Форма.ФормаДокумента/НастройкиФормы");
	НастройкиФормы.Вставить(ВидПЛДоИзменения,НастройкаОтображенияФормы);
	ХранилищеНастроекДанныхФорм.Сохранить("Документ.уатПутевойЛист.Форма.ФормаДокумента", "ОбщиеНастройки", НастройкиФормы);
КонецПроцедуры

&НаСервере
Функция ПроверитьЗаполнениеДокумента()
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	Возврат ДокОбъект.ПроверитьЗаполнение();
КонецФункции

&НаСервереБезКонтекста
Функция ВалютаРегламентированногоУчета()
	Возврат Константы.ВалютаРегламентированногоУчета.Получить();
КонецФункции

&НаСервереБезКонтекста
Функция ПравоДоступаИзменениеЗаправкиГСМ()
	Возврат ПравоДоступа("Изменение", Метаданные.Документы.уатЗаправкаГСМ);
КонецФункции

&НаСервереБезКонтекста
Функция ПравоДоступаИзменениеСливыГСМ()
	Возврат ПравоДоступа("Изменение", Метаданные.Документы.уатСливГСМ);
КонецФункции

&НаКлиенте
Процедура РассчитатьСуммуНДС(СтрокаТабличнойЧасти)
	СтрокаТабличнойЧасти.СуммаНДС = уатОбщегоНазначенияТиповые.уатРассчитатьСуммуНДС(СтрокаТабличнойЧасти.Сумма,
		мДокументЗаправкаГСМ.УчитыватьНДС, мДокументЗаправкаГСМ.СуммаВключаетНДС,
		уатОбщегоНазначенияТиповые.уатПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
КонецПроцедуры

// Функция возвращает подразделение, используемое для получения настроек
//
&НаСервере
Функция ПодразделениеНастройки()
	Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
		Рез = Объект.Подразделение;
	Иначе
		Рез = уатОбщегоНазначения.МестонахождениеТС(Объект.ТранспортноеСредство).Подразделение;
	КонецЕсли;
	
	Возврат Рез;
КонецФункции

&НаКлиенте
Процедура СформироватьСписокВыбораТСвЗаправкахГСМ()
	Элементы.ЗаправкиГСМТС.СписокВыбора.Очистить();
	Элементы.СливыГСМТС.СписокВыбора.Очистить();
	
	Если ЗначениеЗаполнено(Объект.ТранспортноеСредство) Тогда
		Элементы.ЗаправкиГСМТС.СписокВыбора.Добавить(Объект.ТранспортноеСредство);
		Элементы.СливыГСМТС.СписокВыбора.Добавить(Объект.ТранспортноеСредство);
	КонецЕсли;
	Для Каждого ТекСтрока Из Объект.Прицепы Цикл
		Если ЗначениеЗаполнено(ТекСтрока.ТС) И Элементы.ЗаправкиГСМТС.СписокВыбора.НайтиПоЗначению(ТекСтрока.ТС) = Неопределено Тогда
			Элементы.ЗаправкиГСМТС.СписокВыбора.Добавить(ТекСтрока.ТС);
			Элементы.СливыГСМТС.СписокВыбора.Добавить(ТекСтрока.ТС);
		КонецЕсли;
	КонецЦикла;
	Для Каждого ТекСтрока Из Объект.Задание Цикл
		Если ЗначениеЗаполнено(ТекСтрока.Прицеп1) И Элементы.ЗаправкиГСМТС.СписокВыбора.НайтиПоЗначению(ТекСтрока.Прицеп1) = Неопределено Тогда
			Элементы.ЗаправкиГСМТС.СписокВыбора.Добавить(ТекСтрока.Прицеп1);
			Элементы.СливыГСМТС.СписокВыбора.Добавить(ТекСтрока.Прицеп1);
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекСтрока.Прицеп2) И Элементы.ЗаправкиГСМТС.СписокВыбора.НайтиПоЗначению(ТекСтрока.Прицеп2) = Неопределено Тогда
			Элементы.ЗаправкиГСМТС.СписокВыбора.Добавить(ТекСтрока.Прицеп2);
			Элементы.СливыГСМТС.СписокВыбора.Добавить(ТекСтрока.Прицеп2);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура СформироватьСписокВыбораТСвЗаправкахГСМСервер()
	Элементы.ЗаправкиГСМТС.СписокВыбора.Очистить();
	Элементы.СливыГСМТС.СписокВыбора.Очистить();
	
	Если ЗначениеЗаполнено(Объект.ТранспортноеСредство) Тогда
		Элементы.ЗаправкиГСМТС.СписокВыбора.Добавить(Объект.ТранспортноеСредство);
		Элементы.СливыГСМТС.СписокВыбора.Добавить(Объект.ТранспортноеСредство);
	КонецЕсли;
	Для Каждого ТекСтрока Из Объект.Прицепы Цикл
		Если ЗначениеЗаполнено(ТекСтрока.ТС) И Элементы.ЗаправкиГСМТС.СписокВыбора.НайтиПоЗначению(ТекСтрока.ТС) = Неопределено Тогда
			Элементы.ЗаправкиГСМТС.СписокВыбора.Добавить(ТекСтрока.ТС);
			Элементы.СливыГСМТС.СписокВыбора.Добавить(ТекСтрока.ТС);
		КонецЕсли;
	КонецЦикла;
	Для Каждого ТекСтрока Из Объект.Задание Цикл
		Если ЗначениеЗаполнено(ТекСтрока.Прицеп1) И Элементы.ЗаправкиГСМТС.СписокВыбора.НайтиПоЗначению(ТекСтрока.Прицеп1) = Неопределено Тогда
			Элементы.ЗаправкиГСМТС.СписокВыбора.Добавить(ТекСтрока.Прицеп1);
			Элементы.СливыГСМТС.СписокВыбора.Добавить(ТекСтрока.Прицеп1);
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекСтрока.Прицеп2) И Элементы.ЗаправкиГСМТС.СписокВыбора.НайтиПоЗначению(ТекСтрока.Прицеп2) = Неопределено Тогда
			Элементы.ЗаправкиГСМТС.СписокВыбора.Добавить(ТекСтрока.Прицеп2);
			Элементы.СливыГСМТС.СписокВыбора.Добавить(ТекСтрока.Прицеп2);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОбновитьКэшПравПоGPS()
	
	ОргЗапретПоказанийОдометра   = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация, "ЗапретитьРучноеИзменениеПоказанийОдометра");
	ПользЗапретПоказанийОдометра = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ПользователиКлиентСервер.АвторизованныйПользователь(), "ЗапретитьРучноеИзменениеПоказанийОдометра");
	ЗапретПоказанийОдометра      = ?(НЕ ОргЗапретПоказанийОдометра И НЕ ПользЗапретПоказанийОдометра, Ложь, Истина);
	
	ОргЗапретОстатковТоплива   = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация, "ЗапретитьРучноеИзменениеОстатковТоплива");
	ПользЗапретОстатковТоплива = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ПользователиКлиентСервер.АвторизованныйПользователь(), "ЗапретитьРучноеИзменениеОстатковТоплива");
	ЗапретОстатковТоплива	   = ?(НЕ ОргЗапретОстатковТоплива И НЕ ПользЗапретОстатковТоплива, Ложь, Истина);
	
	мКэшПравGPS_ЗапретитьРучноеИзменениеПоказанийОдометра = ЗапретПоказанийОдометра;
	мКэшПравGPS_ЗапретитьРучноеИзменениеОстатковТоплива = ЗапретОстатковТоплива;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВозможностьРедактированияДанныхПоGPS()
	Если НЕ ЗначениеЗаполнено(Объект.ТранспортноеСредство) Тогда
		Возврат;
	КонецЕсли;
	
	ИспользуетGPS = уатОбщегоНазначения_проф.уатПроверитьИспользованиеGPS(Объект.ТранспортноеСредство);
	
	Если мКэшПравGPS_ЗапретитьРучноеИзменениеПоказанийОдометра И ИспользуетGPS Тогда
		Элементы.СпидометрВыезда.ТолькоПросмотр = Истина;
		Элементы.СпидометрВозвращения.ТолькоПросмотр = Истина;
		Элементы.ФормаРассчитатьСпидометрПоЗаданию.Доступность = Ложь;
	Иначе
		Элементы.СпидометрВыезда.ТолькоПросмотр = Ложь;
		Элементы.СпидометрВозвращения.ТолькоПросмотр = Ложь;	
		Элементы.ФормаРассчитатьСпидометрПоЗаданию.Доступность = Истина;
	КонецЕсли;
	
	Если мКэшПравGPS_ЗапретитьРучноеИзменениеОстатковТоплива И ИспользуетGPS Тогда
		Элементы.ОстатокТопливаВыезд.ТолькоПросмотр = Истина;
		Элементы.ОстатокТопливаВозврат.ТолькоПросмотр = Истина;
	Иначе
		Элементы.ОстатокТопливаВыезд.ТолькоПросмотр = Ложь;
		Элементы.ОстатокТопливаВозврат.ТолькоПросмотр = Ложь;
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьГСМПоGPSСервер(РезультатСтруктура = Неопределено, флВыезд = Ложь)
	ПараметрыРасчетаГСМ = уатПутевыеЛисты.ПолучитьПараметрыРасчетаРасходаГСМ(Объект);
	
	уатМониторинг.РассчитатьГСМПоМониторингу(Объект, ПараметрыРасчетаГСМ, РезультатСтруктура, флВыезд);

	Если флВыезд И ПараметрыРасчетаГСМ.Свойство("ОстатокТопливаВыезд") Тогда
		ОстатокТопливаВыезд = ПараметрыРасчетаГСМ.ОстатокТопливаВыезд;
	ИначеЕсли НЕ флВыезд И ПараметрыРасчетаГСМ.Свойство("ОстатокТопливаВозврат") Тогда
		ОстатокТопливаВозврат = ПараметрыРасчетаГСМ.ОстатокТопливаВозврат;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокВыбораЭкипажа()
	Элементы.Водитель1.СписокВыбора.Очистить();
	Элементы.Водитель2.СписокВыбора.Очистить();
	Элементы.Сотрудник1.СписокВыбора.Очистить();
	Элементы.Сотрудник2.СписокВыбора.Очистить();
	
	ЭкипажТССписок = уатЗащищенныеФункцииСервер.ЭкипажТССписок(Объект.ТранспортноеСредство);
	ЭкипажТССписок_Количество = ЭкипажТССписок.Количество();
	
	Элементы.Водитель1.КнопкаВыпадающегоСписка = (ЭкипажТССписок_Количество > 0);
	Элементы.Водитель2.КнопкаВыпадающегоСписка = (ЭкипажТССписок_Количество > 0);
	Элементы.Сотрудник1.КнопкаВыпадающегоСписка = (ЭкипажТССписок_Количество > 0);
	Элементы.Сотрудник2.КнопкаВыпадающегоСписка = (ЭкипажТССписок_Количество > 0);
	
	Если ЭкипажТССписок_Количество = 0 Тогда	
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекСотр Из ЭкипажТССписок Цикл
		Элементы.Водитель1.СписокВыбора.Добавить(ТекСотр.Значение);
		Элементы.Водитель2.СписокВыбора.Добавить(ТекСотр.Значение);
		Элементы.Сотрудник1.СписокВыбора.Добавить(ТекСотр.Значение);
		Элементы.Сотрудник2.СписокВыбора.Добавить(ТекСотр.Значение);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокВыбораЭкипажаСервер()
	Элементы.Водитель1.СписокВыбора.Очистить();
	Элементы.Водитель2.СписокВыбора.Очистить();
	Элементы.Сотрудник1.СписокВыбора.Очистить();
	Элементы.Сотрудник2.СписокВыбора.Очистить();
	
	ЭкипажТССписок = уатЗащищенныеФункцииСервер.ЭкипажТССписок(Объект.ТранспортноеСредство);
	ЭкипажТССписок_Количество = ЭкипажТССписок.Количество();
	
	Элементы.Водитель1.КнопкаВыпадающегоСписка = (ЭкипажТССписок_Количество > 0);
	Элементы.Водитель2.КнопкаВыпадающегоСписка = (ЭкипажТССписок_Количество > 0);
	Элементы.Сотрудник1.КнопкаВыпадающегоСписка = (ЭкипажТССписок_Количество > 0);
	Элементы.Сотрудник2.КнопкаВыпадающегоСписка = (ЭкипажТССписок_Количество > 0);
	
	Если ЭкипажТССписок_Количество = 0 Тогда	
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекСотр Из ЭкипажТССписок Цикл
		Элементы.Водитель1.СписокВыбора.Добавить(ТекСотр.Значение);
		Элементы.Водитель2.СписокВыбора.Добавить(ТекСотр.Значение);
		Элементы.Сотрудник1.СписокВыбора.Добавить(ТекСотр.Значение);
		Элементы.Сотрудник2.СписокВыбора.Добавить(ТекСотр.Значение);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКолонокЗаданияПоСохраненнымНастройкам(НастройкаОтображенияФормы)
	УстановитьПривилегированныйРежим(Истина);
	ХранилищеСистемныхНастроек.Сохранить("Документ.уатПутевойЛист.Форма.ФормаДокумента/НастройкиФормы",,НастройкаОтображенияФормы);
КонецПроцедуры

&НаСервере
Процедура УстановитьСистемныеНастройки()
	НастройкиФормы = ВосстановитьНастройки();
	НастройкиНекорректны = (НастройкиФормы = Неопределено ИЛИ ТипЗнч(НастройкиФормы) <> Тип("Соответствие"));
	Если Не НастройкиНекорректны Тогда
		НастройкаОтображенияФормы = НастройкиФормы.Получить(Объект.ВидПЛ);
		Если НастройкаОтображенияФормы <> Неопределено Тогда
			УстановитьВидимостьКолонокЗаданияПоСохраненнымНастройкам(НастройкаОтображенияФормы);
		Иначе
			УстановитьВидимостьКолонокЗаданияПоСохраненнымНастройкам(Неопределено);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВосстановитьНастройки()
	НастройкиФормы = ХранилищеНастроекДанныхФорм.Загрузить("Документ.уатПутевойЛист.Форма.ФормаДокумента", "ОбщиеНастройки");
	Возврат НастройкиФормы;
КонецФункции

// Проверка просрочена ли пластиковая карта
//
&НаСервереБезКонтекста
Функция ПластиковаяКартаПросрочена(ПластиковаяКарта, ДатаЗаправки)
	Если ПластиковаяКарта.ДатаОкончания <> Дата(1,1,1) Тогда
		Если ПластиковаяКарта.ДатаОкончания < ДатаЗаправки Тогда 
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

&НаСервере
Функция ПолучитьВыработкуПоАгрегатам()
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	МассивАгрегатов = ДокОбъект.ВывестиПараметрВыработкиПользовательскихАгрегатов();
	Возврат МассивАгрегатов;
КонецФункции

&НаКлиенте
Процедура УстановитьОтборОбъектСтроительства(ТекСтрокаЗадания)
	Если ЗначениеЗаполнено(ТекСтрокаЗадания.Контрагент) Тогда
		СписКонтрагентов = Новый СписокЗначений;
		СписКонтрагентов.Добавить(ТекСтрокаЗадания.Контрагент);
		СписКонтрагентов.Добавить(ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка"));
		ПарамВыбора = Новый ПараметрВыбора("Отбор.Контрагент", СписКонтрагентов);
		мсв = Новый Массив;
		мсв.Добавить(ПарамВыбора);
		Элементы.ЗаданиеОбъектСтроительства.ПараметрыВыбора = Новый ФиксированныйМассив(мсв); //Новый ФиксированныйМассив(мсв)
	Иначе
		Элементы.ЗаданиеОбъектСтроительства.ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПредыдущийПЛНеРассчитан()
	Если Объект.Рассчитан Тогда
		Возврат;
	КонецЕсли;
	
	ВидКонтроля = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация, "ЗапретПроведенияПЛеслиПредыдущийПЛнеРассчитан");
	Если ВидКонтроля = ПредопределенноеЗначение("Перечисление.уатВидыКонтроля.Разрешать") Тогда
		Возврат;
	КонецЕсли;
	
	ПредПЛ_номер = Неопределено;
	ПредПЛ_дата = Неопределено;
	Если уатОбщегоНазначения.ПредыдущийПЛНеРассчитан(Объект.ТранспортноеСредство, Объект.ДатаВыезда, ПредПЛ_номер, ПредПЛ_дата, Объект.Ссылка) Тогда
		Объект.СпидометрВыезда = 0;
		Для Каждого ТекСтрока Из Объект.РасходГСМ Цикл
			Если ТекСтрока.ТС = Объект.ТранспортноеСредство Тогда
				ТекСтрока.ОстатокПриВыезде = 0;
				ПересчетОстаткаГСМ("ОстатокПриВыезде", ТекСтрока);
			КонецЕсли;
		КонецЦикла;
		
		ТекстНСТР = НСтр("en='Previous waybill No. %1 from %2 is not calculated."
"The remaining fuel and odometer readings (counter) at the exit are reset!';ru='Предыдущий путевой лист №%1 от %2 не рассчитан."
"Остаток топлива и показания одометра (счетчика) при выезде обнулены!'");
		ТекстНСТР = СтрШаблон(ТекстНСТР, ПредПЛ_номер, Формат(ПредПЛ_дата, "ДФ=dd.MM.yyyy"));
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПревышениеУровняТопливаВБаке()
	ПоказатьПредупреждение(Неопределено, ПредупреждениеПревышениеУровняТопливаВБаке);
	//уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ПредупреждениеПревышениеУровняТопливаВБаке);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИспользоватьУчетЗатрат()
	Возврат ПолучитьФункциональнуюОпцию("уатИспользоватьУчетДоходовИРасходов");
КонецФункции

&НаСервере
Процедура ОбновитьНадписьСпецРабот()
	
	КоличСпецработ = 5;
	Для Каждого ТекСтрока Из Объект.Задание Цикл 
		НадписьСпецРаботы = "";
		
		Для Сч = 1 По КоличСпецработ Цикл
			ТекПараметрВыработки = ТекСтрока["СпецРабота" + Сч];
			ТекВыработка = ТекСтрока["КоличествоСпецРаботы" + Сч];
			
			Если ЗначениеЗаполнено(ТекПараметрВыработки) И ЗначениеЗаполнено(ТекВыработка) Тогда 
				Если ТекПараметрВыработки.ОтображениеВВидеФлага Тогда
					ТекНадписьДопВыработка = ?(ТекВыработка = 0, "Нет", "Да");
				ИначеЕсли ТекПараметрВыработки.Временный Тогда
					ТекНадписьДопВыработка = Формат(уатОбщегоНазначения.уатВремяВЧЧ_ММ(ТекВыработка), "ЧДЦ=2; ЧРД=:; ЧГ=");
				Иначе
					ТекНадписьДопВыработка = Формат(ТекВыработка, "ЧЦ=7; ЧДЦ=1");
				КонецЕсли;
				
				НадписьСпецРаботы = НадписьСпецРаботы + " / " + ТекНадписьДопВыработка;
			КонецЕсли;
		КонецЦикла;
		
		Если НадписьСпецРаботы = "" Тогда 
			ТекСтрока.НадписьСпецРаботы = "Редактировать";
		Иначе
			ТекСтрока.НадписьСпецРаботы = Сред(НадписьСпецРаботы, 4);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНадписьУсловияРаботы()
	флДетальныйУчетУсловий = ПолучитьПраваИНастройкиПользователя(Объект.Организация,
		ПланыВидовХарактеристик.уатПраваИНастройки.ДетальныйУчетУсловийРаботы)
		И Объект.ТранспортноеСредство.Модель.НаличиеСпидометра;
	Если НЕ флДетальныйУчетУсловий Тогда
		Возврат;
	КонецЕсли;
				
	Для Каждого ТекСтрока Из Объект.Задание Цикл 
		ТекСтрока.НадписьУсловияРаботы = "";
		
		мсвСтрокиУсловияРаботы = Объект.УсловияРаботыДетально.НайтиСтроки(Новый Структура("ID", ТекСтрока.ID));
		Если мсвСтрокиУсловияРаботы.Количество() = 0 Тогда
			Если ЗначениеЗаполнено(ТекСтрока.УсловиеРаботы) Тогда
				ТекСтрока.НадписьУсловияРаботы = ТекСтрока.УсловиеРаботы;
			Иначе
				ТекСтрока.НадписьУсловияРаботы = "Редактировать";
			КонецЕсли;
		ИначеЕсли мсвСтрокиУсловияРаботы.Количество() = 1 Тогда
			ТекСтрока.НадписьУсловияРаботы = мсвСтрокиУсловияРаботы[0].УсловиеРаботы;
		Иначе
			Для Каждого ТекСтрокаУсловие Из мсвСтрокиУсловияРаботы Цикл
				ТекСтрока.НадписьУсловияРаботы = ТекСтрока.НадписьУсловияРаботы
					+ ?(ТекСтрока.НадписьУсловияРаботы = "", "", " / ")
					+ Формат(ТекСтрокаУсловие.УсловиеРаботы.КоэффициентИзменениеНормыРасхода, "ЧДЦ=1; ЧН=0") + "%";
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьРасстояниеВремяМеждуПунктами(ТекСтрокаЗадание)
	
	Если ТипЗнч(ТекСтрокаЗадание.АдресПрибытия) = Тип("СправочникСсылка.уатПунктыНазначения")
			И ТипЗнч(ТекСтрокаЗадание.АдресУбытия) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда
		мсвПункты = Новый Массив();
		мсвПункты.Добавить(Новый Структура("Пункт1, Пункт2, Маршрут",
			ТекСтрокаЗадание.АдресПрибытия, 
			ТекСтрокаЗадание.АдресУбытия,
			ТекСтрокаЗадание.Маршрут
		));
		
		уатЗащищенныеФункцииСервер.РассчитатьТаблицуРасстояниеВремяМеждуПунктами(мсвПункты);
		
		Если мсвПункты.Количество() Тогда 
			ТекСтрокаЗадание.КоличествоКмГруз = мсвПункты[0].Расстояние;
			ТекСтрокаЗадание.КоличествоЧасов  = мсвПункты[0].Время;
		КонецЕсли;
		
	Иначе
		ТекСтрокаЗадание.КоличествоКмГруз = 0;
		ТекСтрокаЗадание.КоличествоЧасов  = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьВидПеревозки(мОрганизация, мТранспортноеСредство)
	
	Если ЗначениеЗаполнено(мТранспортноеСредство)
		И ЗначениеЗаполнено(мТранспортноеСредство.ОсновнойВидПеревозки) Тогда
		ВидПеревозки = мТранспортноеСредство.ОсновнойВидПеревозки;
	Иначе
		СтруктураОбъектовНастроек = Новый Структура;
		СтруктураОбъектовНастроек.Вставить("Организация", мОрганизация);
		СтруктураОбъектовНастроек.Вставить("Подразделение", ПодразделениеНастройки());
		СтруктураОбъектовНастроек.Вставить("Пользователь", ПользователиКлиентСервер.АвторизованныйПользователь());
		ВидПеревозки = ПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, ПланыВидовХарактеристик.уатПраваИНастройки.ОсновнойВидПеревозок);
	КонецЕсли;
	Возврат ВидПеревозки;
	
КонецФункции

&НаСервере
Процедура ОбработкаЗаполненияТЧЗаданиеПоЗаказуНаТС(Результат)
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	уатПутевыеЛисты.ЗаполнитьЗаданиеПоЗаказам(Результат, Объект);
	
	ОбновитьЕдиницыИзмеренияПоЗаказамВЗадании();
	ОбновитьНадписьУсловияРаботы();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТСПрисутствуетВПутевомЛисте(Знач ТекТС, Знач ТекПутевойЛист)
	
	Если ТекПутевойЛист.ТранспортноеСредство = ТекТС Тогда 
		Возврат Истина;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из ТекПутевойЛист.Прицепы Цикл 
		Если ТекСтрока.ТС = ТекТС Тогда 
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекСтрока Из ТекПутевойЛист.Задание Цикл 
		Если ТекСтрока.Прицеп1 = ТекТС Тогда 
			Возврат Истина;
		КонецЕсли;
		Если ТекСтрока.Прицеп2 = ТекТС Тогда 
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции // ТСПрисутствуетВПутевомЛисте()

&НаСервереБезКонтекста
Функция ПолучитьПутевыеЛистыПоТС(Знач ТС, Знач ДатаСлива, Знач ТекстПодбора="")
	
	ПутевыеЛистыПоТС = Новый СписокЗначений();
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТС",               ТС);
	Запрос.УстановитьПараметр("НачалоПериода",    ДобавитьМесяц(ДатаСлива, -1));
	Запрос.УстановитьПараметр("ОкончаниеПериода", ДобавитьМесяц(ДатаСлива, 1));
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатПутевойЛист.Ссылка КАК Ссылка,
	|	уатПутевойЛист.Номер КАК Номер,
	|	уатПутевойЛист.Дата КАК Дата
	|ИЗ
	|	Документ.уатПутевойЛист КАК уатПутевойЛист
	|ГДЕ
	|	НЕ уатПутевойЛист.ПометкаУдаления
	|	И НЕ уатПутевойЛист.Рассчитан
	|	И уатПутевойЛист.ДатаВыезда >= &НачалоПериода
	|	И уатПутевойЛист.ДатаВыезда <= &ОкончаниеПериода
	|	И уатПутевойЛист.ДатаВозвращения >= &НачалоПериода
	|	И уатПутевойЛист.ДатаВозвращения <= &ОкончаниеПериода";
	
	Если ЗначениеЗаполнено(ТС) Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И (уатПутевойЛист.ТранспортноеСредство = &ТС
		|	ИЛИ уатПутевойЛист.Прицепы.ТС.Модель.НаличиеТопливногоБака И уатПутевойЛист.Прицепы.ТС = &ТС
		|	ИЛИ уатПутевойЛист.Задание.Прицеп1.Модель.НаличиеТопливногоБака И уатПутевойЛист.Задание.Прицеп1 = &ТС
		|	ИЛИ уатПутевойЛист.Задание.Прицеп2.Модель.НаличиеТопливногоБака И уатПутевойЛист.Задание.Прицеп2 = &ТС)";
	КонецЕсли;
	
	Запрос.Текст = СокрЛП(Запрос.Текст) + "
	|УПОРЯДОЧИТЬ ПО
	|	уатПутевойЛист.ДатаВыезда";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		ПредставлениеДокумента = Выборка.Номер + " (" + Выборка.Дата + ")";
		Если ТекстПодбора = "" Тогда 
			ПутевыеЛистыПоТС.Добавить(Выборка.Ссылка, ПредставлениеДокумента);
		Иначе 
			стрДлинаПодбор = СтрДлина(ТекстПодбора);
			Если Не НРег(Лев(ПредставлениеДокумента, стрДлинаПодбор)) = НРег(ТекстПодбора) Тогда 
				Продолжить;
			КонецЕсли;
			
			тПредставление = Новый ФорматированнаяСтрока(
				Новый ФорматированнаяСтрока(Лев(ПредставлениеДокумента, стрДлинаПодбор),, ЦветаСтиля.уатЦветТекстаПриАвтоподборе), 
				Новый ФорматированнаяСтрока(Прав(ПредставлениеДокумента, СтрДлина(ПредставлениеДокумента)-стрДлинаПодбор)));
			ПутевыеЛистыПоТС.Добавить(Выборка.Ссылка, тПредставление);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПутевыеЛистыПоТС;
	
КонецФункции // ПолучитьПутевыеЛистыПоТС()

&НаСервере
Функция ТребуетсяПолучениеДанныхПоGPS(НаименованиеССМ)
	Возврат уатПутевыеЛисты.ТребуетсяПолучениеДанныхПоGPS(Объект, НаименованиеССМ);
КонецФункции // ТребуетсяПолучениеДанныхПоGPS()

&НаКлиенте
Процедура ЗаполнитьЗаданиеПоМЛ(РежимЗаполнения, ПланФакт)
	
	ДопПараметры = Новый Структура("РежимЗаполнения, ПланФакт", РежимЗаполнения, ПланФакт);
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьЗаданиеПоМЛПослеВыбораДокумента", ЭтотОбъект, ДопПараметры);
	
	ПараметрыВыбораМЛ = Новый Структура;
	ПараметрыВыбораМЛ.Вставить("РежимВыбора",        Истина);
	ПараметрыВыбораМЛ.Вставить("МножественныйВыбор", Истина);
	ПараметрыВыбораМЛ.Вставить("ОтборТС",            Объект.ТранспортноеСредство);
	
	ОткрытьФорму("Документ.уатМаршрутныйЛист.ФормаВыбора", ПараметрыВыбораМЛ, ЭтотОбъект,,,, Оповещение,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаданиеПоМЛПослеВыбораДокумента(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия <> Неопределено Тогда 
		ЗаполнитьЗаданиеПоДаннымМЛ(РезультатЗакрытия, ДополнительныеПараметры.РежимЗаполнения,
			ДополнительныеПараметры.ПланФакт);
		
		ТекстСообщения = НСтр("ru = 'Табличная часть ""Задание"" заполнена.
	                      |Необходимо проверить правильность заполнения и вручную изменить даты выезда и возвращения на закладке ""Основное"".'");
		Состояние(,, ТекстСообщения, БиблиотекаКартинок.Информация32);
	КонецЕсли;

	СформироватьСписокВыбораТСвЗаправкахГСМ();
	ОбновитьНадписьСпецРабот();
	ОбновитьНадписьУсловияРаботы();
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗаданиеПоДаннымМЛ(ДокументМЛ, РежимЗаполнения = Неопределено, ПланФакт = Неопределено)
	
	Если ТипЗнч(ДокументМЛ) = Тип("Массив") Тогда
		Для Каждого ТекМЛ Из ДокументМЛ Цикл
			уатПутевыеЛисты.ЗаполнитьЗаданиеПоДаннымМЛ(Объект, ТекМЛ, РежимЗаполнения, ПланФакт);
		КонецЦикла;
	Иначе
		уатПутевыеЛисты.ЗаполнитьЗаданиеПоДаннымМЛ(Объект, ДокументМЛ, РежимЗаполнения, ПланФакт);
	КонецЕсли;
	ОбновитьЕдиницыИзмеренияПоЗаказамВЗадании();
	
КонецПроцедуры

&НаСервере
Процедура ОстатокТЖВыезд(ДатаВыезда, ТранспортноеСредство) 
	тблОстаткиТЖВыезд = уатОбщегоНазначения.уатОстатокТЖнаТС(ДатаВыезда, ТранспортноеСредство);
	Для Каждого ТекСтрокаТЖ Из тблОстаткиТЖВыезд Цикл
		мсвСтрокиТЖ = Объект.РасходГСМ.НайтиСтроки(Новый Структура("ТС, ГСМ", ТранспортноеСредство, ТекСтрокаТЖ.ТЖ));
		Если мсвСтрокиТЖ.Количество() > 0 Тогда
			мсвСтрокиТЖ[0].ОстатокПриВыезде = ТекСтрокаТЖ.Количество;
			ПересчетРасходФактВСтрокеСервер(мсвСтрокиТЖ[0]);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьРассчитанногоДокумента()
	Если Объект.Проведен И Объект.Рассчитан Тогда
		флДоступность = Ложь;
	ИначеЕсли Элементы.ГруппаШапка.ТолькоПросмотр Тогда
		флДоступность = Истина;
	Иначе
		Возврат;
	КонецЕсли;
	
	//ТолькоПросмотр = НЕ флДоступность;
	Элементы.ГруппаШапка.ТолькоПросмотр = НЕ флДоступность;
	Элементы.Страницы.ТолькоПросмотр = НЕ флДоступность;
	Элементы.ОтветственныйКомментарий.ТолькоПросмотр = НЕ флДоступность;
	Элементы.ФормаРасчетИтогов.Доступность = флДоступность;
	Элементы.ФормаЗаполнитьНачальныеОстатки.Доступность = флДоступность;
	Элементы.ФормаРассчитатьСпидометрПоЗаданию.Доступность = флДоступность;
	Элементы.ЗаданиеОтметитьВсеЗадания.Доступность = флДоступность;
	Элементы.ЗаданиеСнятьВсеОтметкиВЗаданиях.Доступность = флДоступность;
	Элементы.ЗаправкиГСМДобавитьСуществующуюЗаправку.Доступность = флДоступность;
	Элементы.РедактироватьЗаправкуГСМВДиалоге.Доступность = флДоступность;
	Элементы.РедактироватьСливГСМВДиалоге.Доступность = флДоступность;
	Элементы.ТТДДобавитьВСуществующийТТД.Доступность = флДоступность;
	Элементы.ТТДГруппаСоздать.Доступность = флДоступность;
	Элементы.ЗаданиеЗаполнить.Доступность = флДоступность;
	Элементы.ПрицепыЗаполнитьПрицепы.Доступность = флДоступность;
	Если ПолучитьФункциональнуюОпцию("уатИспользоватьМониторинг")
		ИЛИ ПолучитьФункциональнуюОпцию("уатМобильноеПриложениеВодителя") Тогда
		Элементы.ЗаданиеЗаполнитьФактПосещение.Доступность = флДоступность;
	КонецЕсли;
	
	Элементы.ФактическиОтработанноеВремя.Доступность = флДоступность;
	Элементы.ФактическиОтработанноеВремяПересчитатьФОВ.Доступность = флДоступность;
	Элементы.ПрочиеРасходы.Доступность = флДоступность;
	Элементы.ФормаЗаполнитьПоМониторингуПриВыезде.Доступность = флДоступность;
	Элементы.ФормаЗаполнитьПоМониторингуПриВозврате.Доступность = флДоступность;
	Элементы.ФормаItobПоказатьМаршрутНаКарте.Доступность = флДоступность;
	Элементы.ДобавитьСуществующуюВыручку.Доступность = флДоступность;
	Элементы.РедактироватьВыручкуВДиалоге.Доступность = флДоступность;
	Элементы.ДобавитьСуществующийБилетныйЛист.Доступность = флДоступность;
	Элементы.РедактироватьБилетыВДиалоге.Доступность = флДоступность;
	Элементы.ДобавитьСуществующуюПосадочнуюВедомость.Доступность = флДоступность;
	Элементы.РедактироватьПосВедВДиалоге.Доступность = флДоступность; 
	
КонецПроцедуры

&НаСервере
Процедура СгруппироватьКомандыПечати()
	
	РазмещенныеКомандыПечати = Новый Массив();
	Для Каждого ТекКоманда Из Элементы.ПодменюПечатьОбычное.ПодчиненныеЭлементы Цикл 
		РазмещенныеКомандыПечати.Добавить(ТекКоманда);
	КонецЦикла;
	
	ГруппаПечатьПриВыезде = Элементы.Добавить(
		"ПодменюПечатьОбычное_уатГруппаВыезд", 
		Тип("ГруппаФормы"), 
		Элементы.ПодменюПечатьОбычное
	);
	ГруппаПечатьПриВыезде.Вид = ВидГруппыФормы.ГруппаКнопок;
	
	ГруппаПечатьПриВозврате = Элементы.Добавить(
		"ПодменюПечатьОбычное_уатГруппаВозврат", 
		Тип("ГруппаФормы"), 
		Элементы.ПодменюПечатьОбычное
	);
	ГруппаПечатьПриВозврате.Вид = ВидГруппыФормы.ГруппаКнопок;
	
	ГруппаПечатьПрочее = Элементы.Добавить(
		"ПодменюПечатьОбычное_уатГруппаПрочее", 
		Тип("ГруппаФормы"), 
		Элементы.ПодменюПечатьОбычное
	);
	ГруппаПечатьПрочее.Вид = ВидГруппыФормы.ГруппаКнопок;
	
	Для Каждого ТекКоманда Из РазмещенныеКомандыПечати Цикл 
		Если ТекКоманда.ИмяКоманды = "ПодменюПечатьОбычное_ПечататьЛицСторону"
				Или ТекКоманда.ИмяКоманды = "ПодменюПечатьОбычное_ПечататьОбрСторону"
				Или ТекКоманда.ИмяКоманды = "ПодменюПечатьОбычное_ПечатьВесьДокумент" Тогда 
			Элементы.Переместить(ТекКоманда, ГруппаПечатьПриВыезде);
			
		ИначеЕсли ТекКоманда.ИмяКоманды = "ПодменюПечатьОбычное_ПечатьВесьДокументПолная"
				Или ТекКоманда.ИмяКоманды = "ПодменюПечатьОбычное_ПечататьОбрСторонуПолная"
				Или ТекКоманда.ИмяКоманды = "ПодменюПечатьОбычное_ПечататьЛицСторонуПолная" Тогда
			Элементы.Переместить(ТекКоманда, ГруппаПечатьПриВозврате);
			
		Иначе 
			Элементы.Переместить(ТекКоманда, ГруппаПечатьПрочее);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРежимыРасчетаПробеговПоЗаданию()
	
	ПробегСГрузом_СуммированиеПоЭтапам = (Справочники.уатПараметрыВыработки.ПробегСГрузом.СпособРасчетаПоНомеруЭтапа = 0);
	ПробегПорожний_СуммированиеПоЭтапам = (Справочники.уатПараметрыВыработки.ПробегПорожний.СпособРасчетаПоНомеруЭтапа = 0);
	
	Возврат Новый Структура("ПробегСГрузом_СуммированиеПоЭтапам, ПробегПорожний_СуммированиеПоЭтапам", 
		ПробегСГрузом_СуммированиеПоЭтапам, ПробегПорожний_СуммированиеПоЭтапам);
	
КонецФункции // ПолучитьРежимыРасчетаПробеговПоЗаданию()

&НаКлиенте
Процедура ПередЗакрытиемВопрос(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.ОК Тогда
		флВопросЗакрытиеФормы = Ложь;
		Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура КонтрольПредыдущийПЛНеРассчитан(Отказ, ВызовПередЗакрытиемФормы = Ложь, мсвСообщения = Неопределено)
	ВидКонтроля = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация, "ЗапретПроведенияПЛеслиПредыдущийПЛнеРассчитан");
	Если ВидКонтроля = Перечисления.уатВидыКонтроля.Разрешать Тогда
		Возврат;
	КонецЕсли;
	
	Если мсвСообщения = Неопределено Тогда
		мсвСообщения = Новый Массив;
	КонецЕсли;
	флОтказ = Ложь;
	ПредПЛ_номер = Неопределено;
	ПредПЛ_дата = Неопределено;
	Если уатОбщегоНазначения.ПредыдущийПЛНеРассчитан(Объект.ТранспортноеСредство, Объект.ДатаВыезда, ПредПЛ_номер, ПредПЛ_дата, Объект.Ссылка) Тогда
		ТекстСообщения = "Предыдущий путевой лист №" + ПредПЛ_номер + " от " + Формат(ПредПЛ_дата, "ДФ=dd.MM.yyyy") + " не рассчитан.";
		Если ВидКонтроля = Перечисления.уатВидыКонтроля.Запрещать Тогда
			ТекстСообщения = ТекстСообщения + "
				|Проведение запрещено!";
			флОтказ = Истина;
			флВопросЗакрытиеФормы = Ложь;
		ИначеЕсли НЕ ВызовПередЗакрытиемФормы Тогда
			флВопросЗакрытиеФормы = Истина;
		КонецЕсли;
		Если ВызовПередЗакрытиемФормы И ВидКонтроля = Перечисления.уатВидыКонтроля.Запрещать Тогда
			мсвСообщения.Добавить(ТекстСообщения);
		Иначе
			уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
	// Отказ = Отказ ИЛИ (флОтказ И (НЕ ВызовПередЗакрытиемФормы ИЛИ ВидКонтроля = Перечисления.уатВидыКонтроля.Запрещать));
	Отказ = Отказ ИЛИ флОтказ;
КонецПроцедуры

&НаСервере
Процедура КонтрольЗакрытияБудущимВременем(Отказ, ВызовПередЗакрытиемФормы = Ложь, мсвСообщения = Неопределено)
	Если НЕ Объект.Рассчитан Тогда
		Возврат;
	КонецЕсли;
	
	ВидКонтроля = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация, "ЗапретЗакрытияПЛбудущимВременем");
	Если ВидКонтроля = Перечисления.уатВидыКонтроля.Разрешать Тогда
		Возврат;
	КонецЕсли;
	
	Если мсвСообщения = Неопределено Тогда
		мсвСообщения = Новый Массив;
	КонецЕсли;
	флОтказ = Ложь;
	
	Если Объект.ДатаЗакрытия > ТекущаяДата() Тогда
		ТекстСообщения = "Дата закрытия путевого листа " + Формат(Объект.ДатаЗакрытия, "ДФ='dd.MM.yyyy HH:mm'") + " больше текущей даты " + Формат(ТекущаяДата(), "ДФ='dd.MM.yyyy HH:mm'") + ".";
		Если ВидКонтроля = Перечисления.уатВидыКонтроля.Запрещать Тогда
			ТекстСообщения = ТекстСообщения + "
				|Проведение запрещено!";
			флОтказ = Истина;
			флВопросЗакрытиеФормы = Ложь;
		ИначеЕсли НЕ ВызовПередЗакрытиемФормы Тогда
			флВопросЗакрытиеФормы = Истина;
		КонецЕсли;
		Если ВызовПередЗакрытиемФормы И ВидКонтроля = Перечисления.уатВидыКонтроля.Запрещать Тогда
			мсвСообщения.Добавить(ТекстСообщения);
		Иначе
			уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
	// Отказ = Отказ ИЛИ (флОтказ И (НЕ ВызовПередЗакрытиемФормы ИЛИ ВидКонтроля = Перечисления.уатВидыКонтроля.Запрещать));
	Отказ = Отказ ИЛИ флОтказ;
КонецПроцедуры

&НаСервере
Процедура КонтрольИзмененияКлючевыхРеквизитов(Отказ, ВызовПередЗакрытиемФормы = Ложь, мсвСообщения = Неопределено)
	ВидКонтроля = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
		"ЗапретПроведенияПодписанногоПЛприИзмененииКлючевыхРеквизитов");
	Если ВидКонтроля = Перечисления.уатВидыКонтроля.Разрешать Тогда
		Возврат;
	КонецЕсли;
	
	Если АннулируемыеПодписи.Количество() = 0 
		И ИзмененныеТитулыЭПЛ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если мсвСообщения = Неопределено Тогда
		мсвСообщения = Новый Массив;
	КонецЕсли;
	флОтказ = Ложь;
	
	Если ВидКонтроля = Перечисления.уатВидыКонтроля.Запрещать Тогда
		ТекстСообщения =
			"Изменены реквизиты Путевого листа, являющиеся ключевыми для подписей ответственных лиц.
			|Проведение запрещено!";
			
		флОтказ = Истина;
		флВопросЗакрытиеФормы = Ложь;
	ИначеЕсли АннулируемыеПодписи.Количество() <> 0 Тогда
		ТекстСообщения =
			"Аннулированы подписи ответственных лиц по причине изменения ключевых реквизитов Путевого листа.";
			
		Если НЕ ВызовПередЗакрытиемФормы Тогда
			флВопросЗакрытиеФормы = Истина;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	Если ВызовПередЗакрытиемФормы И ВидКонтроля = Перечисления.уатВидыКонтроля.Запрещать Тогда
		мсвСообщения.Добавить(ТекстСообщения);
	Иначе
		уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстСообщения);
	КонецЕсли;
		
	Отказ = Отказ ИЛИ флОтказ;	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьСтавку(ТекСтрока = Неопределено)
	Если ТекСтрока = Неопределено Тогда
		ТекСтрока = Элементы.ЗаправкиГСМ.ТекущиеДанные;
	КонецЕсли;
	
	Если ТекСтрока <> Неопределено И ЗначениеЗаполнено(ТекСтрока.ГСМ) Тогда
		Если ТекСтрока.УчитыватьНДС Тогда
			СтавкаНДС = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрока.ГСМ, "СтавкаНДС");
			ТекСтрока.СтавкаНДС = ?(ЗначениеЗаполнено(СтавкаНДС), СтавкаНДС, ТекСтрока.СтавкаНДС);
		Иначе
			ТекСтрока.СтавкаНДС = Неопределено;
		КонецЕсли;
	Конецесли;
КонецПроцедуры

&НаСервере
Процедура УстановитьАдресХранилищаДляРезультатаЗаполненияФактПосещения()
	
	АдресХранилищаФактПосещения = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбнулитьСчетчикРаспечатанныхКопийПЛСервер(ПЛ)
	НаборЗаписей = РегистрыСведений.уатКоличествоРаспечатанныхКопийПЛ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ПутевойЛист.Установить(ПЛ);
	НаборЗаписей.Прочитать();
	УдаляемыеЗаписи = Новый Массив();
	Для Каждого ТекЗапись Из НаборЗаписей Цикл
		УдаляемыеЗаписи.Добавить(ТекЗапись);
	КонецЦикла;
	
	Для Каждого ТекЗапись Из УдаляемыеЗаписи Цикл
		НаборЗаписей.Удалить(ТекЗапись);
	КонецЦикла;
	
	Попытка
		НаборЗаписей.Записать();
	Исключение
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПробегСпецработ(КоличествоВыработки, ТекСтрока)
	Для Сч = 1 По 5 Цикл
		ТекСпецРабота = ТекСтрока["СпецРабота" + Сч];
		Если ЗначениеЗаполнено(ТекСпецРабота)
			И уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСпецРабота, "УвеличитьОбщийПробегНаПробегСпец") Тогда
			КоличествоВыработки = КоличествоВыработки + ТекСтрока["КоличествоСпецРаботы" + Сч] * ТекСтрока.КоличествоЕздок;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСписокСпецработ();
	мсвСпецработы_ = Новый Массив;
	Для Каждого ТекСтрока Из Объект.Задание Цикл
		Для СчСпец = 1 По 5 Цикл
			ТекСпецработа = ТекСтрока["СпецРабота" + СчСпец];
			Если ЗначениеЗаполнено(ТекСпецработа) И мсвСпецработы_.Найти(ТекСпецработа) = Неопределено Тогда
				мсвСпецработы_.Добавить(ТекСпецработа);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат мсвСпецработы_;
КонецФункции

&НаКлиенте
Процедура ОбновитьСписокСпецработ()
	Если Объект.РежимРасчетаВыработки <> ПредопределенноеЗначение("Перечисление.уатРежимыРасчетаВыработкиПЛ.ПоЗаданию") Тогда
		Возврат;
	КонецЕсли;
	
	мсвСпецработы = ПолучитьСписокСпецработ();
КонецПроцедуры

// Процедура удаляет лишние спецработы из выработки ТС и водителей, после удаления выработки по ним в ТЧ Задание
// Выполнять корректировку выработки приходится здесь, поскольку при расчете выработки невозможно понять
// была ли это спецработа из задания или вручную введенная выработка.
//
&НаКлиенте
Процедура УдалитьСпецработыИзВыработки()
	Если Объект.РежимРасчетаВыработки <> ПредопределенноеЗначение("Перечисление.уатРежимыРасчетаВыработкиПЛ.ПоЗаданию") Тогда
		Возврат;
	КонецЕсли;
	
	мсвСпецработыНов = ПолучитьСписокСпецработ();
	
	Сч = Объект.ВыработкаТС.Количество()-1;
	Пока Сч >= 0 Цикл
		ТекСтрока = Объект.ВыработкаТС[Сч];
		Если мсвСпецработы.Найти(ТекСтрока.ПараметрВыработки) <> Неопределено
			И мсвСпецработыНов.Найти(ТекСтрока.ПараметрВыработки) = Неопределено Тогда
			Объект.ВыработкаТС.Удалить(ТекСтрока);
		КонецЕсли;
		
		Сч = Сч - 1;
	КонецЦикла;
	Сч = Объект.ВыработкаСотрудников.Количество()-1;
	Пока Сч >= 0 Цикл
		ТекСтрока = Объект.ВыработкаСотрудников[Сч];
		Если мсвСпецработы.Найти(ТекСтрока.ПараметрВыработки) <> Неопределено
			И мсвСпецработыНов.Найти(ТекСтрока.ПараметрВыработки) = Неопределено Тогда
			Объект.ВыработкаСотрудников.Удалить(ТекСтрока);
		КонецЕсли;
		
		Сч = Сч - 1;
	КонецЦикла;
	
	ОбновитьСписокСпецработ();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПробегПоУмолчаниюПриРаботеНаДвухВидахТоплива()
	МодельТС = ПолучитьЗначениеРеквизита(Объект.ТранспортноеСредство, "Модель");
	МодельТСРеквизиты = ПолучитьЗначенияРеквизитов(МодельТС, "ОсновноеТопливо, ДополнительноеТопливо");
	
	Для Каждого ТекСтрока Из Объект.РасходГСМ Цикл
		Если ТекСтрока.ТС <> Объект.ТранспортноеСредство Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекСтрока.ГСМ = МодельТСРеквизиты.ОсновноеТопливо Тогда
			ТекСтрока.Пробег = уатОбщегоНазначения.уатРазностьПоказанийСчетчика(Объект.СпидометрВыезда, Объект.СпидометрВозвращения);
			
		ИначеЕсли ТекСтрока.ГСМ = МодельТСРеквизиты.ДополнительноеТопливо Тогда
			ТекСтрока.Активен = Объект.РаботаНаДвухВидахТоплива;
			ТекСтрока.Пробег = 0;
			
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьГрузовойСоставЗаказа(ЗаказНаТС)
	тблГрузовойСостав = ЗаказНаТС.ГрузовойСостав.Выгрузить();
	тблГрузовойСостав.Свернуть("ГрузовоеМесто");
	мсвГрузы = тблГрузовойСостав.ВыгрузитьКолонку("ГрузовоеМесто");
	Возврат мсвГрузы;
КонецФункции

&НаСервереБезКонтекста
Функция СписокГрузМестЗаказаСервер(ТекЗаказ)
	СписРез = Новый СписокЗначений;
	Для Каждого ТекСтрока Из ТекЗаказ.Товары Цикл
		Если СписРез.НайтиПоЗначению(ТекСтрока.Номенклатура) = Неопределено Тогда
			СписРез.Добавить(ТекСтрока.Номенклатура);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписРез;
КонецФункции

&НаСервере
Процедура ОбновитьЕдиницыИзмеренияПоЗаказамВЗадании(ТекНомерСтроки = Неопределено)
	мсвЗаказы = Новый Массив;
	Для Каждого ТекСтрока Из Объект.Задание Цикл
		мсвЗаказы.Добавить(ТекСтрока.ЗаказНаТС);
	КонецЦикла;
		
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	уатЗаказГрузоотправителя.Ссылка КАК Ссылка,
	|	уатЗаказГрузоотправителя.ДетализацияЗакрытия КАК ДетализацияЗакрытия
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	|ГДЕ
	|	уатЗаказГрузоотправителя.Ссылка В(&мсвЗаказы)");
	Запрос.УстановитьПараметр("мсвЗаказы", мсвЗаказы);
	тблДетализацияЗаказов = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ТекСтрока Из Объект.Задание Цикл
		Если ТекНомерСтроки <> Неопределено И ТекСтрока.НомерСтроки <> ТекНомерСтроки Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаДетализация = тблДетализацияЗаказов.Найти(ТекСтрока.ЗаказНаТС, "Ссылка");
		
		Если ЗначениеЗаполнено(ТекСтрока.ЗаказНаТС) Тогда
			ТекСтрока.ДетализацияЗаказа = СтрокаДетализация.ДетализацияЗакрытия;
		Иначе
			ТекСтрока.ДетализацияЗаказа = Неопределено;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ТекСтрока.ЗаказНаТС)
			ИЛИ СтрокаДетализация.ДетализацияЗакрытия <> Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам
			ИЛИ НЕ ЗначениеЗаполнено(ТекСтрока.Номенклатура) Тогда
			
			ТекСтрока.ЕдиницаИзмеренияПоЗаказу = Неопределено;
			Продолжить;
		КонецЕсли;
		
		Для Каждого ТекСтрокаТовар Из ТекСтрока.ЗаказНаТС.Товары Цикл
			Если ТекСтрокаТовар.Номенклатура = ТекСтрока.Номенклатура Тогда
				ТекСтрока.ЕдиницаИзмеренияПоЗаказу = ТекСтрокаТовар.ЕдиницаИзмерения;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция УсловиеРаботыМаршрута(Маршрут)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Маршрут, "УсловиеРаботы");
КонецФункции

&НаКлиенте
Процедура ОтобразитьКартинкиПодписейОтветственныхЛиц()
	СостояниеПодписейПЛ = уатЖурналыТранспортныхДокументов.СостояниеПодписейПЛСтруктура(Объект.Ссылка);
	
	Элементы.КартинкаМедработникВыездПодписал.Видимость    = ИспользоватьЖурналыТранспортныхДокументов И СостояниеПодписейПЛ.МедработникПредрейсовый;
	Элементы.КартинкаМедработникВозвратПодписал.Видимость  = ИспользоватьЖурналыТранспортныхДокументов И СостояниеПодписейПЛ.МедработникПослерейсовый; 

	Элементы.КартинкаДиспетчерПодписал.Видимость          = ИспользоватьЖурналыТранспортныхДокументов И СостояниеПодписейПЛ.ДиспетчерПредрейсовый;
	Элементы.КартинкаМеханикПодписал.Видимость            = ИспользоватьЖурналыТранспортныхДокументов И СостояниеПодписейПЛ.КонтролерПредрейсовый;
	Элементы.КартинкаДиспетчерПринял.Видимость            = ИспользоватьЖурналыТранспортныхДокументов И СостояниеПодписейПЛ.ДиспетчерПослерейсовый;
	Элементы.КартинкаМеханикПринял.Видимость              = ИспользоватьЖурналыТранспортныхДокументов И СостояниеПодписейПЛ.КонтролерПослерейсовый;
	Элементы.ДекорацияПодписалВодитель.Видимость          = ИспользоватьЖурналыТранспортныхДокументов И СостояниеПодписейПЛ.Водитель;
	Элементы.КартинкаПодписалВодитель.Видимость           = ИспользоватьЖурналыТранспортныхДокументов И СостояниеПодписейПЛ.Водитель;
	
	Элементы.КартинкаУполномоченныйНаПроставлениеОдометраПриВыездеПодписал.Видимость   = ИспользоватьЖурналыТранспортныхДокументов
		И СостояниеПодписейПЛ.УполномоченныйНаПроставлениеОдометраПредрейсовый;
	Элементы.КартинкаУполномоченныйНаПроставлениеОдометраПриВозвратеПодписал.Видимость = ИспользоватьЖурналыТранспортныхДокументов
		И СостояниеПодписейПЛ.УполномоченныйНаПроставлениеОдометраПослерейсовый;
	
	Элементы.АннулироватьВсеПодписи.Видимость = ИспользоватьЖурналыТранспортныхДокументов
		И (СостояниеПодписейПЛ.МедработникПредрейсовый
		ИЛИ СостояниеПодписейПЛ.МедработникПослерейсовый
		ИЛИ СостояниеПодписейПЛ.Водитель
		ИЛИ СостояниеПодписейПЛ.ДиспетчерПредрейсовый ИЛИ СостояниеПодписейПЛ.КонтролерПредрейсовый
		ИЛИ СостояниеПодписейПЛ.ДиспетчерПослерейсовый ИЛИ СостояниеПодписейПЛ.КонтролерПослерейсовый
		ИЛИ СостояниеПодписейПЛ.УполномоченныйНаПроставлениеОдометраПредрейсовый
		ИЛИ СостояниеПодписейПЛ.УполномоченныйНаПроставлениеОдометраПослерейсовый);
	КонецПроцедуры
	
&НаСервереБезКонтекста
Функция ИспользоватьПланФактВремениМЛ()
	Возврат Константы.уатУчетПланФактаПоМаршрутуВМаршрутныхЛистах.Получить();
КонецФункции

&НаКлиенте
Функция СтруктураОтбораТС()
	
	СтруктураОтбора = Новый Структура();
	СтруктураОтбора.Вставить("ВидМоделиТС", ПредопределенноеЗначение("Перечисление.уатВидыМоделейТС.Автотранспорт"));
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Объект.Организация);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
		СтруктураОтбора.Вставить("Подразделение", Объект.Подразделение);
	КонецЕсли;
	
	Возврат СтруктураОтбора;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКоличествоЭПД(Документ)
	
	Возврат уатОбменСГИСЭПД.ПолучитьКоличествоЭПД(Документ);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЭПДДляЗаменыТСВодителя(Рейс)
	
	Запрос = Новый Запрос(); 
	Запрос.УстановитьПараметр("Рейс", Рейс);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатСвязанныеДокументыЭПД.ЭПД КАК ЭПД
	|ИЗ
	|	РегистрСведений.уатСвязанныеДокументыЭПД КАК уатСвязанныеДокументыЭПД
	|ГДЕ
	|	уатСвязанныеДокументыЭПД.Рейс = &Рейс
	|
	|СГРУППИРОВАТЬ ПО
	|	уатСвязанныеДокументыЭПД.ЭПД";
	Выборка   = Запрос.Выполнить().Выбрать();
	
	ЗаменятьТСВодителя = Ложь;
	
	МассивЭПД = Новый Массив();
	Пока Выборка.Следующий() Цикл
		ДанныеСостоянияЭДО = ИнтеграцияЭДОВызовСервера.ДанныеСостоянияЭДОДляФормыОбъектаУчета(Выборка.ЭПД);
		ТитулыПоДокументу = ОбменСГИСЭПДВызовСервера.ПолучитьТитулыПоДокументу(Выборка.ЭПД, Истина);
		
		Если ДанныеСостоянияЭДО.ПредставлениеСостояния <> "Закрыт с отклонением" Тогда
			Если ТитулыПоДокументу.Получить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул1")) <> Неопределено
				И ТитулыПоДокументу.Получить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул2")) <> Неопределено
				И ДанныеСостоянияЭДО.ПредставлениеСостояния <> "Требуется повторная отправка" Тогда
				
				Если ТитулыПоДокументу.Получить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул3")) = Неопределено
					И ТитулыПоДокументу.Получить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул4")) = Неопределено Тогда
					ЗаменятьТСВодителя = Истина;
					МассивЭПД.Добавить(Выборка.ЭПД);
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;  
	
	Возврат МассивЭПД;
	
КонецФункции

&НаКлиенте
Процедура ВопросПереадресовкаТСЭПДЗавершение(РезультатВопроса, МассивЭПД) Экспорт

	ВопросПереадресовкаТСЭПД  = Истина;
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Для Каждого ТекЭПД Из МассивЭПД Цикл
			ПараметрыФормы = Новый Структура();
			ПараметрыФормы.Вставить("Ключ", ТекЭПД);
			ПараметрыФормы.Вставить("СоздатьЭстафету", Истина);
			
			ОткрытьФорму("Документ.ЭлектроннаяТранспортнаяНакладная.Форма.ОсновнаяФорма", ПараметрыФормы,ЭтотОбъект);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросИзменениеЭПЛ(РезультатВопроса, ТекЭПД) Экспорт

	ВопросИзменениеЭПЛ = Истина;
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("Ключ", ТекЭПД);
		
		ОткрытьФорму("Документ.ЭлектронныйПутевойЛист.Форма.ОсновнаяФорма", ПараметрыФормы, ЭтотОбъект); 
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросИзменениеЭТрН(РезультатВопроса, МассивЭПД) Экспорт

	ВопросИзменениеЭТрН = Истина; 
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Для Каждого ТекЭПД Из МассивЭПД Цикл
			ПараметрыФормы = Новый Структура();
			ПараметрыФормы.Вставить("Ключ", ТекЭПД);
			
			ОткрытьФорму("Документ.ЭлектроннаяТранспортнаяНакладная.Форма.ОсновнаяФорма", ПараметрыФормы,ЭтотОбъект);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УставновитьВидимостьОтветвенныеЛица()
	
	Элементы.Медорганизация.Видимость     = ВариантМедосмотр = 1;
	Элементы.КонтрольТранспорта.Видимость = ВариантТехконтроль = 1;
	Элементы.ПоказанияОдометра.Видимость  = ВариантПоказанияОдометра = 1; 
	
	Элементы.МедработникВыезд.ОграничениеТипа = ?(ВариантМедосмотр = 0, Новый ОписаниеТипов("СправочникСсылка.Сотрудники"),
		Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	Элементы.МедработникВозврат.ОграничениеТипа = ?(ВариантМедосмотр = 0, Новый ОписаниеТипов("СправочникСсылка.Сотрудники"),
		Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
		
	Элементы.ОтветственныйЗаСостояниеТСПриВыезде.ОграничениеТипа = ?(ВариантТехконтроль = 0, Новый ОписаниеТипов("СправочникСсылка.Сотрудники"),
		Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	Элементы.ОтветственныйЗаСостояниеТСПриВозврате.ОграничениеТипа = ?(ВариантТехконтроль = 0, Новый ОписаниеТипов("СправочникСсылка.Сотрудники"),
		Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица")); 
		
	Элементы.УполномоченныйНаПроставлениеОдометраПриВыезде.ОграничениеТипа = ?(ВариантПоказанияОдометра = 0, Новый ОписаниеТипов("СправочникСсылка.Сотрудники"),
		Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));
	Элементы.УполномоченныйНаПроставлениеОдометраПриВозврате.ОграничениеТипа = ?(ВариантПоказанияОдометра = 0, Новый ОписаниеТипов("СправочникСсылка.Сотрудники"),
		Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица"));

КонецПроцедуры 

&НаКлиенте
Процедура ОтображениеВыработкиТСПодробно(Команда)
		Элементы.ГруппаВыработкаСводнаяКомПанель.Видимость   = Ложь;
		Элементы.ГруппаВыработкаПодробнаяКомПанель.Видимость = Истина;
		Элементы.ГруппаВыработкаТСстраницы.ТекущаяСтраница   = Элементы.ГруппаВыработкаТСподробно;  
		
		Элементы.ОтображениеВыработкиТССводно.Пометка = Ложь;
		Элементы.ОтображениеВыработкиТСПодробно.Пометка = Истина;  
		
		ОтображениеВыработкиТССводно = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ОтображениеВыработкиТССводно(Команда)
		Элементы.ГруппаВыработкаСводнаяКомПанель.Видимость   = Истина;
		Элементы.ГруппаВыработкаПодробнаяКомПанель.Видимость = Ложь;
		Элементы.ГруппаВыработкаТСстраницы.ТекущаяСтраница   = Элементы.ГруппаВыработкаТСкратко;
		
		Элементы.ОтображениеВыработкиТССводно.Пометка = Истина;
		Элементы.ОтображениеВыработкиТСПодробно.Пометка = Ложь; 
		
		ОтображениеВыработкиТССводно = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОтображениеВыработкиСотрудниковПодробно(Команда)
		Элементы.ГруппаВыработкаСотрудниковСводнаяКомПанель.Видимость   = Ложь;
		Элементы.ГруппаВыработкаСотрудниковПодробнаяКомПанель.Видимость = Истина;
		Элементы.ГруппаВыработкаСотрудниковСтраницы.ТекущаяСтраница     = Элементы.ГруппаВыработкаСотрудниковПодробно;
		
		Элементы.ОтображениеВыработкиСотрудниковСводно.Пометка = Ложь; 
		Элементы.ОтображениеВыработкиСотрудниковПодробно.Пометка = Истина; 
		
		ОтображениеВыработкиСотрудниковСводно = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ОтображениеВыработкиСотрудниковСводно(Команда)
		Элементы.ГруппаВыработкаСотрудниковСводнаяКомПанель.Видимость   = Истина;
		Элементы.ГруппаВыработкаСотрудниковПодробнаяКомПанель.Видимость = Ложь;
		Элементы.ГруппаВыработкаСотрудниковСтраницы.ТекущаяСтраница     = Элементы.ГруппаВыработкаСотрудниковКратко;
		
		Элементы.ОтображениеВыработкиСотрудниковСводно.Пометка = Истина; 
		Элементы.ОтображениеВыработкиСотрудниковПодробно.Пометка = Ложь; 
		
		ОтображениеВыработкиСотрудниковСводно = Истина;	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВидимостьТитуловПодписания(СоответвиеПЛЭД) 
	Элементы.Подписи_ПерейтиТитул2.Заголовок = ?(ИспользоватьОбменЭД, Нстр("ru = 'Титул ""Предрейсовый медосмотр""'"), Нстр("ru = 'Запись журнала'"));
	Элементы.Подписи_ПерейтиТитул3.Заголовок = ?(ИспользоватьОбменЭД, Нстр("ru = 'Титул ""Предрейсовый контроль""'"), Нстр("ru = 'Запись журнала'"));
	Элементы.Подписи_ПерейтиТитул4.Заголовок = ?(ИспользоватьОбменЭД, Нстр("ru = 'Титул ""Показания одометра при выезде""'"), Нстр("ru = 'Запись журнала'"));
	Элементы.Подписи_ПерейтиТитул5.Заголовок = ?(ИспользоватьОбменЭД, Нстр("ru = 'Титул ""Показания одометра при заезде""'"), Нстр("ru = 'Запись журнала'"));
	Элементы.Подписи_ПерейтиТитул6.Заголовок = ?(ИспользоватьОбменЭД, Нстр("ru = 'Титул ""Послерейсовый медосмотр""'"), Нстр("ru = 'Запись журнала'"));

	Если ИспользоватьОбменЭД Тогда
		ЕстьТитул1 = Ложь;
		ЕстьТитул2 = Ложь;
		ЕстьТитул3 = Ложь;
		ЕстьТитул4 = Ложь;
		ЕстьТитул5 = Ложь;
		ЕстьТитул6 = Ложь;
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			СостоянияПодписейПЛ = Новый Соответствие();
			мсвПутевыеЛисты     = Новый Массив();
			мсвПутевыеЛисты.Добавить(Объект.Ссылка);
			уатОбменСГИСЭПД.ЗаполнитьСостоянияПЛ(мсвПутевыеЛисты, СостоянияПодписейПЛ, СоответвиеПЛЭД);
			
			ТекЭПЛ = СоответвиеПЛЭД.Получить(Объект.Ссылка);
			Если ТекЭПЛ <> Неопределено Тогда
				ЭПЛ            = ТекЭПЛ.ЭПЛ;
				ЭПЛ_Титул4Подписан = ТекЭПЛ.Титул4Подписан;
				
				ЕстьТитул1 = ТекЭПЛ.ЕстьТитул1;
				ЕстьТитул2 = ТекЭПЛ.ЕстьТитул2;
				ЕстьТитул3 = ТекЭПЛ.ЕстьТитул3;
				ЕстьТитул4 = ТекЭПЛ.ЕстьТитул4;
				ЕстьТитул5 = ТекЭПЛ.ЕстьТитул5;
				ЕстьТитул6 = ТекЭПЛ.ЕстьТитул6;
				
				ЕстьТитул1 = ЕстьТитул1 И ОбменСГИСЭПДКлиентСервер.ВхождениеРоли(ТекЭПЛ.РольУчастника, 1);
				ЕстьТитул2 = ЕстьТитул2 И (ОбменСГИСЭПДКлиентСервер.ВхождениеРоли(ТекЭПЛ.РольУчастника, 2) ИЛИ ТекЭПЛ.Титул2Подписан);
				ЕстьТитул6 = ЕстьТитул6 И (ОбменСГИСЭПДКлиентСервер.ВхождениеРоли(ТекЭПЛ.РольУчастника, 2) ИЛИ ТекЭПЛ.Титул6Подписан);
				ЕстьТитул3 = ЕстьТитул3 И (ОбменСГИСЭПДКлиентСервер.ВхождениеРоли(ТекЭПЛ.РольУчастника, 4) ИЛИ ТекЭПЛ.Титул3Подписан);
				ЕстьТитул4 = ЕстьТитул4 И (ОбменСГИСЭПДКлиентСервер.ВхождениеРоли(ТекЭПЛ.РольУчастника, 8) ИЛИ ТекЭПЛ.Титул4Подписан);
				ЕстьТитул5 = ЕстьТитул5 И (ОбменСГИСЭПДКлиентСервер.ВхождениеРоли(ТекЭПЛ.РольУчастника, 8) ИЛИ ТекЭПЛ.Титул5Подписан);
			КонецЕсли;
		КонецЕсли;
		Элементы.Подписи_ПерейтиТитул1.Видимость = ЕстьТитул1;
		Элементы.Подписи_ПерейтиТитул2.Видимость = ЕстьТитул2;
		Элементы.Подписи_ПерейтиТитул3.Видимость = ЕстьТитул3;
		Элементы.Подписи_ПерейтиТитул4.Видимость = ЕстьТитул4;
		Элементы.Подписи_ПерейтиТитул5.Видимость = ЕстьТитул5;
		Элементы.Подписи_ПерейтиТитул6.Видимость = ЕстьТитул6;
	ИначеЕсли ИспользоватьЖурналыТранспортныхДокументов Тогда  
		ЕстьТитул1 = Ложь;
		ЕстьТитул2 = Ложь;
		ЕстьТитул3 = Ложь;
		ЕстьТитул4 = Ложь;
		ЕстьТитул5 = Ложь;
		ЕстьТитул6 = Ложь;
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			СозданныеДокументыМедосмотр         = уатЖурналыТранспортныхДокументов.СозданныеДокументыМедосмотраПоПЛ(Объект.Ссылка);
			СозданныеДокументыКонтроляТС        = уатЖурналыТранспортныхДокументов.СозданныеДокументыКонтроляТСПоПЛ(Объект.Ссылка);
			СозданныеДокументыОсмотровОдометров = уатЖурналыТранспортныхДокументов.СозданныеДокументыОсмотровОдометровПоПЛ(Объект.Ссылка); 
			
			ЕстьТитул2 = ЗначениеЗаполнено(СозданныеДокументыМедосмотр.Предрейсовый1) ИЛИ ЗначениеЗаполнено(СозданныеДокументыМедосмотр.Предрейсовый2);
			ЕстьТитул6 = ЗначениеЗаполнено(СозданныеДокументыМедосмотр.Послерейсовый1) ИЛИ ЗначениеЗаполнено(СозданныеДокументыМедосмотр.Послерейсовый2);
			ЕстьТитул3 = ЗначениеЗаполнено(СозданныеДокументыКонтроляТС.Предрейсовый);
			ЕстьТитул4 = ЗначениеЗаполнено(СозданныеДокументыОсмотровОдометров.Предрейсовый);
			ЕстьТитул5 = ЗначениеЗаполнено(СозданныеДокументыОсмотровОдометров.Послерейсовый);
			
		КонецЕсли;
		Элементы.Подписи_ПерейтиТитул1.Видимость = ЕстьТитул1;
		Элементы.Подписи_ПерейтиТитул2.Видимость = ЕстьТитул2;
		Элементы.Подписи_ПерейтиТитул3.Видимость = ЕстьТитул3;
		Элементы.Подписи_ПерейтиТитул4.Видимость = ЕстьТитул4;
		Элементы.Подписи_ПерейтиТитул5.Видимость = ЕстьТитул5;
		Элементы.Подписи_ПерейтиТитул6.Видимость = ЕстьТитул6;
	Иначе
		Элементы.Подписи_ПерейтиТитул1.Видимость = Ложь;
		Элементы.Подписи_ПерейтиТитул2.Видимость = Ложь;
		Элементы.Подписи_ПерейтиТитул3.Видимость = Ложь;
		Элементы.Подписи_ПерейтиТитул4.Видимость = Ложь;
		Элементы.Подписи_ПерейтиТитул5.Видимость = Ложь;
		Элементы.Подписи_ПерейтиТитул6.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЭТрН(Рейс)
	
	Запрос = Новый Запрос(); 
	Запрос.УстановитьПараметр("Рейс", Рейс);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	уатСвязанныеДокументыЭПД.ЭПД КАК ЭПД
	               |ИЗ
	               |	РегистрСведений.уатСвязанныеДокументыЭПД КАК уатСвязанныеДокументыЭПД
	               |ГДЕ
	               |	уатСвязанныеДокументыЭПД.Рейс = &Рейс
	               |	И ТИПЗНАЧЕНИЯ(уатСвязанныеДокументыЭПД.ЭПД) = ТИП(Документ.ЭлектроннаяТранспортнаяНакладная)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	уатСвязанныеДокументыЭПД.ЭПД";
	Выборка   = Запрос.Выполнить().Выбрать();
	
	МассивЭПД = Новый Массив();
	Пока Выборка.Следующий() Цикл
		МассивЭПД.Добавить(Выборка.ЭПД);
	КонецЦикла;  
	
	Возврат МассивЭПД;
	
КонецФункции

#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	уатЗащищенныеФункцииСервер.уатДокументФормаСпискаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
    ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
    // Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	СгруппироватьКомандыПечати();
	УстановитьОтборПоВодителюДляПодписи();
	
	Если Не ПравоДоступа("Редактирование", Метаданные.Документы.уатПутевойЛист) Тогда 
		Элементы.ФормаИзменитьВыделенные.Видимость = Ложь;
		Элементы.СписокКонтекстноеМенюИзменитьВыделенные.Видимость = Ложь;
	КонецЕсли;

	уатОбщегоНазначенияСервер.НастроитьПолеПодразделение(Элементы.ОтборПодразделение, "ОтборОрганизация");
	
	флЭЦП = ПолучитьФункциональнуюОпцию("ИспользоватьЭлектронныеПодписи");
	флЖТД = ПолучитьФункциональнуюОпцию("уатИспользоватьЖурналыТранспортныхДокументов");
	флЭД  = ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭД");
	Элементы.ГруппаПодписи.Видимость  = флЖТД ИЛИ флЭД;
	Элементы.ФормаПодписать.Видимость = (флЖТД ИЛИ флЭД) И флЭЦП
			И ПравоДоступа("Изменение", Метаданные.РегистрыСведений.уатСостоянияПодписиПутевыхЛистов);
	Элементы.СписокКонтекстноеМенюПодписать.Видимость = Элементы.ФормаПодписать.Видимость;
	
	Если уатЖурналыТранспортныхДокументов.ТекущийПользовательКонтролерТС()
		ИЛИ уатЖурналыТранспортныхДокументов.ТекущийПользовательМедработник()
		ИЛИ уатЖурналыТранспортныхДокументов.ТекущийПользовательУполномоченныйНаПроставлениеОдометра()
		ИЛИ уатЖурналыТранспортныхДокументов.ТекущийПользовательВодитель() Тогда
		Элементы.ПроверитьДокументы.Видимость = Ложь;
	КонецЕсли;
		
	//ПодключаемоеОборудование
	уатОбщегоНазначения_проф.НастроитьПодключаемоеОборудование(ЭтотОбъект);
	//Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	уатЗащищенныеФункцииКлиент.уатДокументФормаСпискаПриОткрытии(Отказ, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ОтборВидПЛ.СписокВыбора.Очистить();
	Для Каждого ТекДоступныйВидПЛ Из уатПутевыеЛисты.уатВидыПЛ() Цикл
		Элементы.ОтборВидПЛ.СписокВыбора.Добавить(ТекДоступныйВидПЛ.Значение, ТекДоступныйВидПЛ.Представление);
	КонецЦикла;
	
	//ПодключаемоеОборудование
	уатОбщегоНазначенияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(ЭтотОбъект);
	//Конец ПодключаемоеОборудование
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		уатОбщегоНазначенияКлиент.ОбработатьСобытиеПодключаемогоОборудования(ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	Если ИмяСобытия = "ПриПолученииПодписи" Тогда
		Элементы.Список.Обновить();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	// ПодключаемоеОборудование
	уатОбщегоНазначенияКлиент.ОбработкаВнешнегоСобытия(Источник, Событие, Данные);
	// Конец ПодключаемоеОборудование
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтборОрганизацияПриИзменении(Элемент)
	УстановитьОтбор();
КонецПроцедуры

&НаКлиенте
Процедура ОтборПодразделениеПриИзменении(Элемент)
	УстановитьОтбор();
КонецПроцедуры

&НаКлиенте
Процедура ОтборВидПЛПриИзменении(Элемент)
	УстановитьОтбор();
КонецПроцедуры

&НаКлиенте
Процедура ОтборВодительПриИзменении(Элемент)
	УстановитьОтбор();
КонецПроцедуры

&НаКлиенте
Процедура ОтборВодительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ДиалогВыбораСотрудника(Элемент, ОтборВодитель, Новый Структура(), СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ОтборВодительОткрытие(Элемент, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ОткрытьФормуСотрудника(ОтборВодитель, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ОтборВодительАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	Если Ожидание = 0 Тогда //выбор из списка
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("ДатаСреза", ТекущаяДата());
	уатИнтерфейсВводаСотрудников.СотрудникАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура ОтборВодительОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	СтруктураПараметров = Новый Структура("ДатаСреза", ТекущаяДата());
	уатИнтерфейсВводаСотрудников.СотрудникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура мТСПриИзменении(Элемент)
	УстановитьОтбор();
КонецПроцедуры

&НаКлиенте
Процедура мТСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.РеквизитТСНачалоВыбора(Элемент, мТС, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура мТСАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.РеквизитТСАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура мТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.РеквизитТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормы_Список

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.Список, Список);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьДокументы(Команда)
	ТекДок = Элементы.Список.ТекущиеДанные;
	Если ТекДок <> Неопределено Тогда
		уатОбщегоНазначенияКлиент.ОткрытьОтчетПоДокументамТСиВодителей(ТекДок.Ссылка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбнулитьСчетчикРаспечатанныхКопийПЛ(Команда)
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбнулитьСчетчикРаспечатанныхКопийПЛСервер(ТекущиеДанные.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура Подписать(Команда)
	
	Если НЕ уатЗащищенныеФункцииКлиент.ИТСОтраслевой_ПроверкаДоступностиСервисов() Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКлючевойОперации = "уатОперации.ПодписаниеЭПЛизПЛУАТ";
	ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики(ИмяКлючевойОперации, 1);

	Если флЭД Тогда
		ТекущиеДанные = Элементы.Список.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		мсвДокументы = Новый Массив();
		мсвДокументы.Добавить(ТекущиеДанные.Ссылка);
		
		Если НЕ уатЖурналыТранспортныхДокументов.ПроверитьЧтоПроведенПередПодписью(мсвДокументы) Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыОткрытия = Новый Структура("мсвДокументы", мсвДокументы);
		ОткрытьФорму("Документ.уатПутевойЛист.Форма.ФормаПодписейОтвЛица", ПараметрыОткрытия, ЭтотОбъект);
	Иначе
		ДопПараметры = Новый Структура("ОповеститьОЗавершении", Истина);
		уатЖурналыТранспортныхДокументовКлиент.ПодписатьИзСписка(Элементы.Список, УникальныйИдентификатор, ДопПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьQR(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СостоянияПодписейПЛ = Новый Соответствие();
	СоответвиеПЛЭД      = Новый Соответствие();
	мсвПутевыеЛисты     = Новый Массив();
	мсвПутевыеЛисты.Добавить(ТекущиеДанные.Ссылка);
	уатОбменСГИСЭПД.ЗаполнитьСостоянияПЛ(мсвПутевыеЛисты, СостоянияПодписейПЛ, СоответвиеПЛЭД);  
	ТекЭПЛ = СоответвиеПЛЭД.Получить(ТекущиеДанные.Ссылка);
	
	Если ТекЭПЛ <> Неопределено Тогда
		ЭПЛ                = ТекЭПЛ.ЭПЛ;
		ЭПЛ_Титул4Подписан = ТекЭПЛ.Титул4Подписан;
	Иначе
		ПоказатьПредупреждение(, НСтр("ru='Для формирования QR-кода необходимо создать ЭПЛ.'"));
		Возврат;
	КонецЕсли;
	
	Если ЭПЛ_Титул4Подписан = Ложь Тогда
		ПоказатьПредупреждение(, НСтр("ru='Для формирования QR-кода требуется оформить титул внесения показаний одометра при выезде.'"));
	Иначе 
		СтруктураДанных = ПолучитьЗначенияРеквизитов(ЭПЛ, "УИДМинтранс,
		|ТитулОформлениеНомерПутевогоЛиста,ТитулОформлениеДатаПутевогоЛиста,ИдентификаторОформителя");
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("УИДМинтранс", СтруктураДанных.УИДМинтранс);
		ПараметрыФормы.Вставить("Отправитель", СтруктураДанных.ИдентификаторОформителя);
		ПараметрыФормы.Вставить("НомерДокумента", СтруктураДанных.ТитулОформлениеНомерПутевогоЛиста);
		ПараметрыФормы.Вставить("ДатаДокумента", СтруктураДанных.ТитулОформлениеДатаПутевогоЛиста); 
		ПараметрыФормы.Вставить("ТипДокумента", ПредопределенноеЗначение("Перечисление.ТипыДокументовЭДО.ЭПЛ"));
		
		ОткрытьФорму("ОбщаяФорма.ОтправкаQR", 
		ПараметрыФормы, 
		ЭтотОбъект, 
		УникальныйИдентификатор, , , , РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Элементы.Список);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура УстановитьОтбор()
	Если ЗначениеЗаполнено(ОтборОрганизация) Тогда
		уатОбщегоНазначенияКлиент.УстановитьОтборУСписка(Список.Отбор, "Организация", ОтборОрганизация);
	Иначе
		уатОбщегоНазначенияКлиент.УстановитьОтборУСписка(Список.Отбор, "Организация",,, Ложь);
	КонецЕсли;
	Если ЗначениеЗаполнено(мТС) Тогда
		уатОбщегоНазначенияКлиент.УстановитьОтборУСписка(Список.Отбор, "ТранспортноеСредство", мТС);
	Иначе
		уатОбщегоНазначенияКлиент.УстановитьОтборУСписка(Список.Отбор, "ТранспортноеСредство",,, Ложь);
	КонецЕсли;
	Если ЗначениеЗаполнено(ОтборВодитель) Тогда
		уатОбщегоНазначенияКлиент.УстановитьОтборУСписка(Список.Отбор, "Водитель1", ОтборВодитель);
	Иначе
		уатОбщегоНазначенияКлиент.УстановитьОтборУСписка(Список.Отбор, "Водитель1",,, Ложь);
	КонецЕсли;
	Если ЗначениеЗаполнено(ОтборВидПЛ) Тогда
		уатОбщегоНазначенияКлиент.УстановитьОтборУСписка(Список.Отбор, "ВидПЛ", ОтборВидПЛ);
	Иначе
		уатОбщегоНазначенияКлиент.УстановитьОтборУСписка(Список.Отбор, "ВидПЛ",,, Ложь);
	КонецЕсли;
	Если ЗначениеЗаполнено(ОтборПодразделение) Тогда
		уатОбщегоНазначенияКлиент.УстановитьОтборУСписка(Список.Отбор, "Подразделение", ОтборПодразделение);
	Иначе
		уатОбщегоНазначенияКлиент.УстановитьОтборУСписка(Список.Отбор, "Подразделение",,, Ложь);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СгруппироватьКомандыПечати()
	
	РазмещенныеКомандыПечати = Новый Массив();
	Для Каждого ТекКоманда Из Элементы.ПодменюПечатьОбычное.ПодчиненныеЭлементы Цикл 
		РазмещенныеКомандыПечати.Добавить(ТекКоманда);
	КонецЦикла;
	
	ГруппаПечатьПриВыезде = Элементы.Добавить(
		"ПодменюПечатьОбычное_уатГруппаВыезд", 
		Тип("ГруппаФормы"), 
		Элементы.ПодменюПечатьОбычное
	);
	ГруппаПечатьПриВыезде.Вид = ВидГруппыФормы.ГруппаКнопок;
	
	ГруппаПечатьПриВозврате = Элементы.Добавить(
		"ПодменюПечатьОбычное_уатГруппаВозврат", 
		Тип("ГруппаФормы"), 
		Элементы.ПодменюПечатьОбычное
	);
	ГруппаПечатьПриВозврате.Вид = ВидГруппыФормы.ГруппаКнопок;
	
	ГруппаПечатьПрочее = Элементы.Добавить(
		"ПодменюПечатьОбычное_уатГруппаПрочее", 
		Тип("ГруппаФормы"), 
		Элементы.ПодменюПечатьОбычное
	);
	ГруппаПечатьПрочее.Вид = ВидГруппыФормы.ГруппаКнопок;
	
	Для Каждого ТекКоманда Из РазмещенныеКомандыПечати Цикл 
		Если ТекКоманда.ИмяКоманды = "ПодменюПечатьОбычное_ПечататьЛицСторону"
				Или ТекКоманда.ИмяКоманды = "ПодменюПечатьОбычное_ПечататьОбрСторону"
				Или ТекКоманда.ИмяКоманды = "ПодменюПечатьОбычное_ПечатьВесьДокумент" Тогда 
			Элементы.Переместить(ТекКоманда, ГруппаПечатьПриВыезде);
			
		ИначеЕсли ТекКоманда.ИмяКоманды = "ПодменюПечатьОбычное_ПечатьВесьДокументПолная"
				Или ТекКоманда.ИмяКоманды = "ПодменюПечатьОбычное_ПечататьОбрСторонуПолная"
				Или ТекКоманда.ИмяКоманды = "ПодменюПечатьОбычное_ПечататьЛицСторонуПолная" Тогда
			Элементы.Переместить(ТекКоманда, ГруппаПечатьПриВозврате);
			
		Иначе 
			Элементы.Переместить(ТекКоманда, ГруппаПечатьПрочее);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбнулитьСчетчикРаспечатанныхКопийПЛСервер(ПЛ)
	
	НаборЗаписей = РегистрыСведений.уатКоличествоРаспечатанныхКопийПЛ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ПутевойЛист.Установить(ПЛ);
	НаборЗаписей.Прочитать();
	УдаляемыеЗаписи = Новый Массив();
	Для Каждого ТекЗапись Из НаборЗаписей Цикл
		УдаляемыеЗаписи.Добавить(ТекЗапись);
	КонецЦикла;
	
	Для Каждого ТекЗапись Из УдаляемыеЗаписи Цикл
		НаборЗаписей.Удалить(ТекЗапись);
	КонецЦикла;
	
	Попытка
		НаборЗаписей.Записать();
	Исключение
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоВодителюДляПодписи()
	Если НЕ уатЖурналыТранспортныхДокументов.ТекущийПользовательВодитель() Тогда
		Возврат;
	КонецЕсли;
	
	ТекПользователь = Пользователи.АвторизованныйПользователь();
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	Сотрудники.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Сотрудники КАК Сотрудники
	|ГДЕ
	|	Сотрудники.ФизическоеЛицо = &ФизическоеЛицо
	|	И НЕ Сотрудники.ПометкаУдаления
	|	И НЕ Сотрудники.ЭтоГруппа");
	Запрос.УстановитьПараметр("ФизическоеЛицо", ТекПользователь.ФизическоеЛицо);
	мсвВодители = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	списВодители = Новый СписокЗначений;
	списВодители.ЗагрузитьЗначения(мсвВодители);
	
	ГруппаОтбор = Список.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбор.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	ОтборВодитель1 = ГруппаОтбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборВодитель1.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Водитель1");
	ОтборВодитель1.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборВодитель1.ПравоеЗначение = списВодители;
	ОтборВодитель1.Использование = Истина;
	ОтборВодитель2 = ГруппаОтбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборВодитель2.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Водитель2");
	ОтборВодитель2.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	ОтборВодитель2.ПравоеЗначение = списВодители;
	ОтборВодитель2.Использование = Истина;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначенияРеквизитов(Объект, ИменаРеквизитов)
	Возврат уатОбщегоНазначенияТиповые.ПолучитьЗначенияРеквизитов(Объект, ИменаРеквизитов);
КонецФункции

#КонецОбласти

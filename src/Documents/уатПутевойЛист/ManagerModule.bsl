#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	Настройки.ПриПолученииСлужебныхРеквизитов = Ложь;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатПутевойЛист";
	КомандаПечати.Идентификатор  = "ПечатьВесьДокумент";
	КомандаПечати.Представление  = НСтр("en='Print whole waybill at departure';ru='Печатать весь пут. лист при выезде'");
	КомандаПечати.Порядок        = 1;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатПутевойЛист";
	КомандаПечати.Идентификатор  = "ПечататьЛицСторону";
	КомандаПечати.Представление  = НСтр("en='Print fron. side at departure';ru='Печатать лиц. сторону при выезде'");
	КомандаПечати.Порядок        = 2;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатПутевойЛист";
	КомандаПечати.Идентификатор  = "ПечататьОбрСторону";
	КомандаПечати.Представление  = НСтр("en='Print rev. side at departure';ru='Печатать обр. сторону при выезде'");
	КомандаПечати.Порядок        = 3;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатПутевойЛист";
	КомандаПечати.Идентификатор  = "ПечатьВесьДокументПолная";
	КомандаПечати.Представление  = НСтр("en='Print whole waybill at return';ru='Печатать весь пут. лист при возвращении'");
	КомандаПечати.Порядок        = 4;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатПутевойЛист";
	КомандаПечати.Идентификатор  = "ПечататьЛицСторонуПолная";
	КомандаПечати.Представление  = НСтр("en='Print fr. side while return';ru='Печатать лиц. сторону при возвращении'");
	КомандаПечати.Порядок        = 5;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатПутевойЛист";
	КомандаПечати.Идентификатор  = "ПечататьОбрСторонуПолная";
	КомандаПечати.Представление  = НСтр("en='Print rev. side at return';ru='Печатать обр. сторону при возвращении'");
	КомандаПечати.Порядок        = 6;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатПутевойЛист";
	КомандаПечати.Идентификатор  = "МаршрутныйЛистПоЗаданию";
	КомандаПечати.Представление  = НСтр("en='Routing list by task';ru='Маршрутный лист по заданию'");
	КомандаПечати.Порядок        = 7;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатПутевойЛист";
	КомандаПечати.Идентификатор  = "ЭСМ7";
	КомандаПечати.Представление  = НСтр("en='ESM-7';ru='ЭСМ-7'");
	КомандаПечати.Порядок        = 8;
		
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр).
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной
//                                                            параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной
//                                            параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт

	Если НЕ уатОбщегоНазначенияСервер.РазрешениеПечатиНепроведенногоДокумента(МассивОбъектов) Тогда
		Возврат;
	КонецЕсли;

	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "МаршрутныйЛистПоЗаданию") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "МаршрутныйЛистПоЗаданию", "Маршрутный лист по заданию", ПечататьМаршрутныйЛистПоЗаданию(МассивОбъектов, ОбъектыПечати));
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПечататьЛицСторону") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПечататьЛицСторону",
		"Печатать лиц. сторону при выезде", ПечататьЛицСторону(МассивОбъектов, ОбъектыПечати));
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПечататьОбрСторону") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПечататьОбрСторону",
		"Печатать обр. сторону при выезде", ПечататьОбрСторону(МассивОбъектов, ОбъектыПечати));
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПечатьВесьДокумент") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПечатьВесьДокумент",
		"Печатать весь пут. лист при выезде", ПечатьВесьДокумент(МассивОбъектов, ОбъектыПечати));
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПечатьВесьДокументПолная") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПечатьВесьДокументПолная",
		"Печатать весь пут. лист при возвращении", ПечатьВесьДокументПолная(МассивОбъектов, ОбъектыПечати));
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПечататьОбрСторонуПолная") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПечататьОбрСторонуПолная",
		"Печатать обр. сторону при возвращении", ПечататьОбрСторонуПолная(МассивОбъектов, ОбъектыПечати));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПечататьЛицСторонуПолная") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПечататьЛицСторонуПолная",
		"Печатать лиц. сторону при возвращении", ПечататьЛицСторонуПолная(МассивОбъектов, ОбъектыПечати));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЭСМ7") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ЭСМ7", "ЭСМ-7", уатПечать_ЭСМ7(МассивОбъектов, ОбъектыПечати));
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Автокран") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Автокран", "Автокран", уатПечать_Автокран(МассивОбъектов, ОбъектыПечати));
	Иначе
		Возврат;
	КонецЕсли;
	
	уатОбщегоНазначенияСервер.УстановитьРедактированиеПечатныхФормДокумента(КоллекцияПечатныхФорм);
	уатУправлениеПечатью.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов, КоллекцияПечатныхФорм);
	
КонецПроцедуры // Печать

// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.УправлениеДоступом

// Позволяет переопределить ограничение, указанное в модуле менеджера объекта метаданных.
//
// Параметры:
//  Ограничение - Структура:
//    * Текст                             - Строка - ограничение доступа для пользователей.
//                                          Если пустая строка, значит, доступ разрешен.
//    * ТекстДляВнешнихПользователей      - Строка - ограничение доступа для внешних пользователей.
//                                          Если пустая строка, значит, доступ запрещен.
//    * ПоВладельцуБезЗаписиКлючейДоступа - Неопределено - определить автоматически.
//                                        - Булево - если Ложь, то всегда записывать ключи доступа,
//                                          если Истина, тогда не записывать ключи доступа,
//                                          а использовать ключи доступа владельца (требуется,
//                                          чтобы ограничение было строго по объекту-владельцу).
//   * ПоВладельцуБезЗаписиКлючейДоступаДляВнешнихПользователей - Неопределено, Булево - также
//                                          как у параметра ПоВладельцуБезЗаписиКлючейДоступа.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Подразделение)";
	
	Ограничение.ТекстДляВнешнихПользователей = Ограничение.Текст;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// СтандартныеПодсистемы.ВариантыОтчетов

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВариантыОтчетов

#КонецОбласти

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	Если ПравоДоступа("Редактирование", Метаданные.Документы.уатПутевойЛист) Тогда
		уатОбменСГИСЭПД.ДобавитьКомандуЭТрНСоздатьНаОсновании(КомандыСозданияНаОсновании);
		уатОбменСГИСЭПД.ДобавитьКомандуЭПЛСоздатьНаОсновании(КомандыСозданияНаОсновании);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	СтруктураДополнительныеСвойства.Вставить("ТаблицаПростоевБезОбедов", ТаблицаПростоевБезОбедов(ДокументСсылка));
	
	СформироватьТаблицаСостояниеТС(ДокументСсылка, СтруктураДополнительныеСвойства);
	СформироватьТаблицаПланированияРаботыТС(ДокументСсылка, СтруктураДополнительныеСвойства);
	Если ДокументСсылка.Рассчитан Тогда
		СформироватьТаблицаСчетчикиТС(ДокументСсылка, СтруктураДополнительныеСвойства);
		СформироватьТаблицаВыработкаТС(ДокументСсылка, СтруктураДополнительныеСвойства);
		СформироватьТаблицаВыработкаСотрудников(ДокументСсылка, СтруктураДополнительныеСвойства);
		СформироватьТаблицаПростоев(ДокументСсылка, СтруктураДополнительныеСвойства);
		СформироватьТаблицаГСМ(ДокументСсылка, СтруктураДополнительныеСвойства);
		СформироватьТаблицаРасходГСМ(ДокументСсылка, СтруктураДополнительныеСвойства);
		СформироватьТаблицаПартииТЖ(ДокументСсылка, СтруктураДополнительныеСвойства);
		СформироватьТаблицаОборотыТЖ(ДокументСсылка, СтруктураДополнительныеСвойства);
		СформироватьТаблицаИзносПробегШин(ДокументСсылка, СтруктураДополнительныеСвойства);
		СформироватьТаблицуПараметровВыработкиПользовательскихАгрегатов(ДокументСсылка, СтруктураДополнительныеСвойства);
		СформироватьТаблицаОсновныеНачисления(ДокументСсылка, СтруктураДополнительныеСвойства);
		Если уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументСсылка.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.УчетРабочегоВремени) Тогда
			СформироватьТаблицаРабочееВремяРаботниковОрганизаций(ДокументСсылка, СтруктураДополнительныеСвойства);
		КонецЕсли;
		СформироватьТаблицаРасходы(ДокументСсылка, СтруктураДополнительныеСвойства);
	КонецЕсли;
	
	Если Константы.уатЗакрытиеЗаказовНаТСПутевымиЛистами.Получить() = Истина Тогда
		СформироватьТаблицаЗаказыГрузоотправителей(ДокументСсылка, СтруктураДополнительныеСвойства);
		СформироватьТаблицаГрузыКПеревозке(ДокументСсылка, СтруктураДополнительныеСвойства);
		СформироватьТаблицаСтатусыГрузов(ДокументСсылка, СтруктураДополнительныеСвойства);
	КонецЕсли;
КонецПроцедуры // ИнициализироватьДанныеДокумента()

Процедура ВыполнитьКонтроль(ДокументСсылка, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь) Экспорт
	Заголовок = уатОбщегоНазначенияТиповые.уатПредставлениеДокументаПриПроведении(ДокументСсылка);
	
	Если ДокументСсылка.Рассчитан Тогда
		Для Каждого ТекСтрока Из ДокументСсылка.РасходГСМ Цикл
			Если НЕ ТекСтрока.Активен Тогда
				Продолжить;
			КонецЕсли;
			
			МоментВремени = Новый Граница(ДокументСсылка.ДатаЗакрытия, ВидГраницы.Включая);
			
			Если уатГСМ.ЭтоТехническаяЖидкость(ТекСтрока.ГСМ) Тогда
				ОстатокТЖ = уатГСМ.ОстатокТЖнаТС(ТекСтрока.ТС, ТекСтрока.ГСМ, МоментВремени);
				Если ОстатокТЖ < 0 Тогда
					ТекстНСТР = НСтр("en='Liquids ""%1"",vehicle ""%2"" - negative remains of liquids in vehicle (%3).';ru='ТЖ ""%1"", ТС ""%2"" - отрицательный остаток ТЖ в ТС (%3).'");
					ТекстНСТР = СтрШаблон(ТекстНСТР, ТекСтрока.ГСМ, Строка(ТекСтрока.ТС), ОстатокТЖ);
					уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, Отказ, Заголовок);
				КонецЕсли;
			Иначе
				ОстатокГСМ = уатОбщегоНазначения.уатОстатокГСМнаТС(МоментВремени, ТекСтрока.ТС, ТекСтрока.ГСМ, ДокументСсылка);
				Если ОстатокГСМ < 0 Тогда
					ТекстНСТР = НСтр("en='Fuels ""%1"",vehicle ""%2"" - negative remains of fuels in vehicle (%3).';ru='ГСМ ""%1"", ТС ""%2"" - отрицательный остаток ГСМ в ТС (%3).'");
					ТекстНСТР = СтрШаблон(ТекстНСТР, ТекСтрока.ГСМ, Строка(ТекСтрока.ТС), ОстатокГСМ);
					уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, Отказ, Заголовок);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Константы.уатЗакрытиеЗаказовНаТСПутевымиЛистами.Получить() = Истина Тогда
		ТаблицаЗаказовГрузоотправителяСвернутая = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаГрузовКПеревозке.Скопировать();
		ТаблицаЗаказовГрузоотправителяСвернутая.Свернуть("ЗаказГрузоотправителя, Номенклатура", "Количество");
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	ТаблицаЗаказовГрузоотправителя.ЗаказГрузоотправителя КАК Заказ,
		|	ТаблицаЗаказовГрузоотправителя.Номенклатура КАК Номенклатура,
		|	ТаблицаЗаказовГрузоотправителя.Количество КАК Количество
		|ПОМЕСТИТЬ ВРТ_ДвиженияСвернутая
		|ИЗ
		|	&ТаблицаЗаказовГрузоотправителяСвернутая КАК ТаблицаЗаказовГрузоотправителя
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ВРТ_ДвиженияСвернутая.Номенклатура КАК Номенклатура,
		|	ВРТ_ДвиженияСвернутая.Заказ КАК Заказ,
		|	ЕСТЬNULL(уатЗаказыГрузоотправителейОстатки.ЕдиницаИзмерения, уатГрузыКПеревозке_уэ.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
		|	ВРТ_ДвиженияСвернутая.Количество КАК КоличествоСписание,
		|	ЕСТЬNULL(уатЗаказыГрузоотправителейОстатки.КоличествоОстаток, 0) КАК КоличествоОстаток,
		|	ЕСТЬNULL(уатГрузыКПеревозке_уэ.КоличествоОстаток, 0) КАК КоличествоОстатокКПеревозке,
		|	ЕСТЬNULL(уатЗаказыГрузоотправителейОстатки.КоличествоОстаток, 0) + ВРТ_ДвиженияСвернутая.Количество КАК КоличествоДоступныйОстаток,
		|	ЕСТЬNULL(уатГрузыКПеревозке_уэ.КоличествоОстаток, 0) + ВРТ_ДвиженияСвернутая.Количество КАК КоличествоДоступныйОстатокКПеревозке
		|ИЗ
		|	ВРТ_ДвиженияСвернутая КАК ВРТ_ДвиженияСвернутая
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.уатЗаказыГрузоотправителей.Остатки(
		|				,
		|				ЗаказГрузоотправителя В
		|					(ВЫБРАТЬ
		|						ВРТ_ДвиженияСвернутая.Заказ
		|					ИЗ
		|						ВРТ_ДвиженияСвернутая КАК ВРТ_ДвиженияСвернутая)) КАК уатЗаказыГрузоотправителейОстатки
		|		ПО ВРТ_ДвиженияСвернутая.Заказ = уатЗаказыГрузоотправителейОстатки.ЗаказГрузоотправителя
		|			И ВРТ_ДвиженияСвернутая.Номенклатура = уатЗаказыГрузоотправителейОстатки.Номенклатура
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.уатГрузыКПеревозке_уэ.Остатки(
		|				,
		|				ЗаказГрузоотправителя В
		|					(ВЫБРАТЬ
		|						ВРТ_ДвиженияСвернутая.Заказ
		|					ИЗ
		|						ВРТ_ДвиженияСвернутая КАК ВРТ_ДвиженияСвернутая)) КАК уатГрузыКПеревозке_уэ
		|		ПО ВРТ_ДвиженияСвернутая.Заказ = уатГрузыКПеревозке_уэ.ЗаказГрузоотправителя
		|			И ВРТ_ДвиженияСвернутая.Номенклатура = уатГрузыКПеревозке_уэ.Номенклатура
		|ГДЕ
		|	ЕСТЬNULL(уатЗаказыГрузоотправителейОстатки.КоличествоОстаток, 0) < 0
		|	ИЛИ ЕСТЬNULL(уатГрузыКПеревозке_уэ.КоличествоОстаток, 0) < 0");
		Запрос.УстановитьПараметр("МоментВремени", ДополнительныеСвойства.ДляПроведения.МоментКонтроля);
		Запрос.УстановитьПараметр("ТаблицаЗаказовГрузоотправителяСвернутая", ТаблицаЗаказовГрузоотправителяСвернутая);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если Выборка.КоличествоОстаток < 0 ИЛИ Выборка.КоличествоОстатокКПеревозке < 0 Тогда
				Если Выборка.Заказ.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам Тогда
					СтрокаСообщения = СтрШаблон(
						"Превышено количество по: %1, %2
						|Доступный остаток: %3 %4",
						Выборка.Заказ, Выборка.Номенклатура,
						?(Выборка.КоличествоОстаток >= 0,
							Выборка.КоличествоДоступныйОстатокКПеревозке, Выборка.КоличествоДоступныйОстаток),
						Выборка.ЕдиницаИзмерения);
				Иначе
					СтрокаСообщения = СтрШаблон(
						"Заказ уже был выполнен ранее: %1",
						Выборка.Заказ);
				КонецЕсли;
				уатОбщегоНазначенияТиповые.СообщитьОбОшибке(СтрокаСообщения, Отказ, Заголовок);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры 

Функция ТаблицаПростоевБезОбедов(ДокументПЛ) Экспорт
	
	тблПростои = ДокументПЛ.Простои.Выгрузить();
	тблПростои.Колонки.НачалоПростоя.Имя = "Начало";
	тблПростои.Колонки.КонецПростоя.Имя  = "Конец";
	тблПростои.Колонки.ВключенДвигатель.Имя  = "ПростойСВклДвиг";
	тблПростои.Колонки.Добавить("ВидВремени");
	тблПростои.Колонки.Добавить("УменьшатьПростойНаВремяОбеда");
	тблПростои.Колонки.Добавить("Продолжительность");
	Для Каждого ТекСтрокаПростой Из тблПростои Цикл
		ТекСтрокаПростой.ВидВремени                   = "Простой";
		ТекСтрокаПростой.УменьшатьПростойНаВремяОбеда = ТекСтрокаПростой.ВидПростоя.УменьшатьПростойНаВремяОбеда;
		ТекСтрокаПростой.Продолжительность            = ТекСтрокаПростой.ВремяПростоя - '00010101';
		ТекСтрокаПростой.Конец                        = ТекСтрокаПростой.Начало + ТекСтрокаПростой.Продолжительность;
	КонецЦикла;
		
	флОднодневныйПЛ = (ДокументПЛ.ДатаВозвращения - ДокументПЛ.ДатаВыезда) <= 86400;
	флОднодневныйНочнойПЛ = флОднодневныйПЛ И НачалоДня(ДокументПЛ.ДатаВыезда) <> НачалоДня(ДокументПЛ.ДатаВозвращения);
	мПродолжительностьОбеда = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(
		ДокументПЛ.Организация, "ПродолжительностьОбеда") - '00010101';
	мВремяДоОбеда = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(
		ДокументПЛ.Организация, "ВремяДоОбеда") - '00010101';
		
	ТекДата = НачалоДня(ДокументПЛ.ДатаВыезда);
	Сч = 1;
	Пока ТекДата <= НачалоДня(ДокументПЛ.ДатаВозвращения) Цикл
		тблОбеды = уатПутевыеЛисты.РасчетОбедовНаДень(ТекДата, ДокументПЛ.РежимРаботыТС, мПродолжительностьОбеда, мВремяДоОбеда,
			тблПростои, ДокументПЛ.ДатаВыезда, ДокументПЛ.ДатаВозвращения, флОднодневныйНочнойПЛ);
	
		уатПутевыеЛисты.ПересечениеИнтервалов(тблПростои, тблОбеды,, Истина);
		
		ТекДата = ТекДата + 86400;
		Сч = Сч + 1;
	КонецЦикла;
	
	Возврат тблПростои;
	
КонецФункции


#Область Печать

// Формирует печатную форму путевых листов 3
//
// Параметры:
//  ИмяМакета - табличный документ
//  ФлагПечати: 0 - весь п/л, 1 - лиц. сторона, 2 - обр. сторона
Функция уатПечать_3(ТекущийДокумент, ИмяМакета, ФлагПечати="") Экспорт
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.уатПутевойЛист." + ИмяМакета);
	мМаксСтрок = 18;
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПутевойЛист_ПутевойЛист";
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабДокумент.ПолеСверху 	= 0;
	ТабДокумент.ПолеСлева 	= 0;
	ТабДокумент.ПолеСнизу 	= 0;
	ТабДокумент.ПолеСправа 	= 0;
	
	// лицевая сторона
	Если ФлагПечати <>  2 И ФлагПечати <> 3 Тогда
		
		Обл = Макет.ПолучитьОбласть("Лицевая");

		// номера и дата приказа Минтранса РФ
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыПриказаМинтранса(ТекущийДокумент.Дата));
		
		// реквизиты шапки
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыШапкиДляПечати(ТекущийДокумент, ФлагПечати));
		
		// ТС 
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыТСДляПечати(ТекущийДокумент.ТранспортноеСредство));

		// прицепы
		МассивПрицепов = ПолучитьМассивПрицеповПЛ(ТекущийДокумент);
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыПрицеповДляПечати(МассивПрицепов));

		// водитель 1
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыВодителяДляПечати(ТекущийДокумент.Водитель1, 1, 
			ТекущийДокумент.Дата, ТекущийДокумент.Организация));
		
		// водитель 2
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыВодителяДляПечати(ТекущийДокумент.Водитель2, 2, 
			ТекущийДокумент.Дата, ТекущийДокумент.Организация));
			
		// подписи ответственных лиц
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьОтветственныхДляПечати(ТекущийДокумент));

		// медосмотр
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыМедосмотраДляПечати(ТекущийДокумент));

		// ГСМ
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыГСМДляПечати(ТекущийДокумент, ФлагПечати));
		
		// Задание водителю
		// Параметры первой строки задания
		Если ТекущийДокумент.Задание.Количество() > 0 Тогда
			ТекСтрока = ТекущийДокумент.Задание[0]; 
			Если ЗначениеЗаполнено(ТекСтрока.Контрагент) Тогда
				Обл.Параметры.ВРаспоряжение	= ТекСтрока.Контрагент.НаименованиеПолное;
			ИначеЕсли ЗначениеЗаполнено(ТекСтрока.Подразделение) Тогда
				Обл.Параметры.ВРаспоряжение	= ТекСтрока.Подразделение.Наименование;
			КонецЕсли;	
			Обл.Параметры.АдресПрибытия	= уатОбщегоНазначения.ПолучитьАдресСтрокой(ТекСтрока.АдресПрибытия);
		КонецЕсли;
		
		ТабДокумент.Вывести(Обл);  
		
	КонецЕсли;
	
	// новая страница для печати полного путевого листа
	Если ФлагПечати = 0 Или ФлагПечати = 4 Тогда	
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	
	// оборотная сторона
	Если ФлагПечати <> 1 И ФлагПечати <> 5 Тогда
		
		Обл = Макет.ПолучитьОбласть("Оборотная");
		
		Если ФлагПечати = 3 Или ФлагПечати = 4 Тогда
			
			Для Каждого ТекСтрока из ТекущийДокумент.Задание Цикл
				ТекИндекс = ТекущийДокумент.Задание.Индекс(ТекСтрока) + 1;
				Если ТекИндекс > мМаксСтрок Тогда
					Прервать;
				КонецЕсли;
				стрОбласть = "Номер" + Строка(ТекИндекс);
				Обл.Область(стрОбласть).Текст = ТекСтрока.НомерСтроки;
				стрОбласть = "ПунктОтправления" + Строка(ТекИндекс);
				Обл.Область(стрОбласть).Текст = уатОбщегоНазначения.ПолучитьАдресСтрокой(ТекСтрока.АдресПрибытия);
				стрОбласть = "ПунктНазначения" + Строка(ТекИндекс);
				Обл.Область(стрОбласть).Текст = уатОбщегоНазначения.ПолучитьАдресСтрокой(ТекСтрока.АдресУбытия);
				стрОбласть = "ВремяВыездаЧасы" + Строка(ТекИндекс);
				Обл.Область(стрОбласть).Текст = Формат(ТекСтрока.ВремяПрибытия,"ДФ=HH");
				стрОбласть = "ВремяВыездаМин" + Строка(ТекИндекс);
				Обл.Область(стрОбласть).Текст = Формат(ТекСтрока.ВремяПрибытия,"ДФ=mm");
				стрОбласть = "ВремяВозвращенияЧасы" + Строка(ТекИндекс);
				Обл.Область(стрОбласть).Текст = Формат(ТекСтрока.ВремяУбытия,"ДФ=HH");
				стрОбласть = "ВремяВозвращенияМин" + Строка(ТекИндекс);
				Обл.Область(стрОбласть).Текст = Формат(ТекСтрока.ВремяУбытия,"ДФ=mm");
				стрОбласть = "ПройденоКм" + Строка(ТекИндекс);
				Обл.Область(стрОбласть).Текст = Строка((ТекСтрока.КоличествоКмГруз  + ТекСтрока.КоличествоКмПорожний) * ТекСтрока.КоличествоЕздок);
			КонецЦикла;  
			
			ВыработкаТС = ТекущийДокумент.ВыработкаТС.Выгрузить();
			ВыработкаТС.Свернуть("ТС,ПараметрВыработки","Количество");
			
			Отбор = Новый Структура("ТС,ПараметрВыработки");
			Отбор.Вставить("ТС",ТекущийДокумент.ТранспортноеСредство);
			Отбор.Вставить("ПараметрВыработки",Справочники.уатПараметрыВыработки.ВремяВНаряде);
			ВремяВНаряде = ВыработкаТС.НайтиСтроки(Отбор);
			Если ВремяВНаряде.Количество() > 0 Тогда
				Обл.Параметры.ВремяВНаряде = Формат(уатОбщегоНазначения.уатВремяВЧЧ_ММ(ВремяВНаряде[0].Количество),"ЧДЦ=2; ЧРД=:");
			КонецЕсли;   
			
			Отбор.Вставить("ПараметрВыработки",Справочники.уатПараметрыВыработки.ПробегОбщий);
			ПробегОбщий  = ВыработкаТС.НайтиСтроки(Отбор);
			Если ПробегОбщий.Количество() > 0 Тогда
				Обл.Параметры.ПробегОбщий = ПробегОбщий[0].Количество;
			КонецЕсли;
			
		КонецЕсли;
		
		ТабДокумент.Вывести(Обл);  
		
	КонецЕсли;

	Возврат ТабДокумент;
	
КонецФункции // Печать_3()

// Формирует печатную форму путевых листов 3спец
//
// Параметры:
//  ИмяМакета - табличный документ
//  ФлагПечати: 0 - весь п/л, 1 - лиц. сторона, 2 - обр. сторона
Функция уатПечать_3Спец(ТекущийДокумент, ИмяМакета, ФлагПечати="") Экспорт
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.уатПутевойЛист." + ИмяМакета);
	мМаксСтрок = 5;
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПутевойЛист_ПутевойЛист";
	ТабДокумент.ПолеСверху 	= 0;
	ТабДокумент.ПолеСлева 	= 0;
	ТабДокумент.ПолеСнизу 	= 0;
	ТабДокумент.ПолеСправа 	= 0;
	
	// лицевая сторона
	Если ФлагПечати <> 2 И ФлагПечати <> 3 Тогда 
		
		Обл = Макет.ПолучитьОбласть("Лицевая");

		// номера и дата приказа Минтранса РФ
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыПриказаМинтранса(ТекущийДокумент.Дата));
		
		// реквизиты шапки
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыШапкиДляПечати(ТекущийДокумент, ФлагПечати));
		
		// ТС 
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыТСДляПечати(ТекущийДокумент.ТранспортноеСредство));

		// прицепы
		МассивПрицепов = ПолучитьМассивПрицеповПЛ(ТекущийДокумент);
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыПрицеповДляПечати(МассивПрицепов));

		// водитель 1
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыВодителяДляПечати(ТекущийДокумент.Водитель1, 1, 
			ТекущийДокумент.Дата, ТекущийДокумент.Организация));
		
		// водитель 2
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыВодителяДляПечати(ТекущийДокумент.Водитель2, 2, 
			ТекущийДокумент.Дата, ТекущийДокумент.Организация));

		// подписи ответственных лиц
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьОтветственныхДляПечати(ТекущийДокумент));
			
		// медосмотр
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыМедосмотраДляПечати(ТекущийДокумент));

		// ГСМ
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыГСМДляПечати(ТекущийДокумент, ФлагПечати));
		
		// задание водителю
		Для Каждого ТекСтрока Из ТекущийДокумент.Задание Цикл
			ТекИндекс = ТекущийДокумент.Задание.Индекс(ТекСтрока) + 1;
			
			Если ТекИндекс > мМаксСтрок Тогда
				Прервать;
			КонецЕсли;
			
			стрОбласть = "ВРаспоряжение" + Строка(ТекИндекс);
			Если ЗначениеЗаполнено(ТекСтрока.Контрагент) Тогда
				Обл.Область(стрОбласть).Текст	= ТекСтрока.Контрагент.НаименованиеПолное;
			ИначеЕсли ЗначениеЗаполнено(ТекСтрока.Подразделение) Тогда
				Обл.Область(стрОбласть).Текст	= ТекСтрока.Подразделение.Наименование;
			КонецЕсли;
			Обл.Область(стрОбласть).Текст	= Обл.Область(стрОбласть).Текст + ?(уатОбщегоНазначения.ПолучитьАдресСтрокой(ТекСтрока.АдресПрибытия)="","",", " +уатОбщегоНазначения.ПолучитьАдресСтрокой(ТекСтрока.АдресПрибытия));
			стрОбласть = "ВремяПрибытия" + Строка(ТекИндекс);
			Обл.Область(стрОбласть).Текст = Формат(ТекСтрока.ВремяПрибытия, ?(ТекСтрока.ВремяПрибытия - НачалоДня(ТекСтрока.ВремяПрибытия) = 0, "ДФ=dd.MM.yyyy", "ДФ='dd.MM.yyyy ЧЧ:мм'"));
			стрОбласть = "ВремяУбытия" + Строка(ТекИндекс);
			Обл.Область(стрОбласть).Текст = Формат(ТекСтрока.ВремяУбытия, ?(ТекСтрока.ВремяУбытия - НачалоДня(ТекСтрока.ВремяУбытия) = 0, "ДФ=dd.MM.yyyy", "ДФ='dd.MM.yyyy ЧЧ:мм'"));
		КонецЦикла;

		ТабДокумент.Вывести(Обл);   
		
	КонецЕсли;
	
	// новая страница для печати полного путевого листа
	Если ФлагПечати = 0 Или ФлагПечати = 4 Тогда
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	
	// оборотная сторона
	Если ФлагПечати <> 1 И ФлагПечати <> 5 Тогда
		Обл = Макет.ПолучитьОбласть("Оборотная");

		// ГСМ
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыГСМДляПечати(ТекущийДокумент, ФлагПечати));
		
		ТабДокумент.Вывести(Обл);
	КонецЕсли;

	Возврат ТабДокумент;
	
КонецФункции // Печать()
     
//  Формирует печатную форму путевых листов 412
//
// Параметры:
//  ИмяМакета - табличный документ
//  ФлагПечати: 0 - весь п/л, 1 - лиц. сторона, 2 - обр. строна
//
Функция уатПечать_412_АПК(ТекущийДокумент, ИмяМакета, ФлагПечати="") Экспорт
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.уатПутевойЛист." + ИмяМакета);
	мМаксСтрок = 6;

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПутевойЛист_412_АПК";
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ПолеСверху 	= 0;
	ТабДокумент.ПолеСлева 	= 0;
	ТабДокумент.ПолеСнизу 	= 0;
	ТабДокумент.ПолеСправа 	= 0;
	
	// лицевая сторона
	Если ФлагПечати <> 2 И ФлагПечати <> 3 Тогда
		
		Обл = Макет.ПолучитьОбласть("Лицевая");

		// номера и дата приказа Минтранса РФ
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыПриказаМинтранса(ТекущийДокумент.Дата));
		
		// реквизиты шапки
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыШапкиДляПечати(ТекущийДокумент, ФлагПечати));
		
		// ТС 
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыТСДляПечати(ТекущийДокумент.ТранспортноеСредство));
		
		// прицепы
		МассивПрицепов = ПолучитьМассивПрицеповПЛ(ТекущийДокумент);
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыПрицеповДляПечати(МассивПрицепов));
		
		// водитель 1
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыВодителяДляПечати(ТекущийДокумент.Водитель1, 1, 
			ТекущийДокумент.Дата, ТекущийДокумент.Организация));
		
		// подписи ответственных лиц
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьОтветственныхДляПечати(ТекущийДокумент));
		
		// медосмотр
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыМедосмотраДляПечати(ТекущийДокумент));
				
		// ГСМ
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыГСМДляПечати(ТекущийДокумент, ФлагПечати));
		
		// задание водителю
		Для Каждого ТекСтрока Из ТекущийДокумент.Задание Цикл
			ТекИндекс = ТекущийДокумент.Задание.Индекс(ТекСтрока) + 1;
			Если ТекИндекс > мМаксСтрок Тогда
				Прервать;
			КонецЕсли;
			стрОбласть = "ВРаспоряжение" + Строка(ТекИндекс);
			Если ЗначениеЗаполнено(ТекСтрока.Контрагент) Тогда
				Обл.Область(стрОбласть).Текст = ТекСтрока.Контрагент.НаименованиеПолное;
				Адрес_ = уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(ТекСтрока.Контрагент, ТекущийДокумент.ДатаЗакрытия).ЮридическийАдрес;
				Если НЕ ПустаяСтрока(Адрес_) Тогда
					Обл.Область(стрОбласть).Текст = Обл.Область(стрОбласть).Текст + " " + Адрес_;
				КонецЕсли;	
			ИначеЕсли ЗначениеЗаполнено(ТекСтрока.Подразделение) Тогда
				Обл.Область(стрОбласть).Текст = ТекСтрока.Подразделение.Наименование;
			КонецЕсли;	
			стрОбласть = "АдресПогрузки" + Строка(ТекИндекс);
			Обл.Область(стрОбласть).Текст = уатОбщегоНазначения.ПолучитьАдресСтрокой(ТекСтрока.АдресПрибытия);
			стрОбласть = "АдресРазгрузки" + Строка(ТекИндекс);
			Обл.Область(стрОбласть).Текст = уатОбщегоНазначения.ПолучитьАдресСтрокой(ТекСтрока.АдресУбытия);
			стрОбласть = "Груз" + Строка(ТекИндекс);
			Обл.Область(стрОбласть).Текст = ТекСтрока.Номенклатура;
			стрОбласть = "КоличествоЕздок" + Строка(ТекИндекс);
			Обл.Область(стрОбласть).Текст = ?(ТекСтрока.КоличествоЕздок = 0, "",ТекСтрока.КоличествоЕздок);
			стрОбласть = "Расстояние" + Строка(ТекИндекс);
			Обл.Область(стрОбласть).Текст = ?(ТекСтрока.КоличествоКмГруз = 0, "",ТекСтрока.КоличествоКмГруз);
			стрОбласть = "Тонны" + Строка(ТекИндекс);
			Обл.Область(стрОбласть).Текст = ?(ТекСтрока.КоличествоТонн = 0, "",ТекСтрока.КоличествоТонн);	
		КонецЦикла;  
		
		ТабДокумент.Вывести(Обл);
		
	КонецЕсли;
	
	// новая страница для печати полного путевого листа
	Если ФлагПечати = 0 Или ФлагПечати = 4 Тогда	
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	
	// оборотная сторона
	Если ФлагПечати <> 1 И ФлагПечати <> 5 Тогда
		Обл   = Макет.ПолучитьОбласть("Оборотная");
		ТабДокумент.Вывести(Обл);
	КонецЕсли;

	Возврат ТабДокумент;
	
КонецФункции // уатПечать_412_АПК()
 
// Формирует печатную форму путевых листов 4М
//
// Параметры:
//  ИмяМакета - табличный документ
//  ФлагПечати: 0 - весь п/л, 1 - лиц. сторона, 2 - обр. сторона
Функция уатПечать_4М(ТекущийДокумент, ИмяМакета, ФлагПечати="") Экспорт
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.уатПутевойЛист." + ИмяМакета);
	мМаксСтрок = 5;
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПутевойЛист_ПутевойЛист";
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ПолеСверху 	= 0;
	ТабДокумент.ПолеСлева 	= 0;
	ТабДокумент.ПолеСнизу 	= 0;
	ТабДокумент.ПолеСправа 	= 0;
	
	// лицевая сторона
	Если ФлагПечати <> 2 И ФлагПечати <> 3 Тогда
		
		Обл = Макет.ПолучитьОбласть("Лицевая");

		// номера и дата приказа Минтранса РФ
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыПриказаМинтранса(ТекущийДокумент.Дата));
		
		// реквизиты шапки
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыШапкиДляПечати(ТекущийДокумент, ФлагПечати));

		// ТС 
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыТСДляПечати(ТекущийДокумент.ТранспортноеСредство));

		// прицепы
		МассивПрицепов = ПолучитьМассивПрицеповПЛ(ТекущийДокумент);
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыПрицеповДляПечати(МассивПрицепов));

		// водитель 1
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыВодителяДляПечати(ТекущийДокумент.Водитель1, 1, 
			ТекущийДокумент.Дата, ТекущийДокумент.Организация));
		
		// водитель 2
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыВодителяДляПечати(ТекущийДокумент.Водитель2, 2, 
			ТекущийДокумент.Дата, ТекущийДокумент.Организация));
		
		// подписи ответственных лиц
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьОтветственныхДляПечати(ТекущийДокумент));

		// медосмотр
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыМедосмотраДляПечати(ТекущийДокумент));

		// ГСМ
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыГСМДляПечати(ТекущийДокумент, ФлагПечати));
		
		// задание водителю
		ЕздкиВсего      = 0;
		РасстояниеВсего = 0;
		ТонныВсего      = 0;
		
		Для Каждого ТекСтрока Из ТекущийДокумент.Задание Цикл
			ТекИндекс = ТекущийДокумент.Задание.Индекс(ТекСтрока) + 1;
			
			Если ТекИндекс > мМаксСтрок Тогда
				Прервать;
			КонецЕсли;
			
			стрОбласть = "ВРаспоряжение" + Строка(ТекИндекс);
			Если ЗначениеЗаполнено(ТекСтрока.Контрагент) Тогда
				Обл.Область(стрОбласть).Текст	= ТекСтрока.Контрагент.НаименованиеПолное;
			ИначеЕсли ЗначениеЗаполнено(ТекСтрока.Подразделение) Тогда
				Обл.Область(стрОбласть).Текст	= ТекСтрока.Подразделение.Наименование;
			КонецЕсли;	
			стрОбласть = "ВремяПрибытия" + Строка(ТекИндекс);
			Обл.Область(стрОбласть).Текст = Формат(ТекСтрока.ВремяПрибытия, ?(ТекСтрока.ВремяПрибытия - НачалоДня(ТекСтрока.ВремяПрибытия) = 0, "ДФ=dd.MM.yyyy", "ДФ='dd.MM.yyyy ЧЧ:мм'"));
			стрОбласть = "АдресПогрузки" + Строка(ТекИндекс);
			Обл.Область(стрОбласть).Текст = уатОбщегоНазначения.ПолучитьАдресСтрокой(ТекСтрока.АдресПрибытия);
			стрОбласть = "АдресРазгрузки" + Строка(ТекИндекс);
			Обл.Область(стрОбласть).Текст = уатОбщегоНазначения.ПолучитьАдресСтрокой(ТекСтрока.АдресУбытия);
			стрОбласть = "Груз" + Строка(ТекИндекс);
			Обл.Область(стрОбласть).Текст = ТекСтрока.Номенклатура;
			ЕздкиВсего = ЕздкиВсего + ТекСтрока.КоличествоЕздок;
			стрОбласть = "КоличествоЕздок" + Строка(ТекИндекс);
			Обл.Область(стрОбласть).Текст = ?(ТекСтрока.КоличествоЕздок = 0, "",ТекСтрока.КоличествоЕздок);
			
			КоличествоКмГруз = ТекСтрока.КоличествоКмГруз * ТекСтрока.КоличествоЕздок;
			РасстояниеВсего  = РасстояниеВсего + КоличествоКмГруз;
			стрОбласть = "Расстояние" + Строка(ТекИндекс);
			Обл.Область(стрОбласть).Текст = ?(КоличествоКмГруз = 0, "",КоличествоКмГруз);
			
			КоличествоТонн = ТекСтрока.КоличествоТонн * ТекСтрока.КоличествоЕздок;
			ТонныВсего     = ТонныВсего + КоличествоТонн;
			стрОбласть     = "Тонны" + Строка(ТекИндекс);
			Обл.Область(стрОбласть).Текст = ?(ТекСтрока.КоличествоТонн = 0, "",КоличествоТонн);
		КонецЦикла;
		
		Обл.Область("ЕздкиВсего").Текст      = ?(ЕздкиВсего = 0, "", ЕздкиВсего);
		Обл.Область("РасстояниеВсего").Текст = ?(РасстояниеВсего = 0, "", РасстояниеВсего);
		Обл.Область("ТонныВсего").Текст      = ?(ТонныВсего = 0, "", ТонныВсего);

		ТабДокумент.Вывести(Обл);
		
	КонецЕсли;
	
	// новая страница для печати полного путевого листа
	Если ФлагПечати = 0 Или ФлагПечати = 4 Тогда	
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	
	// оборотная сторона
	Если ФлагПечати <> 1 И ФлагПечати <> 5 Тогда
		
		Обл = Макет.ПолучитьОбласть("Оборотная");
		
		// ГСМ
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыГСМДляПечати(ТекущийДокумент, ФлагПечати));
		
		ТабДокумент.Вывести(Обл);
		
	КонецЕсли;

	Возврат ТабДокумент;
	
КонецФункции // Печать()

// Формирует печатную форму путевых листов 4П
//
// Параметры:
//  ИмяМакета - табличный документ
//  ФлагПечати: 0 - весь п/л, 1 - лиц. сторона, 2 - обр. сторона
Функция уатПечать_4П(ТекущийДокумент, ИмяМакета, ФлагПечати="") Экспорт
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.уатПутевойЛист." + ИмяМакета);
	мМаксСтрок = 3;
	мМаксСтрокПростоя = 3;

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПутевойЛист_ПутевойЛист";
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ПолеСверху 	= 0;
	ТабДокумент.ПолеСлева 	= 0;
	ТабДокумент.ПолеСнизу 	= 0;
	ТабДокумент.ПолеСправа 	= 0;
	
	// лицевая сторона
	Если ФлагПечати <> 2 И ФлагПечати <> 3 Тогда
		
		Обл = Макет.ПолучитьОбласть("Лицевая");

		// номера и дата приказа Минтранса РФ
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыПриказаМинтранса(ТекущийДокумент.Дата));
		
		// реквизиты шапки
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыШапкиДляПечати(ТекущийДокумент, ФлагПечати));

		// ТС 
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыТСДляПечати(ТекущийДокумент.ТранспортноеСредство));

		// прицепы
		МассивПрицепов = ПолучитьМассивПрицеповПЛ(ТекущийДокумент);
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыПрицеповДляПечати(МассивПрицепов));

		// водитель 1
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыВодителяДляПечати(ТекущийДокумент.Водитель1, 1, 
			ТекущийДокумент.Дата, ТекущийДокумент.Организация));
		
		// водитель 2
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыВодителяДляПечати(ТекущийДокумент.Водитель2, 2, 
			ТекущийДокумент.Дата, ТекущийДокумент.Организация));

		// подписи ответственных лиц
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьОтветственныхДляПечати(ТекущийДокумент));

		// медосмотр
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыМедосмотраДляПечати(ТекущийДокумент));
		
		// талон
		Обл.Параметры.НомерПЛВТалоне 	= ПолучитьНомерДляПечати(ТекущийДокумент.Организация, ТекущийДокумент.Номер);
		Обл.Параметры.ДатаПЛВТалоне 	= Формат(ТекущийДокумент.Дата, "ДФ='дд ММММ гггг'");

		// ГСМ
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыГСМДляПечати(ТекущийДокумент, ФлагПечати));
		
		// задание водителю
		Для Каждого ТекСтрока Из ТекущийДокумент.Задание Цикл
			ТекИндекс = ТекущийДокумент.Задание.Индекс(ТекСтрока) + 1;
			
			Если ТекИндекс > мМаксСтрок Тогда
				Прервать;
			КонецЕсли;
			
			стрОбласть = "ВРаспоряжение" + Строка(ТекИндекс);
			Если ЗначениеЗаполнено(ТекСтрока.Контрагент) Тогда
				Обл.Область(стрОбласть).Текст	= ТекСтрока.Контрагент.НаименованиеПолное;
			ИначеЕсли ЗначениеЗаполнено(ТекСтрока.Подразделение) Тогда
				Обл.Область(стрОбласть).Текст	= ТекСтрока.Подразделение.Наименование;
			КонецЕсли;
			Обл.Область(стрОбласть).Текст	= Обл.Область(стрОбласть).Текст + ?(уатОбщегоНазначения.ПолучитьАдресСтрокой(ТекСтрока.АдресПрибытия) = "", "", ", " + уатОбщегоНазначения.ПолучитьАдресСтрокой(ТекСтрока.АдресПрибытия));
			стрОбласть = "ВремяПрибытия" + Строка(ТекИндекс);
			Обл.Область(стрОбласть).Текст = Формат(ТекСтрока.ВремяПрибытия, ?(ТекСтрока.ВремяПрибытия - НачалоДня(ТекСтрока.ВремяПрибытия) = 0, "ДФ=dd.MM.yyyy", "ДФ='dd.MM.yyyy ЧЧ:мм'"));
			стрОбласть = "ВремяУбытия" + Строка(ТекИндекс);
			Обл.Область(стрОбласть).Текст = Формат(ТекСтрока.ВремяУбытия, ?(ТекСтрока.ВремяУбытия - НачалоДня(ТекСтрока.ВремяУбытия) = 0, "ДФ=dd.MM.yyyy", "ДФ='dd.MM.yyyy ЧЧ:мм'"));
			стрОбласть = "КоличествоЕздок" + Строка(ТекИндекс);
			Обл.Область(стрОбласть).Текст = ?(ТекСтрока.КоличествоЕздок = 0, "",ТекСтрока.КоличествоЕздок);
			стрОбласть = "КоличествоЧасов" + Строка(ТекИндекс);
			Обл.Область(стрОбласть).Текст = ?(ТекСтрока.КоличествоЧасов = 0, "",Формат(ТекСтрока.КоличествоЧасов, "ЧДЦ=2; ЧРД=:"));
		КонецЦикла;
		
		Если ФлагПечати = 5 Или ФлагПечати = 4  Тогда
			Сч = 0;
			Для Каждого ТекСтрока Из ТекущийДокумент.Задание Цикл 
				Если Сч = 2 Тогда
					Прервать;
				КонецЕсли;
				Если ЗначениеЗаполнено(ТекСтрока.Контрагент) И ТекСтрока.Выполнено Тогда
					Сч = Сч + 1;
				КонецЕсли;
				Если ЗначениеЗаполнено(ТекСтрока.Контрагент) И ТекСтрока.Выполнено и Сч = 1 Тогда
					Обл.Параметры.Талон1ВремяВРаботе  = ?(ТекСтрока.КоличествоЧасов = 0, "", Формат(ТекСтрока.КоличествоЧасов, "ЧДЦ=2; ЧРД=:"));
					Обл.Параметры.Талон1Ездки         = ТекСтрока.КоличествоЕздок;
					Обл.Параметры.Талон1ПробегОбщий   = (ТекСтрока.КоличествоКмГруз + ТекСтрока.КоличествоКмПорожний) * ТекСтрока.КоличествоЕздок;
					Обл.Параметры.Талон1ПробегСГрузом = ТекСтрока.КоличествоКмГруз * ТекСтрока.КоличествоЕздок;
					Обл.Параметры.Талон1ВесГруза      = ТекСтрока.КоличествоТонн * ТекСтрока.КоличествоЕздок;
					Обл.Параметры.Талон1ТКМ           = ТекСтрока.КоличествоТонн * ТекСтрока.КоличествоКмГруз * ТекСтрока.КоличествоЕздок;
					
				ИначеЕсли ЗначениеЗаполнено(ТекСтрока.Контрагент) И ТекСтрока.Выполнено и Сч = 2 Тогда
					Обл.Параметры.Талон2ВремяВРаботе  = ?(ТекСтрока.КоличествоЧасов = 0, "", Формат(ТекСтрока.КоличествоЧасов, "ЧДЦ=2; ЧРД=:"));
					Обл.Параметры.Талон2Ездки         = ТекСтрока.КоличествоЕздок;
					Обл.Параметры.Талон2ПробегОбщий   = (ТекСтрока.КоличествоКмГруз + ТекСтрока.КоличествоКмПорожний)*ТекСтрока.КоличествоЕздок;
					Обл.Параметры.Талон2ПробегСГрузом = ТекСтрока.КоличествоКмГруз * ТекСтрока.КоличествоЕздок;
					Обл.Параметры.Талон2ВесГруза      = ТекСтрока.КоличествоТонн * ТекСтрока.КоличествоЕздок;
					Обл.Параметры.Талон2ТКМ           = ТекСтрока.КоличествоТонн * ТекСтрока.КоличествоКмГруз * ТекСтрока.КоличествоЕздок;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;

		ТабДокумент.Вывести(Обл);  
		
	КонецЕсли;
	
	// новая страница для печати полного путевого листа
	Если ФлагПечати = 0 Или ФлагПечати = 4 Тогда	
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	
	// оборотная сторона
	Если ФлагПечати <> 1 И ФлагПечати <> 5 Тогда

		Обл = Макет.ПолучитьОбласть("Оборотная");
		
		Обл.Параметры.Организация = ТекущийДокумент.Организация;

		// ТС 
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыТСДляПечати(ТекущийДокумент.ТранспортноеСредство));

		// прицепы
		МассивПрицепов = ПолучитьМассивПрицеповПЛ(ТекущийДокумент);
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыПрицеповДляПечати(МассивПрицепов));
			
		Если ФлагПечати = 3 Или ФлагПечати = 4 Тогда
			
			ТТДПЛ = уатПутевыеЛисты.уатТТДДляПЛ(ТекущийДокумент);
			
			Для Каждого ТекСтрока из ТекущийДокумент.Простои Цикл
				
				ТекИндекс = ТекущийДокумент.Простои.Индекс(ТекСтрока) + 1;
				
				Если ТекИндекс > мМаксСтрокПростоя Тогда
					Прервать;
				КонецЕсли;
				
				стрОбласть = "Видпростоя" + Строка(ТекИндекс);
				Обл.Область(стрОбласть).Текст = ТекСтрока.ВидПростоя;
				стрОбласть = "Начало" + Строка(ТекИндекс);
				Обл.Область(стрОбласть).Текст = Формат(ТекСтрока.НачалоПростоя,"ДФ='dd.MM.yyyy HH:mm'");
				стрОбласть = "Окончание" + Строка(ТекИндекс);
				Обл.Область(стрОбласть).Текст = Формат(ТекСтрока.КонецПростоя,"ДФ='dd.MM.yyyy HH:mm'");
			КонецЦикла;
			
			//ВыработкаТС = ТекущийДокумент.ВыработкаТС;
			//ВремяВработе = ВыработкаТС.Найти(Справочники.уатПараметрыВыработки.ВремяВРаботе,"ПараметрВыработки");
			
			Сч = 0;
			Для Каждого ТекСтрока Из ТекущийДокумент.Задание Цикл 
				Если Сч = 2 Тогда
					Прервать;
				КонецЕсли;
				Если ЗначениеЗаполнено(ТекСтрока.Контрагент) И ТекСтрока.Выполнено Тогда
					Сч = Сч + 1;
				КонецЕсли;
				Если ЗначениеЗаполнено(ТекСтрока.Контрагент) И ТекСтрока.Выполнено и Сч = 1 Тогда
					
					Отбор = Новый Структура("Контрагент",ТекСтрока.Контрагент);
					МассивТТД = ТТДПЛ.НайтиСтроки(Отбор);
					КоличествоТТД = МассивТТД.Количество();
					Обл.Параметры.Заказчик1КоличествоТТД = КоличествоТТД;
					СтрокаТТД = "";
					СчТТД = 0;
					Для Каждого ТекСтрокаТТД из МассивТТД Цикл
						СчТТД = СчТТД + 1;
						СтрокаТТД = СтрокаТТД + ТекСтрокаТТД.Номер;
						Если СчТТД <> КоличествоТТД Тогда
							СтрокаТТД = СтрокаТТД + ", ";
						КонецЕсли;
					КонецЦикла;
					Обл.Параметры.Заказчик1ТТД = СтрокаТТД;
					Обл.Параметры.Талон1ВремяВРаботе  = ?(ТекСтрока.КоличествоЧасов = 0, "", Формат(ТекСтрока.КоличествоЧасов, "ЧДЦ=2; ЧРД=:"));
					Обл.Параметры.Талон1Ездки = ТекСтрока.КоличествоЕздок;
					Обл.Параметры.Талон1ПробегОбщий = (ТекСтрока.КоличествоКмГруз + ТекСтрока.КоличествоКмПорожний) *ТекСтрока.КоличествоЕздок;
					Обл.Параметры.Талон1ПробегСГрузом = ТекСтрока.КоличествоКмГруз * ТекСтрока.КоличествоЕздок;
					Обл.Параметры.Талон1ВесГруза = ТекСтрока.КоличествоТонн * ТекСтрока.КоличествоЕздок;
					Обл.Параметры.Талон1ТКМ = ТекСтрока.КоличествоТонн * ТекСтрока.КоличествоКмГруз * ТекСтрока.КоличествоЕздок;
					Обл.Параметры.ПервыйЗаказчик = ТекСтрока.Контрагент.НаименованиеПолное;
					Обл.Параметры.Заказчик1Прибытие = Формат(ТекСтрока.ВремяПрибытия,"ДФ='dd.MM.yyyy HH:mm'");
					Обл.Параметры.Заказчик1Убытие = Формат(ТекСтрока.ВремяУбытия,"ДФ='dd.MM.yyyy HH:mm'");
					Если ЗначениеЗаполнено(ТекСтрока.Маршрут) Тогда
						Обл.Параметры.Заказчик1Маршрут = ТекСтрока.Маршрут;
					Иначе
						Обл.Параметры.Заказчик1Маршрут = уатОбщегоНазначения.ПолучитьАдресСтрокой(ТекСтрока.АдресПрибытия) + " - " + уатОбщегоНазначения.ПолучитьАдресСтрокой(ТекСтрока.АдресУбытия);
					КонецЕсли;
					Обл.Параметры.Заказчик1КоличествоЕздок = ТекСтрока.КоличествоЕздок;
				ИначеЕсли ЗначениеЗаполнено(ТекСтрока.Контрагент) И ТекСтрока.Выполнено и Сч = 2 Тогда
					
					Отбор = Новый Структура("Контрагент",ТекСтрока.Контрагент);
					МассивТТД = ТТДПЛ.НайтиСтроки(Отбор);
					КоличествоТТД = МассивТТД.Количество();
					Обл.Параметры.Заказчик2КоличествоТТД = КоличествоТТД;
					СтрокаТТД = "";
					СчТТД = 0;
					Для Каждого ТекСтрокаТТД из МассивТТД Цикл
						СчТТД = СчТТД + 1;
						СтрокаТТД = СтрокаТТД + ТекСтрокаТТД.Номер;
						Если СчТТД <> КоличествоТТД Тогда
							СтрокаТТД = СтрокаТТД + ", ";
						КонецЕсли;
					КонецЦикла;
					
					Обл.Параметры.Заказчик2ТТД = СтрокаТТД;
					Обл.Параметры.Талон2ВремяВРаботе  = ?(ТекСтрока.КоличествоЧасов = 0, "", Формат(ТекСтрока.КоличествоЧасов, "ЧДЦ=2; ЧРД=:"));
					Обл.Параметры.Талон2Ездки = ТекСтрока.КоличествоЕздок;
					Обл.Параметры.Талон2ПробегОбщий = (ТекСтрока.КоличествоКмГруз + ТекСтрока.КоличествоКмПорожний)*ТекСтрока.КоличествоЕздок;
					Обл.Параметры.Талон2ПробегСГрузом = ТекСтрока.КоличествоКмГруз * ТекСтрока.КоличествоЕздок;
					Обл.Параметры.Талон2ВесГруза = ТекСтрока.КоличествоТонн * ТекСтрока.КоличествоЕздок;
					Обл.Параметры.Талон2ТКМ = ТекСтрока.КоличествоТонн * ТекСтрока.КоличествоКмГруз * ТекСтрока.КоличествоЕздок;
					Обл.Параметры.ВторойЗаказчик = ТекСтрока.Контрагент.НаименованиеПолное;
					Обл.Параметры.Заказчик2Прибытие = Формат(ТекСтрока.ВремяПрибытия,"ДФ='dd.MM.yyyy HH:mm'");
					Обл.Параметры.Заказчик2Убытие = Формат(ТекСтрока.ВремяУбытия,"ДФ='dd.MM.yyyy HH:mm'");
					Если ЗначениеЗаполнено(ТекСтрока.Маршрут) Тогда
						Обл.Параметры.Заказчик2Маршрут = ТекСтрока.Маршрут;
					Иначе
						Обл.Параметры.Заказчик2Маршрут = уатОбщегоНазначения.ПолучитьАдресСтрокой(ТекСтрока.АдресПрибытия) + " - " + уатОбщегоНазначения.ПолучитьАдресСтрокой(ТекСтрока.АдресУбытия);
					КонецЕсли;
					Обл.Параметры.Заказчик2КоличествоЕздок = ТекСтрока.КоличествоЕздок;	
				КонецЕсли;
			КонецЦикла;
			
			// ГСМ
		    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыГСМДляПечати(ТекущийДокумент, ФлагПечати));
			
		КонецЕсли;

		ТабДокумент.Вывести(Обл);
		
	КонецЕсли;
	
	Возврат ТабДокумент;
	
КонецФункции // Печать()

// Формирует печатную форму путевых листов 4С
//
// Параметры:
//  ИмяМакета - табличный документ
//  ФлагПечати: 0 - весь п/л, 1 - лиц. сторона, 2 - обр. сторона
Функция уатПечать_4С(ТекущийДокумент, ИмяМакета, ФлагПечати="") Экспорт
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.уатПутевойЛист." + ИмяМакета);
	мМаксСтрок = 5;
	мМаксСтрокПростоя = 3;
	мМаксСтрокПослЗаданий = 8;
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПутевойЛист_ПутевойЛист";
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ПолеСверху 	= 0;
	ТабДокумент.ПолеСлева 	= 0;
	ТабДокумент.ПолеСнизу 	= 0;
	ТабДокумент.ПолеСправа 	= 0;

	// лицевая сторона
	Если ФлагПечати <> 2 И ФлагПечати <> 3 Тогда
		
		Обл = Макет.ПолучитьОбласть("Лицевая");

		// номера и дата приказа Минтранса РФ
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыПриказаМинтранса(ТекущийДокумент.Дата));
		
		// реквизиты шапки
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыШапкиДляПечати(ТекущийДокумент, ФлагПечати));

		// ТС 
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыТСДляПечати(ТекущийДокумент.ТранспортноеСредство));

		// прицепы
		МассивПрицепов = ПолучитьМассивПрицеповПЛ(ТекущийДокумент);
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыПрицеповДляПечати(МассивПрицепов));

		// водитель 1
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыВодителяДляПечати(ТекущийДокумент.Водитель1, 1, 
			ТекущийДокумент.Дата, ТекущийДокумент.Организация));
		
		// водитель 2
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыВодителяДляПечати(ТекущийДокумент.Водитель2, 2, 
			ТекущийДокумент.Дата, ТекущийДокумент.Организация));

		// подписи ответственных лиц
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьОтветственныхДляПечати(ТекущийДокумент));
		
		// медосмотр
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыМедосмотраДляПечати(ТекущийДокумент));

		// ГСМ
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыГСМДляПечати(ТекущийДокумент, ФлагПечати));
		
		// задание водителю
		ЕздкиВсего      = 0;
		РасстояниеВсего = 0;
		ТонныВсего      = 0;
		
		Для Каждого ТекСтрока Из ТекущийДокумент.Задание Цикл
			ТекИндекс = ТекущийДокумент.Задание.Индекс(ТекСтрока) + 1;
			
			Если ТекИндекс > мМаксСтрок Тогда
				Прервать;
			КонецЕсли;
			
			стрОбласть = "ВРаспоряжение" + Строка(ТекИндекс);
			Если ЗначениеЗаполнено(ТекСтрока.Контрагент) Тогда
				Обл.Область(стрОбласть).Текст = ТекСтрока.Контрагент.НаименованиеПолное;
				Адрес_ = уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(ТекСтрока.Контрагент, ТекущийДокумент.ДатаЗакрытия).ЮридическийАдрес;
				Если НЕ ПустаяСтрока(Адрес_) Тогда
					Обл.Область(стрОбласть).Текст = Обл.Область(стрОбласть).Текст + " " + Адрес_;
				КонецЕсли;
				
			ИначеЕсли ЗначениеЗаполнено(ТекСтрока.Подразделение) Тогда
				Обл.Область(стрОбласть).Текст = ТекСтрока.Подразделение.Наименование;
				
			КонецЕсли;	
			
			стрОбласть = "ВремяПрибытия" + Строка(ТекИндекс);
			Обл.Область(стрОбласть).Текст = Формат(ТекСтрока.ВремяПрибытия, ?(ТекСтрока.ВремяПрибытия - НачалоДня(ТекСтрока.ВремяПрибытия) = 0, "ДФ=""дд.ММ.гг""", "ДФ=""дд.ММ.гг ЧЧ:мм"""));
			
			стрОбласть = "АдресПогрузки" + Строка(ТекИндекс);
			Обл.Область(стрОбласть).Текст = уатОбщегоНазначения.ПолучитьАдресСтрокой(ТекСтрока.АдресПрибытия);
			
			стрОбласть = "АдресРазгрузки" + Строка(ТекИндекс);
			Обл.Область(стрОбласть).Текст = уатОбщегоНазначения.ПолучитьАдресСтрокой(ТекСтрока.АдресУбытия);
			
			стрОбласть = "Груз" + Строка(ТекИндекс);
			Обл.Область(стрОбласть).Текст = ТекСтрока.Номенклатура;
			
			ЕздкиВсего = ЕздкиВсего + ТекСтрока.КоличествоЕздок;
			стрОбласть = "КоличествоЕздок" + Строка(ТекИндекс);
			Обл.Область(стрОбласть).Текст = ?(ТекСтрока.КоличествоЕздок = 0, "",ТекСтрока.КоличествоЕздок);
			
			КоличествоКмГруз = ТекСтрока.КоличествоКмГруз * ТекСтрока.КоличествоЕздок;
			РасстояниеВсего  = РасстояниеВсего + КоличествоКмГруз;
			стрОбласть = "Расстояние" + Строка(ТекИндекс);
			Обл.Область(стрОбласть).Текст = ?(КоличествоКмГруз = 0, "",КоличествоКмГруз);
			
			КоличествоТонн = ТекСтрока.КоличествоТонн * ТекСтрока.КоличествоЕздок;
			ТонныВсего     = ТонныВсего + КоличествоТонн;
			стрОбласть     = "Тонны" + Строка(ТекИндекс);
			Обл.Область(стрОбласть).Текст = ?(КоличествоТонн = 0, "",КоличествоТонн);
		КонецЦикла;
		
		Обл.Область("ЕздкиВсего").Текст      = ?(ЕздкиВсего = 0, "", ЕздкиВсего);
		Обл.Область("РасстояниеВсего").Текст = ?(РасстояниеВсего = 0, "", РасстояниеВсего);
		Обл.Область("ТонныВсего").Текст      = ?(ТонныВсего = 0, "", ТонныВсего);
		
		ТабДокумент.Вывести(Обл);
		
	КонецЕсли;
	
	// новая страница для печати полного путевого листа
	Если ФлагПечати = 0 Или ФлагПечати = 4 Тогда	
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	
	// оборотная сторона
	Если ФлагПечати <> 1 И ФлагПечати <> 5 Тогда
		
		Обл   = Макет.ПолучитьОбласть("Оборотная");
		
		Если ФлагПечати = 3 Или ФлагПечати = 4 Тогда
			
			Для Каждого ТекСтрока из ТекущийДокумент.Простои Цикл
				
				ТекИндекс = ТекущийДокумент.Простои.Индекс(ТекСтрока) + 1;
				
				Если ТекИндекс > мМаксСтрокПростоя Тогда
					Прервать;
				КонецЕсли;
				
				стрОбласть = "Видпростоя" + Строка(ТекИндекс);
				Обл.Область(стрОбласть).Текст = ТекСтрока.ВидПростоя;
				стрОбласть = "Начало" + Строка(ТекИндекс);
				Обл.Область(стрОбласть).Текст = Формат(ТекСтрока.НачалоПростоя,"ДФ='dd.MM.yyyy HH:mm'");
				стрОбласть = "Окончание" + Строка(ТекИндекс);
				Обл.Область(стрОбласть).Текст = Формат(ТекСтрока.КонецПростоя,"ДФ='dd.MM.yyyy HH:mm'");
			КонецЦикла;
			ФорматЧисла = "ДФ=dd.MM.yyyy";
			ФорматЧасов = "ДФ=HH";
			ФорматМинут =  "ДФ=mm";
			Для Каждого ТекСтрока Из ТекущийДокумент.Задание Цикл
				ТекИндекс = ТекущийДокумент.Задание.Индекс(ТекСтрока) + 1;
				
				Если ТекИндекс > мМаксСтрокПослЗаданий Тогда
					Прервать;
				КонецЕсли;
				
				Если Не ТекСтрока.Выполнено Тогда
					Продолжить;
				КонецЕсли;
				
				стрОбласть = "ПунктПогрузкиРазгрузки" + Строка(ТекИндекс);
				Обл.Область(стрОбласть).Текст = уатОбщегоНазначения.ПолучитьАдресСтрокой(ТекСтрока.АдресПрибытия) + " - " + уатОбщегоНазначения.ПолучитьАдресСтрокой(ТекСтрока.АдресУбытия);
				
				стрОбласть = "ЧислоПрибытие" + Строка(ТекИндекс);
				Обл.Область(стрОбласть).Текст = Формат(ТекСтрока.ВремяПрибытия,ФорматЧисла);
				
				стрОбласть = "ЧасыПрибытие" + Строка(ТекИндекс);
				Обл.Область(стрОбласть).Текст = Формат(ТекСтрока.ВремяПрибытия,ФорматЧасов);
				
				стрОбласть = "МинутПрибытие" + Строка(ТекИндекс);
				Обл.Область(стрОбласть).Текст = Формат(ТекСтрока.ВремяПрибытия,ФорматМинут);
				
				стрОбласть = "ЧасыУбытие" + Строка(ТекИндекс);
				Обл.Область(стрОбласть).Текст = Формат(ТекСтрока.ВремяУбытия,ФорматЧасов);
				
				стрОбласть = "МинутУбытие" + Строка(ТекИндекс);
				Обл.Область(стрОбласть).Текст = Формат(ТекСтрока.ВремяУбытия,ФорматМинут);
				
				стрОбласть = "НаименованиеОтправителя" + Строка(ТекИндекс);
				Если ЗначениеЗаполнено(ТекСтрока.Контрагент) Тогда
					Обл.Область(стрОбласть).Текст = ТекСтрока.Контрагент.НаименованиеПолное;
				ИначеЕсли ЗначениеЗаполнено(ТекСтрока.Подразделение) Тогда
					Обл.Область(стрОбласть).Текст = ТекСтрока.Подразделение.Наименование;
				КонецЕсли;	
				
			КонецЦикла;
			
			// ГСМ
		    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыГСМДляПечати(ТекущийДокумент, ФлагПечати));
			
			ВыработкаТС = ТекущийДокумент.ВыработкаТС.Выгрузить();
			ВыработкаТС.Свернуть("ТС,ПараметрВыработки","Количество");
			Прицеп = Неопределено;
			Для Каждого ТекСтрока Из ТекущийДокумент.Прицепы Цикл 
				Если ТекСтрока.ТС.ВидМоделиТС = Перечисления.уатВидыМоделейТС.Прицеп Тогда
					Прицеп = ТекСтрока.ТС;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Отбор = Новый Структура("ТС,ПараметрВыработки");
			Отбор.Вставить("ТС",ТекущийДокумент.ТранспортноеСредство);
			Отбор.Вставить("ПараметрВыработки",Справочники.уатПараметрыВыработки.ВремяВНаряде);
			ВремяВНарядеТС = ВыработкаТС.НайтиСтроки(Отбор);
			Если ВремяВНарядеТС.Количество() > 0 Тогда
				Обл.Параметры.ВремяВНарядеТС = Формат(уатОбщегоНазначения.уатВремяВЧЧ_ММ(ВремяВНарядеТС[0].Количество),"ЧДЦ=2; ЧРД=:");
			КонецЕсли;
			Отбор.Вставить("ПараметрВыработки",Справочники.уатПараметрыВыработки.КоличествоЕздок);
			ВсегоЕздок = ВыработкаТС.НайтиСтроки(Отбор);
			Если ВсегоЕздок.Количество() > 0 Тогда
				Обл.Параметры.ЕздокВсего = ВсегоЕздок[0].Количество;
			КонецЕсли;
			Отбор.Вставить("ПараметрВыработки",Справочники.уатПараметрыВыработки.ПробегОбщий);
			ПробегОбщийТС = ВыработкаТС.НайтиСтроки(Отбор);
			Если ПробегОбщийТС.Количество() > 0 Тогда
				Обл.Параметры.ПробегОбщийТС = ПробегОбщийТС[0].Количество;
			КонецЕсли;
			Отбор.Вставить("ПараметрВыработки",Справочники.уатПараметрыВыработки.ПробегСГрузом);
			ПробегСГрузомТС = ВыработкаТС.НайтиСтроки(Отбор);
			Если ПробегСГрузомТС.Количество() > 0 Тогда
				Обл.Параметры.ПробегСГрузомТС = ПробегСГрузомТС[0].Количество;
			КонецЕсли;
			Отбор.Вставить("ПараметрВыработки",Справочники.уатПараметрыВыработки.ВесГруза);
			ВсегоТонн = ВыработкаТС.НайтиСтроки(Отбор);
			Если ВсегоТонн.Количество() > 0 Тогда
				Обл.Параметры.ТоннВсего = ВсегоТонн[0].Количество;
			КонецЕсли;
			Отбор.Вставить("ПараметрВыработки",Справочники.уатПараметрыВыработки.ТнКм);
			ВсегоТКМ = ВыработкаТС.НайтиСтроки(Отбор);
			Если ВсегоТКМ.Количество() > 0 Тогда
				Обл.Параметры.ВсегоТКМ = ВсегоТКМ[0].Количество;
			КонецЕсли;
			
			Если Прицеп <> Неопределено Тогда
				Отбор.Вставить("ТС",Прицеп);
				Отбор.Вставить("ПараметрВыработки",Справочники.уатПараметрыВыработки.ПробегОбщий);
				ПробегОбщийТС = ВыработкаТС.НайтиСтроки(Отбор);
				Если ПробегОбщийТС.Количество() > 0 Тогда
					Обл.Параметры.ПробегОбщийПрицеп = ПробегОбщийТС[0].Количество;
				КонецЕсли;
				Отбор.Вставить("ПараметрВыработки",Справочники.уатПараметрыВыработки.ПробегСГрузом);
				ПробегСГрузомТС = ВыработкаТС.НайтиСтроки(Отбор);
				Если ПробегСГрузомТС.Количество() > 0 Тогда
					Обл.Параметры.ПробегСГрузомПрицеп = ПробегСГрузомТС[0].Количество;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
		ТабДокумент.Вывести(Обл);
		
	КонецЕсли;

	Возврат ТабДокумент;
	
КонецФункции // Печать_4С()

// Формирует печатную форму путевых листов 6
//
// Параметры:
//  ИмяМакета - табличный документ
//  ФлагПечати: 0 - весь п/л, 1 - лиц. сторона, 2 - обр. строна
//
Функция уатПечать_6(ТекущийДокумент, ИмяМакета, ФлагПечати="") Экспорт
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.уатПутевойЛист." + ИмяМакета);

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПутевойЛист_6";
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ПолеСверху 	= 0;
	ТабДокумент.ПолеСлева 	= 0;
	ТабДокумент.ПолеСнизу 	= 0;
	ТабДокумент.ПолеСправа 	= 0;
	
	// лицевая сторона
	Если ФлагПечати <> 2 И ФлагПечати <> 3 Тогда
		
		Обл = Макет.ПолучитьОбласть("Лицевая");

		// номера и дата приказа Минтранса РФ
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыПриказаМинтранса(ТекущийДокумент.Дата));
		
		// реквизиты шапки
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыШапкиДляПечати(ТекущийДокумент, ФлагПечати));

		// ТС 
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыТСДляПечати(ТекущийДокумент.ТранспортноеСредство));

		// водитель 1
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыВодителяДляПечати(ТекущийДокумент.Водитель1, 1, 
			ТекущийДокумент.Дата, ТекущийДокумент.Организация, Ложь));
		
		// водитель 2
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыВодителяДляПечати(ТекущийДокумент.Водитель2, 2, 
			ТекущийДокумент.Дата, ТекущийДокумент.Организация, Ложь));  
			
		// Сотрудник 1
		ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыСопрЛицДляПечати(ТекущийДокумент.Сотрудник1, 1, 
			ТекущийДокумент.Дата, ТекущийДокумент.Организация));
			
		// Сотрудник 2
		ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыСопрЛицДляПечати(ТекущийДокумент.Сотрудник2, 2, 
			ТекущийДокумент.Дата, ТекущийДокумент.Организация));

		
		// подписи ответственных лиц
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьОтветственныхДляПечати(ТекущийДокумент));

		// медосмотр
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыМедосмотраДляПечати(ТекущийДокумент));
		
		ДокОбъект = ТекущийДокумент.ПолучитьОбъект();
		уатПутевыеЛисты.РасчитатьВременныеПараметры(ДокОбъект);
		Обл.Параметры.КоличествоЧасовРаботы = Формат(уатОбщегоНазначения.уатВремяВЧЧ_ММ(ДокОбъект.мВремяВНаряде),"ЧДЦ=2; ЧРД=:");
		Обл.Параметры.КоличествоЧасовПробег = Формат(уатОбщегоНазначения.уатВремяВЧЧ_ММ(ДокОбъект.мВремяВРаботе), "ЧДЦ=2; ЧРД=:");
		Обл.Параметры.КоличествоЧасовНочное = Формат(уатОбщегоНазначения.уатВремяВЧЧ_ММ(ДокОбъект.мВремяНочь), "ЧДЦ=2; ЧРД=:");
		
		ПробегОбщий = 0;
		ПробегСПассажирами = 0;
		Для Каждого ТекСтрока Из ТекущийДокумент.Задание Цикл
			Если ТекСтрока.Выполнено Тогда 	
				ПробегОбщий = ПробегОбщий + (ТекСтрока.КоличествоКмГруз + ТекСтрока.КоличествоКмПорожний) * ТекСтрока.КоличествоЕздок;
				ПробегСПассажирами = ПробегСПассажирами + ТекСтрока.КоличествоКмГруз * ТекСтрока.КоличествоЕздок;
				Обл.Параметры.КоличествоПробегОбщий = Формат(ПробегОбщий, "ЧЦ=15; ЧДЦ=3");
				Обл.Параметры.КоличествоПробегСПассажирами = Формат(ПробегСПассажирами, "ЧЦ=15; ЧДЦ=3");
			КонецЕсли;
		КонецЦикла;
		
		// ГСМ
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыГСМДляПечати(ТекущийДокумент, ФлагПечати));
		
		// задание водителю
		Если ТекущийДокумент.Задание.Количество() > 0 Тогда
			Обл.Параметры.НаименованиеМаршрута = ТекущийДокумент.Задание[0].Маршрут.Наименование;
			Обл.Параметры.НомерМаршрута = ТекущийДокумент.Задание[0].Маршрут.НомерМаршрута;
		КонецЕсли;
		
		мМаксСтрок = 2;
		Для Каждого ТекСтрока Из ТекущийДокумент.Задание Цикл

			ТекИндекс = ТекущийДокумент.Задание.Индекс(ТекСтрока) + 1;
			Если ТекИндекс > мМаксСтрок Тогда
				Прервать;
			КонецЕсли;
			
			ПараметрЗаказчик = "Заказчик" + Строка(ТекИндекс);
	   		Обл.Параметры[ПараметрЗаказчик] = ТекСтрока.Контрагент.Наименование;
			
		КонецЦикла;
		
		ТабДокумент.Вывести(Обл);
		
	КонецЕсли;
	
	// новая страница для печати полного путевого листа
	Если ФлагПечати = 0 Или ФлагПечати = 4 Тогда	
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	
	// оборотная сторона
	Если ФлагПечати <> 1 И ФлагПечати <> 5 Тогда
		
		мМаксСтрок = 40;

		Обл = Макет.ПолучитьОбласть("Оборотная");
		мВыводитьПунктОтправленияВПечатнойФорме6_пп = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ТекущийДокумент.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.ВыводитьПунктОтправленияВПечатнойФорме6);
		Для Каждого ТекСтрока Из ТекущийДокумент.Задание Цикл

			ТекИндекс = ТекущийДокумент.Задание.Индекс(ТекСтрока) + 1;
			Если ТекИндекс > мМаксСтрок Тогда
				Прервать;
			КонецЕсли;
			
			стрОбласть = "М" + Строка(ТекИндекс);
			Если мВыводитьПунктОтправленияВПечатнойФорме6_пп Тогда
				Обл.Область(стрОбласть).Текст = уатОбщегоНазначения.ПолучитьАдресСтрокой(ТекСтрока.АдресПрибытия);                                                         
			Иначе
				Обл.Область(стрОбласть).Текст = ТекСтрока.Маршрут.Наименование;
			КонецЕсли;
			стрОбласть = "ВОП" + Строка(ТекИндекс);
			Обл.Область(стрОбласть).Текст = Формат(ТекСтрока.ВремяПрибытия, "ДФ = ЧЧ:мм");
			стрОбласть = "ВПП" + Строка(ТекИндекс);
			Обл.Область(стрОбласть).Текст = Формат(ТекСтрока.ВремяУбытия, "ДФ = ЧЧ:мм"); 
			стрОбласть = "ПСП" + Строка(ТекИндекс);
			Обл.Область(стрОбласть).Текст = Формат(ТекСтрока.КоличествоКмГруз, "ЧЦ=15; ЧДЦ=3");
			
		КонецЦикла;
		
		ТабДокумент.Вывести(Обл);    
		
	КонецЕсли;
	
	Возврат ТабДокумент;
	
КонецФункции // уатПечать_6()

// Формирует печатную форму путевых листов 6С
//
// Параметры:
//  ИмяМакета - табличный документ
//  ФлагПечати: 0 - весь п/л, 1 - лиц. сторона, 2 - обр. сторона
Функция уатПечать_6С(ТекущийДокумент, ИмяМакета, ФлагПечати="") Экспорт
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.уатПутевойЛист." + ИмяМакета);
	мМаксСтрок = 7;
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПутевойЛист_ПутевойЛист";
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ПолеСверху 	= 0;
	ТабДокумент.ПолеСлева 	= 0;
	ТабДокумент.ПолеСнизу 	= 0;
	ТабДокумент.ПолеСправа 	= 0;
	
	// лицевая сторона
	Если ФлагПечати <> 2 И ФлагПечати <> 3 Тогда
		
		Обл = Макет.ПолучитьОбласть("Лицевая");

		// номера и дата приказа Минтранса РФ
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыПриказаМинтранса(ТекущийДокумент.Дата));
		
		// реквизиты шапки
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыШапкиДляПечати(ТекущийДокумент, ФлагПечати));

		Обл.Параметры.СтрПутевойЛист  = "№" + ПолучитьНомерДляПечати(ТекущийДокумент.Организация, ТекущийДокумент.Номер)
			+ " от " + Формат(ТекущийДокумент.Дата, "ДЛФ=D");
		
		// ТС 
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыТСДляПечати(ТекущийДокумент.ТранспортноеСредство));

		// водитель 1
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыВодителяДляПечати(ТекущийДокумент.Водитель1, 1, 
			ТекущийДокумент.Дата, ТекущийДокумент.Организация));
		
		// водитель 2
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыВодителяДляПечати(ТекущийДокумент.Водитель2, 2, 
			ТекущийДокумент.Дата, ТекущийДокумент.Организация));
		
		// подписи ответственных лиц
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьОтветственныхДляПечати(ТекущийДокумент));

		// медосмотр
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыМедосмотраДляПечати(ТекущийДокумент));

		// ГСМ
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыГСМДляПечати(ТекущийДокумент, ФлагПечати));
		
		// задание водителю
		Для Каждого ТекСтрока Из ТекущийДокумент.Задание Цикл
			ТекИндекс = ТекущийДокумент.Задание.Индекс(ТекСтрока) + 1;
			
			Если ТекИндекс > мМаксСтрок Тогда
				Прервать;
			КонецЕсли;
			
			стрОбласть = "ВРаспоряжение" + Строка(ТекИндекс);
			Если ЗначениеЗаполнено(ТекСтрока.Контрагент) Тогда
				Обл.Область(стрОбласть).Текст = ТекСтрока.Контрагент.НаименованиеПолное;
			ИначеЕсли ЗначениеЗаполнено(ТекСтрока.Подразделение) Тогда
				Обл.Область(стрОбласть).Текст = ТекСтрока.Подразделение.Наименование;
			КонецЕсли;	
			стрОбласть = "ВремяПрибытия" + Строка(ТекИндекс);
			Обл.Область(стрОбласть).Текст = ?(ТекСтрока.ВремяПрибытия - НачалоДня(ТекСтрока.ВремяПрибытия) = 0, "", Формат(ТекСтрока.ВремяПрибытия, "ДФ=ЧЧ:мм"));
			стрОбласть = "ВремяУбытия" + Строка(ТекИндекс);
			Обл.Область(стрОбласть).Текст = ?(ТекСтрока.ВремяУбытия - НачалоДня(ТекСтрока.ВремяУбытия) = 0, "", Формат(ТекСтрока.ВремяУбытия, "ДФ=ЧЧ:мм"));
			стрОбласть = "КоличествоЕздок" + Строка(ТекИндекс);
			Обл.Область(стрОбласть).Текст = ?(ТекСтрока.КоличествоЕздок = 0, "",ТекСтрока.КоличествоЕздок);
			стрОбласть = "КоличествоЧасов" + Строка(ТекИндекс);
			Обл.Область(стрОбласть).Текст = ?(ТекСтрока.КоличествоЧасов = 0, "", Формат(ТекСтрока.КоличествоЧасов, "ЧДЦ=2; ЧРД=:"));
		КонецЦикла;
		
		ТабДокумент.Вывести(Обл);
		
	КонецЕсли;
	
	// новая страница для печати полного путевого листа
	Если ФлагПечати = 0 Или ФлагПечати = 4 Тогда	
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	
	// оборотная сторона
	Если ФлагПечати <> 1 И ФлагПечати <> 5 Тогда
		
		Обл = Макет.ПолучитьОбласть("Оборотная");

		// реквизиты шапки
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыШапкиДляПечати(ТекущийДокумент, ФлагПечати));
		
		Обл.Параметры.СтрПутевойЛист  = "№" + ПолучитьНомерДляПечати(ТекущийДокумент.Организация, ТекущийДокумент.Номер) 
			+ " от " + Формат(ТекущийДокумент.Дата, "ДЛФ=D");

		// ТС 
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыТСДляПечати(ТекущийДокумент.ТранспортноеСредство));

		// ГСМ
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыГСМДляПечати(ТекущийДокумент, ФлагПечати));
			
		ТабДокумент.Вывести(Обл);
		
	КонецЕсли;
	
	Возврат ТабДокумент;
	
КонецФункции // Печать()

// Формирует печатную форму путевого листа башенного автокрана
//
// Параметры:
//  СсылкаНаОбъект - Ссылка на документ
//  ИмяМакета      - Имя макета
//  ФлагПечати     - признак печати
//
// Возвращаемое значение:
//  печатная форма
Функция уатПечать_Автокран(ТекущийДокумент, ОбъектыПечати, ФлагПечати="") Экспорт
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.уатПутевойЛист.ПФ_MXL_Автокран_стм");
	мМаксСтрок = 7;

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПутевойЛист_Автокран";
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ПолеСверху 	= 0;
	ТабДокумент.ПолеСлева 	= 0;
	ТабДокумент.ПолеСнизу 	= 0;
	ТабДокумент.ПолеСправа 	= 0;
	
	// лицевая сторона
	Если ФлагПечати <> 2 И ФлагПечати <> 3 Тогда
		
		Обл = Макет.ПолучитьОбласть("Лицевая");

		// номера и дата приказа Минтранса РФ
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыПриказаМинтранса(ТекущийДокумент.Дата));
		
		// реквизиты шапки
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыШапкиДляПечати(ТекущийДокумент, ФлагПечати));

		// ТС 
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыТСДляПечати(ТекущийДокумент.ТранспортноеСредство));

		// прицепы
		МассивПрицепов = ПолучитьМассивПрицеповПЛ(ТекущийДокумент);
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыПрицеповДляПечати(МассивПрицепов));

		// водитель 1
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыВодителяДляПечати(ТекущийДокумент.Водитель1, 1, 
			ТекущийДокумент.Дата, ТекущийДокумент.Организация));
		
		// водитель 2
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыВодителяДляПечати(ТекущийДокумент.Водитель2, 2, 
			ТекущийДокумент.Дата, ТекущийДокумент.Организация));
		
		// подписи ответственных лиц
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьОтветственныхДляПечати(ТекущийДокумент));

		// медосмотр
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыМедосмотраДляПечати(ТекущийДокумент));
		
		// ГСМ
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыГСМДляПечати(ТекущийДокумент, ФлагПечати));
		
		// задание водителю
		Для Каждого ТекСтрока Из ТекущийДокумент.Задание Цикл
			ТекИндекс = ТекущийДокумент.Задание.Индекс(ТекСтрока) + 1;
			
			Если ТекИндекс > мМаксСтрок Тогда
				Прервать;
			КонецЕсли;
			
			стрОбласть = "ВРаспоряжение" + Строка(ТекИндекс);
			Обл.Область(стрОбласть).Текст = ТекСтрока.Контрагент.Наименование;
			стрОбласть = "Откуда" + Строка(ТекИндекс);
			Обл.Область(стрОбласть).Текст = уатОбщегоНазначения.ПолучитьАдресСтрокой(ТекСтрока.АдресПрибытия);
			стрОбласть = "Куда" + Строка(ТекИндекс);
			Обл.Область(стрОбласть).Текст = уатОбщегоНазначения.ПолучитьАдресСтрокой(ТекСтрока.АдресУбытия);
			
		КонецЦикла; 
		
		ТабДокумент.Вывести(Обл);
		
	КонецЕсли;
	
	// новая страница для печати полного путевого листа
	Если ФлагПечати = 0 Или ФлагПечати = 4 Тогда	
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	
	// оборотная сторона
	Если ФлагПечати <> 1 И ФлагПечати <> 5 Тогда
		Обл = Макет.ПолучитьОбласть("Оборотная");		
		ТабДокумент.Вывести(Обл);
	КонецЕсли;

	Возврат ТабДокумент;
	
КонецФункции // Печать()

// Формирует печатную форму путевых листов ПА-1
//
// Параметры:
//  ИмяМакета - табличный документ
//  ФлагПечати: 0 - весь п/л, 1 - лиц. сторона, 2 - обр. сторона
Функция уатПечать_ПА1(ТекущийДокумент, ИмяМакета, ФлагПечати="") Экспорт
	
	Возврат уатПечать_ПЛ1(ТекущийДокумент, ИмяМакета, ФлагПечати);
	
КонецФункции

// Формирует печатную форму путевых листов ПГ-1
//
// Параметры:
//  ИмяМакета - табличный документ
//  ФлагПечати: 0 - весь п/л, 1 - лиц. сторона, 2 - обр. сторона
Функция уатПечать_ПГ1(ТекущийДокумент, ИмяМакета, ФлагПечати="") Экспорт
	
	Возврат уатПечать_ПЛ1(ТекущийДокумент, ИмяМакета, ФлагПечати);
	
КонецФункции

// Формирует печатную форму путевых листов ПЛ-1
//
// Параметры:
//  ИмяМакета - табличный документ
//  ФлагПечати: 0 - весь п/л, 1 - лиц. сторона, 2 - обр. сторона
Функция уатПечать_ПЛ1(ТекущийДокумент, ИмяМакета, ФлагПечати="") Экспорт
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.уатПутевойЛист." + ИмяМакета);
	ФорматДаты = "ДЛФ='Д'";
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПутевойЛист_ПутевойЛист";
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ТабДокумент.ПолеСверху 	= 0;
	ТабДокумент.ПолеСлева 	= 0;
	ТабДокумент.ПолеСнизу 	= 0;
	ТабДокумент.ПолеСправа 	= 0;

	// лицевая сторона
	Если ФлагПечати = 2 Или ФлагПечати = 3 Тогда
		Возврат ТабДокумент;
	КонецЕсли;
	
	Обл = Макет.ПолучитьОбласть("ОбластьШапка");

	// номера и дата приказа Минтранса РФ
    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыПриказаМинтранса(ТекущийДокумент.Дата));
	
	// реквизиты шапки
    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыШапкиДляПечати(ТекущийДокумент, ФлагПечати));

	// ТС 
    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыТСДляПечати(ТекущийДокумент.ТранспортноеСредство));

	// прицепы
	МассивПрицепов = ПолучитьМассивПрицеповПЛ(ТекущийДокумент);
    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыПрицеповДляПечати(МассивПрицепов));

	// водитель 1
    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыВодителяДляПечати(ТекущийДокумент.Водитель1, 1, 
		ТекущийДокумент.Дата, ТекущийДокумент.Организация));
	
	// водитель 2
    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыВодителяДляПечати(ТекущийДокумент.Водитель2, 2, 
		ТекущийДокумент.Дата, ТекущийДокумент.Организация));
	
	// подписи ответственных лиц
    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьОтветственныхДляПечати(ТекущийДокумент));
	
	// медосмотр
	ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыМедосмотраДляПечати(ТекущийДокумент));
	
	Обл.Параметры.ФИО = уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(
		ТекущийДокумент.Организация, КонецДня(ТекущийДокумент.ДатаВыезда)), "НаименованиеДляПечатныхФорм,ОГРН");
	
	мСведенияОПредпринимателе = уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(ТекущийДокумент.Организация, ТекущийДокумент.ДатаЗакрытия);
	Обл.Параметры.Адрес = мСведенияОПредпринимателе.ЮридическийАдрес;
	Обл.Параметры.Телефон = мСведенияОПредпринимателе.Телефоны;
	
	ТабДокумент.Вывести(Обл);
	
	// задание водителю
	Обл = Макет.ПолучитьОбласть("ОбластьСтрока");
	Для Каждого ТекЗадание Из ТекущийДокумент.Задание Цикл
		Обл.Параметры.Заказчик = ТекЗадание.Контрагент;
		Обл.Параметры.ЗаказчикПредставление = уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(
		ТекЗадание.Контрагент, ТекущийДокумент.ДатаЗакрытия), "НаименованиеДляПечатныхФорм,ОГРН,ЮридическийАдрес,Телефоны");
		Если ИмяМакета = "ПФ_MXL_ПГ1" Тогда
			Обл.Параметры.Номенклатура = ТекЗадание.Номенклатура;
		КонецЕсли;
		Если ИмяМакета = "ПФ_MXL_ПА1" ИЛИ ИмяМакета = "ПФ_MXL_ПГ1" Тогда
			Обл.Параметры.АдресУбытия = уатОбщегоНазначения.ПолучитьАдресСтрокой(ТекЗадание.АдресУбытия);
			Обл.Параметры.АдресПрибытия = уатОбщегоНазначения.ПолучитьАдресСтрокой(ТекЗадание.АдресПрибытия);
		КонецЕсли;
		Обл.Параметры.Расстояние = ТекЗадание.КоличествоКмГруз + ТекЗадание.КоличествоКмПорожний;
		ТабДокумент.Вывести(Обл);
	КонецЦикла;
	
	Обл = Макет.ПолучитьОбласть("ОбластьПодвал");
	ТабДокумент.Вывести(Обл);
	
	Возврат ТабДокумент;
	
КонецФункции // ПечатьПлатежногоПоручения()

// Формирует печатную форму путевых листов ЭСМ1
//
// Параметры:
//  ИмяМакета - табличный документ
//  ФлагПечати: 0 - весь п/л, 1 - лиц. сторона, 2 - обр. строна
Функция уатПечать_ЭСМ1(ТекущийДокумент, ИмяМакета, ФлагПечати="") Экспорт
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.уатПутевойЛист.ПФ_MXL_ЭСМ1_стм");

	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПутевойЛист_ЭСМ1";
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ПолеСверху 	= 0;
	ТабДокумент.ПолеСлева 	= 0;
	ТабДокумент.ПолеСнизу 	= 0;
	ТабДокумент.ПолеСправа 	= 0;
	
	// лицевая сторона
	Если ФлагПечати <> 2 И ФлагПечати <> 3 Тогда
		
		
		Обл = Макет.ПолучитьОбласть("Лицевая");

		// номера и дата приказа Минтранса РФ
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыПриказаМинтранса(ТекущийДокумент.Дата));
		
		// реквизиты шапки
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыШапкиДляПечати(ТекущийДокумент, ФлагПечати));

		// ТС 
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыТСДляПечати(ТекущийДокумент.ТранспортноеСредство));

		// водитель 1
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыВодителяДляПечати(ТекущийДокумент.Водитель1, 1, 
			ТекущийДокумент.Дата, ТекущийДокумент.Организация));
		
		// водитель 2
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыВодителяДляПечати(ТекущийДокумент.Водитель2, 2, 
			ТекущийДокумент.Дата, ТекущийДокумент.Организация));
		
		Если ТекущийДокумент.Задание.Количество() > 0 Тогда	
			ТекСтрока = ТекущийДокумент.Задание[0];
			
			// заказчик
		    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыЗаказчикаДляПечати(ТекСтрока.Контрагент, ТекущийДокумент.ДатаЗакрытия));
			
			ДанныеЗаполнения = Новый Структура;
			ТекстОбъекта = ТекСтрока.ОбъектСтроительства.Наименование + ", " + уатОбщегоНазначения.ПолучитьАдресСтрокой(ТекСтрока.АдресПрибытия);
			Если Прав(ТекстОбъекта, 2) = ", " Тогда
				ТекстОбъекта = Сред(ТекстОбъекта, 1, СтрДлина(ТекстОбъекта)-2);
			КонецЕсли;
			ДанныеЗаполнения.Вставить("Объект", ТекстОбъекта);
			ЗаполнитьЗначенияСвойств(Обл.Параметры, ДанныеЗаполнения);
		КонецЕсли;
		
		ТабДокумент.Вывести(Обл);
	КонецЕсли;
	
	// новая страница для печати полного путевого листа
	Если ФлагПечати = 0 Или ФлагПечати = 4 Тогда	
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	
	// лицевая сторона
	Если ФлагПечати <> 1 И ФлагПечати <> 5 Тогда
		
		Обл = Макет.ПолучитьОбласть("Оборотная");
  		Обл.Параметры.ВодительПринял = уатОбщегоНазначения.уатФИОСотрудникаПолноеСтрокой(ТекущийДокумент.Водитель1);

		// водитель 1
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыВодителяДляПечати(ТекущийДокумент.Водитель1, 1, 
			ТекущийДокумент.Дата, ТекущийДокумент.Организация));
		
		// водитель 2
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыВодителяДляПечати(ТекущийДокумент.Водитель2, 2, 
			ТекущийДокумент.Дата, ТекущийДокумент.Организация));
		
		ТабДокумент.Вывести(Обл);
		
	КонецЕсли;

	Возврат ТабДокумент;
	
КонецФункции // уатПечать_ЭСМ1()

// Формирует печатную форму путевых листов ЭСМ2
//
// Параметры:
//  ИмяМакета - табличный документ
//  ФлагПечати: 0 - весь п/л, 1 - лиц. сторона, 2 - обр. сторона
Функция уатПечать_ЭСМ2(ТекущийДокумент, ИмяМакета, ФлагПечати="") Экспорт
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.уатПутевойЛист." + ИмяМакета);
	мМаксСтрок = 6;
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПутевойЛист_ПутевойЛист";
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ПолеСверху 	= 0;
	ТабДокумент.ПолеСлева 	= 0;
	ТабДокумент.ПолеСнизу 	= 0;
	ТабДокумент.ПолеСправа 	= 0;
	
	// лицевая сторона
	Если ФлагПечати <> 2 И ФлагПечати <> 3 Тогда

		
		Обл = Макет.ПолучитьОбласть("Лицевая");

		// номера и дата приказа Минтранса РФ
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыПриказаМинтранса(ТекущийДокумент.Дата));
		
		// реквизиты шапки
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыШапкиДляПечати(ТекущийДокумент, ФлагПечати));
		
		// ТС 
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыТСДляПечати(ТекущийДокумент.ТранспортноеСредство));

		// водитель 1
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыВодителяДляПечати(ТекущийДокумент.Водитель1, 1, 
			ТекущийДокумент.Дата, ТекущийДокумент.Организация));
		
		// подписи ответственных лиц
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьОтветственныхДляПечати(ТекущийДокумент));

		// медосмотр
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыМедосмотраДляПечати(ТекущийДокумент));

		// ГСМ
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыГСМДляПечати(ТекущийДокумент, ФлагПечати));
		
		Для Каждого ТекСтрока Из ТекущийДокумент.Задание Цикл
			ТекИндекс = ТекущийДокумент.Задание.Индекс(ТекСтрока) + 1;
			
			Если ТекИндекс > мМаксСтрок Тогда
				Прервать;
			КонецЕсли;
			
			ТекстОбъекта = ТекСтрока.ОбъектСтроительства.Наименование + ", " + уатОбщегоНазначения.ПолучитьАдресСтрокой(ТекСтрока.АдресПрибытия);
			Если Прав(ТекстОбъекта, 2) = ", " Тогда
				ТекстОбъекта = Сред(ТекстОбъекта, 1, СтрДлина(ТекстОбъекта)-2);
			КонецЕсли;
			Если Лев(ТекстОбъекта, 2) = ", " Тогда
				ТекстОбъекта = Сред(ТекстОбъекта, 3, СтрДлина(ТекстОбъекта));
			КонецЕсли;
			
			ДанныеСтроки = Новый Структура();
			ДанныеСтроки.Вставить("Дата" + Строка(ТекИндекс), День(ТекСтрока.ВремяПрибытия));
			ДанныеСтроки.Вставить("Объект" + Строка(ТекИндекс), ТекстОбъекта);
			ДанныеСтроки.Вставить("ВремяПрибытия" + Строка(ТекИндекс), ?(ТекСтрока.ВремяПрибытия - НачалоДня(ТекСтрока.ВремяПрибытия) = 0, "", Формат(ТекСтрока.ВремяПрибытия, "ДФ=ЧЧ:мм")));
			ДанныеСтроки.Вставить("ВремяУбытия" + Строка(ТекИндекс), ?(ТекСтрока.ВремяУбытия - НачалоДня(ТекСтрока.ВремяУбытия) = 0, "", Формат(ТекСтрока.ВремяУбытия, "ДФ=ЧЧ:мм")));
			ЗаполнитьЗначенияСвойств(Обл.Параметры, ДанныеСтроки);
			
			Если ТекИндекс = 1 Тогда
				
				// заказчик
		    	ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыЗаказчикаДляПечати(ТекСтрока.Контрагент, ТекущийДокумент.ДатаЗакрытия));
				
				// ГСМ
			    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыГСМДляПечати(ТекущийДокумент, ФлагПечати));
				
			КонецЕсли;
			
		КонецЦикла;
		
		ТабДокумент.Вывести(Обл);
	КонецЕсли;
	
	// новая страница для печати полного путевого листа
	Если ФлагПечати = 0 Или ФлагПечати = 4 Тогда	
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	
	// оборотная сторона
	Если ФлагПечати <> 1 И ФлагПечати <> 5 Тогда
		Обл = Макет.ПолучитьОбласть("Оборотная");
		Обл.Параметры.ВодительПринял = уатОбщегоНазначения.уатФИОСотрудникаПолноеСтрокой(ТекущийДокумент.Водитель1);
		ТабДокумент.Вывести(Обл);
	КонецЕсли;

	Возврат ТабДокумент;
	
КонецФункции // ПечатьПлатежногоПоручения()

// Формирует печатную форму путевых листов ЭСМ3
//
// Параметры:
//  ИмяМакета - табличный документ
//  ФлагПечати: 0 - весь п/л, 1 - лиц. сторона, 2 - обр. строна
Функция уатПечать_ЭСМ3(ТекущийДокумент, ИмяМакета, ФлагПечати="") Экспорт
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.уатПутевойЛист.ПФ_MXL_ЭСМ3_стм");
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПутевойЛист_ЭСМ3";
	ТабДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ТабДокумент.ПолеСверху 	= 0;
	ТабДокумент.ПолеСлева 	= 0;
	ТабДокумент.ПолеСнизу 	= 0;
	ТабДокумент.ПолеСправа 	= 0;
	
	// лицевая сторона
	Если ФлагПечати <> 2 И ФлагПечати <> 3 Тогда
		
		Обл = Макет.ПолучитьОбласть("Лицевая");

		// номера и дата приказа Минтранса РФ
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыПриказаМинтранса(ТекущийДокумент.Дата));
		
		// реквизиты шапки
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыШапкиДляПечати(ТекущийДокумент, ФлагПечати));

		// ТС 
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыТСДляПечати(ТекущийДокумент.ТранспортноеСредство));

		// водитель 1
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыВодителяДляПечати(ТекущийДокумент.Водитель1, 1, 
			ТекущийДокумент.Дата, ТекущийДокумент.Организация));
		
		// водитель 2
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыВодителяДляПечати(ТекущийДокумент.Водитель2, 2, 
			ТекущийДокумент.Дата, ТекущийДокумент.Организация));

		ТекИндекс = 0;
		ТЗЗадание = ТекущийДокумент.Задание.Выгрузить();
		ТЗЗадание.Колонки.Добавить("ЧислоМесяца");
		Для Каждого ТекСтрока Из ТЗЗадание Цикл
			ТекСтрока.ЧислоМесяца = День(ТекСтрока.ВремяПрибытия);
		КонецЦикла;
		ТЗЗадание.Свернуть("ОбъектСтроительства, АдресПрибытия, Контрагент, ЧислоМесяца", "КоличествоЧасов");
		
		мМаксСтрок = 10;
		Для Каждого ТекСтрока Из ТЗЗадание Цикл
			Если НЕ ЗначениеЗаполнено(ТекСтрока.ОбъектСтроительства) Тогда
				Продолжить;
			КонецЕсли;
			
			ТекИндекс = ТекИндекс + 1;
			Если ТекИндекс > мМаксСтрок Тогда
				Прервать;
			КонецЕсли;
			
			Если ТекИндекс = 1 Тогда
				
				// заказчик
			    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыЗаказчикаДляПечати(ТекСтрока.Контрагент, ТекущийДокумент.ДатаЗакрытия));
				
				// ГСМ
			    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыГСМДляПечати(ТекущийДокумент, ФлагПечати));
				
			КонецЕсли;	
			
			Обл.Параметры["Дата" + ТекИндекс]   = ТекСтрока.ЧислоМесяца;
			ТекстОбъекта = ТекСтрока.ОбъектСтроительства.Наименование + ", " + уатОбщегоНазначения.ПолучитьАдресСтрокой(ТекСтрока.АдресПрибытия);
			Если Прав(ТекстОбъекта, 2) = ", " Тогда
				ТекстОбъекта = Сред(ТекстОбъекта, 1, СтрДлина(ТекстОбъекта)-2);
			КонецЕсли;
			Обл.Параметры["Объект" + ТекИндекс] = ТекстОбъекта;
			Обл.Параметры["ВремяРаботы" + ТекИндекс]  = ТекСтрока.КоличествоЧасов;
			
		КонецЦикла;
		
		ТабДокумент.Вывести(Обл);
		
	КонецЕсли;
	
	// новая страница для печати полного путевого листа
	Если ФлагПечати = 0 Или ФлагПечати = 4 Тогда	
		ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
	КонецЕсли;
	
	// оборотная сторона
	Если ФлагПечати <> 1 И ФлагПечати <> 5 Тогда
		
		мМаксСтрок = 4;
		
		Обл = Макет.ПолучитьОбласть("Оборотная");
		
		// водитель 1
		Обл.Параметры.ВодительПринял = уатОбщегоНазначения.уатФИОСотрудникаПолноеСтрокой(ТекущийДокумент.Водитель1);
		
		ТекИндекс = 0;
		Для Каждого ТекСтрока Из ТекущийДокумент.Задание Цикл
			Если НЕ ЗначениеЗаполнено(ТекСтрока.ОбъектСтроительства) Тогда
				Продолжить;
			КонецЕсли;
			
			ТекИндекс = ТекИндекс + 1;
			
			Если ТекИндекс > мМаксСтрок Тогда                     
				Прервать;
			КонецЕсли;
			
			Обл.Параметры["ЧислоМесяцаПрибытие" + ТекИндекс]   = День(ТекСтрока.ВремяПрибытия);				
			Обл.Параметры["ВремяПрибытия" + ТекИндекс] = ТекСтрока.ВремяПрибытия;
			Обл.Параметры["ВремяУбытия" + ТекИндекс]  = ТекСтрока.ВремяУбытия;
			Обл.Параметры["Отработно" + ТекИндекс]  = ТекСтрока.КоличествоЧасов;
			ТекстОбъекта = ТекСтрока.ОбъектСтроительства.Наименование + ", " + уатОбщегоНазначения.ПолучитьАдресСтрокой(ТекСтрока.АдресПрибытия);
			Если Прав(ТекстОбъекта, 2) = ", " Тогда
				ТекстОбъекта = Сред(ТекстОбъекта, 1, СтрДлина(ТекстОбъекта)-2);
			КонецЕсли;
			Обл.Параметры["ОбъектОб" + ТекИндекс] = ТекстОбъекта;
			
		КонецЦикла;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	уатПутевойЛистФактическиОтработанноеВремя.Дата КАК Дата
		|ИЗ
		|	Документ.уатПутевойЛист.ФактическиОтработанноеВремя КАК уатПутевойЛистФактическиОтработанноеВремя
		|ГДЕ
		|	уатПутевойЛистФактическиОтработанноеВремя.Ссылка = &Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатПутевойЛистФактическиОтработанноеВремя.Ссылка,
		|	уатПутевойЛистФактическиОтработанноеВремя.Дата КАК Дата,
		|	уатПутевойЛистФактическиОтработанноеВремя.Сотрудник КАК Сотрудник,
		|	уатПутевойЛистФактическиОтработанноеВремя.ВремяДневное КАК ВремяДневное,
		|	уатПутевойЛистФактическиОтработанноеВремя.ВремяНочное КАК ВремяНочное,
		|	уатПутевойЛистФактическиОтработанноеВремя.Сотрудник.Код КАК ТабельныйНомер
		|ИЗ
		|	Документ.уатПутевойЛист.ФактическиОтработанноеВремя КАК уатПутевойЛистФактическиОтработанноеВремя
		|ГДЕ
		|	уатПутевойЛистФактическиОтработанноеВремя.Ссылка = &Ссылка
		|ИТОГИ
		|	КОЛИЧЕСТВО(РАЗЛИЧНЫЕ Дата),
		|	СУММА(ВремяДневное),
		|	СУММА(ВремяНочное),
		|	МИНИМУМ(ТабельныйНомер)
		|ПО
		|	Сотрудник";
		Запрос.УстановитьПараметр("Ссылка", ТекущийДокумент.Ссылка);
		
		ТекИндекс = 1;
		СоответствиеДатыИЯчейки = Новый Соответствие;
		ВыборкаДат = Запрос.ВыполнитьПакет()[0].Выбрать();
		Пока ВыборкаДат.Следующий() Цикл
			Если ТекИндекс > 10 Тогда
				Прервать;
			КонецЕсли;
			Обл.Параметры["ЧислоМесяца" + ТекИндекс] = День(ВыборкаДат.Дата);
			СоответствиеДатыИЯчейки.Вставить(ВыборкаДат.Дата, ТекИндекс);
			ТекИндекс = ТекИндекс + 1;
		КонецЦикла;
		
		мМаксСтрок = 10;
		ТекИндексСтроки = 1;
		ВыборкаСотрудник = Запрос.ВыполнитьПакет()[1].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаСотрудник.Следующий() Цикл
			Обл.Параметры["Сотрудник" + ТекИндексСтроки]	  = ВыборкаСотрудник.Сотрудник;
			Обл.Параметры["ТабНомер" + ТекИндексСтроки]		  = ВыборкаСотрудник.ТабельныйНомер;
			Обл.Параметры["КолЧасов" + ТекИндексСтроки]		  = уатОбщегоНазначения.уатВремяВЧЧ_ММ(ВыборкаСотрудник.ВремяДневное);
			Обл.Параметры["КолНочныхЧасов" + ТекИндексСтроки] = уатОбщегоНазначения.уатВремяВЧЧ_ММ(ВыборкаСотрудник.ВремяНочное);
			Обл.Параметры["КолДней" + ТекИндексСтроки]		  = ВыборкаСотрудник.Дата;
			
			ВыборкаДень = ВыборкаСотрудник.Выбрать();
			Пока ВыборкаДень.Следующий() Цикл
				ТекИндексСтолбца = СоответствиеДатыИЯчейки.Получить(ВыборкаДень.Дата);
				Если НЕ ЗначениеЗаполнено(ТекИндексСтолбца) Тогда
					Прервать;
				КонецЕсли;
				ОбщееВремя = ВыборкаДень.ВремяДневное + ВыборкаДень.ВремяНочное;
				Обл.Параметры["Яч" + ТекИндексСтроки + ТекИндексСтолбца] = ОбщееВремя/3600;
			КонецЦикла;
			ТекИндексСтроки = ТекИндексСтроки + 1;
			
			Если ТекИндексСтроки > мМаксСтрок Тогда                     
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ТабДокумент.Вывести(Обл);
	КонецЕсли;
	
	Возврат ТабДокумент;
	
КонецФункции // уатПечать_ЭСМ3()

// Формирует печатную форму путевых листов ЭСМ7
//
// Параметры:
//  ИмяМакета - табличный документ
//  ФлагПечати: 0 - весь п/л, 1 - лиц. сторона, 2 - обр. строна
Функция уатПечать_ЭСМ7(МассивОбъектов, ОбъектыПечати, ФлагПечати="") Экспорт
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПутевойЛист_ЭСМ7";
	ПервыйДокумент = Истина;
		
	Для Каждого ТекущийДокумент Из МассивОбъектов Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_уатЭСМ7");

		ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПутевойЛист_ЭСМ7";
		ТабличныйДокумент.ОриентацияСтраницы	= ОриентацияСтраницы.Портрет;
		ТабличныйДокумент.ПолеСверху			= 5;
		ТабличныйДокумент.ПолеСлева				= 5;
		ТабличныйДокумент.ПолеСнизу				= 5;
		ТабличныйДокумент.ПолеСправа			= 5;
		
		Обл = Макет.ПолучитьОбласть("Лицевая");
		
		// реквизиты шапки
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыШапкиДляПечати(ТекущийДокумент, ФлагПечати));
		
		// ТС 
	    ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыТСДляПечати(ТекущийДокумент.ТранспортноеСредство));
		
		// водители
		Водители = уатОбщегоНазначения.уатФИОСотрудникаПолноеСтрокой(ТекущийДокумент.Водитель1, ТекущийДокумент.Дата);
		Если ЗначениеЗаполнено(ТекущийДокумент.Водитель2) Тогда
			Обл.Параметры.Водители = СокрЛП(Водители) + ", " + уатОбщегоНазначения.уатФИОСотрудникаПолноеСтрокой(ТекущийДокумент.Водитель2, ТекущийДокумент.Дата);
		Иначе
			Обл.Параметры.Водители = Водители;
		КонецЕсли;
		
		// мМаксСтрок = 7; ограничение - выводятся данные только из первой строки
		Для Каждого СтрокаЗадания Из ТекущийДокумент.Задание Цикл
			Если Не ЗначениеЗаполнено(СтрокаЗадания.ОбъектСтроительства) Тогда
				Продолжить;
			КонецЕсли;
			
			СписокТребуемыхПараметров			= "НаименованиеДляПечатныхФорм,ЮридическийАдрес,Телефоны";
			СведенияОбОбъекте					= уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(СтрокаЗадания.Контрагент, ТекущийДокумент.Дата);
			мЗаказчик							= уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(СведенияОбОбъекте, СписокТребуемыхПараметров);
			
			Обл.Параметры.Заказчик				= СтрокаЗадания.Контрагент;
			Обл.Параметры.ЗаказчикПредставление	= мЗаказчик;
			
			//С000640935 
			//Если СтрДлина(мЗаказчик) > 65 тогда
			//	Обл.Области.ОбластьЗаказчикПредставление.Шрифт = Новый Шрифт(Обл.Области.ОбластьЗаказчикПредставление.Шрифт,,7);
			//КонецЕсли;
			
			Обл.Параметры.Объект	= СтрокаЗадания.ОбъектСтроительства;
			Обл.Параметры.ЗаказчикКодПоОКПО	= СтрокаЗадания.Контрагент.КодПоОКПО;
			
			// заполняем должность и наименование заказчика
			ДанныеКонтрагента = уатОбщегоНазначения_проф.ПолучитьДолжностьИНаименованиеКонтрагента(СтрокаЗадания.Контрагент);
			Обл.Параметры.ДолжностьЗаказчика = ДанныеКонтрагента.Должность;
			Обл.Параметры.ФИОЗаказчика = ДанныеКонтрагента.Наименование;
			
			мСтроки = ТекущийДокумент.Задание.НайтиСтроки(Новый Структура("ОбъектСтроительства", СтрокаЗадания.ОбъектСтроительства));
			мВремяРаботы = 0;
			Для каждого ТекСтрока ИЗ мСтроки цикл
				мВремяРаботы = уатЗащищенныеФункцииСервер.СложитьВремя(мВремяРаботы, ТекСтрока.КоличествоЧасов);
			КонецЦикла;
			
			Обл.Параметры.Количество1 = мВремяРаботы;
			ОтработаноПрописью = "";
			Если ЗначениеЗаполнено(Цел(мВремяРаботы)) тогда
				ОтработаноПрописью = СтрЗаменить(ЧислоПрописью(Цел(мВремяРаботы), "L=ru_RU", "час, часа, часов, м")," 00","");
			КонецЕсли;
			Если ЗначениеЗаполнено(мВремяРаботы - Цел(мВремяРаботы)) тогда
				ОтработаноПрописью = ОтработаноПрописью + СтрЗаменить(ЧислоПрописью((мВремяРаботы - Цел(мВремяРаботы))*100, "L=ru_RU; FN=Ложь", "минута, минуты, минут, ж")," 00","");
			КонецЕсли;
			Обл.Параметры.ОтработаноМашиноЧасов = ОтработаноПрописью;
			
			Прервать;
			
		КонецЦикла;
		
		ОтветственныеЛица = уатОбщегоНазначенияТиповые.уатОтветственныеЛицаОрганизаций(ТекущийДокумент.Организация, ТекущийДокумент.Дата); 
		Если ОтветственныеЛица.Свойство("Руководитель") И ЗначениеЗаполнено(ОтветственныеЛица.Руководитель) Тогда 
			Обл.Параметры.ФИОРуководителя = ОтветственныеЛица.Руководитель;
			Если ОтветственныеЛица.Свойство("РуководительДолжность") И ЗначениеЗаполнено(ОтветственныеЛица.РуководительДолжность) Тогда
				Обл.Параметры.Должность = ОтветственныеЛица.РуководительДолжность;
			КонецЕсли;
		Иначе 
			Обл.Параметры.ФИОРуководителя = ТекущийДокумент.Организация;
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(Обл);
		
		ТабличныйДокумент.ОтображатьСетку = Ложь;
		ТабличныйДокумент.Защита = Ложь;
		ТабличныйДокумент.ТолькоПросмотр = Ложь;
		ТабличныйДокумент.ОтображатьЗаголовки = Ложь;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ТекущийДокумент);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;

	Возврат ТабличныйДокумент;
	
КонецФункции // уатПечать_ЭСМ7()

// Формирует печатную форму маршрутного листа по заданию.
//
// Параметры:
//  МассивОбъектов - массив документов,
//  ОбъектыПечати - массив документов
//
Функция ПечататьМаршрутныйЛистПоЗаданию(МассивОбъектов, ОбъектыПечати) Экспорт
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_ПутевойЛист";
	
	ПервыйДокумент = Истина;
	
	Для Каждого ТекущийДокумент Из МассивОбъектов Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ТабличныйДокумент.ИмяПараметровПечати = "ПараметрыПечати_ПутевойЛист_МаршрутныйЛистПоЗаданию";
		Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_уатМаршрутныйЛист");
		
		// Заголовок
		Область = Макет.ПолучитьОбласть("Заголовок");
		ТабличныйДокумент.Вывести(Область);
		
		// Шапка
		Область = Макет.ПолучитьОбласть("Шапка");
		
		ПечатьПрефиксовВключена = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ТекущийДокумент.Организация, ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ВыводитьПрефиксПриПечати"));
		Если ПечатьПрефиксовВключена Тогда
			Область.Параметры.Номер = ТекущийДокумент.Номер;
		Иначе 
			Область.Параметры.Номер = уатОбщегоНазначенияКлиентСервер.НомерДокументаНаПечать(ТекущийДокумент.Номер, Истина, Истина);
		КонецЕсли;
	
		Область.Параметры.Дата = ТекущийДокумент.ДатаЗакрытия;
		Область.Параметры.Организация = ТекущийДокумент.Организация;
		Область.Параметры.ВидЗаказа = Справочники.уатВидыПеревозок.АвтомобильнаяГрузовая;
		Область.Параметры.ТС = Строка(ТекущийДокумент.ТранспортноеСредство);
		Область.Параметры.Водитель = ТекущийДокумент.Водитель1;
		Область.Параметры.ПредставлениеВодителя = уатОбщегоНазначения.уатФИОСотрудникаПолноеСтрокой(ТекущийДокумент.Водитель1, НачалоДня(ТекущийДокумент.ДатаЗакрытия));;
		
		Область.Параметры.Ответственный = ТекущийДокумент.Ответственный;
		ТабличныйДокумент.Вывести(Область);
		
		// Задания
		Область = Макет.ПолучитьОбласть("ЗаданияШапка");
		ТабличныйДокумент.Вывести(Область);
		Для Каждого ТекСтрокаЗадания Из ТекущийДокумент.Задание Цикл
			Область = Макет.ПолучитьОбласть("Задания");
			Если Не ЗначениеЗаполнено(ТекСтрокаЗадания.Контрагент) Тогда
				Область.Параметры.Заказчик = ТекСтрокаЗадания.Подразделение;
			Иначе	
				Область.Параметры.Заказчик = ТекСтрокаЗадания.Контрагент;
			КонецЕсли;	
			Область.Параметры.Маршрут = ТекСтрокаЗадания.Маршрут;
			Область.Параметры.ПунктЗагрузки = уатОбщегоНазначения.ПолучитьАдресСтрокой(ТекСтрокаЗадания.АдресПрибытия);
			Область.Параметры.ВремяЗагрузки =  ТекСтрокаЗадания.ВремяПрибытия;
			Область.Параметры.ВремяЗагрузки = Формат(ТекСтрокаЗадания.ВремяПрибытия, 
				?(ТекСтрокаЗадания.ВремяПрибытия - НачалоДня(ТекСтрокаЗадания.ВремяПрибытия) = 0, "ДФ=dd.MM.yyyy", "ДФ='dd.MM.yyyy ЧЧ:мм'"));
			Область.Параметры.ПунктРазгрузки = уатОбщегоНазначения.ПолучитьАдресСтрокой(ТекСтрокаЗадания.АдресУбытия);
			Область.Параметры.ВремяРазгрузки = Формат(ТекСтрокаЗадания.ВремяУбытия, 
				?(ТекСтрокаЗадания.ВремяУбытия - НачалоДня(ТекСтрокаЗадания.ВремяУбытия) = 0, "ДФ=dd.MM.yyyy", "ДФ='dd.MM.yyyy ЧЧ:мм'"));
			Область.Параметры.Расстояние = ТекСтрокаЗадания.КоличествоКмГруз + ТекСтрокаЗадания.КоличествоКмПорожний;
			Область.Параметры.Груз = ТекСтрокаЗадания.Номенклатура;
			Область.Параметры.ВесГруза = ТекСтрокаЗадания.КоличествоТонн;
			Область.Параметры.КоличествоЕздок = ТекСтрокаЗадания.КоличествоЕздок;
			ТабличныйДокумент.Вывести(Область);
		КонецЦикла;
		
		ТабличныйДокумент.ПолеСлева = 0;
		ТабличныйДокумент.ПолеСправа = 0;
		ТабличныйДокумент.ПолеСверху = 0;
		ТабличныйДокумент.ПолеСнизу = 0;
		//ТабличныйДокумент.ИмяПараметровПечати = "ПутевойЛист";
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		
		ТабличныйДокумент.ОтображатьСетку = Ложь;
		ТабличныйДокумент.Защита = Ложь;
		ТабличныйДокумент.ТолькоПросмотр = Ложь;
		ТабличныйДокумент.ОтображатьЗаголовки = Ложь;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ТекущийДокумент);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

// Формирует лицевую сторону печатной формы при выезде.
//
// Параметры:
//  МассивОбъектов - массив документов,
//  ОбъектыПечати - массив документов
//
Функция ПечататьЛицСторону(МассивОбъектов, ОбъектыПечати) Экспорт
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_ПутевойЛист";
	
	ПервыйДокумент = Истина;
	флИспользованиеШК = уатЗащищенныеФункцииСервер_проф.ИспользоватьШтрихкодированиеОбъекта("уатПутевойЛист");
		
	Для Каждого ТекущийДокумент Из МассивОбъектов Цикл
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// начало формирования типовой печатной формы
		ИмяМакета = ТекущийДокумент.ВидПЛ.Метаданные().ЗначенияПеречисления[Перечисления.уатВидыПЛ.Индекс(ТекущийДокумент.ВидПЛ)].Имя;
		Если (ИмяМакета = "_ЭСМ1") Или (ИмяМакета = "_ЭСМ3") Тогда
			ИмяФункцииПечати = "уатПечать" + ИмяМакета + "(ТекущийДокумент, ""уат"" + Сред(ИмяМакета,2,4), 1)";
		ИначеЕсли (ИмяМакета = "_6") Тогда
			ИмяФункцииПечати = "уатПечать" + ИмяМакета + "(ТекущийДокумент, ИмяМакета + ""_пп"", 1)";
		ИначеЕсли (ИмяМакета = "_412_АПК") Тогда
			ИмяФункцииПечати = "уатПечать" + ИмяМакета + "(ТекущийДокумент,ИмяМакета, 1)";
		Иначе
			ИмяФункцииПечати = "уатПечать" + ИмяМакета + "(ТекущийДокумент, ИмяМакета, 1)";
		КонецЕсли;
		ИмяМакета = "ПФ_MXL" + ИмяМакета;
		ТабДокумент = Вычислить(ИмяФункцииПечати);
		// конец формирования типовой печатной формы
		
		// печать штрихкодов
		Если флИспользованиеШК Тогда
			уатЗащищенныеФункцииСервер_проф.ОтобразитьШКнаПФ(ТабДокумент, ТекущийДокумент);
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ТабДокумент);
		
		ТабличныйДокумент.ПолеСлева = 0;
		ТабличныйДокумент.ПолеСправа = 0;
		ТабличныйДокумент.ПолеСверху = 0;
		ТабличныйДокумент.ПолеСнизу = 0;
		//ТабличныйДокумент.ИмяПараметровПечати = "ПутевойЛист";
		
		Если ИмяМакета = "ПФ_MXL_3" ИЛИ ИмяМакета = "ПФ_MXL_ПЛ1"
			ИЛИ ИмяМакета = "ПФ_MXL_ПГ1" ИЛИ ИмяМакета = "ПФ_MXL_ПА1" Тогда
			
			ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		Иначе
			ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		КонецЕсли;
		
		ТабличныйДокумент.ОтображатьСетку = Ложь;
		ТабличныйДокумент.Защита = Ложь;
		ТабличныйДокумент.ТолькоПросмотр = Ложь;
		ТабличныйДокумент.ОтображатьЗаголовки = Ложь;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ТекущийДокумент);
	КонецЦикла;
		
	ТабличныйДокумент.АвтоМасштаб = Истина;
		
	Возврат ТабличныйДокумент;
КонецФункции

// Формирует лицевую сторону печатной формы при возвращении.
//
// Параметры:
//  МассивОбъектов - массив документов,
//  ОбъектыПечати - массив документов
//
Функция ПечататьЛицСторонуПолная(МассивОбъектов, ОбъектыПечати) Экспорт
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_ПутевойЛист";
	
	ПервыйДокумент = Истина;
	флИспользованиеШК = уатЗащищенныеФункцииСервер_проф.ИспользоватьШтрихкодированиеОбъекта("уатПутевойЛист");
		
	Для Каждого ТекущийДокумент Из МассивОбъектов Цикл
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// начало формирования типовой печатной формы
		ИмяМакета = ТекущийДокумент.ВидПЛ.Метаданные().ЗначенияПеречисления[Перечисления.уатВидыПЛ.Индекс(ТекущийДокумент.ВидПЛ)].Имя;
		Если (ИмяМакета = "_ЭСМ1") Или (ИмяМакета = "_ЭСМ3") Тогда
			ИмяФункцииПечати = "уатПечать" + ИмяМакета + "(ТекущийДокумент,""уат""+сред(ИмяМакета,2,4), 5)";
		ИначеЕсли (ИмяМакета = "_6") Тогда
			ИмяФункцииПечати = "уатПечать" + ИмяМакета + "(ТекущийДокумент,ИмяМакета + ""_пп"", 5)";
		Иначе
			ИмяФункцииПечати = "уатПечать" + ИмяМакета + "(ТекущийДокумент,ИмяМакета, 5)";
		КонецЕсли;
		ИмяМакета = "ПФ_MXL" + ИмяМакета;
		ТабДокумент = Вычислить(ИмяФункцииПечати);
		// конец формирования типовой печатной формы
		
		// печать штрихкодов
		Если флИспользованиеШК Тогда
			уатЗащищенныеФункцииСервер_проф.ОтобразитьШКнаПФ(ТабДокумент, ТекущийДокумент);
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ТабДокумент);
		
		ТабличныйДокумент.ПолеСлева = 0;
		ТабличныйДокумент.ПолеСправа = 0;
		ТабличныйДокумент.ПолеСверху = 0;
		ТабличныйДокумент.ПолеСнизу = 0;
		//ТабличныйДокумент.ИмяПараметровПечати = "ПутевойЛист";
		
		Если ИмяМакета = "ПФ_MXL_3" ИЛИ ИмяМакета = "ПФ_MXL_ПЛ1"
			ИЛИ ИмяМакета = "ПФ_MXL_ПГ1" ИЛИ ИмяМакета = "ПФ_MXL_ПА1" Тогда
			
			ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		Иначе
			ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		КонецЕсли;
		
		ТабличныйДокумент.ОтображатьСетку = Ложь;
		ТабличныйДокумент.Защита = Ложь;
		ТабличныйДокумент.ТолькоПросмотр = Ложь;
		ТабличныйДокумент.ОтображатьЗаголовки = Ложь;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ТекущийДокумент);
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
КонецФункции

// Формирует оборотную сторону печатной формы при выезде.
//
// Параметры:
//  МассивОбъектов - массив документов,
//  ОбъектыПечати - массив документов
//
Функция ПечататьОбрСторону(МассивОбъектов, ОбъектыПечати) Экспорт
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_ПутевойЛист";
	
	ПервыйДокумент = Истина;
	
	Для Каждого ТекущийДокумент Из МассивОбъектов Цикл
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// начало формирования типовой печатной формы
		ИмяМакета = ТекущийДокумент.ВидПЛ.Метаданные().ЗначенияПеречисления[Перечисления.уатВидыПЛ.Индекс(ТекущийДокумент.ВидПЛ)].Имя;
		Если (ИмяМакета = "_ЭСМ1") Или (ИмяМакета = "_ЭСМ3") Тогда
			ИмяФункцииПечати = "уатПечать" + ИмяМакета + "(ТекущийДокумент,""уат""+сред(ИмяМакета,2,4), 2)";
		ИначеЕсли (ИмяМакета = "_6") Тогда
			ИмяФункцииПечати = "уатПечать" + ИмяМакета + "(ТекущийДокумент,ИмяМакета + ""_пп"", 2)";
		ИначеЕсли (ИмяМакета = "_412_АПК") Тогда
			ИмяФункцииПечати = "уатПечать" + ИмяМакета + "(ТекущийДокумент,ИмяМакета, 2)";
		Иначе	
			ИмяФункцииПечати = "уатПечать" + ИмяМакета + "(ТекущийДокумент,ИмяМакета, 2)";
		КонецЕсли;
		ИмяМакета = "ПФ_MXL" + ИмяМакета;
		ТабДокумент = Вычислить(ИмяФункцииПечати);
		// конец формирования типовой печатной формы
		
		ТабличныйДокумент.Вывести(ТабДокумент);
		
		ТабличныйДокумент.ПолеСлева = 0;
		ТабличныйДокумент.ПолеСправа = 0;
		ТабличныйДокумент.ПолеСверху = 0;
		ТабличныйДокумент.ПолеСнизу = 0;
		//ТабличныйДокумент.ИмяПараметровПечати = "ПутевойЛист";
		
		Если ИмяМакета = "ПФ_MXL_3" ИЛИ ИмяМакета = "ПФ_MXL_ПЛ1"
			ИЛИ ИмяМакета = "ПФ_MXL_ПГ1" ИЛИ ИмяМакета = "ПФ_MXL_ПА1" Тогда
			
			ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		Иначе
			ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		КонецЕсли;
		
		ТабличныйДокумент.ОтображатьСетку = Ложь;
		ТабличныйДокумент.Защита = Ложь;
		ТабличныйДокумент.ТолькоПросмотр = Ложь;
		ТабличныйДокумент.ОтображатьЗаголовки = Ложь;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ТекущийДокумент);
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
КонецФункции

// Формирует оборотную сторону печатной формы при возвращении.
//
// Параметры:
//  МассивОбъектов - массив документов,
//  ОбъектыПечати - массив документов
//
Функция ПечататьОбрСторонуПолная(МассивОбъектов, ОбъектыПечати) Экспорт
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_ПутевойЛист";
	
	ПервыйДокумент = Истина;
	
	Для Каждого ТекущийДокумент Из МассивОбъектов Цикл
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// начало формирования типовой печатной формы
		ИмяМакета = ТекущийДокумент.ВидПЛ.Метаданные().ЗначенияПеречисления[Перечисления.уатВидыПЛ.Индекс(ТекущийДокумент.ВидПЛ)].Имя;
		Если (ИмяМакета = "_ЭСМ1") Или (ИмяМакета = "_ЭСМ3") Тогда
			ИмяФункцииПечати = "уатПечать" + ИмяМакета + "(ТекущийДокумент,""уат""+сред(ИмяМакета,2,4), 3)";
		ИначеЕсли (ИмяМакета = "_6") Тогда
			ИмяФункцииПечати = "уатПечать" + ИмяМакета + "(ТекущийДокумент,ИмяМакета + ""_пп"", 3)";
		Иначе	
			ИмяФункцииПечати = "уатПечать" + ИмяМакета + "(ТекущийДокумент,ИмяМакета, 3)";
		КонецЕсли;
		ИмяМакета = "ПФ_MXL" + ИмяМакета;
		ТабДокумент = Вычислить(ИмяФункцииПечати);
		// конец формирования типовой печатной формы
		
		ТабличныйДокумент.Вывести(ТабДокумент);
		
		ТабличныйДокумент.ПолеСлева = 0;
		ТабличныйДокумент.ПолеСправа = 0;
		ТабличныйДокумент.ПолеСверху = 0;
		ТабличныйДокумент.ПолеСнизу = 0;
		//ТабличныйДокумент.ИмяПараметровПечати = "ПутевойЛист";
		
		Если ИмяМакета = "ПФ_MXL_3" ИЛИ ИмяМакета = "ПФ_MXL_ПЛ1"
			ИЛИ ИмяМакета = "ПФ_MXL_ПГ1" ИЛИ ИмяМакета = "ПФ_MXL_ПА1" Тогда
			
			ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		Иначе
			ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		КонецЕсли;
		
		ТабличныйДокумент.ОтображатьСетку = Ложь;
		ТабличныйДокумент.Защита = Ложь;
		ТабличныйДокумент.ТолькоПросмотр = Ложь;
		ТабличныйДокумент.ОтображатьЗаголовки = Ложь;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ТекущийДокумент);
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
КонецФункции

// Формирует лицевую и оборотную стороны печатной формы при выезде.
//
// Параметры:
//  МассивОбъектов - массив документов,
//  ОбъектыПечати - массив документов
//
Функция ПечатьВесьДокумент(МассивОбъектов, ОбъектыПечати) Экспорт
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_ПутевойЛист";
	
	ПервыйДокумент = Истина;
	флИспользованиеШК = уатЗащищенныеФункцииСервер_проф.ИспользоватьШтрихкодированиеОбъекта("уатПутевойЛист");
		
	Для Каждого ТекущийДокумент Из МассивОбъектов Цикл
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// начало формирования типовой печатной формы
		ИмяМакета = ТекущийДокумент.ВидПЛ.Метаданные().ЗначенияПеречисления[Перечисления.уатВидыПЛ.Индекс(ТекущийДокумент.ВидПЛ)].Имя;
		Если (ИмяМакета = "_ЭСМ1") Или (ИмяМакета = "_ЭСМ3") Тогда
			ИмяФункцииПечати = "уатПечать" + ИмяМакета + "(ТекущийДокумент,""уат""+сред(ИмяМакета,2,4), 0)";
		ИначеЕсли (ИмяМакета = "_6") Тогда
			ИмяФункцииПечати = "уатПечать" + ИмяМакета + "(ТекущийДокумент,ИмяМакета + ""_пп"", 0)";
		Иначе	
			ИмяФункцииПечати = "уатПечать" + ИмяМакета + "(ТекущийДокумент,ИмяМакета, 0)";
		КонецЕсли;
		ИмяМакета = "ПФ_MXL" + ИмяМакета;
		ТабДокумент = Вычислить(ИмяФункцииПечати);
		// конец формирования типовой печатной формы
		
		// печать штрихкодов
		Если флИспользованиеШК Тогда
			уатЗащищенныеФункцииСервер_проф.ОтобразитьШКнаПФ(ТабДокумент, ТекущийДокумент);
		Иначе
			 
		КонецЕсли;
	
		ТабличныйДокумент.Вывести(ТабДокумент);
		
		ТабличныйДокумент.ПолеСлева = 0;
		ТабличныйДокумент.ПолеСправа = 0;
		ТабличныйДокумент.ПолеСверху = 0;
		ТабличныйДокумент.ПолеСнизу = 0;
		//ТабличныйДокумент.ИмяПараметровПечати = "ПутевойЛист";
		
		Если ИмяМакета = "ПФ_MXL_3" ИЛИ ИмяМакета = "ПФ_MXL_ПЛ1"
			ИЛИ ИмяМакета = "ПФ_MXL_ПГ1" ИЛИ ИмяМакета = "ПФ_MXL_ПА1" Тогда
			
			ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		Иначе
			ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		КонецЕсли;
		
		ТабличныйДокумент.ОтображатьСетку = Ложь;
		ТабличныйДокумент.Защита = Ложь;
		ТабличныйДокумент.ТолькоПросмотр = Ложь;
		ТабличныйДокумент.ОтображатьЗаголовки = Ложь;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ТекущийДокумент);
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Пользователь = ПользователиКлиентСервер.АвторизованныйПользователь();
	ИспользоватьПредустановленныеНастройкиДляДвустороннейПечати = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Пользователь, ПланыВидовХарактеристик.уатПраваИНастройки.ИспользоватьПредустановленныеНастройкиДляДвустороннейПечати);
	
	Если ИспользоватьПредустановленныеНастройкиДляДвустороннейПечати Тогда
		Если ИмяМакета = "ПФ_MXL_3" ИЛИ ИмяМакета = "ПФ_MXL_ПЛ1"
			ИЛИ ИмяМакета = "ПФ_MXL_ПГ1" ИЛИ ИмяМакета = "ПФ_MXL_ПА1" Тогда
			ТабличныйДокумент.ДвусторонняяПечать = ТипДвустороннейПечати.ПереворотВлево;
		Иначе
			ТабличныйДокумент.ДвусторонняяПечать = ТипДвустороннейПечати.ПереворотВверх;
		КонецЕсли;
	КонецЕсли;

	Возврат ТабличныйДокумент;
КонецФункции

// Формирует лицевую и оборотную стороны печатной формы при возвращении.
//
// Параметры:
//  МассивОбъектов - массив документов,
//  ОбъектыПечати - массив документов
//
Функция ПечатьВесьДокументПолная(МассивОбъектов, ОбъектыПечати) Экспорт
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_ПутевойЛист";
	
	ПервыйДокумент = Истина;
	флИспользованиеШК = уатЗащищенныеФункцииСервер_проф.ИспользоватьШтрихкодированиеОбъекта("уатПутевойЛист");
	
	Для Каждого ТекущийДокумент Из МассивОбъектов Цикл
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		// начало формирования типовой печатной формы
		ИмяМакета = ТекущийДокумент.ВидПЛ.Метаданные().ЗначенияПеречисления[Перечисления.уатВидыПЛ.Индекс(ТекущийДокумент.ВидПЛ)].Имя;
		Если (ИмяМакета = "_ЭСМ1") Или (ИмяМакета = "_ЭСМ3") Тогда
			ИмяФункцииПечати = "уатПечать" + ИмяМакета + "(ТекущийДокумент,""уат""+сред(ИмяМакета,2,4), 4)";
		ИначеЕсли (ИмяМакета = "_6") Тогда
			ИмяФункцииПечати = "уатПечать" + ИмяМакета + "(ТекущийДокумент,ИмяМакета + ""_пп"", 4)";
		Иначе	
			ИмяФункцииПечати = "уатПечать" + ИмяМакета + "(ТекущийДокумент,ИмяМакета, 4)";
		КонецЕсли;
		ИмяМакета = "ПФ_MXL" + ИмяМакета;
		ТабДокумент = Вычислить(ИмяФункцииПечати);
		// конец формирования типовой печатной формы
		
		// печать штрихкодов
		Если флИспользованиеШК Тогда
			уатЗащищенныеФункцииСервер_проф.ОтобразитьШКнаПФ(ТабДокумент, ТекущийДокумент);
		КонецЕсли;

		ТабличныйДокумент.Вывести(ТабДокумент);
		
		ТабличныйДокумент.ПолеСлева = 0;
		ТабличныйДокумент.ПолеСправа = 0;
		ТабличныйДокумент.ПолеСверху = 0;
		ТабличныйДокумент.ПолеСнизу = 0;
		//ТабличныйДокумент.ИмяПараметровПечати = "ПутевойЛист";
		
		Если ИмяМакета = "ПФ_MXL_3" ИЛИ ИмяМакета = "ПФ_MXL_ПЛ1"
			ИЛИ ИмяМакета = "ПФ_MXL_ПГ1" ИЛИ ИмяМакета = "ПФ_MXL_ПА1" Тогда
			
			ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		Иначе
			ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		КонецЕсли;
		
		ТабличныйДокумент.ОтображатьСетку = Ложь;
		ТабличныйДокумент.Защита = Ложь;
		ТабличныйДокумент.ТолькоПросмотр = Ложь;
		ТабличныйДокумент.ОтображатьЗаголовки = Ложь;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ТекущийДокумент);
	КонецЦикла;
	
	Пользователь = ПользователиКлиентСервер.АвторизованныйПользователь();
	ИспользоватьПредустановленныеНастройкиДляДвустороннейПечати = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Пользователь, ПланыВидовХарактеристик.уатПраваИНастройки.ИспользоватьПредустановленныеНастройкиДляДвустороннейПечати);
	
	Если ИспользоватьПредустановленныеНастройкиДляДвустороннейПечати Тогда
		Если ИмяМакета = "ПФ_MXL_3" ИЛИ ИмяМакета = "ПФ_MXL_ПЛ1"
			ИЛИ ИмяМакета = "ПФ_MXL_ПГ1" ИЛИ ИмяМакета = "ПФ_MXL_ПА1" Тогда
			ТабличныйДокумент.ДвусторонняяПечать = ТипДвустороннейПечати.ПереворотВлево;
		Иначе
			ТабличныйДокумент.ДвусторонняяПечать = ТипДвустороннейПечати.ПереворотВверх;
		КонецЕсли;
	КонецЕсли;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
КонецФункции

#КонецОбласти

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область Проведение

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаСостояниеТС(ДокументСсылка, СтруктураДополнительныеСвойства)
	тблДвижений = Новый ТаблицаЗначений;
	тблДвижений.Колонки.Добавить("Регистратор");
	тблДвижений.Колонки.Добавить("Период");
	тблДвижений.Колонки.Добавить("ДатаОкончания");
	тблДвижений.Колонки.Добавить("ТС");
	тблДвижений.Колонки.Добавить("Состояние");
	тблДвижений.Колонки.Добавить("Контрагент");
	
	ПериодВыезда  = уатОбщегоНазначения.уатДатаБезСекунд(ДокументСсылка.ДатаВыезда);
	ДатаОкончания = ДокументСсылка.ДатаВозвращения-1;
	
	НоваяСтрока               = тблДвижений.Добавить();
	НоваяСтрока.ТС            = ДокументСсылка.ТранспортноеСредство;
	НоваяСтрока.Период        = ПериодВыезда;
	НоваяСтрока.ДатаОкончания = ДатаОкончания;
	НоваяСтрока.Состояние     = Справочники.уатСостояниеТС.СформированПутевойЛист;
	НоваяСтрока.Контрагент    = ДокументСсылка.Контрагент;
	
	Для Каждого ТекПрицеп Из ДокументСсылка.Прицепы Цикл
		НоваяСтрока               = тблДвижений.Добавить();
		НоваяСтрока.ТС            = ТекПрицеп.ТС;
		НоваяСтрока.Период        = ПериодВыезда;
		НоваяСтрока.ДатаОкончания = ДатаОкончания;
		НоваяСтрока.Состояние     = Справочники.уатСостояниеТС.СформированПутевойЛист;
		НоваяСтрока.Контрагент    = ДокументСсылка.Контрагент;
	КонецЦикла;
	
	// Прицепы и оборудование, указанные в Задании
	мСтрокиЗадания = ДокументСсылка.Задание.НайтиСтроки(Новый Структура("Выполнено", Истина));
	Для Каждого ТекСтрЗадание Из мСтрокиЗадания Цикл
		
		Если ЗначениеЗаполнено(ТекСтрЗадание.Прицеп1) Тогда
			ЗаписатьСтрокуСостоянийПрицепов(тблДвижений, ТекСтрЗадание.Прицеп1, ДокументСсылка.Контрагент, ПериодВыезда, ДатаОкончания);
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекСтрЗадание.Прицеп2) И ТекСтрЗадание.Прицеп2 <> ТекСтрЗадание.Прицеп1 Тогда
			ЗаписатьСтрокуСостоянийПрицепов(тблДвижений, ТекСтрЗадание.Прицеп2, ДокументСсылка.Контрагент, ПериодВыезда, ДатаОкончания);
		КонецЕсли;
		
	КонецЦикла;
		
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСостоянийТС", тблДвижений);
КонецПроцедуры // СформироватьТаблицаСостояниеТС()

Процедура ЗаписатьСтрокуСостоянийПрицепов(тблДвижений, Прицеп, Контрагент, ПериодВыезда, ДатаОкончания)
	
	ТекСтрокаПрицеп = тблДвижений.НайтиСтроки(Новый Структура("ТС", Прицеп));
	Если ТекСтрокаПрицеп.Количество() = 0 Тогда
		НоваяСтрока               = тблДвижений.Добавить();
		НоваяСтрока.ТС            = Прицеп;
		НоваяСтрока.Период        = ПериодВыезда;
		НоваяСтрока.ДатаОкончания = ДатаОкончания;
		НоваяСтрока.Состояние     = Справочники.уатСостояниеТС.СформированПутевойЛист;
		НоваяСтрока.Контрагент    = Контрагент;
	КонецЕсли;
	
КонецПроцедуры

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаПланированияРаботыТС(ДокументСсылка, СтруктураДополнительныеСвойства)
	мЗапрос = Новый Запрос;
	мЗапрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатПутевойЛист.Ссылка КАК Регистратор,
	|	уатПутевойЛист.Ссылка КАК ДокументПланирования,
	|	уатПутевойЛист.ДатаВыезда КАК ДатаНачала,
	|	уатПутевойЛист.ДатаВозвращения КАК ДатаОкончания,
	|	ЗНАЧЕНИЕ(СПРАВОЧНИК.уатСостояниеТС.СформированПутевойЛист) КАК Состояние,
	|	уатПутевойЛист.ТранспортноеСредство КАК ТС
	|ИЗ
	|	Документ.уатПутевойЛист КАК уатПутевойЛист
	|ГДЕ
	|	уатПутевойЛист.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	уатПутевойЛистПрицепы.Ссылка,
	|	уатПутевойЛистПрицепы.Ссылка,
	|	уатПутевойЛистПрицепы.Ссылка.ДатаВыезда,
	|	уатПутевойЛистПрицепы.Ссылка.ДатаВозвращения,
	|	ЗНАЧЕНИЕ(СПРАВОЧНИК.уатСостояниеТС.СформированПутевойЛист),
	|	уатПутевойЛистПрицепы.ТС
	|ИЗ
	|	Документ.уатПутевойЛист.Прицепы КАК уатПутевойЛистПрицепы
	|ГДЕ
	|	уатПутевойЛистПрицепы.Ссылка = &Ссылка";
	
	мЗапрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	МассивРезультатов = мЗапрос.ВыполнитьПакет();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПланированияРаботыТС", МассивРезультатов[0].Выгрузить());
КонецПроцедуры // СформироватьТаблицаПланированияРаботыТС()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаСчетчикиТС(ДокументСсылка, СтруктураДополнительныеСвойства)
	тблДвижений = Новый ТаблицаЗначений;
	тблДвижений.Колонки.Добавить("Регистратор");
	тблДвижений.Колонки.Добавить("Период");
	тблДвижений.Колонки.Добавить("ТС");
	тблДвижений.Колонки.Добавить("ТипСчетчика");
	тблДвижений.Колонки.Добавить("Значение");
	
	Движение = тблДвижений.Добавить();
	Движение.Регистратор = ДокументСсылка;
	Движение.Период = ДокументСсылка.ДатаВозвращения-1;
	Движение.ТС = ДокументСсылка.ТранспортноеСредство;
	Если ДокументСсылка.ТранспортноеСредство.Модель.НаличиеСпидометра Тогда
		Движение.ТипСчетчика = Перечисления.уатТипыСчетчиковТС.Спидометр;
	Иначе
		Движение.ТипСчетчика = Перечисления.уатТипыСчетчиковТС.СчетчикМЧ;
	КонецЕсли;	
	Движение.Значение = ДокументСсылка.СпидометрВозвращения;
	
	Для Каждого ТекСтрПрицепы из ДокументСсылка.Прицепы Цикл
		Если ТекСтрПрицепы.СчетчикМЧВозвращения <> ТекСтрПрицепы.СчетчикМЧВыезда Тогда
			Движение = тблДвижений.Добавить();
			Движение.Регистратор = ДокументСсылка;
			Движение.Период = ДокументСсылка.ДатаВозвращения-1;
			Движение.ТС = ТекСтрПрицепы.ТС;
			Если ТекСтрПрицепы.ТС.Модель.НаличиеСпидометра Тогда
				Движение.ТипСчетчика = Перечисления.уатТипыСчетчиковТС.Спидометр;
			Иначе
				Движение.ТипСчетчика = Перечисления.уатТипыСчетчиковТС.СчетчикМЧ;
			КонецЕсли;
			Движение.Значение = ТекСтрПрицепы.СчетчикМЧВозвращения;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСчетчиковТС", тблДвижений);
КонецПроцедуры // СформироватьТаблицаСчетчикиТС()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаВыработкаТС(ДокументСсылка, СтруктураДополнительныеСвойства)
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатПутевойЛистВыработкаТС.Ссылка.ДатаЗакрытия КАК Период,
	|	уатПутевойЛистВыработкаТС.ТС КАК ТС,
	|	уатПутевойЛистВыработкаТС.ПараметрВыработки КАК ПараметрВыработки,
	|	уатПутевойЛистВыработкаТС.Количество КАК Количество,
	|	уатПутевойЛистВыработкаТС.Подразделение КАК Подразделение,
	|	уатПутевойЛистВыработкаТС.Контрагент КАК Контрагент,
	|	уатПутевойЛистВыработкаТС.Ссылка.Организация КАК Организация,
	|	уатПутевойЛистВыработкаТС.ОбъектСтроительства КАК ОбъектСтроительства,
	|	уатПутевойЛистВыработкаТС.Маршрут КАК Маршрут,
	|	уатПутевойЛистВыработкаТС.ВидПеревозки КАК ВидПеревозки,
	|	уатПутевойЛистВыработкаТС.НаправлениеПеревозки КАК НаправлениеПеревозки,
	|	уатМестонахождениеТССрезПоследних.Колонна КАК Колонна
	|ИЗ
	|	Документ.уатПутевойЛист.ВыработкаТС КАК уатПутевойЛистВыработкаТС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатМестонахождениеТС.СрезПоследних(&ДатаВозвращения, ) КАК уатМестонахождениеТССрезПоследних
	|		ПО уатПутевойЛистВыработкаТС.Ссылка.ТранспортноеСредство = уатМестонахождениеТССрезПоследних.ТС
	|ГДЕ
	|	уатПутевойЛистВыработкаТС.Ссылка = &Док";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Док", ДокументСсылка);
	Запрос.УстановитьПараметр("ДатаВозвращения", ДокументСсылка.ДатаВозвращения);
	тблДвижений = Запрос.Выполнить().Выгрузить();
	
	УчетВыработкиПоКонтрагентам = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументСсылка.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоКонтрагентам);
	УчетВыработкиПоПодразделениям = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументСсылка.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоПодразделениям);
	УчетВыработкиПоОбъектамСтроительства = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументСсылка.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоОбъектамСтроительства);
	УчетВыработкиПоМаршрутам = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументСсылка.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоМаршрутам);
	УчетВыработкиПоВидамПеревозок = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументСсылка.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоВидамПеревозок);
	УчетВыработкиПоНаправлениямПеревозок = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументСсылка.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоНаправлениямПеревозок);
	Если НЕ УчетВыработкиПоКонтрагентам Тогда
		тблДвижений.ЗаполнитьЗначения(Неопределено, "Контрагент");
	КонецЕсли;
	Если НЕ УчетВыработкиПоПодразделениям Тогда
		тблДвижений.ЗаполнитьЗначения(Неопределено, "Подразделение");
	КонецЕсли;
	Если НЕ УчетВыработкиПоОбъектамСтроительства Тогда
		тблДвижений.ЗаполнитьЗначения(Неопределено, "ОбъектСтроительства");
	КонецЕсли;
	Если НЕ УчетВыработкиПоМаршрутам Тогда
		тблДвижений.ЗаполнитьЗначения(Неопределено, "Маршрут");
	КонецЕсли;
	Если НЕ УчетВыработкиПоВидамПеревозок Тогда
		тблДвижений.ЗаполнитьЗначения(Неопределено, "ВидПеревозки");
	КонецЕсли;
	Если НЕ УчетВыработкиПоНаправлениямПеревозок Тогда
		тблДвижений.ЗаполнитьЗначения(Неопределено, "НаправлениеПеревозки");
	КонецЕсли;
	Если (НЕ УчетВыработкиПоКонтрагентам) ИЛИ (НЕ УчетВыработкиПоПодразделениям) ИЛИ (НЕ УчетВыработкиПоОбъектамСтроительства)
		ИЛИ (НЕ УчетВыработкиПоМаршрутам) ИЛИ (НЕ УчетВыработкиПоВидамПеревозок) ИЛИ (НЕ УчетВыработкиПоНаправлениямПеревозок) Тогда
		тблДвижений.Свернуть("Период, ТС, ПараметрВыработки, Подразделение, Контрагент, Организация, ОбъектСтроительства, Маршрут, Колонна, ВидПеревозки, НаправлениеПеревозки", "Количество");

	КонецЕсли;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаВыработкиТС", тблДвижений);
КонецПроцедуры // СформироватьТаблицаВыработкаТС()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаВыработкаСотрудников(ДокументСсылка, СтруктураДополнительныеСвойства)
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатПутевойЛистВыработка.Ссылка.ДатаЗакрытия КАК Период,
	|	уатПутевойЛистВыработка.Сотрудник КАК Сотрудник,
	|	уатПутевойЛистВыработка.ПараметрВыработки КАК ПараметрВыработки,
	|	уатПутевойЛистВыработка.Количество КАК Количество,
	|	уатПутевойЛистВыработка.Подразделение КАК Подразделение,
	|	уатПутевойЛистВыработка.Контрагент КАК Контрагент,
	|	уатПутевойЛистВыработка.Ссылка.Организация КАК Организация,
	|	уатМестонахождениеТССрезПоследних.Колонна КАК Колонна,
	|	уатПутевойЛистВыработка.ОбъектСтроительства,
	|	уатПутевойЛистВыработка.Маршрут,
	|	уатПутевойЛистВыработка.ВидПеревозки,
	|	уатПутевойЛистВыработка.НаправлениеПеревозки
	|ИЗ
	|	Документ.уатПутевойЛист.ВыработкаСотрудников КАК уатПутевойЛистВыработка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатМестонахождениеТС.СрезПоследних(&ДатаВозвращения, ) КАК уатМестонахождениеТССрезПоследних
	|		ПО уатПутевойЛистВыработка.Ссылка.ТранспортноеСредство = уатМестонахождениеТССрезПоследних.ТС
	|ГДЕ
	|	уатПутевойЛистВыработка.Ссылка = &Док";
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Док", ДокументСсылка);
	Запрос.УстановитьПараметр("ДатаВозвращения", ДокументСсылка.ДатаВозвращения);
	тблДвижений = Запрос.Выполнить().Выгрузить();
	
	УчетВыработкиПоКонтрагентам = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументСсылка.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоКонтрагентам);
	УчетВыработкиПоПодразделениям = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументСсылка.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоПодразделениям);
	УчетВыработкиПоОбъектамСтроительства = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументСсылка.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоОбъектамСтроительства);
	УчетВыработкиПоМаршрутам = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументСсылка.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоМаршрутам);
	УчетВыработкиПоВидамПеревозок = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументСсылка.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоВидамПеревозок);
	УчетВыработкиПоНаправлениямПеревозок = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументСсылка.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоНаправлениямПеревозок);
	Если НЕ УчетВыработкиПоКонтрагентам Тогда
		тблДвижений.ЗаполнитьЗначения(Неопределено, "Контрагент");
	КонецЕсли;
	Если НЕ УчетВыработкиПоПодразделениям Тогда
		тблДвижений.ЗаполнитьЗначения(Неопределено, "Подразделение");
	КонецЕсли;
	Если НЕ УчетВыработкиПоОбъектамСтроительства Тогда
		тблДвижений.ЗаполнитьЗначения(Неопределено, "ОбъектСтроительства");
	КонецЕсли;
	Если НЕ УчетВыработкиПоМаршрутам Тогда
		тблДвижений.ЗаполнитьЗначения(Неопределено, "Маршрут");
	КонецЕсли;
	Если НЕ УчетВыработкиПоВидамПеревозок Тогда
		тблДвижений.ЗаполнитьЗначения(Неопределено, "ВидПеревозки");
	КонецЕсли;
	Если НЕ УчетВыработкиПоНаправлениямПеревозок Тогда
		тблДвижений.ЗаполнитьЗначения(Неопределено, "НаправлениеПеревозки");
	КонецЕсли;
	Если (НЕ УчетВыработкиПоКонтрагентам) ИЛИ (НЕ УчетВыработкиПоПодразделениям) ИЛИ (НЕ УчетВыработкиПоОбъектамСтроительства)
		ИЛИ (НЕ УчетВыработкиПоМаршрутам) ИЛИ (НЕ УчетВыработкиПоВидамПеревозок) ИЛИ (НЕ УчетВыработкиПоНаправлениямПеревозок) Тогда
		тблДвижений.Свернуть("Период, Сотрудник, ПараметрВыработки, Подразделение, Контрагент, Организация, ОбъектСтроительства, Маршрут, Колонна, ВидПеревозки, НаправлениеПеревозки", "Количество");
	КонецЕсли;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаВыработкиСотрудников", тблДвижений);
КонецПроцедуры // СформироватьТаблицаВыработкаСотрудников()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаПростоев(ДокументСсылка, СтруктураДополнительныеСвойства)
	тблПростои = СтруктураДополнительныеСвойства.ТаблицаПростоевБезОбедов;
	тблПростои.Колонки.Начало.Имя = "Период";
	тблПростои.Колонки.Продолжительность.Имя = "Время";
	тблПростои.Колонки.Добавить("ТС");
	тблПростои.ЗаполнитьЗначения(ДокументСсылка.ТранспортноеСредство, "ТС");
	тблПростои.Колонки.Добавить("Водитель");
	тблПростои.ЗаполнитьЗначения(ДокументСсылка.Водитель1, "Водитель");
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПростои", тблПростои);
КонецПроцедуры // СформироватьТаблицаПростоев()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаГСМ(ДокументСсылка, СтруктураДополнительныеСвойства)
	Перем мТаблицаПоСписаниюГСМ;
	
	// Подготовим таблицу ГСМ для проведения.
	СтрокаОшибки = "";
	
	мЗапрос = Новый Запрос;
	мЗапрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	уатПутевойЛистРасходГСМ.ТС,
	|	уатПутевойЛистРасходГСМ.ГСМ
	|ИЗ
	|	Документ.уатПутевойЛист.РасходГСМ КАК уатПутевойЛистРасходГСМ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.уатНоменклатураГСМ КАК уатНоменклатураГСМ
	|		ПО (уатПутевойЛистРасходГСМ.ГСМ = уатНоменклатураГСМ.Номенклатура
	|				И уатНоменклатураГСМ.ГруппаГСМ = &ГруппаГСМ)
	|ГДЕ
	|	уатПутевойЛистРасходГСМ.Ссылка = &Ссылка";
	мЗапрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	мЗапрос.УстановитьПараметр("ГруппаГСМ", Перечисления.уатГруппыГСМ.Топливо);
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.уатОстаткиГСМнаТС");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = мЗапрос.Выполнить();
	Для каждого КолонкаРезультатЗапроса Из ЭлементБлокировки.ИсточникДанных.Колонки Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаРезультатЗапроса.Имя, КолонкаРезультатЗапроса.Имя);
	КонецЦикла;
	Блокировка.Заблокировать();
	
	уатОбщегоНазначения_проф.уатПодготовитьТаблицуСписанияГСМ(ДокументСсылка, мТаблицаПоСписаниюГСМ, Истина, , СтрокаОшибки);
	
	мТаблицаПоСписаниюГСМ.Колонки.Дата.Имя = "Период";
	мТаблицаПоСписаниюГСМ.Колонки.Добавить("ВидДвижения");
	мТаблицаПоСписаниюГСМ.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход, "ВидДвижения");
		
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаГСМ", мТаблицаПоСписаниюГСМ);
КонецПроцедуры // СформироватьТаблицаГСМ()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаПартииТЖ(ДокументСсылка, СтруктураДополнительныеСвойства)
	мЗапрос = новый Запрос;
	мЗапрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасходТЖ.ТС,
	|	РасходТЖ.ГСМ КАК ТЖ
	|ИЗ
	|	Документ.уатПутевойЛист.РасходГСМ КАК РасходТЖ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.уатНоменклатураГСМ КАК уатНоменклатураГСМ
	|		ПО (РасходТЖ.ГСМ = уатНоменклатураГСМ.Номенклатура
	|				И уатНоменклатураГСМ.ВестиУчетОстатковТЖ)
	|ГДЕ
	|	РасходТЖ.Ссылка = &Ссылка
	|	И РасходТЖ.Активен";
	мЗапрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.уатОстаткиТЖнаТС");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = мЗапрос.Выполнить();
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ТС" , "ТС");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ТЖ", "ТЖ");
	Блокировка.Заблокировать();
	
	тблДвижений = Неопределено;
	ВсеОК =	уатГСМ.ПодготовитьТаблицуСписанияТЖ(ДокументСсылка, тблДвижений, Истина);
	
	тблДвижений.Колонки.Добавить("Регистратор");
	тблДвижений.ЗаполнитьЗначения(ДокументСсылка, "Регистратор");
	тблДвижений.Колонки.Добавить("Период");
	тблДвижений.ЗаполнитьЗначения(ДокументСсылка.ДатаЗакрытия, "Период");
	тблДвижений.Колонки.Добавить("ВидДвижения");
	тблДвижений.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход, "ВидДвижения");
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПартииТЖ", тблДвижений);
КонецПроцедуры // СформироватьТаблицаПартииТЖ()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаРасходГСМ(ДокументСсылка, СтруктураДополнительныеСвойства)
	тблДвижений = Новый ТаблицаЗначений;
	тблДвижений.Колонки.Добавить("Период");
	тблДвижений.Колонки.Добавить("ТС");
	тблДвижений.Колонки.Добавить("Водитель");
	тблДвижений.Колонки.Добавить("ГСМ");
	тблДвижений.Колонки.Добавить("Колонна");
	тблДвижений.Колонки.Добавить("Организация");
	тблДвижений.Колонки.Добавить("РасходПоНорме");
	тблДвижений.Колонки.Добавить("РасходПоФакту");
	
	мТочностьОстатковГСМ = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументСсылка.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.ТочностьОстатковТоплива);
	
	Для Каждого ТекСтрокаРасходГСМ Из ДокументСсылка.РасходГСМ Цикл
		Если уатГСМ.ЭтоТехническаяЖидкость(ТекСтрокаРасходГСМ.ГСМ) Тогда
			Продолжить;
		КонецЕсли;
		
		Если (ТекСтрокаРасходГСМ.РасходПоНорме <> 0 ИЛИ
			ТекСтрокаРасходГСМ.РасходПоФакту <> 0) И ТекСтрокаРасходГСМ.Активен Тогда
			
			ТекКолоннаТС = уатОбщегоНазначения.МестонахождениеТС(ТекСтрокаРасходГСМ.ТС, ДокументСсылка.ДатаВозвращения).Колонна;
			
			мОтбор = Новый Структура("ГСМ, ТС", ТекСтрокаРасходГСМ.ГСМ, ТекСтрокаРасходГСМ.ТС);
			мНайденныеСтроки = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаГСМ.НайтиСтроки(мОтбор);
			Если мНайденныеСтроки.Количество() > 0 Тогда
				Если мНайденныеСтроки[0].Количество = ТекСтрокаРасходГСМ.РасходПоФакту Тогда
					НоваяСтрока 				= тблДвижений.Добавить();
					НоваяСтрока.Период 			= ДокументСсылка.ДатаЗакрытия;
					НоваяСтрока.ТС 				= ТекСтрокаРасходГСМ.ТС;
					НоваяСтрока.Водитель 		= ДокументСсылка.Водитель1;
					НоваяСтрока.ГСМ				= ТекСтрокаРасходГСМ.ГСМ;
					НоваяСтрока.Колонна = ТекКолоннаТС;
					НоваяСтрока.Организация = ДокументСсылка.Организация;
					НоваяСтрока.РасходПоНорме 	= ТекСтрокаРасходГСМ.РасходПоНорме;
					НоваяСтрока.РасходПоФакту 	= ТекСтрокаРасходГСМ.РасходПоФакту;
					
				Иначе
					мОстатокКСписаниюНорм		= ТекСтрокаРасходГСМ.РасходПоНорме;
					мАналоги					= уатОбщегоНазначения.уатПолучитьАналогиГСМ(ТекСтрокаРасходГСМ.ГСМ);
					Для Каждого ТекСтрокаТаблицыГСМ Из СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаГСМ Цикл
						Если ТекСтрокаТаблицыГСМ.ТС = ТекСтрокаРасходГСМ.ТС Тогда
							мНайденнаяСтрока_рабочая = мАналоги.Найти(ТекСтрокаТаблицыГСМ.ГСМ, "Аналог");
							Если мНайденнаяСтрока_рабочая <> Неопределено или ТекСтрокаТаблицыГСМ.ГСМ = ТекСтрокаРасходГСМ.ГСМ Тогда
								НоваяСтрока 				= тблДвижений.Добавить();
								НоваяСтрока.Период 			= ДокументСсылка.ДатаЗакрытия;
								НоваяСтрока.ТС 				= ТекСтрокаРасходГСМ.ТС;
								НоваяСтрока.Водитель 		= ДокументСсылка.Водитель1;
								НоваяСтрока.ГСМ				= ТекСтрокаТаблицыГСМ.ГСМ;
								НоваяСтрока.Колонна = ТекКолоннаТС;
								НоваяСтрока.Организация = ДокументСсылка.Организация;
								Если ТекСтрокаРасходГСМ.РасходПоФакту <> 0 Тогда
									мРН	= ТекСтрокаРасходГСМ.РасходПоНорме * ТекСтрокаТаблицыГСМ.Количество /ТекСтрокаРасходГСМ.РасходПоФакту;
								Иначе
									мРН	= ТекСтрокаРасходГСМ.РасходПоНорме;
								КонецЕсли;	
								НоваяСтрока.РасходПоНорме 	= мРН;
								НоваяСтрока.РасходПоФакту 	= ТекСтрокаТаблицыГСМ.Количество;
								мОстатокКСписаниюНорм		= мОстатокКСписаниюНорм - мРН; 
							КонецЕсли;						
						КонецЕсли;						
					КонецЦикла;	
					
					// последняя копейка
					Если Окр(мОстатокКСписаниюНорм, мТочностьОстатковГСМ) <> 0 Тогда
						НоваяСтрока 				= тблДвижений.Добавить();
						НоваяСтрока.Период 			= ДокументСсылка.ДатаЗакрытия;
						НоваяСтрока.ТС 				= ТекСтрокаРасходГСМ.ТС;
						НоваяСтрока.Водитель 		= ДокументСсылка.Водитель1;
						НоваяСтрока.ГСМ				= ТекСтрокаРасходГСМ.ГСМ;
						НоваяСтрока.Колонна = ТекКолоннаТС;
						НоваяСтрока.Организация = ДокументСсылка.Организация;
						НоваяСтрока.РасходПоНорме 	= мОстатокКСписаниюНорм;
						НоваяСтрока.РасходПоФакту 	= 0;
					КонецЕсли;	
				КонецЕсли;	
				
			Иначе
				мОстатокКСписаниюНорм		= ТекСтрокаРасходГСМ.РасходПоНорме;
				мАналоги					= уатОбщегоНазначения.уатПолучитьАналогиГСМ(ТекСтрокаРасходГСМ.ГСМ);
				Для Каждого ТекСтрокаТаблицыГСМ Из СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаГСМ Цикл
					Если ТекСтрокаТаблицыГСМ.ТС = ТекСтрокаРасходГСМ.ТС Тогда
						//МОтбор = Новый Структура("ГСМ, ТС", ТекСтрокаТаблицыГСМ.ГСМ, ТекСтрокаТаблицыГСМ.ТС);
						// мНайденныеСтроки_рабочая = мТаблицаПоСписаниюГСМ.НайтиСтроки(мОтбор);
						мНайденнаяСтрока_рабочая = мАналоги.Найти(ТекСтрокаТаблицыГСМ.ГСМ, "Аналог");
						Если мНайденнаяСтрока_рабочая <> Неопределено или ТекСтрокаТаблицыГСМ.ГСМ = ТекСтрокаРасходГСМ.ГСМ Тогда
							НоваяСтрока 				= тблДвижений.Добавить();
							НоваяСтрока.Период 			= ДокументСсылка.ДатаЗакрытия;
							НоваяСтрока.ТС 				= ТекСтрокаРасходГСМ.ТС;
							НоваяСтрока.Водитель 		= ДокументСсылка.Водитель1;
							НоваяСтрока.ГСМ				= ТекСтрокаТаблицыГСМ.ГСМ;
							НоваяСтрока.Колонна = ТекКолоннаТС;
							НоваяСтрока.Организация = ДокументСсылка.Организация;
							Если ТекСтрокаРасходГСМ.РасходПоФакту <> 0 Тогда
								мРН	= ТекСтрокаРасходГСМ.РасходПоНорме * ТекСтрокаТаблицыГСМ.Количество / ТекСтрокаРасходГСМ.РасходПоФакту;
							Иначе
								мРН	= ТекСтрокаРасходГСМ.РасходПоНорме;
							КонецЕсли;	
							НоваяСтрока.РасходПоНорме 	= мРН;
							НоваяСтрока.РасходПоФакту 	= ТекСтрокаТаблицыГСМ.Количество;
							мОстатокКСписаниюНорм		= мОстатокКСписаниюНорм - мРН; 
						КонецЕсли;						
					КонецЕсли;						
				КонецЦикла;	
				
				// последняя копейка
				Если Окр(мОстатокКСписаниюНорм, мТочностьОстатковГСМ) <> 0 Тогда
					НоваяСтрока 				= тблДвижений.Добавить();
					НоваяСтрока.Период 			= ДокументСсылка.ДатаЗакрытия;
					НоваяСтрока.ТС 				= ТекСтрокаРасходГСМ.ТС;
					НоваяСтрока.Водитель 		= ДокументСсылка.Водитель1;
					НоваяСтрока.ГСМ				= ТекСтрокаРасходГСМ.ГСМ;
					НоваяСтрока.Колонна = ТекКолоннаТС;
					НоваяСтрока.Организация = ДокументСсылка.Организация;
					НоваяСтрока.РасходПоНорме 	= мОстатокКСписаниюНорм;
					НоваяСтрока.РасходПоФакту 	= 0;
				КонецЕсли;	
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;
	
	тблДвижений.Свернуть("Период, ТС, Водитель, ГСМ, Колонна, Организация", "РасходПоНорме, РасходПоФакту");
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРасходГСМ", тблДвижений);
КонецПроцедуры // СформироватьТаблицаРасходГСМ()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаОборотыТЖ(ДокументСсылка, СтруктураДополнительныеСвойства)
	тблДвижений = Новый ТаблицаЗначений;
	тблДвижений.Колонки.Добавить("Период");
	тблДвижений.Колонки.Добавить("ТС");
	тблДвижений.Колонки.Добавить("Водитель");
	тблДвижений.Колонки.Добавить("ГСМ");
	тблДвижений.Колонки.Добавить("Колонна");
	тблДвижений.Колонки.Добавить("Организация");
	тблДвижений.Колонки.Добавить("ВидОперации");
	тблДвижений.Колонки.Добавить("КоличествоРасход");
	тблДвижений.Колонки.Добавить("КоличествоРасходНорма");
	
	Для Каждого ТекСтрокаРасходГСМ Из ДокументСсылка.РасходГСМ Цикл
		Если НЕ ТекСтрокаРасходГСМ.Активен
			ИЛИ ТекСтрокаРасходГСМ.РасходПоФакту = 0
			ИЛИ НЕ уатГСМ.ЭтоТехническаяЖидкость(ТекСтрокаРасходГСМ.ГСМ) Тогда
			
			Продолжить;
		КонецЕсли;
		
		ТекКолоннаТС = уатОбщегоНазначения.МестонахождениеТС(ТекСтрокаРасходГСМ.ТС, ДокументСсылка.ДатаВозвращения).Колонна;
		
		Если уатГСМ.УчитыватьОстаткиТЖ(ТекСтрокаРасходГСМ.ГСМ) Тогда
			мОтбор = Новый Структура("ТЖ, ТС", ТекСтрокаРасходГСМ.ГСМ, ТекСтрокаРасходГСМ.ТС);
			мНайденныеСтроки = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПартииТЖ.НайтиСтроки(мОтбор);
			
			Если мНайденныеСтроки.Количество() > 0 Тогда
				Если мНайденныеСтроки[0].Количество = ТекСтрокаРасходГСМ.РасходПоФакту Тогда
					НоваяСтрока                       = тблДвижений.Добавить();
					НоваяСтрока.Период                = ДокументСсылка.ДатаЗакрытия;
					НоваяСтрока.ВидОперации           = Перечисления.уатВидыОперацийСТехническимиЖидкостями.РасходВРаботе;
					НоваяСтрока.ТС                    = ТекСтрокаРасходГСМ.ТС;
					НоваяСтрока.Водитель              = ДокументСсылка.Водитель1;
					НоваяСтрока.ГСМ                   = ТекСтрокаРасходГСМ.ГСМ;
					НоваяСтрока.Колонна               = ТекКолоннаТС;
					НоваяСтрока.Организация           = ДокументСсылка.Организация;
					НоваяСтрока.КоличествоРасход      = ТекСтрокаРасходГСМ.РасходПоФакту;
					НоваяСтрока.КоличествоРасходНорма = ТекСтрокаРасходГСМ.РасходПоНорме;
				Иначе
					мАналоги					= уатОбщегоНазначения.уатПолучитьАналогиГСМ(ТекСтрокаРасходГСМ.ГСМ);
					Для Каждого ТекСтрокаТаблицыГСМ Из СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПартииТЖ Цикл
						Если ТекСтрокаТаблицыГСМ.ТС = ТекСтрокаРасходГСМ.ТС Тогда
							мНайденнаяСтрока_рабочая = мАналоги.Найти(ТекСтрокаТаблицыГСМ.ТЖ, "Аналог");
							Если мНайденнаяСтрока_рабочая <> Неопределено или ТекСтрокаТаблицыГСМ.ТЖ = ТекСтрокаРасходГСМ.ГСМ Тогда
								НоваяСтрока                       = тблДвижений.Добавить();
								НоваяСтрока.Период                = ДокументСсылка.ДатаЗакрытия;
								НоваяСтрока.ВидОперации           = Перечисления.уатВидыОперацийСТехническимиЖидкостями.РасходВРаботе; 
								НоваяСтрока.ТС                    = ТекСтрокаРасходГСМ.ТС;
								НоваяСтрока.Водитель              = ДокументСсылка.Водитель1;
								НоваяСтрока.ГСМ                   = ТекСтрокаТаблицыГСМ.ТЖ;
								НоваяСтрока.Колонна               = ТекКолоннаТС;
								НоваяСтрока.Организация           = ДокументСсылка.Организация;
								НоваяСтрока.КоличествоРасход      = ТекСтрокаТаблицыГСМ.Количество;
								НоваяСтрока.КоличествоРасходНорма = ТекСтрокаТаблицыГСМ.Количество * ТекСтрокаРасходГСМ.РасходПоНорме / ТекСтрокаРасходГСМ.РасходПоФакту;
							КонецЕсли;						
						КонецЕсли;						
					КонецЦикла;		
				КонецЕсли;	
			Иначе
				мАналоги					= уатОбщегоНазначения.уатПолучитьАналогиГСМ(ТекСтрокаРасходГСМ.ГСМ);
				Для Каждого ТекСтрокаТаблицыГСМ Из СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПартииТЖ Цикл
					Если ТекСтрокаТаблицыГСМ.ТС = ТекСтрокаРасходГСМ.ТС Тогда
						мНайденнаяСтрока_рабочая = мАналоги.Найти(ТекСтрокаТаблицыГСМ.ТЖ, "Аналог");
						Если мНайденнаяСтрока_рабочая <> Неопределено или ТекСтрокаТаблицыГСМ.ТЖ = ТекСтрокаРасходГСМ.ГСМ Тогда
							НоваяСтрока                       = тблДвижений.Добавить();
							НоваяСтрока.Период                = ДокументСсылка.ДатаЗакрытия;
							НоваяСтрока.ВидОперации           = Перечисления.уатВидыОперацийСТехническимиЖидкостями.РасходВРаботе;
							НоваяСтрока.ТС                    = ТекСтрокаРасходГСМ.ТС;
							НоваяСтрока.Водитель              = ДокументСсылка.Водитель1;
							НоваяСтрока.ГСМ                   = ТекСтрокаТаблицыГСМ.ТЖ;
							НоваяСтрока.Колонна               = ТекКолоннаТС;
							НоваяСтрока.Организация           = ДокументСсылка.Организация;
							НоваяСтрока.КоличествоРасход      = ТекСтрокаТаблицыГСМ.Количество;
							НоваяСтрока.КоличествоРасходНорма = ТекСтрокаТаблицыГСМ.Количество * ТекСтрокаРасходГСМ.РасходПоНорме / ТекСтрокаРасходГСМ.РасходПоФакту;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;	
			КонецЕсли;
		Иначе
			НоваяСтрока                       = тблДвижений.Добавить();
			НоваяСтрока.Период                = ДокументСсылка.ДатаЗакрытия;
			НоваяСтрока.ВидОперации           = Перечисления.уатВидыОперацийСТехническимиЖидкостями.РасходВРаботе;
			НоваяСтрока.ТС                    = ТекСтрокаРасходГСМ.ТС;
			НоваяСтрока.Водитель              = ДокументСсылка.Водитель1;
			НоваяСтрока.ГСМ                   = ТекСтрокаРасходГСМ.ГСМ;
			НоваяСтрока.Колонна               = ТекКолоннаТС;
			НоваяСтрока.Организация           = ДокументСсылка.Организация;
			НоваяСтрока.КоличествоРасход      = ТекСтрокаРасходГСМ.РасходПоФакту;
			НоваяСтрока.КоличествоРасходНорма = ТекСтрокаРасходГСМ.РасходПоНорме;
		КонецЕсли;
	КонецЦикла;
		
	тблДвижений.Свернуть("Период, ТС, Водитель, ГСМ, Колонна, Организация, ВидОперации", "КоличествоРасход, КоличествоРасходНорма");
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаОборотыТЖ", тблДвижений);
КонецПроцедуры // СформироватьТаблицаОборотыТЖ()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаИзносПробегШин(ДокументСсылка, СтруктураДополнительныеСвойства)
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	Выработка.Ссылка.ДатаЗакрытия КАК Период,
	|	Выработка.Ссылка.Организация КАК Организация,
	|	Выработка.ПараметрВыработки КАК ПараметрВыработки,
	|	Выработка.ТС КАК ТС,
	|	СУММА(ВЫБОР
	|			КОГДА уатМоделиШин.ИзмерениеИзносаВЧасах
	|				ТОГДА Выработка.Количество / 3600
	|			ИНАЧЕ Выработка.Количество
	|		КОНЕЦ) КАК Пробег,
	|	УстановленныеШины.СерияНоменклатуры КАК СерияНоменклатуры,
	|	СУММА(ВЫБОР
	|			КОГДА уатМоделиШин.ИзмерениеИзносаВЧасах
	|				ТОГДА уатМоделиШин.НормаЗатрат * УстановленныеШины.СерияНоменклатуры.ПервоначальнаяСтоимость / 100 * Выработка.Количество / 3600
	|			ИНАЧЕ уатМоделиШин.НормаЗатрат * УстановленныеШины.СерияНоменклатуры.ПервоначальнаяСтоимость / 100 * Выработка.Количество / 1000
	|		КОНЕЦ) КАК Износ
	|ИЗ
	|	Документ.уатПутевойЛист.ВыработкаТС КАК Выработка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			уатАгрегатыТССрезПоследних.Период КАК Период,
	|			уатАгрегатыТССрезПоследних.Регистратор КАК Регистратор,
	|			уатАгрегатыТССрезПоследних.СерияНоменклатуры КАК СерияНоменклатуры,
	|			уатАгрегатыТССрезПоследних.ТС КАК ТС,
	|			уатАгрегатыТССрезПоследних.МестоУстановки КАК МестоУстановки,
	|			уатАгрегатыТССрезПоследних.СостояниеАгрегата КАК СостояниеАгрегата
	|		ИЗ
	|			РегистрСведений.уатАгрегатыТС.СрезПоследних(&Дата, ) КАК уатАгрегатыТССрезПоследних
	|		ГДЕ
	|			уатАгрегатыТССрезПоследних.СостояниеАгрегата В(&СостояниеАгрегата)
	|			И уатАгрегатыТССрезПоследних.ТС В(&ВСоставе)
	|			И уатАгрегатыТССрезПоследних.СерияНоменклатуры.ТипАгрегата = &ТипАгрегата) КАК УстановленныеШины
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатМоделиАгрегатов КАК уатМоделиШин
	|			ПО УстановленныеШины.СерияНоменклатуры.Модель = уатМоделиШин.Ссылка
	|		ПО Выработка.ТС = УстановленныеШины.ТС
	|ГДЕ
	|	(уатМоделиШин.ИзмерениеИзносаВЧасах
	|				И Выработка.ПараметрВыработки = &ПараметрВыработкиВремяВРаботе
	|			ИЛИ НЕ уатМоделиШин.ИзмерениеИзносаВЧасах
	|				И Выработка.ПараметрВыработки = &ПараметрВыработкиПробегОбщий)
	|	И Выработка.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	Выработка.Ссылка.ДатаЗакрытия,
	|	Выработка.Ссылка.Организация,
	|	Выработка.ПараметрВыработки,
	|	Выработка.ТС,
	|	УстановленныеШины.СерияНоменклатуры";
	Запрос.УстановитьПараметр("Дата", Новый Граница(ДокументСсылка.ДатаЗакрытия, ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("ВСоставе", ДокументСсылка.ВыработкаТС.ВыгрузитьКолонку("ТС"));
	СписокСостоянийАгрегата = Новый СписокЗначений();
	СписокСостоянийАгрегата.Добавить(Перечисления.уатСостоянияАгрегатов.УстановленоВРаботе);
	Если уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументСсылка.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.НачислятьИзносНаЗапаску) Тогда
		СписокСостоянийАгрегата.Добавить(Перечисления.уатСостоянияАгрегатов.УстановленоВЗапас);
	КонецЕсли;
	Запрос.УстановитьПараметр("СостояниеАгрегата", СписокСостоянийАгрегата);
	Запрос.УстановитьПараметр("СостояниеСнято", Перечисления.уатСостоянияАгрегатов.Снято);
	Запрос.УстановитьПараметр("ТипАгрегата", Справочники.уатТипыАгрегатов.Шина);
	Запрос.УстановитьПараметр("ПараметрВыработкиПробегОбщий", Справочники.уатПараметрыВыработки.ПробегОбщий);
	Запрос.УстановитьПараметр("ПараметрВыработкиВремяВРаботе", Справочники.уатПараметрыВыработки.ВремяВРаботе);
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	мТаблицаУстановленныхШин = Запрос.Выполнить().Выгрузить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаИзносаПробегаШин", мТаблицаУстановленныхШин);
КонецПроцедуры // СформироватьТаблицаИзносПробегШин()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаОсновныеНачисления(ДокументСсылка, СтруктураДополнительныеСвойства)
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	уатПутевойЛистЗарплата.Ссылка КАК Ссылка,
	|	уатПутевойЛистЗарплата.Ссылка.ДатаЗакрытия КАК ПериодРегистрации,
	|	уатПутевойЛистЗарплата.Ссылка.ДатаЗакрытия КАК БазовыйПериодНачало,
	|	уатПутевойЛистЗарплата.Ссылка.ДатаЗакрытия КАК БазовыйПериодКонец,
	|	уатПутевойЛистЗарплата.Ссылка.Организация КАК Организация,
	|	уатПутевойЛистЗарплата.Ссылка.Подразделение КАК Подразделение,
	|	уатПутевойЛистЗарплата.Сотрудник КАК Сотрудник,
	|	уатПутевойЛистЗарплата.ВидНачисления КАК ВидРасчета,
	|	СУММА(уатПутевойЛистЗарплата.Сумма) КАК Результат
	|ИЗ
	|	Документ.уатПутевойЛист.Зарплата КАК уатПутевойЛистЗарплата
	|ГДЕ
	|	уатПутевойЛистЗарплата.Ссылка = &Док
	|	И уатПутевойЛистЗарплата.Сотрудник <> ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	уатПутевойЛистЗарплата.Ссылка,
	|	уатПутевойЛистЗарплата.Сотрудник,
	|	уатПутевойЛистЗарплата.ВидНачисления,
	|	уатПутевойЛистЗарплата.Ссылка.ДатаЗакрытия,
	|	уатПутевойЛистЗарплата.Ссылка.ДатаЗакрытия,
	|	уатПутевойЛистЗарплата.Ссылка.ДатаЗакрытия,
	|	уатПутевойЛистЗарплата.Ссылка.Организация,
	|	уатПутевойЛистЗарплата.Ссылка.Подразделение";
	Запрос.УстановитьПараметр("Док", ДокументСсылка);
	мТаблица = Запрос.Выполнить().Выгрузить();
	
	флНачислятьПоПодразделениюСотрудника = НЕ уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументСсылка.Организация,
		ПланыВидовХарактеристик.уатПраваИНастройки.НачислятьЗарплатуПоПодразделениюДокумента);
	Если флНачислятьПоПодразделениюСотрудника Тогда
		Для Каждого ТекСтрока Из мТаблица Цикл
			РеквизитыВодителя = уатОбщегоНазначения.уатПрочитатьРеквизитыВодителя(
				ТекСтрока.Сотрудник, ТекСтрока.ПериодРегистрации, ДокументСсылка.Организация);
			ТекСтрока.Подразделение = РеквизитыВодителя.ПодразделениеОрганизации;
		КонецЦикла;
	КонецЕсли;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаОсновныхНачислений", мТаблица);
КонецПроцедуры // СформироватьТаблицаОсновныеНачисления()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаРабочееВремяРаботниковОрганизаций(ДокументСсылка, СтруктураДополнительныеСвойства)
	Если Не уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументСсылка.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.УчетРабочегоВремени) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаДвижений = Новый ТаблицаЗначений;
	ТаблицаДвижений.Колонки.Добавить("Период");
	ТаблицаДвижений.Колонки.Добавить("Сотрудник");
	ТаблицаДвижений.Колонки.Добавить("Организация");
	ТаблицаДвижений.Колонки.Добавить("ВидИспользованияРабочегоВремени");
	ТаблицаДвижений.Колонки.Добавить("ДатаРаботы");
	ТаблицаДвижений.Колонки.Добавить("Дней");
	ТаблицаДвижений.Колонки.Добавить("Время");
	
	Для Каждого ТекСтрокаФОВ Из ДокументСсылка.ФактическиОтработанноеВремя Цикл
		// добавляем Явку
		Если ТекСтрокаФОВ.ВремяДневное + ТекСтрокаФОВ.ВремяНочное > 0 Тогда
			Движение = ТаблицаДвижений.Добавить();
			Движение.Период = ДокументСсылка.ДатаЗакрытия;
			Движение.ДатаРаботы = ТекСтрокаФОВ.Дата;
			Движение.Организация = ДокументСсылка.Организация;
			Движение.Сотрудник = ТекСтрокаФОВ.Сотрудник;
			Движение.ВидИспользованияРабочегоВремени = Справочники.уатВидыИспользованияРабочегоВремени.Явка;
			Движение.Дней = 1;
			Движение.Время = ТекСтрокаФОВ.ВремяДневное + ТекСтрокаФОВ.ВремяНочное;
			
			// При необходимости согласно графику работы сотрудника заменяем явку на РВ (работа в выходные и праздники)
			флПраздник = уатПутевыеЛисты.ПраздникПоГрафику(ТекСтрокаФОВ.Сотрудник, ДокументСсылка.Организация, ТекСтрокаФОВ.Дата);
			Если флПраздник Тогда
				Движение.ВидИспользованияРабочегоВремени = Справочники.уатВидыИспользованияРабочегоВремени.Праздники;
			Иначе
				флВыходной = уатПутевыеЛисты.ВыходнойПоГрафику(ТекСтрокаФОВ.Сотрудник, ДокументСсылка.Организация, ТекСтрокаФОВ.Дата);
				Если флВыходной Тогда
					Движение.ВидИспользованияРабочегоВремени = Справочники.уатВидыИспользованияРабочегоВремени.Праздники;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// добавляем Ночные
		Если ТекСтрокаФОВ.ВремяНочное > 0 Тогда
			Движение = ТаблицаДвижений.Добавить();
			Движение.Период = ДокументСсылка.ДатаЗакрытия;
			Движение.ДатаРаботы = ТекСтрокаФОВ.Дата;
			Движение.Организация = ДокументСсылка.Организация;
			Движение.Сотрудник = ТекСтрокаФОВ.Сотрудник;
			Движение.ВидИспользованияРабочегоВремени = Справочники.уатВидыИспользованияРабочегоВремени.РаботаНочныеЧасы;
			Движение.Дней = 1;
			Движение.Время = ТекСтрокаФОВ.ВремяНочное;
		КонецЕсли;
	КонецЦикла;
	
	// добавляем Простои
	мсвВодители = Новый Массив;
	Если ЗначениеЗаполнено(ДокументСсылка.Водитель1) Тогда
		мсвВодители.Добавить(ДокументСсылка.Водитель1);
	КонецЕсли;
	Если ЗначениеЗаполнено(ДокументСсылка.Водитель2) Тогда
		мсвВодители.Добавить(ДокументСсылка.Водитель2);
	КонецЕсли;
	Если ЗначениеЗаполнено(ДокументСсылка.Сотрудник1) Тогда
		мсвВодители.Добавить(ДокументСсылка.Сотрудник1);
	КонецЕсли;
	Если ЗначениеЗаполнено(ДокументСсылка.Сотрудник2) Тогда
		мсвВодители.Добавить(ДокументСсылка.Сотрудник2);
	КонецЕсли;
	тблТаблицаПростоевБезОбедов = СтруктураДополнительныеСвойства.ТаблицаПростоевБезОбедов.Скопировать();
	Для Каждого ТекПростой Из тблТаблицаПростоевБезОбедов Цикл
		ТекПростой.Период = НачалоДня(ТекПростой.Период);
	КонецЦикла;
	тблТаблицаПростоевБезОбедов.Свернуть("Период, ВидПростоя", "Время");
	Для Каждого ТекВодитель Из мсвВодители Цикл
		Для Каждого ТекПростой Из тблТаблицаПростоевБезОбедов Цикл
			Если ЗначениеЗаполнено(ТекПростой.Время) Тогда
				Движение             = ТаблицаДвижений.Добавить();
				Движение.Период      = ДокументСсылка.ДатаЗакрытия;
				Движение.ДатаРаботы  = ТекПростой.Период;
				Движение.Организация = ДокументСсылка.Организация;
				Движение.Сотрудник   = ТекВодитель;
				Если ЗначениеЗаполнено(ТекПростой.ВидПростоя.ВидРабочегоВремениПростоя) Тогда
					Движение.ВидИспользованияРабочегоВремени = ТекПростой.ВидПростоя.ВидРабочегоВремениПростоя;
				Иначе
					Движение.ВидИспользованияРабочегоВремени = Справочники.уатВидыИспользованияРабочегоВремени.ПростойПоВинеРаботника;
				КонецЕсли;
				Движение.Дней = 1;
				Движение.Время = ТекПростой.Время;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРабочегоВремени", ТаблицаДвижений);
КонецПроцедуры // СформироватьТаблицаРабочееВремяРаботниковОрганизаций()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицуПараметровВыработкиПользовательскихАгрегатов(ДокументСсылка, СтруктураДополнительныеСвойства)
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатАгрегатыТССрезПоследних.СерияНоменклатуры КАК СерияНоменклатуры,
	|	уатАгрегатыТССрезПоследних.ТС КАК ТС,
	|	уатАгрегатыТССрезПоследних.СерияНоменклатуры.ПараметрВыработки КАК ПараметрВыработки
	|ПОМЕСТИТЬ Временная
	|ИЗ
	|	РегистрСведений.уатАгрегатыТС.СрезПоследних(&Дата, ТС В (&ТС)) КАК уатАгрегатыТССрезПоследних
	|ГДЕ
	|	уатАгрегатыТССрезПоследних.СостояниеАгрегата = ЗНАЧЕНИЕ(Перечисление.уатСостоянияАгрегатов.УстановленоВРаботе)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	уатПутевойЛистВыработкаТС.Ссылка.ДатаЗакрытия КАК Период,
	|	уатПутевойЛистВыработкаТС.Ссылка.Организация КАК Организация,
	|	уатПутевойЛистВыработкаТС.ТС КАК ТС,
	|	Временная.СерияНоменклатуры КАК СерийныйНомер,
	|	уатПутевойЛистВыработкаТС.ПараметрВыработки КАК ПараметрВыработки,
	|	СУММА(уатПутевойЛистВыработкаТС.Количество) КАК Количество
	|ИЗ
	|	Временная КАК Временная
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатПутевойЛист.ВыработкаТС КАК уатПутевойЛистВыработкаТС
	|		ПО (уатПутевойЛистВыработкаТС.ПараметрВыработки = Временная.ПараметрВыработки)
	|			И (уатПутевойЛистВыработкаТС.ТС = Временная.ТС)
	|ГДЕ
	|	уатПутевойЛистВыработкаТС.Ссылка = &Ссылка
	|	И уатПутевойЛистВыработкаТС.ПараметрВыработки В
	|			(ВЫБРАТЬ
	|				Временная.ПараметрВыработки
	|			ИЗ
	|				Временная)
	|
	|СГРУППИРОВАТЬ ПО
	|	уатПутевойЛистВыработкаТС.Ссылка.ДатаЗакрытия,
	|	уатПутевойЛистВыработкаТС.Ссылка.Организация,
	|	уатПутевойЛистВыработкаТС.ТС,
	|	Временная.СерияНоменклатуры,
	|	уатПутевойЛистВыработкаТС.ПараметрВыработки";
	Запрос.УстановитьПараметр("Дата", Новый Граница(ДокументСсылка.ДатаЗакрытия, ВидГраницы.Исключая));
	Запрос.УстановитьПараметр("ТС", ДокументСсылка.ВыработкаТС.ВыгрузитьКолонку("ТС"));
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	мТаблицаВыработкиАгрегатов = Запрос.Выполнить().Выгрузить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПараметровВыработкиАгрегатов", мТаблицаВыработкиАгрегатов);
КонецПроцедуры 

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаРасходы(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	Если ПолучитьФункциональнуюОпцию("уатИспользоватьУчетДоходовИРасходов") = ЛОЖЬ Тогда
		Возврат;
	КонецЕсли;
	
	СтатьяРасходовГСМ = Неопределено;
	СтатьяРасходовШины = Неопределено;
	СтатьяРасходовЗП = Неопределено;
	Для Каждого ТекСтрока Из ДокументСсылка.ПланЗатрат.Расходы Цикл
		Если СтатьяРасходовГСМ = Неопределено И ТекСтрока.СтатьяРасходов.ВидЗатрат = Перечисления.уатВидыЗатрат.ГСМ Тогда
			СтатьяРасходовГСМ = ТекСтрока.СтатьяРасходов;
		ИначеЕсли СтатьяРасходовШины = Неопределено И ТекСтрока.СтатьяРасходов.ВидЗатрат = Перечисления.уатВидыЗатрат.Шины Тогда
			СтатьяРасходовШины = ТекСтрока.СтатьяРасходов;
		ИначеЕсли СтатьяРасходовЗП = Неопределено И ТекСтрока.СтатьяРасходов.ВидЗатрат = Перечисления.уатВидыЗатрат.ОплатаТруда Тогда
			СтатьяРасходовЗП = ТекСтрока.СтатьяРасходов;
		КонецЕсли;
	КонецЦикла;
	
	тблВрем = Новый ТаблицаЗначений;
	тблВрем.Колонки.Добавить("СтатьяРасходов", Новый ОписаниеТипов("СправочникСсылка.уатСтатьиРасходов"));
	тблВрем.Колонки.Добавить("СчетРасходов", Новый ОписаниеТипов("ПланСчетовСсылка.уатРегламентированный"));
	тблВрем.Колонки.Добавить("ТС", Новый ОписаниеТипов("СправочникСсылка.уатТС"));
	тблВрем.Колонки.Добавить("СуммаРегл", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2)));
	тблВрем.Колонки.Добавить("СуммаУпр", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2)));
	тблВрем.Колонки.Добавить("СуммаНДС", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2)));
	тблВрем.Колонки.Добавить("СуммаНДСУпр", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2)));
	
	Если ЗначениеЗаполнено(СтатьяРасходовГСМ) Тогда
		Для Каждого ТекСтрока Из СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаГСМ Цикл
			ТекСуммаНДСУпр = ?(ТекСтрока.Стоимость = 0, 0, ТекСтрока.СуммаНДС * ТекСтрока.СтоимостьУпр / ТекСтрока.Стоимость);
			
			НоваяСтрокаВрем                = тблВрем.Добавить();
			НоваяСтрокаВрем.СтатьяРасходов = СтатьяРасходовГСМ;
			НоваяСтрокаВрем.СчетРасходов   = СтатьяРасходовГСМ.Счет;
			НоваяСтрокаВрем.ТС             = ТекСтрока.ТС;
			НоваяСтрокаВрем.СуммаРегл      = ТекСтрока.Стоимость + ТекСтрока.СуммаНДС;
			НоваяСтрокаВрем.СуммаУпр       = ТекСтрока.СтоимостьУпр + ТекСуммаНДСУпр;
			НоваяСтрокаВрем.СуммаНДС       = ТекСтрока.СуммаНДС;
			НоваяСтрокаВрем.СуммаНДСУпр    = ТекСуммаНДСУпр;
		КонецЦикла;
		Для Каждого ТекСтрока Из СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПартииТЖ Цикл
			ТекСуммаНДСУпр = ?(ТекСтрока.Стоимость = 0, 0, ТекСтрока.СуммаНДС * ТекСтрока.СтоимостьУпр / ТекСтрока.Стоимость);
			
			НоваяСтрокаВрем                = тблВрем.Добавить();
			НоваяСтрокаВрем.СтатьяРасходов = СтатьяРасходовГСМ;
			НоваяСтрокаВрем.СчетРасходов   = СтатьяРасходовГСМ.Счет;
			НоваяСтрокаВрем.ТС             = ТекСтрока.ТС;
			НоваяСтрокаВрем.СуммаРегл      = ТекСтрока.Стоимость + ТекСтрока.СуммаНДС;
			НоваяСтрокаВрем.СуммаУпр       = ТекСтрока.СтоимостьУпр + ТекСуммаНДСУпр;
			НоваяСтрокаВрем.СуммаНДС       = ТекСтрока.СуммаНДС;
			НоваяСтрокаВрем.СуммаНДСУпр    = ТекСуммаНДСУпр;
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтатьяРасходовШины) Тогда
		Для Каждого ТекСтрока Из СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаИзносаПробегаШин Цикл
			НоваяСтрокаВрем = тблВрем.Добавить();
			НоваяСтрокаВрем.СтатьяРасходов = СтатьяРасходовШины;
			НоваяСтрокаВрем.СчетРасходов = СтатьяРасходовШины.Счет;
			НоваяСтрокаВрем.ТС = ТекСтрока.ТС;
			НоваяСтрокаВрем.СуммаРегл = ТекСтрока.Износ;
			НоваяСтрокаВрем.СуммаУпр = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(НоваяСтрокаВрем.СуммаРегл,
				СтруктураДополнительныеСвойства.ВалютаРеглУчета, СтруктураДополнительныеСвойства.ВалютаУпрУчета, ДокументСсылка.ДатаЗакрытия, ДокументСсылка.ДатаЗакрытия);
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтатьяРасходовЗП) Тогда
		Для Каждого ТекСтрока Из СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаОсновныхНачислений Цикл
			НоваяСтрокаВрем = тблВрем.Добавить();
			НоваяСтрокаВрем.СтатьяРасходов = СтатьяРасходовЗП;
			НоваяСтрокаВрем.СчетРасходов = СтатьяРасходовЗП.Счет;
			НоваяСтрокаВрем.ТС = ДокументСсылка.ТранспортноеСредство;
			НоваяСтрокаВрем.СуммаУпр = ТекСтрока.Результат;
			НоваяСтрокаВрем.СуммаРегл = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(НоваяСтрокаВрем.СуммаУпр,
				СтруктураДополнительныеСвойства.ВалютаУпрУчета, СтруктураДополнительныеСвойства.ВалютаРеглУчета, ДокументСсылка.ДатаЗакрытия, ДокументСсылка.ДатаЗакрытия);
		КонецЦикла;
	КонецЕсли;
	
	тблВрем.Свернуть("СтатьяРасходов, СчетРасходов, ТС", "СуммаРегл, СуммаУпр, СуммаНДС, СуммаНДСУпр");
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	тблВрем.СтатьяРасходов КАК СтатьяРасходов,
	|	тблВрем.СчетРасходов КАК СчетРасходов,
	|	тблВрем.СуммаУпр КАК СуммаУпр,
	|	тблВрем.СуммаРегл КАК СуммаРегл,
	|	тблВрем.СуммаНДС КАК СуммаНДС,
	|	тблВрем.СуммаНДСУпр КАК СуммаНДСУпр,
	|	тблВрем.ТС КАК ТС
	|ПОМЕСТИТЬ тблВрем
	|ИЗ
	|	&тблВрем КАК тблВрем
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	тблВрем.СтатьяРасходов КАК СтатьяРасходов,
	|	тблВрем.СчетРасходов КАК СчетРасходов,
	|	0 КАК Сумма,
	|	тблВрем.СуммаУпр КАК СуммаУпр,
	|	тблВрем.СуммаРегл КАК СуммаРегл,
	|	тблВрем.СуммаНДС КАК СуммаНДС,
	|	тблВрем.СуммаНДСУпр КАК СуммаНДСУпр,
	|	тблВрем.ТС КАК ТС,
	|	ЛОЖЬ КАК ПересчетВВалютуУпр,
	|	НЕОПРЕДЕЛЕНО КАК Валюта
	|ИЗ
	|	тблВрем КАК тблВрем
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	уатПутевойЛистПрочиеРасходы.СтатьяРасходов,
	|	уатПутевойЛистПрочиеРасходы.СтатьяРасходов.Счет,
	|	ВЫБОР
	|		КОГДА уатПутевойЛистПрочиеРасходы.УчитыватьНДС
	|				И НЕ уатПутевойЛистПрочиеРасходы.СуммаВключаетНДС
	|			ТОГДА уатПутевойЛистПрочиеРасходы.Сумма + уатПутевойЛистПрочиеРасходы.СуммаНДС
	|		ИНАЧЕ уатПутевойЛистПрочиеРасходы.Сумма
	|	КОНЕЦ,
	|	0,
	|	0,
	|	уатПутевойЛистПрочиеРасходы.СуммаНДС,
	|	уатПутевойЛистПрочиеРасходы.СуммаНДС,
	|	уатПутевойЛистПрочиеРасходы.Ссылка.ТранспортноеСредство,
	|	ИСТИНА,
	|	уатПутевойЛистПрочиеРасходы.Валюта
	|ИЗ
	|	Документ.уатПутевойЛист.ПрочиеРасходы КАК уатПутевойЛистПрочиеРасходы
	|ГДЕ
	|	уатПутевойЛистПрочиеРасходы.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("тблВрем", тблВрем);
	ТаблицаРасходы = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ТекСтрока Из ТаблицаРасходы Цикл
		Если ТекСтрока.ПересчетВВалютуУпр Тогда
			ТекСтрока.СуммаУпр = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.Сумма,
				ТекСтрока.Валюта, СтруктураДополнительныеСвойства.ВалютаУпрУчета, ДокументСсылка.ДатаЗакрытия, ДокументСсылка.ДатаЗакрытия);
			ТекСтрока.СуммаРегл = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.Сумма,
				ТекСтрока.Валюта, СтруктураДополнительныеСвойства.ВалютаРеглУчета, ДокументСсылка.ДатаЗакрытия, ДокументСсылка.ДатаЗакрытия);
			ТекСтрока.СуммаНДСУпр = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаНДСУпр,
				ТекСтрока.Валюта, СтруктураДополнительныеСвойства.ВалютаУпрУчета, ДокументСсылка.ДатаЗакрытия, ДокументСсылка.ДатаЗакрытия);
			ТекСтрока.СуммаНДС = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаНДС,
				ТекСтрока.Валюта, СтруктураДополнительныеСвойства.ВалютаРеглУчета, ДокументСсылка.ДатаЗакрытия, ДокументСсылка.ДатаЗакрытия);
		КонецЕсли;
	КонецЦикла;
		
	ТаблицаРасходы.Свернуть("СтатьяРасходов, СчетРасходов, ТС", "СуммаУпр, СуммаРегл, СуммаНДСУпр, СуммаНДС");
	
	ТекстОшибок = "";
	уатПроведение.РаспределитьЗатратыМеждуАналитиками(ДокументСсылка, ТаблицаРасходы, ТекстОшибок);
	
	ТаблицаРасходы.Колонки.Добавить("Период");
	ТаблицаРасходы.ЗаполнитьЗначения(ДокументСсылка.ДатаЗакрытия, "Период");
	ТаблицаРасходы.Колонки.Добавить("Регистратор");
	ТаблицаРасходы.ЗаполнитьЗначения(ДокументСсылка, "Регистратор");
	ТаблицаРасходы.Колонки.Добавить("Организация");
	ТаблицаРасходы.ЗаполнитьЗначения(ДокументСсылка.Организация, "Организация");
	//ТаблицаРасходы.Колонки.Добавить("Подразделение");
	//ТаблицаРасходы.ЗаполнитьЗначения(ДокументСсылка.Подразделение, "Подразделение");
		
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРасходы", ТаблицаРасходы);
КонецПроцедуры // СформироватьТаблицаРасходы()

// Формирует таблицу значений, содержащую данные для проведения по регистру "Заказы грузоотправителей".
//
Процедура СформироватьТаблицаЗаказыГрузоотправителей(ДокументСсылка, СтруктураДополнительныеСвойства) 
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатПутевойЛистЗадание.ЗаказНаТС КАК ЗаказНаТС,
	|	уатПутевойЛистЗадание.Номенклатура КАК Номенклатура,
	|	уатПутевойЛистЗадание.Количество КАК Количество,
	|	уатПутевойЛистЗадание.ЗаказНаТС.ДетализацияЗакрытия КАК ДетализацияЗакрытия,
	|	ВЫБОР
	|		КОГДА уатПутевойЛистЗадание.ВремяУбытияФакт <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА уатПутевойЛистЗадание.ВремяУбытияФакт
	|		ИНАЧЕ уатПутевойЛистЗадание.Ссылка.Дата
	|	КОНЕЦ КАК Период
	|ПОМЕСТИТЬ ЗаказыПЛ
	|ИЗ
	|	Документ.уатПутевойЛист.Задание КАК уатПутевойЛистЗадание
	|ГДЕ
	|	уатПутевойЛистЗадание.Ссылка = &Ссылка
	|	И уатПутевойЛистЗадание.ЗаказНаТС <> ЗНАЧЕНИЕ(Документ.уатЗаказГрузоотправителя.ПустаяСсылка)
	|	И уатПутевойЛистЗадание.Выполнено
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатЗаказГрузоотправителяТовары.Ссылка КАК ЗаказНаТС,
	|	уатЗаказГрузоотправителяТовары.Номенклатура КАК Номенклатура,
	|	МИНИМУМ(уатЗаказГрузоотправителяТовары.НомерСтроки) КАК НомерСтроки
	|ПОМЕСТИТЬ ЗаказыТоварыСвернутая
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя.Товары КАК уатЗаказГрузоотправителяТовары
	|ГДЕ
	|	уатЗаказГрузоотправителяТовары.Ссылка В
	|			(ВЫБРАТЬ
	|				ЗаказыПЛ.ЗаказНаТС
	|			ИЗ
	|				ЗаказыПЛ
	|			ГДЕ
	|				ЗаказыПЛ.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам))
	|
	|СГРУППИРОВАТЬ ПО
	|	уатЗаказГрузоотправителяТовары.Ссылка,
	|	уатЗаказГрузоотправителяТовары.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказыПЛ.ЗаказНаТС КАК ЗаказНаТС,
	|	МИНИМУМ(ЗаказыПЛ.Период) КАК Период
	|ПОМЕСТИТЬ ЗаданиеГрузовыеМестаСвернутая
	|ИЗ
	|	ЗаказыПЛ КАК ЗаказыПЛ
	|ГДЕ
	|	ЗаказыПЛ.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыПЛ.ЗаказНаТС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказыТоварыСвернутая.ЗаказНаТС КАК ЗаказНаТС,
	|	ЗаказыТоварыСвернутая.Номенклатура КАК Номенклатура,
	|	уатЗаказГрузоотправителяТовары.Количество КАК Количество,
	|	уатЗаказГрузоотправителяТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ПОМЕСТИТЬ ЗаказыТоварыЕдиницыИзмерения
	|ИЗ
	|	ЗаказыТоварыСвернутая КАК ЗаказыТоварыСвернутая
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя.Товары КАК уатЗаказГрузоотправителяТовары
	|		ПО ЗаказыТоварыСвернутая.ЗаказНаТС = уатЗаказГрузоотправителяТовары.Ссылка
	|			И ЗаказыТоварыСвернутая.Номенклатура = уатЗаказГрузоотправителяТовары.Номенклатура
	|			И ЗаказыТоварыСвернутая.НомерСтроки = уатЗаказГрузоотправителяТовары.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	уатПутевойЛистЗадание.Период КАК Период,
	|	&Ссылка КАК Регистратор,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	уатПутевойЛистЗадание.ЗаказНаТС.Контрагент КАК Контрагент,
	|	уатПутевойЛистЗадание.ЗаказНаТС.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	уатПутевойЛистЗадание.ЗаказНаТС КАК ЗаказГрузоотправителя,
	|	ЗНАЧЕНИЕ(Справочник.уатГрузовыеМеста_уэ.ПустаяСсылка) КАК ГрузовоеМесто,
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура,
	|	1 КАК Количество,
	|	ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка) КАК ЕдиницаИзмерения
	|ПОМЕСТИТЬ ЗаказыПЛЗадание
	|ИЗ
	|	ЗаказыПЛ КАК уатПутевойЛистЗадание
	|ГДЕ
	|	уатПутевойЛистЗадание.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаданиеГрузовыеМестаСвернутая.Период,
	|	&Ссылка,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	уатЗаказыГрузоотправителейОстатки.Контрагент,
	|	уатЗаказыГрузоотправителейОстатки.ДоговорКонтрагента,
	|	ЗаданиеГрузовыеМестаСвернутая.ЗаказНаТС,
	|	уатЗаказыГрузоотправителейОстатки.ГрузовоеМесто,
	|	уатЗаказыГрузоотправителейОстатки.Номенклатура,
	|	уатЗаказыГрузоотправителейОстатки.КоличествоОстаток,
	|	уатЗаказыГрузоотправителейОстатки.ЕдиницаИзмерения
	|ИЗ
	|	ЗаданиеГрузовыеМестаСвернутая КАК ЗаданиеГрузовыеМестаСвернутая
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.уатЗаказыГрузоотправителей.Остатки(
	|				,
	|				ЗаказГрузоотправителя В
	|					(ВЫБРАТЬ
	|						ЗаданиеГрузовыеМестаСвернутая.ЗаказНаТС
	|					ИЗ
	|						ЗаданиеГрузовыеМестаСвернутая)) КАК уатЗаказыГрузоотправителейОстатки
	|		ПО ЗаданиеГрузовыеМестаСвернутая.ЗаказНаТС = уатЗаказыГрузоотправителейОстатки.ЗаказГрузоотправителя
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	уатПутевойЛистЗадание.Период,
	|	&Ссылка,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	уатПутевойЛистЗадание.ЗаказНаТС.Контрагент,
	|	уатПутевойЛистЗадание.ЗаказНаТС.ДоговорКонтрагента,
	|	уатПутевойЛистЗадание.ЗаказНаТС,
	|	ЗНАЧЕНИЕ(Справочник.уатГрузовыеМеста_уэ.ПустаяСсылка),
	|	уатПутевойЛистЗадание.Номенклатура,
	|	уатПутевойЛистЗадание.Количество,
	|	ЗаказыТоварыЕдиницыИзмерения.ЕдиницаИзмерения
	|ИЗ
	|	ЗаказыПЛ КАК уатПутевойЛистЗадание
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗаказыТоварыЕдиницыИзмерения КАК ЗаказыТоварыЕдиницыИзмерения
	|		ПО уатПутевойЛистЗадание.ЗаказНаТС = ЗаказыТоварыЕдиницыИзмерения.ЗаказНаТС
	|			И уатПутевойЛистЗадание.Номенклатура = ЗаказыТоварыЕдиницыИзмерения.Номенклатура
	|ГДЕ
	|	уатПутевойЛистЗадание.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам)
	|	И уатПутевойЛистЗадание.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	уатПутевойЛистЗадание.Период,
	|	&Ссылка,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	уатПутевойЛистЗадание.ЗаказНаТС.Контрагент,
	|	уатПутевойЛистЗадание.ЗаказНаТС.ДоговорКонтрагента,
	|	уатПутевойЛистЗадание.ЗаказНаТС,
	|	ЗНАЧЕНИЕ(Справочник.уатГрузовыеМеста_уэ.ПустаяСсылка),
	|	ЗаказыТоварыЕдиницыИзмерения.Номенклатура,
	|	ЗаказыТоварыЕдиницыИзмерения.Количество,
	|	ЗаказыТоварыЕдиницыИзмерения.ЕдиницаИзмерения
	|ИЗ
	|	ЗаказыПЛ КАК уатПутевойЛистЗадание
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗаказыТоварыЕдиницыИзмерения КАК ЗаказыТоварыЕдиницыИзмерения
	|		ПО уатПутевойЛистЗадание.ЗаказНаТС = ЗаказыТоварыЕдиницыИзмерения.ЗаказНаТС
	|ГДЕ
	|	уатПутевойЛистЗадание.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам)
	|	И уатПутевойЛистЗадание.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ЗаказыПЛЗадание.Период) КАК Период,
	|	ЗаказыПЛЗадание.Регистратор КАК Регистратор,
	|	ЗаказыПЛЗадание.ВидДвижения КАК ВидДвижения,
	|	ЗаказыПЛЗадание.Контрагент КАК Контрагент,
	|	ЗаказыПЛЗадание.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ЗаказыПЛЗадание.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя,
	|	ЗаказыПЛЗадание.ГрузовоеМесто КАК ГрузовоеМесто,
	|	ЗаказыПЛЗадание.Номенклатура КАК Номенклатура,
	|	ЗаказыПЛЗадание.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	МАКСИМУМ(ЗаказыПЛЗадание.Количество) КАК Количество
	|ИЗ
	|	ЗаказыПЛЗадание КАК ЗаказыПЛЗадание
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыПЛЗадание.Регистратор,
	|	ЗаказыПЛЗадание.ВидДвижения,
	|	ЗаказыПЛЗадание.Контрагент,
	|	ЗаказыПЛЗадание.ДоговорКонтрагента,
	|	ЗаказыПЛЗадание.ЗаказГрузоотправителя,
	|	ЗаказыПЛЗадание.ГрузовоеМесто,
	|	ЗаказыПЛЗадание.Номенклатура,
	|	ЗаказыПЛЗадание.ЕдиницаИзмерения");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	ТаблицаПоЗаказамГрузоотправителей = Запрос.Выполнить().Выгрузить();
		
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗаказовГрузоотправителя", ТаблицаПоЗаказамГрузоотправителей);
КонецПроцедуры

// Формирует таблицу значений, содержащую данные для проведения по регистру "Грузы к перевозке".
//
Процедура СформироватьТаблицаГрузыКПеревозке(ДокументСсылка, СтруктураДополнительныеСвойства) 
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатПутевойЛистЗадание.ЗаказНаТС КАК ЗаказНаТС,
	|	уатПутевойЛистЗадание.Номенклатура КАК Номенклатура,
	|	уатПутевойЛистЗадание.Количество КАК Количество,
	|	уатПутевойЛистЗадание.ЗаказНаТС.ДетализацияЗакрытия КАК ДетализацияЗакрытия,
	|	ВЫБОР
	|		КОГДА РАЗНОСТЬДАТ(уатПутевойЛистЗадание.Ссылка.Дата, уатПутевойЛистЗадание.ЗаказНаТС.Дата, ДЕНЬ) = 0
	|			ТОГДА ВЫБОР
	|					КОГДА РАЗНОСТЬДАТ(уатПутевойЛистЗадание.Ссылка.Дата, уатПутевойЛистЗадание.ЗаказНаТС.Дата, СЕКУНДА) >= 0
	|						ТОГДА ДОБАВИТЬКДАТЕ(уатПутевойЛистЗадание.ЗаказНаТС.Дата, СЕКУНДА, 1)
	|					ИНАЧЕ уатПутевойЛистЗадание.Ссылка.Дата
	|				КОНЕЦ
	|		КОГДА РАЗНОСТЬДАТ(уатПутевойЛистЗадание.Ссылка.Дата, уатПутевойЛистЗадание.ЗаказНаТС.Дата, ДЕНЬ) > 0
	|			ТОГДА ДОБАВИТЬКДАТЕ(уатПутевойЛистЗадание.ЗаказНаТС.Дата, СЕКУНДА, 1)
	|		ИНАЧЕ уатПутевойЛистЗадание.Ссылка.Дата
	|	КОНЕЦ КАК Период
	|ПОМЕСТИТЬ ЗаказыПЛ
	|ИЗ
	|	Документ.уатПутевойЛист.Задание КАК уатПутевойЛистЗадание
	|ГДЕ
	|	уатПутевойЛистЗадание.Ссылка = &Ссылка
	|	И уатПутевойЛистЗадание.ЗаказНаТС <> ЗНАЧЕНИЕ(Документ.уатЗаказГрузоотправителя.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатЗаказГрузоотправителяТовары.Ссылка КАК ЗаказНаТС,
	|	уатЗаказГрузоотправителяТовары.Номенклатура КАК Номенклатура,
	|	МИНИМУМ(уатЗаказГрузоотправителяТовары.НомерСтроки) КАК НомерСтроки
	|ПОМЕСТИТЬ ЗаказыТоварыСвернутая
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя.Товары КАК уатЗаказГрузоотправителяТовары
	|ГДЕ
	|	уатЗаказГрузоотправителяТовары.Ссылка В
	|			(ВЫБРАТЬ
	|				ЗаказыПЛ.ЗаказНаТС
	|			ИЗ
	|				ЗаказыПЛ
	|			ГДЕ
	|				ЗаказыПЛ.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам))
	|
	|СГРУППИРОВАТЬ ПО
	|	уатЗаказГрузоотправителяТовары.Ссылка,
	|	уатЗаказГрузоотправителяТовары.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказыПЛ.ЗаказНаТС КАК ЗаказНаТС,
	|	МИНИМУМ(ЗаказыПЛ.Период) КАК Период
	|ПОМЕСТИТЬ ЗаданиеГрузовыеМестаСвернутая
	|ИЗ
	|	ЗаказыПЛ КАК ЗаказыПЛ
	|ГДЕ
	|	ЗаказыПЛ.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам)
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыПЛ.ЗаказНаТС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказыТоварыСвернутая.ЗаказНаТС КАК ЗаказНаТС,
	|	ЗаказыТоварыСвернутая.Номенклатура КАК Номенклатура,
	|	уатЗаказГрузоотправителяТовары.Количество КАК Количество,
	|	уатЗаказГрузоотправителяТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ПОМЕСТИТЬ ЗаказыТоварыЕдиницыИзмерения
	|ИЗ
	|	ЗаказыТоварыСвернутая КАК ЗаказыТоварыСвернутая
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя.Товары КАК уатЗаказГрузоотправителяТовары
	|		ПО ЗаказыТоварыСвернутая.ЗаказНаТС = уатЗаказГрузоотправителяТовары.Ссылка
	|			И ЗаказыТоварыСвернутая.Номенклатура = уатЗаказГрузоотправителяТовары.Номенклатура
	|			И ЗаказыТоварыСвернутая.НомерСтроки = уатЗаказГрузоотправителяТовары.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	уатПутевойЛистЗадание.Период КАК Период,
	|	&Ссылка КАК Регистратор,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	уатПутевойЛистЗадание.ЗаказНаТС.Контрагент КАК Контрагент,
	|	уатПутевойЛистЗадание.ЗаказНаТС.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	уатПутевойЛистЗадание.ЗаказНаТС КАК ЗаказГрузоотправителя,
	|	НЕОПРЕДЕЛЕНО КАК ГрузовоеМесто,
	|	НЕОПРЕДЕЛЕНО КАК Номенклатура,
	|	1 КАК Количество,
	|	НЕОПРЕДЕЛЕНО КАК ЕдиницаИзмерения
	|ПОМЕСТИТЬ ЗаказыПЛЗадание
	|ИЗ
	|	ЗаказыПЛ КАК уатПутевойЛистЗадание
	|ГДЕ
	|	уатПутевойЛистЗадание.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаданиеГрузовыеМестаСвернутая.Период,
	|	&Ссылка,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	уатЗаказыГрузоотправителейОстатки.Контрагент,
	|	уатЗаказыГрузоотправителейОстатки.ДоговорКонтрагента,
	|	ЗаданиеГрузовыеМестаСвернутая.ЗаказНаТС,
	|	уатЗаказыГрузоотправителейОстатки.ГрузовоеМесто,
	|	уатЗаказыГрузоотправителейОстатки.Номенклатура,
	|	уатЗаказыГрузоотправителейОстатки.КоличествоОстаток,
	|	уатЗаказыГрузоотправителейОстатки.ЕдиницаИзмерения
	|ИЗ
	|	ЗаданиеГрузовыеМестаСвернутая КАК ЗаданиеГрузовыеМестаСвернутая
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрНакопления.уатЗаказыГрузоотправителей.Остатки(
	|				,
	|				ЗаказГрузоотправителя В
	|					(ВЫБРАТЬ
	|						ЗаданиеГрузовыеМестаСвернутая.ЗаказНаТС
	|					ИЗ
	|						ЗаданиеГрузовыеМестаСвернутая)) КАК уатЗаказыГрузоотправителейОстатки
	|		ПО ЗаданиеГрузовыеМестаСвернутая.ЗаказНаТС = уатЗаказыГрузоотправителейОстатки.ЗаказГрузоотправителя
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	уатПутевойЛистЗадание.Период,
	|	&Ссылка,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	уатПутевойЛистЗадание.ЗаказНаТС.Контрагент,
	|	уатПутевойЛистЗадание.ЗаказНаТС.ДоговорКонтрагента,
	|	уатПутевойЛистЗадание.ЗаказНаТС,
	|	НЕОПРЕДЕЛЕНО,
	|	уатПутевойЛистЗадание.Номенклатура,
	|	уатПутевойЛистЗадание.Количество,
	|	ЗаказыТоварыЕдиницыИзмерения.ЕдиницаИзмерения
	|ИЗ
	|	ЗаказыПЛ КАК уатПутевойЛистЗадание
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗаказыТоварыЕдиницыИзмерения КАК ЗаказыТоварыЕдиницыИзмерения
	|		ПО уатПутевойЛистЗадание.ЗаказНаТС = ЗаказыТоварыЕдиницыИзмерения.ЗаказНаТС
	|			И уатПутевойЛистЗадание.Номенклатура = ЗаказыТоварыЕдиницыИзмерения.Номенклатура
	|ГДЕ
	|	уатПутевойЛистЗадание.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам)
	|	И уатПутевойЛистЗадание.Номенклатура <> ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	уатПутевойЛистЗадание.Период,
	|	&Ссылка,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	уатПутевойЛистЗадание.ЗаказНаТС.Контрагент,
	|	уатПутевойЛистЗадание.ЗаказНаТС.ДоговорКонтрагента,
	|	уатПутевойЛистЗадание.ЗаказНаТС,
	|	НЕОПРЕДЕЛЕНО,
	|	ЗаказыТоварыЕдиницыИзмерения.Номенклатура,
	|	ЗаказыТоварыЕдиницыИзмерения.Количество,
	|	ЗаказыТоварыЕдиницыИзмерения.ЕдиницаИзмерения
	|ИЗ
	|	ЗаказыПЛ КАК уатПутевойЛистЗадание
	|		ЛЕВОЕ СОЕДИНЕНИЕ ЗаказыТоварыЕдиницыИзмерения КАК ЗаказыТоварыЕдиницыИзмерения
	|		ПО уатПутевойЛистЗадание.ЗаказНаТС = ЗаказыТоварыЕдиницыИзмерения.ЗаказНаТС
	|ГДЕ
	|	уатПутевойЛистЗадание.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам)
	|	И уатПутевойЛистЗадание.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МИНИМУМ(ЗаказыПЛЗадание.Период),
	|	ЗаказыПЛЗадание.Регистратор,
	|	ЗаказыПЛЗадание.ВидДвижения,
	|	ЗаказыПЛЗадание.Контрагент,
	|	ЗаказыПЛЗадание.ДоговорКонтрагента,
	|	ЗаказыПЛЗадание.ЗаказГрузоотправителя,
	|	ЗаказыПЛЗадание.ГрузовоеМесто,
	|	ЗаказыПЛЗадание.Номенклатура,
	|	ЗаказыПЛЗадание.ЕдиницаИзмерения,
	|	МАКСИМУМ(ЗаказыПЛЗадание.Количество) КАК Количество
	|ИЗ
	|	ЗаказыПЛЗадание КАК ЗаказыПЛЗадание
	|СГРУППИРОВАТЬ ПО
	|	ЗаказыПЛЗадание.Регистратор,
	|	ЗаказыПЛЗадание.ВидДвижения,
	|	ЗаказыПЛЗадание.Контрагент,
	|	ЗаказыПЛЗадание.ДоговорКонтрагента,
	|	ЗаказыПЛЗадание.ЗаказГрузоотправителя,
	|	ЗаказыПЛЗадание.ГрузовоеМесто,
	|	ЗаказыПЛЗадание.Номенклатура,
	|	ЗаказыПЛЗадание.ЕдиницаИзмерения");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	ТаблицаПоГрузамКПеревозке = Запрос.Выполнить().Выгрузить();
		
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаГрузовКПеревозке", ТаблицаПоГрузамКПеревозке);

КонецПроцедуры

// Формирует таблицу значений, содержащую данные для проведения по регистру "Грузы к перевозке".
//
Процедура СформироватьТаблицаСтатусыГрузов(ДокументСсылка, СтруктураДополнительныеСвойства) 
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатПутевойЛистЗадание.Ссылка КАК Ссылка,
	|	уатПутевойЛистЗадание.ЗаказНаТС КАК ЗаказНаТС,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА РАЗНОСТЬДАТ(уатПутевойЛистЗадание.Ссылка.Дата, уатПутевойЛистЗадание.ЗаказНаТС.Дата, ДЕНЬ) = 0
	|				ТОГДА ВЫБОР
	|						КОГДА РАЗНОСТЬДАТ(уатПутевойЛистЗадание.Ссылка.Дата, уатПутевойЛистЗадание.ЗаказНаТС.Дата, СЕКУНДА) >= 0
	|							ТОГДА ДОБАВИТЬКДАТЕ(уатПутевойЛистЗадание.ЗаказНаТС.Дата, СЕКУНДА, 1)
	|						ИНАЧЕ уатПутевойЛистЗадание.Ссылка.Дата
	|					КОНЕЦ
	|			КОГДА РАЗНОСТЬДАТ(уатПутевойЛистЗадание.Ссылка.Дата, уатПутевойЛистЗадание.ЗаказНаТС.Дата, ДЕНЬ) > 0
	|				ТОГДА ДОБАВИТЬКДАТЕ(уатПутевойЛистЗадание.ЗаказНаТС.Дата, СЕКУНДА, 1)
	|			ИНАЧЕ уатПутевойЛистЗадание.Ссылка.Дата
	|		КОНЕЦ) КАК ДатаДокумента,
	|	МИНИМУМ(ВЫБОР
	|			КОГДА &флПланФактВремени
	|				ТОГДА ВЫБОР
	|						КОГДА уатПутевойЛистЗадание.ВремяПрибытияФакт = ДАТАВРЕМЯ(1, 1, 1)
	|							ТОГДА ДАТАВРЕМЯ(3999, 1, 1)
	|						ИНАЧЕ уатПутевойЛистЗадание.ВремяПрибытияФакт
	|					КОНЕЦ
	|			ИНАЧЕ ВЫБОР
	|					КОГДА уатПутевойЛистЗадание.ВремяПрибытия = ДАТАВРЕМЯ(1, 1, 1)
	|						ТОГДА ДАТАВРЕМЯ(3999, 1, 1)
	|					ИНАЧЕ уатПутевойЛистЗадание.ВремяПрибытия
	|				КОНЕЦ
	|		КОНЕЦ) КАК ВремяПрибытияФакт,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА &флПланФактВремени
	|				ТОГДА уатПутевойЛистЗадание.ВремяУбытияФакт
	|			ИНАЧЕ уатПутевойЛистЗадание.ВремяУбытия
	|		КОНЕЦ) КАК ВремяУбытияФакт,
	|	МИНИМУМ(уатПутевойЛистЗадание.Выполнено) КАК Выполнено
	|ПОМЕСТИТЬ ЗаказыПЛ
	|ИЗ
	|	Документ.уатПутевойЛист.Задание КАК уатПутевойЛистЗадание
	|ГДЕ
	|	уатПутевойЛистЗадание.Ссылка = &Ссылка
	|	И (уатПутевойЛистЗадание.ЗаказНаТС.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам)
	|			ИЛИ уатПутевойЛистЗадание.ЗаказНаТС.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам))
	|
	|СГРУППИРОВАТЬ ПО
	|	уатПутевойЛистЗадание.Ссылка,
	|	уатПутевойЛистЗадание.ЗаказНаТС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказыПЛ.Ссылка КАК Регистратор,
	|	ЗаказыПЛ.ЗаказНаТС КАК Заказ,
	|	НЕОПРЕДЕЛЕНО КАК ГрузовоеМесто,
	|	ВЫБОР
	|		КОГДА ЗаказыПЛ.ДатаДокумента >= ЗаказыПЛ.ВремяПрибытияФакт
	|			ТОГДА ДОБАВИТЬКДАТЕ(ЗаказыПЛ.ВремяПрибытияФакт, СЕКУНДА, -1)
	|		ИНАЧЕ ЗаказыПЛ.ДатаДокумента
	|	КОНЕЦ КАК Период,
	|	ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Размещен) КАК Статус
	|ИЗ
	|	ЗаказыПЛ КАК ЗаказыПЛ
	|ГДЕ
	|	ЗаказыПЛ.ЗаказНаТС.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказыПЛ.Ссылка,
	|	ЗаказыПЛ.ЗаказНаТС,
	|	НЕОПРЕДЕЛЕНО,
	|	ЗаказыПЛ.ВремяПрибытияФакт,
	|	ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Отправлен)
	|ИЗ
	|	ЗаказыПЛ КАК ЗаказыПЛ
	|ГДЕ
	|	ЗаказыПЛ.ЗаказНаТС.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам)
	|	И ЗаказыПЛ.ВремяПрибытияФакт <> ДАТАВРЕМЯ(3999, 1, 1)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ЗаказыПЛ.Ссылка,
	|	ЗаказыПЛ.ЗаказНаТС,
	|	НЕОПРЕДЕЛЕНО,
	|	ВЫБОР
	|		КОГДА ЗаказыПЛ.ВремяУбытияФакт <= ЗаказыПЛ.ВремяПрибытияФакт
	|			ТОГДА ДОБАВИТЬКДАТЕ(ЗаказыПЛ.ВремяУбытияФакт, СЕКУНДА, 1)
	|		ИНАЧЕ ЗаказыПЛ.ВремяУбытияФакт
	|	КОНЕЦ,
	|	ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Доставлен)
	|ИЗ
	|	ЗаказыПЛ КАК ЗаказыПЛ
	|ГДЕ
	|	ЗаказыПЛ.ЗаказНаТС.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам)
	|	И ЗаказыПЛ.ВремяУбытияФакт <> ДАТАВРЕМЯ(1, 1, 1)
	|	И ЗаказыПЛ.Выполнено
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказыПЛ.Ссылка,
	|	ЗаказыПЛ.ЗаказНаТС,
	|	уатЗаказГрузоотправителяГрузовойСостав.ГрузовоеМесто,
	|	ВЫБОР
	|		КОГДА ЗаказыПЛ.ДатаДокумента >= ЗаказыПЛ.ВремяПрибытияФакт
	|			ТОГДА ДОБАВИТЬКДАТЕ(ЗаказыПЛ.ВремяПрибытияФакт, СЕКУНДА, -1)
	|		ИНАЧЕ ЗаказыПЛ.ДатаДокумента
	|	КОНЕЦ,
	|	ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Размещен)
	|ИЗ
	|	ЗаказыПЛ КАК ЗаказыПЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя.ГрузовойСостав КАК уатЗаказГрузоотправителяГрузовойСостав
	|		ПО ЗаказыПЛ.ЗаказНаТС = уатЗаказГрузоотправителяГрузовойСостав.Ссылка
	|ГДЕ
	|	ЗаказыПЛ.ЗаказНаТС.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказыПЛ.Ссылка,
	|	ЗаказыПЛ.ЗаказНаТС,
	|	уатЗаказГрузоотправителяГрузовойСостав.ГрузовоеМесто,
	|	ЗаказыПЛ.ВремяПрибытияФакт,
	|	ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Отправлен)
	|ИЗ
	|	ЗаказыПЛ КАК ЗаказыПЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя.ГрузовойСостав КАК уатЗаказГрузоотправителяГрузовойСостав
	|		ПО ЗаказыПЛ.ЗаказНаТС = уатЗаказГрузоотправителяГрузовойСостав.Ссылка
	|ГДЕ
	|	ЗаказыПЛ.ЗаказНаТС.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам)
	|	И ЗаказыПЛ.ВремяПрибытияФакт <> ДАТАВРЕМЯ(3999, 1, 1)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ЗаказыПЛ.Ссылка,
	|	ЗаказыПЛ.ЗаказНаТС,
	|	уатЗаказГрузоотправителяГрузовойСостав.ГрузовоеМесто,
	|	ВЫБОР
	|		КОГДА ЗаказыПЛ.ВремяУбытияФакт <= ЗаказыПЛ.ВремяПрибытияФакт
	|			ТОГДА ДОБАВИТЬКДАТЕ(ЗаказыПЛ.ВремяПрибытияФакт, СЕКУНДА, 1)
	|		ИНАЧЕ ЗаказыПЛ.ВремяУбытияФакт
	|	КОНЕЦ,
	|	ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Доставлен)
	|ИЗ
	|	ЗаказыПЛ КАК ЗаказыПЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя.ГрузовойСостав КАК уатЗаказГрузоотправителяГрузовойСостав
	|		ПО ЗаказыПЛ.ЗаказНаТС = уатЗаказГрузоотправителяГрузовойСостав.Ссылка
	|ГДЕ
	|	ЗаказыПЛ.ЗаказНаТС.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам)
	|	И ЗаказыПЛ.ВремяУбытияФакт <> ДАТАВРЕМЯ(1, 1, 1)
	|	И ЗаказыПЛ.Выполнено");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("флПланФактВремени", Константы.уатУчетПланФактаПоМаршрутуВПутевыхЛистах.Получить());
	
	ТаблицаСтатусовГрузов = Запрос.Выполнить().Выгрузить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСтатусыГрузов", ТаблицаСтатусовГрузов);
	
КонецПроцедуры

#КонецОбласти

#Область Печать

// Возвращает параметры приказа Минтранса РФ в зависимости от даты
// 
Функция ПолучитьПараметрыПриказаМинтранса(ДатаФормирования = Неопределено)
	
	СтруктураПараметров = Новый Структура();
	
	Если ДатаФормирования = Неопределено ИЛИ ДатаФормирования >= Дата('20230901') Тогда 
		СтруктураПараметров.Вставить("ДатаПриказа", "05.05.2023");
		СтруктураПараметров.Вставить("НомерПриказа", "159");
	ИначеЕсли ДатаФормирования = Неопределено ИЛИ ДатаФормирования >= Дата('20230301') Тогда 
		СтруктураПараметров.Вставить("ДатаПриказа", "28.09.2022");
		СтруктураПараметров.Вставить("НомерПриказа", "390");
	Иначе
		СтруктураПараметров.Вставить("ДатаПриказа", "11.09.2020");
		СтруктураПараметров.Вставить("НомерПриказа", "368");
	КонецЕсли;
	
	Возврат СтруктураПараметров; 
	
КонецФункции        

// Возвращает срок действия путевого листа
// 
Функция ПолучитьСрокДействияДляПечати(ДатаВыписки, ДействителенДо)
	
	ФорматДаты = "ДФ='дд ММММ гггг'";          
	тСрокДействия = "с " + Формат(ДатаВыписки, ФорматДаты) + " ";

	Если ЗначениеЗаполнено(ДействителенДо) Тогда
		Возврат тСрокДействия + "по " + Формат(ДействителенДо, ФорматДаты) + " ";	
	Иначе
		Возврат тСрокДействия + "по " + Формат(ДатаВыписки, ФорматДаты) + " ";	
	КонецЕсли
	
КонецФункции        

// Возвращает номер путевого листа
// 
Функция ПолучитьНомерДляПечати(Организация, Номер)

	ПечатьПрефиксовВключена = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, 
		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ВыводитьПрефиксПриПечати"));
		
	Если ПечатьПрефиксовВключена Тогда
		Возврат Номер;
	Иначе
		Возврат уатОбщегоНазначенияКлиентСервер.НомерДокументаНаПечать(Номер, Истина, Истина);
	КонецЕсли;
	
КонецФункции     

// Возвращает параметры водителей
// 
Функция ПолучитьПараметрыШапкиДляПечати(ТекущийДокумент, ФлагПечати = 5)

	// реквизиты шапки
	ДанныеОрганизации = уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(
		уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(ТекущийДокумент.Организация, ТекущийДокумент.ДатаЗакрытия), 
		"НаименованиеДляПечатныхФорм,ОГРН,ЮридическийАдрес,Телефоны");
		
	СведенияОПеревозке = "" + ТекущийДокумент.ВидСообщения 
		+ ?(ЗначениеЗаполнено(ТекущийДокумент.ВидСообщения),"; ", "") + ТекущийДокумент.ВидПеревозки;
		
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Номер", ПолучитьНомерДляПечати(ТекущийДокумент.Организация, ТекущийДокумент.Номер));
	СтруктураПараметров.Вставить("СрокДействия", ПолучитьСрокДействияДляПечати(ТекущийДокумент.Дата, ТекущийДокумент.ДействителенДо));
	СтруктураПараметров.Вставить("Организация", ДанныеОрганизации);	
	СтруктураПараметров.Вставить("ОрганизацияРасшифровка", ТекущийДокумент.Организация);
	СтруктураПараметров.Вставить("КодПоОКПО", ТекущийДокумент.Организация.КодПоОКПО);
	СтруктураПараметров.Вставить("СведенияОПеревозке", СведенияОПеревозке);	
	СтруктураПараметров.Вставить("РежимРаботы", ТекущийДокумент.РежимРаботыТС);
 	СтруктураПараметров.Вставить("СопровождающиеЛица", ПолучитьСопрЛицДляПечати(ТекущийДокумент.Сотрудник1, ТекущийДокумент.Сотрудник2, ТекущийДокумент.Дата));
	
	СтруктураПараметров.Вставить("СпидометрВыезда", ТекущийДокумент.СпидометрВыезда);
	СтруктураПараметров.Вставить("НулевойПробегВыезда", ТекущийДокумент.НулевойПробегВыезда);
	Если ФлагПечати = 5 Или ФлагПечати = 4 Тогда
		СтруктураПараметров.Вставить("СпидометрВозвращения", ТекущийДокумент.СпидометрВозвращения);
		СтруктураПараметров.Вставить("НулевойПробегВозвращения", ТекущийДокумент.НулевойПробегВозвращения);
	КонецЕсли;              	
	
	// для 3С, ЭСМ1, ЭСМ2, ЭСМ3, ЭСМ7
	СтруктураПараметров.Вставить("ДатаСоставления", Формат(ТекущийДокумент.Дата, "ДЛФ='Д'"));
	
	// для 3, 3спец, 412, 6, 6С, Автокран, ПА1, ПГ1, ПЛ1,
	СтруктураПараметров.Вставить("ВремяВыезда", Формат(ТекущийДокумент.ДатаВыезда,"ДФ='dd.MM.yy ЧЧ:мм'"));;
	СтруктураПараметров.Вставить("ВремяВозвращения", Формат(ТекущийДокумент.ДатаВозвращения,"ДФ='dd.MM.yy ЧЧ:мм'"));;
	
	// для  ЭСМ1, ЭСМ2, ЭСМ3, ЭСМ7
	СтруктураПараметров.Вставить("ДатаВыезда", Формат(ТекущийДокумент.ДатаВыезда,"ДФ=дд.ММ.гг")); 
	СтруктураПараметров.Вставить("ДатаВозвращения", Формат(ТекущийДокумент.ДатаВозвращения,"ДФ=дд.ММ.гг")); 
	
	// для 4М, 4П, 4С
	СтруктураПараметров.Вставить("ДатаВыезда_ДД", Формат(ТекущийДокумент.ДатаВыезда,"ДФ=дд"));
	СтруктураПараметров.Вставить("ДатаВыезда_ММММ", Формат(ТекущийДокумент.ДатаВыезда,"ДФ=ММ"));
	СтруктураПараметров.Вставить("ВремяВыезда_ЧЧ", Формат(ТекущийДокумент.ДатаВыезда,"ДФ=ЧЧ"));
	СтруктураПараметров.Вставить("ВремяВыезда_ММ", Формат(ТекущийДокумент.ДатаВыезда,"ДФ=мм"));
	СтруктураПараметров.Вставить("ДатаВозвращения_ДД", Формат(ТекущийДокумент.ДатаВозвращения,"ДФ=дд"));
	СтруктураПараметров.Вставить("ДатаВозвращения_ММММ", Формат(ТекущийДокумент.ДатаВозвращения,"ДФ=ММ"));
	СтруктураПараметров.Вставить("ВремяВозвращения_ЧЧ", Формат(ТекущийДокумент.ДатаВозвращения,"ДФ=ЧЧ"));
	СтруктураПараметров.Вставить("ВремяВозвращения_ММ", Формат(ТекущийДокумент.ДатаВозвращения,"ДФ=мм"));
	
	Возврат СтруктураПараметров; 	
	
КонецФункции        

// Возвращает параметры водителя
// 
Функция ПолучитьПараметрыВодителяДляПечати(ВодительСсылка, НомерВодителя, ДатаФормирования, Организация, ДобавитьУдостКласс = Истина)
	
	Перем мВодУдСерия, мВодУдНомер, мВодУдКат, мВодУдДатаВыдачи;	

	ПараметрВодитель			= "Водитель" + НомерВодителя;
	ПараметрВодительРасшифровка	= "Водитель" + НомерВодителя + "Расшифровка";
	ПараметрВодительКод 		= "ВодительКод" + НомерВодителя;
	ПараметрВодительКласс 		= "ВодительКласс" + НомерВодителя;
	ПараметрВодительУдост 		= "ВодительУдост" + НомерВодителя;
	ПараметрВодительСНИЛС 		= "ВодительСНИЛС" + НомерВодителя;
	ПараметрВодительУдСНИЛС		= "ВодительУдСНИЛС" + НомерВодителя;

	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить(ПараметрВодитель, "");
	СтруктураПараметров.Вставить(ПараметрВодительРасшифровка, "");
	СтруктураПараметров.Вставить(ПараметрВодительКод, "");
	СтруктураПараметров.Вставить(ПараметрВодительКласс, "");
	СтруктураПараметров.Вставить(ПараметрВодительСНИЛС, "");
	СтруктураПараметров.Вставить(ПараметрВодительУдСНИЛС, "");
	
	Если ЗначениеЗаполнено(ВодительСсылка) Тогда

		ДанныеСтрокой = уатОбщегоНазначения.уатФИОСотрудникаПолноеСтрокой(ВодительСсылка, ДатаФормирования);

		// удостоверение
		уатОбщегоНазначения.уатУдостоверениеВодителя(ВодительСсылка, мВодУдСерия, мВодУдНомер, мВодУдКат, мВодУдДатаВыдачи);	
		ДанныеУдостоверения = мВодУдСерия + " " + мВодУдНомер;
		Если ЗначениеЗаполнено(мВодУдДатаВыдачи) Тогда
			ДанныеУдостоверения = ДанныеУдостоверения + " выдано " + Формат(мВодУдДатаВыдачи, "ДФ=dd.MM.yy");
		КонецЕсли;
  		СтруктураПараметров.Вставить(ПараметрВодительУдост, ДанныеУдостоверения);
		Если ДобавитьУдостКласс 
			И ЗначениеЗаполнено(ДанныеУдостоверения) Тогда
			ДанныеСтрокой = ДанныеСтрокой + ", № " + ДанныеУдостоверения;
		КонецЕсли;
		
		// класс
		мРеквизитыВодителя = уатОбщегоНазначения.уатПрочитатьРеквизитыВодителя(ВодительСсылка, ДатаФормирования, Организация);
		Если ДобавитьУдостКласс 
			И ЗначениеЗаполнено(мРеквизитыВодителя)
			И ЗначениеЗаполнено(мРеквизитыВодителя.Класс) Тогда
			ДанныеСтрокой = ДанныеСтрокой + ", кл. " + мРеквизитыВодителя.Класс;
		КонецЕсли;
		
		// СНИЛС
		СтруктураПараметров.Вставить(ПараметрВодитель, ДанныеСтрокой);
		СтруктураПараметров.Вставить(ПараметрВодительКласс, мРеквизитыВодителя.Класс);
		СтруктураПараметров.Вставить(ПараметрВодительРасшифровка, ВодительСсылка);
		СтруктураПараметров.Вставить(ПараметрВодительСНИЛС, уатОбщегоНазначения.СНИЛСВодителя(ВодительСсылка));
		
		// для 6 пп
		ШаблонУдСНИЛС = "водит.удост. №%1, СНИЛС %2"; 
		СтруктураПараметров.Вставить(ПараметрВодительУдСНИЛС, 
			СтрШаблон(ШаблонУдСНИЛС,  ДанныеУдостоверения, уатОбщегоНазначения.СНИЛСВодителя(ВодительСсылка)));
		
		// табельный номер
		Если мРеквизитыВодителя <> Неопределено Тогда
			СтруктураПараметров.Вставить(ПараметрВодительКод, 
				ПрефиксацияОбъектовКлиентСервер.УдалитьЛидирующиеНулиИзНомераОбъекта(мРеквизитыВодителя.ТабельныйНомер));
		КонецЕсли;
			
	КонецЕсли;

	Возврат СтруктураПараметров; 	
	
КонецФункции        

// Возвращает параметры сотрудника
// 
Функция ПолучитьПараметрыСопрЛицДляПечати(СотрудникСсылка, НомерСотрудника, ДатаФормирования, Организация)
	
	ПараметрСотрудник				= "Сотрудник" + НомерСотрудника;
	ПараметрСотрудникРасшифровка	= "Сотрудник" + НомерСотрудника + "Расшифровка";
	ПараметрСотрудникКод 			= "СотрудникКод" + НомерСотрудника;

	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить(ПараметрСотрудник, "");
	СтруктураПараметров.Вставить(ПараметрСотрудникРасшифровка, "");
	СтруктураПараметров.Вставить(ПараметрСотрудникКод, "");
	
	Если ЗначениеЗаполнено(СотрудникСсылка) Тогда

		ДанныеСтрокой = уатОбщегоНазначения.уатФИОСотрудникаПолноеСтрокой(СотрудникСсылка, ДатаФормирования);
		СтруктураПараметров.Вставить(ПараметрСотрудник, ДанныеСтрокой);
		СтруктураПараметров.Вставить(ПараметрСотрудникРасшифровка, СотрудникСсылка);
		
		мРеквизитыСотрудника = уатОбщегоНазначения.уатПрочитатьРеквизитыВодителя(СотрудникСсылка, ДатаФормирования, Организация);
		// табельный номер
		Если мРеквизитыСотрудника <> Неопределено Тогда
			СтруктураПараметров.Вставить(ПараметрСотрудникКод, 
				ПрефиксацияОбъектовКлиентСервер.УдалитьЛидирующиеНулиИзНомераОбъекта(мРеквизитыСотрудника.ТабельныйНомер));
		КонецЕсли;
			
	КонецЕсли;

	Возврат СтруктураПараметров; 	
	
КонецФункции

// Возвращает параметры транспортного средства
// 
Функция ПолучитьПараметрыТСДляПечати(ТранспортноеСредство, ДатаФормирования = Неопределено)
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("МодельТС", уатОбщегоНазначения.уатПредставлениеМоделиТС(ТранспортноеСредство));
	СтруктураПараметров.Вставить("МаркаТС", ТранспортноеСредство.Марка);
	СтруктураПараметров.Вставить("ТипТС", ТранспортноеСредство.ТипТС);
	СтруктураПараметров.Вставить("ГосНомерТС", ТранспортноеСредство.ГосударственныйНомер);
	СтруктураПараметров.Вставить("ГарНомерТС", ТранспортноеСредство.ГаражныйНомер);
	СтруктураПараметров.Вставить("ЛицензионнаяКарточка", ТранспортноеСредство.ЛицензионнаяКарточка);
	СтруктураПараметров.Вставить("НомерЛицензионнойКарточки", ТранспортноеСредство.НомерЛицензионнойКарточки);
	СтруктураПараметров.Вставить("СерияЛицензионнойКарточки", ТранспортноеСредство.СерияЛицензионнойКарточки);
	СтруктураПараметров.Вставить("НомерСерииЛицензионнойКарточки", ТранспортноеСредство.НомерСерииЛицензионнойКарточки);
	
	Если ЗначениеЗаполнено(ТранспортноеСредство.Колонна) Тогда
		СтруктураПараметров.Вставить("Колонна", ПрефиксацияОбъектовКлиентСервер.УдалитьЛидирующиеНулиИзНомераОбъекта(
			уатОбщегоНазначения.МестонахождениеТС(ТранспортноеСредство, ДатаФормирования).Колонна.Код));
	КонецЕсли;	
	
	Возврат СтруктураПараметров;

КонецФункции

// Формирует массив прицепов
//
Функция ПолучитьМассивПрицеповПЛ(ТекущийДокумент)
	
	МассивПрицепов = Новый Массив;
	
	Для Каждого ТекСтрока Из ТекущийДокумент.Прицепы Цикл 
		Если Текстрока.ТС.Модель.ВидМоделиТС = Перечисления.уатВидыМоделейТС.Прицеп Тогда
			МассивПрицепов.Добавить(ТекСтрока.ТС);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекЗадание из ТекущийДокумент.Задание Цикл
		Если ЗначениеЗаполнено(ТекЗадание.Прицеп1) И ТекЗадание.Прицеп1.Модель.ВидМоделиТС = Перечисления.уатВидыМоделейТС.Прицеп Тогда
			Прицеп = МассивПрицепов.Найти(ТекЗадание.Прицеп1);
			Если Прицеп = Неопределено Тогда
				МассивПрицепов.Добавить(ТекЗадание.Прицеп1);
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекЗадание.Прицеп2) И ТекЗадание.Прицеп2.Модель.ВидМоделиТС = Перечисления.уатВидыМоделейТС.Прицеп Тогда
			Прицеп = МассивПрицепов.Найти(ТекЗадание.Прицеп2);
			Если Прицеп = Неопределено Тогда
				МассивПрицепов.Добавить(ТекЗадание.Прицеп2);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат МассивПрицепов;  
	
КонецФункции

// Возвращает параметры прицепов
// 
Функция ПолучитьПараметрыПрицеповДляПечати(МассивПрицепов)
	
	СтруктураПараметров = Новый Структура();

	Для Индекс = 1 По МассивПрицепов.Количество() Цикл
		мПрицеп = МассивПрицепов[Индекс-1];
		Если мПрицеп.Модель.ВидМоделиТС = Перечисления.уатВидыМоделейТС.Прицеп Тогда
			СтруктураПараметров.Вставить("ПрицепМарка" + Индекс, мПрицеп.Марка);
			СтруктураПараметров.Вставить("ПрицепМодель"+ Индекс, уатОбщегоНазначения.уатПредставлениеМоделиТС(мПрицеп));
			СтруктураПараметров.Вставить("ПрицепТипТС"+ Индекс, мПрицеп.ТипТС);
			СтруктураПараметров.Вставить("ПрицепГосНомер"+ Индекс, мПрицеп.ГосударственныйНомер);
			СтруктураПараметров.Вставить("ПрицепГарНомер"+ Индекс, мПрицеп.ГаражныйНомер);
		КонецЕсли;	
	КонецЦикла;	
		
	Возврат СтруктураПараметров;

КонецФункции

// Возвращает параметры транспортного средства
// 
Функция ПолучитьСопрЛицДляПечати(Сотрудник1, Сотрудник2, Дата)
	
	СопровождающиеЛица = уатОбщегоНазначения.уатФИОСотрудникаПолноеСтрокой(Сотрудник1, Дата);
	Если ЗначениеЗаполнено(Сотрудник2) Тогда
		Возврат СокрЛП(СопровождающиеЛица) +  ", " + уатОбщегоНазначения.уатФИОСотрудникаПолноеСтрокой(Сотрудник2, Дата);
	Иначе
		Возврат СопровождающиеЛица;
	КонецЕсли;

КонецФункции

// Возвращает параметры ответственных лиц
// 
Функция ПолучитьОтветственныхДляПечати(ТекущийДокумент)
	
	ВыдалДиспетчер  = Справочники.Сотрудники.ПустаяСсылка();
	ПринялДиспетчер = Справочники.Сотрудники.ПустаяСсылка();
	Водитель1       = Справочники.Сотрудники.ПустаяСсылка();
	ВыпустилМеханик = Справочники.Сотрудники.ПустаяСсылка();
	ПринялМеханик   = Справочники.Сотрудники.ПустаяСсылка();
	ОсмотрелВрач        = Справочники.Сотрудники.ПустаяСсылка();
	ОсмотрелВрачВозврат = Справочники.Сотрудники.ПустаяСсылка();
	УполномоченныйНаПроставлениеОдометраПриВыезде   = Справочники.Сотрудники.ПустаяСсылка();
	УполномоченныйНаПроставлениеОдометраПриВозврате = Справочники.Сотрудники.ПустаяСсылка();

	Если ТипЗнч(ТекущийДокумент.ВыдалДиспетчер) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ВыдалДиспетчер      = ТекущийДокумент.ВыдалДиспетчер;
	ИначеЕсли ТипЗнч(ТекущийДокумент.ВыдалДиспетчер) = Тип("СправочникСсылка.Сотрудники") Тогда
		ВыдалДиспетчер      = ТекущийДокумент.ВыдалДиспетчер.ФизическоеЛицо;
	КонецЕсли;
	Если ТипЗнч(ТекущийДокумент.ПринялДиспетчер) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ПринялДиспетчер     = ТекущийДокумент.ПринялДиспетчер;
	ИначеЕсли ТипЗнч(ТекущийДокумент.ПринялДиспетчер) = Тип("СправочникСсылка.Сотрудники") Тогда
		ПринялДиспетчер     = ТекущийДокумент.ПринялДиспетчер.ФизическоеЛицо;
	КонецЕсли;
	Если ТипЗнч(ТекущийДокумент.Водитель1) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Водитель1           = ТекущийДокумент.Водитель1;
	ИначеЕсли ТипЗнч(ТекущийДокумент.Водитель1) = Тип("СправочникСсылка.Сотрудники") Тогда
		Водитель1           = ТекущийДокумент.Водитель1.ФизическоеЛицо;
	КонецЕсли; 
	Если ТипЗнч(ТекущийДокумент.ВыпустилМеханик) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ВыпустилМеханик     = ТекущийДокумент.ВыпустилМеханик;
	ИначеЕсли ТипЗнч(ТекущийДокумент.ВыпустилМеханик) = Тип("СправочникСсылка.Сотрудники") Тогда
		ВыпустилМеханик     = ТекущийДокумент.ВыпустилМеханик.ФизическоеЛицо;
	КонецЕсли;
	Если ТипЗнч(ТекущийДокумент.ПринялМеханик) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ПринялМеханик       = ТекущийДокумент.ПринялМеханик;
	ИначеЕсли ТипЗнч(ТекущийДокумент.ПринялМеханик) = Тип("СправочникСсылка.Сотрудники") Тогда
		ПринялМеханик       = ТекущийДокумент.ПринялМеханик.ФизическоеЛицо;
	КонецЕсли;
	Если ТипЗнч(ТекущийДокумент.МедработникВыезд) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ОсмотрелВрач        = ТекущийДокумент.МедработникВыезд;
	ИначеЕсли ТипЗнч(ТекущийДокумент.МедработникВыезд) = Тип("СправочникСсылка.Сотрудники") Тогда
		ОсмотрелВрач        = ТекущийДокумент.МедработникВыезд.ФизическоеЛицо;
	КонецЕсли;
	Если ТипЗнч(ТекущийДокумент.МедработникВозврат) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ОсмотрелВрачВозврат = ТекущийДокумент.МедработникВозврат;
	ИначеЕсли ТипЗнч(ТекущийДокумент.МедработникВозврат) = Тип("СправочникСсылка.Сотрудники") Тогда
		ОсмотрелВрачВозврат = ТекущийДокумент.МедработникВозврат.ФизическоеЛицо;
	КонецЕсли; 
	Если ТипЗнч(ТекущийДокумент.УполномоченныйНаПроставлениеОдометраПриВыезде) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		УполномоченныйНаПроставлениеОдометраПриВыезде = ТекущийДокумент.УполномоченныйНаПроставлениеОдометраПриВыезде;
	ИначеЕсли ТипЗнч(ТекущийДокумент.УполномоченныйНаПроставлениеОдометраПриВыезде) = Тип("СправочникСсылка.Сотрудники") Тогда
		УполномоченныйНаПроставлениеОдометраПриВыезде = ТекущийДокумент.УполномоченныйНаПроставлениеОдометраПриВыезде.ФизическоеЛицо;
	КонецЕсли;
	Если ТипЗнч(ТекущийДокумент.УполномоченныйНаПроставлениеОдометраПриВозврате) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		УполномоченныйНаПроставлениеОдометраПриВозврате = ТекущийДокумент.УполномоченныйНаПроставлениеОдометраПриВозврате;
	ИначеЕсли ТипЗнч(ТекущийДокумент.УполномоченныйНаПроставлениеОдометраПриВозврате) = Тип("СправочникСсылка.Сотрудники") Тогда
		УполномоченныйНаПроставлениеОдометраПриВозврате = ТекущийДокумент.УполномоченныйНаПроставлениеОдометраПриВозврате.ФизическоеЛицо;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ВыдалДиспетчер", 
		уатОбщегоНазначения.уатФИОСотрудникаПолноеСтрокой(ВыдалДиспетчер));
	СтруктураПараметров.Вставить("ПринялДиспетчер", 
		уатОбщегоНазначения.уатФИОСотрудникаПолноеСтрокой(ПринялДиспетчер));
	СтруктураПараметров.Вставить("ВодительПринял", 
		уатОбщегоНазначения.уатФИОСотрудникаПолноеСтрокой(Водитель1));
	СтруктураПараметров.Вставить("ВодительСдал", 
		уатОбщегоНазначения.уатФИОСотрудникаПолноеСтрокой(Водитель1));
	СтруктураПараметров.Вставить("ВыпустилМеханик", 
		уатОбщегоНазначения.уатФИОСотрудникаПолноеСтрокой(ВыпустилМеханик));
	СтруктураПараметров.Вставить("ПринялМеханик", 
		уатОбщегоНазначения.уатФИОСотрудникаПолноеСтрокой(ПринялМеханик));
	СтруктураПараметров.Вставить("ОсмотрелВрач", 
		уатОбщегоНазначения.уатФИОСотрудникаПолноеСтрокой(ОсмотрелВрач));
	СтруктураПараметров.Вставить("ОсмотрелВрачДолжность", 
		уатОбщегоНазначенияТиповые.ПолучитьДолжностьСотрудника(ТекущийДокумент.МедработникВыезд,,ТекущийДокумент.Медорганизация));
	СтруктураПараметров.Вставить("ОсмотрелВрачВозврат", 
		уатОбщегоНазначения.уатФИОСотрудникаПолноеСтрокой(ОсмотрелВрачВозврат)); 
	СтруктураПараметров.Вставить("ОсмотрелВрачВозвратДолжность", 
		уатОбщегоНазначенияТиповые.ПолучитьДолжностьСотрудника(ТекущийДокумент.МедработникВозврат,,ТекущийДокумент.Медорганизация));	
	СтруктураПараметров.Вставить("УполномоченныйНаПроставлениеОдометраПриВыезде", 
		уатОбщегоНазначения.уатФИОСотрудникаПолноеСтрокой(УполномоченныйНаПроставлениеОдометраПриВыезде));
	СтруктураПараметров.Вставить("УполномоченныйНаПроставлениеОдометраПриВозврате", 
		уатОбщегоНазначения.уатФИОСотрудникаПолноеСтрокой(УполномоченныйНаПроставлениеОдометраПриВозврате));
	
	Возврат СтруктураПараметров;

КонецФункции

// Возвращает параметры ответственных лиц
// 
Функция ПолучитьПараметрыМедосмотраДляПечати(ТекущийДокумент)
	
	МедработникВыезд   = ТекущийДокумент.МедработникВыезд;
	МедработникВозврат = ТекущийДокумент.МедработникВозврат;
	
	СтруктураЗаполнени = Новый Структура("ЛицензияСерия,ЛицензияНомер,ЛицензияДатаВыдачи,ЛицензияСрокОкончания,МедорганизацияНаименование");
	ЕстьЛицензия       = уатОбщегоНазначения.уатЛицензияМедорганизации(МедработникВыезд, СтруктураЗаполнени.ЛицензияСерия,
	СтруктураЗаполнени.ЛицензияНомер, СтруктураЗаполнени.ЛицензияДатаВыдачи, СтруктураЗаполнени.ЛицензияСрокОкончания, СтруктураЗаполнени.МедорганизацияНаименование);
	
	Если ЕстьЛицензия Тогда
		Если ЗначениеЗаполнено(СтруктураЗаполнени.МедорганизацияНаименование) Тогда
			ЛицензияМедосмотрВыезд = СтрШаблон(Нстр("ru = '%1, лицензия № %2 от %3, %4'"), СтруктураЗаполнени.МедорганизацияНаименование,
			?(ЗначениеЗаполнено(СтруктураЗаполнени.ЛицензияСерия), СтруктураЗаполнени.ЛицензияСерия + " ", "") + СтруктураЗаполнени.ЛицензияНомер,
			Формат(СтруктураЗаполнени.ЛицензияДатаВыдачи, "ДФ=dd.MM.yyyy"),
			?(ЗначениеЗаполнено(СтруктураЗаполнени.ЛицензияСрокОкончания),
			СтрШаблон(Нстр("ru = 'действует до %1'"), Формат(СтруктураЗаполнени.ЛицензияСрокОкончания, "ДФ=dd.MM.yyyy")),
			Нстр("ru = 'срок действия - бессрочно'"))); 
		Иначе
			ЛицензияМедосмотрВыезд = СтрШаблон(Нстр("ru = 'Лицензия № %1 от %2, %3'"),
			?(ЗначениеЗаполнено(СтруктураЗаполнени.ЛицензияСерия), СтруктураЗаполнени.ЛицензияСерия + " ", "") + СтруктураЗаполнени.ЛицензияНомер,
			Формат(СтруктураЗаполнени.ЛицензияДатаВыдачи, "ДФ=dd.MM.yyyy"),
			?(ЗначениеЗаполнено(СтруктураЗаполнени.ЛицензияСрокОкончания),
			СтрШаблон(Нстр("ru = 'действует до %1'"), Формат(СтруктураЗаполнени.ЛицензияСрокОкончания, "ДФ=dd.MM.yyyy")),
			Нстр("ru = 'срок действия - бессрочно'")));
		Конецесли;
	Иначе 
		ЛицензияМедосмотрВыезд = "";
	КонецЕсли;
	
	СтруктураЗаполнени = Новый Структура("ЛицензияСерия,ЛицензияНомер,ЛицензияДатаВыдачи,ЛицензияСрокОкончания,МедорганизацияНаименование");
	ЕстьЛицензия       = уатОбщегоНазначения.уатЛицензияМедорганизации(МедработникВозврат, СтруктураЗаполнени.ЛицензияСерия,
	СтруктураЗаполнени.ЛицензияНомер, СтруктураЗаполнени.ЛицензияДатаВыдачи, СтруктураЗаполнени.ЛицензияСрокОкончания, СтруктураЗаполнени.МедорганизацияНаименование);
	
	Если ЕстьЛицензия Тогда
		Если ЗначениеЗаполнено(СтруктураЗаполнени.МедорганизацияНаименование) Тогда
			ЛицензияМедосмотрВозврат = СтрШаблон(Нстр("ru = '%1, лицензия № %2 от %3, %4'"), СтруктураЗаполнени.МедорганизацияНаименование,
			?(ЗначениеЗаполнено(СтруктураЗаполнени.ЛицензияСерия), СтруктураЗаполнени.ЛицензияСерия + " ", "") + СтруктураЗаполнени.ЛицензияНомер,
			Формат(СтруктураЗаполнени.ЛицензияДатаВыдачи, "ДФ=dd.MM.yyyy"),
			?(ЗначениеЗаполнено(СтруктураЗаполнени.ЛицензияСрокОкончания),
			СтрШаблон(Нстр("ru = 'действует до %1'"), Формат(СтруктураЗаполнени.ЛицензияСрокОкончания, "ДФ=dd.MM.yyyy")),
			Нстр("ru = 'срок действия - бессрочно'"))); 
		Иначе
			ЛицензияМедосмотрВозврат = СтрШаблон(Нстр("ru = 'Лицензия № %1 от %2, %3'"),
			?(ЗначениеЗаполнено(СтруктураЗаполнени.ЛицензияСерия), СтруктураЗаполнени.ЛицензияСерия + " ", "") + СтруктураЗаполнени.ЛицензияНомер,
			Формат(СтруктураЗаполнени.ЛицензияДатаВыдачи, "ДФ=dd.MM.yyyy"),
			?(ЗначениеЗаполнено(СтруктураЗаполнени.ЛицензияСрокОкончания),
			СтрШаблон(Нстр("ru = 'действует до %1'"), Формат(СтруктураЗаполнени.ЛицензияСрокОкончания, "ДФ=dd.MM.yyyy")),
			Нстр("ru = 'срок действия - бессрочно'")));
		Конецесли;
	Иначе 
		ЛицензияМедосмотрВозврат = "";
	КонецЕсли;
		
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ЛицензияМедосмотрВыезд",   ЛицензияМедосмотрВыезд);
	СтруктураПараметров.Вставить("ЛицензияМедосмотрВозврат", ЛицензияМедосмотрВозврат);
	Возврат СтруктураПараметров;

КонецФункции
 
// Возвращает параметры контрагента
// 
Функция ПолучитьПараметрыЗаказчикаДляПечати(Контрагент, ДатаФормирования = Неопределено)
	
	ДанныеКонтрагента = уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(Контрагент, ДатаФормирования);
	ДанныеЗаполнения = ?(ЗначениеЗаполнено(ДанныеКонтрагента.ПолноеНаименование), ДанныеКонтрагента.ПолноеНаименование, Строка(Контрагент))
	+ ?(ЗначениеЗаполнено(ДанныеКонтрагента.ЮридическийАдрес), ", " + ДанныеКонтрагента.ЮридическийАдрес, "")
	+ ?(ЗначениеЗаполнено(ДанныеКонтрагента.Телефоны), ", " + ДанныеКонтрагента.Телефоны, "");

	СписокТребуемыхПараметров	= "НаименованиеДляПечатныхФорм,ЮридическийАдрес,Телефоны";
	СведенияОбОбъекте			= уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(Контрагент, ТекущаяДата());
	ДанныеЗаполнения			= уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(СведенияОбОбъекте, СписокТребуемыхПараметров);
		
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("Заказчик", ДанныеЗаполнения);
	СтруктураПараметров.Вставить("ЗаказчикРасшифровка", Контрагент);
	СтруктураПараметров.Вставить("ЗаказчикКодПоОКПО", Контрагент.КодПоОКПО);
	
	
	Возврат СтруктураПараметров;

КонецФункции

// Возвращает параметры ответственных лиц
// 
Функция ПолучитьПараметрыГСМДляПечати(ТекущийДокумент, ФлагПечати = 5)

	СтруктураПараметров = Новый Структура();
	Если ТекущийДокумент.ВыдатьКоличествоГорючего > 0 Тогда
		СтруктураПараметров.Вставить("ВыдатьГорючее", ТекущийДокумент.ВыдатьГорючее);
		СтруктураПараметров.Вставить("ВыдатьКоличествоГорючего", ТекущийДокумент.ВыдатьКоличествоГорючего);
	КонецЕсли;	
	
	// движение горючего
	Для Каждого ТекСтрока из ТекущийДокумент.РасходГСМ Цикл
		Если ТекСтрока.ТС = ТекущийДокумент.ТранспортноеСредство Тогда
			Если ТекСтрока.ГСМ = ТекСтрока.ТС.Модель.ОсновноеТопливо Тогда
				СтруктураПараметров.Вставить("ГСМ1", ?(СтрДлина(ТекСтрока.ГСМ) >= 20, Лев(ТекСтрока.ГСМ, 20), ТекСтрока.ГСМ));
				СтруктураПараметров.Вставить("ОстатокПриВыезде1", ТекСтрока.ОстатокПриВыезде);
				СтруктураПараметров.Вставить("ВыданоГСМ1", ТекСтрока.Выдано);
				Если ФлагПечати = 5 Или ФлагПечати = 4  Тогда
					СтруктураПараметров.Вставить("ОстатокПриВозвращении1", ТекСтрока.ОстатокПриВозвращении);
					СтруктураПараметров.Вставить("СданоГСМ1", ТекСтрока.Сдано);
					СтруктураПараметров.Вставить("РасходПоНорме1", ТекСтрока.РасходПоНорме);
					СтруктураПараметров.Вставить("РасходПоФакту1", ТекСтрока.РасходПоФакту);
					ЭкономияПережог = ТекСтрока.РасходПоНорме - ТекСтрока.РасходПоФакту;
					Если ЭкономияПережог < 0 Тогда
						СтруктураПараметров.Вставить("Перерасход1", ЭкономияПережог *(-1));
					ИначеЕсли ЭкономияПережог > 0 Тогда
						СтруктураПараметров.Вставить("Экономия1", ЭкономияПережог);
					Иначе
						СтруктураПараметров.Вставить("Экономия1", ЭкономияПережог);
						СтруктураПараметров.Вставить("Перерасход1", ЭкономияПережог);
					КонецЕсли;
				КонецЕсли;
			ИначеЕсли ТекСтрока.ГСМ = ТекСтрока.ТС.Модель.ДополнительноеТопливо Тогда
				ГруппаГСМ = уатОбщегоНазначения.уатПрочитатьРеквизитГСМ(ТекСтрока.ГСМ,"ГруппаГСМ");
				Если ГруппаГСМ = Перечисления.уатГруппыГСМ.Топливо Тогда  
					СтруктураПараметров.Вставить("ГСМ2", ?(СтрДлина(ТекСтрока.ГСМ) >= 20, Лев(ТекСтрока.ГСМ, 20), ТекСтрока.ГСМ));
					СтруктураПараметров.Вставить("ОстатокПриВыезде2", ТекСтрока.ОстатокПриВыезде);
					СтруктураПараметров.Вставить("ВыданоГСМ2", ТекСтрока.Выдано);
					Если ФлагПечати = 5 Или ФлагПечати = 4  Тогда
						СтруктураПараметров.Вставить("ОстатокПриВозвращении2", ТекСтрока.ОстатокПриВозвращении);
						СтруктураПараметров.Вставить("СданоГСМ2", ТекСтрока.Сдано);
						СтруктураПараметров.Вставить("РасходПоНорме2", ТекСтрока.РасходПоНорме);
						СтруктураПараметров.Вставить("РасходПоФакту2", ТекСтрока.РасходПоФакту);
						ЭкономияПережог = ТекСтрока.РасходПоНорме - ТекСтрока.РасходПоФакту;
						Если ЭкономияПережог < 0 Тогда
							СтруктураПараметров.Вставить("Перерасход2", ЭкономияПережог *(-1));
						ИначеЕсли ЭкономияПережог > 0 Тогда
							СтруктураПараметров.Вставить("Экономия2", ЭкономияПережог);
						Иначе
							СтруктураПараметров.Вставить("Экономия2", ЭкономияПережог);
							СтруктураПараметров.Вставить("Перерасход2", ЭкономияПережог);
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла; 
	
	Возврат СтруктураПараметров;
	
КонецФункции

// Процедура - Заполнить структуру получателей печатных форм
//
// Параметры:
//  СтруктураДанныхОбъектаПечати - Структура - Структура данных получателей печатной формы
//
Процедура ЗаполнитьСтруктуруПолучателейПечатныхФорм(СтруктураДанныхОбъектаПечати) Экспорт
	
	СтруктураДанныхОбъектаПечати.ОсновнойПолучатель = "Контрагент";
	 
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Контрагент");
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("КонтактноеЛицо");
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Грузоотправитель");
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Грузополучатель");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	Настройки.ПриПолученииСлужебныхРеквизитов = Ложь;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	// необходима для подключения внешних ПФ
	Заглушка = Истина;
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.УправлениеДоступом

// Позволяет переопределить ограничение, указанное в модуле менеджера объекта метаданных.
//
// Параметры:
//  Ограничение - Структура:
//    * Текст                             - Строка - ограничение доступа для пользователей.
//                                          Если пустая строка, значит, доступ разрешен.
//    * ТекстДляВнешнихПользователей      - Строка - ограничение доступа для внешних пользователей.
//                                          Если пустая строка, значит, доступ запрещен.
//    * ПоВладельцуБезЗаписиКлючейДоступа - Неопределено - определить автоматически.
//                                        - Булево - если Ложь, то всегда записывать ключи доступа,
//                                          если Истина, тогда не записывать ключи доступа,
//                                          а использовать ключи доступа владельца (требуется,
//                                          чтобы ограничение было строго по объекту-владельцу).
//   * ПоВладельцуБезЗаписиКлючейДоступаДляВнешнихПользователей - Неопределено, Булево - также
//                                          как у параметра ПоВладельцуБезЗаписиКлючейДоступа.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Подразделение)";
	
	Ограничение.ТекстДляВнешнихПользователей = Ограничение.Текст;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	СформироватьТаблицуАгрегатыТС(ДокументСсылка, СтруктураДополнительныеСвойства);
	СформироватьТаблицуОстаткиАгрегатов(ДокументСсылка, СтруктураДополнительныеСвойства);
	СформироватьТаблицуИзносПробегШин(ДокументСсылка, СтруктураДополнительныеСвойства);
КонецПроцедуры // ИнициализироватьДанныеДокумента()

Процедура ВыполнитьКонтроль(ДокументСсылка, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь) Экспорт
	
	Заголовок = уатОбщегоНазначенияТиповые.уатПредставлениеДокументаПриПроведении(ДокументСсылка);
	
	Если НЕ УдалениеПроведения Тогда
		мЗапрос = Новый Запрос;
		мЗапрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатВводНачальныхДанныхПоАгрегатам.СерияНоменклатуры,
		|	уатВводНачальныхДанныхПоАгрегатам.ТС,
		|	уатВводНачальныхДанныхПоАгрегатам.МестоУстановки,
		|	уатВводНачальныхДанныхПоАгрегатам.Состояние
		|ПОМЕСТИТЬ АгрегатыДокумента
		|ИЗ
		|	Документ.уатВводНачальныхДанныхПоАгрегатам.Шины КАК уатВводНачальныхДанныхПоАгрегатам
		|ГДЕ
		|	уатВводНачальныхДанныхПоАгрегатам.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	уатВводНачальныхДанныхПоАгрегатам.СерияНоменклатуры,
		|	уатВводНачальныхДанныхПоАгрегатам.ТС,
		|	NULL,
		|	уатВводНачальныхДанныхПоАгрегатам.Состояние
		|ИЗ
		|	Документ.уатВводНачальныхДанныхПоАгрегатам.Аккумуляторы КАК уатВводНачальныхДанныхПоАгрегатам
		|ГДЕ
		|	уатВводНачальныхДанныхПоАгрегатам.Ссылка = &Ссылка
		|		
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	уатВводНачальныхДанныхПоАгрегатам.СерияНоменклатуры,
		|	уатВводНачальныхДанныхПоАгрегатам.ТС,
		|	NULL,
		|	ЗНАЧЕНИЕ(Перечисление.уатСостоянияАгрегатов.УстановленоВРаботе)
		|ИЗ
		|	Документ.уатВводНачальныхДанныхПоАгрегатам.ПрочиеАгрегаты КАК уатВводНачальныхДанныхПоАгрегатам
		|ГДЕ
		|	уатВводНачальныхДанныхПоАгрегатам.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	АгрегатыДокумента.СерияНоменклатуры,
		|	уатОстаткиАгрегатовОстатки.Склад,
		|	уатАгрегатыТССрезПоследних.ТС,
		|	уатАгрегатыТССрезПоследних.МестоУстановки
		|ИЗ
		|	АгрегатыДокумента КАК АгрегатыДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.уатОстаткиАгрегатов.Остатки(&МоментВремени, ) КАК уатОстаткиАгрегатовОстатки
		|		ПО АгрегатыДокумента.СерияНоменклатуры = уатОстаткиАгрегатовОстатки.СерияНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатАгрегатыТС.СрезПоследних(&МоментВремени, ) КАК уатАгрегатыТССрезПоследних
		|		ПО АгрегатыДокумента.СерияНоменклатуры = уатАгрегатыТССрезПоследних.СерияНоменклатуры
		|ГДЕ
		|	(НЕ уатОстаткиАгрегатовОстатки.Склад ЕСТЬ NULL 
		|			ИЛИ НЕ уатАгрегатыТССрезПоследних.СерияНоменклатуры ЕСТЬ NULL )
		|	И уатАгрегатыТССрезПоследних.СостояниеАгрегата <> ЗНАЧЕНИЕ(Перечисление.уатСостоянияАгрегатов.Снято)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	АгрегатыДокумента.СерияНоменклатуры,
		|	уатАгрегатыТССрезПоследних.СерияНоменклатуры КАК СерияНоменклатурыСрез,
		|	уатАгрегатыТССрезПоследних.ТС,
		|	уатАгрегатыТССрезПоследних.МестоУстановки,
		|	уатАгрегатыТССрезПоследних.СостояниеАгрегата
		|ИЗ
		|	АгрегатыДокумента КАК АгрегатыДокумента
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатАгрегатыТС.СрезПоследних(&МоментВремени, ) КАК уатАгрегатыТССрезПоследних
		|		ПО АгрегатыДокумента.ТС = уатАгрегатыТССрезПоследних.ТС
		|			И (ЕСТЬNULL(АгрегатыДокумента.МестоУстановки, ЗНАЧЕНИЕ(Справочник.уатМестаУстановкиШин.ПустаяСсылка)) = уатАгрегатыТССрезПоследних.МестоУстановки)
		|			И АгрегатыДокумента.СерияНоменклатуры.ТипАгрегата = уатАгрегатыТССрезПоследних.СерияНоменклатуры.ТипАгрегата
		|			И АгрегатыДокумента.СерияНоменклатуры <> уатАгрегатыТССрезПоследних.СерияНоменклатуры
		|ГДЕ
		|	НЕ уатАгрегатыТССрезПоследних.СерияНоменклатуры ЕСТЬ NULL 
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	АгрегатыДокумента.СерияНоменклатуры КАК СерияНоменклатуры
		|ИЗ
		|	АгрегатыДокумента КАК АгрегатыДокумента
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ (ВЫБРАТЬ РАЗЛИЧНЫЕ
		|			уатАгрегатыТС.СерияНоменклатуры КАК СерияНоменклатуры
		|		ИЗ
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				уатАгрегатыТС.СерияНоменклатуры КАК СерияНоменклатуры
		|			ИЗ
		|				РегистрСведений.уатАгрегатыТС КАК уатАгрегатыТС
		|			ГДЕ
		|				уатАгрегатыТС.Период < &ДатаСреза
		|			
		|			ОБЪЕДИНИТЬ ВСЕ
		|			
		|			ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				уатОстаткиАгрегатовОбороты.СерияНоменклатуры
		|			ИЗ
		|				РегистрНакопления.уатОстаткиАгрегатов.Обороты(, &МоментВремени, , ) КАК уатОстаткиАгрегатовОбороты) КАК уатАгрегатыТС) КАК тблВлож
		|		ПО АгрегатыДокумента.СерияНоменклатуры = тблВлож.СерияНоменклатуры
		|
		|СГРУППИРОВАТЬ ПО
		|	АгрегатыДокумента.СерияНоменклатуры";
		
		мЗапрос.УстановитьПараметр("Ссылка", ДокументСсылка);
		мЗапрос.УстановитьПараметр("МоментВремени", Новый Граница(ДокументСсылка.Дата, ВидГраницы.Исключая));
		мЗапрос.УстановитьПараметр("ДатаСреза", ДокументСсылка.Дата);
		
		МассивРезультатов = мЗапрос.ВыполнитьПакет();
		
		// Запрещаем ввод остатков, если агрегат уже назначался на какое-либо ТС или уже был на складе
		Если НЕ Отказ Тогда
			ВыборкаКонтроля = МассивРезультатов[3].Выбрать();
			Пока ВыборкаКонтроля.Следующий() Цикл
				Если ВыборкаКонтроля.СерияНоменклатуры.ТипАгрегата = Справочники.уатТипыАгрегатов.Шина Тогда
					ТекстНСТР = НСтр("en='Tire ""%1"" (%2) already carried out following operations: installation on vehicle, removal from vehicle, warehouse operations';ru='По шине ""%1"" (%2) уже выполнялись следующие операции: установка на ТС, снятие с ТС, складские операции'");
				ИначеЕсли ВыборкаКонтроля.СерияНоменклатуры.ТипАгрегата = Справочники.уатТипыАгрегатов.Аккумулятор Тогда
					ТекстНСТР = НСтр("en='For battery ""%1"" (%2) already carried out the following operations: installation on vehicle, removal from vehicle, warehouse operations';ru='По аккумулятору ""%1"" (%2) уже выполнялись следующие операции: установка на ТС, снятие с ТС, складские операции'");
				Иначе
					ТекстНСТР = НСтр("en='By car part ""%1"" (%2) already carried out the following operations: installation on vehicle, removal from vehicle, warehouse operations';ru='По агрегату ""%1"" (%2) уже выполнялись следующие операции: установка на ТС, снятие с ТС, складские операции'");
				КонецЕсли;
				ТекстНСТР = СтрШаблон(ТекстНСТР, ВыборкаКонтроля.СерияНоменклатуры.СерийныйНомер, ВыборкаКонтроля.СерияНоменклатуры.Модель);
						
				уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, Отказ, Заголовок);
			КонецЦикла;
		КонецЕсли;
		
		// Проверка на повторное поступление агрегата на склад или повторную установку агрегата на тоже самое ТС
		Если НЕ Отказ Тогда
			ВыборкаКонтроля = МассивРезультатов[1].Выбрать();
			Пока ВыборкаКонтроля.Следующий() Цикл
				Если ДокументСсылка.ВидОперации = Перечисления.уатВидыОперацийВводОстатковПоАгрегатам.ВводОстатковПоСкладу И ЗначениеЗаполнено(ВыборкаКонтроля.Склад) Тогда
					Если ВыборкаКонтроля.СерияНоменклатуры.ТипАгрегата = Справочники.уатТипыАгрегатов.Аккумулятор тогда
						ТекстНСТР = НСтр("en='Battery ""%1"" (%2) already exists at warehouse ""%3""';ru='Аккумулятор ""%1"" (%2) уже имеется на складе ""%3""'");
					ИначеЕсли ВыборкаКонтроля.СерияНоменклатуры.ТипАгрегата = Справочники.уатТипыАгрегатов.Шина тогда
						ТекстНСТР = НСтр("en='Tire ""%1"" (%2) already exists at warehouse ""%3""';ru='Шина ""%1"" (%2) уже имеется на складе ""%3""'");
					Иначе
						ТекстНСТР = НСтр("en='Car part ""%1"" (%2) already exists at warehouse ""%3""';ru='Агрегат ""%1"" (%2) уже имеется на складе ""%3""'");
					КонецЕсли;
					ТекстНСТР = СтрШаблон(ТекстНСТР, ВыборкаКонтроля.СерияНоменклатуры.СерийныйНомер,
						ВыборкаКонтроля.СерияНоменклатуры.Модель, ВыборкаКонтроля.Склад);
						
					уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, Отказ, Заголовок);	
					
				ИначеЕсли ДокументСсылка.ВидОперации = Перечисления.уатВидыОперацийВводОстатковПоАгрегатам.УстановкаНаТС И ЗначениеЗаполнено(ВыборкаКонтроля.ТС) Тогда
					Если ВыборкаКонтроля.СерияНоменклатуры.ТипАгрегата = Справочники.уатТипыАгрегатов.Аккумулятор тогда
						ТекстНСТР = НСтр("en='Battery ""%1"" (%2) is already installed on the vehicle ""%3""';ru='Аккумулятор ""%1"" (%2) уже установлен на ТС ""%3""'");
					ИначеЕсли ВыборкаКонтроля.СерияНоменклатуры.ТипАгрегата = Справочники.уатТипыАгрегатов.Шина тогда
						ТекстНСТР = НСтр("en='Tire ""%1"" (%2) is already installed on vehicle ""%3""';ru='Шина ""%1"" (%2) уже установлена на ТС ""%3""'");
					Иначе
						ТекстНСТР = НСтр("en='Car part ""%1"" (%2) is already installed on vehicle ""%3""';ru='Агрегат ""%1"" (%2) уже установлен на ТС ""%3""'");
					КонецЕсли;
					ТекстНСТР = СтрШаблон(ТекстНСТР, ВыборкаКонтроля.СерияНоменклатуры.СерийныйНомер,
						ВыборкаКонтроля.СерияНоменклатуры.Модель, Строка(ВыборкаКонтроля.ТС));
						
					уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, Отказ, Заголовок);
					
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// Проверка на установку агрегата на уже занятое место установки
		// здесь просто сообщаем об этом, но не отменяем проведение
		Если НЕ Отказ Тогда
			ВыборкаКонтроля = МассивРезультатов[2].Выбрать();
			Пока ВыборкаКонтроля.Следующий() Цикл
				Если ВыборкаКонтроля.СостояниеАгрегата = Перечисления.уатСостоянияАгрегатов.Снято
					ИЛИ (ВыборкаКонтроля.СерияНоменклатуры.ТипАгрегата <> Справочники.уатТипыАгрегатов.Шина
					И ВыборкаКонтроля.СерияНоменклатуры.ТипАгрегата <> Справочники.уатТипыАгрегатов.Аккумулятор) Тогда
					Продолжить;
				КонецЕсли;
				
				ПредставлениеТС = Строка(ВыборкаКонтроля.ТС);
				Если ВыборкаКонтроля.СерияНоменклатуры.ТипАгрегата = Справочники.уатТипыАгрегатов.Шина Тогда
					ТекстНСТР = НСтр("en='Tire ""%1"" is replaced by ""%2"" is already occupied by tire ""%3"", vehicle ""%4"" !';ru='Шина ""%1"" установлена на место ""%2"", уже занятое шиной ""%3"", ТС ""%4"" !'");
					ТекстНСТР = СтрШаблон(ТекстНСТР, ВыборкаКонтроля.СерияНоменклатуры.СерийныйНомер, СокрЛП(ВыборкаКонтроля.МестоУстановки),
						ВыборкаКонтроля.СерияНоменклатурыСрез.СерийныйНомер, ПредставлениеТС);
						
				ИначеЕсли ВыборкаКонтроля.СерияНоменклатуры.ТипАгрегата = Справочники.уатТипыАгрегатов.Аккумулятор Тогда
					ТекстНСТР = НСтр("en='Battery ""%1"" installed on vehicle ""%2"" is already occupied by battery ""%3"" !';ru='Аккумулятор ""%1"" установлен на ТС ""%2"", уже занятое аккумулятором ""%3"" !'");
					ТекстНСТР = СтрШаблон(ТекстНСТР, ВыборкаКонтроля.СерияНоменклатуры.СерийныйНомер,
						ПредставлениеТС, ВыборкаКонтроля.СерияНоменклатурыСрез.СерийныйНомер);
						
				КонецЕсли;
				уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР,,, СтатусСообщения.Информация);	
				
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицуАгрегатыТС(ДокументСсылка, СтруктураДополнительныеСвойства)
	тблАгрегатыТС = Новый ТаблицаЗначений;
	тблАгрегатыТС.Колонки.Добавить("Регистратор");
	тблАгрегатыТС.Колонки.Добавить("Период");
	тблАгрегатыТС.Колонки.Добавить("СерияНоменклатуры");
	тблАгрегатыТС.Колонки.Добавить("ТС");
	тблАгрегатыТС.Колонки.Добавить("СостояниеАгрегата");
	тблАгрегатыТС.Колонки.Добавить("МестоУстановки");
	тблАгрегатыТС.Колонки.Добавить("МОЛ");
	
	Для Каждого ТекСтрока Из ДокументСсылка.Шины Цикл
		НоваяСтрока = тблАгрегатыТС.Добавить();
		НоваяСтрока.Регистратор = ДокументСсылка;
		НоваяСтрока.Период = ДокументСсылка.Дата;
		НоваяСтрока.СерияНоменклатуры = ТекСтрока.СерияНоменклатуры;
		Если ТекСтрока.Состояние <> Перечисления.уатСостоянияАгрегатов.Снято Тогда
			НоваяСтрока.МОЛ = ДокументСсылка.МОЛ;
		КонецЕсли;
		НоваяСтрока.ТС = ТекСтрока.ТС;
		НоваяСтрока.СостояниеАгрегата = ТекСтрока.Состояние;
		НоваяСтрока.МестоУстановки = ТекСтрока.МестоУстановки;
	КонецЦикла;
	Для Каждого ТекСтрока Из ДокументСсылка.Аккумуляторы Цикл
		НоваяСтрока = тблАгрегатыТС.Добавить();
		НоваяСтрока.Регистратор = ДокументСсылка;
		НоваяСтрока.Период = ДокументСсылка.Дата;
		НоваяСтрока.СерияНоменклатуры = ТекСтрока.СерияНоменклатуры;
		Если ТекСтрока.Состояние <> Перечисления.уатСостоянияАгрегатов.Снято Тогда
			НоваяСтрока.МОЛ = ДокументСсылка.МОЛ;
		КонецЕсли;
		НоваяСтрока.ТС = ТекСтрока.ТС;
		НоваяСтрока.СостояниеАгрегата = ТекСтрока.Состояние;
	КонецЦикла;
	Для Каждого ТекСтрока Из ДокументСсылка.ПрочиеАгрегаты Цикл
		НоваяСтрока = тблАгрегатыТС.Добавить();
		НоваяСтрока.Регистратор       = ДокументСсылка;
		НоваяСтрока.Период            = ДокументСсылка.Дата;
		НоваяСтрока.СерияНоменклатуры = ТекСтрока.СерияНоменклатуры;
		НоваяСтрока.МОЛ               = ДокументСсылка.МОЛ;
		НоваяСтрока.ТС                = ТекСтрока.ТС;
		НоваяСтрока.СостояниеАгрегата = Перечисления.уатСостоянияАгрегатов.УстановленоВРаботе;
	КонецЦикла;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаАгрегатовТС", тблАгрегатыТС);
КонецПроцедуры // СформироватьТаблицуАгрегатыТС()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицуОстаткиАгрегатов(ДокументСсылка, СтруктураДополнительныеСвойства)
	тблОстаткиАгрегатов = Новый ТаблицаЗначений;
	тблОстаткиАгрегатов.Колонки.Добавить("Регистратор");
	тблОстаткиАгрегатов.Колонки.Добавить("Период");
	тблОстаткиАгрегатов.Колонки.Добавить("Склад");
	тблОстаткиАгрегатов.Колонки.Добавить("СерияНоменклатуры");
	тблОстаткиАгрегатов.Колонки.Добавить("Количество");
	тблОстаткиАгрегатов.Колонки.Добавить("МОЛ");
	
	Для Каждого ТекСтрока Из ДокументСсылка.Шины Цикл
		НоваяСтрока = тблОстаткиАгрегатов.Добавить();
		НоваяСтрока.Регистратор = ДокументСсылка;
		НоваяСтрока.Период = ДокументСсылка.Дата;
		НоваяСтрока.СерияНоменклатуры = ТекСтрока.СерияНоменклатуры;
		НоваяСтрока.МОЛ = ДокументСсылка.МОЛ;
		НоваяСтрока.Склад = ДокументСсылка.Склад;
		НоваяСтрока.Количество = 1;
	КонецЦикла;
	Для Каждого ТекСтрока Из ДокументСсылка.Аккумуляторы Цикл
		НоваяСтрока = тблОстаткиАгрегатов.Добавить();
		НоваяСтрока.Регистратор = ДокументСсылка;
		НоваяСтрока.Период = ДокументСсылка.Дата;
		НоваяСтрока.СерияНоменклатуры = ТекСтрока.СерияНоменклатуры;
		НоваяСтрока.МОЛ = ДокументСсылка.МОЛ;
		НоваяСтрока.Склад = ДокументСсылка.Склад;
		НоваяСтрока.Количество = 1;
	КонецЦикла;
	Для Каждого ТекСтрока Из ДокументСсылка.ПрочиеАгрегаты Цикл
		НоваяСтрока = тблОстаткиАгрегатов.Добавить();
		НоваяСтрока.Регистратор       = ДокументСсылка;
		НоваяСтрока.Период            = ДокументСсылка.Дата;
		НоваяСтрока.СерияНоменклатуры = ТекСтрока.СерияНоменклатуры;
		НоваяСтрока.МОЛ               = ДокументСсылка.МОЛ;
		НоваяСтрока.Склад             = ДокументСсылка.Склад;
		НоваяСтрока.Количество        = 1;
	КонецЦикла;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаОстатковАгрегатов", тблОстаткиАгрегатов);
КонецПроцедуры // СформироватьТаблицуОстаткиАгрегатов()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицуИзносПробегШин(ДокументСсылка, СтруктураДополнительныеСвойства)
	тблИзносПробегШин = Новый ТаблицаЗначений;
	тблИзносПробегШин.Колонки.Добавить("Регистратор");
	тблИзносПробегШин.Колонки.Добавить("Период");
	тблИзносПробегШин.Колонки.Добавить("ТС");
	тблИзносПробегШин.Колонки.Добавить("СерияНоменклатуры");
	тблИзносПробегШин.Колонки.Добавить("Организация");
	тблИзносПробегШин.Колонки.Добавить("Пробег");
	тблИзносПробегШин.Колонки.Добавить("Износ");
	
	Для Каждого ТекСтрока Из ДокументСсылка.Шины Цикл
		Если ТекСтрока.Пробег = 0 И ТекСтрока.Износ = 0 Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = тблИзносПробегШин.Добавить();
		НоваяСтрока.Регистратор = ДокументСсылка;
		НоваяСтрока.Период = ДокументСсылка.Дата;
		НоваяСтрока.ТС = ТекСтрока.ТС;
		НоваяСтрока.СерияНоменклатуры = ТекСтрока.СерияНоменклатуры;
		НоваяСтрока.Организация = ДокументСсылка.Организация;
		НоваяСтрока.Износ = ТекСтрока.Износ;
		НоваяСтрока.Пробег = ТекСтрока.Пробег;
	КонецЦикла;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаИзносаПробегаШин", тблИзносПробегШин);
КонецПроцедуры // СформироватьТаблицуИзносПробегШин()

#КонецОбласти

#КонецЕсли
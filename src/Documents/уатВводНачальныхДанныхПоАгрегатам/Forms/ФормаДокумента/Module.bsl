
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	уатЗащищенныеФункцииСервер.уатДокументФормаЭлементаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, Объект, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// Установка реквизитов формы.
	Если Объект.Ссылка.Пустая() И НЕ ЗначениеЗаполнено(Объект.ВидОперации) Тогда
		Объект.ВидОперации = Перечисления.уатВидыОперацийВводОстатковПоАгрегатам.УстановкаНаТС;
	КонецЕсли;
	
	ВалютаРасчетовКурсКратность    = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, 
												Новый Структура("Валюта", Объект.ВалютаДокумента));
	КурсВзаиморасчетов      = ?(ВалютаРасчетовКурсКратность.Курс = 0, 1, ВалютаРасчетовКурсКратность.Курс);
	КратностьВзаиморасчетов = ВалютаРасчетовКурсКратность.Кратность;
	
	ВывестиСуммовыеИтогиДокумента();
	
	уатОбщегоНазначенияСервер.НастроитьПолеПодразделение(Элементы.Подразделение, "Объект.Организация");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	уатЗащищенныеФункцииКлиент.уатДокументФормаЭлементаПриОткрытии(Отказ, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УстановитьВидимость();
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ВывестиСуммовыеИтогиДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ВывестиСуммовыеИтогиДокумента();
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Перем Команда;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		ВыбранноеЗначение.Свойство("Команда", Команда);
		
		Если Команда = "ПодборВТабличнуюЧастьШины" Тогда
			ОбработкаПодбора("Шины", ВыбранноеЗначение);
		ИначеЕсли Команда = "ПодборВТабличнуюЧастьАккумуляторы" Тогда
			ОбработкаПодбора("Аккумуляторы", ВыбранноеЗначение);
		ИначеЕсли Команда = "ПодборВТабличнуюЧастьПрочиеАгрегаты" Тогда
			ОбработкаПодбора("ПрочиеАгрегаты",ВыбранноеЗначение)	
		КонецЕсли;
	КонецЕсли;
	Модифицированность = Истина;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	Если Объект.ВидОперации = 
				ПредопределенноеЗначение("Перечисление.уатВидыОперацийВводОстатковПоАгрегатам.ВводОстатковПоСкладу") Тогда
		Для Каждого ТекСтрока ИЗ Объект.Шины Цикл
			ТекСтрока.ТС = ПредопределенноеЗначение("Справочник.уатТС.ПустаяСсылка");
		КонецЦикла;
		Для Каждого ТекСтрока ИЗ Объект.Аккумуляторы Цикл
			ТекСтрока.ТС = ПредопределенноеЗначение("Справочник.уатТС.ПустаяСсылка");
		КонецЦикла;
		Для Каждого ТекСтрока ИЗ Объект.ПрочиеАгрегаты Цикл
			ТекСтрока.ТС = ПредопределенноеЗначение("Справочник.уатТС.ПустаяСсылка");
		КонецЦикла;
	Иначе
		Если ЗначениеЗаполнено(Объект.Склад) Тогда
			Объект.Склад = ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
		КонецЕсли;
	КонецЕсли;
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_Шины

&НаКлиенте
Процедура ШиныПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.Состояние = ПредопределенноеЗначение("Перечисление.уатСостоянияАгрегатов.УстановленоВРаботе");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ШиныСерияНоменклатурыПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Шины.ТекущиеДанные;
	СтруктураДанные = ПолучитьДанныеСерияНоменклатурыПриИзменении(СтрокаТабличнойЧасти.СерияНоменклатуры, Объект.ВалютаДокумента, Объект.Дата);
	СтрокаТабличнойЧасти.Цена = СтруктураДанные.ПервоначальнаяСтоимость;
КонецПроцедуры

&НаКлиенте
Процедура ШиныТСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтруктураОтбор = Новый Структура("Организация", Объект.Организация);
	уатИнтерфейсВводаТС.РеквизитТСНачалоВыбора(Элемент, Элементы.Шины.ТекущиеДанные.ТС, ДанныеВыбора, СтандартнаяОбработка, СтруктураОтбор);
КонецПроцедуры

&НаКлиенте
Процедура ШиныТСАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СтруктураОтбор = Новый Структура("Организация", Объект.Организация);
	уатИнтерфейсВводаТС.РеквизитТСАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка, СтруктураОтбор);
КонецПроцедуры

&НаКлиенте
Процедура ШиныТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтруктураОтбор = Новый Структура("Организация", Объект.Организация);
	уатИнтерфейсВводаТС.РеквизитТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка, СтруктураОтбор);
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораШиныНаСервере(ВыбранноеЗначение)
	
	Для Каждого ТекЭлем Из ВыбранноеЗначение Цикл
		НовСтрока = Объект.Шины.Добавить();
		НовСтрока.СерияНоменклатуры = ТекЭлем.Значение;
		НовСтрока.Цена         = ТекЭлем.Значение.ПервоначальнаяСтоимость;
	КонецЦикла;
	
	ВывестиСуммовыеИтогиДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ШиныОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СписокЗначений") Тогда
		СтандартнаяОбработка = Ложь;
		ОбработкаВыбораШиныНаСервере(ВыбранноеЗначение);
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ШиныПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ВывестиСуммовыеИтогиДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ШиныПослеУдаления(Элемент)
	ВывестиСуммовыеИтогиДокумента();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_Аккумуляторы

&НаКлиенте
Процедура АккумуляторыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элемент.ТекущиеДанные.Состояние = ПредопределенноеЗначение("Перечисление.уатСостоянияАгрегатов.УстановленоВРаботе");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АккумуляторыСерияНоменклатурыПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Аккумуляторы.ТекущиеДанные;
	СтруктураДанные = ПолучитьДанныеСерияНоменклатурыПриИзменении(СтрокаТабличнойЧасти.СерияНоменклатуры, Объект.ВалютаДокумента, Объект.Дата);
	СтрокаТабличнойЧасти.Цена = СтруктураДанные.ПервоначальнаяСтоимость;
КонецПроцедуры

&НаКлиенте
Процедура АккумуляторыТСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтруктураОтбор = Новый Структура("Организация", Объект.Организация);
	уатИнтерфейсВводаТС.РеквизитТСНачалоВыбора(Элемент, Элементы.Аккумуляторы.ТекущиеДанные.ТС, ДанныеВыбора, СтандартнаяОбработка, СтруктураОтбор);
КонецПроцедуры

&НаКлиенте
Процедура АккумуляторыТСАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СтруктураОтбор = Новый Структура("Организация", Объект.Организация);
	уатИнтерфейсВводаТС.РеквизитТСАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка, СтруктураОтбор);
КонецПроцедуры

&НаКлиенте
Процедура АккумуляторыТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтруктураОтбор = Новый Структура("Организация", Объект.Организация);
	уатИнтерфейсВводаТС.РеквизитТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка, СтруктураОтбор);
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораАккумуляторовНаСервере(ВыбранноеЗначение)
	Для Каждого ТекЭлем Из ВыбранноеЗначение Цикл
		НовСтрока = Объект.Аккумуляторы.Добавить();
		НовСтрока.СерияНоменклатуры  = ТекЭлем.Значение;
	КонецЦикла;
	
	ВывестиСуммовыеИтогиДокумента();
КонецПроцедуры

&НаКлиенте
Процедура АккумуляторыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СписокЗначений") Тогда
		СтандартнаяОбработка = Ложь;
		ОбработкаВыбораАккумуляторовНаСервере(ВыбранноеЗначение);
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АккумуляторыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ВывестиСуммовыеИтогиДокумента();
КонецПроцедуры

&НаКлиенте
Процедура АккумуляторыПослеУдаления(Элемент)
	ВывестиСуммовыеИтогиДокумента();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_ПрочиеАгрегаты

&НаКлиенте
Процедура ПрочиеАгрегатыСерияНоменклатурыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("ТипАгрегата, РежимВыбора", "ПрочиеАгрегаты", Истина);
	ОткрытьФорму("Справочник.уатСерииНоменклатуры.ФормаВыбора", ПараметрыФормы, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеАгрегатыСерияНоменклатурыПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ПрочиеАгрегаты.ТекущиеДанные;
	СтруктураДанные = ПолучитьДанныеСерияНоменклатурыПриИзменении(СтрокаТабличнойЧасти.СерияНоменклатуры, Объект.ВалютаДокумента, Объект.Дата);
	СтрокаТабличнойЧасти.Цена = СтруктураДанные.ПервоначальнаяСтоимость;
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеАгрегатыТСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтруктураОтбор = Новый Структура("Организация", Объект.Организация);
	уатИнтерфейсВводаТС.РеквизитТСНачалоВыбора(Элемент, Элементы.ПрочиеАгрегаты.ТекущиеДанные.ТС, ДанныеВыбора, СтандартнаяОбработка, СтруктураОтбор);
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеАгрегатыТСАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СтруктураОтбор = Новый Структура("Организация", Объект.Организация);
	уатИнтерфейсВводаТС.РеквизитТСАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка, СтруктураОтбор);
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеАгрегатыТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтруктураОтбор = Новый Структура("Организация", Объект.Организация);
	уатИнтерфейсВводаТС.РеквизитТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка, СтруктураОтбор);
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораПрочихАгрегатовНаСервере(ВыбранноеЗначение)
	Для Каждого ТекЭлем Из ВыбранноеЗначение Цикл
		Если ТекЭлем.Значение.ТипАгрегата = ПредопределенноеЗначение("Справочник.уатТипыАгрегатов.Аккумулятор") Тогда
			ТекстНСТР = Нстр("en='In the tabular section ""Other car parts"", it is not possible to add tires and batteries."
" The generated list is batteries';ru='В табличную часть ""Прочие агрегаты"" невозможно добавление шин и аккумуляторов. "
" Сформированный список является аккумуляторами'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
			Возврат;
			
		ИначеЕсли ТекЭлем.Значение.ТипАгрегата = ПредопределенноеЗначение("Справочник.уатТипыАгрегатов.Шина") Тогда
			ТекстНСТР = Нстр("en='In the tabular section ""Other car parts"", it is not possible to add tires and batteries."
" The generated list is tires';ru='В табличную часть ""Прочие агрегаты"" невозможно добавление шин и аккумуляторов. "
" Сформированный список является шинами'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
			Возврат;
			
		КонецЕсли;
		
		НовСтрока = Объект.ПрочиеАгрегаты.Добавить();
		НовСтрока.СерияНоменклатуры = ТекЭлем.Значение;
	КонецЦикла;
	
	ВывестиСуммовыеИтогиДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеАгрегатыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СписокЗначений") Тогда
		СтандартнаяОбработка = Ложь;
		ОбработкаВыбораПрочихАгрегатовНаСервере(ВыбранноеЗначение);
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеАгрегатыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ВывестиСуммовыеИтогиДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеАгрегатыПослеУдаления(Элемент)
	ВывестиСуммовыеИтогиДокумента();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ШиныПакетныйВвод(Команда)
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Отбор", Новый Структура("ТипАгрегата",
														ПредопределенноеЗначение("Справочник.уатТипыАгрегатов.Шина")));
	
	ОткрытьФорму("Обработка.уатПакетныйВводАгрегатов.Форма", ПараметрыОткрытия, Элементы.Шины);
КонецПроцедуры

&НаКлиенте
Процедура ШиныУстановитьСтоимость(Команда)
	мСтоимость = 0;
	ТекстНСТР = НСтр("en='Tire cost';ru='Стоимость шины'");
	ПоказатьВводЧисла(Новый ОписаниеОповещения("ШиныУстановитьСтоимостьЗавершение", ЭтотОбъект,
		Новый Структура("мСтоимость", мСтоимость)), мСтоимость, ТекстНСТР, 15, 2);
КонецПроцедуры

&НаКлиенте
Процедура ШиныУстановитьПробег(Команда)
	мПробег = 0;
	ТекстНСТР = НСтр("en='The initial mileage of tyres';ru='Начальный пробег шины'");
	ПоказатьВводЧисла(Новый ОписаниеОповещения("ШиныУстановитьПробегЗавершение", ЭтотОбъект,
		Новый Структура("мПробег", мПробег)), мПробег, ТекстНСТР, 15, 2);
КонецПроцедуры

&НаКлиенте
Процедура ШиныУстановитьИзнос(Команда)
	мИзнос = 0;
	ТекстНСТР = НСтр("en='Tire wear';ru='Износ шины'");
	ПоказатьВводЧисла(Новый ОписаниеОповещения("ШиныУстановитьИзносЗавершение", ЭтотОбъект,
		Новый Структура("мИзнос", мИзнос)), мИзнос, ТекстНСТР, 15, 2);
КонецПроцедуры

 &НаКлиенте
Процедура ШиныОчистить(Команда)
	Если Объект.Шины.Количество() > 0 Тогда
		ТекстНСТР = НСтр("en='Cleaning will be performed on list of tires. Continue?';ru='Будет выполнена очистка списка шин. Продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ШиныОчиститьЗавершение", ЭтотОбъект), ТекстНСТР,
			РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЦеныИВалюту(Команда)
	ОбработатьИзмененияПоКнопкеЦеныИВалюты(Объект.ВалютаДокумента);
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПодборШин(Команда)
	ДействиеПодбор("Шины");
КонецПроцедуры

&НаКлиенте
Процедура АккумуляторыПакетныйВвод(Команда)
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Отбор", Новый Структура("ТипАгрегата",
														ПредопределенноеЗначение("Справочник.уатТипыАгрегатов.Аккумулятор")));
	
	ОткрытьФорму("Обработка.уатПакетныйВводАгрегатов.Форма", ПараметрыОткрытия, Элементы.Аккумуляторы);
КонецПроцедуры

&НаКлиенте
Процедура АккумуляторыОчистить(Команда)
	Если Объект.Аккумуляторы.Количество() > 0 Тогда
		ТекстНСТР = НСтр("en='Battery list will be cleared. Continue?';ru='Будет выполнена очистка списка аккумуляторов. Продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("АккумуляторыОчиститьЗавершение", ЭтотОбъект), ТекстНСТР,
			РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПодборАккумуляторов(Команда)
	ДействиеПодбор("Аккумуляторы");
КонецПроцедуры

&НаКлиенте
Процедура АккумуляторыУстановитьЦену(Команда)
	мСтоимость = 0;
	ТекстНСТР = НСтр("en='Cost of batteries';ru='Стоимость аккумуляторов'");
	ПоказатьВводЧисла(Новый ОписаниеОповещения("АккумуляторыУстановитьЦенуЗавершение", ЭтотОбъект,
		Новый Структура("мСтоимость", мСтоимость)), мСтоимость, ТекстНСТР, 15, 2);
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеАгрегатыПакетныйВвод(Команда)
	ОткрытьФорму("Обработка.уатПакетныйВводАгрегатов.Форма", , Элементы.ПрочиеАгрегаты);
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеАгрегатыОчистить(Команда)
	Если Объект.ПрочиеАгрегаты.Количество() > 0 Тогда
		ТекстНСТР = НСтр("en='List of other car parts will be cleared. Continue?';ru='Будет выполнена очистка списка прочих агрегатов. Продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ПрочиеАгрегатыОчиститьЗавершение", ЭтотОбъект), ТекстНСТР,
			РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПодборПрочихАгрегатов(Команда)
	ДействиеПодбор("ПрочиеАгрегаты");
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеАгрегатыУстановитьЦену(Команда)
	мСтоимость = 0;
	ТекстНСТР = НСтр("en='Car parts cost';ru='Стоимость агрегатов'");
	ПоказатьВводЧисла(Новый ОписаниеОповещения("ПрочиеАгрегатыУстановитьЦенуЗавершение", ЭтотОбъект,
		Новый Структура("мСтоимость", мСтоимость)), мСтоимость, ТекстНСТР, 15, 2);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура УстановитьВидимость()
	ЗначениеВидимости = (Объект.ВидОперации = ПредопределенноеЗначение(
																		"Перечисление.уатВидыОперацийВводОстатковПоАгрегатам.УстановкаНаТС"));
	Элементы.Склад.Видимость				 = НЕ ЗначениеВидимости;
	Элементы.ШиныСостояние.Видимость		 = ЗначениеВидимости;
	Элементы.АккумуляторыСостояние.Видимость = ЗначениеВидимости;
	Элементы.ШиныМестоУстановки.Видимость    = ЗначениеВидимости;
	
	СтруктураНадписи = Новый Структура("ВалютаДокумента, КурсВзаиморасчетов",
									Объект.ВалютаДокумента, КурсВзаиморасчетов);
	ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);

	ВывестиСуммовыеИтогиДокумента();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеСерияНоменклатурыПриИзменении(СерияНоменклатуры, ВалютаДокумента, ДатаДокумента)
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("ПервоначальнаяСтоимость"	, СерияНоменклатуры.ПервоначальнаяСтоимость);
	СтруктураДанные.Вставить("Валюта"					, СерияНоменклатуры.Валюта);
	
	Если НЕ ЗначениеЗаполнено(СтруктураДанные.Валюта) Тогда
		СтруктураДанные.Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;
	
	Если СтруктураДанные.Валюта <> ВалютаДокумента Тогда
		СтруктураДанные.ПервоначальнаяСтоимость =
			уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(СтруктураДанные.ПервоначальнаяСтоимость,
			СтруктураДанные.Валюта,	ВалютаДокумента,
			ДатаДокумента, ДатаДокумента);
	КонецЕсли;
	
	Возврат СтруктураДанные;
КонецФункции // ПолучитьДанныеДатаПриИзменении()

// Процедура выполняет пересчет в табличной части документа после изменений 
// в форме "Цены и валюта".Выполняется пересчет колонок: цена, скидка, сумма,
// сумма НДС, всего.
//
&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты(Знач ВалютаРасчетовПередИзменением, ПересчитатьЦены = Ложь)
	// 1. Формируем структуру параметров для заполнения формы "Цены и Валюта".
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВалютаДокумента",		  Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("Организация",			  Объект.Организация);
	СтруктураПараметров.Вставить("ДатаДокумента",		  Объект.Дата);
	СтруктураПараметров.Вставить("ПерезаполнитьЦены",	  Ложь);
	СтруктураПараметров.Вставить("ПересчитатьЦены",		  ПересчитатьЦены);
	СтруктураПараметров.Вставить("БылиВнесеныИзменения",  Ложь);
	
	// Для объедининенного решения с БП 3
	СтруктураПараметров.Вставить("КурсДокумента",				 КурсВзаиморасчетов);
	СтруктураПараметров.Вставить("КратностьДокумента",			 КратностьВзаиморасчетов);
	// Для объедининенного решения с БП 3

	Если НЕ ПравоРедактированиеДокумента() Тогда
		СтруктураПараметров.Вставить("ТолькоПросмотр", Истина);
	КонецЕсли;
	
	// 2. Открываем форму "Цены и Валюта".
	ДополнительныеПараметры = Новый Структура("ВалютаРасчетовПередИзменением, ПересчитатьЦены", ВалютаРасчетовПередИзменением, ПересчитатьЦены);
	СтруктураЦеныИВалюта = ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров,,,,,
		Новый ОписаниеОповещения("ОбработкаЗакрытияФормыЦеныИВалюта", ЭтотОбъект, ДополнительныеПараметры));
	
КонецПроцедуры // ОбработатьИзмененияПоКнопкеЦеныИВалюты()

&НаКлиенте
Процедура ОбработкаЗакрытияФормыЦеныИВалюта(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Отмена ИЛИ НЕ ПравоРедактированиеДокумента() Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураЦеныИВалюта = Результат;
	
	// 3. Перезаполняем табличную часть "Номенклатура", если были внесены изменения в форме "Цены и Валюта".
	Если ТипЗнч(СтруктураЦеныИВалюта) = Тип("Структура") Тогда
		уатОбщегоНазначенияКлиент.ЗаполнитьСтруктуруЦеныИВалютыДляБП3(СтруктураЦеныИВалюта,Объект.ВалютаДокумента, ДополнительныеПараметры.ВалютаРасчетовПередИзменением);
		
		Если СтруктураЦеныИВалюта.Свойство("ВалютаДокумента") И СтруктураЦеныИВалюта.Свойство("Курс") И СтруктураЦеныИВалюта.Свойство("Кратность") Тогда
			Объект.ВалютаДокумента		   = СтруктураЦеныИВалюта.ВалютаДокумента;
			КурсВзаиморасчетов             = СтруктураЦеныИВалюта.Курс;
			КратностьВзаиморасчетов 	   = СтруктураЦеныИВалюта.Кратность;
		КонецЕсли;
		
		// Пересчитываем цены по валюте.
		Если СтруктураЦеныИВалюта.Свойство("ПересчитатьЦены") Тогда
			Если СтруктураЦеныИВалюта.ПересчитатьЦены Тогда	
				ПересчитатьЦеныТабличнойЧастиПоВалюте(ДополнительныеПараметры.ВалютаРасчетовПередИзменением, "Шины");
				ПересчитатьЦеныТабличнойЧастиПоВалюте(ДополнительныеПараметры.ВалютаРасчетовПередИзменением, "Аккумуляторы");
				ПересчитатьЦеныТабличнойЧастиПоВалюте(ДополнительныеПараметры.ВалютаРасчетовПередИзменением, "ПрочиеАгрегаты");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Сформируем надпись цены и валюты.
	СтруктураНадписи = Новый Структура;
	СтруктураНадписи.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	СтруктураНадписи.Вставить("КурсВзаиморасчетов", КурсВзаиморасчетов);
	ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
	
	ВывестиСуммовыеИтогиДокумента();
КонецПроцедуры

// Функция возвращает текст надписи "Цены и валюта".
//
&НаКлиентеНаСервереБезКонтекста
Функция СформироватьНадписьЦеныИВалюта(СтруктураНадписи)
	
	ТекстНадписи = "";
	
	// Валюта.
	Если ЗначениеЗаполнено(СтруктураНадписи.ВалютаДокумента) Тогда
		ТекстНадписи = НСтр("en='%Валюта% (%Курс%)';ru='%Валюта% (%Курс%)'");
		ТекстНадписи = СтрЗаменить(ТекстНадписи, "%Валюта%", СокрЛП(Строка(СтруктураНадписи.ВалютаДокумента)));
		ТекстНадписи = СтрЗаменить(ТекстНадписи, "%Курс%", СокрЛП(Формат(СтруктураНадписи.КурсВзаиморасчетов, "ЧДЦ=4; ЧРД=.; ЧН=0.0000; ЧГ=0")));
	КонецЕсли;
	
	Возврат ТекстНадписи;
	
КонецФункции // СформироватьНадписьЦеныИВалюта()

&НаКлиенте
Процедура ДействиеПодбор(ИмяТабличнойЧасти)
	
	Если ИмяТабличнойЧасти = "Шины" Тогда
		Команда = "ПодборВТабличнуюЧастьШины";
	ИначеЕсли ИмяТабличнойЧасти = "Аккумуляторы" Тогда
		Команда = "ПодборВТабличнуюЧастьАккумуляторы";
	ИначеЕсли ИмяТабличнойЧасти =  "ПрочиеАгрегаты" Тогда
		Команда = "ПодборВТабличнуюЧастьПрочиеАгрегаты";
	КонецЕсли;
	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Организация", Объект.Организация);
	СтруктураПараметровПодбора.Вставить("Команда", Команда);
	
	//СтруктураПараметровПодбора.Вставить("ПодбиратьУслуги", ЕстьУслуги);
	//СтруктураПараметровПодбора.Вставить("ОтборУслугПоСправочнику", Истина);
	
	ВременнаяДатаРасчетов = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов", ВременнаяДатаРасчетов);
	СтруктураПараметровПодбора.Вставить("Склад", Объект.Склад);
	
	уатОбщегоНазначенияТиповыеКлиент.уатОткрытьПодборАгрегатов(ЭтотОбъект, СтруктураПараметровПодбора);
	
КонецПроцедуры //

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию агрегата;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
&НаКлиенте
Процедура ОбработкаПодбора(ИмяТабличнойЧасти, ЗначениеВыбора)
	
	Перем Агрегат, Модель;
	
	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("Агрегат",Агрегат);
	
	// Ищем выбранную позицию в таблице подобранных агрегатов.
	// Если найдем - выдаем сообщение; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();
	
	СтруктураОтбора.Вставить("СерияНоменклатуры",Агрегат);
		
	МассивСтрок = Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураОтбора);
	Если МассивСтрок.Количество() = 0 Тогда
		СтрокаТабличнойЧасти = Неопределено;
	Иначе
		СтрокаТабличнойЧасти = МассивСтрок[0];
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		// Нашли, сообщаем.
		ТекстНСТР = НСтр("en='This car part was added earlier!';ru='Данный агрегат был добавлен раннее!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
	Иначе
		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = Объект[ИмяТабличнойЧасти].Добавить();
		СтрокаТабличнойЧасти.СерияНоменклатуры	  = Агрегат;
		
		СтруктураДанные = ПолучитьДанныеСерияНоменклатурыПриИзменении(Агрегат, Объект.ВалютаДокумента, Объект.Дата);
		СтрокаТабличнойЧасти.Цена = СтруктураДанные.ПервоначальнаяСтоимость;
		
	КонецЕсли;
	
	ВывестиСуммовыеИтогиДокумента();
	
КонецПроцедуры //

&НаСервереБезКонтекста
Функция ПравоРедактированиеДокумента()
	Рез = ПравоДоступа("Редактирование", Метаданные.Документы.уатВводНачальныхДанныхПоАгрегатам);
	Возврат Рез;
КонецФункции

&НаКлиенте
Процедура ШиныУстановитьСтоимостьЗавершение(Число, ДополнительныеПараметры) Экспорт
    
    мСтоимость = ?(Число = Неопределено, ДополнительныеПараметры.мСтоимость, Число);
    
    
    Если (Число <> Неопределено) Тогда
        Для Каждого ТекСтрока Из Объект.Шины Цикл
            ТекСтрока.Цена = мСтоимость;
        КонецЦикла;
	КонецЕсли;
	
	ВывестиСуммовыеИтогиДокумента();

КонецПроцедуры

&НаКлиенте
Процедура ШиныУстановитьПробегЗавершение(Число, ДополнительныеПараметры) Экспорт
    
    мПробег = ?(Число = Неопределено, ДополнительныеПараметры.мПробег, Число);
    
    
    Если (Число <> Неопределено) Тогда
        Для Каждого ТекСтрока Из Объект.Шины Цикл
            ТекСтрока.Пробег = мПробег;
        КонецЦикла;
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ШиныУстановитьИзносЗавершение(Число, ДополнительныеПараметры) Экспорт
    
    мИзнос = ?(Число = Неопределено, ДополнительныеПараметры.мИзнос, Число);
    
    
    Если (Число <> Неопределено) Тогда
        Для Каждого ТекСтрока Из Объект.Шины Цикл
            ТекСтрока.Износ = мИзнос;
        КонецЦикла;
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ШиныОчиститьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Да Тогда
        Объект.Шины.Очистить();
	КонецЕсли;
	
	ВывестиСуммовыеИтогиДокумента();

КонецПроцедуры

&НаКлиенте
Процедура АккумуляторыОчиститьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Да Тогда
        Объект.Аккумуляторы.Очистить();
	КонецЕсли;
	
	ВывестиСуммовыеИтогиДокумента();

КонецПроцедуры

&НаКлиенте
Процедура АккумуляторыУстановитьЦенуЗавершение(Число, ДополнительныеПараметры) Экспорт
    
    мСтоимость = ?(Число = Неопределено, ДополнительныеПараметры.мСтоимость, Число);
    
    
    Если (Число <> Неопределено) Тогда
        Для Каждого ТекСтрока Из Объект.Аккумуляторы Цикл
            ТекСтрока.Цена = мСтоимость;
        КонецЦикла;
	КонецЕсли;
	
	ВывестиСуммовыеИтогиДокумента();

КонецПроцедуры

&НаКлиенте
Процедура ПрочиеАгрегатыОчиститьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Да Тогда
        Объект.ПрочиеАгрегаты.Очистить();
	КонецЕсли;
	
	ВывестиСуммовыеИтогиДокумента();

КонецПроцедуры

&НаКлиенте
Процедура ПрочиеАгрегатыУстановитьЦенуЗавершение(Число, ДополнительныеПараметры) Экспорт
    
    мСтоимость = ?(Число = Неопределено, ДополнительныеПараметры.мСтоимость, Число);
    
    
    Если (Число <> Неопределено) Тогда
        Для Каждого ТекСтрока Из Объект.ПрочиеАгрегаты Цикл
            ТекСтрока.Цена = мСтоимость;
        КонецЦикла;
	КонецЕсли;
	
	ВывестиСуммовыеИтогиДокумента();

КонецПроцедуры

&НаСервере
Процедура ВывестиСуммовыеИтогиДокумента()
	
	СуммаДокумента = Объект.Шины.Итог("Цена") + Объект.Аккумуляторы.Итог("Цена") + Объект.ПрочиеАгрегаты.Итог("Цена");
	СтруктураНадписи = Новый Структура("ВалютаДокумента, КурсВзаиморасчетов", Объект.ВалютаДокумента, КурсВзаиморасчетов);
	ЦеныИВалюта = СформироватьНадписьЦеныИВалюта(СтруктураНадписи);
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьЦеныТабличнойЧастиПоВалюте(ВалютаРасчетовПередИзменением, ИмяТЧ)
	уатОбщегоНазначенияСервер.ПересчитатьЦеныТабличнойЧастиПоВалюте(Объект, ВалютаРасчетовПередИзменением, ИмяТЧ);
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	уатЗащищенныеФункцииСервер.уатДокументФормаЭлементаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, Объект, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
		
	Если Объект.Ссылка.Пустая() Тогда
		Если НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
			Объект.Склад = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователи.АвторизованныйПользователь(), "ОсновнойСклад");
		КонецЕсли;
	КонецЕсли;
	
	уатОбщегоНазначенияСервер.НастроитьПолеЕдиницыИзмерения(ЭтотОбъект, "Товары");
	уатОбщегоНазначенияСервер.НастроитьПолеПодразделение(Элементы.Подразделение, "Объект.Организация");
	
	// Ввод на основании Инвентаризации
	Если ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.уатИнвентаризацияТоваров") Тогда
		ДокОбъект = РеквизитФормыВЗначение("Объект");
		Документы.уатВнутреннееПеремещение.ЗаполнитьНаОснованииИнвентаризации(ДокОбъект, Параметры.Основание,
			Параметры.ВидОперации);
		
		ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
	КонецЕсли;

	//ПодключаемоеОборудование
	уатОбщегоНазначения_проф.НастроитьПодключаемоеОборудование(ЭтотОбъект);
	//Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// уатУправлениеАвтотранспортом.МодификацияКонфигурации
	уатМодификацияКонфигурацииКлиентПереопределяемый.ПриОткрытии(ЭтотОбъект, Отказ);
	// Конец уатУправлениеАвтотранспортом.МодификацияКонфигурации
	
	уатЗащищенныеФункцииКлиент.уатДокументФормаЭлементаПриОткрытии(Отказ, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	//ПодключаемоеОборудование
	уатОбщегоНазначенияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(ЭтотОбъект);
	//Конец ПодключаемоеОборудование
	
	УстановитьОтборОстаткиВЯчейках();
	УстановитьВидимость();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// Контроль вызываем здесь, а не в ОбработкаПроверкиЗаполненияНаСервере, поскольку тот не срабатывает
	// при записи. Режим проведения устанавливается программно позже - в модуле объекта в процедуре ПередЗаписью
	Если флПроверкаПередЗакрытием <> Неопределено Тогда
		Отказ = Отказ ИЛИ флПроверкаПередЗакрытием.Отказ;
		Для Каждого ТекСообщение Из флПроверкаПередЗакрытием.Сообщения Цикл
			уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекСообщение);
		КонецЦикла;
		флПроверкаПередЗакрытием = Неопределено;
	ИначеЕсли ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Запись
		ИЛИ ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		КонтрольНоменклатурыПриВводеНаОсновании(Отказ);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов	
	УчетОригиналовПервичныхДокументовКлиент.ОбработчикОповещенияФормаДокумента(ИмяСобытия, ЭтотОбъект);
	// Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Оповещ = Новый ОписаниеОповещения("ДобавитьНоменклатуруВТЧПоШтрихкоду", ЭтотОбъект);
		уатОбщегоНазначенияКлиент.ОбработатьСобытиеПодключаемогоОборудования(ИмяСобытия, Параметр, Источник,
			Новый Структура("Оповещение", Оповещ));
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	// ПодключаемоеОборудование
	уатОбщегоНазначенияКлиент.ОбработкаВнешнегоСобытия(Источник, Событие, Данные);
	// Конец ПодключаемоеОборудование
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
		
	Если флВопросЗакрытиеФормы Тогда
		Отказ = Истина;
		Оповещ = Новый ОписаниеОповещения("ПередЗакрытиемВопрос", ЭтотОбъект);
		флВопросЗакрытиеФормы = Ложь;
		ПоказатьВопрос(Оповещ, "При проверке корректности заполнения документа возникли предупреждения!
			|Продолжить закрытие формы?", РежимДиалогаВопрос.ОКОтмена);
	ИначеЕсли Модифицированность И НЕ Объект.Ссылка.Пустая() Тогда
		флОтказ = Ложь;
		мсвСообщения = Новый Массив;
		КонтрольНоменклатурыПриВводеНаОсновании(флОтказ, Истина, мсвСообщения);
		флПроверкаПередЗакрытием = Новый Структура("Отказ, Сообщения", флОтказ, мсвСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемВопрос(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.ОК Тогда
		флВопросЗакрытиеФормы = Ложь;
		Закрыть();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ОперацияРазмещение(Команда)
	
	Если Элементы.ФормаОперацияРазмещение.Пометка Тогда 
		Возврат;
	КонецЕсли;	
	
	Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийВнутреннееПеремещение.РазмещениеВЯчейке");
	Для Каждого ТекСтрока Из Объект.Товары Цикл
		ТекСтрока.ЯчейкаОтправитель = Неопределено;
	КонецЦикла;
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацияПеремещение(Команда)
	
	Если Элементы.ФормаОперацияПеремещение.Пометка Тогда 
		Возврат;
	КонецЕсли;	
	
	Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийВнутреннееПеремещение.ПеремещениеМеждуЯчейками");
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацияИзвлечение(Команда)
	
	Если Элементы.ФормаОперацияИзвлечение.Пометка Тогда 
		Возврат;
	КонецЕсли;	
	
	Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийВнутреннееПеремещение.ИзвлечениеИзЯчейки");
	Для Каждого ТекСтрока Из Объект.Товары Цикл
		ТекСтрока.ЯчейкаПолучатель = Неопределено;
	КонецЦикла;
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура АвтозаполнениеЯчеек(Команда)
	
	Если Объект.Склад.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение(
		"Перечисление.уатВидыОперацийВнутреннееПеремещение.РазмещениеВЯчейке") Тогда
		АвтозаполнениеЯчеекСерверРазмещение();
	Иначе
		АвтозаполнениеЯчеекСервер();
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура АвтозаполнениеЯчеекСервер()

	// Запоминаем введенные ячейки-получатели и ЕИ по каждой номенклатуре,
	// если несколько строк с одной номенклатурой, берем первую
	ЦелевыеЯчейки = Новый Соответствие;
	ЕдиницыИзмерения = Новый Соответствие;
	Для Каждого ТекСтрока Из Объект.Товары Цикл
		Если ЦелевыеЯчейки.Получить(ТекСтрока.Номенклатура) = Неопределено Тогда
			ЦелевыеЯчейки.Вставить(ТекСтрока.Номенклатура, ТекСтрока.ЯчейкаПолучатель);
			ЕдиницыИзмерения.Вставить(ТекСтрока.Номенклатура, ТекСтрока.ЕдиницаИзмерения);
		КонецЕсли;
	КонецЦикла;

	тблТовары = Объект.Товары.Выгрузить();
	уатЗащищенныеФункцииСервер_проф.СвернутьТаблицуТоваровАвтозаполнениеЯчеек(тблТовары, ЕдиницыИзмерения);
	
	Объект.Товары.Очистить();
	
	мсвНоменклатура = тблТовары.ВыгрузитьКолонку("Номенклатура");
	
	// При запросе остатков берем ячейки сначала с меньшим количеством, чтобы как можно больше ячеек освободить
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	уатТоварыВЯчейкахОстатки.Номенклатура КАК Номенклатура,
	|	уатТоварыВЯчейкахОстатки.Ячейка КАК Ячейка,
	|	уатТоварыВЯчейкахОстатки.КоличествоОстаток КАК Количество
	|ИЗ
	|	РегистрНакопления.уатТоварыВЯчейках.Остатки(
	|			&Период,
	|			Склад = &Склад
	|				И Номенклатура В (&мсвНоменклатура)
	|				И Ячейка <> Склад.ТранзитнаяЯчейка) КАК уатТоварыВЯчейкахОстатки
	|
	|УПОРЯДОЧИТЬ ПО
	|	Количество");
	Запрос.УстановитьПараметр("Период", Объект.Дата);
	Запрос.УстановитьПараметр("Склад", Объект.Склад);
	Запрос.УстановитьПараметр("мсвНоменклатура", мсвНоменклатура);
	тблОстаткиНоменклатуры = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ТекСтрока Из тблТовары Цикл
		КоличествоОсталось = ТекСтрока.Количество;
		
		ТекЯчейкаПолучатель = ЦелевыеЯчейки.Получить(ТекСтрока.Номенклатура);
		ТекЕдиницаИзмерения = ЕдиницыИзмерения.Получить(ТекСтрока.Номенклатура);
		
		Для Каждого ТекСтрокаОстатки Из тблОстаткиНоменклатуры Цикл
			Если КоличествоОсталось = 0 Тогда
				Прервать;
			КонецЕсли;
			
			Если ТекСтрока.Номенклатура <> ТекСтрокаОстатки.Номенклатура Тогда
				Продолжить;
			КонецЕсли;
			
			// Перевод из ЕИ хранения остатков в ЕИ документа
			Если ТекСтрока.Номенклатура.ЕдиницаХраненияОстатков = ТекЕдиницаИзмерения Тогда
				ТекКоличествоОстаток = ТекСтрокаОстатки.Количество;
			Иначе
				ТекКоличествоОстаток = ТекСтрокаОстатки.Количество * ?(ТекЕдиницаИзмерения.Коэффициент = 0, 1,
					ТекСтрока.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент / ТекЕдиницаИзмерения.Коэффициент);
			КонецЕсли;
				
			ТекКоличествоСписать = Мин(ТекКоличествоОстаток, КоличествоОсталось);
			
			НоваяСтрока = Объект.Товары.Добавить();
			НоваяСтрока.Номенклатура      = ТекСтрока.Номенклатура;
			НоваяСтрока.ЕдиницаИзмерения  = ТекЕдиницаИзмерения;
			НоваяСтрока.Количество        = ТекКоличествоСписать;
			НоваяСтрока.ЯчейкаОтправитель = ТекСтрокаОстатки.Ячейка;
			НоваяСтрока.ЯчейкаПолучатель  = ТекЯчейкаПолучатель;
			
			КоличествоОсталось = КоличествоОсталось - ТекКоличествоСписать;
		КонецЦикла;
		
		// Не хватает остатка списать - просто добавляем строку с пустой ячейкой
		Если КоличествоОсталось > 0 Тогда
			НоваяСтрока = Объект.Товары.Добавить();
			НоваяСтрока.Номенклатура     = ТекСтрока.Номенклатура;
			НоваяСтрока.ЕдиницаИзмерения = ТекЕдиницаИзмерения;
			НоваяСтрока.Количество       = КоличествоОсталось;
			НоваяСтрока.ЯчейкаПолучатель = ТекЯчейкаПолучатель;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура АвтозаполнениеЯчеекСерверРазмещение()

	// Запоминаем ЕИ по каждой номенклатуре,
	// если несколько строк с одной номенклатурой, берем первую
	ЕдиницыИзмерения = Новый Соответствие;
	Для Каждого ТекСтрока Из Объект.Товары Цикл
		Если ЕдиницыИзмерения.Получить(ТекСтрока.Номенклатура) = Неопределено Тогда
			ЕдиницыИзмерения.Вставить(ТекСтрока.Номенклатура, ТекСтрока.ЕдиницаИзмерения);
		КонецЕсли;
	КонецЦикла;
			
	тблТовары = Объект.Товары.Выгрузить();
	уатЗащищенныеФункцииСервер_проф.СвернутьТаблицуТоваровАвтозаполнениеЯчеек(тблТовары, ЕдиницыИзмерения);
	
	Объект.Товары.Очистить();
	
	мсвНоменклатура = тблТовары.ВыгрузитьКолонку("Номенклатура");
	
	// При запросе остатков берем ячейки сначала с большим количеством, чтобы как можно меньше ячеек занять
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	уатТоварыВЯчейкахОстатки.Номенклатура КАК Номенклатура,
	|	уатТоварыВЯчейкахОстатки.Ячейка КАК Ячейка,
	|	уатТоварыВЯчейкахОстатки.КоличествоОстаток КАК Количество
	|ИЗ
	|	РегистрНакопления.уатТоварыВЯчейках.Остатки(
	|			&Период,
	|			Склад = &Склад
	|				И Номенклатура В (&мсвНоменклатура)
	|				И Ячейка <> Склад.ТранзитнаяЯчейка) КАК уатТоварыВЯчейкахОстатки
	|
	|УПОРЯДОЧИТЬ ПО
	|	Номенклатура,
	|	Количество УБЫВ");
	Запрос.УстановитьПараметр("Период", Объект.Дата);
	Запрос.УстановитьПараметр("Склад", Объект.Склад);
	Запрос.УстановитьПараметр("мсвНоменклатура", мсвНоменклатура);
	тблОстаткиНоменклатуры = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ТекСтрока Из тблТовары Цикл
		ТекЕдиницаИзмерения = ЕдиницыИзмерения.Получить(ТекСтрока.Номенклатура);
		
		ПредЯчейка = Неопределено;
		Для Каждого ТекСтрокаОстатки Из тблОстаткиНоменклатуры Цикл
			Если ТекСтрока.Номенклатура <> ТекСтрокаОстатки.Номенклатура Тогда
				Продолжить;
			КонецЕсли;
			Если ПредЯчейка <> Неопределено Тогда
				Прервать;
			КонецЕсли;
			
			НоваяСтрока = Объект.Товары.Добавить();
			НоваяСтрока.Номенклатура      = ТекСтрока.Номенклатура;
			НоваяСтрока.ЕдиницаИзмерения  = ТекЕдиницаИзмерения;
			НоваяСтрока.Количество        = ТекСтрока.Количество;
			НоваяСтрока.ЯчейкаПолучатель  = ТекСтрокаОстатки.Ячейка;
			
			ПредЯчейка = ТекСтрокаОстатки.Ячейка;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СверткаЯчеек(Команда)
	ПараметрыФормы = Новый Структура("Период, Склад", Объект.Дата, Объект.Склад);
	
	ТекСтрока = Элементы.Товары.ТекущиеДанные;
	Если ТекСтрока <> Неопределено И ЗначениеЗаполнено(ТекСтрока.Номенклатура) Тогда
		ПараметрыФормы.Вставить("Номенклатура", ТекСтрока.Номенклатура);
	КонецЕсли;
	
	ОповещОЗакрытии = Новый ОписаниеОповещения("СверткаЯчеекЗавершение", ЭтотОбъект);
	ОткрытьФорму("Документ.уатВнутреннееПеремещение.Форма.СверткаЯчеек", ПараметрыФормы,,,,, ОповещОЗакрытии);
КонецПроцедуры

&НаКлиенте
Процедура СверткаЯчеекЗавершение(Результат, ДопПараметры) Экспорт
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Для Каждого ТекСтрока Из Результат.ОстаткиВЯчейках Цикл
			НоваяСтрока = Объект.Товары.Добавить();
			НоваяСтрока.Номенклатура      = Результат.Номенклатура;
			НоваяСтрока.ЕдиницаИзмерения  = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(
				Результат.Номенклатура, "ЕдиницаХраненияОстатков");
			НоваяСтрока.Количество        = ТекСтрока.Количество;
			НоваяСтрока.ЯчейкаОтправитель = ТекСтрока.Ячейка;
			НоваяСтрока.ЯчейкаПолучатель  = Результат.ЯчейкаПолучатель;
		КонецЦикла;
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОстаткиВЯчейках(Команда)
	Элементы.ТоварыВЯчейкахОтправитель.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	Оповещ = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект);
	ПоказатьВводЗначения(Оповещ, "", "Введите штрихкод номенклатуры", Тип("Строка"));
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(Результат, ДопПараметры) Экспорт
	Если ЗначениеЗаполнено(Результат) Тогда
		ТекНоменклатура = уатЗащищенныеФункцииСервер_проф.ПолучитьОбъектПоШтрихкоду(Результат);
		ДобавитьНоменклатуруВТЧПоШтрихкоду(Новый Структура("Штрихкод, Объект", Результат, ТекНоменклатура));
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

// уатУправлениеАвтотранспортом.МодификацияКонфигурации
&НаКлиенте
Процедура Подключаемый_ПолеФормыНажатие(Элемент, СтандартнаяОбработка)
	
	уатМодификацияКонфигурацииКлиентПереопределяемый.ПолеФормыНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры
// Конец уатУправлениеАвтотранспортом.МодификацияКонфигурации

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	// Обработка события изменения организации.
	Если НЕ уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ВестиСкладскойУчетУАТ")) Тогда
		
		ТекстНСТР = НСтр("en='For company ""%1"" the possibility of inventory management with FMS documents is disabled!';ru='Для организации ""%1"" отключена возможность ведения складского учета документами УАТ!'");
		ТекстНСТР = СтрШаблон(ТекстНСТР, Объект.Организация);
		ПоказатьПредупреждение(Неопределено, ТекстНСТР, 5);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	УстановитьОтборОстаткиВЯчейках();
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПриАктивизацииСтроки(Элемент)
	УстановитьОтборОстаткиВЯчейках();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	УстановитьОтборОстаткиВЯчейках();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
    СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	
	УстановитьОтборОстаткиВЯчейках();
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыТоварыВЯчейках

&НаКлиенте
Процедура ТоварыВЯчейкахВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекСтрокаТовары = Элементы.Товары.ТекущиеДанные;
	Если ТекСтрокаТовары = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ВидОперации =
		ПредопределенноеЗначение("Перечисление.уатВидыОперацийВнутреннееПеремещение.ИзвлечениеИзЯчейки")
		ИЛИ Объект.ВидОперации =
		ПредопределенноеЗначение("Перечисление.уатВидыОперацийВнутреннееПеремещение.ПеремещениеМеждуЯчейками") Тогда
		
		ТекСтрокаТовары.ЯчейкаОтправитель = Элементы.ТоварыВЯчейкахОтправитель.ТекущиеДанные.Ячейка;
	Иначе
		ТекСтрокаТовары.ЯчейкаПолучатель = Элементы.ТоварыВЯчейкахОтправитель.ТекущиеДанные.Ячейка;
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// Получает набор данных с сервера для процедуры НоменклатураПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.ЕдиницаХраненияОстатков);
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

&НаКлиенте
Процедура УстановитьОтборОстаткиВЯчейках()
	
	Если Элементы.ГруппаОстаткиВЯчейках.Видимость Тогда
		ТекСтрока = Элементы.Товары.ТекущиеДанные;
		Если ТекСтрока = Неопределено Тогда
			ТекНоменклатура = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
		Иначе
			ТекНоменклатура = ТекСтрока.Номенклатура;
		КонецЕсли;
	Иначе
		ТекНоменклатура = ПредопределенноеЗначение("Справочник.Номенклатура.ПустаяСсылка");
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТоварыВЯчейках, "Склад", Объект.Склад);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТоварыВЯчейках, "Номенклатура", ТекНоменклатура);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТоварыВЯчейках, "Период",
		?(Объект.Ссылка.Пустая(), '39991231', МоментВремениОстатков(Объект.Дата)));
		
	Если ЗначениеЗаполнено(ТекНоменклатура) Тогда
		Элементы.ДекорацияОстатки.Заголовок = СтрШаблон("Остатки в ячейках ""%1"":", ТекНоменклатура);
	Иначе
		Элементы.ДекорацияОстатки.Заголовок = "Остатки в ячейках:";
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция МоментВремениОстатков(ТекДата)
	Возврат Новый Граница(ТекДата, ВидГраницы.Исключая);
КонецФункции

&НаКлиенте
Процедура УстановитьВидимость()
	
	Если Объект.ВидОперации	=
		ПредопределенноеЗначение("Перечисление.уатВидыОперацийВнутреннееПеремещение.РазмещениеВЯчейке") Тогда
		
		Элементы.ФормаОперацияРазмещение.Пометка   = Истина;
		Элементы.ФормаОперацияПеремещение.Пометка  = Ложь;
		Элементы.ФормаОперацияИзвлечение.Пометка   = Ложь;
		Элементы.ТоварыЯчейкаОтправитель.Видимость = Ложь;
		Элементы.ТоварыЯчейкаПолучатель.Видимость  = Истина;
		
	ИначеЕсли Объект.ВидОперации =
		ПредопределенноеЗначение("Перечисление.уатВидыОперацийВнутреннееПеремещение.ПеремещениеМеждуЯчейками") Тогда
		
		Элементы.ФормаОперацияРазмещение.Пометка   = Ложь;
		Элементы.ФормаОперацияПеремещение.Пометка  = Истина;
		Элементы.ФормаОперацияИзвлечение.Пометка   = Ложь;
		Элементы.ТоварыЯчейкаОтправитель.Видимость = Истина;
		Элементы.ТоварыЯчейкаПолучатель.Видимость  = Истина;
		
	Иначе
		Элементы.ФормаОперацияРазмещение.Пометка   = Ложь;
		Элементы.ФормаОперацияПеремещение.Пометка  = Ложь;
		Элементы.ФормаОперацияИзвлечение.Пометка   = Истина;
		Элементы.ТоварыЯчейкаОтправитель.Видимость = Истина;
		Элементы.ТоварыЯчейкаПолучатель.Видимость  = Ложь;
		
	КонецЕсли;
			
КонецПроцедуры

&НаСервере
Процедура КонтрольНоменклатурыПриВводеНаОсновании(Отказ, ВызовПередЗакрытиемФормы = Ложь, мсвСообщения = Неопределено)
	Если НЕ ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		Возврат;
	КонецЕсли;
	
	ВидКонтроля = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
		"КонтрольНоменклатурыВнутреннегоПеремещенияПриВводеНаОсновании");
	Если ВидКонтроля = Перечисления.уатВидыКонтроля.Разрешать Тогда
		Возврат;
	КонецЕсли;
	
	Если мсвСообщения = Неопределено Тогда
		мсвСообщения = Новый Массив;
	КонецЕсли;
	флОтказ = Ложь;
	ТекстСообщения = "";
	
	// Проверка соответствия номенклатуры в текущем документе и документе-основании
	Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.уатРемонтныйЛист") Тогда
		Если Объект.ДокументОснование.СпособРемонта = Перечисления.уатСпособыРемонта.Автосервис Тогда
			ТЧОснование = Объект.ДокументОснование.СобственныеМатериалы;
		Иначе
			ТЧОснование = Объект.ДокументОснование.Материалы;
		КонецЕсли;
	ИначеЕсли ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.уатВыдачаРасходныхМатериалов") Тогда
		ТЧОснование = Объект.ДокументОснование.Материалы;
	Иначе
		ТЧОснование = Объект.ДокументОснование.Товары;
	КонецЕсли;
	тблТоварыСвернутая = Объект.Товары.Выгрузить().Скопировать();
	тблТоварыСвернутая.Свернуть("Номенклатура, ЕдиницаИзмерения", "Количество");
	Для Каждого ТекСтрока Из тблТоварыСвернутая Цикл
		КоличествоОнование = 0;
		мсвСтрокПоиск = ТЧОснование.НайтиСтроки(Новый Структура("Номенклатура, ЕдиницаИзмерения", ТекСтрока.Номенклатура, ТекСтрока.ЕдиницаИзмерения));
		Для Каждого ТекСтрокаПоиск Из мсвСтрокПоиск Цикл
			КоличествоОнование = КоличествоОнование + ТекСтрокаПоиск.Количество;
		КонецЦикла;
		Если ТекСтрока.Количество <> КоличествоОнование Тогда
			ТекстСообщения = ТекстСообщения + Символы.ПС
				+ СтрШаблон("""%1"",""%2"": текущий документ %3, документ-основание %4",
				ТекСтрока.Номенклатура, ТекСтрока.ЕдиницаИзмерения, ТекСтрока.Количество, КоличествоОнование);
		КонецЕсли;	
	КонецЦикла;
	
	Если НЕ ПустаяСтрока(ТекстСообщения) Тогда
		ТекстСообщения = "Обнаружено расхождение в количестве номенклатуры текущего документа и документа-основания:"
			+ ТекстСообщения;
		Если ВидКонтроля = Перечисления.уатВидыКонтроля.Запрещать Тогда
			ТекстСообщения = ТекстСообщения + "
				|Проведение запрещено!";
			флОтказ = Истина;
			флВопросЗакрытиеФормы = Ложь;
		ИначеЕсли НЕ ВызовПередЗакрытиемФормы Тогда
			флВопросЗакрытиеФормы = Истина;
		КонецЕсли;
		Если ВызовПередЗакрытиемФормы И ВидКонтроля = Перечисления.уатВидыКонтроля.Запрещать Тогда
			мсвСообщения.Добавить(ТекстСообщения);
		Иначе
			уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстСообщения);
		КонецЕсли;
	КонецЕсли;
	
	Отказ = Отказ ИЛИ флОтказ;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНоменклатуруВТЧПоШтрихкоду(Результат, ДопПараметры = Неопределено) Экспорт
	
	Если Результат = Неопределено ИЛИ НЕ ЗначениеЗаполнено(Результат.Объект)
		ИЛИ ТипЗнч(Результат.Объект) <> Тип("СправочникСсылка.Номенклатура") Тогда
		Возврат;
	КонецЕсли;
	Номенклатура = Результат.Объект;
	
	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	// Если найдем - увеличим количество; не найдем - добавим новую строку.
	МассивСтрок = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура", Номенклатура));
	Если МассивСтрок.Количество() = 0 Тогда
		СтрокаТабличнойЧасти = Неопределено;
	Иначе
		СтрокаТабличнойЧасти = МассивСтрок[0];
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		// Нашли, увеличиваем количество в первой найденной строке.
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + 1;
	Иначе
		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти =  Объект.Товары.Добавить();
		СтрокаТабличнойЧасти.Номенклатура = Номенклатура;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(
			СтрокаТабличнойЧасти.Номенклатура, "ЕдиницаХраненияОстатков");
		СтрокаТабличнойЧасти.Количество = 1;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	Настройки.ПриПолученииСлужебныхРеквизитов = Ложь;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатАктСверкиВзаиморасчетов_уэ";
	КомандаПечати.Идентификатор = "АктСверки";
	КомандаПечати.Представление = НСтр("en='Verification report of mutual settlements';ru='Акт сверки взаиморасчетов'");
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр).
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной
//                                                            параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной
//                                            параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если НЕ уатОбщегоНазначенияСервер.РазрешениеПечатиНепроведенногоДокумента(МассивОбъектов) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктСверки") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "АктСверки", "Акт сверки взаиморасчетов", ПечатьАктСверки(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
	уатОбщегоНазначенияСервер.УстановитьРедактированиеПечатныхФормДокумента(КоллекцияПечатныхФорм);
	уатУправлениеПечатью.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов, КоллекцияПечатныхФорм);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.УправлениеДоступом

// Позволяет переопределить ограничение, указанное в модуле менеджера объекта метаданных.
//
// Параметры:
//  Ограничение - Структура:
//    * Текст                             - Строка - ограничение доступа для пользователей.
//                                          Если пустая строка, значит, доступ разрешен.
//    * ТекстДляВнешнихПользователей      - Строка - ограничение доступа для внешних пользователей.
//                                          Если пустая строка, значит, доступ запрещен.
//    * ПоВладельцуБезЗаписиКлючейДоступа - Неопределено - определить автоматически.
//                                        - Булево - если Ложь, то всегда записывать ключи доступа,
//                                          если Истина, тогда не записывать ключи доступа,
//                                          а использовать ключи доступа владельца (требуется,
//                                          чтобы ограничение было строго по объекту-владельцу).
//   * ПоВладельцуБезЗаписиКлючейДоступаДляВнешнихПользователей - Неопределено, Булево - также
//                                          как у параметра ПоВладельцуБезЗаписиКлючейДоступа.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";
	
	Ограничение.ТекстДляВнешнихПользователей = Ограничение.Текст;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Функция ПечатьАктСверки(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_АктСверкиВзаиморасчетов";
	
	ПервыйДокумент = Истина;
	
	Для Каждого ТекущийДокумент Из МассивОбъектов Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_АктСверкиВзаиморасчетов_Макет";
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.уатАктСверкиВзаиморасчетов_уэ.ПФ_MXL_АктСверки");
		
		ОбластьЗаголовок    = Макет.ПолучитьОбласть("Заголовок");
		ОбластьШапкаТаблицы = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьНачОстатки   = Макет.ПолучитьОбласть("НачОстатки");
		ОбластьОбороты      = Макет.ПолучитьОбласть("Обороты");
		ОбластьОборотыИтог  = Макет.ПолучитьОбласть("ОборотыИтог");
		ОбластьКонОстатки   = Макет.ПолучитьОбласть("КонОстатки");
		ОбластьПодвал       = Макет.ПолучитьОбласть("Подвал");
		
		СписокТребуемыхПараметров	= "НаименованиеДляПечатныхФорм";
		СведенияОбОбъекте			= уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(ТекущийДокумент.Организация);
		НазваниеОрганизации			= уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(СведенияОбОбъекте, СписокТребуемыхПараметров);

		Если ПустаяСтрока(НазваниеОрганизации) Тогда
			НазваниеОрганизации = ТекущийДокумент.Организация;
		КонецЕсли;
		
		НаименованиеКонтрагента = ТекущийДокумент.Контрагент.НаименованиеПолное;
		Если ПустаяСтрока(НаименованиеКонтрагента) Тогда
			НаименованиеКонтрагента = ТекущийДокумент.Контрагент;
		КонецЕсли;
		
		ОбластьЗаголовок.Параметры.НазваниеОрганизации = НазваниеОрганизации;
		ОбластьЗаголовок.Параметры.НаименованиеКонтрагента = НаименованиеКонтрагента;
		ОписаниеПериода = НСтр("en='Period: ';ru='Период: '") + ПредставлениеПериода(НачалоДня(ТекущийДокумент.ДатаНачала), КонецДня(ТекущийДокумент.ДатаОкончания), "ФП = Истина");
		ИмяПредставителяОрганизации = ТекущийДокумент.ПредставительОрганизации;
		ИмяПредставителяКонтрагента = ТекущийДокумент.ПредставительКонтрагента;
		
		Если ЗначениеЗаполнено(ТекущийДокумент.ДоговорКонтрагента) Тогда
			ТекстЗаголовка = НСтр("en='mutual calculations as of %1"
"between %2"
"and %3"
"under contract %4';ru='взаимных расчетов по состоянию на %1"
"между %2"
"и %3"
"по договору %4'");
			ТекстЗаголовка = СтрШаблон(ТекстЗаголовка, Формат(ТекущийДокумент.ДатаОкончания, "ДФ=dd.MM.yyyy"),
				НазваниеОрганизации, НаименованиеКонтрагента, СокрЛП(ТекущийДокумент.ДоговорКонтрагента.Наименование));
		Иначе
			ТекстЗаголовка = НСтр("en='mutual calculations as of %1"
"between %2"
"and %3';ru='взаимных расчетов по состоянию на %1"
"между %2"
"и %3'");
			ТекстЗаголовка = СтрШаблон(ТекстЗаголовка, Формат(ТекущийДокумент.ДатаОкончания, "ДФ=dd.MM.yyyy"),
				НазваниеОрганизации, НаименованиеКонтрагента);
		КонецЕсли;
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = ТекстЗаголовка;
		
		РеквизитыВодителя = уатОбщегоНазначения.уатПрочитатьРеквизитыВодителя(
				ТекущийДокумент.ПредставительОрганизации, ТекущийДокумент.ДатаОкончания, ТекущийДокумент.Организация);
				
		ДолжностьПредставителяОрганизации = РеквизитыВодителя.Должность;
		ФИОПредставителя = ТекущийДокумент.ПредставительОрганизации.ФИО;
		
		СтрЗаголовокТаблица = НСтр("en='We, the undersigned, ';ru='Мы, нижеподписавшиеся, '") + ?(уатОбщегоНазначения.уатЗначениеНеЗаполнено(ДолжностьПредставителяОрганизации),
		"________________", ДолжностьПредставителяОрганизации) + " " + НазваниеОрганизации 
		+ " " + ?(ФИОПредставителя<>"", ФИОПредставителя, "_______________________") + НСтр("en=' on the one hand, ';ru=', с одной стороны, '")
		+ НСтр("en='and ';ru='и '") + ?(уатОбщегоНазначения.уатЗначениеНеЗаполнено(ТекущийДокумент.ПредставительКонтрагента.Должность),
		"________________", ТекущийДокумент.ПредставительКонтрагента.Должность) + " " + НаименованиеКонтрагента + " " 
		+ ?(уатОбщегоНазначения.уатЗначениеНеЗаполнено(ТекущийДокумент.ПредставительКонтрагента),
		"_______________________", ТекущийДокумент.ПредставительКонтрагента) + НСтр("en=' on the other hand, ';ru=', с другой стороны, '")
		+ НСтр("en='made this reconciliation act that the state of mutual settlements based on the accounting data is as follows:';ru='составили настоящий акт сверки в том, что состояние взаимных расчетов по данным учета следующее:'");
		
		ОбластьЗаголовок.Параметры.СтрЗаголовокТаблица = СтрЗаголовокТаблица;
		ОбластьЗаголовок.Параметры.ВалютаДокумента = ТекущийДокумент.ВалютаДокумента;
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		ТабличныйДокумент.Вывести(ОбластьШапкаТаблицы);
		
		ИтСуммаОборотДт      = 0;
		ИтСуммаОборотКт      = 0;
		ИтСуммаОборотДтКонтр = 0;
		ИтСуммаОборотКтКонтр = 0;
		
		НачОстДебет  = ?(ТекущийДокумент.ОстатокНаНачало > 0, ТекущийДокумент.ОстатокНаНачало, 0);
		НачОстКредит = ?(ТекущийДокумент.ОстатокНаНачало < 0, -ТекущийДокумент.ОстатокНаНачало, 0);
		
		ОстатокНаКонец = ТекущийДокумент.ОстатокНаНачало + ТекущийДокумент.ПоДаннымОрганизации.Итог("Дебет") - ТекущийДокумент.ПоДаннымОрганизации.Итог("Кредит");
		
		КонОстДебет  = ?(ОстатокНаКонец > 0, ОстатокНаКонец, 0);
		КонОстКредит = ?(ОстатокНаКонец < 0, -ОстатокНаКонец, 0);
		
		ОстатокНаКонецК = -ТекущийДокумент.ОстатокНаНачало + ТекущийДокумент.ПоДаннымКонтрагента.Итог("Дебет") - ТекущийДокумент.ПоДаннымКонтрагента.Итог("Кредит");
		
		КонОстДебетК  = ?(ОстатокНаКонецК > 0, ОстатокНаКонецК, 0);
		КонОстКредитК = ?(ОстатокНаКонецК < 0, -ОстатокНаКонецК, 0);
		
		ОбластьНачОстатки.Параметры.СуммаНачальныйОстатокДт = НачОстДебет;
		ОбластьНачОстатки.Параметры.СуммаНачальныйОстатокКт = НачОстКредит;
		ТабличныйДокумент.Вывести(ОбластьНачОстатки);
		
		ТабличныйДокумент.НачатьАвтогруппировкуСтрок();
		
		МаксИндекс = Макс(ТекущийДокумент.ПоДаннымОрганизации.Количество(), ТекущийДокумент.ПоДаннымКонтрагента.Количество()) - 1;
		Для Инд = 0 По МаксИндекс Цикл
			Если Инд < ТекущийДокумент.ПоДаннымОрганизации.Количество() Тогда
				СтрокаОрганизации = ТекущийДокумент.ПоДаннымОрганизации[Инд];
				Регистратор = 	СтрокаОрганизации.Представление;
				СуммаОборотДт = СтрокаОрганизации.Дебет;
				СуммаОборотКт = СтрокаОрганизации.Кредит;
				ОбластьОбороты.Параметры.СуммаОборотДт = СуммаОборотДт;
				ОбластьОбороты.Параметры.СуммаОборотКт = СуммаОборотКт;
				ИтСуммаОборотДт = ИтСуммаОборотДт + СуммаОборотДт;
				ИтСуммаОборотКт = ИтСуммаОборотКт + СуммаОборотКт;
				ОбластьОбороты.Параметры.РегистраторПредставление = СтрокаОрганизации.Представление;
				ОбластьОбороты.Параметры.Регистратор = СтрокаОрганизации.Документ;
				ОбластьОбороты.Параметры.ДатаДокумента = Формат(СтрокаОрганизации.Дата, "ЧЦ=21; ЧДЦ=2; ДФ=dd.MM.yy");
			Иначе
				ОбластьОбороты.Параметры.СуммаОборотДт = "";
				ОбластьОбороты.Параметры.СуммаОборотКт = "";
				ОбластьОбороты.Параметры.РегистраторПредставление = "";
				ОбластьОбороты.Параметры.Регистратор = "";
				ОбластьОбороты.Параметры.ДатаДокумента = "";
			КонецЕсли;
			Если Инд < ТекущийДокумент.ПоДаннымКонтрагента.Количество() Тогда
				СтрокаОрганизации = ТекущийДокумент.ПоДаннымКонтрагента[Инд];
				Регистратор = 	СтрокаОрганизации.Представление;
				СуммаОборотДт = СтрокаОрганизации.Дебет;
				СуммаОборотКт = СтрокаОрганизации.Кредит;
				ОбластьОбороты.Параметры.СуммаОборотДтКонтр = СуммаОборотДт;
				ОбластьОбороты.Параметры.СуммаОборотКтКонтр = СуммаОборотКт;
				ИтСуммаОборотДтКонтр = ИтСуммаОборотДтКонтр + СуммаОборотДт;
				ИтСуммаОборотКтКонтр = ИтСуммаОборотКтКонтр + СуммаОборотКт;
				ОбластьОбороты.Параметры.РегистраторПредставлениеКонтр = СтрокаОрганизации.Представление;
				ОбластьОбороты.Параметры.ДатаДокументаКонтр = Формат(СтрокаОрганизации.Дата,"ЧЦ=21; ЧДЦ=2; ДФ=dd.MM.yy");
			Иначе
				ОбластьОбороты.Параметры.СуммаОборотДтКонтр = "";
				ОбластьОбороты.Параметры.СуммаОборотКтКонтр = "";
				ОбластьОбороты.Параметры.РегистраторПредставлениеКонтр = "";
				ОбластьОбороты.Параметры.ДатаДокументаКонтр = "";
			КонецЕсли;
			ТабличныйДокумент.Вывести(ОбластьОбороты);
		КонецЦикла;
		
		ТабличныйДокумент.ЗакончитьАвтогруппировкуСтрок();
		
		СверкаСогласована = уатСогласованиеДокументовСервер.ДокументСогласован(ТекущийДокумент);
		
		ОбластьОборотыИтог.Параметры.СуммаОборотДт      = ИтСуммаОборотДт;
		ОбластьОборотыИтог.Параметры.СуммаОборотКт      = ИтСуммаОборотКт;
		Если СверкаСогласована тогда
			ОбластьОборотыИтог.Параметры.СуммаОборотДтКонтр = ИтСуммаОборотДтКонтр;
			ОбластьОборотыИтог.Параметры.СуммаОборотКтКонтр = ИтСуммаОборотКтКонтр;
		КонецЕсли;
		ТабличныйДокумент.Вывести(ОбластьОборотыИтог);
		
		ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокДт = КонОстДебет;
		ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокКт = КонОстКредит;
		
		Если СверкаСогласована тогда
			ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокДтКонтр = КонОстДебетК;
			ОбластьКонОстатки.Параметры.СуммаКонечныйОстатокКтКонтр = КонОстКредитК;
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьКонОстатки);
		
		// Результаты сверки
		
		Если ТекущийДокумент.ПоДаннымОрганизации.Количество() = 0 Тогда
			РезультатыСверки = "<сверка не проведена>";
		ИначеЕсли уатОбщегоНазначения.уатЗначениеНеЗаполнено(ТекущийДокумент.ДатаОкончания) Тогда
			РезультатыСверки = "<не указана дата сверки>";
		ИначеЕсли уатОбщегоНазначения.уатЗначениеНеЗаполнено(ТекущийДокумент.Контрагент) Тогда
			РезультатыСверки = "<не указан контрагент>";
		Иначе
			РезультатыСверки = "на " + Формат(ТекущийДокумент.ДатаОкончания, "ДФ=dd.MM.yyyy") + " задолженность ";
			
			Если ОстатокНаКонец > 0 Тогда
				РезультатыСверки = РезультатыСверки + "в пользу " + СокрЛП(НазваниеОрганизации) + " " + Формат(ОстатокНаКонец, "ЧЦ=21; ЧДЦ=2") + " " + строка(ТекущийДокумент.ВалютаДокумента);
				
			ИначеЕсли ОстатокНаКонец < 0 Тогда
				РезультатыСверки = РезультатыСверки + "в пользу " + СокрЛП(НаименованиеКонтрагента) + " " + Формат(-ОстатокНаКонец, "ЧЦ=21; ЧДЦ=2") + " " + строка(ТекущийДокумент.ВалютаДокумента);
				
			Иначе
				РезультатыСверки = РезультатыСверки + "отсутствует.";
			КонецЕсли;
		КонецЕсли;
		ОбластьПодвал.Параметры.РезультатыСверки = РезультатыСверки;
		
		
		Если СверкаСогласована тогда
			ОбластьПодвал.Параметры.ПоДаннымКонтрагента = "По данным " + СокрЛП(НаименованиеКонтрагента);
			
			Если ТекущийДокумент.ПоДаннымКонтрагента.Количество() = 0 Тогда
				РезультатыСверки = "<сверка не проведена>";
			ИначеЕсли уатОбщегоНазначения.уатЗначениеНеЗаполнено(ТекущийДокумент.ДатаОкончания) Тогда
				РезультатыСверки = "<не указана дата сверки>";
			ИначеЕсли уатОбщегоНазначения.уатЗначениеНеЗаполнено(ТекущийДокумент.Контрагент) Тогда
				РезультатыСверки = "<не указан контрагент>";
			Иначе
				РезультатыСверки = "на " + Формат(ТекущийДокумент.ДатаОкончания, "ДФ=dd.MM.yyyy") + " задолженность ";
				
				Если ОстатокНаКонецК < 0 Тогда
					РезультатыСверки = РезультатыСверки + "в пользу " + СокрЛП(НазваниеОрганизации) + " " + Формат(-ОстатокНаКонецК, "ЧЦ=21; ЧДЦ=2") + " " + строка(ТекущийДокумент.ВалютаДокумента);
					
				ИначеЕсли ОстатокНаКонецК > 0 Тогда
					РезультатыСверки = РезультатыСверки + "в пользу " + СокрЛП(НаименованиеКонтрагента) + " " + Формат(ОстатокНаКонецК, "ЧЦ=21; ЧДЦ=2") + " " + строка(ТекущийДокумент.ВалютаДокумента);
					
				Иначе
					РезультатыСверки = РезультатыСверки + "отсутствует.";
				КонецЕсли;
			КонецЕсли;
			
			ОбластьПодвал.Параметры.РезультатыСверкиК = РезультатыСверки;
			
			Если ОстатокНаКонец+ОстатокНаКонецК<>0 Тогда
				ИтогСверки = "В результате сверки выявлено расхождение информации о состоянии расчетов в размере "
					+Формат(?(ОстатокНаКонец+ОстатокНаКонецК>0,1,-1)*(ОстатокНаКонец+ОстатокНаКонецК), "ЧЦ=21; ЧДЦ=2") +" "+ Строка(ТекущийДокумент.ВалютаДокумента);
				ОбластьПодвал.Параметры.ИтогСверки = Символы.ПС+ ИтогСверки+Символы.ПС+" ";
			КонецЕсли; 
		КонецЕсли;
		
		ОбластьПодвал.Параметры.НазваниеОрганизации = СокрЛП(НазваниеОрганизации);
		ОбластьПодвал.Параметры.НаименованиеКонтрагента = СокрЛП(НаименованиеКонтрагента);
		
		ОбластьПодвал.Параметры.Должность = ?(уатОбщегоНазначения.уатЗначениеНеЗаполнено(ДолжностьПредставителяОрганизации), "________________", ДолжностьПредставителяОрганизации);
		ОбластьПодвал.Параметры.ДолжностьК = ?(уатОбщегоНазначения.уатЗначениеНеЗаполнено(ТекущийДокумент.ПредставительКонтрагента.Должность), "________________", ТекущийДокумент.ПредставительКонтрагента.Должность);
		
		ОбластьПодвал.Параметры.ФИОПредставителя  = "(" + уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ТекущийДокумент.ПредставительОрганизации) + ")";
		ОбластьПодвал.Параметры.ФИОПредставителяК = "(";
		Если ЗначениеЗаполнено(ТекущийДокумент.ПредставительКонтрагента) Тогда
			ОбластьПодвал.Параметры.ФИОПредставителяК = ОбластьПодвал.Параметры.ФИОПредставителяК
			+ уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(Неопределено, ТекущийДокумент.ПредставительКонтрагента.Фамилия,
				ТекущийДокумент.ПредставительКонтрагента.Имя, ТекущийДокумент.ПредставительКонтрагента.Отчество);
		Иначе
			ОбластьПодвал.Параметры.ФИОПредставителяК = ОбластьПодвал.Параметры.ФИОПредставителяК + "_______________________";
		КонецЕсли;
		ОбластьПодвал.Параметры.ФИОПредставителяК = ОбластьПодвал.Параметры.ФИОПредставителяК + ")";
		
		ТабличныйДокумент.Вывести(ОбластьПодвал);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ТекущийДокумент);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатьАктСверки()

// Процедура - Заполнить структуру получателей печатных форм
//
// Параметры:
//  СтруктураДанныхОбъектаПечати - Структура - Структура данных получателей печатной формы
//
Процедура ЗаполнитьСтруктуруПолучателейПечатныхФорм(СтруктураДанныхОбъектаПечати) Экспорт
	
	СтруктураДанныхОбъектаПечати.ОсновнойПолучатель = "Контрагент";
	 
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Контрагент");
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("КонтактноеЛицо");
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Грузоотправитель");
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Грузополучатель");
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
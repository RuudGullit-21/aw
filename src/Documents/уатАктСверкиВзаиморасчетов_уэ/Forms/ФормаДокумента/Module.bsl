
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	уатЗащищенныеФункцииСервер.уатДокументФормаЭлементаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, Объект, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УчетОригиналовПервчиныхДокументов
	УчетОригиналовПервичныхДокументов.ПриСозданииНаСервере_ФормаДокумента(ЭтотОбъект, Элементы.ГруппаУчетПервичныхДокументов);
	уатУчетОригиналовПервичныхДокументов.ОтобразитьДатуПоследнегоИзмененияПервичныхДокументов(ЭтотОбъект, Элементы.ГруппаУчетПервичныхДокументов);
	// Конец СтандартныеПодсистемы.УчетОригиналовПервчиныхДокументов

	// Установка реквизитов формы.
	Контрагент = Объект.Контрагент;
	Договор = Объект.ДоговорКонтрагента;
	
	ВалютаРеглУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	Если Объект.Ссылка.Пустая() Тогда
		Объект.ВалютаДокумента = ВалютаРеглУчета;
	КонецЕсли;
	
	// уатСогласованиеДокументов
	ИмяДокументаСогласование = "АктСверкиВзаиморасчетов";
	ЭлементыДоступность = Новый Структура("ГруппаШапкаЛевая, ГруппаПериод, ДоговорКонтрагента, ВалютаДокумента, Страницы, ОтветственныйКомментарий");
	уатСогласованиеДокументовСервер.ПриСозданииНаСервере(ЭтотОбъект, ЭлементыДоступность);
	// Конец уатСогласованиеДокументов
	
	уатОбщегоНазначенияСервер.НастроитьПолеДоговорКонтрагента(Элементы.ДоговорКонтрагента, "Объект.Организация", "Объект.Контрагент");
	
	// уатУправлениеАвтотранспортом.МодификацияКонфигурации
	уатМодификацияКонфигурацииПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	// Конец уатУправлениеАвтотранспортом.МодификацияКонфигурации
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// уатУправлениеАвтотранспортом.МодификацияКонфигурации
	уатМодификацияКонфигурацииКлиентПереопределяемый.ПриОткрытии(ЭтотОбъект, Отказ);
	// Конец уатУправлениеАвтотранспортом.МодификацияКонфигурации
	
	уатЗащищенныеФункцииКлиент.уатДокументФормаЭлементаПриОткрытии(Отказ, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// уатСогласованиеДокументов
	уатСогласованиеДокументовКлиент.ОбновитьСтатусСогласования(ЭтотОбъект);
	// Конец уатСогласованиеДокументов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УстановитьДоступность();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// уатСогласованиеДокументов
	уатСогласованиеДокументовКлиент.ПослеЗаписи(ЭтотОбъект);
	// Конец уатСогласованиеДокументов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// уатСогласованиеДокументов
	уатСогласованиеДокументовКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр);
	// Конец уатСогласованиеДокументов
	
	// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов	
	УчетОригиналовПервичныхДокументовКлиент.ОбработчикОповещенияФормаДокумента(ИмяСобытия, ЭтотОбъект);
	// Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

// уатУправлениеАвтотранспортом.МодификацияКонфигурации
&НаКлиенте
Процедура Подключаемый_ПолеФормыНажатие(Элемент, СтандартнаяОбработка)
	
	уатМодификацияКонфигурацииКлиентПереопределяемый.ПолеФормыНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДекорацияСостояниеОригиналаНажатие()

	// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	УчетОригиналовПервичныхДокументовКлиент.ОткрытьМенюВыбораСостояния(ЭтотОбъект, Элементы.ДекорацияСостояниеОригинала);
	//Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов

КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	Если Объект.ДоговорКонтрагента.Пустая() Тогда
		Объект.ВалютаДокумента = ВалютаРеглУчета;
	Иначе
		Объект.ВалютаДокумента = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.ДоговорКонтрагента, "ВалютаВзаиморасчетов")
	КонецЕсли;
	УстановитьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура ОстатокНаНачалоПриИзменении(Элемент)
	Заглушка = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПредставительКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатОбщегоНазначенияТиповыеКлиент.уатНачалоВыбораКонтактногоЛицаКонтрагента(Элемент, СтандартнаяОбработка, Объект.Контрагент);
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	// уатСогласованиеДокументов
	уатСогласованиеДокументовКлиент.ОрганизацияПодразделениеПриИзменении(ЭтотОбъект);
	// Конец уатСогласованиеДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура ТребуетСогласованияПриИзменении(Элемент)
	
	// уатСогласованиеДокументов
	уатСогласованиеДокументовКлиент.ТребуетСогласованияПриИзменении(ЭтотОбъект);
	// Конец уатСогласованиеДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСогласованНажатие(Элемент)
	
	// уатСогласованиеДокументов
	уатСогласованиеДокументовКлиент.НадписьСогласованНажатие(ЭтотОбъект);
	// Конец уатСогласованиеДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыПоДаннымОрганизации

&НаКлиенте
Процедура ПоДаннымОрганизацииПриИзменении(Элемент)
	ПересчитатьОстатки();
КонецПроцедуры

&НаКлиенте
Процедура ПоДаннымОрганизацииДокументПриИзменении(Элемент)
	Элементы.ПоДаннымОрганизации.ТекущиеДанные.Представление = Элементы.ПоДаннымОрганизации.ТекущиеДанные.Документ;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыПоДаннымКонтрагента

&НаКлиенте
Процедура ПоДаннымКонтрагентаПриИзменении(Элемент)
	ПересчитатьОстатки();
КонецПроцедуры

&НаКлиенте
Процедура ПоДаннымКонтрагентаДокументПриИзменении(Элемент)
	Элементы.ПоДаннымКонтрагента.ТекущиеДанные.Представление = Элементы.ПоДаннымКонтрагента.ТекущиеДанные.Документ;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура НастройкаПериода(Команда)
	ДиалогПериода = Новый ДиалогРедактированияСтандартногоПериода();
	ДиалогПериода.Период.ДатаНачала = Объект.ДатаНачала;
	ДиалогПериода.Период.ДатаОкончания = Объект.ДатаОкончания;
	ДиалогПериода.Показать(Новый ОписаниеОповещения("НастройкаПериодаЗавершение", ЭтотОбъект));
КонецПроцедуры

&НаКлиенте
Процедура НастройкаПериодаЗавершение(Период, ДополнительныеПараметры) Экспорт
    Если Период <> Неопределено Тогда
        Объект.ДатаНачала = Период.ДатаНачала;
        Объект.ДатаОкончания = Период.ДатаОкончания;
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДаннымУчета(Команда)
	ТекстНСТР = "";
	
	Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(Объект.Организация) Тогда
		ТекстНСТР = ТекстНСТР + Символы.ПС + НСтр("en=' - not specified company';ru=' - не указана организация'") + ",";
	КонецЕсли;
	Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(Объект.Контрагент) Тогда
		ТекстНСТР = ТекстНСТР + Символы.ПС + НСтр("en=' - not specified counterparty';ru=' - не указан контрагент'") + ",";
	КонецЕсли;
	Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(Объект.ДатаОкончания) Тогда
		ТекстНСТР = ТекстНСТР + Символы.ПС + НСтр("en=' - not specified end date of reconciliation period';ru=' - не указана дата окончания периода сверки'") + ",";
	КонецЕсли;
	Если Объект.ДатаОкончания < Объект.ДатаНачала Тогда
		ТекстНСТР = ТекстНСТР + Символы.ПС + НСтр("en=' - incorrect period of reconciliation';ru=' - некорректный период сверки'") + ",";
	КонецЕсли;
	Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(Объект.ВалютаДокумента) Тогда
		ТекстНСТР = ТекстНСТР + Символы.ПС + НСтр("en=' - not specified currency of reconciliation';ru=' - не указана валюта сверки'") + ",";
	КонецЕсли;
	
	Если НЕ ПустаяСтрока(ТекстНСТР) Тогда
		ТекстНСТР = НСтр("en='Filling not done:';ru='Заполнение не выполнено:'") + Лев(ТекстНСТР, СтрДлина(ТекстНСТР)-1);
		уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР);
		Возврат;
	КонецЕсли;
	
	Если Объект.ПоДаннымОрганизации.Количество() > 0 Тогда
		ОповещениеОтвет = Новый ОписаниеОповещения("ЗаполнитьПоДаннымУчетаОчисткаТЧ", ЭтотОбъект);
		ТекстНСТР = НСтр("en='Before filling the tabular section will be cleared. Continue?';ru='Перед заполнением табличная часть будет очищена. Продолжить?'");
		ПоказатьВопрос(ОповещениеОтвет, ТекстНСТР, РежимДиалогаВопрос.ОКОтмена, , КодВозвратаДиалога.ОК);
	Иначе
		ЗаполнитьПоДаннымУчетаСервер();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДаннымУчетаОчисткаТЧ(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Объект.ПоДаннымОрганизации.Очистить();
		ЗаполнитьПоДаннымУчетаСервер();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДаннымОрганизации(Команда)
	Если Объект.ПоДаннымКонтрагента.Количество() > 0 Тогда
		ОповещениеОтвет = Новый ОписаниеОповещения("ЗаполнитьПоДаннымОрганизацииОчисткаТЧ", ЭтотОбъект);
		ТекстНСТР = НСтр("en='Before filling the tabular section will be cleared. Continue?';ru='Перед заполнением табличная часть будет очищена. Продолжить?'");
		ПоказатьВопрос(ОповещениеОтвет, ТекстНСТР, РежимДиалогаВопрос.ОКОтмена, , КодВозвратаДиалога.ОК);
	Иначе
		ЗаполнитьПоДаннымОрганизацииСервер();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДаннымОрганизацииОчисткаТЧ(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Объект.ПоДаннымКонтрагента.Очистить();
		ЗаполнитьПоДаннымОрганизацииСервер();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоДаннымОрганизацииСервер()
	ТабЗнач = Объект.ПоДаннымОрганизации.Выгрузить();
	ТабЗнач.Колонки.Дебет.Имя      = "КредитВрем";
	ТабЗнач.Колонки.Кредит.Имя     = "Дебет";
	ТабЗнач.Колонки.КредитВрем.Имя = "Кредит";
	Объект.ПоДаннымКонтрагента.Загрузить(ТабЗнач);
	
	ПересчитатьОстатки();
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура УстановитьДоступность()
	Элементы.ВалютаДокумента.Доступность = Объект.ДоговорКонтрагента.Пустая();
КонецПроцедуры

&НаСервере
Процедура ПересчитатьОстатки()
	ОстатокНаКонец = Объект.ОстатокНаНачало + Объект.ПоДаннымОрганизации.Итог("Дебет") - Объект.ПоДаннымОрганизации.Итог("Кредит");
	ОстатокНаКонецКонтрагент = -Объект.ОстатокНаНачало + Объект.ПоДаннымКонтрагента.Итог("Дебет") - Объект.ПоДаннымКонтрагента.Итог("Кредит");
	
	Если Объект.Расхождение <> ОстатокНаКонец + ОстатокНаКонецКонтрагент Тогда
		Объект.Расхождение = ОстатокНаКонец + ОстатокНаКонецКонтрагент;
	КонецЕсли; 
	РасхождениеКонтрагент = -Объект.Расхождение;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОстатокВзаиморасчетов(СтруктураОтбора, ДатаОстатков)
	Если НЕ ЗначениеЗаполнено(СтруктураОтбора) ИЛИ НЕ ЗначениеЗаполнено(ДатаОстатков) Тогда
		Возврат 0;
	КонецЕсли;
	
	ТекущийДолг = РегистрыНакопления.уатВзаиморасчетыСКонтрагентами.Остатки(ДатаОстатков,
		СтруктураОтбора, "Контрагент", "СуммаВзаиморасчетов").Итог("СуммаВзаиморасчетов");
	Возврат ТекущийДолг;
КонецФункции

// Процедура осуществляет заполнение табличной части документа "По данным организации"
// на основании движений по регистрам накопления
//  
// Параметры:
//  НЕТ
//
&НаСервере
Процедура ЗаполнитьПоДаннымУчетаСервер()
		
	СтруктураОтбора = Новый Структура("Контрагент, Организация", Объект.Контрагент, Объект.Организация);
	
	ТекстФильтра = "
	|		Организация = &Организация И Контрагент = &Контрагент ";
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ТекстФильтра = ТекстФильтра + " И ДоговорКонтрагента = &ДоговорКонтрагента ";
		СтруктураОтбора.Вставить("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	Иначе
		ТекстФильтра = ТекстФильтра + " И ДоговорКонтрагента.ВалютаВзаиморасчетов = &Валюта ";
		СтруктураОтбора.Вставить("Валюта", Объект.ВалютаДокумента);
	КонецЕсли;
	
	Объект.ОстатокНаНачало = ОстатокВзаиморасчетов(СтруктураОтбора, Объект.ДатаНачала);
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Взаиморасчеты.Период КАК Дата,
	|	Взаиморасчеты.Регистратор КАК ДокументРегистратор,
	|	ВЫБОР
	|		КОГДА Взаиморасчеты.СуммаВзаиморасчетовПриход - Взаиморасчеты.СуммаВзаиморасчетовРасход > 0
	|			ТОГДА Взаиморасчеты.СуммаВзаиморасчетовПриход - Взаиморасчеты.СуммаВзаиморасчетовРасход
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаДебет,
	|	ВЫБОР
	|		КОГДА Взаиморасчеты.СуммаВзаиморасчетовПриход - Взаиморасчеты.СуммаВзаиморасчетовРасход < 0
	|			ТОГДА -(Взаиморасчеты.СуммаВзаиморасчетовПриход - Взаиморасчеты.СуммаВзаиморасчетовРасход)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаКредит
	|ИЗ
	|	РегистрНакопления.уатВзаиморасчетыСКонтрагентами.Обороты(&ДатаНачала, &ДатаОкончания, Регистратор, //ТекстФильтра
	|	) КАК Взаиморасчеты
	|ГДЕ
	|	Взаиморасчеты.СуммаВзаиморасчетовПриход <> Взаиморасчеты.СуммаВзаиморасчетовРасход";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "//ТекстФильтра", ТекстФильтра);
	
	Запрос.УстановитьПараметр("ДатаНачала",         Объект.ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",      КонецДня(Объект.ДатаОкончания));
	Запрос.УстановитьПараметр("Организация",        Объект.Организация);
	Запрос.УстановитьПараметр("Контрагент",         Объект.Контрагент);
	Запрос.УстановитьПараметр("Валюта",             Объект.ВалютаДокумента);
	Запрос.УстановитьПараметр("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
	
	Результат = Запрос.Выполнить();
	ТаблицаРезультата = Результат.Выгрузить();
	
	Для Каждого ТекСтрока Из ТаблицаРезультата Цикл
		НоваяСтрока = Объект.ПоДаннымОрганизации.Добавить();
		НоваяСтрока.Дата          = ТекСтрока.Дата;
		НоваяСтрока.Документ      = ТекСтрока.ДокументРегистратор;
		НоваяСтрока.Представление = Строка(ТекСтрока.ДокументРегистратор);
		НоваяСтрока.Дебет         = ТекСтрока.СуммаДебет;
		НоваяСтрока.Кредит        = ТекСтрока.СуммаКредит;
	КонецЦикла;

	ПересчитатьОстатки();
КонецПроцедуры

#КонецОбласти

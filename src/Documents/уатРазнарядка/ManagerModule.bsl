#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	Настройки.ПриПолученииСлужебныхРеквизитов = Ложь;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатРазнарядка";
	КомандаПечати.Идентификатор = "Разнарядка";
	КомандаПечати.Представление = НСтр("en='Daily vehicles plan';ru='Разнарядка'");
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр).
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной
//                                                            параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной
//                                            параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если НЕ уатОбщегоНазначенияСервер.РазрешениеПечатиНепроведенногоДокумента(МассивОбъектов) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Разнарядка") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Разнарядка",
			"Разнарядка", ПечатнаяФорма(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
	уатОбщегоНазначенияСервер.УстановитьРедактированиеПечатныхФормДокумента(КоллекцияПечатныхФорм);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.УправлениеДоступом

// Позволяет переопределить ограничение, указанное в модуле менеджера объекта метаданных.
//
// Параметры:
//  Ограничение - Структура:
//    * Текст                             - Строка - ограничение доступа для пользователей.
//                                          Если пустая строка, значит, доступ разрешен.
//    * ТекстДляВнешнихПользователей      - Строка - ограничение доступа для внешних пользователей.
//                                          Если пустая строка, значит, доступ запрещен.
//    * ПоВладельцуБезЗаписиКлючейДоступа - Неопределено - определить автоматически.
//                                        - Булево - если Ложь, то всегда записывать ключи доступа,
//                                          если Истина, тогда не записывать ключи доступа,
//                                          а использовать ключи доступа владельца (требуется,
//                                          чтобы ограничение было строго по объекту-владельцу).
//   * ПоВладельцуБезЗаписиКлючейДоступаДляВнешнихПользователей - Неопределено, Булево - также
//                                          как у параметра ПоВладельцуБезЗаписиКлючейДоступа.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Подразделение)";
	
	Ограничение.ТекстДляВнешнихПользователей = Ограничение.Текст;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	тблДвижений = Новый ТаблицаЗначений;
	тблДвижений.Колонки.Добавить("Регистратор");
	тблДвижений.Колонки.Добавить("Период");
	тблДвижений.Колонки.Добавить("ДатаОкончания");
	тблДвижений.Колонки.Добавить("ТС");
	тблДвижений.Колонки.Добавить("Состояние");
	
	Для Каждого ТекСтрока Из ДокументСсылка.Разнарядка Цикл
		Если ЗначениеЗаполнено(ТекСтрока.ТС) Тогда
			НоваяСтрока = тблДвижений.Добавить();
			НоваяСтрока.ТС = ТекСтрока.ТС;
			НоваяСтрока.Период = уатОбщегоНазначения.уатДатаБезСекунд(ТекСтрока.ДатаВыезда);
			НоваяСтрока.ДатаОкончания = ТекСтрока.ДатаВозвращения;
			НоваяСтрока.Состояние = Справочники.уатСостояниеТС.СформированаРазнарядка;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекСтрока Из ДокументСсылка.Разнарядка Цикл
		Если ЗначениеЗаполнено(ТекСтрока.Прицеп1) Тогда
			мсвСтрокПоиска = тблДвижений.НайтиСтроки(Новый Структура("ТС, Период", ТекСтрока.Прицеп1, уатОбщегоНазначения.уатДатаБезСекунд(ТекСтрока.ДатаВыезда)));
			Если мсвСтрокПоиска.Количество() = 0 Тогда
				НоваяСтрока = тблДвижений.Добавить();
				НоваяСтрока.ТС = ТекСтрока.Прицеп1;
				НоваяСтрока.Период = уатОбщегоНазначения.уатДатаБезСекунд(ТекСтрока.ДатаВыезда);
				НоваяСтрока.ДатаОкончания = ТекСтрока.ДатаВозвращения;
				НоваяСтрока.Состояние = Справочники.уатСостояниеТС.СформированаРазнарядка;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекСтрока.Прицеп2) Тогда
			мсвСтрокПоиска = тблДвижений.НайтиСтроки(Новый Структура("ТС, Период", ТекСтрока.Прицеп2, уатОбщегоНазначения.уатДатаБезСекунд(ТекСтрока.ДатаВыезда)));
			Если мсвСтрокПоиска.Количество() = 0 Тогда
				НоваяСтрока = тблДвижений.Добавить();
				НоваяСтрока.ТС = ТекСтрока.Прицеп2;
				НоваяСтрока.Период = уатОбщегоНазначения.уатДатаБезСекунд(ТекСтрока.ДатаВыезда);
				НоваяСтрока.ДатаОкончания = ТекСтрока.ДатаВозвращения;
				НоваяСтрока.Состояние = Справочники.уатСостояниеТС.СформированаРазнарядка;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСостоянийТС", тблДвижений);
	
КонецПроцедуры

Процедура ВыполнитьКонтроль(ДокументСсылка, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь) Экспорт
	
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Функция ПечатнаяФорма(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_Разнарядка";
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ПервыйДокумент = Истина;
	
	ЛинияГраницы = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
	
	мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_Разнарядка_Разнарядка";
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.уатРазнарядка.ПФ_MXL_Разнарядка");
	
	ЗаголовокТС 			= Макет.ПолучитьОбласть("Заголовок|КолонкаТС" );
	ЗаголовокПрицепы 		= Макет.ПолучитьОбласть("Заголовок|КолонкаПрицепы" );
	ЗаголовокЗадание 		= Макет.ПолучитьОбласть("Заголовок|КолонкаЗадание" );
	ЗаголовокСопровождающие = Макет.ПолучитьОбласть("Заголовок|КолонкаСопровождающие" );
	
	ШапкаТС 				= Макет.ПолучитьОбласть("Шапка|КолонкаТС" );
	ШапкаПрицепы 			= Макет.ПолучитьОбласть("Шапка|КолонкаПрицепы" );
	ШапкаЗадание 			= Макет.ПолучитьОбласть("Шапка|КолонкаЗадание" );
	ШапкаСопровождающие 	= Макет.ПолучитьОбласть("Шапка|КолонкаСопровождающие" );
	
	СтрокаТС 				= Макет.ПолучитьОбласть("Строка|КолонкаТС" );
	СтрокаПрицепы 			= Макет.ПолучитьОбласть("Строка|КолонкаПрицепы" );
	СтрокаЗадание 			= Макет.ПолучитьОбласть("Строка|КолонкаЗадание" );
	СтрокаСопровождающие 	= Макет.ПолучитьОбласть("Строка|КолонкаСопровождающие" );
	
	Строка1ТС 				= Макет.ПолучитьОбласть("Строка1|КолонкаТС" );
	Строка1Прицепы 			= Макет.ПолучитьОбласть("Строка1|КолонкаПрицепы" );
	Строка1Задание 			= Макет.ПолучитьОбласть("Строка1|КолонкаЗадание" );
	Строка1Сопровождающие 	= Макет.ПолучитьОбласть("Строка1|КолонкаСопровождающие" );
	
	Строка2ТС 				= Макет.ПолучитьОбласть("Строка2|КолонкаТС" );
	Строка2Прицепы 			= Макет.ПолучитьОбласть("Строка2|КолонкаПрицепы" );
	Строка2Задание 			= Макет.ПолучитьОбласть("Строка2|КолонкаЗадание" );
	Строка2Сопровождающие 	= Макет.ПолучитьОбласть("Строка2|КолонкаСопровождающие" );
	
	Для Каждого ТекущийДокумент Из МассивОбъектов Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатРазнарядкаРазнарядка.НомерСтроки,
		|	уатРазнарядкаРазнарядка.Водитель,
		|	уатРазнарядкаРазнарядка.Водитель2,
		|	уатРазнарядкаРазнарядка.ДатаВыезда,
		|	уатРазнарядкаРазнарядка.ДатаВозвращения,
		|	уатРазнарядкаРазнарядка.Контрагент,
		|	уатРазнарядкаРазнарядка.АдресПрибытия,
		|	уатРазнарядкаРазнарядка.ВремяПрибытия,
		|	уатРазнарядкаРазнарядка.Подразделение,
		|	уатРазнарядкаРазнарядка.ТС.ГаражныйНомер КАК ГаражныйНомер,
		|	уатРазнарядкаРазнарядка.ТС.ГосударственныйНомер КАК ГосударственныйНомер,
		|	уатРазнарядкаРазнарядка.ТС.Модель.Представление КАК Модель,
		|	уатРазнарядкаРазнарядка.Кондуктор,
		|	уатРазнарядкаРазнарядка.Кондуктор2,
		|	уатРазнарядкаРазнарядка.АдресПрибытия2,
		|	уатРазнарядкаРазнарядка.АдресУбытия2,
		|	уатРазнарядкаРазнарядка.ВремяПрибытия2,
		|	уатРазнарядкаРазнарядка.ВремяУбытия2,
		|	уатРазнарядкаРазнарядка.Контрагент2,
		|	уатРазнарядкаРазнарядка.Подразделение2,
		|	уатРазнарядкаРазнарядка.АдресУбытия1,
		|	уатРазнарядкаРазнарядка.ВремяУбытия,
		|	уатРазнарядкаРазнарядка.Прицеп1,
		|	уатРазнарядкаРазнарядка.Прицеп2
		|ИЗ
		|	Документ.уатРазнарядка.Разнарядка КАК уатРазнарядкаРазнарядка
		|ГДЕ
		|	уатРазнарядкаРазнарядка.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", ТекущийДокумент.Ссылка);
		
		ДанныеРазнарядки = Запрос.Выполнить().Выгрузить();
		
		ЕстьСопроповождающие = Ложь;
		ЕстьПрицепы = Ложь;
		Для Каждого ТекСтрока Из ДанныеРазнарядки Цикл
			ЕстьСопроповождающие = ЕстьСопроповождающие ИЛИ (ЗначениеЗаполнено(ТекСтрока.Кондуктор) ИЛИ ЗначениеЗаполнено(ТекСтрока.Кондуктор2));
			ЕстьПрицепы = ЕстьПрицепы ИЛИ (ЗначениеЗаполнено(ТекСтрока.Прицеп1) ИЛИ ЗначениеЗаполнено(ТекСтрока.Прицеп2));
			Если ЕстьСопроповождающие И ЕстьПрицепы Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла; 
		
		// Заголовок
		ЯчеекОбъединить = 7;
		ТекстНСТР = НСтр("en='Daily vehicles plan №%1 from %2 y.';ru='Разнарядка на выпуск ТС №%1 от %2 г.'");
		
		ПечатьПрефиксовВключена = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ТекущийДокумент.Организация, ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ВыводитьПрефиксПриПечати"));
		Если ПечатьПрефиксовВключена Тогда
			ТекстНСТР = СтрШаблон(ТекстНСТР, Строка(ТекущийДокумент.Номер), Формат(ТекущийДокумент.Дата, "ДЛФ=Д"));	
		Иначе
			ТекНомер = уатОбщегоНазначенияКлиентСервер.НомерДокументаНаПечать(ТекущийДокумент.Номер, Истина, Истина);
			ТекстНСТР = СтрШаблон(ТекстНСТР, ТекНомер, Формат(ТекущийДокумент.Дата, "ДЛФ=Д"));	
		КонецЕсли;
		
		ЗаголовокТС.Параметры.Заголовок = ТекстНСТР;
		СписокТребуемыхПараметров	= "НаименованиеДляПечатныхФорм";
		СведенияОбОбъекте			= уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(ТекущийДокумент.Организация);
		ЗаголовокТС.Параметры.Организация		= уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(СведенияОбОбъекте, СписокТребуемыхПараметров);
		ЗаголовокТС.Параметры.Колонна = ТекущийДокумент.Колонна;
		ТабличныйДокумент.Вывести(ЗаголовокТС);
		Если ЕстьПрицепы Тогда
			ЯчеекОбъединить = ЯчеекОбъединить + 1;
			ТабличныйДокумент.Присоединить(ЗаголовокПрицепы);
		КонецЕсли;
		ТабличныйДокумент.Присоединить(ЗаголовокЗадание);
		Если ЕстьСопроповождающие Тогда
			ЯчеекОбъединить = ЯчеекОбъединить + 1;
			ТабличныйДокумент.Присоединить(ЗаголовокСопровождающие);
		КонецЕсли; 
		ТабличныйДокумент.Область(3,1,3,ЯчеекОбъединить).Объединить();
		ТабличныйДокумент.Область(4,1,4,ЯчеекОбъединить).Объединить();
		
		// Шапка
		ТабличныйДокумент.Вывести(ШапкаТС);
		Если ЕстьПрицепы Тогда
			ТабличныйДокумент.Присоединить(ШапкаПрицепы);
		КонецЕсли;
		ТабличныйДокумент.Присоединить(ШапкаЗадание);
		Если ЕстьСопроповождающие Тогда
			ТабличныйДокумент.Присоединить(ШапкаСопровождающие);
		КонецЕсли;
		
		// Строки табличной части
		Для Каждого ТекСтрока Из ДанныеРазнарядки Цикл
			
			ОтобразитьВтороеЗадание = Ложь;
			
			Если ЗначениеЗаполнено(ТекСтрока.Контрагент2) Или ЗначениеЗаполнено(ТекСтрока.Подразделение2) Или ЗначениеЗаполнено(ТекСтрока.АдресПрибытия2) 
				Или ЗначениеЗаполнено(ТекСтрока.АдресУбытия2) Или ЗначениеЗаполнено(ТекСтрока.ВремяУбытия2) или ЗначениеЗаполнено(ТекСтрока.ВремяПрибытия2) Тогда
				ОтобразитьВтороеЗадание = Истина;
			КонецЕсли;
			
			// Строка 1 - Группа 1
			Область = ?(ОтобразитьВтороеЗадание,Строка1ТС,СтрокаТС);
			Область.Параметры.ГаражныйНомер = ТекСтрока.ГаражныйНомер;
			Область.Параметры.ГосНомер = ТекСтрока.ГосударственныйНомер;
			Область.Параметры.Модель = ТекСтрока.Модель;
			ТабличныйДокумент.Вывести(Область);
			
			// Строка 1 - Группа 2
			Если ЕстьПрицепы Тогда
				Область = ?(ОтобразитьВтороеЗадание,Строка1Прицепы,СтрокаПрицепы);
				Область.Параметры.Прицепы = Строка(ТекСтрока.Прицеп1)
				+ ?(НЕ ЗначениеЗаполнено(ТекСтрока.Прицеп2),"", ", "  + Символы.ПС + ТекСтрока.Прицеп2);
				ТабличныйДокумент.Присоединить(Область);
			КонецЕсли;
			
			// Строка 1 - Группа 3
			Область = ?(ОтобразитьВтороеЗадание,Строка1Задание,СтрокаЗадание);
			Область.Параметры.Водители = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ТекСтрока.Водитель)
			+ ?(НЕ ЗначениеЗаполнено(ТекСтрока.Водитель2),"", ", " 
			+ Символы.ПС + уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ТекСтрока.Водитель2));
			Область.Параметры.ДатаВыезда = Формат(ТекСтрока.ДатаВыезда, "ДФ=dd.MM.yy") + " " + Формат(ТекСтрока.ДатаВыезда, "ДФ=ЧЧ:мм");
			Область.Параметры.ДатаВозвращения = Формат(ТекСтрока.ДатаВозвращения, "ДФ=dd.MM.yy") + " " + Формат(ТекСтрока.ДатаВозвращения, "ДФ=ЧЧ:мм");
			Область.Параметры.Контрагент = ТекСтрока.Контрагент;
			Область.Параметры.Подразделение = ТекСтрока.Подразделение;
			Область.Параметры.АдресПрибытия = уатОбщегоНазначения.ПолучитьАдресСтрокой(ТекСтрока.АдресПрибытия);
			Область.Параметры.АдресУбытия = уатОбщегоНазначения.ПолучитьАдресСтрокой(ТекСтрока.АдресУбытия1);
			Область.Параметры.ВремяПрибытия = Формат(ТекСтрока.ВремяПрибытия, "ДФ=ЧЧ:мм");
			Область.Параметры.ВремяУбытия = Формат(ТекСтрока.ВремяУбытия, "ДФ=ЧЧ:мм");
			ТабличныйДокумент.Присоединить(Область);
			
			// Строка 1 - Группа 4
			Если ЕстьСопроповождающие Тогда
				Область = ?(ОтобразитьВтороеЗадание,Строка1Сопровождающие,СтрокаСопровождающие);
				Область.Параметры.СопровождающиеЛица = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ТекСтрока.Кондуктор) 
				+ ?(НЕ ЗначениеЗаполнено(ТекСтрока.Кондуктор2),"", ", " 
				+ Символы.ПС + уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ТекСтрока.Кондуктор2));
				ТабличныйДокумент.Присоединить(Область);
			КонецЕсли;
			
			Если ОтобразитьВтороеЗадание Тогда
				
				// Строка 1 - Группа 1
				ТабличныйДокумент.Вывести(Строка2ТС);
				
				// Строка 1 - Группа 2
				Если ЕстьПрицепы Тогда
					ТабличныйДокумент.Присоединить(Строка2Прицепы);
				КонецЕсли;
				
				// Строка 1 - Группа 3
				Строка2Задание.Параметры.Контрагент2 = ТекСтрока.Контрагент2;
				Строка2Задание.Параметры.Подразделение2 = ТекСтрока.Подразделение2;
				Строка2Задание.Параметры.АдресПрибытия2 = уатОбщегоНазначения.ПолучитьАдресСтрокой(ТекСтрока.АдресПрибытия2);
				Строка2Задание.Параметры.АдресУбытия2 = уатОбщегоНазначения.ПолучитьАдресСтрокой(ТекСтрока.АдресУбытия2);
				Строка2Задание.Параметры.ВремяПрибытия2 = Формат(ТекСтрока.ВремяПрибытия2, "ДФ=ЧЧ:мм");
				Строка2Задание.Параметры.ВремяУбытия2 = Формат(ТекСтрока.ВремяУбытия2, "ДФ=ЧЧ:мм");
				ТабличныйДокумент.Присоединить(Строка2Задание);
				
				// Строка 1 - Группа 4
				Если ЕстьСопроповождающие Тогда
					ТабличныйДокумент.Присоединить(Строка2Сопровождающие);
				КонецЕсли;
				
			КонецЕсли;
			
		КонецЦикла;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ТекущийДокумент);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатнаяФорма()

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	уатЗащищенныеФункцииСервер.уатДокументФормаЭлементаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, Объект, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	Элементы.ГруппаВидОперации.Видимость = уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП();
	Элементы.РазнарядкаРасширенноеЗаполнение.Видимость = уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП()
		ИЛИ уатОбщегоНазначенияПовтИсп.ВариантПоставкиПРОФ();
	
	ОбновитьСтатусыЗанятостиСервер();
	ОбновитьПринадлежностьТС();
	
	уатОбщегоНазначенияСервер.НастроитьПолеПодразделение(Элементы.Подразделение, "Объект.Организация");
	уатОбщегоНазначенияСервер.НастроитьПолеПодразделение(Элементы.РазнарядкаПодразделение, "Объект.Организация");
	уатОбщегоНазначенияСервер.НастроитьПолеПодразделение(Элементы.РазнарядкаПодразделение2, "Объект.Организация");
	
	ПредставлениеЕдиницыИзмеренияВеса = уатОбщегоНазначенияПовтИсп.ПолучитьПредставлениеОсновнойЕдиницыИзмеренияВеса();
	Если ЗначениеЗаполнено(ПредставлениеЕдиницыИзмеренияВеса) Тогда
		Элементы.РазнарядкаВесГруза1.Заголовок = НСтр("en='Weight, ';ru='Вес груза 1, '") + ПредставлениеЕдиницыИзмеренияВеса;
		Элементы.РазнарядкаВесГруза2.Заголовок         = НСтр("en='Weight, ';ru='Вес груза 2, '") + ПредставлениеЕдиницыИзмеренияВеса;
	КонецЕсли;
	
	ПредставлениеЕдиницыИзмеренияОбъема = уатОбщегоНазначенияПовтИсп.ПолучитьПредставлениеОсновнойЕдиницыИзмеренияОбъема();
	Если ЗначениеЗаполнено(ПредставлениеЕдиницыИзмеренияОбъема) Тогда
		Элементы.РазнарядкаОбъемГруза1.Заголовок = НСтр("en='Volume, ';ru='Объем груза 1, '") + ПредставлениеЕдиницыИзмеренияОбъема;
		Элементы.РазнарядкаОбъемГруза2.Заголовок         = НСтр("en='Volume, ';ru='Объем груза 2, '") + ПредставлениеЕдиницыИзмеренияОбъема;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	уатЗащищенныеФункцииКлиент.уатДокументФормаЭлементаПриОткрытии(Отказ, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если Объект.Проведен Тогда
		ТолькоПросмотр = Истина;
	КонецЕсли;
	
	УстановитьВидимостьДоступность();
	
	Модифицированность = Ложь;
	
	СтруктураНастроек = ВосстановитьНастройки();
	НастройкиНекорректны = (СтруктураНастроек = Неопределено ИЛИ ТипЗнч(СтруктураНастроек) <> Тип("Структура"));
	
	// отображение строки доп. информации
	Если НастройкиНекорректны ИЛИ (НЕ СтруктураНастроек.Свойство("ОтображатьДопИнфо")) Тогда
		ОтображатьДопИнфо = Ложь;
	Иначе
		ОтображатьДопИнфо = СтруктураНастроек.ОтображатьДопИнфо;
	КонецЕсли;
	Элементы.РазнарядкаПоказатьДопИнформацию.Пометка = ОтображатьДопИнфо;
	ОтобразитьСкрытьДопИнформацию();
	
	ВидОперацииПриИзменении();
	
	Если РазделятьСотрудниковПосменно
		И уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация, "ЗаполнениеВодителей")
		<> ПредопределенноеЗначение("Перечисление.уатВариантыЗаполненияВодителей.ПоГрафику") Тогда
		
		РазделятьСотрудниковПосменно = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ОбновитьСтатусыЗанятостиСервер();
	ОбновитьПринадлежностьТС();
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	СформироватьПодготовку();
	
	Если РазделятьСотрудниковПосменно
		И уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация, "ЗаполнениеВодителей")
		<> ПредопределенноеЗначение("Перечисление.уатВариантыЗаполненияВодителей.ПоГрафику") Тогда
		
		РазделятьСотрудниковПосменно = Ложь;
	КонецЕсли;
	
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура КолоннаПриИзменении(Элемент)
	СформироватьПодготовку();
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	СформироватьПодготовку();
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

&НаКлиенте
Процедура ПанельДопИнформацииПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Разнарядка.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	уатОбщегоНазначенияКлиент.ПанельДопИнформацииПоТСПриНажатии(
		ЭтотОбъект, 
		Элемент, 
		ДанныеСобытия, 
		СтандартнаяОбработка,
		ТекущиеДанные.ТС
	);
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРазнарядка

&НаКлиенте
Процедура РазнарядкаКартинкаПринадлежностьПриИзменении(Элемент)
	ТекСтрока = Элементы.Разнарядка.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекСтрока = Элементы.Разнарядка.ТекущиеДанные;
	Если НоваяСтрока Тогда
		ТекСтрока.ДатаВыезда = НачалоДня(Объект.Дата);
		Если НЕ Копирование Тогда
			Попытка
				ТекСтрока.Контрагент = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнойПокупатель");
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьСписокВыбораЭкипажа();
	ОбновитьПринадлежностьТС();
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаВодительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ДиалогВыбораСотрудника(Элемент, Элементы.Разнарядка.ТекущиеДанные.Водитель, Новый Структура("Организация", Объект.Организация), СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаВодительОткрытие(Элемент, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ОткрытьФормуСотрудника(Элементы.Разнарядка.ТекущиеДанные.Водитель, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаВодительАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Ожидание = 0 Тогда //выбор из списка
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаВодительОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаВодитель2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ДиалогВыбораСотрудника(Элемент, Элементы.Разнарядка.ТекущиеДанные.Водитель2, Новый Структура("Организация", Объект.Организация), СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаВодитель2Открытие(Элемент, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ОткрытьФормуСотрудника(Элементы.Разнарядка.ТекущиеДанные.Водитель2, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаВодитель2АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Ожидание = 0 Тогда //выбор из списка
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаВодитель2ОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаКондукторНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ДиалогВыбораСотрудника(Элемент, Элементы.Разнарядка.ТекущиеДанные.Кондуктор, Новый Структура("Организация", Объект.Организация), СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаКондукторОткрытие(Элемент, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ОткрытьФормуСотрудника(Элементы.Разнарядка.ТекущиеДанные.Кондуктор, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаКондукторАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Ожидание = 0 Тогда //выбор из списка
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаКондукторОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаКондуктор2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ДиалогВыбораСотрудника(Элемент, Элементы.Разнарядка.ТекущиеДанные.Кондуктор2, Новый Структура("Организация", Объект.Организация), СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаКондуктор2Открытие(Элемент, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ОткрытьФормуСотрудника(Элементы.Разнарядка.ТекущиеДанные.Кондуктор2, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаКондуктор2АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Ожидание = 0 Тогда //выбор из списка
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаКондуктор2ОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаТСПриИзменении(Элемент)
	
	ТекСтрока = Элементы.Разнарядка.ТекущиеДанные;
	ПриИзмененииТС(ТекСтрока);
	
	Если ЗначениеЗаполнено(ТекСтрока.ТС)
		И уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрока.ТС, "ПринадлежностьТС")
		= ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное") Тогда
		МестонахождениеТС = уатОбщегоНазначения.МестонахождениеТС(ТекСтрока.ТС, ТекСтрока.ДатаВыезда);
	КонецЕсли;

	
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаТСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Объект.Организация);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
		СтруктураОтбора.Вставить("Подразделение", Объект.Подразделение);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Колонна) Тогда
		СтруктураОтбора.Вставить("Колонна", Объект.Колонна);
	КонецЕсли;
	
	ТекДанные = Элементы.Разнарядка.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекДанные.ПринадлежностьТС)
		ИЛИ ЗначениеЗаполнено(ТекДанные.МодельТС)
		ИЛИ ЗначениеЗаполнено(ТекДанные.ТипТС) Тогда
		Если ЗначениеЗаполнено(ТекДанные.ПринадлежностьТС) Тогда
			ПринадлежностьТС = Новый Массив();
			ПринадлежностьТС.Добавить(ТекДанные.ПринадлежностьТС);
			СтруктураОтбора.Вставить("ПринадлежностьТС", ПринадлежностьТС);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекДанные.МодельТС) Тогда
			МодельТС = Новый Массив();
			МодельТС.Добавить(ТекДанные.МодельТС);
			СтруктураОтбора.Вставить("Модель", МодельТС);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекДанные.ТипТС) Тогда
			ТипТС = Новый Массив();
			ТипТС.Добавить(ТекДанные.ТипТС);
			СтруктураОтбора.Вставить("ТипТС", ТипТС);
		КонецЕсли;

	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацияРазнарядка.ВыпискаМаршрутныхЛистов") Тогда
		ПринадлежностьТС = Новый Массив();
		ПринадлежностьТС.Добавить(ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное"));
		ПринадлежностьТС.Добавить(ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Привлеченное"));
		ПринадлежностьТС.Добавить(ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Виртуальное"));
		
		СтруктураОтбора.Вставить("ПринадлежностьТС", ПринадлежностьТС);
	КонецЕсли;

	уатИнтерфейсВводаТС.РеквизитТСНачалоВыбора(Элемент, Элементы.Разнарядка.ТекущиеДанные.ТС, ДанныеВыбора, СтандартнаяОбработка, СтруктураОтбора);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаТСАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Объект.Организация);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
		СтруктураОтбора.Вставить("Подразделение", Объект.Подразделение);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Колонна) Тогда
		СтруктураОтбора.Вставить("Колонна", Объект.Колонна);
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацияРазнарядка.ВыпискаМаршрутныхЛистов") Тогда
		ПринадлежностьТС = Новый Массив();
		ПринадлежностьТС.Добавить(ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное"));
		ПринадлежностьТС.Добавить(ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Привлеченное"));
		ПринадлежностьТС.Добавить(ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Виртуальное"));
		
		СтруктураОтбора.Вставить("ПринадлежностьТС", ПринадлежностьТС);
	КонецЕсли;
	
	уатИнтерфейсВводаТС.РеквизитТСАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка, СтруктураОтбора);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтруктураОтбора = Новый Структура;
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Объект.Организация);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
		СтруктураОтбора.Вставить("Подразделение", Объект.Подразделение);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Колонна) Тогда
		СтруктураОтбора.Вставить("Колонна", Объект.Колонна);
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацияРазнарядка.ВыпискаМаршрутныхЛистов") Тогда
		ПринадлежностьТС = Новый Массив();
		ПринадлежностьТС.Добавить(ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное"));
		ПринадлежностьТС.Добавить(ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Привлеченное"));
		ПринадлежностьТС.Добавить(ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Виртуальное"));
		
		СтруктураОтбора.Вставить("ПринадлежностьТС", ПринадлежностьТС);
	КонецЕсли;
	
	уатИнтерфейсВводаТС.РеквизитТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка, СтруктураОтбора);
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииТС(ТекСтрока)
	ОбновитьСписокВыбораЭкипажа();
	
	ТекСтрока.РежимРаботыТС = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрока.ТС, "ОсновнойРежимРаботы");
	РазнарядкаРежимРаботыТСПриИзменении(Неопределено);
	
	СоставТС = уатОбщегоНазначения.уатСоставТС(ТекСтрока.ТС);
	тСч = 0;
	Для Каждого тПрицеп из СоставТС Цикл
		тСч = тСч + 1;
		Если тСч = 1 Тогда 
			ТекСтрока.Прицеп1 = тПрицеп;
		ИначеЕсли тСч = 2 Тогда
			ТекСтрока.Прицеп2 = тПрицеп;
		Иначе	
			Прервать; 
		КонецЕсли;
	КонецЦикла;	
	
	ОбновитьСтатусыЗанятостиСервер(ТекСтрока.НомерСтроки);
	ОбновитьПринадлежностьТС();
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаВодительПриИзменении(Элемент)
	
	ОбновитьСтатусыЗанятостиСервер(Элементы.Разнарядка.ТекущиеДанные.НомерСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаВодитель2ПриИзменении(Элемент)
	
	ОбновитьСтатусыЗанятостиСервер(Элементы.Разнарядка.ТекущиеДанные.НомерСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаДатаВыездаПриИзменении(Элемент)
	
	ТекСтрока = Элементы.Разнарядка.ТекущиеДанные;
	
	Если ТекСтрока.ДатаВыезда > ТекСтрока.ДатаВозвращения Тогда
		ТекСтрока.ДатаВозвращения = ТекСтрока.ДатаВыезда;
	КонецЕсли;
	
	// заполняем водителей
	уатОбщегоНазначения.ЗаполнитьЭкипажТС(ТекСтрока.ТС, Объект.Организация, ТекСтрока.ДатаВыезда,
		ТекСтрока.Водитель, ТекСтрока.Водитель2, ТекСтрока.Кондуктор, ТекСтрока.Кондуктор2,
		Истина, ТекСтрока.ДатаВозвращения, Ложь, Истина);
	
	ОбновитьСтатусыЗанятостиСервер(ТекСтрока.НомерСтроки);
	
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаДатаВозвращенияПриИзменении(Элемент)
	
	ТекСтрока =  Элементы.Разнарядка.ТекущиеДанные;
	
	Если ТекСтрока.ДатаВыезда > ТекСтрока.ДатаВозвращения Тогда
		ТекСтрока.ДатаВыезда = ТекСтрока.ДатаВозвращения;
	КонецЕсли;	
	
	// заполняем водителей
	уатОбщегоНазначения.ЗаполнитьЭкипажТС(ТекСтрока.ТС, Объект.Организация, ТекСтрока.ДатаВыезда,
		ТекСтрока.Водитель, ТекСтрока.Водитель2, ТекСтрока.Кондуктор, ТекСтрока.Кондуктор2,
		Истина, ТекСтрока.ДатаВозвращения, Ложь, Истина);
		
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаПрицеп1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтруктураОтбор = Новый Структура("Организация", Объект.Организация);
	уатИнтерфейсВводаТС.РеквизитТСНачалоВыбора(Элемент, Элементы.Разнарядка.ТекущиеДанные.Прицеп1, ДанныеВыбора, СтандартнаяОбработка, СтруктураОтбор);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаПрицеп1АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СтруктураОтбор = Новый Структура("Организация", Объект.Организация);
	уатИнтерфейсВводаТС.РеквизитТСАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка, СтруктураОтбор);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаПрицеп1ОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтруктураОтбор = Новый Структура("Организация", Объект.Организация);
	уатИнтерфейсВводаТС.РеквизитТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка, СтруктураОтбор);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаПрицеп2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтруктураОтбор = Новый Структура("Организация", Объект.Организация);
	уатИнтерфейсВводаТС.РеквизитТСНачалоВыбора(Элемент, Элементы.Разнарядка.ТекущиеДанные.Прицеп2, ДанныеВыбора, СтандартнаяОбработка, СтруктураОтбор);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаПрицеп2АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СтруктураОтбор = Новый Структура("Организация", Объект.Организация);
	уатИнтерфейсВводаТС.РеквизитТСАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка, СтруктураОтбор);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаПрицеп2ОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтруктураОтбор = Новый Структура("Организация", Объект.Организация);
	уатИнтерфейсВводаТС.РеквизитТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка, СтруктураОтбор);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаГруз1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ДиалогВыбораГруза(Элемент,Элементы.Разнарядка.ТекущиеДанные.Груз1,Элемент,СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаГруз2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ДиалогВыбораГруза(Элемент,Элементы.Разнарядка.ТекущиеДанные.Груз2,Элемент,СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаРежимРаботыТСПриИзменении(Элемент)
	ТекСтрока = Элементы.Разнарядка.ТекущиеДанные;
	
	Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(ТекСтрока.РежимРаботыТС) Тогда
		Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
			ВремяВыездаПодразделения = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Подразделение, ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ВремяВыездаПЛ"));
			ВремяВозращенияПодразделения = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Подразделение, ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ВремяВозращенияПЛ"));
			
			Если ЗначениеЗаполнено(ВремяВыездаПодразделения) Тогда 
				ТекСтрока.ДатаВыезда = НачалоДня(Объект.Дата) + (ВремяВыездаПодразделения - '00010101');
			Иначе
				ТекСтрока.ДатаВыезда = НачалоДня(Объект.Дата) + (уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация, ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ВремяВыездаПЛ")) - '00010101');
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ВремяВозращенияПодразделения) Тогда 
				ТекСтрока.ДатаВозвращения = НачалоДня(Объект.Дата) + (ВремяВозращенияПодразделения - '00010101');
			Иначе
				ТекСтрока.ДатаВозвращения = НачалоДня(Объект.Дата) + (уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация, ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ВремяВозращенияПЛ")) - '00010101');
			КонецЕсли;
			
		Иначе
			ТекСтрока.ДатаВыезда = НачалоДня(Объект.Дата) + (уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация, ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ВремяВыездаПЛ")) - '00010101');
			ТекСтрока.ДатаВозвращения = НачалоДня(Объект.Дата) + (уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация, ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ВремяВозращенияПЛ")) - '00010101');
		КонецЕсли;
	Иначе	
		РежимРаботыТС_НачалоРаботы = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрока.РежимРаботыТС, "НачалоРаботы");
		РежимРаботыТС_КонецРаботы = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрока.РежимРаботыТС, "КонецРаботы");
		ТекСтрока.ДатаВыезда = НачалоДня(Объект.Дата) + (РежимРаботыТС_НачалоРаботы - НачалоДня(РежимРаботыТС_НачалоРаботы));
		ТекСтрока.ДатаВозвращения = НачалоДня(Объект.Дата) + (РежимРаботыТС_КонецРаботы - НачалоДня(РежимРаботыТС_КонецРаботы));
	КонецЕсли;	
	Если ТекСтрока.ДатаВозвращения <= ТекСтрока.ДатаВыезда Тогда
		ТекСтрока.ДатаВозвращения = НачалоДня(Объект.Дата) + 86400 + (ТекСтрока.ДатаВозвращения - НачалоДня(ТекСтрока.ДатаВозвращения));
	КонецЕсли;	
	
	// заполняем водителей
	уатОбщегоНазначения.ЗаполнитьЭкипажТС(ТекСтрока.ТС, Объект.Организация, ТекСтрока.ДатаВыезда,
		ТекСтрока.Водитель, ТекСтрока.Водитель2, ТекСтрока.Кондуктор, ТекСтрока.Кондуктор2,
		Истина, ТекСтрока.ДатаВозвращения, Ложь, Истина);
		
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаМаршрут1ПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Разнарядка.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	мМаршрут = ТекущиеДанные.Маршрут1;
	мМаршрутЭтапы = ЭтапыМаршрута(мМаршрут);
	Если мМаршрутЭтапы.Количество() > 0 Тогда
		ТекущиеДанные.АдресПрибытия = мМаршрутЭтапы[0].ПунктОтправления;
		Если уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(мМаршрут, "ПредставлениеМаршрутаОднимПунктом") Тогда
			ТекущиеДанные.АдресУбытия1 = мМаршрутЭтапы[мМаршрутЭтапы.Количество()-1].ПунктОтправления;
		Иначе
			ТекущиеДанные.АдресУбытия1 = мМаршрутЭтапы[мМаршрутЭтапы.Количество()-1].ПунктПрибытия;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазнарядкаМаршрут2ПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Разнарядка.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	мМаршрут = ТекущиеДанные.Маршрут2;
	мМаршрутЭтапы = ЭтапыМаршрута(мМаршрут);
	Если мМаршрутЭтапы.Количество() > 0 Тогда
		ТекущиеДанные.АдресПрибытия2 = мМаршрутЭтапы[0].ПунктОтправления;
		Если уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(мМаршрут, "ПредставлениеМаршрутаОднимПунктом") Тогда
			ТекущиеДанные.АдресУбытия2 = мМаршрутЭтапы[мМаршрутЭтапы.Количество()-1].ПунктОтправления;
		Иначе
			ТекущиеДанные.АдресУбытия2 = мМаршрутЭтапы[мМаршрутЭтапы.Количество()-1].ПунктПрибытия;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ЗаполнитьПодготовку(Команда)
	СформироватьПодготовку();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПлану(Команда)
	
	Если Объект.Разнарядка.Количество() > 0 Тогда
		ТекстНСТР = НСтр("en='Before filling tabular section will be cleared! Continue?';ru='Перед заполнением табличная часть будет очищена! Продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоПлануПродолжение", ЭтотОбъект), ТекстНСТР, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
		
	ЗаполнитьПоПлануФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПлануПродолжение(РезультатВопроса, ДопПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.Разнарядка.Очистить();
		ЗаполнитьПоПлануФрагмент();
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоПлануФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПлануФрагмент()
	
	Обработчик = Новый ОписаниеОповещения("ЗаполнитьПоПлануФрагментЗавершение", ЭтотОбъект);
	ПараметрыОткрытияФормы = Новый Структура();
	ПараметрыОткрытияФормы.Вставить("Заголовок", Нстр("ru = 'Выберите сценарий'"));
	ПараметрыОткрытияФормы.Вставить("Отбор", Новый Структура("АвтоматическиСоздаватьРазнарядкиНаВыпускТС", Истина));
	ОткрытьФорму("Справочник.уатСценарииПланирования.Форма.ФормаВыбора", ПараметрыОткрытияФормы, ЭтотОбъект,,,,Обработчик);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПлануФрагментЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПоПлануФрагментЗавершениеСервер(Результат);

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоПлануФрагментЗавершениеСервер(Сценарий)
	
	ОМ_уатОбщегоНазначения_проф = ОбщегоНазначения.ОбщийМодуль("уатОбщегоНазначения_проф");
	ХарактеристикиСценария = ОМ_уатОбщегоНазначения_проф.ЗаполнитьХарактеристикиСценария(Сценарий);
	
	ИспользоватьКраткосрочноеПланирование   = ХарактеристикиСценария.ИспользоватьКраткосрочноеПланирование;
	ПериодичностьКраткосрочногоПланирования = ХарактеристикиСценария.ПериодичностьКраткосрочногоПланирования;
	Периодичность                           = ХарактеристикиСценария.Периодичность;
	ПериодичностьФормирования = ?(ИспользоватьКраткосрочноеПланирование, ПериодичностьКраткосрочногоПланирования, Периодичность);

	АвтоматическийРежимРаспределения        = ХарактеристикиСценария.РежимЗаполненияВесаОбъемаГруза = 1;

	НачДата = НачалоДня(Объект.Дата);
	КонДата = НачалоДня(Объект.Дата);
	уатОбщегоНазначенияТиповые.уатВыровнятьПериод(НачДата, КонДата, ПериодичностьФормирования);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Сценарий",      Сценарий);
	Запрос.УстановитьПараметр("Организация",   Объект.Организация);
	Запрос.УстановитьПараметр("НачДата",       НачДата);
	Запрос.УстановитьПараметр("КонДата",       КонДата);
	Запрос.УстановитьПараметр("ПериодичностьФормирования", ПериодичностьФормирования);
	Запрос.Текст =
	"ВЫБРАТЬ
	|	уатПланРаботыТСОбороты.Контрагент КАК Контрагент,
	|	уатПланРаботыТСОбороты.Маршрут КАК Маршрут,
	|	ВЫБОР
	|		КОГДА уатПланРаботыТСОбороты.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			ТОГДА уатПланРаботыТСОбороты.Сценарий.Номенклатура
	|		ИНАЧЕ уатПланРаботыТСОбороты.Номенклатура
	|	КОНЕЦ КАК Груз,
	|	уатПланРаботыТСОбороты.ДетализацияПланирования КАК ТС,
	|	ВЫБОР
	|		КОГДА уатПланРаботыТСОбороты.ПараметрВыработки = ЗНАЧЕНИЕ(Справочник.уатПараметрывыработки.ВесГруза)
	|			ТОГДА уатПланРаботыТСОбороты.КоличествоОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВесГруза,
	|	ВЫБОР
	|		КОГДА уатПланРаботыТСОбороты.ПараметрВыработки = ЗНАЧЕНИЕ(Справочник.уатПараметрывыработки.Объем)
	|			ТОГДА уатПланРаботыТСОбороты.КоличествоОборот
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОбъемГруза
	|ПОМЕСТИТЬ втПлан
	|ИЗ
	|	РегистрНакопления.уатПланРаботыТС.Обороты(
	|			&НачДата,
	|			&КонДата,
	|			Регистратор,
	|			Сценарий = &Сценарий
	|				И Организация = &Организация
	|				И Периодичность = &ПериодичностьФормирования) КАК уатПланРаботыТСОбороты
	|ГДЕ
	|	уатПланРаботыТСОбороты.КоличествоОборот <> 0
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втПлан.Контрагент КАК Контрагент,
	|	втПлан.Маршрут КАК Маршрут1,
	|	втПлан.Груз КАК Груз1,
	|	втПлан.ТС КАК ТС,
	|	втПлан.ТС.ОсновнойРежимРаботы КАК РежимРаботыТС,
	|	ВЫБОР
	|		КОГДА втПлан.ТС.ОсновнойРежимРаботы = ЗНАЧЕНИЕ(Справочник.уатРежимыРаботыТС.ПустаяСсылка)
	|			ТОГДА &ДатаВыездаНастройка
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(&ДатаНач, СЕКУНДА, РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), втПлан.ТС.ОсновнойРежимРаботы.НачалоРаботы, СЕКУНДА))
	|	КОНЕЦ КАК ДатаВыезда,
	|	ВЫБОР
	|		КОГДА втПлан.ТС.ОсновнойРежимРаботы = ЗНАЧЕНИЕ(Справочник.уатРежимыРаботыТС.ПустаяСсылка)
	|			ТОГДА &ДатаВозвращенияНастройка
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(&ДатаНач, СЕКУНДА, РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), втПлан.ТС.ОсновнойРежимРаботы.КонецРаботы, СЕКУНДА))
	|	КОНЕЦ КАК ДатаВозвращения,
	|	СУММА(втПлан.ВесГруза) КАК ВесГруза1,
	|	СУММА(втПлан.ОбъемГруза) КАК ОбъемГруза1
	|ИЗ
	|	втПлан КАК втПлан
	|
	|СГРУППИРОВАТЬ ПО
	|	втПлан.Контрагент,
	|	втПлан.Маршрут,
	|	втПлан.Груз,
	|	втПлан.ТС,
	|	ВЫБОР
	|		КОГДА втПлан.ТС.ОсновнойРежимРаботы = ЗНАЧЕНИЕ(Справочник.уатРежимыРаботыТС.ПустаяСсылка)
	|			ТОГДА &ДатаВыездаНастройка
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(&ДатаНач, СЕКУНДА, РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), втПлан.ТС.ОсновнойРежимРаботы.НачалоРаботы, СЕКУНДА))
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА втПлан.ТС.ОсновнойРежимРаботы = ЗНАЧЕНИЕ(Справочник.уатРежимыРаботыТС.ПустаяСсылка)
	|			ТОГДА &ДатаВозвращенияНастройка
	|		ИНАЧЕ ДОБАВИТЬКДАТЕ(&ДатаНач, СЕКУНДА, РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), втПлан.ТС.ОсновнойРежимРаботы.КонецРаботы, СЕКУНДА))
	|	КОНЕЦ";
	
	ЕдиницаИзмеренияВеса    = Константы.уатЕдиницаИзмеренияВеса.Получить();
	ЕдиницаИзмеренияВесаКг  = ЕдиницаИзмеренияВеса = Перечисления.уатЕдиницыИзмеренияВеса.Килограмм;
	
	ЕдиницаИзмеренияОбъема  = Константы.уатЕдиницаИзмеренияОбъема.Получить();
	ЕдиницаИзмеренияОбъемаЛ = ЕдиницаИзмеренияОбъема = Перечисления.уатЕдиницыИзмеренияОбъема.Литр;
	
	НастройкиОрганизации_ВремяВыездаПЛ = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.ВремяВыездаПЛ);
	НастройкиОрганизации_ВремяВозвращенияПЛ = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.ВремяВозращенияПЛ);
	
	Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
		НастройкиПодразделения_ВремяВыездаПЛ = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Подразделение, ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ВремяВыездаПЛ"));
		НастройкиПодразделения_ВремяВозвращенияПЛ = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Подразделение, ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ВремяВозращенияПЛ"));
		
		Если ЗначениеЗаполнено(НастройкиПодразделения_ВремяВыездаПЛ) Тогда 
			ДатаВыездаНастройка = НачалоДня(Объект.Дата) + (НастройкиПодразделения_ВремяВыездаПЛ - '00010101');
		Иначе
			ДатаВыездаНастройка = НачалоДня(Объект.Дата) + (НастройкиОрганизации_ВремяВыездаПЛ - '00010101');
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НастройкиПодразделения_ВремяВозвращенияПЛ) Тогда 
			ДатаВозвращенияНастройка = НачалоДня(Объект.Дата) + (НастройкиПодразделения_ВремяВозвращенияПЛ - '00010101');
		Иначе
			ДатаВозвращенияНастройка = НачалоДня(Объект.Дата) + (НастройкиОрганизации_ВремяВозвращенияПЛ - '00010101');
		КонецЕсли;
		
	Иначе
		ДатаВыездаНастройка = НачалоДня(Объект.Дата) + (НастройкиОрганизации_ВремяВыездаПЛ - '00010101');
		ДатаВозвращенияНастройка = НачалоДня(Объект.Дата) + (НастройкиОрганизации_ВремяВозвращенияПЛ - '00010101');
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(Объект.Дата));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(Объект.Дата));
	Запрос.УстановитьПараметр("ДатаДокумента", Объект.Дата);
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	Запрос.УстановитьПараметр("ДатаВыездаНастройка", ДатаВыездаНастройка);
	Запрос.УстановитьПараметр("ДатаВозвращенияНастройка", ДатаВозвращенияНастройка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если ТипЗнч(Выборка.ТС) = Тип("СправочникСсылка.уатТС") 
			И Выборка.ТС.ЭтоГруппа = Истина Тогда
			Продолжить;
		КонецЕсли;
			
		НоваяСтрока = Объект.Разнарядка.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		
		Если Не ЗначениеЗаполнено(НоваяСтрока.Груз1) Тогда
			НоваяСтрока.Груз1 = Сценарий.Номенклатура;
		КонецЕсли;
		
		Если АвтоматическийРежимРаспределения Тогда
			
			КоличествоДней = (НачалоДня(КонДата) - НачалоДня(НачДата)) / 60 / 60 / 24;
			НоваяСтрока.ВесГруза1      = НоваяСтрока.ВесГруза1 / (КоличествоДней + 1);
			НоваяСтрока.ОбъемГруза1    = НоваяСтрока.ОбъемГруза1 / (КоличествоДней + 1);
		КонецЕсли;
		
		Если ЕдиницаИзмеренияВесаКг Тогда
			НоваяСтрока.ВесГруза1 = НоваяСтрока.ВесГруза1 * 1000;
		КонецЕсли;
		
		Если ЕдиницаИзмеренияОбъемаЛ Тогда
			НоваяСтрока.ОбъемГруза1 = НоваяСтрока.ОбъемГруза1 * 1000;
		КонецЕсли;
			
		тСч = 0;
		СоставТС = уатОбщегоНазначения.уатСоставТС(Выборка.ТС);
		Для Каждого тПрицеп из СоставТС Цикл
			тСч = тСч + 1;
			Если тСч = 1 Тогда 
				НоваяСтрока.Прицеп1 = тПрицеп;
			ИначеЕсли тСч = 2 Тогда
				НоваяСтрока.Прицеп2 = тПрицеп;
			Иначе	
				Прервать; 
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.ДатаВозвращения)
			И НЕ ЗначениеЗаполнено(НоваяСтрока.ДатаВыезда) Тогда
			НоваяСтрока.ДатаВыезда      = НачалоДня(ТекущаяДатаСеанса());
			НоваяСтрока.ДатаВозвращения = КонецДня(ТекущаяДатаСеанса());
		КонецЕсли;

		Если НоваяСтрока.ДатаВозвращения <= НоваяСтрока.ДатаВыезда Тогда
			НоваяСтрока.ДатаВозвращения = НачалоДня(Объект.Дата) + 86400 + (НоваяСтрока.ДатаВозвращения - НачалоДня(НоваяСтрока.ДатаВозвращения));
		КонецЕсли;
		
		уатОбщегоНазначения.ЗаполнитьЭкипажТС(НоваяСтрока.ТС, Объект.Организация, НоваяСтрока.ДатаВыезда,
			НоваяСтрока.Водитель, НоваяСтрока.Водитель2, НоваяСтрока.Кондуктор, НоваяСтрока.Кондуктор2,
			Истина, НоваяСтрока.ДатаВозвращения, Ложь);
		
		НоваяСтрока.МодельТС         = Выборка.ТС;
		НоваяСтрока.ПринадлежностьТС = Выборка.ТС;
		НоваяСтрока.ТипТС            = Выборка.ТС;
	КонецЦикла;
	
	// разделение по сменам
	Если РазделятьСотрудниковПосменно Тогда
		РазделитьСотрудниковПосменно();
	КонецЕсли;
	
	// Дописываем статусы
	ОбновитьСтатусыЗанятостиСервер();
	ОбновитьПринадлежностьТС();
	
	Объект.Разнарядка.Сортировать("ДатаВыезда, КартинкаПринадлежность, ТС");

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСобственныеТС(Команда)
	СформироватьПодготовку(ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное"));
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПривлеченныеТС(Команда)
	СформироватьПодготовку(ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Привлеченное"));
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВиртуальныеТС(Команда)
	СформироватьПодготовку(ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Виртуальное"));
КонецПроцедуры

&НаКлиенте
Процедура РасширеннаяФормаЗаполнения(Команда)
	ОткрытьФорму("ОбщаяФорма.уатФормаЗаполненияТС", Новый Структура("ДатаПланирования", Объект.Дата),ЭтотОбъект,,,, Новый ОписаниеОповещения("ФормаЗаполненияТСЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатусыЗанятостиТС(Команда)
	ОбновитьСтатусыЗанятостиСервер();
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьДокументы(Команда)
	Отказ = Ложь;
	Если Объект.Ссылка.Пустая() Тогда
		ТекстНСТР = НСтр("en='Before you perform this operation, you must record the current document. Continue?';ru='Перед выполнением данной операции необходимо записать текущий документ. Продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ПроверитьДокументыЗавершение", ЭтотОбъект), ТекстНСТР,	РежимДиалогаВопрос.ОКОтмена);
        Возврат;
	КонецЕсли;
	
	ПроверитьДокументыФрагмент(Отказ);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДопИнформацию(Команда)
	Элементы.РазнарядкаПоказатьДопИнформацию.Пометка = НЕ Элементы.РазнарядкаПоказатьДопИнформацию.Пометка;
	ОтобразитьСкрытьДопИнформацию();
	СохранитьНастройки();
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВсеСтроки(Команда)
	Объект.Разнарядка.Очистить();
КонецПроцедуры

&НаКлиенте
Процедура ОперацияВыпискаПутевыхЛистов(Команда)
	
	Если Элементы.ФормаОперацияВыпискаПутевыхЛистов.Пометка Тогда 
		Возврат;
	КонецЕсли;
	
	Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацияРазнарядка.ВыпискаПутевыхЛистов");
	ВидОперацииПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацияВыпискаМаршрутныхЛистов(Команда)
	
	Если Элементы.ФормаОперацияВыпискаМаршрутныхЛистов.Пометка Тогда 
		Возврат;
	КонецЕсли;
	
	Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацияРазнарядка.ВыпискаМаршрутныхЛистов");
	ВидОперацииПриИзменении();
	
КонецПроцедуры


#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ВидОперацииПриИзменении()
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацияРазнарядка.ВыпискаМаршрутныхЛистов") Тогда
		Элементы.ФормаОперацияВыпискаМаршрутныхЛистов.Пометка = Истина;
		Элементы.ФормаОперацияВыпискаПутевыхЛистов.Пометка    = Ложь;
	Иначе
		Элементы.ФормаОперацияВыпискаМаршрутныхЛистов.Пометка = Ложь;
		Элементы.ФормаОперацияВыпискаПутевыхЛистов.Пометка    = Истина;
	КонецЕсли;

	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьДоступность()
	
	Если Объект.Проведен Тогда
		Элементы.РазнарядкаЗаполнитьПодготовку.Доступность = Ложь;
		Элементы.РазнарядкаОбновитьСтатусыЗанятостиТС.Доступность = Ложь;
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацияРазнарядка.ВыпискаМаршрутныхЛистов") Тогда
		Элементы.РазнарядкаПрицеп1.Заголовок = Нстр("en = 'Trailer 1'; ru = 'Прицеп 1'");
		Элементы.РазнарядкаПрицеп2.Заголовок = Нстр("en = 'Trailer 2'; ru = 'Прицеп 2'");
		Элементы.РазнарядкаГруппаЗаполнениеПЛ.Видимость = Ложь;
		Элементы.РазнарядкаГруппаЗаполнениеМЛ.Видимость = Истина;
		Элементы.РазнарядкаГруппа14.Видимость = Ложь;
		Элементы.РазнарядкаГруппа8.Видимость  = Ложь;
		Элементы.РазнарядкаГруппа9.Видимость  = Ложь;
		Элементы.РазнарядкаГруппа10.Видимость = Ложь;
		Элементы.РазнарядкаГруппа11.Видимость = Ложь;
		Элементы.РазнарядкаГруппа12.Видимость = Ложь;
		Элементы.РазнарядкаГруппа13.Видимость = Ложь;
		Элементы.РазнарядкаГруппа15.Видимость = Ложь;
		Элементы.РазнарядкаМаршрут1.Видимость = Ложь;
		Элементы.РазнарядкаМаршрут2.Видимость = Ложь;
		Элементы.РазнарядкаГруппа3.Видимость  = Ложь;
		Элементы.РазнарядкаГруппа16.Видимость = Ложь;
	Иначе
		Элементы.РазнарядкаПрицеп1.Заголовок = Нстр("en = 'Equipment 1'; ru = 'Оборудование 1'");
		Элементы.РазнарядкаПрицеп2.Заголовок = Нстр("en = 'Equipment 2'; ru = 'Оборудование 2'");
		Элементы.РазнарядкаГруппаЗаполнениеПЛ.Видимость  = Истина;
		Элементы.РазнарядкаГруппаЗаполнениеМЛ.Видимость  = Ложь;
		Элементы.РазнарядкаГруппа14.Видимость = Истина;
		Элементы.РазнарядкаГруппа8.Видимость  = Истина;
		Элементы.РазнарядкаГруппа9.Видимость  = Истина;
		Элементы.РазнарядкаГруппа10.Видимость = Истина;
		Элементы.РазнарядкаГруппа11.Видимость = Истина;
		Элементы.РазнарядкаГруппа12.Видимость = Истина;
		Элементы.РазнарядкаГруппа13.Видимость = Истина;
		Элементы.РазнарядкаГруппа15.Видимость = Истина;
		Элементы.РазнарядкаМаршрут1.Видимость = Истина;
		Элементы.РазнарядкаМаршрут2.Видимость = Истина;
		Элементы.РазнарядкаГруппа3.Видимость  = Истина;
		Элементы.РазнарядкаГруппа16.Видимость = Истина;
	КонецЕсли;
	
	Элементы.РазделятьСотрудниковПосменно.Доступность = ЗначениеЗаполнено(Объект.Организация)
		И уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация, "ЗаполнениеВодителей")
		= ПредопределенноеЗначение("Перечисление.уатВариантыЗаполненияВодителей.ПоГрафику");
	
КонецПроцедуры


&НаКлиенте
Процедура СформироватьПодготовку(ПринадлежностьТС = Неопределено)
	Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(Объект.Организация) Тогда
		ТекстНСТР = НСтр("en='Not specified company!';ru='Не указана организация!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		Возврат;
	КонецЕсли;
	
	#Если Клиент Тогда
		Если Объект.Разнарядка.Количество() > 0 Тогда
			ТекстНСТР = НСтр("en='Before filling tabular section will be cleared! Continue?';ru='Перед заполнением табличная часть будет очищена! Продолжить?'");
			ПоказатьВопрос(Новый ОписаниеОповещения("СформироватьПодготовкуЗавершение", ЭтотОбъект, ПринадлежностьТС), ТекстНСТР, РежимДиалогаВопрос.ДаНет);
			Возврат;
		КонецЕсли;
	#КонецЕсли
		
	СформироватьПодготовкуФрагмент(ПринадлежностьТС);
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПодготовкуЗавершение(РезультатВопроса, ПринадлежностьТС) Экспорт
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.Разнарядка.Очистить();
	ИначеЕсли НЕ ЗначениеЗаполнено(ПринадлежностьТС) Тогда
		Возврат;
	КонецЕсли;
	
	СформироватьПодготовкуФрагмент(ПринадлежностьТС);

КонецПроцедуры

&НаКлиенте
Процедура СформироватьПодготовкуФрагмент(ПринадлежностьТС = Неопределено, МассивТС = Неопределено)
	
	СформироватьПодготовкуСервер(ПринадлежностьТС, МассивТС);
	Модифицированность = Истина;

КонецПроцедуры

&НаСервере
Процедура СформироватьПодготовкуСервер(ПринадлежностьТС, МассивТС)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ЭтоМЛ", Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацияРазнарядка.ВыпискаМаршрутныхЛистов"));
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	уатТС.Модель КАК Модель,
	               |	уатТС.ГаражныйНомер КАК ГарНомер,
	               |	уатТС.ГосударственныйНомер КАК ГосНомер,
	               |	уатТС.Гараж КАК Гараж,
	               |	уатТС.Ссылка КАК ТС,
	               |	уатМестонахождениеТССрезПоследних.Организация КАК Организация,
	               |	уатМестонахождениеТССрезПоследних.Колонна КАК Колонна,
	               |	уатТС.ОсновнойРежимРаботы КАК РежимРаботыТС,
	               |	ВЫБОР
	               |		КОГДА уатТС.ОсновнойРежимРаботы = ЗНАЧЕНИЕ(Справочник.уатРежимыРаботыТС.ПустаяСсылка)
	               |			ТОГДА &ДатаВыездаНастройка
	               |		ИНАЧЕ ДОБАВИТЬКДАТЕ(&ДатаНач, СЕКУНДА, РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), уатТС.ОсновнойРежимРаботы.НачалоРаботы, СЕКУНДА))
	               |	КОНЕЦ КАК ДатаВыезда,
	               |	ВЫБОР
	               |		КОГДА уатТС.ОсновнойРежимРаботы = ЗНАЧЕНИЕ(Справочник.уатРежимыРаботыТС.ПустаяСсылка)
	               |			ТОГДА &ДатаВозвращенияНастройка
	               |		ИНАЧЕ ДОБАВИТЬКДАТЕ(&ДатаНач, СЕКУНДА, РАЗНОСТЬДАТ(ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0), уатТС.ОсновнойРежимРаботы.КонецРаботы, СЕКУНДА))
	               |	КОНЕЦ КАК ДатаВозвращения
	               |ПОМЕСТИТЬ втТС
	               |ИЗ
	               |	Справочник.уатТС КАК уатТС
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатМестонахождениеТС.СрезПоследних(&ДатаНач, ) КАК уатМестонахождениеТССрезПоследних
	               |		ПО уатТС.Ссылка = уатМестонахождениеТССрезПоследних.ТС
	               |ГДЕ";
	Если МассивТС = Неопределено Тогда
		Запрос.Текст = Запрос.Текст + "
	               |	ВЫБОР
	               |			КОГДА &ЭтоМЛ
	               |					И (уатТС.ПринадлежностьТС = ЗНАЧЕНИЕ(Перечисление.уатПринадлежностьТС.Виртуальное)
	               |					ИЛИ уатТС.ПринадлежностьТС = ЗНАЧЕНИЕ(Перечисление.уатПринадлежностьТС.Привлеченное))
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ уатМестонахождениеТССрезПоследних.Организация = &Организация
	               |		КОНЕЦ
	               |	И уатТС.Модель.ВидМоделиТС = ЗНАЧЕНИЕ(Перечисление.уатВидыМоделейТС.Автотранспорт)
	               |	И (уатТС.ТипТС = &ПустойТипТС
	               |			ИЛИ НЕ уатТС.ТипТС.ВидТС В (&СписокПрицепов))
	               |	И (уатТС.ДатаВыбытия = &ПустаяДата
	               |			ИЛИ уатТС.ДатаВыбытия > &ДатаДокумента)";
		Если ЗначениеЗаполнено(Объект.Колонна) Тогда
			Запрос.Текст = Запрос.Текст + "
			|И ВЫБОР
			|			КОГДА &ЭтоМЛ
			|			И (уатТС.ПринадлежностьТС = ЗНАЧЕНИЕ(Перечисление.уатПринадлежностьТС.Виртуальное)
			|			ИЛИ уатТС.ПринадлежностьТС = ЗНАЧЕНИЕ(Перечисление.уатПринадлежностьТС.Привлеченное)) ТОГДА ИСТИНА
			|	Иначе уатМестонахождениеТССрезПоследних.Колонна В Иерархии (&Колонна) Конец";
			Запрос.УстановитьПараметр("Колонна", Объект.Колонна);
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
			Запрос.Текст = Запрос.Текст + "
			|	И ВЫБОР
			|			КОГДА &ЭтоМЛ
			|					И (уатТС.ПринадлежностьТС = ЗНАЧЕНИЕ(Перечисление.уатПринадлежностьТС.Виртуальное)
			|					ИЛИ уатТС.ПринадлежностьТС = ЗНАЧЕНИЕ(Перечисление.уатПринадлежностьТС.Привлеченное))
			|				ТОГДА ИСТИНА
			|	Иначе уатМестонахождениеТССрезПоследних.Подразделение В Иерархии (&Подразделение)
			|	Конец";
			Запрос.УстановитьПараметр("Подразделение",Объект.Подразделение);
		КонецЕсли;
	Иначе
		Запрос.УстановитьПараметр("МассивТС", МассивТС);
		Запрос.Текст = Запрос.Текст + "
			|	уатТС.Ссылка В (&МассивТС)";
	КонецЕсли;
	Если ЗначениеЗаполнено(ПринадлежностьТС) Тогда
		Запрос.Текст = Запрос.Текст + "
		|	И уатТС.ПринадлежностьТС = &ПринадлежностьТС";
		Запрос.УстановитьПараметр("ПринадлежностьТС", ПринадлежностьТС);
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	втТС.Модель КАК Модель,
	               |	втТС.ГарНомер КАК ГарНомер,
	               |	втТС.ГосНомер КАК ГосНомер,
	               |	втТС.Гараж КАК Гараж,
	               |	втТС.ТС КАК ТС,
	               |	втТС.Организация КАК Организация,
	               |	втТС.Колонна КАК Колонна,
	               |	втТС.РежимРаботыТС КАК РежимРаботыТС,
	               |	втТС.ДатаВыезда КАК ДатаВыезда,
	               |	втТС.ДатаВозвращения КАК ДатаВозвращения,
	               |	МИНИМУМ(ЕСТЬNULL(уатСостояниеТС.Состояние.РазрешитьВыпискуДокументов, ИСТИНА)) КАК ИспользоватьПриЗаполненииРазнарядки
	               |ИЗ
	               |	втТС КАК втТС
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатСостояниеТС КАК уатСостояниеТС
	               |		ПО втТС.ТС = уатСостояниеТС.ТС
	               |			И втТС.ДатаВыезда >= уатСостояниеТС.Период
	               |			И (ВЫБОР
	               |				КОГДА уатСостояниеТС.ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1)
	               |						И уатСостояниеТС.ДатаОкончания <> НЕОПРЕДЕЛЕНО
	               |					ТОГДА втТС.ДатаВыезда < уатСостояниеТС.ДатаОкончания
	               |				ИНАЧЕ ИСТИНА
	               |			КОНЕЦ)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	втТС.ДатаВозвращения,
	               |	втТС.ДатаВыезда,
	               |	втТС.ГосНомер,
	               |	втТС.Колонна,
	               |	втТС.ТС,
	               |	втТС.Организация,
	               |	втТС.Модель,
	               |	втТС.РежимРаботыТС,
	               |	втТС.ГарНомер,
	               |	втТС.Гараж
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	втТС.ТС.Наименование";

	НастройкиОрганизации_ВремяВыездаПЛ = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.ВремяВыездаПЛ);
	НастройкиОрганизации_ВремяВозвращенияПЛ = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.ВремяВозращенияПЛ);
	
	Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
		НастройкиПодразделения_ВремяВыездаПЛ = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Подразделение, ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ВремяВыездаПЛ"));
		НастройкиПодразделения_ВремяВозвращенияПЛ = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Подразделение, ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ВремяВозращенияПЛ"));
		
		Если ЗначениеЗаполнено(НастройкиПодразделения_ВремяВыездаПЛ) Тогда 
			ДатаВыездаНастройка = НачалоДня(Объект.Дата) + (НастройкиПодразделения_ВремяВыездаПЛ - '00010101');
		Иначе
			ДатаВыездаНастройка = НачалоДня(Объект.Дата) + (НастройкиОрганизации_ВремяВыездаПЛ - '00010101');
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НастройкиПодразделения_ВремяВозвращенияПЛ) Тогда 
			ДатаВозвращенияНастройка = НачалоДня(Объект.Дата) + (НастройкиПодразделения_ВремяВозвращенияПЛ - '00010101');
		Иначе
			ДатаВозвращенияНастройка = НачалоДня(Объект.Дата) + (НастройкиОрганизации_ВремяВозвращенияПЛ - '00010101');
		КонецЕсли;
		
	Иначе
		ДатаВыездаНастройка = НачалоДня(Объект.Дата) + (НастройкиОрганизации_ВремяВыездаПЛ - '00010101');
		ДатаВозвращенияНастройка = НачалоДня(Объект.Дата) + (НастройкиОрганизации_ВремяВозвращенияПЛ - '00010101');
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ПустойТипТС", Справочники.уатТипыТС.ПустаяСсылка());
	Запрос.УстановитьПараметр("СписокПрицепов", уатОбщегоНазначения.уатСписокВидовТСПрицепов());
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(Объект.Дата));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(Объект.Дата));
	Запрос.УстановитьПараметр("ДатаДокумента", Объект.Дата);
	Запрос.УстановитьПараметр("ПустаяДата", '00010101');
	Запрос.УстановитьПараметр("ДатаВыездаНастройка", ДатаВыездаНастройка);
	Запрос.УстановитьПараметр("ДатаВозвращенияНастройка", ДатаВозвращенияНастройка);
	
	тблРазнарядка = Объект.Разнарядка.Выгрузить();
	тблРазнарядка.Колонки.Добавить("ГарНомер");
	тблРазнарядка.Колонки.Добавить("ГосНомер");
	Выборка = Запрос.Выполнить().Выгрузить();
	мТС = Выборка.ВыгрузитьКолонку("ТС");
	УчитыватьГрафикиРаботыТСприЗаполненииРазнарядки = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.УчитыватьГрафикиРаботыТСприЗаполненииРазнарядки)
	 И МассивТС = Неопределено;
	Если УчитыватьГрафикиРаботыТСприЗаполненииРазнарядки Тогда
		тзПоГрафику = уатОбщегоНазначения.ТСРаботаетПоГрафику(мТС, НачалоДня(Объект.Дата));
	КонецЕсли;
	
	Для Каждого ТекСтрока Из Выборка Цикл
		Если ТекСтрока.ИспользоватьПриЗаполненииРазнарядки ИЛИ МассивТС <> Неопределено Тогда
			Если УчитыватьГрафикиРаботыТСприЗаполненииРазнарядки Тогда
				мПоГрафику = тзПоГрафику.НайтиСтроки(Новый Структура("ТС", ТекСтрока.ТС));
				Если мПоГрафику.Количество() = 0 Тогда
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			НоваяСтрока = тблРазнарядка.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ТекСтрока из тблРазнарядка Цикл
		// Заполняем прицепы по умолчанию
		тСч = 0;
		СоставТС = уатОбщегоНазначения.уатСоставТС(ТекСтрока.ТС);
		Для Каждого тПрицеп из СоставТС Цикл
			тСч = тСч + 1;
			Если тСч = 1 Тогда 
				ТекСтрока.Прицеп1 = тПрицеп;
			ИначеЕсли тСч = 2 Тогда
				ТекСтрока.Прицеп2 = тПрицеп;
			Иначе	
				Прервать; 
			КонецЕсли;
		КонецЦикла;	
		
		Если ТекСтрока.ДатаВозвращения <= ТекСтрока.ДатаВыезда Тогда
			ТекСтрока.ДатаВозвращения = НачалоДня(Объект.Дата) + 86400 + (ТекСтрока.ДатаВозвращения - НачалоДня(ТекСтрока.ДатаВозвращения));
		КонецЕсли;
		
		// заполняем водителей
		Если Объект.ВидОперации = Перечисления.уатВидыОперацияРазнарядка.ВыпискаПутевыхЛистов Тогда
			уатОбщегоНазначения.ЗаполнитьЭкипажТС(ТекСтрока.ТС, Объект.Организация, ТекСтрока.ДатаВыезда,
				ТекСтрока.Водитель, ТекСтрока.Водитель2, ТекСтрока.Кондуктор, ТекСтрока.Кондуктор2,
				Истина, ТекСтрока.ДатаВозвращения, Ложь);
		КонецЕсли;
	КонецЦикла;
	
	Объект.Разнарядка.Загрузить(тблРазнарядка);
	
	// разделение по сменам
	Если РазделятьСотрудниковПосменно Тогда
		РазделитьСотрудниковПосменно();
	КонецЕсли;
	
	// дописываем статусы
	ОбновитьСтатусыЗанятостиСервер();
	ОбновитьПринадлежностьТС();
	
	Объект.Разнарядка.Сортировать("ДатаВыезда, КартинкаПринадлежность, ТС");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатусыЗанятостиСервер(ТекСтрокаНомер = Неопределено)
	уатОбщегоНазначения.ОбновитьСтатусыЗанятости(Объект.Разнарядка, Объект.Дата, Объект.Организация, ТекСтрокаНомер, Истина);
КонецПроцедуры

&НаСервере
Процедура ОбновитьПринадлежностьТС()
	Для Каждого ТекСтрока Из Объект.Разнарядка Цикл
		Если ТекСтрока.ТС.ПринадлежностьТС = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Привлеченное") Тогда
			ТекСтрока.КартинкаПринадлежность = 12;
		ИначеЕсли ТекСтрока.ТС.ПринадлежностьТС = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное") Тогда
			ТекСтрока.КартинкаПринадлежность = 11;
		Иначе
			ТекСтрока.КартинкаПринадлежность = 1;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокВыбораЭкипажа()
	ТекСтрока = Элементы.Разнарядка.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.РазнарядкаВодитель.СписокВыбора.Очистить();
	Элементы.РазнарядкаВодитель2.СписокВыбора.Очистить();
	Элементы.РазнарядкаКондуктор.СписокВыбора.Очистить();
	Элементы.РазнарядкаКондуктор2.СписокВыбора.Очистить();
	
	ЭкипажТССписок = уатЗащищенныеФункцииСервер.ЭкипажТССписок(ТекСтрока.ТС, Объект.Дата);
	ЭкипажТССписок_Количество = ЭкипажТССписок.Количество();
	
	Элементы.РазнарядкаВодитель.КнопкаВыпадающегоСписка = (ЭкипажТССписок_Количество > 0);
	Элементы.РазнарядкаВодитель2.КнопкаВыпадающегоСписка = (ЭкипажТССписок_Количество > 0);
	Элементы.РазнарядкаКондуктор.КнопкаВыпадающегоСписка = (ЭкипажТССписок_Количество > 0);
	Элементы.РазнарядкаКондуктор2.КнопкаВыпадающегоСписка = (ЭкипажТССписок_Количество > 0);
	
	Если ЭкипажТССписок_Количество = 0 Тогда	
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекСотр Из ЭкипажТССписок Цикл
		Элементы.РазнарядкаВодитель.СписокВыбора.Добавить(ТекСотр.Значение);
		Элементы.РазнарядкаВодитель2.СписокВыбора.Добавить(ТекСотр.Значение);
		Элементы.РазнарядкаКондуктор.СписокВыбора.Добавить(ТекСотр.Значение);
		Элементы.РазнарядкаКондуктор2.СписокВыбора.Добавить(ТекСотр.Значение);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьДокументыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Отказ = Ложь;
	
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.ОК Тогда
        Попытка
            Записать();
        Исключение
            Отказ = Истина;
        КонецПопытки;
    Иначе
        Отказ = Истина;
    КонецЕсли;
    Если Объект.Ссылка.Пустая() Тогда 
        Отказ = Истина;
    КонецЕсли;
    
    ПроверитьДокументыФрагмент(Отказ);

КонецПроцедуры

&НаКлиенте
Процедура ПроверитьДокументыФрагмент(Знач Отказ)
    
    Если Не Отказ Тогда 
        Если Объект.Разнарядка.Количество() > 0 Тогда
            уатОбщегоНазначенияКлиент.ОткрытьОтчетПоДокументамТСиВодителей(Объект.Ссылка);
		Иначе
			ТекстНСТР = НСтр("en='Tabular section ""Daily vehicles plan"" is empty! It is impossible to check documents.';ru='Табличная часть ""Разнарядка"" пустая! Невозможно проверить документы.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
        КонецЕсли;
    КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтапыМаршрута(спрМаршрут)
	
	массивЭтапов = Новый Массив();
	Для Каждого ТекЭтап Из спрМаршрут.Этапы Цикл
		массивЭтапов.Добавить(Новый Структура("ПунктОтправления, ПунктПрибытия", ТекЭтап.ПунктОтправления, ТекЭтап.ПунктПрибытия));
	КонецЦикла;
	
	Возврат массивЭтапов;
	
КонецФункции

&НаСервереБезКонтекста
Функция ВосстановитьНастройки()
	СтруктураНастроек = ХранилищеНастроекДанныхФорм.Загрузить("Документ.уатРазнарядка.Форма.ФормаДокумента", "ОбщиеНастройки");
	
	Возврат СтруктураНастроек;
КонецФункции

&НаСервере
Процедура СохранитьНастройки()
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ОтображатьДопИнфо", Элементы.РазнарядкаПоказатьДопИнформацию.Пометка);
	
	ХранилищеНастроекДанныхФорм.Сохранить("Документ.уатРазнарядка.Форма.ФормаДокумента", "ОбщиеНастройки", СтруктураНастроек);
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьСкрытьДопИнформацию()
	
	флПоказатьДопИнфо = Элементы.РазнарядкаПоказатьДопИнформацию.Пометка;
	Если флПоказатьДопИнфо И Не Элементы.ПанельДопИнформации.Видимость Тогда
		Элементы.ПанельДопИнформации.Видимость = Истина;
		
	ИначеЕсли Не флПоказатьДопИнфо И Элементы.ПанельДопИнформации.Видимость Тогда 
		Элементы.ПанельДопИнформации.Видимость = Ложь;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ФормаЗаполненияТСЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Массив") Тогда
		ТекстВопроса = НСтр("en='Before filling tabular section will be cleared! Continue?';ru='Перед заполнением табличная часть будет очищена! Продолжить?'");
		Если Объект.Разнарядка.Количество() Тогда 
			ПоказатьВопрос(
				Новый ОписаниеОповещения("ФормаЗаполненияТСОчистка", ЭтотОбъект, Результат),
				ТекстВопроса,
				РежимДиалогаВопрос.ДаНетОтмена);
		Иначе 
			ФормаЗаполненияТСЗаполнение(Результат);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаЗаполненияТСОчистка(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда 
		Объект.Разнарядка.Очистить();
		ФормаЗаполненияТСЗаполнение(ДополнительныеПараметры);
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда 
		ФормаЗаполненияТСЗаполнение(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаЗаполненияТСЗаполнение(Результат)
	
	МассивТС = Новый Массив();
	Для Каждого ТекТС Из Результат Цикл
		МассивТС.Добавить(ТекТС.ТС);
	КонецЦикла;
	СформироватьПодготовкуФрагмент(,МассивТС);
КонецПроцедуры

&НаСервере
Процедура РазделитьСотрудниковПосменно()
	мсвРазделенныеСтроки = Новый Массив;
	
	флПодставлятьВторогоВодителя = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация, "ПодставлятьВторогоВодителя");
	
	Сч = Объект.Разнарядка.Количество();
	Пока Сч >= 1 Цикл
		Сч = Сч - 1;
		
		ТекСтрокаРазнарядки = Объект.Разнарядка[Сч];
		
		тблЭкипаж = уатЗащищенныеФункцииСервер.ЭкипажТС(ТекСтрокаРазнарядки.ТС, ТекСтрокаРазнарядки.ДатаВыезда);
		
		// Оставляем только водителей, сопр. лица будут заполнены в конце по стандартному алгоритму (ЗаполнитьЭкипаж)
		СчЭкипаж = тблЭкипаж.Количество() - 1;
		Пока СчЭкипаж >= 0 Цикл
			Если тблЭкипаж[СчЭкипаж].ЧленЭкипажа = Перечисления.уатЧленыЭкипажа.ОсновноеСопроводительноеЛицо
				ИЛИ тблЭкипаж[СчЭкипаж].ЧленЭкипажа = Перечисления.уатЧленыЭкипажа.ВтороеСопроводительноеЛицо Тогда
				тблЭкипаж.Удалить(СчЭкипаж);
			КонецЕсли;
			СчЭкипаж = СчЭкипаж - 1;
		КонецЦикла;
		
		тблВодителиПоГрафикамРаботы = уатОбщегоНазначения.СотрудникРаботаетПоГрафику(тблЭкипаж,
			ТекСтрокаРазнарядки.ДатаВыезда, ТекСтрокаРазнарядки.ДатаВозвращения);
			
		// Если экипаж состоит из 1 водителя или вообще их нет, то и разделять на разные ПЛ точно не нужно
		Если тблВодителиПоГрафикамРаботы.Количество() <= 1 Тогда
			Продолжить;
		КонецЕсли;
		
		// Очищаем водителя 2, т.к. при разбивке он может не подобраться по рабочему интервалю водителя 1,
		// и при этом останется старое значение водителя 2, что некорректно
		ТекСтрокаРазнарядки.Водитель2 = Неопределено;
		
		// сортировка по интервалам рабочего времени
		тблВодителиПоГрафикамРаботы.Сортировать("НачалоПересечения");
		
		// Временные переменные для восстановления исходного периода ПЛ (по режиму работы ТС),
		// если разделение на разные ПЛ по сменам не было выполнено
		флРазделениеВыполнено   = Ложь;
		ДатаВыездаИсходная      = ТекСтрокаРазнарядки.ДатаВыезда;
		ДатаВозвращенияИсходная = ТекСтрокаРазнарядки.ДатаВозвращения;
				
		ТекДатаКонецИнтервала = '00010101';
		Для Каждого ТекСтрокаВодитель Из тблВодителиПоГрафикамРаботы Цикл
			Если ТекДатаКонецИнтервала = '00010101' Тогда
				ТекСтрокаРазнарядки.Водитель        = ТекСтрокаВодитель.Сотрудник;
				ТекСтрокаРазнарядки.ДатаВыезда      = ТекСтрокаВодитель.НачалоПересечения;
				ТекСтрокаРазнарядки.ДатаВозвращения = ТекСтрокаВодитель.КонецПересечения;
				
				ТекДатаКонецИнтервала = ТекСтрокаВодитель.КонецПересечения;
				
				Если мсвРазделенныеСтроки.Найти(ТекСтрокаРазнарядки) = Неопределено Тогда
					мсвРазделенныеСтроки.Добавить(ТекСтрокаРазнарядки);
				КонецЕсли;
			Иначе
				Если ТекСтрокаВодитель.НачалоПересечения >= ТекДатаКонецИнтервала Тогда
					ТекСтрокаРазнарядки = Объект.Разнарядка.Вставить(Сч + 1);
					ЗаполнитьЗначенияСвойств(ТекСтрокаРазнарядки, Объект.Разнарядка[Сч]);
					ТекСтрокаРазнарядки.Водитель        = ТекСтрокаВодитель.Сотрудник;
					ТекСтрокаРазнарядки.Водитель2       = Неопределено;
					ТекСтрокаРазнарядки.ДатаВыезда      = ТекСтрокаВодитель.НачалоПересечения;
					ТекСтрокаРазнарядки.ДатаВозвращения = ТекСтрокаВодитель.КонецПересечения;
				
					ТекДатаКонецИнтервала = ТекСтрокаВодитель.КонецПересечения;
					флРазделениеВыполнено = Истина;
					
					Если мсвРазделенныеСтроки.Найти(ТекСтрокаРазнарядки) = Неопределено Тогда
						мсвРазделенныеСтроки.Добавить(ТекСтрокаРазнарядки);
					КонецЕсли;
				Иначе
					Если флПодставлятьВторогоВодителя И ЗначениеЗаполнено(ТекСтрокаРазнарядки.Водитель)
						И НЕ ЗначениеЗаполнено(ТекСтрокаРазнарядки.Водитель2) Тогда
						ТекСтрокаРазнарядки.Водитель2 = ТекСтрокаВодитель.Сотрудник;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		// восстановления исходного периода ПЛ
		Если НЕ флРазделениеВыполнено Тогда
			ТекСтрокаРазнарядки.ДатаВыезда      = ДатаВыездаИсходная;
			ТекСтрокаРазнарядки.ДатаВозвращения = ДатаВозвращенияИсходная;
			
			СтрокаУдалить = мсвРазделенныеСтроки.Найти(ТекСтрокаРазнарядки);
			Если СтрокаУдалить <> Неопределено Тогда
				мсвРазделенныеСтроки.Удалить(СтрокаУдалить);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// заполняем сопроводительных лиц в разделенных строках
	Для Каждого ТекСтрока Из мсвРазделенныеСтроки Цикл
		уатОбщегоНазначения.ЗаполнитьЭкипажТС(ТекСтрока.ТС, Объект.Организация, ТекСтрока.ДатаВыезда,,,
			ТекСтрока.Кондуктор, ТекСтрока.Кондуктор2, Истина, ТекСтрока.ДатаВозвращения, Ложь);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область ОписаниеПеременных

Перем мВалютаРегламентированногоУчета Экспорт; // Переменная хранит значение валюты регламентированного учёта,
// полученное из константы.

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

// Процедура обновляет базовый документ (Выработка ОС) 
// Основание - документ ЗаявкаНаИспользование
// НомерСтроки - номер строки табличной части основания, для которой формируем задание
Процедура ОбновитьБазовыйДокумент() Экспорт
	//Если Не уатПризнакОбновленияБазовыхДокументов(ПакетнаяОбработкаБазовыхДокументов) Тогда
	//	Возврат;
	//КонецЕсли;	
	//
	//флРеализацияТоваровУслуг = Ложь;
	//Для Каждого ТекСтрокаБД Из БазовыеДокументы Цикл
	//	Если ТипЗнч(ТекСтрокаБД.БазовыйДокумент) = Тип("ДокументСсылка.РеализацияТоваровУслуг") Тогда
	//
	//		флРеализацияТоваровУслуг = Истина;
	//	
	//		Попытка
	//			дБазовыйДок = БазовыйДокумент.ПолучитьОбъект();
	//			дБазовыйДок.Услуги.Очистить();
	//		Исключение
	//			дБазовыйДок = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
	//		КонецПопытки;	
	//		
	//		ЗаполнитьДокументРеализацияТоваровУслуг(дБазовыйДок);
	//		
	//		дБазовыйДок.Записать();
	//		ТекСтрокаБД.БазовыйДокумент = дБазовыйДок.Ссылка;
	//	КонецЕсли;	
	//КонецЦикла;
	//	
	//Если Не флРеализацияТоваровУслуг Тогда
	//	
	//	дБазовыйДок = Документы.РеализацияТоваровУслуг.СоздатьДокумент();
	//	ЗаполнитьДокументРеализацияТоваровУслуг(дБазовыйДок);
	//	дБазовыйДок.Записать();
	//	
	//	НоваяСтрока					= БазовыеДокументы.Добавить();
	//	НоваяСтрока.БазовыйДокумент = дБазовыйДок.Ссылка;
	//	
	//КонецЕсли;	
	
КонецПроцедуры

// Функция возвращает количество выработки
// Параметры: Количество - время в ЧЧ.Десятые доли
// Если параметр выработки - время, то производится пересчет в секунды
//
Функция КоличествоВыработкиДляРегистра(ПараметрВыработки, Количество) Экспорт
	Если ПараметрВыработки.Временный Тогда
		мКоличество = Количество*3600;
	Иначе
		мКоличество = Количество;
	КонецЕсли;	
	
	Возврат мКоличество;
КонецФункции

// Функция подготавливает таблицу Выработка, в которой свернуты строки с одинаковыми номерами этапов
Функция ПолучитьВыработкуСвернутуюСУчетомЭтапов(ГруппироватьПоСсылочнымРеквизитам = Истина) Экспорт
		
	ВыработкаСвернутая = Выработка.ВыгрузитьКолонки();
	
	// Считаем ТнКм и ОбъемКм здесь, потому что после свертки их посчитать точно так же не получится.
	ВыработкаСвернутая.Колонки.Добавить("ТнКм", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ВыработкаСвернутая.Колонки.Добавить("ОбъемКм", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ВыработкаСвернутая.Колонки.Добавить("КоличествоСпецработ", Новый ОписаниеТипов("Число"));
	ВыработкаСвернутая.Колонки.Удалить(ВыработкаСвернутая.Колонки.КоличествоСпецРаботы1);
	ВыработкаСвернутая.Колонки.Удалить(ВыработкаСвернутая.Колонки.КоличествоСпецРаботы2);
	ВыработкаСвернутая.Колонки.Удалить(ВыработкаСвернутая.Колонки.КоличествоСпецРаботы3);
	ВыработкаСвернутая.Колонки.Удалить(ВыработкаСвернутая.Колонки.КоличествоСпецРаботы4);
	ВыработкаСвернутая.Колонки.Удалить(ВыработкаСвернутая.Колонки.КоличествоСпецРаботы5);
	ВыработкаСвернутая.Колонки.Добавить("КоличествоСпецРаботы1", Новый ОписаниеТипов("Число"));
	ВыработкаСвернутая.Колонки.Добавить("КоличествоСпецРаботы2", Новый ОписаниеТипов("Число"));
	ВыработкаСвернутая.Колонки.Добавить("КоличествоСпецРаботы3", Новый ОписаниеТипов("Число"));
	ВыработкаСвернутая.Колонки.Добавить("КоличествоСпецРаботы4", Новый ОписаниеТипов("Число"));
	ВыработкаСвернутая.Колонки.Добавить("КоличествоСпецРаботы5", Новый ОписаниеТипов("Число"));
	ВыработкаСвернутая.Колонки.Добавить("Прицепы", Новый ОписаниеТипов("Массив"));
	
	мЭтапыЗадания = Выработка.Выгрузить();
	мЭтапыЗадания.Свернуть("ПутЛист, НомерЕздки");
	
	Для Каждого ТекЭтапЗадания из мЭтапыЗадания Цикл
		// выбираем строки для каждого этапа задания
		мСтрокиВыработки = Выработка.НайтиСтроки(Новый Структура("ПутЛист, НомерЕздки", ТекЭтапЗадания.ПутЛист, ТекЭтапЗадания.НомерЕздки));
		
		// Вес, объем груза, количество ездок для номера этапа <> 0 (учет по этапам ведется)
		// для разных строк с одинаковым номером этапа либо суммируем, либо выбираем максимальное значение
		Если ТекЭтапЗадания.НомерЕздки <> 0 И мСтрокиВыработки.Количество() > 1 Тогда
			
			// Настройки суммирования или максимума по этапам зависят от путевого листа
			СуммированиеПоЭтапам = ПараметрыВыработкиСуммированиеПоЭтапам(ТекЭтапЗадания.ПутЛист);
			
			// Сначала - расчет максимальных значений для тех параметров выработки, для которых считается максимум 
			// по строкам с одинаковым этапом
			мВесГруза = 0;
			мОбъем = 0;
			мКоличествоЕздок = 0;
			мПробегСГрузом = 0;
			мПробегПорожний = 0;
			мКоличествоОпераций = 0;
			СоотвСпецРаботыМаксимум = Новый Соответствие;
			
			Для Каждого ТекСтрВыработка Из мСтрокиВыработки Цикл
				Если НЕ СуммированиеПоЭтапам.ВесГруза И мВесГруза < ТекСтрВыработка.КоличествоТонн * ТекСтрВыработка.КоличествоЕздок Тогда
					мВесГруза = ТекСтрВыработка.КоличествоТонн * ТекСтрВыработка.КоличествоЕздок;
				КонецЕсли;
				Если НЕ СуммированиеПоЭтапам.Объем И мОбъем < ТекСтрВыработка.Объем * ТекСтрВыработка.КоличествоЕздок Тогда
					мОбъем = ТекСтрВыработка.Объем * ТекСтрВыработка.КоличествоЕздок;
				КонецЕсли;
				Если НЕ СуммированиеПоЭтапам.КоличествоЕздок И мКоличествоЕздок < ТекСтрВыработка.КоличествоЕздок Тогда
					мКоличествоЕздок = ТекСтрВыработка.КоличествоЕздок;
				КонецЕсли;
				Если НЕ СуммированиеПоЭтапам.КоличествоОпераций И мКоличествоОпераций < ТекСтрВыработка.КоличествоОпераций Тогда
					мКоличествоОпераций = ТекСтрВыработка.КоличествоОпераций;
				КонецЕсли;
				
				Для СчСпец = 1 По 5 Цикл
					Если ТекСтрВыработка["КоличествоСпецРаботы" + СчСпец] > 0 
						И ТекСтрВыработка["СпецРабота" + СчСпец].СпособРасчетаПоНомеруЭтапа = 1 Тогда
						СтруктураСпец = СоотвСпецРаботыМаксимум.Получить(ТекСтрВыработка["СпецРабота" + СчСпец]);
						Если СтруктураСпец = Неопределено Тогда
							СтруктураСпец = Новый Структура("Количество", 0);
						КонецЕсли;
						Если СтруктураСпец.Количество < ТекСтрВыработка["КоличествоСпецРаботы" + СчСпец] * ТекСтрВыработка.КоличествоЕздок Тогда
							СтруктураСпец.Количество = ТекСтрВыработка["КоличествоСпецРаботы" + СчСпец] * ТекСтрВыработка.КоличествоЕздок;
						КонецЕсли;
						СоотвСпецРаботыМаксимум.Вставить(ТекСтрВыработка["СпецРабота" + СчСпец], СтруктураСпец);
					КонецЕсли;
				КонецЦикла;
				
				// Заданный вручную параметр выработки считается еще одной спец. работой
				Если ЗначениеЗаполнено(ТекСтрВыработка.ПараметрВыработки) И ТекСтрВыработка.Выработка > 0
					И ТекСтрВыработка.ПараметрВыработки.СпособРасчетаПоНомеруЭтапа = 1 Тогда
					
					Если ТекСтрВыработка.ПараметрВыработки.Временный Тогда
						ТекВыработка = ТекСтрВыработка.Выработка * 3600;
					Иначе
						ТекВыработка = ТекСтрВыработка.Выработка;
					КонецЕсли;
					
					СтруктураСпец = СоотвСпецРаботыМаксимум.Получить(ТекСтрВыработка.ПараметрВыработки);
					Если СтруктураСпец = Неопределено Тогда
						СтруктураСпец = Новый Структура("Количество", 0);
					КонецЕсли;
					Если СтруктураСпец.Количество < ТекВыработка * ТекСтрВыработка.КоличествоЕздок Тогда
						СтруктураСпец.Количество = ТекВыработка * ТекСтрВыработка.КоличествоЕздок;
					КонецЕсли;
					СоотвСпецРаботыМаксимум.Вставить(ТекСтрВыработка.ПараметрВыработки, СтруктураСпец);
				КонецЕсли;
				
				// пробег
				Если Не СуммированиеПоЭтапам.ПробегСГрузомПассажирами И мПробегСГрузом < ТекСтрВыработка.КоличествоКмГруз * ТекСтрВыработка.КоличествоЕздок Тогда
					мПробегСГрузом = ТекСтрВыработка.КоличествоКмГруз * ТекСтрВыработка.КоличествоЕздок;
				КонецЕсли;
				Если Не СуммированиеПоЭтапам.ПробегПорожний И мПробегПорожний < ТекСтрВыработка.КоличествоКмПорожний * ТекСтрВыработка.КоличествоЕздок Тогда
					мПробегПорожний = ТекСтрВыработка.КоличествоКмПорожний * ТекСтрВыработка.КоличествоЕздок;
				КонецЕсли;
								
			КонецЦикла;
			
			// Теперь создаем новые строки (если необходимо - больше одной для данного этапа, с разными ссылочными аналитиками)
			Если ГруппироватьПоСсылочнымРеквизитам Тогда
				КолонкиГруппировок = "ПутЛист, ВидПеревозки, Маршрут, НаправлениеПеревозки, ОбъектСтроительства";
				СвернутыеСтроки = Выработка.Выгрузить(мСтрокиВыработки);
				СвернутыеСтроки.Свернуть(КолонкиГруппировок);
			Иначе
				СвернутыеСтроки = Новый Массив;
				СвернутыеСтроки.Добавить(мСтрокиВыработки[0]);
			КонецЕсли;
			
			Для Каждого ТекСтрока Из СвернутыеСтроки Цикл
				Если ГруппироватьПоСсылочнымРеквизитам Тогда
					СтруктураПоиска = Новый Структура(КолонкиГруппировок);
					ЗаполнитьЗначенияСвойств(СтруктураПоиска, ТекСтрока);
					СтруктураПоиска.Вставить("НомерЕздки", мСтрокиВыработки[0].НомерЕздки);
					НеСвернутыеСтроки = Выработка.НайтиСтроки(СтруктураПоиска);
				Иначе
					НеСвернутыеСтроки = мСтрокиВыработки;
				КонецЕсли;
				
				НоваяСтрока = ВыработкаСвернутая.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, НеСвернутыеСтроки[0],,"Выработка, ПараметрВыработки");
				Если СуммированиеПоЭтапам.ВесГруза Тогда
					НоваяСтрока.КоличествоТонн = 0;
				Иначе
					НоваяСтрока.КоличествоТонн = мВесГруза;
				КонецЕсли;
				Если СуммированиеПоЭтапам.Объем Тогда
					НоваяСтрока.Объем = 0;
				Иначе
					НоваяСтрока.Объем = мОбъем;
				КонецЕсли;
				Если СуммированиеПоЭтапам.КоличествоЕздок Тогда
					НоваяСтрока.КоличествоЕздок = 0;
				Иначе
					НоваяСтрока.КоличествоЕздок = мКоличествоЕздок;
				КонецЕсли;
				Если СуммированиеПоЭтапам.ПробегСГрузомПассажирами Тогда
					НоваяСтрока.КоличествоКмГруз = 0;
				Иначе
					НоваяСтрока.КоличествоКмГруз = мПробегСГрузом;
				КонецЕсли;
				Если СуммированиеПоЭтапам.ПробегПорожний Тогда
					НоваяСтрока.КоличествоКмПорожний = 0;
				Иначе
					НоваяСтрока.КоличествоКмПорожний = мПробегПорожний;
				КонецЕсли;
				Если СуммированиеПоЭтапам.КоличествоОпераций Тогда
					НоваяСтрока.КоличествоОпераций = 0;
				Иначе
					НоваяСтрока.КоличествоОпераций = мКоличествоОпераций;
				КонецЕсли;
				НоваяСтрока.КоличествоЧасов = 0;
				НоваяСтрока.ТнКм = 0;
				НоваяСтрока.ОбъемКм = 0;
												
				// Суммируем спецработы
				СоотвСпецРаботыСуммирование = Новый Соответствие;
				Для Каждого ТекСтрокаНеСвернутая Из НеСвернутыеСтроки Цикл
					Для СчСпец = 1 По 5 Цикл
						Если ТекСтрокаНеСвернутая["КоличествоСпецРаботы" + СчСпец] > 0
							И ТекСтрокаНеСвернутая["СпецРабота" + СчСпец].СпособРасчетаПоНомеруЭтапа = 0 Тогда
							СтруктураСпец = СоотвСпецРаботыСуммирование.Получить(ТекСтрокаНеСвернутая["СпецРабота" + СчСпец]);
							Если СтруктураСпец = Неопределено Тогда
								СтруктураСпец = Новый Структура("Количество", 0);
							КонецЕсли;
							СтруктураСпец.Количество = СтруктураСпец.Количество + ТекСтрокаНеСвернутая["КоличествоСпецРаботы" + СчСпец] * ТекСтрокаНеСвернутая.КоличествоЕздок;
							СоотвСпецРаботыСуммирование.Вставить(ТекСтрокаНеСвернутая["СпецРабота" + СчСпец], СтруктураСпец);
						КонецЕсли;
					КонецЦикла;
					
					// Заданный вручную параметр выработки считается еще одной спец. работой
					Если ЗначениеЗаполнено(ТекСтрокаНеСвернутая.ПараметрВыработки) И ТекСтрокаНеСвернутая.Выработка > 0
						И ТекСтрокаНеСвернутая.ПараметрВыработки.СпособРасчетаПоНомеруЭтапа = 0 Тогда
						
						Если ТекСтрокаНеСвернутая.ПараметрВыработки.Временный Тогда
							ТекВыработка = уатОбщегоНазначения.уатВремяВСекунды(ТекСтрокаНеСвернутая.Выработка);
						Иначе
							ТекВыработка = ТекСтрокаНеСвернутая.Выработка;
						КонецЕсли;
						
						СтруктураСпец = СоотвСпецРаботыСуммирование.Получить(ТекСтрокаНеСвернутая.ПараметрВыработки);
						Если СтруктураСпец = Неопределено Тогда
							СтруктураСпец = Новый Структура("Количество", 0);
						КонецЕсли;
						СтруктураСпец.Количество = СтруктураСпец.Количество + ТекВыработка * ТекСтрокаНеСвернутая.КоличествоЕздок;
						СоотвСпецРаботыСуммирование.Вставить(ТекСтрокаНеСвернутая.ПараметрВыработки, СтруктураСпец);
					КонецЕсли;
				КонецЦикла;
				
				СчСпец = 0;
				Для Каждого ТекСоотвСпец Из СоотвСпецРаботыСуммирование Цикл	
					СчСпец = СчСпец + 1;
					Если СчСпец > 5 Тогда
						// Проверяем, нужно ли добавить еще колонки для спец. работ
						Если ВыработкаСвернутая.Колонки.Найти("СпецРабота" + СчСпец) = Неопределено Тогда
							ВыработкаСвернутая.Колонки.Добавить("КоличествоСпецРаботы" + СчСпец, Новый ОписаниеТипов("Число"));
							ВыработкаСвернутая.Колонки.Добавить("СпецРабота" + СчСпец, Новый ОписаниеТипов("СправочникСсылка.уатПараметрыВыработки"));
						КонецЕсли;
					КонецЕсли;
					НоваяСтрока["СпецРабота" + СчСпец] = ТекСоотвСпец.Ключ;
					НоваяСтрока["КоличествоСпецРаботы" + СчСпец] = ТекСоотвСпец.Значение.Количество;
					НоваяСтрока.КоличествоСпецработ = СчСпец;
				КонецЦикла;
				
				Для Каждого ТекСоотвСпец Из СоотвСпецРаботыМаксимум Цикл	
					СчСпец = СчСпец + 1;
					Если СчСпец > 5 Тогда
						// Проверяем, нужно ли добавить еще колонки для спец. работ
						Если ВыработкаСвернутая.Колонки.Найти("СпецРабота" + СчСпец) = Неопределено Тогда
							ВыработкаСвернутая.Колонки.Добавить("КоличествоСпецРаботы" + СчСпец, Новый ОписаниеТипов("Число"));
							ВыработкаСвернутая.Колонки.Добавить("СпецРабота" + СчСпец, Новый ОписаниеТипов("СправочникСсылка.уатПараметрыВыработки"));
						КонецЕсли;
					КонецЕсли;
					НоваяСтрока["СпецРабота" + СчСпец] = ТекСоотвСпец.Ключ;
					НоваяСтрока["КоличествоСпецРаботы" + СчСпец] = ТекСоотвСпец.Значение.Количество;
					НоваяСтрока.КоличествоСпецработ = СчСпец;
				КонецЦикла;
				
				// Суммируем прочие параметры
				мКоличествоЧасовВСекундах = 0;
				мПодачаВСекундах = 0;
				мПростойПодПогрузкойВСекундах = 0;
				мПростойПодРазгрузкойВСекундах = 0;
				Для Каждого ТекСтрокаНеСвернутая Из НеСвернутыеСтроки Цикл
					Если СуммированиеПоЭтапам.ВесГруза Тогда
						НоваяСтрока.КоличествоТонн = НоваяСтрока.КоличествоТонн + ТекСтрокаНеСвернутая.КоличествоТонн * ТекСтрокаНеСвернутая.КоличествоЕздок;
					КонецЕсли;
					Если СуммированиеПоЭтапам.Объем Тогда
						НоваяСтрока.Объем = НоваяСтрока.Объем + ТекСтрокаНеСвернутая.Объем * ТекСтрокаНеСвернутая.КоличествоЕздок;
					КонецЕсли;
					Если СуммированиеПоЭтапам.КоличествоЕздок Тогда
						НоваяСтрока.КоличествоЕздок = НоваяСтрока.КоличествоЕздок + ТекСтрокаНеСвернутая.КоличествоЕздок;
					КонецЕсли;
					Если СуммированиеПоЭтапам.ПробегСГрузомПассажирами Тогда
						НоваяСтрока.КоличествоКмГруз = НоваяСтрока.КоличествоКмГруз + ТекСтрокаНеСвернутая.КоличествоКмГруз * ТекСтрокаНеСвернутая.КоличествоЕздок;
					КонецЕсли;
					Если СуммированиеПоЭтапам.ПробегПорожний Тогда
						НоваяСтрока.КоличествоКмПорожний = НоваяСтрока.КоличествоКмПорожний + ТекСтрокаНеСвернутая.КоличествоКмПорожний * ТекСтрокаНеСвернутая.КоличествоЕздок;
					КонецЕсли;
					Если СуммированиеПоЭтапам.КоличествоОпераций Тогда
						НоваяСтрока.КоличествоОпераций = НоваяСтрока.КоличествоОпераций + ТекСтрокаНеСвернутая.КоличествоОпераций;
					КонецЕсли;
					
					// Суммирование временных параметров
					мКоличествоЧасовВСекундах        = мКоличествоЧасовВСекундах        + уатОбщегоНазначения.уатВремяВСекунды(ТекСтрокаНеСвернутая.КоличествоЧасов);
					мПодачаВСекундах                 = мПодачаВСекундах                 + уатОбщегоНазначения.уатВремяВСекунды(ТекСтрокаНеСвернутая.Подача);
					мПростойПодПогрузкойВСекундах    = мПростойПодПогрузкойВСекундах    + уатОбщегоНазначения.уатВремяВСекунды(ТекСтрокаНеСвернутая.ПростойПодПогрузкой);
					мПростойПодРазгрузкойВСекундах   = мПростойПодРазгрузкойВСекундах   + уатОбщегоНазначения.уатВремяВСекунды(ТекСтрокаНеСвернутая.ПростойПодРазгрузкой);
					
					НоваяСтрока.ТнКм = НоваяСтрока.ТнКм + ТекСтрокаНеСвернутая.КоличествоТонн * ТекСтрокаНеСвернутая.КоличествоКмГруз * ТекСтрокаНеСвернутая.КоличествоЕздок;
					НоваяСтрока.ОбъемКм = НоваяСтрока.ОбъемКм + ТекСтрокаНеСвернутая.Объем * ТекСтрокаНеСвернутая.КоличествоКмГруз * ТекСтрокаНеСвернутая.КоличествоЕздок;
					НоваяСтрока.Количество = НоваяСтрока.Количество + ТекСтрокаНеСвернутая.Количество;
					НоваяСтрока.Сумма = НоваяСтрока.Сумма + ТекСтрокаНеСвернутая.Сумма;
				КонецЦикла;
				
				НоваяСтрока.КоличествоЧасов      = уатОбщегоНазначения.уатВремяВЧЧ_ММ(мКоличествоЧасовВСекундах);
				НоваяСтрока.Подача               = уатОбщегоНазначения.уатВремяВЧЧ_ММ(мПодачаВСекундах);
				НоваяСтрока.ПростойПодПогрузкой  = уатОбщегоНазначения.уатВремяВЧЧ_ММ(мПростойПодПогрузкойВСекундах);
				НоваяСтрока.ПростойПодРазгрузкой = уатОбщегоНазначения.уатВремяВЧЧ_ММ(мПростойПодРазгрузкойВСекундах);
				
				// заполняем массив прицепов для отбора тарифов
				Для Каждого ТекСтрокаНеСвернутая Из НеСвернутыеСтроки Цикл
					Если ЗначениеЗаполнено(ТекСтрокаНеСвернутая.Прицеп1) Тогда
						НоваяСтрока.Прицепы.Добавить(ТекСтрокаНеСвернутая.Прицеп1);
					КонецЕсли;
					Если ЗначениеЗаполнено(ТекСтрокаНеСвернутая.Прицеп2) Тогда
						НоваяСтрока.Прицепы.Добавить(ТекСтрокаНеСвернутая.Прицеп2);
					КонецЕсли;
				КонецЦикла;
				
			КонецЦикла;
		Иначе
			Для Каждого ТекСтрВыработка Из мСтрокиВыработки Цикл
				НоваяСтрока = ВыработкаСвернутая.Добавить();
				ИсключаемыеСвойства = "Выработка, ПараметрВыработки, 
					|СпецРабота1, СпецРабота2, СпецРабота3, СпецРабота4, СпецРабота5, 
					|КоличествоСпецРаботы1, КоличествоСпецРаботы2, КоличествоСпецРаботы3, КоличествоСпецРаботы4, КоличествоСпецРаботы5";
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрВыработка,, ИсключаемыеСвойства);
				
				// Те параметры выработки, которые умножаются на количество ездок, умножаются на него здесь.
				НоваяСтрока.КоличествоКмГруз = ТекСтрВыработка.КоличествоКмГруз * ТекСтрВыработка.КоличествоЕздок;
				НоваяСтрока.КоличествоКмПорожний = ТекСтрВыработка.КоличествоКмПорожний * ТекСтрВыработка.КоличествоЕздок;
				НоваяСтрока.ТнКм = ТекСтрВыработка.КоличествоТонн * ТекСтрВыработка.КоличествоКмГруз * ТекСтрВыработка.КоличествоЕздок;
				НоваяСтрока.ОбъемКм = ТекСтрВыработка.Объем * ТекСтрВыработка.КоличествоКмГруз * ТекСтрВыработка.КоличествоЕздок;
				НоваяСтрока.КоличествоТонн = ТекСтрВыработка.КоличествоТонн * ТекСтрВыработка.КоличествоЕздок;
				НоваяСтрока.Объем = ТекСтрВыработка.Объем * ТекСтрВыработка.КоличествоЕздок;
				
				// спец. работы
				СоотвСпецРаботы = Новый Соответствие;
				Для СчСпец = 1 По 5 Цикл
					Если ТекСтрВыработка["КоличествоСпецРаботы" + СчСпец] > 0 Тогда
						СтруктураСпец = СоотвСпецРаботы.Получить(ТекСтрВыработка["СпецРабота" + СчСпец]);
						Если СтруктураСпец = Неопределено Тогда
							СтруктураСпец = Новый Структура("Количество", 0);
						КонецЕсли;
						СтруктураСпец.Количество = СтруктураСпец.Количество + ТекСтрВыработка["КоличествоСпецРаботы" + СчСпец] * ТекСтрВыработка.КоличествоЕздок;
						СоотвСпецРаботы.Вставить(ТекСтрВыработка["СпецРабота" + СчСпец], СтруктураСпец);
					КонецЕсли;
				КонецЦикла;
				
				// Заданный вручную параметр выработки считается еще одной спец. работой
				Если ЗначениеЗаполнено(ТекСтрВыработка.ПараметрВыработки) И ТекСтрВыработка.Выработка > 0 Тогда
					Если ТекСтрВыработка.ПараметрВыработки.Временный Тогда
						ТекВыработка = ТекСтрВыработка.Выработка * 3600;
					Иначе
						ТекВыработка = ТекСтрВыработка.Выработка;
					КонецЕсли;
					
					СтруктураСпец = СоотвСпецРаботы.Получить(ТекСтрВыработка.ПараметрВыработки);
					Если СтруктураСпец = Неопределено Тогда
						СтруктураСпец = Новый Структура("Количество", 0);
					КонецЕсли;
					СтруктураСпец.Количество = СтруктураСпец.Количество + ТекВыработка * ТекСтрВыработка.КоличествоЕздок;
					СоотвСпецРаботы.Вставить(ТекСтрВыработка.ПараметрВыработки, СтруктураСпец);
				КонецЕсли;

				СчСпец = 0;
				Для Каждого ТекСоотвСпец Из СоотвСпецРаботы Цикл	
					СчСпец = СчСпец + 1;
					Если СчСпец > 5 Тогда
						// Проверяем, нужно ли добавить еще колонки для спец. работ
						Если ВыработкаСвернутая.Колонки.Найти("СпецРабота" + СчСпец) = Неопределено Тогда
							ВыработкаСвернутая.Колонки.Добавить("КоличествоСпецРаботы" + СчСпец, Новый ОписаниеТипов("Число"));
							ВыработкаСвернутая.Колонки.Добавить("СпецРабота" + СчСпец, Новый ОписаниеТипов("СправочникСсылка.уатПараметрыВыработки"));
						КонецЕсли;
					КонецЕсли;
					НоваяСтрока["СпецРабота" + СчСпец] = ТекСоотвСпец.Ключ;
					НоваяСтрока["КоличествоСпецРаботы" + СчСпец] = ТекСоотвСпец.Значение.Количество;
					НоваяСтрока.КоличествоСпецработ = СчСпец;
				КонецЦикла;
				
				// заполняем массив прицепов для отбора тарифов
				Если ЗначениеЗаполнено(ТекСтрВыработка.Прицеп1) Тогда
					НоваяСтрока.Прицепы.Добавить(ТекСтрВыработка.Прицеп1);
				КонецЕсли;
				Если ЗначениеЗаполнено(ТекСтрВыработка.Прицеп2) Тогда
					НоваяСтрока.Прицепы.Добавить(ТекСтрВыработка.Прицеп2);
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ВыработкаСвернутая;
	
КонецФункции

// Процедура добавляет одну строку ТЧ Выработка и заполняет ее по строке ТЧ Задание Путевого листа
Процедура ЗаполнитьВыработкуПоСтрокеЗаданияПЛ(ПутевойЛистСсылка, ТекСтрокаЗадания) Экспорт
	
	НоваяСтрока              = Выработка.Добавить();
	НоваяСтрока.ПутЛист      = ПутевойЛистСсылка.Ссылка;
	НоваяСтрока.Номенклатура = ТекСтрокаЗадания.Номенклатура;
	НоваяСтрока.Подача       = ТекСтрокаЗадания.Подача;
	НоваяСтрока.ЕдиницаИзмерения     = ТекСтрокаЗадания.Номенклатура.ЕдиницаХраненияОстатков;	
	НоваяСтрока.ОбъектСтроительства  = ТекСтрокаЗадания.ОбъектСтроительства;
	НоваяСтрока.ВидПеревозки         = ТекСтрокаЗадания.ВидПеревозки;
	НоваяСтрока.НаправлениеПеревозки = ТекСтрокаЗадания.НаправлениеПеревозки;
	НоваяСтрока.Маршрут 		     = ТекСтрокаЗадания.Маршрут;
	НоваяСтрока.УсловиеРаботы        = ТекСтрокаЗадания.УсловиеРаботы;
	НоваяСтрока.КоличествоЧасов      = ТекСтрокаЗадания.КоличествоЧасов;
	НоваяСтрока.КоличествоЕздок      = ТекСтрокаЗадания.КоличествоЕздок;
	НоваяСтрока.КоличествоОпераций   = ТекСтрокаЗадания.КоличествоОпераций;
	НоваяСтрока.НомерЕздки           = ТекСтрокаЗадания.НомерЕздки;
	НоваяСтрока.КоличествоТонн       = ТекСтрокаЗадания.КоличествоТонн;
	НоваяСтрока.Объем		         = ТекСтрокаЗадания.Объем;
	НоваяСтрока.Количество           = ТекСтрокаЗадания.КоличествоТонн * ТекСтрокаЗадания.КоличествоЕздок;
	
	НоваяСтрока.КоличествоКмГруз      = ТекСтрокаЗадания.КоличествоКмГруз;
	НоваяСтрока.КоличествоКмПорожний  = ТекСтрокаЗадания.КоличествоКмПорожний;
	НоваяСтрока.СпецРабота1           = ТекСтрокаЗадания.СпецРабота1;
	НоваяСтрока.СпецРабота2           = ТекСтрокаЗадания.СпецРабота2;
	НоваяСтрока.СпецРабота3           = ТекСтрокаЗадания.СпецРабота3;
	НоваяСтрока.СпецРабота4           = ТекСтрокаЗадания.СпецРабота4;
	НоваяСтрока.СпецРабота5           = ТекСтрокаЗадания.СпецРабота5;
	НоваяСтрока.КоличествоСпецРаботы1 = ТекСтрокаЗадания.КоличествоСпецРаботы1;
	НоваяСтрока.КоличествоСпецРаботы2 = ТекСтрокаЗадания.КоличествоСпецРаботы2;
	НоваяСтрока.КоличествоСпецРаботы3 = ТекСтрокаЗадания.КоличествоСпецРаботы3;
	НоваяСтрока.КоличествоСпецРаботы4 = ТекСтрокаЗадания.КоличествоСпецРаботы4;
	НоваяСтрока.КоличествоСпецРаботы5 = ТекСтрокаЗадания.КоличествоСпецРаботы5;
	
	НоваяСтрока.Прицеп1 = ТекСтрокаЗадания.Прицеп1;
	НоваяСтрока.Прицеп2 = ТекСтрокаЗадания.Прицеп2;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	уатОбщегоНазначенияСервер.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
	// Ввод на основании Путевого листа
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументОбъект.уатПутевойЛист") 
		ИЛИ ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.уатПутевойЛист") Тогда
		
		Ответственный 	= уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
			ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнойОтветственный");
		ДокументСсылка_ = ДанныеЗаполнения;
		
		Если ЭтоНовый() Тогда
			Дата = ДокументСсылка_.ДатаВыезда;
		КонецЕсли;
		
		Организация      = ДокументСсылка_.Организация;
		Подразделение    = ДокументСсылка_.Подразделение;
		Перевозчик       = Организация;
		ВидПеревозки     = ДокументСсылка_.ВидПеревозки;
		ТипВладенияТС    = ДокументСсылка_.ТранспортноеСредство.ТипВладенияТС;
		
		УчитыватьНДС     = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация,
			ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.УчитыватьНДС"));
		СуммаВключаетНДС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация,
			ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.СуммаВключаетНДС"));
		
		Если ДополнительныеСвойства.Свойство("СтрокиПутевогоЛиста") Тогда
			// Если это новый документ, заполняем контрагента по данным строки.
			// Если идет добавление строк в существующий ТТД, то контрагент не изменяется.
			Если ДополнительныеСвойства.СтрокиПутевогоЛиста.Количество() > 0
				И ЭтоНовый() Тогда
				Контрагент = ДокументСсылка_.Задание[ДополнительныеСвойства.СтрокиПутевогоЛиста[0]].Контрагент;
			КонецЕсли;
			
			МассивГрузоотправителей = Новый Массив();
			МассивГрузополучателей  = Новый Массив();
			// Заполнение таблицы "Выработка" ТТД по строкам таблицы "Задание" Путевого листа
			Для Каждого мТекНомерСтрокиЗадания Из ДополнительныеСвойства.СтрокиПутевогоЛиста Цикл
				Если мТекНомерСтрокиЗадания >= ДокументСсылка_.Задание.Количество() 
					Или мТекНомерСтрокиЗадания < 0 Тогда
					// Некорректный номер строки
					Продолжить;
				КонецЕсли;
				мТекСтрокаЗадания = ДокументСсылка_.Задание[мТекНомерСтрокиЗадания];
				ТекГрузоотправитель = Новый Структура("Ссылка, УполномоченноеЛицо", 
										мТекСтрокаЗадания.ЗаказНаТС.Грузоотправитель, мТекСтрокаЗадания.ЗаказНаТС.КонтактноеЛицоГрузоотправителя);
				МассивГрузоотправителей.Добавить(ТекГрузоотправитель);
				ТекГрузополучатель  = Новый Структура("Ссылка, УполномоченноеЛицо", 
										мТекСтрокаЗадания.ЗаказНаТС.Грузополучатель, мТекСтрокаЗадания.ЗаказНаТС.КонтактноеЛицоГрузополучателя);
				МассивГрузополучателей.Добавить(ТекГрузополучатель);
				ЗаполнитьВыработкуПоСтрокеЗаданияПЛ(ДокументСсылка_, мТекСтрокаЗадания);
			КонецЦикла;
			ЗаполнитьУполномоченныеЛица(МассивГрузоотправителей, МассивГрузополучателей);
		Иначе
			// Создание ТТД на основании Путевого листа (без помощи команд вкладки "ТТД" Путевого листа)
			// Считаем, что ТТД заполняется по строкам контрагента из первой строки ТЧ Задание Путевого листа
			Если ДокументСсылка_.Задание.Количество() > 0
				И ЭтоНовый() Тогда
				Контрагент = ДокументСсылка_.Задание[0].Контрагент;
			КонецЕсли;
			
			МассивГрузоотправителей = Новый Массив();
			МассивГрузополучателей  = Новый Массив();
			// Заполнение таблицы "Выработка" ТТД по строкам таблицы "Задание" Путевого листа
			Для Каждого мТекСтрокаЗадания Из ДокументСсылка_.Задание Цикл
				Если мТекСтрокаЗадания.Контрагент <> Контрагент Тогда
					Продолжить;
				КонецЕсли;
				ТекГрузоотправитель = Новый Структура("Ссылка, УполномоченноеЛицо", 
										мТекСтрокаЗадания.ЗаказНаТС.Грузоотправитель, мТекСтрокаЗадания.ЗаказНаТС.КонтактноеЛицоГрузоотправителя);
				МассивГрузоотправителей.Добавить(ТекГрузоотправитель);
				ТекГрузополучатель  = Новый Структура("Ссылка, УполномоченноеЛицо", 
										мТекСтрокаЗадания.ЗаказНаТС.Грузополучатель, мТекСтрокаЗадания.ЗаказНаТС.КонтактноеЛицоГрузополучателя);
				МассивГрузополучателей.Добавить(ТекГрузополучатель);
				ЗаполнитьВыработкуПоСтрокеЗаданияПЛ(ДокументСсылка_, мТекСтрокаЗадания);
			КонецЦикла;
			ЗаполнитьУполномоченныеЛица(МассивГрузоотправителей, МассивГрузополучателей);
		КонецЕсли;
			
	// Ввод на основании Заказа на ТС и МЛ
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") 
		И ДанныеЗаполнения.Свойство("Основание")
		И (ДанныеЗаполнения.Свойство("флВыбратьМЛ") Или ДанныеЗаполнения.Свойство("флВыбратьЗаказ")) Тогда
		Дата = ТекущаяДата();
		Организация = ДанныеЗаполнения.Основание.Организация;
		Подразделение = ДанныеЗаполнения.Основание.Подразделение;
		// Тут можно вставить еще какие-то данные из шапки, наверное
		
		Если ДанныеЗаполнения.Свойство("флВыбратьМЛ") Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя КАК Заказ,
			|	уатМаршрутныйЛистЗаказы.Ссылка КАК МаршрутныйЛист,
			|	ЕСТЬNULL(уатЗаказГрузоотправителя.FTL, 0) КАК FTL,
			|	ЕСТЬNULL(уатТТД.Ссылка, ЗНАЧЕНИЕ(Документ.уатТТД.ПустаяСсылка)) КАК ТТД
			|ИЗ
			|	Документ.уатМаршрутныйЛист.Заказы КАК уатМаршрутныйЛистЗаказы
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатТТД КАК уатТТД
			|		ПО уатМаршрутныйЛистЗаказы.Ссылка = уатТТД.МаршрутныйЛист
			|			И уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя = уатТТД.ЗаказГрузоотправителя
			|			И (уатТТД.ПометкаУдаления = ЛОЖЬ)
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
			|		ПО уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя = уатЗаказГрузоотправителя.Ссылка
			|ГДЕ
			|	уатМаршрутныйЛистЗаказы.Ссылка = &Ссылка
			|
			|СГРУППИРОВАТЬ ПО
			|	уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя,
			|	уатМаршрутныйЛистЗаказы.Ссылка,
			|	ЕСТЬNULL(уатТТД.Ссылка, ЗНАЧЕНИЕ(Документ.уатТТД.ПустаяСсылка)),
			|	ЕСТЬNULL(уатЗаказГрузоотправителя.FTL, 0)";
			Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения.Основание);
			Результат = Запрос.Выполнить();
			тзМаршрутныеЛистыИЗаказы = Результат.Выгрузить();
			тзМаршрутныеЛистыИЗаказы.Сортировать("Заказ");
			СтрокиБезЗаказа = тзМаршрутныеЛистыИЗаказы.НайтиСтроки(Новый Структура("Заказ", Документы.уатЗаказГрузоотправителя.ПустаяСсылка()));
			Если СтрокиБезЗаказа.Количество() > 0 И СтрокиБезЗаказа.Количество() < тзМаршрутныеЛистыИЗаказы.Количество() Тогда
				// Если есть строки с заполненным заказом, то строки с незаполненным заказом не имеют смысла.
				// Удаляется только 1 строка, т.к. из-за свертки строк с пустым заказом будет не больше 1.
				тзМаршрутныеЛистыИЗаказы.Удалить(СтрокиБезЗаказа[0]);
			КонецЕсли;
			
			КоличествоСтрок = тзМаршрутныеЛистыИЗаказы.Количество();
			Если КоличествоСтрок = 0 Тогда
				ДополнительныеСвойства.Вставить("МаршрутныйЛист", ДанныеЗаполнения.Основание);
				ДополнительныеСвойства.Вставить("Заказ", Документы.уатЗаказГрузоотправителя.ПустаяСсылка());
			ИначеЕсли КоличествоСтрок = 1 И тзМаршрутныеЛистыИЗаказы[0].ТТД.Пустая() Тогда
				ДополнительныеСвойства.Вставить("МаршрутныйЛист", тзМаршрутныеЛистыИЗаказы[0].МаршрутныйЛист);
				ДополнительныеСвойства.Вставить("Заказ", тзМаршрутныеЛистыИЗаказы[0].Заказ);
			Иначе
				ДополнительныеСвойства.Вставить("тзМаршрутныеЛистыИЗаказы", тзМаршрутныеЛистыИЗаказы);
			КонецЕсли;
		ИначеЕсли ДанныеЗаполнения.Свойство("флВыбратьЗаказ") Тогда
			
			УполномоченноеЛицоГрузоотправителя = ДанныеЗаполнения.Основание.КонтактноеЛицоГрузоотправителя;
			УполномоченноеЛицоГрузополучателя =  ДанныеЗаполнения.Основание.КонтактноеЛицоГрузополучателя;
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СвязанныеДокументы.Ссылка КАК МаршрутныйЛист,
			|	&Ссылка КАК Заказ
			|ПОМЕСТИТЬ втМЛЗаказ
			|ИЗ
			|	КритерийОтбора.СвязанныеДокументы(&Ссылка) КАК СвязанныеДокументы
			|ГДЕ
			|	ТИПЗНАЧЕНИЯ(СвязанныеДокументы.Ссылка) = ТИП(Документ.уатМаршрутныйЛист)
			|	И СвязанныеДокументы.Ссылка.ПометкаУдаления = ЛОЖЬ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	втМЛЗаказ.МаршрутныйЛист КАК МаршрутныйЛист,
			|	втМЛЗаказ.Заказ КАК Заказ,
			|	ЕСТЬNULL(уатЗаказГрузоотправителя.FTL, ЛОЖЬ) КАК FTL,
			|	ЕСТЬNULL(уатТТД.Ссылка, ЗНАЧЕНИЕ(Документ.уатТТД.ПустаяСсылка)) КАК ТТД
			|ИЗ
			|	втМЛЗаказ КАК втМЛЗаказ
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатТТД КАК уатТТД
			|		ПО втМЛЗаказ.Заказ = уатТТД.ЗаказГрузоотправителя
			|			И втМЛЗаказ.МаршрутныйЛист = уатТТД.МаршрутныйЛист
			|			И (уатТТД.ПометкаУдаления = ЛОЖЬ)
			|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
			|		ПО втМЛЗаказ.Заказ = уатЗаказГрузоотправителя.Ссылка";
			Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения.Основание);
			Результат = Запрос.Выполнить();
			тзМаршрутныеЛистыИЗаказы = Результат.Выгрузить();
			КоличествоСтрок = тзМаршрутныеЛистыИЗаказы.Количество();
			Если КоличествоСтрок = 0 Тогда
				ДополнительныеСвойства.Вставить("МаршрутныйЛист", Документы.уатМаршрутныйЛист.ПустаяСсылка());
				ДополнительныеСвойства.Вставить("Заказ", ДанныеЗаполнения.Основание);
			ИначеЕсли КоличествоСтрок = 1 И тзМаршрутныеЛистыИЗаказы[0].ТТД.Пустая() Тогда
				ДополнительныеСвойства.Вставить("МаршрутныйЛист", тзМаршрутныеЛистыИЗаказы[0].МаршрутныйЛист);
				ДополнительныеСвойства.Вставить("Заказ", тзМаршрутныеЛистыИЗаказы[0].Заказ);
			Иначе
				тзМаршрутныеЛистыИЗаказы.Сортировать("Заказ");
				ДополнительныеСвойства.Вставить("тзМаршрутныеЛистыИЗаказы", тзМаршрутныеЛистыИЗаказы);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	флОтказ = уатОбщегоНазначения_проф.ПревышениеДопустимогоДолга(ДоговорКонтрагента);
	Отказ = Отказ ИЛИ флОтказ;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Инициализация дополнительных свойств для проведения документа.
	уатПроведение.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	Документы.уатТТД.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	уатПроведение.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	уатПроведение.ОтразитьДоходы(ДополнительныеСвойства, Движения, Отказ);
	уатПроведение.ОтразитьПредоставленныеУслуги(ДополнительныеСвойства, Движения, Отказ);
	
	уатПроведение.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	Документы.уатТТД.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);
	
	уатУчетОригиналовПервичныхДокументов.СформироватьДвиженияРеестрДокументов(Ссылка);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа
	уатПроведение.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	уатПроведение.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	уатПроведение.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль
	Документы.уатТТД.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ, Истина);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	Заголовок = уатОбщегоНазначенияТиповые.уатПредставлениеДокументаПриПроведении(Ссылка);
	
	//уатОбщегоНазначенияТиповые.уатПроверитьЧтоНетТоваров(ЭтотОбъект,"Стоимость",,Отказ,Заголовок);
	Для каждого ТекСтрока Из Стоимость Цикл
		Если ЗначениеЗаполнено(ТекСтрока.НоменклатураУслуги) Тогда
			Если НЕ уатОбщегоНазначения.ВидНоменклатурыУслуга(ТекСтрока.НоменклатураУслуги) Тогда
				ТекстНСТР = НСтр("en='At line №%1 tabular section ""Cost:"" contains products and services, not service!';ru='В строке №%1 табличной части ""Стоимость:"" содержится номенклатура, не являющаяся услугой!'");
				ТекстНСТР = СтрШаблон(ТекстНСТР, ТекСтрока.НомерСтроки);
				уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, Отказ, Заголовок);
			КонецЕсли;
			Если уатОбщегоНазначения.ВидНоменклатурыУслуга(ТекСтрока.Номенклатура) Тогда 
				ТекстНСТР = НСтр("en='At line №%1 of tabular section ""Price:"" contains cargo info which is not goods!';ru='В строке №%1 табличной части ""Стоимость:"" содержится номенклатура груза, не являющаяся товаром!'");
				ТекстНСТР = СтрШаблон(ТекстНСТР, ТекСтрока.НомерСтроки);
				уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, Отказ, Заголовок);
			КонецЕсли;
		КонецЕсли;
		Если УчитыватьНДС И (НЕ ЗначениеЗаполнено(ТекСтрока.СтавкаНДС)) Тогда
			ТекстНСТР = НСтр("en='At line №%1 tabular section ""Cost:"" is empty VAT rate!';ru='В строке №%1 табличной части ""Стоимость:"" не заполнена ставка НДС!'");
			ТекстНСТР = СтрШаблон(ТекстНСТР, ТекСтрока.НомерСтроки);
			уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, Отказ, Заголовок);
		КонецЕсли;
	КонецЦикла;
	
	Для каждого ТекСтрока Из Выработка Цикл
		Если ЗначениеЗаполнено(ТекСтрока.Номенклатура) И НЕ ЗначениеЗаполнено(ТекСтрока.ЕдиницаИзмерения) Тогда
			ТекстНСТР = НСтр("en='At line №%1 in tabular section ""Output:"" not fill attribute value ""Package/Unit of measure""!';ru='В строке №%1 табличной части ""Выработка:"" не заполнено значение реквизита ""Упаковка/Единица измерения""!'");
			ТекстНСТР = СтрШаблон(ТекстНСТР, ТекСтрока.НомерСтроки);
			уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, Отказ, Заголовок);
		КонецЕсли;
	КонецЦикла;
	
	Если ВидОперации = Перечисления.уатВидыОперацийТТД.ПоМаршрутномуЛистуИЗаказу Тогда
		НепроверяемыеРеквизиты = Новый Массив();
		НепроверяемыеРеквизиты.Добавить("Контрагент");
		НепроверяемыеРеквизиты.Добавить("ДоговорКонтрагента");
		УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, НепроверяемыеРеквизиты);
	КонецЕсли;
	
	уатОбщегоНазначения.ПроверкаЗаполненияПодразделения(Организация, Подразделение, Отказ, Заголовок);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	СуммаДокумента = уатОбщегоНазначенияТиповые.уатПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Стоимость");
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// Процедура заполняет документ по заказу и маршрутному листу
// Параметры: Заказ - документ уатЗаказГрузоотправителя (Заказ на ТС)
// МаршрутныйЛист - документ уатМаршрутныйЛист
// флОшибка устанавливается в значение Истина, если произошла ошибка, иначе не изменяется
Функция ОбработкаЗаполненияЗаказМЛ(Заказ, МаршрутныйЛист, флОшибка, ДопПараметры = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(ДопПараметры) Тогда
		ДопПараметры = Новый Структура;
	КонецЕсли;
	
	Если ДопПараметры.Свойство("ПерезаполнитьСуществующийТТД") Тогда
		флПерезаполнитьСуществующийТТД = ДопПараметры.ПерезаполнитьСуществующийТТД;
	Иначе
		флПерезаполнитьСуществующийТТД = Ложь;
	КонецЕсли;
	
	ДополнительныеТТД = Новый Массив();
	Если Заказ = Неопределено Тогда 
		Заказ = Документы.уатЗаказГрузоотправителя.ПустаяСсылка();
	КонецЕсли;
	Если МаршрутныйЛист = Неопределено Тогда
		МаршрутныйЛист = Документы.уатМаршрутныйЛист.ПустаяСсылка();
	КонецЕсли;
	Если Заказ.Пустая() И МаршрутныйЛист.Пустая() Тогда
		Возврат ДополнительныеТТД;
	КонецЕсли;
	
	Если МаршрутныйЛист.Пустая() Тогда
		Если Заказ.Мультимодальный И Заказ.РодительскийЗаказ.Пустая() Тогда
			ТекстНСТР = НСтр("ru='Создавать ТТД нужно для отдельных этапов мультимодального заказа.';en='Please use a child of this multimodal order for this operation.'");
		Иначе
			ТекстНСТР = НСтр("ru='Не найден связанный с заказом маршрутный лист.';en='Cannot find a connected routing list.'");
		КонецЕсли;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		флОшибка = Истина;
		Возврат ДополнительныеТТД;
	КонецЕсли;
	
	ВидОперации = Перечисления.уатВидыОперацийТТД.ПоМаршрутномуЛистуИЗаказу;
	Водитель = МаршрутныйЛист.Водитель1;
	Дата = ТекущаяДата();
	ЗаказГрузоотправителя = Заказ;
	ЭтотОбъект.МаршрутныйЛист = МаршрутныйЛист;
	Организация = МаршрутныйЛист.Организация;
	Подразделение = МаршрутныйЛист.Подразделение;
	Ответственный = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
					ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнойОтветственный");
	Если МаршрутныйЛист.ПринадлежностьПеревозки = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное") Тогда
		Перевозчик = Организация;
	ИначеЕсли МаршрутныйЛист.ПринадлежностьПеревозки = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Привлеченное") Тогда
		Перевозчик = МаршрутныйЛист.Контрагент;
	КонецЕсли;
	СтоимостьПеревозки = ПолучитьСтоимостьПеревозки(Заказ, МаршрутныйЛист);
	
	Если Заказ.Пустая() Тогда
		КонтрагентМаршрутногоЛиста = Неопределено;
		Контрагенты = МаршрутныйЛист.Заказы.ВыгрузитьКолонку("Контрагент");
		Если Контрагенты.Количество() = 0 Тогда
			флОшибка = Истина;
			ТекстНСТР = НСтр("ru='Создание ТТД по маршрутному листу без контрагентов невозможно';en='Cannot determine counterpartу'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
			Возврат ДополнительныеТТД;
		КонецЕсли;
		КонтрагентМаршрутногоЛиста = Контрагенты[0];
		Для Каждого КонтрагентМассива из Контрагенты Цикл
			Если КонтрагентМаршрутногоЛиста <> КонтрагентМассива Тогда
				ТекстНСТР = НСтр("ru='Создание ТТД по маршрутному листу с разными контрагентами невозможно';en='Cannot determine counterpartу'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
				флОшибка = Истина;
				Возврат ДополнительныеТТД;
			КонецЕсли;
		КонецЦикла;
		Грузоотправитель = КонтрагентМаршрутногоЛиста;
		УполномоченноеЛицоГрузоотправителя = Грузоотправитель.ОсновноеКонтактноеЛицо;
		Грузополучатель = КонтрагентМаршрутногоЛиста;
		УполномоченноеЛицоГрузополучателя = Грузополучатель.ОсновноеКонтактноеЛицо;
		Контрагент = КонтрагентМаршрутногоЛиста; 
		
		АдресДоставки = МаршрутныйЛист.АдресНазначения;
		АдресОтправления = МаршрутныйЛист.АдресОтправления;
		ВидПеревозки = МаршрутныйЛист.ВидПеревозки;
		ТипВладенияТС = МаршрутныйЛист.ТС.ТипВладенияТС;
		
		ЗаполнениеВыработкиЗаказМЛ(Заказ, МаршрутныйЛист);
		ЗаполнениеТоваровМЛ(МаршрутныйЛист);
		
		Возврат ДополнительныеТТД;
	КонецЕсли;
	
	// тут и заказ, и маршрутный лист непустые
	ВалютаДокумента = Заказ.ВалютаДокумента;
	ВидПеревозки = Заказ.ВидПеревозки;
	Грузоотправитель = Заказ.Грузоотправитель;
	УполномоченноеЛицоГрузоотправителя = Заказ.КонтактноеЛицоГрузоотправителя;
	Грузополучатель = Заказ.Грузополучатель;
	УполномоченноеЛицоГрузополучателя = Заказ.КонтактноеЛицоГрузополучателя;
	ДоговорКонтрагента = Заказ.ДоговорКонтрагента;
	Контрагент = Заказ.Контрагент;
	ТипВладенияТС = МаршрутныйЛист.ТС.ТипВладенияТС;
	
	Если Заказ.FTL Тогда
		// Создаются отдельные ТТД на грузы с разными пунктами отправления / назначения
		Запрос = Новый Запрос;
		ПараметрыТекстаЗапроса = Новый Структура("ПорядокПоПунктам", Истина);
		Если флПерезаполнитьСуществующийТТД И ЗначениеЗаполнено(Ссылка) Тогда
			ПараметрыТекстаЗапроса.Вставить("ТТДИсключение", Ссылка);
			Запрос.УстановитьПараметр("ТТДИсключение", Ссылка);
		КонецЕсли;
		Запрос.Текст = Документы.уатТТД.ГрузыFTLЗаказовНеВТТДТекстЗапроса(ПараметрыТекстаЗапроса);
		Запрос.УстановитьПараметр("ЗаказСсылка", Заказ);
		
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			ЗаполнятьВыработкуПоОтрезкуПути = Заказ.ДетализацияЗакрытия <> Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам;
			мсвСтрокиГрузов = Новый Массив;
			ТаблицаГрузов = РезультатЗапроса.Выгрузить();
			ИспользоватьНовыйТТД = Ложь;
			//Для Каждого ТекСтрока Из ТаблицаГрузов Цикл
			Для Сч = 0 По ТаблицаГрузов.Количество()-1 Цикл
				ТекСтрока = ТаблицаГрузов[Сч];
				мсвСтрокиГрузов.Добавить(ТекСтрока);
				Если Сч = ТаблицаГрузов.Количество()-1 Тогда
					следАдресДоставки = Неопределено;
					следАдресОтправления = Неопределено;
				Иначе
					следАдресДоставки = ТаблицаГрузов[Сч+1].ПунктНазначения;
					следАдресОтправления = ТаблицаГрузов[Сч+1].ПунктОтправления;
				КонецЕсли;
				
				Если следАдресДоставки = ТекСтрока.ПунктНазначения И следАдресОтправления = ТекСтрока.ПунктОтправления Тогда
					// Заполнены еще не все грузы на текущем отрезке пути
					Продолжить;
				ИначеЕсли флПерезаполнитьСуществующийТТД 
					И ТекСтрока.ПунктНазначения = АдресДоставки И ТекСтрока.ПунктОтправления = АдресОтправления Тогда
					// Перезаписываем текущий ТТД, создавать новые не требуется
					ЭтотОбъект.ЗаполнениеТоваровЗаказМЛ(Заказ, МаршрутныйЛист, мсвСтрокиГрузов);
					ЭтотОбъект.ЗаполнениеВыработкиЗаказМЛ(Заказ, МаршрутныйЛист, ЗаполнятьВыработкуПоОтрезкуПути, мсвСтрокиГрузов);
					Прервать;
				ИначеЕсли флПерезаполнитьСуществующийТТД Тогда
					// Получены грузы по отрезку, не совпадающему с ТТД, они сбрасываются
					мсвСтрокиГрузов = Новый Массив;
				ИначеЕсли ИспользоватьНовыйТТД Тогда
					// Создается еще один ТТД, поскольку грузы разбиты на более чем 1 отрезок пути
					ТекущийДокументОбъект = ЭтотОбъект.Скопировать();
					ТекущийДокументОбъект.Дата = ТекущаяДата();
					ТекущийДокументОбъект.АдресДоставки = ТекСтрока.ПунктНазначения;
					ТекущийДокументОбъект.АдресОтправления = ТекСтрока.ПунктОтправления;
					ТекущийДокументОбъект.ЗаполнениеТоваровЗаказМЛ(Заказ, МаршрутныйЛист, мсвСтрокиГрузов);
					ТекущийДокументОбъект.ЗаполнениеВыработкиЗаказМЛ(Заказ, МаршрутныйЛист, ЗаполнятьВыработкуПоОтрезкуПути, мсвСтрокиГрузов);
					ДополнительныеТТД.Добавить(ТекущийДокументОбъект);
					мсвСтрокиГрузов = Новый Массив;
				Иначе
					// Записываем грузы в текущий ТТД, т.к. он еще не заполнен
					ЭтотОбъект.АдресДоставки = ТекСтрока.ПунктНазначения;
					ЭтотОбъект.АдресОтправления = ТекСтрока.ПунктОтправления;
					ЭтотОбъект.ЗаполнениеТоваровЗаказМЛ(Заказ, МаршрутныйЛист, мсвСтрокиГрузов);
					ЭтотОбъект.ЗаполнениеВыработкиЗаказМЛ(Заказ, МаршрутныйЛист, ЗаполнятьВыработкуПоОтрезкуПути, мсвСтрокиГрузов);
					ИспользоватьНовыйТТД = Истина;
					мсвСтрокиГрузов = Новый Массив;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	Иначе
		АдресДоставки = Заказ.АдресНазначения;
		АдресОтправления = Заказ.АдресОтправления;
			
		// Заполняем список грузов
		Запрос = Новый Запрос;
		ПараметрыТекстаЗапроса = Новый Структура;
		Если флПерезаполнитьСуществующийТТД И ЗначениеЗаполнено(Ссылка) Тогда
			ПараметрыТекстаЗапроса.Вставить("ТТДИсключение", Ссылка);
			Запрос.УстановитьПараметр("ТТДИсключение", Ссылка);
		КонецЕсли;
		
		Запрос.Текст = Документы.уатТТД.ГрузыНеFTLЗаказовНеВТТДТекстЗапроса(ПараметрыТекстаЗапроса);
		ЗаказыМаршрутныеЛисты = Новый ТаблицаЗначений;
		ЗаказыМаршрутныеЛисты.Колонки.Добавить("Заказ", Новый ОписаниеТипов("ДокументСсылка.уатЗаказГрузоотправителя"));
		ЗаказыМаршрутныеЛисты.Колонки.Добавить("МаршрутныйЛист", Новый ОписаниеТипов("ДокументСсылка.уатМаршрутныйЛист"));
		ЗаказыМаршрутныеЛисты.Колонки.Добавить("FTL", Новый ОписаниеТипов("Булево"));
		НоваяСтрока = ЗаказыМаршрутныеЛисты.Добавить();
		НоваяСтрока.Заказ = Заказ;
		НоваяСтрока.МаршрутныйЛист = МаршрутныйЛист;
		НоваяСтрока.FTL = Ложь;
		//ЗаказыМаршрутныеЛисты.Добавить(Новый Структура("Заказ, МаршрутныйЛист, FTL", Заказ, МаршрутныйЛист, Ложь));
		Запрос.УстановитьПараметр("ЗаказыМаршрутныеЛисты", ЗаказыМаршрутныеЛисты);
		Если Константы.уатЕдиницаИзмеренияВеса.Получить() = Перечисления.уатЕдиницыИзмеренияВеса.Килограмм Тогда
			КоэфВеса = 1000;
		Иначе 
			КоэфВеса = 1;
		КонецЕсли;
		Запрос.УстановитьПараметр("КоэфВеса", КоэфВеса);
		ТаблицаГрузов = Запрос.Выполнить().Выгрузить();
		ЗаполнениеТоваровЗаказМЛ(Заказ, МаршрутныйЛист, ТаблицаГрузов);
		
		// Заполняем выработку по маршрутному листу
		ЗаполнениеВыработкиЗаказМЛ(Заказ, МаршрутныйЛист,,ТаблицаГрузов);
	КонецЕсли;

	Возврат ДополнительныеТТД;
	
КонецФункции

// Процедура заполняет ТЧ Выработка по заказу и маршрутному листу
// Параметры: Заказ - документ уатЗаказГрузоотправителя (Заказ на ТС)
// МаршрутныйЛист - документ уатМаршрутныйЛист
Процедура ЗаполнениеВыработкиЗаказМЛ(Заказ, МаршрутныйЛист, ЗаполнятьПоОтрезкуПути = Ложь, ТаблицаГрузов = Неопределено) Экспорт
	
	Выработка.Очистить();
	
	Если Константы.уатЕдиницаИзмеренияВеса.Получить() = Перечисления.уатЕдиницыИзмеренияВеса.Килограмм Тогда
		КоэфВеса = 1000;
	Иначе 
		КоэфВеса = 1;
	КонецЕсли;
	Если Константы.уатЕдиницаИзмеренияОбъема.Получить() = Перечисления.уатЕдиницыИзмеренияОбъема.Литр Тогда
		КоэфОбъема = 1000;
	Иначе 
		КоэфОбъема = 1;
	КонецЕсли;
	
	СтрокаВыработка = Выработка.Добавить();
	СтрокаВыработка.КоличествоЕздок = 1;
	СтрокаВыработка.ОбъектСтроительства = МаршрутныйЛист.ОбъектСтроительства;
	СтрокаВыработка.ВидПеревозки = МаршрутныйЛист.ВидПеревозки;
	СтрокаВыработка.Маршрут = МаршрутныйЛист.Маршрут;
	СтрокаВыработка.НаправлениеПеревозки = МаршрутныйЛист.НаправлениеПеревозки;
	
	Если Заказ.Пустая() Тогда
		СтрокаВыработка.Объем = МаршрутныйЛист.Объем/КоэфОбъема;
		СтрокаВыработка.КоличествоТонн = МаршрутныйЛист.ВесБрутто/КоэфВеса;
		СтрокаВыработка.КоличествоКмГруз = МаршрутныйЛист.ПробегСГрузом;
		СтрокаВыработка.КоличествоКмПорожний = МаршрутныйЛист.ПробегПорожний;
		СтрокаВыработка.КоличествоЧасов = уатОбщегоНазначения.уатВремяВСекунды(МаршрутныйЛист.ВремяВПути)/3600;
		СтрокаВыработка.КоличествоМест = МаршрутныйЛист.КоличествоМест;
	ИначеЕсли ЗаполнятьПоОтрезкуПути Тогда
		
		МаршрутныйЛистЗаказы = МаршрутныйЛист.Заказы;
		ПараметрыОтбора = Новый Структура("ЗаказГрузоотправителя, Пункт", Заказ, АдресОтправления);
		СтрокиОтправления = МаршрутныйЛистЗаказы.НайтиСтроки(ПараметрыОтбора);
		ПараметрыОтбора.Пункт = АдресДоставки;
		СтрокиПрибытия = МаршрутныйЛистЗаказы.НайтиСтроки(ПараметрыОтбора);
		Если СтрокиПрибытия.Количество() = 0 
			Или СтрокиОтправления.Количество() = 0 Тогда
			// Отрезок пути в маршрутном листе не найден, подставляем значения по марщрутногму листу в целом
			ЗаполнениеВыработкиЗаказМЛ(Заказ, МаршрутныйЛист);
			Возврат;
		КонецЕсли;
		
		ВремяВРаботе = 0;
		ПробегСГрузом = 0;
		Для Сч = СтрокиОтправления[0].НомерСтроки-1 По СтрокиПрибытия[0].НомерСтроки-2 Цикл
			ТекСтрока = МаршрутныйЛистЗаказы[Сч];
			СледПункт = МаршрутныйЛистЗаказы[Сч+1].Пункт;
			Если СледПункт <> ТекСтрока.Пункт Тогда // Это последняя строка в этом пункте, следующая строка - другой пункт
				ПробегСГрузом = ПробегСГрузом + ТекСтрока.Расстояние;
				ВремяВРаботе = ВремяВРаботе + уатОбщегоНазначения.уатВремяВСекунды(ТекСтрока.Время);
			КонецЕсли;
		КонецЦикла;
		
		СтрокаВыработка.КоличествоКмГруз = ПробегСГрузом;
		СтрокаВыработка.КоличествоЧасов = уатОбщегоНазначения.уатВремяВЧЧ_ММ(ВремяВРаботе);
		// Пробег порожний не может попасть в ТТД, потому что мы заполняем ТТД на отрезок от погрузки груза до выгрузки.
		СтрокаВыработка.КоличествоКмПорожний = 0;
		
		ОбъемГруза = 0;
		Если ЗначениеЗаполнено(ТаблицаГрузов) Тогда
			Для Каждого ТекГруз Из ТаблицаГрузов Цикл
				ОбъемГруза = ОбъемГруза + ТекГруз.Объем / КоэфОбъема;
			КонецЦикла;
		КонецЕсли;
		
		СтрокаВыработка.Объем = ОбъемГруза;
		СтрокаВыработка.КоличествоТонн = Грузы.Итог("КоличествоТонн");
		СтрокаВыработка.КоличествоМест = Грузы.Итог("КоличествоМест");
		
	Иначе
		
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатВыработкаПоМаршрутнымЛистам_уэ.ПараметрВыработки КАК ПараметрВыработки,
		|	уатВыработкаПоМаршрутнымЛистам_уэ.Количество КАК Количество
		|ИЗ
		|	РегистрНакопления.уатВыработкаПоМаршрутнымЛистам_уэ КАК уатВыработкаПоМаршрутнымЛистам_уэ
		|ГДЕ
		|	уатВыработкаПоМаршрутнымЛистам_уэ.Регистратор = &МаршрутныйЛист
		|	И уатВыработкаПоМаршрутнымЛистам_уэ.Заказ = &Заказ";
		Запрос.УстановитьПараметр("МаршрутныйЛист", МаршрутныйЛист);
		Запрос.УстановитьПараметр("Заказ", Заказ);
		Выборка = Запрос.Выполнить().Выбрать();
		
		Пока Выборка.Следующий() Цикл
			Если Выборка.ПараметрВыработки = Справочники.уатПараметрыВыработки["ВесГруза"] Тогда
				СтрокаВыработка.КоличествоТонн = Выборка.Количество / КоэфВеса;
			ИначеЕсли Выборка.ПараметрВыработки = Справочники.уатПараметрыВыработки["Объем"] Тогда
				СтрокаВыработка.Объем = Выборка.Количество / КоэфОбъема;
			ИначеЕсли Выборка.ПараметрВыработки = Справочники.уатПараметрыВыработки["ПробегСГрузом"] Тогда
				СтрокаВыработка.КоличествоКмГруз = Выборка.Количество;
			ИначеЕсли Выборка.ПараметрВыработки = Справочники.уатПараметрыВыработки["ПробегПорожний"] Тогда
				СтрокаВыработка.КоличествоКмПорожний = Выборка.Количество;
			ИначеЕсли Выборка.ПараметрВыработки = Справочники.уатПараметрыВыработки["ВремяВРаботе"] Тогда
				СтрокаВыработка.КоличествоЧасов = уатОбщегоНазначения.уатВремяВЧЧ_ММ(Выборка.Количество);
			ИначеЕсли Выборка.ПараметрВыработки = Справочники.уатПараметрыВыработки["КоличествоУпаковок"] Тогда
				СтрокаВыработка.КоличествоМест = Выборка.Количество;
			ИначеЕсли Выборка.ПараметрВыработки = Справочники.уатПараметрыВыработки["КоличествоЕздок"] Тогда
				СтрокаВыработка.КоличествоЕздок = Выборка.Количество;
			КонецЕсли;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ТаблицаГрузов) Тогда
			
			СтрокаВыработка.Объем          = 0;
			СтрокаВыработка.КоличествоТонн = 0;
			СтрокаВыработка.КоличествоМест = 0;
			Для Каждого ТекГруз Из ТаблицаГрузов Цикл
				СтрокаВыработка.Объем          = СтрокаВыработка.Объем + ТекГруз.Объем / КоэфОбъема;
				СтрокаВыработка.КоличествоТонн = СтрокаВыработка.КоличествоТонн + ТекГруз.ВесБрутто / КоэфВеса;
				СтрокаВыработка.КоличествоМест = СтрокаВыработка.КоличествоМест + ТекГруз.КоличествоМест;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;

КонецПроцедуры

// Процедура заполняет ТЧ Грузы всеми товарами из маршрутного листа
// МаршрутныйЛист - документ уатМаршрутныйЛист
Процедура ЗаполнениеТоваровМЛ(МаршрутныйЛист)
	
	Если Константы.уатЕдиницаИзмеренияВеса.Получить() = Перечисления.уатЕдиницыИзмеренияВеса.Килограмм Тогда
		КоэфВеса = 1000;
	Иначе 
		КоэфВеса = 1;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатМаршрутныйЛистЗаказы.ВесБрутто КАК ВесБрутто,
	|	уатМаршрутныйЛистЗаказы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	уатМаршрутныйЛистЗаказы.Количество КАК Количество,
	|	уатМаршрутныйЛистЗаказы.КоличествоМест КАК КоличествоМест,
	|	уатМаршрутныйЛистЗаказы.Номенклатура КАК Груз
	|ИЗ
	|	Документ.уатМаршрутныйЛист.Заказы КАК уатМаршрутныйЛистЗаказы
	|ГДЕ
	|	уатМаршрутныйЛистЗаказы.Ссылка = &Ссылка
	|    И уатМаршрутныйЛистЗаказы.ТипТочкиМаршрута = &ТипТочкиРазгрузка";
	Запрос.УстановитьПараметр("Ссылка", МаршрутныйЛист);
	Запрос.УстановитьПараметр("ТипТочкиРазгрузка", Перечисления.уатТипыТочекМаршрута.Разгрузка);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокаГрузы = Грузы.Добавить();
		СтрокаГрузы.Груз = ?(ЗначениеЗаполнено(Выборка.Груз), Выборка.Груз, Справочники.Номенклатура.ПустаяСсылка());
		Если ТипЗнч(Выборка.ЕдиницаИзмерения) = Тип("СправочникСсылка.уатВидыУпаковки_уэ") Тогда
			СтрокаГрузы.ВидУпаковки = Строка(Выборка.ЕдиницаИзмерения);
		Иначе
			СтрокаГрузы.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
			Если ТипЗнч(СтрокаГрузы.Груз) = Тип("СправочникСсылка.уатГрузовыеМеста_уэ") И СтрокаГрузы.Груз.Контейнер Тогда
				СтрокаГрузы.ВидУпаковки = НСтр("en='Container'; ru='Контейнер'");
			КонецЕсли;
		КонецЕсли;
		СтрокаГрузы.Количество     = Выборка.Количество;
		СтрокаГрузы.КоличествоМест = Выборка.КоличествоМест;
		СтрокаГрузы.КоличествоТонн = Выборка.ВесБрутто / КоэфВеса;
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполняет ТЧ Грузы товарами из маршрутного листа по данному заказу
// МаршрутныйЛист - документ уатМаршрутныйЛист
Процедура ЗаполнениеТоваровЗаказМЛ(Заказ, МаршрутныйЛист, ТаблицаГрузов = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(Заказ) Тогда
		ЗаполнениеТоваровМЛ(МаршрутныйЛист);
		Возврат;
	КонецЕсли;
	
	Если Константы.уатЕдиницаИзмеренияВеса.Получить() = Перечисления.уатЕдиницыИзмеренияВеса.Килограмм Тогда
		КоэфВеса = 1000;
	Иначе 
		КоэфВеса = 1;
	КонецЕсли;
	
	Грузы.Очистить();
	
	Если Заказ.ДетализацияЗакрытия = ПредопределенноеЗначение("Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам") Тогда
		// В этом случае мы не создаем строку в ТЧ Грузы - в нее (почти) нечего записывать
	ИначеЕсли ЗначениеЗаполнено(ТаблицаГрузов) Тогда
		Для Каждого ТекСтрока Из ТаблицаГрузов Цикл
			СтрокаГрузы = Грузы.Добавить();
			СтрокаГрузы.Груз = ТекСтрока.Груз;
			Если ТипЗнч(ТекСтрока.ЕдиницаИзмерения) = Тип("СправочникСсылка.уатВидыУпаковки_уэ") Тогда
				СтрокаГрузы.ВидУпаковки = Строка(ТекСтрока.ЕдиницаИзмерения);
			Иначе
				СтрокаГрузы.ЕдиницаИзмерения = ТекСтрока.ЕдиницаИзмерения;
				Если ТипЗнч(ТекСтрока.Груз) = Тип("СправочникСсылка.уатГрузовыеМеста_уэ") И ТекСтрока.Груз.Контейнер Тогда
					СтрокаГрузы.ВидУпаковки = НСтр("en='Container'; ru='Контейнер'");
				КонецЕсли;
			КонецЕсли;
			СтрокаГрузы.КоличествоТонн = ТекСтрока.ВесБрутто/КоэфВеса;
			СтрокаГрузы.Количество = ТекСтрока.Количество;
			СтрокаГрузы.КоличествоМест = ТекСтрока.КоличествоМест;
			СтрокаГрузы.Цена = ТекСтрока.Цена;
			СтрокаГрузы.Сумма = ТекСтрока.Сумма;
		КонецЦикла;
	ИначеЕсли Заказ.ДетализацияЗакрытия = ПредопределенноеЗначение("Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам") Тогда
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатГрузыКПеревозке_уэ.Количество КАК Количество,
		|	уатГрузыКПеревозке_уэ.Номенклатура КАК Номенклатура,
		|	уатГрузыКПеревозке_уэ.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ЕСТЬNULL(уатЗаказГрузоотправителяТовары.ВесБрутто, 0) КАК ВесБрутто,
		|	ЕСТЬNULL(уатЗаказГрузоотправителяТовары.Количество, 0) КАК КоличествоПоЗаказу,
		|	ЕСТЬNULL(уатЗаказГрузоотправителяТовары.Цена, 0) КАК Цена,
		|	ЕСТЬNULL(уатЗаказГрузоотправителяТовары.Сумма, 0) КАК Сумма,
		|	ЕСТЬNULL(уатЗаказГрузоотправителяТовары.КоличествоМест, 0) КАК КоличествоМест
		|ИЗ
		|	РегистрНакопления.уатГрузыКПеревозке_уэ КАК уатГрузыКПеревозке_уэ
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя.Товары КАК уатЗаказГрузоотправителяТовары
		|		ПО уатГрузыКПеревозке_уэ.ЗаказГрузоотправителя = уатЗаказГрузоотправителяТовары.Ссылка
		|			И уатГрузыКПеревозке_уэ.Номенклатура = уатЗаказГрузоотправителяТовары.Номенклатура
		|ГДЕ
		|	уатГрузыКПеревозке_уэ.Регистратор = &МаршрутныйЛист
		|	И уатГрузыКПеревозке_уэ.ЗаказГрузоотправителя = &ЗаказГрузоотправителя";
		Запрос.УстановитьПараметр("МаршрутныйЛист", МаршрутныйЛист);
		Запрос.УстановитьПараметр("ЗаказГрузоотправителя", Заказ);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СтрокаГрузы = Грузы.Добавить();
			СтрокаГрузы.Груз = ?(ЗначениеЗаполнено(Выборка.Номенклатура), Выборка.Номенклатура, Справочники.Номенклатура.ПустаяСсылка());
			СтрокаГрузы.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
			СтрокаГрузы.КоличествоТонн = ?(Выборка.КоличествоПоЗаказу = 0, Выборка.ВесБрутто/КоэфВеса, Выборка.ВесБрутто/КоэфВеса*Выборка.Количество/Выборка.КоличествоПоЗаказу);
			СтрокаГрузы.Количество = Выборка.Количество;
			СтрокаГрузы.КоличествоМест = ?(Выборка.КоличествоПоЗаказу = 0, Выборка.КоличествоМест, Выборка.КоличествоМест*Выборка.Количество/Выборка.КоличествоПоЗаказу);
			СтрокаГрузы.Цена = Выборка.Цена;
			СтрокаГрузы.Сумма = ?(Выборка.КоличествоПоЗаказу = 0, Выборка.Сумма, Выборка.Сумма*Выборка.Количество/Выборка.КоличествоПоЗаказу);
		КонецЦикла;
	ИначеЕсли Заказ.ДетализацияЗакрытия = ПредопределенноеЗначение("Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам") Тогда
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатГрузыКПеревозке_уэ.Количество КАК Количество,
		|	уатГрузыКПеревозке_уэ.ГрузовоеМесто КАК ГрузовоеМесто,
		|	уатГрузыКПеревозке_уэ.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ЕСТЬNULL(уатЗаказГрузоотправителяГрузовойСостав.ВидУпаковки, НЕОПРЕДЕЛЕНО) КАК ВидУпаковки,
		|	ЕСТЬNULL(уатЗаказГрузоотправителяГрузовойСостав.ВесБрутто, 0) КАК ВесБрутто,
		|	ЕСТЬNULL(уатЗаказГрузоотправителяГрузовойСостав.КоличествоМест, 0) КАК КоличествоМест,
		|	ЕСТЬNULL(уатЗаказГрузоотправителяГрузовойСостав.Стоимость, 0) КАК Стоимость
		|ИЗ
		|	РегистрНакопления.уатГрузыКПеревозке_уэ КАК уатГрузыКПеревозке_уэ
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя.ГрузовойСостав КАК уатЗаказГрузоотправителяГрузовойСостав
		|		ПО уатГрузыКПеревозке_уэ.ЗаказГрузоотправителя = уатЗаказГрузоотправителяГрузовойСостав.Ссылка
		|			И уатГрузыКПеревозке_уэ.ГрузовоеМесто = уатЗаказГрузоотправителяГрузовойСостав.ГрузовоеМесто
		|ГДЕ
		|	уатГрузыКПеревозке_уэ.Регистратор = &МаршрутныйЛист
		|	И уатГрузыКПеревозке_уэ.ЗаказГрузоотправителя = &ЗаказГрузоотправителя";
		Запрос.УстановитьПараметр("МаршрутныйЛист", МаршрутныйЛист);
		Запрос.УстановитьПараметр("ЗаказГрузоотправителя", Заказ);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			СтрокаГрузы = Грузы.Добавить();
			СтрокаГрузы.Груз = ?(ЗначениеЗаполнено(Выборка.ГрузовоеМесто), Выборка.ГрузовоеМесто, Справочники.уатГрузовыеМеста_уэ.ПустаяСсылка());
			СтрокаГрузы.ЕдиницаИзмерения = Выборка.ЕдиницаИзмерения;
			СтрокаГрузы.КоличествоТонн = ?(Выборка.КоличествоМест = 0, Выборка.ВесБрутто/КоэфВеса, Выборка.ВесБрутто/КоэфВеса*Выборка.Количество/Выборка.КоличествоМест);
			СтрокаГрузы.КоличествоМест = Выборка.Количество;
			СтрокаГрузы.Количество = Выборка.Количество;
			СтрокаГрузы.ВидУпаковки = Выборка.ВидУпаковки;
			СтрокаГрузы.Сумма = ?(Выборка.КоличествоМест = 0, Выборка.Стоимость, Выборка.Стоимость*Выборка.Количество/Выборка.КоличествоМест);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Функция получает значение для реквизита СтоимостьПеревозки из регистров
Функция ПолучитьСтоимостьПеревозки(Заказ, МаршрутныйЛист)
	Если Заказ.Пустая() ИЛИ МаршрутныйЛист.ПринадлежностьПеревозки = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Виртуальное") Тогда
		Возврат 0;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Если МаршрутныйЛист.ПринадлежностьПеревозки = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное") Тогда
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатДоходыОбороты.СуммаРеглПриход КАК Сумма
		|ИЗ
		|	РегистрНакопления.уатДоходы.Обороты(
		|			,
		|			,
		|			,
		|			ТС = &ТС
		|				И Заказ = &Заказ) КАК уатДоходыОбороты";
	ИначеЕсли МаршрутныйЛист.ПринадлежностьПеревозки = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Привлеченное") Тогда
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатРасходыОбороты.СуммаРеглПриход КАК Сумма
		|ИЗ
		|	РегистрНакопления.уатРасходы.Обороты(
		|			,
		|			,
		|			,
		|			ТС = &ТС
		|				И Заказ = &Заказ) КАК уатРасходыОбороты";
	Иначе
		Возврат 0;
	КонецЕсли;
	Запрос.УстановитьПараметр("ТС", МаршрутныйЛист.ТС);
	Запрос.УстановитьПараметр("Заказ", Заказ);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Сумма;
	Иначе 
		Возврат 0;
	КонецЕсли;
КонецФункции

// Процедура удаляет элементы второго массива из первого
Процедура УдалитьНепроверяемыеРеквизитыИзМассива(МассивРеквизитов, МассивНепроверяемыхРеквизитов)

  Для Каждого ЭлементМассива Из МассивНепроверяемыхРеквизитов Цикл
 
    ПорядковыйНомер = МассивРеквизитов.Найти(ЭлементМассива);
    Если ПорядковыйНомер <> Неопределено Тогда
      МассивРеквизитов.Удалить(ПорядковыйНомер);
    КонецЕсли;
 
  КонецЦикла;
 
КонецПроцедуры

Функция ПараметрыВыработкиСуммированиеПоЭтапам(ПутевойЛист = Неопределено)
	Результат = Справочники.уатПараметрыВыработки.ПараметрыВыработкиСуммированиеПоЭтапам();
	Если ЗначениеЗаполнено(ПутевойЛист) Тогда
		ПараметрВыработкиПробегСГрузом = ПолучитьПараметрВыработкиПробегСГрузомПассажирами(ПутевойЛист.ВидПЛ);
		Если ПараметрВыработкиПробегСГрузом = Справочники.уатПараметрыВыработки.ПробегСГрузом Тогда
			Результат.Вставить("ПробегСГрузомПассажирами", Результат.ПробегСГрузом);
		Иначе
			Результат.Вставить("ПробегСГрузомПассажирами", Результат.ПробегСПассажирами);
		КонецЕсли;
	Иначе
		Результат.Вставить("ПробегСГрузомПассажирами", Результат.ПробегСГрузом);
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

Функция ПолучитьПараметрВыработкиПробегСГрузомПассажирами(ВидПЛ)
	Если (ВидПЛ = Перечисления.уатВидыПЛ._3 Или ВидПЛ = Перечисления.уатВидыПЛ._ПА1
		Или ВидПЛ = Перечисления.уатВидыПЛ._6 Или ВидПЛ = Перечисления.уатВидыПЛ._6С) Тогда
		ПараметрВыработкиПробегСГрузомПассажирами = Справочники.уатПараметрыВыработки.ПробегСПассажирами;
	Иначе
		ПараметрВыработкиПробегСГрузомПассажирами = Справочники.уатПараметрыВыработки.ПробегСГрузом;
	КонецЕсли;
	Возврат ПараметрВыработкиПробегСГрузомПассажирами;
КонецФункции

Процедура ЗаполнитьУполномоченныеЛица(МассивГрузоотправителей, МассивГрузополучателей) Экспорт
	
	Если МассивГрузоотправителей.Количество() <> 0 Тогда 
		Если МассивГрузоотправителей.Количество() = 1 Тогда
			Грузоотправитель = МассивГрузоотправителей[0].Ссылка;
			УполномоченноеЛицоГрузоотправителя = МассивГрузоотправителей[0].УполномоченноеЛицо;
		Иначе
			ВсеОК = Истина;
			ПервыйГрузотправитель = МассивГрузоотправителей[0].Ссылка;
			ПервоеУполномоченноеЛицо = МассивГрузоотправителей[0].УполномоченноеЛицо;
			Для Каждого ТекГрузоотправитель Из МассивГрузоотправителей Цикл
				Если ПервыйГрузотправитель <> ТекГрузоотправитель.Ссылка Или 
					ПервоеУполномоченноеЛицо <> ТекГрузоотправитель.УполномоченноеЛицо Тогда
					ВсеОК = Ложь;
					Прервать;
				КонецЕсли;	
			КонецЦикла;
			
			Если ВсеОК Тогда
				Грузоотправитель = ПервыйГрузотправитель;
				УполномоченноеЛицоГрузоотправителя = ПервоеУполномоченноеЛицо;
			Иначе
				ТекстСообщения = НСтр("en='';ru='В Путевом листе имеются строки задания с различными грузоотправителями. Грузоотправитель и уполномоченное лицо заполнены не будут.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Грузоотправитель = "";
				УполномоченноеЛицоГрузоотправителя = "";
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	Если МассивГрузополучателей.Количество() <> 0 Тогда
		Если МассивГрузополучателей.Количество() = 1 Тогда
			Грузополучатель = МассивГрузополучателей[0].Ссылка;
			УполномоченноеЛицоГрузополучателя = МассивГрузополучателей[0].УполномоченноеЛицо;
		Иначе
			
			ВсеОК = Истина;
			ПервыйГрузополучатель = МассивГрузополучателей[0].Ссылка;
			ПервоеУполномоченноеЛицо = МассивГрузополучателей[0].УполномоченноеЛицо;
			Для Каждого ТекГрузополучатель Из МассивГрузополучателей Цикл
				Если ПервыйГрузополучатель <> ТекГрузополучатель.Ссылка Или 
					ПервоеУполномоченноеЛицо <> ТекГрузополучатель.УполномоченноеЛицо Тогда
					ВсеОК = Ложь;
					Прервать;
				КонецЕсли;	
			КонецЦикла;
			
			Если ВсеОК Тогда
				Грузополучатель = ПервыйГрузополучатель;
				УполномоченноеЛицоГрузополучателя = ПервоеУполномоченноеЛицо;
			Иначе
				ТекстСообщения = НСтр("en='';ru='В Путевом листе имеются строки задания с различными грузополучателями. Грузополучатель и уполномоченное лицо заполнены не будут.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
				Грузополучатель = "";
				УполномоченноеЛицоГрузополучателя = "";
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область Инициализация

//мВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

#КонецОбласти

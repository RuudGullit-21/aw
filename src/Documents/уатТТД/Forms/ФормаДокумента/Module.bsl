
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	уатЗащищенныеФункцииСервер.уатДокументФормаЭлементаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, Объект, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.УчетОригиналовПервчиныхДокументов
	УчетОригиналовПервичныхДокументов.ПриСозданииНаСервере_ФормаДокумента(ЭтотОбъект, Элементы.ГруппаУчетПервичныхДокументов);
	уатУчетОригиналовПервичныхДокументов.ОтобразитьДатуПоследнегоИзмененияПервичныхДокументов(ЭтотОбъект, Элементы.ГруппаУчетПервичныхДокументов);
	// Конец СтандартныеПодсистемы.УчетОригиналовПервчиныхДокументов

	// Ввод на основании строк Путевого листа
	Если Параметры.Свойство("ВводТТДизПЛ") И Параметры.ВводТТДизПЛ Тогда
		ОбъектТТД = РеквизитФормыВЗначение("Объект");
		Если Параметры.Свойство("СтрокиПутевогоЛиста") Тогда
			ОбъектТТД.ДополнительныеСвойства.Вставить("СтрокиПутевогоЛиста", Параметры.СтрокиПутевогоЛиста);
		КонецЕсли;
		ОбъектТТД.Заполнить(Параметры.ПЛ);
		ЗначениеВРеквизитФормы(ОбъектТТД, "Объект");
		флЗаполнениеПоСтрокамПутевогоЛиста = Истина;
	КонецЕсли;
		
	// Ввод на основании Заказа на ТС и Маршрутного листа
	мсвДополнительныеТТД = Новый Массив;
	Если ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.уатЗаказГрузоотправителя")
		ИЛИ ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.уатМаршрутныйЛист") Тогда
		ОбъектТТД = РеквизитФормыВЗначение("Объект");
		
		ДанныеЗаполнения = Новый Структура();
		ДанныеЗаполнения.Вставить("Основание", Параметры.Основание);
		Если ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") Тогда
			ДанныеЗаполнения.Вставить("флВыбратьЗаказ", Истина);
			флВыборЗаказа = Ложь;
		Иначе
			ДанныеЗаполнения.Вставить("флВыбратьМЛ", Истина);
			флВыборЗаказа = Истина;
		КонецЕсли;
				
		ОбъектТТД.Заполнить(ДанныеЗаполнения);
		
		Если ОбъектТТД.ДополнительныеСвойства.Свойство("тзМаршрутныеЛистыИЗаказы") Тогда
			тзМаршрутныеЛистыИЗаказы = ОбъектТТД.ДополнительныеСвойства.тзМаршрутныеЛистыИЗаказы;
			мсвМаршрутныеЛистыИЗаказы.ЗагрузитьЗначения(уатОбщегоНазначенияСервер.ПреобразоватьТаблицувМассивСтрок(тзМаршрутныеЛистыИЗаказы));
		КонецЕсли;
		Если ОбъектТТД.ДополнительныеСвойства.Свойство("Заказ") И ОбъектТТД.ДополнительныеСвойства.Свойство("МаршрутныйЛист") Тогда
			мсвДополнительныеТТД = ОбъектТТД.ОбработкаЗаполненияЗаказМЛ(ОбъектТТД.ДополнительныеСвойства.Заказ, ОбъектТТД.ДополнительныеСвойства.МаршрутныйЛист, Отказ);
			Если Отказ Тогда
				Возврат;
			КонецЕсли;
		КонецЕсли;
		ЗначениеВРеквизитФормы(ОбъектТТД, "Объект");
	КонецЕсли;
	
	// Создание из формы выбора заказа (и маршрутного листа) "ФормаВыборЗаказа"
	Если Параметры.Свойство("Заказ") И Параметры.Свойство("МаршрутныйЛист") Тогда
		ОбъектТТД = РеквизитФормыВЗначение("Объект");
		мсвДополнительныеТТД = ОбъектТТД.ОбработкаЗаполненияЗаказМЛ(Параметры.Заказ, Параметры.МаршрутныйЛист, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
		ЗначениеВРеквизитФормы(ОбъектТТД, "Объект");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(мсвДополнительныеТТД) Тогда
		АдресХранилищаДопТТД = ПоместитьВоВременноеХранилище(мсвДополнительныеТТД, ЭтаФорма.УникальныйИдентификатор);
		мсвДополнительныеТТДКоличество = мсвДополнительныеТТД.Количество();;
	Иначе
		АдресХранилищаДопТТД = "";
		мсвДополнительныеТТДКоличество = 0;
	КонецЕсли;
	
	Если Параметры.Свойство("ОбновитьНадписьВыработкаГрузыПослеОткрытия") Тогда
		ОбновитьНадписьВыработкаГрузыПослеОткрытия = Параметры.ОбновитьНадписьВыработкаГрузыПослеОткрытия;
	КонецЕсли;
	
	// Установка реквизитов формы.
	мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ПредставлениеКоличествоМест = Справочники.уатВидыУпаковки_уэ.ПолучитьОсновнойВидУпаковки().КраткоеНаименование;
	Если ЗначениеЗаполнено(ПредставлениеКоличествоМест) Тогда
		Элементы.ТабличноеПолеТТНКоличествоМест.Заголовок  = ПредставлениеКоличествоМест;
		Элементы.ТабличноеПолеТТНКоличествоМест1.Заголовок = ПредставлениеКоличествоМест;
	КонецЕсли;
	
	Контрагент = Объект.Контрагент;
	Если НЕ Объект.Ссылка.Пустая() ИЛИ НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Договор = Объект.ДоговорКонтрагента;
	КонецЕсли;
	ВалютаРасчетов = Объект.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	НациональнаяВалюта = мВалютаРегламентированногоУчета;
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", НациональнаяВалюта));
	КурсНациональнаяВалюта = СтруктураПоВалюте.Курс;
	КратностьНациональнаяВалюта = СтруктураПоВалюте.Кратность;
	
	ОрганизацияПередИзменением = Объект.Организация;
	
	уатОбщегоНазначенияСервер.НастроитьПолеЕдиницыИзмерения(ЭтотОбъект, "Выработка");
	уатОбщегоНазначенияСервер.НастроитьПолеЕдиницыИзмерения(ЭтотОбъект, "ТабличноеПолеТТН");
	уатОбщегоНазначенияСервер.НастроитьПолеДоговорКонтрагента(Элементы.ДоговорКонтрагента, "Объект.Организация", "Объект.Контрагент", "СПокупателем");
	уатОбщегоНазначенияСервер.НастроитьПолеПодразделение(Элементы.Подразделение, "Объект.Организация");
	
	УстановитьОтборОбъектСтроительства();
	
	ОбновитьПараметрВыработкиВременный();
	ОбновитьВсегоВТЧСервер();
	
	ОбновитьНадписьСпецРабот();
	ОбновитьНадписьВыработкаГрузы();
	
	ЗаполнитьСрокДоставки();
	ЗаполнитьТипВодителя();
	
	// уатУправлениеАвтотранспортом.МодификацияКонфигурации
	уатМодификацияКонфигурацииПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	// Конец уатУправлениеАвтотранспортом.МодификацияКонфигурации
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// уатУправлениеАвтотранспортом.МодификацияКонфигурации
	уатМодификацияКонфигурацииКлиентПереопределяемый.ПриОткрытии(ЭтотОбъект, Отказ);
	// Конец уатУправлениеАвтотранспортом.МодификацияКонфигурации
	
	уатЗащищенныеФункцииКлиент.уатДокументФормаЭлементаПриОткрытии(Отказ, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыФормыВыбора = Неопределено;
	Если мсвМаршрутныеЛистыИЗаказы.Количество() > 0 Тогда
		ПараметрыФормыВыбора = Новый Структура("флВыборЗаказа, мсвМаршрутныеЛистыИЗаказы", флВыборЗаказа, мсвМаршрутныеЛистыИЗаказы);
	Иначе
		ОткрытьДополнительныеТТД();
	КонецЕсли;
	
	Если ПараметрыФормыВыбора <> Неопределено Тогда
		Если ВладелецФормы <> Неопределено Тогда
			ОткрытьФорму("Документ.уатТТД.Форма.ФормаВыборЗаказа", ПараметрыФормыВыбора, ВладелецФормы);
		Иначе
			ОткрытьФорму("Документ.уатТТД.Форма.ФормаВыборЗаказа", ПараметрыФормыВыбора, ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.Независимый);
		КонецЕсли;
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если флЗаполнениеПоСтрокамПутевогоЛиста Тогда
		// Возможно, при заполнении по Путевому листу изменился контрагент
		ПриИзмененииКонтрагентаИлиОрганизации(Неопределено);
		флЗаполнениеПоСтрокамПутевогоЛиста = Ложь;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// Установить видимость реквизитов и заголовков колонок.
	УстановитьВидимость();
	
	СформироватьСписокВыбораПЛ();
	
	ОбновитьИтоги();
	
	Если Объект.Ссылка.Пустая() 
		И Объект.ДоговорКонтрагента <> ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка") Тогда
		
		СтруктураДанные = ПолучитьДанныеДоговорПриИзменении(Объект.Дата, Объект.ВалютаДокумента, Объект.ДоговорКонтрагента);
		
		Объект.ВалютаДокумента = СтруктураДанные.ВалютаРасчетов;
		
		Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда 
			Объект.КурсВзаиморасчетов	   = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Курс = 0, 1,
				СтруктураДанные.ВалютаРасчетовКурсКратность.Курс);
			Объект.КратностьВзаиморасчетов = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность = 0, 1,
				СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность);
		КонецЕсли;
		
		Объект.УчитыватьНДС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
			ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.УчитыватьНДС"));
		Объект.СуммаВключаетНДС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
			ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.СуммаВключаетНДС"));
		
		ВывестиСуммовыеИтогиДокумента();
	КонецЕсли;
	
	Если ОбновитьНадписьВыработкаГрузыПослеОткрытия Тогда
		ОбновитьНадписьВыработкаГрузы();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ОбновитьВсегоВТЧСервер();
	ОбновитьНадписьСпецРабот();
	ОбновитьНадписьВыработкаГрузы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Обновление для ПЛ из ТТД");
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ОбновитьВсегоВТЧСервер();
	ОбновитьПараметрВыработкиВременный();
	ОбновитьНадписьСпецРабот();
	ОбновитьНадписьВыработкаГрузы();
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов	
	УчетОригиналовПервичныхДокументовКлиент.ОбработчикОповещенияФормаДокумента(ИмяСобытия, ЭтотОбъект);
	// Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если флВопросЗакрытиеФормы Тогда
		Отказ = Истина;
		Оповещ = Новый ОписаниеОповещения("ПередЗакрытиемВопрос", ЭтотОбъект);
		ПоказатьВопрос(Оповещ, "При проверке корректности заполнения документа возникли предупреждения!
			|Продолжить закрытие формы?", РежимДиалогаВопрос.ОКОтмена);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура МаршрутныйЛистПриИзменении(Элемент)
	ЗаполнитьТипВодителя();
КонецПроцедуры

// уатУправлениеАвтотранспортом.МодификацияКонфигурации
&НаКлиенте
Процедура Подключаемый_ПолеФормыНажатие(Элемент, СтандартнаяОбработка)
	
	уатМодификацияКонфигурацииКлиентПереопределяемый.ПолеФормыНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДекорацияСостояниеОригиналаНажатие()

	// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	УчетОригиналовПервичныхДокументовКлиент.ОткрытьМенюВыбораСостояния(ЭтотОбъект, Элементы.ДекорацияСостояниеОригинала);
	//Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	Если Объект.Организация = ОрганизацияПередИзменением Тогда
		Возврат;
	КонецЕсли;
	Если Объект.Перевозчик = ОрганизацияПередИзменением Тогда
		Объект.Перевозчик = Объект.Организация;
	КонецЕсли;
	ОрганизацияПередИзменением = Объект.Организация;
	
	УчитыватьНДСПередИзменением = Объект.УчитыватьНДС;
	СуммаВключаетНДСПередИзменением = Объект.СуммаВключаетНДС;
	
	// Обработка события изменения организации.
	ПриИзмененииКонтрагентаИлиОрганизации(Новый ОписаниеОповещения("ОрганизацияПриИзмененииЗавершение", ЭтотОбъект));	
	
	Объект.УчитыватьНДС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.УчитыватьНДС"));
	Объект.СуммаВключаетНДС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.СуммаВключаетНДС"));
		
	Если Объект.УчитыватьНДС <> УчитыватьНДСПередИзменением ИЛИ Объект.СуммаВключаетНДС <> СуммаВключаетНДСПередИзменением Тогда		
		ПересчитатьСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС("Стоимость");
	КонецЕсли;
	
	ОбновитьВсегоВТЧСтоимость();
	ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
	
	ОбновитьИтоги();
	
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	УчитыватьНДСПередИзменением = Объект.УчитыватьНДС;
	СуммаВключаетНДСПередИзменением = Объект.СуммаВключаетНДС;
	
    // Обработка события изменения организации.
	Объект.УчитыватьНДС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.УчитыватьНДС"));
	Объект.СуммаВключаетНДС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.СуммаВключаетНДС"));
		
	Если Объект.УчитыватьНДС <> УчитыватьНДСПередИзменением ИЛИ Объект.СуммаВключаетНДС <> СуммаВключаетНДСПередИзменением Тогда
		ПересчитатьСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС("Стоимость");
	КонецЕсли;
	    
    ОбновитьВсегоВТЧСтоимость();
    ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
    
    ОбновитьИтоги();
    
    УстановитьВидимость();

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	КонтрагентПередИзменением = Контрагент;
	Контрагент = Объект.Контрагент;
	
	Если КонтрагентПередИзменением <> Объект.Контрагент Тогда
		ПриИзмененииКонтрагентаИлиОрганизации(Новый ОписаниеОповещения("КонтрагентПриИзмененииЗавершение1", ЭтотОбъект));
	Иначе
		// Договор был очищен по связи параметров выбора, возвращаем старое значение
		Объект.ДоговорКонтрагента = Договор;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзмененииЗавершение1(Результат, ДополнительныеПараметры) Экспорт
    
    Если Объект.Выработка.Количество() > 0 Тогда
        ТекстНСТР = НСтр("en='Clear the tabular section of the output?';ru='Очистить табличную часть выработки?'");
        ПоказатьВопрос(Новый ОписаниеОповещения("КонтрагентПриИзмененииЗавершение", ЭтотОбъект),
			ТекстНСТР, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Да Тогда
        ЗаполнитьВыработкуНачальнымиЗначениями();
    КонецЕсли;
    
    КонтрагентПриИзмененииФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзмененииФрагмент()
    
    УстановитьОтборОбъектСтроительства();

КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	Оповещ = Новый ОписаниеОповещения("ДоговорКонтрагентаПриИзмененииЗавершение", ЭтотОбъект);
	уатОбщегоНазначенияКлиент.ДоговорКонтрагентаПриИзменении(ЭтаФорма, Оповещ);
КонецПроцедуры  

&НаКлиенте
Процедура ДоговорКонтрагентаСоздание(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВидДоговораДоступныеЗначения = Новый Массив;
	
	мВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем");
	ВидДоговораДоступныеЗначения.Добавить(мВидДоговора);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Владелец", Объект.Контрагент);
	ПараметрыФормы.Вставить("ВидДоговораДоступныеЗначения", ВидДоговораДоступныеЗначения);
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзмененииЗавершение(Результат, ДопПараметры) Экспорт
	уатОбщегоНазначенияКлиент.ПриИзмененииДоговора(ЭтаФорма, Неопределено, Договор);
КонецПроцедуры

// Вызывается из процедуры уатОбщегоНазначенияКлиент.ПриИзмененииДоговора()
//
&НаКлиенте
Процедура ПриИзмененииДоговораЛокальныеОбработчики() Экспорт
	ОбновитьВсегоВТЧСтоимость();
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ОтпускРазрешилНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ДиалогВыбораСотрудника(Элемент, Объект.ОтпускРазрешил, Новый Структура("Организация", Объект.Организация), СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ОтпускРазрешилОткрытие(Элемент, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ОткрытьФормуСотрудника(Объект.ОтпускРазрешил, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ОтпускРазрешилАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура ОтпускРазрешилОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура ОтпускПроизвелНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ДиалогВыбораСотрудника(Элемент, Объект.ОтпускПроизвел, Новый Структура("Организация", Объект.Организация), СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ОтпускПроизвелОткрытие(Элемент, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ОткрытьФормуСотрудника(Объект.ОтпускПроизвел, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ОтпускПроизвелАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура ОтпускПроизвелОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормы_Выработка

&НаКлиенте
Процедура ВыработкаПриИзменении(Элемент)
	ОбновитьНадписьСпецРабот();
	ОбновитьПараметрВыработкиВременный();
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	//Если ТолькоПросмотр Тогда
	//	Возврат;
	//КонецЕсли;
	
	ТекущиеДанные = Элементы.Выработка.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле = Элементы.ВыработкаНадписьСпецРаботы Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыОткрытия = Новый Структура();
		ПараметрыОткрытия.Вставить("ТолькоПросмотр", ТолькоПросмотр);
		ПараметрыОткрытия.Вставить("СпецРабота1", ТекущиеДанные.СпецРабота1);
		ПараметрыОткрытия.Вставить("СпецРабота2", ТекущиеДанные.СпецРабота2);
		ПараметрыОткрытия.Вставить("СпецРабота3", ТекущиеДанные.СпецРабота3);
		ПараметрыОткрытия.Вставить("СпецРабота4", ТекущиеДанные.СпецРабота4);
		ПараметрыОткрытия.Вставить("СпецРабота5", ТекущиеДанные.СпецРабота5);
		ПараметрыОткрытия.Вставить("КоличествоСпецРаботы1", ТекущиеДанные.КоличествоСпецРаботы1);
		ПараметрыОткрытия.Вставить("КоличествоСпецРаботы2", ТекущиеДанные.КоличествоСпецРаботы2);
		ПараметрыОткрытия.Вставить("КоличествоСпецРаботы3", ТекущиеДанные.КоличествоСпецРаботы3);
		ПараметрыОткрытия.Вставить("КоличествоСпецРаботы4", ТекущиеДанные.КоличествоСпецРаботы4);
		ПараметрыОткрытия.Вставить("КоличествоСпецРаботы5", ТекущиеДанные.КоличествоСпецРаботы5);
		
		Если ТолькоПросмотр Тогда
			Оповещение = Неопределено;
		Иначе
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияФормыРедактированияСпецРабот", ЭтотОбъект, ТекущиеДанные);
		КонецЕсли;
		
		ОткрытьФорму("Документ.уатПутевойЛист.Форма.ФормаРедактированияСпецРабот", ПараметрыОткрытия, ЭтотОбъект,,,, Оповещение);
		Возврат;
	ИначеЕсли Поле = Элементы.ВыработкаНадписьГрузы Тогда
		СтандартнаяОбработка = Ложь;
		Если Не ТолькоПросмотр Тогда
			ТекстНСТР = НСтр("ru='Для изменения грузов используйте таблицы из закладок ТН или ТТН.'; en='Edit through Consignment Note or Delivery Note tabs.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И (НЕ Копирование) Тогда
		Элементы.Выработка.ТекущиеДанные.КоличествоЕздок = 1;
	КонецЕсли;
	
	УстановитьФорматРедактированияКоличествоВыработки();
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	СформироватьСписокВыбораПЛ();
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ДиалогВыбораГруза(Элемент, Элементы.Выработка.ТекущиеДанные.Номенклатура, Элемент, 
		СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Выработка.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(
		СтрокаТабличнойЧасти.Номенклатура, "ЕдиницаХраненияОстатков");
	
	Если ПустаяСтрока(СтрокаТабличнойЧасти.ВидУпаковки) Тогда
		СтрокаТабличнойЧасти.ВидУпаковки = СтрокаТабличнойЧасти.ЕдиницаИзмерения;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаПодачаПриИзменении(Элемент)
	уатЗащищенныеФункцииСервер.КонтрольВводаВремени(Элементы.Выработка.ТекущиеДанные.Подача);
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаКоличествоЧасовПриИзменении(Элемент)
	уатЗащищенныеФункцииСервер.КонтрольВводаВремени(Элементы.Выработка.ТекущиеДанные.КоличествоЧасов);
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаПростойПодПогрузкойПриИзменении(Элемент)
	уатЗащищенныеФункцииСервер.КонтрольВводаВремени(Элементы.Выработка.ТекущиеДанные.ПростойПодПогрузкой);
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаПростойПодРазгрузкойПриИзменении(Элемент)
	уатЗащищенныеФункцииСервер.КонтрольВводаВремени(Элементы.Выработка.ТекущиеДанные.ПростойПодРазгрузкой);
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаКоличествоТоннПриИзменении(Элемент)
	ТекСтрока = Элементы.Выработка.ТекущиеДанные;
	ТекСтрока.Количество = ТекСтрока.КоличествоТонн * ТекСтрока.КоличествоЕздок;
	ТекСтрока.Сумма = ТекСтрока.Количество * ТекСтрока.Цена;
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаКоличествоЕздокПриИзменении(Элемент)
	ТекСтрока = Элементы.Выработка.ТекущиеДанные;
	ТекСтрока.Количество = ТекСтрока.КоличествоТонн * ТекСтрока.КоличествоЕздок;
	ТекСтрока.Сумма = ТекСтрока.Количество * ТекСтрока.Цена;
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаЕдиницаИзмеренияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатОбщегоНазначенияКлиент.ТЧТоварыЕдиницаИзмеренияНачалоВыбора(
		Элементы.Выработка.ТекущиеДанные.Номенклатура, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаМаршрутПриИзменении(Элемент)
	
	ТекСтрокаВыработка = Элементы.Выработка.ТекущиеДанные;
	Если ТекСтрокаВыработка = Неопределено Тогда
		Возврат;
	КонецЕсли;

	мМаршрут = ТекСтрокаВыработка.Маршрут;
	
	ТекСтрокаВыработка.КоличествоКмГруз = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(мМаршрут, "Расстояние");
	ТекСтрокаВыработка.КоличествоЧасов = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(мМаршрут, "ВремяВПути");
	
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаПараметрВыработкиПриИзменении(Элемент)
	ОбновитьПараметрВыработкиВременный();
	УстановитьФорматРедактированияКоличествоВыработки();
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаКоличествоВыработкаПриИзменении(Элемент)
	ТекСтрокаТабличнойЧасти = Элементы.Выработка.ТекущиеДанные;
	Если уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(
		ТекСтрокаТабличнойЧасти.ПараметрВыработки, "Временный") = ИСТИНА Тогда 
		
		уатЗащищенныеФункцииСервер.КонтрольВводаВремени(ТекСтрокаТабличнойЧасти.КоличествоВыработка);
		ТекСтрокаТабличнойЧасти.Выработка = уатОбщегоНазначения.уатВремяВСекунды(ТекСтрокаТабличнойЧасти.КоличествоВыработка)/3600;
	Иначе
		ТекСтрокаТабличнойЧасти.Выработка = ТекСтрокаТабличнойЧасти.КоличествоВыработка;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаПрицеп1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтруктураОтбор = Новый Структура("Организация", Объект.Организация);
	уатИнтерфейсВводаТС.РеквизитТСНачалоВыбора(Элемент, Элементы.Выработка.ТекущиеДанные.Прицеп1,
		ДанныеВыбора, СтандартнаяОбработка, СтруктураОтбор);
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаПрицеп1АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СтруктураОтбор = Новый Структура("Организация", Объект.Организация);
	уатИнтерфейсВводаТС.РеквизитТСАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
		Ожидание, СтандартнаяОбработка, СтруктураОтбор);
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаПрицеп1ОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтруктураОтбор = Новый Структура("Организация", Объект.Организация);
	уатИнтерфейсВводаТС.РеквизитТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
		СтандартнаяОбработка, СтруктураОтбор);
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаПрицеп2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтруктураОтбор = Новый Структура("Организация", Объект.Организация);
	уатИнтерфейсВводаТС.РеквизитТСНачалоВыбора(Элемент, Элементы.Выработка.ТекущиеДанные.Прицеп2,
		ДанныеВыбора, СтандартнаяОбработка, СтруктураОтбор);
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаПрицеп2АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СтруктураОтбор = Новый Структура("Организация", Объект.Организация);
	уатИнтерфейсВводаТС.РеквизитТСАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
		Ожидание, СтандартнаяОбработка, СтруктураОтбор);
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаПрицеп2ОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтруктураОтбор = Новый Структура("Организация", Объект.Организация);
	уатИнтерфейсВводаТС.РеквизитТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
		СтандартнаяОбработка, СтруктураОтбор);
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормы_Стоимость

&НаКлиенте
Процедура СтоимостьПриИзменении(Элемент)
	ОбновитьИтоги();
	ОбновитьПараметрВыработкиВременный();
КонецПроцедуры

&НаКлиенте
Процедура СтоимостьПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Если НЕ Копирование И Объект.УчитыватьНДС Тогда 
			Элементы.Стоимость.ТекущиеДанные.СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
				ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнаяСтавкаНДС");	
		КонецЕсли;
	КонецЕсли;
	
	УстановитьФорматРедактированияКоличествоВыработки();
КонецПроцедуры

&НаКлиенте
Процедура СтоимостьПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОбновитьВсегоВТЧСтоимость();
	ОбновитьИтоги();
КонецПроцедуры

&НаКлиенте
Процедура СтоимостьПослеУдаления(Элемент)
	ОбновитьВсегоВТЧСтоимость();
КонецПроцедуры

&НаКлиенте
Процедура СтоимостьВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекДанные = Элементы.Стоимость.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле = Элементы.СтоимостьТариф Тогда
		ПоказатьЗначение(Неопределено, ТекДанные.Тариф);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтоимостьНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ДиалогВыбораГруза(Элемент, Элементы.Стоимость.ТекущиеДанные.Номенклатура, Элемент, 
		СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура СтоимостьНоменклатураУслугиПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Стоимость.ТекущиеДанные;
	
	// Заполняем реквизиты табличной части.
	Если Объект.УчитыватьНДС Тогда
		СтавкаНДС = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(
			СтрокаТабличнойЧасти.НоменклатураУслуги, "СтавкаНДС");
		Если ЗначениеЗаполнено(СтавкаНДС) Тогда
			СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДС;
		КонецЕсли;
	Иначе
		СтрокаТабличнойЧасти.СтавкаНДС = Неопределено;
	КонецЕсли;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
	
	СтрокаТабличнойЧасти.Содержание = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(
		СтрокаТабличнойЧасти.НоменклатураУслуги, "НаименованиеПолное");
	СтрокаТабличнойЧасти.СтатьяДоходов = уатОбщегоНазначенияСервер.СтатьяДоходовНоменклатуры(
		СтрокаТабличнойЧасти.НоменклатураУслуги);
КонецПроцедуры

&НаКлиенте
Процедура СтоимостьПараметрВыработкиПриИзменении(Элемент)
	ТекСтрокаТабличнойЧасти = Элементы.Стоимость.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекСтрокаТабличнойЧасти.Тариф) Тогда
		ПараметрВыработкиТарифа = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрокаТабличнойЧасти.Тариф, "ПараметрВыработки");
		Если ПараметрВыработкиТарифа <> ТекСтрокаТабличнойЧасти.ПараметрВыработки Тогда
			ТекСтрокаТабличнойЧасти.Тариф = ПредопределенноеЗначение("Справочник.уатТарифыТС.ПустаяСсылка");
		КонецЕсли;
	КонецЕсли;
	
	мКоличество = 0;
	ПараметрыОтбора = Новый Структура("ПутЛист", ТекСтрокаТабличнойЧасти.ПутЛист);
	НайденныеСтроки = Объект.Выработка.НайтиСтроки(ПараметрыОтбора);
	
	Для Каждого ТекСтрока Из НайденныеСтроки Цикл
		Если ТекСтрокаТабличнойЧасти.ПараметрВыработки =
			ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.ВесГруза") Тогда
			мКоличество = мКоличество + ТекСтрока.КоличествоТонн;
		ИначеЕсли ТекСтрокаТабличнойЧасти.ПараметрВыработки =
			ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.Объем") Тогда
			мКоличество = мКоличество + ТекСтрока.Объем;	
		ИначеЕсли ТекСтрокаТабличнойЧасти.ПараметрВыработки =
			ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.Подача") Тогда
			мКоличество = мКоличество + уатОбщегоНазначения.уатВремяВСекунды(ТекСтрока.Подача);
		ИначеЕсли ТекСтрокаТабличнойЧасти.ПараметрВыработки =
			ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.ВремяВРаботе") Тогда
			мКоличество = мКоличество + уатОбщегоНазначения.уатВремяВСекунды(ТекСтрока.КоличествоЧасов);
		ИначеЕсли ТекСтрокаТабличнойЧасти.ПараметрВыработки =
			ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.КоличествоЕздок") Тогда
			мКоличество = мКоличество + ТекСтрока.КоличествоЕздок;
		ИначеЕсли ТекСтрокаТабличнойЧасти.ПараметрВыработки =
			ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.КоличествоОпераций") Тогда
			мКоличество = мКоличество + ТекСтрока.КоличествоОпераций;
		ИначеЕсли ТекСтрокаТабличнойЧасти.ПараметрВыработки =
			ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.ПробегСГрузом") Тогда
			мКоличество = мКоличество + ТекСтрока.КоличествоКмГруз;
		ИначеЕсли ТекСтрокаТабличнойЧасти.ПараметрВыработки =
			ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.ПробегПорожний") Тогда
			мКоличество = мКоличество + ТекСтрока.КоличествоКмПорожний;
		ИначеЕсли ТекСтрокаТабличнойЧасти.ПараметрВыработки =
			ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.ПогрузочноРазгрузочныеРаботы") Тогда
			мКоличество = мКоличество + ТекСтрока.ПогрузочноРазгрузочныеРаботы;
		ИначеЕсли ТекСтрокаТабличнойЧасти.ПараметрВыработки =
			ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.ПростойПодПогрузкой") Тогда
			мКоличество = мКоличество + уатОбщегоНазначения.уатВремяВСекунды(ТекСтрока.ПростойПодПогрузкой);
		ИначеЕсли ТекСтрокаТабличнойЧасти.ПараметрВыработки =
			ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.ПростойПодРазгрузкой") Тогда
			мКоличество = мКоличество + уатОбщегоНазначения.уатВремяВСекунды(ТекСтрока.ПростойПодРазгрузкой);
		ИначеЕсли ТекСтрокаТабличнойЧасти.ПараметрВыработки = ТекСтрока.ПараметрВыработки Тогда
			Если уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрокаТабличнойЧасти.ПараметрВыработки, "Временный") Тогда
				мКоличество = мКоличество + уатОбщегоНазначения.уатВремяВСекунды(ТекСтрока.Выработка);
			Иначе
				мКоличество = мКоличество + ТекСтрока.Выработка;
			КонецЕсли;
		КонецЕсли;	
	КонецЦикла;	
	
	Если уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрокаТабличнойЧасти.ПараметрВыработки, "Временный") Тогда
		ТекСтрокаТабличнойЧасти.Количество = мКоличество/3600;
	Иначе
		ТекСтрокаТабличнойЧасти.Количество = мКоличество;
	КонецЕсли;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрокаТабличнойЧасти);
	
	ОбновитьПараметрВыработкиВременный();
	УстановитьФорматРедактированияКоличествоВыработки();
КонецПроцедуры

&НаКлиенте
Процедура СтоимостьКоличествоПараметрВыработкиПриИзменении(Элемент)
	ТекСтрокаТабличнойЧасти = Элементы.Стоимость.ТекущиеДанные;
	Если уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(
		ТекСтрокаТабличнойЧасти.ПараметрВыработки, "Временный") = ИСТИНА Тогда 
		
		уатЗащищенныеФункцииСервер.КонтрольВводаВремени(ТекСтрокаТабличнойЧасти.КоличествоВыработка);
		ТекСтрокаТабличнойЧасти.Количество = уатОбщегоНазначения.уатВремяВСекунды(ТекСтрокаТабличнойЧасти.КоличествоВыработка)/3600;
	Иначе
		ТекСтрокаТабличнойЧасти.Количество = ТекСтрокаТабличнойЧасти.КоличествоВыработка;
	КонецЕсли;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(Элементы.Стоимость.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура СтоимостьЦенаПриИзменении(Элемент)
	РассчитатьСуммуВСтрокеТабличнойЧасти(Элементы.Стоимость.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура СтоимостьСуммаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Стоимость.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.Количество = 0 Тогда
		СтрокаТабличнойЧасти.Количество = 1;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;
		
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура СтоимостьСтавкаНДСПриИзменении(Элемент)
	РассчитатьСуммуНДС(Элементы.Стоимость.ТекущиеДанные);
	РассчитатьСуммуВсегоВстрокеТЧ(Элементы.Стоимость.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура СтоимостьСуммаНДСПриИзменении(Элемент)
	РассчитатьСуммуВсегоВстрокеТЧ(Элементы.Стоимость.ТекущиеДанные);
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормы_ТТН

&НаКлиенте
Процедура Выработка1НоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ДиалогВыбораГруза(Элемент, Элементы.ТабличноеПолеТТН.ТекущиеДанные.Номенклатура, Элемент, 
		СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Выработка1НоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ТабличноеПолеТТН.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(
		СтрокаТабличнойЧасти.Номенклатура, "ЕдиницаХраненияОстатков");
	
	Если ПустаяСтрока(СтрокаТабличнойЧасти.ВидУпаковки) Тогда
		СтрокаТабличнойЧасти.ВидУпаковки = СтрокаТабличнойЧасти.ЕдиницаИзмерения;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Выработка1КоличествоТоннПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ТабличноеПолеТТН.ТекущиеДанные;
	
	// Рассчитать реквизиты табличной части.
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.КоличествоТонн;
КонецПроцедуры

&НаКлиенте
Процедура Выработка1ЕдиницаИзмеренияПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ТабличноеПолеТТН.ТекущиеДанные;
	
	Если ПустаяСтрока(СтрокаТабличнойЧасти.ВидУпаковки) Тогда
		СтрокаТабличнойЧасти.ВидУпаковки = СтрокаТабличнойЧасти.ЕдиницаИзмерения;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Выработка1ЕдиницаИзмеренияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатОбщегоНазначенияКлиент.ТЧТоварыЕдиницаИзмеренияНачалоВыбора(
		Элементы.ТабличноеПолеТТН.ТекущиеДанные.Номенклатура, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Выработка1ЦенаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ТабличноеПолеТТН.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.КоличествоТонн;
КонецПроцедуры

&НаКлиенте
Процедура Выработка1СуммаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ТабличноеПолеТТН.ТекущиеДанные;
	
	// Выполнить общие действия для всех документов при изменении Суммы.
	Если СтрокаТабличнойЧасти.КоличествоТонн = 0 Тогда
		СтрокаТабличнойЧасти.Цена = 0;
	Иначе
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.КоличествоТонн;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГрузыПриИзменении(Элемент)
	ОбновитьНадписьВыработкаГрузы();
КонецПроцедуры

&НаКлиенте
Процедура ГрузыКоличествоПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Грузы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные.Сумма = ТекущиеДанные.Цена * ТекущиеДанные.Количество;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГрузыЦенаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.Грузы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные.Сумма = ТекущиеДанные.Цена * ТекущиеДанные.Количество;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормы_ТН

&НаКлиенте
Процедура ТННоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ДиалогВыбораГруза(Элемент, Элементы.ТабличноеПолеТН.ТекущиеДанные.Номенклатура, Элемент, 
		СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ТННоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.ТабличноеПолеТН.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(
		СтрокаТабличнойЧасти.Номенклатура, "ЕдиницаХраненияОстатков");
	
	Если ПустаяСтрока(СтрокаТабличнойЧасти.ВидУпаковки) Тогда
		СтрокаТабличнойЧасти.ВидУпаковки = СтрокаТабличнойЧасти.ЕдиницаИзмерения;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТНКоличествоТоннПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ТабличноеПолеТН.ТекущиеДанные;
	
	// Рассчитать реквизиты табличной части.
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.КоличествоТонн;
КонецПроцедуры

&НаКлиенте
Процедура ТНЕдиницаИзмеренияПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ТабличноеПолеТН.ТекущиеДанные;
	
	Если ПустаяСтрока(СтрокаТабличнойЧасти.ВидУпаковки) Тогда
		СтрокаТабличнойЧасти.ВидУпаковки = СтрокаТабличнойЧасти.ЕдиницаИзмерения;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТНЕдиницаИзмеренияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатОбщегоНазначенияКлиент.ТЧТоварыЕдиницаИзмеренияНачалоВыбора(
		Элементы.ТабличноеПолеТН.ТекущиеДанные.Номенклатура, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ТНЦенаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ТабличноеПолеТН.ТекущиеДанные;

	// Рассчитать реквизиты табличной части.
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.КоличествоТонн;
КонецПроцедуры

&НаКлиенте
Процедура ТНСуммаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ТабличноеПолеТН.ТекущиеДанные;
	
	// Выполнить общие действия для всех документов при изменении Суммы.
	Если СтрокаТабличнойЧасти.КоличествоТонн = 0 Тогда
		СтрокаТабличнойЧасти.Цена = 0;
	Иначе
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.КоличествоТонн;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УполномоченноеЛицоГрузоотправителяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатОбщегоНазначенияТиповыеКлиент.уатНачалоВыбораКонтактногоЛицаКонтрагента(Элемент, СтандартнаяОбработка,
		Объект.Грузоотправитель);
КонецПроцедуры

&НаКлиенте
Процедура УполномоченноеЛицоГрузополучателяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатОбщегоНазначенияТиповыеКлиент.уатНачалоВыбораКонтактногоЛицаКонтрагента(Элемент, СтандартнаяОбработка,
		Объект.Грузополучатель);
КонецПроцедуры

&НаКлиенте
Процедура Грузы1ПриИзменении(Элемент)
	ОбновитьНадписьВыработкаГрузы();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_Грузы

&НаКлиенте
Процедура ГрузыГрузОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекДанныеСтроки = Элементы.Грузы.ТекущиеДанные;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Номенклатура") Тогда
		ДанныеЗаполнения = ОбработкаВыбораГрузаНаСервере(ВыбранноеЗначение);
		ТекДанныеСтроки.ЕдиницаИзмерения = ДанныеЗаполнения;
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.уатГрузовыеМеста_уэ") Тогда
		ДанныеЗаполнения = ОбработкаВыбораГрузаНаСервере(ВыбранноеЗначение);
		Если ДанныеЗаполнения.ЭтоКонтейнер Тогда
			ТекДанныеСтроки.ЕдиницаИзмерения = ДанныеЗаполнения.ТипКонтейнера;
			ТекДанныеСтроки.ВидУпаковки = НСтр("ru='Контейнер';en='Container'");
		Иначе
			ТекДанныеСтроки.ВидУпаковки = ДанныеЗаполнения.ВидУпаковки;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Грузы1ГрузОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекДанныеСтроки = Элементы.Грузы1.ТекущиеДанные;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Номенклатура") Тогда
		ДанныеЗаполнения = ОбработкаВыбораГрузаНаСервере(ВыбранноеЗначение);
		ТекДанныеСтроки.ЕдиницаИзмерения = ДанныеЗаполнения;
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.уатГрузовыеМеста_уэ") Тогда
		ДанныеЗаполнения = ОбработкаВыбораГрузаНаСервере(ВыбранноеЗначение);
		Если ДанныеЗаполнения.ЭтоКонтейнер Тогда
			ТекДанныеСтроки.ЕдиницаИзмерения = ДанныеЗаполнения.ТипКонтейнера;
			ТекДанныеСтроки.ВидУпаковки = НСтр("ru='Контейнер';en='Container'");
		Иначе
			ТекДанныеСтроки.ВидУпаковки = ДанныеЗаполнения.ВидУпаковки;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// уатУправлениеАвтотранспортом.МодификацияКонфигурации
&НаКлиенте
Процедура Подключаемый_уатВыполнитьКоманду(Команда)
	
	уатМодификацияКонфигурацииКлиентПереопределяемый.ВыполнитьПодключаемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры
// Конец уатУправлениеАвтотранспортом.МодификацияКонфигурации

&НаКлиенте
Процедура РедактироватьЦеныИВалюту(Команда)
	
	ОбработатьИзмененияПоКнопкеЦеныИВалюты(Новый ОписаниеОповещения("РедактироватьЦеныИВалютуЗавершение", ЭтотОбъект), Объект.ВалютаДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСтоимость(Команда)
	Если Объект.Стоимость.Количество() = 0 Тогда
		ТекстНСТР = НСтр("en='Calculate cost of services?';ru='Рассчитать стоимость услуг?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("РассчитатьСтоимостьЗавершение1", ЭтотОбъект),
			ТекстНСТР, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
        Возврат;
	Иначе
		ТекстНСТР = НСтр("en='Calculate the cost of services. Clear the table before filling?';ru='Рассчитать стоимость услуг. Очистить таблицу перед заполнением?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("РассчитатьСтоимостьЗавершение", ЭтотОбъект),
			ТекстНСТР, РежимДиалогаВопрос.ДаНетОтмена, , КодВозвратаДиалога.Да);
        Возврат;
	КонецЕсли;	
	
	РассчитатьСтоимостьФрагмент1();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоВыбранномуПЛ(Команда)
	
	ПараметрыФормы = Новый Структура("Контрагент", Объект.Контрагент);
	ОткрытьФорму("Документ.уатПутевойЛист.Форма.ФормаВыбора", ПараметрыФормы,,,,, Новый ОписаниеОповещения("ЗаполнитьПоВыбранномуПЛЗавершениеФорма", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоВыбранномуПЛЗавершениеФорма(Результат, ДополнительныеПараметры) Экспорт
	
	ПутЛист = Результат;
	Если Не ЗначениеЗаполнено(ПутЛист) Тогда
		Возврат;
	Иначе
		Если Объект.Выработка.Количество() > 0 Тогда
			ТекстНСТР = НСтр("en='Do you want to clear the table before filling?';ru='Очистить таблицу перед заполнением?'");
			ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоВыбранномуПЛЗавершение", ЭтотОбъект, Новый Структура("ПутЛист", ПутЛист)),
				ТекстНСТР, РежимДиалогаВопрос.ДаНетОтмена,,КодВозвратаДиалога.Нет);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьПоВыбранномуПЛФрагмент(ПутЛист);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоВыбранномуПЛЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ПутЛист = ДополнительныеПараметры.ПутЛист;
	
	Если РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.Выработка.Очистить();
	КонецЕсли;
	
	ЗаполнитьПоВыбранномуПЛФрагмент(ПутЛист);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоВыбранномуПЛФрагмент(Знач ПутЛист)
	
	ЗаполнитьВыработкуПоПЛ(ПутЛист);
	ПриИзмененииКонтрагентаИлиОрганизации(Неопределено);
	ОбновитьНадписьСпецРабот();
	ЗаполнитьПоВыбранномуПЛФрагментНаСервере(ПутЛист);
	ЗаполнитьЛицаПоВыбранномуПЛ(ПутЛист);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоВыбранномуПЛФрагментНаСервере(Знач ПутЛист)
	
	Объект.ТипВладенияТС = ПутЛист.ТранспортноеСредство.ТипВладенияТС;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЛицаПоВыбранномуПЛ(Знач ПутЛист)
	
	Если ПутЛист.Задание.Количество() <> 0 Тогда
		МассивГрузоотправителей = Новый Массив();
		МассивГрузополучателей  = Новый Массив();
		Для Каждого ТекСтрокаЗадание Из ПутЛист.Задание Цикл 
			ЗаказНаТС = ТекСтрокаЗадание.ЗаказНаТС;
			ТекГрузоотправитель = Новый Структура("Ссылка, УполномоченноеЛицо", 
				ЗаказНаТС.Грузоотправитель, ЗаказНаТС.КонтактноеЛицоГрузоотправителя);
			МассивГрузоотправителей.Добавить(ТекГрузоотправитель);
			ТекГрузополучатель  = Новый Структура("Ссылка, УполномоченноеЛицо", 
				ЗаказНаТС.Грузополучатель,  ЗаказНаТС.КонтактноеЛицоГрузополучателя);
			МассивГрузополучателей.Добавить(ТекГрузополучатель);
		КонецЦикла;
		
		ОбъектТТД = РеквизитФормыВЗначение("Объект");
		ОбъектТТД.ЗаполнитьУполномоченныеЛица(МассивГрузоотправителей, МассивГрузополучателей);
		ЗначениеВРеквизитФормы(ОбъектТТД,"Объект");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПЛ(Команда)
	ТекСтрока = Элементы.Выработка.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(ТекСтрока.ПутЛист) Тогда
		Возврат;
	КонецЕсли;

	ТекстНСТР = НСтр("en='Fill row by WB?';ru='Обновить выработку в строке по ПЛ?'");
	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоПЛЗавершение", ЭтотОбъект), ТекстНСТР,
		РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПЛЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
		Если Элементы.Выработка.ТекущиеДанные <> Неопределено Тогда
			ОбновитьВыработкуПоВыбранномуПЛ(Элементы.Выработка.ТекущиеДанные.НомерСтроки);
			ПриИзмененииКонтрагентаИлиОрганизации(Неопределено);
			ОбновитьНадписьСпецРабот();
			ЗаполнитьПоВыбранномуПЛФрагментНаСервере(Элементы.Выработка.ТекущиеДанные.ПутЛист);
		Иначе
			ТекстНСТР = НСтр("en='You need to select line in tabular section ""Output""!';
				|ru='Для заполнения необходимо выбрать строку в табличной части ""Выработка""!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР,,"Объект.Выработка");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьПоПЛ(Команда)
	ТекСтрока = Элементы.Выработка.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	ИначеЕсли НЕ ЗначениеЗаполнено(ТекСтрока.ПутЛист) Тогда
		Возврат;
	КонецЕсли;
	
	ТекстНСТР = НСтр("en='Fill by WB? All rows containing WB ""%1"" shall be lost';
		|ru='Все строки, содержащие документ ""%1"", будут очищены. Продолжить?'");
	ТекстНСТР = СтрШаблон(ТекстНСТР, Строка(ТекСтрока.ПутЛист));
	ПоказатьВопрос(Новый ОписаниеОповещения("ПерезаполнитьПоПЛЗавершение", ЭтотОбъект), ТекстНСТР,
		РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьПоПЛЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Если Элементы.Выработка.ТекущиеДанные <> Неопределено Тогда
			
			ПутевойЛист = Элементы.Выработка.ТекущиеДанные.ПутЛист;
			
			// Удаляем все существующие строки, в которых указан данный Путевой лист
			Сч = Объект.Выработка.Количество();
			Пока Сч > 0 Цикл
				Сч = Сч-1;
				ТекСтрока = Объект.Выработка[Сч];
				Если ТекСтрока.ПутЛист = ПутевойЛист Тогда
					Объект.Выработка.Удалить(ТекСтрока);
				КонецЕсли;
			КонецЦикла;
			
			ЗаполнитьВыработкуПоПЛ(ПутевойЛист);
			ПриИзмененииКонтрагентаИлиОрганизации(Неопределено);
			ОбновитьНадписьСпецРабот();
			ЗаполнитьПоВыбранномуПЛФрагментНаСервере(ПутевойЛист);
		Иначе
			ТекстНСТР = НСтр("en='You need to select line in tabular section output!';ru='Для заполнения необходимо выбрать строку в табличной части выработка!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР,,"Объект.Выработка");
		КонецЕсли;
	КонецЕсли; 
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоМЛИЗаказуНаТС(Команда)
	ТекстНСТР = НСтр("en='Are you sure?';ru='Заполнить по Маршрутному Листу и Заказу на ТС? Таблицы документа будут очищены.'");
	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоМЛИЗаказуНаТСЗавершение", ЭтотОбъект), ТекстНСТР,
		РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоМЛИЗаказуНаТСЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Объект.Выработка.Очистить();
	Объект.Грузы.Очистить();
	Объект.Стоимость.Очистить();
	ЗаполнитьПоМЛИЗаказуНаТСФрагмент();
	ОткрытьДополнительныеТТД();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоМЛИЗаказуНаТСФрагмент()
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	флОшибка = Ложь;
	Если ЗначениеЗаполнено(Объект.АдресДоставки) И ЗначениеЗаполнено(Объект.АдресОтправления) Тогда
		ДопПараметры = Новый Структура("ПерезаполнитьСуществующийТТД", Истина);
		мсвДополнительныеТТД = ДокОбъект.ОбработкаЗаполненияЗаказМЛ(Объект.ЗаказГрузоотправителя, Объект.МаршрутныйЛист, флОшибка, ДопПараметры);
	Иначе
		мсвДополнительныеТТД = ДокОбъект.ОбработкаЗаполненияЗаказМЛ(Объект.ЗаказГрузоотправителя, Объект.МаршрутныйЛист, флОшибка);
	КонецЕсли;
	Если ЗначениеЗаполнено(мсвДополнительныеТТД) Тогда
		АдресХранилищаДопТТД = ПоместитьВоВременноеХранилище(мсвДополнительныеТТД, ЭтаФорма.УникальныйИдентификатор);
		мсвДополнительныеТТДКоличество = мсвДополнительныеТТД.Количество();;
	Иначе
		АдресХранилищаДопТТД = "";
		мсвДополнительныеТТДКоличество = 0;
	КонецЕсли;
	ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
	ОбновитьНадписьВыработкаГрузы();
	ОбновитьВсегоВТЧСервер();
	ОбновитьНадписьСпецРабот();
КонецПроцедуры

&НаКлиенте
Процедура ОперацияПоМаршрутномуЛисту(Команда)
	
	Если Элементы.ФормаОперацияПоМаршрутномуЛисту.Пометка Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура("ВидОперации","ПоМаршрутномуЛисту");
	
	Если Объект.Выработка.Количество() Или Объект.Стоимость.Количество() Или Объект.Грузы.Количество() Тогда 
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОперация", ЭтотОбъект, ПараметрыОповещения);
		ТекстНСТР = НСтр("en='Tabular sections ""Output"" and ""Cost"" will be cleared. Continue the operation?';ru='Табличные части ""Выработка"" и ""Стоимость"", а также список товаров, будут очищены. Продолжить выполнение операции?'");
		ПоказатьВопрос(Оповещение, ТекстНСТР, Режим, 0);
	Иначе 
		ПослеЗакрытияВопросаОперация(КодВозвратаДиалога.Да, ПараметрыОповещения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацияПоПутевомуЛисту(Команда)
	
	Если Элементы.ФормаОперацияПоПутевомуЛисту.Пометка Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура("ВидОперации","ПоПутевомуЛисту");
	
	Если Объект.Выработка.Количество() Или Объект.Стоимость.Количество() Или Объект.Грузы.Количество() Тогда 
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОперация", ЭтотОбъект, ПараметрыОповещения);
		ТекстНСТР = НСтр("en='Tabular sections ""Output"" and ""Cost"" will be cleared. Continue the operation?';ru='Табличные части ""Выработка"" и ""Стоимость"", а также список товаров, будут очищены. Продолжить выполнение операции?'");
		ПоказатьВопрос(Оповещение, ТекстНСТР, Режим, 0);
	Иначе 
		ПослеЗакрытияВопросаОперация(КодВозвратаДиалога.Да, ПараметрыОповещения);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// Получает набор данных с сервера для процедуры ДоговорПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеДоговорПриИзменении(Дата, ВалютаДокумента, Договор)
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
	"ВалютаРасчетов",
	Договор.ВалютаВзаиморасчетов);
	
	СтруктураДанные.Вставить(
	"ВалютаРасчетовКурсКратность",
	РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", Договор.ВалютаВзаиморасчетов)));
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДоговорПриИзменении()

&НаКлиенте
Процедура ПриИзмененииКонтрагентаИлиОрганизации(Знач Оповещение)
	
	ДанныеОбменаССервером = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, УчитыватьНДС, Дата");
	ЗаполнитьЗначенияСвойств(ДанныеОбменаССервером, Объект);
	// Получим данные с сервера
	ДанныеОбменаССервером.ДоговорКонтрагента = Объект.ДоговорКонтрагента;
	ЗначенияДляЗаполнения = ИзменениеКонтрагентаСервер(ДанныеОбменаССервером);
	Объект.ДоговорКонтрагента = ЗначенияДляЗаполнения.ДоговорКонтрагента;
	
	ДоговорПередИзменением = Договор;
	//Договор = Объект.ДоговорКонтрагента;
	
	Оповещ = Новый ОписаниеОповещения("ПриИзмененииКонтрагентаИлиОрганизацииЗавершение", ЭтотОбъект, Новый Структура("Оповещение", Оповещение));
	уатОбщегоНазначенияКлиент.ПриИзмененииДоговора(ЭтаФорма, Оповещ, ДоговорПередИзменением);
	
КонецПроцедуры // ПриИзмененииКонтрагентаИлиОрганизации()

&НаКлиенте
Процедура ПриИзмененииКонтрагентаИлиОрганизацииЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
	Если Не ДополнительныеПараметры.Оповещение = Неопределено Тогда 
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.Оповещение);
	КонецЕсли;

КонецПроцедуры // ПриИзмененииКонтрагентаИлиОрганизации()

&НаСервереБезКонтекста
Функция ИзменениеКонтрагентаСервер(ДанныеДляЗаполнения)
	СтруктураПараметровДляПолученияДоговора = 
		уатЗаполнениеДокументов.ПолучитьСтруктуруПараметровДляПолученияДоговораПродажи();
	
	ЗначенияДляЗаполнения = уатОбщегоНазначенияСервер.ПриИзмененииЗначенияКонтрагента(ДанныеДляЗаполнения, 
		СтруктураПараметровДляПолученияДоговора);
	Возврат ЗначенияДляЗаполнения;
КонецФункции

// Формирует надписи элементов формы, в частности при смене валют
//
Процедура ОбновитьИтоги()
	ВывестиСуммовыеИтогиДокумента();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВыработкуНачальнымиЗначениями()
	 ТЗВыработкаВрем = Объект.Выработка.Выгрузить(,"ПутЛист");
	 Объект.Выработка.Загрузить(ТЗВыработкаВрем);
	 Для Каждого ТекСтрока из Объект.Выработка Цикл
		 ТекСтрока.КоличествоЕздок = 1;
	 КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборОбъектСтроительства()
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		СписКонтрагентов = Новый СписокЗначений;
		СписКонтрагентов.Добавить(Объект.Контрагент);
		СписКонтрагентов.Добавить(ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка"));
		ПарамВыбора = Новый ПараметрВыбора("Отбор.Контрагент", СписКонтрагентов);
		мсв = Новый Массив;
		мсв.Добавить(ПарамВыбора);
		Элементы.ВыработкаОбъектСтроительства.ПараметрыВыбора = Новый ФиксированныйМассив(мсв);
		Элементы.СтоимостьОбъектСтроительства.ПараметрыВыбора = Новый ФиксированныйМассив(мсв);
	Иначе
		Элементы.ВыработкаОбъектСтроительства.ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив);
		Элементы.СтоимостьОбъектСтроительства.ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимость()
	
	// Колонки налога показываем только тогда, когда его учитываем.
	Если Элементы.СтоимостьСтавкаНДС.Видимость <> Объект.УчитыватьНДС Тогда
		Элементы.СтоимостьСтавкаНДС.Видимость = Объект.УчитыватьНДС;
	КонецЕсли;
	Если Элементы.СтоимостьСуммаНДС.Видимость <> Объект.УчитыватьНДС Тогда
		Элементы.СтоимостьСуммаНДС.Видимость = Объект.УчитыватьНДС;
	КонецЕсли;
	Если Элементы.СтоимостьВсего.Видимость <> Объект.УчитыватьНДС Тогда
		Элементы.СтоимостьВсего.Видимость = Объект.УчитыватьНДС;
	КонецЕсли;
	
	Элементы.НомерПачки.Видимость = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация, 
		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ИспользоватьУчетПутЛистовПоПачкам"));
		
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийТТД.ПоПутевомуЛисту")
		Или Объект.ВидОперации.Пустая() Тогда
		ЭтоТТДПоПутевомуЛисту = Истина;
		ЭтоТТДПоМаршрутномуЛистуИЗаказу = Ложь;
	Иначе
		ЭтоТТДПоПутевомуЛисту = Ложь;
		ЭтоТТДПоМаршрутномуЛистуИЗаказу = Истина;
	КонецЕсли;
	
	Элементы.ФормаОперацияПоМаршрутномуЛисту.Пометка = ЭтоТТДПоМаршрутномуЛистуИЗаказу;
	Элементы.ФормаОперацияПоПутевомуЛисту.Пометка = ЭтоТТДПоПутевомуЛисту;
	Элементы.ЗаказГрузоотправителя.Видимость = ЭтоТТДПоМаршрутномуЛистуИЗаказу;
	Элементы.МаршрутныйЛист.Видимость = ЭтоТТДПоМаршрутномуЛистуИЗаказу;
	Элементы.ВыработкаПутЛист.Видимость = ЭтоТТДПоПутевомуЛисту;
	Элементы.СтоимостьПутЛист.Видимость = ЭтоТТДПоПутевомуЛисту;
	Элементы.ТабличноеПолеТН.Видимость = ЭтоТТДПоПутевомуЛисту;
	Элементы.ТабличноеПолеТТН.Видимость = ЭтоТТДПоПутевомуЛисту;
	Элементы.Грузы.Видимость = ЭтоТТДПоМаршрутномуЛистуИЗаказу;
	Элементы.Грузы1.Видимость = ЭтоТТДПоМаршрутномуЛистуИЗаказу;
	Элементы.ВыработкаЗаполнитьПоВыбранномуПЛ.Видимость = ЭтоТТДПоПутевомуЛисту;
	Элементы.ВыработкаЗаполнитьПоПЛ.Видимость = ЭтоТТДПоПутевомуЛисту;
	Элементы.ВыработкаЗаполнитьПоМЛИЗаказуНаТС.Видимость = ЭтоТТДПоМаршрутномуЛистуИЗаказу;
	Элементы.ВыработкаНадписьГрузы.Видимость = ЭтоТТДПоМаршрутномуЛистуИЗаказу;
	Элементы.ВыработкаНоменклатура.Видимость = ЭтоТТДПоПутевомуЛисту;
	Элементы.СтоимостьПеревозки.Видимость = ЭтоТТДПоМаршрутномуЛистуИЗаказу;
	Элементы.ГруппаСтоимость.Видимость = ЭтоТТДПоПутевомуЛисту;
	Элементы.ПеревозчикОрганизация.Видимость = ЭтоТТДПоПутевомуЛисту;
	Элементы.Перевозчик.Видимость = ЭтоТТДПоМаршрутномуЛистуИЗаказу;
	Элементы.СтраницыИтогов.Видимость = ЭтоТТДПоПутевомуЛисту;
	
	ВывестиСуммовыеИтогиДокумента();
	
КонецПроцедуры

// Процедура заполняет Ставку НДС в табличной части по системе налогообложения.
// 
&НаСервере
Процедура ЗаполнитьСтавкуНДСПоНалогообложениеНДС()
	
	//СтавкаНДСПоУмолчанию = уатОбщегоНазначенияПовтИсп.ПолучитьСтавкуНДСНоль();
	СтавкаНДСПоУмолчанию = Перечисления.СтавкиНДС.ПустаяСсылка();
	Для каждого СтрокаТабличнойЧасти Из Объект.Стоимость Цикл
		СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
		СтрокаТабличнойЧасти.СуммаНДС = 0;
	КонецЦикла;
	
	Если Объект.УчитыватьНДС Тогда
		Элементы.СтоимостьСтавкаНДС.Видимость = Истина;
		Элементы.СтоимостьСуммаНДС.Видимость  = Истина;
		Элементы.СтоимостьВсего.Видимость     = Истина;
		Для каждого СтрокаТабличнойЧасти Из Объект.Стоимость Цикл
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.НоменклатураУслуги.СтавкаНДС) Тогда
				СтрокаТабличнойЧасти.СтавкаНДС = СтрокаТабличнойЧасти.НоменклатураУслуги.СтавкаНДС;
			КонецЕсли;	
			
			СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
			СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
									  		СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
									  		СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
			
		КонецЦикла;
										
	Иначе
		Элементы.СтоимостьСтавкаНДС.Видимость = Ложь;
		Элементы.СтоимостьСуммаНДС.Видимость  = Ложь;
		Элементы.СтоимостьВсего.Видимость     = Ложь;
		
	КонецЕсли;	
	
КонецПроцедуры // ЗаполнитьСтавкуНДСПоНалогообложениеНДС()

// Процедура выполняет пересчет в табличной части документа после изменений 
// в форме "Цены и валюта".Выполняется пересчет колонок: цена, скидка, сумма,
// сумма НДС, всего.
//
&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты(Знач Оповещение, Знач ВалютаРасчетовПередИзменением, ПересчитатьЦены = Ложь)
	
	// 1. Формируем структуру параметров для заполнения формы "Цены и Валюта".
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВалютаДокумента",		  Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("Курс",				  Объект.КурсВзаиморасчетов);
	СтруктураПараметров.Вставить("Кратность",			  Объект.КратностьВзаиморасчетов);
	СтруктураПараметров.Вставить("Контрагент",			  Объект.Контрагент);
	СтруктураПараметров.Вставить("Договор",				  Объект.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("Организация",			  Объект.Организация);
	СтруктураПараметров.Вставить("ДатаДокумента",		  Объект.Дата);
	СтруктураПараметров.Вставить("ПерезаполнитьЦены",	  Ложь);
	СтруктураПараметров.Вставить("ПересчитатьЦены",		  ПересчитатьЦены);
	СтруктураПараметров.Вставить("БылиВнесеныИзменения",  Ложь);
	СтруктураПараметров.Вставить("СуммаВключаетНДС",      Объект.СуммаВключаетНДС);
	СтруктураПараметров.Вставить("НалогообложениеНДС",	  Объект.УчитыватьНДС);
	// Для объедининенного решения с БП 3
	СтруктураПараметров.Вставить("ДокументБезНДС",       НЕ Объект.УчитыватьНДС);
	// Для объедининенного решения с БП 3

	Если НЕ ПравоРедактированиеДокумента() Тогда
		СтруктураПараметров.Вставить("ТолькоПросмотр", Истина);
	КонецЕсли;
	
	// 2. Открываем форму "Цены и Валюта".
	ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров,,,,,
		Новый ОписаниеОповещения("ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение", ЭтотОбъект,
		Новый Структура("ВалютаРасчетовПередИзменением, Оповещение", ВалютаРасчетовПередИзменением, Оповещение)),
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Отмена ИЛИ НЕ ПравоРедактированиеДокумента() Тогда
		Возврат;
	КонецЕсли;
	
	ВалютаРасчетовПередИзменением = ДополнительныеПараметры.ВалютаРасчетовПередИзменением;
    Оповещение = ДополнительныеПараметры.Оповещение;	
	СтруктураЦеныИВалюта = Результат;
	
	// 3. Перезаполняем табличную часть "Номенклатура", если были внесены изменения в форме "Цены и Валюта".
	Если ТипЗнч(СтруктураЦеныИВалюта) = Тип("Структура") Тогда
		
		// Для объедининенного решения с БП 3
		уатОбщегоНазначенияКлиент.ЗаполнитьСтруктуруЦеныИВалютыДляБП3(СтруктураЦеныИВалюта,Объект.ВалютаДокумента,ВалютаРасчетовПередИзменением,Объект.УчитыватьНДС,Объект.СуммаВключаетНДС);
		// Для объедининенного решения с БП 3
		
		Объект.ВалютаДокумента		   = СтруктураЦеныИВалюта.ВалютаДокумента;
		Объект.КурсВзаиморасчетов	   = СтруктураЦеныИВалюта.Курс;
		Объект.КратностьВзаиморасчетов = СтруктураЦеныИВалюта.Кратность;
		Объект.СуммаВключаетНДС		   = СтруктураЦеныИВалюта.СуммаВключаетНДС;
		Объект.УчитыватьНДС			   = СтруктураЦеныИВалюта.НалогообложениеНДС;
		
		// Пересчитываем сумму если изменился признак Налогообложение НДС.
		Если СтруктураЦеныИВалюта.НалогообложениеНДС <> СтруктураЦеныИВалюта.ПредНалогообложениеНДС Тогда
			ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
		КонецЕсли;
		
		// Пересчитываем цены по валюте.
		Если СтруктураЦеныИВалюта.ПересчитатьЦены Тогда	
			ПересчитатьЦеныТабличнойЧастиПоВалюте(ВалютаРасчетовПередИзменением, "Стоимость");
		КонецЕсли;
		
		// Пересчитываем сумму если изменился признак "Сумма включает НДС".
		Если СтруктураЦеныИВалюта.СуммаВключаетНДС <> СтруктураЦеныИВалюта.ПредСуммаВключаетНДС Тогда
			ПересчитатьСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС("Стоимость");
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьВсегоВТЧСтоимость();
	ВывестиСуммовыеИтогиДокумента();
	
	Если Не Оповещение = Неопределено Тогда 
		ВыполнитьОбработкуОповещения(Оповещение);
	КонецЕсли;

КонецПроцедуры // ОбработатьИзмененияПоКнопкеЦеныИВалюты()

&НаКлиенте
Процедура РедактироватьЦеныИВалютуЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ОбновитьВсегоВТЧСтоимость();
    ОбновитьИтоги();
    Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуВсегоВстрокеТЧ(СтрокаТабличнойЧасти)
	Если Объект.УчитыватьНДС И НЕ Объект.СуммаВключаетНДС Тогда
		СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + СтрокаТабличнойЧасти.СуммаНДС;
	Иначе
		СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВсегоВТЧСтоимость()
	Для Каждого СтрокаТабличнойЧасти Из Объект.Стоимость Цикл
		РассчитатьСуммуВсегоВстрокеТЧ(СтрокаТабличнойЧасти);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОбновитьВсегоВТЧСервер()
	Для Каждого СтрокаТабличнойЧасти Из Объект.Стоимость Цикл
		Если Объект.УчитыватьНДС И НЕ Объект.СуммаВключаетНДС Тогда
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + СтрокаТабличнойЧасти.СуммаНДС;
		Иначе
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОбновитьПараметрВыработкиВременный()
	Для Каждого СтрокаТабличнойЧасти Из Объект.Выработка Цикл
		СтрокаТабличнойЧасти.ПараметрВыработкиВременный = СтрокаТабличнойЧасти.ПараметрВыработки.Временный;
		Если СтрокаТабличнойЧасти.ПараметрВыработкиВременный Тогда
			СтрокаТабличнойЧасти.КоличествоВыработка = уатОбщегоНазначения.уатВремяВЧЧ_ММ(СтрокаТабличнойЧасти.Выработка*3600);
		Иначе
			СтрокаТабличнойЧасти.КоличествоВыработка = СтрокаТабличнойЧасти.Выработка;
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаТабличнойЧасти Из Объект.Стоимость Цикл
		СтрокаТабличнойЧасти.ПараметрВыработкиВременный = СтрокаТабличнойЧасти.ПараметрВыработки.Временный;
		Если СтрокаТабличнойЧасти.ПараметрВыработкиВременный Тогда
			СтрокаТабличнойЧасти.КоличествоВыработка = уатОбщегоНазначения.уатВремяВЧЧ_ММ(СтрокаТабличнойЧасти.Количество*3600);
		Иначе
			СтрокаТабличнойЧасти.КоличествоВыработка = СтрокаТабличнойЧасти.Количество;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура РасчетСтоимостьСервер()
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	уатРасчетыПоТарифам.РассчитатьСтоимостьУслугТТД(ДокОбъект);
	ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
	ОбновитьНадписьСпецРабот();
КонецПроцедуры

&НаКлиенте
Процедура СформироватьСписокВыбораПЛ()
	Элементы.СтоимостьПутЛист.СписокВыбора.Очистить();
	
	Для Каждого ТекСтрока Из Объект.Выработка Цикл
		Если ЗначениеЗаполнено(ТекСтрока.ПутЛист) И
			Элементы.СтоимостьПутЛист.СписокВыбора.НайтиПоЗначению(ТекСтрока.ПутЛист) = Неопределено Тогда
			
			Элементы.СтоимостьПутЛист.СписокВыбора.Добавить(ТекСтрока.ПутЛист);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Процедура рассчитывает сумму в строке табличной части.
//
&НаКлиенте
Процедура РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти = Неопределено)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
	
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	РассчитатьСуммуВсегоВстрокеТЧ(СтрокаТабличнойЧасти);
	
КонецПроцедуры // РассчитатьСуммуВСтрокеТабличнойЧасти()

// Рассчитывается сумма НДС в строке табличной части.
//
&НаКлиенте
Процедура РассчитатьСуммуНДС(СтрокаТабличнойЧасти)
	
	СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	
	СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
		СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
		СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
	
КонецПроцедуры // РассчитатьСуммуНДС()

&НаКлиенте
Процедура РассчитатьСтоимостьЗавершение1(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	мОтвет = РезультатВопроса;
	Если мОтвет <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	РассчитатьСтоимостьФрагмент1();
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСтоимостьФрагмент1()
	
	РассчитатьСтоимостьФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСтоимостьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	мОтвет = РезультатВопроса;
	Если мОтвет = КодВозвратаДиалога.Да Тогда
		Объект.Стоимость.Очистить();
	ИначеЕсли мОтвет = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	РассчитатьСтоимостьФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСтоимостьФрагмент()
	
	Перем СтруктураНадписи;
	
	РасчетСтоимостьСервер();
	
	ОбновитьПараметрВыработкиВременный();
	ОбновитьВсегоВТЧСтоимость();
	ОбновитьИтоги();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиСуммовыеИтогиДокумента()
	
	Всего = Объект.Стоимость.Итог("Всего");
	
	Если Объект.УчитыватьНДС Тогда 
		Если Объект.СуммаВключаетНДС Тогда 
			НадписьВсегоНДС = НСтр("en='VAT amount';ru='НДС в сумме'") + ":";
		Иначе 
			НадписьВсегоНДС = НСтр("en='VAT from above';ru='НДС сверху'") + ":";
		КонецЕсли;
		НадписьВсего = НСтр("en='Total including VAT';ru='Всего с НДС'");
		Элементы.СтраницыИтогов.ТекущаяСтраница = Элементы.ИтогоУчетНДС;
	Иначе 
		НадписьВсего = НСтр("en='Total';ru='Всего'");
		Элементы.СтраницыИтогов.ТекущаяСтраница = Элементы.ИтогоБезНДС;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ВалютаДокумента) Или Объект.ВалютаДокумента = мВалютаРегламентированногоУчета Тогда 
		НадписьКурс = "(1.0000)";
		Элементы.НадписьКурс.Видимость = Ложь;
		Элементы.НадписьКурс2.Видимость = Ложь;
	Иначе 
		НадписьКурс = "(" + Формат(Объект.КурсВзаиморасчетов, "ЧДЦ=4; ЧРД=.; ЧН=0.0000; ЧГ=0") + ")";
		Элементы.НадписьКурс.Видимость = Истина;
		Элементы.НадписьКурс2.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФорматРедактированияКоличествоВыработки()
	ТекСтрока = Элементы.Выработка.ТекущиеДанные;
	Если ТекСтрока <> Неопределено Тогда
		Если ТекСтрока.ПараметрВыработкиВременный Тогда
			Элементы.ВыработкаКоличествоВыработка.ФорматРедактирования = "ЧДЦ=2; ЧРД=:";
		Иначе
			Элементы.ВыработкаКоличествоВыработка.ФорматРедактирования = "";
		КонецЕсли;
	КонецЕсли;
	
	ТекСтрока = Элементы.Стоимость.ТекущиеДанные;
	Если ТекСтрока <> Неопределено Тогда
		Если ТекСтрока.ПараметрВыработкиВременный Тогда
			Элементы.СтоимостьКоличествоПараметрВыработки.ФорматРедактирования = "ЧДЦ=2; ЧРД=:";
		Иначе
			Элементы.СтоимостьКоличествоПараметрВыработки.ФорматРедактирования = "";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПравоРедактированиеДокумента()
	Рез = ПравоДоступа("Редактирование", Метаданные.Документы.уатТТД);
	Возврат Рез;
КонецФункции

&НаКлиенте
Процедура ПослеЗакрытияФормыРедактированияСпецРабот(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Или ДополнительныеПараметры = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	РезультатЗакрытия.Свойство("СпецРабота1", ДополнительныеПараметры.СпецРабота1);
	РезультатЗакрытия.Свойство("СпецРабота2", ДополнительныеПараметры.СпецРабота2);
	РезультатЗакрытия.Свойство("СпецРабота3", ДополнительныеПараметры.СпецРабота3);
	РезультатЗакрытия.Свойство("СпецРабота4", ДополнительныеПараметры.СпецРабота4);
	РезультатЗакрытия.Свойство("СпецРабота5", ДополнительныеПараметры.СпецРабота5);
	РезультатЗакрытия.Свойство("КоличествоСпецРаботы1", ДополнительныеПараметры.КоличествоСпецРаботы1);
	РезультатЗакрытия.Свойство("КоличествоСпецРаботы2", ДополнительныеПараметры.КоличествоСпецРаботы2);
	РезультатЗакрытия.Свойство("КоличествоСпецРаботы3", ДополнительныеПараметры.КоличествоСпецРаботы3);
	РезультатЗакрытия.Свойство("КоличествоСпецРаботы4", ДополнительныеПараметры.КоличествоСпецРаботы4);
	РезультатЗакрытия.Свойство("КоличествоСпецРаботы5", ДополнительныеПараметры.КоличествоСпецРаботы5);
	
	ОбновитьНадписьСпецРабот();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНадписьСпецРабот()
	
	Для Каждого ТекСтрока Из Объект.Выработка Цикл 
		ТекСтрока.НадписьСпецРаботы = "";
		Если ЗначениеЗаполнено(ТекСтрока.СпецРабота1) И ЗначениеЗаполнено(ТекСтрока.КоличествоСпецРаботы1) Тогда 
			ТекСтрока.НадписьСпецРаботы = 
				ТекСтрока.НадписьСпецРаботы 
				+ ?(ТекСтрока.НадписьСпецРаботы = "", "", " / ") 
				+ Строка(?(ТекСтрока.СпецРабота1.Временный, Формат(уатОбщегоНазначения.уатВремяВЧЧ_ММ(ТекСтрока.КоличествоСпецРаботы1), "ЧДЦ=2; ЧРД=:; ЧГ="), ТекСтрока.КоличествоСпецРаботы1));
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекСтрока.СпецРабота2) И ЗначениеЗаполнено(ТекСтрока.КоличествоСпецРаботы2) Тогда 
			ТекСтрока.НадписьСпецРаботы = 
				ТекСтрока.НадписьСпецРаботы 
				+ ?(ТекСтрока.НадписьСпецРаботы = "", "", " / ") 
				+ Строка(?(ТекСтрока.СпецРабота2.Временный, Формат(уатОбщегоНазначения.уатВремяВЧЧ_ММ(ТекСтрока.КоличествоСпецРаботы2), "ЧДЦ=2; ЧРД=:; ЧГ="), ТекСтрока.КоличествоСпецРаботы2));
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекСтрока.СпецРабота3) И ЗначениеЗаполнено(ТекСтрока.КоличествоСпецРаботы3) Тогда 
			ТекСтрока.НадписьСпецРаботы = 
				ТекСтрока.НадписьСпецРаботы 
				+ ?(ТекСтрока.НадписьСпецРаботы = "", "", " / ") 
				+ Строка(?(ТекСтрока.СпецРабота3.Временный, Формат(уатОбщегоНазначения.уатВремяВЧЧ_ММ(ТекСтрока.КоличествоСпецРаботы3), "ЧДЦ=2; ЧРД=:; ЧГ="), ТекСтрока.КоличествоСпецРаботы3));
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекСтрока.СпецРабота4) И ЗначениеЗаполнено(ТекСтрока.КоличествоСпецРаботы4) Тогда 
			ТекСтрока.НадписьСпецРаботы = 
				ТекСтрока.НадписьСпецРаботы 
				+ ?(ТекСтрока.НадписьСпецРаботы = "", "", " / ") 
				+ Строка(?(ТекСтрока.СпецРабота4.Временный, Формат(уатОбщегоНазначения.уатВремяВЧЧ_ММ(ТекСтрока.КоличествоСпецРаботы4), "ЧДЦ=2; ЧРД=:; ЧГ="), ТекСтрока.КоличествоСпецРаботы4));
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекСтрока.СпецРабота5) И ЗначениеЗаполнено(ТекСтрока.КоличествоСпецРаботы5) Тогда 
			ТекСтрока.НадписьСпецРаботы = 
				ТекСтрока.НадписьСпецРаботы 
				+ ?(ТекСтрока.НадписьСпецРаботы = "", "", " / ") 
				+ Строка(?(ТекСтрока.СпецРабота5.Временный, Формат(уатОбщегоНазначения.уатВремяВЧЧ_ММ(ТекСтрока.КоличествоСпецРаботы5), "ЧДЦ=2; ЧРД=:; ЧГ="), ТекСтрока.КоличествоСпецРаботы5));
		КонецЕсли;
		Если ТекСтрока.НадписьСпецРаботы = "" Тогда 
			ТекСтрока.НадписьСпецРаботы = "Редактировать";
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС(ИмяТЧ)
	уатОбщегоНазначенияСервер.ПересчитатьСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС(Объект[ИмяТЧ], Объект.СуммаВключаетНДС);
КонецПроцедуры

&НаСервере
Процедура ПересчитатьЦеныТабличнойЧастиПоВалюте(ВалютаРасчетовПередИзменением, ИмяТЧ)
	уатОбщегоНазначенияСервер.ПересчитатьЦеныТабличнойЧастиПоВалюте(Объект, ВалютаРасчетовПередИзменением, ИмяТЧ);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемВопрос(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.ОК Тогда
		флВопросЗакрытиеФормы = Ложь;
		Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаСервере 
Процедура ОбновитьНадписьВыработкаГрузы()
	
	Если Объект.Выработка.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийТТД.ПоМаршрутномуЛистуИЗаказу") И Объект.Грузы.Количество() > 0 Тогда
		СтрокаГруза = "";
		Для Каждого СтрокаТаблицы Из Объект.Грузы Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы.Груз) Тогда
				СтрокаГруза = СтрокаГруза + СтрокаТаблицы.Груз.Наименование;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаТаблицы.КоличествоМест) Тогда
				Если СтрокаГруза = "" Тогда
					СтрокаГруза = Строка(СтрокаТаблицы.КоличествоМест) + " упак.";
				Иначе
					СтрокаГруза = СтрокаГруза + ", " + Строка(СтрокаТаблицы.КоличествоМест) + " упак.";
				КонецЕсли;
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаТаблицы.ВидУпаковки) Тогда
				СтрокаГруза = СтрокаГруза + " (" + СтрокаТаблицы.ВидУпаковки + ")";
			КонецЕсли;
			Если ЗначениеЗаполнено(СтрокаТаблицы.КоличествоТонн) Тогда
				Если СтрокаГруза = "" Тогда
					СтрокаГруза = Строка(СтрокаТаблицы.КоличествоТонн) + " т";
				Иначе
					СтрокаГруза = СтрокаГруза + ", " + Строка(СтрокаТаблицы.КоличествоТонн) + " т";
				КонецЕсли;
			КонецЕсли;	
			СтрокаГруза = СтрокаГруза + "; ";
		КонецЦикла;
	КонецЕсли;
	
	Объект.Выработка[0].НадписьГрузы = СтрокаГруза;
	
КонецПроцедуры

// Процедура - обработчик  оповещения ответа на вопрос об изменении вида операции документа
//
// Параметры:
//  Результат	 -  результат выбора пользователя
//  Параметры	 -  значение дополнительных параметров
&НаКлиенте
Процедура ПослеЗакрытияВопросаОперация(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Выработка.Очистить();
	Объект.Стоимость.Очистить();
	Объект.Грузы.Очистить();
	
	ВидОперации = "";
	Параметры.Свойство("ВидОперации", ВидОперации);
	Если ВидОперации = "ПоПутевомуЛисту" Тогда
		Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийТТД.ПоПутевомуЛисту");
	Иначе
		Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийТТД.ПоМаршрутномуЛистуИЗаказу");
	КонецЕсли;
	
	//Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя") И РежимОтображенияДерево Тогда 
	//	ЗаказыДеревоИзменитьДатыВШапке();
	//Иначе 
	//	ЗаказыИзменитьДатыВШапке();
	//КонецЕсли;
	
	УстановитьВидимость();
	ЗаполнитьТипВодителя();
	
КонецПроцедуры

&НаСервереБезКонтекста 
Процедура ЗаполнитьДопТТДНаСервере(ОбъектДопТТД, АдресХранилища, Сч)
	мсвДополнительныеТТД = ПолучитьИзВременногоХранилища(АдресХранилища);
	ЗначениеВДанныеФормы(мсвДополнительныеТТД[Сч], ОбъектДопТТД);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьДополнительныеТТД()
	Если мсвДополнительныеТТДКоличество > 0 Тогда
		Для Сч = 0 По мсвДополнительныеТТДКоличество-1 Цикл
			ПараметрыФормы = Новый Структура("ОбновитьНадписьВыработкаГрузыПослеОткрытия", Истина);
			ФормаДопТТД = ПолучитьФорму("Документ.уатТТД.Форма.ФормаДокумента",ПараметрыФормы,,Истина);
			ОбъектДопТТД = ФормаДопТТД.Объект;
			ЗаполнитьДопТТДНаСервере(ОбъектДопТТД, АдресХранилищаДопТТД, Сч);
			КопироватьДанныеФормы(ОбъектДопТТД, ФормаДопТТД.Объект);
			
			ФормаДопТТД.РежимОткрытияОкна = РежимОткрытияОкнаФормы.Независимый;
			ФормаДопТТД.Открыть();
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Процедура заполняет табличную часть Выработка строками по ПЛ
// Параметры: 
//	ПЛ  Ссылка на выбранный путевой лист.
//
&НаСервере
Процедура ЗаполнитьВыработкуПоПЛ(ПутевойЛист)
	
	Если Не ЗначениеЗаполнено(ПутевойЛист) Тогда
		Возврат;
	КонецЕсли;
	
	Если ПутевойЛист.Задание.Количество() = 0 Тогда
		ТекстНСТР = НСтр("en='There is no data in tabular section ""Job"" of document ""%1""';
			|ru='Отсутствуют данные в табличной части ""Задание"" документа ""%1""'");
		ТекстНСТР = СтрШаблон(ТекстНСТР, ПутевойЛист);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		Возврат;
	ИначеЕсли ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ТекСтрокаПЛ = ПутевойЛист.Задание.Найти(Объект.Контрагент, "Контрагент");
		Если ТекСтрокаПЛ = Неопределено Тогда
			ТекстНСТР = НСтр("en='No data on counterparty ""%1"" in tabular section ""Job"" of document ""%2""';ru='Отсутствуют данные по контрагенту ""%1"" в табличной части ""Задание"" документа ""%2""'");
			ТекстНСТР = СтрШаблон(ТекстНСТР, Объект.Контрагент, ПутевойЛист);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ОбъектТТД = РеквизитФормыВЗначение("Объект");
		
	// Добавляем новые строки, в которых указан данный Путевой лист
	Для Каждого ТекСтрока Из ПутевойЛист.Задание Цикл
		Если ТекСтрока.Контрагент <> ОбъектТТД.Контрагент Тогда
			Продолжить;
		КонецЕсли;
		
		ОбъектТТД.ЗаполнитьВыработкуПоСтрокеЗаданияПЛ(ПутевойЛист, ТекСтрока);
	КонецЦикла;
	
	// Записываем результат
	ТаблицаВыработка = ОбъектТТД.Выработка.Выгрузить();
	Объект.Выработка.Загрузить(ТаблицаВыработка);
	
	Если Не ЗначениеЗаполнено(Объект.Водитель) Тогда
		Объект.Водитель = ПутевойЛист.Водитель1;
		Элементы.Водитель.СписокВыбора.Очистить();
		Элементы.Водитель.СписокВыбора.Добавить(ПутевойЛист.Водитель1);
		Если ЗначениеЗаполнено(ПутевойЛист.Водитель2) Тогда
			Элементы.Водитель.СписокВыбора.Добавить(ПутевойЛист.Водитель2);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура ищет в ПЛ строку Задания с совпадающими аналитиками и обновляет по ней строку выработки
&НаСервере
Процедура ОбновитьВыработкуПоВыбранномуПЛ(НомерСтроки)
	
	// Проверка корректности номера строки
	Если НомерСтроки > Объект.Выработка.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	ТекСтрокаВыработка = Объект.Выработка[НомерСтроки-1];
	ПутевойЛист = ТекСтрокаВыработка.ПутЛист;
	Если Не ЗначениеЗаполнено(ПутевойЛист) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура("Маршрут, Номенклатура, ОбъектСтроительства, ВидПеревозки, НаправлениеПеревозки, 
		|УсловиеРаботы, НомерЕздки, СпецРабота1, СпецРабота2, СпецРабота3, СпецРабота4, СпецРабота5");
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, ТекСтрокаВыработка);
	СтруктураПоиска.Вставить("Контрагент", Объект.Контрагент);
	
	НайденныеСтроки = ПутевойЛист.Задание.НайтиСтроки(СтруктураПоиска);
	Если НайденныеСтроки.Количество() > 0 Тогда
		ЗаполнитьЗначенияСвойств(ТекСтрокаВыработка, НайденныеСтроки[0], 
			"Подача, КоличествоЧасов, КоличествоЕздок, КоличествоОпераций, КоличествоТонн, Объем, КоличествоКмГруз, КоличествоКмПорожний,
			|КоличествоСпецРаботы1, КоличествоСпецРаботы2, КоличествоСпецРаботы3, КоличествоСпецРаботы4, КоличествоСпецРаботы5");
		ТекСтрокаВыработка.Количество = ТекСтрокаВыработка.КоличествоТонн * ТекСтрокаВыработка.КоличествоЕздок;
		ТекСтрокаВыработка.Сумма      = ТекСтрокаВыработка.Количество     * ТекСтрокаВыработка.Цена;
	Иначе
		ТекстНСТР = НСтр("en='No row with corresponding analitics in tabular section ""Job"" of document ""%1""';
			|ru='Нет строк с подходящими аналитиками в табличной части ""Задание"" документа ""%1""'");
		ТекстНСТР = СтрШаблон(ТекстНСТР, ПутевойЛист);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСрокДоставки()
	Если Не ЗначениеЗаполнено(Объект.СрокДоставки) Тогда
		Объект.СрокДоставки = Объект.Дата;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТипВодителя()
	
	ТипОграничения = Неопределено;
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийТТД.ПоМаршрутномуЛистуИЗаказу") Тогда
		ПринадлежностьПеревозки = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(
		Объект.МаршрутныйЛист, "ПринадлежностьПеревозки");
		Если ПринадлежностьПеревозки = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное") Тогда   
			ТипОграничения = Тип("СправочникСсылка.Сотрудники");
			Элементы.Водитель.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Сотрудники");
		ИначеЕсли ПринадлежностьПеревозки = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Привлеченное") Тогда
			ТипОграничения = Тип("СправочникСсылка.ФизическиеЛица");
			Элементы.Водитель.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица");
		Иначе
			ТипОграничения = Тип("СправочникСсылка.Сотрудники");
			Элементы.Водитель.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Сотрудники");
		КонецЕсли;
		
	Иначе 
		ТипОграничения = Тип("СправочникСсылка.Сотрудники");
		Элементы.Водитель.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Сотрудники");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Водитель) 
		И ТипОграничения <> Неопределено
		И ТипЗнч(Объект.Водитель) <> ТипОграничения Тогда
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("СправочникСсылка.Сотрудники"));
		МассивТипов.Добавить(Тип("СправочникСсылка.ФизическиеЛица"));
		Элементы.Водитель.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
	КонецЕсли; 

КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбработкаВыбораГрузаНаСервере(ВыбранноеЗначение)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Номенклатура") Тогда
		Возврат ВыбранноеЗначение.ЕдиницаХраненияОстатков;
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.уатГрузовыеМеста_уэ") Тогда
		Если ВыбранноеЗначение.Контейнер Тогда
			Возврат Новый Структура("ТипКонтейнера, ЭтоКонтейнер", ВыбранноеЗначение.ТипКонтейнера, Истина);
		Иначе
			Возврат Новый Структура("ВидУпаковки, ЭтоКонтейнер", ВыбранноеЗначение.ВидУпаковки, Ложь);
		КонецЕсли;
	Иначе
		Возврат Неопределено;
	КонецЕсли;
КонецФункции


#КонецОбласти

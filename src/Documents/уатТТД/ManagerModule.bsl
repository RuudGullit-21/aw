#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	Настройки.ПриПолученииСлужебныхРеквизитов = Ложь;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатТТД";
	КомандаПечати.Идентификатор = "ТранспортнаяНакладная";
	КомандаПечати.Представление = НСтр("en='Bill of lading';ru='Печатать ТН'");
	КомандаПечати.Порядок = 10;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатТТД";
	КомандаПечати.Идентификатор = "ПечатьВесьДокумент";
	КомандаПечати.Представление = НСтр("en='Print the entire document';ru='Печатать весь ТТН'");
	КомандаПечати.Порядок = 30;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатТТД";
	КомандаПечати.Идентификатор = "ПечататьЛицСторону";
	КомандаПечати.Представление = НСтр("en='Print front side.';ru='Печатать лиц.сторону ТТН'");
	КомандаПечати.Порядок = 40;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатТТД";
	КомандаПечати.Идентификатор = "ПечататьОбрСторону";
	КомандаПечати.Представление = НСтр("en='Print reverse side.';ru='Печатать обр.сторону ТТН'");
	КомандаПечати.Порядок = 50;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатТТД";
	КомандаПечати.Идентификатор = "ЗаказНаряд";
	КомандаПечати.Представление = НСтр("en='Work list (passengers)';ru='Заказ-наряд (пассажиры)'");
	КомандаПечати.Порядок = 60;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатТТД";
	КомандаПечати.Идентификатор = "ЗаказНарядГрузы";
	КомандаПечати.Представление = НСтр("en='Work list (cargo)';ru='Заказ-наряд (грузы)'");
	КомандаПечати.Порядок = 70;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатТТД";
	КомандаПечати.Идентификатор = "ЭСМ7";
	КомандаПечати.Представление = НСтр("en='ESM-7';ru='ЭСМ-7'");
	КомандаПечати.Порядок = 80;
	
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор  = "Реестр";
	КомандаПечати.Представление  = НСтр("en='Document register';ru='Реестр документов'");
	КомандаПечати.ЗаголовокФормы = НСтр("en='Register of documents ""Shipping document""';ru='Реестр документов ""Товарно-транспортный документ""'");
	КомандаПечати.Обработчик     = "уатОбщегоНазначенияТиповыеКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм     = "ФормаСписка";
	КомандаПечати.Порядок        = 100;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр).
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной
//                                                            параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной
//                                            параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если НЕ уатОбщегоНазначенияСервер.РазрешениеПечатиНепроведенногоДокумента(МассивОбъектов) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПечатьВесьДокумент") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПечатьВесьДокумент", "Печатать весь ТТН", ПечатьТТН(МассивОбъектов, ОбъектыПечати, 0));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПечататьЛицСторону") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПечататьЛицСторону", "Печатать лиц. сторону ТТН", ПечатьТТН(МассивОбъектов, ОбъектыПечати, 1));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПечататьОбрСторону") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПечататьОбрСторону", "Печатать обр. сторону ТТН", ПечатьТТН(МассивОбъектов, ОбъектыПечати, 2));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТранспортнаяНакладная") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ТранспортнаяНакладная", "Транспортная накладная", ПечатьТранспортнаяНакладная(МассивОбъектов, ОбъектыПечати));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЭСМ7") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ЭСМ7", "ЭСМ 7", ПечатьЭСМ7(МассивОбъектов, ОбъектыПечати));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЗаказНаряд") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ЗаказНаряд", "Заказ-наряд (пассажиры)", ПечатьЗаказНаряда(МассивОбъектов, ОбъектыПечати));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЗаказНарядГрузы") Тогда 
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ЗаказНарядГрузы", "Заказ-наряд (грузы)", ПечатьЗаказНарядаГрузы(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
	уатОбщегоНазначенияСервер.УстановитьРедактированиеПечатныхФормДокумента(КоллекцияПечатныхФорм);
	уатУправлениеПечатью.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов, КоллекцияПечатныхФорм);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.УправлениеДоступом

// Позволяет переопределить ограничение, указанное в модуле менеджера объекта метаданных.
//
// Параметры:
//  Ограничение - Структура:
//    * Текст                             - Строка - ограничение доступа для пользователей.
//                                          Если пустая строка, значит, доступ разрешен.
//    * ТекстДляВнешнихПользователей      - Строка - ограничение доступа для внешних пользователей.
//                                          Если пустая строка, значит, доступ запрещен.
//    * ПоВладельцуБезЗаписиКлючейДоступа - Неопределено - определить автоматически.
//                                        - Булево - если Ложь, то всегда записывать ключи доступа,
//                                          если Истина, тогда не записывать ключи доступа,
//                                          а использовать ключи доступа владельца (требуется,
//                                          чтобы ограничение было строго по объекту-владельцу).
//   * ПоВладельцуБезЗаписиКлючейДоступаДляВнешнихПользователей - Неопределено, Булево - также
//                                          как у параметра ПоВладельцуБезЗаписиКлючейДоступа.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Подразделение)";
	
	Ограничение.ТекстДляВнешнихПользователей = Ограничение.Текст;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// СтандартныеПодсистемы.ВариантыОтчетов

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВариантыОтчетов

#КонецОбласти

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	
	мЗапрос = Новый Запрос;
	мЗапрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗНАЧЕНИЕ(Перечисление.уатПолучателиУслуг.Контрагент) КАК ПолучательУслуг,
	|	уатТТДСтоимость.Ссылка.Дата КАК Период,
	|	уатТТДСтоимость.Ссылка.Ссылка КАК Регистратор,
	|	уатТТДСтоимость.Ссылка.Организация КАК Организация,
	|	уатТТДСтоимость.Ссылка.Контрагент КАК Контрагент,
	|	уатТТДСтоимость.Ссылка.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	уатТТДСтоимость.ПутЛист КАК ПутевойЛист,
	|	уатТТДСтоимость.ПутЛист.ТранспортноеСредство КАК ТС,
	|	уатТТДСтоимость.ПараметрВыработки КАК ПараметрВыработки,
	|	уатТТДСтоимость.Номенклатура КАК Номенклатура,
	|	уатТТДСтоимость.НоменклатураУслуги КАК НоменклатураУслуги,
	|	уатТТДСтоимость.Маршрут КАК Маршрут,
	|	уатТТДСтоимость.ОбъектСтроительства КАК ОбъектСтроительства,
	|	уатТТДСтоимость.ВидПеревозки КАК ВидПеревозки,
	|	уатТТДСтоимость.НаправлениеПеревозки КАК НаправлениеПеревозки,
	|	уатТТДСтоимость.Количество КАК Количество,
	|	уатТТДСтоимость.Сумма + ВЫБОР
	|		КОГДА уатТТДСтоимость.Ссылка.УчитыватьНДС
	|				И НЕ уатТТДСтоимость.Ссылка.СуммаВключаетНДС
	|			ТОГДА уатТТДСтоимость.СуммаНДС
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма,
	|	0 КАК СуммаВзаиморасчетов,
	|	0 КАК СуммаУпр,
	|	0 КАК СуммаРегл,
	|	ВЫБОР
	|		КОГДА уатТТДСтоимость.Ссылка.УчитыватьНДС
	|			ТОГДА уатТТДСтоимость.СуммаНДС
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаНДС,
	|	ВЫБОР
	|		КОГДА уатТТДСтоимость.Ссылка.УчитыватьНДС
	|			ТОГДА уатТТДСтоимость.СуммаНДС
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаНДСУпр,
	|	ВЫБОР
	|		КОГДА уатТТДСтоимость.Ссылка.УчитыватьНДС
	|			ТОГДА уатТТДСтоимость.СтавкаНДС
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК СтавкаНДС,
	|	уатТТДСтоимость.ПутЛист.Подразделение КАК Подразделение,
	|	уатТТДСтоимость.СтатьяДоходов КАК СтатьяДоходов
	|ИЗ
	|	Документ.уатТТД.Стоимость КАК уатТТДСтоимость
	|ГДЕ
	|	уатТТДСтоимость.Ссылка = &Ссылка";
	мЗапрос.УстановитьПараметр("Ссылка",ДокументСсылка);
	ТабДанных = мЗапрос.Выполнить().Выгрузить();
	
	Если ЗначениеЗаполнено(ДокументСсылка.КурсВзаиморасчетов)
		И ЗначениеЗаполнено(ДокументСсылка.КратностьВзаиморасчетов) Тогда
		СтруктураКурсаДокумента = Новый Структура();
		СтруктураКурсаДокумента.Вставить("Курс", ДокументСсылка.КурсВзаиморасчетов);
		СтруктураКурсаДокумента.Вставить("Кратность", ДокументСсылка.КратностьВзаиморасчетов);
	Иначе
		СтруктураКурсаДокумента = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ДокументСсылка.ВалютаДокумента,ДокументСсылка.Дата);
	КонецЕсли;
	
	Для Каждого ТекСтрока ИЗ ТабДанных Цикл
		ТекСтрока.СуммаВзаиморасчетов = ТекСтрока.Сумма;
		
		Если СтруктураДополнительныеСвойства.Свойство("ВалютаУпрУчета") тогда
			ТекСтрока.СуммаУпр = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаВзаиморасчетов,
				ДокументСсылка.ВалютаДокумента,    СтруктураДополнительныеСвойства.ВалютаУпрУчета,
				СтруктураКурсаДокумента.Курс,      СтруктураДополнительныеСвойства.КурсУпр,
				СтруктураКурсаДокумента.Кратность, СтруктураДополнительныеСвойства.КратностьУпр);
			ТекСтрока.СуммаНДСУпр = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаНДСУпр,
				ДокументСсылка.ВалютаДокумента,    СтруктураДополнительныеСвойства.ВалютаУпрУчета,
				СтруктураКурсаДокумента.Курс,      СтруктураДополнительныеСвойства.КурсУпр,
				СтруктураКурсаДокумента.Кратность, СтруктураДополнительныеСвойства.КратностьУпр);
		Иначе
			ТекСтрока.СуммаУпр = 0;								
		КонецЕсли;	

		ТекСтрока.СуммаРегл = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаВзаиморасчетов,
			ДокументСсылка.ВалютаДокумента,    СтруктураДополнительныеСвойства.ВалютаРеглУчета,
			СтруктураКурсаДокумента.Курс,      СтруктураДополнительныеСвойства.КурсРегл,
			СтруктураКурсаДокумента.Кратность, СтруктураДополнительныеСвойства.КратностьРегл);
								
		ТекСтрока.СуммаНДС  = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаНДС,
			ДокументСсылка.ВалютаДокумента,    СтруктураДополнительныеСвойства.ВалютаРеглУчета,
			СтруктураКурсаДокумента.Курс,      СтруктураДополнительныеСвойства.КурсРегл,
			СтруктураКурсаДокумента.Кратность, СтруктураДополнительныеСвойства.КратностьРегл);
    КонецЦикла;
	
	ТабДанных.Колонки.Удалить("Сумма");
							
	ТабПредоставленныеУслуги = ТабДанных.Скопировать();						
	ТабПредоставленныеУслуги.Колонки.СуммаВзаиморасчетов.Имя = "Сумма";
	ТабПредоставленныеУслуги.Колонки.Удалить("Номенклатура");
	ТабПредоставленныеУслуги.Колонки.НоменклатураУслуги.Имя = "Номенклатура";
	ТабПредоставленныеУслуги.Колонки.Добавить("Валюта");
	ТабПредоставленныеУслуги.ЗаполнитьЗначения(ДокументСсылка.ВалютаДокумента, "Валюта");
	
	ТабДанных.Колонки.Удалить("ПолучательУслуг");
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДоходы", ТабДанных);
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПредоставленныхУслуг", ТабПредоставленныеУслуги);
	
КонецПроцедуры 

Процедура ВыполнитьКонтроль(ДокументСсылка, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь) Экспорт
	
КонецПроцедуры

// Получает дополнительные реквизиты для отображения в отчете "Реестр документов"
// 
// Возвращаемое значение:
//  Структура - доп. реквизитов
//
Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура("Информация", "Контрагент");
	Возврат Результат;
	
КонецФункции

// Формирует печатную форму ЭСМ7
//
// Параметры:
//  МассивОбъектов	 - 	 - 
//  ОбъектыПечати	 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция ПечатьЭСМ7(МассивОбъектов, ОбъектыПечати) Экспорт
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПутевойЛист_ЭСМ7";
	
	ПервыйДокумент = Истина;
	
	Для Каждого ТекущийДокумент Из МассивОбъектов Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		//проверки
		Если ТекущийДокумент.Стоимость.Количество() = 0 Тогда
			ТекстНСТР = НСтр("en='Cost of services is not calculated.';ru='Не расчитана стоимость услуг!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
			Возврат ТабличныйДокумент;
		Иначе
			Если ТекущийДокумент.Стоимость[0].ПутЛист.Пустая() Тогда
				ТекстНСТР = НСтр("en='Waybill is not specified on tab ""Cost of services"".';ru='Не указан путевой лист на закладке ""Стоимость услуг""!'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
				Возврат ТабличныйДокумент;
			КонецЕсли;
		КонецЕсли;
		
		ОснПутевойЛист = ТекущийДокумент.Стоимость[0].ПутЛист;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_уатЭСМ7");
		
		ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ТТД_ЭСМ7";
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		ТабличныйДокумент.ПолеСверху 	= 0;
		ТабличныйДокумент.ПолеСлева 	= 0;
		ТабличныйДокумент.ПолеСнизу 	= 0;
		ТабличныйДокумент.ПолеСправа 	= 0;
		
		Обл = Макет.ПолучитьОбласть("Лицевая");
		
		ПечатьПрефиксовВключена = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ТекущийДокумент.Организация, ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ВыводитьПрефиксПриПечати"));
		Если ПечатьПрефиксовВключена Тогда
			НомерСправки = ТекущийДокумент.Номер;
		Иначе
			НомерСправки = уатОбщегоНазначенияКлиентСервер.НомерДокументаНаПечать(ТекущийДокумент.Номер, Истина, Истина);
		КонецЕсли;
		
		Обл.Параметры.Номер				= НомерСправки;
		ФорматДаты						= "ДЛФ='Д'";
		Обл.Параметры.ДатаСоставления	= Формат(ТекущийДокумент.Дата, ФорматДаты);

		СписокТребуемыхПараметров					= "НаименованиеДляПечатныхФорм,ЮридическийАдрес,Телефоны";
		СведенияОбОбъекте							= уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(ТекущийДокумент.Организация, ТекущийДокумент.Дата);
		Обл.Параметры.Организация					= уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(СведенияОбОбъекте, СписокТребуемыхПараметров);
		// ТС 
		ЗаполнитьЗначенияСвойств(Обл.Параметры, ПолучитьПараметрыТСДляПечати(ОснПутевойЛист.ТранспортноеСредство));
		
		Обл.Параметры.КодПоОКПО			= ТекущийДокумент.Организация.КодПоОКПО;
		Обл.Параметры.ЗаказчикКодПоОКПО	= ТекущийДокумент.Контрагент.КодПоОКПО;
		Обл.Параметры.ДатаВыезда		= Формат(ОснПутевойЛист.ДатаВыезда,"ДФ=дд.ММ.гг");
		Обл.Параметры.ДатаВозвращения	= Формат(ОснПутевойЛист.ДатаВозвращения,"ДФ=дд.ММ.гг");
		
		Водители = уатОбщегоНазначения.уатФИОСотрудникаПолноеСтрокой(ОснПутевойЛист.Водитель1, ОснПутевойЛист.Дата);
		Если ЗначениеЗаполнено(ОснПутевойЛист.Водитель2) Тогда
			Обл.Параметры.Водители = СокрЛП(Водители) + ", " + уатОбщегоНазначения.уатФИОСотрудникаПолноеСтрокой(ОснПутевойЛист.Водитель2, ОснПутевойЛист.Дата);
		Иначе
			Обл.Параметры.Водители = Водители;
		КонецЕсли;
		
		Обл.Параметры.Заказчик = ТекущийДокумент.Контрагент;
		
		СписокТребуемыхПараметров	= "НаименованиеДляПечатныхФорм,ЮридическийАдрес,Телефоны";
		СведенияОбОбъекте			= уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(ТекущийДокумент.Контрагент, ТекущийДокумент.Дата);
		мЗаказчикПредставление		= уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(СведенияОбОбъекте, СписокТребуемыхПараметров);
		
		//С000640935
		//Если СтрДлина(мЗаказчикПредставление) > 65 тогда
		//	Обл.Области.ОбластьЗаказчикПредставление.Шрифт = Новый Шрифт(Обл.Области.ОбластьЗаказчикПредставление.Шрифт,,7);
		//КонецЕсли;
		
		Обл.Параметры.ЗаказчикПредставление = мЗаказчикПредставление;
		
		Если ТекущийДокумент.Стоимость.Количество() > 0 Тогда	
			Обл.Параметры.Объект = ТекущийДокумент.Стоимость[0].ОбъектСтроительства;
		КонецЕсли;
		
		мсвСтрокПЛ = ТекущийДокумент.Стоимость.НайтиСтроки(Новый Структура("ПутЛист, ОбъектСтроительства",
		ТекущийДокумент.Стоимость[0].ПутЛист, ТекущийДокумент.Стоимость[0].ОбъектСтроительства));
		
		СтруктураКурсаДокумента = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ТекущийДокумент.ВалютаДокумента, ТекущийДокумент.Дата);
		ВалютаРеглУчета = Константы.ВалютаРегламентированногоУчета.Получить();
		
		Сч = 1;
		КоличИтого = 0;
		СуммаИтого = 0;
		СуммаНДСИтого = 0;
		мВремяРаботы = 0;
		Для Каждого ТекСтрокаСтоимости Из мсвСтрокПЛ Цикл
			
			Если Сч = 8 Тогда
				Прервать;
			КонецЕсли;
			
			Если НЕ (ТекСтрокаСтоимости.ПараметрВыработки = Справочники.уатПараметрыВыработки.ВремяВРаботе
				ИЛИ ТекСтрокаСтоимости.ПараметрВыработки = Справочники.уатПараметрыВыработки.ВремяСпециальнойРаботы) тогда
				Продолжить;
			КонецЕсли;
			
			Если НЕ ЗначениеЗаполнено(ТекСтрокаСтоимости.ОбъектСтроительства) Тогда
				Продолжить;
			КонецЕсли;
			
			ТекСтрокаСтоимости_Сумма = ТекСтрокаСтоимости.Сумма;
			ТекСтрокаСтоимости_Цена = ТекСтрокаСтоимости.Цена;
			ТекСтрокаСтоимости_СуммаНДС = ТекСтрокаСтоимости.СуммаНДС;
			
			Если ТекущийДокумент.ВалютаДокумента <> ВалютаРеглУчета Тогда
				ТекСтрокаСтоимости_Сумма = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрокаСтоимости.Сумма, ТекущийДокумент.ВалютаДокумента,
				ВалютаРеглУчета,
				СтруктураКурсаДокумента.Курс, 
				1,
				СтруктураКурсаДокумента.Кратность, 
				1);
				ТекСтрокаСтоимости_Цена = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрокаСтоимости.Цена, ТекущийДокумент.ВалютаДокумента,
				ВалютаРеглУчета,
				СтруктураКурсаДокумента.Курс, 
				1,
				СтруктураКурсаДокумента.Кратность, 
				1);
				ТекСтрокаСтоимости_СуммаНДС = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрокаСтоимости.СуммаНДС, ТекущийДокумент.ВалютаДокумента,
				ВалютаРеглУчета,
				СтруктураКурсаДокумента.Курс, 
				1,
				СтруктураКурсаДокумента.Кратность, 
				1);
			КонецЕсли;
			
			Обл.Параметры["Услуга" + Сч] = ТекСтрокаСтоимости.НоменклатураУслуги;
			Обл.Параметры["НаименованиеРаботы" + Сч] = уатОбщегоНазначенияСервер.ПолучитьНаименованиеУслугиДляПечати(ТекСтрокаСтоимости.НоменклатураУслуги,ТекСтрокаСтоимости.Содержание);
			Обл.Параметры["КодРаботы" + Сч] = ТекСтрокаСтоимости.НоменклатураУслуги.Код;
			Обл.Параметры["Количество" + Сч] = ТекСтрокаСтоимости.Количество;
			Обл.Параметры["Цена" + Сч] = ТекСтрокаСтоимости_Цена;
			Обл.Параметры["Сумма" + Сч] = ТекСтрокаСтоимости_Сумма;
			
			КоличИтого = КоличИтого + ТекСтрокаСтоимости.Количество;
			СуммаИтого = СуммаИтого + ТекСтрокаСтоимости_Сумма;
			СуммаНДСИтого = СуммаНДСИтого + ТекСтрокаСтоимости_СуммаНДС;
			
			мВремяРаботы = уатЗащищенныеФункцииСервер.СложитьВремя(мВремяРаботы, ТекСтрокаСтоимости.Количество);
			
			Сч = Сч + 1;
		КонецЦикла;
		
		Обл.Параметры.КоличествоИтого = мВремяРаботы;
		Обл.Параметры.СуммаИтого = СуммаИтого;
		Обл.Параметры.СуммаНДСИтого = СуммаНДСИтого;
		Обл.Параметры.Всего = СуммаИтого + ?(НЕ ТекущийДокумент.УчитыватьНДС ИЛИ ТекущийДокумент.СуммаВключаетНДС, 0, СуммаНДСИтого);
		
		ОтработаноПрописью = "";
		Если ЗначениеЗаполнено(Цел(мВремяРаботы)) тогда
			ОтработаноПрописью = СтрЗаменить(ЧислоПрописью(Цел(мВремяРаботы), "L=ru_RU", "час, часа, часов, м")," 00","");
		КонецЕсли;
		Если ЗначениеЗаполнено(мВремяРаботы - Цел(мВремяРаботы)) тогда
			ОтработаноПрописью = ОтработаноПрописью + СтрЗаменить(ЧислоПрописью((мВремяРаботы - Цел(мВремяРаботы))*100, "L=ru_RU; FN=Ложь", "минута, минуты, минут, ж")," 00","");
		КонецЕсли;
		Обл.Параметры.ОтработаноМашиноЧасов = ОтработаноПрописью;
		
		
		Руководители = уатОбщегоНазначенияТиповые.уатОтветственныеЛицаОрганизаций(ТекущийДокумент.Организация, ТекущийДокумент.Дата);
		
		Обл.Параметры.ФИОРуководителя = Руководители.Руководитель;
		Обл.Параметры.Должность = Руководители.РуководительДолжность;
		
		// заполняем должность и наименование заказчика
		ДанныеКонтрагента = уатОбщегоНазначения_проф.ПолучитьДолжностьИНаименованиеКонтрагента(ТекущийДокумент.Контрагент);
		Обл.Параметры.ДолжностьЗаказчика = ДанныеКонтрагента.Должность;
		Обл.Параметры.ФИОЗаказчика = ДанныеКонтрагента.Наименование;
		
		ТабличныйДокумент.Вывести(Обл);
		
		ТабличныйДокумент.ОтображатьСетку = Ложь;
		ТабличныйДокумент.Защита = Ложь;
		ТабличныйДокумент.ТолькоПросмотр = Ложь;
		ТабличныйДокумент.ОтображатьЗаголовки = Ложь;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ТекущийДокумент);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // уатПечать_ТТД_уатЭСМ7()

// Возвращает текст запроса для определения грузов по FTL заказам, не вошедших ни в какие ТТД
Функция ГрузыFTLЗаказовНеВТТДТекстЗапроса(СтруктураПараметры = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(СтруктураПараметры) Тогда
		СтруктураПараметры = Новый Структура;
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатЗаказГрузоотправителяГрузовойСостав.ГрузовоеМесто КАК Груз,
	|	уатЗаказГрузоотправителяГрузовойСостав.ВидУпаковки КАК ЕдиницаИзмерения,
	|	уатЗаказГрузоотправителяГрузовойСостав.ВесБрутто КАК ВесБрутто,
	|	уатЗаказГрузоотправителяГрузовойСостав.КоличествоМест КАК Количество,
	|	уатЗаказГрузоотправителяГрузовойСостав.КоличествоМест КАК КоличествоМест,
	|	уатЗаказГрузоотправителяГрузовойСостав.Объем КАК Объем,
	|	0 КАК Цена,
	|	уатЗаказГрузоотправителяГрузовойСостав.Стоимость КАК Сумма,
	|	уатЗаказГрузоотправителя.Ссылка КАК Ссылка,
	|	уатЗаказГрузоотправителяГрузовойСостав.НомерСтроки КАК НомерСтрокиГруза,
	|	0 КАК КоличествоТоваров,
	|	уатЗаказГрузоотправителяГрузовойСостав.КоличествоМест КАК КоличествоГрузовыхМест
	|ПОМЕСТИТЬ втГрузыЗаказа
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя.ГрузовойСостав КАК уатЗаказГрузоотправителяГрузовойСостав
	|		ПО (уатЗаказГрузоотправителя.Ссылка В (&ЗаказСсылка))
	|			И (уатЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам))
	|			И уатЗаказГрузоотправителя.Ссылка = уатЗаказГрузоотправителяГрузовойСостав.Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	уатЗаказГрузоотправителяТовары.Номенклатура,
	|	уатЗаказГрузоотправителяТовары.ЕдиницаИзмерения,
	|	уатЗаказГрузоотправителяТовары.ВесБрутто,
	|	уатЗаказГрузоотправителяТовары.Количество,
	|	уатЗаказГрузоотправителяТовары.КоличествоМест,
	|	уатЗаказГрузоотправителяТовары.Объем,
	|	уатЗаказГрузоотправителяТовары.Цена,
	|	уатЗаказГрузоотправителяТовары.Сумма,
	|	уатЗаказГрузоотправителя.Ссылка,
	|	уатЗаказГрузоотправителяТовары.НомерСтроки,
	|	уатЗаказГрузоотправителяТовары.Количество,
	|	0
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя.Товары КАК уатЗаказГрузоотправителяТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	|		ПО (уатЗаказГрузоотправителя.Ссылка В (&ЗаказСсылка))
	|			И (уатЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам))
	|			И уатЗаказГрузоотправителяТовары.Ссылка = уатЗаказГрузоотправителя.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втГрузыЗаказа.Ссылка КАК Ссылка,
	|	втГрузыЗаказа.Груз КАК Груз,
	|	втГрузыЗаказа.НомерСтрокиГруза КАК НомерСтрокиГруза,
	|	втГрузыЗаказа.КоличествоМест КАК КоличествоМест,
	|	втГрузыЗаказа.Количество КАК Количество,
	|	МИНИМУМ(ЕСТЬNULL(уатЗаказГрузоотправителяОтрезкиПути.ПунктОтправления, 0)) КАК ПунктОтправленияНомерСтроки,
	|	МАКСИМУМ(ЕСТЬNULL(уатЗаказГрузоотправителяОтрезкиПути.ПунктНазначения, 0)) КАК ПунктНазначенияНомерСтроки,
	|	втГрузыЗаказа.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	втГрузыЗаказа.ВесБрутто КАК ВесБрутто,
	|	втГрузыЗаказа.Объем КАК Объем,
	|	втГрузыЗаказа.Цена КАК Цена,
	|	втГрузыЗаказа.Сумма КАК Сумма,
	|	втГрузыЗаказа.КоличествоТоваров КАК КоличествоТоваров,
	|	втГрузыЗаказа.КоличествоГрузовыхМест КАК КоличествоГрузовыхМест
	|ПОМЕСТИТЬ втГрузыЗаказаСОтрезками
	|ИЗ
	|	втГрузыЗаказа КАК втГрузыЗаказа
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя.ОтрезкиПути КАК уатЗаказГрузоотправителяОтрезкиПути
	|		ПО втГрузыЗаказа.Ссылка = уатЗаказГрузоотправителяОтрезкиПути.Ссылка
	|			И втГрузыЗаказа.НомерСтрокиГруза = уатЗаказГрузоотправителяОтрезкиПути.Груз
	|
	|СГРУППИРОВАТЬ ПО
	|	втГрузыЗаказа.Груз,
	|	втГрузыЗаказа.НомерСтрокиГруза,
	|	втГрузыЗаказа.Количество,
	|	втГрузыЗаказа.КоличествоМест,
	|	втГрузыЗаказа.Ссылка,
	|	втГрузыЗаказа.ЕдиницаИзмерения,
	|	втГрузыЗаказа.ВесБрутто,
	|	втГрузыЗаказа.Объем,
	|	втГрузыЗаказа.Цена,
	|	втГрузыЗаказа.Сумма,
	|	втГрузыЗаказа.КоличествоТоваров,
	|	втГрузыЗаказа.КоличествоГрузовыхМест
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втГрузыЗаказаСОтрезками.Ссылка КАК Ссылка,
	|	втГрузыЗаказаСОтрезками.Груз КАК Груз,
	|	СУММА(втГрузыЗаказаСОтрезками.КоличествоМест) КАК КоличествоМест,
	|	СУММА(втГрузыЗаказаСОтрезками.Количество) КАК Количество,
	|	ЕСТЬNULL(уатЗаказГрузоотправителяПромежуточныеПункты.Пункт, ЗНАЧЕНИЕ(Справочник.уатПунктыНазначения.ПустаяСсылка)) КАК ПунктОтправления,
	|	ЕСТЬNULL(уатЗаказГрузоотправителяПромежуточныеПункты1.Пункт, ЗНАЧЕНИЕ(Справочник.уатПунктыНазначения.ПустаяСсылка)) КАК ПунктНазначения,
	|	втГрузыЗаказаСОтрезками.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СУММА(втГрузыЗаказаСОтрезками.ВесБрутто) КАК ВесБрутто,
	|	СУММА(втГрузыЗаказаСОтрезками.Объем) КАК Объем,
	|	СУММА(втГрузыЗаказаСОтрезками.Цена) КАК Цена,
	|	СУММА(втГрузыЗаказаСОтрезками.Сумма) КАК Сумма,
	|	СУММА(втГрузыЗаказаСОтрезками.КоличествоТоваров) КАК КоличествоТоваров,
	|	СУММА(втГрузыЗаказаСОтрезками.КоличествоГрузовыхМест) КАК КоличествоГрузовыхМест
	|ПОМЕСТИТЬ втГрузыЗаказаСПунктами
	|ИЗ
	|	втГрузыЗаказаСОтрезками КАК втГрузыЗаказаСОтрезками
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя.ПромежуточныеПункты КАК уатЗаказГрузоотправителяПромежуточныеПункты
	|		ПО втГрузыЗаказаСОтрезками.Ссылка = уатЗаказГрузоотправителяПромежуточныеПункты.Ссылка
	|			И втГрузыЗаказаСОтрезками.ПунктОтправленияНомерСтроки = уатЗаказГрузоотправителяПромежуточныеПункты.НомерСтроки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя.ПромежуточныеПункты КАК уатЗаказГрузоотправителяПромежуточныеПункты1
	|		ПО втГрузыЗаказаСОтрезками.Ссылка = уатЗаказГрузоотправителяПромежуточныеПункты1.Ссылка
	|			И втГрузыЗаказаСОтрезками.ПунктНазначенияНомерСтроки = уатЗаказГрузоотправителяПромежуточныеПункты1.НомерСтроки
	|
	|СГРУППИРОВАТЬ ПО
	|	втГрузыЗаказаСОтрезками.Ссылка,
	|	втГрузыЗаказаСОтрезками.Груз,
	|	ЕСТЬNULL(уатЗаказГрузоотправителяПромежуточныеПункты.Пункт, ЗНАЧЕНИЕ(Справочник.уатПунктыНазначения.ПустаяСсылка)),
	|	ЕСТЬNULL(уатЗаказГрузоотправителяПромежуточныеПункты1.Пункт, ЗНАЧЕНИЕ(Справочник.уатПунктыНазначения.ПустаяСсылка)),
	|	втГрузыЗаказаСОтрезками.ЕдиницаИзмерения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатТТДГрузы.Груз КАК Груз,
	|	СУММА(уатТТДГрузы.КоличествоМест) КАК КоличествоМест,
	|	уатТТД.АдресОтправления КАК АдресОтправления,
	|	уатТТД.АдресДоставки КАК АдресДоставки,
	|	уатТТД.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя,
	|	уатТТДГрузы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СУММА(уатТТДГрузы.КоличествоТонн) КАК КоличествоТонн,
	|	СУММА(уатТТДГрузы.Цена) КАК Цена,
	|	СУММА(уатТТДГрузы.Сумма) КАК Сумма
	|ПОМЕСТИТЬ втГрузыТТД
	|ИЗ
	|	Документ.уатТТД КАК уатТТД
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатТТД.Грузы КАК уатТТДГрузы
	|		ПО (уатТТД.ЗаказГрузоотправителя В (&ЗаказСсылка))
	|			И уатТТД.Ссылка = уатТТДГрузы.Ссылка
	|ГДЕ
	|	уатТТД.ПометкаУдаления = ЛОЖЬ
	|	И уатТТД.Ссылка <> &ТТДИсключение
	|
	|СГРУППИРОВАТЬ ПО
	|	уатТТДГрузы.Груз,
	|	уатТТД.АдресОтправления,
	|	уатТТД.АдресДоставки,
	|	уатТТД.ЗаказГрузоотправителя,
	|	уатТТДГрузы.ЕдиницаИзмерения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втГрузыЗаказаСПунктами.Ссылка КАК ЗаказГрузоотправителя,
	|	втГрузыЗаказаСПунктами.Груз КАК Груз,
	|	ВЫБОР
	|		КОГДА втГрузыЗаказаСПунктами.КоличествоМест = 0
	|			ТОГДА втГрузыЗаказаСПунктами.Количество
	|		ИНАЧЕ втГрузыЗаказаСПунктами.Количество * (втГрузыЗаказаСПунктами.КоличествоМест - ЕСТЬNULL(втГрузыТТД.КоличествоМест, 0)) / втГрузыЗаказаСПунктами.КоличествоМест
	|	КОНЕЦ КАК Количество,
	|	втГрузыЗаказаСПунктами.КоличествоМест - ЕСТЬNULL(втГрузыТТД.КоличествоМест, 0) КАК КоличествоМест,
	|	втГрузыЗаказаСПунктами.ПунктОтправления КАК ПунктОтправления,
	|	втГрузыЗаказаСПунктами.ПунктНазначения КАК ПунктНазначения,
	|	втГрузыЗаказаСПунктами.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	втГрузыЗаказаСПунктами.ВесБрутто - ЕСТЬNULL(втГрузыТТД.КоличествоТонн * 1000, 0) КАК ВесБрутто,
	|	ВЫБОР
	|		КОГДА втГрузыЗаказаСПунктами.КоличествоМест = 0
	|			ТОГДА втГрузыЗаказаСПунктами.Объем
	|		ИНАЧЕ втГрузыЗаказаСПунктами.Объем * (втГрузыЗаказаСПунктами.КоличествоМест - ЕСТЬNULL(втГрузыТТД.КоличествоМест, 0)) / втГрузыЗаказаСПунктами.КоличествоМест
	|	КОНЕЦ КАК Объем,
	|	втГрузыЗаказаСПунктами.Цена - ЕСТЬNULL(втГрузыТТД.Цена, 0) КАК Цена,
	|	втГрузыЗаказаСПунктами.Сумма - ЕСТЬNULL(втГрузыТТД.Сумма, 0) КАК Сумма,
	|	ВЫБОР
	|		КОГДА втГрузыЗаказаСПунктами.КоличествоМест = 0
	|			ТОГДА втГрузыЗаказаСПунктами.КоличествоТоваров
	|		ИНАЧЕ втГрузыЗаказаСПунктами.КоличествоТоваров * (втГрузыЗаказаСПунктами.КоличествоМест - ЕСТЬNULL(втГрузыТТД.КоличествоМест, 0)) / втГрузыЗаказаСПунктами.КоличествоМест
	|	КОНЕЦ КАК КоличествоТоваров,
	|	ВЫБОР
	|		КОГДА втГрузыЗаказаСПунктами.КоличествоМест = 0
	|			ТОГДА втГрузыЗаказаСПунктами.КоличествоГрузовыхМест
	|		ИНАЧЕ втГрузыЗаказаСПунктами.КоличествоГрузовыхМест * (втГрузыЗаказаСПунктами.КоличествоМест - ЕСТЬNULL(втГрузыТТД.КоличествоМест, 0)) / втГрузыЗаказаСПунктами.КоличествоМест
	|	КОНЕЦ КАК КоличествоГрузовыхМест
	|ИЗ
	|	втГрузыЗаказаСПунктами КАК втГрузыЗаказаСПунктами
	|		ЛЕВОЕ СОЕДИНЕНИЕ втГрузыТТД КАК втГрузыТТД
	|		ПО втГрузыЗаказаСПунктами.Груз = втГрузыТТД.Груз
	|			И втГрузыЗаказаСПунктами.ПунктОтправления = втГрузыТТД.АдресОтправления
	|			И втГрузыЗаказаСПунктами.ПунктНазначения = втГрузыТТД.АдресДоставки
	|			И втГрузыЗаказаСПунктами.Ссылка = втГрузыТТД.ЗаказГрузоотправителя
	|ГДЕ
	|	(втГрузыЗаказаСПунктами.КоличествоМест - ЕСТЬNULL(втГрузыТТД.КоличествоМест, 0) > 0
	|			ИЛИ втГрузыТТД.КоличествоМест ЕСТЬ NULL)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	уатЗаказГрузоотправителя.Ссылка,
	|	НЕОПРЕДЕЛЕНО,
	|	0,
	|	уатЗаказГрузоотправителя.КоличествоМест,
	|	уатЗаказГрузоотправителя.АдресОтправления,
	|	уатЗаказГрузоотправителя.АдресНазначения,
	|	НЕОПРЕДЕЛЕНО,
	|	уатЗаказГрузоотправителя.ВесБрутто,
	|	уатЗаказГрузоотправителя.Объем,
	|	0,
	|	0,
	|	0,
	|	0
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	|ГДЕ
	|	уатЗаказГрузоотправителя.Ссылка В(&ЗаказСсылка)
	|	И уатЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам)";
	
	Если Не СтруктураПараметры.Свойство("ТТДИсключение") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И уатТТД.Ссылка <> &ТТДИсключение", "");
	КонецЕсли;
	
	Если СтруктураПараметры.Свойство("ИтогиПоЗаказу") И СтруктураПараметры.ИтогиПоЗаказу Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|ИТОГИ ПО
		|	ЗаказГрузоотправителя";
	ИначеЕсли СтруктураПараметры.Свойство("ПорядокПоПунктам") И СтруктураПараметры.ПорядокПоПунктам Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|УПОРЯДОЧИТЬ ПО
		|	ПунктОтправления,
		|	ПунктНазначения";
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Возвращает текст запроса для определения грузов по обычным (не-FTL) заказам, не вошедших ни в какие ТТД
Функция ГрузыНеFTLЗаказовНеВТТДТекстЗапроса(СтруктураПараметры = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(СтруктураПараметры) Тогда
		СтруктураПараметры = Новый Структура;
	КонецЕсли;
	
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаказыМаршрутныеЛисты.Заказ КАК Заказ,
	|	ЗаказыМаршрутныеЛисты.МаршрутныйЛист КАК МаршрутныйЛист,
	|	ЗаказыМаршрутныеЛисты.FTL КАК FTL
	|ПОМЕСТИТЬ втЗаказыМаршрутныеЛисты
	|ИЗ
	|	&ЗаказыМаршрутныеЛисты КАК ЗаказыМаршрутныеЛисты
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втЗаказыМаршрутныеЛисты.Заказ КАК Заказ,
	|	втЗаказыМаршрутныеЛисты.МаршрутныйЛист КАК МаршрутныйЛист,
	|	уатЗаказГрузоотправителя.ДетализацияЗакрытия КАК ДетализацияЗакрытия
	|ПОМЕСТИТЬ втЗаказыСДетализацией
	|ИЗ
	|	втЗаказыМаршрутныеЛисты КАК втЗаказыМаршрутныеЛисты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	|		ПО втЗаказыМаршрутныеЛисты.Заказ = уатЗаказГрузоотправителя.Ссылка
	|ГДЕ
	|	втЗаказыМаршрутныеЛисты.FTL = ЛОЖЬ
	|
	|СГРУППИРОВАТЬ ПО
	|	втЗаказыМаршрутныеЛисты.Заказ,
	|	втЗаказыМаршрутныеЛисты.МаршрутныйЛист,
	|	уатЗаказГрузоотправителя.ДетализацияЗакрытия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втЗаказыСДетализацией.Заказ КАК Заказ,
	|	втЗаказыСДетализацией.МаршрутныйЛист КАК МаршрутныйЛист,
	|	втЗаказыСДетализацией.ДетализацияЗакрытия КАК ДетализацияЗакрытия,
	|	СУММА(ЕСТЬNULL(уатГрузыКПеревозке_уэ.Количество, 0)) КАК КоличествоПоРегистру,
	|	ЕСТЬNULL(уатГрузыКПеревозке_уэ.ГрузовоеМесто, НЕОПРЕДЕЛЕНО) КАК ГрузовоеМесто,
	|	ЕСТЬNULL(уатГрузыКПеревозке_уэ.Номенклатура, НЕОПРЕДЕЛЕНО) КАК Номенклатура,
	|	ЕСТЬNULL(уатГрузыКПеревозке_уэ.ЕдиницаИзмерения, НЕОПРЕДЕЛЕНО) КАК ЕдиницаИзмерения
	|ПОМЕСТИТЬ втЗаказыСКоличествомПоРегистру
	|ИЗ
	|	втЗаказыСДетализацией КАК втЗаказыСДетализацией
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.уатГрузыКПеревозке_уэ КАК уатГрузыКПеревозке_уэ
	|		ПО втЗаказыСДетализацией.Заказ = уатГрузыКПеревозке_уэ.ЗаказГрузоотправителя
	|			И втЗаказыСДетализацией.МаршрутныйЛист = уатГрузыКПеревозке_уэ.Регистратор
	|
	|СГРУППИРОВАТЬ ПО
	|	втЗаказыСДетализацией.Заказ,
	|	втЗаказыСДетализацией.МаршрутныйЛист,
	|	втЗаказыСДетализацией.ДетализацияЗакрытия,
	|	ЕСТЬNULL(уатГрузыКПеревозке_уэ.ГрузовоеМесто, НЕОПРЕДЕЛЕНО),
	|	ЕСТЬNULL(уатГрузыКПеревозке_уэ.Номенклатура, НЕОПРЕДЕЛЕНО),
	|	ЕСТЬNULL(уатГрузыКПеревозке_уэ.ЕдиницаИзмерения, НЕОПРЕДЕЛЕНО)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЗаказыСДетализацией.Заказ КАК Заказ,
	|	втЗаказыСДетализацией.МаршрутныйЛист КАК МаршрутныйЛист,
	|	втЗаказыСДетализацией.ДетализацияЗакрытия КАК ДетализацияЗакрытия,
	|	СУММА(уатЗаказГрузоотправителяТовары.Количество) КАК Количество,
	|	СУММА(уатЗаказГрузоотправителяТовары.КоличествоМест) КАК КоличествоМест,
	|	СУММА(уатЗаказГрузоотправителяТовары.Количество) КАК КоличествоТоваров,
	|	СУММА(0) КАК КоличествоГрузовыхМест,
	|	СУММА(уатЗаказГрузоотправителяТовары.ВесБрутто) КАК ВесБрутто,
	|	СУММА(уатЗаказГрузоотправителяТовары.Объем) КАК Объем,
	|	уатЗаказГрузоотправителяТовары.Номенклатура КАК Груз,
	|	уатЗаказГрузоотправителяТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	уатЗаказГрузоотправителяТовары.Цена КАК Цена,
	|	СУММА(уатЗаказГрузоотправителяТовары.Сумма) КАК Сумма
	|ПОМЕСТИТЬ втГрузыВЗаказах
	|ИЗ
	|	втЗаказыСДетализацией КАК втЗаказыСДетализацией
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя.Товары КАК уатЗаказГрузоотправителяТовары
	|		ПО втЗаказыСДетализацией.Заказ = уатЗаказГрузоотправителяТовары.Ссылка
	|			И (втЗаказыСДетализацией.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам))
	|
	|СГРУППИРОВАТЬ ПО
	|	втЗаказыСДетализацией.Заказ,
	|	втЗаказыСДетализацией.ДетализацияЗакрытия,
	|	втЗаказыСДетализацией.МаршрутныйЛист,
	|	уатЗаказГрузоотправителяТовары.ЕдиницаИзмерения,
	|	уатЗаказГрузоотправителяТовары.Номенклатура,
	|	уатЗаказГрузоотправителяТовары.Цена
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втЗаказыСДетализацией.Заказ,
	|	втЗаказыСДетализацией.МаршрутныйЛист,
	|	втЗаказыСДетализацией.ДетализацияЗакрытия,
	|	СУММА(уатЗаказГрузоотправителяГрузовойСостав.КоличествоМест),
	|	СУММА(уатЗаказГрузоотправителяГрузовойСостав.КоличествоМест),
	|	СУММА(0),
	|	СУММА(уатЗаказГрузоотправителяГрузовойСостав.КоличествоМест),
	|	СУММА(уатЗаказГрузоотправителяГрузовойСостав.ВесБрутто),
	|	СУММА(уатЗаказГрузоотправителяГрузовойСостав.Объем),
	|	уатЗаказГрузоотправителяГрузовойСостав.ГрузовоеМесто,
	|	уатЗаказГрузоотправителяГрузовойСостав.ВидУпаковки,
	|	СУММА(0),
	|	СУММА(уатЗаказГрузоотправителяГрузовойСостав.Стоимость)
	|ИЗ
	|	втЗаказыСДетализацией КАК втЗаказыСДетализацией
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя.ГрузовойСостав КАК уатЗаказГрузоотправителяГрузовойСостав
	|		ПО втЗаказыСДетализацией.Заказ = уатЗаказГрузоотправителяГрузовойСостав.Ссылка
	|			И (втЗаказыСДетализацией.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам))
	|
	|СГРУППИРОВАТЬ ПО
	|	втЗаказыСДетализацией.Заказ,
	|	уатЗаказГрузоотправителяГрузовойСостав.ГрузовоеМесто,
	|	уатЗаказГрузоотправителяГрузовойСостав.ВидУпаковки,
	|	втЗаказыСДетализацией.МаршрутныйЛист,
	|	втЗаказыСДетализацией.ДетализацияЗакрытия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЗаказыСКоличествомПоРегистру.Заказ КАК Заказ,
	|	втЗаказыСКоличествомПоРегистру.МаршрутныйЛист КАК МаршрутныйЛист,
	|	втЗаказыСКоличествомПоРегистру.ДетализацияЗакрытия КАК ДетализацияЗакрытия,
	|	втЗаказыСКоличествомПоРегистру.КоличествоПоРегистру КАК Количество,
	|	ВЫБОР
	|		КОГДА втГрузыВЗаказах.Количество = 0
	|			ТОГДА втГрузыВЗаказах.КоличествоМест
	|		ИНАЧЕ втГрузыВЗаказах.КоличествоМест * втЗаказыСКоличествомПоРегистру.КоличествоПоРегистру / втГрузыВЗаказах.Количество
	|	КОНЕЦ КАК КоличествоМест,
	|	ВЫБОР
	|		КОГДА втГрузыВЗаказах.Количество = 0
	|			ТОГДА втГрузыВЗаказах.КоличествоТоваров
	|		ИНАЧЕ втГрузыВЗаказах.КоличествоТоваров * втЗаказыСКоличествомПоРегистру.КоличествоПоРегистру / втГрузыВЗаказах.Количество
	|	КОНЕЦ КАК КоличествоТоваров,
	|	ВЫБОР
	|		КОГДА втГрузыВЗаказах.Количество = 0
	|			ТОГДА втГрузыВЗаказах.КоличествоГрузовыхМест
	|		ИНАЧЕ втГрузыВЗаказах.КоличествоГрузовыхМест * втЗаказыСКоличествомПоРегистру.КоличествоПоРегистру / втГрузыВЗаказах.Количество
	|	КОНЕЦ КАК КоличествоГрузовыхМест,
	|	ВЫБОР
	|		КОГДА втГрузыВЗаказах.Количество = 0
	|			ТОГДА втГрузыВЗаказах.ВесБрутто
	|		ИНАЧЕ втГрузыВЗаказах.ВесБрутто * втЗаказыСКоличествомПоРегистру.КоличествоПоРегистру / втГрузыВЗаказах.Количество
	|	КОНЕЦ КАК ВесБрутто,
	|	ВЫБОР
	|		КОГДА втГрузыВЗаказах.Количество = 0
	|			ТОГДА втГрузыВЗаказах.Объем
	|		ИНАЧЕ втГрузыВЗаказах.Объем * втЗаказыСКоличествомПоРегистру.КоличествоПоРегистру / втГрузыВЗаказах.Количество
	|	КОНЕЦ КАК Объем,
	|	втГрузыВЗаказах.Груз КАК Груз,
	|	втЗаказыСКоличествомПоРегистру.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	втГрузыВЗаказах.Цена КАК Цена,
	|	ВЫБОР
	|		КОГДА втГрузыВЗаказах.Количество = 0
	|			ТОГДА втГрузыВЗаказах.Сумма
	|		ИНАЧЕ втГрузыВЗаказах.Сумма * втЗаказыСКоличествомПоРегистру.КоличествоПоРегистру / втГрузыВЗаказах.Количество
	|	КОНЕЦ КАК Сумма
	|ПОМЕСТИТЬ втГрузыВМаршрутныхЛистах
	|ИЗ
	|	втЗаказыСКоличествомПоРегистру КАК втЗаказыСКоличествомПоРегистру
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втГрузыВЗаказах КАК втГрузыВЗаказах
	|		ПО втЗаказыСКоличествомПоРегистру.ЕдиницаИзмерения = втГрузыВЗаказах.ЕдиницаИзмерения
	|			И втЗаказыСКоличествомПоРегистру.ДетализацияЗакрытия = втГрузыВЗаказах.ДетализацияЗакрытия
	|			И (втЗаказыСКоличествомПоРегистру.ГрузовоеМесто = втГрузыВЗаказах.Груз
	|				ИЛИ втЗаказыСКоличествомПоРегистру.Номенклатура = втГрузыВЗаказах.Груз)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втЗаказыСДетализацией.Заказ КАК Заказ,
	|	втЗаказыСДетализацией.МаршрутныйЛист КАК МаршрутныйЛист,
	|	СУММА(уатТТДГрузы.КоличествоМест) КАК КоличествоМест,
	|	СУММА(уатТТДГрузы.КоличествоТонн * &КоэфВеса) КАК ВесБрутто,
	|	уатТТДГрузы.Груз КАК Груз,
	|	уатТТДГрузы.ЕдиницаИзмерения КАК ЕдиницаИзмерения
	|ПОМЕСТИТЬ втГрузыВТТД
	|ИЗ
	|	втЗаказыСДетализацией КАК втЗаказыСДетализацией
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатТТД КАК уатТТД
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатТТД.Грузы КАК уатТТДГрузы
	|			ПО уатТТД.Ссылка = уатТТДГрузы.Ссылка
	|		ПО втЗаказыСДетализацией.Заказ = уатТТД.ЗаказГрузоотправителя
	|			И втЗаказыСДетализацией.МаршрутныйЛист = уатТТД.МаршрутныйЛист
	|ГДЕ
	|	уатТТД.ПометкаУдаления = ЛОЖЬ
	|	И уатТТД.Ссылка <> &ТТДИсключение
	|
	|СГРУППИРОВАТЬ ПО
	|	втЗаказыСДетализацией.Заказ,
	|	втЗаказыСДетализацией.МаршрутныйЛист,
	|	уатТТДГрузы.Груз,
	|	уатТТДГрузы.ЕдиницаИзмерения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втГрузыВМаршрутныхЛистах.МаршрутныйЛист КАК МаршрутныйЛист,
	|	ВЫБОР
	|		КОГДА втГрузыВМаршрутныхЛистах.КоличествоМест = 0
	|			ТОГДА втГрузыВМаршрутныхЛистах.Количество
	|		ИНАЧЕ втГрузыВМаршрутныхЛистах.Количество * (втГрузыВМаршрутныхЛистах.КоличествоМест - ЕСТЬNULL(втГрузыВТТД.КоличествоМест, 0)) / втГрузыВМаршрутныхЛистах.КоличествоМест
	|	КОНЕЦ КАК Количество,
	|	втГрузыВМаршрутныхЛистах.КоличествоМест - ЕСТЬNULL(втГрузыВТТД.КоличествоМест, 0) КАК КоличествоМест,
	|	ВЫБОР
	|		КОГДА втГрузыВМаршрутныхЛистах.КоличествоМест = 0
	|			ТОГДА втГрузыВМаршрутныхЛистах.Объем
	|		ИНАЧЕ втГрузыВМаршрутныхЛистах.Объем * (втГрузыВМаршрутныхЛистах.КоличествоМест - ЕСТЬNULL(втГрузыВТТД.КоличествоМест, 0)) / втГрузыВМаршрутныхЛистах.КоличествоМест
	|	КОНЕЦ КАК Объем,
	|	втГрузыВМаршрутныхЛистах.ВесБрутто - ЕСТЬNULL(втГрузыВТТД.ВесБрутто, 0) КАК ВесБрутто,
	|	втГрузыВМаршрутныхЛистах.Заказ КАК Заказ,
	|	ВЫБОР
	|		КОГДА втГрузыВМаршрутныхЛистах.КоличествоМест = 0
	|			ТОГДА втГрузыВМаршрутныхЛистах.КоличествоТоваров
	|		ИНАЧЕ втГрузыВМаршрутныхЛистах.КоличествоТоваров * (втГрузыВМаршрутныхЛистах.КоличествоМест - ЕСТЬNULL(втГрузыВТТД.КоличествоМест, 0)) / втГрузыВМаршрутныхЛистах.КоличествоМест
	|	КОНЕЦ КАК КоличествоТоваров,
	|	ВЫБОР
	|		КОГДА втГрузыВМаршрутныхЛистах.КоличествоМест = 0
	|			ТОГДА втГрузыВМаршрутныхЛистах.КоличествоГрузовыхМест
	|		ИНАЧЕ втГрузыВМаршрутныхЛистах.КоличествоГрузовыхМест * (втГрузыВМаршрутныхЛистах.КоличествоМест - ЕСТЬNULL(втГрузыВТТД.КоличествоМест, 0)) / втГрузыВМаршрутныхЛистах.КоличествоМест
	|	КОНЕЦ КАК КоличествоГрузовыхМест,
	|	втГрузыВМаршрутныхЛистах.Груз КАК Груз,
	|	втГрузыВМаршрутныхЛистах.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	втГрузыВМаршрутныхЛистах.Цена КАК Цена,
	|	ВЫБОР
	|		КОГДА втГрузыВМаршрутныхЛистах.КоличествоМест = 0
	|			ТОГДА втГрузыВМаршрутныхЛистах.Сумма
	|		ИНАЧЕ втГрузыВМаршрутныхЛистах.Сумма * (втГрузыВМаршрутныхЛистах.КоличествоМест - ЕСТЬNULL(втГрузыВТТД.КоличествоМест, 0)) / втГрузыВМаршрутныхЛистах.КоличествоМест
	|	КОНЕЦ КАК Сумма
	|ИЗ
	|	втГрузыВМаршрутныхЛистах КАК втГрузыВМаршрутныхЛистах
	|		ЛЕВОЕ СОЕДИНЕНИЕ втГрузыВТТД КАК втГрузыВТТД
	|		ПО втГрузыВМаршрутныхЛистах.МаршрутныйЛист = втГрузыВТТД.МаршрутныйЛист
	|			И втГрузыВМаршрутныхЛистах.Груз = втГрузыВТТД.Груз
	|			И втГрузыВМаршрутныхЛистах.Заказ = втГрузыВТТД.Заказ
	|ГДЕ
	|	(втГрузыВМаршрутныхЛистах.КоличествоМест - ЕСТЬNULL(втГрузыВТТД.КоличествоМест, 0) > 0
	|			ИЛИ втГрузыВМаршрутныхЛистах.КоличествоМест = 0
	|				И втГрузыВМаршрутныхЛистах.ВесБрутто - ЕСТЬNULL(втГрузыВТТД.ВесБрутто, 0) > 0)";
	
	Если Не СтруктураПараметры.Свойство("ТТДИсключение") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "И уатТТД.Ссылка <> &ТТДИсключение", "");
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Функция ПечатьТТН(МассивОбъектов, ОбъектыПечати, ФлагПечати = 0)
	Перем мВодительскоеУдСерия, мВодительскоеУдНомер, мВодительскоеУдКатегория;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_ТТД";
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	мМаксСтрок = 18;
	мДлинаСтрокиГрузополучателяПодСреднийШрифт   = 135;
	мДлинаСтрокиГрузополучателяПодМаленькийШрифт = 190;
	мДлинаСтрокиНаименованияВТаблицеПодСреднийШрифт   = 30;
	мДлинаСтрокиНаименованияВТаблицеПодМаленькийШрифт = 40;
	мДлинаСтрокиПредставлениеОрганизацииПодСреднийШрифт   = 60;
	мДлинаСтрокиПредставлениеОрганизацииПодМаленькийШрифт = 85;
	СреднийШрифт   = Новый Шрифт("Arial", 6);
	МаленькийШрифт = Новый Шрифт("Arial", 4);
	
	ПервыйДокумент = Истина;
	
	ИспользуетсяПользовательскийМакет = уатОбщегоНазначенияТиповыеСервер.ИспользуетсяПользовательскийМакетПечатнойФормы("Документ.уатТТД.ПФ_MXL_ТТН");
	
	мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Для Каждого ТекущийДокумент Из МассивОбъектов Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ТТД_ТТН";
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.уатТТД.ПФ_MXL_ТТН");
		
		ПечатьПрефиксовВключена = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ТекущийДокумент.Организация, ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ВыводитьПрефиксПриПечати"));
		Если ПечатьПрефиксовВключена Тогда
			НомерТТН = ТекущийДокумент.Номер;
		Иначе
			НомерТТН = уатОбщегоНазначенияКлиентСервер.НомерДокументаНаПечать(ТекущийДокумент.Номер, Истина, Истина);
		КонецЕсли;
		
		// печатаем лицевую сторону
		Если ФлагПечати <> 2 Тогда
			Обл   = Макет.ПолучитьОбласть("Лицевая");
			
			Обл.Параметры.НомерТТН = НомерТТН;
			Обл.Параметры.ДеньДок  = День(ТекущийДокумент.Дата);
			Обл.Параметры.МесяцДок = Месяц(ТекущийДокумент.Дата);
			Обл.Параметры.ГодДок   = Год(ТекущийДокумент.Дата);
			
			ГрузополучательПредставление  = уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(ТекущийДокумент.Грузополучатель, ТекущийДокумент.Дата));
			ГрузоотправительПредставление = уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(ТекущийДокумент.Грузоотправитель, ТекущийДокумент.Дата));
			ПлательщикПредставление       = уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(ТекущийДокумент.Контрагент, ТекущийДокумент.Дата));
			
			ДлинаСтрокиГрузоотправитель = СтрДлина(ГрузоотправительПредставление);
			ДлинаСтрокиГрузополучатель  = СтрДлина(ГрузополучательПредставление);
			ДлинаСтрокиПлательщик       = СтрДлина(ПлательщикПредставление);
			
			Если Не ИспользуетсяПользовательскийМакет Тогда 
				// проверим, вместятся ли строки и уменьшим шрифт
				Если ДлинаСтрокиГрузоотправитель > мДлинаСтрокиГрузополучателяПодМаленькийШрифт Тогда
					Обл.Область("R8C6:R8C37").Шрифт = МаленькийШрифт;
				ИначеЕсли ДлинаСтрокиГрузоотправитель > мДлинаСтрокиГрузополучателяПодСреднийШрифт Тогда
					Обл.Область("R8C6:R8C37").Шрифт = СреднийШрифт;
				КонецЕсли;
				
				Если ДлинаСтрокиГрузополучатель > мДлинаСтрокиГрузополучателяПодМаленькийШрифт Тогда
					Обл.Область("R10C6:R10C37").Шрифт = МаленькийШрифт;
				ИначеЕсли ДлинаСтрокиГрузополучатель > мДлинаСтрокиГрузополучателяПодСреднийШрифт Тогда
					Обл.Область("R10C6:R10C37").Шрифт = СреднийШрифт;
				КонецЕсли;
				
				Если ДлинаСтрокиПлательщик > мДлинаСтрокиГрузополучателяПодМаленькийШрифт Тогда
					Обл.Область("R12C5:R12C37").Шрифт = МаленькийШрифт;
				ИначеЕсли ДлинаСтрокиПлательщик > мДлинаСтрокиГрузополучателяПодСреднийШрифт Тогда
					Обл.Область("R12C5:R12C37").Шрифт = СреднийШрифт;
				КонецЕсли;
			КонецЕсли;
			
			Обл.Параметры.Грузополучатель = ТекущийДокумент.Грузополучатель;
			Обл.Параметры.ГрузополучательПредставление = ГрузополучательПредставление;
			Обл.Параметры.ГрузополучательОКПО = ?(НЕ ЗначениеЗаполнено(ТекущийДокумент.Грузополучатель), "", ТекущийДокумент.Грузополучатель.КодПоОКПО);
			
			Обл.Параметры.Грузоотправитель = ТекущийДокумент.Грузоотправитель;
			Обл.Параметры.ГрузоотправительПредставление = ГрузоотправительПредставление;
			Обл.Параметры.ГрузоотправительОКПО = ?(НЕ ЗначениеЗаполнено(ТекущийДокумент.Грузоотправитель), "", ТекущийДокумент.Грузоотправитель.КодПоОКПО);
			
			Обл.Параметры.Плательщик = ТекущийДокумент.Контрагент;			
			Обл.Параметры.ПлательщикПредставление = ПлательщикПредставление;
			Обл.Параметры.ПлательщикОКПО = ?(НЕ ЗначениеЗаполнено(ТекущийДокумент.Контрагент), "", ТекущийДокумент.Контрагент.КодПоОКПО);
			
			УменьшитьШрифтВТаблицеНаМаленький = Ложь;
			УменьшитьШрифтВТаблицеНаСредний = Ложь;
			КоличествоМест	  = 0;
			КоличествоТонн	  = 0;
			ВсегоНаименований = 0;
			
			Если ТекущийДокумент.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийТТД.ПоПутевомуЛисту") Или ТекущийДокумент.Грузы.Количество() = 0 Тогда
				Для Каждого ТекСтр Из ТекущийДокумент.Выработка Цикл
					Если ТекСтр.НомерСтроки < 9 Тогда
						Если ЗначениеЗаполнено(ТекСтр.Номенклатура) Тогда
							// проверим, вместятся ли строки
							ДлинаСтрокиНоменклатура = СтрДлина(ТекСтр.Номенклатура);
							Если ДлинаСтрокиНоменклатура > мДлинаСтрокиНаименованияВТаблицеПодМаленькийШрифт Тогда 
								УменьшитьШрифтВТаблицеНаМаленький = Истина;
							ИначеЕсли ДлинаСтрокиНоменклатура > мДлинаСтрокиНаименованияВТаблицеПодСреднийШрифт Тогда 
								УменьшитьШрифтВТаблицеНаСредний = Истина;
							КонецЕсли;
							
							Обл.Параметры["Код" + Строка(ТекСтр.НомерСтроки)] = ТекСтр.Номенклатура.Код;
							Обл.Параметры["Цена" + Строка(ТекСтр.НомерСтроки)] = ТекСтр.Цена;
							Обл.Параметры["Груз" + Строка(ТекСтр.НомерСтроки)] = ТекСтр.Номенклатура;
							Обл.Параметры["ЕдИзм" + Строка(ТекСтр.НомерСтроки)] = ТекСтр.ЕдиницаИзмерения;
							Обл.Параметры["ВидУпаковки" + Строка(ТекСтр.НомерСтроки)] = ТекСтр.ВидУпаковки;
							Обл.Параметры["КоличествоМест" + Строка(ТекСтр.НомерСтроки)] = ТекСтр.КоличествоМест;
							Обл.Параметры["Сумма" + Строка(ТекСтр.НомерСтроки)] = ТекСтр.Сумма;
							Обл.Параметры["Масса" + Строка(ТекСтр.НомерСтроки)] = Формат(ТекСтр.КоличествоТонн*?(ТекСтр.КоличествоЕздок=0,1,ТекСтр.КоличествоЕздок), "ЧЦ=10; ЧДЦ=3");
							Обл.Параметры["Количество" + Строка(ТекСтр.НомерСтроки)] = ТекСтр.КоличествоГруза;
							
							ВсегоНаименований = ВсегоНаименований + 1;
							КоличествоМест    = КоличествоМест + ТекСтр.КоличествоМест;
							КоличествоТонн    = КоличествоТонн + ТекСтр.КоличествоТонн*?(ТекСтр.КоличествоЕздок=0,1,ТекСтр.КоличествоЕздок);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли ТекущийДокумент.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийТТД.ПоМаршрутномуЛистуИЗаказу") Тогда
				Для Каждого ТекСтр Из ТекущийДокумент.Грузы Цикл
					Если ТекСтр.НомерСтроки < 9 Тогда
						Если ЗначениеЗаполнено(ТекСтр.Груз) Тогда
							// проверим, вместятся ли строки
							ДлинаСтрокиНоменклатура = СтрДлина(ТекСтр.Груз);
							Если ДлинаСтрокиНоменклатура > мДлинаСтрокиНаименованияВТаблицеПодМаленькийШрифт Тогда 
								УменьшитьШрифтВТаблицеНаМаленький = Истина;
							ИначеЕсли ДлинаСтрокиНоменклатура > мДлинаСтрокиНаименованияВТаблицеПодСреднийШрифт Тогда 
								УменьшитьШрифтВТаблицеНаСредний = Истина;
							КонецЕсли;
							
							Обл.Параметры["Код" + Строка(ТекСтр.НомерСтроки)] = ТекСтр.Груз.Код;
							Обл.Параметры["Цена" + Строка(ТекСтр.НомерСтроки)] = ТекСтр.Цена;
							Обл.Параметры["Груз" + Строка(ТекСтр.НомерСтроки)] = ТекСтр.Груз;
							Обл.Параметры["ЕдИзм" + Строка(ТекСтр.НомерСтроки)] = ТекСтр.ЕдиницаИзмерения;
							Обл.Параметры["ВидУпаковки" + Строка(ТекСтр.НомерСтроки)] = ТекСтр.ВидУпаковки;
							Обл.Параметры["КоличествоМест" + Строка(ТекСтр.НомерСтроки)] = ТекСтр.КоличествоМест;
							Обл.Параметры["Сумма" + Строка(ТекСтр.НомерСтроки)] = ТекСтр.Сумма;
							Обл.Параметры["Масса" + Строка(ТекСтр.НомерСтроки)] = Формат(ТекСтр.КоличествоТонн, "ЧЦ=10; ЧДЦ=3");
							Обл.Параметры["Количество" + Строка(ТекСтр.НомерСтроки)] = ТекСтр.Количество;
							
							ВсегоНаименований = ВсегоНаименований + 1;
							КоличествоМест    = КоличествоМест + ТекСтр.КоличествоМест;
							КоличествоТонн    = КоличествоТонн + ТекСтр.КоличествоТонн;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если Не ИспользуетсяПользовательскийМакет Тогда 
				Если УменьшитьШрифтВТаблицеНаМаленький Тогда
					Обл.Область("R17:R24").Шрифт = МаленькийШрифт;
				ИначеЕсли УменьшитьШрифтВТаблицеНаСредний Тогда
					Обл.Область("R17:R24").Шрифт = СреднийШрифт;
				КонецЕсли;
			КонецЕсли;
			
			ПарПредмета = "штука, штуки, штук, ж, , , , , 0";
			Обл.Параметры.ВсегоНаименований = ?(ЗначениеЗаполнено(ВсегоНаименований), ЧислоПрописью(ВсегоНаименований, "Л = ru_RU", ПарПредмета), "");
			
			ПарПредмета = "упаковка, упаковки, упаковок, ж, , , , , 0";
			Обл.Параметры.ВсегоМест = ?(ЗначениеЗаполнено(КоличествоМест), ЧислоПрописью(КоличествоМест, "Л = ru_RU", ПарПредмета), "");
			
			ПарПредмета = "тонна, тонны, тонн, ж, кг, кг, кг, м, 3";
			Обл.Параметры.МассаГрузаБруттоПрописью = ?(ЗначениеЗаполнено(КоличествоТонн), ЧислоПрописью(КоличествоТонн, "Л = ru_RU", ПарПредмета), "");
			
			Обл.Параметры.МассаГрузаБрутто = КоличествоТонн;
			
			СведенияОтпускРазрешил = уатОбщегоНазначения.уатПрочитатьРеквизитыВодителя(ТекущийДокумент.ОтпускРазрешил, ТекущаяДата(), ТекущийДокумент.Организация);
			Обл.Параметры.ОтпускРазрешил = ?(СведенияОтпускРазрешил = Неопределено, Ложь, СведенияОтпускРазрешил.Должность);
			Обл.Параметры.ОтпускРазрешилФИО = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ТекущийДокумент.ОтпускРазрешил);
			
			Обл.Параметры.ГлавныйБухгалтер = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ТекущийДокумент.ГлавныйБухгалтер);
			
			СведенияОтпускПроизвел = уатОбщегоНазначения.уатПрочитатьРеквизитыВодителя(ТекущийДокумент.ОтпускПроизвел, ТекущаяДата(), ТекущийДокумент.Организация);
			Обл.Параметры.ОтпускПроизвел = ?(СведенияОтпускПроизвел = Неопределено, Ложь, СведенияОтпускПроизвел.Должность);
			Обл.Параметры.ОтпускПроизвелФИО = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ТекущийДокумент.ОтпускПроизвел);
			Обл.Параметры.ГрузКПеревозкеПринял = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ТекущийДокумент.ГрузКПеревозкеПринял);
			Обл.Параметры.ГрузПолучилГрузополучатель = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ТекущийДокумент.ГрузПолучилГрузополучатель);
			
			ТабличныйДокумент.Вывести(Обл);
		КонецЕсли;
		
		Если ФлагПечати = 0 Тогда	//Новая страница для печати полного док.
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		// печатаем обратную сторону
		Если ФлагПечати <> 1 Тогда
			
			Обл   = Макет.ПолучитьОбласть("Оборотная");
			ФорматДаты = "ДФ='дд ММММ гггг'";
			Обл.Параметры.НомерТТН     = НомерТТН;
			Обл.Параметры.СрокДоставки = Формат(ТекущийДокумент.СрокДоставки, ФорматДаты);
			
			Если ТекущийДокумент.ВидОперации = Перечисления.уатВидыОперацийТТД.ПоПутевомуЛисту Тогда
				Перевозчик = ТекущийДокумент.Организация;
			Иначе
				Перевозчик = ТекущийДокумент.Перевозчик;
			КонецЕсли;
			
			ПеревозчикПредставление = уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(
				уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(Перевозчик, ТекущийДокумент.Дата), "НаименованиеДляПечатныхФорм, ЮридическийАдрес, Телефоны");
			ДлинаСтрокиПеревозчик = СтрДлина(ПеревозчикПредставление);
			
			Если Не ИспользуетсяПользовательскийМакет Тогда 
				Если ДлинаСтрокиПеревозчик > мДлинаСтрокиПредставлениеОрганизацииПодМаленькийШрифт Тогда
					Обл.Область("R5C5:R5C20").Шрифт = МаленькийШрифт;
				ИначеЕсли ДлинаСтрокиПеревозчик > мДлинаСтрокиПредставлениеОрганизацииПодСреднийШрифт Тогда
					Обл.Область("R5C5:R5C20").Шрифт = СреднийШрифт;
				КонецЕсли;
			КонецЕсли;
			
			Обл.Параметры.НазваниеОрганизации = ПеревозчикПредставление;
			Обл.Параметры.Организация = Перевозчик;
			
			Обл.Параметры.ВидПеревозки = ТекущийДокумент.ВидПеревозки;
			
			ТранспортноеСредство = Неопределено;
			
			Если ТекущийДокумент.ВидОперации = Перечисления.уатВидыОперацийТТД.ПоПутевомуЛисту Тогда
				Для каждого ТекСтр из ТекущийДокумент.Выработка Цикл
					Если ЗначениеЗаполнено(ТекСтр.ПутЛист) Тогда
						ТранспортноеСредство = ТекСтр.ПутЛист.ТранспортноеСредство;
						Обл.Параметры.НомерПЛ 	= ТекСтр.ПутЛист.Номер;
						
						Водитель = уатОбщегоНазначения.уатФИОСотрудникаПолноеСтрокой(ТекСтр.ПутЛист.Водитель1, ТекущийДокумент.Дата);
						Обл.Параметры.Водители = Водитель;
						
						уатОбщегоНазначения.уатУдостоверениеВодителя(ТекСтр.ПутЛист.Водитель1, мВодительскоеУдСерия, мВодительскоеУдНомер, мВодительскоеУдКатегория);	
						Обл.Параметры.Удостоверения = ?(СокрЛП(мВодительскоеУдСерия)="","",СокрЛП(мВодительскоеУдСерия) + " ") + мВодительскоеУдНомер;
						
						НН = 0;                               
						Для каждого ТекСтрПриц из ТекСтр.ПутЛист.Прицепы Цикл
							Если ЗначениеЗаполнено(ТекСтрПриц.ТС) Тогда
								Если ЗначениеЗаполнено(ТекСтрПриц.ТС.Модель) Тогда
									Если ЗначениеЗаполнено(ТекСтрПриц.ТС.ТипТС) Тогда
										Если ТекСтрПриц.ТС.ТипТС.ВидТС = Перечисления.уатВидыТС.Полуприцеп или ТекСтрПриц.ТС.ТипТС.ВидТС = Перечисления.уатВидыТС.Прицеп или ТекСтрПриц.ТС.ТипТС.ВидТС = Перечисления.уатВидыТС.ПрицепСамосвал Тогда
											Если НН < 2 Тогда
												НН = НН + 1;
												Обл.Параметры["МаркаПрицеп" + Строка(НН)]  		= ТекСтрПриц.ТС.Марка;
												Обл.Параметры["ГосНомерПрицеп" + Строка(НН)]	= ТекСтрПриц.ТС.ГосударственныйНомер;
												Обл.Параметры["ГарНомПрицеп" + Строка(НН)]		= ТекСтрПриц.ТС.ГаражныйНомер;
											КонецЕсли;
										КонецЕсли;
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
						
					КонецЕсли;
					Прервать;
				КонецЦикла;
			ИначеЕсли ТекущийДокумент.ВидОперации = Перечисления.уатВидыОперацийТТД.ПоМаршрутномуЛистуИЗаказу Тогда
				Если ЗначениеЗаполнено(ТекущийДокумент.МаршрутныйЛист) Тогда
					ТранспортноеСредство = ТекущийДокумент.МаршрутныйЛист.ТС;
					Водитель = уатОбщегоНазначения.уатФИОСотрудникаПолноеСтрокой(ТекущийДокумент.Водитель, ТекущийДокумент.Дата);
					Обл.Параметры.Водители = Водитель;
					уатОбщегоНазначения.уатУдостоверениеВодителя(ТекущийДокумент.Водитель, мВодительскоеУдСерия, мВодительскоеУдНомер, мВодительскоеУдКатегория);	
					Обл.Параметры.Удостоверения = ?(СокрЛП(мВодительскоеУдСерия)="","",СокрЛП(мВодительскоеУдСерия) + " ") + мВодительскоеУдНомер;
					ВсеПрицепы = Новый Массив();
					Если ЗначениеЗаполнено(ТекущийДокумент.МаршрутныйЛист.Прицеп1) Тогда
						ВсеПрицепы.Добавить(ТекущийДокумент.МаршрутныйЛист.Прицеп1);
					КонецЕсли;
					Если ЗначениеЗаполнено(ТекущийДокумент.МаршрутныйЛист.Прицеп2) Тогда
						ВсеПрицепы.Добавить(ТекущийДокумент.МаршрутныйЛист.Прицеп2);
					КонецЕсли;
					НН = 0;                               
					Для каждого ТекСтрПриц из ВсеПрицепы Цикл
						Если ЗначениеЗаполнено(ТекСтрПриц.Модель) Тогда
							Если ЗначениеЗаполнено(ТекСтрПриц.ТипТС) Тогда
								Если ТекСтрПриц.ТипТС.ВидТС = Перечисления.уатВидыТС.Полуприцеп или ТекСтрПриц.ТипТС.ВидТС = Перечисления.уатВидыТС.Прицеп или ТекСтрПриц.ТипТС.ВидТС = Перечисления.уатВидыТС.ПрицепСамосвал Тогда
									Если НН < 2 Тогда
										НН = НН + 1;
										Обл.Параметры["МаркаПрицеп" + Строка(НН)]  		= ТекСтрПриц.Марка;
										Обл.Параметры["ГосНомерПрицеп" + Строка(НН)]	= ТекСтрПриц.ГосударственныйНомер;
										Обл.Параметры["ГарНомПрицеп" + Строка(НН)]		= ТекСтрПриц.ГаражныйНомер;
									КонецЕсли;
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
			Если ТранспортноеСредство <> Неопределено Тогда
				Обл.Параметры.Марка  	= ТранспортноеСредство.Марка;
				Обл.Параметры.ГосНомер	= ТранспортноеСредство.ГосударственныйНомер;
				
				ПлательщикПредставление	= уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(ТекущийДокумент.Контрагент, ТекущийДокумент.Дата));					
				ДлинаСтрокиПлательщик = СтрДлина(ПлательщикПредставление);
				Если Не ИспользуетсяПользовательскийМакет Тогда 
					Если ДлинаСтрокиПлательщик > мДлинаСтрокиГрузополучателяПодМаленькийШрифт Тогда
						Обл.Область("R7C8:R7C41").Шрифт = МаленькийШрифт;
					ИначеЕсли ДлинаСтрокиПлательщик > мДлинаСтрокиГрузополучателяПодСреднийШрифт Тогда
						Обл.Область("R7C8:R7C41").Шрифт = СреднийШрифт;
					КонецЕсли;
				КонецЕсли;
				Обл.Параметры.Плательщик = ПлательщикПредставление;
				
				Обл.Параметры.ЛицензионнаяКарточка  	= ТранспортноеСредство.ЛицензионнаяКарточка;
				Обл.Параметры.НомерЛицензионнойКарточки = ТранспортноеСредство.НомерЛицензионнойКарточки;
				Обл.Параметры.СерияЛицензионнойКарточки = ТранспортноеСредство.СерияЛицензионнойКарточки;
				
				Обл.Параметры.ПунктПогрузки	 = ?(ТипЗнч(ТекущийДокумент.АдресОтправления) = Тип("СправочникСсылка.уатПунктыНазначения"),
					?(ЗначениеЗаполнено(ТекущийДокумент.АдресОтправления.Адрес), ТекущийДокумент.АдресОтправления.Адрес, ТекущийДокумент.АдресОтправления), ТекущийДокумент.АдресОтправления);
				Обл.Параметры.ПунктРазгрузки = ?(ТипЗнч(ТекущийДокумент.АдресДоставки)    = Тип("СправочникСсылка.уатПунктыНазначения"),
					?(ЗначениеЗаполнено(ТекущийДокумент.АдресДоставки.Адрес)   , ТекущийДокумент.АдресДоставки.Адрес   , ТекущийДокумент.АдресДоставки)   , ТекущийДокумент.АдресДоставки);
				Обл.Параметры.Переадресовка	 = ?(ТипЗнч(ТекущийДокумент.Переадресовка)    = Тип("СправочникСсылка.уатПунктыНазначения"),
					?(ЗначениеЗаполнено(ТекущийДокумент.Переадресовка.Адрес)   , ТекущийДокумент.Переадресовка.Адрес   , ТекущийДокумент.Переадресовка)   , ТекущийДокумент.Переадресовка);
				
				
				
			КонецЕсли;
			
			УменьшитьШрифтВТаблицеНаМаленький = Ложь;
			УменьшитьШрифтВТаблицеНаСредний = Ложь;
			ВсегоНаименований = 0;
			КоличествоЕздок	  = 0;
			КоличествоТонн	  = 0;
			Если ТекущийДокумент.ВидОперации <> ПредопределенноеЗначение("Перечисление.уатВидыОперацийТТД.ПоМаршрутномуЛистуИЗаказу") Или ТекущийДокумент.Грузы.Количество() = 0 Тогда 
				Для каждого ТекСтр из ТекущийДокумент.Выработка Цикл
					Если ТекСтр.НомерСтроки < 4 Тогда
						Если ЗначениеЗаполнено(ТекСтр.Номенклатура) Тогда
							// проверим, вместятся ли строки
							ДлинаСтрокиНоменклатура = СтрДлина(ТекСтр.Номенклатура);
							Если ДлинаСтрокиНоменклатура > мДлинаСтрокиНаименованияВТаблицеПодМаленькийШрифт Тогда 
								УменьшитьШрифтВТаблицеНаМаленький = Истина;
							ИначеЕсли ДлинаСтрокиНоменклатура > мДлинаСтрокиНаименованияВТаблицеПодСреднийШрифт Тогда 
								УменьшитьШрифтВТаблицеНаСредний = Истина;
							КонецЕсли;
							
							Обл.Параметры["КодГруза" + Строка(ТекСтр.НомерСтроки)] 		= ТекСтр.Номенклатура.Код;
							Обл.Параметры["Груз" + Строка(ТекСтр.НомерСтроки)] 			= ТекСтр.Номенклатура;
							Обл.Параметры["ВидУпаковки" + Строка(ТекСтр.НомерСтроки)] 	= ТекСтр.ВидУпаковки;
							Обл.Параметры["КоличествоМест" + Строка(ТекСтр.НомерСтроки)]= ТекСтр.КоличествоМест;
							Обл.Параметры["СОМ" + Строка(ТекСтр.НомерСтроки)] 			= ТекСтр.СпособОпределенияМассы;
							Обл.Параметры["Масса" + Строка(ТекСтр.НомерСтроки)] = Формат(ТекСтр.КоличествоТонн*?(ТекСтр.КоличествоЕздок=0,1,ТекСтр.КоличествоЕздок), "ЧЦ=10; ЧДЦ=3");
							
							ВсегоНаименований = ВсегоНаименований + 1;
							КоличествоТонн	  = КоличествоТонн  + ТекСтр.КоличествоТонн*?(ТекСтр.КоличествоЕздок=0,1,ТекСтр.КоличествоЕздок);
							КоличествоЕздок	  = КоличествоЕздок + ТекСтр.КоличествоЕздок;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			Иначе
				Для каждого ТекСтр из ТекущийДокумент.Грузы Цикл
					Если ТекСтр.НомерСтроки < 4 Тогда
						Если ЗначениеЗаполнено(ТекСтр.Груз) Тогда
							// проверим, вместятся ли строки
							ДлинаСтрокиНоменклатура = СтрДлина(ТекСтр.Груз);
							Если ДлинаСтрокиНоменклатура > мДлинаСтрокиНаименованияВТаблицеПодМаленькийШрифт Тогда 
								УменьшитьШрифтВТаблицеНаМаленький = Истина;
							ИначеЕсли ДлинаСтрокиНоменклатура > мДлинаСтрокиНаименованияВТаблицеПодСреднийШрифт Тогда 
								УменьшитьШрифтВТаблицеНаСредний = Истина;
							КонецЕсли;
							
							Обл.Параметры["КодГруза" + Строка(ТекСтр.НомерСтроки)] 		= ТекСтр.Груз.Код;
							Обл.Параметры["Груз" + Строка(ТекСтр.НомерСтроки)] 			= ТекСтр.Груз;
							Обл.Параметры["ВидУпаковки" + Строка(ТекСтр.НомерСтроки)] 	= ТекСтр.ВидУпаковки;
							Обл.Параметры["КоличествоМест" + Строка(ТекСтр.НомерСтроки)]= ТекСтр.КоличествоМест;
							Обл.Параметры["СОМ" + Строка(ТекСтр.НомерСтроки)] 			= ТекСтр.СпособОпределенияМассы;
							Обл.Параметры["Масса" + Строка(ТекСтр.НомерСтроки)] = Формат(ТекСтр.КоличествоТонн, "ЧЦ=10; ЧДЦ=3");
							
							ВсегоНаименований = ВсегоНаименований + 1;
							КоличествоТонн	  = КоличествоТонн  + ТекСтр.КоличествоТонн;
							//КоличествоЕздок	  = КоличествоЕздок + ТекСтр.КоличествоЕздок;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если Не ИспользуетсяПользовательскийМакет Тогда 
				Если УменьшитьШрифтВТаблицеНаМаленький Тогда
					Обл.Область("R24:R26").Шрифт = МаленькийШрифт;
				ИначеЕсли УменьшитьШрифтВТаблицеНаСредний Тогда
					Обл.Область("R24:R26").Шрифт = СреднийШрифт;
				КонецЕсли;
			КонецЕсли;
			
			Обл.Параметры.КолвоЕздок = КоличествоЕздок;
			Обл.Параметры.МассаВсего = КоличествоТонн;
			
			ПарПредмета = "тонна, тонны, тонн, ж, кг, кг, кг, м, 3";
			Обл.Параметры.МассаБруттоПрописью = ?(ЗначениеЗаполнено(КоличествоТонн), ЧислоПрописью(КоличествоТонн, "Л = ru_RU", ПарПредмета), "");
			Обл.Параметры.МассаБрутто = ?(ЗначениеЗаполнено(КоличествоТонн), ЧислоПрописью(КоличествоТонн, "Л = ru_RU", ПарПредмета), "");
			
			ТабличныйДокумент.Вывести(Обл);
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ТекущийДокумент);
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатнаяФорма()

Функция ПечатьТранспортнаяНакладная(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_ТТД";
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	ПервыйДокумент = Истина;
	
	мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Для Каждого ТекущийДокумент Из МассивОбъектов Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ТТД";
		Если ТекущийДокумент.Дата < '20210101' Тогда
			ВариантПечатиНакладной = "ТранспортнаяНакладная1529";
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.уатТТД.ПФ_MXL_ТранспортнаяНакладная1529");
		ИначеЕсли ТекущийДокумент.Дата < '20220301' Тогда
			ВариантПечатиНакладной = "ТранспортнаяНакладная2200";
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.уатТТД.ПФ_MXL_ТранспортнаяНакладная2200");
		Иначе
			ВариантПечатиНакладной = "ТранспортнаяНакладная2116";
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.уатТТД.ПФ_MXL_ТранспортнаяНакладная2116");
		КонецЕсли;
	
		ВыработкаЗаполнена = Ложь;
		Если ТекущийДокумент.Выработка.Количество() Тогда
			ВыработкаЗаполнена = Истина;
			ПутЛист = ТекущийДокумент.Выработка[0].ПутЛист;
		КонецЕсли;
		
		Если ВариантПечатиНакладной = "ТранспортнаяНакладная2200" 
			ИЛИ ВариантПечатиНакладной = "ТранспортнаяНакладная2116" Тогда
		    ОбластьЛицевая = Макет.ПолучитьОбласть("ГоризонтальнаяЛицеваяСторона");
			ОбластьОборотная = Макет.ПолучитьОбласть("ГоризонтальнаяОборотнаяСторона");
		Иначе
			ОбластьЛицевая = Макет.ПолучитьОбласть("Лицевая");
			ОбластьОборотная = Макет.ПолучитьОбласть("Оборотная");
		КонецЕсли;
		
		ПечатьПрефиксовВключена = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ТекущийДокумент.Организация, ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ВыводитьПрефиксПриПечати"));
		Если ПечатьПрефиксовВключена Тогда
			НомерДляПечати = ТекущийДокумент.Номер;
		Иначе
			НомерДляПечати = уатОбщегоНазначенияКлиентСервер.НомерДокументаНаПечать(ТекущийДокумент.Номер, Истина, Истина);
		КонецЕсли;
			
		// лицевая
		Если ВариантПечатиНакладной = "ТранспортнаяНакладная2116" Тогда
			ОбластьЛицевая.Параметры.Пункт0_2 = ТекущийДокумент.Дата;
			ОбластьЛицевая.Параметры.Пункт0_3 = НомерДляПечати;
			ОбластьЛицевая.Параметры.Пункт0_5 = НомерДляПечати;

		ИначеЕсли ВариантПечатиНакладной = "ТранспортнаяНакладная2200" Тогда
			ОбластьЛицевая.Параметры.Пункт0_2 = ТекущийДокумент.Дата;
			ОбластьЛицевая.Параметры.Пункт0_3 = НомерДляПечати;
		Иначе
			ОбластьЛицевая.Параметры.НомерТТН = НомерДляПечати;
			ОбластьЛицевая.Параметры.Дата = ТекущийДокумент.Дата;
		КонецЕсли;
		
		МассивСтрок = Новый Массив;
		
		Если ВариантПечатиНакладной = "ТранспортнаяНакладная2200"
			ИЛИ ВариантПечатиНакладной = "ТранспортнаяНакладная2116" Тогда
			мГрузополучатель = уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(ТекущийДокумент.Грузополучатель, ТекущийДокумент.Дата), "ПолноеНаименование,ИНН,ЮридическийАдрес,Телефоны");
		Иначе
			мГрузополучатель = уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(ТекущийДокумент.Грузополучатель, ТекущийДокумент.Дата), "ПолноеНаименование,ЮридическийАдрес,Телефоны");
		КонецЕсли;
		
		Если ВариантПечатиНакладной = "ТранспортнаяНакладная2116" Тогда
			ОбластьЛицевая.Параметры.Пункт2_1 = мГрузополучатель;
		ИначеЕсли ВариантПечатиНакладной = "ТранспортнаяНакладная2200" Тогда
			МассивСтрок = уатОбщегоНазначенияТиповые.уатРазбитьСтрокуНаПодстроки(мГрузополучатель, 60);
			ОбластьЛицевая.Параметры.Пункт2_1 = МассивСтрок[0];
			Если МассивСтрок.Количество() > 1 Тогда
				ОбластьЛицевая.Параметры.Пункт2_2 = МассивСтрок[1];
			КонецЕсли;
		Иначе
			МассивСтрок = уатОбщегоНазначенияТиповые.уатРазбитьСтрокуНаПодстроки(мГрузополучатель, 42);
			ОбластьЛицевая.Параметры.ГрузополучательПредставление1 = МассивСтрок[0];
			Если МассивСтрок.Количество() > 1 Тогда
				ОбластьЛицевая.Параметры.ГрузополучательПредставление2 = МассивСтрок[1];
				Если МассивСтрок.Количество() > 2 Тогда
					ОбластьЛицевая.Параметры.ГрузополучательПредставление3 = МассивСтрок[2];
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ВариантПечатиНакладной = "ТранспортнаяНакладная2200"
			ИЛИ ВариантПечатиНакладной = "ТранспортнаяНакладная2116" Тогда
			мГрузоотправитель = уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(ТекущийДокумент.Грузоотправитель, ТекущийДокумент.Дата), "ПолноеНаименование,ИНН,ЮридическийАдрес,Телефоны");
		Иначе
			мГрузоотправитель = уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(ТекущийДокумент.Грузоотправитель, ТекущийДокумент.Дата), "ПолноеНаименование,ЮридическийАдрес,Телефоны");
		КонецЕсли;
		
		Если ВариантПечатиНакладной = "ТранспортнаяНакладная2116" Тогда
			ОбластьЛицевая.Параметры.Пункт1_1 = мГрузоотправитель;
		ИначеЕсли ВариантПечатиНакладной = "ТранспортнаяНакладная2200" Тогда
			МассивСтрок = уатОбщегоНазначенияТиповые.уатРазбитьСтрокуНаПодстроки(мГрузоотправитель, 60);
			ОбластьЛицевая.Параметры.Пункт1_1 = МассивСтрок[0];
			Если МассивСтрок.Количество() > 1 Тогда
				ОбластьЛицевая.Параметры.Пункт1_2 = МассивСтрок[1];
			КонецЕсли;
		Иначе
			МассивСтрок = уатОбщегоНазначенияТиповые.уатРазбитьСтрокуНаПодстроки(мГрузоотправитель, 42);
			ОбластьЛицевая.Параметры.ГрузоотправительПредставление1 = МассивСтрок[0];
			Если МассивСтрок.Количество() > 1 Тогда
				ОбластьЛицевая.Параметры.ГрузоотправительПредставление2 = МассивСтрок[1];
				Если МассивСтрок.Количество() > 2 Тогда
					ОбластьЛицевая.Параметры.ГрузоотправительПредставление3 = МассивСтрок[2];
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если (ВариантПечатиНакладной = "ТранспортнаяНакладная2200" 
			ИЛИ ВариантПечатиНакладной = "ТранспортнаяНакладная2116")
			И ТекущийДокумент.ВидОперации = Перечисления.уатВидыОперацийТТД.ПоМаршрутномуЛистуИЗаказу Тогда
			Если ТипЗнч(ТекущийДокумент.ЗаказГрузоотправителя.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
				ЗаказчикПеревозки = ТекущийДокумент.ЗаказГрузоотправителя.Контрагент;
			Иначе
				ЗаказчикПеревозки = ТекущийДокумент.ЗаказГрузоотправителя.Организация;
			КонецЕсли;
			ЗаказчикПеревозкиПредставление = уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(ЗаказчикПеревозки, ТекущийДокумент.Дата), "ПолноеНаименование,ИНН,ЮридическийАдрес,Телефоны");
			ОбластьЛицевая.Параметры.Пункт1а_1 = ЗаказчикПеревозкиПредставление;
		КонецЕсли;
		
		СтрокаГруза = "";
		СтоимостьГруза = 0;
		Если ТекущийДокумент.ВидОперации <> ПредопределенноеЗначение("Перечисление.уатВидыОперацийТТД.ПоМаршрутномуЛистуИЗаказу") Или ТекущийДокумент.Грузы.Количество() = 0 Тогда 
			Для Каждого СтрокаТаблицы Из ТекущийДокумент.Выработка Цикл
				Если ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
					СтрокаГруза = СтрокаГруза + СтрокаТаблицы.Номенклатура.Наименование;
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаТаблицы.КоличествоМест) Тогда
					Если СтрокаГруза = "" Тогда
						СтрокаГруза = Строка(СтрокаТаблицы.КоличествоМест) + " упак.";
					Иначе
						СтрокаГруза = СтрокаГруза + ", " + Строка(СтрокаТаблицы.КоличествоМест) + " упак.";
					КонецЕсли;
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаТаблицы.ВидУпаковки) Тогда
					СтрокаГруза = СтрокаГруза + " (" + СтрокаТаблицы.ВидУпаковки + ")";
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаТаблицы.КоличествоТонн) Тогда
					Если СтрокаГруза = "" Тогда
						СтрокаГруза = Строка(СтрокаТаблицы.КоличествоТонн*?(СтрокаТаблицы.КоличествоЕздок=0,1,СтрокаТаблицы.КоличествоЕздок)) + " т";
					Иначе
						СтрокаГруза = СтрокаГруза + ", " + Строка(СтрокаТаблицы.КоличествоТонн*?(СтрокаТаблицы.КоличествоЕздок=0,1,СтрокаТаблицы.КоличествоЕздок)) + " т";
					КонецЕсли;
				КонецЕсли;	
				СтрокаГруза = СтрокаГруза + "; ";
				СтоимостьГруза = СтоимостьГруза + СтрокаТаблицы.Сумма;
			КонецЦикла;
		Иначе
			СтрокаГруза = "";
			Для Каждого СтрокаТаблицы Из ТекущийДокумент.Грузы Цикл
				Если ЗначениеЗаполнено(СтрокаТаблицы.Груз) Тогда
					СтрокаГруза = СтрокаГруза + СтрокаТаблицы.Груз.Наименование;
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаТаблицы.КоличествоМест) Тогда
					Если СтрокаГруза = "" Тогда
						СтрокаГруза = Строка(СтрокаТаблицы.КоличествоМест) + " упак.";
					Иначе
						СтрокаГруза = СтрокаГруза + ", " + Строка(СтрокаТаблицы.КоличествоМест) + " упак.";
					КонецЕсли;
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаТаблицы.ВидУпаковки) Тогда
					СтрокаГруза = СтрокаГруза + " (" + СтрокаТаблицы.ВидУпаковки + ")";
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаТаблицы.КоличествоТонн) Тогда
					Если СтрокаГруза = "" Тогда
						СтрокаГруза = Строка(СтрокаТаблицы.КоличествоТонн) + " т";
					Иначе
						СтрокаГруза = СтрокаГруза + ", " + Строка(СтрокаТаблицы.КоличествоТонн) + " т";
					КонецЕсли;
				КонецЕсли;	
				СтрокаГруза = СтрокаГруза + "; ";
				СтоимостьГруза = СтоимостьГруза + СтрокаТаблицы.Сумма;
			КонецЦикла;
		КонецЕсли;
		
		МассивСтрок = уатОбщегоНазначенияТиповые.уатРазбитьСтрокуНаПодстроки(СтрокаГруза, 120);
		Сч = 0;
		Для Сч = 0 По МассивСтрок.Количество()-1 Цикл
			Если ВариантПечатиНакладной = "ТранспортнаяНакладная2200" 
				ИЛИ ВариантПечатиНакладной = "ТранспортнаяНакладная2116" Тогда
				ОбластьЛицевая.Параметры["Пункт3_"+Строка(Сч+1)] = МассивСтрок[Сч];
			Иначе
				ОбластьЛицевая.Параметры["НаименованиеГрузаПредставление"+Строка(Сч+1)] = МассивСтрок[Сч];
			КонецЕсли;
			Если Сч = 3 Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если (ВариантПечатиНакладной = "ТранспортнаяНакладная2200"
			ИЛИ ВариантПечатиНакладной = "ТранспортнаяНакладная2116") И ЗначениеЗаполнено(СтоимостьГруза) Тогда
			СтоимостьГрузаПредставление = СтрШаблон("%1 %2", СтоимостьГруза, ТекущийДокумент.ВалютаДокумента.Наименование);
			ОбластьЛицевая.Параметры.Пункт3_5 = СтоимостьГрузаПредставление;
		КонецЕсли;
		
		Если ВариантПечатиНакладной = "ТранспортнаяНакладная2200"
			ИЛИ ВариантПечатиНакладной = "ТранспортнаяНакладная2116" Тогда
			ОбластьЛицевая.Параметры.Пункт4_1   = ТекущийДокумент.ПереченьСопроводительныхДокументов;
			ОбластьЛицевая.Параметры.Пункт4_2   = ТекущийДокумент.ПереченьСопроводительныхСертификатов;
		Иначе
			ОбластьЛицевая.Параметры.СопрДокументы   = ТекущийДокумент.ПереченьСопроводительныхДокументов;
			ОбластьЛицевая.Параметры.СопрСертификаты = ТекущийДокумент.ПереченьСопроводительныхСертификатов;
		КонецЕсли;

		Если ВариантПечатиНакладной = "ТранспортнаяНакладная2116" Тогда
			ОбластьОборотная.Параметры.Пункт8_2  = ТекущийДокумент.АдресОтправления;
			ОбластьОборотная.Параметры.Пункт10_1 = ТекущийДокумент.АдресДоставки;

		ИначеЕсли ВариантПечатиНакладной = "ТранспортнаяНакладная2200" Тогда
			ОбластьЛицевая.Параметры.Пункт6_1  = ТекущийДокумент.АдресОтправления;
			ОбластьЛицевая.Параметры.Пункт7_1 = ТекущийДокумент.АдресДоставки;
		Иначе
			ОбластьЛицевая.Параметры.АдресПогрузкиПредставление  = ТекущийДокумент.АдресОтправления;
			ОбластьЛицевая.Параметры.АдресРазгрузкиПредставление = ТекущийДокумент.АдресДоставки;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущийДокумент.УполномоченноеЛицоГрузоотправителя) Тогда
			Если ВариантПечатиНакладной = "ТранспортнаяНакладная2116" Тогда
				ОбластьОборотная.Параметры.Пункт8_7 = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ТекущийДокумент.УполномоченноеЛицоГрузоотправителя.Наименование);
			ИначеЕсли ВариантПечатиНакладной = "ТранспортнаяНакладная2200" Тогда
				ОбластьЛицевая.Параметры.Пункт6_6   = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ТекущийДокумент.УполномоченноеЛицоГрузоотправителя.Наименование);
			Иначе
			    ОбластьЛицевая.Параметры.УполномоченноеЛицоГрузоотправителя   = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ТекущийДокумент.УполномоченноеЛицоГрузоотправителя.Наименование);
				ОбластьОборотная.Параметры.УполномоченноеЛицоГрузоотправителя = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ТекущийДокумент.УполномоченноеЛицоГрузоотправителя.Наименование);
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекущийДокумент.УполномоченноеЛицоГрузополучателя) Тогда
			Если ВариантПечатиНакладной = "ТранспортнаяНакладная2116" Тогда
				ОбластьОборотная.Параметры.Пункт10_8 = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ТекущийДокумент.УполномоченноеЛицоГрузополучателя.Наименование);
			ИначеЕсли ВариантПечатиНакладной = "ТранспортнаяНакладная2200" Тогда
				ОбластьЛицевая.Параметры.Пункт7_6  = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ТекущийДокумент.УполномоченноеЛицоГрузополучателя.Наименование);
			Иначе
				ОбластьЛицевая.Параметры.УполномоченноеЛицоГрузополучателя  = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ТекущийДокумент.УполномоченноеЛицоГрузополучателя.Наименование);
			КонецЕсли;
		КонецЕсли;
		Если ВариантПечатиНакладной = "ТранспортнаяНакладная2116" Тогда
			ПредставлениеВодителя = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ТекущийДокумент.Водитель);
			ОбластьОборотная.Параметры.Пункт8_8  = ПредставлениеВодителя;
			ОбластьОборотная.Параметры.Пункт10_9 = ПредставлениеВодителя;

		ИначеЕсли ВариантПечатиНакладной = "ТранспортнаяНакладная2200" Тогда
			ПредставлениеВодителя = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ТекущийДокумент.Водитель);
			ОбластьЛицевая.Параметры.Пункт6_7 = ПредставлениеВодителя;
			ОбластьЛицевая.Параметры.Пункт7_7 = ПредставлениеВодителя;
		Иначе
			ОбластьЛицевая.Параметры.Водитель = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ТекущийДокумент.Водитель);
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекущийДокумент.ЛицоПринявшееЗаказКИсполнению) Тогда
			Если ВариантПечатиНакладной = "ТранспортнаяНакладная2116" Тогда
			ИначеЕсли ВариантПечатиНакладной = "ТранспортнаяНакладная2200" Тогда
				ОбластьЛицевая.Параметры.Пункт9_2 = ТекущийДокумент.ЛицоПринявшееЗаказКИсполнению.Наименование;
			Иначе
				ОбластьЛицевая.Параметры.ЛицоПринявшееЗаказКИсполнению = ТекущийДокумент.ЛицоПринявшееЗаказКИсполнению.Наименование;
			КонецЕсли;
		КонецЕсли;
		
		Если ВариантПечатиНакладной = "ТранспортнаяНакладная2116" Тогда
			ПредставлениеПеревозчика = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ТекущийДокумент.УполномоченноеЛицоПеревозчика);
			ОбластьОборотная.Параметры.Пункт12_11 = ПредставлениеПеревозчика;
		ИначеЕсли ВариантПечатиНакладной = "ТранспортнаяНакладная2200" Тогда
			ПредставлениеПеревозчика = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ТекущийДокумент.УполномоченноеЛицоПеревозчика);
			ОбластьЛицевая.Параметры.Пункт6_8 = ПредставлениеПеревозчика;
			ОбластьЛицевая.Параметры.Пункт7_8 = ПредставлениеПеревозчика;
		Иначе
			ОбластьОборотная.Параметры.УполномоченноеЛицоПеревозчика = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ТекущийДокумент.УполномоченноеЛицоПеревозчика);
		КонецЕсли;
		
		// оборотная
		
		Если ТекущийДокумент.ВидОперации = Перечисления.уатВидыОперацийТТД.ПоПутевомуЛисту Тогда
			ТекущийПеревозчик = ТекущийДокумент.Организация;
		Иначе
			ТекущийПеревозчик = ТекущийДокумент.Перевозчик;
		КонецЕсли;
		
		Если ВариантПечатиНакладной = "ТранспортнаяНакладная2116" Тогда
			Перевозчик = уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(
				ТекущийПеревозчик, ТекущийДокумент.Дата), "НаименованиеДляПечатныхФорм,ИНН,ЮридическийАдрес,Телефоны");
			ОбластьЛицевая.Параметры.Пункт6_1 = Перевозчик;
			
		ИначеЕсли ВариантПечатиНакладной = "ТранспортнаяНакладная2200" Тогда
			Перевозчик = уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(
				ТекущийПеревозчик, ТекущийДокумент.Дата), "НаименованиеДляПечатныхФорм,ИНН,ЮридическийАдрес,Телефоны");
			МассивСтрок = уатОбщегоНазначенияТиповые.уатРазбитьСтрокуНаПодстроки(Перевозчик, 130);
			ОбластьОборотная.Параметры.Пункт10_1 = МассивСтрок[0];
			Если МассивСтрок.Количество() > 1 Тогда
				ОбластьОборотная.Параметры.Пункт10_2 = МассивСтрок[1];
			КонецЕсли;
		Иначе
			Перевозчик = уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(
				ТекущийПеревозчик, ТекущийДокумент.Дата), "НаименованиеДляПечатныхФорм,ЮридическийАдрес,Телефоны");
			МассивСтрок = уатОбщегоНазначенияТиповые.уатРазбитьСтрокуНаПодстроки(Перевозчик, 100);
			ОбластьОборотная.Параметры.ПеревозчикПредставление1 = МассивСтрок[0];
			Если МассивСтрок.Количество() > 1 Тогда
				ОбластьОборотная.Параметры.ПеревозчикПредставление2 = МассивСтрок[1];
			КонецЕсли;
		КонецЕсли;
		
		Если ТекущийДокумент.ВидОперации = Перечисления.уатВидыОперацийТТД.ПоПутевомуЛисту Тогда
			Если ВыработкаЗаполнена Тогда
				
				Водитель = уатОбщегоНазначения.уатФИОСотрудникаПолноеСтрокой(ПутЛист.Водитель1, ТекущийДокумент.Дата);
				Если ВариантПечатиНакладной = "ТранспортнаяНакладная2116" Тогда
					ОбластьЛицевая.Параметры.Пункт6_2 = Водитель;
				ИначеЕсли ВариантПечатиНакладной = "ТранспортнаяНакладная2200" Тогда
					ОбластьОборотная.Параметры.Пункт10_3 = Водитель;
				Иначе
					ОбластьОборотная.Параметры.ПеревозчикПредставление3 = Водитель;
				КонецЕсли;
				
				ФизЛицоВодителя = ПутЛист.Водитель1.ФизическоеЛицо;
				Если ВариантПечатиНакладной = "ТранспортнаяНакладная2116"
					И ЗначениеЗаполнено(ФизЛицоВодителя) И ЗначениеЗаполнено(ФизЛицоВодителя.ИНН) Тогда
					ОбластьЛицевая.Параметры.Пункт6_2 = ОбластьЛицевая.Параметры.Пункт6_2 + ", ИНН " + ФизЛицоВодителя.ИНН;

				ИначеЕсли ВариантПечатиНакладной = "ТранспортнаяНакладная2200" 
					И ЗначениеЗаполнено(ФизЛицоВодителя) И ЗначениеЗаполнено(ФизЛицоВодителя.ИНН) Тогда 
					ОбластьОборотная.Параметры.Пункт10_3 = ОбластьОборотная.Параметры.Пункт10_3 + ", ИНН " + ФизЛицоВодителя.ИНН;
				КонецЕсли;
				
				Запрос = Новый Запрос;
				Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	КонтактнаяИнформация.Представление
				|ИЗ
				|	Справочник.ФизическиеЛица.КонтактнаяИнформация КАК КонтактнаяИнформация
				|ГДЕ
				|	КонтактнаяИнформация.Ссылка = &Объект
				|	И КонтактнаяИнформация.Тип = &Тип";
				
				Запрос.УстановитьПараметр("Объект", ФизЛицоВодителя);
				Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Телефон);
				ТЗ = Запрос.Выполнить().Выгрузить();
				Если ТЗ.Количество() Тогда
					Если ВариантПечатиНакладной = "ТранспортнаяНакладная2116" Тогда
						ОбластьЛицевая.Параметры.Пункт6_2 = ОбластьЛицевая.Параметры.Пункт6_2 + ", тел. " + ТЗ[0].Представление;
					ИначеЕсли ВариантПечатиНакладной = "ТранспортнаяНакладная2200" Тогда
						ОбластьОборотная.Параметры.Пункт10_3 = ОбластьОборотная.Параметры.Пункт10_3 + ", тел. " + ТЗ[0].Представление;
					Иначе
						ОбластьОборотная.Параметры.ПеревозчикПредставление3 = ОбластьОборотная.Параметры.ПеревозчикПредставление3 + ", тел. " + ТЗ[0].Представление;
					КонецЕсли;
				КонецЕсли;
				
				СтрокаПредставлениеТС = Строка(ПутЛист.ТранспортноеСредство);
				СтрокаХарактеристикиТС = "Модель " + Строка(ПутЛист.ТранспортноеСредство.Модель);
				ГосНомерТС = Строка(ПутЛист.ТранспортноеСредство.ГосударственныйНомер);
				
				Для Каждого Прицеп Из ПутЛист.Прицепы Цикл
					Если Прицеп.ТС.ВидМоделиТС = Перечисления.уатВидыМоделейТС.Прицеп Тогда
						СтрокаПредставлениеТС = СтрокаПредставлениеТС + ", " + Строка(Прицеп.ТС);
						СтрокаХарактеристикиТС = СтрокаХарактеристикиТС + ", " + "Модель " + Строка(Прицеп.ТС.Модель); 
						ГосНомерТС = ГосНомерТС + ", " + Прицеп.ТС.ГосударственныйНомер;
					КонецЕсли;
				КонецЦикла;
				
				Если ВариантПечатиНакладной = "ТранспортнаяНакладная2116" Тогда
					ОбластьЛицевая.Параметры.Пункт7_1 = СтрокаХарактеристикиТС;
					ОбластьЛицевая.Параметры.Пункт7_2 = ГосНомерТС;
					
					ТипВладенияТС = ТекущийДокумент.ТипВладенияТС;
					
					Если ЗначениеЗаполнено(ТипВладенияТС) Тогда
						
						Если ТипВладенияТС = Перечисления.уатТипыВладенияТС.Собственность Тогда
							ОбластьЛицевая.Параметры.Пункт7_3 = 1;
						ИначеЕсли ТипВладенияТС = Перечисления.уатТипыВладенияТС.СовместнаяСобственностьСупругов Тогда
							ОбластьЛицевая.Параметры.Пункт7_3 = 2;
						ИначеЕсли ТипВладенияТС = Перечисления.уатТипыВладенияТС.Аренда Тогда
							ОбластьЛицевая.Параметры.Пункт7_3 = 3;
						ИначеЕсли ТипВладенияТС = Перечисления.уатТипыВладенияТС.Лизинг Тогда
							ОбластьЛицевая.Параметры.Пункт7_3 = 4;
						ИначеЕсли ТипВладенияТС = Перечисления.уатТипыВладенияТС.БезвозмездноеПользование Тогда
							ОбластьЛицевая.Параметры.Пункт7_3 = 5;
						КонецЕсли;
						
					КонецЕсли;
					
				ИначеЕсли ВариантПечатиНакладной = "ТранспортнаяНакладная2200" Тогда
					
					ОбластьОборотная.Параметры.Пункт11_1 = СтрокаХарактеристикиТС;
					ОбластьОборотная.Параметры.Пункт11_2 = ГосНомерТС;
					
					ТипВладенияТС = ТекущийДокумент.ТипВладенияТС;
					
					Если ЗначениеЗаполнено(ТипВладенияТС) Тогда
						
						Если ТипВладенияТС = Перечисления.уатТипыВладенияТС.Собственность Тогда
							ОбластьОборотная.Параметры.Пункт11_3 = 1;
						ИначеЕсли ТипВладенияТС = Перечисления.уатТипыВладенияТС.Аренда Тогда
							ОбластьОборотная.Параметры.Пункт11_3 = 2;
						ИначеЕсли ТипВладенияТС = Перечисления.уатТипыВладенияТС.Лизинг Тогда
							ОбластьОборотная.Параметры.Пункт11_3 = 3;
						КонецЕсли;
						
					КонецЕсли;
					
				Иначе
					МассивСтрок = уатОбщегоНазначенияТиповые.уатРазбитьСтрокуНаПодстроки(СтрокаПредставлениеТС, 35);
					Сч = 0;
					Для Сч = 0 По МассивСтрок.Количество()-1 Цикл
						ОбластьОборотная.Параметры["ТСПредставление"+Строка(Сч+1)] = МассивСтрок[Сч];
						Если Сч = 1 Тогда
							Прервать;
						КонецЕсли;
					КонецЦикла;
					МассивСтрок = уатОбщегоНазначенияТиповые.уатРазбитьСтрокуНаПодстроки(СтрокаХарактеристикиТС, 60);
					Сч = 0;
					Для Сч = 0 По МассивСтрок.Количество()-1 Цикл
						ОбластьОборотная.Параметры["ТСХарактеристикиПредставление"+Строка(Сч+1)] = МассивСтрок[Сч];
						Если Сч = 1 Тогда
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				
			КонецЕсли;
		ИначеЕсли ТекущийДокумент.ВидОперации = Перечисления.уатВидыОперацийТТД.ПоМаршрутномуЛистуИЗаказу Тогда
			Водитель = уатОбщегоНазначения.уатФИОСотрудникаПолноеСтрокой(ТекущийДокумент.Водитель, ТекущийДокумент.Дата);
			Если ВариантПечатиНакладной = "ТранспортнаяНакладная2116" Тогда
				ОбластьЛицевая.Параметры.Пункт6_2 = Водитель;
			ИначеЕсли ВариантПечатиНакладной = "ТранспортнаяНакладная2200" Тогда
				ОбластьОборотная.Параметры.Пункт10_3 = Водитель;
			Иначе
				ОбластьОборотная.Параметры.ПеревозчикПредставление3 = Водитель;
			КонецЕсли;
			
			Если ТипЗнч(ТекущийДокумент.Водитель) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
				ФизЛицоВодителя = ТекущийДокумент.Водитель;
			Иначе
				ФизЛицоВодителя = ТекущийДокумент.Водитель.ФизическоеЛицо;
			КонецЕсли;
			Если ВариантПечатиНакладной = "ТранспортнаяНакладная2116" 
				И ЗначениеЗаполнено(ФизЛицоВодителя) И ЗначениеЗаполнено(ФизЛицоВодителя.ИНН) Тогда 
				ОбластьЛицевая.Параметры.Пункт6_2 = ОбластьЛицевая.Параметры.Пункт6_2 + ", ИНН " + ФизЛицоВодителя.ИНН;
			ИначеЕсли ВариантПечатиНакладной = "ТранспортнаяНакладная2200" 
				И ЗначениеЗаполнено(ФизЛицоВодителя) И ЗначениеЗаполнено(ФизЛицоВодителя.ИНН) Тогда 
				ОбластьОборотная.Параметры.Пункт10_3 = ОбластьОборотная.Параметры.Пункт10_3 + ", ИНН " + ФизЛицоВодителя.ИНН;
			КонецЕсли;
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	КонтактнаяИнформация.Представление
			|ИЗ
			|	Справочник.ФизическиеЛица.КонтактнаяИнформация КАК КонтактнаяИнформация
			|ГДЕ
			|	КонтактнаяИнформация.Ссылка = &Объект
			|	И КонтактнаяИнформация.Тип = &Тип";
			
			Запрос.УстановитьПараметр("Объект", ФизЛицоВодителя);
			Запрос.УстановитьПараметр("Тип", Перечисления.ТипыКонтактнойИнформации.Телефон);
			ТЗ = Запрос.Выполнить().Выгрузить();
			Если ТЗ.Количество() Тогда
				Если ВариантПечатиНакладной = "ТранспортнаяНакладная2116" Тогда
					ОбластьЛицевая.Параметры.Пункт6_2 = ОбластьЛицевая.Параметры.Пункт6_2 + ", тел. " + ТЗ[0].Представление;
				ИначеЕсли ВариантПечатиНакладной = "ТранспортнаяНакладная2200" Тогда
					ОбластьОборотная.Параметры.Пункт10_3 = ОбластьОборотная.Параметры.Пункт10_3 + ", тел. " + ТЗ[0].Представление;
				Иначе
					ОбластьОборотная.Параметры.ПеревозчикПредставление3 = ОбластьОборотная.Параметры.ПеревозчикПредставление3 + ", тел. " + ТЗ[0].Представление;
				КонецЕсли;
			КонецЕсли;
			
			СтрокаПредставлениеТС = Строка(ТекущийДокумент.МаршрутныйЛист.ТС);
			СтрокаХарактеристикиТС = "Модель " + Строка(ТекущийДокумент.МаршрутныйЛист.ТС.Модель);
			ГосНомерТС = Строка(ТекущийДокумент.МаршрутныйЛист.ТС.ГосударственныйНомер);
			
			ВсеПрицепы = Новый Массив();
			Если ЗначениеЗаполнено(ТекущийДокумент.МаршрутныйЛист.Прицеп1) Тогда
				ВсеПрицепы.Добавить(ТекущийДокумент.МаршрутныйЛист.Прицеп1);
				ГосНомерТС = ГосНомерТС + ", " + ТекущийДокумент.МаршрутныйЛист.Прицеп1.ГосударственныйНомер; 
			КонецЕсли;
			Если ЗначениеЗаполнено(ТекущийДокумент.МаршрутныйЛист.Прицеп2) Тогда
				ВсеПрицепы.Добавить(ТекущийДокумент.МаршрутныйЛист.Прицеп2);
				ГосНомерТС = ГосНомерТС + ", " + ТекущийДокумент.МаршрутныйЛист.Прицеп2.ГосударственныйНомер;
			КонецЕсли;
			
			Для Каждого Прицеп Из ВсеПрицепы Цикл
				Если Прицеп.ВидМоделиТС = Перечисления.уатВидыМоделейТС.Прицеп Тогда
					СтрокаПредставлениеТС = СтрокаПредставлениеТС + ", " + Строка(Прицеп);
					СтрокаХарактеристикиТС = СтрокаХарактеристикиТС + ", " + "Модель " + Строка(Прицеп.Модель);
				КонецЕсли;
			КонецЦикла;
			
			Если ВариантПечатиНакладной = "ТранспортнаяНакладная2116" Тогда
				ОбластьЛицевая.Параметры.Пункт7_1 = СтрокаХарактеристикиТС;
				ОбластьЛицевая.Параметры.Пункт7_2 = ГосНомерТС;
				
				ТипВладенияТС = ТекущийДокумент.ТипВладенияТС;
				
				Если ЗначениеЗаполнено(ТипВладенияТС) Тогда
					
					Если ТипВладенияТС = Перечисления.уатТипыВладенияТС.Собственность Тогда
						ОбластьЛицевая.Параметры.Пункт7_3 = 1;
					ИначеЕсли ТипВладенияТС = Перечисления.уатТипыВладенияТС.СовместнаяСобственностьСупругов Тогда
						ОбластьЛицевая.Параметры.Пункт7_3 = 2;
					ИначеЕсли ТипВладенияТС = Перечисления.уатТипыВладенияТС.Аренда Тогда
						ОбластьЛицевая.Параметры.Пункт7_3 = 3;
					ИначеЕсли ТипВладенияТС = Перечисления.уатТипыВладенияТС.Лизинг Тогда
						ОбластьЛицевая.Параметры.Пункт7_3 = 4;
					ИначеЕсли ТипВладенияТС = Перечисления.уатТипыВладенияТС.БезвозмездноеПользование Тогда
						ОбластьЛицевая.Параметры.Пункт7_3 = 5;
					КонецЕсли;

				КонецЕсли;

			ИначеЕсли ВариантПечатиНакладной = "ТранспортнаяНакладная2200" Тогда
				ОбластьОборотная.Параметры.Пункт11_1 = СтрокаХарактеристикиТС;
				ОбластьОборотная.Параметры.Пункт11_2 = ГосНомерТС;
				
				ТипВладенияТС = ТекущийДокумент.ТипВладенияТС;
				
				Если ЗначениеЗаполнено(ТипВладенияТС) Тогда
					
					Если ТипВладенияТС = Перечисления.уатТипыВладенияТС.Собственность Тогда
						ОбластьОборотная.Параметры.Пункт11_3 = 1;
					ИначеЕсли ТипВладенияТС = Перечисления.уатТипыВладенияТС.Аренда Тогда
						ОбластьОборотная.Параметры.Пункт11_3 = 2;
					ИначеЕсли ТипВладенияТС = Перечисления.уатТипыВладенияТС.Лизинг Тогда
						ОбластьОборотная.Параметры.Пункт11_3 = 3;
					КонецЕсли;
					
				КонецЕсли;
			Иначе
				МассивСтрок = уатОбщегоНазначенияТиповые.уатРазбитьСтрокуНаПодстроки(СтрокаПредставлениеТС, 35);
				Сч = 0;
				Для Сч = 0 По МассивСтрок.Количество()-1 Цикл
					ОбластьОборотная.Параметры["ТСПредставление"+Строка(Сч+1)] = МассивСтрок[Сч];
					Если Сч = 1 Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				МассивСтрок = уатОбщегоНазначенияТиповые.уатРазбитьСтрокуНаПодстроки(СтрокаХарактеристикиТС, 60);
				Сч = 0;
				Для Сч = 0 По МассивСтрок.Количество()-1 Цикл
					ОбластьОборотная.Параметры["ТСХарактеристикиПредставление"+Строка(Сч+1)] = МассивСтрок[Сч];
					Если Сч = 1 Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		
		СтоимостьУслугПеревозки = ?(ТекущийДокумент.ВидОперации = Перечисления.уатВидыОперацийТТД.ПоПутевомуЛисту, ТекущийДокумент.Стоимость.Итог("Сумма"), ТекущийДокумент.СтоимостьПеревозки);
		Если ТекущийДокумент.ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
			СтоимостьУслугПеревозкиПредставление = СтоимостьУслугПеревозки;
		Иначе
			КурсВалютыДокумента = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ТекущийДокумент.ВалютаДокумента, ТекущийДокумент.Дата);												 
			СтоимостьВРублях =  уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(СтоимостьУслугПеревозки, мВалютаРегламентированногоУчета,
				ТекущийДокумент.ВалютаДокумента, КурсВалютыДокумента.Курс, 1, КурсВалютыДокумента.Кратность, 1); 																					 
			СтоимостьУслугПеревозкиПредставление = СтоимостьВРублях;
		КонецЕсли;
		
		Если ВариантПечатиНакладной = "ТранспортнаяНакладная2116" Тогда
			ОбластьОборотная.Параметры.Пункт12_4 = СтоимостьУслугПеревозкиПредставление;
		ИначеЕсли ВариантПечатиНакладной = "ТранспортнаяНакладная2200" Тогда
			ОбластьОборотная.Параметры.Пункт15_1 = СтоимостьУслугПеревозкиПредставление;
		Иначе
			ОбластьОборотная.Параметры.СтоимостьПредставление = СтоимостьУслугПеревозкиПредставление;
		КонецЕсли;
		
		Если ВариантПечатиНакладной = "ТранспортнаяНакладная2116" Тогда
			 // Перевозчик 
			 Перевозчик = уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(
				ТекущийПеревозчик, ТекущийДокумент.Дата), "НаименованиеДляПечатныхФорм,ИНН,ЮридическийАдрес");
			МассивСтрок = уатОбщегоНазначенияТиповые.уатРазбитьСтрокуНаПодстроки(Перевозчик, 130);
			ОбластьОборотная.Параметры.пункт12_6  = МассивСтрок[0];

			// Грузоотправитель
			мГрузоотправитель = уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(ТекущийДокумент.Грузоотправитель, ТекущийДокумент.Дата), "НаименованиеДляПечатныхФорм,ИНН,ЮридическийАдрес");
			МассивСтрок = уатОбщегоНазначенияТиповые.уатРазбитьСтрокуНаПодстроки(мГрузоотправитель, 130);
			ОбластьОборотная.Параметры.пункт12_7  = МассивСтрок[0];
			
		ИначеЕсли ВариантПечатиНакладной = "ТранспортнаяНакладная2200" Тогда
			
			// Перевозчик - Пункт 16_2_16_6
			Перевозчик = уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(
				ТекущийПеревозчик, ТекущийДокумент.Дата), "НаименованиеДляПечатныхФорм,ИНН,ЮридическийАдрес");
			МассивСтрок = уатОбщегоНазначенияТиповые.уатРазбитьСтрокуНаПодстроки(Перевозчик, 130);
			ОбластьОборотная.Параметры.Пункт16_2 = МассивСтрок[0];
			ОбластьОборотная.Параметры.Пункт16_6 = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ТекущийДокумент.УполномоченноеЛицоПеревозчика.Наименование);
									
			// Грузоотправитель - Пункт 16_1_16_5
			мГрузоотправитель = уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(ТекущийДокумент.Грузоотправитель, ТекущийДокумент.Дата), "НаименованиеДляПечатныхФорм,ИНН,ЮридическийАдрес");
			МассивСтрок = уатОбщегоНазначенияТиповые.уатРазбитьСтрокуНаПодстроки(мГрузоотправитель, 130);
			ОбластьОборотная.Параметры.Пункт16_1 = МассивСтрок[0];
			ОбластьОборотная.Параметры.Пункт16_5 = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ТекущийДокумент.УполномоченноеЛицоГрузоотправителя.Наименование);
						
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьЛицевая);
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		ТабличныйДокумент.Вывести(ОбластьОборотная);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ТекущийДокумент);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатнаяФорма()

Функция ПечатьЗаказНаряда(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_ЗаказНаряд";
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.УстановитьПараметр("Ссылка", МассивОбъектов);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатТТД.Дата КАК Дата,
	|	уатТТД.Организация КАК Организация,
	|	уатТТД.Перевозчик КАК Перевозчик,
	|	уатТТД.ВидОперации КАК ВидОперации,
	|	уатТТД.Контрагент КАК Контрагент,
	|	ЕСТЬNULL(уатТТДСтоимость.ПутЛист, ЗНАЧЕНИЕ(Документ.уатПутевойЛист.ПустаяСсылка)) КАК ПутЛист,
	|	ЕСТЬNULL(уатТТДСтоимость.Маршрут, ЗНАЧЕНИЕ(Справочник.уатМаршруты.ПустаяСсылка)) КАК Маршрут,
	|	ЕСТЬNULL(уатТТДСтоимость.ПараметрВыработки, ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ПустаяСсылка)) КАК ПараметрВыработки,
	|	ЕСТЬNULL(уатТТДСтоимость.Цена, 0) КАК Цена,
	|	ЕСТЬNULL(уатТТДСтоимость.Сумма, 0) + ВЫБОР
	|		КОГДА НЕ уатТТД.УчитыватьНДС
	|				ИЛИ уатТТД.СуммаВключаетНДС
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(уатТТДСтоимость.СуммаНДС, 0)
	|	КОНЕЦ КАК Всего,
	|	уатТТД.Ссылка КАК Ссылка,
	|	уатТТД.ВалютаДокумента КАК ВалютаДокумента,
	|	уатТТД.МаршрутныйЛист КАК МаршрутныйЛист
	|ПОМЕСТИТЬ ВРТ_ТТД
	|ИЗ
	|	Документ.уатТТД КАК уатТТД
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатТТД.Стоимость КАК уатТТДСтоимость
	|		ПО (уатТТДСтоимость.Ссылка = уатТТД.Ссылка)
	|ГДЕ
	|	уатТТД.Ссылка В(&Ссылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПутЛист
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатПутевойЛистЗадание.АдресПрибытия КАК АдресПрибытия,
	|	уатПутевойЛистЗадание.ВремяПрибытия КАК ВремяПрибытия,
	|	уатПутевойЛистЗадание.ВремяУбытия КАК ВремяУбытия,
	|	уатПутевойЛистЗадание.КоличествоПассажиров КАК КоличествоПассажиров,
	|	уатПутевойЛистЗадание.Маршрут КАК Маршрут,
	|	уатПутевойЛистЗадание.Подача КАК Подача,
	|	уатПутевойЛист.Ссылка КАК ПутЛист,
	|	уатПутевойЛист.Водитель1 КАК Водитель,
	|	уатПутевойЛист.ВыдалДиспетчер КАК Диспетчер,
	|	уатПутевойЛист.ДатаВозвращения КАК ДатаВозвращения,
	|	уатПутевойЛист.ДатаВыезда КАК ДатаВыезда,
	|	уатПутевойЛист.ТранспортноеСредство.ГосударственныйНомер КАК ГосударственныйНомер,
	|	уатПутевойЛист.ТранспортноеСредство.Модель.Наименование КАК НаименованиеМодели,
	|	уатПутевойЛист.СпидометрВыезда КАК СпидометрВыезда,
	|	уатПутевойЛист.СпидометрВозвращения КАК СпидометрВозвращения
	|ИЗ
	|	Документ.уатПутевойЛист.Задание КАК уатПутевойЛистЗадание
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатПутевойЛист КАК уатПутевойЛист
	|		ПО уатПутевойЛистЗадание.Ссылка = уатПутевойЛист.Ссылка
	|ГДЕ
	|	уатПутевойЛистЗадание.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТ.ПутЛист
	|			ИЗ
	|				ВРТ_ТТД КАК ВТ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатПутевойЛист.Ссылка КАК ПутЛист,
	|	уатПутевойЛист.Водитель1 КАК Водитель,
	|	уатПутевойЛист.ВыдалДиспетчер КАК Диспетчер,
	|	уатПутевойЛист.ДатаВозвращения КАК ДатаВозвращения,
	|	уатПутевойЛист.ДатаВыезда КАК ДатаВыезда,
	|	уатПутевойЛист.ТранспортноеСредство.ГосударственныйНомер КАК ГосударственныйНомер,
	|	уатПутевойЛист.ТранспортноеСредство.Модель.Наименование КАК НаименованиеМодели,
	|	уатПутевойЛист.СпидометрВыезда КАК СпидометрВыезда,
	|	уатПутевойЛист.СпидометрВозвращения КАК СпидометрВозвращения
	|ИЗ
	|	Документ.уатПутевойЛист КАК уатПутевойЛист
	|ГДЕ
	|	уатПутевойЛист.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТ.ПутЛист
	|			ИЗ
	|				ВРТ_ТТД КАК ВТ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВРТ_ТТД.Дата КАК Дата,
	|	ВРТ_ТТД.Организация КАК Организация,
	|	ВРТ_ТТД.Контрагент КАК Контрагент,
	|	ВРТ_ТТД.ПутЛист КАК ПутЛист,
	|	ВРТ_ТТД.Маршрут КАК Маршрут,
	|	ВРТ_ТТД.ПараметрВыработки КАК ПараметрВыработки,
	|	ВРТ_ТТД.Цена КАК Цена,
	|	ВРТ_ТТД.Всего КАК Всего,
	|	ВРТ_ТТД.ВалютаДокумента КАК ВалютаДокумента,
	|	ВРТ_ТТД.Перевозчик КАК Перевозчик,
	|	ВРТ_ТТД.ВидОперации КАК ВидОперации,
	|	ВРТ_ТТД.МаршрутныйЛист КАК МаршрутныйЛист,
	|	ВРТ_ТТД.Ссылка КАК Ссылка
	|ИЗ
	|	ВРТ_ТТД КАК ВРТ_ТТД
	|ИТОГИ
	|	МАКСИМУМ(Дата),
	|	МАКСИМУМ(Организация),
	|	МАКСИМУМ(Контрагент),
	|	МАКСИМУМ(ВалютаДокумента),
	|	МАКСИМУМ(Перевозчик),
	|	МАКСИМУМ(ВидОперации),
	|	МАКСИМУМ(МаршрутныйЛист)
	|ПО
	|	Ссылка,
	|	ПутЛист,
	|	Маршрут
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатТТДВыработка.ПутЛист КАК ПутЛист,
	|	уатТТДВыработка.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.уатТТД.Выработка КАК уатТТДВыработка
	|ГДЕ
	|	уатТТДВыработка.Ссылка В(&Ссылка)";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТабПЛЗадания = РезультатЗапроса[1].Выгрузить();
	ТабПЛ        = РезультатЗапроса[2].Выгрузить();
	ТабПЛОсновной  = РезультатЗапроса[4].Выгрузить();

	ПервыйДокумент = Истина;
	
	ВыборкаДокументыТТД = РезультатЗапроса[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаДокументыТТД.Следующий() Цикл 
		ВыборкаДокументыПЛ = ВыборкаДокументыТТД.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаДокументыПЛ.Следующий() Цикл 
			ВыборкаМаршруты = ВыборкаДокументыПЛ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаМаршруты.Следующий() Цикл 
				Если Не ПервыйДокумент Тогда
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				КонецЕсли;
				НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
				
				ПервыйДокумент = Ложь;
				
				ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗАКАЗНАРЯД";
				Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.уатТТД.ПФ_MXL_ЗаказНаряд");
				
				ОбластьЛицевая = Макет.ПолучитьОбласть("Лицевая");
				
				ПараметрыМакета = Новый Структура();
				
				ПараметрыМакета.Вставить("ДатаДокумента", Формат(ВыборкаМаршруты.Дата, "ДФ='dd MMMM yyyy ''г.'''"));
				
				Если ВыборкаМаршруты.ВидОперации = Перечисления.уатВидыОперацийТТД.ПоПутевомуЛисту Тогда
					ПараметрыМакета.Вставить("Фрахтовщик", уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(
						уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(
							ВыборкаМаршруты.Организация, 
							ВыборкаМаршруты.Дата)));
				Иначе
					ПараметрыМакета.Вставить("Фрахтовщик", уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(
						уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(
							ВыборкаМаршруты.Перевозчик, 
							ВыборкаМаршруты.Дата)));
				КонецЕсли;
						
				ПараметрыМакета.Вставить("Фрахтователь", уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(
					уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(
						ВыборкаМаршруты.Контрагент, 
						ВыборкаМаршруты.Дата)));
				
				СтрокиЗадания = ТабПЛЗадания.НайтиСтроки(Новый Структура("ПутЛист, Маршрут", ВыборкаМаршруты.ПутЛист, ВыборкаМаршруты.Маршрут));
				Если СтрокиЗадания.Количество() > 0 Тогда 
					ПараметрыМакета.Вставить("МодельТС",          СтрокиЗадания[0].НаименованиеМодели);
					ПараметрыМакета.Вставить("ГосНомер",          СтрокиЗадания[0].ГосударственныйНомер);
					ПараметрыМакета.Вставить("ФИОВодителя",       уатОбщегоНазначения.уатФИОСотрудникаПолноеСтрокой(СтрокиЗадания[0].Водитель, ВыборкаМаршруты.Дата));
					ПараметрыМакета.Вставить("ДатаПодачи",        Формат(ВыборкаМаршруты.Дата, "ДФ='dd MMMM yyyy ''г.'''"));
					ПараметрыМакета.Вставить("Маршрут",           СтрокиЗадания[0].Маршрут.Наименование);
					ПараметрыМакета.Вставить("Адрес",             СтрокиЗадания[0].АдресПрибытия);
					ПараметрыМакета.Вставить("ВремяВыезда",       Формат(СтрокиЗадания[0].ДатаВыезда, "ДФ='''в'' HH ''час.'' mm ''мин.'''"));
					ПараметрыМакета.Вставить("СпидометрВыезда",   Формат(СтрокиЗадания[0].СпидометрВыезда, "ЧН=0; ЧГ=0"));
					ПараметрыМакета.Вставить("ФИОДиспетчера",     уатОбщегоНазначения.уатФИОСотрудникаПолноеСтрокой(СтрокиЗадания[0].Диспетчер, ВыборкаМаршруты.Дата));
					ПараметрыМакета.Вставить("ВремяПрибытия",     Формат(СтрокиЗадания[0].ВремяПрибытия, "ДФ='HH ''час.'' mm ''мин.'''"));
					ПараметрыМакета.Вставить("ВремяУбытия",       Формат(СтрокиЗадания[0].ВремяУбытия, "ДФ='HH ''час.'' mm ''мин.'''"));
					ПараметрыМакета.Вставить("ПеревезеноЧеловек", "" + Формат(СтрокиЗадания[0].КоличествоПассажиров, "ЧН=0; ЧГ=0") + " чел.");
					ПараметрыМакета.Вставить("ВремяВозврата",     Формат(СтрокиЗадания[0].ДатаВозвращения, "ДФ='''в'' HH ''час.'' mm ''мин.'''"));
					ПараметрыМакета.Вставить("СпидометрВозврата", Формат(СтрокиЗадания[0].СпидометрВозвращения, "ЧН=0; ЧГ=0"));
					
				Иначе 
					СтрокиЗадания = ТабПЛЗадания.НайтиСтроки(Новый Структура("ПутЛист", ВыборкаМаршруты.ПутЛист));
					Если СтрокиЗадания.Количество() > 0 Тогда 
						ПараметрыМакета.Вставить("МодельТС",          СтрокиЗадания[0].НаименованиеМодели);
						ПараметрыМакета.Вставить("ГосНомер",          СтрокиЗадания[0].ГосударственныйНомер);
						ПараметрыМакета.Вставить("ФИОВодителя",       уатОбщегоНазначения.уатФИОСотрудникаПолноеСтрокой(СтрокиЗадания[0].Водитель, ВыборкаМаршруты.Дата));
						ПараметрыМакета.Вставить("ДатаПодачи",        Формат(ВыборкаМаршруты.Дата, "ДФ='dd MMMM yyyy ''г.'''"));
						ПараметрыМакета.Вставить("Маршрут",           СтрокиЗадания[0].Маршрут.Наименование);
						ПараметрыМакета.Вставить("Адрес",             СтрокиЗадания[0].АдресПрибытия);
						ПараметрыМакета.Вставить("ВремяВыезда",       Формат(СтрокиЗадания[0].ДатаВыезда, "ДФ='''в'' HH ''час.'' mm ''мин.'''"));
						ПараметрыМакета.Вставить("СпидометрВыезда",   Формат(СтрокиЗадания[0].СпидометрВыезда, "ЧН=0; ЧГ=0"));
						ПараметрыМакета.Вставить("ФИОДиспетчера",     уатОбщегоНазначения.уатФИОСотрудникаПолноеСтрокой(СтрокиЗадания[0].Диспетчер, ВыборкаМаршруты.Дата));
						ПараметрыМакета.Вставить("ВремяПрибытия",     Формат(СтрокиЗадания[0].ВремяПрибытия, "ДФ='HH ''час.'' mm ''мин.'''"));
						ПараметрыМакета.Вставить("ВремяУбытия",       Формат(СтрокиЗадания[0].ВремяУбытия, "ДФ='HH ''час.'' mm ''мин.'''"));
						ПараметрыМакета.Вставить("ПеревезеноЧеловек", "" + Формат(СтрокиЗадания[0].КоличествоПассажиров, "ЧН=0; ЧГ=0") + " чел.");
						ПараметрыМакета.Вставить("ВремяВозврата",     Формат(СтрокиЗадания[0].ДатаВозвращения, "ДФ='''в'' HH ''час.'' mm ''мин.'''"));
						ПараметрыМакета.Вставить("СпидометрВозврата", Формат(СтрокиЗадания[0].СпидометрВозвращения, "ЧН=0; ЧГ=0"));
					Иначе 
						СтрокиПЛ = ТабПЛ.НайтиСтроки(Новый Структура("ПутЛист", ВыборкаМаршруты.ПутЛист));
						Если СтрокиПЛ.Количество() > 0 Тогда 
							ПараметрыМакета.Вставить("МодельТС",          СтрокиПЛ[0].НаименованиеМодели);
							ПараметрыМакета.Вставить("ГосНомер",          СтрокиПЛ[0].ГосударственныйНомер);
							ПараметрыМакета.Вставить("ФИОВодителя",       уатОбщегоНазначения.уатФИОСотрудникаПолноеСтрокой(СтрокиПЛ[0].Водитель, ВыборкаМаршруты.Дата));
							ПараметрыМакета.Вставить("ДатаПодачи",        Формат(ВыборкаМаршруты.Дата, "ДФ='dd MMMM yyyy ''г.'''"));
							ПараметрыМакета.Вставить("Маршрут",           ВыборкаМаршруты.Маршрут.Наименование);
							ПараметрыМакета.Вставить("ВремяВыезда",       Формат(СтрокиПЛ[0].ДатаВыезда, "ДФ='''в'' HH ''час.'' mm ''мин.'''"));
							ПараметрыМакета.Вставить("СпидометрВыезда",   Формат(СтрокиПЛ[0].СпидометрВыезда, "ЧН=0; ЧГ=0"));
							ПараметрыМакета.Вставить("ФИОДиспетчера",     уатОбщегоНазначения.уатФИОСотрудникаПолноеСтрокой(СтрокиПЛ[0].Диспетчер, ВыборкаМаршруты.Дата));
							ПараметрыМакета.Вставить("ВремяВозврата",     Формат(СтрокиПЛ[0].ДатаВозвращения, "ДФ='''в'' HH ''час.'' mm ''мин.'''"));
							ПараметрыМакета.Вставить("СпидометрВозврата", Формат(СтрокиПЛ[0].СпидометрВозвращения, "ЧН=0; ЧГ=0"));
						Иначе
							Если ЗначениеЗаполнено(ВыборкаДокументыТТД.МаршрутныйЛист) Тогда
								МаршрутныйЛист = ВыборкаДокументыТТД.МаршрутныйЛист;
								ПараметрыМакета.Вставить("МодельТС",          МаршрутныйЛист.ТС.Модель.Наименование);
								ПараметрыМакета.Вставить("ГосНомер",          МаршрутныйЛист.ТС.ГосударственныйНомер);
								ПараметрыМакета.Вставить("ФИОВодителя",       уатОбщегоНазначения.уатФИОСотрудникаПолноеСтрокой(МаршрутныйЛист.Водитель1, ВыборкаМаршруты.Дата));
								ПараметрыМакета.Вставить("ДатаПодачи",        Формат(ВыборкаМаршруты.Дата, "ДФ='dd MMMM yyyy ''г.'''"));
								ПараметрыМакета.Вставить("Маршрут",           МаршрутныйЛист.Маршрут.Наименование);
								ПараметрыМакета.Вставить("ВремяВыезда",       Формат(МаршрутныйЛист.ДатаИВремяОтправления, "ДФ='''в'' HH ''час.'' mm ''мин.'''"));
							Иначе
								тчТабПЛОсновной = ТабПЛОсновной.НайтиСтроки(Новый Структура("Ссылка", ВыборкаДокументыТТД.Ссылка));
								Если тчТабПЛОсновной.Количество() > 0 Тогда
									ПутЛист = тчТабПЛОсновной[0].ПутЛист;
									ПараметрыМакета.Вставить("МодельТС",          ПутЛист.ТранспортноеСредство.Модель.Наименование);
									ПараметрыМакета.Вставить("ГосНомер",          ПутЛист.ТранспортноеСредство.ГосударственныйНомер);
									ПараметрыМакета.Вставить("ФИОВодителя",       уатОбщегоНазначения.уатФИОСотрудникаПолноеСтрокой(ПутЛист.Водитель1, ВыборкаМаршруты.Дата));
									ПараметрыМакета.Вставить("ДатаПодачи",        Формат(ВыборкаМаршруты.Дата, "ДФ='dd MMMM yyyy ''г.'''"));
									ПараметрыМакета.Вставить("Маршрут",           ВыборкаМаршруты.Маршрут.Наименование);
									ПараметрыМакета.Вставить("ВремяВыезда",       Формат(ПутЛист.ДатаВыезда, "ДФ='''в'' HH ''час.'' mm ''мин.'''"));
									ПараметрыМакета.Вставить("СпидометрВыезда",   Формат(ПутЛист.СпидометрВыезда, "ЧН=0; ЧГ=0"));
									ПараметрыМакета.Вставить("ФИОДиспетчера",     уатОбщегоНазначения.уатФИОСотрудникаПолноеСтрокой(ПутЛист.ВыдалДиспетчер, ВыборкаМаршруты.Дата));
									ПараметрыМакета.Вставить("ВремяВозврата",     Формат(ПутЛист.ДатаВозвращения, "ДФ='''в'' HH ''час.'' mm ''мин.'''"));
									ПараметрыМакета.Вставить("СпидометрВозврата", Формат(ПутЛист.СпидометрВозвращения, "ЧН=0; ЧГ=0"));
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если ВыборкаМаршруты.Ссылка.ВидОперации = Перечисления.уатВидыОперацийТТД.ПоПутевомуЛисту Тогда
					
					СуммаДокумента = 0;
					ВыборкаСтоимость = ВыборкаМаршруты.Выбрать();
					Пока ВыборкаСтоимость.Следующий() Цикл 
						Если ВыборкаСтоимость.ПараметрВыработки = Справочники.уатПараметрыВыработки.ПробегОбщий Тогда 
							ПараметрыМакета.Вставить("ТарифЗаКМПробега", Формат(ВыборкаСтоимость.Цена, "ЧДЦ=2; ЧРД=,; ЧН=0,00; ЧГ=0") + " " + ВыборкаМаршруты.ВалютаДокумента + "/км");
							СуммаДокумента = СуммаДокумента + ВыборкаСтоимость.Всего;
						ИначеЕсли ВыборкаСтоимость.ПараметрВыработки = Справочники.уатПараметрыВыработки.ВремяВРаботе Тогда 
							ПараметрыМакета.Вставить("ТарифЗаЧасРаботы", Формат(ВыборкаСтоимость.Цена, "ЧДЦ=2; ЧРД=,; ЧН=0,00; ЧГ=0") + " " + ВыборкаМаршруты.ВалютаДокумента + "/час");
							СуммаДокумента = СуммаДокумента + ВыборкаСтоимость.Всего;
						КонецЕсли;
					КонецЦикла;
				Иначе
					СуммаДокумента = ВыборкаМаршруты.Ссылка.СтоимостьПеревозки;
				КонецЕсли;
				
				ПараметрыМакета.Вставить("ВсегоПоДокументу", Формат(СуммаДокумента, "ЧДЦ=2; ЧРД=,; ЧН=0,00; ЧГ=0") + " " + ВыборкаМаршруты.ВалютаДокумента);
				
				ЗаполнитьЗначенияСвойств(ОбластьЛицевая.Параметры, ПараметрыМакета);
				ТабличныйДокумент.Вывести(ОбластьЛицевая);
				УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаДокументыТТД.Ссылка);
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	МенеджерВТ.Закрыть();
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатьЗаказНаряда()

Функция ПечатьЗаказНарядаГрузы(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_ЗаказНарядГрузы";
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц;
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.УстановитьПараметр("Ссылка", МассивОбъектов);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатТТД.Номер КАК Номер,
	|	уатТТД.Дата КАК Дата,
	|	уатТТД.Организация КАК Организация,
	|	уатТТД.Перевозчик КАК Перевозчик,
	|	уатТТД.ВидОперации КАК ВидОперации,
	|	уатТТД.Контрагент КАК Контрагент,
	|	ЕСТЬNULL(уатТТДСтоимость.ПутЛист, ЗНАЧЕНИЕ(Документ.уатПутевойЛист.ПустаяСсылка)) КАК ПутЛист,
	|	ЕСТЬNULL(уатТТДСтоимость.Маршрут, ЗНАЧЕНИЕ(Справочник.уатМаршруты.ПустаяСсылка)) КАК Маршрут,
	|	ЕСТЬNULL(уатТТДСтоимость.Сумма, 0) + ВЫБОР
	|		КОГДА НЕ уатТТД.УчитыватьНДС
	|				ИЛИ уатТТД.СуммаВключаетНДС
	|			ТОГДА 0
	|		ИНАЧЕ ЕСТЬNULL(уатТТДСтоимость.СуммаНДС, 0)
	|	КОНЕЦ КАК Всего,
	|	уатТТД.Ссылка КАК Ссылка,
	|	уатТТД.ВалютаДокумента КАК ВалютаДокумента,
	|	уатТТД.МаршрутныйЛист КАК МаршрутныйЛист
	|ПОМЕСТИТЬ ВРТ_ТТД
	|ИЗ
	|	Документ.уатТТД КАК уатТТД
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатТТД.Стоимость КАК уатТТДСтоимость
	|		ПО (уатТТДСтоимость.Ссылка = уатТТД.Ссылка)
	|ГДЕ
	|	уатТТД.Ссылка В(&Ссылка)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ПутЛист
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатПутевойЛистЗадание.АдресПрибытия КАК АдресПрибытия,
	|	уатПутевойЛистЗадание.Маршрут КАК Маршрут,
	|	уатПутевойЛистЗадание.Подача КАК Подача,
	|	уатПутевойЛист.Ссылка КАК ПутЛист,
	|	уатПутевойЛист.Водитель1 КАК Водитель,
	|	уатПутевойЛист.ТранспортноеСредство.ГосударственныйНомер КАК ГосударственныйНомер,
	|	уатПутевойЛист.ТранспортноеСредство.Модель.Наименование КАК НаименованиеМодели
	|ИЗ
	|	Документ.уатПутевойЛист.Задание КАК уатПутевойЛистЗадание
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатПутевойЛист КАК уатПутевойЛист
	|		ПО уатПутевойЛистЗадание.Ссылка = уатПутевойЛист.Ссылка
	|ГДЕ
	|	уатПутевойЛистЗадание.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТ.ПутЛист
	|			ИЗ
	|				ВРТ_ТТД КАК ВТ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатПутевойЛист.Ссылка КАК ПутЛист,
	|	уатПутевойЛист.Водитель1 КАК Водитель,
	|	уатПутевойЛист.ТранспортноеСредство.ГосударственныйНомер КАК ГосударственныйНомер,
	|	уатПутевойЛист.ТранспортноеСредство.Модель.Наименование КАК НаименованиеМодели
	|ИЗ
	|	Документ.уатПутевойЛист КАК уатПутевойЛист
	|ГДЕ
	|	уатПутевойЛист.Ссылка В
	|			(ВЫБРАТЬ
	|				ВТ.ПутЛист
	|			ИЗ
	|				ВРТ_ТТД КАК ВТ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВРТ_ТТД.Номер КАК Номер,
	|	ВРТ_ТТД.Дата КАК Дата,
	|	ВРТ_ТТД.Организация КАК Организация,
	|	ВРТ_ТТД.Контрагент КАК Контрагент,
	|	ВРТ_ТТД.ПутЛист КАК ПутЛист,
	|	ВРТ_ТТД.Маршрут КАК Маршрут,
	|	ВРТ_ТТД.Всего КАК Всего,
	|	ВРТ_ТТД.ВалютаДокумента КАК ВалютаДокумента,
	|	ВРТ_ТТД.Перевозчик КАК Перевозчик,
	|	ВРТ_ТТД.ВидОперации КАК ВидОперации,
	|	ВРТ_ТТД.МаршрутныйЛист КАК МаршрутныйЛист,
	|	ВРТ_ТТД.Ссылка КАК Ссылка
	|ИЗ
	|	ВРТ_ТТД КАК ВРТ_ТТД
	|ИТОГИ
	|	МАКСИМУМ(Дата),
	|	МАКСИМУМ(Организация),
	|	МАКСИМУМ(Контрагент),
	|	МАКСИМУМ(ВалютаДокумента),
	|	МАКСИМУМ(Перевозчик),
	|	МАКСИМУМ(ВидОперации),
	|	МАКСИМУМ(МаршрутныйЛист)
	|ПО
	|	Ссылка,
	|	ПутЛист,
	|	Маршрут
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатТТДВыработка.ПутЛист КАК ПутЛист,
	|	уатТТДВыработка.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.уатТТД.Выработка КАК уатТТДВыработка
	|ГДЕ
	|	уатТТДВыработка.Ссылка В(&Ссылка)";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТабПЛЗадания = РезультатЗапроса[1].Выгрузить();
	ТабПЛ        = РезультатЗапроса[2].Выгрузить();
	ТабПЛОсновной  = РезультатЗапроса[4].Выгрузить();
	
	ПервыйДокумент = Истина;
	
	ВыборкаДокументыТТД = РезультатЗапроса[3].Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаДокументыТТД.Следующий() Цикл 
		ВыборкаДокументыПЛ = ВыборкаДокументыТТД.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаДокументыПЛ.Следующий() Цикл 
			ВыборкаМаршруты = ВыборкаДокументыПЛ.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
			Пока ВыборкаМаршруты.Следующий() Цикл 
				Если Не ПервыйДокумент Тогда
					ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				КонецЕсли;
				НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
				
				ПервыйДокумент = Ложь;
				
				ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗАКАЗНАРЯДГРУЗЫ";
				Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.уатТТД.ПФ_MXL_ЗаказНарядГрузы");
				
				ОбластьЛицевая = Макет.ПолучитьОбласть("Лицевая");
				ОбластьОборотная = Макет.ПолучитьОбласть("Оборотная");
				
				ПараметрыМакета = Новый Структура();
				
				// Лицевая
				// Дата/Номер
				ПараметрыМакета.Вставить("ДатаДокумента", Формат(ВыборкаМаршруты.Дата, "ДФ='dd MMMM yyyy ''г.'''"));
				
				ПечатьПрефиксовВключена = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ВыборкаМаршруты.Организация, ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ВыводитьПрефиксПриПечати"));
				Если ПечатьПрефиксовВключена Тогда 
					ПараметрыМакета.Вставить("НомерДокумента", ВыборкаМаршруты.Ссылка.Номер);
				Иначе 
					ПараметрыМакета.Вставить("НомерДокумента", уатОбщегоНазначенияКлиентСервер.НомерДокументаНаПечать(ВыборкаМаршруты.Ссылка.Номер, Истина, Истина));
				КонецЕсли;
				
				// Фрахтователь/Фрахтовщик
				Если ВыборкаМаршруты.ВидОперации = Перечисления.уатВидыОперацийТТД.ПоПутевомуЛисту Тогда
					Фрахтовщик = уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(
					уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(
					ВыборкаМаршруты.Организация, 
					ВыборкаМаршруты.Дата));
					
					МассивСтрок = уатОбщегоНазначенияТиповые.уатРазбитьСтрокуНаПодстроки(Фрахтовщик, 100);
					ПараметрыМакета.Вставить("Фрахтовщик1", МассивСтрок[0]);
					
					Если МассивСтрок.Количество() > 1 Тогда
						ПараметрыМакета.Вставить("Фрахтовщик2", МассивСтрок[1]);
					КонецЕсли;
					
				Иначе
					Фрахтовщик = уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(
					уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(
					ВыборкаМаршруты.Перевозчик, 
					ВыборкаМаршруты.Дата));
					
					МассивСтрок = уатОбщегоНазначенияТиповые.уатРазбитьСтрокуНаПодстроки(Фрахтовщик, 100);
					
					ПараметрыМакета.Вставить("Фрахтовщик1", МассивСтрок[0]);
					
					Если МассивСтрок.Количество() > 1 Тогда
						ПараметрыМакета.Вставить("Фрахтовщик2", МассивСтрок[1]);
					КонецЕсли;
				КонецЕсли;
				
				Фрахтователь =  уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(
				уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(
				ВыборкаМаршруты.Контрагент, 
				ВыборкаМаршруты.Дата));
				
				МассивСтрок = уатОбщегоНазначенияТиповые.уатРазбитьСтрокуНаПодстроки(Фрахтователь, 100);
				
				ПараметрыМакета.Вставить("Фрахтователь1", МассивСтрок[0]);
				Если МассивСтрок.Количество() > 1 Тогда
					ПараметрыМакета.Вставить("Фрахтователь2", МассивСтрок[1]);
				КонецЕсли;
				
				// Грузы
				СтрокаГруза = "";
				СтоимостьГруза = 0;
				Если ВыборкаМаршруты.ВидОперации <> ПредопределенноеЗначение("Перечисление.уатВидыОперацийТТД.ПоМаршрутномуЛистуИЗаказу") Или ВыборкаМаршруты.Ссылка.Грузы.Количество() = 0 Тогда 
					Для Каждого СтрокаТаблицы Из ВыборкаМаршруты.Ссылка.Выработка Цикл
						Если ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда
							СтрокаГруза = СтрокаГруза + СтрокаТаблицы.Номенклатура.Наименование;
						КонецЕсли;
						Если ЗначениеЗаполнено(СтрокаТаблицы.КоличествоМест) Тогда
							Если СтрокаГруза = "" Тогда
								СтрокаГруза = Строка(СтрокаТаблицы.КоличествоМест) + " упак.";
							Иначе
								СтрокаГруза = СтрокаГруза + ", " + Строка(СтрокаТаблицы.КоличествоМест) + " упак.";
							КонецЕсли;
						КонецЕсли;
						Если ЗначениеЗаполнено(СтрокаТаблицы.ВидУпаковки) Тогда
							СтрокаГруза = СтрокаГруза + " (" + СтрокаТаблицы.ВидУпаковки + ")";
						КонецЕсли;
						Если ЗначениеЗаполнено(СтрокаТаблицы.КоличествоТонн) Тогда
							Если СтрокаГруза = "" Тогда
								СтрокаГруза = Строка(СтрокаТаблицы.КоличествоТонн*?(СтрокаТаблицы.КоличествоЕздок=0,1,СтрокаТаблицы.КоличествоЕздок)) + " т";
							Иначе
								СтрокаГруза = СтрокаГруза + ", " + Строка(СтрокаТаблицы.КоличествоТонн*?(СтрокаТаблицы.КоличествоЕздок=0,1,СтрокаТаблицы.КоличествоЕздок)) + " т";
							КонецЕсли;
						КонецЕсли;	
						СтрокаГруза = СтрокаГруза + "; ";
						СтоимостьГруза = СтоимостьГруза + СтрокаТаблицы.Сумма;
					КонецЦикла;
				Иначе
					СтрокаГруза = "";
					Для Каждого СтрокаТаблицы Из ВыборкаМаршруты.Ссылка.Грузы Цикл
						Если ЗначениеЗаполнено(СтрокаТаблицы.Груз) Тогда
							СтрокаГруза = СтрокаГруза + СтрокаТаблицы.Груз.Наименование;
						КонецЕсли;
						Если ЗначениеЗаполнено(СтрокаТаблицы.КоличествоМест) Тогда
							Если СтрокаГруза = "" Тогда
								СтрокаГруза = Строка(СтрокаТаблицы.КоличествоМест) + " упак.";
							Иначе
								СтрокаГруза = СтрокаГруза + ", " + Строка(СтрокаТаблицы.КоличествоМест) + " упак.";
							КонецЕсли;
						КонецЕсли;
						Если ЗначениеЗаполнено(СтрокаТаблицы.ВидУпаковки) Тогда
							СтрокаГруза = СтрокаГруза + " (" + СтрокаТаблицы.ВидУпаковки + ")";
						КонецЕсли;
						Если ЗначениеЗаполнено(СтрокаТаблицы.КоличествоТонн) Тогда
							Если СтрокаГруза = "" Тогда
								СтрокаГруза = Строка(СтрокаТаблицы.КоличествоТонн) + " т";
							Иначе
								СтрокаГруза = СтрокаГруза + ", " + Строка(СтрокаТаблицы.КоличествоТонн) + " т";
							КонецЕсли;
						КонецЕсли;	
						СтрокаГруза = СтрокаГруза + "; ";
						СтоимостьГруза = СтоимостьГруза + СтрокаТаблицы.Сумма;
					КонецЦикла;
				КонецЕсли;
				
				МассивСтрок = уатОбщегоНазначенияТиповые.уатРазбитьСтрокуНаПодстроки(СтрокаГруза, 120);
				Сч = 0;
				Для Сч = 0 По МассивСтрок.Количество()-1 Цикл
					ОбластьЛицевая.Параметры["НаименованиеГруза"+Строка(Сч+1)] = МассивСтрок[Сч];
					Если Сч = 3 Тогда
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				ПараметрыМакета.Вставить("СопроводительныеДокументы", ВыборкаМаршруты.Ссылка.ПереченьСопроводительныхДокументов);
				ПараметрыМакета.Вставить("СопроводительныеСертификаты", ВыборкаМаршруты.Ссылка.ПереченьСопроводительныхСертификатов);
				
				// Дата/Время/Адрес/Маршрут
				СтрокиЗадания = ТабПЛЗадания.НайтиСтроки(Новый Структура("ПутЛист, Маршрут", ВыборкаМаршруты.ПутЛист, ВыборкаМаршруты.Маршрут));
				Если СтрокиЗадания.Количество() > 0 Тогда 
					
					ДатаПодачи = Формат(ВыборкаМаршруты.Дата, "ДФ='dd MMMM yyyy ''г.'''");
					Параметр = ДатаПодачи;
					
					Маршрут = СтрокиЗадания[0].Маршрут.Наименование;
					Если ЗначениеЗаполнено(Маршрут) Тогда
						Параметр = Параметр + ", " + Маршрут;
					КонецЕсли;
					
					Адрес = СтрокиЗадания[0].АдресПрибытия;
					Если ЗначениеЗаполнено(Адрес) Тогда
						Параметр = Параметр + ", " + Адрес;
					КонецЕсли;
					
					МассивСтрок = уатОбщегоНазначенияТиповые.уатРазбитьСтрокуНаПодстроки(Параметр, 120);
					
					ПараметрыМакета.Вставить("ДатаВремяАдресМаршрутПодачи1", МассивСтрок[0]);
					Если МассивСтрок.Количество() > 1 Тогда
						ПараметрыМакета.Вставить("ДатаВремяАдресМаршрутПодачи2", МассивСтрок[1]);
					КонецЕсли;
					
					МодельТС = СтрокиЗадания[0].НаименованиеМодели;
					
					Если ЗначениеЗаполнено(МодельТС) Тогда
						МассивСтрок = уатОбщегоНазначенияТиповые.уатРазбитьСтрокуНаПодстроки(МодельТС, 60);
						ПараметрыМакета.Вставить("МодельТС1", МассивСтрок[0]);
						Если МассивСтрок.Количество() > 1 Тогда
							ПараметрыМакета.Вставить("МодельТС2", МассивСтрок[1]);
						КонецЕсли;	
					КонецЕсли;
					
					ПараметрыМакета.Вставить("ГосНомер", СтрокиЗадания[0].ГосударственныйНомер); 
					ПараметрыМакета.Вставить("ДанныеВодителя", уатОбщегоНазначения.уатФИОСотрудникаПолноеСтрокой(СтрокиЗадания[0].Водитель, ВыборкаМаршруты.Дата));
					
				Иначе 
					СтрокиЗадания = ТабПЛЗадания.НайтиСтроки(Новый Структура("ПутЛист", ВыборкаМаршруты.ПутЛист));
					Если СтрокиЗадания.Количество() > 0 Тогда 
						
						ДатаПодачи = Формат(ВыборкаМаршруты.Дата, "ДФ='dd MMMM yyyy ''г.'''");
						Параметр = ДатаПодачи;
						
						Маршрут = СтрокиЗадания[0].Маршрут.Наименование;
						Если ЗначениеЗаполнено(Маршрут) Тогда
							Параметр = Параметр + ", " + Маршрут;
						КонецЕсли;
						
						Адрес =  СтрокиЗадания[0].АдресПрибытия; 
						Если ЗначениеЗаполнено(Адрес) Тогда
							Параметр = Параметр + ", " + Адрес;
						КонецЕсли;
						
						МассивСтрок = уатОбщегоНазначенияТиповые.уатРазбитьСтрокуНаПодстроки(Параметр, 120);
						
						ПараметрыМакета.Вставить("ДатаВремяАдресМаршрутПодачи1", МассивСтрок[0]);
						Если МассивСтрок.Количество() > 1 Тогда
							ПараметрыМакета.Вставить("ДатаВремяАдресМаршрутПодачи2", МассивСтрок[1]);
						КонецЕсли;
						
						МодельТС = СтрокиЗадания[0].НаименованиеМодели;
						
						Если ЗначениеЗаполнено(МодельТС) Тогда
							МассивСтрок = уатОбщегоНазначенияТиповые.уатРазбитьСтрокуНаПодстроки(МодельТС, 60);
							ПараметрыМакета.Вставить("МодельТС1", МассивСтрок[0]);
							Если МассивСтрок.Количество() > 1 Тогда
								ПараметрыМакета.Вставить("МодельТС2", МассивСтрок[1]);
							КонецЕсли;	
						КонецЕсли;
						
						ПараметрыМакета.Вставить("ГосНомер", СтрокиЗадания[0].ГосударственныйНомер);
						ПараметрыМакета.Вставить("ДанныеВодителя", уатОбщегоНазначения.уатФИОСотрудникаПолноеСтрокой(СтрокиЗадания[0].Водитель, ВыборкаМаршруты.Дата));
						
					Иначе 
						СтрокиПЛ = ТабПЛ.НайтиСтроки(Новый Структура("ПутЛист", ВыборкаМаршруты.ПутЛист));
						Если СтрокиПЛ.Количество() > 0 Тогда 
							
							ДатаПодачи = Формат(ВыборкаМаршруты.Дата, "ДФ='dd MMMM yyyy ''г.'''");
							Параметр = ДатаПодачи;
							
							Маршрут = ВыборкаМаршруты.Маршрут.Наименование;
							Если ЗначениеЗаполнено(Маршрут) Тогда
								Параметр = Параметр + ", " + Маршрут;
							КонецЕсли;
							
							МассивСтрок = уатОбщегоНазначенияТиповые.уатРазбитьСтрокуНаПодстроки(Параметр, 120);
							
							ПараметрыМакета.Вставить("ДатаВремяАдресМаршрутПодачи1", МассивСтрок[0]);
							Если МассивСтрок.Количество() > 1 Тогда
								ПараметрыМакета.Вставить("ДатаВремяАдресМаршрутПодачи2", МассивСтрок[1]);
							КонецЕсли;
							
							МодельТС = СтрокиПЛ[0].НаименованиеМодели;
							
							Если ЗначениеЗаполнено(МодельТС) Тогда								
								МассивСтрок = уатОбщегоНазначенияТиповые.уатРазбитьСтрокуНаПодстроки(МодельТС, 60);
								ПараметрыМакета.Вставить("МодельТС1", МассивСтрок[0]);
								Если МассивСтрок.Количество() > 1 Тогда
									ПараметрыМакета.Вставить("МодельТС2", МассивСтрок[1]);
								КонецЕсли;	
							КонецЕсли;
							
							ПараметрыМакета.Вставить("ГосНомер", СтрокиПЛ[0].ГосударственныйНомер);
							ПараметрыМакета.Вставить("ДанныеВодителя", уатОбщегоНазначения.уатФИОСотрудникаПолноеСтрокой(СтрокиПЛ[0].Водитель, ВыборкаМаршруты.Дата));
							
						Иначе
							Если ЗначениеЗаполнено(ВыборкаДокументыТТД.МаршрутныйЛист) Тогда
								
								МаршрутныйЛист = ВыборкаДокументыТТД.МаршрутныйЛист;
								ДатаПодачи = Формат(ВыборкаМаршруты.Дата, "ДФ='dd MMMM yyyy ''г.'''");
								Параметр = ДатаПодачи;
								
								Маршрут = МаршрутныйЛист.Маршрут.Наименование;
								Если ЗначениеЗаполнено(Маршрут) Тогда
									Параметр = Параметр + ", " + Маршрут;
								КонецЕсли;
								
								МассивСтрок = уатОбщегоНазначенияТиповые.уатРазбитьСтрокуНаПодстроки(Параметр, 120);
								
								ПараметрыМакета.Вставить("ДатаВремяАдресМаршрутПодачи1", МассивСтрок[0]);
								Если МассивСтрок.Количество() > 1 Тогда
									ПараметрыМакета.Вставить("ДатаВремяАдресМаршрутПодачи2", МассивСтрок[1]);
								КонецЕсли;
								
								МодельТС =  МаршрутныйЛист.ТС.Модель.Наименование;
								
								Если ЗначениеЗаполнено(МодельТС) Тогда
									МассивСтрок = уатОбщегоНазначенияТиповые.уатРазбитьСтрокуНаПодстроки(МодельТС, 60);
									ПараметрыМакета.Вставить("МодельТС1", МассивСтрок[0]);
									Если МассивСтрок.Количество() > 1 Тогда
										ПараметрыМакета.Вставить("МодельТС2", МассивСтрок[1]);
									КонецЕсли;	
								КонецЕсли;
								
								ПараметрыМакета.Вставить("ГосНомер", МаршрутныйЛист.ТС.ГосударственныйНомер);
								ПараметрыМакета.Вставить("ДанныеВодителя", уатОбщегоНазначения.уатФИОСотрудникаПолноеСтрокой(МаршрутныйЛист.Водитель1, ВыборкаМаршруты.Дата));
								
							Иначе
								тчТабПЛОсновной = ТабПЛОсновной.НайтиСтроки(Новый Структура("Ссылка", ВыборкаДокументыТТД.Ссылка));
								Если тчТабПЛОсновной.Количество() > 0 Тогда
									ПутЛист = тчТабПЛОсновной[0].ПутЛист;
									ДатаПодачи = Формат(ВыборкаМаршруты.Дата, "ДФ='dd MMMM yyyy ''г.'''");
									Параметр = ДатаПодачи;
									
									Маршрут = ВыборкаМаршруты.Маршрут.Наименование;
									Если ЗначениеЗаполнено(Маршрут) Тогда
										Параметр = Параметр + ", " + Маршрут;
									КонецЕсли;
									
									МассивСтрок = уатОбщегоНазначенияТиповые.уатРазбитьСтрокуНаПодстроки(Параметр, 120);
									
									ПараметрыМакета.Вставить("ДатаВремяАдресМаршрутПодачи1", МассивСтрок[0]);
									Если МассивСтрок.Количество() > 1 Тогда
										ПараметрыМакета.Вставить("ДатаВремяАдресМаршрутПодачи2", МассивСтрок[1]);
									КонецЕсли;
									
									МодельТС = ПутЛист.ТранспортноеСредство.Модель.Наименование;
									
									Если ЗначениеЗаполнено(МодельТС) Тогда
										МассивСтрок = уатОбщегоНазначенияТиповые.уатРазбитьСтрокуНаПодстроки(МодельТС, 60);
										ПараметрыМакета.Вставить("МодельТС1", МассивСтрок[0]);
										Если МассивСтрок.Количество() > 1 Тогда
											ПараметрыМакета.Вставить("МодельТС2", МассивСтрок[1]);
										КонецЕсли;
									КонецЕсли;
									
									ПараметрыМакета.Вставить("ГосНомер", ПутЛист.ТранспортноеСредство.ГосударственныйНомер);
									ПараметрыМакета.Вставить("ДанныеВодителя", уатОбщегоНазначения.уатФИОСотрудникаПолноеСтрокой(ПутЛист.Водитель1, ВыборкаМаршруты.Дата));
									
								КонецЕсли;
							КонецЕсли;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ВыборкаМаршруты.Ссылка.ЛицоПринявшееЗаказКИсполнению) Тогда
					ПараметрыМакета.Вставить("ЛицоПринявшееЗаказ", ВыборкаМаршруты.Ссылка.ЛицоПринявшееЗаказКИсполнению.Наименование);
				КонецЕсли;
				
				// Оборотная
				Если ВыборкаМаршруты.Ссылка.ВидОперации = Перечисления.уатВидыОперацийТТД.ПоПутевомуЛисту Тогда
					
					СуммаДокумента = 0;
					ВыборкаСтоимость = ВыборкаМаршруты.Выбрать();
					Пока ВыборкаСтоимость.Следующий() Цикл 
						СуммаДокумента = СуммаДокумента + ВыборкаСтоимость.Всего;
					КонецЦикла;
				Иначе
					СуммаДокумента = ВыборкаМаршруты.Ссылка.СтоимостьПеревозки;
				КонецЕсли;
				
				ПараметрыМакета.Вставить("ВсегоПоДокументу", Формат(СуммаДокумента, "ЧДЦ=2; ЧРД=,; ЧН=0,00; ЧГ=0") + " " + ВыборкаМаршруты.ВалютаДокумента);
				
				// Данные плательщика
				мГрузоотправитель = уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(ВыборкаМаршруты.Ссылка.Контрагент, ВыборкаМаршруты.Дата), "НаименованиеДляПечатныхФорм,ИНН,ЮридическийАдрес,НомерСчета");
				//МассивСтрок = уатОбщегоНазначенияТиповые.уатРазбитьСтрокуНаПодстроки(мГрузоотправитель, 130);
				ПараметрыМакета.Вставить("ДанныеПлательщика", мГрузоотправитель);
				
				// Уполномоченнон лицо фрахтовщика
				Если ЗначениеЗаполнено(ВыборкаМаршруты.Ссылка.УполномоченноеЛицоПеревозчика) Тогда
					ПараметрыМакета.Вставить("УполномоченноеЛицоФрахтовщика", ВыборкаМаршруты.Ссылка.УполномоченноеЛицоПеревозчика);
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(ОбластьЛицевая.Параметры, ПараметрыМакета);
				ЗаполнитьЗначенияСвойств(ОбластьОборотная.Параметры, ПараметрыМакета);
				ТабличныйДокумент.Вывести(ОбластьЛицевая);
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ТабличныйДокумент.Вывести(ОбластьОборотная);
				УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаДокументыТТД.Ссылка);
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	МенеджерВТ.Закрыть();
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

Функция ПолучитьПараметрыТСДляПечати(ТранспортноеСредство, ДатаФормирования = Неопределено)
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("МодельТС", уатОбщегоНазначения.уатПредставлениеМоделиТС(ТранспортноеСредство));
	СтруктураПараметров.Вставить("МаркаТС", ТранспортноеСредство.Марка);
	СтруктураПараметров.Вставить("ТипТС", ТранспортноеСредство.ТипТС);
	СтруктураПараметров.Вставить("ГосНомерТС", ТранспортноеСредство.ГосударственныйНомер);
	СтруктураПараметров.Вставить("ГарНомерТС", ТранспортноеСредство.ГаражныйНомер);
	СтруктураПараметров.Вставить("ЛицензионнаяКарточка", ТранспортноеСредство.ЛицензионнаяКарточка);
	СтруктураПараметров.Вставить("НомерЛицензионнойКарточки", ТранспортноеСредство.НомерЛицензионнойКарточки);
	СтруктураПараметров.Вставить("СерияЛицензионнойКарточки", ТранспортноеСредство.СерияЛицензионнойКарточки);
	СтруктураПараметров.Вставить("НомерСерииЛицензионнойКарточки", ТранспортноеСредство.НомерСерииЛицензионнойКарточки);
	
	Если ЗначениеЗаполнено(ТранспортноеСредство.Колонна) Тогда
		СтруктураПараметров.Вставить("Колонна", ПрефиксацияОбъектовКлиентСервер.УдалитьЛидирующиеНулиИзНомераОбъекта(
			уатОбщегоНазначения.МестонахождениеТС(ТранспортноеСредство, ДатаФормирования).Колонна.Код));
	КонецЕсли;	
	
	Возврат СтруктураПараметров;

КонецФункции

// Процедура - Заполнить структуру получателей печатных форм
//
// Параметры:
//  СтруктураДанныхОбъектаПечати - Структура - Структура данных получателей печатной формы
//
Процедура ЗаполнитьСтруктуруПолучателейПечатныхФорм(СтруктураДанныхОбъектаПечати) Экспорт
	
	СтруктураДанныхОбъектаПечати.ОсновнойПолучатель = "Контрагент";
	 
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Контрагент");
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("КонтактноеЛицо");
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Грузоотправитель");
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Грузополучатель");
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
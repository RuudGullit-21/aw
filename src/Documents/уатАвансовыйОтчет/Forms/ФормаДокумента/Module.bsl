
&НаКлиенте
Перем ВалютаРасчетовПередИзменением;


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	уатЗащищенныеФункцииСервер.уатДокументФормаЭлементаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, Объект, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УчетОригиналовПервчиныхДокументов
	УчетОригиналовПервичныхДокументов.ПриСозданииНаСервере_ФормаДокумента(ЭтотОбъект, Элементы.ГруппаУчетПервичныхДокументов);
	уатУчетОригиналовПервичныхДокументов.ОтобразитьДатуПоследнегоИзмененияПервичныхДокументов(ЭтотОбъект, Элементы.ГруппаУчетПервичныхДокументов);
	// Конец СтандартныеПодсистемы.УчетОригиналовПервчиныхДокументов

	мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	ПараметрыЗначениеКопирования = Параметры.ЗначениеКопирования;
	
	НесколькоВалют = ?(Объект.Мультивалютный, 1, 0);
	
	уатОбщегоНазначенияСервер.НастроитьПолеПодразделение(Элементы.Подразделение, "Объект.Организация");
	
	РассчитатьСуммуВсегоВстрокеТЧСервер();
	ВывестиСуммовыеИтогиДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// уатУправлениеАвтотранспортом.МодификацияКонфигурации
	уатМодификацияКонфигурацииКлиентПереопределяемый.ПриОткрытии(ЭтотОбъект, Отказ);
	// Конец уатУправлениеАвтотранспортом.МодификацияКонфигурации
	
	уатЗащищенныеФункцииКлиент.уатДокументФормаЭлементаПриОткрытии(Отказ, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ВалютаРасчетовПередИзменением = Объект.ВалютаДокумента;
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	//РассчитатьСуммуВсегоВстрокеТЧСервер();
	//ВывестиСуммовыеИтогиДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	РассчитатьСуммуВсегоВстрокеТЧСервер();
	ВывестиСуммовыеИтогиДокумента();
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если флВопросЗакрытиеФормы Тогда
		Отказ = Истина;
		Оповещ = Новый ОписаниеОповещения("ПередЗакрытиемВопрос", ЭтотОбъект);
		ПоказатьВопрос(Оповещ, "При проверке корректности заполнения документа возникли предупреждения!
			|Продолжить закрытие формы?", РежимДиалогаВопрос.ОКОтмена);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов	
	УчетОригиналовПервичныхДокументовКлиент.ОбработчикОповещенияФормаДокумента(ИмяСобытия, ЭтотОбъект);
	// Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура Подключаемый_ДекорацияСостояниеОригиналаНажатие()

	// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	УчетОригиналовПервичныхДокументовКлиент.ОткрытьМенюВыбораСостояния(ЭтотОбъект, Элементы.ДекорацияСостояниеОригинала);
	//Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	РассчитатьСуммуДокумента();
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

&НаКлиенте
Процедура НесколькоВалютПриИзменении(Элемент)
	
	Модифицированность = Истина;
	
	Объект.Мультивалютный = (НесколькоВалют = 1);
	
	Для Каждого СтрокаТЧ Из Объект.Расходы Цикл
		Если Объект.Мультивалютный Тогда
			СтрокаТЧ.Валюта = Объект.ВалютаДокумента;
			СтрокаТЧ.Курс = Объект.Курс;
			СтрокаТЧ.Кратность = Объект.Кратность;
		Иначе
			СтрокаТЧ.Валюта = Неопределено;
			СтрокаТЧ.Курс = 0;
			СтрокаТЧ.Кратность = 0;
		КонецЕсли;
	КонецЦикла;
	Если Объект.Мультивалютный Тогда
		Объект.ВалютаДокумента = Неопределено;
	Иначе
		Объект.ВалютаДокумента = мВалютаРегламентированногоУчета;
		СтруктураКурс = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
		Объект.Курс = СтруктураКурс.Курс;
		Объект.Кратность = СтруктураКурс.Кратность;
	КонецЕсли;
		
	РассчитатьСуммуДокумента();
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	Если Объект.ВалютаДокумента <> ВалютаРасчетовПередИзменением Тогда
		СтруктураКурс = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
	
		Объект.Курс      = СтруктураКурс.Курс;
		Объект.Кратность = СтруктураКурс.Кратность;
		
		РассчитатьСуммуДокумента();
		ВывестиСуммовыеИтогиДокумента();
		ВалютаРасчетовПередИзменением = Объект.ВалютаДокумента;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВалютаОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ОбработатьИзмененияПоКнопкеЦеныИВалюты(Новый ОписаниеОповещения("РедактироватьЦеныИВалютуЗавершение", ЭтотОбъект), Объект.ВалютаДокумента);
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыРасходы

&НаКлиенте
Процедура РасходыДокументРасходаПриИзменении(Элемент)
	
	ТекСтрока = Элементы.Расходы.ТекущиеДанные;
	
	Если НЕ ЗначениеЗаполнено(ТекСтрока.ДокументРасхода) Тогда
		Возврат;
	КонецЕсли;
	
	ТекСтрока.НаименованиеВходящегоДокумента = Неопределено;
	ТекСтрока.НомерВходящегоДокумента = Неопределено;
	ТекСтрока.ДатаВходящегоДокумента = Неопределено;
	
	мсвНовыеСтроки = ПолучитьРасходыДокументаРасхода(ТекСтрока.ДокументРасхода, ТекСтрока.НомерСтроки);
	Если мсвНовыеСтроки.Количество() = 0 Тогда
		Возврат;
	Иначе
		ПараметрыОткрытия = Новый Структура("Расходы, Мультивалютный", мсвНовыеСтроки, Объект.Мультивалютный);
		ДопПараметры = Новый Структура("НомерСтроки", ТекСтрока.НомерСтроки);
		ВыборРасходовОповещениеОЗакрытии = Новый ОписаниеОповещения("РасходыДокументРасходаПриИзмененииОтвет", ЭтаФорма, ДопПараметры);
		ОткрытьФорму("Документ.уатАвансовыйОтчет.Форма.ФормаВыбораРасходов", ПараметрыОткрытия, ЭтаФорма,,,,ВыборРасходовОповещениеОЗакрытии);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыДокументРасходаПриИзмененииОтвет(Результат, ДопПараметры) Экспорт
	Если ТипЗнч(Результат) = Тип("Массив") И Результат.Количество() > 0 Тогда
		ПерваяСтрока = Объект.Расходы[ДопПараметры.НомерСтроки-1];
		ЗаполнитьЗначенияСвойств(ПерваяСтрока, Результат[0]);
		Для Индекс = 1 По Результат.Количество() - 1 Цикл
			НоваяСтрока = Объект.Расходы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Результат[Индекс]);
		КонецЦикла;
		РассчитатьСуммуВсегоВСтрокеТЧ();
		РассчитатьСуммуДокумента();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РасходыДокументРасходаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Расходы.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.ДокументРасхода) Тогда
		НомерТипа = 0;
		Если ТипЗнч(ТекущиеДанные.ДокументРасхода) = Тип("ДокументСсылка.уатЗаправкаГСМ") Тогда
			НомерТипа = 1;
		ИначеЕсли ТипЗнч(ТекущиеДанные.ДокументРасхода) = Тип("ДокументСсылка.уатПоступлениеТоваровУслуг") Тогда
			НомерТипа = 2;
		ИначеЕсли ТипЗнч(ТекущиеДанные.ДокументРасхода) = Тип("ДокументСсылка.уатПрочиеДоходыРасходы") Тогда
			НомерТипа = 3;
		ИначеЕсли ТипЗнч(ТекущиеДанные.ДокументРасхода) = Тип("ДокументСсылка.уатПутевойЛист") Тогда
			НомерТипа = 4;
		ИначеЕсли ТипЗнч(ТекущиеДанные.ДокументРасхода) = Тип("ДокументСсылка.уатРемонтныйЛист") Тогда
			НомерТипа = 5;
		ИначеЕсли ТипЗнч(ТекущиеДанные.ДокументРасхода) = Тип("ДокументСсылка.уатКомандировкиОрганизаций") Тогда
			НомерТипа = 6;
		ИначеЕсли ТипЗнч(ТекущиеДанные.ДокументРасхода) = Тип("ДокументСсылка.уатРасходныйКассовыйОрдер") Тогда
			НомерТипа = 7;
		ИначеЕсли ТипЗнч(ТекущиеДанные.ДокументРасхода) = Тип("ДокументСсылка.уатПлатежноеПоручениеИсходящее") Тогда
			НомерТипа = 8;
		КонецЕсли;	
		РасходыДокументРасходаНачалоВыбораСписокВидов(Новый Структура("Значение", НомерТипа), Неопределено);
	Иначе
		СписокТипов = Новый СписокЗначений;
		СписокТипов.Добавить(1, НСтр("en='Fuelling';ru='Заправка ГСМ'"));
		СписокТипов.Добавить(2, НСтр("en='Receipt of materials and services';ru='Поступление материалов и услуг'"));
		СписокТипов.Добавить(3, НСтр("en='Other incomes and expenses';ru='Прочие доходы и расходы'"));
		СписокТипов.Добавить(4, НСтр("en='Waybill';ru='Путевой лист'"));
		СписокТипов.Добавить(5, НСтр("en='Repair list';ru='Ремонтный лист'"));
		СписокТипов.Добавить(6, НСтр("en='Company business trips';ru='Командировки организаций'"));
		СписокТипов.Добавить(7, НСтр("en='Cash payment voucher';ru='Расходный кассовый ордер'"));
		СписокТипов.Добавить(8, НСтр("en='Outgoing payment order';ru='Платежное поручение исходящее'"));
		Оповещ = Новый ОписаниеОповещения("РасходыДокументРасходаНачалоВыбораСписокВидов", ЭтотОбъект);
		СписокТипов.ПоказатьВыборЭлемента(Оповещ, НСтр("en='Selection of document type';ru='Выбор вида документа'"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РасходыДокументРасходаНачалоВыбораСписокВидов(Результат, ДопПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Значение = 1 Тогда
		//Если Объект.Мультивалютный Тогда
			ПараметрыФормы = Новый Структура("Отбор", Новый Структура("Ссылка", СписокЗаправкиГСМ(Неопределено, Объект.ПодотчетноеЛицо)));
		//Иначе
		//	ПараметрыФормы = Новый Структура("Отбор", Новый Структура("Ссылка", СписокЗаправкиГСМ(Объект.ВалютаДокумента, Объект.ПодотчетноеЛицо)));
		//КонецЕсли;
		ОткрытьФорму("Документ.уатЗаправкаГСМ.ФормаВыбора", ПараметрыФормы, Элементы.РасходыДокументРасхода);
	ИначеЕсли Результат.Значение = 2 Тогда
		ПараметрыФормы = Новый Структура("Отбор", Новый Структура("Организация,ПодотчетноеЛицо", Объект.Организация, Объект.ПодотчетноеЛицо));
		ОткрытьФорму("Документ.уатПоступлениеТоваровУслуг.ФормаВыбора", ПараметрыФормы, Элементы.РасходыДокументРасхода);
	ИначеЕсли Результат.Значение = 3 Тогда
		ПараметрыФормы = Новый Структура("Отбор", Новый Структура("Организация,ВидОперации", Объект.Организация, ПредопределенноеЗначение("Перечисление.уатВидыОперацийПрочиеДоходыРасходы.Расходы")));
		ОткрытьФорму("Документ.уатПрочиеДоходыРасходы.ФормаВыбора", ПараметрыФормы, Элементы.РасходыДокументРасхода);
	ИначеЕсли Результат.Значение = 4 Тогда
		ПараметрыФормы = Новый Структура("Отбор", Новый Структура("Ссылка", СписокПЛсРасходами(Объект.ПодотчетноеЛицо)));
		ОткрытьФорму("Документ.уатПутевойЛист.ФормаВыбора", ПараметрыФормы, Элементы.РасходыДокументРасхода);
	ИначеЕсли Результат.Значение = 5 Тогда
		ПараметрыФормы = Новый Структура("Отбор", Новый Структура("Организация, СпособРемонта, ПодотчетноеЛицо", Объект.Организация, ПредопределенноеЗначение("Перечисление.уатСпособыРемонта.Автосервис"), Объект.ПодотчетноеЛицо));
		ОткрытьФорму("Документ.уатРемонтныйЛист.ФормаВыбора", ПараметрыФормы, Элементы.РасходыДокументРасхода);
	ИначеЕсли Результат.Значение = 6 Тогда
		ПараметрыФормы = Новый Структура("Отбор", Новый Структура("Ссылка", СписокКомандировокПодотчетника(Объект.ПодотчетноеЛицо, Объект.Организация)));
		ОткрытьФорму("Документ.уатКомандировкиОрганизаций.ФормаВыбора", ПараметрыФормы, Элементы.РасходыДокументРасхода);
	ИначеЕсли Результат.Значение = 7 Тогда
		ПараметрыФормы = Новый Структура("Отбор", Новый Структура("Организация, ПодотчетноеЛицо", Объект.Организация, Объект.ПодотчетноеЛицо));
		ОткрытьФорму("Документ.уатРасходныйКассовыйОрдер.ФормаВыбора", ПараметрыФормы, Элементы.РасходыДокументРасхода);
	ИначеЕсли Результат.Значение = 8 Тогда
		ПараметрыФормы = Новый Структура("Отбор", Новый Структура("Организация, ПодотчетноеЛицо", Объект.Организация, Объект.ПодотчетноеЛицо));
		ОткрытьФорму("Документ.уатПлатежноеПоручениеИсходящее.ФормаВыбора", ПараметрыФормы, Элементы.РасходыДокументРасхода);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция СписокПЛсРасходами(ПодотчетноеЛицо)
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатПутевойЛист.Ссылка
	|ИЗ
	|	Документ.уатПутевойЛист КАК уатПутевойЛист
	|ГДЕ
	|	(уатПутевойЛист.Водитель1.ФизическоеЛицо = &ПодотчетноеЛицо
	|			ИЛИ уатПутевойЛист.Водитель2.ФизическоеЛицо = &ПодотчетноеЛицо
	|			ИЛИ уатПутевойЛист.Сотрудник1.ФизическоеЛицо = &ПодотчетноеЛицо
	|			ИЛИ уатПутевойЛист.Сотрудник2.ФизическоеЛицо = &ПодотчетноеЛицо)
	|	И НЕ уатПутевойЛист.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	уатПутевойЛист.Ссылка
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(уатПутевойЛист.ПрочиеРасходы.СтатьяРасходов) > 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатОборотыПоЗаправкамГСМОбороты.ПутевойЛист
	|ИЗ
	|	РегистрНакопления.уатОборотыПоЗаправкамГСМ.Обороты КАК уатОборотыПоЗаправкамГСМОбороты
	|ГДЕ
	|	уатОборотыПоЗаправкамГСМОбороты.ВидЗаправки = ЗНАЧЕНИЕ(Перечисление.уатВидыДвиженияГСМ.ЗаправкаНаличные)
	|	И (уатОборотыПоЗаправкамГСМОбороты.ПутевойЛист.Водитель1.ФизическоеЛицо = &ПодотчетноеЛицо
	|			ИЛИ уатОборотыПоЗаправкамГСМОбороты.ПутевойЛист.Водитель2.ФизическоеЛицо = &ПодотчетноеЛицо
	|			ИЛИ уатОборотыПоЗаправкамГСМОбороты.ПутевойЛист.Сотрудник1.ФизическоеЛицо = &ПодотчетноеЛицо
	|			ИЛИ уатОборотыПоЗаправкамГСМОбороты.ПутевойЛист.Сотрудник2.ФизическоеЛицо = &ПодотчетноеЛицо)");
	Запрос.УстановитьПараметр("ПодотчетноеЛицо", ПодотчетноеЛицо);
	мсвПЛ = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Рез = Новый СписокЗначений;
	Рез.ЗагрузитьЗначения(мсвПЛ);
	
	Возврат Рез;
КонецФункции

&НаСервереБезКонтекста
Функция СписокЗаправкиГСМ(Валюта, ПодотчетноеЛицо)
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатЗаправкаГСМ.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.уатЗаправкаГСМ КАК уатЗаправкаГСМ
	|ГДЕ
	|	уатЗаправкаГСМ.ВидДвиженияГСМ = ЗНАЧЕНИЕ(Перечисление.уатВидыДвиженияГСМ.ЗаправкаНаличные)
	|	И (&Валюта = НЕОПРЕДЕЛЕНО ИЛИ уатЗаправкаГСМ.Заправки.Валюта = &Валюта)
	|	И (&ФизЛицо = НЕОПРЕДЕЛЕНО
	|			ИЛИ уатЗаправкаГСМ.Заправки.Водитель.ФизическоеЛицо = &ФизЛицо)");
	Запрос.УстановитьПараметр("Валюта", Валюта);
	Запрос.УстановитьПараметр("ФизЛицо", ПодотчетноеЛицо);
	мсвПЛ = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Рез = Новый СписокЗначений;
	Рез.ЗагрузитьЗначения(мсвПЛ);
	
	Возврат Рез;
КонецФункции

&НаСервереБезКонтекста
Функция СписокКомандировокПодотчетника(ПодотчетноеЛицо, Организация)
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатКомандировкиОрганизаций.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.уатКомандировкиОрганизаций КАК уатКомандировкиОрганизаций
	|ГДЕ
	|	уатКомандировкиОрганизаций.Организация = &Организация
	|	И уатКомандировкиОрганизаций.РаботникиОрганизации.Сотрудник.ФизическоеЛицо = &ФизЛицо");
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ФизЛицо", ПодотчетноеЛицо);
	мсвДок = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	Рез = Новый СписокЗначений;
	Рез.ЗагрузитьЗначения(мсвДок);
	
	Возврат Рез;
КонецФункции

&НаКлиенте
Процедура РасходыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И НЕ Копирование Тогда
		СтрокаТабличнойЧасти = Элементы.Расходы.ТекущиеДанные;
		СтрокаТабличнойЧасти.ДатаОтражения = Объект.Дата;
		СтрокаТабличнойЧасти.СтатьяРасходов = ПредопределенноеЗначение("Справочник.уатСтатьиРасходов.ОсновнаяСтатьяРасходов");
		
		СтрокаТабличнойЧасти.УчитыватьНДС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
    		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.УчитыватьНДС"));
    	СтрокаТабличнойЧасти.СуммаВключаетНДС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
    		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.СуммаВключаетНДС"));
			
		Если СтрокаТабличнойЧасти.УчитыватьНДС Тогда
			СтрокаТабличнойЧасти.СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
				ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнаяСтавкаНДС");
		КонецЕсли;
		
		Если Объект.Мультивалютный Тогда
			СтрокаТабличнойЧасти.Валюта = мВалютаРегламентированногоУчета;
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Валюта) Тогда
			ЗаполнитьКурсКратностьВстрокеТЧ(СтрокаТабличнойЧасти);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РасходыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	РассчитатьСуммуДокумента();
КонецПроцедуры

&НаКлиенте
Процедура РасходыПослеУдаления(Элемент)
	РассчитатьСуммуДокумента();
КонецПроцедуры

&НаКлиенте
Процедура РасходыСуммаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Расходы.ТекущиеДанные;
	РассчитатьСуммуНДСВСтрокеТЧ(СтрокаТабличнойЧасти);
	РассчитатьСуммуВсегоВстрокеТЧ(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура РасходыСтавкаНДСПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Расходы.ТекущиеДанные;
	РассчитатьСуммуНДСВСтрокеТЧ(СтрокаТабличнойЧасти);
	РассчитатьСуммуВсегоВстрокеТЧ(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура РасходыСуммаНДСПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Расходы.ТекущиеДанные;
	РассчитатьСуммуВсегоВстрокеТЧ(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура РасходыДатаОтраженияПриИзменении(Элемент)
	ЗаполнитьКурсКратностьВстрокеТЧ(Элементы.Расходы.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура РасходыВалютаПриИзменении(Элемент)
	ЗаполнитьКурсКратностьВстрокеТЧ(Элементы.Расходы.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура РасходыУчитыватьНДСПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Расходы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.УчитыватьНДС Тогда
		СтрокаТабличнойЧасти.СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
			ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнаяСтавкаНДС");
	Иначе
		СтрокаТабличнойЧасти.СуммаВключаетНДС = Ложь;
		СтрокаТабличнойЧасти.СтавкаНДС = Неопределено;
	КонецЕсли;
	
	РассчитатьСуммуНДСВСтрокеТЧ(СтрокаТабличнойЧасти);
	РассчитатьСуммуВсегоВстрокеТЧ(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура РасходыСуммаВключаетНДСПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Расходы.ТекущиеДанные;
	РассчитатьСуммуНДСВСтрокеТЧ(СтрокаТабличнойЧасти);
	РассчитатьСуммуВсегоВстрокеТЧ(СтрокаТабличнойЧасти);
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// Процедура выполняет пересчет в табличной части документа после изменений 
// в форме "Цены и валюта".Выполняется пересчет колонок: цена, скидка, сумма,
// сумма НДС, всего.
//
&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты(Знач Оповещение, ПересчитатьЦены = Ложь)
	
	// 1. Формируем структуру параметров для заполнения формы "Цены и Валюта".
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВалютаДокумента",		  Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("ДоступностьВалютыДокумента", Ложь);
	СтруктураПараметров.Вставить("Курс",				  Объект.Курс);
	СтруктураПараметров.Вставить("Кратность",			  Объект.Кратность);
	СтруктураПараметров.Вставить("Организация",			  Объект.Организация);
	СтруктураПараметров.Вставить("ДатаДокумента",		  Объект.Дата);
	СтруктураПараметров.Вставить("ПерезаполнитьЦены",	  Ложь);
	СтруктураПараметров.Вставить("ПересчитатьЦены",		  ПересчитатьЦены);
	СтруктураПараметров.Вставить("БылиВнесеныИзменения",  Ложь);
	//СтруктураПараметров.Вставить("СуммаВключаетНДС",      Ложь);
	//СтруктураПараметров.Вставить("НалогообложениеНДС",	  Ложь);
	
	ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров,,,,,
		Новый ОписаниеОповещения("ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение", ЭтотОбъект,
		Новый Структура("Оповещение", Оповещение)),
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение(СтруктураЦеныИВалюта, ДополнительныеПараметры) Экспорт
	
	Если СтруктураЦеныИВалюта = Неопределено ИЛИ СтруктураЦеныИВалюта = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = ДополнительныеПараметры.Оповещение;
    
    // Перезаполняем табличную часть "Номенклатура", если были внесены изменения в форме "Цены и Валюта".
    Если ТипЗнч(СтруктураЦеныИВалюта) = Тип("Структура")  Тогда
		Если Объект.Курс <> СтруктураЦеныИВалюта.Курс ИЛИ Объект.Кратность <> СтруктураЦеныИВалюта.Кратность Тогда
        	Объект.Курс      = СтруктураЦеныИВалюта.Курс;
			Объект.Кратность = СтруктураЦеныИВалюта.Кратность;
        КонецЕсли;
    КонецЕсли;
	
	ВывестиСуммовыеИтогиДокумента();
        
	Если Оповещение <> Неопределено Тогда 
		ВыполнитьОбработкуОповещения(Оповещение);
	КонецЕсли;

КонецПроцедуры // ОбработатьИзмененияПоКнопкеЦеныИВалюты()

&НаКлиенте
Процедура РедактироватьЦеныИВалютуЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    РассчитатьСуммуДокумента();
    Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОстатками(Команда)
	Если Объект.ПодотчетноеЛицо.Пустая() Тогда
		ТекстНСТР = НСтр("en='Not specified accountable person. Filling cancelled';ru='Не указано подотчетное лицо. Заполнение отменено'");
		ПоказатьПредупреждение(Неопределено, ТекстНСТР);
		Возврат;
	КонецЕсли;
			
	Если Объект.Расходы.Количество()>0 Тогда
		ТекстНСТР = НСтр("en='Clear tabular section ""Expenses"" before filling?';ru='Очистить табличную часть ""Расходы"" перед заполнением?'");
		Оповещ = Новый ОписаниеОповещения("ЗаполнитьОстаткамиОтвет", ЭтотОбъект);
		ПоказатьВопрос(Оповещ, ТекстНСТР, РежимДиалогаВопрос.ДаНетОтмена);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьОстаткамиФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОстаткамиОтвет(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.Расходы.Очистить();
	ИначеЕсли Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьОстаткамиФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОстаткамиФрагмент()
	ЗаполнитьОстаткамиСервер();
	РассчитатьСуммуНДСВСтрокеТЧ();
	РассчитатьСуммуВсегоВСтрокеТЧ();
	РассчитатьСуммуДокумента();
КонецПроцедуры
	
&НаСервере
Процедура ЗаполнитьОстаткамиСервер()
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатОстаткиДСУПодотчетныхЛицОстатки.СуммаОстаток КАК Сумма,
	|	уатОстаткиДСУПодотчетныхЛицОстатки.Валюта КАК Валюта
	|ИЗ
	|	РегистрНакопления.уатОстаткиДСУПодотчетныхЛиц.Остатки(
	|			&Период,
	|			ПодотчетноеЛицо = &ПодотчетноеЛицо
	|				И Организация = &Организация
	|				И (&Валюта = НЕОПРЕДЕЛЕНО ИЛИ Валюта = &Валюта)) КАК уатОстаткиДСУПодотчетныхЛицОстатки
	|ГДЕ
	|	уатОстаткиДСУПодотчетныхЛицОстатки.СуммаОстаток > 0");
	Запрос.УстановитьПараметр("Период", Объект.Дата);
	Запрос.УстановитьПараметр("ПодотчетноеЛицо", Объект.ПодотчетноеЛицо);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Валюта", ?(Объект.Мультивалютный, НЕОПРЕДЕЛЕНО, Объект.ВалютаДокумента));
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Объект.Расходы.Добавить();
		НоваяСтрока.ДатаОтражения = Объект.Дата;
		НоваяСтрока.Сумма = Выборка.Сумма;
		Если Объект.Мультивалютный Тогда
			НоваяСтрока.Валюта = Выборка.Валюта;
		КонецЕсли;
		
		ЗаполнитьКурсКратностьВстрокеТЧСервер(НоваяСтрока);
		
		НоваяСтрока.СтатьяРасходов = ПредопределенноеЗначение("Справочник.уатСтатьиРасходов.ОсновнаяСтатьяРасходов");
		
		НоваяСтрока.УчитыватьНДС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
    		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.УчитыватьНДС"));
    	НоваяСтрока.СуммаВключаетНДС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
    		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.СуммаВключаетНДС"));
			
		Если НоваяСтрока.УчитыватьНДС Тогда
			НоваяСтрока.СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
				ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнаяСтавкаНДС");
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// Рассчитывается сумма НДС в строке табличной части.
//
&НаКлиенте
Процедура РассчитатьСуммуНДСВСтрокеТЧ(СтрокаТабличнойЧасти = Неопределено)
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Для Каждого ТекСтрока Из Объект.Расходы Цикл
			РассчитатьСуммуНДСВСтрокеТЧ(ТекСтрока);
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	
	СтрокаТабличнойЧасти.СуммаНДС = ?(СтрокаТабличнойЧасти.СуммаВключаетНДС, 
		СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
		СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
			
КонецПроцедуры // РассчитатьСуммуНДСВСтрокеТЧ()

// Рассчитывается сумма НДС в строке табличной части.
//
&НаСервере
Процедура РассчитатьСуммуНДСВСтрокеТЧсервер(СтрокаТабличнойЧасти = Неопределено)
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Для Каждого ТекСтрока Из Объект.Расходы Цикл
			РассчитатьСуммуНДСВСтрокеТЧсервер(ТекСтрока);
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	
	СтрокаТабличнойЧасти.СуммаНДС = ?(СтрокаТабличнойЧасти.СуммаВключаетНДС, 
		СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
		СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
			
КонецПроцедуры // РассчитатьСуммуНДСВСтрокеТЧсервер()
	
&НаКлиенте
Процедура РассчитатьСуммуВсегоВСтрокеТЧ(СтрокаТабличнойЧасти = Неопределено)
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Для Каждого ТекСтрока Из Объект.Расходы Цикл
			РассчитатьСуммуВсегоВстрокеТЧ(ТекСтрока);
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма
		+ ?(СтрокаТабличнойЧасти.УчитыватьНДС И НЕ СтрокаТабличнойЧасти.СуммаВключаетНДС, СтрокаТабличнойЧасти.СуммаНДС, 0);
КонецПроцедуры

&НаСервере
Процедура РассчитатьСуммуВсегоВстрокеТЧСервер(СтрокаТабличнойЧасти = Неопределено)
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Для Каждого ТекСтрока Из Объект.Расходы Цикл
			РассчитатьСуммуВсегоВстрокеТЧСервер(ТекСтрока);
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма
		+ ?(СтрокаТабличнойЧасти.УчитыватьНДС И НЕ СтрокаТабличнойЧасти.СуммаВключаетНДС, СтрокаТабличнойЧасти.СуммаНДС, 0);
КонецПроцедуры

&НаСервере
Процедура РассчитатьСуммуДокумента()
	Объект.СуммаДокумента = 0;
	Для Каждого ТекСтрока Из Объект.Расходы Цикл
		ТекСумма = ТекСтрока.Сумма;
		Если ТекСтрока.УчитыватьНДС И НЕ ТекСтрока.СуммаВключаетНДС Тогда
			ТекСумма = ТекСумма + ТекСтрока.СуммаНДС;
		КонецЕсли;
		Если Объект.Мультивалютный Тогда
			ТекСумма = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСумма,
				ТекСтрока.Валюта, мВалютаРегламентированногоУчета, ТекСтрока.ДатаОтражения, ТекСтрока.ДатаОтражения);
		КонецЕсли;
		Объект.СуммаДокумента = Объект.СуммаДокумента + ТекСумма;
	КонецЦикла;
	
	ВывестиСуммовыеИтогиДокумента();
КонецПроцедуры

&НаСервере
Процедура ВывестиСуммовыеИтогиДокумента()
	Если Не Объект.Мультивалютный Тогда
		Если НЕ ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда 
			Элементы.НадписьКурс.Видимость = Ложь;
		Иначе
			//СтруктураКурс = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
			НадписьКурс = "(" + Формат(Объект.Курс, "ЧДЦ=4; ЧРД=.; ЧН=0.0000; ЧГ=0") + ")";
			Элементы.НадписьКурс.Видимость = Истина;
		КонецЕсли;
		
		// удаляем мультивалютные реквизиты
		мсвУдалитьРеквизиты = Новый Массив;
		Для Сч = 1 по 1000 Цикл //различных валют и курсов может быть несколько, примем гипотетический максимум = 1000
			ТекПолеИтого = Элементы.Найти("Всего" + Сч);
			Если ТекПолеИтого = Неопределено Тогда
				Прервать;
			КонецЕсли;
			
			мсвУдалитьРеквизиты.Добавить("Всего" + Сч);
			мсвУдалитьРеквизиты.Добавить("ВалютаРасчетов" + Сч);
			
			Элементы.Удалить(Элементы["Всего" + Сч]);
			Элементы.Удалить(Элементы["ВалютаРасчетов" + Сч]);
		КонецЦикла;

		Если мсвУдалитьРеквизиты.Количество() > 0 Тогда
			ИзменитьРеквизиты(, мсвУдалитьРеквизиты);
		КонецЕсли;
		
	Иначе
		тблИтогиПоВалютам = Объект.Расходы.Выгрузить();
		Для Каждого ТекСтрока Из тблИтогиПоВалютам Цикл
			Если ТекСтрока.УчитыватьНДС И НЕ ТекСтрока.СуммаВключаетНДС Тогда
				ТекСтрока.Сумма = ТекСтрока.Сумма + ТекСтрока.СуммаНДС;
			КонецЕсли;
		КонецЦикла;
		тблИтогиПоВалютам.Свернуть("Валюта, Курс, Кратность", "Сумма");
		тблИтогиПоВалютам.Сортировать("Валюта, Курс, Кратность");
		
		// добавляем мультивалютные реквизиты
		мсвДобавитьРеквизиты = Новый Массив;
		Сч = 1;
		Для Каждого ТекСтрока Из тблИтогиПоВалютам Цикл
			Если Элементы.Найти("Всего" + Сч) = Неопределено Тогда
				мсвДобавитьРеквизиты.Добавить(Новый РеквизитФормы("Всего" + Сч, Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2))));
				мсвДобавитьРеквизиты.Добавить(Новый РеквизитФормы("ВалютаРасчетов" + Сч, Новый ОписаниеТипов("Строка")));
			КонецЕсли;
						
			Сч = Сч + 1;
		КонецЦикла;
		Колич = Сч-1;
		
		// удаляем лишние мультивалютные реквизиты
		мсвУдалитьРеквизиты = Новый Массив;
		Для Сч = Колич+1 По 1000 Цикл
			ТекПолеИтого = Элементы.Найти("Всего" + Сч);
			Если ТекПолеИтого = Неопределено Тогда
				Прервать;
			КонецЕсли;
			
			мсвУдалитьРеквизиты.Добавить("Всего" + Сч);
			мсвУдалитьРеквизиты.Добавить("ВалютаРасчетов" + Сч);
			
			Элементы.Удалить(Элементы["Всего" + Сч]);
			Элементы.Удалить(Элементы["ВалютаРасчетов" + Сч]);
		КонецЦикла;
				
		ИзменитьРеквизиты(мсвДобавитьРеквизиты, мсвУдалитьРеквизиты);
		
		Сч = 1;
		Для Каждого ТекСтрока Из тблИтогиПоВалютам Цикл
			ЭтотОбъект["Всего" + Сч] = ТекСтрока.Сумма;
			ТекСтрокаВалюта = "" + ТекСтрока.Валюта + " (" + Формат(ТекСтрока.Курс, "ЧДЦ=4; ЧРД=.; ЧН=0.0000; ЧГ=0") + ")";
			Если Сч < тблИтогиПоВалютам.Количество() Тогда
				ТекСтрокаВалюта = ТекСтрокаВалюта + ", ";
			КонецЕсли;
			ЭтотОбъект["ВалютаРасчетов" + Сч] = ТекСтрокаВалюта;
			
			Если Элементы.Найти("Всего" + Сч) = Неопределено Тогда
				НовыйЭлем = Элементы.Добавить("Всего" + Сч, Тип("ПолеФормы"), Элементы.ИтогоМноговалютный);
				НовыйЭлем.Вид = ВидПоляФормы.ПолеВвода;
				НовыйЭлем.ПутьКДанным = "Всего" + Сч;
				НовыйЭлем.Ширина = 10;
				НовыйЭлем.РастягиватьПоГоризонтали = Ложь;
				НовыйЭлем.ТолькоПросмотр = Истина;
				Если Сч = 1 Тогда
					НовыйЭлем.Заголовок = НСтр("en='Total';ru='Всего'");
				Иначе
					НовыйЭлем.ПоложениеЗаголовка=ПоложениеЗаголовкаЭлементаФормы.Нет;
				КонецЕсли;
			КонецЕсли;
			
			Если Элементы.Найти("ВалютаРасчетов" + Сч) = Неопределено Тогда
				НовыйЭлем = Элементы.Добавить("ВалютаРасчетов" + Сч, Тип("ПолеФормы"), Элементы.ИтогоМноговалютный);
				НовыйЭлем.Вид = ВидПоляФормы.ПолеНадписи;
				НовыйЭлем.ПутьКДанным = "ВалютаРасчетов" + Сч;
				НовыйЭлем.Ширина = 10;
				НовыйЭлем.РастягиватьПоГоризонтали = Ложь;
				НовыйЭлем.ПоложениеЗаголовка=ПоложениеЗаголовкаЭлементаФормы.Нет;
			КонецЕсли;
						
			Сч = Сч + 1;
		КонецЦикла;
				
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимость()
	Элементы.Валюта.Доступность = НЕ Объект.Мультивалютный;
	Элементы.Итого.Видимость = НЕ Объект.Мультивалютный;
	Элементы.ИтогоМноговалютный.Видимость = Объект.Мультивалютный;
	Элементы.РасходыГруппаВалюта.Видимость = Объект.Мультивалютный;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемВопрос(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.ОК Тогда
		флВопросЗакрытиеФормы = Ложь;
		Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьРасходыДокументаРасхода(ДокументРасхода, НомерСтроки)
	
	мсвНомераСтрок = Новый Массив();
	мсвНомераСтрок.Добавить(Объект.Расходы[НомерСтроки-1]);
	тблАвансовыйОтчет = Объект.Расходы.Выгрузить(мсвНомераСтрок);
	
	флПерваяСтрока = Истина;
	Если ТипЗнч(ДокументРасхода) = Тип("ДокументСсылка.уатЗаправкаГСМ") Тогда
		тблРасходы = ДокументРасхода.Заправки.Выгрузить();
		тблРасходы.Свернуть("ТС, Валюта, СтавкаНДС", "Сумма, СуммаНДС");
		
		Для Каждого ТекСтрока Из тблРасходы Цикл
			Если флПерваяСтрока Тогда
				СтрокаРасходы = тблАвансовыйОтчет[0];
			Иначе
				СтрокаРасходы = тблАвансовыйОтчет.Добавить();
			КонецЕсли;
			СтрокаРасходы.ДатаОтражения = ТекущаяДата();
			СтрокаРасходы.ДокументРасхода = ДокументРасхода;
			СтрокаРасходы.СтатьяРасходов = ПредопределенноеЗначение("Справочник.уатСтатьиРасходов.ОсновнаяСтатьяРасходов");
			СтрокаРасходы.ТС = ТекСтрока.ТС;
			СтрокаРасходы.Контрагент = ДокументРасхода.АЗС.Контрагент_Склад;
			Если Объект.Мультивалютный Тогда
				СтрокаРасходы.СуммаВДокументеРасхода = ТекСтрока.Сумма;
				СтрокаРасходы.Валюта = ТекСтрока.Валюта;
				СтрокаРасходы.СуммаНДС = ТекСтрока.СуммаНДС;
			Иначе
				СтрокаРасходы.СуммаВДокументеРасхода = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.Сумма,
					ТекСтрока.Валюта, Объект.ВалютаДокумента, СтрокаРасходы.ДатаОтражения, СтрокаРасходы.ДатаОтражения);
				СтрокаРасходы.СуммаНДС = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаНДС,
					ТекСтрока.Валюта, Объект.ВалютаДокумента, СтрокаРасходы.ДатаОтражения, СтрокаРасходы.ДатаОтражения);
			КонецЕсли;
			СтрокаРасходы.Сумма = СтрокаРасходы.СуммаВДокументеРасхода;
			
			Если Объект.Мультивалютный Тогда
				ЗаполнитьКурсКратностьВстрокеТЧСервер(СтрокаРасходы);
			КонецЕсли;
			
			СтрокаРасходы.УчитыватьНДС = ДокументРасхода.УчитыватьНДС;
			СтрокаРасходы.СуммаВключаетНДС = ДокументРасхода.СуммаВключаетНДС;
			СтрокаРасходы.СтавкаНДС = ТекСтрока.СтавкаНДС;
						
			флПерваяСтрока = Ложь;
		КонецЦикла;	
		
	ИначеЕсли ТипЗнч(ДокументРасхода) = Тип("ДокументСсылка.уатПрочиеДоходыРасходы") Тогда
		тблРасходы = ДокументРасхода.Расходы.Выгрузить();
		тблРасходы.Свернуть("СтатьяРасходов, СтавкаНДС", "Сумма, СуммаНДС");
		
		Для Каждого ТекСтрока Из ДокументРасхода.Расходы Цикл
			Если флПерваяСтрока Тогда
				СтрокаРасходы = тблАвансовыйОтчет[0];
			Иначе
				СтрокаРасходы = тблАвансовыйОтчет.Добавить();
			КонецЕсли;
			СтрокаРасходы.ДатаОтражения = ТекущаяДата();
			СтрокаРасходы.ДокументРасхода = ДокументРасхода;
			СтрокаРасходы.СтатьяРасходов = ТекСтрока.СтатьяРасходов;
			СтрокаРасходы.ТС = ТекСтрока.ТС;
			Если Объект.Мультивалютный Тогда
				СтрокаРасходы.СуммаВДокументеРасхода = ТекСтрока.Сумма;
				СтрокаРасходы.Валюта = ДокументРасхода.ВалютаДокумента;
				СтрокаРасходы.СуммаНДС = ТекСтрока.СуммаНДС;
			Иначе
				СтрокаРасходы.СуммаВДокументеРасхода = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.Сумма,
					ДокументРасхода.ВалютаДокумента, Объект.ВалютаДокумента, СтрокаРасходы.ДатаОтражения, СтрокаРасходы.ДатаОтражения);
				СтрокаРасходы.СуммаНДС = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаНДС,
					ДокументРасхода.ВалютаДокумента, Объект.ВалютаДокумента, СтрокаРасходы.ДатаОтражения, СтрокаРасходы.ДатаОтражения);
			КонецЕсли;
			СтрокаРасходы.Сумма = СтрокаРасходы.СуммаВДокументеРасхода;
			
			Если Объект.Мультивалютный Тогда
				ЗаполнитьКурсКратностьВстрокеТЧСервер(СтрокаРасходы);
			КонецЕсли;
			
			СтрокаРасходы.УчитыватьНДС = ДокументРасхода.УчитыватьНДС;
			СтрокаРасходы.СуммаВключаетНДС = ДокументРасхода.СуммаВключаетНДС;
			СтрокаРасходы.СтавкаНДС = ТекСтрока.СтавкаНДС;
			
			флПерваяСтрока = Ложь;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ДокументРасхода) = Тип("ДокументСсылка.уатПутевойЛист") Тогда
		тблЗаправкиГСМ = уатОбщегоНазначения.уатПолучитьЗаправкиДляПЛ(ДокументРасхода);
		СтатьяРасходовГСМ = уатОбщегоНазначения.НайтиСтатьюЗатрат(ДокументРасхода.ПланЗатрат, Перечисления.уатВидыЗатрат.ГСМ);
		Если НЕ ЗначениеЗаполнено(СтатьяРасходовГСМ) Тогда
			СтатьяРасходовГСМ = Справочники.уатСтатьиРасходов.ОсновнаяСтатьяРасходов;
		КонецЕсли;
		
		тблРасходы = ДокументРасхода.ПрочиеРасходы.Выгрузить(); //прочие расходы
		Для Каждого ТекСтрока Из тблЗаправкиГСМ Цикл //проведенные заправки за наличные
			Если ТекСтрока.ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаНаличные И ТекСтрока.Картинка = 1 Тогда
				НоваяСтрока = тблРасходы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
				НоваяСтрока.СтатьяРасходов = СтатьяРасходовГСМ;
			КонецЕсли;
		КонецЦикла;
		тблРасходы.Свернуть("СтатьяРасходов, Валюта, СтавкаНДС, УчитыватьНДС, СуммаВключаетНДС", "Сумма, СуммаНДС");
		
		Для Каждого ТекСтрока Из тблРасходы Цикл
			Если флПерваяСтрока Тогда
				СтрокаРасходы = тблАвансовыйОтчет[0];
			Иначе
				СтрокаРасходы = тблАвансовыйОтчет.Добавить();
			КонецЕсли;
			СтрокаРасходы.ДатаОтражения = ТекущаяДата();
			СтрокаРасходы.ДокументРасхода = ДокументРасхода;
			СтрокаРасходы.СтатьяРасходов = ТекСтрока.СтатьяРасходов;
			Если Объект.Мультивалютный Тогда
				СтрокаРасходы.СуммаВДокументеРасхода = ТекСтрока.Сумма;
				СтрокаРасходы.Валюта = ТекСтрока.Валюта;
				СтрокаРасходы.СуммаНДС = ТекСтрока.СуммаНДС;
			Иначе
				СтрокаРасходы.СуммаВДокументеРасхода = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.Сумма,
					ТекСтрока.Валюта, Объект.ВалютаДокумента, СтрокаРасходы.ДатаОтражения, СтрокаРасходы.ДатаОтражения);
				СтрокаРасходы.СуммаНДС = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаНДС,
					ТекСтрока.Валюта, Объект.ВалютаДокумента, СтрокаРасходы.ДатаОтражения, СтрокаРасходы.ДатаОтражения);
			КонецЕсли;
			СтрокаРасходы.Сумма = СтрокаРасходы.СуммаВДокументеРасхода;
			СтрокаРасходы.ТС = ДокументРасхода.ТранспортноеСредство;
			СтрокаРасходы.Контрагент = ДокументРасхода.Контрагент;
			
			Если Объект.Мультивалютный Тогда
				ЗаполнитьКурсКратностьВстрокеТЧСервер(СтрокаРасходы);
			КонецЕсли;
			
			СтрокаРасходы.УчитыватьНДС = ТекСтрока.УчитыватьНДС;
			СтрокаРасходы.СуммаВключаетНДС = ТекСтрока.СуммаВключаетНДС;
			СтрокаРасходы.СтавкаНДС = ТекСтрока.СтавкаНДС;
						
			флПерваяСтрока = Ложь;
		КонецЦикла;
				
	ИначеЕсли ТипЗнч(ДокументРасхода) = Тип("ДокументСсылка.уатРемонтныйЛист") Тогда
		// в разных строках могут быть разные ставки НДС
		тблРасходы = ДокументРасхода.Работы.Выгрузить();
		Для Каждого ТекСтрока Из ДокументРасхода.Материалы Цикл
			НоваяСтрока = тблРасходы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		КонецЦикла;
		тблРасходы.Свернуть("СтавкаНДС", "Сумма, СуммаНДС");
		
		Для Каждого ТекСтрока Из тблРасходы Цикл
			Если флПерваяСтрока Тогда
				СтрокаРасходы = тблАвансовыйОтчет[0];
			Иначе
				СтрокаРасходы = тблАвансовыйОтчет.Добавить();
			КонецЕсли;
			СтрокаРасходы.ДатаОтражения = ТекущаяДата();
			СтрокаРасходы.ДокументРасхода = ДокументРасхода;
			СтрокаРасходы.СтатьяРасходов = ПредопределенноеЗначение("Справочник.уатСтатьиРасходов.ОсновнаяСтатьяРасходов");
			СтрокаРасходы.ТС = ДокументРасхода.ТС;
			СтрокаРасходы.Контрагент = ДокументРасхода.Контрагент;
			Если Объект.Мультивалютный Тогда
				СтрокаРасходы.СуммаВДокументеРасхода = ТекСтрока.Сумма;
				СтрокаРасходы.Валюта = ДокументРасхода.ВалютаДокумента;
				СтрокаРасходы.СуммаНДС = ТекСтрока.СуммаНДС;
			Иначе
				СтрокаРасходы.СуммаВДокументеРасхода = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.Сумма,
					ДокументРасхода.ВалютаДокумента, Объект.ВалютаДокумента, СтрокаРасходы.ДатаОтражения, СтрокаРасходы.ДатаОтражения);
				СтрокаРасходы.СуммаНДС = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаНДС,
					ДокументРасхода.ВалютаДокумента, Объект.ВалютаДокумента, СтрокаРасходы.ДатаОтражения, СтрокаРасходы.ДатаОтражения);
			КонецЕсли;
			СтрокаРасходы.Сумма = СтрокаРасходы.СуммаВДокументеРасхода;
			
			Если Объект.Мультивалютный Тогда
				ЗаполнитьКурсКратностьВстрокеТЧСервер(СтрокаРасходы);
			КонецЕсли;
			
			СтрокаРасходы.УчитыватьНДС = ДокументРасхода.УчитыватьНДС;
			СтрокаРасходы.СуммаВключаетНДС = ДокументРасхода.СуммаВключаетНДС;
			СтрокаРасходы.СтавкаНДС = ТекСтрока.СтавкаНДС;
			
			флПерваяСтрока = Ложь;
		КонецЦикла;
			
	ИначеЕсли ТипЗнч(ДокументРасхода) = Тип("ДокументСсылка.уатПоступлениеТоваровУслуг") Тогда
		// в разных строках могут быть разные ставки НДС
		тблРасходы = ДокументРасхода.Товары.Выгрузить();
		Для Каждого ТекСтрока Из ДокументРасхода.Услуги Цикл
			НоваяСтрока = тблРасходы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		КонецЦикла;
		тблРасходы.Свернуть("СтатьяРасходов, СтавкаНДС", "Сумма, СуммаНДС");
		
		Для Каждого ТекСтрока Из тблРасходы Цикл
			Если флПерваяСтрока Тогда
				СтрокаРасходы = тблАвансовыйОтчет[0];
			Иначе
				СтрокаРасходы = тблАвансовыйОтчет.Добавить();
			КонецЕсли;
			СтрокаРасходы.ДатаОтражения = ТекущаяДата();
			СтрокаРасходы.ДокументРасхода = ДокументРасхода;
			СтрокаРасходы.СтатьяРасходов = ТекСтрока.СтатьяРасходов;
			СтрокаРасходы.Контрагент = ДокументРасхода.Контрагент;
			Если Объект.Мультивалютный Тогда
				СтрокаРасходы.СуммаВДокументеРасхода = ТекСтрока.Сумма;
				СтрокаРасходы.Валюта = ДокументРасхода.ВалютаДокумента;
				СтрокаРасходы.СуммаНДС = ТекСтрока.СуммаНДС;
			Иначе
				СтрокаРасходы.СуммаВДокументеРасхода = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.Сумма,
					ДокументРасхода.ВалютаДокумента, Объект.ВалютаДокумента, СтрокаРасходы.ДатаОтражения, СтрокаРасходы.ДатаОтражения);
				СтрокаРасходы.СуммаНДС = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаНДС,
					ДокументРасхода.ВалютаДокумента, Объект.ВалютаДокумента, СтрокаРасходы.ДатаОтражения, СтрокаРасходы.ДатаОтражения);
			КонецЕсли;
			СтрокаРасходы.Сумма = СтрокаРасходы.СуммаВДокументеРасхода;
			
			Если Объект.Мультивалютный Тогда
				ЗаполнитьКурсКратностьВстрокеТЧСервер(СтрокаРасходы);
			КонецЕсли;
			
			СтрокаРасходы.УчитыватьНДС = ДокументРасхода.УчитыватьНДС;
			СтрокаРасходы.СуммаВключаетНДС = ДокументРасхода.СуммаВключаетНДС;
			СтрокаРасходы.СтавкаНДС = ТекСтрока.СтавкаНДС;
						
			флПерваяСтрока = Ложь;
		КонецЦикла;
				
	ИначеЕсли ТипЗнч(ДокументРасхода) = Тип("ДокументСсылка.уатКомандировкиОрганизаций") Тогда
		СуммаРасхода = 0;
		Для Каждого ТекСтрока Из ДокументРасхода.РаботникиОрганизации Цикл
			Если ТекСтрока.Сотрудник.ФизическоеЛицо = Объект.ПодотчетноеЛицо Тогда
				СуммаРасхода = СуммаРасхода + ТекСтрока.Сумма;
			КонецЕсли;
		КонецЦикла;
		
		СтрокаРасходы = тблАвансовыйОтчет[0];
		СтрокаРасходы.ТС = ДокументРасхода.ПЛ.ТранспортноеСредство;
		
		Если Объект.Мультивалютный Тогда
			СтрокаРасходы.СуммаВДокументеРасхода = СуммаРасхода;
			СтрокаРасходы.Валюта = ДокументРасхода.ВалютаДокумента;
		Иначе
			СтрокаРасходы.СуммаВДокументеРасхода = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(СуммаРасхода,
				ДокументРасхода.ВалютаДокумента, Объект.ВалютаДокумента, СтрокаРасходы.ДатаОтражения, СтрокаРасходы.ДатаОтражения);
		КонецЕсли;
		СтрокаРасходы.Сумма = СтрокаРасходы.СуммаВДокументеРасхода;
		
		Если Объект.Мультивалютный Тогда
			ЗаполнитьКурсКратностьВстрокеТЧСервер(СтрокаРасходы);
		КонецЕсли;	
		
		СтрокаРасходы.УчитыватьНДС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
    		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.УчитыватьНДС"));
    	СтрокаРасходы.СуммаВключаетНДС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
    		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.СуммаВключаетНДС"));
			
		Если СтрокаРасходы.УчитыватьНДС Тогда	
			СтрокаРасходы.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
			СтрокаРасходы.СуммаНДС = 0;
		КонецЕсли;
		
		флПерваяСтрока = Ложь;
		
	ИначеЕсли ТипЗнч(ДокументРасхода) = Тип("ДокументСсылка.уатРасходныйКассовыйОрдер")
		ИЛИ ТипЗнч(ДокументРасхода) = Тип("ДокументСсылка.уатПлатежноеПоручениеИсходящее") Тогда
		// в разных строках могут быть разные ставки НДС
		тблРасходы = ДокументРасхода.РасшифровкаПлатежа.Выгрузить();
		тблРасходы.Колонки.СуммаПлатежа.Имя = "Сумма";
		тблРасходы.Свернуть("СтавкаНДС", "Сумма, СуммаНДС");
		
		Для Каждого ТекСтрока Из тблРасходы Цикл
			Если флПерваяСтрока Тогда
				СтрокаРасходы = тблАвансовыйОтчет[0];
			Иначе
				СтрокаРасходы = тблАвансовыйОтчет.Добавить();
			КонецЕсли;
			СтрокаРасходы.ДатаОтражения = ТекущаяДата();
			СтрокаРасходы.ДокументРасхода = ДокументРасхода;
			СтрокаРасходы.СтатьяРасходов = ПредопределенноеЗначение("Справочник.уатСтатьиРасходов.ОсновнаяСтатьяРасходов");			
			Если Объект.Мультивалютный Тогда
				СтрокаРасходы.СуммаВДокументеРасхода = ТекСтрока.Сумма;
				СтрокаРасходы.Валюта = ДокументРасхода.ВалютаДокумента;
				СтрокаРасходы.СуммаНДС = ТекСтрока.СуммаНДС;
			Иначе
				СтрокаРасходы.СуммаВДокументеРасхода = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.Сумма,
					ДокументРасхода.ВалютаДокумента, Объект.ВалютаДокумента, СтрокаРасходы.ДатаОтражения, СтрокаРасходы.ДатаОтражения);
				СтрокаРасходы.СуммаНДС = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаНДС,
					ДокументРасхода.ВалютаДокумента, Объект.ВалютаДокумента, СтрокаРасходы.ДатаОтражения, СтрокаРасходы.ДатаОтражения);
			КонецЕсли;
			СтрокаРасходы.Сумма = СтрокаРасходы.СуммаВДокументеРасхода;
			
			Если Объект.Мультивалютный Тогда
				ЗаполнитьКурсКратностьВстрокеТЧСервер(СтрокаРасходы);
			КонецЕсли;	
			
			СтрокаРасходы.УчитыватьНДС = Истина;
			СтрокаРасходы.СуммаВключаетНДС = Истина;
			СтрокаРасходы.СтавкаНДС = ТекСтрока.СтавкаНДС;
			
			флПерваяСтрока = Ложь;
		КонецЦикла;
				
	КонецЕсли;
	
	Если флПерваяСтрока Тогда
		// Не были записаны никакие расходы
		мсвРезультат = Новый Массив; 
	Иначе
		// Преобразование тблАвансовыйОтчет из таблицы значений в массив структур для передачи на клиент
		мсвРезультат = ОбщегоНазначения.ТаблицаЗначенийВМассив(тблАвансовыйОтчет); 
	КонецЕсли;
	
	Возврат мсвРезультат;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьКурсКратностьВстрокеТЧ(СтрокаТабличнойЧасти)
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Валюта) Тогда
		СтруктураКурс = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(СтрокаТабличнойЧасти.Валюта, СтрокаТабличнойЧасти.ДатаОтражения);
		СтрокаТабличнойЧасти.Курс      = СтруктураКурс.Курс;
		СтрокаТабличнойЧасти.Кратность = СтруктураКурс.Кратность;
	Иначе
		СтрокаТабличнойЧасти.Курс      = 0;
		СтрокаТабличнойЧасти.Кратность = 0;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьКурсКратностьВстрокеТЧСервер(СтрокаТабличнойЧасти)
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Валюта) Тогда
		СтруктураКурс = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(СтрокаТабличнойЧасти.Валюта, СтрокаТабличнойЧасти.ДатаОтражения);
		СтрокаТабличнойЧасти.Курс      = СтруктураКурс.Курс;
		СтрокаТабличнойЧасти.Кратность = СтруктураКурс.Кратность;
	Иначе
		СтрокаТабличнойЧасти.Курс      = 0;
		СтрокаТабличнойЧасти.Кратность = 0;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	уатЗащищенныеФункцииСервер.уатДокументФормаЭлементаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, Объект, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если ЗначениеЗаполнено(Параметры.Основание) И ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") Тогда 
		Если Параметры.Основание.Мультимодальный И (Не Параметры.Основание.ЭтоЭтап 
			Или Не ЗначениеЗаполнено(Параметры.Основание.РодительскийЗаказ)) Тогда 
			
			ТекстНСТР = НСтр("en='Cargo status setting can not be entered based on parent multimodal order';ru='Установка статуса груза не может быть введена на основании родительского мультимодального заказа'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
			
			СтандартнаяОбработка = Ложь;
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьУсловноеОформлениеКолонкиГрузовыхМест();
	
	Если Параметры.Ключ.Пустая() Тогда 
		Объект.ДатаВремяУстановкиСтатуса = ТекущаяДата();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	уатЗащищенныеФункцииКлиент.уатДокументФормаЭлементаПриОткрытии(Отказ, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Объект.Грузы.Очистить();
	
	УстановитьУсловноеОформлениеКолонкиГрузовыхМест();
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыГрузы

&НаКлиенте
Процедура ГрузыПриИзменении(Элемент)
	
	УстановитьУсловноеОформлениеКолонкиГрузовыхМест();
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузыЗаказГрузоотправителяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекСтрока = Элементы.Грузы.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("РежимВыбора, НачальноеЗначениеВыбора", Истина, ТекСтрока.ЗаказГрузоотправителя);
	
	ФормаВыбора = ПолучитьФорму("Документ.уатЗаказГрузоотправителя.ФормаВыбора", ПараметрыФормы, Элемент);
	
	ГруппаОтбора = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	ГруппаОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ГруппаОтбора.Использование = Истина;
	
	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("Проведен");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение   = Истина;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.Использование    = Истина;
	
	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("ПометкаУдаления");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение   = Ложь;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.Использование    = Истина;
	
	ГруппаОтбора2 = ГруппаОтбора.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора2.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	ГруппаОтбора2.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ГруппаОтбора2.Использование = Истина;
	
	ЭлементОтбора = ГруппаОтбора2.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("Мультимодальный");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение   = Ложь;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.Использование    = Истина;
	
	ГруппаОтбора3 = ГруппаОтбора2.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора3.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	ГруппаОтбора3.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ГруппаОтбора3.Использование = Истина;
	
	ЭлементОтбора = ГруппаОтбора3.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("Мультимодальный");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение   = Истина;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.Использование    = Истина;
	
	ЭлементОтбора = ГруппаОтбора3.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("ЭтоЭтап");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение   = Истина;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.Использование    = Истина;
	
	ФормаВыбора.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузыЗаказГрузоотправителяАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДанныеВыбора = ПолучитьСписокЗаказовДляАвтоподбора(Текст);
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузыЗаказГрузоотправителяПриИзменении(Элемент)
	
	ТекДанные = Элементы.Грузы.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекДанные.ГрузовоеМесто = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузыГрузовоеМестоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	
	ТекДанные = Элементы.Грузы.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекДанные.ЗаказГрузоотправителя) Тогда
		
		СтандартнаяОбработка = Ложь;
		
		мсвРазрешенныхГрузовыхМест = ПолучитьГрузовыеМестаПоЗаказу(ТекДанные.ЗаказГрузоотправителя);
		
		ФормаВыбора = ПолучитьФорму("Справочник.уатГрузовыеМеста_уэ.ФормаВыбора",, Элемент);
		ФормаВыбора.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		
		ЭлементОтбора = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("Ссылка");
		ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.ВСписке;
		ЭлементОтбора.ПравоеЗначение   = мсвРазрешенныхГрузовыхМест;
		ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		ЭлементОтбора.Использование    = Истина;
		
		ФормаВыбора.Открыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузыГрузовоеМестоАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекДанные = Элементы.Грузы.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекДанные.ЗаказГрузоотправителя) Тогда
		УстановитьСписокАвтоподбораГрузовыхМест(ДанныеВыбора, ТекДанные.ЗаказГрузоотправителя, Текст);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ГрузыНовыйСтатусНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ФормаВыбораСтатуса = ПолучитьФорму("Справочник.уатСтатусы_уэ.ФормаВыбора",, Элемент);
	//ФормаВыбораСтатуса.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("УстановитьНовыйСтатусПослеВыбораСтатуса", ЭтотОбъект, ГрузовоеМесто);
	ФормаВыбораСтатуса.РежимОткрытияОкна           = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ЭлементОтбора = ФормаВыбораСтатуса.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("Ссылка");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.ПравоеЗначение   = ПолучитьСписокДоступныхСтатусов();
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.Использование    = Истина;
	
	ФормаВыбораСтатуса.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузыНовыйСтатусАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = ПолучитьСписокДоступныхСтатусов(Текст);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаСервере
Процедура УстановитьУсловноеОформлениеКолонкиГрузовыхМест()
	
	УсловноеОформление.Элементы.Очистить();
	
	Для Каждого ТекЗаказ Из Объект.Грузы Цикл 
		
		Если НЕ ЗначениеЗаполнено(ТекЗаказ.ЗаказГрузоотправителя) Тогда
			Продолжить;
		Конецесли;
		
		УОЗаказа = УсловноеОформление.Элементы.Добавить();
		
		УОЗаказа.ИспользоватьВГруппировке              = ИспользованиеУсловногоОформленияКомпоновкиДанных.Использовать;
		УОЗаказа.ИспользоватьВЗаголовке                = ИспользованиеУсловногоОформленияКомпоновкиДанных.Использовать;
		УОЗаказа.ИспользоватьВЗаголовкеПолей           = ИспользованиеУсловногоОформленияКомпоновкиДанных.Использовать;
		УОЗаказа.ИспользоватьВИерархическойГруппировке = ИспользованиеУсловногоОформленияКомпоновкиДанных.Использовать;
		УОЗаказа.ИспользоватьВОбщемИтоге               = ИспользованиеУсловногоОформленияКомпоновкиДанных.Использовать;
		УОЗаказа.ИспользоватьВОтборе                   = ИспользованиеУсловногоОформленияКомпоновкиДанных.Использовать;
		УОЗаказа.ИспользоватьВПараметрах               = ИспользованиеУсловногоОформленияКомпоновкиДанных.Использовать;
		
		ОтборПоГрузу = УОЗаказа.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборПоГрузу.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
		ОтборПоГрузу.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("Объект.Грузы.ЗаказГрузоотправителя");
		ОтборПоГрузу.ПравоеЗначение   = ТекЗаказ.ЗаказГрузоотправителя;
		ОтборПоГрузу.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		ОтборПоГрузу.Использование    = Истина;
		
		Если ТекЗаказ.ЗаказГрузоотправителя.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам Тогда 
			Если ЗначениеЗаполнено(ТекЗаказ.ГрузовоеМесто) Тогда 
				УОЗаказа.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
			Иначе 
				УОЗаказа.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Истина);
			КонецЕсли;
		Иначе 
			УОЗаказа.Оформление.УстановитьЗначениеПараметра("ЦветТекста",            ЦветаСтиля.НедоступныеДанныеЦвет);
			УОЗаказа.Оформление.УстановитьЗначениеПараметра("ОтметкаНезаполненного", Ложь);
			УОЗаказа.Оформление.УстановитьЗначениеПараметра("Текст",                 НСтр("en='<not required>';ru='<не требуется>'"));
			УОЗаказа.Оформление.УстановитьЗначениеПараметра("ТолькоПросмотр",        Истина);
		КонецЕсли;
		
		ПолеОформления = УОЗаказа.Поля.Элементы.Добавить();
		ПолеОформления.Поле          = Новый ПолеКомпоновкиДанных("ГрузыГрузовоеМесто");
		ПолеОформления.Использование = Истина;
		
		УОЗаказа.Представление    = "УОЗаказа_" + Строка(ТекЗаказ.ЗаказГрузоотправителя.УникальныйИдентификатор());
		УОЗаказа.ИдентификаторПользовательскойНастройки = "УОЗаказа_" + Строка(ТекЗаказ.ЗаказГрузоотправителя.УникальныйИдентификатор()); 
		УОЗаказа.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		УОЗаказа.Использование    = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьСписокАвтоподбораГрузовыхМест(ДанныеВыбора, Знач ЗаказГрузоотправителя, Знач ШаблонАвтоподбора)
	
	ДанныеВыбора = Новый СписокЗначений();
	
	мсвГрузовыеМеста = уатЗащищенныеФункцииСервер_проф.ПолучитьГрузовыеМестаПоЗаказу(ЗаказГрузоотправителя, ШаблонАвтоподбора);
	
	Для Каждого ТекГрузовоеМесто Из мсвГрузовыеМеста Цикл
		врПозицияОтсечения = СтрДлина(ШаблонАвтоподбора);
		тПредставление = Новый ФорматированнаяСтрока(
			Новый ФорматированнаяСтрока(Лев(ТекГрузовоеМесто.Наименование, врПозицияОтсечения),, WebЦвета.Красный), 
			Новый ФорматированнаяСтрока(Прав(ТекГрузовоеМесто.Наименование, СтрДлина(ТекГрузовоеМесто.Наименование)-врПозицияОтсечения)));
		ДанныеВыбора.Добавить(ТекГрузовоеМесто.Ссылка, тПредставление);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьГрузовыеМестаПоЗаказу(ЗаказГрузоотправителя)
	
	Возврат уатЗащищенныеФункцииСервер_проф.ПолучитьГрузовыеМестаПоЗаказу(ЗаказГрузоотправителя);
	
КонецФункции // ПолучитьГрузовыеМестаПоЗаказу()

&НаСервереБезКонтекста
Функция ПолучитьСписокЗаказовДляАвтоподбора(Знач СтрокаПодбора)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("СтрокаПодбора", "" + СтрокаПодбора + "%");
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 50
	|	уатЗаказГрузоотправителя.Ссылка КАК Ссылка,
	|	уатЗаказГрузоотправителя.Номер КАК Номер
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	|ГДЕ
	|	уатЗаказГрузоотправителя.Проведен
	|	И НЕ уатЗаказГрузоотправителя.ПометкаУдаления
	|	И (НЕ уатЗаказГрузоотправителя.Мультимодальный
	|			ИЛИ уатЗаказГрузоотправителя.Мультимодальный
	|				И уатЗаказГрузоотправителя.ЭтоЭтап)
	|	И уатЗаказГрузоотправителя.Номер ПОДОБНО &СтрокаПодбора";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДанныеВыбора = Новый СписокЗначений();
	
	Пока Выборка.Следующий() Цикл 
		врПозицияОтсечения = СтрДлина(СтрокаПодбора);
		тПредставление = Новый ФорматированнаяСтрока(
			Новый ФорматированнаяСтрока(Лев(Выборка.Номер, врПозицияОтсечения),, WebЦвета.Красный), 
			Новый ФорматированнаяСтрока(Прав(Выборка.Номер, СтрДлина(Выборка.Номер)-врПозицияОтсечения)));
		ДанныеВыбора.Добавить(Выборка.Ссылка, тПредставление);
	КонецЦикла;
	
	Возврат ДанныеВыбора;
	
КонецФункции // ПолучитьСписокЗаказовДляАвтоподбора()

&НаСервереБезКонтекста
Функция ПолучитьСписокДоступныхСтатусов(Текст="")
	
	мсвЗапрещенныеКВыбору = Новый Массив();
	мсвЗапрещенныеКВыбору.Добавить(Справочники.уатСтатусы_уэ.Закрыт);
	мсвЗапрещенныеКВыбору.Добавить(Справочники.уатСтатусы_уэ.Отклонен);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ЗапрещенныеКВыбору", мсвЗапрещенныеКВыбору);
	Запрос.УстановитьПараметр("СтрокаПодбора", "" + Текст + "%");
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатСтатусы_уэ.Ссылка,
	|	уатСтатусы_уэ.Наименование
	|ИЗ
	|	Справочник.уатСтатусы_уэ КАК уатСтатусы_уэ
	|ГДЕ
	|	НЕ уатСтатусы_уэ.Ссылка В (&ЗапрещенныеКВыбору)
	|	И уатСтатусы_уэ.ДействуетНаЗаказыГрузоотправителей
	|	И уатСтатусы_уэ.Наименование ПОДОБНО &СтрокаПодбора";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДанныеВыбора = Новый СписокЗначений();
	
	Пока Выборка.Следующий() Цикл 
		врПозицияОтсечения = СтрДлина(Текст);
		тПредставление = Новый ФорматированнаяСтрока(
			Новый ФорматированнаяСтрока(Лев(Выборка.Наименование, врПозицияОтсечения),, WebЦвета.Красный), 
			Новый ФорматированнаяСтрока(Прав(Выборка.Наименование, СтрДлина(Выборка.Наименование)-врПозицияОтсечения)));
		ДанныеВыбора.Добавить(Выборка.Ссылка, тПредставление);
	КонецЦикла;
	
	Возврат ДанныеВыбора;
	
КонецФункции // ПолучитьСписокДоступныхСтатусов()

#КонецОбласти

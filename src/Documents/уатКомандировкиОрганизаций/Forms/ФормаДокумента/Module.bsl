#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	уатЗащищенныеФункцииСервер.уатДокументФормаЭлементаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, Объект, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	уатЗащищенныеФункцииКлиент.уатДокументФормаЭлементаПриОткрытии(Отказ, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ВывестиСуммовыеИтогиДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	//ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.РаботникиОрганизации);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ВывестиСуммовыеИтогиДокумента();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыРаботникиОрганизации

&НаКлиенте
Процедура РаботникиОрганизацииОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СтрокиПоСотруднику = Объект.РаботникиОрганизации.НайтиСтроки(Новый Структура("Сотрудник", ВыбранноеЗначение));
	
	Если СтрокиПоСотруднику.Количество() = 0 Тогда 
		НоваяСтрока = Объект.РаботникиОрганизации.Добавить();
		НоваяСтрока.Сотрудник = ВыбранноеЗначение;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РаботникиОрганизацииПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	РассчитатьСуммуДокумента();
КонецПроцедуры

&НаКлиенте
Процедура РаботникиОрганизацииПослеУдаления(Элемент)
	РассчитатьСуммуДокумента();
КонецПроцедуры

&НаКлиенте
Процедура РаботникиОрганизацииСотрудникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ДиалогВыбораСотрудника(Элемент, Элементы.РаботникиОрганизации.ТекущиеДанные.Сотрудник, Новый Структура("Организация", Объект.Организация), СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РаботникиОрганизацииСотрудникОткрытие(Элемент, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ОткрытьФормуСотрудника(Элементы.РаботникиОрганизации.ТекущиеДанные.Сотрудник, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура РаботникиОрганизацииСотрудникАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура РаботникиОрганизацииСотрудникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ЗаполнитьПоПутевомуЛисту(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.ПЛ) Тогда 
		ТекстОшибки = НСтр("en='Choose waybill.';ru='Необходимо выбрать путевой лист.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "Объект.ПЛ");
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ПЛ) И Объект.РаботникиОрганизации.Количество() > 0 Тогда
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьПоПутевомуЛистуОчистка", ЭтотОбъект);
		ТекстВопроса = НСтр("en='Clear the tabular section before filling?';ru='Очистить табличную часть перед заполнением?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе 
		ЗаполнитьПоПутевомуЛистуСервер();
		РассчитатьСуммуДокумента();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(Команда)
	
	Если Объект.РаботникиОрганизации.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ОчиститьРаботникиОрганизацииЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("en='Clear the tabular section?';ru='Очистить табличную часть?'");
	
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	
КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Отбор", Новый Структура("Организация", Объект.Организация));
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе", Ложь);
	
	ОткрытьФорму("Справочник.Сотрудники.ФормаВыбора", ПараметрыФормы, Элементы.РаботникиОрганизации);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЦеныИВалюту(Команда)
	
	ОбработатьИзмененияПоКнопкеЦеныИВалюты(Новый ОписаниеОповещения("РедактироватьЦеныИВалютуЗавершение", ЭтотОбъект), Объект.ВалютаДокумента);
	
КонецПроцедуры

// Процедура выполняет пересчет в табличной части документа после изменений 
// в форме "Цены и валюта".Выполняется пересчет колонок: цена, скидка, сумма,
// сумма НДС, всего.
//
&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты(Знач Оповещение, Знач ВалютаРасчетовПередИзменением, ПересчитатьЦены = Ложь)
	
	// 1. Формируем структуру параметров для заполнения формы "Цены и Валюта".
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВалютаДокумента",		  Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("Курс",				  Объект.Курс);
	СтруктураПараметров.Вставить("Кратность",			  Объект.Кратность);
	СтруктураПараметров.Вставить("Организация",			  Объект.Организация);
	СтруктураПараметров.Вставить("ДатаДокумента",		  Объект.Дата);
	СтруктураПараметров.Вставить("ПерезаполнитьЦены",	  Ложь);
	СтруктураПараметров.Вставить("ПересчитатьЦены",		  ПересчитатьЦены);
	СтруктураПараметров.Вставить("БылиВнесеныИзменения",  Ложь);
	СтруктураПараметров.Вставить("ДокументБезНДС",        Истина);

	Если НЕ ПравоРедактированиеДокумента() Тогда
		СтруктураПараметров.Вставить("ТолькоПросмотр", Истина);
	КонецЕсли;
	
	ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров,,,,,
		Новый ОписаниеОповещения("ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение",
		ЭтотОбъект, Новый Структура("ВалютаРасчетовПередИзменением, Оповещение", ВалютаРасчетовПередИзменением, Оповещение)),
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение(СтруктураЦеныИВалюта, ДополнительныеПараметры) Экспорт
	
	Если СтруктураЦеныИВалюта = Неопределено ИЛИ СтруктураЦеныИВалюта = КодВозвратаДиалога.Отмена ИЛИ НЕ ПравоРедактированиеДокумента() Тогда
		Возврат;
	КонецЕсли;
	
	ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершениеСервер(СтруктураЦеныИВалюта, ДополнительныеПараметры.ВалютаРасчетовПередИзменением);
        
	Если ДополнительныеПараметры.Оповещение <> Неопределено Тогда 
		ВыполнитьОбработкуОповещения(ДополнительныеПараметры.Оповещение);
	КонецЕсли;

КонецПроцедуры // ОбработатьИзмененияПоКнопкеЦеныИВалюты()

&НаСервере
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершениеСервер(СтруктураЦеныИВалюта, ВалютаРасчетовПередИзменением)
	Если ТипЗнч(СтруктураЦеныИВалюта) = Тип("Структура")
		И СтруктураЦеныИВалюта.ВалютаДокумента <> ВалютаРасчетовПередИзменением Тогда
		СтруктураКурсы = уатОбщегоНазначенияСервер.ПолучитьКурсыВалют(ВалютаРасчетовПередИзменением, 
			СтруктураЦеныИВалюта.ВалютаДокумента, Объект.Дата);
		
		Объект.ВалютаДокумента = СтруктураЦеныИВалюта.ВалютаДокумента;
		Объект.Курс = СтруктураКурсы.Курс;
		Объект.Кратность = СтруктураКурсы.Кратность;
		
		Если СтруктураЦеныИВалюта.ПересчитатьЦены Тогда
			Для каждого СтрокаТабличнойЧасти Из Объект.РаботникиОрганизации Цикл
				СтрокаТабличнойЧасти.Сумма = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(СтрокаТабличнойЧасти.Сумма,
					ВалютаРасчетовПередИзменением,
					СтруктураЦеныИВалюта.ВалютаДокумента,
					СтруктураКурсы.КурсНач, 
					СтруктураКурсы.Курс, 
					СтруктураКурсы.КратностьНач, 
					СтруктураКурсы.Кратность);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ВывестиСуммовыеИтогиДокумента();
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЦеныИВалютуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РассчитатьСуммуДокумента();
    Модифицированность = Истина;

КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ОчиститьРаботникиОрганизацииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда 
		Объект.РаботникиОрганизации.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПутевомуЛистуОчистка(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда 
		Объект.РаботникиОрганизации.Очистить();
	КонецЕсли;
	
	ЗаполнитьПоПутевомуЛистуСервер();
	РассчитатьСуммуДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоПутевомуЛистуСервер()
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", Объект.ПЛ);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатПутевойЛист.Водитель1,
	|	уатПутевойЛист.Водитель2,
	|	уатПутевойЛист.Сотрудник1,
	|	уатПутевойЛист.Сотрудник2,
	|	уатПутевойЛист.ДатаВыезда,
	|	уатПутевойЛист.ДатаВозвращения
	|ИЗ
	|	Документ.уатПутевойЛист КАК уатПутевойЛист
	|ГДЕ
	|	уатПутевойЛист.Ссылка = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда 
		мсвСотрудники = Новый Массив;
		Если ЗначениеЗаполнено(Выборка.Водитель1) Тогда
			мсвСотрудники.Добавить(Выборка.Водитель1);
		КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.Водитель2) И мсвСотрудники.Найти(Выборка.Водитель2) = Неопределено Тогда
			мсвСотрудники.Добавить(Выборка.Водитель2);
		КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.Сотрудник1) И мсвСотрудники.Найти(Выборка.Сотрудник1) = Неопределено Тогда
			мсвСотрудники.Добавить(Выборка.Сотрудник1);
		КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.Сотрудник2) И мсвСотрудники.Найти(Выборка.Сотрудник2) = Неопределено Тогда
			мсвСотрудники.Добавить(Выборка.Сотрудник2);
		КонецЕсли;
		
		Для Каждого ТекСотрудник Из мсвСотрудники Цикл
			НоваяСтрока = Объект.РаботникиОрганизации.Добавить();
			НоваяСтрока.Сотрудник = ТекСотрудник;
			НоваяСтрока.ДатаНачала = Объект.ПЛ.ДатаВыезда;
			НоваяСтрока.ДатаОкончания = Объект.ПЛ.ДатаВозвращения;
			НоваяСтрока.ВремяНахожденияВПути = (НачалоДня(НоваяСтрока.ДатаОкончания) - НачалоДня(НоваяСтрока.ДатаНачала))/3600/24 + 1;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиСуммовыеИтогиДокумента()
	
	Если НЕ ЗначениеЗаполнено(Объект.ВалютаДокумента) ИЛИ Объект.ВалютаДокумента = мВалютаРегламентированногоУчета Тогда 
		Элементы.НадписьКурс.Видимость = Ложь;
	Иначе 
		НадписьКурс = "(" + Формат(Объект.Курс, "ЧДЦ=4; ЧРД=.; ЧН=0.0000; ЧГ=0") + ")";
		Элементы.НадписьКурс.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПравоРедактированиеДокумента()
	Рез = ПравоДоступа("Редактирование", Метаданные.Документы.уатКомандировкиОрганизаций);
	Возврат Рез;
КонецФункции

&НаКлиенте
Процедура РассчитатьСуммуДокумента()
	Объект.СуммаДокумента = Объект.РаботникиОрганизации.Итог("Сумма");
	ВывестиСуммовыеИтогиДокумента();
КонецПроцедуры

#КонецОбласти

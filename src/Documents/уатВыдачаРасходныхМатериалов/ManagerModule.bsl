#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки	 - Структура - настройки подсистемы.
//
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	Настройки.ПриПолученииСлужебныхРеквизитов = Ложь;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.Печать

// Заполняет список команд печати.
//
// Параметры:
//  КомандыПечати	 - ТаблицаЗначений	 - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатВыдачаРасходныхМатериалов";
	КомандаПечати.Идентификатор = "РаздаточнаяВедомостьНаТС";
	КомандаПечати.Представление = НСтр("en='Payroll on vehicle';ru='Раздаточная ведомость на ТС'");
	
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор  = "Реестр";
	КомандаПечати.Представление  = НСтр("en='Document register';ru='Реестр документов'");
	КомандаПечати.ЗаголовокФормы = НСтр("en='Register of documents ""Issue of consumables""';ru='Реестр документов ""Выдача расходных материалов""'");
	КомандаПечати.Обработчик     = "уатОбщегоНазначенияТиповыеКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм     = "ФормаСписка";
	КомандаПечати.Порядок        = 100;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр).
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной
//                                                            параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной
//                                            параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если НЕ уатОбщегоНазначенияСервер.РазрешениеПечатиНепроведенногоДокумента(МассивОбъектов) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "РаздаточнаяВедомостьНаТС") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "РаздаточнаяВедомостьНаТС",
			"Раздаточная ведомость на ТС", ПечатьРаздаточнаяВедомостьНаТС(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
	уатОбщегоНазначенияСервер.УстановитьРедактированиеПечатныхФормДокумента(КоллекцияПечатныхФорм);
	
КонецПроцедуры

// Получает дополнительные реквизиты для отображения в отчете "Реестр документов"
// 
// Возвращаемое значение:
//  Структура - доп. реквизитов
//
Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура("Информация", "Склад");
	Возврат Результат;
	
КонецФункции

// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.УправлениеДоступом

// Позволяет переопределить ограничение, указанное в модуле менеджера объекта метаданных.
//
// Параметры:
//  Ограничение - Структура:
//    * Текст                             - Строка - ограничение доступа для пользователей.
//                                          Если пустая строка, значит, доступ разрешен.
//    * ТекстДляВнешнихПользователей      - Строка - ограничение доступа для внешних пользователей.
//                                          Если пустая строка, значит, доступ запрещен.
//    * ПоВладельцуБезЗаписиКлючейДоступа - Неопределено - определить автоматически.
//                                        - Булево - если Ложь, то всегда записывать ключи доступа,
//                                          если Истина, тогда не записывать ключи доступа,
//                                          а использовать ключи доступа владельца (требуется,
//                                          чтобы ограничение было строго по объекту-владельцу).
//   * ПоВладельцуБезЗаписиКлючейДоступаДляВнешнихПользователей - Неопределено, Булево - также
//                                          как у параметра ПоВладельцуБезЗаписиКлючейДоступа.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Подразделение)";
	
	Ограничение.ТекстДляВнешнихПользователей = Ограничение.Текст;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	
	мЗапрос = Новый Запрос;
	мЗапрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаДокумента.Ссылка КАК Регистратор,
	|	ТаблицаДокумента.Ссылка.Дата КАК Период,
	|	ТаблицаДокумента.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокумента.Номенклатура КАК Номенклатура,
	|	ТаблицаДокумента.Количество * ЕСТЬNULL(ТаблицаДокумента.ЕдиницаИзмерения.Коэффициент, 1) / ТаблицаДокумента.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Количество,
	|	ТаблицаДокумента.ТС КАК ТС,
	|	ТаблицаДокумента.Водитель КАК Водитель,
	|	ТаблицаДокумента.Сумма КАК Стоимость,
	|	ТаблицаДокумента.Ссылка.Склад КАК Склад,
	|	ТаблицаДокумента.Ссылка.Склад.ТранзитнаяЯчейка КАК Ячейка,
	|	0 КАК СтоимостьУпр,
	|	0 КАК СуммаНДС
	|ИЗ
	|	Документ.уатВыдачаРасходныхМатериалов.Материалы КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка";
	
	мЗапрос.УстановитьПараметр("Ссылка",ДокументСсылка);
	ТаблицаДокумента = мЗапрос.Выполнить().Выгрузить();
	
	мВестиСкладскойУчетУАТ = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументСсылка.Организация,
		ПланыВидовХарактеристик.уатПраваИНастройки.ВестиСкладскойУчетУАТ);
	флЯчеистыйСклад = ПолучитьФункциональнуюОпцию("уатАдресноеХранение") = ИСТИНА
		И ДокументСсылка.Склад.АдресноеХранение;
		
	Если мВестиСкладскойУчетУАТ Тогда
		// управляемая блокировка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.уатПартииТоваровНаСкладах");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = ТаблицаДокумента;
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Склад", "Склад");
		Если флЯчеистыйСклад Тогда 
			ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.уатТоварыВЯчейках");
			ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
			ЭлементБлокировки.ИсточникДанных = ТаблицаДокумента;
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Склад", "Склад");
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ячейка", "Ячейка");
			ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
		КонецЕсли;
		Блокировка.Заблокировать();
		
		ТаблицаПартий = уатПроведение.ПолучитьТаблицуПартийДляСписания(ТаблицаДокумента,
			уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументСсылка.Организация,
			ПланыВидовХарактеристик.уатПраваИНастройки.СпособОценкиМПЗ),
			СтруктураДополнительныеСвойства.ДляПроведения.МоментКонтроля);
			
		ТаблицаПартий.Колонки.Добавить("ОсталосьКол");
		ТаблицаПартий.Колонки.Добавить("ОсталосьСтоимость");
		ТаблицаПартий.Колонки.Добавить("ОсталосьСтоимостьУпр");
		ТаблицаПартий.Колонки.Добавить("ОсталосьСуммаНДС");
		Для каждого ТекСтрокаПартий ИЗ ТаблицаПартий Цикл
			ТекСтрокаПартий.ОсталосьКол          = ТекСтрокаПартий.Количество;
			ТекСтрокаПартий.ОсталосьСтоимость    = ТекСтрокаПартий.Стоимость;
			ТекСтрокаПартий.ОсталосьСтоимостьУпр = ТекСтрокаПартий.СтоимостьУпр;
			ТекСтрокаПартий.ОсталосьСуммаНДС     = ТекСтрокаПартий.СуммаНДС;
		КонецЦикла;
		Для каждого ТекСтрокаДокумента ИЗ ТаблицаДокумента Цикл
			СписатьСтоимость    = 0;
			СписатьСтоимостьУпр = 0;
			СписатьСуммаНДС     = 0;
			ОсталосьСписать     = ТекСтрокаДокумента.Количество;
			
			Для каждого ТекСтрокаПартий Из ТаблицаПартий Цикл
				Если ТекСтрокаПартий.Номенклатура <> ТекСтрокаДокумента.Номенклатура 
				 ИЛИ ТекСтрокаПартий.ОсталосьКол = 0 тогда
					Продолжить;
				КонецЕсли;
				Если ОсталосьСписать = 0 тогда
					Прервать;
				КонецЕсли;
				СписатьКол = Мин(ТекСтрокаПартий.ОсталосьКол, ОсталосьСписать);
				Если СписатьКол = ТекСтрокаПартий.ОсталосьКол тогда
					СписатьСтоимость    = СписатьСтоимость    + ТекСтрокаПартий.ОсталосьСтоимость;
					СписатьСтоимостьУпр = СписатьСтоимостьУпр + ТекСтрокаПартий.ОсталосьСтоимостьУпр;
					СписатьСуммаНДС     = СписатьСуммаНДС     + ТекСтрокаПартий.ОсталосьСуммаНДС;
				Иначе
					СписатьСтоимость    = СписатьСтоимость    + Окр(ТекСтрокаПартий.ОсталосьСтоимость    / ТекСтрокаПартий.ОсталосьКол * СписатьКол,2);
					СписатьСтоимостьУпр = СписатьСтоимостьУпр + Окр(ТекСтрокаПартий.ОсталосьСтоимостьУпр / ТекСтрокаПартий.ОсталосьКол * СписатьКол,2);
					СписатьСуммаНДС     = СписатьСуммаНДС     + Окр(ТекСтрокаПартий.ОсталосьСуммаНДС     / ТекСтрокаПартий.ОсталосьКол * СписатьКол,2);
				КонецЕсли;
				ТекСтрокаПартий.ОсталосьКол          = ТекСтрокаПартий.ОсталосьКол          - СписатьКол;
				ТекСтрокаПартий.ОсталосьСтоимость    = ТекСтрокаПартий.ОсталосьСтоимость    - СписатьСтоимость;
				ТекСтрокаПартий.ОсталосьСтоимостьУпр = ТекСтрокаПартий.ОсталосьСтоимостьУпр - СписатьСтоимостьУпр;
				ТекСтрокаПартий.ОсталосьСуммаНДС     = ТекСтрокаПартий.ОсталосьСуммаНДС     - СписатьСуммаНДС;
				ОсталосьСписать = ОсталосьСписать - СписатьКол;
			КонецЦикла;
			ТекСтрокаДокумента.Стоимость    = СписатьСтоимость;
			ТекСтрокаДокумента.СтоимостьУпр = СписатьСтоимостьУпр;
			ТекСтрокаДокумента.СуммаНДС     = СписатьСуммаНДС;
		КонецЦикла;
		
	КонецЕсли;
	
	ТаблицаНоменклатурыТС = ТаблицаДокумента.Скопировать();
	
	Если мВестиСкладскойУчетУАТ Тогда
		ЗапросПартии = Новый Запрос();
		ЗапросПартии.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТабДанных.Склад КАК Склад,
		|	ТабДанных.Номенклатура КАК Номенклатура,
		|	ТабДанных.Партия КАК Партия,
		|	ТабДанных.Количество КАК Количество,
		|	ТабДанных.Стоимость КАК Стоимость,
		|	ТабДанных.СтоимостьУпр КАК СтоимостьУпр,
		|	ТабДанных.СуммаНДС КАК СуммаНДС
		|ПОМЕСТИТЬ ВремТаблицаПартий
		|ИЗ
		|	&ТаблицаПарам КАК ТабДанных
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
		|	&Период КАК Период,
		|	&Регистратор КАК Регистратор,
		|	ТабДанных.Склад КАК Склад,
		|	ТабДанных.Партия КАК Партия,
		|	ТабДанных.Номенклатура КАК Номенклатура,
		|	ТабДанных.Количество КАК Количество,
		|	ТабДанных.Стоимость КАК Стоимость,
		|	ТабДанных.СтоимостьУпр КАК СтоимостьУпр,
		|	ТабДанных.СуммаНДС КАК СуммаНДС
		|ИЗ
		|	ВремТаблицаПартий КАК ТабДанных";
		
		ЗапросПартии.УстановитьПараметр("Период"         , ДокументСсылка.Дата);
		ЗапросПартии.УстановитьПараметр("ТаблицаПарам"   , ТаблицаПартий);
		ЗапросПартии.УстановитьПараметр("Регистратор"    , ДокументСсылка);
		
		МассивРезультатов = ЗапросПартии.ВыполнитьПакет();
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПартии", МассивРезультатов[1].Выгрузить());
		
		Если флЯчеистыйСклад Тогда
			ЗапросЯчейки = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
			|	ТаблицаДокумента.Ссылка.Дата КАК Период,
			|	ТаблицаДокумента.Ссылка КАК Регистратор,
			|	ТаблицаДокумента.Ссылка.Склад КАК Склад,
			|	ТаблицаДокумента.Ссылка.Склад.ТранзитнаяЯчейка КАК Ячейка,
			|	ТаблицаДокумента.Номенклатура КАК Номенклатура,
			|	ТаблицаДокумента.Количество * ЕСТЬNULL(ТаблицаДокумента.ЕдиницаИзмерения.Коэффициент, 1) / ТаблицаДокумента.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Количество
			|ИЗ
			|	Документ.уатВыдачаРасходныхМатериалов.Материалы КАК ТаблицаДокумента
			|ГДЕ
			|	ТаблицаДокумента.Ссылка = &Ссылка");
			ЗапросЯчейки.УстановитьПараметр("Ссылка", ДокументСсылка);
			тблТоварыВЯчейках = ЗапросЯчейки.Выполнить().Выгрузить(); 
			
			СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаТоварыВЯчейках", тблТоварыВЯчейках);
		КонецЕсли;
	КонецЕсли;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДокумента"     , ТаблицаДокумента);
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаНоменклатурыТС", ТаблицаНоменклатурыТС);
	
	Если ПолучитьФункциональнуюОпцию("уатИспользоватьУчетДоходовИРасходов") = ИСТИНА Тогда
		СтатьяРасходовРемонт = Неопределено;
		Если Метаданные.Перечисления.уатВидыЗатрат.ЗначенияПеречисления.Найти("ВыдачаРасходныхМатериалов") = Неопределено Тогда
			ВидЗатратВыдачаРасходныхМатериалов = Неопределено;
		Иначе
			ВидЗатратВыдачаРасходныхМатериалов = Перечисления.уатВидыЗатрат.ВыдачаРасходныхМатериалов;
		КонецЕсли;
		
		Для Каждого ТекСтрока Из ДокументСсылка.ПланЗатрат.Расходы Цикл
			Если СтатьяРасходовРемонт = Неопределено
				И ВидЗатратВыдачаРасходныхМатериалов <> Неопределено
				И ТекСтрока.СтатьяРасходов.ВидЗатрат = ВидЗатратВыдачаРасходныхМатериалов Тогда
				СтатьяРасходовРемонт = ТекСтрока.СтатьяРасходов;
			КонецЕсли;
		КонецЦикла;
		
		ТаблицаРасходы = Новый ТаблицаЗначений;
		ТаблицаРасходы.Колонки.Добавить("СтатьяРасходов", Новый ОписаниеТипов("СправочникСсылка.уатСтатьиРасходов"));
		ТаблицаРасходы.Колонки.Добавить("СчетЗатрат", Новый ОписаниеТипов("ПланСчетовСсылка.уатРегламентированный"));
		ТаблицаРасходы.Колонки.Добавить("СуммаРегл", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2)));
		ТаблицаРасходы.Колонки.Добавить("СуммаУпр", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2)));
		ТаблицаРасходы.Колонки.Добавить("СуммаНДС", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2)));
		ТаблицаРасходы.Колонки.Добавить("СуммаНДСУпр", Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2)));
		ТаблицаРасходы.Колонки.Добавить("ТС", Новый ОписаниеТипов("СправочникСсылка.уатТС"));
		
		Если ЗначениеЗаполнено(СтатьяРасходовРемонт) Тогда
			Для Каждого ТекСтрока Из СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаНоменклатурыТС Цикл
				ТекСуммаНДСУпр = ?(ТекСтрока.Стоимость = 0, 0, ТекСтрока.СуммаНДС * ТекСтрока.СтоимостьУпр / ТекСтрока.Стоимость);
				
				НоваяСтрокаВрем                = ТаблицаРасходы.Добавить();
				НоваяСтрокаВрем.СтатьяРасходов = СтатьяРасходовРемонт;
				НоваяСтрокаВрем.СчетЗатрат     = СтатьяРасходовРемонт.Счет;
				НоваяСтрокаВрем.СуммаРегл      = ТекСтрока.Стоимость + ТекСтрока.СуммаНДС;
				НоваяСтрокаВрем.СуммаУпр       = ТекСтрока.СтоимостьУпр + ТекСуммаНДСУпр;
				НоваяСтрокаВрем.СуммаНДС       = ТекСтрока.СуммаНДС;
				НоваяСтрокаВрем.СуммаНДСУпр    = ТекСуммаНДСУпр;
				НоваяСтрокаВрем.ТС             = ТекСтрока.ТС;
			КонецЦикла;
		КонецЕсли;
		
		ТаблицаРасходы.Свернуть("СтатьяРасходов, СчетЗатрат, ТС", "СуммаРегл, СуммаУпр, СуммаНДС, СуммаНДСУпр");
		
		ТаблицаРасходы.Колонки.Добавить("Период");
		ТаблицаРасходы.ЗаполнитьЗначения(ДокументСсылка.Дата, "Период");
		ТаблицаРасходы.Колонки.Добавить("Регистратор");
		ТаблицаРасходы.ЗаполнитьЗначения(ДокументСсылка, "Регистратор");
		ТаблицаРасходы.Колонки.Добавить("Организация");
		ТаблицаРасходы.ЗаполнитьЗначения(ДокументСсылка.Организация, "Организация");
		ТаблицаРасходы.Колонки.Добавить("Подразделение");
		ТаблицаРасходы.ЗаполнитьЗначения(ДокументСсылка.Подразделение, "Подразделение");
		
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРасходы", ТаблицаРасходы);
	КонецЕсли;
	
КонецПроцедуры // ИнициализироватьДанныеДокумента()

Процедура ВыполнитьКонтроль(ДокументСсылка, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь) Экспорт
	
	Заголовок = уатОбщегоНазначенияТиповые.уатПредставлениеДокументаПриПроведении(ДокументСсылка);
	
	мЗапрос = Новый Запрос;
	мЗапрос.МенеджерВременныхТаблиц = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц; 
	мЗапрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаДокумента.Номенклатура КАК Номенклатура,
	|	ТаблицаДокумента.Ссылка КАК Регистратор,
	|	ЕСТЬNULL(уатПартииТоваровНаСкладахОстатки.КоличествоОстаток, 0) КАК КоличествоОстаток,
	|	ЕСТЬNULL(уатТоварыВЯчейкахОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЯчейка
	|ИЗ
	|	Документ.уатВыдачаРасходныхМатериалов.Материалы КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.уатПартииТоваровНаСкладах.Остатки(
	|				&МоментВремени,
	|				Склад = &Склад
	|					И Номенклатура В
	|						(ВЫБРАТЬ
	|							ТабНоменклатуры.Номенклатура
	|						ИЗ
	|							Документ.уатВыдачаРасходныхМатериалов.Материалы КАК ТабНоменклатуры
	|						ГДЕ
	|							ТабНоменклатуры.Ссылка = &Ссылка)) КАК уатПартииТоваровНаСкладахОстатки
	|		ПО ТаблицаДокумента.Номенклатура = уатПартииТоваровНаСкладахОстатки.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.уатТоварыВЯчейках.Остатки(
	|				&МоментВремени,
	|				Склад = &Склад
	|					И Ячейка = Склад.ТранзитнаяЯчейка
	|					И Номенклатура В
	|						(ВЫБРАТЬ
	|							ТабНоменклатуры.Номенклатура
	|						ИЗ
	|							Документ.уатВыдачаРасходныхМатериалов.Материалы КАК ТабНоменклатуры
	|						ГДЕ
	|							ТабНоменклатуры.Ссылка = &Ссылка)) КАК уатТоварыВЯчейкахОстатки
	|		ПО ТаблицаДокумента.Номенклатура = уатТоварыВЯчейкахОстатки.Номенклатура
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|	И (ЕСТЬNULL(уатПартииТоваровНаСкладахОстатки.КоличествоОстаток, 0) < 0
	|			ИЛИ ЕСТЬNULL(уатТоварыВЯчейкахОстатки.КоличествоОстаток, 0) < 0)";
	
	мЗапрос.УстановитьПараметр("Склад"        , ДокументСсылка.Склад);
	мЗапрос.УстановитьПараметр("Ссылка"       , ДокументСсылка);
	мЗапрос.УстановитьПараметр("МоментВремени", ДополнительныеСвойства.ДляПроведения.МоментКонтроля);
	
	Выборка = мЗапрос.Выполнить().Выбрать();
	
	Если ПолучитьФункциональнуюОпцию("уатАдресноеХранение") И ДокументСсылка.Склад.АдресноеХранение Тогда
		ТекстШаблона = "Обнаружен отрицательный остаток номенклатуры ""%1"" на складе ""%2"" (транзитная ячейка): %3";
	Иначе
		ТекстШаблона = "Обнаружен отрицательный остаток номенклатуры ""%1"" на складе ""%2"": %3";
	КонецЕсли;
	
	Если Выборка.Количество() тогда
		Пока Выборка.Следующий() Цикл
			ТекстНСТР = СтрШаблон(ТекстШаблона, Выборка.Номенклатура, мЗапрос.Параметры.Склад,
				Мин(Выборка.КоличествоОстаток, Выборка.КоличествоОстатокЯчейка));
			уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, Отказ, Заголовок);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Функция ПечатьРаздаточнаяВедомостьНаТС(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_ВыдачаРасходныхМатериалов";
	
	ПервыйДокумент = Истина;
	мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Для Каждого ТекущийДокумент Из МассивОбъектов Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
				
		ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ВыдачаРасходныхМатериалов";
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.уатВыдачаРасходныхМатериалов.ПФ_MXL_РаздаточнаяВедомостьНаТС");
		
		// Печать штрихкода
		Если уатЗащищенныеФункцииСервер_проф.ИспользоватьШтрихкодированиеОбъекта(ТекущийДокумент) Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокШтрихкод");
			уатЗащищенныеФункцииСервер_проф.ОтобразитьШКнаПФ(ОбластьМакета, ТекущийДокумент);
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ТекущийДокумент, "Выдача расходных материалов");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ОбластьМакета.Параметры.Склад = ТекущийДокумент.Склад;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьСтроки = Макет.ПолучитьОбласть("Строка");
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		НомерСтроки = 0;
		Для Каждого СтрокаТабличнойЧасти Из ТекущийДокумент.Материалы Цикл	
			
			НомерСтроки = НомерСтроки + 1;
			
			ОбластьСтроки.Параметры.Заполнить(СтрокаТабличнойЧасти);
			ОбластьСтроки.Параметры.ТСПредставление = Строка(СтрокаТабличнойЧасти.ТС);
			
			ОбластьСтроки.Параметры.Сумма = СтрокаТабличнойЧасти.Сумма;
			
			ТабличныйДокумент.Вывести(ОбластьСтроки);
			
		КонецЦикла;
		
		СуммаИтого = ТекущийДокумент.Материалы.Итог("Сумма");
		
		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		ОбластьМакета.Параметры.Всего = уатОбщегоНазначенияТиповые.уатФорматСумм(СуммаИтого);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		СуммаНДС = ТекущийДокумент.Материалы.Итог("СуммаНДС");
		
		Если ТекущийДокумент.УчитыватьНДС Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
			Если СуммаНДС <> 0 Тогда
				ОбластьМакета.Параметры.ВсегоНДС = уатОбщегоНазначенияТиповые.уатФорматСумм(СуммаНДС);
				ОбластьМакета.Параметры.НДС      = ?(ТекущийДокумент.СуммаВключаетНДС, "В том числе НДС:", " Сумма НДС:");
			Иначе
				ОбластьМакета.Параметры.НДС = "Без налога (НДС)";
				ОбластьМакета.Параметры.ВсегоНДС = "-";
			КонецЕсли;
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		СуммаКПрописи = СуммаИтого + ?(ТекущийДокумент.УчитыватьНДС И НЕ ТекущийДокумент.СуммаВключаетНДС, СуммаНДС, 0);
		ОбластьМакета.Параметры.ИтоговаяСтрока = "Всего выдано материалов " + НомерСтроки
		+ ", на сумму " + уатОбщегоНазначенияТиповые.уатФорматСумм(СуммаКПрописи, мВалютаРегламентированногоУчета);
		ОбластьМакета.Параметры.СуммаПрописью  = уатОбщегоНазначенияТиповые.уатСформироватьСуммуПрописью(СуммаКПрописи, мВалютаРегламентированногоУчета);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ОбластьМакета.Параметры.Заполнить(ТекущийДокумент);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ТекущийДокумент);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатнаяФорма()

#КонецОбласти


#КонецЕсли
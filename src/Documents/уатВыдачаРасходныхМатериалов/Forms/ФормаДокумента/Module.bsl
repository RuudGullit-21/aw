
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	уатЗащищенныеФункцииСервер.уатДокументФормаЭлементаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, Объект, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если Объект.Ссылка.Пустая() Тогда
		Если ЗначениеЗаполнено(Объект.Организация) Тогда
			ПриИзмененииОрганизации(Истина);
		КонецЕсли;
	КонецЕсли;
	
	ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Сотрудники");
	Элементы.Кладовщик.ОграничениеТипа = ОграничениеТипа;
	Элементы.Механик.ОграничениеТипа = ОграничениеТипа;
	
	мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	уатОбщегоНазначенияСервер.НастроитьПолеЕдиницыИзмерения(ЭтотОбъект, "Материалы");
	уатОбщегоНазначенияСервер.НастроитьПолеПодразделение(Элементы.Подразделение, "Объект.Организация");
	
	//ПодключаемоеОборудование
	уатОбщегоНазначения_проф.НастроитьПодключаемоеОборудование(ЭтотОбъект);
	//Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// уатУправлениеАвтотранспортом.МодификацияКонфигурации
	уатМодификацияКонфигурацииКлиентПереопределяемый.ПриОткрытии(ЭтотОбъект, Отказ);
	// Конец уатУправлениеАвтотранспортом.МодификацияКонфигурации
	
	уатЗащищенныеФункцииКлиент.уатДокументФормаЭлементаПриОткрытии(Отказ, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	//ПодключаемоеОборудование
	уатОбщегоНазначенияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(ЭтотОбъект);
	//Конец ПодключаемоеОборудование
	
	// Установить видимость реквизитов и заголовков колонок.
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ИсточникВыбора.ИмяФормы = "Обработка.уатПодборНоменклатуры.Форма.Форма" или ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.Форма" Тогда
		ОбработкаПодбора(Новый ОписаниеОповещения("ОбработкаВыбораЗавершение1", ЭтотОбъект, Новый Структура("ВыбранноеЗначение, ИсточникВыбора", ВыбранноеЗначение, ИсточникВыбора)), ИсточникВыбора.ИмяТаблицы, ВыбранноеЗначение);
        Возврат;
	ИначеЕсли   ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровВДокументЗакупки.Форма.Форма" Тогда
		ОбработкаПодбора(Новый ОписаниеОповещения("ОбработкаВыбораЗавершение", ЭтотОбъект), "Материалы", ВыбранноеЗначение);
        Возврат;
	КонецЕсли;
	ОбработкаВыбораФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораЗавершение1(Результат, ДополнительныеПараметры) Экспорт
    
    ВыбранноеЗначение = ДополнительныеПараметры.ВыбранноеЗначение;
    ИсточникВыбора = ДополнительныеПараметры.ИсточникВыбора;
    
    
    ОбработкаВыбораФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ОбработкаВыбораФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораФрагмент()
    
    Модифицированность = Истина;

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если ТекущийОбъект.ДополнительныеСвойства.Свойство("ВыполнитьУстановкуСтатусаЗаявкиНаРемонт") Тогда
		ВыполнитьУстановкуСтатусаЗаявкиНаРемонт = ТекущийОбъект.ДополнительныеСвойства.ВыполнитьУстановкуСтатусаЗаявкиНаРемонт;
		ТекущийОбъект.ДополнительныеСвойства.ВыполнитьУстановкуСтатусаЗаявкиНаРемонт = Неопределено;
	КонецЕсли;
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	Если ЗначениеЗаполнено(ВыполнитьУстановкуСтатусаЗаявкиНаРемонт) Тогда
		ОповеститьОбИзменении(ВыполнитьУстановкуСтатусаЗаявкиНаРемонт);
		
		ПараметрыФормы = Новый Структура("Ключ", ВыполнитьУстановкуСтатусаЗаявкиНаРемонт);
		ФормаЗаявкаНаРемонт = ПолучитьФорму("Документ.уатЗаявкаНаРемонт.Форма.ФормаДокумента", ПараметрыФормы);
		Если ФормаЗаявкаНаРемонт.Открыта() Тогда
			Если ФормаЗаявкаНаРемонт.Модифицированность Тогда
				СтатусВыполнения = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ВыполнитьУстановкуСтатусаЗаявкиНаРемонт, "СтатусВыполнения");
				ФормаЗаявкаНаРемонт.СтатусВыполненияПослеВыбораСтатуса(СтатусВыполнения, Неопределено);
				ФормаЗаявкаНаРемонт.ОбновитьОтображениеДанных();
			Иначе
				ФормаЗаявкаНаРемонт.Прочитать();
			КонецЕсли;
		КонецЕсли;
		ВыполнитьУстановкуСтатусаЗаявкиНаРемонт = Неопределено;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Оповещ = Новый ОписаниеОповещения("ДобавитьНоменклатуруВТЧПоШтрихкоду", ЭтотОбъект);
		уатОбщегоНазначенияКлиент.ОбработатьСобытиеПодключаемогоОборудования(ИмяСобытия, Параметр, Источник,
			Новый Структура("Оповещение", Оповещ));
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	// ПодключаемоеОборудование
	уатОбщегоНазначенияКлиент.ОбработкаВнешнегоСобытия(Источник, Событие, Данные);
	// Конец ПодключаемоеОборудование
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	// Обработка события изменения организации.
	Объект.УчитыватьНДС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
	ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.УчитыватьНДС"));
	Объект.СуммаВключаетНДС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
	ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.СуммаВключаетНДС"));
	ПриИзмененииОрганизации();
КонецПроцедуры

&НаКлиенте
Процедура КладовщикНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ДиалогВыбораСотрудника(Элемент, Объект.Кладовщик, Новый Структура("Организация", Объект.Организация), СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура КладовщикОткрытие(Элемент, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ОткрытьФормуСотрудника(Объект.Кладовщик, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура КладовщикАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура КладовщикОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура МеханикНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ДиалогВыбораСотрудника(Элемент, Объект.Механик, Новый Структура("Организация", Объект.Организация), СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура МеханикОткрытие(Элемент, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ОткрытьФормуСотрудника(Объект.Механик, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура МеханикАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура МеханикОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыМатериалы

&НаКлиенте
Процедура МатериалыПодбор(Команда)
	ПараметрыПодбора = ПолучитьПараметрыПодбора("Материалы");
	Если ПараметрыПодбора <> Неопределено Тогда
		уатОбщегоНазначенияТиповыеКлиент.уатОткрытьПодборНоменклатуры(ЭтотОбъект,ПараметрыПодбора,УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МатериалыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ОбновитьСписокВыбораЭкипажа();
	НачальнаяТипизацияВодителей();
КонецПроцедуры

&НаКлиенте
Процедура МатериалыНоменклатураПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Материалы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Количество) тогда
		СтрокаТабличнойЧасти.Количество = 1;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МатериалыЕдиницаИзмеренияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатОбщегоНазначенияКлиент.ТЧТоварыЕдиницаИзмеренияНачалоВыбора(Элементы.Материалы.ТекущиеДанные.Номенклатура, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура МатериалыТСПриИзменении(Элемент)
	ОбновитьСписокВыбораЭкипажа();
	НачальнаяТипизацияВодителей();
	
	ТекСтрока = Элементы.Материалы.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекСтрока.ТС)
		И уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрока.ТС, "ПринадлежностьТС")
		= ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное") Тогда
		МестонахождениеТС = уатОбщегоНазначения.МестонахождениеТС(ТекСтрока.ТС, Объект.Дата);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура МатериалыТСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтруктураОтбор = Новый Структура("Организация", Объект.Организация);
	уатИнтерфейсВводаТС.РеквизитТСНачалоВыбора(Элемент, Элементы.Материалы.ТекущиеДанные.ТС, ДанныеВыбора, СтандартнаяОбработка, СтруктураОтбор);
КонецПроцедуры

&НаКлиенте
Процедура МатериалыТСАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СтруктураОтбор = Новый Структура("Организация", Объект.Организация);
	уатИнтерфейсВводаТС.РеквизитТСАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка, СтруктураОтбор);
КонецПроцедуры

&НаКлиенте
Процедура МатериалыТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтруктураОтбор = Новый Структура("Организация", Объект.Организация);
	уатИнтерфейсВводаТС.РеквизитТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка, СтруктураОтбор);
КонецПроцедуры

&НаКлиенте
Процедура МатериалыВодительОчистка(Элемент, СтандартнаяОбработка)
	
	МассивТипов = Новый Массив();
	МассивТипов.Добавить(Тип("СправочникСсылка.Сотрудники"));
	МассивТипов.Добавить(Тип("СправочникСсылка.ФизическиеЛица"));
	ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
	
	Элемент.ОграничениеТипа = ОписаниеТипов;
	Элемент.СписокВыбора.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура МатериалыВодительОткрытие(Элемент, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ОткрытьФормуСотрудника(Элементы.Материалы.ТекущиеДанные.Водитель, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура МатериалыВодительАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Ожидание = 0 Тогда //выбор из списка
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура МатериалыВодительОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	Оповещ = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект);
	ПоказатьВводЗначения(Оповещ, "", "Введите штрихкод номенклатуры", Тип("Строка"));
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(Результат, ДопПараметры) Экспорт
	Если ЗначениеЗаполнено(Результат) Тогда
		ТекНоменклатура = уатЗащищенныеФункцииСервер_проф.ПолучитьОбъектПоШтрихкоду(Результат);
		ДобавитьНоменклатуруВТЧПоШтрихкоду(Новый Структура("Штрихкод, Объект", Результат, ТекНоменклатура));
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// Получает набор данных с сервера для процедуры НоменклатураПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.ЕдиницаХраненияОстатков);
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

&НаКлиенте
Процедура ОбновитьСписокВыбораЭкипажа()
	ТекСтрока = Элементы.Материалы.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.МатериалыВодитель.СписокВыбора.Очистить();
	
	ЭкипажТССписок = уатЗащищенныеФункцииСервер.ЭкипажТССписок(ТекСтрока.ТС, Объект.Дата);
	ЭкипажТССписок_Количество = ЭкипажТССписок.Количество();
	
	Элементы.МатериалыВодитель.КнопкаВыпадающегоСписка = (ЭкипажТССписок_Количество > 0);
	
	Если ЭкипажТССписок_Количество = 0 Тогда	
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекСотр Из ЭкипажТССписок Цикл
		Элементы.МатериалыВодитель.СписокВыбора.Добавить(ТекСотр.Значение);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура НачальнаяТипизацияВодителей()
	
	МассивТипов = Новый Массив();
	МассивТипов.Добавить(Тип("СправочникСсылка.Сотрудники"));
	ОписаниеТипов = Новый ОписаниеТипов(МассивТипов);
	
	Элементы.МатериалыВодитель.ОграничениеТипа = ОписаниеТипов;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЭтоУслуга(Знач Номенклатура)
	
	Возврат Номенклатура.Услуга;
	
КонецФункции // ЭтоУслуга()

&НаКлиенте
Функция ПолучитьПараметрыПодбора(ИмяТаблицы)

	ДатаРасчетов 	 = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	
	ЗаголовокПодбора = НСтр("en='Selection products and services in %1 (%2)';ru='Подбор номенклатуры в %1 (%2)'");
	ПредставлениеТаблицы = НСтр("en='Goods';ru='Товары'");
	ЗаголовокПодбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, Объект.Ссылка, НСтр("en='Goods';ru='Товары'"));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПоказыватьЦены", Ложь);
	ПараметрыФормы.Вставить("ЕстьЦена"      , Ложь);
	ПараметрыФормы.Вставить("ЕстьКоличество", Истина);
	ПараметрыФормы.Вставить("ДатаРасчетов"  , ДатаРасчетов);
	ПараметрыФормы.Вставить("Валюта"        , мВалютаРегламентированногоУчета);
	ПараметрыФормы.Вставить("Склад"         , Объект.Склад);
	ПараметрыФормы.Вставить("Заголовок"     , ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ВидПодбора"    , ПолучитьВидПодбора(ИмяТаблицы));
	ПараметрыФормы.Вставить("ИмяТаблицы"    , ИмяТаблицы);
	ПараметрыФормы.Вставить("Услуги"        , ИмяТаблицы = "Услуги");
	ПараметрыФормы.Вставить("Организация"   , Объект.Организация);
	ПараметрыФормы.Вставить("ПоказыватьОстатки"  , Истина);
	ПараметрыФормы.Вставить("ПоказыватьСчетУчета", Истина);

	Возврат ПараметрыФормы;

КонецФункции

&НаКлиенте
Функция ПолучитьВидПодбора(ИмяТаблицы)

	ВидПодбора = "";
	
	Возврат ВидПодбора;

КонецФункции

&НаСервере 
Функция ПолучитьТоварыИзВременногоХранилища(ЗначениеВыбора)
	
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ЗначениеВыбора);
	МассивТоваров = Новый Массив;
	Для Каждого ТекСтрока Из ТаблицаТоваров Цикл
		Структура = Новый Структура;
		Структура.Вставить("Номенклатура",ТекСтрока.Номенклатура);
		Структура.Вставить("ЕдиницаИзмерения", ТекСтрока.Номенклатура.ЕдиницаХраненияОстатков);
		Структура.Вставить("Количество",ТекСтрока.Количество);
		Структура.Вставить("Цена",ТекСтрока.Цена);
		МассивТоваров.Добавить(Структура);
	КонецЦикла;
	
	Возврат МассивТоваров;
КонецФункции

&НаКлиенте
Процедура УстановитьВидимость()
	Элементы.ПланЗатрат.Видимость = ИспользоватьУчетЗатрат();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаПодбора(Знач Оповещение, ИмяТабличнойЧасти, ЗначениеВыбора)
	
	Если ЗначениеВыбора.Свойство("АдресПодобраннойНоменклатурыВХранилище") Тогда
		МассивТоваров = ПолучитьТоварыИзВременногоХранилища(ЗначениеВыбора.АдресПодобраннойНоменклатурыВХранилище);
	Иначе
		МассивТоваров = ПолучитьТоварыИзВременногоХранилища(ЗначениеВыбора.АдресТоваровВХранилище);
	КонецЕсли;

	Для Каждого ТекСтрока из МассивТоваров Цикл
		Если ЭтоУслуга(ТекСтрока.Номенклатура) Тогда
			ТекстНСТР = НСтр("en='In this context, services are not matched!';ru='В данном контексте услуги не подбираются!'");
			ПоказатьПредупреждение(Новый ОписаниеОповещения("ОбработкаПодбораЗавершение", ЭтотОбъект,
			Новый Структура("Оповещение", Оповещение)), ТекстНСТР);
			Возврат;
		КонецЕсли;
	
		// Ищем выбранную позицию в таблице подобранной номенклатуры.
		// Если найдем - увеличим количество; не найдем - добавим новую строку.
		СтруктураОтбора = Новый Структура();
		
		СтруктураОтбора.Вставить("Номенклатура",     ТекСтрока.Номенклатура);
		СтруктураОтбора.Вставить("ЕдиницаИзмерения", ТекСтрока.ЕдиницаИзмерения);
		
		МассивСтрок = Объект.Материалы.НайтиСтроки(СтруктураОтбора);
		Если МассивСтрок.Количество() = 0 Тогда
			СтрокаТабличнойЧасти = Неопределено;
		Иначе
			СтрокаТабличнойЧасти = МассивСтрок[0];
		КонецЕсли;
		
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество +   ТекСтрока.Количество;
			//РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
		Иначе
			// Не нашли - добавляем новую строку.
			СтрокаТабличнойЧасти = Объект.Материалы.Добавить();
			СтрокаТабличнойЧасти.Номенклатура	  = ТекСтрока.Номенклатура;
			СтрокаТабличнойЧасти.Количество  	  = ТекСтрока.Количество;
			СтрокаТабличнойЧасти.ЕдиницаИзмерения =  ТекСтрока.ЕдиницаИзмерения;
		КонецЕсли;
	КонецЦикла;
	Если Не Оповещение = Неопределено Тогда 
		ВыполнитьОбработкуОповещения(Оповещение);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаПодбораЗавершение(ДополнительныеПараметры) Экспорт
    
    Оповещение = ДополнительныеПараметры.Оповещение;
    
	Если Не Оповещение = Неопределено Тогда 
		ВыполнитьОбработкуОповещения(Оповещение);
	КонецЕсли;

КонецПроцедуры //

&НаСервереБезКонтекста
Функция ИспользоватьУчетЗатрат()
	Возврат ПолучитьФункциональнуюОпцию("уатИспользоватьУчетДоходовИРасходов");
КонецФункции

&НаСервере
Процедура ПриИзмененииОрганизации(ВызовПриОткрытии = Ложь)
	Если ПолучитьФункциональнуюОпцию("уатИспользоватьУчетДоходовИРасходов") Тогда
		Если Не уатОбщегоНазначения.уатНайтиПланЗатрат(Объект.ПланЗатрат, Объект.Организация, Неопределено) Тогда
			
			ТекстНСТР = НСтр("en='Cost plan is not found!';ru='Не найден план затрат!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		КонецЕсли;	
	КонецЕсли;
	
	Элементы.ПланЗатрат.Видимость = ПолучитьФункциональнуюОпцию("уатИспользоватьУчетДоходовИРасходов");
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНоменклатуруВТЧПоШтрихкоду(Результат, ДопПараметры = Неопределено) Экспорт
	
	Если Результат = Неопределено ИЛИ НЕ ЗначениеЗаполнено(Результат.Объект)
		ИЛИ ТипЗнч(Результат.Объект) <> Тип("СправочникСсылка.Номенклатура") Тогда
		Возврат;
	КонецЕсли;
	Номенклатура = Результат.Объект;
	
	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	// Если найдем - увеличим количество; не найдем - добавим новую строку.
	МассивСтрок = Объект.Материалы.НайтиСтроки(Новый Структура("Номенклатура", Номенклатура));
	Если МассивСтрок.Количество() = 0 Тогда
		СтрокаТабличнойЧасти = Неопределено;
	Иначе
		СтрокаТабличнойЧасти = МассивСтрок[0];
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		// Нашли, увеличиваем количество в первой найденной строке.
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + 1;
	Иначе
		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти =  Объект.Материалы.Добавить();
		СтрокаТабличнойЧасти.Номенклатура = Номенклатура;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(
			СтрокаТабличнойЧасти.Номенклатура, "ЕдиницаХраненияОстатков");
		СтрокаТабличнойЧасти.Количество = 1;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

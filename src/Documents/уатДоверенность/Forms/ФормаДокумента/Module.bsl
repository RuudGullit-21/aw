
#Область ПеременныеФормы

&НаКлиенте
Перем ЕдиницаИзмеренияШтука; // Хранит ссылку на единицу по классификатору "Штука" для вставки при подборе

#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	уатЗащищенныеФункцииСервер.уатДокументФормаЭлементаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, Объект, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УчетОригиналовПервчиныхДокументов
	УчетОригиналовПервичныхДокументов.ПриСозданииНаСервере_ФормаДокумента(ЭтотОбъект, Элементы.ГруппаУчетПервичныхДокументов);
	уатУчетОригиналовПервичныхДокументов.ОтобразитьДатуПоследнегоИзмененияПервичныхДокументов(ЭтотОбъект, Элементы.ГруппаУчетПервичныхДокументов);
	// Конец СтандартныеПодсистемы.УчетОригиналовПервчиныхДокументов
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства

	// Нужно вернуть Маршрутный лист в качестве документа-основания после перезаполнения по Заказу на ТС
	Если ЗначениеЗаполнено(Параметры.ОснованиеМЛ) Тогда
		ОбъектДоверенность = РеквизитФормыВЗначение("Объект");
		ОбъектДоверенность.Основание = Параметры.ОснованиеМЛ;
		ЗначениеВРеквизитФормы(ОбъектДоверенность, "Объект");
	КонецЕсли;		
		
	// Ввод на основании Маршрутного листа
	Если ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.уатМаршрутныйЛист") Тогда
		
		// если ТС виртуальное, то нужно прекратить заполнение
		Если Параметры.Основание.ПринадлежностьПеревозки = Перечисления.уатПринадлежностьТС.Виртуальное Тогда
			Отказ = Истина;
			ТекстНСТР = НСтр("en='';ru='В текущем Маршрутном листе не назначен перевозчик. Создание Доверенностей запрещено!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР,,"Объект.Выработка");
			Возврат;
		КонецЕсли;
		
		// На основании каждого  Заказа на ТС из Маршрутного листа формируется отдельная Доверенность
		ДанныеЗаполненияЗаказ = Неопределено;
		ЗапросМЛ = Новый Запрос;
		ЗапросМЛ.Текст = "ВЫБРАТЬ РАЗЛИЧНЫЕ
		                 |	уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя КАК Заказ
		                 |ИЗ
		                 |	Документ.уатМаршрутныйЛист.Заказы КАК уатМаршрутныйЛистЗаказы
		                 |ГДЕ
		                 |	уатМаршрутныйЛистЗаказы.Ссылка = &МаршрутныйЛист
		                 |	И уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя <> ЗНАЧЕНИЕ(Документ.уатЗаказГрузоотправителя.ПустаяСсылка)";
		ЗапросМЛ.УстановитьПараметр("МаршрутныйЛист", Параметры.Основание);
		Результат = ЗапросМЛ.Выполнить();
		тзМаршрутныеЛистыИЗаказы = Результат.Выгрузить();
		
		// если Маршрутный лист не содержит Заказов на ТС, нужно прекратить заполнение
		КоличествоСтрок = тзМаршрутныеЛистыИЗаказы.Количество();
		Если КоличествоСтрок = 0 Тогда
			Отказ = Истина;
			ТекстНСТР = НСтр("en='';ru='Не найдены Заказы на ТС в текущем Маршрутном листе. Создание Доверенностей запрещено!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР,,"Объект.Выработка");
			Возврат;
		КонецЕсли;
		
		// продолжение заполнения данного документа на основании первого Заказа на ТС
		ОбъектДоверенность = РеквизитФормыВЗначение("Объект");
		ОбъектДоверенность.ДополнительныеСвойства.Вставить("ОснованиеМаршрутныйЛист",Параметры.Основание);
		ОбъектДоверенность.Заполнить(тзМаршрутныеЛистыИЗаказы[0].Заказ);
		ЗначениеВРеквизитФормы(ОбъектДоверенность, "Объект");
		
		// Формирование массива доп. документов из оставшихся Заказов на ТС 
		// для последующего создания в клиентском контексте при открытии формы
		мсвДопДок = Новый Массив;
		мсвДополнительныеДокументыКоличество = КоличествоСтрок-1;
		Для Инд = 1 По мсвДополнительныеДокументыКоличество Цикл
			мсвДопДок.Добавить(тзМаршрутныеЛистыИЗаказы[Инд].Заказ);	
		КонецЦикла;
		АдресХранилищаДопДокумент = ПоместитьВоВременноеХранилище(мсвДопДок, ЭтаФорма.УникальныйИдентификатор);
		мсвДополнительныеДокументыКоличество = мсвДопДок.Количество();;
					
	КонецЕсли;
	
	// Установка реквизитов формы.
	Контрагент = Объект.Контрагент;
	Договор = Объект.ДоговорКонтрагента;
    Основание = Объект.Основание;
	
	ТекущаяДатаДокумента = Объект.Дата;
	
	ОбновитьТипЗначенияСотрудника();
	ОбновитьТипЗначенияОснования();

	// Отбор по виду договора отключен, т.к. доверенность может выписываться и для грузоотправителя, и для грузополучателя
	уатОбщегоНазначенияСервер.НастроитьПолеДоговорКонтрагента(Элементы.ДоговорКонтрагента, "Объект.Организация", "Объект.Контрагент");
	
	// Заполнение банк.счета при интерактивном созданияи объекта без заполнения на основаниии
	Если Объект.Ссылка.Пустая() И ЗначениеЗаполнено(Объект.Организация) Тогда
		ПриИзмененииОрганизацииНаСервере();
	КонецЕсли;
	
	//ПодключаемоеОборудование
	уатОбщегоНазначения_проф.НастроитьПодключаемоеОборудование(ЭтотОбъект);
	//Конец ПодключаемоеОборудование
	
	// уатУправлениеАвтотранспортом.МодификацияКонфигурации
	уатМодификацияКонфигурацииПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	// Конец уатУправлениеАвтотранспортом.МодификацияКонфигурации
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// уатУправлениеАвтотранспортом.МодификацияКонфигурации
	уатМодификацияКонфигурацииКлиентПереопределяемый.ПриОткрытии(ЭтотОбъект, Отказ);
	// Конец уатУправлениеАвтотранспортом.МодификацияКонфигурации
	
	уатЗащищенныеФункцииКлиент.уатДокументФормаЭлементаПриОткрытии(Отказ, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// Создание отдельных новых документов на основании каждого Заказа на ТС из Маршрутного листа
	СоздатьДополнительныеДокументы();
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	//ПодключаемоеОборудование
	уатОбщегоНазначенияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(ЭтотОбъект);
	//Конец ПодключаемоеОборудование
	
	ВывестиПаспортныеДанные();
	ЕдиницаИзмеренияШтука = НайтиЕдиницуШтука();
		
	// Установить видимость реквизитов и заголовков колонок.
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ИсточникВыбора.ИмяФормы = "Обработка.уатПодборНоменклатуры.Форма.Форма" или ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.Форма" Тогда
		ОбработкаПодбора(ИсточникВыбора.ИмяТаблицы, ВыбранноеЗначение);
	КонецЕсли;
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов	
	УчетОригиналовПервичныхДокументовКлиент.ОбработчикОповещенияФормаДокумента(ИмяСобытия, ЭтотОбъект);
	// Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Оповещ = Новый ОписаниеОповещения("ДобавитьНоменклатуруВТЧПоШтрихкоду", ЭтотОбъект);
		уатОбщегоНазначенияКлиент.ОбработатьСобытиеПодключаемогоОборудования(ИмяСобытия, Параметр, Источник,
			Новый Структура("Оповещение", Оповещ));
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	// ПодключаемоеОборудование
	уатОбщегоНазначенияКлиент.ОбработкаВнешнегоСобытия(Источник, Событие, Данные);
	// Конец ПодключаемоеОборудование
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

// уатУправлениеАвтотранспортом.МодификацияКонфигурации
&НаКлиенте
Процедура Подключаемый_ПолеФормыНажатие(Элемент, СтандартнаяОбработка)
	
	уатМодификацияКонфигурацииКлиентПереопределяемый.ПолеФормыНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры
// Конец уатУправлениеАвтотранспортом.МодификацияКонфигурации

&НаКлиенте
Процедура Подключаемый_ДекорацияСостояниеОригиналаНажатие()

	// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	УчетОригиналовПервичныхДокументовКлиент.ОткрытьМенюВыбораСостояния(ЭтотОбъект, Элементы.ДекорацияСостояниеОригинала);
	//Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов

КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	// Если дата действия отличалась на 10 дней, т.е. не была исправлена, надо ее поправить
	Если (НачалоДня(Объект.ДатаДействия) - НачалоДня(ТекущаяДатаДокумента) = 10 * (24 * 60 * 60)) Тогда
		Объект.ДатаДействия = Объект.Дата + 10 * (24 * 60 * 60);
	КонецЕсли;
	
	ТекущаяДатаДокумента = Объект.Дата;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	// Обработка события изменения организации.
	Если НЕ уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ВестиСкладскойУчетУАТ")) Тогда
		
		ТекстНСТР = НСтр("en='For company ""%1"" the possibility of inventory management with FMS documents is disabled!';ru='Для организации ""%1"" отключена возможность ведения складского учета документами УАТ!'");
		ТекстНСТР = СтрШаблон(ТекстНСТР, Объект.Организация);
		ПоказатьПредупреждение(Новый ОписаниеОповещения("ОрганизацияПриИзмененииФрагмент", ЭтотОбъект), ТекстНСТР, 5);
        Возврат;
	КонецЕсли;
	
	ОрганизацияПриИзмененииФрагмент(Неопределено); 
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзмененииФрагмент(ДополнительныеПараметры) Экспорт
    
    ПриИзмененииКонтрагентаИлиОрганизации();
	ПриИзмененииОрганизацииНаСервере();

КонецПроцедуры

&НаСервере
Процедура ПриИзмененииОрганизацииНаСервере()

	Если НЕ ЗначениеЗаполнено(Объект.БанковскийСчетОрганизации) 
		ИЛИ (ПолучитьОрганизациюПоСчетуНаСервере(Объект.БанковскийСчетОрганизации) <> Объект.Организация) Тогда
		
		Объект.БанковскийСчетОрганизации = ПолучитьСчетПоОрганизацииНаСервере(Объект.Организация);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПолучитьСчетПоОрганизацииНаСервере(ТекОрганизация)

	Если ЗначениеЗаполнено(ТекОрганизация)
		И ТипЗнч(ТекОрганизация) = Тип("СправочникСсылка.Организации") Тогда
		
		Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитСправочника("ОсновнойБанковскийСчет", "Организации") Тогда
			Возврат ТекОрганизация.ОсновнойБанковскийСчет;
		КонецЕсли;
	Иначе
		Если Метаданные.Справочники.Найти("БанковскиеСчета") <> Неопределено Тогда
			Возврат Справочники.БанковскиеСчета.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;

КонецФункции // ПолучитьСчетПоОрганизацииНаСервере()

&НаСервере
Функция ПолучитьОрганизациюПоСчетуНаСервере(ТекСчет)

	Если ЗначениеЗаполнено(ТекСчет) Тогда
		Возврат ТекСчет.Владелец;
	Иначе 
		Возврат Справочники.Организации.ПустаяСсылка();
	КонецЕсли;

КонецФункции // ПолучитьОрганизациюПоСчетуНаСервере()

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПередИзменением = Контрагент;
	Контрагент = Объект.Контрагент;
	
	Если КонтрагентПередИзменением <> Объект.Контрагент Тогда
		
		ПриИзмененииКонтрагентаИлиОрганизации();
		
	КонецЕсли;

	Объект.НаПолучениеОт = ПолучитьПолноеНаименованиеКонтрагента(Объект.Контрагент);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	ДоговорПередИзменением = Договор;
	Договор = Объект.ДоговорКонтрагента;
	
	// уатУправлениеАвтотранспортом.МодификацияКонфигурации
	уатМодификацияКонфигурацииКлиентПереопределяемый.ПолеФормыПриИзменении(ЭтотОбъект, Элементы.ДоговорКонтрагента);
	// Конец уатУправлениеАвтотранспортом.МодификацияКонфигурации
	
КонецПроцедуры

&НаКлиенте
Процедура СотрудникПриИзменении(Элемент)
	ВывестиПаспортныеДанные();
КонецПроцедуры

&НаКлиенте
Процедура СотрудникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Объект.ТипДоверенногоЛица = 0 Тогда
		уатЗащищенныеФункцииКлиент.ДиалогВыбораСотрудника(Элемент, Объект.ДоверенноеЛицо, Новый Структура("Организация", Объект.Организация), СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СотрудникОткрытие(Элемент, СтандартнаяОбработка)
	Если Объект.ТипДоверенногоЛица = 0 Тогда
		уатЗащищенныеФункцииКлиент.ОткрытьФормуСотрудника(Объект.ДоверенноеЛицо, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СотрудникАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Объект.ТипДоверенногоЛица = 0 Тогда
		СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
		уатИнтерфейсВводаСотрудников.СотрудникАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СотрудникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	Если Объект.ТипДоверенногоЛица = 0 Тогда
		СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
		уатИнтерфейсВводаСотрудников.СотрудникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
	КонецЕсли;		
КонецПроцедуры

&НаКлиенте
Процедура ОснованиеПриИзменении(Элемент)
	
	// обработка выполняется, только если значение поля действительно изменилось
	Если НЕ Основание = Объект.Основание Тогда
		Ответ = Неопределено;
		
		// формирование представления документа
		НовоеПредставлениеДокумента = ПолучитьПредставлениеОснования(Объект.Основание);
		
		// Если реквизит не пустой и отличается от сформированного представления документа -
		// предлагается перезаполнение
		Если ЗначениеЗаполнено(НовоеПредставлениеДокумента) 
			И ЗначениеЗаполнено(Объект.ПоДокументу) 
			И НЕ Объект.ПоДокументу = НовоеПредставлениеДокумента Тогда
			ПоказатьВопрос(Новый ОписаниеОповещения("ОснованиеПриИзмененииЗавершение", ЭтотОбъект,
				Новый Структура("НовоеПредставлениеДокумента", НовоеПредставлениеДокумента)),
				НСтр("en='Change attribute ""On document""?';ru='Перезаполнить значение реквизита ""По документу""?'"),
				РежимДиалогаВопрос.ДаНет);
			Возврат;
		КонецЕсли;
		
		// если решено что-то сделать или документ пустой, записывается новое значение
		ОснованиеПриИзмененииЗавершение(Ответ, Новый Структура("НовоеПредставлениеДокумента", НовоеПредставлениеДокумента));
		
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ОснованиеПриИзмененииЗавершение(Знач Ответ, Знач ДополнительныеПараметры) Экспорт
    
    Если Ответ = КодВозвратаДиалога.Да ИЛИ НЕ ЗначениеЗаполнено(Объект.ПоДокументу) Тогда
        Объект.ПоДокументу = ДополнительныеПараметры.НовоеПредставлениеДокумента;
    КонецЕсли;			   
    
    // запоминается новое текущее значение документа расчетов
    Основание = Объект.Основание;

КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// уатУправлениеАвтотранспортом.МодификацияКонфигурации
&НаКлиенте
Процедура Подключаемый_уатВыполнитьКоманду(Команда)
	
	уатМодификацияКонфигурацииКлиентПереопределяемый.ВыполнитьПодключаемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры
// Конец уатУправлениеАвтотранспортом.МодификацияКонфигурации

&НаКлиенте
Процедура ОперацияГруз(Команда)
	
	Если Элементы.ФормаОперацияГруз.Пометка Тогда 
		Возврат;
	КонецЕсли;	
	
	Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийДоверенность.Груз");
	Объект.ПоДокументу = "";
	Объект.Основание = Неопределено;
	
	ОбновитьТипЗначенияОснования();	
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацияЗапчасти(Команда)
	
	Если Элементы.ФормаОперацияЗапчасти.Пометка Тогда 
		Возврат;
	КонецЕсли;
	
	Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийДоверенность.Запчасти");
	Объект.ПоДокументу = "";
	Объект.Основание = Неопределено;
	
	ОбновитьТипЗначенияОснования();	
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипПодотчетногоЛицаПриИзменении(Элемент)
	ОбновитьТипЗначенияСотрудника();	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	Оповещ = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект);
	ПоказатьВводЗначения(Оповещ, "", "Введите штрихкод номенклатуры", Тип("Строка"));
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(Результат, ДопПараметры) Экспорт
	Если ЗначениеЗаполнено(Результат) Тогда
		ТекНоменклатура = уатЗащищенныеФункцииСервер_проф.ПолучитьОбъектПоШтрихкоду(Результат);
		ДобавитьНоменклатуруВТЧПоШтрихкоду(Новый Структура("Штрихкод, Объект", Результат, ТекНоменклатура));
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
    УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
    УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
    УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ПриИзмененииКонтрагентаИлиОрганизации()
	
	ДанныеОбменаССервером = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, Дата");
	ЗаполнитьЗначенияСвойств(ДанныеОбменаССервером, Объект);
	// Получим данные с сервера
	ДанныеОбменаССервером.ДоговорКонтрагента = Объект.ДоговорКонтрагента;
	ЗначенияДляЗаполнения = ИзменениеКонтрагентаСервер(ДанныеОбменаССервером);
	Объект.ДоговорКонтрагента = ЗначенияДляЗаполнения.ДоговорКонтрагента;
	
	ДоговорПередИзменением = Договор;
	Договор = Объект.ДоговорКонтрагента;
	
КонецПроцедуры // ПриИзмененииКонтрагентаИлиОрганизации()

&НаСервереБезКонтекста
Функция ИзменениеКонтрагентаСервер(ДанныеДляЗаполнения)
	СтруктураПараметровДляПолученияДоговора =
		уатЗаполнениеДокументов.ПолучитьСтруктуруПараметровДляПолученияДоговораПокупки();
	
	ЗначенияДляЗаполнения = уатОбщегоНазначенияСервер.ПриИзмененииЗначенияКонтрагента(ДанныеДляЗаполнения,
							СтруктураПараметровДляПолученияДоговора);
	Возврат ЗначенияДляЗаполнения;
КонецФункции

&НаКлиенте
Процедура УстановитьВидимость()
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийДоверенность.Запчасти") 
		Или Объект.ВидОперации.Пустая() Тогда
		Элементы.ФормаОперацияЗапчасти.Пометка = Истина;
		Элементы.ФормаОперацияГруз.Пометка = Ложь;
		Элементы.Подбор.Видимость = Ложь;
		Элементы.ТоварыТоварыПодбор.Видимость = Истина;
		Элементы.ЗаказГрузоотправителя.Видимость = Ложь;
	Иначе
		Элементы.ФормаОперацияЗапчасти.Пометка = Ложь;
		Элементы.ФормаОперацияГруз.Пометка = Истина;
		Элементы.Подбор.Видимость = Истина;
		Элементы.ТоварыТоварыПодбор.Видимость = Ложь;
		Если ТипЗнч(Объект.Основание) = Тип("ДокументСсылка.уатМаршрутныйЛист") Тогда
			Элементы.ЗаказГрузоотправителя.Видимость = Истина;
		Иначе
			Элементы.ЗаказГрузоотправителя.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПодбор(Команда)
	ПараметрыПодбора = ПолучитьПараметрыПодбора("Товары");
	Если ПараметрыПодбора <> Неопределено Тогда
		уатОбщегоНазначенияТиповыеКлиент.уатОткрытьПодборНоменклатуры(ЭтотОбъект,ПараметрыПодбора,УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВидыГрузовПодбор(Команда)
	
	ПараметрыОткрытия = Новый Структура;
	ОповещениеОВыбореРаботы = Новый ОписаниеОповещения("ВидыГрузовВыборПродолжение", ЭтотОбъект);
	ОткрытьФорму("Справочник.уатВидыГрузов.ФормаВыбора", ПараметрыОткрытия, ЭтаФорма,,,, ОповещениеОВыбореРаботы, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

// Динамически подключаемый обработчик выбора работы.
&НаКлиенте
Процедура ВидыГрузовВыборПродолжение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатЗакрытия = Неопределено Тогда
		СтрокаТабличнойЧасти = Объект.Товары.Добавить();
		СтрокаТабличнойЧасти.НаименованиеТовара  		= РезультатЗакрытия;
		СтрокаТабличнойЧасти.Количество  	  			= 1;
		СтрокаТабличнойЧасти.ЕдиницаКлассификатор 		= ЕдиницаИзмеренияШтука;
	КонецЕсли;
	
КонецПроцедуры

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
&НаКлиенте
Процедура ОбработкаПодбора(ИмяТабличнойЧасти, ЗначениеВыбора)

	Если ЗначениеВыбора.Свойство("АдресПодобраннойНоменклатурыВХранилище") Тогда
		МассивТоваров = ПолучитьТоварыИзВременногоХранилища(ЗначениеВыбора.АдресПодобраннойНоменклатурыВХранилище);
	Иначе
		МассивТоваров = ПолучитьТоварыИзВременногоХранилища(ЗначениеВыбора.АдресТоваровВХранилище);
	КонецЕсли;

	Для Каждого ТекСтрока из МассивТоваров Цикл
		
		// Ищем выбранную позицию в таблице подобранной номенклатуры.
		// Если найдем - увеличим количество; не найдем - добавим новую строку.
		СтруктураОтбора = Новый Структура();
		
		СтруктураОтбора.Вставить("НаименованиеТовара",     	ТекСтрока.Номенклатура);
		СтруктураОтбора.Вставить("ЕдиницаКлассификатор", 	ТекСтрока.ЕдиницаИзмерения);
		
		МассивСтрок = Объект.Товары.НайтиСтроки(СтруктураОтбора);
		Если МассивСтрок.Количество() = 0 Тогда
			СтрокаТабличнойЧасти = Неопределено;
		Иначе
			СтрокаТабличнойЧасти = МассивСтрок[0];
		КонецЕсли;
		
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + ТекСтрока.Количество;
		Иначе
			// Не нашли - добавляем новую строку.
			СтрокаТабличнойЧасти = Объект.Товары.Добавить();
			СтрокаТабличнойЧасти.НаименованиеТовара  = ТекСтрока.Номенклатура;
			СтрокаТабличнойЧасти.Количество  	  = ТекСтрока.Количество;
			СтрокаТабличнойЧасти.ЕдиницаКлассификатор =  ТекСтрока.ЕдиницаИзмерения;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры 

&НаСервере
Функция ВернутьФизЛицо(Сотрудник)
	Если Объект.ТипДоверенногоЛица = 0 Тогда
		Возврат Сотрудник.ФизическоеЛицо;
	Иначе
		Возврат Сотрудник;
	КонецЕсли;
КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыПодбора(ИмяТаблицы)

	ДатаРасчетов 	 = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	
	ЗаголовокПодбора = НСтр("en='Selection products and services in %1 (%2)';ru='Подбор номенклатуры в %1 (%2)'");
	ПредставлениеТаблицы = НСтр("en='Goods';ru='Товары'");
	ЗаголовокПодбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, Объект.Ссылка, НСтр("en='Goods';ru='Товары'"));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПоказыватьЦены", Ложь);
	ПараметрыФормы.Вставить("ЕстьЦена"      , Ложь);
	ПараметрыФормы.Вставить("ЕстьКоличество", Истина);
	ПараметрыФормы.Вставить("ДатаРасчетов"  , ДатаРасчетов);
	//ПараметрыФормы.Вставить("Валюта"        , ВалютаВзаиморасчетов);
	//ПараметрыФормы.Вставить("Склад"         , Объект.Склад);
	ПараметрыФормы.Вставить("Заголовок"     , ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ВидПодбора"    , ПолучитьВидПодбора(ИмяТаблицы));
	ПараметрыФормы.Вставить("ИмяТаблицы"    , ИмяТаблицы);
	ПараметрыФормы.Вставить("Услуги"        , ИмяТаблицы = "Услуги");
	ПараметрыФормы.Вставить("Организация"   , Объект.Организация);
	ПараметрыФормы.Вставить("ПоказыватьОстатки"  , Истина);
	ПараметрыФормы.Вставить("ПоказыватьСчетУчета", Истина);

	Возврат ПараметрыФормы;

КонецФункции

&НаКлиенте
Функция ПолучитьВидПодбора(ИмяТаблицы)

	ВидПодбора = "";
	Возврат ВидПодбора;

КонецФункции

&НаСервере 
Функция ПолучитьТоварыИзВременногоХранилища(ЗначениеВыбора)
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ЗначениеВыбора);
	МассивТоваров = Новый Массив;
	Для Каждого ТекСтрока Из ТаблицаТоваров Цикл
		Структура = Новый Структура;
		Структура.Вставить("Номенклатура",ТекСтрока.Номенклатура);
		Структура.Вставить("ЕдиницаИзмерения", ТекСтрока.Номенклатура.ЕдиницаИзмерения);
		Структура.Вставить("Количество",ТекСтрока.Количество);
		Структура.Вставить("Цена",ТекСтрока.Цена);
		МассивТоваров.Добавить(Структура);
	КонецЦикла;
	
	Возврат МассивТоваров;
КонецФункции


// Процедура возвращает паспортные данные физлица в виде строки
//
// Параметры: 
//  ФизЛицо - ссылка на элемент справочника "Физические лица",по которому необходимо
//            получить паспортные данные.
//
// Возвращаемое значение:
//  Строка с данными об удостоверении личности физического лица
//
&НаСервереБезКонтекста
Функция ПаспортныеДанныеСтрокой(ФизЛицо)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ФизЛицо", ФизЛицо);
	Запрос.УстановитьПараметр("ДатаПолучения", ТекущаяДатаСеанса());
	Запрос.Текст = "ВЫБРАТЬ
	               |	ДокументыФизическихЛицСрезПоследних.Представление КАК Представление
	               |ИЗ
	               |	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(&ДатаПолучения, Физлицо = &Физлицо) КАК ДокументыФизическихЛицСрезПоследних
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ДокументыФизическихЛицСрезПоследних.ЯвляетсяДокументомУдостоверяющимЛичность УБЫВ,
	               |	ДокументыФизическихЛицСрезПоследних.Период УБЫВ";
	Выборка	= Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Представление;
	Иначе
		Возврат НСтр("en='There are no data of identity card';ru='Отсутствуют данные об удостоверении личности'");
	КонецЕсли;
	
КонецФункции // ПолучитьПаспортныеДанныеСтрокой()

&НаСервере
Процедура ОбновитьТипЗначенияСотрудника()
	Если Объект.ТипДоверенногоЛица = 0 Тогда
		Элементы.ДоверенноеЛицо.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Сотрудники");
	Иначе
		Элементы.ДоверенноеЛицо.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьТипЗначенияОснования()
	Если Объект.ВидОперации = Перечисления.уатВидыОперацийДоверенность.Груз Тогда
		МассивТипов = Новый Массив;
	    МассивТипов.Добавить(Тип("ДокументСсылка.уатЗаказГрузоотправителя"));
	    МассивТипов.Добавить(Тип("ДокументСсылка.уатМаршрутныйЛист"));
	    Элементы.Основание.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
	Иначе
		МассивТипов = Новый Массив;
	    МассивТипов.Добавить(Тип("ДокументСсылка.уатРеализацияУслуг"));
	    МассивТипов.Добавить(Тип("ДокументСсылка.уатПоступлениеТоваровУслуг"));
	    Элементы.Основание.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВывестиПаспортныеДанные()
	
	// Информация об удостоверении личности
	Если ЗначениеЗаполнено(Объект.ДоверенноеЛицо) Тогда
		ПаспортныеДанные = ПаспортныеДанныеСтрокой(ВернутьФизЛицо(Объект.ДоверенноеЛицо));
	Иначе
		ПаспортныеДанные = НСтр("en='There are no data of identity card';ru='Отсутствуют данные об удостоверении личности'");
	КонецЕсли;

КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиЕдиницуШтука()
	
	Возврат Документы.уатДоверенность.НайтиЕдиницуШтука();
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПолноеНаименованиеКонтрагента(Контрагент)
	
	Возврат Документы.уатДоверенность.ПолучитьПолноеНаименованиеКонтрагента(Контрагент);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПредставлениеОснования(Основание)
	
	Возврат Документы.уатДоверенность.ПолучитьПредставлениеОснования(Основание);
	
КонецФункции

&НаКлиенте
Процедура СоздатьДополнительныеДокументы()
	Если мсвДополнительныеДокументыКоличество > 0 Тогда
		мсвДопДок = ПолучитьИзВременногоХранилища(АдресХранилищаДопДокумент);
		Для Сч = 0 По мсвДополнительныеДокументыКоличество-1 Цикл
			ПараметрыНовойФормы = Новый Структура;
			ПараметрыНовойФормы.Вставить("Основание", мсвДопДок[Сч]);
			ПараметрыНовойФормы.Вставить("ОснованиеМЛ", Объект.Основание);
			ОткрытьФорму("Документ.уатДоверенность.Форма.ФормаДокумента",ПараметрыНовойФормы,,,,,,РежимОткрытияОкнаФормы.Независимый); 
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНоменклатуруВТЧПоШтрихкоду(Результат, ДопПараметры = Неопределено) Экспорт
	
	Если Результат = Неопределено ИЛИ НЕ ЗначениеЗаполнено(Результат.Объект)
		ИЛИ ТипЗнч(Результат.Объект) <> Тип("СправочникСсылка.Номенклатура") Тогда
		Возврат;
	КонецЕсли;
	Номенклатура = Строка(Результат.Объект);
	
	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	// Если найдем - увеличим количество; не найдем - добавим новую строку.
	МассивСтрок = Объект.Товары.НайтиСтроки(Новый Структура("НаименованиеТовара", Номенклатура));
	Если МассивСтрок.Количество() = 0 Тогда
		СтрокаТабличнойЧасти = Неопределено;
	Иначе
		СтрокаТабличнойЧасти = МассивСтрок[0];
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		// Нашли, увеличиваем количество в первой найденной строке.
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + 1;
	Иначе
		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти =  Объект.Товары.Добавить();
		СтрокаТабличнойЧасти.НаименованиеТовара = Номенклатура;
		СтрокаТабличнойЧасти.Количество = 1;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

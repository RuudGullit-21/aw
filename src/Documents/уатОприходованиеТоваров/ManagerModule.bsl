#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	Настройки.ПриПолученииСлужебныхРеквизитов = Ложь;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатОприходованиеТоваров";
	КомандаПечати.Идентификатор = "Накладная";
	КомандаПечати.Представление = НСтр("en='Taking goods on charge';ru='Оприходование товаров'");
	
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор  = "Реестр";
	КомандаПечати.Представление  = НСтр("en='Document register';ru='Реестр документов'");
	КомандаПечати.ЗаголовокФормы = НСтр("en='Register of documents ""Taking goods on charge""';ru='Реестр документов ""Оприходование товаров""'");
	КомандаПечати.Обработчик     = "уатОбщегоНазначенияТиповыеКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм     = "ФормаСписка";
	КомандаПечати.Порядок        = 100;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр).
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной
//                                                            параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной
//                                            параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если НЕ уатОбщегоНазначенияСервер.РазрешениеПечатиНепроведенногоДокумента(МассивОбъектов) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Накладная") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Накладная",
			"Оприходование товаров", ПечатьНакладная(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
	уатОбщегоНазначенияСервер.УстановитьРедактированиеПечатныхФормДокумента(КоллекцияПечатныхФорм);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.УправлениеДоступом

// Позволяет переопределить ограничение, указанное в модуле менеджера объекта метаданных.
//
// Параметры:
//  Ограничение - Структура:
//    * Текст                             - Строка - ограничение доступа для пользователей.
//                                          Если пустая строка, значит, доступ разрешен.
//    * ТекстДляВнешнихПользователей      - Строка - ограничение доступа для внешних пользователей.
//                                          Если пустая строка, значит, доступ запрещен.
//    * ПоВладельцуБезЗаписиКлючейДоступа - Неопределено - определить автоматически.
//                                        - Булево - если Ложь, то всегда записывать ключи доступа,
//                                          если Истина, тогда не записывать ключи доступа,
//                                          а использовать ключи доступа владельца (требуется,
//                                          чтобы ограничение было строго по объекту-владельцу).
//   * ПоВладельцуБезЗаписиКлючейДоступаДляВнешнихПользователей - Неопределено, Булево - также
//                                          как у параметра ПоВладельцуБезЗаписиКлючейДоступа.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Подразделение)";
	
	Ограничение.ТекстДляВнешнихПользователей = Ограничение.Текст;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// СтандартныеПодсистемы.ВариантыОтчетов

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВариантыОтчетов

#КонецОбласти

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	
	мЗапрос = Новый Запрос;
	мЗапрос.УстановитьПараметр("Ссылка",ДокументСсылка);
	мЗапрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	мЗапрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	уатОприходованиеТоваровТовары.Ссылка.Дата КАК Период,
	|	уатОприходованиеТоваровТовары.Ссылка КАК Регистратор,
	|	уатОприходованиеТоваровТовары.Ссылка.Склад КАК Склад,
	|	&Партия КАК Партия,
	|	уатОприходованиеТоваровТовары.Номенклатура,
	|	уатОприходованиеТоваровТовары.ЕдиницаИзмерения,
	|	уатОприходованиеТоваровТовары.Количество * ЕСТЬNULL(уатОприходованиеТоваровТовары.ЕдиницаИзмерения.Коэффициент, 1) / уатОприходованиеТоваровТовары.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Количество,
	|	уатОприходованиеТоваровТовары.Цена,
	|	уатОприходованиеТоваровТовары.Сумма
	|ПОМЕСТИТЬ ТаблицаДокументаТовары
	|ИЗ
	|	Документ.уатОприходованиеТоваров.Товары КАК уатОприходованиеТоваровТовары
	|ГДЕ
	|	уатОприходованиеТоваровТовары.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаДокументаТовары.Склад,
	|	ТаблицаДокументаТовары.Партия,
	|	ТаблицаДокументаТовары.Номенклатура
	|ИЗ
	|	ТаблицаДокументаТовары КАК ТаблицаДокументаТовары";
	
	Если уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументСсылка.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.СпособОценкиМПЗ) <> Перечисления.СпособыОценки.ПоСредней Тогда
		мЗапрос.УстановитьПараметр("Партия", ДокументСсылка);
	Иначе
		мЗапрос.УстановитьПараметр("Партия", Неопределено);
	КонецЕсли;
	
	МассивРезультатов = мЗапрос.ВыполнитьПакет();
	
	мЗапрос.Текст = 	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Товары.ВидДвижения,
	|	Товары.Период,
	|	Товары.Регистратор,
	|	Товары.Склад,
	|	Товары.Партия,
	|	Товары.Номенклатура,
	|	Товары.Количество,
	|	Товары.Сумма КАК Стоимость,
	|	Товары.Сумма КАК СтоимостьУпр
	|ИЗ
	|	ТаблицаДокументаТовары КАК Товары";
	
	Выборка = мЗапрос.Выполнить();
	ТаблицаПартии = Выборка.Выгрузить();
	Для Каждого ТекСтрока ИЗ ТаблицаПартии Цикл
		
		Если СтруктураДополнительныеСвойства.Свойство("ВалютаУпрУчета") Тогда 
			Если СтруктураДополнительныеСвойства.ВалютаУпрУчета <> СтруктураДополнительныеСвойства.ВалютаРеглУчета Тогда 
				ТекСтрока.Стоимость = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.Стоимость, СтруктураДополнительныеСвойства.ВалютаУпрУчета, 
				СтруктураДополнительныеСвойства.ВалютаРеглУчета,
				СтруктураДополнительныеСвойства.КурсУпр, 
				СтруктураДополнительныеСвойства.КурсРегл,
				СтруктураДополнительныеСвойства.КратностьУпр, 
				СтруктураДополнительныеСвойства.КратностьРегл);
			КонецЕсли;
		Иначе
			ТекСтрока.СтоимостьУпр = 0;
		КонецЕсли;
		
	КонецЦикла;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПартии", ТаблицаПартии);
	
	Если НЕ уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД()
		И ПолучитьФункциональнуюОпцию("уатАдресноеХранение") = ИСТИНА
		И ДокументСсылка.Склад.АдресноеХранение Тогда
		
		ЗапросЯчейки = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
		|	уатОприходованиеТоваровТовары.Ссылка.Дата КАК Период,
		|	уатОприходованиеТоваровТовары.Ссылка КАК Регистратор,
		|	уатОприходованиеТоваровТовары.Ссылка.Склад КАК Склад,
		|	уатОприходованиеТоваровТовары.Ссылка.Склад.ТранзитнаяЯчейка КАК Ячейка,
		|	уатОприходованиеТоваровТовары.Номенклатура КАК Номенклатура,
		|	уатОприходованиеТоваровТовары.Количество * ЕСТЬNULL(уатОприходованиеТоваровТовары.ЕдиницаИзмерения.Коэффициент, 1) / уатОприходованиеТоваровТовары.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Количество
		|ИЗ
		|	Документ.уатОприходованиеТоваров.Товары КАК уатОприходованиеТоваровТовары
		|ГДЕ
		|	уатОприходованиеТоваровТовары.Ссылка = &Ссылка");
		ЗапросЯчейки.УстановитьПараметр("Ссылка", ДокументСсылка);
		тблТоварыВЯчейках = ЗапросЯчейки.Выполнить().Выгрузить(); 
		
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаТоварыВЯчейках", тблТоварыВЯчейках);
	КонецЕсли;
	
КонецПроцедуры // ИнициализироватьДанныеДокумента()

// Выполняет контроль возникновения отрицательных остатков.
//
Процедура ВыполнитьКонтроль(ДокументСсылкаОприходованиеТоваров, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь) Экспорт
	
	мЗапрос = Новый Запрос;
	мЗапрос.МенеджерВременныхТаблиц = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц; 
	мЗапрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Оприходование.Номенклатура,
	|	Оприходование.Ссылка КАК Регистратор,
	|	уатПартииТоваровНаСкладахОстатки.КоличествоОстаток
	|ИЗ
	|	Документ.уатОприходованиеТоваров.Товары КАК Оприходование
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.уатПартииТоваровНаСкладах.Остатки(
	|				&МоментВремени,
	|				Склад = &Склад
	|					И Номенклатура В
	|						(ВЫБРАТЬ
	|							уатОприходованиеТоваровТовары.Номенклатура
	|						ИЗ
	|							Документ.уатОприходованиеТоваров.Товары КАК уатОприходованиеТоваровТовары
	|						ГДЕ
	|							уатОприходованиеТоваровТовары.Ссылка = &Ссылка)) КАК уатПартииТоваровНаСкладахОстатки
	|		ПО Оприходование.Ссылка.Склад = уатПартииТоваровНаСкладахОстатки.Склад
	|			И Оприходование.Номенклатура = уатПартииТоваровНаСкладахОстатки.Номенклатура
	|			И (&Партия = уатПартииТоваровНаСкладахОстатки.Партия)
	|ГДЕ
	|	Оприходование.Ссылка = &Ссылка
	|	И ЕСТЬNULL(уатПартииТоваровНаСкладахОстатки.КоличествоОстаток, 0) < 0";
	
	мЗапрос.УстановитьПараметр("Склад"        , ДокументСсылкаОприходованиеТоваров.Склад);
	мЗапрос.УстановитьПараметр("Ссылка"       , ДокументСсылкаОприходованиеТоваров);
	мЗапрос.УстановитьПараметр("МоментВремени", ДополнительныеСвойства.ДляПроведения.МоментКонтроля);
	Если уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументСсылкаОприходованиеТоваров.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.СпособОценкиМПЗ) <> Перечисления.СпособыОценки.ПоСредней Тогда
		мЗапрос.УстановитьПараметр("Партия",ДокументСсылкаОприходованиеТоваров);
	Иначе
		мЗапрос.УстановитьПараметр("Партия",Неопределено);
	КонецЕсли;
	
	
	Выборка = мЗапрос.Выполнить().Выбрать();
	Если Выборка.Количество() тогда
		Заголовок = уатОбщегоНазначенияТиповые.уатПредставлениеДокументаПриПроведении(ДокументСсылкаОприходованиеТоваров);
		Пока Выборка.Следующий() Цикл
			#Если ТонкийКлиент тогда	
			#Иначе
				ТекстНСТР = НСтр("en='For ""%1"" received negative remains on warehouse""%2"". Remains on warehouse %3';ru='Для ""%1"" получены отрицательные остатки на складе ""%2"". Остаток на складе %3'");
				ТекстНСТР = СтрШаблон(ТекстНСТР, Выборка.Номенклатура, ДокументСсылкаОприходованиеТоваров.Склад, Выборка.КоличествоОстаток);
				уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, Отказ, Заголовок);
			#КонецЕсли
		КонецЦикла;
	КонецЕсли;
	
	
КонецПроцедуры // ВыполнитьКонтроль()

// Получает дополнительные реквизиты для отображения в отчете "Реестр документов"
// 
// Возвращаемое значение:
//   Структура доп. реквизитов
//
Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура("Информация", "Склад");
	Возврат Результат;
	
КонецФункции

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// Функция помещает в структуру все данные, отображаемые при печати документа.
// Вызывается из функции ПечатьОприходованияТоваров и из веб-приложения
//
// Возвращаемое значение:
//  Структура
//
Функция ПолучитьДанныеДляПечатиОприходованияТоваров(ТекущийДокумент)
	
	РежимВыводаКодаВДокументах  = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ПользователиКлиентСервер.АвторизованныйПользователь(), 
	ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.РежимВыводаКодаВДокументах"));
	
	ПараметрыПечати = Новый Структура;
	
	ТекстКодАртикул = РежимВыводаКодаВДокументах;
	ПараметрыПечати.Вставить("ВыводитьКоды", Истина);
	ПараметрыПечати.Вставить("ИмяКолонкиКодов", РежимВыводаКодаВДокументах);
	ПараметрыПечати.Вставить("ВыводитьКоличествоМест", Ложь); 
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Номер,
	|	Дата,
	|	Организация,
	|	Склад.Представление КАК Склад,
	|	Основание,
	|	&ВалютаУпрУчета КАК ВалютаДокумента,
	|	Отпустил,
	|	Получил,
	|	Товары.(
	|		НомерСтроки,
	|		Номенклатура,
	|		Номенклатура." + ТекстКодАртикул + " КАК КодАртикул,
	|		Номенклатура.НаименованиеПолное КАК Товар,
	|		Количество,
	|		ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
	|		Цена,
	|		Сумма
	|	)
	|ИЗ
	|	Документ.уатОприходованиеТоваров КАК ОприходованиеТоваров,
	|	Константы
	|ГДЕ
	|	ОприходованиеТоваров.Ссылка = &ТекущийДокумент
	|
	|УПОРЯДОЧИТЬ ПО
	|	Товары.НомерСтроки
	|";

	Если уатОбщегоНазначенияТиповые.уатЕстьКонстанта("ВалютаУправленческогоУчета") Тогда 
		мВалютаУпрУчета = Константы.ВалютаУправленческогоУчета.Получить();
	Иначе
		мВалютаУпрУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;
	
	Запрос.Параметры.Вставить("ВалютаУпрУчета", мВалютаУпрУчета);
	
	Шапка = Запрос.Выполнить().Выбрать();
	Шапка.Следующий();
	ВыборкаСтрокТовары = Шапка.Товары.Выбрать();

	// Выводим шапку накладной
	ПараметрыПечати.Вставить("ТекстЗаголовка", уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(Шапка, НСтр("en='Taking materials on charge';ru='Оприходование материалов'")));

	ПараметрыПечати.Вставить("ПредставлениеПолучателя", уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(
		уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(Шапка.Организация, Шапка.Дата), "НаименованиеДляПечатныхФорм,"));
	ПараметрыПечати.Вставить("Получатель"			  , Шапка.Организация);
	ПараметрыПечати.Вставить("ПредставлениеСклада"	  , Шапка.Склад);
	ПараметрыПечати.Вставить("ПредставлениеОснования" , Шапка.Основание);
	ПараметрыПечати.Вставить("Отпустил", уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(Шапка.Отпустил));
	ПараметрыПечати.Вставить("Получил",  уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(Шапка.Получил));
	
	// Вывести табличную часть
	Позиции = Новый Массив;
	СуммаИтого    = 0;

	Пока ВыборкаСтрокТовары.Следующий() Цикл
		
		ПараметрыПозиции = Новый Структура;
		ПараметрыПозиции.Вставить("Номенклатура"	, ВыборкаСтрокТовары.Номенклатура);		
		
		ПараметрыПозиции.Вставить("НомерСтроки"		, ВыборкаСтрокТовары.НомерСтроки);
		ПараметрыПозиции.Вставить("Товар"			, ВыборкаСтрокТовары.Товар);
		ПараметрыПозиции.Вставить("Количество"		, ВыборкаСтрокТовары.Количество);
		ПараметрыПозиции.Вставить("ЕдиницаИзмерения", ВыборкаСтрокТовары.ЕдиницаИзмерения);
		ПараметрыПозиции.Вставить("Цена"			, ВыборкаСтрокТовары.Цена);
		ПараметрыПозиции.Вставить("Сумма"			, ВыборкаСтрокТовары.Сумма);
		Если ВыборкаСтрокТовары.КодАртикул = "" Тогда
			ПараметрыПозиции.Вставить("КодАртикул", НСтр("en='-';ru='-'"));
		Иначе
			ПараметрыПозиции.Вставить("КодАртикул", ВыборкаСтрокТовары.КодАртикул);
		КонецЕсли;
		
		Позиции.Добавить(ПараметрыПозиции);
		
		СуммаИтого = СуммаИтого + ВыборкаСтрокТовары.Сумма;
	КонецЦикла;
	
	ПараметрыПечати.Вставить("Позиции", Позиции);

	// Вывести Итого
	ПараметрыПечати.Вставить("Всего", уатОбщегоНазначенияТиповые.уатФорматСумм(СуммаИтого));

	// Вывести Сумму прописью
	ПараметрыПечати.Вставить("ИтоговаяСтрока", "Всего наименований " + ВыборкаСтрокТовары.Количество()
	                                       + ", на сумму " + уатОбщегоНазначенияТиповые.уатФорматСумм(СуммаИтого, Шапка.ВалютаДокумента));
	ПараметрыПечати.Вставить("СуммаПрописью", уатОбщегоНазначенияТиповые.уатСформироватьСуммуПрописью(СуммаИтого,  Шапка.ВалютаДокумента));

	Возврат ПараметрыПечати;

КонецФункции //ПолучитьДанныеДляПечатиОприходованияТоваров()

Функция ПечатьНакладная(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_ОприходованиеТоваров";
	
	ПервыйДокумент = Истина;
	
	Для Каждого ТекущийДокумент Из МассивОбъектов Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОприходованиеТоваров_Накладная";
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.уатОприходованиеТоваров.ПФ_MXL_Накладная");
		
		ПараметрыПечати = ПолучитьДанныеДляПечатиОприходованияТоваров(ТекущийДокумент);
		
		Если ПараметрыПечати.ВыводитьКоды Тогда
			ОбластьШапки  = "ШапкаСКодом";
			ОбластьСтроки = "СтрокаСКодом";
		Иначе
			ОбластьШапки  = "ШапкаТаблицы";
			ОбластьСтроки = "Строка";
		Конецесли;
		
		// Печать штрихкода
		Если уатЗащищенныеФункцииСервер_проф.ИспользоватьШтрихкодированиеОбъекта(ТекущийДокумент) Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокШтрихкод");
			уатЗащищенныеФункцииСервер_проф.ОтобразитьШКнаПФ(ОбластьМакета, ТекущийДокумент);
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		// Выводим шапку накладной
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Вывести табличную часть
		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
		Если ПараметрыПечати.ВыводитьКоды Тогда
			ОбластьМакета.Параметры.Колонка = ПараметрыПечати.ИмяКолонкиКодов;
		КонецЕсли;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтроки);
		
		Для каждого ПараметрыПозиции Из ПараметрыПечати.Позиции Цикл
			
			Если НЕ ЗначениеЗаполнено(ПараметрыПозиции.Номенклатура) Тогда
				ТекстНСТР = НСтр("en='In one of the rows value of products and services not filled - string when printing is missing.';ru='В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.'");
				уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР,,, СтатусСообщения.Важное);
				Продолжить;
			КонецЕсли;
			
			ОбластьМакета.Параметры.Заполнить(ПараметрыПозиции);
			
			ОбластьМакета.Параметры.Товар = ПараметрыПозиции.Номенклатура;
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЦикла;
		
		// Вывести Итого
		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Вывести Сумму прописью
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Вывести подписи
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ТекущийДокумент);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатнаяФорма()

#КонецОбласти

#КонецЕсли
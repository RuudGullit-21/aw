#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

	
#Область ОписаниеПеременных

Перем мВалютаРегламентированногоУчета Экспорт; // Переменная хранит значение валюты регламентированного учёта,
                                               // полученное из константы.
											   
Перем мВалютаУпрУчета Экспорт; // Переменная хранит значение валюты управленческого учёта, полученное из константы.

Перем мКурсУпрУчета;
Перем мКратностьУпрУчета;

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

// Процедура выполняет заполнение табличной части по инвентаризации Товаров.
//
// Параметры:
//  ДокументОснование - ссылка на документ основание (инвентаризация Товаров).
//
//  ПодтверждатьОчисткуСтрок	– булево – Истина, если необходимо запрашивать 
//								  подтверждение пользователя на очистку текущего содержимого
//								  таб.части, иначе Ложь
//
Процедура ЗаполнитьТоварыПоИнвентаризацииТоваровУпр(ДокументОснование, ПодтверждатьОчисткуСтрок) Экспорт
	
	Если НЕ ЗначениеЗаполнено(ИнвентаризацияТоваровНаСкладе) Тогда
		ТекстНСТР = НСтр("en='Document ""Inventory of materials"" is not selected. Filling impossible.';ru='Документ ""Инвентаризация материалов"" не выбран. Заполнение невозможно.'");
		ВызватьИсключение ТекстНСТР;
	КонецЕсли;	

	Если Товары.Количество() > 0 Тогда
		Товары.Очистить();
	КонецЕсли;

	СтруктураКурса    = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(мВалютаУпрУчета, Дата);
	КурсУпрУчета      = СтруктураКурса.Курс;
	КратностьУпрУчета = СтруктураКурса.Кратность;

	Запрос = Новый Запрос;

	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("ДокументОснованиеСсылка", ДокументОснование);

	// Заполняем выявленными излишками по инвентаризации, с учетом уже выполненного оприходования
	// по данной инвентаризации. Цены берем из документа инвентаризации.
	// Если розница – заполняем розничную цену.
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Док.Номенклатура,
	|	Док.ЕдиницаИзмерения,
	|	МАКСИМУМ(Док.Количество - Док.КоличествоУчет) КАК КоличествоОтклонениеИнвентаризации, //в единицах инвентаризации
	|	СУММА(ВЫБОР
	|		КОГДА ДокОприходование.Количество ЕСТЬ NULL ТОГДА
	|			0
	|		ИНАЧЕ
	|			ДокОприходование.Количество
	|	КОНЕЦ)                                        КАК КоличествоОприходованное,
	|	Док.Цена,
	|	МИНИМУМ(Док.НомерСтроки) КАК НомерСтроки
	|ИЗ
	|	Документ.уатИнвентаризацияТоваров.Товары КАК Док
	|ЛЕВОЕ СОЕДИНЕНИЕ
	|	Документ.уатОприходованиеТоваров.Товары КАК ДокОприходование
	|ПО                                       
	|	  Док.Номенклатура                                      = ДокОприходование.Номенклатура
	|	И Док.Ссылка.Склад                                      = ДокОприходование.Ссылка.Склад
	|	И ДокОприходование.Ссылка.ИнвентаризацияТоваровНаСкладе = &ДокументОснованиеСсылка
	|	И ДокОприходование.Ссылка.Проведен
	|	И ДокОприходование.Ссылка                              <> &ДокументСсылка
	|ГДЕ
	|	  Док.Ссылка = &ДокументОснованиеСсылка
	|	И Док.Количество - Док.КоличествоУчет > 0
	|
	|СГРУППИРОВАТЬ ПО 
	|	Док.Номенклатура,
	|	Док.ЕдиницаИзмерения,
	|	Док.Цена
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки
	|";

	РезультатЗапроса = Запрос.Выполнить();

	Склад = ДокументОснование.Склад;
	
	Выборка = РезультатЗапроса.Выбрать();

	СтрокиДобавлены = Ложь;
	Пока Выборка.Следующий() Цикл

		КоличествоОприходовать = Выборка.КоличествоОтклонениеИнвентаризации - Выборка.КоличествоОприходованное;
		Если КоличествоОприходовать <= 0 Тогда
			Продолжить;
		КонецЕсли;

		СтрокиДобавлены = Истина;
		СтрокаТабличнойЧасти = Товары.Добавить();

		СтрокаТабличнойЧасти.Номенклатура        = Выборка.Номенклатура;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения    = Выборка.ЕдиницаИзмерения;
		СтрокаТабличнойЧасти.Количество          = КоличествоОприходовать;
		СтрокаТабличнойЧасти.Цена                = Выборка.Цена;
		СтрокаТабличнойЧасти.Сумма 				 = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;

	КонецЦикла;

	#Если Клиент Тогда

	Если Товары.Количество() = 0 Тогда
		ТекстНСТР = НСтр("en='In document ""%1"" there are no goods, the actual number of which exceeds the accounting.';ru='В документе ""%1"" отсутствуют товары, фактическое количество которых превышает учетное.'");
		ТекстНСТР = СтрШаблон(ТекстНСТР, ДокументОснование);
		уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР);
	КонецЕсли;

	#КонецЕсли

КонецПроцедуры // ЗаполнитьТоварыПоИнвентаризацииТоваров()

// Возвращает значение переменной мКурсУпрУчета. Если переменная не проинициализирована,
//	выполняет ее инициализацию.
//
// Возвращаемое значение:
//   Число – значение переменной мКурсУпрУчета
//
Функция ПолучитьКурсУпрУчета() Экспорт

	Если мКурсУпрУчета = Неопределено Тогда	
		ИнициализироватьКурсИКратностьУпрУчета()
	КонецЕсли; 
	
	Возврат мКурсУпрУчета; 

КонецФункции // ПолучитьКурсУпрУчета()

// Возвращает значение переменной мКратностьУпрУчета. Если переменная не проинициализирована,
//	выполняет ее инициализацию.
//
// Возвращаемое значение:
//   Число – значение переменной мКратностьУпрУчета
//
Функция ПолучитьКратностьУпрУчета() Экспорт

	Если мКратностьУпрУчета = Неопределено Тогда	
		ИнициализироватьКурсИКратностьУпрУчета()
	КонецЕсли; 
	
	Возврат мКратностьУпрУчета; 

КонецФункции // ПолучитьКратностьУпрУчета()

#КонецОбласти


#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)

	уатОбщегоНазначенияСервер.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.уатИнвентаризацияТоваров") Тогда
		
		уатОбщегоНазначенияТиповые.ЗаполнитьШапкуДокументаПоОснованию(ЭтотОбъект, ДанныеЗаполнения);
		ИнвентаризацияТоваровНаСкладе = ДанныеЗаполнения;
		ЗаполнитьТоварыПоИнвентаризацииТоваровУпр(ИнвентаризацияТоваровНаСкладе, Ложь);

	КонецЕсли;	
		
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	СуммаДокумента = уатОбщегоНазначенияТиповые.уатПолучитьСуммуДокументаСНДС(ЭтотОбъект);
	
КонецПроцедуры // ПередЗаписью

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Отказ И НЕ уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД() Тогда
		ОМ_уатЗащищенныеФункцииСервер_проф = ОбщегоНазначения.ОбщийМодуль("уатЗащищенныеФункцииСервер_проф");
		ОМ_уатЗащищенныеФункцииСервер_проф.ПолучитьСформироватьШтрихкодОбъекта(Ссылка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	// проверка на ведение складского учета средствами УАТ
	Если НЕ уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, ПланыВидовХарактеристик.уатПраваИНастройки.ВестиСкладскойУчетУАТ) Тогда
		ТекстНСТР = СтрШаблон(НСтр("en='For company ""%1"" the possibility of inventory management with FMS documents is disabled!';ru='Для организации ""%1"" отключена возможность ведения складского учета документами УАТ!'"), Организация);
		уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, Отказ,, СтатусСообщения.Внимание);
	КонецЕсли;
	
	// Инициализация дополнительных свойств для проведения документа.
	уатПроведение.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа.
	Документы.уатОприходованиеТоваров.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	уатПроведение.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета.
	уатПроведение.ОтразитьПартииТоваровНаСкладах(ДополнительныеСвойства, Движения, Отказ); 
	
	Если НЕ уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД() Тогда 
		МодульПроведение = ОбщегоНазначения.ОбщийМодуль("уатПроведение_проф");
		Если ПолучитьФункциональнуюОпцию("уатАдресноеХранение") = ИСТИНА И Склад.АдресноеХранение Тогда 	
			МодульПроведение.ОтразитьТоварыВЯчейках(ДополнительныеСвойства, Движения, Отказ); 	
		КонецЕсли;
		МодульПроведение.ОтразитьДатыДвиженияТоваровНаСкладах(ДополнительныеСвойства, Движения, Отказ);  
	КонецЕсли;
	
	// Запись наборов записей.
	уатПроведение.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль возникновения отрицательного остатка.
	Документы.уатОприходованиеТоваров.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);

КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа
	уатПроведение.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	уатПроведение.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	уатПроведение.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	// Контроль
	Документы.уатОприходованиеТоваров.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ, Истина);

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Заголовок = уатОбщегоНазначенияТиповые.уатПредставлениеДокументаПриПроведении(ЭтотОбъект);
	уатОбщегоНазначенияТиповые.ПроверитьЧтоНетУслуг(ЭтотОбъект,"Товары", , Отказ, Заголовок);
	
	уатОбщегоНазначения.ПроверкаЗаполненияПодразделения(Организация, Подразделение, Отказ, Заголовок);
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// Инициализирует курс и кратность упр. учета
//
Процедура ИнициализироватьКурсИКратностьУпрУчета()
 
	СтруктураКурса     = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(мВалютаУпрУчета, Дата);
	мКурсУпрУчета      = СтруктураКурса.Курс;
	мКратностьУпрУчета = СтруктураКурса.Кратность;
	
КонецПроцедуры // ИнициализироватьКурсИКратностьУпрУчета()

#КонецОбласти


#Область Инициализация

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
Если уатОбщегоНазначенияТиповые.уатЕстьКонстанта("ВалютаУправленческогоУчета") Тогда 
	мВалютаУпрУчета = Константы.ВалютаУправленческогоУчета.Получить();
Иначе
	мВалютаУпрУчета = мВалютаРегламентированногоУчета;
КонецЕсли;

#КонецОбласти


#КонецЕсли

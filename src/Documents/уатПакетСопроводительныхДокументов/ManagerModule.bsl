#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	Настройки.ПриПолученииСлужебныхРеквизитов = Ложь;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// Позволяет переопределить ограничение, указанное в модуле менеджера объекта метаданных.
//
// Параметры:
//  Ограничение - Структура:
//    * Текст                             - Строка - ограничение доступа для пользователей.
//                                          Если пустая строка, значит, доступ разрешен.
//    * ТекстДляВнешнихПользователей      - Строка - ограничение доступа для внешних пользователей.
//                                          Если пустая строка, значит, доступ запрещен.
//    * ПоВладельцуБезЗаписиКлючейДоступа - Неопределено - определить автоматически.
//                                        - Булево - если Ложь, то всегда записывать ключи доступа,
//                                          если Истина, тогда не записывать ключи доступа,
//                                          а использовать ключи доступа владельца (требуется,
//                                          чтобы ограничение было строго по объекту-владельцу).
//   * ПоВладельцуБезЗаписиКлючейДоступаДляВнешнихПользователей - Неопределено, Булево - также
//                                          как у параметра ПоВладельцуБезЗаписиКлючейДоступа.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";
	
	Ограничение.ТекстДляВнешнихПользователей = Ограничение.Текст;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// СтандартныеПодсистемы.Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатПакетСопроводительныхДокументов";
	КомандаПечати.Идентификатор = "РеестрПередачиДокументов";
	КомандаПечати.Представление = "Реестр передачи документов";
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр).
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной
//                                                            параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной
//                                            параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если НЕ уатОбщегоНазначенияСервер.РазрешениеПечатиНепроведенногоДокумента(МассивОбъектов) Тогда
		Возврат;
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "РеестрПередачиДокументов") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "РеестрПередачиДокументов",
			"Реестр передачи документов", ПечатьРеестрПередачиДокументов(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
	уатОбщегоНазначенияСервер.УстановитьРедактированиеПечатныхФормДокумента(КоллекцияПечатныхФорм);
	уатУправлениеПечатью.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов, КоллекцияПечатныхФорм);
	
КонецПроцедуры // Печать

// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.ШаблоныСообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf",
//                           "png", "jpg", mxl" и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов 
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
	
КонецПроцедуры

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS.
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - СправочникСсылка - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма.
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт
	
	ПакетСсылка = Неопределено;
	
	Если ТипЗнч(ПредметСообщения) = Тип("ДокументСсылка.уатПакетСопроводительныхДокументов") Тогда 
		ПакетСсылка = ПредметСообщения;
	ИначеЕсли ТипЗнч(ПредметСообщения) = Тип("Структура")
		И ПредметСообщения.Свойство("Предмет") И ТипЗнч(ПредметСообщения.Предмет) = Тип("ДокументСсылка.уатПакетСопроводительныхДокументов") Тогда
		ПакетСсылка = ПредметСообщения.Предмет;
	КонецЕсли;
	
	Если ПакетСсылка = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	СписокАдресов = Документы.уатРассылкаЭлектронныхПисем_уэ.СформироватьСписокАдресов(
		Новый Структура("Контрагент, КонтактноеЛицо",
		ПакетСсылка.Отправитель, ПакетСсылка.Отправитель.ОсновноеКонтактноеЛицо));
	Если СписокАдресов.Количество() > 0 Тогда
		стрАдрес = СписокАдресов[0].Значение;
		Если Не стрАдрес.Количество() = 0 Тогда
			НовыйПолучатель = ПолучателиПисьма.Добавить();
			НовыйПолучатель.Адрес = стрАдрес.Представление;
			НовыйПолучатель.Представление = ?(стрАдрес.Объект = ПакетСсылка.Отправитель, Строка(ПакетСсылка.Отправитель),
				Строка(ПакетСсылка.Отправитель.ОсновноеКонтактноеЛицо)) + " <" + стрАдрес.Представление + ">";
		КонецЕсли;
	КонецЕсли;
	
	СписокАдресов = Документы.уатРассылкаЭлектронныхПисем_уэ.СформироватьСписокАдресов(
		Новый Структура("Контрагент, КонтактноеЛицо",
		ПакетСсылка.Получатель, ПакетСсылка.Получатель.ОсновноеКонтактноеЛицо));
	Если СписокАдресов.Количество() > 0 Тогда
		стрАдрес = СписокАдресов[0].Значение;
		Если Не стрАдрес.Количество() = 0 Тогда
			НовыйПолучатель = ПолучателиПисьма.Добавить();
			НовыйПолучатель.Адрес = стрАдрес.Представление;
			НовыйПолучатель.Представление = ?(стрАдрес.Объект = ПакетСсылка.Получатель, Строка(ПакетСсылка.Получатель),
				Строка(ПакетСсылка.Получатель.ОсновноеКонтактноеЛицо)) + " <" + стрАдрес.Представление + ">";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ШаблоныСообщений

// СтандартныеПодсистемы.Взаимодействия

// Возвращает контакты по предмету.
//
// Параметры:
//  Ссылка	 - СправочникСсылка	 - Ссылка на предмет-владелец контактов
// 
// Возвращаемое значение:
//  Массив - массив контактов
// 
Функция ПолучитьКонтакты(Ссылка) Экспорт
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПоКонтактам();
	Запрос.УстановитьПараметр("Предмет", Ссылка);
	
	НачатьТранзакцию();
	Попытка
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			Результат = Неопределено;
		Иначе
			Результат = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Контакт");
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Возвращает текст запроса по контактам взаимодействий, содержащимся в документе.
//
// Параметры:
//  ТекстВременнаяТаблица - Строка - Имя временной таблицы, в которую помещаются полученные данные.
//  Объединить  - Булево  - признак, указывающий на необходимость добавления конструкции ОБЪЕДИНИТЬ в запрос.
//
// Возвращаемое значение:
//   Строка   - сформированный текст запроса для получения контактов взаимодействий объекта.
//
Функция ТекстЗапросаПоКонтактам(ТекстВременнаяТаблица = "", Объединить = Ложь) Экспорт
	
	ШаблонВыбрать = ?(Объединить, "ВЫБРАТЬ РАЗЛИЧНЫЕ", "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ");
	
	ТекстЗапроса = "
	|%ШаблонВыбрать%
	|	уатПакетСопроводительныхДокументов.Перевозчик КАК Контакт " + ТекстВременнаяТаблица + "
	|ИЗ
	|	Документ.уатПакетСопроводительныхДокументов КАК уатПакетСопроводительныхДокументов
	|ГДЕ
	|	уатПакетСопроводительныхДокументов.Ссылка = &Предмет
	|	И НЕ уатПакетСопроводительныхДокументов.Перевозчик = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатПакетСопроводительныхДокументов.Ответственный
	|ИЗ
	|	Документ.уатПакетСопроводительныхДокументов КАК уатПакетСопроводительныхДокументов
	|ГДЕ
	|	уатПакетСопроводительныхДокументов.Ссылка = &Предмет
	|	И (НЕ уатПакетСопроводительныхДокументов.Ответственный = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ШаблонВыбрать%", ШаблонВыбрать);
	
	Если Объединить Тогда
		
		ТекстЗапроса = "
		| ОБЪЕДИНИТЬ ВСЕ
		|" + ТекстЗапроса;
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Конец СтандартныеПодсистемы.Взаимодействия

#КонецОбласти

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	СформироватьТаблицуСтатусыСД(ДокументСсылка, СтруктураДополнительныеСвойства);
КонецПроцедуры // ИнициализироватьДанныеДокумента()

Процедура ВыполнитьКонтроль(ДокументСсылка, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь) Экспорт
	Заглушка = Истина;
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицуСтатусыСД(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	уатПакетСопроводительныхДокументов.ДатаОтправления КАК Период,
	|	уатПакетСопроводительныхДокументов.Ссылка КАК Регистратор,
	|	уатПакетСопроводительныхДокументовСопроводительныеДокументы.СопроводительныйДокумент КАК СопроводительныйДокумент,
	|	уатПакетСопроводительныхДокументов.СтатусОтправления КАК Статус,
	|	уатПакетСопроводительныхДокументов.ПунктОтправления КАК ПунктОтправления,
	|	уатПакетСопроводительныхДокументов.ПунктПолучения КАК ПунктПрибытия,
	|	уатПакетСопроводительныхДокументов.Отправитель КАК Отправитель,
	|	уатПакетСопроводительныхДокументов.Получатель КАК Получатель,
	|	уатПакетСопроводительныхДокументов.Ссылка КАК ПакетДокументов,
	|	уатПакетСопроводительныхДокументов.Организация КАК Организация,
	|	уатПакетСопроводительныхДокументов.ОтветственныйЗаОтправку КАК Ответственный,
	|	уатПакетСопроводительныхДокументов.КомментарийОтправления КАК КомментарийИзменения
	|ИЗ
	|	Документ.уатПакетСопроводительныхДокументов.СопроводительныеДокументы КАК уатПакетСопроводительныхДокументовСопроводительныеДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатПакетСопроводительныхДокументов КАК уатПакетСопроводительныхДокументов
	|		ПО уатПакетСопроводительныхДокументовСопроводительныеДокументы.Ссылка = уатПакетСопроводительныхДокументов.Ссылка
	|ГДЕ
	|	уатПакетСопроводительныхДокументовСопроводительныеДокументы.Ссылка = &ДокументСсылка
	|	И уатПакетСопроводительныхДокументовСопроводительныеДокументы.Ссылка.Отправлен
	|	И НЕ уатПакетСопроводительныхДокументовСопроводительныеДокументы.СопроводительныйДокумент.ПометкаУдаления
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	уатПакетСопроводительныхДокументов.ДатаПолучения,
	|	уатПакетСопроводительныхДокументов.Ссылка,
	|	уатПакетСопроводительныхДокументовСопроводительныеДокументы.СопроводительныйДокумент,
	|	уатПакетСопроводительныхДокументов.СтатусПолучения,
	|	уатПакетСопроводительныхДокументов.ПунктОтправления,
	|	уатПакетСопроводительныхДокументов.ПунктПолучения,
	|	уатПакетСопроводительныхДокументов.Отправитель,
	|	уатПакетСопроводительныхДокументов.Получатель,
	|	уатПакетСопроводительныхДокументов.Ссылка,
	|	уатПакетСопроводительныхДокументов.Организация,
	|	уатПакетСопроводительныхДокументов.ОтветственныйЗаПолучение КАК Ответственный,
	|	уатПакетСопроводительныхДокументов.КомментарийПолучения КАК КомментарийИзменения
	|ИЗ
	|	Документ.уатПакетСопроводительныхДокументов.СопроводительныеДокументы КАК уатПакетСопроводительныхДокументовСопроводительныеДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатПакетСопроводительныхДокументов КАК уатПакетСопроводительныхДокументов
	|		ПО уатПакетСопроводительныхДокументовСопроводительныеДокументы.Ссылка = уатПакетСопроводительныхДокументов.Ссылка
	|ГДЕ
	|	уатПакетСопроводительныхДокументовСопроводительныеДокументы.Ссылка = &ДокументСсылка
	|	И уатПакетСопроводительныхДокументовСопроводительныеДокументы.Ссылка.Получен
	|	И НЕ уатПакетСопроводительныхДокументовСопроводительныеДокументы.СопроводительныйДокумент.ПометкаУдаления");
	
	Запрос.УстановитьПараметр("ДокументСсылка", ДокументСсылка);
	ТаблицаСтатусыСД = Запрос.Выполнить().Выгрузить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСтатусыСопроводительныхДокументов", ТаблицаСтатусыСД);
	
КонецПроцедуры

Функция ПечатьРеестрПередачиДокументов(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_ПакетСопроводительныхДокументов";
	
	ПервыйДокумент = Истина;
	
	Для Каждого ТекущийДокумент Из МассивОбъектов Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПакетСопроводительныхДокументов_РеестрПередачиДокументов";
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.уатПакетСопроводительныхДокументов.ПФ_MXL_РеестрПередачиДокументов");
		
		// Заголовок
		ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка");
		
		СведенияОрганизации = уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(ТекущийДокумент.Организация);
		СписокТребуемыхПараметров	               = "НаименованиеДляПечатныхФорм";
		ОбластьМакетаШапка.Параметры.Организация   = уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(СведенияОрганизации, СписокТребуемыхПараметров);
		СписокТребуемыхПараметров	               = "ИНН, КПП, ОГРН, ЮридическийАдрес, Телефоны";
		ОбластьМакетаШапка.Параметры.ОрганизацияКИ = уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(СведенияОрганизации, СписокТребуемыхПараметров);
		ОбластьМакетаШапка.Параметры.ДатаОтчета    = Формат(ТекущийДокумент.Дата, "ДФ=dd.MM.yyyy");
		
		ПечатьПрефиксовВключена = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ТекущийДокумент.Организация, ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ВыводитьПрефиксПриПечати"));
		Если ПечатьПрефиксовВключена Тогда
			НомерНаПечать = ТекущийДокумент.Номер;
		Иначе
			НомерНаПечать = уатОбщегоНазначенияКлиентСервер.НомерДокументаНаПечать(ТекущийДокумент.Номер, Истина, Истина);
		КонецЕсли;
		
		ОбластьМакетаШапка.Параметры.Номер = НомерНаПечать;	
				
		ТабличныйДокумент.Вывести(ОбластьМакетаШапка);
		
		// Итоги по видам СД
		ТабСопрДокументов = ТекущийДокумент.СопроводительныеДокументы.Выгрузить();
		ТабСопрДокументов.Свернуть("СопроводительныйДокумент");
		ТабСопрДокументов.Колонки.Добавить("ВидДокумента");
		ТабСопрДокументов.Колонки.Добавить("Количество");
		Для каждого ТекСтр Из ТабСопрДокументов Цикл
			ТекСтр.ВидДокумента = ТекСтр.СопроводительныйДокумент.ВидДокумента;		
			ТекСтр.Количество = 1;
		КонецЦикла;
		ТабСопрДокументов.Свернуть("ВидДокумента", "Количество");
		
		Для каждого ТекСтр Из ТабСопрДокументов Цикл
			ОбластьМакетаИтоги = Макет.ПолучитьОбласть("Итоги");
			ОбластьМакетаИтоги.Параметры.ВидДокумента = ТекСтр.ВидДокумента;
			ОбластьМакетаИтоги.Параметры.Количество = ТекСтр.Количество;
			ТабличныйДокумент.Вывести(ОбластьМакетаИтоги);	
		КонецЦикла;
		
		// Сопроводительные документы
		ТабСопрДокументов = ТекущийДокумент.СопроводительныеДокументы.Выгрузить();
		ТабСопрДокументов.Свернуть("СопроводительныйДокумент");
		Для каждого ТекСтр Из ТабСопрДокументов Цикл
			СопДок = ТекСтр.СопроводительныйДокумент;
			ОбластьМакетаДокументы = Макет.ПолучитьОбласть("Документы");
			ОбластьМакетаДокументы.Параметры.ВладелецДокумента = СопДок.ВладелецДокумента.НаименованиеПолное;
			ОбластьМакетаДокументы.Параметры.ВидДокумента      = СопДок.ВидДокумента;
			ОбластьМакетаДокументы.Параметры.СтрокаНомеров     = Строка(СопДок.НомерДокумента) + " от " + Строка(Формат(СопДок.ДатаДокумента,"ДФ=dd.MM.yyyy"));
			ОбластьМакетаДокументы.Параметры.Количество        = 1;
			ТабличныйДокумент.Вывести(ОбластьМакетаДокументы);
		КонецЦикла;
		
		// Подвал
		ОбластьМакетаПодвал = Макет.ПолучитьОбласть("Подвал");
		ОбластьМакетаПодвал.Параметры.Отправитель   = ТекущийДокумент.Отправитель.НаименованиеПолное;
		ОбластьМакетаПодвал.Параметры.Получатель    = ТекущийДокумент.Получатель.НаименованиеПолное;
		ОбластьМакетаПодвал.Параметры.Дополнительно = ТекущийДокумент.Дополнительно;
				
		ОбластьМакетаПодвал.Параметры.ОтветственныйЗаОтправку = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(
			ТекущийДокумент.ОтветственныйЗаОтправку.ФизическоеЛицо);
		ОбластьМакетаПодвал.Параметры.ОтветственныйЗаДоставку = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(
			ТекущийДокумент.ОтветственныйЗаПолучение.ФизическоеЛицо);
		
		ТабличныйДокумент.Вывести(ОбластьМакетаПодвал);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ТекущийДокумент);
		
	КонецЦикла;
	
	//ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	//ТабличныйДокумент.ОтображатьСетку = Ложь;
	//ТабличныйДокумент.Защита = Ложь;
	//ТабличныйДокумент.ТолькоПросмотр = Ложь;
	//ТабличныйДокумент.ОтображатьЗаголовки = Ложь;
		
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
		
КонецФункции // ПечатьРеестрПередачиДокументов()

// Процедура - Заполнить структуру получателей печатных форм
//
// Параметры:
//  СтруктураДанныхОбъектаПечати - Структура - Структура данных получателей печатной формы
//
Процедура ЗаполнитьСтруктуруПолучателейПечатныхФорм(СтруктураДанныхОбъектаПечати) Экспорт
	
	СтруктураДанныхОбъектаПечати.ОсновнойПолучатель = "Перевозчик";
	 
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Перевозчик");
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Контрагент");
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("КонтактноеЛицо");
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Грузоотправитель");
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Грузополучатель");
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
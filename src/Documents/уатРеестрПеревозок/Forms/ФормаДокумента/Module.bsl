#Область ПеременныеФормы

&НаКлиенте
Перем ДанныеСтрокиУслуги; // Хранит данные строки ТЧ Доходы/Расходы перед началом редактирования.

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	уатЗащищенныеФункцииСервер.уатДокументФормаЭлементаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, Объект, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// уатУправлениеАвтотранспортом.МодификацияКонфигурации
	уатМодификацияКонфигурацииПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	// Конец уатУправлениеАвтотранспортом.МодификацияКонфигурации
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// Блокировка команд для внешнего пользователя
	АвторизованныйКонтрагент = уатЗащищенныеФункцииСервер_проф.АвторизованныйКонтрагент(АвторизованВнешнийПользователь);
	Если АвторизованВнешнийПользователь Тогда
		Элементы.ПодменюЗаполнить.Видимость = Ложь;
		
		Если НЕ Объект.Ссылка.Пустая()
			И Объект.СозданПеревозчиком
			И уатСогласованиеДокументовСервер.ДокументСогласован(Объект.Ссылка) Тогда
			ТекстПредупреждения = НСтр("ru = 'Для данного документа завершен процесс согласования.
				|Документ открыт в режиме просмотра'");
			ОбщегоНазначения.СообщитьПользователю(ТекстПредупреждения);
			ТолькоПросмотр = Истина;
		ИначеЕсли Не Объект.Ссылка.Пустая() И Не Объект.СозданПеревозчиком Тогда
			ТекстПредупреждения = НСтр("ru = 'Для данного документа не установлен флаг ""Создан перевозчиком"".
				|Документ открыт в режиме просмотра'");
			ОбщегоНазначения.СообщитьПользователю(ТекстПредупреждения);
			ТолькоПросмотр = Истина;
		КонецЕсли;
		Если Объект.Ссылка.Пустая() Тогда
			Объект.СозданПеревозчиком = Истина;
			Объект.Перевозчик = АвторизованныйКонтрагент;
			
			Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	ДоговорыКонтрагентов.Организация КАК Организация,
				|	ДоговорыКонтрагентов.Ссылка КАК Договор
				|ИЗ
				|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
				|ГДЕ
				|	ДоговорыКонтрагентов.Владелец = &Контрагент
				|	И ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора";
				Запрос.УстановитьПараметр("ВидДоговора", Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
				Запрос.УстановитьПараметр("Контрагент", АвторизованныйКонтрагент);
				
				РезультатЗапроса = Запрос.Выполнить().Выгрузить();
				
				Если РезультатЗапроса.Количество() <> 0 Тогда
					Объект.Организация = РезультатЗапроса[0].Организация;
					Объект.ДоговорКонтрагента = РезультатЗапроса[0].Договор;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если уатОбщегоНазначенияСервер.АвторизованВнещнийПеревозчик() Тогда
			КомандаСоздатьНаОсновании = Элементы.Найти("ФормаДокументуатПоступлениеТоваровУслугСоздатьНаОсновании");
			Если КомандаСоздатьНаОсновании <> Неопределено Тогда
				КомандаСоздатьНаОсновании.Заголовок = НСтр("ru = 'Реализация услуг'");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	// уатСогласованиеДокументов
	ИмяДокументаСогласование = "РеестрПеревозок";
	уатСогласованиеДокументовСервер.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец уатСогласованиеДокументов
	
	Если Объект.Ссылка.Пустая() Тогда
		Если НЕ ЗначениеЗаполнено(Объект.Перевозчик) тогда
			Объект.Перевозчик = Справочники.Контрагенты.ПустаяСсылка();
		КонецЕсли;
		
		Объект.ДатаНач = ?(Объект.ДатаНач = '00010101', НачалоМесяца(ТекущаяДата()), Объект.ДатаНач);
		Объект.ДатаКон = ?(Объект.ДатаКон = '00010101', ТекущаяДата(), Объект.ДатаКон);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Перевозчик) Тогда
		ПринадлежностьПеревозки = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Привлеченное");
	Иначе
		ПринадлежностьПеревозки = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное");
	КонецЕсли;
	
	ОрганизацияПередИзменением = Объект.Организация;
	Контрагент                 = Объект.Перевозчик;
	Договор                    = Объект.ДоговорКонтрагента;
	ВалютаРасчетов             = Объект.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	
	НастроитьПолеДоговорКонтрагента();
	уатОбщегоНазначенияСервер.НастроитьПолеПодразделение(Элементы.Подразделение, "Объект.Организация");
	
	МноговалютныйУчет = ПолучитьФункциональнуюОпцию("уатМноговалютныйУчет");
	мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Элементы.УслугиРекламация.Видимость = ПолучитьФункциональнуюОпцию("уатИспользоватьРекламации_уэ");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	уатЗащищенныеФункцииКлиент.уатДокументФормаЭлементаПриОткрытии(Отказ, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// уатУправлениеАвтотранспортом.МодификацияКонфигурации
	уатМодификацияКонфигурацииКлиентПереопределяемый.ПриОткрытии(ЭтотОбъект, Отказ);
	// Конец уатУправлениеАвтотранспортом.МодификацияКонфигурации
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// уатСогласованиеДокументов
	уатСогласованиеДокументовКлиент.ОбновитьСтатусСогласования(ЭтотОбъект);
	// Конец уатСогласованиеДокументов
	
	// Установить видимость реквизитов и заголовков колонок.
	УстановитьВидимость();
	
	ОбновитьВсегоВТЧУслуги();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ОбновитьВсегоВТЧУслугиНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// уатСогласованиеДокументов
	уатСогласованиеДокументовКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр);
	// Конец уатСогласованиеДокументов
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	// уатСогласованиеДокументов
	уатСогласованиеДокументовКлиент.ПослеЗаписи(ЭтотОбъект);
	// Конец уатСогласованиеДокументов
	
	ОбновитьВсегоВТЧУслуги();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если Объект.Организация = ОрганизацияПередИзменением Тогда
		Возврат;
	КонецЕсли;
	ОрганизацияПередИзменением = Объект.Организация;
	
	ПриИзмененииКонтрагентаИлиОрганизации(Новый ОписаниеОповещения("ОрганизацияПриИзмененииЗавершение", ЭтотОбъект));
	
	// уатСогласованиеДокументов
	уатСогласованиеДокументовКлиент.ОрганизацияПодразделениеПриИзменении(ЭтотОбъект);
	// Конец уатСогласованиеДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура ПринадлежностьПеревозкиПриИзменении(Элемент)
	Объект.ДоговорКонтрагента = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
	Объект.Контрагент = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
	Объект.Перевозчик = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
	НастроитьПолеДоговорКонтрагента();
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ПеревозчикПриИзменении(Элемент)
	КонтрагентПередИзменением = Контрагент;
	Контрагент = Объект.Перевозчик;
	Если КонтрагентПередИзменением <> Объект.Перевозчик Тогда
		ПриИзмененииКонтрагентаИлиОрганизации(Неопределено);
		ОбновитьВсегоВТЧУслуги();
		ВывестиСуммовыеИтогиДокумента();
	Иначе
		// Договор был очищен по связи параметров выбора, возвращаем старое значение
		Объект.ДоговорКонтрагента = Договор;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	Оповещ = Новый ОписаниеОповещения("ДоговорКонтрагентаПриИзмененииЗавершение", ЭтотОбъект);
	уатОбщегоНазначенияКлиент.ДоговорКонтрагентаПриИзменении(ЭтаФорма, Оповещ);
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзмененииЗавершение(Результат, ДопПараметры) Экспорт
	уатОбщегоНазначенияКлиент.ПриИзмененииДоговора(ЭтаФорма, Неопределено, Договор);
КонецПроцедуры

// Вызывается из процедуры уатОбщегоНазначенияКлиент.ПриИзмененииДоговора()
//
&НаКлиенте
Процедура ПриИзмененииДоговораЛокальныеОбработчики() Экспорт
	РассчитатьСуммуДокумента();
	ОбновитьВсегоВТЧУслуги();
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаСоздание(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВидДоговораДоступныеЗначения = Новый Массив;
	
	мВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком");
	ВидДоговораДоступныеЗначения.Добавить(мВидДоговора);
	
	ПараметрыФормы = Новый Структура(); 
	ПараметрыФормы.Вставить("Владелец", Объект.Перевозчик);
	ПараметрыФормы.Вставить("ВидДоговораДоступныеЗначения", ВидДоговораДоступныеЗначения);
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

&НаКлиенте
Процедура ТребуетСогласованияПриИзменении(Элемент)
	
	// уатСогласованиеДокументов
	уатСогласованиеДокументовКлиент.ТребуетСогласованияПриИзменении(ЭтотОбъект);
	// Конец уатСогласованиеДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСогласованНажатие(Элемент)
	
	// уатСогласованиеДокументов
	уатСогласованиеДокументовКлиент.НадписьСогласованНажатие(ЭтотОбъект);
	// Конец уатСогласованиеДокументов
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУслуги

&НаКлиенте
Процедура УслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекСтрока = Элементы.Услуги.ТекущиеДанные;
		
	Если НоваяСтрока И НЕ Копирование Тогда
		Если Объект.УчитыватьНДС Тогда
			ТекСтрока.СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
				ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнаяСтавкаНДС");
		КонецЕсли;
			
		Если МноговалютныйУчет Тогда
			ТекСтрока.Валюта = Объект.ВалютаДокумента;
			ТекСтрока.КроссКурс = 1;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеСтрокиУслуги = Новый Структура("Валюта", ТекСтрока.Валюта);
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОбновитьВсегоВТЧУслуги();
	РассчитатьСуммуДокумента();
КонецПроцедуры

&НаКлиенте
Процедура УслугиПослеУдаления(Элемент)
	РассчитатьСуммуДокумента();
КонецПроцедуры

&НаКлиенте
Процедура УслугиНоменклатураПриИзменении(Элемент)
	ТекСтрока = Элементы.Услуги.ТекущиеДанные;
	ТекСтрока.Содержание = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрока.Номенклатура, "НаименованиеПолное");
	ТекСтрока.СтатьяДоходов = уатОбщегоНазначенияСервер.СтатьяДоходовНоменклатуры(ТекСтрока.Номенклатура);
	
	Если Объект.УчитыватьНДС Тогда
		СтавкаНДС = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрока.Номенклатура, "СтавкаНДС");
		ТекСтрока.СтавкаНДС = ?(ЗначениеЗаполнено(СтавкаНДС), СтавкаНДС, ТекСтрока.СтавкаНДС);
	Иначе
		ТекСтрока.СтавкаНДС = Неопределено;
	КонецЕсли;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрока, Истина);
КонецПроцедуры

&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)
	ТекСтрока = Элементы.Услуги.ТекущиеДанные;
	РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрока, Истина);
КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)
	ТекСтрока = Элементы.Услуги.ТекущиеДанные;
	Если МноговалютныйУчет И ТекСтрока.ЦенаВалютная = 0 И ТекСтрока.КроссКурс <> 0 Тогда
		ТекСтрока.ЦенаВалютная = ТекСтрока.Цена / ТекСтрока.КроссКурс;
	КонецЕсли;
	РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрока, Истина);
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаПриИзменении(Элемент)
	ТекСтрока = Элементы.Услуги.ТекущиеДанные;
	ПриИзмененииСуммыУслуги(ТекСтрока);
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаНДСПриИзменении(Элемент)
	ТекСтрока = Элементы.Услуги.ТекущиеДанные;
	ОбновитьВсегоВстрокеТЧ(ТекСтрока);
КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаВалютнаяПриИзменении(Элемент)
	ТекСтрока = Элементы.Услуги.ТекущиеДанные;
	ТекСтрока.Цена = ТекСтрока.ЦенаВалютная * ТекСтрока.КроссКурс;
	РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрока, Истина);
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаВалютнаяПриИзменении(Элемент)
	ТекСтрока = Элементы.Услуги.ТекущиеДанные;
	ТекСтрока.ЦенаВалютная = ?(ТекСтрока.Количество = 0, 0, ТекСтрока.СуммаВалютная / ТекСтрока.Количество);
	ТекСтрока.Цена = ТекСтрока.ЦенаВалютная * ТекСтрока.КроссКурс;
	РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрока, Истина);
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаНДСВалютнаяПриИзменении(Элемент)
	ТекСтрока = Элементы.Услуги.ТекущиеДанные;
	ОбновитьВсегоВстрокеТЧ(ТекСтрока);
КонецПроцедуры

&НаКлиенте
Процедура УслугиСтавкаНДСПриИзменении(Элемент)
	ТекСтрока = Элементы.Услуги.ТекущиеДанные;
	РассчитатьСуммуНДС(ТекСтрока, Истина);
КонецПроцедуры

&НаКлиенте
Процедура УслугиВалютаПриИзменении(Элемент)
	ТекСтрока = Элементы.Услуги.ТекущиеДанные;
	
	Если ТекСтрока.Валюта = ДанныеСтрокиУслуги.Валюта Тогда
		Возврат;
	КонецЕсли;
	
	ТекСтрока.КроссКурс = ПолучитьКроссКурс(ТекСтрока.Валюта, Объект.ВалютаДокумента, Объект.ДатаКурса);
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ТекСтрока", ТекСтрока);
		
	Если ТекСтрока.Цена = 0 Тогда
		УслугиПриИзмененииВалютыЗавершение(КодВозвратаДиалога.Нет, ДопПараметры);
	Иначе
		Оповещ = Новый ОписаниеОповещения("УслугиПриИзмененииВалютыЗавершение", ЭтотОбъект, ДопПараметры);
		ПоказатьВопрос(Оповещ, "Изменилась валюта строки. Пересчитать цену и сумму по курсу?", РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УслугиКроссКурсПриИзменении(Элемент)
	ТекСтрока = Элементы.Услуги.ТекущиеДанные;
	ПриИзменииКроссКурсаВСтроке(ТекСтрока);
КонецПроцедуры

&НаКлиенте
Процедура УслугиРекламацияПриИзменении(Элемент)
	
	УслугиРекламацияПриИзмененииСервер();
	
	ТекСтрока = Элементы.Услуги.ТекущиеДанные;
	РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрока, Истина);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// уатУправлениеАвтотранспортом.МодификацияКонфигурации
&НаКлиенте
Процедура Подключаемый_уатВыполнитьКоманду(Команда)
	
	уатМодификацияКонфигурацииКлиентПереопределяемый.ВыполнитьПодключаемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры
// Конец уатУправлениеАвтотранспортом.МодификацияКонфигурации

&НаКлиенте
Процедура Очистить(Команда)
	Если Объект.Услуги.Количество() Тогда
		ТекстНСТР = НСтр("en='The list of services is not empty! Clear?';ru='Список услуг не пустой! Очистить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ОчиститьЗавершение", ЭтотОбъект), ТекстНСТР,
			РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет, НСтр("en='Clear the table';ru='Очистка таблицы'"));
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.Услуги.Очистить();
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЦеныИВалюту(Команда)
	ОбработатьИзмененияПоКнопкеЦеныИВалюты(Новый ОписаниеОповещения("РедактироватьЦеныИВалютуЗавершение", ЭтотОбъект), Объект.ВалютаДокумента);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаПериод(Команда)
	Если Объект.Услуги.Количество() > 0 Тогда
		ТекстНСТР = НСтр("en='Before filling out the document table is cleared. Do you want to continue?';ru='Перед заполнением таблица документа будет очищена. Продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьЗаПериодЗавершение", ЭтотОбъект), ТекстНСТР, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗаПериодФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура НастройкаВводаНаОсновании(Команда)
	ОткрытьФорму("ОбщаяФорма.уатНастройкиВводаНаОсновании",, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
КонецПроцедуры

&НаКлиенте
Процедура КнопкаНастройкаПериода(Команда)
	
	ПроизвольныйПериод               = Новый СтандартныйПериод;
	ПроизвольныйПериод.Вариант       = ВариантСтандартногоПериода.ПроизвольныйПериод;
	ПроизвольныйПериод.ДатаНачала    = Объект.ДатаНач;
	ПроизвольныйПериод.ДатаОкончания = Объект.ДатаКон;
	
	ДиалогВыбораПериода        = Новый ДиалогРедактированияСтандартногоПериода();
	ДиалогВыбораПериода.Период = ПроизвольныйПериод;
	
	ДиалогВыбораПериода.Показать(Новый ОписаниеОповещения("КнопкаНастройкаПериодаЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьКроссКурсВТЧ(Команда)
	мсвВалюты = Новый Массив;
	Для Каждого ТекСтрока Из Объект.Услуги Цикл
		Если НЕ ЗначениеЗаполнено(ТекСтрока.Валюта) Тогда
			Продолжить;
		КонецЕсли;
		
		Если мсвВалюты.Найти(ТекСтрока.Валюта) = Неопределено Тогда
			мсвВалюты.Добавить(ТекСтрока.Валюта);
		КонецЕсли;
	КонецЦикла;
	
	Если мсвВалюты.Количество() = 0 Тогда
		уатОбщегоНазначенияТиповые.СообщитьОбОшибке("Выделенные строки не содержат ни одной валюты!
			|Операция допустима только для строк с указанными валютами.",,, СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;
	
	Если мсвВалюты.Количество() > 1 Тогда
		Оповещ = Новый ОписаниеОповещения("ИзменитьКроссКурсВТЧВыборВалюты", ЭтотОбъект);
		
		СписВалюты = Новый СписокЗначений;
		СписВалюты.ЗагрузитьЗначения(мсвВалюты);
		СписВалюты.ПоказатьВыборЭлемента(Оповещ, "Строки с выбранной валютой будут пересчитаны", СписВалюты);
		Возврат;
	КонецЕсли;
	
	ИзменитьКроссКурсВТЧВводКроссКурса(мсвВалюты[0]);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура УстановитьВидимость()
	
	Элементы.СозданПеревозчиком.Доступность = Не АвторизованВнешнийПользователь;
	Элементы.Перевозчик.Доступность = Не АвторизованВнешнийПользователь;
	Элементы.ПринадлежностьПеревозки.Доступность = Не АвторизованВнешнийПользователь;
	Элементы.УслугиСтатьяДоходов.Доступность = Не АвторизованВнешнийПользователь;
	
	ПеревозчикНашаОрганизация = ПринадлежностьПеревозки = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное");
	Элементы.Перевозчик.Видимость = Не ПеревозчикНашаОрганизация;
	Элементы.Контрагент.Видимость = ПеревозчикНашаОрганизация;
	
	Элементы.УслугиСтавкаНДС.Видимость = Объект.УчитыватьНДС;
	Элементы.УслугиСуммаНДС.Видимость = Объект.УчитыватьНДС;
	Элементы.УслугиВсего.Видимость = Объект.УчитыватьНДС;
	
	ВедениеВзаиморасчетов = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.ДоговорКонтрагента, "ВедениеВзаиморасчетов");
	Элементы.УслугиЗаказ.АвтоОтметкаНезаполненного = (ВедениеВзаиморасчетов = ПредопределенноеЗначение("Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказамНаТС"));
	
	Элементы.УслугиЦенаВалютная.Видимость     = МноговалютныйУчет;
	Элементы.УслугиСуммаВалютная.Видимость    = МноговалютныйУчет;
	Элементы.УслугиСуммаНДСвалютная.Видимость = МноговалютныйУчет И Объект.УчитыватьНДС;
	Элементы.УслугиВсегоВалютная.Видимость    = МноговалютныйУчет И Объект.УчитыватьНДС;
	Элементы.УслугиГруппаВалюта.Видимость     = МноговалютныйУчет;
	Если МноговалютныйУчет Тогда
		Элементы.УслугиЦена.Заголовок     = СтрШаблон("Цена (%1)", Объект.ВалютаДокумента);
		Элементы.УслугиСумма.Заголовок    = СтрШаблон("Сумма (%1)", Объект.ВалютаДокумента);
		Элементы.УслугиСуммаНДС.Заголовок = СтрШаблон("Сумма НДС (%1)", Объект.ВалютаДокумента);
		Элементы.УслугиВсего.Заголовок    = СтрШаблон("Всего (%1)", Объект.ВалютаДокумента);
	Иначе
		Элементы.УслугиЦена.Заголовок     = "";
		Элементы.УслугиСумма.Заголовок    = "";
		Элементы.УслугиСуммаНДС.Заголовок = "";
		Элементы.УслугиВсего.Заголовок    = "";
	КонецЕсли;
	
	Элементы.УслугиИзменитьКроссКурсВТЧ.Видимость                = МноговалютныйУчет;
	Элементы.УслугиКонтекстноеМенюИзменитьКроссКурсВТЧ.Видимость = МноговалютныйУчет;
	
	Если уатОбщегоНазначения.ПроверкаВнешнегоПользователя() Тогда
		Элементы.УслугиНастройкаВводаНаОсновании.Видимость = Ложь;
		Элементы.УслугиИзменитьКроссКурсВТЧ.Видимость = Ложь;
	КонецЕсли;
	
	ВывестиСуммовыеИтогиДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВсегоВТЧУслуги()
	Для Каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл
		ОбновитьВсегоВстрокеТЧ(СтрокаТабличнойЧасти);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВсегоВстрокеТЧ(СтрокаТабличнойЧасти)
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма
		+ ?(Объект.УчитыватьНДС И НЕ Объект.СуммаВключаетНДС, СтрокаТабличнойЧасти.СуммаНДС, 0);
	
	Если МноговалютныйУчет Тогда
		СтрокаТабличнойЧасти.ВсегоВалютная = СтрокаТабличнойЧасти.СуммаВалютная
			+ ?(Объект.УчитыватьНДС И НЕ Объект.СуммаВключаетНДС, СтрокаТабличнойЧасти.СуммаНДСВалютная, 0);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьВсегоВТЧУслугиНаСервере()
	Для Каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл
		ОбновитьВсегоВСтрокеТЧНаСервере(СтрокаТабличнойЧасти);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОбновитьВсегоВСтрокеТЧНаСервере(СтрокаТабличнойЧасти)
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма
		+ ?(Объект.УчитыватьНДС И НЕ Объект.СуммаВключаетНДС, СтрокаТабличнойЧасти.СуммаНДС, 0);
	
	Если МноговалютныйУчет Тогда
		СтрокаТабличнойЧасти.ВсегоВалютная = СтрокаТабличнойЧасти.СуммаВалютная
			+ ?(Объект.УчитыватьНДС И НЕ Объект.СуммаВключаетНДС, СтрокаТабличнойЧасти.СуммаНДСВалютная, 0);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВывестиСуммовыеИтогиДокумента()
	
	Если Объект.УчитыватьНДС Тогда 
		Если Объект.СуммаВключаетНДС Тогда 
			НадписьВсегоНДС = НСтр("en='VAT amount';ru='НДС в сумме'") + ":";
		Иначе 
			НадписьВсегоНДС = НСтр("en='VAT from above';ru='НДС сверху'") + ":";
		КонецЕсли;
		НадписьВсего = НСтр("en='Total including VAT';ru='Всего с НДС'");
		Элементы.СтраницыИтогов.ТекущаяСтраница = Элементы.ИтогоУчетНДС;
	Иначе
		НадписьВсего = НСтр("en='Total';ru='Всего'");
		Элементы.СтраницыИтогов.ТекущаяСтраница = Элементы.ИтогоБезНДС;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ВалютаДокумента) Или Объект.ВалютаДокумента = мВалютаРегламентированногоУчета Тогда 
		НадписьКурс = "(1.0000)";
		Элементы.НадписьКурс.Видимость = Ложь;
		Элементы.НадписьКурс2.Видимость = Ложь;
	Иначе
		НадписьКурс = "(" + Формат(
			?(Объект.КратностьВзаиморасчетов = 0, Объект.КурсВзаиморасчетов, Объект.КурсВзаиморасчетов/Объект.КратностьВзаиморасчетов),
			"ЧДЦ=4; ЧРД=.; ЧН=0.0000; ЧГ=0") + ")";
		Элементы.НадписьКурс.Видимость = Истина;
		Элементы.НадписьКурс2.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	УчитыватьНДСПередИзменением = Объект.УчитыватьНДС;
	СуммаВключаетНДСПередИзменением = Объект.СуммаВключаетНДС;
	
	// Обработка события изменения организации.
	Объект.УчитыватьНДС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.УчитыватьНДС"));
	Объект.СуммаВключаетНДС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.СуммаВключаетНДС"));
	
	Если Объект.УчитыватьНДС <> УчитыватьНДСПередИзменением ИЛИ Объект.СуммаВключаетНДС <> СуммаВключаетНДСПередИзменением Тогда
		ПересчитатьСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС("Услуги");
		ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
		ОбновитьВсегоВТЧУслуги();
		РассчитатьСуммуДокумента();
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуДокумента()
	Объект.СуммаДокумента = Объект.Услуги.Итог("Сумма");
	Если Объект.УчитыватьНДС И НЕ Объект.СуммаВключаетНДС Тогда
		Объект.СуммаДокумента = Объект.СуммаДокумента + Объект.Услуги.Итог("СуммаНДС");
	КонецЕсли;
	
	РассчитатьСуммуДокументаСервер();
КонецПроцедуры

// Процедура рассчитывает сумму в строке табличной части.
//
&НаКлиенте
Процедура РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти = Неопределено, флУслуги = Ложь, РасчетСуммыДокумента = Истина)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
	Если флУслуги И МноговалютныйУчет Тогда
		СтрокаТабличнойЧасти.СуммаВалютная = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.ЦенаВалютная;
	КонецЕсли;
	
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти, флУслуги);
	ОбновитьВсегоВстрокеТЧ(СтрокаТабличнойЧасти);
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	Если РасчетСуммыДокумента Тогда
		РассчитатьСуммуДокумента();
	КонецЕсли;
		
КонецПроцедуры

// Рассчитывается сумма НДС в строке табличной части.
//
&НаКлиенте
Процедура РассчитатьСуммуНДС(СтрокаТабличнойЧасти, флУслуги = Ложь)
	
	СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	
	СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
		СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
		СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
		
	Если флУслуги И МноговалютныйУчет Тогда
		СтрокаТабличнойЧасти.СуммаНДСВалютная = ?(Объект.СуммаВключаетНДС, 
			СтрокаТабличнойЧасти.СуммаВалютная - (СтрокаТабличнойЧасти.СуммаВалютная) / ((СтавкаНДС + 100) / 100),
			СтрокаТабличнойЧасти.СуммаВалютная * СтавкаНДС / 100);
	КонецЕсли;
	
	ОбновитьВсегоВстрокеТЧ(СтрокаТабличнойЧасти);
	
КонецПроцедуры // РассчитатьСуммуНДС()

// Процедура заполняет Ставку НДС в табличной части по системе налогообложения.
// 
&НаСервере
Процедура ЗаполнитьСтавкуНДСПоНалогообложениеНДС()
	
	СтавкаНДСПоУмолчанию = Перечисления.СтавкиНДС.ПустаяСсылка();
	Для Каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл
		СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
		СтрокаТабличнойЧасти.СуммаНДС = 0;
	КонецЦикла;
	
	Если Объект.УчитыватьНДС Тогда
		
		Для Каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС) Тогда
				СтрокаТабличнойЧасти.СтавкаНДС = СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
			КонецЕсли;
			
			СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
			СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
				СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
				СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
			
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС(ИмяТЧ)
	уатОбщегоНазначенияСервер.ПересчитатьСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС(Объект[ИмяТЧ], Объект.СуммаВключаетНДС);
КонецПроцедуры

&НаСервере
Процедура ПересчитатьЦеныТабличнойЧастиПоВалюте(ВалютаПередИзменением, ИмяТЧ, ДопПараметры = Неопределено)
	уатОбщегоНазначенияСервер.ПересчитатьЦеныТабличнойЧастиПоВалюте(Объект, ВалютаПередИзменением, ИмяТЧ, ДопПараметры);
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииКонтрагентаИлиОрганизации(Знач Оповещение)
	
	Если ТипЗнч(Объект.Перевозчик) = Тип("СправочникСсылка.Контрагенты") Тогда
		ДанныеОбменаССервером = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, УчитыватьНДС, Дата");
		ЗаполнитьЗначенияСвойств(ДанныеОбменаССервером, Объект);
		ДанныеОбменаССервером.Контрагент = Объект.Подразделение;
		ЗначенияДляЗаполнения = ИзменениеКонтрагентаСервер(ДанныеОбменаССервером);
		Объект.ДоговорКонтрагента = ЗначенияДляЗаполнения.ДоговорКонтрагента;
		
		ДоговорПередИзменением = Договор;
		Договор = Объект.ДоговорКонтрагента;
		
		Оповещ = Новый ОписаниеОповещения("ПриИзмененииКонтрагентаИлиОрганизацииЗавершение", ЭтотОбъект, Новый Структура("Оповещение", Оповещение));
		уатОбщегоНазначенияКлиент.ПриИзмененииДоговора(ЭтаФорма, Оповещ, ДоговорПередИзменением);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииКонтрагентаИлиОрганизацииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Оповещение = ДополнительныеПараметры.Оповещение;
	
	Если Не Оповещение = Неопределено Тогда 
		ВыполнитьОбработкуОповещения(Оповещение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИзменениеКонтрагентаСервер(ДанныеДляЗаполнения)
	СтруктураПараметровДляПолученияДоговора = 
		уатЗаполнениеДокументов.ПолучитьСтруктуруПараметровДляПолученияДоговораПродажи();
	
	ЗначенияДляЗаполнения = уатОбщегоНазначенияСервер.ПриИзмененииЗначенияКонтрагента(ДанныеДляЗаполнения,
		СтруктураПараметровДляПолученияДоговора);
	Возврат ЗначенияДляЗаполнения;
КонецФункции

// Процедура выполняет пересчет в табличной части документа после изменений 
// в форме "Цены и валюта".Выполняется пересчет колонок: цена, скидка, сумма,
// сумма НДС, всего.
//
&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты(Знач Оповещение, Знач ВалютаРасчетовПередИзменением, ПересчитатьЦены = Ложь)
	
	// 1. Формируем структуру параметров для заполнения формы "Цены и Валюта".
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВалютаДокумента",		  Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("Курс",				  Объект.КурсВзаиморасчетов);
	СтруктураПараметров.Вставить("Кратность",			  Объект.КратностьВзаиморасчетов);
	Если МноговалютныйУчет Тогда
		СтруктураПараметров.Вставить("ВалютаРасчетов",		Объект.ВалютаВзаиморасчетов);
		СтруктураПараметров.Вставить("КроссКурс",			Объект.КроссКурс);
		СтруктураПараметров.Вставить("СуммаВзаиморасчетов", Объект.СуммаВзаиморасчетов);
	КонецЕсли;
	СтруктураПараметров.Вставить("ДатаКурса",             Объект.ДатаКурса);
	СтруктураПараметров.Вставить("Контрагент",			  Объект.Перевозчик);
	СтруктураПараметров.Вставить("Договор",				  Объект.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("Организация",			  Объект.Организация);
	СтруктураПараметров.Вставить("ДатаДокумента",		  Объект.Дата);
	СтруктураПараметров.Вставить("ПерезаполнитьЦены",	  Ложь);
	СтруктураПараметров.Вставить("ПересчитатьЦены",		  ПересчитатьЦены);
	СтруктураПараметров.Вставить("БылиВнесеныИзменения",  Ложь);
	СтруктураПараметров.Вставить("СуммаВключаетНДС",      Объект.СуммаВключаетНДС);
	СтруктураПараметров.Вставить("НалогообложениеНДС",	  Объект.УчитыватьНДС);
	// Для объедининенного решения с БП 3
	СтруктураПараметров.Вставить("ДокументБезНДС",        НЕ Объект.УчитыватьНДС);
	СтруктураЦеныИВалюта = Неопределено;

	Если НЕ ПравоРедактированиеДокумента() Тогда
		СтруктураПараметров.Вставить("ТолькоПросмотр", Истина);
	КонецЕсли;
	
	ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров,,,,,
		Новый ОписаниеОповещения("ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение", ЭтотОбъект,
		Новый Структура("ВалютаРасчетовПередИзменением, Оповещение", ВалютаРасчетовПередИзменением, Оповещение)),
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено ИЛИ НЕ ПравоРедактированиеДокумента() Тогда
		Возврат;
	КонецЕсли;
	
    ВалютаРасчетовПередИзменением = ДополнительныеПараметры.ВалютаРасчетовПередИзменением;
    Оповещение                    = ДополнительныеПараметры.Оповещение;
	СтруктураЦеныИВалюта          = Результат;
    
    // 3. Перезаполняем табличную часть "Номенклатура", если были внесены изменения в форме "Цены и Валюта".
    Если ТипЗнч(СтруктураЦеныИВалюта) = Тип("Структура") Тогда
		ДопПараметры = Новый Структура("ПредКурс, ПредКратность, Курс, Кратность, ПредДатаКурса",
			Объект.КурсВзаиморасчетов, Объект.КратностьВзаиморасчетов, СтруктураЦеныИВалюта.Курс,
			СтруктураЦеныИВалюта.Кратность, Объект.ДатаКурса);
		
		Если СтруктураЦеныИВалюта.Свойство("ВалютаДокумента") И СтруктураЦеныИВалюта.Свойство("Курс") И СтруктураЦеныИВалюта.Свойство("Кратность")
            И СтруктураЦеныИВалюта.Свойство("СуммаВключаетНДС") И  СтруктураЦеныИВалюта.Свойство("НалогообложениеНДС") Тогда
            Объект.ВалютаДокумента		   = СтруктураЦеныИВалюта.ВалютаДокумента;
            Объект.КурсВзаиморасчетов      = СтруктураЦеныИВалюта.Курс;
            Объект.КратностьВзаиморасчетов = СтруктураЦеныИВалюта.Кратность;
			Объект.ВалютаВзаиморасчетов    = СтруктураЦеныИВалюта.ВалютаРасчетов;
			Объект.КроссКурс               = СтруктураЦеныИВалюта.КроссКурс;
			Объект.ДатаКурса               = СтруктураЦеныИВалюта.ДатаКурса;
            Объект.СуммаВключаетНДС		   = СтруктураЦеныИВалюта.СуммаВключаетНДС;
            Объект.УчитыватьНДС			   = СтруктураЦеныИВалюта.НалогообложениеНДС;
        КонецЕсли;
        
        // Пересчитываем сумму если изменился признак Налогообложение НДС.
        Если СтруктураЦеныИВалюта.Свойство("НалогообложениеНДС") И СтруктураЦеныИВалюта.Свойство("ПредНалогообложениеНДС")
            И СтруктураЦеныИВалюта.НалогообложениеНДС <> СтруктураЦеныИВалюта.ПредНалогообложениеНДС Тогда
			
			ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
        КонецЕсли;
        
        // Пересчитываем цены по валюте.
        Если СтруктураЦеныИВалюта.Свойство("ПересчитатьЦены") И СтруктураЦеныИВалюта.ПересчитатьЦены Тогда
			ПересчитатьЦеныТабличнойЧастиПоВалюте(ВалютаРасчетовПередИзменением, "Услуги", ДопПараметры);
			Если МноговалютныйУчет И (ДопПараметры.Курс <> ДопПараметры.ПредКурс
				ИЛИ ДопПараметры.Кратность <> ДопПараметры.ПредКратность) Тогда //рассчитывает валютные показатели
				Для Каждого ТекСтрока Из Объект.Услуги Цикл
					РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрока, Истина, Ложь);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
        
        // Пересчитываем сумму если изменился признак "Сумма включает НДС".
        Если СтруктураЦеныИВалюта.Свойство("СуммаВключаетНДС") И СтруктураЦеныИВалюта.Свойство("ПредСуммаВключаетНДС") Тогда
            Если СтруктураЦеныИВалюта.СуммаВключаетНДС <> СтруктураЦеныИВалюта.ПредСуммаВключаетНДС Тогда
                ПересчитатьСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС("Услуги");
            КонецЕсли;
		КонецЕсли;
		
		// Пересчитываем кросс-курс в строках
		Если МноговалютныйУчет
			И (Результат.ВалютаДокумента <> Результат.ПредВалютаДокумента
			ИЛИ Объект.ДатаКурса <> ДопПараметры.ПредДатаКурса) Тогда
			
			Для Каждого ТекСтрока Из Объект.Услуги Цикл
				ТекСтрока.КроссКурс = ПолучитьКроссКурс(ТекСтрока.Валюта, Объект.ВалютаДокумента, Объект.ДатаКурса);
				ПриИзменииКроссКурсаВСтроке(ТекСтрока, Ложь);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьВидимость();
	
	ОбновитьВсегоВТЧУслуги();
    РассчитатьСуммуДокумента();
	
	Если Оповещение <> Неопределено Тогда 
		ВыполнитьОбработкуОповещения(Оповещение);
	КонецЕсли;

КонецПроцедуры // ОбработатьИзмененияПоКнопкеЦеныИВалюты()

&НаСервереБезКонтекста
Функция ПравоРедактированиеДокумента()
	Результат = ПравоДоступа("Редактирование", Метаданные.Документы.уатРеестрПеревозок);
	Возврат Результат;
КонецФункции

// Промежуточная функция расчета кросс-курса - избавляемся от таскания контекста формы на сервер
&НаСервереБезКонтекста
Функция ПолучитьКроссКурс(ВалютаНач, ВалютаКон, ДатаКурса, КэшКурсов = Неопределено)
	Возврат уатОбщегоНазначенияСервер.ПолучитьКроссКурс(ВалютаНач, ВалютаКон, ДатаКурса, КэшКурсов);
КонецФункции

&НаКлиенте
Процедура ПриИзменииКроссКурсаВСтроке(ТекСтрока, ПересчетИтогов = Истина)
	ТекСтрока.Сумма = ТекСтрока.СуммаВалютная * ТекСтрока.КроссКурс;
	ПриИзмененииСуммыУслуги(ТекСтрока);
	ОбновитьВсегоВстрокеТЧ(ТекСтрока);
	
	Если ПересчетИтогов = Истина Тогда
		ОбновитьВсегоВТЧУслуги();
		ВывестиСуммовыеИтогиДокумента();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСуммыУслуги(ТекСтрока)
	ТекСтрока.Цена = ?(ТекСтрока.Количество = 0, 0, ТекСтрока.Сумма / ТекСтрока.Количество);
	Если МноговалютныйУчет И ТекСтрока.ЦенаВалютная = 0 И ТекСтрока.КроссКурс <> 0 Тогда
		ТекСтрока.СуммаВалютная = ТекСтрока.Сумма / ТекСтрока.КроссКурс;
		ТекСтрока.ЦенаВалютная = ?(ТекСтрока.Количество = 0, 0, ТекСтрока.СуммаВалютная / ТекСтрока.Количество);
	КонецЕсли;
	РассчитатьСуммуНДС(ТекСтрока, Истина);
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриИзмененииВалютыЗавершение(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда //пересчет сумм в строке по курсу
		СтруктураКурсаПред = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ДанныеСтрокиУслуги.Валюта, Объект.ДатаКурса);
		СтруктураКурса = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ДопПараметры.ТекСтрока.Валюта, Объект.ДатаКурса);
		
		ДопПараметры.ТекСтрока.ЦенаВалютная = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ДопПараметры.ТекСтрока.ЦенаВалютная,
			ДанныеСтрокиУслуги.Валюта,    ДопПараметры.ТекСтрока.Валюта,
			СтруктураКурсаПред.Курс,      СтруктураКурса.Курс,
			СтруктураКурсаПред.Кратность, СтруктураКурса.Кратность);
	КонецЕсли;
	
	ДопПараметры.ТекСтрока.Цена = ДопПараметры.ТекСтрока.ЦенаВалютная * ДопПараметры.ТекСтрока.КроссКурс;
	РассчитатьСуммуВСтрокеТабличнойЧасти(ДопПараметры.ТекСтрока, Истина);
		
	РассчитатьСуммуНДС(ДопПараметры.ТекСтрока, Истина);
	ОбновитьВсегоВстрокеТЧ(ДопПараметры.ТекСтрока);
		
	ВывестиСуммовыеИтогиДокумента();
	
	ДанныеСтрокиУслуги = Новый Структура("Валюта", ДопПараметры.ТекСтрока.Валюта);
	Модифицированность = Истина;	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаПериодЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	Иначе
		Объект.Услуги.Очистить();
		Модифицированность = Истина;
	КонецЕсли;
	
	ЗаполнитьЗаПериодФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаПериодФрагмент()
	
	ПараметрыФормы = Новый Структура("НачалоПериода, КонецПериода, СсылкаОснование", Объект.ДатаНач, Объект.ДатаКон, Объект.Ссылка);
	ОткрытьФорму("ОбщаяФорма.уатЗаполнениеПоУслугам", ПараметрыФормы, ЭтотОбъект,,,,
		Новый ОписаниеОповещения("ЗаполнитьЗаПериодФрагментЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаПериодФрагментЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ВалютаВзаиморасчетов = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.ДоговорКонтрагента, "ВалютаВзаиморасчетов");
	ВалютаВзаиморасчетовКурсКратность = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ВалютаВзаиморасчетов, Объект.Дата);
	
	КэшКурсов = Новый Соответствие;
	КэшКурсов.Вставить(Объект.ВалютаДокумента, Новый Структура("Курс, Кратность", Объект.КурсВзаиморасчетов, Объект.КратностьВзаиморасчетов));
	
	СуммаПоРекламациям = 0;
	
	мсвУслуги = Результат;
	Если ТипЗнч(мсвУслуги) = Тип("Массив") И мсвУслуги.Количество() > 0 Тогда
		Для Каждого СтрокаУслуг Из мсвУслуги Цикл
			НоваяСтрока = Объект.Услуги.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаУслуг,, "Цена, Сумма");
			
			Если Объект.УчитыватьНДС И Объект.СуммаВключаетНДС Тогда
				НоваяСтрока.Сумма = СтрокаУслуг.Сумма;
				НоваяСтрока.Цена = СтрокаУслуг.Цена;
			Иначе
				НоваяСтрока.Сумма = СтрокаУслуг.Сумма - СтрокаУслуг.СуммаНДС;
				НоваяСтрока.Цена = ?(СтрокаУслуг.Количество = 0, 0, НоваяСтрока.Сумма / СтрокаУслуг.Количество);
			КонецЕсли;
			
			Если НЕ Объект.УчитыватьНДС Тогда
				НоваяСтрока.СтавкаНДС = Неопределено;
				НоваяСтрока.СуммаНДС  = 0;
			КонецЕсли;
			
			Если Объект.УчитыватьНДС И НЕ ЗначениеЗаполнено(НоваяСтрока.СтавкаНДС)
				И ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
				НоваяСтрока.СтавкаНДС = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(
										НоваяСтрока.Номенклатура, "СтавкаНДС");
				РассчитатьСуммуНДС(НоваяСтрока, Истина);
			КонецЕсли;
			
			НоваяСтрока.СтатьяДоходов = уатОбщегоНазначенияСервер.СтатьяДоходовНоменклатуры(НоваяСтрока.Номенклатура);
			
			Если МноговалютныйУчет Тогда
				НоваяСтрока.Валюта = СтрокаУслуг.Валюта;
				НоваяСтрока.КроссКурс = ПолучитьКроссКурс(СтрокаУслуг.Валюта, Объект.ВалютаДокумента, Объект.ДатаКурса, КэшКурсов);
				НоваяСтрока.ЦенаВалютная = НоваяСтрока.Цена;
				НоваяСтрока.СуммаВалютная = НоваяСтрока.Сумма;
				НоваяСтрока.СуммаНДСВалютная = НоваяСтрока.СуммаНДС;
				
				// перевод невалютных колонок в валюту документа из валюты заказа
				Если НоваяСтрока.Валюта <> Объект.ВалютаДокумента Тогда
					НоваяСтрока.Цена = НоваяСтрока.ЦенаВалютная * НоваяСтрока.КроссКурс;
					РассчитатьСуммуВСтрокеТабличнойЧасти(НоваяСтрока, Истина, Ложь);
					ОбновитьВсегоВстрокеТЧ(НоваяСтрока);
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(НоваяСтрока.Рекламация) Тогда
				СуммаПоРекламациям = СуммаПоРекламациям - НоваяСтрока.Сумма;
			КонецЕсли;
			
		КонецЦикла;
		
		Модифицированность = Истина;
	КонецЕсли;
	
	Если СуммаПоРекламациям <> 0 Тогда
		ТекстНСтр = НСтр("ru = 'При заполнении учтена задолженность по рекламациям на общую сумму %1 %2'");
		ТекстНСтр = СтрШаблон(ТекстНСтр, СуммаПоРекламациям, Объект.ВалютаДокумента);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстНСтр);
	КонецЕсли;
	
	РассчитатьСуммуДокумента();
	ОбновитьВсегоВТЧУслуги();
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаНастройкаПериодаЗавершение(Период, ДополнительныеПараметры) Экспорт
	
	Если Не Период = Неопределено Тогда
		Объект.ДатаНач = Период.ДатаНачала;
		Объект.ДатаКон = Период.ДатаОкончания;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьКроссКурсВТЧВыборВалюты(Результат, ДопПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		ИзменитьКроссКурсВТЧВводКроссКурса(Результат.Значение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьКроссКурсВТЧВводКроссКурса(Валюта)
	ДопПараметры = Новый Структура("Валюта", Валюта);
	Оповещ = Новый ОписаниеОповещения("ИзменитьКроссКурсВТЧВводКроссКурсаЗавершение", ЭтотОбъект, ДопПараметры);
	ПоказатьВводЧисла(Оповещ, , "Укажите новое значение кросс-курса", 10, 4);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьКроссКурсВТЧВводКроссКурсаЗавершение(Результат, ДопПараметры) Экспорт
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	мсвСтрок = Объект.Услуги.НайтиСтроки(Новый Структура("Валюта", ДопПараметры.Валюта));
	Для Каждого ТекСтрока Из мсвСтрок Цикл
		ТекСтрока.КроссКурс = Результат;
		
		ТекСтрока.Цена = ТекСтрока.ЦенаВалютная * ТекСтрока.КроссКурс;
		РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрока, Истина, Ложь);
		РассчитатьСуммуНДС(ТекСтрока, Истина);
	КонецЦикла;
	
	РассчитатьСуммуДокумента();
	ОбновитьВсегоВТЧУслуги();
	ВывестиСуммовыеИтогиДокумента();
	
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЦеныИВалютуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	РассчитатьСуммуДокумента();
	ОбновитьВсегоВТЧУслуги();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УслугиРекламацияПриИзмененииСервер()
	
	ИдентификаторСтроки = Элементы.Услуги.ТекущаяСтрока;
	ТекСтрока = Объект.Услуги.НайтиПоИдентификатору(ИдентификаторСтроки);
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекСтрока.Рекламация) Тогда
		СтавкаНДСРекламации = Неопределено;
		СуммаРекламации = 0;
		Для Каждого СтрокаРекламации Из ТекСтрока.Рекламация.Распределение Цикл
			
			Если (ПринадлежностьПеревозки = Перечисления.уатПринадлежностьТС.Привлеченное
				И СтрокаРекламации.Контрагент = Объект.Перевозчик
				И СтрокаРекламации.ДоговорКонтрагента = Объект.ДоговорКонтрагента)
				Или (ПринадлежностьПеревозки = Перечисления.уатПринадлежностьТС.Собственное
				И СтрокаРекламации.Контрагент <> Объект.Контрагент) Тогда
				
				СтавкаНДСРекламации = СтрокаРекламации.СтавкаНДС;
				ТекСуммаРекламации = СтрокаРекламации.Сумма;
				Если МноговалютныйУчет Тогда
					ТекВалютаРекламации = СтрокаРекламации.Валюта;
				Иначе
					ТекВалютаРекламации = ТекСтрока.Рекламация.ВалютаДокумента;
				КонецЕсли;
				
				Если ТекВалютаРекламации <> Объект.ВалютаДокумента Тогда
					ТекСуммаРекламации = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСуммаРекламации,
						ТекВалютаРекламации, Объект.ВалютаДокумента,
						СтрокаРекламации.КурсВзаиморасчетов, Объект.КурсВзаиморасчетов,
						СтрокаРекламации.КратностьВзаиморасчетов, Объект.КратностьВзаиморасчетов);
				КонецЕсли;
				
				СуммаРекламации = СуммаРекламации + ТекСуммаРекламации;
				
			КонецЕсли;
			
		КонецЦикла;
	Иначе
		СуммаРекламации = 0;
		СтавкаНДСРекламации = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
			ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнаяСтавкаНДС");
	КонецЕсли;
	
	ТекСтрока.Количество = 1;
	Если ЗначениеЗаполнено(СтавкаНДСРекламации) Тогда
		ТекСтрока.СтавкаНДС = СтавкаНДСРекламации;
	КонецЕсли;
	Если МноговалютныйУчет Тогда
		ТекСтрока.ЦенаВалютная = -СуммаРекламации;
		ТекСтрока.Валюта = Объект.ВалютаДокумента;
		Если Объект.КратностьВзаиморасчетов = 0 Тогда
			ТекСтрока.КроссКурс = 1;
		Иначе
			ТекСтрока.КроссКурс = Объект.КурсВзаиморасчетов / Объект.КратностьВзаиморасчетов;
		КонецЕсли;
		ТекСтрока.Цена = ТекСтрока.ЦенаВалютная * ТекСтрока.КроссКурс;
	Иначе
		ТекСтрока.Цена = -СуммаРекламации;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НастроитьПолеДоговорКонтрагента()
	Если ПринадлежностьПеревозки = Перечисления.уатПринадлежностьТС.Собственное Тогда
		уатОбщегоНазначенияСервер.НастроитьПолеДоговорКонтрагента(Элементы.ДоговорКонтрагента, "Объект.Организация", "Объект.Контрагент", "СПокупателем");
	Иначе
		уатОбщегоНазначенияСервер.НастроитьПолеДоговорКонтрагента(Элементы.ДоговорКонтрагента, "Объект.Организация", "Объект.Перевозчик", "СПоставщиком");
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура РассчитатьСуммуДокументаСервер()
	Объект.СуммаВзаиморасчетов = уатОбщегоНазначения_проф.СуммаВзаиморасчетовДокумента(Объект);
	ВывестиСуммовыеИтогиДокумента();
КонецПроцедуры

#КонецОбласти

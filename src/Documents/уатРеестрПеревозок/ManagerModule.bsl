#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	Настройки.ПриПолученииСлужебныхРеквизитов = Ложь;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатРеестрПеревозок";
	КомандаПечати.Идентификатор = "РеестрПеревозок";
	КомандаПечати.Представление = НСтр("ru='Реестр перевозок'");
	КомандаПечати.Порядок       = 1;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр).
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной
//                                                            параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной
//                                            параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт

	Если НЕ уатОбщегоНазначенияСервер.РазрешениеПечатиНепроведенногоДокумента(МассивОбъектов) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "РеестрПеревозок") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "РеестрПеревозок", "РеестрПеревозок",
			ПечатнаяФормаРеестрПеревозок(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.УправлениеДоступом

// Позволяет переопределить ограничение, указанное в модуле менеджера объекта метаданных.
//
// Параметры:
//  Ограничение - Структура:
//    * Текст                             - Строка - ограничение доступа для пользователей.
//                                          Если пустая строка, значит, доступ разрешен.
//    * ТекстДляВнешнихПользователей      - Строка - ограничение доступа для внешних пользователей.
//                                          Если пустая строка, значит, доступ запрещен.
//    * ПоВладельцуБезЗаписиКлючейДоступа - Неопределено - определить автоматически.
//                                        - Булево - если Ложь, то всегда записывать ключи доступа,
//                                          если Истина, тогда не записывать ключи доступа,
//                                          а использовать ключи доступа владельца (требуется,
//                                          чтобы ограничение было строго по объекту-владельцу).
//   * ПоВладельцуБезЗаписиКлючейДоступаДляВнешнихПользователей - Неопределено, Булево - также
//                                          как у параметра ПоВладельцуБезЗаписиКлючейДоступа.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Подразделение)";
	
	Ограничение.ТекстДляВнешнихПользователей = Ограничение.Текст;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// СтандартныеПодсистемы.ВариантыОтчетов

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВариантыОтчетов

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПечатнаяФормаРеестрПеревозок(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_РеализацияУслуг";
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ПервыйДокумент = Истина;
	
	Для Каждого ТекущийДокумент Из МассивОбъектов Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеестрПеревозок_РеестрПеревозок";
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.уатРеестрПеревозок.ПФ_MXL_РеестрПеревозок");
		
		ЗапросШапка = Новый Запрос;
		ЗапросШапка.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент.Ссылка);
		ЗапросШапка.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РеестрПеревозок.Номер КАК Номер,
		|	РеестрПеревозок.Дата КАК Дата,
		|	РеестрПеревозок.ДоговорКонтрагента КАК ДоговорКонтрагента,
		|	РеестрПеревозок.Организация КАК Получатель,
		|	РеестрПеревозок.Перевозчик КАК Поставщик,
		|	РеестрПеревозок.Организация КАК Организация,
		|	РеестрПеревозок.СуммаДокумента КАК СуммаДокумента,
		|	РеестрПеревозок.ВалютаДокумента КАК ВалютаДокумента,
		|	РеестрПеревозок.УчитыватьНДС КАК УчитыватьНДС,
		|	РеестрПеревозок.СуммаВключаетНДС КАК СуммаВключаетНДС
		|ИЗ
		|	Документ.уатРеестрПеревозок КАК РеестрПеревозок
		|ГДЕ
		|	РеестрПеревозок.Ссылка = &ТекущийДокумент";
		Шапка = ЗапросШапка.Выполнить().Выбрать();
		Шапка.Следующий();
		
		ЗапросУслуги = Новый Запрос;
		ЗапросУслуги.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент.Ссылка);
		ЗапросУслуги.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	РеестрПеревозок.Номенклатура КАК ПростоНоменклатура,
		|	ВЫБОР
		|		КОГДА РеестрПеревозок.Номенклатура.ЕдиницаХраненияОстатков.Представление ЕСТЬ NULL
		|			ТОГДА РеестрПеревозок.Номенклатура.ЕдиницаИзмерения.Представление
		|		ИНАЧЕ РеестрПеревозок.Номенклатура.ЕдиницаХраненияОстатков.Представление
		|	КОНЕЦ КАК ЕдиницаИзмерения,
		|	РеестрПеревозок.Содержание КАК Товар,
		|	РеестрПеревозок.Количество КАК Количество,
		|	РеестрПеревозок.Цена КАК Цена,
		|	РеестрПеревозок.Сумма КАК Сумма,
		|	РеестрПеревозок.СтавкаНДС КАК СтавкаНДС,
		|	РеестрПеревозок.СуммаНДС КАК СуммаНДС
		|ИЗ
		|	Документ.уатРеестрПеревозок.Услуги КАК РеестрПеревозок
		|ГДЕ
		|	РеестрПеревозок.Ссылка = &ТекущийДокумент";
		
		ТаблицаУслуги = ЗапросУслуги.Выполнить().Выгрузить();
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		
		ОбластьМакета.Параметры.ТекстЗаголовка = уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(Шапка, НСтр("ru='Реестр перевозок'"));
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ПредставлениеПоставщика = уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(
			уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(
				Шапка.Поставщик,
				Шапка.Дата
			),
			"НаименованиеДляПечатныхФорм,ИНН,КПП,ЮридическийАдрес,Телефоны"
		);
		ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеПоставщика;
		ОбластьМакета.Параметры.Поставщик = Шапка.Поставщик;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		ПредставлениеПолучателя = уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(
			уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(
				Шапка.Получатель, 
				Шапка.Дата
			),
			"НаименованиеДляПечатныхФорм,ИНН,КПП,ЮридическийАдрес,Телефоны"
		);
		ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеПолучателя;
		ОбластьМакета.Параметры.Получатель = Шапка.Получатель;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьСтроки = Макет.ПолучитьОбласть("Строка");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		НомерСтроки = 0;
		
		Для Каждого СтрокаТабличнойЧасти Из ТаблицаУслуги Цикл
			НомерСтроки = НомерСтроки + 1;
			
			ОбластьСтроки.Параметры.Заполнить(СтрокаТабличнойЧасти);
			КоличествоОкр = Окр(СтрокаТабличнойЧасти.Количество, 3);
			ОбластьСтроки.Параметры.Количество = КоличествоОкр;
			ОбластьСтроки.Параметры.Товар = уатОбщегоНазначенияСервер.ПолучитьНаименованиеУслугиДляПечати(СтрокаТабличнойЧасти.ПростоНоменклатура,СтрокаТабличнойЧасти.Товар);
			ОбластьСтроки.Параметры.НомерСтроки = НомерСтроки;
			
			ТабличныйДокумент.Вывести(ОбластьСтроки);
		КонецЦикла;
		
		Сумма    = ТаблицаУслуги.Итог("Сумма");
		СуммаНДС = ТаблицаУслуги.Итог("СуммаНДС");
			
		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		ОбластьМакета.Параметры.Всего = уатОбщегоНазначенияТиповые.уатФорматСумм(Сумма);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Если Шапка.УчитыватьНДС Тогда
			СтавкиНДС = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаУслуги, "СтавкаНДС", Истина);
			ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
			Если СуммаНДС <> 0 Тогда
				ДанныеПечатиНДС = уатОбщегоНазначенияТиповые.уатДанныеПечатиИтоговНДС(СуммаНДС, СтавкиНДС, Шапка.СуммаВключаетНДС, ":"); 
				ОбластьМакета.Параметры.НДС      = ДанныеПечатиНДС.НДС;
				ОбластьМакета.Параметры.ВсегоНДС = ДанныеПечатиНДС.ВсегоНДС;
			Иначе
				ДанныеПечатиНДС = уатОбщегоНазначенияТиповые.уатДанныеПечатиИтоговНДС(0, СтавкиНДС, Шапка.СуммаВключаетНДС, ":"); 
				ОбластьМакета.Параметры.НДС      = ДанныеПечатиНДС.НДС;
				ОбластьМакета.Параметры.ВсегоНДС = ДанныеПечатиНДС.ВсегоНДС;
			КонецЕсли;
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		СуммаКПрописи = Сумма + ?(НЕ Шапка.УчитыватьНДС ИЛИ Шапка.СуммаВключаетНДС, 0, СуммаНДС);
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего оказано услуг " + НомерСтроки
			+ ", на сумму " + уатОбщегоНазначенияТиповые.уатФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
		ОбластьМакета.Параметры.СуммаПрописью  = уатОбщегоНазначенияТиповые.уатСформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ТекущийДокумент);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатнаяФорма()

#КонецОбласти

#КонецЕсли
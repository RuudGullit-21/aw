#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	Настройки.ПриПолученииСлужебныхРеквизитов = Ложь;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатРемонтныйЛист";
	КомандаПечати.Идентификатор = "Акт";
	КомандаПечати.Представление = НСтр("en='Act of repair';ru='Акт ремонта'");
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатРемонтныйЛист";
	КомандаПечати.Идентификатор = "ОС3";
	КомандаПечати.Представление = НСтр("en='OS-3';ru='ОС-3'");
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатРемонтныйЛист";
	КомандаПечати.Идентификатор = "РемонтныйЛист";
	КомандаПечати.Представление = НСтр("en='Repair list';ru='Ремонтный лист'");
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатРемонтныйЛист";
	КомандаПечати.Идентификатор = "уатМ8";
	КомандаПечати.Представление = НСтр("en='Resource limit card';ru='Лимитно-заборная карта'");
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатРемонтныйЛист";
	КомандаПечати.Идентификатор = "М11";
	КомандаПечати.Представление = НСтр("en='Requisition slip (M-11)';ru='Требование-накладная (М-11)'");

	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатРемонтныйЛист";
	КомандаПечати.Идентификатор = "ДефектнаяВедомость";
	КомандаПечати.Представление = НСтр("en='List of deficiencies';ru='Дефектная ведомость'");

	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор  = "Реестр";
	КомандаПечати.Представление  = НСтр("en='Document register';ru='Реестр документов'");
	КомандаПечати.ЗаголовокФормы = НСтр("en='Document registry ""Repair sheet""';ru='Реестр документов ""Ремонтный лист""'");
	КомандаПечати.Обработчик     = "уатОбщегоНазначенияТиповыеКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм     = "ФормаСписка";
	КомандаПечати.Порядок        = 100;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр).
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной
//                                                            параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной
//                                            параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если НЕ уатОбщегоНазначенияСервер.РазрешениеПечатиНепроведенногоДокумента(МассивОбъектов) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Акт") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Акт",
			"Акт ремонта", ПечатьАкт(МассивОбъектов, ОбъектыПечати));
			
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ОС3") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ОС3",
			"ОС-3", ПечатьОС3(МассивОбъектов, ОбъектыПечати));
			
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "РемонтныйЛист") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "РемонтныйЛист",
			"Ремонтный лист", ПечатьРемонтныйЛист(МассивОбъектов, ОбъектыПечати));
			
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "уатМ8") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "уатМ8",
			"Лимитно-заборная карта", ПечатьМ8(МассивОбъектов, ОбъектыПечати));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "М11") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "М11",
		"Требование-накладная (М-11)", ПечатьМ11(МассивОбъектов, ОбъектыПечати));  
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ДефектнаяВедомость") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ДефектнаяВедомость",
		"Дефектная ведомость", ПечатьДефектнаяВедомость(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
	уатОбщегоНазначенияСервер.УстановитьРедактированиеПечатныхФормДокумента(КоллекцияПечатныхФорм);
	уатУправлениеПечатью.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов, КоллекцияПечатныхФорм);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.УправлениеДоступом

// Позволяет переопределить ограничение, указанное в модуле менеджера объекта метаданных.
//
// Параметры:
//  Ограничение - Структура:
//    * Текст                             - Строка - ограничение доступа для пользователей.
//                                          Если пустая строка, значит, доступ разрешен.
//    * ТекстДляВнешнихПользователей      - Строка - ограничение доступа для внешних пользователей.
//                                          Если пустая строка, значит, доступ запрещен.
//    * ПоВладельцуБезЗаписиКлючейДоступа - Неопределено - определить автоматически.
//                                        - Булево - если Ложь, то всегда записывать ключи доступа,
//                                          если Истина, тогда не записывать ключи доступа,
//                                          а использовать ключи доступа владельца (требуется,
//                                          чтобы ограничение было строго по объекту-владельцу).
//   * ПоВладельцуБезЗаписиКлючейДоступаДляВнешнихПользователей - Неопределено, Булево - также
//                                          как у параметра ПоВладельцуБезЗаписиКлючейДоступа.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Подразделение)";
	
	Ограничение.ТекстДляВнешнихПользователей = Ограничение.Текст;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// СтандартныеПодсистемы.ВариантыОтчетов

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВариантыОтчетов

#КонецОбласти

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	
	флРемонтВАвтосервисе = ДокументСсылка.СпособРемонта = Перечисления.уатСпособыРемонта.Автосервис;
	флЯчеистыйСклад = ПолучитьФункциональнуюОпцию("уатАдресноеХранение") = ИСТИНА
		И (флРемонтВАвтосервисе И ДокументСсылка.СкладСобственныхМатериалов.АдресноеХранение
		ИЛИ НЕ флРемонтВАвтосервисе И ДокументСсылка.Контрагент.АдресноеХранение);
		
	// управляемая блокировка
	ЗапросБлокировка = Новый Запрос;
	ЗапросБлокировка.Текст = 
	"ВЫБРАТЬ
	|	уатРемонтныйЛистШины.СерияНоменклатуры КАК СерияНоменклатуры
	|ИЗ
	|	Документ.уатРемонтныйЛист.Шины КАК уатРемонтныйЛистШины
	|ГДЕ
	|	уатРемонтныйЛистШины.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	уатРемонтныйЛистАккумуляторы.СерияНоменклатуры
	|ИЗ
	|	Документ.уатРемонтныйЛист.Аккумуляторы КАК уатРемонтныйЛистАккумуляторы
	|ГДЕ
	|	уатРемонтныйЛистАккумуляторы.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	уатРемонтныйЛистПрочиеАгрегаты.СерияНоменклатуры
	|ИЗ
	|	Документ.уатРемонтныйЛист.ПрочиеАгрегаты КАК уатРемонтныйЛистПрочиеАгрегаты
	|ГДЕ
	|	уатРемонтныйЛистПрочиеАгрегаты.Ссылка = &Ссылка";
	ЗапросБлокировка.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.уатОстаткиАгрегатов");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = ЗапросБлокировка.Выполнить();
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("СерияНоменклатуры", "СерияНоменклатуры");
	Если ЗначениеЗаполнено(ДокументСсылка.ЗаявкаНаРемонт) Тогда 
		ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.уатЗаявкиНаРемонт");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.УстановитьЗначение("ЗаявкаНаРемонт", ДокументСсылка.ЗаявкаНаРемонт);
	КонецЕсли;
	Блокировка.Заблокировать();
	
	мЗапросВремТаб = Новый Запрос;
	Если флРемонтВАвтосервисе тогда
		мЗапросВремТаб.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаДокумента.Ссылка КАК Регистратор,
		|	ТаблицаДокумента.Ссылка.ДатаОкончания КАК Период,
		|	ТаблицаДокумента.Ссылка.Контрагент КАК Склад,
		|	ТаблицаДокумента.Ссылка.ТС КАК ТС,
		|	ТаблицаДокумента.Номенклатура,
		|	ТаблицаДокумента.Количество * ЕСТЬNULL(ТаблицаДокумента.ЕдиницаИзмерения.Коэффициент, 1) / ТаблицаДокумента.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Количество,
		|	ВЫБОР
		|		КОГДА (ТаблицаДокумента.Ссылка.УчитыватьНДС И ТаблицаДокумента.Ссылка.СуммаВключаетНДС)
		|			ТОГДА (ТаблицаДокумента.Сумма - ТаблицаДокумента.СуммаНДС)
		|		ИНАЧЕ ТаблицаДокумента.Сумма
		|	КОНЕЦ КАК Сумма,
		|	ТаблицаДокумента.СуммаНДС,
		|	ТаблицаДокумента.СтавкаНДС
		|ПОМЕСТИТЬ ТаблицаДокументаМатериалы
		|ИЗ
		|	Документ.уатРемонтныйЛист.Материалы КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";
		
	Иначе
		мЗапросВремТаб.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаДокумента.Ссылка КАК Регистратор,
		|	ТаблицаДокумента.Ссылка.ДатаОкончания КАК Период,
		|	ТаблицаДокумента.Ссылка.Контрагент КАК Склад,
		|	ТаблицаДокумента.Ссылка.ТС КАК ТС,
		|	ТаблицаДокумента.Номенклатура,
		|	СУММА(ТаблицаДокумента.Количество * ЕСТЬNULL(ТаблицаДокумента.ЕдиницаИзмерения.Коэффициент, 1) / ТаблицаДокумента.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент) КАК Количество,
		|	СУММА(ВЫБОР
		|			КОГДА (ТаблицаДокумента.Ссылка.УчитыватьНДС И ТаблицаДокумента.Ссылка.СуммаВключаетНДС)
		|			ТОГДА (ТаблицаДокумента.Сумма - ТаблицаДокумента.СуммаНДС)
		|			ИНАЧЕ ТаблицаДокумента.Сумма
		|		КОНЕЦ) КАК Сумма,
		|	СУММА(ТаблицаДокумента.СуммаНДС) КАК СуммаНДС
		|ПОМЕСТИТЬ ТаблицаДокументаМатериалы
		|ИЗ
		|	Документ.уатРемонтныйЛист.Материалы КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	ТаблицаДокумента.Ссылка,
		|	ТаблицаДокумента.Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|";
		
	КонецЕсли;
	
	мЗапросВремТаб.Текст = мЗапросВремТаб.Текст +
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаДокумента.Ссылка КАК Регистратор,
	|	ТаблицаДокумента.Ссылка.ДатаОкончания КАК Период,
	|	ТаблицаДокумента.Ссылка.Контрагент КАК Склад,
	|	ТаблицаДокумента.Ссылка.ТС КАК ТС,
	|	ТаблицаДокумента.Работа КАК Работа,
	|	ТаблицаДокумента.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА ТаблицаДокумента.Ссылка.УчитыватьНДС
	|				И ТаблицаДокумента.Ссылка.СуммаВключаетНДС
	|			ТОГДА ТаблицаДокумента.Сумма - ТаблицаДокумента.СуммаНДС
	|		ИНАЧЕ ТаблицаДокумента.Сумма
	|	КОНЕЦ КАК Сумма,
	|	ТаблицаДокумента.СуммаНДС КАК СуммаНДС,
	|	ТаблицаДокумента.СтавкаНДС КАК СтавкаНДС
	|ПОМЕСТИТЬ ТаблицаДокументаРаботы
	|ИЗ
	|	Документ.уатРемонтныйЛист.Работы КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаДокумента.Ссылка КАК Регистратор,
	|	ТаблицаДокумента.Ссылка.ДатаОкончания КАК Период,
	|	ТаблицаДокумента.Ссылка.ТС КАК ТС,
	|	ТаблицаДокумента.Ссылка.СкладОтправитель КАК СкладОтправитель,
	|	ТаблицаДокумента.Ссылка.СкладПолучатель КАК СкладПолучатель,
	|	ТаблицаДокумента.СерияНоменклатуры КАК СерияНоменклатуры,
	|	КОЛИЧЕСТВО(ТаблицаДокумента.Состояние) КАК Состояние,
	|	ТаблицаДокумента.Ссылка.МОЛ КАК МОЛ
	|ПОМЕСТИТЬ ТаблицаДокументаШиныГруппы
	|ИЗ
	|	Документ.уатРемонтныйЛист.Шины КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.Ссылка,
	|	ТаблицаДокумента.Ссылка.ДатаОкончания,
	|	ТаблицаДокумента.Ссылка.ТС,
	|	ТаблицаДокумента.Ссылка.СкладОтправитель,
	|	ТаблицаДокумента.Ссылка.СкладПолучатель,
	|	ТаблицаДокумента.СерияНоменклатуры,
	|	ТаблицаДокумента.Ссылка.МОЛ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаДокументаШиныГруппы.Регистратор КАК Регистратор,
	|	ТаблицаДокументаШиныГруппы.Период КАК Период,
	|	ТаблицаДокументаШиныГруппы.ТС КАК ТС,
	|	ТаблицаДокументаШиныГруппы.СкладОтправитель КАК СкладОтправитель,
	|	ТаблицаДокументаШиныГруппы.СкладПолучатель КАК СкладПолучатель,
	|	ТаблицаДокументаШиныГруппы.СерияНоменклатуры КАК СерияНоменклатуры,
	|	уатРемонтныйЛистШины.Состояние КАК Состояние,
	|	уатРемонтныйЛистШины.МестоУстановки КАК МестоУстановки,
	|	уатРемонтныйЛистШины.НомерСтроки КАК НомерСтроки,
	|	ТаблицаДокументаШиныГруппы.МОЛ КАК МОЛ
	|ПОМЕСТИТЬ ТаблицаДокументаШины
	|ИЗ
	|	ТаблицаДокументаШиныГруппы КАК ТаблицаДокументаШиныГруппы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатРемонтныйЛист.Шины КАК уатРемонтныйЛистШины
	|		ПО ТаблицаДокументаШиныГруппы.Регистратор = уатРемонтныйЛистШины.Ссылка
	|			И ТаблицаДокументаШиныГруппы.СерияНоменклатуры = уатРемонтныйЛистШины.СерияНоменклатуры
	|ГДЕ
	|	ТаблицаДокументаШиныГруппы.Состояние = 1
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ТаблицаДокументаШиныГруппы.Регистратор,
	|	ТаблицаДокументаШиныГруппы.Период,
	|	ТаблицаДокументаШиныГруппы.ТС,
	|	ТаблицаДокументаШиныГруппы.СкладОтправитель,
	|	ТаблицаДокументаШиныГруппы.СкладПолучатель,
	|	ТаблицаДокументаШиныГруппы.СерияНоменклатуры,
	|	уатРемонтныйЛистШины.Состояние,
	|	уатРемонтныйЛистШины.МестоУстановки,
	|	уатРемонтныйЛистШины.НомерСтроки,
	|	ТаблицаДокументаШиныГруппы.МОЛ
	|ИЗ
	|	ТаблицаДокументаШиныГруппы КАК ТаблицаДокументаШиныГруппы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатРемонтныйЛист.Шины КАК уатРемонтныйЛистШины
	|		ПО ТаблицаДокументаШиныГруппы.Регистратор = уатРемонтныйЛистШины.Ссылка
	|			И ТаблицаДокументаШиныГруппы.СерияНоменклатуры = уатРемонтныйЛистШины.СерияНоменклатуры
	|			И (уатРемонтныйЛистШины.Состояние = ЗНАЧЕНИЕ(Перечисление.уатСостоянияАгрегатов.УстановленоВЗапас)
	|				ИЛИ уатРемонтныйЛистШины.Состояние = ЗНАЧЕНИЕ(Перечисление.уатСостоянияАгрегатов.УстановленоВРаботе))
	|ГДЕ
	|	ТаблицаДокументаШиныГруппы.Состояние = 2
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаДокумента.Ссылка КАК Регистратор,
	|	ТаблицаДокумента.Ссылка.ДатаОкончания КАК Период,
	|	ТаблицаДокумента.Ссылка.ТС КАК ТС,
	|	ТаблицаДокумента.Ссылка.СкладОтправитель КАК СкладОтправитель,
	|	ТаблицаДокумента.Ссылка.СкладПолучатель КАК СкладПолучатель,
	|	ТаблицаДокумента.СерияНоменклатуры КАК СерияНоменклатуры,
	|	ТаблицаДокумента.Состояние КАК Состояние,
	|	ТаблицаДокумента.Ссылка.МОЛ КАК МОЛ
	|ПОМЕСТИТЬ ТаблицаДокументаАккумуляторы
	|ИЗ
	|	Документ.уатРемонтныйЛист.Аккумуляторы КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаДокумента.Ссылка КАК Регистратор,
	|	ТаблицаДокумента.Ссылка.ДатаОкончания КАК Период,
	|	ТаблицаДокумента.Ссылка.ТС КАК ТС,
	|	ТаблицаДокумента.Ссылка.СкладОтправитель КАК СкладОтправитель,
	|	ТаблицаДокумента.Ссылка.СкладПолучатель КАК СкладПолучатель,
	|	ТаблицаДокумента.СерияНоменклатуры КАК СерияНоменклатуры,
	|	ТаблицаДокумента.Состояние КАК Состояние,
	|	ТаблицаДокумента.Ссылка.МОЛ КАК МОЛ
	|ПОМЕСТИТЬ ТаблицаДокументаПрочиеАгрегаты
	|ИЗ
	|	Документ.уатРемонтныйЛист.ПрочиеАгрегаты КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.СерияНоменклатуры КАК СерияНоменклатуры,
	|	уатАгрегатыТССрезПоследних.ТС КАК ТС,
	|	уатАгрегатыТССрезПоследних.СостояниеАгрегата КАК СостояниеАгрегата,
	|	уатАгрегатыТССрезПоследних.МестоУстановки КАК МестоУстановки
	|ПОМЕСТИТЬ АгрегатыНаТС
	|ИЗ
	|	(ВЫБРАТЬ
	|		уатАгрегатыТССрезПоследних.СерияНоменклатуры КАК СерияНоменклатуры,
	|		максПериод.Период КАК Период,
	|		МАКСИМУМ(уатАгрегатыТССрезПоследних.НомерСтроки) КАК НомерСтроки
	|	ИЗ
	|		(ВЫБРАТЬ
	|			уатАгрегатыТССрезПоследних.СерияНоменклатуры КАК СерияНоменклатуры,
	|			МАКСИМУМ(уатАгрегатыТССрезПоследних.Период) КАК Период
	|		ИЗ
	|			РегистрСведений.уатАгрегатыТС.СрезПоследних(&МоментВремени, ТС = &ТС) КАК уатАгрегатыТССрезПоследних
	|		
	|		СГРУППИРОВАТЬ ПО
	|			уатАгрегатыТССрезПоследних.СерияНоменклатуры) КАК максПериод
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатАгрегатыТС.СрезПоследних(&МоментВремени, ТС = &ТС) КАК уатАгрегатыТССрезПоследних
	|			ПО максПериод.СерияНоменклатуры = уатАгрегатыТССрезПоследних.СерияНоменклатуры
	|				И максПериод.Период = уатАгрегатыТССрезПоследних.Период
	|	
	|	СГРУППИРОВАТЬ ПО
	|		уатАгрегатыТССрезПоследних.СерияНоменклатуры,
	|		максПериод.Период) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатАгрегатыТС.СрезПоследних(&МоментВремени, ТС = &ТС) КАК уатАгрегатыТССрезПоследних
	|		ПО ВложенныйЗапрос.СерияНоменклатуры = уатАгрегатыТССрезПоследних.СерияНоменклатуры
	|			И ВложенныйЗапрос.Период = уатАгрегатыТССрезПоследних.Период
	|			И ВложенныйЗапрос.НомерСтроки = уатАгрегатыТССрезПоследних.НомерСтроки";
	
	мЗапросВремТаб.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	мЗапросВремТаб.УстановитьПараметр("Ссылка"       , ДокументСсылка);
	мЗапросВремТаб.УстановитьПараметр("МоментВремени", СтруктураДополнительныеСвойства.ДляПроведения.МоментКонтроля);
	мЗапросВремТаб.УстановитьПараметр("ТС"           , ДокументСсылка.ТС);
	мЗапросВремТаб.ВыполнитьПакет();
	
	
	мЗапрос = Новый Запрос;
	мЗапрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	мзапрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	""0 - ТаблицаАгрегатовТС"" КАК СлужебноеПолеИмяТаблицы,
	|	ТаблицаДокументаШины.Регистратор КАК Регистратор,
	|	ТаблицаДокументаШины.Период КАК Период,
	|	ТаблицаДокументаШины.СерияНоменклатуры КАК СерияНоменклатуры,
	|	ТаблицаДокументаШины.ТС КАК ТС,
	|	ТаблицаДокументаШины.Состояние КАК СостояниеАгрегата,
	|	ТаблицаДокументаШины.МОЛ КАК МОЛ,
	|	ТаблицаДокументаШины.МестоУстановки КАК МестоУстановки
	|ИЗ
	|	ТаблицаДокументаШины КАК ТаблицаДокументаШины
	|ГДЕ
	|	(ТаблицаДокументаШины.Состояние = ЗНАЧЕНИЕ(Перечисление.уатСостоянияАгрегатов.УстановленоВЗапас)
	|			ИЛИ ТаблицаДокументаШины.Состояние = ЗНАЧЕНИЕ(Перечисление.уатСостоянияАгрегатов.УстановленоВРаботе))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""0 - ТаблицаАгрегатовТС"",
	|	ТаблицаДокументаАккумуляторы.Регистратор,
	|	ТаблицаДокументаАккумуляторы.Период,
	|	ТаблицаДокументаАккумуляторы.СерияНоменклатуры,
	|	ТаблицаДокументаАккумуляторы.ТС,
	|	ТаблицаДокументаАккумуляторы.Состояние,
	|	ТаблицаДокументаАккумуляторы.МОЛ,
	|	ЗНАЧЕНИЕ(Справочник.уатМестаУстановкиШин.ПустаяСсылка)
	|ИЗ
	|	ТаблицаДокументаАккумуляторы КАК ТаблицаДокументаАккумуляторы
	|ГДЕ
	|	ТаблицаДокументаАккумуляторы.Состояние = ЗНАЧЕНИЕ(Перечисление.уатСостоянияАгрегатов.УстановленоВРаботе)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""0 - ТаблицаАгрегатовТС"",
	|	ТаблицаДокументаПрочиеАгрегаты.Регистратор,
	|	ТаблицаДокументаПрочиеАгрегаты.Период,
	|	ТаблицаДокументаПрочиеАгрегаты.СерияНоменклатуры,
	|	ТаблицаДокументаПрочиеАгрегаты.ТС,
	|	ТаблицаДокументаПрочиеАгрегаты.Состояние,
	|	ТаблицаДокументаПрочиеАгрегаты.МОЛ,
	|	ЗНАЧЕНИЕ(Справочник.уатМестаУстановкиШин.ПустаяСсылка)
	|ИЗ
	|	ТаблицаДокументаПрочиеАгрегаты КАК ТаблицаДокументаПрочиеАгрегаты
	|ГДЕ
	|	ТаблицаДокументаПрочиеАгрегаты.Состояние = ЗНАЧЕНИЕ(Перечисление.уатСостоянияАгрегатов.УстановленоВРаботе)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""0 - ТаблицаАгрегатовТС"",
	|	ВложенныйЗапрос.Регистратор,
	|	ВложенныйЗапрос.Дата,
	|	ВложенныйЗапрос.СерияНоменклатуры,
	|	ВложенныйЗапрос.ТС,
	|	ВложенныйЗапрос.Состояние,
	|	ЕСТЬNULL(уатАгрегатыТССрезПоследних.МОЛ, ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)),
	|	ЕСТЬNULL(уатАгрегатыТССрезПоследних.МестоУстановки, ЗНАЧЕНИЕ(Справочник.уатМестаУстановкиШин.ПустаяСсылка))
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаДокументаШины.Состояние КАК Состояние,
	|		ТаблицаДокументаШины.СерияНоменклатуры КАК СерияНоменклатуры,
	|		ТаблицаДокументаШины.Регистратор КАК Регистратор,
	|		ТаблицаДокументаШины.Период КАК Дата,
	|		ТаблицаДокументаШины.ТС КАК ТС,
	|		ТаблицаДокументаШины.МестоУстановки КАК МестоУстановки,
	|		ВложенныйЗапрос.Период КАК Период,
	|		ВложенныйЗапрос.НомерСтроки КАК НомерСтроки
	|	ИЗ
	|		ТаблицаДокументаШины КАК ТаблицаДокументаШины
	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				уатАгрегатыТССрезПоследних.СерияНоменклатуры КАК СерияНоменклатуры,
	|				максПериод.Период КАК Период,
	|				МАКСИМУМ(уатАгрегатыТССрезПоследних.НомерСтроки) КАК НомерСтроки
	|			ИЗ
	|				(ВЫБРАТЬ
	|					уатАгрегатыТССрезПоследних.СерияНоменклатуры КАК СерияНоменклатуры,
	|					МАКСИМУМ(уатАгрегатыТССрезПоследних.Период) КАК Период
	|				ИЗ
	|					РегистрСведений.уатАгрегатыТС.СрезПоследних(
	|							&Дата,
	|							СерияНоменклатуры В
	|								(ВЫБРАТЬ
	|									ТаблицаДокументаШины.СерияНоменклатуры
	|								ИЗ
	|									ТаблицаДокументаШины)) КАК уатАгрегатыТССрезПоследних
	|				
	|				СГРУППИРОВАТЬ ПО
	|					уатАгрегатыТССрезПоследних.СерияНоменклатуры) КАК максПериод
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатАгрегатыТС.СрезПоследних(
	|							&Дата,
	|							СерияНоменклатуры В
	|								(ВЫБРАТЬ
	|									ТаблицаДокументаШины.СерияНоменклатуры
	|								ИЗ
	|									ТаблицаДокументаШины)) КАК уатАгрегатыТССрезПоследних
	|					ПО максПериод.СерияНоменклатуры = уатАгрегатыТССрезПоследних.СерияНоменклатуры
	|						И максПериод.Период = уатАгрегатыТССрезПоследних.Период
	|			
	|			СГРУППИРОВАТЬ ПО
	|				уатАгрегатыТССрезПоследних.СерияНоменклатуры,
	|				максПериод.Период) КАК ВложенныйЗапрос
	|			ПО (ВложенныйЗапрос.СерияНоменклатуры = ТаблицаДокументаШины.СерияНоменклатуры)
	|	ГДЕ
	|		ТаблицаДокументаШины.Состояние = ЗНАЧЕНИЕ(Перечисление.уатСостоянияАгрегатов.Снято)) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатАгрегатыТС.СрезПоследних(
	|				&Дата,
	|				СерияНоменклатуры В
	|					(ВЫБРАТЬ
	|						ТаблицаДокументаШины.СерияНоменклатуры
	|					ИЗ
	|						ТаблицаДокументаШины)) КАК уатАгрегатыТССрезПоследних
	|		ПО ВложенныйЗапрос.СерияНоменклатуры = уатАгрегатыТССрезПоследних.СерияНоменклатуры
	|			И ВложенныйЗапрос.Период = уатАгрегатыТССрезПоследних.Период
	|			И ВложенныйЗапрос.НомерСтроки = уатАгрегатыТССрезПоследних.НомерСтроки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""0 - ТаблицаАгрегатовТС"",
	|	ВложенныйЗапрос.Регистратор,
	|	ВложенныйЗапрос.Дата,
	|	ВложенныйЗапрос.СерияНоменклатуры,
	|	ВложенныйЗапрос.ТС,
	|	ВложенныйЗапрос.Состояние,
	|	ЕСТЬNULL(уатАгрегатыТССрезПоследних.МОЛ, ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)),
	|	ЗНАЧЕНИЕ(Справочник.уатМестаУстановкиШин.ПустаяСсылка)
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаДокументаАккумуляторы.Состояние КАК Состояние,
	|		ТаблицаДокументаАккумуляторы.СерияНоменклатуры КАК СерияНоменклатуры,
	|		ТаблицаДокументаАккумуляторы.Регистратор КАК Регистратор,
	|		ТаблицаДокументаАккумуляторы.Период КАК Дата,
	|		ТаблицаДокументаАккумуляторы.ТС КАК ТС,
	|		ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
	|		ВложенныйЗапрос.Период КАК Период
	|	ИЗ
	|		ТаблицаДокументаАккумуляторы КАК ТаблицаДокументаАккумуляторы
	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				уатАгрегатыТССрезПоследних.СерияНоменклатуры КАК СерияНоменклатуры,
	|				МАКСИМУМ(уатАгрегатыТССрезПоследних.НомерСтроки) КАК НомерСтроки,
	|				ВложенныйЗапрос.Период КАК Период
	|			ИЗ
	|				(ВЫБРАТЬ
	|					уатАгрегатыТССрезПоследних.СерияНоменклатуры КАК СерияНоменклатуры,
	|					МАКСИМУМ(уатАгрегатыТССрезПоследних.Период) КАК Период
	|				ИЗ
	|					РегистрСведений.уатАгрегатыТС.СрезПоследних(
	|							&Дата,
	|							СерияНоменклатуры В
	|								(ВЫБРАТЬ
	|									ТаблицаДокументаАккумуляторы.СерияНоменклатуры
	|								ИЗ
	|									ТаблицаДокументаАккумуляторы)) КАК уатАгрегатыТССрезПоследних
	|				
	|				СГРУППИРОВАТЬ ПО
	|					уатАгрегатыТССрезПоследних.СерияНоменклатуры) КАК ВложенныйЗапрос
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатАгрегатыТС.СрезПоследних(
	|							&Дата,
	|							СерияНоменклатуры В
	|								(ВЫБРАТЬ
	|									ТаблицаДокументаАккумуляторы.СерияНоменклатуры
	|								ИЗ
	|									ТаблицаДокументаАккумуляторы)) КАК уатАгрегатыТССрезПоследних
	|					ПО ВложенныйЗапрос.СерияНоменклатуры = уатАгрегатыТССрезПоследних.СерияНоменклатуры
	|						И ВложенныйЗапрос.Период = уатАгрегатыТССрезПоследних.Период
	|			
	|			СГРУППИРОВАТЬ ПО
	|				уатАгрегатыТССрезПоследних.СерияНоменклатуры,
	|				ВложенныйЗапрос.Период) КАК ВложенныйЗапрос
	|			ПО (ВложенныйЗапрос.СерияНоменклатуры = ТаблицаДокументаАккумуляторы.СерияНоменклатуры)
	|	ГДЕ
	|		ТаблицаДокументаАккумуляторы.Состояние = ЗНАЧЕНИЕ(Перечисление.уатСостоянияАгрегатов.Снято)) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатАгрегатыТС.СрезПоследних(
	|				&Дата,
	|				СерияНоменклатуры В
	|					(ВЫБРАТЬ
	|						ТаблицаДокументаАккумуляторы.СерияНоменклатуры
	|					ИЗ
	|						ТаблицаДокументаАккумуляторы)) КАК уатАгрегатыТССрезПоследних
	|		ПО ВложенныйЗапрос.СерияНоменклатуры = уатАгрегатыТССрезПоследних.СерияНоменклатуры
	|			И ВложенныйЗапрос.НомерСтроки = уатАгрегатыТССрезПоследних.НомерСтроки
	|			И ВложенныйЗапрос.Период = уатАгрегатыТССрезПоследних.Период
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""0 - ТаблицаАгрегатовТС"",
	|	ВложенныйЗапрос.Регистратор,
	|	ВложенныйЗапрос.Дата,
	|	ВложенныйЗапрос.СерияНоменклатуры,
	|	ВложенныйЗапрос.ТС,
	|	ВложенныйЗапрос.Состояние,
	|	ЕСТЬNULL(уатАгрегатыТССрезПоследних.МОЛ, ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)),
	|	ЗНАЧЕНИЕ(Справочник.уатМестаУстановкиШин.ПустаяСсылка)
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаДокументаПрочиеАгрегаты.Состояние КАК Состояние,
	|		ТаблицаДокументаПрочиеАгрегаты.СерияНоменклатуры КАК СерияНоменклатуры,
	|		ТаблицаДокументаПрочиеАгрегаты.Регистратор КАК Регистратор,
	|		ТаблицаДокументаПрочиеАгрегаты.Период КАК Дата,
	|		ТаблицаДокументаПрочиеАгрегаты.ТС КАК ТС,
	|		ВложенныйЗапрос.Период КАК Период,
	|		ВложенныйЗапрос.НомерСтроки КАК НомерСтроки
	|	ИЗ
	|		ТаблицаДокументаПрочиеАгрегаты КАК ТаблицаДокументаПрочиеАгрегаты
	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				уатАгрегатыТССрезПоследних.СерияНоменклатуры КАК СерияНоменклатуры,
	|				максПериод.Период КАК Период,
	|				МАКСИМУМ(уатАгрегатыТССрезПоследних.НомерСтроки) КАК НомерСтроки
	|			ИЗ
	|				(ВЫБРАТЬ
	|					уатАгрегатыТССрезПоследних.СерияНоменклатуры КАК СерияНоменклатуры,
	|					МАКСИМУМ(уатАгрегатыТССрезПоследних.Период) КАК Период
	|				ИЗ
	|					РегистрСведений.уатАгрегатыТС.СрезПоследних(
	|							&Дата,
	|							СерияНоменклатуры В
	|								(ВЫБРАТЬ
	|									ТаблицаДокументаПрочиеАгрегаты.СерияНоменклатуры
	|								ИЗ
	|									ТаблицаДокументаПрочиеАгрегаты)) КАК уатАгрегатыТССрезПоследних
	|				
	|				СГРУППИРОВАТЬ ПО
	|					уатАгрегатыТССрезПоследних.СерияНоменклатуры) КАК максПериод
	|					ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатАгрегатыТС.СрезПоследних(
	|							&Дата,
	|							СерияНоменклатуры В
	|								(ВЫБРАТЬ
	|									ТаблицаДокументаПрочиеАгрегаты.СерияНоменклатуры
	|								ИЗ
	|									ТаблицаДокументаПрочиеАгрегаты)) КАК уатАгрегатыТССрезПоследних
	|					ПО максПериод.СерияНоменклатуры = уатАгрегатыТССрезПоследних.СерияНоменклатуры
	|						И максПериод.Период = уатАгрегатыТССрезПоследних.Период
	|			
	|			СГРУППИРОВАТЬ ПО
	|				уатАгрегатыТССрезПоследних.СерияНоменклатуры,
	|				максПериод.Период) КАК ВложенныйЗапрос
	|			ПО (ВложенныйЗапрос.СерияНоменклатуры = ТаблицаДокументаПрочиеАгрегаты.СерияНоменклатуры)
	|	ГДЕ
	|		ТаблицаДокументаПрочиеАгрегаты.Состояние = ЗНАЧЕНИЕ(Перечисление.уатСостоянияАгрегатов.Снято)) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатАгрегатыТС.СрезПоследних(
	|				&Дата,
	|				СерияНоменклатуры В
	|					(ВЫБРАТЬ
	|						ТаблицаДокументаПрочиеАгрегаты.СерияНоменклатуры
	|					ИЗ
	|						ТаблицаДокументаПрочиеАгрегаты)) КАК уатАгрегатыТССрезПоследних
	|		ПО ВложенныйЗапрос.СерияНоменклатуры = уатАгрегатыТССрезПоследних.СерияНоменклатуры
	|			И ВложенныйЗапрос.Период = уатАгрегатыТССрезПоследних.Период
	|			И ВложенныйЗапрос.НомерСтроки = уатАгрегатыТССрезПоследних.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	""1 - ТаблицаОстатковАгрегатов"" КАК СлужебноеПолеИмяТаблицы,
	|	ТаблицаДокументаШины.Регистратор КАК Регистратор,
	|	ТаблицаДокументаШины.Период КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТаблицаДокументаШины.СерияНоменклатуры КАК СерияНоменклатуры,
	|	ТаблицаДокументаШины.СкладПолучатель КАК Склад,
	|	1 КАК Количество,
	|	ТаблицаДокументаШины.Состояние КАК Состояние,
	|	ТаблицаДокументаШины.МОЛ КАК МОЛ
	|ИЗ
	|	ТаблицаДокументаШины КАК ТаблицаДокументаШины
	|ГДЕ
	|	ТаблицаДокументаШины.Состояние = ЗНАЧЕНИЕ(Перечисление.уатСостоянияАгрегатов.Снято)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""1 - ТаблицаОстатковАгрегатов"",
	|	ТаблицаДокументаАккумуляторы.Регистратор,
	|	ТаблицаДокументаАккумуляторы.Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	ТаблицаДокументаАккумуляторы.СерияНоменклатуры,
	|	ТаблицаДокументаАккумуляторы.СкладПолучатель,
	|	1,
	|	ТаблицаДокументаАккумуляторы.Состояние,
	|	ТаблицаДокументаАккумуляторы.МОЛ
	|ИЗ
	|	ТаблицаДокументаАккумуляторы КАК ТаблицаДокументаАккумуляторы
	|ГДЕ
	|	ТаблицаДокументаАккумуляторы.Состояние = ЗНАЧЕНИЕ(Перечисление.уатСостоянияАгрегатов.Снято)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""1 - ТаблицаОстатковАгрегатов"",
	|	ТаблицаДокументаПрочиеАгрегаты.Регистратор,
	|	ТаблицаДокументаПрочиеАгрегаты.Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход),
	|	ТаблицаДокументаПрочиеАгрегаты.СерияНоменклатуры,
	|	ТаблицаДокументаПрочиеАгрегаты.СкладПолучатель,
	|	1,
	|	ТаблицаДокументаПрочиеАгрегаты.Состояние,
	|	ТаблицаДокументаПрочиеАгрегаты.МОЛ
	|ИЗ
	|	ТаблицаДокументаПрочиеАгрегаты КАК ТаблицаДокументаПрочиеАгрегаты
	|ГДЕ
	|	ТаблицаДокументаПрочиеАгрегаты.Состояние = ЗНАЧЕНИЕ(Перечисление.уатСостоянияАгрегатов.Снято)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""1 - ТаблицаОстатковАгрегатов"",
	|	ТаблицаДокументаШины.Регистратор,
	|	ТаблицаДокументаШины.Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	ТаблицаДокументаШины.СерияНоменклатуры,
	|	ТаблицаДокументаШины.СкладОтправитель,
	|	1,
	|	ТаблицаДокументаШины.Состояние,
	|	ЕСТЬNULL(уатОстаткиАгрегатовОстатки.МОЛ, ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка))
	|ИЗ
	|	ТаблицаДокументаШины КАК ТаблицаДокументаШины
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.уатОстаткиАгрегатов.Остатки(
	|				&Дата,
	|				СерияНоменклатуры В
	|					(ВЫБРАТЬ
	|						ТаблицаДокументаШины.СерияНоменклатуры
	|					ИЗ
	|						ТаблицаДокументаШины)) КАК уатОстаткиАгрегатовОстатки
	|		ПО ТаблицаДокументаШины.СерияНоменклатуры = уатОстаткиАгрегатовОстатки.СерияНоменклатуры
	|ГДЕ
	|	(ТаблицаДокументаШины.Состояние = ЗНАЧЕНИЕ(Перечисление.уатСостоянияАгрегатов.УстановленоВЗапас)
	|			ИЛИ ТаблицаДокументаШины.Состояние = ЗНАЧЕНИЕ(Перечисление.уатСостоянияАгрегатов.УстановленоВРаботе))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""1 - ТаблицаОстатковАгрегатов"",
	|	ТаблицаДокументаАккумуляторы.Регистратор,
	|	ТаблицаДокументаАккумуляторы.Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	ТаблицаДокументаАккумуляторы.СерияНоменклатуры,
	|	ТаблицаДокументаАккумуляторы.СкладОтправитель,
	|	1,
	|	ТаблицаДокументаАккумуляторы.Состояние,
	|	ЕСТЬNULL(уатОстаткиАгрегатовОстатки.МОЛ, ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка))
	|ИЗ
	|	ТаблицаДокументаАккумуляторы КАК ТаблицаДокументаАккумуляторы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.уатОстаткиАгрегатов.Остатки(
	|				&Дата,
	|				СерияНоменклатуры В
	|					(ВЫБРАТЬ
	|						ТаблицаДокументаАккумуляторы.СерияНоменклатуры
	|					ИЗ
	|						ТаблицаДокументаАккумуляторы)) КАК уатОстаткиАгрегатовОстатки
	|		ПО ТаблицаДокументаАккумуляторы.СерияНоменклатуры = уатОстаткиАгрегатовОстатки.СерияНоменклатуры
	|ГДЕ
	|	ТаблицаДокументаАккумуляторы.Состояние = ЗНАЧЕНИЕ(Перечисление.уатСостоянияАгрегатов.УстановленоВРаботе)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""1 - ТаблицаОстатковАгрегатов"",
	|	ТаблицаДокументаПрочиеАгрегаты.Регистратор,
	|	ТаблицаДокументаПрочиеАгрегаты.Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
	|	ТаблицаДокументаПрочиеАгрегаты.СерияНоменклатуры,
	|	ТаблицаДокументаПрочиеАгрегаты.СкладОтправитель,
	|	1,
	|	ТаблицаДокументаПрочиеАгрегаты.Состояние,
	|	ЕСТЬNULL(уатОстаткиАгрегатовОстатки.МОЛ, ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка))
	|ИЗ
	|	ТаблицаДокументаПрочиеАгрегаты КАК ТаблицаДокументаПрочиеАгрегаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.уатОстаткиАгрегатов.Остатки(
	|				&Дата,
	|				СерияНоменклатуры В
	|					(ВЫБРАТЬ
	|						ТаблицаДокументаПрочиеАгрегаты.СерияНоменклатуры
	|					ИЗ
	|						ТаблицаДокументаПрочиеАгрегаты)) КАК уатОстаткиАгрегатовОстатки
	|		ПО ТаблицаДокументаПрочиеАгрегаты.СерияНоменклатуры = уатОстаткиАгрегатовОстатки.СерияНоменклатуры
	|ГДЕ
	|	ТаблицаДокументаПрочиеАгрегаты.Состояние = ЗНАЧЕНИЕ(Перечисление.уатСостоянияАгрегатов.УстановленоВРаботе)";
	
	мЗапрос.УстановитьПараметр("Дата",ДокументСсылка.ДатаОкончания);
	
	МассивРезультатов = мЗапрос.ВыполнитьПакет();
		
	// Если мы меняем место (правое заднее->левое заднее и т.п.) шины
	// добавляем движение с типом снятие
	тблАгрегатыТС = МассивРезультатов[0].Выгрузить();
	СнятьПереставляемыеШины(тблАгрегатыТС, ДокументСсылка);
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаАгрегатовТС", тблАгрегатыТС);
	
	// Шины могут и не списываться если состояние установлено в работе/в запас,
	// если мы просто меняем состояние (запас->работа или наоборот) или место (правое заднее->левое заднее и т.п.) шины
	// поэтому нужно исключить такие шины из таблицы списания
	тблОстаткиАгрегатов = МассивРезультатов[1].Выгрузить();
	ИсключитьПереставляемыеШины(тблОстаткиАгрегатов, ДокументСсылка);
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаОстатковАгрегатов", тблОстаткиАгрегатов);
	
	мЗапрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	""0 - ТаблицаСчетчиковТС"" КАК СлужебноеПолеИмяТаблицы,
	|	уатРемонтныйЛист.Ссылка КАК Регистратор,
	|	уатРемонтныйЛист.ДатаОкончания КАК Период,
	|	ЗНАЧЕНИЕ(Перечисление.уатТипыСчетчиковТС.Спидометр) КАК ТипСчетчика,
	|	уатРемонтныйЛист.ПоказанияСпидометра КАК Значение,
	|	уатРемонтныйЛист.ТС КАК ТС
	|ИЗ
	|	Документ.уатРемонтныйЛист КАК уатРемонтныйЛист
	|ГДЕ
	|	уатРемонтныйЛист.Ссылка = &Ссылка
	|	И уатРемонтныйЛист.СпидометрИзменен = ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""0 - ТаблицаСчетчиковТС"",
	|	уатРемонтныйЛист.Ссылка,
	|	уатРемонтныйЛист.ДатаОкончания,
	|	ЗНАЧЕНИЕ(Перечисление.уатТипыСчетчиковТС.СчетчикМЧ),
	|	уатРемонтныйЛист.ПоказанияСчетчикаМЧ,
	|	уатРемонтныйЛист.ТС
	|ИЗ
	|	Документ.уатРемонтныйЛист КАК уатРемонтныйЛист
	|ГДЕ
	|	уатРемонтныйЛист.Ссылка = &Ссылка
	|	И уатРемонтныйЛист.СчетчикМЧИзменен = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	""1 - ТаблицаПрохожденияТО"" КАК СлужебноеПолеИмяТаблицы,
	|	уатРемонтныйЛист.Ссылка КАК Регистратор,
	|	уатРемонтныйЛист.ДатаОкончания КАК Период,
	|	уатРемонтныйЛист.ТС КАК ТС,
	|	уатРемонтныйЛист.ВидОбслуживания КАК ВидТО,
	|	уатРемонтныйЛист.ПараметрВыработки КАК ПараметрВыработки,
	|	ВЫБОР
	|		КОГДА уатРемонтныйЛист.ПараметрВыработки.Временный
	|			ТОГДА уатРемонтныйЛист.ВыработкаПриТО * 3600
	|		ИНАЧЕ уатРемонтныйЛист.ВыработкаПриТО
	|	КОНЕЦ КАК Выработка
	|ИЗ
	|	Документ.уатРемонтныйЛист КАК уатРемонтныйЛист
	|ГДЕ
	|	уатРемонтныйЛист.Ссылка = &Ссылка
	|	И уатРемонтныйЛист.ВидОбслуживания.ИспользоватьВПланированииТО = ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""1 - ТаблицаПрохожденияТО"",
	|	уатРемонтныйЛист.Ссылка,
	|	уатРемонтныйЛист.ДатаОкончания,
	|	уатРемонтныйЛист.ТС,
	|	уатРемонтныйЛист.ВидОбслуживания2,
	|	уатРемонтныйЛист.ПараметрВыработки2,
	|	ВЫБОР
	|		КОГДА уатРемонтныйЛист.ПараметрВыработки2.Временный
	|			ТОГДА уатРемонтныйЛист.ВыработкаПриТО2 * 3600
	|		ИНАЧЕ уатРемонтныйЛист.ВыработкаПриТО2
	|	КОНЕЦ
	|ИЗ
	|	Документ.уатРемонтныйЛист КАК уатРемонтныйЛист
	|ГДЕ
	|	уатРемонтныйЛист.Ссылка = &Ссылка
	|	И уатРемонтныйЛист.ВидОбслуживания2.ИспользоватьВПланированииТО = ИСТИНА
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""1 - ТаблицаПрохожденияТО"",
	|	уатРемонтныйЛист.Ссылка,
	|	уатРемонтныйЛист.ДатаОкончания,
	|	уатРемонтныйЛист.ТС,
	|	уатРемонтныйЛист.ВидОбслуживания3,
	|	уатРемонтныйЛист.ПараметрВыработки3,
	|	ВЫБОР
	|		КОГДА уатРемонтныйЛист.ПараметрВыработки3.Временный
	|			ТОГДА уатРемонтныйЛист.ВыработкаПриТО3 * 3600
	|		ИНАЧЕ уатРемонтныйЛист.ВыработкаПриТО3
	|	КОНЕЦ
	|ИЗ
	|	Документ.уатРемонтныйЛист КАК уатРемонтныйЛист
	|ГДЕ
	|	уатРемонтныйЛист.Ссылка = &Ссылка
	|	И уатРемонтныйЛист.ВидОбслуживания3.ИспользоватьВПланированииТО = ИСТИНА
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	""2 - ТаблицаСостоянийТС"" КАК СлужебноеПолеИмяТаблицы,
	|	уатРемонтныйЛист.Ссылка КАК Регистратор,
	|	уатРемонтныйЛист.ДатаНачала КАК Период,
	|	уатРемонтныйЛист.ТС КАК ТС,
	|	уатРемонтныйЛист.ДатаОкончания КАК ДатаОкончания,
	|	ВЫБОР
	|		КОГДА уатРемонтныйЛист.ВидОбслуживания.ВидОбслуживанияТС = ЗНАЧЕНИЕ(Перечисление.уатВидыОбслуживания.ТекущийРемонт)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.уатСостояниеТС.НаТекущемРемонте)
	|		КОГДА уатРемонтныйЛист.ВидОбслуживания.ВидОбслуживанияТС = ЗНАЧЕНИЕ(Перечисление.уатВидыОбслуживания.СреднийРемонт)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.уатСостояниеТС.НаСреднемРемонте)
	|		КОГДА уатРемонтныйЛист.ВидОбслуживания.ВидОбслуживанияТС = ЗНАЧЕНИЕ(Перечисление.уатВидыОбслуживания.КапитальныйРемонт)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.уатСостояниеТС.НаКапитальномРемонте)
	|		КОГДА уатРемонтныйЛист.ВидОбслуживания.ВидОбслуживанияТС = ЗНАЧЕНИЕ(Перечисление.уатВидыОбслуживания.Дооборудование)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.уатСостояниеТС.НаТекущемРемонте)
	|		КОГДА уатРемонтныйЛист.ВидОбслуживания.ВидОбслуживанияТС = ЗНАЧЕНИЕ(Перечисление.уатВидыОбслуживания.Модернизация)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.уатСостояниеТС.НаТекущемРемонте)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.уатСостояниеТС.НаТекущемРемонте)
	|	КОНЕЦ КАК Состояние,
	|	ВЫБОР
	|		КОГДА уатРемонтныйЛист.СпособРемонта = ЗНАЧЕНИЕ(Перечисление.уатСпособыРемонта.Автосервис)
	|			ТОГДА уатРемонтныйЛист.Контрагент.Наименование
	|		ИНАЧЕ ""Рем. зона""
	|	КОНЕЦ КАК Местоположение
	|ИЗ
	|	Документ.уатРемонтныйЛист КАК уатРемонтныйЛист
	|ГДЕ
	|	уатРемонтныйЛист.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	""3 - ТаблицаРабочегоВремени"" КАК СлужебноеПолеИмяТаблицы,
	|	уатРемонтныйЛистИсполнители.Ссылка.ДатаОкончания КАК Период,
	|	уатРемонтныйЛистИсполнители.Ссылка КАК Регистратор,
	|	уатРемонтныйЛистИсполнители.Сотрудник КАК Сотрудник,
	|	уатРемонтныйЛистИсполнители.Ссылка.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Справочник.уатВидыИспользованияРабочегоВремени.Ремонт) КАК ВидИспользованияРабочегоВремени,
	|	уатРемонтныйЛистИсполнители.Начало КАК ДатаРаботы,
	|	1 КАК Дней,
	|	РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(уатРемонтныйЛистИсполнители.ВремяРаботы, ДЕНЬ), уатРемонтныйЛистИсполнители.ВремяРаботы, СЕКУНДА) КАК Время
	|ИЗ
	|	Документ.уатРемонтныйЛист.Исполнители КАК уатРемонтныйЛистИсполнители
	|ГДЕ
	|	уатРемонтныйЛистИсполнители.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	""4 - ТаблицаОсновныхНачислений"" КАК СлужебноеПолеИмяТаблицы,
	|	уатРемонтныйЛистЗарплата.Ссылка КАК Регистратор,
	|	уатРемонтныйЛистЗарплата.Ссылка.ДатаОкончания КАК Период,
	|	ЛОЖЬ КАК Сторно,
	|	уатРемонтныйЛистЗарплата.ВидНачисления КАК ВидРасчета,
	|	уатРемонтныйЛистЗарплата.Ссылка.Дата КАК ПериодРегистрации,
	|	уатРемонтныйЛистЗарплата.Ссылка.Дата КАК БазовыйПериодНачало,
	|	уатРемонтныйЛистЗарплата.Ссылка.Дата КАК БазовыйПериодКонец,
	|	уатРемонтныйЛистЗарплата.Сотрудник КАК Сотрудник,
	|	уатРемонтныйЛистЗарплата.Сумма КАК Результат,
	|	уатРемонтныйЛистЗарплата.Ссылка.Организация КАК Организация,
	|	уатРемонтныйЛистЗарплата.Ссылка.Подразделение КАК Подразделение
	|ИЗ
	|	Документ.уатРемонтныйЛист.Зарплата КАК уатРемонтныйЛистЗарплата
	|ГДЕ
	|	уатРемонтныйЛистЗарплата.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	""5 - ТаблицаВыработкаТС"" КАК СлужебноеПолеИмяТаблицы,
	|	уатРемонтныйЛист.Ссылка КАК Регистратор,
	|	уатРемонтныйЛист.ДатаОкончания КАК Период,
	|	ЛОЖЬ КАК Сторно,
	|	уатРемонтныйЛист.ТС КАК ТС,
	|	ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ВремяВРемонте) КАК ПараметрВыработки,
	|	РАЗНОСТЬДАТ(уатРемонтныйЛист.ДатаНачала, ВЫБОР
	|			КОГДА уатРемонтныйЛист.ДатаОкончания = &ПустаяДата
	|				ТОГДА уатРемонтныйЛист.ДатаНачала
	|			ИНАЧЕ уатРемонтныйЛист.ДатаОкончания
	|		КОНЕЦ, СЕКУНДА) КАК Количество,
	|	уатРемонтныйЛист.Организация КАК Организация,
	|	уатРемонтныйЛист.Подразделение КАК Подразделение,
	|	уатРемонтныйЛист.Контрагент КАК Контрагент,
	|	ЕСТЬNULL(уатМестонахождениеТССрезПоследних.Колонна, уатРемонтныйЛист.ТС.Колонна) КАК Колонна
	|ИЗ
	|	Документ.уатРемонтныйЛист КАК уатРемонтныйЛист
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатМестонахождениеТС.СрезПоследних(&ДатаСреза, ) КАК уатМестонахождениеТССрезПоследних
	|		ПО уатРемонтныйЛист.ТС = уатМестонахождениеТССрезПоследних.ТС
	|ГДЕ
	|	уатРемонтныйЛист.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	""6 - ТаблицаВыработкаСотрудников"" КАК СлужебноеПолеИмяТаблицы,
	|	уатРемонтныйЛистИсполнители.Ссылка КАК Регистратор,
	|	уатРемонтныйЛистИсполнители.Ссылка.ДатаОкончания КАК Период,
	|	ЛОЖЬ КАК Сторно,
	|	уатРемонтныйЛистИсполнители.Сотрудник КАК Сотрудник,
	|	ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ВремяВРемонте) КАК ПараметрВыработки,
	|	РАЗНОСТЬДАТ(НАЧАЛОПЕРИОДА(уатРемонтныйЛистИсполнители.ВремяРаботы, ДЕНЬ), уатРемонтныйЛистИсполнители.ВремяРаботы, СЕКУНДА) КАК Количество,
	|	уатРемонтныйЛистИсполнители.Ссылка.Организация КАК Организация,
	|	уатРемонтныйЛистИсполнители.Ссылка.Подразделение КАК Подразделение,
	|	уатРемонтныйЛистИсполнители.Ссылка.Контрагент КАК Контрагент,
	|	ЕСТЬNULL(уатМестонахождениеТССрезПоследних.Колонна, уатРемонтныйЛистИсполнители.Ссылка.ТС.Колонна) КАК Колонна
	|ИЗ
	|	Документ.уатРемонтныйЛист.Исполнители КАК уатРемонтныйЛистИсполнители
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатМестонахождениеТС.СрезПоследних(&ДатаСреза, ) КАК уатМестонахождениеТССрезПоследних
	|		ПО уатРемонтныйЛистИсполнители.Ссылка.ТС = уатМестонахождениеТССрезПоследних.ТС
	|ГДЕ
	|	уатРемонтныйЛистИсполнители.Ссылка = &Ссылка";
	
	мЗапрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	мЗапрос.УстановитьПараметр("ПустаяДата", '00010101');
	мЗапрос.УстановитьПараметр("ДатаСреза", ?(ДокументСсылка.ДатаОкончания = '00010101', ДокументСсылка.ДатаНачала, ДокументСсылка.ДатаОкончания));
	МассивРезультатов = мЗапрос.ВыполнитьПакет();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСчетчиковТС"		 , МассивРезультатов[0].Выгрузить());
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПрохожденияТО"		 , МассивРезультатов[1].Выгрузить());
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСостоянийТС"		 , МассивРезультатов[2].Выгрузить());
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРабочегоВремени"	 , МассивРезультатов[3].Выгрузить());
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаОсновныхНачислений"	 , МассивРезультатов[4].Выгрузить());
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаВыработкиТС"		 , МассивРезультатов[5].Выгрузить());
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаВыработкиСотрудников", МассивРезультатов[6].Выгрузить());
	
	// формирование таблицы списания партий
	Если флРемонтВАвтосервисе тогда
		мЗапрос.Текст = " 
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаДокументаМатериалы.Номенклатура,
		|	ТаблицаДокументаМатериалы.Количество,
		|	ТаблицаДокументаМатериалы.Ссылка.СкладСобственныхМатериалов КАК Склад,
		|	ТаблицаДокументаМатериалы.Ссылка.СкладСобственныхМатериалов.ТранзитнаяЯчейка КАК Ячейка,
		|	ТаблицаДокументаМатериалы.Ссылка.ДатаОкончания КАК Период
		|ИЗ
		|	Документ.уатРемонтныйЛист.СобственныеМатериалы КАК ТаблицаДокументаМатериалы
		|ГДЕ
		|	ТаблицаДокументаМатериалы.Ссылка = &Ссылка";
	Иначе
		мЗапрос.Текст = " 
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаДокументаМатериалы.Номенклатура,
		|	ТаблицаДокументаМатериалы.Количество,
		|	ТаблицаДокументаМатериалы.Склад,
		|	ТаблицаДокументаМатериалы.Склад.ТранзитнаяЯчейка КАК Ячейка,
		|	ТаблицаДокументаМатериалы.Период
		|ИЗ
		|	ТаблицаДокументаМатериалы КАК ТаблицаДокументаМатериалы
		|;
		|////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаДокументаРаботы.Регистратор,
		|	ТаблицаДокументаРаботы.Период,
		|	ТаблицаДокументаРаботы.Склад,
		|	ТаблицаДокументаРаботы.ТС,
		|	ТаблицаДокументаРаботы.Работа,
		|	ТаблицаДокументаРаботы.Количество,
		|	ТаблицаДокументаРаботы.Сумма,
		|	ТаблицаДокументаРаботы.СуммаНДС,
		|	ТаблицаДокументаРаботы.СтавкаНДС
		|ИЗ
		|	ТаблицаДокументаРаботы КАК ТаблицаДокументаРаботы";
	КонецЕсли;
	
	МассивРезультатов = мЗапрос.ВыполнитьПакет();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.уатПартииТоваровНаСкладах");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = МассивРезультатов[0];
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Склад"       , "Склад");
	Если флЯчеистыйСклад Тогда 
		ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.уатТоварыВЯчейках");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = МассивРезультатов[0].Выгрузить();
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Склад", "Склад");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ячейка", "Ячейка");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
	КонецЕсли;
	Блокировка.Заблокировать();
	
	мМоментВремениПартий = Новый Граница(ДокументСсылка.ДатаОкончания, ВидГраницы.Включая);
	ТаблицаПартий = уатПроведение.ПолучитьТаблицуПартийДляСписания(МассивРезультатов[0].Выгрузить(),
	уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументСсылка.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.СпособОценкиМПЗ), мМоментВремениПартий);

	ЗапросПартии = Новый Запрос();
	ЗапросПартии.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТабДанных.Склад,
	|	ТабДанных.Номенклатура,
	|	ТабДанных.Партия,
	|	ТабДанных.Количество,
	|	ТабДанных.Стоимость,
	|	ТабДанных.СтоимостьУпр,
	|	ТабДанных.СуммаНДС
	|ПОМЕСТИТЬ ВремТаблицаПартий
	|ИЗ
	|	&ТаблицаПарам КАК ТабДанных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период,
	|	&Регистратор,
	|	&ТС,
	|	ТабДанных.Склад КАК Склад,
	|	ТабДанных.Партия,
	|	ТабДанных.Номенклатура,
	|	ТабДанных.Количество,
	|	ТабДанных.Стоимость,
	|	ТабДанных.СтоимостьУпр,
	|	ТабДанных.СуммаНДС
	|ИЗ
	|	ВремТаблицаПартий КАК ТабДанных
	|
	|";
	
	ЗапросПартии.УстановитьПараметр("ТаблицаПарам", ТаблицаПартий);
	ЗапросПартии.УстановитьПараметр("Период"      , ДокументСсылка.ДатаОкончания);
	ЗапросПартии.УстановитьПараметр("Регистратор" , ДокументСсылка);
	ЗапросПартии.УстановитьПараметр("ТС"          , ДокументСсылка.ТС);
	ТаблицаПартииТоваров = ЗапросПартии.ВыполнитьПакет()[1].Выгрузить();
	
	// формирование таблицы Товары в ячейках
	Если флЯчеистыйСклад Тогда
		Если флРемонтВАвтосервисе тогда
			ЗапросЯчейки = Новый Запрос( 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
			|	ТаблицаДокумента.Ссылка КАК Регистратор,
			|	ТаблицаДокумента.Ссылка.ДатаОкончания КАК Период,
			|	ТаблицаДокумента.Ссылка.СкладСобственныхМатериалов КАК Склад,
			|	ТаблицаДокумента.Ссылка.СкладСобственныхМатериалов.ТранзитнаяЯчейка КАК Ячейка,
			|	ТаблицаДокумента.Номенклатура,
			|	ТаблицаДокумента.Количество * ЕСТЬNULL(ТаблицаДокумента.ЕдиницаИзмерения.Коэффициент, 1) / ТаблицаДокумента.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Количество
			|ИЗ
			|	Документ.уатРемонтныйЛист.СобственныеМатериалы КАК ТаблицаДокумента
			|ГДЕ
			|	ТаблицаДокумента.Ссылка = &Ссылка");
		Иначе
			ЗапросЯчейки = Новый Запрос( 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
			|	ТаблицаДокумента.Ссылка КАК Регистратор,
			|	ТаблицаДокумента.Ссылка.ДатаОкончания КАК Период,
			|	ТаблицаДокумента.Ссылка.Контрагент КАК Склад,
			|	ТаблицаДокумента.Ссылка.Контрагент.ТранзитнаяЯчейка КАК Ячейка,
			|	ТаблицаДокумента.Номенклатура,
			|	ТаблицаДокумента.Количество * ЕСТЬNULL(ТаблицаДокумента.ЕдиницаИзмерения.Коэффициент, 1) / ТаблицаДокумента.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Количество
			|ИЗ
			|	Документ.уатРемонтныйЛист.Материалы КАК ТаблицаДокумента
			|ГДЕ
			|	ТаблицаДокумента.Ссылка = &Ссылка");
		КонецЕсли;
		ЗапросЯчейки.УстановитьПараметр("Ссылка", ДокументСсылка);
		тблТоварыВЯчейках = ЗапросЯчейки.Выполнить().Выгрузить(); 
		
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаТоварыВЯчейках", тблТоварыВЯчейках);
	КонецЕсли;
	
	// формирование таблицы номенклатуры ТС	
	Если флРемонтВАвтосервисе тогда
		мЗапрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаДокументаМатериалы.Регистратор,
		|	ТаблицаДокументаМатериалы.Период,
		|	ТаблицаДокументаМатериалы.ТС,
		|	ТаблицаДокументаМатериалы.Номенклатура,
		|	ТаблицаДокументаМатериалы.Количество,
		|	ТаблицаДокументаМатериалы.Сумма КАК Стоимость,
		|	ТаблицаДокументаМатериалы.Сумма КАК СтоимостьУпр,
		|	ТаблицаДокументаМатериалы.СуммаНДС
		|ИЗ
		|	ТаблицаДокументаМатериалы КАК ТаблицаДокументаМатериалы
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ТаблицаДокументаРаботы.Регистратор,
		|	ТаблицаДокументаРаботы.Период,
		|	ТаблицаДокументаРаботы.ТС,
		|	ТаблицаДокументаРаботы.Работа,
		|	ТаблицаДокументаРаботы.Количество,
		|	ТаблицаДокументаРаботы.Сумма,
		|	ТаблицаДокументаРаботы.Сумма,
		|	ТаблицаДокументаРаботы.СуммаНДС
		|ИЗ
		|	ТаблицаДокументаРаботы КАК ТаблицаДокументаРаботы";
		ТаблицаНоменклатураТС = мЗапрос.выполнить().Выгрузить();
		
		// перевод стоимости по курсу валют
		Для Каждого ТекСтрока ИЗ ТаблицаНоменклатураТС Цикл
			Если СтруктураДополнительныеСвойства.ВалютаРеглУчета <> ДокументСсылка.ВалютаДокумента тогда
				ТекСтрока.Стоимость = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.Стоимость, ДокументСсылка.ВалютаДокумента, 
					СтруктураДополнительныеСвойства.ВалютаРеглУчета,
					ДокументСсылка.КурсВзаиморасчетов, 
					СтруктураДополнительныеСвойства.КурсРегл,
					ДокументСсылка.КратностьВзаиморасчетов,  
					СтруктураДополнительныеСвойства.КратностьРегл);
				ТекСтрока.СуммаНДС = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаНДС, ДокументСсылка.ВалютаДокумента, 
					СтруктураДополнительныеСвойства.ВалютаРеглУчета,
					ДокументСсылка.КурсВзаиморасчетов, 
					СтруктураДополнительныеСвойства.КурсРегл,
					ДокументСсылка.КратностьВзаиморасчетов,  
					СтруктураДополнительныеСвойства.КратностьРегл);
			КонецЕсли;
			
			Если СтруктураДополнительныеСвойства.Свойство("ВалютаУпрУчета") тогда
				ТекСтрока.СтоимостьУпр = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СтоимостьУпр, ДокументСсылка.ВалютаДокумента,
					СтруктураДополнительныеСвойства.ВалютаУпрУчета, 
					ДокументСсылка.КурсВзаиморасчетов, 
					СтруктураДополнительныеСвойства.КурсУпр,
					ДокументСсылка.КратностьВзаиморасчетов,  
					СтруктураДополнительныеСвойства.КратностьУпр);
			Иначе
				ТекСтрока.СтоимостьУпр = 0;								
			КонецЕсли;	
		КонецЦикла;
		
		// добавляем в номенклатуру ТС данные о списанных материалах с собственного склада
		Для Каждого ТекСтрока ИЗ ТаблицаПартииТоваров Цикл
			НовСТрока = ТаблицаНоменклатураТС.Добавить();
			НовСтрока.Регистратор  = ДокументСсылка;
			НовСтрока.Период       = ДокументСсылка.ДатаОкончания;
			НовСтрока.ТС           = ДокументСсылка.ТС;
			НовСтрока.Номенклатура = ТекСтрока.Номенклатура;
			НовСтрока.Количество   = ТекСтрока.Количество;
			НовСтрока.Стоимость    = ТекСтрока.Стоимость;
			НовСТрока.СтоимостьУпр = ТекСтрока.СтоимостьУпр;
			НовСТрока.СуммаНДС     = ТекСтрока.СуммаНДС;
		КонецЦикла;
	Иначе
		ТаблицаНоменклатураТС = Новый ТаблицаЗначений();
		ТаблицаНоменклатураТС.Колонки.Добавить("Регистратор");
		ТаблицаНоменклатураТС.Колонки.Добавить("Период");
		ТаблицаНоменклатураТС.Колонки.Добавить("ТС");
		ТаблицаНоменклатураТС.Колонки.Добавить("Номенклатура");
		ТаблицаНоменклатураТС.Колонки.Добавить("Количество");
		ТаблицаНоменклатураТС.Колонки.Добавить("Стоимость");
		ТаблицаНоменклатураТС.Колонки.Добавить("СтоимостьУпр");
		ТаблицаНоменклатураТС.Колонки.Добавить("СуммаНДС");
		Для Каждого ТекСтрока ИЗ ТаблицаПартииТоваров Цикл
			НовСТрока = ТаблицаНоменклатураТС.Добавить();
			НовСтрока.Регистратор  = ДокументСсылка;
			НовСтрока.Период       = ДокументСсылка.ДатаОкончания;
			НовСтрока.ТС           = ДокументСсылка.ТС;
			НовСтрока.Номенклатура = ТекСтрока.Номенклатура;
			НовСтрока.Количество   = ТекСтрока.Количество;
			НовСтрока.Стоимость    = ТекСтрока.Стоимость;
			НовСТрока.СтоимостьУпр = ТекСтрока.СтоимостьУпр;
			НовСТрока.СуммаНДС     = ТекСтрока.СуммаНДС;
		КонецЦикла;
		
		ТабРаботъ = МассивРезультатов[1].Выгрузить();
		Для Каждого ТекСтрока ИЗ ТабРаботъ Цикл
			НовСТрока = ТаблицаНоменклатураТС.Добавить();
			НовСтрока.Регистратор  = ДокументСсылка;
			НовСтрока.Период       = ДокументСсылка.ДатаОкончания;
			НовСтрока.ТС           = ДокументСсылка.ТС;
			НовСтрока.Номенклатура = ТекСтрока.Работа;
			НовСтрока.Количество   = ТекСтрока.Количество;
			НовСтрока.Стоимость    = 0;
			НовСтрока.СтоимостьУпр = 0;
			НовСТрока.СуммаНДС     = 0;
		КонецЦикла;
	КонецЕсли;	
	
	// формирование таблицы заявок на ремонт
	Если ЗначениеЗаполнено(ДокументСсылка.ЗаявкаНаРемонт) Тогда
		ТаблицаЗаявокНаРемонт = Новый ТаблицаЗначений();
		ТаблицаЗаявокНаРемонт.Колонки.Добавить("Регистратор");
		ТаблицаЗаявокНаРемонт.Колонки.Добавить("Период");
		ТаблицаЗаявокНаРемонт.Колонки.Добавить("ТС");
		ТаблицаЗаявокНаРемонт.Колонки.Добавить("ВидДвижения");
		ТаблицаЗаявокНаРемонт.Колонки.Добавить("Организация");
		ТаблицаЗаявокНаРемонт.Колонки.Добавить("Колонна");
		ТаблицаЗаявокНаРемонт.Колонки.Добавить("ЗаявкаНаРемонт");
		ТаблицаЗаявокНаРемонт.Колонки.Добавить("ВидОбслуживания");
		ТаблицаЗаявокНаРемонт.Колонки.Добавить("Номенклатура");
		ТаблицаЗаявокНаРемонт.Колонки.Добавить("Количество");		
		
		ЗапросПоРаботам = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатРемонтныйЛистРаботы.Работа,
		|	уатРемонтныйЛистРаботы.Количество,
		|	уатРемонтныйЛистРаботы.ЗаявкаНаРемонт
		|ИЗ
		|	РегистрНакопления.уатЗаявкиНаРемонт.ОстаткиИОбороты(
		|			,
		|			&ДатаКон,
		|			,
		|			,
		|			ТС = &ТС
		|				И ВидОбслуживания = &ВидОбслуживания) КАК уатЗаявкиНаРемонтОстаткиИОбороты
		|		ПРАВОЕ СОЕДИНЕНИЕ Документ.уатРемонтныйЛист.Работы КАК уатРемонтныйЛистРаботы
		|		ПО уатЗаявкиНаРемонтОстаткиИОбороты.ТС = уатРемонтныйЛистРаботы.Ссылка.ТС
		|			И уатЗаявкиНаРемонтОстаткиИОбороты.ЗаявкаНаРемонт = уатРемонтныйЛистРаботы.ЗаявкаНаРемонт
		|			И уатЗаявкиНаРемонтОстаткиИОбороты.ВидОбслуживания = уатРемонтныйЛистРаботы.ЗаявкаНаРемонт.ВидОбслуживания
		|ГДЕ
		|	уатРемонтныйЛистРаботы.ЗаявкаНаРемонт <> &ПустаяЗаявка
		|	И уатРемонтныйЛистРаботы.Ссылка = &Ссылка");
		ЗапросПоРаботам.УстановитьПараметр("ПустаяЗаявка", Документы.уатЗаявкаНаРемонт.ПустаяСсылка());
		ЗапросПоРаботам.УстановитьПараметр("Ссылка", ДокументСсылка);
		ЗапросПоРаботам.УстановитьПараметр("ДатаКон", КонецДня(ДокументСсылка.Дата));
		ЗапросПоРаботам.УстановитьПараметр("ТС", ДокументСсылка.ТС);
		ЗапросПоРаботам.УстановитьПараметр("ВидОбслуживания", ДокументСсылка.ВидОбслуживания);
		
		ТаблицаПоРаботам = ЗапросПоРаботам.Выполнить().Выгрузить();
		Для Каждого ТекСтрока ИЗ ТаблицаПоРаботам Цикл
			НовСтрока = ТаблицаЗаявокНаРемонт.Добавить();
			НовСтрока.Регистратор 	  = ДокументСсылка;
			НовСтрока.Период     	  = ДокументСсылка.Дата;
			НовСтрока.ВидДвижения     = ВидДвиженияНакопления.Расход;
			НовСтрока.ТС          	  = ДокументСсылка.ТС;
			НовСтрока.Организация 	  = ДокументСсылка.Организация;
			НовСтрока.Колонна	  	  = ДокументСсылка.ТС.Колонна;
			НовСтрока.ЗаявкаНаРемонт  = ТекСтрока.ЗаявкаНаРемонт;
			НовСтрока.ВидОбслуживания = ДокументСсылка.ВидОбслуживания;
			НовСтрока.Номенклатура    = ТекСтрока.Работа;
			НовСтрока.Количество      = ТекСтрока.Количество;
		КонецЦикла;
		
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗаявокНаРемонт"    , ТаблицаЗаявокНаРемонт);
	КонецЕсли;
	
	ТаблицаПланированиеРемонтов = Новый ТаблицаЗначений;
	ТаблицаПланированиеРемонтов.Колонки.Добавить("Ресурс1");
	ТаблицаПланированиеРемонтов.Колонки.Добавить("Ресурс2");
	ТаблицаПланированиеРемонтов.Колонки.Добавить("ДокументПланирования");
	ТаблицаПланированиеРемонтов.Колонки.Добавить("Дата");
	ТаблицаПланированиеРемонтов.Колонки.Добавить("НачалоРабочегоВремени");
	ТаблицаПланированиеРемонтов.Колонки.Добавить("КонецРабочегоВремени");
	ТаблицаПланированиеРемонтов.Колонки.Добавить("Продолжительность");
	Если ЗначениеЗаполнено(ДокументСсылка.Цех) Тогда
		ТекДатаРемонта = ДокументСсылка.ДатаНачала;
		Если НачалоДня(ДокументСсылка.ДатаОкончания) - НачалоДня(ДокументСсылка.ДатаНачала) = 0 Тогда
			// Начало окончание в одном дне
			СтрокаГрафикаРаботыРесурсов = ТаблицаПланированиеРемонтов.Добавить();
			СтрокаГрафикаРаботыРесурсов.Ресурс1 = ДокументСсылка.Цех;
			СтрокаГрафикаРаботыРесурсов.Ресурс2 = ДокументСсылка.Мастер;
			СтрокаГрафикаРаботыРесурсов.ДокументПланирования = ДокументСсылка;
			СтрокаГрафикаРаботыРесурсов.Дата = ДокументСсылка.ДатаНачала;
			СтрокаГрафикаРаботыРесурсов.НачалоРабочегоВремени = '00010101' + (ДокументСсылка.ДатаНачала - НачалоДня(ДокументСсылка.ДатаНачала));
			СтрокаГрафикаРаботыРесурсов.КонецРабочегоВремени = '00010101' + (ДокументСсылка.ДатаОкончания - НачалоДня(ДокументСсылка.ДатаОкончания));
			СтрокаГрафикаРаботыРесурсов.Продолжительность = '00010101' + (СтрокаГрафикаРаботыРесурсов.КонецРабочегоВремени - СтрокаГрафикаРаботыРесурсов.НачалоРабочегоВремени);
		Иначе
			Разница = (НачалоДня(ДокументСсылка.ДатаОкончания) - НачалоДня(ДокументСсылка.ДатаНачала))/60/60/24;
			ТекущийДень = НачалоДня(ДокументСсылка.ДатаНачала);
			Пока Разница >= 0 Цикл
				СтрокаГрафикаРаботыРесурсов = ТаблицаПланированиеРемонтов.Добавить();
				СтрокаГрафикаРаботыРесурсов.Ресурс1 = ДокументСсылка.Цех;
				СтрокаГрафикаРаботыРесурсов.Ресурс2 = ДокументСсылка.Мастер;
				СтрокаГрафикаРаботыРесурсов.ДокументПланирования = ДокументСсылка;
				СтрокаГрафикаРаботыРесурсов.Дата = ТекущийДень;
				// Установим НачалоРабочегоВремени 
				Если ТекущийДень = НачалоДня(ДокументСсылка.ДатаНачала) Тогда
					СтрокаГрафикаРаботыРесурсов.НачалоРабочегоВремени = '00010101' + (ДокументСсылка.ДатаНачала - НачалоДня(ДокументСсылка.ДатаНачала));
				Иначе
					СтрокаГрафикаРаботыРесурсов.НачалоРабочегоВремени = '00010101';
				КонецЕсли;
				// Установим КонецРабочегоВремени
				Если ТекущийДень = НачалоДня(ДокументСсылка.ДатаОкончания) Тогда
					СтрокаГрафикаРаботыРесурсов.КонецРабочегоВремени = '00010101' + (ДокументСсылка.ДатаОкончания - НачалоДня(ДокументСсылка.ДатаОкончания));
				Иначе
					СтрокаГрафикаРаботыРесурсов.КонецРабочегоВремени = '00010101235959';
				КонецЕсли;
				// Посчитаем Продолжительность
				СтрокаГрафикаРаботыРесурсов.Продолжительность = '00010101' + (СтрокаГрафикаРаботыРесурсов.КонецРабочегоВремени - СтрокаГрафикаРаботыРесурсов.НачалоРабочегоВремени);
				
				ТекущийДень = ТекущийДень + 3600*24;
				Разница = Разница - 1;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаНоменклатурыТС"      , ТаблицаНоменклатураТС);
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПартии"              , ТаблицаПартииТоваров );
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПланированиеРемонтов", ТаблицаПланированиеРемонтов);
	
	Если флРемонтВАвтосервисе Тогда
		СуммаВзаиморасчетов = уатОбщегоНазначенияТиповые.уатПолучитьСуммуДокументаСНДС(ДокументСсылка, "Работы")
			+ уатОбщегоНазначенияТиповые.уатПолучитьСуммуДокументаСНДС(ДокументСсылка, "Материалы");
			
		ТаблицаВзаиморасчетов = Новый ТаблицаЗначений;
		ТаблицаВзаиморасчетов.Колонки.Добавить("Регистратор");
		ТаблицаВзаиморасчетов.Колонки.Добавить("Период");
		ТаблицаВзаиморасчетов.Колонки.Добавить("ВидДвижения");
		ТаблицаВзаиморасчетов.Колонки.Добавить("ДоговорКонтрагента");
		ТаблицаВзаиморасчетов.Колонки.Добавить("Валюта");
		ТаблицаВзаиморасчетов.Колонки.Добавить("Сделка");
		ТаблицаВзаиморасчетов.Колонки.Добавить("Контрагент");
		ТаблицаВзаиморасчетов.Колонки.Добавить("Организация");
		ТаблицаВзаиморасчетов.Колонки.Добавить("СуммаВзаиморасчетов");
		ТаблицаВзаиморасчетов.Колонки.Добавить("СуммаУпр");
		
		Если СуммаВзаиморасчетов > 0 Тогда
			НовСтрока = ТаблицаВзаиморасчетов.Добавить();
			НовСтрока.Регистратор        = ДокументСсылка;
			НовСтрока.Период             = ДокументСсылка.Дата;
			НовСтрока.ВидДвижения        = ВидДвиженияНакопления.Расход;
			НовСтрока.ДоговорКонтрагента = ДокументСсылка.ДоговорКонтрагента;
			НовСтрока.Валюта             = ДокументСсылка.ДоговорКонтрагента.ВалютаВзаиморасчетов;
			НовСтрока.Контрагент         = ДокументСсылка.Контрагент;
			НовСтрока.Организация        = ДокументСсылка.Организация;
			
			Если (ДокументСсылка.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам
				ИЛИ ДокументСсылка.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоНакладным) Тогда
				НовСтрока.Сделка = ДокументСсылка.Сделка;
			КонецЕсли;
			
			НовСтрока.СуммаВзаиморасчетов = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(СуммаВзаиморасчетов, 
				ДокументСсылка.ВалютаДокумента, ДокументСсылка.ДоговорКонтрагента.ВалютаВзаиморасчетов,
				уатОбщегоНазначенияТиповые.уатКурсДокумента(ДокументСсылка,СтруктураДополнительныеСвойства.ВалютаРеглУчета),
				ДокументСсылка.КурсВзаиморасчетов,
				уатОбщегоНазначенияТиповые.уатКратностьДокумента(ДокументСсылка,СтруктураДополнительныеСвойства.ВалютаРеглУчета),
				ДокументСсылка.КратностьВзаиморасчетов);
			НовСтрока.СуммаУпр            = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(СуммаВзаиморасчетов, 
				ДокументСсылка.ВалютаДокумента, СтруктураДополнительныеСвойства.ВалютаУпрУчета,
				уатОбщегоНазначенияТиповые.уатКурсДокумента(ДокументСсылка,СтруктураДополнительныеСвойства.ВалютаРеглУчета),
				СтруктураДополнительныеСвойства.КурсУпр,
				уатОбщегоНазначенияТиповые.уатКратностьДокумента(ДокументСсылка,СтруктураДополнительныеСвойства.ВалютаРеглУчета),
				СтруктураДополнительныеСвойства.КратностьУпр);
		КонецЕсли;
			
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаВзаиморасчетов", ТаблицаВзаиморасчетов);
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("уатИспользоватьУчетДоходовИРасходов") = ИСТИНА Тогда
		СтатьяРасходовРемонт = Неопределено;
		СтатьяРасходовЗП = Неопределено;
		
		СтатьяРасходовРемонт = ДокументСсылка.ВидОбслуживания.СтатьяРасходов;
		Если НЕ ЗначениеЗаполнено(СтатьяРасходовРемонт) Тогда
			СтатьяРасходовРемонт = Неопределено;
			Для Каждого ТекСтрока Из ДокументСсылка.ПланЗатрат.Расходы Цикл
				Если СтатьяРасходовРемонт = Неопределено
					И ТекСтрока.СтатьяРасходов.ВидЗатрат = Перечисления.уатВидыЗатрат.Ремонт Тогда
					СтатьяРасходовРемонт = ТекСтрока.СтатьяРасходов;
				ИначеЕсли СтатьяРасходовЗП = Неопределено И ТекСтрока.СтатьяРасходов.ВидЗатрат = Перечисления.уатВидыЗатрат.ОплатаТруда Тогда
					СтатьяРасходовЗП = ТекСтрока.СтатьяРасходов;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ТаблицаРасходы = Новый ТаблицаЗначений;
		ТаблицаРасходы.Колонки.Добавить("СтатьяРасходов", Новый ОписаниеТипов("СправочникСсылка.уатСтатьиРасходов"));
		ТаблицаРасходы.Колонки.Добавить("СчетРасходов",   Новый ОписаниеТипов("ПланСчетовСсылка.уатРегламентированный"));
		ТаблицаРасходы.Колонки.Добавить("СуммаРегл",      Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2)));
		ТаблицаРасходы.Колонки.Добавить("СуммаУпр",       Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2)));
		ТаблицаРасходы.Колонки.Добавить("СуммаНДС",       Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2)));
		ТаблицаРасходы.Колонки.Добавить("СуммаНДСУпр",    Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15, 2)));
		
		Если ЗначениеЗаполнено(СтатьяРасходовРемонт) Тогда
			Для Каждого ТекСтрока Из СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаНоменклатурыТС Цикл
				Если НЕ флРемонтВАвтосервисе И ТипЗнч(ТекСтрока.Номенклатура) = Тип("СправочникСсылка.уатРаботыПоРемонту") Тогда
					Продолжить;
				КонецЕсли;
				
				ТекСуммаНДСУпр = ?(ТекСтрока.Стоимость = 0, 0, ТекСтрока.СуммаНДС * ТекСтрока.СтоимостьУпр / ТекСтрока.Стоимость);
				
				НоваяСтрокаВрем                = ТаблицаРасходы.Добавить();
				НоваяСтрокаВрем.СтатьяРасходов = СтатьяРасходовРемонт;
				НоваяСтрокаВрем.СчетРасходов   = СтатьяРасходовРемонт.Счет;
				НоваяСтрокаВрем.СуммаРегл      = ТекСтрока.Стоимость + ТекСтрока.СуммаНДС;
				НоваяСтрокаВрем.СуммаУпр       = ТекСтрока.СтоимостьУпр + ТекСуммаНДСУпр;
				НоваяСтрокаВрем.СуммаНДС       = ТекСтрока.СуммаНДС;
				НоваяСтрокаВрем.СуммаНДСУпр    = ТекСуммаНДСУпр;
			КонецЦикла;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(СтатьяРасходовЗП) Тогда
			Для Каждого ТекСтрока Из СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаОсновныхНачислений Цикл
				НоваяСтрокаВрем = ТаблицаРасходы.Добавить();
				НоваяСтрокаВрем.СтатьяРасходов = СтатьяРасходовЗП;
				НоваяСтрокаВрем.СчетРасходов = СтатьяРасходовЗП.Счет;
				НоваяСтрокаВрем.СуммаРегл = ТекСтрока.Результат;
				НоваяСтрокаВрем.СуммаУпр = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(НоваяСтрокаВрем.СуммаРегл,
					СтруктураДополнительныеСвойства.ВалютаРеглУчета, СтруктураДополнительныеСвойства.ВалютаУпрУчета, ДокументСсылка.ДатаОкончания, ДокументСсылка.ДатаОкончания);
			КонецЦикла;
		КонецЕсли;
		
		ТаблицаРасходы.Свернуть("СтатьяРасходов, СчетРасходов", "СуммаУпр, СуммаРегл, СуммаНДСУпр, СуммаНДС");
		
		ТаблицаРасходы.Колонки.Добавить("Период");
		ТаблицаРасходы.ЗаполнитьЗначения(ДокументСсылка.ДатаОкончания, "Период");
		ТаблицаРасходы.Колонки.Добавить("Регистратор");
		ТаблицаРасходы.ЗаполнитьЗначения(ДокументСсылка, "Регистратор");
		ТаблицаРасходы.Колонки.Добавить("Организация");
		ТаблицаРасходы.ЗаполнитьЗначения(ДокументСсылка.Организация, "Организация");
		ТаблицаРасходы.Колонки.Добавить("Подразделение");
		ТаблицаРасходы.ЗаполнитьЗначения(ДокументСсылка.Подразделение, "Подразделение");
		ТаблицаРасходы.Колонки.Добавить("ТС");
		ТаблицаРасходы.ЗаполнитьЗначения(ДокументСсылка.ТС, "ТС");
		
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРасходы", ТаблицаРасходы);
	КонецЕсли;
	
	флНачислятьПоПодразделениюСотрудника = НЕ уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументСсылка.Организация,
		ПланыВидовХарактеристик.уатПраваИНастройки.НачислятьЗарплатуПоПодразделениюДокумента);
	Если флНачислятьПоПодразделениюСотрудника Тогда 
		Для Каждого ТекСтрока Из СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаОсновныхНачислений Цикл
			РеквизитыВодителя = уатОбщегоНазначения.уатПрочитатьРеквизитыВодителя(
				ТекСтрока.Сотрудник, ТекСтрока.Период, ДокументСсылка.Организация);
			ТекСтрока.Подразделение = РеквизитыВодителя.ПодразделениеОрганизации;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ИнициализироватьДанныеДокумента()

Процедура ВыполнитьКонтроль(ДокументСсылка, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь) Экспорт
	Если ДокументСсылка.Выполнен И (НЕ УдалениеПроведения) Тогда
		Заголовок = уатОбщегоНазначенияТиповые.уатПредставлениеДокументаПриПроведении(ДокументСсылка);
		
		// 1. проверка на отрицательные остатки материалов на складе
		Если ДокументСсылка.СпособРемонта = Перечисления.уатСпособыРемонта.РемЗона тогда
			мЗапрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	уатРемонтныйЛистМатериалы.Номенклатура КАК Номенклатура,
			|	ЕСТЬNULL(уатПартииТоваровНаСкладахОстатки.КоличествоОстаток, 0) КАК Количество,
			|	ЕСТЬNULL(уатТоварыВЯчейкахОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЯчейка
			|ИЗ
			|	Документ.уатРемонтныйЛист.Материалы КАК уатРемонтныйЛистМатериалы
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.уатПартииТоваровНаСкладах.Остатки(&МоментПроверки, Склад = &Склад) КАК уатПартииТоваровНаСкладахОстатки
			|		ПО уатРемонтныйЛистМатериалы.Номенклатура = уатПартииТоваровНаСкладахОстатки.Номенклатура
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.уатТоварыВЯчейках.Остатки(
			|				&МоментПроверки,
			|				Склад = &Склад
			|					И Ячейка = Склад.ТранзитнаяЯчейка
			|					И Номенклатура В
			|						(ВЫБРАТЬ
			|							ТабНоменклатуры.Номенклатура
			|						ИЗ
			|							Документ.уатРемонтныйЛист.Материалы КАК ТабНоменклатуры
			|						ГДЕ
			|							ТабНоменклатуры.Ссылка = &Ссылка)) КАК уатТоварыВЯчейкахОстатки
			|		ПО уатРемонтныйЛистМатериалы.Номенклатура = уатТоварыВЯчейкахОстатки.Номенклатура
			|ГДЕ
			|	уатРемонтныйЛистМатериалы.Ссылка = &Ссылка
			|	И (ЕСТЬNULL(уатПартииТоваровНаСкладахОстатки.КоличествоОстаток, 0) < 0
			|			ИЛИ ЕСТЬNULL(уатТоварыВЯчейкахОстатки.КоличествоОстаток, 0) < 0)");
			Склад = ДокументСсылка.Контрагент;
		Иначе
			мЗапрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	уатРемонтныйЛистМатериалы.Номенклатура КАК Номенклатура,
			|	ЕСТЬNULL(уатПартииТоваровНаСкладахОстатки.КоличествоОстаток, 0) КАК Количество,
			|	ЕСТЬNULL(уатТоварыВЯчейкахОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЯчейка
			|ИЗ
			|	Документ.уатРемонтныйЛист.СобственныеМатериалы КАК уатРемонтныйЛистМатериалы
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.уатПартииТоваровНаСкладах.Остатки(&МоментПроверки, Склад = &Склад) КАК уатПартииТоваровНаСкладахОстатки
			|		ПО уатРемонтныйЛистМатериалы.Номенклатура = уатПартииТоваровНаСкладахОстатки.Номенклатура
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.уатТоварыВЯчейках.Остатки(
			|				&МоментПроверки,
			|				Склад = &Склад
			|					И Ячейка = Склад.ТранзитнаяЯчейка
			|					И Номенклатура В
			|						(ВЫБРАТЬ
			|							ТабНоменклатуры.Номенклатура
			|						ИЗ
			|							Документ.уатРемонтныйЛист.СобственныеМатериалы КАК ТабНоменклатуры
			|						ГДЕ
			|							ТабНоменклатуры.Ссылка = &Ссылка)) КАК уатТоварыВЯчейкахОстатки
			|		ПО уатРемонтныйЛистМатериалы.Номенклатура = уатТоварыВЯчейкахОстатки.Номенклатура
			|ГДЕ
			|	уатРемонтныйЛистМатериалы.Ссылка = &Ссылка
			|	И (ЕСТЬNULL(уатПартииТоваровНаСкладахОстатки.КоличествоОстаток, 0) < 0
			|			ИЛИ ЕСТЬNULL(уатТоварыВЯчейкахОстатки.КоличествоОстаток, 0) < 0)");
			Склад = ДокументСсылка.СкладСобственныхМатериалов;
		КонецЕсли;
		
		мЗапрос.УстановитьПараметр("Склад",          Склад);
		мЗапрос.УстановитьПараметр("Ссылка",         ДокументСсылка);
		мЗапрос.УстановитьПараметр("МоментПроверки", Новый Граница(ДокументСсылка.ДатаОкончания, ВидГраницы.Включая));
		
		ВыборкаПартии = мЗапрос.Выполнить().Выбрать();
		
		Если ПолучитьФункциональнуюОпцию("уатАдресноеХранение") И Склад.АдресноеХранение Тогда
			ТекстШаблона = "Обнаружен отрицательный остаток номенклатуры ""%1"" на складе ""%2"" (транзитная ячейка): %3";
		Иначе
			ТекстШаблона = "Обнаружен отрицательный остаток номенклатуры ""%1"" на складе ""%2"": %3";
		КонецЕсли;
		
		Пока ВыборкаПартии.Следующий() Цикл
			ТекстНСТР = СтрШаблон(ТекстШаблона, ВыборкаПартии.Номенклатура, мЗапрос.Параметры.Склад,
				Мин(ВыборкаПартии.Количество, ВыборкаПартии.КоличествоОстатокЯчейка));
			уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, Отказ, Заголовок);	
		КонецЦикла;
		
		Если НЕ Отказ Тогда
			// формируем общую таблицу агрегатов
			тблАгрегаты = ДокументСсылка.Шины.Выгрузить();
			// Ищем строки снято-запас для одной серии номенклатуры
			мсвЗапас = тблАгрегаты.НайтиСтроки(Новый Структура("Состояние", Перечисления.уатСостоянияАгрегатов.УстановленоВЗапас));
			Для Каждого ТекЗапас Из мсвЗапас Цикл
				мсвСнято = тблАгрегаты.НайтиСтроки(Новый Структура("СерияНоменклатуры, Состояние", ТекЗапас.СерияНоменклатуры, Перечисления.уатСостоянияАгрегатов.Снято));
				Для Каждого ТекСнято Из мсвСнято Цикл
					тблАгрегаты.Удалить(ТекСнято);
				КонецЦикла;
			КонецЦикла;
			мсвПерестановка = тблАгрегаты.НайтиСтроки(Новый Структура("Состояние", Перечисления.уатСостоянияАгрегатов.УстановленоВРаботе));
			Для Каждого ТекЗапас Из мсвПерестановка Цикл
				мсвСнято = тблАгрегаты.НайтиСтроки(Новый Структура("СерияНоменклатуры, Состояние", ТекЗапас.СерияНоменклатуры, Перечисления.уатСостоянияАгрегатов.Снято));
				Для Каждого ТекСнято Из мсвСнято Цикл
					тблАгрегаты.Удалить(ТекСнято);
				КонецЦикла;
			КонецЦикла;
			
			Для Каждого ТекАккум Из ДокументСсылка.Аккумуляторы Цикл
				НоваяСтрокаАгрегат = тблАгрегаты.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаАгрегат, ТекАккум);
			КонецЦикла;
			Для Каждого ТекПрочий Из ДокументСсылка.ПрочиеАгрегаты Цикл
				НоваяСтрокаАгрегат = тблАгрегаты.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаАгрегат, ТекПрочий);
			КонецЦикла;
			
			текМоментВремени = Новый Граница(ДокументСсылка.ДатаОкончания, ВидГраницы.Включая);
			предМоментВремени = Новый Граница(ДокументСсылка.ДатаОкончания, ВидГраницы.Исключая);
			
			тблШиныТС 			= уатОбщегоНазначения.уатШиныТС(ДокументСсылка.ТС, текМоментВремени);
			тблАккумуляторыТС   = уатОбщегоНазначения.уатАккумуляторыТС(ДокументСсылка.ТС, текМоментВремени);
			тблПрочиеАгрегатыТС = уатОбщегоНазначения.уатПрочиеАгрегатыТС(ДокументСсылка.ТС, текМоментВремени);
			тблШиныТС_доРемонта 		  = уатОбщегоНазначения.уатШиныТС(ДокументСсылка.ТС, предМоментВремени);
			тблАккумуляторыТС_доРемонта   = уатОбщегоНазначения.уатАккумуляторыТС(ДокументСсылка.ТС, предМоментВремени);
			тблПрочиеАгрегатыТС_доРемонта = уатОбщегоНазначения.уатПрочиеАгрегатыТС(ДокументСсылка.ТС, предМоментВремени);
			
			Для Каждого ТекСтрокаАгрегат Из тблАгрегаты Цикл
				// 2. проверяем остаток агрегатов на складе (для устанавливаемых агрегатов)
				Если ТекСтрокаАгрегат.Состояние = Перечисления.уатСостоянияАгрегатов.УстановленоВРаботе
					ИЛИ ТекСтрокаАгрегат.Состояние = Перечисления.уатСостоянияАгрегатов.УстановленоВЗапас Тогда
					
					Запрос = Новый Запрос(
					"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
					|	ЕСТЬNULL(уатОстаткиАгрегатовОстатки.КоличествоОстаток, 0) КАК Количество
					|ИЗ
					|	РегистрНакопления.уатОстаткиАгрегатов.Остатки(
					|			&МоментВремени,
					|			Склад = &Склад
					|				И СерияНоменклатуры = &СерияНоменклатуры) КАК уатОстаткиАгрегатовОстатки
					|ГДЕ
					|	уатОстаткиАгрегатовОстатки.КоличествоОстаток < 0");
					Запрос.УстановитьПараметр("МоментВремени", текМоментВремени);
					Запрос.УстановитьПараметр("Склад", ДокументСсылка.СкладОтправитель);
					Запрос.УстановитьПараметр("СерияНоменклатуры", ТекСтрокаАгрегат.СерияНоменклатуры);
					Если НЕ Запрос.Выполнить().Пустой() Тогда
						Если ТекСтрокаАгрегат.СерияНоменклатуры.ТипАгрегата = Справочники.уатТипыАгрегатов.Шина
							И тблШиныТС_доРемонта.Найти(ТекСтрокаАгрегат.СерияНоменклатуры, "СерияНоменклатуры") <> Неопределено Тогда
							// Все нормально - указанная шина до ремонта уже была на ТС и мы ее пытаемся опять поставить
							//	- возможно пытаемся просто поменять местами шины
						Иначе
							#Если ТонкийКлиент тогда	
							#Иначе
								Если ТекСтрокаАгрегат.СерияНоменклатуры.Модель.ТипАгрегата = Справочники.уатТипыАгрегатов.Аккумулятор тогда
									ТекстНСТР = НСтр("en='Battery ""%1"" is out of stock ""%2""';ru='Аккумулятор ""%1"" отсутствует на складе ""%2""'");
								ИначеЕсли ТекСтрокаАгрегат.СерияНоменклатуры.Модель.ТипАгрегата = Справочники.уатТипыАгрегатов.Шина тогда
									ТекстНСТР = НСтр("en='Tire ""% 1"" does not exist on the warehouse ''% 2 ''';ru='Шина ""%1"" отсутствует на складе ""%2""'");
								Иначе
									ТекстНСТР = НСтр("en='Car part ""%1"" is out of stock ""%2""';ru='Агрегат ""%1"" отсутствует на складе ""%2""'");
								КонецЕсли;
								ТекстНСТР = СтрШаблон(ТекстНСТР, ТекСтрокаАгрегат.СерияНоменклатуры.СерийныйНомер, ДокументСсылка.СкладОтправитель);
								
								уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, Отказ, Заголовок);	
							#КонецЕсли
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				// 3. проверяем наличие агрегата на ТС (для снимаемых агрегатов)
				Если ТекСтрокаАгрегат.Состояние = Перечисления.уатСостоянияАгрегатов.Снято Тогда
					Если (ТекСтрокаАгрегат.СерияНоменклатуры.ТипАгрегата = Справочники.уатТипыАгрегатов.Шина
						И тблШиныТС_доРемонта.Найти(ТекСтрокаАгрегат.СерияНоменклатуры, "СерияНоменклатуры") = Неопределено)
						ИЛИ 
						(ТекСтрокаАгрегат.СерияНоменклатуры.ТипАгрегата = Справочники.уатТипыАгрегатов.Аккумулятор
						И тблАккумуляторыТС_доРемонта.Найти(ТекСтрокаАгрегат.СерияНоменклатуры, "СерияНоменклатуры") = Неопределено)
						ИЛИ
						(ТекСтрокаАгрегат.СерияНоменклатуры.ТипАгрегата <> Справочники.уатТипыАгрегатов.Аккумулятор 
						И ТекСтрокаАгрегат.СерияНоменклатуры.ТипАгрегата <> Справочники.уатТипыАгрегатов.Шина
						И тблПрочиеАгрегатыТС_доРемонта.Найти(ТекСтрокаАгрегат.СерияНоменклатуры, "СерияНоменклатуры") = Неопределено)
						Тогда
						#Если ТонкийКлиент тогда	
						#Иначе
							Если ТекСтрокаАгрегат.СерияНоменклатуры.Модель.ТипАгрегата = Справочники.уатТипыАгрегатов.Аккумулятор тогда
								ТекстНСТР = НСтр("en='Battery ""%1"" is not in vehicle ""%2""';ru='Аккумулятор ""%1"" отсутствует на ТС ""%2""'");
							ИначеЕсли ТекСтрокаАгрегат.СерияНоменклатуры.Модель.ТипАгрегата = Справочники.уатТипыАгрегатов.Шина тогда
								ТекстНСТР = НСтр("en='Tire ""%1"" is not in vehicle ""%2""';ru='Шина ""%1"" отсутствует на ТС ""%2""'");
							Иначе
								ТекстНСТР = НСтр("en='Car part ""%1"" is not on vehicle ""%2""';ru='Агрегат ""%1"" отсутствует на ТС ""%2""'");
							КонецЕсли;
							ТекстНСТР = СтрШаблон(ТекстНСТР, ТекСтрокаАгрегат.СерияНоменклатуры.СерийныйНомер, Строка(ДокументСсылка.ТС));
							
							уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, Отказ, Заголовок);
						#КонецЕсли
					КонецЕсли;
				КонецЕсли;
				
				// 4. проверка на установку агрегата, который уже был до этого установлен на другое ТС (для устанавливаемых агрегатов)
				Если ТекСтрокаАгрегат.Состояние = Перечисления.уатСостоянияАгрегатов.УстановленоВРаботе
					ИЛИ ТекСтрокаАгрегат.Состояние = Перечисления.уатСостоянияАгрегатов.УстановленоВЗапас Тогда
					
					Запрос = Новый Запрос(
					"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
					|	уатАгрегатыТССрезПоследних.ТС,
					|	уатАгрегатыТССрезПоследних.СостояниеАгрегата
					|ИЗ
					|	РегистрСведений.уатАгрегатыТС.СрезПоследних(
					|			&МоментВремени,
					|			СерияНоменклатуры = &СерияНоменклатуры
					|				И ТС <> &ТС) КАК уатАгрегатыТССрезПоследних");
					Запрос.УстановитьПараметр("МоментВремени", текМоментВремени);
					Запрос.УстановитьПараметр("СерияНоменклатуры", ТекСтрокаАгрегат.СерияНоменклатуры);
					Запрос.УстановитьПараметр("ТС", ДокументСсылка.ТС);
					тблПересекТС = Запрос.Выполнить().Выгрузить();
					Для Каждого ТекСтрокаПересекТС Из тблПересекТС Цикл
						Если ТекСтрокаПересекТС.СостояниеАгрегата = Перечисления.уатСостоянияАгрегатов.УстановленоВРаботе
							ИЛИ ТекСтрокаПересекТС.СостояниеАгрегата = Перечисления.уатСостоянияАгрегатов.УстановленоВЗапас Тогда
							
							Если ТекСтрокаАгрегат.СерияНоменклатуры.ТипАгрегата = Справочники.уатТипыАгрегатов.Аккумулятор тогда
								ТекстНСТР = НСтр("en='Battery ""%1"" is already installed on the ""%2""';ru='Аккумулятор ""%1"" уже установлен на ТС ""%2""'");
							ИначеЕсли ТекСтрокаАгрегат.СерияНоменклатуры.ТипАгрегата = Справочники.уатТипыАгрегатов.Шина тогда
								ТекстНСТР = НСтр("en='Tire ""%1"" is already installed on vehicle ""%2""';ru='Шина ""%1"" уже установлена на ТС ""%2""'");
							Иначе
								ТекстНСТР = НСтр("en='Car part ""%1"" is already installed on vehicle ""%2""';ru='Агрегат ""%1"" уже установлен на ТС ""%2""'");
							КонецЕсли;
							ТекстНСТР = СтрШаблон(ТекстНСТР, ТекСтрокаАгрегат.СерияНоменклатуры.СерийныйНомер, Строка(ДокументСсылка.ТС));
							
							уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, Отказ, Заголовок);
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// 5. проверка на установку агрегата на уже занятое место установки
		// здесь просто сообщаем об этом, но не отменяем проведение (для устанавливаемых агрегатов)
		Если НЕ Отказ Тогда
			Для Каждого ТекСтрокаАгрегат Из тблАгрегаты Цикл
				Если ТекСтрокаАгрегат.Состояние = Перечисления.уатСостоянияАгрегатов.УстановленоВРаботе
					ИЛИ ТекСтрокаАгрегат.Состояние = Перечисления.уатСостоянияАгрегатов.УстановленоВЗапас Тогда
					
					Если ТекСтрокаАгрегат.СерияНоменклатуры.ТипАгрегата = Справочники.уатТипыАгрегатов.Шина Тогда
						мсвНайденныеСтроки = тблШиныТС.НайтиСтроки(Новый Структура("МестоУстановки", ТекСтрокаАгрегат.МестоУстановки));
						Для Каждого НайденнаяСтрока Из мсвНайденныеСтроки Цикл
							Если НайденнаяСтрока.СерияНоменклатуры <> ТекСтрокаАгрегат.СерияНоменклатуры Тогда
								ТекстНСТР = НСтр("en='Tire ""%1"" is installed ""%2"" is already occupied by tire ""%3""!';ru='Шина ""%1"" установлена на место ""%2"", уже занятое шиной ""%3""!'");
								ТекстНСТР = СтрШаблон(ТекстНСТР, ТекСтрокаАгрегат.СерияНоменклатуры.СерийныйНомер, СокрЛП(ТекСтрокаАгрегат.МестоУстановки), НайденнаяСтрока.СерияНоменклатуры.СерийныйНомер);
								уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, , , СтатусСообщения.Информация);
							КонецЕсли;
						КонецЦикла;
					ИначеЕсли ТекСтрокаАгрегат.СерияНоменклатуры.ТипАгрегата = Справочники.уатТипыАгрегатов.Аккумулятор Тогда
						Для Каждого НайденнаяСтрока Из тблАккумуляторыТС Цикл
							Если НайденнаяСтрока.СерияНоменклатуры <> ТекСтрокаАгрегат.СерияНоменклатуры Тогда
								ТекстНСТР = НСтр("en='Battery ""%1"" installed on the vehicle, occupied by battery ""%2""!';ru='Аккумулятор ""%1"" установлен на ТС, уже занятое аккумулятором ""%2""!'");
								ТекстНСТР = СтрШаблон(ТекстНСТР, ТекСтрокаАгрегат.СерияНоменклатуры.СерийныйНомер, НайденнаяСтрока.СерияНоменклатуры.СерийныйНомер);
								уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, , , СтатусСообщения.Информация);
							КонецЕсли;
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры // ВыполнитьКонтроль()

// Получает дополнительные реквизиты для отображения в отчете "Реестр документов"
// 
// Возвращаемое значение:
//  Структура - доп. реквизитов
//
Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура("Информация", "ТС");
	Возврат Результат;
	
КонецФункции

// Функция рассчитывает сумму списанную по текущей строке документа
//
// Параметры:
//  ТекСтрока	 - 	 - 
//  ТабДвижений	 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция РассчитатьСуммуСписания(ТекСтрока, ТабДвижений) Экспорт
	
	ТаблицаНоменклатуры = Новый Структура;
	ТаблицаНоменклатуры.Вставить("Стоимость");
	ТаблицаНоменклатуры.Вставить("СуммаНДС");
	
	СтруктПоиска = Новый Структура;
	СтруктПоиска.Вставить( "Номенклатура", ТекСтрока.Номенклатура);
	
	НаборСтрок = ТабДвижений.НайтиСтроки(СтруктПоиска);
	КолСписать = ТекСтрока.Количество;
	Сумма      = 0;
	СуммаНДС   = 0;
	
	Для Каждого СтрокаДвиж Из НаборСтрок Цикл
		Если КолСписать >= СтрокаДвиж.Количество Тогда
			
			Сумма         = Сумма      + СтрокаДвиж.Стоимость;
			СуммаНДС      = СуммаНДС      + СтрокаДвиж.СуммаНДС;
			КолСписать    = КолСписать - СтрокаДвиж.Количество;
			СтрокаДвиж.Стоимость  = 0;
			СтрокаДвиж.СуммаНДС   = 0;
			СтрокаДвиж.Количество = 0;
			
		Иначе
			Если Не СтрокаДвиж.Количество = 0 Тогда
				СумСписать = Окр( СтрокаДвиж.Стоимость * КолСписать / СтрокаДвиж.Количество, 2, 1);
				СписатьСуммаНДС = Окр( СтрокаДвиж.СуммаНДС * КолСписать / СтрокаДвиж.Количество, 2, 1);
				Сумма      = Сумма + СумСписать;
				СуммаНДС   = СуммаНДС + СписатьСуммаНДС;
				СтрокаДвиж.Стоимость  = СтрокаДвиж.Стоимость  - СумСписать;
				СтрокаДвиж.СуммаНДС   = СтрокаДвиж.СуммаНДС   - СписатьСуммаНДС;
				СтрокаДвиж.Количество = СтрокаДвиж.Количество - КолСписать;
			Иначе
				Сумма = Сумма + СтрокаДвиж.Стоимость;
				СуммаНДС = СуммаНДС + СтрокаДвиж.СуммаНДС;
				СтрокаДвиж.Стоимость = 0;
				СтрокаДвиж.СуммаНДС  = 0;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ТаблицаНоменклатуры.Стоимость = Сумма;
	ТаблицаНоменклатуры.СуммаНДС  = СуммаНДС;
	
	Возврат ТаблицаНоменклатуры;
	
КонецФункции // РассчитатьСуммуСписания()

// Функция возвращает таблицу работ, соответствующих переданной номенклатуре
//
Функция СоответствиеРаботНоменклатуре(мсвНоменклатура) Экспорт
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	уатРаботыПоРемонту.Ссылка КАК Работа,
	|	уатРаботыПоРемонту.Номенклатура
	|ИЗ
	|	Справочник.уатРаботыПоРемонту КАК уатРаботыПоРемонту
	|ГДЕ
	|	НЕ уатРаботыПоРемонту.ПометкаУдаления
	|	И НЕ уатРаботыПоРемонту.ЭтоГруппа
	|	И уатРаботыПоРемонту.Номенклатура В (&мсвНоменклатура)");
	Запрос.УстановитьПараметр("мсвНоменклатура", мсвНоменклатура);
	тблСоответствиеРаботНоменклатуре = Запрос.Выполнить().Выгрузить();
	
	Возврат тблСоответствиеРаботНоменклатуре;
КонецФункции

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// тблАгрегатов = [СерияНоменклатуры, Состояние]
Процедура ИсключитьПереставляемыеШины(тблАгрегатов, ДокументСсылка)
	ТипАгрегатаШина = Справочники.уатТипыАгрегатов.Шина;
	
	тблШиныТС =  уатОбщегоНазначения.уатШиныТС(ДокументСсылка.ТС, Новый Граница(ДокументСсылка.ДатаОкончания, ВидГраницы.Исключая));
	
	мсвДляУдаления = Новый Массив;
	Для Каждого ТекСтрока Из тблАгрегатов Цикл
		Если ТекСтрока.СерияНоменклатуры.ТипАгрегата = ТипАгрегатаШина Тогда
			Если ТекСтрока.Состояние = Перечисления.уатСостоянияАгрегатов.УстановленоВРаботе
				ИЛИ ТекСтрока.Состояние = Перечисления.уатСостоянияАгрегатов.УстановленоВЗапас Тогда
				
				// Поскольку эта шина уже есть на ТС и мы пытаемся опять ее поставить на ТС, то ее уже не надо списывать
				// ситуация возникает когда хотим поменять 2 шины местами, либо поменять запаску и рабочую шину
				Если тблШиныТС.Найти(ТекСтрока.СерияНоменклатуры, "СерияНоменклатуры") <> Неопределено Тогда
					мсвДляУдаления.Добавить(ТекСтрока);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Для Каждого ТекСтрока Из мсвДляУдаления Цикл
		тблАгрегатов.Удалить(ТекСтрока);
	КонецЦикла;
КонецПроцедуры

Процедура СнятьПереставляемыеШины(тблАгрегатыТС, ДокументСсылка)
	ТипАгрегатаШина = Справочники.уатТипыАгрегатов.Шина;
	
	тблШиныТС =  уатОбщегоНазначения.уатШиныТС(ДокументСсылка.ТС, Новый Граница(ДокументСсылка.ДатаОкончания, ВидГраницы.Исключая));
	
	тблАгрегаты = тблАгрегатыТС.Скопировать();
	
	Для Каждого ТекСтрока Из тблАгрегатыТС Цикл
		Если ТекСтрока.СерияНоменклатуры.ТипАгрегата = ТипАгрегатаШина Тогда
			Если ТекСтрока.СостояниеАгрегата = Перечисления.уатСостоянияАгрегатов.УстановленоВРаботе
				ИЛИ ТекСтрока.СостояниеАгрегата = Перечисления.уатСостоянияАгрегатов.УстановленоВЗапас Тогда
				// Поскольку эта шина уже есть на ТС и мы пытаемся опять ее поставить на ТС, то ее надо сначала снять с ТС
				Период = ТекСтрока.Период - 1;
				РезультатПоиска      = тблШиныТС.Найти(ТекСтрока.СерияНоменклатуры, "СерияНоменклатуры");
				Если РезультатПоиска <> Неопределено Тогда
					
					Строка                         = тблАгрегаты.Добавить();
					Строка.Период                  = Период;
					Строка.Регистратор             = ТекСтрока.Регистратор;
					Строка.МОЛ                     = РезультатПоиска.МОЛ;
					Строка.СлужебноеПолеИмяТаблицы = ТекСтрока.СлужебноеПолеИмяТаблицы;
					Строка.МестоУстановки          = РезультатПоиска.МестоУстановки;
					Строка.СерияНоменклатуры       = ТекСтрока.СерияНоменклатуры;
					Строка.СостояниеАгрегата       = Перечисления.уатСостоянияАгрегатов.Снято;
					Строка.ТС                      = ТекСтрока.ТС;
					
					тблАгрегаты.Сортировать("СостояниеАгрегата");
					
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	тблАгрегатыТС = тблАгрегаты.Скопировать();
	
КонецПроцедуры

Функция ПечатьАкт(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_РемонтныйЛист";
	
	ПервыйДокумент = Истина;
	мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Для Каждого ТекущийДокумент Из МассивОбъектов Цикл
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РемонтныйЛист_Акт";
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.уатРемонтныйЛист.ПФ_MXL_Акт");
		
		ДокОбъект = ТекущийДокумент.ПолучитьОбъект();
		ДокОбъект.Движения.уатПартииТоваровНаСкладах.Прочитать();
		ТабДвижений = ДокОбъект.Движения.уатПартииТоваровНаСкладах.Выгрузить();
		
		Область = Макет.ПолучитьОбласть("Шапка");
		СписокТребуемыхПараметров	= "НаименованиеДляПечатныхФорм";
		СведенияОбОбъекте			= уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(ТекущийДокумент.Организация);
		Область.Параметры.Организация	= уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(СведенияОбОбъекте, СписокТребуемыхПараметров);
		Область.Параметры.ТекстЗаголовка = уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ТекущийДокумент, НСтр("en='Act';ru='Акт'"));
		Область.Параметры.Модель         = ТекущийДокумент.ТС.Модель;
		Область.Параметры.ГосНомер       = ТекущийДокумент.ТС.ГосударственныйНомер;
		// Печать штрихкода
		Если уатЗащищенныеФункцииСервер_проф.ИспользоватьШтрихкодированиеОбъекта(ТекущийДокумент) Тогда
			уатЗащищенныеФункцииСервер_проф.ОтобразитьШКнаПФ(Область, ТекущийДокумент);
		КонецЕсли;
		ТабличныйДокумент.Вывести(Область);
		
		// Материалы
		Область = Макет.ПолучитьОбласть("МатериалыШапка");
		ТабличныйДокумент.Вывести(Область);
		НомПП = 0;
		мСумма = 0;
		мСуммаНДС = 0;
		мСуммаИтого = 0;
		мСуммаНДСИтого = 0;
		
		РежимВыводаКодаВДокументах = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(
			ПользователиКлиентСервер.АвторизованныйПользователь(), 
			ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.РежимВыводаКодаВДокументах")
		);
		
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	уатПартииТоваровНаСкладах.Номенклатура КАК Номенклатура,
		               |	СУММА(уатПартииТоваровНаСкладах.Количество) КАК Количество,
		               |	СУММА(уатПартииТоваровНаСкладах.Стоимость) КАК Стоимость,
		               |	уатПартииТоваровНаСкладах.СуммаНДС КАК СуммаНДС,
		               |	уатПартииТоваровНаСкладах.НомерСтроки КАК НомерСтроки
		               |ПОМЕСТИТЬ втЦеныНоменклатуры
		               |ИЗ
		               |	РегистрНакопления.уатПартииТоваровНаСкладах КАК уатПартииТоваровНаСкладах
		               |ГДЕ
		               |	уатПартииТоваровНаСкладах.Регистратор = &Ссылка
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	уатПартииТоваровНаСкладах.Номенклатура,
		               |	уатПартииТоваровНаСкладах.СуммаНДС,
		               |	уатПартииТоваровНаСкладах.НомерСтроки
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	уатРемонтныйЛистСобственныеМатериалы.Номенклатура КАК Номенклатура,
		               |	уатРемонтныйЛистСобственныеМатериалы.Номенклатура.Код КАК НоменклатураКод,
		               |	уатРемонтныйЛистСобственныеМатериалы.Номенклатура.Артикул КАК НоменклатураАртикул,
		               |	уатРемонтныйЛистСобственныеМатериалы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		               |	уатРемонтныйЛистСобственныеМатериалы.Количество КАК Количество,
		               |	уатРемонтныйЛистСобственныеМатериалы.НомерСтроки КАК НомерСтроки,
		               |	2 КАК Приоритет
		               |ПОМЕСТИТЬ втСобственныеМатериалы
		               |ИЗ
		               |	Документ.уатРемонтныйЛист.СобственныеМатериалы КАК уатРемонтныйЛистСобственныеМатериалы
		               |ГДЕ
		               |	уатРемонтныйЛистСобственныеМатериалы.Ссылка = &Ссылка
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	уатРемонтныйЛистМатериалы.Номенклатура КАК Номенклатура,
		               |	уатРемонтныйЛистМатериалы.Номенклатура.Код КАК НоменклатураКод,
		               |	уатРемонтныйЛистМатериалы.Номенклатура.Артикул КАК НоменклатураАртикул,
		               |	уатРемонтныйЛистМатериалы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		               |	уатРемонтныйЛистМатериалы.Количество КАК Количество,
		               |	уатРемонтныйЛистМатериалы.Цена КАК Цена,
		               |	уатРемонтныйЛистМатериалы.Сумма КАК Сумма,
		               |	уатРемонтныйЛистМатериалы.СуммаНДС КАК СуммаНДС,
		               |	уатРемонтныйЛистМатериалы.НомерСтроки КАК НомерСтроки,
		               |	1 КАК Приоритет
		               |ПОМЕСТИТЬ втМатериалы
		               |ИЗ
		               |	Документ.уатРемонтныйЛист.Материалы КАК уатРемонтныйЛистМатериалы
		               |ГДЕ
		               |	уатРемонтныйЛистМатериалы.Ссылка = &Ссылка
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	втМатериалы.Номенклатура КАК Номенклатура,
		               |	втМатериалы.НоменклатураКод КАК Код,
		               |	втМатериалы.НоменклатураАртикул КАК Артикул,
		               |	втМатериалы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		               |	втМатериалы.Количество КАК Количество,
		               |	втМатериалы.Цена КАК Цена,
		               |	втМатериалы.Сумма КАК Сумма,
		               |	втМатериалы.СуммаНДС КАК СуммаНДС,
		               |	втМатериалы.НомерСтроки КАК НомерСтроки,
		               |	втМатериалы.Приоритет КАК Приоритет
		               |ИЗ
		               |	втМатериалы КАК втМатериалы
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	втСобственныеМатериалы.Номенклатура,
		               |	втСобственныеМатериалы.НоменклатураКод,
		               |	втСобственныеМатериалы.НоменклатураАртикул,
		               |	втСобственныеМатериалы.ЕдиницаИзмерения,
		               |	ЕСТЬNULL(втЦеныНоменклатуры.Количество, 0),
		               |	ЕСТЬNULL(втЦеныНоменклатуры.Стоимость, 0) / ЕСТЬNULL(втЦеныНоменклатуры.Количество, 1),
		               |	ЕСТЬNULL(втЦеныНоменклатуры.Стоимость, 0),
		               |	ЕСТЬNULL(втЦеныНоменклатуры.СуммаНДС, 0),
		               |	втСобственныеМатериалы.НомерСтроки,
		               |	втСобственныеМатериалы.Приоритет
		               |ИЗ
		               |	втСобственныеМатериалы КАК втСобственныеМатериалы
		               |		ЛЕВОЕ СОЕДИНЕНИЕ втЦеныНоменклатуры КАК втЦеныНоменклатуры
		               |		ПО втСобственныеМатериалы.Номенклатура = втЦеныНоменклатуры.Номенклатура
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	Приоритет,
		               |	НомерСтроки";
		
		Запрос.УстановитьПараметр("Ссылка", ТекущийДокумент);
		ТаблицаМатериалы = Запрос.Выполнить().Выгрузить();
		
		Для Каждого ТекСтрокаМатериалы Из ТаблицаМатериалы Цикл
			НомПП = НомПП + 1;
			Область = Макет.ПолучитьОбласть("Материалы");
			Область.Параметры.Номенклатура     = ТекСтрокаМатериалы.Номенклатура;  
			Если ЗначениеЗаполнено(ТекСтрокаМатериалы.Номенклатура) Тогда
				Если РежимВыводаКодаВДокументах = Перечисления.уатРежимыВыводаКодаВДокументах.Код Тогда
					Если ТекСтрокаМатериалы.Код = "" Тогда
						Область.Параметры.НомерПоКаталогу = НСтр("en='-';ru='-'");
					Иначе
						Область.Параметры.НомерПоКаталогу = ТекСтрокаМатериалы.Код;
					КонецЕсли;
				ИначеЕсли РежимВыводаКодаВДокументах = Перечисления.уатРежимыВыводаКодаВДокументах.Артикул Тогда
					Если ТекСтрокаМатериалы.Артикул = "" Тогда
						Область.Параметры.НомерПоКаталогу = НСтр("en='-';ru='-'");
					Иначе
						Область.Параметры.НомерПоКаталогу = ТекСтрокаМатериалы.Артикул;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Область.Параметры.Количество       = ТекСтрокаМатериалы.Количество;
			Область.Параметры.ЕдиницаИзмерения = ТекСтрокаМатериалы.ЕдиницаИзмерения;
			
			Если ТекущийДокумент.СпособРемонта = Перечисления.уатСпособыРемонта.Автосервис Тогда
				мСумма                  = ТекСтрокаМатериалы.Сумма;
				мСуммаНДС               = ТекСтрокаМатериалы.СуммаНДС;
				Область.Параметры.Цена  = ТекСтрокаМатериалы.Цена;
				Область.Параметры.Сумма = мСумма;
				
			ИначеЕсли уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ТекущийДокумент.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.ВестиСкладскойУчетУАТ) Тогда
				// складской учет ведется средствами УАТ
				Если ТекСтрокаМатериалы.Приоритет = 1 Тогда
					ТаблицаНоменклатуры     = РассчитатьСуммуСписания(ТекСтрокаМатериалы, ТабДвижений);
					мСумма                  = ТаблицаНоменклатуры.Стоимость;
					мСуммаНДС               = ТаблицаНоменклатуры.СуммаНДС;
					Область.Параметры.Цена  = Окр(мСумма / ТекСтрокаМатериалы.Количество, 2, 1);
					Область.Параметры.Сумма = мСумма;
				Иначе
					мСумма                  = ТекСтрокаМатериалы.Сумма;
					мСуммаНДС               = ТекСтрокаМатериалы.СуммаНДС;
					Область.Параметры.Цена  = ТекСтрокаМатериалы.Цена;
					Область.Параметры.Сумма = мСумма;
				КонецЕсли;
			Иначе
				мСумма                  = ТекСтрокаМатериалы.Сумма; 
				мСуммаНДС               = ТекСтрокаМатериалы.СуммаНДС;
				Область.Параметры.Цена  = ТекСтрокаМатериалы.Цена;
				Область.Параметры.Сумма = мСумма;
			КонецЕсли;
			
			мСуммаИтого    = мСуммаИтого + мСумма;
			мСуммаНДСИтого = мСуммаНДСИтого + мСуммаНДС;
			
			Область.Параметры.НомПП = НомПП;
			ТабличныйДокумент.Вывести(Область);
		КонецЦикла;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		ОбластьМакета.Параметры.ИтогСумма = уатОбщегоНазначенияТиповые.уатФорматСумм(мСуммаИтого);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Если ТекущийДокумент.СпособРемонта = Перечисления.уатСпособыРемонта.Автосервис Тогда
			УчитыватьНДС = ТекущийДокумент.УчитыватьНДС;
		Иначе
			УчитыватьНДС = Истина;
		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
		
		Если ТекущийДокумент.СпособРемонта = Перечисления.уатСпособыРемонта.Автосервис Тогда  
			Если ТекущийДокумент.СобственныеМатериалы.Количество() <> 0 Тогда
				СтавкиНДС = Новый Массив
			Иначе
				СтавкиНДС = ОбщегоНазначения.ВыгрузитьКолонку(ТекущийДокумент.Материалы, "СтавкаНДС", Истина);
			КонецЕсли;
		Иначе
			СтавкиНДС = Новый Массив;
		КонецЕсли;
		
		Если мСуммаНДСИтого <> 0 Тогда
			ДанныеПечатиНДС = уатОбщегоНазначенияТиповые.уатДанныеПечатиИтоговНДС(мСуммаНДСИтого, СтавкиНДС, ТекущийДокумент.СуммаВключаетНДС, ":"); 
			ОбластьМакета.Параметры.ВсегоНДС = ДанныеПечатиНДС.ВсегоНДС;
			ОбластьМакета.Параметры.НДС      = ДанныеПечатиНДС.НДС;
		ИначеЕсли ТекущийДокумент.СпособРемонта = Перечисления.уатСпособыРемонта.Автосервис 
			И ТекущийДокумент.УчитыватьНДС Тогда
			ДанныеПечатиНДС = уатОбщегоНазначенияТиповые.уатДанныеПечатиИтоговНДС(0, СтавкиНДС, ТекущийДокумент.СуммаВключаетНДС, ":");
			ОбластьМакета.Параметры.ВсегоНДС = ДанныеПечатиНДС.ВсегоНДС;
			ОбластьМакета.Параметры.НДС      = ДанныеПечатиНДС.НДС;
		КонецЕсли;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		СуммаКПрописи = мСуммаИтого + ?(УчитыватьНДС И НЕ ТекущийДокумент.СуммаВключаетНДС, мСуммаНДСИтого, 0);
		ОбластьМакета.Параметры.ИтоговаяСтрока = "Всего выдано материалов " + НомПП
			+ ", на сумму " + уатОбщегоНазначенияТиповые.уатФорматСумм(СуммаКПрописи, мВалютаРегламентированногоУчета);
		ОбластьМакета.Параметры.СуммаПрописью  = уатОбщегоНазначенияТиповые.уатСформироватьСуммуПрописью(СуммаКПрописи, мВалютаРегламентированногоУчета);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Область = Макет.ПолучитьОбласть("Подвал");
		ТабличныйДокумент.Вывести(Область);
		
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		ТабличныйДокумент.ПолеСлева = 0;
		ТабличныйДокумент.ПолеСправа = 0;
		
		// Присвоим имя для сохранения параметров печати табличного документа
		ТабличныйДокумент.ИмяПараметровПечати = "АктРемонта";
		
		ТабличныйДокумент.ОтображатьСетку = Ложь;
		ТабличныйДокумент.Защита = Ложь;
		ТабличныйДокумент.ТолькоПросмотр = Ложь;
		ТабличныйДокумент.ОтображатьЗаголовки = Ложь;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ТекущийДокумент);
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатнаяФорма()

Функция ПечатьОС3(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_РемонтныйЛист";
	
	ПервыйДокумент = Истина;
	
	Для Каждого ТекущийДокумент Из МассивОбъектов Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ТабличныйДокумент.ИмяПараметровПечати = "ПараметрыПечати_РемонтныйЛист_ОС3";
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.уатРемонтныйЛист.ПФ_MXL_ОС3");
		
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	уатПартииТоваровНаСкладах.Номенклатура КАК Номенклатура,
		               |	СУММА(уатПартииТоваровНаСкладах.Количество) КАК Количество,
		               |	СУММА(уатПартииТоваровНаСкладах.Стоимость) КАК Стоимость,
		               |	уатПартииТоваровНаСкладах.СуммаНДС КАК СуммаНДС,
		               |	уатПартииТоваровНаСкладах.НомерСтроки КАК НомерСтроки
		               |ПОМЕСТИТЬ втЦеныНоменклатуры
		               |ИЗ
		               |	РегистрНакопления.уатПартииТоваровНаСкладах КАК уатПартииТоваровНаСкладах
		               |ГДЕ
		               |	уатПартииТоваровНаСкладах.Регистратор = &Ссылка
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	уатПартииТоваровНаСкладах.Номенклатура,
		               |	уатПартииТоваровНаСкладах.СуммаНДС,
		               |	уатПартииТоваровНаСкладах.НомерСтроки
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	уатРемонтныйЛистРаботы.Ссылка.Номер КАК НомерДок,
		               |	уатРемонтныйЛистРаботы.Ссылка.Дата КАК ДатаДок,
		               |	уатРемонтныйЛистРаботы.Работа КАК ВидРабот,
		               |	уатРемонтныйЛистРаботы.Ссылка.ТС КАК ОсновноеСредство,
		               |	уатРемонтныйЛистРаботы.Ссылка.ТС.Наименование КАК НаимОС,
		               |	уатРемонтныйЛистРаботы.Ссылка.ТС.ГаражныйНомер КАК ИнвНомер,
		               |	уатРемонтныйЛистРаботы.Ссылка.ТС.ДатаВводаВЭксплуатацию КАК ДатаНачалаЭксплуатации,
		               |	уатРемонтныйЛистРаботы.Сумма КАК СуммаЗатрат,
		               |	уатРемонтныйЛистРаботы.Ссылка.ВидОбслуживания КАК ВидОбслуживания
		               |ИЗ
		               |	Документ.уатРемонтныйЛист.Работы КАК уатРемонтныйЛистРаботы
		               |ГДЕ
		               |	уатРемонтныйЛистРаботы.Ссылка = &Ссылка
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	уатРемонтныйЛистМатериалы.Ссылка.Номер,
		               |	уатРемонтныйЛистМатериалы.Ссылка.Дата,
		               |	уатРемонтныйЛистМатериалы.Номенклатура,
		               |	уатРемонтныйЛистМатериалы.Ссылка.ТС,
		               |	уатРемонтныйЛистМатериалы.Ссылка.ТС.Наименование,
		               |	уатРемонтныйЛистМатериалы.Ссылка.ТС.ГаражныйНомер,
		               |	уатРемонтныйЛистМатериалы.Ссылка.ТС.ДатаВводаВЭксплуатацию,
		               |	уатРемонтныйЛистМатериалы.Сумма,
		               |	уатРемонтныйЛистМатериалы.Ссылка.ВидОбслуживания
		               |ИЗ
		               |	Документ.уатРемонтныйЛист.Материалы КАК уатРемонтныйЛистМатериалы
		               |ГДЕ
		               |	уатРемонтныйЛистМатериалы.Ссылка = &Ссылка
		               |
		               |ОБЪЕДИНИТЬ ВСЕ
		               |
		               |ВЫБРАТЬ
		               |	уатРемонтныйЛистСобственныеМатериалы.Ссылка.Номер,
		               |	уатРемонтныйЛистСобственныеМатериалы.Ссылка.Дата,
		               |	уатРемонтныйЛистСобственныеМатериалы.Номенклатура,
		               |	уатРемонтныйЛистСобственныеМатериалы.Ссылка.ТС,
		               |	уатРемонтныйЛистСобственныеМатериалы.Ссылка.ТС.Наименование,
		               |	уатРемонтныйЛистСобственныеМатериалы.Ссылка.ТС.ГаражныйНомер,
		               |	уатРемонтныйЛистСобственныеМатериалы.Ссылка.ТС.ДатаВводаВЭксплуатацию,
		               |	ЕСТЬNULL(втЦеныНоменклатуры.Стоимость, 0),
		               |	уатРемонтныйЛистСобственныеМатериалы.Ссылка.ВидОбслуживания
		               |ИЗ
		               |	Документ.уатРемонтныйЛист.СобственныеМатериалы КАК уатРемонтныйЛистСобственныеМатериалы
		               |		ЛЕВОЕ СОЕДИНЕНИЕ втЦеныНоменклатуры КАК втЦеныНоменклатуры
		               |		ПО уатРемонтныйЛистСобственныеМатериалы.Номенклатура = втЦеныНоменклатуры.Номенклатура
		               |			И уатРемонтныйЛистСобственныеМатериалы.НомерСтроки = втЦеныНоменклатуры.НомерСтроки
		               |ГДЕ
		               |	уатРемонтныйЛистСобственныеМатериалы.Ссылка = &Ссылка";	
		
		Запрос.УстановитьПараметр("Ссылка"     , ТекущийДокумент);
		Запрос.УстановитьПараметр("КонДата"	   , ТекущийДокумент.Дата);
		Запрос.УстановитьПараметр("Организация", ТекущийДокумент.Организация);
		
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = РезультатЗапроса.Выбрать();
		Выборка.Следующий();
		
		// Печать лицевой стороны.
		// Секция № 1
		Шапка         = Макет.ПолучитьОбласть("Шапка1");
		СтрокаТаблицы = Макет.ПолучитьОбласть("Строка1");
		Подвал        = Макет.ПолучитьОбласть("Строка1П");
		
		Шапка.Параметры.Заполнить(Выборка);
		
		ПечатьПрефиксовВключена = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ТекущийДокумент.Организация, ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ВыводитьПрефиксПриПечати"));
		Если ПечатьПрефиксовВключена Тогда 
			Шапка.Параметры.НомерДок = ТекущийДокумент.Номер;
		Иначе
			Шапка.Параметры.НомерДок = уатОбщегоНазначенияКлиентСервер.НомерДокументаНаПечать(ТекущийДокумент.Номер, Истина, Истина);
		КонецЕсли;
		
		Если ТипЗнч(ТекущийДокумент.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
			Шапка.Параметры.Исполнитель = уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(ТекущийДокумент.Контрагент, ТекущийДокумент.Дата), "НаименованиеДляПечатныхФорм");
			Шапка.Параметры.КодОКПОИсполнителя = ТекущийДокумент.Контрагент.КодПоОКПО;
		ИначеЕсли ТипЗнч(ТекущийДокумент.Контрагент) = Тип("СправочникСсылка.Склады") Тогда
		Иначе
			Шапка.Параметры.Исполнитель = ТекущийДокумент.Контрагент.Наименование;
		КонецЕсли;
		
		Шапка.Параметры.Заказчик              = ТекущийДокумент.Организация;
		Шапка.Параметры.ЗаказчикПредставление = уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(ТекущийДокумент.Организация, ТекущийДокумент.Дата), "НаименованиеДляПечатныхФорм");
		Шапка.Параметры.КодОКПОЗаказчика      = ТекущийДокумент.Организация.КодПоОКПО;
		Шапка.Параметры.ДатаНачала            = ТекущийДокумент.ДатаНачала;
		Шапка.Параметры.ДатаОкончания         = ТекущийДокумент.ДатаОкончания;
		
		Руководители = уатОбщегоНазначенияТиповые.уатОтветственныеЛицаОрганизаций(ТекущийДокумент.Организация, ТекущийДокумент.Дата);
		Шапка.Параметры.Руководитель          = Руководители.Руководитель;
		Шапка.Параметры.ДолжностьРуководителя = Руководители.РуководительДолжность;
		
		ТабличныйДокумент.Вывести(Шапка);
		
		НомПП = 0;
		ДокВводаБУ  = Неопределено;
		ДатаВводаБУ = Дата('00000000');
		
		Выборка = РезультатЗапроса.Выгрузить();       // только первую строку распечатаем
		//Для каждого СтрокаВыборки Из Выборка Цикл
		Если Выборка.Количество()>0 Тогда
			СтрокаВыборки = Выборка[0];
			СтрокаТаблицы.Параметры.Заполнить(СтрокаВыборки);
			
			НомПП = НомПП + 1;
			СтрокаТаблицы.Параметры.ПорядковыйНомер = НомПП;
			
			Если СтрокаВыборки.ДатаНачалаЭксплуатации<>ДатаВводаБУ Тогда   // заполнена
				СтрокаТаблицы.Параметры.СрокЭкспл  = Цел((ТекущийДокумент.Дата - СтрокаВыборки.ДатаНачалаЭксплуатации) / 2592000); //это в месяцах - по 30 дней
			КонецЕсли; 
			
			ТабличныйДокумент.Вывести(СтрокаТаблицы);
		КонецЕсли; 
		
		ТабличныйДокумент.Вывести(Подвал);
		
		// Секция № 2
		Шапка         = Макет.ПолучитьОбласть("Шапка2");
		СтрокаТаблицы = Макет.ПолучитьОбласть("Строка2");
		Подвал        = Макет.ПолучитьОбласть("Строка2П");
		
		ТабличныйДокумент.Вывести(Шапка);
		
		НомПП = 0;
		ИтогоСуммаЗатратРем = 0;
		ИтогоСуммаЗатрат = 0;
		
		Для каждого СтрокаВыборки Из Выборка Цикл
			
			СтрокаТаблицы.Параметры.Заполнить(СтрокаВыборки);
			
			Если СтрокаВыборки.ВидОбслуживания.ВидОбслуживанияТС = Перечисления.уатВидыОбслуживания.Дооборудование Или
				СтрокаВыборки.ВидОбслуживания.ВидОбслуживанияТС = Перечисления.уатВидыОбслуживания.Модернизация Тогда
				
				ИтогоСуммаЗатрат = ИтогоСуммаЗатрат + СтрокаВыборки.СуммаЗатрат;
				СтрокаТаблицы.Параметры.СуммаЗатратРем = 0;
				
			Иначе
				
				СтрокаТаблицы.Параметры.СуммаЗатратРем = СтрокаВыборки.СуммаЗатрат; // на ремонт, а не на модернизацию
				СтрокаТаблицы.Параметры.СуммаЗатрат = 0;          // на модернизацию
				ИтогоСуммаЗатратРем = ИтогоСуммаЗатратРем + СтрокаВыборки.СуммаЗатрат;
				
			КонецЕсли;
			
			НомПП = НомПП + 1;
			СтрокаТаблицы.Параметры.ПорядковыйНомер = НомПП;
			ТабличныйДокумент.Вывести(СтрокаТаблицы);
		КонецЦикла;
		
		Подвал = Макет.ПолучитьОбласть("Подвал");
		Подвал.Параметры.ИтогоСуммаЗатратРем=ИтогоСуммаЗатратРем;
		Подвал.Параметры.ИтогоСуммаЗатрат =ИтогоСуммаЗатрат;
		
		ТабличныйДокумент.Вывести(Подвал);
		
		// Печать оборотной стороны.
		ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		ОбластьПечати = Макет.ПолучитьОбласть("ОборотнаяСторона");
		ОбластьПечати.Параметры.ДатаДок = ТекущийДокумент.Дата;		
		ТабличныйДокумент.Вывести(ОбластьПечати);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ТекущийДокумент);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатнаяФорма()

Функция ПечатьРемонтныйЛист(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_РемонтныйЛист";
	
	ПервыйДокумент = Истина;
	
	Для Каждого ТекущийДокумент Из МассивОбъектов Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ТабличныйДокумент.ИмяПараметровПечати = "ПараметрыПечати_РемонтныйЛист_РемонтныйЛист";
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.уатРемонтныйЛист.ПФ_MXL_РемонтныйЛист");
		
		РежимВыводаКодаВДокументах = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ПользователиКлиентСервер.АвторизованныйПользователь(), 
			ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.РежимВыводаКодаВДокументах"));
		ТекстКодАртикул = РежимВыводаКодаВДокументах;

		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатРемонтныйЛист.Номер,
		|	уатРемонтныйЛист.Дата,
		|	уатРемонтныйЛист.ВидОбслуживания,
		|	уатРемонтныйЛист.ВидОбслуживания2,
		|	уатРемонтныйЛист.ВидОбслуживания3,
		|	уатРемонтныйЛист.ВыработкаПриТО,
		|	уатРемонтныйЛист.ВыработкаПриТО2,
		|	уатРемонтныйЛист.ВыработкаПриТО3,
		|	уатРемонтныйЛист.ДатаНачала,
		|	уатРемонтныйЛист.ДатаОкончания,
		|	уатРемонтныйЛист.ДоговорКонтрагента,
		|	уатРемонтныйЛист.Контрагент,
		|	уатРемонтныйЛист.Организация,
		|	уатРемонтныйЛист.Подразделение,
		|	уатРемонтныйЛист.ПричинаОбращения,
		|	уатРемонтныйЛист.СпособРемонта,
		|	уатРемонтныйЛист.ТС,
		|	уатРемонтныйЛист.УчитыватьНДС,
		|	уатРемонтныйЛист.СуммаВключаетНДС,
		|	уатРемонтныйЛист.ВалютаДокумента,
		|	уатРемонтныйЛист.СкладОтправитель,
		|	уатРемонтныйЛист.СкладПолучатель
		|ИЗ
		|	Документ.уатРемонтныйЛист КАК уатРемонтныйЛист
		|ГДЕ
		|	уатРемонтныйЛист.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатРемонтныйЛистРаботы.Ссылка,
		|	уатРемонтныйЛистРаботы.НомерСтроки,
		|	уатРемонтныйЛистРаботы.Работа,
		|	уатРемонтныйЛистРаботы.Работа."+ ТекстКодАртикул + " КАК НомерПоКаталогу,
		|	уатРемонтныйЛистРаботы.Количество,
		|	уатРемонтныйЛистРаботы.Цена,
		|	уатРемонтныйЛистРаботы.Сумма,
		|	уатРемонтныйЛистРаботы.СтавкаНДС,
		|	уатРемонтныйЛистРаботы.СуммаНДС,
		|	уатРемонтныйЛистРаботы.ЗаявкаНаРемонт,
		|	уатРемонтныйЛистРаботы.Ссылка.СпособРемонта КАК СпособРемонта
		|ИЗ
		|	Документ.уатРемонтныйЛист.Работы КАК уатРемонтныйЛистРаботы
		|ГДЕ
		|	уатРемонтныйЛистРаботы.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатРемонтныйЛистМатериалы.Ссылка,
		|	уатРемонтныйЛистМатериалы.НомерСтроки,
		|	уатРемонтныйЛистМатериалы.Номенклатура,
		|	уатРемонтныйЛистМатериалы.Номенклатура."+ ТекстКодАртикул + " КАК НомерПоКаталогу,
		|	уатРемонтныйЛистМатериалы.Количество,
		|	уатРемонтныйЛистМатериалы.ЕдиницаИзмерения,
		|	уатРемонтныйЛистМатериалы.Цена,
		|	уатРемонтныйЛистМатериалы.Сумма,
		|	уатРемонтныйЛистМатериалы.СтавкаНДС,
		|	уатРемонтныйЛистМатериалы.СуммаНДС,
		|	уатРемонтныйЛистМатериалы.Ссылка.СпособРемонта
		|ИЗ
		|	Документ.уатРемонтныйЛист.Материалы КАК уатРемонтныйЛистМатериалы
		|ГДЕ
		|	уатРемонтныйЛистМатериалы.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатРемонтныйЛистШины.НомерСтроки,
		|	уатРемонтныйЛистШины.СерияНоменклатуры.Модель КАК Модель,
		|	уатРемонтныйЛистШины.СерияНоменклатуры.СерийныйНомер КАК СерийныйНомер,
		|	уатРемонтныйЛистШины.Состояние
		|ИЗ
		|	Документ.уатРемонтныйЛист.Шины КАК уатРемонтныйЛистШины
		|ГДЕ
		|	уатРемонтныйЛистШины.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатРемонтныйЛистАккумуляторы.НомерСтроки,
		|	уатРемонтныйЛистАккумуляторы.СерияНоменклатуры.Модель КАК Модель,
		|	уатРемонтныйЛистАккумуляторы.СерияНоменклатуры.СерийныйНомер КАК СерийныйНомер,
		|	уатРемонтныйЛистАккумуляторы.Состояние
		|ИЗ
		|	Документ.уатРемонтныйЛист.Аккумуляторы КАК уатРемонтныйЛистАккумуляторы
		|ГДЕ
		|	уатРемонтныйЛистАккумуляторы.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатРемонтныйЛистПрочиеАгрегаты.НомерСтроки,
		|	уатРемонтныйЛистПрочиеАгрегаты.СерияНоменклатуры.Модель КАК Модель,
		|	уатРемонтныйЛистПрочиеАгрегаты.СерияНоменклатуры.СерийныйНомер КАК СерийныйНомер,
		|	уатРемонтныйЛистПрочиеАгрегаты.Состояние
		|ИЗ
		|	Документ.уатРемонтныйЛист.ПрочиеАгрегаты КАК уатРемонтныйЛистПрочиеАгрегаты
		|ГДЕ
		|	уатРемонтныйЛистПрочиеАгрегаты.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатРемонтныйЛистИсполнители.НомерСтроки,
		|	уатРемонтныйЛистИсполнители.Сотрудник,
		|	уатРемонтныйЛистИсполнители.Начало,
		|	уатРемонтныйЛистИсполнители.ВремяРаботы
		|ИЗ
		|	Документ.уатРемонтныйЛист.Исполнители КАК уатРемонтныйЛистИсполнители
		|ГДЕ
		|	уатРемонтныйЛистИсполнители.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатРемонтныйЛистЗарплата.НомерСтроки,
		|	уатРемонтныйЛистЗарплата.Сотрудник,
		|	уатРемонтныйЛистЗарплата.ВидНачисления,
		|	уатРемонтныйЛистЗарплата.Сумма
		|ИЗ
		|	Документ.уатРемонтныйЛист.Зарплата КАК уатРемонтныйЛистЗарплата
		|ГДЕ
		|	уатРемонтныйЛистЗарплата.Ссылка = &Ссылка";		
		Запрос.УстановитьПараметр("Ссылка", ТекущийДокумент);
		Шапка            = Запрос.ВыполнитьПакет()[0].Выгрузить();
		ТЗРаботы         = Запрос.ВыполнитьПакет()[1].Выгрузить();
		ТЗМатериалы      = Запрос.ВыполнитьПакет()[2].Выгрузить();
		ТЗШины           = Запрос.ВыполнитьПакет()[3].Выгрузить();
		ТЗАккумуляторы   = Запрос.ВыполнитьПакет()[4].Выгрузить();
		ТЗПрочиеАгрегаты = Запрос.ВыполнитьПакет()[5].Выгрузить();
		ТЗВремяРаботы    = Запрос.ВыполнитьПакет()[6].Выгрузить();
		ТЗЗарплата       = Запрос.ВыполнитьПакет()[7].Выгрузить();
		
		// Печать штрихкода
		Если уатЗащищенныеФункцииСервер_проф.ИспользоватьШтрихкодированиеОбъекта(ТекущийДокумент) Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокШтрихкод");
			уатЗащищенныеФункцииСервер_проф.ОтобразитьШКнаПФ(ОбластьМакета, ТекущийДокумент);
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок");
		ОбластьЗаголовок.Параметры.ТекстЗаголовка = уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ТекущийДокумент, НСтр("en='Repair list';ru='Ремонтный лист'"));
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		// шапка
		Для Каждого ТекСтрока Из Шапка Цикл
			Если ЗначениеЗаполнено(ТекСтрока.Подразделение) Тогда
				ОбластьОрганизацияПодразделение = Макет.ПолучитьОбласть("ОрганизацияПодразделение");
				ОбластьОрганизацияПодразделение.Параметры.Заполнить(ТекСтрока);
				СписокТребуемыхПараметров	= "НаименованиеДляПечатныхФорм";
				СведенияОбОбъекте			= уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(ТекущийДокумент.Организация);
				ОбластьОрганизацияПодразделение.Параметры.Организация		= уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(СведенияОбОбъекте, СписокТребуемыхПараметров);
				ТабличныйДокумент.Вывести(ОбластьОрганизацияПодразделение);
			Иначе
				ОбластьОрганизация = Макет.ПолучитьОбласть("Организация");
				ОбластьОрганизация.Параметры.Заполнить(ТекСтрока);
				СписокТребуемыхПараметров	= "НаименованиеДляПечатныхФорм";
				СведенияОбОбъекте			= уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(ТекущийДокумент.Организация);
				ОбластьОрганизация.Параметры.Организация		= уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(СведенияОбОбъекте, СписокТребуемыхПараметров);
				ТабличныйДокумент.Вывести(ОбластьОрганизация);    	
			КонецЕсли;
			ОбластьРеквизитыШапки1 = Макет.ПолучитьОбласть("РеквизитыШапки1");
			ОбластьРеквизитыШапки1.Параметры.ТС = ТекСтрока.ТС.Модель.Наименование + " " + Строка(ТекСтрока.ТС);
			ОбластьРеквизитыШапки1.Параметры.СпособРемонта = ТекСтрока.СпособРемонта;
			ТабличныйДокумент.Вывести(ОбластьРеквизитыШапки1 );
			Если ТекСтрока.СпособРемонта = Перечисления.уатСпособыРемонта.Автосервис Тогда
				ОбластьВАвтосервисе = Макет.ПолучитьОбласть("ВАвтосервисе");
				ОбластьВАвтосервисе.Параметры.Заполнить(ТекСтрока);
				ТабличныйДокумент.Вывести(ОбластьВАвтосервисе);
			Иначе
				ОбластьСобственнаяРемЗона = Макет.ПолучитьОбласть("СобственнаяРемЗона");
				ОбластьСобственнаяРемЗона.Параметры.Заполнить(ТекСтрока);
				ТабличныйДокумент.Вывести(ОбластьСобственнаяРемЗона);
			КонецЕсли;
			Если ЗначениеЗаполнено(ТекСтрока.ПричинаОбращения) Тогда
				ОбластьПричинаОбращения = Макет.ПолучитьОбласть("ПричинаОбращения");
				ОбластьПричинаОбращения.Параметры.Заполнить(ТекСтрока);
				ТабличныйДокумент.Вывести(ОбластьПричинаОбращения);
			КонецЕсли;
			ОбластьРеквизитыШапки2 = Макет.ПолучитьОбласть("РеквизитыШапки2");
			ОбластьРеквизитыШапки2.Параметры.Заполнить(ТекСтрока);
			ТабличныйДокумент.Вывести(ОбластьРеквизитыШапки2);
			Если ЗначениеЗаполнено(ТекСтрока.ВидОбслуживания2) Тогда
				ОбластьВидРемонта2 = Макет.ПолучитьОбласть("ВидРемонта2");
				ОбластьВидРемонта2.Параметры.Заполнить(ТекСтрока);
				ТабличныйДокумент.Вывести(ОбластьВидРемонта2);
			КонецЕсли;
			Если ЗначениеЗаполнено(ТекСтрока.ВидОбслуживания3) Тогда
				ОбластьВидРемонта3 = Макет.ПолучитьОбласть("ВидРемонта3");
				ОбластьВидРемонта3.Параметры.Заполнить(ТекСтрока);
				ТабличныйДокумент.Вывести(ОбластьВидРемонта3);
			КонецЕсли;
		КонецЦикла;
		
		// работы
		Если ТЗРаботы.Количество() И ТЗРаботы[0].СпособРемонта = Перечисления.уатСпособыРемонта.РемЗона Тогда
			ОбластьШапкаРаботыСклад = Макет.ПолучитьОбласть("ШапкаРаботыСклад");
			ТабличныйДокумент.Вывести(ОбластьШапкаРаботыСклад);
			Для Каждого ТекСтрока Из ТЗРаботы Цикл
				ОбластьСтрокаРаботыСклад = Макет.ПолучитьОбласть("СтрокаРаботыСклад");
				ОбластьСтрокаРаботыСклад.Параметры.Заполнить(ТекСтрока);
				Если ТекСтрока.НомерПоКаталогу = "" Тогда
					ОбластьСтрокаРаботыСклад.Параметры.НомерПоКаталогу = НСтр("en='-';ru='-'");
				Иначе
					ОбластьСтрокаРаботыСклад.Параметры.НомерПоКаталогу = ТекСтрока.НомерПоКаталогу;
				КонецЕсли;
				ТабличныйДокумент.Вывести(ОбластьСтрокаРаботыСклад);
			КонецЦикла;
			ОбластьПодвалРаботыСклад = Макет.ПолучитьОбласть("ПодвалРаботыСклад");
			ТабличныйДокумент.Вывести(ОбластьПодвалРаботыСклад);
		ИначеЕсли ТЗРаботы.Количество() И ТЗРаботы[0].СпособРемонта = Перечисления.уатСпособыРемонта.Автосервис Тогда
			ОбластьШапкаРаботыКонтрагент = Макет.ПолучитьОбласть("ШапкаРаботыКонтрагент");
			ТабличныйДокумент.Вывести(ОбластьШапкаРаботыКонтрагент);
			Сумма    = 0;
			СуммаНДС = 0;
			Для Каждого ТекСтрока Из ТЗРаботы Цикл
				ОбластьСтрокаРаботыКонтрагент = Макет.ПолучитьОбласть("СтрокаРаботыКонтрагент");
				ОбластьСтрокаРаботыКонтрагент.Параметры.Заполнить(ТекСтрока);
				Если ТекСтрока.НомерПоКаталогу = "" Тогда
					ОбластьСтрокаРаботыКонтрагент.Параметры.НомерПоКаталогу = НСтр("en='-';ru='-'");
				Иначе
					ОбластьСтрокаРаботыКонтрагент.Параметры.НомерПоКаталогу = ТекСтрока.НомерПоКаталогу;
				КонецЕсли;
				ТабличныйДокумент.Вывести(ОбластьСтрокаРаботыКонтрагент);
				Сумма    = Сумма    + ТекСтрока.Сумма;
				СуммаНДС = СуммаНДС + ТекСтрока.СуммаНДС;
			КонецЦикла;
			ОбластьПодвалРаботыКонтрагент = Макет.ПолучитьОбласть("ПодвалРаботыКонтрагент");
			ОбластьПодвалРаботыКонтрагент.Параметры.Всего = уатОбщегоНазначенияТиповые.уатФорматСумм(Сумма);
			ТабличныйДокумент.Вывести(ОбластьПодвалРаботыКонтрагент);
			Если Шапка[0].УчитыватьНДС Тогда
				ОбластьИтогоНДСРаботыКонтрагент = Макет.ПолучитьОбласть("ИтогоНДСРаботыКонтрагент");
				СтавкиНДСРаботы = ОбщегоНазначения.ВыгрузитьКолонку(ТЗРаботы, "СтавкаНДС", Истина); 
				Если СуммаНДС <> 0 Тогда
					ДанныеПечатиНДС = уатОбщегоНазначенияТиповые.уатДанныеПечатиИтоговНДС(СуммаНДС, СтавкиНДСРаботы, Шапка[0].СуммаВключаетНДС, ":"); 
					ОбластьИтогоНДСРаботыКонтрагент.Параметры.НДС = ДанныеПечатиНДС.НДС;
					ОбластьИтогоНДСРаботыКонтрагент.Параметры.ВсегоНДС = ДанныеПечатиНДС.ВсегоНДС;
				Иначе
					ДанныеПечатиНДС = уатОбщегоНазначенияТиповые.уатДанныеПечатиИтоговНДС(0, СтавкиНДСРаботы, Шапка[0].СуммаВключаетНДС, ":"); 
					ОбластьИтогоНДСРаботыКонтрагент.Параметры.НДС = ДанныеПечатиНДС.НДС;
					ОбластьИтогоНДСРаботыКонтрагент.Параметры.ВсегоНДС = ДанныеПечатиНДС.ВсегоНДС;
				КонецЕсли;
				ТабличныйДокумент.Вывести(ОбластьИтогоНДСРаботыКонтрагент);
			КонецЕсли;
			ОбластьСуммаПрописьюРаботыКонтрагент = Макет.ПолучитьОбласть("СуммаПрописьюРаботыКонтрагент");
			СуммаКПрописи                        = Сумма + ?(Шапка[0].УчитыватьНДС И НЕ Шапка[0].СуммаВключаетНДС, СуммаНДС, 0);
			ОбластьСуммаПрописьюРаботыКонтрагент.Параметры.ИтоговаяСтрока = "Всего работ " + ТЗРаботы.Количество()
			+ ", на сумму " + уатОбщегоНазначенияТиповые.уатФорматСумм(СуммаКПрописи, Шапка[0].ВалютаДокумента);
			ОбластьСуммаПрописьюРаботыКонтрагент.Параметры.СуммаПрописью  = уатОбщегоНазначенияТиповые.уатСформироватьСуммуПрописью(СуммаКПрописи, Шапка[0].ВалютаДокумента);
			ТабличныйДокумент.Вывести(ОбластьСуммаПрописьюРаботыКонтрагент);
		КонецЕсли;
		
		// материалы
		Если ТЗМатериалы.Количество() И ТЗМатериалы[0].СпособРемонта = Перечисления.уатСпособыРемонта.РемЗона Тогда
			ОбластьШапкаМатериалыСклад = Макет.ПолучитьОбласть("ШапкаМатериалыСклад");
			ТабличныйДокумент.Вывести(ОбластьШапкаМатериалыСклад);
			Для Каждого ТекСтрока Из ТЗМатериалы Цикл
				ОбластьСтрокаМатериалыСклад = Макет.ПолучитьОбласть("СтрокаМатериалыСклад");
				ОбластьСтрокаМатериалыСклад.Параметры.Заполнить(ТекСтрока);
				Если ТекСтрока.НомерПоКаталогу = "" Тогда
					ОбластьСтрокаМатериалыСклад.Параметры.НомерПоКаталогу = НСтр("en='-';ru='-'");
				Иначе
					ОбластьСтрокаМатериалыСклад.Параметры.НомерПоКаталогу = ТекСтрока.НомерПоКаталогу;
				КонецЕсли;
				ТабличныйДокумент.Вывести(ОбластьСтрокаМатериалыСклад);
			КонецЦикла;
			ОбластьПодвалМатериалыСклад = Макет.ПолучитьОбласть("ПодвалМатериалыСклад");
			ТабличныйДокумент.Вывести(ОбластьПодвалМатериалыСклад);
		ИначеЕсли ТЗМатериалы.Количество() И ТЗМатериалы[0].СпособРемонта = Перечисления.уатСпособыРемонта.Автосервис Тогда
			ОбластьШапкаМатериалыКонтрагент = Макет.ПолучитьОбласть("ШапкаМатериалыКонтрагент");
			ТабличныйДокумент.Вывести(ОбластьШапкаМатериалыКонтрагент);
			Сумма    = 0;
			СуммаНДС = 0;
			Для Каждого ТекСтрока Из ТЗМатериалы Цикл
				ОбластьСтрокаМатериалыКонтрагент = Макет.ПолучитьОбласть("СтрокаМатериалыКонтрагент");
				ОбластьСтрокаМатериалыКонтрагент.Параметры.Заполнить(ТекСтрока);
				Если ТекСтрока.НомерПоКаталогу = "" Тогда
					ОбластьСтрокаМатериалыКонтрагент.Параметры.НомерПоКаталогу = НСтр("en='-';ru='-'");
				Иначе
					ОбластьСтрокаМатериалыКонтрагент.Параметры.НомерПоКаталогу = ТекСтрока.НомерПоКаталогу;
				КонецЕсли;
				ТабличныйДокумент.Вывести(ОбластьСтрокаМатериалыКонтрагент);
				Сумма    = Сумма    + ТекСтрока.Сумма;
				СуммаНДС = СуммаНДС + ТекСтрока.СуммаНДС;
			КонецЦикла;
			ОбластьПодвалМатериалыКонтрагент = Макет.ПолучитьОбласть("ПодвалМатериалыКонтрагент");
			ОбластьПодвалМатериалыКонтрагент.Параметры.Всего = уатОбщегоНазначенияТиповые.уатФорматСумм(Сумма);
			ТабличныйДокумент.Вывести(ОбластьПодвалМатериалыКонтрагент);
			Если Шапка[0].УчитыватьНДС Тогда
				ОбластьИтогоНДСМатериалыКонтрагент = Макет.ПолучитьОбласть("ИтогоНДСМатериалыКонтрагент");
				СтавкиНДСМатериалы = ОбщегоНазначения.ВыгрузитьКолонку(ТЗМатериалы, "СтавкаНДС", Истина);
				Если СуммаНДС <> 0 Тогда
					ДанныеПечатиНДС = уатОбщегоНазначенияТиповые.уатДанныеПечатиИтоговНДС(СуммаНДС, СтавкиНДСМатериалы, Шапка[0].СуммаВключаетНДС, ":"); 
					ОбластьИтогоНДСМатериалыКонтрагент.Параметры.НДС = ДанныеПечатиНДС.НДС;
					ОбластьИтогоНДСМатериалыКонтрагент.Параметры.ВсегоНДС = ДанныеПечатиНДС.ВсегоНДС;
				Иначе
					ДанныеПечатиНДС = уатОбщегоНазначенияТиповые.уатДанныеПечатиИтоговНДС(СуммаНДС, СтавкиНДСМатериалы, Шапка[0].СуммаВключаетНДС, ":"); 
					ОбластьИтогоНДСМатериалыКонтрагент.Параметры.НДС = ДанныеПечатиНДС.НДС;
					ОбластьИтогоНДСМатериалыКонтрагент.Параметры.ВсегоНДС = ДанныеПечатиНДС.ВсегоНДС;
				КонецЕсли;
				ТабличныйДокумент.Вывести(ОбластьИтогоНДСМатериалыКонтрагент);
			КонецЕсли;
			ОбластьСуммаПрописьюМатериалыКонтрагент = Макет.ПолучитьОбласть("СуммаПрописьюМатериалыКонтрагент");
			СуммаКПрописи                           = Сумма + ?(Шапка[0].УчитыватьНДС И НЕ Шапка[0].СуммаВключаетНДС, СуммаНДС, 0);
			ОбластьСуммаПрописьюМатериалыКонтрагент.Параметры.ИтоговаяСтрока = "Всего наименований " + ТЗМатериалы.Количество()
			+ ", на сумму " + уатОбщегоНазначенияТиповые.уатФорматСумм(СуммаКПрописи, Шапка[0].ВалютаДокумента);
			ОбластьСуммаПрописьюМатериалыКонтрагент.Параметры.СуммаПрописью  = уатОбщегоНазначенияТиповые.уатСформироватьСуммуПрописью(СуммаКПрописи, Шапка[0].ВалютаДокумента);
			ТабличныйДокумент.Вывести(ОбластьСуммаПрописьюМатериалыКонтрагент);
		КонецЕсли;
		
		// шины
		Если ТЗШины.Количество() Тогда
			ОбластьШапкаШины = Макет.ПолучитьОбласть("ШапкаШины");
			ОбластьШапкаШины.Параметры.Заполнить(Шапка[0]);
			ТабличныйДокумент.Вывести(ОбластьШапкаШины);
			Для Каждого ТекСтрока Из ТЗШины Цикл
				ОбластьСтрокаШины = Макет.ПолучитьОбласть("СтрокаШины");
				ОбластьСтрокаШины.Параметры.Заполнить(ТекСтрока);
				ТабличныйДокумент.Вывести(ОбластьСтрокаШины);
			КонецЦикла;
			ОбластьПодвалШины = Макет.ПолучитьОбласть("ПодвалШины");
			ТабличныйДокумент.Вывести(ОбластьПодвалШины);
		КонецЕсли;
		
		// аккумуляторы		
		Если ТЗАккумуляторы.Количество() Тогда
			ОбластьШапкаАккумуляторы = Макет.ПолучитьОбласть("ШапкаАккумуляторы");
			ОбластьШапкаАккумуляторы.Параметры.Заполнить(Шапка[0]);
			ТабличныйДокумент.Вывести(ОбластьШапкаАккумуляторы);
			Для Каждого ТекСтрока Из ТЗАккумуляторы Цикл
				ОбластьСтрокаАккумуляторы = Макет.ПолучитьОбласть("СтрокаАккумуляторы");
				ОбластьСтрокаАккумуляторы.Параметры.Заполнить(ТекСтрока);
				ТабличныйДокумент.Вывести(ОбластьСтрокаАккумуляторы);
			КонецЦикла;
			ОбластьПодвалАккумуляторы = Макет.ПолучитьОбласть("ПодвалАккумуляторы");
			ТабличныйДокумент.Вывести(ОбластьПодвалАккумуляторы);
		КонецЕсли;
		
		// прочие агрегаты
		Если ТЗПрочиеАгрегаты.Количество() Тогда
			ОбластьШапкаПрочиеАгрегаты = Макет.ПолучитьОбласть("ШапкаПрочиеАгрегаты");
			ОбластьШапкаПрочиеАгрегаты.Параметры.Заполнить(Шапка[0]);
			ТабличныйДокумент.Вывести(ОбластьШапкаПрочиеАгрегаты);
			Для Каждого ТекСтрока Из ТЗПрочиеАгрегаты Цикл
				ОбластьСтрокаПрочиеАгрегаты = Макет.ПолучитьОбласть("СтрокаПрочиеАгрегаты");
				ОбластьСтрокаПрочиеАгрегаты.Параметры.Заполнить(ТекСтрока);
				ТабличныйДокумент.Вывести(ОбластьСтрокаПрочиеАгрегаты);
			КонецЦикла;
			ОбластьПодвалПрочиеАгрегаты = Макет.ПолучитьОбласть("ПодвалПрочиеАгрегаты");
			ТабличныйДокумент.Вывести(ОбластьПодвалПрочиеАгрегаты);
		КонецЕсли;		
		
		// исполнители
		Если ТЗВремяРаботы.Количество() Тогда
			ОбластьШапкаВремяРаботы = Макет.ПолучитьОбласть("ШапкаВремяРаботы");
			ТабличныйДокумент.Вывести(ОбластьШапкаВремяРаботы);
			Для Каждого ТекСтрока Из ТЗВремяРаботы Цикл
				ОбластьСтрокаВремяРаботы = Макет.ПолучитьОбласть("СтрокаВремяРаботы");
				ОбластьСтрокаВремяРаботы.Параметры.Заполнить(ТекСтрока);
				ТабличныйДокумент.Вывести(ОбластьСтрокаВремяРаботы);
			КонецЦикла;
			ОбластьПодвалВремяРаботы = Макет.ПолучитьОбласть("ПодвалВремяРаботы");
			ТабличныйДокумент.Вывести(ОбластьПодвалВремяРаботы);
		КонецЕсли;
		
		// зарплата
		Если ТЗЗарплата.Количество() Тогда
			ОбластьШапкаЗарплата = Макет.ПолучитьОбласть("ШапкаЗарплата");
			ТабличныйДокумент.Вывести(ОбластьШапкаЗарплата);
			Сумма = 0;
			Для Каждого ТекСтрока Из ТЗЗарплата Цикл
				ОбластьСтрокаЗарплата = Макет.ПолучитьОбласть("СтрокаЗарплата");
				ОбластьСтрокаЗарплата.Параметры.Заполнить(ТекСтрока);
				ТабличныйДокумент.Вывести(ОбластьСтрокаЗарплата);
				Сумма = Сумма + ТекСтрока.Сумма;
			КонецЦикла;			
			ОбластьПодвалЗарплата = Макет.ПолучитьОбласть("ПодвалЗарплата");
			ОбластьПодвалЗарплата.Параметры.Всего = уатОбщегоНазначенияТиповые.уатФорматСумм(Сумма);
			ТабличныйДокумент.Вывести(ОбластьПодвалЗарплата);
			ОбластьСуммаПрописьюЗарплата			              = Макет.ПолучитьОбласть("СуммаПрописьюЗарплата");
			мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
			ОбластьСуммаПрописьюЗарплата.Параметры.ИтоговаяСтрока = "Всего на сумму " + уатОбщегоНазначенияТиповые.уатФорматСумм(Сумма, мВалютаРегламентированногоУчета);
			ОбластьСуммаПрописьюЗарплата.Параметры.СуммаПрописью  = уатОбщегоНазначенияТиповые.уатСформироватьСуммуПрописью(Сумма, мВалютаРегламентированногоУчета);
			ТабличныйДокумент.Вывести(ОбластьСуммаПрописьюЗарплата);
			
		КонецЕсли;		
		
		Обл = Макет.ПолучитьОбласть("Подписи");
		Обл.Параметры.Мастер = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ТекущийДокумент.Мастер);
		ТабличныйДокумент.Вывести(Обл);
		
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
		ТабличныйДокумент.ПолеСлева = 0;
		ТабличныйДокумент.ПолеСправа = 0;
		ТабличныйДокумент.ИмяПараметровПечати = "РемонтныйЛист";
		
		ТабличныйДокумент.ОтображатьСетку = Ложь;
		ТабличныйДокумент.Защита = Ложь;
		ТабличныйДокумент.ТолькоПросмотр = Ложь;
		ТабличныйДокумент.ОтображатьЗаголовки = Ложь;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ТекущийДокумент);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатнаяФорма()

Функция ПечатьМ8(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_РемонтныйЛист";
	
	ПервыйДокумент = Истина;
	
	Для Каждого ТекущийДокумент Из МассивОбъектов Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатПартииТоваровНаСкладах.Номенклатура,
		|	СУММА(уатПартииТоваровНаСкладах.Количество) КАК Количество,
		|	СУММА(уатПартииТоваровНаСкладах.Стоимость) КАК Стоимость,
		|	СУММА(уатПартииТоваровНаСкладах.СтоимостьУпр) КАК СтоимостьУпр
		|ИЗ
		|	РегистрНакопления.уатПартииТоваровНаСкладах КАК уатПартииТоваровНаСкладах
		|ГДЕ
		|	уатПартииТоваровНаСкладах.Регистратор = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	уатПартииТоваровНаСкладах.Номенклатура";
		
		Запрос.УстановитьПараметр("Ссылка", ТекущийДокумент);
		ТаблицаЦенТоваров = Запрос.Выполнить().Выгрузить();
		
		ТабличныйДокумент.ИмяПараметровПечати = "ПараметрыПечати_РемонтныйЛист_М8";
		Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_уатМ8");

		ОбластьМакетаШапка = Макет.ПолучитьОбласть("Шапка");
		
		ОбластьМакетаЗаголовок = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ОбластьМакетаПодвал    = Макет.ПолучитьОбласть("Подвал");
		ОбластьМакета          = Макет.ПолучитьОбласть("Строка");
		
		// массив с двумя строками - для разбиения на страницы
		ВыводимыеОбласти = Новый Массив();
		ВыводимыеОбласти.Добавить(ОбластьМакета);
		ВыводимыеОбласти.Добавить(ОбластьМакетаПодвал);
		
		ШапкаВыведена = Ложь;
		
		ВысотаЗаголовка = ТабличныйДокумент.ВысотаТаблицы;
		Если ВысотаЗаголовка <> 0 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		СведенияОбОрганизации = уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(ТекущийДокумент.Организация, ТекущийДокумент.Дата);
		
		ТаблицаРемонта = ?(ТекущийДокумент.СпособРемонта = Перечисления.уатСпособыРемонта.РемЗона, "Материалы", "СобственныеМатериалы");
		
		Запрос = Новый Запрос();
		Запрос.Текст = СтрШаблон("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МАКСИМУМ(уатРемонтныйЛистМатериалы.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
		|	СУММА(уатРемонтныйЛистМатериалы.Количество) КАК Количество,
		|	уатРемонтныйЛистМатериалы.Номенклатура КАК Номенклатура,
		|	МИНИМУМ(уатРемонтныйЛистМатериалы.НомерСтроки) КАК НомерСтроки
		|ИЗ
		|	Документ.уатРемонтныйЛист.%1 КАК уатРемонтныйЛистМатериалы
		|ГДЕ
		|	уатРемонтныйЛистМатериалы.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	уатРемонтныйЛистМатериалы.Номенклатура
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки", ТаблицаРемонта);
		
		Запрос.УстановитьПараметр("Ссылка", ТекущийДокумент);
		ТаблицаМатериалы = Запрос.Выполнить().Выгрузить();
		
		ВыведеноСтрок      = 0;
		ВсегоСтрокДокумента = ТаблицаМатериалы.Количество();
		
		ЕстьВалУпрУчета = Метаданные.Константы.Найти("ВалютаУправленческогоУчета") <> Неопределено;
		Если ЕстьВалУпрУчета Тогда
			ВалютаУпрУчета = Константы.ВалютаУправленческогоУчета.Получить();
		КонецЕсли;
		
		Для Каждого ТекСтрока Из ТаблицаМатериалы Цикл
			
			ОбластьМакетаШапка.Параметры.Заполнить(ТекущийДокумент);
			
			ПечатьПрефиксовВключена = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ТекущийДокумент.Организация, ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ВыводитьПрефиксПриПечати"));
			Если ПечатьПрефиксовВключена Тогда
				ОбластьМакетаШапка.Параметры.Номер = ТекущийДокумент.Номер;
			Иначе
				ОбластьМакетаШапка.Параметры.Номер = уатОбщегоНазначенияКлиентСервер.НомерДокументаНаПечать(ТекущийДокумент.Номер, Истина, Истина);
			КонецЕсли;
			
			ОбластьМакетаШапка.Параметры.Заполнить(ТекСтрока);
			ОбластьМакетаШапка.Параметры.НоменклатурныйНомер      = ТекСтрока.Номенклатура.Код;
			ОбластьМакетаШапка.Параметры.ЕдиницаИзмеренияКод      = ТекСтрока.ЕдиницаИзмерения.Код;
			ОбластьМакетаШапка.Параметры.Лимит                    = ТекСтрока.Количество;
			ОбластьМакетаШапка.Параметры.ВсегоОтпущено            = ТекСтрока.Количество;
			ОбластьМакетаШапка.Параметры.ДатаСоставления          = ТекущийДокумент.Дата;
			ОбластьМакетаШапка.Параметры.ОрганизацияПредставление = уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм");
			ОбластьМакетаШапка.Параметры.КодОКПО                  = уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(СведенияОбОрганизации, "КодПоОКПО");
			
			Если НЕ ЕстьВалУпрУчета Тогда
				мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
				ОбластьМакетаШапка.Параметры.ТекстЦена  = "Цена(" + мВалютаРегламентированногоУчета + ")";
				ОбластьМакетаШапка.Параметры.ТекстСумма = "Сумма(" + мВалютаРегламентированногоУчета + ")";
				
				НайденнаяСтрока = ТаблицаЦенТоваров.Найти(ТекСтрока.Номенклатура, "Номенклатура");
				Если НЕ НайденнаяСтрока = Неопределено И НЕ НайденнаяСтрока.Количество = 0 Тогда
					ОбластьМакетаШапка.Параметры.Цена = НайденнаяСтрока.Стоимость / НайденнаяСтрока.Количество;
					ОбластьМакетаШапка.Параметры.Сумма = НайденнаяСтрока.Стоимость / НайденнаяСтрока.Количество * ТекСтрока.Количество;
				КонецЕсли;
				
			Иначе 
				ОбластьМакетаШапка.Параметры.ТекстЦена  = "Цена(" + ВалютаУпрУчета + ")";
				ОбластьМакетаШапка.Параметры.ТекстСумма = "Сумма(" + ВалютаУпрУчета + ")";
				
				НайденнаяСтрока = ТаблицаЦенТоваров.Найти(ТекСтрока.Номенклатура, "Номенклатура");
				Если НЕ НайденнаяСтрока = Неопределено И НЕ НайденнаяСтрока.Количество = 0 Тогда
					ОбластьМакетаШапка.Параметры.Цена = НайденнаяСтрока.СтоимостьУпр / НайденнаяСтрока.Количество;
					ОбластьМакетаШапка.Параметры.Сумма = НайденнаяСтрока.СтоимостьУпр / НайденнаяСтрока.Количество * ТекСтрока.Количество;
				КонецЕсли;
				
			КонецЕсли;
			
			ОбластьМакетаШапка.Параметры.МатериалНаименование = СокрЛП(ТекСтрока.Номенклатура);
			
			ТабличныйДокумент.Вывести(ОбластьМакетаШапка);
			ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовок);
			
			Если ТаблицаРемонта = "Материалы" Тогда
				НайденнаяСтрока = ТекущийДокумент.Материалы.НайтиСтроки(Новый Структура("Номенклатура",ТекСтрока.Номенклатура));
			Иначе
				НайденнаяСтрока = ТекущийДокумент.СобственныеМатериалы.НайтиСтроки(Новый Структура("Номенклатура",ТекСтрока.Номенклатура));
			КонецЕсли;
		
			ВсегоОстатокЛимита = ТекСтрока.Количество;
			Для Каждого Строка Из НайденнаяСтрока Цикл
				
				ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
				ОбластьСтрока.Параметры.ОтпущеноВозвращено = НСтр("en='Issued';ru='Отпущено'");
				ОбластьСтрока.Параметры.Дата = ТекущийДокумент.Дата;
				ОбластьСтрока.Параметры.Количество = Строка.Количество;
				ОбластьСтрока.Параметры.ОстатокЛимита = ВсегоОстатокЛимита - Строка.Количество;
				ВсегоОстатокЛимита = ОбластьСтрока.Параметры.ОстатокЛимита;
				
				ТабличныйДокумент.Вывести(ОбластьСтрока);
				
			КонецЦикла;
			
			ВыведеноСтрок = ВыведеноСтрок + 1;
			
			ВывестиПодвалЛиста = Ложь;
			Пока НЕ ВывестиПодвалЛиста Цикл
				
				// Проверим, уместится ли строка на странице или надо открывать новую страницу
				Попытка
					флПроверитьВыводТабличногоДокумента = ТабличныйДокумент.ПроверитьВывод(ВыводимыеОбласти);
				Исключение
					флПроверитьВыводТабличногоДокумента = Истина;
				КонецПопытки;
				
				ВывестиПодвалЛиста = Не флПроверитьВыводТабличногоДокумента;
				Если ВывестиПодвалЛиста Тогда
					ТабличныйДокумент.Вывести(ОбластьМакетаПодвал);
				Иначе
					ОбластьСтрока = ТабличныйДокумент.Вывести(ОбластьМакета);
					
					ТабличныйДокумент.Область(ОбластьСтрока.Верх,2).ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
					ТабличныйДокумент.Область(ОбластьСтрока.Верх,2).ГраницаСнизу = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
				КонецЕсли;
			КонецЦикла;
			
			Если ВыведеноСтрок<ВсегоСтрокДокумента Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
		КонецЦикла;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ТекущийДокумент);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатнаяФорма()

Функция ПечатьМ11(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_РемонтныйЛист";
	
	ПервыйДокумент = Истина;
	
	Для Каждого ТекущийДокумент Из МассивОбъектов Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатПартииТоваровНаСкладах.Номенклатура КАК Номенклатура,
		|	СУММА(уатПартииТоваровНаСкладах.Количество) КАК Количество,
		|	СУММА(уатПартииТоваровНаСкладах.Стоимость) КАК Стоимость
		|ИЗ
		|	РегистрНакопления.уатПартииТоваровНаСкладах КАК уатПартииТоваровНаСкладах
		|ГДЕ
		|	уатПартииТоваровНаСкладах.Регистратор = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	уатПартииТоваровНаСкладах.Номенклатура";
		
		Запрос.УстановитьПараметр("Ссылка", ТекущийДокумент);
		ТаблицаЦенТоваров = Запрос.Выполнить().Выгрузить();

		
		ТабличныйДокумент.ИмяПараметровПечати = "ПараметрыПечати_РемонтныйЛист_М11";
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.уатРемонтныйЛист.ПФ_MXL_М11");

		ОбластьМакетаШапка     = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакетаПодвал    = Макет.ПолучитьОбласть("Подвал");
		ОбластьМакета          = Макет.ПолучитьОбласть("Строка");
		
		// массив с двумя строками - для разбиения на страницы
		ВыводимыеОбласти = Новый Массив();
		ВыводимыеОбласти.Добавить(ОбластьМакета);
		ВыводимыеОбласти.Добавить(ОбластьМакетаПодвал);
		
		ШапкаВыведена = Ложь;
		
		ВысотаЗаголовка = ТабличныйДокумент.ВысотаТаблицы;
		Если ВысотаЗаголовка <> 0 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		СведенияОбОрганизации = уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(ТекущийДокумент.Организация, ТекущийДокумент.Дата);
		
		ОбластьМакетаШапка.Параметры.Заполнить(ТекущийДокумент);
		
		ПечатьПрефиксовВключена = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ТекущийДокумент.Организация, ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ВыводитьПрефиксПриПечати"));
		Если ПечатьПрефиксовВключена Тогда
			ОбластьМакетаШапка.Параметры.Номер = ТекущийДокумент.Номер;
		Иначе
			ОбластьМакетаШапка.Параметры.Номер = уатОбщегоНазначенияКлиентСервер.НомерДокументаНаПечать(ТекущийДокумент.Номер, Истина, Истина);
		КонецЕсли;
		
		ОбластьМакетаШапка.Параметры.ДатаСоставления          = Формат(ТекущийДокумент.Дата, "ДФ=dd.MM.yy");
		ОбластьМакетаШапка.Параметры.ПредставлениеОрганизации = уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(СведенияОбОрганизации, "НаименованиеДляПечатныхФорм");
		ОбластьМакетаШапка.Параметры.КодОКПО                  = уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(СведенияОбОрганизации, "КодПоОКПО");
		
		Если ТекущийДокумент.СпособРемонта = Перечисления.уатСпособыРемонта.РемЗона Тогда
			ОбластьМакетаШапка.Параметры.Склад = ТекущийДокумент.Контрагент;
			ТаблицаРемонта = "Материалы";
		Иначе
			ОбластьМакетаШапка.Параметры.Склад = ТекущийДокумент.СкладСобственныхМатериалов;
			ТаблицаРемонта = "СобственныеМатериалы";
		КонецЕсли;
		
		Запрос = Новый Запрос();
		Запрос.Текст = СтрШаблон("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	МАКСИМУМ(уатРемонтныйЛистМатериалы.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
		               |	СУММА(уатРемонтныйЛистМатериалы.Количество) КАК Количество,
		               |	уатРемонтныйЛистМатериалы.Номенклатура КАК Номенклатура,
		               |	МИНИМУМ(уатРемонтныйЛистМатериалы.НомерСтроки) КАК НомерСтроки
		               |ИЗ
		               |	Документ.уатРемонтныйЛист.%1 КАК уатРемонтныйЛистМатериалы
		               |ГДЕ
		               |	уатРемонтныйЛистМатериалы.Ссылка = &Ссылка
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	уатРемонтныйЛистМатериалы.Номенклатура
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	НомерСтроки", ТаблицаРемонта);
		
		Запрос.УстановитьПараметр("Ссылка", ТекущийДокумент);
		ТаблицаМатериалы = Запрос.Выполнить().Выгрузить();
		
		ТабличныйДокумент.Вывести(ОбластьМакетаШапка);
		
		Для Каждого ТекСтрока Из ТаблицаМатериалы Цикл
			
			ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
			ОбластьСтрока.Параметры.МатериалНаименование = СокрЛП(ТекСтрока.Номенклатура);
			ОбластьСтрока.Параметры.НоменклатурныйНомер  = ТекСтрока.Номенклатура.Код;
			ОбластьСтрока.Параметры.ЕдиницаИзмеренияКод  = ТекСтрока.ЕдиницаИзмерения.Код;
			ОбластьСтрока.Параметры.ЕдиницаИзмерения     = ТекСтрока.ЕдиницаИзмерения.Наименование;
			ОбластьСтрока.Параметры.Количество           = ТекСтрока.Количество;
			
			НайденнаяСтрока = ТаблицаЦенТоваров.Найти(ТекСтрока.Номенклатура, "Номенклатура");
			Если НЕ НайденнаяСтрока = Неопределено И НЕ НайденнаяСтрока.Количество = 0 Тогда
				ОбластьСтрока.Параметры.Цена  = НайденнаяСтрока.Стоимость / НайденнаяСтрока.Количество;
				ОбластьСтрока.Параметры.Сумма = НайденнаяСтрока.Стоимость / НайденнаяСтрока.Количество * ТекСтрока.Количество;
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьСтрока);
			
		КонецЦикла;
		
		ТабличныйДокумент.Вывести(ОбластьМакетаПодвал);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ТекущийДокумент);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатнаяФорма()

Функция ПечатьДефектнаяВедомость(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_ДефектнаяВедомость";
	
	ПервыйДокумент = Истина;
	
	Для Каждого ТекущийДокумент Из МассивОбъектов Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ТабличныйДокумент.ИмяПараметровПечати = "ПараметрыПечати_ДефектнаяВедомость";
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.уатРемонтныйЛист.ПФ_MXL_ДефектнаяВедомость");

		ОбластьМакетаЗаголовок      = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакетаРеквизитыШапки = Макет.ПолучитьОбласть("РеквизитыШапки");
		ОбластьМакетаШапка          = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакетаПодвал         = Макет.ПолучитьОбласть("Подвал");
		
		СведенияОбОрганизации = уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(ТекущийДокумент.Организация, ТекущийДокумент.Дата);
		
		// Печать штрихкода
		Если уатЗащищенныеФункцииСервер_проф.ИспользоватьШтрихкодированиеОбъекта(ТекущийДокумент) Тогда
			уатЗащищенныеФункцииСервер_проф.ОтобразитьШКнаПФ(ОбластьМакетаЗаголовок, ТекущийДокумент);
		КонецЕсли;
		
		//ОбластьМакетаШапка.Параметры.Заполнить(ТекущийДокумент);
		ОбластьМакетаЗаголовок.Параметры.ДатаДок     = Формат(ТекущийДокумент.Дата, "ДФ=dd.MM.yy");
		
		ПечатьПрефиксовВключена = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ТекущийДокумент.Организация, ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ВыводитьПрефиксПриПечати"));
		Если ПечатьПрефиксовВключена Тогда
			ОбластьМакетаЗаголовок.Параметры.НомерДок = ТекущийДокумент.Номер;
		Иначе
			ОбластьМакетаЗаголовок.Параметры.НомерДок = уатОбщегоНазначенияКлиентСервер.НомерДокументаНаПечать(ТекущийДокумент.Номер, Истина, Истина);
		КонецЕсли;
		
		СведенияОрганизация = уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(ТекущийДокумент.Организация, ТекущийДокумент.Дата);
		Руководители        = уатОбщегоНазначенияТиповые.уатОтветственныеЛицаОрганизаций(ТекущийДокумент.Организация, ТекущийДокумент.Дата);
		ОбластьМакетаЗаголовок.Параметры.Руководитель          = Руководители.Руководитель;
		ОбластьМакетаЗаголовок.Параметры.ДолжностьРуководителя = Руководители.РуководительДолжность;
		ОбластьМакетаЗаголовок.Параметры.Организация           = уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(СведенияОрганизация, "НаименованиеДляПечатныхФорм,ИНН,ОГРН,ЮридическийАдрес,Телефоны");
		ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовок);
		
		ОбластьМакетаРеквизитыШапки.Параметры.НаименованиеТС = ТекущийДокумент.ТС;
		ОбластьМакетаРеквизитыШапки.Параметры.МаркаТС        = ТекущийДокумент.ТС.Модель;
		ОбластьМакетаРеквизитыШапки.Параметры.ТранспортноеСредствоГосНомер = ТекущийДокумент.ТС.ГосударственныйНомер;
		ОбластьМакетаРеквизитыШапки.Параметры.МестоНахождениеТС = уатОбщегоНазначения.МестонахождениеТС(ТекущийДокумент.ТС, ТекущийДокумент.Дата).Подразделение;
		ТабличныйДокумент.Вывести(ОбластьМакетаРеквизитыШапки);
		ТабличныйДокумент.Вывести(ОбластьМакетаШапка);
		
		Для Каждого ТекСтрока Из ТекущийДокумент.Работы Цикл
			
			ОбластьСтрока = Макет.ПолучитьОбласть("СтрокаРаботы");
			ОбластьСтрока.Параметры.Неисправность = ТекСтрока.Неисправность;
			ОбластьСтрока.Параметры.Работа        = ТекСтрока.Работа;
			
			ТабличныйДокумент.Вывести(ОбластьСтрока);
			
		КонецЦикла;
		
		ОбластьМакетаПодвал.Параметры.Бухгалтер = Руководители.ГлавныйБухгалтер;
		ОбластьМакетаПодвал.Параметры.Механик   = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ТекущийДокумент.Мастер);;
		ТабличныйДокумент.Вывести(ОбластьМакетаПодвал);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ТекущийДокумент);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатнаяФорма()

// Процедура - Заполнить структуру получателей печатных форм
//
// Параметры:
//  СтруктураДанныхОбъектаПечати - Структура - Структура данных получателей печатной формы
//
Процедура ЗаполнитьСтруктуруПолучателейПечатныхФорм(СтруктураДанныхОбъектаПечати) Экспорт
	
	СтруктураДанныхОбъектаПечати.ОсновнойПолучатель = "Контрагент";
	 
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Контрагент");
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("КонтактноеЛицо");
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Грузоотправитель");
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Грузополучатель");
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли

#Область ОписаниеПеременных

Перем мВалютаРегламентированногоУчета Экспорт; // Переменная хранит значение валюты регламентированного учёта, полученное из константы.

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

// Процедура рассчитывает начисление з/п по рем. листу
//
Процедура РасчетЗП() Экспорт
	
	// не удаляем вручную введенные начисления
	мЗП = Зарплата.НайтиСтроки(Новый Структура("РучнойВвод", Ложь));
	Для мСч = 0 По мЗП.Количество() - 1 Цикл
		Зарплата.Удалить(мЗП[мСч]);
	КонецЦикла;	
	тчЗарплата = Зарплата.Выгрузить();
	
	Для Каждого ТекСтрока Из Исполнители Цикл
		мТарифы = уатРасчетыПоТарифам.НайтиТарифыЗП(ТекСтрока.Сотрудник, ТекСтрока.Начало, Новый Структура("Применение", 2));
		
		мГрузоподъемность 	= ТС.Модель.Грузоподъемность;
		мОбъемКузова        = ТС.Модель.ОбъемКузова;
		мКлассВодителя = КлассВодителя(ТекСтрока.Сотрудник);
		
		// ищем сдельные тарифы от выработки
		мТарифыСдельные = мТарифы.НайтиСтроки(Новый Структура("ВидНачисления",
		ПланыВидовРасчета.уатОсновныеНачисления.ОплатаЗаРемонт));
		
		Если мТарифыСдельные.Количество() = 0 Тогда
			ТекстНСТР = НСтр("en='For employee ""%1"" is not set a single rate with calculating type ""Pay for repair""!';ru='Для сотрудника ""%1"" не задано ни одного тарифа с видом начисления ""Оплата за ремонт""!'");
			ТекстНСТР = СтрШаблон(ТекстНСТР, ТекСтрока.Сотрудник);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		КонецЕсли;
		
		вхЗарплата = тчЗарплата.Скопировать();
		Для счТарифы = 0 По мТарифыСдельные.Количество() - 1 Цикл
			ТекСтрокаТарифыСдельные = мТарифыСдельные[счТарифы];
			СтруктураОбластьДействия = Новый Структура("ТС, ВидРемонта", ТС, ВидОбслуживания);
			СтруктураОбластьДействия.Вставить("КлассВодителя", мКлассВодителя);
			
			Если НЕ уатРасчетыПоТарифам.ТарифЗПвОбластиДействия(ТекСтрокаТарифыСдельные.ТарифЗП, Организация,
				СтруктураОбластьДействия) Тогда
				Продолжить;
			КонецЕсли;	
			
			// перевели в секунды
			мВремяВРемонте = ТекСтрока.ВремяРаботы - НачалоДня(ТекСтрока.ВремяРаботы);
			
			ЗначенияГруппировок = Новый Соответствие;
			ЗначенияГруппировок.Вставить(Перечисления.уатГруппировкиТарифов.ВремяРаботы, мВремяВРемонте / 3600);
			ЗначенияГруппировок.Вставить(Перечисления.уатГруппировкиТарифов.Грузоподъемность, мГрузоподъемность);
			ЗначенияГруппировок.Вставить(Перечисления.уатГруппировкиТарифов.ОбъемКузова, мОбъемКузова);
			
			мТариф = уатРасчетыПоТарифам.ЗначениеТарифаЗП(ТекСтрокаТарифыСдельные.ТарифЗП, ЗначенияГруппировок);
			
			мСумма 							= Окр(мВремяВРемонте  / 3600 * мТариф, 2);
			Если мСумма > 0 Тогда
				НоваяСтрока 				= Зарплата.Добавить();
				НоваяСтрока.ВидНачисления 	= ТекСтрокаТарифыСдельные.ВидНачисления;
				НоваяСтрока.Сотрудник 		= ТекСтрока.Сотрудник;
				НоваяСтрока.Сумма 			= мСумма;
				//НоваяСтрока.ПараметрВыработки = ТекСтрокаТарифыСдельные.ПараметрВыработки;
				НоваяСтрока.РучнойВвод 		= Ложь;
				тчНоваяСтрока               = вхЗарплата.Добавить();
				ЗаполнитьЗначенияСвойств(тчНоваяСтрока, НоваяСтрока);
			КонецЕсли;
			
		КонецЦикла;
		
		// затем ищем прочие надбавки
		ВидДоплаты = Перечисления.уатСпособыРасчетаОплатыТруда.ПроцентомОтВидовНачислений;
		РасчетДоплатЗП(ТекСтрока.Сотрудник, мТарифы, ВидДоплаты, вхЗарплата, мКлассВодителя);
		
	КонецЦикла;

	Зарплата.Свернуть("Сотрудник, ВидНачисления, РучнойВвод", "Сумма");
КонецПроцедуры //РасчетЗП

// Функция рассчитывает сумму списанную по текущей строке документа
//
// Параметры:
//  ТекСтрока	 - 	 - 
//  ТабДвижений	 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция РассчитатьСуммуСписания(ТекСтрока, ТабДвижений) Экспорт
	
	СтруктПоиска = Новый Структура;
	СтруктПоиска.Вставить( "Номенклатура", ТекСтрока.Номенклатура);
	
	НаборСтрок = ТабДвижений.НайтиСтроки(СтруктПоиска);
	КолСписать = ТекСтрока.Количество;
	Сумма      = 0;
	
	Для Каждого СтрокаДвиж Из НаборСтрок Цикл
		Если КолСписать >= СтрокаДвиж.Количество Тогда
			Сумма      = Сумма      + СтрокаДвиж.Стоимость;
			КолСписать = КолСписать - СтрокаДвиж.Количество;
			СтрокаДвиж.Стоимость  = 0;
			СтрокаДвиж.Количество = 0;
		Иначе
			Если Не СтрокаДвиж.Количество = 0 Тогда
				СумСписать = Окр( СтрокаДвиж.Стоимость * КолСписать / СтрокаДвиж.Количество, 2, 1);
				Сумма      = Сумма + СумСписать;
				СтрокаДвиж.Стоимость  = СтрокаДвиж.Стоимость  - СумСписать;
				СтрокаДвиж.Количество = СтрокаДвиж.Количество - КолСписать;
			Иначе
				Сумма = Сумма + СтрокаДвиж.Стоимость;
				СтрокаДвиж.Стоимость = 0;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Сумма;
	
КонецФункции // РассчитатьСуммуСписания()

#КонецОбласти


#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(Основание,СтандартнаяОбработка)
	
	уатОбщегоНазначенияСервер.Заполнить(ЭтотОбъект, Основание);
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.уатЗаявкаНаРемонт") Тогда
		
		Дата = ТекущаяДата();
		Организация = Основание.Организация;
		ТС = Основание.ТС;
		СпособРемонта		= Основание.СпособРемонта;
		Контрагент			= Основание.Контрагент;
		МестоРемонта		= Основание.МестоРемонта;
		ПричинаОбращения	= Основание.ПричинаОбращения;
		ВидОбслуживания		= Основание.ВидОбслуживания;
		ДатаНачала			= Основание.ДатаНачала;
		ДатаОкончания		= Основание.ДатаОкончания;
		ДокументОснование   = Основание;
		ЗаявкаНаРемонт	    = Основание;
		Цех                 = Основание.Цех;
		Мастер              = Основание.Мастер;
		ДоговорКонтрагента  = Основание.ДоговорКонтрагента;
		УчитыватьНДС        = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация,
				ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.УчитыватьНДС"));
		СуммаВключаетНДС    = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация,
				ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.СуммаВключаетНДС"));

		Для Каждого ТекСтрока из Основание.Работы Цикл
			НоваяСтрока				   = Работы.Добавить();
			НоваяСтрока.Работа 		   = ТекСтрока.Работа;
			НоваяСтрока.Количество 	   = ТекСтрока.Количество;
			НоваяСтрока.ЗаявкаНаРемонт = Основание;
			НоваяСтрока.Неисправность  = ТекСтрока.Неисправность;
		КонецЦикла;
		
		Для Каждого ТекСтрока из Основание.Материалы Цикл
			НоваяСтрока						= Материалы.Добавить();
			НоваяСтрока.Номенклатура		= ТекСтрока.Номенклатура;
			НоваяСтрока.Количество 			= ТекСтрока.Количество;
			НоваяСтрока.ЕдиницаИзмерения 	= ТекСтрока.ЕдиницаИзмерения;
		КонецЦикла;
		
		СтандартнаяОбработка = Ложь;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.уатДТП") Тогда
		
		Дата = ТекущаяДата();
		Организация = Основание.Организация;
		ТС = Основание.ТС;
		ПричинаОбращения  = НСтр("en='After road accident. Document number of road accident';ru='После ДТП. Номер документа ДТП'") +" " + Основание.Номер;
		ДокументОснование = Основание;
		Комментарий = Основание.Комментарий;
		
		СтандартнаяОбработка = Ложь;
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.уатСчетНаОплатуПоставщика") Тогда
		СпособРемонта = Перечисления.уатСпособыРемонта.Автосервис;
		Дата = ТекущаяДата();
		Организация             = Основание.Организация;
		Контрагент              = Основание.Контрагент;
		ДоговорКонтрагента      = Основание.ДоговорКонтрагента;
		СуммаДокумента          = Основание.СуммаДокумента;
		УчитыватьНДС        	= Основание.УчитыватьНДС; 
		СуммаВключаетНДС    	= Основание.СуммаВключаетНДС;
		Комментарий         	= НСтр("en='Filled on basis of';ru='Заполнен на основании'") + " " + Основание;
		ВалютаДокумента 		= Основание.ВалютаДокумента;
		КратностьВзаиморасчетов = Основание.КратностьВзаиморасчетов;
		КурсВзаиморасчетов 		= Основание.КурсВзаиморасчетов;
		ДокументОснование 		= Основание;
		Сделка					= Основание;
		
		ЗаполнитьТЧУслугиТовары(Основание);
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.уатПоступлениеТоваровУслуг") Тогда
		СпособРемонта      = Перечисления.уатСпособыРемонта.Автосервис;
		Контрагент         = Основание.Контрагент;
		ДоговорКонтрагента = Основание.ДоговорКонтрагента;
		
		Дата = ТекущаяДата();
		Организация             = Основание.Организация;
		УчитыватьНДС        	= Основание.УчитыватьНДС; 
		СуммаВключаетНДС    	= Основание.СуммаВключаетНДС;
		ВалютаДокумента 		= Основание.ВалютаДокумента;
		КратностьВзаиморасчетов = Основание.КратностьВзаиморасчетов;
		КурсВзаиморасчетов 		= Основание.КурсВзаиморасчетов;
		ДокументОснование 		= Основание;
		
		ЗаполнитьТЧУслугиТовары(Основание, Истина);
		
		НоваяСтрокаПоступление = ПоступленияМатериаловИУслуг.Добавить();
		НоваяСтрокаПоступление.ПоступлениеТоваровИУслуг = Основание;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаИсполнителейДляОтчета = "";
	тблИсполнители = Исполнители.Выгрузить().Скопировать();
	тблИсполнители.Свернуть("Сотрудник");
	Для Каждого Стр Из тблИсполнители Цикл
		СтрокаИсполнителейДляОтчета = СтрокаИсполнителейДляОтчета + ", " + Стр.Сотрудник.Наименование;
	КонецЦикла;
	ДлинаСтроки = СтрДлина(СтрокаИсполнителейДляОтчета);
	СтрокаИсполнителейДляОтчета = Прав(СтрокаИсполнителейДляОтчета, ДлинаСтроки - 2);
	
	РассчитатьСуммуДокумента(?(РежимЗаписи=РежимЗаписиДокумента.ОтменаПроведения, 2, 0));
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		уатЗащищенныеФункцииСервер_проф.ПолучитьСформироватьШтрихкодОбъекта(Ссылка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Если Выполнен тогда
		// проверка на наличие агрегатов на ТС
		тблСнимаемыеАгрегаты = СнимаемыеАгрегаты();
		Для Каждого ТекСтрокаАгрегат Из тблСнимаемыеАгрегаты Цикл
			Если ТекСтрокаАгрегат.Состояние = NULL ИЛИ ТекСтрокаАгрегат.Состояние = Перечисления.уатСостоянияАгрегатов.Снято Тогда
				Если ТекСтрокаАгрегат.ВидАгрегата = 0 Тогда
					ТекстНСТР = НСтр("en='Tire %1 is not installed on vehicle!';ru='Шина %1 не установлена на ТС!'");
				ИначеЕсли ТекСтрокаАгрегат.ВидАгрегата = 1 Тогда
					ТекстНСТР = НСтр("en='Battery %1 is not installed on vehicle!';ru='Аккумулятор %1 не установлен на ТС!'");
				Иначе
					ТекстНСТР = НСтр("en='Car part %1 is not installed on vehicle!';ru='Агрегат %1 не установлен на ТС!'");
				КонецЕсли;
				ТекстНСТР = СтрШаблон(ТекстНСТР, ТекСтрокаАгрегат.Агрегат);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР,,,, Отказ);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Инициализация дополнительных свойств для проведения документа.
	уатПроведение.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа.
	Документы.уатРемонтныйЛист.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	уатПроведение.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	уатПроведение.ОтразитьСостояниеТС(ДополнительныеСвойства, Движения, Отказ);
	
	Если ДополнительныеСвойства.Свойство("ДокументСогласован") Тогда
		ЭтотДокументСогласован = ДополнительныеСвойства.ДокументСогласован;
	Иначе
		ЭтотДокументСогласован = Ложь;
	КонецЕсли;
	Если (Выполнен И Не ТребуетСогласования)
		Или (Выполнен И ТребуетСогласования И (ЭтотДокументСогласован ИЛИ уатСогласованиеДокументовСервер.ДокументСогласован(Ссылка))) Тогда
		// Отражение в разделах учета.
		Если НЕ НеОтражаетсяВУчете Тогда
			уатПроведение.ОтразитьАгрегатыТС(ДополнительныеСвойства, Движения, Отказ);
			уатПроведение.ОтразитьОстаткиАгрегатов(ДополнительныеСвойства, Движения, Отказ);
			уатПроведение.ОтразитьРабочееВремяРаботниковОрганизаций(ДополнительныеСвойства, Движения, Отказ);
			уатПроведение.ОтразитьОсновныеНачисления(ДополнительныеСвойства, Движения, Отказ);
		КонецЕсли;
		уатПроведение.ОтразитьСчетчикиТС(ДополнительныеСвойства, Движения, Отказ);
		уатПроведение.ОтразитьПрохождениеТО(ДополнительныеСвойства, Движения, Отказ);
		Если НЕ НеОтражаетсяВУчете И уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация,
			ПланыВидовХарактеристик.уатПраваИНастройки.ВестиСкладскойУчетУАТ) Тогда
			
			уатПроведение.ОтразитьПартииТоваровНаСкладах(ДополнительныеСвойства, Движения, Отказ);
			Если ПолучитьФункциональнуюОпцию("уатАдресноеХранение") = ИСТИНА 
				И (СпособРемонта = Перечисления.уатСпособыРемонта.Автосервис И СкладСобственныхМатериалов.АдресноеХранение
				ИЛИ СпособРемонта = Перечисления.уатСпособыРемонта.РемЗона И Контрагент.АдресноеХранение) Тогда
				уатПроведение_проф.ОтразитьТоварыВЯчейках(ДополнительныеСвойства, Движения, Отказ);
			КонецЕсли;
			уатПроведение_проф.ОтразитьДатыДвиженияТоваровНаСкладах(ДополнительныеСвойства, Движения, Отказ);
		КонецЕсли;
		уатПроведение.ОтразитьНоменклатуруТС(ДополнительныеСвойства, Движения, Отказ);
		Если Справочники.уатПараметрыВыработки.ВремяВРемонте.ДействуетНаТС Тогда
			уатПроведение.ОтразитьВыработкуТС(ДополнительныеСвойства, Движения, Отказ);
		КонецЕсли;
		Если НЕ НеОтражаетсяВУчете И Справочники.уатПараметрыВыработки.ВремяВРемонте.ДействуетНаСотрудников Тогда
			уатПроведение.ОтразитьВыработкуСотрудников(ДополнительныеСвойства, Движения, Отказ);
		КонецЕсли;
		Если ЗначениеЗаполнено(ЗаявкаНаРемонт) Тогда
			уатПроведение.ОтразитьЗаявкиНаРемонт(ДополнительныеСвойства, Движения, Отказ);
		КонецЕсли;
		Если НЕ НеОтражаетсяВУчете И СпособРемонта = Перечисления.уатСпособыРемонта.Автосервис
			И НЕ ОплатаПодотчетнымЛицом Тогда
			уатПроведение_проф.ОтразитьВзаиморасчетыСКонтрагентами(ДополнительныеСвойства, Движения, Отказ);
		КонецЕсли;
		Если НЕ НеОтражаетсяВУчете И ПолучитьФункциональнуюОпцию("уатИспользоватьУчетДоходовИРасходов") = ИСТИНА Тогда
			уатПроведение.ОтразитьРасходы(ДополнительныеСвойства, Движения, Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТС) И ПроверитьКорректностьДвижений(Отказ) Тогда
		уатПроведение_проф.ОтразитьПланированиеРемонтов(ДополнительныеСвойства, Движения, Отказ);
	КонецЕсли;
	
	// Запись наборов записей.
	уатПроведение.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль возникновения отрицательного остатка.
	Документы.уатРемонтныйЛист.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);
	
	уатОбщегоНазначенияСервер.ВыполнитьУстановкуСтатусаЗаявкиНаРемонт(Ссылка, ДополнительныеСвойства, Отказ);
	
	Если НЕ Проведен ИЛИ уатПраваИНастройки.уатПраво("РедактированиеПроведенныхДокументов") Тогда	
		РассчитатьСуммуДокумента(1);
	КонецЕсли;
	
	уатУчетОригиналовПервичныхДокументов.СформироватьДвиженияРеестрДокументов(Ссылка);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа
	уатПроведение.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	уатПроведение.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	уатПроведение.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль
	Документы.уатРемонтныйЛист.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ, Истина);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	Дата      = ТекущаяДата();
	Выполнен = Ложь;
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Заголовок = уатОбщегоНазначенияТиповые.уатПредставлениеДокументаПриПроведении(ЭтотОбъект);
	
	Если Выполнен Тогда
		СтруктураПолей = Новый Структура("ДатаОкончания");
		уатОбщегоНазначенияТиповые.уатПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект,СтруктураПолей, Отказ, Заголовок);
		Если ДатаОкончания = ДатаНачала Тогда 
			СтрокаСообщения = НСтр("en='Start date and time of repair may not be equal to end date and time of repair !';ru='Дата и время начала ремонта не может равняться дате и времени окончания ремонта !'");
			уатОбщегоНазначенияТиповые.СообщитьОбОшибке(СтрокаСообщения, Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
	
	ЕстьУстанавливаемые = Ложь;
	ЕстьСнимаемые       = Ложь;
	Для Каждого ТекСтрока ИЗ Аккумуляторы Цикл
		ЕстьУстанавливаемые = ЕстьУстанавливаемые ИЛИ
								ТекСтрока.Состояние = Перечисления.уатСостоянияАгрегатов.УстановленоВРаботе;
		ЕстьСнимаемые       = ЕстьСнимаемые       ИЛИ ТекСтрока.Состояние = Перечисления.уатСостоянияАгрегатов.Снято;
	КонецЦикла;
	Если ЕстьУстанавливаемые И НЕ ЗначениеЗаполнено(СкладОтправитель) тогда
		СтрокаСообщения = НСтр("en='Not completed attribute value ""Warehouse sender"" on tab ""Batteries""!';ru='Не заполнено значение реквизита ""Склад отправитель"" на закладке ""Аккумуляторы""!'");
		уатОбщегоНазначенияТиповые.СообщитьОбОшибке(СтрокаСообщения, Отказ, Заголовок);
	КонецЕсли;
	Если ЕстьСнимаемые И НЕ ЗначениеЗаполнено(СкладПолучатель) тогда
		СтрокаСообщения = НСтр("en='Not completed attribute value ""Warehouse receiver"" on the tab ""Batteries""!';ru='Не заполнено значение реквизита ""Склад получатель"" на закладке ""Аккумуляторы""!'");
		уатОбщегоНазначенияТиповые.СообщитьОбОшибке(СтрокаСообщения, Отказ, Заголовок);
	КонецЕсли;
	
	ЕстьУстанавливаемые = Ложь;
	ЕстьСнимаемые       = Ложь;
	Для Каждого ТекСтрока ИЗ ПрочиеАгрегаты Цикл
		ЕстьУстанавливаемые = ЕстьУстанавливаемые ИЛИ
								ТекСтрока.Состояние = Перечисления.уатСостоянияАгрегатов.УстановленоВРаботе;
		ЕстьСнимаемые       = ЕстьСнимаемые       ИЛИ ТекСтрока.Состояние = Перечисления.уатСостоянияАгрегатов.Снято;
	КонецЦикла;
	Если ЕстьУстанавливаемые И НЕ ЗначениеЗаполнено(СкладОтправитель) тогда
		СтрокаСообщения = НСтр("en='Not completed attribute value ""Warehouse sender"" on tab ""Other car parts""!';ru='Не заполнено значение реквизита ""Склад отправитель"" на закладке ""Прочие агрегаты""!'");
		уатОбщегоНазначенияТиповые.СообщитьОбОшибке(СтрокаСообщения, Отказ, Заголовок);
	КонецЕсли;
	Если ЕстьСнимаемые И НЕ ЗначениеЗаполнено(СкладПолучатель) тогда
		СтрокаСообщения = НСтр("en='Not completed attribute value ""Warehouse receiver"" on tab ""Other car parts""!';ru='Не заполнено значение реквизита ""Склад получатель"" на закладке ""Прочие агрегаты""!'");
		уатОбщегоНазначенияТиповые.СообщитьОбОшибке(СтрокаСообщения, Отказ, Заголовок);
	КонецЕсли;
	
	Если СпособРемонта = Перечисления.уатСпособыРемонта.Автосервис тогда
		ПроверяемыеРеквизиты.Добавить("ВалютаДокумента");
	КонецЕсли;
	
	// дубли строк шин, аккумуляторов и прочих агрегатов
	Запрос = Новый Запрос();
	тблШины = Шины.Выгрузить().Скопировать();
	Запрос.УстановитьПараметр("Шины", тблШины);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	уатРемонтныйЛистШины.СерияНоменклатуры КАК СерияНоменклатуры,
	               |	уатРемонтныйЛистШины.Состояние КАК Состояние,
	               |	уатРемонтныйЛистШины.НомерСтроки КАК НомерСтроки
	               |ПОМЕСТИТЬ втШины
	               |ИЗ
	               |	&Шины КАК уатРемонтныйЛистШины
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	втГруппировки.СерияНоменклатуры КАК СерияНоменклатуры,
	               |	КОЛИЧЕСТВО(втГруппировки.Состояние) КАК Состояние
	               |ПОМЕСТИТЬ втГруппировкиШины
	               |ИЗ
	               |	втШины КАК втГруппировки
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	втГруппировки.СерияНоменклатуры
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	0 КАК ФлагСостояния,
	               |	втГруппировкиШины.СерияНоменклатуры КАК СерияНоменклатуры,
	               |	втШины.Состояние КАК Состояние,
	               |	NULL КАК НомерСтроки
	               |ИЗ
	               |	втГруппировкиШины КАК втГруппировкиШины
	               |		ЛЕВОЕ СОЕДИНЕНИЕ втШины КАК втШины
	               |		ПО втГруппировкиШины.СерияНоменклатуры = втШины.СерияНоменклатуры
	               |ГДЕ
	               |	втГруппировкиШины.Состояние = 1
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	1,
	               |	втГруппировкиШины.СерияНоменклатуры,
	               |	втШины.Состояние,
	               |	втШины.НомерСтроки
	               |ИЗ
	               |	втГруппировкиШины КАК втГруппировкиШины
	               |		ЛЕВОЕ СОЕДИНЕНИЕ втШины КАК втШины
	               |		ПО втГруппировкиШины.СерияНоменклатуры = втШины.СерияНоменклатуры
	               |ГДЕ
	               |	втГруппировкиШины.Состояние = 2
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	2,
	               |	втГруппировкиШины.СерияНоменклатуры,
	               |	"""",
	               |	NULL
	               |ИЗ
	               |	втГруппировкиШины КАК втГруппировкиШины
	               |ГДЕ
	               |	втГруппировкиШины.Состояние > 2
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	ФлагСостояния УБЫВ";
	Выборка = Запрос.Выполнить().Выбрать();
	ФлагДубльШины       = Ложь;
	ЕстьУстанавливаемые = Ложь;
	ЕстьСнимаемые       = Ложь;
	Пока Выборка.Следующий() Цикл
		Если Выборка.ФлагСостояния = 2 Тогда
			ФлагДубльШины = Истина;
			Прервать;
		ИначеЕсли Выборка.ФлагСостояния = 1 Тогда
			ТекСостояние = Выборка.Состояние;
			Выборка.Следующий();
			флЗапас = (ТекСостояние = Перечисления.уатСостоянияАгрегатов.Снято И Выборка.Состояние = Перечисления.уатСостоянияАгрегатов.УстановленоВЗапас)
				ИЛИ (Выборка.Состояние = Перечисления.уатСостоянияАгрегатов.Снято И ТекСостояние = Перечисления.уатСостоянияАгрегатов.УстановленоВЗапас);
			флПеремещение = (ТекСостояние = Перечисления.уатСостоянияАгрегатов.Снято И Выборка.Состояние = Перечисления.уатСостоянияАгрегатов.УстановленоВРаботе)
				ИЛИ (Выборка.Состояние = Перечисления.уатСостоянияАгрегатов.Снято И ТекСостояние = Перечисления.уатСостоянияАгрегатов.УстановленоВРаботе);
			Если НЕ(флЗапас ИЛИ флПеремещение) Тогда
				ФлагДубльШины = Истина;
				Прервать;
			КонецЕсли;
		ИначеЕсли Выборка.ФлагСостояния = 0 Тогда
			ЕстьУстанавливаемые = ЕстьУстанавливаемые ИЛИ Выборка.Состояние = Перечисления.уатСостоянияАгрегатов.УстановленоВРаботе;
			ЕстьСнимаемые       = ЕстьСнимаемые       ИЛИ Выборка.Состояние = Перечисления.уатСостоянияАгрегатов.Снято;
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
	Если ФлагДубльШины Тогда
		СтрокаСообщения = НСтр("en='In tabular section ""Tyres"" contains lines with duplicate values of products and services series!';ru='В табличной части ""Шины"" присутствуют строки с дублированием значения серии номенклатуры!'");
		уатОбщегоНазначенияТиповые.СообщитьОбОшибке(СтрокаСообщения, Отказ, Заголовок);
	КонецЕсли;
	
	Если ЕстьУстанавливаемые И НЕ ЗначениеЗаполнено(СкладОтправитель) тогда
		СтрокаСообщения = НСтр("en='Not completed requisite value ""Stock sender"" on the ""Bus""!';ru='Не заполнено значение реквизита ""Склад отправитель"" на закладке ""Шины""!'");
		уатОбщегоНазначенияТиповые.СообщитьОбОшибке(СтрокаСообщения, Отказ, Заголовок);
	КонецЕсли;
	Если ЕстьСнимаемые И НЕ ЗначениеЗаполнено(СкладПолучатель) тогда
		СтрокаСообщения = НСтр("en='Not completed attribute value ""Warehouse recipient"" on tab ""Tires""!';ru='Не заполнено значение реквизита ""Склад получатель"" на закладке ""Шины""!'");
		уатОбщегоНазначенияТиповые.СообщитьОбОшибке(СтрокаСообщения, Отказ, Заголовок);
	КонецЕсли;
	
	тблАккумСвернутая = Аккумуляторы.Выгрузить().Скопировать();
	тблАккумСвернутая.Свернуть("СерияНоменклатуры");
	Если тблАккумСвернутая.Количество() < Аккумуляторы.Количество() Тогда
		СтрокаСообщения = НСтр("en='In tabular section ""Batteries"" contains lines with duplicate values of products and services series!';ru='В табличной части ""Аккумуляторы"" присутствуют строки с дублированием значения серии номенклатуры!'");
		уатОбщегоНазначенияТиповые.СообщитьОбОшибке(СтрокаСообщения, Отказ, Заголовок);
	КонецЕсли;
	тблПрочиеСвернутая = ПрочиеАгрегаты.Выгрузить().Скопировать();
	тблПрочиеСвернутая.Свернуть("СерияНоменклатуры");
	Если тблПрочиеСвернутая.Количество() < ПрочиеАгрегаты.Количество() Тогда
		СтрокаСообщения = НСтр("en='In tabular section ""Other car parts"" contains lines with duplicate values of products and services series!';ru='В табличной части ""Прочие агрегаты"" присутствуют строки с дублированием значения серии номенклатуры!'");
		уатОбщегоНазначенияТиповые.СообщитьОбОшибке(СтрокаСообщения, Отказ, Заголовок);
	КонецЕсли;
	
	уатОбщегоНазначенияТиповые.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Материалы", , Отказ, Заголовок);
	
	Если СпособРемонта = Перечисления.уатСпособыРемонта.Автосервис И УчитыватьНДС Тогда
		ПроверяемыеРеквизиты.Добавить("Работы.СтавкаНДС");
		ПроверяемыеРеквизиты.Добавить("Материалы.СтавкаНДС");
	КонецЕсли;
	
	Если СпособРемонта = Перечисления.уатСпособыРемонта.Автосервис И СобственныеМатериалы.Количество() > 0 Тогда
		ПроверяемыеРеквизиты.Добавить("СкладСобственныхМатериалов");
	КонецЕсли;
	
	Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитСправочника("ВедениеВзаиморасчетов", "ДоговорыКонтрагентов")
		И (ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам
		ИЛИ ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоНакладным) Тогда
		ПроверяемыеРеквизиты.Добавить("Сделка");
	КонецЕсли;
	
	Если СпособРемонта = Перечисления.уатСпособыРемонта.Автосервис Тогда
		ПроверяемыеРеквизиты.Добавить("ДоговорКонтрагента");
	КонецЕсли;
	
	Если ОплатаПодотчетнымЛицом Тогда
		ПроверяемыеРеквизиты.Добавить("ПодотчетноеЛицо");
	КонецЕсли;
	
	уатОбщегоНазначения.ПроверкаЗаполненияПодразделения(Организация, Подразделение, Отказ, Заголовок);
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// Процедура рассчитывает доплаты (за ночные и прочие) к з/п по пут. листу
// и добавляет их в ТЧ Зарплата
// Параметры:
//	вхСотрудник - сотрудник, по которому рассчитываются доплаты
//	вхТарифыЗП - таблица тарифов, колонки [СпособРасчетаОплатыТруда, ВидНачисления, ТарифЗП]
//	вхВидДоплаты - СпособРасчетаОплатыТруда, по которому ведется расчет доплат
//
Процедура РасчетДоплатЗП(вхСотрудник, вхТарифыЗП, вхВидДоплаты, вхЗарплата, КлассВодителя)
	мТарифыДоплата = вхТарифыЗП.НайтиСтроки(Новый Структура("СпособРасчетаОплатыТруда", вхВидДоплаты));
	Для счТарифы = 0 По мТарифыДоплата.Количество() - 1 Цикл
		
		ТекСтрока = мТарифыДоплата[счТарифы];
		мВидНачисления = ТекСтрока.ВидНачисления;
		СтруктураОбластьДействия = Новый Структура("ТС", ТС);
		СтруктураОбластьДействия.Вставить("КлассВодителя", КлассВодителя);
		
		Если Не уатРасчетыПоТарифам.ТарифЗПвОбластиДействия(ТекСтрока.ТарифЗП,
				Организация, СтруктураОбластьДействия) Тогда
			Продолжить;
		КонецЕсли;
		
		мСумма = 0;
		
		Для Каждого ТекСтрокаИсточник Из мВидНачисления.БазовыеВидыРасчета Цикл
			мЗП = вхЗарплата.НайтиСтроки(Новый Структура("Сотрудник, ВидНачисления", вхСотрудник,
				ТекСтрокаИсточник.ВидРасчета));
			
			// просуммируем все начисления данного вида
			Для счЗП = 0 По мЗП.Количество() - 1 Цикл
				мСумма = мСумма + мЗП[счЗП].Сумма;
			КонецЦикла;	
		КонецЦикла;	
		
		мСуммаЗП = Окр(мСумма * ТекСтрока.ТарифЗП.Тариф / 100,2);
		
		Если мСуммаЗП > 0 Тогда
			НоваяСтрока 					= Зарплата.Добавить();
			НоваяСтрока.ВидНачисления 		= мВидНачисления;
			НоваяСтрока.Сотрудник 			= вхСотрудник;
			НоваяСтрока.Сумма 				= мСуммаЗП;
			НоваяСтрока.РучнойВвод 			= Ложь;
		КонецЕсли;	
	КонецЦикла;	
КонецПроцедуры

Функция КлассВодителя(вхСотрудник)
	СведенияВодитель = уатОбщегоНазначения.уатПрочитатьРеквизитыВодителя(вхСотрудник, Дата, Организация);
	Рез = ?(ЗначениеЗаполнено(СведенияВодитель.Класс), СведенияВодитель.Класс, 0);
	Возврат Рез;
КонецФункции

Функция СнимаемыеАгрегаты()
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатРемонтныйЛистШины.СерияНоменклатуры КАК СерияНоменклатуры,
	|	0 КАК ВидАгрегата
	|ПОМЕСТИТЬ втАгрегаты
	|ИЗ
	|	Документ.уатРемонтныйЛист.Шины КАК уатРемонтныйЛистШины
	|ГДЕ
	|	уатРемонтныйЛистШины.Состояние = ЗНАЧЕНИЕ(Перечисление.уатСостоянияАгрегатов.Снято)
	|	И уатРемонтныйЛистШины.Ссылка = &ДокументСсылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	уатРемонтныйЛистАккумуляторы.СерияНоменклатуры,
	|	1
	|ИЗ
	|	Документ.уатРемонтныйЛист.Аккумуляторы КАК уатРемонтныйЛистАккумуляторы
	|ГДЕ
	|	уатРемонтныйЛистАккумуляторы.Состояние = ЗНАЧЕНИЕ(Перечисление.уатСостоянияАгрегатов.Снято)
	|	И уатРемонтныйЛистАккумуляторы.Ссылка = &ДокументСсылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	уатРемонтныйЛистПрочиеАгрегаты.СерияНоменклатуры,
	|	2
	|ИЗ
	|	Документ.уатРемонтныйЛист.ПрочиеАгрегаты КАК уатРемонтныйЛистПрочиеАгрегаты
	|ГДЕ
	|	уатРемонтныйЛистПрочиеАгрегаты.Состояние = ЗНАЧЕНИЕ(Перечисление.уатСостоянияАгрегатов.Снято)
	|	И уатРемонтныйЛистПрочиеАгрегаты.Ссылка = &ДокументСсылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВложенныйЗапрос.СерияНоменклатуры КАК СерияНоменклатуры,
	|	уатАгрегатыТССрезПоследних.СостояниеАгрегата КАК СостояниеАгрегата
	|ПОМЕСТИТЬ втОстатки
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВложенныйЗапрос.СерияНоменклатуры КАК СерияНоменклатуры,
	|		ВложенныйЗапрос.Период КАК Период,
	|		МАКСИМУМ(уатАгрегатыТССрезПоследних.НомерСтроки) КАК НомерСтроки
	|	ИЗ
	|		(ВЫБРАТЬ
	|			уатАгрегатыТССрезПоследних.СерияНоменклатуры КАК СерияНоменклатуры,
	|			МАКСИМУМ(уатАгрегатыТССрезПоследних.Период) КАК Период
	|		ИЗ
	|			РегистрСведений.уатАгрегатыТС.СрезПоследних(
	|					&ДатаКон,
	|					СерияНоменклатуры В
	|						(ВЫБРАТЬ
	|							втАгрегаты.СерияНоменклатуры
	|						ИЗ
	|							втАгрегаты)) КАК уатАгрегатыТССрезПоследних
	|		
	|		СГРУППИРОВАТЬ ПО
	|			уатАгрегатыТССрезПоследних.СерияНоменклатуры) КАК ВложенныйЗапрос
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатАгрегатыТС.СрезПоследних(
	|					&ДатаКон,
	|					СерияНоменклатуры В
	|						(ВЫБРАТЬ
	|							втАгрегаты.СерияНоменклатуры
	|						ИЗ
	|							втАгрегаты)) КАК уатАгрегатыТССрезПоследних
	|			ПО ВложенныйЗапрос.СерияНоменклатуры = уатАгрегатыТССрезПоследних.СерияНоменклатуры
	|				И ВложенныйЗапрос.Период = уатАгрегатыТССрезПоследних.Период
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВложенныйЗапрос.СерияНоменклатуры,
	|		ВложенныйЗапрос.Период) КАК ВложенныйЗапрос
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатАгрегатыТС.СрезПоследних(
	|				&ДатаКон,
	|				СерияНоменклатуры В
	|					(ВЫБРАТЬ
	|						втАгрегаты.СерияНоменклатуры
	|					ИЗ
	|						втАгрегаты)) КАК уатАгрегатыТССрезПоследних
	|		ПО ВложенныйЗапрос.СерияНоменклатуры = уатАгрегатыТССрезПоследних.СерияНоменклатуры
	|			И ВложенныйЗапрос.Период = уатАгрегатыТССрезПоследних.Период
	|			И ВложенныйЗапрос.НомерСтроки = уатАгрегатыТССрезПоследних.НомерСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втАгрегаты.СерияНоменклатуры КАК Агрегат,
	|	втАгрегаты.ВидАгрегата КАК ВидАгрегата,
	|	втОстатки.СостояниеАгрегата КАК Состояние
	|ИЗ
	|	втАгрегаты КАК втАгрегаты
	|		ЛЕВОЕ СОЕДИНЕНИЕ втОстатки КАК втОстатки
	|		ПО втАгрегаты.СерияНоменклатуры = втОстатки.СерияНоменклатуры");
	Запрос.УстановитьПараметр("ДокументСсылка", Ссылка);
	Запрос.УстановитьПараметр("ДатаКон"       , ДатаОкончания);
	Возврат Запрос.Выполнить().Выгрузить();
КонецФункции

Функция ПроверитьКорректностьДвижений(Отказ)
	РезЦех           = Истина;
	РезМастер        = Истина;
	ЗапретПроведения = Ложь;
	
	КонтрольЗанятостиЦеха    = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, ПланыВидовХарактеристик.уатПраваИНастройки.ЗапретПроведенияРемонтногоЛистаПриЗанятостиЦеха);
	КонтрольЗанятостиМастера = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, ПланыВидовХарактеристик.уатПраваИНастройки.ЗапретПроведенияРемонтногоЛистаПриЗанятостиМастера);
	
	Если (КонтрольЗанятостиЦеха = Перечисления.уатВидыКонтроля.Запрещать
		ИЛИ КонтрольЗанятостиЦеха = Перечисления.уатВидыКонтроля.Предупреждать) И ЗначениеЗаполнено(Цех) Тогда
		
		ЗапретПроведения = КонтрольЗанятостиЦеха = Перечисления.уатВидыКонтроля.Запрещать;
		РезЦех = ПроверитьКорректностьДвиженийРесурса(Цех, ЗапретПроведения, Отказ);
		
	КонецЕсли;
	
	Если (КонтрольЗанятостиМастера = Перечисления.уатВидыКонтроля.Запрещать
		ИЛИ КонтрольЗанятостиМастера = Перечисления.уатВидыКонтроля.Предупреждать) И ЗначениеЗаполнено(Мастер) Тогда
		
		ЗапретПроведения = КонтрольЗанятостиМастера = Перечисления.уатВидыКонтроля.Запрещать;
		РезМастер = ПроверитьКорректностьДвиженийРесурса(Мастер, ЗапретПроведения, Отказ);
		
	КонецЕсли;
	
	Возврат (РезЦех И РезМастер);
	
КонецФункции

Процедура ЗаполнитьТЧУслугиТовары(Основание, флПоступлениеТоваров = Ложь)
	
	мсвУслуги = Основание.Услуги.Выгрузить().ВыгрузитьКолонку("Номенклатура");
	тблРаботы = Документы.уатРемонтныйЛист.СоответствиеРаботНоменклатуре(мсвУслуги);
	
	Для Каждого ТекСтрока Из Основание.Услуги Цикл
		СтрокаРабота = тблРаботы.Найти(ТекСтрока.Номенклатура, "Номенклатура");
		Если флПоступлениеТоваров Тогда
			Если СтрокаРабота <> Неопределено Тогда
				НоваяСтрока				 = Работы.Добавить();
				НоваяСтрока.Работа       = СтрокаРабота.Работа;
				НоваяСтрока.Количество 	 = ТекСтрока.Количество;
				НоваяСтрока.Цена 		 = ТекСтрока.Цена;
				НоваяСтрока.Сумма 		 = ТекСтрока.Сумма;
				НоваяСтрока.СтавкаНДС 	 = ТекСтрока.СтавкаНДС;
				НоваяСтрока.СуммаНДС 	 = ТекСтрока.СуммаНДС;
			Иначе
				Комментарий = Комментарий + Символы.ПС + СтрШаблон(НСтр("en='Unable to find work on vehicle repair on service: %1!';ru='Не удалось найти работу по ремонту ТС по услуге: %1!'"), ТекСтрока.Номенклатура);
			КонецЕсли;
		Иначе
			НоваяСтрока				 = Работы.Добавить();
			Если СтрокаРабота <> Неопределено Тогда
				НоваяСтрока.Работа   = СтрокаРабота.Работа;
			КонецЕсли;
			НоваяСтрока.Количество 	 = ТекСтрока.Количество;
			НоваяСтрока.Цена 		 = ТекСтрока.Цена;
			НоваяСтрока.Сумма 		 = ТекСтрока.Сумма;
			НоваяСтрока.СтавкаНДС 	 = ТекСтрока.СтавкаНДС;
			НоваяСтрока.СуммаНДС 	 = ТекСтрока.СуммаНДС;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекСтрока Из Основание.Товары Цикл
		НоваяСтрока					 = Материалы.Добавить();
		НоваяСтрока.Номенклатура	 = ТекСтрока.Номенклатура;
		НоваяСтрока.ЕдиницаИзмерения = ТекСтрока.ЕдиницаИзмерения;
		НоваяСтрока.Количество 		 = ТекСтрока.Количество;
		//Если НЕ флПоступлениеТоваров Тогда
			НоваяСтрока.Цена 			 = ТекСтрока.Цена;
			НоваяСтрока.Сумма 			 = ТекСтрока.Сумма;
			НоваяСтрока.СтавкаНДС 		 = ТекСтрока.СтавкаНДС;
			НоваяСтрока.СуммаНДС 	 	 = ТекСтрока.СуммаНДС;
		//КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПроверитьКорректностьДвиженийРесурса(Ресурс, ЗапретПроведения, Отказ)
	
	Рез = Истина;
	
	ПолеРесурса = ?(ТипЗнч(Ресурс) = Тип("СправочникСсылка.уатЦеха"), "Ресурс1", "Ресурс2");
	Запрос       = Новый Запрос();
	Запрос.Текст = СтрШаблон("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатГрафикРаботыРесурсов.ДокументПланирования КАК Документ,
	|	уатГрафикРаботыРесурсов.Дата КАК Дата,
	|	уатГрафикРаботыРесурсов.НачалоРабочегоВремени КАК НачалоРабочегоВремени,
	|	уатГрафикРаботыРесурсов.КонецРабочегоВремени КАК КонецРабочегоВремени
	|ИЗ
	|	РегистрСведений.уатГрафикРаботыРесурсов КАК уатГрафикРаботыРесурсов
	|ГДЕ
	|	уатГрафикРаботыРесурсов.ДокументПланирования ССЫЛКА Документ.уатРемонтныйЛист
	|	И уатГрафикРаботыРесурсов.ДокументПланирования <> &ДокументПланирования
	|	И уатГрафикРаботыРесурсов.%1 = &Ресурс
	|	И уатГрафикРаботыРесурсов.Дата МЕЖДУ &ДатаНач И &ДатаКон", ПолеРесурса);
	Запрос.УстановитьПараметр("Ресурс", Ресурс);
	Запрос.УстановитьПараметр("ДокументПланирования", Ссылка);
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ДатаНачала));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаОкончания));
	тблПересечений = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ТекСтрокаПересечение Из тблПересечений Цикл
		Если НачалоДня(ДатаНачала) = НачалоДня(ДатаОкончания) Тогда // Начало окончание в одном дне
			НачалоРабочегоВремени_ = '00010101' + (ДатаНачала - НачалоДня(ДатаНачала));
			КонецРабочегоВремени_  = '00010101' + (ДатаОкончания - НачалоДня(ДатаОкончания));
			Если НачалоРабочегоВремени_ <= ТекСтрокаПересечение.КонецРабочегоВремени И КонецРабочегоВремени_ >= ТекСтрокаПересечение.НачалоРабочегоВремени Тогда
				Если ЗапретПроведения Тогда
					Рез   = Ложь;
					Отказ = Истина;
				КонецЕсли;
				
				Если ПолеРесурса   = "Ресурс1" Тогда
					ТекстНСТР = НСтр("en='Found the intersection in the work schedule resource: start ""%1"", end ""%2"","
					"workshop ""%3"", document ""%4""';ru='Обнаружены пересечения в графике работы ресурса: начало ""%1"", окончание ""%2"","
					"цех ""%3"", документ ""%4""'");
					ТекстНСТР = СтрШаблон(ТекстНСТР,
					Формат(ДатаНачала, "ДФ='дд.ММ.гггг ЧЧ:мм'"),
					Формат(ДатаОкончания, "ДФ='дд.ММ.гггг ЧЧ:мм'"),
					Цех, ТекСтрокаПересечение.Документ);
				Иначе
					ТекстНСТР = НСтр("en='Found the intersection in the work schedule resource: start ""%1"", end ""%2"","
					"master ""%3"", document ""%4""';ru='Обнаружены пересечения в графике работы ресурса: начало ""%1"", окончание ""%2"","
					"мастер ""%3"", документ ""%4""'");
					ТекстНСТР = СтрШаблон(ТекстНСТР,
					Формат(ДатаНачала, "ДФ='дд.ММ.гггг ЧЧ:мм'"),
					Формат(ДатаОкончания, "ДФ='дд.ММ.гггг ЧЧ:мм'"),
					Мастер, ТекСтрокаПересечение.Документ);
				КонецЕсли;
					
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
				Прервать;
			КонецЕсли;
			
		Иначе
			Разница = (НачалоДня(ДатаОкончания) - НачалоДня(ДатаНачала))/60/60/24;
			ТекущийДень = НачалоДня(ДатаНачала);
			Пока Разница >= 0 Цикл
				Дата_ = ТекущийДень;
				
				// Установим НачалоРабочегоВремени 
				Если ТекущийДень = НачалоДня(ДатаНачала) Тогда
					НачалоРабочегоВремени_ = '00010101' + (ДатаНачала - НачалоДня(ДатаНачала));
				Иначе
					НачалоРабочегоВремени_ = '00010101';
				КонецЕсли;
				// Установим КонецРабочегоВремени
				Если ТекущийДень = НачалоДня(ДатаОкончания) Тогда
					КонецРабочегоВремени_ = '00010101' + (ДатаОкончания - НачалоДня(ДатаОкончания));
				Иначе
					КонецРабочегоВремени_ = '00010101235959';
				КонецЕсли;
				
				Если Дата_ = ТекСтрокаПересечение.Дата И НачалоРабочегоВремени_ <= ТекСтрокаПересечение.КонецРабочегоВремени И КонецРабочегоВремени_ >= ТекСтрокаПересечение.НачалоРабочегоВремени Тогда
					Если ЗапретПроведения Тогда
						Рез   = Ложь;
						Отказ = Истина;
					КонецЕсли;
					
					Если ПолеРесурса   = "Ресурс1" Тогда
						ТекстНСТР = НСтр("en='Found the intersection in the work schedule resource: start ""%1"", end ""%2"","
						"workshop ""%3"", document ""%4""';ru='Обнаружены пересечения в графике работы ресурса: начало ""%1"", окончание ""%2"","
						"цех ""%3"", документ ""%4""'");
						ТекстНСТР = СтрШаблон(ТекстНСТР,
						Формат(Дата_ + (НачалоРабочегоВремени_ - '00010101'), "ДФ='дд.ММ.гггг ЧЧ:мм'"),
						Формат(Дата_ + (КонецРабочегоВремени_ - '00010101'), "ДФ='дд.ММ.гггг ЧЧ:мм'"),
						Цех, ТекСтрокаПересечение.Документ);
					Иначе
						ТекстНСТР = НСтр("en='Found the intersection in the work schedule resource: start ""%1"", end ""%2"","
						"master ""%3"", document ""%4""';ru='Обнаружены пересечения в графике работы ресурса: начало ""%1"", окончание ""%2"","
						"мастер ""%3"", документ ""%4""'");
						ТекстНСТР = СтрШаблон(ТекстНСТР,
						Формат(Дата_ + (НачалоРабочегоВремени_ - '00010101'), "ДФ='дд.ММ.гггг ЧЧ:мм'"),
						Формат(Дата_ + (КонецРабочегоВремени_ - '00010101'), "ДФ='дд.ММ.гггг ЧЧ:мм'"),
						Мастер, ТекСтрокаПересечение.Документ);
					КонецЕсли;
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
					Прервать;
				КонецЕсли;
				
				ТекущийДень = ТекущийДень + 3600*24;
				Разница = Разница - 1;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Рез;
	
КонецФункции

Процедура РассчитатьСуммуДокумента(РежимЗаписи = 0)
	// РежимЗаписи: 0 - запись, 1 - проведение, 2 - отмена проведения
	
	Если СпособРемонта = Перечисления.уатСпособыРемонта.Автосервис Тогда
		Если РежимЗаписи = 0 Тогда
			// сумма документа здесь в валюте документа
			СуммаДокумента = Материалы.Итог("Сумма");
			СуммаДокумента = СуммаДокумента + Работы.Итог("Сумма");
			Если УчитыватьНДС И НЕ СуммаВключаетНДС Тогда
				СуммаДокумента = СуммаДокумента + Материалы.Итог("СуммаНДС");
				СуммаДокумента = СуммаДокумента + Работы.Итог("СуммаНДС");
			КонецЕсли;
		КонецЕсли;
	Иначе
		Если РежимЗаписи = 1 Тогда
			// Валюты документа нет, используем валюту регл. учета
			// для рем. зоны расчет суммы делаем только в обработчике ОбработкаПроведения
			НЗПартии = Движения.уатПартииТоваровНаСкладах;
			тблСписания = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПартии;
			СуммаДокумента = тблСписания.Итог("Стоимость") + тблСписания.Итог("СуммаНДС");
		ИначеЕсли РежимЗаписи = 2 Тогда
			СуммаДокумента = 0;
		КонецЕсли;
	КонецЕсли;
	
	// при проведении нужно дополнительно записать объект
	Если РежимЗаписи = 1 И СпособРемонта = Перечисления.уатСпособыРемонта.РемЗона Тогда
		Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область Инициализация

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

#КонецОбласти

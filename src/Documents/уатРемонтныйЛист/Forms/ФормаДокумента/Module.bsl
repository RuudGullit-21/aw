
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	уатЗащищенныеФункцииСервер.уатДокументФормаЭлементаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, Объект, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.УчетОригиналовПервчиныхДокументов
	УчетОригиналовПервичныхДокументов.ПриСозданииНаСервере_ФормаДокумента(ЭтотОбъект, Элементы.ГруппаУчетПервичныхДокументов);
	уатУчетОригиналовПервичныхДокументов.ОтобразитьДатуПоследнегоИзмененияПервичныхДокументов(ЭтотОбъект, Элементы.ГруппаУчетПервичныхДокументов);
	// Конец СтандартныеПодсистемы.УчетОригиналовПервчиныхДокументов

	Если Объект.Ссылка.Пустая() Тогда
		ДатаДокумента = Объект.Дата;
		Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
			ДатаДокумента = ТекущаяДата();
		КонецЕсли;
		
		Объект.СпособРемонта = ?(Объект.СпособРемонта.Пустая(), 
								Перечисления.уатСпособыРемонта.РемЗона, Объект.СпособРемонта);
		Объект.ДатаНачала    = ?(Объект.ДатаНачала = '00010101', НачалоДня(ДатаДокумента) + 
								(уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
								ПланыВидовХарактеристик.уатПраваИНастройки.ВремяНачалаРЛ) - '00010101'), Объект.ДатаНачала);
		Объект.ДатаОкончания = ?(Объект.ДатаОкончания = '00010101', НачалоДня(ДатаДокумента) +
								(уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
								ПланыВидовХарактеристик.уатПраваИНастройки.ВремяОкончанияРЛ) - '00010101'), Объект.ДатаОкончания);
								
		Если Объект.СпособРемонта = Перечисления.уатСпособыРемонта.РемЗона
			И ТипЗнч(Объект.Контрагент) <> Тип("СправочникСсылка.Склады") Тогда
			
			Объект.Контрагент = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
				ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнойСклад");
		КонецЕсли;
			
		Если Объект.СпособРемонта <> Перечисления.уатСпособыРемонта.Автосервис
			И ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
			Объект.ДоговорКонтрагента = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	// Инициализация реквизитов формы.	
	Если Параметры.Свойство("СозданиеИзАРММеханика") Тогда
		Если Параметры.Свойство("ТС") Тогда
			Объект.ТС = Параметры.ТС;
		КонецЕсли;
		Если Параметры.Свойство("ВидОбслуживания") Тогда
			Объект.ВидОбслуживания = Параметры.ВидОбслуживания;
			МассивРабот = уатОбщегоНазначения.НайтиРаботыПоОбслуживанию(Объект.ВидОбслуживания, Объект.ТС);
			ДобавитьРаботуПоОбслуживаниюЗаполнение(Объект.ТС, МассивРабот);
		КонецЕсли;
	КонецЕсли;
	
	ИспользуетсяУчетЗатрат = ПолучитьФункциональнуюОпцию("уатИспользоватьУчетДоходовИРасходов");

	Если Объект.Ссылка.Пустая() Тогда
		Если ЗначениеЗаполнено(Объект.ВидОбслуживания) Тогда
			НаработкаПослеТО(1);
			ВидимостьЭлементовТО(1);
			Элементы.ВыработкаПриТО.ТолькоПросмотр = Не ЗначениеЗаполнено(Объект.ПараметрВыработки);
		КонецЕсли;
		
		Если ИспользуетсяУчетЗатрат И НЕ ЗначениеЗаполнено(Объект.ПланЗатрат)
			И НЕ уатОбщегоНазначения.уатНайтиПланЗатрат(Объект.ПланЗатрат, Объект.Организация, Объект.ТС) Тогда 
			
			ТекстНСТР = НСтр("en='Cost plan is not found!';ru='Не найден план затрат!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.МестоРемонта) Тогда
		КонтрагентПриИзмененииСервер();
		Если Элементы.МестоРемонта.СписокВыбора.НайтиПоЗначению(Объект.МестоРемонта) = Неопределено Тогда
			Элементы.МестоРемонта.СписокВыбора.Добавить(Объект.МестоРемонта);
		КонецЕсли;
	КонецЕсли;
		
	мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Контрагент = Объект.Контрагент;
	Если НЕ Объект.Ссылка.Пустая() ИЛИ НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Договор = Объект.ДоговорКонтрагента;
	КонецЕсли;
	ВалютаРасчетов = Объект.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	НациональнаяВалюта = мВалютаРегламентированногоУчета;
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата,
		Новый Структура("Валюта", НациональнаяВалюта));
	КурсНациональнаяВалюта = СтруктураПоВалюте.Курс;
	КратностьНациональнаяВалюта = СтруктураПоВалюте.Кратность;
	
	флНаличиеСпидометра = НаличиеСпидометра(Объект.ТС);
	
	ОбновитьВсегоВТЧСервер();
	
	ОрганизацияПередИзменением = Объект.Организация;
	
	уатОбщегоНазначенияСервер.НастроитьПолеЕдиницыИзмерения(ЭтотОбъект, "Материалы");
	уатОбщегоНазначенияСервер.НастроитьПолеЕдиницыИзмерения(ЭтотОбъект, "СобственныеМатериалы");
	уатОбщегоНазначенияСервер.НастроитьПолеПодразделение(Элементы.Подразделение, "Объект.Организация");
	уатОбщегоНазначенияСервер.НастроитьПолеДоговорКонтрагента(Элементы.ДоговорКонтрагента, "Объект.Организация", "Объект.Контрагент", "СПоставщиком");
	
	ВидимостьЭлементовТО();
	
	// уатСогласованиеДокументов
	ИмяДокументаСогласование = "РемонтныйЛист";
	уатСогласованиеДокументовСервер.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец уатСогласованиеДокументов
	
	//ПодключаемоеОборудование
	уатОбщегоНазначения_проф.НастроитьПодключаемоеОборудование(ЭтотОбъект);
	//Конец ПодключаемоеОборудование
	
	// уатУправлениеАвтотранспортом.МодификацияКонфигурации
	уатМодификацияКонфигурацииПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	// Конец уатУправлениеАвтотранспортом.МодификацияКонфигурации
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// уатУправлениеАвтотранспортом.МодификацияКонфигурации
	уатМодификацияКонфигурацииКлиентПереопределяемый.ПриОткрытии(ЭтотОбъект, Отказ);
	// Конец уатУправлениеАвтотранспортом.МодификацияКонфигурации
	
	уатЗащищенныеФункцииКлиент.уатДокументФормаЭлементаПриОткрытии(Отказ, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	//ПодключаемоеОборудование
	уатОбщегоНазначенияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(ЭтотОбъект);
	//Конец ПодключаемоеОборудование
	
	Если Объект.Ссылка.Пустая() Тогда
		Если Объект.Работы.Количество() > 0 И Объект.УчитыватьНДС Тогда
			Для Каждого ТекСтрока Из Объект.Работы Цикл
				Если НЕ ЗначениеЗаполнено(ТекСтрока.СтавкаНДС) Тогда
					ТекСтрока.СтавкаНДС = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(
						уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрока.Работа, "Номенклатура"), "СтавкаНДС");
					РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрока);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если Объект.Материалы.Количество() > 0 И Объект.УчитыватьНДС Тогда
			Для Каждого ТекСтрока Из Объект.Материалы Цикл
				Если НЕ ЗначениеЗаполнено(ТекСтрока.СтавкаНДС) Тогда
					ТекСтрока.СтавкаНДС = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(
						ТекСтрока.Номенклатура, "СтавкаНДС");
					РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрока);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если Объект.СпособРемонта = ПредопределенноеЗначение("Перечисление.уатСпособыРемонта.РемЗона") Тогда
			Объект.УчитыватьНДС = Ложь;
			Объект.СуммаВключаетНДС = Ложь;
		КонецЕсли;
		
		Если ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.уатПоступлениеТоваровУслуг")
			И ЗначениеЗаполнено(Объект.Комментарий) Тогда
			
			мКомментарий = СтрРазделить(Объект.Комментарий, Символы.ПС, Ложь);
			Для Каждого ТекСтрока Из мКомментарий Цикл
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекСтрока);
			КонецЦикла;
			Объект.Комментарий = НСтр("en = 'NTRS'; ru = 'Заполнен на основании'") + " " + Объект.ДокументОснование;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
			уатОбщегоНазначенияКлиент.ПриИзмененииДоговора(ЭтаФорма, Неопределено, Договор);
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.СпособРемонта = ПредопределенноеЗначение("Перечисление.уатСпособыРемонта.Автосервис") Тогда
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
	Иначе
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Склады");
	КонецЕсли;
	
	ДоступностьЭлементовТО();
	УстановитьВидимость();
	ОбновитьПодвал();
	УстановитьОграничениеТипаСделка();
	УстановитьОтборВидовОбслуживания();

	// уатСогласованиеДокументов
	уатСогласованиеДокументовКлиент.ОбновитьСтатусСогласования(ЭтотОбъект);
	// Конец уатСогласованиеДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Если ЗначениеЗаполнено(Объект.ДатаОкончания) И Объект.ДатаОкончания < Объект.ДатаНачала Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, НСтр("en='End date cannot be earlier than start date!';ru='Дата окончания не может быть меньше даты начала!'"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Перем Команда;
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.уатПодборНоменклатуры.Форма.Форма" или ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.Форма" Тогда
		ОбработкаПодбора(Новый ОписаниеОповещения("ОбработкаВыбораЗавершение1", ЭтотОбъект, Новый Структура("ВыбранноеЗначение, ИсточникВыбора, Команда", ВыбранноеЗначение, ИсточникВыбора, Команда)), ИсточникВыбора.ИмяТаблицы, ВыбранноеЗначение);
		Возврат;
	ИначеЕсли   ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровВДокументЗакупки.Форма.Форма" Тогда
		ОбработкаПодбора(Новый ОписаниеОповещения("ОбработкаВыбораЗавершение", ЭтотОбъект, Новый Структура("ВыбранноеЗначение, Команда", ВыбранноеЗначение, Команда)), "Материалы", ВыбранноеЗначение);
		Возврат;
	КонецЕсли;
		
	ОбработкаВыбораФрагмент1(ВыбранноеЗначение, Команда);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораЗавершение1(Результат, ДополнительныеПараметры) Экспорт
    
    ВыбранноеЗначение = ДополнительныеПараметры.ВыбранноеЗначение;
    ИсточникВыбора = ДополнительныеПараметры.ИсточникВыбора;
    Команда = ДополнительныеПараметры.Команда;
    
    
    ОбработкаВыбораФрагмент1(ВыбранноеЗначение, Команда);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораФрагмент1(Знач ВыбранноеЗначение, Команда)
    
    ОбработкаВыбораФрагмент(ВыбранноеЗначение, Команда);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ВыбранноеЗначение = ДополнительныеПараметры.ВыбранноеЗначение;
    Команда = ДополнительныеПараметры.Команда;
    
    
    ОбработкаВыбораФрагмент(ВыбранноеЗначение, Команда);

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораФрагмент(Знач ВыбранноеЗначение, Команда)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		
		ВыбранноеЗначение.Свойство("Команда", Команда);
		Если Команда = "ПодборВТабличнуюЧастьШины" Тогда
			ОбработкаПодбораАгрегатов("Шины", ВыбранноеЗначение);
		ИначеЕсли Команда = "ПодборВТабличнуюЧастьАккумуляторы" Тогда
			ОбработкаПодбораАгрегатов("Аккумуляторы", ВыбранноеЗначение);
		ИначеЕсли Команда = "ПодборВТабличнуюЧастьПрочиеАгрегаты" Тогда
			ОбработкаПодбораАгрегатов("ПрочиеАгрегаты",ВыбранноеЗначение)	
		КонецЕсли;
	КонецЕсли;
    Модифицированность = Истина;

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ОбновитьВсегоВТЧСервер();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ОбновитьВсегоВТЧСервер();
	Если ТекущийОбъект.ДополнительныеСвойства.Свойство("ВыполнитьУстановкуСтатусаЗаявкиНаРемонт") Тогда
		ВыполнитьУстановкуСтатусаЗаявкиНаРемонт = ТекущийОбъект.ДополнительныеСвойства.ВыполнитьУстановкуСтатусаЗаявкиНаРемонт;
		ТекущийОбъект.ДополнительныеСвойства.ВыполнитьУстановкуСтатусаЗаявкиНаРемонт = Неопределено;
	КонецЕсли;
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ИмяСобытия = "МастерУстановкиШин" Тогда
		Объект.Шины.Очистить();
		Для Каждого ТекШина Из Параметр.СписокШин Цикл
			НоваяСтрока = Объект.Шины.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекШина);
		КонецЦикла;
	КонецЕсли;
	
	Если ИмяСобытия = "ОбновлениеМестРемонтов" И Параметр = Объект.Контрагент Тогда
		КонтрагентПриИзмененииСервер();
	КонецЕсли;

	// уатСогласованиеДокументов
	уатСогласованиеДокументовКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр);
	// Конец уатСогласованиеДокументов
	
	// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов	
	УчетОригиналовПервичныхДокументовКлиент.ОбработчикОповещенияФормаДокумента(ИмяСобытия, ЭтотОбъект);
	// Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов

	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Оповещ = Новый ОписаниеОповещения("ДобавитьНоменклатуруВТЧПоШтрихкоду", ЭтотОбъект);
		уатОбщегоНазначенияКлиент.ОбработатьСобытиеПодключаемогоОборудования(ИмяСобытия, Параметр, Источник,
			Новый Структура("Оповещение", Оповещ));
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	// ПодключаемоеОборудование
	уатОбщегоНазначенияКлиент.ОбработкаВнешнегоСобытия(Источник, Событие, Данные);
	// Конец ПодключаемоеОборудование
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
	КонтрольСуммыРаботИЗапчастейПоПоступлениям();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если флВопросЗакрытиеФормы Тогда
		Отказ = Истина;
		Оповещ = Новый ОписаниеОповещения("ПередЗакрытиемВопрос", ЭтотОбъект);
		ПоказатьВопрос(Оповещ, "При проверке корректности заполнения документа возникли предупреждения!
			|Продолжить закрытие формы?", РежимДиалогаВопрос.ОКОтмена);
	ИначеЕсли Модифицированность И НЕ Объект.Ссылка.Пустая() Тогда
		КонтрольСуммыРаботИЗапчастейПоПоступлениям(Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)

	Если ЗначениеЗаполнено(ВыполнитьУстановкуСтатусаЗаявкиНаРемонт) Тогда
		ОповеститьОбИзменении(ВыполнитьУстановкуСтатусаЗаявкиНаРемонт);
		
		ПараметрыФормы = Новый Структура("Ключ", ВыполнитьУстановкуСтатусаЗаявкиНаРемонт);
		ФормаЗаявкаНаРемонт = ПолучитьФорму("Документ.уатЗаявкаНаРемонт.Форма.ФормаДокумента", ПараметрыФормы);
		Если ФормаЗаявкаНаРемонт.Открыта() Тогда
			Если ФормаЗаявкаНаРемонт.Модифицированность Тогда
				СтатусВыполнения = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ВыполнитьУстановкуСтатусаЗаявкиНаРемонт, "СтатусВыполнения");
				ФормаЗаявкаНаРемонт.СтатусВыполненияПослеВыбораСтатуса(СтатусВыполнения, Неопределено);
				ФормаЗаявкаНаРемонт.ОбновитьОтображениеДанных();
			Иначе
				ФормаЗаявкаНаРемонт.Прочитать();
			КонецЕсли;
		КонецЕсли;
		ВыполнитьУстановкуСтатусаЗаявкиНаРемонт = Неопределено;
	КонецЕсли;
	
	// уатСогласованиеДокументов
	Если Объект.ТребуетСогласования Тогда
		СтатусСогласования = уатСогласованиеДокументовСервер.СтатусСогласования(Объект.Ссылка);
		Если НЕ Элементы.ТребуетСогласования.Доступность Тогда
			Если СтатусСогласования.Код = 0
				И Объект.Проведен 
				И Объект.Выполнен Тогда
				// Согласование создается автоматически, если документ проведен и выполнен
				уатСогласованиеДокументовСервер.СоздатьБизнесПроцессСогласования(Объект.Ссылка);
			ИначеЕсли СтатусСогласования.Код <> 0 Тогда
				ПоказатьЗначение(, СтатусСогласования.Ссылка);
			КонецЕсли;
		ИначеЕсли Элементы.ТребуетСогласования.Доступность 
			И СтатусСогласования.Код = 0 
			И Объект.Проведен 
			И Объект.Выполнен Тогда
			// Согласование создается автоматически, если документ проведен и выполнен
			ПараметрыОткрытия = Новый Структура("Основание", Объект.Ссылка);
			ОткрытьФорму("БизнесПроцесс.уатСогласование.ФормаОбъекта", ПараметрыОткрытия);
		КонецЕсли;
	КонецЕсли;
	// Согласование автоматически создается только если документ проведен и выполнен
	Если Не (Объект.Проведен И Объект.Выполнен) Тогда
		Возврат;
	КонецЕсли;
	// Конец уатСогласованиеДокументов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

// уатУправлениеАвтотранспортом.МодификацияКонфигурации
&НаКлиенте
Процедура Подключаемый_ПолеФормыНажатие(Элемент, СтандартнаяОбработка)
	
	уатМодификацияКонфигурацииКлиентПереопределяемый.ПолеФормыНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры
// Конец уатУправлениеАвтотранспортом.МодификацияКонфигурации

&НаКлиенте
Процедура Подключаемый_ДекорацияСостояниеОригиналаНажатие()

	// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	УчетОригиналовПервичныхДокументовКлиент.ОткрытьМенюВыбораСостояния(ЭтотОбъект, Элементы.ДекорацияСостояниеОригинала);
	//Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов

КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	ВидимостьЭлементовТО();
	ДоступностьЭлементовТО();
	НаработкаПослеТО();
КонецПроцедуры

&НаКлиенте
Процедура ТСПриИзменении(Элемент)
	
	ТСПриИзмененииСервер();
	ТСПриИзмененииКлиент();
	
	// установим текущее местонахождение ТС
	Если ЗначениеЗаполнено(Объект.ТС)
		И уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.ТС, "ПринадлежностьТС")
		= ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное") Тогда
		МестонахождениеТС = уатОбщегоНазначения.МестонахождениеТС(Объект.ТС, Объект.Дата);
		Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
			Объект.Организация = МестонахождениеТС.Организация;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.Подразделение) Тогда
			Объект.Подразделение = МестонахождениеТС.Подразделение;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьОтборВидовОбслуживания();

КонецПроцедуры

&НаКлиенте
Процедура ТСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.РеквизитТСНачалоВыбора(Элемент, Объект.ТС, ДанныеВыбора, СтандартнаяОбработка, СтруктураОтбораТС());
КонецПроцедуры

&НаКлиенте
Процедура ТСАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.РеквизитТСАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка, СтруктураОтбораТС());
КонецПроцедуры

&НаКлиенте
Процедура ТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.РеквизитТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка, СтруктураОтбораТС());
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если Объект.Организация = ОрганизацияПередИзменением Тогда
		Возврат;
	КонецЕсли;
	ОрганизацияПередИзменением = Объект.Организация;
	
	// Обработка события изменения организации.
	УстановитьВидимость();
	
	Объект.ДатаНачала    = НачалоДня(Объект.Дата) +
		(уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
			ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ВремяНачалаРЛ")) - '00010101');
	Объект.ДатаОкончания = НачалоДня(Объект.Дата) +
		(уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
			ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ВремяОкончанияРЛ")) - '00010101');
	
	Если ИспользуетсяУчетЗатрат Тогда
		Если Не уатОбщегоНазначения.уатНайтиПланЗатрат(Объект.ПланЗатрат, Объект.Организация, Объект.ТС) Тогда 
			ТекстНСТР = НСтр("en='Cost plan is not found!';ru='Не найден план затрат!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		КонецЕсли;	
	КонецЕсли;	
	
	ПриИзмененииКонтрагентаИлиОрганизации(Новый ОписаниеОповещения("ОрганизацияПриИзмененииЗавершение", ЭтотОбъект));
	
	// уатСогласованиеДокументов
	уатСогласованиеДокументовКлиент.ОрганизацияПодразделениеПриИзменении(ЭтотОбъект);
	// Конец уатСогласованиеДокументов
	УстановитьОтборВидовОбслуживания();

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	УчитыватьНДСПередИзменением = Объект.УчитыватьНДС;
	СуммаВключаетНДСПередИзменением = Объект.СуммаВключаетНДС;
	
    Объект.УчитыватьНДС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
    	ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.УчитыватьНДС"));
    Объект.СуммаВключаетНДС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
    	ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.СуммаВключаетНДС"));
		
	Если Объект.УчитыватьНДС <> УчитыватьНДСПередИзменением ИЛИ Объект.СуммаВключаетНДС <> СуммаВключаетНДСПередИзменением Тогда
    	ПересчитатьСуммыНДС();
	КонецЕсли;
	
    ОбновитьПодвал();
    УстановитьВидимость();

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	КонтрагентПередИзменением = Контрагент;
	Контрагент = Объект.Контрагент;
	КонтрагентПриИзмененииСервер();
	Если Объект.СпособРемонта = ПредопределенноеЗначение("Перечисление.уатСпособыРемонта.Автосервис") Тогда
		Если КонтрагентПередИзменением <> Объект.Контрагент Тогда
			
			ПриИзмененииКонтрагентаИлиОрганизации(Неопределено);
			Для Каждого ТекСтрока Из Объект.Материалы Цикл
				ЗаполнитьЦенуПоКонтрагенту(ТекСтрока, ТекСтрока.Номенклатура);
			КонецЦикла;
			Для Каждого ТекСтрока Из Объект.Работы Цикл
				ЗаполнитьЦенуПоКонтрагенту(ТекСтрока, ТекСтрока.Работа);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	Оповещ = Новый ОписаниеОповещения("ДоговорКонтрагентаПриИзмененииЗавершение", ЭтотОбъект);
	уатОбщегоНазначенияКлиент.ДоговорКонтрагентаПриИзменении(ЭтаФорма, Оповещ);
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзмененииЗавершение(Результат, ДопПараметры) Экспорт
	уатОбщегоНазначенияКлиент.ПриИзмененииДоговора(ЭтаФорма, Неопределено, Договор);
КонецПроцедуры

// Вызывается из процедуры уатОбщегоНазначенияКлиент.ПриИзмененииДоговора()
//
&НаКлиенте
Процедура ПриИзмененииДоговораЛокальныеОбработчики() Экспорт
	ОбновитьВсегоВТЧТовары();
	ОбновитьВсегоВТЧУслуги();
	ОбновитьВсегоВТЧПоступленияТоваровИУслуг();;
	УстановитьВидимость();
	УстановитьОграничениеТипаСделка();
КонецПроцедуры

&НаКлиенте
Процедура СпособРемонтаПриИзменении(Элемент)
	ПриИзмененииСпособаРемонта();
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ВидОбслуживанияПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.ВидОбслуживания) Тогда
		Объект.НеОтражаетсяВУчете = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(
			Объект.ВидОбслуживания, "НеОтражаетсяВУчете");
	КонецЕсли;
	
	НаработкаПослеТО(1);
	ВидимостьЭлементовТО(1);
	ДоступностьЭлементовТО(1);
	ДобавитьРаботуПоОбслуживанию(1);
	ВывестиПредупреждениеООтбореВидовОбслуживания(Объект.ВидОбслуживания);
КонецПроцедуры

&НаКлиенте
Процедура ВидОбслуживания2ПриИзменении(Элемент)
	НаработкаПослеТО(2);
	ВидимостьЭлементовТО(2);
	ДоступностьЭлементовТО(2);
	ДобавитьРаботуПоОбслуживанию(2);
	ВывестиПредупреждениеООтбореВидовОбслуживания(Объект.ВидОбслуживания2);

КонецПроцедуры

&НаКлиенте
Процедура ВидОбслуживания3ПриИзменении(Элемент)
	
	НаработкаПослеТО(3);
	ВидимостьЭлементовТО(3);
	ДоступностьЭлементовТО(3);
	ДобавитьРаботуПоОбслуживанию(3);
	ВывестиПредупреждениеООтбореВидовОбслуживания(Объект.ВидОбслуживания3);

КонецПроцедуры

&НаКлиенте
Процедура СпидометрИзмененПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура СчетчикМЧИзмененПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачалаПриИзменении(Элемент)
	Если НачалоДня(Объект.ДатаНачала) = '00010101' И Объект.ДатаНачала <> '00010101' Тогда
		Объект.ДатаНачала = '00010101';
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДатаОкончанияПриИзменении(Элемент)
	Если НачалоДня(Объект.ДатаОкончания) = '00010101' И Объект.ДатаОкончания <> '00010101' Тогда
		Объект.ДатаОкончания = '00010101';
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.ЗаявкаНаРемонт) Тогда
		ТекстНСТР = НСтр("en='Refill document data on the selected request?';ru='Перезаполнить данные документа по выбранной заявке?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаявкаНаРемонтПриИзмененииЗавершение", ЭтотОбъект), ТекстНСТР, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкаНаРемонтПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Да Тогда
        Объект.Организация = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.ЗаявкаНаРемонт, "Организация");
        Объект.ТС = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.ЗаявкаНаРемонт, "ТС");
		ТСПриИзмененииСервер();
		ТСПриИзмененииКлиент();
        Объект.ПричинаОбращения = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(
        Объект.ЗаявкаНаРемонт, "ПричинаОбращения");
        Объект.ВидОбслуживания = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(
        Объект.ЗаявкаНаРемонт, "ВидОбслуживания");
        ВидОбслуживанияПриИзменении(Элементы.ВидОбслуживания);
        Объект.ДатаНачала = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.ЗаявкаНаРемонт, "ДатаНачала");
        Объект.ДатаОкончания = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.ЗаявкаНаРемонт, "ДатаОкончания");
        Объект.ДокументОснование = Объект.ЗаявкаНаРемонт;
        Объект.Цех = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.ЗаявкаНаРемонт, "Цех");
        Объект.Мастер = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.ЗаявкаНаРемонт, "Мастер");
        
        СтруктураТСзаявки = СтруктураТСзаявки(Объект.ЗаявкаНаРемонт);
        
        Объект.Работы.Очистить();
        Для Каждого ТекСтрока из СтруктураТСзаявки.Работы Цикл
            НоваяСтрока				   = Объект.Работы.Добавить();
            НоваяСтрока.Работа 		   = ТекСтрока.Работа;
            НоваяСтрока.Количество 	   = ТекСтрока.Количество;
            НоваяСтрока.ЗаявкаНаРемонт = Объект.ЗаявкаНаРемонт;
			ЗаполнитьЦенуПоКонтрагенту(НоваяСтрока, НоваяСтрока.Работа);
        КонецЦикла;
        
        Объект.Материалы.Очистить();
        Для Каждого ТекСтрока из СтруктураТСзаявки.Материалы Цикл
            НоваяСтрока						= Объект.Материалы.Добавить();
            НоваяСтрока.Номенклатура		= ТекСтрока.Номенклатура;
            НоваяСтрока.Количество 			= ТекСтрока.Количество;
            НоваяСтрока.ЕдиницаИзмерения 	= ТекСтрока.ЕдиницаИзмерения;
			ЗаполнитьЦенуПоКонтрагенту(НоваяСтрока, НоваяСтрока.Номенклатура);
        КонецЦикла;
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВыработкаПриТООбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	НаработкаПослеТО(1);
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаПриТО2ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	НаработкаПослеТО(2);
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаПриТО3ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	НаработкаПослеТО(3);
КонецПроцедуры

&НаСервереБезКонтекста
Функция СтруктураТСзаявки(ЗаявкаНаРемонт)
	СтруктураРез = Новый Структура("Работы, Материалы", Новый Массив, Новый Массив);
	
	Для Каждого ТекСтрока из ЗаявкаНаРемонт.Работы Цикл
		СтруктураРез.Работы.Добавить(Новый Структура("Неисправность, Работа, Количество", ТекСтрока.Неисправность,
			ТекСтрока.Работа, ТекСтрока.Количество));
	КонецЦикла;
	
	Для Каждого ТекСтрока из ЗаявкаНаРемонт.Материалы Цикл
		СтруктураРез.Материалы.Добавить(Новый Структура("Номенклатура, ЕдиницаИзмерения, Количество",
			ТекСтрока.Номенклатура, ТекСтрока.ЕдиницаИзмерения, ТекСтрока.Количество));
	КонецЦикла;
	
	Возврат СтруктураРез;
КонецФункции

&НаКлиенте
Процедура МастерНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ДиалогВыбораСотрудника(Элемент, Объект.Мастер, Новый Структура("Организация", Объект.Организация), СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура МастерОткрытие(Элемент, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ОткрытьФормуСотрудника(Объект.Мастер, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура МастерАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Ожидание = 0 Тогда //выбор из списка
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура МастерОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПодотчетнымЛицомПриИзменении(Элемент)
	Если НЕ Объект.ОплатаПодотчетнымЛицом Тогда
		Объект.ПодотчетноеЛицо = Неопределено;
	КонецЕсли;
	
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ТребуетСогласованияПриИзменении(Элемент)
	
	// уатСогласованиеДокументов
	уатСогласованиеДокументовКлиент.ТребуетСогласованияПриИзменении(ЭтотОбъект);
	// Конец уатСогласованиеДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСогласованНажатие(Элемент)
	
	// уатСогласованиеДокументов
	уатСогласованиеДокументовКлиент.НадписьСогласованНажатие(ЭтотОбъект);
	// Конец уатСогласованиеДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	мВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком");
	
	уатОбщегоНазначенияТиповыеКлиент.уатНачалоВыбораЗначенияДоговораКонтрагента(Объект, ЭтотОбъект, Элемент, Объект.Контрагент, 
		Объект.ДоговорКонтрагента, мВидДоговора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаСоздание(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВидДоговораДоступныеЗначения = Новый Массив;
	
	мВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком");
	ВидДоговораДоступныеЗначения.Добавить(мВидДоговора);
	
	ПараметрыФормы = Новый Структура();  
	ПараметрыФормы.Вставить("Владелец", Объект.Контрагент);
	ПараметрыФормы.Вставить("ВидДоговораДоступныеЗначения", ВидДоговораДоступныеЗначения);
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормы_Работы

&НаКлиенте
Процедура РаботыПриИзменении(Элемент)
	ОбновитьПодвал();
КонецПроцедуры

&НаКлиенте
Процедура РаботыРаботаПриИзменении(Элемент)
	ТекСтрока = Элементы.Работы.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекСтрока.Работа) Тогда
		ТекСтрока.Количество = ПолучитьКоличествоНЧРаботы(уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.ТС, "Модель"), ТекСтрока.Работа);
		ЗаполнитьЦенуПоКонтрагенту(ТекСтрока, ТекСтрока.Работа);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РаботыРаботаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыОткрытия = Новый Структура;
	Если ЗначениеЗаполнено(Объект.ТС) И уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
			ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ОтборРаботПоМоделямТС")) Тогда
		ПараметрыОткрытия.Вставить("Отбор", Новый Структура("МодельТС", уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.ТС, "Модель")));
	КонецЕсли;
	ТекДанные = Элементы.Работы.ТекущиеДанные;
	Если ТекДанные <> Неопределено 
		И ЗначениеЗаполнено(ТекДанные.Работа) Тогда
		ПараметрыОткрытия.Вставить("ТекущаяСтрока", ТекДанные.Работа);
	КонецЕсли;
	ОповещениеОВыбореРаботы = Новый ОписаниеОповещения("РаботыРаботаНачалоВыбораПродолжение", ЭтотОбъект);  
	
	ПараметрыОткрытия.Вставить("МодельТСИзДокумента", уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.ТС, "Модель"));
	
	ОткрытьФорму("Справочник.уатРаботыПоРемонту.ФормаВыбора", ПараметрыОткрытия, Элемент,,,, ОповещениеОВыбореРаботы, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
КонецПроцедуры

&НаКлиенте
Процедура РаботыРаботаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ПриЗакрытииФормы = Новый ОписаниеОповещения("ПослеЗакрытияФормыПодбора",ЭтотОбъект);
		ОткрытьФорму("ОбщаяФорма.уатФормаПодбораСвязанныхРаботЗапчастей", Новый Структура("РаботаПоОбслуживанию", 
		ВыбранноеЗначение),,,ВариантОткрытияОкна.ОтдельноеОкно,,ПриЗакрытииФормы,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

// Динамически подключаемый обработчик выбора работы.
&НаКлиенте
Процедура РаботыРаботаНачалоВыбораПродолжение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ТекСтрока = Элементы.Работы.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не РезультатЗакрытия = Неопределено Тогда
		ТекСтрока.Работа = РезультатЗакрытия;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыКоличествоПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Работы.ТекущиеДанные;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
	РассчитатьСуммуВсегоВстрокеТЧ(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура РаботыЦенаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Работы.ТекущиеДанные;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
	РассчитатьСуммуВсегоВстрокеТЧ(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура РаботыСтавкаНДСПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Работы.ТекущиеДанные;
	
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	РассчитатьСуммуВсегоВстрокеТЧ(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура РаботыСуммаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Работы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	РассчитатьСуммуВсегоВстрокеТЧ(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура РаботыПослеУдаления(Элемент)
	ОбновитьВсегоВТЧУслуги();
КонецПроцедуры

&НаКлиенте
Процедура РаботыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И НЕ Копирование
		И Объект.СпособРемонта = ПредопределенноеЗначение("Перечисление.уатСпособыРемонта.Автосервис")
		И Объект.УчитыватьНДС Тогда
		Элементы.Работы.ТекущиеДанные.СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
			ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнаяСтавкаНДС");
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормы_Материалы

&НаКлиенте
Процедура МатериалыПриИзменении(Элемент)
	ОбновитьПодвал();
КонецПроцедуры

&НаКлиенте
Процедура МатериалыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОбновитьВсегоВТЧТовары();
КонецПроцедуры

&НаКлиенте
Процедура МатериалыПослеУдаления(Элемент)
	ОбновитьВсегоВТЧТовары();
КонецПроцедуры

&НаКлиенте
Процедура МатериалыНоменклатураПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Материалы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Количество) тогда
		СтрокаТабличнойЧасти.Количество = 1;
	КонецЕсли;
	
	ЗаполнитьЦенуПоКонтрагенту(СтрокаТабличнойЧасти, СтрокаТабличнойЧасти.Номенклатура);

КонецПроцедуры

&НаКлиенте
Процедура МатериалыКоличествоПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Материалы.ТекущиеДанные;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
	РассчитатьСуммуВсегоВстрокеТЧ(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура МатериалыЦенаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Материалы.ТекущиеДанные;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
	РассчитатьСуммуВсегоВстрокеТЧ(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура МатериалыСуммаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Материалы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	РассчитатьСуммуВсегоВстрокеТЧ(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура МатериалыСтавкаНДСПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Материалы.ТекущиеДанные;
	
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	РассчитатьСуммуВсегоВстрокеТЧ(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура МатериалыЕдиницаИзмеренияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатОбщегоНазначенияКлиент.ТЧТоварыЕдиницаИзмеренияНачалоВыбора(
		Элементы.Материалы.ТекущиеДанные.Номенклатура, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура МатериалыЕдиницаИзмеренияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтрокаТабличнойЧасти = Элементы.Материалы.ТекущиеДанные;
	
	//Если НЕ уатОбщегоНазначенияСервер.СуществуетСправочникЕдиницыИзмерения() 
	//	ИЛИ СтрокаТабличнойЧасти.ЕдиницаИзмерения = ВыбранноеЗначение ИЛИ СтрокаТабличнойЧасти.Цена = 0 Тогда
	//	Возврат;
	//КонецЕсли;
	Если СтрокаТабличнойЧасти.ЕдиницаИзмерения = ВыбранноеЗначение
		ИЛИ СтрокаТабличнойЧасти.Цена = 0
		ИЛИ НЕ уатОбщегоНазначенияТиповые.уатЕстьРеквизитСправочника("Коэффициент", СтрокаТабличнойЧасти.ЕдиницаИзмерения) Тогда
		
		Возврат;
	КонецЕсли;
	
	ТекКоэффициент = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(СтрокаТабличнойЧасти.ЕдиницаИзмерения,
		"Коэффициент");
	Если ТекКоэффициент <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Цена * уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(
			ВыбранноеЗначение, "Коэффициент") / ТекКоэффициент;
	КонецЕсли; 		
	
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
	
	МатериалыСуммаПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура МатериалыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И НЕ Копирование
		И Объект.СпособРемонта = ПредопределенноеЗначение("Перечисление.уатСпособыРемонта.Автосервис")
		И Объект.УчитыватьНДС Тогда
		Элементы.Материалы.ТекущиеДанные.СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
			ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнаяСтавкаНДС");
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормы_ПоступленияМатериалов

&НаКлиенте
Процедура ПоступленияМатериаловИУслугПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОбновитьВсегоВТЧПоступленияТоваровИУслуг();
КонецПроцедуры

&НаКлиенте
Процедура ПоступленияМатериаловИУслугПослеУдаления(Элемент)
	ОбновитьВсегоВТЧПоступленияТоваровИУслуг();
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормы_Аккумуляторы

&НаКлиенте
Процедура АккумуляторыСостояниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Список = Новый СписокЗначений();
	Список.Добавить(ПредопределенноеЗначение("Перечисление.уатСостоянияАгрегатов.УстановленоВРаботе"));
	Список.Добавить(ПредопределенноеЗначение("Перечисление.уатСостоянияАгрегатов.Снято"));
	
	РезультатВыбора = Неопределено;

	
	ПоказатьВыборИзСписка(Новый ОписаниеОповещения("АккумуляторыСостояниеНачалоВыбораЗавершение", ЭтотОбъект), Список, Элементы.Аккумуляторы.ТекущиеДанные.Состояние);
КонецПроцедуры

&НаКлиенте
Процедура АккумуляторыСостояниеНачалоВыбораЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
    
    РезультатВыбора = ВыбранныйЭлемент;
    Если РезультатВыбора <> Неопределено Тогда
        Элементы.Аккумуляторы.ТекущиеДанные.Состояние = РезультатВыбора.Значение;
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура АккумуляторыСостояниеПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Аккумуляторы.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.Состояние <> 
			ПредопределенноеЗначение("Перечисление.уатСостоянияАгрегатов.УстановленоВРаботе")
			И СтрокаТабличнойЧасти.Состояние <> ПредопределенноеЗначение("Перечисление.уатСостоянияАгрегатов.Снято") тогда
				СтрокаТабличнойЧасти.Состояние = ПредопределенноеЗначение("Перечисление.уатСостоянияАгрегатов.ПустаяСсылка");
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормы_СобственныеМатериалы

&НаКлиенте
Процедура СобственныеМатериалыНоменклатураПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.СобственныеМатериалы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Количество) тогда
		СтрокаТабличнойЧасти.Количество = 1;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СобственныеМатериалыЕдиницаИзмеренияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатОбщегоНазначенияКлиент.ТЧТоварыЕдиницаИзмеренияНачалоВыбора(
		Элементы.СобственныеМатериалы.ТекущиеДанные.Номенклатура, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормы_ПрочиеАгрегаты

&НаКлиенте
Процедура ПрочиеАгрегатыСерияНоменклатурыНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("ТипАгрегата, РежимВыбора", "ПрочиеАгрегаты", Истина);
	ОткрытьФорму("Справочник.уатСерииНоменклатуры.ФормаВыбора", ПараметрыФормы, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеАгрегатыСостояниеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Список = Новый СписокЗначений();
	Список.Добавить(ПредопределенноеЗначение("Перечисление.уатСостоянияАгрегатов.УстановленоВРаботе"));
	Список.Добавить(ПредопределенноеЗначение("Перечисление.уатСостоянияАгрегатов.Снято"));
	
	РезультатВыбора = Неопределено;

	
	ПоказатьВыборИзСписка(Новый ОписаниеОповещения("ПрочиеАгрегатыСостояниеНачалоВыбораЗавершение", ЭтотОбъект), Список, Элементы.ПрочиеАгрегаты.ТекущиеДанные.Состояние);
КонецПроцедуры

&НаКлиенте
Процедура ПрочиеАгрегатыСостояниеНачалоВыбораЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
    
    РезультатВыбора = ВыбранныйЭлемент;
    Если РезультатВыбора <> Неопределено Тогда
        Элементы.ПрочиеАгрегаты.ТекущиеДанные.Состояние = РезультатВыбора.Значение;
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПрочиеАгрегатыСостояниеПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ПрочиеАгрегаты.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.Состояние <> 
			ПредопределенноеЗначение("Перечисление.уатСостоянияАгрегатов.УстановленоВРаботе")
			И СтрокаТабличнойЧасти.Состояние <> ПредопределенноеЗначение("Перечисление.уатСостоянияАгрегатов.Снято") тогда
				СтрокаТабличнойЧасти.Состояние = ПредопределенноеЗначение("Перечисление.уатСостоянияАгрегатов.ПустаяСсылка");
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормы_Зарплата

&НаКлиенте
Процедура ЗарплатаВидНачисленияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Отбор", Новый Структура("СпособРасчетаОплатыТруда",
		ПредопределенноеЗначение("Перечисление.уатСпособыРасчетаОплатыТруда.ФиксированнойСуммой")));
	
	ОткрытьФорму("ПланВидовРасчета.уатОсновныеНачисления.ФормаВыбора", ПараметрыОткрытия, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	СтрокаТабличнойЧасти = Элементы.Зарплата.ТекущиеДанные;
	Если Не ОтменаРедактирования Тогда
		Если ПолучитьСпособРасчетаОплатыТрудаПоВидуНачисления(СтрокаТабличнойЧасти.ВидНачисления) <> 
			ПредопределенноеЗначение("Перечисление.уатСпособыРасчетаОплатыТруда.ФиксированнойСуммой") Тогда
			
			Отказ = Истина;
			ПоказатьПредупреждение(Неопределено, НСтр("en='You can only change for accrual types ""Fixed amount""';ru='Можно изменять только для видов начислений ""Фиксированной суммой""'"));
		Иначе
			СтрокаТабличнойЧасти.РучнойВвод = Истина;
		КонецЕсли;        
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаПередУдалением(Элемент, Отказ)
	СтрокаТабличнойЧасти = Элементы.Зарплата.ТекущиеДанные;
	Если ПолучитьСпособРасчетаОплатыТрудаПоВидуНачисления(СтрокаТабличнойЧасти.ВидНачисления) <> 
		ПредопределенноеЗначение("Перечисление.уатСпособыРасчетаОплатыТруда.ФиксированнойСуммой") Тогда
		
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, НСтр("en='You can only delete the accrual types for ""Fixed amount""';ru='Можно удалять только виды начислений для способа оплаты ""Фиксированной суммой""'"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаПриАктивизацииЯчейки(Элемент)
	Если Элемент.ТекущаяСтрока <> Неопределено Тогда
		Элементы.ЗарплатаСумма.РедактированиеТекста
			= (уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Элемент.ТекущиеДанные.ВидНачисления, "СпособРасчетаОплатыТруда")
			= ПредопределенноеЗначение("Перечисление.уатСпособыРасчетаОплатыТруда.ФиксированнойСуммой"));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаСотрудникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ДиалогВыбораСотрудника(Элемент, Элементы.Зарплата.ТекущиеДанные.Сотрудник, Новый Структура("Организация", Объект.Организация), СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаСотрудникОткрытие(Элемент, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ОткрытьФормуСотрудника(Элементы.Зарплата.ТекущиеДанные.Сотрудник, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаСотрудникАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаСотрудникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормы_Исполнители

&НаКлиенте
Процедура ИсполнителиСотрудникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ДиалогВыбораСотрудника(Элемент, Элементы.Исполнители.ТекущиеДанные.Сотрудник, Новый Структура("Организация", Объект.Организация), СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиСотрудникОткрытие(Элемент, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ОткрытьФормуСотрудника(Элементы.Исполнители.ТекущиеДанные.Сотрудник, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиСотрудникАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура ИсполнителиСотрудникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// уатУправлениеАвтотранспортом.МодификацияКонфигурации
&НаКлиенте
Процедура Подключаемый_уатВыполнитьКоманду(Команда)
	
	уатМодификацияКонфигурацииКлиентПереопределяемый.ВыполнитьПодключаемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры
// Конец уатУправлениеАвтотранспортом.МодификацияКонфигурации

&НаКлиенте
Процедура РедактироватьЦеныИВалюту(Команда)
	
	ОбработатьИзмененияПоКнопкеЦеныИВалюты(Новый ОписаниеОповещения("РедактироватьЦеныИВалютуЗавершение", ЭтотОбъект), Объект.ВалютаДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоЗаявкеНаРемонт(Команда)
	Если ЗначениеЗаполнено(Объект.ЗаявкаНаРемонт) Тогда
		Объект.Работы.Очистить();
	    ЗаполнитьРаботыПоЗаявке(Объект.ЗаявкаНаРемонт);
		ЗаполнитьМатериалыПоЗаявке(Объект.ЗаявкаНаРемонт);
		Для Каждого ТекСтрока Из Объект.Материалы Цикл
			ЗаполнитьЦенуПоКонтрагенту(ТекСтрока, ТекСтрока.Номенклатура);
		КонецЦикла;
		Если Объект.Материалы.Количество() > 0 Тогда
			ТекстНСТР = НСтр("en='Add related materials?';ru='Добавить связанные материалы?'");
			ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоЗаявкеНаРемонтЗавершение", ЭтотОбъект), ТекстНСТР, РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
	Иначе
		ТекстНСТР = НСтр("en='To perform the operation, the attribute ""Request for repair"" must be specified.';ru='Для выполнения операции должен быть указан реквизит ""Заявка на ремонт"".'");
		уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, , , СтатусСообщения.Важное);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоЗаявкеНаРемонтМатериалы(Команда)
	Если ЗначениеЗаполнено(Объект.ЗаявкаНаРемонт) Тогда
		Объект.Материалы.Очистить();
		ЗаполнитьМатериалыПоЗаявке(Объект.ЗаявкаНаРемонт);
		Для Каждого ТекСтрока Из Объект.Материалы Цикл
			ЗаполнитьЦенуПоКонтрагенту(ТекСтрока, ТекСтрока.Номенклатура);
		КонецЦикла;
		ЗаполнитьРаботыПоЗаявке(Объект.ЗаявкаНаРемонт);
		Если Объект.Работы.Количество() > 0 Тогда
			ТекстНСТР = НСтр("en='Add related work?';ru='Добавить связанные работы?'");
			ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоЗаявкеНаРемонтМатериалыЗавершение", ЭтотОбъект), ТекстНСТР, РежимДиалогаВопрос.ДаНет);
		КонецЕсли;
	Иначе
		ТекстНСТР = НСтр("en='To perform the operation, the attribute ""Request for repair"" must be specified.';ru='Для выполнения операции должен быть указан реквизит ""Заявка на ремонт"".'");
		уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, , , СтатусСообщения.Важное);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРаботуПоОбслуживанию(Команда)
	флОК = Истина;
	Если НЕ ЗначениеЗаполнено(Объект.ТС) Тогда
		флОК = Ложь;
	КонецЕсли;
	
	списВидыРемонта = Новый СписокЗначений;
	Если ЗначениеЗаполнено(Объект.ВидОбслуживания) Тогда
		списВидыРемонта.Добавить(Объект.ВидОбслуживания);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.ВидОбслуживания2) Тогда
		списВидыРемонта.Добавить(Объект.ВидОбслуживания2);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.ВидОбслуживания3) Тогда
		списВидыРемонта.Добавить(Объект.ВидОбслуживания3);
	КонецЕсли;
	
	Если списВидыРемонта.Количество() = 0 Тогда
		флОК = Ложь;
	ИначеЕсли списВидыРемонта.Количество() = 1 Тогда
		ДобавитьРаботуПоОбслуживанию(1);
	Иначе
		ТекстНСТР = НСтр("en='Type of repair to fill work';ru='Вида ремонта для заполнения работы'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьРаботуПоОбслуживаниюВыборВидаРемонта", ЭтотОбъект);
		списВидыРемонта.ПоказатьВыборЭлемента(Оповещение, ТекстНСТР);
	КонецЕсли;
	
	Если НЕ флОК Тогда
		ТекстНСТР = НСтр("en='To perform the operation, the attributes of ""Vehicle"" and ""Type of repair"" should be indicated.';ru='Для выполнения операции должны быть указаны реквизиты ""ТС"" и ""Вид ремонта"".'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРаботуПоОбслуживаниюВыборВидаРемонта(Результат, ДопПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		Если Результат.Значение = Объект.ВидОбслуживания Тогда
			ДобавитьРаботуПоОбслуживанию(1);
		ИначеЕсли Результат.Значение = Объект.ВидОбслуживания2 Тогда
			ДобавитьРаботуПоОбслуживанию(2);
		Иначе
			ДобавитьРаботуПоОбслуживанию(3);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МатериалыПодбор(Команда)
	ПараметрыПодбора = ПолучитьПараметрыПодбора("Материалы");
	Если ПараметрыПодбора <> Неопределено Тогда
		уатОбщегоНазначенияТиповыеКлиент.уатОткрытьПодборНоменклатуры(ЭтотОбъект,ПараметрыПодбора,УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СобственныеМатериалыПодбор(Команда)
	ПараметрыПодбора = ПолучитьПараметрыПодбора("СобственныеМатериалы");
	Если ПараметрыПодбора <> Неопределено Тогда
		уатОбщегоНазначенияТиповыеКлиент.уатОткрытьПодборНоменклатуры(ЭтотОбъект, ПараметрыПодбора, УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуШин(Команда)
	Если Объект.Шины.Количество() > 0 Тогда
		ТекстНСТР = НСтр("en='Table will be cleared before filling! Continue?';ru='Перед заполнением таблица будет очищена! Продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьТаблицуШинЗавершение", ЭтотОбъект),
			ТекстНСТР, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
			
        Возврат;	
	КонецЕсли;	
	ЗаполнитьТаблицуШинФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуАккумуляторов(Команда)
	Если Объект.Аккумуляторы.Количество() > 0 Тогда
		ТекстНСТР = НСтр("en='Table will be cleared before filling! Continue?';ru='Перед заполнением таблица будет очищена! Продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьТаблицуАккумуляторовЗавершение", ЭтотОбъект),
			ТекстНСТР, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);
			
        Возврат;	
	КонецЕсли;	
	ЗаполнитьТаблицуАккумуляторовФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуПрочихАгрегатов(Команда)
	Если Объект.ПрочиеАгрегаты.Количество() > 0 Тогда
		ТекстНСТР = НСтр("en='Table will be cleared before filling! Continue?';ru='Перед заполнением таблица будет очищена! Продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьТаблицуПрочихАгрегатовЗавершение", ЭтотОбъект),
			ТекстНСТР, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет);
			
        Возврат;	
	КонецЕсли;	
	ЗаполнитьТаблицуПрочихАгрегатовФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьЗППоОтработанномуВремени(Команда)
	РасчетЗПСервер();
КонецПроцедуры

&НаКлиенте
Процедура ПодборШин(Команда)
	ДействиеПодборАгрегатов("Шины");
КонецПроцедуры

&НаКлиенте
Процедура ПодборАккумуляторов(Команда)
	ДействиеПодборАгрегатов("Аккумуляторы");
КонецПроцедуры

&НаКлиенте
Процедура ПодборПрочихАгрегатов(Команда)
	ДействиеПодборАгрегатов("ПрочиеАгрегаты");
КонецПроцедуры

&НаКлиенте
Процедура МастерУстановкиШин(Команда)
	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Ссылка", Объект.Ссылка);
	СтруктураПараметровПодбора.Вставить("Организация", Объект.Организация);
	СтруктураПараметровПодбора.Вставить("ТС", Объект.ТС);
	ВременнаяДатаРасчетов = ?(Объект.Дата = Дата(1,1,1), ТекущаяДата(), Объект.ДатаОкончания);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов", ВременнаяДатаРасчетов);
	СтруктураПараметровПодбора.Вставить("Склад", Объект.СкладОтправитель);
	Если Объект.Шины.Количество() Тогда
		СтруктураПараметровПодбора.Вставить("Шины", Объект.Шины);
	КонецЕсли;
	
	ОткрытьФорму("ОбщаяФорма.уатМастерУстановкиШин", СтруктураПараметровПодбора, ЭтотОбъект,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРаботыИЗапчастиПоПоступлению(Команда)
	ТекСтрока = Элементы.ПоступленияМатериаловИУслуг.ТекущиеДанные;
	Если ТекСтрока = Неопределено ИЛИ НЕ ЗначениеЗаполнено(ТекСтрока.ПоступлениеТоваровИУслуг) Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьРаботыИЗапчастиПоПоступлениюСервер(ТекСтрока.ПоступлениеТоваровИУслуг);
	ОбновитьВсегоВТЧТовары();
	ОбновитьВсегоВТЧУслуги();
	ОбновитьПодвал();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРаботыИЗапчастиПоПоступлениюСервер(ТекДок);
	Для Каждого ТекСтрока Из ТекДок.Товары Цикл
		НоваяСтрока = Объект.Материалы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
	КонецЦикла;
	
	мсвУслуги = ТекДок.Услуги.Выгрузить().ВыгрузитьКолонку("Номенклатура");
	тблРаботы = Документы.уатРемонтныйЛист.СоответствиеРаботНоменклатуре(мсвУслуги);
	
	Для Каждого ТекСтрока Из ТекДок.Услуги Цикл
		НоваяСтрока = Объект.Работы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		
		СтрокаРабота = тблРаботы.Найти(ТекСтрока.Номенклатура, "Номенклатура");
		Если СтрокаРабота <> Неопределено Тогда
			НоваяСтрока.Работа = СтрокаРабота.Работа;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	Оповещ = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект);
	ПоказатьВводЗначения(Оповещ, "", "Введите штрихкод номенклатуры", Тип("Строка"));
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(Результат, ДопПараметры) Экспорт
	Если ЗначениеЗаполнено(Результат) Тогда
		ТекНоменклатура = уатЗащищенныеФункцииСервер_проф.ПолучитьОбъектПоШтрихкоду(Результат);
		ДобавитьНоменклатуруВТЧПоШтрихкоду(Новый Структура("Штрихкод, Объект", Результат, ТекНоменклатура));
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// Получает набор данных с сервера для процедуры НоменклатураПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.ЕдиницаХраненияОстатков);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

&НаКлиенте
Процедура ПриИзмененииКонтрагентаИлиОрганизации(Знач Оповещение)
	
	ДанныеОбменаССервером = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, УчитыватьНДС, Дата");
	ЗаполнитьЗначенияСвойств(ДанныеОбменаССервером, Объект);
	// Получим данные с сервера
	ДанныеОбменаССервером.ДоговорКонтрагента = Объект.ДоговорКонтрагента;
	ЗначенияДляЗаполнения = ИзменениеКонтрагентаСервер(ДанныеОбменаССервером);
	Объект.ДоговорКонтрагента = ЗначенияДляЗаполнения.ДоговорКонтрагента;
	
	ДоговорПередИзменением = Договор;
	//Договор = Объект.ДоговорКонтрагента;
	
	Оповещ = Новый ОписаниеОповещения("ПриИзмененииКонтрагентаИлиОрганизацииЗавершение", ЭтотОбъект, Новый Структура("Оповещение", Оповещение));
	уатОбщегоНазначенияКлиент.ПриИзмененииДоговора(ЭтаФорма, Оповещ, ДоговорПередИзменением)
	
КонецПроцедуры // ПриИзмененииКонтрагентаИлиОрганизации()

&НаКлиенте
Процедура ПриИзмененииКонтрагентаИлиОрганизацииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Оповещение = ДополнительныеПараметры.Оповещение;
	
	Если Не Оповещение = Неопределено Тогда 
		ВыполнитьОбработкуОповещения(Оповещение);
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииКонтрагентаИлиОрганизации()

&НаСервереБезКонтекста
Функция ИзменениеКонтрагентаСервер(ДанныеДляЗаполнения)
	СтруктураПараметровДляПолученияДоговора = 
		уатЗаполнениеДокументов.ПолучитьСтруктуруПараметровДляПолученияДоговораПокупки();
	
	ЗначенияДляЗаполнения = уатОбщегоНазначенияСервер.ПриИзмененииЗначенияКонтрагента(ДанныеДляЗаполнения,
		СтруктураПараметровДляПолученияДоговора);
	Возврат ЗначенияДляЗаполнения;
КонецФункции

// Процедура выполняет пересчет в табличной части документа после изменений 
// в форме "Цены и валюта".Выполняется пересчет колонок: цена, скидка, сумма,
// сумма НДС, всего.
//
&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты(Знач Оповещение, Знач ВалютаРасчетовПередИзменением, ПересчитатьЦены = Ложь)
	
	// 1. Формируем структуру параметров для заполнения формы "Цены и Валюта".
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВалютаДокумента",		  Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("Курс",				  Объект.КурсВзаиморасчетов);
	СтруктураПараметров.Вставить("Кратность",			  Объект.КратностьВзаиморасчетов);
	СтруктураПараметров.Вставить("Контрагент",			  Объект.Контрагент);
	СтруктураПараметров.Вставить("Договор",				  Объект.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("Организация",			  Объект.Организация);
	СтруктураПараметров.Вставить("ДатаДокумента",		  Объект.Дата);
	СтруктураПараметров.Вставить("ПерезаполнитьЦены",	  Ложь);
	СтруктураПараметров.Вставить("ПересчитатьЦены",		  ПересчитатьЦены);
	СтруктураПараметров.Вставить("БылиВнесеныИзменения",  Ложь);
	СтруктураПараметров.Вставить("СуммаВключаетНДС",      Объект.СуммаВключаетНДС);
	СтруктураПараметров.Вставить("НалогообложениеНДС",	  Объект.УчитыватьНДС);
	// Для объедининенного решения с БП 3
	СтруктураПараметров.Вставить("ДокументБезНДС",       НЕ Объект.УчитыватьНДС);
	// Для объедининенного решения с БП 3
	
	Если НЕ ПравоРедактированиеДокумента() Тогда
		СтруктураПараметров.Вставить("ТолькоПросмотр", Истина);
	КонецЕсли;
	
	ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров,,,,, Новый ОписаниеОповещения("ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение", ЭтотОбъект, Новый Структура("ВалютаРасчетовПередИзменением, Оповещение", ВалютаРасчетовПередИзменением, Оповещение)), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры // ОбработатьИзмененияПоКнопкеЦеныИВалюты()

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена ИЛИ НЕ ПравоРедактированиеДокумента() Тогда
		Возврат;
	КонецЕсли;
	
    ВалютаРасчетовПередИзменением = ДополнительныеПараметры.ВалютаРасчетовПередИзменением;
    Оповещение = ДополнительныеПараметры.Оповещение;
        
    // Для объедининенного решения с БП 3
    
    // 2. Открываем форму "Цены и Валюта".
    СтруктураЦеныИВалюта = Результат;
    
    // 3. Перезаполняем табличную часть "Номенклатура", если были внесены изменения в форме "Цены и Валюта".
    Если ТипЗнч(СтруктураЦеныИВалюта) = Тип("Структура") Тогда
        
        // Для объедининенного решения с БП 3
        уатОбщегоНазначенияКлиент.ЗаполнитьСтруктуруЦеныИВалютыДляБП3(СтруктураЦеныИВалюта,Объект.ВалютаДокумента,ВалютаРасчетовПередИзменением,Объект.УчитыватьНДС,Объект.СуммаВключаетНДС);
        // Для объедининенного решения с БП 3
        Если СтруктураЦеныИВалюта.Свойство("ВалютаДокумента") И СтруктураЦеныИВалюта.Свойство("КурсРасчетов") И СтруктураЦеныИВалюта.Свойство("КратностьРасчетов") И
            СтруктураЦеныИВалюта.Свойство("СуммаВключаетНДС") И  СтруктураЦеныИВалюта.Свойство("НалогообложениеНДС") Тогда
            Объект.ВалютаДокумента		   = СтруктураЦеныИВалюта.ВалютаДокумента;
            Объект.КурсВзаиморасчетов	   = СтруктураЦеныИВалюта.Курс;
            Объект.КратностьВзаиморасчетов = СтруктураЦеныИВалюта.Кратность;
            Объект.СуммаВключаетНДС		   = СтруктураЦеныИВалюта.СуммаВключаетНДС;
            Объект.УчитыватьНДС			   = СтруктураЦеныИВалюта.НалогообложениеНДС;
        КонецЕсли;
        
        // Пересчитываем сумму если изменился признак Налогообложение НДС.
        Если СтруктураЦеныИВалюта.Свойство("НалогообложениеНДС") И СтруктураЦеныИВалюта.Свойство("ПредНалогообложениеНДС") Тогда
            Если СтруктураЦеныИВалюта.НалогообложениеНДС <> СтруктураЦеныИВалюта.ПредНалогообложениеНДС Тогда
                ЗаполнитьСтавкуНДСПоНалогообложениеНДС();		
            КонецЕсли;
        КонецЕсли;
        
        // Пересчитываем цены по валюте.
        Если СтруктураЦеныИВалюта.Свойство("ПересчитатьЦены") Тогда
            Если СтруктураЦеныИВалюта.ПересчитатьЦены Тогда	
                ПересчитатьЦеныТабличнойЧастиПоВалюте(ВалютаРасчетовПередИзменением, "Материалы");
                ПересчитатьЦеныТабличнойЧастиПоВалюте(ВалютаРасчетовПередИзменением, "Работы");
            КонецЕсли;
        КонецЕсли;
        
        // Пересчитываем сумму если изменился признак "Сумма включает НДС".
        Если СтруктураЦеныИВалюта.Свойство("СуммаВключаетНДС") И СтруктураЦеныИВалюта.Свойство("ПредСуммаВключаетНДС") Тогда
            Если СтруктураЦеныИВалюта.СуммаВключаетНДС <> СтруктураЦеныИВалюта.ПредСуммаВключаетНДС Тогда
                ПересчитатьСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС("Материалы");
                ПересчитатьСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС("Работы");
            КонецЕсли;
        КонецЕсли;
    КонецЕсли;
	
	ОбновитьВсегоВТЧТовары();
	ОбновитьВсегоВТЧУслуги();
	ОбновитьВсегоВТЧПоступленияТоваровИУслуг();
	ОбновитьПодвал();
	
    УстановитьВидимость();
    
	Если Не Оповещение = Неопределено Тогда 
		ВыполнитьОбработкуОповещения(Оповещение);
	КонецЕсли;

КонецПроцедуры // ОбработатьИзмененияПоКнопкеЦеныИВалюты()

// Процедура заполняет Ставку НДС в табличной части по системе налогообложения.
// 
&НаСервере
Процедура ЗаполнитьСтавкуНДСПоНалогообложениеНДС()
	
	//СтавкаНДСПоУмолчанию = уатОбщегоНазначенияПовтИсп.ПолучитьСтавкуНДСНоль();
	СтавкаНДСПоУмолчанию = Перечисления.СтавкиНДС.ПустаяСсылка();
	Для каждого СтрокаТабличнойЧасти Из Объект.Материалы Цикл
		СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
		СтрокаТабличнойЧасти.СуммаНДС = 0;
	КонецЦикла;
	Для каждого СтрокаТабличнойЧасти Из Объект.Работы Цикл
		СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
		СтрокаТабличнойЧасти.СуммаНДС = 0;
	КонецЦикла;
	
	Если Объект.УчитыватьНДС Тогда
		Элементы.МатериалыСтавкаНДС.Видимость = Истина;
		Элементы.МатериалыСуммаНДС.Видимость  = Истина;
		Элементы.МатериалыВсего.Видимость     = Истина;
		Элементы.РаботыСтавкаНДС.Видимость    = Истина;
		Элементы.РаботыСуммаНДС.Видимость     = Истина;
		Элементы.РаботыВсего.Видимость        = Истина;
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Материалы Цикл
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС) Тогда
				СтрокаТабличнойЧасти.СтавкаНДС = СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
			КонецЕсли;	
			
			СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
			СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
									  		СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
									  		СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
			
		КонецЦикла;

		Для каждого СтрокаТабличнойЧасти Из Объект.Работы Цикл
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Работа.Номенклатура.СтавкаНДС) Тогда
				СтрокаТабличнойЧасти.СтавкаНДС = СтрокаТабличнойЧасти.Работа.Номенклатура.СтавкаНДС;
			КонецЕсли;	
			
			СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
			СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
									  		СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
									  		СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
			
		КонецЦикла;
		
	Иначе
		Элементы.МатериалыСтавкаНДС.Видимость = Ложь;
		Элементы.МатериалыСуммаНДС.Видимость  = Ложь;
		Элементы.МатериалыВсего.Видимость     = Ложь;
		Элементы.РаботыСтавкаНДС.Видимость    = Ложь;
		Элементы.РаботыСуммаНДС.Видимость     = Ложь;
		Элементы.РаботыВсего.Видимость        = Ложь;
		
	КонецЕсли;	
	
КонецПроцедуры // ЗаполнитьСтавкуНДСПоНалогообложениеНДС()

&НаСервере
Процедура НаработкаПослеТО(НомерРемонта = 0)
	
	Если НомерРемонта = 0 Тогда
		НаработкаПослеТО(1);
		НаработкаПослеТО(2);
		НаработкаПослеТО(3);
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ТС) Тогда
		Объект.ПараметрВыработки = Неопределено;
		Объект.ВыработкаПриТО = 0;
		Объект.ПараметрВыработки2 = Неопределено;
		Объект.ВыработкаПриТО2 = 0;
		Объект.ПараметрВыработки3 = Неопределено;
		Объект.ВыработкаПриТО3 = 0;
		Возврат;
	КонецЕсли;
	
	Если НомерРемонта = 1 И (Не ЗначениеЗаполнено(Объект.ВидОбслуживания)) Тогда
		Объект.ПараметрВыработки = Неопределено;
		Объект.ВыработкаПриТО = 0;
		Возврат;
	КонецЕсли;
	Если НомерРемонта = 2 И (Не ЗначениеЗаполнено(Объект.ВидОбслуживания2)) Тогда
		Объект.ПараметрВыработки2 = Неопределено;
		Объект.ВыработкаПриТО2 = 0;
		Возврат;
	КонецЕсли;
	Если НомерРемонта = 3 И (Не ЗначениеЗаполнено(Объект.ВидОбслуживания3)) Тогда
		Объект.ПараметрВыработки3 = Неопределено;
		Объект.ВыработкаПриТО3 = 0;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТС",      Объект.ТС);
	Запрос.УстановитьПараметр("ДатаКон", Объект.ДатаНачала);
	
	Если Объект.ТС.Модель.НаличиеСпидометра Тогда 
		Запрос.УстановитьПараметр("ПараметрВыработки", Справочники.уатПараметрыВыработки.ПробегОбщий);
	Иначе 
		Запрос.УстановитьПараметр("ПараметрВыработки", Справочники.уатПараметрыВыработки.ВремяВРаботе);
	КонецЕсли;
	
	Если НомерРемонта = 1 Тогда
		Запрос.УстановитьПараметр("ВидОбслуживания", Объект.ВидОбслуживания);
	ИначеЕсли НомерРемонта = 2 Тогда
		Запрос.УстановитьПараметр("ВидОбслуживания", Объект.ВидОбслуживания2);
	ИначеЕсли НомерРемонта = 3 Тогда
		Запрос.УстановитьПараметр("ВидОбслуживания", Объект.ВидОбслуживания3);
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА уатМоделиТСНормативыОбслуживания.ПланированиеТО = ЗНАЧЕНИЕ(Перечисление.уатПериодичностьТО.ПоВремени)
	|			ТОГДА 0
	|		ИНАЧЕ ВЫБОР
	|				КОГДА уатВыработкаОбороты.КоличествоОборот ЕСТЬ NULL
	|						ИЛИ уатВыработкаОбороты.КоличествоОборот = NULL
	|					ТОГДА 0
	|				ИНАЧЕ уатВыработкаОбороты.КоличествоОборот
	|			КОНЕЦ
	|	КОНЕЦ КАК КоличествоОборот,
	|	ЕСТЬNULL(уатМоделиТСНормативыОбслуживания.ПараметрВыработки, ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ПустаяСсылка)) КАК ПараметрВыработки,
	|	уатМоделиТСНормативыОбслуживания.ВидОбслуживания КАК ВидОбслуживания,
	|	уатВыработкаОбороты.ТС КАК ТС,
	|	ВЫБОР
	|		КОГДА уатТС.Модель.НаличиеСпидометра
	|			ТОГДА уатТС.НачальныйПробег
	|		ИНАЧЕ уатТС.НачальныйПробег * 3600
	|	КОНЕЦ КАК НачальныйПробег
	|ИЗ
	|	Справочник.уатТС КАК уатТС
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатМоделиТС.НормативыОбслуживания КАК уатМоделиТСНормативыОбслуживания
	|		ПО уатТС.Модель = уатМоделиТСНормативыОбслуживания.Ссылка
	|			И (уатТС.Ссылка = &ТС)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.уатВыработкаТС.Обороты(, &ДатаКон, , ТС = &ТС) КАК уатВыработкаОбороты
	|		ПО уатТС.Ссылка = уатВыработкаОбороты.ТС
	|			И (уатВыработкаОбороты.ПараметрВыработки = уатМоделиТСНормативыОбслуживания.ПараметрВыработки)
	|ГДЕ
	|	уатМоделиТСНормативыОбслуживания.ВидОбслуживания = &ВидОбслуживания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	&ПараметрВыработки КАК ПараметрВыработки,
	|	ЕСТЬNULL(уатВыработкаТСОбороты.КоличествоОборот, 0) КАК ВыработкаПриТО,
	|	ВЫБОР
	|		КОГДА уатТС.Модель.НаличиеСпидометра
	|			ТОГДА уатТС.НачальныйПробег
	|		ИНАЧЕ уатТС.НачальныйПробег * 3600
	|	КОНЕЦ КАК НачальныйПробег
	|ИЗ
	|	Справочник.уатТС КАК уатТС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.уатВыработкаТС.Обороты(
	|				,
	|				&ДатаКон,
	|				,
	|				ТС = &ТС
	|					И ПараметрВыработки = &ПараметрВыработки) КАК уатВыработкаТСОбороты
	|		ПО уатТС.Ссылка = уатВыработкаТСОбороты.ТС
	|ГДЕ
	|	уатТС.Ссылка = &ТС";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Выборка = РезультатЗапроса[0].Выбрать();
	
	Если НомерРемонта = 1 Тогда
		Если Выборка.Следующий() Тогда
			Объект.ПараметрВыработки = Выборка.ПараметрВыработки;
			Если Объект.ПараметрВыработки = Справочники.уатПараметрыВыработки.ПробегОбщий 
				ИЛИ Объект.ПараметрВыработки = Справочники.уатПараметрыВыработки.ВремяВРаботе Тогда
				Объект.ВыработкаПриТО = Выборка.КоличествоОборот + Выборка.НачальныйПробег;
			Иначе
				Объект.ВыработкаПриТО = Выборка.КоличествоОборот;
			КонецЕсли;
			
			Если Объект.ПараметрВыработки.Временный Тогда
				Объект.ВыработкаПриТО = Объект.ВыработкаПриТО / 3600;
			КонецЕсли;
			
		Иначе
			ВыборкаБезПлана = РезультатЗапроса[1].Выбрать();
			Если ВыборкаБезПлана.Следующий() Тогда 
				Объект.ПараметрВыработки = ВыборкаБезПлана.ПараметрВыработки;
				Объект.ВыработкаПриТО    = ВыборкаБезПлана.ВыработкаПриТО + ВыборкаБезПлана.НачальныйПробег;
				
				Если Объект.ПараметрВыработки.Временный Тогда
					Объект.ВыработкаПриТО = Объект.ВыработкаПриТО / 3600;
				КонецЕсли;
				
			Иначе 
				Объект.ПараметрВыработки = "";
				Объект.ВыработкаПриТО = 0;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли НомерРемонта = 2 Тогда
		Если Выборка.Следующий() Тогда
			Объект.ПараметрВыработки2 = Выборка.ПараметрВыработки;
			Если Объект.ПараметрВыработки2 = Справочники.уатПараметрыВыработки.ПробегОбщий 
				ИЛИ Объект.ПараметрВыработки2 = Справочники.уатПараметрыВыработки.ВремяВРаботе Тогда
				Объект.ВыработкаПриТО2 = Выборка.КоличествоОборот + Выборка.НачальныйПробег;
			Иначе
				Объект.ВыработкаПриТО2 = Выборка.КоличествоОборот;
			КонецЕсли;
			
			Если Объект.ПараметрВыработки2.Временный Тогда
				Объект.ВыработкаПриТО2 = Объект.ВыработкаПриТО2 / 3600;
			КонецЕсли;
			
		Иначе
			Объект.ПараметрВыработки2 = "";
			Объект.ВыработкаПриТО2 = 0;
		КонецЕсли;
		
	ИначеЕсли НомерРемонта = 3 Тогда
		Если Выборка.Следующий() Тогда
			Объект.ПараметрВыработки3 = Выборка.ПараметрВыработки;
			Если Объект.ПараметрВыработки3 = Справочники.уатПараметрыВыработки.ПробегОбщий 
				ИЛИ Объект.ПараметрВыработки3 = Справочники.уатПараметрыВыработки.ВремяВРаботе Тогда
				Объект.ВыработкаПриТО3 = Выборка.КоличествоОборот + Выборка.НачальныйПробег;
			Иначе
				Объект.ВыработкаПриТО3 = Выборка.КоличествоОборот;
			КонецЕсли;
			
			Если Объект.ПараметрВыработки3.Временный Тогда
				Объект.ВыработкаПриТО3 = Объект.ВыработкаПриТО3 / 3600;
			КонецЕсли;
			
		Иначе
			Объект.ПараметрВыработки3 = "";
			Объект.ВыработкаПриТО3 = 0;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура в зависимости от вида поступления определяет тип для выбора СкладАвтосервис
//
&НаСервере
Процедура ПриИзмененииСпособаРемонта()
	Если Объект.СпособРемонта = Перечисления.уатСпособыРемонта.Автосервис Тогда
		Объект.УчитыватьНДС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
		ПланыВидовХарактеристик.уатПраваИНастройки.УчитыватьНДС);
		Объект.СуммаВключаетНДС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
		ПланыВидовХарактеристик.уатПраваИНастройки.СуммаВключаетНДС);
		Если ТипЗнч(Объект.СпособРемонта) <> Тип("СправочникСсылка.Контрагенты") Тогда
			Объект.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
			Объект.МестоРемонта = ПредопределенноеЗначение("Справочник.уатПунктыНазначения.ПустаяСсылка");
			Элементы.МестоРемонта.СписокВыбора.Очистить();
		КонецЕсли;
		Объект.ВалютаДокумента         = мВалютаРегламентированногоУчета;
		Объект.КурсВзаиморасчетов      = 1;
		Объект.КратностьВзаиморасчетов = 1;
	Иначе
		Объект.УчитыватьНДС = Ложь;
		Объект.СуммаВключаетНДС = Ложь;
		Если ТипЗнч(Объект.Контрагент) <> Тип("СправочникСсылка.Склады") Тогда
			Объект.Контрагент = Справочники.Склады.ПустаяСсылка();
			Объект.МестоРемонта = ПредопределенноеЗначение("Справочник.уатПунктыНазначения.ПустаяСсылка");
			Элементы.МестоРемонта.СписокВыбора.Очистить();
		КонецЕсли;
		Объект.ДоговорКонтрагента = Неопределено;
		Объект.ВалютаДокумента         = Справочники.Валюты.ПустаяСсылка();
		Объект.КурсВзаиморасчетов      = 0;
		Объект.КратностьВзаиморасчетов = 0;
		
		Объект.УчитыватьНДС = Ложь;
		Объект.СуммаВключаетНДС = Ложь;
		
		Для Каждого ТекСтрока Из Объект.Материалы Цикл
			ТекСтрока.СтавкаНДС = Неопределено;
			ТекСтрока.Сумма = 0;
			ТекСтрока.СуммаНДС = 0;
			ТекСтрока.Цена = 0;
		КонецЦикла;
		Для Каждого ТекСтрока Из Объект.Работы Цикл
			ТекСтрока.СтавкаНДС = Неопределено;
			ТекСтрока.Сумма = 0;
			ТекСтрока.СуммаНДС = 0;
			ТекСтрока.Цена = 0;
		КонецЦикла;
		
		Объект.ВалютаДокумента         = мВалютаРегламентированногоУчета;
		Объект.КурсВзаиморасчетов      = 1;
		Объект.КратностьВзаиморасчетов = 1;
		
		Объект.СобственныеМатериалы.Очистить();
		Объект.ПоступленияМатериаловИУслуг.Очистить();
	КонецЕсли;
	
	Если Объект.СпособРемонта = Перечисления.уатСпособыРемонта.Автосервис Тогда
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
	Иначе	
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Склады");
	КонецЕсли;		
	
	Если Объект.СпособРемонта <> Перечисления.уатСпособыРемонта.Автосервис Тогда
		Объект.ОплатаПодотчетнымЛицом = Ложь;
		Объект.ПодотчетноеЛицо = Неопределено;
	КонецЕсли;
КонецПроцедуры // ПриИзмененииСпособаРемонта()

// Процедура рассчитывает сумму в строке табличной части.
//
&НаКлиенте
Процедура РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти = Неопределено)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
	
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	РассчитатьСуммуВсегоВстрокеТЧ(СтрокаТабличнойЧасти);
	
КонецПроцедуры // РассчитатьСуммуВСтрокеТабличнойЧасти()

&НаКлиенте
Процедура РассчитатьСуммуВсегоВстрокеТЧ(СтрокаТабличнойЧасти)
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма
		+ ?(Объект.УчитыватьНДС И НЕ Объект.СуммаВключаетНДС, СтрокаТабличнойЧасти.СуммаНДС, 0);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВсегоВТЧТовары()
	Для Каждого СтрокаТабличнойЧасти Из Объект.Материалы Цикл
		РассчитатьСуммуВсегоВстрокеТЧ(СтрокаТабличнойЧасти);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВсегоВТЧУслуги()
	Для Каждого СтрокаТабличнойЧасти Из Объект.Работы Цикл
		РассчитатьСуммуВсегоВстрокеТЧ(СтрокаТабличнойЧасти);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОбновитьВсегоВТЧСервер()
	Для Каждого СтрокаТабличнойЧасти Из Объект.Материалы Цикл
		СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма
			+ ?(Объект.УчитыватьНДС И НЕ Объект.СуммаВключаетНДС, СтрокаТабличнойЧасти.СуммаНДС, 0);
	КонецЦикла;
	Для Каждого СтрокаТабличнойЧасти Из Объект.Работы Цикл
		СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма
			+ ?(Объект.УчитыватьНДС И НЕ Объект.СуммаВключаетНДС, СтрокаТабличнойЧасти.СуммаНДС, 0);
	КонецЦикла;
	Для Каждого СтрокаТабличнойЧасти Из Объект.ПоступленияМатериаловИУслуг Цикл
		СуммыТоваровИУслуг = ПолучитьСуммыПоступленияТоваровИУслуг(СтрокаТабличнойЧасти.ПоступлениеТоваровИУслуг);
		СтрокаТабличнойЧасти.СуммаТоваров = СуммыТоваровИУслуг.СуммаТоваров;
		СтрокаТабличнойЧасти.СуммаУслуг   = СуммыТоваровИУслуг.СуммаУслуг;
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВсегоВТЧПоступленияТоваровИУслуг()
	Для Каждого СтрокаТабличнойЧасти Из Объект.ПоступленияМатериаловИУслуг Цикл
		СуммыТоваровИУслуг = ПолучитьСуммыПоступленияТоваровИУслуг(СтрокаТабличнойЧасти.ПоступлениеТоваровИУслуг);
		СтрокаТабличнойЧасти.СуммаТоваров = СуммыТоваровИУслуг.СуммаТоваров;
		СтрокаТабличнойЧасти.СуммаУслуг   = СуммыТоваровИУслуг.СуммаУслуг;
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСуммыПоступленияТоваровИУслуг(ТекДок)
	СуммаТоваров = ТекДок.Товары.Итог("Сумма");
	СуммаУслуг   = ТекДок.Услуги.Итог("Сумма");
	
	Если ТекДок.УчитыватьНДС И НЕ ТекДок.СуммаВключаетНДС Тогда
		СуммаТоваров = СуммаТоваров + ТекДок.Товары.Итог("СуммаНДС");
		СуммаУслуг   = СуммаУслуг   + ТекДок.Услуги.Итог("СуммаНДС");
	КонецЕсли;
		
	Возврат Новый Структура("СуммаТоваров, СуммаУслуг", СуммаТоваров, СуммаУслуг);
КонецФункции

// Рассчитывается сумма НДС в строке табличной части.
//
&НаКлиенте
Процедура РассчитатьСуммуНДС(СтрокаТабличнойЧасти)
	
	СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	
	СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
	СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
	СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
	
КонецПроцедуры // РассчитатьСуммуНДС()

&НаСервере
Функция ПолучитьКоличествоНЧРаботы(Модель, Работа)
	Возврат Справочники.уатРаботыПоРемонту.ПолучитьКоличествоНЧРаботы(Модель, Работа);
КонецФункции

&НаКлиенте
Процедура РедактироватьЦеныИВалютуЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ОбновитьВсегоВТЧТовары();
    ОбновитьВсегоВТЧУслуги();
	ОбновитьВсегоВТЧПоступленияТоваровИУслуг();

    Модифицированность = Истина;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРаботыПоЗаявке(ЗаявкаНаРемонт)
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	                      |	уатЗаявкаНаРемонтРаботы.Работа КАК Работа,
	                      |	уатЗаявкаНаРемонтРаботы.Количество КАК Количество,
	                      |	уатЗаявкаНаРемонтРаботы.Неисправность КАК Неисправность
	                      |ИЗ
	                      |	Документ.уатЗаявкаНаРемонт.Работы КАК уатЗаявкаНаРемонтРаботы
	                      |ГДЕ
	                      |	уатЗаявкаНаРемонтРаботы.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", ЗаявкаНаРемонт);
	Объект.Работы.Загрузить(Запрос.Выполнить().Выгрузить());
	Для Каждого ТекСтрока Из Объект.Работы Цикл
			ТекСтрока.ЗаявкаНаРемонт         = ЗаявкаНаРемонт;
			ТекСтрока.Неисправность          = ТекСтрока.Неисправность;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМатериалыПоЗаявке(ЗаявкаНаРемонт)
	Запрос = Новый Запрос;
	Запрос.Текст =  "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатЗаявкаНаРемонтМатериалы.Номенклатура,
	|	уатЗаявкаНаРемонтМатериалы.Количество,
	|	уатЗаявкаНаРемонтМатериалы.ЕдиницаИзмерения
	|ИЗ
	|	Документ.уатЗаявкаНаРемонт.Материалы КАК уатЗаявкаНаРемонтМатериалы
	|ГДЕ
	|	уатЗаявкаНаРемонтМатериалы.Ссылка = &Ссылка";
	Запрос.УстановитьПараметр("Ссылка",ЗаявкаНаРемонт);
	Объект.Материалы.Загрузить(Запрос.Выполнить().Выгрузить());
КонецПроцедуры

&НаСервере
Процедура РасчетЗПСервер()
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	ДокОбъект.РасчетЗП();
	ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
КонецПроцедуры

&НаСервере
Функция ПолучитьСпособРасчетаОплатыТрудаПоВидуНачисления(ВидНачисления)
	Возврат ВидНачисления.СпособРасчетаОплатыТруда;
КонецФункции // ПолучитьСпособРасчетаОплатыТрудаПоВидуНачисления()

&НаСервереБезКонтекста
Функция ЭтоУслуга(Знач Номенклатура)
	
	Возврат Номенклатура.Услуга;
	
КонецФункции // ЭтоУслуга()

&НаКлиенте
Процедура ДействиеПодборАгрегатов(ИмяТабличнойЧасти)
	
	Если ИмяТабличнойЧасти = "Шины" Тогда
		Команда = "ПодборВТабличнуюЧастьШины";
	ИначеЕсли ИмяТабличнойЧасти = "Аккумуляторы" Тогда
		Команда = "ПодборВТабличнуюЧастьАккумуляторы";
	ИначеЕсли ИмяТабличнойЧасти =  "ПрочиеАгрегаты" Тогда
		Команда = "ПодборВТабличнуюЧастьПрочиеАгрегаты";
	КонецЕсли;
	СтруктураПараметровПодбора = Новый Структура();
	СтруктураПараметровПодбора.Вставить("Организация", Объект.Организация);
	СтруктураПараметровПодбора.Вставить("Команда", Команда);
	
	//СтруктураПараметровПодбора.Вставить("ПодбиратьУслуги", ЕстьУслуги);
	//СтруктураПараметровПодбора.Вставить("ОтборУслугПоСправочнику", Истина);
	
	ВременнаяДатаРасчетов = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	СтруктураПараметровПодбора.Вставить("ДатаРасчетов", ВременнаяДатаРасчетов);
	СтруктураПараметровПодбора.Вставить("Склад", Объект.СкладОтправитель);
	
	уатОбщегоНазначенияТиповыеКлиент.уатОткрытьПодборАгрегатов(ЭтотОбъект, СтруктураПараметровПодбора);
	
КонецПроцедуры //

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию агрегата;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
&НаКлиенте
Процедура ОбработкаПодбораАгрегатов(ИмяТабличнойЧасти, ЗначениеВыбора)
	
	Перем Агрегат, Модель;
	
	// Получим параметры подбора из структуры подбора.
	ЗначениеВыбора.Свойство("Агрегат",Агрегат);
	
	// Ищем выбранную позицию в таблице подобранных агрегатов.
	// Если найдем - выдаем сообщение; не найдем - добавим новую строку.
	СтруктураОтбора = Новый Структура();
	
	СтруктураОтбора.Вставить("СерияНоменклатуры",Агрегат);
		
	МассивСтрок = Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураОтбора);
	Если МассивСтрок.Количество() = 0 Тогда
		СтрокаТабличнойЧасти = Неопределено;
	Иначе
		СтрокаТабличнойЧасти = МассивСтрок[0];
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		// Нашли, сообщаем.
		ТекстНСТР = НСтр("en='This car part was added earlier!';ru='Данный агрегат был добавлен раннее!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
	Иначе
		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = Объект[ИмяТабличнойЧасти].Добавить();
		СтрокаТабличнойЧасти.СерияНоменклатуры	  = Агрегат;
	КонецЕсли;
	
КонецПроцедуры //

&НаСервере
Процедура ВидимостьЭлементовТО(НомерРемонта = 0)
	
	Если НомерРемонта = 0 Тогда
		ВидимостьЭлементовТО(1);
		ВидимостьЭлементовТО(2);
		ВидимостьЭлементовТО(3);
		Возврат;
	КонецЕсли;
	
	Если НомерРемонта = 1 Тогда
		Если ЗначениеЗаполнено(Объект.ВидОбслуживания) Тогда
			Элементы.ВыработкаПриТО.Видимость    = Истина;
			Элементы.ПараметрВыработки.Видимость = Истина;
			Элементы.ДекорацияТО1.Видимость      = Ложь;
			Элементы.ДекорацияТО1.Заголовок      = "";
			
		Иначе
			Элементы.ВыработкаПриТО.Видимость    = Ложь;
			Элементы.ПараметрВыработки.Видимость = Ложь;
			Элементы.ДекорацияТО1.Видимость      = Истина;
			Элементы.ДекорацияТО1.Заголовок      = " ";
		КонецЕсли;
		
	ИначеЕсли НомерРемонта = 2 Тогда
		Если ЗначениеЗаполнено(Объект.ВидОбслуживания2) Тогда
			Если Объект.ВидОбслуживания2.ИспользоватьВПланированииТО Тогда
				Элементы.ВыработкаПриТО2.Видимость    = Истина;
				Элементы.ПараметрВыработки2.Видимость = Истина;
				Элементы.ДекорацияТО2.Видимость       = Ложь;
				Элементы.ДекорацияТО2.Заголовок       = "";
				
			Иначе
				Элементы.ВыработкаПриТО2.Видимость    = Ложь;
				Элементы.ПараметрВыработки2.Видимость = Ложь;
				Элементы.ДекорацияТО2.Видимость       = Истина;
				Элементы.ДекорацияТО2.Заголовок       = НСтр("en='Maintenance is not planned';ru='ТО не планируется'");
			КонецЕсли;
			
		Иначе
			Элементы.ВыработкаПриТО2.Видимость    = Ложь;
			Элементы.ПараметрВыработки2.Видимость = Ложь;
			Элементы.ДекорацияТО2.Видимость       = Истина;
			Элементы.ДекорацияТО2.Заголовок       = " ";
		КонецЕсли;
		
	Иначе
		Если ЗначениеЗаполнено(Объект.ВидОбслуживания3) Тогда
			Если Объект.ВидОбслуживания3.ИспользоватьВПланированииТО Тогда
				Элементы.ВыработкаПриТО3.Видимость    = Истина;
				Элементы.ПараметрВыработки3.Видимость = Истина;
				Элементы.ДекорацияТО3.Видимость       = Ложь;
				Элементы.ДекорацияТО3.Заголовок       = "";
				
			Иначе
				Элементы.ВыработкаПриТО3.Видимость    = Ложь;
				Элементы.ПараметрВыработки3.Видимость = Ложь;
				Элементы.ДекорацияТО3.Видимость       = Истина;
				Элементы.ДекорацияТО3.Заголовок       = НСтр("en='Maintenance is not planned';ru='ТО не планируется'");
			КонецЕсли;
			
		Иначе
			Элементы.ВыработкаПриТО3.Видимость    = Ложь;
			Элементы.ПараметрВыработки3.Видимость = Ложь;
			Элементы.ДекорацияТО3.Видимость       = Истина;
			Элементы.ДекорацияТО3.Заголовок       = " ";
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоступностьЭлементовТО(НомерРемонта = 0)
	
	Если НомерРемонта = 0 Тогда
		ДоступностьЭлементовТО(1);
		ДоступностьЭлементовТО(2);
		ДоступностьЭлементовТО(3);
		Возврат;
	КонецЕсли;
	
	Если НомерРемонта = 1 Тогда
		УстановитьСвойствоЭлемента(Элементы.ВыработкаПриТО, "ТолькоПросмотр", Не ЗначениеЗаполнено(Объект.ПараметрВыработки));
		
	ИначеЕсли НомерРемонта = 2 Тогда
		УстановитьСвойствоЭлемента(Элементы.ВыработкаПриТО2, "ТолькоПросмотр", Не ЗначениеЗаполнено(Объект.ПараметрВыработки2));
		
	Иначе
		УстановитьСвойствоЭлемента(Элементы.ВыработкаПриТО3, "ТолькоПросмотр", Не ЗначениеЗаполнено(Объект.ПараметрВыработки3));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимость()
	Если Объект.СпособРемонта = ПредопределенноеЗначение("Перечисление.уатСпособыРемонта.Автосервис") Тогда
		Элементы.МестоРемонта.ТолькоПросмотр = Ложь;
		Элементы.Контрагент.Заголовок = НСтр("en='Car service';ru='Автосервис'");
		Элементы.Контрагент.Подсказка = НСтр("en='Use this field to specify the service center that performed the repairs.';ru='В этом поле необходимо указать автосервис, который выполнял ремонт.'");
	Иначе
		Элементы.МестоРемонта.ТолькоПросмотр = Истина;
		Элементы.Контрагент.Заголовок = НСтр("en='Warehouse';ru='Склад'");
		Элементы.Контрагент.Подсказка = НСтр("en='In this field you must specify the warehouse from which you want "
"to checkout materials.';ru='В этом поле необходимо указать склад, с которого необходимо "
"оформить выдачу материалов.'");
	КонецЕсли;
	
	РемонтВАвтосервисе = (Объект.СпособРемонта = ПредопределенноеЗначение("Перечисление.уатСпособыРемонта.Автосервис"));
	
	УстановитьСвойствоЭлемента(Элементы.ГруппаДоговор, "Видимость", РемонтВАвтосервисе);
	УстановитьСвойствоЭлемента(Элементы.ГруппаВхДок, "Видимость", РемонтВАвтосервисе);
	УстановитьСвойствоЭлемента(Элементы.Сделка, "Видимость", РемонтВАвтосервисе);
	УстановитьСвойствоЭлемента(Элементы.СтраницыИтогов, "Видимость", РемонтВАвтосервисе);
	
	УстановитьСвойствоЭлемента(Элементы.МатериалыСумма, "Видимость", РемонтВАвтосервисе);
	УстановитьСвойствоЭлемента(Элементы.РаботыСумма, "Видимость", РемонтВАвтосервисе);
	УстановитьСвойствоЭлемента(Элементы.МатериалыЦена, "Видимость", РемонтВАвтосервисе);
	УстановитьСвойствоЭлемента(Элементы.РаботыЦена, "Видимость", РемонтВАвтосервисе);
	
	УстановитьВидимостьИзмененияПоказанийПриборов();
	
	// Колонки налога показываем только тогда, когда его учитываем.
	УстановитьСвойствоЭлемента(Элементы.МатериалыСтавкаНДС, "Видимость", РемонтВАвтосервисе И Объект.УчитыватьНДС);
	УстановитьСвойствоЭлемента(Элементы.МатериалыСуммаНДС, "Видимость", РемонтВАвтосервисе И Объект.УчитыватьНДС);
	УстановитьСвойствоЭлемента(Элементы.МатериалыВсего, "Видимость", РемонтВАвтосервисе И Объект.УчитыватьНДС);
	УстановитьСвойствоЭлемента(Элементы.РаботыСтавкаНДС, "Видимость", РемонтВАвтосервисе И Объект.УчитыватьНДС);
	УстановитьСвойствоЭлемента(Элементы.РаботыСуммаНДС, "Видимость", РемонтВАвтосервисе И Объект.УчитыватьНДС);
	УстановитьСвойствоЭлемента(Элементы.РаботыВсего, "Видимость", РемонтВАвтосервисе И Объект.УчитыватьНДС);
	УстановитьСвойствоЭлемента(Элементы.ПланЗатрат, "Видимость", ИспользуетсяУчетЗатрат);
	УстановитьСвойствоЭлемента(Элементы.ГруппаСобственныеМатериалы, "Видимость", РемонтВАвтосервисе);
	УстановитьСвойствоЭлемента(Элементы.ГруппаПоступления, "Видимость", РемонтВАвтосервисе);
	
	Элементы.ГруппаПодотчетноеЛицо.Видимость = РемонтВАвтосервисе;
	Элементы.ПодотчетноеЛицо.Доступность = Объект.ОплатаПодотчетнымЛицом;
	Элементы.ДоговорКонтрагента.АвтоОтметкаНезаполненного = НЕ Объект.ОплатаПодотчетнымЛицом;
	Элементы.ДоговорКонтрагента.ОтметкаНезаполненного = Элементы.ДоговорКонтрагента.АвтоОтметкаНезаполненного И Объект.ДоговорКонтрагента.Пустая();
	
	ВывестиСуммовыеИтогиДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьИзмененияПоказанийПриборов()
	
	УстановитьСвойствоЭлемента(Элементы.СпидометрИзменен, "Доступность", флНаличиеСпидометра);
	УстановитьСвойствоЭлемента(Элементы.СчетчикМЧИзменен, "Доступность", НЕ флНаличиеСпидометра);
	
	УстановитьСвойствоЭлемента(Элементы.ПоказанияСпидометра, "Доступность", Объект.СпидометрИзменен);
	УстановитьСвойствоЭлемента(Элементы.ПоказанияСчетчикаМЧ, "Доступность", Объект.СчетчикМЧИзменен);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСвойствоЭлемента(ТекЭлемент, ИмяСвойства, ЗначениеСвойства)
	Если ТекЭлемент[ИмяСвойства] <> ЗначениеСвойства Тогда
		ТекЭлемент[ИмяСвойства] = ЗначениеСвойства;
	КонецЕсли;
КонецПроцедуры

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
&НаКлиенте
Процедура ОбработкаПодбора(Знач Оповещение, ИмяТабличнойЧасти, ЗначениеВыбора)
	
	Если ЗначениеВыбора.Свойство("АдресПодобраннойНоменклатурыВХранилище") Тогда
		МассивТоваров = ПолучитьТоварыИзВременногоХранилища(ЗначениеВыбора.АдресПодобраннойНоменклатурыВХранилище);
	Иначе
		МассивТоваров = ПолучитьТоварыИзВременногоХранилища(ЗначениеВыбора.АдресТоваровВХранилище);
	КонецЕсли;

	Для Каждого ТекСтрока из МассивТоваров Цикл
		
		Если ЭтоУслуга(ТекСтрока.Номенклатура) Тогда
			ПоказатьПредупреждение(Новый ОписаниеОповещения("ОбработкаПодбораЗавершение", ЭтотОбъект,
				Новый Структура("Оповещение", Оповещение)), НСтр("en='In this context, services are not matched!';ru='В данном контексте услуги не подбираются!'"));
			Возврат;
		КонецЕсли;

		СтруктураОтбора = Новый Структура();
		СтруктураОтбора.Вставить("Номенклатура", ТекСтрока.Номенклатура);

		СтруктураОтбора.Вставить("ЕдиницаИзмерения", ТекСтрока.ЕдиницаИзмерения);
		Если ИмяТабличнойЧасти = "Материалы" Тогда
			СтруктураОтбора.Вставить("Цена", ТекСтрока.Цена);
		КонецЕсли;
		
		МассивСтрок = Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураОтбора);
		Если МассивСтрок.Количество() = 0 Тогда
			СтрокаТабличнойЧасти = Неопределено;
		Иначе
			СтрокаТабличнойЧасти = МассивСтрок[0];
		КонецЕсли;
		
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество +   ТекСтрока.Количество;
			//РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
		Иначе
			// Не нашли - добавляем новую строку.
			СтрокаТабличнойЧасти = Объект[ИмяТабличнойЧасти].Добавить();
			СтрокаТабличнойЧасти.Номенклатура	  = ТекСтрока.Номенклатура;
			СтрокаТабличнойЧасти.Количество  	  = ТекСтрока.Количество;
			СтрокаТабличнойЧасти.ЕдиницаИзмерения = ТекСтрока.ЕдиницаИзмерения;
			Если ИмяТабличнойЧасти = "Материалы" Тогда
				Если Объект.СпособРемонта = ПредопределенноеЗначение("Перечисление.уатСпособыРемонта.Автосервис") Тогда
					СтрокаТабличнойЧасти.Цена = ТекСтрока.Цена;
				КонецЕсли;
				Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Цена) Тогда
					Если Объект.УчитыватьНДС Тогда
						СтрокаТабличнойЧасти.СтавкаНДС		  = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(
						СтрокаТабличнойЧасти.Номенклатура, "СтавкаНДС");
						РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
					КонецЕсли;
				Иначе
					ЗаполнитьЦенуПоКонтрагенту(СтрокаТабличнойЧасти, СтрокаТабличнойЧасти.Номенклатура);
				КОнецЕсли;
			КонецЕсли;

		КонецЕсли;
		
		Если ИмяТабличнойЧасти = "Материалы" Тогда
			РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
			РассчитатьСуммуВсегоВстрокеТЧ(СтрокаТабличнойЧасти);
		КонецЕсли;
	КонецЦикла;

	Если Не Оповещение = Неопределено Тогда 
		ВыполнитьОбработкуОповещения(Оповещение);
	КонецЕсли;
	
КонецПроцедуры //

&НаКлиенте
Процедура ОбработкаПодбораЗавершение(ДополнительныеПараметры) Экспорт
	
	Оповещение = ДополнительныеПараметры.Оповещение;
	
	Если Не Оповещение = Неопределено Тогда 
		ВыполнитьОбработкуОповещения(Оповещение);
	КонецЕсли;
	
КонецПроцедуры //

&НаКлиенте
Процедура ЗаполнитьПоЗаявкеНаРемонтЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        Объект.Материалы.Очистить();
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоЗаявкеНаРемонтМатериалыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        Объект.Работы.Очистить();
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуШинЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса =  КодВозвратаДиалога.Нет Тогда
        Возврат;
    Иначе
        Объект.Шины.Очистить();
    КонецЕсли;	
    
    ЗаполнитьТаблицуШинФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуШинФрагмент()
    
    ЗаполнитьТаблицуШинСервер();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуШинСервер()
	мШины = уатОбщегоНазначения.уатШиныТС(Объект.ТС);
	Для Каждого ТекСтрока Из мШины Цикл
		НоваяСтрока = Объект.Шины.Добавить();
		НоваяСтрока.СерияНоменклатуры = ТекСтрока.СерияНоменклатуры;
		НоваяСтрока.МестоУстановки = ТекСтрока.МестоУстановки;
		НоваяСтрока.Состояние = ТекСтрока.Состояние;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуАккумуляторовЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса =  КодВозвратаДиалога.Нет Тогда
        Возврат;
    Иначе
        Объект.Аккумуляторы.Очистить();
    КонецЕсли;	
    
    ЗаполнитьТаблицуАккумуляторовФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуАккумуляторовФрагмент()
    
    ЗаполнитьТаблицуАккумуляторовСервер();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуАккумуляторовСервер()
	мАккумуляторы = уатОбщегоНазначения.уатАккумуляторыТС(Объект.ТС);
	Для Каждого ТекСтрока Из мАккумуляторы Цикл
		НоваяСтрока = Объект.Аккумуляторы.Добавить();
		НоваяСтрока.СерияНоменклатуры = ТекСтрока.СерияНоменклатуры;
		НоваяСтрока.Состояние = ТекСтрока.Состояние;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуПрочихАгрегатовЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса =  КодВозвратаДиалога.Нет Тогда
        Возврат;
    Иначе
        Объект.ПрочиеАгрегаты.Очистить();
    КонецЕсли;	
    
    ЗаполнитьТаблицуПрочихАгрегатовФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТаблицуПрочихАгрегатовФрагмент()
    
    ЗаполнитьТаблицуПрочихАгрегатовСервер();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуПрочихАгрегатовСервер()
	мПрочиеАгрегаты = уатОбщегоНазначения.уатПрочиеАгрегатыТС(Объект.ТС);
	Для Каждого ТекСтрока Из мПрочиеАгрегаты Цикл
		НоваяСтрока = Объект.ПрочиеАгрегаты.Добавить();
		НоваяСтрока.СерияНоменклатуры = ТекСтрока.СерияНоменклатуры;
		НоваяСтрока.Состояние = ТекСтрока.Состояние;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ТСПриИзмененииКлиент()
	
	Если ИспользуетсяУчетЗатрат Тогда
		Если Не уатОбщегоНазначения.уатНайтиПланЗатрат(Объект.ПланЗатрат, Объект.Организация, Объект.ТС) Тогда 
			ТекстНСТР = НСтр("en='Cost plan is not found!';ru='Не найден план затрат!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		КонецЕсли;	
	КонецЕсли;	
	
	УстановитьВидимостьИзмененияПоказанийПриборов();
	
КонецПроцедуры

&НаСервере
Процедура ТСПриИзмененииСервер()
	
	флНаличиеСпидометра = НаличиеСпидометра(Объект.ТС);
	
	Если флНаличиеСпидометра Тогда
		Объект.ПоказанияСчетчикаМЧ = 0;
		Объект.СчетчикМЧИзменен = Ложь;
	Иначе
		Объект.ПоказанияСпидометра = 0;
		Объект.СпидометрИзменен = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыПодбора(ИмяТаблицы)

	ДатаРасчетов 	 = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	
	ЗаголовокПодбора = НСтр("en='Selection products and services in %1 (%2)';ru='Подбор номенклатуры в %1 (%2)'");
	Если ИмяТаблицы = "Материалы" Тогда
		ПредставлениеТаблицы = НСтр("en='Materials';ru='Материалы'");
	Иначе
		ПредставлениеТаблицы = НСтр("en='Own materials';ru='Собственные материалы'");
	КонецЕсли;
	ЗаголовокПодбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, Объект.Ссылка, ПредставлениеТаблицы);
	
	ПараметрыФормы = Новый Структура;
	Если ИмяТаблицы = "Материалы" И Объект.СпособРемонта = ПредопределенноеЗначение("Перечисление.уатСпособыРемонта.Автосервис") Тогда
		ПараметрыФормы.Вставить("ЕстьЦена", Истина);
		ПараметрыФормы.Вставить("ПоказыватьЦены", Истина);
		ПараметрыФормы.Вставить("Контрагент", Объект.Контрагент);
	Иначе
		ПараметрыФормы.Вставить("ЕстьЦена", Ложь);
		ПараметрыФормы.Вставить("ПоказыватьЦены", Ложь);
	КонецЕсли;
	ПараметрыФормы.Вставить("ЕстьКоличество", Истина);
	ПараметрыФормы.Вставить("ДатаРасчетов"  , ДатаРасчетов);
	ПараметрыФормы.Вставить("Валюта"        , Объект.ВалютаДокумента);
	Если ИмяТаблицы = "Материалы" Тогда
		ПараметрыФормы.Вставить("Склад"     , Объект.Контрагент);
	Иначе
		ПараметрыФормы.Вставить("Склад"     , Объект.СкладСобственныхМатериалов);
	КонецЕсли;
	ПараметрыФормы.Вставить("Заголовок"     , ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ВидПодбора"    , "");
	ПараметрыФормы.Вставить("ИмяТаблицы"    , ИмяТаблицы);
	ПараметрыФормы.Вставить("Услуги"        , ИмяТаблицы = "Услуги");
	ПараметрыФормы.Вставить("Организация"   , Объект.Организация);
	ПараметрыФормы.Вставить("ПоказыватьОстатки"  , Истина);
	ПараметрыФормы.Вставить("ПоказыватьСчетУчета", Истина);
	
	Возврат ПараметрыФормы;

КонецФункции

&НаСервере 
Функция ПолучитьТоварыИзВременногоХранилища(ЗначениеВыбора)
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ЗначениеВыбора);
	МассивТоваров = Новый Массив;
	Для Каждого ТекСтрока Из ТаблицаТоваров Цикл
		Структура = Новый Структура;
		Структура.Вставить("Номенклатура",		 ТекСтрока.Номенклатура);
		Структура.Вставить("ЕдиницаИзмерения",	 ТекСтрока.Номенклатура.ЕдиницаХраненияОстатков);
		Структура.Вставить("Количество",		 ТекСтрока.Количество);
		Структура.Вставить("Цена",				 ТекСтрока.Цена);
		МассивТоваров.Добавить(Структура);
	КонецЦикла;
	Возврат МассивТоваров;
КонецФункции

&НаКлиенте
Процедура ПересчитатьСуммыНДС()
	ПересчитатьСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС("Материалы");
	ПересчитатьСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС("Работы");
	ОбновитьВсегоВТЧТовары();
	ОбновитьВсегоВТЧУслуги();
	ОбновитьВсегоВТЧПоступленияТоваровИУслуг();
	ОбновитьПодвал();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПодвал()
	
	ОбновитьПодвалСервер();
	
КонецПроцедуры // ОбновитьПодвал()

&НаСервере
Процедура ОбновитьПодвалСервер()
	
	Всего    = Объект.Работы.Итог("Всего") + Объект.Материалы.Итог("Всего");
	ВсегоНДС = Объект.Работы.Итог("СуммаНДС") + Объект.Материалы.Итог("СуммаНДС");
	
	Если Не Объект.УчитыватьНДС Тогда
		ВсегоНДС = 0;
	КонецЕсли;
	
	ВывестиСуммовыеИтогиДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ВывестиСуммовыеИтогиДокумента()
	
	Если Объект.УчитыватьНДС Тогда 
		Если Объект.СуммаВключаетНДС Тогда 
			НадписьВсегоНДС = НСтр("en='VAT amount';ru='НДС в сумме'") + ":";
		Иначе 
			НадписьВсегоНДС = НСтр("en='VAT from above';ru='НДС сверху'") + ":";
		КонецЕсли;
		НадписьВсего = НСтр("en='Total including VAT';ru='Всего с НДС'");
		Элементы.СтраницыИтогов.ТекущаяСтраница = Элементы.ИтогоУчетНДС;
	Иначе 
		НадписьВсего = НСтр("en='Total';ru='Всего'");
		Элементы.СтраницыИтогов.ТекущаяСтраница = Элементы.ИтогоБезНДС;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ВалютаДокумента) Или Объект.ВалютаДокумента = мВалютаРегламентированногоУчета Тогда 
		НадписьКурс = "(1.0000)";
		Элементы.НадписьКурс.Видимость = Ложь;
		Элементы.НадписьКурс2.Видимость = Ложь;
	Иначе 
		НадписьКурс = "(" + Формат(Объект.КурсВзаиморасчетов, "ЧДЦ=4; ЧРД=.; ЧН=0.0000; ЧГ=0") + ")";
		Элементы.НадписьКурс.Видимость = Истина;
		Элементы.НадписьКурс2.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьРаботуПоОбслуживанию(НомерВидаРемонта)
	ТекВидРемонта = Объект["ВидОбслуживания" + ?(НомерВидаРемонта = 1, "", НомерВидаРемонта)];
	Если НЕ ЗначениеЗаполнено(ТекВидРемонта) ИЛИ НЕ ЗначениеЗаполнено(Объект.ТС) Тогда
		Возврат;
	КонецЕсли;
	
	Если НомерВидаРемонта = 1 Тогда
		мВыработкаПриТО = Объект.ВыработкаПриТО;
	ИначеЕсли НомерВидаРемонта = 2 Тогда
		мВыработкаПриТО = Объект.ВыработкаПриТО2;
	Иначе
		мВыработкаПриТО = Объект.ВыработкаПриТО3;
	КонецЕсли;

	МассивРабот = уатОбщегоНазначения.НайтиРаботыПоОбслуживанию(ТекВидРемонта, Объект.ТС);
	Если МассивРабот.Количество() <> 0  Тогда
		ДопПараметры = Новый Структура("МассивРабот, ТС", МассивРабот, Объект.ТС);
		ОповещениеВопрос = Новый ОписаниеОповещения("ДобавитьРаботуПоОбслуживаниюОтвет", ЭтотОбъект, ДопПараметры);
		ТекстНСТР = НСтр("en='Complete the service work according to repair type ""%1""?';ru='Заполнить материалы и работы по обслуживанию согласно виду ремонта ""%1""?'");
		ТекстНСТР = СтрШаблон(ТекстНСТР, ТекВидРемонта);
		ПоказатьВопрос(ОповещениеВопрос, ТекстНСТР, РежимДиалогаВопрос.ОКОтмена);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьРаботуПоОбслуживаниюОтвет(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.ОК Тогда
		ДобавитьРаботуПоОбслуживаниюЗаполнение(ДопПараметры.ТС, ДопПараметры.МассивРабот);
		ОбновитьВсегоВТЧУслуги();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДобавитьРаботуПоОбслуживаниюЗаполнение(ТС, МассивРабот)

	Для Каждого ТекСтрока Из МассивРабот Цикл
		Если ТипЗнч(ТекСтрока.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
			ТекСтроки = Объект.Материалы.НайтиСтроки(Новый Структура("Номенклатура", ТекСтрока.Номенклатура));
			Если ТекСтроки.Количество() = 0 Тогда
				НоваяСтрокаМатериал = Объект.Материалы.Добавить();
			Иначе
				НоваяСтрокаМатериал = ТекСтроки[0];
			КонецЕсли;
			
			НоваяСтрокаМатериал.Номенклатура = ТекСтрока.Номенклатура;
			НоваяСтрокаМатериал.Количество   = НоваяСтрокаМатериал.Количество + ТекСтрока.Количество;
			НоваяСтрокаМатериал.ЕдиницаИзмерения = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(НоваяСтрокаМатериал.Номенклатура, "ЕдиницаХраненияОстатков");
		Иначе
			
			ТекСтроки = Объект.Работы.НайтиСтроки(Новый Структура("Работа", ТекСтрока.Номенклатура));
			Если ТекСтроки.Количество() = 0 Тогда
				НоваяСтрокаМатериал = Объект.Работы.Добавить();
			Иначе
				НоваяСтрокаМатериал = ТекСтроки[0];
			КонецЕсли;
			
			НоваяСтрокаМатериал.Работа     = ТекСтрока.Номенклатура;
			
			КоличествоНЧ = ПолучитьКоличествоНЧРаботы(ТС.Модель, ТекСтрока.Номенклатура);
			НоваяСтрокаМатериал.Количество = НоваяСтрокаМатериал.Количество + (КоличествоНЧ * ТекСтрока.Количество);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПравоРедактированиеДокумента()
	Рез = ПравоДоступа("Редактирование", Метаданные.Документы.уатРемонтныйЛист);
	Возврат Рез;
КонецФункции

&НаСервереБезКонтекста
Функция НаличиеСпидометра(ТС)
	Если ЗначениеЗаполнено(ТС) Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатТС.Модель.НаличиеСпидометра КАК НаличиеСпидометра
		|ИЗ
		|	Справочник.уатТС КАК уатТС
		|ГДЕ
		|	уатТС.Ссылка = &ТС");
		Запрос.УстановитьПараметр("ТС", ТС);
		Рез = Запрос.Выполнить();
		
		Если Рез.Пустой() Тогда
			флНаличиеСпидометра = Истина;
		Иначе
			Выборка = Рез.Выбрать();
			Выборка.Следующий();
			флНаличиеСпидометра = Выборка.НаличиеСпидометра;
		КонецЕсли;
	Иначе
		флНаличиеСпидометра = Истина;
	КонецЕсли;
	
	Возврат флНаличиеСпидометра;
КонецФункции

&НаКлиенте
Процедура УстановитьОграничениеТипаСделка()
	ВедениеВзаиморасчетов = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(Объект.ДоговорКонтрагента, "ВедениеВзаиморасчетов");
	
	Если ВедениеВзаиморасчетов = ПредопределенноеЗначение("Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоНакладным") Тогда
		Элементы.Сделка.ОграничениеТипа = Новый ОписаниеТипов("ДокументСсылка.уатПоступлениеТоваровУслуг");
		Элементы.Сделка.АвтоОтметкаНезаполненного = Истина;
		Элементы.Сделка.Заголовок = НСтр("en='Income';ru='Поступление'");
		Элементы.Сделка.Подсказка = НСтр("en='Receipt of materials and services';ru='Поступление материалов и услуг'");
		
	ИначеЕсли ВедениеВзаиморасчетов = ПредопределенноеЗначение("Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам") Тогда
		Элементы.Сделка.ОграничениеТипа = Новый ОписаниеТипов("ДокументСсылка.уатСчетНаОплатуПоставщика");
		Элементы.Сделка.АвтоОтметкаНезаполненного = Истина;
		Элементы.Сделка.Заголовок = НСтр("en='Invoice';ru='Счет на оплату'");
		Элементы.Сделка.Подсказка = НСтр("en='Invoice for supplier';ru='Счет на оплату поставщика'");
		
	Иначе
		Элементы.Сделка.ОграничениеТипа = Новый ОписаниеТипов("Неопределено");
		Элементы.Сделка.АвтоОтметкаНезаполненного = Ложь;
		Элементы.Сделка.Заголовок = НСтр("en='Deal';ru='Сделка'");
		Элементы.Сделка.Подсказка = НСтр("en='Invoice or receipt of materials and services';ru='Счет на оплату поставщика или Поступление материалов и услуг'");
		
	КонецЕсли;
	
	Если НЕ Элементы.Сделка.АвтоОтметкаНезаполненного Тогда
		Элементы.Сделка.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПересчитатьСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС(ИмяТЧ)
	уатОбщегоНазначенияСервер.ПересчитатьСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС(Объект[ИмяТЧ], Объект.СуммаВключаетНДС);
КонецПроцедуры

&НаСервере
Процедура ПересчитатьЦеныТабличнойЧастиПоВалюте(ВалютаРасчетовПередИзменением, ИмяТЧ)
	уатОбщегоНазначенияСервер.ПересчитатьЦеныТабличнойЧастиПоВалюте(Объект, ВалютаРасчетовПередИзменением, ИмяТЧ);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦенуПоКонтрагенту(СтрокаТабличнойЧасти, Номенклатура)
	
	Если Объект.СпособРемонта <> ПредопределенноеЗначение("Перечисление.уатСпособыРемонта.Автосервис") Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Номенклатура) Тогда
		Если Объект.УчитыватьНДС Тогда
			Если ТипЗнч(Номенклатура) = Тип("СправочникСсылка.уатРаботыПоРемонту") Тогда
				СтрокаТабличнойЧасти.СтавкаНДС = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(
					уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(
					Номенклатура, "Номенклатура"), "СтавкаНДС");
			Иначе
				СтрокаТабличнойЧасти.СтавкаНДС = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(
					Номенклатура, "СтавкаНДС");
			КонецЕсли;
		Иначе
			СтрокаТабличнойЧасти.СтавкаНДС = Неопределено;
		КонецЕсли;
		
		СтруктураЦенаВалюта = уатОбщегоНазначения.уатНайтиЦенуНоменклатуры(Объект.ДатаОкончания, Номенклатура, Объект.Контрагент, Ложь);
		мЦена = 0;
		Если ЗначениеЗаполнено(СтруктураЦенаВалюта.Цена) Тогда
			мЦена = СтруктураЦенаВалюта.Цена;
			мЦена = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(мЦена,
			СтруктураЦенаВалюта.Валюта,
			Объект.ВалютаДокумента,
			Объект.ДатаОкончания, Объект.ДатаОкончания);
		КонецЕсли;
		СтрокаТабличнойЧасти.Цена = мЦена;
		РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемВопрос(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.ОК Тогда
		флВопросЗакрытиеФормы = Ложь;
		Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура КонтрольСуммыРаботИЗапчастейПоПоступлениям(ВызовПередЗакрытиемФормы = Ложь)
	Если Объект.СпособРемонта <> ПредопределенноеЗначение("Перечисление.уатСпособыРемонта.Автосервис")
		ИЛИ Объект.ПоступленияМатериаловИУслуг.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СуммаТоваров = Объект.Материалы.Итог("Сумма")
		+ ?(Объект.УчитыватьНДС И НЕ Объект.СуммаВключаетНДС, Объект.Материалы.Итог("СуммаНДС"), 0);
	СуммаРабот   = Объект.Работы.Итог("Сумма")
		+ ?(Объект.УчитыватьНДС И НЕ Объект.СуммаВключаетНДС, Объект.Работы.Итог("СуммаНДС"), 0);
		
	СуммаПоступленияТоваров = 0;
	СуммаПоступленияУслуг   = 0;
	Для Каждого СтрокаТабличнойЧасти Из Объект.ПоступленияМатериаловИУслуг Цикл
		СуммыПоступления = ПолучитьСуммыПоступленияТоваровИУслуг(СтрокаТабличнойЧасти.ПоступлениеТоваровИУслуг);
		СуммаПоступленияТоваров = СуммаПоступленияТоваров + СуммыПоступления.СуммаТоваров;
		СуммаПоступленияУслуг   = СуммаПоступленияУслуг   + СуммыПоступления.СуммаУслуг;
	КонецЦикла;
	
	ТекстОшибки = "";
	Если СуммаТоваров <> СуммаПоступленияТоваров И СуммаРабот <> СуммаПоступленияУслуг Тогда
		ТекстОшибки = "работ и запчастей";
	ИначеЕсли СуммаТоваров <> СуммаПоступленияТоваров Тогда
		ТекстОшибки = "запчастей";
	ИначеЕсли СуммаРабот <> СуммаПоступленияУслуг Тогда
		ТекстОшибки = "работ";
	КонецЕсли;
	
	Если ТекстОшибки <> "" Тогда
		уатОбщегоНазначенияТиповые.СообщитьОбОшибке("Сумма " + ТекстОшибки + " не соответствует сумме Поступлений товаров и услуг.");
		флВопросЗакрытиеФормы = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииСервер()
	
	Элементы.МестоРемонта.СписокВыбора.Очистить();
	Если ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Ссылка", Объект.Контрагент);
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КонтрагентыПунктыНазначения.ПунктНазначения КАК ПунктНазначения,
		|	КонтрагентыПунктыНазначения.КонтактноеЛицо КАК КонтактноеЛицо,
		|	1 КАК Порядок
		|ИЗ
		|	Справочник.Контрагенты.ПунктыНазначения КАК КонтрагентыПунктыНазначения
		|ГДЕ
		|	КонтрагентыПунктыНазначения.Ссылка = &Ссылка
		|	И КонтрагентыПунктыНазначения.Основной
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КонтрагентыПунктыНазначения.ПунктНазначения,
		|	КонтрагентыПунктыНазначения.КонтактноеЛицо,
		|	2
		|ИЗ
		|	Справочник.Контрагенты.ПунктыНазначения КАК КонтрагентыПунктыНазначения
		|ГДЕ
		|	КонтрагентыПунктыНазначения.Ссылка = &Ссылка
		|	И НЕ КонтрагентыПунктыНазначения.Основной
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(Объект.МестоРемонта) Тогда
				Объект.МестоРемонта = Выборка.ПунктНазначения;
			КонецЕсли;
			Элементы.МестоРемонта.СписокВыбора.Добавить(Выборка.ПунктНазначения);
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.Склады") Тогда
		Объект.МестоРемонта  = уатОбщегоНазначения_уэ.АдресСклада(Объект.Контрагент);
		Если ЗначениеЗаполнено(Объект.МестоРемонта) Тогда
			Элементы.МестоРемонта.СписокВыбора.Добавить(Объект.МестоРемонта);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыПодбора(ЗначенияЗаполнения,Параметр) Экспорт	
	Если НЕ ЗначенияЗаполнения = Неопределено
		И ЗначенияЗаполнения.Свойство("Работы")
		И ЗначенияЗаполнения.Свойство("Запчасти")Тогда
		
		Для Каждого ТекСтрока Из ЗначенияЗаполнения.Запчасти Цикл
			мсвСтрок = Объект.Материалы.НайтиСтроки(Новый Структура("Номенклатура", ТекСтрока.Номенклатура));
			Если мсвСтрок.Количество() <> 0 Тогда
				НоваяСтрокаМатериал = мсвСтрок[0];
			Иначе
				НоваяСтрокаМатериал = Объект.Материалы.Добавить();
			КонецЕсли;
			НоваяСтрокаМатериал.Номенклатура = ТекСтрока.Номенклатура;
			НоваяСтрокаМатериал.Количество   = НоваяСтрокаМатериал.Количество + ТекСтрока.Количество;
			НоваяСтрокаМатериал.ЕдиницаИзмерения = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(НоваяСтрокаМатериал.Номенклатура, "ЕдиницаХраненияОстатков");
			ЗаполнитьЦенуПоКонтрагенту(НоваяСтрокаМатериал, НоваяСтрокаМатериал.Номенклатура);
		КонецЦикла;
		
		Для Каждого ТекСтрока Из ЗначенияЗаполнения.Работы Цикл
			мсвСтрок = Объект.Работы.НайтиСтроки(Новый Структура("Работа", ТекСтрока.Номенклатура));
			Если мсвСтрок.Количество() <> 0 Тогда
				НоваяСтрокаМатериал = мсвСтрок[0];
			Иначе
				НоваяСтрокаМатериал = Объект.Работы.Добавить();
			КонецЕсли;
			НоваяСтрокаМатериал.Работа     = ТекСтрока.Номенклатура;
			
			КоличествоНЧ = ПолучитьКоличествоНЧРаботы(уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.ТС, "Модель"), ТекСтрока.Номенклатура);
			НоваяСтрокаМатериал.Количество = НоваяСтрокаМатериал.Количество + (КоличествоНЧ * ТекСтрока.Количество);
			ЗаполнитьЦенуПоКонтрагенту(НоваяСтрокаМатериал, НоваяСтрокаМатериал.Работа);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборВидовОбслуживания()
	
	РазрешитьВыборТолькоЗакрепленныхВидовОбслуживания = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.РазрешитьВыборТолькоЗакрепленныхВидовОбслуживания"));
	
	Если РазрешитьВыборТолькоЗакрепленныхВидовОбслуживания = ПредопределенноеЗначение("Перечисление.уатВидыКонтроля.Запрещать") Тогда
		МассивВидовОбслуживания = уатОбщегоНазначения.ПолучитьРазрешенныеВидыТО(Объект.ТС);
		
		МассивПарамВыбора = Новый Массив();
		МассивПарамВыбора.Добавить(Новый ПараметрВыбора("Отбор.Ссылка",
		Новый ФиксированныйМассив(МассивВидовОбслуживания)));
		
		Элементы.ВидОбслуживания.ПараметрыВыбора  = Новый ФиксированныйМассив(МассивПарамВыбора);
		Элементы.ВидОбслуживания2.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПарамВыбора);
		Элементы.ВидОбслуживания3.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПарамВыбора);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВывестиПредупреждениеООтбореВидовОбслуживания(ВидОбслуживания)
	
	Если РазрешитьВыборТолькоЗакрепленныхВидовОбслуживания = ПредопределенноеЗначение("Перечисление.уатВидыКонтроля.Предупреждать") Тогда
		МассивВидовОбслуживания = уатОбщегоНазначения.ПолучитьРазрешенныеВидыТО(Объект.ТС);
		
		НайтиВидОбслуживания = МассивВидовОбслуживания.Найти(ВидОбслуживания);
		Если НайтиВидОбслуживания = Неопределено Тогда
			ТекстНСТР = СтрШаблон(НСтр("ru='Вид ремонта %1 не запланирован в модели ТС'"), ВидОбслуживания);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция СтруктураОтбораТС()
	
	СтруктураОтбора = Новый Структура();
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Объект.Организация);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
		СтруктураОтбора.Вставить("Подразделение", Объект.Подразделение);
	КонецЕсли;
	
	Возврат СтруктураОтбора;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьНоменклатуруВТЧПоШтрихкоду(Результат, ДопПараметры = Неопределено) Экспорт
	
	Если Результат = Неопределено ИЛИ НЕ ЗначениеЗаполнено(Результат.Объект)
		ИЛИ ТипЗнч(Результат.Объект) <> Тип("СправочникСсылка.Номенклатура") Тогда
		Возврат;
	КонецЕсли;
	Номенклатура = Результат.Объект;
	
	ИмяТЧ = ?(Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаМатериалы, "Материалы", "СобственныеМатериалы");
	
	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	// Если найдем - увеличим количество; не найдем - добавим новую строку.
	МассивСтрок = Объект[ИмяТЧ].НайтиСтроки(Новый Структура("Номенклатура", Номенклатура));
	Если МассивСтрок.Количество() = 0 Тогда
		СтрокаТабличнойЧасти = Неопределено;
	Иначе
		СтрокаТабличнойЧасти = МассивСтрок[0];
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		// Нашли, увеличиваем количество в первой найденной строке.
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + 1;
	Иначе
		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти = Объект[ИмяТЧ].Добавить();
		СтрокаТабличнойЧасти.Номенклатура = Номенклатура;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(
			СтрокаТабличнойЧасти.Номенклатура, "ЕдиницаХраненияОстатков");
		СтрокаТабличнойЧасти.Количество = 1;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

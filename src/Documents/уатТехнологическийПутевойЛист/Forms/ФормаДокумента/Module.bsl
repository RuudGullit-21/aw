
#Область ПеременныеФормы

&НаКлиенте
Перем ПредупреждениеПревышениеУровняТопливаВБаке;

#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	уатЗащищенныеФункцииСервер.уатДокументФормаЭлементаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, Объект, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	УстановитьВидПодменюКарты();
	
	ПараметрОбъектКопирования = Параметры.ЗначениеКопирования;
	мКопированиеДокумента = ЗначениеЗаполнено(ПараметрОбъектКопирования);
	
	// Установка реквизитов формы.
	Если НЕ ЗначениеЗаполнено(Объект.Дата) Тогда
		Объект.Дата = ТекущаяДата();
	КонецЕсли;
	
	уатОбщегоНазначенияСервер.НастроитьПолеПодразделение(Элементы.Подразделение, "Объект.Организация");
	Если НЕ ПравоДоступа("Редактирование", Метаданные.Документы.уатТехнологическийПутевойЛист) Тогда
		Элементы.ОстатокТопливаВыезд.ТолькоПросмотр = Истина;
		Элементы.ОстатокТопливаВозврат.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	ТС = Объект.ТС;
	
	Если Объект.Ссылка.Пустая() Тогда 
		Объект.Рассчитан = Ложь;
		
		Если ЗначениеЗаполнено(Объект.Организация) Тогда
			ПриИзмененииОрганизации(Истина);
		КонецЕсли;
		
		Если Объект.ДатаВыезда = '00010101' И Объект.ДатаВозвращения = '00010101' Тогда
			УстановитьДатыВыездаВозвращения();
		КонецЕсли;
		
		// Было копирование или ввод на основании
		Если ЗначениеЗаполнено(Объект.ТС) Тогда
			ТС = Неопределено;
			ИнициализацияДанныхАвтомобиляСервер(Ложь);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ТС.Модель) Тогда
		Если Объект.ТС.Модель.НаличиеСпидометра Тогда
			Элементы.ДекорацияОдометр.Заголовок = НСтр("en='Odometer';ru='Одометр'");
		Иначе
			Элементы.ДекорацияОдометр.Заголовок = НСтр("en='Counter m/h';ru='Счетчик м/ч'");
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ПланЗатрат.Видимость = ПолучитьФункциональнуюОпцию("уатИспользоватьУчетДоходовИРасходов");
		
	ВывестиТаблицуЗаправокСервер();
	
	ПроцентИзмененияНормыТемпература = Строка(уатПутевыеЛисты.уатПолучитьКоэффициентИзмененияНормыДляТемпературы(Объект.Температура)) + "%";
	УстановитьФорматированиеТочностиОстатковГСМ();
	
	Если НЕ Объект.Рассчитан Тогда
		ПересчетВыданногоГСМСервер();
	КонецЕсли;
	
	Для Каждого ТекСтрока Из Объект.РасходГСМ Цикл
		Если Объект.ТС = ТекСтрока.ТС Тогда
			ОстатокТопливаВыезд   = ТекСтрока.ОстатокПриВыезде;
			ОстатокТопливаВозврат = ТекСтрока.ОстатокПриВозвращении;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	РедактироватьЗаправкуГСМВДиалоге = ХранилищеОбщихНастроек.Загрузить("Документ.уатТехнологическийПутевойЛист", "РедактироватьЗаправкуГСМВДиалоге");
	Элементы.РедактироватьЗаправкуГСМВДиалоге.Пометка = РедактироватьЗаправкуГСМВДиалоге;
	
	Элементы.ЗаправкиГСМВидЗаправки.СписокВыбора.Очистить();
	Для Каждого ТекВидЗаправки Из уатОбщегоНазначения.СписокВидовЗаправок() Цикл
		Элементы.ЗаправкиГСМВидЗаправки.СписокВыбора.Добавить(ТекВидЗаправки.Значение, ТекВидЗаправки.Представление);
	КонецЦикла;
	
	УстановитьДоступностьРассчитанногоДокумента();
	
	Если Не ПравоДоступаИзменениеЗаправкиГСМ() Тогда
		Элементы.ЗаправкиГСМ.ТолькоПросмотр = Истина;
		Элементы.РедактироватьЗаправкуГСМВДиалоге.Доступность = Ложь;
		Элементы.ЗаправкиГСМДобавитьСуществующуюЗаправку.Доступность = Ложь;
	КонецЕсли;
	
	ОбновитьНадписьРассчитанСервер();
	СформироватьСписокВыбораТСвЗаправкахГСМСервер();
	ОбновитьСписокВыбораЭкипажаСервер();
	
	Элементы.РасходГСМРасходПоНорме.Доступность = уатПраваИНастройки.уатПраво("РедактированиеНормативногоРасходаГСМ");
	
	// Обновим картинки просроченных документов
	ОбновитьФлагПросроченныхДокументовТС();
	ОбновитьФлагПросроченныхДокументовВодителей();
	
	// ++ проф/корп
	Если НЕ Константы.уатИспользоватьOmnicomm.Получить()
		И НЕ Константы.уатИспользоватьWialon.Получить()
		И НЕ Константы.уатИспользоватьАвтоГРАФ.Получить()
		И НЕ Константы.уатИспользоватьСКАУТ.Получить()
		// ITOB +++
		И НЕ Константы.уатИспользоватьЦСМ.Получить() Тогда
		// ITOB ---
		
		Элементы.ФормаЗаполнитьПоМониторингуПриВыезде.Видимость = Ложь;
		
		ВидимостьGPS = Константы.уатИспользоватьМониторинг.Получить() И уатРаботаСРасширениями.ПСМ_ПроверитьПодключение();
		Элементы.ФормаЗаполнитьПоМониторингуПриВозврате.Видимость	= ВидимостьGPS;
		Элементы.ОдометрВыезда.КнопкаВыбора 						= ВидимостьGPS;
		Элементы.ОдометрВозвращения.КнопкаВыбора 					= ВидимостьGPS;
	КонецЕсли;
	
	ОбновитьКэшПравПоGPS();
	Если НЕ Объект.Рассчитан Тогда
		УстановитьВозможностьРедактированияДанныхПоGPS();
	КонецЕсли;
	
	Если Объект.Организация <> Справочники.Организации.ПустаяСсылка() Тогда
		мВидимостьРеквизитовНДС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
			ПланыВидовХарактеристик.уатПраваИНастройки.УчитыватьНДС);
	КонецЕсли;
	// -- проф/корп
	
	ОбновитьДинамическиеКолонкиТЧСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	уатЗащищенныеФункцииКлиент.уатДокументФормаЭлементаПриОткрытии(Отказ, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	УстановитьВидимость();
	ОбновитьЗаправкиВсего();
	мКопированиеДокумента = Ложь;
	Модифицированность = Ложь;
	
	ДатаВыезда = Объект.ДатаВыезда;
		
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ОбновитьДинамическиеКолонкиТЧСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	// проверка попадания заправок в период ПЛ
	Если НЕ ПараметрыЗаписи.Свойство("ЗаписьЗаправкиГСМ") Тогда
		Если НЕ уатПутевыеЛисты.ПроверитьПопаданиеЗаправокСливовВПериодПЛ(Объект.Организация, Объект.Ссылка, Объект.ДатаВыезда, Объект.ДатаВозвращения) Тогда
			ТекстНСТР = НСтр("en='Waybill was not recorded: entered fuelling and fuel drain does not fall within the period of waybill!';ru='Путевой лист не был записан: введенные заправки ГСМ не попадают в период путевого листа!'");
			уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, Отказ,, СтатусСообщения.Внимание);
			Возврат;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	// изменение времени заправки на время выезда ПЛ
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		уатПутевыеЛисты.ИзменитьВремяЗаправокПЛ(ТекущийОбъект);
	КонецЕсли;
	
	ОбновитьДинамическиеКолонкиТЧСервер();
	ОбновитьНадписьРассчитанСервер();
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		УстановитьДоступностьРассчитанногоДокумента();
	КонецЕсли;
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ИмяСобытия = "ЗаправкаГСМ_Запись" Тогда 
		ВывестиТаблицуЗаправок();
		ПересчетВыданногоГСМСервер();
		
	ИначеЕсли (ИмяСобытия = "ДобавлениеЗаправкиИзПЛ" ИЛИ ИмяСобытия = "РедактированиеЗаправкиИзПЛ") И ЗначениеЗаполнено(Параметр) Тогда
		ВывестиТаблицуЗаправок();
		ПересчетВыданногоГСМСервер();
		Попытка
			Записать(Новый Структура("ЗаписьЗаправкиГСМ"));
		Исключение
		КонецПопытки;
		
	ИначеЕсли ИмяСобытия = "ПревышениеУровняТопливаВБаке" Тогда
		//ПоказатьПредупреждение(Неопределено, Параметр);
		ПредупреждениеПревышениеУровняТопливаВБаке = Параметр;
		ПодключитьОбработчикОжидания("Подключаемый_ПревышениеУровняТопливаВБаке", 0.1, Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
		
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ЗаполнитьНачальныеОстатки(Команда)
	Если ЗначениеЗаполнено(Объект.ТС) Тогда
		МодельТС = ПолучитьЗначениеРеквизита(Объект.ТС, "Модель");
		
		ОстатокТопливаВыезд = уатОбщегоНазначения.уатОстатокГСМнаТС(Объект.ДатаВыезда, Объект.ТС,
			ПолучитьЗначениеРеквизита(МодельТС, "ОсновноеТопливо"), Объект.Ссылка);
		ОстатокТопливаВыездПриИзменении(Элементы.ОстатокТопливаВыезд);
		
		Если ПолучитьЗначениеРеквизита(МодельТС, "НаличиеСпидометра") = Истина Тогда
			Объект.ОдометрВыезда = уатОбщегоНазначения.уатТекущийСпидометр(Объект.ТС, Объект.ДатаВыезда);
		Иначе
			Объект.ОдометрВыезда = уатОбщегоНазначения.уатТекущийСчетчикМЧ(Объект.ТС, Объект.ДатаВыезда);
		КонецЕсли;
	КонецЕсли;	
	
	ОбновитьНадписьПробег();
КонецПроцедуры

&НаКлиенте
Процедура РасчетИтогов(Команда)
	Перем Отказ;
	
	// проверка попадания заправок в период ПЛ
	Если НЕ уатПутевыеЛисты.ПроверитьПопаданиеЗаправокСливовВПериодПЛ(Объект.Организация, Объект.Ссылка, Объект.ДатаВыезда, Объект.ДатаВозвращения) Тогда
		Объект.Рассчитан = Ложь;
		ТекстНСТР = НСтр("en='Document was not calculated: input fuelings are not included in period of the waybill!';ru='Документ не был рассчитан: введенные заправки ГСМ не попадают в период путевого листа!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	НаименованиеССМ = "";
	Если ТребуетсяПолучениеДанныхПоGPS(НаименованиеССМ) Тогда 
		ТекстОповещения = НСтр("en = 'NTRS'; ru = 'Выполняется получение данных из'") + " " + НаименованиеССМ;
		Состояние(,, ТекстОповещения, БиблиотекаКартинок.Информация32);
	КонецЕсли;
	
	ТекстСообщОшибки = "";
	Объект.Рассчитан = РасчетИтоговСервер(Отказ, Ложь, ТекстСообщОшибки);
	
	ОбновитьНадписьРассчитан();
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСпидометрПоЗаданию(Команда)
	Объект.ОдометрВозвращения = Объект.ОдометрВыезда;
	ОбновитьНадписьПробег();
КонецПроцедуры

&НаКлиенте
Процедура ItobПоказатьМаршрутНаКарте(Команда)
	ПараметрыФормы = Новый Структура("РежимОткрытия", "ПостроениеМаршрутов");
	ОткрытьФорму("Обработка.ItobРабочееМестоДиспетчера.Форма", ПараметрыФормы);
	ПараметрыОповещения = Новый Структура("НачПериода, КонПериода, Объект",
	НачалоДня(?(Объект.ДатаВыезда = '00010101', ТекущаяДата(), Объект.ДатаВыезда)),
	КонецДня(?(Объект.ДатаВозвращения = '00010101', ТекущаяДата(), Объект.ДатаВозвращения)),
	Объект.ТС);
	
	Оповестить("РежимМаршрута", ПараметрыОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоМониторингуПриВыезде(Команда)
	
	ОбъектСтруктура = Новый Структура;
	ОбъектСтруктура.Вставить("Организация",           Объект.Организация);
	ОбъектСтруктура.Вставить("ТранспортноеСредство",  Объект.ТС);
	ОбъектСтруктура.Вставить("ДатаВыезда",            Объект.ДатаВыезда);
	ОбъектСтруктура.Вставить("ДатаВозвращения",       Объект.ДатаВозвращения);
	ОбъектСтруктура.Вставить("СпидометрВыезда",       Объект.ОдометрВыезда);
	ОбъектСтруктура.Вставить("СпидометрВозвращения",  Объект.ОдометрВозвращения);
	ОбъектСтруктура.Вставить("РасчетФактРасходаГСМ",  Объект.РасчетФактРасходаГСМ);
	ОбъектСтруктура.Вставить("Прицепы", Новый Массив());
	ОбъектСтруктура.Вставить("флВыезд", Истина);
	
	РезультатСтруктура = Новый Структура;
	
	// РАСЧЕТ.
	уатМониторинг.РассчитатьСпидометрПоМониторингу(ОбъектСтруктура, РезультатСтруктура);
	
	// Заполнение основных реквизитов.
	Если РезультатСтруктура.Свойство("НачальныйПробегПоGPS") Тогда
		Объект.ОдометрВыезда = РезультатСтруктура.НачальныйПробегПоGPS;
	КонецЕсли;
	
	// Заполнение данных по прицепам.
	Для Каждого ТекПрицеп Из РезультатСтруктура.Прицепы Цикл 
		НайдСтроки = Объект.Прицепы.НайтиСтроки(Новый Структура("ТС", ТекПрицеп.ТС));
		Если НайдСтроки.Количество() Тогда
			Если ТекПрицеп.Свойство("НачальныйПробегПоGPS") Тогда
				НайдСтроки[0].СчетчикМЧВыезда = ТекПрицеп.НачальныйПробегПоGPS;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если РезультатСтруктура.Свойство("РасходТоплива") Тогда
		ЗаполнитьГСМПоGPSСервер(РезультатСтруктура, Истина);
	Иначе
		ЗаполнитьГСМПоGPSСервер(, Истина);
	КонецЕсли;

	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоМониторингуПриВозврате(Команда)
	
	ОбъектСтруктура = Новый Структура;
	ОбъектСтруктура.Вставить("Организация",          Объект.Организация);
	ОбъектСтруктура.Вставить("ТранспортноеСредство", Объект.ТС);
	ОбъектСтруктура.Вставить("ДатаВыезда",           Объект.ДатаВыезда);
	ОбъектСтруктура.Вставить("ДатаВозвращения",      Объект.ДатаВозвращения);
	ОбъектСтруктура.Вставить("СпидометрВыезда",      Объект.ОдометрВыезда);
	ОбъектСтруктура.Вставить("СпидометрВозвращения", Объект.ОдометрВозвращения);
	ОбъектСтруктура.Вставить("РасчетФактРасходаГСМ", Объект.РасчетФактРасходаГСМ);
	ОбъектСтруктура.Вставить("Прицепы",              Новый Массив);
		
	РезультатСтруктура = Новый Структура;
	
	// РАСЧЕТ.
	уатМониторинг.РассчитатьСпидометрПоМониторингу(ОбъектСтруктура, РезультатСтруктура);
	
	// Заполнение основных реквизитов.
	Если РезультатСтруктура.Свойство("СчетчикВозвращения") Тогда
		Объект.ОдометрВозвращения = РезультатСтруктура.СчетчикВозвращения;
	КонецЕсли;
	Если РезультатСтруктура.Свойство("СчетчикПоGPS") Тогда
		Объект.ПробегПоGPS = РезультатСтруктура.СчетчикПоGPS;
	КонецЕсли;
	
	Если РезультатСтруктура.Свойство("РасходТоплива") Тогда
		ЗаполнитьГСМПоGPSСервер(РезультатСтруктура);
	Иначе
		ЗаполнитьГСМПоGPSСервер();
	КонецЕсли;
	
	ОбновитьНадписьПробег();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоМониторингуПриВозвратеТолькоОдометр(Команда)
	
	ОбъектСтруктура = Новый Структура;
	ОбъектСтруктура.Вставить("Организация",          Объект.Организация);
	ОбъектСтруктура.Вставить("ТранспортноеСредство", Объект.ТС);
	ОбъектСтруктура.Вставить("ДатаВыезда",           Объект.ДатаВыезда);
	ОбъектСтруктура.Вставить("ДатаВозвращения",      Объект.ДатаВозвращения);
	ОбъектСтруктура.Вставить("СпидометрВыезда",      Объект.ОдометрВыезда);
	ОбъектСтруктура.Вставить("СпидометрВозвращения", Объект.ОдометрВозвращения);
	ОбъектСтруктура.Вставить("РасчетФактРасходаГСМ", Объект.РасчетФактРасходаГСМ);
	ОбъектСтруктура.Вставить("флТолькоОдометрВозвращения", Истина);
	ОбъектСтруктура.Вставить("Прицепы",              Новый Массив);
		
	РезультатСтруктура = Новый Структура;
	
	// РАСЧЕТ.
	уатМониторинг.РассчитатьСпидометрПоМониторингу(ОбъектСтруктура, РезультатСтруктура);
	
	// Заполнение основных реквизитов.
	Если РезультатСтруктура.Свойство("СчетчикВозвращения") Тогда
		Объект.ОдометрВозвращения = РезультатСтруктура.СчетчикВозвращения;
	КонецЕсли;
	
	ОбновитьНадписьПробег();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ItobОтчетПоТопливу(Команда)
	
	// Определяем привязанный терминал
	ПривязанныйТерминал = ItobОперативныйМониторингВызовСервера.ПолучитьПривязанныйТерминал(Объект.ТС, Объект.ДатаВозвращения);
	Если НЕ ЗначениеЗаполнено(ПривязанныйТерминал) Тогда
		ТекстНСТР = НСтр("en='There is no terminal for vehicle';ru='К транспортному средству не привязан терминал'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		Возврат;
	КонецЕсли;
	
	СписокПараметров = Новый СписокЗначений;
	СписокПараметров.Добавить(НачалоДня(?(Объект.ДатаВыезда='00010101',ТекущаяДата(),Объект.ДатаВыезда)),"НачПериода");
	СписокПараметров.Добавить(КонецДня(?(Объект.ДатаВозвращения='00010101',ТекущаяДата(),Объект.ДатаВозвращения)),"КонПериода");
	СписокПараметров.Добавить(Объект.ТС,"Объект");
	СписокПараметров.Добавить("Пробег","Метод");
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("СписокПараметров", СписокПараметров);
	ПараметрыОтчета.Вставить("Терминал", ПривязанныйТерминал);
	ПараметрыОтчета.Вставить("Объект",   ПривязанныйТерминал);

	ОткрытьФорму("Отчет.ItobОтчетПоТопливу.Форма", ПараметрыОтчета);
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	УстановитьДатыВыездаВозвращения();
	ИнициализацияДанныхАвтомобиля();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	ПриИзмененииОрганизации();
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииОрганизации(ВызовПриОткрытии = Ложь)
	УстановитьФорматированиеТочностиОстатковГСМ();
	
	Если ПолучитьФункциональнуюОпцию("уатИспользоватьУчетДоходовИРасходов") Тогда
		Если Не уатОбщегоНазначения.уатНайтиПланЗатрат(Объект.ПланЗатрат, Объект.Организация, Объект.ТС,
			ПолучитьЗначениеРеквизита(Объект.ТС, "Колонна")) Тогда
			
			ТекстНСТР = НСтр("en='Cost plan is not found!';ru='Не найден план затрат!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		КонецЕсли;	
	КонецЕсли;
	
	Элементы.ПланЗатрат.Видимость = ПолучитьФункциональнуюОпцию("уатИспользоватьУчетДоходовИРасходов");
	
	Если ПолучитьПраваИНастройкиПользователя(Объект.Организация, ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ИспользоватьУчетНормативногоРасходаТехЖидкостей")) = ЛОЖЬ Тогда
		мсвСтрокУдаления = Новый Массив;
		Для Каждого ТекСтрока Из Объект.РасходГСМ Цикл
			Если уатГСМ.ЭтоТехническаяЖидкость(ТекСтрока.ГСМ) Тогда
				мсвСтрокУдаления.Добавить(ТекСтрока);
			КонецЕсли;
		КонецЦикла;
		Для Каждого ТекСтрока Из мсвСтрокУдаления Цикл
			Объект.РасходГСМ.Удалить(ТекСтрока);
		КонецЦикла;
	КонецЕсли;
		
	Если (НЕ ВызовПриОткрытии) ИЛИ (Объект.ДатаВыезда = '00010101' И Объект.ДатаВозвращения = '00010101') Тогда
		УстановитьДатыВыездаВозвращения();
	КонецЕсли;
	
	СтруктураОбъектовНастроек = Новый Структура;
	СтруктураОбъектовНастроек.Вставить("Организация", Объект.Организация);
	СтруктураОбъектовНастроек.Вставить("Подразделение", ПодразделениеНастройки());
	Объект.РасчетФактРасходаГСМ = ПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, "РасчетФактРасходаГСМ");

	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		мВидимостьРеквизитовНДС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация, "УчитыватьНДС");
	КонецЕсли;
	
	ОбновитьКэшПравПоGPS();
	УстановитьВозможностьРедактированияДанныхПоGPS();
КонецПроцедуры


&НаКлиенте
Процедура ТСПриИзменении(Элемент)
	Если ТС = Объект.ТС Тогда
		Возврат;
	КонецЕсли;
	
	ИнициализацияДанныхАвтомобиля(Новый ОписаниеОповещения("ТСПриИзмененииЗавершение", ЭтотОбъект));
КонецПроцедуры

&НаКлиенте
Процедура ТСПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ИспользоватьУчетЗатрат()
		И Не уатОбщегоНазначения.уатНайтиПланЗатрат(Объект.ПланЗатрат, Объект.Организация, Объект.ТС,
		ПолучитьЗначениеРеквизита(Объект.ТС, "Колонна")) Тогда 
		
		ТекстНСТР = НСтр("en='Cost plan is not found!';ru='Не найден план затрат!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
	КонецЕсли;
	
	ТС = Объект.ТС;
	
	ОбновитьФлагПросроченныхДокументовТС();
	ОбновитьФлагПросроченныхДокументовВодителей();
	ОбновитьНадписьПробег();
	СформироватьСписокВыбораТСвЗаправкахГСМ();
	ОбновитьСписокВыбораЭкипажа();

КонецПроцедуры

&НаКлиенте
Процедура ТСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтруктураОтбора = Новый Структура();
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Объект.Организация);
	КонецЕсли;
	уатИнтерфейсВводаТС.РеквизитТСНачалоВыбора(Элемент, Объект.ТС, ДанныеВыбора, СтандартнаяОбработка, СтруктураОтбора);
КонецПроцедуры

&НаКлиенте
Процедура ТСАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СтруктураОтбора = Новый Структура();
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Объект.Организация);
	КонецЕсли;
	уатИнтерфейсВводаТС.РеквизитТСАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка, СтруктураОтбора);
КонецПроцедуры

&НаКлиенте
Процедура ТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтруктураОтбора = Новый Структура();
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Объект.Организация);
	КонецЕсли;
	уатИнтерфейсВводаТС.РеквизитТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка, СтруктураОтбора);
КонецПроцедуры

&НаКлиенте
Процедура ВодительПриИзменении(Элемент)
	ОбновитьФлагПросроченныхДокументовВодителей();
КонецПроцедуры

&НаКлиенте
Процедура ВодительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ДиалогВыбораСотрудника(Элемент, Объект.Водитель, Новый Структура("Организация", Объект.Организация), СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ВодительОткрытие(Элемент, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ОткрытьФормуСотрудника(Объект.Водитель, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ВодительАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Ожидание = 0 Тогда //выбор из списка
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура ВодительОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура ДатаВыездаПриИзменении(Элемент)
	ДатаВыездаПриИзмененииСервер();
		
	Если НачалоДня(Объект.ДатаВыезда) <> ДатаВыезда Тогда
		уатОбщегоНазначения.ЗаполнитьЭкипажТС(Объект.ТС, Объект.Организация, Объект.ДатаВыезда,
			Объект.Водитель,,,, Объект.Ссылка.Пустая(), Объект.ДатаВозвращения,, Истина);
	КонецЕсли;
		
	ДатаВыезда = Объект.ДатаВыезда;
КонецПроцедуры

&НаСервере
Процедура ДатаВыездаПриИзмененииСервер()
	Если ЗначениеЗаполнено(Объект.ТС) Тогда
		// обновляем остатки топлива ТС при выезде
		ОснТопливо = Объект.ТС.Модель.ОсновноеТопливо;
		
		ОстатокТопливаВыезд = уатОбщегоНазначения.уатОстатокГСМнаТС(Объект.ДатаВыезда, Объект.ТС, ОснТопливо, Объект.Ссылка);
		ОстатокТопливаВыездПриИзмененииСервер();
		
		Если Объект.ТС.Модель.НаличиеСпидометра Тогда
			Объект.ОдометрВыезда = уатОбщегоНазначения.уатТекущийСпидометр(Объект.ТС, Объект.ДатаВыезда);
		Иначе
			Объект.ОдометрВыезда = уатОбщегоНазначения.уатТекущийСчетчикМЧ(Объект.ТС, Объект.ДатаВыезда);
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ДатаВыезда > Объект.ДатаВозвращения Тогда
		Объект.ДатаВозвращения = Объект.ДатаВыезда;
		ДатаВозвращенияПриИзмененииСервер();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДатаВозвращенияПриИзменении(Элемент)
	Если Объект.ДатаВыезда > Объект.ДатаВозвращения Тогда
		Объект.ДатаВыезда = Объект.ДатаВозвращения;
		ДатаВыездаПриИзменении(Неопределено);
	Иначе
		уатОбщегоНазначения.ЗаполнитьЭкипажТС(Объект.ТС, Объект.Организация, Объект.ДатаВыезда,
			Объект.Водитель,,,, Объект.Ссылка.Пустая(), Объект.ДатаВозвращения,, Истина);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДатаВозвращенияПриИзмененииСервер()
	Если Объект.ДатаВыезда > Объект.ДатаВозвращения Тогда
		Объект.ДатаВыезда = Объект.ДатаВозвращения;
		ДатаВыездаПриИзмененииСервер();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОстатокТопливаВыездПриИзменении(Элемент)
	ОснТопливо = ПолучитьЗначениеРеквизита(ПолучитьЗначениеРеквизита(Объект.ТС, "Модель"),
		"ОсновноеТопливо");
	Для Каждого ТекСтрока Из Объект.РасходГСМ Цикл
		Если Объект.ТС = ТекСтрока.ТС И ОснТопливо = ТекСтрока.ГСМ Тогда
			ТекСтрока.ОстатокПриВыезде = ОстатокТопливаВыезд;
			ПересчетРасходФактВСтроке(ТекСтрока);
			Прервать;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОстатокТопливаВыездПриИзмененииСервер()
	ОснТопливо = ПолучитьЗначениеРеквизита(ПолучитьЗначениеРеквизита(Объект.ТС, "Модель"), "ОсновноеТопливо");
	Для Каждого ТекСтрока Из Объект.РасходГСМ Цикл
		Если Объект.ТС = ТекСтрока.ТС И ОснТопливо = ТекСтрока.ГСМ Тогда
			ТекСтрока.ОстатокПриВыезде = ОстатокТопливаВыезд;
			ПересчетРасходФактВСтрокеСервер(ТекСтрока);
			Прервать;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОстатокТопливаВозвратПриИзменении(Элемент)
	ОснТопливо = ПолучитьЗначениеРеквизита(ПолучитьЗначениеРеквизита(Объект.ТС, "Модель"),
		"ОсновноеТопливо");
	Для Каждого ТекСтрока Из Объект.РасходГСМ Цикл
		Если Объект.ТС = ТекСтрока.ТС И ОснТопливо = ТекСтрока.ГСМ Тогда
			ТекСтрока.ОстатокПриВозвращении = ОстатокТопливаВозврат;
			ПересчетРасходФактВСтроке(ТекСтрока);
			Прервать;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОстатокТопливаВозвратПриИзмененииСервер()
	ОснТопливо = ПолучитьЗначениеРеквизита(ПолучитьЗначениеРеквизита(Объект.ТС, "Модель"), "ОсновноеТопливо");
	Для Каждого ТекСтрока Из Объект.РасходГСМ Цикл
		Если Объект.ТС = ТекСтрока.ТС И ОснТопливо = ТекСтрока.ГСМ Тогда
			ТекСтрока.ОстатокПриВозвращении = ОстатокТопливаВозврат;
			ПересчетРасходФактВСтрокеСервер(ТекСтрока);
			Прервать;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОдометрВыездаПриИзменении(Элемент)
	ОбновитьНадписьПробег();
КонецПроцедуры

&НаКлиенте
Процедура ОдометрВозвращенияПриИзменении(Элемент)
	ОбновитьНадписьПробег();
КонецПроцедуры

&НаКлиенте
Процедура ОдометрВозвращенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ЗаполнитьПоМониторингуПриВозвратеТолькоОдометр(Элемент);
КонецПроцедуры
		
&НаКлиенте
Процедура НадписьПробегНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТолькоПросмотр Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТолькоПросмотр",   мКэшПравGPS_ЗапретитьРучноеИзменениеПоказанийОдометра И уатОбщегоНазначения_проф.уатПроверитьИспользованиеGPS(Объект.ТС));
	ПараметрыФормы.Вставить("ПробегПоОдометру", Объект.ОдометрВозвращения - Объект.ОдометрВыезда);
	ПараметрыФормы.Вставить("ПробегПоGPS",      Объект.ПробегПоGPS);
	Если ЗначениеЗаполнено(Объект.ТС) И
		НЕ ПолучитьЗначениеРеквизита(ПолучитьЗначениеРеквизита(Объект.ТС, "Модель"), "НаличиеСпидометра") Тогда
		
		ПараметрыФормы.Вставить("флМоточасы", Истина);
	КонецЕсли;
	
	Рез = Неопределено;
	
	ОткрытьФорму("Документ.уатПутевойЛист.Форма.ВводЗначенийПробега", ПараметрыФормы, ЭтотОбъект,,,,
		Новый ОписаниеОповещения("НадписьПробегНажатиеЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьПробегНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТолькоПросмотр Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Объект.ПробегПоGPS        = Результат.ПробегПоGPS;
		Объект.ОдометрВозвращения = Объект.ОдометрВыезда + Результат.ПробегПоОдометру;
		ОбновитьНадписьПробег();
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьГСМПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ТемператураПриИзменении(Элемент)
	ПроцентИзмененияНормыТемпература = Строка(уатПутевыеЛисты.уатПолучитьКоэффициентИзмененияНормыДляТемпературы(
		Объект.Температура)) + "%";
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	ПодразделениеПриИзмененииСервер();
КонецПроцедуры

&НаСервере
Процедура ПодразделениеПриИзмененииСервер()
	СтруктураОбъектовНастроек = Новый Структура;
	СтруктураОбъектовНастроек.Вставить("Организация", Объект.Организация);
	СтруктураОбъектовНастроек.Вставить("Подразделение", ПодразделениеНастройки());
	ТекПользователь = Пользователи.АвторизованныйПользователь();
	СтруктураОбъектовНастроек.Вставить("Пользователь", ТекПользователь);
	
	Объект.РасчетФактРасходаГСМ = ПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, ПланыВидовХарактеристик.уатПраваИНастройки.РасчетФактРасходаГСМ);
	
	УстановитьДатыВыездаВозвращения();
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыРасходГСМ

&НаКлиенте
Процедура РасшифровкаРасходаГСМ(Команда)
	Перем СписокНормРасхода, Отказ;
	
	Отказ = Ложь;
	
	ТекСтрока = Элементы.РасходГСМ.ТекущиеДанные;
	
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	флЭтоТЖ = Неопределено;
	РасшифровкаРасходаГСМСервер(ТекСтрока.ТС, ТекСтрока.ГСМ, Отказ, СписокНормРасхода, флЭтоТЖ);
		
	Если Не Отказ Тогда
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("СписокНормРасхода", СписокНормРасхода);
		ПараметрыОткрытия.Вставить("ЭтоТЖ", флЭтоТЖ);
		ПараметрыОткрытия.Вставить("ДатаВыезда", Объект.ДатаВыезда);
		ПараметрыОткрытия.Вставить("ДатаВозвращения", Объект.ДатаВозвращения);
		ПараметрыОткрытия.Вставить("ТС", ТекСтрока.ТС);
		ПараметрыОткрытия.Вставить("ГСМ", ТекСтрока.ГСМ);
		ПараметрыОткрытия.Вставить("ПЛ", Объект.Ссылка);
		ПараметрыОткрытия.Вставить("НеПересчитыватьРасходГСМ", Объект.НеПересчитыватьРасходГСМ);
		
		мсвЗаправкиГСМ = Новый Массив;
		Для Каждого ТекЗаправка Из ЗаправкиГСМ Цикл
			Если ТекЗаправка.ТС = ТекСтрока.ТС Тогда
				СтруктураСтроки = Новый Структура("ГСМ, Количество", ТекЗаправка.ГСМ, ТекЗаправка.Количество);
				мсвЗаправкиГСМ.Добавить(СтруктураСтроки);
			КонецЕсли;
		КонецЦикла;
		ПараметрыОткрытия.Вставить("ЗаправкиГСМ", мсвЗаправкиГСМ);
		
		ОткрытьФорму("Документ.уатПутевойЛист.Форма.РасшифровкаНормыРасходаГСМ", ПараметрыОткрытия, ЭтотОбъект,,,,
			Новый ОписаниеОповещения("РасшифровкаРасходаГСМЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаРасходаГСМЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Заглушка = Истина;
КонецПроцедуры

&НаСервере
Процедура РасшифровкаРасходаГСМСервер(ТС, ГСМ, Отказ, СписокНормРасхода, флЭтоТЖ)
	ПараметрыРасчетаГСМ = уатПутевыеЛисты.ПолучитьПараметрыРасчетаРасходаГСМ(Объект);
	уатГСМ.РасчитатьРасходГСМПоНорме(ПараметрыРасчетаГСМ, ТС, ГСМ, Отказ, СписокНормРасхода);
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьЭкономиюПережог()
	Для Каждого ТекСтрока Из Объект.РасходГСМ Цикл
		ТекСтрока.Экономия = ТекСтрока.РасходПоНорме - ТекСтрока.РасходПоФакту; 
		ОстатокПриВозвращенииРазница = ТекСтрока.ОстатокПриВозвращении - 
			(ТекСтрока.ОстатокПриВыезде - ТекСтрока.РасходПоФакту + ТекСтрока.Выдано); 
		ТекСтрока.ОстатокПриВозвращенииЕстьРазница = Макс(ОстатокПриВозвращенииРазница, - ОстатокПриВозвращенииРазница) > 0.5;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура РассчитатьЭкономиюПережогСервер()
	Для Каждого ТекСтрока Из Объект.РасходГСМ Цикл
		ТекСтрока.Экономия = ТекСтрока.РасходПоНорме - ТекСтрока.РасходПоФакту;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура РасходГСМПриИзменении(Элемент)
	РассчитатьЭкономиюПережог();
КонецПроцедуры

&НаКлиенте
Процедура РасходГСМОстатокПриВыездеПриИзменении(Элемент)
	ПересчетОстаткаГСМ("ОстатокПриВыезде");
КонецПроцедуры

&НаКлиенте
Процедура РасходГСМОстатокПриВозвращенииПриИзменении(Элемент)
	ПересчетОстаткаГСМ("ОстатокПриВозвращении");
КонецПроцедуры

&НаКлиенте
Процедура РасходГСМРасходПоФактуПриИзменении(Элемент)
	ТекСтрока = Элементы.РасходГСМ.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПересчетОстаткаГСМ("РасходПоФакту", ТекСтрока);
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыЗаправкиГСМ

&НаКлиенте
Процедура РедактироватьЗаправкуГСМВДиалоге(Команда)
	Элементы.РедактироватьЗаправкуГСМВДиалоге.Пометка = НЕ Элементы.РедактироватьЗаправкуГСМВДиалоге.Пометка;
	РедактироватьЗаправкуГСМВДиалоге = Элементы.РедактироватьЗаправкуГСМВДиалоге.Пометка;
	СохранитьНастройкиСервер();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСуществующуюЗаправку(Команда)
	Если Объект.Рассчитан Тогда
		Объект.Рассчитан = Ложь;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		ТекстНСТР = НСтр("en='To perform this operation it is necessary to record the document. Continue?';ru='Для выполнения данной операции необходимо записать документ. Продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ДобавитьСуществующуюЗаправкуЗавершение1", ЭтотОбъект),
			ТекстНСТР, РежимДиалогаВопрос.ОКОтмена);
        Возврат;
	КонецЕсли;
	
	ДобавитьСуществующуюЗаправкуФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСуществующуюЗаправкуЗавершение1(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ <> КодВозвратаДиалога.ОК Тогда
        Возврат;
    КонецЕсли;
    
    Если НЕ ПроверитьЗаполнениеДокумента() Тогда
        Возврат;
    КонецЕсли;
    
    Попытка
        Записать();
    Исключение
        Возврат;
    КонецПопытки;
    
    ДобавитьСуществующуюЗаправкуФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСуществующуюЗаправкуФрагмент()
    
    Перем дЗаправкаГСМ, СписТС, СтруктураОтбора, ТекСтрокаОборудование;
    
    СтруктураОтбора = Новый Структура;
    СтруктураОтбора.Вставить("ПометкаУдаления", Ложь);
    СтруктураОтбора.Вставить("Организация", Объект.Организация);
    
    СписТС = Новый СписокЗначений;
    СписТС.Добавить(Объект.ТС);
    
    дЗаправкаГСМ = Неопределено;
	
	Оповещ = Новый ОписаниеОповещения("ДобавитьСуществующуюЗаправкуЗавершение", ЭтотОбъект);
	ПараметрыФормы = Новый Структура("Отбор, СписокТС", СтруктураОтбора, СписТС);
    ОткрытьФорму("Документ.уатЗаправкаГСМ.ФормаВыбора", ПараметрыФормы,,,,, Оповещ, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьСуществующуюЗаправкуЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    дЗаправкаГСМ = Результат;
    Если дЗаправкаГСМ = Неопределено Тогда
        Возврат;
    КонецЕсли;	
    
    Если РедактироватьЗаправкуГСМВДиалоге Тогда
        ДобавитьЗаправкуГСМВДиалоге(, дЗаправкаГСМ);
	Иначе
		ДобавитьСуществующуюЗаправкуСервер(дЗаправкаГСМ);
        ДобавитьЗаправкуГСМВСписке();
		ОбновитьНадписьРассчитан();
    КонецЕсли;
    
КонецПроцедуры

&НаСервере
Процедура ДобавитьСуществующуюЗаправкуСервер(дЗаправкаГСМ)
	ДокЗаправка = дЗаправкаГСМ.ПолучитьОбъект();
	ДокЗаправка.ПризнакРедактированияИзПутевогоЛиста = Истина;
	ДокЗаправка.ПризнакРедактированияИзПутевогоЛистаСсылка = Объект.Ссылка;
	ДокЗаправка.Заполнить(Объект.Ссылка);
	Если НЕ РедактироватьЗаправкуГСМВДиалоге Тогда
		ДокЗаправка.Записать();
	КонецЕсли;
	ЗначениеВРеквизитФормы(ДокЗаправка, "мДокументЗаправкаГСМ");
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМПриИзменении(Элемент)
	ОбновитьКартинкиЗаправкиГСМ();
	ОбновитьЗаправкиВсего();
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
	
	Если Объект.Рассчитан Тогда
		Объект.Рассчитан = Ложь;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		ТекстНСТР = НСтр("en='To perform this operation it is necessary to record the document. Continue?';ru='Для выполнения данной операции необходимо записать документ. Продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаправкиГСМПередНачаломДобавленияЗавершение", ЭтотОбъект,
			Новый Структура("Копирование", Копирование)), ТекстНСТР, РежимДиалогаВопрос.ОКОтмена);
        Возврат;
	КонецЕсли;
	
	ЗаправкиГСМПередНачаломДобавленияФрагмент(Копирование);
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМПередНачаломДобавленияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Копирование = ДополнительныеПараметры.Копирование;
    
    Ответ = РезультатВопроса;
    Если Ответ <> КодВозвратаДиалога.ОК Тогда
        Возврат;
    КонецЕсли;
    
    Если НЕ ПроверитьЗаполнениеДокумента() Тогда
        Возврат;
    КонецЕсли;
    
    Попытка
        Записать();
    Исключение
        Возврат;
    КонецПопытки;
    
    ЗаправкиГСМПередНачаломДобавленияФрагмент(Копирование);

КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМПередНачаломДобавленияФрагмент(Знач Копирование)
    
    Перем мТекущаяСтрокаСтруктура;
    
    Если РедактироватьЗаправкуГСМВДиалоге Тогда
        ДобавитьЗаправкуГСМВДиалоге(Копирование);
    Иначе
        мТекущаяСтрокаСтруктура = СтруктураСтрокиЗаправкиГСМ();
        Если Копирование Тогда
            ЗаполнитьЗначенияСвойств(мТекущаяСтрокаСтруктура, Элементы.ЗаправкиГСМ.ТекущиеДанные);
        КонецЕсли;
        ДобавитьЗаправкуГСМсервер(Копирование, мТекущаяСтрокаСтруктура);
        ДобавитьЗаправкуГСМВСписке();
    КонецЕсли;
    
    ОбновитьКартинкиЗаправкиГСМ();
    ОбновитьЗаправкиВсего();
	ОбновитьНадписьРассчитан();
    
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМПередНачаломИзменения(Элемент, Отказ)
	Если РедактироватьЗаправкуГСМВДиалоге Тогда
		ИзменитьЗаправкуГСМВДиалоге();
		Отказ = Истина;
	Иначе
		ТекЗаправка = Элементы.ЗаправкиГСМ.ТекущиеДанные.Ссылка;
		НачалоИзмененияЗаправкиГСМсервер(ТекЗаправка);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура НачалоИзмененияЗаправкиГСМсервер(ТекЗаправка)
	ДокЗаправка = ТекЗаправка.ПолучитьОбъект();
	ДокЗаправка.ПризнакРедактированияИзПутевогоЛиста = Истина;
	ДокЗаправка.ПризнакРедактированияИзПутевогоЛистаСсылка = Объект.Ссылка;
	ЗначениеВРеквизитФормы(ДокЗаправка, "мДокументЗаправкаГСМ");
КонецПроцедуры

&НаСервере
Процедура ДобавитьЗаправкуГСМсервер(флКопирование = Ложь, мТекущаяСтрокаСтруктура = Неопределено)
	Если флКопирование = Истина Тогда
		ДокОбъект = мТекущаяСтрокаСтруктура.Ссылка.Скопировать();
	Иначе
		ДокОбъект = Документы.уатЗаправкаГСМ.СоздатьДокумент();
	КонецЕсли;
	
	ДокОбъект.ПризнакРедактированияИзПутевогоЛиста = Истина;
	ДокОбъект.ПризнакРедактированияИзПутевогоЛистаСсылка = Объект.Ссылка;
	ДокОбъект.Заполнить(Объект.Ссылка);
	ДокОбъект.УчитыватьНДС = мВидимостьРеквизитовНДС;
	ДокОбъект.СуммаВключаетНДС = ПолучитьПраваИНастройкиПользователя(Объект.Организация, "СуммаВключаетНДС");
		
	СтруктураОбъектовНастроек = Новый Структура;
	СтруктураОбъектовНастроек.Вставить("Организация",	 Объект.Организация);
	Если Элементы.Подразделение.Видимость Тогда
		СтруктураОбъектовНастроек.Вставить("Подразделение",	 Объект.Подразделение);
		ДокОбъект.ПодразделениеОрганизации = Объект.Подразделение;
	КонецЕсли;
		
	Если флКопирование = Истина Тогда
		ДокОбъект.Заправки.Очистить();
		НоваяЗаправка = ДокОбъект.Заправки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяЗаправка, мТекущаяСтрокаСтруктура);
		НоваяЗаправка.ПутевойЛист = Объект.Ссылка;
	Иначе
		ДокОбъект.ВидДвиженияГСМ = ПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, "ОсновнойВидЗаправки");
		ДокОбъект.АЗС = ПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, "ОсновнаяАЗС");
	КонецЕсли;
	
	Попытка
		ДокОбъект.Записать();
		ЗначениеВРеквизитФормы(ДокОбъект, "мДокументЗаправкаГСМ");
	Исключение
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗаправкуГСМВДиалоге(флКопирование = Ложь, дЗаправкаГСМ = Неопределено)
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ДобавлениеЗаправкиИзПЛ", Истина);
	ПараметрыОткрытия.Вставить("ПутевойЛист", Объект.Ссылка);
	Если дЗаправкаГСМ <> Неопределено Тогда
		ПараметрыОткрытия.Вставить("Ключ", дЗаправкаГСМ);
	КонецЕсли;
	
	Если флКопирование = Истина Тогда
		ТекСтрока = Элементы.ЗаправкиГСМ.ТекущиеДанные;
		Если ТекСтрока <> Неопределено Тогда
			мТекущаяСтрокаСтруктура = СтруктураСтрокиЗаправкиГСМ();
			ЗаполнитьЗначенияСвойств(мТекущаяСтрокаСтруктура, ТекСтрока);
			мТекущаяСтрокаСтруктура.Договор = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрока.Ссылка, "ДоговорКонтрагента");
			ПараметрыОткрытия.Вставить("ЗаправкаКопирование", мТекущаяСтрокаСтруктура);
		КонецЕсли;
	КонецЕсли;
	
	ОткрытьФорму("Документ.уатЗаправкаГСМ.ФормаОбъекта", ПараметрыОткрытия, ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЗаправкуГСМВДиалоге()
	ТекСтрока = Элементы.ЗаправкиГСМ.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура();
	ПараметрыОткрытия.Вставить("Ключ",                       ТекСтрока.Ссылка);
	ПараметрыОткрытия.Вставить("РедактированиеЗаправкиИзПЛ", Истина);
	ПараметрыОткрытия.Вставить("ПутевойЛист",                Объект.Ссылка);
	
	ОткрытьФорму("Документ.уатЗаправкаГСМ.ФормаОбъекта", ПараметрыОткрытия,,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЗаправкуГСМВСписке()
	мТекущаяСтрока = Элементы.ЗаправкиГСМ.ТекущиеДанные;
	мсвНайдСтроки = мДокументЗаправкаГСМ.Заправки.НайтиСтроки(Новый Структура("НомерСтроки", мТекущаяСтрока.НомерСтроки));
	Если мсвНайдСтроки.Количество() = 0 Тогда
		НайденнаяСтрока = Неопределено;
	Иначе
		НайденнаяСтрока = мсвНайдСтроки[0];
	КонецЕсли;
	
	Если НайденнаяСтрока = Неопределено Тогда
		ПоказатьПредупреждение(Неопределено, НСтр("en='Error writing document ""Fueling""!"
"Maybe the document was changed by another user!';ru='Ошибка при записи документа ""Заправка ГСМ""!"
"Возможно документ был изменен другим пользователем!'"));
	Иначе
		мТекущаяСтрокаСтруктура = СтруктураСтрокиЗаправкиГСМ();
		ЗаполнитьЗначенияСвойств(мТекущаяСтрокаСтруктура, мТекущаяСтрока);
		СообщениеПревышениеУровняТопливаВБаке = "";
		ИзменитьЗаправкуГСМВСпискеСервер(мТекущаяСтрокаСтруктура, СообщениеПревышениеУровняТопливаВБаке);
		Если НЕ ПустаяСтрока(СообщениеПревышениеУровняТопливаВБаке) Тогда
			ПоказатьПредупреждение(Неопределено, СообщениеПревышениеУровняТопливаВБаке);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция СтруктураСтрокиЗаправкиГСМ()
	Рез = Новый Структура;
	Для Каждого ТекРеквизит Из Метаданные.Документы.уатЗаправкаГСМ.ТабличныеЧасти.Заправки.Реквизиты Цикл
		Рез.Вставить(ТекРеквизит.Имя);
	КонецЦикла;
	Рез.Вставить("АЗС");
	Рез.Вставить("Договор");
	Рез.Вставить("ВидДвиженияГСМ");
	Рез.Вставить("Страна");
	Рез.Вставить("НомерСтроки");
	Рез.Вставить("Ссылка");
	Рез.Вставить("ДатаЗаправки");
	Рез.Вставить("УчитыватьНДС");
	Рез.Вставить("СуммаВключаетНДС");
	
	Возврат Рез;
КонецФункции

&НаСервере
Процедура ИзменитьЗаправкуГСМВСпискеСервер(мТекущаяСтрокаСтруктура, СообщениеПревышениеУровняТопливаВБаке)
	Рез = Истина;
	
	ДокЗаправка = РеквизитФормыВЗначение("мДокументЗаправкаГСМ");
	ДокЗаправка.АЗС = мТекущаяСтрокаСтруктура.АЗС;
	ДокЗаправка.ВидДвиженияГСМ = мТекущаяСтрокаСтруктура.ВидДвиженияГСМ;
	ДокЗаправка.Страна = мТекущаяСтрокаСтруктура.Страна;
	ДокЗаправка.Дата = мТекущаяСтрокаСтруктура.Дата;
	ДокЗаправка.УчитыватьНДС	    = мТекущаяСтрокаСтруктура.УчитыватьНДС;
	ДокЗаправка.СуммаВключаетНДС	= мТекущаяСтрокаСтруктура.СуммаВключаетНДС;
	
	НайденнаяСтрока = ДокЗаправка.Заправки.Найти(мТекущаяСтрокаСтруктура.НомерСтроки, "НомерСтроки");
	НайденнаяСтрока.Дата 			= мТекущаяСтрокаСтруктура.ДатаЗаправки;
	НайденнаяСтрока.ТС 				= мТекущаяСтрокаСтруктура.ТС;
	НайденнаяСтрока.Водитель 		= мТекущаяСтрокаСтруктура.Водитель;
	НайденнаяСтрока.ГСМ 			= мТекущаяСтрокаСтруктура.ГСМ;
	НайденнаяСтрока.Цена 			= мТекущаяСтрокаСтруктура.Цена;
	НайденнаяСтрока.Количество 		= мТекущаяСтрокаСтруктура.Количество;
	НайденнаяСтрока.Сумма 			= мТекущаяСтрокаСтруктура.Сумма;
	НайденнаяСтрока.Валюта 			= мТекущаяСтрокаСтруктура.Валюта;
	НайденнаяСтрока.ПластиковаяКарта= мТекущаяСтрокаСтруктура.ПластиковаяКарта;
	НайденнаяСтрока.НомераТалонов	= мТекущаяСтрокаСтруктура.НомераТалонов;
	НайденнаяСтрока.СтавкаНДС	    = мТекущаяСтрокаСтруктура.СтавкаНДС;
	
	Если ЗначениеЗаполнено(НайденнаяСтрока.СтавкаНДС) Тогда
		уатОбщегоНазначенияТиповыеСервер.уатРассчитатьСуммуНДСТабЧасти(НайденнаяСтрока, ДокЗаправка);
	КонецЕсли;
	
	Попытка
		ДокЗаправка.Записать(РежимЗаписиДокумента.Проведение);
		ЗначениеВРеквизитФормы(ДокЗаправка, "мДокументЗаправкаГСМ");
	Исключение
		Рез = Ложь;
	КонецПопытки;
	
	Если Рез Тогда
		ПересчетВыданногоГСМСервер();
		УстановитьПривилегированныйРежим(Истина);
		Попытка
			Записать(Новый Структура("ЗаписьЗаправкиГСМ"));
		Исключение
		КонецПопытки;
		
		тблЗаправки = ДокЗаправка.Заправки.Выгрузить();
		уатГСМ.ПроверитьПревышениеУровняТопливаВБаке(тблЗаправки, ДокЗаправка.Организация, ДокЗаправка.АЗС, СообщениеПревышениеУровняТопливаВБаке);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьЗаправкуГСМВСписке()
	Если мДокументЗаправкаГСМ.Заправки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекСтрокаНовойЗаправки = мДокументЗаправкаГСМ.Заправки[мДокументЗаправкаГСМ.Заправки.Количество()-1];
	
	НоваяСтрока = ЗаправкиГСМ.Добавить();
	НоваяСтрока.Ссылка = мДокументЗаправкаГСМ.Ссылка;
	НоваяСтрока.НомерСтроки	= ТекСтрокаНовойЗаправки.НомерСтроки;
	НоваяСтрока.Номер = мДокументЗаправкаГСМ.Номер;
	НоваяСтрока.Дата = мДокументЗаправкаГСМ.Дата;
	НоваяСтрока.ДатаЗаправки = ТекСтрокаНовойЗаправки.Дата;
	НоваяСтрока.АЗС = мДокументЗаправкаГСМ.АЗС;
	НоваяСтрока.ВидДвиженияГСМ = мДокументЗаправкаГСМ.ВидДвиженияГСМ;
	НоваяСтрока.ТС = ТекСтрокаНовойЗаправки.ТС;
	НоваяСтрока.Водитель = Объект.Водитель;
	НоваяСтрока.ГСМ = ТекСтрокаНовойЗаправки.ГСМ;
	Если (НЕ ЗначениеЗаполнено(НоваяСтрока.ГСМ)) И ЗначениеЗаполнено(ТекСтрокаНовойЗаправки.ТС) Тогда
		НоваяСтрока.ГСМ = ПолучитьЗначениеРеквизита(ПолучитьЗначениеРеквизита(ТекСтрокаНовойЗаправки.ТС, "Модель"),
			"ОсновноеТопливо");
		ЗаправкиПриИзмененииГСМ(НоваяСтрока);
	КонецЕсли;
	
	Если НоваяСтрока.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаТалоны")
		И (НЕ ЗначениеЗаполнено(НоваяСтрока.НомераТалонов))
		И ЗначениеЗаполнено(ТекСтрокаНовойЗаправки.НомераТалонов) Тогда
		
		НоваяСтрока.НомераТалонов = ТекСтрокаНовойЗаправки.НомераТалонов;
	КонецЕсли;
		
	Если (НоваяСтрока.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКарта")
		ИЛИ НоваяСтрока.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад"))
		И НЕ ЗначениеЗаполнено(НоваяСтрока.ПластиковаяКарта)
		И ЗначениеЗаполнено(ТекСтрокаНовойЗаправки.ПластиковаяКарта) Тогда
		
		НоваяСтрока.ПластиковаяКарта = ТекСтрокаНовойЗаправки.ПластиковаяКарта;
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.ПластиковаяКарта) Тогда
			НоваяСтрока.ПластиковаяКарта = уатОбщегоНазначения.уатПластиковаяКартаТСВодителя(ТекСтрокаНовойЗаправки.ТС,
				Объект.Водитель,,НоваяСтрока.Дата);
		КонецЕсли;
		
	//ИначеЕсли НоваяСтрока.ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаНаличные Тогда
	//	НоваяСтрока.Сумма = 0;
	КонецЕсли;
	
	НоваяСтрока.Количество = ТекСтрокаНовойЗаправки.Количество;
	НоваяСтрока.Цена = ТекСтрокаНовойЗаправки.Цена;
	НоваяСтрока.Сумма = ТекСтрокаНовойЗаправки.Сумма;
	НоваяСтрока.Валюта = ТекСтрокаНовойЗаправки.Валюта;
	
	Если НЕ ЗначениеЗаполнено(НоваяСтрока.Валюта) Тогда
		НоваяСтрока.Валюта = ВалютаРегламентированногоУчета();
	КонецЕсли;
	
	НоваяСтрока.УчитыватьНДС = мДокументЗаправкаГСМ.УчитыватьНДС;
	НоваяСтрока.СуммаВключаетНДС = мДокументЗаправкаГСМ.СуммаВключаетНДС;
	
	НоваяСтрока.СуммаНДС = ТекСтрокаНовойЗаправки.СуммаНДС;
	НоваяСтрока.СтавкаНДС = ТекСтрокаНовойЗаправки.СтавкаНДС;
	ПолучитьСтавку(НоваяСтрока);
	
	Элементы.ЗаправкиГСМ.ТекущаяСтрока = ЗаправкиГСМ[ЗаправкиГСМ.Количество() - 1].ПолучитьИдентификатор();
	ТекущийЭлемент = Элементы.ЗаправкиГСМКоличество;
	Элементы.ЗаправкиГСМКоличество.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
	
	ОбновитьКартинкиЗаправкиГСМ();
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМПередУдалением(Элемент, Отказ)
	Отказ = Истина;
	
	Если ЗаправкиГСМ.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекСтрока = Элементы.ЗаправкиГСМ.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстНСТР = НСтр("en='Delete fuelling?';ru='Удалить заправку ГСМ?'");
	ПоказатьВопрос(Новый ОписаниеОповещения("ЗаправкиГСМПередУдалениемЗавершение", ЭтотОбъект,
		Новый Структура("ТекСтрока", ТекСтрока)), ТекстНСТР, РежимДиалогаВопрос.ОКОтмена);
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМПередУдалениемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ТекСтрока = ДополнительныеПараметры.ТекСтрока;
    
    Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		ЗаправкаГСМСсылка = ТекСтрока.Ссылка;
		ЗаправкаГСМТС = ТекСтрока.ТС;
		ЗаправкаГСМДата = ТекСтрока.ДатаЗаправки;
		ЗаправкаГСМКоличество = ТекСтрока.Количество;
		ЗаправкиГСМ.Удалить(ТекСтрока);
		ЗаправкиГСМПередУдалениемЗавершениеСервер(ЗаправкаГСМСсылка, ЗаправкаГСМТС, ЗаправкаГСМДата, ЗаправкаГСМКоличество);
    КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаправкиГСМПередУдалениемЗавершениеСервер(ЗаправкаГСМСсылка, ЗаправкаГСМТС, ЗаправкаГСМДата, ЗаправкаГСМКоличество)
	УдалитьЗаправкуСервер(ЗаправкаГСМСсылка, ЗаправкаГСМТС, ЗаправкаГСМДата, ЗаправкаГСМКоличество);
	ПересчетВыданногоГСМСервер();
	УстановитьПривилегированныйРежим(Истина);
	Попытка
		Записать(Новый Структура("ЗаписьЗаправкиГСМ"));
	Исключение
	КонецПопытки;
КонецПроцедуры

&НаСервере
Процедура УдалитьЗаправкуСервер(ТекЗаправка, ТекТС, ТекДата, ТекКоличество)
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	ДокОбъект.УдалитьЗаправку(ТекЗаправка.ПолучитьОбъект(), ТекТС, ТекДата, ТекКоличество);
	ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
	ОбновитьДинамическиеКолонкиТЧСервер();
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ОбновитьСписокПластиковыхКарт();
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если ОтменаРедактирования Тогда
		ВывестиТаблицуЗаправок();
		Возврат;
	КонецЕсли; 
	
	ТекСтрока = Элементы.ЗаправкиГСМ.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли; 
	
	Если Не ЗначениеЗаполнено(ТекСтрока.ТС) Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, НСтр("en='It is necessary to select the vehicle!';ru='Необходимо выбрать ТС!'"), 30);
		Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(ТекСтрока.Водитель) Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, НСтр("en='It is necessary to choose driver!';ru='Необходимо выбрать водителя!'"), 30);
		Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(ТекСтрока.ГСМ) Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, НСтр("en='It is necessary to select fuels!';ru='Необходимо выбрать ГСМ!'"), 30);
		Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(ТекСтрока.АЗС) Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, НСтр("en='You should select gas station!';ru='Необходимо выбрать АЗС!'"), 30);
		Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(ТекСтрока.ВидДвиженияГСМ) Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, НСтр("en='It is necessary to choose type of refueling!';ru='Необходимо выбрать вид заправки!'"), 30);
		Возврат;
	ИначеЕсли Не ЗначениеЗаполнено(ТекСтрока.Количество) Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, НСтр("en='You must specify a number!';ru='Необходимо указать количество!'"), 30);
		Возврат;
	ИначеЕсли (ТекСтрока.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКарта")
		ИЛИ ТекСтрока.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад")) Тогда
		
		Если НЕ ЗначениеЗаполнено(ТекСтрока.ПластиковаяКарта) Тогда
			Отказ = Истина;
			ПоказатьПредупреждение(Неопределено, НСтр("en='It is necessary to specify plastic card!';ru='Необходимо указать пластиковую карту!'"), 30);
			Возврат;
		ИначеЕсли ПластиковаяКартаПросрочена(ТекСтрока.ПластиковаяКарта,ТекСтрока.Дата) Тогда
			Отказ = Истина;
			ПоказатьПредупреждение(Неопределено, НСтр("en='Plastic card expired!';ru='Пластиковая карта просрочена!'"), 30);
			Возврат;
		КонецЕсли;
		
	ИначеЕсли (ТекСтрока.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаНаличные")
		ИЛИ ТекСтрока.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПоставщик")
		ИЛИ ТекСтрока.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКарта"))
		И ТекСтрока.УчитыватьНДС
		И НЕ ЗначениеЗаполнено(ТекСтрока.СтавкаНДС) Тогда
		
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, НСтр("en='It is necessary to specify VAT rate!';ru='Необходимо указать ставку НДС!'"), 30);
		Возврат;
	КонецЕсли;
	
	Если Не РедактироватьЗаправкуГСМВДиалоге И Не Отказ Тогда
		Попытка
			ИзменитьЗаправкуГСМВСписке();
		Исключение
			Отказ = Истина;
		КонецПопытки;
		// Сохранение индекса текущей строки
		ТекЗаправкаГСМ = Новый Структура();
		ТекЗаправкаГСМ.Вставить("Ссылка", ТекСтрока.Ссылка);
		ТекЗаправкаГСМ.Вставить("НомерСтроки", ТекСтрока.НомерСтроки);
		
		ВывестиТаблицуЗаправок();
		
		Элементы.ЗаправкиГСМ.Обновить();
		ТекСтрока = ЗаправкиГСМ.НайтиСтроки(ТекЗаправкаГСМ);
		Если ТекСтрока.Количество() <> 0 Тогда
			Элементы.ЗаправкиГСМ.ТекущаяСтрока = ТекСтрока[0].ПолучитьИдентификатор();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если ОтменаРедактирования Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ЗаправкиГСМКоличество.РежимРедактирования = РежимРедактированияКолонки.Вход;
	//ОбновитьКартинкиЗаправкиГСМ();
	ОбновитьЗаправкиВсего();
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.ЗаправкиГСМНомер Или Элементы.ЗаправкиГСМ.ТолькоПросмотр Тогда
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(Неопределено, Элемент.ТекущиеДанные.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДанныеТСВЗаправкеГСМ(мТС)
	ТекСтрока = Элементы.ЗаправкиГСМ.ТекущиеДанные;
	ТекСтрока.ТС = мТС;
	
	Если ТекСтрока.ВидДвиженияГСМ <> ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаТалоны") Тогда
		ТекСтрока.ГСМ = ПолучитьЗначениеРеквизита(ПолучитьЗначениеРеквизита(мТС, "Модель"), "ОсновноеТопливо");
		ЗаправкиПриИзмененииГСМ(ТекСтрока);
		
		Если ТекСтрока.ВидДвиженияГСМ =	ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКарта")
			ИЛИ ТекСтрока.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад") Тогда
			ТекСтрока.ПластиковаяКарта = уатОбщегоНазначения.уатПластиковаяКартаТСВодителя(мТС, Объект.Водитель,,ТекСтрока.Дата);
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМТСПриИзменении(Элемент)
	ТекСтрока = Элементы.ЗаправкиГСМ.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекСтрока.ТС) Тогда
		УстановитьДанныеТСВЗаправкеГСМ(ТекСтрока.ТС);
	КонецЕсли;
	
	Если ТекСтрока.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКарта")
		ИЛИ ТекСтрока.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад") Тогда
		Если ЗначениеЗаполнено(ТекСтрока.ТС)  Тогда
			ПластиковаяКарта = уатОбщегоНазначения.уатПластиковаяКартаТСВодителя(ТекСтрока.ТС, ТекСтрока.Водитель,, ТекСтрока.Дата);
			Если ЗначениеЗаполнено(ПластиковаяКарта) Тогда
				ТекСтрока.ПластиковаяКарта = ПластиковаяКарта;
			Иначе
				ТекСтрока.ПластиковаяКарта = уатОбщегоНазначения.уатПластиковаяКартаТСВодителя(Объект.ТС, Объект.Водитель,, ТекСтрока.Дата);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьСписокПластиковыхКарт();
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМВодительПриИзменении(Элемент)
	мТС = Элементы.ЗаправкиГСМ.ТекущиеДанные.ТС;
	Если ЗначениеЗаполнено(мТС) Тогда
		УстановитьДанныеТСВЗаправкеГСМ(мТС);
	КонецЕсли;
	
	ОбновитьСписокПластиковыхКарт();
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМВодительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекСтрока = Элементы.ЗаправкиГСМ.ТекущиеДанные;
	уатЗащищенныеФункцииКлиент.ДиалогВыбораСотрудника(Элемент, ТекСтрока.Водитель,
		Новый Структура("Организация", Объект.Организация), СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМВодительАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Ожидание = 0 Тогда //выбор из списка
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМВодительОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМВидЗаправкиПриИзменении(Элемент)
	
	ТекСтрока = Элементы.ЗаправкиГСМ.ТекущиеДанные;
	ТекСтрока.Сумма = ТекСтрока.Цена * ТекСтрока.Количество;
	РассчитатьСуммуНДС(ТекСтрока);
	//ТекСтрока.ГСМ = Неопределено;
	
	Если ТекСтрока.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКарта")
		ИЛИ ТекСтрока.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад") Тогда
		мТС = ТекСтрока.ТС;
		Если ЗначениеЗаполнено(мТС) Тогда
			УстановитьДанныеТСВЗаправкеГСМ(мТС);
		КонецЕсли;
	Иначе
		ТекСтрока.ПластиковаяКарта = Неопределено; 
	КонецЕсли;
	
	Если ТекСтрока.АЗС = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПолучитьЗначениеРеквизита(ТекСтрока.АЗС, "ЭтоАЗССклад") = Ложь
		И (ТекСтрока.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаСклад")
		ИЛИ ТекСтрока.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад")
		ИЛИ ТекСтрока.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаТалоны")) Тогда
		
		ТекСтрока.АЗС = Неопределено;
		Возврат;
	КонецЕсли;
	Если ПолучитьЗначениеРеквизита(ТекСтрока.АЗС, "ЭтоАЗССклад") = Истина 
		И (ТекСтрока.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПоставщик")
		ИЛИ ТекСтрока.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКарта")
		ИЛИ ТекСтрока.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаНаличные")) Тогда
		
		ТекСтрока.АЗС = Неопределено;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМАЗСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ТекСтрока = Элементы.ЗаправкиГСМ.ТекущиеДанные;
	ЗаправкаСоСклада = (ТекСтрока.ВидДвиженияГСМ =
		ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаСклад")
		ИЛИ ТекСтрока.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад")
		ИЛИ ТекСтрока.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаТалоны"));
		
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("Отбор", Новый Структура("ЭтоАЗССклад", ?(ЗаправкаСоСклада, Истина, Ложь)));
	ПараметрыОткрытия.Вставить("ТекущаяСтрока", ТекСтрока.АЗС);
	ОткрытьФорму("Справочник.уатАЗС.ФормаВыбора", ПараметрыОткрытия, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМГСМНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если Элементы.ЗаправкиГСМ.ТекущиеДанные.ВидДвиженияГСМ =
		ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаТалоны") Тогда
		
		мГруппаГСМ = ПредопределенноеЗначение("Перечисление.уатГруппыГСМ.Талон");
		мУчитыватьТЖ = Ложь;
	Иначе
		мГруппаГСМ = ПредопределенноеЗначение("Перечисление.уатГруппыГСМ.Топливо");
		мУчитыватьТЖ = Истина;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("ЗначениеГСМДоИзменения", Элементы.ЗаправкиГСМ.ТекущиеДанные.ГСМ);
	ОписаниеОповещенияЗакр  = Новый ОписаниеОповещения("ОписаниеОповещенияЗаправкиГСМ", ЭтотОбъект, ДополнительныеПараметры);
	уатЗащищенныеФункцииКлиент.СписокГСМдляТС(Объект.Организация, Элементы.ЗаправкиГСМ.ТекущиеДанные.ТС, мГруппаГСМ,, мУчитыватьТЖ, ОписаниеОповещенияЗакр);
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМГСМАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ТекСтрока = Элементы.ЗаправкиГСМ.ТекущиеДанные;
	
	СтандартнаяОбработка = Ложь;
	мсвГруппДляОтбора = Новый Массив;
	Если ТекСтрока.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаТалоны") Тогда
		мсвГруппДляОтбора.Добавить(ПредопределенноеЗначение("Перечисление.уатГруппыГСМ.Талон"));
		мУчитыватьТЖ = Ложь;
	Иначе	
		мсвГруппДляОтбора.Добавить(ПредопределенноеЗначение("Перечисление.уатГруппыГСМ.Топливо"));
		мУчитыватьТЖ = Истина;
	КонецЕсли;
	ДопПараметры = Новый Структура("ТС, Организация, УчитыватьТЖ", ТекСтрока.ТС, Объект.Организация, мУчитыватьТЖ);
	ДанныеВыбора = уатГСМ.ПолучитьСписокАвтоподбораПоляГСМ(Текст, мсвГруппДляОтбора, ДопПараметры);
КонецПроцедуры

// Подключаемый динамически обработчик оповещения
&НаКлиенте
Процедура ОписаниеОповещенияЗаправкиГСМ(Результат, ДопПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		Элементы.ЗаправкиГСМ.ТекущиеДанные.ГСМ = Результат;
		ЗаправкиГСМГСМПриИзменении(Неопределено);
		Если ДопПараметры.ЗначениеГСМДоИзменения <> Результат Тогда 
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМГСМОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ПараметрыПолученияДанных.СтрокаПоиска = "";
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМГСМПриИзменении(Элемент)
	ЗаправкиПриИзмененииГСМ(Элементы.ЗаправкиГСМ.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМАЗСПриИзменении(Элемент)
	ЗаправкиПриИзмененииГСМ(Элементы.ЗаправкиГСМ.ТекущиеДанные);
	
	ТекСтрока = Элементы.ЗаправкиГСМ.ТекущиеДанные;
	Контрагент_Склад = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрока.АЗС, "Контрагент_Склад");
	Если ТипЗнч(Контрагент_Склад) = Тип("СправочникСсылка.Контрагенты") Тогда
		Если уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(мДокументЗаправкаГСМ.ДоговорКонтрагента, "Владелец") <> Контрагент_Склад Тогда
			мДокументЗаправкаГСМ.ДоговорКонтрагента = уатЗаполнениеДокументов.ПолучитьОсновнойДоговорКонтрагента(Контрагент_Склад, "СПоставщиком", Объект.Организация);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиПриИзмененииГСМ(ТекСтрока)
	СтруктураЦенаВалюта = уатОбщегоНазначения.уатНайтиЦенуНоменклатуры(ТекСтрока.Дата, ТекСтрока.ГСМ, ТекСтрока.АЗС, Ложь);
	Если ЗначениеЗаполнено(СтруктураЦенаВалюта.Цена) Тогда
		ТекСтрока.Цена = СтруктураЦенаВалюта.Цена;
		ТекСтрока.Валюта = СтруктураЦенаВалюта.Валюта;
		ТекСтрока.Сумма = ТекСтрока.Цена*ТекСтрока.Количество;
	КонецЕсли;
	ПолучитьСтавку(ТекСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМПластиковаяКартаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ЗаправкиГСМ.ТекущиеДанные;
	
	СписокВладельцев = Новый СписокЗначений;
	Если ЗначениеЗаполнено(ТекущиеДанные.ТС) Тогда
		СписокВладельцев.Добавить(ТекущиеДанные.ТС);
	КонецЕсли;
	ТСВладелец = уатОбщегоНазначения.ПолучитьВладельцаТС(ТекущиеДанные.ТС);
	Если ТСВладелец <> Неопределено Тогда
		СписокВладельцев.Добавить(ТСВладелец);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Водитель) Тогда
		СписокВладельцев.Добавить(ТекущиеДанные.Водитель);
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура();
	Если СписокВладельцев.Количество() <> 0 Тогда
		СтруктураОтбора.Вставить("КомуВыдана", СписокВладельцев);
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекущиеДанные.АЗС) Тогда
		СтруктураОтбора.Вставить("КемВыдана", ТекущиеДанные.АЗС);
	КонецЕсли;
	
	ПарамВыбора = Новый Структура("Отбор", СтруктураОтбора);

	ОткрытьФорму("Справочник.уатПластиковыеКарты.ФормаВыбора", ПарамВыбора, Элемент,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМКоличествоПриИзменении(Элемент)
	ТекСтрока = Элементы.ЗаправкиГСМ.ТекущиеДанные;
	ТекСтрока.Сумма = ТекСтрока.Цена * ТекСтрока.Количество;
	РассчитатьСуммуНДС(ТекСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМЦенаПриИзменении(Элемент)
	ТекСтрока = Элементы.ЗаправкиГСМ.ТекущиеДанные;
	ТекСтрока.Сумма = ТекСтрока.Цена * ТекСтрока.Количество;
	РассчитатьСуммуНДС(ТекСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМСуммаПриИзменении(Элемент)
	ТекСтрока = Элементы.ЗаправкиГСМ.ТекущиеДанные;
	ТекСтрока.Цена = ?(ТекСтрока.Количество = 0, 0, ТекСтрока.Сумма / ТекСтрока.Количество);
	РассчитатьСуммуНДС(ТекСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМСтавкаНДСПриИзменении(Элемент)
	ТекСтрока = Элементы.ЗаправкиГСМ.ТекущиеДанные;
	РассчитатьСуммуНДС(ТекСтрока);
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаСервере
Процедура ОбновитьДинамическиеКолонкиТЧСервер()
	РассчитатьЭкономиюПережогСервер();
	ОбновитьНадписьПробегСервер(); 
КонецПроцедуры

&НаСервере
Процедура УстановитьФорматированиеТочностиОстатковГСМ()
	ТочностьОстТоплива = ПолучитьПраваИНастройкиПользователя(Объект.Организация,
		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ТочностьОстатковТоплива"));
	ТекФормат = "ЧЦ=" + (10-3+ТочностьОстТоплива) + "; ЧДЦ=" + ТочностьОстТоплива;
	Элементы.ОстатокТопливаВозврат.Формат = ТекФормат;
	Элементы.ОстатокТопливаВозврат.ФорматРедактирования = ТекФормат;
	Элементы.ОстатокТопливаВыезд.Формат = ТекФормат;
	Элементы.ОстатокТопливаВыезд.ФорматРедактирования = ТекФормат;
	Элементы.РасходГСМОстатокПриВыезде.Формат = ТекФормат;
	Элементы.РасходГСМОстатокПриВыезде.ФорматРедактирования = ТекФормат;
	Элементы.РасходГСМОстатокПриВозвращении.Формат = ТекФормат;
	Элементы.РасходГСМОстатокПриВозвращении.ФорматРедактирования = ТекФормат;
	Элементы.РасходГСМРасходПоНорме.Формат = ТекФормат;
	Элементы.РасходГСМРасходПоНорме.ФорматРедактирования = ТекФормат;
	Элементы.РасходГСМРасходПоФакту.Формат = ТекФормат;
	Элементы.РасходГСМРасходПоФакту.ФорматРедактирования = ТекФормат;
	Если Элементы.Найти("РасходГСМРасходПоGPS") <> Неопределено Тогда
		Элементы.РасходГСМРасходПоGPS.Формат = ТекФормат;
		Элементы.РасходГСМРасходПоGPS.ФорматРедактирования = ТекФормат;
	КонецЕсли;
	Элементы.РасходГСМЭкономия.Формат = ТекФормат;
	Элементы.РасходГСМЭкономия.ФорматРедактирования = ТекФормат;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНадписьРассчитан()
	Если Объект.Рассчитан Тогда
		ДекорацияРассчитан = "Рассчитан";
		Элементы.ДекорацияРассчитан.ЦветТекста = Новый Цвет(130, 120, 90);
	Иначе
		ДекорацияРассчитан = "Не рассчитан";
		Элементы.ДекорацияРассчитан.ЦветТекста = WebЦвета.Кирпичный;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьНадписьРассчитанСервер()
	Если Объект.Рассчитан Тогда
		ДекорацияРассчитан = "Рассчитан";
		Элементы.ДекорацияРассчитан.ЦветТекста = Новый Цвет(130, 120, 90);
	Иначе
		ДекорацияРассчитан = "Не рассчитан";
		Элементы.ДекорацияРассчитан.ЦветТекста = WebЦвета.Кирпичный;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНадписьПробег()
	
	мПробегПоОдометру = 0;
	Если ЗначениеЗаполнено(Объект.ОдометрВозвращения) Тогда
		мПробегПоОдометру = уатОбщегоНазначения.уатРазностьПоказанийСчетчика(Объект.ОдометрВыезда, Объект.ОдометрВозвращения);
	КонецЕсли;
	НадписьПробег = СформироватьНадписьПробег(Объект.ТС, мПробегПоОдометру, Объект.ПробегПоGPS);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНадписьПробегСервер()
	
	УстановитьПривилегированныйРежим(Истина); 
	
	мПробегПоОдометру = 0;
	Если ЗначениеЗаполнено(Объект.ОдометрВозвращения) Тогда
		мПробегПоОдометру = уатОбщегоНазначения.уатРазностьПоказанийСчетчика(Объект.ОдометрВыезда, Объект.ОдометрВозвращения);
	КонецЕсли;
	НадписьПробег = СформироватьНадписьПробег(Объект.ТС, мПробегПоОдометру, Объект.ПробегПоGPS);
		
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция УстановленСчетчикМоточасов(ТС)
	
	Если НЕ ЗначениеЗаполнено(ТС) Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Если НЕ ЗначениеЗаполнено(ТС.Модель) Тогда
		Возврат Ложь;
	КонецЕсли;	
	
	Возврат НЕ ТС.Модель.НаличиеСпидометра;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СформироватьНадписьПробег(ТС, ПробегОдометр, ПробегМониторинг)

	тПробег = "";
	
	ПробегРазница = ПробегОдометр - ПробегМониторинг;
	
	Если ПробегРазница = 0 Тогда
		тПробег = НСтр("
			| ru = 'Одометр: " 		+ ПробегОдометр 	+ " км;
			|  мониторинг: " 		+ ПробегМониторинг 	+ " км.';
			| en = 'Odometer: " 	+ ПробегОдометр 	+ " km;
			|  monitoring " 		+ ПробегМониторинг 	+ " km.'");
	Иначе
		тПробег = НСтр("
			| ru = 'Одометр: " 		+ ПробегОдометр 	+ " км;
			|  мониторинг: " 		+ ПробегМониторинг 	+ " км;
			|  разница: " 			+ ПробегРазница		+ " км.';
			| en = 'Odometer: " 	+ ПробегОдометр 	+ " km;
			|  monitoring: " 		+ ПробегМониторинг 	+ " km;
			|  difference: " 		+ ПробегРазница 	+ " km.'");
	КонецЕсли;
	
	Если УстановленСчетчикМоточасов(ТС) Тогда
		тПробег = СтрЗаменить(тПробег,"км", "ч");
		тПробег = СтрЗаменить(тПробег,"km", "h");
		тПробег = СтрЗаменить(тПробег,"Одометр", "Счетчик м/ч");
		тПробег = СтрЗаменить(тПробег,"Odometer", "Сounter m/h");		
	КонецЕсли;
	
	тПробег = СтрЗаменить(тПробег, Символы.ПС, "");
	
	Возврат тПробег;
	
КонецФункции

&НаСервере
Процедура ОбновитьФлагПросроченныхДокументовТС()
	Если НЕ ЗначениеЗаполнено(Объект.ДатаВыезда) И НЕ ЗначениеЗаполнено(Объект.ДатаВозвращения) Тогда
		ДатаКонтроля = Объект.Дата;
	Иначе 
		ДатаКонтроля = Макс(Объект.ДатаВыезда, Объект.ДатаВозвращения);
	КонецЕсли;
	
	Элементы.ДекорацияТСПредупреждение.Видимость = ЗначениеЗаполнено(Объект.ТС) И
		ПросроченныеДокументыТС(ДатаКонтроля,
			ПолучитьПраваИНастройкиПользователя(Объект.Организация, "ДниДоОкончанияДействияДокументовТС"),
			Объект.ТС) = Истина;
КонецПроцедуры

&НаСервере
Процедура ОбновитьФлагПросроченныхДокументовВодителей()
	мДниДоОкончанияДействияДокументовВодителей = ПолучитьПраваИНастройкиПользователя(Объект.Организация, "ДниДоОкончанияДействияДокументовВодителей");
	Если НЕ ЗначениеЗаполнено(Объект.ДатаВыезда) И НЕ ЗначениеЗаполнено(Объект.ДатаВозвращения) Тогда
		ДатаКонтроля = Объект.Дата;
	Иначе 
		ДатаКонтроля = Макс(Объект.ДатаВыезда, Объект.ДатаВозвращения);
	КонецЕсли;
	
	Элементы.ДекорацияВодительПредупреждение.Видимость = ЗначениеЗаполнено(Объект.Водитель)
		И ПросроченныеДокументыВодителя(ДатаКонтроля, мДниДоОкончанияДействияДокументовВодителей, Объект.Водитель) = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокПластиковыхКарт()
	ТекущиеДанные = Элементы.ЗаправкиГСМ.ТекущиеДанные;
	
	ВладельцыКарт = Новый СписокЗначений();
	ВладельцыКарт.Добавить(ТекущиеДанные.ТС);
	ВладельцыКарт.Добавить(ТекущиеДанные.Водитель);
	СписокПластикКарт = уатОбщегоНазначения.уатСписокТопливныхКарт(ВладельцыКарт, ТекущиеДанные.Дата);
	Элементы.ЗаправкиГСМПластиковаяКарта.СписокВыбора.ЗагрузитьЗначения(СписокПластикКарт.ВыгрузитьЗначения());
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначениеРеквизита(Объект, ИмяРеквизита)
	Возврат уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект, ИмяРеквизита);
КонецФункции

&НаСервере
Процедура УстановитьВидПодменюКарты()
	
	Если Константы.уатИспользоватьЦСМ.Получить() И Константы.уатИспользоватьЭлектронныеКарты.Получить() Тогда 
		Элементы.ФормаГруппаКарты.Вид = ВидГруппыФормы.Подменю;
	Иначе 
		Элементы.ФормаГруппаКарты.Вид = ВидГруппыФормы.ГруппаКнопок;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПраваИНастройкиПользователя(Организация, НастройкаПольз)
	Возврат уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, НастройкаПольз);
КонецФункции

&НаКлиенте
Процедура ИнициализацияДанныхАвтомобиля(Знач Оповещение = Неопределено, флЗаполнитьВодителейПоУмолчанию = Истина)
	
	Если ТС = Объект.ТС Тогда
		Если Оповещение <> Неопределено Тогда 
			ВыполнитьОбработкуОповещения(Оповещение);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если Объект.РасходГСМ.Количество() > 0 Тогда
		ДопПараметрыОповещения = Новый Структура("Оповещение, флЗаполнитьВодителейПоУмолчанию", Оповещение, флЗаполнитьВодителейПоУмолчанию);
		Оповещ = Новый ОписаниеОповещения("ИнициализацияДанныхАвтомобиляЗавершение", ЭтотОбъект, ДопПараметрыОповещения);
		ПоказатьВопрос(Оповещ, "Таблица ""Расход ГСМ"" будет очищена! Продолжить?", РежимДиалогаВопрос.ОКОтмена);
		Возврат;
	КонецЕсли;
	
	ИнициализацияДанныхАвтомобиляФрагмент(Оповещение, флЗаполнитьВодителейПоУмолчанию);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализацияДанныхАвтомобиляЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Оповещение = ДополнительныеПараметры.Оповещение;
    флЗаполнитьВодителейПоУмолчанию = ДополнительныеПараметры.флЗаполнитьВодителейПоУмолчанию;
    
    Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
        Объект.РасходГСМ.Очистить();
    Иначе
        Объект.ТС = ТС;
		Если Оповещение <> Неопределено Тогда 
			ВыполнитьОбработкуОповещения(Оповещение);
		КонецЕсли;
        Возврат;
    КонецЕсли;
    
    ИнициализацияДанныхАвтомобиляФрагмент(Оповещение, флЗаполнитьВодителейПоУмолчанию);

КонецПроцедуры

&НаКлиенте
Процедура ИнициализацияДанныхАвтомобиляФрагмент(Знач Оповещение, Знач флЗаполнитьВодителейПоУмолчанию)
	
	Если ЗаправкиГСМ.Количество() > 0 Тогда
		ПоказатьПредупреждение(Новый ОписаниеОповещения("ИнициализацияДанныхАвтомобиляФрагментЗавершение", ЭтотОбъект,
		Новый Структура("Оповещение, флЗаполнитьВодителейПоУмолчанию", Оповещение, флЗаполнитьВодителейПоУмолчанию)),
		НСтр("en='It is necessary to change fueling documents!';ru='Необходимо изменить документы заправки ГСМ!'"), 10);
		Возврат;
	КонецЕсли;
	
	ИнициализацияДанныхАвтомобиляФрагментФрагмент(Оповещение, флЗаполнитьВодителейПоУмолчанию);
КонецПроцедуры

&НаКлиенте
Процедура ИнициализацияДанныхАвтомобиляФрагментЗавершение(ДополнительныеПараметры) Экспорт
    
    Оповещение = ДополнительныеПараметры.Оповещение;
    флЗаполнитьВодителейПоУмолчанию = ДополнительныеПараметры.флЗаполнитьВодителейПоУмолчанию;
    
    
    ИнициализацияДанныхАвтомобиляФрагментФрагмент(Оповещение, флЗаполнитьВодителейПоУмолчанию);

КонецПроцедуры

&НаКлиенте
Процедура ИнициализацияДанныхАвтомобиляФрагментФрагмент(Знач Оповещение, Знач флЗаполнитьВодителейПоУмолчанию)
	
	ИнициализацияДанныхАвтомобиляСервер(флЗаполнитьВодителейПоУмолчанию);
	
	УстановитьВидимость();
	УстановитьВозможностьРедактированияДанныхПоGPS();
	
	Если Оповещение <> Неопределено Тогда 
		ВыполнитьОбработкуОповещения(Оповещение);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализацияДанныхАвтомобиляСервер(флЗаполнитьВодителейПоУмолчанию)
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ОрганизацияТС = уатОбщегоНазначения.МестонахождениеТС(Объект.ТС, Объект.ДатаВыезда).Организация;
		Если Объект.Организация <> ОрганизацияТС Тогда
			Объект.Организация = ОрганизацияТС;
			ПриИзмененииОрганизации();
		КонецЕсли;
	КонецЕсли;
	
	мСоставТС = Новый Массив;
	
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	ДокОбъект.ИнициализацияДанныхАвтомобиля(ОстатокТопливаВыезд, мСоставТС, флЗаполнитьВодителейПоУмолчанию);
	ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
	
	ОстатокТопливаВозвратПриИзмененииСервер();
	
	Если Объект.ТС.Модель.НаличиеСпидометра Тогда
		Элементы.ДекорацияОдометр.Заголовок = НСтр("en='Odometer';ru='Одометр'");
	Иначе
		Элементы.ДекорацияОдометр.Заголовок = НСтр("en='Counter m/h';ru='Счетчик м/ч'");
	КонецЕсли;
	
	ПодразделениеТС = Объект.ТС.Подразделение;
	Если Объект.Подразделение <> ПодразделениеТС Тогда
		Объект.Подразделение = ПодразделениеТС;
		ПодразделениеПриИзмененииСервер();
	КонецЕсли;
	
	ПересчетВыданногоГСМСервер();
	
	ОбновитьДинамическиеКолонкиТЧСервер();
	
	ТС = Объект.ТС;
КонецПроцедуры
	
&НаКлиенте
// Процедура заполняет таблицу списком заправок
//
Процедура ВывестиТаблицуЗаправок()
	
	ЗаправкиГСМ.Очистить();
	
	мсвЗаправок = уатПутевыеЛисты.ПолучитьЗаправкиДляПЛ(Объект.Ссылка);
	
	// Если есть хотя бы одна заправка не со склада и по талонам, делаем видимыми столбцы сумма и валюта
	мВидимостьСуммы = Ложь;
	
	Для Каждого ТекСтрока Из мсвЗаправок Цикл
		НоваяСтрока = ЗаправкиГСМ.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		
		Если ТекСтрока.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаНаличные")
			ИЛИ ТекСтрока.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПоставщик")
			ИЛИ ТекСтрока.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКарта")
			Тогда
			
			мВидимостьСуммы = Истина;
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьЗаправкиВсего();
	ОбновитьКартинкиЗаправкиГСМ();
	
	Если Элементы.ЗаправкиГСМСумма.Видимость <> мВидимостьСуммы Тогда
		Элементы.ЗаправкиГСМВалюта.Видимость = мВидимостьСуммы;
		Элементы.ЗаправкиГСМСумма.Видимость = мВидимостьСуммы;
		Элементы.ЗаправкиГСМЦена.Видимость = мВидимостьСуммы;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиТаблицуЗаправокСервер()
	ЗаправкиГСМ.Очистить();
	
	мсвЗаправок = уатПутевыеЛисты.ПолучитьЗаправкиДляПЛ(Объект.Ссылка);
	
	// Если есть хотя бы одна заправка не со склада и по талонам, делаем видимыми столбцы сумма и валюта
	мВидимостьСуммы = Ложь;
	
	Для Каждого ТекСтрока Из мсвЗаправок Цикл
		НоваяСтрока = ЗаправкиГСМ.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		
		Если ТекСтрока.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаНаличные")
			ИЛИ ТекСтрока.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПоставщик")
			ИЛИ ТекСтрока.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКарта")
			Тогда
			
			мВидимостьСуммы = Истина;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОбновитьКартинкиЗаправкиГСМ()
	Для Каждого ТекСтрока Из ЗаправкиГСМ Цикл
		Если ТекСтрока.Ссылка.Проведен Тогда
			ТекСтрока.Картинка = 1;
		ИначеЕсли ТекСтрока.Ссылка.ПометкаУдаления Тогда
			ТекСтрока.Картинка = 2;
		Иначе
			ТекСтрока.Картинка = 0;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаправкиВсего()
	Для Каждого СтрокаТабличнойЧасти Из ЗаправкиГСМ Цикл
		Если СтрокаТабличнойЧасти.УчитыватьНДС И НЕ СтрокаТабличнойЧасти.СуммаВключаетНДС Тогда
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + СтрокаТабличнойЧасти.СуммаНДС;
		Иначе
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПересчетОстаткаГСМ(ТекКолонкаИмя = "РасходПоФакту", ТекСтрока = Неопределено)
	Если ТекСтрока = Неопределено Тогда
		ТекСтрока = Элементы.РасходГСМ.ТекущиеДанные;
	КонецЕсли;
	
	Если ТекКолонкаИмя = "ОстатокПриВыезде" Тогда
		ПересчетРасходФактВСтроке(ТекСтрока);
	ИначеЕсли ТекКолонкаИмя = "ОстатокПриВозвращении" Тогда
		ПересчетРасходФактВСтроке(ТекСтрока);
	Иначе //Если ТекКолонкаИмя = "РасходПоФакту" Тогда
		ТекСтрока.ОстатокПриВозвращении = ТекСтрока.ОстатокПриВыезде - ТекСтрока.РасходПоФакту + ТекСтрока.Выдано;
	КонецЕсли;
	
	Если Объект.ТС = ТекСтрока.ТС Тогда
		Если ПолучитьЗначениеРеквизита(ПолучитьЗначениеРеквизита(Объект.ТС, "Модель"),
				"ОсновноеТопливо") = ТекСтрока.ГСМ Тогда
			ОстатокТопливаВыезд = ТекСтрока.ОстатокПриВыезде;
			ОстатокТопливаВозврат = ТекСтрока.ОстатокПриВозвращении;
		КонецЕсли;
	КонецЕсли;
	
	РассчитатьЭкономиюПережог();
КонецПроцедуры

&НаСервере
Процедура ПересчетВыданногоГСМСервер()
	уатПутевыеЛисты.ПересчетВыданногоГСМ(Объект, ЗаправкиГСМ);
КонецПроцедуры

&НаКлиенте
Процедура ПересчетРасходФактВСтроке(СтрокаРасходГСМ)
	СтрокаРасходГСМ.РасходПоФакту = СтрокаРасходГСМ.ОстатокПриВыезде - СтрокаРасходГСМ.ОстатокПриВозвращении
		+ СтрокаРасходГСМ.Выдано;
КонецПроцедуры

&НаСервере
Процедура ПересчетРасходФактВСтрокеСервер(СтрокаРасходГСМ)
	СтрокаРасходГСМ.РасходПоФакту = СтрокаРасходГСМ.ОстатокПриВыезде - СтрокаРасходГСМ.ОстатокПриВозвращении
		+ СтрокаРасходГСМ.Выдано;
КонецПроцедуры

&НаСервере
Функция РасчетИтоговСервер(Отказ, флЗаписывать = Ложь, ТекстСообщОшибки = "")
	ВывестиТаблицуЗаправокСервер();
	ПересчетВыданногоГСМСервер();
	
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	Рез = ДокОбъект.РасчетИтогов(Отказ, флЗаписывать);
	ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
	
	ОбновитьДинамическиеКолонкиТЧСервер();
	
	Если Объект.РасчетФактРасходаГСМ = Перечисления.уатВидыРасчетаРасходаГСМ.ПоНорме Или Объект.РасчетФактРасходаГСМ = Перечисления.уатВидыРасчетаРасходаГСМ.ПоGPS Тогда
		ОснТопливо = ПолучитьЗначениеРеквизита(ПолучитьЗначениеРеквизита(Объект.ТС, "Модель"), "ОсновноеТопливо");
		Для Каждого ТекСтрока Из Объект.РасходГСМ Цикл
			Если ТекСтрока.Активен Тогда
				Если ТекСтрока.ТС = Объект.ТС И ТекСтрока.ГСМ = ОснТопливо Тогда
					ОстатокТопливаВозврат = ТекСтрока.ОстатокПриВозвращении;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Рез;
КонецФункции

&НаСервере
Процедура УстановитьДатыВыездаВозвращения()
	уатПутевыеЛисты.УстановитьДатыВыездаВозвращения(Объект, Истина);
	ДатаВыездаПриИзмененииСервер();
	ДатаВозвращенияПриИзмененииСервер();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПросроченныеДокументыВодителя(ТекДата, мДниДоОкончанияДействияДокументовВодителей, Водитель)
	Возврат уатОбщегоНазначения.уатПросроченныеДокументыВодителя(ТекДата, мДниДоОкончанияДействияДокументовВодителей,
		Водитель);
КонецФункции

&НаСервереБезКонтекста
Функция ПросроченныеДокументыТС(ТекДата, мДниДоОкончанияДействияДокументовТС, ТС)
	Возврат уатОбщегоНазначения.уатПросроченныеДокументыТС(ТекДата, мДниДоОкончанияДействияДокументовТС, ТС);
КонецФункции

&НаСервере
Процедура СохранитьНастройкиСервер()
	УстановитьПривилегированныйРежим(Истина);
	ХранилищеОбщихНастроек.Сохранить("Документ.уатТехнологическийПутевойЛист", "РедактироватьЗаправкуГСМВДиалоге", РедактироватьЗаправкуГСМВДиалоге);
КонецПроцедуры

&НаСервере
Функция ПроверитьЗаполнениеДокумента()
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	Возврат ДокОбъект.ПроверитьЗаполнение();
КонецФункции

&НаСервереБезКонтекста
Функция ВалютаРегламентированногоУчета()
	Возврат Константы.ВалютаРегламентированногоУчета.Получить();
КонецФункции

&НаСервереБезКонтекста
Функция ПравоДоступаИзменениеЗаправкиГСМ()
	Возврат ПравоДоступа("Изменение", Метаданные.Документы.уатЗаправкаГСМ);
КонецФункции

&НаКлиенте
Процедура РассчитатьСуммуНДС(СтрокаТабличнойЧасти)
	СтрокаТабличнойЧасти.СуммаНДС = уатОбщегоНазначенияТиповые.уатРассчитатьСуммуНДС(СтрокаТабличнойЧасти.Сумма,
		мДокументЗаправкаГСМ.УчитыватьНДС, мДокументЗаправкаГСМ.СуммаВключаетНДС,
		уатОбщегоНазначенияТиповые.уатПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
КонецПроцедуры

// Функция возвращает подразделение, используемое для получения настроек
//
&НаСервере
Функция ПодразделениеНастройки()
	Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
		Рез = Объект.Подразделение;
	Иначе
		Рез = уатОбщегоНазначения.МестонахождениеТС(Объект.ТС).Подразделение;
	КонецЕсли;
	
	Возврат Рез;
КонецФункции

&НаКлиенте
Процедура СформироватьСписокВыбораТСвЗаправкахГСМ()
	Элементы.ЗаправкиГСМТС.СписокВыбора.Очистить();
	
	Если ЗначениеЗаполнено(Объект.ТС) Тогда
		Элементы.ЗаправкиГСМТС.СписокВыбора.Добавить(Объект.ТС);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СформироватьСписокВыбораТСвЗаправкахГСМСервер()
	Элементы.ЗаправкиГСМТС.СписокВыбора.Очистить();
	
	Если ЗначениеЗаполнено(Объект.ТС) Тогда
		Элементы.ЗаправкиГСМТС.СписокВыбора.Добавить(Объект.ТС);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьКэшПравПоGPS()
	
	ОргЗапретПоказанийОдометра   = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация, "ЗапретитьРучноеИзменениеПоказанийОдометра");
	ПользЗапретПоказанийОдометра = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ПользователиКлиентСервер.АвторизованныйПользователь(), "ЗапретитьРучноеИзменениеПоказанийОдометра");
	ЗапретПоказанийОдометра      = ?(НЕ ОргЗапретПоказанийОдометра И НЕ ПользЗапретПоказанийОдометра, Ложь, Истина);
	
	ОргЗапретОстатковТоплива   = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация, "ЗапретитьРучноеИзменениеОстатковТоплива");
	ПользЗапретОстатковТоплива = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ПользователиКлиентСервер.АвторизованныйПользователь(), "ЗапретитьРучноеИзменениеОстатковТоплива");
	ЗапретОстатковТоплива	   = ?(НЕ ОргЗапретОстатковТоплива И НЕ ПользЗапретОстатковТоплива, Ложь, Истина);
	
	мКэшПравGPS_ЗапретитьРучноеИзменениеПоказанийОдометра = ЗапретПоказанийОдометра;
	мКэшПравGPS_ЗапретитьРучноеИзменениеОстатковТоплива = ЗапретОстатковТоплива;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВозможностьРедактированияДанныхПоGPS()
	Если НЕ ЗначениеЗаполнено(Объект.ТС) Тогда
		Возврат;
	КонецЕсли;
	
	ИспользуетGPS = уатОбщегоНазначения_проф.уатПроверитьИспользованиеGPS(Объект.ТС);
	
	Если мКэшПравGPS_ЗапретитьРучноеИзменениеПоказанийОдометра И ИспользуетGPS Тогда
		Элементы.ОдометрВыезда.ТолькоПросмотр = Истина;
		Элементы.ОдометрВозвращения.ТолькоПросмотр = Истина;
	Иначе
		Элементы.ОдометрВыезда.ТолькоПросмотр = Ложь;
		Элементы.ОдометрВозвращения.ТолькоПросмотр = Ложь;	
	КонецЕсли;
	
	Если мКэшПравGPS_ЗапретитьРучноеИзменениеОстатковТоплива И ИспользуетGPS Тогда
		Элементы.ОстатокТопливаВыезд.ТолькоПросмотр = Истина;
		Элементы.ОстатокТопливаВозврат.ТолькоПросмотр = Истина;
	Иначе
		Элементы.ОстатокТопливаВыезд.ТолькоПросмотр = Ложь;
		Элементы.ОстатокТопливаВозврат.ТолькоПросмотр = Ложь;
	КонецЕсли;	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьГСМПоGPSСервер(РезультатСтруктура = Неопределено, флВыезд = Ложь)
	ПараметрыРасчетаГСМ = уатПутевыеЛисты.ПолучитьПараметрыРасчетаРасходаГСМ(Объект);
	
	уатМониторинг.РассчитатьГСМПоМониторингу(Объект, ПараметрыРасчетаГСМ, РезультатСтруктура, флВыезд);

	Если флВыезд И ПараметрыРасчетаГСМ.Свойство("ОстатокТопливаВыезд") Тогда
		ОстатокТопливаВыезд = ПараметрыРасчетаГСМ.ОстатокТопливаВыезд;
	ИначеЕсли НЕ флВыезд И ПараметрыРасчетаГСМ.Свойство("ОстатокТопливаВозврат") Тогда
		ОстатокТопливаВозврат = ПараметрыРасчетаГСМ.ОстатокТопливаВозврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокВыбораЭкипажа()
	Элементы.Водитель.СписокВыбора.Очистить();
	
	ЭкипажТССписок = уатЗащищенныеФункцииСервер.ЭкипажТССписок(Объект.ТС);
	ЭкипажТССписок_Количество = ЭкипажТССписок.Количество();
	
	Элементы.Водитель.КнопкаВыпадающегоСписка = (ЭкипажТССписок_Количество > 0);
	
	Если ЭкипажТССписок_Количество = 0 Тогда	
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекСотр Из ЭкипажТССписок Цикл
		Элементы.Водитель.СписокВыбора.Добавить(ТекСотр.Значение);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокВыбораЭкипажаСервер()
	Элементы.Водитель.СписокВыбора.Очистить();
	
	ЭкипажТССписок = уатЗащищенныеФункцииСервер.ЭкипажТССписок(Объект.ТС);
	ЭкипажТССписок_Количество = ЭкипажТССписок.Количество();
	
	Элементы.Водитель.КнопкаВыпадающегоСписка = (ЭкипажТССписок_Количество > 0);
	
	Если ЭкипажТССписок_Количество = 0 Тогда	
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекСотр Из ЭкипажТССписок Цикл
		Элементы.Водитель.СписокВыбора.Добавить(ТекСотр.Значение);
	КонецЦикла;
КонецПроцедуры

// Проверка просрочена ли пластиковая карта
//
&НаСервереБезКонтекста
Функция ПластиковаяКартаПросрочена(ПластиковаяКарта, ДатаЗаправки)
	Если ПластиковаяКарта.ДатаОкончания <> Дата(1,1,1) Тогда
		Если ПластиковаяКарта.ДатаОкончания < ДатаЗаправки Тогда 
			Возврат Истина;
		КонецЕсли;
	КонецЕсли;
	Возврат Ложь;
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПревышениеУровняТопливаВБаке()
	//ПоказатьПредупреждение(Неопределено, ПредупреждениеПревышениеУровняТопливаВБаке);
	уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ПредупреждениеПревышениеУровняТопливаВБаке);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИспользоватьУчетЗатрат()
	Возврат ПолучитьФункциональнуюОпцию("уатИспользоватьУчетДоходовИРасходов");
КонецФункции

&НаСервере
Функция ТребуетсяПолучениеДанныхПоGPS(НаименованиеССМ)
	Возврат уатПутевыеЛисты.ТребуетсяПолучениеДанныхПоGPS(Объект, НаименованиеССМ);
КонецФункции // ТребуетсяПолучениеДанныхПоGPS()

&НаКлиенте
Процедура ПолучитьСтавку(ТекСтрока = Неопределено)
	Если ТекСтрока = Неопределено Тогда
		ТекСтрока = Элементы.ЗаправкиГСМ.ТекущиеДанные;
	КонецЕсли;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекСтрока.УчитыватьНДС Тогда
		Если ЗначениеЗаполнено(ТекСтрока.ГСМ) Тогда
			СтавкаНДС = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрока.ГСМ, "СтавкаНДС");
			Если ЗначениеЗаполнено(СтавкаНДС) Тогда
				ТекСтрока.СтавкаНДС = СтавкаНДС;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ТекСтрока.СтавкаНДС = Неопределено;
	Конецесли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимость()
	Элементы.ГруппаОснУсловияРаботы.Видимость = Объект.УчитыватьГСМ;
	Элементы.ГруппаСтраницаГСМ.Видимость      = Объект.УчитыватьГСМ;
	
	Элементы.ФормаЗаполнитьПоМониторингуПриВыезде.Видимость =
		ВидимостьКнопкиЗаполнитьПоМониторингуПриВыезде(Объект.ТС);
		
	ИдентификаторДействия = "Документ.уатПутевойЛист.УстановитьВидимость";
	#Если Не ТолстыйКлиентОбычноеПриложение Тогда
	уатРаботаСРасширениямиКлиент.ПСМ_ВыполнитьДействияВФорме(ИдентификаторДействия,
	ПолучитьЗначениеРеквизита(ПолучитьЗначениеРеквизита(Объект.ТС, "ИспользуемаяСистемаGPS"),
		"НаименованиеПС"),,ЭтотОбъект);
	#КонецЕсли
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьРассчитанногоДокумента()
	Если Объект.Проведен И Объект.Рассчитан Тогда
		флДоступность = Ложь;
	ИначеЕсли Элементы.ГруппаШапка.ТолькоПросмотр Тогда
		флДоступность = Истина;
	Иначе
		Возврат;
	КонецЕсли;
	
	//ТолькоПросмотр = НЕ флДоступность;
	Элементы.ГруппаШапка.ТолькоПросмотр                          = НЕ флДоступность;
	Элементы.ГруппаСтраницы.ТолькоПросмотр                       = НЕ флДоступность;
	Элементы.ОтветственныйКомментарий.ТолькоПросмотр             = НЕ флДоступность;
	Элементы.ФормаРасчетИтогов.Доступность                       = флДоступность;
	Элементы.ФормаЗаполнитьНачальныеОстатки.Доступность          = флДоступность;
	Элементы.ФормаРассчитатьСпидометрПоЗаданию.Доступность       = флДоступность;
	Элементы.НадписьПробег.Доступность                           = флДоступность;
	Элементы.ЗаправкиГСМДобавитьСуществующуюЗаправку.Доступность = флДоступность;
	Элементы.РедактироватьЗаправкуГСМВДиалоге.Доступность        = флДоступность;
	Элементы.ФормаЗаполнитьПоМониторингуПриВыезде.Доступность    = флДоступность;
	Элементы.ФормаЗаполнитьПоМониторингуПриВозврате.Доступность  = флДоступность;
	Элементы.ОдометрВыезда.КнопкаВыбора							 = флДоступность;
	Элементы.ОдометрВозвращения.КнопкаВыбора					 = флДоступность;
	Элементы.ФормаItobПоказатьМаршрутНаКарте.Доступность         = флДоступность;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВидимостьКнопкиЗаполнитьПоМониторингуПриВыезде(ТС)
	
	Возврат ТС.ИспользуемаяСистемаGPS = Справочники.уатВнешниеСистемы.Omnicomm
			ИЛИ ТС.ИспользуемаяСистемаGPS = Справочники.уатВнешниеСистемы.СКАУТ
			ИЛИ ТС.ИспользуемаяСистемаGPS = Справочники.уатВнешниеСистемы.Wialon
			ИЛИ ТС.ИспользуемаяСистемаGPS = Справочники.уатВнешниеСистемы._1СЦСМ
			ИЛИ (ТС.ИспользуемаяСистемаGPS = Справочники.уатВнешниеСистемы.АвтоГРАФ
			И (ТС.УчетнаяЗаписьСистемыМониторинга.Версия = Перечисления.уатВерсииАвтоГРАФ.АвтоГРАФ_5
				ИЛИ ТС.УчетнаяЗаписьСистемыМониторинга.Версия = Перечисления.уатВерсииАвтоГРАФ.АвтоГРАФ_7))
			ИЛИ ТС.ИспользуемаяСистемаGPS = Справочники.уатВнешниеСистемы.НайтиПоНаименованию("Waliot")
			ИЛИ ТС.ИспользуемаяСистемаGPS = Справочники.уатВнешниеСистемы.НайтиПоНаименованию("Monitor3S");
	
	КонецФункции

#КонецОбласти

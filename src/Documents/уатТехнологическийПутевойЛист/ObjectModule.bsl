#Область ОписаниеПеременных

Перем ДанныеИзменились Экспорт;// Признак изменения данных документа (экспорт сделан для использования формой объекта).
Перем мВремяВНаряде Экспорт;// Время в наряде(общее время). Используется для расчета по временным параметрам выработки.
Перем мВремяВРаботе Экспорт; // Время в работе (рабочее). Используется для расчета по временным параметрам выработки.
Перем мВремяВПростое Экспорт; // Время в простое (простои). Используется для расчета по временным параметрам выработки.
Перем мВремяВПростоеСВклДвигателем Экспорт; // Время в простое с вкл. двигателем (простои).
Перем мВремяНочь Экспорт; // Время ночное. Используется для доп. начислений за ночную выработку.
Перем мКоличествоДней Экспорт; // Количество дней по путевому листу
Перем мПробегОбщий Экспорт; // Общий пробег
Перем мТаблицаПоСписаниюГСМ;

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

#Область РасчетИтогов

// Функция рассчитывает итоги работы по пут. листу
Функция РасчетИтогов(Отказ, флЗаписывать = Истина) Экспорт 
	Заголовок = НСтр("en='Errors in calculation of balance of the work by waybill №';ru='Ошибки при расчете итогов работы по путевому листу №'") + Номер + " :";
	
	ПроверкаКорректностиПЛ_РасчетИтогов(Заголовок, Отказ);
	
	Если Не Отказ Тогда
		РасчетВыработкиТС(Отказ);
		РасчетРасходаГСМ(Заголовок, Отказ);
	КонецЕсли;
	
	Рассчитан = Не Отказ;
	Если НЕ Рассчитан Тогда
		ТекстНСТР = СтрШаблон(НСтр("en='Document ""%1"">: was not calculate.';ru='Документ ""%1"">: не был рассчитан.'"), ЭтотОбъект);
		уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР,,, СтатусСообщения.Внимание);
	КонецЕсли;
	
	Если флЗаписывать И (НЕ Отказ) Тогда
		Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
	
	Возврат Рассчитан;
КонецФункции //РасчетИтогов()

// Процедура рассчитывает выработку ТС
//
Процедура РасчетВыработкиТС(Отказ) Экспорт
	Если ТС.Модель.НаличиеСпидометра Тогда
		мПробегОбщий = уатОбщегоНазначения.уатРазностьПоказанийСчетчика(ОдометрВыезда, ОдометрВозвращения);
	Иначе
		мПробегОбщий = 0;
	КонецЕсли;
	
	уатПутевыеЛисты.РасчитатьВременныеПараметры(ЭтотОбъект);
	
	// удалим строки выработки с ТС/прицепами, которых нет в ПЛ
	мсвТС = Новый Массив;
	мсвТС.Добавить(ТС);
	
	Сч = ВыработкаТС.Количество() - 1;
	Пока Сч >= 0 Цикл
		ТекСтрокаВыработка = ВыработкаТС[Сч];
		Если мсвТС.Найти(ТекСтрокаВыработка.ТС) = Неопределено Тогда
			ВыработкаТС.Удалить(ТекСтрокаВыработка);
		КонецЕсли;
		Сч = Сч - 1;
	КонецЦикла;
	
	СтруктураОбъектовНастроек = Новый Структура;
	СтруктураОбъектовНастроек.Вставить("Организация", Организация);
	Если ЗначениеЗаполнено(Подразделение) Тогда 
		СтруктураОбъектовНастроек.Вставить("Подразделение", Подразделение);
	Иначе
		СтруктураОбъектовНастроек.Вставить("Подразделение", ТС.Подразделение);
	КонецЕсли;
	
	ПраваОрганизации = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек);
	АвтообновлениеПЛпоGPS           = уатПраваИНастройки.уатПраво("АвтообновлениеПЛпоGPS",           ПраваОрганизации);
	ПодставлятьВремяВРаботеВПЛпоGPS = уатПраваИНастройки.уатПраво("ПодставлятьВремяВРаботеВПЛпоGPS", ПраваОрганизации);
	ПодставлятьОбщийПробегВПЛпоGPS  = уатПраваИНастройки.уатПраво("ПодставлятьОбщийПробегВПЛпоGPS",  ПраваОрганизации); 
	
	РасчетВыработкиТС_Ручной(Отказ, ПодставлятьВремяВРаботеВПЛпоGPS, ПодставлятьОбщийПробегВПЛпоGPS, АвтообновлениеПЛпоGPS);
	
	Если АвтообновлениеПЛпоGPS Тогда 
		ОбновитьДанныеВыработкиПоGPS();
	КонецЕсли;
	
	СвернутьВыработкуТСпоУчетнойПолитике();
КонецПроцедуры //РасчетВыработкиТС()

// Процедура рассчитывает выработку ТС вручную
// При этом следующие параметры пересчитываются при расчете итогов:
// - Пробег общий,
// - Время в работе,
// - Время в наряде,
// - Время ночное,
// - Время в простое.
// Остальные параметры не пересчитываются.
//
Процедура РасчетВыработкиТС_Ручной(Отказ, ПодставлятьВремяВРаботеВПЛпоGPS, ПодставлятьОбщийПробегВПЛпоGPS, АвтообновлениеПЛпоGPS)
	
	Если АвтообновлениеПЛпоGPS Тогда 
		ОбновитьДанныеВыработкиПоGPS();
	КонецЕсли;
	
	//пробег
	Если ПодставлятьОбщийПробегВПЛпоGPS И ЗначениеЗаполнено(ТС.ИспользуемаяСистемаGPS) И ЗначениеЗаполнено(ТС.ИДвСистемеНавигации) Тогда 
		КоличествоВыработкиПоGPS = ПолучитьВыработкуПоGPS(ТС, Справочники.уатПараметрыВыработки.ПробегОбщийПоДаннымGPS);
		ЗаписатьСтрокуВыработкиТС(ТС, Справочники.уатПараметрыВыработки.ПробегОбщий, КоличествоВыработкиПоGPS,, Истина, Истина);
	Иначе 
		ЗаписатьСтрокуВыработкиТС(ТС, Справочники.уатПараметрыВыработки.ПробегОбщий, мПробегОбщий,, Истина, Истина);
	КонецЕсли;
	
	// время в наряде
	ЗаписатьСтрокуВыработкиТС(ТС, Справочники.уатПараметрыВыработки.ВремяВНаряде, мВремяВНаряде,, Истина, Истина);
	
	// Время в работе. Если у ТС спидометр, то время берем из задания, иначе показания спидометра используются
	// как счетчики моточасов
	Если ТС.Модель.НаличиеСпидометра Тогда
		мНаработка = мВремяВРаботе;
	Иначе
		мНаработка = уатОбщегоНазначения.уатПоказанияСчетчикаВСекунды(уатОбщегоНазначения.уатРазностьПоказанийСчетчика(ОдометрВыезда, ОдометрВозвращения));
	КонецЕсли;
	
	Если ПодставлятьВремяВРаботеВПЛпоGPS И ЗначениеЗаполнено(ТС.ИспользуемаяСистемаGPS) И ЗначениеЗаполнено(ТС.ИДвСистемеНавигации) Тогда 
		КоличествоВыработкиПоGPS = ПолучитьВыработкуПоGPS(ТС, Справочники.уатПараметрыВыработки.ВремяВРаботеПоДаннымGPS);
		ЗаписатьСтрокуВыработкиТС(ТС, Справочники.уатПараметрыВыработки.ВремяВРаботе, КоличествоВыработкиПоGPS,, Истина, Истина);
	Иначе 
		ЗаписатьСтрокуВыработкиТС(ТС, Справочники.уатПараметрыВыработки.ВремяВРаботе, мНаработка,, Истина, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Процедура записывает строку выработки ТС
// ДопАналитика: структура, содержащая ключи Подразделение, Контрагент, ОбъектСтроительства, Маршрут
//	флУдалитьСтрокиБезДопАналитик - если Истина, тогда перед добавлением новой строки выработки будут очищены
//		не только строки, соотв. структуре ДопАналитика, но также и все остальные строки, для которых
//		значения ТС и Параметра выработки совпадают с входными параметрами. Имеет смысл только для значения
//		флЗамещать = Истина
//
Процедура ЗаписатьСтрокуВыработкиТС(ВыбТС, ПараметрВыработки, КоличествоВыработки, Знач ДопАналитика = Неопределено, Знач флЗамещать = Истина, флУдалитьСтрокиБезДопАналитик = Ложь) Экспорт
	ДопАналитика = Новый Структура("Подразделение, ОбъектСтроительства", Подразделение, ОбъектСтроительства);
	ДопПараметры = Новый Структура("флЗамещать, флУдалитьСтрокиБезДопАналитик, флЭтоТПЛ", флЗамещать, флУдалитьСтрокиБезДопАналитик, Истина);
	уатПутевыеЛисты.ЗаписатьСтрокуВыработкиТС(ВыработкаТС, ВыбТС, ПараметрВыработки, КоличествоВыработки, ДопАналитика, ДопПараметры);
КонецПроцедуры //ЗаписатьСтрокуВыработкиТС()

// Процедура рассчитывает расход ГСМ
Процедура РасчетРасходаГСМ(Заголовок, Отказ) Экспорт 
	
	// очищаем строки с ненайденными ТС и оборудованием
	мсвТС = Новый Массив;
	Если ЗначениеЗаполнено(ТС) Тогда
		мсвТС.Добавить(ТС);
	КонецЕсли;
	
	Для Каждого ТекСтрокаРасходГСМ Из РасходГСМ Цикл
		Если мсвТС.Найти(ТекСтрокаРасходГСМ.ТС) = Неопределено Тогда
			РасходГСМ.Удалить(ТекСтрокаРасходГСМ);
		КонецЕсли;
	КонецЦикла;
	
	СтруктураОбъектовНастроек = Новый Структура;
	СтруктураОбъектовНастроек.Вставить("Организация", Организация);
	Если ЗначениеЗаполнено(Подразделение) Тогда 
		СтруктураОбъектовНастроек.Вставить("Подразделение", Подразделение);
	Иначе
		СтруктураОбъектовНастроек.Вставить("Подразделение", ТС.Подразделение);
	КонецЕсли;
	
	ПраваОрганизации = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек);
	
	АвтообновлениеПЛпоGPS = уатПраваИНастройки.уатПраво("АвтообновлениеПЛпоGPS", ПраваОрганизации);
	
	Если АвтообновлениеПЛпоGPS Тогда 
		ОбновитьДанныеПоРасходуГСМпоGPS();
	КонецЕсли;
	
	Если НеПересчитыватьРасходГСМ Тогда
		ТекстНСТР = СтрШаблон(НСтр("en='Calculation of fuels consumption on waybill №%1 failed: set checked box ""Not recalculate fuels consumption""';ru='Расчет расхода ГСМ по путевому листу №%1 не выполнен: установлен флажок ""Не пересчитывать расход ГСМ""'"), Номер);
		уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР,,, СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
	
	СтруктураПолей = Новый Структура("ТС, ГСМ");
	уатОбщегоНазначенияТиповые.уатПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "РасходГСМ", СтруктураПолей, Отказ, Заголовок);
	Если Отказ Тогда Возврат КонецЕсли;
	
	ФлагТопливоАктивно = Ложь;
	Для Каждого ТекСтрока Из РасходГСМ Цикл
		Если ТекСтрока.ТС = ТС И ТекСтрока.Активен Тогда
			ФлагТопливоАктивно = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ФлагТопливоАктивно Тогда
		ТекстНСТР = НСтр("en='In table ""Movement of fuels"" for vehicles not listed active fuel to calculate!';ru='В таблице ""Движение ГСМ"" для автомобиля не указано активное топливо для расчета!'");
		уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР,,, СтатусСообщения.Важное);
	КонецЕсли;
	
	ПредупреждатьПриПревышенииУровняТопливаВБаке = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, ПланыВидовХарактеристик.уатПраваИНастройки.ПредупреждатьПриПревышенииУровняТопливаВБаке);
	
	ПараметрыРасчетаГСМ = уатПутевыеЛисты.ПолучитьПараметрыРасчетаРасходаГСМ(ЭтотОбъект);
	
	Для Каждого ТекСтрока Из РасходГСМ Цикл
		Если уатГСМ.ЭтоТехническаяЖидкость(ТекСтрока.ГСМ) Тогда
			Продолжить;
		КонецЕсли;
			
		Если ТекСтрока.Активен Тогда
			ТекСтрока.РасходПоНорме = уатГСМ.РасчитатьРасходГСМПоНорме(ПараметрыРасчетаГСМ, ТекСтрока.ТС, ТекСтрока.ГСМ, Отказ);
			Если Отказ Тогда
				Возврат;
			КонецЕсли;
			
			Если РасчетФактРасходаГСМ = Перечисления.уатВидыРасчетаРасходаГСМ.ПоНорме Тогда
				мРасходПоФакту = ТекСтрока.РасходПоНорме;
				ТекСтрока.ОстатокПриВозвращении = окр(ТекСтрока.ОстатокПриВыезде - мРасходПоФакту + ТекСтрока.Выдано,
					уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация,
					ПланыВидовХарактеристик.уатПраваИНастройки.ТочностьОстатковТоплива));
				
			ИначеЕсли РасчетФактРасходаГСМ = Перечисления.уатВидыРасчетаРасходаГСМ.ПоGPS Тогда
				мРасходПоФакту = ТекСтрока.РасходПоGPS;
				ТекСтрока.ОстатокПриВозвращении = Окр(ТекСтрока.ОстатокПриВыезде - мРасходПоФакту + ТекСтрока.Выдано,
					уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация,
					ПланыВидовХарактеристик.уатПраваИНастройки.ТочностьОстатковТоплива));
				
			Иначе
				мРасходПоФакту = Окр(ТекСтрока.ОстатокПриВыезде - ТекСтрока.ОстатокПриВозвращении + ТекСтрока.Выдано,
					уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация,
					ПланыВидовХарактеристик.уатПраваИНастройки.ТочностьОстатковТоплива));
					
			КонецЕсли;
				
			ОбъемБака = уатГСМ.ОбъемБакаТС(ТекСтрока.ТС, ТекСтрока.ГСМ);
			Если ПредупреждатьПриПревышенииУровняТопливаВБаке И ЗначениеЗаполнено(ОбъемБака) Тогда
				Если ТекСтрока.ОстатокПриВозвращении > ОбъемБака Тогда
					ТекстНСТР = НСтр("en='Fuel level increase in vehicle tank';ru='Превышение уровня топлива в баке ТС'") + " """ + ТекСтрока.ТС + """";
					уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР,,, СтатусСообщения.Внимание);
				КонецЕсли;
			КонецЕсли;	
			
		Иначе
			ТекСтрока.РасходПоНорме = 0;
			
			Если РасчетФактРасходаГСМ = Перечисления.уатВидыРасчетаРасходаГСМ.ПоНорме Тогда
				мРасходПоФакту = 0;
			ИначеЕсли РасчетФактРасходаГСМ = Перечисления.уатВидыРасчетаРасходаГСМ.ПоGPS Тогда
				мРасходПоФакту = 0;
			Иначе
				мРасходПоФакту = Окр(ТекСтрока.ОстатокПриВыезде - ТекСтрока.ОстатокПриВозвращении + ТекСтрока.Выдано,
					уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация,
					ПланыВидовХарактеристик.уатПраваИНастройки.ТочностьОстатковТоплива));
			КонецЕсли;
		КонецЕсли;
		Если РасчетФактРасходаГСМ <> перечисления.уатВидыРасчетаРасходаГСМ.НеРассчитывать Тогда
			ТекСтрока.РасходПоФакту = мРасходПоФакту;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры //РасчетРасходаГСМ()

#КонецОбласти

#Область Служебные

// Процедура удаляет строки из документы Заправки ГСМ, соответствующие данному п/л. 
// Если строк не осталось, то сам документ помечаем на удаление.
Процедура УдалитьЗаправку(вхЗаправка, вхТС = Неопределено, вхДата = Неопределено, вхКоличество = Неопределено) Экспорт
	
	Если вхТС = Неопределено Тогда
		
		мСтроки = вхЗаправка.Заправки.НайтиСтроки(Новый Структура("ПутевойЛист", Ссылка));
		
	Иначе
		
		мСтроки = вхЗаправка.Заправки.НайтиСтроки(Новый Структура("ПутевойЛист, ТС, Дата, Количество", Ссылка, вхТС,
			вхДата, вхКоличество));
		
	КонецЕсли;
	
	Для сч = 0 По мСтроки.Количество() - 1 Цикл
		
		ТекСтрока = мСтроки[сч];
		вхЗаправка.Заправки.Удалить(ТекСтрока);
		
	КонецЦикла;	
	
	Если вхЗаправка.Заправки.Количество() = 0 Тогда
		вхЗаправка.Записать();
		вхЗаправка.УстановитьПометкуУдаления(Истина);
	Иначе
		
		Если вхЗаправка.Проведен Тогда
			мРежимЗаписи = РежимЗаписиДокумента.Проведение;
		Иначе
			мРежимЗаписи = РежимЗаписиДокумента.Запись;
		КонецЕсли;
		
		вхЗаправка.Записать(мРежимЗаписи);
		
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#КонецОбласти


#Область ОбработчикиСобытий

Процедура ПриКопировании(ОбъектКопирования)
	
	Дата                 = ТекущаяДата();
	ДатаВыезда		     = Дата;
	ДатаВозвращения	     = Дата;
	ОдометрВозвращения = 0;
	
	РасходГСМ.Очистить();
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	уатПроведение.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа.
	Документы.уатТехнологическийПутевойЛист.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	уатПроведение.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета. Движения которые выполняются всегда
	уатПроведение.ОтразитьСостояниеТС(ДополнительныеСвойства, Движения, Отказ);
	уатПроведение.ОтразитьПланированиеРаботыТС(ДополнительныеСвойства, Движения, Отказ);

	// Отражение в разделах учета. Часть движений которые выполняются только когда путевой лист рассчитан
	Если Рассчитан Тогда
		уатПроведение.ОтразитьСчетчикиТС(ДополнительныеСвойства, Движения, Отказ);
		уатПроведение.ОтразитьВыработкуТС(ДополнительныеСвойства, Движения, Отказ);
		Если УчитыватьГСМ Тогда
			уатПроведение.ОтразитьОстаткиГСМНаТС(ДополнительныеСвойства, Движения, Отказ);
			уатПроведение.ОтразитьРасходГСМНаТС(ДополнительныеСвойства, Движения, Отказ);
		КонецЕсли;
		уатПроведение.ОтразитьИзносПробегШин(ДополнительныеСвойства, Движения, Отказ);
		//уатПроведение_проф.ОтразитьВыработкуАгрегатов(ДополнительныеСвойства, Движения, Отказ);
		Если уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, "УчетРабочегоВремени") Тогда
			уатПроведение.ОтразитьРабочееВремяРаботниковОрганизаций(ДополнительныеСвойства, Движения, Отказ);
		КонецЕсли;
		Если ПолучитьФункциональнуюОпцию("уатИспользоватьУчетДоходовИРасходов") = ИСТИНА Тогда
			уатПроведение.ОтразитьРасходы(ДополнительныеСвойства, Движения, Отказ);
		КонецЕсли;
	КонецЕсли;
	
	// Запись наборов записей.
	уатПроведение.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль возникновения отрицательного остатка.
	Документы.уатТехнологическийПутевойЛист.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("МодифицированностьДокумента", Модифицированность());
	
	// Удаляем данные в заправках
	Если ПометкаУдаления Тогда
		мТаблицаЗаправкиГСМ = уатОбщегоНазначения.уатПолучитьЗаправкиДляПЛ(Ссылка);
		
		флЗапретПометкиУдаленияПЛприНаличииЗаправокСливовГСМ = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(
			Организация, "ЗапретПометкиУдаленияПЛприНаличииЗаправокСливовГСМ");
			
		Если мТаблицаЗаправкиГСМ.Количество() > 0 Тогда
			Если флЗапретПометкиУдаленияПЛприНаличииЗаправокСливовГСМ Тогда
				Отказ = Истина;
				ТекстСообщенияЗаправки = "Пометка удаления запрещена: по Технологическому путевому листу введены Заправки ГСМ!";
			Иначе
				Для Каждого ТекСтрока Из мТаблицаЗаправкиГСМ Цикл
					УдалитьЗаправку(ТекСтрока.Ссылка.ПолучитьОбъект());
				КонецЦикла;
				ТекстСообщенияЗаправки = "При пометке удаления была удалена информация о Заправках ГСМ, введенных по Технологическому путевому листу";
			КонецЕсли;
			
			флОтказ = Ложь;
			уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстСообщенияЗаправки, флОтказ);
		КонецЕсли;
	КонецЕсли;
	
	// Сброс флага Рассчитан
	Если НЕ Отказ И РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения И Рассчитан Тогда
		Рассчитан = Ложь;
	КонецЕсли;
	
	// Проверка заполнения документа
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение И НЕ ПометкаУдаления Тогда
		уатПутевыеЛисты.ПроверитьЗаполнениеДокумента(ЭтотОбъект, Отказ);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// Процедура сворачивает выработку ТС по настройкам учета выработки согласно учетной политике
// Перед сверткой, если по аналитике (напр. Подразделение) не ведется учет, то она заполняется пустыми значениями
//
Процедура СвернутьВыработкуТСпоУчетнойПолитике()
	УчетВыработкиПоПодразделениям = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, ПланыВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоПодразделениям);
	УчетВыработкиПоОбъектамСтроительства = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, ПланыВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоОбъектамСтроительства);
		
	Для Каждого ТекСтрока Из ВыработкаТС Цикл
		Если НЕ УчетВыработкиПоПодразделениям Тогда
			ТекСтрока.Подразделение = Неопределено;
		КонецЕсли;
		Если НЕ УчетВыработкиПоОбъектамСтроительства Тогда
			ТекСтрока.ОбъектСтроительства = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	ВыработкаТС.Свернуть("ТС, ПараметрВыработки, Подразделение, ОбъектСтроительства", "Количество");
	
КонецПроцедуры

Функция ПолучитьВыработкуПоGPS(ТекТС, ТекПараметрВыработки)
	
	НайдСтроки = ВыработкаТС.НайтиСтроки(Новый Структура("ТС,ПараметрВыработки",ТекТС,ТекПараметрВыработки));
	Если НайдСтроки.Количество() Тогда 
		Возврат НайдСтроки[0].Количество;
	Иначе 
		Возврат 0;
	КонецЕсли;
	
КонецФункции // ПолучитьВыработкуПоGPS()

Процедура ОбновитьДанныеВыработкиПоGPS()
	
	// Обновление пробега, времени работы по GPS
	ОбъектСтруктура = Новый Структура;
	ОбъектСтруктура.Вставить("Организация",          Организация);
	ОбъектСтруктура.Вставить("ТранспортноеСредство", ТС);
	ОбъектСтруктура.Вставить("ДатаВыезда",           ДатаВыезда);
	ОбъектСтруктура.Вставить("ДатаВозвращения",      ДатаВозвращения);
	ОбъектСтруктура.Вставить("СпидометрВыезда",      ОдометрВыезда);
	ОбъектСтруктура.Вставить("СпидометрВозвращения", ОдометрВозвращения);
	ОбъектСтруктура.Вставить("флТолькоОдометрВозвращения", Истина);
	ОбъектСтруктура.Вставить("Прицепы",              Новый Массив());
	
	РезультатСтруктура = Новый Структура;
	
	//РАСЧЕТ
	уатМониторинг.РассчитатьСпидометрПоМониторингу(ОбъектСтруктура, РезультатСтруктура);
	
	// заполнение основных реквизитов
	Если РезультатСтруктура.Свойство("СчетчикПоGPS") Тогда
		ПробегПоGPS = РезультатСтруктура.СчетчикПоGPS;
	КонецЕсли;
		
КонецПроцедуры

Процедура ОбновитьДанныеПоРасходуГСМпоGPS()
	
	Если Не ЗначениеЗаполнено(ДатаВыезда) Или Не ЗначениеЗаполнено(ДатаВозвращения) Тогда 
		Возврат;
	КонецЕсли;
	
	Для Каждого СтрокаРасхода Из РасходГСМ Цикл 
		ТекОсновноеТопливо = СтрокаРасхода.ТС.Модель.ОсновноеТопливо;
		Если ЗначениеЗаполнено(СтрокаРасхода.ТС)
			И ЗначениеЗаполнено(ТекОсновноеТопливо)
			И СтрокаРасхода.ГСМ = ТекОсновноеТопливо Тогда
			Отказ = Ложь;
			
			мсвОбъектыКЗапросу = Новый Массив();
			мсвОбъектыКЗапросу.Добавить(СтрокаРасхода.ТС);
			
			СвобныеДанные = уатМониторинг.ПолучитьСводныеДанныеМониторинга(ДатаВыезда,
				ДатаВозвращения, мсвОбъектыКЗапросу);
			СтруктураДанных = СвобныеДанные.Получить(СтрокаРасхода.ТС);
			
			Если СтруктураДанных <> Неопределено Тогда
				СтрокаРасхода.РасходПоGPS = СтруктураДанных.РасходТоплива;
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	ПараметрыРасчетаГСМ = уатПутевыеЛисты.ПолучитьПараметрыРасчетаРасходаГСМ(ЭтотОбъект);
	
	РезультатСтруктура = Неопределено;
	уатМониторинг.РассчитатьГСМПоМониторингу(ЭтотОбъект, ПараметрыРасчетаГСМ, РезультатСтруктура, Истина);
	Если ПараметрыРасчетаГСМ.Свойство("ОстатокТопливаВыезд") Тогда
		ОстатокТопливаВыезд = ПараметрыРасчетаГСМ.ОстатокТопливаВыезд;    
	КонецЕсли;
	уатМониторинг.РассчитатьГСМПоМониторингу(ЭтотОбъект, ПараметрыРасчетаГСМ, РезультатСтруктура, Ложь);
	Если ПараметрыРасчетаГСМ.Свойство("ОстатокТопливаВозврат") Тогда
		ОстатокТопливаВозврат = ПараметрыРасчетаГСМ.ОстатокТопливаВозврат;
	КонецЕсли;
	
КонецПроцедуры

// Процедура запрашивает данные по ТС.
// Устанавливаются начальные данные по остаткам ГСМ, данные спидометра/счетчика, экипаж ТС и т.п.
//
// Параметры:
//	ОстатокТопливаВыезд - остаток топлива в баке ТС при выезде, перезаполняется при выполнении процедуры;
//	СоставТС - состав ТС (прицепы и доп. оборудование со своим баком);
//	флЗаполнитьВодителейПоУмолчанию - признак перезаполнения водителей при инициализации ТС (можно отключить)
//
Процедура ИнициализацияДанныхАвтомобиля(ОстатокТопливаВыезд = 0, СоставТС = Неопределено, флЗаполнитьВодителейПоУмолчанию = Истина) Экспорт
	РасходГСМ.Очистить();
	
	Если ЗначениеЗаполнено(ТС) Тогда
		ОстатокТопливаВыезд   = уатОбщегоНазначения.уатОстатокГСМнаТС(ДатаВыезда, ТС, ТС.Модель.ОсновноеТопливо, Ссылка);
		ОстатокТопливаВозврат = 0;
		
		Если ЗначениеЗаполнено(ТС.Модель.ОсновноеТопливо) Тогда
			НоваяСтрокаГСМ 						 = РасходГСМ.Добавить();
			НоваяСтрокаГСМ.Активен 				 = Истина;
			НоваяСтрокаГСМ.ТС 					 = ТС;
			НоваяСтрокаГСМ.ГСМ 					 = ТС.Модель.ОсновноеТопливо;
			НоваяСтрокаГСМ.ОстатокПриВыезде 	 = ОстатокТопливаВыезд;
			НоваяСтрокаГСМ.ОстатокПриВозвращении = ОстатокТопливаВозврат;
		КонецЕсли;
		
		Если ТС.Модель.НаличиеСпидометра Тогда
			ОдометрВыезда = уатОбщегоНазначения.уатТекущийСпидометр(ТС, ДатаВыезда);
		Иначе
			ОдометрВыезда = уатОбщегоНазначения.уатТекущийСчетчикМЧ(ТС, ДатаВыезда);
		КонецЕсли;	
		
		// заполняем водителей
		Если флЗаполнитьВодителейПоУмолчанию Тогда
			Водитель = Неопределено;
			уатОбщегоНазначения.ЗаполнитьЭкипажТС(ТС, Организация, ДатаВыезда, Водитель,,,,, ДатаВозвращения);
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(УсловиеРаботы) Тогда
			УсловиеРаботы = ТС.ОсновноеУсловиеРаботы;
		КонецЕсли;
	Иначе
		ОдометрВыезда = 0;
	КонецЕсли;	
	
КонецПроцедуры // ИнициализацияДанныхАвтомобиля()

// Процедура проверяет корректность заполнения ПЛ перед расчетом итогов по документу
Процедура ПроверкаКорректностиПЛ_РасчетИтогов(Заголовок, Отказ)
	Отказ = Ложь;
	
	СтруктураПолей = Новый Структура("ТС, ДатаВыезда, ДатаВозвращения");
	
	уатОбщегоНазначенияТиповые.уатПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураПолей, Отказ, Заголовок);
	
	Если НЕ ЗначениеЗаполнено(ТС.Модель) Тогда
		ТекстНСТР = НСтр("en='For vehicle not specified model!';ru='Для ТС не указана модель!'");
		уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, Отказ,, СтатусСообщения.Важное);
		Возврат;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область Инициализация

ДанныеИзменились = Ложь;

#КонецОбласти

#Область ПеременныеФормы

&НаКлиенте
Перем ДанныеСтрокиУслуги; // Хранит данные строки ТЧ Доходы/Расходы перед началом редактирования.

#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	уатЗащищенныеФункцииСервер.уатДокументФормаЭлементаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, Объект, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УчетОригиналовПервчиныхДокументов
	УчетОригиналовПервичныхДокументов.ПриСозданииНаСервере_ФормаДокумента(ЭтотОбъект, Элементы.ГруппаУчетПервичныхДокументов);
	уатУчетОригиналовПервичныхДокументов.ОтобразитьДатуПоследнегоИзмененияПервичныхДокументов(ЭтотОбъект, Элементы.ГруппаУчетПервичныхДокументов);
	// Конец СтандартныеПодсистемы.УчетОригиналовПервчиныхДокументов

	// Блокировка команд для внешнего пользователя
	АвторизованныйПользователь = ПользователиКлиентСервер.АвторизованныйПользователь();
	Если ТипЗнч(АвторизованныйПользователь) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда
		Элементы.ПодменюПечать.Видимость = Ложь;
		Элементы.ПодменюЗаполнить.Видимость = Ложь;
		Элементы.УслугиНастройкаВводаНаОсновании.Видимость = Ложь;
		Элементы.ГруппаЗаполнитьДоп.Видимость = Ложь;
	КонецЕсли;
	// КонецБлокировки команд внешнего пользователя
	
	ПараметрыЗначениеКопирования = Параметры.ЗначениеКопирования;
	
	// Ввод на основании МЛ
	Если ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.уатМаршрутныйЛист") 
		ИЛИ ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.уатТТД")
		ИЛИ ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") Тогда
		ДокОбъект = РеквизитФормыВЗначение("Объект");
		
		ДанныеЗаполнения = Новый Структура();
		ДанныеЗаполнения.Вставить("флВыбратьКонтрагента", Истина);
		ДанныеЗаполнения.Вставить("Основание", Параметры.Основание);
		Если ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.уатТТД") Тогда
			ДанныеЗаполнения.Вставить("Доходы", Параметры.Основание.Стоимость);
		ИначеЕсли ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") Тогда
			ДанныеЗаполнения.Вставить("Доходы", Параметры.Основание.Услуги);
		Иначе
			ДанныеЗаполнения.Вставить("Доходы", Параметры.Основание.Доходы);
		КонецЕсли;
		
		ДокОбъект.Заполнить(ДанныеЗаполнения);
		Объект.ДокументОснование = Параметры.Основание;
		Если ДокОбъект.ДополнительныеСвойства.Свойство("мсвКонтрагенты") Тогда
			
			тзКонтрагенты = ДокОбъект.ДополнительныеСвойства.мсвКонтрагенты;
			мсвКонтрагенты.ЗагрузитьЗначения(уатОбщегоНазначенияСервер.ПреобразоватьТаблицувМассивСтрок(тзКонтрагенты));
			
			тзТаблицаУслуги = ДокОбъект.ДополнительныеСвойства.ТаблицаУслуги;
			ТаблицаУслуги.ЗагрузитьЗначения(уатОбщегоНазначенияСервер.ПреобразоватьТаблицувМассивСтрок(тзТаблицаУслуги));
			
			Возврат;
			
		ИначеЕсли ДокОбъект.ДополнительныеСвойства.Свойство("мсвТаблицаУслуги") Тогда
			// Один контрагент
			мсвТаблицаУслуги         = ДокОбъект.ДополнительныеСвойства.мсвТаблицаУслуги;
			ДокОбъект.ОбработкаЗаполненияИзФормыВыбораКонтрагента(Объект.ДокументОснование, мсвТаблицаУслуги);
			ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнениеШапкиПриСозданииДокумента(Отказ, СтандартнаяОбработка, Параметры);
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеШапкиПриСозданииДокумента(Отказ, СтандартнаяОбработка, Параметры)
	// Создание из "ФормаВыборКонтрагента"
	Если Параметры.Свойство("Услуги") Тогда
		Объект.ДокументОснование = Параметры.ДокументОснование;
		мсвТаблицаУслуги         = Параметры.Услуги;
		ДокОбъект = РеквизитФормыВЗначение("Объект");
		ДокОбъект.ОбработкаЗаполненияИзФормыВыбораКонтрагента(Объект.ДокументОснование, мсвТаблицаУслуги);
		ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
	КонецЕсли;
		
	// Установка реквизитов формы.
	Если Объект.Ссылка.Пустая() Тогда
		Объект.ДатаНач = ?(Объект.ДатаНач = '00010101', НачалоМесяца(ТекущаяДата()), Объект.ДатаНач);
		Объект.ДатаКон = ?(Объект.ДатаКон = '00010101', ТекущаяДата(), Объект.ДатаКон);
		Если НЕ ЗначениеЗаполнено(Объект.Контрагент) тогда
			Объект.Контрагент = Справочники.Склады.ПустаяСсылка();
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Организация) Тогда
			ПриИзмененииОрганизацииНаСервере();
		КонецЕсли;
		
		Если ПараметрыЗначениеКопирования.Пустая() Тогда
			СтатусУПДОрганизации = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация, ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.СтатусУПД"));
			Объект.СтатусУПД = СтатусУПДОрганизации;
		КонецЕсли;
	КонецЕсли;
	
	МноговалютныйУчет = ПолучитьФункциональнуюОпцию("уатМноговалютныйУчет");
	
	мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Контрагент = Объект.Контрагент;
	Если НЕ Объект.Ссылка.Пустая() ИЛИ НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Договор = Объект.ДоговорКонтрагента;
	КонецЕсли;
	ВалютаРасчетов = Объект.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	НациональнаяВалюта = мВалютаРегламентированногоУчета;
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата,
		Новый Структура("Валюта", НациональнаяВалюта));
	КурсНациональнаяВалюта = СтруктураПоВалюте.Курс;
	КратностьНациональнаяВалюта = СтруктураПоВалюте.Кратность;
	
	ОрганизацияПередИзменением = Объект.Организация;
		
	уатОбщегоНазначенияСервер.НастроитьПолеДоговорКонтрагента(Элементы.ДоговорКонтрагента, "Объект.Организация", "Объект.Контрагент", "СПокупателем");
	уатОбщегоНазначенияСервер.НастроитьПолеПодразделение(Элементы.Подразделение, "Объект.Организация");
	
	ОтобразитьДатуПлатежа();
	УстановитьОтборСделки();
	
	// уатУправлениеАвтотранспортом.МодификацияКонфигурации
	уатМодификацияКонфигурацииПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	// Конец уатУправлениеАвтотранспортом.МодификацияКонфигурации
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// уатУправлениеАвтотранспортом.МодификацияКонфигурации
	уатМодификацияКонфигурацииКлиентПереопределяемый.ПриОткрытии(ЭтотОбъект, Отказ);
	// Конец уатУправлениеАвтотранспортом.МодификацияКонфигурации
	
	уатЗащищенныеФункцииКлиент.уатДокументФормаЭлементаПриОткрытии(Отказ, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	Если мсвКонтрагенты.Количество() > 1 Тогда
		ПараметрыФормы = Новый Структура("ВидОперации, Ссылка, Контрагенты, Услуги, ДокументОснование",
			0, Объект.Ссылка, мсвКонтрагенты, ТаблицаУслуги, Объект.ДокументОснование);
		ОткрытьФорму("Документ.уатПоступлениеТоваровУслуг.Форма.ФормаВыборКонтрагента", ПараметрыФормы, ЭтотОбъект);
	Иначе
		Если Объект.Ссылка.Пустая() И ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
			уатОбщегоНазначенияКлиент.ПриИзмененииДоговора(ЭтаФорма, Неопределено, Договор);
		КонецЕсли;
	КонецЕсли;

	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// Установить видимость реквизитов и заголовков колонок.
	УстановитьВидимость();
	
	ОбновитьВсегоВТЧУслуги();
	ВывестиСуммовыеИтогиДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОтобразитьДатуПлатежа();
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбновитьВсегоВТЧУслуги();
	ВывестиСуммовыеИтогиДокумента();
	
	уатМодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтотОбъект, ПараметрыЗаписи);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов	
	УчетОригиналовПервичныхДокументовКлиент.ОбработчикОповещенияФормаДокумента(ИмяСобытия, ЭтотОбъект);
	// Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов

	Если ИмяСобытия = "СозданиеДокументаИзФормыВыбораКонтрагента_уатРеализацияУслуг"
		И мсвКонтрагенты.Количество() > 0 И Объект.Ссылка.Пустая() Тогда
		
		Параметр.Вставить("Основание",           Параметр.ДокументОснование);
		Параметр.Вставить("ЗначениеКопирования", Неопределено);
		Параметр.Вставить("ЗначенияЗаполнения",  Новый Структура);
		ЗаполнениеШапкиПриСозданииДокумента(Ложь, Истина, Параметр);
		
		Если Объект.Ссылка.Пустая() И ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
			уатОбщегоНазначенияКлиент.ПриИзмененииДоговора(ЭтаФорма, Неопределено, Договор);
		КонецЕсли;
		
		// Установить видимость реквизитов и заголовков колонок.
		УстановитьВидимость();
		
		ОбновитьВсегоВТЧУслуги();
		ВывестиСуммовыеИтогиДокумента();
		
		мсвКонтрагенты.Очистить();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
	ПроверитьЗаполнениеУслугиРегл(Отказ);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если флВопросЗакрытиеФормы Тогда
		Отказ = Истина;
		Оповещ = Новый ОписаниеОповещения("ПередЗакрытиемВопрос", ЭтотОбъект);
		ПоказатьВопрос(Оповещ, "При проверке корректности заполнения документа возникли предупреждения!
			|Продолжить закрытие формы?", РежимДиалогаВопрос.ОКОтмена);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

// уатУправлениеАвтотранспортом.МодификацияКонфигурации
&НаКлиенте
Процедура Подключаемый_ПолеФормыНажатие(Элемент, СтандартнаяОбработка)
	
	уатМодификацияКонфигурацииКлиентПереопределяемый.ПолеФормыНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДекорацияСостояниеОригиналаНажатие()

	// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	УчетОригиналовПервичныхДокументовКлиент.ОткрытьМенюВыбораСостояния(ЭтотОбъект, Элементы.ДекорацияСостояниеОригинала);
	//Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов

КонецПроцедуры

&НаКлиенте
Процедура СверткаУслугРеглПриИзменении(Элемент)
	Если Объект.СверткаУслугРегл Тогда
		ЗаполнитьУслугиРеглСервер();
	Иначе
		Объект.УслугиРегл.Очистить();
	КонецЕсли;
	ОбновитьВсегоВТЧУслуги();
	
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	Если Объект.Организация = ОрганизацияПередИзменением Тогда
		Возврат;
	КонецЕсли;
	ОрганизацияПередИзменением = Объект.Организация;
	
	ПриИзмененииКонтрагентаИлиОрганизации(Новый ОписаниеОповещения("ОрганизацияПриИзмененииЗавершение", ЭтотОбъект));
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	УчитыватьНДСПередИзменением = Объект.УчитыватьНДС;
	СуммаВключаетНДСПередИзменением = Объект.СуммаВключаетНДС;
	
    // Обработка события изменения организации.
    Объект.УчитыватьНДС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
    	ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.УчитыватьНДС"));
    Объект.СуммаВключаетНДС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
	    ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.СуммаВключаетНДС"));
	
	ПриИзмененииОрганизацииНаСервере();
	
	Если Объект.УчитыватьНДС <> УчитыватьНДСПередИзменением ИЛИ Объект.СуммаВключаетНДС <> СуммаВключаетНДСПередИзменением Тогда
    	ПересчитатьСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС("Услуги");
    	ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
    	ОбновитьВсегоВТЧУслуги();
    	РассчитатьСуммуДокумента();
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииОрганизацииНаСервере()

	Если НЕ ЗначениеЗаполнено(Объект.БанковскийСчетОрганизации) 
		ИЛИ (ПолучитьОрганизациюПоСчетуНаСервере(Объект.БанковскийСчетОрганизации) <> Объект.Организация) Тогда
		
		Объект.БанковскийСчетОрганизации = ПолучитьСчетПоОрганизацииНаСервере(Объект.Организация);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПолучитьСчетПоОрганизацииНаСервере(ТекОрганизация)

	Если ЗначениеЗаполнено(ТекОрганизация)
		И ТипЗнч(ТекОрганизация) = Тип("СправочникСсылка.Организации") Тогда
		
		Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитСправочника("ОсновнойБанковскийСчет", "Организации") Тогда
			Возврат ТекОрганизация.ОсновнойБанковскийСчет;
		КонецЕсли;
	Иначе
		Если Метаданные.Справочники.Найти("БанковскиеСчета") <> Неопределено Тогда
			Возврат Справочники.БанковскиеСчета.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;

КонецФункции // ПолучитьСчетПоОрганизацииНаСервере()

&НаСервере
Функция ПолучитьОрганизациюПоСчетуНаСервере(ТекСчет)

	Если ЗначениеЗаполнено(ТекСчет) Тогда
		Возврат ТекСчет.Владелец;
	Иначе 
		Возврат Справочники.Организации.ПустаяСсылка();
	КонецЕсли;

КонецФункции // ПолучитьОрганизациюПоСчетуНаСервере()

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	КонтрагентПередИзменением = Контрагент;
	Контрагент = Объект.Контрагент;
	Если КонтрагентПередИзменением <> Объект.Контрагент Тогда
		ПриИзмененииКонтрагентаИлиОрганизации(Неопределено);
		ОбновитьВсегоВТЧУслуги();
		ВывестиСуммовыеИтогиДокумента();
		УстановитьОтборОбъектСтроительства();
	Иначе
		// Договор был очищен по связи параметров выбора, возвращаем старое значение
		Объект.ДоговорКонтрагента = Договор;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	Оповещ = Новый ОписаниеОповещения("ДоговорКонтрагентаПриИзмененииЗавершение", ЭтотОбъект);
	уатОбщегоНазначенияКлиент.ДоговорКонтрагентаПриИзменении(ЭтаФорма, Оповещ);
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзмененииЗавершение(Результат, ДопПараметры) Экспорт
	уатОбщегоНазначенияКлиент.ПриИзмененииДоговора(ЭтаФорма, Неопределено, Договор);
КонецПроцедуры

// Вызывается из процедуры уатОбщегоНазначенияКлиент.ПриИзмененииДоговора()
//
&НаКлиенте
Процедура ПриИзмененииДоговораЛокальныеОбработчики() Экспорт
	РассчитатьСуммуДокумента();
	ОбновитьВсегоВТЧУслуги();
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаСоздание(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВидДоговораДоступныеЗначения = Новый Массив;
	
	мВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем");
	ВидДоговораДоступныеЗначения.Добавить(мВидДоговора);
	
	ПараметрыФормы = Новый Структура(); 
	ПараметрыФормы.Вставить("Владелец", Объект.Контрагент);
	ПараметрыФормы.Вставить("ВидДоговораДоступныеЗначения", ВидДоговораДоступныеЗначения);
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

&НаКлиенте
Процедура ОбъектСтроительстваПриИзменении(Элемент)
	КонтрОбъекта = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(Объект.ОбъектСтроительства, "Контрагент");
	Если ЗначениеЗаполнено(КонтрОбъекта) Тогда
		Объект.Контрагент = КонтрОбъекта;
		КонтрагентПриИзменении(Элементы.Контрагент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УказатьДатуПлатежаВручнуюПриИзменении(Элемент)
	Если УказатьДатуПлатежаВручную Тогда
		ТекстСообщения = "";
		флОтказ = ЕстьНакладнаяСРучнойДатойПлатежа(ТекстСообщения);
		Если флОтказ Тогда
			ПоказатьПредупреждение(Неопределено, ТекстСообщения);
			УказатьДатуПлатежаВручную = Ложь;
			Возврат;
		КонецЕсли;
		
		Объект.ДатаПлатежа = ДатаПлатежаПлан;
		
		Элементы.ДатыПлатежейПоЗаказам.Видимость = Ложь;
		Элементы.ДатаПлатежа.Видимость           = Истина;
	Иначе
		Объект.ДатаПлатежа = Неопределено;
		ДатаПлатежаПлан = Неопределено;
		
		ОтобразитьДатуПлатежа();
	КонецЕсли;
	Модифицированность = Истина;
	
	УстановитьВидимость();
КонецПроцедуры

&НаСервере
Функция ЕстьНакладнаяСРучнойДатойПлатежа(ТекстСообщения)
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	Возврат уатОбщегоНазначения_проф.ЕстьНакладнаяСРучнойДатойПлатежа(ДокОбъект, ТекстСообщения);
КонецФункции

&НаКлиенте
Процедура ДатаПлатежаПриИзменении(Элемент)
	Объект.ДатаПлатежа = ДатаПлатежаПлан;
	Модифицированность = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыУслуги

&НаКлиенте
Процедура УслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекСтрока = Элементы.Услуги.ТекущиеДанные;
		
	Если НоваяСтрока И НЕ Копирование Тогда
		Если Объект.УчитыватьНДС Тогда
			ТекСтрока.СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
				ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнаяСтавкаНДС");
		КонецЕсли;
			
		Если МноговалютныйУчет Тогда
			ТекСтрока.Валюта = Объект.ВалютаДокумента;
			ТекСтрока.КроссКурс = 1;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеСтрокиУслуги = Новый Структура("Валюта", ТекСтрока.Валюта);
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОбновитьВсегоВТЧУслуги();
	РассчитатьСуммуДокумента();
КонецПроцедуры

&НаКлиенте
Процедура УслугиПослеУдаления(Элемент)
	РассчитатьСуммуДокумента();
КонецПроцедуры

&НаКлиенте
Процедура УслугиНоменклатураПриИзменении(Элемент)
	ТекСтрока = Элементы.Услуги.ТекущиеДанные;
	ТекСтрока.Содержание = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрока.Номенклатура, "НаименованиеПолное");
	ТекСтрока.СтатьяДоходов = уатОбщегоНазначенияСервер.СтатьяДоходовНоменклатуры(ТекСтрока.Номенклатура);
	
	Если Объект.УчитыватьНДС Тогда
		СтавкаНДС = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрока.Номенклатура, "СтавкаНДС");
		ТекСтрока.СтавкаНДС = ?(ЗначениеЗаполнено(СтавкаНДС), СтавкаНДС, ТекСтрока.СтавкаНДС);
	Иначе
		ТекСтрока.СтавкаНДС = Неопределено;
	КонецЕсли;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрока, Истина);
КонецПроцедуры

&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)
	ТекСтрока = Элементы.Услуги.ТекущиеДанные;
	РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрока, Истина);
КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)
	ТекСтрока = Элементы.Услуги.ТекущиеДанные;
	Если МноговалютныйУчет И ТекСтрока.ЦенаВалютная = 0 И ТекСтрока.КроссКурс <> 0 Тогда
		ТекСтрока.ЦенаВалютная = ТекСтрока.Цена / ТекСтрока.КроссКурс;
	КонецЕсли;
	РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрока, Истина);
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаПриИзменении(Элемент)
	ТекСтрока = Элементы.Услуги.ТекущиеДанные;
	ПриИзмененииСуммыУслуги(ТекСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСуммыУслуги(ТекСтрока)
	ТекСтрока.Цена = ?(ТекСтрока.Количество = 0, 0, ТекСтрока.Сумма / ТекСтрока.Количество);
	Если МноговалютныйУчет И ТекСтрока.ЦенаВалютная = 0 И ТекСтрока.КроссКурс <> 0 Тогда
		ТекСтрока.СуммаВалютная = ТекСтрока.Сумма / ТекСтрока.КроссКурс;
		ТекСтрока.ЦенаВалютная = ?(ТекСтрока.Количество = 0, 0, ТекСтрока.СуммаВалютная / ТекСтрока.Количество);
	КонецЕсли;
	РассчитатьСуммуНДС(ТекСтрока, Истина);
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаНДСПриИзменении(Элемент)
	ТекСтрока = Элементы.Услуги.ТекущиеДанные;
	ОбновитьВсегоВстрокеТЧ(ТекСтрока);
КонецПроцедуры

&НаКлиенте
Процедура УслугиСтавкаНДСПриИзменении(Элемент)
	ТекСтрока = Элементы.Услуги.ТекущиеДанные;
	РассчитатьСуммуНДС(ТекСтрока, Истина);
КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаВалютнаяПриИзменении(Элемент)
	ТекСтрока = Элементы.Услуги.ТекущиеДанные;
	ТекСтрока.Цена = ТекСтрока.ЦенаВалютная * ТекСтрока.КроссКурс;
	РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрока, Истина);
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаВалютнаяПриИзменении(Элемент)
	ТекСтрока = Элементы.Услуги.ТекущиеДанные;
	ТекСтрока.ЦенаВалютная = ?(ТекСтрока.Количество = 0, 0, ТекСтрока.СуммаВалютная / ТекСтрока.Количество);
	ТекСтрока.Цена = ТекСтрока.ЦенаВалютная * ТекСтрока.КроссКурс;
	РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрока, Истина);
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаНДСвалютнаяПриИзменении(Элемент)
	ТекСтрока = Элементы.Услуги.ТекущиеДанные;
	ОбновитьВсегоВстрокеТЧ(ТекСтрока);
КонецПроцедуры

&НаКлиенте
Процедура УслугиВалютаПриИзменении(Элемент)
	ТекСтрока = Элементы.Услуги.ТекущиеДанные;
	
	Если ТекСтрока.Валюта = ДанныеСтрокиУслуги.Валюта Тогда
		Возврат;
	КонецЕсли;
	
	ТекСтрока.КроссКурс = ПолучитьКроссКурс(ТекСтрока.Валюта, Объект.ВалютаДокумента, Объект.ДатаКурса);
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ТекСтрока", ТекСтрока);
		
	Если ТекСтрока.Цена = 0 Тогда
		УслугиПриИзмененииВалютыЗавершение(КодВозвратаДиалога.Нет, ДопПараметры);
	Иначе
		Оповещ = Новый ОписаниеОповещения("УслугиПриИзмененииВалютыЗавершение", ЭтотОбъект, ДопПараметры);
		ПоказатьВопрос(Оповещ, "Изменилась валюта строки. Пересчитать цену и сумму по курсу?", РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриИзмененииВалютыЗавершение(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда //пересчет сумм в строке по курсу
		СтруктураКурсаПред = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ДанныеСтрокиУслуги.Валюта, Объект.ДатаКурса);
		СтруктураКурса = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ДопПараметры.ТекСтрока.Валюта, Объект.ДатаКурса);
		
		ДопПараметры.ТекСтрока.ЦенаВалютная = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ДопПараметры.ТекСтрока.ЦенаВалютная,
			ДанныеСтрокиУслуги.Валюта,    ДопПараметры.ТекСтрока.Валюта,
			СтруктураКурсаПред.Курс,      СтруктураКурса.Курс,
			СтруктураКурсаПред.Кратность, СтруктураКурса.Кратность);
	КонецЕсли;
	
	ДопПараметры.ТекСтрока.Цена = ДопПараметры.ТекСтрока.ЦенаВалютная * ДопПараметры.ТекСтрока.КроссКурс;
	РассчитатьСуммуВСтрокеТабличнойЧасти(ДопПараметры.ТекСтрока, Истина);
		
	РассчитатьСуммуНДС(ДопПараметры.ТекСтрока, Истина);
	ОбновитьВсегоВстрокеТЧ(ДопПараметры.ТекСтрока);
		
	ВывестиСуммовыеИтогиДокумента();
	
	ДанныеСтрокиУслуги = Новый Структура("Валюта", ДопПараметры.ТекСтрока.Валюта);
	Модифицированность = Истина;	
КонецПроцедуры

&НаКлиенте
Процедура УслугиКроссКурсПриИзменении(Элемент)
	ТекСтрока = Элементы.Услуги.ТекущиеДанные;
	ПриИзменииКроссКурсаВСтроке(ТекСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ПриИзменииКроссКурсаВСтроке(ТекСтрока, ПересчетИтогов = Истина)
	ТекСтрока.Сумма = ТекСтрока.СуммаВалютная * ТекСтрока.КроссКурс;
	ПриИзмененииСуммыУслуги(ТекСтрока);
	ОбновитьВсегоВстрокеТЧ(ТекСтрока);
	
	Если ПересчетИтогов = Истина Тогда
		ОбновитьВсегоВТЧУслуги();
		ВывестиСуммовыеИтогиДокумента();	
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// уатУправлениеАвтотранспортом.МодификацияКонфигурации
&НаКлиенте
Процедура Подключаемый_уатВыполнитьКоманду(Команда)
	
	уатМодификацияКонфигурацииКлиентПереопределяемый.ВыполнитьПодключаемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры
// Конец уатУправлениеАвтотранспортом.МодификацияКонфигурации

&НаКлиенте
Процедура РедактироватьЦеныИВалюту(Команда)
	ОбработатьИзмененияПоКнопкеЦеныИВалюты(Новый ОписаниеОповещения("РедактироватьЦеныИВалютуЗавершение", ЭтотОбъект), Объект.ВалютаДокумента);
КонецПроцедуры

&НаКлиенте
Процедура НастройкаПериода(Команда)
	ДиалогПериода = Новый ДиалогРедактированияСтандартногоПериода();
	ДиалогПериода.Период.ДатаНачала = Объект.ДатаНач;
	ДиалогПериода.Период.ДатаОкончания = Объект.ДатаКон;
	ДиалогПериода.Показать(Новый ОписаниеОповещения("НастройкаПериодаЗавершение", ЭтотОбъект));
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаПериод(Команда)
	Если Объект.Услуги.Количество() > 0 Тогда
		ТекстНСТР = НСтр("en='Before filling out the document table is cleared. Do you want to continue?';ru='Перед заполнением таблица документа будет очищена. Продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьЗаПериодЗавершение", ЭтотОбъект), ТекстНСТР, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗаПериодФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаПериодЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	Иначе
		Объект.Услуги.Очистить();
		Модифицированность = Истина;
	КонецЕсли; 	
	
	ЗаполнитьЗаПериодФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаПериодФрагмент()
	
	ПараметрыФормы = Новый Структура("НачалоПериода, КонецПериода, СсылкаОснование", Объект.ДатаНач, Объект.ДатаКон, Объект.Ссылка);
	ОткрытьФорму("ОбщаяФорма.уатЗаполнениеПоУслугам", ПараметрыФормы, ЭтотОбъект,,,,
		Новый ОписаниеОповещения("ЗаполнитьЗаПериодФрагментЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаПериодФрагментЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ВалютаВзаиморасчетов = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.ДоговорКонтрагента, "ВалютаВзаиморасчетов");
	ВалютаВзаиморасчетовКурсКратность = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ВалютаВзаиморасчетов, Объект.Дата);
	
	КэшКурсов = Новый Соответствие;
	КэшКурсов.Вставить(Объект.ВалютаДокумента, Новый Структура("Курс, Кратность", Объект.КурсВзаиморасчетов, Объект.КратностьВзаиморасчетов));
	
	мсвУслуги = Результат;
	Если ТипЗнч(мсвУслуги) = Тип("Массив") И мсвУслуги.Количество() > 0 Тогда
		Для Каждого СтрокаУслуг Из мсвУслуги Цикл
			НоваяСтрока = Объект.Услуги.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаУслуг,, "Цена, Сумма");
			
			Если Объект.УчитыватьНДС И Объект.СуммаВключаетНДС Тогда
				НоваяСтрока.Сумма = СтрокаУслуг.Сумма;
				НоваяСтрока.Цена = СтрокаУслуг.Цена;
			Иначе
				НоваяСтрока.Сумма = СтрокаУслуг.Сумма - СтрокаУслуг.СуммаНДС;
				НоваяСтрока.Цена = ?(СтрокаУслуг.Количество = 0, 0, НоваяСтрока.Сумма / СтрокаУслуг.Количество);
			КонецЕсли;
			
			Если НЕ Объект.УчитыватьНДС Тогда
				НоваяСтрока.СтавкаНДС = Неопределено;
				НоваяСтрока.СуммаНДС  = 0;
			КонецЕсли;
			
			Если Объект.УчитыватьНДС И НЕ ЗначениеЗаполнено(НоваяСтрока.СтавкаНДС)
				И ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
				НоваяСтрока.СтавкаНДС = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(
										НоваяСтрока.Номенклатура, "СтавкаНДС");
				РассчитатьСуммуНДС(НоваяСтрока, Истина);
			КонецЕсли;
			
			НоваяСтрока.СтатьяДоходов = уатОбщегоНазначенияСервер.СтатьяДоходовНоменклатуры(НоваяСтрока.Номенклатура);
			
			Если МноговалютныйУчет Тогда
				НоваяСтрока.Валюта = СтрокаУслуг.Валюта;
				НоваяСтрока.КроссКурс = ПолучитьКроссКурс(СтрокаУслуг.Валюта, Объект.ВалютаДокумента, Объект.ДатаКурса, КэшКурсов);
				НоваяСтрока.ЦенаВалютная = НоваяСтрока.Цена;
				НоваяСтрока.СуммаВалютная = НоваяСтрока.Сумма;
				НоваяСтрока.СуммаНДСВалютная = НоваяСтрока.СуммаНДС;
				
				// перевод невалютных колонок в валюту документа из валюты заказа
				Если НоваяСтрока.Валюта <> Объект.ВалютаДокумента Тогда
					НоваяСтрока.Цена = НоваяСтрока.ЦенаВалютная * НоваяСтрока.КроссКурс;
					РассчитатьСуммуВСтрокеТабличнойЧасти(НоваяСтрока, Истина, Ложь);
					ОбновитьВсегоВстрокеТЧ(НоваяСтрока);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Если Объект.СверткаУслугРегл Тогда
			ЗаполнитьУслугиРеглСервер();
		КонецЕсли;
				
		Модифицированность = Истина;
	КонецЕсли;
	
	РассчитатьСуммуДокумента();
	ОбновитьВсегоВТЧУслуги();
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьКроссКурсВТЧ(Команда)
	мсвВалюты = Новый Массив;
	Для Каждого ТекСтрока Из Объект.Услуги Цикл
		Если НЕ ЗначениеЗаполнено(ТекСтрока.Валюта) Тогда
			Продолжить;
		КонецЕсли;
		
		Если мсвВалюты.Найти(ТекСтрока.Валюта) = Неопределено Тогда
			мсвВалюты.Добавить(ТекСтрока.Валюта);
		КонецЕсли;
	КонецЦикла;
	
	Если мсвВалюты.Количество() = 0 Тогда
		уатОбщегоНазначенияТиповые.СообщитьОбОшибке("Выделенные строки не содержат ни одной валюты!
			|Операция допустима только для строк с указанными валютами.",,, СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;
	
	Если мсвВалюты.Количество() > 1 Тогда
		Оповещ = Новый ОписаниеОповещения("ИзменитьКроссКурсВТЧВыборВалюты", ЭтотОбъект);
		
		СписВалюты = Новый СписокЗначений;
		СписВалюты.ЗагрузитьЗначения(мсвВалюты);
		СписВалюты.ПоказатьВыборЭлемента(Оповещ, "Строки с выбранной валютой будут пересчитаны", СписВалюты);
		Возврат;
	КонецЕсли;
	
	ИзменитьКроссКурсВТЧВводКроссКурса(мсвВалюты[0]);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьКроссКурсВТЧВыборВалюты(Результат, ДопПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		ИзменитьКроссКурсВТЧВводКроссКурса(Результат.Значение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьКроссКурсВТЧВводКроссКурса(Валюта)
	ДопПараметры = Новый Структура("Валюта", Валюта);
	Оповещ = Новый ОписаниеОповещения("ИзменитьКроссКурсВТЧВводКроссКурсаЗавершение", ЭтотОбъект, ДопПараметры);
	ПоказатьВводЧисла(Оповещ, , "Укажите новое значение кросс-курса", 10, 4);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьКроссКурсВТЧВводКроссКурсаЗавершение(Результат, ДопПараметры) Экспорт
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	мсвСтрок = Объект.Услуги.НайтиСтроки(Новый Структура("Валюта", ДопПараметры.Валюта));
	Для Каждого ТекСтрока Из мсвСтрок Цикл
		ТекСтрока.КроссКурс = Результат;
		
		ТекСтрока.Цена = ТекСтрока.ЦенаВалютная * ТекСтрока.КроссКурс;
		РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрока, Истина, Ложь);
		РассчитатьСуммуНДС(ТекСтрока, Истина);
	КонецЦикла;
	
	РассчитатьСуммуДокумента();
	ОбновитьВсегоВТЧУслуги();
	
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура Очистить(Команда)
	Если Объект.Услуги.Количество() Тогда
		ТекстНСТР = НСтр("en='The list of services is not empty! Clear?';ru='Список услуг не пустой! Очистить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ОчиститьЗавершение", ЭтотОбъект), ТекстНСТР,
			РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет, НСтр("en='Clear the table';ru='Очистка таблицы'"));
        Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.Услуги.Очистить();
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьУслугиРегл(Команда)
	Если Объект.УслугиРегл.Количество() > 0 Тогда
		ТекстНСТР = НСтр("en='Before completing the table Services (compl.) will be cleared. Continue?';ru='Перед заполнением таблица Услуги (регл.) будет очищена. Продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьУслугиРеглЗавершение", ЭтотОбъект), ТекстНСТР, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьУслугиРеглСервер();
	ОбновитьВсегоВТЧУслуги();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьУслугиРеглЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        Возврат;
    Иначе
        Объект.УслугиРегл.Очистить();
		Модифицированность = Истина;
    КонецЕсли; 	
    
    ЗаполнитьУслугиРеглСервер();
	ОбновитьВсегоВТЧУслуги();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУслугиРеглСервер()
	тблУслугиРегл = ПолучитьУслугиРеглСервер();
	Объект.УслугиРегл.Загрузить(тблУслугиРегл);
КонецПроцедуры

&НаКлиенте
Процедура НастройкаВводаНаОсновании(Команда)
	ОткрытьФорму("ОбщаяФорма.уатНастройкиВводаНаОсновании",, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДатуПлатежа(Команда)
	Если Модифицированность ИЛИ НЕ Объект.Проведен Тогда
		ТекстНСТР = "Для выполнения данной операции необходимо провести документ. Продолжить?";
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбновитьДатуПлатежаПровести", ЭтотОбъект),
			ТекстНСТР, РежимДиалогаВопрос.ОКОтмена,, КодВозвратаДиалога.ОК);
		Возврат;
	КонецЕсли;
	
	ОбновитьДатуПлатежаСервер();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДатуПлатежаПровести(Результат, ДопПараметры) Экспорт
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
	Исключение
		Возврат;
	КонецПопытки;
КонецПроцедуры

&НаСервере
Процедура ОбновитьДатуПлатежаСервер()
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	уатПроведение_проф.УстановитьДатуПлатежа(ДокументОбъект);
	ОтобразитьДатуПлатежа();
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаСервере
Процедура УстановитьОтборОбъектСтроительства()
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		СписКонтрагентов = Новый СписокЗначений;
		СписКонтрагентов.Добавить(Объект.Контрагент);
		СписКонтрагентов.Добавить(ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка"));
		ПарамВыбора = Новый ПараметрВыбора("Отбор.Контрагент", СписКонтрагентов);
		мсв = Новый Массив;
		мсв.Добавить(ПарамВыбора);
		Элементы.ОбъектСтроительства.ПараметрыВыбора = Новый ФиксированныйМассив(мсв); //Новый ФиксированныйМассив(мсв)
	Иначе
		Элементы.ОбъектСтроительства.ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииКонтрагентаИлиОрганизации(Знач Оповещение)
	
	ДанныеОбменаССервером = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, УчитыватьНДС, Дата");
	ЗаполнитьЗначенияСвойств(ДанныеОбменаССервером, Объект);
	// Получим данные с сервера
	ДанныеОбменаССервером.ДоговорКонтрагента = Объект.ДоговорКонтрагента;
	ЗначенияДляЗаполнения = ИзменениеКонтрагентаСервер(ДанныеОбменаССервером);
	Объект.ДоговорКонтрагента = ЗначенияДляЗаполнения.ДоговорКонтрагента;
	
	ДоговорПередИзменением = Договор;
	//Договор = Объект.ДоговорКонтрагента;
	
	Оповещ = Новый ОписаниеОповещения("ПриИзмененииКонтрагентаИлиОрганизацииЗавершение", ЭтотОбъект, Новый Структура("Оповещение", Оповещение));
	уатОбщегоНазначенияКлиент.ПриИзмененииДоговора(ЭтаФорма, Оповещ, ДоговорПередИзменением);

	СтатусУПДОрганизации = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация, ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.СтатусУПД"));
	Объект.СтатусУПД = СтатусУПДОрганизации;
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииКонтрагентаИлиОрганизацииЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Оповещение = ДополнительныеПараметры.Оповещение;
    
	Если Не Оповещение = Неопределено Тогда 
		ВыполнитьОбработкуОповещения(Оповещение);
	КонецЕсли;

КонецПроцедуры // ПриИзмененииКонтрагентаИлиОрганизации()

&НаСервереБезКонтекста
Функция ИзменениеКонтрагентаСервер(ДанныеДляЗаполнения)
	СтруктураПараметровДляПолученияДоговора = 
		уатЗаполнениеДокументов.ПолучитьСтруктуруПараметровДляПолученияДоговораПродажи();
	
	ЗначенияДляЗаполнения = уатОбщегоНазначенияСервер.ПриИзмененииЗначенияКонтрагента(ДанныеДляЗаполнения,
		СтруктураПараметровДляПолученияДоговора);
	Возврат ЗначенияДляЗаполнения;
КонецФункции

// Процедура выполняет пересчет в табличной части документа после изменений 
// в форме "Цены и валюта".Выполняется пересчет колонок: цена, скидка, сумма,
// сумма НДС, всего.
//
&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты(Знач Оповещение, Знач ВалютаРасчетовПередИзменением, ПересчитатьЦены = Ложь)
	
	// 1. Формируем структуру параметров для заполнения формы "Цены и Валюта".
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВалютаДокумента",		  Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("Курс",				  Объект.КурсВзаиморасчетов);
	СтруктураПараметров.Вставить("Кратность",			  Объект.КратностьВзаиморасчетов);
	Если МноговалютныйУчет Тогда
		СтруктураПараметров.Вставить("ВалютаРасчетов",		Объект.ВалютаВзаиморасчетов);
		СтруктураПараметров.Вставить("КроссКурс",			Объект.КроссКурс);
		СтруктураПараметров.Вставить("СуммаВзаиморасчетов", Объект.СуммаВзаиморасчетов);
	КонецЕсли;
	СтруктураПараметров.Вставить("ДатаКурса",             Объект.ДатаКурса);
	СтруктураПараметров.Вставить("Контрагент",			  Объект.Контрагент);
	СтруктураПараметров.Вставить("Договор",				  Объект.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("Организация",			  Объект.Организация);
	СтруктураПараметров.Вставить("ДатаДокумента",		  Объект.Дата);
	СтруктураПараметров.Вставить("ПерезаполнитьЦены",	  Ложь);
	СтруктураПараметров.Вставить("ПересчитатьЦены",		  ПересчитатьЦены);
	СтруктураПараметров.Вставить("БылиВнесеныИзменения",  Ложь);
	СтруктураПараметров.Вставить("СуммаВключаетНДС",      Объект.СуммаВключаетНДС);
	СтруктураПараметров.Вставить("НалогообложениеНДС",	  Объект.УчитыватьНДС);
	// Для объедининенного решения с БП 3
	СтруктураПараметров.Вставить("ДокументБезНДС",        НЕ Объект.УчитыватьНДС);
	СтруктураЦеныИВалюта = Неопределено;

	Если НЕ ПравоРедактированиеДокумента() Тогда
		СтруктураПараметров.Вставить("ТолькоПросмотр", Истина);
	КонецЕсли;
	
	ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров,,,,,
		Новый ОписаниеОповещения("ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение", ЭтотОбъект,
		Новый Структура("ВалютаРасчетовПередИзменением, Оповещение", ВалютаРасчетовПередИзменением, Оповещение)),
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено ИЛИ НЕ ПравоРедактированиеДокумента() Тогда
		Возврат;
	КонецЕсли;
	
    ВалютаРасчетовПередИзменением = ДополнительныеПараметры.ВалютаРасчетовПередИзменением;
    Оповещение                    = ДополнительныеПараметры.Оповещение;
	СтруктураЦеныИВалюта          = Результат;
    
    // 3. Перезаполняем табличную часть "Номенклатура", если были внесены изменения в форме "Цены и Валюта".
    Если ТипЗнч(СтруктураЦеныИВалюта) = Тип("Структура") Тогда
		ДопПараметры = Новый Структура("ПредКурс, ПредКратность, Курс, Кратность, ПредДатаКурса",
			Объект.КурсВзаиморасчетов, Объект.КратностьВзаиморасчетов, СтруктураЦеныИВалюта.Курс,
			СтруктураЦеныИВалюта.Кратность, Объект.ДатаКурса);
		
		Если СтруктураЦеныИВалюта.Свойство("ВалютаДокумента") И СтруктураЦеныИВалюта.Свойство("Курс") И СтруктураЦеныИВалюта.Свойство("Кратность")
            И СтруктураЦеныИВалюта.Свойство("СуммаВключаетНДС") И  СтруктураЦеныИВалюта.Свойство("НалогообложениеНДС") Тогда
            Объект.ВалютаДокумента		   = СтруктураЦеныИВалюта.ВалютаДокумента;
            Объект.КурсВзаиморасчетов      = СтруктураЦеныИВалюта.Курс;
            Объект.КратностьВзаиморасчетов = СтруктураЦеныИВалюта.Кратность;
			Объект.ВалютаВзаиморасчетов    = СтруктураЦеныИВалюта.ВалютаРасчетов;
			Объект.КроссКурс               = СтруктураЦеныИВалюта.КроссКурс;
			Объект.ДатаКурса               = СтруктураЦеныИВалюта.ДатаКурса;
            Объект.СуммаВключаетНДС		   = СтруктураЦеныИВалюта.СуммаВключаетНДС;
            Объект.УчитыватьНДС			   = СтруктураЦеныИВалюта.НалогообложениеНДС;
        КонецЕсли;
        
        // Пересчитываем сумму если изменился признак Налогообложение НДС.
        Если СтруктураЦеныИВалюта.Свойство("НалогообложениеНДС") И СтруктураЦеныИВалюта.Свойство("ПредНалогообложениеНДС")
            И СтруктураЦеныИВалюта.НалогообложениеНДС <> СтруктураЦеныИВалюта.ПредНалогообложениеНДС Тогда
			
			ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
        КонецЕсли;
        
        // Пересчитываем цены по валюте.
        Если СтруктураЦеныИВалюта.Свойство("ПересчитатьЦены") И СтруктураЦеныИВалюта.ПересчитатьЦены Тогда
			ПересчитатьЦеныТабличнойЧастиПоВалюте(ВалютаРасчетовПередИзменением, "Услуги", ДопПараметры);
			Если МноговалютныйУчет И (ДопПараметры.Курс <> ДопПараметры.ПредКурс
				ИЛИ ДопПараметры.Кратность <> ДопПараметры.ПредКратность) Тогда //рассчитывает валютные показатели
				Для Каждого ТекСтрока Из Объект.Услуги Цикл
					РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрока, Истина, Ложь);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
        
        // Пересчитываем сумму если изменился признак "Сумма включает НДС".
        Если СтруктураЦеныИВалюта.Свойство("СуммаВключаетНДС") И СтруктураЦеныИВалюта.Свойство("ПредСуммаВключаетНДС") Тогда
            Если СтруктураЦеныИВалюта.СуммаВключаетНДС <> СтруктураЦеныИВалюта.ПредСуммаВключаетНДС Тогда
                ПересчитатьСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС("Услуги");
            КонецЕсли;
		КонецЕсли;
		
		// Пересчитываем кросс-курс в строках
		Если МноговалютныйУчет
			И (Результат.ВалютаДокумента <> Результат.ПредВалютаДокумента
			ИЛИ Объект.ДатаКурса <> ДопПараметры.ПредДатаКурса) Тогда
			
			Для Каждого ТекСтрока Из Объект.Услуги Цикл
				ТекСтрока.КроссКурс = ПолучитьКроссКурс(ТекСтрока.Валюта, Объект.ВалютаДокумента, Объект.ДатаКурса);
				ПриИзменииКроссКурсаВСтроке(ТекСтрока, Ложь);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьВидимость();
	
	ОбновитьВсегоВТЧУслуги();
    РассчитатьСуммуДокумента();
	
	Если Оповещение <> Неопределено Тогда 
		ВыполнитьОбработкуОповещения(Оповещение);
	КонецЕсли;

КонецПроцедуры // ОбработатьИзмененияПоКнопкеЦеныИВалюты()

// Процедура заполняет Ставку НДС в табличной части по системе налогообложения.
// 
&НаСервере
Процедура ЗаполнитьСтавкуНДСПоНалогообложениеНДС()
	
	//СтавкаНДСПоУмолчанию = уатОбщегоНазначенияПовтИсп.ПолучитьСтавкуНДСНоль();
	СтавкаНДСПоУмолчанию = Перечисления.СтавкиНДС.ПустаяСсылка();
	Для каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл
		СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
		СтрокаТабличнойЧасти.СуммаНДС = 0;
	КонецЦикла;
	
	Если Объект.УчитыватьНДС Тогда
		Элементы.УслугиСтавкаНДС.Видимость = Истина;
		Элементы.УслугиСуммаНДС.Видимость  = Истина;
		Элементы.УслугиВсего.Видимость     = Истина;
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС) Тогда
				СтрокаТабличнойЧасти.СтавкаНДС = СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
			КонецЕсли;	
			
			СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
			СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
									  		СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
									  		СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
			
		КонецЦикла;

	Иначе
		Элементы.УслугиСтавкаНДС.Видимость = Ложь;
		Элементы.УслугиСуммаНДС.Видимость  = Ложь;
		Элементы.УслугиВсего.Видимость     = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСтавкуНДСПоНалогообложениеНДС()

// Процедура рассчитывает сумму в строке табличной части.
//
&НаКлиенте
Процедура РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти = Неопределено, флУслуги = Ложь, РасчетСуммыДокумента = Истина)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
	Если флУслуги И МноговалютныйУчет Тогда
		СтрокаТабличнойЧасти.СуммаВалютная = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.ЦенаВалютная;
	КонецЕсли;
	
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти, флУслуги);
	ОбновитьВсегоВстрокеТЧ(СтрокаТабличнойЧасти);
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	Если РасчетСуммыДокумента Тогда
		РассчитатьСуммуДокумента();
	КонецЕсли;
		
КонецПроцедуры // РассчитатьСуммуВСтрокеТабличнойЧасти()

// Рассчитывается сумма НДС в строке табличной части.
//
&НаКлиенте
Процедура РассчитатьСуммуНДС(СтрокаТабличнойЧасти, флУслуги = Ложь)
	
	СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	
	СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
		СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
		СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
		
	Если флУслуги И МноговалютныйУчет Тогда
		СтрокаТабличнойЧасти.СуммаНДСВалютная = ?(Объект.СуммаВключаетНДС, 
			СтрокаТабличнойЧасти.СуммаВалютная - (СтрокаТабличнойЧасти.СуммаВалютная) / ((СтавкаНДС + 100) / 100),
			СтрокаТабличнойЧасти.СуммаВалютная * СтавкаНДС / 100);
	КонецЕсли;
	
	ОбновитьВсегоВстрокеТЧ(СтрокаТабличнойЧасти, флУслуги);
	
КонецПроцедуры // РассчитатьСуммуНДС()

&НаКлиенте
Процедура РассчитатьСуммуДокумента()
	Объект.СуммаДокумента = Объект.Услуги.Итог("Сумма");
	Если Объект.УчитыватьНДС И НЕ Объект.СуммаВключаетНДС Тогда
		Объект.СуммаДокумента = Объект.СуммаДокумента + Объект.Услуги.Итог("СуммаНДС");
	КонецЕсли;
	
	РассчитатьСуммуДокументаСервер();
КонецПроцедуры

&НаСервере
Процедура РассчитатьСуммуДокументаСервер()
	Объект.СуммаВзаиморасчетов = уатОбщегоНазначения_проф.СуммаВзаиморасчетовДокумента(Объект);
	ВывестиСуммовыеИтогиДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВсегоВстрокеТЧ(СтрокаТабличнойЧасти, ПересчетРегл = Ложь)
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма
		+ ?(Объект.УчитыватьНДС И НЕ Объект.СуммаВключаетНДС, СтрокаТабличнойЧасти.СуммаНДС, 0);
	
	Если НЕ ПересчетРегл И МноговалютныйУчет Тогда
		СтрокаТабличнойЧасти.ВсегоВалютная = СтрокаТабличнойЧасти.СуммаВалютная
			+ ?(Объект.УчитыватьНДС И НЕ Объект.СуммаВключаетНДС, СтрокаТабличнойЧасти.СуммаНДСВалютная, 0);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВсегоВТЧУслуги()
	Для Каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл
		ОбновитьВсегоВстрокеТЧ(СтрокаТабличнойЧасти);
	КонецЦикла;
	Для Каждого СтрокаТабличнойЧасти Из Объект.УслугиРегл Цикл
		ОбновитьВсегоВстрокеТЧ(СтрокаТабличнойЧасти, Истина);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимость()
	Элементы.УслугиСтавкаНДС.Видимость = Объект.УчитыватьНДС;
	Элементы.УслугиСуммаНДС.Видимость = Объект.УчитыватьНДС;
	Элементы.УслугиВсего.Видимость = Объект.УчитыватьНДС;
	Элементы.УслугиРеглСтавкаНДС.Видимость = Объект.УчитыватьНДС;
	Элементы.УслугиРеглСуммаНДС.Видимость = Объект.УчитыватьНДС;
	Элементы.УслугиРеглВсего.Видимость = Объект.УчитыватьНДС;
	
	ВедениеВзаиморасчетов = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.ДоговорКонтрагента, "ВедениеВзаиморасчетов");
	
	Элементы.ГруппаДатаПлатежа.Видимость = ИспользованиеПлатежногоКалендаря()
		И (ВедениеВзаиморасчетов = ПредопределенноеЗначение("Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказамНаТС")
		ИЛИ ВедениеВзаиморасчетов = ПредопределенноеЗначение("Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоНакладным")
		ИЛИ ВедениеВзаиморасчетов = ПредопределенноеЗначение("Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам"));
	Элементы.ДатаПлатежа.Доступность = УказатьДатуПлатежаВручную;
	
	Элементы.УслугиЗаказ.АвтоОтметкаНезаполненного = (ВедениеВзаиморасчетов = ПредопределенноеЗначение("Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказамНаТС"));
	
	Элементы.Сделка.АвтоОтметкаНезаполненного = (ВедениеВзаиморасчетов = ПредопределенноеЗначение("Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам"));
	//Элементы.Сделка.ОтметкаНезаполненного = Элементы.Сделка.АвтоОтметкаНезаполненного;
	Элементы.Сделка.ОграничениеТипа = Новый ОписаниеТипов("ДокументСсылка.уатСчетНаОплатуПокупателю");
	
	Если Объект.СверткаУслугРегл Тогда
		Элементы.ГруппаУслугиРегл.Видимость = Истина;
		Элементы.ГруппаУслуги.Заголовок = НСтр("en='Services (manag.)';ru='Услуги (упр.)'");
	Иначе
		Элементы.ГруппаУслугиРегл.Видимость = Ложь;
		Элементы.ГруппаУслуги.Заголовок = НСтр("en='Services';ru='Услуги'");
	КонецЕсли;
	
	Элементы.УслугиЦенаВалютная.Видимость     = МноговалютныйУчет;
	Элементы.УслугиСуммаВалютная.Видимость    = МноговалютныйУчет;
	Элементы.УслугиСуммаНДСвалютная.Видимость = МноговалютныйУчет И Объект.УчитыватьНДС;
	Элементы.УслугиВсегоВалютная.Видимость    = МноговалютныйУчет И Объект.УчитыватьНДС;
	Элементы.УслугиГруппаВалюта.Видимость     = МноговалютныйУчет;
	Если МноговалютныйУчет Тогда
		Элементы.УслугиЦена.Заголовок     = СтрШаблон("Цена (%1)", Объект.ВалютаДокумента);
		Элементы.УслугиСумма.Заголовок    = СтрШаблон("Сумма (%1)", Объект.ВалютаДокумента);
		Элементы.УслугиСуммаНДС.Заголовок = СтрШаблон("Сумма НДС (%1)", Объект.ВалютаДокумента);
		Элементы.УслугиВсего.Заголовок    = СтрШаблон("Всего (%1)", Объект.ВалютаДокумента);
	Иначе
		Элементы.УслугиЦена.Заголовок     = "";
		Элементы.УслугиСумма.Заголовок    = "";
		Элементы.УслугиСуммаНДС.Заголовок = "";
		Элементы.УслугиВсего.Заголовок    = "";
	КонецЕсли;
	Элементы.УслугиИзменитьКроссКурсВТЧ.Видимость                = МноговалютныйУчет;
	Элементы.УслугиКонтекстноеМенюИзменитьКроссКурсВТЧ.Видимость = МноговалютныйУчет;
	
	Элементы.ОбновитьДатуПлатежа.Видимость = НЕ УказатьДатуПлатежаВручную;
	
	ВывестиСуммовыеИтогиДокумента();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИспользованиеПлатежногоКалендаря()
	Возврат ПолучитьФункциональнуюОпцию("уатИспользоватьПлатежныйКалендарь");
КонецФункции

&НаКлиенте
Процедура РедактироватьЦеныИВалютуЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ОбновитьВсегоВТЧУслуги();
    РассчитатьСуммуДокумента();
    Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура НастройкаПериодаЗавершение(Период, ДополнительныеПараметры) Экспорт
	    
	Если Не Период = Неопределено Тогда
		Объект.ДатаНач = Период.ДатаНачала;
		Объект.ДатаКон = Период.ДатаОкончания;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиСуммовыеИтогиДокумента()
	
	Если Объект.УчитыватьНДС Тогда 
		Если Объект.СуммаВключаетНДС Тогда 
			НадписьВсегоНДС = НСтр("en='VAT amount';ru='НДС в сумме'") + ":";
		Иначе 
			НадписьВсегоНДС = НСтр("en='VAT from above';ru='НДС сверху'") + ":";
		КонецЕсли;
		НадписьВсего = НСтр("en='Total including VAT';ru='Всего с НДС'");
		Элементы.СтраницыИтогов.ТекущаяСтраница = Элементы.ИтогоУчетНДС;
	Иначе
		НадписьВсего = НСтр("en='Total';ru='Всего'");
		Элементы.СтраницыИтогов.ТекущаяСтраница = Элементы.ИтогоБезНДС;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ВалютаДокумента) Или Объект.ВалютаДокумента = мВалютаРегламентированногоУчета Тогда 
		НадписьКурс = "(1.0000)";
		Элементы.НадписьКурс.Видимость = Ложь;
		Элементы.НадписьКурс2.Видимость = Ложь;
	Иначе
		НадписьКурс = "(" + Формат(
			?(Объект.КратностьВзаиморасчетов = 0, Объект.КурсВзаиморасчетов, Объект.КурсВзаиморасчетов/Объект.КратностьВзаиморасчетов),
			"ЧДЦ=4; ЧРД=.; ЧН=0.0000; ЧГ=0") + ")";
		Элементы.НадписьКурс.Видимость = Истина;
		Элементы.НадписьКурс2.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПравоРедактированиеДокумента()
	Рез = ПравоДоступа("Редактирование", Метаданные.Документы.уатРеализацияУслуг);
	Возврат Рез;
КонецФункции

&НаСервере
Функция ПолучитьУслугиРеглСервер()
	СоотвСодержание = Новый Соответствие;
	тблУслуги = Объект.Услуги.Выгрузить();
	
	тблУслугиРегл = тблУслуги.Скопировать();
	тблУслугиРегл.Колонки.Удалить("Заказ");
	тблУслугиРегл.Очистить();
	
	Для Каждого ТекУслуга Из тблУслуги Цикл
		ТекУслуга.Номенклатура = ТекУслуга.Номенклатура.УслугаРегл;
		ТекСодержание = СокрЛП(ТекУслуга.Содержание);
		
		// Формирование общего содержания для услуги регл., если введено неск. строк с разным содержанием для одной услуги
		СодержаниеНоменклатуры = СоотвСодержание.Получить(ТекУслуга.Номенклатура);
		Если СодержаниеНоменклатуры = Неопределено Тогда
			СодержаниеНоменклатуры = "";
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекСодержание) Тогда
			Если ЗначениеЗаполнено(СодержаниеНоменклатуры) Тогда
				Если СтрНайти(СодержаниеНоменклатуры, ТекСодержание) = 0 Тогда //добавляем содержание тек. строки, только если его еще нет в строке свертки
					СодержаниеНоменклатуры = СодержаниеНоменклатуры + ", " + СокрЛП(ТекСодержание);
				КонецЕсли;
			Иначе
				СодержаниеНоменклатуры = СокрЛП(ТекСодержание);
			КонецЕсли;
		КонецЕсли;
		СоотвСодержание.Вставить(ТекУслуга.Номенклатура, СодержаниеНоменклатуры);
	КонецЦикла;
	
	тблУслуги.Свернуть("Номенклатура, СтавкаНДС", "Сумма, СуммаНДС");
	Для Каждого ТекУслуга Из тблУслуги Цикл
		НоваяСтрока = тблУслугиРегл.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекУслуга);
		НоваяСтрока.Цена = НоваяСтрока.Сумма;
		НоваяСтрока.Количество = 1;
		НоваяСтрока.СтатьяДоходов = уатОбщегоНазначенияСервер.СтатьяДоходовНоменклатуры(ТекУслуга.Номенклатура);
		НоваяСтрока.Содержание = СоотвСодержание[ТекУслуга.Номенклатура];
	КонецЦикла;
	
	Возврат тблУслугиРегл;
КонецФункции

&НаСервере
Процедура ПроверитьЗаполнениеУслугиРегл(Отказ)
	Если НЕ Объект.СверткаУслугРегл Тогда
		Возврат;
	КонецЕсли;
	
	тблУслугиРегл1 = Объект.УслугиРегл.Выгрузить();
	тблУслугиРегл1.Колонки.Удалить("НомерСтроки");
	тблУслугиРегл1.Колонки.Удалить("ИсходныйНомерСтроки");
	тблУслугиРегл1.Колонки.Удалить("Всего");
	тблУслугиРегл2 = ПолучитьУслугиРеглСервер();
	тблУслугиРегл2.Колонки.Удалить("НомерСтроки");
	тблУслугиРегл2.Колонки.Удалить("ИсходныйНомерСтроки");
	тблУслугиРегл2.Колонки.Удалить("Всего");
	Отказ = НЕ ОбщегоНазначения.КоллекцииИдентичны(тблУслугиРегл1, тблУслугиРегл2);
	Если Отказ Тогда
		ТекстНСТР = НСтр("en='Tabular sections data ""Services (manag.)"" and ""Services (compl.)"" are different!';ru='Данные табличных частей ""Услуги (упр.)"" и ""Услуги (регл.)"" различаются!'");
		уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР,,, СтатусСообщения.Внимание);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПересчитатьСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС(ИмяТЧ)
	уатОбщегоНазначенияСервер.ПересчитатьСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС(Объект[ИмяТЧ], Объект.СуммаВключаетНДС);
КонецПроцедуры

&НаСервере
Процедура ПересчитатьЦеныТабличнойЧастиПоВалюте(ВалютаПередИзменением, ИмяТЧ, ДопПараметры = Неопределено)
	уатОбщегоНазначенияСервер.ПересчитатьЦеныТабличнойЧастиПоВалюте(Объект, ВалютаПередИзменением, ИмяТЧ, ДопПараметры);
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборСделки()
	Если Объект.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказамНаТС Тогда
		мсвЗаказыДляОтбора = уатОбщегоНазначения_проф.ПолучитьЗаказыПоДоговору(Объект.ДоговорКонтрагента, Истина);
		
		мсвПараметрыВыбора = Новый Массив;
		мсвПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", мсвЗаказыДляОтбора));
		Элементы.Сделка.ПараметрыВыбора = Новый ФиксированныйМассив(мсвПараметрыВыбора);
	Иначе
		мсвПараметрыВыбора = Новый Массив;
		мсвПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.ДоговорКонтрагента", Объект.ДоговорКонтрагента));
		Элементы.Сделка.ПараметрыВыбора = Новый ФиксированныйМассив(мсвПараметрыВыбора);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СделкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	УстановитьОтборСделки();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемВопрос(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.ОК Тогда
		флВопросЗакрытиеФормы = Ложь;
		Закрыть();
	КонецЕсли;
КонецПроцедуры

// Промежуточная функция расчета кросс-курса - избавляемся от таскания контекста формы на сервер
&НаСервереБезКонтекста
Функция ПолучитьКроссКурс(ВалютаНач, ВалютаКон, ДатаКурса, КэшКурсов = Неопределено)
	Возврат уатОбщегоНазначенияСервер.ПолучитьКроссКурс(ВалютаНач, ВалютаКон, ДатаКурса, КэшКурсов);
КонецФункции

&НаСервере
Процедура ОтобразитьДатуПлатежа()
	Если ЗначениеЗаполнено(Объект.ДатаПлатежа) Тогда
		ДатаПлатежаПлан = Объект.ДатаПлатежа;
		УказатьДатуПлатежаВручную = Истина;
		
		Элементы.ДатыПлатежейПоЗаказам.Видимость = Ложь;
		Элементы.ДатаПлатежа.Видимость           = Истина;
	Иначе
		Если Объект.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказамНаТС Тогда
			мсвСделки = Объект.Услуги.Выгрузить().ВыгрузитьКолонку("Заказ");
		ИначеЕсли Объект.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоНакладным Тогда
			мсвСделки = Новый Массив;
			мсвСделки.Добавить(Объект.Ссылка);
		Иначе
			мсвСделки = Новый Массив;
			мсвСделки.Добавить(Объект.Сделка);
		КонецЕсли;
		
		ДатаПлатежаВрем = уатОбщегоНазначения_проф.ДатаПлатежаПоРегистру(мсвСделки);
		
		Если ТипЗнч(ДатаПлатежаВрем) = Тип("Дата") Тогда
			ДатаПлатежаПлан       = ДатаПлатежаВрем;
			ДатыПлатежейПоЗаказам = Неопределено;
			
			Элементы.ДатыПлатежейПоЗаказам.Видимость = Ложь;
			Элементы.ДатаПлатежа.Видимость           = Истина;
		Иначе
			ДатаПлатежаПлан       = Неопределено;
			ДатыПлатежейПоЗаказам = ДатаПлатежаВрем;
			
			Элементы.ДатыПлатежейПоЗаказам.Видимость = Истина;
			Элементы.ДатаПлатежа.Видимость           = Ложь;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

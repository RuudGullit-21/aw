#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	Настройки.ПриПолученииСлужебныхРеквизитов = Ложь;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатРеализацияУслуг";
	КомандаПечати.Идентификатор = "АктОбОказанииУслуг";
	КомандаПечати.Представление = НСтр("en='Service performed report';ru='Акт об оказании услуг'");
	КомандаПечати.Порядок       = 1;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатРеализацияУслуг";
	КомандаПечати.Идентификатор = "АктОбОказанииУслугФаксимиле";
	КомандаПечати.Представление = НСтр("en='Service performed report';ru='Акт об оказании услуг (факсимиле)'");
	КомандаПечати.МестоРазмещения = "ПодменюПечатьФаксимиле";
	КомандаПечати.Порядок       = 2;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатРеализацияУслуг";
	КомандаПечати.Идентификатор = "СчетФактура1137";
	КомандаПечати.Представление = НСтр("en='Invoice';ru='Счет-фактура'");
	КомандаПечати.Порядок       = 3;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатРеализацияУслуг";
	КомандаПечати.Идентификатор = "СчетФактура1137Факсимиле";
	КомандаПечати.Представление = НСтр("ru = 'Счет-фактура (факсимиле)'; en = 'Invoice'");
	КомандаПечати.МестоРазмещения = "ПодменюПечатьФаксимиле";
	КомандаПечати.Порядок       = 4;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатРеализацияУслуг";
	КомандаПечати.Идентификатор = "КС2";
	КомандаПечати.Представление = НСтр("en='Act KS-2';ru='Акт КС-2'");
	КомандаПечати.Порядок       = 5;

	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатРеализацияУслуг";
	КомандаПечати.Идентификатор = "КС2Факсимиле";
	КомандаПечати.Представление = НСтр("ru='Акт КС-2 (факсимиле)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.МестоРазмещения = "ПодменюПечатьФаксимиле";
	КомандаПечати.Порядок         = 6;

	// Универсальный передаточный документ
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатРеализацияУслуг";
	КомандаПечати.Идентификатор = "УниверсальныйПередаточныйДокумент";
	КомандаПечати.Представление = НСтр("en='Universal transfer document (UTD)';ru='Универсальный передаточный документ (УПД)'");
	КомандаПечати.Порядок       = 7;
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатРеализацияУслуг";
	КомандаПечати.Идентификатор = "УниверсальныйПередаточныйДокументФаксимиле";
	КомандаПечати.Представление = НСтр("ru='Универсальный передаточный документ (УПД) (факсимиле)'");
	КомандаПечати.ПроверкаПроведенияПередПечатью = Ложь;
	КомандаПечати.МестоРазмещения = "ПодменюПечатьФаксимиле";
	КомандаПечати.Порядок         = 8;

	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор  = "Реестр";
	КомандаПечати.Представление  = НСтр("en='Document register';ru='Реестр документов'");
	КомандаПечати.ЗаголовокФормы = НСтр("en='Register of documents ""Selling of services""';ru='Реестр документов ""Реализация услуг""'");
	КомандаПечати.Обработчик     = "уатОбщегоНазначенияТиповыеКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм     = "ФормаСписка";
	КомандаПечати.Порядок        = 100;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр).
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной
//                                                            параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной
//                                            параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт

	Если НЕ уатОбщегоНазначенияСервер.РазрешениеПечатиНепроведенногоДокумента(МассивОбъектов) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктОбОказанииУслуг") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "АктОбОказанииУслуг", "АктОбОказанииУслуг", ПечатнаяФорма(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктОбОказанииУслугФаксимиле") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "АктОбОказанииУслугФаксимиле", "АктОбОказанииУслуг", ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, Истина));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетФактура1137") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "СчетФактура1137", "Счет-фактура", ПолучитьДанныеДляСчетовФактур(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "СчетФактура1137Факсимиле") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "СчетФактура1137Факсимиле", "Счет-фактура", ПолучитьДанныеДляСчетовФактур(МассивОбъектов, ОбъектыПечати, Истина));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "КС2") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "КС2", "Акт КС-2", ПечатнаяФормаКС2(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "КС2Факсимиле") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "КС2Факсимиле", "Акт КС-2", ПечатнаяФормаКС2(МассивОбъектов, ОбъектыПечати, Истина));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "УниверсальныйПередаточныйДокумент") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "УниверсальныйПередаточныйДокумент", "Универсальный передаточный документ (УПД)", ПечатнаяФормаУПД(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "УниверсальныйПередаточныйДокументФаксимиле") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "УниверсальныйПередаточныйДокументФаксимиле", "Универсальный передаточный документ (УПД)", ПечатнаяФормаУПД(МассивОбъектов, ОбъектыПечати, Истина));
	КонецЕсли;
	
	уатОбщегоНазначенияСервер.УстановитьРедактированиеПечатныхФормДокумента(КоллекцияПечатныхФорм);
	уатУправлениеПечатью.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов, КоллекцияПечатныхФорм);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.УправлениеДоступом

// Позволяет переопределить ограничение, указанное в модуле менеджера объекта метаданных.
//
// Параметры:
//  Ограничение - Структура:
//    * Текст                             - Строка - ограничение доступа для пользователей.
//                                          Если пустая строка, значит, доступ разрешен.
//    * ТекстДляВнешнихПользователей      - Строка - ограничение доступа для внешних пользователей.
//                                          Если пустая строка, значит, доступ запрещен.
//    * ПоВладельцуБезЗаписиКлючейДоступа - Неопределено - определить автоматически.
//                                        - Булево - если Ложь, то всегда записывать ключи доступа,
//                                          если Истина, тогда не записывать ключи доступа,
//                                          а использовать ключи доступа владельца (требуется,
//                                          чтобы ограничение было строго по объекту-владельцу).
//   * ПоВладельцуБезЗаписиКлючейДоступаДляВнешнихПользователей - Неопределено, Булево - также
//                                          как у параметра ПоВладельцуБезЗаписиКлючейДоступа.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Подразделение)";
	
	Ограничение.ТекстДляВнешнихПользователей = Ограничение.Текст;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// СтандартныеПодсистемы.ВариантыОтчетов

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВариантыОтчетов

#КонецОбласти

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	
	СтруктураДополнительныеСвойства.Вставить("МноговалютныйУчет", ПолучитьФункциональнуюОпцию("уатМноговалютныйУчет"));
	СтруктураДополнительныеСвойства.Вставить("ДатаКурса", ?(ДокументСсылка.ДатаКурса = '00010101', ДокументСсылка.Дата, ДокументСсылка.ДатаКурса));
	СтруктураДополнительныеСвойства.Вставить("КроссКурсВзаиморасчетов", ?(ДокументСсылка.КроссКурс = 0, 1, ДокументСсылка.КроссКурс));
	
	Если ЗначениеЗаполнено(ДокументСсылка.ВалютаВзаиморасчетов) Тогда
		ВалютаВзаиморасчетов = ДокументСсылка.ВалютаВзаиморасчетов;
	Иначе
		ВалютаВзаиморасчетов = ДокументСсылка.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	КонецЕсли;
	СтруктураДополнительныеСвойства.Вставить("ВалютаВзаиморасчетов", ВалютаВзаиморасчетов);
	
	СтруктураКурсаВзаиморасчетов = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ВалютаВзаиморасчетов,
		СтруктураДополнительныеСвойства.ДатаКурса);
	СтруктураДополнительныеСвойства.Вставить("КурсВзаиморасчетов", СтруктураКурсаВзаиморасчетов.Курс);
	СтруктураДополнительныеСвойства.Вставить("КратностьВзаиморасчетов", СтруктураКурсаВзаиморасчетов.Кратность);
	
	СтруктураКурсаДокумента = Новый Структура("Курс, Кратность",
		СтруктураДополнительныеСвойства.КурсДокумента, СтруктураДополнительныеСвойства.КратностьДокумента);
	
	КэшКурсов = Новый Соответствие;
	КэшКурсов.Вставить(ДокументСсылка.ВалютаДокумента, СтруктураКурсаДокумента);
	КэшКурсов.Вставить(ВалютаВзаиморасчетов, СтруктураКурсаВзаиморасчетов);
	СтруктураДополнительныеСвойства.Вставить("КэшКурсов", КэшКурсов);
	
	// расчет количества заказов для платежного календаря
	мсвЗаказы = Новый Массив;
	Для Каждого ТекСтрокаУслуги Из ДокументСсылка.Услуги Цикл
		Если ЗначениеЗаполнено(ТекСтрокаУслуги.Заказ)
			И мсвЗаказы.Найти(ТекСтрокаУслуги.Заказ) = Неопределено Тогда
			мсвЗаказы.Добавить(ТекСтрокаУслуги.Заказ);
		КонецЕсли;
	КонецЦикла;
		
	мЗапрос = Новый Запрос;
	мЗапрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗНАЧЕНИЕ(Перечисление.уатПолучателиУслуг.Контрагент) КАК ПолучательУслуг,
	|	уатРеализацияУслугУслуги.Ссылка КАК Регистратор,
	|	уатРеализацияУслугУслуги.Ссылка.Дата КАК Период,
	|	уатРеализацияУслугУслуги.Ссылка.Организация КАК Организация,
	|	уатРеализацияУслугУслуги.Ссылка.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	уатРеализацияУслугУслуги.Номенклатура КАК Номенклатура,
	|	уатРеализацияУслугУслуги.Ссылка.ОбъектСтроительства КАК ОбъектСтроительства,
	|	уатРеализацияУслугУслуги.СтавкаНДС КАК СтавкаНДС,
	|	уатРеализацияУслугУслуги.Заказ КАК ЗаказНаТС,
	|	ВЫБОР
	|		КОГДА &МноговалютныйУчет
	|			ТОГДА уатРеализацияУслугУслуги.Валюта
	|		ИНАЧЕ уатРеализацияУслугУслуги.Ссылка.ВалютаДокумента
	|	КОНЕЦ КАК Валюта,
	|	уатРеализацияУслугУслуги.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА &МноговалютныйУчет
	|			ТОГДА уатРеализацияУслугУслуги.СуммаВалютная
	|		ИНАЧЕ уатРеализацияУслугУслуги.Сумма
	|	КОНЕЦ + ВЫБОР
	|		КОГДА уатРеализацияУслугУслуги.Ссылка.УчитыватьНДС
	|				И НЕ уатРеализацияУслугУслуги.Ссылка.СуммаВключаетНДС
	|			ТОГДА ВЫБОР
	|					КОГДА &МноговалютныйУчет
	|						ТОГДА уатРеализацияУслугУслуги.СуммаНДСвалютная
	|					ИНАЧЕ уатРеализацияУслугУслуги.СуммаНДС
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма,
	|	0 КАК СуммаРегл,
	|	ВЫБОР
	|		КОГДА уатРеализацияУслугУслуги.Ссылка.УчитыватьНДС
	|			ТОГДА ВЫБОР
	|					КОГДА &МноговалютныйУчет
	|						ТОГДА уатРеализацияУслугУслуги.СуммаНДСвалютная
	|					ИНАЧЕ уатРеализацияУслугУслуги.СуммаНДС
	|				КОНЕЦ
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаНДС
	|ИЗ
	|	Документ.уатРеализацияУслуг.Услуги КАК уатРеализацияУслугУслуги
	|ГДЕ
	|	уатРеализацияУслугУслуги.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатРеализацияУслугУслуги.Ссылка КАК Регистратор,
	|	уатРеализацияУслугУслуги.Ссылка.Дата КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	уатРеализацияУслугУслуги.Ссылка.Организация КАК Организация,
	|	уатРеализацияУслугУслуги.Ссылка.Контрагент КАК Контрагент,
	|	уатРеализацияУслугУслуги.Ссылка.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВЫБОР
	|		КОГДА &МноговалютныйУчет
	|			ТОГДА уатРеализацияУслугУслуги.Ссылка.ВалютаВзаиморасчетов
	|		ИНАЧЕ уатРеализацияУслугУслуги.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов
	|	КОНЕЦ КАК Валюта,
	|	ВЫБОР
	|		КОГДА &МноговалютныйУчет
	|			ТОГДА уатРеализацияУслугУслуги.Валюта
	|		ИНАЧЕ уатРеализацияУслугУслуги.Ссылка.ВалютаДокумента
	|	КОНЕЦ КАК ВалютаСтроки,
	|	ВЫБОР
	|		КОГДА &ВзаиморасчетыПоЗаказам
	|			ТОГДА уатРеализацияУслугУслуги.Заказ
	|		КОГДА &ВзаиморасчетыПоСчетам
	|			ТОГДА уатРеализацияУслугУслуги.Ссылка.Сделка
	|		КОГДА &ВзаиморасчетыПоНакладным
	|			ТОГДА &Ссылка
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Сделка,
	|	уатРеализацияУслугУслуги.Сумма + ВЫБОР
	|		КОГДА уатРеализацияУслугУслуги.Ссылка.УчитыватьНДС
	|				И НЕ уатРеализацияУслугУслуги.Ссылка.СуммаВключаетНДС
	|			ТОГДА уатРеализацияУслугУслуги.СуммаНДС
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма,
	|	уатРеализацияУслугУслуги.СуммаВалютная + ВЫБОР
	|		КОГДА уатРеализацияУслугУслуги.Ссылка.УчитыватьНДС
	|				И НЕ уатРеализацияУслугУслуги.Ссылка.СуммаВключаетНДС
	|			ТОГДА уатРеализацияУслугУслуги.СуммаНДСвалютная
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВалютная,
	|	0 КАК СуммаВзаиморасчетов,
	|	0 КАК СуммаУпр
	|ИЗ
	|	Документ.уатРеализацияУслуг.Услуги КАК уатРеализацияУслугУслуги
	|ГДЕ
	|	уатРеализацияУслугУслуги.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗНАЧЕНИЕ(Перечисление.уатПолучателиУслуг.Контрагент) КАК ПолучательУслуг,
	|	уатРеализацияУслугУслуги.Ссылка КАК Регистратор,
	|	уатРеализацияУслугУслуги.Ссылка.Дата КАК Период,
	|	уатРеализацияУслугУслуги.Ссылка.Организация КАК Организация,
	|	уатРеализацияУслугУслуги.Ссылка.Контрагент КАК Контрагент,
	|	уатРеализацияУслугУслуги.Ссылка.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	уатРеализацияУслугУслуги.Заказ КАК ЗаказНаТС,
	|	ВЫБОР
	|		КОГДА &ВзаиморасчетыПоНакладным
	|			ТОГДА уатРеализацияУслугУслуги.Ссылка
	|		КОГДА &ВзаиморасчетыПоСчетам
	|			ТОГДА уатРеализацияУслугУслуги.Ссылка.Сделка
	|		ИНАЧЕ уатРеализацияУслугУслуги.Заказ
	|	КОНЕЦ КАК Сделка,
	|	ВЫБОР
	|		КОГДА &МноговалютныйУчет
	|			ТОГДА уатРеализацияУслугУслуги.Ссылка.ВалютаВзаиморасчетов
	|		ИНАЧЕ уатРеализацияУслугУслуги.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов
	|	КОНЕЦ КАК Валюта,
	|	ВЫБОР
	|		КОГДА &МноговалютныйУчет
	|			ТОГДА уатРеализацияУслугУслуги.Валюта
	|		ИНАЧЕ уатРеализацияУслугУслуги.Ссылка.ВалютаДокумента
	|	КОНЕЦ КАК ВалютаСтроки,
	|	уатРеализацияУслугУслуги.Сумма + ВЫБОР
	|		КОГДА уатРеализацияУслугУслуги.Ссылка.УчитыватьНДС
	|				И НЕ уатРеализацияУслугУслуги.Ссылка.СуммаВключаетНДС
	|			ТОГДА уатРеализацияУслугУслуги.СуммаНДС
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаПриход,
	|	уатРеализацияУслугУслуги.СуммаВалютная + ВЫБОР
	|		КОГДА уатРеализацияУслугУслуги.Ссылка.УчитыватьНДС
	|				И НЕ уатРеализацияУслугУслуги.Ссылка.СуммаВключаетНДС
	|			ТОГДА уатРеализацияУслугУслуги.СуммаНДСвалютная
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаВалютная,
	|	0 КАК СуммаПриходУпр
	|ИЗ
	|	Документ.уатРеализацияУслуг.Услуги КАК уатРеализацияУслугУслуги
	|ГДЕ
	|	уатРеализацияУслугУслуги.Ссылка = &Ссылка
	|	И (&ВзаиморасчетыПоЗаказам ИЛИ &ВзаиморасчетыПоНакладным ИЛИ &ВзаиморасчетыПоСчетам)";
	мЗапрос.УстановитьПараметр("МноговалютныйУчет",        СтруктураДополнительныеСвойства.МноговалютныйУчет);
	мЗапрос.УстановитьПараметр("Ссылка",                   ДокументСсылка);
	мЗапрос.УстановитьПараметр("ВзаиморасчетыПоЗаказам",   ДокументСсылка.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказамНаТС);
	мЗапрос.УстановитьПараметр("ВзаиморасчетыПоНакладным", ДокументСсылка.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоНакладным);
	мЗапрос.УстановитьПараметр("ВзаиморасчетыПоСчетам",    ДокументСсылка.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам);
	
	МассивРезультатов = мЗапрос.ВыполнитьПакет();
	
	// выставленные услуги
	ТаблицаУслуги = МассивРезультатов[0].Выгрузить();
	Для Каждого ТекСтрока Из ТаблицаУслуги Цикл
		СтруктураКурсаСтроки = СтруктураКурсаВалютыСтроки(ТекСтрока.Валюта,
			СтруктураДополнительныеСвойства.ДатаКурса, СтруктураДополнительныеСвойства.КэшКурсов);
				
		ТекСтрока.СуммаНДС  = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаНДС,
			ТекСтрока.Валюта,               СтруктураДополнительныеСвойства.ВалютаРеглУчета,
			СтруктураКурсаСтроки.Курс,      СтруктураДополнительныеСвойства.КурсРегл,
			СтруктураКурсаСтроки.Кратность, СтруктураДополнительныеСвойства.КратностьРегл);
		
		ТекСтрока.СуммаРегл = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.Сумма,
			ТекСтрока.Валюта,               СтруктураДополнительныеСвойства.ВалютаРеглУчета,
			СтруктураКурсаСтроки.Курс,      СтруктураДополнительныеСвойства.КурсРегл,
			СтруктураКурсаСтроки.Кратность, СтруктураДополнительныеСвойства.КратностьРегл); 
	КонецЦикла;
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаВыставленныхУслуг", ТаблицаУслуги);
	
	// взаиморасчеты
	ТаблицаВзаиморасчетов = МассивРезультатов[1].Выгрузить();
	Для Каждого ТекСтрока Из ТаблицаВзаиморасчетов Цикл		
		ТекСтрока.СуммаВзаиморасчетов = уатОбщегоНазначения_проф.СуммаВзаиморасчетовСтроки(
			ТекСтрока.Сумма, ТекСтрока.СуммаВалютная, ТекСтрока.ВалютаСтроки, СтруктураДополнительныеСвойства);
		ТекСтрока.СуммаУпр            = уатОбщегоНазначения_проф.СуммаУпрСтроки(
			ТекСтрока.Сумма, ТекСтрока.СуммаВалютная, ТекСтрока.ВалютаСтроки, СтруктураДополнительныеСвойства);
	КонецЦикла;
	ТаблицаВзаиморасчетов.Свернуть("Регистратор, Период, ВидДвижения, Организация, Контрагент, ДоговорКонтрагента, Валюта, Сделка", "СуммаВзаиморасчетов, СуммаУпр");
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаВзаиморасчетов", ТаблицаВзаиморасчетов);
	
	// платежный календарь
	ТаблицаПлатежныйКалендарь = МассивРезультатов[2].Выгрузить();
	СтруктураДополнительныеСвойства.Вставить("ОкруглятьРезультат", Ложь);
	Для Каждого ТекСтрока Из ТаблицаПлатежныйКалендарь Цикл		
		ТекСтрока.СуммаПриход    = уатОбщегоНазначения_проф.СуммаВзаиморасчетовСтроки(
			ТекСтрока.СуммаПриход, ТекСтрока.СуммаВалютная, ТекСтрока.Валюта, СтруктураДополнительныеСвойства);
		ТекСтрока.СуммаПриходУпр = уатОбщегоНазначения_проф.СуммаУпрСтроки(
			ТекСтрока.СуммаПриход, ТекСтрока.СуммаВалютная, ТекСтрока.Валюта, СтруктураДополнительныеСвойства);
	КонецЦикла;
	ТаблицаПлатежныйКалендарь.Свернуть("Период, Регистратор, Организация, Контрагент, ДоговорКонтрагента, ПолучательУслуг, ЗаказНаТС, Валюта, Сделка", "СуммаПриход, СуммаПриходУпр");
	уатПроведение_проф.РаспределитьПлатежныйКалендарьПоГрафикуОплаты(ТаблицаПлатежныйКалендарь, ДокументСсылка);
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПлатежныйКалендарь", ТаблицаПлатежныйКалендарь);

КонецПроцедуры // ИнициализироватьДанныеДокумента()

Процедура ВыполнитьКонтроль(ДокументСсылка, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь) Экспорт
	
	Заголовок = уатОбщегоНазначенияТиповые.уатПредставлениеДокументаПриПроведении(ДокументСсылка);
	
	мЗапрос = Новый Запрос;
	мЗапрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатПоступлениеАгрегатовШины.СерияНоменклатуры
	|ПОМЕСТИТЬ АгрегатыДокумента
	|ИЗ
	|	Документ.уатПоступлениеАгрегатов.Шины КАК уатПоступлениеАгрегатовШины
	|ГДЕ
	|	уатПоступлениеАгрегатовШины.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	уатПоступлениеАгрегатовАккумуляторы.СерияНоменклатуры
	|ИЗ
	|	Документ.уатПоступлениеАгрегатов.Аккумуляторы КАК уатПоступлениеАгрегатовАккумуляторы
	|ГДЕ
	|	уатПоступлениеАгрегатовАккумуляторы.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	уатПоступлениеАгрегатовПрочиеАгрегаты.СерияНоменклатуры
	|ИЗ
	|	Документ.уатПоступлениеАгрегатов.ПрочиеАгрегаты КАК уатПоступлениеАгрегатовПрочиеАгрегаты
	|ГДЕ
	|	уатПоступлениеАгрегатовПрочиеАгрегаты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатАгрегатыТССрезПоследних.СерияНоменклатуры,
	|	уатАгрегатыТССрезПоследних.ТС,
	|	уатАгрегатыТССрезПоследних.МестоУстановки
	|ИЗ
	|	АгрегатыДокумента КАК АгрегатыДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатАгрегатыТС.СрезПоследних(&МоментВремени, ) КАК уатАгрегатыТССрезПоследних
	|		ПО АгрегатыДокумента.СерияНоменклатуры = уатАгрегатыТССрезПоследних.СерияНоменклатуры
	|ГДЕ
	|	(НЕ уатАгрегатыТССрезПоследних.СерияНоменклатуры ЕСТЬ NULL )
	|	И уатАгрегатыТССрезПоследних.СостояниеАгрегата <> ЗНАЧЕНИЕ(Перечисление.уатСостоянияАгрегатов.Снято)"; 
	
	мЗапрос.УстановитьПараметр("Ссылка"       , ДокументСсылка);
	мЗапрос.УстановитьПараметр("МоментВремени", Новый Граница(ДокументСсылка.Дата, ВидГраницы.Исключая));
	
	МассивРезультатов = мЗапрос.ВыполнитьПакет();
	
	ВыборкаКонтроля = МассивРезультатов[1].Выбрать();
	
	Пока ВыборкаКонтроля.следующий() Цикл
		Если ВыборкаКонтроля.СерияНоменклатуры.ТипАгрегата = Справочники.уатТипыАгрегатов.Аккумулятор тогда
			ТекстНСТР = НСтр("en='Battery ""%1"" is already installed on the vehicle ""%2""';ru='Аккумулятор ""%1"" уже установлен на транспортном средстве ""%2""'");	
		ИначеЕсли ВыборкаКонтроля.СерияНоменклатуры.ТипАгрегата = Справочники.уатТипыАгрегатов.Шина тогда
			ТекстНСТР = НСтр("en='Tire ""%1"" already installed on vehicle ""%2""';ru='Шина ""%1"" уже установлена на транспортном средстве ""%2""'");
		Иначе
			ТекстНСТР = НСтр("en='Car part ""%1"" already installed on vehicle ""%2""';ru='Агрегат ""%1"" уже установлен на транспортном средстве ""%2""'");
		КонецЕсли;
		ТекстНСТР = СтрШаблон(ТекстНСТР, ВыборкаКонтроля.СерияНоменклатуры.СерийныйНомер, ВыборкаКонтроля.ТС);
		уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, Отказ, Заголовок);
	КонецЦикла;
	
КонецПроцедуры

// Получает дополнительные реквизиты для отображения в отчете "Реестр документов"
// 
// Возвращаемое значение:
//  Структура - доп. реквизитов
//
Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура("Информация", "Контрагент");
	Возврат Результат;
	
КонецФункции

// Функция формирует табличный документ с печатной формой КС-2
//
// Параметры:
//  МассивОбъектов	 - 	 - 
//  ОбъектыПечати	 - 	 - 
// 
// Возвращаемое значение:
//  Табличный - документ - печатная форма КС-2
//
Функция ПечатнаяФормаКС2(МассивОбъектов, ОбъектыПечати, Факсимиле = Ложь) Экспорт
	Перем Ошибки;
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_КС2";
	
	ПервыйДокумент = Истина;
	
	Для Каждого СсылкаНаОбъект Из МассивОбъектов Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		
		Макет = ПолучитьОбщийМакет("ПФ_MXL_КС2_стм");

		ОбластьМакета = ?(Факсимиле, Макет.ПолучитьОбласть("ЗаголовокФаксимиле"), Макет.ПолучитьОбласть("Заголовок"));
				
		Если Факсимиле Тогда
			ПодписиИФаксимиле = Новый Соответствие; // Ключ - имя каринки в области, Значение - имя реквизита
			ПодписиИФаксимиле.Вставить("Логотип", "ФайлЛоготип");
			уатОбщегоНазначения.ЗаполнитьФаксимилеВОбластиМакета(ОбластьМакета, СсылкаНаОбъект.Организация, ПодписиИФаксимиле, Ошибки);
		Конецесли;

		СписокТребуемыхПараметров	= "НаименованиеДляПечатныхФорм,ЮридическийАдрес,Телефоны";
		СведенияОбОбъекте		= уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(СсылкаНаОбъект.Организация, СсылкаНаОбъект.Дата);
		ПредставлениеПоставщика = уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(СведенияОбОбъекте, СписокТребуемыхПараметров);
		ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеПоставщика;
		
		СведенияОбОбъекте		= уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(СсылкаНаОбъект.Контрагент, СсылкаНаОбъект.Дата);
		ПредставлениеПолучателя = уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(СведенияОбОбъекте, СписокТребуемыхПараметров);
		
		ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеПолучателя;
		ОбластьМакета.Параметры.ОбъектСтроительства = СсылкаНаОбъект.ОбъектСтроительства;
		ОбластьМакета.Параметры.КодПоОКПО=СсылкаНаОбъект.Организация.КодПоОКПО;
		ОбластьМакета.Параметры.КодПоОКПОЗаказчика=СсылкаНаОбъект.Контрагент.КодПоОКПО;
		
		ОбластьМакета.Параметры.Заказчик = СсылкаНаОбъект.Контрагент;
		ОбластьМакета.Параметры.Подрядчик = СсылкаНаОбъект.Организация;
		ОбластьМакета.Параметры.Объект = СсылкаНаОбъект.ОбъектСтроительства;
		
		ОбластьМакета.Параметры.Дата=СсылкаНаОбъект.Дата;
		
		ПечатьПрефиксовВключена = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СсылкаНаОбъект.Организация, ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ВыводитьПрефиксПриПечати"));
		Если ПечатьПрефиксовВключена Тогда
			ОбластьМакета.Параметры.Номер = СсылкаНаОбъект.Номер;
		Иначе
			ОбластьМакета.Параметры.Номер = уатОбщегоНазначенияКлиентСервер.НомерДокументаНаПечать(СсылкаНаОбъект.Номер, Истина, Истина);
		КонецЕсли;
	
		ОбластьМакета.Параметры.ДатаНач=?(СсылкаНаОбъект.ДатаНач>'00010101',Формат(СсылкаНаОбъект.ДатаНач,"ДФ=""дд.ММ.гг """)+"г.","");
		ОбластьМакета.Параметры.ДатаКон=?(СсылкаНаОбъект.ДатаКон>'00010101',Формат(СсылкаНаОбъект.ДатаКон,"ДФ=""дд.ММ.гг """)+"г.","");
		
		Попытка    // если УАТ не объединено с типовыми конфигурациями
			Если СсылкаНаОбъект.ДоговорКонтрагента.Дата>'00010101' Тогда
				ОбластьМакета.Параметры.ДоговорДата="от "+Формат(СсылкаНаОбъект.ДоговорКонтрагента.Дата,"ДФ=""дд.ММ.гггг """)+"г.";
			Иначе
				ОбластьМакета.Параметры.ДоговорДата="";	
			КонецЕсли; 
			ОбластьМакета.Параметры.ДоговорНомер=СсылкаНаОбъект.ДоговорКонтрагента.Номер;
		Исключение
		КонецПопытки; 
		
		Если СсылкаНаОбъект.СверткаУслугРегл Тогда
			ИмяТЧУслуги = "УслугиРегл";
		Иначе
			ИмяТЧУслуги = "Услуги";
		КонецЕсли;
		
		Сумма     = СсылкаНаОбъект[ИмяТЧУслуги].Итог("Сумма");
		СуммаНДС  = СсылкаНаОбъект[ИмяТЧУслуги].Итог("СуммаНДС");
		СуммаСНДС = Сумма + ?(НЕ СсылкаНаОбъект.УчитыватьНДС ИЛИ СсылкаНаОбъект.СуммаВключаетНДС, 0, СуммаНДС);
		
		ОбластьМакета.Параметры.Сумма=уатОбщегоНазначенияТиповые.уатФорматСумм(СсылкаНаОбъект.СметнаяСтоимость);
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьСтроки = Макет.ПолучитьОбласть("Строка");
		НомерСтроки = 0;
		Для Каждого СтрокаТабличнойЧасти Из СсылкаНаОбъект[ИмяТЧУслуги] Цикл	
			НомерСтроки = НомерСтроки + 1;
			
			ОбластьСтроки.Параметры.Заполнить(СтрокаТабличнойЧасти);
			КоличествоОкр = Окр(СтрокаТабличнойЧасти.Количество, 3);
			ОбластьСтроки.Параметры.Количество = КоличествоОкр;
			ОбластьСтроки.Параметры.НомерСтроки = НомерСтроки;
			
			ТабДокумент.Вывести(ОбластьСтроки);
		КонецЦикла;
		
		ОбластьМакета 								= Макет.ПолучитьОбласть("Итого");
		ОбластьМакета.Параметры.Сумма				=уатОбщегоНазначенияТиповые.уатФорматСумм(Сумма);
		ТабДокумент.Вывести(ОбластьМакета);
		ОбластьМакета 								= Макет.ПолучитьОбласть("НаклРасх");
		ОбластьМакета.Параметры.НакладныеРасходы	=уатОбщегоНазначенияТиповые.уатФорматСумм(СсылкаНаОбъект.НакладныеРасходы);
		ТабДокумент.Вывести(ОбластьМакета);
		ОбластьМакета 								= Макет.ПолучитьОбласть("ПланНак");
		ОбластьМакета.Параметры.ПлановыеНакопления	=уатОбщегоНазначенияТиповые.уатФорматСумм(СсылкаНаОбъект.ПлановыеНакопления);
		ТабДокумент.Вывести(ОбластьМакета);
		ОбластьМакета 								= Макет.ПолучитьОбласть("НДС");
		ОбластьМакета.Параметры.СуммаНДС			=уатОбщегоНазначенияТиповые.уатФорматСумм(СуммаНДС);
		ТабДокумент.Вывести(ОбластьМакета);
		ОбластьМакета 								= Макет.ПолучитьОбласть("Всего");
		ОбластьМакета.Параметры.Сумма=уатОбщегоНазначенияТиповые.уатФорматСумм(СуммаСНДС+СсылкаНаОбъект.НакладныеРасходы+СсылкаНаОбъект.ПлановыеНакопления);
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета 								= ?(Факсимиле, Макет.ПолучитьОбласть("ПодвалФаксимиле"), Макет.ПолучитьОбласть("Подвал"));
		
		Руководители = уатОбщегоНазначенияТиповые.уатОтветственныеЛицаОрганизаций(СсылкаНаОбъект.Организация, СсылкаНаОбъект.Дата);
		
		ОбластьМакета.Параметры.ФИОРуководителя = Руководители.Руководитель;
		ОбластьМакета.Параметры.Должность = Руководители.РуководительДолжность;
		
		// заполняем должность и наименование заказчика
		Если ЗначениеЗаполнено(СсылкаНаОбъект.Контрагент.ОсновноеКонтактноеЛицо) Тогда
			ОбластьМакета.Параметры.ФИОЗаказчика = СсылкаНаОбъект.Контрагент.ОсновноеКонтактноеЛицо.Наименование;
			ОбластьМакета.Параметры.ДолжностьЗаказчика = СсылкаНаОбъект.Контрагент.ОсновноеКонтактноеЛицо.Должность;
		Иначе
			ОбластьМакета.Параметры.ФИОЗаказчика = СсылкаНаОбъект.Контрагент.Наименование;
		КонецЕсли;
		
		Если Факсимиле Тогда
			ПодписиИФаксимиле = Новый Соответствие; // Ключ - имя каринки в области, Значение - имя реквизита
			ПодписиИФаксимиле.Вставить("ПодписьРуководителя", ?(Руководители <> Неопределено, Руководители.РуководительСсылка, Справочники.ФизическиеЛица.ПустаяСсылка()));
			ПодписиИФаксимиле.Вставить("ПечатьОрганизации", "ФайлФаксимильнаяПечать");
			ПодписиИФаксимиле.Вставить("ПодписьЗаказчика", СсылкаНаОбъект.Контрагент.ОсновноеКонтактноеЛицо);
			уатОбщегоНазначения.ЗаполнитьФаксимилеВОбластиМакета(ОбластьМакета, СсылкаНаОбъект.Организация, ПодписиИФаксимиле, Ошибки);
		Конецесли;

		
		СуммаКПрописи = СуммаСНДС + СсылкаНаОбъект.НакладныеРасходы + СсылкаНаОбъект.ПлановыеНакопления;
		ОбластьМакета.Параметры.СуммаПрописью = уатОбщегоНазначенияТиповые.уатСформироватьСуммуПрописью(СуммаКПрописи, Константы.ВалютаРегламентированногоУчета.Получить());
		ТабДокумент.Вывести(ОбластьМакета);
		
		ТабДокумент.ОтображатьСетку = Ложь;
		ТабДокумент.Защита = Ложь;
		ТабДокумент.ТолькоПросмотр = Ложь;
		ТабДокумент.ОтображатьЗаголовки = Ложь;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, СсылкаНаОбъект);
		
	КонецЦикла;
	
	ТабДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабДокумент;                            
	
КонецФункции   // ПечатьКС-2

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Функция ПечатнаяФорма(МассивОбъектов, ОбъектыПечати, Факсимиле = Ложь)
	
	Перем Ошибки;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_РеализацияУслуг";
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ПервыйДокумент = Истина;
	
	Для Каждого ТекущийДокумент Из МассивОбъектов Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеализацияУслуг_АктОбОказанииУслуг";
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.уатРеализацияУслуг.ПФ_MXL_АктОбОказанииУслуг");
		
		ЗапросШапка = Новый Запрос;
		ЗапросШапка.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент.Ссылка);
		ЗапросШапка.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Номер,
		|	Дата,
		|	ДоговорКонтрагента,
		|	Контрагент КАК Получатель,
		|	Организация КАК Поставщик,
		|	Организация,
		|	СуммаДокумента,
		|	ВалютаДокумента,
		|	УчитыватьНДС,
		|	СуммаВключаетНДС
		|ИЗ
		|	Документ.уатРеализацияУслуг КАК РеализацияТоваровУслуг
		|
		|ГДЕ
		|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент";
		Шапка = ЗапросШапка.Выполнить().Выбрать();
		Шапка.Следующий();
		
		ЗапросУслуги = Новый Запрос;
		ЗапросУслуги.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент.Ссылка);
		ЗапросУслуги.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Номенклатура КАК ПростоНоменклатура,
		|	ВЫБОР
		|		КОГДА
		|			Номенклатура.ЕдиницаХраненияОстатков.Представление ЕСТЬ NULL
		|		ТОГДА
		|			Номенклатура.ЕдиницаИзмерения.Представление
		|		ИНАЧЕ
		|			Номенклатура.ЕдиницаХраненияОстатков.Представление
		|	КОНЕЦ КАК ЕдиницаИзмерения, 
		|	Содержание КАК Товар,
		|	Количество,
		|	Цена,
		|	Сумма,
		|	СтавкаНДС,
		|	СуммаНДС,
		|	ПроцентСкидкиНаценки КАК Скидка
		|ИЗ
		|	Документ.уатРеализацияУслуг." + ?(ТекущийДокумент.СверткаУслугРегл, "УслугиРегл", "Услуги") + " КАК РеализацияТоваровУслуг
		|
		|ГДЕ
		|	РеализацияТоваровУслуг.Ссылка = &ТекущийДокумент
		|";
		
		ТаблицаУслуги = ЗапросУслуги.Выполнить().Выгрузить();
		
		ОбластьМакета = ?(Факсимиле, Макет.ПолучитьОбласть("ЗаголовокСЛоготипом"), Макет.ПолучитьОбласть("Заголовок")); 
		ОбластьМакета.Параметры.ТекстЗаголовка = уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(Шапка, НСтр("en='Act';ru='Акт'"));
		Если Факсимиле Тогда
			ПодписиИФаксимиле = Новый Соответствие; // Ключ - имя каринки в области, Значение - имя реквизита
			ПодписиИФаксимиле.Вставить("Логотип", "ФайлЛоготип");
			уатОбщегоНазначения.ЗаполнитьФаксимилеВОбластиМакета(ОбластьМакета, Шапка.Организация, ПодписиИФаксимиле, Ошибки);
		КонецЕсли;

		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ПредставлениеПоставщика = уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(
			уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(
				Шапка.Организация,
				Шапка.Дата
			),
			"НаименованиеДляПечатныхФорм,ИНН,КПП,ЮридическийАдрес,Телефоны"
		);
		ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеПоставщика;
		ОбластьМакета.Параметры.Поставщик = Шапка.Поставщик;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		ПредставлениеПолучателя = уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(
			уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(
				Шапка.Получатель, 
				Шапка.Дата
			),
			"НаименованиеДляПечатныхФорм,ИНН,КПП,ЮридическийАдрес,Телефоны"
		);
		ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеПолучателя;
		ОбластьМакета.Параметры.Договор    = ТекущийДокумент.ДоговорКонтрагента;
		ОбластьМакета.Параметры.Получатель = Шапка.Получатель;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ЕстьСкидки = ТаблицаУслуги.Итог("Скидка") <> 0;
		
		// Вывести табличную часть
		Если ЕстьСкидки  Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицыСоСкидкой");
			ОбластьСтроки = Макет.ПолучитьОбласть("СтрокаСоСкидкой");
		Иначе
			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
			ОбластьСтроки = Макет.ПолучитьОбласть("Строка");
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		НомерСтроки = 0;
		
		Для Каждого СтрокаТабличнойЧасти Из ТаблицаУслуги Цикл
			НомерСтроки = НомерСтроки + 1;
			
			ОбластьСтроки.Параметры.Заполнить(СтрокаТабличнойЧасти);
			КоличествоОкр = Окр(СтрокаТабличнойЧасти.Количество, 3);
			ОбластьСтроки.Параметры.Количество = КоличествоОкр;
			ОбластьСтроки.Параметры.Товар = уатОбщегоНазначенияСервер.ПолучитьНаименованиеУслугиДляПечати(СтрокаТабличнойЧасти.ПростоНоменклатура,СтрокаТабличнойЧасти.Товар);
			ОбластьСтроки.Параметры.НомерСтроки = НомерСтроки;
			
			Если ЕстьСкидки Тогда
				
				Скидка = СтрокаТабличнойЧасти.Сумма / (100 - СтрокаТабличнойЧасти.Скидка) * СтрокаТабличнойЧасти.Скидка;
				ОбластьСтроки.Параметры.Скидка         = Скидка;
				ОбластьСтроки.Параметры.СуммаБезСкидки = уатОбщегоНазначенияТиповые.уатФорматСумм(СтрокаТабличнойЧасти.Сумма +
				Скидка);
				
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьСтроки);
		КонецЦикла;
		
		Если ТаблицаУслуги <> Неопределено Тогда
			Сумма    = ТаблицаУслуги.Итог("Сумма");
			СуммаНДС = ТаблицаУслуги.Итог("СуммаНДС");
		Иначе
			Сумма    = 0;
			СуммаНДС = 0;
		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		ОбластьМакета.Параметры.Всего = уатОбщегоНазначенияТиповые.уатФорматСумм(Сумма);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Если Шапка.УчитыватьНДС Тогда
			СтавкиНДС = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаУслуги, "СтавкаНДС", Истина);
			ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
			Если СуммаНДС <> 0 Тогда
				ДанныеПечатиНДС = уатОбщегоНазначенияТиповые.уатДанныеПечатиИтоговНДС(СуммаНДС, СтавкиНДС, Шапка.СуммаВключаетНДС, ":"); 
				ОбластьМакета.Параметры.НДС      = ДанныеПечатиНДС.НДС;
				ОбластьМакета.Параметры.ВсегоНДС = ДанныеПечатиНДС.ВсегоНДС;
			Иначе
				ДанныеПечатиНДС = уатОбщегоНазначенияТиповые.уатДанныеПечатиИтоговНДС(0, СтавкиНДС, Шапка.СуммаВключаетНДС, ":"); 
				ОбластьМакета.Параметры.НДС      = ДанныеПечатиНДС.НДС;
				ОбластьМакета.Параметры.ВсегоНДС = ДанныеПечатиНДС.ВсегоНДС;
			КонецЕсли;
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		СуммаКПрописи = Сумма + ?(НЕ Шапка.УчитыватьНДС ИЛИ Шапка.СуммаВключаетНДС, 0, СуммаНДС);
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего оказано услуг " + НомерСтроки
			+ ", на сумму " + уатОбщегоНазначенияТиповые.уатФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
		ОбластьМакета.Параметры.СуммаПрописью  = уатОбщегоНазначенияТиповые.уатСформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Руководители = уатОбщегоНазначенияТиповые.уатОтветственныеЛицаОрганизаций(Шапка.Организация, Шапка.Дата);
		
		ЗаместительПоПриказу          = Руководители.Руководитель;
		ДолжностьИНазваниеОрганизации = "" + Руководители.РуководительДолжность + " " + ПредставлениеПоставщика;
		
		ОбластьМакета = ?(Факсимиле, Макет.ПолучитьОбласть("ПодписиФаксимиле"), Макет.ПолучитьОбласть("Подписи"));
		ОбластьМакета.Параметры.ДолжностьИНазваниеОрганизации = ДолжностьИНазваниеОрганизации;
		ОбластьМакета.Параметры.ЗаместительПоПриказу          = ЗаместительПоПриказу;
		ОбластьМакета.Параметры.ОрганизацияЗаказчик           = ПредставлениеПолучателя;
		
		Если Факсимиле Тогда
			ПодписиИФаксимиле = Новый Соответствие; // Ключ - имя каринки в области, Значение - имя реквизита
			ПодписиИФаксимиле.Вставить("ПодписьРуководителя", ?(Руководители <> Неопределено, Руководители.РуководительСсылка, Справочники.ФизическиеЛица.ПустаяСсылка()));
			ПодписиИФаксимиле.Вставить("ПечатьОрганизации", "ФайлФаксимильнаяПечать");
			уатОбщегоНазначения.ЗаполнитьФаксимилеВОбластиМакета(ОбластьМакета, Шапка.Организация, ПодписиИФаксимиле, Ошибки);
		Конецесли;

		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ТекущийДокумент);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатнаяФорма()

Функция ПолучитьДанныеДляСчетовФактур(МассивОбъектов, ОбъектыПечати, Факсимиле = Ложь)
	
	Перем Ошибки;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ПервыйДокумент = Истина;
		
	Для Каждого ВыборкаДокументы Из МассивОбъектов Цикл
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Если ВыборкаДокументы.Дата >= Дата(2021, 07, 01) Тогда 
			ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_СчетФактура534";
			ТабличныйДокумент.ИмяПараметровПечати = "ПараметрыПечати_СчетФактура534";
			Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_СчетФактура534");
		ИначеЕсли ВыборкаДокументы.Дата >= Дата(2017, 10, 01) Тогда
			ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_СчетФактура981";
			ТабличныйДокумент.ИмяПараметровПечати = "ПараметрыПечати_СчетФактура981";
			Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_СчетФактура981");
			ИдентификаторГосКонтракта = НСтр("en='ID of state contract, contract (agreement) (if any):';ru='Идентификатор государственного контракта, договора (соглашения) (при наличии):'");
		Иначе
			ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_СчетФактура1137";
			ТабличныйДокумент.ИмяПараметровПечати = "ПараметрыПечати_СчетФактура1137";
			Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_СчетФактура1137");
			ИдентификаторГосКонтракта = НСтр("en='ID of the state contract, the contract (agreement):';ru='Идентификатор государственного контракта, договора (соглашения):'");
		КонецЕсли;
		
		// Шапка		
		ОбластьЗаголовок  = Макет.ПолучитьОбласть("Шапка");
		
		ПечатьПрефиксовВключена = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ВыборкаДокументы.Организация, ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ВыводитьПрефиксПриПечати"));
		
		Если ВыборкаДокументы.Дата >= Дата(2021, 07, 01) Тогда
			Если ПечатьПрефиксовВключена Тогда
				мНомерНаПечать = ВыборкаДокументы.Номер;
			Иначе
				мНомерНаПечать = уатОбщегоНазначенияКлиентСервер.НомерДокументаНаПечать(ВыборкаДокументы.Номер, Истина, Истина); 
			КонецЕсли;
			ОбластьЗаголовок.Параметры.Номер = мНомерНаПечать;
			ОбластьЗаголовок.Параметры.Дата = Формат(ВыборкаДокументы.Дата, "ДФ=""dd MMMM yyyy""");
			ОбластьЗаголовок.Параметры.НомерИсправления = "--";
			ОбластьЗаголовок.Параметры.ДатаИсправления = "--";
		Иначе	
			НомерСчетаФактуры = НСтр("en='Invoice number %1 from %2,';ru='Счет-фактура № %1 от %2 г.'");
			Если ПечатьПрефиксовВключена Тогда
				НомерСчетаФактуры = СтрШаблон(НомерСчетаФактуры, ВыборкаДокументы.Номер, Формат(ВыборкаДокументы.Дата, "ДФ=""dd MMMM yyyy"""));
			Иначе
				ТекНомер = уатОбщегоНазначенияКлиентСервер.НомерДокументаНаПечать(ВыборкаДокументы.Номер,Истина, Истина);
				НомерСчетаФактуры = СтрШаблон(НомерСчетаФактуры, ТекНомер, Формат(ВыборкаДокументы.Дата, "ДФ=""dd MMMM yyyy"""));
			КонецЕсли;
			ОбластьЗаголовок.Параметры.Номер = НомерСчетаФактуры;
			ОбластьЗаголовок.Параметры.НомерИсправления = НСтр("en='Correction № -- from --';ru='Исправление № -- от --'");
		КонецЕсли;
		
		// Документ отгрузки
		Если ВыборкаДокументы.Дата >= Дата(2021, 07, 01) Тогда
			ПерваяСтрокаСтрокаПоДокументуОтгрузки = 1;
			ПоследняяСтрокаПоДокументуОтгрузки = 1;
			ШаблонПодстрокиДокументаОбОтгрузке = "№ п/п %1 №%2 от %3";
			ДокументыОбОтгрузке = "";
			Если Не ВыборкаДокументы.СверткаУслугРегл Тогда
				ПоследняяСтрокаПоДокументуОтгрузки = ВыборкаДокументы.Услуги.Количество();
			Иначе 
				ПоследняяСтрокаПоДокументуОтгрузки = ВыборкаДокументы.УслугиРегл.Количество();
			КонецЕсли;
			Если ПерваяСтрокаСтрокаПоДокументуОтгрузки = ПоследняяСтрокаПоДокументуОтгрузки Тогда
				ДиапазонСтрок = "" + ПерваяСтрокаСтрокаПоДокументуОтгрузки;
			Иначе
				ДиапазонСтрок = "" + ПерваяСтрокаСтрокаПоДокументуОтгрузки + "-" + ПоследняяСтрокаПоДокументуОтгрузки;
			КонецЕсли;
			ДокументОтгрузки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПодстрокиДокументаОбОтгрузке,
			ДиапазонСтрок,
			мНомерНаПечать,
			Формат(ВыборкаДокументы.Дата, "ДЛФ='Д'") + НСтр("en='';ru=' г.'"));
			ОбластьЗаголовок.Параметры.ДокументыОбОтгрузке = ДокументОтгрузки;
		КонецЕсли;
				
		// Данные поставщика
		НаименованиеПоставщика = ""; 
		СписокТребуемыхПараметров	= "НаименованиеДляПечатныхФорм";
		СведенияОбОбъекте			= уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(ВыборкаДокументы.Организация);
		НаименованиеПоставщика		= уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(СведенияОбОбъекте, СписокТребуемыхПараметров);
		
		Если ВыборкаДокументы.Дата >= Дата(2021, 07, 01) Тогда
			ОбластьЗаголовок.Параметры.ПредставлениеПоставщика = НаименованиеПоставщика; 
		Иначе	
			ОбластьЗаголовок.Параметры.ПредставлениеПоставщика = НСтр("en='Seller: ';ru='Продавец: '") + НаименованиеПоставщика;
		КонецЕсли;

		АдресОрганизации = "";
		ВидКИ = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации;
		АдресОрганизации = уатОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформацию(ВыборкаДокументы.Организация, ВидКИ, ВыборкаДокументы.Дата);
		Если АдресОрганизации = "" Тогда 
			ВидКИ = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации;
			АдресОрганизации = уатОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформацию(ВыборкаДокументы.Организация, ВидКИ, ВыборкаДокументы.Дата);
		КонецЕсли;
		
		Если ВыборкаДокументы.Дата >= Дата(2021, 07, 01) Тогда
			ОбластьЗаголовок.Параметры.АдресПоставщика = ?(АдресОрганизации="", "--", АдресОрганизации);
			ОбластьЗаголовок.Параметры.ИННПоставщика   = "";
		Иначе
			ОбластьЗаголовок.Параметры.АдресПоставщика = НСтр("en='Address: ';ru='Адрес: '") + ?(АдресОрганизации="", "--", АдресОрганизации);
			ОбластьЗаголовок.Параметры.ИННПоставщика   = НСтр("en='TIN/RRC of seller: ';ru='ИНН/КПП продавца: '");
		КонецЕсли;
	
		Если Не ВыборкаДокументы.Организация.ИНН = "" И Не ВыборкаДокументы.Организация.КПП = "" Тогда 
			ОбластьЗаголовок.Параметры.ИННПоставщика = ОбластьЗаголовок.Параметры.ИННПоставщика + ВыборкаДокументы.Организация.ИНН + "/" + ВыборкаДокументы.Организация.КПП;
		ИначеЕсли Не ВыборкаДокументы.Организация.ИНН = "" Тогда 
			ОбластьЗаголовок.Параметры.ИННПоставщика = ОбластьЗаголовок.Параметры.ИННПоставщика + ВыборкаДокументы.Организация.ИНН;
		Иначе 
			ОбластьЗаголовок.Параметры.ИННПоставщика = ОбластьЗаголовок.Параметры.ИННПоставщика + "--";
		КонецЕсли;
		
		// Грузоотправитель и грузополучатель
		Если ВыборкаДокументы.Дата < Дата(2021, 07, 01) Тогда
			ОбластьЗаголовок.Параметры.ПредставлениеГрузоотправителя = НСтр("en='Consignor and his address: --';ru='Грузоотправитель и его адрес: --'");
			ОбластьЗаголовок.Параметры.ПредставлениеГрузополучателя  = НСтр("en='Consignee and his address: --';ru='Грузополучатель и его адрес: --'");
		Иначе
			ОбластьЗаголовок.Параметры.ПредставлениеГрузоотправителя = НСтр("en='--';ru='--'");
			ОбластьЗаголовок.Параметры.ПредставлениеГрузополучателя  = НСтр("en='--';ru='--'");
		КонецЕсли;
		
		// Данные документа-основания
		Если ВыборкаДокументы.Дата >= Дата(2021, 07, 01) Тогда
			Если ЗначениеЗаполнено(ВыборкаДокументы.НомерПлатежноРасчетногоДокумента) Тогда
				СтрПараметрыПоДокументу = ВыборкаДокументы.НомерПлатежноРасчетногоДокумента;
			Иначе
				СтрПараметрыПоДокументу = "--";
			КонецЕсли;
			
			СтрПараметрыПоДокументу = СтрПараметрыПоДокументу + " от ";
			
			Если ЗначениеЗаполнено(ВыборкаДокументы.ДатаПлатежноРасчетногоДокумента) Тогда
				СтрПараметрыПоДокументу = СтрПараметрыПоДокументу + ВыборкаДокументы.ДатаПлатежноРасчетногоДокумента;
			Иначе
				СтрПараметрыПоДокументу = СтрПараметрыПоДокументу + "--";
			КонецЕсли;
			
			ОбластьЗаголовок.Параметры.ПоДокументу = СтрПараметрыПоДокументу;
		ИначеЕсли ВыборкаДокументы.Дата < Дата(2021, 07, 01) Тогда
			ОбластьЗаголовок.Параметры.ПоДокументу = НСтр("en='To payment document №    from    ';ru='К платежно-расчетному документу №    от    '");
		КонецЕсли;
		
		// Данные покупателя
		НаименованиеПокупателя = ""; 
		НаименованиеПокупателя = ВыборкаДокументы.Контрагент.НаименованиеПолное;
		Если НаименованиеПокупателя = "" Тогда 
			НаименованиеПокупателя = ВыборкаДокументы.Контрагент.Наименование;
		КонецЕсли;
		
		Если ВыборкаДокументы.Дата >= Дата(2021, 07, 01) Тогда
			ОбластьЗаголовок.Параметры.ПредставлениеПокупателя = НаименованиеПокупателя;
		Иначе
			ОбластьЗаголовок.Параметры.ПредставлениеПокупателя = НСтр("en='Buyer: ';ru='Покупатель: '") + НаименованиеПокупателя;
		КонецЕсли;
	
		АдресКонтрагента = "";
		ВидКИ = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
		АдресКонтрагента = уатОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформацию(ВыборкаДокументы.Контрагент, ВидКИ, ВыборкаДокументы.Дата);
		Если АдресКонтрагента = "" Тогда 
			ВидКИ = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
			АдресКонтрагента = уатОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформацию(ВыборкаДокументы.Контрагент, ВидКИ, ВыборкаДокументы.Дата);
		КонецЕсли;
		
		Если ВыборкаДокументы.Дата >= Дата(2021, 07, 01) Тогда
			ОбластьЗаголовок.Параметры.АдресПокупателя = ?(АдресКонтрагента="", "--", АдресКонтрагента);
			ОбластьЗаголовок.Параметры.ИННПокупателя   = "";
		Иначе	
			ОбластьЗаголовок.Параметры.АдресПокупателя = НСтр("en='Address: ';ru='Адрес: '") + ?(АдресКонтрагента="", "--", АдресКонтрагента);
			ОбластьЗаголовок.Параметры.ИННПокупателя   = НСтр("en='TIN/RRC of buyer: ';ru='ИНН/КПП покупателя: '");
		КонецЕсли;
	
		//ОбластьЗаголовок.Параметры.ИННПокупателя   = "ИНН/КПП покупателя: " + ?(ВыборкаДокументы.КонтрагентИНН="", "--", ВыборкаДокументы.КонтрагентИНН);
		Если Не ВыборкаДокументы.Контрагент.ИНН = "" И Не ВыборкаДокументы.Контрагент.КПП = "" Тогда 
			ОбластьЗаголовок.Параметры.ИННПокупателя = ОбластьЗаголовок.Параметры.ИННПокупателя + ВыборкаДокументы.Контрагент.ИНН + "/" + ВыборкаДокументы.Контрагент.КПП;
		ИначеЕсли Не ВыборкаДокументы.Контрагент.ИНН = "" Тогда 
			ОбластьЗаголовок.Параметры.ИННПокупателя = ОбластьЗаголовок.Параметры.ИННПокупателя + ВыборкаДокументы.Контрагент.ИНН;
		Иначе 
			ОбластьЗаголовок.Параметры.ИННПокупателя = ОбластьЗаголовок.Параметры.ИННПокупателя + "--";
		КонецЕсли;
		
		Если ВыборкаДокументы.Дата < Дата(2021, 07, 01) Тогда
			ОбластьЗаголовок.Параметры.Валюта = НСтр("en='Currency: title, code ';ru='Валюта: наименование, код '") 
			+ СокрЛП(ВыборкаДокументы.ВалютаДокумента.НаименованиеПолное) + ", "
			+ СокрЛП(ВыборкаДокументы.ВалютаДокумента.Код);
		Иначе
			ОбластьЗаголовок.Параметры.Валюта = СокрЛП(ВыборкаДокументы.ВалютаДокумента.НаименованиеПолное) + ", "
			+ СокрЛП(ВыборкаДокументы.ВалютаДокумента.Код);
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		Если ВыборкаДокументы.Дата < Дата(2021, 07, 01) Тогда
			ОбластьИдентификаторГосКонтракта = Макет.ПолучитьОбласть("ИдентификаторГосКонтракта");
			ОбластьИдентификаторГосКонтракта.Параметры.ИдентификаторГосКонтракта   = ИдентификаторГосКонтракта;
			ТабличныйДокумент.Вывести(ОбластьИдентификаторГосКонтракта);
		КонецЕсли;
		
		// Заголовок таблицы
		ОбластьЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
		
		// Построчные данные
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДокСсылка", ВыборкаДокументы);
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатРеализацияУслугУслуги.Номенклатура КАК Товар,
		|	уатРеализацияУслугУслуги.Содержание КАК ТоварНаименование,
		|	уатРеализацияУслугУслуги.Цена КАК Цена,
		|	уатРеализацияУслугУслуги.Количество КАК Количество,
		|	уатРеализацияУслугУслуги.Сумма КАК Сумма,
		|	уатРеализацияУслугУслуги.СтавкаНДС КАК СтавкаНДС,
		|	уатРеализацияУслугУслуги.СуммаНДС КАК СуммаНДС,
		|	уатРеализацияУслугУслуги.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	уатРеализацияУслугУслуги.Сумма + ВЫБОР
		|		КОГДА НЕ уатРеализацияУслугУслуги.Ссылка.УчитыватьНДС
		|			ИЛИ уатРеализацияУслугУслуги.Ссылка.СуммаВключаетНДС
		|			ТОГДА 0
		|		ИНАЧЕ уатРеализацияУслугУслуги.СуммаНДС
		|	КОНЕЦ КАК Всего		
		|ИЗ
		|	Документ.уатРеализацияУслуг." + ?(ВыборкаДокументы.СверткаУслугРегл, "УслугиРегл", "Услуги") + " КАК уатРеализацияУслугУслуги
		|ГДЕ
		|	уатРеализацияУслугУслуги.Ссылка = &ДокСсылка";
		
		ВыборкаДетально = Запрос.Выполнить().Выбрать();
		
		ИтогоВсего       = 0;
		ИтогоСуммаНДС    = 0;
		ИтогоСуммаБезНДС = 0;
		ТекстПустойПоказатель = "--";
		
		НомерСтроки = 0;
		НомерЛиста  = 1;
		КоличествоСтраниц = 1;
		КоличествоСтрок   = ВыборкаДетально.Количество();
		
		ПустыеПоляУПД = Новый Структура();
		ПустыеПоляУПД.Вставить("Акциз",                  "без акциза");
		ПустыеПоляУПД.Вставить("СтавкаНДС",              Перечисления.СтавкиНДС.ПустаяСсылка());
		ПустыеПоляУПД.Вставить("НомерГТД",               Справочники.НомераГТД.ПустаяСсылка());
		ПустыеПоляУПД.Вставить("ПредставлениеГТД",       ТекстПустойПоказатель);
		ПустыеПоляУПД.Вставить("СтранаПроисхождения",    Справочники.СтраныМира.ПустаяСсылка());
		ПустыеПоляУПД.Вставить("СтранаПроисхожденияКод", ТекстПустойПоказатель);
		ПустыеПоляУПД.Вставить("ПредставлениеСтраны",    ТекстПустойПоказатель);
		Пока ВыборкаДетально.Следующий() Цикл 
			НомерСтроки   = НомерСтроки + 1;
			ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
			
			Если ВыборкаДокументы.Дата >= Дата(2021, 07, 01) Тогда
				ОбластьСтрока.Параметры.НомерСтроки = НомерСтроки;
			КонецЕсли;
		
			ЗаполнитьЗначенияСвойств(ОбластьСтрока.Параметры, ПустыеПоляУПД);
			
			Если ВыборкаДетально.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
				ОбластьСтрока.Параметры.СтавкаНДС = ВыборкаДетально.СтавкаНДС;
				ОбластьСтрока.Параметры.СуммаНДС  = 0;
			ИначеЕсли ВыборкаДетально.СуммаНДС = 0 Тогда
				ОбластьСтрока.Параметры.СтавкаНДС = "без НДС";
				ОбластьСтрока.Параметры.СуммаНДС  = "без НДС";
			Иначе
				ОбластьСтрока.Параметры.СтавкаНДС = ВыборкаДетально.СтавкаНДС;
				ОбластьСтрока.Параметры.СуммаНДС  = СокрЛП(Формат(ВыборкаДетально.СуммаНДС, "ЧЦ=15; ЧДЦ=2"));
			КонецЕсли; 
			
			Если ВыборкаДокументы.СуммаВключаетНДС Тогда 
				СуммаБезНДС = ВыборкаДетально.Всего - ВыборкаДетально.СуммаНДС;
				ЦенаБезНДС  = СуммаБезНДС/ВыборкаДетально.Количество;
				
				ИтогоСуммаБезНДС = ИтогоСуммаБезНДС + СуммаБезНДС;
				
				ОбластьСтрока.Параметры.Цена      = СокрЛП(Формат(ЦенаБезНДС, "ЧЦ=15; ЧДЦ=2"));
				ОбластьСтрока.Параметры.Стоимость = СокрЛП(Формат(СуммаБезНДС, "ЧЦ=15; ЧДЦ=2"));
			Иначе 
				ОбластьСтрока.Параметры.Цена      = СокрЛП(Формат(ВыборкаДетально.Цена, "ЧЦ=15; ЧДЦ=2"));
				ОбластьСтрока.Параметры.Стоимость = СокрЛП(Формат(ВыборкаДетально.Сумма, "ЧЦ=15; ЧДЦ=2"));
				
				ИтогоСуммаБезНДС = ИтогоСуммаБезНДС + ВыборкаДетально.Сумма;
			КонецЕсли;
			
			ОбластьСтрока.Параметры.ТоварНаименование   = уатОбщегоНазначенияСервер.ПолучитьНаименованиеУслугиДляПечати(ВыборкаДетально.Товар, ВыборкаДетально.ТоварНаименование);
			
			Если ЗначениеЗаполнено(ВыборкаДетально.ЕдиницаИзмерения) Тогда
				ОбластьСтрока.Параметры.ЕдиницаИзмеренияКод = ВыборкаДетально.ЕдиницаИзмерения.Код;
				ОбластьСтрока.Параметры.ЕдиницаИзмерения    = ВыборкаДетально.ЕдиницаИзмерения.Наименование;
				ОбластьСтрока.Параметры.Количество          = ВыборкаДетально.Количество;
			Иначе
				ОбластьСтрока.Параметры.ЕдиницаИзмеренияКод = "--";
				ОбластьСтрока.Параметры.ЕдиницаИзмерения    = "--";
				ОбластьСтрока.Параметры.Количество          = "--";
				ОбластьСтрока.Параметры.Цена                = "--";
			КонецЕсли;
			
			ОбластьСтрока.Параметры.Акциз               = "без акциза";
			ОбластьСтрока.Параметры.Всего               = СокрЛП(Формат(ВыборкаДетально.Всего, "ЧЦ=15; ЧДЦ=2"));
			
			Если НЕ уатОбщегоНазначения.ПроверитьВыводСчетаФактурыНаСтраницу(ТабличныйДокумент, ОбластьСтрока, (НомерСтроки = КоличествоСтрок), Макет, НомерЛиста, НомерСчетаФактуры) Тогда
				КоличествоСтраниц = КоличествоСтраниц + 1;
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьСтрока);

			ИтогоВсего = ИтогоВсего + ВыборкаДетально.Всего;
			ИтогоСуммаНДС = ИтогоСуммаНДС + ВыборкаДетально.СуммаНДС;
		КонецЦикла;
		
		// Итоги таблицы
		ОбластьИтого = Макет.ПолучитьОбласть("Итого");
		Если ИтогоСуммаНДС = 0 Тогда 
			ОбластьИтого.Параметры.ИтогоСуммаНДС = "--";
		Иначе 
			ОбластьИтого.Параметры.ИтогоСуммаНДС = СокрЛП(Формат(ИтогоСуммаНДС, "ЧЦ=15; ЧДЦ=2"));
		КонецЕсли;
		ОбластьИтого.Параметры.ИтогоСтоимость = ИтогоСуммаБезНДС;
		ОбластьИтого.Параметры.ИтогоВсего = СокрЛП(Формат(ИтогоВсего, "ЧЦ=15; ЧДЦ=2"));
		
		ТабличныйДокумент.Вывести(ОбластьИтого);
		
		// Подвал
		ОбластьПодвал = ?(Факсимиле, Макет.ПолучитьОбласть("ПодвалФаксимиле"), Макет.ПолучитьОбласть("Подвал"));
		
		Если ВыборкаДокументы.Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда 
			Руководители = уатОбщегоНазначенияТиповые.уатОтветственныеЛицаОрганизаций(ВыборкаДокументы.Организация, ВыборкаДокументы.Дата);
			Если Руководители <> Неопределено Тогда
				ОбластьПодвал.Параметры.ФИОРуководителя       = Руководители.Руководитель;
				ОбластьПодвал.Параметры.ФИОГлавногоБухгалтера = Руководители.ГлавныйБухгалтер;
			КонецЕсли;
		Иначе 
			СтрокаСвидетельства = "свидетельство " + СокрЛП(Строка(ВыборкаДокументы.Организация.СвидетельствоСерияНомер)) 
				+ " от " + СокрЛП(Формат(ВыборкаДокументы.Организация.СвидетельствоДатаВыдачи, "ДФ=dd.MM.yyyy; ДП=-"));
			
			ОбластьПодвал.Параметры.Свидетельство = СтрокаСвидетельства;
			ОбластьПодвал.Параметры.ФИОПБОЮЛ      = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ВыборкаДокументы.Организация.ИндивидуальныйПредприниматель);
		КонецЕсли;
		
		Если Факсимиле Тогда
			ПодписиИФаксимиле = Новый Соответствие;
			ПодписиИФаксимиле.Вставить("ПодписьРуководителя", ?(Руководители <> Неопределено, Руководители.РуководительСсылка, Справочники.ФизическиеЛица.ПустаяСсылка()));
			ПодписиИФаксимиле.Вставить("ПодписьБухгалтера",   ?(Руководители <> Неопределено, Руководители.ГлавныйБухгалтерСсылка, Справочники.ФизическиеЛица.ПустаяСсылка()));
			ПодписиИФаксимиле.Вставить("ПодписьПредпринемателя", ВыборкаДокументы.Организация.ИндивидуальныйПредприниматель);
			уатОбщегоНазначения.ЗаполнитьФаксимилеВОбластиМакета(ОбластьПодвал, ВыборкаДокументы.Организация, ПодписиИФаксимиле, Ошибки);
		Конецесли;

		
		ТабличныйДокумент.Вывести(ОбластьПодвал);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаДокументы.Ссылка);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб        = Истина;
	ТабличныйДокумент.ПолеСверху         = 10;
	ТабличныйДокумент.ПолеСнизу          = 10;
	ТабличныйДокумент.ПолеСлева          = 10;
	ТабличныйДокумент.ПолеСправа         = 10;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПолучитьДанныеДляСчетовФактур()

Функция ПечатнаяФормаУПД(МассивОбъектов, ОбъектыПечати, Факсимиле = Ложь)
	Перем Ошибки;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	ПервыйДокумент = Истина;
		
	Для Каждого ВыборкаДокументы Из МассивОбъектов Цикл
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Если ВыборкаДокументы.Дата >= Дата(2021, 07, 01) Тогда	
			ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_УПДСтатус1_534";
			ТабличныйДокумент.ИмяПараметровПечати = "ПараметрыПечати_УПДСтатус1_534";
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.уатРеализацияУслуг.ПФ_MXL_УниверсальныйПередаточныйДокумент534");
		ИначеЕсли ВыборкаДокументы.Дата >= Дата(2017, 10, 01) Тогда
			ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_УПДСтатус1_981";
			ТабличныйДокумент.ИмяПараметровПечати = "ПараметрыПечати_УПДСтатус1_981";
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.уатРеализацияУслуг.ПФ_MXL_УниверсальныйПередаточныйДокумент981"); 
		Иначе
			ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_УПДСтатус1";
			ТабличныйДокумент.ИмяПараметровПечати = "ПараметрыПечати_УПДСтатус1";
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.уатРеализацияУслуг.ПФ_MXL_УниверсальныйПередаточныйДокумент");
		КонецЕсли;
		
		// Шапка
		ОбластьЗаголовок = Макет.ПолучитьОбласть("Шапка");
		
		ПечатьПрефиксовВключена = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ВыборкаДокументы.Организация, ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ВыводитьПрефиксПриПечати"));
		Если ПечатьПрефиксовВключена Тогда
			мНомерНаПечать = ВыборкаДокументы.Номер;
		Иначе 
			мНомерНаПечать = уатОбщегоНазначенияКлиентСервер.НомерДокументаНаПечать(ВыборкаДокументы.Номер, Истина, Истина); 
		КонецЕсли;
		
		ОбластьЗаголовок.Параметры.Номер = мНомерНаПечать;
		ОбластьЗаголовок.Параметры.Дата = Формат(ВыборкаДокументы.Дата, "ДФ=""dd MMMM yyyy""");
		ОбластьЗаголовок.Параметры.НомерИсправления = "--";
		ОбластьЗаголовок.Параметры.ДатаИсправления  = "--";
		
		// Статус
		Если Не ЗначениеЗаполнено(ВыборкаДокументы.СтатусУПД) Тогда
			СтатусУПД = "1";
		Иначе
			СтатусУПД = ВыборкаДокументы.СтатусУПД;
		КонецЕсли;
		
		ОбластьЗаголовок.Параметры.СтатусУПД = СтатусУПД;
		
		// Документ отгрузки
		Если ВыборкаДокументы.Дата >= Дата(2021, 07, 01) Тогда
			ПерваяСтрокаСтрокаПоДокументуОтгрузки = 1;
			ПоследняяСтрокаПоДокументуОтгрузки = 1;
			ШаблонПодстрокиДокументаОбОтгрузке = "№ п/п %1 №%2 от %3";
			ДокументыОбОтгрузке = "";
			Если Не ВыборкаДокументы.СверткаУслугРегл Тогда
				ПоследняяСтрокаПоДокументуОтгрузки = ВыборкаДокументы.Услуги.Количество();
			Иначе
				ПоследняяСтрокаПоДокументуОтгрузки = ВыборкаДокументы.УслугиРегл.Количество();
			КонецЕсли;
			Если ПерваяСтрокаСтрокаПоДокументуОтгрузки = ПоследняяСтрокаПоДокументуОтгрузки Тогда
				ДиапазонСтрок = "" + ПерваяСтрокаСтрокаПоДокументуОтгрузки;
			Иначе
				ДиапазонСтрок = "" + ПерваяСтрокаСтрокаПоДокументуОтгрузки + "-" + ПоследняяСтрокаПоДокументуОтгрузки;
			КонецЕсли;
			ДокументОтгрузки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонПодстрокиДокументаОбОтгрузке,
			ДиапазонСтрок,
			мНомерНаПечать,
			Формат(ВыборкаДокументы.Дата, "ДЛФ='Д'") + НСтр("en='';ru=' г.'"));
			ОбластьЗаголовок.Параметры.ДокументыОбОтгрузке = ДокументОтгрузки;
		КонецЕсли;
		
		// Данные поставщика
		НаименованиеПоставщика = "";
		СписокТребуемыхПараметров	= "НаименованиеДляПечатныхФорм";
		СведенияОбОбъекте			= уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(ВыборкаДокументы.Организация);
		НаименованиеПоставщика		= уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(СведенияОбОбъекте, СписокТребуемыхПараметров);
		
		ОбластьЗаголовок.Параметры.ПредставлениеПоставщика = НаименованиеПоставщика;
		АдресОрганизации = "";
		ВидКИ = Справочники.ВидыКонтактнойИнформации.ЮрАдресОрганизации;
		АдресОрганизации = уатОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформацию(ВыборкаДокументы.Организация, ВидКИ, ВыборкаДокументы.Дата);
		Если АдресОрганизации = "" Тогда 
			ВидКИ = Справочники.ВидыКонтактнойИнформации.ФактАдресОрганизации;
			АдресОрганизации = уатОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформацию(ВыборкаДокументы.Организация, ВидКИ, ВыборкаДокументы.Дата);
		КонецЕсли;
		ОбластьЗаголовок.Параметры.АдресПоставщика = ?(АдресОрганизации="", "--", АдресОрганизации);
		Если Не ВыборкаДокументы.Организация.ИНН = "" И Не ВыборкаДокументы.Организация.КПП = "" Тогда 
			ОбластьЗаголовок.Параметры.ИННПоставщика = ВыборкаДокументы.Организация.ИНН + "/" + ВыборкаДокументы.Организация.КПП;
		ИначеЕсли Не ВыборкаДокументы.Организация.ИНН = "" Тогда 
			ОбластьЗаголовок.Параметры.ИННПоставщика = ВыборкаДокументы.Организация.ИНН;
		Иначе 
			ОбластьЗаголовок.Параметры.ИННПоставщика = "--";
		КонецЕсли;
		
		// Грузоотправитель и грузополучатель
		ОбластьЗаголовок.Параметры.ПредставлениеГрузоотправителя = "--";
		ОбластьЗаголовок.Параметры.ПредставлениеГрузополучателя  = "--";
		
		// Данные документа-основания
		Если ЗначениеЗаполнено(ВыборкаДокументы.НомерПлатежноРасчетногоДокумента) Тогда
			СтрПараметрыПоДокументу = ВыборкаДокументы.НомерПлатежноРасчетногоДокумента;
		Иначе
			СтрПараметрыПоДокументу = "--";
		КонецЕсли;
		
		СтрПараметрыПоДокументу = СтрПараметрыПоДокументу + " от ";
		
		Если ЗначениеЗаполнено(ВыборкаДокументы.ДатаПлатежноРасчетногоДокумента) Тогда
			СтрПараметрыПоДокументу = СтрПараметрыПоДокументу + ВыборкаДокументы.ДатаПлатежноРасчетногоДокумента;
		Иначе
			СтрПараметрыПоДокументу = СтрПараметрыПоДокументу + "--";
		КонецЕсли;
		
		ОбластьЗаголовок.Параметры.ПоДокументу = СтрПараметрыПоДокументу;
				
		// Данные покупателя
		НаименованиеПокупателя = ""; 
		НаименованиеПокупателя = ВыборкаДокументы.Контрагент.НаименованиеПолное;
		Если НаименованиеПокупателя = "" Тогда 
			НаименованиеПокупателя = ВыборкаДокументы.Контрагент.Наименование;
		КонецЕсли;
		ОбластьЗаголовок.Параметры.ПредставлениеПокупателя = НаименованиеПокупателя;
		АдресКонтрагента = "";
		ВидКИ = Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента;
		АдресКонтрагента = уатОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформацию(ВыборкаДокументы.Контрагент, ВидКИ, ВыборкаДокументы.Дата);
		Если АдресКонтрагента = "" Тогда 
			ВидКИ = Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента;
			АдресКонтрагента = уатОбщегоНазначенияСервер.ПолучитьКонтактнуюИнформацию(ВыборкаДокументы.Контрагент, ВидКИ, ВыборкаДокументы.Дата);
		КонецЕсли;
		ОбластьЗаголовок.Параметры.АдресПокупателя = ?(АдресКонтрагента="", "--", АдресКонтрагента);
		
		Если Не ВыборкаДокументы.Контрагент.ИНН = "" И Не ВыборкаДокументы.Контрагент.КПП = "" Тогда 
			ОбластьЗаголовок.Параметры.ИННПокупателя = ВыборкаДокументы.Контрагент.ИНН + "/" + ВыборкаДокументы.Контрагент.КПП;
		ИначеЕсли Не ВыборкаДокументы.Контрагент.ИНН = "" Тогда 
			ОбластьЗаголовок.Параметры.ИННПокупателя = ВыборкаДокументы.Контрагент.ИНН;
		Иначе 
			ОбластьЗаголовок.Параметры.ИННПокупателя = "--";
		КонецЕсли;
		
		ОбластьЗаголовок.Параметры.Валюта = СокрЛП(ВыборкаДокументы.ВалютаДокумента.НаименованиеПолное) + ", "
			+ СокрЛП(ВыборкаДокументы.ВалютаДокумента.Код);
		
		ТабличныйДокумент.Вывести(ОбластьЗаголовок);
		
		Если ВыборкаДокументы.Дата < Дата (2021, 07, 01) Тогда
			ОбластьИдентификаторГосКонтракта = Макет.ПолучитьОбласть("ИдентификаторГосКонтракта");
			ТабличныйДокумент.Вывести(ОбластьИдентификаторГосКонтракта);
		КонецЕсли;
		
		// Заголовок таблицы
		ОбластьЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ТабличныйДокумент.Вывести(ОбластьЗаголовокТаблицы);
		
		// Построчные данные
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДокСсылка", ВыборкаДокументы);
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатРеализацияУслугУслуги.Номенклатура.Код КАК ТоварКод,
		|	уатРеализацияУслугУслуги.Номенклатура КАК Товар,
		|	уатРеализацияУслугУслуги.Содержание КАК ТоварНаименование,
		|	уатРеализацияУслугУслуги.Цена КАК Цена,
		|	уатРеализацияУслугУслуги.Количество КАК Количество,
		|	уатРеализацияУслугУслуги.Сумма КАК Сумма,
		|	уатРеализацияУслугУслуги.СтавкаНДС КАК СтавкаНДС,
		|	уатРеализацияУслугУслуги.СуммаНДС КАК СуммаНДС,
		|	уатРеализацияУслугУслуги.Номенклатура.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВЫБОР
		|		КОГДА уатРеализацияУслугУслуги.Ссылка.СуммаВключаетНДС
		|			ТОГДА уатРеализацияУслугУслуги.Сумма
		|		ИНАЧЕ уатРеализацияУслугУслуги.Сумма + уатРеализацияУслугУслуги.СуммаНДС
		|	КОНЕЦ КАК Всего,
		|	уатРеализацияУслугУслуги.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	Документ.уатРеализацияУслуг." + ?(ВыборкаДокументы.СверткаУслугРегл, "УслугиРегл", "Услуги") + " КАК уатРеализацияУслугУслуги
		|ГДЕ
		|	уатРеализацияУслугУслуги.Ссылка = &ДокСсылка";
				
		ВыборкаДетально = Запрос.Выполнить().Выбрать();
		КоличествоСтраниц = 1;
		
		ИтогоВсего = 0;
		ИтогоСуммаНДС = 0;
		ИтогоСуммаБезНДС = 0;
		
		НомерСтроки = 0;
		НомерЛиста = 1;
		КоличествоСтрок = ВыборкаДетально.Количество();
		НомерСчетаФактуры = "Универсальный передаточный документ № " + ВыборкаДокументы.Номер + " от " + Формат(ВыборкаДокументы.Дата, "ДФ=""dd MMMM yyyy""");
		ТекстПустойПоказатель = "--";
		
		ПустыеПоляУПД = Новый Структура();
		ПустыеПоляУПД.Вставить("Акциз",                  "без акциза");
		ПустыеПоляУПД.Вставить("СтавкаНДС",              Перечисления.СтавкиНДС.ПустаяСсылка());
		ПустыеПоляУПД.Вставить("НомерГТД",               Справочники.НомераГТД.ПустаяСсылка());
		ПустыеПоляУПД.Вставить("ПредставлениеГТД",       ТекстПустойПоказатель);
		ПустыеПоляУПД.Вставить("СтранаПроисхождения",    Справочники.СтраныМира.ПустаяСсылка());
		ПустыеПоляУПД.Вставить("СтранаПроисхожденияКод", ТекстПустойПоказатель);
		ПустыеПоляУПД.Вставить("ПредставлениеСтраны",    ТекстПустойПоказатель);
		ПустыеПоляУПД.Вставить("ТоварКодТНВЭД",          ТекстПустойПоказатель);

		Пока ВыборкаДетально.Следующий() Цикл 
			НомерСтроки = НомерСтроки + 1;
			ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
			ЗаполнитьЗначенияСвойств(ОбластьСтрока.Параметры, ПустыеПоляУПД);

			Если ВыборкаДетально.СтавкаНДС = Перечисления.СтавкиНДС.НДС0 Тогда
				ОбластьСтрока.Параметры.СтавкаНДС = ВыборкаДетально.СтавкаНДС;
				ОбластьСтрока.Параметры.СуммаНДС  = 0;
			ИначеЕсли ВыборкаДетально.СуммаНДС = 0 Тогда
				ОбластьСтрока.Параметры.СтавкаНДС = "без НДС";
				ОбластьСтрока.Параметры.СуммаНДС  = "без НДС";
			Иначе
				ОбластьСтрока.Параметры.СтавкаНДС = ВыборкаДетально.СтавкаНДС;
				ОбластьСтрока.Параметры.СуммаНДС  = СокрЛП(Формат(ВыборкаДетально.СуммаНДС, "ЧЦ=15; ЧДЦ=2"));
			КонецЕсли; 
			
			Если ВыборкаДокументы.СуммаВключаетНДС Тогда 
				СуммаБезНДС = ВыборкаДетально.Всего - ВыборкаДетально.СуммаНДС;
				ЦенаБезНДС  = СуммаБезНДС/ВыборкаДетально.Количество;
				
				ИтогоСуммаБезНДС = ИтогоСуммаБезНДС + СуммаБезНДС;
				
				ОбластьСтрока.Параметры.Цена      = СокрЛП(Формат(ЦенаБезНДС, "ЧЦ=15; ЧДЦ=2"));
				ОбластьСтрока.Параметры.Стоимость = СокрЛП(Формат(СуммаБезНДС, "ЧЦ=15; ЧДЦ=2"));
			Иначе 
				ОбластьСтрока.Параметры.Цена      = СокрЛП(Формат(ВыборкаДетально.Цена, "ЧЦ=15; ЧДЦ=2"));
				ОбластьСтрока.Параметры.Стоимость = СокрЛП(Формат(ВыборкаДетально.Сумма, "ЧЦ=15; ЧДЦ=2"));
				
				ИтогоСуммаБезНДС = ИтогоСуммаБезНДС + ВыборкаДетально.Сумма;
			КонецЕсли;
			ОбластьСтрока.Параметры.НомерСтроки         = НомерСтроки;
			ОбластьСтрока.Параметры.ТоварКод            = ВыборкаДетально.ТоварКод;
			ОбластьСтрока.Параметры.ТоварНаименование   = уатОбщегоНазначенияСервер.ПолучитьНаименованиеУслугиДляПечати(ВыборкаДетально.Товар, ВыборкаДетально.ТоварНаименование);
			
			Если ЗначениеЗаполнено(ВыборкаДетально.ЕдиницаИзмерения) Тогда
				ОбластьСтрока.Параметры.ЕдиницаИзмеренияКод = ВыборкаДетально.ЕдиницаИзмерения.Код;
				ОбластьСтрока.Параметры.ЕдиницаИзмерения    = ВыборкаДетально.ЕдиницаИзмерения.Наименование;
				ОбластьСтрока.Параметры.Количество          = СокрЛП(Формат(ВыборкаДетально.Количество, "ЧЦ=15; ЧДЦ=3"));
			Иначе
				ОбластьСтрока.Параметры.ЕдиницаИзмеренияКод = "--";
				ОбластьСтрока.Параметры.ЕдиницаИзмерения    = "--";
				ОбластьСтрока.Параметры.Количество          = "--";
				ОбластьСтрока.Параметры.Цена                = "--";
			КонецЕсли;

			ОбластьСтрока.Параметры.Акциз               = "без акциза";
			ОбластьСтрока.Параметры.Всего               = СокрЛП(Формат(ВыборкаДетально.Всего, "ЧЦ=15; ЧДЦ=2"));
			
			Если НЕ уатОбщегоНазначения.ПроверитьВыводСчетаФактурыНаСтраницу(ТабличныйДокумент, ОбластьСтрока, (НомерСтроки = КоличествоСтрок), Макет, НомерЛиста, НомерСчетаФактуры, Истина) Тогда
				КоличествоСтраниц = КоличествоСтраниц + 1;
			КонецЕсли;
		
			ТабличныйДокумент.Вывести(ОбластьСтрока);
			
			ИтогоВсего = ИтогоВсего + ВыборкаДетально.Всего;
			ИтогоСуммаНДС = ИтогоСуммаНДС + ВыборкаДетально.СуммаНДС;
		КонецЦикла;
		
		// Итоги таблицы
		ОбластьИтого = Макет.ПолучитьОбласть("Итого");
		Если ИтогоСуммаНДС = 0 Тогда 
			ОбластьИтого.Параметры.ИтогоСуммаНДС = "--";
		Иначе 
			ОбластьИтого.Параметры.ИтогоСуммаНДС = СокрЛП(Формат(ИтогоСуммаНДС, "ЧЦ=15; ЧДЦ=2"));
		КонецЕсли;
		ОбластьИтого.Параметры.ИтогоСтоимость = ИтогоСуммаБезНДС;
		ОбластьИтого.Параметры.ИтогоВсего = СокрЛП(Формат(ИтогоВсего, "ЧЦ=15; ЧДЦ=2"));
		
		ТабличныйДокумент.Вывести(ОбластьИтого);
		
		// Подвал
		ОбластьПодвал = ?(Факсимиле, Макет.ПолучитьОбласть("ПодвалФаксимиле"), Макет.ПолучитьОбласть("Подвал"));
		
		// Вывод подвала
		КоличествоЛистов = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("en='Document composed on%1% 2 % 3';ru='Документ составлен на%1%2 %3'"), Символы.ПС, КоличествоСтраниц,
		СтроковыеФункцииКлиентСервер.ФормаМножественногоЧисла(
		НСтр("en='sheet';ru='листе'"), НСтр("en='sheets';ru='листах'"), НСтр("en='sheets';ru='листах'"), КоличествоСтраниц));
		
		ОбластьПодвал.Параметры.КоличествоЛистов = КоличествоЛистов;
			
		Если ВыборкаДокументы.Организация.ЮридическоеФизическоеЛицо = Перечисления.ЮридическоеФизическоеЛицо.ЮридическоеЛицо Тогда 
			Руководители = уатОбщегоНазначенияТиповые.уатОтветственныеЛицаОрганизаций(ВыборкаДокументы.Организация, ВыборкаДокументы.Дата);
			Если Руководители <> Неопределено Тогда
				ОбластьПодвал.Параметры.ФИОРуководителя       = Руководители.Руководитель;
				ОбластьПодвал.Параметры.ФИОГлавногоБухгалтера = Руководители.ГлавныйБухгалтер;
			КонецЕсли;
		Иначе 
			СтрокаСвидетельства = "свидетельство " + СокрЛП(Строка(ВыборкаДокументы.Организация.СвидетельствоСерияНомер)) 
				+ " от " + СокрЛП(Формат(ВыборкаДокументы.Организация.СвидетельствоДатаВыдачи, "ДФ=dd.MM.yyyy; ДП=-"));
			
			ОбластьПодвал.Параметры.Свидетельство = СтрокаСвидетельства;
			ОбластьПодвал.Параметры.ФИОПБОЮЛ      = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ВыборкаДокументы.Организация.ИндивидуальныйПредприниматель);
		КонецЕсли;
		
		Если Факсимиле Тогда
			ПодписиИФаксимиле = Новый Соответствие; // Ключ - имя каринки в области, Значение - имя реквизита
			ПодписиИФаксимиле.Вставить("ПодписьРуководителя", ?(Руководители <> Неопределено, Руководители.РуководительСсылка, Справочники.ФизическиеЛица.ПустаяСсылка()));
			ПодписиИФаксимиле.Вставить("ПодписьПредпринимателя", ВыборкаДокументы.Организация.ИндивидуальныйПредприниматель);
			ПодписиИФаксимиле.Вставить("ПодписьБухгалтера", ?(Руководители <> Неопределено, Руководители.ГлавныйБухгалтерСсылка, Справочники.ФизическиеЛица.ПустаяСсылка()));
			уатОбщегоНазначения.ЗаполнитьФаксимилеВОбластиМакета(ОбластьПодвал, ВыборкаДокументы.Организация, ПодписиИФаксимиле, Ошибки);
		Конецесли;

		
		ТабличныйДокумент.Вывести(ОбластьПодвал);
		
		// Вывод подвала накладной
		ОбластьМакета = ?(Факсимиле, Макет.ПолучитьОбласть("ПодвалНакладнойФаксимиле"), Макет.ПолучитьОбласть("ПодвалНакладной"));
		
		// Дата отгрузки, передачи (сдачи)
		ШаблонДатыОтгрузкиПередачи = Формат(ВыборкаДокументы.Дата, "ДФ='« дд » %1 ММММ %2 гггг  %3'");
		
		ДлинаДаты = 30;
		ДобавитьСимволовСлева  = Окр((ДлинаДаты - СтрДлина(ШаблонДатыОтгрузкиПередачи))/2, 0);
		ДобавитьСимволовСправа = ДлинаДаты - СтрДлина(ШаблонДатыОтгрузкиПередачи) - ДобавитьСимволовСлева;
		
		ДатаОтгрузкиПередачи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонДатыОтгрузкиПередачи, 
		СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов(" ", ДобавитьСимволовСлева),
		СтроковыеФункцииКлиентСервер.СформироватьСтрокуСимволов(" ", ДобавитьСимволовСправа),
		НСтр("ru = 'года'; en = 'year'"));
		ОбластьМакета.Параметры.ДатаОтгрузкиПередачи = ДатаОтгрузкиПередачи;
				
		ОбластьМакета.Параметры.Основание = ВыборкаДокументы.ДоговорКонтрагента;
		Если ЗначениеЗаполнено(ВыборкаДокументы.ДокументОснование)
			И ТипЗнч(ВыборкаДокументы.ДокументОснование) = Тип("ДокументСсылка.уатТТД") Тогда
			
			РеквизитыОснования = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ВыборкаДокументы.ДокументОснование, "Дата,Номер");
			НомерОснования     = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(РеквизитыОснования.Номер, Истина, Ложь);
			
			ТранспортнаяНакладнаяДата = РеквизитыОснования.Дата;
			ТранспортнаяНакладнаяНомер = НомерОснования;
			
			ПредставлениеТранспортнаяНакладная = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("en='Shipment document № %1 from %2';ru='Транспортная накладная № %1 от %2'"),
				ТранспортнаяНакладнаяНомер, 
				Формат(ТранспортнаяНакладнаяДата, "ДЛФ=ДД"));
			ОбластьМакета.Параметры.ДанныеТранспортнаяНакладная = ПредставлениеТранспортнаяНакладная;
			
		КонецЕсли;
		
		ФизическоеЛицоОтветственный = ВыборкаДокументы.Ответственный.ФизическоеЛицо;
		РеквизитыВодителя = уатОбщегоНазначения.уатПрочитатьРеквизитыВодителя(
			ФизическоеЛицоОтветственный, ВыборкаДокументы.Дата, ВыборкаДокументы.Организация);
			
		ОбластьМакета.Параметры.ФИООтветственного       = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(
			ФизическоеЛицоОтветственный);
		ОбластьМакета.Параметры.ДолжностьОтветственного = РеквизитыВодителя.Должность;

		Если Факсимиле Тогда
			ПодписиИФаксимиле = Новый Соответствие; // Ключ - имя каринки в области, Значение - имя реквизита
			ПодписиИФаксимиле.Вставить("ПодписьКладовщика", Справочники.ФизическиеЛица.ПустаяСсылка());
			ПодписиИФаксимиле.Вставить("ПодписьОтветственного", ВыборкаДокументы.Организация.ИндивидуальныйПредприниматель);
			ПодписиИФаксимиле.Вставить("ПечатьОрганизации", "ФайлФаксимильнаяПечать");
			уатОбщегоНазначения.ЗаполнитьФаксимилеВОбластиМакета(ОбластьМакета, ВыборкаДокументы.Организация, ПодписиИФаксимиле, Ошибки);
		Конецесли;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ВыборкаДокументы.Ссылка);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб        = Истина;
	ТабличныйДокумент.ПолеСверху         = 10;
	ТабличныйДокумент.ПолеСнизу          = 10;
	ТабличныйДокумент.ПолеСлева          = 10;
	ТабличныйДокумент.ПолеСправа         = 10;
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	Возврат ТабличныйДокумент;
	
КонецФункции 

Функция СтруктураКурсаВалютыСтроки(Валюта, ДатаКурса, КэшКурсов = Неопределено)
	// Кеширование используется для исключения повторного получения курса для одной и той же валюты
	Если КэшКурсов = Неопределено Тогда
		КэшКурсов = Новый Соответствие;
	КонецЕсли;
	
	СтруктураКурсаСтроки = КэшКурсов.Получить(Валюта);
	Если СтруктураКурсаСтроки = Неопределено Тогда
		СтруктураКурсаСтроки = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(Валюта, ДатаКурса);
		КэшКурсов.Вставить(Валюта, СтруктураКурсаСтроки);
	КонецЕсли;
	
	Возврат СтруктураКурсаСтроки;
КонецФункции

// Процедура - Заполнить структуру получателей печатных форм
//
// Параметры:
//  СтруктураДанныхОбъектаПечати - Структура - Структура данных получателей печатной формы
//
Процедура ЗаполнитьСтруктуруПолучателейПечатныхФорм(СтруктураДанныхОбъектаПечати) Экспорт
	
	СтруктураДанныхОбъектаПечати.ОсновнойПолучатель = "Контрагент";
	 
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Контрагент");
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("КонтактноеЛицо");
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Грузоотправитель");
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Грузополучатель");
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
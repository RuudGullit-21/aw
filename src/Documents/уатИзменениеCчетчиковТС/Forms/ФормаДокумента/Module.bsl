
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	уатЗащищенныеФункцииСервер.уатДокументФормаЭлементаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, Объект, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если Объект.Ссылка.Пустая() Тогда
		ДатаДокумента = Объект.Дата;
		Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
			ДатаДокумента = ТекущаяДата();
		КонецЕсли;
		
	КонецЕсли;
	
	флНаличиеСпидометра = НаличиеСпидометра(Объект.ТС);
	
	ОрганизацияПередИзменением = Объект.Организация;
	
	уатОбщегоНазначенияСервер.НастроитьПолеПодразделение(Элементы.Подразделение, "Объект.Организация");
	
	ВыработкаТС();
	СчетчикиТС();
	ИзменениеПоказателей();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// уатУправлениеАвтотранспортом.МодификацияКонфигурации
	уатМодификацияКонфигурацииКлиентПереопределяемый.ПриОткрытии(ЭтотОбъект, Отказ);
	// Конец уатУправлениеАвтотранспортом.МодификацияКонфигурации
	
	уатЗащищенныеФункцииКлиент.уатДокументФормаЭлементаПриОткрытии(Отказ, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если флВопросЗакрытиеФормы Тогда
		Отказ = Истина;
		Оповещ = Новый ОписаниеОповещения("ПередЗакрытиемВопрос", ЭтотОбъект);
		ПоказатьВопрос(Оповещ, "При проверке корректности заполнения документа возникли предупреждения!
			|Продолжить закрытие формы?", РежимДиалогаВопрос.ОКОтмена);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// уатУправлениеАвтотранспортом.МодификацияКонфигурации
&НаКлиенте
Процедура Подключаемый_ПолеФормыНажатие(Элемент, СтандартнаяОбработка)
	
	уатМодификацияКонфигурацииКлиентПереопределяемый.ПолеФормыНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры
// Конец уатУправлениеАвтотранспортом.МодификацияКонфигурации

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	УстановитьВидимость();
	ВыработкаТС();
	СчетчикиТС();
КонецПроцедуры

&НаКлиенте
Процедура ТСПриИзменении(Элемент)
	
	ТСПриИзмененииСервер();
	ТСПриИзмененииКлиент();
	
	ВыработкаТС();
	СчетчикиТС();
	
	ИзменениеПоказателей();
КонецПроцедуры

&НаКлиенте
Процедура ТСПриИзмененииКлиент()
	УстановитьВидимость();
КонецПроцедуры

&НаСервере
Процедура ТСПриИзмененииСервер()
	
	флНаличиеСпидометра = НаличиеСпидометра(Объект.ТС);
	
	Если флНаличиеСпидометра Тогда
		Объект.ПоказанияСчетчикаМЧ = 0;
		Объект.СчетчикМЧИзменен = Ложь;
	Иначе
		Объект.ПоказанияОдометра = 0;
		Объект.ОдометрИзменен = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтруктураОтбор = Новый Структура("Организация", Объект.Организация);
	уатИнтерфейсВводаТС.РеквизитТСНачалоВыбора(Элемент, Объект.ТС, ДанныеВыбора, СтандартнаяОбработка, СтруктураОтбор);
КонецПроцедуры

&НаКлиенте
Процедура ТСАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СтруктураОтбор = Новый Структура("Организация", Объект.Организация);
	уатИнтерфейсВводаТС.РеквизитТСАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка, СтруктураОтбор);
КонецПроцедуры

&НаКлиенте
Процедура ТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтруктураОтбор = Новый Структура("Организация", Объект.Организация);
	уатИнтерфейсВводаТС.РеквизитТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка, СтруктураОтбор);
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если Объект.Организация = ОрганизацияПередИзменением Тогда
		Возврат;
	КонецЕсли;
	ОрганизацияПередИзменением = Объект.Организация;
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура СпидометрИзмененПриИзменении(Элемент)
	УстановитьВидимость();
	СчетчикиТС();
КонецПроцедуры

&НаКлиенте
Процедура СчетчикМЧИзмененПриИзменении(Элемент)
	УстановитьВидимость();
	СчетчикиТС();
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаПриТООбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВыработкаТС();
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

&НаКлиенте
Процедура ПоказанияВыработкиПриИзменении(Элемент)
	ИзменениеПоказателей(1);
КонецПроцедуры

&НаКлиенте
Процедура ПоказанияОдометраПриИзменении(Элемент)
	ИзменениеПоказателей(2);
КонецПроцедуры

&НаКлиенте
Процедура ПоказанияСчетчикаМЧПриИзменении(Элемент)
	ИзменениеПоказателей(3);
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяВыработкаИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВыработкаТС();
КонецПроцедуры

&НаКлиенте
Процедура ТекущаяВыработкаОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВыработкаТС();
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаИзмененаПриИзменении(Элемент)
	ВыработкаТС();
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ТекущийОдометрНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СчетчикиТС();
КонецПроцедуры

&НаКлиенте
Процедура ТекущийСчетчикМЧНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СчетчикиТС();
КонецПроцедуры

&НаКлиенте
Процедура ТекущийОдометрОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СчетчикиТС();
КонецПроцедуры

&НаКлиенте
Процедура ТекущийОдометрИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СчетчикиТС();
КонецПроцедуры

&НаКлиенте
Процедура ТекущийСчетчикМЧОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СчетчикиТС();
КонецПроцедуры

&НаКлиенте
Процедура ТекущийСчетчикМЧИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СчетчикиТС();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// уатУправлениеАвтотранспортом.МодификацияКонфигурации
&НаКлиенте
Процедура Подключаемый_уатВыполнитьКоманду(Команда)
	
	уатМодификацияКонфигурацииКлиентПереопределяемый.ВыполнитьПодключаемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры
// Конец уатУправлениеАвтотранспортом.МодификацияКонфигурации

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаСервере
Процедура ВыработкаТС()
	
	Если Не ЗначениеЗаполнено(Объект.ТС) Тогда
		Объект.ТекущаяВыработка = 0;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТС",      Объект.ТС);
	Запрос.УстановитьПараметр("ДатаКон", Объект.Дата);
	
	Если Объект.ТС.Модель.НаличиеСпидометра Тогда 
		Запрос.УстановитьПараметр("ПараметрВыработки", Справочники.уатПараметрыВыработки.ПробегОбщий);
	Иначе 
		Запрос.УстановитьПараметр("ПараметрВыработки", Справочники.уатПараметрыВыработки.ВремяВРаботе);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ПараметрВыработки) Тогда
		Запрос.УстановитьПараметр("ВидОбслуживания", Объект.ПараметрВыработки);
	Иначе
		Запрос.УстановитьПараметр("ВидОбслуживания", Перечисления.уатВидыОбслуживания.ТекущийРемонт);
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА уатТС.Модель.НаличиеСпидометра
	|			ТОГДА уатТС.НачальныйПробег
	|		ИНАЧЕ уатТС.НачальныйПробег * 3600
	|	КОНЕЦ + ВЫБОР
	|		КОГДА уатВыработкаОбороты.КоличествоОборот ЕСТЬ NULL
	|				ИЛИ уатВыработкаОбороты.КоличествоОборот = NULL
	|			ТОГДА 0
	|		ИНАЧЕ уатВыработкаОбороты.КоличествоОборот
	|	КОНЕЦ КАК КоличествоОборот,
	|	ЕСТЬNULL(уатМоделиТСНормативыОбслуживания.ПараметрВыработки, ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ПустаяСсылка)) КАК ПараметрВыработки,
	|	уатМоделиТСНормативыОбслуживания.ВидОбслуживания КАК ВидОбслуживания,
	|	уатВыработкаОбороты.ТС КАК ТС
	|ИЗ
	|	Справочник.уатТС КАК уатТС
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатМоделиТС.НормативыОбслуживания КАК уатМоделиТСНормативыОбслуживания
	|		ПО уатТС.Модель = уатМоделиТСНормативыОбслуживания.Ссылка
	|			И (уатТС.Ссылка = &ТС)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.уатВыработкаТС.Обороты(, &ДатаКон, , ТС = &ТС) КАК уатВыработкаОбороты
	|		ПО уатТС.Ссылка = уатВыработкаОбороты.ТС
	|			И (уатВыработкаОбороты.ПараметрВыработки = уатМоделиТСНормативыОбслуживания.ПараметрВыработки)
	|ГДЕ
	|	уатМоделиТСНормативыОбслуживания.ВидОбслуживания = &ВидОбслуживания
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	&ПараметрВыработки КАК ПараметрВыработки,
	|	ВЫБОР
	|		КОГДА уатТС.Модель.НаличиеСпидометра
	|			ТОГДА уатТС.НачальныйПробег
	|		ИНАЧЕ уатТС.НачальныйПробег * 3600
	|	КОНЕЦ + ЕСТЬNULL(уатВыработкаТСОбороты.КоличествоОборот, 0) КАК ТекущаяВыработка
	|ИЗ
	|	Справочник.уатТС КАК уатТС
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.уатВыработкаТС.Обороты(
	|				,
	|				&ДатаКон,
	|				,
	|				ТС = &ТС
	|					И ПараметрВыработки = &ПараметрВыработки) КАК уатВыработкаТСОбороты
	|		ПО уатТС.Ссылка = уатВыработкаТСОбороты.ТС
	|ГДЕ
	|	уатТС.Ссылка = &ТС";
	
		РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Выборка = РезультатЗапроса[0].Выбрать();
	
	Если Выборка.Следующий() Тогда
		Объект.ПараметрВыработки = Выборка.ПараметрВыработки;
		Объект.ТекущаяВыработка = Выборка.ТекущаяВыработка;
		
		Если Объект.ПараметрВыработки.Временный Тогда
			Объект.ТекущаяВыработка = Объект.ТекущаяВыработка / 3600;
		КонецЕсли;
		
	Иначе
		ВыборкаБезПлана = РезультатЗапроса[1].Выбрать();
		Если ВыборкаБезПлана.Следующий() Тогда 
			Объект.ПараметрВыработки = ВыборкаБезПлана.ПараметрВыработки;
			Объект.ТекущаяВыработка = ВыборкаБезПлана.ТекущаяВыработка;
			
			Если Объект.ПараметрВыработки.Временный Тогда
				Объект.ТекущаяВыработка = Объект.ТекущаяВыработка / 3600;
			КонецЕсли;
			
		Иначе 
			Объект.ПараметрВыработки = "";
			Объект.ВыработкаПриТО = 0;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СчетчикиТС()
	
	Если Не ЗначениеЗаполнено(Объект.ТС) Тогда
		Объект.ТекущийОдометр = 0;
		Объект.ТекущийСчетчикМЧ = 0;
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	уатСчетчикиТССрезПоследних.Значение КАК Значение
		|ИЗ
		|	РегистрСведений.уатСчетчикиТС.СрезПоследних(&Дата, ) КАК уатСчетчикиТССрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатТС КАК уатТС
		|		ПО уатСчетчикиТССрезПоследних.ТС = уатТС.Ссылка
		|ГДЕ
		|	уатТС.Ссылка = &ТС
		|	И уатСчетчикиТССрезПоследних.ТипСчетчика = &ТипСчетчика
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	уатТС.НачальнаяНаработка КАК Значение
		|ИЗ
		|	Справочник.уатТС КАК уатТС
		|ГДЕ
		|	уатТС.Ссылка = &ТС";
	
	Запрос.УстановитьПараметр("Дата", Объект.Дата);
	Если флНаличиеСпидометра Тогда
		Запрос.УстановитьПараметр("ТипСчетчика", Перечисления.уатТипыСчетчиковТС.Спидометр);
	Иначе
		Запрос.УстановитьПараметр("ТипСчетчика", Перечисления.уатТипыСчетчиковТС.СчетчикМЧ);
	КонецЕсли;
	Запрос.УстановитьПараметр("ТС", Объект.ТС);
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса[0].Выбрать();
	
	Если ВыборкаДетальныеЗаписи.Следующий() Тогда
		Если ВыборкаДетальныеЗаписи.Значение <> 0 Тогда
			Если флНаличиеСпидометра Тогда
				Объект.ТекущийОдометр = ВыборкаДетальныеЗаписи.Значение;
			Иначе
				Объект.ТекущийСчетчикМЧ = ВыборкаДетальныеЗаписи.Значение;
			КонецЕсли;
		Иначе
			ВыборкаДетальныеЗаписи = РезультатЗапроса[1].Выбрать();
			Если ВыборкаДетальныеЗаписи.Следующий() Тогда
				Если флНаличиеСпидометра Тогда
					Объект.ТекущийОдометр = ВыборкаДетальныеЗаписи.Значение;
				Иначе
					Объект.ТекущийСчетчикМЧ = ВыборкаДетальныеЗаписи.Значение;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимость()
	
	УстановитьСвойствоЭлемента(Элементы.ГруппаСпидометр, "Видимость", флНаличиеСпидометра);
	УстановитьСвойствоЭлемента(Элементы.ГруппаСчМч, "Видимость", НЕ флНаличиеСпидометра);
	
	УстановитьСвойствоЭлемента(Элементы.ТекущаяВыработка, "Видимость", Объект.ВыработкаИзменена);
	УстановитьСвойствоЭлемента(Элементы.ПоказанияВыработки, "Видимость", Объект.ВыработкаИзменена);
	
	УстановитьСвойствоЭлемента(Элементы.ТекущийОдометр, "Видимость", Объект.ОдометрИзменен);
	УстановитьСвойствоЭлемента(Элементы.ПоказанияОдометра, "Видимость", Объект.ОдометрИзменен);
	
	УстановитьСвойствоЭлемента(Элементы.ТекущийСчетчикМЧ, "Видимость", Объект.СчетчикМЧИзменен);
	УстановитьСвойствоЭлемента(Элементы.ПоказанияСчетчикаМЧ, "Видимость", Объект.СчетчикМЧИзменен);
	
	ИзменениеПоказателей();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСвойствоЭлемента(ТекЭлемент, ИмяСвойства, ЗначениеСвойства)
	Если ТекЭлемент[ИмяСвойства] <> ЗначениеСвойства Тогда
		ТекЭлемент[ИмяСвойства] = ЗначениеСвойства;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция НаличиеСпидометра(ТС)
	Если ЗначениеЗаполнено(ТС) Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатТС.Модель.НаличиеСпидометра КАК НаличиеСпидометра
		|ИЗ
		|	Справочник.уатТС КАК уатТС
		|ГДЕ
		|	уатТС.Ссылка = &ТС");
		Запрос.УстановитьПараметр("ТС", ТС);
		Рез = Запрос.Выполнить();
		
		Если Рез.Пустой() Тогда
			флНаличиеСпидометра = Истина;
		Иначе
			Выборка = Рез.Выбрать();
			Выборка.Следующий();
			флНаличиеСпидометра = Выборка.НаличиеСпидометра;
		КонецЕсли;
	Иначе
		флНаличиеСпидометра = Истина;
	КонецЕсли;
	
	Возврат флНаличиеСпидометра;
КонецФункции

&НаКлиенте
Процедура ПередЗакрытиемВопрос(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.ОК Тогда
		флВопросЗакрытиеФормы = Ложь;
		Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ИзменениеПоказателей(Значение = 0)
	
	Если Значение = 0 Тогда
		Элементы.Декорация2.Видимость = Ложь;
		Элементы.Декорация3.Видимость = Ложь;
		Элементы.Декорация4.Видимость = Ложь;
		Элементы.ИзменениеВыработки.Заголовок = "";
		Элементы.ИзменениеОдометра.Заголовок = "";
		Элементы.ИзменениеСчетчика.Заголовок = "";
		
		ИзменениеПоказателей(1);
		ИзменениеПоказателей(2);
		ИзменениеПоказателей(3);
	КонецЕсли;
	
	Если Значение = 1 И ЗначениеЗаполнено(Объект.ПоказанияВыработки) И Объект.ВыработкаИзменена Тогда
		Элементы.ИзменениеВыработки.Заголовок = Строка(Объект.ПоказанияВыработки - Объект.ТекущаяВыработка) + 
		 " "+ Объект.ПараметрВыработки.ЕдиницаИзмерения;
		Элементы.Декорация2.Видимость = Истина;
	ИначеЕсли Значение = 2 И ЗначениеЗаполнено(Объект.ПоказанияОдометра) И Объект.ОдометрИзменен Тогда
		Элементы.ИзменениеОдометра.Заголовок = Строка(Объект.ПоказанияОдометра - Объект.ТекущийОдометр) + " км";
		Элементы.Декорация3.Видимость = Истина;
	ИначеЕсли Значение = 3 И ЗначениеЗаполнено(Объект.ПоказанияСчетчикаМЧ) И Объект.СчетчикМЧИзменен Тогда
		Элементы.ИзменениеСчетчика.Заголовок = Строка(Объект.ПоказанияСчетчикаМЧ - Объект.ТекущийСчетчикМЧ) + " ч";
		Элементы.Декорация4.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
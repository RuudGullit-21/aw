#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	Настройки.ПриПолученииСлужебныхРеквизитов = Ложь;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатОперацииСТехническимиЖидкостями";
	КомандаПечати.Идентификатор = "ОперацииСТЖ";
	КомандаПечати.Представление = НСтр("en='Operations with liquids';ru='Операции с ТЖ'");
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр).
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной
//                                                            параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной
//                                            параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если НЕ уатОбщегоНазначенияСервер.РазрешениеПечатиНепроведенногоДокумента(МассивОбъектов) Тогда
		Возврат;
	КонецЕсли;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ОперацииСТЖ") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ОперацииСТЖ",
			"Операции с техническими жидкостями", ПечатьОперацииСТЖ(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
	уатОбщегоНазначенияСервер.УстановитьРедактированиеПечатныхФормДокумента(КоллекцияПечатныхФорм);
	
КонецПроцедуры // Печать

// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.УправлениеДоступом

// Позволяет переопределить ограничение, указанное в модуле менеджера объекта метаданных.
//
// Параметры:
//  Ограничение - Структура:
//    * Текст                             - Строка - ограничение доступа для пользователей.
//                                          Если пустая строка, значит, доступ разрешен.
//    * ТекстДляВнешнихПользователей      - Строка - ограничение доступа для внешних пользователей.
//                                          Если пустая строка, значит, доступ запрещен.
//    * ПоВладельцуБезЗаписиКлючейДоступа - Неопределено - определить автоматически.
//                                        - Булево - если Ложь, то всегда записывать ключи доступа,
//                                          если Истина, тогда не записывать ключи доступа,
//                                          а использовать ключи доступа владельца (требуется,
//                                          чтобы ограничение было строго по объекту-владельцу).
//   * ПоВладельцуБезЗаписиКлючейДоступаДляВнешнихПользователей - Неопределено, Булево - также
//                                          как у параметра ПоВладельцуБезЗаписиКлючейДоступа.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Подразделение)";
	
	Ограничение.ТекстДляВнешнихПользователей = Ограничение.Текст;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	СначалаПартииПотомТЖ = (ДокументСсылка.ВидОперации = Перечисления.уатВидыОперацийСТехническимиЖидкостями.ДоливПоАкту
		ИЛИ ДокументСсылка.ВидОперации = Перечисления.уатВидыОперацийСТехническимиЖидкостями.ДоливПоТО
		ИЛИ ДокументСсылка.ВидОперации = Перечисления.уатВидыОперацийСТехническимиЖидкостями.ДоливПрочее);
	
	Если СначалаПартииПотомТЖ Тогда
		Если ДокументСсылка.ВидОперации <> Перечисления.уатВидыОперацийСТехническимиЖидкостями.РасходПрочее Тогда
			СформироватьТаблицаПартий(ДокументСсылка, СтруктураДополнительныеСвойства);
		КонецЕсли;
		СформироватьТаблицаПартииТЖ(ДокументСсылка, СтруктураДополнительныеСвойства);
	Иначе
		СформироватьТаблицаПартииТЖ(ДокументСсылка, СтруктураДополнительныеСвойства);
		Если ДокументСсылка.ВидОперации <> Перечисления.уатВидыОперацийСТехническимиЖидкостями.РасходПрочее Тогда
			СформироватьТаблицаПартий(ДокументСсылка, СтруктураДополнительныеСвойства);
		КонецЕсли;
	КонецЕсли;
	
	СформироватьТаблицаОборотыТЖ(ДокументСсылка, СтруктураДополнительныеСвойства);
КонецПроцедуры // ИнициализироватьДанныеДокумента()

Процедура ВыполнитьКонтроль(ДокументСсылка, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь) Экспорт
	ЭтоПриходТЖ = (ДокументСсылка.ВидОперации = Перечисления.уатВидыОперацийСТехническимиЖидкостями.ДоливПоАкту
		ИЛИ ДокументСсылка.ВидОперации = Перечисления.уатВидыОперацийСТехническимиЖидкостями.ДоливПоТО
		ИЛИ ДокументСсылка.ВидОперации = Перечисления.уатВидыОперацийСТехническимиЖидкостями.ДоливПрочее);
		
	Заголовок = уатОбщегоНазначенияТиповые.уатПредставлениеДокументаПриПроведении(ДокументСсылка);
	
	Если ЭтоПриходТЖ Тогда
		тблЗаправки = ДокументСсылка.ТехническиеЖидкости.Выгрузить();
		
		мсвНоменклатура = Новый Массив;
		Для Каждого ТекСтрока Из тблЗаправки Цикл
			мсвНоменклатура.Добавить(ТекСтрока.Номенклатура);
		КонецЦикла;
		
		Запрос = Новый Запрос("
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатПартииТоваровНаСкладах.Номенклатура КАК Номенклатура,
		|	ЕСТЬNULL(уатПартииТоваровНаСкладах.КоличествоОстаток, 0) КАК КоличествоОстаток
		|ИЗ
		|	РегистрНакопления.уатПартииТоваровНаСкладах.Остатки(&МоментКонтроля, Склад = &Склад И Номенклатура В(&Номенклатура)) КАК уатПартииТоваровНаСкладах
		|ГДЕ
		|	ЕСТЬNULL(уатПартииТоваровНаСкладах.КоличествоОстаток, 0) < 0");
		Запрос.УстановитьПараметр("МоментКонтроля", ДополнительныеСвойства.ДляПроведения.МоментКонтроля);
		Запрос.УстановитьПараметр("Номенклатура", мсвНоменклатура);
		Запрос.УстановитьПараметр("Склад", ДокументСсылка.Склад);
		Рез = Запрос.Выполнить().Выбрать();
		
		Пока Рез.Следующий() Цикл
			ТекстНСТР = НСтр("en='Negative remains of fuels/liquids ""%1"" at warehouse ""%2"": %3';ru='Отрицательный остаток ГСМ/ТЖ ""%1"" на складе ""%2"": %3'");
			ТекстНСТР = СтрШаблон(ТекстНСТР, Рез.Номенклатура, ДокументСсылка.Склад, Рез.КоличествоОстаток);
			уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, Отказ, Заголовок);
		КонецЦикла;
		
	КонецЕсли;
		
	Если НЕ ЭтоПриходТЖ Тогда
		тблТЖ = ДокументСсылка.ТехническиеЖидкости.Выгрузить();
		тблТЖ.Свернуть("ТС, Номенклатура");
		Для Каждого ТекСтрока Из тблТЖ Цикл
			КоличествоОстаток = уатГСМ.ОстатокТЖнаТС(ТекСтрока.ТС, ТекСтрока.Номенклатура, ДополнительныеСвойства.ДляПроведения.МоментКонтроля);
			Если КоличествоОстаток < 0 Тогда
				ТекстНСТР = НСтр("en='Negative remains of liquids ""%1"" on vehicle ""%2"": %3';ru='Отрицательный остаток ТЖ ""%1"" на ТС ""%2"": %3'");
				ТекстНСТР = СтрШаблон(ТекстНСТР, ТекСтрока.Номенклатура, Строка(ТекСтрока.ТС), КоличествоОстаток);
				уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, Отказ, Заголовок);
			Иначе
				// проверим остатки без указания текущей даты
				КоличествоОстатокБезДаты = уатГСМ.ОстатокТЖнаТС(ТекСтрока.ТС, ТекСтрока.Номенклатура, Дата(3999,12,31,23,59,59));
				
				Если КоличествоОстатокБезДаты < 0 Тогда
					ТекстНСТР = НСтр("en='Negative remains of liquids ""%1"" on vehicle ""%2"": %3';ru='Отрицательный остаток ТЖ ""%1"" на ТС ""%2"": %3'");
					ТекстНСТР = СтрШаблон(ТекстНСТР, ТекСтрока.Номенклатура, Строка(ТекСтрока.ТС), КоличествоОстатокБезДаты);
					уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, Отказ, Заголовок);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Функция ПечатьОперацииСТЖ(МассивОбъектов, ОбъектыПечати) Экспорт
	
	ТабДокумент = Новый ТабличныйДокумент;
	ТабДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ОперацииСТЖ";
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.уатОперацииСТехническимиЖидкостями.ПФ_MXL_ОперацииСТЖ");
	
	ПервыйДокумент = Истина;
	
	Для Каждого ТекущийДокумент Из МассивОбъектов Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабДокумент.ВысотаТаблицы + 1;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(
			ТекущийДокумент, НСтр("en='Operations with liquids';ru='Операции с техническими жидкостями'"));
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ВидОперации");
		ОбластьМакета.Параметры.ВидОперации = ТекущийДокумент.ВидОперации;
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ОбластьМакета.Параметры.Склад = ТекущийДокумент.Склад;
		ОбластьМакета.Параметры.Подразделение = ТекущийДокумент.Подразделение;
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьСтроки = Макет.ПолучитьОбласть("Строка");
		
		ТабДокумент.Вывести(ОбластьМакета);
		
		НомерСтроки = 0;
		Для Каждого СтрокаТабличнойЧасти Из ТекущийДокумент.ТехническиеЖидкости Цикл	
			
			НомерСтроки = НомерСтроки + 1;
			
			ОбластьСтроки.Параметры.Заполнить(СтрокаТабличнойЧасти);
			ОбластьСтроки.Параметры.ТСПредставление = Строка(СтрокаТабличнойЧасти.ТС);
			
			ТабДокумент.Вывести(ОбластьСтроки);
			
		КонецЦикла;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		ТабДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ОбластьМакета.Параметры.Заполнить(ТекущийДокумент);
		ТабДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабДокумент, НомерСтрокиНачало, ОбъектыПечати, ТекущийДокумент);
	КонецЦикла;
	
	ТабДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабДокумент;
	
КонецФункции //ПечатьОперацииСТЖ()

Функция ПолучитьДанныеПечати(знач МассивДокументов, знач МассивИменМакетов) Экспорт
	
	ДанныеПоВсемОбъектам = Новый Соответствие;
	ОписаниеОбластей = Новый Соответствие;
	ДвоичныеДанныеМакетов = Новый Соответствие;
	ТипыМакетов = Новый Соответствие;
	
	Возврат Новый Структура("Данные, Макеты",
	ДанныеПоВсемОбъектам,
	Новый Структура("ОписаниеОбластей, ТипыМакетов, ДвоичныеДанныеМакетов",
	ОписаниеОбластей,
	ТипыМакетов,
	ДвоичныеДанныеМакетов));
	
КонецФункции

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаПартий(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	мЗапрос = Новый Запрос;
	мЗапрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаДокумента.Ссылка.Склад КАК Склад,
	|	ТаблицаДокумента.Номенклатура КАК Номенклатура,
	|	СУММА(ТаблицаДокумента.Количество) КАК Количество
	|ПОМЕСТИТЬ ТаблицаДокументаНоменклатура
	|ИЗ
	|	Документ.уатОперацииСТехническимиЖидкостями.ТехническиеЖидкости КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.уатНоменклатураГСМ КАК уатНоменклатураГСМ
	|		ПО ТаблицаДокумента.Номенклатура = уатНоменклатураГСМ.Номенклатура
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.Номенклатура,
	|	ТаблицаДокумента.Ссылка.Склад";
	
	мЗапрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	мЗапрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	Выборка = мЗапрос.Выполнить();
	
	мЗапрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТабНоменклатуры.Склад,
	|	ТабНоменклатуры.Номенклатура,
	|	ТабНоменклатуры.Количество
	|ИЗ 
	|	ТаблицаДокументаНоменклатура КАК ТабНоменклатуры";
	
	Если ДокументСсылка.ВидОперации = Перечисления.уатВидыОперацийСТехническимиЖидкостями.Слив Тогда
		ТаблицаДокумента = мЗапрос.Выполнить().Выгрузить();
		ТаблицаДокумента.Колонки.Добавить("Период");
		ТаблицаДокумента.Колонки.Добавить("ВидДвижения");
		ТаблицаДокумента.Колонки.Добавить("Партия");
		ТаблицаДокумента.Колонки.Добавить("Стоимость");
		ТаблицаДокумента.Колонки.Добавить("СтоимостьУпр");
		ТаблицаДокумента.Колонки.Добавить("СуммаНДС");
		
		УчетПоСредней = (уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументСсылка.Организация, "СпособОценкиМПЗ") = Перечисления.СпособыОценки.ПоСредней);
			
		Для Каждого ТекСтрока Из ТаблицаДокумента Цикл
			ТекСтрока.Период = ДокументСсылка.Дата;
			ТекСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
			
			Если НЕ УчетПоСредней Тогда
				ТекСтрока.Партия = ДокументСсылка;
			КонецЕсли;
			
			мсвСтрокПартииТЖ = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПартииТЖ.НайтиСтроки(Новый Структура("Номенклатура, Склад", ТекСтрока.Номенклатура, ДокументСсылка.Склад));
			ТекСтрока.Стоимость = 0;
			ТекСтрока.СтоимостьУпр = 0;
			ТекСтрока.СуммаНДС = 0;
			Для Каждого ТекСтрокаПартииТЖ Из мсвСтрокПартииТЖ Цикл
				ТекСтрока.Стоимость = ТекСтрока.Стоимость + ТекСтрокаПартииТЖ.Стоимость;
				ТекСтрока.СтоимостьУпр = ТекСтрока.СтоимостьУпр + ТекСтрокаПартииТЖ.СтоимостьУпр;
				ТекСтрока.СуммаНДС = ТекСтрока.СуммаНДС + ТекСтрокаПартииТЖ.СуммаНДС;
			КонецЦикла;
		КонецЦикла;
		
	Иначе
		// управляемая блокировка
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.уатПартииТоваровНаСкладах");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = мЗапрос.МенеджерВременныхТаблиц.Таблицы[0].ПолучитьДанные();
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Склад", "Склад");
		Блокировка.Заблокировать();
	
		ТаблицаПартий = уатПроведение.ПолучитьТаблицуПартийДляСписания(мЗапрос.Выполнить().Выгрузить(),
		уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументСсылка.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.СпособОценкиМПЗ), СтруктураДополнительныеСвойства.ДляПроведения.МоментКонтроля);
		
		ЗапросПартии = Новый Запрос();
		ЗапросПартии.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТабДанных.Склад КАК Склад,
		|	ТабДанных.Номенклатура КАК Номенклатура,
		|	ТабДанных.Партия КАК Партия,
		|	ТабДанных.Количество КАК Количество,
		|	ТабДанных.Стоимость КАК Стоимость,
		|	ТабДанных.СтоимостьУпр КАК СтоимостьУпр,
		|	ТабДанных.СуммаНДС КАК СуммаНДС
		|ПОМЕСТИТЬ ВремТаблицаПартий
		|ИЗ
		|	&ТаблицаПарам КАК ТабДанных
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	&ВидДвижения КАК ВидДвижения,
		|	&Период КАК Период,
		|	&Регистратор КАК Регистратор,
		|	ТабДанных.Склад КАК Склад,
		|	ТабДанных.Партия КАК Партия,
		|	ТабДанных.Номенклатура КАК Номенклатура,
		|	ТабДанных.Количество КАК Количество,
		|	ТабДанных.Стоимость КАК Стоимость,
		|	ТабДанных.СтоимостьУпр КАК СтоимостьУпр,
		|	ТабДанных.СуммаНДС КАК СуммаНДС
		|ИЗ
		|	ВремТаблицаПартий КАК ТабДанных";
		
		ЗапросПартии.УстановитьПараметр("Период"         , ДокументСсылка.Дата);
		ЗапросПартии.УстановитьПараметр("ТаблицаПарам"   , ТаблицаПартий);
		ЗапросПартии.УстановитьПараметр("Регистратор"    , ДокументСсылка);
		Если ДокументСсылка.ВидОперации = Перечисления.уатВидыОперацийСТехническимиЖидкостями.Слив Тогда
			ЗапросПартии.УстановитьПараметр("ВидДвижения", ВидДвиженияНакопления.Приход);
		Иначе
			ЗапросПартии.УстановитьПараметр("ВидДвижения", ВидДвиженияНакопления.Расход);
		КонецЕсли;
		
		МассивРезультатов = ЗапросПартии.ВыполнитьПакет();
		ТаблицаДокумента = МассивРезультатов[1].Выгрузить();
	КонецЕсли;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПартии", ТаблицаДокумента);
	
КонецПроцедуры // СформироватьТаблицаПартий()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаПартииТЖ(ДокументСсылка, СтруктураДополнительныеСвойства)
		
	ЭтоПриходТЖ = (ДокументСсылка.ВидОперации = Перечисления.уатВидыОперацийСТехническимиЖидкостями.ДоливПоАкту
		ИЛИ ДокументСсылка.ВидОперации = Перечисления.уатВидыОперацийСТехническимиЖидкостями.ДоливПоТО
		ИЛИ ДокументСсылка.ВидОперации = Перечисления.уатВидыОперацийСТехническимиЖидкостями.ДоливПрочее);
		
	Если ЭтоПриходТЖ Тогда
		тблДвижений = Новый ТаблицаЗначений;
		тблДвижений.Колонки.Добавить("Период");
		тблДвижений.Колонки.Добавить("ТС");
		тблДвижений.Колонки.Добавить("Колонна");
		тблДвижений.Колонки.Добавить("ТЖ");
		тблДвижений.Колонки.Добавить("Партия");
		тблДвижений.Колонки.Добавить("Организация");
		тблДвижений.Колонки.Добавить("Подразделение");
		тблДвижений.Колонки.Добавить("ВидДвижения");
		тблДвижений.Колонки.Добавить("Количество");
		тблДвижений.Колонки.Добавить("Стоимость");
		тблДвижений.Колонки.Добавить("СтоимостьУпр");
		тблДвижений.Колонки.Добавить("СуммаНДС");
		
		тблТЖ = ДокументСсылка.ТехническиеЖидкости.Выгрузить();
		тблТЖ.Свернуть("ТС, Номенклатура, ЕдиницаИзмерения", "Количество");
		
		Для Каждого ТекСтрокаТЖ Из тблТЖ Цикл
			Если НЕ уатГСМ.УчитыватьОстаткиТЖ(ТекСтрокаТЖ.Номенклатура) Тогда
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = тблДвижений.Добавить();
			НоваяСтрока.Период = ДокументСсылка.Дата;
			НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
			НоваяСтрока.Партия = ДокументСсылка;
			НоваяСтрока.ТС = ТекСтрокаТЖ.ТС;
			НоваяСтрока.Колонна = ДокументСсылка.Колонна;
			НоваяСтрока.Организация = ДокументСсылка.Организация;
			НоваяСтрока.Подразделение = ДокументСсылка.Подразделение;
			НоваяСтрока.ТЖ = ТекСтрокаТЖ.Номенклатура;
			НоваяСтрока.Количество = ТекСтрокаТЖ.Количество * ТекСтрокаТЖ.ЕдиницаИзмерения.Коэффициент;
			
			Если СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Свойство("ТаблицаПартии") Тогда
				мсвСтрокПартии = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПартии.НайтиСтроки(Новый Структура("Номенклатура, Склад", ТекСтрокаТЖ.Номенклатура, ДокументСсылка.Склад));
				
				НоваяСтрока.Стоимость    = 0;
				НоваяСтрока.СтоимостьУпр = 0;
				НоваяСтрока.СуммаНДС     = 0;
				
				КоличествоСписать = НоваяСтрока.Количество;
				Для Каждого ТекСтрокаПартии Из мсвСтрокПартии Цикл 
					Если КоличествоСписать <= 0 Тогда 
						Прервать;
					КонецЕсли;
					
					Если ТекСтрокаПартии.Количество <= КоличествоСписать Тогда 
						// вся
						тСтоимость    = ТекСтрокаПартии.Стоимость;
						тСтоимостьУпр = ТекСтрокаПартии.СтоимостьУпр;
						тСуммаНДС     = ТекСтрокаПартии.СуммаНДС;
						тКоличество   = ТекСтрокаПартии.Количество;
					Иначе 
						// пропорция
						тСтоимость    = Окр(ТекСтрокаПартии.Стоимость / ТекСтрокаПартии.Количество * КоличествоСписать, 2);
						тСтоимостьУпр = Окр(ТекСтрокаПартии.СтоимостьУпр / ТекСтрокаПартии.Количество * КоличествоСписать, 2);
						тСуммаНДС     = Окр(ТекСтрокаПартии.СуммаНДС / ТекСтрокаПартии.Количество * КоличествоСписать, 2);
						тКоличество   = КоличествоСписать;
					КонецЕсли;
					
					КоличествоСписать = КоличествоСписать - тКоличество;
					
					НоваяСтрока.Стоимость    = НоваяСтрока.Стоимость + тСтоимость;
					НоваяСтрока.СтоимостьУпр = НоваяСтрока.СтоимостьУпр + тСтоимостьУпр;
					НоваяСтрока.СуммаНДС     = НоваяСтрока.СуммаНДС + тСуммаНДС;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		// Корректировка сумм для учета копеек.
		ОтраженныеТЖ = тблДвижений.Скопировать(, "ТЖ, Стоимость, СтоимостьУпр, СуммаНДС");
		ОтраженныеТЖ.Свернуть("ТЖ", "Стоимость, СтоимостьУпр, СуммаНДС");
		Для Каждого СтрокаТЖ Из ОтраженныеТЖ Цикл 
			мсвСтрокПартии = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПартии.НайтиСтроки(Новый Структура("Номенклатура, Склад", СтрокаТЖ.ТЖ, ДокументСсылка.Склад));
			
			СтоимостьПартии    = 0;
			СтоимостьУпрПартии = 0;
			СуммаНДСПартии     = 0;
			Для Каждого СтрокаПартии Из мсвСтрокПартии Цикл 
				СтоимостьПартии    = СтоимостьПартии + СтрокаПартии.Стоимость;
				СтоимостьУпрПартии = СтоимостьУпрПартии + СтрокаПартии.СтоимостьУпр;
				СуммаНДСПартии     = СуммаНДСПартии + СтрокаПартии.СуммаНДС;
			КонецЦикла;
			
			СтоимостьКорректировка    = СтоимостьПартии - СтрокаТЖ.Стоимость;
			СтоимостьУпрКорректировка = СтоимостьУпрПартии - СтрокаТЖ.СтоимостьУпр;
			СуммаНДСКорректировка     = СуммаНДСПартии - СтрокаТЖ.СуммаНДС;
			
			НайдСтроки = тблДвижений.НайтиСтроки(Новый Структура("ТЖ", СтрокаТЖ.ТЖ));
			Если НайдСтроки.Количество() Тогда 
				// Корректируем последнюю строку.
				КоррСтрока = НайдСтроки[НайдСтроки.Количество()-1];
				КоррСтрока.Стоимость    = КоррСтрока.Стоимость + СтоимостьКорректировка;
				КоррСтрока.СтоимостьУпр = КоррСтрока.СтоимостьУпр + СтоимостьУпрКорректировка;
				КоррСтрока.СуммаНДС     = КоррСтрока.СуммаНДС + СуммаНДСКорректировка;
			КонецЕсли;
		КонецЦикла;
		
	Иначе //при расходе ТЖ получаем таблицу партий ТЖ на ТС
		мЗапрос = новый Запрос;
		мЗапрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатОперацииСТехническимиЖидкостями.ТС,
		|	уатОперацииСТехническимиЖидкостями.Номенклатура КАК ТЖ
		|ИЗ
		|	Документ.уатОперацииСТехническимиЖидкостями.ТехническиеЖидкости КАК уатОперацииСТехническимиЖидкостями
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.уатНоменклатураГСМ КАК уатНоменклатураГСМ
		|		ПО (уатОперацииСТехническимиЖидкостями.Номенклатура = уатНоменклатураГСМ.Номенклатура
		|				И уатНоменклатураГСМ.ВестиУчетОстатковТЖ)
		|ГДЕ
		|	уатОперацииСТехническимиЖидкостями.Ссылка = &Ссылка";
		мЗапрос.УстановитьПараметр("Ссылка", ДокументСсылка);
		
		Блокировка = Новый БлокировкаДанных;
		ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.уатОстаткиТЖнаТС");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = мЗапрос.Выполнить();
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ТС" , "ТС");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ТЖ", "ТЖ");
		Блокировка.Заблокировать();
		
		тблДвижений = Неопределено;
		ВсеОК =	уатГСМ.ПодготовитьТаблицуСписанияТЖ(ДокументСсылка, тблДвижений, Истина);
		
		тблДвижений.Колонки.Добавить("Регистратор");
		тблДвижений.ЗаполнитьЗначения(ДокументСсылка, "Регистратор");
		тблДвижений.Колонки.Добавить("Период");
		тблДвижений.ЗаполнитьЗначения(ДокументСсылка.Дата, "Период");
		тблДвижений.Колонки.Добавить("ВидДвижения");
		тблДвижений.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход, "ВидДвижения");
		
	КонецЕсли;
		
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПартииТЖ", тблДвижений);
КонецПроцедуры // СформироватьТаблицаОстаткиТЖ()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаОборотыТЖ(ДокументСсылка, СтруктураДополнительныеСвойства)
	тблДвижений = Новый ТаблицаЗначений;
	тблДвижений.Колонки.Добавить("Период");
	тблДвижений.Колонки.Добавить("ТС");
	тблДвижений.Колонки.Добавить("Водитель");
	тблДвижений.Колонки.Добавить("ГСМ");
	тблДвижений.Колонки.Добавить("Колонна");
	тблДвижений.Колонки.Добавить("Организация");
	тблДвижений.Колонки.Добавить("ВидОперации");
	тблДвижений.Колонки.Добавить("КоличествоПриход");
	тблДвижений.Колонки.Добавить("КоличествоРасход");
	
	ЭтоПриходТЖ = (ДокументСсылка.ВидОперации = Перечисления.уатВидыОперацийСТехническимиЖидкостями.ДоливПоАкту
		ИЛИ ДокументСсылка.ВидОперации = Перечисления.уатВидыОперацийСТехническимиЖидкостями.ДоливПоТО
		ИЛИ ДокументСсылка.ВидОперации = Перечисления.уатВидыОперацийСТехническимиЖидкостями.ДоливПрочее);
		
	Для Каждого ТекСтрокаТЖ Из ДокументСсылка.ТехническиеЖидкости Цикл
		Если ТекСтрокаТЖ.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = тблДвижений.Добавить();
		НоваяСтрока.Период = ДокументСсылка.Дата;
		НоваяСтрока.ВидОперации = ДокументСсылка.ВидОперации;
		НоваяСтрока.ТС = ТекСтрокаТЖ.ТС;
		НоваяСтрока.Водитель = ТекСтрокаТЖ.Водитель;
		НоваяСтрока.ГСМ = ТекСтрокаТЖ.Номенклатура;
		НоваяСтрока.Колонна = ДокументСсылка.Колонна;
		НоваяСтрока.Организация = ДокументСсылка.Организация;
		
		Если ЭтоПриходТЖ Тогда
			ИмяКолонки = "КоличествоПриход";
		Иначе
			ИмяКолонки = "КоличествоРасход";
		КонецЕсли;
		
		НоваяСтрока[ИмяКолонки] = ТекСтрокаТЖ.Количество * ТекСтрокаТЖ.ЕдиницаИзмерения.Коэффициент;
	КонецЦикла;
	
	// проставляем колонну, если не заполнена
	Если НЕ ЗначениеЗаполнено(ДокументСсылка.Колонна) Тогда
		Для Каждого ТекСтрока Из тблДвижений Цикл
			ТекСтрока.Колонна = уатОбщегоНазначения.МестонахождениеТС(ТекСтрока.ТС, ТекСтрока.Период).Колонна;
		КонецЦикла;
	КонецЕсли;
	
	тблДвижений.Свернуть("Период, ТС, Водитель, ГСМ, Колонна, Организация, ВидОперации", "КоличествоПриход, КоличествоРасход");
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаОборотыТЖ", тблДвижений);
КонецПроцедуры // СформироватьТаблицаРасходГСМ()

#КонецОбласти

#КонецЕсли
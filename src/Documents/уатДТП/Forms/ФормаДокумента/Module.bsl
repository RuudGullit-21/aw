
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	уатЗащищенныеФункцииСервер.уатДокументФормаЭлементаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, Объект, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	уатЗащищенныеФункцииКлиент.уатДокументФормаЭлементаПриОткрытии(Отказ, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ОбновитьСписокВыбораЭкипажа();
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТСПриИзменении(Элемент)
	
	// установим водителя ТС
	Если ЗначениеЗаполнено(Объект.ТС) Тогда
		уатОбщегоНазначения.ЗаполнитьЭкипажТС(Объект.ТС, Объект.Организация, Объект.Дата, Объект.Водитель);
	КонецЕсли;
	
	// установим текущее местонахождение ТС
	МестонахождениеТС = уатОбщегоНазначения.МестонахождениеТС(Объект.ТС, Объект.Дата);
	Если НЕ ЗначениеЗаполнено(Объект.Колонна) Тогда
		Объект.Колонна = МестонахождениеТС.Колонна;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = МестонахождениеТС.Организация;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.Подразделение) Тогда
		Объект.Подразделение = МестонахождениеТС.Подразделение;
	КонецЕсли;
	
	ОбновитьСписокВыбораЭкипажа();
	
КонецПроцедуры

&НаКлиенте
Процедура ТСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.РеквизитТСНачалоВыбора(Элемент, Объект.ТС, ДанныеВыбора,
		СтандартнаяОбработка, СтруктураОтборТС());
КонецПроцедуры

&НаКлиенте
Процедура ТСАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.РеквизитТСАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание,
		СтандартнаяОбработка, СтруктураОтборТС());
КонецПроцедуры

&НаКлиенте
Процедура ТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.РеквизитТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных,
		СтандартнаяОбработка, СтруктураОтборТС());
КонецПроцедуры

&НаКлиенте
Процедура ВодительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ДиалогВыбораСотрудника(Элемент, Объект.Водитель, Новый Структура("Организация", Объект.Организация), СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ВодительОткрытие(Элемент, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ОткрытьФормуСотрудника(Объект.Водитель, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ВодительАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	Если Ожидание = 0 Тогда //выбор из списка
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура ВодительОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

&НаКлиенте
Процедура ПоврежденияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Повреждения");
КонецПроцедуры

&НаКлиенте
Процедура МестоДТПНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.МестоДТП");
КонецПроцедуры

&НаКлиенте
Процедура ВидДТПНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.ВидДТП");
КонецПроцедуры

&НаКлиенте
Процедура ОбстоятельстваДТПНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.ОбстоятельстваДТП");
КонецПроцедуры

&НаКлиенте
Процедура УсловияОрганизацииИОсуществленияПеревозокНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.УсловияОрганизацииИОсуществленияПеревозок");
КонецПроцедуры

&НаКлиенте
Процедура СведенияОПострадавшихНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.СведенияОПострадавших");
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыРемонты

&НаКлиенте
Процедура РемонтыПриИзменении(Элемент)
	Объект.СуммаРемонта = 0;
	Для Каждого ТекСтрока Из Объект.Ремонты Цикл
		Объект.СуммаРемонта = Объект.СуммаРемонта + СуммаРемонтаПоДокументу(ТекСтрока.РемонтныйЛист);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ЗаполнитьДанныeВодителя(Команда)
	
	ДанныеВодителя = ПолучитьДанныеВодителя();
	
	Если ЗначениеЗаполнено(ДанныеВодителя.ФИОВодителя) Тогда
		СтрокаДанныеВодителя = НСтр("en='Driver: ';ru='Водитель: '") + ДанныеВодителя.ФИОВодителя + Символы.ПС;
	Иначе
		СтрокаДанныеВодителя = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеВодителя.КлассВодителя) Тогда
		СтрокаДанныеВодителя = СтрокаДанныеВодителя + НСтр("en='';ru='Класс водителя: '") + ДанныеВодителя.КлассВодителя + Символы.ПС; 
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеВодителя.СтажВодителя) Тогда
		СтрокаДанныеВодителя = СтрокаДанныеВодителя + НСтр("en='';ru='Стаж с '") + Лев(ДанныеВодителя.СтажВодителя, 10);
	КонецЕсли;
	
	Объект.ДанныеОВодителе = СтрокаДанныеВодителя;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДанныеТС(Команда)
	
	ДанныеТС = ПолучитьДанныеТС();
	
	Если ЗначениеЗаполнено(ДанныеТС.СрокЭксплуатации) Тогда
		СтрокаДанныеТС = НСтр("en='';ru='Срок эксплуатации ТС с '") + Лев(ДанныеТС.СрокЭксплуатации, 10) + Символы.ПС;
	Иначе
		СтрокаДанныеТС = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеТС.Пробег) Тогда
		СтрокаДанныеТС = СтрокаДанныеТС + НСтр("en='';ru='Пробег ТС: '") + ДанныеТС.Пробег + " " + НСтр("en='km.';ru='км.'") + Символы.ПС; 
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДанныеТС.ДатаПоследнегоТО) Тогда
		СтрокаДанныеТС = СтрокаДанныеТС + НСтр("en='';ru='Дата последнего ТО: '") + Лев(ДанныеТС.ДатаПоследнегоТО, 10);
	КонецЕсли;
	
	Объект.ДанныеОТранспортномСредстве = СтрокаДанныеТС;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДаннымГИБДД(Команда)
	Если НЕ ЗначениеЗаполнено(Объект.ТС) Тогда
		ТекстНСТР = НСтр("ru='Не заполнено ТС.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		Возврат;
	КонецЕсли;
	
	VIN = ЗначениеРеквизитаОбъекта(Объект.ТС, "VIN");
	Если НЕ ЗначениеЗаполнено(VIN) Тогда
		ТекстНСТР = НСтр("ru='У ТС не заполнен VIN.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		Возврат;
	КонецЕсли;

	ОписаниеОповещения = Новый ОписаниеОповещения("ПодтверждениеКапчи", ЭтотОбъект,
		VIN);
	ПараметрыОткрытия  = Новый Структура();
	ОткрытьФорму("Документ.уатДТП.Форма.ФормаКапчи", ПараметрыОткрытия,ЭтотОбъект,,,,ОписаниеОповещения);

КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаСервереБезКонтекста
Функция СуммаРемонтаПоДокументу(РемЛист)
	Возврат РемЛист.Работы.Итог("Сумма") + РемЛист.Материалы.Итог("Сумма");
КонецФункции

&НаКлиенте
Процедура ОбновитьСписокВыбораЭкипажа()
	Элементы.Водитель.СписокВыбора.Очистить();
	
	ЭкипажТССписок = уатЗащищенныеФункцииСервер.ЭкипажТССписок(Объект.ТС, Объект.Дата);
	ЭкипажТССписок_Количество = ЭкипажТССписок.Количество();
	
	Элементы.Водитель.КнопкаВыпадающегоСписка = (ЭкипажТССписок_Количество > 0);
	
	Если ЭкипажТССписок_Количество = 0 Тогда	
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекСотр Из ЭкипажТССписок Цикл
		Элементы.Водитель.СписокВыбора.Добавить(ТекСотр.Значение);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция СтруктураОтборТС()
	СтруктураОтбор = Новый Структура("Организация", Объект.Организация);
	Если ЗначениеЗаполнено(Объект.Подразделение) Тогда
		СтруктураОтбор.Вставить("Подразделение", Объект.Подразделение);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Колонна) Тогда
		СтруктураОтбор.Вставить("Колонна", Объект.Колонна);
	КонецЕсли;
	
	Возврат СтруктураОтбор;
КонецФункции

&НаСервере
Функция ПолучитьДанныеВодителя()
	
	СтруктураВозврата = Новый Структура();
	
	// Фио водителя
	СтруктураВозврата.Вставить("ФИОВодителя", уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.Водитель, "Наименование"));
	
	// Класс водителя
	СтруктураВозврата.Вставить("КлассВодителя", Объект.Водитель.Класс);
	
	// Стаж водителя
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	РегистрСведенийуатДокументыВодителей.ВладелецДокументов КАК ВладелецДокументов,
	|	РегистрСведенийуатДокументыВодителей.ДатаВыдачи КАК ДатаВыдачи
	|ИЗ
	|	Справочник.уатРегистрационныеДокументы КАК РегистрСведенийуатДокументыВодителей
	|ГДЕ
	|	РегистрСведенийуатДокументыВодителей.ПринадлежностьДокументов = ЗНАЧЕНИЕ(Перечисление.уатПринадлежностьДокументов.ДокументыВодителя)
	|	И НЕ РегистрСведенийуатДокументыВодителей.ПометкаУдаления
	|	И РегистрСведенийуатДокументыВодителей.ВладелецДокументов = &ВладелецДокументов
	|	И РегистрСведенийуатДокументыВодителей.ВидДокумента = ЗНАЧЕНИЕ(Справочник.уатВидыДокументов.УдостоверениеВодителя)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ДатаВыдачи");
	Запрос.УстановитьПараметр("ВладелецДокументов", Объект.Водитель);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыгрузкаЗапроса = РезультатЗапроса.Выгрузить();
		Стаж = Строка(ВыгрузкаЗапроса[0].ДатаВыдачи);
	Иначе
		Стаж = "";
	КонецЕсли;
	СтруктураВозврата.Вставить("СтажВодителя", Стаж);
	
	Возврат СтруктураВозврата;
	
Конецфункции

&НаСервере
Функция ПолучитьДанныеТС()
	
	СтруктураВозврата = Новый Структура();
	
	// Срок эксплуатации тс
	СтруктураВозврата.Вставить("СрокЭксплуатации", уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.ТС, "ДатаВводаВЭксплуатацию"));
	
	// Пробег ТС по одометру
	СтруктураОтбора = Новый Структура("ТипСчетчика, ТС", Перечисления.уатТипыСчетчиковТС.Спидометр, Объект.ТС);
	СрезПоследних = РегистрыСведений.уатСчетчикиТС.СрезПоследних(Объект.ДатаДТП, СтруктураОтбора);
	Если СрезПоследних.Количество() Тогда
		Пробег = Строка(СрезПоследних[0].Значение);
	Иначе
		Пробег = "";
	КонецЕсли;
	СтруктураВозврата.Вставить("Пробег", Пробег);
	
	// Дата последнего ТО
	Запрос = Новый Запрос();
	
	Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
	|	уатРемонтныйЛист.ДатаОкончания КАК Дата
	|ИЗ
	|	Документ.уатРемонтныйЛист КАК уатРемонтныйЛист
	|ГДЕ
	|	уатРемонтныйЛист.Проведен
	|	И НЕ уатРемонтныйЛист.ПометкаУдаления
	|	И (уатРемонтныйЛист.ВидОбслуживания.ВидОбслуживанияТС = ЗНАЧЕНИЕ(Перечисление.уатВидыОбслуживания.Техобслуживание)
	|			ИЛИ уатРемонтныйЛист.ВидОбслуживания2.ВидОбслуживанияТС = ЗНАЧЕНИЕ(Перечисление.уатВидыОбслуживания.Техобслуживание)
	|			ИЛИ уатРемонтныйЛист.ВидОбслуживания3.ВидОбслуживанияТС = ЗНАЧЕНИЕ(Перечисление.уатВидыОбслуживания.Техобслуживание))
	|	И уатРемонтныйЛист.ТС = &ТС
	|	И уатРемонтныйЛист.Выполнен
	|	И уатРемонтныйЛист.ДатаОкончания <= &ДатаДТП
	|
	|УПОРЯДОЧИТЬ ПО
	|	уатРемонтныйЛист.Дата УБЫВ";
	
	Запрос.УстановитьПараметр("ДатаДТП", Объект.ДатаДТП);
	Запрос.УстановитьПараметр("ТС", Объект.ТС);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда
		ВыгрузкаЗапроса = РезультатЗапроса.Выгрузить();
		ДатаТО = Строка(ВыгрузкаЗапроса[0].Дата);
	Иначе
		ДатаТО = "";
	КонецЕсли;
	СтруктураВозврата.Вставить("ДатаПоследнегоТО", ДатаТО);
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьПоДаннымГИБДДНачалоВыбораЗавершение(ТекДТП, ДопПараметры) Экспорт
	
	Если ТекДТП <> Неопределено Тогда
		ЗаполнитьЗначенияСвойств(Объект, ТекДТП);
		
		ЗаполненыРеквизиты = "";
		Если ТекДТП.Свойство("ДатаДТП") Тогда
			ЗаполненыРеквизиты = ?(ЗаполненыРеквизиты = "", "Дата ДТП",
			ЗаполненыРеквизиты + ", " + "Дата ДТП");
		КонецЕсли;
		Если ТекДТП.Свойство("НомерСправкиГИБДД") Тогда
			ЗаполненыРеквизиты = ?(ЗаполненыРеквизиты = "", "Номер справки ГИБДД",
			ЗаполненыРеквизиты + ", " + "Номер справки ГИБДД");
		КонецЕсли;
		Если ТекДТП.Свойство("ДатаСправкиГИБДД") Тогда
			ЗаполненыРеквизиты = ?(ЗаполненыРеквизиты = "", "Дата справки ГИБДД",
			ЗаполненыРеквизиты + ", " + "Дата справки ГИБДД");
		КонецЕсли;
		Если ТекДТП.Свойство("МестоДТП") Тогда
			ЗаполненыРеквизиты = ?(ЗаполненыРеквизиты = "", "Место ДТП",
			ЗаполненыРеквизиты + ", " + "Место ДТП");
		КонецЕсли;
		Если ТекДТП.Свойство("ВидДТП") Тогда
			ЗаполненыРеквизиты = ?(ЗаполненыРеквизиты = "", "Вид ДТП",
			ЗаполненыРеквизиты + ", " + "Вид ДТП");
		КонецЕсли;
		Если ТекДТП.Свойство("Повреждения") Тогда
			ЗаполненыРеквизиты = ?(ЗаполненыРеквизиты = "", "Повреждения",
			ЗаполненыРеквизиты + ", " + "Повреждения");
		КонецЕсли;
		ТекстНСТР = СтрШаблон(НСтр("ru='Заполнены реквизиты: %1'"), ЗаполненыРеквизиты);
		ПоказатьПредупреждение(,ТекстНСТР);

	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаполнитьПоДаннымГИБДДНаСервере(VIN, Капча, ТекстОшибки)
	
	ЗапросВыполнен = Ложь;
	ДанныеДТП = уатИнтеграции_проф.ГИБДД_ПолучитьИсториюДТП(VIN, Капча, ЗапросВыполнен, ТекстОшибки);
	Возврат ДанныеДТП;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита);
	
КонецФункции

&НаКлиенте
Процедура ПодтверждениеКапчи(Результат, VIN) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;

	Капча       = Новый Структура();
	Капча.Вставить("captchaToken", Результат.captchaToken);
	Капча.Вставить("captchaWord",  Результат.captchaWord);
	
	ТекстОшибки = "";
	ДанныеДТП   = ЗаполнитьПоДаннымГИБДДНаСервере(VIN, Капча, ТекстОшибки);
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
	 	ТекстНСТР = НСтр("ru = 'Онлайн сервисы ГИББД недоступны в данный момент.
		|Повторите попытку позже или выполните запрос по ссылке в браузере и вручную скопируйте результат запроса в программу'");
		
		ТекстПредупреждения = Новый ФорматированнаяСтрока(
		НСтр("ru = 'Онлайн сервисы ГИББД недоступны в данный момент.'"),
		Символы.ПС,
		НСтр("ru = 'Повторите попытку позже или выполните запрос по '"),
		Новый ФорматированнаяСтрока(НСтр("ru='ссылке в браузере'"),,,, "https://гибдд.рф/check/auto#" + VIN),
		НСтр("ru = ' и вручную скопируйте результат запроса в программу.'")
		);
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат;
	КонецЕсли;

	Если ДанныеДТП.Количество() = 0 Тогда
		ТекстНСТР = НСтр("ru='ДТП не найдены'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		Возврат;
	КонецЕсли;

	ДТПНайдено = Ложь;
	СписокДТП  = Новый СписокЗначений;

	Для Каждого ТекДТП Из ДанныеДТП Цикл
		Если Объект.НомерСправкиГИБДД = ТекДТП.НомерСправкиГИБДД Тогда
			ЗаполнитьЗначенияСвойств(Объект, ТекДТП);
			
			ЗаполненыРеквизиты = "";
			Если ТекДТП.Свойство("ДатаДТП") Тогда
				ЗаполненыРеквизиты = ?(ЗаполненыРеквизиты = "", "Дата ДТП",
					ЗаполненыРеквизиты + ", " + "Дата ДТП");
			КонецЕсли;
			Если ТекДТП.Свойство("НомерСправкиГИБДД") Тогда
				ЗаполненыРеквизиты = ?(ЗаполненыРеквизиты = "", "Номер справки ГИБДД",
					ЗаполненыРеквизиты + ", " + "Номер справки ГИБДД");
			КонецЕсли;
			Если ТекДТП.Свойство("ДатаСправкиГИБДД") Тогда
				ЗаполненыРеквизиты = ?(ЗаполненыРеквизиты = "", "Дата справки ГИБДД",
					ЗаполненыРеквизиты + ", " + "Дата справки ГИБДД");
			КонецЕсли;
			Если ТекДТП.Свойство("МестоДТП") Тогда
				ЗаполненыРеквизиты = ?(ЗаполненыРеквизиты = "", "Место ДТП",
					ЗаполненыРеквизиты + ", " + "Место ДТП");
			КонецЕсли;
			Если ТекДТП.Свойство("ВидДТП") Тогда
				ЗаполненыРеквизиты = ?(ЗаполненыРеквизиты = "", "Вид ДТП",
					ЗаполненыРеквизиты + ", " + "Вид ДТП");
			КонецЕсли;
			Если ТекДТП.Свойство("Повреждения") Тогда
				ЗаполненыРеквизиты = ?(ЗаполненыРеквизиты = "", "Повреждения",
					ЗаполненыРеквизиты + ", " + "Повреждения");
			КонецЕсли;
			ТекстНСТР = СтрШаблон(НСтр("ru='Заполнены реквизиты: %1'"), ЗаполненыРеквизиты);
			ПоказатьПредупреждение(,ТекстНСТР);
			ДТПНайдено = Истина;
			Прервать;
		КонецЕсли;
		
		ПредставлениеДТП = ТекДТП.ВидДТП + " от " + ТекДТП.ДатаДТП;
		СписокДТП.Добавить(ТекДТП, ПредставлениеДТП);
	КонецЦикла;
	
	Если НЕ ДТПНайдено
		И ДанныеДТП.Количество() <> 0 Тогда
		ОповещениеВыбора = Новый ОписаниеОповещения("ЗаполнитьПоДаннымГИБДДНачалоВыбораЗавершение", ЭтотОбъект);
		ОткрытьФорму("Документ.уатДТП.Форма.ФормаВыбораСправочников",
		Новый Структура("ИмяОбъектаВыбора, СписокОбъектов, Заголовок", "Список", СписокДТП, НСтр("ru = 'Выберите ДТП'")),
		ЭтотОбъект,,,, ОповещениеВыбора, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

	
#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// См. УправлениеДоступомПереопределяемый.ПриЗаполненииСписковСОграничениемДоступа.
//
// Параметры:
//  Ограничение	 - 	 - 
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";
	
	Ограничение.ТекстДляВнешнихПользователей = Ограничение.Текст;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

// Формирует запрос проверки при смене статуса списка документов
//
// Параметры:
//  МассивДокументов		 - Массив	 - Массив ссылок на документы, которые надо проверять
//  НовыйСтатус				 - Строка	 - Имя нового статуса
//  ДополнительныеПараметры	 - Структура - Структура дополнительных параметров
// 
// Возвращаемое значение:
//  Запрос - Запрос проверки перед сменой статуса
//
Функция СформироватьЗапросПроверкиПриСменеСтатуса(МассивДокументов, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	ЗначениеНовогоСтатуса = Перечисления.СтатусыПланов[НовыйСтатус];
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаДокументов.Ссылка КАК Ссылка,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Ссылка) КАК Представление,
	|	ПРЕДСТАВЛЕНИЕ(ТаблицаДокументов.Статус) КАК ПредставлениеТекущегоСтатуса,
	|	ПРЕДСТАВЛЕНИЕ(&Статус) КАК ПредставлениеНовогоСтатуса,
	|	ВЫБОР
	|		КОГДА ТаблицаДокументов.Статус = &Статус
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК СтатусСовпадает,
	|	ТаблицаДокументов.Проведен КАК Проведен,
	|	ТаблицаДокументов.ПометкаУдаления КАК ПометкаУдаления,
	|	ИСТИНА КАК ЗаписьПроведением
	|ИЗ
	|	Документ.ЭкземплярБюджета КАК ТаблицаДокументов
	|ГДЕ
	|	ТаблицаДокументов.Ссылка В(&МассивДокументов)";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("Статус", ЗначениеНовогоСтатуса);
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	Возврат Запрос;
	
КонецФункции

// Возвращает результат проверки при смене статуса документа
//
// Параметры:
//  ВыборкаПроверки			 - ВыборкаИзРезультатаЗапроса	 - Текущая строка выборки
//  НовыйСтатус				 - Перечисление					 - Новый статус
//  ДополнительныеПараметры	 - Структура					 - Структура дополнительных параметров
// 
// Возвращаемое значение:
//  Булево - Истина, в случае успешного завершения проверки
//
Функция ПроверкаПередСменойСтатуса(ВыборкаПроверки, НовыйСтатус, ДополнительныеПараметры) Экспорт
	
	Возврат Истина; // Для документа отсутствуют дополнительные проверки
	
КонецФункции

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

// Вынесено сюда в связи с отличиями общего модуля ПроведениеСервер в решениях БП и ERP
#Область УАТ_Процедуры_Функции_ПроведениеСервер

// Процедура инициализирует общие структуры, используемые при проведении документов.
// Вызывается из модуля документов при проведении.
//
Процедура ИнициализироватьДополнительныеСвойстваДляПроведения(ДокументСсылка, ДополнительныеСвойства, РежимПроведения = Неопределено) Экспорт

	// В структуре "ДополнительныеСвойства" создаются свойства с ключами "ТаблицыДляДвижений", "ДляПроведения".

	// "ТаблицыДляДвижений" - структура, которая будет содержать таблицы значений с данными для выполнения движений.
	ДополнительныеСвойства.Вставить("ТаблицыДляДвижений", Новый Структура);

	// "ДляПроведения" - структура, содержащая свойства и реквизиты документа, необходимые для проведения.
	ДополнительныеСвойства.Вставить("ДляПроведения", Новый Структура);
	
	// Структура, содержащая ключ с именем "МенеджерВременныхТаблиц", в значении которого хранится менеджер временных таблиц.
	// Содержит для каждой временной таблицы ключ (имя временной таблицы) и значение (признак наличия записей во временной таблице).
	ДополнительныеСвойства.ДляПроведения.Вставить("СтруктураВременныеТаблицы", Новый Структура("МенеджерВременныхТаблиц", Новый МенеджерВременныхТаблиц));
	ДополнительныеСвойства.ДляПроведения.Вставить("РежимПроведения",           РежимПроведения);
	ДополнительныеСвойства.ДляПроведения.Вставить("МетаданныеДокумента",       ДокументСсылка.Метаданные());
	ДополнительныеСвойства.ДляПроведения.Вставить("Ссылка",                    ДокументСсылка);

КонецПроцедуры

Процедура ОчиститьДополнительныеСвойстваДляПроведения(ДополнительныеСвойства) Экспорт

	ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц.Закрыть();

КонецПроцедуры

// Процедура выполняет пордготовку наборов записей документа к записи движений.
// 1. Очищает наборы записей от "старых записей" (ситуация возможна только в толстом клиенте)
// 2. Взводит флаг записи у наборов, по которым документ имеет движения
// Вызывается из модуля документов при проведении.
//
Процедура ПодготовитьНаборыЗаписейКРегистрацииДвижений(Объект, ЭтоНовый = Ложь) Экспорт
	Перем ЭтоНовыйДокумент, МетаданныеДвижения;
	
	Для Каждого НаборЗаписей Из Объект.Движения Цикл

		Если НаборЗаписей.Количество() > 0 Тогда
			НаборЗаписей.Очистить();
		КонецЕсли;

	КонецЦикла;
	
	Если НЕ Объект.ДополнительныеСвойства.Свойство("ЭтоНовый", ЭтоНовыйДокумент) Тогда
		ЭтоНовыйДокумент = ЭтоНовый;
	КонецЕсли;
	
	Если НЕ ЭтоНовыйДокумент Тогда

		//// Регистры, движения по которым формируются не из модуля менеджера документа.
		//ИсключаемыеРегистры = Новый Массив;
		//ИсключаемыеРегистры.Добавить("ГрафикДвиженияТоваров");
		//// {УП} 
		//ИсключаемыеРегистры.Добавить("ГрафикЭтаповПроизводства");
		////{/УП} 
		//
		//// Регистры, движения по которым формируются не из модуля менеджера документа,
		//// но должны удаляться при отмене проведения документа.
		//Если Объект.ДополнительныеСвойства.Свойство("РежимЗаписи")
		// И НЕ Объект.ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		//	Если ТипЗнч(Объект.Ссылка) <> Тип("ДокументСсылка.ПереоценкаВалютныхСредств") Тогда
		//		ИсключаемыеРегистры.Добавить("РасчетыСКлиентамиПоДокументам");
		//		ИсключаемыеРегистры.Добавить("РасчетыСПоставщикамиПоДокументам");
		//	КонецЕсли;
		//	//{УП}
		//	ИсключаемыеРегистры.Добавить("Хозрасчетный");

		//	ИсключаемыеРегистры.Добавить("Международный");
		//	ИсключаемыеРегистры.Добавить("ОтражениеДокументовВМеждународномУчете");
		//	ИсключаемыеРегистры.Добавить("ПланыПотребленияМатериалов");
		//	ИсключаемыеРегистры.Добавить("ПланыЗанятостиТрудовыхРесурсов");
		//	ИсключаемыеРегистры.Добавить("ПланыЗанятостиВидовРабочихЦентров");
		//	//{/УП}
		//	
		//	Если 
		//	//{УП}
		//	 ТипЗнч(Объект.Ссылка) = Тип("ДокументСсылка.МаршрутныйЛистПроизводства") Тогда
		//		Если Объект.Статус = Перечисления.СтатусыМаршрутныхЛистовПроизводства.Выполнен Тогда
		//			ИсключаемыеРегистры.Добавить("ПартииПроизводственныхЗатрат");  
		//			ИсключаемыеРегистры.Добавить("ПартииНезавершенногоПроизводства");
		//		КонецЕсли;
		//	ИначеЕсли
		//	//{/УП}
		//	 ТипЗнч(Объект.Ссылка) <> Тип("ДокументСсылка.ПередачаТоваровМеждуОрганизациями")
		//	 И ТипЗнч(Объект.Ссылка) <> Тип("ДокументСсылка.ПоступлениеУслугПрочихАктивов")
		//	 И ТипЗнч(Объект.Ссылка) <> Тип("ДокументСсылка.ВнутреннееПотреблениеТоваров")
		//	 И ТипЗнч(Объект.Ссылка) <> Тип("ДокументСсылка.ЗаписьКнигиПокупок")
		//	 И ТипЗнч(Объект.Ссылка) <> Тип("ДокументСсылка.ЗаписьКнигиПродаж")
		//	 И ТипЗнч(Объект.Ссылка) <> Тип("ДокументСсылка.ПоступлениеТоваровУслуг")
		//	 И ТипЗнч(Объект.Ссылка) <> Тип("ДокументСсылка.ВозвратТоваровОтКлиента")
		//	 И ТипЗнч(Объект.Ссылка) <> Тип("ДокументСсылка.КорректировкаРеализации")
		//	 //{УП}
		//	 И ТипЗнч(Объект.Ссылка) <> Тип("ДокументСсылка.ВыпускПродукции")
		//	 //{/УП}
		//	 И ТипЗнч(Объект.Ссылка) <> Тип("ДокументСсылка.КорректировкаПоступления") Тогда
		//		ИсключаемыеРегистры.Добавить("ПартииПроизводственныхЗатрат");
		//		//{УП}
		//		ИсключаемыеРегистры.Добавить("ПартииНезавершенногоПроизводства");
		//		//{/УП}
		//		ИсключаемыеРегистры.Добавить("ПартииТоваровОрганизаций");
		//		ИсключаемыеРегистры.Добавить("ПартииТоваровПереданныеНаКомиссию");
		//		ИсключаемыеРегистры.Добавить("ПартииРасходовНаСебестоимостьТоваров");
		//		ИсключаемыеРегистры.Добавить("ПартииЗатратНаВыпуск");
		//		ИсключаемыеРегистры.Добавить("НДСЗаписиКнигиПокупок");
		//		ИсключаемыеРегистры.Добавить("НДСЗаписиКнигиПродаж");
		//	КонецЕсли;
		//КонецЕсли;
				
		Если Объект.ДополнительныеСвойства.Свойство("ДляПроведения")
		 И Объект.ДополнительныеСвойства.ДляПроведения.Свойство("МетаданныеДокумента") Тогда
			МетаданныеДвижения = Объект.ДополнительныеСвойства.ДляПроведения.МетаданныеДокумента.Движения;
		Иначе
			МетаданныеДвижения = Объект.Метаданные().Движения;
		КонецЕсли;
		
		МассивИменРегистров = ПолучитьМассивИспользуемыхРегистров(Объект.Ссылка, МетаданныеДвижения);

		Для Каждого ИмяРегистра Из МассивИменРегистров Цикл
			Объект.Движения[ИмяРегистра].Записывать = Истина;
		КонецЦикла;

	КонецЕсли;

КонецПроцедуры

// Функция формирует массив имен регистров, по которым документ имеет движения.
// Вызывается при подготовке записей к регистрации движений.
//
Функция ПолучитьМассивИспользуемыхРегистров(Регистратор, Движения, МассивИсключаемыхРегистров = Неопределено) Экспорт

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Регистратор", Регистратор);

	Результат = Новый Массив;
	МаксимумТаблицВЗапросе = 256;

	СчетчикТаблиц   = 0;
	СчетчикДвижений = 0;

	ВсегоДвижений = Движения.Количество();
	ТекстЗапроса  = "";
	Для Каждого Движение Из Движения Цикл

		СчетчикДвижений = СчетчикДвижений + 1;

		ПропуститьРегистр = МассивИсключаемыхРегистров <> Неопределено
							И МассивИсключаемыхРегистров.Найти(Движение.Имя) <> Неопределено;

		Если Не ПропуститьРегистр Тогда

			Если СчетчикТаблиц > 0 Тогда

				ТекстЗапроса = ТекстЗапроса + "
				|ОБЪЕДИНИТЬ ВСЕ
				|";

			КонецЕсли;

			СчетчикТаблиц = СчетчикТаблиц + 1;

			ТекстЗапроса = ТекстЗапроса + 
			"
			|ВЫБРАТЬ ПЕРВЫЕ 1
			|""" + Движение.Имя + """ КАК ИмяРегистра
			|
			|ИЗ " + Движение.ПолноеИмя() + "
			|
			|ГДЕ Регистратор = &Регистратор
			|";

		КонецЕсли;

		Если СчетчикТаблиц = МаксимумТаблицВЗапросе Или СчетчикДвижений = ВсегоДвижений Тогда

			Запрос.Текст  = ТекстЗапроса;
			ТекстЗапроса  = "";
			СчетчикТаблиц = 0;

			Если Результат.Количество() = 0 Тогда

				Результат = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ИмяРегистра");

			Иначе

				Выборка = Запрос.Выполнить().Выбрать();
				Пока Выборка.Следующий() Цикл
					Результат.Добавить(Выборка.ИмяРегистра);
				КонецЦикла;

			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	Возврат Результат;

КонецФункции

// Процедура записывает движения документа. Дополнительно происходит копирование параметров
// в модули наборов записей для выполнения регистрации изменений в движениях.
// Процедура вызывается из модуля документов при проведении.
//
Процедура ЗаписатьНаборыЗаписей(Объект) Экспорт
	Перем РегистрыДляКонтроля, РассчитыватьИзменения;

	// Регистры, для которых будут рассчитаны таблицы изменений движений.
	Если Объект.ДополнительныеСвойства.ДляПроведения.Свойство("РегистрыДляКонтроля", РегистрыДляКонтроля) Тогда
		Для Каждого НаборЗаписей Из РегистрыДляКонтроля Цикл
			Если НаборЗаписей.Записывать Тогда

				// Установка флага регистрации изменений в наборе записей.
				Если НЕ Объект.ДополнительныеСвойства.Свойство("РассчитыватьИзменения", РассчитыватьИзменения) Тогда
					РассчитыватьИзменения = Истина;
				КонецЕсли;
				
				НаборЗаписей.ДополнительныеСвойства.Вставить("РассчитыватьИзменения", РассчитыватьИзменения);
				НаборЗаписей.ДополнительныеСвойства.Вставить("ЭтоНовый", Объект.ДополнительныеСвойства.ЭтоНовый);

				// Структура для передачи данных в модули наборов записей.
				НаборЗаписей.ДополнительныеСвойства.Вставить("ДляПроведения", 
						Новый Структура("СтруктураВременныеТаблицы", Объект.ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы));

				// Необходимость контроля обеспечения устанавливается при выполнении рекомендаций в "Состояние обеспечения заказов".
				КонтролироватьОбеспечение = Неопределено;
				Если Объект.ДополнительныеСвойства.Свойство("КонтролироватьОбеспечение", КонтролироватьОбеспечение) Тогда
					НаборЗаписей.ДополнительныеСвойства.Вставить("КонтролироватьОбеспечение", КонтролироватьОбеспечение);
				КонецЕсли;

			КонецЕсли;
		КонецЦикла;
	КонецЕсли;

	// Для отработки случаев, когда документ перестает делать движения по регистру (при изменении вида операции). Очистим оффлайновые регистры.
	Если Объект.ДополнительныеСвойства.РежимЗаписи = РежимЗаписиДокумента.Проведение И Не Объект.ДополнительныеСвойства.ЭтоНовый Тогда
		Если Объект.Движения.Найти("РасчетыСКлиентами") <> Неопределено Тогда

			Если Объект.Движения.РасчетыСКлиентами.Количество() = 0 И Объект.Движения.РасчетыСКлиентами.Записывать Тогда
				Объект.Движения.РасчетыСКлиентамиПоДокументам.Записывать = Истина;
			КонецЕсли;

		КонецЕсли;

		Если Объект.Движения.Найти("РасчетыСПоставщиками") <> Неопределено Тогда

			Если Объект.Движения.РасчетыСПоставщиками.Количество() = 0 И Объект.Движения.РасчетыСПоставщиками.Записывать Тогда
				Объект.Движения.РасчетыСПоставщикамиПоДокументам.Записывать = Истина;
			КонецЕсли;

		КонецЕсли;
		
		Если Объект.Движения.Найти("ПроизводственныеЗатраты") <> Неопределено Тогда
			Если Объект.Движения.ПроизводственныеЗатраты.Количество() = 0 И Объект.Движения.ПроизводственныеЗатраты.Записывать Тогда
				Объект.Движения.ПартииПроизводственныхЗатрат.Записывать = Истина;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;

	// Перед записью движений РасчетыСКлиентами используется дата регистратора.
	Если Объект.Движения.Найти("РасчетыСКлиентами") <> Неопределено Тогда

		Объект.Движения.РасчетыСКлиентами.ДополнительныеСвойства.Вставить("ДатаРегистратора", Объект.Дата);

	КонецЕсли;
	
	Если Объект.Движения.Найти("РасчетыСКлиентамиПоДокументам") <> Неопределено Тогда

		Объект.Движения.РасчетыСКлиентамиПоДокументам.ДополнительныеСвойства.Вставить("РежимЗаписи", Объект.ДополнительныеСвойства.РежимЗаписи);

	КонецЕсли;
	
	Если Объект.Движения.Найти("РасчетыСПоставщикамиПоДокументам") <> Неопределено Тогда

		Объект.Движения.РасчетыСПоставщикамиПоДокументам.ДополнительныеСвойства.Вставить("РежимЗаписи", Объект.ДополнительныеСвойства.РежимЗаписи);

	КонецЕсли;
	
	Если Объект.Движения.Найти("ПартииПрочихРасходов") <> Неопределено Тогда

		Объект.Движения.ПартииПрочихРасходов.ДополнительныеСвойства.Вставить("ДляПроведения", 
						Новый Структура("СтруктураВременныеТаблицы", Объект.ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы));

	КонецЕсли;
	
	ДвиженияТоварыОрганизаций = Объект.Движения.Найти("ТоварыОрганизаций");
	ДвиженияПартииТоваровОрганизаций = Объект.Движения.Найти("ПартииТоваровОрганизаций");
	ДвиженияРасчетыСКлиентамиПоДокументам = Объект.Движения.Найти("РасчетыСКлиентамиПоДокументам");
	
	Если ДвиженияТоварыОрганизаций <> Неопределено
		И ДвиженияТоварыОрганизаций.Количество() = 0
		И ДвиженияТоварыОрганизаций.Записывать Тогда	
		
		Если ДвиженияПартииТоваровОрганизаций <> Неопределено Тогда
			ДвиженияПартииТоваровОрганизаций.Записывать = Истина;
		КонецЕсли;

		Если ДвиженияРасчетыСКлиентамиПоДокументам <> Неопределено Тогда
			ДвиженияРасчетыСКлиентамиПоДокументам.Записывать = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
	Объект.Движения.Записать();
	
КонецПроцедуры

Процедура УстановитьРежимПроведения(ДокументОбъект, РежимЗаписи, РежимПроведения) Экспорт

	Если ДокументОбъект.Проведен И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		РежимПроведения = РежимПроведенияДокумента.Неоперативный;
	КонецЕсли;

КонецПроцедуры

#КонецОбласти

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭкземплярБюджета.Ссылка,
	|	ЭкземплярБюджета.Дата,
	|	ЭкземплярБюджета.Статус,
	|	ЭкземплярБюджета.Организация,
	|	ЭкземплярБюджета.Подразделение,
	|	ЭкземплярБюджета.Сценарий,
	|	ЭкземплярБюджета.Сценарий.Валюта КАК ВалютаСценария,
	|	ЭкземплярБюджета.МодельБюджетирования,
	|	ЭкземплярБюджета.НачалоПериода,
	|	ЭкземплярБюджета.ОкончаниеПериода
	|ИЗ
	|	Документ.ЭкземплярБюджета КАК ЭкземплярБюджета
	|ГДЕ
	|	ЭкземплярБюджета.Ссылка = &Ссылка";
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Реквизиты = Запрос.Выполнить().Выбрать();
	Реквизиты.Следующий();
	
	КурсыСценария = Справочники.Сценарии.ТаблицаКурсовСценария(Реквизиты.Сценарий, , Реквизиты.НачалоПериода, Реквизиты.ОкончаниеПериода);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Курсы.Период,
	|	Курсы.Валюта,
	|	Курсы.Курс
	|ПОМЕСТИТЬ КурсыВалюты
	|ИЗ
	|	&КурсыСценария КАК Курсы
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Курсы.Валюта,
	|	Курсы.Период
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭкземплярБюджетаАналитикаСтатейБюджетов.СтатьяБюджетов,
	|	ЭкземплярБюджетаАналитикаСтатейБюджетов.Аналитика1,
	|	ЭкземплярБюджетаАналитикаСтатейБюджетов.Аналитика2,
	|	ЭкземплярБюджетаАналитикаСтатейБюджетов.Аналитика3,
	|	ЭкземплярБюджетаАналитикаСтатейБюджетов.Аналитика4,
	|	ЭкземплярБюджетаАналитикаСтатейБюджетов.Аналитика5,
	|	ЭкземплярБюджетаАналитикаСтатейБюджетов.Аналитика6,
	|	ЭкземплярБюджетаАналитикаСтатейБюджетов.Валюта,
	|	ЭкземплярБюджетаАналитикаСтатейБюджетов.ИдентификаторСтроки КАК ИдентификаторСтроки
	|ПОМЕСТИТЬ АналитикаСтатейБюджетов
	|ИЗ
	|	Документ.ЭкземплярБюджета.АналитикаСтатейБюджетов КАК ЭкземплярБюджетаАналитикаСтатейБюджетов
	|ГДЕ
	|	ЭкземплярБюджетаАналитикаСтатейБюджетов.Ссылка = &Ссылка
	|	И &Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыПланов.Отменен)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ИдентификаторСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОборотыПоСтатьямБюджетов.ПериодПланирования,
	|	ОборотыПоСтатьямБюджетов.ИдентификаторСтроки,
	|	ОборотыПоСтатьямБюджетов.Сумма КАК СуммаСценария,
	|	ОборотыПоСтатьямБюджетов.СуммаВВалюте,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА &ВалютаСценария = &ВалютаРегламентированногоУчета
	|				ТОГДА ОборотыПоСтатьямБюджетов.Сумма
	|			КОГДА АналитикаСтатейБюджетов.Валюта = &ВалютаРегламентированногоУчета
	|				ТОГДА ОборотыПоСтатьямБюджетов.СуммаВВалюте
	|			ИНАЧЕ ОборотыПоСтатьямБюджетов.СуммаВВалюте * (ЕСТЬNULL(КурсыВалютВалюты.Курс, 1) / ЕСТЬNULL(КурсыВалютыРегл.Курс, 1))
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаРегл,
	|	ВЫРАЗИТЬ(ВЫБОР
	|			КОГДА &ВалютаСценария = &ВалютаУправленческогоУчета
	|				ТОГДА ОборотыПоСтатьямБюджетов.Сумма
	|			КОГДА АналитикаСтатейБюджетов.Валюта = &ВалютаУправленческогоУчета
	|				ТОГДА ОборотыПоСтатьямБюджетов.СуммаВВалюте
	|			ИНАЧЕ ОборотыПоСтатьямБюджетов.СуммаВВалюте * (ЕСТЬNULL(КурсыВалютВалюты.Курс, 1) / ЕСТЬNULL(КурсыВалютыУпр.Курс, 1))
	|		КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаУпр,
	|	ОборотыПоСтатьямБюджетов.Количество,
	|	АналитикаСтатейБюджетов.СтатьяБюджетов,
	|	АналитикаСтатейБюджетов.Валюта,
	|	АналитикаСтатейБюджетов.Аналитика1 КАК Аналитика1,
	|	АналитикаСтатейБюджетов.Аналитика2 КАК Аналитика2,
	|	АналитикаСтатейБюджетов.Аналитика3 КАК Аналитика3,
	|	АналитикаСтатейБюджетов.Аналитика4 КАК Аналитика4,
	|	АналитикаСтатейБюджетов.Аналитика5 КАК Аналитика5,
	|	АналитикаСтатейБюджетов.Аналитика6 КАК Аналитика6
	|ПОМЕСТИТЬ СводнаяТаблицаДокумента
	|ИЗ
	|	Документ.ЭкземплярБюджета.ОборотыПоСтатьямБюджетов КАК ОборотыПоСтатьямБюджетов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ АналитикаСтатейБюджетов КАК АналитикаСтатейБюджетов
	|		ПО (АналитикаСтатейБюджетов.ИдентификаторСтроки = ОборотыПоСтатьямБюджетов.ИдентификаторСтроки)
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалюты КАК КурсыВалютВалюты
	|		ПО (КурсыВалютВалюты.Валюта = АналитикаСтатейБюджетов.Валюта)
	|			И (КурсыВалютВалюты.Период В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					КурсыФильтр.Период
	|				ИЗ
	|					КурсыВалюты КАК КурсыФильтр
	|				ГДЕ
	|					КурсыФильтр.Валюта = АналитикаСтатейБюджетов.Валюта
	|					И КурсыФильтр.Период <= ОборотыПоСтатьямБюджетов.ПериодПланирования
	|				УПОРЯДОЧИТЬ ПО
	|					КурсыФильтр.Период УБЫВ))
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалюты КАК КурсыВалютыУпр
	|		ПО (КурсыВалютыУпр.Валюта = &ВалютаУправленческогоУчета)
	|			И (КурсыВалютыУпр.Период В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					КурсыФильтр.Период
	|				ИЗ
	|					КурсыВалюты КАК КурсыФильтр
	|				ГДЕ
	|					КурсыФильтр.Валюта = &ВалютаУправленческогоУчета
	|					И КурсыФильтр.Период <= ОборотыПоСтатьямБюджетов.ПериодПланирования
	|				УПОРЯДОЧИТЬ ПО
	|					КурсыФильтр.Период УБЫВ))
	|		ЛЕВОЕ СОЕДИНЕНИЕ КурсыВалюты КАК КурсыВалютыРегл
	|		ПО (КурсыВалютыРегл.Валюта = &ВалютаРегламентированногоУчета)
	|			И (КурсыВалютыРегл.Период В
	|				(ВЫБРАТЬ ПЕРВЫЕ 1
	|					КурсыФильтр.Период
	|				ИЗ
	|					КурсыВалюты КАК КурсыФильтр
	|				ГДЕ
	|					КурсыФильтр.Валюта = &ВалютаРегламентированногоУчета
	|					И КурсыФильтр.Период <= ОборотыПоСтатьямБюджетов.ПериодПланирования
	|				УПОРЯДОЧИТЬ ПО
	|					КурсыФильтр.Период УБЫВ))
	|ГДЕ
	|	ОборотыПоСтатьямБюджетов.Ссылка = &Ссылка
	|	И &Статус <> ЗНАЧЕНИЕ(Перечисление.СтатусыПланов.Отменен)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ОборотыПоСтатьямБюджетов.ИдентификаторСтроки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВидыБюджетовАналитикиШапки.НомерСтроки,
	|	ВидыБюджетовАналитикиШапки.ВидАналитики
	|ПОМЕСТИТЬ АналитикиШапки
	|ИЗ
	|	Документ.ЭкземплярБюджета КАК ЭкземплярБюджета
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ВидыБюджетов.АналитикиШапки КАК ВидыБюджетовАналитикиШапки
	|		ПО (ВидыБюджетовАналитикиШапки.Ссылка = ЭкземплярБюджета.ВидБюджета)
	|ГДЕ
	|	ЭкземплярБюджета.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СводнаяТаблицаДокумента.СтатьяБюджетов
	|ПОМЕСТИТЬ СтатьиБюджета
	|ИЗ
	|	СводнаяТаблицаДокумента КАК СводнаяТаблицаДокумента
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СтатьиБюджета.СтатьяБюджетов,
	|	АналитикаШапки1.НомерСтроки КАК ИсточникАналитикаШапка1,
	|	АналитикаШапки2.НомерСтроки КАК ИсточникАналитикаШапка2,
	|	АналитикаШапки3.НомерСтроки КАК ИсточникАналитикаШапка3,
	|	АналитикаШапки4.НомерСтроки КАК ИсточникАналитикаШапка4,
	|	АналитикаШапки5.НомерСтроки КАК ИсточникАналитикаШапка5,
	|	АналитикаШапки6.НомерСтроки КАК ИсточникАналитикаШапка6
	|ПОМЕСТИТЬ ФлагиАналитикаИзШапки
	|ИЗ
	|	СтатьиБюджета КАК СтатьиБюджета
	|		ЛЕВОЕ СОЕДИНЕНИЕ АналитикиШапки КАК АналитикаШапки1
	|		ПО СтатьиБюджета.СтатьяБюджетов.ВидАналитики1 = АналитикаШапки1.ВидАналитики
	|		ЛЕВОЕ СОЕДИНЕНИЕ АналитикиШапки КАК АналитикаШапки2
	|		ПО СтатьиБюджета.СтатьяБюджетов.ВидАналитики2 = АналитикаШапки2.ВидАналитики
	|		ЛЕВОЕ СОЕДИНЕНИЕ АналитикиШапки КАК АналитикаШапки3
	|		ПО СтатьиБюджета.СтатьяБюджетов.ВидАналитики3 = АналитикаШапки3.ВидАналитики
	|		ЛЕВОЕ СОЕДИНЕНИЕ АналитикиШапки КАК АналитикаШапки4
	|		ПО СтатьиБюджета.СтатьяБюджетов.ВидАналитики4 = АналитикаШапки4.ВидАналитики
	|		ЛЕВОЕ СОЕДИНЕНИЕ АналитикиШапки КАК АналитикаШапки5
	|		ПО СтатьиБюджета.СтатьяБюджетов.ВидАналитики5 = АналитикаШапки5.ВидАналитики
	|		ЛЕВОЕ СОЕДИНЕНИЕ АналитикиШапки КАК АналитикаШапки6
	|		ПО СтатьиБюджета.СтатьяБюджетов.ВидАналитики6 = АналитикаШапки6.ВидАналитики
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФлагиАналитикаИзШапки.СтатьяБюджетов,
	|	ВЫБОР
	|		КОГДА ФлагиАналитикаИзШапки.ИсточникАналитикаШапка1 = 1
	|			ТОГДА ЭкземплярБюджета.Аналитика1
	|		КОГДА ФлагиАналитикаИзШапки.ИсточникАналитикаШапка1 = 2
	|			ТОГДА ЭкземплярБюджета.Аналитика2
	|		КОГДА ФлагиАналитикаИзШапки.ИсточникАналитикаШапка1 = 3
	|			ТОГДА ЭкземплярБюджета.Аналитика3
	|		КОГДА ФлагиАналитикаИзШапки.ИсточникАналитикаШапка1 = 4
	|			ТОГДА ЭкземплярБюджета.Аналитика4
	|		КОГДА ФлагиАналитикаИзШапки.ИсточникАналитикаШапка1 = 5
	|			ТОГДА ЭкземплярБюджета.Аналитика5
	|		КОГДА ФлагиАналитикаИзШапки.ИсточникАналитикаШапка1 = 6
	|			ТОГДА ЭкземплярБюджета.Аналитика6
	|	КОНЕЦ КАК АналитикаШапки1,
	|	ВЫБОР
	|		КОГДА ФлагиАналитикаИзШапки.ИсточникАналитикаШапка2 = 1
	|			ТОГДА ЭкземплярБюджета.Аналитика1
	|		КОГДА ФлагиАналитикаИзШапки.ИсточникАналитикаШапка2 = 2
	|			ТОГДА ЭкземплярБюджета.Аналитика2
	|		КОГДА ФлагиАналитикаИзШапки.ИсточникАналитикаШапка2 = 3
	|			ТОГДА ЭкземплярБюджета.Аналитика3
	|		КОГДА ФлагиАналитикаИзШапки.ИсточникАналитикаШапка2 = 4
	|			ТОГДА ЭкземплярБюджета.Аналитика4
	|		КОГДА ФлагиАналитикаИзШапки.ИсточникАналитикаШапка2 = 5
	|			ТОГДА ЭкземплярБюджета.Аналитика5
	|		КОГДА ФлагиАналитикаИзШапки.ИсточникАналитикаШапка2 = 6
	|			ТОГДА ЭкземплярБюджета.Аналитика6
	|	КОНЕЦ КАК АналитикаШапки2,
	|	ВЫБОР
	|		КОГДА ФлагиАналитикаИзШапки.ИсточникАналитикаШапка3 = 1
	|			ТОГДА ЭкземплярБюджета.Аналитика1
	|		КОГДА ФлагиАналитикаИзШапки.ИсточникАналитикаШапка3 = 2
	|			ТОГДА ЭкземплярБюджета.Аналитика2
	|		КОГДА ФлагиАналитикаИзШапки.ИсточникАналитикаШапка3 = 3
	|			ТОГДА ЭкземплярБюджета.Аналитика3
	|		КОГДА ФлагиАналитикаИзШапки.ИсточникАналитикаШапка3 = 4
	|			ТОГДА ЭкземплярБюджета.Аналитика4
	|		КОГДА ФлагиАналитикаИзШапки.ИсточникАналитикаШапка3 = 5
	|			ТОГДА ЭкземплярБюджета.Аналитика5
	|		КОГДА ФлагиАналитикаИзШапки.ИсточникАналитикаШапка3 = 6
	|			ТОГДА ЭкземплярБюджета.Аналитика6
	|	КОНЕЦ КАК АналитикаШапки3,
	|	ВЫБОР
	|		КОГДА ФлагиАналитикаИзШапки.ИсточникАналитикаШапка4 = 1
	|			ТОГДА ЭкземплярБюджета.Аналитика1
	|		КОГДА ФлагиАналитикаИзШапки.ИсточникАналитикаШапка4 = 2
	|			ТОГДА ЭкземплярБюджета.Аналитика2
	|		КОГДА ФлагиАналитикаИзШапки.ИсточникАналитикаШапка4 = 3
	|			ТОГДА ЭкземплярБюджета.Аналитика3
	|		КОГДА ФлагиАналитикаИзШапки.ИсточникАналитикаШапка4 = 4
	|			ТОГДА ЭкземплярБюджета.Аналитика4
	|		КОГДА ФлагиАналитикаИзШапки.ИсточникАналитикаШапка4 = 5
	|			ТОГДА ЭкземплярБюджета.Аналитика5
	|		КОГДА ФлагиАналитикаИзШапки.ИсточникАналитикаШапка4 = 6
	|			ТОГДА ЭкземплярБюджета.Аналитика6
	|	КОНЕЦ КАК АналитикаШапки4,
	|	ВЫБОР
	|		КОГДА ФлагиАналитикаИзШапки.ИсточникАналитикаШапка5 = 1
	|			ТОГДА ЭкземплярБюджета.Аналитика1
	|		КОГДА ФлагиАналитикаИзШапки.ИсточникАналитикаШапка5 = 2
	|			ТОГДА ЭкземплярБюджета.Аналитика2
	|		КОГДА ФлагиАналитикаИзШапки.ИсточникАналитикаШапка5 = 3
	|			ТОГДА ЭкземплярБюджета.Аналитика3
	|		КОГДА ФлагиАналитикаИзШапки.ИсточникАналитикаШапка5 = 4
	|			ТОГДА ЭкземплярБюджета.Аналитика4
	|		КОГДА ФлагиАналитикаИзШапки.ИсточникАналитикаШапка5 = 5
	|			ТОГДА ЭкземплярБюджета.Аналитика5
	|		КОГДА ФлагиАналитикаИзШапки.ИсточникАналитикаШапка5 = 6
	|			ТОГДА ЭкземплярБюджета.Аналитика6
	|	КОНЕЦ КАК АналитикаШапки5,
	|	ВЫБОР
	|		КОГДА ФлагиАналитикаИзШапки.ИсточникАналитикаШапка6 = 1
	|			ТОГДА ЭкземплярБюджета.Аналитика1
	|		КОГДА ФлагиАналитикаИзШапки.ИсточникАналитикаШапка6 = 2
	|			ТОГДА ЭкземплярБюджета.Аналитика2
	|		КОГДА ФлагиАналитикаИзШапки.ИсточникАналитикаШапка6 = 3
	|			ТОГДА ЭкземплярБюджета.Аналитика3
	|		КОГДА ФлагиАналитикаИзШапки.ИсточникАналитикаШапка6 = 4
	|			ТОГДА ЭкземплярБюджета.Аналитика4
	|		КОГДА ФлагиАналитикаИзШапки.ИсточникАналитикаШапка6 = 5
	|			ТОГДА ЭкземплярБюджета.Аналитика5
	|		КОГДА ФлагиАналитикаИзШапки.ИсточникАналитикаШапка6 = 6
	|			ТОГДА ЭкземплярБюджета.Аналитика6
	|	КОНЕЦ КАК АналитикаШапки6
	|ПОМЕСТИТЬ ОбщиеЗначенияАналитик
	|ИЗ
	|	Документ.ЭкземплярБюджета КАК ЭкземплярБюджета
	|		ЛЕВОЕ СОЕДИНЕНИЕ ФлагиАналитикаИзШапки КАК ФлагиАналитикаИзШапки
	|		ПО (ИСТИНА)
	|ГДЕ
	|	ЭкземплярБюджета.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	&Дата КАК Период,
	|	&МодельБюджетирования КАК МодельБюджетирования,
	|	&Статус КАК Статус,
	|	СводнаяТаблицаДокумента.ПериодПланирования КАК ПериодПланирования,
	|	СводнаяТаблицаДокумента.СтатьяБюджетов КАК СтатьяБюджетов,
	|	&Организация КАК Организация,
	|	&Подразделение КАК Подразделение,
	|	&Сценарий КАК Сценарий,
	|	СводнаяТаблицаДокумента.Валюта,
	|	ЕСТЬNULL(ОбщиеЗначенияАналитик.АналитикаШапки1, СводнаяТаблицаДокумента.Аналитика1) КАК Аналитика1,
	|	ЕСТЬNULL(ОбщиеЗначенияАналитик.АналитикаШапки2, СводнаяТаблицаДокумента.Аналитика2) КАК Аналитика2,
	|	ЕСТЬNULL(ОбщиеЗначенияАналитик.АналитикаШапки3, СводнаяТаблицаДокумента.Аналитика3) КАК Аналитика3,
	|	ЕСТЬNULL(ОбщиеЗначенияАналитик.АналитикаШапки4, СводнаяТаблицаДокумента.Аналитика4) КАК Аналитика4,
	|	ЕСТЬNULL(ОбщиеЗначенияАналитик.АналитикаШапки5, СводнаяТаблицаДокумента.Аналитика5) КАК Аналитика5,
	|	ЕСТЬNULL(ОбщиеЗначенияАналитик.АналитикаШапки6, СводнаяТаблицаДокумента.Аналитика6) КАК Аналитика6,
	|	СводнаяТаблицаДокумента.Количество,
	|	СводнаяТаблицаДокумента.СуммаСценария КАК СуммаСценария,
	|	СводнаяТаблицаДокумента.СуммаУпр КАК СуммаУпр,
	|	СводнаяТаблицаДокумента.СуммаРегл КАК СуммаРегл,
	|	СводнаяТаблицаДокумента.СуммаВВалюте КАК СуммаВВалюте
	|ИЗ
	|	СводнаяТаблицаДокумента КАК СводнаяТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ ОбщиеЗначенияАналитик КАК ОбщиеЗначенияАналитик
	|		ПО СводнаяТаблицаДокумента.СтатьяБюджетов = ОбщиеЗначенияАналитик.СтатьяБюджетов";
	
	СтруктураПараметров = Новый Структура("МодельБюджетирования", Реквизиты.МодельБюджетирования);
	ФормироватьБюджетыПоОрганизациям   = ПолучитьФункциональнуюОпцию("ФормироватьБюджетыПоОрганизациям", СтруктураПараметров);
	ФормироватьБюджетыПоПодразделениям = ПолучитьФункциональнуюОпцию("ФормироватьБюджетыПоПодразделениям", СтруктураПараметров);
	
	Запрос.УстановитьПараметр("Ссылка", 				Реквизиты.Ссылка);
	Запрос.УстановитьПараметр("Дата", 					Реквизиты.Дата);
	Запрос.УстановитьПараметр("Статус", 				Реквизиты.Статус);
	Запрос.УстановитьПараметр("КурсыСценария", 			КурсыСценария);
	Запрос.УстановитьПараметр("Сценарий", 				Реквизиты.Сценарий);
	Запрос.УстановитьПараметр("МодельБюджетирования", 	Реквизиты.МодельБюджетирования);
	
	Запрос.УстановитьПараметр("Организация", 	?(ФормироватьБюджетыПоОрганизациям, 	Реквизиты.Организация, Неопределено));
	Запрос.УстановитьПараметр("Подразделение", 	?(ФормироватьБюджетыПоПодразделениям, 	Реквизиты.Подразделение, Неопределено));
	
	Запрос.УстановитьПараметр("ВалютаСценария", 				Реквизиты.ВалютаСценария);
	Если уатОбщегоНазначенияТиповые.уатЕстьКонстанта("ВалютаУправленческогоУчета") Тогда
		ВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
	Иначе
		ВалютаУправленческогоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;
	Запрос.УстановитьПараметр("ВалютаУправленческогоУчета", 	ВалютаУправленческогоУчета);
	Запрос.УстановитьПараметр("ВалютаРегламентированногоУчета", Константы.ВалютаРегламентированногоУчета.Получить());
	
	Результат = Запрос.Выполнить();
	
	ДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаОборотыБюджетов", Результат.Выгрузить());
	
КонецПроцедуры

Процедура РассчитатьЭлементыСпискаБюджетаКДобавлению(ДобавляемыеЭлементы, ДобавляемыеКолонки, 
												КолонкиПоИзмерениям, ФиксированныеЗначения = Неопределено) Экспорт
	
	Для Каждого Измерение из КолонкиПоИзмерениям.Измерения Цикл
		
		ЭлементОтчета = КолонкиПоИзмерениям.НастройкиКолонок[Измерение];
		
		ИмяРеквизита = Измерение;
		НовыйРеквизит = Новый РеквизитФормы(ИмяРеквизита, 
											ЭлементОтчета.ТипЗначения, 
											"СписокРедактированияБюджета",
											ЭлементОтчета.Заголовок);
		
		ДобавляемыеЭлементы.Добавить(НовыйРеквизит);
		
		НоваяКолонка = Новый Структура("Имя, Тип, Родитель, Заголовок", 
									ИмяРеквизита, "ПолеФормы", 
									"СписокРедактированияБюджета", 
									ЭлементОтчета.Заголовок);
									
		Если ЭлементОтчета.Свойство("СвязиПараметровВыбора") Тогда
			НоваяКолонка.Вставить("СвязиПараметровВыбора", ЭлементОтчета.СвязиПараметровВыбора);
		КонецЕсли;
		
		Если ЭлементОтчета.Свойство("ПараметрыВыбора") Тогда
			НоваяКолонка.Вставить("ПараметрыВыбора", ЭлементОтчета.ПараметрыВыбора);
		КонецЕсли;
		
		Если ЭлементОтчета.Свойство("Формат") Тогда
			НоваяКолонка.Вставить("Формат", ЭлементОтчета.Формат);
		КонецЕсли;
		
		НастройкиВыбора = КолонкиПоИзмерениям.НастройкиВвода[Измерение];
		Если НастройкиВыбора <> Неопределено Тогда
			НоваяКолонка.Вставить("СписокВыбора", НастройкиВыбора);
			Если ФиксированныеЗначения <> Неопределено Тогда
				Если НастройкиВыбора.Количество() = 1 Тогда
					ФиксированныеЗначения.Вставить(Измерение, НастройкиВыбора[0].Значение);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Не Найти(Измерение, "Период") Тогда
			НоваяКолонка.Вставить("ТребуютсяПрочие");
			НоваяКолонка.Вставить("ПредставлениеПрочих", "<прочие " + НРег(НовыйРеквизит.Заголовок) + ">");
		КонецЕсли;
		
		ДобавляемыеКолонки.Добавить(НоваяКолонка);
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьКолонкиСпискаБюджетаПоТаблице(ДобавляемыеЭлементы, ДобавляемыеКолонки, КолонкиПоИзмерениям,
								СтруктураКолонок, СтруктураАналогРасшифровки, МассивУровней = Неопределено, РодительскаяКолонка = "") Экспорт
							
	Если МассивУровней = Неопределено Тогда
		МассивУровней = Новый Структура;
	КонецЕсли;
							
	Для Каждого КолонкаБюджета из СтруктураКолонок.Строки Цикл
		
		Если ЗначениеЗаполнено(КолонкаБюджета.ФиксированноеЗначение) Тогда
			МассивУровней.Вставить(КолонкаБюджета.ИмяИзмерения, КолонкаБюджета.ФиксированноеЗначение);
		КонецЕсли;
		
		ЛокальныйРодитель = РодительскаяКолонка;
		ТолькоПросмотр = ?(ЗначениеЗаполнено(ЛокальныйРодитель), ЛокальныйРодитель.ТолькоПросмотр, Ложь);
		
		НеВводимаяКолонка = ТолькоПросмотр
			ИЛИ КолонкаБюджета.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель
			ИЛИ КолонкаБюджета.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе;
			
		ИмяРеквизита = "Колонка_" + Формат(ДобавляемыеКолонки.Количество(), "ЧГ=");
		Если Не КолонкаБюджета.Строки.Количество() Тогда
			
			НовыйРеквизит = Новый РеквизитФормы(ИмяРеквизита, Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 2)), 
											"СписокРедактированияБюджета", КолонкаБюджета.НаименованиеДляПечати);
			ДобавляемыеЭлементы.Добавить(НовыйРеквизит);
			ТипКолонки = "ПолеФормы";
			
			ПутьККолонке = Новый Структура;
			Для Каждого КлючИЗначение из МассивУровней Цикл
				ПутьККолонке.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
			КонецЦикла;
			
			Если ЗначениеЗаполнено(КолонкаБюджета.ЭлементОтчета) Тогда
				ПутьККолонке.Вставить("Колонка", КолонкаБюджета.ЭлементОтчета);
			ИначеЕсли ЗначениеЗаполнено(РодительскаяКолонка) Тогда
				ПутьККолонке.Вставить("Колонка", РодительскаяКолонка.ЭлементОтчета);
			КонецЕсли;
			
			Если Найти(КолонкаБюджета.ИмяИзмерения, "#Показатель") Тогда
				ПутьККолонке.Вставить("ИмяПоказателя", СтрЗаменить(КолонкаБюджета.ИмяИзмерения, "#Показатель_", ""));
				Если ПутьККолонке.ИмяПоказателя = "Значение" Тогда
					НеВводимаяКолонка = Истина;
				КонецЕсли;
			КонецЕсли;
			
			СтатьиБюджетов = Неопределено;
			Если КолонкиПоИзмерениям.Свойство("СтатьиБюджетов", СтатьиБюджетов) Тогда
				СтруктураОписания = СтатьиБюджетов[ПутьККолонке.Колонка];
				СтатьяБюджетов = СтруктураОписания.СтатьяБюджетов;
				ИмяПоказателя = СтруктураОписания.ИмяПоказателя;
				Если Не ЗначениеЗаполнено(СтатьяБюджетов) Тогда
					НеВводимаяКолонка = Истина;
				Иначе
					ПутьККолонке.Вставить("СтатьяБюджетов", СтатьяБюджетов);
				КонецЕсли;
				ПутьККолонке.Вставить("ИмяПоказателя", ИмяПоказателя);
			КонецЕсли;
			
			Если НеВводимаяКолонка Тогда
				ПутьККолонке.Вставить("Расчетная", Истина);
			КонецЕсли;
			
			СтруктураАналогРасшифровки.Вставить(ИмяРеквизита, ПутьККолонке);
			
			ТипСтрока = Новый ОписаниеТипов("Строка", , Новый КвалификаторыСтроки(1000));
			НовыйРеквизит = Новый РеквизитФормы(ИмяРеквизита + "Примечание", ТипСтрока, "СписокРедактированияБюджета");
			ДобавляемыеЭлементы.Добавить(НовыйРеквизит);
			
			ТипКартинка = Новый ОписаниеТипов("Картинка");
			НовыйРеквизит = Новый РеквизитФормы(ИмяРеквизита + "КартинкаПримечание", ТипКартинка, "СписокРедактированияБюджета");
			ДобавляемыеЭлементы.Добавить(НовыйРеквизит);
			
			Если Не НеВводимаяКолонка Тогда
				
				ИмяРодителя = ?(ЗначениеЗаполнено(ЛокальныйРодитель), ЛокальныйРодитель.Имя, "СписокРедактированияБюджета");
				ОписаниеКолонки = Новый Структура("Имя, Тип, Родитель, ТолькоПросмотр, Заголовок, Группировка", 
													ИмяРеквизита + "ГруппаВвода", "ГруппаФормы", 
													ИмяРодителя, Ложь, НСтр("en='Ячейка ввода';ru='Ячейка ввода'"), ГруппировкаКолонок.ВЯчейке);
				
				ДобавляемыеКолонки.Добавить(ОписаниеКолонки);
				
				ЛокальныйРодитель = ОписаниеКолонки;
				
				ИмяРодителя = ЛокальныйРодитель.Имя;
				
				ЗаголовокКолонки = КолонкаБюджета.НаименованиеДляПечати + " (%1)";
				ЗаголовокКолонки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокКолонки, НСтр("en='картинка комментария';ru='картинка комментария'"));
				ОписаниеКолонки = Новый Структура("Имя, Тип, Родитель, ТолькоПросмотр, Заголовок, Вид", 
													ИмяРеквизита + "КартинкаПримечание", "ПолеФормы", ИмяРодителя, Ложь, 
													ЗаголовокКолонки, ВидПоляФормы.ПолеКартинки);
				
				ДобавляемыеКолонки.Добавить(ОписаниеКолонки);
				
			КонецЕсли;
			
		Иначе
			ТипКолонки = "ГруппаФормы";
		КонецЕсли;
		
		
		ИмяРодителя = ?(ЗначениеЗаполнено(ЛокальныйРодитель), ЛокальныйРодитель.Имя, "СписокРедактированияБюджета");
		ОписаниеКолонки = Новый Структура("Имя, Тип, Родитель, ТолькоПросмотр, Заголовок", 
											ИмяРеквизита, ТипКолонки, ИмяРодителя, НеВводимаяКолонка, КолонкаБюджета.НаименованиеДляПечати);
		ДобавляемыеКолонки.Добавить(ОписаниеКолонки);
		
		Если НеВводимаяКолонка Тогда
			ОписаниеКолонки.Вставить("ТолькоПросмотр", Истина);
		КонецЕсли;
		
		Если ТипКолонки = "ГруппаФормы" Тогда
			ОписаниеКолонки.Вставить("Заголовок", КолонкаБюджета.НаименованиеДляПечати);
		Иначе
			ОписаниеКолонки.Вставить("Формат", "ЧДЦ=2");
		КонецЕсли;
		
		ОписаниеКолонки.Вставить("ЭлементОтчета", КолонкаБюджета.ЭлементОтчета);
		
		ДобавитьКолонкиСпискаБюджетаПоТаблице(ДобавляемыеЭлементы, ДобавляемыеКолонки, КолонкиПоИзмерениям, КолонкаБюджета, 
													СтруктураАналогРасшифровки, МассивУровней, ОписаниеКолонки);
		
		Если ЗначениеЗаполнено(КолонкаБюджета.ФиксированноеЗначение) Тогда
			МассивУровней.Удалить(КолонкаБюджета.ИмяИзмерения);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтразитьИзмененияКолонокСпискаБюджетаНаФорме(Форма, ДобавляемыеЭлементы, ДобавляемыеКолонки, ФиксированныеЗначения = Неопределено) Экспорт
	
	Элементы = Форма.Элементы;
	УсловноеОформление = Форма.УсловноеОформление;
	
	УдаляемыеЭлементы = Новый Массив;
	Для Каждого УдаляемыйРеквизит из Форма.ПолучитьРеквизиты("СписокРедактированияБюджета") Цикл
		Если УдаляемыйРеквизит.Имя = "ИндексСтроки"
			ИЛИ УдаляемыйРеквизит.Имя = "Загружать"
			ИЛИ УдаляемыйРеквизит.Имя = "ВалютаВывода" Тогда
			Продолжить;
		КонецЕсли;
		УдаляемыеЭлементы.Добавить(УдаляемыйРеквизит.Путь + "." + УдаляемыйРеквизит.Имя);
	КонецЦикла;
	
	Форма.ИзменитьРеквизиты(ДобавляемыеЭлементы, УдаляемыеЭлементы);
	
	СписокЭлементов = Элементы.СписокРедактированияБюджета.ПодчиненныеЭлементы;
	ЕстьЧтоУдалять = Истина;
	Пока ЕстьЧтоУдалять Цикл
		Для Каждого Элемент из СписокЭлементов Цикл
			Если Элемент.Имя = "СписокРедактированияБюджетаЗагружать" Тогда
				Продолжить;
			КонецЕсли;
			Элементы.Удалить(Элемент);
		КонецЦикла;
		СписокЭлементов = Элементы.СписокРедактированияБюджета.ПодчиненныеЭлементы;
		Если СписокЭлементов.Количество() = 1 Тогда
			Если СписокЭлементов[0].Имя = "СписокРедактированияБюджетаЗагружать" Тогда
				ЕстьЧтоУдалять = Ложь;
			КонецЕсли;
		ИначеЕсли Не СписокЭлементов.Количество() Тогда
			ЕстьЧтоУдалять = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	УсловноеОформлениеКУдалению = Новый Массив;
	Для Каждого ЭлементУО из УсловноеОформление.Элементы Цикл
		Если Найти(ЭлементУО.Представление, "ДобавленноеУсловноеОформление_") Тогда
			УсловноеОформлениеКУдалению.Добавить(ЭлементУО);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементУО из УсловноеОформлениеКУдалению Цикл
		УсловноеОформление.Элементы.Удалить(ЭлементУО);
	КонецЦикла;
	
	Для Каждого Реквизит из ДобавляемыеКолонки Цикл
		Элемент = Элементы.Добавить(Реквизит.Имя, Тип(Реквизит.Тип), Элементы[Реквизит.Родитель]);
		Если Реквизит.Тип = "ПолеФормы" Тогда
			
			Элемент.ПутьКДанным = "СписокРедактированияБюджета." + Реквизит.Имя;
			
			Если Реквизит.Свойство("Вид") Тогда
				Элемент.Вид = Реквизит.Вид;
				Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
			Иначе
				Элемент.Вид = ВидПоляФормы.ПолеВвода;
				УстановитьДоступностьСписокВыбораКолонки(Элемент, Реквизит, ФиксированныеЗначения);
				Элемент.Заголовок = Реквизит.Заголовок;
			КонецЕсли;
			
			Если Реквизит.Свойство("СвязиПараметровВыбора") Тогда
			
				НоваяСвязь = Новый СвязьПараметраВыбора("Отбор." + Реквизит.СвязиПараметровВыбора.Отбор, Реквизит.СвязиПараметровВыбора.ПутьКДанным);
				НовыйМассив = Новый Массив();
				НовыйМассив.Добавить(НоваяСвязь);
				НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
				Элемент.СвязиПараметровВыбора = НовыеСвязи;
			
			КонецЕсли;
			
			Если Реквизит.Свойство("ПараметрыВыбора") Тогда
			
				НоваяСвязь = Новый ПараметрВыбора("Отбор." + Реквизит.ПараметрыВыбора.Отбор, Реквизит.ПараметрыВыбора.Значение);
				НовыйМассив = Новый Массив();
				НовыйМассив.Добавить(НоваяСвязь);
				НовыеСвязи = Новый ФиксированныйМассив(НовыйМассив);
				Элемент.ПараметрыВыбора = НовыеСвязи;
			
			КонецЕсли;
			
			Если Реквизит.Свойство("Формат") Тогда
				Элемент.Формат = Реквизит.Формат;
				Элемент.ФорматРедактирования = "ДФ=dd.MM.yyyy";
			КонецЕсли;
			
			Если Реквизит.Свойство("ТребуютсяПрочие") Тогда
				
				ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
				
				ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(Элемент.ПутьКДанным);
				ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
				
				Поле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
				Поле.Поле = Новый ПолеКомпоновкиДанных(Элемент.Имя);
				
				ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Серый);
				ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Текст", Реквизит.ПредставлениеПрочих);
				ЭлементУсловногоОформления.Представление = "ДобавленноеУсловноеОформление_Текст" + Элемент.Имя;
				
			КонецЕсли;
			
			Если Элемент.ТолькоПросмотр Тогда
				Продолжить;
			КонецЕсли;
			
			Если Реквизит.Свойство("ТолькоПросмотр") И Реквизит.ТолькоПросмотр Тогда
				
				Элемент.ТолькоПросмотр = Истина;
				
				ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
				
				Поле = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
				Поле.Поле = Новый ПолеКомпоновкиДанных(Элемент.Имя);
				
				ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", Новый Цвет(237, 237, 237));
				ЭлементУсловногоОформления.Представление = "ДобавленноеУсловноеОформление_Фон" + Элемент.Имя;
				
			Иначе
				
				Элемент.УстановитьДействие("ПриИзменении", "Подключаемый_СписокРедактированияБюджетаОсновнаяКолонкаПриИзменении");
				
			КонецЕсли;
			
		Иначе
			
			Если Реквизит.Свойство("Группировка") Тогда
				
				Элемент.Группировка = Реквизит.Группировка;
				
			Иначе
			
				Элемент.Заголовок = Реквизит.Заголовок;
				Элемент.ОтображатьВШапке = Истина;
				Элемент.Группировка = ГруппировкаКолонок.Горизонтальная;
				
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьДоступностьСписокВыбораКолонки(Элемент, Реквизит, ФиксированныеЗначения) Экспорт
	
	Элемент.ТолькоПросмотр = Ложь;
	
	Если ФиксированныеЗначения <> Неопределено Тогда
		Если ФиксированныеЗначения.Свойство(Реквизит.Имя) Тогда
			Элемент.ТолькоПросмотр = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Элемент.КнопкаВыбора = Истина;
	Элемент.РежимВыбораИзСписка = Ложь;
	Элемент.СписокВыбора.Очистить();
	
	Если Реквизит.Свойство("СписокВыбора") Тогда
		Элемент.КнопкаВыбора = Ложь;
		Элемент.РежимВыбораИзСписка = Истина;
		Для Каждого ЭлементСписка из Реквизит.СписокВыбора Цикл
			Элемент.СписокВыбора.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
		КонецЦикла;
	КонецЕсли;
	
	Возврат;
	
КонецПроцедуры

#Область ОбновлениеИнформационнойБазы

// Обработчик обновления УП 2.0.4.6
//
// Заполняет статус в Экземпляре бюджета и его движениях.
//
Процедура ЗаполнитьСтатусы() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭкземплярБюджета.Ссылка
	|ИЗ
	|	Документ.ЭкземплярБюджета КАК ЭкземплярБюджета
	|ГДЕ
	|	ЭкземплярБюджета.Статус = &Статус";
	Запрос.УстановитьПараметр("Статус", Перечисления.СтатусыПланов.ПустаяСсылка());
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НачатьТранзакцию();
		Попытка
			Объект = Выборка.Ссылка.ПолучитьОбъект();
			Объект.Статус = Перечисления.СтатусыПланов.Утвержден;
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
			
			НаборЗаписей = РегистрыНакопления.ОборотыБюджетов.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Регистратор.Установить(Выборка.Ссылка);
			НаборЗаписей.Прочитать();
			Для каждого Запись Из НаборЗаписей Цикл
				Запись.Статус = Перечисления.СтатусыПланов.Утвержден;
			КонецЦикла;
			
			ОбновлениеИнформационнойБазы.ЗаписатьДанные(НаборЗаписей);
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

// Обработчик обновления УП 2.0.5.0
//
Процедура ЗаполнитьНомерПоПорядку() Экспорт
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЭкземплярБюджета.Ссылка КАК Регистратор
		|ИЗ
		|	Документ.ЭкземплярБюджета КАК ЭкземплярБюджета";

	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();

	Пока Выборка.Следующий() Цикл
		Объект = Выборка.Регистратор.ПолучитьОбъект();
		Для Каждого СтрокаОборотов из Объект.ОборотыПоСтатьямБюджетов Цикл
			СтрокаОборотов.НомерПоПорядку = Объект.ОборотыПоСтатьямБюджетов.Индекс(СтрокаОборотов);
		КонецЦикла;
		ОбновлениеИнформационнойБазы.ЗаписатьДанные(Объект);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти


#КонецЕсли

#Область ОписаниеПеременных

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

&НаКлиенте
Перем ЯчейкаПослеВвода;

&НаКлиенте
Перем ПринудительноеЗавершение;

&НаКлиенте
Перем ОткрытДиалогВопросаДубли;

&НаКлиенте
Перем ИзмененияВСпискеОтраженыВДокументе;

#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	ДопПараметрыОткрытие = Новый Структура("НеПроверятьДоступ", Истина);
	уатЗащищенныеФункцииСервер.уатДокументФормаЭлементаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, Объект, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ПриЧтенииСозданииНаСервере();
	КонецЕсли;
	
	АдресКэшаПараметровСтатей = ПоместитьВоВременноеХранилище(Новый Соответствие, УникальныйИдентификатор);
	ПодготовитьПараметрыВыводаВидаБюджета();
	
	УстановитьДоступностьМоделиБюджетирования();
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	УстановитьПараметрыСценария();
	
	//// СтандартныеПодсистемы.ВерсионированиеОбъектов
	//ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	//// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	//// ИнтеграцияС1СДокументооборотом
	//ИнтеграцияС1СДокументооборот.ПриСозданииНаСервере(ЭтотОбъект);
	//// Конец ИнтеграцияС1СДокументооборотом
	
	ФайловаяИБ = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	
	Справочники.ВидыБюджетов.НастроитьГруппуЭлементовПериода(Объект.ВидБюджета, Элементы, Объект.ГраницаФактДанных);
	УстановитьПоляШапкиДокумента();
	
	СформироватьОтчетСервер();
	
	//СобытияФорм.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	ПредыдущаяСтрокаДереваЭлементов = -1;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	уатЗащищенныеФункцииКлиент.уатДокументФормаЭлементаПриОткрытии(Отказ, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	ЗапуститьПроверкуВыполненияОтчета();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииСозданииНаСервере()
	
	ПараметрыОпций = Новый Структура("МодельБюджетирования", Объект.МодельБюджетирования);
	УстановитьПараметрыФункциональныхОпцийФормы(ПараметрыОпций);
	ИспользоватьУтверждениеБюджетов = ПолучитьФункциональнуюОпциюФормы("ИспользоватьУтверждениеБюджетов");
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(Результат, ИсточникВыбора)
	
	Если ТипЗнч(Результат) = Тип("СправочникСсылка.ЭкземплярБюджетаПрисоединенныеФайлы") Тогда
		ЗагрузитьИзExcelНаКлиенте(Результат);
	КонецЕсли;
	
	Если ИсточникВыбора.ИмяФормы = "Документ.ЭкземплярБюджета.Форма.ФормаСопоставленияЗагружаемыхДанныхИзExcel" Тогда
		ЗагрузитьБюджетНаСервере(Результат);
		ОбновитьБюджет();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ПриЧтенииСозданииНаСервере();
	//МодификацияКонфигурацииПереопределяемый.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	ПроверитьДанныеПередЗаписью(ТекущийОбъект);

	//МодификацияКонфигурацииПереопределяемый.ПередЗаписьюНаСервере(ЭтотОбъект, Отказ, ТекущийОбъект, ПараметрыЗаписи);

КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"АвтоматическийПересчет",
		"Пометка",
		АвтоматическоеОбновлениеБюджета);
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	//МодификацияКонфигурацииПереопределяемый.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	Заглушка = Истина;

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Запись_ЭкземплярБюджета", , Объект.Ссылка);
	
	ЭлементыДерева = ДеревоЭлементовБюджета.ПолучитьЭлементы();
	Для Каждого СтрокаДерева из ЭлементыДерева Цикл
		Элементы.ДеревоЭлементовБюджета.Развернуть(СтрокаДерева.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
	//МодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтотОбъект, ПараметрыЗаписи);
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидБюджетаПриИзменении(Элемент)
	
	ПриИзмененииВидаБюджетаСервер();
	ОбновитьБюджет();
	
КонецПроцедуры

&НаКлиенте
Процедура МодельБюджетированияПриИзменении(Элемент)
	
	ПриИзмененииМоделиБюджетированияСервер();
	ОбновитьБюджет();
	
КонецПроцедуры

&НаКлиенте
Процедура СценарийПриИзменении(Элемент)
	
	ПриИзмененииСценарияСервер();
	ОбновитьБюджет();
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоПериодаПриИзменении(Элемент)
	
	Объект.ОкончаниеПериода = ?(Объект.НачалоПериода > Объект.ОкончаниеПериода, Объект.НачалоПериода, Объект.ОкончаниеПериода);
	ПриИзмененииПериодаСервер();
	ОбновитьБюджет();
	
КонецПроцедуры

&НаКлиенте
Процедура ОкончаниеПериодаПриИзменении(Элемент)
	
	Объект.НачалоПериода = ?(Объект.НачалоПериода > Объект.ОкончаниеПериода, Объект.ОкончаниеПериода, Объект.НачалоПериода);
	ПриИзмененииПериодаСервер();
	ОбновитьБюджет();
	
КонецПроцедуры

&НаКлиенте
Процедура БюджетПриИзмененииСодержимогоОбласти(Элемент, Область)
	
	УстановитьНадписьОбновленияИтогов(Истина);
	БюджетПриИзмененииСервер(Область.Имя);
	ЯчейкаПослеВвода = Истина;
	
	Если АвтоматическоеОбновлениеБюджета Тогда
		ЗапуститьПроверкуРасчетаИзменений();
	Иначе
		УстановитьНадписьОбновленияИтогов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БюджетОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		Если Не Расшифровка.Свойство("ИндексСтрокиДанных") И Расшифровка.Свойство("Значение") Тогда
			
			Если Расшифровка.Значение <> Неопределено Тогда
				ПоказатьЗначение(Новый ОписаниеОповещения("БюджетОбработкаРасшифровкиЗавершение", ЭтотОбъект), Расшифровка.Значение);
			КонецЕсли;
			
		Иначе
			
			Если Не Объект.ПометкаУдаления и ПроверитьЗаполнение() Тогда
				Если Модифицированность или Объект.Ссылка.Пустая() Тогда
					ОписаниеОповещения = Новый ОписаниеОповещения("ПослеСохраненияДокументаПередРасшифровкой", ЭтотОбъект);
					ТекстВопроса = НСтр("en='Расшифровка возможна только в проведенном документе. Провести документ?';ru='Расшифровка возможна только в проведенном документе. Провести документ?'");
					ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
				Иначе
					ПослеСохраненияДокументаПередРасшифровкой(КодВозвратаДиалога.Да, Неопределено);
				КонецЕсли;
			Иначе
				ТекстПредупреждения = НСтр("en='Расшифровка возможна только в проведенном документе';ru='Расшифровка возможна только в проведенном документе'");
				ПоказатьПредупреждение(, ТекстПредупреждения);
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БюджетОбработкаРасшифровкиЗавершение(ДополнительныеПараметры) Экспорт
	Заглушка = Истина;
КонецПроцедуры

&НаКлиенте
Процедура БюджетПриАктивизацииОбласти(Элемент)
	
	ТекущаяОбласть = Бюджет.ТекущаяОбласть;
	
	Если ЯчейкаПослеВвода = Истина Тогда
		Если ТекущаяОбласть.Лево = 1 Тогда
			// Это переход на новую строку - установим в качестве текущей области первую ячейку доступную для ввода
			ЕстьВводимыеЯчейкиВСтроке = Ложь;
			
			ВерхПоиска = ТекущаяОбласть.Верх;
			Пока Не ЕстьВводимыеЯчейкиВСтроке Цикл
				
				ПравоПоиска = ТекущаяОбласть.Право + 1;
				ЕстьКолонкиДляВвода = Ложь;
				Пока ПравоПоиска <= Бюджет.ШиринаТаблицы Цикл
					
					ОбластьСправа = Бюджет.Область(ВерхПоиска, ПравоПоиска);
					Если ОбластьСправа.СодержитЗначение Тогда
						ЕстьВводимыеЯчейкиВСтроке = Истина;
						Элементы.Бюджет.ТекущаяОбласть = ОбластьСправа;
						Прервать;
					КонецЕсли;
					ПравоПоиска = ПравоПоиска + 1;
					
				КонецЦикла;
				
				Если ЕстьВводимыеЯчейкиВСтроке Тогда
					Прервать;
				КонецЕсли;
				
				ВерхПоиска = ВерхПоиска + 1;
				Если ВерхПоиска > Бюджет.ВысотаТаблицы Тогда
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
		ИначеЕсли Не ТекущаяОбласть.СодержитЗначение Тогда
			
			ОбластьСнизуСлева = Бюджет.Область(ТекущаяОбласть.Верх + 1, ТекущаяОбласть.Лево - 1);
			Если ОбластьСнизуСлева.СодержитЗначение Тогда
				
				ЛевоПоиска = ОбластьСнизуСлева.Лево;
				Пока ЛевоПоиска >= 2 Цикл
					
					Область = Бюджет.Область(ОбластьСнизуСлева.Верх, ЛевоПоиска);
					Если Не Область.СодержитЗначение Тогда
						Прервать;
					КонецЕсли;
					ОбластьСлеваСнизу = Область;
					ЛевоПоиска = ЛевоПоиска - 1;
					
				КонецЦикла;
				Элементы.Бюджет.ТекущаяОбласть = ОбластьСлеваСнизу;
				
			Иначе
				
				ЛевоПоиска = ТекущаяОбласть.Лево + 1;
				ЕстьКолонкиДляВвода = Ложь;
				Пока ЛевоПоиска <= Бюджет.ШиринаСтраницы Цикл
					
					ОбластьСправа = Бюджет.Область(ТекущаяОбласть.Верх, ЛевоПоиска);
					Если ОбластьСправа.СодержитЗначение Тогда
						ЕстьКолонкиДляВвода = Истина;
						Прервать;
					КонецЕсли;
					ЛевоПоиска = ЛевоПоиска + 1;
					
				КонецЦикла;
				Если ЕстьКолонкиДляВвода Тогда
					
					// найдем первую доступную для ввода ячейку
					ОбластьВвода = ОбластьСправа;
					ВерхПоиска = ОбластьСправа.Верх;
					Пока Истина Цикл
						ОбластьСверху = Бюджет.Область(ВерхПоиска, ЛевоПоиска);
						Если Не ОбластьСверху.СодержитЗначение Тогда
							Прервать;
						Иначе
							ОбластьВвода = ОбластьСверху;
						КонецЕсли;
						ВерхПоиска = ВерхПоиска - 1;
					КонецЦикла;
					Элементы.Бюджет.ТекущаяОбласть = ОбластьВвода;
					
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	ЯчейкаПослеВвода = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидБюджетаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Перем ИспользоватьДляВводаПлана;
	
	Если Не ВидБюджетаОбработкаВыбораНаСервере(ВыбранноеЗначение, ИспользоватьДляВводаПлана) Тогда
		
		ВыбранноеЗначение = Неопределено;
		СтандартнаяОбработка = Ложь;
		ТекстПредупреждения = НСтр("en='Вид бюджета не доступен для выбора в экземпляре бюджета:"
"%1';ru='Вид бюджета не доступен для выбора в экземпляре бюджета:"
"%1'");
		Если ИспользоватьДляВводаПлана Тогда
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, 
																НСтр("en='Обнаружены ошибки';ru='Обнаружены ошибки'"));
		Иначе
			ТекстПредупреждения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстПредупреждения, 
																НСтр("en='Установите флаг ""Использовать для ввода плана""';ru='Установите флаг ""Использовать для ввода плана""'"));
		КонецЕсли;
		
		ПоказатьПредупреждение(, ТекстПредупреждения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОрганизацияПриИзмененииНаСервере();
	ОбновитьБюджет();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеПриИзменении(Элемент)
	
	ПодразделениеПриИзмененииНаСервере();
	ОбновитьБюджет();
	
КонецПроцедуры

&НаКлиенте
Процедура ГраницаФактДанныхНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура("ВидБюджета, НачалоПериода, ГраницаФактДанных", Объект.ВидБюджета, Объект.НачалоПериода, Объект.ГраницаФактДанных);
	ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьГраницуФакта", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.НастройкаГраницыФакта", ПараметрыФормы,,,,,
						ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоЭлементов

&НаКлиенте
Процедура ДеревоЭлементовБюджетаПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("УстановитьПараметрыСпискаВвода", 0.1, Истина);
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокРедактированияБюджета

&НаКлиенте
Процедура СписокРедактированияБюджетаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ИзмененияВСпискеОтраженыВДокументе = Ложь;
	
	Если НоваяСтрока Тогда
		ПараметрыРедактирования = ПолучитьИзВременногоХранилища(АдресПараметровРедактированияСтроки);
		ФиксированныеЗначения = ПараметрыРедактирования.ФиксированныеЗначения;
		Для Каждого КлючИЗначение из ФиксированныеЗначения Цикл
			Элемент.ТекущиеДанные[КлючИЗначение.Ключ] = КлючИЗначение.Значение;
		КонецЦикла;
		Для Каждого ИмяКолонки из ПараметрыРедактирования.ИзменяемыеИзмерения Цикл
			Если Найти(ИмяКолонки, "Период") Тогда
				
				Периодичность = СтрЗаменить(ИмяКолонки, "Период", "");
				Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность." + Периодичность);
				Элемент.ТекущиеДанные[ИмяКолонки] = БюджетированиеКлиентСервер.ДатаНачалаПериода(Объект.НачалоПериода, Периодичность);
				
			КонецЕсли;
		КонецЦикла;
		ОбновитьПередРасчетомСвязанных = Истина;
	Иначе
		ИзменяемыеКолонки = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(РедактируемыеКолонкиСписка);
		Расшифровка = Новый Структура();
		Для Каждого Измерение из ИзменяемыеКолонки Цикл
			Если Не ЗначениеЗаполнено(Элемент.ТекущиеДанные[Измерение]) Тогда
				Расшифровка.Вставить(Измерение, Неопределено);
			Иначе
				Расшифровка.Вставить(Измерение, Элемент.ТекущиеДанные[Измерение]);
			КонецЕсли;
		КонецЦикла;
		ПоместитьВоВременноеХранилище(Расшифровка, АдресРедактируемыхЗначенийСтрокиСписка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ВыполнитьПроверкиПередОкончаниемРедактирования(Элемент, Отказ, СтрокаБудетУдаленаАвтоматически)
	Перем РезультатПроверки;
	
	ЕстьОшибки = ЕстьОшибкиВСтрокеРедактированияБюджета(Элемент.ТекущаяСтрока, РезультатПроверки);
	Если ЕстьОшибки Тогда
		
		Если Не СтрокаБудетУдаленаАвтоматически Тогда
			
			Отказ = Истина;
			
			Если РезультатПроверки.Результат = "После ввода значения будет дубль" Тогда
				
				ДопПараметры = Новый Структура("Идентификатор", Элемент.ТекущаяСтрока);
				ОповещениеОРешении = Новый ОписаниеОповещения("ВыборУвеличенияСтроки", ЭтотОбъект, ДопПараметры);
				
				ПоказатьВопрос(ОповещениеОРешении, НСтр("en='Строка с такими полями уже существует. Объединить строки?"
"Да - объединить строки"
"Нет - удалить строку"
"Отмена - продолжить редактирование';ru='Строка с такими полями уже существует. Объединить строки?"
"Да - объединить строки"
"Нет - удалить строку"
"Отмена - продолжить редактирование'"), 
														РежимДиалогаВопрос.ДаНетОтмена);
				
				ОткрытДиалогВопросаДубли = Истина;
				
			ИначеЕсли РезультатПроверки.Результат = "Есть недоступные для ввода элемента" Тогда
				
				КолонкаСОшибкой 	= РезультатПроверки.КолонкаСОшибкой;
				
				ШаблонСообщения 	= НСтр("en='Значение не может быть выбрано в колонке ""%1""';ru='Значение не может быть выбрано в колонке ""%1""'");
				ЗаголовокКолонки 	= Элементы[КолонкаСОшибкой].Заголовок;
				ТекстСообщения 		= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, ЗаголовокКолонки);
				РедактируемаяСтрока = СписокРедактированияБюджета.НайтиПоИдентификатору(Элемент.ТекущаяСтрока);
				ИндексСтроки 		= СписокРедактированияБюджета.Индекс(РедактируемаяСтрока);
				Поле 				= ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("СписокРедактированияБюджета", ИндексСтроки + 1, КолонкаСОшибкой);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, Поле, "Объект");
				
			ИначеЕсли РезультатПроверки.Результат = "Отличается валюта аналитики" Тогда
				
				ШаблонСообщения 	= НСтр("en='По строке валюта ввода ""%1"" определена аналитикой. Ввод в другой валюте не допускается';ru='По строке валюта ввода ""%1"" определена аналитикой. Ввод в другой валюте не допускается'");
				ТекстСообщения 		= СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ШаблонСообщения, РезультатПроверки.ДопустимаяВалюта);
				РедактируемаяСтрока = СписокРедактированияБюджета.НайтиПоИдентификатору(Элемент.ТекущаяСтрока);
				ИндексСтроки 		= СписокРедактированияБюджета.Индекс(РедактируемаяСтрока);
				Поле 				= ОбщегоНазначенияКлиентСервер.ПутьКТабличнойЧасти("СписокРедактированияБюджета", ИндексСтроки + 1, КолонкаСОшибкой);
				
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения, Объект.Ссылка, Поле, "Объект");
				
			КонецЕсли;
		
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат РезультатПроверки;
	
КонецФункции

&НаКлиенте
Процедура СписокРедактированияБюджетаПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	
	Если ПринудительноеЗавершение = Истина Тогда
		ПринудительноеЗавершение = Ложь;
		Возврат;
	КонецЕсли;
	
	Если ОткрытДиалогВопросаДубли = Истина Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	СтрокаБудетУдаленаАвтоматически = НоваяСтрока И ОтменаРедактирования;
	
	// Что бы не было конфликтов пустых ссылок - приведем незаполненные значения к неопределено
	МассивРедактируемых = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(РедактируемыеКолонкиСписка);
	Для Каждого Измерение из МассивРедактируемых Цикл
		Если Не ЗначениеЗаполнено(Элемент.ТекущиеДанные[Измерение]) Тогда
			Элемент.ТекущиеДанные[Измерение] = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	// Если есть дубли - всегда алгоритм объединения строк
	// если нельзя редактировать текущую строку из отличия в валютах - выдаем предупреждение
	// если выбран неверный элемент - выдаем предупреждение
	РезультатПроверки = ВыполнитьПроверкиПередОкончаниемРедактирования(Элемент, Отказ, СтрокаБудетУдаленаАвтоматически);
	
	// На случай, если отмена от заполнения корректно заполненной строки
	Если РезультатПроверки.Результат <> "После ввода значения будет дубль" Тогда
		
		Если СтрокаБудетУдаленаАвтоматически Тогда
			
			УдалитьСвязанныеСтрокиБюджетаНаСервере(Элемент.ТекущаяСтрока);
			
			// Если изменили значения колонок - очистим предыдущие данные
		ИначеЕсли Не Отказ И Не НоваяСтрока Тогда
			
			ОчиститьДанныеИзменыемыхКолонок(Элемент.ТекущаяСтрока);
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокРедактированияБюджетаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	СтрокаБудетУдаленаАвтоматически = НоваяСтрока И ОтменаРедактирования;
	Если Не СтрокаБудетУдаленаАвтоматически Тогда
		Если Не ИзмененияВСпискеОтраженыВДокументе = Истина Тогда
			ОтразитьИзмененияВДанных(Элементы.СписокРедактированияБюджета.ТекущаяСтрока);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СписокРедактированияБюджетаОсновнаяКолонкаПриИзменении(Элемент)
	Перем РезультатПроверки;
	
	ИзмененияВСпискеОтраженыВДокументе = Ложь;
	Модифицированность = Истина;
	
	// Проверка дублей
	ИмяКолонки = Элементы.СписокРедактированияБюджета.ТекущийЭлемент.Имя;
	
	Если Найти(РедактируемыеКолонкиСписка, ИмяКолонки) Тогда
		
		Если Найти(ИмяКолонки, "Период") Тогда
			
			ТекущиеДанные = Элементы.СписокРедактированияБюджета.ТекущиеДанные;
			
			Периодичность = СтрЗаменить(ИмяКолонки, "Период", "");
			Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность." + Периодичность);
			
			Если ТекущиеДанные[ИмяКолонки] < Объект.НачалоПериода Тогда
				ТекущиеДанные[ИмяКолонки] = Макс(ТекущиеДанные[ИмяКолонки], Объект.НачалоПериода);
			ИначеЕсли ТекущиеДанные[ИмяКолонки] > Объект.ОкончаниеПериода Тогда
				ТекущиеДанные[ИмяКолонки] = Мин(ТекущиеДанные[ИмяКолонки], Объект.ОкончаниеПериода);
			КонецЕсли;
			
			ТекущиеДанные[ИмяКолонки] = БюджетированиеКлиентСервер.ДатаНачалаПериода(ТекущиеДанные[ИмяКолонки], Периодичность);
			
		КонецЕсли;
		
		ОбновитьПередРасчетомСвязанных = Истина;
		
	Иначе
		
		ТекущаяСтрока = Элементы.СписокРедактированияБюджета.ТекущаяСтрока;
		
		Если ЕстьОшибкиВСтрокеРедактированияБюджета(ТекущаяСтрока, РезультатПроверки) Тогда
			
			Если РезультатПроверки.Результат = "После ввода значения будет дубль" Тогда
			
				ДопПараметры = Новый Структура("ИмяКолонки, Идентификатор", ИмяКолонки, ТекущаяСтрока);
				ОповещениеОРешении = Новый ОписаниеОповещения("ВыборУвеличенияСтроки", ЭтотОбъект, ДопПараметры);
				
				ПоказатьВопрос(ОповещениеОРешении, НСтр("en='Строка с такими полями уже существует. Объединить строки?"
"Да - объединить строки"
"Нет - удалить строку"
"Отмена - продолжить редактирование';ru='Строка с такими полями уже существует. Объединить строки?"
"Да - объединить строки"
"Нет - удалить строку"
"Отмена - продолжить редактирование'"), 
														РежимДиалогаВопрос.ДаНетОтмена);
				ОткрытДиалогВопросаДубли = Истина;
			
			КонецЕсли;
			
			// об ошибке сообщим перед окончанием редактирования
			Возврат;
			
		КонецЕсли;
		
		ОтразитьИзмененияВДанных(Элементы.СписокРедактированияБюджета.ТекущаяСтрока, ИмяКолонки);
		ИзмененияВСпискеОтраженыВДокументе = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокРедактированияБюджетаПриАктивизацииЯчейки(Элемент)
	
	ТекущиеДанные = Элементы.СписокРедактированияБюджета.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ПримечаниеКЗначению = "";
		Элементы.СписокРедактированияГруппаПримечание.ТекущаяСтраница = Элементы.ВводПримечанияНедоступен;
		Возврат;
	КонецЕсли;
	
	ТекущийЭлементСписка = Элементы.СписокРедактированияБюджета.ТекущийЭлемент;
	ИмяКолонки = ТекущийЭлементСписка.Имя;
	МожноВводитьПримечание = Не Найти(РедактируемыеКолонкиСписка, ИмяКолонки) И Не ТекущийЭлементСписка.ТолькоПросмотр;
	
	Если МожноВводитьПримечание Тогда
		ПримечаниеКЗначению = ТекущиеДанные[ИмяКолонки + "Примечание"];
		Элементы.СписокРедактированияГруппаПримечание.ТекущаяСтраница = Элементы.МожноВводитьПримечание;
	Иначе
		ПримечаниеКЗначению = "";
		Элементы.СписокРедактированияГруппаПримечание.ТекущаяСтраница = Элементы.ВводПримечанияНедоступен;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокРедактированияБюджетаПередУдалением(Элемент, Отказ)
	
	УдалитьСвязанныеСтрокиБюджетаНаСервере(Элемент.ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВверх(Команда)
	
	ПереместитьНаСервере(-1);
	
КонецПроцедуры

&НаКлиенте
Процедура ПереместитьВниз(Команда)
	
	ПереместитьНаСервере(1);
	
КонецПроцедуры

&НаКлиенте
Процедура УпорядочитьПоВозрастанию(Команда)
	
	УпорядочитьНаСервере(Элементы.СписокРедактированияБюджета.ТекущийЭлемент.Имя, "ВОЗР");
	
КонецПроцедуры

&НаКлиенте
Процедура УпорядочитьПоУбыванию(Команда)
	
	УпорядочитьНаСервере(Элементы.СписокРедактированияБюджета.ТекущийЭлемент.Имя, "УБЫВ");
	
КонецПроцедуры

&НаКлиенте
Процедура ПримечаниеКЗначениюПриИзменении(Элемент)
	
	ИмяКолонки = Элементы.СписокРедактированияБюджета.ТекущийЭлемент.Имя;
	ТекущиеДанные = Элементы.СписокРедактированияБюджета.ТекущиеДанные;
	ТекущиеДанные[ИмяКолонки + "Примечание"] = ПримечаниеКЗначению;
	ОтразитьИзмененияВДанных(Элементы.СписокРедактированияБюджета.ТекущаяСтрока, ИмяКолонки);
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОбновитьБюджетИнтерактивно(Команда)
	
	СброситьКэшПараметров();
	ОбновитьБюджет(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИнтервал()
	
	ПроизвольныйПериод               = Новый СтандартныйПериод;
	ПроизвольныйПериод.Вариант       = ВариантСтандартногоПериода.ПроизвольныйПериод;
	ПроизвольныйПериод.ДатаНачала    = Объект.НачалоПериода;
	ПроизвольныйПериод.ДатаОкончания = Объект.ОкончаниеПериода;

	ДиалогВыбораПериода        = Новый ДиалогРедактированияСтандартногоПериода();
	ДиалогВыбораПериода.Период = ПроизвольныйПериод;
	
	ДиалогВыбораПериода.Показать(Новый ОписаниеОповещения("УстановитьИнтервалЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИнтервалЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Объект.НачалоПериода = Результат.ДатаНачала;
	Объект.ОкончаниеПериода = Результат.ДатаОкончания;
	
	ПриИзмененииПериодаСервер();
	ОбновитьБюджет();
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьСписком(Команда)
	Перем ИДГруппировки;
	
	Если Элементы.РедактироватьСписком.Заголовок = НСтр("en='Edit as a list';ru='Редактировать списком'") Тогда
		
		Расшифровка = Бюджет.Область(Бюджет.ТекущаяОбласть.Верх, 1).Расшифровка;
		Если ТипЗнч(Расшифровка) = Тип("Структура") 
			И Расшифровка.Свойство("ИДГруппировки", ИДГруппировки) Тогда
			
			НайденнаяСтрока = ФинансоваяОтчетностьКлиентСервер.ПодчиненныйЭлемент(ДеревоЭлементовБюджета, "ИДГруппировки", ИДГруппировки);
			Если НайденнаяСтрока <> Неопределено Тогда
				Элементы.ДеревоЭлементовБюджета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
			КонецЕсли;
			
		КонецЕсли;
		
	Иначе
		
		ТекущаяСтрока = Элементы.ДеревоЭлементовБюджета.ТекущаяСтрока;
		Если ТекущаяСтрока <> Неопределено Тогда
			ОбластьБюджета = ОбластьБюджетаПоСтроке(Бюджет, ДеревоЭлементовБюджета.НайтиПоИдентификатору(ТекущаяСтрока).ИДГруппировки);
			Если ОбластьБюджета <> Неопределено Тогда
				Элементы.Бюджет.ТекущаяОбласть = Бюджет.Область(ОбластьБюджета, 1);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	УстановитьСтраницу();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВExcel(Команда)
	Перем ИДТаблицы, КолонкиПоИзмерениям;
	
	Если Объект.Ссылка.Пустая() Тогда
		ПоказатьПредупреждение(, НСтр("en='Перед выгрузкой в эксель документ следует записать';ru='Перед выгрузкой в эксель документ следует записать'"));
		Возврат;
	КонецЕсли;
	
	Если Не МожноВыгрузитьТекущуюТаблицу(Бюджет.ТекущаяОбласть.Верх, ИДТаблицы, КолонкиПоИзмерениям) Тогда
		ПоказатьПредупреждение(, НСтр("en='Невозможно выгрузить текущую таблицу в однородный структурированный файл';ru='Невозможно выгрузить текущую таблицу в однородный структурированный файл'"));
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиент.ПредложитьУстановкуРасширенияРаботыСФайлами();
	
	ДопПараметры = Новый Структура("ИДТаблицы, КолонкиПоИзмерениям", ИДТаблицы, КолонкиПоИзмерениям);
	
	НачатьПодключениеРасширенияРаботыСФайлами(Новый ОписаниеОповещения("ВыгрузитьВExcelПродолжение", ЭтотОбъект, ДопПараметры));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВExcelПродолжение(Подключено, ДопПараметры) Экспорт
	
	Если Подключено Тогда
		Файл = СоздатьПрисоединенныйФайлXLS97(ДопПараметры.ИДТаблицы, ДопПараметры.КолонкиПоИзмерениям);
		
		Если Файл = Неопределено Тогда
			СообщениеОбОшибке = НСтр("en='Не удалось выгрузить бюджет в Excel.';ru='Не удалось выгрузить бюджет в Excel.'");
			ВызватьИсключение СообщениеОбОшибке;
		КонецЕсли;
		
		РаботаСФайламиКлиент.ОткрытьФормуФайла(Файл);
		
	Иначе
		ПоказатьПредупреждение(, НСтр("en='Расширение работы с файлами не подключено.';ru='Расширение работы с файлами не подключено.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзExcel(Команда)
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиент.ПредложитьУстановкуРасширенияРаботыСФайлами();
	
	НачатьПодключениеРасширенияРаботыСФайлами(Новый ОписаниеОповещения("ЗагрузитьИзExcelПродолжение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзExcelПродолжение(Подключено, ДопПараметры) Экспорт
	
	Если Подключено Тогда
		РаботаСФайламиКлиент.ОткрытьФормуВыбораФайлов(Объект.Ссылка, ЭтотОбъект);
	Иначе
		ПоказатьПредупреждение(, НСтр("en='Расширение работы с файлами не подключено.';ru='Расширение работы с файлами не подключено.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоДаннымБюджетирования(Команда)
	
	Реквизиты = ПодготовитьПараметрыЗаполненияТабличнойЧасти();
	Если ОбщегоНазначенияУТКлиент.ВозможноЗаполнениеТабличнойЧасти(ЭтотОбъект, Объект.ОборотыПоСтатьямБюджетов, Реквизиты) Тогда
		ЗаполнитьПоДаннымБюджетированияСервер();
	КонецЕсли;
	
	ЭлементыДерева = ДеревоЭлементовБюджета.ПолучитьЭлементы();
	Для Каждого СтрокаДерева из ЭлементыДерева Цикл
		Элементы.ДеревоЭлементовБюджета.Развернуть(СтрокаДерева.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьМоделиБюджетирования()
	
	КоличествоДействующихМоделей
		= Справочники.МоделиБюджетирования.КоличествоДействующихМоделейБюджетирования(Объект.НачалоПериода, Объект.ОкончаниеПериода);
		
	ОбщегоНазначенияУТКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы, 
		"МодельБюджетирования", 
		"Видимость", 
		КоличествоДействующихМоделей <> 1 Или Не ЗначениеЗаполнено(Объект.МодельБюджетирования));
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьДанныеПередЗаписью(ДанныеОбъекта)
	
	СформироватьОтчетСервер(Истина);
	
	СоответствиеНайденныхИД = Новый Соответствие;
	Для КоординатаХ = 1 по Бюджет.ШиринаТаблицы Цикл
		Для КоординатаУ = 1 по Бюджет.ВысотаСтраницы Цикл
			Расшифровка = Бюджет.Область(КоординатаУ, КоординатаХ).Расшифровка;
			Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда
				Расшифровка = ПреобразоватьРасшифровку(Расшифровка, Истина);
				Если Расшифровка = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				ИдентификаторСтроки = ИдентификаторАналитикиСтатейБюджетов(Расшифровка, Ложь);
				Если ИдентификаторСтроки <> Неопределено Тогда
					МассивПериодов = СоответствиеНайденныхИД[ИдентификаторСтроки];
					Если МассивПериодов = Неопределено Тогда
						МассивПериодов = Новый Массив;
						СоответствиеНайденныхИД.Вставить(ИдентификаторСтроки, МассивПериодов);
					КонецЕсли;
					МассивПериодов.Добавить(Расшифровка.ПериодПланирования);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	МассивНаУдаление = Новый Массив;
	Для Каждого СтрокаТаблицы из ДанныеОбъекта.АналитикаСтатейБюджетов Цикл
		Если СоответствиеНайденныхИД[СтрокаТаблицы.ИдентификаторСтроки] = Неопределено Тогда
			МассивНаУдаление.Добавить(Новый Структура("Таблица, Строка", "АналитикаСтатейБюджетов", СтрокаТаблицы));
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаТаблицы из ДанныеОбъекта.ОборотыПоСтатьямБюджетов Цикл
		МассивПериодов = СоответствиеНайденныхИД[СтрокаТаблицы.ИдентификаторСтроки];
		Если МассивПериодов = Неопределено Тогда
			МассивНаУдаление.Добавить(Новый Структура("Таблица, Строка", "ОборотыПоСтатьямБюджетов", СтрокаТаблицы));
			Продолжить;
		КонецЕсли;
		Если МассивПериодов.Найти(СтрокаТаблицы.ПериодПланирования) = Неопределено Тогда
			МассивНаУдаление.Добавить(Новый Структура("Таблица, Строка", "ОборотыПоСтатьямБюджетов", СтрокаТаблицы));
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТаблицаИСтрока из МассивНаУдаление Цикл
		ДанныеОбъекта[ТаблицаИСтрока.Таблица].Удалить(ТаблицаИСтрока.Строка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ИдентификаторАналитикиСтатейБюджетов(ДанныеПоиска, Добавлять = Истина)
	Перем ИдентификаторСтроки;
	
	СтруктураПоиска = Новый Структура("СтатьяБюджетов, Аналитика1, Аналитика2, 
										|Аналитика3, Аналитика4, Аналитика5, Аналитика6, Валюта");
	
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, ДанныеПоиска);
	
	Если ТипЗнч(ДанныеПоиска) = Тип("Структура") Тогда
		Если ДанныеПоиска.Свойство("ВалютаВывода") Тогда
			СтруктураПоиска.Валюта = ДанныеПоиска.ВалютаВывода;
		ИначеЕсли ДанныеПоиска.Свойство("Валюта") Тогда
			СтруктураПоиска.Валюта = ДанныеПоиска.Валюта;
		Иначе
			СтруктураПоиска.Валюта = ВалютаСценария;
		КонецЕсли;
	Иначе
		СтруктураПоиска.Валюта = ВалютаСценария;
	КонецЕсли;
	
	РезультатПоиска = Объект.АналитикаСтатейБюджетов.НайтиСтроки(СтруктураПоиска);
	Если РезультатПоиска.Количество() = 0 Тогда
		Если Добавлять Тогда
			СтрокаАналитикиСтатейБюджетов = Объект.АналитикаСтатейБюджетов.Добавить();
			ЗаполнитьЗначенияСвойств(СтрокаАналитикиСтатейБюджетов, СтруктураПоиска);
			СтрокаАналитикиСтатейБюджетов.ИдентификаторСтроки = Новый УникальныйИдентификатор;
			ИдентификаторСтроки = СтрокаАналитикиСтатейБюджетов.ИдентификаторСтроки;
		КонецЕсли;
	Иначе
		ИдентификаторСтроки = РезультатПоиска[0].ИдентификаторСтроки;
	КонецЕсли;
	
	Возврат ИдентификаторСтроки;
	
КонецФункции

&НаСервере
Процедура СброситьКэшПараметров()
	
	СтруктураПараметрыВыводаВидаБюджета = ПолучитьИзВременногоХранилища(ПараметрыВыводаВидаБюджета);
	Если СтруктураПараметрыВыводаВидаБюджета <> Неопределено Тогда
		СтруктураПараметрыВыводаВидаБюджета.КэшДанных.Очистить();
	КонецЕсли;
	ПоместитьВоВременноеХранилище(СтруктураПараметрыВыводаВидаБюджета, ПараметрыВыводаВидаБюджета);
	АдресТаблицыКурсов = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Функция ПодготовитьПараметрыЗаполненияТабличнойЧасти()
	
	Реквизиты = Новый Структура;
	Реквизиты.Вставить("МодельБюджетирования");
	Реквизиты.Вставить("НачалоПериода");
	Реквизиты.Вставить("ОкончаниеПериода");
	Реквизиты.Вставить("Сценарий");
	Реквизиты.Вставить("ВидБюджета");
	Если ПолучитьФункциональнуюОпциюФормы("ФормироватьБюджетыПоОрганизациям") Тогда
		Реквизиты.Вставить("Организация");
	КонецЕсли;
	//Если ПолучитьФункциональнуюОпциюФормы("ФормироватьБюджетыПоПодразделениям") Тогда
	//	Реквизиты.Вставить("Подразделение");
	//КонецЕсли;
	
	Возврат Реквизиты;
	
КонецФункции

&НаКлиенте
Процедура Вставить(Команда)
	Перем ТекстСообщения;
	
	Если Не ВставитьНаСервере(ТекстСообщения) Тогда
		ПоказатьПредупреждение(,ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	Если АвтоматическоеОбновлениеБюджета Тогда
		УстановитьНадписьОбновленияИтогов(Истина);
		ЗапуститьПроверкуРасчетаИзменений();
	Иначе
		УстановитьНадписьОбновленияИтогов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Копировать(Команда)
	
	КопироватьЯчейкиНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(Команда)
	
	ОчиститьЯчейкиНаСервере();
	
	Если АвтоматическоеОбновлениеБюджета Тогда
		УстановитьНадписьОбновленияИтогов(Истина);
		ЗапуститьПроверкуРасчетаИзменений();
	Иначе
		УстановитьНадписьОбновленияИтогов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьПоПериодам(Команда)
	
	СкопироватьПоПериодамНаСервере();
	
	Если Элементы.ПанельБюджет.ТекущаяСтраница = Элементы.Таблица Тогда
		
		ЗапуститьПроверкуВыполненияОтчета();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыполнитьПереопределяемуюКоманду(Команда)
	
	//СобытияФормКлиент.ВыполнитьПереопределяемуюКоманду(ЭтотОбъект, Команда);
	Заглушка = Истина;
	
КонецПроцедуры

// ИнтеграцияС1СДокументооборотом
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуИнтеграции(Команда)
	
	//ИнтеграцияС1СДокументооборотКлиент.ВыполнитьПодключаемуюКомандуИнтеграции(Команда, ЭтотОбъект, Объект);
	Заглушка = Истина;
	
КонецПроцедуры
//Конец ИнтеграцияС1СДокументооборотом

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьПоляШапкиДокумента()
	
	БюджетыПоПодразделениям = ПолучитьФункциональнуюОпциюФормы("ФормироватьБюджетыПоПодразделениям");
	БюджетыПоОрганизациям = ПолучитьФункциональнуюОпциюФормы("ФормироватьБюджетыПоОрганизациям");
	ЕстьГраницаФакта = Справочники.ВидыБюджетов.ВидБюджетаИспользуетГраницуФактическихДанных(Объект.ВидБюджета);
	
	Если БюджетыПоПодразделениям Тогда
		ПодразделениеВправо = Ложь;
		Если БюджетыПоОрганизациям Тогда
			Если Не ЕстьГраницаФакта Тогда
				ПодразделениеВправо = Истина;
			КонецЕсли;
		КонецЕсли;
		Элементы.ПодразделениеЛево.Видимость = Не ПодразделениеВправо;
		Элементы.ПодразделениеПраво.Видимость = ПодразделениеВправо;
	КонецЕсли;
	
	НачатьСПравойКолонки = (Число(БюджетыПоОрганизациям) + Число(БюджетыПоПодразделениям) + Число(ЕстьГраницаФакта)) % 2;
	ЛеваяКолонка = Не НачатьСПравойКолонки;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВидыБюджетовАналитикиШапки.НомерСтроки КАК НомерСтроки,
		|	ВидыБюджетовАналитикиШапки.ВидАналитики,
		|	ВидыБюджетовАналитикиШапки.ВидАналитики.ТипЗначения КАК ТипЗначения,
		|	ВидыБюджетовАналитикиШапки.ВидАналитики.Наименование КАК Наименование
		|ИЗ
		|	Справочник.ВидыБюджетов.АналитикиШапки КАК ВидыБюджетовАналитикиШапки
		|ГДЕ
		|	ВидыБюджетовАналитикиШапки.Ссылка = &ВидБюджета";
		
	Запрос.УстановитьПараметр("ВидБюджета", Объект.ВидБюджета);
		
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	СоответствиеЗависимыхТипов = ФинансоваяОтчетностьПовтИсп.СоответствиеОтборовПоВладельцу();
	
	Для Сч = 1 по 6 Цикл
		Элемент = Элементы.Найти("ШапкаАналитика" + Сч);
		Если Элемент <> Неопределено Тогда
			Элементы.Удалить(Элемент);
		КонецЕсли;
	КонецЦикла;
	
	МассивВышестоящих = Новый Массив;
	
	СписокАналитикШапки.Очистить();
	
	Пока Выборка.Следующий() Цикл
		
		СписокАналитикШапки.Добавить(Выборка.ВидАналитики);
		
		НомерАналитики = Выборка.НомерСтроки;
		Если ЛеваяКолонка Тогда
			НовыйЭлемент = Элементы.Добавить("ШапкаАналитика" + НомерАналитики, Тип("ПолеФормы"), Элементы.ГруппаШапкаЛево);
		Иначе
			НовыйЭлемент = Элементы.Добавить("ШапкаАналитика" + НомерАналитики, Тип("ПолеФормы"), Элементы.ГруппаШапкаПраво);
		КонецЕсли;
		НовыйЭлемент.ПутьКДанным = "Объект.Аналитика" + НомерАналитики;
		НовыйЭлемент.Заголовок = Выборка.Наименование;
		НовыйЭлемент.Вид = ВидПоляФормы.ПолеВвода;
		НовыйЭлемент.ОграничениеТипа = Выборка.ТипЗначения;
		НовыйЭлемент.УстановитьДействие("ПриИзменении", "Подключаемый_ПриИзмененииАналитикиШапки");
		НовыйЭлемент.РастягиватьПоГоризонтали = Ложь;
		НовыйЭлемент.Ширина = 28;
		НовыйЭлемент.ПодсказкаВвода = "<прочие>";
		
		ЛеваяКолонка = Не ЛеваяКолонка;
		
		МассивСвязей = Новый Массив();
		Для Каждого ВышестоящаяАналитика из МассивВышестоящих Цикл
			
			Для Каждого Тип из Выборка.ТипЗначения.Типы() Цикл
				
				ПараметрыВладельца = СоответствиеЗависимыхТипов[Тип];
				Если ПараметрыВладельца = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				ВВышестоящихАналитикахЕстьВладелец = Ложь;
				
				Для Каждого ПараметрВладельца из ПараметрыВладельца Цикл
					Если ВышестоящаяАналитика.Типы.Найти(ПараметрВладельца.Тип) = Неопределено Тогда
						ВВышестоящихАналитикахЕстьВладелец = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если Не ВВышестоящихАналитикахЕстьВладелец Тогда
					Продолжить;
				КонецЕсли;
			
				НоваяСвязь = Новый СвязьПараметраВыбора("Отбор." + ПараметрВладельца.Реквизит, "Объект.Аналитика" + ВышестоящаяАналитика.НомерАналитики);
				МассивСвязей.Добавить(НоваяСвязь);
			
			КонецЦикла;
		
		КонецЦикла;
		НовыеСвязи = Новый ФиксированныйМассив(МассивСвязей);
		НовыйЭлемент.СвязиПараметровВыбора = НовыеСвязи;
		
		МассивВышестоящих.Добавить(Новый Структура("НомерАналитики, Типы", НомерАналитики, Выборка.ТипЗначения.Типы()));
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииАналитикиШапки(Элемент)
	
	СброситьКэшПараметров();
	ОбновитьБюджет(Истина);
	
КонецПроцедуры

&НаСервере
Функция НайтиСтрокуОборотаПоРасшифровке(Расшифровка, ИмяПоказателя = Неопределено, 
										РасшифровкаАналитика = Неопределено, ТолькоНайти = Ложь)
	
	РасшифровкаАналитика = ПреобразоватьРасшифровку(Расшифровка, , ИмяПоказателя);
	ПериодПланирования   = РасшифровкаАналитика.ПериодПланирования;
	
	ИдентификаторСтроки  = ИдентификаторАналитикиСтатейБюджетов(РасшифровкаАналитика);
	
	Отбор = Новый Структура();
	Отбор.Вставить("ИдентификаторСтроки", ИдентификаторСтроки);
	Отбор.Вставить("ПериодПланирования", ПериодПланирования);
	РезультатПоиска = Объект.ОборотыПоСтатьямБюджетов.НайтиСтроки(Отбор);
	
	Если РезультатПоиска.Количество() = 0 Тогда
		
		Если ТолькоНайти Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		СтрокаОборот = Объект.ОборотыПоСтатьямБюджетов.Добавить();
		ЗаполнитьЗначенияСвойств(СтрокаОборот, Отбор);
		СтрокаОборот.НомерПоПорядку = МаксимальныйНомерПоПорядку() + 1;
		
	Иначе
		
		СтрокаОборот = РезультатПоиска[0];
		
	КонецЕсли;
	
	Возврат СтрокаОборот;
	
КонецФункции

&НаСервере
Функция МаксимальныйНомерПоПорядку()
	
	ТаблицаПорядковыйИндексВвода = Объект.ОборотыПоСтатьямБюджетов.Выгрузить();
	ТаблицаПорядковыйИндексВвода.Сортировать("НомерПоПорядку УБЫВ");
	Если ТаблицаПорядковыйИндексВвода.Количество() Тогда
		ИндексПорядковыйИндексВвода = ТаблицаПорядковыйИндексВвода[0].НомерПоПорядку;
	Иначе
		ИндексПорядковыйИндексВвода = 0;
	КонецЕсли;
	
	Возврат ИндексПорядковыйИндексВвода;
	
КонецФункции

&НаКлиенте
Процедура УстановитьГраницуФакта(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		Объект.ГраницаФактДанных = Результат;
		УстановитьГраницуФактаСервер();
		ОбновитьБюджет();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьГраницуФактаСервер()
	
	Справочники.ВидыБюджетов.НастроитьГруппуЭлементовПериода(Объект.ВидБюджета, Элементы, Объект.ГраницаФактДанных);
	СброситьКэшПараметров();
	
КонецПроцедуры


#Область ЗаполнениеБюджета

&НаСервере
Функция ДополнитьПараметрамиПериодами(ПараметрыДанных = Неопределено)
	
	Если ПараметрыДанных = Неопределено Тогда
		ПараметрыДанных = Новый Структура;
	КонецЕсли;
	
	ПараметрыДанных.Вставить("НачалоПериода", Объект.НачалоПериода);
	ПараметрыДанных.Вставить("КонецПериода", Объект.ОкончаниеПериода);
	ПараметрыДанных.Вставить("ГраницаФактДанных", Объект.ГраницаФактДанных);
	
	Возврат ПараметрыДанных;
	
КонецФункции	

&НаСервере
Функция ПодготовитьПараметрыОтчета(Заполнение = Ложь)
	
	ПараметрыДанных = Новый Структура;
	Если ПолучитьФункциональнуюОпциюФормы("ФормироватьБюджетыПоОрганизациям") Тогда
		ПараметрыДанных.Вставить("Организация", 	Объект.Организация);
	КонецЕсли;
	Если ПолучитьФункциональнуюОпциюФормы("ФормироватьБюджетыПоПодразделениям") Тогда
		ПараметрыДанных.Вставить("Подразделение", 	Объект.Подразделение);
	КонецЕсли;
	ПараметрыДанных.Вставить("Валюта", 		ВалютаСценария);
	ПараметрыДанных.Вставить("Сценарий", 	Объект.Сценарий);
	ПараметрыДанных.Вставить("Документ", 	Объект.Ссылка);
	ПараметрыДанных.Вставить("АналитикаСтатейБюджетов", Объект.АналитикаСтатейБюджетов.Выгрузить());
	ПараметрыДанных.Вставить("ОборотыПоСтатьямБюджетов", Объект.ОборотыПоСтатьямБюджетов.Выгрузить());
	ПараметрыДанных.Вставить("ДатаАктуальности", КонецДня(ТекущаяДата()));
	ПараметрыДанных.Вставить("ВариантСумм", Перечисления.ВариантыВыводаСуммВБюджетныхОтчетах.ВВалютеСценария);
	ПараметрыДанных.Вставить("ВалютаСценария", ВалютаСценария);
	
	СтатусыДанных = Новый СписокЗначений;
	СтатусыДанных.Добавить(Перечисления.СтатусыПланов.Утвержден);
	СтатусыДанных.Добавить(Перечисления.СтатусыПланов.НаУтверждении);
	СтатусыДанных.Добавить(Перечисления.СтатусыПланов.ВПодготовке);
	ПараметрыДанных.Вставить("Статус", СтатусыДанных);
	
	ПараметрыДанных.Вставить("ВидБюджета", Объект.ВидБюджета);
	Если Заполнение Тогда
		ПараметрыДанных.Вставить("РежимФормирования", Перечисления.РежимыФормированияБюджетныхОтчетов.Заполнение);
	Иначе
		ПараметрыДанных.Вставить("РежимФормирования", Перечисления.РежимыФормированияБюджетныхОтчетов.Документ);
	КонецЕсли;
	ПараметрыДанных.Вставить("ПараметрыВыводаВидаБюджета", ПолучитьИзВременногоХранилища(ПараметрыВыводаВидаБюджета));
	ПараметрыДанных.Вставить("ДанныеЯчеек", ПолучитьИзВременногоХранилища(АдресДанныхЯчеек));
	
	ДополнитьПараметрамиПериодами(ПараметрыДанных);
	
	ДополнительныеФильтрыПоАналитикам = Новый Структура;
	Для Каждого ВидАналитики из СписокАналитикШапки Цикл
		ИмяПоля = БюджетнаяОтчетностьСервер.ИмяПоляБюджетногоОтчета(ВидАналитики.Значение);
		ДополнительныеФильтрыПоАналитикам.Вставить(ИмяПоля);
		ПараметрыДанных.Вставить(ИмяПоля, Объект["Аналитика" + (СписокАналитикШапки.Индекс(ВидАналитики) + 1)]);
	КонецЦикла;
	
	ПараметрыДанных.Вставить("ДополнительныеФильтрыПоАналитикам", ДополнительныеФильтрыПоАналитикам);
	
	Возврат ПараметрыДанных;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьБюджет(ПересчитатьСвязанные = Ложь)
	
	ПродолжительностьПоследнегоРасчета = 0;
	СформироватьОтчетСервер(, ПересчитатьСвязанные);
	ЗапуститьПроверкуВыполненияОтчета();
	
КонецПроцедуры

&НаСервере
Процедура ПодготовитьПараметрыВыводаВидаБюджета()
	
	СтруктураПараметров = БюджетнаяОтчетностьСервер.ПолучитьПараметрыВыводаВидаБюджета(
		Объект.ВидБюджета, Перечисления.РежимыФормированияБюджетныхОтчетов.Документ);
		
	ПараметрыВыводаВидаБюджета = ПоместитьВоВременноеХранилище(СтруктураПараметров, УникальныйИдентификатор);
	
	АдресДанныхЯчеек = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	АдресПараметровРедактированияСтроки = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	АдресРедактируемыхЗначенийСтрокиСписка = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
	ЕстьПериодичность = Ложь;
	Если СтруктураПараметров <> Неопределено Тогда
		ЕстьПериодичность = СтруктураПараметров.СтруктураКолонокТаблицыДанных.Периодичности.Количество();
	КонецЕсли;
	Элементы.СкопироватьПоПериодам.Видимость = ЕстьПериодичность;
	Элементы.БюджетКонтекстноеМенюСкопироватьПоПериодам.Видимость = ЕстьПериодичность;
	Элементы.СписокРедактированияБюджетаКонтекстноеМенюСкопироватьПоПериодам.Видимость = ЕстьПериодичность;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоДаннымБюджетированияСервер()
	
	//Объект.АналитикаСтатейБюджетов.Очистить();
	//Объект.ОборотыПоСтатьямБюджетов.Очистить();
	//
	//// заполнение ячеек с автозаполнением
	//ПараметрыОтчета = ПодготовитьПараметрыОтчета(Истина);
	//БюджетнаяОтчетностьСервер.ПоместитьДанныеЭкземпляраБюджетаВХранилище(ПараметрыОтчета, АдресХранилища);
	//ДанныеЯчеек = ПолучитьИзВременногоХранилища(АдресХранилища).ДанныеЯчеек;
	//
	//СтрокиДанных = ДанныеЯчеек.НайтиСтроки(Новый Структура("ОсновнойЭлемент", Истина));
	//
	//ПараметрыВывода = БюджетнаяОтчетностьСервер.ПолучитьПараметрыВыводаВидаБюджета(Объект.ВидБюджета,
	//											Перечисления.РежимыФормированияБюджетныхОтчетов.Заполнение);
	//Периодичности = ПараметрыВывода.СтруктураКолонокТаблицыДанных.Периодичности;
	//ВидыАналитик = ПараметрыВывода.СтруктураКолонокТаблицыДанных.ВидыАналитик;
	//Измерения = ПараметрыВывода.СтруктураКолонокТаблицыДанных.Измерения;
	//ПараметрыЯчеек = ПараметрыВывода.СтруктураОписанияОтчета.ПараметрыЯчеек;
	//
	//ПараметрыПериода = БюджетнаяОтчетностьСервер.ПреобразоватьПараметрыДанныхВДанныеПериодов(
	//									ПараметрыВывода.СтруктураКолонокТаблицыДанных, ПараметрыОтчета);
	//
	//КэшРеквизитовСтатей = Новый Соответствие;
	//
	//Для Каждого СтрокаДанных из СтрокиДанных Цикл
	//	
	//	ПараметрыЯчейки = ПараметрыЯчеек.Найти(СтрокаДанных.ИндексСтроки, "ИндексСтроки");
	//	Если ПараметрыЯчейки.РасчетЗаполнение <> "заполнение" Тогда
	//		Продолжить;
	//	КонецЕсли;
	//	
	//	Расшифровка = Новый Структура;
	//	Расшифровка.Вставить("СтатьяБюджетов", СтрокаДанных.СтатьяБюджетов);
	//	Для Каждого Периодичность из Периодичности Цикл
	//		ИмяПоля = "Период" + Периодичность;
	//		Если ЗначениеЗаполнено(СтрокаДанных[ИмяПоля]) Тогда
	//			Расшифровка.Вставить(ИмяПоля, СтрокаДанных[ИмяПоля]);
	//		КонецЕсли;
	//	КонецЦикла;
	//	Для Каждого Измерение из Измерения Цикл
	//		Если ЗначениеЗаполнено(СтрокаДанных[Измерение]) Тогда
	//			Расшифровка.Вставить(Измерение, СтрокаДанных[Измерение]);
	//		КонецЕсли;
	//	КонецЦикла;
	//	Для Каждого ВидАналитики из ВидыАналитик Цикл
	//		ИмяПоля = БюджетнаяОтчетностьСервер.ИмяПоляБюджетногоОтчета(ВидАналитики);
	//		Если ЗначениеЗаполнено(СтрокаДанных[ИмяПоля]) Тогда
	//			Расшифровка.Вставить(ИмяПоля, СтрокаДанных[ИмяПоля]);
	//		КонецЕсли;
	//	КонецЦикла;
	//	
	//	ВалютаВывода = ВалютаВводаАналитики(Расшифровка, КэшРеквизитовСтатей);
	//	Если ЗначениеЗаполнено(ВалютаВывода) Тогда
	//		Расшифровка.Вставить("ВалютаВывода", ВалютаВывода);
	//	КонецЕсли;
	//	
	//	Если ПараметрыЯчейки.ФлагСумма Тогда
	//		Расшифровка.Вставить("ИмяПоказателя", "Сумма");
	//		Значение = БюджетнаяОтчетностьСервер.РассчитатьЗначениеЯчейки(ДанныеЯчеек, ПараметрыЯчеек, ПараметрыПериода, СтрокаДанных, "Сумма");
	//		ОтразитьИзменениеЯчейки(Расшифровка, Значение);
	//	КонецЕсли;
	//	
	//	Если ПараметрыЯчейки.ФлагКоличество Тогда
	//		Расшифровка.Вставить("ИмяПоказателя", "Количество");
	//		Значение = БюджетнаяОтчетностьСервер.РассчитатьЗначениеЯчейки(ДанныеЯчеек, ПараметрыЯчеек, ПараметрыПериода, СтрокаДанных, "Количество");
	//		ОтразитьИзменениеЯчейки(Расшифровка, Значение);
	//	КонецЕсли;
	//	
	//КонецЦикла;
	//
	
	//
	Перем Отказ, ТекстСообщения;
	
 	Объект.АналитикаСтатейБюджетов.Очистить();
	Объект.ОборотыПоСтатьямБюджетов.Очистить();
	
	ВалютаСценария = Объект.Сценарий.Валюта;
	ТребоватьУказанияКурсовДляКаждогоПериода = Объект.Сценарий.ТребоватьУказанияКурсовДляКаждогоПериода;
	
	СписокАналитикШапки = Новый СписокЗначений;
	СписокАналитикШапки.ЗагрузитьЗначения(Объект.ВидБюджета.АналитикиШапки.Выгрузить().ВыгрузитьКолонку("ВидАналитики"));
	
	ПараметрыВывода = БюджетнаяОтчетностьСервер.ПолучитьПараметрыВыводаВидаБюджета(Объект.ВидБюджета,
												Перечисления.РежимыФормированияБюджетныхОтчетов.Заполнение);
	
	ОбъектИПараметрыРасчета = СтруктураОбъектаДляРасчетаЯчейки();
	ОбъектИПараметрыРасчета.Объект = Объект;
	ОбъектИПараметрыРасчета.ВалютаСценария = ВалютаСценария;
	СтруктураПараметров = БюджетнаяОтчетностьСервер.ПолучитьПараметрыВыводаВидаБюджета(
		Объект.ВидБюджета, Перечисления.РежимыФормированияБюджетныхОтчетов.Документ);
		
	КэшПараметровСтатей = ПолучитьИзВременногоХранилища(АдресКэшаПараметровСтатей);
		
	//КэшПараметровСтатей = БюджетированиеСервер.ЗаполнитьКэшПараметровСтатей(СтруктураПараметров);
	ОбъектИПараметрыРасчета.КэшПараметровСтатей = КэшПараметровСтатей;
	ОбъектИПараметрыРасчета.ТребоватьУказанияКурсовДляКаждогоПериода = ТребоватьУказанияКурсовДляКаждогоПериода;
	ОбъектИПараметрыРасчета.ПараметрыВыводаВидаБюджета = ПоместитьВоВременноеХранилище(ПараметрыВывода);
	
	//ТаблицаКурсов = БюджетнаяОтчетностьВызовСервера.ТаблицаКурсов(ОбъектИПараметрыРасчета, ПараметрыВывода, Отказ, ТекстСообщения);
	
	//АдресТаблицыКурсов = ПоместитьВоВременноеХранилище(ТаблицаКурсов);
	
	ОбъектИПараметрыРасчета.АдресТаблицыКурсов = АдресТаблицыКурсов;
	
	// заполнение ячеек с автозаполнением
	РежимФормирования = Перечисления.РежимыФормированияБюджетныхОтчетов.Заполнение;
	//ПараметрыОтчета = ПараметрыВыводаВидаБюджетаВТабличныйДокумент(Объект, СписокАналитикШапки, ВалютаСценария, 
	//		ПараметрыВывода, РежимФормирования);
	ПараметрыОтчета = ПодготовитьПараметрыОтчета();
	
	ДанныеЭкземпляраБюджета = БюджетнаяОтчетностьСервер.ДанныеЭкземпляраБюджета(ПараметрыОтчета);
	ДанныеЯчеек = ДанныеЭкземпляраБюджета.ДанныеЯчеек;
	
	СтрокиДанных = ДанныеЯчеек.НайтиСтроки(Новый Структура("ОсновнойЭлемент", Истина));
	
	Периодичности = ПараметрыВывода.СтруктураКолонокТаблицыДанных.Периодичности;
	ВидыАналитик = ПараметрыВывода.СтруктураКолонокТаблицыДанных.ВидыАналитик;
	Измерения = ПараметрыВывода.СтруктураКолонокТаблицыДанных.Измерения;
	ПараметрыЯчеек = ПараметрыВывода.СтруктураОписанияОтчета.ПараметрыЯчеек;
	
	ПараметрыПериода = БюджетнаяОтчетностьСервер.ПреобразоватьПараметрыДанныхВДанныеПериодов(
										ПараметрыВывода.СтруктураКолонокТаблицыДанных, ПараметрыОтчета);
	
	КэшРеквизитовСтатей = Новый Соответствие;
	
	Для Каждого СтрокаДанных из СтрокиДанных Цикл
		
		ПараметрыЯчейки = ПараметрыЯчеек.Найти(СтрокаДанных.ИндексСтроки, "ИндексСтроки");
		Если ПараметрыЯчейки.РасчетЗаполнение <> "заполнение" Тогда
			Продолжить;
		КонецЕсли;
		
		Расшифровка = Новый Структура;
		Расшифровка.Вставить("СтатьяБюджетов", СтрокаДанных.СтатьяБюджетов);
		Расшифровка.Вставить("Строка", СтрокаДанных.Строка);
		
		Для Каждого Периодичность из Периодичности Цикл
			ИмяПоля = "Период" + Периодичность;
			Если ЗначениеЗаполнено(СтрокаДанных[ИмяПоля]) Тогда
				Расшифровка.Вставить(ИмяПоля, СтрокаДанных[ИмяПоля]);
			КонецЕсли;
		КонецЦикла;
		Для Каждого Измерение из Измерения Цикл
			Если ЗначениеЗаполнено(СтрокаДанных[Измерение]) Тогда
				Расшифровка.Вставить(Измерение, СтрокаДанных[Измерение]);
			КонецЕсли;
		КонецЦикла;
		
		ЗначенияАналитик = Новый Соответствие;
		Расшифровка.Вставить("ЗначенияАналитик", ЗначенияАналитик);
		Для Каждого ВидАналитики из ВидыАналитик Цикл
			ИмяПоля = ФинансоваяОтчетностьПовтИсп.ИмяПоляБюджетногоОтчета(ВидАналитики);
				ЗначенияАналитик.Вставить(ВидАналитики, СтрокаДанных[ИмяПоля]);
		КонецЦикла;
		
		ВалютаВывода = ВалютаВводаАналитики(Расшифровка, КэшРеквизитовСтатей);
		Если ЗначениеЗаполнено(ВалютаВывода) Тогда
			Расшифровка.Вставить("Валюта", ВалютаВывода);
		КонецЕсли;
		
		Если ПараметрыЯчейки.ФлагСумма Тогда
			Расшифровка.Вставить("ИмяПоказателя", "Сумма");
			Значение = БюджетнаяОтчетностьСервер.РассчитатьЗначениеЯчейки(ДанныеЯчеек, ПараметрыЯчеек, ПараметрыПериода, СтрокаДанных, "Сумма");
			Если ТипЗнч(Значение) = Тип("Число") Тогда
				Значение = Значение * ?(ПараметрыЯчейки.ОбратныйЗнак, -1, 1);
			КонецЕсли;
	
			РезультатОтражения = БюджетнаяОтчетностьКлиентСервер.ОтразитьИзменениеЯчейки(ОбъектИПараметрыРасчета, Расшифровка, Значение,,Истина);
			
			РасшифровкаРасчета = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(Расшифровка);
			РасшифровкаРасчета.Удалить("ЗначенияАналитик");
			РасшифровкаРасчета.Удалить("Валюта");
			РезультатВыполнения = БюджетнаяОтчетностьСервер.РассчитатьСвязанныеСтатьиБюджетов(ПараметрыВывода, ДанныеЯчеек, ПараметрыОтчета,
																												РасшифровкаРасчета, РезультатОтражения);
			Если РезультатВыполнения <> Неопределено Тогда
				Для Каждого Изменение из РезультатВыполнения.Результат Цикл
					Значение = ?(ЗначениеЗаполнено(Изменение.Значение), Изменение.Значение, Неопределено);
					БюджетнаяОтчетностьКлиентСервер.ОтразитьИзменениеЯчейки(ОбъектИПараметрыРасчета, Изменение.Расшифровка, Значение,,Истина);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыЯчейки.ФлагКоличество Тогда
			Расшифровка.Вставить("ИмяПоказателя", "Количество");
			Значение = БюджетнаяОтчетностьСервер.РассчитатьЗначениеЯчейки(ДанныеЯчеек, ПараметрыЯчеек, ПараметрыПериода, СтрокаДанных, "Количество");
			Если ТипЗнч(Значение) = Тип("Число") Тогда
				Значение = Значение * ?(ПараметрыЯчейки.ОбратныйЗнак, -1, 1);
			КонецЕсли;

			РезультатОтражения = БюджетнаяОтчетностьКлиентСервер.ОтразитьИзменениеЯчейки(ОбъектИПараметрыРасчета, Расшифровка, Значение,,Истина);
			
			РасшифровкаРасчета = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(Расшифровка);
			РасшифровкаРасчета.Удалить("ЗначенияАналитик");
			РезультатВыполнения = БюджетнаяОтчетностьСервер.РассчитатьСвязанныеСтатьиБюджетов(ПараметрыВывода, ДанныеЯчеек, ПараметрыОтчета,
																												РасшифровкаРасчета, РезультатОтражения);
			Если РезультатВыполнения <> Неопределено Тогда
				Для Каждого Изменение из РезультатВыполнения.Результат Цикл
					Значение = ?(ЗначениеЗаполнено(Изменение.Значение), Изменение.Значение, Неопределено);
					БюджетнаяОтчетностьСервер.ОтразитьИзменениеЯчейки(ОбъектИПараметрыРасчета, Изменение.Расшифровка, Значение,,Истина);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	
	СформироватьОтчетСервер(Истина, Истина);
	
КонецПроцедуры

&НаСервере
Процедура ОтразитьИзмененияБюджета(Режим = "")
	
	Если Элементы.Бюджет.ОтображениеСостояния.Видимость Тогда
		// бюджет не сформирован
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьДанныеЯчеек = Режим = "ОбновитьДанныеЯчеек";
	ЕстьИзмененияКОтражению = Ложь;
	ПараметрыОтчета = ПодготовитьПараметрыОтчета();
	
	//Если ФайловаяИБ ИЛИ ОбновитьДанныеЯчеек Тогда
		
		ИзмененияЭкземпляраБюджета = БюджетнаяОтчетностьСервер.ИзмененияЭкземпляраБюджета(ПараметрыОтчета);
		РезультатВыполнения = Новый Структура("ЗаданиеВыполнено", Истина);
		
	//Иначе
	//	
	//	РезультатВыполнения = ЗапуститьВыполнениеВФоне(
	//							УникальныйИдентификатор,
	//							"БюджетнаяОтчетностьСервер.ПоместитьИзмененияЭкземпляраБюджетаВХранилище",
	//							ПараметрыОтчета,
	//							НСтр("en='Подготовка бюджета';ru='Подготовка бюджета'"));
	//		
	//	ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
	//	
	//	Попытка
	//		РезультатВыполнения.Задание.ОжидатьЗавершения(0.7);
	//		Если ДлительныеОперации.ЗаданиеВыполнено(РезультатВыполнения.ИдентификаторЗадания) Тогда
	//			РезультатВыполнения.ЗаданиеВыполнено = Истина;
	//		КонецЕсли;
	//	Исключение
	//	КонецПопытки;
	//	
	//КонецЕсли;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		
		ЗагрузитьРезультатРасчетаИзменений(Режим, ИзмененияЭкземпляраБюджета);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьОтчетСервер(Непосредственно = Ложь, ПересчитатьСвязанные = Ложь)
	
	Если Не МожноОбновитьБюджет() Тогда
		Возврат;
	КонецЕсли;
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	ПараметрыОтчета = ПодготовитьПараметрыОтчета();
	Если ПересчитатьСвязанные Тогда
		ИзмененияЭкземпляраБюджета = БюджетнаяОтчетностьСервер.РассчитатьСвязанныеСтатьиБюджетов(ПараметрыВыводаВидаБюджета, АдресДанныхЯчеек, ПараметрыОтчета,
																				Неопределено, Неопределено, АдресХранилища, Истина);
		ЗагрузитьРезультатРасчетаИзменений(, ИзмененияЭкземпляраБюджета);
		ПараметрыОтчета = ПодготовитьПараметрыОтчета();
	КонецЕсли;
	
	ИдентификаторЗадания = Неопределено;
	
	//Если ФайловаяИБ ИЛИ Непосредственно Тогда
		ДанныеЭкземпляраБюджета = БюджетнаяОтчетностьСервер.ДанныеЭкземпляраБюджета(ПараметрыОтчета);
		РезультатВыполнения = Новый Структура("ЗаданиеВыполнено", Истина);
	//Иначе
	//	РезультатВыполнения = ЗапуститьВыполнениеВФоне(
	//							УникальныйИдентификатор,
	//							"БюджетнаяОтчетностьСервер.ПоместитьДанныеЭкземпляраБюджетаВХранилище",
	//							ПараметрыОтчета,
	//							НСтр("en='Подготовка бюджета';ru='Подготовка бюджета'"));
	//		
	//	ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
	//КонецЕсли;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанные(ДанныеЭкземпляраБюджета);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Бюджет, "ФормированиеОтчета");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция МожноОбновитьБюджет()
	Перем Отказ, ТекстСообщения;
	
	НезаполненныеПоля = Новый Массив;
	Если Не ЗначениеЗаполнено(Объект.ВидБюджета) Тогда
		НезаполненныеПоля.Добавить(НСтр("en='Budget type';ru='Вид бюджета'"));
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Сценарий) Тогда
		НезаполненныеПоля.Добавить(НСтр("en='Script';ru='Сценарий'"));
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.НачалоПериода) Или Не ЗначениеЗаполнено(Объект.ОкончаниеПериода) Тогда
		НезаполненныеПоля.Добавить(НСтр("en='Period';ru='Период'"));
	КонецЕсли;
	
	ОтображениеСостояния = Элементы.Бюджет.ОтображениеСостояния;
	
	Если НезаполненныеПоля.Количество() > 0 Тогда
		
		Бюджет.Очистить();
		
		ШаблонСообщенияСостояния = ?(НезаполненныеПоля.Количество() = 1,
			НСтр("en='Заполните поле %СписокПолей';ru='Заполните поле %СписокПолей'"), НСтр("en='Заполните поля: %СписокПолей';ru='Заполните поля: %СписокПолей'"));
			
		ОтображениеСостояния.Видимость  = Истина;
		ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;
		ОтображениеСостояния.Картинка   = Новый Картинка;
		ОтображениеСостояния.Текст  = 
			СтрЗаменить(ШаблонСообщенияСостояния, 
				"%СписокПолей", 
				СтрСоединить(НезаполненныеПоля, ", "));
				
		Возврат Ложь;
		
	Иначе
		
		ПроверитьЗаполнитьТаблицуКурсов(Отказ, ТекстСообщения);
		
		Если Отказ = Истина Тогда
			
			Бюджет.Очистить();
			
			ОтображениеСостояния.Видимость  = Истина;
			ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;
			ОтображениеСостояния.Картинка   = Новый Картинка;
			ОтображениеСостояния.Текст  = ТекстСообщения;
			
			Возврат Ложь;
			
		КонецЕсли;
		
	КонецЕсли;
	
	ОтображениеСостояния.Видимость = Ложь;
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти


#Область ОбработчикиСобытийЭлементовСервер

&НаСервере
Процедура ПриИзмененииСценарияСервер()
	
	УстановитьПараметрыСценария();
	СброситьКэшПараметров();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииМоделиБюджетированияСервер()
	
	ПараметрыОпций = Новый Структура("МодельБюджетирования", Объект.МодельБюджетирования);
	УстановитьПараметрыФункциональныхОпцийФормы(ПараметрыОпций);
	ИспользоватьУтверждениеБюджетов = ПолучитьФункциональнуюОпциюФормы("ИспользоватьУтверждениеБюджетов");
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииВидаБюджетаСервер()
	
	Объект.ОборотыПоСтатьямБюджетов.Очистить();
	Объект.АналитикаСтатейБюджетов.Очистить();
	ПодготовитьПараметрыВыводаВидаБюджета();
	
	Справочники.ВидыБюджетов.ВыровнятьДатыПоПериодичностиБюджета(Объект.ВидБюджета, Объект.НачалоПериода, Объект.ОкончаниеПериода);
	Объект.ГраницаФактДанных = Справочники.ВидыБюджетов.ГраницаФактическихДанныхПоВидуБюджета(Объект.ВидБюджета, Объект.НачалоПериода);
	Справочники.ВидыБюджетов.НастроитьГруппуЭлементовПериода(Объект.ВидБюджета, Элементы, Объект.ГраницаФактДанных);
	УстановитьПоляШапкиДокумента();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииПериодаСервер()
	
	Объект.ОборотыПоСтатьямБюджетов.Очистить();
	Объект.АналитикаСтатейБюджетов.Очистить();
	
	МодельДействует = Справочники.МоделиБюджетирования.МодельБюджетированияДействует(
		Объект.МодельБюджетирования, 
		Объект.НачалоПериода,
		Объект.ОкончаниеПериода);
		
	Если Не МодельДействует Тогда
		Объект.МодельБюджетирования = Справочники.МоделиБюджетирования.МодельБюджетированияПоУмолчанию(Объект.НачалоПериода, Объект.ОкончаниеПериода);
		ПриИзмененииМоделиБюджетированияСервер();
	КонецЕсли;
	
	УстановитьДоступностьМоделиБюджетирования();
	
	Справочники.ВидыБюджетов.ВыровнятьДатыПоПериодичностиБюджета(Объект.ВидБюджета, Объект.НачалоПериода, Объект.ОкончаниеПериода);
	Объект.ГраницаФактДанных = Справочники.ВидыБюджетов.ГраницаФактическихДанныхПоВидуБюджета(Объект.ВидБюджета, Объект.НачалоПериода);
	Справочники.ВидыБюджетов.НастроитьГруппуЭлементовПериода(Объект.ВидБюджета, Элементы, Объект.ГраницаФактДанных);
	
	СброситьКэшПараметров();
	
КонецПроцедуры

&НаСервере
Функция ВидБюджетаОбработкаВыбораНаСервере(ВыбранноеЗначение, ИспользоватьДляВводаПлана)
	
	ИспользоватьДляВводаПлана = ВыбранноеЗначение.ИспользоватьДляВводаПлана;
	
	Если Не ИспользоватьДляВводаПлана Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Не Справочники.ВидыБюджетов.ВидБюджетаЗаполненПравильно(ВыбранноеЗначение) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ОрганизацияПриИзмененииНаСервере()
	
	СброситьКэшПараметров();
	
Конецпроцедуры

&НаСервере
Процедура ПодразделениеПриИзмененииНаСервере()
	
	СброситьКэшПараметров();
	
КонецПроцедуры

&НаСервере
Процедура БюджетПриИзмененииСервер(Знач ИмяОбласти)
	
	ОбластьДанные      = Бюджет.Область(ИмяОбласти);
	Расшифровка        = ОбластьДанные.Расшифровка;
	
	Значение = ОбластьДанные.Значение;
	
	СокращенныеРазряды = 0;
	Если Расшифровка.Свойство("СокращенныеРазряды", СокращенныеРазряды) Тогда
		Значение = Значение * Pow(10, СокращенныеРазряды);
	КонецЕсли;
	
	РезультатОтражения = ОтразитьИзменениеЯчейки(Расшифровка, Значение);
	
	ЕстьИзмененияКОтражению = Истина;
	
	ПараметрыОтчета = ДополнитьПараметрамиПериодами();
	ИзмененияЭкземпляраБюджета = БюджетнаяОтчетностьСервер.РассчитатьСвязанныеСтатьиБюджетов(ПараметрыВыводаВидаБюджета, АдресДанныхЯчеек, ПараметрыОтчета,
																					ИмяОбласти, РезультатОтражения, АдресХранилища);
	ЗагрузитьРезультатРасчетаИзменений(, ИзмененияЭкземпляраБюджета);
	
	Если АвтоматическоеОбновлениеБюджета Тогда
		
		ОтразитьИзмененияБюджета();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПереместитьНаСервере(Направление)
	
	ИДТекущейСтроки = Элементы.СписокРедактированияБюджета.ТекущаяСтрока;
	ТекущаяСтрока = СписокРедактированияБюджета.НайтиПоИдентификатору(ИДТекущейСтроки);
	Индекс = СписокРедактированияБюджета.Индекс(ТекущаяСтрока);
	
	Если Индекс + Направление < 0 ИЛИ 
		Индекс + Направление >= СписокРедактированияБюджета.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыРедактирования = ПолучитьИзВременногоХранилища(АдресПараметровРедактированияСтроки);
	СтрокаСмещения = СписокРедактированияБюджета[Индекс + Направление];
	
	Для Каждого КлючИЗначение из ПараметрыРедактирования.СтруктураАналогРасшифровки Цикл
		
		Если КлючИЗначение.Значение.Свойство("Расчетная") Тогда
			Продолжить;
		КонецЕсли;
		
		Расшифровка = РасшифровкаОтчетаПоСтроке(КлючИЗначение.Значение, ТекущаяСтрока, ПараметрыРедактирования.ИзменяемыеИзмерения);
		СтрокаДанныхПоТекущей = НайтиСтрокуОборотаПоРасшифровке(Расшифровка);
		Расшифровка = РасшифровкаОтчетаПоСтроке(КлючИЗначение.Значение, СтрокаСмещения, ПараметрыРедактирования.ИзменяемыеИзмерения);
		СтрокаДанныхПоПредыдущей = НайтиСтрокуОборотаПоРасшифровке(Расшифровка);
		
		Тмп = СтрокаДанныхПоТекущей.НомерПоПорядку;
		СтрокаДанныхПоТекущей.НомерПоПорядку = СтрокаДанныхПоПредыдущей.НомерПоПорядку;
		СтрокаДанныхПоПредыдущей.НомерПоПорядку = Тмп;
	
	КонецЦикла;
	
	СписокРедактированияБюджета.Сдвинуть(Индекс, Направление);
	
	ОтразитьИзмененияБюджета("ОбновитьДанныеЯчеек");
	
КонецПроцедуры

&НаСервере
Процедура УпорядочитьНаСервере(ИмяЭлемента, Порядок)
	
	ПараметрыРедактирования = ПолучитьИзВременногоХранилища(АдресПараметровРедактированияСтроки);
	Для Каждого СтрокаСписка из СписокРедактированияБюджета Цикл
		Для Каждого КлючИЗначение из ПараметрыРедактирования.СтруктураАналогРасшифровки Цикл
		
			Если КлючИЗначение.Значение.Свойство("Расчетная") Тогда
				Продолжить;
			КонецЕсли;
			
			Расшифровка = РасшифровкаОтчетаПоСтроке(КлючИЗначение.Значение, СтрокаСписка, ПараметрыРедактирования.ИзменяемыеИзмерения);
			СтрокаДанных = НайтиСтрокуОборотаПоРасшифровке(Расшифровка);
			СтрокаДанных.НомерПоПорядку = 0;
			
		КонецЦикла;
	КонецЦикла;
	
	НомерПоПорядку = МаксимальныйНомерПоПорядку();
	
	СписокРедактированияБюджета.Сортировать(ИмяЭлемента + " " + Порядок);
	
	Для Каждого СтрокаСписка из СписокРедактированияБюджета Цикл
		НомерПоПорядку = НомерПоПорядку + 1;
		Для Каждого КлючИЗначение из ПараметрыРедактирования.СтруктураАналогРасшифровки Цикл
		
			Если КлючИЗначение.Значение.Свойство("Расчетная") Тогда
				Продолжить;
			КонецЕсли;
			
			Расшифровка = РасшифровкаОтчетаПоСтроке(КлючИЗначение.Значение, СтрокаСписка, ПараметрыРедактирования.ИзменяемыеИзмерения);
			СтрокаДанных = НайтиСтрокуОборотаПоРасшифровке(Расшифровка);
			СтрокаДанных.НомерПоПорядку = НомерПоПорядку;
			
		КонецЦикла;
	КонецЦикла;
	
	ОтразитьИзмененияБюджета("ОбновитьДанныеЯчеек");
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьПоПериодамПоРасшифровке(Расшифровка, Значение)
	
	Периодичности = Новый Массив;
	Для Каждого КлючИЗначение из Расшифровка Цикл
		Если Найти(КлючИЗначение.Ключ, "Период") Тогда
			Периодичности.Добавить(Перечисления.Периодичность[СтрЗаменить(КлючИЗначение.Ключ, "Период", "")]);
		КонецЕсли;
	КонецЦикла;
	МинимальнаяПериодичность = Перечисления.Периодичность.МинимальнаяПериодичность(Периодичности);
	РабочаяРасшифровка = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(Расшифровка);
	
	МассивПериодов = БюджетнаяОтчетностьСервер.ПолучитьМассивПериодов(
						Расшифровка["Период" + МинимальнаяПериодичность], Объект.ОкончаниеПериода, МинимальнаяПериодичность);
	
	Для Каждого Период из МассивПериодов Цикл
		
		Если Период = Расшифровка["Период" + МинимальнаяПериодичность] Тогда
			Продолжить;
		КонецЕсли;
		
		РабочаяРасшифровка.Вставить("Период" + МинимальнаяПериодичность, Период);
		РезультатОтражения = ОтразитьИзменениеЯчейки(РабочаяРасшифровка, Значение);
		
		РасшифровкаСвязанных = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(РабочаяРасшифровка);
		РасшифровкаСвязанных.Удалить("ИмяПоказателя");
		РасшифровкаСвязанных.Удалить("ИндексСтрокиДанных");
		
		ПараметрыОтчета = ДополнитьПараметрамиПериодами();
		ИзмененияЭкземпляраБюджета = БюджетнаяОтчетностьСервер.РассчитатьСвязанныеСтатьиБюджетов(ПараметрыВыводаВидаБюджета, АдресДанныхЯчеек, ПараметрыОтчета,
																			РасшифровкаСвязанных, РезультатОтражения, АдресХранилища);
		ЗагрузитьРезультатРасчетаИзменений(, ИзмененияЭкземпляраБюджета);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СкопироватьПоПериодамНаСервере()
	
	Модифицированность = Истина;
	
	ПараметрыВидаБюджета = ПолучитьИзВременногоХранилища(ПараметрыВыводаВидаБюджета);
	СтруктураЯчеек = ПараметрыВидаБюджета;
	
	Если Элементы.ПанельБюджет.ТекущаяСтраница = Элементы.Таблица Тогда
		
		АктивнаяОбласть = Элементы.Бюджет.ТекущаяОбласть;
		
		Для Строка = АктивнаяОбласть.Верх по АктивнаяОбласть.Низ Цикл
			Для Колонка = АктивнаяОбласть.Лево по АктивнаяОбласть.Право Цикл
				ОбластьЗначения = Бюджет.Область(Строка, Колонка);
				Если ОбластьЗначения.СодержитЗначение Тогда
					
					СкопироватьПоПериодамПоРасшифровке(ОбластьЗначения.Расшифровка, ОбластьЗначения.Значение);
					
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		ОтразитьИзмененияБюджета("ОбновитьДанныеЯчеек");
		СформироватьОтчетСервер();
		
	Иначе
		
		ИмяКолонки = Элементы.СписокРедактированияБюджета.ТекущийЭлемент.Имя;
		ПараметрыРедактирования = ПолучитьИзВременногоХранилища(АдресПараметровРедактированияСтроки);
		РедактируемаяСтрока = СписокРедактированияБюджета.НайтиПоИдентификатору(Элементы.СписокРедактированияБюджета.ТекущаяСтрока);
	
		Если Не ПараметрыРедактирования.СтруктураАналогРасшифровки.Свойство(ИмяКолонки) Тогда
			Возврат;
		КонецЕсли;
		
		ЗначенияКолонок = ПараметрыРедактирования.СтруктураАналогРасшифровки[ИмяКолонки];
		Расшифровка = РасшифровкаОтчетаПоСтроке(ЗначенияКолонок, РедактируемаяСтрока, ПараметрыРедактирования.ИзменяемыеИзмерения);
		
		СкопироватьПоПериодамПоРасшифровке(Расшифровка, РедактируемаяСтрока[ИмяКолонки]);
		
		ОтразитьИзмененияБюджета("ОбновитьДанныеЯчеек");
		ЗагрузитьДанныеСписка(ПараметрыРедактирования.КолонкиПоИзмерениям, 
								ПараметрыРедактирования.ФиксированныеЗначения, 
								ПараметрыРедактирования.СтруктураАналогРасшифровки, 
								Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВставитьНаСервере(ТекстПредупреждения)
	
	Значение = КопированиеСтрокСервер.ПолучитьЯчейкиБюджетаИзБуфераОбмена();
	//Значение = ХранилищаНастроек.ХранилищеБуфераОбмена.ПолучитьЯчейкиБюджетаИзБуфераОбмена();
	
	ЕдиничноеЗначение = Ложь;
	
	Если Значение.Количество() = 0 Тогда
		ТекстПредупреждения = НСтр("en='Нет данных для вставки';ru='Нет данных для вставки'");
		Возврат Ложь; //нечего вставлять
	ИначеЕсли Значение.Количество() = 1 Тогда
		Если Значение[0].Количество() = 1 Тогда
			ЕдиничноеЗначение = Истина;
			Значение = Значение[0][0];
		КонецЕсли;
	КонецЕсли;
	
	АктивнаяОбласть = Элементы.Бюджет.ТекущаяОбласть;
	Если ЕдиничноеЗначение Тогда
		Для Строка = АктивнаяОбласть.Верх по АктивнаяОбласть.Низ Цикл
			Для Колонка = АктивнаяОбласть.Лево по АктивнаяОбласть.Право Цикл
				ОбластьЗначения = Бюджет.Область(Строка, Колонка);
				Если ОбластьЗначения.СодержитЗначение Тогда
					ОбластьЗначения.Значение = Значение;
					ОтразитьИзменениеЯчейки(ОбластьЗначения.Расшифровка, ОбластьЗначения.Значение);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	Иначе
		ЛевыйУгол = АктивнаяОбласть.Лево;
		ВерхнийУгол = АктивнаяОбласть.Верх;
		Для Строка = 0 по Значение.ВГраница() Цикл
			Для Колонка = 0 по Значение[0].ВГраница() Цикл
				ОбластьЗначения = Бюджет.Область(ВерхнийУгол + Строка, ЛевыйУгол + Колонка);
				Если ОбластьЗначения.СодержитЗначение Тогда
					ОбластьЗначения.Значение = Значение[Строка][Колонка];
					ОтразитьИзменениеЯчейки(ОбластьЗначения.Расшифровка, ОбластьЗначения.Значение);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	ОтразитьИзмененияБюджета();
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура КопироватьЯчейкиНаСервере()
	
	АктивнаяОбласть = Элементы.Бюджет.ТекущаяОбласть;
	МассивСтрок = Новый Массив;
	Для Строка = АктивнаяОбласть.Верх по АктивнаяОбласть.Низ Цикл
		МассивКолонок = Новый Массив;
		Для Колонка = АктивнаяОбласть.Лево по АктивнаяОбласть.Право Цикл
			ОбластьЗначения = Бюджет.Область(Строка, Колонка);
			Значение = Неопределено;
			Если ОбластьЗначения.СодержитЗначение Тогда
				Значение = ОбластьЗначения.Значение;
			Иначе
				Если Не ПустаяСтрока(ОбластьЗначения.Текст) Тогда
					Попытка
						Значение = Число(ОбластьЗначения.Текст);
					Исключение
					КонецПопытки;
				КонецЕсли;
			КонецЕсли;
			МассивКолонок.Добавить(Значение);
		КонецЦикла;
		МассивСтрок.Добавить(МассивКолонок);
	КонецЦикла;
	
	//ХранилищаНастроек.ХранилищеБуфераОбмена.ПоместитьВыделенныеЯчейкиБюджетаВБуферОбмена(МассивСтрок);
	КопированиеСтрокСервер.ПоместитьВыделенныеЯчейкиБюджетаВБуферОбмена(МассивСтрок);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьЯчейкиНаСервере()
	
	АктивнаяОбласть = Элементы.Бюджет.ТекущаяОбласть;
	Для Строка = АктивнаяОбласть.Верх по АктивнаяОбласть.Низ Цикл
		Для Колонка = АктивнаяОбласть.Лево по АктивнаяОбласть.Право Цикл
			ОбластьЗначения = Бюджет.Область(Строка, Колонка);
			Если ОбластьЗначения.СодержитЗначение Тогда
				ОбластьЗначения.Значение = Неопределено;
				ОтразитьИзменениеЯчейки(ОбластьЗначения.Расшифровка, ОбластьЗначения.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ОтразитьИзмененияБюджета();
	
КонецПроцедуры

#КонецОбласти


#Область ВыгрузкаВЭксель

&НаСервере
Функция МожноВыгрузитьТекущуюТаблицу(ВерхТекущейОбласти, ИДТаблицы, КолонкиПоИзмерениям)
	Перем ТекущаяСтрока, ИДГруппировки;
	
	Если Элементы.ПанельБюджет.ТекущаяСтраница = Элементы.Таблица Тогда
		
		Расшифровка = Бюджет.Область(ВерхТекущейОбласти, 1).Расшифровка;
		Если ТипЗнч(Расшифровка) = Тип("Структура") 
			И Расшифровка.Свойство("ИДГруппировки", ИДГруппировки) Тогда
			
			ТекущаяСтрока = ФинансоваяОтчетностьКлиентСервер.ПодчиненныйЭлемент(ДеревоЭлементовБюджета, "ИДГруппировки", ИДГруппировки);
			
		Иначе
			
			СтрокиДерева = ДеревоЭлементовБюджета.ПолучитьЭлементы();
			Если Не СтрокиДерева.Количество() Тогда
				Возврат Ложь;
			КонецЕсли;
			
			ТекущаяСтрока = СтрокиДерева[0];
			
		КонецЕсли;
		
	ИначеЕсли Элементы.ПанельБюджет.ТекущаяСтраница = Элементы.Список Тогда
		
		ИндексТекущаяСтрока = Элементы.ДеревоЭлементовБюджета.ТекущаяСтрока;
		Если ИндексТекущаяСтрока = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ТекущаяСтрока = ДеревоЭлементовБюджета.НайтиПоИдентификатору(ИндексТекущаяСтрока);
		
	КонецЕсли;
	
	Если ТекущаяСтрока = Неопределено Тогда
		
		Возврат Ложь;
		
	КонецЕсли;
	
	Пока ТекущаяСтрока.ПолучитьРодителя() <> Неопределено Цикл
		
		ТекущаяСтрока = ТекущаяСтрока.ПолучитьРодителя();
		
	КонецЦикла;
	
	ПараметрыЭкземпляраБюджета = ПолучитьИзВременногоХранилища(ПараметрыВыводаВидаБюджета);
	СписокПараметров = ПараметрыЭкземпляраБюджета.СтруктураОписанияСпискаВвода;
	
	КолонкиПоИзмерениям = Неопределено;
	Если Не СоставКолонокКорневогоЭлемента(ТекущаяСтрока, СписокПараметров, КолонкиПоИзмерениям) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИДТаблицы = ТекущаяСтрока.ИДТаблицы;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция СоздатьПоляВыбораПоДеревуКолонок(СКД, ДеревоКолонок, КолонкиПоИзмерениям, ЭлементыДобавления, 
													ЗначенияГруппировок = Неопределено, ТекущаяГлубина = 1)
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	
	Если ЗначенияГруппировок = Неопределено Тогда
		ЗначенияГруппировок = Новый Структура;
	КонецЕсли;
	
	ГлубинаУровня = ТекущаяГлубина;
	Для Каждого СтрокаДерева из ДеревоКолонок.Строки Цикл
		
		ВставленныйКлюч = "";
		Если ЗначениеЗаполнено(СтрокаДерева.ФиксированноеЗначение) Тогда
			ЗначенияГруппировок.Вставить(СтрокаДерева.ИмяИзмерения, СтрокаДерева.ФиксированноеЗначение);
			ВставленныйКлюч = СтрокаДерева.ИмяИзмерения;
		КонецЕсли;
		
		Если Найти(СтрокаДерева.ИмяИзмерения, "#Показатель_") Тогда
			ИмяПоказателя = СтрЗаменить(СтрокаДерева.ИмяИзмерения, "#Показатель_", "");
			ЗначенияГруппировок.Вставить("ИмяПоказателя", ИмяПоказателя);
			ВставленныйКлюч = ИмяПоказателя;
		КонецЕсли;
		
		Если СтрокаДерева.Строки.Количество() Тогда
			
			Элемент = ЭлементыДобавления.Добавить(Тип("ГруппаВыбранныхПолейКомпоновкиДанных"));
			Элемент.Заголовок = СтрокаДерева.НаименованиеДляПечати;
			Элемент.Расположение = РасположениеПоляКомпоновкиДанных.Горизонтально;
			ГлубинаУровня = Макс(ГлубинаУровня, СоздатьПоляВыбораПоДеревуКолонок(СКД, СтрокаДерева, КолонкиПоИзмерениям, 
																Элемент.Элементы, ЗначенияГруппировок, ТекущаяГлубина + 1));
			
		Иначе
			
			СтатьиБюджетов = Неопределено;
			Если КолонкиПоИзмерениям.Свойство("СтатьиБюджетов", СтатьиБюджетов) Тогда
				// параметры ячеек в сложной таблице
				СтруктураОписания = СтатьиБюджетов[СтрокаДерева.ЭлементОтчета];
				Если СтруктураОписания <> Неопределено Тогда
					// На уровне может не быть статьи
					ИмяПоказателя = СтруктураОписания.ИмяПоказателя;
					ЗначенияГруппировок.Вставить("ИмяПоказателя", ИмяПоказателя);
				КонецЕсли;
			КонецЕсли;
			
			ПолеРесурса = "";
			ИмяПоказателя = "Сумма";
			
			ИмяПараметра = "Колонка_" + СтрЗаменить(Новый УникальныйИдентификатор, "-", "_");
			ПолеРесурса = "Колонка = &" + ИмяПараметра;
			
			Параметр = СКД.Параметры.Найти(ИмяПараметра);
			Если Параметр = Неопределено Тогда
				Параметр = СКД.Параметры.Добавить();
				Параметр.Имя = ИмяПараметра;
				Параметр.Значение = СтрокаДерева.ЭлементОтчета;
				Параметр.ОграничениеИспользования = Истина;
			КонецЕсли;
			
			Для Каждого КлючИЗначение из ЗначенияГруппировок Цикл
				
				Если КлючИЗначение.Ключ = "ИмяПоказателя" Тогда
					ИмяПоказателя = КлючИЗначение.Значение;
					Продолжить;
				КонецЕсли;
				
				ИмяПараметра = КлючИЗначение.Ключ + "_" + СтрЗаменить(Новый УникальныйИдентификатор, "-", "_");
				ПолеРесурса = ПолеРесурса + " И " + КлючИЗначение.Ключ + " = &" + ИмяПараметра;
				
				Параметр = СКД.Параметры.Найти(ИмяПараметра);
				Если Параметр = Неопределено Тогда
					Параметр = СКД.Параметры.Добавить();
					Параметр.Имя = ИмяПараметра;
					Параметр.Значение = КлючИЗначение.Значение;
					Параметр.ОграничениеИспользования = Истина;
				КонецЕсли;
				
			КонецЦикла;
			
			Если ИмяПоказателя = "Сумма" Тогда
				ИмяПоказателя = "ВЫБОР КОГДА ЗначениеЗаполнено(Валюта) ТОГДА СуммаВал ИНАЧЕ Сумма КОНЕЦ";
			КонецЕсли;
			ПолеРесурса = "СУММА(ВЫБОР КОГДА " + ПолеРесурса + " ТОГДА " + ИмяПоказателя + " КОНЕЦ)";
			
			ИмяПоля = "Ресурс_" + СтрЗаменить(Новый УникальныйИдентификатор, "-", "_");
			ФинОтчеты.НовыйВычисляемыйРесурс(СКД, 
								ИмяПоля,
								,,ПолеРесурса);
			
			Элемент = ЭлементыДобавления.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			Элемент.Заголовок = СтрокаДерева.НаименованиеДляПечати;
			Элемент.Поле = Новый ПолеКомпоновкиДанных(ИмяПоля);
			
		КонецЕсли;
		
		Если Не ПустаяСтрока(ВставленныйКлюч) Тогда
			ЗначенияГруппировок.Удалить(ВставленныйКлюч);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ГлубинаУровня;
	
КонецФункции

&НаСервере
Функция ПолучитьСКДПечатиДокументаБезГруппировок(ИДТаблицы, КолонкиПоИзмерениям, ГлубинаДерева)
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	
	СКД = ФинОтчеты.НоваяСхема();
	Набор = ФинОтчеты.НовыйНабор(СКД, Тип("НаборДанныхОбъектСхемыКомпоновкиДанных"), "ДанныеЯчеек");
	Набор.ИмяОбъекта = "ДанныеЯчеек";
	
	ПараметрыЭкземпляраБюджета = ПолучитьИзВременногоХранилища(ПараметрыВыводаВидаБюджета);
	КолонкиТаблиц = ПараметрыЭкземпляраБюджета.КолонкиТаблиц;
	ДеревоКолонок = КолонкиТаблиц[ИДТаблицы];
	
	СтруктураОписанияКолонок = ПараметрыЭкземпляраБюджета.СтруктураКолонокТаблицыДанных;
	
	ФинОтчеты.НовоеПолеНабора(Набор, "СтатьяБюджетов");
	ФинОтчеты.НовоеПолеНабора(Набор, "ОсновнойЭлемент");
	ФинОтчеты.НовоеПолеНабора(Набор, "ВидЭлемента");
	ФинОтчеты.НовоеПолеНабора(Набор, "Строка");
	ФинОтчеты.НовоеПолеНабора(Набор, "МинимумНомерПоПорядку");
	ФинОтчеты.НовоеПолеНабора(Набор, "Колонка");
	
	ТекстВыражения = "МИНИМУМ(ВЫБОР КОГДА ВидЭлемента = Значение(Перечисление.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов)
						|ТОГДА МинимумНомерПоПорядку ИНАЧЕ 99999999999 КОНЕЦ)";
	
	ФинОтчеты.НовыйРесурс(СКД, "МинимумНомерПоПорядку", , ТекстВыражения);
	
	Для Каждого Измерение из СтруктураОписанияКолонок.Измерения Цикл
		ФинОтчеты.НовоеПолеНабора(Набор, Измерение,, Измерение);
	КонецЦикла;
	
	Для Каждого Измерение из СтруктураОписанияКолонок.ВидыАналитик Цикл
		ИмяПоля = БюджетнаяОтчетностьСервер.ИмяПоляБюджетногоОтчета(Измерение);
		ФинОтчеты.НовоеПолеНабора(Набор, ИмяПоля,, Строка(Измерение));
	КонецЦикла;
	
	Для Каждого Измерение из СтруктураОписанияКолонок.Периодичности Цикл
		ФинОтчеты.НовоеПолеНабора(Набор, "Период" + Измерение,, "Период (" + Измерение + ")");
	КонецЦикла;
	
	ФинОтчеты.НовоеПолеНабора(Набор, "Сумма");
	ФинОтчеты.НовоеПолеНабора(Набор, "СуммаВал");
	ФинОтчеты.НовоеПолеНабора(Набор, "Количество");
	ФинОтчеты.НовоеПолеНабора(Набор, "Значение");
	
	ГруппировкаПечатнойФормы = Неопределено;
	Для Каждого Измерение из КолонкиПоИзмерениям.Измерения Цикл
		Если ГруппировкаПечатнойФормы = Неопределено Тогда
			ГруппировкаПечатнойФормы = ФинОтчеты.НоваяГруппировка(СКД.НастройкиПоУмолчанию.Структура, Измерение);
		Иначе
			ФинОтчеты.НовоеПолеГруппировки(ГруппировкаПечатнойФормы, Измерение);
		КонецЕсли;
	КонецЦикла;
	
	Если ГруппировкаПечатнойФормы = Неопределено Тогда
		ФинОтчеты.НоваяГруппировка(СКД.НастройкиПоУмолчанию.Структура);
	КонецЕсли;
	
	ФинОтчеты.НовыйОтбор(СКД.НастройкиПоУмолчанию.Отбор, "ОсновнойЭлемент", Истина);
	Отбор = ФинОтчеты.НовыйОтбор(СКД.НастройкиПоУмолчанию.Отбор, "Строка", КолонкиПоИзмерениям.СтрокиОснования);
	Отбор.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
	
	ГлубинаДерева = СоздатьПоляВыбораПоДеревуКолонок(СКД, ДеревоКолонок, КолонкиПоИзмерениям, СКД.НастройкиПоУмолчанию.Выбор.Элементы);
	
	ФинОтчеты.УстановитьПараметрВывода(СКД.НастройкиПоУмолчанию, "ГоризонтальноеРасположениеОбщихИтогов", РасположениеИтоговКомпоновкиДанных.Нет);
	ФинОтчеты.УстановитьПараметрВывода(СКД.НастройкиПоУмолчанию, "ВертикальноеРасположениеОбщихИтогов", РасположениеИтоговКомпоновкиДанных.Нет);
	ФинОтчеты.УстановитьПараметрВывода(СКД.НастройкиПоУмолчанию, "ВыводитьОтбор", ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
	ФинОтчеты.УстановитьПараметрВывода(СКД.НастройкиПоУмолчанию, "ВыводитьПараметры", ТипВыводаТекстаКомпоновкиДанных.НеВыводить);
	
	ФинОтчеты.НовыйПорядок(СКД.НастройкиПоУмолчанию, "МинимумНомерПоПорядку");
	
	Возврат СКД;
	
КонецФункции

&НаСервере
Функция СоздатьПрисоединенныйФайлXLS97(ИДТаблицы, КолонкиПоИзмерениям)
	Перем ГлубинаДерева;
	
	СхемаКомпоновкиДанных = ПолучитьСКДПечатиДокументаБезГруппировок(ИДТаблицы, КолонкиПоИзмерениям, ГлубинаДерева);
	
	// вывод результата компоновки в отчет
	
	Настройки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	МакетКомпоновки = КомпоновщикМакета.Выполнить(
		СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
	
	ВнешниеДанные = Новый Структура("ДанныеЯчеек", ПолучитьИзВременногоХранилища(АдресДанныхЯчеек));
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(
		МакетКомпоновки, ВнешниеДанные, ДанныеРасшифровки);
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	
	// Выводим результат в табличный документ
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ТабличныйДокумент);
	
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	ИмяВременногоФайла = ПолучитьИмяВременногоФайла();
	ТабличныйДокумент.Записать(ИмяВременногоФайла, ТипФайлаТабличногоДокумента.XLS97);
	
	НаСервереУстановленExcel = Ложь;
	Попытка
		COMОбъект = Новый COMОбъект("Excel.Application");
		НаСервереУстановленExcel = Истина;
	Исключение
	КонецПопытки;
	
	Если НаСервереУстановленExcel Тогда
		
		Попытка
			
			Workbook = COMОбъект.Workbooks.Open(ИмяВременногоФайла);
			Sheet = Workbook.Worksheets(1);
			
			// Установка автофильтра на колонки цен
			Sheet.Range(Sheet.Cells(ГлубинаДерева, 1), Sheet.Cells(ГлубинаДерева, 256)).AutoFilter();
			
			Workbook.Save();
			Workbook.Close();
			
			COMОбъект.Quit();
			COMОбъект = 0;
			
		Исключение
			СообщениеОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			ВызватьИсключение СообщениеОбОшибке;
		КонецПопытки;
		
	КонецЕсли;
	
	АдресФайлаВоВременномХранилище = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяВременногоФайла), УникальныйИдентификатор);
	
	ИмяФайла = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("en='Бюджет от %1';ru='Бюджет от %1'"),
		Формат(ТекущаяДатаСеанса(), "ДФ='dd.MM.yyyy ЧЧ.мм.сс'"));
		
	ПараметрыФайла = РаботаСФайлами.ПараметрыДобавленияФайла();
	ПараметрыФайла.ВладелецФайлов = Объект.Ссылка;
	ПараметрыФайла.ИмяБезРасширения = ИмяФайла;
	ПараметрыФайла.РасширениеБезТочки = "xls";
	Файл = РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресФайлаВоВременномХранилище);
		
	Возврат Файл;
	
КонецФункции

#КонецОбласти

#Область ЗагрузкаИзЭксель

&НаСервере
Функция ПолучитьДанныеФайла(ПрисоединенныйФайл, УникальныйИдентификатор)
	
	ПараметрыДанныхФайла = РаботаСФайламиКлиентСервер.ПараметрыДанныхФайла();
	ПараметрыДанныхФайла.ИдентификаторФормы = УникальныйИдентификатор;
	ПараметрыДанныхФайла.ПолучатьСсылкуНаДвоичныеДанные = Истина;
	Возврат РаботаСФайлами.ДанныеФайла(ПрисоединенныйФайл, ПараметрыДанныхФайла);
	
КонецФункции

&НаКлиенте
Функция ЗагрузитьИзExcelНаКлиенте(ПрисоединенныйФайл)
	Перем ИДТаблицы, КолонкиПоИзмерениям;
	
	Если Не МожноВыгрузитьТекущуюТаблицу(Бюджет.ТекущаяОбласть.Верх, ИДТаблицы, КолонкиПоИзмерениям) Тогда
		ТекстПредупреждения = НСтр("ru = 'Невозможно загрузить в текущую таблицу, т.к. ее структура не однородна!';
									|en = 'Cannot import to the current table as its structure is not homogeneous.'");
		ПоказатьПредупреждение(, ТекстПредупреждения);
		Возврат Ложь;
	КонецЕсли;
	
	Состояние(НСтр("ru = 'Выполняется чтение данных их файла. Пожалуйста подождите...';
					|en = 'Reading data from the file. Please, wait...'") , , , БиблиотекаКартинок.Информация32);
	
	ДанныеФайла = ПолучитьДанныеФайла(ПрисоединенныйФайл, УникальныйИдентификатор);
	
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИДТаблицы", ИДТаблицы);
	ДополнительныеПараметры.Вставить("КолонкиПоИзмерениям", КолонкиПоИзмерениям);
	ДополнительныеПараметры.Вставить("РасширениеФайла", ДанныеФайла.Расширение);
	
	Если Не ДанныеФайла.ФайлРедактируетТекущийПользователь Тогда
		
		Оповещение = Новый ОписаниеОповещения(
			"ЗагрузитьИзExcelНаКлиентеПродолжение",
			ЭтотОбъект,
			ДополнительныеПараметры);
		
		РаботаСФайламиКлиент.ПолучитьПрисоединенныйФайл(
			Оповещение,
			ПрисоединенныйФайл,
			УникальныйИдентификатор,
			Новый Структура("ДанныеФайла, ДляРедактирования", ДанныеФайла, Ложь));
		
	Иначе
		
		// Не надо получать файл на диск чтобы не затереть несохраненные изменения
		РабочийКаталогПользователя = РаботаСФайламиСлужебныйКлиент.РабочийКаталогПользователя();
		ИмяВременногоФайла         = РабочийКаталогПользователя + ДанныеФайла.ОтносительныйПуть + ДанныеФайла.ИмяФайла;
		
		ЗагрузитьИзExcelНаКлиентеПродолжение(
			Новый Структура("ОписаниеОшибки, ПолноеИмяФайла", "", ИмяВременногоФайла),
			ДополнительныеПараметры);
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ЗагрузитьИзExcelНаКлиентеПродолжение(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ ПустаяСтрока(Результат.ОписаниеОшибки) Тогда
		ВызватьИсключение Результат.ОписаниеОшибки;
	КонецЕсли;
	
	ИмяВременногоФайла  = Результат.ПолноеИмяФайла;
	ИДТаблицы           = ДополнительныеПараметры.ИДТаблицы;
	КолонкиПоИзмерениям = ДополнительныеПараметры.КолонкиПоИзмерениям;
	
	ПараметрыФормы = Новый Структура();
	
	ДвоичныеДанные = Новый ДвоичныеДанные(Результат.ПолноеИмяФайла);
	АдресВХ = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
	РасширениеФайла = ДополнительныеПараметры.РасширениеФайла;
	Если НЕ ЗначениеЗаполнено(РасширениеФайла) Тогда
		НомерСимвола = СтрНайти(Результат.ПолноеИмяФайла, ".", НаправлениеПоиска.СКонца);
		Если НомерСимвола > 0 Тогда
			РасширениеФайла = Сред(Результат.ПолноеИмяФайла, НомерСимвола+1);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормы.Вставить("АдресФайлаДанных", АдресВХ);
	ПараметрыФормы.Вставить("РасширениеФайла", РасширениеФайла);
	
	ПараметрыФормы.Вставить("ИДТаблицы", ИДТаблицы);
	ПараметрыФормы.Вставить("КолонкиПоИзмерениям", КолонкиПоИзмерениям);
	ПараметрыФормы.Вставить("ПараметрыВыводаВидаБюджета", ПараметрыВыводаВидаБюджета); 
	ПараметрыФормы.Вставить("АдресРезультата", ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор)); 
	ПараметрыФормы.Вставить("НачалоПериода", Объект.НачалоПериода);
	ПараметрыФормы.Вставить("ОкончаниеПериода", Объект.ОкончаниеПериода);
	
	ОткрытьФорму("Документ.ЭкземплярБюджета.Форма.ФормаСопоставленияЗагружаемыхДанныхИзExcel", ПараметрыФормы, ЭтаФорма);
	
КонецФункции

&НаСервере
Процедура ЗагрузитьБюджетНаСервере(АдресВоВременномХранилище)
	
	Результат = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	
	ФинОтчеты = ФинансоваяОтчетностьКлиентСервер;
	
	НайденнаяСтрока = ФинОтчеты.ПодчиненныйЭлемент(ДеревоЭлементовБюджета, "ИДТаблицы", Результат.ИДТаблицы);
	Элементы.ДеревоЭлементовБюджета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
	
	УстановитьПараметрыСпискаВводаНаСервере();
	
	Пока СписокРедактированияБюджета.Количество() Цикл
		
		УдалитьСвязанныеСтрокиБюджетаНаСервере(СписокРедактированияБюджета[0].ПолучитьИдентификатор());
		СписокРедактированияБюджета.Удалить(0);
		
	КонецЦикла;
	
	Для Каждого СтрокаРезультат из Результат.СписокРедактированияБюджета Цикл
		НоваяСтрока = СписокРедактированияБюджета.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаРезультат);
		ОтразитьИзмененияВДанных(НоваяСтрока.ПолучитьИдентификатор());
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусПриИзменении(Элемент)
	
	УстановитьДоступностьЭлементовПоСтатусуСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоматическийПересчет(Команда)
	
	АвтоматическоеОбновлениеБюджета = Не АвтоматическоеОбновлениеБюджета;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСвойствоЭлементаФормы(
		Элементы,
		"АвтоматическийПересчет",
		"Пометка",
		АвтоматическоеОбновлениеБюджета);
	
	ПродолжительностьПоследнегоРасчета = 0;
	
	Если АвтоматическоеОбновлениеБюджета Тогда
		
		ОбновитьБюджет();
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьДоступностьЭлементовПоСтатусуСервер()
	
	ДоступностьЭлементов = 
		Не ИспользоватьУтверждениеБюджетов 
		Или (Объект.Статус <> Перечисления.СтатусыПланов.Утвержден);
	
	Элементы.МодельБюджетирования.ТолькоПросмотр = Не ДоступностьЭлементов;
	Элементы.ВидБюджета.ТолькоПросмотр = Не ДоступностьЭлементов;
	Элементы.Сценарий.ТолькоПросмотр = Не ДоступностьЭлементов;
	Элементы.НачалоПериода.ТолькоПросмотр = Не ДоступностьЭлементов;
	Элементы.КонецПериода.ТолькоПросмотр = Не ДоступностьЭлементов;
	Элементы.ВыбратьПериод.Доступность = ДоступностьЭлементов;
	Элементы.Организация.ТолькоПросмотр = Не ДоступностьЭлементов;
	Элементы.ПодразделениеЛево.ТолькоПросмотр = Не ДоступностьЭлементов;
	Элементы.ПодразделениеПраво.ТолькоПросмотр = Не ДоступностьЭлементов;
	Элементы.Бюджет.ТолькоПросмотр = Не ДоступностьЭлементов;
	Элементы.Ответственный.ТолькоПросмотр = Не ДоступностьЭлементов;
	
	Элементы.РедактироватьСписком.Доступность = ДоступностьЭлементов;
	Элементы.ЗаполнитьПоДаннымБюджетирования.Доступность = ДоступностьЭлементов;
	Элементы.ВыгрузитьВExcel.Доступность = ДоступностьЭлементов;
	Элементы.ЗагрузитьИзExcel.Доступность = ДоступностьЭлементов;
	Элементы.Вставить.Доступность = ДоступностьЭлементов;
	Элементы.СкопироватьПоПериодам.Доступность = ДоступностьЭлементов;
	Элементы.Копировать.Доступность = ДоступностьЭлементов;
	
	Если Элементы.ПанельБюджет.ТекущаяСтраница = Элементы.Список и 
		Не ДоступностьЭлементов Тогда
		УстановитьСтраницу();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция РазрешеноРедактированиеАналитики(ТекущаяОбласть, Статус)
	
	Попытка
		Расшифровка = ТекущаяОбласть.Расшифровка;
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	РазрешеноРедактированиеАналитики = Ложь;
	Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		РазрешеноРедактированиеАналитики = Расшифровка.Свойство("РазрешеноРедактированиеАналитики");
		Если Статус = ПредопределенноеЗначение("Перечисление.СтатусыПланов.Утвержден") Тогда
			РазрешеноРедактированиеАналитики = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат РазрешеноРедактированиеАналитики; 
	
КонецФункции

&НаСервере
Функция БлижайшийПланируемыйКурсКДате(СтрокиКурса, ПериодПланирования)
	
	Курс = СтрокиКурса[0].Курс;
	Для Каждого СтрокаКурса из СтрокиКурса Цикл
		Если СтрокаКурса.Период > ПериодПланирования Тогда
			Возврат Курс;
		КонецЕсли;
		Курс = СтрокаКурса.Курс;
	КонецЦикла;
	
	Возврат Курс;
	
КонецФункции

&НаСервере
Процедура ПроверитьЗаполнитьТаблицуКурсов(Отказ, ТекстСообщения)
	
	Если ЗначениеЗаполнено(АдресТаблицыКурсов) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = ПолучитьИзВременногоХранилища(ПараметрыВыводаВидаБюджета);
	Если СтруктураПараметров = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураЯчеек = СтруктураПараметров.СтруктураОписанияОтчета.СтруктураЯчеек;
	ПараметрыЯчеек = СтруктураПараметров.СтруктураОписанияОтчета.ПараметрыЯчеек;
	
	КопияСтруктурыЯчеекВалютаВывода = ПараметрыЯчеек.Скопировать(,"ВалютаВывода");
	КопияСтруктурыЯчеекВалютаВывода.Свернуть("ВалютаВывода");
	МассивВалют = КопияСтруктурыЯчеекВалютаВывода.ВыгрузитьКолонку("ВалютаВывода");
	
	Если СтруктураЯчеек.Колонки.Найти("Валюта") <> Неопределено Тогда
		КопияСтруктурыЯчеекВалюта = СтруктураЯчеек.Скопировать(,"Валюта");
		КопияСтруктурыЯчеекВалюта.Свернуть("Валюта");
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВалют, КопияСтруктурыЯчеекВалюта.ВыгрузитьКолонку("Валюта"), Истина);
	КонецЕсли;
	
	МассивДополнительныхВалют = Новый Массив;
	МассивДополнительныхВалют.Добавить(Объект.Сценарий.Валюта);
	
	Если уатОбщегоНазначенияТиповые.уатЕстьКонстанта("ВалютаУправленческогоУчета") Тогда
		ВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
	Иначе
		ВалютаУправленческогоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;
	
	МассивДополнительныхВалют.Добавить(ВалютаУправленческогоУчета);
	
	ОбщегоНазначенияКлиентСервер.ДополнитьМассив(МассивВалют, МассивДополнительныхВалют, Истина);
	
	ВалютаРеглУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	ВГраница = МассивВалют.ВГраница();
	Удалено = 0;
	
	Для Сч = 0 по ВГраница Цикл
		
		ТекущийИндекс = Сч - Удалено;
		Если Не ЗначениеЗаполнено(МассивВалют[ТекущийИндекс])
			ИЛИ МассивВалют[ТекущийИндекс] = ВалютаРеглУчета Тогда
			
			Удалено = Удалено + 1;
			МассивВалют.Удалить(ТекущийИндекс);
			
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаКурсов = Справочники.Сценарии.ТаблицаКурсовСценария(Объект.Сценарий, МассивВалют, Объект.НачалоПериода, Объект.ОкончаниеПериода);
	
	Если Не ТребоватьУказанияКурсовДляКаждогоПериода Тогда
		
		НоваяСтрока = ТаблицаКурсов.Добавить();
		НоваяСтрока.Период = Объект.НачалоПериода;
		НоваяСтрока.Валюта = ВалютаРеглУчета;
		НоваяСтрока.Курс = 1;
		
		ТаблицаКурсов.Сортировать("Валюта, Период");
		ТаблицаКурсов.Индексы.Добавить("Валюта");
		ТаблицаКурсов.Индексы.Добавить("Валюта, Период");
		
		НеНайденныеВалюты = Новый Массив;
		Для Каждого Валюта из МассивВалют Цикл
			
			СтруктураПоиска = Новый Структура("Валюта, Период", Валюта, Объект.НачалоПериода);
			НайденныеСтроки = ТаблицаКурсов.НайтиСтроки(СтруктураПоиска);
			
			Если Не НайденныеСтроки.Количество() Тогда
				НеНайденныеВалюты.Добавить(Валюта);
			КонецЕсли;
			
		КонецЦикла;
		
		Если НеНайденныеВалюты.Количество() Тогда
			
			ТекстСообщения = НСтр("en='Не найдены прогнозные курсы на начало периода для валют: %1';ru='Не найдены прогнозные курсы на начало периода для валют: %1'");
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, 
								СтрСоединить(НеНайденныеВалюты, ", "));
			Отказ = Истина;
			
		КонецЕсли;
		
	Иначе
		
		Периодичности = Новый Массив;
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(Периодичности, СтруктураПараметров.СтруктураКолонокТаблицыДанных.Периодичности);
		Периодичности.Добавить(Объект.ВидБюджета.Периодичность);
		ПериодичностьПроверкиКурсов = Перечисления.Периодичность.МинимальнаяПериодичность(Периодичности);
		МассивПериодов = БюджетнаяОтчетностьСервер.ПолучитьМассивПериодов(Объект.НачалоПериода, Объект.ОкончаниеПериода, ПериодичностьПроверкиКурсов);
		НеНайденныеКурсы = ТаблицаКурсов.СкопироватьКолонки("Период, Валюта");
		
		Для Каждого Период из МассивПериодов Цикл
			Для Каждого Валюта из МассивВалют Цикл
				СтруктураПоиска = Новый Структура("Валюта, Период", Валюта, Период);
				Если Не ТаблицаКурсов.НайтиСтроки(СтруктураПоиска).Количество() Тогда
					НоваяСтрока = НеНайденныеКурсы.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураПоиска);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Если НеНайденныеКурсы.Количество() Тогда
			
			НеНайденныеКурсы.Свернуть("Валюта");
			МассивВалют = НеНайденныеКурсы.ВыгрузитьКолонку("Валюта");
			ТекстСообщения = НСтр("en='Не найдены прогнозные курсы для валют: %1; курсы должны быть указаны на %2';ru='Не найдены прогнозные курсы для валют: %1; курсы должны быть указаны на %2'");
			
			Если ПериодичностьПроверкиКурсов = Перечисления.Периодичность.Декада Тогда
				СклонениеКаждый = НСтр("en='каждую декаду';ru='каждую декаду'");
			ИначеЕсли ПериодичностьПроверкиКурсов = Перечисления.Периодичность.Неделя Тогда
				СклонениеКаждый = НСтр("en='каждую неделю';ru='каждую неделю'");
			Иначе
				СклонениеКаждый = НСтр("en='каждый %1';ru='каждый %1'");
				СклонениеКаждый = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(СклонениеКаждый, НРег(ПериодичностьПроверкиКурсов));
			КонецЕсли;
			
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ТекстСообщения, 
										СтрСоединить(МассивВалют, ", "),
										СклонениеКаждый);
			Отказ = Истина;
			
		Иначе
			
			Для Каждого Период из МассивПериодов цикл
				НоваяСтрока = ТаблицаКурсов.Добавить();
				НоваяСтрока.Период = Период;
				НоваяСтрока.Валюта = ВалютаРеглУчета;
				НоваяСтрока.Курс = 1;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не Отказ = Истина Тогда
		АдресТаблицыКурсов = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		ПоместитьВоВременноеХранилище(ТаблицаКурсов, АдресТаблицыКурсов);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция УстановитьПараметрыСценария()
	
	ЗначенияРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Объект.Сценарий, 
		"Валюта, ТребоватьУказанияКурсовДляКаждогоПериода");
	ВалютаСценария = ЗначенияРеквизитов.Валюта;
	ТребоватьУказанияКурсовДляКаждогоПериода = ЗначенияРеквизитов.ТребоватьУказанияКурсовДляКаждогоПериода;
	
	Возврат ЗначенияРеквизитов;
	
КонецФункции

&НаСервере
Функция ПересчитатьПоТаблицеКурсов(Сумма, ПериодПланирования, ВалютаНач, ВалютаКон)
	
	ТаблицаКурсов = ПолучитьИзВременногоХранилища(АдресТаблицыКурсов);
	
	Если ТребоватьУказанияКурсовДляКаждогоПериода Тогда
		СтрокаКурса 	= ТаблицаКурсов.НайтиСтроки(Новый Структура("Валюта, Период", ВалютаНач, ПериодПланирования));
		КурсНач 		= СтрокаКурса[0].Курс;
		СтрокаКурса 	= ТаблицаКурсов.НайтиСтроки(Новый Структура("Валюта, Период", ВалютаКон, ПериодПланирования));
		КурсКон 		= СтрокаКурса[0].Курс;
	Иначе
		СтрокиКурса 	= ТаблицаКурсов.НайтиСтроки(Новый Структура("Валюта", ВалютаНач));
		КурсНач 		= БлижайшийПланируемыйКурсКДате(СтрокиКурса, ПериодПланирования);
		СтрокиКурса 	= ТаблицаКурсов.НайтиСтроки(Новый Структура("Валюта", ВалютаКон));
		КурсКон 		= БлижайшийПланируемыйКурсКДате(СтрокиКурса, ПериодПланирования);
	КонецЕсли;
	
	Возврат Сумма * КурсНач / КурсКон;
	
КонецФункции

&НаКлиенте
Процедура СценарийОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = ПредопределенноеЗначение("Справочник.Сценарии.ФактическиеДанные") Тогда
		Сообщение = НСтр("en='Сценарий ""Фактические данные"" не предназначен для ввода данных';ru='Сценарий ""Фактические данные"" не предназначен для ввода данных'");
		ПоказатьПредупреждение(,Сообщение);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ВыводИОтображениеТабличногоБюджета

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			ЗагрузитьПодготовленныеДанные();
			Бюджет.ФиксацияСверху = ФиксацияСверху;
			Бюджет.ФиксацияСлева = ФиксацияСлева;
			Для Каждого СтрокаДерева из ДеревоЭлементовБюджета.ПолучитьЭлементы() Цикл;
				Элементы.ДеревоЭлементовБюджета.Развернуть(СтрокаДерева.ПолучитьИдентификатор(), Истина);
			КонецЦикла;
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания",
				ПараметрыОбработчикаОжидания.ТекущийИнтервал,
				Истина);
		КонецЕсли;
		
	Исключение
		
		ИдентификаторЗадания = Неопределено;
		
		ОтображениеСостояния = Элементы.Бюджет.ОтображениеСостояния;
		Если Не ОтображениеСостояния.Видимость Тогда
			
			ОтображениеСостояния.Видимость  = Истина;
			ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;
			ОтображениеСостояния.Картинка   = Новый Картинка;
			ОтображениеСостояния.Текст  = НСтр("en='Ошибка формирования бюджета';ru='Ошибка формирования бюджета'");
			
		КонецЕсли;
		
	КонецПопытки;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(Знач ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаКлиенте
Процедура ЗапуститьПроверкуРасчетаИзменений()
	
	//Если Не ФайловаяИБ и ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
	//	ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
	//	ПараметрыОбработчикаОжидания.ТекущийИнтервал = 1;
	//	ПодключитьОбработчикОжидания(
	//			"ПроверитьРасчетИзменений",
	//			ПараметрыОбработчикаОжидания.ТекущийИнтервал,
	//			Истина);
	//Иначе
		УстановитьНадписьОбновленияИтогов();
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьРасчетИзменений()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			ЗапуститьЗаданиеПовторно = Ложь;
			Если ЕстьИзмененияКОтражению Тогда
				ЗапуститьЗаданиеПовторно = Истина;
			КонецЕсли;
			ЗагрузитьРезультатРасчетаИзменений();
			Если ЗапуститьЗаданиеПовторно Тогда
				ВремяПоследнегоРасчета = ТекущаяДата();
				УстановитьНадписьОбновленияИтогов(Истина);
				ОтразитьИзмененияБюджета();
				ЗапуститьПроверкуРасчетаИзменений();
			Иначе
				УстановитьНадписьОбновленияИтогов();
			КонецЕсли;
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"ПроверитьРасчетИзменений",
				ПараметрыОбработчикаОжидания.ТекущийИнтервал,
				Истина);
		КонецЕсли;
	Исключение
		ИдентификаторЗадания = Неопределено;
	КонецПопытки;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьНадписьОбновленияИтогов(СтартПроцесса = Ложь)
	
	Если Не АвтоматическоеОбновлениеБюджета Тогда
		Элементы.НадписьСтатусРасчета.ТекущаяСтраница = Элементы.ПустаяНадпись;
		Возврат;
	КонецЕсли;
	
	Если СтартПроцесса Тогда
		ВремяНачалаРасчета = ТекущаяДата();
	Иначе
		ВремяПоследнегоРасчета = ТекущаяДата();
		ПродолжительностьПоследнегоРасчета = ВремяПоследнегоРасчета - ВремяНачалаРасчета;
	КонецЕсли;
		
	Если ПродолжительностьПоследнегоРасчета > 5 Тогда
		ТекстНадписи = НСтр("en='Расчет занимает %1 сек.: рекомендуется отключить автообновление итогов';ru='Расчет занимает %1 сек.: рекомендуется отключить автообновление итогов'");
		ТекстНадписи = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
									ТекстНадписи, ПродолжительностьПоследнегоРасчета);
	КонецЕсли;
	
	Если ПродолжительностьПоследнегоРасчета > 5 Тогда
		Если СтартПроцесса Тогда
			Элементы.ДекорацияВыполняетсяОтключитьАвтоРасчет.Заголовок = ТекстНадписи;
			Элементы.НадписьСтатусРасчета.ТекущаяСтраница = Элементы.ВыполняетсяРасчетСОшибками;
		Иначе
			Элементы.ДекорацияРекомендуетсяОтключитьАвтоРасчет.Заголовок = ТекстНадписи;
			Элементы.НадписьСтатусРасчета.ТекущаяСтраница = Элементы.РекомендуетсяОтключитьАвтоРасчет;
		КонецЕсли;
	Иначе
		Если СтартПроцесса Тогда
			Элементы.НадписьСтатусРасчета.ТекущаяСтраница = Элементы.ВыполняетсяРасчет;
		Иначе
			Элементы.НадписьСтатусРасчета.ТекущаяСтраница = Элементы.ПустаяНадпись;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗапуститьПроверкуВыполненияОтчета()
	
	//Если Не ФайловаяИБ Тогда
	//	ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
	//	ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
	//Иначе
		Бюджет.ФиксацияСверху = ФиксацияСверху;
		Бюджет.ФиксацияСлева = ФиксацияСлева;
		Для Каждого СтрокаДерева из ДеревоЭлементовБюджета.ПолучитьЭлементы() Цикл;
			Элементы.ДеревоЭлементовБюджета.Развернуть(СтрокаДерева.ПолучитьИдентификатор(), Истина);
		КонецЦикла;
	//КонецЕсли;
	
КонецПроцедуры

//&НаСервере
//Функция ЗапуститьВыполнениеВФоне(Знач ИдентификаторФормы, Знач ИмяЭкспортнойПроцедуры, Знач Параметры, Знач НаименованиеЗадания = "")
//	
//	Если Не ЗначениеЗаполнено(НаименованиеЗадания) Тогда
//		НаименованиеЗадания = ИмяЭкспортнойПроцедуры;
//	КонецЕсли;
//	
//	ПараметрыЭкспортнойПроцедуры = Новый Массив;
//	ПараметрыЭкспортнойПроцедуры.Добавить(Параметры);
//	ПараметрыЭкспортнойПроцедуры.Добавить(АдресХранилища);
//	
//	ПараметрыЗадания = Новый Массив;
//	ПараметрыЗадания.Добавить(ИмяЭкспортнойПроцедуры);
//	ПараметрыЗадания.Добавить(ПараметрыЭкспортнойПроцедуры);

//	ПараметрыЗадания.Добавить(Неопределено);
//	Задание = ФоновыеЗадания.Выполнить("ОбщегоНазначения.ВыполнитьБезопасно", ПараметрыЗадания,, НаименованиеЗадания);
//	
//	Результат = Новый Структура;
//	Результат.Вставить("ЗаданиеВыполнено",     Ложь);
//	Результат.Вставить("ИдентификаторЗадания", Задание.УникальныйИдентификатор);
//	Результат.Вставить("Задание",              Задание);
//	
//	Возврат Результат;
//	
//КонецФункции

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные(Знач РезультатВыполнения = Неопределено)
	
	ТекущаяСтрока = Элементы.ДеревоЭлементовБюджета.ТекущаяСтрока;
	ИндексСтроки = Неопределено;
	Если ТекущаяСтрока <> Неопределено Тогда
		ИндексСтроки = ОбластьБюджетаПоСтроке(Бюджет, ДеревоЭлементовБюджета.НайтиПоИдентификатору(ТекущаяСтрока).ИДГруппировки);
	КонецЕсли;
	
	Если РезультатВыполнения = Неопределено Тогда
		РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресХранилища);
	КонецЕсли;
	
	Бюджет				= РезультатВыполнения.Результат;
	ФиксацияСлева 		= Бюджет.ФиксацияСлева;
	ФиксацияСверху 		= Бюджет.ФиксацияСверху;
	
	ПоместитьВоВременноеХранилище(РезультатВыполнения.ПараметрыВыводаВидаБюджета, ПараметрыВыводаВидаБюджета);
	ПоместитьВоВременноеХранилище(РезультатВыполнения.ДанныеЯчеек, АдресДанныхЯчеек);
	
	ЗначениеВРеквизитФормы(РезультатВыполнения.ДеревоСтрокСпискаРедактирования, "ДеревоЭлементовБюджета");
	
	Если ИндексСтроки <> Неопределено Тогда
		ИДГруппировки = Неопределено;
		Расшифровка = Бюджет.Область(ИндексСтроки, 1).Расшифровка;
		Если ТипЗнч(Расшифровка) = Тип("Структура") 
			И Расшифровка.Свойство("ИДГруппировки", ИДГруппировки) Тогда
			
			НайденнаяСтрока = ФинансоваяОтчетностьКлиентСервер.ПодчиненныйЭлемент(ДеревоЭлементовБюджета, "ИДГруппировки", ИДГруппировки);
			Если НайденнаяСтрока <> Неопределено Тогда
				Элементы.ДеревоЭлементовБюджета.ТекущаяСтрока = НайденнаяСтрока.ПолучитьИдентификатор();
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	ЭлементыУсловногоОформления = ЭтотОбъект.УсловноеОформление.Элементы;
	
	УсловноеОформлениеКУдалению = Новый Массив;
	Для Каждого ЭлементУО из ЭлементыУсловногоОформления Цикл
		Если Найти(ЭлементУО.Представление, "ДобавленноеУОДереваЭлементов_") Тогда
			УсловноеОформлениеКУдалению.Добавить(ЭлементУО);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементУО из УсловноеОформлениеКУдалению Цикл
		УсловноеОформление.Элементы.Удалить(ЭлементУО);
	КонецЦикла;
	
	Для Каждого КлючиСтилей из РезультатВыполнения.СтильУровней Цикл
		
		Стили = КлючиСтилей.Значение;
		
		Для Каждого КлючИЗначение из Стили Цикл
			
			Элемент = ЭлементыУсловногоОформления.Добавить();
			
			ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ДеревоЭлементовБюджета.Уровень");
			ОтборЭлемента.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение 	= КлючИЗначение.Ключ;
			
			ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ДеревоЭлементовБюджета.ИДТаблицы");
			ОтборЭлемента.ВидСравнения 		= ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение 	= КлючиСтилей.Ключ;
			
			Элемент.Оформление.УстановитьЗначениеПараметра("ЦветФона", КлючИЗначение.Значение.ЦветФона);
			
			ОформляемоеПоле = Элемент.Поля.Элементы.Добавить();
			ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("ДеревоЭлементовБюджетаПредставление");
			
			Элемент.Использование = Истина;
			Элемент.Представление = "ДобавленноеУОДереваЭлементов_" + КлючИЗначение.Ключ;
			
		КонецЦикла;
		
	КонецЦикла;
	
	ИдентификаторЗадания = Неопределено;
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Бюджет, "НеИспользовать");
	УдалитьИзВременногоХранилища(АдресХранилища);
	
КонецПроцедуры

&НаСервере
Функция ПреобразоватьРасшифровку(Расшифровка, РежимПоиска = Ложь, ИмяПоказателя = Неопределено)
	Перем СтатьяБюджетов;
	
	Если Не Расшифровка.Свойство("СтатьяБюджетов", СтатьяБюджетов)
		ИЛИ Не ЗначениеЗаполнено(СтатьяБюджетов) Тогда
		Если Не РежимПоиска Тогда
			ВызватьИсключение НСтр("en='Ошибка в структуре вида бюджета: не определена статья бюджетов';ru='Ошибка в структуре вида бюджета: не определена статья бюджетов'");
		Иначе
			Возврат Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураРезультат = Новый Структура("СтатьяБюджетов", СтатьяБюджетов);
	
	ИспользуемыеПериоды = Новый Массив;
	Для Каждого КлючИЗначение из Расшифровка Цикл
		Если БюджетнаяОтчетностьКлиентСервер.ЛеваяЧастьИмениСовпадает(КлючИЗначение.Ключ, "Период") Тогда
			ИспользуемыеПериоды.Добавить(Перечисления.Периодичность[СтрЗаменить(КлючИЗначение.Ключ, "Период", "")]);
		КонецЕсли;
	КонецЦикла;
	
	Если ИспользуемыеПериоды.Количество() Тогда
		МинимальнаяПериодичность = Перечисления.Периодичность.МинимальнаяПериодичность(ИспользуемыеПериоды);
		СтруктураРезультат.Вставить("ПериодПланирования", Расшифровка["Период" + МинимальнаяПериодичность]);
	Иначе
		СтруктураРезультат.Вставить("ПериодПланирования", Объект.НачалоПериода);
	КонецЕсли;
	
	ПоказательРасшифровки = Неопределено;
	Если Расшифровка.Свойство("ИмяПоказателя", ПоказательРасшифровки) Тогда
		ИмяПоказателя = ПоказательРасшифровки;
	Иначе
		ИмяПоказателя = "Сумма";
	КонецЕсли;
	
	Валюта = Неопределено;
	Если Расшифровка.Свойство("Валюта", Валюта) Тогда
		СтруктураРезультат.Вставить("Валюта", Валюта);
	КонецЕсли;
	
	Если Расшифровка.Свойство("ВалютаВывода", Валюта) Тогда
		СтруктураРезультат.Вставить("ВалютаВывода", Валюта);
	КонецЕсли;
	
	КэшПараметровСтатей = ПолучитьИзВременногоХранилища(АдресКэшаПараметровСтатей);
	РеквизитыСтатьи = КэшПараметровСтатей[СтатьяБюджетов];
	
	Если РеквизитыСтатьи = Неопределено Тогда
	
		РеквизитыСтатьи = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(СтатьяБюджетов, 
			"ВидАналитики1, ВидАналитики2, ВидАналитики3, ВидАналитики4, ВидАналитики5, ВидАналитики6");
		КэшПараметровСтатей.Вставить(СтатьяБюджетов, РеквизитыСтатьи);
		
		ПоместитьВоВременноеХранилище(КэшПараметровСтатей, АдресКэшаПараметровСтатей);
	
	КонецЕсли;
	
	Для Сч = 1 по 6 Цикл
		
		ВидАналитики = РеквизитыСтатьи["ВидАналитики" + Сч];
		ЗначениеАналитики = Неопределено;
		Если ЗначениеЗаполнено(ВидАналитики) Тогда
			ИмяПоляАналитики = БюджетнаяОтчетностьСервер.ИмяПоляБюджетногоОтчета(ВидАналитики);
			Если Расшифровка.Свойство(ИмяПоляАналитики, ЗначениеАналитики) Тогда
				Если ТипЗнч(ЗначениеАналитики) = Тип("Строка")
					И Лев(ЗначениеАналитики, 8) = "<прочие " Тогда
					ЗначениеАналитики = Неопределено;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		СтруктураРезультат.Вставить("Аналитика" + Сч, ЗначениеАналитики);
		
	КонецЦикла;
	
	Возврат СтруктураРезультат;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьРезультатРасчетаИзменений(Знач Режим = "", РезультатВыполнения = Неопределено)
	
	ВыполняетсяЗаданиеРасчетаИзменений = Ложь;
	
	Если РезультатВыполнения = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоместитьВоВременноеХранилище(РезультатВыполнения.ПараметрыВыводаВидаБюджета, ПараметрыВыводаВидаБюджета);
	ПоместитьВоВременноеХранилище(РезультатВыполнения.ДанныеЯчеек, АдресДанныхЯчеек);
	
	ИдентификаторЗадания = Неопределено;
	ЕстьИзмененияКОтражению = Ложь;
	
	ОбновитьДанныеЯчеек = Режим = "ОбновитьДанныеЯчеек";
	
	Если Не ОбновитьДанныеЯчеек Тогда
		
		ОбъектИПараметрыРасчета = СтруктураПоОбъектуЭкземпляраБюджета(ЭтотОбъект);
		ЗагрузитьРезультатРасчетаИзмененийНаКлиенте(ОбъектИПараметрыРасчета, Бюджет, РезультатВыполнения.Результат);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗагрузитьРезультатРасчетаИзмененийНаКлиенте(ОбъектИПараметрыРасчета, Бюджет, РезультатРасчета)
	
	ЭлементСтруктура = Истина;
	Если ТипЗнч(РезультатРасчета) <> Тип("Массив") Тогда
		ЭлементСтруктура = Ложь;
		ЕстьРасшифровка = РезультатРасчета.Колонки.Найти("Расшифровка") <> Неопределено;
	КонецЕсли;
	
	Для Каждого Изменение из РезультатРасчета Цикл
		
		Значение = ?(ЗначениеЗаполнено(Изменение.Значение), Изменение.Значение, Неопределено);
		
		Если ЭлементСтруктура Тогда
			ЕстьРасшифровка = Изменение.Свойство("Расшифровка");
		КонецЕсли;
		
		Если ЕстьРасшифровка Тогда
			БюджетнаяОтчетностьКлиентСервер.ОтразитьИзменениеЯчейки(ОбъектИПараметрыРасчета, Изменение.Расшифровка, Значение);
			Если ЗначениеЗаполнено(Изменение.ИмяОбласти) Тогда
				Область = Бюджет.Область(Изменение.ИмяОбласти);
				Если Область.СодержитЗначение Тогда
					Область.Значение = Значение;
				Иначе
					Область.Текст = Значение;
				КонецЕсли;
			КонецЕсли;
		Иначе
			Область = Бюджет.Область(Изменение.ИмяОбласти);
			Если Область.СодержитЗначение Тогда
				Область.Значение = Значение;
				Расшифровка = БюджетнаяОтчетностьВызовСервера.ЗначениеРасшифровки(Область.Расшифровка, 
															ОбъектИПараметрыРасчета.АдресДанныхРасшифровки);
				БюджетнаяОтчетностьКлиентСервер.ОтразитьИзменениеЯчейки(ОбъектИПараметрыРасчета, Расшифровка, Значение);
			Иначе
				Область.Текст = Значение;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ЕстьИзмененияКОтражению = Ложь;
	
КонецПроцедуры

&НаСервере
Функция ПараметрыОткрытияОтчетаРасшифровки()
	
	Попытка
		Расшифровка = Элементы.Бюджет.ТекущаяОбласть.Расшифровка;
	Исключение
		Возврат Неопределено;
	КонецПопытки;
	
	Если ТипЗнч(Расшифровка) <> Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ПараметрыОтчета = ПодготовитьПараметрыОтчета();
	Возврат БюджетнаяОтчетностьВызовСервера.ПараметрыОткрытияОтчетаРасшифровки(ПараметрыОтчета, Расшифровка, АдресДанныхЯчеек);
	
КонецФункции

&НаКлиенте
Процедура ПослеСохраненияДокументаПередРасшифровкой(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность или Объект.Ссылка.Пустая() Тогда
		ЭтотОбъект.Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
	КонецЕсли;
	
	ПараметрыОткрытия = ПараметрыОткрытияОтчетаРасшифровки();
	Если ПараметрыОткрытия <> Неопределено Тогда
		БюджетнаяОтчетностьКлиент.ОткрытьФормуОтчета(ПараметрыОткрытия, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ВыводОтображениеИРедактированиеСпискаБюджета

&НаСервере
Функция РасшифровкаОтчетаПоСтроке(РасшифровкаКолонки, ТекущаяСтрока, Измерения)
	
	Расшифровка = ОбщегоНазначенияКлиентСервер.СкопироватьСтруктуру(РасшифровкаКолонки);
	Для Каждого Измерение из Измерения Цикл
		Если Не ЗначениеЗаполнено(ТекущаяСтрока[Измерение]) Тогда
			Расшифровка.Вставить(Измерение, Неопределено);
		Иначе
			Расшифровка.Вставить(Измерение, ТекущаяСтрока[Измерение]);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Расшифровка;
	
КонецФункции

&НаСервере
Функция СоставКолонокКорневогоЭлемента(ТекущаяСтрока, СписокПараметров, КолонкиПоИзмерениям)
	
	ПодчиненныеСтроки = ТекущаяСтрока.ПолучитьЭлементы();
	Если ПодчиненныеСтроки.Количество() = 1 Тогда
		
		КолонкиПоИзмерениям = СписокПараметров[ПодчиненныеСтроки[0].Строка];
		МассивЭлементов = Новый Массив;
		МассивЭлементов.Добавить(КолонкиПоИзмерениям);
		
	Иначе
		
		МассивЭлементов = Новый Массив;
		Для Каждого ПодчиненнаяСтрока из ПодчиненныеСтроки Цикл
			КолонкиПоИзмерениямТекущейСтроки = СписокПараметров[ПодчиненнаяСтрока.Строка];
			Если КолонкиПоИзмерениямТекущейСтроки = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			КолонкиПоИзмерениям = КолонкиПоИзмерениямТекущейСтроки;
			МассивЭлементов.Добавить(КолонкиПоИзмерениям);
		КонецЦикла;
		
		Для Сч = 1 По МассивЭлементов.ВГраница() Цикл
			Если МассивЭлементов[Сч] = Неопределено
				ИЛИ МассивЭлементов[Сч-1] = Неопределено Тогда
				Возврат Ложь;
			КонецЕсли;
			Значение1 = СтрСоединить(МассивЭлементов[Сч].Измерения);
			Значение2 = СтрСоединить(МассивЭлементов[Сч-1].Измерения);
			Если Значение1 <> Значение2 Тогда
				Возврат Ложь;
			КонецЕсли;
			Если МассивЭлементов[Сч].Свойство("СтатьиБюджетов") Тогда
				Для Каждого КлючИЗначение из МассивЭлементов[Сч].СтатьиБюджетов Цикл
					Если МассивЭлементов[Сч-1].СтатьиБюджетов[КлючИЗначение.Ключ].СтатьяБюджетов <> КлючИЗначение.Значение.СтатьяБюджетов
						ИЛИ МассивЭлементов[Сч-1].СтатьиБюджетов[КлючИЗначение.Ключ].ИмяПоказателя <> КлючИЗначение.Значение.ИмяПоказателя Тогда
						Возврат Ложь;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Если КолонкиПоИзмерениям = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтатьиБюджетов = Неопределено;
	КолонкиПоИзмерениям.Свойство("СтатьиБюджетов", СтатьиБюджетов);
	
	КолонкиПоИзмерениям = Новый Структура("Измерения, НастройкиКолонок, НастройкиВвода, СтрокиОснования", 
											КолонкиПоИзмерениям.Измерения, 
											КолонкиПоИзмерениям.НастройкиКолонок, 
											Новый Структура,
											Новый Массив);
											
	Если СтатьиБюджетов <> Неопределено Тогда
		КолонкиПоИзмерениям.Вставить("СтатьиБюджетов", СтатьиБюджетов);
	КонецЕсли;
	
	Для Каждого ЭлементНастройки из КолонкиПоИзмерениям.Измерения Цикл
		
		РезультирующийСписок = Новый СписокЗначений;
		Для Каждого ЭлементМассива из МассивЭлементов Цикл
			Значения = ЭлементМассива.НастройкиВвода[ЭлементНастройки];
			Если Значения = Неопределено Тогда
				РезультирующийСписок = Неопределено;
				Прервать;
			Иначе
				Для Каждого ЭлементСписка из Значения Цикл
					Если РезультирующийСписок.НайтиПоЗначению(ЭлементСписка.Значение) = Неопределено Тогда
						РезультирующийСписок.Добавить(ЭлементСписка.Значение, ЭлементСписка.Представление);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		КолонкиПоИзмерениям.НастройкиВвода.Вставить(ЭлементНастройки, РезультирующийСписок);
		
	КонецЦикла;
	
	Для Каждого ЭлементМассива из МассивЭлементов Цикл
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(КолонкиПоИзмерениям.СтрокиОснования, ЭлементМассива.СтрокиОснования, Истина);
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Процедура ЗагрузитьДанныеСписка(КолонкиПоИзмерениям, ФиксированныеЗначения, СтруктураАналогРасшифровки, ТолькоОбновить = Ложь)
	
	ДанныеЯчеек = ПолучитьИзВременногоХранилища(АдресДанныхЯчеек);
	ПараметрыЭкземпляраБюджета = ПолучитьИзВременногоХранилища(ПараметрыВыводаВидаБюджета);
	ИндексыТаблицыДанныхЯчеек = ПараметрыЭкземпляраБюджета.ИндексыТаблицыДанныхЯчеек;
	ПараметрыЯчеек = ПараметрыЭкземпляраБюджета.СтруктураОписанияОтчета.ПараметрыЯчеек;
	
	Если Не ТолькоОбновить Тогда
		СписокРедактированияБюджета.Очистить();
		ТаблицаОбработки = СписокРедактированияБюджета.Выгрузить().СкопироватьКолонки();
		ТаблицаОбработки.Колонки.Добавить("МинимумНомерПоПорядку");
	КонецЕсли;
	
	Для Каждого Строка из КолонкиПоИзмерениям.СтрокиОснования Цикл
		
		СтруктураПоиска = Новый Структура("ОсновнойЭлемент, Строка", Истина, Строка);
		Для Каждого КлючИЗначение из ФиксированныеЗначения Цикл
			СтруктураПоиска.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
		КонецЦикла;
		
		СтрокиДанныхЯчеек = ДанныеЯчеек.Скопировать(СтруктураПоиска);
		СтрокиДанныхЯчеек.Сортировать("МинимумНомерПоПорядку");
		
		СтрокаСвертки = СтрСоединить(КолонкиПоИзмерениям.Измерения, ",");
		СтрокиДанных = СтрокиДанныхЯчеек.Скопировать();
		Если ПустаяСтрока(СтрокаСвертки) Тогда
			СтрокиДанных = Новый Массив;
			СтрокиДанных.Добавить(Новый Структура);
		Иначе
			СтрокиДанных.Свернуть(СтрокаСвертки);
		КонецЕсли;
		
		Для Каждого СтрокаДанных из СтрокиДанных Цикл
			
			СтруктураСумм = Новый Структура;
			СтруктураПримечаний = Новый Структура;
			
			ЕстьЗначимыеКолонки = Ложь;
			
			Для Каждого Расшифровка из СтруктураАналогРасшифровки Цикл
				ТекстИндекса = "ОсновнойЭлемент,Строка";
				СтруктураПоиска = Новый Структура("ОсновнойЭлемент, Строка", Истина, Строка);
				Для Каждого Измерение из КолонкиПоИзмерениям.Измерения Цикл
					СтруктураПоиска.Вставить(Измерение, СтрокаДанных[Измерение]);
					ТекстИндекса = ТекстИндекса + "," + Измерение;
				КонецЦикла;
				ИмяПоказателя = "Сумма";
				Для Каждого КлючИЗначение из Расшифровка.Значение Цикл
					Если КлючИЗначение.Ключ = "Расчетная" Тогда
						// вспомогательная информация
						Продолжить;
					КонецЕсли;
					Если КлючИЗначение.Ключ = "ИмяПоказателя" Тогда
						ИмяПоказателя = КлючИЗначение.Значение;
						Продолжить;
					КонецЕсли;
					Значение = КлючИЗначение.Значение;
					Если Значение = Неопределено Тогда
						Значение = КолонкиПоИзмерениям.НастройкиКолонок[Измерение].ТипЗначения.ПривестиЗначение(Значение);
					КонецЕсли;
					СтруктураПоиска.Вставить(КлючИЗначение.Ключ, Значение);
					ТекстИндекса = ТекстИндекса + "," + КлючИЗначение.Ключ;
				КонецЦикла;
				
				Если ИндексыТаблицыДанныхЯчеек[ТекстИндекса] = Неопределено Тогда
					ДанныеЯчеек.Индексы.Добавить(ТекстИндекса);
					ИндексыТаблицыДанныхЯчеек.Вставить(ТекстИндекса, Истина);
				КонецЕсли;
				
				НайденныеСтроки = ДанныеЯчеек.НайтиСтроки(СтруктураПоиска);
				
				Если ИмяПоказателя = "Сумма" И
					СтруктураПоиска.Свойство("Валюта") Тогда
					ИмяПоказателя = "СуммаВал";
				КонецЕсли;
				
				Значение = 0; Примечание = "";
				Если НайденныеСтроки.Количество() > 1 Тогда
					ВызватьИсключение НСтр("en='Ошибка в структуре вида бюджета';ru='Ошибка в структуре вида бюджета'")
				ИначеЕсли НайденныеСтроки.Количество() = 1 Тогда
					СтрокаДанныхЯчеек = НайденныеСтроки[0];
					СтрокаПараметров = ПараметрыЯчеек.Найти(СтрокаДанныхЯчеек.ИндексСтроки, "ИндексСтроки");
					Если СтрокаПараметров.СложнаяТаблица Тогда
						Значение = Неопределено;
						Если СтрокаПараметров.ФлагСумма Тогда
							Значение = СтрокаДанныхЯчеек.Сумма;
						ИначеЕсли СтрокаПараметров.ФлагКоличество Тогда
							Значение = СтрокаДанныхЯчеек.Количество;
						КонецЕсли;
						Если Не ЗначениеЗаполнено(Значение) Тогда
							Значение = 0;
						КонецЕсли;
					Иначе
						Значение = ?(СтрокаДанныхЯчеек[ИмяПоказателя]=Неопределено,0,СтрокаДанныхЯчеек[ИмяПоказателя]);
					КонецЕсли;
					Примечание = СтрокаДанныхЯчеек.Примечание;
				КонецЕсли;
				
				Если Значение <> 0 ИЛИ ТолькоОбновить Тогда
					Если Не Расшифровка.Значение.Свойство("Расчетная") Тогда
						ЕстьЗначимыеКолонки = Истина;
					КонецЕсли;
					СтруктураСумм.Вставить(Расшифровка.Ключ, Значение);
				КонецЕсли;
				
				Если ЗначениеЗаполнено(Примечание) Тогда
					СтруктураПримечаний.Вставить(Расшифровка.Ключ + "Примечание", Примечание);
					СтруктураПримечаний.Вставить(Расшифровка.Ключ + "КартинкаПримечание", БиблиотекаКартинок.Комментарий);
				КонецЕсли;
				
			КонецЦикла;
			
			Если ТолькоОбновить ИЛИ ЕстьЗначимыеКолонки ИЛИ СтруктураПримечаний.Количество() Тогда
				МассивИзмерений = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(СтрокаСвертки);
				
				СтруктураПоискаВСписке = Новый Структура();
				СтруктураПоискаВДанных = Новый Структура();
				
				Для Каждого Измерение из МассивИзмерений Цикл
					Значение = СтрокаДанных[Измерение];
					СтруктураПоискаВДанных.Вставить(Измерение, Значение);
					Если Значение = Неопределено Тогда
						Значение = КолонкиПоИзмерениям.НастройкиКолонок[Измерение].ТипЗначения.ПривестиЗначение(Значение);
					КонецЕсли;
					СтруктураПоискаВСписке.Вставить(Измерение, Значение);
				КонецЦикла;
				
				Если ТолькоОбновить Тогда
					НайденныеСтроки = СписокРедактированияБюджета.НайтиСтроки(СтруктураПоискаВСписке);
					Если НайденныеСтроки.Количество() Тогда
						НоваяСтрока = НайденныеСтроки[0];
					Иначе
						Продолжить;
					КонецЕсли;
				Иначе
					НоваяСтрока = ТаблицаОбработки.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаДанных);
					СтруктураПоискаВДанных.Вставить("ВидЭлемента", Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов);
					СтрокиДляПоискаНомераПоПорядку = СтрокиДанныхЯчеек.НайтиСтроки(СтруктураПоискаВДанных);
					Для Каждого СтрокаНомера из СтрокиДляПоискаНомераПоПорядку Цикл
						Если СтрокаНомера.МинимумНомерПоПорядку <> Null Тогда
							НоваяСтрока.МинимумНомерПоПорядку = СтрокаНомера.МинимумНомерПоПорядку;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураСумм);
				ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураПримечаний);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Если Не ТолькоОбновить Тогда
		ТаблицаОбработки.Сортировать("МинимумНомерПоПорядку");
		СписокРедактированияБюджета.Загрузить(ТаблицаОбработки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыСпискаВводаНаСервере()
	
	Если Не АвтоматическоеОбновлениеБюджета Тогда
		ОтразитьИзмененияБюджета("ОбновитьДанныеЯчеек");
	КонецЕсли;
	
	ТекстСообщения = НСтр("en='Редактирование для текущей строки не предусмотрено. Выберите другую строку бюджета';ru='Редактирование для текущей строки не предусмотрено. Выберите другую строку бюджета'");
	Отказ = Ложь;
	ПроверитьЗаполнитьТаблицуКурсов(Отказ, ТекстСообщения);
	Если Не МожноОбновитьБюджет() Тогда
		Отказ = Истина;
	КонецЕсли;
	
	Если Отказ Тогда
		Элементы.ПримечаниеКТекущейСтроке.Заголовок = ТекстСообщения;
		Элементы.ГруппаСписокРедактированияБюджета.ТекущаяСтраница = Элементы.ИнформацияОСтроке;
		Возврат;
	КонецЕсли;
	
	ПараметрыЭкземпляраБюджета = ПолучитьИзВременногоХранилища(ПараметрыВыводаВидаБюджета);
	СписокПараметров = ПараметрыЭкземпляраБюджета.СтруктураОписанияСпискаВвода;
	КолонкиТаблиц = ПараметрыЭкземпляраБюджета.КолонкиТаблиц;
	СтруктураЯчеек = ПараметрыЭкземпляраБюджета.СтруктураОписанияОтчета.СтруктураЯчеек;
	
	ИндексТекущаяСтрока = Элементы.ДеревоЭлементовБюджета.ТекущаяСтрока;
	Если ИндексТекущаяСтрока = Неопределено Тогда
		Элементы.ПримечаниеКТекущейСтроке.Заголовок = ТекстСообщения;
		Элементы.ГруппаСписокРедактированияБюджета.ТекущаяСтраница = Элементы.ИнформацияОСтроке;
		Возврат;
	КонецЕсли;
	
	ТекущаяСтрока = ДеревоЭлементовБюджета.НайтиПоИдентификатору(ИндексТекущаяСтрока);
	
	Если ТекущаяСтрока.ПолучитьРодителя() = Неопределено Тогда
		
		КолонкиПоИзмерениям = Неопределено;
		Если Не СоставКолонокКорневогоЭлемента(ТекущаяСтрока, СписокПараметров, КолонкиПоИзмерениям) Тогда
			Элементы.ПримечаниеКТекущейСтроке.Заголовок = ТекстСообщения;
			Элементы.ГруппаСписокРедактированияБюджета.ТекущаяСтраница = Элементы.ИнформацияОСтроке;
			Возврат;
		КонецЕсли;
		
	Иначе
		
		КолонкиПоИзмерениям = СписокПараметров[ТекущаяСтрока.Строка];
		
	КонецЕсли;
	
	Если КолонкиПоИзмерениям = Неопределено Тогда
		Элементы.ПримечаниеКТекущейСтроке.Заголовок = ТекстСообщения;
		Элементы.ГруппаСписокРедактированияБюджета.ТекущаяСтраница = Элементы.ИнформацияОСтроке;
		Возврат;
	КонецЕсли;
	
	Элементы.ГруппаСписокРедактированияБюджета.ТекущаяСтраница = Элементы.СписокРедактирования;
	
	ОписаниеСтроки = ПолучитьИзВременногоХранилища(АдресПараметровРедактированияСтроки);
	
	// Установка фиксированных значений для строки,
	// если в иерархии дерева уже определены значения группировок
	ФиксированныеЗначения = Новый Структура;
	СтрокаРасчета = ТекущаяСтрока;
	Пока СтрокаРасчета <> Неопределено Цикл
		Если СтрокаРасчета.ЭтоАналитикаПрочее Тогда
			ФиксированныеЗначения.Вставить(СтрокаРасчета.ИмяИзмерения, Неопределено);
		ИначеЕсли ЗначениеЗаполнено(СтрокаРасчета.ФиксированноеЗначение) Тогда
			ФиксированныеЗначения.Вставить(СтрокаРасчета.ИмяИзмерения, СтрокаРасчета.ФиксированноеЗначение);
		КонецЕсли;
		СтрокаРасчета = СтрокаРасчета.ПолучитьРодителя();
	КонецЦикла;
	
	ДобавляемыеЭлементы = Новый Массив;
	ДобавляемыеКолонки = Новый Массив;
	Документы.ЭкземплярБюджета.РассчитатьЭлементыСпискаБюджетаКДобавлению(
							ДобавляемыеЭлементы, ДобавляемыеКолонки, КолонкиПоИзмерениям, ФиксированныеЗначения);
	
	Если ИзмеренияРедактированияСовпадают(ОписаниеСтроки, КолонкиПоИзмерениям.Измерения, ТекущаяСтрока.ИДТаблицы) Тогда
		
		СтруктураАналогРасшифровки = ОписаниеСтроки.СтруктураАналогРасшифровки;
		Для Каждого Колонка из ДобавляемыеКолонки Цикл
			
			Документы.ЭкземплярБюджета.УстановитьДоступностьСписокВыбораКолонки(Элементы[Колонка.Имя], Колонка, ФиксированныеЗначения);
			
		КонецЦикла;
		
	Иначе
		
		// колонки текущей таблицы
		СтруктураКолонок = КолонкиТаблиц[ТекущаяСтрока.ИДТаблицы];
		
		// структура с ключами полей текущей колонки
		СтруктураАналогРасшифровки = Новый Структура;
		
		Документы.ЭкземплярБюджета.ДобавитьКолонкиСпискаБюджетаПоТаблице(ДобавляемыеЭлементы, ДобавляемыеКолонки, 
														КолонкиПоИзмерениям, СтруктураКолонок, СтруктураАналогРасшифровки);
		
		Документы.ЭкземплярБюджета.ОтразитьИзмененияКолонокСпискаБюджетаНаФорме(ЭтотОбъект, ДобавляемыеЭлементы, ДобавляемыеКолонки, ФиксированныеЗначения);
		
		ФиксироватьКолонокСлева = КолонкиПоИзмерениям.Измерения.Количество();
		Если ФиксироватьКолонокСлева <= 3 Тогда
			Элементы.СписокРедактированияБюджета.ФиксацияСлева = ФиксироватьКолонокСлева;
		КонецЕсли;
		
	КонецЕсли;
	
	ЗагрузитьДанныеСписка(КолонкиПоИзмерениям, ФиксированныеЗначения, СтруктураАналогРасшифровки);
	
	ОписаниеСтроки = Новый Структура();
	ОписаниеСтроки.Вставить("ФиксированныеЗначения", ФиксированныеЗначения);
	ОписаниеСтроки.Вставить("СтруктураАналогРасшифровки", СтруктураАналогРасшифровки);
	ОписаниеСтроки.Вставить("ИзменяемыеИзмерения", КолонкиПоИзмерениям.Измерения);
	ОписаниеСтроки.Вставить("КолонкиПоИзмерениям", КолонкиПоИзмерениям);
	ОписаниеСтроки.Вставить("ИДТаблицы", ТекущаяСтрока.ИДТаблицы);
	
	ПоместитьВоВременноеХранилище(ОписаниеСтроки, АдресПараметровРедактированияСтроки);
	
	РедактируемыеКолонкиСписка = СтрСоединить(КолонкиПоИзмерениям.Измерения, ",");
	
КонецПроцедуры

&НаСервере
Процедура ОтразитьИзмененияВДанных(ИндексСтроки, ИмяКолонки = "")
	
	ПараметрыРедактирования = ПолучитьИзВременногоХранилища(АдресПараметровРедактированияСтроки);
	РедактируемаяСтрока = СписокРедактированияБюджета.НайтиПоИдентификатору(ИндексСтроки);
	
	Если ИмяКолонки = "" Тогда
		
		Для Каждого КлючИЗначение из ПараметрыРедактирования.СтруктураАналогРасшифровки Цикл
			
			ИмяКолонки = КлючИЗначение.Ключ;
			Расшифровка = РасшифровкаОтчетаПоСтроке(КлючИЗначение.Значение, РедактируемаяСтрока, ПараметрыРедактирования.ИзменяемыеИзмерения);
			Если Расшифровка.Свойство("Расчетная") Тогда
				Продолжить;
			КонецЕсли;
			
			ОтразитьИзменениеЯчейки(Расшифровка, РедактируемаяСтрока[ИмяКолонки], РедактируемаяСтрока[ИмяКолонки + "Примечание"]);
			
		КонецЦикла;
		
	Иначе
		
		Если Не ПараметрыРедактирования.СтруктураАналогРасшифровки.Свойство(ИмяКолонки) Тогда
			Возврат;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(РедактируемаяСтрока[ИмяКолонки + "Примечание"]) Тогда
			РедактируемаяСтрока[ИмяКолонки + "КартинкаПримечание"] = БиблиотекаКартинок.Комментарий;
		Иначе
			РедактируемаяСтрока[ИмяКолонки + "КартинкаПримечание"] = Неопределено;
		КонецЕсли;
		
		ЗначенияКолонок = ПараметрыРедактирования.СтруктураАналогРасшифровки[ИмяКолонки];
		Расшифровка = РасшифровкаОтчетаПоСтроке(ЗначенияКолонок, РедактируемаяСтрока, ПараметрыРедактирования.ИзменяемыеИзмерения);
		РезультатОтражения = ОтразитьИзменениеЯчейки(Расшифровка, РедактируемаяСтрока[ИмяКолонки], РедактируемаяСтрока[ИмяКолонки + "Примечание"]);
		
		Если АвтоматическоеОбновлениеБюджета Тогда
			
			ТекущаяСтрока = Элементы.ДеревоЭлементовБюджета.ТекущаяСтрока;
			СтрокаДерева = ДеревоЭлементовБюджета.НайтиПоИдентификатору(ТекущаяСтрока);
			Если ЗначениеЗаполнено(СтрокаДерева.Строка) Тогда
				Расшифровка.Вставить("Строка", СтрокаДерева.Строка);
			КонецЕсли;
			
			Расшифровка.Удалить("ИмяПоказателя");
			
			Если ОбновитьПередРасчетомСвязанных = Истина Тогда
				// При добавлении новой строки автоматически 
				// не заполняются НФП и ПроизводныеПоказатели
				// т.к. данных в табличной части еще нет
				// принудительно обновим данные для использования в расчетах
				ОтразитьИзмененияБюджета("ОбновитьДанныеЯчеек");
				ОбновитьПередРасчетомСвязанных = Ложь;
			КонецЕсли;
			
			ПараметрыОтчета = ДополнитьПараметрамиПериодами();
			ИзмененияЭкземпляраБюджета = БюджетнаяОтчетностьСервер.РассчитатьСвязанныеСтатьиБюджетов(ПараметрыВыводаВидаБюджета, АдресДанныхЯчеек, 
																			ПараметрыОтчета, Расшифровка, РезультатОтражения, Неопределено);
			ЗагрузитьРезультатРасчетаИзменений(, ИзмененияЭкземпляраБюджета); // отражение расчета "пересчитываемых"
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если АвтоматическоеОбновлениеБюджета Тогда
		
		ОтразитьИзмененияБюджета("ОбновитьДанныеЯчеек");
		ЗагрузитьДанныеСписка(ПараметрыРедактирования.КолонкиПоИзмерениям, 
								ПараметрыРедактирования.ФиксированныеЗначения, 
								ПараметрыРедактирования.СтруктураАналогРасшифровки, 
								Истина);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьДанныеИзменыемыхКолонок(ТекущаяСтрока)
	
	РедактируемаяСтрока = СписокРедактированияБюджета.НайтиПоИдентификатору(ТекущаяСтрока);
	
	ТребуетсяОчисткаЗначений = Ложь;
	ПараметрыРедактирования = ПолучитьИзВременногоХранилища(АдресПараметровРедактированияСтроки);
	РасшифровкаПриНачалеРедактирования = ПолучитьИзВременногоХранилища(АдресРедактируемыхЗначенийСтрокиСписка);
	Для Каждого Измерение из ПараметрыРедактирования.ИзменяемыеИзмерения Цикл
		Если РедактируемаяСтрока[Измерение] <> РасшифровкаПриНачалеРедактирования[Измерение] Тогда
			ТребуетсяОчисткаЗначений = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ТребуетсяОчисткаЗначений Тогда
		УдалитьСвязанныеСтрокиБюджетаНаСервере(ТекущаяСтрока, РасшифровкаПриНачалеРедактирования);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ИзмеренияРедактированияСовпадают(ОписаниеСтроки, Измерения, ИДТаблицы)
	
	Если ОписаниеСтроки = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СписокИзмеренийСтарый = СтрСоединить(ОписаниеСтроки.ИзменяемыеИзмерения);
	СписокИзмеренийНовый = СтрСоединить(Измерения);
	
	Если СписокИзмеренийСтарый <> СписокИзмеренийНовый Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если ОписаниеСтроки.ИДТаблицы <> ИДТаблицы Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ВыборУвеличенияСтроки(Результат, ДополнительныеПараметры) Экспорт
	
	ОткрытДиалогВопросаДубли = Ложь;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		ПринудительноеЗавершение = Истина;
		ИзмененияВСпискеОтраженыВДокументе = Истина;
		Элементы.СписокРедактированияБюджета.ЗакончитьРедактированиеСтроки(Ложь);
		
		УвеличитьЗначениеСтрокиНаСервере(ДополнительныеПараметры.Идентификатор);
		
		СтрокаТаблицы = СписокРедактированияБюджета.НайтиПоИдентификатору(ДополнительныеПараметры.Идентификатор);
		Если СтрокаТаблицы <> Неопределено Тогда
			СписокРедактированияБюджета.Удалить(СписокРедактированияБюджета.Индекс(СтрокаТаблицы));
		КонецЕсли;
		
		Элементы.СписокРедактированияБюджета.Обновить();
		
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		
		ПринудительноеЗавершение = Истина;
		Элементы.СписокРедактированияБюджета.ЗакончитьРедактированиеСтроки(Истина);
		СтрокаТаблицы = СписокРедактированияБюджета.НайтиПоИдентификатору(ДополнительныеПараметры.Идентификатор);
		Если СтрокаТаблицы <> Неопределено Тогда
			СписокРедактированияБюджета.Удалить(СписокРедактированияБюджета.Индекс(СтрокаТаблицы));
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОтразитьИзменениеЯчейки(Расшифровка, ТекстЗначения, Примечание = Неопределено)
	Перем ИмяПоказателя, РасшифровкаАналитика;
	
	Если ТипЗнч(ТекстЗначения) = Тип("Число") Тогда
		Значение = ТекстЗначения;
	Иначе
		Попытка
			ЗначениеСтрокой = СтрЗаменить(ТекстЗначения, Символы.НПП, "");
			ЗначениеСтрокой = СтрЗаменить(ТекстЗначения, " ", "");
			Значение = Число(ЗначениеСтрокой);
		Исключение
			Значение = 0;
		КонецПопытки;
	КонецЕсли;
	
	СтрокаОборот = НайтиСтрокуОборотаПоРасшифровке(Расшифровка, ИмяПоказателя, РасшифровкаАналитика);
	ПериодПланирования = РасшифровкаАналитика.ПериодПланирования;
	
	Если Примечание <> Неопределено Тогда
		СтрокаОборот.Примечание = Примечание;
	КонецЕсли;
	
	Если ИмяПоказателя = "Сумма" Тогда
		
		Валюта = Неопределено; ВалютаВывода = Неопределено;
		
		Если РасшифровкаАналитика.Свойство("ВалютаВывода", ВалютаВывода)
			И НЕ РасшифровкаАналитика.Свойство("Валюта", Валюта) Тогда
			
			СтрокаОборот.Сумма = Значение;
			СтрокаОборот.СуммаВВалюте = ПересчитатьПоТаблицеКурсов(Значение, ПериодПланирования, ВалютаСценария, ВалютаВывода);
			
		ИначеЕсли РасшифровкаАналитика.Свойство("Валюта", Валюта) И Валюта <> ВалютаСценария Тогда
			
			СтрокаОборот.Сумма = ПересчитатьПоТаблицеКурсов(Значение, ПериодПланирования, Валюта, ВалютаСценария);
			СтрокаОборот.СуммаВВалюте = Значение;
			
		Иначе
			
			СтрокаОборот.Сумма = Значение;
			СтрокаОборот.СуммаВВалюте = Значение;
			
		КонецЕсли;
		
	Иначе
		
		СтрокаОборот.Количество = Значение;
		
	КонецЕсли;
	
	Результат = Новый Структура("Сумма, СуммаВВалюте, Количество", 
								СтрокаОборот.Сумма, СтрокаОборот.СуммаВВалюте, СтрокаОборот.Количество);
	
	Если СтрокаОборот.Сумма = 0 И 
		СтрокаОборот.СуммаВВалюте = 0 И 
		СтрокаОборот.Количество = 0 И
		ПустаяСтрока(СтрокаОборот.Примечание) Тогда
		
		Объект.ОборотыПоСтатьямБюджетов.Удалить(СтрокаОборот);
		ИдентификаторСтроки = ИдентификаторАналитикиСтатейБюджетов(РасшифровкаАналитика);
	
		Отбор = Новый Структура();
		Отбор.Вставить("ИдентификаторСтроки", ИдентификаторСтроки);
		РезультатПоиска = Объект.ОборотыПоСтатьямБюджетов.НайтиСтроки(Отбор);
		Если Не РезультатПоиска.Количество() Тогда
			НайденнаяСтрока = Объект.АналитикаСтатейБюджетов.НайтиСтроки(Новый Структура("ИдентификаторСтроки", ИдентификаторСтроки))[0];
			Объект.АналитикаСтатейБюджетов.Удалить(НайденнаяСтрока);
		КонецЕсли;
	
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УвеличитьЗначениеСтрокиНаСервере(ИндексСтроки)
	
	ПараметрыРедактирования = ПолучитьИзВременногоХранилища(АдресПараметровРедактированияСтроки);
	РедактируемаяСтрока = СписокРедактированияБюджета.НайтиПоИдентификатору(ИндексСтроки);
	ДанныеЯчеек = ПолучитьИзВременногоХранилища(АдресДанныхЯчеек);
	
	СтруктураПоиска = Новый Структура(РедактируемыеКолонкиСписка);
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, РедактируемаяСтрока);
	
	НайденныеСтроки = СписокРедактированияБюджета.НайтиСтроки(СтруктураПоиска);
	Для Каждого НайденнаяСтрока из НайденныеСтроки Цикл
		
		Если НайденнаяСтрока = РедактируемаяСтрока Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого КлючИЗначение из ПараметрыРедактирования.СтруктураАналогРасшифровки Цикл
			
			Если КлючИЗначение.Значение.Свойство("Расчетная") Тогда
				Продолжить;
			КонецЕсли;
			
			НайденнаяСтрока[КлючИЗначение.Ключ] = НайденнаяСтрока[КлючИЗначение.Ключ] + РедактируемаяСтрока[КлючИЗначение.Ключ];
			Расшифровка = РасшифровкаОтчетаПоСтроке(КлючИЗначение.Значение, НайденнаяСтрока, ПараметрыРедактирования.ИзменяемыеИзмерения);
			ОтразитьИзменениеЯчейки(Расшифровка, НайденнаяСтрока[КлючИЗначение.Ключ]);
			
		КонецЦикла;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьСвязанныеСтрокиБюджетаНаСервере(ИндексСтроки, РасшифровкаСтроки = Неопределено)
	
	ПараметрыРедактирования = ПолучитьИзВременногоХранилища(АдресПараметровРедактированияСтроки);
	РедактируемаяСтрока = СписокРедактированияБюджета.НайтиПоИдентификатору(ИндексСтроки);
	
	Для Каждого КлючИЗначение из ПараметрыРедактирования.СтруктураАналогРасшифровки Цикл
	
		Если КлючИЗначение.Значение.Свойство("Расчетная") Тогда
			Продолжить;
		КонецЕсли;
		
		Расшифровка = РасшифровкаОтчетаПоСтроке(КлючИЗначение.Значение, РедактируемаяСтрока, ПараметрыРедактирования.ИзменяемыеИзмерения);
		Если РасшифровкаСтроки <> Неопределено Тогда
			Для Каждого КлючИЗначение из РасшифровкаСтроки Цикл
				Расшифровка.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
			КонецЦикла;
		КонецЕсли;
		
		Если Расшифровка.Свойство("СтатьяБюджетов") и ЗначениеЗаполнено(Расшифровка.СтатьяБюджетов) Тогда
			ОтразитьИзменениеЯчейки(Расшифровка, 0, "");
		КонецЕсли;
		
	КонецЦикла;
	
	ОтразитьИзмененияБюджета("ОбновитьДанныеЯчеек");
	
КонецПроцедуры

&НаСервере
Функция ПослеВводаЗначенияБудетДубль(ТекущаяСтрока)
	
	Если РедактируемыеКолонкиСписка = ""
		И СписокРедактированияБюджета.Количество() > 1 Тогда
		Возврат Истина;
	КонецЕсли;
	
	РедактируемаяСтрока = СписокРедактированияБюджета.НайтиПоИдентификатору(ТекущаяСтрока);
	
	Если РедактируемаяСтрока = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура(РедактируемыеКолонкиСписка);
	
	ЗаполнитьЗначенияСвойств(СтруктураПоиска, РедактируемаяСтрока);
	
	СтрокиПроверки = СписокРедактированияБюджета.НайтиСтроки(СтруктураПоиска);
	
	Если СтрокиПроверки.Количество() > 1 Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ЕстьНедоступныеЗначенияВЯчейках(ТекущаяСтрока)
	
	СтруктураЯчеек = ПолучитьИзВременногоХранилища(ПараметрыВыводаВидаБюджета).СтруктураОписанияОтчета.СтруктураЯчеек;
	ТекущиеДанные = СписокРедактированияБюджета.НайтиПоИдентификатору(ТекущаяСтрока);
	Измерения = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(РедактируемыеКолонкиСписка);
	
	ТаблицаПоиска = СтруктураЯчеек;
	Для Каждого Измерение из Измерения Цикл
		Если БюджетнаяОтчетностьКлиентСервер.ЛеваяЧастьИмениСовпадает(Измерение, "Период") Тогда
			Продолжить;
		КонецЕсли;
		Значение = ТекущиеДанные[Измерение];
		Если Не ЗначениеЗаполнено(Значение) Тогда
			Значение = Неопределено;
		КонецЕсли;
		СтруктураПоиска = Новый Структура(Измерение, Значение);
		ВременнаяТаблицаПоиска = ТаблицаПоиска.Скопировать(СтруктураПоиска);
		Если Не ВременнаяТаблицаПоиска.Количество() Тогда
			СтруктураПоиска = Новый Структура("Флаг" + Измерение, "документ");
			ВременнаяТаблицаПоиска = ТаблицаПоиска.Скопировать(СтруктураПоиска);
			Если Не ВременнаяТаблицаПоиска.Количество() Тогда
				Возврат Измерение;
			КонецЕсли;
		КонецЕсли;
		ТаблицаПоиска = ВременнаяТаблицаПоиска;
	КонецЦикла;
	
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Функция ЕстьНедоступныеДляВводаЭлемента(ТекущаяСтрока, КолонкаСОшибкой = Неопределено)
	
	МассивКолонок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(РедактируемыеКолонкиСписка);
	РедактируемаяСтрока = СписокРедактированияБюджета.НайтиПоИдентификатору(ТекущаяСтрока);
	
	Для Каждого Колонка из МассивКолонок Цикл 
		Если Элементы[Колонка].СписокВыбора.Количество() Тогда
			ЗначениеПоиска = РедактируемаяСтрока[Колонка];
			Если Не ЗначениеЗаполнено(ЗначениеПоиска) Тогда
				ЗначениеПоиска = Неопределено;
			КонецЕсли;
			Если Элементы[Колонка].СписокВыбора.НайтиПоЗначению(ЗначениеПоиска) = Неопределено Тогда
				КолонкаСОшибкой = Колонка;
				Возврат Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	РезультатПроверки = ЕстьНедоступныеЗначенияВЯчейках(ТекущаяСтрока);
	Если РезультатПроверки <> Неопределено Тогда
		КолонкаСОшибкой = РезультатПроверки;
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ЕстьОшибкиВСтрокеРедактированияБюджета(ТекущаяСтрока, РезультатПроверки)
	Перем КолонкаСОшибкой, ДопустимаяВалюта;
	
	Если ОтличаетсяВалютаАналитики(ТекущаяСтрока, ДопустимаяВалюта) Тогда
		РезультатПроверки = Новый Структура("Результат, ДопустимаяВалюта", "Отличается валюта аналитики", ДопустимаяВалюта);
		Возврат Истина;
	ИначеЕсли ПослеВводаЗначенияБудетДубль(ТекущаяСтрока) Тогда
		РезультатПроверки = Новый Структура("Результат", "После ввода значения будет дубль");
		Возврат Истина;
	ИначеЕсли ЕстьНедоступныеДляВводаЭлемента(ТекущаяСтрока, КолонкаСОшибкой) Тогда
		РезультатПроверки = Новый Структура("Результат, КолонкаСОшибкой", "Есть недоступные для ввода элемента", КолонкаСОшибкой);
		Возврат Истина;
	Иначе
		РезультатПроверки = Новый Структура("Результат", "ОК");
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Функция ВалютаВводаАналитики(Расшифровка, КэшРеквизитовСтатей)
	
	ОбъектВалютногоУчета = Неопределено;
	Если Не Расшифровка.Свойство("СтатьяБюджетов", ОбъектВалютногоУчета) 
			ИЛИ Не ЗначениеЗаполнено(ОбъектВалютногоУчета) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	РеквизитыВалютногоУчета = КэшРеквизитовСтатей[ОбъектВалютногоУчета];
	Если РеквизитыВалютногоУчета = Неопределено Тогда
		
		Реквизиты = Новый Структура("АналитикаЗаполнениеВалюты, УчитыватьПоВалюте, 
								|АналитикаВалюты, ВалютаОпределяетсяАналитикой", "АналитикаВалюты.ЗаполнениеВалюты");
		
		РеквизитыВалютногоУчета = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ОбъектВалютногоУчета, Реквизиты);
		
		КэшРеквизитовСтатей.Вставить(ОбъектВалютногоУчета, РеквизитыВалютногоУчета);
		
	КонецЕсли;
	
	Если Не РеквизитыВалютногоУчета.УчитыватьПоВалюте Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если Не РеквизитыВалютногоУчета.ВалютаОпределяетсяАналитикой Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ИмяПоля = БюджетнаяОтчетностьСервер.ИмяПоляБюджетногоОтчета(РеквизитыВалютногоУчета.АналитикаВалюты);
	ЗначениеРасшифровки = Неопределено;
	
	Если Расшифровка.Свойство(ИмяПоля, ЗначениеРасшифровки) Тогда
		Если ЗначениеЗаполнено(ЗначениеРасшифровки) Тогда
			ЗначениеПоля = КэшРеквизитовСтатей[ЗначениеРасшифровки];
			Если ЗначениеПоля = Неопределено Тогда
				ЗначениеПоля = ЗначениеРасшифровки[РеквизитыВалютногоУчета.АналитикаЗаполнениеВалюты];
				КэшРеквизитовСтатей.Вставить(ЗначениеРасшифровки, ЗначениеПоля);
			КонецЕсли;
			Возврат ЗначениеПоля;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено
	
КонецФункции

&НаСервере
Функция ОтличаетсяВалютаАналитики(ТекущаяСтрока, ДопустимаяВалюта)
	
	МассивКолонок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(РедактируемыеКолонкиСписка);
	РедактируемаяСтрока = СписокРедактированияБюджета.НайтиПоИдентификатору(ТекущаяСтрока);
	ПараметрыРедактирования = ПолучитьИзВременногоХранилища(АдресПараметровРедактированияСтроки);
	
	КэшРеквизитовСтатей = Новый Соответствие;
	Для Каждого КлючИЗначение из ПараметрыРедактирования.СтруктураАналогРасшифровки Цикл 
		
		Если РедактируемаяСтрока[КлючИЗначение.Ключ] Тогда
			
			РасшифровкаКолонки = КлючИЗначение.Значение;
			Расшифровка = РасшифровкаОтчетаПоСтроке(РасшифровкаКолонки, РедактируемаяСтрока, ПараметрыРедактирования.ИзменяемыеИзмерения);
			Валюта = Неопределено;
			Если Расшифровка.Свойство("Валюта", Валюта) Тогда
				ВалютаАналитики = ВалютаВводаАналитики(Расшифровка, КэшРеквизитовСтатей);
				Если ВалютаАналитики <> Неопределено Тогда
					Если ВалютаАналитики <> Валюта Тогда
						ДопустимаяВалюта = ВалютаАналитики;
						Возврат Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

#КонецОбласти


#Область ПереключениеРежимаТаблицаСписок

&НаСервереБезКонтекста
Функция ОбластьБюджетаПоСтроке(Бюджет, ИскомаяСтрока)
	Перем ИДГруппировки;
	
	Для Сч = 1 По Бюджет.ВысотаСтраницы Цикл
		ОбластьБюджета = Бюджет.Область(Сч, 1);
		Расшифровка = ОбластьБюджета.Расшифровка;
		Если ТипЗнч(Расшифровка) = Тип("Структура") 
			И Расшифровка.Свойство("ИДГруппировки", ИДГруппировки)
			И ИДГруппировки = ИскомаяСтрока Тогда
			
			Возврат ОбластьБюджета.Верх;
			
		КонецЕсли;
	КонецЦикла;
	
	Возврат Неопределено
	
КонецФункции

&НаСервере
Процедура УстановитьСтраницу()
	
	Если Элементы.ПанельБюджет.ТекущаяСтраница = Элементы.Список Тогда
		Элементы.ПанельБюджет.ТекущаяСтраница = Элементы.Таблица;
		Элементы.РедактироватьСписком.Картинка = БиблиотекаКартинок.Вперед;
		Элементы.РедактироватьСписком.Заголовок = НСтр("en='Edit as a list';ru='Редактировать списком'");
		Элементы.Добавить.Видимость = Ложь;
		Элементы.Скопировать.Видимость = Ложь;
		Элементы.Изменить.Видимость = Ложь;
		Элементы.Удалить.Видимость = Ложь;
		Элементы.Копировать.Видимость = Истина;
		Элементы.Вставить.Видимость = Истина;
		СформироватьОтчетСервер(Истина, Ложь);
	Иначе
		Элементы.РедактироватьСписком.Заголовок = НСтр("en='Табличный ввод';ru='Табличный ввод'");
		Элементы.ПанельБюджет.ТекущаяСтраница = Элементы.Список;
		Элементы.РедактироватьСписком.Картинка = БиблиотекаКартинок.Назад;
		Элементы.Добавить.Видимость = Истина;
		Элементы.Скопировать.Видимость = Истина;
		Элементы.Изменить.Видимость = Истина;
		Элементы.Удалить.Видимость = Истина;
		Элементы.Копировать.Видимость = Ложь;
		Элементы.Вставить.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПараметрыСпискаВвода()
	
	Если Элементы.ДеревоЭлементовБюджета.ТекущаяСтрока <> ПредыдущаяСтрокаДереваЭлементов Тогда
		УстановитьПараметрыСпискаВводаНаСервере();
		ПредыдущаяСтрокаДереваЭлементов = Элементы.ДеревоЭлементовБюджета.ТекущаяСтрока;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПримечание(Команда)
	
	АктивнаяОбласть = Элементы.Бюджет.ТекущаяОбласть;
	Примечание = Неопределено;
	Для Колонка = АктивнаяОбласть.Лево по АктивнаяОбласть.Право Цикл
		Для Строка = АктивнаяОбласть.Верх По АктивнаяОбласть.Низ Цикл
			Если Примечание = Неопределено Тогда
				Примечание = Бюджет.Область(Строка, Колонка).Примечание.Текст;
			Иначе
				НовоеПримечание = Бюджет.Область(Строка, Колонка).Примечание.Текст;
				Если НовоеПримечание <> Примечание Тогда
					Примечание = "";
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Оповещение = Новый ОписаниеОповещения("ПримечаниеЗавершениеВвода", ЭтотОбъект);
	ПоказатьВводСтроки(Оповещение, Примечание, НСтр("en='Note';ru='Примечание'"), 500, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьПримечание(Команда)
	
	УдалитьПримечаниеНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПримечаниеЗавершениеВвода(Знач ВведенныйТекст, Знач ДополнительныеПараметры) Экспорт
	
	Если ВведенныйТекст = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПримечаниеЗавершениеВводаНаСервере(ВведенныйТекст);
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПримечаниеЗавершениеВводаНаСервере(ВведенныйТекст)
	
	АктивнаяОбласть = Элементы.Бюджет.ТекущаяОбласть;
	Для Колонка = АктивнаяОбласть.Лево по АктивнаяОбласть.Право Цикл
		Для Строка = АктивнаяОбласть.Верх По АктивнаяОбласть.Низ Цикл
			Область = Бюджет.Область(Строка, Колонка);
			Если Область.СодержитЗначение Тогда
				ОтразитьИзменениеЯчейки(Область.Расшифровка, Область.Текст, ВведенныйТекст);
				Область.Примечание.Текст = ВведенныйТекст;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ОтразитьИзмененияБюджета("ОбновитьДанныеЯчеек");
	
КонецПроцедуры

&НаСервере
Процедура УдалитьПримечаниеНаСервере()
	
	ПримечаниеЗавершениеВводаНаСервере("");
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция СтруктураОбъектаДляРасчетаЯчейки()
	
	Возврат Новый Структура("Объект, ВалютаСценария, КэшПараметровСтатей, 
							|ТребоватьУказанияКурсовДляКаждогоПериода, 
							|АдресТаблицыКурсов, ПараметрыВыводаВидаБюджета, АдресДанныхРасшифровки");
	
КонецФункции

&НаСервере
Функция СтруктураПоОбъектуЭкземпляраБюджета(Форма)
	
	КэшПараметровСтатей = ПолучитьИзВременногоХранилища(АдресКэшаПараметровСтатей);
	АдресДанныхРасшифровки = Неопределено;
	
	ОбъектИПараметрыРасчета = СтруктураОбъектаДляРасчетаЯчейки();
	ОбъектИПараметрыРасчета.Объект 									= Форма.Объект;
	ОбъектИПараметрыРасчета.ВалютаСценария 							= Форма.ВалютаСценария;
	ОбъектИПараметрыРасчета.КэшПараметровСтатей 					= КэшПараметровСтатей;
	ОбъектИПараметрыРасчета.ТребоватьУказанияКурсовДляКаждогоПериода = Форма.ТребоватьУказанияКурсовДляКаждогоПериода;
	ОбъектИПараметрыРасчета.АдресТаблицыКурсов 						= Форма.АдресТаблицыКурсов;
	ОбъектИПараметрыРасчета.ПараметрыВыводаВидаБюджета				= Форма.ПараметрыВыводаВидаБюджета;
	ОбъектИПараметрыРасчета.АдресДанныхРасшифровки					= АдресДанныхРасшифровки;
	
	Возврат ОбъектИПараметрыРасчета;
	
КонецФункции


#КонецОбласти


#КонецОбласти

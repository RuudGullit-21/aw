
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Расчитывает итоговые показатели (по кнопке "Рассчитать" внизу формы документа)
//
Процедура РассчитатьИтоговыеПоказатели() Экспорт
	
	мВесБрутто  = 0; 
	мОбъем      = 0; 
	мКолМест    = 0;
	мСтоимость  = 0;
	
	Для Каждого ТекСтрока Из Грузы Цикл
		КурсКратностьВалютыТоваров = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ТекСтрока.Валюта, Дата);
		СтоимостьЗаказаВВалютеДокумента = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СтоимостьГруза, 
			ТекСтрока.Валюта, ВалютаДокумента,
			КурсКратностьВалютыТоваров.Курс, КурсВзаиморасчетов,
			КурсКратностьВалютыТоваров.Кратность, КратностьВзаиморасчетов);
			мСтоимость = мСтоимость + СтоимостьЗаказаВВалютеДокумента;
			
		мВесБрутто = мВесБрутто + ТекСтрока.ВесБрутто;
		мОбъем     = мОбъем     + ТекСтрока.Объем;
		мКолМест   = мКолМест   + ТекСтрока.КоличествоМест;
	КонецЦикла;
	
	ВесБрутто      = мВесБрутто;
	Объем          = мОбъем; 
	КоличествоМест = мКолМест;
	СтоимостьГруза = мСтоимость;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если Не Отказ
		И Не ПометкаУдаления 
		И РежимЗаписи <> РежимЗаписиДокумента.ОтменаПроведения Тогда
		Права_ = Неопределено;
		флПересчетИтогов = Истина;
		Если флПересчетИтогов Тогда
			РассчитатьИтоговыеПоказатели();
		КонецЕсли;
		Если (Ссылка.Пустая() ИЛИ флПересчетИтогов)
			И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			АвтоматическийПересчетРасходов();
		КонецЕсли;
	КонецЕсли;
	
	// Уведомления
	Если Не Отказ 
		И Не ПометкаУдаления 
		И ПолучитьФункциональнуюОпцию("уатИспользоватьУведомления_уэ") Тогда
		// Заполнение ТЧ "Получатели уведомлений"
		Если Модифицированность() Тогда
			тблПолучатели = уатОбщегоНазначения_уэ.СформироватьСписокПолучателейУведомлений(ЭтотОбъект);
			ПолучателиУведомлений.Загрузить(тблПолучатели);
		КонецЕсли;
		
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			
			// Отслеживаем событие "Изменение перевозчика"
			флИзменениеПеревозчика = Ссылка.Пустая() Или Ссылка.Контрагент <> Контрагент;
			ДополнительныеСвойства.Вставить("флИзменениеПеревозчика", флИзменениеПеревозчика);
						
			// Отслеживаем событие "Изменение статуса"
			флИзменениеСтатуса = Ссылка.Пустая() Или Ссылка.Статус <> Статус;
			ДополнительныеСвойства.Вставить("флИзменениеСтатуса", флИзменениеСтатуса);
			
		КонецЕсли;
	КонецЕсли;
	
	уатПроведение_проф.ПолучитьСтарыеЗаказыПередЗаписью(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, Режим)
	
	// Инициализация дополнительных свойств для проведения документа.
	уатПроведение.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	Документы.уатСтраховойСертификат_уэ.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	уатПроведение.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	уатПроведение.ОтразитьПредоставленныеУслуги(ДополнительныеСвойства, Движения, Отказ);
	уатПроведение.ОтразитьРасходы(ДополнительныеСвойства, Движения, Отказ);
	
	уатПроведение.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	уатПроведение_проф.ОбновитьТекущееСостояниеОплатыЗаказов(ЭтотОбъект);
	
	Документы.уатСтраховойСертификат_уэ.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	// Инициализация дополнительных свойств для проведения документа
	уатПроведение.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	уатПроведение.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	уатПроведение.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	уатПроведение_проф.ОбновитьТекущееСостояниеОплатыЗаказов(ЭтотОбъект);
	
	// Контроль
	Документы.уатСтраховойСертификат_уэ.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ, Истина);
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка) 
	
	уатОбщегоНазначенияСервер.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
	Основание = ДанныеЗаполнения;
	
	Если ТипЗнч(Основание) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") Тогда
		СтандартнаяОбработка = Ложь;
		
		ДокументОснование = Основание.Ссылка;
		ВалютаДокумента   = Основание.ВалютаДокумента;
		Комментарий       = Основание.Комментарий;
		СтатусВыполнения  = Справочники.уатСтатусы_уэ.Новый;
		
		КратностьВзаиморасчетов = Основание.КратностьВзаиморасчетов;
		КурсВзаиморасчетов      = Основание.КурсВзаиморасчетов;
		Организация             = Основание.Организация;
		Ответственный           = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
						  ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнойОтветственный");
		СуммаВключаетНДС        = Основание.СуммаВключаетНДС;
		УчитыватьНДС            = Основание.УчитыватьНДС;
		ВидПеревозки            = Основание.ВидПеревозки;
		
		ЗаполнитьГрузыПоЗаказуНаТС(Основание);
		
		РассчитатьИтоговыеПоказатели();
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.уатМаршрутныйЛист") Тогда
		СтандартнаяОбработка = Ложь;
	
		ДокументОснование = Основание.Ссылка;
		Организация       = Основание.Организация;
		Ответственный     = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
						  ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнойОтветственный");
		
		Комментарий       = Основание.Комментарий;
		СтатусВыполнения  = Справочники.уатСтатусы_уэ.Новый;
		
		ОснЗаказ = Неопределено;
		Для Каждого ТекСтрокаЗаказ Из ДокументОснование.Заказы Цикл
			Если ТекСтрокаЗаказ.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка
				И ЗначениеЗаполнено(ТекСтрокаЗаказ.ЗаказГрузоотправителя) Тогда
				ЗаказГрузоотправителя = ТекСтрокаЗаказ.ЗаказГрузоотправителя;
				Если ОснЗаказ = Неопределено Тогда
					ОснЗаказ = ТекСтрокаЗаказ.ЗаказГрузоотправителя;
					ВалютаДокумента         = ОснЗаказ.ВалютаДокумента;
					КратностьВзаиморасчетов = ОснЗаказ.КратностьВзаиморасчетов;
					КурсВзаиморасчетов      = ОснЗаказ.КурсВзаиморасчетов;
					СуммаВключаетНДС        = ОснЗаказ.СуммаВключаетНДС;
					УчитыватьНДС            = ОснЗаказ.УчитыватьНДС;
				КонецЕсли;
				СтрокаГруз = Грузы.Добавить();
				СтрокаГруз.ЗаказНаТС        = ЗаказГрузоотправителя.Ссылка;
				СтрокаГруз.Номенклатура     = ТекСтрокаЗаказ.Номенклатура;
				СтрокаГруз.КоличествоМест   = ТекСтрокаЗаказ.КоличествоМест;
				СтрокаГруз.ВесБрутто        = ТекСтрокаЗаказ.ВесБрутто;
				СтрокаГруз.Объем            = ТекСтрокаЗаказ.Объем;
				СтрокаГруз.Валюта           = ЗаказГрузоотправителя.ВалютаТоваров;
				СтрокаГруз.Количество       = ТекСтрокаЗаказ.Количество;
				СтрокаГруз.ЕдиницаИзмерения = ТекСтрокаЗаказ.ЕдиницаИзмерения;
				
				Если ЗаказГрузоотправителя.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам Тогда
					СтрокиГруза = ЗаказГрузоотправителя.ГрузовойСостав.НайтиСтроки(Новый Структура("ГрузовоеМесто", СтрокаГруз.Номенклатура));
					Если СтрокиГруза.Количество() <> 0 Тогда
						СтрокаГруз.СтоимостьГруза   = СтрокиГруза[0].Стоимость;
						СтрокаГруз.ОписаниеГруза    = СтрокиГруза[0].ОписаниеГруза;
					КонецЕсли;
					
				ИначеЕсли ЗаказГрузоотправителя.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам Тогда
					СтрокиГруза = ЗаказГрузоотправителя.Товары.НайтиСтроки(Новый Структура("Номенклатура", СтрокаГруз.Номенклатура));
					Если СтрокиГруза.Количество() <> 0 Тогда
						СтрокаГруз.СтоимостьГруза   = СтрокиГруза[0].Сумма + ?(СуммаВключаетНДС, 0, СтрокиГруза[0].СуммаНДС);
						СтрокаГруз.ОписаниеГруза    = ЗаказГрузоотправителя.НазваниеГруза;
					КонецЕсли;
					
				Иначе 
					СтрокаГруз.СтоимостьГруза   = ЗаказГрузоотправителя.СтоимостьГруза;
					СтрокаГруз.ОписаниеГруза    = ЗаказГрузоотправителя.НазваниеГруза;
					СтрокаГруз.Количество       = 1;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		РассчитатьИтоговыеПоказатели();
		
	ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.уатЗаказПеревозчику_уэ") Тогда
		СтандартнаяОбработка = Ложь;
	
		ДокументОснование = Основание.Ссылка;
		Организация       = Основание.Организация;
		Ответственный     = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
						  ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнойОтветственный");
		
		Комментарий       = Основание.Комментарий;
		СтатусВыполнения  = Справочники.уатСтатусы_уэ.Новый;
		
		ОснЗаказ = Неопределено;
		Для Каждого ТекСтрокаЗаказ Из ДокументОснование.Грузы Цикл
			Если ЗначениеЗаполнено(ТекСтрокаЗаказ.Заказ) Тогда
				ЗаказГрузоотправителя = ТекСтрокаЗаказ.Заказ;
				Если ОснЗаказ = Неопределено Тогда
					ОснЗаказ = ТекСтрокаЗаказ.Заказ;
					ВалютаДокумента         = ОснЗаказ.ВалютаДокумента;
					КратностьВзаиморасчетов = ОснЗаказ.КратностьВзаиморасчетов;
					КурсВзаиморасчетов      = ОснЗаказ.КурсВзаиморасчетов;
					СуммаВключаетНДС        = ОснЗаказ.СуммаВключаетНДС;
					УчитыватьНДС            = ОснЗаказ.УчитыватьНДС;
				КонецЕсли;
				СтрокаГруз = Грузы.Добавить();
				СтрокаГруз.ЗаказНаТС        = ЗаказГрузоотправителя.Ссылка;
				СтрокаГруз.Номенклатура     = ТекСтрокаЗаказ.ГрузовоеМесто;
				СтрокаГруз.ЕдиницаИзмерения = ТекСтрокаЗаказ.ЕдиницаИзмерения;
				СтрокаГруз.Количество       = ТекСтрокаЗаказ.Количество;
				
				Если ЗаказГрузоотправителя.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам Тогда
					СтрокиГруза = ЗаказГрузоотправителя.ГрузовойСостав.НайтиСтроки(Новый Структура("ГрузовоеМесто", СтрокаГруз.Номенклатура));
					Если СтрокиГруза.Количество() <> 0 Тогда
						СтрокаГруз.ОписаниеГруза    = СтрокиГруза[0].ОписаниеГруза;
						
						СтрокаГруз.ВесБрутто      = СтрокиГруза[0].ВесБрутто * ?(СтрокиГруза[0].КоличествоМест = 0, 0, (СтрокаГруз.Количество / СтрокиГруза[0].КоличествоМест));
						СтрокаГруз.Объем          = СтрокиГруза[0].Объем * ?(СтрокиГруза[0].КоличествоМест = 0, 0, (СтрокаГруз.Количество / СтрокиГруза[0].КоличествоМест));
						СтрокаГруз.КоличествоМест = ?(СтрокиГруза[0].ВидУпаковки.Коэффициент = 0, 0, СтрокаГруз.Количество / СтрокиГруза[0].ВидУпаковки.Коэффициент);
						СтрокаГруз.СтоимостьГруза = СтрокиГруза[0].Стоимость * ?(СтрокиГруза[0].КоличествоМест = 0, 0, (СтрокаГруз.Количество / СтрокиГруза[0].КоличествоМест));
						СтрокаГруз.Валюта         = ЗаказГрузоотправителя.ВалютаТоваров;
					КонецЕсли;
					
				ИначеЕсли ЗаказГрузоотправителя.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам Тогда
					СтрокиГруза = ЗаказГрузоотправителя.Товары.НайтиСтроки(Новый Структура("Номенклатура", СтрокаГруз.Номенклатура));
					Если СтрокиГруза.Количество() <> 0 Тогда
						СтрокаГруз.ОписаниеГруза    = ЗаказГрузоотправителя.НазваниеГруза;
						
						СтрокаГруз.ВесБрутто      = СтрокиГруза[0].ВесБрутто * ?(СтрокиГруза[0].Количество = 0, 0, (СтрокаГруз.Количество / СтрокиГруза[0].Количество));
						СтрокаГруз.Объем          = СтрокиГруза[0].Объем * ?(СтрокиГруза[0].Количество = 0, 0, (СтрокаГруз.Количество / СтрокиГруза[0].Количество));
						СтрокаГруз.КоличествоМест = СтрокиГруза[0].КоличествоМест * ?(СтрокиГруза[0].Количество = 0, 0, (СтрокаГруз.Количество / СтрокиГруза[0].Количество));
						СтрокаГруз.СтоимостьГруза = (СтрокиГруза[0].Сумма + ?(СуммаВключаетНДС, 0, СтрокиГруза[0].СуммаНДС)) * ?(СтрокиГруза[0].Количество = 0, 0, (СтрокаГруз.Количество / СтрокиГруза[0].Количество));
						СтрокаГруз.Валюта         = ЗаказГрузоотправителя.ВалютаТоваров;

					КонецЕсли;
					
				Иначе 
					СтрокаГруз.ВесБрутто        = ЗаказГрузоотправителя.ВесБрутто;
					СтрокаГруз.Объем            = ЗаказГрузоотправителя.Объем;
					СтрокаГруз.КоличествоМест   = ЗаказГрузоотправителя.КоличествоМест;
					СтрокаГруз.СтоимостьГруза   = ЗаказГрузоотправителя.СтоимостьГруза;
					СтрокаГруз.ОписаниеГруза    = ЗаказГрузоотправителя.НазваниеГруза;
					СтрокаГруз.Количество       = 1;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		РассчитатьИтоговыеПоказатели();
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("флИзменениеПеревозчика") И ДополнительныеСвойства.флИзменениеПеревозчика Тогда
		уатОбщегоНазначения_уэ.СформироватьУведомление(Ссылка, Перечисления.уатТипыСобытийДляУведомления_уэ.ИзменениеПеревозчика);
	КонецЕсли;
	Если ДополнительныеСвойства.Свойство("флИзменениеСтатуса") И ДополнительныеСвойства.флИзменениеСтатуса Тогда
		уатОбщегоНазначения_уэ.СформироватьУведомление(Ссылка, Перечисления.уатТипыСобытийДляУведомления_уэ.ИзменениеСтатуса);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	Заголовок = уатОбщегоНазначенияТиповые.уатПредставлениеДокументаПриПроведении(ЭтотОбъект);
	уатОбщегоНазначения.ПроверкаЗаполненияПодразделения(Организация, Подразделение, Отказ, Заголовок);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура АвтоматическийПересчетРасходов() Экспорт
	Если ДополнительныеСвойства.Свойство("НеПересчитыватьИтоги") Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Ссылка.Пустая()
		И Расходы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	флАвторасчетПриСоздании = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(
		ПользователиКлиентСервер.АвторизованныйПользователь(), "СтраховойСертификатАвторасчетРасходовПриСоздании");
	Если НЕ флАвторасчетПриСоздании И Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	флПересчетИтогов = флАвторасчетПриСоздании ИЛИ уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(
		ПользователиКлиентСервер.АвторизованныйПользователь(), "СтраховойСертификатПерерасчетИтоговПриПроведении");
	Если НЕ флПересчетИтогов Тогда
		Возврат;
	КонецЕсли;
	
	флИнтерактивно = ДополнительныеСвойства.Свойство("Интерактивно");
	флСообщение    = Ложь;
	
	СуммаРасходовСтарая = уатОбщегоНазначенияТиповые.уатПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Расходы");
	
	ДопПараметры = Новый Структура("ЗаполнятьТЧРасходы", Ложь);
	СтруктураДокумента = уатОбщегоНазначенияКлиентСервер.СтруктураДокумента(ЭтотОбъект, "уатСтраховойСертификат_уэ", ДопПараметры);
	СтруктураДокументаДопФакт = Неопределено;
	
	Если НЕ Ссылка.Пустая() Тогда
		уатРасчетыПоТарифам_уэ.РассчитатьУслугиПоСтраховомуСертификату(СтруктураДокумента);
	КонецЕсли;
	
	// перенос значений из структуры в документ-объект
	Если СтруктураДокументаДопФакт = Неопределено Тогда
		уатРасчетыПоТарифамКлиентСервер_уэ.ЗаполнитьДоходыРасходыИзСтруктуры(ЭтотОбъект, СтруктураДокумента, "Расходы", "уатСтраховойСертификат_уэ", Ложь, флСообщение);
	Иначе
		уатРасчетыПоТарифамКлиентСервер_уэ.ЗаполнитьДоходыРасходыИзСтруктуры(ЭтотОбъект, СтруктураДокумента, "Расходы", "уатСтраховойСертификат_уэ", Истина, флСообщение);
		уатРасчетыПоТарифамКлиентСервер_уэ.ЗаполнитьДоходыРасходыИзСтруктуры(ЭтотОбъект, СтруктураДокументаДопФакт, "Расходы", "уатСтраховойСертификат_уэ", Ложь, флСообщение);
	КонецЕсли;
	
	СуммаРасходовНовая = уатОбщегоНазначенияТиповые.уатПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Расходы");
	СуммаДокумента    = СуммаРасходовНовая;
	
	Если Не Ссылка.Пустая()
		И СуммаРасходовНовая <> СуммаРасходовСтарая Тогда 
		Если НЕ флИнтерактивно Тогда //неинтерактивный пересчет, например при групповом проведении документов
			ТекстНСТР = НСтр("en='Automatically recalculate tabular section ""Expenses"" in """ + ЭтотОбъект
				+ """';ru='Выполнен автоматический пересчет табличной части ""Расходы"" в документе """ + ЭтотОбъект + """'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР, ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
		
	ДополнительныеСвойства.Вставить("ПересчетИтогов", флПересчетИтогов);
	Если СуммаРасходовНовая <> СуммаРасходовСтарая Тогда
		ДополнительныеСвойства.Вставить("ВыполненАвтопересчетУслуг");
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗаполнитьГрузыПоЗаказуНаТС(ЗаказНаТС) Экспорт
	
	Если ЗаказНаТС.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам Тогда
		Для Каждого ТекГруз Из ЗаказНаТС.ГрузовойСостав Цикл
			СтрокаГруз = Грузы.Добавить();
			СтрокаГруз.ЗаказНаТС        = ЗаказНаТС.Ссылка;
			СтрокаГруз.Номенклатура     = ТекГруз.ГрузовоеМесто;
			СтрокаГруз.КоличествоМест   = ТекГруз.КоличествоМест;
			СтрокаГруз.ВесБрутто        = ТекГруз.ВесБрутто;
			СтрокаГруз.Объем            = ТекГруз.Объем;
			СтрокаГруз.СтоимостьГруза   = ТекГруз.Стоимость;
			СтрокаГруз.Валюта           = ЗаказНаТС.ВалютаТоваров;
			СтрокаГруз.Количество       = ТекГруз.КоличествоМест;
			СтрокаГруз.ЕдиницаИзмерения = ТекГруз.ВидУпаковки;
			СтрокаГруз.ОписаниеГруза    = ТекГруз.ОписаниеГруза;
		КонецЦикла;
		
	ИначеЕсли ЗаказНаТС.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам Тогда
		Для Каждого ТекГруз Из ЗаказНаТС.Товары Цикл
			СтрокаГруз = Грузы.Добавить();
			СтрокаГруз.ЗаказНаТС        = ЗаказНаТС.Ссылка;
			СтрокаГруз.Номенклатура     = ТекГруз.Номенклатура;
			СтрокаГруз.КоличествоМест   = ТекГруз.КоличествоМест;
			СтрокаГруз.ВесБрутто        = ТекГруз.ВесБрутто;
			СтрокаГруз.Объем            = ТекГруз.Объем;
			СтрокаГруз.СтоимостьГруза   = ТекГруз.Сумма + ?(СуммаВключаетНДС, 0, ТекГруз.СуммаНДС);
			СтрокаГруз.Валюта           = ЗаказНаТС.ВалютаТоваров;
			СтрокаГруз.Количество       = ТекГруз.Количество;
			СтрокаГруз.ЕдиницаИзмерения = ТекГруз.ЕдиницаИзмерения;
			СтрокаГруз.ОписаниеГруза    = ЗаказНаТС.НазваниеГруза;
		КонецЦикла;
		
	Иначе 
		СтрокаГруз = Грузы.Добавить();
		СтрокаГруз.ЗаказНаТС        = ЗаказНаТС.Ссылка;
		СтрокаГруз.КоличествоМест   = ЗаказНаТС.КоличествоМест;
		СтрокаГруз.ВесБрутто        = ЗаказНаТС.ВесБрутто;
		СтрокаГруз.Объем            = ЗаказНаТС.Объем;
		СтрокаГруз.СтоимостьГруза   = ЗаказНаТС.СтоимостьГруза;
		СтрокаГруз.Валюта           = ЗаказНаТС.ВалютаТоваров;
		СтрокаГруз.ОписаниеГруза    = ЗаказНаТС.НазваниеГруза;
		СтрокаГруз.Количество       = 1;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли

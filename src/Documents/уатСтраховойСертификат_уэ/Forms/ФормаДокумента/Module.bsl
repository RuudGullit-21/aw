
#Область ПеременныеФормы

&НаКлиенте
Перем ДанныеСтрокиРасходы; // Хранит данные строки ТЧ Грузы/Расходы перед началом редактирования.

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	уатЗащищенныеФункцииСервер.уатДокументФормаЭлементаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, Объект, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Взаимодействия
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Взаимодействия") Тогда
		МодульВзаимодействия = ОбщегоНазначения.ОбщийМодуль("Взаимодействия");
		МодульВзаимодействия.ПодготовитьОповещения(ЭтотОбъект, Параметры, Ложь);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Взаимодействия
		
	// уатУправлениеАвтотранспортом.МодификацияКонфигурации
	уатМодификацияКонфигурацииПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	// Конец уатУправлениеАвтотранспортом.МодификацияКонфигурации
	
	Если ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.уатСтраховойСертификат_уэ") Тогда
		ДокОбъект = РеквизитФормыВЗначение("Объект");
		ДокОбъект.Заполнить(Параметры.Основание);
		ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
	КонецЕсли;
	// Инициализация реквизитов формы.
	мВалютаРеглУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	Если уатРаботаСМетаданными.уатЕстьКонстанта("ВалютаУправленческогоУчета") Тогда
		мВалютаУпрУчета = Константы.ВалютаУправленческогоУчета.Получить();
	Иначе
		мВалютаУпрУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;
	
	Контрагент                 = Объект.Контрагент;
	Если НЕ Объект.Ссылка.Пустая() ИЛИ НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Договор = Объект.ДоговорКонтрагента;
	КонецЕсли;
	ОрганизацияПередИзменением = Объект.Организация;
	МноговалютныйУчет          = ПолучитьФункциональнуюОпцию("уатМноговалютныйУчет");
	ВалютаРасчетов             = Объект.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	
	ВалютаГрузовПред = Объект.ВалютаГрузов;
	
	уатОбщегоНазначенияСервер.НастроитьПолеЕдиницыИзмерения(ЭтотОбъект, "Грузы", "Номенклатура");
	ОбновитьПараметрВыработкиВременный();
	
	уатОбщегоНазначенияСервер.НастроитьПолеДоговорКонтрагента(Элементы.ДоговорКонтрагента, "Объект.Организация", "Объект.Контрагент", "СПоставщиком");
	
	Если Не ПравоРедактированиеДокумента() Тогда 
		Элементы.СтатусДокумента.Доступность                  = Ложь;
	КонецЕсли;
	
	флПересчетИтогов = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ПользователиКлиентСервер.АвторизованныйПользователь(),
		"ЗаказНаТСПерерасчетИтоговПриПроведении");

	Если Объект.Ссылка.Пустая() Тогда 
		Если Не ЗначениеЗаполнено(Объект.Статус) Тогда 
			Объект.Статус = Справочники.уатСтатусы_уэ.Новый;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.ВалютаГрузов) Тогда
			Объект.ВалютаГрузов = мВалютаУпрУчета;
		КонецЕсли;
		
		СтруктураОбъектовНастроек = Новый Структура;
		СтруктураОбъектовНастроек.Вставить("Организация",   Объект.Организация);
		СтруктураОбъектовНастроек.Вставить("Подразделение", Объект.Подразделение);
		СтруктураОбъектовНастроек.Вставить("Пользователь",  ПользователиКлиентСервер.АвторизованныйПользователь());
		
		Объект.Контрагент         = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, ПланыВидовХарактеристик.уатПраваИНастройки.ОсновнойСтраховщик);
		Объект.ДоговорКонтрагента = уатЗаполнениеДокументов.ПолучитьОсновнойДоговорКонтрагента(Объект.Контрагент, "СПоставщиком", Объект.Организация);
	КонецЕсли;
	
	УстановитьУсловноеОформлениеПолейСтатусов();
	ОбновитьВсегоВТЧРасходыСервер();
	ВывестиСуммовыеИтогиДокумента();
	ОбновитьПодвалГрузов();
	
	Элементы.ГрузыКоличествоМест.Заголовок = Справочники.уатВидыУпаковки_уэ.ПолучитьОсновнойВидУпаковки().КраткоеНаименование;
	
	ПредставлениеЕдиницыИзмеренияВеса = уатОбщегоНазначенияПовтИсп.ПолучитьПредставлениеОсновнойЕдиницыИзмеренияВеса();
	Если ЗначениеЗаполнено(ПредставлениеЕдиницыИзмеренияВеса) Тогда
		Элементы.ГрузыВесБрутто.Заголовок        = НСтр("en='Weight';ru='Вес'") + ", " + ПредставлениеЕдиницыИзмеренияВеса;
	КонецЕсли;
	
	ПредставлениеЕдиницыИзмеренияОбъема = уатОбщегоНазначенияПовтИсп.ПолучитьПредставлениеОсновнойЕдиницыИзмеренияОбъема();
	Если ЗначениеЗаполнено(ПредставлениеЕдиницыИзмеренияОбъема) Тогда
		Элементы.ГрузыОбъем.Заголовок        = НСтр("en='Volume';ru='Объем'") + ", " + ПредставлениеЕдиницыИзмеренияОбъема;
	КонецЕсли;

	Если Объект.Ссылка.Пустая() Тогда 
		РассчитатьСуммуДокумента();
		РассчитатьПоказателиСервер();
	КонецЕсли;
	ОбновитьНадписьИтоги();
	ОбновитьСтатусыГрузовСервер();

	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// уатУправлениеАвтотранспортом.МодификацияКонфигурации
	уатМодификацияКонфигурацииКлиентПереопределяемый.ПриОткрытии(ЭтотОбъект, Отказ);
	// Конец уатУправлениеАвтотранспортом.МодификацияКонфигурации
	
	уатЗащищенныеФункцииКлиент.уатДокументФормаЭлементаПриОткрытии(Отказ, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() И ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		уатОбщегоНазначенияКлиент.ПриИзмененииДоговора(ЭтаФорма, Неопределено, Договор);
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ОбновитьСтатусыГрузовСервер();
	УстановитьУсловноеОформлениеПолейСтатусов();
	ОбновитьНадписьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если флВопросЗакрытиеФормы Тогда
		Отказ = Истина;
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПередЗакрытиемВопрос", ЭтотОбъект);
		ТекстВопроса = НСтр("ru = 'При проверке корректности заполнения документа возникли предупреждения!
                            |Продолжить закрытие формы?'");
		ПоказатьВопрос(ОповещениеОЗавершении, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Интерактивно", Истина);
	Если ПараметрыЗаписи.Свойство("НеПересчитыватьИтоги") Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("НеПересчитыватьИтоги", Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьСтатусыГрузовСервер();
	ОбновитьВсегоВТЧРасходыСервер();
	ОбновитьНадписьИтоги();
	ОбновитьПараметрВыработкиВременный();
	УстановитьУсловноеОформлениеПолейСтатусов();
	
	флВыполненАвтопересчетУслугПриЗаписи = ТекущийОбъект.ДополнительныеСвойства.Свойство("ВыполненАвтопересчетУслуг");
	Если ТекущийОбъект.ДополнительныеСвойства.Свойство("ПересчетИтогов") Тогда
		флПересчетИтогов = ТекущийОбъект.ДополнительныеСвойства.ПересчетИтогов;
	КонецЕсли;
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Взаимодействия
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Взаимодействия") Тогда
		МодульВзаимодействияКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ВзаимодействияКлиент");
		МодульВзаимодействияКлиент.ВзаимодействиеПредметПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи, "уатЗаказГрузоотправителя");
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Взаимодействия
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	Если флВыполненАвтопересчетУслугПриЗаписи Тогда
		Если флПересчетИтогов Тогда
			ЗаголовокНСТР = "";
			ОписаниеНСТР = НСтр("en='Expenses was calculated automaticaly'; ru='Выполнен автоматический пересчет расходов'");
			ПоказатьОповещениеПользователя(ЗаголовокНСТР,, ОписаниеНСТР);
		Иначе
			ПоказатьПредупреждение(Неопределено, НСтр("en='It is necessary to recalculate of tabular section ""Expenses"" was not done!';ru='Необходимо выполнить пересчет табличной части ""Расходы""!'"));
		КонецЕсли;
		флВыполненАвтопересчетУслугПриЗаписи = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.уатШаблоныУслуг_уэ") Тогда
		ЗаполнитьУслугиПоШаблонуСервер(ВыбранноеЗначение);
		РассчитатьСуммуДокумента();
		ОбновитьВсегоВТЧРасходы();
		ВывестиСуммовыеИтогиДокумента();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// уатУправлениеАвтотранспортом.МодификацияКонфигурации
&НаКлиенте
Процедура Подключаемый_ПолеФормыНажатие(Элемент, СтандартнаяОбработка)
	
	уатМодификацияКонфигурацииКлиентПереопределяемый.ПолеФормыНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	ОповещениеОВыполнении = Новый ОписаниеОповещения("ДоговорКонтрагентаПриИзмененииЗавершение", ЭтотОбъект);
	уатОбщегоНазначенияКлиент.ДоговорКонтрагентаПриИзменении(ЭтаФорма, ОповещениеОВыполнении);
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаСоздание(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВидДоговораДоступныеЗначения = Новый Массив;
	
	мВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком");
	ВидДоговораДоступныеЗначения.Добавить(мВидДоговора);
	
	ПараметрыФормы = Новый Структура(); 
	ПараметрыФормы.Вставить("Владелец", Объект.Контрагент);
	ПараметрыФормы.Вставить("ВидДоговораДоступныеЗначения", ВидДоговораДоступныеЗначения);
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
КонецПроцедуры    

&НаКлиенте
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	мВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком");
	
	уатОбщегоНазначенияТиповыеКлиент.уатНачалоВыбораЗначенияДоговораКонтрагента(Объект, ЭтотОбъект, Элемент, Объект.Контрагент, 
		Объект.ДоговорКонтрагента, мВидДоговора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	Если Объект.Организация = ОрганизацияПередИзменением Тогда
		Возврат;
	КонецЕсли;
	ОрганизацияПередИзменением = Объект.Организация;
	
	ОрганизацияПриИзмененииФрагмент(Неопределено);

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПередИзменением = Контрагент;
	Контрагент                = Объект.Контрагент;
	
	Если КонтрагентПередИзменением <> Объект.Контрагент Тогда
		ПриИзмененииКонтрагентаИлиОрганизации(Неопределено);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура НадписьВсегоПоДокументуНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура();
	
	ПараметрыФормы.Вставить("ВесБрутто",                  Объект.ВесБрутто);
	ПараметрыФормы.Вставить("Объем",                      Объект.Объем);
	ПараметрыФормы.Вставить("КоличествоМест",             Объект.КоличествоМест);
	ПараметрыФормы.Вставить("СтоимостьГруза",             Объект.СтоимостьГруза);
	ПараметрыФормы.Вставить("ВидДокумента",               "уатСтраховойСертификат_уэ");
	ПараметрыФормы.Вставить("ТолькоПросмотр",             Истина);
	ПараметрыФормы.Вставить("ОтображатьСтоимость", Ложь);
	
	Оповещение = Новый ОписаниеОповещения("НадписьВсегоПоДокументуНажатиеЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("ОбщаяФорма.уатРедактированиеМаршрутныхПоказателей", ПараметрыФормы, ЭтотОбъект,,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусДокументаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("Отбор", Новый Структура("ДействуетНаСтраховыеСертификаты", Истина));
	Оповещение = Новый ОписаниеОповещения("СтатусВыполненияПослеВыбораСтатуса", ЭтотОбъект);
	ОткрытьФорму("Справочник.уатСтатусы_уэ.ФормаВыбора", ПараметрыФормы, ЭтотОбъект,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыГрузы

&НаКлиенте
Процедура ГрузыЗаказНаТСПриИзменении(Элемент)
	ТекСтрока = Элементы.Грузы.ТекущиеДанные;
	Если ТекСтрока = Неопределено
		ИЛИ НЕ ЗначениеЗаполнено(ТекСтрока.ЗаказНаТС) Тогда
		Возврат;
	КонецЕсли;
	
	ТекСтрока.Номенклатура     = Неопределено;
	ТекСтрока.Количество       = 1;
	ТекСтрока.ЕдиницаИзмерения = Неопределено;
	
	ОбновитьВесоОбъемныеПоказателиСервер(ТекСтрока.Номенклатура, ТекСтрока.ЗаказНаТС, ТекСтрока.ЕдиницаИзмерения, ТекСтрока.ВесБрутто,
		ТекСтрока.Объем, ТекСтрока.КоличествоМест, ТекСтрока.СтоимостьГруза, ТекСтрока.Количество);
КонецПроцедуры

&НаКлиенте
Процедура ГрузыНоменклатураПриИзменении(Элемент)
	
	ТекДанные = Элементы.Грузы.ТекущиеДанные;
	Если ТекДанные = Неопределено
		ИЛИ НЕ ЗначениеЗаполнено(ТекДанные.ЗаказНаТС) Тогда
		Возврат;
	КонецЕсли;
	ОбновитьВесоОбъемныеПоказателиСервер(ТекДанные.Номенклатура, ТекДанные.ЗаказНаТС, ТекДанные.ЕдиницаИзмерения, ТекДанные.ВесБрутто,
		ТекДанные.Объем, ТекДанные.КоличествоМест, ТекДанные.СтоимостьГруза, ТекДанные.Количество);
		
	Если ТипЗнч(ТекДанные.Номенклатура) = Тип("СправочникСсылка.Номенклатура")
		И ЗначениеЗаполнено(ТекДанные.Номенклатура) тогда
		ТекДанные.ЕдиницаИзмерения = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекДанные.Номенклатура, "ЕдиницаХраненияОстатков");
	ИначеЕсли ТипЗнч(ТекДанные.Номенклатура) = Тип("СправочникСсылка.уатГрузовыеМеста_уэ")
		И ЗначениеЗаполнено(ТекДанные.Номенклатура) Тогда
		РеквизитыГрузовогоМеста = уатОбщегоНазначенияТиповые.ПолучитьЗначенияРеквизитов(ТекДанные.Номенклатура, "ВидУпаковки, ТипКонтейнера, Контейнер");
		Если РеквизитыГрузовогоМеста.Контейнер Тогда
			ТекДанные.ЕдиницаИзмерения = РеквизитыГрузовогоМеста.ТипКонтейнера;
		Иначе
			ТекДанные.ЕдиницаИзмерения = РеквизитыГрузовогоМеста.ВидУпаковки;
		КонецЕсли;
	Иначе
		ТекДанные.ЕдиницаИзмерения = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузыВалютаПриИзменении(Элемент)
	ГрузыПриИзмененииВалюты();
КонецПроцедуры

&НаКлиенте
Процедура ГрузыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ТекСтрока = Элементы.Грузы.ТекущиеДанные;
	Если ТекСтрока = Неопределено
		ИЛИ НЕ ЗначениеЗаполнено(ТекСтрока.ЗаказНаТС) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеВыбора = СписокГрузМестЗаказаСервер(ТекСтрока.ЗаказНаТС);
КонецПроцедуры

&НаКлиенте
Процедура ГрузыКоличествоПриИзменении(Элемент)
	ТекДанные = Элементы.Грузы.ТекущиеДанные;
	Если ТекДанные = Неопределено
		ИЛИ НЕ ЗначениеЗаполнено(ТекДанные.ЗаказНаТС) Тогда
		Возврат;
	КонецЕсли;
	ОбновитьВесоОбъемныеПоказателиСервер(ТекДанные.Номенклатура, ТекДанные.ЗаказНаТС, ТекДанные.ЕдиницаИзмерения, ТекДанные.ВесБрутто,
		ТекДанные.Объем, ТекДанные.КоличествоМест, ТекДанные.СтоимостьГруза, ТекДанные.Количество);
КонецПроцедуры

&НаКлиенте
Процедура ГрузыНоменклатураОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекДанные = Элементы.Грузы.ТекущиеДанные;
	Если ТекДанные = Неопределено
		ИЛИ НЕ ЗначениеЗаполнено(ТекДанные.ЗаказНаТС) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Номенклатура") И ЗначениеЗаполнено(ВыбранноеЗначение) тогда
		ТекДанные.ЕдиницаИзмерения = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "ЕдиницаХраненияОстатков");
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.уатГрузовыеМеста_уэ") И ЗначениеЗаполнено(ВыбранноеЗначение) тогда
		РеквизитыГрузовогоМеста = уатОбщегоНазначенияТиповые.ПолучитьЗначенияРеквизитов(ВыбранноеЗначение, "ВидУпаковки, ТипКонтейнера, Контейнер");
		Если РеквизитыГрузовогоМеста.Контейнер Тогда
			ТекДанные.ЕдиницаИзмерения = РеквизитыГрузовогоМеста.ТипКонтейнера;
		Иначе
			ТекДанные.ЕдиницаИзмерения = РеквизитыГрузовогоМеста.ВидУпаковки;
		КонецЕсли;
	Иначе
		ТекДанные.ЕдиницаИзмерения = Неопределено;
	КонецЕсли;
	
	ПараметрыЗаказа      = ПолучитьКоличествоГрузаПоЗаказу(ТекДанные.ЗаказНаТС, ВыбранноеЗначение, ТекДанные.ЕдиницаИзмерения, Объект.СуммаВключаетНДС);
	ЗаполнитьЗначенияСвойств(ТекДанные, ПараметрыЗаказа);
	
	ОбновитьВесоОбъемныеПоказателиСервер(ТекДанные.Номенклатура, ТекДанные.ЗаказНаТС, ТекДанные.ЕдиницаИзмерения, ТекДанные.ВесБрутто,
		ТекДанные.Объем, ТекДанные.КоличествоМест, ТекДанные.СтоимостьГруза, ТекДанные.Количество);
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОбновитьПодвалГрузов();
	РассчитатьПоказателиСервер();
	ОбновитьСтатусыГрузовСервер();
	ОбновитьНадписьИтоги();
КонецПроцедуры

&НаКлиенте
Процедура ГрузыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекДанные = Элементы.Грузы.ТекущиеДанные;
	
	Если НоваяСтрока Тогда	
		ТекДанные.Количество = 1;
	КонецЕсли;
	
	ДанныеСтрокиРасходы = Новый Структура("Валюта", ТекДанные.Валюта);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыРасходы

&НаКлиенте
Процедура РасходыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекСтрока = Элементы.Расходы.ТекущиеДанные;
		
	Если НоваяСтрока Тогда
		ТекСтрока.РучнойВвод     = Истина;
		ТекСтрока.Количество     = 1;
		ТекСтрока.СтатьяРасходов = ПредопределенноеЗначение("Справочник.уатСтатьиРасходов.ОсновнаяСтатьяРасходов");
		ТекСтрока.СтавкаНДС      = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
			ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнаяСтавкаНДС");
		
		ТекСтрока.Валюта      = мВалютаРеглУчета;
	КонецЕсли;
	
	УстановитьФорматРедактированияКоличествоВыработки();
	
	ДанныеСтрокиРасходы = Новый Структура("Валюта", ТекСтрока.Валюта);

КонецПроцедуры

&НаКлиенте
Процедура РасходыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если НЕ ОтменаРедактирования Тогда
		ТекСтрока = Элементы.Расходы.ТекущиеДанные;
		Если уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрока.Тариф, "ПараметрВыработки")
			= ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.СтоимостьГруза")
			И НЕ ЗначениеЗаполнено(ТекСтрока.Ставка) Тогда
			
			ТекСтрока.Ставка = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрока.Тариф, "Тариф");
		КонецЕсли;
		
		ОбновитьПараметрВыработкиВременный();
		ОбновитьПодвалРасходов();
		ОбновитьВсегоВТЧРасходы();
		РассчитатьСуммуДокумента();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РасходыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекСтрока = Элементы.Расходы.ТекущиеДанные;
	
	Если Поле = Элементы.РасходыТариф Тогда
		ПоказатьЗначение(Неопределено, ТекСтрока.Тариф);
		
	ИначеЕсли Поле = Элементы.РасходыТарифПараметрВыработки Тогда
		ПоказатьЗначение(Неопределено, ТекСтрока.ПараметрВыработки);
		
	ИначеЕсли Поле = Элементы.РасходыРучнойВвод Тогда
		ТекСтрока.РучнойВвод = НЕ ТекСтрока.РучнойВвод;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РасходыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура")
		И ВыбранноеЗначение.Свойство("ТаблицаРаспределения")
		И ВыбранноеЗначение.ИмяТЧ = "Расходы" Тогда
		
		ДопПараметры = Новый Структура("ВыбранноеЗначение", ВыбранноеЗначение);
		
		Если Объект.Расходы.Количество() > 0 Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("РасходыОбработкаВыбораВопрос", ЭтотОбъект, ДопПараметры);
			ТекстНСТР = НСтр("en='Delete unassigned lines?';ru='Удалить нераспределенные строки?'");
			ПоказатьВопрос(ОписаниеОповещения, ТекстНСТР, РежимДиалогаВопрос.ДаНетОтмена,,КодВозвратаДиалога.Да);
		Иначе
			РасходыОбработкаВыбораЗавершение(ДопПараметры);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РасходыПослеУдаления(Элемент)
	РассчитатьСуммуДокумента();
	ОбновитьВсегоВТЧРасходыСервер();
	ОбновитьПараметрВыработкиВременный();
	ОбновитьПодвалРасходов();
КонецПроцедуры

&НаКлиенте
Процедура РасходыНоменклатураПриИзменении(Элемент)
	
	ТекСтрокаТабличнойЧасти = Элементы.Расходы.ТекущиеДанные;
	ТекСтрокаТабличнойЧасти.Тариф      = Неопределено;
	ТекСтрокаТабличнойЧасти.Цена       = 0;
	ТекСтрокаТабличнойЧасти.Количество = 1;
	ТекСтрокаТабличнойЧасти.СтатьяРасходов = уатОбщегоНазначенияСервер.СтатьяРасходовНоменклатуры(ТекСтрокаТабличнойЧасти.Номенклатура);
	
	Если Объект.УчитыватьНДС Тогда
		ТекСтрокаТабличнойЧасти.СтавкаНДС = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрокаТабличнойЧасти.Номенклатура, "СтавкаНДС");
	Иначе
		ТекСтрокаТабличнойЧасти.СтавкаНДС = Неопределено
	КонецЕсли;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрокаТабличнойЧасти);
	
	УстановитьФлагРучногоРедактирования(ТекСтрокаТабличнойЧасти);

КонецПроцедуры

&НаКлиенте
Процедура РасходыКоличествоПриИзменении(Элемент)
	ТекСтрокаТабличнойЧасти = Элементы.Расходы.ТекущиеДанные;
	Если ТекСтрокаТабличнойЧасти.ПараметрВыработкиВременный Тогда 
		уатЗащищенныеФункцииСервер.КонтрольВводаВремени(ТекСтрокаТабличнойЧасти.КоличествоВыработка);
		ТекСтрокаТабличнойЧасти.Количество = уатОбщегоНазначения.уатВремяВСекунды(ТекСтрокаТабличнойЧасти.КоличествоВыработка)/3600;
	Иначе
		ТекСтрокаТабличнойЧасти.Количество = ТекСтрокаТабличнойЧасти.КоличествоВыработка;
	КонецЕсли;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрокаТабличнойЧасти);
	
	УстановитьФлагРучногоРедактирования(ТекСтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура РасходыЦенаПриИзменении(Элемент)
	ТекСтрокаТабличнойЧасти = Элементы.Расходы.ТекущиеДанные;
	РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрокаТабличнойЧасти);
	УстановитьФлагРучногоРедактирования(ТекСтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура РасходыСтавкаПриИзменении(Элемент)
	ТекСтрокаТабличнойЧасти = Элементы.Расходы.ТекущиеДанные;
	РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрокаТабличнойЧасти);
	УстановитьФлагРучногоРедактирования(ТекСтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура РасходыСуммаПриИзменении(Элемент)
	ТекСтрокаТабличнойЧасти = Элементы.Расходы.ТекущиеДанные;
	
	Если ТекСтрокаТабличнойЧасти.Количество <> 0 Тогда
		ТекСтрокаТабличнойЧасти.Цена = ТекСтрокаТабличнойЧасти.Сумма / ТекСтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	
	РассчитатьСуммуНДС(ТекСтрокаТабличнойЧасти);
	РассчитатьСуммуВсегоВстрокеТЧ(ТекСтрокаТабличнойЧасти);
	
	УстановитьФлагРучногоРедактирования(ТекСтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура РасходыСуммаНДСПриИзменении(Элемент)
	ТекСтрокаТабличнойЧасти = Элементы.Расходы.ТекущиеДанные;
	РассчитатьСуммуВсегоВстрокеТЧ(ТекСтрокаТабличнойЧасти);
	
	УстановитьФлагРучногоРедактирования(ТекСтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура РасходыВалютаПриИзменении(Элемент)
	РасходыПриИзмененииВалюты();
КонецПроцедуры

&НаКлиенте
Процедура РасходыСтатьяРасходовПриИзменении(Элемент)
	ТекСтрокаТабличнойЧасти = Элементы.Расходы.ТекущиеДанные;
	УстановитьФлагРучногоРедактирования(ТекСтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура РасходыСтавкаНДСПриИзменении(Элемент)
	ТекСтрокаТабличнойЧасти = Элементы.Расходы.ТекущиеДанные;
	РассчитатьСуммуНДС(ТекСтрокаТабличнойЧасти);
	УстановитьФлагРучногоРедактирования(ТекСтрокаТабличнойЧасти);
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// уатУправлениеАвтотранспортом.МодификацияКонфигурации
&НаКлиенте
Процедура Подключаемый_уатВыполнитьКоманду(Команда)
	
	уатМодификацияКонфигурацииКлиентПереопределяемый.ВыполнитьПодключаемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры
// Конец уатУправлениеАвтотранспортом.МодификацияКонфигурации

&НаКлиенте
Процедура СоздатьДоговорКонтрагента(Команда)
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		ОповещениеОВыполнении = Новый ОписаниеОповещения("СоздатьДоговорКонтрагентаВопрос", ЭтотОбъект);
		ТекстВопроса = Нстр("ru = 'Будет создан и подставлен в документ новый договор. Продолжить?'");
		ПоказатьВопрос(ОповещениеОВыполнении, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	Иначе
		СоздатьДоговорКонтрагентаЗавершение();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЦеныИВалюту(Команда)
	
	ОбработатьИзмененияПоКнопкеЦеныИВалюты(Новый ОписаниеОповещения("РедактироватьЦеныИВалютуЗавершение", ЭтотОбъект), Объект.ВалютаДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборЗаказов(Команда)
	
	Если Объект.Грузы.Количество() Тогда 
		ТекстНСТР = НСтр("en='Clear the list of orders before the selection?';ru='Очистить список заказов перед подбором?'");
		Оповещение = Новый ОписаниеОповещения("ПодборЗаказовОчисткаТЧ", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстНСТР, РежимДиалогаВопрос.ДаНетОтмена);
	Иначе 
		ПодборЗаказовОткрытьФормуПодбора();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьПолучаемыеУслугиПоГрузам(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Дата",        Объект.Дата);
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("ИмяТЧ",       "Расходы");
	
	мГрузы = Новый Массив;
	Для Каждого ТекСтрока Из Объект.Грузы Цикл
		Если мГрузы.Найти(ТекСтрока.ЗаказНаТС) = Неопределено Тогда
			мГрузы.Добавить(ТекСтрока.ЗаказНаТС);
		КонецЕсли;
	КонецЦикла;
	ПараметрыФормы.Вставить("Грузы", мГрузы);
	
	флУчитыватьНДС = Ложь;
	мУслуги        = Новый Массив;
	Для Каждого ТекСтрока Из Объект.Расходы Цикл
		Если ЗначениеЗаполнено(ТекСтрока.ЗаказНаТС) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураСтроки = Новый Структура("ЗаказГрузоотправителя, Номенклатура, СтатьяРасходов, Тариф, Цена, Количество, Сумма, СтавкаНДС, СуммаНДС, Валюта, УчитыватьНДС, СуммаВключаетНДС, РучнойВвод");
		ЗаполнитьЗначенияСвойств(СтруктураСтроки, ТекСтрока);
		СтруктураСтроки.ЗаказГрузоотправителя = ТекСтрока.ЗаказНаТС;
		СтруктураСтроки.УчитыватьНДС = Объект.УчитыватьНДС;
		СтруктураСтроки.СуммаВключаетНДС = Объект.СуммаВключаетНДС;
		мУслуги.Добавить(СтруктураСтроки);
		
		флУчитыватьНДС = флУчитыватьНДС ИЛИ СтруктураСтроки.УчитыватьНДС;
	КонецЦикла;
	
	ПараметрыФормы.Вставить("Услуги", мУслуги);
	ПараметрыФормы.Вставить("УчитыватьНДС", флУчитыватьНДС);
	
	СтруктураНеРедактируемыхПараметров = Новый Структура("Организация");
	ПараметрыФормы.Вставить("НередактируемыеПараметры", СтруктураНеРедактируемыхПараметров);
	
	ПараметрыФормы.Вставить("ДокументОбъект", уатОбщегоНазначенияКлиентСервер.СтруктураДокумента(Объект, "уатСтраховойСертификат_уэ"));
	ПараметрыФормы.Вставить("ИмяДокумента", "уатСтраховойСертификат_уэ");
	ПараметрыФормы.Вставить("ИспользоватьПлановыеУслуги", Ложь);
	
	ОткрытьФорму("ОбщаяФорма.уатРаспределениеУслугПоЗаказам_уэ", ПараметрыФормы, Элементы.Расходы);
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьРасходы(Команда)
	Если Объект.Расходы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстНСТР = НСтр("en='Clear rendering services?';ru='Очистить список?'");
	ПоказатьВопрос(Новый ОписаниеОповещения("ОчиститьРасходыОтвет", ЭтотОбъект),
		ТекстНСТР, РежимДиалогаВопрос.ОКОтмена);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьУслугиПоШаблону(Команда)
	Если Объект.Расходы.Количество() > 0 Тогда
		ОписаниеОповещ = Новый ОписаниеОповещения("ЗаполнитьУслугиПоШаблонуВопрос", ЭтотОбъект);
		ТекстНСТР = НСтр("en='To fill with cleaning tables?';ru='Заполнить с очисткой таблицы?'");
		ПоказатьВопрос(ОписаниеОповещ, ТекстНСТР, РежимДиалогаВопрос.ДаНетОтмена);
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Справочник.уатШаблоныУслуг_уэ.ФормаВыбора",, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПоТарифам(Команда)
	Если Модифицированность Тогда
		ТекстНСТР = НСтр("en='To perform this operation it is necessary to record the document. Continue?';ru='Для выполнения данной операции необходимо записать документ. Продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("РассчитатьПоТарифамЗаписать", ЭтотОбъект),
			ТекстНСТР, РежимДиалогаВопрос.ОКОтмена, , КодВозвратаДиалога.ОК);
		Возврат;
	КонецЕсли;

	РассчитатьПоТарифамДействия();
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПоказатели(Команда)
	РассчитатьПоказателиСервер();
	РассчитатьУслугиПриИзмененииПоказателей();
	ОбновитьСтатусыГрузовСервер();
	ОбновитьВсегоВТЧРасходыСервер();
	ОбновитьНадписьИтоги();
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПолучателейУведомлений(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Документ", Объект);
	ПараметрыФормы.Вставить("ТипДокумента", ПредопределенноеЗначение("Перечисление.уатТипыОбъектовДляУведомлений_уэ.СтраховойСертификат"));
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ПолучателиУведомленийЗакрытиеФормы", ЭтаФорма);
	
	ОткрытьФорму("Документ.уатПотребностьВПеревозке_уэ.Форма.ФормаПолучателейУведомлений",
		ПараметрыФормы,
		ЭтаФорма,,,,
		ОписаниеОповещенияОЗакрытии,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ОчиститьРасходыОтвет(Результат, ДопПараметры) Экспорт
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Объект.Расходы.Очистить();
		РассчитатьСуммуДокумента();
		ОбновитьВсегоВТЧРасходыСервер();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьУслугиПоШаблонуВопрос(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.Расходы.Очистить();
		Модифицированность = Истина;
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
	Иначе
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Справочник.уатШаблоныУслуг_уэ.ФормаВыбора",, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура СтатусВыполненияПослеВыбораСтатуса(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Объект.Статус = РезультатЗакрытия;
	УстановитьУсловноеОформлениеПолейСтатусов();
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДоговорКонтрагентаВопрос(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.ОК Тогда
		СоздатьДоговорКонтрагентаЗавершение();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзмененииЗавершение(Результат, ДопПараметры) Экспорт
	уатОбщегоНазначенияКлиент.ПриИзмененииДоговора(ЭтаФорма, Неопределено, Договор);
КонецПроцедуры

// Вызывается из процедуры уатОбщегоНазначенияКлиент.ПриИзмененииДоговора()
//
&НаКлиенте
Процедура ПриИзмененииДоговораЛокальныеОбработчики() Экспорт
	//РассчитатьСуммуДокумента();
	//ОбновитьВсегоВТЧУслуги();
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура РасходыОбработкаВыбораВопрос(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		мсвСтрокУдалить = Объект.Расходы.НайтиСтроки(Новый Структура("ЗаказНаТС", ПредопределенноеЗначение("Документ.уатЗаказГрузоотправителя.ПустаяСсылка")));
		Для Каждого ТекСтрока Из мсвСтрокУдалить Цикл
			Объект.Расходы.Удалить(ТекСтрока);
		КонецЦикла;
		Модифицированность = Истина;
	ИначеЕсли Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	РасходыОбработкаВыбораЗавершение(ДопПараметры);
КонецПроцедуры

&НаСервере
Процедура РасходыОбработкаВыбораЗавершение(ДопПараметры)
	мТаб = Неопределено;
	ДопПараметры.ВыбранноеЗначение.Свойство("ТаблицаРаспределения", мТаб);
	Для Каждого ТекСтрока Из мТаб Цикл
		НовСтрока = Объект.Расходы.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока, ТекСтрока);
		НовСтрока.ЗаказНаТС = ТекСтрока.ЗаказГрузоотправителя;
		РассчитатьСуммуВсегоВстрокеТЧСервер(НовСтрока);
		Модифицированность = Истина;
	КонецЦикла;
	ОбновитьПараметрВыработкиВременный();
	РассчитатьСуммуДокумента();
	ОбновитьВсегоВТЧРасходыСервер();
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьУслугиПриИзмененииПоказателей()
	РассчитатьПолучаемыеУслугиЗавершение(Истина);
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПолучаемыеУслугиЗавершение(флСообщение = Ложь, флУдалитьРучнойВвод = Ложь)
	
	Если флУдалитьРучнойВвод Тогда
		мсвСтрокиУдалить = Объект.Расходы.НайтиСтроки(Новый Структура("РучнойВвод", Истина));
		Для Каждого ТекСтрокаУдалить Из мсвСтрокиУдалить Цикл
			Объект.Расходы.Удалить(ТекСтрокаУдалить);
		КонецЦикла;
	КонецЕсли;
	
	ДопПараметры = Новый Структура("ЗаполнятьТЧРасходы", Ложь);
	СтруктураДокумента = уатОбщегоНазначенияКлиентСервер.СтруктураДокумента(Объект, "уатСтраховойСертификат_уэ", ДопПараметры);
	РассчитатьУслугиСервер(СтруктураДокумента);
	уатРасчетыПоТарифамКлиентСервер_уэ.ЗаполнитьДоходыРасходыИзСтруктуры(Объект, СтруктураДокумента, "Расходы", "уатСтраховойСертификат_уэ", Ложь, флСообщение);
	
	РассчитатьСуммуДокумента();
	ОбновитьВсегоВТЧРасходыСервер();
	ОбновитьПараметрВыработкиВременный();
	ВывестиСуммовыеИтогиДокумента();
	ОбновитьСтатусыГрузовСервер();
	ОбновитьНадписьИтоги();
	УстановитьУсловноеОформлениеПолейСтатусов();
	
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииКонтрагентаИлиОрганизацииЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Оповещение = ДополнительныеПараметры.Оповещение;
	
	Если Не Оповещение = Неопределено Тогда 
		ВыполнитьОбработкуОповещения(Оповещение);
	КонецЕсли;

КонецПроцедуры // ПриИзмененииКонтрагентаИлиОрганизации()

&НаКлиенте
Процедура ОрганизацияПриИзмененииФрагментЗавершение(Результат, ДополнительныеПараметры) Экспорт
	УчитыватьНДСПередИзменением     = Объект.УчитыватьНДС;
	СуммаВключаетНДСПередИзменением = Объект.СуммаВключаетНДС;
	
	Объект.УчитыватьНДС     = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.УчитыватьНДС"));
	Объект.СуммаВключаетНДС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.СуммаВключаетНДС"));
		
	Если Объект.УчитыватьНДС <> УчитыватьНДСПередИзменением ИЛИ Объект.СуммаВключаетНДС <> СуммаВключаетНДСПередИзменением Тогда
		//ПересчитатьНДС();
		//
		//ОбновитьПодвалСервер();
		//ОбновитьВалютуВТЧГрузовТоваровСервер();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено
		ИЛИ НЕ ПравоРедактированиеДокумента() Тогда
		Возврат;
	КонецЕсли;
	
	ВалютаРасчетовПередИзменением = ДополнительныеПараметры.ВалютаРасчетовПередИзменением;
	Оповещение                    = ДополнительныеПараметры.Оповещение;
	СтруктураЦеныИВалюта          = Результат;
	
	// 3. Перезаполняем табличную часть "Номенклатура", если были внесены изменения в форме "Цены и Валюта".
	Если ТипЗнч(СтруктураЦеныИВалюта) = Тип("Структура")  Тогда
		ДопПараметры = Новый Структура("ПредКурс, ПредКратность, Курс, Кратность",
			Объект.КурсВзаиморасчетов, Объект.КратностьВзаиморасчетов, СтруктураЦеныИВалюта.Курс, СтруктураЦеныИВалюта.Кратность);
			
		Если СтруктураЦеныИВалюта.Свойство("ВалютаДокумента") И СтруктураЦеныИВалюта.Свойство("Курс") И СтруктураЦеныИВалюта.Свойство("Кратность") И
			СтруктураЦеныИВалюта.Свойство("СуммаВключаетНДС") И  СтруктураЦеныИВалюта.Свойство("НалогообложениеНДС") Тогда
			
			Объект.ВалютаДокумента		   = СтруктураЦеныИВалюта.ВалютаДокумента;
			Объект.КурсВзаиморасчетов	   = СтруктураЦеныИВалюта.Курс;
			Объект.КратностьВзаиморасчетов = СтруктураЦеныИВалюта.Кратность;
			Объект.ДатаКурса               = СтруктураЦеныИВалюта.ДатаКурса;
			Объект.СуммаВключаетНДС		   = СтруктураЦеныИВалюта.СуммаВключаетНДС;
			Объект.УчитыватьНДС			   = СтруктураЦеныИВалюта.НалогообложениеНДС;
			
			Если НЕ МноговалютныйУчет Тогда
				Для Каждого ТекСтрока Из Объект.Грузы Цикл
					ТекСтрока.Валюта = Объект.ВалютаДокумента;
				КонецЦикла;
				Для Каждого ТекСтрока Из Объект.Расходы Цикл
					ТекСтрока.Валюта = Объект.ВалютаДокумента;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		// Пересчитываем цены по валюте.
		Если НЕ МноговалютныйУчет И СтруктураЦеныИВалюта.ПересчитатьЦены Тогда	
			ПересчитатьЦеныТабличнойЧастиПоВалюте(ВалютаРасчетовПередИзменением, "Расходы");
		КонецЕсли;
		
		// Пересчитываем сумму если изменился признак "Сумма включает НДС".
		Если СтруктураЦеныИВалюта.Свойство("СуммаВключаетНДС") И СтруктураЦеныИВалюта.Свойство("ПредСуммаВключаетНДС") Тогда
			Если СтруктураЦеныИВалюта.СуммаВключаетНДС <> СтруктураЦеныИВалюта.ПредСуммаВключаетНДС Тогда                       	
				ПересчитатьСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС("Расходы");
			КонецЕсли;
		КонецЕсли;

	КонецЕсли;
	
	РассчитатьСуммуДокумента();
	ОбновитьВсегоВТЧРасходы();
	УстановитьВидимость();
	
	Если Оповещение <> Неопределено Тогда 
		ВыполнитьОбработкуОповещения(Оповещение);
	КонецЕсли;
	
КонецПроцедуры // ОбработатьИзмененияПоКнопкеЦеныИВалюты()

&НаКлиенте
Процедура ПодборЗаказовПослеПодбора(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из РезультатЗакрытия.ПодобранныеЗаказы Цикл 
		НоваяСтрока = Объект.Грузы.Добавить();
		НоваяСтрока.ЗаказНаТС        = ТекСтрока.Заказ;
		НоваяСтрока.Номенклатура     = ТекСтрока.Номенклатура;
		НоваяСтрока.ЕдиницаИзмерения = ТекСтрока.ЕдиницаИзмерения;
		ПараметрыЗаказа      = ПолучитьКоличествоГрузаПоЗаказу(НоваяСтрока.ЗаказНаТС, ТекСтрока.Номенклатура, НоваяСтрока.ЕдиницаИзмерения, Объект.СуммаВключаетНДС);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ПараметрыЗаказа);
		ОбновитьВесоОбъемныеПоказателиСервер(НоваяСтрока.Номенклатура, НоваяСтрока.ЗаказНаТС, НоваяСтрока.ЕдиницаИзмерения, НоваяСтрока.ВесБрутто,
			НоваяСтрока.Объем, НоваяСтрока.КоличествоМест, НоваяСтрока.СтоимостьГруза, НоваяСтрока.Количество);
	КонецЦикла;

	РассчитатьПоказателиСервер();
	ОбновитьСтатусыГрузовСервер();
	ОбновитьНадписьИтоги();
	ОбновитьПодвалГрузов();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемВопрос(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.ОК Тогда
		флВопросЗакрытиеФормы = Ложь;
		Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПодборЗаказовОчисткаТЧ(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда 
		Объект.Грузы.Очистить();
		
		ПодборЗаказовОткрытьФормуПодбора();
		
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		ПодборЗаказовОткрытьФормуПодбора();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьВсегоПоДокументуНажатиеЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда 
		Возврат;
	КонецЕсли;

	РезультатЗакрытия.Свойство("ВесБрутто",      Объект.ВесБрутто);
	РезультатЗакрытия.Свойство("Объем",          Объект.Объем);
	РезультатЗакрытия.Свойство("КоличествоМест", Объект.КоличествоМест);
	РезультатЗакрытия.Свойство("СтоимостьГруза", Объект.СтоимостьГруза);
	
	РассчитатьПоказателиСервер();
	
	Модифицированность = Истина;
	ОбновитьНадписьИтоги();
	
КонецПроцедуры

// Процедура рассчитывает сумму в строке табличной части.
//
&НаКлиенте
Процедура РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти = Неопределено)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Ставка) Тогда
		СтрокаТабличнойЧасти.Сумма = (СтрокаТабличнойЧасти.Сумма * СтрокаТабличнойЧасти.Ставка) / 100;
	КонецЕсли;
	
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	
КонецПроцедуры 

&НаСервере
Процедура ОбновитьПараметрВыработкиВременный()
	Для Каждого СтрокаТабличнойЧасти Из Объект.Расходы Цикл
		Если СтрокаТабличнойЧасти.Тариф.МетодРасчета = Перечисления.уатМетодыРасчетаПоТарифам.ПроцентомОтСуммы Тогда
			СтрокаТабличнойЧасти.ПараметрВыработки = Справочники.уатПараметрыВыработки.Наценка;
		Иначе
			СтрокаТабличнойЧасти.ПараметрВыработки = СтрокаТабличнойЧасти.Тариф.ПараметрВыработки;
		КонецЕсли;
		СтрокаТабличнойЧасти.ПараметрВыработкиВременный = СтрокаТабличнойЧасти.ПараметрВыработки.Временный;
		Если СтрокаТабличнойЧасти.ПараметрВыработкиВременный Тогда
			СтрокаТабличнойЧасти.КоличествоВыработка = уатОбщегоНазначения.уатВремяВЧЧ_ММ(СтрокаТабличнойЧасти.Количество*3600);
		Иначе
			СтрокаТабличнойЧасти.КоличествоВыработка = СтрокаТабличнойЧасти.Количество;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФорматРедактированияКоличествоВыработки()
	ТекСтрока = Элементы.Расходы.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекСтрока.ПараметрВыработкиВременный Тогда
		Элементы.РасходыКоличество.ФорматРедактирования = "ЧДЦ=2; ЧРД=:";
	Иначе
		Элементы.РасходыКоличество.ФорматРедактирования = "";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуНДС(СтрокаТабличнойЧасти)
	СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	
	СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
			СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
			СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлагРучногоРедактирования(ТекСтрокаТабличнойЧасти)
	ТекСтрокаТабличнойЧасти.РучнойВвод = Истина;
	РассчитатьСуммуДокумента();
	ОбновитьВсегоВТЧРасходыСервер();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКоличествоГрузаПоЗаказу(ЗаказНаТС, Груз, ЕдиницаИзмерения, СуммаВключаетНДС)
	
	ПараметрыЗаказа = Новый Структура("Количество, ВесБрутто, Объем, КоличествоМест, СтоимостьГруза, ОписаниеГруза, Валюта", 1,0,0,0,0, "", "");
	ПараметрыЗаказа.Валюта        = ЗаказНаТС.ВалютаТоваров;
	ПараметрыЗаказа.ОписаниеГруза = ЗаказНаТС.НазваниеГруза;
	Если ТипЗнч(Груз) = Тип("СправочникСсылка.уатГрузовыеМеста_уэ") Тогда 
		СтрокаГруза = ЗаказНаТС.ГрузовойСостав.Найти(Груз, "ГрузовоеМесто");
		Если СтрокаГруза <> Неопределено Тогда 
			ЗаполнитьЗначенияСвойств(ПараметрыЗаказа,СтрокаГруза);
			ПараметрыЗаказа.Количество     = СтрокаГруза.КоличествоМест;
			ПараметрыЗаказа.СтоимостьГруза = СтрокаГруза.Стоимость;
		КонецЕсли;
		Возврат ПараметрыЗаказа;
	Иначе 
		СтрокиГруза = ЗаказНаТС.Товары.НайтиСтроки(Новый Структура("Номенклатура, ЕдиницаИзмерения", Груз, ЕдиницаИзмерения));
		Если СтрокиГруза.Количество() Тогда 
			ЗаполнитьЗначенияСвойств(ПараметрыЗаказа,СтрокиГруза[0]);
			ПараметрыЗаказа.СтоимостьГруза = СтрокиГруза[0].Сумма + ?(СуммаВключаетНДС, 0, СтрокиГруза[0].СуммаНДС);
		КонецЕсли;
		Возврат ПараметрыЗаказа;
	КонецЕсли;
	
КонецФункции // ПолучитьКоличествоГрузаПоЗаказу()

&НаСервереБезКонтекста
Функция СписокГрузМестЗаказаСервер(ТекЗаказ)
	СписРез = Новый СписокЗначений;
	Если ТекЗаказ.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам Тогда
		Для Каждого ТекСтрока Из ТекЗаказ.ГрузовойСостав Цикл
			Если СписРез.НайтиПоЗначению(ТекСтрока.ГрузовоеМесто) = Неопределено Тогда
				СписРез.Добавить(ТекСтрока.ГрузовоеМесто);
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ТекЗаказ.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам Тогда
		Для Каждого ТекСтрока Из ТекЗаказ.Товары Цикл
			Если СписРез.НайтиПоЗначению(ТекСтрока.Номенклатура) = Неопределено Тогда
				СписРез.Добавить(ТекСтрока.Номенклатура);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СписРез;
КонецФункции

&НаКлиенте
Процедура ОбновитьВсегоВТЧРасходы()
	Для Каждого СтрокаТабличнойЧасти Из Объект.Расходы Цикл
		РассчитатьСуммуВсегоВстрокеТЧ(СтрокаТабличнойЧасти);
	КонецЦикла;
	ОбновитьПодвалРасходов();
КонецПроцедуры

&НаСервере
Процедура ОбновитьВсегоВТЧРасходыСервер()
	Для Каждого СтрокаТабличнойЧасти Из Объект.Расходы Цикл
		РассчитатьСуммуВсегоВстрокеТЧСервер(СтрокаТабличнойЧасти);
	КонецЦикла;
	ОбновитьПодвалРасходов();
КонецПроцедуры

&НаСервере
Процедура ПересчитатьСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС(ИмяТЧ)
	уатОбщегоНазначенияСервер.ПересчитатьСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС(Объект[ИмяТЧ], Объект.СуммаВключаетНДС);
КонецПроцедуры

&НаСервере
Процедура ОбновитьПодвалРасходов()
	
	СтрокаКолонки    = "Сумма, СуммаНДС, Всего";
	СтруктураКолонки = Новый Структура(СтрокаКолонки);
	
	соотвИтогиВВалюте = Новый Соответствие;
	Для Каждого ТекСтрока Из Объект.Расходы Цикл
		ТекЭлем = соотвИтогиВВалюте.Получить(ТекСтрока.Валюта);
		Если ТекЭлем = Неопределено Тогда
			ТекСтруктураКолонки = Новый Структура(СтрокаКолонки);
			ЗаполнитьЗначенияСвойств(ТекСтруктураКолонки, ТекСтрока);
			соотвИтогиВВалюте.Вставить(ТекСтрока.Валюта, ТекСтруктураКолонки);
		Иначе
			Для Каждого КолонкаИтоги Из СтруктураКолонки Цикл
				ТекЭлем[КолонкаИтоги.Ключ] = ТекЭлем[КолонкаИтоги.Ключ] + ТекСтрока[КолонкаИтоги.Ключ];
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	мВысотаПодвала = 1;
	
	Для Каждого КолонкаИтоги Из СтруктураКолонки Цикл
		ТекТекстПодвала = "";
		мКоличВалют = 0;
		
		Для Каждого ТекСтрокаИтогиВВалюте Из соотвИтогиВВалюте Цикл
			ТекИтого = ТекСтрокаИтогиВВалюте.Значение[КолонкаИтоги.Ключ];
			Если ТекИтого = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ТекТекстПодвала = ТекТекстПодвала + "
				|" + Формат(ТекИтого, "ЧДЦ=2") + " " + ТекСтрокаИтогиВВалюте.Ключ + "";;
			
			мКоличВалют = мКоличВалют + 1;
		КонецЦикла;
		
		ЭтотОбъект["НадписьПодвалРасходы" + КолонкаИтоги.Ключ] = Сред(ТекТекстПодвала, 2);
		мВысотаПодвала = Макс(мВысотаПодвала, мКоличВалют);
	КонецЦикла;
	
	Если Элементы.Расходы.ВысотаПодвала <> мВысотаПодвала Тогда
		Элементы.Расходы.ВысотаПодвала = мВысотаПодвала;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьПодвалГрузов()
	
	СтрокаКолонки    = "СтоимостьГруза";
	СтруктураКолонки = Новый Структура(СтрокаКолонки);
	
	соотвИтогиВВалюте = Новый Соответствие;
	Для Каждого ТекСтрока Из Объект.Грузы Цикл
		ТекЭлем = соотвИтогиВВалюте.Получить(ТекСтрока.Валюта);
		Если ТекЭлем = Неопределено Тогда
			ТекСтруктураКолонки = Новый Структура(СтрокаКолонки);
			ЗаполнитьЗначенияСвойств(ТекСтруктураКолонки, ТекСтрока);
			соотвИтогиВВалюте.Вставить(ТекСтрока.Валюта, ТекСтруктураКолонки);
		Иначе
			Для Каждого КолонкаИтоги Из СтруктураКолонки Цикл
				ТекЭлем[КолонкаИтоги.Ключ] = ТекЭлем[КолонкаИтоги.Ключ] + ТекСтрока[КолонкаИтоги.Ключ];
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	мВысотаПодвала = 1;
	
	Для Каждого КолонкаИтоги Из СтруктураКолонки Цикл
		ТекТекстПодвала = "";
		мКоличВалют = 0;
		
		Для Каждого ТекСтрокаИтогиВВалюте Из соотвИтогиВВалюте Цикл
			ТекИтого = ТекСтрокаИтогиВВалюте.Значение[КолонкаИтоги.Ключ];
			Если ТекИтого = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ТекТекстПодвала = ТекТекстПодвала + "
				|" + Формат(ТекИтого, "ЧДЦ=2") + " " + ТекСтрокаИтогиВВалюте.Ключ + "";;
			
			мКоличВалют = мКоличВалют + 1;
		КонецЦикла;
		
		ЭтотОбъект["НадписьПодвалГрузы" + КолонкаИтоги.Ключ] = Сред(ТекТекстПодвала, 2);
		мВысотаПодвала = Макс(мВысотаПодвала, мКоличВалют);
	КонецЦикла;
	
	Если Элементы.Грузы.ВысотаПодвала <> мВысотаПодвала Тогда
		Элементы.Грузы.ВысотаПодвала = мВысотаПодвала;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуВсегоВстрокеТЧ(СтрокаТабличнойЧасти)
	Попытка
		СуммаВключаетНДС = СтрокаТабличнойЧасти.СуммаВключаетНДС;
	Исключение
		СуммаВключаетНДС = Объект.СуммаВключаетНДС;
	КонецПопытки;
	Попытка
		УчитыватьНДС = СтрокаТабличнойЧасти.УчитыватьНДС;
	Исключение
		УчитыватьНДС = Объект.УчитыватьНДС;
	КонецПопытки;
	
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма
		+ ?(УчитыватьНДС И НЕ СуммаВключаетНДС, СтрокаТабличнойЧасти.СуммаНДС, 0);
КонецПроцедуры

&НаСервере
Процедура РассчитатьСуммуВсегоВстрокеТЧСервер(СтрокаТабличнойЧасти)
	Попытка
		СуммаВключаетНДС = СтрокаТабличнойЧасти.СуммаВключаетНДС;
	Исключение
		СуммаВключаетНДС = Объект.СуммаВключаетНДС;
	КонецПопытки;
	Попытка
		УчитыватьНДС = СтрокаТабличнойЧасти.УчитыватьНДС;
	Исключение
		УчитыватьНДС = Объект.УчитыватьНДС;
	КонецПопытки;
	
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма
		+ ?(УчитыватьНДС И НЕ СуммаВключаетНДС, СтрокаТабличнойЧасти.СуммаНДС, 0);
КонецПроцедуры

&НаСервере
Процедура ПересчитатьЦеныТабличнойЧастиПоВалюте(ВалютаРасчетовПередИзменением, ИмяТЧ, ДопПараметры = Неопределено)
	уатОбщегоНазначенияСервер.ПересчитатьЦеныТабличнойЧастиПоВалюте(Объект, ВалютаРасчетовПередИзменением, ИмяТЧ, ДопПараметры);
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимость()
	
	Элементы.РасходыВалюта.ТолькоПросмотр           = НЕ МноговалютныйУчет;
	Элементы.ГрузыВалюта.ТолькоПросмотр             = НЕ МноговалютныйУчет;
	
	// Настройка видимости элементов для внешнего пользователя
	Если уатОбщегоНазначения.ПроверкаВнешнегоПользователя() Тогда
		
		Элементы.Ответственный.Доступность = Ложь;
		Элементы.Организация.Доступность   = Ложь;
		
		// Ограничение доступа к справочникам
		Элементы.Контрагент.ТолькоПросмотр = Истина;
		Элементы.Контрагент.КнопкаВыбора   = Ложь;
		Элементы.Контрагент.КнопкаОткрытия = Истина;
		Элементы.СоздатьДоговорКонтрагента.Видимость = Ложь;
		Элементы.ГруппаИтогиПрибыльПодвал.Видимость  = Ложь;
		
		// Настройка страниц
		Элементы.Расходы.Доступность = Ложь;
		Элементы.Расходы.КоманднаяПанель.Видимость = Ложь;
		Элементы.РасходыТариф.ГиперссылкаЯчейки = Ложь;
		
		Элементы.СтатусДокумента.Гиперссылка = Ложь;
	КонецЕсли;
	
КонецПроцедуры // УстановитьВидимость()

&НаКлиенте
Процедура СоздатьДоговорКонтрагентаЗавершение()
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Владелец",    Объект.Контрагент);
	ПараметрыЗаполнения.Вставить("Контрагент",  Объект.Контрагент);
	ПараметрыЗаполнения.Вставить("Организация", Объект.Организация);
	Объект.ДоговорКонтрагента = уатНастройкиШаблонов.СоздатьДоговорКонтрагентаПоШаблону(ПараметрыЗаполнения, "2", Истина);
	ДоговорКонтрагентаПриИзменении(Неопределено);
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеПолейСтатусов()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатСтатусы_уэ.Ссылка,
	|	уатСтатусы_уэ.Наименование,
	|	уатСтатусы_уэ.ЦветФонаПоУмолчанию,
	|	уатСтатусы_уэ.ЦветТекстаПоУмолчанию
	|ИЗ
	|	Справочник.уатСтатусы_уэ КАК уатСтатусы_уэ
	|ГДЕ
	|	НЕ уатСтатусы_уэ.ПометкаУдаления
	|	И уатСтатусы_уэ.ДействуетНаСтраховыеСертификаты";
	
	ВыборкаЦвета = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЦвета.Следующий() Цикл 
		ЦветФона   = Неопределено;
		ЦветТекста = Неопределено;
		
		ХранилищеЦветФона = ВыборкаЦвета.ЦветФонаПоУмолчанию;
		Если Не ХранилищеЦветФона = Неопределено Тогда 
			ДанныеЦветФона = ХранилищеЦветФона.Получить();
			Если Не ДанныеЦветФона = Неопределено И ТипЗнч(ДанныеЦветФона) = Тип("Цвет") Тогда
				ЦветФона = ДанныеЦветФона;
			КонецЕсли;
		КонецЕсли;
		
		ХранилищеЦветТекста = ВыборкаЦвета.ЦветТекстаПоУмолчанию;
		Если Не ХранилищеЦветТекста = Неопределено Тогда 
			ДанныеЦветТекста = ХранилищеЦветТекста.Получить();
			Если Не ДанныеЦветТекста = Неопределено И ТипЗнч(ДанныеЦветТекста) = Тип("Цвет") Тогда
				ЦветТекста = ДанныеЦветТекста;
			КонецЕсли;
		КонецЕсли;
		
		Если ЦветТекста = Неопределено И ЦветФона = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		// Установка цвета реквизита шапки
		Если ВыборкаЦвета.Ссылка = Объект.Статус Тогда 
			Если Не ЦветТекста = Неопределено Тогда 
				Элементы.СтатусДокумента.ЦветТекста = ЦветТекста;
			КонецЕсли;
			
			Если Не ЦветФона = Неопределено Тогда 
				Элементы.СтатусДокумента.ЦветФона = ЦветФона;
			КонецЕсли;
			
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Цвет статуса в ТЧ Грузы
	
	мсвУдаляемыхЭлементов = Новый Массив();
	Для Каждого ЭлементУсловногоОформления Из УсловноеОформление.Элементы Цикл
		Если ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "Предустановленный_ЦветаСтатусовЗаказов" Тогда
			мсвУдаляемыхЭлементов.Добавить(ЭлементУсловногоОформления);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементУсловногоОформления Из мсвУдаляемыхЭлементов Цикл
		УсловноеОформление.Элементы.Удалить(ЭлементУсловногоОформления);
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатСтатусы_уэ.Ссылка,
	|	уатСтатусы_уэ.Наименование,
	|	уатСтатусы_уэ.ЦветФонаПоУмолчанию,
	|	уатСтатусы_уэ.ЦветТекстаПоУмолчанию
	|ИЗ
	|	Справочник.уатСтатусы_уэ КАК уатСтатусы_уэ
	|ГДЕ
	|	НЕ уатСтатусы_уэ.ПометкаУдаления
	|	И уатСтатусы_уэ.ДействуетНаЗаказыГрузоотправителей";
	
	ВыборкаЦвета = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЦвета.Следующий() Цикл 
		ЦветФона   = Неопределено;
		ЦветТекста = Неопределено;
		
		ХранилищеЦветФона = ВыборкаЦвета.ЦветФонаПоУмолчанию;
		Если Не ХранилищеЦветФона = Неопределено Тогда 
			ДанныеЦветФона = ХранилищеЦветФона.Получить();
			Если Не ДанныеЦветФона = Неопределено И ТипЗнч(ДанныеЦветФона) = Тип("Цвет") Тогда
				ЦветФона = ДанныеЦветФона;
			КонецЕсли;
		КонецЕсли;
		
		ХранилищеЦветТекста = ВыборкаЦвета.ЦветТекстаПоУмолчанию;
		Если Не ХранилищеЦветТекста = Неопределено Тогда 
			ДанныеЦветТекста = ХранилищеЦветТекста.Получить();
			Если Не ДанныеЦветТекста = Неопределено И ТипЗнч(ДанныеЦветТекста) = Тип("Цвет") Тогда
				ЦветТекста = ДанныеЦветТекста;
			КонецЕсли;
		КонецЕсли;
		
		Если ЦветТекста = Неопределено И ЦветФона = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		
		ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.Грузы.Статус");
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = ВыборкаЦвета.Ссылка;
		
		Если Не ЦветТекста = Неопределено Тогда 
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветТекста);
		КонецЕсли;
		
		Если Не ЦветФона = Неопределено Тогда 
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветФона);
		КонецЕсли;
		
		ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "Предустановленный_ЦветаСтатусовЗаказов";
		ЭлементУсловногоОформления.Представление = "По цвету статуса " + ВыборкаЦвета.Наименование;
		
		ПолеОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ГрузыСтатус");
		ПолеОформления.Использование = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииКонтрагентаИлиОрганизации(Знач Оповещение)
	
	ДанныеОбменаССервером = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, Дата");
	ЗаполнитьЗначенияСвойств(ДанныеОбменаССервером, Объект);
	// Получим данные с сервера
	ДанныеОбменаССервером.ДоговорКонтрагента = Объект.ДоговорКонтрагента;
	ЗначенияДляЗаполнения                    = ИзменениеКонтрагентаСервер(ДанныеОбменаССервером);
	Объект.ДоговорКонтрагента                = ЗначенияДляЗаполнения.ДоговорКонтрагента;

	ДоговорПередИзменением = Договор;
	//Договор                = Объект.ДоговорКонтрагента;
	
	ОповещениеОВыполнении = Новый ОписаниеОповещения("ПриИзмененииКонтрагентаИлиОрганизацииЗавершение", ЭтотОбъект, Новый Структура("Оповещение", Оповещение));
	уатОбщегоНазначенияКлиент.ПриИзмененииДоговора(ЭтаФорма, ОповещениеОВыполнении, ДоговорПередИзменением);
	
КонецПроцедуры // ПриИзмененииКонтрагентаИлиОрганизации()

&НаКлиенте
Процедура ОрганизацияПриИзмененииФрагмент(ДополнительныеПараметры)
	
	ПриИзмененииКонтрагентаИлиОрганизации(Новый ОписаниеОповещения("ОрганизацияПриИзмененииФрагментЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатусыГрузовСервер()
	
	мсвЗаказы = Новый Массив();
	Для Каждого ТекСтрока Из Объект.Грузы Цикл
		мсвЗаказы.Добавить(ТекСтрока.ЗаказНаТС);
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("мсвЗаказы", мсвЗаказы);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатЗаказГрузоотправителя.Ссылка КАК Заказ
	|ПОМЕСТИТЬ ВРТ_Документы
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	|ГДЕ
	|	уатЗаказГрузоотправителя.Ссылка В(&мсвЗаказы)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатЭтапыМультимодальныхПеревозок_уэ.Этап
	|ИЗ
	|	РегистрСведений.уатЭтапыМультимодальныхПеревозок_уэ КАК уатЭтапыМультимодальныхПеревозок_уэ
	|ГДЕ
	|	уатЭтапыМультимодальныхПеревозок_уэ.ЗаказГрузоотправителя В(&мсвЗаказы)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Заказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатСтатусыГрузов_уэСрезПоследних.Период КАК Период,
	|	уатСтатусыГрузов_уэСрезПоследних.Заказ КАК Заказ,
	|	уатСтатусыГрузов_уэСрезПоследних.ГрузовоеМесто КАК ГрузовоеМесто,
	|	уатСтатусыГрузов_уэСрезПоследних.Статус КАК Статус
	|ИЗ
	|	РегистрСведений.уатСтатусыГрузов_уэ.СрезПоследних(
	|			,
	|			Заказ В
	|				(ВЫБРАТЬ
	|					ВТ.Заказ
	|				ИЗ
	|					ВРТ_Документы КАК ВТ)) КАК уатСтатусыГрузов_уэСрезПоследних
	|
	|УПОРЯДОЧИТЬ ПО
	|	Заказ,
	|	ГрузовоеМесто,
	|	Период УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатЗаказГрузоотправителя.Ссылка КАК Заказ,
	|	ВЫБОР
	|		КОГДА уатЗаказГрузоотправителя.Мультимодальный
	|				И НЕ уатЗаказГрузоотправителя.ЭтоЭтап
	|			ТОГДА ЕСТЬNULL(СтатусРодительскогоЗаказа.СтатусЭтапа, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый))
	|		ИНАЧЕ ВЫБОР
	|				КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЕСТЬNULL(уатСтатусыГрузов_уэСрезПоследних.Статус, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый))) > 1
	|					ТОГДА ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Составной)
	|				ИНАЧЕ МАКСИМУМ(ЕСТЬNULL(уатСтатусыГрузов_уэСрезПоследних.Статус, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый)))
	|			КОНЕЦ
	|	КОНЕЦ КАК СтатусЗаказа
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатСтатусыГрузов_уэ.СрезПоследних КАК уатСтатусыГрузов_уэСрезПоследних
	|		ПО (уатСтатусыГрузов_уэСрезПоследних.Заказ = уатЗаказГрузоотправителя.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВЫБОР
	|				КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЕСТЬNULL(уатСтатусыГрузов_уэСрезПоследних.Статус, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый))) > 1
	|					ТОГДА ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Составной)
	|				ИНАЧЕ МАКСИМУМ(ЕСТЬNULL(уатСтатусыГрузов_уэСрезПоследних.Статус, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый)))
	|			КОНЕЦ КАК СтатусЭтапа,
	|			уатЭтапыМультимодальныхПеревозок_уэ.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя
	|		ИЗ
	|			РегистрСведений.уатЭтапыМультимодальныхПеревозок_уэ КАК уатЭтапыМультимодальныхПеревозок_уэ
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатСтатусыГрузов_уэ.СрезПоследних КАК уатСтатусыГрузов_уэСрезПоследних
	|				ПО (уатСтатусыГрузов_уэСрезПоследних.Заказ = уатЭтапыМультимодальныхПеревозок_уэ.Этап)
	|		ГДЕ
	|			уатЭтапыМультимодальныхПеревозок_уэ.ЗаказГрузоотправителя В(&мсвЗаказы)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			уатЭтапыМультимодальныхПеревозок_уэ.ЗаказГрузоотправителя) КАК СтатусРодительскогоЗаказа
	|		ПО уатЗаказГрузоотправителя.Ссылка = СтатусРодительскогоЗаказа.ЗаказГрузоотправителя
	|ГДЕ
	|	уатЗаказГрузоотправителя.Ссылка В(&мсвЗаказы)
	|
	|СГРУППИРОВАТЬ ПО
	|	уатЗаказГрузоотправителя.Мультимодальный,
	|	уатЗаказГрузоотправителя.ЭтоЭтап,
	|	СтатусРодительскогоЗаказа.СтатусЭтапа,
	|	уатЗаказГрузоотправителя.Ссылка";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	табСтатусыГрузов  = РезультатЗапроса[1].Выгрузить();
	табСтатусыЗаказов = РезультатЗапроса[2].Выгрузить();
	
	Для Каждого ТекСтрока Из Объект.Грузы Цикл
		ТекСтрока.ДетализацияЗаказа = ТекСтрока.ЗаказНаТС.ДетализацияЗакрытия;
		Если ТекСтрока.ЗаказНаТС.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам Тогда 
			НайдСтроки = табСтатусыГрузов.НайтиСтроки(Новый Структура("Заказ, ГрузовоеМесто", ТекСтрока.ЗаказНаТС, ТекСтрока.Номенклатура));
			Если НайдСтроки.Количество() Тогда 
				ТекСтрока.Статус = НайдСтроки[0].Статус;
			Иначе 
				ТекСтрока.Статус = Неопределено;
			КонецЕсли;
			
		Иначе 
			НайдСтроки = табСтатусыЗаказов.НайтиСтроки(Новый Структура("Заказ", ТекСтрока.ЗаказНаТС));
			Если НайдСтроки.Количество() Тогда 
				ТекСтрока.Статус = НайдСтроки[0].СтатусЗаказа;
			Иначе 
				ТекСтрока.Статус = Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИзменениеКонтрагентаСервер(ДанныеДляЗаполнения)
	
	СтруктураПараметровДляПолученияДоговора =
		уатЗаполнениеДокументов.ПолучитьСтруктуруПараметровДляПолученияДоговораПокупки();
	
	ЗначенияДляЗаполнения = уатОбщегоНазначенияСервер.ПриИзмененииЗначенияКонтрагента(
		ДанныеДляЗаполнения,
		СтруктураПараметровДляПолученияДоговора
	);
	
	Возврат ЗначенияДляЗаполнения;
	
КонецФункции

// Процедура выполняет пересчет в табличной части документа после изменений 
// в форме "Цены и валюта".Выполняется пересчет колонок: цена, скидка, сумма,
// сумма НДС, всего.
//
&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты(Знач Оповещение, Знач ВалютаРасчетовПередИзменением, ПересчитатьЦены = Ложь)
	
	// 1. Формируем структуру параметров для заполнения формы "Цены и Валюта".
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВалютаДокумента",		  Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("Курс",				  Объект.КурсВзаиморасчетов);
	СтруктураПараметров.Вставить("Кратность",			  Объект.КратностьВзаиморасчетов);
	СтруктураПараметров.Вставить("ДатаКурса",             Объект.ДатаКурса);
	СтруктураПараметров.Вставить("Контрагент",			  Объект.Контрагент);
	СтруктураПараметров.Вставить("Договор",				  Объект.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("Организация",			  Объект.Организация);
	СтруктураПараметров.Вставить("ДатаДокумента",		  Объект.Дата);
	СтруктураПараметров.Вставить("ПерезаполнитьЦены",	  Ложь);
	СтруктураПараметров.Вставить("ПересчитатьЦены",		  ПересчитатьЦены);
	СтруктураПараметров.Вставить("БылиВнесеныИзменения",  Ложь);
	СтруктураПараметров.Вставить("СуммаВключаетНДС",      Объект.СуммаВключаетНДС);
	СтруктураПараметров.Вставить("НалогообложениеНДС",	  Объект.УчитыватьНДС);
	// Для объедининенного решения с БП 3
	СтруктураПараметров.Вставить("ДокументБезНДС",       НЕ Объект.УчитыватьНДС);
	
	Если НЕ ПравоРедактированиеДокумента() Тогда
		СтруктураПараметров.Вставить("ТолькоПросмотр", Истина);
	КонецЕсли;
	
	ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров,,,,, Новый ОписаниеОповещения("ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение",
	ЭтотОбъект, Новый Структура("ВалютаРасчетовПередИзменением, Оповещение", ВалютаРасчетовПередИзменением, Оповещение)),
	РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры // ОбработатьИзмененияПоКнопкеЦеныИВалюты()

&НаСервере
Процедура РассчитатьСуммуДокумента()
	СтруктураДокумента    = уатОбщегоНазначенияКлиентСервер.СтруктураДокумента(Объект, "уатСтраховойСертификат_уэ");
	Объект.СуммаДокумента = уатОбщегоНазначенияТиповые.уатПолучитьСуммуДокументаСНДС(СтруктураДокумента, "Расходы");
	
	ВывестиСуммовыеИтогиДокумента();
КонецПроцедуры

&НаСервере
Процедура ВывестиСуммовыеИтогиДокумента()
	// При изменении данных обновим суммы в подвале.
	
	СтруктураДокумента = уатОбщегоНазначенияКлиентСервер.СтруктураДокумента(Объект, "уатСтраховойСертификат_уэ");
	ВсегоНДС           = уатОбщегоНазначенияТиповые.ПолучитьНДСДокумента(СтруктураДокумента, "Расходы");
	
	//Процедура ВывестиСуммовыеИтогиДокумента()
	Если Объект.УчитыватьНДС Тогда 
		Если Объект.СуммаВключаетНДС Тогда 
			НадписьВсегоНДС = НСтр("en='VAT amount';ru='НДС в сумме'") + ":";
		Иначе 
			НадписьВсегоНДС = НСтр("en='VAT from above';ru='НДС сверху'") + ":";
		КонецЕсли;
		НадписьВсего = НСтр("en='Total with VAT:';ru='Всего с НДС:'");
		Элементы.СтраницыИтогов.ТекущаяСтраница = Элементы.ИтогоУчетНДС;
	Иначе 
		НадписьВсего = НСтр("en='Total:';ru='Всего:'");
		Элементы.СтраницыИтогов.ТекущаяСтраница = Элементы.ИтогоБезНДС;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ВалютаДокумента) Или Объект.ВалютаДокумента = мВалютаРеглУчета Тогда 
		НадписьКурс = "(1.0000)";
		Элементы.НадписьКурс.Видимость = Ложь;
		Элементы.НадписьКурс2.Видимость = Ложь;
	Иначе 
		НадписьКурс = "(" + Формат(
			?(Объект.КратностьВзаиморасчетов = 0, Объект.КурсВзаиморасчетов, Объект.КурсВзаиморасчетов/Объект.КратностьВзаиморасчетов),
			"ЧДЦ=4; ЧРД=.; ЧН=0.0000; ЧГ=0") + ")";
		Элементы.НадписьКурс.Видимость = Истина;
		Элементы.НадписьКурс2.Видимость = Истина;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ОбновитьНадписьИтоги()
	
	ПредставлениеЕдиницыИзмеренияВеса = Константы.уатЕдиницаИзмеренияВеса.Получить();
	
	ПарамКоличествоМест = " " + Объект.КоличествоМест + " " + Справочники.уатВидыУпаковки_уэ.ПолучитьОсновнойВидУпаковки().КраткоеНаименование + " /";
	
	ПарамВес = "" + Объект.ВесБрутто + " " + ПредставлениеЕдиницыИзмеренияВеса;
	
	НадписьВсегоПоДокументу = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 / %2 %3 /%4 %5 %6",
		ПарамВес, 
		Объект.Объем, 
		Константы.уатЕдиницаИзмеренияОбъема.Получить(),
		ПарамКоличествоМест, Объект.СтоимостьГруза, Объект.ВалютаГрузов);
		
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПравоРедактированиеДокумента()
	Результат = ПравоДоступа("Редактирование", Метаданные.Документы.уатСтраховойСертификат_уэ);
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ПодборЗаказовОткрытьФормуПодбора()
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ДокументПодбора", "уатСтраховойСертификат_уэ");
	
	Оповещение = Новый ОписаниеОповещения("ПодборЗаказовПослеПодбора", ЭтотОбъект);
	
	ОткрытьФорму("ОбщаяФорма.уатПодборЗаказов", ПараметрыФормы, ЭтотОбъект,,,, Оповещение);
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьПоказателиСервер()
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	ДокОбъект.РассчитатьИтоговыеПоказатели();
	ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПоТарифамЗаписать(Результат, ДопПараметры) Экспорт
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Записать(Новый Структура("НеПересчитыватьИтоги", Истина));
	Исключение
		Возврат;
	КонецПопытки;
	
	РассчитатьПоТарифамДействия();
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПоТарифамДействия()
	Если Объект.Расходы.Количество() > 0 Тогда
		флЕстьРучнойВвод = (Объект.Расходы.НайтиСтроки(Новый Структура("РучнойВвод", Истина)).Количество()>0);
		ТекстАнгл = "Tabular section will be cleared! Continue?";
		ТекстРус  = "Табличная часть будет очищена! Продолжить?";
		
		Если флЕстьРучнойВвод Тогда
			ТекстАнгл = ТекстАнгл + "
				|Yes - save manual input data, No - clear manual input data.";
			ТекстРус = ТекстРус + "
				|Да - сохранить строки с ручным вводом, Нет - удалить строки с ручным вводом.";
			РежимДиалога = РежимДиалогаВопрос.ДаНетОтмена;
		Иначе
			РежимДиалога = РежимДиалогаВопрос.ОКОтмена;
		КонецЕсли;
		
		ТекстНСТР = НСтр("en='" + ТекстАнгл + "'; ru='" + ТекстРус + "'");
		ПоказатьВопрос(Новый ОписаниеОповещения("РассчитатьПоТарифамОтвет", ЭтотОбъект), ТекстНСТР, РежимДиалога);
	Иначе
		РассчитатьПоТарифамЗавершение();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПоТарифамОтвет(Результат, ДопПараметры) Экспорт
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	флУдалитьРучнойВвод = (Результат = КодВозвратаДиалога.Нет);
	
	РассчитатьПоТарифамЗавершение(, флУдалитьРучнойВвод);
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПоТарифамЗавершение(флСообщение = Ложь, флУдалитьРучнойВвод = Ложь)
	
	Если флУдалитьРучнойВвод Тогда
		мсвСтрокиУдалить = Объект.Расходы.НайтиСтроки(Новый Структура("РучнойВвод", Истина));
		Для Каждого ТекСтрокаУдалить Из мсвСтрокиУдалить Цикл
			Объект.Расходы.Удалить(ТекСтрокаУдалить);
		КонецЦикла;
	КонецЕсли;
	
	ДопПараметры = Новый Структура("ЗаполнятьТЧРасходы", Ложь);
	СтруктураДокумента = уатОбщегоНазначенияКлиентСервер.СтруктураДокумента(Объект, "уатСтраховойСертификат_уэ", ДопПараметры);
	РассчитатьУслугиСервер(СтруктураДокумента);
	уатРасчетыПоТарифамКлиентСервер_уэ.ЗаполнитьДоходыРасходыИзСтруктуры(Объект, СтруктураДокумента, "Расходы", "уатСтраховойСертификат_уэ", Ложь, флСообщение);
	
	РассчитатьСуммуДокумента();
	ОбновитьВсегоВТЧРасходыСервер();
	ОбновитьПараметрВыработкиВременный();
	ВывестиСуммовыеИтогиДокумента();
	ОбновитьСтатусыГрузовСервер();
	ОбновитьНадписьИтоги();
	УстановитьУсловноеОформлениеПолейСтатусов();
	ОбновитьВсегоВТЧРасходы();
	Модифицированность = Истина;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура РассчитатьУслугиСервер(СтруктураДокумента)
	уатРасчетыПоТарифам_уэ.РассчитатьУслугиПоСтраховомуСертификату(СтруктураДокумента);
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЦеныИВалютуЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    РассчитатьСуммуДокумента();
	ОбновитьВсегоВТЧРасходыСервер();
	УстановитьВидимость();
	Модифицированность = Истина;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьВесоОбъемныеПоказателиСервер(Номенклатура, ЗаказНаТС, ЕдиницаИзмерения, ВесБрутто, Объем, КоличествоМест, СтоимостьГруза, Количество)
	УстановитьПривилегированныйРежим(Истина);
	Если ЗаказНаТС.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам Тогда
		СтрокаГруза = ЗаказНаТС.ГрузовойСостав.Найти(Номенклатура, "ГрузовоеМесто");
		Если НЕ СтрокаГруза = Неопределено Тогда 
			ВесБрутто      = СтрокаГруза.ВесБрутто * ?(СтрокаГруза.КоличествоМест = 0, 0, (Количество / СтрокаГруза.КоличествоМест));
			Объем          = СтрокаГруза.Объем * ?(СтрокаГруза.КоличествоМест = 0, 0, (Количество / СтрокаГруза.КоличествоМест));
			
			Если ТипЗнч(СтрокаГруза.ВидУпаковки) = Тип("СправочникСсылка.уатВидыУпаковки_уэ")
				ИЛИ ТипЗнч(СтрокаГруза.ВидУпаковки) = Тип("СправочникСсылка.ЕдиницыИзмерения") Тогда
				КоличествоМест = ?(СтрокаГруза.ВидУпаковки.Коэффициент = 0, 0, Количество / СтрокаГруза.ВидУпаковки.Коэффициент);
			Иначе
				КоличествоМест = 1;
			КонецЕсли;
			СтоимостьГруза = СтрокаГруза.Стоимость * ?(СтрокаГруза.КоличествоМест = 0, 0, (Количество / СтрокаГруза.КоличествоМест));
			
		КонецЕсли;
		
	ИначеЕсли ЗаказНаТС.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам Тогда
		СтрокиТовара = ЗаказНаТС.Товары.НайтиСтроки(Новый Структура("Номенклатура, ЕдиницаИзмерения", Номенклатура, ЕдиницаИзмерения));
		Если СтрокиТовара.Количество() Тогда 
			ВесБрутто      = СтрокиТовара[0].ВесБрутто * ?(СтрокиТовара[0].Количество = 0, 0, (Количество / СтрокиТовара[0].Количество));
			Объем          = СтрокиТовара[0].Объем * ?(СтрокиТовара[0].Количество = 0, 0, (Количество / СтрокиТовара[0].Количество));
			КоличествоМест = СтрокиТовара[0].КоличествоМест * ?(СтрокиТовара[0].Количество = 0, 0, (Количество / СтрокиТовара[0].Количество));
			СтоимостьГруза = (СтрокиТовара[0].Сумма + ?(ЗаказНаТС.СуммаВключаетНДС, 0, СтрокиТовара[0].СуммаНДС)) * ?(СтрокиТовара[0].Количество = 0, 0, (Количество / СтрокиТовара[0].Количество));
		КонецЕсли;
		
	ИначеЕсли ЗаказНаТС.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам Тогда 
		ВесБрутто      = ЗаказНаТС.ВесБрутто;
		Объем          = ЗаказНаТС.Объем;
		КоличествоМест = ЗаказНаТС.КоличествоМест;
		СтоимостьГруза = ЗаказНаТС.СтоимостьГруза;
		
	Иначе
		ВесБрутто      = 0;
		Объем          = 0;
		КоличествоМест = 0;
		СтоимостьГруза = 0;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура РасходыПриИзмененииВалюты()
	ТекСтрока = Элементы.Расходы.ТекущиеДанные;
	
	Если ТекСтрока.Валюта = ДанныеСтрокиРасходы.Валюта Тогда
		Возврат;
	КонецЕсли;
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ТекСтрока", ТекСтрока);
		
	Если ТекСтрока.Цена = 0 Тогда
		РасходыПриИзмененииВалютыЗавершение(КодВозвратаДиалога.Нет, ДопПараметры);
	Иначе
		Оповещ = Новый ОписаниеОповещения("РасходыПриИзмененииВалютыЗавершение", ЭтотОбъект, ДопПараметры);
		ТекстНстр = Нстр("ru = 'Изменилась валюта строки. Пересчитать стоимость груза по курсу?'");
		ПоказатьВопрос(Оповещ, ТекстНстр, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РасходыПриИзмененииВалютыЗавершение(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда //пересчет сумм в строке по курсу
		СтруктураКурсаПред = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ДанныеСтрокиРасходы.Валюта, Объект.ДатаКурса);
		СтруктураКурса = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ДопПараметры.ТекСтрока.Валюта, Объект.ДатаКурса);
				
		ДопПараметры.ТекСтрока.Цена = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ДопПараметры.ТекСтрока.Цена,
			ДанныеСтрокиРасходы.Валюта,
			ДопПараметры.ТекСтрока.Валюта,
			СтруктураКурсаПред.Курс,
			СтруктураКурса.Курс,
			СтруктураКурсаПред.Кратность,
			СтруктураКурса.Кратность);
		РассчитатьСуммуВСтрокеТабличнойЧасти(ДопПараметры.ТекСтрока);
		
		РассчитатьСуммуНДС(ДопПараметры.ТекСтрока);
		РассчитатьСуммуВсегоВстрокеТЧ(ДопПараметры.ТекСтрока);
	КонецЕсли;
	
	ОбновитьВсегоВТЧРасходыСервер();
	ОбновитьНадписьИтоги();
	
	ДанныеСтрокиРасходы.Валюта = ДопПараметры.ТекСтрока.Валюта;
	
	ДопПараметры.ТекСтрока.РучнойВвод = Истина;
	Модифицированность = Истина;	
КонецПроцедуры

&НаКлиенте
Процедура ГрузыПриИзмененииВалюты()
	ТекСтрока = Элементы.Грузы.ТекущиеДанные;
	
	Если ТекСтрока.Валюта = ДанныеСтрокиРасходы.Валюта Тогда
		Возврат;
	КонецЕсли;
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ТекСтрока", ТекСтрока);
		
	Если ТекСтрока.СтоимостьГруза = 0 Тогда
		ГрузыПриИзмененииВалютыЗавершение(КодВозвратаДиалога.Нет, ДопПараметры);
	Иначе
		Оповещение = Новый ОписаниеОповещения("ГрузыПриИзмененииВалютыЗавершение", ЭтотОбъект, ДопПараметры);
		ТекстНстр = Нстр("ru = 'Изменилась валюта строки. Пересчитать стоимость груза по курсу?'");
		ПоказатьВопрос(Оповещение, ТекстНстр, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГрузыПриИзмененииВалютыЗавершение(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда 
		СтруктураКурсаПред = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ДанныеСтрокиРасходы.Валюта, Объект.ДатаКурса);
		СтруктураКурса     = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ДопПараметры.ТекСтрока.Валюта, Объект.ДатаКурса);
				
		ДопПараметры.ТекСтрока.СтоимостьГруза = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ДопПараметры.ТекСтрока.СтоимостьГруза,
			ДанныеСтрокиРасходы.Валюта,
			ДопПараметры.ТекСтрока.Валюта,
			СтруктураКурсаПред.Курс,
			СтруктураКурса.Курс,
			СтруктураКурсаПред.Кратность,
			СтруктураКурса.Кратность);
	КонецЕсли;
	
	ДанныеСтрокиРасходы.Валюта = ДопПараметры.ТекСтрока.Валюта;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУслугиПоШаблонуСервер(Шаблон)
	ОсновнаяСтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
		ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнаяСтавкаНДС");
	
	Для Каждого ТекСтрока Из Шаблон.Услуги Цикл
		НоваяСтрока                = Объект.Расходы.Добавить();
		НоваяСтрока.Номенклатура   = ТекСтрока.Номенклатура;
		НоваяСтрока.Количество     = ТекСтрока.Количество;
		Если Объект.УчитыватьНДС Тогда
			Если ЗначениеЗаполнено(НоваяСтрока.Номенклатура.СтавкаНДС) Тогда
				НоваяСтрока.СтавкаНДС = НоваяСтрока.Номенклатура.СтавкаНДС;
			Иначе
				НоваяСтрока.СтавкаНДС = ОсновнаяСтавкаНДС;
			КонецЕсли;
		КонецЕсли;
		НоваяСтрока.СтатьяРасходов = уатОбщегоНазначенияСервер.СтатьяРасходовНоменклатуры(НоваяСтрока.Номенклатура);
		НоваяСтрока.Валюта         = Объект.ВалютаДокумента;
	КонецЦикла;
	
	ОбновитьПараметрВыработкиВременный();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиУведомленийЗакрытиеФормы(Результат, ДопПараметры) Экспорт
	Если ТипЗнч(Результат) = Тип("ДанныеФормыКоллекция") Тогда
		Объект.ПолучателиУведомлений.Очистить();
		Для Каждого ТекСтрока Из Результат Цикл
			НоваяСтрока = Объект.ПолучателиУведомлений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		КонецЦикла;
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти
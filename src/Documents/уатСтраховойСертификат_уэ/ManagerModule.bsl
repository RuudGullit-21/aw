#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатСтраховойСертификат_уэ";
	КомандаПечати.Идентификатор = "ЗаявкаНаСтрахованиеГруза";
	КомандаПечати.Представление = НСтр("ru='Заявка на страхование груза'");
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр).
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной
//                                                            параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной
//                                            параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если НЕ уатОбщегоНазначенияСервер.РазрешениеПечатиНепроведенногоДокумента(МассивОбъектов) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЗаявкаНаСтрахованиеГруза") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ЗаявкаНаСтрахованиеГруза",
		НСтр("ru='Заявка на страхование груза'"), ПечатьЗаявкаНаСтрахованиеГруза(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;

	
	уатОбщегоНазначенияСервер.УстановитьРедактированиеПечатныхФормДокумента(КоллекцияПечатныхФорм);
	уатУправлениеПечатью.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов, КоллекцияПечатныхФорм);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.Взаимодействия

// Возвращает контакты по предмету.
//
// Параметры:
//  Ссылка	 - СправочникСсылка	 - Ссылка на предмет-владелец контактов
// 
// Возвращаемое значение:
//  Массив - массив контактов
// 
Функция ПолучитьКонтакты(Ссылка) Экспорт
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПоКонтактам();
	Запрос.УстановитьПараметр("Предмет", Ссылка);
	
	НачатьТранзакцию();
	Попытка
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			Результат = Неопределено;
		Иначе
			Результат = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Контакт");
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Возвращает текст запроса по контактам взаимодействий, содержащимся в документе.
//
// Параметры:
//  ТекстВременнаяТаблица - Строка - Имя временной таблицы, в которую помещаются полученные данные.
//  Объединить  - Булево  - признак, указывающий на необходимость добавления конструкции ОБЪЕДИНИТЬ в запрос.
//
// Возвращаемое значение:
//   Строка   - сформированный текст запроса для получения контактов взаимодействий объекта.
//
Функция ТекстЗапросаПоКонтактам(ТекстВременнаяТаблица = "", Объединить = Ложь) Экспорт
	
	ШаблонВыбрать = ?(Объединить, "ВЫБРАТЬ РАЗЛИЧНЫЕ", "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ");
	
	ТекстЗапроса = "
	|%ШаблонВыбрать%
	|	уатСтраховойСертификат_уэ.Контрагент КАК Контакт " + ТекстВременнаяТаблица + "
	|ИЗ
	|	Документ.уатСтраховойСертификат_уэ КАК уатСтраховойСертификат_уэ
	|ГДЕ
	|	уатСтраховойСертификат_уэ.Ссылка = &Предмет
	|	И ТИПЗНАЧЕНИЯ(уатСтраховойСертификат_уэ.Контрагент) = ТИП(Справочник.Контрагенты)
	|	И НЕ уатСтраховойСертификат_уэ.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатСтраховойСертификат_уэ.Ответственный
	|ИЗ
	|	Документ.уатСтраховойСертификат_уэ КАК уатСтраховойСертификат_уэ
	|ГДЕ
	|	уатСтраховойСертификат_уэ.Ссылка = &Предмет
	|	И (НЕ уатСтраховойСертификат_уэ.Ответственный = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ШаблонВыбрать%", ШаблонВыбрать);
	
	Если Объединить Тогда
		
		ТекстЗапроса = "
		| ОБЪЕДИНИТЬ ВСЕ
		|" + ТекстЗапроса;
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Конец СтандартныеПодсистемы.Взаимодействия

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	Настройки.ПриПолученииСлужебныхРеквизитов = Ложь;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// Позволяет переопределить ограничение, указанное в модуле менеджера объекта метаданных.
//
// Параметры:
//  Ограничение - Структура:
//    * Текст                             - Строка - ограничение доступа для пользователей.
//                                          Если пустая строка, значит, доступ разрешен.
//    * ТекстДляВнешнихПользователей      - Строка - ограничение доступа для внешних пользователей.
//                                          Если пустая строка, значит, доступ запрещен.
//    * ПоВладельцуБезЗаписиКлючейДоступа - Неопределено - определить автоматически.
//                                        - Булево - если Ложь, то всегда записывать ключи доступа,
//                                          если Истина, тогда не записывать ключи доступа,
//                                          а использовать ключи доступа владельца (требуется,
//                                          чтобы ограничение было строго по объекту-владельцу).
//   * ПоВладельцуБезЗаписиКлючейДоступаДляВнешнихПользователей - Неопределено, Булево - также
//                                          как у параметра ПоВладельцуБезЗаписиКлючейДоступа.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Подразделение)";
	
	Ограничение.ТекстДляВнешнихПользователей = Ограничение.Текст;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// СтандартныеПодсистемы.ВариантыОтчетов

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВариантыОтчетов

// СтандартныеПодсистемы.ШаблоныСообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf",
//                           "png", "jpg", mxl" и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов 
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
	
КонецПроцедуры

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS.
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - СправочникСсылка - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма.
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт
	
	ТендерСсылка = Неопределено;
	
	Если ТипЗнч(ПредметСообщения) = Тип("ДокументСсылка.уатСтраховойСертификат_уэ") Тогда 
		ТендерСсылка = ПредметСообщения;
	ИначеЕсли ТипЗнч(ПредметСообщения) = Тип("Структура")
		И ПредметСообщения.Свойство("Предмет") И ТипЗнч(ПредметСообщения.Предмет) = Тип("ДокументСсылка.уатСтраховойСертификат_уэ") Тогда
		ТендерСсылка = ПредметСообщения.Предмет;
	КонецЕсли;
	
	Если ТендерСсылка = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Контрагент = ТендерСсылка.Контрагент;
	СписокАдресов = Документы.уатРассылкаЭлектронныхПисем_уэ.СформироватьСписокАдресов(Новый Структура("Контрагент, КонтактноеЛицо",Контрагент,Контрагент.ОсновноеКонтактноеЛицо));
	Если СписокАдресов.Количество() > 0 Тогда
		стрАдрес = СписокАдресов[0].Значение;
		Если Не стрАдрес.Количество() = 0 Тогда
			НовыйПолучатель = ПолучателиПисьма.Добавить();
			НовыйПолучатель.Адрес = стрАдрес.Представление;
			НовыйПолучатель.Представление = ?(стрАдрес.Объект = Контрагент,Строка(Контрагент),Строка(Контрагент.ОсновноеКонтактноеЛицо)) + " <" + стрАдрес.Представление + ">";
		КонецЕсли;
	КонецЕсли;
	
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ШаблоныСообщений

// СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

// Формирует печатную форму основного макета документа
//
// Параметры:
//  МассивОбъектов	 - 	 - 
//  ОбъектыПечати	 - 	 - 
//  ТипПФ			 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция ПечатьЗаявкаНаСтрахованиеГруза(МассивОбъектов, ОбъектыПечати) Экспорт
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.ИмяПараметровПечати = "ПараметрыПечати_ЗаявкаНаСтрахованиеГруза";
	
	ПервыйДокумент = Истина;
	
	тзПараметрыПечати = ПолучитьДанныеДляПечати(МассивОбъектов);
	
	Для Каждого ТекущийДокумент Из МассивОбъектов Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.уатСтраховойСертификат_уэ.ПФ_MXL_ЗаявкаНаСтрахованиеГруза");
		
		ПараметрыПечати = тзПараметрыПечати.НайтиСтроки(Новый Структура("Ссылка", ТекущийДокумент));
		Если ПараметрыПечати.Количество() = 0 Тогда
			Продолжить;
		КОнецЕсли;

		ОбластьЗаголовка           = "Заголовок";
		ОбластьРеквизитовЗаголовка = "ЗаголовокРеквизиты";
		ОбластьШапки               = "НоменклатураШапка";
		ОбластьСтроки              = "Номенклатура";
		ОбластьПодвал              = "ПодвалНоменклатура";
		
		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьЗаголовка);
		ОбластьМакета.Параметры.Заполнить(ПараметрыПечати[0]);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьРеквизитовЗаголовка);
		ОбластьМакета.Параметры.Заполнить(ПараметрыПечати[0]);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Вывести табличную часть
		Если ПараметрыПечати[0].Позиции.Количество() Тогда
			ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
			ОбластьМакета.Параметры.Заполнить(ПараметрыПечати[0]);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтроки);
			
			Для каждого ПараметрыПозиции Из ПараметрыПечати[0].Позиции Цикл
				ОбластьМакета.Параметры.Заполнить(ПараметрыПозиции);
				ТабличныйДокумент.Вывести(ОбластьМакета);
			КонецЦикла;
			
		КонецЕсли;
		

		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ТекущийДокумент);
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции 

// Функция возвращает таблицу выработки по документу
//  Структура таблицы: [Заказ, ПараметрВыработки, Количество]
//
// Параметры:
//  ДокументСсылка	 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция РассчитатьВыработкуПоЗаказам(ДокументСсылка) Экспорт
	// инициализация возвращаемой таблицы
	ТаблицаВыработка = Новый ТаблицаЗначений;
	ТаблицаВыработка.Колонки.Добавить("Заказ",				  Новый ОписаниеТипов("ДокументСсылка.уатЗаказГрузоотправителя"));
	ТаблицаВыработка.Колонки.Добавить("ПараметрВыработки",    Новый ОписаниеТипов("СправочникСсылка.уатПараметрыВыработки"));
	ТаблицаВыработка.Колонки.Добавить("Контрагент",			  Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
	ТаблицаВыработка.Колонки.Добавить("ВидПеревозки",		  Новый ОписаниеТипов("СправочникСсылка.уатВидыПеревозок"));
	ТаблицаВыработка.Колонки.Добавить("НаправлениеПеревозки", Новый ОписаниеТипов("СправочникСсылка.уатНаправленияПеревозок"));
	ТаблицаВыработка.Колонки.Добавить("Количество",           Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ТаблицаВыработка.Колонки.Добавить("СтоимостьГруза",       Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
	ТаблицаВыработка.Колонки.Добавить("ВалютаТоваров",        Новый ОписаниеТипов("СправочникСсылка.Валюты"));

	ОсновнойВидУпаковки = Справочники.уатВидыУпаковки_уэ.ПолучитьОсновнойВидУпаковки();
	табКоличествоУпаковокПоВидам = Новый ТаблицаЗначений();
	табКоличествоУпаковокПоВидам.Колонки.Добавить("Заказ", Новый ОписаниеТипов("ДокументСсылка.уатЗаказГрузоотправителя"));
	табКоличествоУпаковокПоВидам.Колонки.Добавить("ВидУпаковки", Новый ОписаниеТипов("СправочникСсылка.уатВидыУпаковки_уэ"));
	табКоличествоУпаковокПоВидам.Колонки.Добавить("Количество",  Новый ОписаниеТипов("Число"));

	Для Каждого ТекСтрока Из ДокументСсылка.Грузы Цикл
		Если ТекСтрока.Заказ.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам Тогда 
			Для Каждого СтрокаГруза Из ТекСтрока.Заказ.ГрузовойСостав Цикл
				НоваяСтрока = табКоличествоУпаковокПоВидам.Добавить();
				НоваяСтрока.Заказ = ТекСтрока.Заказ;
				НоваяСтрока.ВидУпаковки = СтрокаГруза.ВидУпаковки;
				НоваяСтрока.Количество = СтрокаГруза.КоличествоМест;
			КонецЦикла;
		
		ИначеЕсли ТипЗнч(ТекСтрока.ГрузовоеМесто) = Тип("СправочникСсылка.уатГрузовыеМеста_уэ") Тогда
			СтрокаГруза = ТекСтрока.Заказ.ГрузовойСостав.Найти(ТекСтрока.ГрузовоеМесто, "ГрузовоеМесто");
			Если СтрокаГруза <> Неопределено Тогда 
				НоваяСтрока = табКоличествоУпаковокПоВидам.Добавить();
				НоваяСтрока.Заказ = ТекСтрока.Заказ;
				НоваяСтрока.ВидУпаковки = СтрокаГруза.ВидУпаковки;
				НоваяСтрока.Количество = ТекСтрока.Количество;
			КонецЕсли;
			
		КонецЕсли;
		
		ДобавитьВыработку(ТаблицаВыработка, Справочники.уатПараметрыВыработки.ВесГруза, ТекСтрока.ВесБрутто, ТекСтрока.Заказ);
		// объем груза
		ДобавитьВыработку(ТаблицаВыработка, Справочники.уатПараметрыВыработки.Объем, ТекСтрока.Объем, ТекСтрока.Заказ);
		// количество упаковок
		ДобавитьВыработку(ТаблицаВыработка, Справочники.уатПараметрыВыработки.КоличествоУпаковок, ТекСтрока.КоличествоМест, ТекСтрока.Заказ);
		// стоимость груза
		ДобавитьВыработку(ТаблицаВыработка, Справочники.уатПараметрыВыработки.СтоимостьГруза, ТекСтрока.СтоимостьГруза, ТекСтрока.Заказ, ТекСтрока.Валюта);
	КонецЦикла;
	
	мсвЗаказы = Новый Массив;
	Для Каждого ТекЗаказ Из ДокументСсылка.Грузы Цикл
		Если мсвЗаказы.Найти(ТекЗаказ.Заказ) = Неопределено Тогда
			мсвЗаказы.Добавить(ТекЗаказ.Заказ);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекЗаказ Из мсвЗаказы Цикл
		// количество заказов
		ДобавитьВыработку(ТаблицаВыработка, Справочники.уатПараметрыВыработки.КоличествоЗаказов, 1, ТекЗаказ);
		
		//время
		ДобавитьВыработку(ТаблицаВыработка, Справочники.уатПараметрыВыработки.ВремяВРаботе, ТекЗаказ.Время, ТекЗаказ);
		// пробег с грузом
		ДобавитьВыработку(ТаблицаВыработка, Справочники.уатПараметрыВыработки.ПробегСГрузом, ТекЗаказ.Расстояние, ТекЗаказ);
		// пробег общий
		ДобавитьВыработку(ТаблицаВыработка, Справочники.уатПараметрыВыработки.ПробегОбщий, ТекЗаказ.Расстояние, ТекЗаказ);
		
		// Ночная доставка
		флНочнаяДоставка = уатРасчетыПоТарифам_уэ.ЭтоНочнаяДоставка(ТекЗаказ.ОтправлениеС, ТекЗаказ.ДоставкаПо, ДокументСсылка.Организация);
		Если флНочнаяДоставка Тогда
			ДобавитьВыработку(ТаблицаВыработка, Справочники.уатПараметрыВыработки.НочнаяДоставка, 1, ТекЗаказ);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ТаблицаВыработка;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура ДобавитьВыработку(ТаблицаВыработки, ПараметрВыработки, Количество, Заказ, ВалютаТоваров = Неопределено)
	
	Если НЕ ПараметрВыработки.ИспользоватьДляЗаказовИПотребности Тогда
		Возврат;
	КонецЕсли;
	
	стрПоиска = Новый Структура("Заказ, ПараметрВыработки", Заказ, ПараметрВыработки);
	
	мсвСтрокиПоиска = ТаблицаВыработки.НайтиСтроки(стрПоиска);
	ДобавлятьНовуюСтроку = (мсвСтрокиПоиска.Количество() = 0);
	
	Если ДобавлятьНовуюСтроку Тогда
		ТекСтрокаВыработки = ТаблицаВыработки.Добавить();
		ТекСтрокаВыработки.Заказ                = Заказ;
		ТекСтрокаВыработки.ПараметрВыработки    = ПараметрВыработки;
		ТекСтрокаВыработки.Контрагент           = ТекСтрокаВыработки.Заказ.Контрагент;
		ТекСтрокаВыработки.ВидПеревозки         = ТекСтрокаВыработки.Заказ.ВидПеревозки;
		ТекСтрокаВыработки.НаправлениеПеревозки = ТекСтрокаВыработки.Заказ.НаправлениеПеревозки;
	Иначе
		ТекСтрокаВыработки = мсвСтрокиПоиска[0];
	КонецЕсли;
	
	Если НЕ ПараметрВыработки = Справочники.уатПараметрыВыработки.СтоимостьГруза Тогда
		Если ПараметрВыработки.Временный Тогда
			ТекСтрокаВыработки.Количество = ТекСтрокаВыработки.Количество + уатОбщегоНазначения.уатВремяВСекунды(Количество);
		Иначе
			ТекСтрокаВыработки.Количество = ТекСтрокаВыработки.Количество + Количество;
		КонецЕсли;
	Иначе
		ТекСтрокаВыработки.СтоимостьГруза   = ТекСтрокаВыработки.СтоимостьГруза + Количество;
		ТекСтрокаВыработки.ВалютаТоваров    = ВалютаТоваров;
		ТекСтрокаВыработки.Количество       = 1;
	КонецЕсли;
	
КонецПроцедуры

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	
	СтруктураДополнительныеСвойства.Вставить("СообщенияОшибкиРаспределенияПоЗаказам", Новый Массив);
	
	СформироватьПредоставленныеУслуги(ДокументСсылка, СтруктураДополнительныеСвойства);
	СформироватьЗатратыТС(ДокументСсылка, СтруктураДополнительныеСвойства);
	
	// сообщение об ошибках распределения по Заказам
	Если СтруктураДополнительныеСвойства.СообщенияОшибкиРаспределенияПоЗаказам.Количество() > 0 Тогда
		ТекстНСТР = "Распределение услуг по Заказам не выполнено или выполнено частично: отсутствует выработка по Параметру"
			+ " распределения между вложенными Заказами (статья доходов/расходов - распределение между аналитиками)";
		уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР,,, СтатусСообщения.Внимание);
	КонецЕсли;
	
КонецПроцедуры // ИнициализироватьДанныеДокумента()

Процедура ВыполнитьКонтроль(ДокументСсылка, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь) Экспорт
	
КонецПроцедуры

// Функция подготавливает таблицу для проведения по регистру "уатПредоставленныеУслуги"
//
// Параметры:
//  ДокументСсылка					 - 	 - 
//  СтруктураДополнительныеСвойства	 - 	 - 
//
Процедура СформироватьПредоставленныеУслуги(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатСтраховойСертификат_уэРасходы.Ссылка.Дата КАК Период,
	|	уатСтраховойСертификат_уэРасходы.Ссылка КАК Регистратор,
	|	уатСтраховойСертификат_уэРасходы.Номенклатура КАК Номенклатура,
	|	уатСтраховойСертификат_уэРасходы.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА уатСтраховойСертификат_уэРасходы.Ссылка.УчитыватьНДС
	|				И НЕ уатСтраховойСертификат_уэРасходы.Ссылка.СуммаВключаетНДС
	|			ТОГДА уатСтраховойСертификат_уэРасходы.Сумма + уатСтраховойСертификат_уэРасходы.СуммаНДС
	|		ИНАЧЕ уатСтраховойСертификат_уэРасходы.Сумма
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР
	|		КОГДА уатСтраховойСертификат_уэРасходы.Ссылка.УчитыватьНДС
	|				И НЕ уатСтраховойСертификат_уэРасходы.Ссылка.СуммаВключаетНДС
	|			ТОГДА уатСтраховойСертификат_уэРасходы.Сумма + уатСтраховойСертификат_уэРасходы.СуммаНДС
	|		ИНАЧЕ уатСтраховойСертификат_уэРасходы.Сумма
	|	КОНЕЦ КАК СуммаРегл,
	|	ВЫБОР
	|		КОГДА уатСтраховойСертификат_уэРасходы.Ссылка.УчитыватьНДС
	|				И НЕ уатСтраховойСертификат_уэРасходы.Ссылка.СуммаВключаетНДС
	|			ТОГДА уатСтраховойСертификат_уэРасходы.Сумма + уатСтраховойСертификат_уэРасходы.СуммаНДС
	|		ИНАЧЕ уатСтраховойСертификат_уэРасходы.Сумма
	|	КОНЕЦ КАК СуммаУпр,
	|	уатСтраховойСертификат_уэРасходы.СуммаНДС КАК СуммаНДС,
	|	уатСтраховойСертификат_уэРасходы.СтавкаНДС КАК СтавкаНДС,
	|	уатСтраховойСертификат_уэРасходы.Ссылка.Организация КАК Организация,
	|	ЗНАЧЕНИЕ(Перечисление.уатПолучателиУслуг.НашаОрганизация) КАК ПолучательУслуг,
	|	уатСтраховойСертификат_уэРасходы.ЗаказНаТС КАК ЗаказГрузоотправителя,
	|	уатСтраховойСертификат_уэРасходы.ЗаказНаТС КАК Этап,
	|	уатСтраховойСертификат_уэРасходы.ЗаказНаТС КАК ЗаказНаТС,
	|	уатСтраховойСертификат_уэРасходы.Ссылка.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	уатСтраховойСертификат_уэРасходы.ЗаказНаТС.ОбъектСтроительства КАК ОбъектСтроительства,
	|	уатСтраховойСертификат_уэРасходы.ЗаказНаТС.Маршрут КАК Маршрут,
	|	уатСтраховойСертификат_уэРасходы.ЗаказНаТС.ВидПеревозки КАК ВидПеревозки,
	|	уатСтраховойСертификат_уэРасходы.ЗаказНаТС.НаправлениеПеревозки КАК НаправлениеПеревозки,
	|	уатСтраховойСертификат_уэРасходы.СтатьяРасходов КАК СтатьяРасходов,
	|	ВЫБОР
	|		КОГДА уатСтраховойСертификат_уэРасходы.Тариф.МетодРасчета = ЗНАЧЕНИЕ(Перечисление.уатМетодыРасчетаПоТарифам.ПроцентомОтСуммы)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.Наценка)
	|		ИНАЧЕ уатСтраховойСертификат_уэРасходы.Тариф.ПараметрВыработки
	|	КОНЕЦ КАК ПараметрВыработки,
	|	уатСтраховойСертификат_уэРасходы.Валюта КАК Валюта
	|ИЗ
	|	Документ.уатСтраховойСертификат_уэ.Расходы КАК уатСтраховойСертификат_уэРасходы
	|ГДЕ
	|	уатСтраховойСертификат_уэРасходы.Ссылка = &Ссылка
	|	И уатСтраховойСертификат_уэРасходы.Количество <> 0
	|	И уатСтраховойСертификат_уэРасходы.Сумма <> 0
	|	И уатСтраховойСертификат_уэРасходы.ЗаказНаТС <> &ПустойЗаказГрузоотправителя");
	Запрос.УстановитьПараметр("Ссылка"                     , ДокументСсылка);
	Запрос.УстановитьПараметр("ПустойЗаказГрузоотправителя", Документы.уатЗаказГрузоотправителя.ПустаяСсылка());
	
	ТаблицаДвижений = Запрос.Выполнить().Выгрузить();
	
	КэшКурсов = Неопределено;
	
	Для каждого ТекСтрока ИЗ ТаблицаДвижений Цикл
		Если ЗначениеЗаполнено(ТекСтрока.Валюта) Тогда
			ВалютаСтроки = ТекСтрока.Валюта;
			ДатаКурса = ?(ДокументСсылка.ДатаКурса = '00010101', ДокументСсылка.Дата, ДокументСсылка.ДатаКурса);
			СтруктураКурсаСтроки = СтруктураКурсаВалютыСтроки(ТекСтрока.Валюта, ДатаКурса, КэшКурсов);
		Иначе
			ВалютаСтроки = ДокументСсылка.ВалютаДокумента;
			СтруктураКурсаСтроки = Новый Структура("Курс, Кратность",
				СтруктураДополнительныеСвойства.КурсДокумента, СтруктураДополнительныеСвойства.КратностьДокумента);
		КонецЕсли;
		
		Если ВалютаСтроки <> СтруктураДополнительныеСвойства.ВалютаРеглУчета Тогда
			ТекСтрока.СуммаРегл = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаРегл,
				ВалютаСтроки,                   СтруктураДополнительныеСвойства.ВалютаРеглУчета,
				СтруктураКурсаСтроки.Курс,      СтруктураДополнительныеСвойства.КурсРегл,
				СтруктураКурсаСтроки.Кратность, СтруктураДополнительныеСвойства.КратностьРегл);
			ТекСтрока.СуммаНДС 	= уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаНДС,
				ВалютаСтроки,                   СтруктураДополнительныеСвойства.ВалютаРеглУчета,
				СтруктураКурсаСтроки.Курс,      СтруктураДополнительныеСвойства.КурсРегл,
				СтруктураКурсаСтроки.Кратность, СтруктураДополнительныеСвойства.КратностьРегл);
		КонецЕсли;
	КонецЦикла;
	
	уатРасчетыПоТарифам_уэ.РаспределитьДоходыРасходыМеждуЗаказами(ТаблицаДвижений, СтруктураДополнительныеСвойства.СообщенияОшибкиРаспределенияПоЗаказам);
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПредоставленныхУслуг", ТаблицаДвижений);
КонецПроцедуры

// Функция подготавливает таблицу для проведения по регистру "уатРасходы"
//
// Параметры:
//  ДокументСсылка					 - 	 - 
//  СтруктураДополнительныеСвойства	 - 	 - 
//
Процедура СформироватьЗатратыТС(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатСтраховойСертификат_уэ.Ссылка КАК Регистратор,
	|	уатСтраховойСертификат_уэ.Дата КАК Период,
	|	уатСтраховойСертификат_уэРасходы.ЗаказНаТС КАК Заказ,
	|	уатСтраховойСертификат_уэРасходы.ЗаказНаТС.Ответственный КАК Менеджер,
	|	уатСтраховойСертификат_уэРасходы.Номенклатура КАК Затрата,
	|	уатСтраховойСертификат_уэРасходы.Номенклатура КАК НоменклатураУслуги,
	|	уатСтраховойСертификат_уэ.Ссылка.Контрагент КАК Контрагент,
	|	уатСтраховойСертификат_уэ.Ссылка.ДоговорКонтрагента КАК Договор,
	|	уатСтраховойСертификат_уэ.Организация КАК Организация,
	|	уатЗаказГрузоотправителя.ОбъектСтроительства КАК ОбъектСтроительства,
	|	уатЗаказГрузоотправителя.Маршрут КАК Маршрут,
	|	уатЗаказГрузоотправителя.ВидПеревозки КАК ВидПеревозки,
	|	уатЗаказГрузоотправителя.НаправлениеПеревозки КАК НаправлениеПеревозки,
	|	ВЫБОР
	|		КОГДА уатСтраховойСертификат_уэРасходы.Тариф.МетодРасчета = ЗНАЧЕНИЕ(Перечисление.уатМетодыРасчетаПоТарифам.ПроцентомОтСуммы)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.Наценка)
	|		ИНАЧЕ уатСтраховойСертификат_уэРасходы.Тариф.ПараметрВыработки
	|	КОНЕЦ КАК ПараметрВыработки,
	|	уатСтраховойСертификат_уэРасходы.СтатьяРасходов КАК СтатьяРасходов,
	|	уатСтраховойСертификат_уэРасходы.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА уатСтраховойСертификат_уэ.УчитыватьНДС И НЕ уатСтраховойСертификат_уэ.СуммаВключаетНДС
	|			ТОГДА (уатСтраховойСертификат_уэРасходы.Сумма + уатСтраховойСертификат_уэРасходы.СуммаНДС)
	|		ИНАЧЕ уатСтраховойСертификат_уэРасходы.Сумма
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР
	|		КОГДА уатСтраховойСертификат_уэ.УчитыватьНДС И НЕ уатСтраховойСертификат_уэ.СуммаВключаетНДС
	|			ТОГДА (уатСтраховойСертификат_уэРасходы.Сумма + уатСтраховойСертификат_уэРасходы.СуммаНДС)
	|		ИНАЧЕ уатСтраховойСертификат_уэРасходы.Сумма
	|	КОНЕЦ КАК СуммаРегл,
	|	ВЫБОР
	|		КОГДА уатСтраховойСертификат_уэ.УчитыватьНДС И НЕ уатСтраховойСертификат_уэ.СуммаВключаетНДС
	|			ТОГДА (уатСтраховойСертификат_уэРасходы.Сумма + уатСтраховойСертификат_уэРасходы.СуммаНДС)
	|		ИНАЧЕ уатСтраховойСертификат_уэРасходы.Сумма
	|	КОНЕЦ КАК СуммаУпр,
	|	уатСтраховойСертификат_уэРасходы.СуммаНДС КАК СуммаНДС,
	|	уатСтраховойСертификат_уэРасходы.СуммаНДС КАК СуммаНДСУпр,
	|	уатСтраховойСертификат_уэРасходы.Валюта КАК Валюта
	|ИЗ
	|	Документ.уатСтраховойСертификат_уэ.Расходы КАК уатСтраховойСертификат_уэРасходы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатСтраховойСертификат_уэ КАК уатСтраховойСертификат_уэ
	|		ПО уатСтраховойСертификат_уэРасходы.Ссылка = уатСтраховойСертификат_уэ.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	|		ПО уатСтраховойСертификат_уэРасходы.ЗаказНаТС = уатЗаказГрузоотправителя.Ссылка
	|ГДЕ
	|	уатСтраховойСертификат_уэРасходы.Ссылка = &Ссылка
	|	И уатСтраховойСертификат_уэРасходы.ЗаказНаТС <> ЗНАЧЕНИЕ(Документ.уатЗаказГрузоотправителя.ПустаяСсылка)
	|	И уатСтраховойСертификат_уэРасходы.Количество <> 0
	|	И уатСтраховойСертификат_уэРасходы.Сумма <> 0");
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	ТаблицаРасходы = Запрос.Выполнить().Выгрузить();

	КэшКурсов = Неопределено;
	Для Каждого ТекСтрока Из ТаблицаРасходы Цикл
		Если ЗначениеЗаполнено(ТекСтрока.Валюта) Тогда
			ВалютаСтроки = ТекСтрока.Валюта;
			ДатаКурса = ?(ДокументСсылка.ДатаКурса = '00010101', ДокументСсылка.Дата, ДокументСсылка.ДатаКурса);
			СтруктураКурсаСтроки = СтруктураКурсаВалютыСтроки(ТекСтрока.Валюта, ДатаКурса, КэшКурсов);
		Иначе
			ВалютаСтроки = ДокументСсылка.ВалютаДокумента;
			СтруктураКурсаСтроки = Новый Структура("Курс, Кратность",
				СтруктураДополнительныеСвойства.КурсДокумента, СтруктураДополнительныеСвойства.КратностьДокумента);
		КонецЕсли;
		
		Если ВалютаСтроки <> СтруктураДополнительныеСвойства.ВалютаУпрУчета Тогда
			ТекСтрока.СуммаУпр = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаУпр,
				ВалютаСтроки,                   СтруктураДополнительныеСвойства.ВалютаУпрУчета,
				СтруктураКурсаСтроки.Курс,      СтруктураДополнительныеСвойства.КурсУпр,
				СтруктураКурсаСтроки.Кратность, СтруктураДополнительныеСвойства.КратностьУпр);
			ТекСтрока.СуммаНДСУпр 	= уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаНДСУпр,
				ВалютаСтроки,                   СтруктураДополнительныеСвойства.ВалютаУпрУчета,
				СтруктураКурсаСтроки.Курс,      СтруктураДополнительныеСвойства.КурсУпр,
				СтруктураКурсаСтроки.Кратность, СтруктураДополнительныеСвойства.КратностьУпр);
		КонецЕсли;
		Если ВалютаСтроки <> СтруктураДополнительныеСвойства.ВалютаРеглУчета Тогда
			ТекСтрока.СуммаРегл = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаРегл,
				ВалютаСтроки,                   СтруктураДополнительныеСвойства.ВалютаРеглУчета,
				СтруктураКурсаСтроки.Курс,      СтруктураДополнительныеСвойства.КурсРегл,
				СтруктураКурсаСтроки.Кратность, СтруктураДополнительныеСвойства.КратностьРегл);
			ТекСтрока.СуммаНДС 	= уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаНДС,
				ВалютаСтроки,                   СтруктураДополнительныеСвойства.ВалютаРеглУчета,
				СтруктураКурсаСтроки.Курс,      СтруктураДополнительныеСвойства.КурсРегл,
				СтруктураКурсаСтроки.Кратность, СтруктураДополнительныеСвойства.КратностьРегл);
		КонецЕсли;
	КонецЦикла;
	
	уатРасчетыПоТарифам_уэ.РаспределитьДоходыРасходыМеждуЗаказами(ТаблицаРасходы, СтруктураДополнительныеСвойства.СообщенияОшибкиРаспределенияПоЗаказам);
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРасходы", ТаблицаРасходы);
	
КонецПроцедуры

// Функция помещает в структуру все данные, отображаемые при печати документа.
// Вызывается из функции ПечатьОприходованияТоваров и из веб-приложения
//
// Возвращаемое значение:
//  Структура
//
Функция ПолучитьДанныеДляПечати(МассивОбъектов)
	
	тзПараметрыПечати = Новый ТаблицаЗначений();
	тзПараметрыПечати.Колонки.Добавить("Ссылка");
	тзПараметрыПечати.Колонки.Добавить("ТекстЗаголовка");
	тзПараметрыПечати.Колонки.Добавить("ПредставлениеОрганизации");
	тзПараметрыПечати.Колонки.Добавить("ПредставлениеСтраховщика");
	тзПараметрыПечати.Колонки.Добавить("Ответственный");
	тзПараметрыПечати.Колонки.Добавить("ПредставлениеДоговора");
	тзПараметрыПечати.Колонки.Добавить("ЕдиницаИзмеренияВес");
	тзПараметрыПечати.Колонки.Добавить("ЕдиницаИзмеренияОбъем");
	тзПараметрыПечати.Колонки.Добавить("ЕдиницаИзмеренияМеста");
	тзПараметрыПечати.Колонки.Добавить("Позиции");
	тзПараметрыПечати.Колонки.Добавить("КоличествоНаименований");
	тзПараметрыПечати.Колонки.Добавить("ПеревезеноВес");
	тзПараметрыПечати.Колонки.Добавить("ПеревезеноОбъем");
	тзПараметрыПечати.Колонки.Добавить("ПеревезеноКолМест");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивОбъектов", МассивОбъектов);

	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатСтраховойСертификат_уэ.Номер КАК Номер,
	|	уатСтраховойСертификат_уэ.Дата КАК Дата,
	|	уатСтраховойСертификат_уэ.Организация КАК Организация,
	|	уатСтраховойСертификат_уэ.Ответственный КАК Ответственный,
	|	уатСтраховойСертификат_уэ.Ссылка КАК Ссылка,
	|	уатСтраховойСертификат_уэ.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	уатСтраховойСертификат_уэ.Контрагент КАК Контрагент,
	|	уатСтраховойСертификат_уэ.ВесБрутто КАК Вес,
	|	уатСтраховойСертификат_уэ.КоличествоМест КАК КоличествоМест,
	|	уатСтраховойСертификат_уэ.Объем КАК Объем
	|ИЗ
	|	Документ.уатСтраховойСертификат_уэ КАК уатСтраховойСертификат_уэ
	|ГДЕ
	|	уатСтраховойСертификат_уэ.Ссылка В(&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатСтраховойСертификат_уэ.НомерСтроки КАК НомерСтроки,
	|	уатСтраховойСертификат_уэ.ЗаказНаТС КАК Заказ,
	|	уатСтраховойСертификат_уэ.Номенклатура КАК Номенклатура,
	|	уатСтраховойСертификат_уэ.Количество КАК Количество,
	|	уатСтраховойСертификат_уэ.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	уатСтраховойСертификат_уэ.ВесБрутто КАК Вес,
	|	уатЕдиницаИзмеренияВеса.Значение КАК ЕдиницаИзмеренияВес,
	|	уатСтраховойСертификат_уэ.Объем КАК Объем,
	|	уатЕдиницаИзмеренияОбъема.Значение КАК ЕдиницаИзмеренияОбъем,
	|	уатСтраховойСертификат_уэ.КоличествоМест КАК КоличествоМест,
	|	уатСтраховойСертификат_уэ.ЕдиницаИзмерения КАК ЕдиницаИзмеренияМеста,
	|	уатСтраховойСертификат_уэ.Ссылка КАК Ссылка,
	|	уатСтраховойСертификат_уэ.Ссылка.Номер КАК Номер,
	|	уатСтраховойСертификат_уэ.Номенклатура КАК НоменклатураНаименование,
	|	уатСтраховойСертификат_уэ.СтоимостьГруза КАК Сумма,
	|	уатСтраховойСертификат_уэ.Валюта КАК ВалютаДокумента
	|ПОМЕСТИТЬ втТовары
	|ИЗ
	|	Документ.уатСтраховойСертификат_уэ.Грузы КАК уатСтраховойСертификат_уэ,
	|	Константа.уатЕдиницаИзмеренияВеса КАК уатЕдиницаИзмеренияВеса,
	|	Константа.уатЕдиницаИзмеренияОбъема КАК уатЕдиницаИзмеренияОбъема
	|ГДЕ
	|	уатСтраховойСертификат_уэ.Ссылка В(&МассивОбъектов)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втТовары.НоменклатураНаименование КАК Номенклатура,
	|	втТовары.Количество КАК Количество,
	|	втТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	втТовары.Вес КАК Вес,
	|	втТовары.ЕдиницаИзмеренияВес КАК ЕдиницаИзмеренияВес,
	|	втТовары.Объем КАК Объем,
	|	втТовары.ЕдиницаИзмеренияОбъем КАК ЕдиницаИзмеренияОбъем,
	|	втТовары.КоличествоМест КАК КоличествоМест,
	|	втТовары.ЕдиницаИзмеренияМеста КАК ЕдиницаИзмеренияМеста,
	|	втТовары.Ссылка КАК Ссылка,
	|	втТовары.Сумма КАК Стоимость,
	|	втТовары.ВалютаДокумента КАК Валюта,
	|	втТовары.Заказ КАК Заказ,
	|	втТовары.НомерСтроки КАК НомерСтроки
	|ИЗ
	|	втТовары КАК втТовары";

	НаборРезультатов = Запрос.ВыполнитьПакет();
	
	ВыборкаЗаголовок     = НаборРезультатов[0].Выбрать();
	ВыборкаНоменклатура  = НаборРезультатов[2].Выгрузить();
	
	Пока ВыборкаЗаголовок.Следующий() Цикл
		
		ПараметрыПечати = тзПараметрыПечати.Добавить();
		ПараметрыПечати.Ссылка                    = ВыборкаЗаголовок.Ссылка;
		ПараметрыПечати.ТекстЗаголовка            = уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ВыборкаЗаголовок, НСтр("ru='Заявка на страхование груза'"));
		ПараметрыПечати.ПредставлениеОрганизации  = уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(
					уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(ВыборкаЗаголовок.Организация, ВыборкаЗаголовок.Дата), "НаименованиеДляПечатныхФорм,");
		ПараметрыПечати.ПредставлениеСтраховщика  = ВыборкаЗаголовок.Контрагент;
		ПараметрыПечати.Ответственный             = ВыборкаЗаголовок.Ответственный;
		ПараметрыПечати.ПредставлениеДоговора     = ВыборкаЗаголовок.ДоговорКонтрагента;
		
		// Вывести табличную часть
		Позиции = Новый Массив();
		
		КоличествоНаименований = 0;
		ПеревезеноВес          = 0;
		ПеревезеноОбъем        = 0;
		ПеревезеноКолМест	   = 0;
		ЕдиницаИзмеренияВес    = Константы.уатЕдиницаИзмеренияВеса.Получить();
		ЕдиницаИзмеренияОбъем  = Константы.уатЕдиницаИзмеренияОбъема.Получить();
		ЕдиницаИзмеренияМеста  = Справочники.уатВидыУпаковки_уэ.ПолучитьОсновнойВидУпаковки().КраткоеНаименование;
		

		ТекДокумент = ВыборкаНоменклатура.НайтиСтроки(Новый Структура("Ссылка", ВыборкаЗаголовок.Ссылка));
		Для Каждого ТекСтрока Из ТекДокумент Цикл
			ПараметрыПозиции = Новый Структура();
			ПараметрыПозиции.Вставить("Ссылка"					, ТекСтрока.Ссылка);
			ПараметрыПозиции.Вставить("Заказ"					, ТекСтрока.Заказ);
			ПараметрыПозиции.Вставить("Номенклатура"			, ТекСтрока.Номенклатура);
			ПараметрыПозиции.Вставить("НомерСтроки"				, ТекСтрока.НомерСтроки);
			ПараметрыПозиции.Вставить("Количество"				, ТекСтрока.Количество);
			ПараметрыПозиции.Вставить("ЕдиницаИзмерения"		, ТекСтрока.ЕдиницаИзмерения);
			ПараметрыПозиции.Вставить("Вес"						, ТекСтрока.Вес);
			ПараметрыПозиции.Вставить("Объем"					, ТекСтрока.Объем);
			ПараметрыПозиции.Вставить("КоличествоМест"			, ТекСтрока.КоличествоМест);
			ПараметрыПозиции.Вставить("Стоимость"				, ТекСтрока.Стоимость);
			ПараметрыПозиции.Вставить("Валюта"					, ТекСтрока.Валюта);
			
			Позиции.Добавить(ПараметрыПозиции);
			КоличествоНаименований = КоличествоНаименований + 1;
		КонецЦикла;
		
		ПеревезеноВес          = ВыборкаЗаголовок.Вес;
		ПеревезеноОбъем        = ВыборкаЗаголовок.Объем;
		ПеревезеноКолМест      = ВыборкаЗаголовок.КоличествоМест;
		
		ПараметрыПечати.Позиции = Позиции;
		ПараметрыПечати.Позиции = Позиции;
		ПараметрыПечати.ЕдиницаИзмеренияВес    = "(" + ЕдиницаИзмеренияВес +")";
		ПараметрыПечати.ЕдиницаИзмеренияОбъем  = "(" + ЕдиницаИзмеренияОбъем +")";
		ПараметрыПечати.ЕдиницаИзмеренияМеста  = ЕдиницаИзмеренияМеста;
		ПараметрыПечати.КоличествоНаименований = ?(КоличествоНаименований = 0, "", КоличествоНаименований);
		ПараметрыПечати.ПеревезеноВес          = ?(ПеревезеноВес = 0, "", Формат(ПеревезеноВес, "ЧДЦ=3") + " " + ЕдиницаИзмеренияВес);
		ПараметрыПечати.ПеревезеноОбъем        = ?(ПеревезеноОбъем = 0, "", Формат(ПеревезеноОбъем, "ЧДЦ=3") + " " + ЕдиницаИзмеренияОбъем);
		ПараметрыПечати.ПеревезеноКолМест      = ?(ПеревезеноКолМест = 0, "", Формат(ПеревезеноКолМест, "ЧДЦ=3") + " " + ЕдиницаИзмеренияМеста);
		
	КонецЦикла;
	
	Возврат тзПараметрыПечати;

КонецФункции //ПолучитьДанныеДляПечатиОприходованияТоваров()

Функция СтруктураКурсаВалютыСтроки(Валюта, ДатаКурса, КэшКурсов = Неопределено)
	// Кеширование используется для исключения повторного получения курса для одной и той же валюты
	Если КэшКурсов = Неопределено Тогда
		КэшКурсов = Новый Соответствие;
	КонецЕсли;
	
	СтруктураКурсаСтроки = КэшКурсов.Получить(Валюта);
	Если СтруктураКурсаСтроки = Неопределено Тогда
		СтруктураКурсаСтроки = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(Валюта, ДатаКурса);
		КэшКурсов.Вставить(Валюта, СтруктураКурсаСтроки);
	КонецЕсли;
	
	Возврат СтруктураКурсаСтроки;
КонецФункции

// Процедура - Заполнить структуру получателей печатных форм
//
// Параметры:
//  СтруктураДанныхОбъектаПечати - Структура - Структура данных получателей печатной формы
//
Процедура ЗаполнитьСтруктуруПолучателейПечатныхФорм(СтруктураДанныхОбъектаПечати) Экспорт
	
	СтруктураДанныхОбъектаПечати.ОсновнойПолучатель = "Контрагент";
	 
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Контрагент");
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("КонтактноеЛицо");
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Грузоотправитель");
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Грузополучатель");
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
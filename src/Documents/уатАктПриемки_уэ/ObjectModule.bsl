
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	РазделятьПланФакт = ПолучитьФункциональнуюОпцию("уатРазделятьПланФактВСкладскихАктах_уэ");
	ИспользоватьУведомления = ПолучитьФункциональнуюОпцию("уатИспользоватьУведомления_уэ");
	
	// Расхождения между плановыми и фактическими данными
	ОбнаруженыРасхождения = Ложь;
	мсвСтрокиСРасхождениемПланаФакта = Новый Массив;
	Если Не Отказ И РежимЗаписи = РежимЗаписиДокумента.Проведение 
		И ЭтотОбъект.ОперацияВыполнена И РазделятьПланФакт Тогда
		
		Для Сч = 0 По Грузы.Количество()-1 Цикл
			ТекСтрока = Грузы[Сч];
			Если ТекСтрока.ВесБрутто = ТекСтрока.ВесБруттоПлан 
				И ТекСтрока.Количество = ТекСтрока.КоличествоПлан
				И ТекСтрока.КоличествоМест = ТекСтрока.КоличествоМестПлан
				И ТекСтрока.Объем = ТекСтрока.ОбъемПлан Тогда
				// Расхождений между плановыми и фактическими данными нет
				Продолжить;
			КонецЕсли;
			
			Если Ссылка.ОперацияВыполнена И Ссылка.Грузы.Количество() = Грузы.Количество() Тогда
				// Если эти же расхождения есть в сохраненной в базе версии документа, то уведомление формировать повторно не нужно.
				// Повторно устанавливат флаг ЕстьРасхождения тоже не нужно.
				СохраненнаяСтрока = Ссылка.Грузы[Сч];
				Если ТекСтрока.ВесБрутто <> СохраненнаяСтрока.ВесБрутто
					Или ТекСтрока.ВесБруттоПлан <> СохраненнаяСтрока.ВесБруттоПлан
					Или ТекСтрока.Количество <> СохраненнаяСтрока.Количество
					Или ТекСтрока.КоличествоПлан <> СохраненнаяСтрока.КоличествоПлан
					Или ТекСтрока.КоличествоМест <> СохраненнаяСтрока.КоличествоМест
					Или ТекСтрока.КоличествоМестПлан <> СохраненнаяСтрока.КоличествоМестПлан
					Или ТекСтрока.Объем <> СохраненнаяСтрока.Объем
					Или ТекСтрока.ОбъемПлан <> СохраненнаяСтрока.ОбъемПлан Тогда
					мсвСтрокиСРасхождениемПланаФакта.Добавить(ТекСтрока);
				КонецЕсли;
			Иначе
				мсвСтрокиСРасхождениемПланаФакта.Добавить(ТекСтрока);
			КонецЕсли;
		КонецЦикла;
		ОбнаруженыРасхождения = мсвСтрокиСРасхождениемПланаФакта.Количество() > 0;
	КонецЕсли;
	
	УстанавливатьФлагЕстьРасхождения = Не ДополнительныеСвойства.Свойство("НеУстанавливатьФлагЕстьРасхождения")
		Или Не ДополнительныеСвойства.НеУстанавливатьФлагЕстьРасхождения;
		
	Если ОбнаруженыРасхождения И УстанавливатьФлагЕстьРасхождения Тогда
		// Этот акт
		ЭтотОбъект.ЕстьРасхождения = Истина;
		
		// Маршрутный лист
		Если ЗначениеЗаполнено(ЭтотОбъект.МаршрутныйЛист)
			И Не ЭтотОбъект.МаршрутныйЛист.ЕстьРасхождения Тогда
			МаршрутныйЛистОбъект = ЭтотОбъект.МаршрутныйЛист.ПолучитьОбъект();
			МаршрутныйЛистОбъект.ЕстьРасхождения = Истина;
			// Устанавливается один флаг, который ни на что не влияет. Не требуется выполнять обработчики записи/проведения.
			МаршрутныйЛистОбъект.ОбменДанными.Загрузка = Истина;
			МаршрутныйЛистОбъект.Записать();
		КонецЕсли;
		
		// Заказы на ТС, в которых обнаружены новые расхождения
		ЗаказыСРасхождениями = Новый Массив();
		Для Каждого ТекСтрока Из мсвСтрокиСРасхождениемПланаФакта Цикл
			ЗаказыСРасхождениями.Добавить(ТекСтрока.Заказ);
		КонецЦикла;
		уатОбщегоНазначения_уэ.УстановитьФлагЕстьРасхожденияВЗаказахНаТС(ЗаказыСРасхождениями);
	КонецЕсли;
	
	// Уведомления
	Если Не Отказ И Не ПометкаУдаления И ИспользоватьУведомления Тогда
		// Заполнение ТЧ "Получатели уведомлений"
		Если Модифицированность() Тогда
			тблПолучатели = уатОбщегоНазначения_уэ.СформироватьСписокПолучателейУведомлений(ЭтотОбъект);
			ПолучателиУведомлений.Загрузить(тблПолучатели);
		КонецЕсли;
		
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			// Отслеживаем событие "Изменение статуса"
			флИзменениеСтатуса = Ссылка.Пустая() Или Ссылка.СтатусВыполнения <> СтатусВыполнения;
			ДополнительныеСвойства.Вставить("флИзменениеСтатуса", флИзменениеСтатуса);
			
			// Отслеживаем событие "Расхождения по складскому акту"
			ДополнительныеСвойства.Вставить("мсвСтрокиСРасхождениемПланаФакта", мсвСтрокиСРасхождениемПланаФакта);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	// Уведомления
	Если ДополнительныеСвойства.Свойство("флИзменениеСтатуса") И ДополнительныеСвойства.флИзменениеСтатуса Тогда
		уатОбщегоНазначения_уэ.СформироватьУведомление(Ссылка, Перечисления.уатТипыСобытийДляУведомления_уэ.ИзменениеСтатуса);
	КонецЕсли;
	Если ДополнительныеСвойства.Свойство("мсвСтрокиСРасхождениемПланаФакта") 
		И ДополнительныеСвойства.мсвСтрокиСРасхождениемПланаФакта.Количество() > 0 Тогда
		Для Каждого ТекСтрока Из ДополнительныеСвойства.мсвСтрокиСРасхождениемПланаФакта Цикл
			ДополнительныеПараметрыСобытия = Новый Структура;
			ДополнительныеПараметрыСобытия.Вставить("ДополнительныйДокумент", ТекСтрока.Заказ);
			ДополнительныеПараметрыСобытия.Вставить("ГрузовоеМесто", ТекСтрока.ГрузовоеМесто);
						
			уатОбщегоНазначения_уэ.СформироватьУведомление(Ссылка,
				Перечисления.уатТипыСобытийДляУведомления_уэ.РасхожденияПоСкладскомуАкту,
				ДополнительныеПараметрыСобытия
			);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	// Инициализация дополнительных свойств для проведения документа.
	уатПроведение.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	Документы.уатАктПриемки_уэ.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	уатПроведение.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	Если ЭтотОбъект.ОперацияВыполнена Тогда
		уатПроведение_уэ.ОтразитьСтатусыГрузов(ДополнительныеСвойства, Движения, Отказ);
		Если ВидОперации = Перечисления.уатВидыОперацийАктПриемки_уэ.ОтГрузоотправителя
			Или ВидОперации = Перечисления.уатВидыОперацийАктПриемки_уэ.ИзРейса
			Или ВидОперации = Перечисления.уатВидыОперацийАктПриемки_уэ.ПрочееПоступление Тогда
			уатПроведение_уэ.ОтразитьОстаткиГрузовНаСкладеКомплектации(ДополнительныеСвойства, Движения, Отказ);
			уатПроведение_уэ.ОтразитьСкладскоеХранениеГрузов(ДополнительныеСвойства, Движения, Отказ);
		КонецЕсли;
		Если ВидОперации = Перечисления.уатВидыОперацийАктПриемки_уэ.ИзРейсаВПункте
			Или ВидОперации = Перечисления.уатВидыОперацийАктПриемки_уэ.ПрочееСписаниеИзРейса Тогда
			уатПроведение_уэ.ОтразитьОстаткиГрузовВКонтейнерах(ДополнительныеСвойства, Движения, Отказ);
		КонецЕсли;
		Если ВидОперации = Перечисления.уатВидыОперацийАктПриемки_уэ.ИзРейсаВПункте
			Или ВидОперации = Перечисления.уатВидыОперацийАктПриемки_уэ.ИзРейса
			Или ВидОперации = Перечисления.уатВидыОперацийАктПриемки_уэ.ПрочееСписаниеИзРейса Тогда
			уатПроведение_уэ.ОтразитьГрузыВРейсах(ДополнительныеСвойства, Движения, Отказ);
		КонецЕсли;
	КонецЕсли;
	
	уатПроведение.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	Документы.уатАктПриемки_уэ.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа
	уатПроведение.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	уатПроведение.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	уатПроведение.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль
	Документы.уатАктПриемки_уэ.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ, Истина);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	//Заголовок = уатОбщегоНазначенияТиповые.уатПредставлениеДокументаПриПроведении(ЭтотОбъект);
	
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийАктПриемки_уэ.ИзРейса")
		Или ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийАктПриемки_уэ.ИзРейсаВПункте")
		Или ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийАктПриемки_уэ.ПрочееСписаниеИзРейса")Тогда
		ПроверяемыеРеквизиты.Добавить("МаршрутныйЛист");
	КонецЕсли;
	
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийАктПриемки_уэ.ИзРейсаВПункте") 
		Или ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийАктПриемки_уэ.ПрочееСписаниеИзРейса") Тогда
		ИндексУдаляемого = ПроверяемыеРеквизиты.Найти("Склад");
	Иначе
		ИндексУдаляемого = ПроверяемыеРеквизиты.Найти("Пункт");
	КонецЕсли; 
	Если Не ИндексУдаляемого = Неопределено Тогда 
		ПроверяемыеРеквизиты.Удалить(ИндексУдаляемого);
	КонецЕсли;
	
	Если ОперацияВыполнена Тогда
		ПроверяемыеРеквизиты.Добавить("НачалоОперации");
		ПроверяемыеРеквизиты.Добавить("ОкончаниеОперации");
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	
	уатОбщегоНазначенияСервер.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") Тогда
		Если ДанныеЗаполнения.Мультимодальный И (Не ДанныеЗаполнения.ЭтоЭтап 
			Или Не ЗначениеЗаполнено(ДанныеЗаполнения.РодительскийЗаказ)) Тогда 
			Возврат;
		КонецЕсли;
		
		Дата        = ТекущаяДата();
		ВидОперации = Перечисления.уатВидыОперацийАктПриемки_уэ.ОтГрузоотправителя;
		Организация = ДанныеЗаполнения.Организация;
		
		// формируем временную таблицу заказов в зависимости то детализации заказа
		Если ДанныеЗаполнения.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам Тогда
			ТаблицаЗаказы = ДанныеЗаполнения.Товары.Выгрузить().Скопировать();
			ТаблицаЗаказы.Очистить();
			НоваяСтрока = ТаблицаЗаказы.Добавить();
			НоваяСтрока.Количество = 1;
		ИначеЕсли ДанныеЗаполнения.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам Тогда
			ТаблицаЗаказы = ДанныеЗаполнения.ГрузовойСостав.Выгрузить().Скопировать();
			ТаблицаЗаказы.Колонки.КоличествоМест.Имя = "Количество";
			//ТаблицаЗаказы.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
			ТаблицаЗаказы.Колонки.ВидУпаковки.Имя = "ЕдиницаИзмерения";
			//ТаблицаЗаказы.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
		Иначе
			ТаблицаЗаказы = ДанныеЗаполнения.Товары.Выгрузить().Скопировать();
			ТаблицаЗаказы.Колонки.Удалить("ГрузовоеМесто");
			ТаблицаЗаказы.Колонки.Номенклатура.Имя = "ГрузовоеМесто"
		КонецЕсли;
		ТаблицаЗаказы.Колонки.Добавить("ЗаказГрузоотправителя", Новый ОписаниеТипов("ДокументСсылка.уатЗаказГрузоотправителя"));
		ТаблицаЗаказы.ЗаполнитьЗначения(ДанныеЗаполнения, "ЗаказГрузоотправителя");
		ТаблицаЗаказы.Свернуть("ЗаказГрузоотправителя, ГрузовоеМесто, ЕдиницаИзмерения", "Количество");
				
		// Запрос возвращает грузы, еще не поступившие по указанному заказу
		// склад не учитываем, поскольку количество и состав складов могут отличаться от указанного в заказе
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТаблицаЗаказы.ЗаказГрузоотправителя,
		|	ТаблицаЗаказы.ГрузовоеМесто,
		|	ТаблицаЗаказы.ЕдиницаИзмерения,
		|	ТаблицаЗаказы.Количество
		|ПОМЕСТИТЬ уатЗаказы
		|ИЗ
		|	&ТаблицаЗаказы КАК ТаблицаЗаказы
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатЗаказыГрузоотправителейОстаткиИОбороты.ГрузовоеМесто,
		|	уатЗаказыГрузоотправителейОстаткиИОбороты.ЕдиницаИзмерения,
		|	уатЗаказыГрузоотправителейОстаткиИОбороты.Количество КАК КоличествоЗаказ,
		|	ЕСТЬNULL(уатОстаткиГрузовНаСкладеКомплектации_уэОстаткиИОбороты.КоличествоПриход, 0) КАК КоличествоАктыПоступления,
		|	(уатЗаказыГрузоотправителейОстаткиИОбороты.Количество - ЕСТЬNULL(уатОстаткиГрузовНаСкладеКомплектации_уэОстаткиИОбороты.КоличествоПриход, 0)) > 0 КАК ГрузНеПоступилНаСклад
		|ИЗ
		|	уатЗаказы КАК уатЗаказыГрузоотправителейОстаткиИОбороты
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.уатОстаткиГрузовНаСкладеКомплектации_уэ.ОстаткиИОбороты(, , , , ЗаказГрузоотправителя = &Заказ) КАК уатОстаткиГрузовНаСкладеКомплектации_уэОстаткиИОбороты
		|		ПО уатЗаказыГрузоотправителейОстаткиИОбороты.ЗаказГрузоотправителя = уатОстаткиГрузовНаСкладеКомплектации_уэОстаткиИОбороты.ЗаказГрузоотправителя
		|			И (уатЗаказыГрузоотправителейОстаткиИОбороты.ГрузовоеМесто = уатОстаткиГрузовНаСкладеКомплектации_уэОстаткиИОбороты.ГрузовоеМесто
		|				ИЛИ &ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам))");
		Запрос.УстановитьПараметр("Заказ", ДанныеЗаполнения);
		Запрос.УстановитьПараметр("ДетализацияЗакрытия", ДанныеЗаполнения.ДетализацияЗакрытия);
		Запрос.УстановитьПараметр("ТаблицаЗаказы", ТаблицаЗаказы);
		тблНепоступившиеГрузы = Запрос.Выполнить().Выгрузить();
		флВсеГрузыНаСкладе = (тблНепоступившиеГрузы.Найти(Истина, "ГрузНеПоступилНаСклад") = Неопределено);
			
		// определение склада
		Если ДанныеЗаполнения.ВидДоставки = Перечисления.уатВидыДоставки_уэ.СкладДверь Тогда
			Склад = ДанныеЗаполнения.Грузоотправитель;
		ИначеЕсли ДанныеЗаполнения.ВидДоставки = Перечисления.уатВидыДоставки_уэ.ДверьСклад Тогда
			Склад = ДанныеЗаполнения.Грузополучатель;
		ИначеЕсли ДанныеЗаполнения.ВидДоставки = Перечисления.уатВидыДоставки_уэ.СкладСклад Тогда
			Если флВсеГрузыНаСкладе Тогда
				Склад = ДанныеЗаполнения.Грузополучатель;
			Иначе
				Склад = ДанныеЗаполнения.Грузоотправитель;
			КонецЕсли;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Склад) Тогда
			ТекПользователь = ПользователиКлиентСервер.АвторизованныйПользователь();
			Склад = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ТекПользователь, "ОсновнойСклад")
		КонецЕсли;
		
		// заполнение ТЧ Грузы еще не поступившими грузами
		Если НЕ флВсеГрузыНаСкладе Тогда
			Если ДанныеЗаполнения.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам Тогда
				НоваяСтрока            = Грузы.Добавить();
				НоваяСтрока.Заказ      = ДанныеЗаполнения;
				Если ПолучитьФункциональнуюОпцию("уатРазделятьПланФактВСкладскихАктах_уэ") Тогда
					НоваяСтрока.КоличествоПлан = 1;
				Иначе
					НоваяСтрока.Количество = 1;
				КонецЕсли;
			Иначе
				Для Каждого ТекСтрокаОперации Из тблНепоступившиеГрузы Цикл
					Если ТекСтрокаОперации.ГрузНеПоступилНаСклад Тогда
						НоваяСтрока                  = Грузы.Добавить();
						НоваяСтрока.Заказ            = ДанныеЗаполнения;
						НоваяСтрока.ГрузовоеМесто    = ТекСтрокаОперации.ГрузовоеМесто;
						НоваяСтрока.ЕдиницаИзмерения = ТекСтрокаОперации.ЕдиницаИзмерения;
						Если ПолучитьФункциональнуюОпцию("уатРазделятьПланФактВСкладскихАктах_уэ") Тогда
							НоваяСтрока.КоличествоПлан = ТекСтрокаОперации.КоличествоЗаказ - ТекСтрокаОперации.КоличествоАктыПоступления;
						Иначе
							НоваяСтрока.Количество = ТекСтрокаОперации.КоличествоЗаказ - ТекСтрокаОперации.КоличествоАктыПоступления;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		// для Склад-Склад если все грузы поступили, то вводим еще раз всё количество груза
		Если флВсеГрузыНаСкладе И ДанныеЗаполнения.ВидДоставки = Перечисления.уатВидыДоставки_уэ.СкладСклад Тогда
			Если ДанныеЗаполнения.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам Тогда
				НоваяСтрока                = Грузы.Добавить();
				НоваяСтрока.Заказ          = ДанныеЗаполнения;
				Если ПолучитьФункциональнуюОпцию("уатРазделятьПланФактВСкладскихАктах_уэ") Тогда
					НоваяСтрока.КоличествоПлан = 1;
				Иначе
					НоваяСтрока.Количество = 1;
				КонецЕсли;
			Иначе
				Для Каждого ТекСтрокаОперации Из тблНепоступившиеГрузы Цикл
					НоваяСтрока                  = Грузы.Добавить();
					НоваяСтрока.Заказ            = ДанныеЗаполнения;
					НоваяСтрока.ГрузовоеМесто    = ТекСтрокаОперации.ГрузовоеМесто;
					НоваяСтрока.ЕдиницаИзмерения = ТекСтрокаОперации.ЕдиницаИзмерения;
					НоваяСтрока.КоличествоПлан   = ТекСтрокаОперации.КоличествоЗаказ;
					Если ПолучитьФункциональнуюОпцию("уатРазделятьПланФактВСкладскихАктах_уэ") Тогда
						НоваяСтрока.КоличествоПлан   = ТекСтрокаОперации.КоличествоЗаказ;
					Иначе
						НоваяСтрока.Количество   = ТекСтрокаОперации.КоличествоЗаказ;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		// Устанавливаем статусы новых грузов по умолчанию.
		Для Каждого ТекСтрока Из Грузы Цикл
			ТекСтрока.Статус = Справочники.уатСтатусы_уэ.ДоставленНаСклад;
		КонецЦикла;
		
		ЗаполнитьВесоОбъемныеПоказателиПлан();
		
		ДополнительныеСвойства.Вставить("ВсеГрузыПоступилиНаСклад", флВсеГрузыНаСкладе);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.уатМаршрутныйЛист") Тогда
		Если ДополнительныеСвойства.Свойство("ИспользоватьВходящуюТаблицуЗаказов") Тогда //Интерактивный ввод: ФормаАкта.ПриСозданииНаСервере
			Если ДополнительныеСвойства.ИспользоватьВходящуюТаблицуЗаказов = Истина Тогда //Этап 2: склад поступления известен, входящая таблица заказов - это и есть грузы к поступлению
				Дата        = ТекущаяДата();
				ВидОперации = Перечисления.уатВидыОперацийАктПриемки_уэ.ИзРейса;
				Организация = ДанныеЗаполнения.Организация;
				
				Для Каждого ТекСтрокаОперации Из ДополнительныеСвойства.ТаблицаЗаказы Цикл
					НоваяСтрока = Грузы.Добавить();
					НоваяСтрока.Заказ = ТекСтрокаОперации.ЗаказГрузоотправителя;
					НоваяСтрока.ГрузовоеМесто = ТекСтрокаОперации.ГрузовоеМесто;
					НоваяСтрока.ЕдиницаИзмерения = ТекСтрокаОперации.ЕдиницаИзмерения;
					Если ПолучитьФункциональнуюОпцию("уатРазделятьПланФактВСкладскихАктах_уэ") Тогда
						НоваяСтрока.КоличествоПлан = ТекСтрокаОперации.Количество;
					Иначе
						НоваяСтрока.Количество = ТекСтрокаОперации.Количество;
					КонецЕсли;
					НоваяСтрока.Статус = Справочники.уатСтатусы_уэ.ДоставленНаСклад;
				КонецЦикла;
				ЗаполнитьВесоОбъемныеПоказателиПлан();
				
				мсвСклады = Новый Массив;
				мсвСклады.Добавить(Склад);
				ДополнительныеСвойства.Вставить("мсвСклады", мсвСклады);
			
			Иначе //Этап 1: получение грузов к поступлению по таблице грузов и заказов МЛ, получение списка складов поступления для выбора
				ТаблицаЗаказы = Новый ТаблицаЗначений;
				ТаблицаЗаказы.Колонки.Добавить("Склад", Новый ОписаниеТипов("СправочникСсылка.Склады"));
				ТаблицаЗаказы.Колонки.Добавить("ЗаказГрузоотправителя", Новый ОписаниеТипов("ДокументСсылка.уатЗаказГрузоотправителя"));
				ТаблицаЗаказы.Колонки.Добавить("ГрузовоеМесто", Новый ОписаниеТипов("СправочникСсылка.уатГрузовыеМеста_уэ, СправочникСсылка.Номенклатура"));
				ТаблицаЗаказы.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.уатТипыКонтейнеров_уэ, 
				|	СправочникСсылка.уатВидыУпаковки_уэ, СправочникСсылка.ЕдиницыИзмерения, СправочникСсылка.КлассификаторЕдиницИзмерения"));
				//ТаблицаЗаказы.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
				ТаблицаЗаказы.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 3)));
				Для Каждого ТекСтрокаЗаказ Из ДанныеЗаполнения.Заказы Цикл
					Если ТекСтрокаЗаказ.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка Тогда
						НоваяСтрока = ТаблицаЗаказы.Добавить();
						НоваяСтрока.ЗаказГрузоотправителя = ТекСтрокаЗаказ.ЗаказГрузоотправителя;
						
						//НоваяСтрока.Склад = ?(ЗначениеЗаполнено(ТекСтрокаЗаказ.ЗаказГрузоотправителя.Грузоотправитель)
						//	И ТипЗнч(ТекСтрокаЗаказ.ЗаказГрузоотправителя.Грузоотправитель) = Тип("СправочникСсылка.Склады"),
						//	ТекСтрокаЗаказ.ЗаказГрузоотправителя.Грузоотправитель, Справочники.Склады.ПустаяСсылка());
						
						Если ТекСтрокаЗаказ.ЗаказГрузоотправителя.ВидДоставки = Перечисления.уатВидыДоставки_уэ.СкладДверь Тогда
							НоваяСтрока.Склад = ТекСтрокаЗаказ.ЗаказГрузоотправителя.Грузоотправитель;
							
						ИначеЕсли ТекСтрокаЗаказ.ЗаказГрузоотправителя.ВидДоставки = Перечисления.уатВидыДоставки_уэ.ДверьСклад Тогда
							НоваяСтрока.Склад = ТекСтрокаЗаказ.ЗаказГрузоотправителя.Грузополучатель;
							
						КонецЕсли;
						
						Если ТекСтрокаЗаказ.ЗаказГрузоотправителя.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам Тогда
							НоваяСтрока.Количество = 1;
						Иначе
							НоваяСтрока.ГрузовоеМесто = ТекСтрокаЗаказ.Номенклатура;
							НоваяСтрока.ЕдиницаИзмерения = ТекСтрокаЗаказ.ЕдиницаИзмеренияПоЗаказу;
							НоваяСтрока.Количество = ТекСтрокаЗаказ.Количество;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				ТаблицаЗаказы.Свернуть("Склад, ЗаказГрузоотправителя, ГрузовоеМесто, ЕдиницаИзмерения", "Количество");
				
				// Запрос возвращает грузы, еще не поступившие по указанному заказу
				// склад не учитываем, поскольку количество и состав складов могут отличаться от указанного в заказе
				Запрос = Новый Запрос(
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	ТаблицаЗаказы.Склад КАК Склад,
				|	ВЫРАЗИТЬ(ТаблицаЗаказы.ЗаказГрузоотправителя КАК Документ.уатЗаказГрузоотправителя) КАК ЗаказГрузоотправителя,
				|	ТаблицаЗаказы.ГрузовоеМесто КАК ГрузовоеМесто,
				|	ТаблицаЗаказы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
				|	ТаблицаЗаказы.Количество КАК Количество
				|ПОМЕСТИТЬ уатЗаказы
				|ИЗ
				|	&ТаблицаЗаказы КАК ТаблицаЗаказы
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	уатМаршрутныйЛистЗаказы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
				|	уатМаршрутныйЛистЗаказы.Номенклатура КАК ГрузовоеМесто,
				|	уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя,
				|	МАКСИМУМ(ВЫБОР
				|			КОГДА уатМаршрутныйЛистЗаказы.Выполнен
				|					И &УчитыватьПлановоеВремяВМаршрутныхЛистах
				|				ТОГДА уатМаршрутныйЛистЗаказы.ПрибытиеФакт
				|			КОГДА уатМаршрутныйЛистЗаказы.Выполнен
				|					И НЕ &УчитыватьПлановоеВремяВМаршрутныхЛистах
				|				ТОГДА уатМаршрутныйЛистЗаказы.ПрибытиеПлан
				|			ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
				|		КОНЕЦ) КАК НачалоОперацииФакт,
				|	МАКСИМУМ(ВЫБОР
				|			КОГДА уатМаршрутныйЛистЗаказы.Выполнен
				|					И &УчитыватьПлановоеВремяВМаршрутныхЛистах
				|				ТОГДА уатМаршрутныйЛистЗаказы.УбытиеФакт
				|			КОГДА уатМаршрутныйЛистЗаказы.Выполнен
				|					И НЕ &УчитыватьПлановоеВремяВМаршрутныхЛистах
				|				ТОГДА уатМаршрутныйЛистЗаказы.УбытиеПлан
				|			ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
				|		КОНЕЦ) КАК ОкончаниеОперацииФакт
				|ПОМЕСТИТЬ втДанныеМЛ
				|ИЗ
				|	Документ.уатМаршрутныйЛист.Заказы КАК уатМаршрутныйЛистЗаказы
				|ГДЕ
				|	уатМаршрутныйЛистЗаказы.ТипТочкиМаршрута = ЗНАЧЕНИЕ(Перечисление.уатТипыТочекМаршрута.Разгрузка)
				|	И уатМаршрутныйЛистЗаказы.Ссылка = &Ссылка
				|
				|СГРУППИРОВАТЬ ПО
				|	уатМаршрутныйЛистЗаказы.ЕдиницаИзмерения,
				|	уатМаршрутныйЛистЗаказы.Номенклатура,
				|	уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя
				|
				|ИНДЕКСИРОВАТЬ ПО
				|	ЗаказГрузоотправителя
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	уатЗаказыГрузоотправителейОстаткиИОбороты.Склад КАК Склад,
				|	уатЗаказыГрузоотправителейОстаткиИОбороты.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя,
				|	уатЗаказыГрузоотправителейОстаткиИОбороты.ГрузовоеМесто КАК ГрузовоеМесто,
				|	уатЗаказыГрузоотправителейОстаткиИОбороты.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
				|	уатЗаказыГрузоотправителейОстаткиИОбороты.Количество КАК КоличествоЗаказ,
				|	ЕСТЬNULL(уатОстаткиГрузовНаСкладеКомплектации_уэОстаткиИОбороты.КоличествоПриход, 0) КАК КоличествоАктыПоступления,
				|	ВЫБОР
				|		КОГДА уатЗаказыГрузоотправителейОстаткиИОбороты.Количество - ЕСТЬNULL(уатОстаткиГрузовНаСкладеКомплектации_уэОстаткиИОбороты.КоличествоПриход, 0) <= 0
				|				И уатЗаказыГрузоотправителейОстаткиИОбороты.ЗаказГрузоотправителя.ВидДоставки = ЗНАЧЕНИЕ(Перечисление.уатВидыДоставки_уэ.СкладСклад)
				|			ТОГДА уатЗаказыГрузоотправителейОстаткиИОбороты.Количество
				|		ИНАЧЕ уатЗаказыГрузоотправителейОстаткиИОбороты.Количество - ЕСТЬNULL(уатОстаткиГрузовНаСкладеКомплектации_уэОстаткиИОбороты.КоличествоПриход, 0)
				|	КОНЕЦ КАК Количество,
				|	уатЗаказыГрузоотправителейОстаткиИОбороты.Количество - ЕСТЬNULL(уатОстаткиГрузовНаСкладеКомплектации_уэОстаткиИОбороты.КоличествоПриход, 0) > 0 КАК ГрузНеПоступилНаСклад,
				|	МАКСИМУМ(ЕСТЬNULL(втДанныеМЛ.НачалоОперацииФакт, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))) КАК НачалоОперацииФакт,
				|	МАКСИМУМ(ЕСТЬNULL(втДанныеМЛ.ОкончаниеОперацииФакт, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))) КАК ОкончаниеОперацииФакт
				|ИЗ
				|	уатЗаказы КАК уатЗаказыГрузоотправителейОстаткиИОбороты
				|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.уатОстаткиГрузовНаСкладеКомплектации_уэ.ОстаткиИОбороты КАК уатОстаткиГрузовНаСкладеКомплектации_уэОстаткиИОбороты
				|		ПО уатЗаказыГрузоотправителейОстаткиИОбороты.ЗаказГрузоотправителя = уатОстаткиГрузовНаСкладеКомплектации_уэОстаткиИОбороты.ЗаказГрузоотправителя
				|			И (уатЗаказыГрузоотправителейОстаткиИОбороты.ГрузовоеМесто = уатОстаткиГрузовНаСкладеКомплектации_уэОстаткиИОбороты.ГрузовоеМесто
				|				ИЛИ уатЗаказыГрузоотправителейОстаткиИОбороты.ЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам))
				|		ЛЕВОЕ СОЕДИНЕНИЕ втДанныеМЛ КАК втДанныеМЛ
				|		ПО уатЗаказыГрузоотправителейОстаткиИОбороты.ЗаказГрузоотправителя = втДанныеМЛ.ЗаказГрузоотправителя
				|			И уатЗаказыГрузоотправителейОстаткиИОбороты.ГрузовоеМесто = втДанныеМЛ.ГрузовоеМесто
				|			И уатЗаказыГрузоотправителейОстаткиИОбороты.ЕдиницаИзмерения = втДанныеМЛ.ЕдиницаИзмерения
				|ГДЕ
				|	(уатЗаказыГрузоотправителейОстаткиИОбороты.Количество - ЕСТЬNULL(уатОстаткиГрузовНаСкладеКомплектации_уэОстаткиИОбороты.КоличествоПриход, 0) > 0
				|			ИЛИ уатЗаказыГрузоотправителейОстаткиИОбороты.ЗаказГрузоотправителя.ВидДоставки = ЗНАЧЕНИЕ(Перечисление.уатВидыДоставки_уэ.СкладСклад))
				|
				|СГРУППИРОВАТЬ ПО
				|	уатЗаказыГрузоотправителейОстаткиИОбороты.Склад,
				|	уатЗаказыГрузоотправителейОстаткиИОбороты.ЗаказГрузоотправителя,
				|	уатЗаказыГрузоотправителейОстаткиИОбороты.Количество - ЕСТЬNULL(уатОстаткиГрузовНаСкладеКомплектации_уэОстаткиИОбороты.КоличествоПриход, 0) > 0,
				|	уатЗаказыГрузоотправителейОстаткиИОбороты.Количество,
				|	ВЫБОР
				|		КОГДА уатЗаказыГрузоотправителейОстаткиИОбороты.Количество - ЕСТЬNULL(уатОстаткиГрузовНаСкладеКомплектации_уэОстаткиИОбороты.КоличествоПриход, 0) <= 0
				|				И уатЗаказыГрузоотправителейОстаткиИОбороты.ЗаказГрузоотправителя.ВидДоставки = ЗНАЧЕНИЕ(Перечисление.уатВидыДоставки_уэ.СкладСклад)
				|			ТОГДА уатЗаказыГрузоотправителейОстаткиИОбороты.Количество
				|		ИНАЧЕ уатЗаказыГрузоотправителейОстаткиИОбороты.Количество - ЕСТЬNULL(уатОстаткиГрузовНаСкладеКомплектации_уэОстаткиИОбороты.КоличествоПриход, 0)
				|	КОНЕЦ,
				|	уатЗаказыГрузоотправителейОстаткиИОбороты.ГрузовоеМесто,
				|	уатЗаказыГрузоотправителейОстаткиИОбороты.ЕдиницаИзмерения,
				|	ЕСТЬNULL(уатОстаткиГрузовНаСкладеКомплектации_уэОстаткиИОбороты.КоличествоПриход, 0)");
				Запрос.УстановитьПараметр("ТаблицаЗаказы", ТаблицаЗаказы);
				Запрос.УстановитьПараметр("УчитыватьПлановоеВремяВМаршрутныхЛистах", Константы.уатУчетПланФактаПоМаршрутуВМаршрутныхЛистах.Получить());
				Запрос.УстановитьПараметр("Ссылка", ДанныеЗаполнения);
				тблНепоступившиеГрузы = Запрос.Выполнить().Выгрузить();
				флВсеГрузыНаСкладе = (тблНепоступившиеГрузы.Найти(Истина, "ГрузНеПоступилНаСклад") = Неопределено);
				
				мсвСклады = Новый Массив; //выходной массив складов для выбора
				ТекПользователь = ПользователиКлиентСервер.АвторизованныйПользователь();
				Для Каждого ТекСтрока Из тблНепоступившиеГрузы Цикл
					Если ТекСтрока.ЗаказГрузоотправителя.ВидДоставки = Перечисления.уатВидыДоставки_уэ.СкладСклад Тогда
						Если ТекСтрока.КоличествоЗаказ - ТекСтрока.КоличествоАктыПоступления > 0 Тогда //дозаполняем склад
							ТекСтрока.Склад = ТекСтрока.ЗаказГрузоотправителя.Грузоотправитель;
						Иначе
							ТекСтрока.Склад = ТекСтрока.ЗаказГрузоотправителя.Грузополучатель;
						КонецЕсли;
					КонецЕсли;
					// если склад не определен, то подставляем склад из настроек пользователя
					Если НЕ ЗначениеЗаполнено(ТекСтрока.Склад) Тогда
						ТекСтрока.Склад = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ТекПользователь, "ОсновнойСклад")
					КонецЕсли;
					Если мсвСклады.Найти(ТекСтрока.Склад) = Неопределено Тогда
						мсвСклады.Добавить(ТекСтрока.Склад);
					КонецЕсли;
				КонецЦикла;
				ДополнительныеСвойства.Вставить("ТаблицаЗаказы", тблНепоступившиеГрузы);
				ДополнительныеСвойства.Вставить("мсвСклады", мсвСклады);
				ДополнительныеСвойства.Вставить("ВсеГрузыПоступилиНаСклад", флВсеГрузыНаСкладе);
								
				Если мсвСклады.Количество() = 1 Тогда //всего один склад, заполняем документ сразу по нему
					Дата        = ТекущаяДата();
					ВидОперации = Перечисления.уатВидыОперацийАктПриемки_уэ.ИзРейса;
					Организация = ДанныеЗаполнения.Организация;
				
					Склад = мсвСклады[0];
					НайденныеСтроки = тблНепоступившиеГрузы.НайтиСтроки(Новый Структура("Склад", Склад));
					Если НайденныеСтроки.Количество() > 0 Тогда
						НачалоОперации = НайденныеСтроки[0].НачалоОперацииФакт;
						ОкончаниеОперации = НайденныеСтроки[0].ОкончаниеОперацииФакт;
					КонецЕсли;
					Для Каждого ТекСтрокаОперации Из ДополнительныеСвойства.ТаблицаЗаказы Цикл
						НоваяСтрока                  = Грузы.Добавить();
						НоваяСтрока.Заказ            = ТекСтрокаОперации.ЗаказГрузоотправителя;
						НоваяСтрока.ГрузовоеМесто    = ТекСтрокаОперации.ГрузовоеМесто;
						НоваяСтрока.ЕдиницаИзмерения = ТекСтрокаОперации.ЕдиницаИзмерения;
						Если ПолучитьФункциональнуюОпцию("уатРазделятьПланФактВСкладскихАктах_уэ") Тогда
							НоваяСтрока.КоличествоПлан   = ТекСтрокаОперации.Количество;
						Иначе
							НоваяСтрока.Количество = ТекСтрокаОперации.Количество;
						КонецЕсли;
						НоваяСтрока.Статус           = Справочники.уатСтатусы_уэ.ДоставленНаСклад;
					КонецЦикла;
				КонецЕсли;
				
				ЗаполнитьВесоОбъемныеПоказателиПлан();
				
			КонецЕсли;
			
		Иначе //Программное создание: ДокОбъектАкт.Заполнить(МаршрутныйЛистСсылка)
			Дата                = ТекущаяДата();
			ВидОперации         = Перечисления.уатВидыОперацийАктПриемки_уэ.ОтГрузоотправителя;
			Организация         = ДанныеЗаполнения.Организация;
			ДокументОснование   = ДанныеЗаполнения;
			МаршрутныйЛист      = ДанныеЗаполнения;
			
			//Для Каждого ТекСтрокаОперации Из ДанныеЗаполнения.Заказы Цикл
			//	Если ТекСтрокаОперации.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка
			//		И (ТекСтрокаОперации.ЗаказГрузоотправителя.ВидДоставки = Перечисления.уатВидыДоставки_уэ.ДверьСклад
			//		ИЛИ ТекСтрокаОперации.ЗаказГрузоотправителя.ВидДоставки = Перечисления.уатВидыДоставки_уэ.СкладСклад) Тогда
			//		
			//		НоваяСтрока = Грузы.Добавить();
			//		НоваяСтрока.Заказ = ТекСтрокаОперации.ЗаказГрузоотправителя;
			//		НоваяСтрока.ГрузовоеМесто = ТекСтрокаОперации.Номенклатура;
			//		НоваяСтрока.ЕдиницаИзмерения = ТекСтрокаОперации.ЕдиницаИзмерения;
			//		НоваяСтрока.Количество 	 = ТекСтрокаОперации.Количество;
			//	КонецЕсли;
			//КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	ЕстьРасхождения = Ложь;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#КонецОбласти

#Область СлужебныйПрограммныйИнтерфейс

Процедура ВыполнитьОперацию() Экспорт
	
	СтатусВыполненияПредыдущееЗначение = СтатусВыполнения;
	НачалоОперацииПредыдущееЗначение = НачалоОперации;
	ОкончаниеОперацииПредыдущееЗначение = ОкончаниеОперации;
	Попытка
		ОперацияВыполнена = Истина;
		СтатусВыполнения = Справочники.уатСтатусы_уэ.Выполнен;
		Если Не ЗначениеЗаполнено(НачалоОперации) Тогда
			НачалоОперации = ТекущаяДата();
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ОкончаниеОперации) Тогда
			ОкончаниеОперации = ТекущаяДата();
		КонецЕсли;
		Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ОперацияВыполнена = Ложь;
		СтатусВыполнения = СтатусВыполненияПредыдущееЗначение;
		НачалоОперации = НачалоОперацииПредыдущееЗначение;
		ОкончаниеОперации = ОкончаниеОперацииПредыдущееЗначение;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

// Процедура переносит плановые показатели объема, веса и количества мест из Заказов на ТС.
Процедура ЗаполнитьВесоОбъемныеПоказателиПлан() Экспорт
	Если ПолучитьФункциональнуюОпцию("уатРазделятьПланФактВСкладскихАктах_уэ") Тогда
		ТаблицаГрузы = Грузы.Выгрузить(,"ГрузовоеМесто, Заказ, КоличествоПлан, ЕдиницаИзмерения, НомерСтроки");
		ТаблицаПоказателиПлан = Документы.уатАктПриемки_уэ.ПолучитьВесоОбъемныеПоказателиПлан(ТаблицаГрузы);
		
		Для Каждого СтрокаТовара Из ТаблицаПоказателиПлан Цикл
			ТекСтрока = Грузы[СтрокаТовара.НомерСтроки-1];
			ТекСтрока.ВесБруттоПлан      = СтрокаТовара.Вес;
			ТекСтрока.ОбъемПлан          = СтрокаТовара.Объем;
			ТекСтрока.КоличествоМестПлан = СтрокаТовара.КоличествоМест;
		КонецЦикла;
	Иначе
		ТаблицаГрузы = Грузы.Выгрузить(,"ГрузовоеМесто, Заказ, Количество, ЕдиницаИзмерения, НомерСтроки");
		ТаблицаГрузы.Колонки.Количество.Имя = "КоличествоПлан";
		ТаблицаПоказателиПлан = Документы.уатАктПриемки_уэ.ПолучитьВесоОбъемныеПоказателиПлан(ТаблицаГрузы);
		Для Каждого СтрокаТовара Из ТаблицаПоказателиПлан Цикл
			ТекСтрока = Грузы[СтрокаТовара.НомерСтроки-1];
			ТекСтрока.ВесБрутто      = СтрокаТовара.Вес;
			ТекСтрока.Объем          = СтрокаТовара.Объем;
			ТекСтрока.КоличествоМест = СтрокаТовара.КоличествоМест;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#КонецЕсли
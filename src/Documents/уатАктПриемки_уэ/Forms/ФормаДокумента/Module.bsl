
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	уатЗащищенныеФункцииСервер.уатДокументФормаЭлементаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, Объект, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// Ввод на основании МЛ
	Если ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.уатМаршрутныйЛист") Тогда
		Если Параметры.Свойство("Склад") И ЗначениеЗаполнено(Параметры.Склад) Тогда
			Объект.Склад = Параметры.Склад;
		КонецЕсли;
		ДокОбъект = РеквизитФормыВЗначение("Объект");
		Если Параметры.Свойство("ТаблицаЗаказы") Тогда
			ДокОбъект.ДополнительныеСвойства.Вставить("ТаблицаЗаказы", Параметры.ТаблицаЗаказы);
			ДокОбъект.ДополнительныеСвойства.Вставить("ИспользоватьВходящуюТаблицуЗаказов", Истина);
			ДокОбъект.Заполнить(Параметры.Основание);
			ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
			Если ДокОбъект.ДополнительныеСвойства.Свойство("ВсеГрузыПоступилиНаСклад") Тогда
				ВсеГрузыПоступилиНаСклад = ДокОбъект.ДополнительныеСвойства.ВсеГрузыПоступилиНаСклад;
			КонецЕсли;
		Иначе
			ДокОбъект.ДополнительныеСвойства.Вставить("ИспользоватьВходящуюТаблицуЗаказов", Ложь);
			ДокОбъект.Заполнить(Параметры.Основание);
			
			мсвТаблицаЗаказы = ДокОбъект.ДополнительныеСвойства.ТаблицаЗаказы;
			ТаблицаЗаказы.ЗагрузитьЗначения(уатОбщегоНазначенияСервер.ПреобразоватьТаблицувМассивСтрок(мсвТаблицаЗаказы));
			мсвСклады.ЗагрузитьЗначения(ДокОбъект.ДополнительныеСвойства.мсвСклады);
			ДокументОснование = Параметры.Основание;
			Если мсвСклады.Количество() > 1 Тогда
				// ПриОткрытии форма будет закрыта и пользователю будет задан вопрос, можно ничего больше не делать
				Возврат;
			Иначе
				ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
				Если ДокОбъект.ДополнительныеСвойства.Свойство("ВсеГрузыПоступилиНаСклад") Тогда
					ВсеГрузыПоступилиНаСклад = ДокОбъект.ДополнительныеСвойства.ВсеГрузыПоступилиНаСклад;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства

	уатОбщегоНазначенияСервер.НастроитьПолеЕдиницыИзмерения(ЭтотОбъект, "Грузы", "ГрузовоеМесто");
	
	ОбновитьДетализациюЗаказовСервер();
	
	УстановитьРазделениеПланаФакта();
	
	УстановитьУсловноеОформлениеПолейСтатусов();
	
	Элементы.ФормаЗавершитьОперацию.Доступность = Не ТолькоПросмотр;
	Элементы.ФормаНачатьОперацию.Доступность = Не ТолькоПросмотр;
	
	// уатУправлениеАвтотранспортом.МодификацияКонфигурации
	уатМодификацияКонфигурацииПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	// Конец уатУправлениеАвтотранспортом.МодификацияКонфигурации
	
	// ПодключаемоеОборудование
	уатОбщегоНазначения_проф.НастроитьПодключаемоеОборудование(ЭтотОбъект);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	уатЗащищенныеФункцииКлиент.уатДокументФормаЭлементаПриОткрытии(Отказ, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	Если мсвСклады.Количество() > 1 Тогда
		ПараметрыФормы = Новый Структура("мсвСклады, ТаблицаЗаказы, ДокументОснование, СоздаватьДокумент", мсвСклады, ТаблицаЗаказы, ДокументОснование, 0);
		ОткрытьФорму("Документ.уатАктПриемки_уэ.Форма.ФормаВыборСклада", ПараметрыФормы, ЭтаФорма.ВладелецФормы);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// уатУправлениеАвтотранспортом.МодификацияКонфигурации
	уатМодификацияКонфигурацииКлиентПереопределяемый.ПриОткрытии(ЭтотОбъект, Отказ);
	// Конец уатУправлениеАвтотранспортом.МодификацияКонфигурации
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
    УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// ПодключаемоеОборудование
	уатОбщегоНазначенияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(ЭтотОбъект);
	//Конец ПодключаемоеОборудование

	ГрузыОбновитьОтклонения();
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	уатОбщегоНазначенияКлиент.ОбработкаВнешнегоСобытия(Источник, Событие, Данные);
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Элементы.ФормаЗавершитьОперацию.Доступность = Не ТолькоПросмотр;
	Элементы.ФормаНачатьОперацию.Доступность = Не ТолькоПросмотр;
	
	ОбновитьДетализациюЗаказовСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства

	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование"
		//И ВводДоступен()
		Тогда
		
		Если ИмяСобытия = "ScanData" Тогда
			ОбработатьШтрихкод(Параметр);
		КонецЕсли;
	КонецЕсли;
	// Конец ПодключаемоеОборудование

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	ОбновитьДетализациюЗаказовСервер();
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("Изменен статус заказа", Объект.Ссылка, ЭтотОбъект);
	ГрузыОбновитьОтклонения();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	МассивГМ = Новый Массив();
	Если ЕстьУникальныеГМ(МассивГМ) Тогда
		
		ВопросОбновитьГМ = Истина;
		
		Режим = РежимДиалогаВопрос.ДаНет;
		ТекстНСТР = НСтр("ru='Пересчитать параметры грузовых мест по документу?'");
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗаписьюЗавершение", ЭтотОбъект, МассивГМ), ТекстНСТР, Режим);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если ВопросОбновитьГМ Тогда
		СтандартнаяОбработка			 = Ложь;
		ЗавершениеРаботы				 = Ложь;
		Отказ							 = Истина;
		ВопросОбновитьГМ				 = Ложь;
		ЗакрыватьПриОбновлении			 = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
	// Проверка выполняется на форме, потому что здесь это делать удобнее - уже получена детализация заказа.
	Для СчСтрок = 0 По Объект.Грузы.Количество() - 1 Цикл
		ТекСтрока = Объект.Грузы[СчСтрок];
		Если Не ЗначениеЗаполнено(ТекСтрока.ГрузовоеМесто) 
			И ТекСтрока.ДетализацияЗаказа = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам Тогда
			ТекстОшибки = НСтр("ru = 'Не заполнено грузовое место'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				,
				"Объект.Грузы[" + Формат(СчСтрок, "ЧН=0; ЧГ=0") + "].ГрузовоеМесто",
				,
				Отказ
			);
		ИначеЕсли Не ЗначениеЗаполнено(ТекСтрока.ГрузовоеМесто) 
			И ТекСтрока.ДетализацияЗаказа = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам Тогда
			ТекстОшибки = НСтр("ru = 'Не заполнена номенклатура'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				,
				"Объект.Грузы[" + Формат(СчСтрок, "ЧН=0; ЧГ=0") + "].ГрузовоеМесто",
				,
				Отказ
			);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

// уатУправлениеАвтотранспортом.МодификацияКонфигурации
&НаКлиенте
Процедура Подключаемый_ПолеФормыНажатие(Элемент, СтандартнаяОбработка)
	
	уатМодификацияКонфигурацииКлиентПереопределяемый.ПолеФормыНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

&НаКлиенте
Процедура СтатусДокументаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("Отбор", Новый Структура("ДействуетНаАктыПриемки", Истина));
	Оповещение = Новый ОписаниеОповещения("СтатусВыполненияПослеВыбораСтатуса", ЭтотОбъект, Неопределено);
	ОткрытьФорму("Справочник.уатСтатусы_уэ.ФормаВыбора", ПараметрыФормы, ЭтотОбъект,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацияВыполненаПриИзменении(Элемент)
	Если Объект.ОперацияВыполнена = Ложь 
		И ЗначениеЗаполнено(Объект.НачалоОперации) 
		И ЗначениеЗаполнено(Объект.ОкончаниеОперации) Тогда
		ТекстНСТР = НСтр("en='Operation start and finish times will be cleared. Continue?';ru='Даты начала и окончания приемки будут очищены. Продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ОперацияВыполненаЗавершение", ЭтотОбъект),
			ТекстНСТР, РежимДиалогаВопрос.ДаНетОтмена, ,КодВозвратаДиалога.Да);
	Иначе
		УстановитьВидимость();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НачалоОперацииПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыГрузы

&НаКлиенте
Процедура ГрузыПриИзменении(Элемент)
	
	ОбновитьДетализациюЗаказовСервер();
	ГрузыОбновитьОтклонения();
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда	
		ТекДанные = Элементы.Грузы.ТекущиеДанные;
		ТекДанные.Статус = СтатусНовогоГруза(Объект.ВидОперации);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГрузыПриАктивизацииСтроки(Элемент)
	Элементы.ГрузыГрузовоеМесто.СписокВыбора.Очистить();
	
	ТекСтрока = Элементы.Грузы.ТекущиеДанные;
	Если ТекСтрока = Неопределено Или НЕ ЗначениеЗаполнено(ТекСтрока.Заказ) Тогда
		Элементы.ГрузыГрузовоеМесто.КнопкаВыбора = Истина;
		Возврат;
	Иначе
		Элементы.ГрузыГрузовоеМесто.КнопкаВыбора = Ложь;
	КонецЕсли;
		
	Элементы.ГрузыГрузовоеМесто.СписокВыбора.ЗагрузитьЗначения(СписокГрузМестЗаказаСервер(ТекСтрока.Заказ).ВыгрузитьЗначения());
КонецПроцедуры

&НаКлиенте
Процедура ГрузыЗаказПриИзменении(Элемент)
	ТекСтрока = Элементы.Грузы.ТекущиеДанные;
	Если ТекСтрока = Неопределено ИЛИ НЕ ЗначениеЗаполнено(ТекСтрока.Заказ) Тогда
		Возврат;
	КонецЕсли;
	
	ТекСтрока.ГрузовоеМесто = Неопределено;
	ТекСтрока.КоличествоПлан = 0;
	ТекСтрока.Количество = 0;
	ТекСтрока.КоличествоМест = 0;
	ТекСтрока.ВесБрутто = 0;
	ТекСтрока.Объем = 0;
	ТекСтрока.ЕдиницаИзмерения = Неопределено;
	
	Если РазделятьПланФакт Тогда
		ТекСтрока.КоличествоПлан = 1;
		ОбновитьПлановыеПоказателиСервер();
	Иначе
		ТекСтрока.Количество = 1;
		ОбновитьФактическиеПоказателиСервер();
	КонецЕсли;
	ОбновитьДетализациюЗаказовСервер();
	
	Элементы.ГрузыГрузовоеМесто.СписокВыбора.ЗагрузитьЗначения(СписокГрузМестЗаказаСервер(ТекСтрока.Заказ).ВыгрузитьЗначения());
КонецПроцедуры

&НаКлиенте
Процедура ГрузыГрузовоеМестоПриИзменении(Элемент)
	ТекДанные = Элементы.Грузы.ТекущиеДанные;
	//Если ТекДанные = Неопределено ИЛИ НЕ ЗначениеЗаполнено(ТекДанные.Заказ) Тогда
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекДанные.ГрузовоеМесто) = Тип("СправочникСсылка.Номенклатура") И ЗначениеЗаполнено(ТекДанные.ГрузовоеМесто) тогда
		Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитСправочника("ЕдиницаХраненияОстатков", "Номенклатура") Тогда
			ТекДанные.ЕдиницаИзмерения = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекДанные.ГрузовоеМесто, "ЕдиницаХраненияОстатков");
		Иначе
			ТекДанные.ЕдиницаИзмерения = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекДанные.ГрузовоеМесто, "ЕдиницаИзмерения");
		КонецЕсли;
	ИначеЕсли ТипЗнч(ТекДанные.ГрузовоеМесто) = Тип("СправочникСсылка.уатГрузовыеМеста_уэ") И ЗначениеЗаполнено(ТекДанные.ГрузовоеМесто) тогда
		РеквизитыГрузовогоМеста = уатОбщегоНазначенияТиповые.ПолучитьЗначенияРеквизитов(ТекДанные.ГрузовоеМесто, "ВидУпаковки, ТипКонтейнера, Контейнер");
		Если РеквизитыГрузовогоМеста.Контейнер Тогда
			ТекДанные.ЕдиницаИзмерения = РеквизитыГрузовогоМеста.ТипКонтейнера;
		Иначе
			ТекДанные.ЕдиницаИзмерения = РеквизитыГрузовогоМеста.ВидУпаковки;
		КонецЕсли;
	Иначе
		ТекДанные.ЕдиницаИзмерения = Неопределено;
	КонецЕсли;
	
	Если РазделятьПланФакт Тогда
		ОбновитьПлановыеПоказателиСервер();
	Иначе
		ОбновитьФактическиеПоказателиСервер();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГрузыГрузовоеМестоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Грузы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Номенклатура") И ЗначениеЗаполнено(ВыбранноеЗначение) тогда
		Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитСправочника("ЕдиницаХраненияОстатков", "Номенклатура") тогда
			ТекущиеДанные.ЕдиницаИзмерения = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "ЕдиницаХраненияОстатков");
		Иначе
			ТекущиеДанные.ЕдиницаИзмерения = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "ЕдиницаИзмерения");
		КонецЕсли;
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.уатГрузовыеМеста_уэ") И ЗначениеЗаполнено(ВыбранноеЗначение) тогда
		РеквизитыГрузовогоМеста = уатОбщегоНазначенияТиповые.ПолучитьЗначенияРеквизитов(ВыбранноеЗначение, "ВидУпаковки, ТипКонтейнера, Контейнер");
		Если РеквизитыГрузовогоМеста.Контейнер Тогда
			ТекущиеДанные.ЕдиницаИзмерения = РеквизитыГрузовогоМеста.ТипКонтейнера;
		Иначе
			ТекущиеДанные.ЕдиницаИзмерения = РеквизитыГрузовогоМеста.ВидУпаковки;
		КонецЕсли;
	Иначе
		ТекущиеДанные.ЕдиницаИзмерения = Неопределено;
	КонецЕсли;
	
	ТекущиеДанные.ГрузовоеМесто = ВыбранноеЗначение;
	ТекущиеДанные.КоличествоПлан = ПолучитьКоличествоГрузаПоЗаказу(ТекущиеДанные.Заказ, ВыбранноеЗначение, ТекущиеДанные.ЕдиницаИзмерения);
	
	ГрузыГрузовоеМестоПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузыКоличествоПланПриИзменении(Элемент)
	ОбновитьПлановыеПоказателиСервер();
КонецПроцедуры

&НаКлиенте
Процедура ГрузыКоличествоПриИзменении(Элемент)
	Если РазделятьПланФакт Тогда
		ТекущиеДанные = Элементы.Грузы.ТекущиеДанные;
		КоличествоПлан = ТекущиеДанные.КоличествоПлан;
		Если КоличествоПлан > 0 Тогда
			КоличествоФакт = ТекущиеДанные.Количество;
		    ТекущиеДанные.ВесБрутто      = (КоличествоФакт / КоличествоПлан) * ТекущиеДанные.ВесБруттоПлан;
			ТекущиеДанные.Объем          = (КоличествоФакт / КоличествоПлан) * ТекущиеДанные.ОбъемПлан;
			ТекущиеДанные.КоличествоМест = (КоличествоФакт / КоличествоПлан) * ТекущиеДанные.КоличествоМестПлан;
		КонецЕсли;
	Иначе
		ОбновитьФактическиеПоказателиСервер();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГрузыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.ГрузыСтатус Тогда 
		СтандартнаяОбработка = Ложь;
		ТекДанные = Элементы.Грузы.ТекущиеДанные;
		Если ТекДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		Если ТолькоПросмотр Тогда 
			Возврат;
		КонецЕсли;
		УстановитьНовыйСтатусГруза(ВыбраннаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	Если СтрНайти(Команда.Имя, "Бланк", НаправлениеПоиска.СКонца) 
		И Объект.СтатусВыполнения <> ПредопределенноеЗначение("Справочник.уатСтатусы_уэ.ВРаботе") Тогда
		ТекстНСТР = НСтр("en='Do you wish to set the document status to ""In progress""?';ru='Установить статус документа ""В работе""?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ВыполнитьПечатьБланкаЗавершение", ЭтотОбъект, Команда),
			ТекстНСТР, РежимДиалогаВопрос.ДаНетОтмена, ,КодВозвратаДиалога.Да);
		Возврат;
	КонецЕсли;
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
    УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ПодборЗаказов(Команда)
	
	Если Объект.Грузы.Количество() Тогда 
		ТекстНСТР = НСтр("en='Clear the list of orders before the selection?';ru='Очистить список заказов перед подбором?'");
		Оповещение = Новый ОписаниеОповещения("ПодборЗаказовОчисткаТЧ", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстНСТР, РежимДиалогаВопрос.ДаНетОтмена);
	Иначе 
		ПодборЗаказовОткрытьФормуПодбора();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказыватьОтклонения(Команда)
	ПризнакПоказыватьОтклонения = Не ПризнакПоказыватьОтклонения;
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьФактИзПлана(Команда)
	Если Объект.Грузы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьФактИзПланаОтвет", ЭтотОбъект);
	ТекстНСТР = НСтр("en='The actual data table will be cleared. To continue the operation?';ru='Фактические данные табличной части будут очищены. Продолжить выполнение операции?'");
	ПоказатьВопрос(Оповещение, ТекстНСТР, РежимДиалогаВопрос.ОКОтмена, 0);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОперацию(Команда)
	Если Объект.ОперацияВыполнена Тогда
		Возврат;
	КонецЕсли;
	Если РазделятьПланФакт И ЗначениеЗаполнено(Объект.НачалоОперации) И Объект.Грузы.Итог("Количество") = 0 Тогда
		ТекстНСТР = НСтр("en='There is no cargo to be received. Fill factual data from planned data?';ru='Количество к приемке по факту: 0. Заполнить факт из плана?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ВыполнитьОперациюФрагмент1", ЭтотОбъект),
			ТекстНСТР, РежимДиалогаВопрос.ДаНетОтмена, ,КодВозвратаДиалога.Да);
	Иначе	
		ВыполнитьОперациюФрагмент2();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОперацияИзРейсаВПункте(Команда)
	НовыйВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийАктПриемки_уэ.ИзРейсаВПункте");
	ВидОперацииПриИзменении(НовыйВидОперации);
КонецПроцедуры

&НаКлиенте
Процедура ОперацияИзРейсанаСкладе(Команда)
	НовыйВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийАктПриемки_уэ.ИзРейса");
	ВидОперацииПриИзменении(НовыйВидОперации);
КонецПроцедуры

&НаКлиенте
Процедура ОперацияОтГрузоотправителя(Команда)
	НовыйВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийАктПриемки_уэ.ОтГрузоотправителя");
	ВидОперацииПриИзменении(НовыйВидОперации);
КонецПроцедуры

&НаКлиенте
Процедура ОперацияПрочееПоступление(Команда)
	НовыйВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийАктПриемки_уэ.ПрочееПоступление");
	ВидОперацииПриИзменении(НовыйВидОперации);
КонецПроцедуры

&НаКлиенте
Процедура ОперацияПрочееСписаниеИзРейса(Команда)
	НовыйВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийАктПриемки_уэ.ПрочееСписаниеИзРейса");
	ВидОперацииПриИзменении(НовыйВидОперации);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПолучателейУведомлений(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Документ", Объект);
	ПараметрыФормы.Вставить("ТипДокумента", ПредопределенноеЗначение("Перечисление.уатТипыОбъектовДляУведомлений_уэ.АктПриемки"));
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ПолучателиУведомленийЗакрытиеФормы", ЭтаФорма);
	
	ОткрытьФорму("Документ.уатПотребностьВПеревозке_уэ.Форма.ФормаПолучателейУведомлений",
		ПараметрыФормы,
		ЭтаФорма,,,,
		ОписаниеОповещенияОЗакрытии,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
    УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
    УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
    УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура УстановитьВидимость()
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийАктПриемки_уэ.ИзРейса")
		Или Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийАктПриемки_уэ.ИзРейсаВПункте")
		Или Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийАктПриемки_уэ.ПрочееСписаниеИзРейса") Тогда 
		Элементы.МаршрутныйЛист.Видимость = Истина;
	Иначе 
		Элементы.МаршрутныйЛист.Видимость = Ложь;
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийАктПриемки_уэ.ИзРейсаВПункте") 
		Или Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийАктПриемки_уэ.ПрочееСписаниеИзРейса") Тогда
		Элементы.Склад.Видимость = Ложь;
		Элементы.Пункт.Видимость = Истина;
	Иначе
		Элементы.Склад.Видимость = Истина;
		Элементы.Пункт.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ФормаОперацияИзРейсаВПункте.Пометка        = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийАктПриемки_уэ.ИзРейсаВПункте");
	Элементы.ФормаОперацияИзРейсанаСкладе.Пометка       = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийАктПриемки_уэ.ИзРейса");
	Элементы.ФормаОперацияОтГрузоотправителя.Пометка    = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийАктПриемки_уэ.ОтГрузоотправителя");
	Элементы.ФормаОперацияПрочееПоступление.Пометка     = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийАктПриемки_уэ.ПрочееПоступление");
	Элементы.ФормаОперацияПрочееСписаниеИзРейса.Пометка = Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийАктПриемки_уэ.ПрочееСписаниеИзРейса");
		
	Элементы.ГрузыВесБруттоОтклонение.Видимость = ПризнакПоказыватьОтклонения;
	Элементы.ГрузыКоличествоОтклонение.Видимость = ПризнакПоказыватьОтклонения;
	Элементы.ГрузыКоличествоМестОтклонение.Видимость = ПризнакПоказыватьОтклонения;
	Элементы.ГрузыОбъемОтклонение.Видимость = ПризнакПоказыватьОтклонения;
	
	Элементы.ОперацияВыполнена.Доступность = Объект.ОперацияВыполнена;
	Если Не ЗначениеЗаполнено(Объект.НачалоОперации) Тогда
		Элементы.ФормаНачатьОперацию.КнопкаПоУмолчанию = Истина;
		Элементы.ФормаНачатьОперацию.Видимость = Истина;
		Элементы.ФормаЗавершитьОперацию.Видимость = Ложь;
	ИначеЕсли Не Объект.ОперацияВыполнена Тогда
		Элементы.ФормаЗавершитьОперацию.КнопкаПоУмолчанию = Истина;
		Элементы.ФормаНачатьОперацию.Видимость = Ложь;
		Элементы.ФормаЗавершитьОперацию.Видимость = Истина;
	Иначе
		Элементы.ФормаПровестиИЗакрыть.КнопкаПоУмолчанию = Истина;
		Элементы.ФормаНачатьОперацию.Видимость = Ложь;
		Элементы.ФормаЗавершитьОперацию.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПлановыеПоказателиСервер()
	
	ТаблицаГрузовПлан = Объект.Грузы.Выгрузить(,"ГрузовоеМесто, Заказ, КоличествоПлан, ЕдиницаИзмерения, НомерСтроки");
	НоваяТаблицаГрузовПлан = Документы.уатАктПриемки_уэ.ПолучитьВесоОбъемныеПоказателиПлан(ТаблицаГрузовПлан);
	
	Для Каждого СтрокаТовара Из НоваяТаблицаГрузовПлан Цикл
		ТекСтрока = Объект.Грузы[СтрокаТовара.НомерСтроки-1];
		ТекСтрока.ВесБруттоПлан      = СтрокаТовара.Вес;
		ТекСтрока.ОбъемПлан          = СтрокаТовара.Объем;
		ТекСтрока.КоличествоМестПлан = СтрокаТовара.КоличествоМест;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьФактическиеПоказателиСервер(НомерСтроки = Неопределено)
	
	Если ЗначениеЗаполнено(НомерСтроки) Тогда
		ТекСтрока = Объект.Грузы[НомерСтроки-1];
		МассивСтрок = Новый Массив;
		МассивСтрок.Добавить(ТекСтрока);
		ТаблицаГрузовПлан = Объект.Грузы.Выгрузить(МассивСтрок,"ГрузовоеМесто, Заказ, Количество, ЕдиницаИзмерения, НомерСтроки");
	Иначе
		ТаблицаГрузовПлан = Объект.Грузы.Выгрузить(,"ГрузовоеМесто, Заказ, Количество, ЕдиницаИзмерения, НомерСтроки");
	КонецЕсли;
	ТаблицаГрузовПлан.Колонки.Количество.Имя = "КоличествоПлан";
	НоваяТаблицаГрузовПлан = Документы.уатАктПриемки_уэ.ПолучитьВесоОбъемныеПоказателиПлан(ТаблицаГрузовПлан);
	Для Каждого СтрокаТовара Из НоваяТаблицаГрузовПлан Цикл
		ТекСтрока = Объект.Грузы[СтрокаТовара.НомерСтроки-1];
		ТекСтрока.ВесБрутто      = СтрокаТовара.Вес;
		ТекСтрока.Объем          = СтрокаТовара.Объем;
		ТекСтрока.КоличествоМест = СтрокаТовара.КоличествоМест;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДетализациюЗаказовСервер()
	Для Каждого ТекСтрока Из Объект.Грузы Цикл
		ТекСтрока.ДетализацияЗаказа = ТекСтрока.Заказ.ДетализацияЗакрытия;
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция СписокГрузМестЗаказаСервер(ТекЗаказ)
	СписРез = Новый СписокЗначений;
	Если ТекЗаказ.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам Тогда
		Для Каждого ТекСтрока Из ТекЗаказ.ГрузовойСостав Цикл
			Если СписРез.НайтиПоЗначению(ТекСтрока.ГрузовоеМесто) = Неопределено Тогда
				СписРез.Добавить(ТекСтрока.ГрузовоеМесто);
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ТекЗаказ.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам Тогда
		Для Каждого ТекСтрока Из ТекЗаказ.Товары Цикл
			Если СписРез.НайтиПоЗначению(ТекСтрока.Номенклатура) = Неопределено Тогда
				СписРез.Добавить(ТекСтрока.Номенклатура);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СписРез;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКоличествоГрузаПоЗаказу(ЗаказНаТС, Груз, ЕдиницаИзмерения)
	
	Если ТипЗнч(Груз) = Тип("СправочникСсылка.уатГрузовыеМеста_уэ") Тогда 
		СтрокаГруза = ЗаказНаТС.ГрузовойСостав.Найти(Груз, "ГрузовоеМесто");
		Если СтрокаГруза = Неопределено Тогда 
			Возврат 0;
		Иначе 
			Возврат СтрокаГруза.КоличествоМест;
		КонецЕсли;
		
	Иначе 
		СтрокиГруза = ЗаказНаТС.Товары.НайтиСтроки(Новый Структура("Номенклатура, ЕдиницаИзмерения", Груз, ЕдиницаИзмерения));
		Если СтрокиГруза.Количество() Тогда 
			Возврат СтрокиГруза[0].Количество;
		Иначе 
			Возврат 0;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции // ПолучитьКоличествоГрузаПоЗаказу()

&НаКлиенте
Процедура ПодборЗаказовОчисткаТЧ(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда 
		Объект.Грузы.Очистить();
		
		ПодборЗаказовОткрытьФормуПодбора();
		
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		ПодборЗаказовОткрытьФормуПодбора();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборЗаказовОткрытьФормуПодбора()
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ДокументПодбора",   "уатАктПриемки_уэ");
	ПараметрыФормы.Вставить("ТекущийАктПриемки", Объект.Ссылка);
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийАктПриемки_уэ.ИзРейса")
		Или Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийАктПриемки_уэ.ИзРейсаВПункте")
		Или Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийАктПриемки_уэ.ПрочееСписаниеИзРейса") Тогда
		
		ПеренесенныеЗаказы = Новый Массив();
		Для Каждого ТекСтрока Из Объект.Грузы Цикл 
			ДанныеЗаказа = Новый Структура();
			ДанныеЗаказа.Вставить("Заказ",            ТекСтрока.Заказ);
			ДанныеЗаказа.Вставить("Груз",             ТекСтрока.ГрузовоеМесто);
			ДанныеЗаказа.Вставить("ЕдиницаИзмерения", ТекСтрока.ЕдиницаИзмерения);
			ДанныеЗаказа.Вставить("Количество",       ТекСтрока.Количество);
			
			ПеренесенныеЗаказы.Добавить(ДанныеЗаказа);
		КонецЦикла;
		ПараметрыФормы.Вставить("ПеренесенныеЗаказы",      ПеренесенныеЗаказы);
		ПараметрыФормы.Вставить("МаршрутныйЛистДляОтбора", Объект.МаршрутныйЛист);
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПодборЗаказовПослеПодбора", ЭтотОбъект);
	
	ОткрытьФорму("ОбщаяФорма.уатПодборЗаказов", ПараметрыФормы, ЭтотОбъект,,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборЗаказовПослеПодбора(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из РезультатЗакрытия.ПодобранныеЗаказы Цикл 
		НоваяСтрока = Объект.Грузы.Добавить();
		НоваяСтрока.Заказ            = ТекСтрока.Заказ;
		НоваяСтрока.ГрузовоеМесто    = ТекСтрока.Номенклатура;
		НоваяСтрока.ЕдиницаИзмерения = ТекСтрока.ЕдиницаИзмерения;
		Если РазделятьПланФакт Тогда
			НоваяСтрока.КоличествоПлан   = ТекСтрока.Количество;
		Иначе
			НоваяСтрока.Количество   = ТекСтрока.Количество;
		КонецЕсли;
		НоваяСтрока.Статус = СтатусНовогоГруза(Объект.ВидОперации);
	КонецЦикла;
	
	Если РазделятьПланФакт Тогда
		ОбновитьПлановыеПоказателиСервер();
	Иначе
		ОбновитьФактическиеПоказателиСервер();
	КонецЕсли;
	ОбновитьДетализациюЗаказовСервер();
	ГрузыОбновитьОтклонения();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеПолейСтатусов()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатСтатусы_уэ.Ссылка КАК Ссылка,
	|	уатСтатусы_уэ.Наименование КАК Наименование,
	|	уатСтатусы_уэ.ЦветФонаПоУмолчанию КАК ЦветФонаПоУмолчанию,
	|	уатСтатусы_уэ.ЦветТекстаПоУмолчанию КАК ЦветТекстаПоУмолчанию
	|ИЗ
	|	Справочник.уатСтатусы_уэ КАК уатСтатусы_уэ
	|ГДЕ
	|	НЕ уатСтатусы_уэ.ПометкаУдаления
	|	И (уатСтатусы_уэ.ДействуетНаЗаказыГрузоотправителей
	|			ИЛИ уатСтатусы_уэ.ДействуетНаАктыПриемки)";
	
	ВыборкаЦвета = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЦвета.Следующий() Цикл 
		ЦветФона   = Неопределено;
		ЦветТекста = Неопределено;
		
		ХранилищеЦветФона = ВыборкаЦвета.ЦветФонаПоУмолчанию;
		Если Не ХранилищеЦветФона = Неопределено Тогда 
			ДанныеЦветФона = ХранилищеЦветФона.Получить();
			Если Не ДанныеЦветФона = Неопределено И ТипЗнч(ДанныеЦветФона) = Тип("Цвет") Тогда
				ЦветФона = ДанныеЦветФона;
			КонецЕсли;
		КонецЕсли;
		
		ХранилищеЦветТекста = ВыборкаЦвета.ЦветТекстаПоУмолчанию;
		Если Не ХранилищеЦветТекста = Неопределено Тогда 
			ДанныеЦветТекста = ХранилищеЦветТекста.Получить();
			Если Не ДанныеЦветТекста = Неопределено И ТипЗнч(ДанныеЦветТекста) = Тип("Цвет") Тогда
				ЦветТекста = ДанныеЦветТекста;
			КонецЕсли;
		КонецЕсли;
		
		Если ЦветТекста = Неопределено И ЦветФона = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		// Установка цвета реквизита шапки
		Если ВыборкаЦвета.Ссылка = Объект.СтатусВыполнения Тогда 
			Если Не ЦветТекста = Неопределено Тогда 
				Элементы.СтатусВыполнения.ЦветТекста = ЦветТекста;
			КонецЕсли;
			
			Если Не ЦветФона = Неопределено Тогда 
				Элементы.СтатусВыполнения.ЦветФона = ЦветФона;
			КонецЕсли;
		КонецЕсли;

		// Установка условного оформления колонки ТЧ Грузы
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		
		ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.Грузы.Статус");
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = ВыборкаЦвета.Ссылка;
		
		Если Не ЦветТекста = Неопределено Тогда 
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветТекста);
		КонецЕсли;
		
		Если Не ЦветФона = Неопределено Тогда 
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветФона);
		КонецЕсли;
		
		ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "Предустановленный_ЦветаСтатусовШапки";
		ЭлементУсловногоОформления.Представление = НСтр("en='By status color';ru='По цвету статуса '") + ВыборкаЦвета.Наименование;
		
		ПолеОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ГрузыСтатус");
		ПолеОформления.Использование = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусВыполненияПослеВыбораСтатуса(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДополнительныеПараметры) Тогда
		ВыбраннаяСтрока = Неопределено;
		Если ДополнительныеПараметры.Свойство("ВыбраннаяСтрока", ВыбраннаяСтрока) Тогда
			Объект.Грузы.НайтиПоИдентификатору(ВыбраннаяСтрока).Статус = РезультатЗакрытия;
		КонецЕсли;
	Иначе
		Объект.СтатусВыполнения = РезультатЗакрытия;
		Если Не ЗначениеЗаполнено(Объект.НачалоОперации) 
			И (РезультатЗакрытия = ПредопределенноеЗначение("Справочник.уатСтатусы_уэ.ВРаботе")
			ИЛИ РезультатЗакрытия = ПредопределенноеЗначение("Справочник.уатСтатусы_уэ.Выполнен")) Тогда
			Объект.НачалоОперации = ТекущаяДата();
		КонецЕсли;
		Если Не ЗначениеЗаполнено(Объект.ОкончаниеОперации) 
			И РезультатЗакрытия = ПредопределенноеЗначение("Справочник.уатСтатусы_уэ.Выполнен") Тогда
			Объект.ОкончаниеОперации = ТекущаяДата();
		КонецЕсли;
	КонецЕсли;
	Модифицированность = Истина;
	УстановитьУсловноеОформлениеПолейСтатусов();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНовыйСтатусГруза(ВыбраннаяСтрока=Неопределено)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("Отбор", Новый Структура("ДействуетНаЗаказыГрузоотправителей", Истина));
	ДополнительныеПараметры = Новый Структура("ВыбраннаяСтрока", ВыбраннаяСтрока);
	Оповещение = Новый ОписаниеОповещения("СтатусВыполненияПослеВыбораСтатуса", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Справочник.уатСтатусы_уэ.ФормаВыбора", ПараметрыФормы, ЭтотОбъект,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьФактИзПланаОтвет(Результат, ДопПараметры) Экспорт
	
	Если Не Результат = КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из Объект.Грузы Цикл
		ТекСтрока.Количество = ТекСтрока.КоличествоПлан;
		ТекСтрока.КоличествоМест = ТекСтрока.КоличествоМестПлан;
		ТекСтрока.ВесБрутто = ТекСтрока.ВесБруттоПлан;
		ТекСтрока.Объем = ТекСтрока.ОбъемПлан;
	КонецЦикла;
	
	Модифицированность = Истина;
	ГрузыОбновитьОтклонения();
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузыОбновитьОтклонения()
	
	Для Каждого ТекСтрока Из Объект.Грузы Цикл		
		ТекСтрока.КоличествоОтклонение = ТекСтрока.КоличествоПлан - ТекСтрока.Количество;
		ТекСтрока.КоличествоМестОтклонение = ТекСтрока.КоличествоМестПлан - ТекСтрока.КоличествоМест;
		ТекСтрока.ВесБруттоОтклонение = ТекСтрока.ВесБруттоПлан - ТекСтрока.ВесБрутто;
		ТекСтрока.ОбъемОтклонение = ТекСтрока.ОбъемПлан - ТекСтрока.Объем;
	КонецЦикла;
	
	ГрузыИтогОбъемОтклонение = Объект.Грузы.Итог("ОбъемПлан") - Объект.Грузы.Итог("Объем");
	ГрузыИтогВесБруттоОтклонение = Объект.Грузы.Итог("ВесБруттоПлан") - Объект.Грузы.Итог("ВесБрутто");
	ГрузыИтогКоличествоМестОтклонение = Объект.Грузы.Итог("КоличествоМестПлан") - Объект.Грузы.Итог("КоличествоМест");
	ГрузыИтогКоличествоОтклонение = Объект.Грузы.Итог("КоличествоПлан") - Объект.Грузы.Итог("Количество");
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРазделениеПланаФакта()
	
	ПредставлениеЕдиницыИзмеренияВеса = уатОбщегоНазначенияПовтИсп.ПолучитьПредставлениеОсновнойЕдиницыИзмеренияВеса();
	ПредставлениеЕдиницыИзмеренияОбъема = уатОбщегоНазначенияПовтИсп.ПолучитьПредставлениеОсновнойЕдиницыИзмеренияОбъема();
	ПредставлениеКоличествоМест = Справочники.уатВидыУпаковки_уэ.ПолучитьОсновнойВидУпаковки().КраткоеНаименование;
	Если ПолучитьФункциональнуюОпцию("уатРазделятьПланФактВСкладскихАктах_уэ") Тогда
		
		РазделятьПланФакт = Истина;
		
		Если ЗначениеЗаполнено(ПредставлениеЕдиницыИзмеренияВеса) Тогда
			Элементы.ГрузыГруппаВес.Заголовок = НСтр("en='Weight';ru='Вес'") + ", " + ПредставлениеЕдиницыИзмеренияВеса;
		КонецЕсли;
		Если ЗначениеЗаполнено(ПредставлениеЕдиницыИзмеренияОбъема) Тогда
			Элементы.ГрузыГруппаОбъем.Заголовок = НСтр("en='Volume';ru='Объем'") + ", " + ПредставлениеЕдиницыИзмеренияОбъема;
		КонецЕсли;
		Если ЗначениеЗаполнено(ПредставлениеКоличествоМест) Тогда
			Элементы.ГрузыГруппаКоличествоМест.Заголовок = ПредставлениеКоличествоМест;
		КонецЕсли;
		
	Иначе
		
		РазделятьПланФакт = Ложь;
		
		Элементы.ГрузыГруппаКоличество.ОтображатьВШапке = Ложь;
		Элементы.ГрузыКоличествоПлан.Видимость = Ложь;
		Элементы.ГрузыКоличествоОтклонение.Видимость = Ложь;
		Элементы.ГрузыКоличество.Заголовок = "Количество";
		
		Элементы.ГрузыГруппаКоличествоМест.ОтображатьВШапке = Ложь;
		Элементы.ГрузыКоличествоМестПлан.Видимость = Ложь;
		Элементы.ГрузыКоличествоМестОтклонение.Видимость = Ложь;
		Если ЗначениеЗаполнено(ПредставлениеКоличествоМест) Тогда
			Элементы.ГрузыКоличествоМест.Заголовок = ПредставлениеКоличествоМест;
		Иначе
			Элементы.ГрузыКоличествоМест.Заголовок = "Упак., шт.";
		КонецЕсли;
		
		Элементы.ГрузыГруппаВес.ОтображатьВШапке = Ложь;
		Элементы.ГрузыВесБруттоПлан.Видимость = Ложь;
		Элементы.ГрузыВесБруттоОтклонение.Видимость = Ложь;
		Если ЗначениеЗаполнено(ПредставлениеЕдиницыИзмеренияВеса) Тогда
			Элементы.ГрузыВесБрутто.Заголовок = НСтр("en='Weight';ru='Вес'") + ", " + ПредставлениеЕдиницыИзмеренияВеса;
		Иначе
			Элементы.ГрузыВесБрутто.Заголовок = НСтр("en='Weight';ru='Вес'");
		КонецЕсли;
		
		Элементы.ГрузыГруппаОбъем.ОтображатьВШапке = Ложь;
		Элементы.ГрузыОбъемПлан.Видимость = Ложь;
		Элементы.ГрузыОбъемОтклонение.Видимость = Ложь;
		Если ЗначениеЗаполнено(ПредставлениеЕдиницыИзмеренияОбъема) Тогда
			Элементы.ГрузыОбъем.Заголовок = НСтр("en='Volume';ru='Объем'") + ", " + ПредставлениеЕдиницыИзмеренияОбъема;
		Иначе
			Элементы.ГрузыОбъем.Заголовок = НСтр("en='Volume';ru='Объем'");
		КонецЕсли;
		
		Элементы.ЕстьРасхождения.Видимость = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОперациюФрагмент1(Результат, ДопПараметры = Неопределено) Экспорт
	Если Результат = КодВозвратаДиалога.Отмена Или Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		ВыполнитьОперациюФрагмент2();
	ИначеЕсли Результат = КодВозвратаДиалога.Да Тогда
		ЗаполнитьФактИзПланаОтвет(КодВозвратаДиалога.ОК, Неопределено);
		ВыполнитьОперациюФрагмент2();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОперациюФрагмент2()
	Если Модифицированность Тогда
		ТекстНСТР = НСтр("en='To perform this operation it is necessary to record the document. Continue?';ru='Для выполнения операции необходимо записать документ. Продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ВыполнитьОперациюЗавершение", ЭтотОбъект),
			ТекстНСТР, РежимДиалогаВопрос.ОКОтмена, ,КодВозвратаДиалога.ОК);
		Возврат;
	Иначе
		ВыполнитьОперациюЗавершение(КодВозвратаДиалога.ОК);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОперациюЗавершение(Результат, ДопПараметры = Неопределено) Экспорт
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
		Возврат;
	КонецПопытки;
	
	ВыполнитьОперациюНаСервере();
	УстановитьВидимость();
КонецПроцедуры

&НаСервере
Процедура ВыполнитьОперациюНаСервере()
	
	Если Не ЗначениеЗаполнено(Объект.НачалоОперации) Тогда
		Объект.НачалоОперации = ТекущаяДата();
		Объект.СтатусВыполнения = Справочники.уатСтатусы_уэ.ВРаботе;
	Иначе
		ДокОбъект = РеквизитФормыВЗначение("Объект");
		ДокОбъект.ВыполнитьОперацию();
		ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
	КонецЕсли;
	УстановитьУсловноеОформлениеПолейСтатусов();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПечатьБланкаЗавершение(Результат, ДопПараметры = Неопределено) Экспорт
	Команда = ДопПараметры;
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если Не ЗначениеЗаполнено(Объект.НачалоОперации) Тогда
			Объект.НачалоОперации = ТекущаяДата();
		КонецЕсли;
		Объект.СтатусВыполнения = ПредопределенноеЗначение("Справочник.уатСтатусы_уэ.ВРаботе");
		УстановитьВидимость();
		УстановитьУсловноеОформлениеПолейСтатусов();
		
		ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
	Иначе
		Возврат;
	КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ОперацияВыполненаЗавершение(Результат, ДопПараметры = Неопределено) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.НачалоОперации =  '00010101';
		Объект.ОкончаниеОперации = '00010101';
		УстановитьВидимость();
	Иначе
		Объект.ОперацияВыполнена = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(НовыйВидОперации)
	Если Объект.ВидОперации = НовыйВидОперации Тогда
		Возврат;
	КонецЕсли;
	
	// Изменение статуса грузов с "ДоставленНаСклад" на "ПринятИзРейса" или наоборот, при необходимости
	СтарыйСтатусНовыхГрузов = СтатусНовогоГруза(Объект.ВидОперации);
	НовыйСтатусНовыхГрузов = СтатусНовогоГруза(НовыйВидОперации);
	Если СтарыйСтатусНовыхГрузов <> НовыйСтатусНовыхГрузов Тогда
		Для Каждого ТекСтрока Из Объект.Грузы Цикл
			Если ТекСтрока.Статус = СтарыйСтатусНовыхГрузов Тогда
				ТекСтрока.Статус = НовыйСтатусНовыхГрузов;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Объект.ВидОперации = НовыйВидОперации;

	// Очистка реквизитов, не связанных с операцией
	Если Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.уатВидыОперацийАктПриемки_уэ.ИзРейса")
		И Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.уатВидыОперацийАктПриемки_уэ.ИзРейсаВПункте")
		И Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.уатВидыОперацийАктПриемки_уэ.ПрочееСписаниеИзРейса")Тогда
		Объект.МаршрутныйЛист = Неопределено;
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийАктПриемки_уэ.ИзРейсаВПункте") 
		Или Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийАктПриемки_уэ.ПрочееСписаниеИзРейса") Тогда
		Объект.Склад = Неопределено;
	Иначе
		Объект.Пункт = Неопределено;
	КонецЕсли;
	
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Функция СтатусНовогоГруза(ВидОперации)
	Если ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийАктПриемки_уэ.ИзРейсаВПункте") Тогда
		Статус = ПредопределенноеЗначение("Справочник.уатСтатусы_уэ.ПринятИзРейсаКлиентом");
	ИначеЕсли ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийАктПриемки_уэ.ПрочееСписаниеИзРейса") Тогда
		Статус = ПредопределенноеЗначение("Справочник.уатСтатусы_уэ.ПринятИзРейса");
	Иначе
		Статус = ПредопределенноеЗначение("Справочник.уатСтатусы_уэ.ДоставленНаСклад");
	КонецЕсли;
	Возврат Статус;
КонецФункции

&НаКлиенте
Процедура ПолучателиУведомленийЗакрытиеФормы(Результат, ДопПараметры) Экспорт
	Если ТипЗнч(Результат) = Тип("ДанныеФормыКоллекция") Тогда
		Объект.ПолучателиУведомлений.Очистить();
		Для Каждого ТекСтрока Из Результат Цикл
			НоваяСтрока = Объект.ПолучателиУведомлений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		КонецЦикла;
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьШтрихкод(Параметр)
	
	ДанныеШтрихкодов = Новый Массив();
	Если Параметр[1] = Неопределено Тогда
		ДанныеШтрихкодов.Добавить(Новый Структура("Штрихкод, Количество", Параметр[0], 1));
	Иначе
		ДанныеШтрихкодов.Добавить(Новый Структура("Штрихкод, Количество", Параметр[1][1], 1));
	КонецЕсли;
	
	// Проверки и получение значения штрихкода
	ШтрихкодГМ = "";
	Если ТипЗнч(ДанныеШтрихкодов) = Тип("Массив") И ДанныеШтрихкодов.Количество() > 0 Тогда
		СтруктураШтрихкод = ДанныеШтрихкодов[0];
		Если ТипЗнч(СтруктураШтрихкод) = Тип("Структура") И СтруктураШтрихкод.Свойство("Штрихкод") Тогда
			ШтрихкодГМ = СтруктураШтрихкод.Штрихкод;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШтрихкодГМ) Тогда
		ПодобранныеЗаказы = уатЗащищенныеФункцииСервер_проф.ПолучитьГМПоШтрихкоду(ШтрихкодГМ);
		РезультатЗакрытия = Новый Структура("ПодобранныеЗаказы", ПодобранныеЗаказы);
		ПодборЗаказовПослеПодбора(РезультатЗакрытия, Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ЕстьУникальныеГМ(МассивГМ)
	
	Для Каждого ТекСтрока Из Объект.Грузы Цикл
		Если ТипЗнч(ТекСтрока.ГрузовоеМесто) = Тип("СправочникСсылка.уатГрузовыеМеста_уэ")
			И ТекСтрока.ГрузовоеМесто.УникальноеГрузовоеМесто
			И (ТекСтрока.КоличествоМест <> 0 
			ИЛИ ТекСтрока.Объем <> 0
			ИЛИ ТекСтрока.ВесБрутто <> 0) Тогда
			Запрос = Новый Запрос();
			Запрос.УстановитьПараметр("ГрузовоеМесто", ТекСтрока.ГрузовоеМесто);
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			               |	уатГрузовыеМеста_уэ.Ссылка КАК Ссылка,
			               |	уатГрузовыеМеста_уэ.КоличествоМест КАК КоличествоМест,
			               |	уатГрузовыеМеста_уэ.Объем КАК Объем,
			               |	уатГрузовыеМеста_уэ.ВесБрутто КАК ВесБрутто
			               |ИЗ
			               |	Справочник.уатГрузовыеМеста_уэ КАК уатГрузовыеМеста_уэ
			               |ГДЕ
			               |	уатГрузовыеМеста_уэ.Ссылка = &ГрузовоеМесто";
			
			Выборка = Запрос.Выполнить().Выбрать();
			Пока Выборка.Следующий() Цикл
				Если Выборка.КоличествоМест <> ТекСтрока.КоличествоМест
					ИЛИ Выборка.Объем <> ТекСтрока.Объем
					ИЛИ Выборка.ВесБрутто <> ТекСтрока.ВесБрутто Тогда
					МассивГМ.Добавить(ТекСтрока.ГрузовоеМесто);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	Возврат МассивГМ.Количество() <> 0;
КонецФункции

&НаКлиенте
Процедура ПередЗаписьюЗавершение(РезультатВопроса, МассивГМ) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ПередЗаписьюЗавершениеСервер(МассивГМ);
	КонецЕсли;
	ВопросОбновитьГМ = Ложь;
	Если ЗакрыватьПриОбновлении Тогда
		Закрыть();
		ЗакрыватьПриОбновлении = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюЗавершениеСервер(МассивГМ)
	
	Для Каждого ТекСтрока Из МассивГМ Цикл
		МассивСтрок = Объект.Грузы.НайтиСтроки(Новый Структура("ГрузовоеМесто", ТекСтрока));
		Если МассивСтрок.Количество() <> 0 Тогда
			ОбъектСсылка = ТекСтрока.ПолучитьОбъект();
			ОбъектСсылка.Объем          = МассивСтрок[0].Объем;
			ОбъектСсылка.КоличествоМест = ?(МассивСтрок[0].КоличествоМест = 0, 1, МассивСтрок[0].КоличествоМест);
			ОбъектСсылка.ВесБрутто      = МассивСтрок[0].ВесБрутто;
			ОбъектСсылка.Записать();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

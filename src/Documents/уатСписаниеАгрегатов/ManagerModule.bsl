#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатСписаниеАгрегатов";
	КомандаПечати.Идентификатор = "Списание";
	КомандаПечати.Представление = НСтр("en='Depreciation';ru='Списание'");
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатСписаниеАгрегатов";
	КомандаПечати.Идентификатор = "АктСписанияШины";
	КомандаПечати.Представление = НСтр("en='Act of writing off the tires';ru='Акт списания шины'");
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатСписаниеАгрегатов";
	КомандаПечати.Идентификатор = "АктСписанияАккумулятора";
	КомандаПечати.Представление = НСтр("en='Certificate of battery unserviceability';ru='Акт списания аккумулятора'");
	
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор  = "Реестр";
	КомандаПечати.Представление  = НСтр("en='Document register';ru='Реестр документов'");
	КомандаПечати.ЗаголовокФормы = НСтр("en='Register of documents ""Write-off of car parts""';ru='Реестр документов ""Списание агрегатов""'");
	КомандаПечати.Обработчик     = "уатОбщегоНазначенияТиповыеКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм     = "ФормаСписка";
	КомандаПечати.Порядок        = 100;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр).
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной
//                                                            параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной
//                                            параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если НЕ уатОбщегоНазначенияСервер.РазрешениеПечатиНепроведенногоДокумента(МассивОбъектов) Тогда
		Возврат;
	КонецЕсли;

	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Списание") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Списание",
			"Списание агрегатов", ПечатьСписание(МассивОбъектов, ОбъектыПечати));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктСписанияШины") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "АктСписанияШины",
			"Акт списания шины", ПечатьАктСписанияШины(МассивОбъектов, ОбъектыПечати));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "АктСписанияАккумулятора") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "АктСписанияАккумулятора",
			"Акт списания аккумулятора", ПечатьАктСписанияАккумулятора(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
	уатОбщегоНазначенияСервер.УстановитьРедактированиеПечатныхФормДокумента(КоллекцияПечатныхФорм);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	Настройки.ПриПолученииСлужебныхРеквизитов = Ложь;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// Позволяет переопределить ограничение, указанное в модуле менеджера объекта метаданных.
//
// Параметры:
//  Ограничение - Структура:
//    * Текст                             - Строка - ограничение доступа для пользователей.
//                                          Если пустая строка, значит, доступ разрешен.
//    * ТекстДляВнешнихПользователей      - Строка - ограничение доступа для внешних пользователей.
//                                          Если пустая строка, значит, доступ запрещен.
//    * ПоВладельцуБезЗаписиКлючейДоступа - Неопределено - определить автоматически.
//                                        - Булево - если Ложь, то всегда записывать ключи доступа,
//                                          если Истина, тогда не записывать ключи доступа,
//                                          а использовать ключи доступа владельца (требуется,
//                                          чтобы ограничение было строго по объекту-владельцу).
//   * ПоВладельцуБезЗаписиКлючейДоступаДляВнешнихПользователей - Неопределено, Булево - также
//                                          как у параметра ПоВладельцуБезЗаписиКлючейДоступа.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Подразделение)";
	
	Ограничение.ТекстДляВнешнихПользователей = Ограничение.Текст;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// СтандартныеПодсистемы.ВариантыОтчетов

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВариантыОтчетов

#КонецОбласти

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	СформироватьТаблицуОстаткиАгрегатов(ДокументСсылка, СтруктураДополнительныеСвойства);
	СформироватьТаблицуПричиныСписанияАгрегатов(ДокументСсылка, СтруктураДополнительныеСвойства);
КонецПроцедуры // ИнициализироватьДанныеДокумента()

Процедура ВыполнитьКонтроль(ДокументСсылка, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь) Экспорт
	
	Заголовок = уатОбщегоНазначенияТиповые.уатПредставлениеДокументаПриПроведении(ДокументСсылка);
	
	мЗапрос = Новый Запрос;
	мЗапрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатОстаткиАгрегатовОстатки.Склад,
	|	уатОстаткиАгрегатовОстатки.СерияНоменклатуры,
	|	уатОстаткиАгрегатовОстатки.КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.уатОстаткиАгрегатов.Остатки(
	|			&Период,
	|			Склад = &Склад
	|				И (СерияНоменклатуры В (&мсвШины)
	|					ИЛИ СерияНоменклатуры В (&мсвАккумуляторы) 
	|					ИЛИ СерияНоменклатуры В (&мсвПрочиеАгрегаты))) КАК уатОстаткиАгрегатовОстатки
	|ГДЕ
	|	уатОстаткиАгрегатовОстатки.КоличествоОстаток < 0";
	мЗапрос.УстановитьПараметр("Период"           , Новый Граница(ДокументСсылка.Дата, ВидГраницы.Включая));
	мЗапрос.УстановитьПараметр("Склад"            , ДокументСсылка.Склад);
	мЗапрос.УстановитьПараметр("мсвШины"          , ДокументСсылка.Шины.Выгрузить().ВыгрузитьКолонку("СерияНоменклатуры"));
	мЗапрос.УстановитьПараметр("мсвАккумуляторы"  , ДокументСсылка.Аккумуляторы.Выгрузить().ВыгрузитьКолонку("СерияНоменклатуры"));
	мЗапрос.УстановитьПараметр("мсвПрочиеАгрегаты", ДокументСсылка.ПрочиеАгрегаты.Выгрузить().ВыгрузитьКолонку("СерияНоменклатуры"));
	
	
	Выборка = мЗапрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.СерияНоменклатуры.ТипАгрегата = Справочники.уатТипыАгрегатов.Аккумулятор тогда
			ТекстНСТР = НСтр("en='Battery ""%1"" is out of stock ""%2""';ru='Аккумулятор ""%1"" отсутствует на складе ""%2""'");
		ИначеЕсли Выборка.СерияНоменклатуры.ТипАгрегата = Справочники.уатТипыАгрегатов.Шина тогда
			ТекстНСТР = НСтр("en='Tire ""% 1"" does not exist on the warehouse ''% 2 ''';ru='Шина ""%1"" отсутствует на складе ""%2""'");
		Иначе
			ТекстНСТР = НСтр("en='Car part ""%1"" is out of stock ""%2""';ru='Агрегат ""%1"" отсутствует на складе ""%2""'");
		КонецЕсли;
		ТекстНСТР = СтрШаблон(ТекстНСТР, Выборка.СерияНоменклатуры.СерийныйНомер, ДокументСсылка.Склад);
		
		уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, Отказ, Заголовок);	
	КонецЦикла;
	
КонецПроцедуры

// Получает дополнительные реквизиты для отображения в отчете "Реестр документов"
// 
// Возвращаемое значение:
//  Структура - доп. реквизитов
//
Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура("Информация", "Склад");
	Возврат Результат;
	
КонецФункции

// Возвращает для номенклатур МОЛ по РН "Остатки агрегатов"
//
// Параметры:
//  Дата							 - 	 - 
//  мсвНоменклатурШин				 - 	 - 
//  мсвНоменклатурАккумуляторов		 - 	 - 
//  мсвНоменклатурПрочихАгрегатов	 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция ПолучитьМОЛПоОстаткамДляСписания(Дата,мсвНоменклатурШин,мсвНоменклатурАккумуляторов,мсвНоменклатурПрочихАгрегатов) Экспорт 
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатОстаткиАгрегатовОстатки.СерияНоменклатуры,
	|	уатОстаткиАгрегатовОстатки.МОЛ
	|ИЗ
	|	РегистрНакопления.уатОстаткиАгрегатов.Остатки(&Дата, СерияНоменклатуры В (&НоменклатураШин)) КАК уатОстаткиАгрегатовОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатОстаткиАгрегатовОстатки.СерияНоменклатуры,
	|	уатОстаткиАгрегатовОстатки.МОЛ
	|ИЗ
	|	РегистрНакопления.уатОстаткиАгрегатов.Остатки(&Дата, СерияНоменклатуры В (&НоменклатураАккумуляторов)) КАК уатОстаткиАгрегатовОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатОстаткиАгрегатовОстатки.СерияНоменклатуры,
	|	уатОстаткиАгрегатовОстатки.МОЛ
	|ИЗ
	|	РегистрНакопления.уатОстаткиАгрегатов.Остатки(&Дата, СерияНоменклатуры В (&НоменклатураПрочиеАгрегаты)) КАК уатОстаткиАгрегатовОстатки";
	
	Запрос.УстановитьПараметр("Дата",Дата);
	Запрос.УстановитьПараметр("НоменклатураШин",мсвНоменклатурШин);
	Запрос.УстановитьПараметр("НоменклатураАккумуляторов",мсвНоменклатурАккумуляторов);
	Запрос.УстановитьПараметр("НоменклатураПрочиеАгрегаты",мсвНоменклатурПрочихАгрегатов);

	
	Возврат Запрос.ВыполнитьПакет();
КонецФункции

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицуОстаткиАгрегатов(ДокументСсылка, СтруктураДополнительныеСвойства)
	// управляемая блокировка
	ЗапросБлокировка = Новый Запрос;
	ЗапросБлокировка.Текст = 
	"ВЫБРАТЬ
	|	уатСписаниеАгрегатовШины.СерияНоменклатуры КАК СерияНоменклатуры
	|ИЗ
	|	Документ.уатСписаниеАгрегатов.Шины КАК уатСписаниеАгрегатовШины
	|ГДЕ
	|	уатСписаниеАгрегатовШины.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	уатСписаниеАгрегатовАккумуляторы.СерияНоменклатуры
	|ИЗ
	|	Документ.уатСписаниеАгрегатов.Аккумуляторы КАК уатСписаниеАгрегатовАккумуляторы
	|ГДЕ
	|	уатСписаниеАгрегатовАккумуляторы.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	уатСписаниеАгрегатовПрочиеАгрегаты.СерияНоменклатуры
	|ИЗ
	|	Документ.уатСписаниеАгрегатов.ПрочиеАгрегаты КАК уатСписаниеАгрегатовПрочиеАгрегаты
	|ГДЕ
	|	уатСписаниеАгрегатовПрочиеАгрегаты.Ссылка = &Ссылка";
	ЗапросБлокировка.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.уатОстаткиАгрегатов");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = ЗапросБлокировка.Выполнить();
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("СерияНоменклатуры", "СерияНоменклатуры");
	Блокировка.Заблокировать();
	
	тблОстаткиАгрегатов = Новый ТаблицаЗначений;
	тблОстаткиАгрегатов.Колонки.Добавить("Регистратор");
	тблОстаткиАгрегатов.Колонки.Добавить("Период");
	тблОстаткиАгрегатов.Колонки.Добавить("ВидДвижения");
	тблОстаткиАгрегатов.Колонки.Добавить("СерияНоменклатуры");
	тблОстаткиАгрегатов.Колонки.Добавить("Склад");
	тблОстаткиАгрегатов.Колонки.Добавить("Количество");
	тблОстаткиАгрегатов.Колонки.Добавить("МОЛ");
	
	мсвШин             = ДокументСсылка.Шины.ВыгрузитьКолонку("СерияНоменклатуры");
	мсвАккумуляторов   = ДокументСсылка.Аккумуляторы.ВыгрузитьКолонку("СерияНоменклатуры");
	мсвПрочихАгрегатов = ДокументСсылка.ПрочиеАгрегаты.ВыгрузитьКолонку("СерияНоменклатуры");
	
	МассивПолученныхМЛО = ПолучитьМОЛПоОстаткамДляСписания(ДокументСсылка.Дата, мсвШин, мсвАккумуляторов, мсвПрочихАгрегатов);
	
	тблШины            = МассивПолученныхМЛО[0].Выгрузить();
	тблАккумуляторов   = МассивПолученныхМЛО[1].Выгрузить();
	тблПрочихАгрегатов = МассивПолученныхМЛО[2].ВЫгрузить();
	
	//расход
	Для Каждого ТекСтрока Из ДокументСсылка.Шины Цикл
		НоваяСтрока = тблОстаткиАгрегатов.Добавить();
		НоваяСтрока.Регистратор = ДокументСсылка;
		НоваяСтрока.Период = ДокументСсылка.Дата;
		НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Расход;
		НоваяСтрока.Склад = ДокументСсылка.Склад;
		НоваяСтрока.СерияНоменклатуры = ТекСтрока.СерияНоменклатуры;
		НайденноеЗначение = тблШины.Найти(Текстрока.СерияНоменклатуры,"СерияНоменклатуры");
		Если НайденноеЗначение <> Неопределено Тогда
			НоваяСтрока.МОЛ           = НайденноеЗначение.МОЛ;
		КонецЕсли;
		НоваяСтрока.Количество = 1;
	КонецЦикла;
	Для Каждого ТекСтрока Из ДокументСсылка.Аккумуляторы Цикл
		НоваяСтрока = тблОстаткиАгрегатов.Добавить();
		НоваяСтрока.Регистратор = ДокументСсылка;
		НоваяСтрока.Период = ДокументСсылка.Дата;
		НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Расход;
		НоваяСтрока.Склад = ДокументСсылка.Склад;
		НоваяСтрока.СерияНоменклатуры = ТекСтрока.СерияНоменклатуры;
		НайденноеЗначение = тблАккумуляторов.Найти(Текстрока.СерияНоменклатуры,"СерияНоменклатуры");
		Если НайденноеЗначение <> Неопределено Тогда
			НоваяСтрока.МОЛ           = НайденноеЗначение.МОЛ;
		КонецЕсли;
		НоваяСтрока.Количество = 1;
	КонецЦикла;
	Для Каждого ТекСтрока Из ДокументСсылка.ПрочиеАгрегаты Цикл
		НоваяСтрока = тблОстаткиАгрегатов.Добавить();
		НоваяСтрока.Регистратор       = ДокументСсылка;
		НоваяСтрока.Период            = ДокументСсылка.Дата;
		НоваяСтрока.ВидДвижения       = ВидДвиженияНакопления.Расход;
		НоваяСтрока.Склад             = ДокументСсылка.Склад;
		НоваяСтрока.СерияНоменклатуры = ТекСтрока.СерияНоменклатуры;
		НайденноеЗначение = тблПрочихАгрегатов.Найти(Текстрока.СерияНоменклатуры,"СерияНоменклатуры");
		Если НайденноеЗначение <> Неопределено Тогда
			НоваяСтрока.МОЛ           = НайденноеЗначение.МОЛ;
		КонецЕсли;
		НоваяСтрока.Количество        = 1;
	КонецЦикла;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаОстатковАгрегатов", тблОстаткиАгрегатов);
	
КонецПроцедуры // СформироватьТаблицуОстаткиАгрегатов()

Функция ПечатьСписание(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_СписаниеАгрегатов";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.уатСписаниеАгрегатов.ПФ_MXL_Списание");
	
	ПервыйДокумент = Истина;
	
	Для Каждого ТекущийДокумент Из МассивОбъектов Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатСписаниеАгрегатовШины.СерияНоменклатуры.Модель КАК Модель,
		|	уатСписаниеАгрегатовШины.СерияНоменклатуры.СерийныйНомер КАК СерийныйНомер
		|ИЗ
		|	Документ.уатСписаниеАгрегатов.Шины КАК уатСписаниеАгрегатовШины
		|ГДЕ
		|	уатСписаниеАгрегатовШины.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатСписаниеАгрегатовАккумуляторы.СерияНоменклатуры.Модель КАК Модель,
		|	уатСписаниеАгрегатовАккумуляторы.СерияНоменклатуры.СерийныйНомер КАК СерийныйНомер
		|ИЗ
		|	Документ.уатСписаниеАгрегатов.Аккумуляторы КАК уатСписаниеАгрегатовАккумуляторы
		|ГДЕ
		|	уатСписаниеАгрегатовАккумуляторы.Ссылка = &Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатСписаниеАгрегатовПрочиеАгрегаты.СерияНоменклатуры.Модель КАК Модель,
		|	уатСписаниеАгрегатовПрочиеАгрегаты.СерияНоменклатуры.СерийныйНомер КАК СерийныйНомер
		|ИЗ
		|	Документ.уатСписаниеАгрегатов.ПрочиеАгрегаты КАК уатСписаниеАгрегатовПрочиеАгрегаты
		|ГДЕ
		|	уатСписаниеАгрегатовПрочиеАгрегаты.Ссылка = &Ссылка";
		Запрос.УстановитьПараметр("Ссылка", ТекущийДокумент.Ссылка);
		ТЗШины         = Запрос.ВыполнитьПакет()[0].Выгрузить();
		ТЗАккумуляторы = Запрос.ВыполнитьПакет()[1].Выгрузить();
		ТЗПрочие       = Запрос.ВыполнитьПакет()[2].Выгрузить();
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ТекущийДокумент, "Списание агрегатов");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаОрганизация");
		СписокТребуемыхПараметров           = "НаименованиеДляПечатныхФорм";
		СведенияОбОбъекте                   = уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(ТекущийДокумент.Организация);
		ОбластьМакета.Параметры.Организация = уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(СведенияОбОбъекте, СписокТребуемыхПараметров);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Если ЗначениеЗаполнено(ТекущийДокумент.Подразделение) Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаПодразделение");
			ОбластьМакета.Параметры.Подразделение = ТекущийДокумент.Подразделение;
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаПрочее");
		ОбластьМакета.Параметры.Склад = ТекущийДокумент.Склад;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Если ТЗШины.Количество() Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицыШины");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			ОбластьМакета = Макет.ПолучитьОбласть("СтрокаШины");
			Для Каждого ВыборкаСтрок Из ТЗШины Цикл
				ОбластьМакета.Параметры.Заполнить(ВыборкаСтрок);
				ОбластьМакета.Параметры.НомерСтроки = ТЗШины.Индекс(ВыборкаСтрок) + 1;
				
				ТабличныйДокумент.Вывести(ОбластьМакета);
			КонецЦикла;
			ОбластьМакета = Макет.ПолучитьОбласть("ПодвалШины");
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		Если ТЗАккумуляторы.Количество() Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицыАккумуляторы");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			ОбластьМакета = Макет.ПолучитьОбласть("СтрокаАккумуляторы");
			Для Каждого ВыборкаСтрок Из ТЗАккумуляторы Цикл
				ОбластьМакета.Параметры.Заполнить(ВыборкаСтрок);
				ОбластьМакета.Параметры.НомерСтроки = ТЗАккумуляторы.Индекс(ВыборкаСтрок) + 1;
				
				ТабличныйДокумент.Вывести(ОбластьМакета);
			КонецЦикла;
			ОбластьМакета = Макет.ПолучитьОбласть("ПодвалАккумуляторы");
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		Если ТЗПрочие.Количество() Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицыПрочие");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			ОбластьМакета = Макет.ПолучитьОбласть("СтрокаПрочие");
			Для Каждого ВыборкаСтрок Из ТЗПрочие Цикл
				ОбластьМакета.Параметры.Заполнить(ВыборкаСтрок);
				ОбластьМакета.Параметры.НомерСтроки = ТЗПрочие.Индекс(ВыборкаСтрок) + 1;
				
				ТабличныйДокумент.Вывести(ОбластьМакета);
			КонецЦикла;
			ОбластьМакета = Макет.ПолучитьОбласть("ПодвалПрочие");
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		//ОбластьМакета.Параметры.Ответственный = ТекущийДокумент.Ответственный;
		ОбластьМакета.Параметры.Отпустил = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ТекущийДокумент.Отпустил);
		ОбластьМакета.Параметры.Получил  = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ТекущийДокумент.Получил);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ТекущийДокумент);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатнаяФорма()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицуПричиныСписанияАгрегатов(ДокументСсылка, СтруктураДополнительныеСвойства)
	мЗапрос = Новый Запрос;
	мЗапрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	| уатСписаниеАгрегатовШины.Ссылка.Дата КАК Период,
	| уатСписаниеАгрегатовШины.Ссылка КАК Регистратор,
	| уатСписаниеАгрегатовШины.СерияНоменклатуры.ТипАгрегата КАК ТипАгрегата,
	| уатСписаниеАгрегатовШины.СерияНоменклатуры,
	| уатСписаниеАгрегатовШины.ПричинаСписания,
	| 1 КАК Количество
	|ИЗ
	| Документ.уатСписаниеАгрегатов.Шины КАК уатСписаниеАгрегатовШины
	|ГДЕ
	| уатСписаниеАгрегатовШины.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	| уатСписаниеАгрегатовАккумуляторы.Ссылка.Дата,
	| уатСписаниеАгрегатовАккумуляторы.Ссылка,
	| уатСписаниеАгрегатовАккумуляторы.СерияНоменклатуры.ТипАгрегата,
	| уатСписаниеАгрегатовАккумуляторы.СерияНоменклатуры,
	| уатСписаниеАгрегатовАккумуляторы.ПричинаСписания,
	| 1
	|ИЗ
	| Документ.уатСписаниеАгрегатов.Аккумуляторы КАК уатСписаниеАгрегатовАккумуляторы
	|ГДЕ
	| уатСписаниеАгрегатовАккумуляторы.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	| уатСписаниеАгрегатовПрочиеАгрегаты.Ссылка.Дата,
	| уатСписаниеАгрегатовПрочиеАгрегаты.Ссылка,
	| уатСписаниеАгрегатовПрочиеАгрегаты.СерияНоменклатуры.ТипАгрегата,
	| уатСписаниеАгрегатовПрочиеАгрегаты.СерияНоменклатуры,
	| уатСписаниеАгрегатовПрочиеАгрегаты.ПричинаСписания,
	| 1
	|ИЗ
	| Документ.уатСписаниеАгрегатов.ПрочиеАгрегаты КАК уатСписаниеАгрегатовПрочиеАгрегаты
	|ГДЕ
	| уатСписаниеАгрегатовПрочиеАгрегаты.Ссылка = &Ссылка";
	мЗапрос.УстановитьПараметр("Ссылка",ДокументСсылка);
	ТаблицаПричинСписанияАгрегатов = мЗапрос.Выполнить().Выгрузить();
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.уатСписаниеАгрегатов");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = ТаблицаПричинСписанияАгрегатов;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ТипАгрегата", "ТипАгрегата");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("СерияНоменклатуры", "СерияНоменклатуры");
	Блокировка.Заблокировать();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ПричиныСписанияАгрегатов", ТаблицаПричинСписанияАгрегатов);
КонецПроцедуры // СформироватьТаблицуПричиныСписанияАгрегатов()

Функция ПечатьАктСписанияШины(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_уатСписаниеАгрегатов_АктСписанияШины";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.уатСписаниеАгрегатов.ПФ_MXL_АктСписанияШины");
	
	ПервыйДокумент = Истина;
	
	Для Каждого ТекущийДокумент Из МассивОбъектов Цикл
		
		//Если Не ПервыйДокумент Тогда
		//	ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		//КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатСписаниеАгрегатовШины.СерияНоменклатуры.Модель КАК МаркаШины,
		|	уатСписаниеАгрегатовШины.СерияНоменклатуры.Модель.Производитель КАК Изготовитель,
		|	1 КАК Количество,
		|	уатСписаниеАгрегатовШины.СерияНоменклатуры.Модель.НормаПробега КАК НормаПробега,
		|	уатСписаниеАгрегатовШины.ПричинаСписания,
		|	уатСписаниеАгрегатовШины.СерияНоменклатуры.СерийныйНомер КАК СерийныйНомер,
		|	уатСписаниеАгрегатовШины.СерияНоменклатуры.СерийныйНомер,
		|	уатАгрегатыТССрезПоследних.ТС.Модель КАК МаркаТС,
		|	уатАгрегатыТССрезПоследних.ТС.ГаражныйНомер КАК ГаражныйНомер,
		|	уатАгрегатыТССрезПоследних.ТС.ГосударственныйНомер КАК ГосударственныйНомер,
		|	уатИзносПробегШинОбороты.ПробегОборот КАК ФактическийПробег
		|ИЗ
		|	Документ.уатСписаниеАгрегатов.Шины КАК уатСписаниеАгрегатовШины
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатАгрегатыТС.СрезПоследних(, СостояниеАгрегата = ЗНАЧЕНИЕ(Перечисление.уатСостоянияАгрегатов.Снято)) КАК уатАгрегатыТССрезПоследних
		|		ПО уатСписаниеАгрегатовШины.СерияНоменклатуры = уатАгрегатыТССрезПоследних.СерияНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.уатИзносПробегШин.Обороты(,,,СерияНоменклатуры.ТипАгрегата = ЗНАЧЕНИЕ(Справочник.уатТипыАгрегатов.Шина)) КАК уатИзносПробегШинОбороты
		|		ПО уатСписаниеАгрегатовШины.СерияНоменклатуры = уатИзносПробегШинОбороты.СерияНоменклатуры
		|ГДЕ
		|	уатСписаниеАгрегатовШины.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", ТекущийДокумент);        
		
		Выборка = Запрос.Выполнить().Выбрать();
		ОбластьАкта = Макет.ПолучитьОбласть("Акт");
		
		Руководители        = уатОбщегоНазначенияТиповые.уатОтветственныеЛицаОрганизаций(ТекущийДокумент.Организация, ТекущийДокумент.Дата);
		ОбластьАкта.Параметры.Руководитель          = Руководители.Руководитель;
		ОбластьАкта.Параметры.ДолжностьРуководителя = Руководители.РуководительДолжность;
		ОбластьАкта.Параметры.Организация = уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(
			уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(ТекущийДокумент.Организация, ТекущийДокумент.Дата),
			"НаименованиеДляПечатныхФорм,ИНН,ОГРН,ЮридическийАдрес,Телефоны");
		
		Пока Выборка.Следующий() Цикл // Уровень итогов по укрупнённому типу ТС
			// Очищаем старые значения
			Для Каждого ТекПараметр Из ОбластьАкта.Параметры Цикл
				ТекПараметр = "";
			КонецЦикла;
			
			// Заполняем новыми
			ОбластьАкта.Параметры.Заполнить(Выборка);
			
			ПечатьПрефиксовВключена = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ТекущийДокумент.Организация, ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ВыводитьПрефиксПриПечати"));
			Если ПечатьПрефиксовВключена Тогда
				ОбластьАкта.Параметры.НомерАкта = СокрЛП(ТекущийДокумент.Номер);
			Иначе
				ОбластьАкта.Параметры.НомерАкта = уатОбщегоНазначенияКлиентСервер.НомерДокументаНаПечать(ТекущийДокумент.Номер, Истина, Истина);
			КонецЕсли;
		
			ОбластьАкта.Параметры.ДатаАкта = Формат(ТекущийДокумент.Дата, "ДФ=dd.MM.yyyy");
			
			ТабличныйДокумент.Вывести(ОбластьАкта);
			
			// Разбиваем на страницы
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЦикла;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ТекущийДокумент);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатьАктСписанияШины()

Функция ПечатьАктСписанияАккумулятора(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_СписаниеАгрегатов";
	
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.уатСписаниеАгрегатов.ПФ_MXL_АктСписанияАккумулятора");
	
	ПервыйДокумент = Истина;
	
	Для Каждого ТекущийДокумент Из МассивОбъектов Цикл
		
		//Если Не ПервыйДокумент Тогда
		//	ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		//КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатСписаниеАгрегатовАккумуляторы.СерияНоменклатуры.Модель КАК МаркаАккумулятора,
		|	1 КАК Количество,
		|	уатСписаниеАгрегатовАккумуляторы.ПричинаСписания,
		|	уатАгрегатыТССрезПервых.Период КАК ДатаУстановки,
		|	уатАгрегатыТССрезПоследних.ТС,
		|	уатАгрегатыТССрезПоследних.ТС.ГосударственныйНомер КАК ГосударственныйНомер,
		|	уатАгрегатыТССрезПоследних.ТС.ГаражныйНомер КАК ГаражныйНомер,
		|	уатСписаниеАгрегатовАккумуляторы.СерияНоменклатуры.Модель.СрокСлужбы КАК НормативныйСрокЭксплуатации,
		|	уатАгрегатыТССрезПоследних.Период КАК ДатаСнятия,
		|	РАЗНОСТЬДАТ(уатАгрегатыТССрезПоследних.Период, уатАгрегатыТССрезПервых.Период, МЕСЯЦ) КАК ФактическийСрокЭксплуатации
		|ИЗ
		|	Документ.уатСписаниеАгрегатов.Аккумуляторы КАК уатСписаниеАгрегатовАккумуляторы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатАгрегатыТС.СрезПервых(, СостояниеАгрегата = ЗНАЧЕНИЕ(Перечисление.уатСостоянияАгрегатов.УстановленоВРаботе)) КАК уатАгрегатыТССрезПервых
		|		ПО уатСписаниеАгрегатовАккумуляторы.СерияНоменклатуры = уатАгрегатыТССрезПервых.СерияНоменклатуры
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатАгрегатыТС.СрезПоследних(, СостояниеАгрегата = ЗНАЧЕНИЕ(Перечисление.уатСостоянияАгрегатов.Снято)) КАК уатАгрегатыТССрезПоследних
		|		ПО уатСписаниеАгрегатовАккумуляторы.СерияНоменклатуры = уатАгрегатыТССрезПоследних.СерияНоменклатуры
		|ГДЕ
		|	уатСписаниеАгрегатовАккумуляторы.Ссылка = &Ссылка";
		
		Запрос.УстановитьПараметр("Ссылка", ТекущийДокумент);
		
		Выборка = Запрос.Выполнить().Выбрать();
		ОбластьАкта = Макет.ПолучитьОбласть("Акт");
		
		Руководители        = уатОбщегоНазначенияТиповые.уатОтветственныеЛицаОрганизаций(ТекущийДокумент.Организация, ТекущийДокумент.Дата);
		ОбластьАкта.Параметры.Руководитель          = Руководители.Руководитель;
		ОбластьАкта.Параметры.ДолжностьРуководителя = Руководители.РуководительДолжность;
		ОбластьАкта.Параметры.Организация = уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(
			уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(ТекущийДокумент.Организация, ТекущийДокумент.Дата),
			"НаименованиеДляПечатныхФорм,ИНН,ОГРН,ЮридическийАдрес,Телефоны");
		
		Пока Выборка.Следующий() Цикл // Уровень итогов по укрупнённому типу ТС
			// Очищаем старые значения
			Для Каждого ТекПараметр Из ОбластьАкта.Параметры Цикл
				ТекПараметр = "";
			КонецЦикла;
			
			// Заполняем новыми
			ОбластьАкта.Параметры.Заполнить(Выборка);
			
			ПечатьПрефиксовВключена = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ТекущийДокумент.Организация, ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ВыводитьПрефиксПриПечати"));
			Если ПечатьПрефиксовВключена Тогда
				ОбластьАкта.Параметры.НомерАкта = СокрЛП(ТекущийДокумент.Номер);
			Иначе
				ОбластьАкта.Параметры.НомерАкта = уатОбщегоНазначенияКлиентСервер.НомерДокументаНаПечать(ТекущийДокумент.Номер, Истина, Истина);
			КонецЕсли;
			
			ОбластьАкта.Параметры.ДатаАкта = Формат(ТекущийДокумент.Дата, "ДФ=dd.MM.yyyy");
			
			ТабличныйДокумент.Вывести(ОбластьАкта);
			
			// Разбиваем на страницы
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЦикла;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ТекущийДокумент);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатьАктСписанияАккумулятора()

#КонецОбласти

#КонецЕсли
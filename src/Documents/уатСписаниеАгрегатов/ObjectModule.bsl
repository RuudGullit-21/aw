#Область ОбработчикиСобытий

Процедура ОбработкаПроведения(Отказ, Режим)
	// Инициализация дополнительных свойств для проведения документа.
	уатПроведение.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	Документы.уатСписаниеАгрегатов.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	уатПроведение.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	уатПроведение.ОтразитьОстаткиАгрегатов(ДополнительныеСвойства, Движения, Отказ);
	уатПроведение_проф.ОтразитьПричиныСписанияАгрегатов(ДополнительныеСвойства, Движения, Отказ);
	
	уатПроведение.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	Документы.уатСписаниеАгрегатов.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	// Заголовок для сообщений об ошибках проведения.
	Заголовок = уатОбщегоНазначенияТиповые.уатПредставлениеДокументаПриПроведении(ЭтотОбъект);
	
	СтруктураШапкиДокумента = Новый Структура("Склад, Организация");
	уатОбщегоНазначенияТиповые.уатПроверитьЗаполнениеШапкиДокумента(ЭтотОбъект, СтруктураШапкиДокумента,
		Отказ, Заголовок);
	
	СтруктураПолей = Новый Структура("СерияНоменклатуры");
	уатОбщегоНазначенияТиповые.уатПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Шины", СтруктураПолей,
		Отказ, Заголовок);
	уатОбщегоНазначенияТиповые.уатПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Аккумуляторы", СтруктураПолей,
		Отказ, Заголовок);
	
	уатОбщегоНазначения.ПроверкаЗаполненияПодразделения(Организация, Подразделение, Отказ, Заголовок);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	уатОбщегоНазначенияСервер.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.уатИнвентаризацияАгрегатов")
		ИЛИ ТипЗнч(ДанныеЗаполнения) = Тип("ДокументОбъект.уатИнвентаризацияАгрегатов") Тогда
		
		Организация       = ДанныеЗаполнения.Организация;
		Подразделение     = ДанныеЗаполнения.Подразделение;
		ДокументОснование = ДанныеЗаполнения.Ссылка;
		Комментарий       = ДанныеЗаполнения.Комментарий;
		Ответственный     = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
			ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнойОтветственный");
		
		Если ДанныеЗаполнения.ВидОперации =
			Перечисления.уатВидыДокументаИнвентаризацияАгрегатов.ИнвентаризацияНаСкладах Тогда
			
			Склад = ДанныеЗаполнения.Склад;
			Для Каждого ТекСтрока Из ДанныеЗаполнения.АгрегатыСклад Цикл
				// проверяем на наличие лишних агрегатов
				Если НЕ ТекСтрока.Наличие И ТекСтрока.НаличиеУчет Тогда
					Если ТекСтрока.Агрегат.ТипАгрегата = Справочники.уатТипыАгрегатов.Шина Тогда
						НоваяСтрока					  = Шины.Добавить();
						НоваяСтрока.СерияНоменклатуры = ТекСтрока.Агрегат;
					ИначеЕсли ТекСтрока.Агрегат.ТипАгрегата = Справочники.уатТипыАгрегатов.Аккумулятор Тогда 
						НоваяСтрока 				  = Аккумуляторы.Добавить();
						НоваяСтрока.СерияНоменклатуры = ТекСтрока.Агрегат;
					Иначе
						НоваяСтрока 				  = ПрочиеАгрегаты.Добавить();
						НоваяСтрока.СерияНоменклатуры = ТекСтрока.Агрегат;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		Иначе			
			Для Каждого ТекСтрока Из ДанныеЗаполнения.АгрегатыТС Цикл
				// проверяем на наличие лишних агрегатов
				Если НЕ ТекСтрока.Наличие И ТекСтрока.НаличиеУчет Тогда
					Если ТекСтрока.Агрегат.ТипАгрегата = Справочники.уатТипыАгрегатов.Шина Тогда
						НоваяСтрока					  = Шины.Добавить();
						НоваяСтрока.СерияНоменклатуры = ТекСтрока.Агрегат;
					ИначеЕсли ТекСтрока.Агрегат.ТипАгрегата = Справочники.уатТипыАгрегатов.Аккумулятор Тогда 
						НоваяСтрока 				  = Аккумуляторы.Добавить();
						НоваяСтрока.СерияНоменклатуры = ТекСтрока.Агрегат;
					Иначе					
						НоваяСтрока 				  = ПрочиеАгрегаты.Добавить();
						НоваяСтрока.СерияНоменклатуры = ТекСтрока.Агрегат;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

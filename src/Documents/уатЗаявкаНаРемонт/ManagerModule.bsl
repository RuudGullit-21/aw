#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	Настройки.ПриПолученииСлужебныхРеквизитов = Ложь;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатЗаявкаНаРемонт";
	КомандаПечати.Идентификатор = "ЗаявкаНаРемонт";
	КомандаПечати.Представление = НСтр("en='Order for repair';ru='Заявка на ремонт'");
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатЗаявкаНаРемонт";
	КомандаПечати.Идентификатор = "уатМ8";
	КомандаПечати.Представление = НСтр("en='Resource limit card';ru='Лимитно-заборная карта'");
	
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор  = "Реестр";
	КомандаПечати.Представление  = НСтр("en='Document register';ru='Реестр документов'");
	КомандаПечати.ЗаголовокФормы = НСтр("en='Register of documents ""Request for repair""';ru='Реестр документов ""Заявка на ремонт""'");
	КомандаПечати.Обработчик     = "уатОбщегоНазначенияТиповыеКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм     = "ФормаСписка";
	КомандаПечати.Порядок        = 100;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр).
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной
//                                                            параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной
//                                            параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если НЕ уатОбщегоНазначенияСервер.РазрешениеПечатиНепроведенногоДокумента(МассивОбъектов) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЗаявкаНаРемонт") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ЗаявкаНаРемонт", "Заявка на ремонт", ПечатьЗаявкаНаРемонт(МассивОбъектов, ОбъектыПечати));
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "уатМ8") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "уатМ8", "Лимитно-заборная карта", ПечатьЛимитноЗаборнаяКарта(МассивОбъектов, ОбъектыПечати));
		
	КонецЕсли;
	
	уатОбщегоНазначенияСервер.УстановитьРедактированиеПечатныхФормДокумента(КоллекцияПечатныхФорм);
	уатУправлениеПечатью.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов, КоллекцияПечатныхФорм);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.УправлениеДоступом

// Позволяет переопределить ограничение, указанное в модуле менеджера объекта метаданных.
//
// Параметры:
//  Ограничение - Структура:
//    * Текст                             - Строка - ограничение доступа для пользователей.
//                                          Если пустая строка, значит, доступ разрешен.
//    * ТекстДляВнешнихПользователей      - Строка - ограничение доступа для внешних пользователей.
//                                          Если пустая строка, значит, доступ запрещен.
//    * ПоВладельцуБезЗаписиКлючейДоступа - Неопределено - определить автоматически.
//                                        - Булево - если Ложь, то всегда записывать ключи доступа,
//                                          если Истина, тогда не записывать ключи доступа,
//                                          а использовать ключи доступа владельца (требуется,
//                                          чтобы ограничение было строго по объекту-владельцу).
//   * ПоВладельцуБезЗаписиКлючейДоступаДляВнешнихПользователей - Неопределено, Булево - также
//                                          как у параметра ПоВладельцуБезЗаписиКлючейДоступа.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Подразделение)";
	
	Ограничение.ТекстДляВнешнихПользователей = Ограничение.Текст;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// СтандартныеПодсистемы.ВариантыОтчетов

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВариантыОтчетов

#КонецОбласти

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	мЗапрос = Новый Запрос;
	мЗапрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	уатЗаявкаНаРемонтРаботы.Работа КАК Номенклатура,
	|	уатЗаявкаНаРемонтРаботы.Количество КАК Количество,
	|	уатЗаявкаНаРемонтРаботы.Ссылка.ТС КАК ТС,
	|	уатЗаявкаНаРемонтРаботы.Ссылка.Организация КАК Организация,
	|	уатЗаявкаНаРемонтРаботы.Ссылка.ТС.Колонна КАК Колонна,
	|	уатЗаявкаНаРемонтРаботы.Ссылка КАК ЗаявкаНаРемонт,
	|	уатЗаявкаНаРемонтРаботы.Ссылка КАК Регистратор,
	|	уатЗаявкаНаРемонтРаботы.Ссылка.Дата КАК Период,
	|	уатЗаявкаНаРемонтРаботы.Ссылка.ВидОбслуживания КАК ВидОбслуживания
	|ИЗ
	|	Документ.уатЗаявкаНаРемонт.Работы КАК уатЗаявкаНаРемонтРаботы
	|ГДЕ
	|	уатЗаявкаНаРемонтРаботы.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатЗаявкаНаРемонт.Ссылка КАК Регистратор,
	|	уатЗаявкаНаРемонт.ДатаНачала КАК Период,
	|	уатЗаявкаНаРемонт.ТС КАК ТС,
	|	уатЗаявкаНаРемонт.ДатаОкончания КАК ДатаОкончания,
	|	ВЫБОР
	|		КОГДА уатЗаявкаНаРемонт.ВидОбслуживания.ВидОбслуживанияТС = ЗНАЧЕНИЕ(Перечисление.уатВидыОбслуживания.ТекущийРемонт)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.уатСостояниеТС.НаТекущемРемонте)
	|		КОГДА уатЗаявкаНаРемонт.ВидОбслуживания.ВидОбслуживанияТС = ЗНАЧЕНИЕ(Перечисление.уатВидыОбслуживания.СреднийРемонт)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.уатСостояниеТС.НаСреднемРемонте)
	|		КОГДА уатЗаявкаНаРемонт.ВидОбслуживания.ВидОбслуживанияТС = ЗНАЧЕНИЕ(Перечисление.уатВидыОбслуживания.КапитальныйРемонт)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.уатСостояниеТС.НаКапитальномРемонте)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.уатСостояниеТС.ЗаявкаНаРемонт)
	|	КОНЕЦ КАК Состояние,
	|	ВЫБОР
	|		КОГДА уатЗаявкаНаРемонт.СпособРемонта = ЗНАЧЕНИЕ(Перечисление.уатСпособыРемонта.Автосервис)
	|			ТОГДА уатЗаявкаНаРемонт.Контрагент.Наименование
	|		ИНАЧЕ ""Рем. зона""
	|	КОНЕЦ КАК Местоположение
	|ИЗ
	|	Документ.уатЗаявкаНаРемонт КАК уатЗаявкаНаРемонт
	|ГДЕ
	|	уатЗаявкаНаРемонт.Ссылка = &Ссылка";
	
	мЗапрос.УстановитьПараметр("Ссылка",ДокументСсылка);
	
	МассивРезультатов  = мЗапрос.ВыполнитьПакет();
	ТаблицаДокумента   = МассивРезультатов[0].Выгрузить();
	ТаблицаСостоянийТС = МассивРезультатов[1].Выгрузить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗаявокНаРемонт", ТаблицаДокумента);
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСостоянийТС", ТаблицаСостоянийТС);
КонецПроцедуры // ИнициализироватьДанныеДокумента()

Процедура ВыполнитьКонтроль(ДокументСсылка, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь) Экспорт
	
	мЗапрос = Новый Запрос;
	мЗапрос.МенеджерВременныхТаблиц = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц; 
	мЗапрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                |	уатЗаявкиНаРемонтОстатки.ЗаявкаНаРемонт КАК Заявка,
	                |	уатЗаявкиНаРемонтОстатки.КоличествоОстаток КАК Остаток
	                |ИЗ
	                |	РегистрНакопления.уатЗаявкиНаРемонт.Остатки(, ЗаявкаНаРемонт = &Ссылка) КАК уатЗаявкиНаРемонтОстатки
	                |ГДЕ
	                |	уатЗаявкиНаРемонтОстатки.КоличествоОстаток < 0";
	мЗапрос.УстановитьПараметр("Ссылка" , ДокументСсылка);
	Выборка = мЗапрос.Выполнить().Выбрать();
	Если Выборка.Количество() тогда
		Заголовок = уатОбщегоНазначенияТиповые.уатПредставлениеДокументаПриПроведении(ДокументСсылка);
		Пока Выборка.Следующий() Цикл
			#Если ТонкийКлиент тогда	
			#Иначе
				ТекстНСТР = НСтр("en='For order for repair received negative balances. Perhaps the application is closed to document the ""Repair list"" or ""Closing order for repair"".';ru='Для заявки на ремонт получены отрицательные остатки. Возможно, данная заявка закрыта документом ""Ремонтный лист"" или ""Закрытие заявок на ремонт"".'");
				уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, Отказ, Заголовок);	
			#КонецЕсли
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Получает дополнительные реквизиты для отображения в отчете "Реестр документов"
// 
// Возвращаемое значение:
//   Структура доп. реквизитов
//
Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура("Информация", "ТС");
	Возврат Результат;
	
КонецФункции

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Функция ПечатьЗаявкаНаРемонт(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_ЗаявкаНаРемонт";
	
	ПервыйДокумент = Истина;
	
	Для Каждого ТекущийДокумент Из МассивОбъектов Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ЗаявкаНаРемонт_Макет";
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.уатЗаявкаНаРемонт.ПФ_MXL_ЗаказНаРемонт");
		
		// Печать штрихкода
		Если уатЗащищенныеФункцииСервер_проф.ИспользоватьШтрихкодированиеОбъекта(ТекущийДокумент) Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокШтрихкод");
			уатЗащищенныеФункцииСервер_проф.ОтобразитьШКнаПФ(ОбластьМакета, ТекущийДокумент);
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		// печатаем шапку
		Обл = Макет.ПолучитьОбласть("ШапкаОрганизация");
		СписокТребуемыхПараметров = "НаименованиеДляПечатныхФорм";
		СведенияОбОбъекте         = уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(ТекущийДокумент.Организация);
		Обл.Параметры.Организация = уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(СведенияОбОбъекте, СписокТребуемыхПараметров);
		ТабличныйДокумент.Вывести(Обл);
		
		Если ЗначениеЗаполнено(ТекущийДокумент.Подразделение) Тогда
			Обл = Макет.ПолучитьОбласть("ШапкаПодразделение");
			Обл.Параметры.Подразделение = ТекущийДокумент.Подразделение;
			ТабличныйДокумент.Вывести(Обл);
		КонецЕсли;
		
		Обл = Макет.ПолучитьОбласть("ШапкаПрочее");
		
		ПечатьПрефиксовВключена = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ТекущийДокумент.Организация, ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ВыводитьПрефиксПриПечати"));
		Если ПечатьПрефиксовВключена Тогда
			Обл.Параметры.Номер = ТекущийДокумент.Номер;
		Иначе 
			Обл.Параметры.Номер = уатОбщегоНазначенияКлиентСервер.НомерДокументаНаПечать(ТекущийДокумент.Номер, Истина, Истина);
		КонецЕсли;
		
		ФорматДаты                     = "ДФ='дд ММММ гггг'";
		Обл.Параметры.Дата             = Формат(ТекущийДокумент.Дата, ФорматДаты);
		Обл.Параметры.ТСМодель         = уатОбщегоНазначения.уатПредставлениеМоделиТС(ТекущийДокумент.ТС);
		Обл.Параметры.ТСГосНомер       = ТекущийДокумент.ТС.ГосударственныйНомер;
		Обл.Параметры.ТСVIN            = ТекущийДокумент.ТС.VIN;
		Обл.Параметры.ВидОбслуживания  = ТекущийДокумент.ВидОбслуживания;
		Обл.Параметры.ДатаНачала       = ТекущийДокумент.ДатаНачала;
		Обл.Параметры.ДатаОкончания    = ТекущийДокумент.ДатаОкончания;
		Обл.Параметры.ПричинаОбращения = ТекущийДокумент.ПричинаОбращения;
		ТабличныйДокумент.Вывести(Обл);
		
		// печатаем шапку работ
		Обл = Макет.ПолучитьОбласть("ШапкаРабот");
		Обл.Параметры.Номер = ТекущийДокумент.Номер;
		ФорматДаты          = "ДФ='дд ММММ гггг'";
		Обл.Параметры.Дата  = Формат(ТекущийДокумент.Дата, ФорматДаты);
		ТабличныйДокумент.Вывести(Обл);
		
		РежимВыводаКодаВДокументах = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ПользователиКлиентСервер.АвторизованныйПользователь(), 
			ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.РежимВыводаКодаВДокументах"));
			
		// печатаем таблицу работ
		Обл = Макет.ПолучитьОбласть("СтрокаРабот");
		Для Каждого ТекСтрока из ТекущийДокумент.Работы Цикл
			Обл.Параметры.НомСтр                    = ТекСтрока.НомерСтроки;
			Если РежимВыводаКодаВДокументах = Перечисления.уатРежимыВыводаКодаВДокументах.Код Тогда
				Если ТекСтрока.Работа.Код = "" Тогда
					Обл.Параметры.НомерПоКаталогу = НСтр("en='-';ru='-'");
				Иначе
					Обл.Параметры.НомерПоКаталогу = ТекСтрока.Работа.Код;
				КонецЕсли;
			ИначеЕсли РежимВыводаКодаВДокументах = Перечисления.уатРежимыВыводаКодаВДокументах.Артикул Тогда
				Если ТекСтрока.Работа.Артикул = "" Тогда
					Обл.Параметры.НомерПоКаталогу = НСтр("en='-';ru='-'");
				Иначе
					Обл.Параметры.НомерПоКаталогу = ТекСтрока.Работа.Артикул;
				КонецЕсли;
			КонецЕсли;
			Обл.Параметры.НаименованиеРаботы        = ТекСтрока.Работа.Наименование;
			Обл.Параметры.НаименованиеНеисправности = ТекСтрока.Неисправность;
			Обл.Параметры.Количество                = ТекСтрока.Количество;
			ТабличныйДокумент.Вывести(Обл);
		КонецЦикла;	
		
		// печатаем шапку материалов
		Обл = Макет.ПолучитьОбласть("Детали");
		Обл.Параметры.Номер = ТекущийДокумент.Номер;
		ФорматДаты          = "ДФ='дд ММММ гггг'";
		Обл.Параметры.Дата  = Формат(ТекущийДокумент.Дата, ФорматДаты);
		ТабличныйДокумент.Вывести(Обл);
		
		// печатаем таблицу материалов
		Обл = Макет.ПолучитьОбласть("СтрокаДеталей");
		Для Каждого ТекСтрока из ТекущийДокумент.Материалы Цикл
			Обл.Параметры.НомСтр = ТекСтрока.НомерСтроки;
			Если РежимВыводаКодаВДокументах = Перечисления.уатРежимыВыводаКодаВДокументах.Код Тогда
				Если ТекСтрока.Номенклатура.Код = "" Тогда
					Обл.Параметры.НомерПоКаталогу = НСтр("en='-';ru='-'");
				Иначе
					Обл.Параметры.НомерПоКаталогу = ТекСтрока.Номенклатура.Код;
				КонецЕсли;
			ИначеЕсли РежимВыводаКодаВДокументах = Перечисления.уатРежимыВыводаКодаВДокументах.Артикул Тогда
				Если ТекСтрока.Номенклатура.Артикул = "" Тогда
					Обл.Параметры.НомерПоКаталогу = НСтр("en='-';ru='-'");
				Иначе
					Обл.Параметры.НомерПоКаталогу = ТекСтрока.Номенклатура.Артикул;
				КонецЕсли;
			КонецЕсли;
			Обл.Параметры.Наименование = ТекСтрока.Номенклатура.Наименование;
			Обл.Параметры.Единица      = ТекСтрока.ЕдиницаИзмерения;
			Обл.Параметры.Количество   = ТекСтрока.Количество;
			ТабличныйДокумент.Вывести(Обл);
		КонецЦикла;
		
		Обл = Макет.ПолучитьОбласть("Подписи");
		Обл.Параметры.Мастер = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ТекущийДокумент.Мастер);
		ТабличныйДокумент.Вывести(Обл);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ТекущийДокумент);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатнаяФорма()

Функция ПечатьЛимитноЗаборнаяКарта(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_ЗаявкаНаРемонт";
	
	ПервыйДокумент = Истина;
	
	Для Каждого ТекущийДокумент Из МассивОбъектов Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ТабличныйДокумент.ИмяПараметровПечати = "ПараметрыПечати_ЗаявкаНаРемонт_уатМ8";
		Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_уатМ8");
		
		ОбластьМакетаШапка     = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакетаЗаголовок = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ОбластьМакетаПодвал    = Макет.ПолучитьОбласть("Подвал");
		ОбластьМакета          = Макет.ПолучитьОбласть("Строка");
		
		// массив с двумя строками - для разбиения на страницы
		ВыводимыеОбласти = Новый Массив();
		ВыводимыеОбласти.Добавить(ОбластьМакета);
		ВыводимыеОбласти.Добавить(ОбластьМакетаПодвал);
		
		ШапкаВыведена = Ложь;
		
		ВысотаЗаголовка = ТабличныйДокумент.ВысотаТаблицы;
		Если ВысотаЗаголовка <> 0 Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		СведенияОбОрганизации = уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(ТекущийДокумент.Организация, ТекущийДокумент.Дата);
		
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МАКСИМУМ(уатЗаявкаНаРемонтМатериалы.ЕдиницаИзмерения) КАК ЕдиницаИзмерения,
		|	СУММА(уатЗаявкаНаРемонтМатериалы.Количество) КАК Количество,
		|	уатЗаявкаНаРемонтМатериалы.Номенклатура КАК Номенклатура,
		|	МИНИМУМ(уатЗаявкаНаРемонтМатериалы.НомерСтроки) КАК НомерСтроки
		|ИЗ
		|	Документ.уатЗаявкаНаРемонт.Материалы КАК уатЗаявкаНаРемонтМатериалы
		|ГДЕ
		|	уатЗаявкаНаРемонтМатериалы.Ссылка = &Ссылка
		|
		|СГРУППИРОВАТЬ ПО
		|	уатЗаявкаНаРемонтМатериалы.Номенклатура
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерСтроки";
		
		Запрос.УстановитьПараметр("Ссылка", ТекущийДокумент);
		ТаблицаМатериалы = Запрос.Выполнить().Выгрузить();
		
		ВыведеноСтрок       = 0;
		ВсегоСтрокДокумента = ТаблицаМатериалы.Количество();
		
		Для Каждого ТекСтрока Из ТаблицаМатериалы Цикл
			ОбластьМакетаШапка.Параметры.Заполнить(ТекущийДокумент);
			ОбластьМакетаШапка.Параметры.Заполнить(ТекСтрока);
			
			ПечатьПрефиксовВключена = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ТекущийДокумент.Организация, ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ВыводитьПрефиксПриПечати"));
			Если ПечатьПрефиксовВключена Тогда
				НомерНаПечать = ТекущийДокумент.Номер;
			Иначе
				НомерНаПечать = уатОбщегоНазначенияКлиентСервер.НомерДокументаНаПечать(ТекущийДокумент.Номер, Истина, Истина);
			КонецЕсли;
			ОбластьМакетаШапка.Параметры.Номер = НомерНаПечать;
			
			ОбластьМакетаШапка.Параметры.НоменклатурныйНомер      = ТекСтрока.Номенклатура.Код;
			ОбластьМакетаШапка.Параметры.ЕдиницаИзмеренияКод      = ТекСтрока.ЕдиницаИзмерения.Код;
			ОбластьМакетаШапка.Параметры.Лимит                    = ТекСтрока.Количество;
			ОбластьМакетаШапка.Параметры.ВсегоОтпущено            = ТекСтрока.Количество;
			ОбластьМакетаШапка.Параметры.ДатаСоставления          = ТекущийДокумент.Дата;
			ОбластьМакетаШапка.Параметры.ОрганизацияПредставление = уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(СведенияОбОрганизации, "ПолноеНаименование");
			ОбластьМакетаШапка.Параметры.КодОКПО                  = уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(СведенияОбОрганизации, "КодПоОКПО");
			ОбластьМакетаШапка.Параметры.ТекстЦена                = НСтр("en='Price';ru='Цена'");
			ОбластьМакетаШапка.Параметры.ТекстСумма               = НСтр("en='Sum';ru='Сумма'");
			ОбластьМакетаШапка.Параметры.МатериалНаименование     = СокрЛП(ТекСтрока.Номенклатура);
			
			ТабличныйДокумент.Вывести(ОбластьМакетаШапка);
			ТабличныйДокумент.Вывести(ОбластьМакетаЗаголовок);
			
			НайденнаяСтрока = ТекущийДокумент.Материалы.НайтиСтроки(Новый Структура("Номенклатура",ТекСтрока.Номенклатура));
			ВсегоОстатокЛимита = ТекСтрока.Количество;
			Для Каждого Строка Из НайденнаяСтрока Цикл
				
				ОбластьСтрока = Макет.ПолучитьОбласть("Строка");
				ОбластьСтрока.Параметры.ОтпущеноВозвращено = НСтр("en='Issued';ru='Отпущено'");
				ОбластьСтрока.Параметры.Дата = ТекущийДокумент.Дата;
				ОбластьСтрока.Параметры.Количество = Строка.Количество;
				ОбластьСтрока.Параметры.ОстатокЛимита = ВсегоОстатокЛимита - Строка.Количество;
				ВсегоОстатокЛимита = ОбластьСтрока.Параметры.ОстатокЛимита;
				
				ТабличныйДокумент.Вывести(ОбластьСтрока);
				
			КонецЦикла;
			
			ВыведеноСтрок = ВыведеноСтрок + 1;
			
			ВывестиПодвалЛиста = Ложь;
			Пока НЕ ВывестиПодвалЛиста Цикл
				
				// Проверим, уместится ли строка на странице или надо открывать новую страницу
				Попытка
					флПроверитьВыводТабличногоДокумента = ТабличныйДокумент.ПроверитьВывод(ВыводимыеОбласти);
				Исключение
					флПроверитьВыводТабличногоДокумента = Истина;
				КонецПопытки;
				
				ВывестиПодвалЛиста = Не флПроверитьВыводТабличногоДокумента;
				Если ВывестиПодвалЛиста Тогда
					ТабличныйДокумент.Вывести(ОбластьМакетаПодвал);
				Иначе
					ОбластьСтрока = ТабличныйДокумент.Вывести(ОбластьМакета);
					
					ТабличныйДокумент.Область(ОбластьСтрока.Верх,2).ГраницаСверху = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
					ТабличныйДокумент.Область(ОбластьСтрока.Верх,2).ГраницаСнизу  = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
				КонецЕсли;
			КонецЦикла;
			
			Если ВыведеноСтрок<ВсегоСтрокДокумента Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
		КонецЦикла;
			
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ТекущийДокумент);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатнаяФорма()

// Процедура - Заполнить структуру получателей печатных форм
//
// Параметры:
//  СтруктураДанныхОбъектаПечати - Структура - Структура данных получателей печатной формы
//
Процедура ЗаполнитьСтруктуруПолучателейПечатныхФорм(СтруктураДанныхОбъектаПечати) Экспорт
	
	СтруктураДанныхОбъектаПечати.ОсновнойПолучатель = "Контрагент";
	 
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Контрагент");
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("КонтактноеЛицо");
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Грузоотправитель");
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Грузополучатель");
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

Процедура ВыполнитьДвиженияПоПланированиюТС()
	
	НаборЗаписей = РегистрыСведений.уатПланированиеРаботыТС.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Регистратор.Установить(Ссылка);
	НовЗапись = НаборЗаписей.Добавить();
	НовЗапись.Регистратор = Ссылка;
	НовЗапись.ТС = ТС;
	НовЗапись.ДокументПланирования = Ссылка;
	НовЗапись.ДатаНачала = ДатаНачала;
	НовЗапись.ДатаОкончания = ДатаОкончания;
	Если ВидОбслуживания.ВидОбслуживанияТС = Перечисления.уатВидыОбслуживания.КапитальныйРемонт Тогда
		НовЗапись.Состояние = Справочники.уатСостояниеТС.НаКапитальномРемонте;
	ИначеЕсли ВидОбслуживания.ВидОбслуживанияТС = Перечисления.уатВидыОбслуживания.СреднийРемонт Тогда 
		НовЗапись.Состояние = Справочники.уатСостояниеТС.НаСреднемРемонте;
	Иначе
		НовЗапись.Состояние = Справочники.уатСостояниеТС.НаТекущемРемонте;
	КонецЕсли;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Процедура ВыполнитьДвиженияПоПланированиюРемонтов()
	
	НаборЗаписей = Движения.уатГрафикРаботыРесурсов;
	
	ТекДатаРемонта = ДатаНачала;
	
	Если НачалоДня(ДатаОкончания) - НачалоДня(ДатаНачала) = 0 Тогда
		// Начало окончание в одном дне
		СтрокаГрафикаРаботыРесурсов = НаборЗаписей.Добавить();
		СтрокаГрафикаРаботыРесурсов.Ресурс1 = Цех;
		СтрокаГрафикаРаботыРесурсов.Ресурс2 = Мастер;
		СтрокаГрафикаРаботыРесурсов.ДокументПланирования = Ссылка;
		СтрокаГрафикаРаботыРесурсов.Дата = ДатаНачала;
		СтрокаГрафикаРаботыРесурсов.НачалоРабочегоВремени = '00010101' + (ДатаНачала - НачалоДня(ДатаНачала));
		СтрокаГрафикаРаботыРесурсов.КонецРабочегоВремени = '00010101' + (ДатаОкончания - НачалоДня(ДатаОкончания));
		СтрокаГрафикаРаботыРесурсов.Продолжительность = '00010101' + (СтрокаГрафикаРаботыРесурсов.КонецРабочегоВремени - СтрокаГрафикаРаботыРесурсов.НачалоРабочегоВремени);
	Иначе
		Разница = (НачалоДня(ДатаОкончания) - НачалоДня(ДатаНачала))/60/60/24;
		ТекущийДень = НачалоДня(ДатаНачала);
		Пока Разница >= 0 Цикл
			СтрокаГрафикаРаботыРесурсов = НаборЗаписей.Добавить();
			СтрокаГрафикаРаботыРесурсов.Ресурс1 = Цех;
			СтрокаГрафикаРаботыРесурсов.Ресурс2 = Мастер;
			СтрокаГрафикаРаботыРесурсов.ДокументПланирования = Ссылка;
			СтрокаГрафикаРаботыРесурсов.Дата = ТекущийДень;
			// Установим НачалоРабочегоВремени 
			Если ТекущийДень = НачалоДня(ДатаНачала) Тогда
				СтрокаГрафикаРаботыРесурсов.НачалоРабочегоВремени = '00010101' + (ДатаНачала - НачалоДня(ДатаНачала));
			Иначе
				СтрокаГрафикаРаботыРесурсов.НачалоРабочегоВремени = '00010101';
			КонецЕсли;
			// Установим КонецРабочегоВремени
			Если ТекущийДень = НачалоДня(ДатаОкончания) Тогда
				СтрокаГрафикаРаботыРесурсов.КонецРабочегоВремени = '00010101' + (ДатаОкончания - НачалоДня(ДатаОкончания));
			Иначе
				СтрокаГрафикаРаботыРесурсов.КонецРабочегоВремени = '00010101235959';
			КонецЕсли;
			// Посчитаем Продолжительность
			СтрокаГрафикаРаботыРесурсов.Продолжительность = '00010101' + (СтрокаГрафикаРаботыРесурсов.КонецРабочегоВремени - СтрокаГрафикаРаботыРесурсов.НачалоРабочегоВремени);
			
			ТекущийДень = ТекущийДень + 3600*24;
			Разница = Разница - 1;
		КонецЦикла;
	КонецЕсли;
	
	НаборЗаписей.Записать();
	
КонецПроцедуры

Функция ПроверитьКорректностьДвижений(Отказ)
	
	РезЦех           = Истина;
	РезМастер        = Истина;
	ЗапретПроведения = Ложь;
	
	КонтрольЗанятостиЦеха    = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, ПланыВидовХарактеристик.уатПраваИНастройки.ЗапретПроведенияРемонтногоЛистаПриЗанятостиЦеха);
	КонтрольЗанятостиМастера = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, ПланыВидовХарактеристик.уатПраваИНастройки.ЗапретПроведенияРемонтногоЛистаПриЗанятостиМастера);
	
	Если (КонтрольЗанятостиЦеха = Перечисления.уатВидыКонтроля.Запрещать
		ИЛИ КонтрольЗанятостиЦеха = Перечисления.уатВидыКонтроля.Предупреждать) И ЗначениеЗаполнено(Цех) Тогда
		
		ЗапретПроведения = КонтрольЗанятостиЦеха = Перечисления.уатВидыКонтроля.Запрещать;
		РезЦех = ПроверитьКорректностьДвиженийРесурса(Цех, ЗапретПроведения, Отказ);
		
	КонецЕсли;
	
	Если (КонтрольЗанятостиМастера = Перечисления.уатВидыКонтроля.Запрещать
		ИЛИ КонтрольЗанятостиМастера = Перечисления.уатВидыКонтроля.Предупреждать) И ЗначениеЗаполнено(Мастер) Тогда
		
		ЗапретПроведения = КонтрольЗанятостиМастера = Перечисления.уатВидыКонтроля.Запрещать;
		РезМастер = ПроверитьКорректностьДвиженийРесурса(Мастер, ЗапретПроведения, Отказ);
		
	КонецЕсли;
	
	Возврат (РезЦех И РезМастер);

КонецФункции

Функция ПроверитьКорректностьДвиженийРесурса(Ресурс, ЗапретПроведения, Отказ)
	
	Рез = Истина;
	
	ПолеРесурса = ?(ТипЗнч(Ресурс) = Тип("СправочникСсылка.уатЦеха"), "Ресурс1", "Ресурс2");
	Запрос       = Новый Запрос();
	Запрос.Текст = СтрШаблон("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатГрафикРаботыРесурсов.ДокументПланирования КАК Документ,
	|	уатГрафикРаботыРесурсов.Дата КАК Дата,
	|	уатГрафикРаботыРесурсов.НачалоРабочегоВремени КАК НачалоРабочегоВремени,
	|	уатГрафикРаботыРесурсов.КонецРабочегоВремени КАК КонецРабочегоВремени
	|ИЗ
	|	РегистрСведений.уатГрафикРаботыРесурсов КАК уатГрафикРаботыРесурсов
	|ГДЕ
	|	уатГрафикРаботыРесурсов.ДокументПланирования ССЫЛКА Документ.уатЗаявкаНаРемонт
	|	И уатГрафикРаботыРесурсов.ДокументПланирования <> &ДокументПланирования
	|	И уатГрафикРаботыРесурсов.%1 = &Ресурс
	|	И уатГрафикРаботыРесурсов.Дата МЕЖДУ &ДатаНач И &ДатаКон", ПолеРесурса);
	Запрос.УстановитьПараметр("Ресурс", Ресурс);
	Запрос.УстановитьПараметр("ДокументПланирования", Ссылка);
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ДатаНачала));
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ДатаОкончания));
	тблПересечений = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ТекСтрокаПересечение Из тблПересечений Цикл
		Если НачалоДня(ДатаНачала) = НачалоДня(ДатаОкончания) Тогда // Начало окончание в одном дне
			НачалоРабочегоВремени_ = '00010101' + (ДатаНачала - НачалоДня(ДатаНачала));
			КонецРабочегоВремени_  = '00010101' + (ДатаОкончания - НачалоДня(ДатаОкончания));
			Если НачалоРабочегоВремени_ <= ТекСтрокаПересечение.КонецРабочегоВремени И КонецРабочегоВремени_ >= ТекСтрокаПересечение.НачалоРабочегоВремени Тогда
				Если ЗапретПроведения Тогда
					Рез   = Ложь;
					Отказ = Истина;
				КонецЕсли;
				
				Если ПолеРесурса   = "Ресурс1" Тогда
					ТекстНСТР = НСтр("en='Found the intersection in the work schedule resource: start ""%1"", end ""%2"","
					"workshop ""%3"", document ""%4""';ru='Обнаружены пересечения в графике работы ресурса: начало ""%1"", окончание ""%2"","
					"цех ""%3"", документ ""%4""'");
					ТекстНСТР = СтрШаблон(ТекстНСТР,
					Формат(ДатаНачала, "ДФ='дд.ММ.гггг ЧЧ:мм'"),
					Формат(ДатаОкончания, "ДФ='дд.ММ.гггг ЧЧ:мм'"),
					Цех, ТекСтрокаПересечение.Документ);
				Иначе
					ТекстНСТР = НСтр("en='Found the intersection in the work schedule resource: start ""%1"", end ""%2"","
					"master ""%3"", document ""%4""';ru='Обнаружены пересечения в графике работы ресурса: начало ""%1"", окончание ""%2"","
					"мастер ""%3"", документ ""%4""'");
					ТекстНСТР = СтрШаблон(ТекстНСТР,
					Формат(ДатаНачала, "ДФ='дд.ММ.гггг ЧЧ:мм'"),
					Формат(ДатаОкончания, "ДФ='дд.ММ.гггг ЧЧ:мм'"),
					Мастер, ТекСтрокаПересечение.Документ);
				КонецЕсли;
					
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
				Прервать;
			КонецЕсли;
			
		Иначе
			Разница = (НачалоДня(ДатаОкончания) - НачалоДня(ДатаНачала))/60/60/24;
			ТекущийДень = НачалоДня(ДатаНачала);
			Пока Разница >= 0 Цикл
				Дата_ = ТекущийДень;
				
				// Установим НачалоРабочегоВремени 
				Если ТекущийДень = НачалоДня(ДатаНачала) Тогда
					НачалоРабочегоВремени_ = '00010101' + (ДатаНачала - НачалоДня(ДатаНачала));
				Иначе
					НачалоРабочегоВремени_ = '00010101';
				КонецЕсли;
				// Установим КонецРабочегоВремени
				Если ТекущийДень = НачалоДня(ДатаОкончания) Тогда
					КонецРабочегоВремени_ = '00010101' + (ДатаОкончания - НачалоДня(ДатаОкончания));
				Иначе
					КонецРабочегоВремени_ = '00010101235959';
				КонецЕсли;
				
				Если Дата_ = ТекСтрокаПересечение.Дата И НачалоРабочегоВремени_ <= ТекСтрокаПересечение.КонецРабочегоВремени И КонецРабочегоВремени_ >= ТекСтрокаПересечение.НачалоРабочегоВремени Тогда
					Если ЗапретПроведения Тогда
						Рез   = Ложь;
						Отказ = Истина;
					КонецЕсли;
					
					Если ПолеРесурса   = "Ресурс1" Тогда
						ТекстНСТР = НСтр("en='Found the intersection in the work schedule resource: start ""%1"", end ""%2"","
						"workshop ""%3"", document ""%4""';ru='Обнаружены пересечения в графике работы ресурса: начало ""%1"", окончание ""%2"","
						"цех ""%3"", документ ""%4""'");
						ТекстНСТР = СтрШаблон(ТекстНСТР,
						Формат(Дата_ + (НачалоРабочегоВремени_ - '00010101'), "ДФ='дд.ММ.гггг ЧЧ:мм'"),
						Формат(Дата_ + (КонецРабочегоВремени_ - '00010101'), "ДФ='дд.ММ.гггг ЧЧ:мм'"),
						Цех, ТекСтрокаПересечение.Документ);
					Иначе
						ТекстНСТР = НСтр("en='Found the intersection in the work schedule resource: start ""%1"", end ""%2"","
						"master ""%3"", document ""%4""';ru='Обнаружены пересечения в графике работы ресурса: начало ""%1"", окончание ""%2"","
						"мастер ""%3"", документ ""%4""'");
						ТекстНСТР = СтрШаблон(ТекстНСТР,
						Формат(Дата_ + (НачалоРабочегоВремени_ - '00010101'), "ДФ='дд.ММ.гггг ЧЧ:мм'"),
						Формат(Дата_ + (КонецРабочегоВремени_ - '00010101'), "ДФ='дд.ММ.гггг ЧЧ:мм'"),
						Мастер, ТекСтрокаПересечение.Документ);
					КонецЕсли;
					
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
					Прервать;
				КонецЕсли;
				
				ТекущийДень = ТекущийДень + 3600*24;
				Разница = Разница - 1;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Рез;
	
КонецФункции

#КонецОбласти


#Область ОбработчикиСобытий

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	уатПроведение.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	Документы.уатЗаявкаНаРемонт.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	уатПроведение.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	уатПроведение.ОтразитьЗаявкиНаРемонт(ДополнительныеСвойства, Движения, Отказ);
	уатПроведение.ОтразитьСостояниеТС(ДополнительныеСвойства, Движения, Отказ);
	
	Если ЗначениеЗаполнено(ТС) И ПроверитьКорректностьДвижений(Отказ) Тогда
		ВыполнитьДвиженияПоПланированиюТС();
		ВыполнитьДвиженияПоПланированиюРемонтов();
	КонецЕсли;  
	
	уатПроведение.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	Документы.уатЗаявкаНаРемонт.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);
	
	уатУчетОригиналовПервичныхДокументов.СформироватьДвиженияРеестрДокументов(Ссылка);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа
	уатПроведение.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	уатПроведение.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	уатПроведение.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	// Контроль при отмене проведения не выполняем
	//Документы.уатЗаявкаНаРемонт.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ, Истина);

КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	Заголовок = уатОбщегоНазначенияТиповые.уатПредставлениеДокументаПриПроведении(ЭтотОбъект);
	
	СтруктураПолей = Новый Структура("Работа, Количество");
	уатОбщегоНазначенияТиповые.уатПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Работы", СтруктураПолей, Отказ, 
																	Заголовок);
	
	уатОбщегоНазначенияТиповые.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Материалы", , Отказ, Заголовок);
	
	Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") 
		И СтатусВыполнения <> Справочники.уатСтатусы_уэ.Новый Тогда
		ПроверяемыеРеквизиты.Добавить("ДоговорКонтрагента");
	КонецЕсли;
	
	уатОбщегоНазначения.ПроверкаЗаполненияПодразделения(Организация, Подразделение, Отказ, Заголовок);
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	СозданВодителем  = Ложь;
	Водитель                     = Справочники.ФизическиеЛица.ПустаяСсылка();
	СтатусВыполнения             = Справочники.уатСтатусы_уэ.Новый;
	СтатусПодтвержденияВодителем = Справочники.уатСтатусы_уэ.ПустаяСсылка();
	КомментарийВодителя          = "";
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	уатОбщегоНазначенияСервер.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.уатДТП") Тогда
		Организация   	  = ДанныеЗаполнения.Организация;
		Подразделение 	  = ДанныеЗаполнения.Подразделение;
		ТС			  	  = ДанныеЗаполнения.ТС;
		ДокументОснование = ДанныеЗаполнения.Ссылка;
		Комментарий   	  = ДанныеЗаполнения.Комментарий;
		ПричинаОбращения  = НСтр("en='After road accident. Document number of road accident';ru='После ДТП. Номер документа ДТП'") +" " + ДанныеЗаполнения.Номер;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	// уатСогласованиеДокументов
	уатСогласованиеДокументовСервер.ПередЗаписью(ЭтотОбъект, РежимЗаписи, Отказ);
	// Конец уатСогласованиеДокументов
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		уатЗащищенныеФункцииСервер_проф.ПолучитьСформироватьШтрихкодОбъекта(Ссылка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
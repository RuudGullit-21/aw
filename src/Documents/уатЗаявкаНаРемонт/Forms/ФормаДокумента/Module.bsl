
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	уатЗащищенныеФункцииСервер.уатДокументФормаЭлементаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, Объект, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.УчетОригиналовПервчиныхДокументов
	УчетОригиналовПервичныхДокументов.ПриСозданииНаСервере_ФормаДокумента(ЭтотОбъект, Элементы.ГруппаУчетПервичныхДокументов);
	уатУчетОригиналовПервичныхДокументов.ОтобразитьДатуПоследнегоИзмененияПервичныхДокументов(ЭтотОбъект, Элементы.ГруппаУчетПервичныхДокументов);
	// Конец СтандартныеПодсистемы.УчетОригиналовПервчиныхДокументов

	// Установка реквизитов формы.
	уатОбщегоНазначенияСервер.НастроитьПолеЕдиницыИзмерения(ЭтотОбъект, "Материалы");
	уатОбщегоНазначенияСервер.НастроитьПолеПодразделение(Элементы.Подразделение, "Объект.Организация");
	
	Если Параметры.Свойство("СозданиеИзАРММеханика") Тогда
		Если Параметры.Свойство("ТС") Тогда
			Объект.ТС = Параметры.ТС;
		КонецЕсли;
		Если Параметры.Свойство("ВидОбслуживания") Тогда
			Объект.ВидОбслуживания = Параметры.ВидОбслуживания;
			МассивРабот = уатОбщегоНазначения.НайтиРаботыПоОбслуживанию(Объект.ВидОбслуживания, Объект.ТС);
			ДобавитьРаботуПоОбслуживаниюЗаполнение(Объект.ТС, МассивРабот);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СтатусВыполнения) Тогда 
		Объект.СтатусВыполнения = Справочники.уатСтатусы_уэ.Новый;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		ДатаДокумента = Объект.Дата;
		Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
			ДатаДокумента = ТекущаяДата();
		КонецЕсли;
	
		Объект.СпособРемонта = ?(Объект.СпособРемонта.Пустая(), 
								Перечисления.уатСпособыРемонта.РемЗона, Объект.СпособРемонта);
		Объект.ДатаНачала    = ?(Объект.ДатаНачала = '00010101', НачалоДня(ДатаДокумента) + 
			(уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
			ПланыВидовХарактеристик.уатПраваИНастройки.ВремяНачалаРЛ) - '00010101'), Объект.ДатаНачала);
		Объект.ДатаОкончания = ?(Объект.ДатаОкончания = '00010101', НачалоДня(ДатаДокумента) +
			(уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
			ПланыВидовХарактеристик.уатПраваИНастройки.ВремяОкончанияРЛ) - '00010101'), Объект.ДатаОкончания);
		
		Если НЕ ЗначениеЗаполнено(Объект.Контрагент) тогда
			Объект.Контрагент = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнойСклад");
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.МестоРемонта) Тогда
		КонтрагентПриИзмененииСервер();
		Если Элементы.МестоРемонта.СписокВыбора.НайтиПоЗначению(Объект.МестоРемонта) = Неопределено Тогда
			Элементы.МестоРемонта.СписокВыбора.Добавить(Объект.МестоРемонта);
		КонецЕсли;
	КонецЕсли;

	УстановитьУсловноеОформлениеПолейСтатусов();
	
	Если НЕ ПравоДоступа("Редактирование", Метаданные.Документы.уатЗаявкаНаРемонт) Тогда
		Элементы.РаботыЗаполнитьРаботуПоОбслуживанию.Доступность = Ложь;
		Элементы.МатериалыМатериалыПодбор.Доступность = Ложь;
	КонецЕсли;
	
	Если ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.уатВзаиморасчетыСКонтрагентами) Тогда
		Элементы.ГруппаДолгКонтрагента.Видимость = Истина;
	Иначе 
		Элементы.ГруппаДолгКонтрагента.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.Водитель.Видимость = Объект.СозданВодителем;
	
	// уатСогласованиеДокументов
	ИмяДокументаСогласование = "ЗаявкаНаРемонт";
	уатСогласованиеДокументовСервер.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец уатСогласованиеДокументов
	
	//ПодключаемоеОборудование
	уатОбщегоНазначения_проф.НастроитьПодключаемоеОборудование(ЭтотОбъект);
	//Конец ПодключаемоеОборудование
	
	// уатУправлениеАвтотранспортом.МодификацияКонфигурации
	уатМодификацияКонфигурацииПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	// Конец уатУправлениеАвтотранспортом.МодификацияКонфигурации
	
	ИспользоватьМобильноеПриложение              = ПолучитьФункциональнуюОпцию("уатМобильноеПриложениеВодителя");
	Элементы.ГруппаМобильноеПриложение.Видимость = ИспользоватьМобильноеПриложение;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// уатУправлениеАвтотранспортом.МодификацияКонфигурации
	уатМодификацияКонфигурацииКлиентПереопределяемый.ПриОткрытии(ЭтотОбъект, Отказ);
	// Конец уатУправлениеАвтотранспортом.МодификацияКонфигурации

	уатЗащищенныеФункцииКлиент.уатДокументФормаЭлементаПриОткрытии(Отказ, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	//ПодключаемоеОборудование
	уатОбщегоНазначенияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(ЭтотОбъект);
	//Конец ПодключаемоеОборудование
	
	Если Объект.СпособРемонта = ПредопределенноеЗначение("Перечисление.уатСпособыРемонта.Автосервис") Тогда
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
	Иначе
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Склады");
	КонецЕсли;
	
	Если Объект.СпособРемонта = ПредопределенноеЗначение("Перечисление.уатСпособыРемонта.Автосервис") Тогда
		Элементы.МестоРемонта.ТолькоПросмотр = Ложь;
		Элементы.Контрагент.Заголовок   = НСтр("en='Car service';ru='Автосервис'");
		Элементы.Контрагент.Подсказка   = НСтр("en='Use this field to specify the service center that performed the repairs.';ru='В этом поле необходимо указать автосервис, который выполнял ремонт.'");
		Элементы.МестоРемонта.Подсказка = Нстр("en = 'It is substituted from the table ""Destinations"" of the selected auto service'; ru = 'Подставляется из табличной части ""Пункты назначения"" выбранного автосервиса'");
	Иначе
		Элементы.МестоРемонта.ТолькоПросмотр = Истина;
		Элементы.Контрагент.Заголовок   = НСтр("en='Warehouse';ru='Склад'");
		Элементы.Контрагент.Подсказка   = НСтр("en='In this field you must specify the warehouse from which you want to checkout materials.';ru='В этом поле необходимо указать склад, с которого необходимо оформить выдачу материалов.'");
		Элементы.МестоРемонта.Подсказка = Нстр("en = 'Substituted from the address specified in stock'; ru = 'Подставляется из адреса указанного в выбранном складе'");
	КонецЕсли;
	
	СтатустДокументаНовый = Объект.СтатусВыполнения = ПредопределенноеЗначение("Справочник.уатСтатусы_уэ.Новый");
	Элементы.Контрагент.АвтоОтметкаНезаполненного         = НЕ СтатустДокументаНовый;
	Элементы.ДоговорКонтрагента.АвтоОтметкаНезаполненного = НЕ СтатустДокументаНовый;
	
	//Элементы.ДекорацияДоговор.Видимость	 = НЕ Объект.СпособРемонта = ПредопределенноеЗначение("Перечисление.уатСпособыРемонта.Автосервис");
	Элементы.ГруппаДоговор.Видимость	 = Объект.СпособРемонта = ПредопределенноеЗначение("Перечисление.уатСпособыРемонта.Автосервис");
	УстановитьОтборВидовОбслуживания();
	
	// уатСогласованиеДокументов
	уатСогласованиеДокументовКлиент.ОбновитьСтатусСогласования(ЭтотОбъект);
	// Конец уатСогласованиеДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ИмяСобытия = "ОбновлениеМестРемонтов" И Параметр = Объект.Контрагент Тогда
		КонтрагентПриИзмененииСервер();
	КонецЕсли;
	
	// уатСогласованиеДокументов
	уатСогласованиеДокументовКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр);
	// Конец уатСогласованиеДокументов
	
	// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов	
	УчетОригиналовПервичныхДокументовКлиент.ОбработчикОповещенияФормаДокумента(ИмяСобытия, ЭтотОбъект);
	// Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Оповещ = Новый ОписаниеОповещения("ДобавитьНоменклатуруВТЧПоШтрихкоду", ЭтотОбъект);
		уатОбщегоНазначенияКлиент.ОбработатьСобытиеПодключаемогоОборудования(ИмяСобытия, Параметр, Источник,
			Новый Структура("Оповещение", Оповещ));
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ИсточникВыбора.ИмяФормы = "Обработка.уатПодборНоменклатуры.Форма.Форма" или ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.Форма" Тогда
		ОбработкаПодбора(Новый ОписаниеОповещения("ОбработкаВыбораЗавершение1", ЭтотОбъект, Новый Структура("ВыбранноеЗначение, ИсточникВыбора", ВыбранноеЗначение, ИсточникВыбора)), ИсточникВыбора.ИмяТаблицы, ВыбранноеЗначение);
        Возврат;
	ИначеЕсли   ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровВДокументЗакупки.Форма.Форма" Тогда
		ОбработкаПодбора(Новый ОписаниеОповещения("ОбработкаВыбораЗавершение", ЭтотОбъект), "Материалы", ВыбранноеЗначение);
        Возврат;
	КонецЕсли;
	ОбработкаВыбораФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораЗавершение1(Результат, ДополнительныеПараметры) Экспорт
    
    ВыбранноеЗначение = ДополнительныеПараметры.ВыбранноеЗначение;
    ИсточникВыбора = ДополнительныеПараметры.ИсточникВыбора;
    
    
    ОбработкаВыбораФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ОбработкаВыбораФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораФрагмент()
    
    Модифицированность = Истина;

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// уатСогласованиеДокументов
	уатСогласованиеДокументовКлиент.ПослеЗаписи(ЭтотОбъект);
	// Конец уатСогласованиеДокументов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	// ПодключаемоеОборудование
	уатОбщегоНазначенияКлиент.ОбработкаВнешнегоСобытия(Источник, Событие, Данные);
	// Конец ПодключаемоеОборудование
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

// уатУправлениеАвтотранспортом.МодификацияКонфигурации
&НаКлиенте
Процедура Подключаемый_ПолеФормыНажатие(Элемент, СтандартнаяОбработка)
	
	уатМодификацияКонфигурацииКлиентПереопределяемый.ПолеФормыНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры
// Конец уатУправлениеАвтотранспортом.МодификацияКонфигурации

&НаКлиенте
Процедура Подключаемый_ДекорацияСостояниеОригиналаНажатие()

	// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	УчетОригиналовПервичныхДокументовКлиент.ОткрытьМенюВыбораСостояния(ЭтотОбъект, Элементы.ДекорацияСостояниеОригинала);
	//Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов

КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	ДоговорПередИзменением = Договор;
	Договор = Объект.ДоговорКонтрагента;
	
	Если ДоговорПередИзменением <> Объект.ДоговорКонтрагента Тогда
		// уатУправлениеАвтотранспортом.МодификацияКонфигурации
		уатМодификацияКонфигурацииКлиентПереопределяемый.ПолеФормыПриИзменении(ЭтотОбъект, Элементы.ДоговорКонтрагента);
		// Конец уатУправлениеАвтотранспортом.МодификацияКонфигурации
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтруктураОтбор = Новый Структура("Организация", Объект.Организация);
	уатИнтерфейсВводаТС.РеквизитТСНачалоВыбора(Элемент, Объект.ТС, ДанныеВыбора, СтандартнаяОбработка, СтруктураОтбор);
КонецПроцедуры

&НаКлиенте
Процедура ТСПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.ТС)
		И уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.ТС, "ПринадлежностьТС")
		= ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное") Тогда
		МестонахождениеТС = уатОбщегоНазначения.МестонахождениеТС(Объект.ТС, Объект.ДатаНачала);
	КонецЕсли;
	УстановитьОтборВидовОбслуживания();
КонецПроцедуры

&НаКлиенте
Процедура ТСАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СтруктураОтбор = Новый Структура("Организация", Объект.Организация);
	уатИнтерфейсВводаТС.РеквизитТСАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка, СтруктураОтбор);
КонецПроцедуры

&НаКлиенте
Процедура ТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтруктураОтбор = Новый Структура("Организация", Объект.Организация);
	уатИнтерфейсВводаТС.РеквизитТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка, СтруктураОтбор);
КонецПроцедуры

&НаКлиенте
Процедура ВидОбслуживанияПриИзменении(Элемент)
	ДобавитьРаботуПоОбслуживанию();
	ВывестиПредупреждениеООтбореВидовОбслуживания(Объект.ВидОбслуживания);
КонецПроцедуры

&НаКлиенте
Процедура РаботыРаботаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ПараметрыОткрытия = Новый Структура;
	Если ЗначениеЗаполнено(Объект.ТС) И уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ОтборРаботПоМоделямТС")) Тогда
		ПараметрыОткрытия.Вставить("Отбор", 
		Новый Структура("МодельТС", уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(Объект.ТС, "Модель")));
	КонецЕсли;
		
	ПараметрыОткрытия.Вставить("МодельТСИзДокумента", уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.ТС, "Модель"));
	
	ОповещениеОВыбореРаботы = Новый ОписаниеОповещения("РаботыРаботаНачалоВыбораПродолжение", ЭтотОбъект);
	
	ОткрытьФорму("Справочник.уатРаботыПоРемонту.ФормаВыбора", ПараметрыОткрытия, Элемент,,,, ОповещениеОВыбореРаботы, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
КонецПроцедуры

&НаКлиенте
Процедура РаботыРаботаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ПриЗакрытииФормы = Новый ОписаниеОповещения("ПослеЗакрытияФормыПодбора",ЭтотОбъект);
		ОткрытьФорму("ОбщаяФорма.уатФормаПодбораСвязанныхРаботЗапчастей", Новый Структура("РаботаПоОбслуживанию", 
		ВыбранноеЗначение),,,ВариантОткрытияОкна.ОтдельноеОкно,,ПриЗакрытииФормы,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
КонецПроцедуры

// Динамически подключаемый обработчик выбора работы.
&НаКлиенте
Процедура РаботыРаботаНачалоВыбораПродолжение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ТекСтрока = Элементы.Работы.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не РезультатЗакрытия = Неопределено Тогда
		ТекСтрока.Работа = РезультатЗакрытия;
		ТекСтрока.Количество = 1;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РаботыРаботаПриИзменении(Элемент)
	ТекСтрока = Элементы.Работы.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекСтрока.Работа) Тогда
		ТекСтрока.Количество = ПолучитьКоличествоНЧРаботы(уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.ТС,
								"Модель"), ТекСтрока.работа);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МатериалыНоменклатураПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Материалы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Номенклатура",	 СтрокаТабличнойЧасти.Номенклатура);
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
КонецПроцедуры

&НаКлиенте
Процедура МатериалыЕдиницаИзмеренияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатОбщегоНазначенияКлиент.ТЧТоварыЕдиницаИзмеренияНачалоВыбора(Элементы.Материалы.ТекущиеДанные.Номенклатура, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

&НаКлиенте
Процедура КомментарийВодителяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.КомментарийВодителя");
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	Объект.ДатаНачала    = НачалоДня(Объект.Дата) +
		(уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ВремяНачалаРЛ")) - '00010101');
	Объект.ДатаОкончания = НачалоДня(Объект.Дата) +
		(уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ВремяОкончанияРЛ")) - '00010101');
	УстановитьОтборВидовОбслуживания();
	// уатСогласованиеДокументов
	уатСогласованиеДокументовКлиент.ОрганизацияПодразделениеПриИзменении(ЭтотОбъект);
	// Конец уатСогласованиеДокументов		
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	КонтрагентПриИзмененииСервер();
КонецПроцедуры

&НаКлиенте
Процедура СпособРемонтаПриИзменении(Элемент)
	
	Если Объект.СпособРемонта = ПредопределенноеЗначение("Перечисление.уатСпособыРемонта.Автосервис") Тогда
		Если ТипЗнч(Объект.СпособРемонта) <> Тип("СправочникСсылка.Контрагенты") Тогда
			Объект.Контрагент   = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
			Объект.МестоРемонта = ПредопределенноеЗначение("Справочник.уатПунктыНазначения.ПустаяСсылка");
			Элементы.МестоРемонта.СписокВыбора.Очистить();
		КонецЕсли;
		Элементы.МестоРемонта.Подсказка = Нстр("en = 'It is substituted from the table ""Destinations"" of the selected auto service'; ru = 'Подставляется из табличной части ""Пункты назначения"" выбранного автосервиса'");
		Элементы.МестоРемонта.ТолькоПросмотр = Ложь;
		Элементы.Контрагент.ОграничениеТипа  = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
		Элементы.ГруппаДоговор.Видимость	 = Истина;
		
		СтатустДокументаНовый = Объект.СтатусВыполнения = ПредопределенноеЗначение("Справочник.уатСтатусы_уэ.Новый");
		Элементы.Контрагент.АвтоОтметкаНезаполненного = НЕ СтатустДокументаНовый;
		Элементы.ДоговорКонтрагента.АвтоОтметкаНезаполненного = НЕ СтатустДокументаНовый;
		
	Иначе
		Если ТипЗнч(Объект.Контрагент) <> Тип("СправочникСсылка.Склады") Тогда
			Объект.Контрагент   = ПредопределенноеЗначение("Справочник.Склады.ПустаяСсылка");
			Объект.МестоРемонта = ПредопределенноеЗначение("Справочник.уатПунктыНазначения.ПустаяСсылка");
			Элементы.МестоРемонта.СписокВыбора.Очистить();
		КонецЕсли;
		Элементы.МестоРемонта.Подсказка = Нстр("en = 'Substituted from the address specified in stock'; ru = 'Подставляется из адреса указанного в выбранном складе'");
		Элементы.МестоРемонта.ТолькоПросмотр = Истина;
		Элементы.Контрагент.ОграничениеТипа  = Новый ОписаниеТипов("СправочникСсылка.Склады");
		Элементы.ГруппаДоговор.Видимость	 = Ложь;
	КонецЕсли;
	
	Если Объект.СпособРемонта = ПредопределенноеЗначение("Перечисление.уатСпособыРемонта.Автосервис") Тогда
		Элементы.Контрагент.Заголовок = НСтр("en='Car service';ru='Автосервис'");
		Элементы.Контрагент.Подсказка = НСтр("en='Use this field to specify the service center that performed the repairs.';ru='В этом поле необходимо указать автосервис, который выполнял ремонт.'");
	Иначе
		Элементы.Контрагент.Заголовок = НСтр("en='Warehouse';ru='Склад'");
		Элементы.Контрагент.Подсказка = НСтр("en='In this field you must specify the warehouse from which you want to checkout materials.';ru='В этом поле необходимо указать склад, с которого необходимо оформить выдачу материалов.'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусВыполненияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("Отбор", Новый Структура("ДействуетНаЗаявкиНаРемонт", Истина));
	Оповещение = Новый ОписаниеОповещения("СтатусВыполненияПослеВыбораСтатуса", ЭтотОбъект);
	ОткрытьФорму("Справочник.уатСтатусы_уэ.ФормаВыбора", ПараметрыФормы, ЭтотОбъект,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура СозданВодителемПриИзменении(Элемент)
	Объект.Водитель	 = ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");
	Элементы.Водитель.Видимость = Объект.СозданВодителем;
КонецПроцедуры

&НаКлиенте
Процедура ТребуетСогласованияПриИзменении(Элемент)
	
	// уатСогласованиеДокументов
	уатСогласованиеДокументовКлиент.ТребуетСогласованияПриИзменении(ЭтотОбъект);
	// Конец уатСогласованиеДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСогласованНажатие(Элемент)
	
	// уатСогласованиеДокументов
	уатСогласованиеДокументовКлиент.НадписьСогласованНажатие(ЭтотОбъект);
	// Конец уатСогласованиеДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура МастерОткрытие(Элемент, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ОткрытьФормуСотрудника(Объект.Мастер, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	мВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком");
	
	уатОбщегоНазначенияТиповыеКлиент.уатНачалоВыбораЗначенияДоговораКонтрагента(Объект, ЭтотОбъект, Элемент, Объект.Контрагент, 
		Объект.ДоговорКонтрагента, мВидДоговора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаСоздание(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВидДоговораДоступныеЗначения = Новый Массив;
	
	мВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком");
	ВидДоговораДоступныеЗначения.Добавить(мВидДоговора);
	
	ПараметрыФормы = Новый Структура(); 
	ПараметрыФормы.Вставить("Владелец", Объект.Контрагент);
	ПараметрыФормы.Вставить("ВидДоговораДоступныеЗначения", ВидДоговораДоступныеЗначения);
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// уатУправлениеАвтотранспортом.МодификацияКонфигурации
&НаКлиенте
Процедура Подключаемый_уатВыполнитьКоманду(Команда)
	
	уатМодификацияКонфигурацииКлиентПереопределяемый.ВыполнитьПодключаемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры
// Конец уатУправлениеАвтотранспортом.МодификацияКонфигурации

&НаКлиенте
Процедура МатериалыПодбор(Команда)
	ПараметрыПодбора = ПолучитьПараметрыПодбора("Материалы");
	Если ПараметрыПодбора <> Неопределено Тогда
		уатОбщегоНазначенияТиповыеКлиент.уатОткрытьПодборНоменклатуры(ЭтотОбъект,ПараметрыПодбора,УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРаботуПоОбслуживанию(Команда)
	Если НЕ ЗначениеЗаполнено(Объект.ТС) ИЛИ НЕ ЗначениеЗаполнено(Объект.ВидОбслуживания) Тогда
		ТекстНСТР = НСтр("en='To perform the operation, the attributes of ""Vehicle"" and ""Type of repair"" should be indicated.';ru='Для выполнения операции должны быть указаны реквизиты ""ТС"" и ""Вид ремонта"".'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		Возврат;
	КонецЕсли;
	
	ДобавитьРаботуПоОбслуживанию();
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	Оповещ = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект);
	ПоказатьВводЗначения(Оповещ, "", "Введите штрихкод номенклатуры", Тип("Строка"));
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(Результат, ДопПараметры) Экспорт
	Если ЗначениеЗаполнено(Результат) Тогда
		ТекНоменклатура = уатЗащищенныеФункцииСервер_проф.ПолучитьОбъектПоШтрихкоду(Результат);
		ДобавитьНоменклатуруВТЧПоШтрихкоду(Новый Структура("Штрихкод, Объект", Результат, ТекНоменклатура));
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// Получает набор данных с сервера для процедуры НоменклатураПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.ЕдиницаХраненияОстатков);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

&НаСервереБезКонтекста
Функция ЭтоУслуга(Знач Номенклатура)
	
	Возврат Номенклатура.Услуга;
	
КонецФункции // ЭтоУслуга()

&НаСервере
Функция ПолучитьКоличествоНЧРаботы(Модель, Работа)
	Возврат Справочники.уатРаботыПоРемонту.ПолучитьКоличествоНЧРаботы(Модель, Работа);
КонецФункции

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
&НаКлиенте
Процедура ОбработкаПодбора(Знач Оповещение, ИмяТабличнойЧасти, ЗначениеВыбора)
	
	Если ЗначениеВыбора.Свойство("АдресПодобраннойНоменклатурыВХранилище") Тогда
		МассивТоваров = ПолучитьТоварыИзВременногоХранилища(ЗначениеВыбора.АдресПодобраннойНоменклатурыВХранилище);
	Иначе
		МассивТоваров = ПолучитьТоварыИзВременногоХранилища(ЗначениеВыбора.АдресТоваровВХранилище);
	КонецЕсли;
	
	Для Каждого ТекСтрока из МассивТоваров Цикл
		
		Если ЭтоУслуга(ТекСтрока.Номенклатура) Тогда
			ТекстНСТР = НСтр("en='In this context, services are not matched!';ru='В данном контексте услуги не подбираются!'");
			ПоказатьПредупреждение(Новый ОписаниеОповещения("ОбработкаПодбораЗавершение", ЭтотОбъект,
			Новый Структура("Оповещение", Оповещение)), ТекстНСТР);
			Возврат;
		КонецЕсли;
		
		СтруктураОтбора = Новый Структура();
		
		СтруктураОтбора.Вставить("Номенклатура",     ТекСтрока.Номенклатура);
		СтруктураОтбора.Вставить("ЕдиницаИзмерения", ТекСтрока.ЕдиницаИзмерения);
		
		МассивСтрок = Объект.Материалы.НайтиСтроки(СтруктураОтбора);
		Если МассивСтрок.Количество() = 0 Тогда
			СтрокаТабличнойЧасти = Неопределено;
		Иначе
			СтрокаТабличнойЧасти = МассивСтрок[0];
		КонецЕсли;
		
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество +   ТекСтрока.Количество;
			//РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
		Иначе
			// Не нашли - добавляем новую строку.
			СтрокаТабличнойЧасти = Объект.Материалы.Добавить();
			СтрокаТабличнойЧасти.Номенклатура	  = ТекСтрока.Номенклатура;
			СтрокаТабличнойЧасти.Количество  	  = ТекСтрока.Количество;
			СтрокаТабличнойЧасти.ЕдиницаИзмерения =  ТекСтрока.ЕдиницаИзмерения;
		КонецЕсли;
	КонецЦикла;
	Если Не Оповещение = Неопределено Тогда 
		ВыполнитьОбработкуОповещения(Оповещение);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаПодбораЗавершение(ДополнительныеПараметры) Экспорт
    
    Оповещение = ДополнительныеПараметры.Оповещение;
    
	Если Не Оповещение = Неопределено Тогда 
		ВыполнитьОбработкуОповещения(Оповещение);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыПодбора(ИмяТаблицы)

	ДатаРасчетов 	 = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	
	ЗаголовокПодбора = НСтр("en='Selection products and services in %1 (%2)';ru='Подбор номенклатуры в %1 (%2)'");
	ПредставлениеТаблицы = НСтр("en='Goods';ru='Товары'");
	ЗаголовокПодбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, Объект.Ссылка, НСтр("en='Goods';ru='Товары'"));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПоказыватьЦены", Ложь);
	ПараметрыФормы.Вставить("ЕстьЦена"      , Ложь);
	ПараметрыФормы.Вставить("ЕстьКоличество", Истина);
	ПараметрыФормы.Вставить("ДатаРасчетов"  , ДатаРасчетов);
	//ПараметрыФормы.Вставить("Валюта"        , ВалютаУпрУчета);
	
	Если Объект.СпособРемонта = ПредопределенноеЗначение("Перечисление.уатСпособыРемонта.РемЗона") Тогда 
		ПараметрыФормы.Вставить("Склад"     , Объект.Контрагент);
	КонецЕсли;
	
	ПараметрыФормы.Вставить("Заголовок"     , ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ВидПодбора"    , ПолучитьВидПодбора(ИмяТаблицы));
	ПараметрыФормы.Вставить("ИмяТаблицы"    , ИмяТаблицы);
	ПараметрыФормы.Вставить("Услуги"        , ИмяТаблицы = "Услуги");
	ПараметрыФормы.Вставить("Организация"   , Объект.Организация);
	ПараметрыФормы.Вставить("Подразделение" , Объект.Подразделение);
	ПараметрыФормы.Вставить("ПоказыватьОстатки"  , Истина);
	ПараметрыФормы.Вставить("ПоказыватьСчетУчета", Истина);
	
	Возврат ПараметрыФормы;

КонецФункции

&НаКлиенте
Функция ПолучитьВидПодбора(ИмяТаблицы)

	ВидПодбора = "";
	
	Возврат ВидПодбора;

КонецФункции

&НаСервере 
Функция ПолучитьТоварыИзВременногоХранилища(ЗначениеВыбора)
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ЗначениеВыбора);
	МассивТоваров = Новый Массив;
	Для Каждого ТекСтрока Из ТаблицаТоваров Цикл
		Структура = Новый Структура;
		Структура.Вставить("Номенклатура",ТекСтрока.Номенклатура);
		Структура.Вставить("ЕдиницаИзмерения", ТекСтрока.Номенклатура.ЕдиницаХраненияОстатков);
		Структура.Вставить("Количество",ТекСтрока.Количество);
		Структура.Вставить("Цена",ТекСтрока.Цена);
		МассивТоваров.Добавить(Структура);
	КонецЦикла;
	Возврат МассивТоваров;
КонецФункции

&НаКлиенте
Процедура ДобавитьРаботуПоОбслуживанию()
	Если НЕ ЗначениеЗаполнено(Объект.ВидОбслуживания) ИЛИ НЕ ЗначениеЗаполнено(Объект.ТС) Тогда
		Возврат;
	КонецЕсли;
	
	МассивРабот = уатОбщегоНазначения.НайтиРаботыПоОбслуживанию(Объект.ВидОбслуживания, Объект.ТС);
	Если МассивРабот.Количество() <> 0  Тогда
		ДопПараметры = Новый Структура("МассивРабот, ТС", МассивРабот, Объект.ТС);
		ОповещениеВопрос = Новый ОписаниеОповещения("ДобавитьРаботуПоОбслуживаниюОтвет", ЭтотОбъект, ДопПараметры);
		ТекстНСТР = НСтр("en='Complete the service work according to repair type ""%1""?';ru='Заполнить работу по обслуживанию согласно виду ремонта ""%1""?'");
		ТекстНСТР = СтрШаблон(ТекстНСТР, Объект.ВидОбслуживания);
		ПоказатьВопрос(ОповещениеВопрос, ТекстНСТР, РежимДиалогаВопрос.ОКОтмена);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьРаботуПоОбслуживаниюОтвет(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.ОК Тогда
		ДобавитьРаботуПоОбслуживаниюЗаполнение(ДопПараметры.ТС, ДопПараметры.МассивРабот);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ДобавитьРаботуПоОбслуживаниюЗаполнение(ТС, МассивРабот)

	Для Каждого ТекСтрока Из МассивРабот Цикл
		Если ТипЗнч(ТекСтрока.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
			ТекСтроки = Объект.Материалы.НайтиСтроки(Новый Структура("Номенклатура", ТекСтрока.Номенклатура));
			Если ТекСтроки.Количество() = 0 Тогда
				НоваяСтрокаМатериал = Объект.Материалы.Добавить();
			Иначе
				НоваяСтрокаМатериал = ТекСтроки[0];
			КонецЕсли;
			
			НоваяСтрокаМатериал.Номенклатура = ТекСтрока.Номенклатура;
			НоваяСтрокаМатериал.Количество   = НоваяСтрокаМатериал.Количество + ТекСтрока.Количество;
			НоваяСтрокаМатериал.ЕдиницаИзмерения = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(НоваяСтрокаМатериал.Номенклатура, "ЕдиницаХраненияОстатков");
		Иначе
			
			ТекСтроки = Объект.Работы.НайтиСтроки(Новый Структура("Работа", ТекСтрока.Номенклатура));
			Если ТекСтроки.Количество() = 0 Тогда
				НоваяСтрокаМатериал = Объект.Работы.Добавить();
			Иначе
				НоваяСтрокаМатериал = ТекСтроки[0];
			КонецЕсли;
			
			НоваяСтрокаМатериал.Работа     = ТекСтрока.Номенклатура;
			
			КоличествоНЧ = ПолучитьКоличествоНЧРаботы(ТС.Модель, ТекСтрока.Номенклатура);
			НоваяСтрокаМатериал.Количество = НоваяСтрокаМатериал.Количество + (КоличествоНЧ * ТекСтрока.Количество);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура КонтрагентПриИзмененииСервер()
	
	Элементы.МестоРемонта.СписокВыбора.Очистить();
	Если ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Ссылка", Объект.Контрагент);
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КонтрагентыПунктыНазначения.ПунктНазначения КАК ПунктНазначения,
		|	КонтрагентыПунктыНазначения.КонтактноеЛицо КАК КонтактноеЛицо,
		|	1 КАК Порядок
		|ИЗ
		|	Справочник.Контрагенты.ПунктыНазначения КАК КонтрагентыПунктыНазначения
		|ГДЕ
		|	КонтрагентыПунктыНазначения.Ссылка = &Ссылка
		|	И КонтрагентыПунктыНазначения.Основной
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КонтрагентыПунктыНазначения.ПунктНазначения,
		|	КонтрагентыПунктыНазначения.КонтактноеЛицо,
		|	2
		|ИЗ
		|	Справочник.Контрагенты.ПунктыНазначения КАК КонтрагентыПунктыНазначения
		|ГДЕ
		|	КонтрагентыПунктыНазначения.Ссылка = &Ссылка
		|	И НЕ КонтрагентыПунктыНазначения.Основной
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			Если НЕ ЗначениеЗаполнено(Объект.МестоРемонта) Тогда
				Объект.МестоРемонта = Выборка.ПунктНазначения;
			КонецЕсли;
			Элементы.МестоРемонта.СписокВыбора.Добавить(Выборка.ПунктНазначения);
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.Склады") Тогда
		Объект.МестоРемонта  = уатОбщегоНазначения_уэ.АдресСклада(Объект.Контрагент);
		Если ЗначениеЗаполнено(Объект.МестоРемонта) Тогда
			Элементы.МестоРемонта.СписокВыбора.Добавить(Объект.МестоРемонта);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеПолейСтатусов()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатСтатусы_уэ.Ссылка КАК Ссылка,
	|	уатСтатусы_уэ.Наименование КАК Наименование,
	|	уатСтатусы_уэ.ЦветФонаПоУмолчанию КАК ЦветФонаПоУмолчанию,
	|	уатСтатусы_уэ.ЦветТекстаПоУмолчанию КАК ЦветТекстаПоУмолчанию
	|ИЗ
	|	Справочник.уатСтатусы_уэ КАК уатСтатусы_уэ
	|ГДЕ
	|	НЕ уатСтатусы_уэ.ПометкаУдаления
	|	И уатСтатусы_уэ.ДействуетНаЗаявкиНаРемонт";
	
	ВыборкаЦвета = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЦвета.Следующий() Цикл 
		ЦветФона   = Неопределено;
		ЦветТекста = Неопределено;
		
		ХранилищеЦветФона = ВыборкаЦвета.ЦветФонаПоУмолчанию;
		Если Не ХранилищеЦветФона = Неопределено Тогда 
			ДанныеЦветФона = ХранилищеЦветФона.Получить();
			Если Не ДанныеЦветФона = Неопределено И ТипЗнч(ДанныеЦветФона) = Тип("Цвет") Тогда
				ЦветФона = ДанныеЦветФона;
			КонецЕсли;
		КонецЕсли;
		
		ХранилищеЦветТекста = ВыборкаЦвета.ЦветТекстаПоУмолчанию;
		Если Не ХранилищеЦветТекста = Неопределено Тогда 
			ДанныеЦветТекста = ХранилищеЦветТекста.Получить();
			Если Не ДанныеЦветТекста = Неопределено И ТипЗнч(ДанныеЦветТекста) = Тип("Цвет") Тогда
				ЦветТекста = ДанныеЦветТекста;
			КонецЕсли;
		КонецЕсли;
		
		Если ЦветТекста = Неопределено И ЦветФона = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		// Установка цвета реквизита шапки
		Если ВыборкаЦвета.Ссылка = Объект.СтатусВыполнения Тогда 
			Если Не ЦветТекста = Неопределено Тогда 
				Элементы.СтатусВыполнения.ЦветТекста = ЦветТекста;
			КонецЕсли;
			
			Если Не ЦветФона = Неопределено Тогда 
				Элементы.СтатусВыполнения.ЦветФона = ЦветФона;
			КонецЕсли;
			
			Прервать;
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусВыполненияПослеВыбораСтатуса(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Объект.СтатусВыполнения = РезультатЗакрытия;
	УстановитьУсловноеОформлениеПолейСтатусов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыПодбора(ЗначенияЗаполнения,Параметр) Экспорт	
	Если НЕ ЗначенияЗаполнения = Неопределено
		И ЗначенияЗаполнения.Свойство("Работы")
		И ЗначенияЗаполнения.Свойство("Запчасти")Тогда
		
		Для Каждого ТекСтрока Из ЗначенияЗаполнения.Запчасти Цикл
			мсвСтрок = Объект.Материалы.НайтиСтроки(Новый Структура("Номенклатура", ТекСтрока.Номенклатура));
			Если мсвСтрок.Количество() <> 0 Тогда
				НоваяСтрокаМатериал = мсвСтрок[0];
			Иначе
				НоваяСтрокаМатериал = Объект.Материалы.Добавить();
			КонецЕсли;
			НоваяСтрокаМатериал.Номенклатура = ТекСтрока.Номенклатура;
			НоваяСтрокаМатериал.Количество   = НоваяСтрокаМатериал.Количество + ТекСтрока.Количество;
			НоваяСтрокаМатериал.ЕдиницаИзмерения = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(НоваяСтрокаМатериал.Номенклатура, "ЕдиницаХраненияОстатков");
		КонецЦикла;
		
		Для Каждого ТекСтрока Из ЗначенияЗаполнения.Работы Цикл
			мсвСтрок = Объект.Работы.НайтиСтроки(Новый Структура("Работа", ТекСтрока.Номенклатура));
			Если мсвСтрок.Количество() <> 0 Тогда
				НоваяСтрокаМатериал = мсвСтрок[0];
			Иначе
				НоваяСтрокаМатериал = Объект.Работы.Добавить();
			КонецЕсли;
			НоваяСтрокаМатериал.Работа     = ТекСтрока.Номенклатура;
			
			КоличествоНЧ = ПолучитьКоличествоНЧРаботы(уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.ТС, "Модель"), ТекСтрока.Номенклатура);
			НоваяСтрокаМатериал.Количество = НоваяСтрокаМатериал.Количество + (КоличествоНЧ * ТекСтрока.Количество);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборВидовОбслуживания()
	
	РазрешитьВыборТолькоЗакрепленныхВидовОбслуживания = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.РазрешитьВыборТолькоЗакрепленныхВидовОбслуживания"));
	
	Если РазрешитьВыборТолькоЗакрепленныхВидовОбслуживания = ПредопределенноеЗначение("Перечисление.уатВидыКонтроля.Запрещать") Тогда
		МассивВидовОбслуживания = уатОбщегоНазначения.ПолучитьРазрешенныеВидыТО(Объект.ТС);
		
		МассивПарамВыбора = Новый Массив();
		МассивПарамВыбора.Добавить(Новый ПараметрВыбора("Отбор.Ссылка",
			Новый ФиксированныйМассив(МассивВидовОбслуживания)));
		
		Элементы.ВидОбслуживания.ПараметрыВыбора  = Новый ФиксированныйМассив(МассивПарамВыбора);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВывестиПредупреждениеООтбореВидовОбслуживания(ВидОбслуживания)
	
	Если РазрешитьВыборТолькоЗакрепленныхВидовОбслуживания = ПредопределенноеЗначение("Перечисление.уатВидыКонтроля.Предупреждать") Тогда
		МассивВидовОбслуживания = уатОбщегоНазначения.ПолучитьРазрешенныеВидыТО(Объект.ТС);
		
		НайтиВидОбслуживания = МассивВидовОбслуживания.Найти(ВидОбслуживания);
		Если НайтиВидОбслуживания = Неопределено Тогда
			ТекстНСТР = СтрШаблон(НСтр("ru='Вид ремонта %1 не запланирован в модели ТС'"), ВидОбслуживания);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНоменклатуруВТЧПоШтрихкоду(Результат, ДопПараметры = Неопределено) Экспорт
	
	Если Результат = Неопределено ИЛИ НЕ ЗначениеЗаполнено(Результат.Объект)
		ИЛИ ТипЗнч(Результат.Объект) <> Тип("СправочникСсылка.Номенклатура") Тогда
		Возврат;
	КонецЕсли;
	Номенклатура = Результат.Объект;
	
	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	// Если найдем - увеличим количество; не найдем - добавим новую строку.
	МассивСтрок = Объект.Материалы.НайтиСтроки(Новый Структура("Номенклатура", Номенклатура));
	Если МассивСтрок.Количество() = 0 Тогда
		СтрокаТабличнойЧасти = Неопределено;
	Иначе
		СтрокаТабличнойЧасти = МассивСтрок[0];
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		// Нашли, увеличиваем количество в первой найденной строке.
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + 1;
	Иначе
		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти =  Объект.Материалы.Добавить();
		СтрокаТабличнойЧасти.Номенклатура = Номенклатура;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(
			СтрокаТабличнойЧасти.Номенклатура, "ЕдиницаХраненияОстатков");
		СтрокаТабличнойЧасти.Количество = 1;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

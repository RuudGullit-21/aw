#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатПоступлениеТоваровУслуг";
	КомандаПечати.Идентификатор = "Накладная";
	КомандаПечати.Представление = НСтр("en='Goods received note';ru='Приходная накладная'");
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатПоступлениеТоваровУслуг";
	КомандаПечати.Идентификатор = "Акт";
	КомандаПечати.Представление = НСтр("en='Act of receiving services';ru='Акт о получении услуг'");
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатПоступлениеТоваровУслуг";
	КомандаПечати.Идентификатор = "ТОРГ4";
	КомандаПечати.Представление = НСтр("en='TORG-4 (the Act of acceptance of the goods without the vendor account)';ru='ТОРГ-4 (Акт о приемке товара без счета поставщика)'");
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатПоступлениеТоваровУслуг";
	КомандаПечати.Идентификатор = "М4";
	КомандаПечати.Представление = НСтр("en='M-4 (Paying-in slip)';ru='М-4 (Приходный ордер)'");
		
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор  = "Реестр";
	КомандаПечати.Представление  = НСтр("en='Document register';ru='Реестр документов'");
	КомандаПечати.ЗаголовокФормы = НСтр("en='Register of documents ""Receipt of goods and services""';ru='Реестр документов ""Поступление товаров и услуг""'");
	КомандаПечати.Обработчик     = "уатОбщегоНазначенияТиповыеКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм     = "ФормаСписка";
	КомандаПечати.Порядок        = 100;
	
	// Печать этикеток
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор = "Этикетки";
	КомандаПечати.Представление = НСтр("ru = 'Этикетки'");
	КомандаПечати.ЗаголовокФормы = НСтр("ru='Печать этикеток номенклатуры'");
	КомандаПечати.Обработчик = "уатОбщегоНазначенияТиповыеКлиент.ВыполнитьКомандуПечатиЭтикеток";
	КомандаПечати.МенеджерПечати = "";
	КомандаПечати.ПроверкаПроведенияПередПечатью = Истина;
	КомандаПечати.Порядок = 50;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр).
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной
//                                                            параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной
//                                            параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт

	Если НЕ уатОбщегоНазначенияСервер.РазрешениеПечатиНепроведенногоДокумента(МассивОбъектов) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Накладная") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Накладная", "Приходная накладная", ПечатьПриходнаяНакладная(МассивОбъектов, ОбъектыПечати));
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Акт") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Акт", "Акт о получении услуг", ПечатьАкт(МассивОбъектов, ОбъектыПечати));
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ТОРГ4") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ТОРГ4", "ТОРГ-4 (Акт о приемке товара без счета поставщика)", ПечатьТОРГ4(МассивОбъектов, ОбъектыПечати));
		
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "М4") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "М4", "М-4 (Приходный ордер)", ПечатьМ4(МассивОбъектов, ОбъектыПечати));
		
	КонецЕсли;
	
	уатОбщегоНазначенияСервер.УстановитьРедактированиеПечатныхФормДокумента(КоллекцияПечатныхФорм);
	уатУправлениеПечатью.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов, КоллекцияПечатныхФорм);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.УправлениеДоступом

// Позволяет переопределить ограничение, указанное в модуле менеджера объекта метаданных.
//
// Параметры:
//  Ограничение - Структура:
//    * Текст                             - Строка - ограничение доступа для пользователей.
//                                          Если пустая строка, значит, доступ разрешен.
//    * ТекстДляВнешнихПользователей      - Строка - ограничение доступа для внешних пользователей.
//                                          Если пустая строка, значит, доступ запрещен.
//    * ПоВладельцуБезЗаписиКлючейДоступа - Неопределено - определить автоматически.
//                                        - Булево - если Ложь, то всегда записывать ключи доступа,
//                                          если Истина, тогда не записывать ключи доступа,
//                                          а использовать ключи доступа владельца (требуется,
//                                          чтобы ограничение было строго по объекту-владельцу).
//   * ПоВладельцуБезЗаписиКлючейДоступаДляВнешнихПользователей - Неопределено, Булево - также
//                                          как у параметра ПоВладельцуБезЗаписиКлючейДоступа.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Подразделение)";
	
	Ограничение.ТекстДляВнешнихПользователей = Ограничение.Текст;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// СтандартныеПодсистемы.ВариантыОтчетов

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВариантыОтчетов

#КонецОбласти

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	
	СтруктураДополнительныеСвойства.Вставить("МноговалютныйУчет", ПолучитьФункциональнуюОпцию("уатМноговалютныйУчет"));
	СтруктураДополнительныеСвойства.Вставить("ДатаКурса", ?(ДокументСсылка.ДатаКурса = '00010101', ДокументСсылка.Дата, ДокументСсылка.ДатаКурса));
	СтруктураДополнительныеСвойства.Вставить("КроссКурсВзаиморасчетов", ?(ДокументСсылка.КроссКурс = 0, 1, ДокументСсылка.КроссКурс));
	
	Если ЗначениеЗаполнено(ДокументСсылка.ВалютаВзаиморасчетов) Тогда
		ВалютаВзаиморасчетов = ДокументСсылка.ВалютаВзаиморасчетов;
	Иначе
		ВалютаВзаиморасчетов = ДокументСсылка.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	КонецЕсли;
	СтруктураДополнительныеСвойства.Вставить("ВалютаВзаиморасчетов", ВалютаВзаиморасчетов);
	
	СтруктураКурсаВзаиморасчетов = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ВалютаВзаиморасчетов,
		СтруктураДополнительныеСвойства.ДатаКурса);
	СтруктураДополнительныеСвойства.Вставить("КурсВзаиморасчетов", СтруктураКурсаВзаиморасчетов.Курс);
	СтруктураДополнительныеСвойства.Вставить("КратностьВзаиморасчетов", СтруктураКурсаВзаиморасчетов.Кратность);
	
	СтруктураКурсаДокумента = Новый Структура("Курс, Кратность",
		СтруктураДополнительныеСвойства.КурсДокумента, СтруктураДополнительныеСвойства.КратностьДокумента);
	
	КэшКурсов = Новый Соответствие;
	КэшКурсов.Вставить(ДокументСсылка.ВалютаДокумента, СтруктураКурсаДокумента);
	КэшКурсов.Вставить(ВалютаВзаиморасчетов, СтруктураКурсаВзаиморасчетов);
	СтруктураДополнительныеСвойства.Вставить("КэшКурсов", КэшКурсов);
	
	// расчет количества заказов для платежного календаря
	мсвЗаказы = Новый Массив;
	Для Каждого ТекСтрокаУслуги Из ДокументСсылка.Услуги Цикл
		Если ЗначениеЗаполнено(ТекСтрокаУслуги.ЗаказНаТС)
			И мсвЗаказы.Найти(ТекСтрокаУслуги.ЗаказНаТС) = Неопределено Тогда
			мсвЗаказы.Добавить(ТекСтрокаУслуги.ЗаказНаТС);
		КонецЕсли;
	КонецЦикла;
	
	// партии товаров
	мЗапрос = Новый Запрос;
	мЗапрос.УстановитьПараметр("Ссылка",ДокументСсылка);
	Если уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументСсылка.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.СпособОценкиМПЗ) <> Перечисления.СпособыОценки.ПоСредней Тогда
		мЗапрос.УстановитьПараметр("Партия",ДокументСсылка);
	Иначе
		мЗапрос.УстановитьПараметр("Партия",Неопределено);
	КонецЕсли;
	мЗапрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	мЗапрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	ТабЧастьДокумента.Ссылка.Дата КАК Период,
	|	ТабЧастьДокумента.Ссылка КАК Регистратор,
	|	ТабЧастьДокумента.Ссылка.Склад КАК Склад,
	|	&Партия КАК Партия,
	|	ТабЧастьДокумента.Номенклатура КАК Номенклатура,
	|	ТабЧастьДокумента.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТабЧастьДокумента.Количество * ЕСТЬNULL(ТабЧастьДокумента.ЕдиницаИзмерения.Коэффициент, 1) / ТабЧастьДокумента.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Количество,
	|	ТабЧастьДокумента.Цена КАК Цена,
	|	ВЫБОР
	|		КОГДА ТабЧастьДокумента.Ссылка.СуммаВключаетНДС
	|			ТОГДА ТабЧастьДокумента.Сумма - ТабЧастьДокумента.СуммаНДС
	|		ИНАЧЕ ТабЧастьДокумента.Сумма
	|	КОНЕЦ КАК Сумма,
	|	ВЫБОР
	|		КОГДА ТабЧастьДокумента.Ссылка.УчитыватьНДС
	|			ТОГДА ТабЧастьДокумента.СуммаНДС
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаНДС
	|ПОМЕСТИТЬ ТаблицаДокументаТовары
	|ИЗ
	|	Документ.уатПоступлениеТоваровУслуг.Товары КАК ТабЧастьДокумента
	|ГДЕ
	|	ТабЧастьДокумента.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаДокументаТовары.Номенклатура КАК Номенклатура,
	|	ТаблицаДокументаТовары.Склад КАК Склад,
	|	ТаблицаДокументаТовары.Регистратор КАК Партия
	|ИЗ
	|	ТаблицаДокументаТовары КАК ТаблицаДокументаТовары";
	
	МассивРезультатов = мЗапрос.ВыполнитьПакет();
	
	мЗапрос.Текст = 	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Товары.ВидДвижения,
	|	Товары.Период,
	|	Товары.Регистратор,
	|	Товары.Склад,
	|	Товары.Партия,
	|	Товары.Номенклатура,
	|	Товары.Количество,
	|	Товары.Сумма КАК Стоимость,
	|	Товары.Сумма КАК СтоимостьУпр,
	|	Товары.СуммаНДС КАК СуммаНДС
	|ИЗ
	|	ТаблицаДокументаТовары КАК Товары";
	
	Выборка = мЗапрос.Выполнить();
	ТаблицаПартии = Выборка.Выгрузить();
	Для Каждого ТекСтрока ИЗ ТаблицаПартии Цикл
	
		ТекСтрока.Стоимость = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.Стоимость,
			ДокументСсылка.ВалютаДокумента,         СтруктураДополнительныеСвойства.ВалютаРеглУчета,
			ДокументСсылка.КурсВзаиморасчетов,      СтруктураДополнительныеСвойства.КурсРегл,
			ДокументСсылка.КратностьВзаиморасчетов,	СтруктураДополнительныеСвойства.КратностьРегл);
			
		ТекСтрока.СуммаНДС = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаНДС,
			ДокументСсылка.ВалютаДокумента,         СтруктураДополнительныеСвойства.ВалютаРеглУчета,
			ДокументСсылка.КурсВзаиморасчетов,      СтруктураДополнительныеСвойства.КурсРегл,
			ДокументСсылка.КратностьВзаиморасчетов, СтруктураДополнительныеСвойства.КратностьРегл);
		
		ТекСтрока.СтоимостьУпр = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СтоимостьУпр,
			ДокументСсылка.ВалютаДокумента,	        СтруктураДополнительныеСвойства.ВалютаУпрУчета, 
			ДокументСсылка.КурсВзаиморасчетов,      СтруктураДополнительныеСвойства.КурсУпр,
			ДокументСсылка.КратностьВзаиморасчетов, СтруктураДополнительныеСвойства.КратностьУпр);
		
	КонецЦикла;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПартии", ТаблицаПартии);
	
	Если ПолучитьФункциональнуюОпцию("уатАдресноеХранение") = ИСТИНА И ДокументСсылка.Склад.АдресноеХранение Тогда
		ЗапросЯчейки = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
		|	уатПоступлениеТоваровУслугТовары.Ссылка.Дата КАК Период,
		|	уатПоступлениеТоваровУслугТовары.Ссылка КАК Регистратор,
		|	уатПоступлениеТоваровУслугТовары.Ссылка.Склад КАК Склад,
		|	уатПоступлениеТоваровУслугТовары.Ссылка.Склад.ТранзитнаяЯчейка КАК Ячейка,
		|	уатПоступлениеТоваровУслугТовары.Номенклатура КАК Номенклатура,
		|	уатПоступлениеТоваровУслугТовары.Количество * ЕСТЬNULL(уатПоступлениеТоваровУслугТовары.ЕдиницаИзмерения.Коэффициент, 1)
		|		/ уатПоступлениеТоваровУслугТовары.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Количество
		|ИЗ
		|	Документ.уатПоступлениеТоваровУслуг.Товары КАК уатПоступлениеТоваровУслугТовары
		|ГДЕ
		|	уатПоступлениеТоваровУслугТовары.Ссылка = &Ссылка");
		ЗапросЯчейки.УстановитьПараметр("Ссылка", ДокументСсылка);
		тблТоварыВЯчейках = ЗапросЯчейки.Выполнить().Выгрузить(); 
		
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаТоварыВЯчейках", тблТоварыВЯчейках);
	КонецЕсли;
	
	мЗапрос = Новый Запрос;
	мЗапрос.Текст = 
    "ВЫБРАТЬ РАЗРЕШЕННЫЕ
    |	ЗНАЧЕНИЕ(Перечисление.уатПолучателиУслуг.НашаОрганизация) КАК ПолучательУслуг,
    |	уатПоступлениеТоваровУслугУслуги.Ссылка КАК Регистратор,
    |	уатПоступлениеТоваровУслугУслуги.Ссылка.Дата КАК Период,
    |	уатПоступлениеТоваровУслугУслуги.Ссылка.Организация КАК Организация,
    |	уатПоступлениеТоваровУслугУслуги.Ссылка.ДоговорКонтрагента КАК ДоговорКонтрагента,
    |	уатПоступлениеТоваровУслугУслуги.Номенклатура КАК Номенклатура,
    |	уатПоступлениеТоваровУслугУслуги.СтавкаНДС КАК СтавкаНДС,
    |	уатПоступлениеТоваровУслугУслуги.ЗаказНаТС КАК ЗаказНаТС,
    |	ВЫБОР
    |		КОГДА &МноговалютныйУчет
    |			ТОГДА уатПоступлениеТоваровУслугУслуги.Валюта
    |		ИНАЧЕ уатПоступлениеТоваровУслугУслуги.Ссылка.ВалютаДокумента
    |	КОНЕЦ КАК Валюта,
    |	уатПоступлениеТоваровУслугУслуги.Количество КАК Количество,
    |	ВЫБОР
    |		КОГДА &МноговалютныйУчет
    |			ТОГДА уатПоступлениеТоваровУслугУслуги.СуммаВалютная
    |		ИНАЧЕ уатПоступлениеТоваровУслугУслуги.Сумма
    |	КОНЕЦ + ВЫБОР
    |		КОГДА НЕ уатПоступлениеТоваровУслугУслуги.Ссылка.УчитыватьНДС
    |				ИЛИ уатПоступлениеТоваровУслугУслуги.Ссылка.СуммаВключаетНДС
    |			ТОГДА 0
    |		ИНАЧЕ ВЫБОР
    |				КОГДА &МноговалютныйУчет
    |					ТОГДА уатПоступлениеТоваровУслугУслуги.СуммаНДСвалютная
    |				ИНАЧЕ уатПоступлениеТоваровУслугУслуги.СуммаНДС
    |			КОНЕЦ
    |	КОНЕЦ КАК Сумма,
    |	0 КАК СуммаРегл,
    |	ВЫБОР
    |		КОГДА уатПоступлениеТоваровУслугУслуги.Ссылка.УчитыватьНДС
    |			ТОГДА ВЫБОР
    |					КОГДА &МноговалютныйУчет
    |						ТОГДА уатПоступлениеТоваровУслугУслуги.СуммаНДСвалютная
    |					ИНАЧЕ уатПоступлениеТоваровУслугУслуги.СуммаНДС
    |				КОНЕЦ
    |		ИНАЧЕ 0
    |	КОНЕЦ КАК СуммаНДС
    |ИЗ
    |	Документ.уатПоступлениеТоваровУслуг.Услуги КАК уатПоступлениеТоваровУслугУслуги
    |ГДЕ
    |	уатПоступлениеТоваровУслугУслуги.Ссылка = &Ссылка
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ РАЗРЕШЕННЫЕ
    |	уатПоступлениеТоваровУслугУслуги.Ссылка КАК Регистратор,
    |	уатПоступлениеТоваровУслугУслуги.Ссылка.Дата КАК Период,
    |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
    |	уатПоступлениеТоваровУслугУслуги.Ссылка.Организация КАК Организация,
    |	уатПоступлениеТоваровУслугУслуги.Ссылка.Контрагент КАК Контрагент,
    |	уатПоступлениеТоваровУслугУслуги.Ссылка.ДоговорКонтрагента КАК ДоговорКонтрагента,
    |	ВЫБОР
    |		КОГДА &МноговалютныйУчет
    |			ТОГДА уатПоступлениеТоваровУслугУслуги.Ссылка.ВалютаВзаиморасчетов
    |		ИНАЧЕ уатПоступлениеТоваровУслугУслуги.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов
    |	КОНЕЦ КАК Валюта,
    |	ВЫБОР
    |		КОГДА &МноговалютныйУчет
    |			ТОГДА уатПоступлениеТоваровУслугУслуги.Валюта
    |		ИНАЧЕ уатПоступлениеТоваровУслугУслуги.Ссылка.ВалютаДокумента
    |	КОНЕЦ КАК ВалютаСтроки,
    |	ВЫБОР
    |		КОГДА &ВзаиморасчетыПоЗаказам
    |			ТОГДА уатПоступлениеТоваровУслугУслуги.ЗаказНаТС
    |		КОГДА &ВзаиморасчетыПоСчетам
    |			ТОГДА уатПоступлениеТоваровУслугУслуги.Ссылка.Сделка
    |		КОГДА &ВзаиморасчетыПоНакладным
    |			ТОГДА &Ссылка
    |		ИНАЧЕ НЕОПРЕДЕЛЕНО
    |	КОНЕЦ КАК Сделка,
    |	уатПоступлениеТоваровУслугУслуги.Сумма + ВЫБОР
    |		КОГДА НЕ уатПоступлениеТоваровУслугУслуги.Ссылка.УчитыватьНДС
    |				ИЛИ уатПоступлениеТоваровУслугУслуги.Ссылка.СуммаВключаетНДС
    |			ТОГДА 0
    |		ИНАЧЕ уатПоступлениеТоваровУслугУслуги.СуммаНДС
    |	КОНЕЦ КАК Сумма,
    |	уатПоступлениеТоваровУслугУслуги.СуммаВалютная + ВЫБОР
    |		КОГДА НЕ уатПоступлениеТоваровУслугУслуги.Ссылка.УчитыватьНДС
    |				ИЛИ уатПоступлениеТоваровУслугУслуги.Ссылка.СуммаВключаетНДС
    |			ТОГДА 0
    |		ИНАЧЕ уатПоступлениеТоваровУслугУслуги.СуммаНДСвалютная
    |	КОНЕЦ КАК СуммаВалютная,
    |	0 КАК СуммаВзаиморасчетов,
    |	0 КАК СуммаУпр
    |ИЗ
    |	Документ.уатПоступлениеТоваровУслуг.Услуги КАК уатПоступлениеТоваровУслугУслуги
    |ГДЕ
    |	уатПоступлениеТоваровУслугУслуги.Ссылка = &Ссылка
    |
    |ОБЪЕДИНИТЬ ВСЕ
    |
    |ВЫБРАТЬ
    |	уатПоступлениеТоваровУслугТовары.Ссылка,
    |	уатПоступлениеТоваровУслугТовары.Ссылка.Дата,
    |	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход),
    |	уатПоступлениеТоваровУслугТовары.Ссылка.Организация,
    |	уатПоступлениеТоваровУслугТовары.Ссылка.Контрагент,
    |	уатПоступлениеТоваровУслугТовары.Ссылка.ДоговорКонтрагента,
    |	ВЫБОР
    |		КОГДА &МноговалютныйУчет
    |			ТОГДА уатПоступлениеТоваровУслугТовары.Ссылка.ВалютаВзаиморасчетов
    |		ИНАЧЕ уатПоступлениеТоваровУслугТовары.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов
    |	КОНЕЦ,
    |	уатПоступлениеТоваровУслугТовары.Ссылка.ВалютаДокумента,
    |	ВЫБОР
    |		КОГДА &ВзаиморасчетыПоЗаказам
    |				ИЛИ &ВзаиморасчетыПоСчетам
    |			ТОГДА уатПоступлениеТоваровУслугТовары.Ссылка.Сделка
    |		КОГДА &ВзаиморасчетыПоНакладным
    |			ТОГДА &Ссылка
    |		ИНАЧЕ НЕОПРЕДЕЛЕНО
    |	КОНЕЦ,
    |	уатПоступлениеТоваровУслугТовары.Сумма + ВЫБОР
    |		КОГДА НЕ уатПоступлениеТоваровУслугТовары.Ссылка.УчитыватьНДС
    |				ИЛИ уатПоступлениеТоваровУслугТовары.Ссылка.СуммаВключаетНДС
    |			ТОГДА 0
    |		ИНАЧЕ уатПоступлениеТоваровУслугТовары.СуммаНДС
    |	КОНЕЦ,
    |	уатПоступлениеТоваровУслугТовары.Сумма + ВЫБОР
    |		КОГДА НЕ уатПоступлениеТоваровУслугТовары.Ссылка.УчитыватьНДС
    |				ИЛИ уатПоступлениеТоваровУслугТовары.Ссылка.СуммаВключаетНДС
    |			ТОГДА 0
    |		ИНАЧЕ уатПоступлениеТоваровУслугТовары.СуммаНДС
    |	КОНЕЦ,
    |	0,
    |	0
    |ИЗ
    |	Документ.уатПоступлениеТоваровУслуг.Товары КАК уатПоступлениеТоваровУслугТовары
    |ГДЕ
    |	уатПоступлениеТоваровУслугТовары.Ссылка = &Ссылка
    |;
    |
    |////////////////////////////////////////////////////////////////////////////////
    |ВЫБРАТЬ РАЗРЕШЕННЫЕ
    |	ЗНАЧЕНИЕ(Перечисление.уатПолучателиУслуг.НашаОрганизация) КАК ПолучательУслуг,
    |	уатПоступлениеТоваровУслугУслуги.Ссылка КАК Регистратор,
    |	уатПоступлениеТоваровУслугУслуги.Ссылка.Дата КАК Период,
    |	уатПоступлениеТоваровУслугУслуги.Ссылка.Организация КАК Организация,
    |	уатПоступлениеТоваровУслугУслуги.Ссылка.Контрагент КАК Контрагент,
    |	уатПоступлениеТоваровУслугУслуги.Ссылка.ДоговорКонтрагента КАК ДоговорКонтрагента,
    |	уатПоступлениеТоваровУслугУслуги.ЗаказНаТС КАК ЗаказНаТС,
    |	ВЫБОР
    |		КОГДА &ВзаиморасчетыПоНакладным
    |			ТОГДА уатПоступлениеТоваровУслугУслуги.Ссылка
    |		КОГДА &ВзаиморасчетыПоСчетам
    |			ТОГДА уатПоступлениеТоваровУслугУслуги.Ссылка.Сделка
    |		ИНАЧЕ уатПоступлениеТоваровУслугУслуги.ЗаказНаТС
    |	КОНЕЦ КАК Сделка,
    |	ВЫБОР
    |		КОГДА &МноговалютныйУчет
    |			ТОГДА уатПоступлениеТоваровУслугУслуги.Ссылка.ВалютаВзаиморасчетов
    |		ИНАЧЕ уатПоступлениеТоваровУслугУслуги.Ссылка.ДоговорКонтрагента.ВалютаВзаиморасчетов
    |	КОНЕЦ КАК Валюта,
    |	уатПоступлениеТоваровУслугУслуги.Ссылка.ВалютаДокумента КАК ВалютаСтроки,
    |	уатПоступлениеТоваровУслугУслуги.Сумма + ВЫБОР
    |		КОГДА уатПоступлениеТоваровУслугУслуги.Ссылка.УчитыватьНДС
    |				И НЕ уатПоступлениеТоваровУслугУслуги.Ссылка.СуммаВключаетНДС
    |			ТОГДА уатПоступлениеТоваровУслугУслуги.СуммаНДС
    |		ИНАЧЕ 0
    |	КОНЕЦ КАК СуммаПриход,
    |	уатПоступлениеТоваровУслугУслуги.СуммаВалютная + ВЫБОР
    |		КОГДА уатПоступлениеТоваровУслугУслуги.Ссылка.УчитыватьНДС
    |				И НЕ уатПоступлениеТоваровУслугУслуги.Ссылка.СуммаВключаетНДС
    |			ТОГДА уатПоступлениеТоваровУслугУслуги.СуммаНДСвалютная
    |		ИНАЧЕ 0
    |	КОНЕЦ КАК СуммаВалютная,
    |	0 КАК СуммаПриходУпр
    |ИЗ
    |	Документ.уатПоступлениеТоваровУслуг.Услуги КАК уатПоступлениеТоваровУслугУслуги
    |ГДЕ
    |	уатПоступлениеТоваровУслугУслуги.Ссылка = &Ссылка
	|	И (&ВзаиморасчетыПоЗаказам ИЛИ &ВзаиморасчетыПоНакладным ИЛИ &ВзаиморасчетыПоСчетам)";
	
	мЗапрос.УстановитьПараметр("Ссылка",                   ДокументСсылка);
	мЗапрос.УстановитьПараметр("МноговалютныйУчет",        СтруктураДополнительныеСвойства.МноговалютныйУчет);
	мЗапрос.УстановитьПараметр("ВзаиморасчетыПоЗаказам",   ДокументСсылка.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказамНаТС);
	мЗапрос.УстановитьПараметр("ВзаиморасчетыПоНакладным", ДокументСсылка.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоНакладным);
	мЗапрос.УстановитьПараметр("ВзаиморасчетыПоСчетам",    ДокументСсылка.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам);
		
	МассивРезультатов = мЗапрос.ВыполнитьПакет();
	
	// выставленные услуги
	ТаблицаУслуги = МассивРезультатов[0].Выгрузить();
	Для Каждого ТекСтрока ИЗ ТаблицаУслуги Цикл
		СтруктураКурсаСтроки = СтруктураКурсаВалютыСтроки(ТекСтрока.Валюта, СтруктураДополнительныеСвойства.ДатаКурса,
			СтруктураДополнительныеСвойства.КэшКурсов);
		
		ТекСтрока.СуммаНДС  = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаНДС,
			ТекСтрока.Валюта,    СтруктураДополнительныеСвойства.ВалютаРеглУчета,
			СтруктураКурсаСтроки.Курс,      СтруктураДополнительныеСвойства.КурсРегл,
			СтруктураКурсаСтроки.Кратность, СтруктураДополнительныеСвойства.КратностьРегл);
						
		ТекСтрока.СуммаРегл = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.Сумма,
			ТекСтрока.Валюта,               СтруктураДополнительныеСвойства.ВалютаРеглУчета,
			СтруктураКурсаСтроки.Курс,      СтруктураДополнительныеСвойства.КурсРегл,
			СтруктураКурсаСтроки.Кратность, СтруктураДополнительныеСвойства.КратностьРегл); 
	КонецЦикла;
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаВыставленныхУслуг", ТаблицаУслуги);
	
	// взаиморасчеты
	ТаблицаВзаиморасчетов = МассивРезультатов[1].Выгрузить();
	Для Каждого ТекСтрока Из ТаблицаВзаиморасчетов Цикл		
		ТекСтрока.СуммаВзаиморасчетов = уатОбщегоНазначения_проф.СуммаВзаиморасчетовСтроки(
			ТекСтрока.Сумма, ТекСтрока.СуммаВалютная, ТекСтрока.ВалютаСтроки, СтруктураДополнительныеСвойства);
		ТекСтрока.СуммаУпр            = уатОбщегоНазначения_проф.СуммаУпрСтроки(
			ТекСтрока.Сумма, ТекСтрока.СуммаВалютная, ТекСтрока.ВалютаСтроки, СтруктураДополнительныеСвойства);
	КонецЦикла;
	ТаблицаВзаиморасчетов.Свернуть("Регистратор, Период, ВидДвижения, Организация, Контрагент, ДоговорКонтрагента, Валюта, Сделка", "СуммаВзаиморасчетов, СуммаУпр");
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаВзаиморасчетов", ТаблицаВзаиморасчетов);
	
	// платежный календарь и дата платежа
	ТаблицаПлатежныйКалендарь = МассивРезультатов[2].Выгрузить();
	СтруктураДополнительныеСвойства.Вставить("ОкруглятьРезультат", Ложь);
	Для Каждого ТекСтрока Из ТаблицаПлатежныйКалендарь Цикл		
		ТекСтрока.СуммаПриход    = уатОбщегоНазначения_проф.СуммаВзаиморасчетовСтроки(
			ТекСтрока.СуммаПриход, ТекСтрока.СуммаВалютная, ТекСтрока.ВалютаСтроки, СтруктураДополнительныеСвойства);
		ТекСтрока.СуммаПриходУпр = уатОбщегоНазначения_проф.СуммаУпрСтроки(
			ТекСтрока.СуммаПриход, ТекСтрока.СуммаВалютная, ТекСтрока.ВалютаСтроки, СтруктураДополнительныеСвойства);
	КонецЦикла; 
	ТаблицаПлатежныйКалендарь.Свернуть("Период, Регистратор, Организация, Контрагент, ДоговорКонтрагента, ПолучательУслуг, ЗаказНаТС, Валюта, Сделка", "СуммаПриход, СуммаПриходУпр"); 
	уатПроведение_проф.РаспределитьПлатежныйКалендарьПоГрафикуОплаты(ТаблицаПлатежныйКалендарь, ДокументСсылка);
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПлатежныйКалендарь", ТаблицаПлатежныйКалендарь);

КонецПроцедуры // ИнициализироватьДанныеДокумента()

Процедура ВыполнитьКонтроль(ДокументСсылка, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь) Экспорт
	
	мЗапрос = Новый Запрос;
	мЗапрос.МенеджерВременныхТаблиц = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц; 
	мЗапрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Поступление.Номенклатура,
	|	Поступление.Ссылка КАК Регистратор,
	|	уатПартииТоваровНаСкладахОстатки.КоличествоОстаток
	|ИЗ
	|	Документ.уатПоступлениеТоваровУслуг.Товары КАК Поступление
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.уатПартииТоваровНаСкладах.Остатки("
	+ ?(НЕ УдалениеПроведения, "&МоментВремени", "") + ",
	|				Склад = &Склад
	|					И Номенклатура В
	|						(ВЫБРАТЬ
	|							уатПоступлениеТоваровУслугТовары.Номенклатура
	|						ИЗ
	|							Документ.уатПоступлениеТоваровУслуг.Товары КАК уатПоступлениеТоваровУслугТовары
	|						ГДЕ
	|							уатПоступлениеТоваровУслугТовары.Ссылка = &Ссылка)) КАК уатПартииТоваровНаСкладахОстатки
	|		ПО Поступление.Ссылка.Склад = уатПартииТоваровНаСкладахОстатки.Склад
	|			И Поступление.Номенклатура = уатПартииТоваровНаСкладахОстатки.Номенклатура
	|			И (&Партия = уатПартииТоваровНаСкладахОстатки.Партия)
	|ГДЕ
	|	Поступление.Ссылка = &Ссылка
	|	И ЕСТЬNULL(уатПартииТоваровНаСкладахОстатки.КоличествоОстаток, 0) < 0";
	
	мЗапрос.УстановитьПараметр("Склад"        , ДокументСсылка.Склад);
	мЗапрос.УстановитьПараметр("Ссылка"       , ДокументСсылка);
	Если НЕ УдалениеПроведения Тогда
		мЗапрос.УстановитьПараметр("МоментВремени", ДополнительныеСвойства.ДляПроведения.МоментКонтроля);
	КонецЕсли;
	Если уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументСсылка.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.СпособОценкиМПЗ) <> Перечисления.СпособыОценки.ПоСредней Тогда
		мЗапрос.УстановитьПараметр("Партия",ДокументСсылка);
	Иначе
		мЗапрос.УстановитьПараметр("Партия",Неопределено);
	КонецЕсли;
	
	Выборка = мЗапрос.Выполнить().Выбрать();
	Если Выборка.Количество() тогда
		Заголовок = уатОбщегоНазначенияТиповые.уатПредставлениеДокументаПриПроведении(ДокументСсылка);
		Пока Выборка.Следующий() Цикл
			#Если ТонкийКлиент тогда	
			#Иначе
				ТекстНСТР = НСтр("en='For ""%1"" received negative remains at warehouse ""%2"". Warehouse inventory: %3';ru='Для ""%1"" получены отрицательные остатки на складе ""%2"". Остаток на складе: %3'");
				ТекстНСТР = СтрШаблон(ТекстНСТР, Выборка.Номенклатура, ДокументСсылка.Склад, Выборка.КоличествоОстаток);
				уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, Отказ, Заголовок);	
			#КонецЕсли
		КонецЦикла;
	КонецЕсли;
	
	
КонецПроцедуры // ВыполнитьКонтроль()

// Получает дополнительные реквизиты для отображения в отчете "Реестр документов"
// 
// Возвращаемое значение:
//  Структура - доп. реквизитов
//
Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура("Информация", "Контрагент");
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	// Для внешнего пользователя (перевозчика) Поступление материалов и услуг отображается как Реализация услуг
	Если уатОбщегоНазначенияСервер.АвторизованВнещнийПеревозчик() Тогда
		СтандартнаяОбработка = Ложь;
		Представление = СтрШаблон(НСтр("ru = 'Реализация услуг %1 от %2'"), Данные.Номер, Данные.Дата)
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПечатьПриходнаяНакладная(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_ПоступлениеТоваровУслуг";
	
	ПервыйДокумент = Истина;
	
	Для Каждого ТекущийДокумент Из МассивОбъектов Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		РежимВыводаКодаВДокументах  = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ПользователиКлиентСервер.АвторизованныйПользователь(), 
			ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.РежимВыводаКодаВДокументах"));
			
		ВыводитьКоды    = Истина;
		Колонка         = РежимВыводаКодаВДокументах;
		ТекстКодАртикул = РежимВыводаКодаВДокументах;
		
		ОбластьШапки  = "ШапкаСКодом";
		ОбластьСтроки = "СтрокаСКодом";
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент.Ссылка);
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПоступлениеТоваровУслуг.Номер,
		|	ПоступлениеТоваровУслуг.Дата,
		|	ПоступлениеТоваровУслуг.ДатаВходящегоДокумента,
		|	ПоступлениеТоваровУслуг.ДоговорКонтрагента,
		|	ПоступлениеТоваровУслуг.Контрагент,
		|	ПоступлениеТоваровУслуг.Контрагент КАК Поставщик,
		|	ПоступлениеТоваровУслуг.Организация,
		|	ПоступлениеТоваровУслуг.Организация КАК Покупатель,
		|	ПоступлениеТоваровУслуг.СуммаДокумента,
		|	ПоступлениеТоваровУслуг.ВалютаДокумента,
		|	ПоступлениеТоваровУслуг.УчитыватьНДС,
		|	ПоступлениеТоваровУслуг.СуммаВключаетНДС
		|ИЗ
		|	Документ.уатПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
		|ГДЕ
		|	ПоступлениеТоваровУслуг.Ссылка = &ТекущийДокумент";
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();
		
		ЗапросПоТоварам = Новый Запрос();
		ЗапросПоТоварам.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент.Ссылка);
		ЗапросПоТоварам.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВложенныйЗапрос.Номенклатура,
		|	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар,
		|	ВложенныйЗапрос.Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
		|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
		|	ВложенныйЗапрос.Количество,
		|	ВложенныйЗапрос.Цена,
		|	ВложенныйЗапрос.Сумма,
		|	ВложенныйЗапрос.СуммаНДС,
		|	ВложенныйЗапрос.СтавкаНДС,
		|	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
		|	ВложенныйЗапрос.Метка КАК Метка
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПоступлениеТоваровУслуг.Номенклатура КАК Номенклатура,
		|		СУММА(ПоступлениеТоваровУслуг.Количество) КАК Количество,
		|		ПоступлениеТоваровУслуг.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|		ПоступлениеТоваровУслуг.Цена КАК Цена,
		|		СУММА(ПоступлениеТоваровУслуг.Сумма) КАК Сумма,
		|		СУММА(ПоступлениеТоваровУслуг.СуммаНДС) КАК СуммаНДС,
		|		ПоступлениеТоваровУслуг.СтавкаНДС КАК СтавкаНДС,
		|		МИНИМУМ(ПоступлениеТоваровУслуг.НомерСтроки) КАК НомерСтроки,
		|		0 КАК Метка
		|	ИЗ
		|		Документ.уатПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслуг
		|	ГДЕ
		|		ПоступлениеТоваровУслуг.Ссылка = &ТекущийДокумент
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ПоступлениеТоваровУслуг.Номенклатура,
		|		ПоступлениеТоваровУслуг.СтавкаНДС,
		|		ПоступлениеТоваровУслуг.Цена,
		|		ПоступлениеТоваровУслуг.ЕдиницаИзмерения) КАК ВложенныйЗапрос
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ПоступлениеТоваровУслуг.Номенклатура,
		|	ПоступлениеТоваровУслуг.Содержание,
		|	ПоступлениеТоваровУслуг.Номенклатура.Код,
		|	ВЫБОР
		|		КОГДА
		|			ПоступлениеТоваровУслуг.Номенклатура.ЕдиницаХраненияОстатков.Представление ЕСТЬ NULL
		|		ТОГДА
		|			ПоступлениеТоваровУслуг.Номенклатура.ЕдиницаИзмерения.Представление
		|		ИНАЧЕ
		|			ПоступлениеТоваровУслуг.Номенклатура.ЕдиницаХраненияОстатков.Представление
		|	КОНЕЦ , 
		|	ПоступлениеТоваровУслуг.Количество,
		|	ПоступлениеТоваровУслуг.Цена,
		|	ПоступлениеТоваровУслуг.Сумма,
		|	ПоступлениеТоваровУслуг.СуммаНДС,
		|	ПоступлениеТоваровУслуг.СтавкаНДС,
		|	ПоступлениеТоваровУслуг.НомерСтроки,
		|	1
		|ИЗ
		|	Документ.уатПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслуг
		|ГДЕ
		|	ПоступлениеТоваровУслуг.Ссылка = &ТекущийДокумент
		|
		|УПОРЯДОЧИТЬ ПО
		|	Метка,
		|	НомерСтроки";
		
		ВыборкаСтрок = ЗапросПоТоварам.Выполнить().Выгрузить();
		
		ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_ПоступлениеТоваровУслуг_Накладная";
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.уатПоступлениеТоваровУслуг.ПФ_MXL_Накладная");
		
		// Печать штрихкода
		Если уатЗащищенныеФункцииСервер_проф.ИспользоватьШтрихкодированиеОбъекта(ТекущийДокумент) Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокШтрихкод");
			уатЗащищенныеФункцииСервер_проф.ОтобразитьШКнаПФ(ОбластьМакета, ТекущийДокумент);
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		// Выводим шапку накладной
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(Шапка, "Накладная");
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ОбластьМакета.Параметры.ПредставлениеПоставщика = уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата), "НаименованиеДляПечатныхФорм,");
		ОбластьМакета.Параметры.Поставщик = Шапка.Контрагент;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		ОбластьМакета.Параметры.ПредставлениеПолучателя = уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(Шапка.Покупатель, Шапка.Дата), "НаименованиеДляПечатныхФорм,");
		ОбластьМакета.Параметры.Получатель = Шапка.Организация;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Вывести табличную часть
		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
		Если ВыводитьКоды Тогда
			ОбластьМакета.Параметры.Колонка = Колонка;
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтроки);
		Сумма    = 0;
		СуммаНДС = 0;
		
		Для Каждого ВыборкаСтрокТовары Из ВыборкаСтрок Цикл
			
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
			КоличествоОкр = Окр(ВыборкаСтрокТовары.Количество, 3);
			ОбластьМакета.Параметры.Количество = КоличествоОкр;
			ОбластьМакета.Параметры.НомерСтроки = ВыборкаСтрок.Индекс(ВыборкаСтрокТовары) + 1;
			
			ОбластьМакета.Параметры.Товар       = СокрЛП(уатОбщегоНазначенияСервер.ПолучитьНаименованиеУслугиДляПечати(ВыборкаСтрокТовары.Номенклатура,ВыборкаСтрокТовары.Товар));
			
			Если ВыводитьКоды Тогда
				Если ВыборкаСтрокТовары.КодАртикул = "" Тогда
					ОбластьМакета.Параметры.КодАртикул = НСтр("en='-';ru='-'");
				Иначе
					ОбластьМакета.Параметры.КодАртикул = ВыборкаСтрокТовары.КодАртикул;
				КонецЕсли;
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			Сумма    = Сумма    + ВыборкаСтрокТовары.Сумма;
			СуммаНДС = СуммаНДС + ВыборкаСтрокТовары.СуммаНДС;
			
		КонецЦикла;
		
		// Вывести Итого
		ОбластьМакета                 = Макет.ПолучитьОбласть("Итого");
		ОбластьМакета.Параметры.Всего = уатОбщегоНазначенияТиповые.уатФорматСумм(Сумма);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Вывести ИтогоНДС
		Если Шапка.УчитыватьНДС Тогда
			СтавкиНДС = ОбщегоНазначения.ВыгрузитьКолонку(ВыборкаСтрок, "СтавкаНДС", Истина);
			ДанынеПечатиНДС = уатОбщегоНазначенияТиповые.уатДанныеПечатиИтоговНДС(СуммаНДС,СтавкиНДС, Шапка.СуммаВключаетНДС, ":"); 
			
			ОбластьМакета                    = Макет.ПолучитьОбласть("ИтогоНДС");
			ОбластьМакета.Параметры.ВсегоНДС = ДанынеПечатиНДС.ВсегоНДС;
			ОбластьМакета.Параметры.НДС      = ДанынеПечатиНДС.НДС;
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		// Вывести Сумму прописью
		ОбластьМакета                          = Макет.ПолучитьОбласть("СуммаПрописью");
		СуммаКПрописи                          = Сумма + ?(Шапка.СуммаВключаетНДС, 0, СуммаНДС);
		ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований " + ВыборкаСтрок.Количество()
		+ ", на сумму " + уатОбщегоНазначенияТиповые.уатФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
		ОбластьМакета.Параметры.СуммаПрописью  = уатОбщегоНазначенияТиповые.уатСформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Вывести подписи
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		//ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.Отпустил = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ТекущийДокумент.Отпустил);
		ОбластьМакета.Параметры.Получил  = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ТекущийДокумент.Получил);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ТекущийДокумент);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатнаяФорма()

Функция ПечатьАкт(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_ПоступлениеТоваровУслуг";
	
	ПервыйДокумент = Истина;
		
	Для Каждого ТекущийДокумент Из МассивОбъектов Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ЗапросШапка = Новый Запрос;
		ЗапросШапка.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент.Ссылка);
		ЗапросШапка.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Номер,
		|	Дата,
		|	ДоговорКонтрагента,
		|	Контрагент КАК Поставщик,
		|	Организация КАК Получатель,
		|	Организация,
		|	СуммаДокумента,
		|	ВалютаДокумента,
		|	УчитыватьНДС,
		|	СуммаВключаетНДС
		|ИЗ
		|	Документ.уатПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
		|
		|ГДЕ
		|	ПоступлениеТоваровУслуг.Ссылка = &ТекущийДокумент";
		Шапка = ЗапросШапка.Выполнить().Выбрать();
		Шапка.Следующий();
		
		ЗапросУслуги = Новый Запрос;
		ЗапросУслуги.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент.Ссылка);
		ЗапросУслуги.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Номенклатура КАК ПростоНоменклатура,
		|	Содержание КАК Товар,
		|	Количество,
		|	Цена,
		|	Сумма,
		|	СтавкаНДС,
		|	СуммаНДС
		|ИЗ
		|	Документ.уатПоступлениеТоваровУслуг.Услуги КАК ПоступлениеТоваровУслуг
		|
		|ГДЕ
		|	ПоступлениеТоваровУслуг.Ссылка = &ТекущийДокумент
		|";
		
		ТаблицаУслуги = ЗапросУслуги.Выполнить().Выгрузить();
		
		ТабличныйДокумент.ИмяПараметровПечати = "ПараметрыПечати_ПоступлениеТоваровУслуг_Акт";
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.уатПоступлениеТоваровУслуг.ПФ_MXL_Акт");
		
		// Печать штрихкода
		Если уатЗащищенныеФункцииСервер_проф.ИспользоватьШтрихкодированиеОбъекта(ТекущийДокумент) Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокШтрихкод");
			уатЗащищенныеФункцииСервер_проф.ОтобразитьШКнаПФ(ОбластьМакета, ТекущийДокумент);
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(Шапка, НСтр("en='Act';ru='Акт'"));
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ПредставлениеПоставщика = уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата), "НаименованиеДляПечатныхФорм,");
		ОбластьМакета.Параметры.ПредставлениеПоставщика = ПредставлениеПоставщика;
		ОбластьМакета.Параметры.Поставщик = Шапка.Поставщик;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		ПредставлениеПолучателя = уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(Шапка.Получатель, Шапка.Дата), "НаименованиеДляПечатныхФорм,");
		ОбластьМакета.Параметры.ПредставлениеПолучателя = ПредставлениеПолучателя;
		ОбластьМакета.Параметры.Получатель = Шапка.Получатель;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("ШапкаТаблицы");
		ОбластьСтроки = Макет.ПолучитьОбласть("Строка");
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		НомерСтроки = 0;
		
		Для Каждого СтрокаТабличнойЧасти Из ТаблицаУслуги Цикл
			
			НомерСтроки = НомерСтроки + 1;
			
			Если Не ЗначениеЗаполнено(СтрокаТабличнойЧасти.Товар) Тогда
				СтрокаТабличнойЧасти.Товар = уатОбщегоНазначенияСервер.ПолучитьНаименованиеУслугиДляПечати(СтрокаТабличнойЧасти.ПростоНоменклатура,СтрокаТабличнойЧасти.Товар);
			КонецЕсли;
			ОбластьСтроки.Параметры.Заполнить(СтрокаТабличнойЧасти);
			КоличествоОкр = Окр(СтрокаТабличнойЧасти.Количество, 3);
			ОбластьСтроки.Параметры.Количество = КоличествоОкр;
			ОбластьСтроки.Параметры.НомерСтроки = НомерСтроки;
			
			ТабличныйДокумент.Вывести(ОбластьСтроки);
			
		КонецЦикла;
		
		Если ТаблицаУслуги <> Неопределено Тогда
			
			Сумма    = ТаблицаУслуги.Итог("Сумма");
			СуммаНДС = ТаблицаУслуги.Итог("СуммаНДС");
			
		Иначе
			
			Сумма    = 0;
			СуммаНДС = 0;
			
		КонецЕсли;
		
		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		ОбластьМакета.Параметры.Всего = уатОбщегоНазначенияТиповые.уатФорматСумм(Сумма);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		Если Шапка.УчитыватьНДС Тогда
			СтавкиНДС = ОбщегоНазначения.ВыгрузитьКолонку(ТаблицаУслуги, "СтавкаНДС", Истина);
			ДанныеПечатиНДС = уатОбщегоНазначенияТиповые.уатДанныеПечатиИтоговНДС(СуммаНДС, СтавкиНДС, Шапка.СуммаВключаетНДС, ":");
			
			ОбластьМакета = Макет.ПолучитьОбласть("ИтогоНДС");
			ОбластьМакета.Параметры.ВсегоНДС = ДанныеПечатиНДС.ВсегоНДС;
			ОбластьМакета.Параметры.НДС      = ДанныеПечатиНДС.НДС;
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		КонецЕсли;
		
		СуммаКПрописи = Сумма + ?(Шапка.УчитыватьНДС И НЕ Шапка.СуммаВключаетНДС, СуммаНДС, 0);
		ОбластьМакета = Макет.ПолучитьОбласть("СуммаПрописью");
		ОбластьМакета.Параметры.ИтоговаяСтрока = "Всего оказано услуг " + НомерСтроки
		+ ", на сумму " + уатОбщегоНазначенияТиповые.уатФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
		ОбластьМакета.Параметры.СуммаПрописью  = уатОбщегоНазначенияТиповые.уатСформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ОбластьМакета.Параметры.Отпустил = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ТекущийДокумент.Отпустил);
		ОбластьМакета.Параметры.Получил  = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(ТекущийДокумент.Получил);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ТекущийДокумент);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатнаяФорма()

Функция ПечатьТОРГ4(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_ПоступлениеТоваровУслуг";
	
	ПервыйДокумент = Истина;
	
	Для Каждого ТекущийДокумент Из МассивОбъектов Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент.Ссылка);
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПоступлениеТоваровУслуг.Номер КАК Номер,
		|	ПоступлениеТоваровУслуг.Дата КАК ДатаДокумента,
		|	ПоступлениеТоваровУслуг.ДатаВходящегоДокумента КАК ДатаДокументаСопровождения,
		|	ПоступлениеТоваровУслуг.НомерВходящегоДокумента КАК НомерДокументаСопровождения,
		|	ПоступлениеТоваровУслуг.Организация,
		|	ПоступлениеТоваровУслуг.Организация КАК ЮрФизЛицо,
		|	ПоступлениеТоваровУслуг.Организация КАК Руководители,
		|	ПоступлениеТоваровУслуг.Контрагент,
		|	ПоступлениеТоваровУслуг.Контрагент КАК Поставщик,
		|	ПоступлениеТоваровУслуг.Контрагент КАК Грузоотправитель,
		|	ПоступлениеТоваровУслуг.Подразделение,
		|	ПоступлениеТоваровУслуг.Склад,
		|	ПоступлениеТоваровУслуг.ВалютаДокумента,
		|	ПоступлениеТоваровУслуг.КурсВзаиморасчетов КАК Курс,
		|	ВЫБОР
		|		КОГДА ПоступлениеТоваровУслуг.КратностьВзаиморасчетов = 0
		|			ТОГДА 1
		|		ИНАЧЕ ПоступлениеТоваровУслуг.КратностьВзаиморасчетов
		|	КОНЕЦ КАК Кратность
		|ИЗ
		|	Документ.уатПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
		|ГДЕ
		|	ПоступлениеТоваровУслуг.Ссылка = &ТекущийДокумент";
		
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();
		
		ЗапросПоТоварам = Новый Запрос();
		ЗапросПоТоварам.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент.Ссылка);
		ЗапросПоТоварам.УстановитьПараметр("Курс",            ?(ТекущийДокумент.КурсВзаиморасчетов = 0, 1,ТекущийДокумент.КурсВзаиморасчетов));
		ЗапросПоТоварам.УстановитьПараметр("Кратность",       ?(ТекущийДокумент.КратностьВзаиморасчетов = 0,1,ТекущийДокумент.КратностьВзаиморасчетов));
		
		ЗапросПоТоварам.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВложенныйЗапрос.Номенклатура,
		|	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК Строка(1000)) КАК ТоварНаименование,
		|	ВложенныйЗапрос.Номенклатура.Код КАК ТоварКод,
		|	ВложенныйЗапрос.Количество КАК КоличествоШтук,
		|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмеренияНаименование,
		|	ВложенныйЗапрос.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	ВложенныйЗапрос.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКодПоОКЕИ,
		|	ВложенныйЗапрос.Цена,
		|	ВложенныйЗапрос.Стоимость,
		|	ВложенныйЗапрос.СтавкаНДС,
		|	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
		|	ВложенныйЗапрос.Метка       КАК Метка
		|
		|ИЗ
		|	(
		|	ВЫБРАТЬ
		|		ПоступлениеТоваровУслуг.Номенклатура,
		|		СУММА(ПоступлениеТоваровУслуг.Количество) КАК Количество,
		|		ПоступлениеТоваровУслуг.ЕдиницаИзмерения,
		|		ПоступлениеТоваровУслуг.Цена        * &Курс / &Кратность  КАК Цена,
		|		СУММА(ПоступлениеТоваровУслуг.Сумма * &Курс / &Кратность) КАК Стоимость,
		|		ПоступлениеТоваровУслуг.СтавкаНДС КАК СтавкаНДС,
		|		МИНИМУМ(ПоступлениеТоваровУслуг.НомерСтроки)       КАК НомерСтроки,
		|		0                                                  КАК Метка
		|	ИЗ
		|		Документ.уатПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслуг
		|
		|	ГДЕ
		|		ПоступлениеТоваровУслуг.Ссылка = &ТекущийДокумент
		|
		|	СГРУППИРОВАТЬ ПО
		|		ПоступлениеТоваровУслуг.Номенклатура,
		|		ПоступлениеТоваровУслуг.СтавкаНДС,
		|		ПоступлениеТоваровУслуг.Цена,
		|		ПоступлениеТоваровУслуг.ЕдиницаИзмерения
		|	) КАК ВложенныйЗапрос
		|
		|УПОРЯДОЧИТЬ ПО Метка ВОЗР, НомерСтроки ВОЗР
		|
		|";
		ВыборкаСтрокТовары = ЗапросПоТоварам.Выполнить().Выбрать();
		
		ТабличныйДокумент.ИмяПараметровПечати = "ПараметрыПечати_ПоступлениеТоваровУслуг_ТОРГ4";
		Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_ТОРГ4");
		
		// Выводим общие реквизиты шапки
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		
		СведенияОПокупателе = уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(Шапка.ЮрФизЛицо, Шапка.ДатаДокумента);
		
		Если НЕ уатОбщегоНазначения.уатЗначениеНеЗаполнено(Шапка.Контрагент) Тогда
			СведенияОПоставщике = уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(Шапка.Контрагент, Шапка.ДатаДокумента);
			ОбластьМакета.Параметры.ПредставлениеПоставщика       = уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(СведенияОПоставщике);
			ОбластьМакета.Параметры.ОписаниеПоставщика            = уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(СведенияОПоставщике, "НаименованиеДляПечатныхФорм,ЮридическийАдрес,Телефоны,");
			ОбластьМакета.Параметры.ПредставлениеГрузоотправителя = уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(СведенияОПоставщике, "НаименованиеДляПечатныхФорм,ИНН,ФактическийАдрес,Телефоны,НомерСчета,Банк,БИК,КоррСчет");
			ОбластьМакета.Параметры.ПоставщикПоОКПО               = СведенияОПоставщике.КодПоОКПО;
		КонецЕсли;
		
		Руководители = уатОбщегоНазначенияТиповые.уатОтветственныеЛицаОрганизаций(Шапка.Руководители, Шапка.ДатаДокумента);
		Руководитель = Руководители.Руководитель;
		Бухгалтер    = Руководители.ГлавныйБухгалтер;
		
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ДатаДокумента            = Шапка.ДатаДокумента;
		
		ПечатьПрефиксовВключена = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ТекущийДокумент.Организация, ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ВыводитьПрефиксПриПечати"));
		Если ПечатьПрефиксовВключена Тогда
			ОбластьМакета.Параметры.НомерДокумента = Шапка.Номер; 
		Иначе
			ОбластьМакета.Параметры.НомерДокумента = уатОбщегоНазначенияКлиентСервер.НомерДокументаНаПечать(Шапка.Номер, Истина, Истина);
		КонецЕсли;
	
		ОбластьМакета.Параметры.ПредставлениеОрганизации = уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(СведенияОПокупателе);
		ОбластьМакета.Параметры.ОрганизацияПоОКПО        = СведенияОПокупателе.КодПоОКПО;
		Попытка
			ОбластьМакета.Параметры.ГрузополучательПоОКПО = СведенияОПокупателе.КодПоОКПО;
		Исключение
		КонецПопытки;
		ОбластьМакета.Параметры.ФИОРуководителя = Руководитель;
		Попытка
			ОбластьМакета.Параметры.ДолжностьРуководителя = Руководители.РуководительДолжность;
		Исключение
		КонецПопытки;
		ТекстНСТР = НСтр("en='accompanying document №%1 from %2';ru='сопроводительный документ №%1 от %2'");
		ТекстНСТР = СтрШаблон(ТекстНСТР, Шапка.НомерДокументаСопровождения, Формат(Шапка.ДатаДокументаСопровождения, "ДФ='дд ММММ гггг'"));
		ОбластьМакета.Параметры.РеквизитыСопроводительногоДокумента = ТекстНСТР;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		СтрокНаСтранице = 23;
		СтрокШапки      = 20;
		СтрокПодвала    = 7;
		НомерСтраницы   = 1;
		
		// Выводим заголовок таблицы
		ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ЗаголовокТаблицы.Параметры.НомерСтраницы = НСтр("en='Page ';ru='Страница '") + НомерСтраницы; 
		ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
		
		КоличествоСтрок = ВыборкаСтрокТовары.Количество();
		
		Если КоличествоСтрок = 1 Тогда
			ПереноситьПоследнююСтроку = 0;
		Иначе
			ЦелыхСтраницСПодвалом     = Цел((СтрокШапки + КоличествоСтрок + СтрокПодвала) / СтрокНаСтранице);
			ЦелыхСтраницБезПодвала    = Цел((СтрокШапки + КоличествоСтрок - 1) / СтрокНаСтранице);
			ПереноситьПоследнююСтроку = ЦелыхСтраницСПодвалом - ЦелыхСтраницБезПодвала;
		КонецЕсли;
		
		// инициализация итогов по странице
		ИтогоМестПоСтранице        = 0;
		ИтогоШтукПоСтранице        = 0;
		ИтогоМассаБруттоПоСтранице = 0;
		ИтогоМассаНеттоПоСтранице  = 0;
		ИтогоСтоимостьПоСтранице   = 0;
		
		// инициализация итогов по документу
		ИтогоМест        = 0;
		ИтогоШтук        = 0;
		ИтогоМассаБрутто = 0;
		ИтогоМассаНетто  = 0;
		ИтогоСтоимость   = 0;
		Ном              = 0;
		
		// Выводим многострочную часть документа
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		Пока ВыборкаСтрокТовары.Следующий() Цикл
			
			Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
				ТекстНСТР = НСтр("en='In one of the rows value of products and services not filled - string when printing is missing.';ru='В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
				Продолжить;
			КонецЕсли;
			
			Ном = Ном + 1;
			// Начинаем новую страницу, если предыдущая строка была последней на странице
			// или пора переносить последнюю строку на последнюю страницу с подвалом.
			ЦелаяСтраница = (СтрокШапки + Ном - 1) / СтрокНаСтранице;
			
			Если (ЦелаяСтраница = Цел(ЦелаяСтраница))
				или ((ПереноситьПоследнююСтроку = 1) и (Ном = КоличествоСтрок)) Тогда
				
				ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогиПоСтранице");
				
				ОбластьИтоговПоСтранице.Параметры.ИтогоМестПоСтранице        = ИтогоМестПоСтранице;
				ОбластьИтоговПоСтранице.Параметры.ИтогоШтукПоСтранице        = ИтогоШтукПоСтранице;
				ОбластьИтоговПоСтранице.Параметры.ИтогоМассаБруттоПоСтранице = ИтогоМассаБруттоПоСтранице;
				ОбластьИтоговПоСтранице.Параметры.ИтогоМассаНеттоПоСтранице  = ИтогоМассаНеттоПоСтранице;
				ОбластьИтоговПоСтранице.Параметры.ИтогоСтоимостьПоСтранице   = ИтогоСтоимостьПоСтранице;
				
				ТабличныйДокумент.Вывести(ОбластьИтоговПоСтранице);
				
				// очистим итоги по странице
				ИтогоМестПоСтранице        = 0;
				ИтогоШтукПоСтранице        = 0;
				ИтогоМассаБруттоПоСтранице = 0;
				ИтогоМассаНеттоПоСтранице  = 0;
				ИтогоСтоимостьПоСтранице   = 0;
				
				НомерСтраницы = НомерСтраницы + 1;
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ЗаголовокТаблицы.Параметры.НомерСтраницы = НСтр("en='Page ';ru='Страница '") + НомерСтраницы;
				ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
			КонецЕсли;
			
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
			ОбластьМакета.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование);
			Попытка
				ТекМассаНетто = ВыборкаСтрокТовары.ЕдиницаИзмерения.Вес * ВыборкаСтрокТовары.КоличествоШтук;
				ОбластьМакета.Параметры.МассаНетто = ТекМассаНетто;
			Исключение
				ТекМассаНетто = 0;
			КонецПопытки;
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			// Обновим итоги по странице
			ИтогоШтукПоСтранице        = ИтогоШтукПоСтранице        + ВыборкаСтрокТовары.КоличествоШтук;
			ИтогоМассаБруттоПоСтранице = ИтогоМассаБруттоПоСтранице + 0;
			ИтогоМассаНеттоПоСтранице  = ИтогоМассаНеттоПоСтранице  + ТекМассаНетто;
			ИтогоСтоимостьПоСтранице   = ИтогоСтоимостьПоСтранице   + ВыборкаСтрокТовары.Стоимость / Шапка.Кратность;
			
			// Обновим итогов по документу
			ИтогоШтук        = ИтогоШтук        + ВыборкаСтрокТовары.КоличествоШтук;
			ИтогоМассаБрутто = ИтогоМассаБрутто + 0;
			ИтогоМассаНетто  = ИтогоМассаНетто  + ТекМассаНетто;
			ИтогоСтоимость   = ИтогоСтоимость   + ВыборкаСтрокТовары.Стоимость / Шапка.Кратность;
			
		КонецЦикла;
		
		// Выводим итоги по последней странице
		ОбластьИтоговПоСтранице = Макет.ПолучитьОбласть("ИтогиПоСтранице");
		ОбластьИтоговПоСтранице.Параметры.ИтогоШтукПоСтранице        = ИтогоШтукПоСтранице;
		ОбластьИтоговПоСтранице.Параметры.ИтогоМассаБруттоПоСтранице = ИтогоМассаБруттоПоСтранице;
		ОбластьИтоговПоСтранице.Параметры.ИтогоМассаНеттоПоСтранице  = ИтогоМассаНеттоПоСтранице;
		ОбластьИтоговПоСтранице.Параметры.ИтогоСтоимостьПоСтранице   = ИтогоСтоимостьПоСтранице;
		ТабличныйДокумент.Вывести(ОбластьИтоговПоСтранице);
		
		// Выводим итоги по документу в общем
		ОбластьМакета = Макет.ПолучитьОбласть("Всего");
		ОбластьМакета.Параметры.ИтогоШтук        = ИтогоШтук;
		ОбластьМакета.Параметры.ИтогоМассаБрутто = ИтогоМассаБрутто;
		ОбластьМакета.Параметры.ИтогоМассаНетто  = ИтогоМассаНетто;
		ОбластьМакета.Параметры.ИтогоСтоимость   = ИтогоСтоимость;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Выводим подвал документа
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Зададим параметры макета
		ТабличныйДокумент.ПолеСверху = 0;
		ТабличныйДокумент.ПолеСлева  = 0;
		ТабличныйДокумент.ПолеСнизу  = 0;
		ТабличныйДокумент.ПолеСправа = 0;
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ТекущийДокумент);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатнаяФорма()

Функция ПечатьМ4(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_ПоступлениеТоваровУслуг";
	
	ПервыйДокумент = Истина;
	
	НетКодаКонтрагента = (Метаданные.Справочники.Контрагенты.ДлинаКода = 0);
	
	Для Каждого ТекущийДокумент Из МассивОбъектов Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент.Ссылка);
		
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПоступлениеТоваровУслуг.Номер КАК Номер,
		|	ПоступлениеТоваровУслуг.Дата КАК ДатаСоставления,
		|	ПоступлениеТоваровУслуг.НомерВходящегоДокумента КАК НомерСопроводительногоДокумента,
		|	ПоступлениеТоваровУслуг.Организация,
		|	ПоступлениеТоваровУслуг.Организация КАК ЮрФизЛицо,
		|	ПоступлениеТоваровУслуг.Склад КАК МестоПриемки,
		|	ПоступлениеТоваровУслуг.Склад КАК СкладНаименование,
		|	ПоступлениеТоваровУслуг.Подразделение,
		|	ПоступлениеТоваровУслуг.Подразделение КАК ПредставлениеПодразделения,
		|	ПоступлениеТоваровУслуг.Контрагент.Код КАК ПоставщикКод,
		|	ПоступлениеТоваровУслуг.Контрагент КАК Поставщик,
		|	ПоступлениеТоваровУслуг.ВалютаДокумента,
		|	ПоступлениеТоваровУслуг.КурсВзаиморасчетов КАК Курс,
		|	ВЫБОР
		|		КОГДА ПоступлениеТоваровУслуг.КратностьВзаиморасчетов = 0
		|			ТОГДА 1
		|		ИНАЧЕ ПоступлениеТоваровУслуг.КратностьВзаиморасчетов
		|	КОНЕЦ КАК Кратность,
		|	ПоступлениеТоваровУслуг.УчитыватьНДС,
		|	ПоступлениеТоваровУслуг.СуммаВключаетНДС
		|ИЗ
		|	Документ.уатПоступлениеТоваровУслуг КАК ПоступлениеТоваровУслуг
		|ГДЕ
		|	ПоступлениеТоваровУслуг.Ссылка = &ТекущийДокумент";
		
		Если НетКодаКонтрагента Тогда
			Запрос.Текст = СтрЗаменить(Запрос.Текст, "ПоступлениеТоваровУслуг.Контрагент.Код", """");
		КонецЕсли;
		
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();
		
		ЗапросПоТоварам = Новый Запрос();
		ЗапросПоТоварам.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент.Ссылка);
		ЗапросПоТоварам.УстановитьПараметр("Курс",            ?(ТекущийДокумент.КурсВзаиморасчетов = 0, 1,ТекущийДокумент.КурсВзаиморасчетов));
		ЗапросПоТоварам.УстановитьПараметр("Кратность",       ?(ТекущийДокумент.КратностьВзаиморасчетов = 0,1,ТекущийДокумент.КратностьВзаиморасчетов));
		
		ЗапросПоТоварам.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВложенныйЗапрос.Номенклатура,
		|	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК ТоварНаименование,
		|	ВложенныйЗапрос.Номенклатура.Код КАК ТоварКод,
		|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмеренияНаименование,
		|	ВложенныйЗапрос.ЕдиницаИзмерения.ЕдиницаПоКлассификатору.Код КАК ЕдиницаИзмеренияКод,
		|	ВложенныйЗапрос.СтавкаНДС,
		|	ВложенныйЗапрос.КоличествоПринято,
		|	ВложенныйЗапрос.Цена,
		|	ВложенныйЗапрос.Стоимость,
		|	ВложенныйЗапрос.СуммаНДС,
		|	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
		|	ВложенныйЗапрос.Метка КАК Метка
		|ИЗ
		|	(ВЫБРАТЬ
		|		ПоступлениеТоваровУслуг.Номенклатура КАК Номенклатура,
		|		ПоступлениеТоваровУслуг.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|		ПоступлениеТоваровУслуг.СтавкаНДС КАК СтавкаНДС,
		|		СУММА(ПоступлениеТоваровУслуг.Количество) КАК КоличествоПринято,
		|		СУММА(ПоступлениеТоваровУслуг.Цена * &Курс / &Кратность) КАК Цена,
		|		СУММА(ПоступлениеТоваровУслуг.Сумма * &Курс / &Кратность) КАК Стоимость,
		|		СУММА(ПоступлениеТоваровУслуг.СуммаНДС * &Курс / &Кратность) КАК СуммаНДС,
		|		МИНИМУМ(ПоступлениеТоваровУслуг.НомерСтроки) КАК НомерСтроки,
		|		0 КАК Метка
		|	ИЗ
		|		Документ.уатПоступлениеТоваровУслуг.Товары КАК ПоступлениеТоваровУслуг
		|	ГДЕ
		|		ПоступлениеТоваровУслуг.Ссылка = &ТекущийДокумент
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ПоступлениеТоваровУслуг.Номенклатура,
		|		ПоступлениеТоваровУслуг.ЕдиницаИзмерения,
		|		ПоступлениеТоваровУслуг.СтавкаНДС) КАК ВложенныйЗапрос
		|
		|УПОРЯДОЧИТЬ ПО
		|	Метка,
		|	НомерСтроки";
		ВыборкаСтрокТовары = ЗапросПоТоварам.Выполнить().Выбрать();
		
		ТабличныйДокумент.ИмяПараметровПечати = "ПараметрыПечати_ПоступлениеТоваровУслуг_М4";
		Макет = УправлениеПечатью.МакетПечатнойФормы("ОбщийМакет.ПФ_MXL_М4");
		
		// Выводим общие реквизиты шапки
		СведенияОПокупателе = уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(Шапка.ЮрФизЛицо, Шапка.ДатаСоставления);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Шапка");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ПредставлениеОрганизации = уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(СведенияОПокупателе);
		ОбластьМакета.Параметры.ОрганизацияПоОКПО        = СведенияОПокупателе.КодПоОКПО;
		
		ПечатьПрефиксовВключена = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ТекущийДокумент.Организация, ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ВыводитьПрефиксПриПечати"));
		Если ПечатьПрефиксовВключена Тогда
			ОбластьМакета.Параметры.НомерДокумента = Шапка.Номер;
		Иначе
			ОбластьМакета.Параметры.НомерДокумента = уатОбщегоНазначенияКлиентСервер.НомерДокументаНаПечать(Шапка.Номер, Истина, Истина);
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Выводим заголовок документа
		ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокДокумента");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ОбластьМакета.Параметры.ДатаСоставления = Шапка.ДатаСоставления;
		ПредставлениеКонтрагента = уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.ДатаСоставления), "НаименованиеДляПечатныхФорм,");
		ОбластьМакета.Параметры.ПоставщикНаименование = ПредставлениеКонтрагента;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Выводим заголовок таблицы
		ЗаголовокТаблицы = Макет.ПолучитьОбласть("ЗаголовокТаблицы");
		ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
		
		СтрокНаСтранице = 24;
		СтрокШапки      = 9;
		СтрокПодвала    = 3;
		НомерСтраницы   = 1;
		
		КоличествоСтрок = ВыборкаСтрокТовары.Количество();
		Если КоличествоСтрок = 1 Тогда
			ПереноситьПоследнююСтроку = 0;
		Иначе
			ЦелыхСтраницСПодвалом     = Цел((СтрокШапки + КоличествоСтрок + СтрокПодвала) / СтрокНаСтранице);
			ЦелыхСтраницБезПодвала    = Цел((СтрокШапки + КоличествоСтрок - 1) / СтрокНаСтранице);
			ПереноситьПоследнююСтроку = ЦелыхСтраницСПодвалом - ЦелыхСтраницБезПодвала;
		КонецЕсли;
		
		// Инициализация итогов в документе
		ИтогоКоличествоПринято = 0;
		ИтогоСуммаБезНДС = 0;
		ИтогоСуммаНДС    = 0;
		ИтогоВсегоСНДС   = 0;
		Ном              = 0;
		
		// Выводим многострочную часть документа
		ОбластьМакета = Макет.ПолучитьОбласть("Строка");
		Пока ВыборкаСтрокТовары.Следующий() Цикл
			Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(ВыборкаСтрокТовары.Номенклатура) Тогда
				ТекстНСТР = НСтр("en='In one of the rows value of products and services not filled - string when printing is missing.';ru='В одной из строк не заполнено значение номенклатуры - строка при печати пропущена.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
				Продолжить;
			КонецЕсли;
			
			Ном = Ном + 1;
			// Начинаем новую страницу, если предыдущая строка была последней на странице
			// или пора переносить последнюю строку на последнюю страницу с подвалом.
			ЦелаяСтраница = (СтрокШапки + Ном - 1) / СтрокНаСтранице;
			
			Если (ЦелаяСтраница = Цел(ЦелаяСтраница))
				или ((ПереноситьПоследнююСтроку = 1) и (Ном = КоличествоСтрок)) Тогда
				
				НомерСтраницы = НомерСтраницы + 1;
				ПодвалСтрок   = Макет.ПолучитьОбласть("ПодвалСтрок");
				ТабличныйДокумент.Вывести(ПодвалСтрок);
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
				ЗаголовокТаблицы.Параметры.НомерСтраницы = НСтр("en='Page ';ru='Страница '") + НомерСтраницы;
				ТабличныйДокумент.Вывести(ЗаголовокТаблицы);
			КонецЕсли;
			
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
			
			Кратность = ?(Шапка.Кратность = 0, 1, Шапка.Кратность);
			ВсегоСНДС = (ВыборкаСтрокТовары.Стоимость
				+ ?(Шапка.УчитыватьНДС И НЕ Шапка.СуммаВключаетНДС, ВыборкаСтрокТовары.СуммаНДС, 0));
			
			КоличествоПринято = ВыборкаСтрокТовары.КоличествоПринято;
			СуммаНДС          = ВыборкаСтрокТовары.СуммаНДС / Шапка.Кратность;
			Цена              = (ВсегоСНДС - СуммаНДС) / КоличествоПринято;
			
			ОбластьМакета.Параметры.КоличествоПринято = КоличествоПринято;
			ОбластьМакета.Параметры.ВсегоСНДС         = ВсегоСНДС;
			ОбластьМакета.Параметры.СуммаБезНДС       = ВсегоСНДС - СуммаНДС;
			ОбластьМакета.Параметры.СуммаНДС          = СуммаНДС;
			ОбластьМакета.Параметры.Цена              = Цена;
			ОбластьМакета.Параметры.ТоварНаименование = СокрЛП(ВыборкаСтрокТовары.ТоварНаименование)
			+ ?(ВыборкаСтрокТовары.Метка = 2, " (возвратная тара)", "");
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			ИтогоКоличествоПринято = ИтогоКоличествоПринято + КоличествоПринято;
			ИтогоСуммаБезНДС       = ИтогоСуммаБезНДС       + ВсегоСНДС - СуммаНДС;
			ИтогоСуммаНДС          = ИтогоСуммаНДС          + СуммаНДС;
			ИтогоВсегоСНДС         = ИтогоВсегоСНДС         + ВсегоСНДС;
			
		КонецЦикла;
		
		// Выводим итоги по документу
		ОбластьМакета = Макет.ПолучитьОбласть("Итого");
		ОбластьМакета.Параметры.ИтогоКоличествоПринято = ИтогоКоличествоПринято;
		ОбластьМакета.Параметры.ИтогоСуммаБезНДС = ИтогоСуммаБезНДС;
		ОбластьМакета.Параметры.ИтогоСуммаНДС    = ИтогоСуммаНДС;
		ОбластьМакета.Параметры.ИтогоВсегоСНДС   = ИтогоВсегоСНДС;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Выводим итоги по документу
		ОбластьМакета = Макет.ПолучитьОбласть("Подвал");
		ОбластьМакета.Параметры.Заполнить(Шапка);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Зададим параметры макета
		ТабличныйДокумент.ПолеСверху         = 0;
		ТабличныйДокумент.ПолеСлева          = 0;
		ТабличныйДокумент.ПолеСнизу          = 0;
		ТабличныйДокумент.ПолеСправа         = 0;
		ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ТекущийДокумент);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатнаяФорма()

Функция СтруктураКурсаВалютыСтроки(Валюта, ДатаКурса, КэшКурсов = Неопределено)
	// Кеширование используется для исключения повторного получения курса для одной и той же валюты
	Если КэшКурсов = Неопределено Тогда
		КэшКурсов = Новый Соответствие;
	КонецЕсли;
	
	СтруктураКурсаСтроки = КэшКурсов.Получить(Валюта);
	Если СтруктураКурсаСтроки = Неопределено Тогда
		СтруктураКурсаСтроки = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(Валюта, ДатаКурса);
		КэшКурсов.Вставить(Валюта, СтруктураКурсаСтроки);
	КонецЕсли;
	
	Возврат СтруктураКурсаСтроки;
КонецФункции

// Процедура - Заполнить структуру получателей печатных форм
//
// Параметры:
//  СтруктураДанныхОбъектаПечати - Структура - Структура данных получателей печатной формы
//
Процедура ЗаполнитьСтруктуруПолучателейПечатныхФорм(СтруктураДанныхОбъектаПечати) Экспорт
	
	СтруктураДанныхОбъектаПечати.ОсновнойПолучатель = "Контрагент";
	 
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Контрагент");
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("КонтактноеЛицо");
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Грузоотправитель");
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Грузополучатель");
	
КонецПроцедуры

// Функция помещает необходимые данные в структуру. Структура помещается во временное хранилище.
//
// Возвращаемое значение:
//   Строка - адрес структуры данных во временном хранилище.
//
Функция ДанныеДляПечатиЭтикеток(МассивДокументов) Экспорт

	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Товары.Номенклатура КАК Номенклатура,
	|	Товары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	Товары.Количество КАК КоличествоЭтикеток,
	|	Товары.Количество КАК КоличествоВДокументе
	|ИЗ
	|	Документ.уатПоступлениеТоваровУслуг.Товары КАК Товары
	|ГДЕ
	|	Товары.Ссылка В(&МассивДокументов)";
	Запрос.УстановитьПараметр("МассивДокументов", МассивДокументов);
	
	мсвТовары = Запрос.Выполнить().Выгрузить();
	
	// Подготовка данных для заполенения табличной части обработки печати этикеток.
	СтруктураРезультат = Новый Структура;
	СтруктураРезультат.Вставить("Товары", мсвТовары);
	СтруктураРезультат.Вставить("Организация", МассивДокументов[0].Организация);
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураРезультат);
	
КонецФункции

#КонецОбласти

#КонецЕсли
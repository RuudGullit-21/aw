
#Область ПеременныеФормы

&НаКлиенте
Перем ИмяТабличнойЧасти;
&НаКлиенте
Перем ДанныеСтрокиУслуги; // Хранит данные строки ТЧ Услуги перед началом редактирования.

#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	уатЗащищенныеФункцииСервер.уатДокументФормаЭлементаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, Объект, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.УчетОригиналовПервчиныхДокументов
	УчетОригиналовПервичныхДокументов.ПриСозданииНаСервере_ФормаДокумента(ЭтотОбъект, Элементы.ГруппаУчетПервичныхДокументов);
	уатУчетОригиналовПервичныхДокументов.ОтобразитьДатуПоследнегоИзмененияПервичныхДокументов(ЭтотОбъект, Элементы.ГруппаУчетПервичныхДокументов);
	// Конец СтандартныеПодсистемы.УчетОригиналовПервчиныхДокументов

	// Ввод на основании ЗаказаНаТС и МЛ
	Если ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") 
		ИЛИ ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.уатМаршрутныйЛист") 
		ИЛИ ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.уатЗаказПеревозчику_уэ") Тогда
		
		ДокОбъект = РеквизитФормыВЗначение("Объект");
		
		ДанныеЗаполнения = Новый Структура();
		ДанныеЗаполнения.Вставить("флВыбратьКонтрагента", Истина);
		ДанныеЗаполнения.Вставить("Основание", Параметры.Основание);
		ДанныеЗаполнения.Вставить("Расходы", Параметры.Основание.Расходы);
		
		ДокОбъект.Заполнить(ДанныеЗаполнения);
		Объект.ДокументОснование = Параметры.Основание;
		
		Если ДокОбъект.ДополнительныеСвойства.Свойство("мсвКонтрагенты") Тогда // Несколько контрагентов
			тзКонтрагенты = ДокОбъект.ДополнительныеСвойства.мсвКонтрагенты;
			мсвКонтрагенты.ЗагрузитьЗначения(уатОбщегоНазначенияСервер.ПреобразоватьТаблицувМассивСтрок(тзКонтрагенты));
			
			тзТаблицаУслуги = ДокОбъект.ДополнительныеСвойства.ТаблицаУслуги;
			ТаблицаУслуги.ЗагрузитьЗначения(уатОбщегоНазначенияСервер.ПреобразоватьТаблицувМассивСтрок(тзТаблицаУслуги));
			
			Возврат;
			
		ИначеЕсли ДокОбъект.ДополнительныеСвойства.Свойство("мсвТаблицаУслуги") Тогда // Один контрагент
			мсвТаблицаУслуги = ДокОбъект.ДополнительныеСвойства.мсвТаблицаУслуги;
			ДокОбъект.ОбработкаЗаполненияИзФормыВыбораКонтрагента(Объект.ДокументОснование, мсвТаблицаУслуги);
			ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
			
		КонецЕсли;
	КонецЕсли;
	
	// Настройка интерфейса формы для внешнего польователя.
	АвторизованныйКонтрагент = уатЗащищенныеФункцииСервер_проф.АвторизованныйКонтрагент(АвторизованВнешнийПользователь);
	УровеньДоступаКУслугам = уатОбщегоНазначенияСервер.УровеньДоступаКонтрагентаКУслугам(АвторизованныйКонтрагент).РедактированиеПоступленийУслуг;
	Если АвторизованВнешнийПользователь Тогда
		Если НЕ Объект.Ссылка.Пустая()
			И Объект.СозданПеревозчиком
			И уатСогласованиеДокументовСервер.ДокументСогласован(Объект.Ссылка) Тогда
			ТекстПредупреждения = НСтр("ru = 'Для данного документа завершен процесс согласования.
				|Документ открыт в режиме просмотра'");
			ОбщегоНазначения.СообщитьПользователю(ТекстПредупреждения);
			ТолькоПросмотр = Истина;
		ИначеЕсли Не Объект.Ссылка.Пустая() И Не Объект.СозданПеревозчиком Тогда
			ТекстПредупреждения = НСтр("ru = 'Для данного документа не установлен флаг ""Создан перевозчиком"".
				|Документ открыт в режиме просмотра'");
			ОбщегоНазначения.СообщитьПользователю(ТекстПредупреждения);
			ТолькоПросмотр = Истина;
		КонецЕсли;
		Если Объект.Ссылка.Пустая() Тогда
			Объект.СозданПеревозчиком = Истина;
			Объект.Контрагент = АвторизованныйКонтрагент;
			
			Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	ДоговорыКонтрагентов.Организация КАК Организация,
				|	ДоговорыКонтрагентов.Ссылка КАК Договор
				|ИЗ
				|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
				|ГДЕ
				|	ДоговорыКонтрагентов.Владелец = &Контрагент
				|	И ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора";
				Запрос.УстановитьПараметр("ВидДоговора", Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
				Запрос.УстановитьПараметр("Контрагент", АвторизованныйКонтрагент);
				
				РезультатЗапроса = Запрос.Выполнить().Выгрузить();
				
				Если РезультатЗапроса.Количество() <> 0 Тогда
					Объект.Организация = РезультатЗапроса[0].Организация;
					Объект.ДоговорКонтрагента = РезультатЗапроса[0].Договор;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Элементы.Переместить(Элементы.Дата, Элементы.ГруппаВхДок);
		Элементы.Переместить(Элементы.Номер, Элементы.ГруппаВхДок);
		Элементы.Переместить(Элементы.ДатаВходящегоДокумента, Элементы.ГруппаНомерДата);
		Элементы.Переместить(Элементы.НомерВходящегоДокумента, Элементы.ГруппаНомерДата);
		
		Если уатОбщегоНазначенияСервер.АвторизованВнещнийПеревозчик() Тогда
			КомандаСоздатьНаОсновании = Элементы.Найти("ФормаДокументуатСчетНаОплатуПоставщикаСоздатьНаОсновании");
			Если КомандаСоздатьНаОсновании <> Неопределено Тогда
				КомандаСоздатьНаОсновании.Заголовок = НСтр("ru = 'Счет на оплату'");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнениеШапкиПриСозданииДокумента(Отказ, СтандартнаяОбработка, Параметры);
	
	// уатСогласованиеДокументов
	ИмяДокументаСогласование = "ПоступлениеТоваровУслуг";
	уатСогласованиеДокументовСервер.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец уатСогласованиеДокументов
	
	//ПодключаемоеОборудование
	уатОбщегоНазначения_проф.НастроитьПодключаемоеОборудование(ЭтотОбъект);
	//Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеШапкиПриСозданииДокумента(Отказ, СтандартнаяОбработка, Параметры)
	// Создание из "ФормаВыборКонтрагента"
	Если Параметры.Свойство("Услуги") Тогда
		Объект.ДокументОснование = Параметры.ДокументОснование;
		мсвТаблицаУслуги         = Параметры.Услуги;
		ДокОбъект                = РеквизитФормыВЗначение("Объект");
		ДокОбъект.ОбработкаЗаполненияИзФормыВыбораКонтрагента(Объект.ДокументОснование, мсвТаблицаУслуги);
		ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
	КонецЕсли;
	
	// Установка реквизитов формы.
	Если Объект.Ссылка.Пустая() Тогда
		Объект.ДатаНач = ?(Объект.ДатаНач = '00010101', НачалоМесяца(ТекущаяДата()), Объект.ДатаНач);
		Объект.ДатаКон = ?(Объект.ДатаКон = '00010101', ТекущаяДата(), Объект.ДатаКон);
	КонецЕсли;
	
	МноговалютныйУчет = ПолучитьФункциональнуюОпцию("уатМноговалютныйУчет");
	
	мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Контрагент = Объект.Контрагент;
	Если НЕ Объект.Ссылка.Пустая() ИЛИ НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Договор = Объект.ДоговорКонтрагента;
	КонецЕсли;
	ВалютаРасчетов = Объект.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	НациональнаяВалюта = мВалютаРегламентированногоУчета;
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата,
						Новый Структура("Валюта", НациональнаяВалюта));
	КурсНациональнаяВалюта = СтруктураПоВалюте.Курс;
	КратностьНациональнаяВалюта = СтруктураПоВалюте.Кратность;
	
	ОрганизацияПередИзменением = Объект.Организация;
	
	уатОбщегоНазначенияСервер.НастроитьПолеЕдиницыИзмерения(ЭтотОбъект, "Товары");
	уатОбщегоНазначенияСервер.НастроитьПолеПодразделение(Элементы.Подразделение, "Объект.Организация");
	уатОбщегоНазначенияСервер.НастроитьПолеДоговорКонтрагента(Элементы.ДоговорКонтрагента, "Объект.Организация", "Объект.Контрагент", "СПоставщиком");
	
	ОтобразитьДатуПлатежа();
	УстановитьОтборСделки();
	
	// уатУправлениеАвтотранспортом.МодификацияКонфигурации
	уатМодификацияКонфигурацииПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	// Конец уатУправлениеАвтотранспортом.МодификацияКонфигурации
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// уатУправлениеАвтотранспортом.МодификацияКонфигурации
	уатМодификацияКонфигурацииКлиентПереопределяемый.ПриОткрытии(ЭтотОбъект, Отказ);
	// Конец уатУправлениеАвтотранспортом.МодификацияКонфигурации
	
	уатЗащищенныеФункцииКлиент.уатДокументФормаЭлементаПриОткрытии(Отказ, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	Если мсвКонтрагенты.Количество() > 1 Тогда
		ПараметрыФормы = Новый Структура("ВидОперации, Ссылка, Контрагенты, Услуги, ДокументОснование",
			0, Объект.Ссылка, мсвКонтрагенты, ТаблицаУслуги, Объект.ДокументОснование);
		ОткрытьФорму("Документ.уатПоступлениеТоваровУслуг.Форма.ФормаВыборКонтрагента", ПараметрыФормы, ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	Иначе
		Если Объект.Ссылка.Пустая() И ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
			уатОбщегоНазначенияКлиент.ПриИзмененииДоговора(ЭтаФорма, Неопределено, Договор);
		КонецЕсли;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// уатСогласованиеДокументов
	уатСогласованиеДокументовКлиент.ОбновитьСтатусСогласования(ЭтотОбъект);
	// Конец уатСогласованиеДокументов
	
	//ПодключаемоеОборудование
	уатОбщегоНазначенияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(ЭтотОбъект);
	//Конец ПодключаемоеОборудование
	
	// Установить видимость реквизитов и заголовков колонок.
	УстановитьВидимость();
	
	ОбновитьВсегоВТЧТовары();
	ОбновитьВсегоВТЧУслуги();
	ВывестиСуммовыеИтогиДокумента();
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ИсточникВыбора.ИмяФормы = "Обработка.уатПодборНоменклатуры.Форма.Форма" или ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.Форма" Тогда
		ОбработкаПодбора(ИсточникВыбора.ИмяТаблицы, ВыбранноеЗначение);
	ИначеЕсли ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровВДокументЗакупки.Форма.Форма" Тогда
		ОбработкаПодбора(ИмяТабличнойЧасти, ВыбранноеЗначение);      
	КонецЕсли;
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОтобразитьДатуПлатежа();
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбновитьВсегоВТЧТовары();
	ОбновитьВсегоВТЧУслуги();
	ВывестиСуммовыеИтогиДокумента();
	
	УстановитьВидимость();
	
	уатМодификацияКонфигурацииКлиентПереопределяемый.ПослеЗаписи(ЭтотОбъект, ПараметрыЗаписи);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// уатСогласованиеДокументов
	уатСогласованиеДокументовКлиент.ПослеЗаписи(ЭтотОбъект);
	// Конец уатСогласованиеДокументов
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если Объект.СозданПеревозчиком
		И Не ЗначениеЗаполнено(Объект.ДатаВходящегоДокумента) И Не ЗначениеЗаполнено(Объект.НомерВходящегоДокумента) Тогда
		Объект.ДатаВходящегоДокумента = Объект.Дата;
		Объект.НомерВходящегоДокумента = Объект.Номер;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов	
	УчетОригиналовПервичныхДокументовКлиент.ОбработчикОповещенияФормаДокумента(ИмяСобытия, ЭтотОбъект);
	// Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов

	Если ИмяСобытия = "СозданиеДокументаИзФормыВыбораКонтрагента_уатПоступлениеТоваровУслуг"
		И мсвКонтрагенты.Количество() > 0 И Объект.Ссылка.Пустая() Тогда
		
		Параметр.Вставить("Основание",           Параметр.ДокументОснование);
		Параметр.Вставить("ЗначениеКопирования", Неопределено);
		Параметр.Вставить("ЗначенияЗаполнения",  Новый Структура);
		ЗаполнениеШапкиПриСозданииДокумента(Ложь, Истина, Параметр);
		
		Если Объект.Ссылка.Пустая() И ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
			уатОбщегоНазначенияКлиент.ПриИзмененииДоговора(ЭтаФорма, Неопределено, Договор);
		КонецЕсли;
	
		// Установить видимость реквизитов и заголовков колонок.
		УстановитьВидимость();
		
		ОбновитьВсегоВТЧТовары();
		ОбновитьВсегоВТЧУслуги();
		ВывестиСуммовыеИтогиДокумента();
		
		мсвКонтрагенты.Очистить();
	КонецЕсли;
	
	// уатСогласованиеДокументов
	уатСогласованиеДокументовКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр);
	// Конец уатСогласованиеДокументов
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Оповещ = Новый ОписаниеОповещения("ДобавитьНоменклатуруВТЧПоШтрихкоду", ЭтотОбъект);
		уатОбщегоНазначенияКлиент.ОбработатьСобытиеПодключаемогоОборудования(ИмяСобытия, Параметр, Источник,
			Новый Структура("Оповещение", Оповещ));
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	// ПодключаемоеОборудование
	уатОбщегоНазначенияКлиент.ОбработкаВнешнегоСобытия(Источник, Событие, Данные);
	// Конец ПодключаемоеОборудование
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если флВопросЗакрытиеФормы Тогда
		Отказ = Истина;
		Оповещ = Новый ОписаниеОповещения("ПередЗакрытиемВопрос", ЭтотОбъект);
		ПоказатьВопрос(Оповещ, "При проверке корректности заполнения документа возникли предупреждения!
			|Продолжить закрытие формы?", РежимДиалогаВопрос.ОКОтмена);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// уатУправлениеАвтотранспортом.МодификацияКонфигурации
&НаКлиенте
Процедура Подключаемый_уатВыполнитьКоманду(Команда)
	
	уатМодификацияКонфигурацииКлиентПереопределяемый.ВыполнитьПодключаемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры
// Конец уатУправлениеАвтотранспортом.МодификацияКонфигурации

&НаКлиенте
Процедура РедактироватьЦеныИВалюту(Команда)
	
	ОбработатьИзмененияПоКнопкеЦеныИВалюты(Новый ОписаниеОповещения("РедактироватьЦеныИВалютуЗавершение", ЭтотОбъект), Объект.ВалютаДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПодбор(Команда)
	ПараметрыПодбора = ПолучитьПараметрыПодбора("Товары");
	Если ПараметрыПодбора <> Неопределено Тогда
		ИмяТабличнойЧасти = "Товары";
		уатОбщегоНазначенияТиповыеКлиент.уатОткрытьПодборНоменклатуры(ЭтотОбъект,ПараметрыПодбора,УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УслугиПодбор(Команда)
	ПараметрыПодбора = ПолучитьПараметрыПодбора("Услуги");
	Если ПараметрыПодбора <> Неопределено Тогда
		ИмяТабличнойЧасти = "Услуги";
		уатОбщегоНазначенияТиповыеКлиент.уатОткрытьПодборНоменклатуры(ЭтотОбъект,ПараметрыПодбора,УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Очистить(Команда)
	Если Объект.Услуги.Количество() Тогда
		ТекстНСТР = НСтр("en='The list of services is not empty! Clear?';ru='Список услуг не пустой! Очистить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ОчиститьЗавершение", ЭтотОбъект), ТекстНСТР,
			РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет, НСтр("en='Clear the table';ru='Очистка таблицы'"));
        Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
        Объект.Услуги.Очистить();
		Модифицированность = Истина;
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаПериод(Команда)
	Если Объект.Услуги.Количество() > 0 Тогда
		ТекстНСТР = НСтр("en='Before filling out the document table is cleared. Do you want to continue?';ru='Перед заполнением таблица документа будет очищена. Продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьЗаПериодЗавершение", ЭтотОбъект), ТекстНСТР, РежимДиалогаВопрос.ДаНет);
        Возврат;
	КонецЕсли;
	
	ЗаполнитьЗаПериодФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаПериодЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        Возврат;
    Иначе
        Объект.Услуги.Очистить();
		Модифицированность = Истина;
    КонецЕсли;
    
    ЗаполнитьЗаПериодФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаПериодФрагмент()
    
    ПараметрыФормы = Новый Структура("НачалоПериода, КонецПериода, СсылкаОснование", Объект.ДатаНач, Объект.ДатаКон, Объект.Ссылка);
    ОткрытьФорму("ОбщаяФорма.уатЗаполнениеПоУслугам", ПараметрыФормы, ЭтотОбъект,,,,
		Новый ОписаниеОповещения("ЗаполнитьЗаПериодФрагментЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаПериодФрагментЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ВалютаВзаиморасчетов = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.ДоговорКонтрагента, "ВалютаВзаиморасчетов");
	ВалютаВзаиморасчетовКурсКратность = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ВалютаВзаиморасчетов, Объект.Дата);
	
	КэшКурсов = Новый Соответствие;
	КэшКурсов.Вставить(Объект.ВалютаДокумента, Новый Структура("Курс, Кратность", Объект.КурсВзаиморасчетов, Объект.КратностьВзаиморасчетов));
	
	мсвУслуги = Результат;
	Если ТипЗнч(мсвУслуги) = Тип("Массив") И мсвУслуги.Количество() > 0 Тогда
		Для Каждого СтрокаУслуг Из мсвУслуги Цикл
			НоваяСтрока = Объект.Услуги.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаУслуг,, "Цена, Сумма");
			НоваяСтрока.ЗаказНаТС = СтрокаУслуг.Заказ;
			НоваяСтрока.Заказ = СтрокаУслуг.ЗаказПеревозчику;
			
			Если Объект.УчитыватьНДС И Объект.СуммаВключаетНДС Тогда
				НоваяСтрока.Сумма = СтрокаУслуг.Сумма;
				НоваяСтрока.Цена = СтрокаУслуг.Цена;
			Иначе
				НоваяСтрока.Сумма = СтрокаУслуг.Сумма - СтрокаУслуг.СуммаНДС;
				НоваяСтрока.Цена = ?(СтрокаУслуг.Количество = 0, 0, НоваяСтрока.Сумма / СтрокаУслуг.Количество);
			КонецЕсли;
			
			Если НЕ Объект.УчитыватьНДС Тогда
				НоваяСтрока.СтавкаНДС = Неопределено;
				НоваяСтрока.СуммаНДС  = 0;
			КонецЕсли;
			
			Если Объект.УчитыватьНДС И НЕ ЗначениеЗаполнено(НоваяСтрока.СтавкаНДС)
				И ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
				НоваяСтрока.СтавкаНДС = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(
										НоваяСтрока.Номенклатура, "СтавкаНДС");
				РассчитатьСуммуНДС(НоваяСтрока, Истина);
			КонецЕсли;
			
			НоваяСтрока.СтатьяРасходов = уатОбщегоНазначенияСервер.СтатьяРасходовНоменклатуры(НоваяСтрока.Номенклатура);
			
			Если МноговалютныйУчет Тогда
				НоваяСтрока.Валюта = СтрокаУслуг.Валюта;
				НоваяСтрока.КроссКурс = ПолучитьКроссКурс(СтрокаУслуг.Валюта, Объект.ВалютаДокумента, Объект.ДатаКурса, КэшКурсов);
				НоваяСтрока.ЦенаВалютная     = НоваяСтрока.Цена;
				НоваяСтрока.СуммаВалютная    = НоваяСтрока.Сумма;
				НоваяСтрока.СуммаНДСВалютная = НоваяСтрока.СуммаНДС;
				
				// перевод невалютных колонок в валюту документа из валюты заказа
				Если НоваяСтрока.Валюта <> Объект.ВалютаДокумента Тогда
					НоваяСтрока.Цена = НоваяСтрока.ЦенаВалютная * НоваяСтрока.КроссКурс;
					РассчитатьСуммуВСтрокеТабличнойЧасти(НоваяСтрока, Истина, Ложь);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Модифицированность = Истина;
	КонецЕсли;

	РассчитатьСуммуДокумента();
	ОбновитьВсегоВТЧУслуги();
		
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьКроссКурсВТЧ(Команда)
	мсвВалюты = Новый Массив;
	Для Каждого ТекСтрока Из Объект.Услуги Цикл
		Если НЕ ЗначениеЗаполнено(ТекСтрока.Валюта) Тогда
			Продолжить;
		КонецЕсли;
		
		Если мсвВалюты.Найти(ТекСтрока.Валюта) = Неопределено Тогда
			мсвВалюты.Добавить(ТекСтрока.Валюта);
		КонецЕсли;
	КонецЦикла;
	
	Если мсвВалюты.Количество() = 0 Тогда
		уатОбщегоНазначенияТиповые.СообщитьОбОшибке("Выделенные строки не содержат ни одной валюты!
			|Операция допустима только для строк с указанными валютами.",,, СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;
	
	Если мсвВалюты.Количество() > 1 Тогда
		Оповещ = Новый ОписаниеОповещения("ИзменитьКроссКурсВТЧВыборВалюты", ЭтотОбъект);
		
		СписВалюты = Новый СписокЗначений;
		СписВалюты.ЗагрузитьЗначения(мсвВалюты);
		СписВалюты.ПоказатьВыборЭлемента(Оповещ, "Строки с выбранной валютой будут пересчитаны", СписВалюты);
		Возврат;
	КонецЕсли;
	
	ИзменитьКроссКурсВТЧВводКроссКурса(мсвВалюты[0]);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьКроссКурсВТЧВыборВалюты(Результат, ДопПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		ИзменитьКроссКурсВТЧВводКроссКурса(Результат.Значение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьКроссКурсВТЧВводКроссКурса(Валюта)
	ДопПараметры = Новый Структура("Валюта", Валюта);
	Оповещ = Новый ОписаниеОповещения("ИзменитьКроссКурсВТЧВводКроссКурсаЗавершение", ЭтотОбъект, ДопПараметры);
	ПоказатьВводЧисла(Оповещ, , "Укажите новое значение кросс-курса", 10, 4);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьКроссКурсВТЧВводКроссКурсаЗавершение(Результат, ДопПараметры) Экспорт
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	мсвСтрок = Объект.Услуги.НайтиСтроки(Новый Структура("Валюта", ДопПараметры.Валюта));
	Для Каждого ТекСтрока Из мсвСтрок Цикл
		ТекСтрока.КроссКурс = Результат;
		
		ТекСтрока.Цена = ТекСтрока.ЦенаВалютная * ТекСтрока.КроссКурс;
		РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрока, Истина, Ложь);
		РассчитатьСуммуНДС(ТекСтрока, Истина);
	КонецЦикла;
	
	РассчитатьСуммуДокумента();
	ОбновитьВсегоВТЧУслуги();
	ВывестиСуммовыеИтогиДокумента();
	
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура КнопкаНастройкаПериода(Команда)
	
	ПроизвольныйПериод               = Новый СтандартныйПериод;
	ПроизвольныйПериод.Вариант       = ВариантСтандартногоПериода.ПроизвольныйПериод;
	ПроизвольныйПериод.ДатаНачала    = Объект.ДатаНач;
	ПроизвольныйПериод.ДатаОкончания = Объект.ДатаКон;

	ДиалогВыбораПериода        = Новый ДиалогРедактированияСтандартногоПериода();
	ДиалогВыбораПериода.Период = ПроизвольныйПериод;
	
	ДиалогВыбораПериода.Показать(Новый ОписаниеОповещения("КнопкаНастройкаПериодаЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаНастройкаПериодаЗавершение(Период, ДополнительныеПараметры) Экспорт
	
	Если Не Период = Неопределено Тогда
	    Объект.ДатаНач = Период.ДатаНачала;
	    Объект.ДатаКон = Период.ДатаОкончания;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаВводаНаОсновании(Команда)
	ОткрытьФорму("ОбщаяФорма.уатНастройкиВводаНаОсновании",, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДатуПлатежа(Команда)
	Если Модифицированность ИЛИ НЕ Объект.Проведен Тогда
		ТекстНСТР = "Для выполнения данной операции необходимо провести документ. Продолжить?";
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбновитьДатуПлатежаПровести", ЭтотОбъект),
			ТекстНСТР, РежимДиалогаВопрос.ОКОтмена,, КодВозвратаДиалога.ОК);
		Возврат;
	КонецЕсли;
	
	ОбновитьДатуПлатежаСервер();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДатуПлатежаПровести(Результат, ДопПараметры) Экспорт
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
	Исключение
		Возврат;
	КонецПопытки;
КонецПроцедуры

&НаСервере
Процедура ОбновитьДатуПлатежаСервер()
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	уатПроведение_проф.УстановитьДатуПлатежа(ДокументОбъект);
	ОтобразитьДатуПлатежа();
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	Оповещ = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект);
	ПоказатьВводЗначения(Оповещ, "", "Введите штрихкод номенклатуры", Тип("Строка"));
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(Результат, ДопПараметры) Экспорт
	Если ЗначениеЗаполнено(Результат) Тогда
		ТекНоменклатура = уатЗащищенныеФункцииСервер_проф.ПолучитьОбъектПоШтрихкоду(Результат);
		ДобавитьНоменклатуруВТЧПоШтрихкоду(Новый Структура("Штрихкод, Объект", Результат, ТекНоменклатура));
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

// уатУправлениеАвтотранспортом.МодификацияКонфигурации
&НаКлиенте
Процедура Подключаемый_ПолеФормыНажатие(Элемент, СтандартнаяОбработка)
	
	уатМодификацияКонфигурацииКлиентПереопределяемый.ПолеФормыНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДекорацияСостояниеОригиналаНажатие()

	// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	УчетОригиналовПервичныхДокументовКлиент.ОткрытьМенюВыбораСостояния(ЭтотОбъект, Элементы.ДекорацияСостояниеОригинала);
	//Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	Если Объект.Организация = ОрганизацияПередИзменением Тогда
		Возврат;
	КонецЕсли;
	ОрганизацияПередИзменением = Объект.Организация;
	
	// Обработка события изменения организации.
	Если НЕ уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ВестиСкладскойУчетУАТ")) Тогда
		
		ТекстНСТР = НСтр("en='For company ""%1"" the possibility of inventory management with FMS documents is disabled!';ru='Для организации ""%1"" отключена возможность ведения складского учета документами УАТ!'");
		ТекстНСТР = СтрШаблон(ТекстНСТР, Объект.Организация);
		ПоказатьПредупреждение(Новый ОписаниеОповещения("ОрганизацияПриИзмененииФрагмент", ЭтотОбъект), ТекстНСТР, 5);
        Возврат;
	КонецЕсли;
	
	ОрганизацияПриИзмененииФрагмент(Неопределено);
	
	Объект.Сделка = Неопределено;
	УстановитьОтборСделки();
	
	// уатСогласованиеДокументов
	уатСогласованиеДокументовКлиент.ОрганизацияПодразделениеПриИзменении(ЭтотОбъект);
	// Конец уатСогласованиеДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	КонтрагентПередИзменением = Контрагент;
	Контрагент = Объект.Контрагент;
	
	Если КонтрагентПередИзменением <> Объект.Контрагент Тогда
		ПриИзмененииКонтрагентаИлиОрганизации(Неопределено);
		
		Для Каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл
			ЗаполнитьЦенуПоКонтрагенту(СтрокаТабличнойЧасти, Истина);
		КонецЦикла;
		Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
			ЗаполнитьЦенуПоКонтрагенту(СтрокаТабличнойЧасти);
		КонецЦикла;
		
		ОбновитьВсегоВТЧТовары();
		ОбновитьВсегоВТЧУслуги();
		ВывестиСуммовыеИтогиДокумента();
		Объект.Сделка = Неопределено;
	Иначе
		// Договор был очищен по связи параметров выбора, возвращаем старое значение
		Объект.ДоговорКонтрагента = Договор;
	КонецЕсли;	
	
	УстановитьОтборСделки();
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаСоздание(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВидДоговораДоступныеЗначения = Новый Массив;
	
	мВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком");
	ВидДоговораДоступныеЗначения.Добавить(мВидДоговора);
	
	ПараметрыФормы = Новый Структура(); 
	ПараметрыФормы.Вставить("Владелец", Объект.Контрагент);
	ПараметрыФормы.Вставить("ВидДоговораДоступныеЗначения", ВидДоговораДоступныеЗначения);
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаОбъекта", ПараметрыФормы, Объект.Контрагент);
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	Оповещ = Новый ОписаниеОповещения("ДоговорКонтрагентаПриИзмененииЗавершение", ЭтотОбъект);
	уатОбщегоНазначенияКлиент.ДоговорКонтрагентаПриИзменении(ЭтаФорма, Оповещ);
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзмененииЗавершение(Результат, ДопПараметры) Экспорт
	уатОбщегоНазначенияКлиент.ПриИзмененииДоговора(ЭтаФорма, Неопределено, Договор);
	Объект.Сделка = Неопределено;
	УстановитьОтборСделки();
КонецПроцедуры

// Вызывается из процедуры уатОбщегоНазначенияКлиент.ПриИзмененииДоговора()
//
&НаКлиенте
Процедура ПриИзмененииДоговораЛокальныеОбработчики() Экспорт
	РассчитатьСуммуДокумента();
	ОбновитьВсегоВТЧТовары();
	ОбновитьВсегоВТЧУслуги();
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ОплатаПодотчетнымЛицомПриИзменении(Элемент)
	Если НЕ Объект.ОплатаПодотчетнымЛицом Тогда
		Объект.ПодотчетноеЛицо = Неопределено;
	КонецЕсли;
	
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура УказатьДатуПлатежаВручнуюПриИзменении(Элемент)
	Если УказатьДатуПлатежаВручную Тогда
		ТекстСообщения = "";
		флОтказ = ЕстьНакладнаяСРучнойДатойПлатежа(ТекстСообщения);
		Если флОтказ Тогда
			ПоказатьПредупреждение(Неопределено, ТекстСообщения);
			УказатьДатуПлатежаВручную = Ложь;
			Возврат;
		КонецЕсли;
		
		Объект.ДатаПлатежа = ДатаПлатежаПлан;
		
		Элементы.ДатыПлатежейПоЗаказам.Видимость = Ложь;
		Элементы.ДатаПлатежа.Видимость           = Истина;
	Иначе
		Объект.ДатаПлатежа = Неопределено;
		ДатаПлатежаПлан = Неопределено;
		
		ОтобразитьДатуПлатежа();
	КонецЕсли;
	Модифицированность = Истина;
		
	УстановитьВидимость();
КонецПроцедуры

&НаСервере
Функция ЕстьНакладнаяСРучнойДатойПлатежа(ТекстСообщения)
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	Возврат уатОбщегоНазначения_проф.ЕстьНакладнаяСРучнойДатойПлатежа(ДокОбъект, ТекстСообщения);
КонецФункции

&НаКлиенте
Процедура ДатаПлатежаПриИзменении(Элемент)
	Объект.ДатаПлатежа = ДатаПлатежаПлан;
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

&НаКлиенте
Процедура СозданПеревозчикомПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ТребуетСогласованияПриИзменении(Элемент)
	
	// уатСогласованиеДокументов
	уатСогласованиеДокументовКлиент.ТребуетСогласованияПриИзменении(ЭтотОбъект);
	// Конец уатСогласованиеДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСогласованНажатие(Элемент)
	
	// уатСогласованиеДокументов
	уатСогласованиеДокументовКлиент.НадписьСогласованНажатие(ЭтотОбъект);
	// Конец уатСогласованиеДокументов
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Номенклатура",	 СтрокаТабличнойЧасти.Номенклатура);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Количество) тогда
		СтрокаТабличнойЧасти.Количество = 1;
	КонецЕсли;
	
	ЗаполнитьЦенуПоКонтрагенту(СтрокаТабличнойЧасти);
	
	СтрокаТабличнойЧасти.СтатьяРасходов = уатОбщегоНазначенияСервер.СтатьяРасходовНоменклатуры(СтрокаТабличнойЧасти.Номенклатура);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	ТекСтрока = Элементы.Товары.ТекущиеДанные;
	РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	РассчитатьСуммуДокумента();
	ОбновитьВсегоВТЧТовары();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	РассчитатьСуммуДокумента();
	ОбновитьВсегоВТЧТовары();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатОбщегоНазначенияКлиент.ТЧТоварыЕдиницаИзмеренияНачалоВыбора(
		Элементы.Товары.ТекущиеДанные.Номенклатура, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	//Если НЕ уатОбщегоНазначенияСервер.СуществуетСправочникЕдиницыИзмерения() 
	//	ИЛИ СтрокаТабличнойЧасти.ЕдиницаИзмерения = ВыбранноеЗначение ИЛИ СтрокаТабличнойЧасти.Цена = 0 Тогда
	//	Возврат;
	//КонецЕсли;
	Если СтрокаТабличнойЧасти.ЕдиницаИзмерения = ВыбранноеЗначение
		ИЛИ СтрокаТабличнойЧасти.Цена = 0
		ИЛИ НЕ уатОбщегоНазначенияТиповые.уатЕстьРеквизитСправочника("Коэффициент", СтрокаТабличнойЧасти.ЕдиницаИзмерения) Тогда
		
		Возврат;
	КонецЕсли;
	
	ТекКоэффициент = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(
					СтрокаТабличнойЧасти.ЕдиницаИзмерения, "Коэффициент");
	Если ТекКоэффициент <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Цена * уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(
									ВыбранноеЗначение, "Коэффициент") / ТекКоэффициент;
	КонецЕсли; 		
	
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
	
	ТоварыСуммаПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И НЕ Копирование Тогда
		Если Объект.УчитыватьНДС Тогда
			Элементы.Товары.ТекущиеДанные.СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
				ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнаяСтавкаНДС");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыУслуги

&НаКлиенте
Процедура УслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекСтрока = Элементы.Услуги.ТекущиеДанные;
		
	Если НоваяСтрока И НЕ Копирование Тогда
		Если Объект.УчитыватьНДС Тогда
			ТекСтрока.СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
				ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнаяСтавкаНДС");
		КонецЕсли;
			
		Если МноговалютныйУчет Тогда
			ТекСтрока.Валюта = Объект.ВалютаДокумента;
			ТекСтрока.КроссКурс = 1;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеСтрокиУслуги = Новый Структура("Валюта", ТекСтрока.Валюта);
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	РассчитатьСуммуДокумента();
	ОбновитьВсегоВТЧУслуги();
КонецПроцедуры

&НаКлиенте
Процедура УслугиПослеУдаления(Элемент)
	РассчитатьСуммуДокумента();
КонецПроцедуры

&НаКлиенте
Процедура УслугиНоменклатураПриИзменении(Элемент)
	ТекСтрока = Элементы.Услуги.ТекущиеДанные;
	ТекСтрока.Содержание = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрока.Номенклатура, "НаименованиеПолное");
	ЗаполнитьЦенуПоКонтрагенту(ТекСтрока, Истина);
	ТекСтрока.СтатьяРасходов = уатОбщегоНазначенияСервер.СтатьяРасходовНоменклатуры(ТекСтрока.Номенклатура);
КонецПроцедуры

&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)
	ТекСтрока = Элементы.Услуги.ТекущиеДанные;
	РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрока, Истина);
КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)
	ТекСтрока = Элементы.Услуги.ТекущиеДанные;
	Если МноговалютныйУчет И ТекСтрока.ЦенаВалютная = 0 И ТекСтрока.КроссКурс <> 0 Тогда
		ТекСтрока.ЦенаВалютная = ТекСтрока.Цена / ТекСтрока.КроссКурс;
	КонецЕсли;
	РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрока, Истина);
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаПриИзменении(Элемент)
	ТекСтрока = Элементы.Услуги.ТекущиеДанные;
	ПриИзмененииСуммыУслуги(ТекСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСуммыУслуги(ТекСтрока)
	ТекСтрока.Цена = ?(ТекСтрока.Количество = 0, 0, ТекСтрока.Сумма / ТекСтрока.Количество);
	Если МноговалютныйУчет И ТекСтрока.ЦенаВалютная = 0 И ТекСтрока.КроссКурс <> 0 Тогда
		ТекСтрока.СуммаВалютная = ТекСтрока.Сумма / ТекСтрока.КроссКурс;
		ТекСтрока.ЦенаВалютная = ?(ТекСтрока.Количество = 0, 0, ТекСтрока.СуммаВалютная / ТекСтрока.Количество);
	КонецЕсли;
	РассчитатьСуммуНДС(ТекСтрока, Истина);
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаНДСПриИзменении(Элемент)
	ТекСтрока = Элементы.Услуги.ТекущиеДанные;
	ОбновитьВсегоВстрокеТЧ(ТекСтрока, Истина);
КонецПроцедуры

&НаКлиенте
Процедура УслугиСтавкаНДСПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти, Истина);
КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаВалютнаяПриИзменении(Элемент)
	ТекСтрока = Элементы.Услуги.ТекущиеДанные;
	ТекСтрока.Цена = ТекСтрока.ЦенаВалютная * ТекСтрока.КроссКурс;
	РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрока, Истина);
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаВалютнаяПриИзменении(Элемент)
	ТекСтрока = Элементы.Услуги.ТекущиеДанные;
	ТекСтрока.ЦенаВалютная = ?(ТекСтрока.Количество = 0, 0, ТекСтрока.СуммаВалютная / ТекСтрока.Количество);
	ТекСтрока.Цена = ТекСтрока.ЦенаВалютная * ТекСтрока.КроссКурс;
	РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрока, Истина);
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаНДСвалютнаяПриИзменении(Элемент)
	ТекСтрока = Элементы.Услуги.ТекущиеДанные;
	ОбновитьВсегоВстрокеТЧ(ТекСтрока, Истина);
КонецПроцедуры

&НаКлиенте
Процедура УслугиВалютаПриИзменении(Элемент)
	ТекСтрока = Элементы.Услуги.ТекущиеДанные;
	
	Если ТекСтрока.Валюта = ДанныеСтрокиУслуги.Валюта Тогда
		Возврат;
	КонецЕсли;
	
	ТекСтрока.КроссКурс = ПолучитьКроссКурс(ТекСтрока.Валюта, Объект.ВалютаДокумента, Объект.ДатаКурса);
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ТекСтрока", ТекСтрока);
		
	Если ТекСтрока.Цена = 0 Тогда
		УслугиПриИзмененииВалютыЗавершение(КодВозвратаДиалога.Нет, ДопПараметры);
	Иначе
		Оповещ = Новый ОписаниеОповещения("УслугиПриИзмененииВалютыЗавершение", ЭтотОбъект, ДопПараметры);
		ПоказатьВопрос(Оповещ, "Изменилась валюта строки. Пересчитать цену и сумму по курсу?", РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриИзмененииВалютыЗавершение(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда //пересчет сумм в строке по курсу
		СтруктураКурсаПред = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ДанныеСтрокиУслуги.Валюта, Объект.ДатаКурса);
		СтруктураКурса = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ДопПараметры.ТекСтрока.Валюта, Объект.ДатаКурса);
		
		ДопПараметры.ТекСтрока.ЦенаВалютная = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ДопПараметры.ТекСтрока.ЦенаВалютная,
			ДанныеСтрокиУслуги.Валюта,    ДопПараметры.ТекСтрока.Валюта,
			СтруктураКурсаПред.Курс,      СтруктураКурса.Курс,
			СтруктураКурсаПред.Кратность, СтруктураКурса.Кратность);
	КонецЕсли;
	
	ДопПараметры.ТекСтрока.Цена = ДопПараметры.ТекСтрока.ЦенаВалютная * ДопПараметры.ТекСтрока.КроссКурс;
	РассчитатьСуммуВСтрокеТабличнойЧасти(ДопПараметры.ТекСтрока, Истина);
		
	РассчитатьСуммуНДС(ДопПараметры.ТекСтрока);
	ОбновитьВсегоВстрокеТЧ(ДопПараметры.ТекСтрока);
		
	ВывестиСуммовыеИтогиДокумента();
	
	ДанныеСтрокиУслуги = Новый Структура("Валюта", ДопПараметры.ТекСтрока.Валюта);
	Модифицированность = Истина;	
КонецПроцедуры

&НаКлиенте
Процедура УслугиКроссКурсПриИзменении(Элемент)
	ТекСтрока = Элементы.Услуги.ТекущиеДанные;
	ПриИзменииКроссКурсаВСтроке(ТекСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ПриИзменииКроссКурсаВСтроке(ТекСтрока, ПересчетИтогов = Истина)
	ТекСтрока.Сумма = ТекСтрока.СуммаВалютная * ТекСтрока.КроссКурс;
	ПриИзмененииСуммыУслуги(ТекСтрока);
	ОбновитьВсегоВстрокеТЧ(ТекСтрока);
	
	Если ПересчетИтогов = Истина Тогда
		ОбновитьВсегоВТЧУслуги();
		ВывестиСуммовыеИтогиДокумента();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УслугиЗаказНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекСтрока = Элементы.Услуги.ТекущиеДанные;
	ПараметрыФормы = Новый Структура("ЗаказНаТС, Перевозчик", ТекСтрока.ЗаказНаТС, Контрагент);
	ОткрытьФорму("Документ.уатЗаказПеревозчику_уэ.ФормаВыбора", ПараметрыФормы, Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	мВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком");
	
	уатОбщегоНазначенияТиповыеКлиент.уатНачалоВыбораЗначенияДоговораКонтрагента(Объект, ЭтотОбъект, Элемент, Объект.Контрагент, 
		Объект.ДоговорКонтрагента, мВидДоговора, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// Получает набор данных с сервера для процедуры НоменклатураПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.ЕдиницаХраненияОстатков);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

&НаКлиенте
Процедура ПриИзмененииКонтрагентаИлиОрганизации(Знач Оповещение)
	
	ДанныеОбменаССервером = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, УчитыватьНДС, Дата");
	ЗаполнитьЗначенияСвойств(ДанныеОбменаССервером, Объект);
	// Получим данные с сервера
	ДанныеОбменаССервером.ДоговорКонтрагента = Объект.ДоговорКонтрагента;
	ЗначенияДляЗаполнения = ИзменениеКонтрагентаСервер(ДанныеОбменаССервером);
	Объект.ДоговорКонтрагента = ЗначенияДляЗаполнения.ДоговорКонтрагента;
	
	ДоговорПередИзменением = Договор;
	//Договор = Объект.ДоговорКонтрагента;
	
	Оповещ = Новый ОписаниеОповещения("ПриИзмененииКонтрагентаИлиОрганизацииЗавершение", ЭтотОбъект, Новый Структура("Оповещение", Оповещение));
	уатОбщегоНазначенияКлиент.ПриИзмененииДоговора(ЭтаФорма, Оповещ, ДоговорПередИзменением);

КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииКонтрагентаИлиОрганизацииЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Оповещение = ДополнительныеПараметры.Оповещение;
    
	Если Не Оповещение = Неопределено Тогда 
		ВыполнитьОбработкуОповещения(Оповещение);
	КонецЕсли;

КонецПроцедуры // ПриИзмененииКонтрагентаИлиОрганизации()

&НаСервереБезКонтекста
Функция ИзменениеКонтрагентаСервер(ДанныеДляЗаполнения)
	СтруктураПараметровДляПолученияДоговора = 
		уатЗаполнениеДокументов.ПолучитьСтруктуруПараметровДляПолученияДоговораПокупки();
	
	ЗначенияДляЗаполнения = уатОбщегоНазначенияСервер.ПриИзмененииЗначенияКонтрагента(ДанныеДляЗаполнения,
							СтруктураПараметровДляПолученияДоговора);
	Возврат ЗначенияДляЗаполнения;
КонецФункции

// Процедура выполняет пересчет в табличной части документа после изменений 
// в форме "Цены и валюта".Выполняется пересчет колонок: цена, скидка, сумма,
// сумма НДС, всего.
//
&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты(Знач Оповещение, Знач ВалютаРасчетовПередИзменением, ПересчитатьЦены = Ложь)
	
	// 1. Формируем структуру параметров для заполнения формы "Цены и Валюта".
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВалютаДокумента",		  Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("Курс",				  Объект.КурсВзаиморасчетов);
	СтруктураПараметров.Вставить("Кратность",			  Объект.КратностьВзаиморасчетов);
	Если МноговалютныйУчет Тогда
		СтруктураПараметров.Вставить("ВалютаРасчетов",		Объект.ВалютаВзаиморасчетов);
		СтруктураПараметров.Вставить("КроссКурс",			Объект.КроссКурс);
		СтруктураПараметров.Вставить("СуммаВзаиморасчетов", Объект.СуммаВзаиморасчетов);
	КонецЕсли;
	СтруктураПараметров.Вставить("ДатаКурса",             Объект.ДатаКурса);
	СтруктураПараметров.Вставить("Контрагент",			  Объект.Контрагент);
	СтруктураПараметров.Вставить("Договор",				  Объект.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("Организация",			  Объект.Организация);
	СтруктураПараметров.Вставить("ДатаДокумента",		  Объект.Дата);
	СтруктураПараметров.Вставить("ПерезаполнитьЦены",	  Ложь);
	СтруктураПараметров.Вставить("ПересчитатьЦены",		  ПересчитатьЦены);
	СтруктураПараметров.Вставить("БылиВнесеныИзменения",  Ложь);
	СтруктураПараметров.Вставить("СуммаВключаетНДС",      Объект.СуммаВключаетНДС);
	СтруктураПараметров.Вставить("НалогообложениеНДС",	  Объект.УчитыватьНДС);
	// Для объедининенного решения с БП 3
	СтруктураПараметров.Вставить("ДокументБезНДС",        НЕ Объект.УчитыватьНДС);
	СтруктураЦеныИВалюта = Неопределено;

	Если НЕ ПравоРедактированиеДокумента() Тогда
		СтруктураПараметров.Вставить("ТолькоПросмотр", Истина);
	КонецЕсли;
	
	ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров,,,,,
		Новый ОписаниеОповещения("ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение", ЭтотОбъект,
		Новый Структура("ВалютаРасчетовПередИзменением, Оповещение", ВалютаРасчетовПередИзменением, Оповещение)),
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено ИЛИ НЕ ПравоРедактированиеДокумента() Тогда
		Возврат;
	КонецЕсли;
	
    ВалютаРасчетовПередИзменением = ДополнительныеПараметры.ВалютаРасчетовПередИзменением;
    Оповещение                    = ДополнительныеПараметры.Оповещение;
    СтруктураЦеныИВалюта          = Результат;
    
    // 3. Перезаполняем табличную часть "Номенклатура", если были внесены изменения в форме "Цены и Валюта".
    Если ТипЗнч(СтруктураЦеныИВалюта) = Тип("Структура") Тогда
		ДопПараметры = Новый Структура("ПредКурс, ПредКратность, Курс, Кратность, ПредДатаКурса",
			Объект.КурсВзаиморасчетов, Объект.КратностьВзаиморасчетов, СтруктураЦеныИВалюта.Курс,
			СтруктураЦеныИВалюта.Кратность, Объект.ДатаКурса);
		
		Если СтруктураЦеныИВалюта.Свойство("ВалютаДокумента") И СтруктураЦеныИВалюта.Свойство("Курс") И СтруктураЦеныИВалюта.Свойство("Кратность")
            И СтруктураЦеныИВалюта.Свойство("СуммаВключаетНДС") И  СтруктураЦеныИВалюта.Свойство("НалогообложениеНДС") Тогда
            Объект.ВалютаДокумента		   = СтруктураЦеныИВалюта.ВалютаДокумента;
            Объект.КурсВзаиморасчетов      = СтруктураЦеныИВалюта.Курс;
            Объект.КратностьВзаиморасчетов = СтруктураЦеныИВалюта.Кратность;
			Объект.ВалютаВзаиморасчетов    = СтруктураЦеныИВалюта.ВалютаРасчетов;
			Объект.КроссКурс               = СтруктураЦеныИВалюта.КроссКурс;
			Объект.ДатаКурса               = СтруктураЦеныИВалюта.ДатаКурса;
            Объект.СуммаВключаетНДС		   = СтруктураЦеныИВалюта.СуммаВключаетНДС;
            Объект.УчитыватьНДС			   = СтруктураЦеныИВалюта.НалогообложениеНДС;
        КонецЕсли;
        
        // Пересчитываем сумму если изменился признак Налогообложение НДС.
		Если СтруктураЦеныИВалюта.Свойство("НалогообложениеНДС") И СтруктураЦеныИВалюта.Свойство("ПредНалогообложениеНДС")
			И СтруктураЦеныИВалюта.НалогообложениеНДС <> СтруктураЦеныИВалюта.ПредНалогообложениеНДС Тогда
			
			ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
		КонецЕсли;
        
        // Пересчитываем цены по валюте.
		Если СтруктураЦеныИВалюта.Свойство("ПересчитатьЦены") И СтруктураЦеныИВалюта.ПересчитатьЦены Тогда
			ПересчитатьЦеныТабличнойЧастиПоВалюте(ВалютаРасчетовПередИзменением, "Товары", ДопПараметры);
			ПересчитатьЦеныТабличнойЧастиПоВалюте(ВалютаРасчетовПередИзменением, "Услуги", ДопПараметры);
			Если МноговалютныйУчет И (ДопПараметры.Курс <> ДопПараметры.ПредКурс
				ИЛИ ДопПараметры.Кратность <> ДопПараметры.ПредКратность) Тогда //рассчитывает валютные показатели
				Для Каждого ТекСтрока Из Объект.Услуги Цикл
					РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрока, Истина, Ложь);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
        
        // Пересчитываем сумму если изменился признак "Сумма включает НДС".
        Если СтруктураЦеныИВалюта.Свойство("СуммаВключаетНДС") И СтруктураЦеныИВалюта.Свойство("ПредСуммаВключаетНДС") Тогда
			Если СтруктураЦеныИВалюта.СуммаВключаетНДС <> СтруктураЦеныИВалюта.ПредСуммаВключаетНДС Тогда
				ПересчитатьСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС("Товары");
                ПересчитатьСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС("Услуги");
            КонецЕсли;
		КонецЕсли;
		
		// Пересчитываем кросс-курс в строках
		Если МноговалютныйУчет
			И (Результат.ВалютаДокумента <> Результат.ПредВалютаДокумента
			ИЛИ Объект.ДатаКурса <> ДопПараметры.ПредДатаКурса) Тогда
			
			Для Каждого ТекСтрока Из Объект.Услуги Цикл
				ТекСтрока.КроссКурс = ПолучитьКроссКурс(ТекСтрока.Валюта, Объект.ВалютаДокумента, Объект.ДатаКурса);
				ПриИзменииКроссКурсаВСтроке(ТекСтрока, Ложь);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьВидимость();
	
	ОбновитьВсегоВТЧТовары();
    ОбновитьВсегоВТЧУслуги();
    РассчитатьСуммуДокумента();
	
	Если Оповещение <> Неопределено Тогда 
		ВыполнитьОбработкуОповещения(Оповещение);
	КонецЕсли;

КонецПроцедуры // ОбработатьИзмененияПоКнопкеЦеныИВалюты()

// Процедура заполняет Ставку НДС в табличной части по системе налогообложения.
// 
&НаСервере
Процедура ЗаполнитьСтавкуНДСПоНалогообложениеНДС()
	
	//СтавкаНДСПоУмолчанию = уатОбщегоНазначенияПовтИсп.ПолучитьСтавкуНДСНоль();
	СтавкаНДСПоУмолчанию = Перечисления.СтавкиНДС.ПустаяСсылка();
	Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
		СтрокаТабличнойЧасти.СуммаНДС = 0;
	КонецЦикла;
	Для каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл
		СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
		СтрокаТабличнойЧасти.СуммаНДС = 0;
		Если МноговалютныйУчет Тогда
			СтрокаТабличнойЧасти.СуммаНДСВалютная = 0;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ Объект.УчитыватьНДС Тогда
		Возврат;
	КонецЕсли;
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС) Тогда
			СтрокаТабличнойЧасти.СтавкаНДС = СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
		КонецЕсли;
		
		СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
		СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
								  		СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
								  		СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
	КонецЦикла;

	Для каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл
		Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС) Тогда
			СтрокаТабличнойЧасти.СтавкаНДС = СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
		КонецЕсли;
		
		СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
		СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
			СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
			СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
		
		Если МноговалютныйУчет Тогда
			СтрокаТабличнойЧасти.СуммаНДСВалютная = ?(Объект.СуммаВключаетНДС, 
				СтрокаТабличнойЧасти.СуммаВалютная - (СтрокаТабличнойЧасти.СуммаВалютная) / ((СтавкаНДС + 100) / 100),
				СтрокаТабличнойЧасти.СуммаВалютная * СтавкаНДС / 100);
		КонецЕсли;
	КонецЦикла;	
	
КонецПроцедуры // ЗаполнитьСтавкуНДСПоНалогообложениеНДС()

&НаКлиенте
Процедура РедактироватьЦеныИВалютуЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    РассчитатьСуммуДокумента();
    ОбновитьВсегоВТЧТовары();
    ОбновитьВсегоВТЧУслуги();
    Модифицированность = Истина;

КонецПроцедуры

// Процедура рассчитывает сумму в строке табличной части.
//
&НаКлиенте
Процедура РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти = Неопределено, флУслуги = Ложь, РасчетСуммыДокумента = Истина)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
	Если флУслуги И МноговалютныйУчет Тогда
		СтрокаТабличнойЧасти.СуммаВалютная = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.ЦенаВалютная;
	КонецЕсли;
	
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти, флУслуги);
	ОбновитьВсегоВстрокеТЧ(СтрокаТабличнойЧасти, флУслуги);
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	Если РасчетСуммыДокумента Тогда
		РассчитатьСуммуДокумента();
	КонецЕсли;
		
КонецПроцедуры // РассчитатьСуммуВСтрокеТабличнойЧасти()

// Рассчитывается сумма НДС в строке табличной части.
//
&НаКлиенте
Процедура РассчитатьСуммуНДС(СтрокаТабличнойЧасти, флУслуги = Ложь)
	
	СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	
	СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
		СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
		СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
		
	Если флУслуги И МноговалютныйУчет Тогда
		СтрокаТабличнойЧасти.СуммаНДСВалютная = ?(Объект.СуммаВключаетНДС, 
			СтрокаТабличнойЧасти.СуммаВалютная - (СтрокаТабличнойЧасти.СуммаВалютная) / ((СтавкаНДС + 100) / 100),
			СтрокаТабличнойЧасти.СуммаВалютная * СтавкаНДС / 100);
	КонецЕсли;
	
	ОбновитьВсегоВстрокеТЧ(СтрокаТабличнойЧасти, флУслуги);
	
КонецПроцедуры // РассчитатьСуммуНДС()

&НаКлиенте
Процедура РассчитатьСуммуДокумента()
	Объект.СуммаДокумента = Объект.Услуги.Итог("Сумма") + Объект.Товары.Итог("Сумма");

	Если Объект.УчитыватьНДС И НЕ Объект.СуммаВключаетНДС Тогда
		Объект.СуммаДокумента = Объект.СуммаДокумента
			+ Объект.Услуги.Итог("СуммаНДС") + Объект.Товары.Итог("СуммаНДС");
	КонецЕсли;
	
	РассчитатьСуммуДокументаСервер();
КонецПроцедуры

&НаСервере
Процедура РассчитатьСуммуДокументаСервер()
	Объект.СуммаВзаиморасчетов = уатОбщегоНазначения_проф.СуммаВзаиморасчетовДокумента(Объект);
	ВывестиСуммовыеИтогиДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВсегоВстрокеТЧ(СтрокаТабличнойЧасти, флУслуги = Ложь)
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма
		+ ?(Объект.УчитыватьНДС И НЕ Объект.СуммаВключаетНДС, СтрокаТабличнойЧасти.СуммаНДС, 0);
			
	Если флУслуги И МноговалютныйУчет Тогда
		СтрокаТабличнойЧасти.ВсегоВалютная = СтрокаТабличнойЧасти.СуммаВалютная
			+ ?(Объект.УчитыватьНДС И НЕ Объект.СуммаВключаетНДС, СтрокаТабличнойЧасти.СуммаНДСВалютная, 0);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВсегоВТЧТовары()
	Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		ОбновитьВсегоВстрокеТЧ(СтрокаТабличнойЧасти);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВсегоВТЧУслуги()
	Для Каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл
		ОбновитьВсегоВстрокеТЧ(СтрокаТабличнойЧасти, Истина);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьПараметрыПодбора(ИмяТаблицы)

	ДатаРасчетов 	 = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	
	ЗаголовокПодбора = НСтр("en='Selection products and services in %1 (%2)';ru='Подбор номенклатуры в %1 (%2)'");
	ПредставлениеТаблицы = НСтр("en='Goods';ru='Товары'");
	ЗаголовокПодбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, Объект.Ссылка, НСтр("en='Goods';ru='Товары'"));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПоказыватьЦены", Истина);
	ПараметрыФормы.Вставить("ЕстьЦена"      , Истина);
	ПараметрыФормы.Вставить("Контрагент"    , Объект.Контрагент);
	ПараметрыФормы.Вставить("ЕстьКоличество", Истина);
	ПараметрыФормы.Вставить("ДатаРасчетов"  , ДатаРасчетов);
	ПараметрыФормы.Вставить("Валюта"        , Объект.ВалютаДокумента);
	ПараметрыФормы.Вставить("Заголовок"     , ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ВидПодбора"    , ПолучитьВидПодбора(ИмяТаблицы));
	ПараметрыФормы.Вставить("ИмяТаблицы"    , ИмяТаблицы);
	ПараметрыФормы.Вставить("Услуги"        , ИмяТаблицы = "Услуги");
	ПараметрыФормы.Вставить("Организация"   , Объект.Организация);
	ПараметрыФормы.Вставить("ПоказыватьОстатки"  , Истина);
	ПараметрыФормы.Вставить("ПоказыватьСчетУчета", Истина);
	
	Возврат ПараметрыФормы;

КонецФункции

&НаКлиенте
Функция ПолучитьВидПодбора(ИмяТаблицы)

	ВидПодбора = "";
	
	Возврат ВидПодбора;

КонецФункции

&НаСервере 
Функция ПолучитьТоварыИзВременногоХранилища(ЗначениеВыбора)
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ЗначениеВыбора);
	МассивТоваров = Новый Массив;
	Для Каждого ТекСтрока Из ТаблицаТоваров Цикл
		Структура = Новый Структура;
		Структура.Вставить("Номенклатура",		 ТекСтрока.Номенклатура);
		Структура.Вставить("ЕдиницаИзмерения",	 ТекСтрока.Номенклатура.ЕдиницаХраненияОстатков);
		Структура.Вставить("Количество",		 ТекСтрока.Количество);
		Структура.Вставить("Цена",				 ТекСтрока.Цена);
		МассивТоваров.Добавить(Структура);
	КонецЦикла;
	
	Возврат МассивТоваров;
КонецФункции

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
&НаКлиенте
Процедура ОбработкаПодбора(ИмяТабличнойЧасти, ЗначениеВыбора)
	
	Если ЗначениеВыбора.Свойство("АдресПодобраннойНоменклатурыВХранилище") Тогда
		МассивТоваров = ПолучитьТоварыИзВременногоХранилища(ЗначениеВыбора.АдресПодобраннойНоменклатурыВХранилище);
	Иначе
		МассивТоваров = ПолучитьТоварыИзВременногоХранилища(ЗначениеВыбора.АдресТоваровВХранилище);
	КонецЕсли;

	Для Каждого ТекСтрока из МассивТоваров Цикл
		
		// Ищем выбранную позицию в таблице подобранной номенклатуры.
		// Если найдем - увеличим количество; не найдем - добавим новую строку.
		СтруктураОтбора = Новый Структура();
		
		СтруктураОтбора.Вставить("Номенклатура",     ТекСтрока.Номенклатура);
		Если ИмяТабличнойЧасти <> "Услуги" Тогда
			СтруктураОтбора.Вставить("ЕдиницаИзмерения", ТекСтрока.ЕдиницаИзмерения);
		КонецЕсли;
		СтруктураОтбора.Вставить("Цена",             ТекСтрока.Цена);

		МассивСтрок = Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураОтбора);
		Если МассивСтрок.Количество() = 0 Тогда
			СтрокаТабличнойЧасти = Неопределено;
		Иначе
			СтрокаТабличнойЧасти = МассивСтрок[0];
		КонецЕсли;
		
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество +   ТекСтрока.Количество;
		Иначе
			// Не нашли - добавляем новую строку.
			СтрокаТабличнойЧасти =  Объект[ИмяТабличнойЧасти].Добавить();
			СтрокаТабличнойЧасти.Номенклатура	  = ТекСтрока.Номенклатура;
			СтрокаТабличнойЧасти.Количество  	  = ТекСтрока.Количество;
			СтрокаТабличнойЧасти.Цена = ТекСтрока.Цена;
			Если МноговалютныйУчет И ИмяТабличнойЧасти = "Услуги" Тогда
				СтрокаТабличнойЧасти.Валюта = Объект.ВалютаДокумента;
				СтрокаТабличнойЧасти.КроссКурс = 1;
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Цена) Тогда
				ЗаполнитьЦенуПоКонтрагенту(СтрокаТабличнойЧасти, ИмяТабличнойЧасти = "Услуги");
			Иначе
				Если Объект.УчитыватьНДС Тогда 
					СтрокаТабличнойЧасти.СтавкаНДС = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрока.Номенклатура,
					"СтавкаНДС");
				КонецЕсли;
				Если МноговалютныйУчет И ИмяТабличнойЧасти = "Услуги" Тогда
					СтрокаТабличнойЧасти.ЦенаВалютная = СтрокаТабличнойЧасти.Цена / СтрокаТабличнойЧасти.КроссКурс;
				КонецЕсли;
			КонецЕсли;
			Если ИмяТабличнойЧасти = "Услуги" Тогда
				СтрокаТабличнойЧасти.Содержание = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрока.Номенклатура,
				"НаименованиеПолное");
			Иначе
				СтрокаТабличнойЧасти.ЕдиницаИзмерения = ТекСтрока.ЕдиницаИзмерения;
			КонецЕсли;
			
			СтрокаТабличнойЧасти.СтатьяРасходов = уатОбщегоНазначенияСервер.СтатьяРасходовНоменклатуры(СтрокаТабличнойЧасти.Номенклатура);
		КонецЕсли;
		
		РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти, ИмяТабличнойЧасти = "Услуги", Ложь);
	КонецЦикла;
	
	РассчитатьСуммуДокумента();
	ОбновитьВсегоВТЧТовары();
	ОбновитьВсегоВТЧУслуги();

КонецПроцедуры //

&НаКлиенте
Процедура ДобавитьНоменклатуруВТЧПоШтрихкоду(Результат, ДопПараметры = Неопределено) Экспорт
	
	Если Результат = Неопределено ИЛИ НЕ ЗначениеЗаполнено(Результат.Объект)
		ИЛИ ТипЗнч(Результат.Объект) <> Тип("СправочникСсылка.Номенклатура") Тогда
		Возврат;
	КонецЕсли;
	Номенклатура = Результат.Объект;
	
	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	// Если найдем - увеличим количество; не найдем - добавим новую строку.
	МассивСтрок = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура", Номенклатура));
	Если МассивСтрок.Количество() = 0 Тогда
		СтрокаТабличнойЧасти = Неопределено;
	Иначе
		СтрокаТабличнойЧасти = МассивСтрок[0];
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		// Нашли, увеличиваем количество в первой найденной строке.
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + 1;
	Иначе
		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти =  Объект.Товары.Добавить();
		СтрокаТабличнойЧасти.Номенклатура = Номенклатура;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(
			СтрокаТабличнойЧасти.Номенклатура, "ЕдиницаХраненияОстатков");
		СтрокаТабличнойЧасти.Количество = 1;
		ЗаполнитьЦенуПоКонтрагенту(СтрокаТабличнойЧасти);
		СтрокаТабличнойЧасти.СтатьяРасходов = уатОбщегоНазначенияСервер.СтатьяРасходовНоменклатуры(
			СтрокаТабличнойЧасти.Номенклатура);
	
	    Если Объект.УчитыватьНДС Тогда 
			СтрокаТабличнойЧасти.СтавкаНДС = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(
				СтрокаТабличнойЧасти.Номенклатура, "СтавкаНДС");
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС) Тогда
				СтрокаТабличнойЧасти.СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
				ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнаяСтавкаНДС");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
	ОбновитьВсегоВТЧТовары();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимость()
	
	// Для внешнего пользователя (перевозчика) Поступление материалов и услуг отображается как Реализация услуг
	Если Объект.Ссылка.Пустая() И уатОбщегоНазначенияСервер.АвторизованВнещнийПеревозчик() Тогда
		ЭтотОбъект.АвтоЗаголовок = Ложь;
		ЭтотОбъект.Заголовок = НСтр("ru = 'Реализация услуг (создание)'");
	Иначе
		ЭтотОбъект.АвтоЗаголовок = Истина;
		ЭтотОбъект.Заголовок = "";
	КонецЕсли;
	
	Элементы.Товары.Видимость = Не Объект.СозданПеревозчиком;
	Элементы.Склад.Видимость = Не Объект.СозданПеревозчиком;
	Элементы.СозданПеревозчиком.Доступность = Не АвторизованВнешнийПользователь;
	Элементы.Контрагент.Доступность = Не АвторизованВнешнийПользователь;
	
	Элементы.ТоварыСтавкаНДС.Видимость = Объект.УчитыватьНДС;
	Элементы.ТоварыСуммаНДС.Видимость  = Объект.УчитыватьНДС;
	Элементы.ТоварыВсего.Видимость     = Объект.УчитыватьНДС;
	Элементы.УслугиСтавкаНДС.Видимость = Объект.УчитыватьНДС;
	Элементы.УслугиСуммаНДС.Видимость  = Объект.УчитыватьНДС;
	Элементы.УслугиВсего.Видимость     = Объект.УчитыватьНДС;
	
	ВедениеВзаиморасчетов = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.ДоговорКонтрагента, "ВедениеВзаиморасчетов");
	
	Элементы.ГруппаДатаПлатежа.Видимость = ИспользованиеПлатежногоКалендаря()
		И (ВедениеВзаиморасчетов = ПредопределенноеЗначение("Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказамНаТС")
		ИЛИ ВедениеВзаиморасчетов = ПредопределенноеЗначение("Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоНакладным")
		ИЛИ ВедениеВзаиморасчетов = ПредопределенноеЗначение("Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам"));
	Элементы.ДатаПлатежа.Доступность = УказатьДатуПлатежаВручную;
	
	Элементы.УслугиЗаказНаТС.АвтоОтметкаНезаполненного = (ВедениеВзаиморасчетов = ПредопределенноеЗначение("Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказамНаТС"));
	
	Элементы.Сделка.АвтоОтметкаНезаполненного = (ВедениеВзаиморасчетов = ПредопределенноеЗначение("Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам"));
	//Элементы.Сделка.ОтметкаНезаполненного = Элементы.Сделка.АвтоОтметкаНезаполненного;
	Элементы.Сделка.ОграничениеТипа = Новый ОписаниеТипов("ДокументСсылка.уатСчетНаОплатуПоставщика");
	
	// Услуги на комиссию не принимаем.
	Элементы.ГруппаУслуги.Видимость = (уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.ДоговорКонтрагента,
		"ВидДоговора") <> ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СКомитентом"));
	
	Элементы.ПодотчетноеЛицо.Доступность = Объект.ОплатаПодотчетнымЛицом;
	Элементы.ДоговорКонтрагента.АвтоОтметкаНезаполненного = НЕ Объект.ОплатаПодотчетнымЛицом;
	Элементы.ДоговорКонтрагента.ОтметкаНезаполненного = Элементы.ДоговорКонтрагента.АвтоОтметкаНезаполненного И Объект.ДоговорКонтрагента.Пустая();
	
	Элементы.УслугиЦенаВалютная.Видимость     = МноговалютныйУчет;
	Элементы.УслугиСуммаВалютная.Видимость    = МноговалютныйУчет;
	Элементы.УслугиСуммаНДСвалютная.Видимость = МноговалютныйУчет И Объект.УчитыватьНДС;
	Элементы.УслугиВсегоВалютная.Видимость    = МноговалютныйУчет И Объект.УчитыватьНДС;
	Элементы.УслугиГруппаВалюта.Видимость     = МноговалютныйУчет;
	Если МноговалютныйУчет Тогда
		Элементы.УслугиЦена.Заголовок = СтрШаблон("Цена (%1)", Объект.ВалютаДокумента);
		Элементы.УслугиСумма.Заголовок = СтрШаблон("Сумма (%1)", Объект.ВалютаДокумента);
		Элементы.УслугиСуммаНДС.Заголовок = СтрШаблон("Сумма НДС (%1)", Объект.ВалютаДокумента);
		Элементы.УслугиВсего.Заголовок = СтрШаблон("Всего (%1)", Объект.ВалютаДокумента);
	Иначе
		Элементы.УслугиЦена.Заголовок = "";
		Элементы.УслугиСумма.Заголовок = "";
		Элементы.УслугиСуммаНДС.Заголовок = "";
		Элементы.УслугиВсего.Заголовок = "";
	КонецЕсли;
	Элементы.УслугиИзменитьКроссКурсВТЧ.Видимость = МноговалютныйУчет;
	Элементы.УслугиКонтекстноеМенюИзменитьКроссКурсВТЧ.Видимость = МноговалютныйУчет;
	
	// Настройка интерфейса формы для внешнего польователя.
	Если АвторизованВнешнийПользователь Тогда
		Элементы.УслугиНастройкаВводаНаОсновании.Видимость = Ложь;
		Элементы.УслугиИзменитьКроссКурсВТЧ.Видимость = Ложь;
		Если УровеньДоступаКУслугам = ПредопределенноеЗначение("Перечисление.уатУровеньДоступаКУслугам.РедактированиеЗапрещено") Тогда
			Элементы.ГруппаПраваяКолонка.ТолькоПросмотр = Истина;
			Элементы.Склад.ТолькоПросмотр = Истина;
			Элементы.Контрагент.ТолькоПросмотр = Истина;
			
			Элементы.Страницы.ТолькоПросмотр = Истина;
			Элементы.СтраницыИтогов.ТолькоПросмотр = Истина;
			Элементы.ОтветственныйКомментарий.ТолькоПросмотр = Истина;
			
			Элементы.Услуги.КоманднаяПанель.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ВывестиСуммовыеИтогиДокумента();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИспользованиеПлатежногоКалендаря()
	Возврат ПолучитьФункциональнуюОпцию("уатИспользоватьПлатежныйКалендарь");
КонецФункции

&НаКлиенте
Процедура ОрганизацияПриИзмененииФрагмент(ДополнительныеПараметры) Экспорт
    
    ПриИзмененииКонтрагентаИлиОрганизации(Новый ОписаниеОповещения("ОрганизацияПриИзмененииФрагментЗавершение", ЭтотОбъект));

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзмененииФрагментЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	УчитыватьНДСПередИзменением = Объект.УчитыватьНДС;
	СуммаВключаетНДСПередИзменением = Объект.СуммаВключаетНДС;
	
	Объект.УчитыватьНДС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.УчитыватьНДС"));
	Объект.СуммаВключаетНДС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.СуммаВключаетНДС"));
	
	Если Объект.УчитыватьНДС <> УчитыватьНДСПередИзменением ИЛИ Объект.СуммаВключаетНДС <> СуммаВключаетНДСПередИзменением Тогда
    	ПересчитатьСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС("Товары");
    	ПересчитатьСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС("Услуги");
	КонецЕсли;
	    
    ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
    ОбновитьВсегоВТЧТовары();
    ОбновитьВсегоВТЧУслуги();
    РассчитатьСуммуДокумента();
    
    УстановитьВидимость();
    
КонецПроцедуры

&НаСервере
Процедура ВывестиСуммовыеИтогиДокумента()
	
	Если Объект.УчитыватьНДС Тогда
		ВсегоНДС = Объект.Товары.Итог("СуммаНДС") + Объект.Услуги.Итог("СуммаНДС");
		Если Объект.СуммаВключаетНДС Тогда 
			НадписьВсегоНДС = НСтр("en='VAT amount';ru='НДС в сумме'") + ":";
		Иначе 
			НадписьВсегоНДС = НСтр("en='VAT from above';ru='НДС сверху'") + ":";
		КонецЕсли;
		НадписьВсего = НСтр("en='Total including VAT';ru='Всего с НДС'");
		Элементы.СтраницыИтогов.ТекущаяСтраница = Элементы.ИтогоУчетНДС;
	Иначе
		ВсегоНДС = 0;
		НадписьВсего = НСтр("en='Total';ru='Всего'");
		Элементы.СтраницыИтогов.ТекущаяСтраница = Элементы.ИтогоБезНДС;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ВалютаДокумента) Или Объект.ВалютаДокумента = мВалютаРегламентированногоУчета Тогда 
		НадписьКурс = "(1.0000)";
		Элементы.НадписьКурс.Видимость = Ложь;
		Элементы.НадписьКурс2.Видимость = Ложь;
	Иначе 
		НадписьКурс = "(" + Формат(
			?(Объект.КратностьВзаиморасчетов = 0, Объект.КурсВзаиморасчетов, Объект.КурсВзаиморасчетов/Объект.КратностьВзаиморасчетов),
			"ЧДЦ=4; ЧРД=.; ЧН=0.0000; ЧГ=0") + ")";
		Элементы.НадписьКурс.Видимость = Истина;
		Элементы.НадписьКурс2.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПравоРедактированиеДокумента()
	Рез = ПравоДоступа("Редактирование", Метаданные.Документы.уатПоступлениеТоваровУслуг);
	Возврат Рез;
КонецФункции

&НаСервере
Процедура ПересчитатьСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС(ИмяТЧ)
	уатОбщегоНазначенияСервер.ПересчитатьСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС(Объект[ИмяТЧ], Объект.СуммаВключаетНДС);
КонецПроцедуры

&НаСервере
Процедура ПересчитатьЦеныТабличнойЧастиПоВалюте(ВалютаПередИзменением, ИмяТЧ, ДопПараметры = Неопределено)
	уатОбщегоНазначенияСервер.ПересчитатьЦеныТабличнойЧастиПоВалюте(Объект, ВалютаПередИзменением, ИмяТЧ, ДопПараметры);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦенуПоКонтрагенту(СтрокаТабличнойЧасти, флУслуги = Ложь)
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		Если Объект.УчитыватьНДС Тогда
			СтавкаНДС = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(
				СтрокаТабличнойЧасти.Номенклатура, "СтавкаНДС");
			СтрокаТабличнойЧасти.СтавкаНДС = ?(ЗначениеЗаполнено(СтавкаНДС), СтавкаНДС, СтрокаТабличнойЧасти.СтавкаНДС);
		Иначе
			СтрокаТабличнойЧасти.СтавкаНДС = Неопределено;
		КонецЕсли;
				
		СтруктураЦенаВалюта = уатОбщегоНазначения.уатНайтиЦенуНоменклатуры(Объект.Дата, СтрокаТабличнойЧасти.Номенклатура, Объект.Контрагент, Ложь);
		мЦена = 0;
		Если ЗначениеЗаполнено(СтруктураЦенаВалюта.Цена) Тогда
			мЦена = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(СтруктураЦенаВалюта.Цена,
				СтруктураЦенаВалюта.Валюта, Объект.ВалютаДокумента,
				Объект.Дата, Объект.Дата);
		КонецЕсли;
		
		СтрокаТабличнойЧасти.Цена = мЦена;
		Если МноговалютныйУчет И флУслуги И СтрокаТабличнойЧасти.КроссКурс <> 0 Тогда
			СтрокаТабличнойЧасти.ЦенаВалютная = СтрокаТабличнойЧасти.Цена / СтрокаТабличнойЧасти.КроссКурс;
		КонецЕсли;
		
		РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти, флУслуги);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборСделки()
	Если Объект.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказамНаТС Тогда
		мсвЗаказыДляОтбора = уатОбщегоНазначения_проф.ПолучитьЗаказыПоДоговору(Объект.ДоговорКонтрагента, Ложь);
		
		мсвПараметрыВыбора = Новый Массив;
		мсвПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", мсвЗаказыДляОтбора));
		мсвПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.Организация", Объект.Организация));
		Элементы.Сделка.ПараметрыВыбора = Новый ФиксированныйМассив(мсвПараметрыВыбора);
	Иначе
		мсвПараметрыВыбора = Новый Массив;
		мсвПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.ДоговорКонтрагента", Объект.ДоговорКонтрагента));
		мсвПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.Организация", Объект.Организация));
		Элементы.Сделка.ПараметрыВыбора = Новый ФиксированныйМассив(мсвПараметрыВыбора);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемВопрос(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.ОК Тогда
		флВопросЗакрытиеФормы = Ложь;
		Закрыть();
	КонецЕсли;
КонецПроцедуры

// Промежуточная функция расчета кросс-курса - избавляемся от таскания контекста формы на сервер
&НаСервереБезКонтекста
Функция ПолучитьКроссКурс(ВалютаНач, ВалютаКон, ДатаКурса, КэшКурсов = Неопределено)
	Возврат уатОбщегоНазначенияСервер.ПолучитьКроссКурс(ВалютаНач, ВалютаКон, ДатаКурса, КэшКурсов);
КонецФункции

&НаСервере
Процедура ОтобразитьДатуПлатежа()
	//Если Объект.ДоговорКонтрагента.УсловиеВозникновенияЗадолженности = 0 Тогда
	//	Возврат;
	//КонецЕсли;
		
	Если ЗначениеЗаполнено(Объект.ДатаПлатежа) Тогда
		ДатаПлатежаПлан = Объект.ДатаПлатежа;
		УказатьДатуПлатежаВручную = Истина;
		
		Элементы.ДатыПлатежейПоЗаказам.Видимость = Ложь;
		Элементы.ДатаПлатежа.Видимость           = Истина;
	Иначе
		Если Объект.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказамНаТС Тогда
			мсвСделки = Объект.Услуги.Выгрузить().ВыгрузитьКолонку("ЗаказНаТС");
		ИначеЕсли Объект.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоНакладным Тогда
			мсвСделки = Новый Массив;
			мсвСделки.Добавить(Объект.Ссылка);
		Иначе
			мсвСделки = Новый Массив;
			мсвСделки.Добавить(Объект.Сделка);
		КонецЕсли;
		
		ДатаПлатежаВрем = уатОбщегоНазначения_проф.ДатаПлатежаПоРегистру(мсвСделки, Истина);
		
		Если ТипЗнч(ДатаПлатежаВрем) = Тип("Дата") Тогда
			ДатаПлатежаПлан       = ДатаПлатежаВрем;
			ДатыПлатежейПоЗаказам = Неопределено;
			
			Элементы.ДатыПлатежейПоЗаказам.Видимость = Ложь;
			Элементы.ДатаПлатежа.Видимость           = Истина;
		Иначе
			ДатаПлатежаПлан       = Неопределено;
			ДатыПлатежейПоЗаказам = ДатаПлатежаВрем;
			
			Элементы.ДатыПлатежейПоЗаказам.Видимость = Истина;
			Элементы.ДатаПлатежа.Видимость           = Ложь;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем мВалютаРегламентированногоУчета Экспорт; // Переменная хранит значение валюты регламентированного учёта, полученное из константы.

#КонецОбласти


#Область ОбработчикиСобытий

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// проверка на ведение складского учета средствами УАТ
	Если НЕ уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, 
		ПланыВидовХарактеристик.уатПраваИНастройки.ВестиСкладскойУчетУАТ) Тогда
		
		ТекстНСТР = СтрШаблон(НСтр("en='For company ""%1"" the possibility of inventory management with FMS documents is disabled!';ru='Для организации ""%1"" отключена возможность ведения складского учета документами УАТ!'"), Организация);
		уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, Отказ,, СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;
	
	// Инициализация дополнительных свойств для проведения документа.
	уатПроведение.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа.
	Документы.уатПоступлениеТоваровУслуг.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	уатПроведение.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета.
	уатПроведение.ОтразитьВыставленныеУслуги(ДополнительныеСвойства, Движения, Отказ);
	Если НЕ НеОтражаетсяВУчете Тогда
		уатПроведение.ОтразитьПартииТоваровНаСкладах(ДополнительныеСвойства, Движения, Отказ);
		Если ПолучитьФункциональнуюОпцию("уатАдресноеХранение") = ИСТИНА И Склад.АдресноеХранение Тогда
			уатПроведение_проф.ОтразитьТоварыВЯчейках(ДополнительныеСвойства, Движения, Отказ);
		КонецЕсли;
		уатПроведение_проф.ОтразитьДатыДвиженияТоваровНаСкладах(ДополнительныеСвойства, Движения, Отказ);
		Если НЕ ОплатаПодотчетнымЛицом Тогда
			уатПроведение_проф.ОтразитьВзаиморасчетыСКонтрагентами(ДополнительныеСвойства, Движения, Отказ);
		КонецЕсли;
	КонецЕсли;
	
	флИспользоватьПлатежныйКалендарь = ПолучитьФункциональнуюОпцию("уатИспользоватьПлатежныйКалендарь");
	Если флИспользоватьПлатежныйКалендарь Тогда
		уатПроведение_проф.ОтразитьПлатежныйКалендарь(ДополнительныеСвойства, Движения, Отказ);
	КонецЕсли;
				
	// Запись наборов записей.
	уатПроведение.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	уатПроведение_проф.ОбновитьТекущееСостояниеОплатыЗаказов(ЭтотОбъект);
	
	// Контроль возникновения отрицательного остатка.
	Документы.уатПоступлениеТоваровУслуг.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);
	
	Если (НЕ Отказ) И флИспользоватьПлатежныйКалендарь Тогда
		уатПроведение_проф.УстановитьДатуПлатежа(ЭтотОбъект);
	КонецЕсли;
	
	уатУчетОригиналовПервичныхДокументов.СформироватьДвиженияРеестрДокументов(Ссылка);
	
КонецПроцедуры // ОбработкаПроведения()

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	уатПроведение_проф.ПолучитьСтарыеЗаказыПередЗаписью(ЭтотОбъект);
	
	СуммаДокумента = уатОбщегоНазначенияТиповые.уатПолучитьСуммуДокументаСНДС(ЭтотОбъект);
	
	// уатСогласованиеДокументов
	уатСогласованиеДокументовСервер.ПередЗаписью(ЭтотОбъект, РежимЗаписи, Отказ);
	// Конец уатСогласованиеДокументов
	
КонецПроцедуры // ПередЗаписью

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		уатЗащищенныеФункцииСервер_проф.ПолучитьСформироватьШтрихкодОбъекта(Ссылка);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа
	уатПроведение.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	уатПроведение.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	уатПроведение.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	уатПроведение_проф.ОбновитьТекущееСостояниеОплатыЗаказов(ЭтотОбъект);
	
	// Контроль
	Документы.уатПоступлениеТоваровУслуг.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ, Истина);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	Заголовок = уатОбщегоНазначенияТиповые.уатПредставлениеДокументаПриПроведении(ЭтотОбъект);
	
	уатОбщегоНазначенияТиповые.уатПроверитьЧтоНетТоваров(ЭтотОбъект, "Услуги", , Отказ, Заголовок);
	уатОбщегоНазначенияТиповые.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", , Отказ, Заголовок);
	Если Товары.Количество() = 0 тогда
		Инд = ПроверяемыеРеквизиты.Найти("Склад");
		ПроверяемыеРеквизиты.Удалить(Инд);
	КонецЕсли;
	
	Если УчитыватьНДС Тогда
		ПроверяемыеРеквизиты.Добавить("Товары.СтавкаНДС");
		ПроверяемыеРеквизиты.Добавить("Услуги.СтавкаНДС");
	КонецЕсли;
	
	Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
		ПроверяемыеРеквизиты.Добавить("Сделка");
	ИначеЕсли ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказамНаТС Тогда
		ПроверяемыеРеквизиты.Добавить("Услуги.ЗаказНаТС");
	КонецЕсли;
	
	Если ОплатаПодотчетнымЛицом Тогда
		ПроверяемыеРеквизиты.Добавить("ПодотчетноеЛицо");
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("ДоговорКонтрагента"));
	КонецЕсли;
	
	Если НЕ ОплатаПодотчетнымЛицом И ПолучитьФункциональнуюОпцию("уатМноговалютныйУчет") = Истина Тогда
		ПроверяемыеРеквизиты.Добавить("ВалютаВзаиморасчетов");
	КонецЕсли;
	
	Если НЕ Отказ И ДатаПлатежа <> '00010101' Тогда
		ТекстСообщения = "";
		флОтказ = уатОбщегоНазначения_проф.ЕстьНакладнаяСРучнойДатойПлатежа(ЭтотОбъект, ТекстСообщения);
		Если флОтказ Тогда
			уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстСообщения, Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
	
	Для НомерСтроки = 0 ПО Услуги.Количество()-1 Цикл
		ТекСтрока = Услуги[НомерСтроки];
		Если ТекСтрока.Сумма < 0 Тогда
			ТекстНСтр = НСтр("ru = 'Стоимость услуг должна быть положительной'");
			ОбщегоНазначения.СообщитьПользователю(ТекстНСтр,, СтрШаблон("Объект.Услуги[%1].Сумма", НомерСтроки),, Отказ);
		КонецЕсли;
	КонецЦикла;
	
	уатОбщегоНазначения.ПроверкаЗаполненияПодразделения(Организация, Подразделение, Отказ, Заголовок);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	уатОбщегоНазначенияСервер.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.уатСчетНаОплатуПоставщика")
		Или ТипЗнч(ДанныеЗаполнения) = Тип("ДокументОбъект.уатСчетНаОплатуПоставщика") Тогда
		
		Дата = ТекущаяДата();
		Организация             = ДанныеЗаполнения.Организация;
		Контрагент              = ДанныеЗаполнения.Контрагент;
		ДоговорКонтрагента      = ДанныеЗаполнения.ДоговорКонтрагента;
		СуммаДокумента          = ДанныеЗаполнения.СуммаДокумента;
		УчитыватьНДС        	= ДанныеЗаполнения.УчитыватьНДС; 
		СуммаВключаетНДС    	= ДанныеЗаполнения.СуммаВключаетНДС;
		Комментарий         	= "Заполнен на основании " + ДанныеЗаполнения;
		ВалютаДокумента 		= ДанныеЗаполнения.ВалютаДокумента;
		//КратностьВзаиморасчетов = ДанныеЗаполнения.КратностьВзаиморасчетов;
		//КурсВзаиморасчетов 		= ДанныеЗаполнения.КурсВзаиморасчетов;
		ВалютаДокументаКурсКратность = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ВалютаДокумента, ТекущаяДата());
		КурсВзаиморасчетов      = ВалютаДокументаКурсКратность.Курс;
		КратностьВзаиморасчетов = ВалютаДокументаКурсКратность.Кратность;
		ДокументОснование 		= ДанныеЗаполнения;
		Сделка					= ДанныеЗаполнения;
		
		Для Каждого ТекСтрока Из ДанныеЗаполнения.Услуги Цикл
			НоваяСтрока = Услуги.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.СтатьяРасходов) Тогда
				НоваяСтрока.СтатьяРасходов = уатОбщегоНазначенияСервер.СтатьяРасходовНоменклатуры(НоваяСтрока.Номенклатура);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ТекСтрока Из ДанныеЗаполнения.Товары Цикл
			НоваяСтрока = Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		КонецЦикла;
		
		СуммаДокумента = уатОбщегоНазначенияТиповые.уатПолучитьСуммуДокументаСНДС(ЭтотОбъект);
		ВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;
		КроссКурс            = уатОбщегоНазначенияСервер.ПолучитьКроссКурс(ВалютаДокумента, ВалютаВзаиморасчетов, ТекущаяДата());
		СуммаВзаиморасчетов  = уатОбщегоНазначения_проф.СуммаВзаиморасчетовДокумента(ЭтотОбъект);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.уатРеестрПеревозок")
		И ЗначениеЗаполнено(ДанныеЗаполнения.Перевозчик) Тогда
		Организация                  = ДанныеЗаполнения.Организация;
		Подразделение                = ДанныеЗаполнения.Подразделение;
		Контрагент                   = ДанныеЗаполнения.Перевозчик;
		ДоговорКонтрагента           = ДанныеЗаполнения.ДоговорКонтрагента;
		СуммаДокумента               = ДанныеЗаполнения.СуммаДокумента;
		УчитыватьНДС                 = ДанныеЗаполнения.УчитыватьНДС; 
		СуммаВключаетНДС             = ДанныеЗаполнения.СуммаВключаетНДС;
		Комментарий                  = "Заполнен на основании " + ДанныеЗаполнения;
		ВалютаДокумента              = ДанныеЗаполнения.ВалютаДокумента;
		ВалютаДокументаКурсКратность = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ВалютаДокумента, ТекущаяДата());
		КурсВзаиморасчетов           = ВалютаДокументаКурсКратность.Курс;
		КратностьВзаиморасчетов      = ВалютаДокументаКурсКратность.Кратность;
		ДокументОснование            = ДанныеЗаполнения;
		ДатаНач                      = ДанныеЗаполнения.ДатаНач;
		ДатаКон                      = ДанныеЗаполнения.ДатаКон;
		
		КоличествоСтрокРекламаций = 0;
		Для Каждого ТекСтрока Из ДанныеЗаполнения.Услуги Цикл
			НоваяСтрока = Услуги.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			НоваяСтрока.ЗаказНаТС = ТекСтрока.Заказ;
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.СтатьяРасходов) Тогда
				НоваяСтрока.СтатьяРасходов = уатОбщегоНазначенияСервер.СтатьяРасходовНоменклатуры(НоваяСтрока.Номенклатура);
			КонецЕсли;
			Если ТекСтрока.Сумма < 0 Тогда
				КоличествоСтрокРекламаций = КоличествоСтрокРекламаций + 1;
			КонецЕсли;
		КонецЦикла;
		
		Если КоличествоСтрокРекламаций > 0 Тогда
			ТекстНСтр = НСтр("ru = 'При заполнении добавлены строки (%1 шт.) по рекламациям с отрицательной суммой.
				|Необходимо вручную распределить эти суммы по строкам услуг соответствующих заказов.'");
			ТекстНСтр = СтрШаблон(ТекстНСтр, КоличествоСтрокРекламаций);
			ОбщегоНазначения.СообщитьПользователю(ТекстНСтр);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		уатОбщегоНазначения.ОбработкаЗаполненияФормаВыборКонтрагента(ДанныеЗаполнения, ДополнительныеСвойства);
		
	ИначеЕсли уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП()
		И (ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.уатСтраховойСертификат_уэ") ИЛИ 
				ТипЗнч(ДанныеЗаполнения) = Тип("ДокументОбъект.уатСтраховойСертификат_уэ")) Тогда
			ВалютаДокумента         = ДанныеЗаполнения.ВалютаДокумента;
			ВалютаДокументаКурсКратность = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ВалютаДокумента, ТекущаяДата());
			КурсВзаиморасчетов      = ДанныеЗаполнения.КурсВзаиморасчетов;
			КратностьВзаиморасчетов = ДанныеЗаполнения.КратностьВзаиморасчетов;
			Организация             = ДанныеЗаполнения.Организация;
			Ответственный           = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
			ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнойОтветственный");
			УчитыватьНДС            = ДанныеЗаполнения.УчитыватьНДС;
			СуммаВключаетНДС        = ДанныеЗаполнения.СуммаВключаетНДС;
			СуммаДокумента          = ДанныеЗаполнения.СуммаДокумента;
			ДокументОснование       = ДанныеЗаполнения;
			Контрагент              = ДанныеЗаполнения.Контрагент;
			ДоговорКонтрагента      = ДанныеЗаполнения.ДоговорКонтрагента;

			флМноговалютныйУчет = ПолучитьФункциональнуюОпцию("уатМноговалютныйУчет");
			КэшКурсов = Неопределено;

			Для Каждого ТекСтрока Из ДанныеЗаполнения.Расходы Цикл
				НоваяСтрока = Услуги.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.СтатьяРасходов) Тогда
					НоваяСтрока.СтатьяРасходов = уатОбщегоНазначенияСервер.СтатьяРасходовНоменклатуры(НоваяСтрока.Номенклатура);
				КонецЕсли;
				ВалютаСтроки = ?(ЗначениеЗаполнено(ТекСтрока.Валюта), ТекСтрока.Валюта, ДанныеЗаполнения.ВалютаДокумента);
		
				Если флМноговалютныйУчет Тогда
					НоваяСтрока.Валюта           = ВалютаСтроки;
					НоваяСтрока.ЦенаВалютная     = НоваяСтрока.Цена;
					НоваяСтрока.СуммаВалютная    = НоваяСтрока.Сумма;
					НоваяСтрока.СуммаНДСвалютная = НоваяСтрока.СуммаНДС;
					НоваяСтрока.КроссКурс        = 1;
				КонецЕсли;
				Если ВалютаСтроки <> ВалютаДокумента Тогда
					СтруктураКурсКратность       = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ВалютаСтроки, ТекущаяДата());
					
					НоваяСтрока.Цена             = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(НоваяСтрока.Цена,
					ВалютаСтроки,                     ВалютаДокумента,
					СтруктураКурсКратность.Курс,      КурсВзаиморасчетов,
					СтруктураКурсКратность.Кратность, КратностьВзаиморасчетов);
					НоваяСтрока.Сумма            = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(НоваяСтрока.Сумма,
					ВалютаСтроки,                     ВалютаДокумента,
					СтруктураКурсКратность.Курс,      КурсВзаиморасчетов,
					СтруктураКурсКратность.Кратность, КратностьВзаиморасчетов);
					НоваяСтрока.СуммаНДС         = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(НоваяСтрока.СуммаНДС,
					ВалютаСтроки,                     ВалютаДокумента,
					СтруктураКурсКратность.Курс,      КурсВзаиморасчетов,
					СтруктураКурсКратность.Кратность, КратностьВзаиморасчетов);
					
					Если флМноговалютныйУчет Тогда
						НоваяСтрока.КроссКурс = уатОбщегоНазначенияСервер.ПолучитьКроссКурс(НоваяСтрока.Валюта, ВалютаДокумента, ТекущаяДата(), КэшКурсов);
					КонецЕсли;
				КонецЕсли;

			КонецЦикла;
			
			СуммаДокумента = уатОбщегоНазначенияТиповые.уатПолучитьСуммуДокументаСНДС(ЭтотОбъект);
			ВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;
			КроссКурс            = уатОбщегоНазначенияСервер.ПолучитьКроссКурс(ВалютаДокумента, ВалютаВзаиморасчетов, ТекущаяДата());
			СуммаВзаиморасчетов  = уатОбщегоНазначения_проф.СуммаВзаиморасчетовДокумента(ЭтотОбъект);
			
	ИначеЕсли уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП()
		И (ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.уатАктСверкиСтраховыхСертификатов_уэ") ИЛИ 
				ТипЗнч(ДанныеЗаполнения) = Тип("ДокументОбъект.уатАктСверкиСтраховыхСертификатов_уэ")) Тогда
				
			ВалютаДокумента         = Константы.ВалютаРегламентированногоУчета.Получить();
			ВалютаДокументаКурсКратность = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ВалютаДокумента, ТекущаяДата());
			КурсВзаиморасчетов      = ВалютаДокументаКурсКратность.Курс;
			КратностьВзаиморасчетов = ВалютаДокументаКурсКратность.Кратность;
			Организация             = ДанныеЗаполнения.Организация;
			Ответственный           = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
			ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнойОтветственный");
			ДокументОснование       = ДанныеЗаполнения;
			Контрагент              = ДанныеЗаполнения.Контрагент;
			ДоговорКонтрагента      = ДанныеЗаполнения.ДоговорКонтрагента;

			флМноговалютныйУчет = ПолучитьФункциональнуюОпцию("уатМноговалютныйУчет");
			КэшКурсов = Неопределено;

			Для Каждого ТекСтрокаСверка Из ДанныеЗаполнения.Сверка Цикл
				
				Для Каждого ТекСтрока Из ТекСтрокаСверка.СтраховойСертификат.Расходы Цикл
					НоваяСтрока = Услуги.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
					Если НЕ ЗначениеЗаполнено(НоваяСтрока.СтатьяРасходов) Тогда
						НоваяСтрока.СтатьяРасходов = уатОбщегоНазначенияСервер.СтатьяРасходовНоменклатуры(НоваяСтрока.Номенклатура);
					КонецЕсли;
					ВалютаСтроки = ?(ЗначениеЗаполнено(ТекСтрока.Валюта), ТекСтрока.Валюта, ДанныеЗаполнения.ВалютаДокумента);
					
					Если флМноговалютныйУчет Тогда
						НоваяСтрока.Валюта           = ВалютаСтроки;
						НоваяСтрока.ЦенаВалютная     = НоваяСтрока.Цена;
						НоваяСтрока.СуммаВалютная    = НоваяСтрока.Сумма;
						НоваяСтрока.СуммаНДСвалютная = НоваяСтрока.СуммаНДС;
						НоваяСтрока.КроссКурс        = 1;
					КонецЕсли;
					Если ВалютаСтроки <> ВалютаДокумента Тогда
						СтруктураКурсКратность       = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ВалютаСтроки, ТекущаяДата());
						
						НоваяСтрока.Цена             = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(НоваяСтрока.Цена,
						ВалютаСтроки,                     ВалютаДокумента,
						СтруктураКурсКратность.Курс,      КурсВзаиморасчетов,
						СтруктураКурсКратность.Кратность, КратностьВзаиморасчетов);
						НоваяСтрока.Сумма            = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(НоваяСтрока.Сумма,
						ВалютаСтроки,                     ВалютаДокумента,
						СтруктураКурсКратность.Курс,      КурсВзаиморасчетов,
						СтруктураКурсКратность.Кратность, КратностьВзаиморасчетов);
						НоваяСтрока.СуммаНДС         = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(НоваяСтрока.СуммаНДС,
						ВалютаСтроки,                     ВалютаДокумента,
						СтруктураКурсКратность.Курс,      КурсВзаиморасчетов,
						СтруктураКурсКратность.Кратность, КратностьВзаиморасчетов);
						
						Если флМноговалютныйУчет Тогда
							НоваяСтрока.КроссКурс = уатОбщегоНазначенияСервер.ПолучитьКроссКурс(НоваяСтрока.Валюта, ВалютаДокумента, ТекущаяДата(), КэшКурсов);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			СуммаДокумента = уатОбщегоНазначенияТиповые.уатПолучитьСуммуДокументаСНДС(ЭтотОбъект);
			ВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;
			КроссКурс            = уатОбщегоНазначенияСервер.ПолучитьКроссКурс(ВалютаДокумента, ВалютаВзаиморасчетов, ТекущаяДата());
			СуммаВзаиморасчетов  = уатОбщегоНазначения_проф.СуммаВзаиморасчетовДокумента(ЭтотОбъект);

	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Процедура ОбработкаЗаполненияИзФормыВыбораКонтрагента(мДокументОснование, ДанныеЗаполнения) Экспорт
	
	Если ТипЗнч(мДокументОснование) = Тип("ДокументСсылка.уатЗаказГрузоотправителя")
		ИЛИ ТипЗнч(мДокументОснование) = Тип("ДокументСсылка.уатМаршрутныйЛист") Тогда
		ОбработкаЗаполненияМЛЗГ(мДокументОснование, ДанныеЗаполнения);
	Иначе
		ОбработкаЗаполненияЗП(мДокументОснование, ДанныеЗаполнения);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаЗаполненияЗП(мДокументОснование, ДанныеЗаполнения)
	
	// Заполнение шапки
	ВалютаДокумента         = мДокументОснование.ВалютаДокумента;
	ВалютаДокументаКурсКратность = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ВалютаДокумента, ТекущаяДата());
	КурсВзаиморасчетов      = ВалютаДокументаКурсКратность.Курс;
	КратностьВзаиморасчетов = ВалютаДокументаКурсКратность.Кратность;
	Комментарий             = мДокументОснование.Комментарий;
	Организация             = мДокументОснование.Организация;
	Ответственный           = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
		ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнойОтветственный");
	УчитыватьНДС            = мДокументОснование.СуммаВключаетНДС;
	СуммаВключаетНДС        = мДокументОснование.СуммаВключаетНДС;
	СуммаДокумента          = мДокументОснование.СуммаДокумента;
	ДокументОснование       = мДокументОснование.Ссылка;
	Контрагент              = мДокументОснование.Контрагент;
	ДоговорКонтрагента      = мДокументОснование.ДоговорКонтрагента;
	
	МассивСтрок = Новый Массив();
	Для Каждого ТекСтрока Из ДанныеЗаполнения Цикл
		МассивСтрок.Добавить(ТекСтрока.НомерСтроки);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗНАЧЕНИЕ(Перечисление.уатПолучателиУслуг.Контрагент) КАК ПолучательУслуг,
	|	ЗНАЧЕНИЕ(Документ.уатМаршрутныйЛист.ПустаяСсылка) КАК ПутевойЛист,
	|	уатЗаказПеревозчику_уэРасходы.Ссылка.ТС КАК ТС,
	|	уатЗаказПеревозчику_уэРасходы.Ссылка.ТС.Модель КАК МодельТС,
	|	уатЗаказПеревозчику_уэРасходы.Ссылка.Водитель КАК Водитель,
	|	ЕСТЬNULL(уатЗаказПеревозчику_уэРасходы.Тариф.ПараметрВыработки, ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.ПустаяСсылка)) КАК ПараметрВыработки,
	|	уатЗаказПеревозчику_уэРасходы.Номенклатура КАК Услуга,
	|	уатЗаказПеревозчику_уэРасходы.Груз.Маршрут КАК Маршрут,
	|	ЗНАЧЕНИЕ(Справочник.уатОбъектыСтроительства.ПустаяСсылка) КАК ОбъектСтроительства,
	|	уатЗаказПеревозчику_уэРасходы.Количество КАК Количество,
	|	уатЗаказПеревозчику_уэРасходы.СтавкаНДС КАК СтавкаНДС,
	|	уатЗаказПеревозчику_уэРасходы.Сумма КАК Сумма,
	|	уатЗаказПеревозчику_уэРасходы.СуммаНДС КАК СуммаНДС,
	|	уатЗаказПеревозчику_уэРасходы.Цена КАК Цена,
	|	уатЗаказПеревозчику_уэРасходы.СтатьяРасходов КАК СтатьяРасходов,
	|	уатЗаказПеревозчику_уэРасходы.Груз.АдресОтправления КАК ПунктОтправления,
	|	уатЗаказПеревозчику_уэРасходы.Груз.АдресНазначения КАК ПунктПрибытия,
	|	уатЗаказПеревозчику_уэРасходы.Груз КАК ЗаказНаТС,
	|	уатЗаказПеревозчику_уэРасходы.Ссылка КАК ЗаказПеревозчику,
	|	уатЗаказПеревозчику_уэРасходы.Валюта КАК Валюта
	|ИЗ
	|	Документ.уатЗаказПеревозчику_уэ.Расходы КАК уатЗаказПеревозчику_уэРасходы
	|ГДЕ
	|	уатЗаказПеревозчику_уэРасходы.Ссылка = &Ссылка
	|	И уатЗаказПеревозчику_уэРасходы.НомерСтроки В(&МассивСтрок)";
	Запрос.УстановитьПараметр("Ссылка", мДокументОснование);
	Запрос.УстановитьПараметр("МассивСтрок", МассивСтрок);
	
	тблРезультатЗапроса = Запрос.Выполнить().Выгрузить();
		
	флМноговалютныйУчет = ПолучитьФункциональнуюОпцию("уатМноговалютныйУчет");
	КэшКурсов = Неопределено;
	
	уатОбщегоНазначения.УстановитьДопПоляДетализации(тблРезультатЗапроса, ДоговорКонтрагента,
		Перечисления.уатПолучателиУслуг.НашаОрганизация,, мДокументОснование);
	
	Для Каждого ТекУслуга Из тблРезультатЗапроса Цикл
		НоваяСтрока = Услуги.Добавить();
		
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекУслуга,, "Валюта");
		
		НоваяСтрока.Заказ = ТекУслуга.ЗаказПеревозчику;
		НоваяСтрока.ЗаказНаТС = ТекУслуга.Заказ;
		НоваяСтрока.Номенклатура = ТекУслуга.Услуга;
		
		НоваяСтрока.Содержание = уатОбщегоНазначения.ПолучитьСодержание(ТекУслуга, ДоговорКонтрагента,
			Перечисления.уатПолучателиУслуг.НашаОрганизация);
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.Содержание) Тогда
			НоваяСтрока.Содержание = ТекУслуга.Услуга.НаименованиеПолное;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.СтатьяРасходов) Тогда
			НоваяСтрока.СтатьяРасходов = уатОбщегоНазначенияСервер.СтатьяРасходовНоменклатуры(НоваяСтрока.Номенклатура);
		КонецЕсли;
		
		ВалютаСтроки = ?(ЗначениеЗаполнено(ТекУслуга.Валюта), ТекУслуга.Валюта, мДокументОснование.ВалютаДокумента);
		
		Если флМноговалютныйУчет Тогда
			НоваяСтрока.Валюта           = ВалютаСтроки;
			НоваяСтрока.ЦенаВалютная     = НоваяСтрока.Цена;
			НоваяСтрока.СуммаВалютная    = НоваяСтрока.Сумма;
			НоваяСтрока.СуммаНДСвалютная = НоваяСтрока.СуммаНДС;
			НоваяСтрока.КроссКурс        = 1;
		КонецЕсли;
		Если ВалютаСтроки <> ВалютаДокумента Тогда
			СтруктураКурсКратность       = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ВалютаСтроки, ТекущаяДата());
			
			НоваяСтрока.Цена             = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(НоваяСтрока.Цена,
				ВалютаСтроки,                     ВалютаДокумента,
				СтруктураКурсКратность.Курс,      КурсВзаиморасчетов,
				СтруктураКурсКратность.Кратность, КратностьВзаиморасчетов);
			НоваяСтрока.Сумма            = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(НоваяСтрока.Сумма,
				ВалютаСтроки,                     ВалютаДокумента,
				СтруктураКурсКратность.Курс,      КурсВзаиморасчетов,
				СтруктураКурсКратность.Кратность, КратностьВзаиморасчетов);
			НоваяСтрока.СуммаНДС         = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(НоваяСтрока.СуммаНДС,
				ВалютаСтроки,                     ВалютаДокумента,
				СтруктураКурсКратность.Курс,      КурсВзаиморасчетов,
				СтруктураКурсКратность.Кратность, КратностьВзаиморасчетов);
			
			Если флМноговалютныйУчет Тогда
				НоваяСтрока.КроссКурс = уатОбщегоНазначенияСервер.ПолучитьКроссКурс(НоваяСтрока.Валюта, ВалютаДокумента, ТекущаяДата(), КэшКурсов);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СуммаДокумента = уатОбщегоНазначенияТиповые.уатПолучитьСуммуДокументаСНДС(ЭтотОбъект);
	ВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	КроссКурс            = уатОбщегоНазначенияСервер.ПолучитьКроссКурс(ВалютаДокумента, ВалютаВзаиморасчетов, ТекущаяДата());
	СуммаВзаиморасчетов  = уатОбщегоНазначения_проф.СуммаВзаиморасчетовДокумента(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОбработкаЗаполненияМЛЗГ(мДокументОснование, ДанныеЗаполнения)
	ДокументОснование = мДокументОснование;
	ПризнакМаршрутногоЛиста = (ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.уатМаршрутныйЛист"));
	Если ПризнакМаршрутногоЛиста Тогда
		Если ДанныеЗаполнения.Количество() > 0 Тогда
			Данные = ДанныеЗаполнения[0];
			Валюта = Данные.Валюта;
		КонецЕсли;
		КлючСодержания = "МЛ";
	Иначе
		Данные = ДокументОснование;
		Валюта = Данные.ВалютаДокумента;
		КлючСодержания = "ЗГ";
	КонецЕсли;
	
	Комментарий             = ДокументОснование.Комментарий;
	Организация             = ДокументОснование.Организация;
	ТекПользователь         = Пользователи.АвторизованныйПользователь();
	Ответственный           = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ТекПользователь, "ОсновнойОтветственный");
	
	Подразделение           = ДокументОснование.Подразделение;
	ВалютаДокумента         = мДокументОснование.ВалютаДокумента;
	ВалютаДокументаКурсКратность = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ВалютаДокумента, ТекущаяДата());
	КурсВзаиморасчетов      = ВалютаДокументаКурсКратность.Курс;
	КратностьВзаиморасчетов = ВалютаДокументаКурсКратность.Кратность;
	
	Если ДанныеЗаполнения.Количество() > 0 Тогда
		Контрагент          = ДанныеЗаполнения[0].Контрагент;
		ДоговорКонтрагента  = ДанныеЗаполнения[0].Договор;
		УчитыватьНДС        = Данные.УчитыватьНДС;
		СуммаВключаетНДС    = Данные.СуммаВключаетНДС;
	КонецЕсли;
	
	ОбработкаЗаполненияМЛЗГДобавитьСтрокиУслуг(ДанныеЗаполнения, ПризнакМаршрутногоЛиста);
	
	СуммаДокумента = уатОбщегоНазначенияТиповые.уатПолучитьСуммуДокументаСНДС(ЭтотОбъект);
	ВалютаВзаиморасчетов = ДоговорКонтрагента.ВалютаВзаиморасчетов;
	КроссКурс            = уатОбщегоНазначенияСервер.ПолучитьКроссКурс(ВалютаДокумента, ВалютаВзаиморасчетов, ТекущаяДата());
	СуммаВзаиморасчетов  = уатОбщегоНазначения_проф.СуммаВзаиморасчетовДокумента(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОбработкаЗаполненияМЛЗГДобавитьСтрокиУслуг(СтрокиУслуг, ПризнакМаршрутногоЛиста = Ложь) Экспорт
	
	уатОбщегоНазначения.УстановитьДопПоляДетализации(СтрокиУслуг, ДоговорКонтрагента,
		Перечисления.уатПолучателиУслуг.НашаОрганизация,, ДокументОснование);
	
	флМноговалютныйУчет = ПолучитьФункциональнуюОпцию("уатМноговалютныйУчет");
	КэшКурсов = Неопределено;
	
	Для Каждого ТекУслуга Из СтрокиУслуг Цикл
		НоваяСтрока = Услуги.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекУслуга,, "Валюта");
		НоваяСтрока.Номенклатура = ТекУслуга.Услуга;
		
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.СтатьяРасходов) Тогда
			НоваяСтрока.СтатьяРасходов = уатОбщегоНазначенияСервер.СтатьяРасходовНоменклатуры(НоваяСтрока.Номенклатура);
		КонецЕсли;
		
		ВалютаСтроки = ?(ЗначениеЗаполнено(ТекУслуга.Валюта), ТекУслуга.Валюта, ДокументОснование.ВалютаДокумента);
		
		НоваяСтрока.Содержание = уатОбщегоНазначения.ПолучитьСодержание(ТекУслуга, ДоговорКонтрагента,
			Перечисления.уатПолучателиУслуг.НашаОрганизация);
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.Содержание) Тогда
			НоваяСтрока.Содержание = ТекУслуга.Услуга.НаименованиеПолное;
		КонецЕсли;
			
		Если ПризнакМаршрутногоЛиста Тогда
			НоваяСтрока.Заказ     = ТекУслуга.ЗаказПеревозчику;
			НоваяСтрока.ЗаказНаТС = ТекУслуга.Заказ;
			
			Если флМноговалютныйУчет Тогда
				НоваяСтрока.Валюта           = ВалютаСтроки;
				НоваяСтрока.ЦенаВалютная     = НоваяСтрока.Цена;
				НоваяСтрока.СуммаВалютная    = НоваяСтрока.Сумма;
				НоваяСтрока.СуммаНДСвалютная = НоваяСтрока.СуммаНДС;
				НоваяСтрока.КроссКурс        = 1;
			КонецЕсли;
			Если ВалютаСтроки <> ВалютаДокумента Тогда
				СтруктураКурсКратность       = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ВалютаСтроки, ТекущаяДата());
				
				НоваяСтрока.Цена             = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(НоваяСтрока.Цена,
					ВалютаСтроки,                     ВалютаДокумента,
					СтруктураКурсКратность.Курс,      КурсВзаиморасчетов,
					СтруктураКурсКратность.Кратность, КратностьВзаиморасчетов);
				НоваяСтрока.Сумма            = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(НоваяСтрока.Сумма,
					ВалютаСтроки,                     ВалютаДокумента,
					СтруктураКурсКратность.Курс,      КурсВзаиморасчетов,
					СтруктураКурсКратность.Кратность, КратностьВзаиморасчетов);
				НоваяСтрока.СуммаНДС         = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(НоваяСтрока.СуммаНДС,
					ВалютаСтроки,                     ВалютаДокумента,
					СтруктураКурсКратность.Курс,      КурсВзаиморасчетов,
					СтруктураКурсКратность.Кратность, КратностьВзаиморасчетов);
				
				Если флМноговалютныйУчет Тогда
					НоваяСтрока.КроссКурс = уатОбщегоНазначенияСервер.ПолучитьКроссКурс(НоваяСтрока.Валюта, ВалютаДокумента, ТекущаяДата(), КэшКурсов);
				КонецЕсли;
			КонецЕсли;
			
			флИзменилсяУчетНДС = (ТекУслуга.УчитыватьНДС <> УчитыватьНДС ИЛИ ТекУслуга.СуммаВключаетНДС <> СуммаВключаетНДС);
			
			Если ТекУслуга.УчитыватьНДС <> УчитыватьНДС Тогда
				Если УчитыватьНДС Тогда
					НоваяСтрока.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС;
				КонецЕсли;
			ИначеЕсли ТекУслуга.СуммаВключаетНДС <> СуммаВключаетНДС Тогда
				Если СуммаВключаетНДС Тогда
					НоваяСтрока.Сумма = НоваяСтрока.Сумма + НоваяСтрока.СуммаНДС;
					Если флМноговалютныйУчет Тогда
						НоваяСтрока.СуммаВалютная = НоваяСтрока.СуммаВалютная + НоваяСтрока.СуммаНДСВалютная;
					КонецЕсли;
				Иначе
					НоваяСтрока.Сумма = НоваяСтрока.Сумма - НоваяСтрока.СуммаНДС;
					Если флМноговалютныйУчет Тогда
						НоваяСтрока.СуммаВалютная = НоваяСтрока.СуммаВалютная - НоваяСтрока.СуммаНДСВалютная;
					КонецЕсли;
				КонецЕсли;
				НоваяСтрока.Цена = ?(НоваяСтрока.Количество = 0, 0, НоваяСтрока.Сумма / НоваяСтрока.Количество);
				Если флМноговалютныйУчет Тогда
					НоваяСтрока.ЦенаВалютная = ?(НоваяСтрока.Количество = 0, 0, НоваяСтрока.СуммаВалютная / НоваяСтрока.Количество);
				КонецЕсли;
			КонецЕсли;
			
			Если флИзменилсяУчетНДС Тогда
				мСтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеСтавкиНДС(НоваяСтрока.СтавкаНДС);
				НоваяСтрока.СуммаНДС = ?(СуммаВключаетНДС, 
				НоваяСтрока.Сумма - (НоваяСтрока.Сумма) / ((мСтавкаНДС + 100) / 100),
				НоваяСтрока.Сумма * мСтавкаНДС / 100);
				Если флМноговалютныйУчет Тогда
					НоваяСтрока.СуммаНДСВалютная = ?(СуммаВключаетНДС, 
					НоваяСтрока.СуммаВалютная - (НоваяСтрока.СуммаВалютная) / ((мСтавкаНДС + 100) / 100),
					НоваяСтрока.СуммаВалютная * мСтавкаНДС / 100);
				КонецЕсли;
			КонецЕсли;
		Иначе
			НоваяСтрока.ЗаказНаТС = ДокументОснование;
			
			Если флМноговалютныйУчет Тогда
				НоваяСтрока.Валюта           = ВалютаСтроки;
				НоваяСтрока.ЦенаВалютная     = НоваяСтрока.Цена;
				НоваяСтрока.СуммаВалютная    = НоваяСтрока.Сумма;
				НоваяСтрока.СуммаНДСвалютная = НоваяСтрока.СуммаНДС;
				НоваяСтрока.КроссКурс        = 1;
			КонецЕсли;
			Если ВалютаСтроки <> ВалютаДокумента Тогда
				СтруктураКурсКратность       = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ВалютаСтроки, ТекущаяДата());
				
				НоваяСтрока.Цена             = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(НоваяСтрока.Цена,
					ВалютаСтроки,                     ВалютаДокумента,
					СтруктураКурсКратность.Курс,      КурсВзаиморасчетов,
					СтруктураКурсКратность.Кратность, КратностьВзаиморасчетов);
				НоваяСтрока.Сумма            = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(НоваяСтрока.Сумма,
					ВалютаСтроки,                     ВалютаДокумента,
					СтруктураКурсКратность.Курс,      КурсВзаиморасчетов,
					СтруктураКурсКратность.Кратность, КратностьВзаиморасчетов);
				НоваяСтрока.СуммаНДС         = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(НоваяСтрока.СуммаНДС,
					ВалютаСтроки,                     ВалютаДокумента,
					СтруктураКурсКратность.Курс,      КурсВзаиморасчетов,
					СтруктураКурсКратность.Кратность, КратностьВзаиморасчетов);
				
				Если флМноговалютныйУчет Тогда
					НоваяСтрока.КроссКурс = уатОбщегоНазначенияСервер.ПолучитьКроссКурс(НоваяСтрока.Валюта, ВалютаДокумента, ТекущаяДата(), КэшКурсов);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		мСтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеСтавкиНДС(НоваяСтрока.СтавкаНДС);
		
		НоваяСтрока.СуммаНДС = ?(СуммаВключаетНДС, 
			НоваяСтрока.Сумма - (НоваяСтрока.Сумма) / ((мСтавкаНДС + 100) / 100),
			НоваяСтрока.Сумма * мСтавкаНДС / 100);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти


#Область Инициализация

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

#КонецОбласти

#КонецЕсли
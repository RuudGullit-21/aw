#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	Настройки.ПриПолученииСлужебныхРеквизитов = Ложь;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатВозвратТоваров";
	КомандаПечати.Идентификатор = "Накладная";
	КомандаПечати.Представление = НСтр("en='Return of goods';ru='Возврат товаров'");
	
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор  = "Реестр";
	КомандаПечати.Представление  = НСтр("en='Document register';ru='Реестр документов'");
	КомандаПечати.ЗаголовокФормы = НСтр("en='Register of documents ""Return of goods""';ru='Реестр документов ""Возврат товаров""'");
	КомандаПечати.Обработчик     = "уатОбщегоНазначенияТиповыеКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм     = "ФормаСписка";
	КомандаПечати.Порядок        = 100;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр).
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной
//                                                            параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной
//                                            параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если НЕ уатОбщегоНазначенияСервер.РазрешениеПечатиНепроведенногоДокумента(МассивОбъектов) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Накладная") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Накладная", "Возврат товаров", ПечатьВозвратТоваров(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
	уатОбщегоНазначенияСервер.УстановитьРедактированиеПечатныхФормДокумента(КоллекцияПечатныхФорм);
	уатУправлениеПечатью.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов, КоллекцияПечатныхФорм);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.УправлениеДоступом

// Позволяет переопределить ограничение, указанное в модуле менеджера объекта метаданных.
//
// Параметры:
//  Ограничение - Структура:
//    * Текст                             - Строка - ограничение доступа для пользователей.
//                                          Если пустая строка, значит, доступ разрешен.
//    * ТекстДляВнешнихПользователей      - Строка - ограничение доступа для внешних пользователей.
//                                          Если пустая строка, значит, доступ запрещен.
//    * ПоВладельцуБезЗаписиКлючейДоступа - Неопределено - определить автоматически.
//                                        - Булево - если Ложь, то всегда записывать ключи доступа,
//                                          если Истина, тогда не записывать ключи доступа,
//                                          а использовать ключи доступа владельца (требуется,
//                                          чтобы ограничение было строго по объекту-владельцу).
//   * ПоВладельцуБезЗаписиКлючейДоступаДляВнешнихПользователей - Неопределено, Булево - также
//                                          как у параметра ПоВладельцуБезЗаписиКлючейДоступа.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Подразделение)";
	
	Ограничение.ТекстДляВнешнихПользователей = Ограничение.Текст;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// СтандартныеПодсистемы.ВариантыОтчетов

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВариантыОтчетов

#КонецОбласти

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	
	флЯчеистыйСклад = ПолучитьФункциональнуюОпцию("уатАдресноеХранение") = ИСТИНА
		И ДокументСсылка.Склад.АдресноеХранение;
		
	мЗапрос = Новый Запрос;
	мЗапрос.УстановитьПараметр("Ссылка"          , ДокументСсылка);
	мЗапрос.УстановитьПараметр("Склад"           , ДокументСсылка.Склад);
	мЗапрос.УстановитьПараметр("МоментВремени"   , СтруктураДополнительныеСвойства.ДляПроведения.МоментКонтроля);
	мЗапрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	мЗапрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаДокумента.Ссылка КАК Регистратор,
	|	ТаблицаДокумента.Ссылка.Дата КАК Период,
	|	ТаблицаДокумента.Ссылка.Склад КАК Склад,
	|	ТаблицаДокумента.Ссылка.Склад.ТранзитнаяЯчейка КАК Ячейка,
	|	ТаблицаДокумента.Номенклатура,
	|	ТаблицаДокумента.Количество * ЕСТЬNULL(ТаблицаДокумента.ЕдиницаИзмерения.Коэффициент, 1) / ТаблицаДокумента.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Количество,
	|	ТаблицаДокумента.ЕдиницаИзмерения
	|ПОМЕСТИТЬ ТаблицаДокументаТовары
	|ИЗ
	|	Документ.уатВозвратТоваров.Товары КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ТаблицаДокументаТовары.Склад,
	|	ТаблицаДокументаТовары.Ячейка,
	|	ТаблицаДокументаТовары.Номенклатура
	|ИЗ
	|	ТаблицаДокументаТовары КАК ТаблицаДокументаТовары";	
	
	МассивРезультатов = мЗапрос.ВыполнитьПакет();
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.уатПартииТоваровНаСкладах");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = МассивРезультатов[1];
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Склад", "Склад");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
	Если флЯчеистыйСклад Тогда 
		ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.уатТоварыВЯчейках");
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
		ЭлементБлокировки.ИсточникДанных = МассивРезультатов[1];
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Склад", "Склад");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Ячейка", "Ячейка");
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
	КонецЕсли;
	Блокировка.Заблокировать();

	мЗапрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТабНоменклатуры.Склад,
	|	ТабНоменклатуры.Номенклатура,
	|	ТабНоменклатуры.Количество,
	|	ТабНоменклатуры.Период
	|ИЗ 
	|	ТаблицаДокументаТовары КАК ТабНоменклатуры";
	
	ТаблицаПартий = уатПроведение.ПолучитьТаблицуПартийДляСписания(мЗапрос.Выполнить().Выгрузить(),
		уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументСсылка.Организация,
		ПланыВидовХарактеристик.уатПраваИНастройки.СпособОценкиМПЗ),
		СтруктураДополнительныеСвойства.ДляПроведения.МоментКонтроля);
	
	ЗапросПартии = Новый Запрос();
	ЗапросПартии.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТабДанных.Склад КАК Склад,
	|	ТабДанных.Номенклатура КАК Номенклатура,
	|	ТабДанных.Партия КАК Партия,
	|	ТабДанных.Количество КАК Количество,
	|	ТабДанных.Стоимость КАК Стоимость,
	|	ТабДанных.СтоимостьУпр КАК СтоимостьУпр,
	|	ТабДанных.СуммаНДС КАК СуммаНДС
	|ПОМЕСТИТЬ ВремТаблицаПартий
	|ИЗ
	|	&ТаблицаПарам КАК ТабДанных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период КАК Период,
	|	&Регистратор КАК Регистратор,
	|	ТабДанных.Склад КАК Склад,
	|	ТабДанных.Партия КАК Партия,
	|	ТабДанных.Номенклатура КАК Номенклатура,
	|	ТабДанных.Количество КАК Количество,
	|	ТабДанных.Стоимость КАК Стоимость,
	|	ТабДанных.СтоимостьУпр КАК СтоимостьУпр,
	|	ТабДанных.СуммаНДС КАК СуммаНДС
	|ИЗ
	|	ВремТаблицаПартий КАК ТабДанных";
	
	ЗапросПартии.УстановитьПараметр("Период"         , ДокументСсылка.Дата);
	ЗапросПартии.УстановитьПараметр("ТаблицаПарам"   , ТаблицаПартий);
	ЗапросПартии.УстановитьПараметр("Регистратор"    , ДокументСсылка);

	МассивРезультатов = ЗапросПартии.ВыполнитьПакет();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПартии", МассивРезультатов[1].Выгрузить());
	
	Если флЯчеистыйСклад Тогда
		ЗапросЯчейки = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
		|	ТаблицаДокумента.Ссылка.Дата КАК Период,
		|	ТаблицаДокумента.Ссылка КАК Регистратор,
		|	ТаблицаДокумента.Ссылка.Склад КАК Склад,
		|	ТаблицаДокумента.Ссылка.Склад.ТранзитнаяЯчейка КАК Ячейка,
		|	ТаблицаДокумента.Номенклатура КАК Номенклатура,
		|	ТаблицаДокумента.Количество * ЕСТЬNULL(ТаблицаДокумента.ЕдиницаИзмерения.Коэффициент, 1) / ТаблицаДокумента.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Количество
		|ИЗ
		|	Документ.уатВозвратТоваров.Товары КАК ТаблицаДокумента
		|ГДЕ
		|	ТаблицаДокумента.Ссылка = &Ссылка");
		ЗапросЯчейки.УстановитьПараметр("Ссылка", ДокументСсылка);
		тблТоварыВЯчейках = ЗапросЯчейки.Выполнить().Выгрузить(); 
		
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаТоварыВЯчейках", тблТоварыВЯчейках);
	КонецЕсли;
	
КонецПроцедуры // ИнициализироватьДанныеДокумента()

Процедура ВыполнитьКонтроль(ДокументСсылка, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь) Экспорт
	
	Заголовок = уатОбщегоНазначенияТиповые.уатПредставлениеДокументаПриПроведении(ДокументСсылка);
	
	мЗапрос = Новый Запрос;
	мЗапрос.МенеджерВременныхТаблиц = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц; 
	мЗапрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаДокумента.Номенклатура КАК Номенклатура,
	|	ТаблицаДокумента.Ссылка КАК Регистратор,
	|	ЕСТЬNULL(уатПартииТоваровНаСкладахОстатки.КоличествоОстаток, 0) КАК КоличествоОстаток,
	|	ЕСТЬNULL(уатТоварыВЯчейкахОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЯчейка
	|ИЗ
	|	Документ.уатВозвратТоваров.Товары КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.уатПартииТоваровНаСкладах.Остатки(
	|				&МоментВремени,
	|				Склад = &Склад
	|					И Номенклатура В
	|						(ВЫБРАТЬ
	|							ТабНоменклатуры.Номенклатура
	|						ИЗ
	|							Документ.уатВозвратТоваров.Товары КАК ТабНоменклатуры
	|						ГДЕ
	|							ТабНоменклатуры.Ссылка = &Ссылка)) КАК уатПартииТоваровНаСкладахОстатки
	|		ПО ТаблицаДокумента.Номенклатура = уатПартииТоваровНаСкладахОстатки.Номенклатура
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.уатТоварыВЯчейках.Остатки(
	|				&МоментВремени,
	|				Склад = &Склад
	|					И Ячейка = Склад.ТранзитнаяЯчейка
	|					И Номенклатура В
	|						(ВЫБРАТЬ
	|							ТабНоменклатуры.Номенклатура
	|						ИЗ
	|							Документ.уатВозвратТоваров.Товары КАК ТабНоменклатуры
	|						ГДЕ
	|							ТабНоменклатуры.Ссылка = &Ссылка)) КАК уатТоварыВЯчейкахОстатки
	|		ПО ТаблицаДокумента.Номенклатура = уатТоварыВЯчейкахОстатки.Номенклатура
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|	И (ЕСТЬNULL(уатПартииТоваровНаСкладахОстатки.КоличествоОстаток, 0) < 0
	|			ИЛИ ЕСТЬNULL(уатТоварыВЯчейкахОстатки.КоличествоОстаток, 0) < 0)";
	
	мЗапрос.УстановитьПараметр("Склад"        , ДокументСсылка.Склад);
	мЗапрос.УстановитьПараметр("Ссылка"       , ДокументСсылка);
	мЗапрос.УстановитьПараметр("МоментВремени", ДополнительныеСвойства.ДляПроведения.МоментКонтроля);
	
	Выборка = мЗапрос.Выполнить().Выбрать();
	
	Если ПолучитьФункциональнуюОпцию("уатАдресноеХранение") И ДокументСсылка.Склад.АдресноеХранение Тогда
		ТекстШаблона = "Обнаружен отрицательный остаток номенклатуры ""%1"" на складе ""%2"" (транзитная ячейка): %3";
	Иначе
		ТекстШаблона = "Обнаружен отрицательный остаток номенклатуры ""%1"" на складе ""%2"": %3";
	КонецЕсли;
	
	Если Выборка.Количество() тогда
		Пока Выборка.Следующий() Цикл
			ТекстНСТР = СтрШаблон(ТекстШаблона, Выборка.Номенклатура, мЗапрос.Параметры.Склад,
				Мин(Выборка.КоличествоОстаток, Выборка.КоличествоОстатокЯчейка));
			уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, Отказ, Заголовок);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ВыполнитьКонтроль()

// Получает дополнительные реквизиты для отображения в отчете "Реестр документов"
// 
// Возвращаемое значение:
//  Структура - доп. реквизитов
//
Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура("Информация", "Контрагент");
	Возврат Результат;
	
КонецФункции

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Функция ПечатьВозвратТоваров(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_ВозвратТоваров";
	
	ПервыйДокумент = Истина;
		
	Для Каждого ТекущийДокумент Из МассивОбъектов Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ВыводитьКоды    = Истина;
		
		РежимВыводаКодаВДокументах = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ПользователиКлиентСервер.АвторизованныйПользователь(), 
		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.РежимВыводаКодаВДокументах"));
		
		Колонка         = РежимВыводаКодаВДокументах;
		ТекстКодАртикул = РежимВыводаКодаВДокументах;
		
		ОбластьШапки  = "ШапкаСКодом";
		ОбластьСтроки = "СтрокаСКодом";
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент.Ссылка);
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВозвратТоваров.Номер,
		|	ВозвратТоваров.Дата,
		|	ВозвратТоваров.ДоговорКонтрагента,
		|	ВозвратТоваров.Контрагент,
		|	ВозвратТоваров.Контрагент КАК Поставщик,
		|	ВозвратТоваров.Организация,
		|	ВозвратТоваров.Организация КАК Покупатель,
		|	ВозвратТоваров.СуммаДокумента,
		|	ВозвратТоваров.ВалютаДокумента,
		|	ВозвратТоваров.УчитыватьНДС,
		|	ВозвратТоваров.СуммаВключаетНДС,
		|	ВозвратТоваров.Отпустил,
		|	ВозвратТоваров.Получил
		|ИЗ
		|	Документ.уатВозвратТоваров КАК ВозвратТоваров
		|ГДЕ
		|	ВозвратТоваров.Ссылка = &ТекущийДокумент";
		Шапка = Запрос.Выполнить().Выбрать();
		Шапка.Следующий();
		
		ЗапросПоТоварам = Новый Запрос();
		ЗапросПоТоварам.УстановитьПараметр("ТекущийДокумент", ТекущийДокумент.Ссылка);
		ЗапросПоТоварам.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВложенныйЗапрос.Номенклатура,
		|	ВЫРАЗИТЬ(ВложенныйЗапрос.Номенклатура.НаименованиеПолное КАК СТРОКА(1000)) КАК Товар,
		|	ВложенныйЗапрос.Номенклатура."+ ТекстКодАртикул + " КАК КодАртикул,
		|	ВложенныйЗапрос.ЕдиницаИзмерения.Представление КАК ЕдиницаИзмерения,
		|	ВложенныйЗапрос.Количество,
		|	ВложенныйЗапрос.Цена,
		|	ВложенныйЗапрос.Сумма,
		|	ВложенныйЗапрос.СуммаНДС,
		|	ВложенныйЗапрос.СтавкаНДС,
		|	ВложенныйЗапрос.НомерСтроки КАК НомерСтроки,
		|	ВложенныйЗапрос.Метка КАК Метка
		|ИЗ
		|	(ВЫБРАТЬ
		|		ВозвратТоваров.Номенклатура КАК Номенклатура,
		|		СУММА(ВозвратТоваров.Количество) КАК Количество,
		|		ВозвратТоваров.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|		ВозвратТоваров.Цена КАК Цена,
		|		СУММА(ВозвратТоваров.Сумма) КАК Сумма,
		|		СУММА(ВозвратТоваров.СуммаНДС) КАК СуммаНДС,
		|		ВозвратТоваров.СтавкаНДС КАК СтавкаНДС,
		|		МИНИМУМ(ВозвратТоваров.НомерСтроки) КАК НомерСтроки,
		|		0 КАК Метка
		|	ИЗ
		|		Документ.уатВозвратТоваров.Товары КАК ВозвратТоваров
		|	ГДЕ
		|		ВозвратТоваров.Ссылка = &ТекущийДокумент
		|	
		|	СГРУППИРОВАТЬ ПО
		|		ВозвратТоваров.Номенклатура,
		|		ВозвратТоваров.СтавкаНДС,
		|		ВозвратТоваров.Цена,
		|		ВозвратТоваров.ЕдиницаИзмерения) КАК ВложенныйЗапрос
		|
		|УПОРЯДОЧИТЬ ПО
		|	Метка,
		|	НомерСтроки";
		
		СтрЕдИзмерения = ?(Метаданные.Справочники.Найти("ЕдиницыИзмерения") = Неопределено,
		"ВозвратТоваров.Номенклатура.ЕдиницаИзмерения, ",
		"ВЫБОР
		|		КОГДА
		|			ВозвратТоваров.Номенклатура.ЕдиницаХраненияОстатков.Представление ЕСТЬ NULL
		|		ТОГДА
		|			ВозвратТоваров.Номенклатура.ЕдиницаИзмерения.Представление
		|		ИНАЧЕ
		|			ВозвратТоваров.Номенклатура.ЕдиницаХраненияОстатков.Представление
		|	КОНЕЦ , ");

		ЗапросПоТоварам.Текст = СтрЗаменить(ЗапросПоТоварам.Текст, "//ЕДИНИЦАИЗМЕРЕНИЯ",СтрЕдИзмерения);
		ВыборкаСтрок = ЗапросПоТоварам.Выполнить().Выгрузить();
		
		ТабличныйДокумент.ИмяПараметровПечати = "ПараметрыПечати_ВозвратТоваров_ВозвратТоваров";
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.уатВозвратТоваров.ПФ_MXL_Накладная");
		
		// Печать штрихкода
		Если уатЗащищенныеФункцииСервер_проф.ИспользоватьШтрихкодированиеОбъекта(ТекущийДокумент) Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокШтрихкод");
			уатЗащищенныеФункцииСервер_проф.ОтобразитьШКнаПФ(ОбластьМакета, ТекущийДокумент);
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
        ОбластьМакета = Макет.ПолучитьОбласть("Заголовок");
		ОбластьМакета.Параметры.ТекстЗаголовка = уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(Шапка,
			НСтр("en='Return of goods';ru='Возврат товаров'"));
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Поставщик");
		ОбластьМакета.Параметры.ПредставлениеПоставщика = уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(Шапка.Поставщик, Шапка.Дата), "ПолноеНаименование,");
		ОбластьМакета.Параметры.Поставщик = Шапка.Контрагент;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть("Покупатель");
		СписокТребуемыхПараметров							= "НаименованиеДляПечатныхФорм";
		СведенияОбОбъекте									= уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(Шапка.Покупатель);
		ОбластьМакета.Параметры.ПредставлениеПолучателя		= уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(СведенияОбОбъекте, СписокТребуемыхПараметров);
		ОбластьМакета.Параметры.Получатель 					= Шапка.Организация;
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Вывести табличную часть
		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
		Если ВыводитьКоды Тогда
			ОбластьМакета.Параметры.Колонка = Колонка;
		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтроки);
		Сумма    = 0;
		СуммаНДС = 0;
		
		Для Каждого ВыборкаСтрокТовары Из ВыборкаСтрок Цикл
			
			ОбластьМакета.Параметры.Заполнить(ВыборкаСтрокТовары);
			ОбластьМакета.Параметры.НомерСтроки = ВыборкаСтрок.Индекс(ВыборкаСтрокТовары) + 1;
			ОбластьМакета.Параметры.Товар       = СокрЛП(ВыборкаСтрокТовары.Товар); 
			
			Если ВыводитьКоды Тогда
				Если ВыборкаСтрокТовары.КодАртикул = "" Тогда
					ОбластьМакета.Параметры.КодАртикул = НСтр("en='-';ru='-'");
				Иначе
					ОбластьМакета.Параметры.КодАртикул = ВыборкаСтрокТовары.КодАртикул;
				КонецЕсли;
			КонецЕсли;
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			Сумма    = Сумма    + ВыборкаСтрокТовары.Сумма;
			СуммаНДС = СуммаНДС + ВыборкаСтрокТовары.СуммаНДС;
			
		КонецЦикла;
		
		// Вывести Итого
		ОбластьМакета                 = Макет.ПолучитьОбласть("Итого");
		ОбластьМакета.Параметры.Всего = уатОбщегоНазначенияТиповые.уатФорматСумм(Сумма);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Вывести ИтогоНДС
		СтавкиНДС = ОбщегоНазначения.ВыгрузитьКолонку(ВыборкаСтрок, "СтавкаНДС", Истина);
		Если Шапка.УчитыватьНДС Тогда
			ОбластьМакета                    = Макет.ПолучитьОбласть("ИтогоНДС");
			ДанныеПечатиНДС = уатОбщегоНазначенияТиповые.уатДанныеПечатиИтоговНДС(СуммаНДС, СтавкиНДС, Шапка.СуммаВключаетНДС, ":"); 
			ОбластьМакета.Параметры.ВсегоНДС = ДанныеПечатиНДС.ВсегоНДС;
			ОбластьМакета.Параметры.НДС      = ДанныеПечатиНДС.НДС;
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
		
		// Вывести Сумму прописью
		ОбластьМакета                          = Макет.ПолучитьОбласть("СуммаПрописью");
		СуммаКПрописи                          = Сумма + ?(Шапка.УчитыватьНДС И НЕ Шапка.СуммаВключаетНДС, СуммаНДС, 0);
		ОбластьМакета.Параметры.ИтоговаяСтрока ="Всего наименований " + ВыборкаСтрок.Количество()
		+ ", на сумму " + уатОбщегоНазначенияТиповые.уатФорматСумм(СуммаКПрописи, Шапка.ВалютаДокумента);
		ОбластьМакета.Параметры.СуммаПрописью  = уатОбщегоНазначенияТиповые.уатСформироватьСуммуПрописью(СуммаКПрописи, Шапка.ВалютаДокумента);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		// Вывести подписи
		ОбластьМакета = Макет.ПолучитьОбласть("Подписи");
		ОбластьМакета.Параметры.Отпустил = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(Шапка.Отпустил);
		ОбластьМакета.Параметры.Получил  = уатОбщегоНазначенияТиповые.уатФамилияИнициалыФизЛица(Шапка.Получил);
		ТабличныйДокумент.Вывести(ОбластьМакета);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ТекущийДокумент);
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатнаяФорма()

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокумента_проф(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	
	ТаблицаВзаиморасчетов = Новый ТаблицаЗначений;
	ТаблицаВзаиморасчетов.Колонки.Добавить("Регистратор");
	ТаблицаВзаиморасчетов.Колонки.Добавить("Период");
	ТаблицаВзаиморасчетов.Колонки.Добавить("ВидДвижения");
	ТаблицаВзаиморасчетов.Колонки.Добавить("ДоговорКонтрагента");
	ТаблицаВзаиморасчетов.Колонки.Добавить("Валюта");
	ТаблицаВзаиморасчетов.Колонки.Добавить("Сделка");
	ТаблицаВзаиморасчетов.Колонки.Добавить("Контрагент");
	ТаблицаВзаиморасчетов.Колонки.Добавить("Организация");
	ТаблицаВзаиморасчетов.Колонки.Добавить("СуммаВзаиморасчетов");
	ТаблицаВзаиморасчетов.Колонки.Добавить("СуммаУпр");
	
	НовСтрока = ТаблицаВзаиморасчетов.Добавить();
	НовСтрока.Регистратор        = ДокументСсылка;
	НовСтрока.Период             = ДокументСсылка.Дата;
	НовСтрока.ВидДвижения        = ВидДвиженияНакопления.Расход;
	НовСтрока.ДоговорКонтрагента = ДокументСсылка.ДоговорКонтрагента;
	НовСтрока.Валюта             = ДокументСсылка.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	НовСтрока.Контрагент         = ДокументСсылка.Контрагент;
	НовСтрока.Организация        = ДокументСсылка.Организация;
	
	Если ЗначениеЗаполнено(ДокументСсылка.ДокументОснование) И ТипЗнч(ДокументСсылка.ДокументОснование) = Тип("ДокументСсылка.уатПоступлениеТоваровУслуг") Тогда
		Если ДокументСсылка.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			НовСтрока.Сделка = ДокументСсылка.ДокументОснование.Сделка;
		ИначеЕсли ДокументСсылка.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоНакладным Тогда
			НовСтрока.Сделка = ДокументСсылка.ДокументОснование;
		КонецЕсли;
	КонецЕсли;
	
	НовСтрока.СуммаВзаиморасчетов = -уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ДокументСсылка.СуммаДокумента, 
	                                                  ДокументСсылка.ВалютаДокумента, ДокументСсылка.ДоговорКонтрагента.ВалютаВзаиморасчетов,
													  уатОбщегоНазначенияТиповые.уатКурсДокумента(ДокументСсылка,СтруктураДополнительныеСвойства.ВалютаРеглУчета),
													  ДокументСсылка.КурсВзаиморасчетов,
													  уатОбщегоНазначенияТиповые.уатКратностьДокумента(ДокументСсылка,СтруктураДополнительныеСвойства.ВалютаРеглУчета),
													  ДокументСсылка.КратностьВзаиморасчетов);
	НовСтрока.СуммаУпр            = -уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ДокументСсылка.СуммаДокумента, 
	                                                  ДокументСсылка.ВалютаДокумента, СтруктураДополнительныеСвойства.ВалютаУпрУчета,
													  уатОбщегоНазначенияТиповые.уатКурсДокумента(ДокументСсылка,СтруктураДополнительныеСвойства.ВалютаРеглУчета),
													  СтруктураДополнительныеСвойства.КурсУпр,
													  уатОбщегоНазначенияТиповые.уатКратностьДокумента(ДокументСсылка,СтруктураДополнительныеСвойства.ВалютаРеглУчета),
													  СтруктураДополнительныеСвойства.КратностьУпр);
													  
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаВзаиморасчетов", ТаблицаВзаиморасчетов);
	
КонецПроцедуры // ИнициализироватьДанныеДокумента()

// Процедура - Заполнить структуру получателей печатных форм
//
// Параметры:
//  СтруктураДанныхОбъектаПечати - Структура - Структура данных получателей печатной формы
//
Процедура ЗаполнитьСтруктуруПолучателейПечатныхФорм(СтруктураДанныхОбъектаПечати) Экспорт
	
	СтруктураДанныхОбъектаПечати.ОсновнойПолучатель = "Контрагент";
	 
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Контрагент");
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("КонтактноеЛицо");
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Грузоотправитель");
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Грузополучатель");
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	Настройки.ПриПолученииСлужебныхРеквизитов = Ложь;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатМаршрутныйЛист";
	КомандаПечати.Идентификатор = "МаршрутныйЛист";
	КомандаПечати.Представление = НСтр("en='Routing list';ru='Маршрутный лист'");
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатМаршрутныйЛист";
	КомандаПечати.Идентификатор = "МаршрутныйЛистСЗаказами";
	КомандаПечати.Представление = НСтр("en='Routing list (specification on orders)';ru='Маршрутный лист (детализация по заказам)'");
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатМаршрутныйЛист";
	КомандаПечати.Идентификатор = "МаршрутныйЛистСГрузами";
	КомандаПечати.Представление = НСтр("en = 'Routing list (detailing by goods)'; ru = 'Маршрутный лист (детализация по товарам)'");

	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатМаршрутныйЛист";
	КомандаПечати.Идентификатор = "МаршрутныйЛистСГрузМестами";
	КомандаПечати.Представление = НСтр("en='Routing list (detailing by packages)';ru='Маршрутный лист (детализация по грузовым местам)'");

	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатМаршрутныйЛист";
	КомандаПечати.Идентификатор = "УпаковочныйЛист";
	КомандаПечати.Представление = НСтр("ru='Упаковочный лист'");

	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор  = "Реестр";
	КомандаПечати.Представление  = НСтр("en='Document register';ru='Реестр документов'");
	КомандаПечати.ЗаголовокФормы = НСтр("en='Register of documents ""Routing list""';ru='Реестр документов ""Маршрутный лист""'");
	КомандаПечати.Обработчик     = "уатОбщегоНазначенияТиповыеКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм     = "ФормаСписка";
	КомандаПечати.Порядок        = 100;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр).
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной
//                                                            параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной
//                                            параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если НЕ уатОбщегоНазначенияСервер.РазрешениеПечатиНепроведенногоДокумента(МассивОбъектов) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "МаршрутныйЛист") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "МаршрутныйЛист",
			"Маршрутный лист", ПечатьМаршрутныйЛист(МассивОбъектов, ОбъектыПечати, ПараметрыПечати));
			
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "МаршрутныйЛистСЗаказами") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "МаршрутныйЛистСЗаказами",
			"Маршрутный лист (детализация по заказам)", ПечатьМаршрутныйЛист(МассивОбъектов, ОбъектыПечати, ПараметрыПечати, "Заказы"));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "МаршрутныйЛистСГрузами") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "МаршрутныйЛистСГрузами",
			"Маршрутный лист (детализация по товарам)", ПечатьМаршрутныйЛист(МассивОбъектов, ОбъектыПечати, ПараметрыПечати, "Грузы"));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "МаршрутныйЛистСГрузМестами") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "МаршрутныйЛистСГрузМестами",
			"Маршрутный лист (детализация по грузовым местам)", ПечатьМаршрутныйЛист(МассивОбъектов, ОбъектыПечати, ПараметрыПечати, "ГрузМеста"));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "УпаковочныйЛист") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "УпаковочныйЛист",
		"Маршрутный лист", ПечатьУпаковочныйЛист(МассивОбъектов, ОбъектыПечати));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "Карта") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "Карта",
			"Карта", ПечатьКарты(МассивОбъектов, ОбъектыПечати, ПараметрыПечати));
	КонецЕсли;
	
	уатОбщегоНазначенияСервер.УстановитьРедактированиеПечатныхФормДокумента(КоллекцияПечатныхФорм);
	уатУправлениеПечатью.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов, КоллекцияПечатныхФорм);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.Взаимодействия

// Возвращает контакты по предмету.
//
// Параметры:
//  Ссылка	 - СправочникСсылка	 - Ссылка на предмет-владелец контактов
// 
// Возвращаемое значение:
//  Массив - массив контактов
// 
Функция ПолучитьКонтакты(Ссылка) Экспорт
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПоКонтактам();
	Запрос.УстановитьПараметр("Предмет", Ссылка);
	
	НачатьТранзакцию();
	Попытка
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			Результат = Неопределено;
		Иначе
			Результат = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Контакт");
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Возвращает текст запроса по контактам взаимодействий, содержащимся в документе.
//
// Параметры:
//  ТекстВременнаяТаблица - Строка - Имя временной таблицы, в которую помещаются полученные данные.
//  Объединить  - Булево  - признак, указывающий на необходимость добавления конструкции ОБЪЕДИНИТЬ в запрос.
//
// Возвращаемое значение:
//   Строка   - сформированный текст запроса для получения контактов взаимодействий объекта.
//
Функция ТекстЗапросаПоКонтактам(ТекстВременнаяТаблица = "", Объединить = Ложь) Экспорт
	
	ШаблонВыбрать = ?(Объединить, "ВЫБРАТЬ РАЗЛИЧНЫЕ", "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ");
	
	ТекстЗапроса = "
	               |%ШаблонВыбрать%
	               |	уатМаршрутныйЛист.Контрагент КАК Контакт " + ТекстВременнаяТаблица + "
	               |ИЗ
	               |	Документ.уатМаршрутныйЛист КАК уатМаршрутныйЛист
	               |ГДЕ
	               |	уатМаршрутныйЛист.Ссылка = &Предмет
	               |	И ТИПЗНАЧЕНИЯ(уатМаршрутныйЛист.Контрагент) = ТИП(Справочник.Контрагенты)
	               |	И НЕ уатМаршрутныйЛист.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	уатМаршрутныйЛист.Водитель1
	               |ИЗ
	               |	Документ.уатМаршрутныйЛист КАК уатМаршрутныйЛист
	               |ГДЕ
	               |	уатМаршрутныйЛист.Ссылка = &Предмет
	               |	И НЕ уатМаршрутныйЛист.Водитель1 = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	               |	И ТИПЗНАЧЕНИЯ(уатМаршрутныйЛист.Водитель1) = ТИП(Справочник.ФизическиеЛица)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ РАЗЛИЧНЫЕ
	               |	уатМаршрутныйЛист.Водитель2
	               |ИЗ
	               |	Документ.уатМаршрутныйЛист КАК уатМаршрутныйЛист
	               |ГДЕ
	               |	уатМаршрутныйЛист.Ссылка = &Предмет
	               |	И НЕ уатМаршрутныйЛист.Водитель2 = ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	               |	И ТИПЗНАЧЕНИЯ(уатМаршрутныйЛист.Водитель2) = ТИП(Справочник.ФизическиеЛица)
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	уатМаршрутныйЛист.Водитель1.ФизическоеЛицо.Ссылка
	               |ИЗ
	               |	Документ.уатМаршрутныйЛист КАК уатМаршрутныйЛист
	               |ГДЕ
	               |	ТИПЗНАЧЕНИЯ(уатМаршрутныйЛист.Водитель1) = ТИП(Справочник.Сотрудники)
	               |	И НЕ уатМаршрутныйЛист.Водитель1 = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	               |	И уатМаршрутныйЛист.Ссылка = &Предмет
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	уатМаршрутныйЛист.Водитель2.ФизическоеЛицо
	               |ИЗ
	               |	Документ.уатМаршрутныйЛист КАК уатМаршрутныйЛист
	               |ГДЕ
	               |	ТИПЗНАЧЕНИЯ(уатМаршрутныйЛист.Водитель2) = ТИП(Справочник.Сотрудники)
	               |	И НЕ уатМаршрутныйЛист.Водитель2 = ЗНАЧЕНИЕ(Справочник.Сотрудники.ПустаяСсылка)
	               |	И уатМаршрутныйЛист.Ссылка = &Предмет";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%ШаблонВыбрать%", ШаблонВыбрать);
	
	Если Объединить Тогда
		
		ТекстЗапроса = "
		| ОБЪЕДИНИТЬ ВСЕ
		|" + ТекстЗапроса;
		
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Конец СтандартныеПодсистемы.Взаимодействия

// СтандартныеПодсистемы.УправлениеДоступом

// Позволяет переопределить ограничение, указанное в модуле менеджера объекта метаданных.
//
// Параметры:
//  Ограничение - Структура:
//    * Текст                             - Строка - ограничение доступа для пользователей.
//                                          Если пустая строка, значит, доступ разрешен.
//    * ТекстДляВнешнихПользователей      - Строка - ограничение доступа для внешних пользователей.
//                                          Если пустая строка, значит, доступ запрещен.
//    * ПоВладельцуБезЗаписиКлючейДоступа - Неопределено - определить автоматически.
//                                        - Булево - если Ложь, то всегда записывать ключи доступа,
//                                          если Истина, тогда не записывать ключи доступа,
//                                          а использовать ключи доступа владельца (требуется,
//                                          чтобы ограничение было строго по объекту-владельцу).
//   * ПоВладельцуБезЗаписиКлючейДоступаДляВнешнихПользователей - Неопределено, Булево - также
//                                          как у параметра ПоВладельцуБезЗаписиКлючейДоступа.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Подразделение)";
	
	Ограничение.ТекстДляВнешнихПользователей = Ограничение.Текст;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// СтандартныеПодсистемы.ВариантыОтчетов

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВариантыОтчетов

// СтандартныеПодсистемы.ШаблоныСообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf",
//                           "png", "jpg", mxl" и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
	
	// Данные из Заказа на ТС из строки ТЧ Заказы
	НовРеквизитыГруппа = Реквизиты.Добавить();
	НовРеквизитыГруппа.Имя           = "уатМаршрутныйЛист.ДанныеЗаказаНаТС";
	НовРеквизитыГруппа.Представление = " Данные Заказа на ТС";
	
	НовРеквизит = НовРеквизитыГруппа.Строки.Добавить();
	НовРеквизит.Имя           = "уатМаршрутныйЛист.ДанныеЗаказаНаТС.Номер";
	НовРеквизит.Представление = "Номер Заказа";
	
	НовРеквизит = НовРеквизитыГруппа.Строки.Добавить();
	НовРеквизит.Имя           = "уатМаршрутныйЛист.ДанныеЗаказаНаТС.НомерРодительскогоЗаказа";
	НовРеквизит.Представление = "Номер родительского Заказа";
	
	НовРеквизит = НовРеквизитыГруппа.Строки.Добавить();
	НовРеквизит.Имя           = "уатМаршрутныйЛист.ДанныеЗаказаНаТС.Дата";
	НовРеквизит.Представление = "Дата";
	
	НовРеквизит = НовРеквизитыГруппа.Строки.Добавить();
	НовРеквизит.Имя           = "уатМаршрутныйЛист.ДанныеЗаказаНаТС.Контрагент";
	НовРеквизит.Представление = "Контрагент";
	
	НовРеквизит = НовРеквизитыГруппа.Строки.Добавить();
	НовРеквизит.Имя           = "уатМаршрутныйЛист.ДанныеЗаказаНаТС.ДоговорКонтрагента";
	НовРеквизит.Представление = "Договор контрагента";
	
	НовРеквизит = НовРеквизитыГруппа.Строки.Добавить();
	НовРеквизит.Имя           = "уатМаршрутныйЛист.ДанныеЗаказаНаТС.ВидПеревозки";
	НовРеквизит.Представление = "Вид перевозки";
	
	НовРеквизит = НовРеквизитыГруппа.Строки.Добавить();
	НовРеквизит.Имя           = "уатМаршрутныйЛист.ДанныеЗаказаНаТС.ВидДоставки";
	НовРеквизит.Представление = "Вид доставки";
	
	НовРеквизит = НовРеквизитыГруппа.Строки.Добавить();
	НовРеквизит.Имя           = "уатМаршрутныйЛист.ДанныеЗаказаНаТС.НаправлениеПеревозки";
	НовРеквизит.Представление = "Направление перевозки";
	
	НовРеквизит = НовРеквизитыГруппа.Строки.Добавить();
	НовРеквизит.Имя           = "уатМаршрутныйЛист.ДанныеЗаказаНаТС.Маршрут";
	НовРеквизит.Представление = "Маршрут";
	
	НовРеквизит = НовРеквизитыГруппа.Строки.Добавить();
	НовРеквизит.Имя           = "уатМаршрутныйЛист.ДанныеЗаказаНаТС.Грузоотправитель";
	НовРеквизит.Представление = "Грузоотправитель";
	
	НовРеквизит = НовРеквизитыГруппа.Строки.Добавить();
	НовРеквизит.Имя           = "уатМаршрутныйЛист.ДанныеЗаказаНаТС.Грузополучатель";
	НовРеквизит.Представление = "Грузополучатель";
	
	НовРеквизит = НовРеквизитыГруппа.Строки.Добавить();
	НовРеквизит.Имя           = "уатМаршрутныйЛист.ДанныеЗаказаНаТС.АдресОтправления";
	НовРеквизит.Представление = "Адрес отправления";
	
	НовРеквизит = НовРеквизитыГруппа.Строки.Добавить();
	НовРеквизит.Имя           = "уатМаршрутныйЛист.ДанныеЗаказаНаТС.АдресНазначения";
	НовРеквизит.Представление = "Адрес назначения";
	
	ГруппаНоменклатура = НовРеквизитыГруппа.Строки.Добавить();
	ГруппаНоменклатура.Имя           = "уатМаршрутныйЛист.ДанныеЗаказаНаТС.Груз";
	ГруппаНоменклатура.Представление = "Груз в маршрутном листе";
	
	НовРеквизит = ГруппаНоменклатура.Строки.Добавить();
	НовРеквизит.Имя           = "уатМаршрутныйЛист.ДанныеЗаказаНаТС.Груз.ВесЗаказа";
	НовРеквизит.Представление = "Вес заказа в маршрутном листе";
	
	НовРеквизит = ГруппаНоменклатура.Строки.Добавить();
	НовРеквизит.Имя           = "уатМаршрутныйЛист.ДанныеЗаказаНаТС.Груз.ОбъемЗаказа";
	НовРеквизит.Представление = "Объем заказа в маршрутном листе";
	
	НовРеквизит = ГруппаНоменклатура.Строки.Добавить();
	НовРеквизит.Имя           = "уатМаршрутныйЛист.ДанныеЗаказаНаТС.Груз.КоличествоМестЗаказа";
	НовРеквизит.Представление = "Количество мест заказа в маршрутном листе";
	
	НовРеквизит = ГруппаНоменклатура.Строки.Добавить();
	НовРеквизит.Имя           = "уатМаршрутныйЛист.ДанныеЗаказаНаТС.Груз.Номенклатура";
	НовРеквизит.Представление = "Список номенклатуры в маршрутном листе";
	
	// Данные строки ТЧ Заказы
	НовРеквизитыГруппа = Реквизиты.Добавить();
	НовРеквизитыГруппа.Имя           = "уатМаршрутныйЛист.ДанныеСтрокиТЧЗаказы";
	НовРеквизитыГруппа.Представление = " Данные строки ТЧ Маршрут";
	
	НовРеквизит = НовРеквизитыГруппа.Строки.Добавить();
	НовРеквизит.Имя           = "уатМаршрутныйЛист.ДанныеСтрокиТЧЗаказы.ПлановоеВремяПрибытия";
	НовРеквизит.Представление = "Плановое время прибытия";
	НовРеквизит = НовРеквизитыГруппа.Строки.Добавить();
	
	ИспользоватьОпоздания = ПолучитьФункциональнуюОпцию("уатПрогнозированиеОпозданийПоМаршрутнымЛистам");
	ДополнительныеПараметры.Вставить("ИспользоватьОпоздания", ИспользоватьОпоздания);
	Если ИспользоватьОпоздания Тогда
		НовРеквизит.Имя           = "уатМаршрутныйЛист.ДанныеСтрокиТЧЗаказы.ПрибытиеПрогноз";
		НовРеквизит.Представление = "Прогнозное время прибытия";
		НовРеквизит = НовРеквизитыГруппа.Строки.Добавить();
		НовРеквизит.Имя           = "уатМаршрутныйЛист.ДанныеСтрокиТЧЗаказы.ОпозданиеПрогноз";
		НовРеквизит.Представление = "Прогнозное опоздание";
		НовРеквизит = НовРеквизитыГруппа.Строки.Добавить();
	КонецЕсли;
	НовРеквизит.Имя           = "уатМаршрутныйЛист.ДанныеСтрокиТЧЗаказы.ПлановоеВремяУбытия";
	НовРеквизит.Представление = "Плановое время убытия";
	НовРеквизит = НовРеквизитыГруппа.Строки.Добавить();
	НовРеквизит.Имя           = "уатМаршрутныйЛист.ДанныеСтрокиТЧЗаказы.ФактическоеВремяПрибытия";
	НовРеквизит.Представление = "Фактическое время прибытия";
	НовРеквизит = НовРеквизитыГруппа.Строки.Добавить();
	НовРеквизит.Имя           = "уатМаршрутныйЛист.ДанныеСтрокиТЧЗаказы.ФактическоеВремяУбытия";
	НовРеквизит.Представление = "Фактическое время убытия";
	НовРеквизит = НовРеквизитыГруппа.Строки.Добавить();
	НовРеквизит.Имя           = "уатМаршрутныйЛист.ДанныеСтрокиТЧЗаказы.Пункт";
	НовРеквизит.Представление = "Пункт";
	НовРеквизит = НовРеквизитыГруппа.Строки.Добавить();
	НовРеквизит.Имя           = "уатМаршрутныйЛист.ДанныеСтрокиТЧЗаказы.ТипПункта";
	НовРеквизит.Представление = "Тип пункта";
	
	// Телефоны водителей
	Водитель1 = Реквизиты.Найти("уатМаршрутныйЛист.Водитель1");
	НовРеквизит = Водитель1.Строки.Добавить();
	НовРеквизит.Имя = "уатМаршрутныйЛист.Водитель1.Телефон";
	НовРеквизит.Представление = "Телефон";
	НовРеквизит = Водитель1.Строки.Добавить();
	НовРеквизит.Имя = "уатМаршрутныйЛист.Водитель1.ФИО";
	НовРеквизит.Представление = "ФИО";
	
	Водитель2 = Реквизиты.Найти("уатМаршрутныйЛист.Водитель2");
	НовРеквизит = Водитель2.Строки.Добавить();
	НовРеквизит.Имя = "уатМаршрутныйЛист.Водитель2.Телефон";
	НовРеквизит.Представление = "Телефон";
	НовРеквизит = Водитель2.Строки.Добавить();
	НовРеквизит.Имя = "уатМаршрутныйЛист.Водитель2.ФИО";
	НовРеквизит.Представление = "ФИО";
	
	// Удаление из списка вложений печатной формы "Реестр документов"
	НомСтроки = Вложения.Количество()-1;
	Пока НомСтроки >= 0 Цикл
	    Если Вложения[НомСтроки].Имя = "Реестр" И Вложения[НомСтроки].Статус = "ПечатнаяФорма" Тогда
	        Вложения.Удалить(НомСтроки);
	    КонецЕсли;
    	НомСтроки = НомСтроки - 1;
	КонецЦикла;
	
	НовРеквизитСД = Реквизиты.Добавить();
	НовРеквизитСД.Имя           = "уатМаршрутныйЛист.НеобработанныеДокументыПеревозчика";
	НовРеквизитСД.Представление = "Необработанные документы перевозчика (список)";
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов 
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(ПредметСообщения) Тогда
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры.Свойство("ПараметрыСообщения") Тогда
		ПараметрыСообщения = ДополнительныеПараметры.ПараметрыСообщения;
		Если НЕ ТипЗнч(ПараметрыСообщения) = Тип("Структура") Тогда
			ПараметрыСообщения = Новый Структура;
		КонецЕсли;
	Иначе
		ПараметрыСообщения = Новый Структура;
	КонецЕсли;
	
	ИспользоватьОпоздания = ДополнительныеПараметры.Свойство("ИспользоватьОпоздания") 
		И ДополнительныеПараметры.ИспользоватьОпоздания;
	
	ДанныеЗаказаНаТС = Новый Соответствие;
	ДанныеЗаказаНаТС.Вставить("Номер", "");
	ДанныеЗаказаНаТС.Вставить("Дата", "");
	ДанныеЗаказаНаТС.Вставить("Контрагент", "");
	ДанныеЗаказаНаТС.Вставить("ДоговорКонтрагента", "");
	ДанныеЗаказаНаТС.Вставить("ВидДоставки", "");
	ДанныеЗаказаНаТС.Вставить("ВидПеревозки", "");
	ДанныеЗаказаНаТС.Вставить("НаправлениеПеревозки", "");
	ДанныеЗаказаНаТС.Вставить("Маршрут", "");
	ДанныеЗаказаНаТС.Вставить("Грузоотправитель", "");
	ДанныеЗаказаНаТС.Вставить("Грузополучатель", "");
	ДанныеЗаказаНаТС.Вставить("АдресНазначения", "");
	ДанныеЗаказаНаТС.Вставить("АдресОтправления", "");
	ДанныеЗаказаНаТС.Вставить("НомерРодительскогоЗаказа", "");
	
	ДанныеЗаказаНаТСГруз = Новый Соответствие;
	ДанныеЗаказаНаТСГруз.Вставить("ВесЗаказа", "");
	ДанныеЗаказаНаТСГруз.Вставить("ОбъемЗаказа", "");
	ДанныеЗаказаНаТСГруз.Вставить("КоличествоМестЗаказа", "");
	ДанныеЗаказаНаТСГруз.Вставить("Номенклатура", "");
	
	ДанныеСтрокиТЧЗаказы = Новый Соответствие;
	ДанныеСтрокиТЧЗаказы.Вставить("ПлановоеВремяПрибытия", "");
	ДанныеСтрокиТЧЗаказы.Вставить("ПлановоеВремяУбытия", "");
	ДанныеСтрокиТЧЗаказы.Вставить("ФактическоеВремяПрибытия", "");
	ДанныеСтрокиТЧЗаказы.Вставить("ФактическоеВремяУбытия", "");
	ДанныеСтрокиТЧЗаказы.Вставить("Пункт", "");
	ДанныеСтрокиТЧЗаказы.Вставить("ТипПункта", "");
	Если ИспользоватьОпоздания Тогда
		ДанныеСтрокиТЧЗаказы.Вставить("ПрибытиеПрогноз", "");
		ДанныеСтрокиТЧЗаказы.Вставить("ОпозданиеПрогноз", "");
	КонецЕсли;
	
	// Телефоны водителей
	ДанныеВодителя1 = Новый Соответствие;
	ДанныеВодителя1.Вставить("Телефон", "");
	ДанныеВодителя1.Вставить("ФИО", "");
	ДанныеВодителя2 = Новый Соответствие;
	ДанныеВодителя2.Вставить("Телефон", "");
	ДанныеВодителя2.Вставить("ФИО", "");
	СтруктураВодители = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПредметСообщения, "Водитель1, Водитель2");
	ФизЛицоВодитель1 = Неопределено;
	ФизЛицоВодитель2 = Неопределено;
	Если ТипЗнч(СтруктураВодители.Водитель1) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ФизЛицоВодитель1 = СтруктураВодители.Водитель1;
	ИначеЕсли ТипЗнч(СтруктураВодители.Водитель1) = Тип("СправочникСсылка.Сотрудники") Тогда
		ФизЛицоВодитель1 = СтруктураВодители.Водитель1.ФизическоеЛицо;
	КонецЕсли;
	Если ТипЗнч(СтруктураВодители.Водитель2) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		ФизЛицоВодитель2 = СтруктураВодители.Водитель2;
	ИначеЕсли ТипЗнч(СтруктураВодители.Водитель2) = Тип("СправочникСсылка.Сотрудники") Тогда
		ФизЛицоВодитель2 = СтруктураВодители.Водитель2.ФизическоеЛицо;
	КонецЕсли;
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ФизическиеЛица.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА ФизическиеЛица.Ссылка = &Водитель1
	|			ТОГДА 1
	|		КОГДА ФизическиеЛица.Ссылка = &Водитель2
	|			ТОГДА 2
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК НомерВодителя,
	|	ФизическиеЛица.ФИО КАК ФИО
	|ПОМЕСТИТЬ втФизЛица
	|ИЗ
	|	Справочник.ФизическиеЛица КАК ФизическиеЛица
	|ГДЕ
	|	(ФизическиеЛица.Ссылка = &Водитель1
	|			ИЛИ ФизическиеЛица.Ссылка = &Водитель2)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ФизическиеЛицаКонтактнаяИнформация.Представление КАК Телефон,
	|	втФизЛица.НомерВодителя КАК НомерВодителя,
	|	втФизЛица.ФИО КАК ФИО
	|ИЗ
	|	втФизЛица КАК втФизЛица
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
	|		ПО втФизЛица.Ссылка = ФизическиеЛицаКонтактнаяИнформация.Ссылка
	|			И (ФизическиеЛицаКонтактнаяИнформация.Вид = &ВидКИ)");
	НастройкиВидовКИ = уатОбщегоНазначенияПовтИсп_проф.ПолучитьНастройкиВидовКонтактнойИнформации();
	Запрос.УстановитьПараметр("ВидКИ", НастройкиВидовКИ.видКонтактнойИнформацииТелефонФизическогоЛица);
	Запрос.УстановитьПараметр("Водитель1", ФизЛицоВодитель1);
	Запрос.УстановитьПараметр("Водитель2", ФизЛицоВодитель2);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.НомерВодителя = 1 Тогда
			ДанныеВодителя1.Вставить("Телефон", Выборка.Телефон);
			ДанныеВодителя1.Вставить("ФИО", Выборка.ФИО);
		ИначеЕсли Выборка.НомерВодителя = 2 Тогда
			ДанныеВодителя2.Вставить("Телефон", Выборка.Телефон);
			ДанныеВодителя2.Вставить("ФИО", Выборка.ФИО);
		КонецЕсли;
	КонецЦикла;
	
	Если ПараметрыСообщения.Свойство("ДополнительныйДокумент")
		И ЗначениеЗаполнено(ПараметрыСообщения.ДополнительныйДокумент)
		И ТипЗнч(ПараметрыСообщения.ДополнительныйДокумент) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") Тогда 
		
		СтруктураДанныеЗаказа = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ПараметрыСообщения.ДополнительныйДокумент,
			"Номер, Дата, Контрагент, ДоговорКонтрагента, ВидПеревозки, ВидДоставки, НаправлениеПеревозки, Маршрут, "
			+ "Грузоотправитель, Грузополучатель, АдресНазначения, АдресОтправления, РодительскийЗаказ");
		ДанныеЗаказаНаТС.Вставить("Номер", СтруктураДанныеЗаказа.Номер);
		ДанныеЗаказаНаТС.Вставить("Дата", СтруктураДанныеЗаказа.Дата);
		ДанныеЗаказаНаТС.Вставить("Контрагент", СтруктураДанныеЗаказа.Контрагент);
		ДанныеЗаказаНаТС.Вставить("ДоговорКонтрагента", СтруктураДанныеЗаказа.ВидПеревозки);
		ДанныеЗаказаНаТС.Вставить("ВидДоставки", СтруктураДанныеЗаказа.ВидДоставки);
		ДанныеЗаказаНаТС.Вставить("ВидПеревозки", СтруктураДанныеЗаказа.ВидПеревозки);
		ДанныеЗаказаНаТС.Вставить("НаправлениеПеревозки", СтруктураДанныеЗаказа.НаправлениеПеревозки);
		ДанныеЗаказаНаТС.Вставить("Маршрут", СтруктураДанныеЗаказа.Маршрут);
		ДанныеЗаказаНаТС.Вставить("Грузоотправитель", СтруктураДанныеЗаказа.Грузоотправитель);
		ДанныеЗаказаНаТС.Вставить("Грузополучатель", СтруктураДанныеЗаказа.Грузополучатель);
		ДанныеЗаказаНаТС.Вставить("АдресНазначения", СтруктураДанныеЗаказа.АдресНазначения);
		ДанныеЗаказаНаТС.Вставить("АдресОтправления", СтруктураДанныеЗаказа.АдресОтправления);
		НомерРодительскогоЗаказа = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураДанныеЗаказа.РодительскийЗаказ, "Номер");
		ДанныеЗаказаНаТС.Вставить("НомерРодительскогоЗаказа", НомерРодительскогоЗаказа);
		
		Запрос = Новый Запрос("ВЫБРАТЬ
		                      |	уатМаршрутныйЛистЗаказы.ВесБрутто КАК ВесБрутто,
		                      |	уатМаршрутныйЛистЗаказы.Объем КАК Объем,
		                      |	уатМаршрутныйЛистЗаказы.КоличествоМест КАК КоличествоМест,
		                      |	уатМаршрутныйЛистЗаказы.Номенклатура.Представление КАК НоменклатураПредставление,
		                      |	уатМаршрутныйЛистЗаказы.ЕдиницаИзмерения.Наименование КАК ЕдиницаИзмеренияНаименование,
		                      |	уатМаршрутныйЛистЗаказы.Количество КАК Количество
		                      |ИЗ
		                      |	Документ.уатМаршрутныйЛист.Заказы КАК уатМаршрутныйЛистЗаказы
		                      |ГДЕ
		                      |	уатМаршрутныйЛистЗаказы.Ссылка = &Ссылка
		                      |	И уатМаршрутныйЛистЗаказы.ТипТочкиМаршрута В(&ТипТочкиМаршрута)
		                      |	И уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя = &ЗаказГрузоотправителя");
		Запрос.УстановитьПараметр("Ссылка", ПредметСообщения); 
		
		ТипыТочкиМаршрута = Новый Массив(); 
		ТипыТочкиМаршрута.Добавить(Перечисления.уатТипыТочекМаршрута.Погрузка);
		ТипыТочкиМаршрута.Добавить(Перечисления.уатТипыТочекМаршрута.ДополнительнаяПогрузка);
		
		Запрос.УстановитьПараметр("ТипТочкиМаршрута", ТипыТочкиМаршрута);
		Запрос.УстановитьПараметр("ЗаказГрузоотправителя", ПараметрыСообщения.ДополнительныйДокумент);
		Выборка = Запрос.Выполнить().Выбрать();
		ВесБрутто = 0;
		Объем = 0;
		КоличествоМест = 0;
		СтрокаНоменклатуры = "";
		Пока Выборка.Следующий() Цикл 
			ВесБрутто = ВесБрутто + Выборка.ВесБрутто;
			Объем = Объем + Выборка.Объем;
			КоличествоМест = КоличествоМест + Выборка.КоличествоМест;
			Если ЗначениеЗаполнено(Выборка.НоменклатураПредставление) Тогда
				СтрокаНоменклатуры = СтрокаНоменклатуры + ?(СтрокаНоменклатуры = "", "", "; ")
					+ Выборка.НоменклатураПредставление + ", " + Выборка.Количество + " упак. ";
				Если ЗначениеЗаполнено(Выборка.ЕдиницаИзмеренияНаименование) Тогда
					СтрокаНоменклатуры = СтрокаНоменклатуры + "(" + Выборка.ЕдиницаИзмеренияНаименование + ")"; 
				КонецЕсли;
			КонецЕсли; 
		КонецЦикла;
		ДанныеЗаказаНаТСГруз.Вставить("ВесЗаказа", ВесБрутто);
		ДанныеЗаказаНаТСГруз.Вставить("ОбъемЗаказа", Объем);
		ДанныеЗаказаНаТСГруз.Вставить("КоличествоМестЗаказа", КоличествоМест);
		ДанныеЗаказаНаТСГруз.Вставить("Номенклатура", СтрокаНоменклатуры);
		
	КонецЕсли;
	
	Если ПараметрыСообщения.Свойство("GUIDСтрокиМЛ")
		И ЗначениеЗаполнено(ПараметрыСообщения.GUIDСтрокиМЛ) Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	уатМаршрутныйЛистЗаказы.ПрибытиеПлан КАК ПрибытиеПлан,
		|	уатМаршрутныйЛистЗаказы.ПрибытиеФакт КАК ПрибытиеФакт,
		|	уатМаршрутныйЛистЗаказы.УбытиеФакт КАК УбытиеФакт,
		|	уатМаршрутныйЛистЗаказы.Пункт КАК Пункт,
		|	уатМаршрутныйЛистЗаказы.Пункт.ТипПункта КАК ТипПункта,
		|	уатМаршрутныйЛистЗаказы.Номенклатура КАК Номенклатура,
		|	ЕСТЬNULL(уатТекущиеОпоздания.ПрибытиеПрогноз, """") КАК ПрибытиеПрогноз,
		|	ЕСТЬNULL(уатТекущиеОпоздания.ВремяОпоздания, """") КАК ОпозданиеПрогноз
		|ИЗ
		|	Документ.уатМаршрутныйЛист.Заказы КАК уатМаршрутныйЛистЗаказы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатТекущиеОпоздания КАК уатТекущиеОпоздания
		|		ПО уатМаршрутныйЛистЗаказы.Ссылка = уатТекущиеОпоздания.МаршрутныйЛист
		|			И уатМаршрутныйЛистЗаказы.GUIDСтроки = уатТекущиеОпоздания.GUIDСтрокиМЛ
		|ГДЕ
		|	уатМаршрутныйЛистЗаказы.Ссылка = &Ссылка
		|	И уатМаршрутныйЛистЗаказы.GUIDСтроки = &GUIDСтроки");
		Запрос.УстановитьПараметр("Ссылка", ПредметСообщения);
		Запрос.УстановитьПараметр("GUIDСтроки", ПараметрыСообщения.GUIDСтрокиМЛ);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ДанныеСтрокиТЧЗаказы.Вставить("ПлановоеВремяПрибытия", Выборка.ПрибытиеПлан);
			ДанныеСтрокиТЧЗаказы.Вставить("ФактическоеВремяПрибытия", ?(ЗначениеЗаполнено(Выборка.ПрибытиеФакт), Выборка.ПрибытиеФакт, "не заполнено"));
			ДанныеСтрокиТЧЗаказы.Вставить("ФактическоеВремяУбытия", ?(ЗначениеЗаполнено(Выборка.УбытиеФакт), Выборка.УбытиеФакт, "не заполнено"));
			Если ИспользоватьОпоздания И ЗначениеЗаполнено(Выборка.ОпозданиеПрогноз) Тогда
				ДанныеСтрокиТЧЗаказы.Вставить("ПрибытиеПрогноз", Выборка.ПрибытиеПрогноз);
				ДанныеСтрокиТЧЗаказы.Вставить("ОпозданиеПрогноз", Формат(Выборка.ОпозданиеПрогноз, "ЧДЦ=2; ЧРД=:"));
			ИначеЕсли ИспользоватьОпоздания Тогда
				ДанныеСтрокиТЧЗаказы.Вставить("ПрибытиеПрогноз", НСТР("ru='Опоздание не спрогнозировано';en='Lateness not predicted'"));
				ДанныеСтрокиТЧЗаказы.Вставить("ОпозданиеПрогноз", НСТР("ru='Опоздание не спрогнозировано';en='Lateness not predicted'"));
			КонецЕсли;
			ДанныеСтрокиТЧЗаказы.Вставить("Пункт", Выборка.Пункт);
			ДанныеСтрокиТЧЗаказы.Вставить("ТипПункта", Выборка.ТипПункта);
		КонецЕсли;
	КонецЕсли;
	Если ПараметрыСообщения.Свойство("УбытиеПлан")
		И ЗначениеЗаполнено(ПараметрыСообщения.УбытиеПлан) Тогда
		ДанныеСтрокиТЧЗаказы.Вставить("ПлановоеВремяУбытия", ПараметрыСообщения.УбытиеПлан);
	КонецЕсли;
	
	ДанныеЗаказаНаТС.Вставить("Груз", ДанныеЗаказаНаТСГруз);
	Сообщение.ЗначенияРеквизитов.Вставить("ДанныеЗаказаНаТС", ДанныеЗаказаНаТС);
	Сообщение.ЗначенияРеквизитов.Вставить("ДанныеСтрокиТЧЗаказы", ДанныеСтрокиТЧЗаказы);
	Сообщение.ЗначенияРеквизитов.Вставить("Водитель1", ДанныеВодителя1);
	Сообщение.ЗначенияРеквизитов.Вставить("Водитель2", ДанныеВодителя2);
	
	Сообщение.ЗначенияРеквизитов.Вставить("НеобработанныеДокументыПеревозчика", НеобработанныеДокументыПеревозчика(ПредметСообщения));
	
КонецПроцедуры

Функция НеобработанныеДокументыПеревозчика(МаршрутныйЛистСсылка)
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	уатСтатусыСопроводительныхДокументовСрезПоследних.СопроводительныйДокумент КАК СопроводительныйДокумент
	|ИЗ
	|	РегистрСведений.уатСтатусыСопроводительныхДокументов.СрезПоследних(
	|			,
	|			СопроводительныйДокумент.ВладелецДокумента = &Перевозчик
	|				И СопроводительныйДокумент.Основание = &МаршрутныйЛист) КАК уатСтатусыСопроводительныхДокументовСрезПоследних
	|ГДЕ
	|	уатСтатусыСопроводительныхДокументовСрезПоследних.Статус <> ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.ОбработкаЗавершена)");
	Запрос.УстановитьПараметр("Перевозчик", МаршрутныйЛистСсылка.Контрагент);
	Запрос.УстановитьПараметр("МаршрутныйЛист", МаршрутныйЛистСсылка);
	Выборка = Запрос.Выполнить().Выбрать();
	
	СтрокаСД = "";
	Пока Выборка.Следующий() Цикл
		СтрокаСД = СтрокаСД + Выборка.СопроводительныйДокумент + "; " + Символы.ПС;
	КонецЦикла;
	Если НЕ ПустаяСтрока(СтрокаСД) Тогда
		СтрокаСД = Лев(СтрокаСД, СтрДлина(СтрокаСД)-3);
	КонецЕсли;
	
	Возврат СтрокаСД;
КонецФункции
	
// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS.
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - СправочникСсылка - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма.
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ШаблоныСообщений

#КонецОбласти

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	уатОбменСГИСЭПД.ДобавитьКомандуЭТрНСоздатьНаОсновании(КомандыСозданияНаОсновании);

КонецПроцедуры

#КонецОбласти

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

// Получает дополнительные реквизиты для отображения в отчете "Реестр документов"
// 
// Возвращаемое значение:
//  Структура - доп. реквизитов
//
Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура("Информация", "АдресНазначения");
	Возврат Результат;
	
КонецФункции

// Функция определяет плановое время отправления по указанному маршрутному листу
//
// Параметры:
//  МаршрутныйЛист	 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция ПолучитьВремяОтправленияПлан(Знач МаршрутныйЛист) Экспорт
	
	Если МаршрутныйЛист.Заказы.Количество() = 0 Тогда
		Возврат МаршрутныйЛист.ДатаИВремяОтправленияПлан;
	КонецЕсли;
	
	ПунктОтправления = МаршрутныйЛист.Заказы[0];
	
	Если ЗначениеЗаполнено(ПунктОтправления.ПрибытиеПлан) И ПунктОтправления.ПрибытиеПлан > '19700101000000' Тогда 
		Возврат ПунктОтправления.ПрибытиеПлан;
		
	ИначеЕсли МаршрутныйЛист.ДатаИВремяОтправленияПлан > '19700101000000' Тогда
		Возврат МаршрутныйЛист.ДатаИВремяОтправленияПлан;
		
	Иначе
		Возврат '00010101';
	КонецЕсли;
	
КонецФункции // ПолучитьВремяОтправленияПлан()

// Функция определяет плановое время возвращения по указанному маршрутному листу
//
Функция ПолучитьВремяВозвратаПлан(Знач МаршрутныйЛист) Экспорт
	
	Возврат МаршрутныйЛист.ДатаИВремяВыполненияПлан;
	
КонецФункции // ПолучитьВремяВозвратаПлан()

Процедура ЗаполнитьТаблицуЗаказовПоЗаказуНаТС(МаршрутныйЛист, ЗаказНаТС) Экспорт
	
	Если (ЗначениеЗаполнено(МаршрутныйЛист.ЭтапМаршрутизации) И МаршрутныйЛист.ЭтапМаршрутизации.АлгоритмМаршрутизации = 3) Тогда
		ТипТС = Новый Массив;
	Иначе
		ТипТС = МаршрутныйЛист.ТС.ТипТС;
	КонецЕсли;
	
	Если ЗаказНаТС.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам Тогда
		Если ЗаказНаТС.FTL Тогда
			КоличествоПунктов = ЗаказНаТС.ПромежуточныеПункты.Количество();
			мсвОтрезкиПути = уатОбщегоНазначения_проф.ПолучитьНачальныеКонечныеПунктыГрузов(ЗаказНаТС.ОтрезкиПути, ЗаказНаТС.Товары.Количество(), КоличествоПунктов);
			Для Сч = 0 По КоличествоПунктов-1 Цикл 
				флПунктДобавлен = Ложь;
				флагПогрузка    = Ложь;
				флагРазгрузка   = Ложь;
				Если (ЗаказНаТС.ПромежуточныеПункты[Сч].ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка
					Или ЗаказНаТС.ПромежуточныеПункты[Сч].ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяПогрузка) Тогда 
					флагПогрузка = Истина;
				ИначеЕсли (ЗаказНаТС.ПромежуточныеПункты[Сч].ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка
					Или ЗаказНаТС.ПромежуточныеПункты[Сч].ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяРазгрузка) Тогда 
					флагРазгрузка = Истина;
				КонецЕсли;
				
				Для СчОтрезков = 0 По мсвОтрезкиПути.Количество()-1 Цикл
					ТекОтрезокПути = мсвОтрезкиПути[СчОтрезков];
					Если ТекОтрезокПути.От < 0 Или ТекОтрезокПути.До < 0 Тогда
						// Груз, которому не назначен отрезок пути
						Продолжить;
					КонецЕсли;
					
					Если (флагПогрузка И ТекОтрезокПути.От = Сч+1) 
						Или (флагРазгрузка И ТекОтрезокПути.До = Сч+1) Тогда
						ТекСтрока = ЗаказНаТС.Товары[СчОтрезков];
					Иначе
						// Текущий груз в данном пункте не погружен и не разгружен
						Продолжить;
					КонецЕсли;
					
					флПунктДобавлен = Истина;
					
					НовСтрока = МаршрутныйЛист.Заказы.Добавить();
					НовСтрока.ЗаказГрузоотправителя    = ЗаказНаТС;
					НовСтрока.Пункт                    = ЗаказНаТС.ПромежуточныеПункты[Сч].Пункт;
					НовСтрока.ТипТочкиМаршрута         = ЗаказНаТС.ПромежуточныеПункты[Сч].ТипТочкиМаршрута;
					НовСтрока.Стоянка                  = ЗаказНаТС.ПромежуточныеПункты[Сч].Стоянка;
					НовСтрока.СтоянкаИзПункта          = уатЗащищенныеФункцииСервер_уэ.ПолучитьВремяСтоянкиВПункте(НовСтрока.Пункт, ТипТС);
					НовСтрока.Номенклатура             = ТекСтрока.Номенклатура;
					НовСтрока.ЕдиницаИзмерения         = ТекСтрока.ЕдиницаИзмерения;
					НовСтрока.Количество               = ТекСтрока.Количество;
					НовСтрока.ЕдиницаИзмеренияПоЗаказу = ТекСтрока.ЕдиницаИзмерения;
					НовСтрока.ВесБрутто                = ТекСтрока.ВесБрутто;
					НовСтрока.Объем                    = ТекСтрока.Объем;
					НовСтрока.КоличествоМест           = ТекСтрока.КоличествоМест;
					НовСтрока.ПричинаЗакрытияЗаказа    = ТекСтрока.ПричинаЗакрытия;
					НовСтрока.Ожидание                 = ЗаказНаТС.ПромежуточныеПункты[Сч].Ожидание;
						
				КонецЦикла;
												
				Если Не флПунктДобавлен Тогда 
					
					НовСтрока = МаршрутныйЛист.Заказы.Добавить();
					НовСтрока.ЗаказГрузоотправителя = ЗаказНаТС;
					НовСтрока.Пункт                 = ЗаказНаТС.ПромежуточныеПункты[Сч].Пункт;
					НовСтрока.ТипТочкиМаршрута      = Перечисления.уатТипыТочекМаршрута.ПромежуточныйПункт;
					НовСтрока.Стоянка               = ЗаказНаТС.ПромежуточныеПункты[Сч].Стоянка;
					НовСтрока.СтоянкаИзПункта       = уатЗащищенныеФункцииСервер_уэ.ПолучитьВремяСтоянкиВПункте(НовСтрока.Пункт, ТипТС);
					НовСтрока.Ожидание              = ЗаказНаТС.ПромежуточныеПункты[Сч].Ожидание;
					
				КонецЕсли;
			КонецЦикла;
			
		Иначе 
			Для Каждого ТекСтрока Из ЗаказНаТС.Товары Цикл
				НовСтрока = МаршрутныйЛист.Заказы.Добавить();
				НовСтрока.ЗаказГрузоотправителя    = ЗаказНаТС;
				НовСтрока.Пункт                    = ЗаказНаТС.АдресОтправления;
				НовСтрока.ТипТочкиМаршрута         = Перечисления.уатТипыТочекМаршрута.Погрузка;
				НовСтрока.Номенклатура             = ТекСтрока.Номенклатура;
				НовСтрока.ЕдиницаИзмерения         = ТекСтрока.ЕдиницаИзмерения;
				НовСтрока.Количество               = ТекСтрока.Количество;
				НовСтрока.ЕдиницаИзмеренияПоЗаказу = ТекСтрока.ЕдиницаИзмерения;
				НовСтрока.ВесБрутто                = ТекСтрока.ВесБрутто;
				НовСтрока.Объем                    = ТекСтрока.Объем;
				НовСтрока.КоличествоМест           = ТекСтрока.КоличествоМест;
				НовСтрока.ПричинаЗакрытияЗаказа    = ТекСтрока.ПричинаЗакрытия;
				НовСтрока.Стоянка                  = ЗаказНаТС.СтоянкаПунктОтправления;
				НовСтрока.СтоянкаИзПункта          = уатЗащищенныеФункцииСервер_уэ.ПолучитьВремяСтоянкиВПункте(ЗаказНаТС.АдресОтправления, ТипТС);
				НовСтрока.ПрибытиеПлан             = ЗаказНаТС.ОтправлениеС;
			КонецЦикла;
			
			Для Каждого ТекСтрока Из ЗаказНаТС.Товары Цикл
				НовСтрока = МаршрутныйЛист.Заказы.Добавить();
				НовСтрока.ЗаказГрузоотправителя    = ЗаказНаТС;
				НовСтрока.Пункт                    = ЗаказНаТС.АдресНазначения;
				НовСтрока.ТипТочкиМаршрута         = Перечисления.уатТипыТочекМаршрута.Разгрузка;
				НовСтрока.Номенклатура             = ТекСтрока.Номенклатура;
				НовСтрока.ЕдиницаИзмерения         = ТекСтрока.ЕдиницаИзмерения;
				НовСтрока.Количество               = ТекСтрока.Количество;
				НовСтрока.ЕдиницаИзмеренияПоЗаказу = ТекСтрока.ЕдиницаИзмерения;
				НовСтрока.ВесБрутто                = ТекСтрока.ВесБрутто;
				НовСтрока.Объем                    = ТекСтрока.Объем;
				НовСтрока.КоличествоМест           = ТекСтрока.КоличествоМест;
				НовСтрока.ПричинаЗакрытияЗаказа    = ТекСтрока.Причиназакрытия;
				НовСтрока.Стоянка                  = ЗаказНаТС.СтоянкаПунктНазначения;
				НовСтрока.СтоянкаИзПункта          = уатЗащищенныеФункцииСервер_уэ.ПолучитьВремяСтоянкиВПункте(ЗаказНаТС.АдресНазначения, ТипТС);
				НовСтрока.ПрибытиеПлан             = ЗаказНаТС.ДоставкаС;
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли ЗаказНаТС.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам Тогда
		Если ЗаказНаТС.FTL Тогда
			КоличествоПунктов = ЗаказНаТС.ПромежуточныеПункты.Количество();
			мсвОтрезкиПути = уатОбщегоНазначения_проф.ПолучитьНачальныеКонечныеПунктыГрузов(ЗаказНаТС.ОтрезкиПути, ЗаказНаТС.ГрузовойСостав.Количество(), КоличествоПунктов);
			Для Сч = 0 По КоличествоПунктов-1 Цикл 
				флПунктДобавлен = Ложь;
				флагПогрузка    = Ложь;
				флагРазгрузка   = Ложь;
				Если (ЗаказНаТС.ПромежуточныеПункты[Сч].ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка
					Или ЗаказНаТС.ПромежуточныеПункты[Сч].ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяПогрузка) Тогда 
					флагПогрузка = Истина;
				ИначеЕсли (ЗаказНаТС.ПромежуточныеПункты[Сч].ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка
					Или ЗаказНаТС.ПромежуточныеПункты[Сч].ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяРазгрузка) Тогда 
					флагРазгрузка = Истина;
				КонецЕсли;
				
				Для СчОтрезков = 0 По мсвОтрезкиПути.Количество()-1 Цикл
					ТекОтрезокПути = мсвОтрезкиПути[СчОтрезков];
					Если ТекОтрезокПути.От < 0 Или ТекОтрезокПути.До < 0 Тогда
						// Груз, которому не назначен отрезок пути
						Продолжить;
					КонецЕсли;
					
					Если (флагПогрузка И ТекОтрезокПути.От = Сч+1) 
						Или (флагРазгрузка И ТекОтрезокПути.До = Сч+1) Тогда
						ТекСтрока = ЗаказНаТС.ГрузовойСостав[СчОтрезков];
					Иначе
						// Текущий груз в данном пункте не погружен и не разгружен
						Продолжить;
					КонецЕсли;
					
					флПунктДобавлен = Истина;
					
					НовСтрока = МаршрутныйЛист.Заказы.Добавить();
					НовСтрока.ЗаказГрузоотправителя    = ЗаказНаТС;
					НовСтрока.Пункт                    = ЗаказНаТС.ПромежуточныеПункты[Сч].Пункт;
					НовСтрока.ТипТочкиМаршрута         = ЗаказНаТС.ПромежуточныеПункты[Сч].ТипТочкиМаршрута;
					НовСтрока.Стоянка                  = ЗаказНаТС.ПромежуточныеПункты[Сч].Стоянка;
					НовСтрока.СтоянкаИзПункта          = уатЗащищенныеФункцииСервер_уэ.ПолучитьВремяСтоянкиВПункте(НовСтрока.Пункт, ТипТС);
					НовСтрока.Номенклатура             = ТекСтрока.ГрузовоеМесто;
					НовСтрока.ЕдиницаИзмерения         = ТекСтрока.ВидУпаковки;
					НовСтрока.Количество               = ТекСтрока.КоличествоМест;
					НовСтрока.ЕдиницаИзмеренияПоЗаказу = ТекСтрока.ВидУпаковки;
					НовСтрока.ВесБрутто                = ТекСтрока.ВесБрутто;
					НовСтрока.Объем                    = ТекСтрока.Объем;
					
					Если ТекСтрока.ГрузовоеМесто.Контейнер Тогда
						НовСтрока.КоличествоМест = ТекСтрока.КоличествоМест;
					Иначе
						НовСтрока.КоличествоМест = ?(ТекСтрока.ВидУпаковки.Коэффициент = 0, 0, ТекСтрока.КоличествоМест / ТекСтрока.ВидУпаковки.Коэффициент);
					КонецЕсли;
					НовСтрока.ПричинаЗакрытияЗаказа    = ТекСтрока.Причиназакрытия;
					НовСтрока.Ожидание                 = ЗаказНаТС.ПромежуточныеПункты[Сч].Ожидание;
					
				КонецЦикла;
				
				Если Не флПунктДобавлен Тогда 
					
					НовСтрока = МаршрутныйЛист.Заказы.Добавить();
					НовСтрока.ЗаказГрузоотправителя = ЗаказНаТС;
					НовСтрока.Пункт                 = ЗаказНаТС.ПромежуточныеПункты[Сч].Пункт;
					НовСтрока.ТипТочкиМаршрута      = Перечисления.уатТипыТочекМаршрута.ПромежуточныйПункт;
					НовСтрока.Стоянка               = ЗаказНаТС.ПромежуточныеПункты[Сч].Стоянка;
					НовСтрока.СтоянкаИзПункта       = уатЗащищенныеФункцииСервер_уэ.ПолучитьВремяСтоянкиВПункте(НовСтрока.Пункт, ТипТС);
					НовСтрока.Ожидание              = ЗаказНаТС.ПромежуточныеПункты[Сч].Ожидание;
					
				КонецЕсли;
			КонецЦикла;
			
		Иначе 
			Для Каждого ТекСтрока Из ЗаказНаТС.ГрузовойСостав Цикл
				НовСтрока = МаршрутныйЛист.Заказы.Добавить();
				НовСтрока.ЗаказГрузоотправителя    = ЗаказНаТС;
				НовСтрока.Пункт                    = ЗаказНаТС.АдресОтправления;
				НовСтрока.ТипТочкиМаршрута         = Перечисления.уатТипыТочекМаршрута.Погрузка;
				НовСтрока.Номенклатура             = ТекСтрока.ГрузовоеМесто;
				НовСтрока.ЕдиницаИзмерения         = ТекСтрока.ВидУпаковки;
				НовСтрока.Количество               = ТекСтрока.КоличествоМест;
				НовСтрока.ЕдиницаИзмеренияПоЗаказу = ТекСтрока.ВидУпаковки;
				НовСтрока.ВесБрутто                = ТекСтрока.ВесБрутто;
				НовСтрока.Объем                    = ТекСтрока.Объем;
				Если ТекСтрока.ГрузовоеМесто.Контейнер Тогда
					НовСтрока.КоличествоМест = ТекСтрока.КоличествоМест;
				Иначе
					НовСтрока.КоличествоМест = ?(ТекСтрока.ВидУпаковки.Коэффициент = 0, 0, ТекСтрока.КоличествоМест / ТекСтрока.ВидУпаковки.Коэффициент);
				КонецЕсли;
				НовСтрока.ПричинаЗакрытияЗаказа    = ТекСтрока.Причиназакрытия;
				НовСтрока.Стоянка                  = ЗаказНаТС.СтоянкаПунктОтправления;
				НовСтрока.СтоянкаИзПункта          = уатЗащищенныеФункцииСервер_уэ.ПолучитьВремяСтоянкиВПункте(ЗаказНаТС.АдресОтправления, ТипТС);
				НовСтрока.ПрибытиеПлан             = ЗаказНаТС.ОтправлениеС;
			КонецЦикла;
			
			Для Каждого ТекСтрока Из ЗаказНаТС.ГрузовойСостав Цикл
				НовСтрока = МаршрутныйЛист.Заказы.Добавить();
				НовСтрока.ЗаказГрузоотправителя    = ЗаказНаТС;
				НовСтрока.Пункт                    = ЗаказНаТС.АдресНазначения;
				НовСтрока.ТипТочкиМаршрута         = Перечисления.уатТипыТочекМаршрута.Разгрузка;
				НовСтрока.Номенклатура             = ТекСтрока.ГрузовоеМесто;
				НовСтрока.ЕдиницаИзмерения         = ТекСтрока.ВидУпаковки;
				НовСтрока.Количество               = ТекСтрока.КоличествоМест;
				НовСтрока.ЕдиницаИзмеренияПоЗаказу = ТекСтрока.ВидУпаковки;
				НовСтрока.ВесБрутто                = ТекСтрока.ВесБрутто;
				НовСтрока.Объем                    = ТекСтрока.Объем;
				Если ТекСтрока.ГрузовоеМесто.Контейнер Тогда
					НовСтрока.КоличествоМест = ТекСтрока.КоличествоМест;
				Иначе
					НовСтрока.КоличествоМест = ?(ТекСтрока.ВидУпаковки.Коэффициент = 0 , 0, ТекСтрока.КоличествоМест / ТекСтрока.ВидУпаковки.Коэффициент);
				КонецЕсли;
				НовСтрока.ПричинаЗакрытияЗаказа    = ТекСтрока.Причиназакрытия;
				НовСтрока.Стоянка                  = ЗаказНаТС.СтоянкаПунктНазначения;
				НовСтрока.СтоянкаИзПункта          = уатЗащищенныеФункцииСервер_уэ.ПолучитьВремяСтоянкиВПункте(ЗаказНаТС.АдресНазначения, ТипТС);
				НовСтрока.ПрибытиеПлан             = ЗаказНаТС.ДоставкаС;
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли ЗаказНаТС.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам Тогда
		
		ПустаяЕИ = Справочники.ЕдиницыИзмерения.ПустаяСсылка();
		
		Если ЗаказНаТС.FTL Тогда 
			Для Сч = 0 По ЗаказНаТС.ПромежуточныеПункты.Количество()-1 Цикл 
				НовСтрока = МаршрутныйЛист.Заказы.Добавить();
				НовСтрока.ЗаказГрузоотправителя    = ЗаказНаТС;
				НовСтрока.Пункт                    = ЗаказНаТС.ПромежуточныеПункты[Сч].Пункт;
				НовСтрока.ТипТочкиМаршрута         = ЗаказНаТС.ПромежуточныеПункты[Сч].ТипТочкиМаршрута;
				НовСтрока.Количество               = 1;
				НовСтрока.ЕдиницаИзмерения         = ПустаяЕИ;  
				НовСтрока.ЕдиницаИзмеренияПоЗаказу = ПустаяЕИ;
				НовСтрока.ВесБрутто                = ЗаказНаТС.ВесБрутто;
				НовСтрока.Объем                    = ЗаказНаТС.Объем;
				НовСтрока.КоличествоМест           = ЗаказНаТС.КоличествоМест;
				НовСтрока.Стоянка                  = ЗаказНаТС.ПромежуточныеПункты[Сч].Стоянка;
				НовСтрока.СтоянкаИзПункта          = уатЗащищенныеФункцииСервер_уэ.ПолучитьВремяСтоянкиВПункте(НовСтрока.Пункт, ТипТС);
				
				Если ЗаказНаТС.ПромежуточныеПункты[Сч].Ожидание > 0 И НовСтрока.Ожидание = 0 Тогда 
					НовСтрока.Ожидание = ЗаказНаТС.ПромежуточныеПункты[Сч].Ожидание;
				КонецЕсли;
			КонецЦикла;
			
		Иначе 
			НовСтрока = МаршрутныйЛист.Заказы.Добавить();
			НовСтрока.ЗаказГрузоотправителя    = ЗаказНаТС;
			НовСтрока.Пункт                    = ЗаказНаТС.АдресОтправления;
			НовСтрока.ТипТочкиМаршрута         = Перечисления.уатТипыТочекМаршрута.Погрузка;
			НовСтрока.Количество               = 1;
			НовСтрока.ЕдиницаИзмерения         = ПустаяЕИ;  
			НовСтрока.ЕдиницаИзмеренияПоЗаказу = ПустаяЕИ;
			НовСтрока.ВесБрутто                = ЗаказНаТС.ВесБрутто;
			НовСтрока.Объем                    = ЗаказНаТС.Объем;
			НовСтрока.КоличествоМест           = ЗаказНаТС.КоличествоМест;
			НовСтрока.Стоянка                  = ЗаказНаТС.СтоянкаПунктОтправления;
			НовСтрока.СтоянкаИзПункта          = уатЗащищенныеФункцииСервер_уэ.ПолучитьВремяСтоянкиВПункте(ЗаказНаТС.АдресОтправления, ТипТС);
			НовСтрока.ПрибытиеПлан             = ЗаказНаТС.ОтправлениеС;
			
			НовСтрока = МаршрутныйЛист.Заказы.Добавить();
			НовСтрока.ЗаказГрузоотправителя    = ЗаказНаТС;
			НовСтрока.Пункт                    = ЗаказНаТС.АдресНазначения;
			НовСтрока.ТипТочкиМаршрута         = Перечисления.уатТипыТочекМаршрута.Разгрузка;
			НовСтрока.Количество               = 1;
			НовСтрока.ЕдиницаИзмерения         = ПустаяЕИ;  
			НовСтрока.ЕдиницаИзмеренияПоЗаказу = ПустаяЕИ;
			НовСтрока.ВесБрутто                = ЗаказНаТС.ВесБрутто;
			НовСтрока.Объем                    = ЗаказНаТС.Объем;
			НовСтрока.КоличествоМест           = ЗаказНаТС.КоличествоМест;
			НовСтрока.Стоянка                  = ЗаказНаТС.СтоянкаПунктНазначения;
			НовСтрока.СтоянкаИзПункта          = уатЗащищенныеФункцииСервер_уэ.ПолучитьВремяСтоянкиВПункте(ЗаказНаТС.АдресНазначения, ТипТС);
			НовСтрока.ПрибытиеПлан             = ЗаказНаТС.ДоставкаС;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьПлановыеФактическиеДатыПосещенияПунктов(МаршрутныйЛист) Экспорт
	
	ТаблицаПунктов = Новый ТаблицаЗначений();
	ТаблицаПунктов.Колонки.Добавить("Пункт",        Новый ОписаниеТипов("СправочникСсылка.уатПунктыНазначения, Строка"));
	ТаблицаПунктов.Колонки.Добавить("ПрибытиеПлан", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаПунктов.Колонки.Добавить("УбытиеПлан",   Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаПунктов.Колонки.Добавить("ПрибытиеФакт", Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаПунктов.Колонки.Добавить("УбытиеФакт",   Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаПунктов.Колонки.Добавить("Выполнен",     Новый ОписаниеТипов("Булево"));
	ТаблицаПунктов.Колонки.Добавить("Заказы",       Новый ОписаниеТипов("Массив"));
	ТаблицаПунктов.Колонки.Добавить("НомерЭтапа",   Новый ОписаниеТипов("Число"));
	
	ДеревоЗаказов = Новый ДеревоЗначений();
	ДеревоЗаказов.Колонки.Добавить("ПунктЗаказНоменклатура", Новый ОписаниеТипов("ДокументСсылка.уатЗаказГрузоотправителя, СправочникСсылка.уатПунктыНазначения, Строка"));
	ДеревоЗаказов.Колонки.Добавить("ПрибытиеПлан",           Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ДеревоЗаказов.Колонки.Добавить("УбытиеПлан",             Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ДеревоЗаказов.Колонки.Добавить("ПрибытиеФакт",           Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ДеревоЗаказов.Колонки.Добавить("УбытиеФакт",             Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ДеревоЗаказов.Колонки.Добавить("Время",                  Новый ОписаниеТипов("Число"));
	ДеревоЗаказов.Колонки.Добавить("Стоянка",                Новый ОписаниеТипов("Число"));
	ДеревоЗаказов.Колонки.Добавить("СтоянкаИзПункта",        Новый ОписаниеТипов("Число"));
	ДеревоЗаказов.Колонки.Добавить("Выполнен",               Новый ОписаниеТипов("Булево"));
	ДеревоЗаказов.Колонки.Добавить("ТипТочкиМаршрута",       Новый ОписаниеТипов("ПеречислениеСсылка.уатТипыТочекМаршрута"));
	ДеревоЗаказов.Колонки.Добавить("НомерЭтапа",             Новый ОписаниеТипов("Число"));
	ДеревоЗаказов.Колонки.Добавить("Количество",             Новый ОписаниеТипов("Число"));
	ДеревоЗаказов.Колонки.Добавить("ВесБрутто",              Новый ОписаниеТипов("Число"));
	ДеревоЗаказов.Колонки.Добавить("Объем",                  Новый ОписаниеТипов("Число"));
	ДеревоЗаказов.Колонки.Добавить("КоличествоМест",         Новый ОписаниеТипов("Число"));
	ДеревоЗаказов.Колонки.Добавить("Ожидание",               Новый ОписаниеТипов("Число"));
	ДеревоЗаказов.Колонки.Добавить("ИспользоватьУбытиеПлан", Новый ОписаниеТипов("Булево"));
	
	СменилсяПункт = Ложь;
	ПредЗаказ     = Неопределено;
	ПредСтрока    = Неопределено;
	ПредПункт     = Ложь;
	Для Каждого ТекСтрока Из МаршрутныйЛист.Заказы Цикл
		// Пункт.
		Если ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка
			ИЛИ ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяПогрузка Тогда
			ТекПункт = ?(ЗначениеЗаполнено(ТекСтрока.Пункт), ТекСтрока.Пункт, ТекСтрока.ЗаказГрузоотправителя.АдресОтправления);
		ИначеЕсли ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка
			ИЛИ ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяРазгрузка Тогда
			ТекПункт = ?(ЗначениеЗаполнено(ТекСтрока.Пункт), ТекСтрока.Пункт, ТекСтрока.ЗаказГрузоотправителя.АдресНазначения);
		Иначе
			ТекПункт = ТекСтрока.Пункт;
		КонецЕсли;
		
		Если ТекСтрока.ЗаказГрузоотправителя.Пустая()
			ИЛИ ТекСтрока.ТипТочкиМаршрута.Пустая() Тогда
			НовСтрокаПункт = ДеревоЗаказов.Строки.Добавить();
			НовСтрокаПункт.ПунктЗаказНоменклатура = ТекПункт;
			НовСтрокаПункт.Время                  = ТекСтрока.Время;
			НовСтрокаПункт.ПрибытиеПлан           = ТекСтрока.ПрибытиеПлан;
			НовСтрокаПункт.ПрибытиеФакт           = ТекСтрока.ПрибытиеФакт;
			НовСтрокаПункт.УбытиеФакт             = ТекСтрока.УбытиеФакт;
			НовСтрокаПункт.Выполнен               = ТекСтрока.Выполнен;
			НовСтрокаПункт.ТипТочкиМаршрута       = ТекСтрока.ТипТочкиМаршрута;
			НовСтрокаПункт.Количество             = ТекСтрока.Количество;
			НовСтрокаПункт.ВесБрутто              = ТекСтрока.ВесБрутто;
			НовСтрокаПункт.Объем                  = ТекСтрока.Объем;
			НовСтрокаПункт.КоличествоМест         = ТекСтрока.КоличествоМест;
			НовСтрокаПункт.Ожидание               = ТекСтрока.Ожидание;
			НовСтрокаПункт.Стоянка                = ТекСтрока.Стоянка;
			НовСтрокаПункт.СтоянкаИзПункта        = ТекСтрока.СтоянкаИзПункта;
			
			ПредПункт     = ТекПункт;
			СменилсяПункт = Истина;
			
			Если ЗначениеЗаполнено(ТекСтрока.УбытиеПлан) Тогда
				НовСтрокаПункт.УбытиеПлан = ТекСтрока.УбытиеПлан;
				НовСтрокаПункт.ИспользоватьУбытиеПлан = Истина;
			ИначеЕсли ДеревоЗаказов.Строки.Индекс(НовСтрокаПункт) = 0 Тогда
				НовСтрокаПункт.УбытиеПлан = МаршрутныйЛист.ДатаИВремяОтправленияПлан;
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
		
		Если ТекПункт <> ПредПункт Или СменилсяПункт Тогда
			НовСтрокаПункт = ДеревоЗаказов.Строки.Добавить();
			НовСтрокаПункт.ПунктЗаказНоменклатура = ТекПункт;
			НовСтрокаПункт.Время                  = ТекСтрока.Время;
			новСтрокаПункт.ПрибытиеПлан           = ТекСтрока.ПрибытиеПлан;
			НовСтрокаПункт.ПрибытиеФакт           = ТекСтрока.ПрибытиеФакт;
			НовСтрокаПункт.УбытиеФакт             = ТекСтрока.УбытиеФакт;
			НовСтрокаПункт.Выполнен               = ТекСтрока.Выполнен;
			НовСтрокаПункт.Ожидание               = ТекСтрока.Ожидание;
			НовСтрокаПункт.СтоянкаИзПункта        = ТекСтрока.СтоянкаИзПункта;
			
			ПредПункт     = ТекПункт;
			СменилсяПункт = Истина;
			
			Если ЗначениеЗаполнено(ТекСтрока.УбытиеПлан) Тогда
				НовСтрокаПункт.УбытиеПлан = ТекСтрока.УбытиеПлан;
				НовСтрокаПункт.ИспользоватьУбытиеПлан = Истина;
			ИначеЕсли ДеревоЗаказов.Строки.Индекс(НовСтрокаПункт) = 0 Тогда
				НовСтрокаПункт.УбытиеПлан = МаршрутныйЛист.ДатаИВремяОтправленияПлан;
			КонецЕсли;

		КонецЕсли;
		
		//Заказ
		Если НЕ ТекСтрока.ЗаказГрузоотправителя = ПредЗаказ 
			ИЛИ (НЕ ПредСтрока = Неопределено И НЕ ТекСтрока.ТипТочкиМаршрута = ПредСтрока.ТипТочкиМаршрута) 
			ИЛИ СменилсяПункт Тогда
			НовСтрокаЗаказ = НовСтрокаПункт.Строки.Добавить();
			НовСтрокаЗаказ.ПунктЗаказНоменклатура = ТекСтрока.ЗаказГрузоотправителя;
			НовСтрокаЗаказ.Стоянка                = ТекСтрока.Стоянка;
			НовСтрокаЗаказ.СтоянкаИзПункта        = ТекСтрока.СтоянкаИзПункта;
			НовСтрокаЗаказ.ТипТочкиМаршрута       = ТекСтрока.ТипТочкиМаршрута;
		
			ПредЗаказ     = ТекСтрока.ЗаказГрузоотправителя;
			СменилсяПункт = Ложь;
		КонецЕсли;
		
		НовСтрокаЗаказ.Количество     = НовСтрокаЗаказ.Количество + ТекСтрока.Количество;
		НовСтрокаЗаказ.ВесБрутто      = НовСтрокаЗаказ.ВесБрутто + ТекСтрока.ВесБрутто;
		НовСтрокаЗаказ.Объем          = НовСтрокаЗаказ.Объем + ТекСтрока.Объем;
		НовСтрокаЗаказ.КоличествоМест = НовСтрокаЗаказ.КоличествоМест + ТекСтрока.КоличествоМест;
		
		ПредСтрока = ТекСтрока;
	КонецЦикла;
	
	ПредКоличество     = 0;
	ПредВесБрутто      = 0;
	ПредОбъем          = 0;
	ПредКоличествоМест = 0;
	ТекНомерЭтапа      = 0;
	
	Для Каждого ТекСтрокаПункт Из ДеревоЗаказов.Строки Цикл
		Если ТекСтрокаПункт.Строки.Количество() = 0 Тогда 
			Если ТекСтрокаПункт.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка
				ИЛИ ТекСтрокаПункт.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяРазгрузка Тогда 
				ПредКоличество     = ПредКоличество - ТекСтрокаПункт.Количество;
				ПредВесБрутто      = ПредВесБрутто - ТекСтрокаПункт.ВесБрутто;
				ПредОбъем          = ПредОбъем - ТекСтрокаПункт.Объем;
				ПредКоличествоМест = ПредКоличествоМест - ТекСтрокаПункт.КоличествоМест;
			КонецЕсли;
			
			Если ПредКоличество = 0 И ПредВесБрутто = 0 И ПредОбъем = 0 И ПредКоличествоМест = 0 Тогда 
				ТекНомерЭтапа = ТекНомерЭтапа + 1;
			КонецЕсли;
			ТекСтрокаПункт.НомерЭтапа = ТекНомерЭтапа;
			
			Если ТекСтрокаПункт.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка
				ИЛИ ТекСтрокаПункт.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяПогрузка Тогда 
				ПредКоличество     = ПредКоличество + ТекСтрокаПункт.Количество;
				ПредВесБрутто      = ПредВесБрутто + ТекСтрокаПункт.ВесБрутто;
				ПредОбъем          = ПредОбъем + ТекСтрокаПункт.Объем;
				ПредКоличествоМест = ПредКоличествоМест + ТекСтрокаПункт.КоличествоМест;
			КонецЕсли;
			
		Иначе 
			Для Каждого ТекСтрокаЗаказ Из ТекСтрокаПункт.Строки Цикл 
				Если ТекСтрокаЗаказ.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка
					ИЛИ ТекСтрокаЗаказ.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяРазгрузка Тогда 
					ПредКоличество     = ПредКоличество - ТекСтрокаЗаказ.Количество;
					ПредВесБрутто      = ПредВесБрутто - ТекСтрокаЗаказ.ВесБрутто;
					ПредОбъем          = ПредОбъем - ТекСтрокаЗаказ.Объем;
					ПредКоличествоМест = ПредКоличествоМест - ТекСтрокаЗаказ.КоличествоМест;
				КонецЕсли;
			КонецЦикла;
			
			Если ПредКоличество = 0 И ПредВесБрутто = 0 И ПредОбъем = 0 И ПредКоличествоМест = 0 Тогда 
				ТекНомерЭтапа = ТекНомерЭтапа + 1;
			КонецЕсли;
			ТекСтрокаПункт.НомерЭтапа = ТекНомерЭтапа;
			
			Для Каждого ТекСтрокаЗаказ Из ТекСтрокаПункт.Строки Цикл 
				Если ТекСтрокаЗаказ.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка
					ИЛИ ТекСтрокаЗаказ.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяПогрузка Тогда 
					ПредКоличество     = ПредКоличество + ТекСтрокаЗаказ.Количество;
					ПредВесБрутто      = ПредВесБрутто + ТекСтрокаЗаказ.ВесБрутто;
					ПредОбъем          = ПредОбъем + ТекСтрокаЗаказ.Объем;
					ПредКоличествоМест = ПредКоличествоМест + ТекСтрокаЗаказ.КоличествоМест;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ПредВремяОтпр     = Неопределено;
	ПредПунктСтрока   = Неопределено;
	ОбщееВремяСтоянок = 0;
	
	Для Каждого ТекСтрокаПункт Из ДеревоЗаказов.Строки Цикл
		Если ТекСтрокаПункт.ИспользоватьУбытиеПлан Тогда
			Продолжить;
		КонецЕсли;
		
		СуммарноеВремяСтоянки = 0;
		
		Для Каждого ТекСтрокаЗаказ Из ТекСтрокаПункт.Строки Цикл 
			СуммарноеВремяСтоянки = уатЗащищенныеФункцииСервер.СложитьВремя(СуммарноеВремяСтоянки, ТекСтрокаЗаказ.Стоянка);
		КонецЦикла;
		
		СуммарноеВремяСтоянки = уатЗащищенныеФункцииСервер.СложитьВремя(СуммарноеВремяСтоянки, ТекСтрокаПункт.СтоянкаИзПункта);
		
		ТекСтрокаПункт.Стоянка = СуммарноеВремяСтоянки;
		ОбщееВремяСтоянок      = уатЗащищенныеФункцииСервер.СложитьВремя(ОбщееВремяСтоянок, ТекСтрокаПункт.Стоянка);
		
		Если ДеревоЗаказов.Строки.Индекс(ТекСтрокаПункт) = 0
			ИЛИ ПредПунктСтрока = Неопределено Тогда
			ТекСтрокаПункт.ПрибытиеПлан = уатЗащищенныеФункцииСервер.СложитьВремя(МаршрутныйЛист.ДатаИВремяОтправленияПлан, -СуммарноеВремяСтоянки);
			ТекСтрокаПункт.УбытиеПлан   = МаршрутныйЛист.ДатаИВремяОтправленияПлан;
			ПредВремяОтпр               = ТекСтрокаПункт.УбытиеПлан;
		Иначе
			ТекПрибытиеПлан             = уатЗащищенныеФункцииСервер.СложитьВремя(ПредВремяОтпр, ПредПунктСтрока.Время);
			ТекСтрокаПункт.ПрибытиеПлан = уатЗащищенныеФункцииСервер.СложитьВремя(ТекПрибытиеПлан, ТекСтрокаПункт.Ожидание);
			ТекСтрокаПункт.УбытиеПлан   = уатЗащищенныеФункцииСервер.СложитьВремя(ТекСтрокаПункт.ПрибытиеПлан, СуммарноеВремяСтоянки);
			ПредВремяОтпр               = ТекСтрокаПункт.УбытиеПлан;
		КонецЕсли;
		
		ПредПунктСтрока = ТекСтрокаПункт;
	КонецЦикла;
	
	Для Каждого ТекПункт Из ДеревоЗаказов.Строки Цикл 
		НовСтрока = ТаблицаПунктов.Добавить();
		НовСтрока.Пункт        = ТекПункт.ПунктЗаказНоменклатура;
		НовСтрока.ПрибытиеПлан = ТекПункт.ПрибытиеПлан;
		НовСтрока.УбытиеПлан   = ТекПункт.УбытиеПлан;
		НовСтрока.ПрибытиеФакт = ТекПункт.ПрибытиеФакт;
		НовСтрока.УбытиеФакт   = ТекПункт.УбытиеФакт;
		НовСтрока.Выполнен     = ТекПункт.Выполнен;
		НовСтрока.НомерЭтапа   = ТекПункт.НомерЭтапа;
		
		Для Каждого ТекЗаказ Из ТекПункт.Строки Цикл 
			Если ЗначениеЗаполнено(ТекЗаказ.ПунктЗаказНоменклатура) И ЗначениеЗаполнено(ТекЗаказ.ТипТочкиМаршрута) Тогда 
				Если ТекЗаказ.ПунктЗаказНоменклатура.FTL Тогда 
					ДанныеЗаказа = Новый Структура();
					ДанныеЗаказа.Вставить("Операция",  ТекЗаказ.ТипТочкиМаршрута);
					ДанныеЗаказа.Вставить("Этап",      ТекЗаказ.ПунктЗаказНоменклатура);
					ДанныеЗаказа.Вставить("Номер",     ТекЗаказ.ПунктЗаказНоменклатура.Номер);
					ДанныеЗаказа.Вставить("Количество",ТекЗаказ.Количество);
					ДанныеЗаказа.Вставить("ВесБрутто", ТекЗаказ.ВесБрутто);
					ДанныеЗаказа.Вставить("Объем",     ТекЗаказ.Объем);
					ДанныеЗаказа.Вставить("КоличествоМест", ТекЗаказ.КоличествоМест); 
					ДанныеЗаказа.Вставить("ОкноС",          Дата(1,1,1));
 					ДанныеЗаказа.Вставить("ОкноПо",         Дата(1,1,1));
					Для Каждого ТекПунктFTL Из ТекЗаказ.ПунктЗаказНоменклатура.ПромежуточныеПункты Цикл
						Если НовСтрока.Пункт = ТекПунктFTL.Пункт
							И ТекЗаказ.ТипТочкиМаршрута = ТекПунктFTL.ТипТочкиМаршрута Тогда
							ДанныеЗаказа.ОкноС  = ТекПунктFTL.ОкноС;
							ДанныеЗаказа.ОкноПо = ТекПунктFTL.ОкноПо;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					НовСтрока.Заказы.Добавить(ДанныеЗаказа);
				ИначеЕсли ТекЗаказ.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка
					ИЛИ ТекЗаказ.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяПогрузка Тогда 
					ДанныеЗаказа = Новый Структура();
					ДанныеЗаказа.Вставить("Операция",       ТекЗаказ.ТипТочкиМаршрута);
					ДанныеЗаказа.Вставить("Этап",           ТекЗаказ.ПунктЗаказНоменклатура);
					ДанныеЗаказа.Вставить("Номер",          ТекЗаказ.ПунктЗаказНоменклатура.Номер);
					ДанныеЗаказа.Вставить("ОкноС",          ТекЗаказ.ПунктЗаказНоменклатура.ОтправлениеС);
 					ДанныеЗаказа.Вставить("ОкноПо",         ТекЗаказ.ПунктЗаказНоменклатура.ОтправлениеПо);
					ДанныеЗаказа.Вставить("Количество",     ТекЗаказ.Количество);
					ДанныеЗаказа.Вставить("ВесБрутто",      ТекЗаказ.ВесБрутто);
					ДанныеЗаказа.Вставить("Объем",          ТекЗаказ.Объем);
					ДанныеЗаказа.Вставить("КоличествоМест", ТекЗаказ.КоличествоМест);
					
					НовСтрока.Заказы.Добавить(ДанныеЗаказа);
					
				ИначеЕсли ТекЗаказ.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка
					ИЛИ ТекЗаказ.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяРазгрузка Тогда 
					ДанныеЗаказа = Новый Структура();
					ДанныеЗаказа.Вставить("Операция",       ТекЗаказ.ТипТочкиМаршрута);
					ДанныеЗаказа.Вставить("Этап",           ТекЗаказ.ПунктЗаказНоменклатура);
					ДанныеЗаказа.Вставить("Номер",          ТекЗаказ.ПунктЗаказНоменклатура.Номер);
					ДанныеЗаказа.Вставить("ОкноС",          ТекЗаказ.ПунктЗаказНоменклатура.ДоставкаС);
					ДанныеЗаказа.Вставить("ОкноПо",         ТекЗаказ.ПунктЗаказНоменклатура.ДоставкаПо);
					ДанныеЗаказа.Вставить("Количество",     ТекЗаказ.Количество);
					ДанныеЗаказа.Вставить("ВесБрутто",      ТекЗаказ.ВесБрутто);
					ДанныеЗаказа.Вставить("Объем",          ТекЗаказ.Объем);
					ДанныеЗаказа.Вставить("КоличествоМест", ТекЗаказ.КоличествоМест);
					
					НовСтрока.Заказы.Добавить(ДанныеЗаказа);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТаблицаПунктов;
	
КонецФункции // ПолучитьПлановыеФактическиеДатыПосещенияПунктов()

// Функция пересчитывает плановое время, в частности, вычисляет плановое время убытия.
// Эта функция - копия функции ПересчитатьПлановоеВремя в форме документа.
Процедура ПересчитатьПлановоеВремя(Заказы, ДатаИВремяОтправленияПлан, ПересчетВремени) Экспорт
	
	ПредПрибытиеПлан             = Неопределено;
	ПредУбытиеПлан               = Неопределено;
	ПредВремя                    = Неопределено;
	ПредПункт                    = Неопределено;
	ПредЗаказАнализ              = Неопределено;
	ПредПунктАнализ              = Неопределено;
	мсвСтрокиОбработка           = Новый Массив();
	ОбщееВремяСтоянкиВПунктеВСек = 0;
	флЕстьПерваяСтрока           = Ложь;
	
	Для Каждого ТекСтрока Из Заказы Цикл 
		Если Не ТекСтрока.Пункт = ПредПункт Тогда 
			Для Сч = 1 По мсвСтрокиОбработка.Количество() Цикл 
				СтрокаПункта = мсвСтрокиОбработка.Получить(Сч-1);
				Если Сч = 1 И флЕстьПерваяСтрока Тогда 
					СтрокаПункта.УбытиеПлан   = ДатаИВремяОтправленияПлан;
					СтрокаПункта.ПрибытиеПлан = СтрокаПункта.УбытиеПлан - ОбщееВремяСтоянкиВПунктеВСек;
					
					ПредПрибытиеПлан = СтрокаПункта.ПрибытиеПлан;
					ПредУбытиеПлан   = СтрокаПункта.УбытиеПлан;
					ПредВремя        = СтрокаПункта.Время;
					
				ИначеЕсли Сч = 1 И Не флЕстьПерваяСтрока Тогда
					ТекПрибытиеПлан = ПредУбытиеПлан + ((ПредВремя - Цел(ПредВремя))*6000 + Цел(ПредВремя)*3600);
					
					Если ПересчетВремени = 1 Тогда 
						РазницаВремени = СтрокаПункта.ПрибытиеПлан - ТекПрибытиеПлан;
						РазницаЧас = Цел(РазницаВремени/3600);
						РазницаМин = Цел((РазницаВремени - РазницаЧас*3600) / 60);
						РазницаВремени = РазницаЧас + РазницаМин/100;
						
						СтрокаПункта.Ожидание = РазницаВремени;
					Иначе 
						СтрокаПункта.ПрибытиеПлан = уатЗащищенныеФункцииСервер.СложитьВремя(ТекПрибытиеПлан, СтрокаПункта.Ожидание);
					КонецЕсли;
					
					СтрокаПункта.УбытиеПлан = СтрокаПункта.ПрибытиеПлан + ОбщееВремяСтоянкиВПунктеВСек;
					
					ПредПрибытиеПлан = СтрокаПункта.ПрибытиеПлан;
					ПредУбытиеПлан   = СтрокаПункта.УбытиеПлан;
					ПредВремя        = СтрокаПункта.Время;
					
				Иначе 
					СтрокаПункта.УбытиеПлан   = ПредУбытиеПлан;
					СтрокаПункта.ПрибытиеПлан = ПредПрибытиеПлан;
					СтрокаПункта.Время        = ПредВремя;
				КонецЕсли;
			КонецЦикла;
			
			ПредПункт = ТекСтрока.Пункт;
			ПредЗаказАнализ = Неопределено;
			ПредПунктАнализ = Неопределено;
			мсвСтрокиОбработка = Новый Массив();
			ОбщееВремяСтоянкиВПунктеВСек = 0;
			флЕстьПерваяСтрока = Ложь;
		КонецЕсли;
		
		мсвСтрокиОбработка.Добавить(ТекСтрока);
		Если ТекСтрока.НомерСтроки = 1 Тогда 
			флЕстьПерваяСтрока = Истина;
		КонецЕсли;
		
		Если Не ТекСтрока.Пункт = ПредПунктАнализ Тогда 
			ПредПунктАнализ = ТекСтрока.Пункт;
			ОбщееВремяСтоянкиВПунктеВСек = ОбщееВремяСтоянкиВПунктеВСек + ((ТекСтрока.СтоянкаИзПункта - Цел(ТекСтрока.СтоянкаИзПункта))*6000 + Цел(ТекСтрока.СтоянкаИзПункта)*3600);
		КонецЕсли;
		
		Если Не ТекСтрока.ЗаказГрузоотправителя = ПредЗаказАнализ Тогда 
			ПредЗаказАнализ = ТекСтрока.ЗаказГрузоотправителя;
			ОбщееВремяСтоянкиВПунктеВСек = ОбщееВремяСтоянкиВПунктеВСек + ((ТекСтрока.Стоянка - Цел(ТекСтрока.Стоянка))*6000 + Цел(ТекСтрока.Стоянка)*3600);
		КонецЕсли;
	КонецЦикла;

	Для Сч = 1 По мсвСтрокиОбработка.Количество() Цикл 
		СтрокаПункта = мсвСтрокиОбработка.Получить(Сч-1);
		Если Сч = 1 И флЕстьПерваяСтрока Тогда  
			СтрокаПункта.УбытиеПлан   = ДатаИВремяОтправленияПлан;
			СтрокаПункта.ПрибытиеПлан = СтрокаПункта.УбытиеПлан - ОбщееВремяСтоянкиВПунктеВСек;
			
			ПредПрибытиеПлан = СтрокаПункта.ПрибытиеПлан;
			ПредУбытиеПлан   = СтрокаПункта.УбытиеПлан;
			ПредВремя        = СтрокаПункта.Время;
			
		ИначеЕсли Сч = 1 И Не флЕстьПерваяСтрока Тогда
			ТекПрибытиеПлан = ПредУбытиеПлан + ((ПредВремя - Цел(ПредВремя))*6000 + Цел(ПредВремя)*3600);
			
			Если ПересчетВремени = 1 Тогда 
				РазницаВремени = СтрокаПункта.ПрибытиеПлан - ТекПрибытиеПлан;
				РазницаЧас = Цел(РазницаВремени/3600);
				РазницаМин = Цел((РазницаВремени - РазницаЧас*3600) / 60);
				РазницаВремени = РазницаЧас + РазницаМин/100;
				
				СтрокаПункта.Ожидание = РазницаВремени;
			Иначе 
				СтрокаПункта.ПрибытиеПлан = уатЗащищенныеФункцииСервер.СложитьВремя(ТекПрибытиеПлан, СтрокаПункта.Ожидание);
			КонецЕсли;
			
			СтрокаПункта.УбытиеПлан = СтрокаПункта.ПрибытиеПлан + ОбщееВремяСтоянкиВПунктеВСек;
			
			ПредПрибытиеПлан = СтрокаПункта.ПрибытиеПлан;
			ПредУбытиеПлан   = СтрокаПункта.УбытиеПлан;
			ПредВремя        = СтрокаПункта.Время;
			
		Иначе 
			СтрокаПункта.УбытиеПлан   = ПредУбытиеПлан;
			СтрокаПункта.ПрибытиеПлан = ПредПрибытиеПлан;
			СтрокаПункта.Время        = ПредВремя;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьМоментКонтроляДвиженийПоМаршрутномуЛисту(МаршрутныйЛист) Экспорт
	
	МоментКонтроля = МаршрутныйЛист.Дата;
	
	ДанныеПунктов = ПолучитьПлановыеФактическиеДатыПосещенияПунктов(МаршрутныйЛист);
	
	Для Каждого ТекПункт Из ДанныеПунктов Цикл 
		МоментКонтроля = Макс(МоментКонтроля, ТекПункт.ПрибытиеПлан);
		МоментКонтроля = Макс(МоментКонтроля, ТекПункт.УбытиеПлан);
		МоментКонтроля = Макс(МоментКонтроля, ТекПункт.ПрибытиеФакт);
		МоментКонтроля = Макс(МоментКонтроля, ТекПункт.УбытиеФакт);
	КонецЦикла;
	
	Возврат МоментКонтроля;
	
КонецФункции // ПолучитьМоментКонтроляДвиженийПоМаршрутномуЛисту()

Функция ПолучитьДанныеЗаполненияПоАктуОтгрузки(АктОтгрузки) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("АктОтгрузки", АктОтгрузки);
	
	ПустаяЕИ = Справочники.ЕдиницыИзмерения.ПустаяСсылка();
	Запрос.УстановитьПараметр("ПустаяЕИ", ПустаяЕИ);
	
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	уатАктОтгрузки_уэГрузы.Заказ КАК ЗаказНаТС,
	               |	уатАктОтгрузки_уэГрузы.ГрузовоеМесто КАК Груз,
	               |	уатАктОтгрузки_уэГрузы.Количество КАК Количество
	               |ПОМЕСТИТЬ ВТ_АктПередачи
	               |ИЗ
	               |	Документ.уатАктОтгрузки_уэ.Грузы КАК уатАктОтгрузки_уэГрузы
	               |ГДЕ
	               |	уатАктОтгрузки_уэГрузы.Ссылка = &АктОтгрузки
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ЗаказНаТС,
	               |	Груз
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	уатЗаказГрузоотправителяГрузовойСостав.Ссылка КАК ЗаказНаТС,
	               |	уатЗаказГрузоотправителя.ДетализацияЗакрытия КАК ДетализацияЗакрытия,
	               |	уатЗаказГрузоотправителя.Контрагент КАК Контрагент,
	               |	уатЗаказГрузоотправителя.ОтправлениеС КАК ОтправлениеС,
	               |	уатЗаказГрузоотправителяГрузовойСостав.ГрузовоеМесто КАК Груз,
	               |	уатЗаказГрузоотправителяГрузовойСостав.ВидУпаковки КАК ЕдиницаИзмерения,
	               |	уатЗаказГрузоотправителяГрузовойСостав.КоличествоМест КАК Количество,
	               |	уатЗаказГрузоотправителяГрузовойСостав.ВесБрутто КАК ВесБрутто,
	               |	уатЗаказГрузоотправителяГрузовойСостав.Объем КАК Объем,
	               |	уатЗаказГрузоотправителяГрузовойСостав.КоличествоМест КАК КоличествоМест
	               |ПОМЕСТИТЬ ВТ_Заказы
	               |ИЗ
	               |	Документ.уатЗаказГрузоотправителя.ГрузовойСостав КАК уатЗаказГрузоотправителяГрузовойСостав
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	               |		ПО уатЗаказГрузоотправителяГрузовойСостав.Ссылка = уатЗаказГрузоотправителя.Ссылка
	               |			И (уатЗаказГрузоотправителя.Ссылка В
	               |				(ВЫБРАТЬ
	               |					ВТ.ЗаказНаТС
	               |				ИЗ
	               |					ВТ_АктПередачи КАК ВТ))
	               |			И (уатЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам))
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	уатЗаказГрузоотправителяТовары.Ссылка,
	               |	уатЗаказГрузоотправителя.ДетализацияЗакрытия,
	               |	уатЗаказГрузоотправителя.Контрагент,
	               |	уатЗаказГрузоотправителя.ОтправлениеС,
	               |	уатЗаказГрузоотправителяТовары.Номенклатура,
	               |	уатЗаказГрузоотправителяТовары.ЕдиницаИзмерения,
	               |	уатЗаказГрузоотправителяТовары.Количество,
	               |	уатЗаказГрузоотправителяТовары.ВесБрутто,
	               |	уатЗаказГрузоотправителяТовары.Объем,
	               |	уатЗаказГрузоотправителяТовары.КоличествоМест
	               |ИЗ
	               |	Документ.уатЗаказГрузоотправителя.Товары КАК уатЗаказГрузоотправителяТовары
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	               |		ПО уатЗаказГрузоотправителяТовары.Ссылка = уатЗаказГрузоотправителя.Ссылка
	               |			И (уатЗаказГрузоотправителя.Ссылка В
	               |				(ВЫБРАТЬ
	               |					ВТ.ЗаказНаТС
	               |				ИЗ
	               |					ВТ_АктПередачи КАК ВТ))
	               |			И (уатЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам))
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	уатЗаказГрузоотправителя.Ссылка,
	               |	уатЗаказГрузоотправителя.ДетализацияЗакрытия,
	               |	уатЗаказГрузоотправителя.Контрагент,
	               |	уатЗаказГрузоотправителя.ОтправлениеС,
	               |	Неопределено,
	               |	&ПустаяЕИ,
	               |	1,
	               |	уатЗаказГрузоотправителя.ВесБрутто,
	               |	уатЗаказГрузоотправителя.Объем,
	               |	уатЗаказГрузоотправителя.КоличествоМест
	               |ИЗ
	               |	Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	               |ГДЕ
	               |	уатЗаказГрузоотправителя.Ссылка В
	               |			(ВЫБРАТЬ
	               |				ВТ.ЗаказНаТС
	               |			ИЗ
	               |				ВТ_АктПередачи КАК ВТ)
	               |	И уатЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам)
	               |
	               |ИНДЕКСИРОВАТЬ ПО
	               |	ЗаказНаТС,
	               |	ДетализацияЗакрытия,
	               |	Груз
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	ВТ_АктПередачи.ЗаказНаТС КАК ЗаказНаТС,
	               |	ВТ_АктПередачи.Груз КАК Груз,
	               |	ВТ_АктПередачи.Количество КАК КоличествоПоАкту,
	               |	ВТ_Заказы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	ВТ_Заказы.Количество КАК Количество,
	               |	ВТ_Заказы.ВесБрутто КАК ВесБрутто,
	               |	ВТ_Заказы.Объем КАК Объем,
	               |	ВТ_Заказы.КоличествоМест КАК КоличествоМест,
	               |	ВТ_Заказы.Контрагент КАК Контрагент,
	               |	ВТ_Заказы.ОтправлениеС КАК ОтправлениеС
	               |ИЗ
	               |	ВТ_АктПередачи КАК ВТ_АктПередачи
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТ_Заказы КАК ВТ_Заказы
	               |		ПО ВТ_АктПередачи.ЗаказНаТС = ВТ_Заказы.ЗаказНаТС
	               |			И (ВЫБОР
	               |				КОГДА ВТ_Заказы.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам)
	               |					ТОГДА ИСТИНА
	               |				ИНАЧЕ ВТ_АктПередачи.Груз = ВТ_Заказы.Груз
	               |			КОНЕЦ)
	               |ИТОГИ
	               |	МАКСИМУМ(Контрагент),
	               |	МАКСИМУМ(ОтправлениеС)
	               |ПО
	               |	ЗаказНаТС";
	
	ДанныеЗаполненияПоАктуОтгрузки = Новый Массив();
	
	ВыборкаЗаказы = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаЗаказы.Следующий() Цикл 
		ДанныеЗаказа = Новый Структура();
		ДанныеЗаказа.Вставить("Заказ",        ВыборкаЗаказы.ЗаказНаТС);
		ДанныеЗаказа.Вставить("Контрагент",   ВыборкаЗаказы.Контрагент);
		ДанныеЗаказа.Вставить("ОтправлениеС", ВыборкаЗаказы.ОтправлениеС);
		ДанныеЗаказа.Вставить("Пункты",       Новый Массив());
		ДанныеЗаказа.Вставить("Грузы",        Новый Массив());
		
		ВыборкаГрузы = ВыборкаЗаказы.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаГрузы.Следующий() Цикл 
			Если ВыборкаГрузы.КоличествоПоАкту > ВыборкаГрузы.Количество Тогда 
				КоличествоКПеревозке = ВыборкаГрузы.Количество;
			Иначе 
				КоличествоКПеревозке = ВыборкаГрузы.КоличествоПоАкту;
			КонецЕсли;
			
			КоэфПересчета = ?(ВыборкаГрузы.Количество=0, 0, КоличествоКПеревозке / ВыборкаГрузы.Количество);
			
			ДанныеГруза = Новый Структура();
			ДанныеГруза.Вставить("Номенклатура",     ВыборкаГрузы.Груз);
			ДанныеГруза.Вставить("ЕдиницаИзмерения", ВыборкаГрузы.ЕдиницаИзмерения);
			ДанныеГруза.Вставить("Количество",       КоличествоКПеревозке);
			ДанныеГруза.Вставить("ВесБрутто",        ВыборкаГрузы.ВесБрутто * КоэфПересчета);
			ДанныеГруза.Вставить("Объем",            ВыборкаГрузы.Объем * КоэфПересчета);
			ДанныеГруза.Вставить("КоличествоМест",   ВыборкаГрузы.КоличествоМест * КоэфПересчета);
			
			ДанныеЗаказа.Грузы.Добавить(ДанныеГруза);
		КонецЦикла;
		
		Если ВыборкаЗаказы.ЗаказНаТС.FTL Тогда 
			Для Каждого ТекПункт Из ВыборкаЗаказы.ЗаказНаТС.ПромежуточныеПункты Цикл 
				ДанныеПункта = Новый Структура();
				ДанныеПункта.Вставить("Пункт",            ТекПункт.Пункт);
				ДанныеПункта.Вставить("ТипТочкиМаршрута", ТекПункт.ТипТочкиМаршрута);
				ДанныеПункта.Вставить("Стоянка",          ТекПункт.Стоянка);
				ДанныеЗаказа.Пункты.Добавить(ДанныеПункта);
			КонецЦикла;
			
		Иначе 
			ДанныеПункта = Новый Структура();
			ДанныеПункта.Вставить("Пункт",            ВыборкаЗаказы.ЗаказНаТС.АдресОтправления);
			ДанныеПункта.Вставить("ТипТочкиМаршрута", Перечисления.уатТипыТочекМаршрута.Погрузка);
			ДанныеПункта.Вставить("Стоянка",          ВыборкаЗаказы.ЗаказНаТС.СтоянкаПунктОтправления);
			ДанныеЗаказа.Пункты.Добавить(ДанныеПункта);
			
			ДанныеПункта = Новый Структура();
			ДанныеПункта.Вставить("Пункт",            ВыборкаЗаказы.ЗаказНаТС.АдресНазначения);
			ДанныеПункта.Вставить("ТипТочкиМаршрута", Перечисления.уатТипыТочекМаршрута.Разгрузка);
			ДанныеПункта.Вставить("Стоянка",          ВыборкаЗаказы.ЗаказНаТС.СтоянкаПунктНазначения);
			ДанныеЗаказа.Пункты.Добавить(ДанныеПункта);
		КонецЕсли;
		
		ДанныеЗаполненияПоАктуОтгрузки.Добавить(ДанныеЗаказа);
	КонецЦикла;
	
	Возврат ДанныеЗаполненияПоАктуОтгрузки;
	
КонецФункции // ПолучитьДанныеЗаполненияПоАктуОтгрузки()

// Функция предназначена для получения общего времени и расстояния, пройденного по каждому заказу
//  с учетом текущей структуры следования по маршрутному листу.
//
// Параметры:
//  МаршрутныйЛист			 - ДокументСсылка.уатМаршрутныйЛист	 - маршрутный лист, по которому необходимо получить данные.
//  НулевойПробегВыезда		 - 									 - 
//  НулевойПробегВозвращения - 									 - 
//	ВариантЗаполнения:
//		0 - ввод МЛ на основании ПЛ / заполнение ПЛ по МЛ и ПланФакт отключен,
//		1 - ввод МЛ на основании ПЛ и ПланФакт включен,
//		2 - заполнение ПЛ по МЛ (План) и ПланФакт включен,
//		3 - заполнение ПЛ по МЛ (Факт) и ПланФакт включен.
// 
// Возвращаемое значение:
//   - таблица заказов с временем и расстоянием по каждому из них.
//
Функция ПолучитьТаблицуВремениРасстоянияПоЗаказам(МаршрутныйЛист, НулевойПробегВыезда = 0, НулевойПробегВозвращения = 0, ВариантЗаполнения = 0) Экспорт
	
	НулевойПробегВыезда      = 0;
	НулевойПробегВозвращения = 0;
	
	ТаблицаВремениРасстояния = Новый ТаблицаЗначений();
	ТаблицаВремениРасстояния.Колонки.Добавить("ЗаказНаТС",  Новый ОписаниеТипов("ДокументСсылка.уатЗаказГрузоотправителя"));
	ТаблицаВремениРасстояния.Колонки.Добавить("Время",      Новый ОписаниеТипов("Число"));
	ТаблицаВремениРасстояния.Колонки.Добавить("Расстояние", Новый ОписаниеТипов("Число"));
	
	Если МаршрутныйЛист.ВидОперации <> Перечисления.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя Тогда 
		Возврат ТаблицаВремениРасстояния;
	КонецЕсли;
	
	ДеревоЗаказов = Новый ДеревоЗначений;
	ДеревоЗаказов.Колонки.Добавить("ПунктЗаказНоменклатура", Новый ОписаниеТипов("ДокументСсылка.уатЗаказГрузоотправителя, СправочникСсылка.уатПунктыНазначения, Строка"));
	ДеревоЗаказов.Колонки.Добавить("Время",                  Новый ОписаниеТипов("Число"));
	ДеревоЗаказов.Колонки.Добавить("Расстояние",             Новый ОписаниеТипов("Число"));
	ДеревоЗаказов.Колонки.Добавить("ВремяФакт",              Новый ОписаниеТипов("Число"));
	ДеревоЗаказов.Колонки.Добавить("РасстояниеФакт",         Новый ОписаниеТипов("Число"));
	ДеревоЗаказов.Колонки.Добавить("Выполнен",               Новый ОписаниеТипов("Булево"));
	
	СменилсяПункт = Ложь;
	ПредЗаказ     = Неопределено;
	ПредСтрока    = Неопределено;
	ПредПункт     = Неопределено;
	Для Каждого ТекСтрока Из МаршрутныйЛист.Заказы Цикл
		Если ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка 
			ИЛИ ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяПогрузка Тогда
			ТекПункт = ?(ЗначениеЗаполнено(ТекСтрока.Пункт), ТекСтрока.Пункт, ТекСтрока.ЗаказГрузоотправителя.АдресОтправления);
		ИначеЕсли ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка
			ИЛИ ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяРазгрузка Тогда
			ТекПункт = ?(ЗначениеЗаполнено(ТекСтрока.Пункт), ТекСтрока.Пункт, ТекСтрока.ЗаказГрузоотправителя.АдресНазначения);
		Иначе
			ТекПункт = ТекСтрока.Пункт;
		КонецЕсли;
		
		Если ТекСтрока.ЗаказГрузоотправителя.Пустая() ИЛИ ТекСтрока.ТипТочкиМаршрута.Пустая() Тогда
			НовСтрокаПункт = ДеревоЗаказов.Строки.Добавить();
			НовСтрокаПункт.ПунктЗаказНоменклатура = ТекПункт;
			НовСтрокаПункт.Время                  = ТекСтрока.Время;
			НовСтрокаПункт.Расстояние             = ТекСтрока.Расстояние;
			НовСтрокаПункт.ВремяФакт              = ТекСтрока.ВремяФакт;
			НовСтрокаПункт.РасстояниеФакт         = ТекСтрока.РасстояниеФакт;
			НовСтрокаПункт.Выполнен               = ТекСтрока.Выполнен;
			
			ПредПункт     = ТекПункт;
			СменилсяПункт = Истина;
			
			Продолжить;
		КонецЕсли;
		
		Если ТекПункт <> ПредПункт ИЛИ СменилсяПункт Тогда
			НовСтрокаПункт = ДеревоЗаказов.Строки.Добавить();
			НовСтрокаПункт.ПунктЗаказНоменклатура = ТекПункт;
			НовСтрокаПункт.Время                  = ТекСтрока.Время;
			НовСтрокаПункт.Расстояние             = ТекСтрока.Расстояние;
			НовСтрокаПункт.ВремяФакт              = ТекСтрока.ВремяФакт;
			НовСтрокаПункт.РасстояниеФакт         = ТекСтрока.РасстояниеФакт;
			НовСтрокаПункт.Выполнен               = ТекСтрока.Выполнен;
			
			ПредПункт     = ТекПункт;
			СменилсяПункт = Истина;
		КонецЕсли;
		
		Если ТекСтрока.ЗаказГрузоотправителя <> ПредЗаказ 
				ИЛИ (ПредСтрока <> Неопределено И ТекСтрока.ТипТочкиМаршрута <> ПредСтрока.ТипТочкиМаршрута) 
				ИЛИ СменилсяПункт Тогда
			НовСтрокаЗаказ = НовСтрокаПункт.Строки.Добавить();
			НовСтрокаЗаказ.ПунктЗаказНоменклатура = ТекСтрока.ЗаказГрузоотправителя;
			
			ПредЗаказ     = ТекСтрока.ЗаказГрузоотправителя;
			СменилсяПункт = Ложь;
		КонецЕсли;
		
		ПредСтрока = ТекСтрока;
	КонецЦикла;
	
	Для Каждого СтрокаПункта Из ДеревоЗаказов.Строки Цикл 
		Для Каждого СтрокаЗаказа Из СтрокаПункта.Строки Цикл 
			НайдСтрока = ТаблицаВремениРасстояния.Найти(СтрокаЗаказа.ПунктЗаказНоменклатура, "ЗаказНаТС");
			Если НайдСтрока <> Неопределено Тогда 
				Продолжить;
			КонецЕсли;
			
			Время      = 0;
			Расстояние = 0;
			
			флСчет = Ложь;
			
			индПунктПоиск = ДеревоЗаказов.Строки.Количество() - 1;
			Пока индПунктПоиск >= 0 Цикл 
				СтрокаПунктПоиск = ДеревоЗаказов.Строки[индПунктПоиск];
				
				Если флСчет Тогда 
					Если ВариантЗаполнения = 1
						И Документы.уатМаршрутныйЛист.ЗаказДоставлен(МаршрутныйЛист, СтрокаЗаказа.ПунктЗаказНоменклатура)
						ИЛИ ВариантЗаполнения = 3 Тогда
						
						Время = уатЗащищенныеФункцииСервер.СложитьВремя(Время, СтрокаПунктПоиск.ВремяФакт);
						Расстояние = Расстояние + СтрокаПунктПоиск.РасстояниеФакт;
					Иначе
						Время = уатЗащищенныеФункцииСервер.СложитьВремя(Время, СтрокаПунктПоиск.Время);
						Расстояние = Расстояние + СтрокаПунктПоиск.Расстояние;
					КонецЕсли;
				КонецЕсли;
				
				Если СтрокаПунктПоиск = СтрокаПункта Тогда 
					Прервать;
				КонецЕсли;
				
				Если Не флСчет Тогда 
					индЗаказПоиск = СтрокаПунктПоиск.Строки.Количество() - 1;
					Пока индЗаказПоиск >= 0 Цикл 
						СтрокаЗаказПоиск = СтрокаПунктПоиск.Строки[индЗаказПоиск];
						
						Если СтрокаЗаказПоиск.ПунктЗаказНоменклатура = СтрокаЗаказа.ПунктЗаказНоменклатура Тогда 
							флСчет = Истина;
							Прервать;
						КонецЕсли;
						
						индЗаказПоиск = индЗаказПоиск - 1;
					КонецЦикла;
				КонецЕсли;
				
				индПунктПоиск = индПунктПоиск - 1;
			КонецЦикла;
			
			НовСтрока = ТаблицаВремениРасстояния.Добавить();
			НовСтрока.ЗаказНаТС  = СтрокаЗаказа.ПунктЗаказНоменклатура;
			НовСтрока.Время      = Время;
			НовСтрока.Расстояние = Расстояние;
		КонецЦикла;
	КонецЦикла;
	
	ПредСтрокаДерева = Неопределено;
	Для Каждого СтрокаПункта Из ДеревоЗаказов.Строки Цикл 
		Если СтрокаПункта.Строки.Количество() = 0 
				И ДеревоЗаказов.Строки.Индекс(СтрокаПункта) = 0
				И ТипЗнч(СтрокаПункта.ПунктЗаказНоменклатура) = Тип("СправочникСсылка.уатПунктыНазначения")
				И СтрокаПункта.ПунктЗаказНоменклатура.Гараж Тогда 
			НулевойПробегВыезда = СтрокаПункта.Расстояние;
		КонецЕсли;
		
		Если СтрокаПункта.Строки.Количество() = 0 
				И ДеревоЗаказов.Строки.Индекс(СтрокаПункта) = ДеревоЗаказов.Строки.Количество() - 1
				И ТипЗнч(СтрокаПункта.ПунктЗаказНоменклатура) = Тип("СправочникСсылка.уатПунктыНазначения")
				И СтрокаПункта.ПунктЗаказНоменклатура.Гараж Тогда 
			НулевойПробегВозвращения = ПредСтрокаДерева.Расстояние;
		КонецЕсли;
		
		ПредСтрокаДерева = СтрокаПункта;
	КонецЦикла;
	
	Возврат ТаблицаВремениРасстояния;
	
КонецФункции

// Функция предназначена для получения настроек маршрутизации
// 
// Возвращаемое значение:
//   - 
//
Функция ПолучитьНастройкиМаршрутизации(ЭтапМаршрутизации = Неопределено, Знач ШаблонНастроек = Неопределено) Экспорт
	
	НастройкиМаршрутизации = Новый Структура(уатЗащищенныеФункцииСервер_уэ.ПолучитьНастройкиАРМЛогиста());
	НастройкиМаршрутизации.Вставить("ДатаПланирования",                         ТекущаяДата());
	НастройкиМаршрутизации.НастройкаАлгоритмМаршрутизации                       = 0;
	НастройкиМаршрутизации.НастройкаРежимОптимизации                            = 0;
	НастройкиМаршрутизации.НастройкаМаршрутизацияВФоновомРежиме                 = Ложь;
	НастройкиМаршрутизации.НастройкаУчитыватьОкнаПоЗаказамПриМаршрутизации      = Ложь;
	НастройкиМаршрутизации.НастройкаУчитыватьСекцииТранспортныхСредств          = Ложь;
	НастройкиМаршрутизации.НастройкаСмешиватьГрузыВСекциях                      = Ложь;
	НастройкиМаршрутизации.НастройкаВремяВыездаИзГаража                         = 1;
	НастройкиМаршрутизации.НастройкаВремяВыездаТранспортныхСредств              = '00010101000000';
	НастройкиМаршрутизации.НастройкаВремяВозвратаТранспортныхСредств            = '00010101235959';
	НастройкиМаршрутизации.НастройкаСжиматьЗаказы                               = Ложь;
	НастройкиМаршрутизации.НастройкаПонижающийКоэффициентЗагрузкиКузоваПоВесу   = 100;
	НастройкиМаршрутизации.НастройкаПонижающийКоэффициентЗагрузкиКузоваПоОбъему = 100;
	НастройкиМаршрутизации.НастройкаИспользоватьВПриоритетеСобственныйТранспорт = 0;
	НастройкиМаршрутизации.НастройкаЧасовойПояс                                 = 3;
	НастройкиМаршрутизации.НастройкаВозвратВГаражСобственныеТС                  = Ложь;
	НастройкиМаршрутизации.НастройкаВозвратВГаражПривлеченныеТС                 = Ложь;
	НастройкиМаршрутизации.НастройкаВозвратВГаражВиртуальныеТС                  = Ложь;
	НастройкиМаршрутизации.НастройкиВнешнийМаршрутизатор                        = "";
	НастройкиМаршрутизации.НастройкаИспользоватьХарактеристикиЗаказовНаТС       = 0;
	НастройкиМаршрутизации.НастройкаУчитыватьГруппыСовместимости                = 0;
	НастройкиМаршрутизации.НастройкаМаксимальноеЧислоЗаказовМаршрута            = 0;
	НастройкиМаршрутизации.НастройкаМаксимальноеЧислоЗаказовМаршрута            = 0;
	НастройкиМаршрутизации.НастройкаКларкРайтРежимДоставки                      = 0;
	НастройкиМаршрутизации.НастройкаДействиеСПросроченнымиЗаказами              = 0;
	
	НастройкиМаршрутизации.НастройкаАлгоритмОптимизации                          = "Очередей";
	НастройкиМаршрутизации.НастройкиОптимизацииВнешнийМаршрутизатор              = "";
	НастройкиМаршрутизации.Оптимизация_НастройкаЧасовойПояс                      = 3;
	НастройкиМаршрутизации.Оптимизация_НастройкаВремяВыездаИзГаража              = 1;
	НастройкиМаршрутизации.Оптимизация_НастройкаВремяВозвратаТранспортныхСредств = '00010101235959';
	НастройкиМаршрутизации.Оптимизация_НастройкаВремяВыездаТранспортныхСредств   = '00010101000000';
	НастройкиМаршрутизации.Оптимизация_НастройкаУчитыватьОкнаПоЗаказам           = Ложь;
	НастройкиМаршрутизации.Оптимизация_НастройкаСжиматьЗаказы                    = Ложь;
	НастройкиМаршрутизации.Оптимизация_НастройкаПонижающийКоэффициентЗагрузкиКузоваПоВесу   = 100;
	НастройкиМаршрутизации.Оптимизация_НастройкаПонижающийКоэффициентЗагрузкиКузоваПоОбъему = 100; 
	НастройкиМаршрутизации.Оптимизация_НастройкаРежимОптимизации                 = 0;  
	НастройкиМаршрутизации.Оптимизация_НастройкаМаршрутизацияВФоновомРежиме      = Ложь;
	
	Если НЕ уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП() Тогда 
		Возврат НастройкиМаршрутизации;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ШаблонНастроек) Тогда
		ШаблонНастроек = Константы.уатОсновнойШаблонМаршрутизации.Получить();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ШаблонНастроек) Тогда
		ВариантНастройки     = ШаблонНастроек;
		СтруктураНастроекАРМ = Неопределено;
	Иначе
		ВариантНастройки = ХранилищеНастроекДанныхФорм.Загрузить(
		"Обработка.уатАРМЛогиста_уэ.Форма.ОсновнаяФорма",
		"уатАРМЛогиста_ВариантНастройки"
		);
		
		СтруктураНастроекАРМ = ХранилищеНастроекДанныхФорм.Загрузить(
		"Обработка.уатАРМЛогиста_уэ.Форма.ОсновнаяФорма",
		"уатАРМЛогиста_Настройки"
		);
	КонецЕсли;
	
	СтруктураНастроек = Неопределено;
	
	Если ЗначениеЗаполнено(ВариантНастройки) Тогда 
		СпрОб = ВариантНастройки.ПолучитьОбъект();
		Если Не СпрОб.ПометкаУдаления Тогда 
			ХранилищеНастроек = СпрОб.НастройкиХранилище.Получить();
			Если Не ХранилищеНастроек = Неопределено Тогда 
				СтруктураНастроек = ХранилищеНастроек;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СтруктураНастроек = Неопределено 
		И СтруктураНастроекАРМ <> Неопределено Тогда 
		СтруктураНастроек = СтруктураНастроекАРМ;
	КонецЕсли;
	
	Если НЕ СтруктураНастроек = Неопределено И ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
		Для Каждого ЭлементНастроек из НастройкиМаршрутизации Цикл 
			Если СтруктураНастроек.Свойство(ЭлементНастроек.Ключ)
				И СтруктураНастроек[ЭлементНастроек.Ключ] <> Неопределено Тогда
				НастройкиМаршрутизации[ЭлементНастроек.Ключ] = СтруктураНастроек[ЭлементНастроек.Ключ];
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЭтапМаршрутизации) Тогда
		НастройкиМаршрутизации.НастройкаАлгоритмМаршрутизации = ЭтапМаршрутизации.АлгоритмМаршрутизации;
	КонецЕсли;
	
	Возврат НастройкиМаршрутизации;
	
КонецФункции // ПолучитьНастройкиМаршрутизации()

// Функция определяет фактический период маршрутного листа.
//  Возвращает струкруру с ключами "ДатаНачала", "ДатаОкончания", "ЕстьФакт".
//  Ключ "ЕстьФакт" (булево) - признак наличия фактического периода.
//
// Параметры:
//  МаршрутныйЛист	 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция ПолучитьФактическийПериодМаршрутногоЛиста(Знач МаршрутныйЛист) Экспорт
	
	ДатаНачала    = '39991231';
	ДатаОкончания = '00010101';
	флПланФакт = Константы.уатУчетПланФактаПоМаршрутуВМаршрутныхЛистах.Получить();
	
	Для Каждого ТекСтрока Из МаршрутныйЛист.Заказы Цикл 
		Если флПланФакт Тогда
			ДатаНачала    = Мин(ДатаНачала,     ТекСтрока.ПрибытиеФакт, ТекСтрока.УбытиеФакт);
			ДатаОкончания = Макс(ДатаОкончания, ТекСтрока.ПрибытиеФакт, ТекСтрока.УбытиеФакт);
		Иначе
			ДатаНачала    = Мин(ДатаНачала,     ТекСтрока.ПрибытиеПлан, ТекСтрока.УбытиеПлан);
			ДатаОкончания = Макс(ДатаОкончания, ТекСтрока.ПрибытиеПлан, ТекСтрока.УбытиеПлан);
		КонецЕсли;
	КонецЦикла;
	
	Если ДатаНачала = '39991231' Или ДатаОкончания = '00010101' ИЛИ (ДатаОкончания - ДатаНачала) = 0 Тогда 
		Возврат Новый Структура("ДатаНачала, ДатаОкончания, ЕстьФакт", '00010101', '00010101', Ложь);
	Иначе 
		Возврат Новый Структура("ДатаНачала, ДатаОкончания, ЕстьФакт", ДатаНачала, ДатаОкончания, Истина);
	КонецЕсли;
	
КонецФункции // ПолучитьФактическийПериодМаршрутногоЛиста()

// Распределяет доходы, расходы в МЛ по заказам на ТС
//  Услуги, в которых уже указан заказ на ТС, не распределяются
//
// Параметры:
//  ТаблицаУслуги	 - 	 - 
//  ДокументСсылка	 - 	 - 
//  Отказ			 - 	 - 
//  мсвЗаказы		 - 	 - 
//  ИмяТЧ			 - 	 - 
//
Процедура РаспределениеУслугПоЗаказам(ТаблицаУслуги, ДокументСсылка, Отказ, Знач мсвЗаказы = Неопределено, ИмяТЧ = "Доходы") Экспорт
	Если ТаблицаУслуги.Количество() = 0 ИЛИ ДокументСсылка.ВидОперации = Перечисления.уатВидыОперацийМаршрутныйЛист.Произвольный Тогда
		Возврат;
	КонецЕсли;
		
	тблЗаказыМЛ = ПолучитьВыработкуПоЗаказам(ДокументСсылка,, мсвЗаказы);
	тблЗаказыМЛ.Колонки.КоличествоФакт.Имя = "Коэффициент";
	тблЗаказыМЛ.Колонки.КоличествоПлан.Имя = "КоэффициентПлан";
	тблЗаказыМЛ.Свернуть("Заказ, ПараметрВыработки", "Коэффициент, КоэффициентПлан");
	
	ИспользоватьПлановыеУслуги = ПолучитьФункциональнуюОпцию("уатИспользоватьПлановыеУслуги_уэ");
	
	Если ДокументСсылка.ТС.ПринадлежностьТС = Перечисления.уатПринадлежностьТС.Собственное Тогда
		КолоннаТС = уатОбщегоНазначения.МестонахождениеТС(ДокументСсылка.ТС, ДокументСсылка.Дата).Колонна;
	КонецЕсли;
	
	мсвСтрокУдалить = Новый Массив;
	
	флЕстьКолонкаСумма               = (ТаблицаУслуги.Колонки.Найти("Сумма") <> Неопределено);
	флЕстьКолонкаСуммаУпр            = (ТаблицаУслуги.Колонки.Найти("СуммаУпр") <> Неопределено);
	флЕстьКолонкаСуммаРегл           = (ТаблицаУслуги.Колонки.Найти("СуммаРегл") <> Неопределено);
	флЕстьКолонкаСуммаНДС            = (ТаблицаУслуги.Колонки.Найти("СуммаНДС") <> Неопределено);
	флЕстьКолонкаСуммаНДСУпр         = (ТаблицаУслуги.Колонки.Найти("СуммаНДСУпр") <> Неопределено);
	флЕстьКолонкиЦенаИКоличество     = (ТаблицаУслуги.Колонки.Найти("Цена") <> Неопределено) И (ТаблицаУслуги.Колонки.Найти("Количество") <> Неопределено);
	флЕстьКолонкаСуммаПлан           = (ТаблицаУслуги.Колонки.Найти("СуммаПлан") <> Неопределено);
	флЕстьКолонкаСуммаУпрПлан        = (ТаблицаУслуги.Колонки.Найти("СуммаУпрПлан") <> Неопределено);
	флЕстьКолонкаСуммаРеглПлан       = (ТаблицаУслуги.Колонки.Найти("СуммаРеглПлан") <> Неопределено);
	флЕстьКолонкаСуммаНДСПлан        = (ТаблицаУслуги.Колонки.Найти("СуммаНДСПлан") <> Неопределено);
	флЕстьКолонкаСуммаНДСУпрПлан     = (ТаблицаУслуги.Колонки.Найти("СуммаНДСУпрПлан") <> Неопределено);
	флЕстьКолонкиЦенаИКоличествоПлан = (ТаблицаУслуги.Колонки.Найти("ЦенаПлан") <> Неопределено) И (ТаблицаУслуги.Колонки.Найти("КоличествоПлан") <> Неопределено);
	
	Если ТаблицаУслуги.Колонки.Найти("ЗаказНаТС") <> Неопределено Тогда
		ИмяКолонкиЗаказ = "ЗаказНаТС";
	ИначеЕсли ТаблицаУслуги.Колонки.Найти("ЗаказГрузоотправителя") <> Неопределено Тогда
		ИмяКолонкиЗаказ = "ЗаказГрузоотправителя";
	Иначе
		ИмяКолонкиЗаказ = "Заказ";
	КонецЕсли;
	Если ТаблицаУслуги.Колонки.Найти("Контрагент") <> Неопределено Тогда
		ИмяКолонкиКонтрагент = "Контрагент";
	Иначе
		ИмяКолонкиКонтрагент = "";
	КонецЕсли;
	Если ТаблицаУслуги.Колонки.Найти("ДоговорКонтрагента") <> Неопределено Тогда
		ИмяКолонкиДоговор = "ДоговорКонтрагента";
	ИначеЕсли ТаблицаУслуги.Колонки.Найти("Договор") <> Неопределено Тогда
		ИмяКолонкиДоговор = "Договор";
	Иначе
		ИмяКолонкиДоговор = "";
	КонецЕсли;
	
	Для Каждого ТекСтрокаУслуги Из ТаблицаУслуги Цикл
		Если ЗначениеЗаполнено(ТекСтрокаУслуги[ИмяКолонкиЗаказ]) Тогда
			Продолжить;
		КонецЕсли;
		
		Сч = ТаблицаУслуги.Индекс(ТекСтрокаУслуги);
		Если ИмяТЧ = "Доходы" Тогда
			ТекСтатья = ТекСтрокаУслуги.СтатьяДоходов;
		ИначеЕсли ИмяТЧ = "Расходы" Тогда
			ТекСтатья = ТекСтрокаУслуги.СтатьяРасходов;
		Иначе
			ТекСтатья = Неопределено;
		КонецЕсли;
		
		// проверка на заполнение статьи затрат/доходов
		Если ИмяТЧ = "Доходы" И НЕ ЗначениеЗаполнено(ТекСтатья) Тогда
			ТекстНСТР = НСтр("en='Allocation of incomes on orders in line ""%1"" has not been executed: income item should be indicated.';ru='Распределение доходов по заказам в строке ""%1"" не выполнено: должна быть указана статья доходов.'");
			ТекстНСТР = СтрШаблон(ТекстНСТР, Сч+1);
			уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, Отказ,, СтатусСообщения.Внимание);
			Продолжить;
		ИначеЕсли ИмяТЧ = "Расходы" И НЕ ЗначениеЗаполнено(ТекСтатья) Тогда
			ТекстНСТР = НСтр("en='Allocation of expenses for orders in line ""%1"" has not been made: expense item should be indicated.';ru='Распределение расходов по заказам в строке ""%1"" не выполнено: должна быть указана статья расходов.'");
			ТекстНСТР = СтрШаблон(ТекстНСТР, Сч+1);
			уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, Отказ,, СтатусСообщения.Внимание);
			Продолжить;
		КонецЕсли;
		
		тблЗаказыМЛпоСтатье = тблЗаказыМЛ.Скопировать();
		
		// Вычисление параметра выработки для распределения
		// если способ = не распределять, то переходим к следующей строке
		флРаспределять = Истина;
		ПараметрВыработкиРаспределения = Неопределено;
		Если ИмяТЧ = "Доходы" Тогда
			флРаспределять = (ТекСтатья.СпособРаспределенияМеждуАналитиками = Перечисления.уатСпособыРаспределенияДоходовРасходовМеждуАналитиками.РаспределятьПоЗаказам);
			ПараметрВыработкиРаспределения = ТекСтатья.ПараметрВыработкиРаспределенияМеждуАналитиками;
			
			// удаляем лишние строки в таблице коэффициентов
			мсвСтрокКоэфУдалить = Новый Массив;
			Для Каждого ТекСтрокаКоэф Из тблЗаказыМЛпоСтатье Цикл
				Если ТекСтрокаКоэф.ПараметрВыработки <> ПараметрВыработкиРаспределения Тогда
					мсвСтрокКоэфУдалить.Добавить(ТекСтрокаКоэф);
				КонецЕсли;
			КонецЦикла;
			Для Каждого ТекСтрокаКоэф Из мсвСтрокКоэфУдалить Цикл
				тблЗаказыМЛпоСтатье.Удалить(ТекСтрокаКоэф);
			КонецЦикла;
		ИначеЕсли ИмяТЧ = "Расходы"	Тогда
			Если ТекСтатья.ВариантСпособаРаспределенияЗатратМеждуАналитиками = 0 Тогда
				Если ТекСтатья.ПараметрыВыработкиРаспределенияМеждуАналитиками.Количество() = 0 Тогда
					флРаспределять = Ложь;
				Иначе
					СпособРаспределенияЗатратМеждуАналитиками = ТекСтатья.ПараметрыВыработкиРаспределенияМеждуАналитиками[0].СпособРаспределенияЗатратМеждуАналитиками;
					Если СпособРаспределенияЗатратМеждуАналитиками = Перечисления.уатСпособыРаспределенияДоходовРасходовМеждуАналитиками.НеРаспределять
						ИЛИ (НЕ ЗначениеЗаполнено(СпособРаспределенияЗатратМеждуАналитиками)) Тогда
						
						флРаспределять = Ложь;
					Иначе
						ПараметрВыработкиРаспределения = ТекСтатья.ПараметрыВыработкиРаспределенияМеждуАналитиками[0].ПараметрВыработки;
						
						// удаляем лишние строки в таблице коэффициентов
						мсвСтрокКоэфУдалить = Новый Массив;
						Для Каждого ТекСтрокаКоэф Из тблЗаказыМЛпоСтатье Цикл
							Если ТекСтрокаКоэф.ПараметрВыработки <> ПараметрВыработкиРаспределения Тогда
								мсвСтрокКоэфУдалить.Добавить(ТекСтрокаКоэф);
							КонецЕсли;
						КонецЦикла;
						Для Каждого ТекСтрокаКоэф Из мсвСтрокКоэфУдалить Цикл
							тблЗаказыМЛпоСтатье.Удалить(ТекСтрокаКоэф);
						КонецЦикла;
					КонецЕсли;
				КонецЕсли;
			Иначе
				// удаляем лишние строки в таблице коэффициентов
				мсвСтрокКоэфУдалить = Новый Массив;
				Для Каждого ТекСтрокаКоэф Из тблЗаказыМЛпоСтатье Цикл
					СтрокаПоиск = ТекСтатья.ПараметрыВыработкиРаспределенияМеждуАналитиками.Найти(КолоннаТС, "Колонна");
					Если СтрокаПоиск = Неопределено
						ИЛИ СтрокаПоиск.СпособРаспределенияЗатратМеждуАналитиками = Перечисления.уатСпособыРаспределенияДоходовРасходовМеждуАналитиками.НеРаспределять
						ИЛИ НЕ ЗначениеЗаполнено(СтрокаПоиск.СпособРаспределенияЗатратМеждуАналитиками) 
						ИЛИ СтрокаПоиск.ПараметрВыработки <> ТекСтрокаКоэф.ПараметрВыработки
						ИЛИ СтрокаПоиск.ПараметрВыработки.СпособВводаЗначений = Перечисления.уатСпособыВводаЗначенийВыработкивМЛ_уэ.ВЦеломПоДокументу Тогда
						мсвСтрокКоэфУдалить.Добавить(ТекСтрокаКоэф);
					КонецЕсли;
				КонецЦикла;
				Для Каждого ТекСтрокаКоэф Из мсвСтрокКоэфУдалить Цикл
					тблЗаказыМЛпоСтатье.Удалить(ТекСтрокаКоэф);
				КонецЦикла;
			КонецЕсли;
		Иначе
			флРаспределять = Ложь;
		КонецЕсли;
		Если НЕ флРаспределять Тогда
			Продолжить;
		КонецЕсли;
		
		// проверка на заполнение параметра выработки для распределения
		Если ИмяТЧ = "Доходы" ИЛИ ТекСтатья.ВариантСпособаРаспределенияЗатратМеждуАналитиками = 0 Тогда
			Если ИмяТЧ = "Доходы" И НЕ ЗначениеЗаполнено(ПараметрВыработкиРаспределения) Тогда
				ТекстНСТР = НСтр("en='The distribution of income on orders in line ""%1"" has not been fulfilled: the parameter of output the distribution in the income item is not specified.';ru='Распределение доходов по заказам в строке ""%1"" не выполнено: не указан параметр выработки распределения в статье доходов.'");
				ТекстНСТР = СтрШаблон(ТекстНСТР, Сч+1);
				уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, Отказ,, СтатусСообщения.Внимание);
				Продолжить;
			ИначеЕсли ИмяТЧ = "Расходы" И НЕ ЗначениеЗаполнено(ПараметрВыработкиРаспределения) Тогда
				ТекстНСТР = НСтр("en='The allocation of expenses for orders in line ""%1"" has not been fulfilled: the parameter of output the distribution in the item of expenses has not been specified.';ru='Распределение расходов по заказам в строке ""%1"" не выполнено: не указан параметр выработки распределения в статье расходов.'");
				ТекстНСТР = СтрШаблон(ТекстНСТР, Сч+1);
				уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, Отказ,, СтатусСообщения.Внимание);
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ПараметрВыработкиРаспределения) И ПараметрВыработкиРаспределения.СпособВводаЗначений = Перечисления.уатСпособыВводаЗначенийВыработкивМЛ_уэ.ВЦеломПоДокументу Тогда
			Продолжить;
		КонецЕсли;
		
		// проверка на наличие выработки по параметру выработки распределения
		КоэффициентВсего     = тблЗаказыМЛпоСтатье.Итог("Коэффициент");
		КоэффициентВсегоПлан = тблЗаказыМЛпоСтатье.Итог("КоэффициентПлан");
		Если ИмяТЧ = "Доходы" И КоэффициентВсего = 0 Тогда
			ТекстНСТР = НСтр("en='The distribution of income by orders in line ""%1"" has not been fulfilled: the total value of output on routing sheets is 0.';ru='Распределение доходов по заказам в строке ""%1"" не выполнено: итоговое значение выработки по маршрутным листам равно 0.'");
			ТекстНСТР = СтрШаблон(ТекстНСТР, Сч+1);
			уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, Отказ,, СтатусСообщения.Внимание);
			Продолжить;
		ИначеЕсли ИмяТЧ = "Расходы" И КоэффициентВсего = 0 И КоэффициентВсегоПлан = 0 Тогда
			ТекстНСТР = НСтр("en='The distribution of order expenses in line ""%1"" has not been fulfilled: the total value of the output on the route lists is 0.';ru='Распределение расходов по заказам в строке ""%1"" не выполнено: итоговое значение выработки по маршрутным листам равно 0.'");
			ТекстНСТР = СтрШаблон(ТекстНСТР, Сч+1);
			уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, Отказ,, СтатусСообщения.Внимание);
			Продолжить;
		КонецЕсли;
		
		// переменные для расчета "последней копейки"
		СуммаРаспределенная           = 0;
		СуммаРаспределеннаяПлан       = 0;
		СуммаРаспределеннаяУпр        = 0;
		СуммаРаспределеннаяУпрПлан    = 0;
		СуммаРаспределеннаяРегл       = 0;
		СуммаРаспределеннаяРеглПлан   = 0;
		СуммаРаспределеннаяНДС        = 0;
		СуммаРаспределеннаяНДСПлан    = 0;
		СуммаРаспределеннаяНДСУпр     = 0;
		СуммаРаспределеннаяНДСУпрПлан = 0;
		КоличествоРаспред             = 0;
		КоличествоРаспредПлан         = 0;
		
		НоваяСтрокаУслуги = Неопределено;
		
		Для Каждого ТекЗаказ Из тблЗаказыМЛпоСтатье Цикл
			НоваяСтрокаУслуги = ТаблицаУслуги.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаУслуги, ТекСтрокаУслуги);
			//НоваяСтрокаУслуги.РучнойВвод = ТекСтрокаУслуги.РучнойВвод;
			НоваяСтрокаУслуги.РучнойВвод = Истина;
			НоваяСтрокаУслуги[ИмяКолонкиЗаказ] = ТекЗаказ.Заказ;
			//Если НЕ ЗначениеЗаполнено(НоваяСтрокаУслуги[ИмяКолонкиКонтрагент]) И НЕ ПустаяСтрока(ИмяКолонкиКонтрагент) Тогда
			//	НоваяСтрокаУслуги[ИмяКолонкиКонтрагент] = ТекЗаказ.Заказ.Контрагент;
			//КонецЕсли;
			//Если НЕ ПустаяСтрока(ИмяКолонкиДоговор) Тогда
			//	НоваяСтрокаУслуги[ИмяКолонкиДоговор] = ТекЗаказ.Заказ.ДоговорКонтрагента;
			//КонецЕсли;
			//КонецЕсли;
				
			Если флЕстьКолонкаСумма Тогда
				Если КоэффициентВсего > 0 Тогда
					НоваяСтрокаУслуги.Сумма = ТекСтрокаУслуги.Сумма * ТекЗаказ.Коэффициент / КоэффициентВсего;
				КонецЕсли;
				СуммаРаспределенная = СуммаРаспределенная + НоваяСтрокаУслуги.Сумма;
			КонецЕсли;
			Если флЕстьКолонкаСуммаРегл Тогда
				Если КоэффициентВсего > 0 Тогда
					НоваяСтрокаУслуги.СуммаРегл = ТекСтрокаУслуги.СуммаРегл * ТекЗаказ.Коэффициент / КоэффициентВсего;
				КонецЕсли;
				СуммаРаспределеннаяРегл = СуммаРаспределеннаяРегл + НоваяСтрокаУслуги.СуммаРегл;
			КонецЕсли;
			Если флЕстьКолонкаСуммаУпр Тогда
				Если КоэффициентВсего > 0 Тогда
					НоваяСтрокаУслуги.СуммаУпр = ТекСтрокаУслуги.СуммаУпр * ТекЗаказ.Коэффициент / КоэффициентВсего;
				КонецЕсли;
				СуммаРаспределеннаяУпр = СуммаРаспределеннаяУпр + НоваяСтрокаУслуги.СуммаУпр;
			КонецЕсли;
			Если флЕстьКолонкаСуммаНДС Тогда
				Если КоэффициентВсего > 0 Тогда
					НоваяСтрокаУслуги.СуммаНДС = ТекСтрокаУслуги.СуммаНДС * ТекЗаказ.Коэффициент / КоэффициентВсего;
				КонецЕсли;
				СуммаРаспределеннаяНДС = СуммаРаспределеннаяНДС + НоваяСтрокаУслуги.СуммаНДС;
			КонецЕсли;
			Если флЕстьКолонкаСуммаНДСУпр Тогда
				Если КоэффициентВсего > 0 Тогда
					НоваяСтрокаУслуги.СуммаНДСУпр = ТекСтрокаУслуги.СуммаНДСУпр * ТекЗаказ.Коэффициент / КоэффициентВсего;
				КонецЕсли;
				СуммаРаспределеннаяНДСУпр = СуммаРаспределеннаяНДСУпр + НоваяСтрокаУслуги.СуммаНДСУпр;
			КонецЕсли;
			Если флЕстьКолонкиЦенаИКоличество И ТекСтрокаУслуги.Цена <> 0 Тогда
				НоваяСтрокаУслуги.Количество = НоваяСтрокаУслуги.Сумма / ТекСтрокаУслуги.Цена;
			КонецЕсли;
			
			Если ИспользоватьПлановыеУслуги Тогда
				Если флЕстьКолонкаСуммаПлан Тогда
					Если КоэффициентВсегоПлан > 0 Тогда
						НоваяСтрокаУслуги.СуммаПлан = ТекСтрокаУслуги.СуммаПлан * ТекЗаказ.КоэффициентПлан / КоэффициентВсегоПлан;
					КонецЕсли;
					СуммаРаспределеннаяПлан = СуммаРаспределеннаяПлан + НоваяСтрокаУслуги.СуммаПлан;
				КонецЕсли;
				Если флЕстьКолонкаСуммаРеглПлан Тогда
					Если КоэффициентВсегоПлан > 0 Тогда
						НоваяСтрокаУслуги.СуммаРеглПлан = ТекСтрокаУслуги.СуммаРеглПлан * ТекЗаказ.КоэффициентПлан / КоэффициентВсегоПлан;
					КонецЕсли;
					СуммаРаспределеннаяРеглПлан = СуммаРаспределеннаяРеглПлан + НоваяСтрокаУслуги.СуммаРеглПлан;
				КонецЕсли;
				Если флЕстьКолонкаСуммаУпрПлан Тогда
					Если КоэффициентВсегоПлан > 0 Тогда
						НоваяСтрокаУслуги.СуммаУпрПлан = ТекСтрокаУслуги.СуммаУпрПлан * ТекЗаказ.КоэффициентПлан / КоэффициентВсегоПлан;
					КонецЕсли;
					СуммаРаспределеннаяУпрПлан = СуммаРаспределеннаяУпрПлан + НоваяСтрокаУслуги.СуммаУпрПлан;
				КонецЕсли;
				Если флЕстьКолонкаСуммаНДСПлан Тогда
					Если КоэффициентВсегоПлан > 0 Тогда
						НоваяСтрокаУслуги.СуммаНДСПлан = ТекСтрокаУслуги.СуммаНДСПлан * ТекЗаказ.КоэффициентПлан / КоэффициентВсегоПлан;
					КонецЕсли;
					СуммаРаспределеннаяНДСПлан = СуммаРаспределеннаяНДСПлан + НоваяСтрокаУслуги.СуммаНДСПлан;				
				КонецЕсли;
				Если флЕстьКолонкаСуммаНДСУпрПлан Тогда
					Если КоэффициентВсегоПлан > 0 Тогда
						НоваяСтрокаУслуги.СуммаНДСУпрПлан = ТекСтрокаУслуги.СуммаНДСУпрПлан * ТекЗаказ.КоэффициентПлан / КоэффициентВсегоПлан;
					КонецЕсли;
					СуммаРаспределеннаяНДСУпрПлан = СуммаРаспределеннаяНДСУпрПлан + НоваяСтрокаУслуги.СуммаНДСУпрПлан;				
				КонецЕсли;
				Если флЕстьКолонкиЦенаИКоличествоПлан И ТекСтрокаУслуги.ЦенаПлан <> 0 Тогда
					НоваяСтрокаУслуги.КоличествоПлан = НоваяСтрокаУслуги.СуммаПлан / ТекСтрокаУслуги.ЦенаПлан;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		// учет "последней копейки"
		Если НоваяСтрокаУслуги <> Неопределено Тогда
			Если флЕстьКолонкаСумма Тогда
				НоваяСтрокаУслуги.Сумма = НоваяСтрокаУслуги.Сумма + (ТекСтрокаУслуги.Сумма - СуммаРаспределенная);
			КонецЕсли;
			Если флЕстьКолонкаСуммаРегл Тогда
				НоваяСтрокаУслуги.СуммаРегл = НоваяСтрокаУслуги.СуммаРегл + (ТекСтрокаУслуги.СуммаРегл - СуммаРаспределеннаяРегл);
			КонецЕсли;
			Если флЕстьКолонкаСуммаУпр Тогда
				НоваяСтрокаУслуги.СуммаУпр = НоваяСтрокаУслуги.СуммаУпр + (ТекСтрокаУслуги.СуммаУпр - СуммаРаспределеннаяУпр);
			КонецЕсли;
			Если флЕстьКолонкаСуммаНДС Тогда
				НоваяСтрокаУслуги.СуммаНДС = НоваяСтрокаУслуги.СуммаНДС + (ТекСтрокаУслуги.СуммаНДС - СуммаРаспределеннаяНДС);
			КонецЕсли;
			Если флЕстьКолонкаСуммаНДСУпр Тогда
				НоваяСтрокаУслуги.СуммаНДСУпр = НоваяСтрокаУслуги.СуммаНДСУпр + (ТекСтрокаУслуги.СуммаНДСУпр - СуммаРаспределеннаяНДСУпр);
			КонецЕсли;
			Если ИспользоватьПлановыеУслуги Тогда
				Если флЕстьКолонкаСуммаПлан Тогда
					НоваяСтрокаУслуги.СуммаПлан = НоваяСтрокаУслуги.СуммаПлан + (ТекСтрокаУслуги.СуммаПлан - СуммаРаспределеннаяПлан);
				КонецЕсли;
				Если флЕстьКолонкаСуммаРеглПлан Тогда
					НоваяСтрокаУслуги.СуммаРеглПлан = НоваяСтрокаУслуги.СуммаРеглПлан + (ТекСтрокаУслуги.СуммаРеглПлан - СуммаРаспределеннаяРеглПлан);
				КонецЕсли;
				Если флЕстьКолонкаСуммаУпрПлан Тогда
					НоваяСтрокаУслуги.СуммаУпрПлан = НоваяСтрокаУслуги.СуммаУпрПлан + (ТекСтрокаУслуги.СуммаУпрПлан - СуммаРаспределеннаяУпрПлан);
				КонецЕсли;
				Если флЕстьКолонкаСуммаНДСПлан Тогда
					НоваяСтрокаУслуги.СуммаНДСПлан = НоваяСтрокаУслуги.СуммаНДСПлан + (ТекСтрокаУслуги.СуммаНДСПлан - СуммаРаспределеннаяНДСПлан);
				КонецЕсли;
				Если флЕстьКолонкаСуммаНДСУпрПлан Тогда
					НоваяСтрокаУслуги.СуммаНДСУпрПлан = НоваяСтрокаУслуги.СуммаНДСУпрПлан + (ТекСтрокаУслуги.СуммаНДСУпрПлан - СуммаРаспределеннаяНДСУпрПлан);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
				
		мсвСтрокУдалить.Добавить(ТекСтрокаУслуги);
	КонецЦикла;
	Для Каждого ТекСтрокаУдалить Из мсвСтрокУдалить Цикл //распределенные строки удаляем
		ТаблицаУслуги.Удалить(ТекСтрокаУдалить);
	КонецЦикла;
	
	ТаблицаУслуги.Колонки.Добавить("ПараметрВыработки");
	Для Каждого ТекСтрока Из ТаблицаУслуги Цикл
		Если ЗначениеЗаполнено(ТекСтрока.Тариф) Тогда
			ТекСтрока.ПараметрВыработки = ТекСтрока.Тариф.ПараметрВыработки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Функция возвращает таблицу выработки по документу
//  Структура таблицы: [Заказ, ПараметрВыработки, Количество]
//
// Параметры:
//  ДокументОбъект			 - 	 - 
//  мсвЗаказы				 - 	 - 
//  флТолькоДействующиеНаМЛ	 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция ПолучитьВыработкуПоЗаказам(ДокументСсылка, ПланФакт = Неопределено, мсвЗаказы = Неопределено) Экспорт
	Если ТипЗнч(ДокументСсылка) = Тип("Структура") Тогда
		Если ДокументСсылка.ВыработкаТСиСотрудников.Количество() = 0 Тогда
			тблВыработка = Документы.уатМаршрутныйЛист.ПустаяСсылка().ВыработкаТСиСотрудников.Выгрузить();
		Иначе
			Если ТипЗнч(ДокументСсылка.ВыработкаТСиСотрудников) = Тип("ТаблицаЗначений") Тогда
				тблВыработка = ДокументСсылка.ВыработкаТСиСотрудников.Скопировать();
			Иначе
				тблВыработка = уатОбщегоНазначенияСервер.ПреобразоватьМассивСтрокВТаблицу(ДокументСсылка.ВыработкаТСиСотрудников);
			КонецЕсли;
		КонецЕсли;
	Иначе
		тблВыработка = ДокументСсылка.ВыработкаТСиСотрудников.Выгрузить().Скопировать();
	КонецЕсли;
		
	Если мсвЗаказы <> Неопределено Тогда // отбор выработки по заказам
		мсвСтрокиУдалить = Новый Массив;
		Для Каждого ТекСтрокаЗаказ Из тблВыработка Цикл
			Если мсвЗаказы.Найти(ТекСтрокаЗаказ.ЗаказГрузоотправителя) = Неопределено Тогда
				мсвСтрокиУдалить.Добавить(ТекСтрокаЗаказ);
			КонецЕсли;
		КонецЦикла;
		Для Каждого ТекСтрокаУдалить Из мсвСтрокиУдалить Цикл
			тблВыработка.Удалить(ТекСтрокаУдалить);
		КонецЦикла;
	КонецЕсли;
	
	тблВыработка.Колонки.Добавить("ТипПункта",        Новый ОписаниеТипов("СправочникСсылка.уатТипыПунктов"));
	тблВыработка.Колонки.Добавить("ТипТочкиМаршрута", Новый ОписаниеТипов("ПеречислениеСсылка.уатТипыТочекМаршрута"));
	тблВыработка.Колонки.Добавить("ВидУпаковки",      Новый ОписаниеТипов("СправочникСсылка.уатВидыУпаковки_уэ"));
	тблВыработка.Колонки.Добавить("ТипКонтейнера",    Новый ОписаниеТипов("СправочникСсылка.уатТипыКонтейнеров_уэ"));
	Для Каждого ТекСтрока Из тблВыработка Цикл
		Если ТекСтрока.ПараметрВыработки = Справочники.уатПараметрыВыработки.КоличествоТочекПоТипуПункта 
			ИЛИ ТекСтрока.ПараметрВыработки = Справочники.уатПараметрыВыработки.ПробегВнеГеозоныПоТипуПункта Тогда
			ТекСтрока.ТипПункта = ТекСтрока.ДопАналитика;
		ИначеЕсли ТекСтрока.ПараметрВыработки = Справочники.уатПараметрыВыработки.КоличествоТочекПоВидуОперации
			ИЛИ ТекСтрока.ПараметрВыработки = Справочники.уатПараметрыВыработки.ПробегВнеГеозоныПоВидуОперации Тогда
			ТекСтрока.ТипТочкиМаршрута = ТекСтрока.ДопАналитика;
		ИначеЕсли ТекСтрока.ПараметрВыработки = Справочники.уатПараметрыВыработки.КоличествоУпаковок Тогда
			ТекСтрока.ВидУпаковки = ТекСтрока.ДопАналитика;
		ИначеЕсли ТекСтрока.ПараметрВыработки = Справочники.уатПараметрыВыработки.КоличествоКонтейнеров Тогда
			ТекСтрока.ТипКонтейнера = ТекСтрока.ДопАналитика;
		КонецЕсли;
	КонецЦикла;
	
	// таблица грузов и заказов для складской обработки
	тблЗаказыГрузы = Новый ТаблицаЗначений;
	тблЗаказыГрузы.Колонки.Добавить("Заказ");
	тблЗаказыГрузы.Колонки.Добавить("Номенклатура");
	Для Каждого ТекСтрока Из ДокументСсылка.Заказы Цикл
		Если НЕ ЗначениеЗаполнено(ТекСтрока.ЗаказГрузоотправителя)
			ИЛИ мсвЗаказы <> Неопределено И мсвЗаказы.Найти(ТекСтрока.ЗаказГрузоотправителя) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		СтруктураПоиск = Новый Структура("Заказ, Номенклатура", ТекСтрока.ЗаказГрузоотправителя, ТекСтрока.Номенклатура);
		Если тблЗаказыГрузы.НайтиСтроки(СтруктураПоиск).Количество() = 0 Тогда
			НоваяСтрока = тблЗаказыГрузы.Добавить();
			НоваяСтрока.Заказ = ТекСтрока.ЗаказГрузоотправителя;
			НоваяСтрока.Номенклатура = ТекСтрока.Номенклатура;
		КонецЕсли;
	КонецЦикла;
	// складская обработка
	тблВыработка.Колонки.Добавить("ВидСкладскойОперации", Новый ОписаниеТипов("ПеречислениеСсылка.уатВидыСкладскихОпераций_уэ"));
	тблВыработка.Колонки.Добавить("Склад",                Новый ОписаниеТипов("СправочникСсылка.Склады"));
	тблВыработка.Колонки.Добавить("Вес",                  Новый ОписаниеТипов("Число"));
	тблВыработка.Колонки.Добавить("ВесДни",               Новый ОписаниеТипов("Число"));
	тблВыработка.Колонки.Добавить("Объем",                Новый ОписаниеТипов("Число"));
	тблВыработка.Колонки.Добавить("ОбъемДни",             Новый ОписаниеТипов("Число"));
	тблВыработка.Колонки.Добавить("КоличествоМест",       Новый ОписаниеТипов("Число"));
	тблВыработка.Колонки.Добавить("КоличествоМестДни",    Новый ОписаниеТипов("Число"));
	//тблВыработка.Колонки.Добавить("ВЦеломПоДокументу",    Новый ОписаниеТипов("Булево"));
	СкладскаяОбработка_РасчетВТабличнойЧасти = (Справочники.уатПараметрыВыработки.СкладскаяОбработка.СпособВводаЗначений
		= Перечисления.уатСпособыВводаЗначенийВыработкивМЛ_уэ.ВТабличнойЧасти);
	Для Каждого ТекГруз Из тблЗаказыГрузы Цикл
		тблСкладскаяВыработка = уатОбщегоНазначения_уэ.ПолучитьСкладскуюВыработку(ТекГруз.Заказ, ТекГруз.Номенклатура);
		Для Каждого СтрокаСкладскойВыработки Из тблСкладскаяВыработка Цикл
			ДопПараметры = Новый Структура("ВидУпаковки, ТипКонтейнера, ВидСкладскойОперации, КоличествоМест, Вес, Объем, КоличествоМестДни, ВесДни, ОбъемДни, Склад",
				СтрокаСкладскойВыработки.ВидУпаковки, СтрокаСкладскойВыработки.ТипКонтейнера, СтрокаСкладскойВыработки.ВидСкладскойОперации,
				СтрокаСкладскойВыработки.КоличествоМест, СтрокаСкладскойВыработки.Вес, СтрокаСкладскойВыработки.Объем,
				СтрокаСкладскойВыработки.КоличествоМестДни, СтрокаСкладскойВыработки.ВесДни, СтрокаСкладскойВыработки.ОбъемДни,
				СтрокаСкладскойВыработки.Склад);
			Если СкладскаяОбработка_РасчетВТабличнойЧасти Тогда
				ДопПараметры.Вставить("Заказ", ТекГруз.Заказ);
			КонецЕсли;
			ДопПараметры.Вставить("Выработка", тблВыработка);
			ДобавитьВыработку(ДокументСсылка, СтрокаСкладскойВыработки.ПараметрВыработки, СтрокаСкладскойВыработки.Количество, ДопПараметры);
		КонецЦикла;
	КонецЦикла;
	
	Если ПланФакт = "План" Тогда
		тблВыработка.Колонки.КоличествоПлан.Имя = "Количество";
		тблВыработка.Колонки.Удалить("КоличествоФакт");
	ИначеЕсли ПланФакт = "Факт" Тогда
		тблВыработка.Колонки.КоличествоФакт.Имя = "Количество";
		тблВыработка.Колонки.Удалить("КоличествоПлан");
	КонецЕсли;
	
	тблВыработка.Колонки.ЗаказГрузоотправителя.Имя = "Заказ";
		
	Возврат тблВыработка;
КонецФункции

// Выполняет закрытие МЛ: проставляет Дату закрытия и проводит документ
//
// Параметры:
//  ДокументСсылка			 - 	 - 
//  ДатаЗакрытия			 - 	 - 
//  СообщениеОшибки			 - 	 - 
//  Интерактивно			 - 	 - 
//  флСуммаУслугИзменилась	 - 	 - 
//
Процедура ЗакрытиеДокумента(ДокументСсылка, ДатаЗакрытия, СообщениеОшибки = "", Интерактивно = Ложь, флСуммаУслугИзменилась = 0) Экспорт
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументОбъект.уатМаршрутныйЛист") Тогда
		ДокументОбъект = ДокументСсылка;
	Иначе
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
	КонецЕсли;
	
	ДокументОбъект.ДатаЗакрытия = ДатаЗакрытия;
	Если НЕ ДокументОбъект.ПроверитьЗаполнение() Тогда
		ТекстНСТР = НСтр("en='Closing ""% 1"" canceled: incorrect filling of the document!';ru='Закрытие ""%1"" отменено: некорректное заполнение документа!'");
		ТекстНСТР = СтрШаблон(ТекстНСТР, ДокументСсылка);
		СообщениеОшибки = СообщениеОшибки + ТекстНСТР;
		Возврат;
	КонецЕсли;
	
	флСуммаУслугИзменилась = Ложь;
	
	Попытка
		ДокументОбъект.ДополнительныеСвойства.Вставить("Интерактивно", Интерактивно);
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Если ДокументОбъект.ДополнительныеСвойства.Свойство("ВыполненАвтопересчетУслуг") Тогда
			флСуммаУслугИзменилась = ДокументОбъект.ДополнительныеСвойства.ВыполненАвтопересчетУслуг;
		КонецЕсли;
	Исключение
		ТекстНСТР = НСтр("en='Closing ""%1"" canceled: errors occurred when writing document!';ru='Закрытие ""%1"" отменено: возникли ошибки при записи документа!'");
		ТекстНСТР = СтрШаблон(ТекстНСТР, ДокументСсылка);
		СообщениеОшибки = СообщениеОшибки + ТекстНСТР + Символы.ПС;
		//СообщениеОшибки = СообщениеОшибки + ОписаниеОшибки();
		Возврат;
	КонецПопытки;
КонецПроцедуры

// Проверяет ввод документов Акт приемки/отгрузки - заказ должен быть передан в рейс перед отправкой в МЛ
//  ДокументМЛ - документ-ссылка или документ-объект "Маршрутный лист"
//  СообщениеОшибка - строка ошибка, заполняется, если есть некорректность
//
// Параметры:
//  ДокументМЛ		 - 	 - 
//  СообщениеОшибка	 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция ПроверитьВводСкладскихАктов(ДокументМЛ, СообщениеОшибка = "") Экспорт
	
	СообщениеОшибка = "";
	
	Запрос = Новый Запрос;   
	
	ТипыТочекМаршрута = Новый Массив();
	ТипыТочекМаршрута.Добавить(Перечисления.уатТипыТочекМаршрута.Погрузка);
	ТипыТочекМаршрута.Добавить(Перечисления.уатТипыТочекМаршрута.ДополнительнаяПогрузка);

	Запрос.УстановитьПараметр("ТипыТочекМаршрута", ТипыТочекМаршрута);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫРАЗИТЬ(ТаблицаМЛ.ЗаказГрузоотправителя КАК Документ.уатЗаказГрузоотправителя) КАК ЗаказГрузоотправителя,
	|	ТаблицаМЛ.Номенклатура КАК Номенклатура,
	|	ТаблицаМЛ.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ТаблицаМЛ.Количество КАК Количество,
	|	ТаблицаМЛ.Выполнен КАК Выполнен,
	|	ТаблицаМЛ.ТипТочкиМаршрута КАК ТипТочкиМаршрута
	|ПОМЕСТИТЬ уатМаршрутныйЛистЗаказы
	|ИЗ
	|	&ТаблицаМЛ КАК ТаблицаМЛ
	|ГДЕ
	|	ТаблицаМЛ.Выполнен
	|	И ТаблицаМЛ.ТипТочкиМаршрута В(&ТипыТочекМаршрута)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя,
	|	уатМаршрутныйЛистЗаказы.Количество КАК Количество,
	|	уатМаршрутныйЛистЗаказы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	уатМаршрутныйЛистЗаказы.Номенклатура КАК Номенклатура,
	|	СУММА(ЕСТЬNULL(уатАктПриемки_уэГрузы.Количество, 0)) КАК КоличествоПоступило,
	|	СУММА(ЕСТЬNULL(уатАктОтгрузки_уэГрузы.Количество, 0)) КАК КоличествоПередано
	|ИЗ
	|	уатМаршрутныйЛистЗаказы КАК уатМаршрутныйЛистЗаказы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатАктПриемки_уэ.Грузы КАК уатАктПриемки_уэГрузы
	|		ПО уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя = уатАктПриемки_уэГрузы.Заказ
	|			И (уатМаршрутныйЛистЗаказы.Номенклатура = уатАктПриемки_уэГрузы.ГрузовоеМесто
	|				ИЛИ уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам))
	|			И (уатАктПриемки_уэГрузы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.уатВидыОперацийАктПриемки_уэ.ОтГрузоотправителя))
	|			И (уатАктПриемки_уэГрузы.Ссылка.Проведен)
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатАктОтгрузки_уэ.Грузы КАК уатАктОтгрузки_уэГрузы
	|		ПО уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя = уатАктОтгрузки_уэГрузы.Заказ
	|			И (уатМаршрутныйЛистЗаказы.Номенклатура = уатАктОтгрузки_уэГрузы.ГрузовоеМесто
	|				ИЛИ уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам))
	|			И (уатАктОтгрузки_уэГрузы.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.уатВидыОперацийАктОтгрузки_уэ.ВРейс))
	|			И (уатАктОтгрузки_уэГрузы.Ссылка.Проведен)
	|			И (уатАктОтгрузки_уэГрузы.Ссылка.МаршрутныйЛист = &ТекущийМаршрутныйЛист)
	|
	|СГРУППИРОВАТЬ ПО
	|	уатМаршрутныйЛистЗаказы.Количество,
	|	уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя,
	|	уатМаршрутныйЛистЗаказы.Номенклатура,
	|	уатМаршрутныйЛистЗаказы.ЕдиницаИзмерения";
		
	тблЗаказы = ДокументМЛ.Заказы.Выгрузить();
	Запрос.УстановитьПараметр("ТаблицаМЛ", тблЗаказы);
	Запрос.УстановитьПараметр("ТекущийМаршрутныйЛист", ДокументМЛ.Ссылка);
	
	ТаблицаПередачаВРейс = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ТекСтрока Из ТаблицаПередачаВРейс Цикл
		Если ТекСтрока.КоличествоПоступило = 0 Тогда //поступления на склад не было - считаем, что склад не используется и груз отправлять можно
			Продолжить;
		КонецЕсли;
		
		Если ТекСтрока.Количество > ТекСтрока.КоличествоПередано Тогда
			Если ТекСтрока.ЗаказГрузоотправителя.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам Тогда
				ТекстНСТР = НСтр("en='On request ""%1"" a shipment is not transferred from the warehouse';ru='По заказу ""%1"" отправляемый груз не передан со склада'");
				ТекстНСТР = СтрШаблон(ТекстНСТР, СокрЛП(ТекСтрока.ЗаказГрузоотправителя.Номер));
			Иначе
				ТекстНСТР = НСтр("en='By order ""%1"", the quantity of shipment ""%2"" (%3 %4) exceeds trasfered from warehouse (% 5% 6)';ru='По заказу ""%1"" количество отправляемого груза ""%2"" (%3 %4) превышает переданное со склада (%5 %6)'");
				ТекстНСТР = СтрШаблон(ТекстНСТР, СокрЛП(ТекСтрока.ЗаказГрузоотправителя.Номер),
					ТекСтрока.Номенклатура, ТекСтрока.Количество, СокрЛП(ТекСтрока.ЕдиницаИзмерения),
					ТекСтрока.КоличествоПередано, СокрЛП(ТекСтрока.ЕдиницаИзмерения));
			КонецЕсли;
			СообщениеОшибка = СообщениеОшибка + Символы.ПС + ТекстНСТР;
		КонецЕсли;
	КонецЦикла;
	
	Если СообщениеОшибка <> "" Тогда
		СообщениеОшибка = Сред(СообщениеОшибка, 2);
	КонецЕсли;
КонецФункции

// Функция устанавливает флаг "Формировать уведомления об опозданиях в рейсе" по функциональной опции
//
// Параметры:
//  Документ	 - ДокументОбъект.МаршрутныйЛист или ДокументСсылка.МаршрутныйЛист 
// 
Процедура УстановитьФлагФормироватьУведомленияОбОпозданияхВРейсе(Документ) Экспорт
	
	Документ.ФормироватьУведомленияОбОпозданияхВРейсе = 
		ПолучитьФункциональнуюОпцию("уатПрогнозированиеОпозданийПоМаршрутнымЛистам");
	
КонецПроцедуры

// Функция устанавливает флаг "Разрешен обмен с WMS" по функциональной опции
//
// Параметры:
//  Документ	 - ДокументОбъект.МаршрутныйЛист или ДокументСсылка.МаршрутныйЛист 
// 
Процедура УстановитьФлагРазрешенаВыгрузкаВWMS(Документ) Экспорт
	
	Документ.РазрешенаВыгрузкаВWMS = ПолучитьФункциональнуюОпцию("уатИспользоватьИнтеграциюWMS_уэ");
	
КонецПроцедуры

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, ДополнительныеСвойства) Экспорт
	
	ДополнительныеСвойства.Вставить("СообщенияОшибкиРаспределенияПоЗаказам", Новый Массив);
		
	Если ДокументСсылка.ВидОперации = Перечисления.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя тогда
		СформироватьГрузыКПеревозке(ДокументСсылка, ДополнительныеСвойства);
		СформироватьЗаказыГрузоотправителей(ДокументСсылка, ДополнительныеСвойства);
		СформироватьСтатусыГрузов(ДокументСсылка, ДополнительныеСвойства);
	КонецЕсли;
	
	СформироватьВыработкаПоМаршрутнымЛистам(ДокументСсылка, ДополнительныеСвойства);
	СформироватьВыработкаСотрудниковПоМаршрутнымЛистам(ДокументСсылка, ДополнительныеСвойства);
	СформироватьДоходы(ДокументСсылка, ДополнительныеСвойства);
	СформироватьРасходы(ДокументСсылка, ДополнительныеСвойства);
	СформироватьПлановыеУслуги(ДокументСсылка, ДополнительныеСвойства);
	СформироватьПредоставленныеУслуги(ДокументСсылка, ДополнительныеСвойства);
	
	Если ДокументСсылка.ПринадлежностьПеревозки = Перечисления.уатПринадлежностьТС.Собственное Тогда
		СформироватьТаблицаОсновныеНачисления(ДокументСсылка, ДополнительныеСвойства);
	ИначеЕсли ДокументСсылка.ПринадлежностьПеревозки = Перечисления.уатПринадлежностьТС.Привлеченное Тогда
		СформироватьТаблицаНачисленияФизическимЛицам(ДокументСсылка, ДополнительныеСвойства);
	КонецЕсли;
		
	Если уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП() Тогда
		СформироватьНевыставленныеРекламации(ДокументСсылка, ДополнительныеСвойства);
	КонецЕсли;

	// Обороты по маршрутному листу только для отправленного маршрутного листа
	Если ЗначениеЗаполнено(ДокументСсылка.ДатаИВремяОтправления) Тогда
		СформироватьОборотыПоМаршрутномуЛисту(ДокументСсылка, ДополнительныеСвойства);
	КонецЕсли;
	
	СформироватьОбъемыПеревозок(ДокументСсылка, ДополнительныеСвойства);
	
	СформироватьСостояниеТС(ДокументСсылка, ДополнительныеСвойства);
	уатПроведение_проф.СформироватьТаблицуДатыОбработкиДокументов(ДокументСсылка, ДополнительныеСвойства);
	
	// сообщение об ошибках распределения по Заказам
	Если ДополнительныеСвойства.СообщенияОшибкиРаспределенияПоЗаказам.Количество() > 0 Тогда
		ТекстНСТР = "Распределение услуг по Заказам не выполнено или выполнено частично: отсутствует выработка по Параметру"
			+ " распределения между вложенными Заказами (статья доходов/расходов - распределение между аналитиками)";
		уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР,,, СтатусСообщения.Внимание);
	КонецЕсли;
	
КонецПроцедуры // ИнициализироватьДанныеДокумента()

Процедура ВыполнитьКонтроль(ДокументСсылка, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь) Экспорт
	
	уатОбщегоНазначения_проф.ПроверкаПредоплатыПоЗаказам(ДокументСсылка, Отказ);
	
	
	
КонецПроцедуры

Процедура ВыполнитьКонтрольГрузыКПеревозке(ДокументОбъект, Отказ, Заголовок) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя,
	|	ВЫБОР
	|		КОГДА уатМаршрутныйЛистЗаказы.Номенклатура ССЫЛКА Справочник.Номенклатура
	|			ТОГДА уатМаршрутныйЛистЗаказы.Номенклатура
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	КОНЕЦ КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА уатМаршрутныйЛистЗаказы.Номенклатура ССЫЛКА Справочник.уатГрузовыеМеста_уэ
	|			ТОГДА уатМаршрутныйЛистЗаказы.Номенклатура
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.уатГрузовыеМеста_уэ.ПустаяСсылка)
	|	КОНЕЦ КАК ГрузовоеМесто,
	|	уатМаршрутныйЛистЗаказы.Номенклатура КАК НоменклатураНаименование,
	|	СУММА(уатМаршрутныйЛистЗаказы.Количество) КАК Количество,
	|	уатМаршрутныйЛистЗаказы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СУММА(ВЫБОР
	|			КОГДА уатМаршрутныйЛистЗаказы.Номенклатура ССЫЛКА Справочник.Номенклатура
	|				ТОГДА ВЫРАЗИТЬ(уатМаршрутныйЛистЗаказы.Количество * уатМаршрутныйЛистЗаказы.ЕдиницаИзмерения.Коэффициент / уатМаршрутныйЛистЗаказы.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК ЧИСЛО(15, 3))
	|			ИНАЧЕ ВЫРАЗИТЬ(уатМаршрутныйЛистЗаказы.Количество КАК ЧИСЛО(15, 3))
	|		КОНЕЦ) КАК КоличествоВЕдиницеХраненияОстатков,
	|	уатМаршрутныйЛистЗаказы.ЕдиницаИзмеренияПоЗаказу КАК ЕдиницаИзмеренияПоЗаказу,
	|	СУММА(1) КАК КоличествоПунктовРазгрузки
	|ПОМЕСТИТЬ втМаршрутныйЛист
	|ИЗ
	|	Документ.уатМаршрутныйЛист.Заказы КАК уатМаршрутныйЛистЗаказы
	|ГДЕ
	|	уатМаршрутныйЛистЗаказы.Ссылка = &СсылкаМаршрутныйЛист
	|	И уатМаршрутныйЛистЗаказы.ТипТочкиМаршрута В (&ТипыТочкиРазгрузка)
	|	И НЕ уатМаршрутныйЛистЗаказы.ПричинаЗакрытияЗаказа = &ПричинаЗакрытияЗаказаОтклонен
	|
	|СГРУППИРОВАТЬ ПО
	|	уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя,
	|	уатМаршрутныйЛистЗаказы.Номенклатура,
	|	уатМаршрутныйЛистЗаказы.ЕдиницаИзмерения,
	|	уатМаршрутныйЛистЗаказы.ЕдиницаИзмеренияПоЗаказу
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втМаршрутныйЛист.ЗаказГрузоотправителя КАК ЗаказНаТС,
	|	втМаршрутныйЛист.Номенклатура КАК Номенклатура,
	|	втМаршрутныйЛист.НоменклатураНаименование КАК НоменклатураНаименование,
	|	ВЫБОР
	|		КОГДА втМаршрутныйЛист.ЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам)
	|				И втМаршрутныйЛист.КоличествоПунктовРазгрузки = втМаршрутныйЛист.КоличествоВЕдиницеХраненияОстатков
	|				И втМаршрутныйЛист.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяССылка)
	|			ТОГДА 1
	|		ИНАЧЕ втМаршрутныйЛист.КоличествоВЕдиницеХраненияОстатков
	|	КОНЕЦ КАК КоличествоДокументЕдХрОстатков,
	|	втМаршрутныйЛист.Количество КАК КоличествоДокумент,
	|	втМаршрутныйЛист.ЕдиницаИзмерения КАК ЕдиницаИзмеренияДокумент,
	|	ЕСТЬNULL(уатЗаказыНаТСОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗаказ,
	|	ЕСТЬNULL(уатЗаказыНаТСОстатки.ЕдиницаИзмерения, втМаршрутныйЛист.ЕдиницаИзмеренияПоЗаказу) КАК ЕдиницаИзмеренияЗаказ,
	|	ВЫБОР
	|		КОГДА втМаршрутныйЛист.Номенклатура ССЫЛКА Справочник.Номенклатура
	|			ТОГДА втМаршрутныйЛист.Номенклатура.ЕдиницаХраненияОстатков
	|		ИНАЧЕ втМаршрутныйЛист.ЕдиницаИзмерения
	|	КОНЕЦ КАК ЕдиницаХраненияОстатков
	|ПОМЕСТИТЬ втЗаказ
	|ИЗ
	|	втМаршрутныйЛист КАК втМаршрутныйЛист
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.уатГрузыКПеревозке_уэ.Остатки КАК уатЗаказыНаТСОстатки
	|		ПО втМаршрутныйЛист.ЗаказГрузоотправителя = уатЗаказыНаТСОстатки.ЗаказГрузоотправителя
	|			И втМаршрутныйЛист.Номенклатура = уатЗаказыНаТСОстатки.Номенклатура
	|			И втМаршрутныйЛист.ЕдиницаИзмеренияПоЗаказу = уатЗаказыНаТСОстатки.ЕдиницаИзмерения
	|			И втМаршрутныйЛист.ГрузовоеМесто = уатЗаказыНаТСОстатки.ГрузовоеМесто
	|			И втМаршрутныйЛист.ЗаказГрузоотправителя.Контрагент = уатЗаказыНаТСОстатки.Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	втЗаказ.ЗаказНаТС КАК ЗаказНаТС,
	|	втЗаказ.Номенклатура КАК Номенклатура,
	|	втЗаказ.НоменклатураНаименование КАК НоменклатураНаименование,
	|	втЗаказ.КоличествоДокументЕдХрОстатков КАК КоличествоДокументЕдХрОстатков,
	|	втЗаказ.КоличествоДокумент КАК КоличествоДокумент,
	|	втЗаказ.ЕдиницаИзмеренияДокумент КАК ЕдиницаИзмеренияДокумент,
	|	втЗаказ.КоличествоОстатокЗаказ КАК КоличествоОстатокЗаказ,
	|	втЗаказ.ЕдиницаИзмеренияЗаказ КАК ЕдиницаИзмеренияЗаказ,
	|	втЗаказ.ЕдиницаХраненияОстатков КАК ЕдиницаХраненияОстатков,
	|	ЕСТЬNULL(уатЗаказыГрузоотправителей.Регистратор, ЗНАЧЕНИЕ(Документ.уатМаршрутныйЛист.ПустаяСсылка)) КАК Регистратор
	|ИЗ
	|	втЗаказ КАК втЗаказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.уатГрузыКПеревозке_уэ КАК уатЗаказыГрузоотправителей
	|		ПО втЗаказ.ЗаказНаТС = уатЗаказыГрузоотправителей.ЗаказГрузоотправителя
	|			И (ТИПЗНАЧЕНИЯ(уатЗаказыГрузоотправителей.Регистратор) = ТИП(Документ.уатМаршрутныйЛист))
	|ИТОГИ 
	|	МИНИМУМ(КоличествоДокументЕдХрОстатков),
	|	МИНИМУМ(КоличествоОстатокЗаказ),
	|	МИНИМУМ(ЕдиницаХраненияОстатков),
	|	МИНИМУМ(ЕдиницаИзмеренияДокумент),
	|	МИНИМУМ(Регистратор)
	|ПО
	|	ЗаказНаТС");
	
	Запрос.УстановитьПараметр("СсылкаМаршрутныйЛист",      ДокументОбъект.Ссылка); 
	
	ТипыТочкиРазгрузка = Новый Массив();
	ТипыТочкиРазгрузка.Добавить(Перечисления.уатТипыТочекМаршрута.Разгрузка);
	ТипыТочкиРазгрузка.Добавить(Перечисления.уатТипыТочекМаршрута.ДополнительнаяРазгрузка);

	Запрос.УстановитьПараметр("ТипыТочкиРазгрузка", ТипыТочкиРазгрузка);
	Запрос.УстановитьПараметр("ПричинаЗакрытияЗаказаОтклонен", Справочники.уатПричиныЗакрытияЗаказов.Отклонен);
	РезультатЗапроса = Запрос.Выполнить();
	
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	СтрокаСообщения = "";
	Пока Выборка.Следующий() цикл
		КоличествоПревышение = Выборка.КоличествоДокументЕдХрОстатков - Выборка.КоличествоОстатокЗаказ; //превышение в единице хранения остатков
		Если КоличествоПревышение > 0 Тогда
			Если ЗначениеЗаполнено(Выборка.Регистратор) Тогда
				СтрокаСообщения = "" + Символы.Таб + НСтр("en='Order for trucking:';ru='Заказ на ТС:'") + уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(Выборка.ЗаказНаТС);
				СтрокаСообщения = СтрокаСообщения + " " + НСтр("en='already posted in Routing lists:';ru='уже размещен в Маршрутных листах:'");
			Иначе
				СтрокаСообщения = "" + Символы.Таб + НСтр("en='Exceeded quantity for:';ru='Превышено количество для:'") + " " + Выборка.ЗаказНаТС;
			КонецЕсли;
			ДетальнаяВыборка = Выборка.Выбрать();
			Пока ДетальнаяВыборка.Следующий() Цикл
				Если ЗначениеЗаполнено(ДетальнаяВыборка.Регистратор) Тогда
					СтрокаСообщения = СтрокаСообщения + Символы.ПС + уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ДетальнаяВыборка.Регистратор);
				КонецЕсли;
			КонецЦикла;
			
			СтрокаСообщения = СтрокаСообщения + Символы.ПС
				+ НСтр("en='Remain:';ru='Доступный остаток:'") + " " + Выборка.КоличествоОстатокЗаказ + " " + Выборка.ЕдиницаХраненияОстатков;
				
			уатОбщегоНазначенияТиповые.СообщитьОбОшибке(СтрокаСообщения, Отказ, Заголовок);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ВыполнитьКонтрольЗаказыГрузоотправителей(ДокументОбъект, Отказ, Заголовок) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя,
	|	ВЫБОР
	|		КОГДА уатМаршрутныйЛистЗаказы.Номенклатура ССЫЛКА Справочник.Номенклатура
	|			ТОГДА уатМаршрутныйЛистЗаказы.Номенклатура
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	КОНЕЦ КАК Номенклатура,
	|	ВЫБОР
	|		КОГДА уатМаршрутныйЛистЗаказы.Номенклатура ССЫЛКА Справочник.уатГрузовыеМеста_уэ
	|			ТОГДА уатМаршрутныйЛистЗаказы.Номенклатура
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.уатГрузовыеМеста_уэ.ПустаяСсылка)
	|	КОНЕЦ КАК ГрузовоеМесто,
	|	уатМаршрутныйЛистЗаказы.Номенклатура КАК НоменклатураНаименование,
	|	СУММА(уатМаршрутныйЛистЗаказы.Количество) КАК Количество,
	|	уатМаршрутныйЛистЗаказы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СУММА(ВЫБОР
	|			КОГДА уатМаршрутныйЛистЗаказы.Номенклатура ССЫЛКА Справочник.Номенклатура
	|				ТОГДА ВЫРАЗИТЬ(уатМаршрутныйЛистЗаказы.Количество * уатМаршрутныйЛистЗаказы.ЕдиницаИзмерения.Коэффициент / уатМаршрутныйЛистЗаказы.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК ЧИСЛО(15, 3))
	|			ИНАЧЕ ВЫРАЗИТЬ(уатМаршрутныйЛистЗаказы.Количество КАК ЧИСЛО(15, 3))
	|		КОНЕЦ) КАК КоличествоВЕдиницеХраненияОстатков,
	|	уатМаршрутныйЛистЗаказы.ЕдиницаИзмеренияПоЗаказу КАК ЕдиницаИзмеренияПоЗаказу,
	|	СУММА(1) КАК КоличествоПунктовРазгрузки
	|ПОМЕСТИТЬ втМаршрутныйЛист
	|ИЗ
	|	Документ.уатМаршрутныйЛист.Заказы КАК уатМаршрутныйЛистЗаказы
	|ГДЕ
	|	уатМаршрутныйЛистЗаказы.Ссылка = &СсылкаМаршрутныйЛист
	|	И уатМаршрутныйЛистЗаказы.ТипТочкиМаршрута В(&ТипТочкиРазгрузка)
	|	И НЕ уатМаршрутныйЛистЗаказы.ПричинаЗакрытияЗаказа = ЗНАЧЕНИЕ(Справочник.уатПричиныЗакрытияЗаказов.Отклонен)
	|
	|СГРУППИРОВАТЬ ПО
	|	уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя,
	|	уатМаршрутныйЛистЗаказы.Номенклатура,
	|	уатМаршрутныйЛистЗаказы.ЕдиницаИзмерения,
	|	уатМаршрутныйЛистЗаказы.ЕдиницаИзмеренияПоЗаказу
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втМаршрутныйЛист.ЗаказГрузоотправителя КАК ЗаказНаТС,
	|	втМаршрутныйЛист.Номенклатура КАК Номенклатура,
	|	втМаршрутныйЛист.НоменклатураНаименование КАК НоменклатураНаименование,
	|	ВЫБОР
	|		КОГДА втМаршрутныйЛист.ЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам)
	|				И втМаршрутныйЛист.КоличествоПунктовРазгрузки = втМаршрутныйЛист.КоличествоВЕдиницеХраненияОстатков
	|				И втМаршрутныйЛист.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяССылка)
	|			ТОГДА 1
	|		ИНАЧЕ втМаршрутныйЛист.КоличествоВЕдиницеХраненияОстатков
	|	КОНЕЦ КАК КоличествоДокументЕдХрОстатков,
	|	втМаршрутныйЛист.Количество КАК КоличествоДокумент,
	|	втМаршрутныйЛист.ЕдиницаИзмерения КАК ЕдиницаИзмеренияДокумент,
	|	ЕСТЬNULL(уатЗаказыНаТСОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗаказ,
	|	ЕСТЬNULL(уатЗаказыНаТСОстатки.ЕдиницаИзмерения, втМаршрутныйЛист.ЕдиницаИзмеренияПоЗаказу) КАК ЕдиницаИзмеренияЗаказ,
	|	ВЫБОР
	|		КОГДА втМаршрутныйЛист.Номенклатура ССЫЛКА Справочник.Номенклатура
	|			ТОГДА втМаршрутныйЛист.Номенклатура.ЕдиницаХраненияОстатков
	|		ИНАЧЕ втМаршрутныйЛист.ЕдиницаИзмерения
	|	КОНЕЦ КАК ЕдиницаХраненияОстатков
	|ПОМЕСТИТЬ втЗаказ
	|ИЗ
	|	втМаршрутныйЛист КАК втМаршрутныйЛист
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.уатЗаказыГрузоотправителей.Остатки КАК уатЗаказыНаТСОстатки
	|		ПО втМаршрутныйЛист.ЗаказГрузоотправителя = уатЗаказыНаТСОстатки.ЗаказГрузоотправителя
	|			И втМаршрутныйЛист.Номенклатура = уатЗаказыНаТСОстатки.Номенклатура
	|			И втМаршрутныйЛист.ЕдиницаИзмеренияПоЗаказу = уатЗаказыНаТСОстатки.ЕдиницаИзмерения
	|			И втМаршрутныйЛист.ГрузовоеМесто = уатЗаказыНаТСОстатки.ГрузовоеМесто
	|			И втМаршрутныйЛист.ЗаказГрузоотправителя.Контрагент = уатЗаказыНаТСОстатки.Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	втЗаказ.ЗаказНаТС КАК ЗаказНаТС,
	|	втЗаказ.Номенклатура КАК Номенклатура,
	|	втЗаказ.НоменклатураНаименование КАК НоменклатураНаименование,
	|	втЗаказ.КоличествоДокументЕдХрОстатков КАК КоличествоДокументЕдХрОстатков,
	|	втЗаказ.КоличествоДокумент КАК КоличествоДокумент,
	|	втЗаказ.ЕдиницаИзмеренияДокумент КАК ЕдиницаИзмеренияДокумент,
	|	втЗаказ.КоличествоОстатокЗаказ КАК КоличествоОстатокЗаказ,
	|	втЗаказ.ЕдиницаИзмеренияЗаказ КАК ЕдиницаИзмеренияЗаказ,
	|	втЗаказ.ЕдиницаХраненияОстатков КАК ЕдиницаХраненияОстатков,
	|	ЕСТЬNULL(уатЗаказыГрузоотправителей.Регистратор, ЗНАЧЕНИЕ(Документ.уатМаршрутныйЛист.ПустаяСсылка)) КАК Регистратор
	|ИЗ
	|	втЗаказ КАК втЗаказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.уатЗаказыГрузоотправителей КАК уатЗаказыГрузоотправителей
	|		ПО втЗаказ.ЗаказНаТС = уатЗаказыГрузоотправителей.ЗаказГрузоотправителя
	|			И (ТИПЗНАЧЕНИЯ(уатЗаказыГрузоотправителей.Регистратор) = ТИП(Документ.уатМаршрутныйЛист))
	|ИТОГИ
	|	МИНИМУМ(КоличествоДокументЕдХрОстатков),
	|	МИНИМУМ(ЕдиницаИзмеренияДокумент),
	|	МИНИМУМ(КоличествоОстатокЗаказ),
	|	МИНИМУМ(ЕдиницаХраненияОстатков),
	|	МИНИМУМ(Регистратор)
	|ПО
	|	ЗаказНаТС");
	
	Запрос.УстановитьПараметр("СсылкаМаршрутныйЛист",      ДокументОбъект.Ссылка);
	
	ТипТочкиРазгрузка = Новый Массив();
	ТипТочкиРазгрузка.Добавить(Перечисления.уатТипыТочекМаршрута.Разгрузка);
	ТипТочкиРазгрузка.Добавить(Перечисления.уатТипыТочекМаршрута.ДополнительнаяРазгрузка);
	Запрос.УстановитьПараметр("ТипТочкиРазгрузка", ТипТочкиРазгрузка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка          = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	СтрокаСообщения = "";
	Пока Выборка.Следующий() Цикл
		КоличествоПревышение = Выборка.КоличествоДокументЕдХрОстатков - Выборка.КоличествоОстатокЗаказ; //превышение в единице хранения остатков
		Если КоличествоПревышение > 0 Тогда
			Если ЗначениеЗаполнено(Выборка.Регистратор) Тогда
				СтрокаСообщения = "" + Символы.Таб + НСтр("en='Order for trucking:';ru='Заказ на ТС:'") + уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(Выборка.ЗаказНаТС);
				СтрокаСообщения = СтрокаСообщения + " " + НСтр("en='already posted in Routing lists:';ru='уже размещен в Маршрутных листах:'");
			Иначе
				СтрокаСообщения = "" + Символы.Таб + НСтр("en='Exceeded quantity for:';ru='Превышено количество для:'") + " " + Выборка.ЗаказНаТС;
			КонецЕсли;
			ДетальнаяВыборка = Выборка.Выбрать();
			Пока ДетальнаяВыборка.Следующий() Цикл
				Если ЗначениеЗаполнено(ДетальнаяВыборка.Регистратор) Тогда
					СтрокаСообщения = СтрокаСообщения + Символы.ПС + уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ДетальнаяВыборка.Регистратор);
				КонецЕсли;
			КонецЦикла;
			СтрокаСообщения = СтрокаСообщения + Символы.ПС
				+ НСтр("en='Remain:';ru='Доступный остаток:'") + " " + Выборка.КоличествоОстатокЗаказ + " " + Выборка.ЕдиницаХраненияОстатков;
			уатОбщегоНазначенияТиповые.СообщитьОбОшибке(СтрокаСообщения, Отказ, Заголовок);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ВыполнитьКонтрольОбъемыПеревозок(ДокументОбъект, Отказ, Заголовок) Экспорт
	
	СтруктураОбъектовНастроек = Новый Структура("Организация, Подразделение, Пользователь", 
		ДокументОбъект.Организация, ДокументОбъект.Подразделение, ПользователиКлиентСервер.АвторизованныйПользователь());
	ВидКонтроля = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(
		СтруктураОбъектовНастроек, "КонтрольЗакрепленияОбъемовЗаПеревозчиками");
	Если ВидКонтроля = Перечисления.уатВидыКонтроля.Разрешать Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	уатОбъемыПеревозок_уэ.ПланированиеРаботыТС КАК ПланированиеРаботыТС,
	|	уатОбъемыПеревозок_уэ.ПланированиеРаботыТС.ДатаПланирования КАК ДатаПланирования,
	|	уатОбъемыПеревозок_уэ.Сценарий КАК Сценарий,
	|	уатОбъемыПеревозок_уэ.Сценарий.Периодичность КАК Периодичность
	|ИЗ
	|	РегистрНакопления.уатОбъемыПеревозок_уэ КАК уатОбъемыПеревозок_уэ
	|ГДЕ
	|	уатОбъемыПеревозок_уэ.Регистратор = &Регистратор");
	Запрос.УстановитьПараметр("Регистратор", ДокументОбъект.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		НачалоПериода = Выборка.ДатаПланирования;
		КонецПериода = Выборка.ДатаПланирования;
		уатОбщегоНазначенияТиповые.уатВыровнятьПериод(НачалоПериода, КонецПериода, Выборка.Периодичность);
		ПланированиеРаботыТС = Выборка.ПланированиеРаботыТС;
		Сценарий = Выборка.Сценарий;
	Иначе
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатОбъемыПеревозок_уэОбороты.Маршрут КАК Маршрут,
	|	уатОбъемыПеревозок_уэОбороты.ВидПеревозки КАК ВидПеревозки,
	|	уатОбъемыПеревозок_уэОбороты.НаправлениеПеревозки КАК НаправлениеПеревозки,
	|	уатОбъемыПеревозок_уэОбороты.ОбъектСтроительства КАК ОбъектСтроительства,
	|	уатОбъемыПеревозок_уэОбороты.ВидТС КАК ВидТС,
	|	уатОбъемыПеревозок_уэОбороты.ПланированиеРаботыТС КАК ПланированиеРаботыТС
	|ПОМЕСТИТЬ втАналитикиМаршрутногоЛиста
	|ИЗ
	|	РегистрНакопления.уатОбъемыПеревозок_уэ.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			Регистратор,
	|			ПланированиеРаботыТС = &ПланированиеРаботыТС
	|				И Сценарий = &Сценарий
	|				И Организация = &Организация
	|				И Подразделение = &Подразделение
	|				И Перевозчик = &Перевозчик
	|				И Договор = &Договор) КАК уатОбъемыПеревозок_уэОбороты
	|ГДЕ
	|	уатОбъемыПеревозок_уэОбороты.Регистратор = &МаршрутныйЛист
	|
	|СГРУППИРОВАТЬ ПО
	|	уатОбъемыПеревозок_уэОбороты.НаправлениеПеревозки,
	|	уатОбъемыПеревозок_уэОбороты.ВидПеревозки,
	|	уатОбъемыПеревозок_уэОбороты.ВидТС,
	|	уатОбъемыПеревозок_уэОбороты.ОбъектСтроительства,
	|	уатОбъемыПеревозок_уэОбороты.Маршрут,
	|	уатОбъемыПеревозок_уэОбороты.ПланированиеРаботыТС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатОбъемыПеревозокОбороты.Организация КАК Организация,
	|	уатОбъемыПеревозокОбороты.Подразделение КАК Подразделение,
	|	уатОбъемыПеревозокОбороты.Перевозчик КАК Перевозчик,
	|	уатОбъемыПеревозокОбороты.Договор КАК Договор,
	|	уатОбъемыПеревозокОбороты.Сценарий КАК Сценарий,
	|	уатОбъемыПеревозокОбороты.ПланированиеРаботыТС КАК ПланированиеРаботыТС,
	|	уатОбъемыПеревозокОбороты.ПереданоВыработкиОборот КАК КоличествоПередано,
	|	уатПланированиеРаботыТССоставПлана.Количество КАК КоличествоПлан,
	|	втАналитикиМаршрутногоЛиста.Маршрут КАК Маршрут,
	|	втАналитикиМаршрутногоЛиста.ВидПеревозки КАК ВидПеревозки,
	|	втАналитикиМаршрутногоЛиста.НаправлениеПеревозки КАК НаправлениеПеревозки,
	|	втАналитикиМаршрутногоЛиста.ОбъектСтроительства КАК ОбъектСтроительства,
	|	втАналитикиМаршрутногоЛиста.ВидТС КАК ВидТС
	|ИЗ
	|	РегистрНакопления.уатОбъемыПеревозок_уэ.Обороты(
	|			&НачалоПериода,
	|			&КонецПериода,
	|			,
	|			ПланированиеРаботыТС = &ПланированиеРаботыТС
	|				И Сценарий = &Сценарий
	|				И Организация = &Организация
	|				И Подразделение = &Подразделение
	|				И Перевозчик = &Перевозчик
	|				И Договор = &Договор) КАК уатОбъемыПеревозокОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатПланированиеРаботыТС.СоставПлана КАК уатПланированиеРаботыТССоставПлана
	|		ПО уатОбъемыПеревозокОбороты.ПланированиеРаботыТС = уатПланированиеРаботыТССоставПлана.Ссылка
	|			И уатОбъемыПеревозокОбороты.Перевозчик = уатПланированиеРаботыТССоставПлана.Контрагент
	|			И уатОбъемыПеревозокОбороты.Договор = уатПланированиеРаботыТССоставПлана.Договор
	|			И (уатОбъемыПеревозокОбороты.Маршрут = уатПланированиеРаботыТССоставПлана.Маршрут
	|				ИЛИ (уатОбъемыПеревозокОбороты.Маршрут = ЗНАЧЕНИЕ(Справочник.уатМаршруты.ПустаяСсылка)
	|					ИЛИ уатОбъемыПеревозокОбороты.Маршрут = ЗНАЧЕНИЕ(Справочник.уатПунктыНазначения.ПустаяСсылка)
	|					ИЛИ уатОбъемыПеревозокОбороты.Маршрут = НЕОПРЕДЕЛЕНО)
	|					И (уатПланированиеРаботыТССоставПлана.Маршрут = ЗНАЧЕНИЕ(Справочник.уатМаршруты.ПустаяСсылка)
	|						ИЛИ уатПланированиеРаботыТССоставПлана.Маршрут = ЗНАЧЕНИЕ(Справочник.уатПунктыНазначения.ПустаяСсылка)
	|						ИЛИ уатПланированиеРаботыТССоставПлана.Маршрут = ЗНАЧЕНИЕ(Справочник.уатМаршруты.ПустаяСсылка)))
	|			И (уатОбъемыПеревозокОбороты.ВидПеревозки = уатПланированиеРаботыТССоставПлана.ВидПеревозки
	|				ИЛИ уатПланированиеРаботыТССоставПлана.ВидПеревозки = ЗНАЧЕНИЕ(Справочник.уатВидыПеревозок.ПустаяСсылка))
	|			И (уатОбъемыПеревозокОбороты.НаправлениеПеревозки = уатПланированиеРаботыТССоставПлана.НаправлениеПеревозки
	|				ИЛИ уатПланированиеРаботыТССоставПлана.НаправлениеПеревозки = ЗНАЧЕНИЕ(Справочник.уатНаправленияПеревозок.ПустаяСсылка))
	|			И (уатОбъемыПеревозокОбороты.ОбъектСтроительства = уатПланированиеРаботыТССоставПлана.ОбъектСтроительства
	|				ИЛИ уатПланированиеРаботыТССоставПлана.ОбъектСтроительства = ЗНАЧЕНИЕ(Справочник.уатОбъектыСтроительства.ПустаяСсылка))
	|			И (уатОбъемыПеревозокОбороты.ВидТС = уатПланированиеРаботыТССоставПлана.ДетализацияПланирования
	|				ИЛИ (уатПланированиеРаботыТССоставПлана.ДетализацияПланирования = ЗНАЧЕНИЕ(Справочник.уатМоделиТС.ПустаяСсылка)
	|					ИЛИ уатПланированиеРаботыТССоставПлана.ДетализацияПланирования = ЗНАЧЕНИЕ(Справочник.уатТипыТС.ПустаяСсылка)
	|					ИЛИ уатПланированиеРаботыТССоставПлана.ДетализацияПланирования = НЕОПРЕДЕЛЕНО)
	|					И (уатОбъемыПеревозокОбороты.ВидТС = ЗНАЧЕНИЕ(Справочник.уатМоделиТС.ПустаяСсылка)
	|						ИЛИ уатОбъемыПеревозокОбороты.ВидТС = ЗНАЧЕНИЕ(Справочник.уатТипыТС.ПустаяСсылка)
	|						ИЛИ уатОбъемыПеревозокОбороты.ВидТС = НЕОПРЕДЕЛЕНО))
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втАналитикиМаршрутногоЛиста КАК втАналитикиМаршрутногоЛиста
	|		ПО уатОбъемыПеревозокОбороты.Маршрут = втАналитикиМаршрутногоЛиста.Маршрут
	|			И уатОбъемыПеревозокОбороты.ВидПеревозки = втАналитикиМаршрутногоЛиста.ВидПеревозки
	|			И уатОбъемыПеревозокОбороты.НаправлениеПеревозки = втАналитикиМаршрутногоЛиста.НаправлениеПеревозки
	|			И уатОбъемыПеревозокОбороты.ОбъектСтроительства = втАналитикиМаршрутногоЛиста.ОбъектСтроительства
	|			И уатОбъемыПеревозокОбороты.ВидТС = втАналитикиМаршрутногоЛиста.ВидТС
	|			И уатОбъемыПеревозокОбороты.ПланированиеРаботыТС = втАналитикиМаршрутногоЛиста.ПланированиеРаботыТС
	|ГДЕ
	|	уатОбъемыПеревозокОбороты.ПланированиеРаботыТС.Сценарий.ПланированиеОбъемовВПроцентах = ЛОЖЬ
	|	И уатОбъемыПеревозокОбороты.ПереданоВыработкиОборот > уатПланированиеРаботыТССоставПлана.Количество");
	Запрос.УстановитьПараметр("НачалоПериода", НачалоПериода);
	Запрос.УстановитьПараметр("КонецПериода", КонецПериода);
	Запрос.УстановитьПараметр("ПланированиеРаботыТС", ПланированиеРаботыТС);
	Запрос.УстановитьПараметр("Сценарий", Сценарий);
	Запрос.УстановитьПараметр("Организация", ДокументОбъект.Организация);
	Запрос.УстановитьПараметр("Подразделение", ДокументОбъект.Подразделение);
	Запрос.УстановитьПараметр("Перевозчик", ДокументОбъект.Контрагент);
	Запрос.УстановитьПараметр("Договор", ДокументОбъект.ДоговорКонтрагента);
	Запрос.УстановитьПараметр("МаршрутныйЛист", ДокументОбъект.Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекстНСтр = НСтр("ru = '%1: Превышение объемов перевозок у перевозчика %2 по %3 %4 - плановое количество %5, переданное по Маршрутным листам количество %6'");
		МассивАналитик = Новый Массив;
		Если ЗначениеЗаполнено(Выборка.Маршрут) Тогда
			МассивАналитик.Добавить(Выборка.Маршрут);
		КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.ВидПеревозки) Тогда
			МассивАналитик.Добавить(Выборка.ВидПеревозки);
		КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.НаправлениеПеревозки) Тогда
			МассивАналитик.Добавить(Выборка.НаправлениеПеревозки);
		КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.ОбъектСтроительства) Тогда
			МассивАналитик.Добавить(Выборка.ОбъектСтроительства);
		КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.ВидТС) Тогда
			МассивАналитик.Добавить(Выборка.ВидТС);
		КонецЕсли;
		ТекстНСтр = СтрШаблон(ТекстНСтр,
			Заголовок,
			ДокументОбъект.Контрагент,
			?(МассивАналитик.Количество() > 1, НСтр("ru = 'аналитикам'"), НСтр("ru = 'аналитике'")),
			СтрСоединить(МассивАналитик, ", "),
			Выборка.КоличествоПлан,
			Выборка.КоличествоПередано);
		Если ВидКонтроля = Перечисления.уатВидыКонтроля.Предупреждать Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстНСтр);
		ИначеЕсли ВидКонтроля = Перечисления.уатВидыКонтроля.Запрещать Тогда
			ОбщегоНазначения.СообщитьПользователю(ТекстНСтр,,,, Отказ);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция ПолучитьПосещениеСкладаWMS(МаршрутныйЛист, АдресПункта) Экспорт
	
	Результат = Новый Структура("Организация, Водитель, ДокументВодителя, ТС, ФИОЭкспедитора, СоставЗаказа,
		|Активность, ПунктСкладаWMSВыполнен");
	Результат.Организация = МаршрутныйЛист.Организация;
	Результат.Водитель = МаршрутныйЛист.Водитель1;
	СерияДокумента = "";
	НомерДокумента = "";
	КатегорияДокумента = "";
	Если ЗначениеЗаполнено(МаршрутныйЛист.Водитель1) 
		И ТипЗнч(МаршрутныйЛист.Водитель1) = Тип("СправочникСсылка.Сотрудники") Тогда
		уатОбщегоНазначения.уатУдостоверениеВодителя(МаршрутныйЛист.Водитель1, СерияДокумента, НомерДокумента, КатегорияДокумента);	
	ИначеЕсли ЗначениеЗаполнено(МаршрутныйЛист.Водитель1) 
		И ТипЗнч(МаршрутныйЛист.Водитель1) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Запрос = Новый Запрос;
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	ДокументыФизическихЛицСрезПоследних.Физлицо КАК Физлицо,
		|	ДокументыФизическихЛицСрезПоследних.ВидДокумента КАК ВидДокумента,
		|	ДокументыФизическихЛицСрезПоследних.Серия КАК Серия,
		|	ДокументыФизическихЛицСрезПоследних.Номер КАК Номер
		|ИЗ
		|	РегистрСведений.ДокументыФизическихЛиц.СрезПоследних(
		|			,
		|			Физлицо = &ФизЛицо
		|				И ВидДокумента = &ВидДокумента) КАК ДокументыФизическихЛицСрезПоследних";
		Запрос.УстановитьПараметр("Физлицо", МаршрутныйЛист.Водитель1);
		Запрос.УстановитьПараметр("ВидДокумента", Справочники.ВидыДокументовФизическихЛиц.ВодительскоеУдостоверение);
		РезультатЗапроса = Запрос.Выполнить();
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			СерияДокумента = Выборка.Серия;
			НомерДокумента = Выборка.Номер;
		КонецЕсли;
	КонецЕсли;
	Результат.ДокументВодителя = ?(СокрЛП(СерияДокумента)="","",СокрЛП(СерияДокумента) + " ") + НомерДокумента;
	Результат.ТС = МаршрутныйЛист.ТС;
	Результат.ФИОЭкспедитора = уатОбщегоНазначения.уатФИОСотрудникаПолноеСтрокой(МаршрутныйЛист.Сотрудник1, МаршрутныйЛист.Дата);
	Результат.СоставЗаказа = Новый Массив();
	Результат.Активность = МаршрутныйЛист.Проведен;
	Результат.ПунктСкладаWMSВыполнен = Ложь;
	
	НайденныеСтроки = МаршрутныйЛист.Заказы.НайтиСтроки(Новый Структура("Пункт", АдресПункта));
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат Результат;
	КонецЕсли;
	
	// Анализируем только первое посещение склада. Случай, когда посещений складов более 1, считается некорректным.
	ПрибытиеНаСкладПлан = НайденныеСтроки[0].ПрибытиеПлан;
	СтоянкаНаСкладе = НайденныеСтроки[0].СтоянкаИзПункта;
	Если ПрибытиеНаСкладПлан > '19700101000000' Тогда
		НайденныеСтроки = МаршрутныйЛист.Заказы.НайтиСтроки(Новый Структура("Пункт, ПрибытиеПлан", АдресПункта, ПрибытиеНаСкладПлан));
		Для Каждого ТекСтрока Из НайденныеСтроки Цикл
			СтоянкаНаСкладе = уатЗащищенныеФункцииСервер.СложитьВремя(СтоянкаНаСкладе, ТекСтрока.Стоянка);
		КонецЦикла;
		УбытиеСоСкладаПлан = уатЗащищенныеФункцииСервер.СложитьВремя(ПрибытиеНаСкладПлан, СтоянкаНаСкладе);
	Иначе
		УбытиеСоСкладаПлан = '00010101';
	КонецЕсли;

	ПредЗаказ = Неопределено;
	ПорядокЗаказа = 1;
	Для Каждого ТекСтрока Из НайденныеСтроки Цикл
		Если ПредЗаказ = ТекСтрока.ЗаказГрузоотправителя 
			Или Не ЗначениеЗаполнено(ТекСтрока.ЗаказГрузоотправителя) Тогда
			Продолжить;
		КонецЕсли;
		ДанныеЗаказа = Новый Структура("ИД, ВидРабот, Порядок, НомерКИС, ДатаКИС, ДатаНачалаОперации, ДатаОкончанияОперации");
		ДанныеЗаказа.ИД = Строка(ТекСтрока.ЗаказГрузоотправителя.УникальныйИдентификатор());
		ДанныеЗаказа.ВидРабот = уатИнтеграции_уэ.ПредставлениеТипаТочкиМаршрутаДляWMS(ТекСтрока.ТипТочкиМаршрута);
		ДанныеЗаказа.Порядок = ПорядокЗаказа;
		ДанныеЗаказаСтруктура = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(ТекСтрока.ЗаказГрузоотправителя, 
			"НомерПоУчетуЗаказчика, ДатаВходящегоДокумента");
		ДанныеЗаказа.НомерКИС = ДанныеЗаказаСтруктура.НомерПоУчетуЗаказчика;
		ДанныеЗаказа.ДатаКИС = ДанныеЗаказаСтруктура.ДатаВходящегоДокумента;
		ДанныеЗаказа.ДатаНачалаОперации = ПрибытиеНаСкладПлан;
		ДанныеЗаказа.ДатаОкончанияОперации = УбытиеСоСкладаПлан;
		Если ЗначениеЗаполнено(ДанныеЗаказа.НомерКИС) И ЗначениеЗаполнено(ДанныеЗаказа.ДатаКИС) Тогда
			Результат.СоставЗаказа.Добавить(ДанныеЗаказа);
		КонецЕсли;
		
		Результат.ПунктСкладаWMSВыполнен = ТекСтрока.Выполнен;
		
		ПредЗаказ = ТекСтрока.ЗаказГрузоотправителя;
		ПорядокЗаказа = ПорядокЗаказа + 1;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

// Процедура рассчитывает итоги по МЛ: выработку, доходы и расходы, зарплату
//
Процедура РасчетИтогов(ДокументОбъект, Отказ = Ложь) Экспорт
	РассчитатьВыработкуПоЗаказам(ДокументОбъект);
	
	ДопПараметры = Новый Структура("ЗаполнятьТЧДоходы, ЗаполнятьТЧРасходы", Ложь, Ложь);
	СтруктураДокумента = уатОбщегоНазначенияКлиентСервер.СтруктураДокумента(ДокументОбъект, "уатМаршрутныйЛист", ДопПараметры);
	
	уатРасчетыПоТарифам_уэ.РассчитатьУслугиПоМаршрутномуЛисту(СтруктураДокумента, "Доходы");
	уатРасчетыПоТарифамКлиентСервер_уэ.ЗаполнитьДоходыРасходыИзСтруктуры(ДокументОбъект, СтруктураДокумента, "Доходы", "уатМаршрутныйЛист");
	
	уатРасчетыПоТарифам_уэ.РассчитатьУслугиПоМаршрутномуЛисту(СтруктураДокумента, "Расходы", ДокументОбъект.Контрагент);
	уатРасчетыПоТарифамКлиентСервер_уэ.ЗаполнитьДоходыРасходыИзСтруктуры(ДокументОбъект, СтруктураДокумента, "Расходы", "уатМаршрутныйЛист");
	
	уатРасчетыПоТарифам_уэ.РассчитатьУслугиПоМаршрутномуЛисту(СтруктураДокумента, "Расходы", ДокументОбъект.Контрагент,, Истина);
	уатРасчетыПоТарифамКлиентСервер_уэ.ЗаполнитьДоходыРасходыИзСтруктуры(ДокументОбъект, СтруктураДокумента, "Расходы", "уатМаршрутныйЛист", Истина);
	
	РасчетЗП(ДокументОбъект);
	РасчетРасходаГСМ(ДокументОбъект, Отказ);
	
	ДокументОбъект.Рассчитан = НЕ Отказ;
	
	Если ДокументОбъект.Рассчитан
		И ДокументОбъект.ДатаИВремяВыполнения <> '00010101'
		И ДокументОбъект.ДатаЗакрытия = '00010101' Тогда
		ДокументОбъект.ДатаЗакрытия = ДатаЗакрытияПоУмолчанию(ДокументОбъект);
	КонецЕсли;
	
	РассчитатьСтатусДокумента(ДокументОбъект);
КонецПроцедуры

// Расчитывает итоговые показатели (по кнопке "Рассчитать" внизу формы документа)
//
// Параметры:
//  ОбщееВремяСтоянок	 - 	 - 
//  ОбщийВесТары		 - 	 - 
//
Процедура РассчитатьИтоговыеПоказатели(ДокументОбъект, ОбщееВремяСтоянок = 0, ОбщийВесТары = 0) Экспорт
	
	ОбщееВремяСтоянок = 0;
	ОбщийВесТары      = 0;
	
	ДокументОбъект.ВесБрутто      = 0;
	ДокументОбъект.Объем          = 0;
	ДокументОбъект.КоличествоМест = 0;
	ДокументОбъект.Расстояние     = 0;
	ДокументОбъект.ПробегСГрузом  = 0;
	ДокументОбъект.ПробегПорожний = 0;
	ДокументОбъект.ВремяВПути     = 0;
	
	флПланФакт = Константы.уатУчетПланФактаПоМаршрутуВМаршрутныхЛистах.Получить(); 
	РасчетТары = Константы.уатИспользоватьРасчетТары_уэ.Получить();

	
	// Таблица для определения порожнего пробега. Считаем что машина идет порожняком, если таблица пуста.
	тблГрузы = Новый ТаблицаЗначений;
	тблГрузы.Колонки.Добавить("Заказ");
	тблГрузы.Колонки.Добавить("Номенклатура");
	тблГрузы.Колонки.Добавить("ЕдиницаИзмерения");
	тблГрузы.Колонки.Добавить("Количество");
	
	ПредПункт = Неопределено;
	ПредЗаказ = Неопределено;
		
	Для Каждого ТекСтрока Из ДокументОбъект.Заказы Цикл
		Если Не ЗначениеЗаполнено(ТекСтрока.GUIDСтроки) Тогда 
			ТекСтрока.GUIDСтроки = Новый УникальныйИдентификатор();
		КонецЕсли;
		
		// Вес, объем, количество мест.
		Если ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка 
			ИЛИ ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяПогрузка Тогда
			
			ДокументОбъект.ВесБрутто      = ДокументОбъект.ВесБрутто + ТекСтрока.ВесБрутто;
			ДокументОбъект.Объем          = ДокументОбъект.Объем + ТекСтрока.Объем;
			ДокументОбъект.КоличествоМест = ДокументОбъект.КоличествоМест + ТекСтрока.КоличествоМест; 
			Если РасчетТары Тогда
				ОбщийВесТары   = ОбщийВесТары + ТекСтрока.ВесТары;
			КонецЕсли;
		КонецЕсли;
		
		// Обновляем таблицу грузов для расчета порожнего пробега.
		Если (ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка  
			ИЛИ ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяПогрузка
			ИЛИ ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка
			ИЛИ ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяРазгрузка)
			И ТекСтрока.Количество > 0 Тогда
			
			// Добавляем строку груза.
			НоваяСтрока                  = тблГрузы.Добавить();
			НоваяСтрока.Заказ            = ТекСтрока.ЗаказГрузоотправителя;
			НоваяСтрока.Номенклатура     = ТекСтрока.Номенклатура;
			НоваяСтрока.ЕдиницаИзмерения = ТекСтрока.ЕдиницаИзмерения;
			НоваяСтрока.Количество       = ТекСтрока.Количество *
				?(ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка
				ИЛИ ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяПогрузка, 1, -1);
			тблГрузы.Свернуть("Заказ, Номенклатура, ЕдиницаИзмерения", "Количество");
			
			// Теперь нужно удалить строки с количеством = 0.
			мсвСтрокиУдалить = тблГрузы.НайтиСтроки(Новый Структура("Количество", 0));
			Для Каждого ТекСтрокаГруз Из мсвСтрокиУдалить Цикл
				тблГрузы.Удалить(ТекСтрокаГруз);
			КонецЦикла;
		КонецЕсли;
		
		// Время стоянки, указываемое в заказах, прибавляется по каждому заказу.
		Если ПредЗаказ <> ТекСтрока.ЗаказГрузоотправителя Тогда
			ОбщееВремяСтоянок = уатЗащищенныеФункцииСервер.СложитьВремя(ОбщееВремяСтоянок, ТекСтрока.Стоянка);
		КонецЕсли;
		
		// Время в пути, время стоянки.
		Если ПредПункт <> ТекСтрока.Пункт Тогда 
			// Время стоянки, указываемое в пунктах, прибавляется для каждого пункта.
			ОбщееВремяСтоянок = уатЗащищенныеФункцииСервер.СложитьВремя(ОбщееВремяСтоянок, ТекСтрока.СтоянкаИзПункта);
			
			ДокументОбъект.ВремяВПути = уатЗащищенныеФункцииСервер.СложитьВремя(ДокументОбъект.ВремяВПути, ТекСтрока.Время);
			
			ПредПункт  = ТекСтрока.Пункт;
		КонецЕсли;
		
		// Пробег порожний и пробег с грузом.
		СледПункт = ?(ТекСтрока.НомерСтроки < ДокументОбъект.Заказы.Количество(), ДокументОбъект.Заказы[ТекСтрока.НомерСтроки].Пункт, Неопределено);
		Если СледПункт <> ТекСтрока.Пункт Тогда
			Если тблГрузы.Количество() = 0 Тогда
				ДокументОбъект.ПробегПорожний = ДокументОбъект.ПробегПорожний + ТекСтрока.Расстояние;
			Иначе
				ДокументОбъект.ПробегСГрузом  = ДокументОбъект.ПробегСГрузом + ТекСтрока.Расстояние;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Пробег общий.
	ДокументОбъект.Расстояние = ДокументОбъект.ПробегПорожний + ДокументОбъект.ПробегСГрузом;

КонецПроцедуры

// Процедура рассчитывает статус МЛ и записывает значение в реквизит Статус
//
Процедура РассчитатьСтатусДокумента(ДокументОбъект) Экспорт
	КоличПунктовВсего = 0;
	КоличПунктовВыполнено = 0; 
	КоличСлужебныхПунктов = 0;
	ТекПункт = Неопределено;
	ТекПунктПройден = Истина;
	
	Для Каждого ТекСтрока Из ДокументОбъект.Заказы Цикл
		ТекПунктПройден = ТекПунктПройден И ТекСтрока.Выполнен;
		Если ТекСтрока.Пункт <> ТекПункт Тогда
			КоличПунктовВсего = КоличПунктовВсего + 1;
			Если ТекПунктПройден Тогда
				КоличПунктовВыполнено = КоличПунктовВыполнено + 1;
			ИначеЕсли (НЕ ЗначениеЗаполнено(ТекСтрока.ЗаказГрузоотправителя) 
					И ТипЗнч(ТекСтрока.Пункт) = Тип("СправочникСсылка.уатПунктыНазначения")
					И ТекСтрока.Пункт.ТипПункта.Служебный) Тогда
				КоличСлужебныхПунктов = КоличСлужебныхПунктов + 1;
			КонецЕсли;
			ТекПункт = ТекСтрока.Пункт;
			ТекПунктПройден = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если КоличПунктовВыполнено + КоличСлужебныхПунктов > 0
		И КоличПунктовВыполнено + КоличСлужебныхПунктов = КоличПунктовВсего Тогда
		Если ДокументОбъект.Рассчитан Тогда
			ДокументОбъект.Статус = "Рассчитан";
		Иначе
			ДокументОбъект.Статус = "Выполнен";
		КонецЕсли;
	ИначеЕсли КоличПунктовВыполнено > 1 Тогда
		ДокументОбъект.Статус = "Частично выполнен";
	ИначеЕсли КоличПунктовВыполнено = 1 Тогда
		ДокументОбъект.Статус = "Отправлен";
	Иначе
		ДокументОбъект.Статус = "Новый";
	КонецЕсли;
КонецПроцедуры

// Функция возвращает дату закрытия МЛ по-умолчанию
//
Функция ДатаЗакрытияПоУмолчанию(ДокументОбъект, Знач ЗначениеПриНеудаче = Неопределено) Экспорт
	Если ЗначениеЗаполнено(ДокументОбъект.ДатаИВремяВыполнения) Тогда
		Рез = ДокументОбъект.ДатаИВремяВыполнения;
	Иначе
		ДатаВыполненияТЧЗаказы = '00010101';
		Для Каждого ТекСтрока Из ДокументОбъект.Заказы Цикл
			Если ТекСтрока.Выполнен Тогда
				ДатаВыполненияТЧЗаказы = Макс(ТекСтрока.ДатаВыполнения, ДатаВыполненияТЧЗаказы);
			КонецЕсли;
		КонецЦикла;
		Если ЗначениеЗаполнено(ДатаВыполненияТЧЗаказы) Тогда
			Рез = ДатаВыполненияТЧЗаказы;
		Иначе
			Если ЗначениеПриНеудаче = Неопределено Тогда
				Рез = ДокументОбъект.Дата;
			Иначе
				Рез = ЗначениеПриНеудаче;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Рез;
КонецФункции

Процедура ЗакрепитьПеревозчикаЗаМаршрутнымЛистом(МаршрутныйЛист) Экспорт
	
	Если Не МаршрутныйЛист.ПринадлежностьПеревозки = Перечисления.уатПринадлежностьТС.Привлеченное Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|уатПривязкаМаршрутныхЛистовКПеревозчикам_уэСрезПоследних.Период КАК Период,
	|уатПривязкаМаршрутныхЛистовКПеревозчикам_уэСрезПоследних.Организация КАК Организация,
	|уатПривязкаМаршрутныхЛистовКПеревозчикам_уэСрезПоследних.Подразделение КАК Подразделение,
	|уатПривязкаМаршрутныхЛистовКПеревозчикам_уэСрезПоследних.МаршрутныйЛист КАК МаршрутныйЛист,
	|уатПривязкаМаршрутныхЛистовКПеревозчикам_уэСрезПоследних.Перевозчик КАК Перевозчик,
	|уатПривязкаМаршрутныхЛистовКПеревозчикам_уэСрезПоследних.Договор КАК Договор
	|ИЗ
	|	РегистрСведений.уатПривязкаМаршрутныхЛистовКПеревозчикам_уэ.СрезПоследних(
	|			,
	|			Организация = &Организация
	|			И Подразделение = &Подразделение
	|			И МаршрутныйЛист = &МаршрутныйЛист
	|			И Перевозчик = &Перевозчик
	|			И Договор = &Договор) КАК уатПривязкаМаршрутныхЛистовКПеревозчикам_уэСрезПоследних");
	Запрос.УстановитьПараметр("Организация", МаршрутныйЛист.Организация);
	Запрос.УстановитьПараметр("Подразделение", МаршрутныйЛист.Подразделение);
	Запрос.УстановитьПараметр("МаршрутныйЛист", МаршрутныйЛист);
	Запрос.УстановитьПараметр("Перевозчик", МаршрутныйЛист.Контрагент);
	Запрос.УстановитьПараметр("Договор", МаршрутныйЛист.ДоговорКонтрагента);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		// Маршрутный лист уже закреплен за указанным в документе перевозчиком
		Возврат;
	КонецЕсли;
	
	ЗаписьРегистра = РегистрыСведений.уатПривязкаМаршрутныхЛистовКПеревозчикам_уэ.СоздатьМенеджерЗаписи();
	ЗаписьРегистра.Период = ТекущаяДатаСеанса();
	ЗаписьРегистра.Организация = МаршрутныйЛист.Организация;
	ЗаписьРегистра.Подразделение = МаршрутныйЛист.Подразделение;
	ЗаписьРегистра.МаршрутныйЛист = МаршрутныйЛист;
	ЗаписьРегистра.Перевозчик = МаршрутныйЛист.Контрагент;
	ЗаписьРегистра.Договор = МаршрутныйЛист.ДоговорКонтрагента;
	ЗаписьРегистра.Записать();
	
	// Уведомления
	уатОбщегоНазначения_уэ.СформироватьУведомление(МаршрутныйЛист,
		Перечисления.уатТипыСобытийДляУведомления_уэ.ЗакреплениеМаршрутногоЛистаЗаПеревозчиком);
	
КонецПроцедуры

#Область РасчетВыработки

// Процедура выполняет расчет выработки по МЛ с детализацией по Заказам
//
Процедура РассчитатьВыработкуПоЗаказам(ДокументОбъект) Экспорт
	// очистка выработки перед заполнением
	Сч = ДокументОбъект.ВыработкаТСиСотрудников.Количество();
	Пока Сч >= 1 Цикл
		Сч = Сч - 1;
		
		ТекСтрока = ДокументОбъект.ВыработкаТСиСотрудников[Сч];
		
		// строки с ручным вводом остаются
		Если ТекСтрока.РучнойВвод Тогда
			Продолжить;
		КонецЕсли;
		
		ДокументОбъект.ВыработкаТСиСотрудников.Удалить(Сч);
	КонецЦикла;
	
	флПланФакт = Константы.уатУчетПланФактаПоМаршрутуВМаршрутныхЛистах.Получить();
	
	Если Константы.уатЕдиницаИзмеренияВеса.Получить() = Перечисления.уатЕдиницыИзмеренияВеса.Килограмм Тогда 
		КоэфВеса = 1000;
	Иначе 
		КоэфВеса = 1;
	КонецЕсли;
	
	Если Константы.уатЕдиницаИзмеренияОбъема.Получить() = Перечисления.уатЕдиницыИзмеренияОбъема.Литр Тогда 
		КоэфОбъема = 1000;
	Иначе 
		КоэфОбъема = 1;
	КонецЕсли;
	
	мсвЗаказы = Новый Массив;
	Для Каждого ТекЗаказ Из ДокументОбъект.Заказы Цикл
		Если мсвЗаказы.Найти(ТекЗаказ.ЗаказГрузоотправителя) = Неопределено Тогда
			мсвЗаказы.Добавить(ТекЗаказ.ЗаказГрузоотправителя);
		КонецЕсли;
	КонецЦикла;
	
	// состав грузов в текущей точке маршрута
	тблГрузы = Новый ТаблицаЗначений;
	тблГрузы.Колонки.Добавить("Заказ");
	тблГрузы.Колонки.Добавить("Номенклатура");
	тблГрузы.Колонки.Добавить("ЕдиницаИзмерения");
	тблГрузы.Колонки.Добавить("Количество");
	
	// Временные таблицы для расчета по параметрам выработки КоличествоТочекПоВидуОперации и КоличествоТочекПоТипуПункта, и другим.
	тблПунктыПоЗаказу = Новый ТаблицаЗначений;
	тблПунктыПоЗаказу.Колонки.Добавить("Заказ"); 
	
	тблТочкиПоТипам = Новый ТаблицаЗначений();
	тблТочкиПоТипам.Колонки.Добавить("Заказ", Новый ОписаниеТипов("ДокументСсылка.уатЗаказГрузоотправителя"));
	тблТочкиПоТипам.Колонки.Добавить("ТипТочки",   Новый ОписаниеТипов("ПеречислениеСсылка.уатТипыТочекМаршрута"));
	тблТочкиПоТипам.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	тблТочкиПоТипам.Колонки.Добавить("КоличествоПлан", Новый ОписаниеТипов("Число"));
	тблТочкиПоТипам.Колонки.Добавить("СпособВводаЗначений", Новый ОписаниеТипов("ПеречислениеСсылка.уатСпособыВводаЗначенийВыработкивМЛ_уэ"));
	
	тблПунктыПоТипам = Новый ТаблицаЗначений();
	тблПунктыПоТипам.Колонки.Добавить("Заказ", Новый ОписаниеТипов("ДокументСсылка.уатЗаказГрузоотправителя"));
	тблПунктыПоТипам.Колонки.Добавить("ТипПункта",  Новый ОписаниеТипов("СправочникСсылка.уатТипыПунктов"));
	тблПунктыПоТипам.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	тблПунктыПоТипам.Колонки.Добавить("КоличествоПлан", Новый ОписаниеТипов("Число"));
	тблПунктыПоТипам.Колонки.Добавить("СпособВводаЗначений", Новый ОписаниеТипов("ПеречислениеСсылка.уатСпособыВводаЗначенийВыработкивМЛ_уэ"));
	тблКоличествоУпаковокПоВидамИЗаказам = Новый ТаблицаЗначений;
	тблКоличествоУпаковокПоВидамИЗаказам.Колонки.Добавить("Заказ", Новый ОписаниеТипов("ДокументСсылка.уатЗаказГрузоотправителя"));
	тблКоличествоУпаковокПоВидамИЗаказам.Колонки.Добавить("ВидУпаковки", Новый ОписаниеТипов("СправочникСсылка.уатВидыУпаковки_уэ"));
	тблКоличествоУпаковокПоВидамИЗаказам.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	тблКоличествоУпаковокПоВидамИЗаказам.Колонки.Добавить("КоличествоПлан", Новый ОписаниеТипов("Число"));
	тблКоличествоКонтейнеровПоТипамИЗаказам = Новый ТаблицаЗначений;
	тблКоличествоКонтейнеровПоТипамИЗаказам.Колонки.Добавить("Заказ", Новый ОписаниеТипов("ДокументСсылка.уатЗаказГрузоотправителя"));
	тблКоличествоКонтейнеровПоТипамИЗаказам.Колонки.Добавить("ТипКонтейнера", Новый ОписаниеТипов("СправочникСсылка.уатТипыКонтейнеров_уэ"));
	тблКоличествоКонтейнеровПоТипамИЗаказам.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	тблКоличествоКонтейнеровПоТипамИЗаказам.Колонки.Добавить("КоличествоПлан", Новый ОписаниеТипов("Число"));
	
	// временная таблица для расчета стоянок
	тблУчитанныеСтоянки = Новый ТаблицаЗначений;
	тблУчитанныеСтоянки.Колонки.Добавить("Пункт");
	тблУчитанныеСтоянки.Колонки.Добавить("Заказ");
	тблУчитанныеСтоянки.Колонки.Добавить("ПрибытиеПлан");
	тблУчитанныеСтоянки.Колонки.Добавить("ФактическоеОпозданиеДобавлено");
	тблУчитанныеСтоянки.Колонки.Добавить("ФактическийПростойДобавлен");
	тблУчитанныеСтоянки.Колонки.Добавить("ТипТочкиМаршрута");
	
	// временная таблица для расчета доп. выработки
	тблУчитаннаяДопВыработка = Новый ТаблицаЗначений;
	тблУчитаннаяДопВыработка.Колонки.Добавить("Пункт");
	тблУчитаннаяДопВыработка.Колонки.Добавить("Заказ");
	тблУчитаннаяДопВыработка.Колонки.Добавить("ПараметрВыработки");
	
	// Временная таблица для проверки того, прибывали ли заказы по расписанию или нет
	тблПрибытиеВнеРасписания = Новый ТаблицаЗначений;
	тблПрибытиеВнеРасписания.Колонки.Добавить("Заказ");
	тблПрибытиеВнеРасписания.Колонки.Добавить("ПрибытиеВнеРасписания");
	
	РассчитыватьФактическиеПростоиОпоздания = Константы.уатУчетПланФактаПоМаршрутуВМаршрутныхЛистах.Получить();
	СекундВМинуте = 60;
	ДопустимоеВремяОпозданияСекунд = СекундВМинуте * уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(
		ДокументОбъект.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.ДопустимоеОтклонениеОтВремениПрибытия);
	Если РассчитыватьФактическиеПростоиОпоздания Тогда
		ТаблицаПлановыеФактическиеДатыПосещенияПунктов = Документы.уатМаршрутныйЛист.ПолучитьПлановыеФактическиеДатыПосещенияПунктов(ДокументОбъект);
	КонецЕсли;
	
	// инициализация параметров по негабаритным грузам
	ПараметрыНегабаритныхГрузов = Новый Структура;
	ПараметрыНегабаритныхГрузов.Вставить("ОбщийВес", ДокументОбъект.ВесБрутто);
	ПараметрыНегабаритныхГрузов.Вставить("ОбщийОбъем", ДокументОбъект.Объем);
	ПараметрыНегабаритныхГрузов.Вставить("ПорогПревышенияПоВесу",   Справочники.уатПараметрыВыработки.ПревышениеВеса.ПорогПревышения);
	ПараметрыНегабаритныхГрузов.Вставить("ПорогПревышенияПоОбъему", Справочники.уатПараметрыВыработки.ПревышениеОбъема.ПорогПревышения);
	ПараметрыНегабаритныхГрузов.Вставить("ПорогПревышенияПоВысоте", Справочники.уатПараметрыВыработки.ПревышениеВысоты.ПорогПревышения);
	ПараметрыНегабаритныхГрузов.Вставить("ПорогПревышенияПоДлине",  Справочники.уатПараметрыВыработки.ПревышениеДлины.ПорогПревышения);
	ПараметрыНегабаритныхГрузов.Вставить("ПорогПревышенияПоШирине", Справочники.уатПараметрыВыработки.ПревышениеШирины.ПорогПревышения);
	ПараметрыНегабаритныхГрузов.Вставить("ЗначенияПревышений", Новый Соответствие);
	
	// расчет построчной выработки
	Сч = -1; 
	ПредПункт = Неопределено;
	Для Каждого ТекСтрока Из ДокументОбъект.Заказы Цикл
		Сч = Сч + 1;
		
		тблГрузыОжидание = Неопределено;
		
		// обновляем состав грузов в текущей точке маршрута
		Если (ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка
			ИЛИ ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяПогрузка
			ИЛИ ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка
			ИЛИ ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяРазгрузка) Тогда
			
			Если ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка 
				ИЛИ ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяРазгрузка Тогда
				тблГрузыОжидание = тблГрузы.Скопировать();
			КонецЕсли;
			
			// добавляем или удаляем указанное количество груза
			НоваяСтрока = тблГрузы.Добавить();
			НоваяСтрока.Заказ = ТекСтрока.ЗаказГрузоотправителя;
			НоваяСтрока.Номенклатура = ТекСтрока.Номенклатура;
			НоваяСтрока.ЕдиницаИзмерения = ТекСтрока.ЕдиницаИзмерения;
			
			Если ТекСтрока.ЗаказГрузоотправителя.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам
				ИЛИ ТекСтрока.ЗаказГрузоотправителя.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам Тогда
				Если ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка
					ИЛИ ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяПогрузка Тогда
					НоваяСтрока.Количество = ТекСтрока.Количество;
				Иначе
					НоваяСтрока.Количество = -ТекСтрока.Количество;
				КонецЕсли;
			Иначе //по заказу в целом
				Если ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка
					ИЛИ ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяПогрузка Тогда
					НоваяСтрока.Количество = 1;
				Иначе
					НоваяСтрока.Количество = -1;
				КонецЕсли;
			КонецЕсли;
			
			тблГрузы.Свернуть("Заказ, Номенклатура, ЕдиницаИзмерения", "Количество");
			
			// теперь нужно удалить строки с количеством = 0
			мсвСтрокиУдалить = тблГрузы.НайтиСтроки(Новый Структура("Количество", 0));
			Для Каждого ТекСтрокаГруз Из мсвСтрокиУдалить Цикл
				тблГрузы.Удалить(ТекСтрокаГруз);
			КонецЦикла;
		КонецЕсли;
		
		//Если ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка тогда
		Если ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка
			ИЛИ ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяРазгрузка тогда
			// вес груза
			ДопПараметры = Новый Структура("Заказ, ПланФакт", ТекСтрока.ЗаказГрузоотправителя, "ПланФакт");
			ДобавитьВыработку(ДокументОбъект, Справочники.уатПараметрыВыработки.ВесГруза, ТекСтрока.ВесБрутто, ДопПараметры);
			
			// объем груза
			ДопПараметры = Новый Структура("Заказ, ПланФакт", ТекСтрока.ЗаказГрузоотправителя, "ПланФакт");
			ДобавитьВыработку(ДокументОбъект, Справочники.уатПараметрыВыработки.Объем, ТекСтрока.Объем, ДопПараметры);
			
			// негабаритные грузы
			ДобавитьПревышениеГабаритов(ТекСтрока, ПараметрыНегабаритныхГрузов);
		КонецЕсли;
		
		// доп. выработка
		Для СчДоп = 1 По 5 Цикл
			ТекПараметрВыработки = ТекСтрока["ПараметрВыработки" + СчДоп];
			Если ЗначениеЗаполнено(ТекПараметрВыработки)
				И тблУчитаннаяДопВыработка.НайтиСтроки(Новый Структура("Пункт, Заказ, ПараметрВыработки",
					ТекСтрока.Пункт, ТекСтрока.ЗаказГрузоотправителя, ТекПараметрВыработки)).Количество() = 0 Тогда
					
				ДопПараметры = Новый Структура("Заказ, ПланФакт", ТекСтрока.ЗаказГрузоотправителя, "ПланФакт");
				ДобавитьВыработку(ДокументОбъект, ТекПараметрВыработки, ТекСтрока["Выработка" + СчДоп], ДопПараметры);
				
				НоваяСтрокаДопВыработка = тблУчитаннаяДопВыработка.Добавить();
				НоваяСтрокаДопВыработка.Пункт = ТекСтрока.Пункт;
				НоваяСтрокаДопВыработка.Заказ = ТекСтрока.ЗаказГрузоотправителя;
				НоваяСтрокаДопВыработка.ПараметрВыработки = ТекПараметрВыработки;
			КонецЕсли;
		КонецЦикла;
		
		// Время и расстояние - чуть сложнее - нужно учитывать для каждого груза по каждой точке маршрута,
		// если этот груз находится в машине
		СледПункт = ?(ТекСтрока.НомерСтроки < ДокументОбъект.Заказы.Количество(), ДокументОбъект.Заказы[ТекСтрока.НомерСтроки].Пункт, Неопределено); //расчет пункта в следующей строке
		Если СледПункт <> ТекСтрока.Пункт Тогда //это последняя строка в этом пункте, следующая строка - другой пункт
			флЭтоПоследнийПункт = Истина;
			Для СчДоп = Сч По (ДокументОбъект.Заказы.Количество() - 1) Цикл
				Если ДокументОбъект.Заказы[СчДоп].Пункт <> ТекСтрока.Пункт Тогда
					флЭтоПоследнийПункт = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			мсвУчитанныхЗаказов = Новый Массив;
			Для Каждого ТекГруз Из тблГрузы Цикл //просмотр состава грузов в этой точке маршрута
				Если мсвУчитанныхЗаказов.Найти(ТекГруз.Заказ) <> Неопределено Тогда //если много грузов по одному заказу, то учитываем только первый
					Продолжить;
				КонецЕсли;
				
				Если НЕ флЭтоПоследнийПункт Тогда //в последнем пункте время и расстояние не учитываем
					// расстояние (пробег порожний)
					Если ТекСтрока.Количество = 0 Тогда
						ДопПараметры = Новый Структура("Заказ, ПланФакт", ТекГруз.Заказ, "Факт");
						ДобавитьВыработку(ДокументОбъект, Справочники.уатПараметрыВыработки.ПробегПорожний,
							?(флПланФакт, ТекСтрока.РасстояниеФакт, ТекСтрока.Расстояние), ДопПараметры);
						ДопПараметры = Новый Структура("Заказ, ПланФакт", ТекГруз.Заказ, "План");
						ДобавитьВыработку(ДокументОбъект, Справочники.уатПараметрыВыработки.ПробегПорожний, ТекСтрока.Расстояние, ДопПараметры);
					Иначе // расстояние (пробег с грузом)
						ДопПараметры = Новый Структура("Заказ, ПланФакт", ТекГруз.Заказ, "Факт");
						ДобавитьВыработку(ДокументОбъект, Справочники.уатПараметрыВыработки.ПробегСГрузом,
							?(флПланФакт, ТекСтрока.РасстояниеФакт, ТекСтрока.Расстояние), ДопПараметры);
						ДопПараметры = Новый Структура("Заказ, ПланФакт", ТекГруз.Заказ, "План");
						ДобавитьВыработку(ДокументОбъект, Справочники.уатПараметрыВыработки.ПробегСГрузом, ТекСтрока.Расстояние, ДопПараметры);
					КонецЕсли;
					
					// расстояние (пробег общий)
					ДопПараметры = Новый Структура("Заказ, ПланФакт", ТекГруз.Заказ, "Факт");
					ДобавитьВыработку(ДокументОбъект, Справочники.уатПараметрыВыработки.ПробегОбщий,
						?(флПланФакт, ТекСтрока.РасстояниеФакт, ТекСтрока.Расстояние), ДопПараметры);
					ДопПараметры = Новый Структура("Заказ, ПланФакт", ТекГруз.Заказ, "План");
					ДобавитьВыработку(ДокументОбъект, Справочники.уатПараметрыВыработки.ПробегОбщий,
						ТекСтрока.Расстояние, ДопПараметры);
					
					// время
					ДопПараметры = Новый Структура("Заказ, ПланФакт", ТекГруз.Заказ, "Факт");
					ДобавитьВыработку(ДокументОбъект, Справочники.уатПараметрыВыработки.ВремяВРаботе,
						?(флПланФакт, ТекСтрока.ВремяФакт, ТекСтрока.Время), ДопПараметры);
					ДопПараметры = Новый Структура("Заказ, ПланФакт", ТекГруз.Заказ, "План");
					ДобавитьВыработку(ДокументОбъект, Справочники.уатПараметрыВыработки.ВремяВРаботе,
						ТекСтрока.Время, ДопПараметры);
				КонецЕсли;
				
				мсвУчитанныхЗаказов.Добавить(ТекГруз.Заказ);
			КонецЦикла;
			
			// ожидание - свой алгоритм, нужно учитывать состав грузов при разгрузке
			мсвУчитанныхЗаказовОжидание = Новый Массив;
			Если тблГрузыОжидание = Неопределено Тогда
				тблГрузыОжидание = тблГрузы.Скопировать();
			КонецЕсли;
			Для Каждого ТекГруз Из тблГрузыОжидание Цикл //просмотр состава грузов в этой точке маршрута
				Если мсвУчитанныхЗаказовОжидание.Найти(ТекГруз.Заказ) <> Неопределено Тогда //если много грузов по одному заказу, то учитываем только первый
					Продолжить;
				КонецЕсли;
				
				ДопПараметры = Новый Структура("Заказ, ПланФакт", ТекГруз.Заказ, "Факт");
				ДобавитьВыработку(ДокументОбъект, Справочники.уатПараметрыВыработки.ВремяОжидания,
					?(флПланФакт, ТекСтрока.ОжиданиеФакт, ТекСтрока.Ожидание), ДопПараметры);
				ДопПараметры = Новый Структура("Заказ, ПланФакт", ТекГруз.Заказ, "План");
				ДобавитьВыработку(ДокументОбъект, Справочники.уатПараметрыВыработки.ВремяОжидания,
					ТекСтрока.Ожидание, ДопПараметры);
					
				мсвУчитанныхЗаказовОжидание.Добавить(ТекГруз.Заказ);
			КонецЦикла;
		КонецЕсли;
		
		// Стоянки, простои и опоздания.
		// Если много грузов по одному заказу, то учитываем только первый
		НайденныеСтроки = тблУчитанныеСтоянки.НайтиСтроки(Новый Структура("Пункт, Заказ, ПрибытиеПлан, ТипТочкиМаршрута",
			ТекСтрока.Пункт, ТекСтрока.ЗаказГрузоотправителя, ТекСтрока.ПрибытиеПлан, ТекСтрока.ТипТочкиМаршрута));
		Если НайденныеСтроки.Количество() = 0 Тогда
			СтрокаСтоянки = тблУчитанныеСтоянки.Добавить();
			СтрокаСтоянки.Пункт            = ТекСтрока.Пункт;
			СтрокаСтоянки.Заказ            = ТекСтрока.ЗаказГрузоотправителя;
			СтрокаСтоянки.ПрибытиеПлан     = ТекСтрока.ПрибытиеПлан;
			СтрокаСтоянки.ФактическоеОпозданиеДобавлено = Ложь;
			СтрокаСтоянки.ФактическийПростойДобавлен = Ложь;
			СтрокаСтоянки.ТипТочкиМаршрута = ТекСтрока.ТипТочкиМаршрута; 
			СтоянкаДобавлена = Ложь;
		Иначе
			СтрокаСтоянки = НайденныеСтроки[0];
			ФактическоеОпозданиеДобавлено = СтрокаСтоянки.ФактическоеОпозданиеДобавлено;
			ФактическийПростойДобавлен = СтрокаСтоянки.ФактическийПростойДобавлен;
			СтоянкаДобавлена = Истина;
		КонецЕсли;
		
		// В данном случае стоянка по заказу - только стоянка, связанная с этим заказом, 
		// то есть стоянка по этому пункту из заказа, плюс общая стоянка из пункта.
		Если НЕ СтоянкаДобавлена Тогда
			Если флПланФакт Тогда
				СтоянкаВПунктеПоЗаказуФакт = ТекСтрока.СтоянкаФакт;
				СтоянкаВПунктеПоЗаказуПлан = уатЗащищенныеФункцииСервер.СложитьВремя(ТекСтрока.СтоянкаИзПункта, ТекСтрока.Стоянка);
			Иначе
				СтоянкаВПунктеПоЗаказуФакт = уатЗащищенныеФункцииСервер.СложитьВремя(ТекСтрока.СтоянкаИзПункта, ТекСтрока.Стоянка);
				СтоянкаВПунктеПоЗаказуПлан = 0;
			КонецЕсли;
			
			ДопПараметры = Новый Структура("Заказ, ПланФакт", ТекСтрока.ЗаказГрузоотправителя, "Факт");
			ДобавитьВыработку(ДокументОбъект, Справочники.уатПараметрыВыработки.ВремяВПростое, СтоянкаВПунктеПоЗаказуФакт, ДопПараметры);
			
			ДопПараметры = Новый Структура("Заказ, ПланФакт", ТекСтрока.ЗаказГрузоотправителя, "План");
			ДобавитьВыработку(ДокументОбъект, Справочники.уатПараметрыВыработки.ВремяВПростое, СтоянкаВПунктеПоЗаказуПлан, ДопПараметры);
						
			// Проверка того, было ли это прибытие по расписанию или не по расписанию. 
			// Проверка выполняется с точностью до минуты, т.к. пользователю секунды не видны.
			Если уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП() Тогда
				Если ЗначениеЗаполнено(ТекСтрока.ЗаказГрузоотправителя.ПрибытиеПоРасписанию)
					И НачалоМинуты(ТекСтрока.ПрибытиеПлан) <> НачалоМинуты(ТекСтрока.ЗаказГрузоотправителя.ПрибытиеПоРасписанию) Тогда
					ПрибытиеВнеРасписания = 1;
				Иначе
					ПрибытиеВнеРасписания = 0;
				КонецЕсли;
				НайденныеСтроки = тблПрибытиеВнеРасписания.НайтиСтроки(Новый Структура("Заказ", ТекСтрока.ЗаказГрузоотправителя));
				Если НайденныеСтроки.Количество() > 0 Тогда
					НайденныеСтроки[0].ПрибытиеВнеРасписания = ПрибытиеВнеРасписания;
				Иначе
					НоваяСтрока = тблПрибытиеВнеРасписания.Добавить();
					НоваяСтрока.Заказ = ТекСтрока.ЗаказГрузоотправителя;
					НоваяСтрока.ПрибытиеВнеРасписания = ПрибытиеВнеРасписания;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		// Фактическое время простоя и опоздания нельзя разделить по заказам, так как нет данных, на основании которых это 
		// можно сделать. Поэтому они одинаковые для всех заказов.
		Если Не СтрокаСтоянки.ФактическийПростойДобавлен Тогда
			РассчитыватьПростоиПоТипуПункта = Ложь;
			Если ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка
				ИЛИ ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяПогрузка Тогда
				РассчитыватьПростоиПоТипуПункта = Справочники.уатПараметрыВыработки.ФактическоеВремяПростоя.РассчитыватьПриПогрузке;	
			ИначеЕсли ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка
				ИЛИ ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяРазгрузка Тогда
				РассчитыватьПростоиПоТипуПункта = Справочники.уатПараметрыВыработки.ФактическоеВремяПростоя.РассчитыватьПриРазгрузке;
			ИначеЕсли ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ПромежуточныйПункт Тогда
				РассчитыватьПростоиПоТипуПункта = Справочники.уатПараметрыВыработки.ФактическоеВремяПростоя.РассчитыватьВПромежуточныхПунктах;
			КонецЕсли;
			Если РассчитыватьФактическиеПростоиОпоздания И РассчитыватьПростоиПоТипуПункта 
				И ЗначениеЗаполнено(ТекСтрока.УбытиеФакт) И ЗначениеЗаполнено(ТекСтрока.ПрибытиеПлан) Тогда
				НайденныеСтроки = ТаблицаПлановыеФактическиеДатыПосещенияПунктов.НайтиСтроки(Новый Структура("Пункт, ПрибытиеПлан", ТекСтрока.Пункт, ТекСтрока.ПрибытиеПлан));
				Если НайденныеСтроки.Количество() > 0 Тогда
					ПростойСекунд = ТекСтрока.УбытиеФакт - НайденныеСтроки[0].УбытиеПлан;
					ФактическоеВремяПростоя = ?(ПростойСекунд > 0, уатОбщегоНазначения.уатВремяВЧЧ_ММ(ПростойСекунд), 0);
					ДопПараметры = Новый Структура("Заказ", ТекСтрока.ЗаказГрузоотправителя);
					ДобавитьВыработку(ДокументОбъект, Справочники.уатПараметрыВыработки.ФактическоеВремяПростоя, ФактическоеВремяПростоя, ДопПараметры);
					СтрокаСтоянки.ФактическийПростойДобавлен = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если Не СтрокаСтоянки.ФактическоеОпозданиеДобавлено Тогда
			РассчитыватьОпозданияПоТипуПункта = Ложь;
			Если ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка
				ИЛИ ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяПогрузка Тогда
				РассчитыватьОпозданияПоТипуПункта = Справочники.уатПараметрыВыработки.ФактическоеВремяОпоздания.РассчитыватьПриПогрузке;
			ИначеЕсли ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка
				ИЛИ ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяРазгрузка Тогда
				РассчитыватьОпозданияПоТипуПункта = Справочники.уатПараметрыВыработки.ФактическоеВремяОпоздания.РассчитыватьПриРазгрузке;
			ИначеЕсли ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ПромежуточныйПункт Тогда
				РассчитыватьОпозданияПоТипуПункта = Справочники.уатПараметрыВыработки.ФактическоеВремяОпоздания.РассчитыватьВПромежуточныхПунктах;
			КонецЕсли;
			Если РассчитыватьФактическиеПростоиОпоздания И РассчитыватьОпозданияПоТипуПункта 
				И ЗначениеЗаполнено(ТекСтрока.ПрибытиеФакт) И ЗначениеЗаполнено(ТекСтрока.ПрибытиеПлан) Тогда
				ОпозданиеСекунд = ТекСтрока.ПрибытиеФакт - ТекСтрока.ПрибытиеПлан;
				ФактическоеВремяОпоздания = ?(ОпозданиеСекунд > ДопустимоеВремяОпозданияСекунд, уатОбщегоНазначения.уатВремяВЧЧ_ММ(ОпозданиеСекунд), 0);
				ДопПараметры = Новый Структура("Заказ", ТекСтрока.ЗаказГрузоотправителя);
				ДобавитьВыработку(ДокументОбъект, Справочники.уатПараметрыВыработки.ФактическоеВремяОпоздания, ФактическоеВремяОпоздания, ДопПараметры);
				СтрокаСтоянки.ФактическоеОпозданиеДобавлено = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗнч(ТекСтрока.Пункт) = Тип("СправочникСсылка.уатПунктыНазначения")
			И ПредПункт <> ТекСтрока.Пункт Тогда
			
			ПробегВнеГеозоны = ТекСтрока.Пункт.ПробегВнеГеозоны;
			
			Если ТекСтрока.Выполнен Тогда
				ДопПараметры = Новый Структура("Заказ, ПланФакт, Выполнен", ТекСтрока.ЗаказГрузоотправителя, "Факт", Истина);
				ДобавитьВыработку(ДокументОбъект, Справочники.уатПараметрыВыработки.ПробегВнеГеозоны,
				ПробегВнеГеозоны, ДопПараметры);
			КонецЕсли;
			ДопПараметры = Новый Структура("Заказ, ПланФакт", ТекСтрока.ЗаказГрузоотправителя, "План");
			ДобавитьВыработку(ДокументОбъект, Справочники.уатПараметрыВыработки.ПробегВнеГеозоны, 
			ПробегВнеГеозоны, ДопПараметры);
			
			Если ТекСтрока.Выполнен Тогда
				ДопПараметры = Новый Структура("Заказ, ТипТочкиМаршрута, ПланФакт, Выполнен",
				ТекСтрока.ЗаказГрузоотправителя, ТекСтрока.ТипТочкиМаршрута, "Факт", Истина);
				ДобавитьВыработку(ДокументОбъект, Справочники.уатПараметрыВыработки.ПробегВнеГеозоныПоВидуОперации,
				ПробегВнеГеозоны, ДопПараметры); 
			КонецЕсли;
		
			ДопПараметры = Новый Структура("Заказ, ТипТочкиМаршрута, ПланФакт",
			ТекСтрока.ЗаказГрузоотправителя, ТекСтрока.ТипТочкиМаршрута, "План");
			ДобавитьВыработку(ДокументОбъект, Справочники.уатПараметрыВыработки.ПробегВнеГеозоныПоВидуОперации,
			ПробегВнеГеозоны, ДопПараметры); 
			
			ТипПункта = ТекСтрока.Пункт.ТипПункта;
			Если ТекСтрока.Выполнен Тогда
				ДопПараметры = Новый Структура("Заказ, ТипПункта, ПланФакт, Выполнен",
				ТекСтрока.ЗаказГрузоотправителя, ТипПункта, "Факт", Истина);
				ДобавитьВыработку(ДокументОбъект, Справочники.уатПараметрыВыработки.ПробегВнеГеозоныПоТипуПункта,
				ПробегВнеГеозоны, ДопПараметры);
			КонецЕсли;

			ДопПараметры = Новый Структура("Заказ, ТипПункта, ПланФакт",
			ТекСтрока.ЗаказГрузоотправителя, ТипПункта, "План");
			ДобавитьВыработку(ДокументОбъект, Справочники.уатПараметрыВыработки.ПробегВнеГеозоныПоТипуПункта,
			ПробегВнеГеозоны, ДопПараметры);

		КонецЕсли;
		ПредПункт = ТекСтрока.Пункт;
		
		Если тблПунктыПоЗаказу.НайтиСтроки(Новый Структура("Заказ", ТекСтрока.ЗаказГрузоотправителя)).Количество() = 0
			И ЗначениеЗаполнено(ТекСтрока.ЗаказГрузоотправителя) Тогда
			Если ТекСтрока.ЗаказГрузоотправителя.FTL Тогда 
				Для Каждого ТекПунктПоЗаказу Из ТекСтрока.ЗаказГрузоотправителя.ПромежуточныеПункты Цикл 
					// количество точек
					ДопПараметры = Новый Структура("Заказ", ТекСтрока.ЗаказГрузоотправителя);
					ДобавитьВыработку(ДокументОбъект, Справочники.уатПараметрыВыработки.КоличествоТочек, 1, ДопПараметры);
					
					// количество точек по типу точки маршрута (виду операции)
					НоваяСтрока = тблТочкиПоТипам.Добавить();
					НоваяСтрока.Заказ = ТекСтрока.ЗаказГрузоотправителя;
					НоваяСтрока.КоличествоПлан = 1;
					Если ТекСтрока.Выполнен Тогда
						НоваяСтрока.Количество = 1; 
					КонецЕсли;
					НоваяСтрока.ТипТочки = ТекПунктПоЗаказу.ТипТочкиМаршрута;
					НоваяСтрока.СпособВводаЗначений = Перечисления.уатСпособыВводаЗначенийВыработкивМЛ_уэ.ВТабличнойЧасти;
					
					ДопПараметры = Новый Структура("Заказ, ТипТочкиМаршрута",
						ТекСтрока.ЗаказГрузоотправителя, ТекПунктПоЗаказу.ТипТочкиМаршрута);
					ДобавитьВыработку(ДокументОбъект, Справочники.уатПараметрыВыработки.КоличествоТочекПоВидуОперации, 1, ДопПараметры);
					
					// количество точек по типу точки пункта
					Если ТипЗнч(ТекПунктПоЗаказу.Пункт) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда
						НоваяСтрока = тблПунктыПоТипам.Добавить();
						НоваяСтрока.Заказ = ТекСтрока.ЗаказГрузоотправителя;
						НоваяСтрока.КоличествоПлан = 1;
						Если ТекСтрока.Выполнен Тогда
							НоваяСтрока.Количество = 1; 
						КонецЕсли;
						НоваяСтрока.ТипПункта = ТекПунктПоЗаказу.Пункт.ТипПункта;
						НоваяСтрока.СпособВводаЗначений = Перечисления.уатСпособыВводаЗначенийВыработкивМЛ_уэ.ВТабличнойЧасти;
						
						ДопПараметры = Новый Структура("Заказ, ТипПункта", ТекСтрока.ЗаказГрузоотправителя, НоваяСтрока.ТипПункта);
						ДобавитьВыработку(ДокументОбъект, Справочники.уатПараметрыВыработки.КоличествоТочекПоТипуПункта, 1, ДопПараметры);  
						
					КонецЕсли;
				КонецЦикла;
			Иначе
				ДопПараметры = Новый Структура("Заказ, ПланФакт", ТекСтрока.ЗаказГрузоотправителя, "Факт");
				ДобавитьВыработку(ДокументОбъект, Справочники.уатПараметрыВыработки.КоличествоТочек, 1, ДопПараметры);
				Если ЗаказДоставлен(ДокументОбъект, ДопПараметры.Заказ) Тогда
					ДобавитьВыработку(ДокументОбъект, Справочники.уатПараметрыВыработки.КоличествоТочек, 1, ДопПараметры);
				КонецЕсли;
				ДопПараметры = Новый Структура("Заказ, ПланФакт", ТекСтрока.ЗаказГрузоотправителя, "План");
				ДобавитьВыработку(ДокументОбъект, Справочники.уатПараметрыВыработки.КоличествоТочек, 2, ДопПараметры);
						
				НоваяСтрока = тблТочкиПоТипам.Добавить();
				НоваяСтрока.Заказ = ТекСтрока.ЗаказГрузоотправителя;
				НоваяСтрока.КоличествоПлан = 1;
				Если ТекСтрока.Выполнен Тогда
					НоваяСтрока.Количество = 1;
				КонецЕсли;
				НоваяСтрока.ТипТочки = Перечисления.уатТипыТочекМаршрута.Погрузка;
				НоваяСтрока.СпособВводаЗначений = Перечисления.уатСпособыВводаЗначенийВыработкивМЛ_уэ.ВТабличнойЧасти; 

				НоваяСтрока = тблТочкиПоТипам.Добавить();
				НоваяСтрока.Заказ = ТекСтрока.ЗаказГрузоотправителя;
				НоваяСтрока.КоличествоПлан = 1;
				Если ТекСтрока.Выполнен Тогда
					НоваяСтрока.Количество = 1;  
				КонецЕсли;
				НоваяСтрока.ТипТочки = Перечисления.уатТипыТочекМаршрута.Разгрузка;
				НоваяСтрока.СпособВводаЗначений = Перечисления.уатСпособыВводаЗначенийВыработкивМЛ_уэ.ВТабличнойЧасти;
				
				ДопПараметры = Новый Структура("Заказ, ТипТочкиМаршрута",
					ТекСтрока.ЗаказГрузоотправителя, Перечисления.уатТипыТочекМаршрута.Погрузка);
				ДобавитьВыработку(ДокументОбъект, Справочники.уатПараметрыВыработки.КоличествоТочекПоВидуОперации, 1, ДопПараметры);
				ДопПараметры = Новый Структура("Заказ, ТипТочкиМаршрута",
					ТекСтрока.ЗаказГрузоотправителя, Перечисления.уатТипыТочекМаршрута.Разгрузка);
				ДобавитьВыработку(ДокументОбъект, Справочники.уатПараметрыВыработки.КоличествоТочекПоВидуОперации, 1, ДопПараметры);
						
				Если ТипЗнч(ТекСтрока.ЗаказГрузоотправителя.АдресОтправления) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда
					НоваяСтрока = тблПунктыПоТипам.Добавить();
					НоваяСтрока.Заказ = ТекСтрока.ЗаказГрузоотправителя;
					НоваяСтрока.КоличествоПлан = 1; 
					Если ТекСтрока.Выполнен Тогда
						НоваяСтрока.Количество = 1;  
					КонецЕсли;
					НоваяСтрока.ТипПункта =  ТекСтрока.ЗаказГрузоотправителя.АдресОтправления.ТипПункта;
					НоваяСтрока.СпособВводаЗначений = Перечисления.уатСпособыВводаЗначенийВыработкивМЛ_уэ.ВТабличнойЧасти;
					
					ДопПараметры = Новый Структура("Заказ, ТипПункта",
						ТекСтрока.ЗаказГрузоотправителя, НоваяСтрока.ТипПункта);
					ДобавитьВыработку(ДокументОбъект, Справочники.уатПараметрыВыработки.КоличествоТочекПоТипуПункта, 1, ДопПараметры);
					
				КонецЕсли;
				Если ТипЗнч(ТекСтрока.ЗаказГрузоотправителя.АдресНазначения) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда 
					НоваяСтрока = тблПунктыПоТипам.Добавить();
					НоваяСтрока.Заказ = ТекСтрока.ЗаказГрузоотправителя;
					НоваяСтрока.КоличествоПлан = 1; 
					Если ТекСтрока.Выполнен Тогда
						НоваяСтрока.Количество = 1;
					КонецЕсли;
					НоваяСтрока.ТипПункта =  ТекСтрока.ЗаказГрузоотправителя.АдресНазначения.ТипПункта;
					НоваяСтрока.СпособВводаЗначений = Перечисления.уатСпособыВводаЗначенийВыработкивМЛ_уэ.ВТабличнойЧасти;
					
					ДопПараметры = Новый Структура("Заказ, ТипПункта",
						ТекСтрока.ЗаказГрузоотправителя, НоваяСтрока.ТипПункта);
					ДобавитьВыработку(ДокументОбъект, Справочники.уатПараметрыВыработки.КоличествоТочекПоТипуПункта, 1, ДопПараметры);
				КонецЕсли;
				
			КонецЕсли;
			
			НоваяСтрока = тблПунктыПоЗаказу.Добавить();
			НоваяСтрока.Заказ = ТекСтрока.ЗаказГрузоотправителя;
		КонецЕсли;
	КонецЦикла;
	
	// Расчет выработки по заказам
	Для Каждого ТекЗаказ Из мсвЗаказы Цикл
		// тн км
		мсвСтрокиПробегСГрузом = ДокументОбъект.ВыработкаТСиСотрудников.НайтиСтроки(
			Новый Структура("ЗаказГрузоотправителя, ПараметрВыработки",
			ТекЗаказ, Справочники.уатПараметрыВыработки.ПробегСГрузом));
		мсвСтрокиВесГруза = ДокументОбъект.ВыработкаТСиСотрудников.НайтиСтроки(
			Новый Структура("ЗаказГрузоотправителя, ПараметрВыработки",
			ТекЗаказ, Справочники.уатПараметрыВыработки.ВесГруза));
		Если мсвСтрокиПробегСГрузом.Количество() > 0 И мсвСтрокиВесГруза.Количество() > 0 Тогда
			ДопПараметры = Новый Структура("Заказ, ПланФакт", ТекЗаказ, "Факт");
			ДобавитьВыработку(ДокументОбъект, Справочники.уатПараметрыВыработки.ТнКм,
				мсвСтрокиПробегСГрузом[0].КоличествоФакт * (мсвСтрокиВесГруза[0].КоличествоФакт / КоэфВеса), ДопПараметры);
			ДопПараметры = Новый Структура("Заказ, ПланФакт", ТекЗаказ, "План");
			ДобавитьВыработку(ДокументОбъект, Справочники.уатПараметрыВыработки.ТнКм,
				мсвСтрокиПробегСГрузом[0].КоличествоПлан * (мсвСтрокиВесГруза[0].КоличествоПлан / КоэфВеса), ДопПараметры);
		КонецЕсли;
			
		// м3 км
		мсвСтрокиПробегСГрузом = ДокументОбъект.ВыработкаТСиСотрудников.НайтиСтроки(
			Новый Структура("ЗаказГрузоотправителя, ПараметрВыработки",
			ТекЗаказ, Справочники.уатПараметрыВыработки.ПробегСГрузом));
		мсвСтрокиОбъемГруза = ДокументОбъект.ВыработкаТСиСотрудников.НайтиСтроки(
			Новый Структура("ЗаказГрузоотправителя, ПараметрВыработки",
			ТекЗаказ, Справочники.уатПараметрыВыработки.Объем));
		Если мсвСтрокиПробегСГрузом.Количество() > 0 И мсвСтрокиОбъемГруза.Количество() > 0 Тогда
			ДопПараметры = Новый Структура("Заказ, ПланФакт", ТекЗаказ, "Факт");
			ДобавитьВыработку(ДокументОбъект, Справочники.уатПараметрыВыработки.ОбъемКм,
				мсвСтрокиПробегСГрузом[0].КоличествоФакт * (мсвСтрокиОбъемГруза[0].КоличествоФакт / КоэфОбъема), ДопПараметры);
			ДопПараметры = Новый Структура("Заказ, ПланФакт", ТекЗаказ, "План");
			ДобавитьВыработку(ДокументОбъект, Справочники.уатПараметрыВыработки.ОбъемКм,
				мсвСтрокиПробегСГрузом[0].КоличествоПлан * (мсвСтрокиОбъемГруза[0].КоличествоПлан / КоэфОбъема), ДопПараметры);
		КонецЕсли;
		
		// Количество заказов
		// Выработка по некоторым ПВ считается в цикле по заказам независимо от способа ввода значений - построчно / в целом по документу.
		// Это сделано для расчета факта с учетом выполненных строк Маршрута
		ДопПараметры = Новый Структура("Заказ", ТекЗаказ);
		ДобавитьВыработку(ДокументОбъект, Справочники.уатПараметрыВыработки.КоличествоЗаказов, 1, ДопПараметры);
		
		//// Пробег порожний
		//ДопПараметры = Новый Структура("Заказ", ТекЗаказ);
		//ДобавитьВыработку(ДокументОбъект, Справочники.уатПараметрыВыработки.ПробегПорожний, ДокументОбъект.ПробегПорожний, ДопПараметры);
		//		
		//// Пробег общий (добавляем к уже заполненному выше пробегу с грузом порожний пробег)
		//ДопПараметры = Новый Структура("Заказ", ТекЗаказ);
		//ДобавитьВыработку(ДокументОбъект, Справочники.уатПараметрыВыработки.ПробегОбщий, ДокументОбъект.ПробегПорожний, ДопПараметры);
				
		// Количество упаковок
		табКоличествоУпаковокПоВидам = Новый ТаблицаЗначений();
		табКоличествоУпаковокПоВидам.Колонки.Добавить("ВидУпаковки", Новый ОписаниеТипов("СправочникСсылка.уатВидыУпаковки_уэ"));
		табКоличествоУпаковокПоВидам.Колонки.Добавить("Количество",  Новый ОписаниеТипов("Число"));
		Если ТекЗаказ.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам Тогда 
			НовСтр = табКоличествоУпаковокПоВидам.Добавить();
			НовСтр.ВидУпаковки = Справочники.уатВидыУпаковки_уэ.ПолучитьОсновнойВидУпаковки();
			НовСтр.Количество  = ТекЗаказ.КоличествоМест;
		ИначеЕсли ТекЗаказ.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам Тогда 
			Для Каждого СтрокаТовара Из ТекЗаказ.Товары Цикл 
				НовСтр = табКоличествоУпаковокПоВидам.Добавить();
				НовСтр.ВидУпаковки = Справочники.уатВидыУпаковки_уэ.ПолучитьОсновнойВидУпаковки();
				НовСтр.Количество  = СтрокаТовара.КоличествоМест;
			КонецЦикла;
		ИначеЕсли ТекЗаказ.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам Тогда 
			Для Каждого СтрокаГруза Из ТекЗаказ.ГрузовойСостав Цикл 
				Если НЕ СтрокаГруза.ГрузовоеМесто.Контейнер Тогда
					НовСтр = табКоличествоУпаковокПоВидам.Добавить();
					НовСтр.ВидУпаковки = СтрокаГруза.ВидУпаковки;
					НовСтр.Количество  = СтрокаГруза.КоличествоМест;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		табКоличествоУпаковокПоВидам.Свернуть("ВидУпаковки", "Количество");
		Для Каждого ТекСтрокаУпаковок Из табКоличествоУпаковокПоВидам Цикл 
			ДопПараметры = Новый Структура("ВидУпаковки", ТекСтрокаУпаковок.ВидУпаковки);
			ДобавитьВыработку(ДокументОбъект, Справочники.уатПараметрыВыработки.КоличествоУпаковок, ТекСтрокаУпаковок.Количество, ДопПараметры);
			ДопПараметры.Вставить("Заказ", ТекЗаказ);
			ДобавитьВыработку(ДокументОбъект, Справочники.уатПараметрыВыработки.КоличествоУпаковок, ТекСтрокаУпаковок.Количество, ДопПараметры);
		КонецЦикла;
		
		// Количество контейнеров
		табКоличествоКонтейнеровПоТипам = Новый ТаблицаЗначений;
		табКоличествоКонтейнеровПоТипам.Колонки.Добавить("ТипКонтейнера", Новый ОписаниеТипов("СправочникСсылка.уатТипыКонтейнеров_уэ"));
		табКоличествоКонтейнеровПоТипам.Колонки.Добавить("Количество",    Новый ОписаниеТипов("Число"));
		Если ТекЗаказ.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам Тогда 
			Для Каждого СтрокаГруза Из ТекЗаказ.ГрузовойСостав Цикл 
				Если СтрокаГруза.ГрузовоеМесто.Контейнер Тогда
					НовСтр = табКоличествоКонтейнеровПоТипам.Добавить();
					НовСтр.ТипКонтейнера = СтрокаГруза.ГрузовоеМесто.ТипКонтейнера;
					НовСтр.Количество    = СтрокаГруза.КоличествоМест;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		табКоличествоКонтейнеровПоТипам.Свернуть("ТипКонтейнера", "Количество");
		Для Каждого ТекСтрокаКонтейнеры Из табКоличествоКонтейнеровПоТипам Цикл 
			ДопПараметры = Новый Структура("ТипКонтейнера", ТекСтрокаКонтейнеры.ТипКонтейнера);
			ДобавитьВыработку(ДокументОбъект, Справочники.уатПараметрыВыработки.КоличествоКонтейнеров, ТекСтрокаКонтейнеры.Количество, ДопПараметры);
			ДопПараметры.Вставить("Заказ", ТекЗаказ);
			ДобавитьВыработку(ДокументОбъект, Справочники.уатПараметрыВыработки.КоличествоКонтейнеров, ТекСтрокаКонтейнеры.Количество, ДопПараметры);
		КонецЦикла;
		
		// Количество рейсов
		ДопПараметры = Новый Структура("Заказ", ТекЗаказ);
		ДобавитьВыработку(ДокументОбъект, Справочники.уатПараметрыВыработки.КоличествоРейсов, 1, ДопПараметры);
		
		// Вне расписания
		Если уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП() Тогда
			НайденныеСтроки = тблПрибытиеВнеРасписания.НайтиСтроки(Новый Структура("Заказ", ТекЗаказ));
			Если НайденныеСтроки.Количество() > 0 Тогда
				ДопПараметры = Новый Структура("Заказ", ТекЗаказ);
				ДобавитьВыработку(ДокументОбъект, Справочники.уатПараметрыВыработки.ВнеРасписания, НайденныеСтроки[0].ПрибытиеВнеРасписания, ДопПараметры);
			КонецЕсли;
		КонецЕсли;
		
		// Ночная доставка
		флНочнаяДоставка = уатРасчетыПоТарифам_уэ.ЭтоНочнаяДоставка(ТекЗаказ.ОтправлениеС, ТекЗаказ.ДоставкаПо, ДокументОбъект.Организация);
		Если флНочнаяДоставка Тогда
			ДопПараметры = Новый Структура("Заказ", ТекЗаказ);
			ДобавитьВыработку(ДокументОбъект, Справочники.уатПараметрыВыработки.НочнаяДоставка, 1, ДопПараметры);
		КонецЕсли;
		
		// Стоимость груза
		ДопПараметры = Новый Структура("Заказ", ТекЗаказ);
		ДобавитьВыработку(ДокументОбъект, Справочники.уатПараметрыВыработки.СтоимостьГруза, ТекЗаказ.СтоимостьГруза, ДопПараметры);
	КонецЦикла;
	
	// Количество упаковок для пользовательских параметров выработки со способом расчета "Количество упаковок по виду упаковки"
	мсвЗаказыСДетализациейПоЗаказам = Новый Массив;
	Для Каждого ТекСтрока Из ДокументОбъект.Заказы Цикл
		Если НЕ ЗначениеЗаполнено(ТекСтрока.ЗаказГрузоотправителя) 
			И ТипЗнч(ТекСтрока.ЕдиницаИзмерения) = Тип("СправочникСсылка.уатВидыУпаковки_уэ")
			И ТекСтрока.Количество > 0 Тогда
			// Погрузка без заказа
			НоваяСтрока = тблКоличествоУпаковокПоВидамИЗаказам.Добавить();
			НоваяСтрока.Заказ = Документы.уатЗаказГрузоотправителя.ПустаяСсылка();
			НоваяСтрока.ВидУпаковки = ТекСтрока.ЕдиницаИзмерения;
			Если ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка
				ИЛИ ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяРазгрузка Тогда
				
				НоваяСтрока.КоличествоПлан = ТекСтрока.Количество;
				Если ТекСтрока.Выполнен Тогда
					НоваяСтрока.Количество = ТекСтрока.Количество;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(ТекСтрока.ЗаказГрузоотправителя)
			И ТипЗнч(ТекСтрока.ЕдиницаИзмерения) = Тип("СправочникСсылка.уатВидыУпаковки_уэ")
			И ТекСтрока.ЗаказГрузоотправителя.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам Тогда
			// Погрузка по заказу с детализацией по грузовым местам. Переносится только груз из данной строки маршрутного листа
			НоваяСтрока = тблКоличествоУпаковокПоВидамИЗаказам.Добавить();
			НоваяСтрока.Заказ = ТекСтрока.ЗаказГрузоотправителя;
			НоваяСтрока.ВидУпаковки = ТекСтрока.ЕдиницаИзмерения;
			Если ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка
				ИЛИ ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяРазгрузка Тогда
				
				НоваяСтрока.КоличествоПлан = ТекСтрока.Количество;
				Если ТекСтрока.Выполнен Тогда
					НоваяСтрока.Количество = ТекСтрока.Количество;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ЗначениеЗаполнено(ТекСтрока.ЗаказГрузоотправителя)
			И ТекСтрока.ЗаказГрузоотправителя.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам
			И мсвЗаказыСДетализациейПоЗаказам.Найти(ТекСтрока.ЗаказГрузоотправителя) = Неопределено Тогда
			// Погрузка по заказу с детализацией по заказу в целом. Переносится весь грузовой состав из документа
			мсвЗаказыСДетализациейПоЗаказам.Добавить(ТекСтрока.ЗаказГрузоотправителя);
			Для Каждого СтрокаГруза Из ТекСтрока.ЗаказГрузоотправителя.ГрузовойСостав Цикл 
				НоваяСтрока = тблКоличествоУпаковокПоВидамИЗаказам.Добавить();
				НоваяСтрока.Заказ = ТекСтрока.ЗаказГрузоотправителя;
				НоваяСтрока.ВидУпаковки = СтрокаГруза.ВидУпаковки;
				Если ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка
					ИЛИ ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяРазгрузка Тогда
					
					НоваяСтрока.КоличествоПлан = ТекСтрока.КоличествоМест;
					Если ТекСтрока.Выполнен Тогда
						НоваяСтрока.Количество = ТекСтрока.КоличествоМест;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	тблКоличествоУпаковокПоВидамИЗаказам.Свернуть("Заказ, ВидУпаковки", "Количество, КоличествоПлан");
	
	// Количество контейнеров для пользовательских параметров выработки со способом расчета "Количество контейнеров по типу контейнера"
	мсвЗаказыСДетализациейПоЗаказам = Новый Массив; // служебный массив на время выполнения этого цикла
	Для Каждого ТекСтрока Из ДокументОбъект.Заказы Цикл
		Если НЕ ЗначениеЗаполнено(ТекСтрока.ЗаказГрузоотправителя) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекСтрока.ЗаказГрузоотправителя.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам
			И ТипЗнч(ТекСтрока.Номенклатура) = Тип("СправочникСсылка.уатГрузовыеМеста_уэ")
			И ТекСтрока.Номенклатура.Контейнер Тогда
			
			// Погрузка по заказу с детализацией по грузовым местам. Переносится только груз из данной строки маршрутного листа
			НоваяСтрока = тблКоличествоКонтейнеровПоТипамИЗаказам.Добавить();
			НоваяСтрока.Заказ = ТекСтрока.ЗаказГрузоотправителя;
			НоваяСтрока.ТипКонтейнера = ТекСтрока.Номенклатура.ТипКонтейнера;
			Если ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка
				ИЛИ ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяРазгрузка Тогда
				
				НоваяСтрока.КоличествоПлан = ТекСтрока.Количество;
				Если ТекСтрока.Выполнен Тогда
					НоваяСтрока.Количество = ТекСтрока.Количество;
				КонецЕсли;
			КонецЕсли;
		ИначеЕсли ТекСтрока.ЗаказГрузоотправителя.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам
			И мсвЗаказыСДетализациейПоЗаказам.Найти(ТекСтрока.ЗаказГрузоотправителя) = Неопределено Тогда
			// Погрузка по заказу с детализацией по заказу в целом. Переносится весь грузовой состав из документа
			мсвЗаказыСДетализациейПоЗаказам.Добавить(ТекСтрока.ЗаказГрузоотправителя);
			Для Каждого СтрокаГруза Из ТекСтрока.ЗаказГрузоотправителя.ГрузовойСостав Цикл 
				Если СтрокаГруза.ГрузовоеМесто.Контейнер Тогда
					НоваяСтрока = тблКоличествоКонтейнеровПоТипамИЗаказам.Добавить();
					НоваяСтрока.Заказ = ТекСтрока.ЗаказГрузоотправителя;
					НоваяСтрока.ТипКонтейнера = ТекСтрока.Номенклатура.ТипКонтейнера;
					Если ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка
						ИЛИ ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяРазгрузка Тогда
						
						НоваяСтрока.КоличествоПлан = ТекСтрока.КоличествоМест;
						Если ТекСтрока.Выполнен Тогда
							НоваяСтрока.Количество = ТекСтрока.КоличествоМест;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	тблКоличествоКонтейнеровПоТипамИЗаказам.Свернуть("Заказ, ТипКонтейнера", "Количество, КоличествоПлан");
	
	// Расчет выработки в целом по документу
	флПланФакт = Константы.уатУчетПланФактаПоМаршрутуВМаршрутныхЛистах.Получить();
	Если флПланФакт Тогда
		ИтоговыеПоказателиФакт = ИтоговыеПоказателиФакт(ДокументОбъект); // рассчитывать "на лету" по ТЧ Маршрут
		
		ДопПараметры = Новый Структура("ПланФакт", "Факт");
		ДобавитьВыработку(ДокументОбъект, Справочники.уатПараметрыВыработки.ПробегСГрузом,
			ИтоговыеПоказателиФакт.ПробегСГрузом, ДопПараметры);
		ДопПараметры = Новый Структура("ПланФакт", "План");
		ДобавитьВыработку(ДокументОбъект, Справочники.уатПараметрыВыработки.ПробегСГрузом,
			ДокументОбъект.ПробегСГрузом, ДопПараметры);
		
		ДопПараметры = Новый Структура("ПланФакт", "Факт");
		ДобавитьВыработку(ДокументОбъект, Справочники.уатПараметрыВыработки.ПробегПорожний,
			ИтоговыеПоказателиФакт.ПробегПорожний, ДопПараметры);
		ДопПараметры = Новый Структура("ПланФакт", "План");
		ДобавитьВыработку(ДокументОбъект, Справочники.уатПараметрыВыработки.ПробегПорожний,
			ДокументОбъект.ПробегПорожний, ДопПараметры);
		
		ДопПараметры = Новый Структура("ПланФакт", "Факт");
		ДобавитьВыработку(ДокументОбъект, Справочники.уатПараметрыВыработки.ПробегОбщий,
			ИтоговыеПоказателиФакт.ПробегСГрузом + ИтоговыеПоказателиФакт.ПробегПорожний, ДопПараметры);
		ДопПараметры = Новый Структура("ПланФакт", "План");	
		ДобавитьВыработку(ДокументОбъект, Справочники.уатПараметрыВыработки.ПробегОбщий,
			ДокументОбъект.ПробегСГрузом + ДокументОбъект.ПробегПорожний, ДопПараметры);
			
		ДопПараметры = Новый Структура("ПланФакт", "Факт");
		ДобавитьВыработку(ДокументОбъект, Справочники.уатПараметрыВыработки.ВремяВРаботе,
			ИтоговыеПоказателиФакт.ВремяВПути, ДопПараметры);
		ДопПараметры = Новый Структура("ПланФакт", "План");
		ДобавитьВыработку(ДокументОбъект, Справочники.уатПараметрыВыработки.ВремяВРаботе,
			ДокументОбъект.ВремяВПути, ДопПараметры);
	Иначе
		ДобавитьВыработку(ДокументОбъект, Справочники.уатПараметрыВыработки.ПробегСГрузом, ДокументОбъект.ПробегСГрузом);
		ДобавитьВыработку(ДокументОбъект, Справочники.уатПараметрыВыработки.ПробегПорожний, ДокументОбъект.ПробегПорожний);
		ДобавитьВыработку(ДокументОбъект, Справочники.уатПараметрыВыработки.ПробегОбщий,
			ДокументОбъект.ПробегСГрузом + ДокументОбъект.ПробегПорожний);
		ДобавитьВыработку(ДокументОбъект, Справочники.уатПараметрыВыработки.ВремяВРаботе, ДокументОбъект.ВремяВПути);
	КонецЕсли;
	ДобавитьВыработку(ДокументОбъект, Справочники.уатПараметрыВыработки.КоличествоРейсов, 1);
	
	// Расчет стоянок и простоев
	СтоянкаВПункте = 0;
	ОбщееВремяСтоянок = 0;
	ОбщееВремяОпозданияСекунд = 0;
	ОбщееВремяПростояСекунд = 0;
	ПредУбытиеФакт = 0;
	ПредПрибытиеФакт = 0;
	ПредПрибытиеПлан = 0;
	ПредЗаказ			 = Неопределено;
	ПредПункт			 = Неопределено;
	ПредТипТочкиМаршрута = Неопределено;
	РассчитыватьОпозданияПоТипуПункта = Ложь;
	РассчитыватьПростоиПоТипуПункта = Ложь;
	ПредОжидание = 0;
	Для Каждого ТекСтрока Из ДокументОбъект.Заказы Цикл
		Если ПредПункт <> ТекСтрока.Пункт Тогда
			РассчитыватьОпозданияПоТипуПункта = Ложь;
			РассчитыватьПростоиПоТипуПункта   = Ложь;
			ПредТипТочкиМаршрута              = Неопределено;
			// Параметры выработки рассчитываются не по пункту из текущей строки, а по предыдущему пункту, чтобы
			// удобнее было учитывать тип точки маршрута этого пункта и рассчитывать стоянку из этого пункта.
			ОбщееВремяСтоянок = уатЗащищенныеФункцииСервер.СложитьВремя(ОбщееВремяСтоянок, СтоянкаВПункте);
			Если РассчитыватьФактическиеПростоиОпоздания И РассчитыватьПростоиПоТипуПункта 
				И ЗначениеЗаполнено(ПредУбытиеФакт) И ЗначениеЗаполнено(ПредПрибытиеПлан) Тогда
				ПредУбытиеПлан = ПредПрибытиеПлан + уатОбщегоНазначения.уатВремяВСекунды(СтоянкаВПункте);
				ПростойСекунд = ПредУбытиеФакт - ПредУбытиеПлан;
				ОбщееВремяПростояСекунд = ОбщееВремяПростояСекунд + ?(ПростойСекунд > 0, ПростойСекунд, 0);
			КонецЕсли;
			Если РассчитыватьФактическиеПростоиОпоздания И РассчитыватьОпозданияПоТипуПункта 
				И ЗначениеЗаполнено(ПредПрибытиеФакт) И ЗначениеЗаполнено(ПредПрибытиеПлан) Тогда
				ОпозданиеСекунд = ПредПрибытиеФакт - ПредПрибытиеПлан;
				ОбщееВремяОпозданияСекунд = ОбщееВремяОпозданияСекунд + ?(ОпозданиеСекунд > ДопустимоеВремяОпозданияСекунд, ОпозданиеСекунд, 0);
			КонецЕсли;
			
			СтоянкаВПункте = ТекСтрока.СтоянкаИзПункта;
			ПредПункт = ТекСтрока.Пункт;
			ПредУбытиеФакт = ТекСтрока.УбытиеФакт;
			ПредПрибытиеФакт = ТекСтрока.ПрибытиеФакт;
			ПредПрибытиеПлан = ТекСтрока.ПрибытиеПлан;
			
			СтоянкаВПункте = уатЗащищенныеФункцииСервер.СложитьВремя(СтоянкаВПункте, ТекСтрока.Стоянка);
			ПредЗаказ = ТекСтрока.ЗаказГрузоотправителя;
		ИначеЕсли ПредЗаказ <> ТекСтрока.ЗаказГрузоотправителя Тогда
			СтоянкаВПункте = уатЗащищенныеФункцииСервер.СложитьВремя(СтоянкаВПункте, ТекСтрока.Стоянка);
			ПредЗаказ = ТекСтрока.ЗаказГрузоотправителя;
			ПредТипТочкиМаршрута = ТекСтрока.ТипТочкиМаршрута;
		ИначеЕсли ПредТипТочкиМаршрута <> ТекСтрока.ТипТочкиМаршрута Тогда
			СтоянкаВПункте = уатЗащищенныеФункцииСервер.СложитьВремя(СтоянкаВПункте, ТекСтрока.Стоянка);
			ПредТипТочкиМаршрута = ТекСтрока.ТипТочкиМаршрута;
		КонецЕсли;
		
		Если ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка
			ИЛИ ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяПогрузка Тогда
			РассчитыватьОпозданияПоТипуПункта = РассчитыватьОпозданияПоТипуПункта 
				ИЛИ Справочники.уатПараметрыВыработки.ФактическоеВремяОпоздания.РассчитыватьПриПогрузке;
			РассчитыватьПростоиПоТипуПункта = РассчитыватьПростоиПоТипуПункта 
				ИЛИ Справочники.уатПараметрыВыработки.ФактическоеВремяПростоя.РассчитыватьПриПогрузке;	
		ИначеЕсли ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка
			ИЛИ ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяРазгрузка Тогда
			РассчитыватьОпозданияПоТипуПункта = РассчитыватьОпозданияПоТипуПункта 
				ИЛИ Справочники.уатПараметрыВыработки.ФактическоеВремяОпоздания.РассчитыватьПриРазгрузке;
			РассчитыватьПростоиПоТипуПункта = РассчитыватьПростоиПоТипуПункта 
				ИЛИ Справочники.уатПараметрыВыработки.ФактическоеВремяПростоя.РассчитыватьПриРазгрузке;
		ИначеЕсли ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ПромежуточныйПункт Тогда
			РассчитыватьОпозданияПоТипуПункта = РассчитыватьОпозданияПоТипуПункта 
				ИЛИ Справочники.уатПараметрыВыработки.ФактическоеВремяОпоздания.РассчитыватьВПромежуточныхПунктах;
			РассчитыватьПростоиПоТипуПункта = РассчитыватьПростоиПоТипуПункта 
				ИЛИ Справочники.уатПараметрыВыработки.ФактическоеВремяПростоя.РассчитыватьВПромежуточныхПунктах;
		КонецЕсли;
	КонецЦикла;
	
	// расчет выработки по последнему пункту (который не был обработан в цикле)
	ОбщееВремяСтоянок = уатЗащищенныеФункцииСервер.СложитьВремя(ОбщееВремяСтоянок, СтоянкаВПункте);
	Если РассчитыватьФактическиеПростоиОпоздания И РассчитыватьПростоиПоТипуПункта
		И ЗначениеЗаполнено(ПредУбытиеФакт) И ЗначениеЗаполнено(ПредПрибытиеПлан) Тогда
		ПредУбытиеПлан = ПредПрибытиеПлан + уатОбщегоНазначения.уатВремяВСекунды(СтоянкаВПункте);
		ПростойСекунд = ПредУбытиеФакт - ПредУбытиеПлан;
		ОбщееВремяПростояСекунд = ОбщееВремяПростояСекунд + ?(ПростойСекунд > 0, ПростойСекунд, 0);
	КонецЕсли;
	Если РассчитыватьФактическиеПростоиОпоздания И РассчитыватьОпозданияПоТипуПункта 
		И ЗначениеЗаполнено(ПредПрибытиеФакт) И ЗначениеЗаполнено(ПредПрибытиеПлан) Тогда
		ОпозданиеСекунд = ПредПрибытиеФакт - ПредПрибытиеПлан;
		ОбщееВремяОпозданияСекунд = ОбщееВремяОпозданияСекунд + ?(ОпозданиеСекунд > ДопустимоеВремяОпозданияСекунд, ОпозданиеСекунд, 0);
	КонецЕсли;
	
	// Запись рассчитанных параметров выработки
	Если ОбщееВремяСтоянок > 0 Тогда
		ДобавитьВыработку(ДокументОбъект, Справочники.уатПараметрыВыработки.ВремяВПростое, ОбщееВремяСтоянок);
	КонецЕсли;
	Если ОбщееВремяОпозданияСекунд > 0 Тогда
		ОбщееВремяОпоздания = уатОбщегоНазначения.уатВремяВЧЧ_ММ(ОбщееВремяОпозданияСекунд);
		ДобавитьВыработку(ДокументОбъект, Справочники.уатПараметрыВыработки.ФактическоеВремяОпоздания, ОбщееВремяОпоздания);
	КонецЕсли;
	Если ОбщееВремяПростояСекунд > 0 Тогда
		ОбщееВремяПростоя = уатОбщегоНазначения.уатВремяВЧЧ_ММ(ОбщееВремяПростояСекунд);
		ДобавитьВыработку(ДокументОбъект, Справочники.уатПараметрыВыработки.ФактическоеВремяПростоя, ОбщееВремяПростоя);
	КонецЕсли;
	
	мсвПункты = Новый Массив;
	ПредПункт = Неопределено;
	Для Каждого ТекСтрока Из ДокументОбъект.Заказы Цикл
		ТекПункт = ТекСтрока.Пункт;
		Если ЗначениеЗаполнено(ТекСтрока.Пункт) И ПредПункт <> ТекПункт Тогда
			мсвПункты.Добавить(ТекСтрока.Пункт);
		КонецЕсли;
		ПредПункт = ТекПункт;
	КонецЦикла;
	
	ДобавитьВыработку(ДокументОбъект, Справочники.уатПараметрыВыработки.КоличествоТочек, мсвПункты.Количество());
	
	ПробегВнеГеозоны = 0;
	Для Каждого ТекПункт Из мсвПункты Цикл
		Если ТипЗнч(ТекПункт) = Тип("Строка") Тогда
			Продолжить;
		КонецЕсли;
		ПробегВнеГеозоны = ПробегВнеГеозоны + ТекПункт.ПробегВнеГеозоны;
	КонецЦикла;
	ДобавитьВыработку(ДокументОбъект, Справочники.уатПараметрыВыработки.ПробегВнеГеозоны, ПробегВнеГеозоны);  
	
	// Количество пунктов по типу пункта в целом по документу
	Для Каждого ТекПункт Из мсвПункты Цикл
		Если ТипЗнч(ТекПункт) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда
			НоваяСтрока = тблПунктыПоТипам.Добавить();
			НоваяСтрока.Заказ = Документы.уатЗаказГрузоотправителя.ПустаяСсылка();
			НоваяСтрока.Количество = 1;  
			НоваяСтрока.ТипПункта = ТекПункт.ТипПункта;
			НоваяСтрока.СпособВводаЗначений = Перечисления.уатСпособыВводаЗначенийВыработкивМЛ_уэ.ВЦеломПоДокументу;
			
			ДопПараметры = Новый Структура("ТипПункта", ТекПункт.ТипПункта);
			ДобавитьВыработку(ДокументОбъект, Справочники.уатПараметрыВыработки.КоличествоТочекПоТипуПункта, 1, ДопПараметры);
			
			ДопПараметры = Новый Структура("ТипПункта", ТекПункт.ТипПункта);
			ДобавитьВыработку(ДокументОбъект, Справочники.уатПараметрыВыработки.ПробегВнеГеозоныПоТипуПункта,
				ТекПункт.ПробегВнеГеозоны, ДопПараметры);
		КонецЕсли;
	КонецЦикла;
	
	// Количество точек по виду операции в целом по документу
	
	тблТочкиПоОперациям = Новый ТаблицаЗначений;
	тблТочкиПоОперациям.Колонки.Добавить("Пункт");
	тблТочкиПоОперациям.Колонки.Добавить("ТипТочкиМаршрута");
	
	Для Каждого ТекСтрока Из ДокументОбъект.Заказы Цикл
		Если ТекСтрока.ЗаказГрузоотправителя.FTL Тогда
			Для Каждого ТекПунктПоЗаказу Из ТекСтрока.ЗаказГрузоотправителя.ПромежуточныеПункты Цикл
				Если ЗначениеЗаполнено(ТекПунктПоЗаказу.Пункт) Тогда
					мсвПоиска = тблТочкиПоОперациям.НайтиСтроки(Новый Структура("Пункт, ТипТочкиМаршрута", ТекПунктПоЗаказу.Пункт, ТекПунктПоЗаказу.ТипТочкиМаршрута));
					Если мсвПоиска.Количество() = 0 Тогда
						НоваяСтрока = тблТочкиПоОперациям.Добавить();
						НоваяСтрока.Пункт = ТекПунктПоЗаказу.Пункт;
						НоваяСтрока.ТипТочкиМаршрута = ТекПунктПоЗаказу.ТипТочкиМаршрута;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Если ЗначениеЗаполнено(ТекСтрока.Пункт) Тогда
				мсвПоиска = тблТочкиПоОперациям.НайтиСтроки(Новый Структура("Пункт, ТипТочкиМаршрута", ТекСтрока.Пункт, ТекСтрока.ТипТочкиМаршрута));
				Если мсвПоиска.Количество() = 0 Тогда
					НоваяСтрока = тблТочкиПоОперациям.Добавить();
					НоваяСтрока.Пункт = ТекСтрока.Пункт;
					НоваяСтрока.ТипТочкиМаршрута = ТекСтрока.ТипТочкиМаршрута;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекПункт Из тблТочкиПоОперациям Цикл
		ДопПараметры = Новый Структура("ТипТочкиМаршрута", ТекПункт.ТипТочкиМаршрута);
		ДобавитьВыработку(ДокументОбъект, Справочники.уатПараметрыВыработки.КоличествоТочекПоВидуОперации, 1, ДопПараметры);
		
		НоваяСтрока = тблТочкиПоТипам.Добавить();
		НоваяСтрока.Заказ = Документы.уатЗаказГрузоотправителя.ПустаяСсылка();
		НоваяСтрока.КоличествоПлан = 1;  
		Если ДокументОбъект.Выполнен Тогда 
			НоваяСтрока.Количество = 1;
		КонецЕсли;
		НоваяСтрока.ТипТочки = ТекПункт.ТипТочкиМаршрута;
		НоваяСтрока.СпособВводаЗначений = Перечисления.уатСпособыВводаЗначенийВыработкивМЛ_уэ.ВЦеломПоДокументу;   
		
		Если ТипЗнч(ТекПункт.Пункт) = Тип("Строка") Тогда
			Продолжить;
		КонецЕсли;
		
		ДопПараметры = Новый Структура("ТипТочкиМаршрута", ТекПункт.ТипТочкиМаршрута);
		ДобавитьВыработку(ДокументОбъект, Справочники.уатПараметрыВыработки.ПробегВнеГеозоныПоВидуОперации, ТекПункт.Пункт.ПробегВнеГеозоны, ДопПараметры);
		
	КонецЦикла;
	
	ДобавитьВыработку(ДокументОбъект, Справочники.уатПараметрыВыработки.ТнКм,
		(ДокументОбъект.ВесБрутто / КоэфВеса) * ДокументОбъект.ПробегСГрузом);
			
	ДобавитьВыработку(ДокументОбъект, Справочники.уатПараметрыВыработки.ОбъемКм,
		(ДокументОбъект.Объем / КоэфОбъема) * ДокументОбъект.ПробегСГрузом);
		
	// Прибытие вне расписания. Этот параметр выработки имеет логику булевого флага. 
	// Считаем, что прибытие вне расписания по маршрутному листу означает прибытие вне расписания хотя бы по 1 заказу
	Если уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП() Тогда
		ПрибытиеВнеРасписания = 0;
		Для Каждого ТекСтрока Из тблПрибытиеВнеРасписания Цикл
			ПрибытиеВнеРасписания = Макс(ПрибытиеВнеРасписания, ТекСтрока.ПрибытиеВнеРасписания);
		КонецЦикла;
		ДобавитьВыработку(ДокументОбъект, Справочники.уатПараметрыВыработки.ВнеРасписания, ПрибытиеВнеРасписания);
	КонецЕсли;
	
	тблПунктыПоТипам.Свернуть("СпособВводаЗначений, Заказ, ТипПункта", "Количество, КоличествоПлан");	
	тблТочкиПоТипам.Свернуть("СпособВводаЗначений, Заказ, ТипТочки", "Количество, КоличествоПлан");
	ЗаписатьПараметрыВыработкиСАналитикой(ДокументОбъект, тблКоличествоУпаковокПоВидамИЗаказам,
		тблКоличествоКонтейнеровПоТипамИЗаказам, тблПунктыПоТипам, тблТочкиПоТипам);
	
	// негабаритные грузы
	ДобавитьВыработкуНегабаритныхГрузов(ДокументОбъект, ПараметрыНегабаритныхГрузов);
	
	// ожидание в целом по документу
	ПредПункт = Неопределено;
	ОжиданиеВсего = 0;
	ОжиданиеВсегоФакт = 0;
	Для Каждого ТекСтрока Из ДокументОбъект.Заказы Цикл
		Если ТекСтрока.Пункт <> ПредПункт Тогда
			ОжиданиеВсего = уатЗащищенныеФункцииСервер.СложитьВремя(ОжиданиеВсего, ТекСтрока.Ожидание);
			ОжиданиеВсегоФакт = уатЗащищенныеФункцииСервер.СложитьВремя(ОжиданиеВсегоФакт, ТекСтрока.ОжиданиеФакт);
		КонецЕсли;
		
		ПредПункт = ТекСтрока.Пункт;
	КонецЦикла;
	Если флПланФакт Тогда
		ДопПараметры = Новый Структура("ПланФакт", "Факт");
		ДобавитьВыработку(ДокументОбъект, Справочники.уатПараметрыВыработки.ВремяОжидания, ОжиданиеВсегоФакт, ДопПараметры);
		ДопПараметры = Новый Структура("ПланФакт", "План");
		ДобавитьВыработку(ДокументОбъект, Справочники.уатПараметрыВыработки.ВремяОжидания, ОжиданиеВсего, ДопПараметры);
	Иначе
		ДобавитьВыработку(ДокументОбъект, Справочники.уатПараметрыВыработки.ВремяОжидания, ОжиданиеВсего);
	КонецЕсли;
		
	// Ночная доставка
	флНочнаяДоставка = уатРасчетыПоТарифам_уэ.ЭтоНочнаяДоставка(ДокументОбъект.ДатаИВремяОтправления,
		ДокументОбъект.ДатаИВремяВыполнения, ДокументОбъект.Организация);
	Если флНочнаяДоставка Тогда
		ДобавитьВыработку(ДокументОбъект, Справочники.уатПараметрыВыработки.НочнаяДоставка, 1);
	КонецЕсли;
	
	// расчет произвольной выработки по формулам
	ДобавитьВыработкуПоФормулам(ДокументОбъект, флПланФакт);
	
	// чистим неиспользуемые аналитики
	флУчетВыработкиПоКонтрагентам = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументОбъект.Организация, "УчетВыработкиПоКонтрагентам");
	флУчетВыработкиПоПодразделениям = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументОбъект.Организация, "УчетВыработкиПоПодразделениям");
	флУчетВыработкиПоМаршрутам = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументОбъект.Организация, "УчетВыработкиПоМаршрутам");
	флУчетВыработкиПоОбъектамСтроительства = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументОбъект.Организация, "УчетВыработкиПоОбъектамСтроительства");
	флУчетВыработкиПоВидамПеревозок = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументОбъект.Организация, "УчетВыработкиПоВидамПеревозок");
	флУчетВыработкиПоНаправлениямПеревозок = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументОбъект.Организация, "УчетВыработкиПоНаправлениямПеревозок");
	Для Каждого ТекСтрокаВыработки Из ДокументОбъект.ВыработкаТСиСотрудников Цикл
		Если НЕ флУчетВыработкиПоКонтрагентам Тогда
			ТекСтрокаВыработки.Контрагент = Неопределено;
		КонецЕсли;
		Если НЕ флУчетВыработкиПоПодразделениям Тогда
			ТекСтрокаВыработки.Подразделение = Неопределено;
		КонецЕсли;
		Если НЕ флУчетВыработкиПоМаршрутам Тогда
			ТекСтрокаВыработки.Маршрут = Неопределено;
		КонецЕсли;
		Если НЕ флУчетВыработкиПоОбъектамСтроительства Тогда
			ТекСтрокаВыработки.ОбъектСтроительства = Неопределено;
		КонецЕсли;
		Если НЕ флУчетВыработкиПоВидамПеревозок Тогда
			ТекСтрокаВыработки.ВидПеревозки = Неопределено;
		КонецЕсли;
		Если НЕ флУчетВыработкиПоНаправлениямПеревозок Тогда
			ТекСтрокаВыработки.НаправлениеПеревозки = Неопределено;
		КонецЕсли;
	КонецЦикла;
	
	ДокументОбъект.ВыработкаТСиСотрудников.Сортировать("ЗаказГрузоотправителя, ПараметрВыработки, Контрагент"
		+ ", Подразделение, Маршрут, ОбъектСтроительства, ВидПеревозки, НаправлениеПеревозки, ДопАналитика");
	
КонецПроцедуры

Процедура ДобавитьВыработку(ДокументОбъект, ПараметрВыработки, Количество, ДопПараметры = Неопределено)
	
	Если Количество <= 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ПараметрВыработки.ДействуетНаТСМЛ
		И НЕ ПараметрВыработки.ДействуетНаСотрудниковМЛ Тогда
		Возврат;
	КонецЕсли;
	
	Если ДопПараметры = Неопределено Тогда
		ДопПараметры = Новый Структура;
	КонецЕсли;
	
	ДобавитьПроизводнуюВыработку(ДокументОбъект, ПараметрВыработки, Количество, ДопПараметры);
	
	//флЗаказУказан = ДопПараметры.Свойство("Заказ") И ЗначениеЗаполнено(ДопПараметры.Заказ);
	флЗаказУказан = ДопПараметры.Свойство("Заказ");
	флПозаказнаяВыработка = ПараметрВыработки.СпособВводаЗначений <> Перечисления.уатСпособыВводаЗначенийВыработкивМЛ_уэ.ВЦеломПоДокументу
		ИЛИ ПараметрВыработки = Справочники.уатПараметрыВыработки.СтоимостьГруза;
		
	Если НЕ флЗаказУказан И флПозаказнаяВыработка ИЛИ флЗаказУказан И НЕ флПозаказнаяВыработка Тогда
		Возврат;
	КонецЕсли;
		
	Если НЕ ДопПараметры.Свойство("ПланФакт") Тогда
		ДопПараметры.Вставить("ПланФакт", "ПланФакт");
	КонецЕсли;
	Если НЕ ДопПараметры.Свойство("Заказ") Тогда
		ДопПараметры.Вставить("Заказ", Документы.уатЗаказГрузоотправителя.ПустаяСсылка());
	КонецЕсли;
	Если НЕ ДопПараметры.Свойство("ТипПункта") Тогда
		ДопПараметры.Вставить("ТипПункта", Неопределено);
	КонецЕсли;
	Если НЕ ДопПараметры.Свойство("ТипТочкиМаршрута") Тогда
		ДопПараметры.Вставить("ТипТочкиМаршрута", Неопределено);
	КонецЕсли;
	Если НЕ ДопПараметры.Свойство("ВидУпаковки") Тогда
		ДопПараметры.Вставить("ВидУпаковки", Неопределено);
	КонецЕсли;
	Если НЕ ДопПараметры.Свойство("ТипКонтейнера") Тогда
		ДопПараметры.Вставить("ТипКонтейнера", Неопределено);
	КонецЕсли;
	Если НЕ ДопПараметры.Свойство("ВидСкладскойОперации") Тогда
		ДопПараметры.Вставить("ВидСкладскойОперации", Неопределено);
	КонецЕсли;
	Если НЕ ДопПараметры.Свойство("Склад") Тогда
		ДопПараметры.Вставить("Склад", Неопределено);
	КонецЕсли;
	Если НЕ ДопПараметры.Свойство("КоличествоМест") Тогда
		ДопПараметры.Вставить("КоличествоМест", 0);
	КонецЕсли;
	Если НЕ ДопПараметры.Свойство("Вес") Тогда
		ДопПараметры.Вставить("Вес", 0);
	КонецЕсли;
	Если НЕ ДопПараметры.Свойство("Объем") Тогда
		ДопПараметры.Вставить("Объем", 0);
	КонецЕсли;
	Если НЕ ДопПараметры.Свойство("КоличествоМестДни") Тогда
		ДопПараметры.Вставить("КоличествоМестДни", 0);
	КонецЕсли;
	Если НЕ ДопПараметры.Свойство("ВесДни") Тогда
		ДопПараметры.Вставить("ВесДни", 0);
	КонецЕсли;
	Если НЕ ДопПараметры.Свойство("ОбъемДни") Тогда
		ДопПараметры.Вставить("ОбъемДни", 0);
	КонецЕсли;
	Если НЕ ДопПараметры.Свойство("ДопВыработка") Тогда
		ДопПараметры.Вставить("ДопВыработка", Ложь);
	КонецЕсли;
	Если НЕ ДопПараметры.Свойство("Выполнен") Тогда
		Если ЗначениеЗаполнено(ДопПараметры.Заказ) Тогда
			ДопПараметры.Вставить("Выполнен", ЗаказДоставлен(ДокументОбъект, ДопПараметры.Заказ));
		Иначе
			ДопПараметры.Вставить("Выполнен", ДокументОбъект.Выполнен);
		КонецЕсли;
	КонецЕсли;
	ТекДопАналитика = Неопределено;
	Если ДопПараметры.Свойство("Выработка") Тогда
		тблВыработка = ДопПараметры.Выработка;
	Иначе
		тблВыработка = ДокументОбъект.ВыработкаТСиСотрудников;
		Если ПараметрВыработки = Справочники.уатПараметрыВыработки.КоличествоТочекПоТипуПункта
			ИЛИ ПараметрВыработки = Справочники.уатПараметрыВыработки.ПробегВнеГеозоныПоТипуПункта Тогда
			ТекДопАналитика = ДопПараметры.ТипПункта;
		ИначеЕсли ПараметрВыработки = Справочники.уатПараметрыВыработки.КоличествоТочекПоВидуОперации 
			ИЛИ ПараметрВыработки = Справочники.уатПараметрыВыработки.ПробегВнеГеозоныПоВидуОперации Тогда
			ТекДопАналитика = ДопПараметры.ТипТочкиМаршрута;
		ИначеЕсли ПараметрВыработки = Справочники.уатПараметрыВыработки.КоличествоУпаковок Тогда
			ТекДопАналитика = ДопПараметры.ВидУпаковки;
		ИначеЕсли ПараметрВыработки = Справочники.уатПараметрыВыработки.КоличествоКонтейнеров Тогда
			ТекДопАналитика = ДопПараметры.ТипКонтейнера;
		КонецЕсли;
	КонецЕсли;
	
	// Некоторые ПВ могут расчитываться в цикле по заказам, но со способом расчета "В целом по документу"
	// по сути это вся выработка, сумма по заказам которой равна итоговой выработке по документу
	// это все ПВ кроме времени и расстояния, и некоторых специфических
	// При этом детализация по заказам в выработке не должна отражаться, и значение заказа нужно сбросить.
	Если ЗначениеЗаполнено(ДопПараметры.Заказ) И НЕ флПозаказнаяВыработка Тогда
		ДопПараметры.Заказ = Документы.уатЗаказГрузоотправителя.ПустаяСсылка();
	КонецЕсли;
			
	флПланФакт = Константы.уатУчетПланФактаПоМаршрутуВМаршрутныхЛистах.Получить();
	Если НЕ флПланФакт Тогда
		Если ДопПараметры.ПланФакт = "ПланФакт" Тогда
			ДопПараметры.ПланФакт = "Факт";
		ИначеЕсли ДопПараметры.ПланФакт = "План" Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Фактическая выработка расчитывается только для выполненных строк заказов при "построчном" расчете
	// и для выполненного МЛ при расчете "в целом по документу"
	Если НЕ ДопПараметры.Выполнен И ДопПараметры.ПланФакт = "Факт" Тогда
		Возврат;
	КонецЕсли;
	
	стрПоиска = Новый Структура("ЗаказГрузоотправителя, ПараметрВыработки", ДопПараметры.Заказ, ПараметрВыработки);
	Если ДопПараметры.Свойство("Выработка") Тогда
		Если ДопПараметры.ТипПункта <> Неопределено Тогда 
			стрПоиска.Вставить("ТипПункта", ДопПараметры.ТипПункта);
		ИначеЕсли ДопПараметры.ТипТочкиМаршрута <> Неопределено Тогда 
			стрПоиска.Вставить("ТипТочкиМаршрута", ДопПараметры.ТипТочкиМаршрута);
		ИначеЕсли ДопПараметры.ВидУпаковки <> Неопределено Тогда
			стрПоиска.Вставить("ВидУпаковки", ДопПараметры.ВидУпаковки);
		ИначеЕсли ДопПараметры.ТипКонтейнера <> Неопределено Тогда
			стрПоиска.Вставить("ТипКонтейнера", ДопПараметры.ТипКонтейнера);
		КонецЕсли;
		Если ДопПараметры.ВидСкладскойОперации <> Неопределено Тогда
			стрПоиска.Вставить("ВидСкладскойОперации", ДопПараметры.ВидСкладскойОперации);
		КонецЕсли;
	Иначе
		стрПоиска.Вставить("ДопАналитика", ТекДопАналитика);
	КонецЕсли;
		
	ДобавлятьНовуюСтроку = Ложь;
	Если ПараметрВыработки = Справочники.уатПараметрыВыработки.СкладскаяОбработка Тогда
		// Каждую строку складсой обработки нужно рассчитывать отдельно
		ДобавлятьНовуюСтроку = Истина;
	КонецЕсли;
	
	Если Не ДобавлятьНовуюСтроку Тогда
		мсвСтрокиПоиска = тблВыработка.НайтиСтроки(стрПоиска);
		ДобавлятьНовуюСтроку = (мсвСтрокиПоиска.Количество() = 0);
	КонецЕсли;
	
	Если ДобавлятьНовуюСтроку Тогда
		ТекСтрокаВыработки = тблВыработка.Добавить();
		ТекСтрокаВыработки.ЗаказГрузоотправителя = ДопПараметры.Заказ;
		ТекСтрокаВыработки.ПараметрВыработки     = ПараметрВыработки;
		ТекСтрокаВыработки.КоличествоПлан        = 0;
		ТекСтрокаВыработки.КоличествоФакт        = 0;
		Если флПозаказнаяВыработка Тогда
			ТекСтрокаВыработки.Контрагент            = ДопПараметры.Заказ.Контрагент;
			ТекСтрокаВыработки.Подразделение         = ДопПараметры.Заказ.Подразделение;
			ТекСтрокаВыработки.ВидПеревозки          = ДопПараметры.Заказ.ВидПеревозки;
			ТекСтрокаВыработки.НаправлениеПеревозки  = ДопПараметры.Заказ.НаправлениеПеревозки;
			ТекСтрокаВыработки.Маршрут               = ДопПараметры.Заказ.Маршрут;
			ТекСтрокаВыработки.ОбъектСтроительства   = ДопПараметры.Заказ.ОбъектСтроительства;
		Иначе
			ТекСтрокаВыработки.Контрагент            = ДокументОбъект.Контрагент;
			ТекСтрокаВыработки.Подразделение         = ДокументОбъект.Подразделение;
			ТекСтрокаВыработки.ВидПеревозки          = ДокументОбъект.ВидПеревозки;
			ТекСтрокаВыработки.НаправлениеПеревозки  = ДокументОбъект.НаправлениеПеревозки;
			ТекСтрокаВыработки.Маршрут               = ДокументОбъект.Маршрут;
			ТекСтрокаВыработки.ОбъектСтроительства   = ДокументОбъект.ОбъектСтроительства;
		КонецЕсли;
		Если ДопПараметры.Свойство("Выработка") Тогда
			ТекСтрокаВыработки.ТипПункта             = ДопПараметры.ТипПункта;
			ТекСтрокаВыработки.ТипТочкиМаршрута      = ДопПараметры.ТипТочкиМаршрута;
			ТекСтрокаВыработки.ВидУпаковки           = ДопПараметры.ВидУпаковки;
			ТекСтрокаВыработки.ТипКонтейнера         = ДопПараметры.ТипКонтейнера;
			ТекСтрокаВыработки.ВидСкладскойОперации  = ДопПараметры.ВидСкладскойОперации;
			ТекСтрокаВыработки.КоличествоМест        = ДопПараметры.КоличествоМест;
			ТекСтрокаВыработки.Вес                   = ДопПараметры.Вес;
			ТекСтрокаВыработки.Объем                 = ДопПараметры.Объем;
			ТекСтрокаВыработки.Склад                 = ДопПараметры.Склад;
			ТекСтрокаВыработки.КоличествоМестДни     = ДопПараметры.КоличествоМестДни;
			ТекСтрокаВыработки.ВесДни                = ДопПараметры.ВесДни;
			ТекСтрокаВыработки.ОбъемДни              = ДопПараметры.ОбъемДни;
		Иначе
			ТекСтрокаВыработки.ДопАналитика = ТекДопАналитика;
		КонецЕсли;
	Иначе
		ТекСтрокаВыработки = мсвСтрокиПоиска[0];
		Если ТекСтрокаВыработки.РучнойВвод Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если СтрНайти(ДопПараметры.ПланФакт, "План") <> 0 Тогда
		Если ПараметрВыработки.ОтображениеВВидеФлага Тогда
			ТекСтрокаВыработки.КоличествоПлан = 1;
		ИначеЕсли ПараметрВыработки.Временный Тогда
			ТекСтрокаВыработки.КоличествоПлан = ТекСтрокаВыработки.КоличествоПлан + уатОбщегоНазначения.уатВремяВСекунды(Количество);
		Иначе
			ТекСтрокаВыработки.КоличествоПлан = ТекСтрокаВыработки.КоличествоПлан + Количество;
		КонецЕсли;
	КонецЕсли;
	
	Если ДопПараметры.Выполнен И СтрНайти(ДопПараметры.ПланФакт, "Факт") <> 0 Тогда
		Если ПараметрВыработки.ОтображениеВВидеФлага Тогда
			ТекСтрокаВыработки.КоличествоФакт = 1;
		ИначеЕсли ПараметрВыработки.Временный Тогда
			ТекСтрокаВыработки.КоличествоФакт = ТекСтрокаВыработки.КоличествоФакт + уатОбщегоНазначения.уатВремяВСекунды(Количество);
		Иначе
			ТекСтрокаВыработки.КоличествоФакт = ТекСтрокаВыработки.КоличествоФакт + Количество;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ДобавитьВыработкуПоФормулам(ДокументОбъект, флПланФакт)
	мсвЗаказы = Новый Массив;
	мсвЗаказы.Добавить(Документы.уатЗаказГрузоотправителя.ПустаяСсылка()); // для расчета по МЛ в целом
	Для Каждого ТекЗаказ Из ДокументОбъект.Заказы Цикл
		Если мсвЗаказы.Найти(ТекЗаказ.ЗаказГрузоотправителя) = Неопределено Тогда
			мсвЗаказы.Добавить(ТекЗаказ.ЗаказГрузоотправителя);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекЗаказ Из мсвЗаказы Цикл
		СтруктураЗаказ = Новый Структура("ЗаказГрузоотправителя", ТекЗаказ);
		Если ТипЗнч(ДокументОбъект.ВыработкаТСиСотрудников) = Тип("ТаблицаЗначений") Тогда
			тблВыработка = Новый ТаблицаЗначений;
			тблВыработка = ДокументОбъект.ВыработкаТСиСотрудников.Скопировать(СтруктураЗаказ);
		Иначе
			тблВыработка = ДокументОбъект.ВыработкаТСиСотрудников.Выгрузить(СтруктураЗаказ);
		КонецЕсли;
		
		// перевод из секунд в часы и доли часа для передачи в блок расчета по формулам
		тблВыработка.Колонки.Добавить("КоличествоПлан2", Новый ОписаниеТипов("Число"));
		тблВыработка.Колонки.Добавить("КоличествоФакт2", Новый ОписаниеТипов("Число"));
		Для Каждого ТекСтрока Из тблВыработка Цикл
			Если ТекСтрока.ПараметрВыработки.Временный Тогда
				ТекСтрока.КоличествоПлан2 = ТекСтрока.КоличествоПлан / 3600;
				ТекСтрока.КоличествоФакт2 = ТекСтрока.КоличествоФакт / 3600;
			Иначе
				ТекСтрока.КоличествоПлан2 = ТекСтрока.КоличествоПлан;
				ТекСтрока.КоличествоФакт2 = ТекСтрока.КоличествоФакт;
			КонецЕсли;
		КонецЦикла;
		тблВыработка.Колонки.Удалить("КоличествоПлан");
		тблВыработка.Колонки.Удалить("КоличествоФакт");
		тблВыработка.Колонки.КоличествоПлан2.Имя = "КоличествоПлан";
		тблВыработка.Колонки.КоличествоФакт2.Имя = "КоличествоФакт";
			
		КоличСтрокДоРасчета = тблВыработка.Количество();
		ДопПараметрыФормулы = Новый Структура("ПараметрыЗаказаДляРасчета", СтруктураЗаказ);
		
		Если флПланФакт Тогда
			тблВыработка.Колонки.КоличествоПлан.Имя = "Количество";
			уатРасчетыПоТарифам_уэ.РассчитатьПараметрыВыработкиПоФормулам(тблВыработка, ДокументОбъект, ДопПараметрыФормулы); // расчет плана
			тблВыработка.Колонки.Количество.Имя = "КоличествоПлан";
		КонецЕсли;
		
		тблВыработка.Колонки.КоличествоФакт.Имя = "Количество";
		уатРасчетыПоТарифам_уэ.РассчитатьПараметрыВыработкиПоФормулам(тблВыработка, ДокументОбъект, ДопПараметрыФормулы); // расчет факта
		тблВыработка.Колонки.Количество.Имя = "КоличествоФакт";
		
		Если тблВыработка.Количество() > КоличСтрокДоРасчета Тогда
			Для Сч = КоличСтрокДоРасчета По тблВыработка.Количество()-1 Цикл
				ТекВыработкаПоФормуле = тблВыработка[Сч];
				
				// перевод из часы и доли часа в часы и минуты для добавления в выработку
				Если ТекВыработкаПоФормуле.ПараметрВыработки.Временный Тогда
					ТекКоличествоФакт = уатОбщегоНазначения.уатВремяВЧЧ_ММ(ТекВыработкаПоФормуле.КоличествоФакт * 3600);
					ТекКоличествоПлан = уатОбщегоНазначения.уатВремяВЧЧ_ММ(ТекВыработкаПоФормуле.КоличествоПлан * 3600);
				Иначе
					ТекКоличествоФакт = ТекВыработкаПоФормуле.КоличествоФакт;
					ТекКоличествоПлан = ТекВыработкаПоФормуле.КоличествоПлан;
				КонецЕсли;
				
				ДопПараметры = Новый Структура("ПланФакт, Заказ", "Факт", ТекЗаказ);
				ДобавитьВыработку(ДокументОбъект, ТекВыработкаПоФормуле.ПараметрВыработки, ТекКоличествоФакт, ДопПараметры);
					
				ДопПараметры = Новый Структура("ПланФакт, Заказ", "План", ТекЗаказ);
				ДобавитьВыработку(ДокументОбъект, ТекВыработкаПоФормуле.ПараметрВыработки, ТекКоличествоПлан, ДопПараметры);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры
	
Процедура ЗаписатьПараметрыВыработкиСАналитикой(ДокументОбъект, табКоличествоУпаковокПоВидам,
	тблКоличествоКонтейнеровПоТипамИЗаказам, тблПунктыПоТипам, тблТочкиПоТипам)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	табКоличествоУпаковокПоВидам.Количество КАК Количество,
	|	табКоличествоУпаковокПоВидам.КоличествоПлан КАК КоличествоПлан,
	|	табКоличествоУпаковокПоВидам.ВидУпаковки КАК ВидУпаковки,
	|	табКоличествоУпаковокПоВидам.Заказ КАК Заказ
	|ПОМЕСТИТЬ втКоличествоУпаковокПоВидам
	|ИЗ
	|	&табКоличествоУпаковокПоВидам КАК табКоличествоУпаковокПоВидам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	тблКоличествоКонтейнеровПоТипамИЗаказам.Количество КАК Количество,
	|	тблКоличествоКонтейнеровПоТипамИЗаказам.КоличествоПлан КАК КоличествоПлан,
	|	тблКоличествоКонтейнеровПоТипамИЗаказам.ТипКонтейнера КАК ТипКонтейнера,
	|	тблКоличествоКонтейнеровПоТипамИЗаказам.Заказ КАК Заказ
	|ПОМЕСТИТЬ втКоличествоКонтейнеровПоТипам
	|ИЗ
	|	&тблКоличествоКонтейнеровПоТипамИЗаказам КАК тблКоличествоКонтейнеровПоТипамИЗаказам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	тблПунктыПоТипам.Количество КАК Количество,
	|	тблПунктыПоТипам.КоличествоПлан КАК КоличествоПлан,
	|	тблПунктыПоТипам.ТипПункта КАК ТипПункта,
	|	тблПунктыПоТипам.СпособВводаЗначений КАК СпособВводаЗначений,
	|	тблПунктыПоТипам.Заказ КАК Заказ
	|ПОМЕСТИТЬ втПунктыПоТипам
	|ИЗ
	|	&тблПунктыПоТипам КАК тблПунктыПоТипам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	тблТочкиПоТипам.Количество КАК Количество,
	|	тблТочкиПоТипам.КоличествоПлан КАК КоличествоПлан,
	|	тблТочкиПоТипам.ТипТочки КАК ТипТочкиМаршрута,
	|	тблТочкиПоТипам.СпособВводаЗначений КАК СпособВводаЗначений,
	|	тблТочкиПоТипам.Заказ КАК Заказ
	|ПОМЕСТИТЬ втТочкиПоТипам
	|ИЗ
	|	&тблТочкиПоТипам КАК тблТочкиПоТипам
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатПараметрыВыработки.Ссылка КАК Ссылка,
	|	втКоличествоУпаковокПоВидам.Количество КАК Количество,
	|	втКоличествоУпаковокПоВидам.КоличествоПлан КАК КоличествоПлан,
	|	втКоличествоУпаковокПоВидам.Заказ КАК Заказ,
	|	уатПараметрыВыработки.СпособВводаЗначений КАК СпособВводаЗначений
	|ИЗ
	|	Справочник.уатПараметрыВыработки КАК уатПараметрыВыработки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втКоличествоУпаковокПоВидам КАК втКоличествоУпаковокПоВидам
	|		ПО уатПараметрыВыработки.ВидУпаковки = втКоличествоУпаковокПоВидам.ВидУпаковки
	|ГДЕ
	|	уатПараметрыВыработки.СпособРасчетаПараметровВыработки = ЗНАЧЕНИЕ(Перечисление.уатСпособРасчетаПараметровВыработки.КоличествоУпаковокПоВидуУпаковки)
	|	И (ЕСТЬNULL(втКоличествоУпаковокПоВидам.Количество, 0) > 0 ИЛИ ЕСТЬNULL(втКоличествоУпаковокПоВидам.КоличествоПлан, 0) > 0)
	|	И НЕ уатПараметрыВыработки.ПометкаУдаления
	|	И уатПараметрыВыработки.ДействуетНаТСМЛ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	уатПараметрыВыработки.Ссылка,
	|	втКоличествоКонтейнеровПоТипам.Количество,
	|	втКоличествоКонтейнеровПоТипам.КоличествоПлан,
	|	втКоличествоКонтейнеровПоТипам.Заказ,
	|	уатПараметрыВыработки.СпособВводаЗначений
	|ИЗ
	|	Справочник.уатПараметрыВыработки КАК уатПараметрыВыработки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втКоличествоКонтейнеровПоТипам КАК втКоличествоКонтейнеровПоТипам
	|		ПО уатПараметрыВыработки.ТипКонтейнера = втКоличествоКонтейнеровПоТипам.ТипКонтейнера
	|ГДЕ
	|	уатПараметрыВыработки.СпособРасчетаПараметровВыработки = ЗНАЧЕНИЕ(Перечисление.уатСпособРасчетаПараметровВыработки.КоличествоКонтейнеровПоТипуКонтейнера)
	|	И (ЕСТЬNULL(втКоличествоКонтейнеровПоТипам.Количество, 0) > 0 ИЛИ ЕСТЬNULL(втКоличествоКонтейнеровПоТипам.КоличествоПлан, 0) > 0)
	|	И НЕ уатПараметрыВыработки.ПометкаУдаления
	|	И уатПараметрыВыработки.ДействуетНаТСМЛ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	уатПараметрыВыработки.Ссылка,
	|	втПунктыПоТипам.Количество,
	|	втПунктыПоТипам.КоличествоПлан,
	|	втПунктыПоТипам.Заказ,
	|	уатПараметрыВыработки.СпособВводаЗначений
	|ИЗ
	|	Справочник.уатПараметрыВыработки КАК уатПараметрыВыработки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПунктыПоТипам КАК втПунктыПоТипам
	|		ПО уатПараметрыВыработки.ТипПункта = втПунктыПоТипам.ТипПункта
	|			И уатПараметрыВыработки.СпособВводаЗначений = втПунктыПоТипам.СпособВводаЗначений
	|ГДЕ
	|	уатПараметрыВыработки.СпособРасчетаПараметровВыработки = ЗНАЧЕНИЕ(Перечисление.уатСпособРасчетаПараметровВыработки.КоличествоТочекПоТипуПункта)
	|	И (ЕСТЬNULL(втПунктыПоТипам.Количество, 0) > 0 ИЛИ ЕСТЬNULL(втПунктыПоТипам.КоличествоПлан, 0) > 0)
	|	И НЕ уатПараметрыВыработки.ПометкаУдаления
	|	И уатПараметрыВыработки.ДействуетНаТСМЛ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	уатПараметрыВыработки.Ссылка,
	|	втТочкиПоТипам.Количество,
	|	втТочкиПоТипам.КоличествоПлан,
	|	втТочкиПоТипам.Заказ,
	|	уатПараметрыВыработки.СпособВводаЗначений
	|ИЗ
	|	Справочник.уатПараметрыВыработки КАК уатПараметрыВыработки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втТочкиПоТипам КАК втТочкиПоТипам
	|		ПО уатПараметрыВыработки.ТипТочкиМаршрута = втТочкиПоТипам.ТипТочкиМаршрута
	|			И уатПараметрыВыработки.СпособВводаЗначений = втТочкиПоТипам.СпособВводаЗначений
	|ГДЕ
	|	уатПараметрыВыработки.СпособРасчетаПараметровВыработки = ЗНАЧЕНИЕ(Перечисление.уатСпособРасчетаПараметровВыработки.КоличествоОперацийПоТипуТочкиМаршрута)
	|	И (ЕСТЬNULL(втТочкиПоТипам.Количество, 0) > 0 ИЛИ ЕСТЬNULL(втТочкиПоТипам.КоличествоПлан, 0) > 0)
	|	И НЕ уатПараметрыВыработки.ПометкаУдаления
	|	И уатПараметрыВыработки.ДействуетНаТСМЛ");

	Запрос.УстановитьПараметр("табКоличествоУпаковокПоВидам", табКоличествоУпаковокПоВидам);
	Запрос.УстановитьПараметр("тблКоличествоКонтейнеровПоТипамИЗаказам", тблКоличествоКонтейнеровПоТипамИЗаказам);
	Запрос.УстановитьПараметр("тблПунктыПоТипам", тблПунктыПоТипам);
	Запрос.УстановитьПараметр("тблТочкиПоТипам", тблТочкиПоТипам);
	
	Заказ = Документы.уатЗаказГрузоотправителя.ПустаяСсылка();
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.СпособВводаЗначений = Перечисления.уатСпособыВводаЗначенийВыработкивМЛ_уэ.ВТабличнойЧасти
			И ЗначениеЗаполнено(Выборка.Заказ) Тогда
			флЗаказУказан = Истина;
		ИначеЕсли Выборка.СпособВводаЗначений = Перечисления.уатСпособыВводаЗначенийВыработкивМЛ_уэ.ВЦеломПоДокументу Тогда
			флЗаказУказан = Ложь;
		Иначе
			Продолжить;
		КонецЕсли;
		
		ДопПараметры = Новый Структура("ПланФакт", "Факт");
		Если флЗаказУказан Тогда
			ДопПараметры.Вставить("Заказ", Выборка.Заказ);
		КонецЕсли;
		ДобавитьВыработку(ДокументОбъект, Выборка.Ссылка, Выборка.Количество, ДопПараметры);
		
		ДопПараметры = Новый Структура("ПланФакт", "План");
		Если флЗаказУказан Тогда
			ДопПараметры.Вставить("Заказ", Выборка.Заказ);
		КонецЕсли;
		ДобавитьВыработку(ДокументОбъект, Выборка.Ссылка, Выборка.КоличествоПлан, ДопПараметры);
	КонецЦикла;
	
КонецПроцедуры

Процедура ДобавитьПревышениеГабаритов(ТекСтрока, ПараметрыНегабаритныхГрузов)
	// инициализация значений превышений по текущему заказу
	Если ПараметрыНегабаритныхГрузов.ЗначенияПревышений.Получить(ТекСтрока.ЗаказГрузоотправителя) = Неопределено Тогда
		СтруктураПревышений = Новый Структура("ПревышениеВеса, ПревышениеОбъема, ПревышениеВысоты, ПревышениеДлины, ПревышениеШирины", 0, 0, 0, 0, 0);
		ПараметрыНегабаритныхГрузов.ЗначенияПревышений.Вставить(ТекСтрока.ЗаказГрузоотправителя, СтруктураПревышений);
	КонецЕсли;
	
	// расчет превышения по весу и объему выполняем по ввесу и объему в строке МЛ
	СтруктураПревышений = ПараметрыНегабаритныхГрузов.ЗначенияПревышений.Получить(ТекСтрока.ЗаказГрузоотправителя);
	Если ПараметрыНегабаритныхГрузов.ПорогПревышенияПоВесу > 0 Тогда
		Если Справочники.уатПараметрыВыработки.ПревышениеВеса.СпособВводаЗначений = Перечисления.уатСпособыВводаЗначенийВыработкивМЛ_уэ.ВЦеломПоДокументу Тогда
			Если ПараметрыНегабаритныхГрузов.ОбщийВес > ПараметрыНегабаритныхГрузов.ПорогПревышенияПоВесу Тогда
				СтруктураПревышений.ПревышениеВеса =
					ПараметрыНегабаритныхГрузов.ОбщийВес - ПараметрыНегабаритныхГрузов.ПорогПревышенияПоВесу;
			КонецЕсли;	
		Иначе
			Если ТекСтрока.ВесБрутто > ПараметрыНегабаритныхГрузов.ПорогПревышенияПоВесу Тогда
				СтруктураПревышений.ПревышениеВеса =
					Макс(СтруктураПревышений.ПревышениеВеса, ТекСтрока.ВесБрутто - ПараметрыНегабаритныхГрузов.ПорогПревышенияПоВесу);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ПараметрыНегабаритныхГрузов.ПорогПревышенияПоОбъему > 0 Тогда
		Если Справочники.уатПараметрыВыработки.ПревышениеОбъема.СпособВводаЗначений = Перечисления.уатСпособыВводаЗначенийВыработкивМЛ_уэ.ВЦеломПоДокументу Тогда
			Если ПараметрыНегабаритныхГрузов.ОбщийОбъем > ПараметрыНегабаритныхГрузов.ПорогПревышенияПоОбъему Тогда
				СтруктураПревышений.ПревышениеОбъема =
					ПараметрыНегабаритныхГрузов.ОбщийОбъем - ПараметрыНегабаритныхГрузов.ПорогПревышенияПоОбъему;
			КонецЕсли;	
		Иначе
			Если ТекСтрока.Объем > ПараметрыНегабаритныхГрузов.ПорогПревышенияПоОбъему Тогда
				СтруктураПревышений.ПревышениеОбъема =
					Макс(СтруктураПревышений.ПревышениеОбъема, ТекСтрока.Объем - ПараметрыНегабаритныхГрузов.ПорогПревышенияПоОбъему);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Габаритов в строке МЛ нет, нужно получать их из заказа (для грузовых мест) или из весо-объемных характеристик
	// номенклатуры груза (для товаров)
	ГабаритыГруза = Неопределено;
	Если ПараметрыНегабаритныхГрузов.ПорогПревышенияПоВысоте > 0
		ИЛИ ПараметрыНегабаритныхГрузов.ПорогПревышенияПоДлине > 0
		ИЛИ ПараметрыНегабаритныхГрузов.ПорогПревышенияПоШирине > 0 Тогда
		
		Если ТекСтрока.ЗаказГрузоотправителя.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам Тогда
			ГабаритыГруза = уатОбщегоНазначения.ПолучитьВесОбъемНоменклатуры(
				ТекСтрока.Номенклатура, ТекСтрока.ЕдиницаИзмерения, ТекСтрока.Количество);
		Иначе
			СтрокаГрузовоеМесто = ТекСтрока.ЗаказГрузоотправителя.ГрузовойСостав.Найти(ТекСтрока.Номенклатура, "ГрузовоеМесто");
			Если СтрокаГрузовоеМесто <> Неопределено Тогда
				ГабаритыГруза = Новый Структура("Высота, Длина, Ширина", СтрокаГрузовоеМесто.Высота, СтрокаГрузовоеМесто.Длина, СтрокаГрузовоеМесто.Ширина);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ГабаритыГруза <> Неопределено Тогда
		ТекПревышениеПоВысоте = ГабаритыГруза.Высота - ПараметрыНегабаритныхГрузов.ПорогПревышенияПоВысоте;
		Если ПараметрыНегабаритныхГрузов.ПорогПревышенияПоВысоте > 0 И ТекПревышениеПоВысоте > 0 Тогда
			СтруктураПревышений.ПревышениеВысоты = Макс(СтруктураПревышений.ПревышениеВысоты, ТекПревышениеПоВысоте);
		КонецЕсли;
		ТекПревышениеПоДлине = ГабаритыГруза.Длина - ПараметрыНегабаритныхГрузов.ПорогПревышенияПоДлине;
		Если ПараметрыНегабаритныхГрузов.ПорогПревышенияПоДлине > 0 И ТекПревышениеПоДлине > 0 Тогда
			СтруктураПревышений.ПревышениеДлины = Макс(СтруктураПревышений.ПревышениеДлины, ТекПревышениеПоДлине);
		КонецЕсли;
		ТекПревышениеПоШирине = ГабаритыГруза.Ширина - ПараметрыНегабаритныхГрузов.ПорогПревышенияПоШирине;
		Если ПараметрыНегабаритныхГрузов.ПорогПревышенияПоШирине > 0 И ТекПревышениеПоШирине > 0 Тогда
			СтруктураПревышений.ПревышениеШирины = Макс(СтруктураПревышений.ПревышениеШирины, ТекПревышениеПоШирине);
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыНегабаритныхГрузов.ЗначенияПревышений.Вставить(ТекСтрока.ЗаказГрузоотправителя, СтруктураПревышений);
КонецПроцедуры

Процедура ДобавитьВыработкуНегабаритныхГрузов(ДокументОбъект, ПараметрыНегабаритныхГрузов)
	Если ПараметрыНегабаритныхГрузов = Неопределено ИЛИ НЕ ПараметрыНегабаритныхГрузов.Свойство("ЗначенияПревышений") Тогда
		Возврат;
	КонецЕсли;
	
	МаксПревышениеВысоты = 0;
	МаксПревышениеДлины = 0;
	МаксПревышениеШирины = 0;
	
	// добавление выработки по превышениям детализированно по Заказам
	Для Каждого ТекЗаказ Из ПараметрыНегабаритныхГрузов.ЗначенияПревышений Цикл
		ДопПараметры = Новый Структура("Заказ", ТекЗаказ.Ключ);
		
		ДобавитьВыработку(ДокументОбъект, Справочники.уатПараметрыВыработки.ПревышениеВеса,
			ТекЗаказ.Значение.ПревышениеВеса, ДопПараметры);
		
		ДобавитьВыработку(ДокументОбъект, Справочники.уатПараметрыВыработки.ПревышениеОбъема,
			ТекЗаказ.Значение.ПревышениеОбъема, ДопПараметры);
		
		ДобавитьВыработку(ДокументОбъект, Справочники.уатПараметрыВыработки.ПревышениеВысоты,
			ТекЗаказ.Значение.ПревышениеВысоты, ДопПараметры);
			
		ДобавитьВыработку(ДокументОбъект, Справочники.уатПараметрыВыработки.ПревышениеДлины,
			ТекЗаказ.Значение.ПревышениеДлины, ДопПараметры);
		
		ДобавитьВыработку(ДокументОбъект, Справочники.уатПараметрыВыработки.ПревышениеШирины,
			ТекЗаказ.Значение.ПревышениеШирины, ДопПараметры);
			
		МаксПревышениеВысоты = Макс(МаксПревышениеВысоты, ТекЗаказ.Значение.ПревышениеВысоты);
		МаксПревышениеДлины  = Макс(МаксПревышениеДлины,  ТекЗаказ.Значение.ПревышениеДлины);
		МаксПревышениеШирины = Макс(МаксПревышениеШирины, ТекЗаказ.Значение.ПревышениеШирины);
	КонецЦикла;
	
	// добавление выработки по превышениям в целом по МЛ
	ДобавитьВыработку(ДокументОбъект, Справочники.уатПараметрыВыработки.ПревышениеВеса,
		ПараметрыНегабаритныхГрузов.ОбщийВес - Справочники.уатПараметрыВыработки.ПревышениеВеса.ПорогПревышения);
		
	ДобавитьВыработку(ДокументОбъект, Справочники.уатПараметрыВыработки.ПревышениеОбъема,
		ПараметрыНегабаритныхГрузов.ОбщийОбъем - Справочники.уатПараметрыВыработки.ПревышениеОбъема.ПорогПревышения);
		
	ДобавитьВыработку(ДокументОбъект, Справочники.уатПараметрыВыработки.ПревышениеВысоты,
		МаксПревышениеВысоты);
		
	ДобавитьВыработку(ДокументОбъект, Справочники.уатПараметрыВыработки.ПревышениеДлины,
		МаксПревышениеДлины);
		
	ДобавитьВыработку(ДокументОбъект, Справочники.уатПараметрыВыработки.ПревышениеШирины,
		МаксПревышениеШирины);
КонецПроцедуры

// Получает фактические итоговые показатели по ТЧ Маршрут
//
Функция ИтоговыеПоказателиФакт(ДокументОбъект)
	
	Рез = Новый Структура("ПробегСГрузом, ПробегПорожний, ВремяВПути, ВремяСтоянок", 0, 0, 0, 0);
	
	// Таблица для определения порожнего пробега. Считаем что машина идет порожняком, если таблица пуста.
	тблГрузы = Новый ТаблицаЗначений;
	тблГрузы.Колонки.Добавить("Заказ");
	тблГрузы.Колонки.Добавить("Номенклатура");
	тблГрузы.Колонки.Добавить("ЕдиницаИзмерения");
	тблГрузы.Колонки.Добавить("Количество");
	
	ПредПункт = Неопределено;
	ПредЗаказ = Неопределено;
	
	Для Каждого ТекСтрока Из ДокументОбъект.Заказы Цикл
		Если НЕ ТекСтрока.Выполнен Тогда
			Прервать;
		КонецЕсли;
				
		Если НЕ ЗначениеЗаполнено(ТекСтрока.GUIDСтроки) Тогда 
			ТекСтрока.GUIDСтроки = Новый УникальныйИдентификатор();
		КонецЕсли;
		
		// Обновляем таблицу грузов для расчета порожнего пробега.
		Если (ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка
			ИЛИ ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяПогрузка
			ИЛИ ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка
			ИЛИ ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяРазгрузка)
			И ТекСтрока.Количество > 0 Тогда
			
			// Добавляем строку груза.
			НоваяСтрока = тблГрузы.Добавить();
			НоваяСтрока.Заказ = ТекСтрока.ЗаказГрузоотправителя;
			НоваяСтрока.Номенклатура = ТекСтрока.Номенклатура;
			НоваяСтрока.ЕдиницаИзмерения = ТекСтрока.ЕдиницаИзмерения;
			НоваяСтрока.Количество = ТекСтрока.Количество * 
				?((ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка
				ИЛИ ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяПогрузка), 1, -1);
			тблГрузы.Свернуть("Заказ, Номенклатура, ЕдиницаИзмерения", "Количество");
			
			// Теперь нужно удалить строки с количеством = 0.
			мсвСтрокиУдалить = тблГрузы.НайтиСтроки(Новый Структура("Количество", 0));
			Для Каждого ТекСтрокаГруз Из мсвСтрокиУдалить Цикл
				тблГрузы.Удалить(ТекСтрокаГруз);
			КонецЦикла;
		КонецЕсли;
		
		// Время стоянки, указываемое в заказах, прибавляется по каждому заказу.
		Если ПредЗаказ <> ТекСтрока.ЗаказГрузоотправителя Тогда
			Рез.ВремяСтоянок = уатЗащищенныеФункцииСервер.СложитьВремя(Рез.ВремяСтоянок, ТекСтрока.СтоянкаФакт);
		КонецЕсли;
		
		// Время в пути. Время стоянки не нужно, так как оно входит в факт.
		Если ПредПункт <> ТекСтрока.Пункт Тогда 
			Рез.ВремяВПути = уатЗащищенныеФункцииСервер.СложитьВремя(Рез.ВремяВПути, ТекСтрока.ВремяФакт);
			ПредПункт = ТекСтрока.Пункт;
		КонецЕсли;
		
		// Пробег порожний и пробег с грузом.
		Если ТекСтрока.НомерСтроки < ДокументОбъект.Заказы.Количество() Тогда // в последней строке расстояние не используется
			СледСтрока = ДокументОбъект.Заказы[ТекСтрока.НомерСтроки];
			Если СледСтрока.Пункт <> ТекСтрока.Пункт И СледСтрока.Выполнен Тогда
				Если тблГрузы.Количество() = 0 Тогда
					Рез.ПробегПорожний = Рез.ПробегПорожний + ТекСтрока.РасстояниеФакт;
				Иначе
					Рез.ПробегСГрузом  = Рез.ПробегСГрузом  + ТекСтрока.РасстояниеФакт;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Рез;
	
КонецФункции

Функция ЗаказДоставлен(ДокументОбъект, Заказ) Экспорт
	КоличСтрок = 0;
	КоличСтрокВыполнено = 0;
	
	Для Каждого ТекСтрока Из ДокументОбъект.Заказы Цикл
		Если ТекСтрока.ЗаказГрузоотправителя = Заказ Тогда
			КоличСтрок = КоличСтрок + 1;
			Если ТекСтрока.Выполнен Тогда
				КоличСтрокВыполнено = КоличСтрокВыполнено + 1;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;	
	
	Возврат КоличСтрок > 0 И КоличСтрок = КоличСтрокВыполнено;
КонецФункции

// Добавляет выработку по ПВ с режимом расчета "По параметру выработки"
//
Процедура ДобавитьПроизводнуюВыработку(ДокументОбъект, ПараметрВыработки, Количество, ДопПараметры)
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	уатПараметрыВыработки.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.уатПараметрыВыработки КАК уатПараметрыВыработки
	|ГДЕ
	|	уатПараметрыВыработки.СпособРасчетаПараметровВыработки = ЗНАЧЕНИЕ(Перечисление.уатСпособРасчетаПараметровВыработки.ПоПараметруВыработки)
	|	И уатПараметрыВыработки.БазовыйПараметрВыработки = &ПараметрВыработки
	|	И НЕ уатПараметрыВыработки.ПометкаУдаления");
	Запрос.УстановитьПараметр("ПараметрВыработки", ПараметрВыработки);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		// Доп. структура для производной выработки создается для того, чтобы не перезатирался Заказ -
		// из-за этого выполняется некорректный расчет для ПВ "В целом по документу"
		ДопПараметрыПроизв = Новый Структура;
		Для Каждого ТекЭлемент Из ДопПараметры Цикл
			ДопПараметрыПроизв.Вставить(ТекЭлемент.Ключ, ТекЭлемент.Значение);
		КонецЦикла;
	
		ДобавитьВыработку(ДокументОбъект, Выборка.Ссылка, Количество, ДопПараметрыПроизв);
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область РасчетЗП

// Процедура рассчитывает начисление з/п по пут. листу
// Вызывается из документа при выборе действия расчета.
//
Процедура РасчетЗП(ДокументОбъект, Сотрудник = Неопределено) Экспорт
	
	Если уатОбщегоНазначенияТиповые.уатЕстьКонстанта("ВалютаУправленческогоУчета") Тогда 
		мВалютаУпрУчета = Константы.ВалютаУправленческогоУчета.Получить();
	Иначе
		мВалютаУпрУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;
	
	мсвСотрудники = Новый Массив;
	Если ЗначениеЗаполнено(Сотрудник) Тогда
		Если Сотрудник = ДокументОбъект.Водитель1 И ДокументОбъект.НачислятьЗПВодителю1
			ИЛИ Сотрудник = ДокументОбъект.Водитель2 И ДокументОбъект.НачислятьЗПВодителю2
			ИЛИ Сотрудник = ДокументОбъект.Сотрудник1 И ДокументОбъект.НачислятьЗПСотруднику1
			ИЛИ Сотрудник = ДокументОбъект.Сотрудник2 И ДокументОбъект.НачислятьЗПСотруднику2 Тогда
			мсвСотрудники.Добавить(Сотрудник);
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(ДокументОбъект.Водитель1) И ДокументОбъект.НачислятьЗПВодителю1 Тогда
			мсвСотрудники.Добавить(ДокументОбъект.Водитель1);
		КонецЕсли;
		Если ЗначениеЗаполнено(ДокументОбъект.Водитель2) И ДокументОбъект.НачислятьЗПВодителю2 Тогда
			мсвСотрудники.Добавить(ДокументОбъект.Водитель2);
		КонецЕсли;
		Если ЗначениеЗаполнено(ДокументОбъект.Сотрудник1) И ДокументОбъект.НачислятьЗПСотруднику1 Тогда
			мсвСотрудники.Добавить(ДокументОбъект.Сотрудник1);
		КонецЕсли;
		Если ЗначениеЗаполнено(ДокументОбъект.Сотрудник2) И ДокументОбъект.НачислятьЗПСотруднику2 Тогда
			мсвСотрудники.Добавить(ДокументОбъект.Сотрудник2);
		КонецЕсли;
	КонецЕсли;
	
	тблЗарплата = ДокументОбъект.Зарплата.Выгрузить();
	
	// очищаем все начисления, кроме вручную введенных
	Сч = тблЗарплата.Количество()-1;
	Пока Сч >= 0 Цикл
		Если НЕ тблЗарплата[Сч].РучнойВвод И мсвСотрудники.Найти(тблЗарплата[Сч].Сотрудник) <> Неопределено Тогда
			тблЗарплата.Удалить(Сч);
		КонецЕсли;
		Сч = Сч - 1;
	КонецЦикла;
		
	тблВыработка = ДокументОбъект.ВыработкаТСиСотрудников.Выгрузить().Скопировать();
	тблВыработка.Колонки.КоличествоФакт.Имя = "Количество";
	тблВыработкаСвернутая = тблВыработка.Скопировать();
	тблВыработкаСвернутая.Свернуть("ПараметрВыработки, Контрагент, Подразделение, Маршрут, ОбъектСтроительства, ВидПеревозки, НаправлениеПеревозки", "Количество");
	
	// Выручка для расчета по тарифам "Процентом от выручки"
	ЗапросВыручка = Новый Запрос(
	"ВЫБРАТЬ
	|	ДоходыМЛ.ЗаказНаТС КАК ЗаказНаТС,
	|	ДоходыМЛ.Сумма КАК Сумма,
	|	ДоходыМЛ.Валюта КАК Валюта
	|ПОМЕСТИТЬ втДоходыМЛ
	|ИЗ
	|	&тблДоходыМЛ КАК ДоходыМЛ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	0 КАК ИсточникВыручки,
	|	уатЗаказГрузоотправителяУслуги.Ссылка КАК ЗаказНаТС,
	|	уатЗаказГрузоотправителяУслуги.Сумма КАК Сумма,
	|	уатЗаказГрузоотправителяУслуги.Валюта КАК Валюта
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя.Услуги КАК уатЗаказГрузоотправителяУслуги
	|ГДЕ
	|	уатЗаказГрузоотправителяУслуги.Ссылка В (&мсвЗаказыМЛ)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	1,
	|	втДоходыМЛ.ЗаказНаТС,
	|	втДоходыМЛ.Сумма,
	|	втДоходыМЛ.Валюта
	|ИЗ
	|	втДоходыМЛ КАК втДоходыМЛ");
	тблДоходыМЛ = ДокументОбъект.Доходы.Выгрузить().Скопировать();
	тблДоходыМЛ.Свернуть("ЗаказНаТС, Валюта", "Сумма");
	ЗапросВыручка.УстановитьПараметр("тблДоходыМЛ", тблДоходыМЛ);
	ЗапросВыручка.УстановитьПараметр("мсвЗаказыМЛ", ДокументОбъект.Заказы.Выгрузить().ВыгрузитьКолонку("ЗаказГрузоотправителя"));
	тблВыручка = ЗапросВыручка.Выполнить().Выгрузить();
	Для Каждого ТекСтрока Из тблВыручка Цикл // пересчет в валюту упр. учета
		ТекВалюта = ?(ЗначениеЗаполнено(ТекСтрока.Валюта), ТекСтрока.Валюта, ДокументОбъект.ВалютаДокумента);
		Если ТекВалюта <> мВалютаУпрУчета Тогда
			ТекСтрока.Сумма = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.Сумма,
				ТекВалюта, мВалютаУпрУчета, ДокументОбъект.Дата, ДокументОбъект.Дата);
		КонецЕсли;
	КонецЦикла;
	тблВыручка.Свернуть("ИсточникВыручки, ЗаказНаТС", "Сумма");
	мВыручка = тблВыручка.Итог("Сумма");
	
	КэшУскоренияГеозоны = Неопределено;
	Для Каждого ТекСотрудник Из мсвСотрудники Цикл
		тблЗарплатаВрем = тблЗарплата.Скопировать();
		тблЗарплатаВрем.Очистить();
		тблЗарплатаВрем.Колонки.Добавить("ВесФильтров");
		тблЗарплатаВрем.Колонки.Добавить("ПараметрВыработкиДоп");
		тблЗарплатаВрем.Колонки.Добавить("НомерСтрокиДляПострочныхТарифов", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1,0,ДопустимыйЗнак.Неотрицательный)));
		тблЗарплатаВремФикс = тблЗарплатаВрем.Скопировать();
		
		мТарифы = уатРасчетыПоТарифам.НайтиТарифыЗП(ТекСотрудник, ДокументОбъект.Дата, Новый Структура("Применение", 1));
		Если мТарифы.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		// Ищем выработку для некоторых параметров выработки
		мГрузоподъемность = уатПутевыеЛисты.уатГрузоподъемностьПоПЛ(ДокументОбъект);
		мОбъемКузова      = уатПутевыеЛисты.уатОбъемКузоваПоПЛ(ДокументОбъект);
		
		мВыработкаПроизвольная = Новый Соответствие;
		мВыработкаПроизвольная.Вставить(Перечисления.уатГруппировкиТарифов.Грузоподъемность, мГрузоподъемность);
		мВыработкаПроизвольная.Вставить(Перечисления.уатГруппировкиТарифов.ОбъемКузова, мОбъемКузова);
		// Класс груза получаем как максимальный класс грузов, указанных в задании
		мКлассГруза = 0;
		Для Каждого ТекСтрока Из ДокументОбъект.Заказы Цикл
			Если ТекСтрока.Выполнен Тогда
				мКлассГруза = Макс(мКлассГруза, КлассГруза(ТекСтрока.Номенклатура));
			КонецЕсли;
		КонецЦикла;
		мВыработкаПроизвольная.Вставить(Перечисления.уатГруппировкиТарифов.КлассГруза, мКлассГруза);
		мВыработка = ДокументОбъект.ВыработкаТСиСотрудников.НайтиСтроки(Новый Структура("ПараметрВыработки", Справочники.уатПараметрыВыработки.ПробегСГрузом));
		Если мВыработка.Количество() > 0 Тогда
			мВыработкаЗначение = 0;
			Для Каждого ТекВыработка Из мВыработка Цикл
				мВыработкаЗначение = мВыработкаЗначение + ТекВыработка.КоличествоФакт;
			КонецЦикла;
			мВыработкаПроизвольная.Вставить(Справочники.уатПараметрыВыработки.ПробегСГрузом, мВыработкаЗначение);
		КонецЕсли;
		мВыработка = ДокументОбъект.ВыработкаТСиСотрудников.НайтиСтроки(Новый Структура("ПараметрВыработки", Справочники.уатПараметрыВыработки.ВремяВРаботе));
		Если мВыработка.Количество() > 0 Тогда
			мВыработкаЗначение = 0;
			Для Каждого ТекВыработка Из мВыработка Цикл
				мВыработкаЗначение = мВыработкаЗначение + ТекВыработка.КоличествоФакт;
			КонецЦикла;
			мВыработкаПроизвольная.Вставить(Справочники.уатПараметрыВыработки.ВремяВРаботе, мВыработкаЗначение / 3600);
		КонецЕсли;
		
		// Теперь найдем выработку по произвольным параметрам выработки, 
		// по которым происходит (не построчный) расчет группировок сложных тарифов.
		Для Каждого ТекСтрокаТарифа Из мТарифы Цикл
			ТекТариф = ТекСтрокаТарифа.ТарифЗП;
			МассивГруппировокТарифа = Новый Массив;
			МассивГруппировокТарифа.Добавить(ТекТариф.ГруппировкаТарифа1);
			МассивГруппировокТарифа.Добавить(ТекТариф.ГруппировкаТарифа2);
			МассивГруппировокТарифа.Добавить(ТекТариф.ГруппировкаТарифа3);
			Для Каждого ГруппировкаТарифа Из МассивГруппировокТарифа Цикл
				Если ЗначениеЗаполнено(ГруппировкаТарифа)
					И ТипЗнч(ГруппировкаТарифа) = Тип("СправочникСсылка.уатПараметрыВыработки")
					И мВыработкаПроизвольная[ГруппировкаТарифа] = Неопределено Тогда
					мВыработка = тблВыработка.НайтиСтроки(Новый Структура("ПараметрВыработки", ГруппировкаТарифа));
					мВыработкаЗначение = 0;
					Для Каждого ТекВыработка Из мВыработка Цикл
						мВыработкаЗначение = мВыработкаЗначение + ТекВыработка.Количество;
					КонецЦикла;
					Если ГруппировкаТарифа.Временный Тогда
						мВыработкаПроизвольная.Вставить(ГруппировкаТарифа, мВыработкаЗначение / 3600);
					Иначе
						мВыработкаПроизвольная.Вставить(ГруппировкаТарифа, мВыработкаЗначение);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		мКлассВодителя = КлассВодителя(ДокументОбъект, ТекСотрудник);
		
		мВыработкаПроизвольная.Вставить(Перечисления.уатГруппировкиТарифов.Выручка, мВыручка);
			
		// Переменные для кэширования свернутых таблиц Задание (Путевого листа) и Выработка (ТТД)
		ТТДСвернутые = Новый Соответствие;
		ТаблицаЗаданиеСвернутая = Неопределено;
		
		// 1-2. Сдельные тарифы от выработки и Тарифы с фиксированной суммой
		мТарифыСдельныеИФиксированные = Новый Массив;
		Для Каждого ТекСтрокаТариф Из мТарифы Цикл
			Если ТекСтрокаТариф.СпособРасчетаОплатыТруда = Перечисления.уатСпособыРасчетаОплатыТруда.СдельныйЗаработок
				ИЛИ ТекСтрокаТариф.СпособРасчетаОплатыТруда = Перечисления.уатСпособыРасчетаОплатыТруда.ФиксированнойСуммой Тогда
				мТарифыСдельныеИФиксированные.Добавить(ТекСтрокаТариф);
			КонецЕсли;
		КонецЦикла;
		Для Каждого ТекСтрокаТариф Из мТарифыСдельныеИФиксированные Цикл
			флФиксТариф = (ТекСтрокаТариф.СпособРасчетаОплатыТруда
				= Перечисления.уатСпособыРасчетаОплатыТруда.ФиксированнойСуммой);
			
			// расчет зарплаты по строкам
			Если ТекСтрокаТариф.ТарифЗП.ПараметрВыработки.СпособВводаЗначений = Перечисления.уатСпособыВводаЗначенийВыработкивМЛ_уэ.ВТабличнойЧасти Тогда
				мсвВыработка = тблВыработка.НайтиСтроки(Новый Структура("ПараметрВыработки", ТекСтрокаТариф.ПараметрВыработки));
				Для Каждого ТекСтрокаВыработка Из мсвВыработка Цикл
					// Дополнительно отбираем тарифы по контрагенту и маршруту, действующие только для построчных тарифов
					ВесФильтровВрем = 0;
					СтруктураОбластьДействия = Новый Структура;
					СтруктураОбластьДействия.Вставить("ТС",                   ДокументОбъект.ТС);
					СтруктураОбластьДействия.Вставить("Подразделение",        ТекСтрокаВыработка.Подразделение);
					СтруктураОбластьДействия.Вставить("Контрагент",           ТекСтрокаВыработка.Контрагент);
					СтруктураОбластьДействия.Вставить("Маршрут",              ТекСтрокаВыработка.Маршрут);
					СтруктураОбластьДействия.Вставить("ОбъектСтроительства",  ТекСтрокаВыработка.ОбъектСтроительства);
					СтруктураОбластьДействия.Вставить("ВидПеревозки",         ТекСтрокаВыработка.ВидПеревозки);
					СтруктураОбластьДействия.Вставить("НаправлениеПеревозки", ТекСтрокаВыработка.НаправлениеПеревозки);
					СтруктураОбластьДействия.Вставить("ПунктОтправления",     ТекСтрокаВыработка.ЗаказГрузоотправителя.АдресОтправления);
					СтруктураОбластьДействия.Вставить("ПунктНазначения",      ТекСтрокаВыработка.ЗаказГрузоотправителя.АдресНазначения);
					СтруктураОбластьДействия.Вставить("ГеозонаОтправления",   уатОбщегоНазначения_уэ.ПолучитьГеозоныПунктаПоПривязке(
						ТекСтрокаВыработка.ЗаказГрузоотправителя.АдресОтправления, КэшУскоренияГеозоны));
					СтруктураОбластьДействия.Вставить("ГеозонаНазначения",    уатОбщегоНазначения_уэ.ПолучитьГеозоныПунктаПоПривязке(
						ТекСтрокаВыработка.ЗаказГрузоотправителя.АдресНазначения, КэшУскоренияГеозоны));
					СтруктураОбластьДействия.Вставить("КлассВодителя",        мКлассВодителя);
					ДобавитьВСтруктуруОбластиДействияГрузы(СтруктураОбластьДействия, ДокументОбъект, ТекСтрокаВыработка.ЗаказГрузоотправителя);
					ДобавитьВСтруктуруОбластиДействияПрицепы(СтруктураОбластьДействия, ДокументОбъект);
															
					Если Не уатРасчетыПоТарифам.ТарифЗПвОбластиДействия(ТекСтрокаТариф.ТарифЗП, ДокументОбъект.Организация,
						СтруктураОбластьДействия, ВесФильтровВрем) Тогда
						Продолжить;
					КонецЕсли;
					
					// Теперь получим значение параметра выработки и полей группировок сложного тарифа
					// Это - значение параметра выработки
					Если флФиксТариф Тогда
						мКоличество = 1;
					Иначе
						Если ТекСтрокаВыработка.ПараметрВыработки.Временный Тогда
							мКоличество = ТекСтрокаВыработка.Количество / 3600;
						Иначе	
							мКоличество = ТекСтрокаВыработка.Количество;
						КонецЕсли;
					КонецЕсли;
					
					ЗначенияГруппировок = Новый Соответствие;
					ЗначенияГруппировок.Вставить(Перечисления.уатГруппировкиТарифов.Грузоподъемность, мГрузоподъемность);
					ЗначенияГруппировок.Вставить(Перечисления.уатГруппировкиТарифов.ОбъемКузова,      мОбъемКузова);
					ЗначенияГруппировок.Вставить(Перечисления.уатГруппировкиТарифов.КлассГруза,       мКлассГруза);
					ЗначенияГруппировок.Вставить(Перечисления.уатГруппировкиТарифов.Выручка,          мВыручка);
					
					МассивГруппировокТарифа = Новый Массив;
					МассивГруппировокТарифа.Добавить(ТекСтрокаТариф.ТарифЗП.ГруппировкаТарифа1);
					МассивГруппировокТарифа.Добавить(ТекСтрокаТариф.ТарифЗП.ГруппировкаТарифа2);
					МассивГруппировокТарифа.Добавить(ТекСтрокаТариф.ТарифЗП.ГруппировкаТарифа3);
					Для Каждого ГруппировкаТарифа Из МассивГруппировокТарифа Цикл
						Если ЗначениеЗаполнено(ГруппировкаТарифа)
							И ТипЗнч(ГруппировкаТарифа) = Тип("СправочникСсылка.уатПараметрыВыработки")
							И ЗначенияГруппировок[ГруппировкаТарифа] = Неопределено Тогда
							
							ЗначенияГруппировок.Вставить(ГруппировкаТарифа, ТекСтрокаВыработка.Количество);
						КонецЕсли;
					КонецЦикла;
					
					мТариф = уатРасчетыПоТарифам.ЗначениеТарифаЗП(ТекСтрокаТариф.ТарифЗП, ЗначенияГруппировок);
					
					Если флФиксТариф Тогда
						НоваяСтрока = тблЗарплатаВремФикс.Добавить();
					Иначе
						НоваяСтрока = тблЗарплатаВрем.Добавить();
					КонецЕсли;
					
					НоваяСтрока.ВидНачисления        = ТекСтрокаТариф.ВидНачисления;
					НоваяСтрока.Сотрудник            = ТекСотрудник;
					НоваяСтрока.Сумма                = мКоличество * мТариф;
					НоваяСтрока.РучнойВвод           = Ложь;
					НоваяСтрока.ВесФильтров          = ВесФильтровВрем;
					НоваяСтрока.ПараметрВыработки    = ТекСтрокаТариф.ПараметрВыработки;
					НоваяСтрока.ПараметрВыработкиДоп = Строка(ТекСтрокаТариф.ПараметрВыработки);
					НоваяСтрока.НомерСтрокиДляПострочныхТарифов = ТекСтрокаВыработка.НомерСтроки;
					
				КонецЦикла;
								
			Иначе //расчет зарплаты по таблице выработки (свернутой)
				списКонтрагенты = Новый СписокЗначений;
				Для Каждого ТекЗаказ Из ДокументОбъект.Заказы Цикл
					Если списКонтрагенты.НайтиПоЗначению(ТекЗаказ.ЗаказГрузоотправителя.Контрагент) = Неопределено Тогда
						списКонтрагенты.Добавить(ТекЗаказ.ЗаказГрузоотправителя.Контрагент);
					КонецЕсли;
				КонецЦикла;
				
				Если флФиксТариф Тогда
					ВесФильтровВрем = 0;
					СтруктураОбластьДействия = Новый Структура;
					СтруктураОбластьДействия.Вставить("ТС",                   ДокументОбъект.ТС);
					СтруктураОбластьДействия.Вставить("Контрагент",           списКонтрагенты);
					СтруктураОбластьДействия.Вставить("Подразделение",        ДокументОбъект.Подразделение);
					СтруктураОбластьДействия.Вставить("Маршрут",              ДокументОбъект.Маршрут);
					СтруктураОбластьДействия.Вставить("ОбъектСтроительства",  ДокументОбъект.ОбъектСтроительства);
					СтруктураОбластьДействия.Вставить("ВидПеревозки",         ДокументОбъект.ВидПеревозки);
					СтруктураОбластьДействия.Вставить("НаправлениеПеревозки", ДокументОбъект.НаправлениеПеревозки);
					СтруктураОбластьДействия.Вставить("ПунктОтправления",     ДокументОбъект.АдресОтправления);
					СтруктураОбластьДействия.Вставить("ПунктНазначения",      ДокументОбъект.АдресНазначения);
					СтруктураОбластьДействия.Вставить("ГеозонаОтправления",   уатОбщегоНазначения_уэ.ПолучитьГеозоныПунктаПоПривязке(
						ДокументОбъект.АдресОтправления, КэшУскоренияГеозоны));
					СтруктураОбластьДействия.Вставить("ГеозонаНазначения",    уатОбщегоНазначения_уэ.ПолучитьГеозоныПунктаПоПривязке(
						ДокументОбъект.АдресНазначения, КэшУскоренияГеозоны));
					СтруктураОбластьДействия.Вставить("КлассВодителя", мКлассВодителя);
					ДобавитьВСтруктуруОбластиДействияГрузы(СтруктураОбластьДействия, ДокументОбъект);
					ДобавитьВСтруктуруОбластиДействияПрицепы(СтруктураОбластьДействия, ДокументОбъект);
					                   					
					Если Не уатРасчетыПоТарифам.ТарифЗПвОбластиДействия(ТекСтрокаТариф.ТарифЗП, ДокументОбъект.Организация,
						СтруктураОбластьДействия, ВесФильтровВрем) Тогда
						Продолжить;
					КонецЕсли;
					
					мТариф = уатРасчетыПоТарифам.ЗначениеТарифаЗП(ТекСтрокаТариф.ТарифЗП, мВыработкаПроизвольная);
					
					НоваяСтрока = тблЗарплатаВремФикс.Добавить();
					НоваяСтрока.ВидНачисления        = ТекСтрокаТариф.ВидНачисления;
					НоваяСтрока.Сотрудник            = ТекСотрудник;
					НоваяСтрока.Сумма                = мТариф;
					НоваяСтрока.РучнойВвод           = Ложь;
					НоваяСтрока.ВесФильтров          = ВесФильтровВрем;
					НоваяСтрока.ПараметрВыработки    = Справочники.уатПараметрыВыработки.ПустаяСсылка();
					НоваяСтрока.ПараметрВыработкиДоп = "";
				Иначе
					мсвВыработка = тблВыработкаСвернутая.НайтиСтроки(Новый Структура("ПараметрВыработки", ТекСтрокаТариф.ПараметрВыработки));
					Для Каждого ТекСтрокаВыработка Из мсвВыработка Цикл
						Если ТекСтрокаВыработка.Количество = 0 Тогда
							Продолжить;
						КонецЕсли;	
						
						ВесФильтровВрем = 0;
						СтруктураОбластьДействия = Новый Структура;
						СтруктураОбластьДействия.Вставить("ТС",                   ДокументОбъект.ТС);
						СтруктураОбластьДействия.Вставить("Контрагент",           списКонтрагенты);
						СтруктураОбластьДействия.Вставить("Подразделение",        ТекСтрокаВыработка.Подразделение);
						СтруктураОбластьДействия.Вставить("Маршрут",              ТекСтрокаВыработка.Маршрут);
						СтруктураОбластьДействия.Вставить("ОбъектСтроительства",  ТекСтрокаВыработка.ОбъектСтроительства);
						СтруктураОбластьДействия.Вставить("ВидПеревозки",         ТекСтрокаВыработка.ВидПеревозки);
						СтруктураОбластьДействия.Вставить("НаправлениеПеревозки", ТекСтрокаВыработка.НаправлениеПеревозки);
						СтруктураОбластьДействия.Вставить("ПунктОтправления",     ДокументОбъект.АдресОтправления);
						СтруктураОбластьДействия.Вставить("ПунктНазначения",      ДокументОбъект.АдресНазначения);
						СтруктураОбластьДействия.Вставить("ГеозонаОтправления",   уатОбщегоНазначения_уэ.ПолучитьГеозоныПунктаПоПривязке(
							ДокументОбъект.АдресОтправления, КэшУскоренияГеозоны));
						СтруктураОбластьДействия.Вставить("ГеозонаНазначения",    уатОбщегоНазначения_уэ.ПолучитьГеозоныПунктаПоПривязке(
							ДокументОбъект.АдресНазначения, КэшУскоренияГеозоны));
						СтруктураОбластьДействия.Вставить("КлассВодителя", мКлассВодителя);
						ДобавитьВСтруктуруОбластиДействияГрузы(СтруктураОбластьДействия, ДокументОбъект);
						ДобавитьВСтруктуруОбластиДействияПрицепы(СтруктураОбластьДействия, ДокументОбъект);
						
						Если Не уатРасчетыПоТарифам.ТарифЗПвОбластиДействия(ТекСтрокаТариф.ТарифЗП, ДокументОбъект.Организация,
							СтруктураОбластьДействия, ВесФильтровВрем) Тогда
							Продолжить;
						КонецЕсли;
						
						Если ТекСтрокаВыработка.ПараметрВыработки.Временный Тогда
							мКоличество = ТекСтрокаВыработка.Количество / 3600;
						Иначе	
							мКоличество = ТекСтрокаВыработка.Количество;
						КонецЕсли;	
						
						мТариф = уатРасчетыПоТарифам.ЗначениеТарифаЗП(ТекСтрокаТариф.ТарифЗП, мВыработкаПроизвольная);
						
						НоваяСтрока = тблЗарплатаВрем.Добавить();
						НоваяСтрока.ВидНачисления        = ТекСтрокаТариф.ВидНачисления;
						НоваяСтрока.Сотрудник            = ТекСотрудник;
						НоваяСтрока.Сумма                = мКоличество * мТариф;
						НоваяСтрока.РучнойВвод           = Ложь;
						НоваяСтрока.ВесФильтров          = ВесФильтровВрем;
						НоваяСтрока.ПараметрВыработки    = ТекСтрокаТариф.ПараметрВыработки;
						НоваяСтрока.ПараметрВыработкиДоп = Строка(ТекСтрокаТариф.ПараметрВыработки);
						
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;	
		УдалитьЛишниеТарифыЗП(тблЗарплата, тблЗарплатаВремФикс);
		УдалитьЛишниеТарифыЗП(тблЗарплата, тблЗарплатаВрем, "ПараметрВыработкиДоп");
		
		// 3. Проценты от выручки
		мТарифыПроцентОтВыручки = мТарифы.НайтиСтроки(Новый Структура("СпособРасчетаОплатыТруда",
			Перечисления.уатСпособыРасчетаОплатыТруда.ПроцентомОтВыручки));
		Для Каждого ТекСтрокаВыручка Из тблВыручка Цикл
			Для сч = 0 По мТарифыПроцентОтВыручки.Количество() - 1 Цикл
				Если мТарифыПроцентОтВыручки[сч].ТарифЗП.ИсточникВыручки <> ТекСтрокаВыручка.ИсточникВыручки Тогда
					Продолжить;
				КонецЕсли;
					
				ВесФильтровВрем = 0;
				СтруктураОбластьДействия = Новый Структура;
				СтруктураОбластьДействия.Вставить("ТС",                   ДокументОбъект.ТС);
				СтруктураОбластьДействия.Вставить("Контрагент",           ТекСтрокаВыручка.ЗаказНаТС.Контрагент);
				СтруктураОбластьДействия.Вставить("Подразделение",        ТекСтрокаВыручка.ЗаказНаТС.Подразделение);
				СтруктураОбластьДействия.Вставить("Маршрут",              ТекСтрокаВыручка.ЗаказНаТС.Маршрут);
				СтруктураОбластьДействия.Вставить("ОбъектСтроительства",  ТекСтрокаВыручка.ЗаказНаТС.ОбъектСтроительства);
				СтруктураОбластьДействия.Вставить("ВидПеревозки",         ТекСтрокаВыручка.ЗаказНаТС.ВидПеревозки);
				СтруктураОбластьДействия.Вставить("НаправлениеПеревозки", ТекСтрокаВыручка.ЗаказНаТС.НаправлениеПеревозки);
				СтруктураОбластьДействия.Вставить("ПунктОтправления",     ТекСтрокаВыручка.ЗаказНаТС.АдресОтправления);
				СтруктураОбластьДействия.Вставить("ПунктНазначения",      ТекСтрокаВыручка.ЗаказНаТС.АдресНазначения);
				СтруктураОбластьДействия.Вставить("ГеозонаОтправления",   уатОбщегоНазначения_уэ.ПолучитьГеозоныПунктаПоПривязке(
					ТекСтрокаВыручка.ЗаказНаТС.АдресОтправления, КэшУскоренияГеозоны));
				СтруктураОбластьДействия.Вставить("ГеозонаНазначения",    уатОбщегоНазначения_уэ.ПолучитьГеозоныПунктаПоПривязке(
					ТекСтрокаВыручка.ЗаказНаТС.АдресНазначения, КэшУскоренияГеозоны));
				СтруктураОбластьДействия.Вставить("КлассВодителя",        мКлассВодителя);
				ДобавитьВСтруктуруОбластиДействияГрузы(СтруктураОбластьДействия, ДокументОбъект, ТекСтрокаВыручка.ЗаказНаТС);
				ДобавитьВСтруктуруОбластиДействияПрицепы(СтруктураОбластьДействия, ДокументОбъект);
				
				Если НЕ уатРасчетыПоТарифам.ТарифЗПвОбластиДействия(мТарифыПроцентОтВыручки[сч].ТарифЗП,
					ДокументОбъект.Организация, СтруктураОбластьДействия, ВесФильтровВрем) Тогда
					Продолжить;
				КонецЕсли;	
				
				НоваяСтрока 				= тблЗарплатаВрем.Добавить();
				НоваяСтрока.ВидНачисления 	= мТарифыПроцентОтВыручки[сч].ВидНачисления;
				НоваяСтрока.Сотрудник 		= ТекСотрудник;
				НоваяСтрока.Сумма 			= Окр(ТекСтрокаВыручка.Сумма * мТарифыПроцентОтВыручки[сч].ТарифЗП.Тариф / 100, 2);
				НоваяСтрока.РучнойВвод 		= Ложь;
				НоваяСтрока.ВесФильтров		= ВесФильтровВрем;
				//НоваяСтрока.ПараметрВыработки = ТекСтрокаВыручка.ПараметрВыработки;
				//НоваяСтрока.ПараметрВыработкиДоп = Строка(ТекСтрокаВыручка.ПараметрВыработки);
			КонецЦикла;
			УдалитьЛишниеТарифыЗП(тблЗарплата, тблЗарплатаВрем);
		КонецЦикла;	
		
		// 4. Оплата простоев рассчитывается выше по таблице выработки (а в ПЛ - по отдельной таблице простоев).
				
		// 5. Надбавка за ночные пока расчитывается по введенной вручную выработке по параметру выработки "Время ночное"
		мсвНочные = тблВыработкаСвернутая.НайтиСтроки(Новый Структура("ПараметрВыработки",
			Справочники.уатПараметрыВыработки.ВремяНочное));
		Если мсвНочные.Количество() > 0 И мсвНочные[0].Количество > 0 Тогда
			РасчетДоплатЗП(ДокументОбъект, тблЗарплата, ТекСотрудник, мТарифы, Перечисления.уатСпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы, мКлассВодителя);
		КонецЕсли;
		
		// 6. Надбавка за выходные и праздники
		Если ЕстьВыходныеПраздникиПоПЛ(ДокументОбъект, ТекСотрудник) Тогда
			РасчетДоплатЗП(ДокументОбъект, тблЗарплата, ТекСотрудник, мТарифы, Перечисления.уатСпособыРасчетаОплатыТруда.ДоплатаЗаПраздничныеИВыходные, мКлассВодителя);
		КонецЕсли;
		
		// 7. Прочие надбавки (процентом от видов начислений)
		РасчетДоплатЗП(ДокументОбъект, тблЗарплата, ТекСотрудник, мТарифы, Перечисления.уатСпособыРасчетаОплатыТруда.ПроцентомОтВидовНачислений, мКлассВодителя);
	КонецЦикла;
		
	тблЗарплата.Свернуть("Сотрудник, ВидНачисления, РучнойВвод, ПараметрВыработки", "Сумма");
	ДокументОбъект.Зарплата.Загрузить(тблЗарплата);
	
КонецПроцедуры // РасчетЗП()

// Процедура рассчитывает доплаты (за ночные и прочие) к з/п по пут. листу
// и добавляет их в ТЧ Зарплата
// Параметры:
//	вхСотрудник - сотрудник, по которому рассчитываются доплаты
//	вхТарифыЗП - таблица тарифов, колонки [СпособРасчетаОплатыТруда, ВидНачисления, ТарифЗП]
//	вхВидДоплаты - СпособРасчетаОплатыТруда, по которому ведется расчет доплат
//
Процедура РасчетДоплатЗП(ДокументОбъект, тблЗарплата, вхСотрудник, вхТарифыЗП, вхВидДоплаты, КлассВодителя)
	тблЗарплатаВрем = тблЗарплата.Скопировать();
	тблЗарплатаВрем.Очистить();
	тблЗарплатаВрем.Колонки.Добавить("ВесФильтров");
	тблЗарплатаВрем.Колонки.Добавить("НомерСтрокиДляПострочныхТарифов",
		Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(1,0,ДопустимыйЗнак.Неотрицательный)));
	
	СтруктураОбластьДействия = Новый Структура("ТС", ДокументОбъект.ТС);
	ДобавитьВСтруктуруОбластиДействияПрицепы(СтруктураОбластьДействия, ДокументОбъект);
	СтруктураОбластьДействия.Вставить("КлассВодителя", КлассВодителя);
	
	мТарифыДоплата = вхТарифыЗП.НайтиСтроки(Новый Структура("СпособРасчетаОплатыТруда", вхВидДоплаты));
	Для счТарифы = 0 По мТарифыДоплата.Количество() - 1 Цикл
		ТекСтрока = мТарифыДоплата[счТарифы];
		мВидНачисления = ТекСтрока.ВидНачисления;
		ВесФильтровВрем = 0;
		
		Если НЕ уатРасчетыПоТарифам.ТарифЗПвОбластиДействия(ТекСтрока.ТарифЗП, ДокументОбъект.Организация,
			СтруктураОбластьДействия, ВесФильтровВрем) Тогда
			Продолжить;
		КонецЕсли;
		
		мСумма = 0;
		
		Для Каждого ТекСтрокаИсточник Из мВидНачисления.БазовыеВидыРасчета Цикл
			мЗП = тблЗарплата.НайтиСтроки(Новый Структура("Сотрудник, ВидНачисления", вхСотрудник, ТекСтрокаИсточник.ВидРасчета));
			
			Если мЗП.Количество() = 0 Тогда
				мЗП = тблЗарплатаВрем.НайтиСтроки(Новый Структура("Сотрудник, ВидНачисления", вхСотрудник, ТекСтрокаИсточник.ВидРасчета));
			КонецЕсли;

			// просуммируем все начисления данного вида
			Для счЗП = 0 По мЗП.Количество() - 1 Цикл
				мСумма = мСумма + мЗП[счЗП].Сумма;
			КонецЦикла;	
		КонецЦикла;	
		
		НоваяСтрока 					= тблЗарплатаВрем.Добавить();
		НоваяСтрока.ВидНачисления 		= мВидНачисления;
		НоваяСтрока.Сотрудник 			= вхСотрудник;
		НоваяСтрока.Сумма 				= Окр(мСумма * ТекСтрока.ТарифЗП.Тариф / 100,2);
		НоваяСтрока.РучнойВвод 			= Ложь;
		НоваяСтрока.ВесФильтров		= ВесФильтровВрем;
		НоваяСтрока.ПараметрВыработки = ТекСтрока.ПараметрВыработки;
	КонецЦикла;
	
	УдалитьЛишниеТарифыЗП(тблЗарплата, тблЗарплатаВрем);
КонецПроцедуры

Функция ЕстьВыходныеПраздникиПоПЛ(ДокументОбъект, Сотрудник)
	Если ТипЗнч(Сотрудник) <> Тип("СправочникСсылка.Сотрудники") Тогда
		Возврат Ложь;
	КонецЕсли;
		
	НачДата = ?(ЗначениеЗаполнено(ДокументОбъект.ДатаИВремяОтправления), ДокументОбъект.ДатаИВремяОтправления,
		ДокументОбъект.ДатаИВремяОтправленияПлан);
	КонДата = ?(ЗначениеЗаполнено(ДокументОбъект.ДатаИВремяВыполнения),  ДокументОбъект.ДатаИВремяВыполнения,
		ДокументОбъект.ДатаИВремяВыполненияПлан);
	
	Если НачДата = '00010101' ИЛИ НачДата = '00010101' Тогда
		Возврат Ложь;
	КонецЕсли;
	
	тчГрафикиРабот = уатОбщегоНазначения.ПолучитьГрафикиРаботыСотрудниковЗаПериод(Сотрудник, НачДата, КонДата);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	тчГрафикиРабот.Период КАК Период,
	|	тчГрафикиРабот.ПроизводственныйКалендарь КАК ПроизводственныйКалендарь,
	|	тчГрафикиРабот.ГрафикРаботы КАК ГрафикРаботы
	|ПОМЕСТИТЬ втПроизводственныйКалендарь
	|ИЗ
	|	&тчГрафикиРабот КАК тчГрафикиРабот
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	КалендарныеГрафики.ДатаГрафика КАК ДатаГрафика
	|ИЗ
	|	втПроизводственныйКалендарь КАК втПроизводственныйКалендарь
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.КалендарныеГрафики КАК КалендарныеГрафики
	|		ПО втПроизводственныйКалендарь.Период = КалендарныеГрафики.ДатаГрафика
	|			И втПроизводственныйКалендарь.ГрафикРаботы = КалендарныеГрафики.Календарь
	|			И (КалендарныеГрафики.ДеньВключенВГрафик = ЛОЖЬ)");
	Запрос.УстановитьПараметр("тчГрафикиРабот", тчГрафикиРабот);
	Если НЕ Запрос.Выполнить().Пустой() Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
КонецФункции

Функция КлассГруза(Номенклатура)
	Если НЕ ЗначениеЗаполнено(Номенклатура) Тогда
		Рез = 0;
	ИначеЕсли ТипЗнч(Номенклатура) = Тип("СправочникСсылка.уатГрузовыеМеста_уэ") Тогда
		Рез = 0;
		Для Каждого ТекСтрокаНоменклатура Из Номенклатура.ТоварныйСостав Цикл
			Рез = Макс(Рез, уатОбщегоНазначения.уатКлассГруза(ТекСтрокаНоменклатура.Номенклатура));
		КонецЦикла;
	Иначе
		Рез = уатОбщегоНазначения.уатКлассГруза(Номенклатура);
	КонецЕсли;
	
	Возврат Рез;
КонецФункции

Функция КлассВодителя(ДокументОбъект, ТекСотрудник)
	СведенияВодитель = уатОбщегоНазначения.уатПрочитатьРеквизитыВодителя(ТекСотрудник,
		ДокументОбъект.Дата, ДокументОбъект.Организация);
	Рез = ?(ЗначениеЗаполнено(СведенияВодитель.Класс), СведенияВодитель.Класс, 0);
	Возврат Рез;
КонецФункции

Процедура ДобавитьВСтруктуруОбластиДействияПрицепы(СтруктураОбластьДействия, ДокументОбъект)
	мсвПрицепы = Новый Массив;
	Если ЗначениеЗаполнено(ДокументОбъект.Прицеп1) Тогда
		мсвПрицепы.Добавить(ДокументОбъект.Прицеп1);
	КонецЕсли;
	Если ЗначениеЗаполнено(ДокументОбъект.Прицеп2) Тогда
		мсвПрицепы.Добавить(ДокументОбъект.Прицеп2);
	КонецЕсли;
	Если мсвПрицепы.Количество() > 0 Тогда
		списТСиПрицепы = Новый СписокЗначений;
		списТСиПрицепы.ЗагрузитьЗначения(мсвПрицепы);
		списТСиПрицепы.Добавить(СтруктураОбластьДействия.ТС);
		СтруктураОбластьДействия.ТС = списТСиПрицепы;
	КонецЕсли;
КонецПроцедуры

Процедура ДобавитьВСтруктуруОбластиДействияГрузы(СтруктураОбластьДействия, ДокументОбъект, ЗаказНаТС = Неопределено)
	списНоменклатураГруза = Новый СписокЗначений;
	списГрузовыеМеста     = Новый СписокЗначений;
	списВидыГрузов        = Новый СписокЗначений;
		
	Для Каждого ТекСтрока Из ДокументОбъект.Заказы Цикл
		Если ЗначениеЗаполнено(ЗаказНаТС) И ТекСтрока.ЗаказГрузоотправителя <> ЗаказНаТС Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекСтрока.ЗаказГрузоотправителя.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам Тогда
			Для Каждого ТекСтрокаТовар Из ТекСтрока.ЗаказГрузоотправителя.Товары Цикл
				Если ЗначениеЗаполнено(ТекСтрокаТовар.Номенклатура) Тогда
					Если списНоменклатураГруза.НайтиПоЗначению(ТекСтрокаТовар.Номенклатура) = Неопределено Тогда
						списНоменклатураГруза.Добавить(ТекСтрокаТовар.Номенклатура);
					КонецЕсли;
					Если списВидыГрузов.НайтиПоЗначению(ТекСтрокаТовар.Номенклатура.уатВидГруза) = Неопределено Тогда
						списВидыГрузов.Добавить(ТекСтрокаТовар.Номенклатура.уатВидГруза);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ЗначениеЗаполнено(ТекСтрока.Номенклатура) Тогда
			Если ТипЗнч(ТекСтрока.Номенклатура) = Тип("СправочникСсылка.уатГрузовыеМеста_уэ") Тогда
				Если списГрузовыеМеста.НайтиПоЗначению(ТекСтрока.Номенклатура) = Неопределено Тогда
					списГрузовыеМеста.Добавить(ТекСтрока.Номенклатура);
				КонецЕсли;
				Если ЗначениеЗаполнено(ТекСтрока.Номенклатура.ВидГруза)
					И списВидыГрузов.НайтиПоЗначению(ТекСтрока.Номенклатура.ВидГруза) = Неопределено Тогда
					списВидыГрузов.Добавить(ТекСтрока.Номенклатура.ВидГруза);
				КонецЕсли;
			ИначеЕсли ТипЗнч(ТекСтрока.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
				Если списНоменклатураГруза.НайтиПоЗначению(ТекСтрока.Номенклатура) = Неопределено Тогда
					списНоменклатураГруза.Добавить(ТекСтрока.Номенклатура);
				КонецЕсли;
				Если ЗначениеЗаполнено(ТекСтрока.Номенклатура.уатВидГруза)
					И списВидыГрузов.НайтиПоЗначению(ТекСтрока.Номенклатура.уатВидГруза) = Неопределено Тогда
					списВидыГрузов.Добавить(ТекСтрока.Номенклатура.уатВидГруза);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураОбластьДействия.Вставить("Номенклатура",  списНоменклатураГруза);
	СтруктураОбластьДействия.Вставить("ГрузовоеМесто", списГрузовыеМеста);
	СтруктураОбластьДействия.Вставить("ВидГруза",      списВидыГрузов);
КонецПроцедуры
	
// Процедура удаляет "лишние" тарифы из блока ЗП (лишним считается тариф с меньшим весом совпадения фильтров)
// тблЗарплатаВрем - таблица со структурой аналогичной ТЧ Зарплата, плюс доп. поля сортировки
// СтрокаДопСортировка - строка доп поля таблицы тблЗарплатаВрем, доп. аналитика для отбора "нужных" тарифов
Процедура УдалитьЛишниеТарифыЗП(тблЗарплата, тблЗарплатаВрем, СтрокаДопСортировка = Неопределено)
	Если тблЗарплатаВрем.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	// Удаляем сначала лишние тарифы с отключенным флагом "Построчно" (общие тарифы).
	// Если вес фильтра найденных построчных тарифов выше, чем вес фильтра общего тарифа,
	// то последний является лишним и будет удален
	Если СтрокаДопСортировка = Неопределено Тогда
		тблЗарплатаВрем.Сортировать("ВесФильтров УБЫВ");
		МаксВесФильтров = тблЗарплатаВрем[0].ВесФильтров;
		Сч = тблЗарплатаВрем.Количество();
		Пока Сч > 0 Цикл
			Сч = Сч - 1;
			Если тблЗарплатаВрем[Сч].ВесФильтров <> МаксВесФильтров И
					тблЗарплатаВрем[Сч].НомерСтрокиДляПострочныхТарифов = 0 Тогда
				тблЗарплатаВрем.Удалить(Сч);
			КонецЕсли;
		КонецЦикла;
	Иначе
		тблЗарплатаВрем.Сортировать(СтрокаДопСортировка + " УБЫВ, ВесФильтров УБЫВ");
		мсвНайденныхДопАналитикТарифов = Новый Массив;
		
		ТекАналитикаВрем = "";
		ПострочныйТарифИмеетМаксимальныйВес = Ложь;
		мсвСтрокДляУдаления = Новый Массив;
		Для каждого ТекСтрока Из тблЗарплатаВрем Цикл
			ТекАналитика = ТекСтрока[СтрокаДопСортировка];
			Если ТекАналитикаВрем <> ТекАналитика Тогда //перешли на новое значение аналитики - текущую строку включаем в ТЧ
				МаксВесФильтровПоАналитике = ТекСтрока.ВесФильтров;
				ТекАналитикаВрем = ТекАналитика;
				ПострочныйТарифИмеетМаксимальныйВес = (ТекСтрока.НомерСтрокиДляПострочныхТарифов <> 0);
				Продолжить;
			КонецЕсли;
			
			// вес фильтров в тек. строке ниже, значит ее удаляем
			Если ТекСтрока.ВесФильтров <> МаксВесФильтровПоАналитике И ТекСтрока.НомерСтрокиДляПострочныхТарифов = 0 Тогда
				
				мсвСтрокДляУдаления.Добавить(ТекСтрока);
				
				// ТОНКИЙ МОМЕНТ! вес фильтров в текущей строке равен максимальному,
				// но максимальный вес также соответствует и построчному тарифу
				// значит удаляем общий тариф
			ИначеЕсли ТекСтрока.ВесФильтров = МаксВесФильтровПоАналитике И ТекСтрока.НомерСтрокиДляПострочныхТарифов = 0
				И ПострочныйТарифИмеетМаксимальныйВес Тогда
				
				мсвСтрокДляУдаления.Добавить(ТекСтрока);
			КонецЕсли;
		КонецЦикла; 
		Для Каждого ТекСтрокаУдаления Из мсвСтрокДляУдаления Цикл
			тблЗарплатаВрем.Удалить(ТекСтрокаУдаления);
		КонецЦикла;
	КонецЕсли;
	
	// Удаляем лишние тарифы с включенным флагом "Построчно"
	// (для них НомерСтроки во временной таблице ненулевой и соответствует номеру строки Задания)
	тблЗарплатаВремПострочныеТарифы = тблЗарплатаВрем.Скопировать();
	тблЗарплатаВремПострочныеТарифы.Очистить();
	тблЗарплатаВрем.Сортировать("НомерСтрокиДляПострочныхТарифов УБЫВ");
	МаксНомерСтроки = тблЗарплатаВрем[0].НомерСтрокиДляПострочныхТарифов;
	Для Сч = 1 По МаксНомерСтроки Цикл
		тблЗарплатаВремПоСтроке = тблЗарплатаВрем.Скопировать();
		СчПоСтроке = тблЗарплатаВремПоСтроке.Количество()-1;
		Пока СчПоСтроке >= 0 Цикл
			Если тблЗарплатаВремПоСтроке[СчПоСтроке].НомерСтрокиДляПострочныхТарифов <> Сч Тогда
				тблЗарплатаВремПоСтроке.Удалить(СчПоСтроке);
			КонецЕсли;
			СчПоСтроке = СчПоСтроке - 1;
		КонецЦикла;
		
		// Если тблЗарплатаВремПоСтроке.Количество() < 2 Тогда // Если тариф найден один или не найден,то оставляем его как есть
		//	Если тблЗарплатаВремПоСтроке.Количество() = 1 Тогда
		//		НоваяСтрокаПостр = тблЗарплатаВремПострочныеТарифы.Добавить();
		//		ЗаполнитьЗначенияСвойств(НоваяСтрокаПостр, тблЗарплатаВремПоСтроке[0]);
		//	КонецЕсли;
		//	
		//	Продолжить;
		//КонецЕсли;
		Если тблЗарплатаВремПоСтроке.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаДопСортировка = Неопределено Тогда
			МаксВесФильтровДляОбщихТарифов = 0;
			Для Каждого ТекСтрока Из тблЗарплатаВрем Цикл
				Если ТекСтрока.НомерСтрокиДляПострочныхТарифов = 0 И ТекСтрока.ВесФильтров > МаксВесФильтровДляОбщихТарифов Тогда
					МаксВесФильтровДляОбщихТарифов = ТекСтрока.ВесФильтров;
				КонецЕсли;
			КонецЦикла;
			
			тблЗарплатаВрем1 = тблЗарплатаВрем.Скопировать();
			тблЗарплатаВрем1.Сортировать("ВесФильтров УБЫВ");
			МаксВесФильтровДляОбщихТарифов = тблЗарплатаВрем1[0].ВесФильтров;
			
			тблЗарплатаВремПоСтроке.Сортировать("ВесФильтров УБЫВ");
			МаксВесФильтров = тблЗарплатаВремПоСтроке[0].ВесФильтров;
			СчПоСтроке = тблЗарплатаВремПоСтроке.Количество();
			Пока СчПоСтроке > 0 Цикл
				СчПоСтроке = СчПоСтроке - 1;
				Если тблЗарплатаВремПоСтроке[СчПоСтроке].ВесФильтров = МаксВесФильтров И
						тблЗарплатаВремПоСтроке[СчПоСтроке].ВесФильтров >= МаксВесФильтровДляОбщихТарифов Тогда
					НоваяСтрокаПостр = тблЗарплатаВремПострочныеТарифы.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаПостр, тблЗарплатаВремПоСтроке[СчПоСтроке]);
				КонецЕсли;
			КонецЦикла;
		Иначе
			тблЗарплатаВремПоСтроке.Сортировать(СтрокаДопСортировка + " УБЫВ, ВесФильтров УБЫВ");
			мсвНайденныхДопАналитикТарифов = Новый Массив;
			
			ТекАналитикаВрем = "";
			мсвСтрокДляУдаления = Новый Массив;
			Для каждого ТекСтрока Из тблЗарплатаВремПоСтроке Цикл
				ТекАналитика = ТекСтрока[СтрокаДопСортировка];
				Если ТекАналитикаВрем <> ТекАналитика Тогда //перешли на новое значение аналитики - текущую строку включаем в ТЧ
					МаксВесФильтровПоАналитике = ТекСтрока.ВесФильтров;
					ТекАналитикаВрем = ТекАналитика;
					
					МаксВесФильтровДляОбщихТарифов = 0;
					Для Каждого ТекСтрокаМаксВес Из тблЗарплатаВрем Цикл
						Если ТекСтрокаМаксВес.НомерСтрокиДляПострочныхТарифов = 0 И
								ТекСтрокаМаксВес[СтрокаДопСортировка] = ТекАналитика
							И ТекСтрокаМаксВес.ВесФильтров > МаксВесФильтровДляОбщихТарифов Тогда
							МаксВесФильтровДляОбщихТарифов = ТекСтрокаМаксВес.ВесФильтров;
						КонецЕсли;
					КонецЦикла;
					//Продолжить;
				КонецЕсли;
				
				Если ТекСтрока.ВесФильтров = МаксВесФильтровПоАналитике И
						ТекСтрока.ВесФильтров >= МаксВесФильтровДляОбщихТарифов Тогда
					НоваяСтрокаПостр = тблЗарплатаВремПострочныеТарифы.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаПостр, ТекСтрока);
				КонецЕсли;
			КонецЦикла; 
		КонецЕсли;
	КонецЦикла;
	
	// Удаляем все построчные тарифы из входной таблицы тблЗарплатаВрем
	// и добавляем обработанные (очищенные от лишних) построчные тарифы в туже таблицу тблЗарплатаВрем
	Сч = тблЗарплатаВрем.Количество()-1;
	Пока Сч >= 0 Цикл
		Если тблЗарплатаВрем[Сч].НомерСтрокиДляПострочныхТарифов <> 0 Тогда
			тблЗарплатаВрем.Удалить(Сч);
		КонецЕсли;
		Сч = Сч - 1;
	КонецЦикла;
	Для Каждого ТекСтрокаПостр Из тблЗарплатаВремПострочныеТарифы Цикл
		НоваяСтрокаВрем = тблЗарплатаВрем.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаВрем, ТекСтрокаПостр);
	КонецЦикла;
	
	// заливаем обработанную временную таблицу тарифов в ТЧ Зарплата
	Для Каждого ТекСтрокаВрем Из тблЗарплатаВрем Цикл
		Если ТекСтрокаВрем.Сумма = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		НоваяСтрока = тблЗарплата.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаВрем);
	КонецЦикла;
	
	тблЗарплатаВрем.Очистить();
КонецПроцедуры

#КонецОбласти

#Область РасчетГСМ

Процедура РасчетРасходаГСМ(ДокументОбъект, Отказ = Ложь, СписокНормРасхода = Неопределено) Экспорт
	
	ПараметрыРасчетаГСМ = ПолучитьПараметрыРасчетаРасходаГСМ(ДокументОбъект);
	
	Если СписокНормРасхода = Неопределено Тогда
		ДокументОбъект.НормативныйРасходТоплива = уатГСМ.РасчитатьРасходГСМПоНорме(ПараметрыРасчетаГСМ, ДокументОбъект.ТС,
			ДокументОбъект.ОсновноеТопливо, Отказ);
	Иначе
		уатГСМ.РасчитатьРасходГСМПоНорме(ПараметрыРасчетаГСМ, ДокументОбъект.ТС, ДокументОбъект.ОсновноеТопливо,
			Отказ, СписокНормРасхода);
	КонецЕсли;
		
КонецПроцедуры
	
Функция ПолучитьПараметрыРасчетаРасходаГСМ(ДокументОбъект)
	Если Константы.уатЕдиницаИзмеренияВеса.Получить() = Перечисления.уатЕдиницыИзмеренияВеса.Килограмм Тогда 
		КоэфВеса = 1000;
	Иначе 
		КоэфВеса = 1;
	КонецЕсли;
	Если Константы.уатЕдиницаИзмеренияОбъема.Получить() = Перечисления.уатЕдиницыИзмеренияОбъема.Литр Тогда 
		КоэфОбъема = 1000;
	Иначе 
		КоэфОбъема = 1;
	КонецЕсли;
	флПланФакт = Константы.уатУчетПланФактаПоМаршрутуВМаршрутныхЛистах.Получить();
	
	тблВыработка = ДокументОбъект.ВыработкаТСиСотрудников.Выгрузить();
	Если флПланФакт Тогда
		тблВыработка.Колонки.КоличествоПлан.Имя = "Количество";
	Иначе
		тблВыработка.Колонки.КоличествоФакт.Имя = "Количество";
	КонецЕсли;
	тблВыработка.Свернуть("ПараметрВыработки", "Количество");
	
	Для Каждого ТекСтрока Из тблВыработка Цикл
		Если ТекСтрока.ПараметрВыработки = Справочники.уатПараметрыВыработки.ВесГруза Тогда
			ТекСтрока.Количество = ТекСтрока.Количество / КоэфВеса;
		ИначеЕсли ТекСтрока.ПараметрВыработки = Справочники.уатПараметрыВыработки.Объем Тогда
			ТекСтрока.Количество = ТекСтрока.Количество / КоэфОбъема;
		КонецЕсли;
	КонецЦикла;
	
	тблВыработка.Колонки.Добавить("ТС");
	тблВыработка.ЗаполнитьЗначения(ДокументОбъект.ТС, "ТС");
	Если ЗначениеЗаполнено(ДокументОбъект.Прицеп1) Тогда 
		тблКопияВыработки = тблВыработка.Скопировать();
		тблКопияВыработки.ЗаполнитьЗначения(ДокументОбъект.Прицеп1, "ТС");
		Для Каждого ТекСтрокаКопия Из тблКопияВыработки Цикл
			НоваяСтрока = тблВыработка.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаКопия);
		КонецЦикла;
	КонецЕсли;
	Если ЗначениеЗаполнено(ДокументОбъект.Прицеп2) Тогда 
		тблКопияВыработки = тблВыработка.Скопировать();
		тблКопияВыработки.ЗаполнитьЗначения(ДокументОбъект.Прицеп2, "ТС");
		Для Каждого ТекСтрокаКопия Из тблКопияВыработки Цикл
			НоваяСтрока = тблВыработка.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаКопия);
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыРасчетаГСМ = Новый Структура;
	ПараметрыРасчетаГСМ.Вставить("ЭтоПЛ", Ложь);
	ПараметрыРасчетаГСМ.Вставить("ТочностьРасчета", уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументОбъект.Организация, "ТочностьОстатковТоплива"));
	ПараметрыРасчетаГСМ.Вставить("РежимРасчетаВыработки", Перечисления.уатРежимыРасчетаВыработкиПЛ.ПустаяСсылка());
	ПараметрыРасчетаГСМ.Вставить("РаботаНаДвухВидахТоплива", Ложь);
	ПараметрыРасчетаГСМ.Вставить("РаботаНаДвухВидахТопливаОдновременно", Ложь);
	ПараметрыРасчетаГСМ.Вставить("ВремяРаботыОтопителя", Ложь);
	ПараметрыРасчетаГСМ.Вставить("УсловиеРаботы", Справочники.уатУсловияРаботы.ПустаяСсылка());
	ПараметрыРасчетаГСМ.Вставить("КоэффициентУР", 0);
	ПараметрыРасчетаГСМ.Вставить("УсловиеРаботыМЧ", Ложь);
	ПараметрыРасчетаГСМ.Вставить("КоэффициентТМ", 0);
	ПараметрыРасчетаГСМ.Вставить("Организация", ДокументОбъект.Организация);
	ПараметрыРасчетаГСМ.Вставить("ДатаРасчета", ДокументОбъект.Дата);
	ПараметрыРасчетаГСМ.Вставить("ТС", ДокументОбъект.ТС);
	ПараметрыРасчетаГСМ.Вставить("ПробегОбщийПоЗаданию", 0);
	ПараметрыРасчетаГСМ.Вставить("ВремяВРаботеПоЗаданию", 0);
	ПараметрыРасчетаГСМ.Вставить("ВремяВПростоеВклДвиг", 0);
	
	ПараметрыРасчетаГСМ.Вставить("ВыработкаТС", тблВыработка);
		
	мсвПрицепы = Новый Массив;
	Если ЗначениеЗаполнено(ДокументОбъект.Прицеп1) Тогда
		мсвПрицепы.Добавить(Новый Структура("СобственныйВес, ПрицепСамосвал, Грузоподъемность, ЗагрузкаСамосвала",
			?(ДокументОбъект.Прицеп1.СобственныйВес = 0, ДокументОбъект.Прицеп1.Модель.СобственныйВес,
				ДокументОбъект.Прицеп1.СобственныйВес),
			ДокументОбъект.Прицеп1.Модель.ТипТС.Самосвал,
			ДокументОбъект.Прицеп1.Модель.Грузоподъемность,
			ДокументОбъект.Прицеп1.Модель.НормируемаяЗагрузкаСамосвала));
	КонецЕсли;
	Если ЗначениеЗаполнено(ДокументОбъект.Прицеп2) Тогда
		мсвПрицепы.Добавить(Новый Структура("СобственныйВес, ПрицепСамосвал, Грузоподъемность, ЗагрузкаСамосвала",
			?(ДокументОбъект.Прицеп2.СобственныйВес = 0, ДокументОбъект.Прицеп2.Модель.СобственныйВес,
				ДокументОбъект.Прицеп2.СобственныйВес),
			ДокументОбъект.Прицеп2.Модель.ТипТС.Самосвал,
			ДокументОбъект.Прицеп2.Модель.Грузоподъемность,
			ДокументОбъект.Прицеп2.Модель.НормируемаяЗагрузкаСамосвала));
	КонецЕсли;
	ПараметрыРасчетаГСМ.Вставить("Прицепы", мсвПрицепы);
	
	ПараметрыРасчетаГСМ.Вставить("Оборудование", Новый Массив);
	ПараметрыРасчетаГСМ.Вставить("Простои", Новый Массив);
	ПараметрыРасчетаГСМ.Вставить("Задание", Новый Массив);
	
	Возврат ПараметрыРасчетаГСМ;
КонецФункции

#КонецОбласти

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область Проведение

Процедура СформироватьГрузыКПеревозке(ДокументСсылка, ДополнительныеСвойства) 
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатМаршрутныйЛист.НомерСтроки КАК НомерСтроки,
	|	уатМаршрутныйЛист.ЗаказГрузоотправителя.Контрагент КАК Контрагент,
	|	уатМаршрутныйЛист.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя,
	|	ВЫБОР
	|		КОГДА уатМаршрутныйЛист.Номенклатура ССЫЛКА Справочник.Номенклатура
	|			ТОГДА уатМаршрутныйЛист.Номенклатура
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	КОНЕЦ КАК Номенклатура,
	|	уатМаршрутныйЛист.ЕдиницаИзмеренияПоЗаказу КАК ЕдиницаИзмерения,
	|	уатМаршрутныйЛист.Ссылка КАК Регистратор,
	|	ВЫБОР
	|		КОГДА РАЗНОСТЬДАТ(уатМаршрутныйЛист.Ссылка.Дата, уатМаршрутныйЛист.ЗаказГрузоотправителя.Дата, ДЕНЬ) = 0
	|			ТОГДА ВЫБОР
	|					КОГДА РАЗНОСТЬДАТ(уатМаршрутныйЛист.Ссылка.Дата, уатМаршрутныйЛист.ЗаказГрузоотправителя.Дата, СЕКУНДА) >= 0
	|						ТОГДА ДОБАВИТЬКДАТЕ(уатМаршрутныйЛист.ЗаказГрузоотправителя.Дата, СЕКУНДА, 1)
	|					ИНАЧЕ уатМаршрутныйЛист.Ссылка.Дата
	|				КОНЕЦ
	|		КОГДА РАЗНОСТЬДАТ(уатМаршрутныйЛист.Ссылка.Дата, уатМаршрутныйЛист.ЗаказГрузоотправителя.Дата, ДЕНЬ) > 0
	|			ТОГДА ДОБАВИТЬКДАТЕ(уатМаршрутныйЛист.ЗаказГрузоотправителя.Дата, СЕКУНДА, 1)
	|		ИНАЧЕ уатМаршрутныйЛист.Ссылка.Дата
	|	КОНЕЦ КАК Период,
	|	уатМаршрутныйЛист.ЗаказГрузоотправителя.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	СУММА(ВЫБОР
	|			КОГДА уатМаршрутныйЛист.Номенклатура ССЫЛКА Справочник.Номенклатура
	|				ТОГДА уатМаршрутныйЛист.Количество * уатМаршрутныйЛист.ЕдиницаИзмерения.Коэффициент / уатМаршрутныйЛист.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|			ИНАЧЕ уатМаршрутныйЛист.Количество
	|		КОНЕЦ) КАК Количество,
	|	ВЫБОР
	|		КОГДА уатМаршрутныйЛист.Номенклатура ССЫЛКА Справочник.уатГрузовыеМеста_уэ
	|			ТОГДА уатМаршрутныйЛист.Номенклатура
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.уатГрузовыеМеста_уэ.ПустаяСсылка)
	|	КОНЕЦ КАК ГрузовоеМесто,
	|	уатМаршрутныйЛист.ЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам) КАК ДетализацияПоЗаказам
	|ИЗ
	|	Документ.уатМаршрутныйЛист.Заказы КАК уатМаршрутныйЛист
	|ГДЕ
	|	уатМаршрутныйЛист.Ссылка = &Ссылка
	|	И уатМаршрутныйЛист.ТипТочкиМаршрута В (&ТипТочкиРазгрузка)
	|	И НЕ уатМаршрутныйЛист.ЗаказГрузоотправителя = &ПустойЗаказ
	|	И НЕ уатМаршрутныйЛист.ПричинаЗакрытияЗаказа = &ПричинаЗакрытияЗаказаОтклонен
	|
	|СГРУППИРОВАТЬ ПО
	|	уатМаршрутныйЛист.ЗаказГрузоотправителя.Контрагент,
	|	уатМаршрутныйЛист.ЗаказГрузоотправителя,
	|	уатМаршрутныйЛист.ЕдиницаИзмеренияПоЗаказу,
	|	уатМаршрутныйЛист.НомерСтроки,
	|	уатМаршрутныйЛист.Ссылка,
	|	уатМаршрутныйЛист.ЗаказГрузоотправителя.ДоговорКонтрагента,
	|	ВЫБОР
	|		КОГДА уатМаршрутныйЛист.Номенклатура ССЫЛКА Справочник.уатГрузовыеМеста_уэ
	|			ТОГДА уатМаршрутныйЛист.Номенклатура
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.уатГрузовыеМеста_уэ.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА уатМаршрутныйЛист.Номенклатура ССЫЛКА Справочник.Номенклатура
	|			ТОГДА уатМаршрутныйЛист.Номенклатура
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА РАЗНОСТЬДАТ(уатМаршрутныйЛист.Ссылка.Дата, уатМаршрутныйЛист.ЗаказГрузоотправителя.Дата, ДЕНЬ) = 0
	|			ТОГДА ВЫБОР
	|					КОГДА РАЗНОСТЬДАТ(уатМаршрутныйЛист.Ссылка.Дата, уатМаршрутныйЛист.ЗаказГрузоотправителя.Дата, СЕКУНДА) >= 0
	|						ТОГДА ДОБАВИТЬКДАТЕ(уатМаршрутныйЛист.ЗаказГрузоотправителя.Дата, СЕКУНДА, 1)
	|					ИНАЧЕ уатМаршрутныйЛист.Ссылка.Дата
	|				КОНЕЦ
	|		КОГДА РАЗНОСТЬДАТ(уатМаршрутныйЛист.Ссылка.Дата, уатМаршрутныйЛист.ЗаказГрузоотправителя.Дата, ДЕНЬ) > 0
	|			ТОГДА ДОБАВИТЬКДАТЕ(уатМаршрутныйЛист.ЗаказГрузоотправителя.Дата, СЕКУНДА, 1)
	|		ИНАЧЕ уатМаршрутныйЛист.Ссылка.Дата
	|	КОНЕЦ,
	|	уатМаршрутныйЛист.ЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам)";
	
	Запрос.УстановитьПараметр("Ссылка",                        ДокументСсылка);
	
	ТипТочкиРазгрузка = Новый Массив();
	ТипТочкиРазгрузка.Добавить(Перечисления.уатТипыТочекМаршрута.Разгрузка);
	ТипТочкиРазгрузка.Добавить(Перечисления.уатТипыТочекМаршрута.ДополнительнаяРазгрузка);  
	
	Запрос.УстановитьПараметр("ТипТочкиРазгрузка",             ТипТочкиРазгрузка);
	Запрос.УстановитьПараметр("ПустойЗаказ",                   Документы.уатЗаказГрузоотправителя.ПустаяСсылка());
	Запрос.УстановитьПараметр("ПричинаЗакрытияЗаказаОтклонен", Справочники.уатПричиныЗакрытияЗаказов.Отклонен);
	
	ТаблицаПоГрузамКПеревозке = Запрос.Выполнить().Выгрузить();
	
	мДетализацияПоЗаказам = ТаблицаПоГрузамКПеревозке.НайтиСтроки(Новый Структура("ДетализацияПоЗаказам", Истина));
	Если мДетализацияПоЗаказам.Количество() > 1 Тогда
		МассивДляУдаления	 = Новый Массив();
		МассивЗаказов		 = Новый Массив();
		Для Каждого ТекСтрока Из мДетализацияПоЗаказам Цикл
			Если МассивЗаказов.Найти(ТекСтрока.ЗаказГрузоотправителя) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			мЗаказы = ТаблицаПоГрузамКПеревозке.НайтиСтроки(Новый Структура("ДетализацияПоЗаказам, ЗаказГрузоотправителя", Истина, ТекСтрока.ЗаказГрузоотправителя));
			МассивЗаказов.Добавить(ТекСтрока.ЗаказГрузоотправителя);
			Если мЗаказы.Количество() > 1 Тогда
				Для Счетчик = 0 По мЗаказы.Количество()-2 Цикл
					МассивДляУдаления.Добавить(мЗаказы[Счетчик]);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ТекСтрока Из МассивДляУдаления Цикл
			ТаблицаПоГрузамКПеревозке.Удалить(ТекСтрока);
		КонецЦикла;
	КонецЕсли;
		
	// управляемая блокировка
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.уатГрузыКПеревозке_уэ");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = ТаблицаПоГрузамКПеревозке;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Контрагент",            "Контрагент");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ЗаказГрузоотправителя", "ЗаказГрузоотправителя");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ГрузовоеМесто",         "ГрузовоеМесто");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура",          "Номенклатура");
	Блокировка.Заблокировать();
	
	ДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаГрузовКПеревозке", ТаблицаПоГрузамКПеревозке);
	
КонецПроцедуры

Процедура СформироватьЗаказыГрузоотправителей(ДокументСсылка, ДополнительныеСвойства) 
	
	Запрос = Новый Запрос( 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатМаршрутныйЛист.НомерСтроки КАК НомерСтроки,
	|	уатМаршрутныйЛист.ЗаказГрузоотправителя.Контрагент КАК Контрагент,
	|	уатМаршрутныйЛист.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя,
	|	ВЫБОР
	|		КОГДА уатМаршрутныйЛист.Номенклатура ССЫЛКА Справочник.Номенклатура
	|			ТОГДА уатМаршрутныйЛист.Номенклатура
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	КОНЕЦ КАК Номенклатура,
	|	уатМаршрутныйЛист.ЕдиницаИзмеренияПоЗаказу КАК ЕдиницаИзмерения,
	|	уатМаршрутныйЛист.Ссылка КАК Регистратор,
	|	ВЫБОР
	|		КОГДА &флПланФакт
	|				И уатМаршрутныйЛист.ПрибытиеФакт <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА уатМаршрутныйЛист.ПрибытиеФакт
	|		КОГДА &флПланФакт
	|				И уатМаршрутныйЛист.УбытиеФакт <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА уатМаршрутныйЛист.УбытиеФакт
	|		КОГДА НЕ &флПланФакт
	|				И уатМаршрутныйЛист.ПрибытиеПлан <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА уатМаршрутныйЛист.ПрибытиеПлан
	|		ИНАЧЕ уатМаршрутныйЛист.Ссылка.Дата
	|	КОНЕЦ КАК Период,
	|	уатМаршрутныйЛист.ЗаказГрузоотправителя.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	СУММА(ВЫБОР
	|			КОГДА уатМаршрутныйЛист.Номенклатура ССЫЛКА Справочник.Номенклатура
	|				ТОГДА уатМаршрутныйЛист.Количество * ЕСТЬNULL(уатМаршрутныйЛист.ЕдиницаИзмерения.Коэффициент, 1) / уатМаршрутныйЛист.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|			ИНАЧЕ уатМаршрутныйЛист.Количество
	|		КОНЕЦ) КАК Количество,
	|	ВЫБОР
	|		КОГДА уатМаршрутныйЛист.Номенклатура ССЫЛКА Справочник.уатГрузовыеМеста_уэ
	|			ТОГДА уатМаршрутныйЛист.Номенклатура
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.уатГрузовыеМеста_уэ.ПустаяСсылка)
	|	КОНЕЦ КАК ГрузовоеМесто,
	|	уатМаршрутныйЛист.ЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам) КАК ДетализацияПоЗаказам
	|ИЗ
	|	Документ.уатМаршрутныйЛист.Заказы КАК уатМаршрутныйЛист
	|ГДЕ
	|	уатМаршрутныйЛист.Ссылка = &Ссылка
	|	И уатМаршрутныйЛист.ТипТочкиМаршрута В (&ТипТочкиРазгрузка)
	|	И НЕ уатМаршрутныйЛист.ЗаказГрузоотправителя = ЗНАЧЕНИЕ(Документ.уатЗаказГрузоотправителя.ПустаяСсылка)
	|	И уатМаршрутныйЛист.Выполнен
	|	И НЕ уатМаршрутныйЛист.ПричинаЗакрытияЗаказа = ЗНАЧЕНИЕ(Справочник.уатПричиныЗакрытияЗаказов.Отклонен)
	|
	|СГРУППИРОВАТЬ ПО
	|	уатМаршрутныйЛист.ЗаказГрузоотправителя.Контрагент,
	|	уатМаршрутныйЛист.ЗаказГрузоотправителя,
	|	уатМаршрутныйЛист.ЕдиницаИзмеренияПоЗаказу,
	|	уатМаршрутныйЛист.НомерСтроки,
	|	уатМаршрутныйЛист.Ссылка,
	|	ВЫБОР
	|		КОГДА &флПланФакт
	|				И уатМаршрутныйЛист.ПрибытиеФакт <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА уатМаршрутныйЛист.ПрибытиеФакт
	|		КОГДА &флПланФакт
	|				И уатМаршрутныйЛист.УбытиеФакт <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА уатМаршрутныйЛист.УбытиеФакт
	|		КОГДА НЕ &флПланФакт
	|				И уатМаршрутныйЛист.ПрибытиеПлан <> ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА уатМаршрутныйЛист.ПрибытиеПлан
	|		ИНАЧЕ уатМаршрутныйЛист.Ссылка.Дата
	|	КОНЕЦ,
	|	уатМаршрутныйЛист.ЗаказГрузоотправителя.ДоговорКонтрагента,
	|	ВЫБОР
	|		КОГДА уатМаршрутныйЛист.Номенклатура ССЫЛКА Справочник.уатГрузовыеМеста_уэ
	|			ТОГДА уатМаршрутныйЛист.Номенклатура
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.уатГрузовыеМеста_уэ.ПустаяСсылка)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА уатМаршрутныйЛист.Номенклатура ССЫЛКА Справочник.Номенклатура
	|			ТОГДА уатМаршрутныйЛист.Номенклатура
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	КОНЕЦ,
	|	уатМаршрутныйЛист.ЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам)");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("флПланФакт", Константы.уатУчетПланФактаПоМаршрутуВМаршрутныхЛистах.Получить());
	
	ТипТочкиРазгрузка = Новый Массив();
	ТипТочкиРазгрузка.Добавить(Перечисления.уатТипыТочекМаршрута.Разгрузка);
	ТипТочкиРазгрузка.Добавить(Перечисления.уатТипыТочекМаршрута.ДополнительнаяРазгрузка);  
	Запрос.УстановитьПараметр("ТипТочкиРазгрузка", ТипТочкиРазгрузка);
	
	ТаблицаПоЗаказамГрузоотправителей = Запрос.Выполнить().Выгрузить();
	
	мДетализацияПоЗаказам = ТаблицаПоЗаказамГрузоотправителей.НайтиСтроки(Новый Структура("ДетализацияПоЗаказам", Истина));
	Если мДетализацияПоЗаказам.Количество() > 1 Тогда
		МассивДляУдаления	 = Новый Массив();
		МассивЗаказов		 = Новый Массив();
		Для Каждого ТекСтрока Из мДетализацияПоЗаказам Цикл
			Если МассивЗаказов.Найти(ТекСтрока.ЗаказГрузоотправителя) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			мЗаказы = ТаблицаПоЗаказамГрузоотправителей.НайтиСтроки(Новый Структура("ДетализацияПоЗаказам, ЗаказГрузоотправителя",
				Истина, ТекСтрока.ЗаказГрузоотправителя));
			МассивЗаказов.Добавить(ТекСтрока.ЗаказГрузоотправителя);
			Если мЗаказы.Количество() > 1 Тогда
				Для Счетчик = 0 По мЗаказы.Количество()-2 Цикл
					МассивДляУдаления.Добавить(мЗаказы[Счетчик]);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ТекСтрока Из МассивДляУдаления Цикл
			ТаблицаПоЗаказамГрузоотправителей.Удалить(ТекСтрока);
		КонецЦикла;
	КонецЕсли;

	// управляемая блокировка
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.уатЗаказыГрузоотправителей");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = ТаблицаПоЗаказамГрузоотправителей;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Контрагент",            "Контрагент");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ЗаказГрузоотправителя", "ЗаказГрузоотправителя");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ГрузовоеМесто",         "ГрузовоеМесто");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура",          "Номенклатура");
	Блокировка.Заблокировать();
	
	ДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗаказовГрузоотправителя", ТаблицаПоЗаказамГрузоотправителей);
	
КонецПроцедуры

Процедура СформироватьСтатусыГрузов(ДокументСсылка, ДополнительныеСвойства)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатМаршрутныйЛистЗаказы.Ссылка КАК Регистратор,
	|	ВЫБОР
	|		КОГДА РАЗНОСТЬДАТ(уатМаршрутныйЛист.Дата, уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя.Дата, ДЕНЬ) = 0
	|			ТОГДА ВЫБОР
	|					КОГДА РАЗНОСТЬДАТ(уатМаршрутныйЛист.Дата, уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя.Дата, СЕКУНДА) >= 0
	|						ТОГДА ДОБАВИТЬКДАТЕ(уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя.Дата, СЕКУНДА, 1)
	|					ИНАЧЕ уатМаршрутныйЛист.Дата
	|				КОНЕЦ
	|		КОГДА РАЗНОСТЬДАТ(уатМаршрутныйЛист.Дата, уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя.Дата, ДЕНЬ) > 0
	|			ТОГДА ДОБАВИТЬКДАТЕ(уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя.Дата, СЕКУНДА, 1)
	|		ИНАЧЕ уатМаршрутныйЛист.Дата
	|	КОНЕЦ КАК ДатаДокумента,
	|	ВЫБОР
	|		КОГДА &флПланФакт
	|				И уатМаршрутныйЛистЗаказы.ПрибытиеФакт <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА уатМаршрутныйЛистЗаказы.ПрибытиеФакт
	|		КОГДА &флПланФакт
	|				И уатМаршрутныйЛистЗаказы.УбытиеФакт <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА уатМаршрутныйЛистЗаказы.УбытиеФакт
	|		КОГДА НЕ &флПланФакт
	|				И уатМаршрутныйЛистЗаказы.ПрибытиеПлан <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА уатМаршрутныйЛистЗаказы.ПрибытиеПлан
	|		ИНАЧЕ уатМаршрутныйЛист.Дата
	|	КОНЕЦ КАК ПрибытиеФакт,
	|	ВЫБОР
	|		КОГДА &флПланФакт
	|				И уатМаршрутныйЛистЗаказы.УбытиеФакт <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА уатМаршрутныйЛистЗаказы.УбытиеФакт
	|		КОГДА &флПланФакт
	|				И уатМаршрутныйЛистЗаказы.ПрибытиеФакт <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА уатМаршрутныйЛистЗаказы.ПрибытиеФакт
	|		КОГДА НЕ &флПланФакт
	|				И уатМаршрутныйЛистЗаказы.ПрибытиеПлан <> ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА уатМаршрутныйЛистЗаказы.ПрибытиеПлан
	|		ИНАЧЕ уатМаршрутныйЛист.Дата
	|	КОНЕЦ КАК УбытиеФакт,
	|	уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя,
	|	ВЫБОР
	|		КОГДА уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам)
	|			ТОГДА ВЫРАЗИТЬ(уатМаршрутныйЛистЗаказы.Номенклатура КАК Справочник.уатГрузовыеМеста_уэ)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.уатГрузовыеМеста_уэ.ПустаяСсылка)
	|	КОНЕЦ КАК ГрузовоеМесто,
	|	уатМаршрутныйЛистЗаказы.ТипТочкиМаршрута КАК ТипТочки,
	|	уатМаршрутныйЛистЗаказы.Выполнен КАК СтатусВыполнения,
	|	уатМаршрутныйЛистЗаказы.ПричинаЗакрытияЗаказа КАК ПричинаЗакрытияЗаказа
	|ПОМЕСТИТЬ ВРТ_Документ
	|ИЗ
	|	Документ.уатМаршрутныйЛист.Заказы КАК уатМаршрутныйЛистЗаказы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатМаршрутныйЛист КАК уатМаршрутныйЛист
	|		ПО уатМаршрутныйЛистЗаказы.Ссылка = уатМаршрутныйЛист.Ссылка
	|ГДЕ
	|	уатМаршрутныйЛистЗаказы.Ссылка = &Ссылка
	|	И (уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам)
	|			ИЛИ уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам))
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВРТ_Документ.Регистратор КАК Регистратор,
	|	МАКСИМУМ(ВРТ_Документ.ПрибытиеФакт) КАК Период,
	|	ВРТ_Документ.ЗаказГрузоотправителя КАК Заказ,
	|	ВРТ_Документ.ГрузовоеМесто КАК ГрузовоеМесто,
	|	2 КАК Порядок
	|ПОМЕСТИТЬ ВРТ_ВыборСтатусов
	|ИЗ
	|	ВРТ_Документ КАК ВРТ_Документ
	|ГДЕ
	|	ВРТ_Документ.ТипТочки В(&ТипыТочекРазгрузка)
	|	И ВРТ_Документ.СтатусВыполнения
	|
	|СГРУППИРОВАТЬ ПО
	|	ВРТ_Документ.Регистратор,
	|	ВРТ_Документ.ЗаказГрузоотправителя,
	|	ВРТ_Документ.ГрузовоеМесто
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВРТ_Документ.Регистратор,
	|	МАКСИМУМ(ВРТ_Документ.УбытиеФакт),
	|	ВРТ_Документ.ЗаказГрузоотправителя,
	|	ВРТ_Документ.ГрузовоеМесто,
	|	1
	|ИЗ
	|	ВРТ_Документ КАК ВРТ_Документ
	|ГДЕ
	|	ВРТ_Документ.ТипТочки В(&ТипыТочекПогрузка)
	|	И ВРТ_Документ.СтатусВыполнения
	|
	|СГРУППИРОВАТЬ ПО
	|	ВРТ_Документ.Регистратор,
	|	ВРТ_Документ.ЗаказГрузоотправителя,
	|	ВРТ_Документ.ГрузовоеМесто
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВРТ_Документ.Регистратор,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА РАЗНОСТЬДАТ(ВРТ_Документ.ДатаДокумента, ВРТ_Документ.ПрибытиеФакт, СЕКУНДА) < 0
	|				ТОГДА ВЫБОР
	|						КОГДА РАЗНОСТЬДАТ(ВРТ_Документ.ПрибытиеФакт, ВРТ_Документ.УбытиеФакт, СЕКУНДА) < 0
	|							ТОГДА ВРТ_Документ.УбытиеФакт
	|						ИНАЧЕ ВРТ_Документ.ПрибытиеФакт
	|					КОНЕЦ
	|			ИНАЧЕ ВЫБОР
	|					КОГДА РАЗНОСТЬДАТ(ВРТ_Документ.ДатаДокумента, ВРТ_Документ.УбытиеФакт, СЕКУНДА) < 0
	|						ТОГДА ВРТ_Документ.УбытиеФакт
	|					ИНАЧЕ ВРТ_Документ.ДатаДокумента
	|				КОНЕЦ
	|		КОНЕЦ),
	|	ВРТ_Документ.ЗаказГрузоотправителя,
	|	ВРТ_Документ.ГрузовоеМесто,
	|	0
	|ИЗ
	|	ВРТ_Документ КАК ВРТ_Документ
	|ГДЕ
	|	ВРТ_Документ.ТипТочки <> ЗНАЧЕНИЕ(Перечисление.уатТипыТочекМаршрута.ПромежуточныйПункт)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВРТ_Документ.Регистратор,
	|	ВРТ_Документ.ЗаказГрузоотправителя,
	|	ВРТ_Документ.ГрузовоеМесто
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВРТ_Документ.Регистратор,
	|	МАКСИМУМ(ВРТ_Документ.ПрибытиеФакт),
	|	ВРТ_Документ.ЗаказГрузоотправителя,
	|	ВРТ_Документ.ГрузовоеМесто,
	|	3
	|ИЗ
	|	ВРТ_Документ КАК ВРТ_Документ
	|ГДЕ
	|	ВРТ_Документ.ПричинаЗакрытияЗаказа = ЗНАЧЕНИЕ(Справочник.уатПричиныЗакрытияЗаказов.Отклонен)
	|
	|СГРУППИРОВАТЬ ПО
	|	ВРТ_Документ.Регистратор,
	|	ВРТ_Документ.ЗаказГрузоотправителя,
	|	ВРТ_Документ.ГрузовоеМесто
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВРТ_ВыборСтатусов.Регистратор КАК Регистратор,
	|	ВРТ_ВыборСтатусов.Период КАК Период,
	|	ВРТ_ВыборСтатусов.Заказ КАК Заказ,
	|	ЕСТЬNULL(ВРТ_ВыборСтатусов.ГрузовоеМесто, ЗНАЧЕНИЕ(Справочник.уатГрузовыеМеста_уэ.ПустаяСсылка)) КАК ГрузовоеМесто,
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(ВРТ_ВыборСтатусов.Порядок) = 2
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Доставлен)
	|		КОГДА МАКСИМУМ(ВРТ_ВыборСтатусов.Порядок) = 1
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Отправлен)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Размещен)
	|	КОНЕЦ КАК Статус
	|ИЗ
	|	ВРТ_ВыборСтатусов КАК ВРТ_ВыборСтатусов
	|
	|СГРУППИРОВАТЬ ПО
	|	ВРТ_ВыборСтатусов.Регистратор,
	|	ВРТ_ВыборСтатусов.Период,
	|	ВРТ_ВыборСтатусов.Заказ,
	|	ВРТ_ВыборСтатусов.ГрузовоеМесто
	|
	|ИМЕЮЩИЕ
	|	НЕ МАКСИМУМ(ВРТ_ВыборСтатусов.Порядок) = 3");
	
	ТипыТочекПогрузка = Новый Массив();
	ТипыТочекПогрузка.Добавить(Перечисления.уатТипыТочекМаршрута.Погрузка); 
	ТипыТочекПогрузка.Добавить(Перечисления.уатТипыТочекМаршрута.ДополнительнаяПогрузка);
	
	ТипыТочекРазгрузка = Новый Массив();
	ТипыТочекРазгрузка.Добавить(Перечисления.уатТипыТочекМаршрута.Разгрузка); 
	ТипыТочекРазгрузка.Добавить(Перечисления.уатТипыТочекМаршрута.ДополнительнаяРазгрузка);

	Запрос.УстановитьПараметр("ТипыТочекПогрузка", ТипыТочекПогрузка);
	Запрос.УстановитьПараметр("ТипыТочекРазгрузка", ТипыТочекРазгрузка);

	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("флПланФакт", Константы.уатУчетПланФактаПоМаршрутуВМаршрутныхЛистах.Получить());
	
	ТаблицаСтатусовГрузов = Запрос.Выполнить().Выгрузить();
	
	// управляемая блокировка
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.уатСтатусыГрузов_уэ");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = ТаблицаСтатусовГрузов;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Заказ",         "Заказ");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ГрузовоеМесто", "ГрузовоеМесто");
	Блокировка.Заблокировать();
	
	ДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСтатусыГрузов", ТаблицаСтатусовГрузов);
	
КонецПроцедуры

Процедура СформироватьВыработкаПоМаршрутнымЛистам(ДокументСсылка, ДополнительныеСвойства)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	&ДатаЗакрытия КАК Период,
	|	уатМаршрутныйЛистВыработкаТСиСотрудников.Ссылка.Организация КАК Организация,
	|	уатМаршрутныйЛистВыработкаТСиСотрудников.Ссылка.ТС КАК ТС,
	|	уатМаршрутныйЛистВыработкаТСиСотрудников.ЗаказГрузоотправителя КАК Заказ,
	|	уатМаршрутныйЛистВыработкаТСиСотрудников.ЗаказГрузоотправителя.Ответственный КАК Менеджер,
	|	уатМаршрутныйЛистВыработкаТСиСотрудников.ПараметрВыработки КАК ПараметрВыработки,
	|	уатМаршрутныйЛистВыработкаТСиСотрудников.КоличествоПлан КАК КоличествоПлан,
	|	уатМаршрутныйЛистВыработкаТСиСотрудников.КоличествоФакт КАК Количество,
	|	уатМаршрутныйЛистВыработкаТСиСотрудников.Подразделение КАК Подразделение,
	|	уатМаршрутныйЛистВыработкаТСиСотрудников.Контрагент КАК Контрагент,
	|	уатМаршрутныйЛистВыработкаТСиСотрудников.Маршрут КАК Маршрут,
	|	уатМаршрутныйЛистВыработкаТСиСотрудников.ОбъектСтроительства КАК ОбъектСтроительства,
	|	уатМаршрутныйЛистВыработкаТСиСотрудников.ВидПеревозки КАК ВидПеревозки,
	|	уатМаршрутныйЛистВыработкаТСиСотрудников.НаправлениеПеревозки КАК НаправлениеПеревозки,
	|	НЕОПРЕДЕЛЕНО КАК Колонна
	|ИЗ
	|	Документ.уатМаршрутныйЛист.ВыработкаТСиСотрудников КАК уатМаршрутныйЛистВыработкаТСиСотрудников
	|ГДЕ
	|	уатМаршрутныйЛистВыработкаТСиСотрудников.Ссылка = &Ссылка
	|	И уатМаршрутныйЛистВыработкаТСиСотрудников.ПараметрВыработки.ДействуетНаТСМЛ");
	Запрос.УстановитьПараметр("ДатаЗакрытия",
		?(ДокументСсылка.ДатаЗакрытия = '00010101', ДокументСсылка.Дата, ДокументСсылка.ДатаЗакрытия));
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	ТаблицаВыработка = Запрос.Выполнить().Выгрузить();
	
	// Складская выработка не должна отражаться при проведении по этому регистру
	СтрокиДляУдаления = ТаблицаВыработка.НайтиСтроки(Новый Структура("ПараметрВыработки", Справочники.уатПараметрыВыработки.СкладскаяОбработка));
	Для Каждого СтрокаТаблицы Из СтрокиДляУдаления Цикл
		ТаблицаВыработка.Удалить(СтрокаТаблицы);
	КонецЦикла;
	
	// Заполнение колонны ТС и прицепов
	ДатаОтправленияПлан = ПолучитьВремяОтправленияПлан(ДокументСсылка);
	ДатаВыезда = ?(ЗначениеЗаполнено(ДатаОтправленияПлан), ДатаОтправленияПлан, ДокументСсылка.Дата);
	Если ЗначениеЗаполнено(ДокументСсылка.ТС)
		И ДокументСсылка.ТС.ПринадлежностьТС = Перечисления.уатПринадлежностьТС.Собственное Тогда
		
		// для привлеченного транспорта не используется привязка к колоннам
		ТекКолонна = уатОбщегоНазначения.МестонахождениеТС(ДокументСсылка.ТС,
			?(ДокументСсылка.ДатаЗакрытия = '00010101', ДатаВыезда, ДокументСсылка.ДатаЗакрытия)).Колонна;
		ТаблицаВыработка.ЗаполнитьЗначения(ТекКолонна, "Колонна");
	КонецЕсли;
	Если ЗначениеЗаполнено(ДокументСсылка.Прицеп1) Тогда 
		тблКопияВыработки = ТаблицаВыработка.Скопировать();
		тблКопияВыработки.ЗаполнитьЗначения(ДокументСсылка.Прицеп1, "ТС");
		
		ТекКолонна = Неопределено;
		Если ДокументСсылка.Прицеп1.ПринадлежностьТС = Перечисления.уатПринадлежностьТС.Собственное Тогда
			// для привлеченного транспорта не используется привязка к колоннам
			ТекКолонна = уатОбщегоНазначения.МестонахождениеТС(ДокументСсылка.Прицеп1,
				?(ДокументСсылка.ДатаЗакрытия = '00010101', ДатаВыезда, ДокументСсылка.ДатаЗакрытия)).Колонна;
		КонецЕсли;
		тблКопияВыработки.ЗаполнитьЗначения(ТекКолонна, "Колонна");
		
		Для Каждого ТекСтрокаКопия Из тблКопияВыработки Цикл
			НоваяСтрока = ТаблицаВыработка.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаКопия);
		КонецЦикла;
	КонецЕсли;
	Если ЗначениеЗаполнено(ДокументСсылка.Прицеп2) Тогда 
		тблКопияВыработки = ТаблицаВыработка.Скопировать();
		тблКопияВыработки.ЗаполнитьЗначения(ДокументСсылка.Прицеп2, "ТС");
		
		ТекКолонна = Неопределено;
		Если ДокументСсылка.Прицеп2.ПринадлежностьТС = Перечисления.уатПринадлежностьТС.Собственное Тогда
			// для привлеченного транспорта не используется привязка к колоннам
			ТекКолонна = уатОбщегоНазначения.МестонахождениеТС(ДокументСсылка.Прицеп2,
				?(ДокументСсылка.ДатаЗакрытия = '00010101', ДатаВыезда, ДокументСсылка.ДатаЗакрытия)).Колонна;
		КонецЕсли;
		тблКопияВыработки.ЗаполнитьЗначения(ТекКолонна, "Колонна");
		
		Для Каждого ТекСтрокаКопия Из тблКопияВыработки Цикл
			НоваяСтрока = ТаблицаВыработка.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаКопия);
		КонецЦикла;
	КонецЕсли;
	
	// управляемая блокировка
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.уатВыработкаПоМаршрутнымЛистам_уэ");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = ТаблицаВыработка;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ПараметрВыработки", "ПараметрВыработки");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Заказ",             "Заказ");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Организация",       "Организация");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ТС",                "ТС");
	Блокировка.Заблокировать();
	
	ДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаВыработкаПоМаршрутнымЛистам", ТаблицаВыработка);
	
КонецПроцедуры

Процедура СформироватьВыработкаСотрудниковПоМаршрутнымЛистам(ДокументСсылка, ДополнительныеСвойства)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	&ДатаЗакрытия КАК Период,
	|	уатМаршрутныйЛистВыработкаТСиСотрудников.Ссылка.Организация КАК Организация,
	|	уатМаршрутныйЛистВыработкаТСиСотрудников.Ссылка.Водитель1 КАК Сотрудник,
	|	уатМаршрутныйЛистВыработкаТСиСотрудников.ЗаказГрузоотправителя КАК Заказ,
	|	уатМаршрутныйЛистВыработкаТСиСотрудников.ПараметрВыработки КАК ПараметрВыработки,
	|	уатМаршрутныйЛистВыработкаТСиСотрудников.КоличествоПлан КАК КоличествоПлан,
	|	уатМаршрутныйЛистВыработкаТСиСотрудников.КоличествоФакт КАК Количество,
	|	уатМаршрутныйЛистВыработкаТСиСотрудников.Подразделение КАК Подразделение,
	|	уатМаршрутныйЛистВыработкаТСиСотрудников.Контрагент КАК Контрагент,
	|	уатМаршрутныйЛистВыработкаТСиСотрудников.Маршрут КАК Маршрут,
	|	уатМаршрутныйЛистВыработкаТСиСотрудников.ОбъектСтроительства КАК ОбъектСтроительства,
	|	уатМаршрутныйЛистВыработкаТСиСотрудников.ВидПеревозки КАК ВидПеревозки,
	|	уатМаршрутныйЛистВыработкаТСиСотрудников.НаправлениеПеревозки КАК НаправлениеПеревозки,
	|	уатМестонахождениеТССрезПоследних.Колонна КАК Колонна
	|ИЗ
	|	Документ.уатМаршрутныйЛист.ВыработкаТСиСотрудников КАК уатМаршрутныйЛистВыработкаТСиСотрудников
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатМестонахождениеТС.СрезПоследних(&ДатаСреза, ) КАК уатМестонахождениеТССрезПоследних
	|		ПО уатМаршрутныйЛистВыработкаТСиСотрудников.Ссылка.ТС = уатМестонахождениеТССрезПоследних.ТС
	|ГДЕ
	|	уатМаршрутныйЛистВыработкаТСиСотрудников.Ссылка = &Ссылка
	|	И уатМаршрутныйЛистВыработкаТСиСотрудников.ПараметрВыработки.ДействуетНаСотрудниковМЛ");
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ДатаСреза", ДокументСсылка.Дата);
	Запрос.УстановитьПараметр("ДатаЗакрытия",
		?(ДокументСсылка.ДатаЗакрытия = '00010101', ДокументСсылка.Дата, ДокументСсылка.ДатаЗакрытия));
		
	ТаблицаВыработкаИсходная = Запрос.Выполнить().Выгрузить();
	
	// Складская выработка не должна отражаться при проведении по этому регистру
	мсвСтрокиДляУдаления = ТаблицаВыработкаИсходная.НайтиСтроки(Новый Структура("ПараметрВыработки", Справочники.уатПараметрыВыработки.СкладскаяОбработка));
	Для Каждого СтрокаУдалить Из мсвСтрокиДляУдаления Цикл
		ТаблицаВыработкаИсходная.Удалить(СтрокаУдалить);
	КонецЦикла;
	
	ТаблицаВыработка = ТаблицаВыработкаИсходная.СкопироватьКолонки();
	
	структураВодители = Новый Структура("Водитель1, Водитель2, Сотрудник1, Сотрудник2",
		ДокументСсылка.Водитель1, ДокументСсылка.Водитель2, ДокументСсылка.Сотрудник1, ДокументСсылка.Сотрудник2);
	Для Каждого ТекВодитель Из структураВодители Цикл
		Если ЗначениеЗаполнено(ТекВодитель.Значение) Тогда
			Для Каждого ТекСтрокаВыработкаИсходная Из ТаблицаВыработкаИсходная Цикл
				НоваяСтрока = ТаблицаВыработка.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаВыработкаИсходная);
				НоваяСтрока.Сотрудник = ТекВодитель.Значение;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	// управляемая блокировка
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.уатВыработкаСотрудниковПоМаршрутнымЛистам");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = ТаблицаВыработка;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ПараметрВыработки", "ПараметрВыработки");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Заказ",             "Заказ");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Организация",       "Организация");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Сотрудник",         "Сотрудник");
	Блокировка.Заблокировать();
	
	ДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаВыработкаСотрудниковПоМаршрутнымЛистам", ТаблицаВыработка);
	
КонецПроцедуры

Процедура СформироватьДоходы(ДокументСсылка, ДополнительныеСвойства)
	
	Если Константы.уатЕдиницаИзмеренияВеса.Получить() = Перечисления.уатЕдиницыИзмеренияВеса.Килограмм Тогда 
		КоэфГрузоподъемности = 1000;
	Иначе 
		КоэфГрузоподъемности = 1;
	КонецЕсли;
	
	Если Константы.уатЕдиницаИзмеренияОбъема.Получить() = Перечисления.уатЕдиницыИзмеренияОбъема.Литр Тогда 
		КоэфОбъемаКузова = 1000;
	Иначе 
		КоэфОбъемаКузова = 1;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	&ДатаЗакрытия КАК Период,
	|	уатМаршрутныйЛистОказываемыеУслуги.Ссылка КАК Регистратор,
	|	уатМаршрутныйЛистОказываемыеУслуги.Ссылка.Организация КАК Организация,
	|	уатМаршрутныйЛистОказываемыеУслуги.Ссылка.Подразделение КАК Подразделение,
	|	уатМаршрутныйЛистОказываемыеУслуги.Ссылка.ТС,
	|	уатМаршрутныйЛистОказываемыеУслуги.Ссылка.Прицеп1,
	|	уатМаршрутныйЛистОказываемыеУслуги.Ссылка.Прицеп2,
	|	уатМаршрутныйЛистОказываемыеУслуги.ЗаказНаТС.Маршрут КАК Маршрут,
	|	уатМаршрутныйЛистОказываемыеУслуги.ЗаказНаТС.ОбъектСтроительства КАК ОбъектСтроительства,
	|	уатМаршрутныйЛистОказываемыеУслуги.ЗаказНаТС.ВидПеревозки КАК ВидПеревозки,
	|	уатМаршрутныйЛистОказываемыеУслуги.ЗаказНаТС.НаправлениеПеревозки КАК НаправлениеПеревозки,
	|	уатМаршрутныйЛистОказываемыеУслуги.ЗаказНаТС КАК Заказ,
	|	ВЫБОР
	|		КОГДА уатМаршрутныйЛистОказываемыеУслуги.ЗаказНаТС.Контрагент ССЫЛКА Справочник.Контрагенты
	|			ТОГДА уатМаршрутныйЛистОказываемыеУслуги.ЗаказНаТС.Контрагент
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	КОНЕЦ КАК Контрагент,
	|	уатМаршрутныйЛистОказываемыеУслуги.Номенклатура КАК НоменклатураУслуги,
	|	уатМаршрутныйЛистОказываемыеУслуги.Валюта КАК Валюта,
	|	уатМаршрутныйЛистОказываемыеУслуги.СтавкаНДС КАК СтавкаНДС,
	|	ВЫБОР
	|		КОГДА уатМаршрутныйЛистОказываемыеУслуги.Тариф.МетодРасчета = ЗНАЧЕНИЕ(Перечисление.уатМетодыРасчетаПоТарифам.ПроцентомОтСуммы)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.Наценка)
	|		ИНАЧЕ уатМаршрутныйЛистОказываемыеУслуги.Тариф.ПараметрВыработки
	|	КОНЕЦ КАК ПараметрВыработки,
	|	СУММА(уатМаршрутныйЛистОказываемыеУслуги.СуммаНДС) КАК СуммаНДС,
	|	СУММА(уатМаршрутныйЛистОказываемыеУслуги.СуммаНДС) КАК СуммаНДСУпр,
	|	СУММА(уатМаршрутныйЛистОказываемыеУслуги.Количество) КАК Количество,
	|	СУММА(ВЫБОР
	|			КОГДА уатМаршрутныйЛистОказываемыеУслуги.УчитыватьНДС
	|					И НЕ уатМаршрутныйЛистОказываемыеУслуги.СуммаВключаетНДС
	|				ТОГДА уатМаршрутныйЛистОказываемыеУслуги.Сумма + уатМаршрутныйЛистОказываемыеУслуги.СуммаНДС
	|			ИНАЧЕ уатМаршрутныйЛистОказываемыеУслуги.Сумма
	|		КОНЕЦ) КАК Сумма,
	|	СУММА(ВЫБОР
	|			КОГДА уатМаршрутныйЛистОказываемыеУслуги.УчитыватьНДС
	|					И НЕ уатМаршрутныйЛистОказываемыеУслуги.СуммаВключаетНДС
	|				ТОГДА уатМаршрутныйЛистОказываемыеУслуги.Сумма + уатМаршрутныйЛистОказываемыеУслуги.СуммаНДС
	|			ИНАЧЕ уатМаршрутныйЛистОказываемыеУслуги.Сумма
	|		КОНЕЦ) КАК СуммаУпр,
	|	СУММА(ВЫБОР
	|			КОГДА уатМаршрутныйЛистОказываемыеУслуги.УчитыватьНДС
	|					И НЕ уатМаршрутныйЛистОказываемыеУслуги.СуммаВключаетНДС
	|				ТОГДА уатМаршрутныйЛистОказываемыеУслуги.Сумма + уатМаршрутныйЛистОказываемыеУслуги.СуммаНДС
	|			ИНАЧЕ уатМаршрутныйЛистОказываемыеУслуги.Сумма
	|		КОНЕЦ) КАК СуммаРегл,
	|	уатМаршрутныйЛистОказываемыеУслуги.СтатьяДоходов КАК СтатьяДоходов,
	|	уатМаршрутныйЛистОказываемыеУслуги.ЗаказНаТС.Ответственный КАК Менеджер	
	|ИЗ
	|	Документ.уатМаршрутныйЛист.Доходы КАК уатМаршрутныйЛистОказываемыеУслуги
	|ГДЕ
	|	уатМаршрутныйЛистОказываемыеУслуги.Ссылка = &Ссылка
	|СГРУППИРОВАТЬ ПО
	|	уатМаршрутныйЛистОказываемыеУслуги.Ссылка,
	|	уатМаршрутныйЛистОказываемыеУслуги.Номенклатура,
	|	уатМаршрутныйЛистОказываемыеУслуги.Валюта,
	|	уатМаршрутныйЛистОказываемыеУслуги.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА уатМаршрутныйЛистОказываемыеУслуги.Тариф.МетодРасчета = ЗНАЧЕНИЕ(Перечисление.уатМетодыРасчетаПоТарифам.ПроцентомОтСуммы)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.Наценка)
	|		ИНАЧЕ уатМаршрутныйЛистОказываемыеУслуги.Тариф.ПараметрВыработки
	|	КОНЕЦ,
	|	уатМаршрутныйЛистОказываемыеУслуги.ЗаказНаТС,
	|	ВЫБОР
	|		КОГДА уатМаршрутныйЛистОказываемыеУслуги.ЗаказНаТС.Контрагент ССЫЛКА Справочник.Контрагенты
	|			ТОГДА уатМаршрутныйЛистОказываемыеУслуги.ЗаказНаТС.Контрагент
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	КОНЕЦ,
	|	уатМаршрутныйЛистОказываемыеУслуги.СтатьяДоходов");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ДатаЗакрытия",
		?(ДокументСсылка.ДатаЗакрытия = '00010101', ДокументСсылка.Дата, ДокументСсылка.ДатаЗакрытия));
	
	ТаблицаДоходы = Запрос.Выполнить().Выгрузить();
	
	ТаблицаДвижения = ТаблицаДоходы.Скопировать();
	ТаблицаДвижения.Очистить();
	
	КэшКурсов = Неопределено;
	
	Для каждого ТекСтрока Из ТаблицаДоходы Цикл
		Если ЗначениеЗаполнено(ТекСтрока.Валюта) Тогда
			ВалютаСтроки = ТекСтрока.Валюта;
			СтруктураКурсаСтроки = СтруктураКурсаВалютыСтроки(ТекСтрока.Валюта,
				?(ДокументСсылка.ДатаКурса = '00010101', ДокументСсылка.Дата, ДокументСсылка.ДатаКурса), КэшКурсов);
		Иначе
			ВалютаСтроки = ДокументСсылка.ВалютаДокумента;
			СтруктураКурсаСтроки = Новый Структура("Курс, Кратность",
				ДополнительныеСвойства.КурсДокумента, ДополнительныеСвойства.КратностьДокумента);
		КонецЕсли;
		
		Если ВалютаСтроки <> ДополнительныеСвойства.ВалютаУпрУчета Тогда
			ТекСтрока.СуммаУпр  = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаУпр,
				ВалютаСтроки,                   ДополнительныеСвойства.ВалютаУпрУчета,
				СтруктураКурсаСтроки.Курс,      ДополнительныеСвойства.КурсУпр,
				СтруктураКурсаСтроки.Кратность, ДополнительныеСвойства.КратностьУпр);
			ТекСтрока.СуммаНДСУпр  = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаНДСУпр,
				ВалютаСтроки,                   ДополнительныеСвойства.ВалютаУпрУчета,
				СтруктураКурсаСтроки.Курс,      ДополнительныеСвойства.КурсУпр,
				СтруктураКурсаСтроки.Кратность, ДополнительныеСвойства.КратностьУпр);
		КонецЕсли;
		
		Если ВалютаСтроки <> ДополнительныеСвойства.ВалютаРеглУчета Тогда	
			ТекСтрока.СуммаРегл = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаРегл,
				ВалютаСтроки,                   ДополнительныеСвойства.ВалютаРеглУчета,
				СтруктураКурсаСтроки.Курс,      ДополнительныеСвойства.КурсРегл,
				СтруктураКурсаСтроки.Кратность, ДополнительныеСвойства.КратностьРегл);
			
			ТекСтрока.СуммаНДС 	= уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаНДС,
				ВалютаСтроки,                   ДополнительныеСвойства.ВалютаРеглУчета,
				СтруктураКурсаСтроки.Курс,      ДополнительныеСвойства.КурсРегл,
				СтруктураКурсаСтроки.Кратность, ДополнительныеСвойства.КратностьРегл);
		КонецЕсли;
		
		флРаспределятьПоСцепке = ТекСтрока.СтатьяДоходов.РаспределениеДоходовПоСцепкам;
		СпособРаспределенияСцепки = ТекСтрока.СтатьяДоходов.СпособРаспределенияВнутриСцепки;
		
		// переменные для расчета "последней копейки"
		СуммаРаспределеннаяУпр    = 0;
		СуммаРаспределеннаяРегл   = 0;
		СуммаРаспределеннаяНДС    = 0;
		СуммаРаспределеннаяНДСУпр = 0;
		СуммаРаспределенная       = 0;
		КоличествоРаспределенное  = 0;
		
		СчОбх = 0;
		ОбщКоэф = 0;
		мсвТСПодстановка = Новый Массив();
		
		Если СпособРаспределенияСцепки = Перечисления.уатСпособРаспределенияВнутриСцепки.ПропорциональноГрузоподъемности Тогда 
			ТекКоэф = ТекСтрока.ТС.Модель.Грузоподъемность * КоэфГрузоподъемности;
			ОбщКоэф = ТекСтрока.ТС.Модель.Грузоподъемность * КоэфГрузоподъемности;
		ИначеЕсли СпособРаспределенияСцепки = Перечисления.уатСпособРаспределенияВнутриСцепки.ПропорциональноОбъемуКузова Тогда 
			ТекКоэф = ТекСтрока.ТС.Модель.ОбъемКузова * КоэфОбъемаКузова;
			ОбщКоэф = ТекСтрока.ТС.Модель.ОбъемКузова * КоэфОбъемаКузова;
		ИначеЕсли СпособРаспределенияСцепки = Перечисления.уатСпособРаспределенияВнутриСцепки.ПропорциональноКоличествуУпаковок Тогда 
			ТекКоэф = ТекСтрока.ТС.Модель.МаксимальноеКоличествоУпаковок;
			ОбщКоэф = ТекСтрока.ТС.Модель.МаксимальноеКоличествоУпаковок;
		Иначе 
			ТекКоэф = 0;
		КонецЕсли;
		мсвТСПодстановка.Добавить(Новый Структура("ТС, Коэф", ТекСтрока.ТС, ТекКоэф));
		
		Если флРаспределятьПоСцепке Тогда 
			Если ЗначениеЗаполнено(ТекСтрока.Прицеп1) Тогда 
				СчОбх = СчОбх + 1;
				
				Если СпособРаспределенияСцепки = Перечисления.уатСпособРаспределенияВнутриСцепки.ПропорциональноГрузоподъемности Тогда 
					ТекКоэф = ТекСтрока.Прицеп1.Модель.Грузоподъемность * КоэфГрузоподъемности;
					ОбщКоэф = ОбщКоэф + ТекСтрока.Прицеп1.Модель.Грузоподъемность * КоэфГрузоподъемности;
				ИначеЕсли СпособРаспределенияСцепки = Перечисления.уатСпособРаспределенияВнутриСцепки.ПропорциональноОбъемуКузова Тогда 
					ТекКоэф = ТекСтрока.Прицеп1.Модель.ОбъемКузова * КоэфОбъемаКузова;
					ОбщКоэф = ОбщКоэф + ТекСтрока.Прицеп1.Модель.ОбъемКузова * КоэфОбъемаКузова;
				ИначеЕсли СпособРаспределенияСцепки = Перечисления.уатСпособРаспределенияВнутриСцепки.ПропорциональноКоличествуУпаковок Тогда 
					ТекКоэф = ТекСтрока.Прицеп1.Модель.МаксимальноеКоличествоУпаковок;
					ОбщКоэф = ОбщКоэф + ТекСтрока.Прицеп1.Модель.МаксимальноеКоличествоУпаковок;
				Иначе 
					ТекКоэф = 0;
				КонецЕсли;
				мсвТСПодстановка.Добавить(Новый Структура("ТС, Коэф", ТекСтрока.Прицеп1, ТекКоэф));
			КонецЕсли;
			Если ЗначениеЗаполнено(ТекСтрока.Прицеп2) Тогда 
				СчОбх = СчОбх + 1;
				
				Если СпособРаспределенияСцепки = Перечисления.уатСпособРаспределенияВнутриСцепки.ПропорциональноГрузоподъемности Тогда 
					ТекКоэф = ТекСтрока.Прицеп2.Модель.Грузоподъемность * КоэфГрузоподъемности;
					ОбщКоэф = ОбщКоэф + ТекСтрока.Прицеп2.Модель.Грузоподъемность * КоэфГрузоподъемности;
				ИначеЕсли СпособРаспределенияСцепки = Перечисления.уатСпособРаспределенияВнутриСцепки.ПропорциональноОбъемуКузова Тогда 
					ТекКоэф = ТекСтрока.Прицеп2.Модель.ОбъемКузова * КоэфОбъемаКузова;
					ОбщКоэф = ОбщКоэф + ТекСтрока.Прицеп2.Модель.ОбъемКузова * КоэфОбъемаКузова;
				ИначеЕсли СпособРаспределенияСцепки = Перечисления.уатСпособРаспределенияВнутриСцепки.ПропорциональноКоличествуУпаковок Тогда 
					ТекКоэф = ТекСтрока.Прицеп2.Модель.МаксимальноеКоличествоУпаковок;
					ОбщКоэф = ОбщКоэф + ТекСтрока.Прицеп2.Модель.МаксимальноеКоличествоУпаковок;
				Иначе 
					ТекКоэф = 0;
				КонецЕсли;
				мсвТСПодстановка.Добавить(Новый Структура("ТС, Коэф", ТекСтрока.Прицеп2, ТекКоэф));
			КонецЕсли;
		КонецЕсли;
		
		Для ИндЭлем = 0 По СчОбх Цикл 
			НоваяСтрока = ТаблицаДвижения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			НоваяСтрока.ТС = мсвТСПодстановка[ИндЭлем].ТС;
			
			НоваяСтрока.СуммаУпр = ?(ОбщКоэф = 0, ТекСтрока.СуммаУпр, ТекСтрока.СуммаУпр * мсвТСПодстановка[ИндЭлем].Коэф / ОбщКоэф);
			СуммаРаспределеннаяУпр = СуммаРаспределеннаяУпр + НоваяСтрока.СуммаУпр;
			
			НоваяСтрока.СуммаРегл = ?(ОбщКоэф = 0, ТекСтрока.СуммаРегл, ТекСтрока.СуммаРегл * мсвТСПодстановка[ИндЭлем].Коэф / ОбщКоэф);
			СуммаРаспределеннаяРегл = СуммаРаспределеннаяРегл + НоваяСтрока.СуммаРегл;
			
			НоваяСтрока.СуммаНДС = ?(ОбщКоэф = 0, ТекСтрока.СуммаНДС, ТекСтрока.СуммаНДС * мсвТСПодстановка[ИндЭлем].Коэф / ОбщКоэф);
			СуммаРаспределеннаяНДС = СуммаРаспределеннаяНДС + НоваяСтрока.СуммаНДС;
			
			НоваяСтрока.СуммаНДСУпр = ?(ОбщКоэф = 0, ТекСтрока.СуммаНДСУпр, ТекСтрока.СуммаНДСУпр * мсвТСПодстановка[ИндЭлем].Коэф / ОбщКоэф);
			СуммаРаспределеннаяНДСУпр = СуммаРаспределеннаяНДСУпр + НоваяСтрока.СуммаНДСУпр;
			
			НоваяСтрока.Сумма = ?(ОбщКоэф = 0, ТекСтрока.Сумма, ТекСтрока.Сумма * мсвТСПодстановка[ИндЭлем].Коэф / ОбщКоэф);
			СуммаРаспределенная = СуммаРаспределенная + НоваяСтрока.Сумма;
			
			НоваяСтрока.Количество = ?(ОбщКоэф = 0, ТекСтрока.Количество, ТекСтрока.Количество * мсвТСПодстановка[ИндЭлем].Коэф / ОбщКоэф);
			КоличествоРаспределенное = КоличествоРаспределенное + НоваяСтрока.Количество;
		КонецЦикла;
		
		// учет "последней копейки"
		НоваяСтрока.СуммаУпр    = НоваяСтрока.СуммаУпр + (ТекСтрока.СуммаУпр - СуммаРаспределеннаяУпр);
		НоваяСтрока.СуммаРегл   = НоваяСтрока.СуммаРегл + (ТекСтрока.СуммаРегл - СуммаРаспределеннаяРегл);
		НоваяСтрока.СуммаНДС    = НоваяСтрока.СуммаНДС + (ТекСтрока.СуммаНДС - СуммаРаспределеннаяНДС);
		НоваяСтрока.СуммаНДСУпр = НоваяСтрока.СуммаНДСУпр + (ТекСтрока.СуммаНДСУпр - СуммаРаспределеннаяНДСУпр);
		НоваяСтрока.Сумма       = НоваяСтрока.Сумма + (ТекСтрока.Сумма - СуммаРаспределенная);
		НоваяСтрока.Количество  = НоваяСтрока.Количество + (ТекСтрока.Количество - КоличествоРаспределенное);
	КонецЦикла;
	
	уатРасчетыПоТарифам_уэ.РаспределитьДоходыРасходыМеждуЗаказами(ТаблицаДвижения, ДополнительныеСвойства.СообщенияОшибкиРаспределенияПоЗаказам);
		
	// управляемая блокировка
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.уатДоходы");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = ТаблицаДвижения;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Контрагент",  "Контрагент");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Организация", "Организация");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ТС",          "ТС");
	Блокировка.Заблокировать();
	
	ДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДоходы", ТаблицаДвижения);
	
КонецПроцедуры

Процедура СформироватьРасходы(ДокументСсылка, ДополнительныеСвойства)
	
	Если Константы.уатЕдиницаИзмеренияВеса.Получить() = Перечисления.уатЕдиницыИзмеренияВеса.Килограмм Тогда 
		КоэфГрузоподъемности = 1000;
	Иначе 
		КоэфГрузоподъемности = 1;
	КонецЕсли;
	
	Если Константы.уатЕдиницаИзмеренияОбъема.Получить() = Перечисления.уатЕдиницыИзмеренияОбъема.Литр Тогда 
		КоэфОбъемаКузова = 1000;
	Иначе 
		КоэфОбъемаКузова = 1;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	&ДатаЗакрытия КАК Период,
	|	уатМаршрутныйЛистПолучаемыеУслуги.Ссылка КАК Регистратор,
	|	уатМаршрутныйЛистПолучаемыеУслуги.Ссылка.Организация КАК Организация,
	|	уатМаршрутныйЛистПолучаемыеУслуги.Ссылка.Подразделение КАК Подразделение,
	|	уатМаршрутныйЛистПолучаемыеУслуги.Ссылка.ТС КАК ТС,
	|	уатМаршрутныйЛистПолучаемыеУслуги.Ссылка.Прицеп1,
	|	уатМаршрутныйЛистПолучаемыеУслуги.Ссылка.Прицеп2,
	|	уатМаршрутныйЛистПолучаемыеУслуги.ЗаказНаТС КАК Заказ,
	|	уатМаршрутныйЛистПолучаемыеУслуги.Номенклатура КАК Затрата,
	|	уатМаршрутныйЛистПолучаемыеУслуги.Номенклатура КАК НоменклатураУслуги,
	|	уатМаршрутныйЛистПолучаемыеУслуги.Контрагент КАК Контрагент,
	|	уатМаршрутныйЛистПолучаемыеУслуги.Договор КАК Договор,
	|	ВЫБОР
	|		КОГДА уатМаршрутныйЛистПолучаемыеУслуги.Тариф.МетодРасчета = ЗНАЧЕНИЕ(Перечисление.уатМетодыРасчетаПоТарифам.ПроцентомОтСуммы)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.Наценка)
	|		ИНАЧЕ уатМаршрутныйЛистПолучаемыеУслуги.Тариф.ПараметрВыработки
	|	КОНЕЦ КАК ПараметрВыработки,
	|	уатМаршрутныйЛистПолучаемыеУслуги.ЗаказНаТС.ОбъектСтроительства КАК ОбъектСтроительства,
	|	уатМаршрутныйЛистПолучаемыеУслуги.ЗаказНаТС.ВидПеревозки КАК ВидПеревозки,
	|	уатМаршрутныйЛистПолучаемыеУслуги.ЗаказНаТС.НаправлениеПеревозки КАК НаправлениеПеревозки,
	|	уатМаршрутныйЛистПолучаемыеУслуги.ЗаказНаТС.Маршрут КАК Маршрут,
	|	уатМаршрутныйЛистПолучаемыеУслуги.ЗаказНаТС.Ответственный КАК Менеджер,	
	|	уатМаршрутныйЛистПолучаемыеУслуги.СтатьяРасходов КАК СтатьяРасходов,
	|	уатМаршрутныйЛистПолучаемыеУслуги.Валюта КАК Валюта,
	|	СУММА(уатМаршрутныйЛистПолучаемыеУслуги.Количество) КАК Количество,
	|	СУММА(ВЫБОР
	|			КОГДА уатМаршрутныйЛистПолучаемыеУслуги.УчитыватьНДС
	|					И НЕ уатМаршрутныйЛистПолучаемыеУслуги.СуммаВключаетНДС
	|				ТОГДА уатМаршрутныйЛистПолучаемыеУслуги.Сумма + уатМаршрутныйЛистПолучаемыеУслуги.СуммаНДС
	|			ИНАЧЕ уатМаршрутныйЛистПолучаемыеУслуги.Сумма
	|		КОНЕЦ) КАК СуммаРегл,
	|	СУММА(ВЫБОР
	|			КОГДА уатМаршрутныйЛистПолучаемыеУслуги.УчитыватьНДС
	|					И НЕ уатМаршрутныйЛистПолучаемыеУслуги.СуммаВключаетНДС
	|				ТОГДА уатМаршрутныйЛистПолучаемыеУслуги.Сумма + уатМаршрутныйЛистПолучаемыеУслуги.СуммаНДС
	|			ИНАЧЕ уатМаршрутныйЛистПолучаемыеУслуги.Сумма
	|		КОНЕЦ) КАК СуммаУпр,
	|	СУММА(уатМаршрутныйЛистПолучаемыеУслуги.СуммаНДС) КАК СуммаНДС,
	|	СУММА(уатМаршрутныйЛистПолучаемыеУслуги.СуммаНДС) КАК СуммаНДСУпр
	|ИЗ
	|	Документ.уатМаршрутныйЛист.Расходы КАК уатМаршрутныйЛистПолучаемыеУслуги
	|ГДЕ
	|	уатМаршрутныйЛистПолучаемыеУслуги.Ссылка = &Ссылка
	|	И уатМаршрутныйЛистПолучаемыеУслуги.Количество <> 0
	|	И уатМаршрутныйЛистПолучаемыеУслуги.Сумма <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	уатМаршрутныйЛистПолучаемыеУслуги.Ссылка,
	|	уатМаршрутныйЛистПолучаемыеУслуги.ЗаказНаТС,
	|	уатМаршрутныйЛистПолучаемыеУслуги.Номенклатура,
	|	уатМаршрутныйЛистПолучаемыеУслуги.СтатьяРасходов,
	|	уатМаршрутныйЛистПолучаемыеУслуги.Валюта,
	|	уатМаршрутныйЛистПолучаемыеУслуги.Контрагент,
	|	уатМаршрутныйЛистПолучаемыеУслуги.Договор,
	|	ВЫБОР
	|		КОГДА уатМаршрутныйЛистПолучаемыеУслуги.Тариф.МетодРасчета = ЗНАЧЕНИЕ(Перечисление.уатМетодыРасчетаПоТарифам.ПроцентомОтСуммы)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.Наценка)
	|		ИНАЧЕ уатМаршрутныйЛистПолучаемыеУслуги.Тариф.ПараметрВыработки
	|	КОНЕЦ,
	|	уатМаршрутныйЛистПолучаемыеУслуги.Номенклатура");
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ДатаЗакрытия",
		?(ДокументСсылка.ДатаЗакрытия = '00010101', ДокументСсылка.Дата, ДокументСсылка.ДатаЗакрытия));
	
	ТаблицаРасходы = Запрос.Выполнить().Выгрузить();
	
	ТаблицаДвижения = ТаблицаРасходы.Скопировать();
	ТаблицаДвижения.Очистить();
	
	КэшКурсов = Неопределено;
	
	Для Каждого ТекСтрока Из ТаблицаРасходы Цикл
		ВалютаСтроки = ТекСтрока.Валюта;
		
		Если ЗначениеЗаполнено(ТекСтрока.Валюта) Тогда
			ВалютаСтроки = ТекСтрока.Валюта;
			СтруктураКурсаСтроки = СтруктураКурсаВалютыСтроки(ТекСтрока.Валюта,
				?(ДокументСсылка.ДатаКурса = '00010101', ДокументСсылка.Дата, ДокументСсылка.ДатаКурса), КэшКурсов);
		Иначе
			ВалютаСтроки = ДокументСсылка.ВалютаДокумента;
			СтруктураКурсаСтроки = Новый Структура("Курс, Кратность",
				ДополнительныеСвойства.КурсДокумента, ДополнительныеСвойства.КратностьДокумента);
		КонецЕсли;
		
		Если ВалютаСтроки <> ДополнительныеСвойства.ВалютаУпрУчета Тогда
			ТекСтрока.СуммаУпр  = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаУпр,
				ВалютаСтроки,                   ДополнительныеСвойства.ВалютаУпрУчета,
				СтруктураКурсаСтроки.Курс,      ДополнительныеСвойства.КурсУпр,
				СтруктураКурсаСтроки.Кратность, ДополнительныеСвойства.КратностьУпр);
			ТекСтрока.СуммаНДСУпр  = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаНДСУпр,
				ВалютаСтроки,                   ДополнительныеСвойства.ВалютаУпрУчета,
				СтруктураКурсаСтроки.Курс,      ДополнительныеСвойства.КурсУпр,
				СтруктураКурсаСтроки.Кратность, ДополнительныеСвойства.КратностьУпр);
		КонецЕсли;
		
		Если ВалютаСтроки <> ДополнительныеСвойства.ВалютаРеглУчета Тогда
			ТекСтрока.СуммаРегл = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаРегл,
				ВалютаСтроки,                   ДополнительныеСвойства.ВалютаРеглУчета,
				СтруктураКурсаСтроки.Курс,      ДополнительныеСвойства.КурсРегл,
				СтруктураКурсаСтроки.Кратность, ДополнительныеСвойства.КратностьРегл);
			ТекСтрока.СуммаНДС 	= уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаНДС,
				ВалютаСтроки,                   ДополнительныеСвойства.ВалютаРеглУчета,
				СтруктураКурсаСтроки.Курс,      ДополнительныеСвойства.КурсРегл,
				СтруктураКурсаСтроки.Кратность, ДополнительныеСвойства.КратностьРегл);
		КонецЕсли;
		
		флРаспределятьПоСцепке = ТекСтрока.СтатьяРасходов.РаспределениеРасходовПоСцепкам;
		СпособРаспределенияСцепки = ТекСтрока.СтатьяРасходов.СпособРаспределенияВнутриСцепки;
		
		// переменные для расчета "последней копейки"
		СуммаРаспределеннаяУпр    = 0;
		СуммаРаспределеннаяРегл   = 0;
		СуммаРаспределеннаяНДС    = 0;
		СуммаРаспределеннаяНДСУпр = 0;
		КоличествоРаспределенное  = 0;
		
		СчОбх = 0;
		ОбщКоэф = 0;
		мсвТСПодстановка = Новый Массив();
		
		Если СпособРаспределенияСцепки = Перечисления.уатСпособРаспределенияВнутриСцепки.ПропорциональноГрузоподъемности Тогда 
			ТекКоэф = ТекСтрока.ТС.Модель.Грузоподъемность * КоэфГрузоподъемности;
			ОбщКоэф = ТекСтрока.ТС.Модель.Грузоподъемность * КоэфГрузоподъемности;
		ИначеЕсли СпособРаспределенияСцепки = Перечисления.уатСпособРаспределенияВнутриСцепки.ПропорциональноОбъемуКузова Тогда 
			ТекКоэф = ТекСтрока.ТС.Модель.ОбъемКузова * КоэфОбъемаКузова;
			ОбщКоэф = ТекСтрока.ТС.Модель.ОбъемКузова * КоэфОбъемаКузова;
		ИначеЕсли СпособРаспределенияСцепки = Перечисления.уатСпособРаспределенияВнутриСцепки.ПропорциональноКоличествуУпаковок Тогда 
			ТекКоэф = ТекСтрока.ТС.Модель.МаксимальноеКоличествоУпаковок;
			ОбщКоэф = ТекСтрока.ТС.Модель.МаксимальноеКоличествоУпаковок;
		Иначе 
			ТекКоэф = 0;
		КонецЕсли;
		мсвТСПодстановка.Добавить(Новый Структура("ТС, Коэф", ТекСтрока.ТС, ТекКоэф));
		
		Если флРаспределятьПоСцепке Тогда 
			Если ЗначениеЗаполнено(ТекСтрока.Прицеп1) Тогда 
				СчОбх = СчОбх + 1;
				
				Если СпособРаспределенияСцепки = Перечисления.уатСпособРаспределенияВнутриСцепки.ПропорциональноГрузоподъемности Тогда 
					ТекКоэф = ТекСтрока.Прицеп1.Модель.Грузоподъемность * КоэфГрузоподъемности;
					ОбщКоэф = ОбщКоэф + ТекСтрока.Прицеп1.Модель.Грузоподъемность * КоэфГрузоподъемности;
				ИначеЕсли СпособРаспределенияСцепки = Перечисления.уатСпособРаспределенияВнутриСцепки.ПропорциональноОбъемуКузова Тогда 
					ТекКоэф = ТекСтрока.Прицеп1.Модель.ОбъемКузова * КоэфОбъемаКузова;
					ОбщКоэф = ОбщКоэф + ТекСтрока.Прицеп1.Модель.ОбъемКузова * КоэфОбъемаКузова;
				ИначеЕсли СпособРаспределенияСцепки = Перечисления.уатСпособРаспределенияВнутриСцепки.ПропорциональноКоличествуУпаковок Тогда 
					ТекКоэф = ТекСтрока.Прицеп1.Модель.МаксимальноеКоличествоУпаковок;
					ОбщКоэф = ОбщКоэф + ТекСтрока.Прицеп1.Модель.МаксимальноеКоличествоУпаковок;
				Иначе 
					ТекКоэф = 0;
				КонецЕсли;
				мсвТСПодстановка.Добавить(Новый Структура("ТС, Коэф", ТекСтрока.Прицеп1, ТекКоэф));
			КонецЕсли;
			Если ЗначениеЗаполнено(ТекСтрока.Прицеп2) Тогда 
				СчОбх = СчОбх + 1;
				
				Если СпособРаспределенияСцепки = Перечисления.уатСпособРаспределенияВнутриСцепки.ПропорциональноГрузоподъемности Тогда 
					ТекКоэф = ТекСтрока.Прицеп2.Модель.Грузоподъемность * КоэфГрузоподъемности;
					ОбщКоэф = ОбщКоэф + ТекСтрока.Прицеп2.Модель.Грузоподъемность * КоэфГрузоподъемности;
				ИначеЕсли СпособРаспределенияСцепки = Перечисления.уатСпособРаспределенияВнутриСцепки.ПропорциональноОбъемуКузова Тогда 
					ТекКоэф = ТекСтрока.Прицеп2.Модель.ОбъемКузова * КоэфОбъемаКузова;
					ОбщКоэф = ОбщКоэф + ТекСтрока.Прицеп2.Модель.ОбъемКузова * КоэфОбъемаКузова;
				ИначеЕсли СпособРаспределенияСцепки = Перечисления.уатСпособРаспределенияВнутриСцепки.ПропорциональноКоличествуУпаковок Тогда 
					ТекКоэф = ТекСтрока.Прицеп2.Модель.МаксимальноеКоличествоУпаковок;
					ОбщКоэф = ОбщКоэф + ТекСтрока.Прицеп2.Модель.МаксимальноеКоличествоУпаковок;
				Иначе 
					ТекКоэф = 0;
				КонецЕсли;
				мсвТСПодстановка.Добавить(Новый Структура("ТС, Коэф", ТекСтрока.Прицеп2, ТекКоэф));
			КонецЕсли;
		КонецЕсли;
		
		Для ИндЭлем = 0 По СчОбх Цикл 
			НоваяСтрока = ТаблицаДвижения.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			НоваяСтрока.ТС = мсвТСПодстановка[ИндЭлем].ТС;
			
			НоваяСтрока.СуммаУпр = ?(ОбщКоэф = 0, ТекСтрока.СуммаУпр, ТекСтрока.СуммаУпр * мсвТСПодстановка[ИндЭлем].Коэф / ОбщКоэф);
			СуммаРаспределеннаяУпр = СуммаРаспределеннаяУпр + НоваяСтрока.СуммаУпр;
			
			НоваяСтрока.СуммаРегл = ?(ОбщКоэф = 0, ТекСтрока.СуммаРегл, ТекСтрока.СуммаРегл * мсвТСПодстановка[ИндЭлем].Коэф / ОбщКоэф);
			СуммаРаспределеннаяРегл = СуммаРаспределеннаяРегл + НоваяСтрока.СуммаРегл;
			
			НоваяСтрока.СуммаНДС = ?(ОбщКоэф = 0, ТекСтрока.СуммаНДС, ТекСтрока.СуммаНДС * мсвТСПодстановка[ИндЭлем].Коэф / ОбщКоэф);
			СуммаРаспределеннаяНДС = СуммаРаспределеннаяНДС + НоваяСтрока.СуммаНДС;
			
			НоваяСтрока.СуммаНДСУпр = ?(ОбщКоэф = 0, ТекСтрока.СуммаНДСУпр, ТекСтрока.СуммаНДСУпр * мсвТСПодстановка[ИндЭлем].Коэф / ОбщКоэф);
			СуммаРаспределеннаяНДСУпр = СуммаРаспределеннаяНДСУпр + НоваяСтрока.СуммаНДСУпр;
			
			НоваяСтрока.Количество = ?(ОбщКоэф = 0, ТекСтрока.Количество, ТекСтрока.Количество * мсвТСПодстановка[ИндЭлем].Коэф / ОбщКоэф);
			КоличествоРаспределенное = КоличествоРаспределенное + НоваяСтрока.Количество;
		КонецЦикла;
		
		// учет "последней копейки"
		НоваяСтрока.СуммаУпр    = НоваяСтрока.СуммаУпр + (ТекСтрока.СуммаУпр - СуммаРаспределеннаяУпр);
		НоваяСтрока.СуммаРегл   = НоваяСтрока.СуммаРегл + (ТекСтрока.СуммаРегл - СуммаРаспределеннаяРегл);
		НоваяСтрока.СуммаНДС    = НоваяСтрока.СуммаНДС + (ТекСтрока.СуммаНДС - СуммаРаспределеннаяНДС);
		НоваяСтрока.СуммаНДСУпр = НоваяСтрока.СуммаНДСУпр + (ТекСтрока.СуммаНДСУпр - СуммаРаспределеннаяНДСУпр);
		НоваяСтрока.Количество  = НоваяСтрока.Количество + (ТекСтрока.Количество - КоличествоРаспределенное);
	КонецЦикла;
	
	уатОбщегоНазначения_уэ.ПодставитьСчетЗатратВТаблицуЗатрат(ТаблицаДвижения,
		ДокументСсылка.Организация, ДокументСсылка.ТС, ДокументСсылка.Подразделение);
		
	уатРасчетыПоТарифам_уэ.РаспределитьДоходыРасходыМеждуЗаказами(ТаблицаДвижения, ДополнительныеСвойства.СообщенияОшибкиРаспределенияПоЗаказам);
		
	// управляемая блокировка
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.уатРасходы");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = ТаблицаДвижения;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Заказ",          "Заказ");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Контрагент",     "Контрагент");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Организация",    "Организация");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("СтатьяРасходов", "СтатьяРасходов");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ТС",             "ТС");
	Блокировка.Заблокировать();
	
	ДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРасходы", ТаблицаДвижения);
	
КонецПроцедуры

Процедура СформироватьПлановыеУслуги(ДокументСсылка, ДополнительныеСвойства)
	
	Если ПолучитьФункциональнуюОпцию("уатИспользоватьПлановыеУслуги_уэ") = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	&ДатаЗакрытия КАК Период,
	|	уатМаршрутныйЛистПолучаемыеУслуги.Ссылка КАК Регистратор,
	|	уатМаршрутныйЛистПолучаемыеУслуги.Ссылка.Организация КАК Организация,
	|	уатМаршрутныйЛистПолучаемыеУслуги.Ссылка.ТС КАК ТС,
	|	ЗНАЧЕНИЕ(Перечисление.уатПолучателиУслуг.НашаОрганизация) КАК ПолучательУслуг,
	|	уатМаршрутныйЛистПолучаемыеУслуги.ЗаказНаТС КАК ЗаказНаТС,
	|	уатМаршрутныйЛистПолучаемыеУслуги.Номенклатура КАК Номенклатура,
	|	уатМаршрутныйЛистПолучаемыеУслуги.Договор КАК ДоговорКонтрагента,
	|	ВЫБОР
	|		КОГДА уатМаршрутныйЛистПолучаемыеУслуги.Тариф.МетодРасчета = ЗНАЧЕНИЕ(Перечисление.уатМетодыРасчетаПоТарифам.ПроцентомОтСуммы)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.Наценка)
	|		ИНАЧЕ уатМаршрутныйЛистПолучаемыеУслуги.Тариф.ПараметрВыработки
	|	КОНЕЦ КАК ПараметрВыработки,
	|	уатМаршрутныйЛистПолучаемыеУслуги.ЗаказНаТС.ОбъектСтроительства КАК ОбъектСтроительства,
	|	уатМаршрутныйЛистПолучаемыеУслуги.ЗаказНаТС.ВидПеревозки КАК ВидПеревозки,
	|	уатМаршрутныйЛистПолучаемыеУслуги.ЗаказНаТС.НаправлениеПеревозки КАК НаправлениеПеревозки,
	|	уатМаршрутныйЛистПолучаемыеУслуги.ЗаказНаТС.Маршрут КАК Маршрут,
	|	уатМаршрутныйЛистПолучаемыеУслуги.СтатьяРасходов КАК СтатьяРасходов,
	|	уатМаршрутныйЛистПолучаемыеУслуги.Валюта КАК Валюта,
	|	уатМаршрутныйЛистПолучаемыеУслуги.СтавкаНДС КАК СтавкаНДС,
	|	СУММА(уатМаршрутныйЛистПолучаемыеУслуги.КоличествоПлан) КАК Количество,
	|	СУММА(ВЫБОР
	|		КОГДА уатМаршрутныйЛистПолучаемыеУслуги.УчитыватьНДС И НЕ уатМаршрутныйЛистПолучаемыеУслуги.СуммаВключаетНДС
	|			ТОГДА (уатМаршрутныйЛистПолучаемыеУслуги.СуммаПлан + уатМаршрутныйЛистПолучаемыеУслуги.СуммаНДСПлан)
	|		ИНАЧЕ уатМаршрутныйЛистПолучаемыеУслуги.СуммаПлан
	|	КОНЕЦ) КАК Сумма,
	|	СУММА(ВЫБОР
	|		КОГДА уатМаршрутныйЛистПолучаемыеУслуги.УчитыватьНДС И НЕ уатМаршрутныйЛистПолучаемыеУслуги.СуммаВключаетНДС
	|			ТОГДА (уатМаршрутныйЛистПолучаемыеУслуги.СуммаПлан + уатМаршрутныйЛистПолучаемыеУслуги.СуммаНДСПлан)
	|		ИНАЧЕ уатМаршрутныйЛистПолучаемыеУслуги.СуммаПлан
	|	КОНЕЦ) КАК СуммаРегл,
	|	СУММА(ВЫБОР
	|		КОГДА уатМаршрутныйЛистПолучаемыеУслуги.УчитыватьНДС И НЕ уатМаршрутныйЛистПолучаемыеУслуги.СуммаВключаетНДС
	|			ТОГДА (уатМаршрутныйЛистПолучаемыеУслуги.СуммаПлан + уатМаршрутныйЛистПолучаемыеУслуги.СуммаНДСПлан)
	|		ИНАЧЕ уатМаршрутныйЛистПолучаемыеУслуги.СуммаПлан
	|	КОНЕЦ) КАК СуммаУпр,
	|	СУММА(уатМаршрутныйЛистПолучаемыеУслуги.СуммаНДСПлан) КАК СуммаНДС,
	|	СУММА(уатМаршрутныйЛистПолучаемыеУслуги.СуммаНДСПлан) КАК СуммаНДСУпр
	|ИЗ
	|	Документ.уатМаршрутныйЛист.Расходы КАК уатМаршрутныйЛистПолучаемыеУслуги	
	|ГДЕ
	|	уатМаршрутныйЛистПолучаемыеУслуги.Ссылка = &Ссылка
	|	И уатМаршрутныйЛистПолучаемыеУслуги.КоличествоПлан <> 0
	|	И уатМаршрутныйЛистПолучаемыеУслуги.СуммаПлан <> 0
	|
	|СГРУППИРОВАТЬ ПО
	|	уатМаршрутныйЛистПолучаемыеУслуги.Ссылка,
	|	уатМаршрутныйЛистПолучаемыеУслуги.ЗаказНаТС,
	|	уатМаршрутныйЛистПолучаемыеУслуги.Номенклатура,
	|	уатМаршрутныйЛистПолучаемыеУслуги.СтатьяРасходов,
	|	уатМаршрутныйЛистПолучаемыеУслуги.Валюта,
	|	уатМаршрутныйЛистПолучаемыеУслуги.СтавкаНДС,
	|	уатМаршрутныйЛистПолучаемыеУслуги.Контрагент,
	|	уатМаршрутныйЛистПолучаемыеУслуги.Договор,
	|	ВЫБОР
	|		КОГДА уатМаршрутныйЛистПолучаемыеУслуги.Тариф.МетодРасчета = ЗНАЧЕНИЕ(Перечисление.уатМетодыРасчетаПоТарифам.ПроцентомОтСуммы)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.Наценка)
	|		ИНАЧЕ уатМаршрутныйЛистПолучаемыеУслуги.Тариф.ПараметрВыработки
	|	КОНЕЦ");
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ДатаЗакрытия",
		?(ДокументСсылка.ДатаЗакрытия = '00010101', ДокументСсылка.Дата, ДокументСсылка.ДатаЗакрытия));
	
	ТаблицаПланУслуги = Запрос.Выполнить().Выгрузить();
	
	КэшКурсов = Неопределено;
	Для Каждого ТекСтрока Из ТаблицаПланУслуги Цикл
		Если ЗначениеЗаполнено(ТекСтрока.Валюта) Тогда
			ВалютаСтроки = ТекСтрока.Валюта;
			СтруктураКурсаСтроки = СтруктураКурсаВалютыСтроки(ТекСтрока.Валюта,
				?(ДокументСсылка.ДатаКурса = '00010101', ДокументСсылка.Дата, ДокументСсылка.ДатаКурса), КэшКурсов);
		Иначе
			ВалютаСтроки = ДокументСсылка.ВалютаДокумента;
			СтруктураКурсаСтроки = Новый Структура("Курс, Кратность",
				ДополнительныеСвойства.КурсДокумента, ДополнительныеСвойства.КратностьДокумента);
		КонецЕсли;
		
		Если ВалютаСтроки <> ДополнительныеСвойства.ВалютаУпрУчета Тогда
			ТекСтрока.СуммаУпр  = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаУпр,
				ВалютаСтроки,                   ДополнительныеСвойства.ВалютаУпрУчета,
				СтруктураКурсаСтроки.Курс,      ДополнительныеСвойства.КурсУпр,
				СтруктураКурсаСтроки.Кратность, ДополнительныеСвойства.КратностьУпр);
			ТекСтрока.СуммаНДСУпр  = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаНДСУпр,
				ВалютаСтроки,                   ДополнительныеСвойства.ВалютаУпрУчета,
				СтруктураКурсаСтроки.Курс,      ДополнительныеСвойства.КурсУпр,
				СтруктураКурсаСтроки.Кратность, ДополнительныеСвойства.КратностьУпр);
		КонецЕсли;
		
		Если ВалютаСтроки <> ДополнительныеСвойства.ВалютаРеглУчета Тогда	
			ТекСтрока.СуммаРегл = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаРегл,
				ВалютаСтроки,                   ДополнительныеСвойства.ВалютаРеглУчета,
				СтруктураКурсаСтроки.Курс,      ДополнительныеСвойства.КурсРегл,
				СтруктураКурсаСтроки.Кратность, ДополнительныеСвойства.КратностьРегл);
			
			ТекСтрока.СуммаНДС 	= уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаНДС,
				ВалютаСтроки,                   ДополнительныеСвойства.ВалютаРеглУчета,
				СтруктураКурсаСтроки.Курс,      ДополнительныеСвойства.КурсРегл,
				СтруктураКурсаСтроки.Кратность, ДополнительныеСвойства.КратностьРегл);
		КонецЕсли;
	КонецЦикла;
	
	уатОбщегоНазначения_уэ.ПодставитьСчетЗатратВТаблицуЗатрат(
		ТаблицаПланУслуги, ДокументСсылка.Организация, ДокументСсылка.ТС, ДокументСсылка.Подразделение);

	уатРасчетыПоТарифам_уэ.РаспределитьДоходыРасходыМеждуЗаказами(ТаблицаПланУслуги, ДополнительныеСвойства.СообщенияОшибкиРаспределенияПоЗаказам);
    	
	// управляемая блокировка
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.уатПлановыеУслуги_уэ");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = ТаблицаПланУслуги;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ДоговорКонтрагента", "ДоговорКонтрагента");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Организация",        "Организация");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ТС",                 "ТС");
	Блокировка.Заблокировать();
	
	ДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПлановыеУслуги", ТаблицаПланУслуги);
	
КонецПроцедуры

Процедура СформироватьПредоставленныеУслуги(ДокументСсылка, ДополнительныеСвойства)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	&ДатаЗакрытия КАК Период,
	|	уатМаршрутныйЛистОказываемыеУслуги.Ссылка КАК Регистратор,
	|	ЗНАЧЕНИЕ(Перечисление.уатПолучателиУслуг.Контрагент) КАК ПолучательУслуг,
	|	уатМаршрутныйЛистОказываемыеУслуги.Ссылка.Организация КАК Организация,
	|	уатМаршрутныйЛистОказываемыеУслуги.ЗаказНаТС.ОбъектСтроительства КАК ОбъектСтроительства,
	|	уатМаршрутныйЛистОказываемыеУслуги.ЗаказНаТС.Маршрут КАК Маршрут,
	|	уатМаршрутныйЛистОказываемыеУслуги.ЗаказНаТС.ВидПеревозки КАК ВидПеревозки,
	|	уатМаршрутныйЛистОказываемыеУслуги.ЗаказНаТС.НаправлениеПеревозки КАК НаправлениеПеревозки,
	|	уатМаршрутныйЛистОказываемыеУслуги.СтатьяДоходов КАК Статья,
	|	ВЫБОР
	|		КОГДА уатМаршрутныйЛистОказываемыеУслуги.Тариф.МетодРасчета = ЗНАЧЕНИЕ(Перечисление.уатМетодыРасчетаПоТарифам.ПроцентомОтСуммы)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.Наценка)
	|		ИНАЧЕ уатМаршрутныйЛистОказываемыеУслуги.Тариф.ПараметрВыработки
	|	КОНЕЦ КАК ПараметрВыработки,
	|	уатМаршрутныйЛистОказываемыеУслуги.Ссылка.ТС КАК ТС,
	|	уатМаршрутныйЛистОказываемыеУслуги.ЗаказНаТС.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	уатМаршрутныйЛистОказываемыеУслуги.Номенклатура КАК Номенклатура,
	|	уатМаршрутныйЛистОказываемыеУслуги.Содержание КАК Содержание,
	|	уатМаршрутныйЛистОказываемыеУслуги.Количество КАК Количество,
	|	уатМаршрутныйЛистОказываемыеУслуги.Сумма + ВЫБОР
	|		КОГДА уатМаршрутныйЛистОказываемыеУслуги.УчитыватьНДС
	|				И НЕ уатМаршрутныйЛистОказываемыеУслуги.СуммаВключаетНДС
	|			ТОГДА уатМаршрутныйЛистОказываемыеУслуги.СуммаНДС
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма,
	|	уатМаршрутныйЛистОказываемыеУслуги.Сумма + ВЫБОР
	|		КОГДА уатМаршрутныйЛистОказываемыеУслуги.УчитыватьНДС
	|				И НЕ уатМаршрутныйЛистОказываемыеУслуги.СуммаВключаетНДС
	|			ТОГДА уатМаршрутныйЛистОказываемыеУслуги.СуммаНДС
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаРегл,
	|	уатМаршрутныйЛистОказываемыеУслуги.СтавкаНДС КАК СтавкаНДС,
	|	уатМаршрутныйЛистОказываемыеУслуги.СуммаНДС КАК СуммаНДС,
	|	уатМаршрутныйЛистОказываемыеУслуги.ЗаказНаТС КАК ЗаказНаТС,
	|	НЕОПРЕДЕЛЕНО КАК Заказперевозчику,
	|	уатМаршрутныйЛистОказываемыеУслуги.Валюта КАК Валюта,
	|	уатМаршрутныйЛистОказываемыеУслуги.УчитыватьНДС КАК УчитыватьНДС,
	|	уатМаршрутныйЛистОказываемыеУслуги.СуммаВключаетНДС КАК СуммаВключаетНДС
	|ИЗ
	|	Документ.уатМаршрутныйЛист.Доходы КАК уатМаршрутныйЛистОказываемыеУслуги
	|ГДЕ
	|	уатМаршрутныйЛистОказываемыеУслуги.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&ДатаЗакрытия,
	|	уатМаршрутныйЛистПолучаемыеУслуги.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.уатПолучателиУслуг.НашаОрганизация),
	|	уатМаршрутныйЛистПолучаемыеУслуги.Ссылка.Организация,
	|	уатМаршрутныйЛистПолучаемыеУслуги.ЗаказНаТС.ОбъектСтроительства,
	|	уатМаршрутныйЛистПолучаемыеУслуги.ЗаказНаТС.Маршрут,
	|	уатМаршрутныйЛистПолучаемыеУслуги.ЗаказНаТС.ВидПеревозки,
	|	уатМаршрутныйЛистПолучаемыеУслуги.ЗаказНаТС.НаправлениеПеревозки,
	|	уатМаршрутныйЛистПолучаемыеУслуги.СтатьяРасходов,
	|	ВЫБОР
	|		КОГДА уатМаршрутныйЛистПолучаемыеУслуги.Тариф.МетодРасчета = ЗНАЧЕНИЕ(Перечисление.уатМетодыРасчетаПоТарифам.ПроцентомОтСуммы)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.Наценка)
	|		ИНАЧЕ уатМаршрутныйЛистПолучаемыеУслуги.Тариф.ПараметрВыработки
	|	КОНЕЦ КАК ПараметрВыработки,
	|	уатМаршрутныйЛистПолучаемыеУслуги.Ссылка.ТС,
	|	уатМаршрутныйЛистПолучаемыеУслуги.Договор,
	|	уатМаршрутныйЛистПолучаемыеУслуги.Номенклатура,
	|	уатМаршрутныйЛистПолучаемыеУслуги.Содержание,
	|	уатМаршрутныйЛистПолучаемыеУслуги.Количество,
	|	уатМаршрутныйЛистПолучаемыеУслуги.Сумма + ВЫБОР
	|		КОГДА уатМаршрутныйЛистПолучаемыеУслуги.УчитыватьНДС
	|				И НЕ уатМаршрутныйЛистПолучаемыеУслуги.СуммаВключаетНДС
	|			ТОГДА уатМаршрутныйЛистПолучаемыеУслуги.СуммаНДС
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	уатМаршрутныйЛистПолучаемыеУслуги.Сумма + ВЫБОР
	|		КОГДА уатМаршрутныйЛистПолучаемыеУслуги.УчитыватьНДС
	|				И НЕ уатМаршрутныйЛистПолучаемыеУслуги.СуммаВключаетНДС
	|			ТОГДА уатМаршрутныйЛистПолучаемыеУслуги.СуммаНДС
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	уатМаршрутныйЛистПолучаемыеУслуги.СтавкаНДС,
	|	уатМаршрутныйЛистПолучаемыеУслуги.СуммаНДС,
	|	уатМаршрутныйЛистПолучаемыеУслуги.ЗаказНаТС,
	|	уатМаршрутныйЛистПолучаемыеУслуги.ЗаказПеревозчику,
	|	уатМаршрутныйЛистПолучаемыеУслуги.Валюта,
	|	уатМаршрутныйЛистПолучаемыеУслуги.УчитыватьНДС,
	|	уатМаршрутныйЛистПолучаемыеУслуги.СуммаВключаетНДС
	|ИЗ
	|	Документ.уатМаршрутныйЛист.Расходы КАК уатМаршрутныйЛистПолучаемыеУслуги
	|ГДЕ
	|	уатМаршрутныйЛистПолучаемыеУслуги.Ссылка = &Ссылка
	|	И уатМаршрутныйЛистПолучаемыеУслуги.Договор <> ЗНАЧЕНИЕ(Справочник.ДоговорыКонтрагентов.ПустаяСсылка)");
	
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ДатаЗакрытия",
		?(ДокументСсылка.ДатаЗакрытия = '00010101', ДокументСсылка.Дата, ДокументСсылка.ДатаЗакрытия));
	Запрос.УстановитьПараметр("ВалютаРегл", ДополнительныеСвойства.ВалютаРеглУчета);
	ТаблицаДвижений = Запрос.Выполнить().Выгрузить();
	
	КэшКурсов = Неопределено;
	Для каждого ТекСтрока ИЗ ТаблицаДвижений Цикл
		ВалютаСтроки = ТекСтрока.Валюта;
		СтруктураКурсаСтроки = СтруктураКурсаВалютыСтроки(ТекСтрока.Валюта,
			?(ДокументСсылка.ДатаКурса = '00010101', ДокументСсылка.Дата, ДокументСсылка.ДатаКурса), КэшКурсов);
		
		Если ВалютаСтроки <> ДополнительныеСвойства.ВалютаРеглУчета Тогда
			ТекСтрока.СуммаРегл = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаРегл,
				ВалютаСтроки,                   ДополнительныеСвойства.ВалютаРеглУчета,
				СтруктураКурсаСтроки.Курс,      ДополнительныеСвойства.КурсРегл,
				СтруктураКурсаСтроки.Кратность, ДополнительныеСвойства.КратностьРегл);
			ТекСтрока.СуммаНДС 	= уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаНДС,
				ВалютаСтроки,                   ДополнительныеСвойства.ВалютаРеглУчета,
				СтруктураКурсаСтроки.Курс,      ДополнительныеСвойства.КурсРегл,
				СтруктураКурсаСтроки.Кратность, ДополнительныеСвойства.КратностьРегл);
		КонецЕсли;
	КонецЦикла;
	
	уатРасчетыПоТарифам_уэ.РаспределитьДоходыРасходыМеждуЗаказами(ТаблицаДвижений, ДополнительныеСвойства.СообщенияОшибкиРаспределенияПоЗаказам);

	// удаление срок с пустым договором, когда не удалось распределить по заказам
	Сч = ТаблицаДвижений.Количество()-1;
	Пока Сч >= 0 Цикл
		Если НЕ ЗначениеЗаполнено(ТаблицаДвижений[Сч].ДоговорКонтрагента) Тогда
			ТаблицаДвижений.Удалить(Сч);
		КонецЕсли;
		Сч = Сч - 1;
	КонецЦикла;
	
	// управляемая блокировка
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.уатПредоставленныеУслуги");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = ТаблицаДвижений;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Организация", "Организация");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ДоговорКонтрагента", "ДоговорКонтрагента");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
	Блокировка.Заблокировать();
	
	ДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПредоставленныхУслуг", ТаблицаДвижений);
КонецПроцедуры

Процедура СформироватьТаблицаОсновныеНачисления(ДокументСсылка, СтруктураДополнительныеСвойства)
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	&ДатаЗакрытия КАК ПериодРегистрации,
	|	&ДатаЗакрытия КАК БазовыйПериодНачало,
	|	&ДатаЗакрытия КАК БазовыйПериодКонец,
	|	уатМаршрутныйЛистЗарплата.Ссылка КАК Ссылка,
	|	уатМаршрутныйЛистЗарплата.Ссылка.Организация КАК Организация,
	|	уатМаршрутныйЛистЗарплата.Ссылка.Подразделение КАК Подразделение,
	|	уатМаршрутныйЛистЗарплата.Сотрудник КАК Сотрудник,
	|	уатМаршрутныйЛистЗарплата.ВидНачисления КАК ВидРасчета,
	|	уатМаршрутныйЛистЗарплата.Сумма КАК Результат
	|ИЗ
	|	Документ.уатМаршрутныйЛист.Зарплата КАК уатМаршрутныйЛистЗарплата
	|ГДЕ
	|	уатМаршрутныйЛистЗарплата.Ссылка = &Док
	|	И уатМаршрутныйЛистЗарплата.Сотрудник ССЫЛКА Справочник.Сотрудники";
	Запрос.УстановитьПараметр("Док", ДокументСсылка);
	Запрос.УстановитьПараметр("ДатаЗакрытия",
		?(ДокументСсылка.ДатаЗакрытия = '00010101', ДокументСсылка.Дата, ДокументСсылка.ДатаЗакрытия));
	
	тблЗарплата = Запрос.Выполнить().Выгрузить();
	
	флНачислятьПоПодразделениюСотрудника = НЕ уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументСсылка.Организация,
		ПланыВидовХарактеристик.уатПраваИНастройки.НачислятьЗарплатуПоПодразделениюДокумента);
	Если флНачислятьПоПодразделениюСотрудника Тогда
		Для Каждого ТекСтрока Из тблЗарплата Цикл
			РеквизитыВодителя = уатОбщегоНазначения.уатПрочитатьРеквизитыВодителя(
				ТекСтрока.Сотрудник, ТекСтрока.ПериодРегистрации, ДокументСсылка.Организация);
			ТекСтрока.Подразделение = РеквизитыВодителя.ПодразделениеОрганизации;
		КонецЦикла;
	КонецЕсли;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаОсновныхНачислений", тблЗарплата);
КонецПроцедуры

Процедура СформироватьТаблицаНачисленияФизическимЛицам(ДокументСсылка, СтруктураДополнительныеСвойства)
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	&ДатаЗакрытия КАК ПериодРегистрации,
	|	&ДатаЗакрытия КАК БазовыйПериодНачало,
	|	&ДатаЗакрытия КАК БазовыйПериодКонец,
	|	уатМаршрутныйЛистЗарплата.Ссылка КАК Ссылка,
	|	уатМаршрутныйЛистЗарплата.Ссылка.Организация КАК Организация,
	|	уатМаршрутныйЛистЗарплата.Сотрудник КАК ФизическоеЛицо,
	|	уатМаршрутныйЛистЗарплата.ВидНачисления КАК ВидРасчета,
	|	уатМаршрутныйЛистЗарплата.Сумма КАК Результат
	|ИЗ
	|	Документ.уатМаршрутныйЛист.Зарплата КАК уатМаршрутныйЛистЗарплата
	|ГДЕ
	|	уатМаршрутныйЛистЗарплата.Ссылка = &Док
	|	И уатМаршрутныйЛистЗарплата.Сотрудник ССЫЛКА Справочник.ФизическиеЛица";
	Запрос.УстановитьПараметр("Док", ДокументСсылка);
	Запрос.УстановитьПараметр("ДатаЗакрытия",
		?(ДокументСсылка.ДатаЗакрытия = '00010101', ДокументСсылка.Дата, ДокументСсылка.ДатаЗакрытия));
	
	тблЗарплата = Запрос.Выполнить().Выгрузить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаНачисленияФизическимЛицам", тблЗарплата);
КонецПроцедуры

Процедура СформироватьНевыставленныеРекламации(ДокументСсылка, ДополнительныеСвойства) 
	
	ВалютаРеглУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	ЗапросРекламации = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя КАК Регистратор,
	|	&Период КАК Период,
	|	уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя,
	|	&Ссылка КАК МаршрутныйЛист,
	|	МАКСИМУМ(1) КАК Количество
	|ИЗ
	|	Документ.уатМаршрутныйЛист.Заказы КАК уатМаршрутныйЛистЗаказы
	|ГДЕ
	|	уатМаршрутныйЛистЗаказы.Ссылка = &Ссылка
	|	И уатМаршрутныйЛистЗаказы.Рекламация
	|	И уатМаршрутныйЛистЗаказы.ТипТочкиМаршрута В(&ТипыТочекМаршрута)
	|	И уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя <> ЗНАЧЕНИЕ(Документ.уатЗаказГрузоотправителя.ПустаяСсылка)
	|
	|СГРУППИРОВАТЬ ПО
	|	уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя,
	|	уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя");
	
	ТипыТочекМаршрута = Новый Массив();
	ТипыТочекМаршрута.Добавить(Перечисления.уатТипыТочекМаршрута.Погрузка);
	ТипыТочекМаршрута.Добавить(Перечисления.уатТипыТочекМаршрута.ДополнительнаяПогрузка);

	ЗапросРекламации.УстановитьПараметр("ТипыТочекМаршрута", ТипыТочекМаршрута);
	ЗапросРекламации.УстановитьПараметр("Период", ДокументСсылка.Дата);
	ЗапросРекламации.УстановитьПараметр("Ссылка", ДокументСсылка);
	ТаблицаРекламации = ЗапросРекламации.Выполнить().Выгрузить();
					
	// управляемая блокировка
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.уатНевыставленныеРекламации_уэ");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = ТаблицаРекламации;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ЗаказГрузоотправителя", "ЗаказГрузоотправителя");
	Блокировка.Заблокировать();
		
	ДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаНевыставленныеРекламации", ТаблицаРекламации);
	
КонецПроцедуры

Процедура СформироватьОборотыПоМаршрутномуЛисту(ДокументСсылка, ДополнительныеСвойства)
	
	тблЗаказы = ДокументСсылка.Заказы.Выгрузить(, "ЗаказГрузоотправителя");
	тблЗаказы.Свернуть("ЗаказГрузоотправителя");
	КоличЗаказов = тблЗаказы.Количество();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	уатМаршрутныйЛист.Дата КАК Период,
	|	уатМаршрутныйЛист.Ссылка КАК Регистратор,
	|	уатМаршрутныйЛист.Организация КАК Организация,
	|	уатМаршрутныйЛист.Контрагент КАК Перевозчик,
	|	уатМаршрутныйЛист.Ссылка КАК МаршрутныйЛист,
	|	уатМаршрутныйЛист.Маршрут КАК Маршрут,
	|	уатМаршрутныйЛист.ВидПеревозки КАК ВидПеревозки,
	|	уатМаршрутныйЛист.НаправлениеПеревозки КАК НаправлениеПеревозки,
	|	уатМаршрутныйЛист.ТС КАК ТС,
	|	уатМаршрутныйЛист.Водитель1 КАК Водитель1,
	|	уатМаршрутныйЛист.Водитель2 КАК Водитель2,
	|	уатМаршрутныйЛист.Сотрудник1 КАК Сотрудник1,
	|	уатМаршрутныйЛист.Сотрудник2 КАК Сотрудник2,
	|	уатМаршрутныйЛист.ВремяВПути КАК ВремяВПути,
	|	уатМаршрутныйЛист.Расстояние КАК Расстояние,
	|	уатМаршрутныйЛист.КоличествоМест КАК КоличествоМест,
	|	уатМаршрутныйЛист.Объем КАК Объем,
	|	уатМаршрутныйЛист.ВесБрутто КАК ВесБрутто,
	|	&КоличЗаказов КАК КоличествоЗаказов
	|ИЗ
	|	Документ.уатМаршрутныйЛист КАК уатМаршрутныйЛист
	|ГДЕ
	|	уатМаршрутныйЛист.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("КоличЗаказов", КоличЗаказов);
	
	ТаблицаОборотыПоМаршрутномуЛисту = Запрос.Выполнить().Выгрузить();
	
	Если Константы.уатУчетПланФактаПоМаршрутуВМаршрутныхЛистах.Получить() Тогда
		ИтоговыеПоказателиФакт = ИтоговыеПоказателиФакт(ДокументСсылка);
		ТаблицаОборотыПоМаршрутномуЛисту[0].ВремяВПути = уатОбщегоНазначения.уатВремяВСекунды(ИтоговыеПоказателиФакт.ВремяВПути)/60;
		ТаблицаОборотыПоМаршрутномуЛисту[0].Расстояние = ИтоговыеПоказателиФакт.ПробегСГрузом + ИтоговыеПоказателиФакт.ПробегПорожний;
	Иначе
		ТаблицаОборотыПоМаршрутномуЛисту[0].ВремяВПути = уатОбщегоНазначения.уатВремяВСекунды(ТаблицаОборотыПоМаршрутномуЛисту[0].ВремяВПути)/60;
	КонецЕсли;
	
	ДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаОборотыПоМаршрутномуЛисту", ТаблицаОборотыПоМаршрутномуЛисту);
		
КонецПроцедуры

Процедура СформироватьСостояниеТС(ДокументСсылка, ДополнительныеСвойства)
	
	Если ДокументСсылка.ТС.ВидМоделиТС <> Перечисления.уатВидыМоделейТС.Автотранспорт Тогда
		Возврат;
	КонецЕсли;
	
	пВремяОтправленияПлан = Документы.уатМаршрутныйЛист.ПолучитьВремяОтправленияПлан(ДокументСсылка);
	пВремяВозвратаПлан    = Документы.уатМаршрутныйЛист.ПолучитьВремяВозвратаПлан(ДокументСсылка);
	ПериодДвижения        = ?(ЗначениеЗаполнено(пВремяОтправленияПлан), пВремяОтправленияПлан, ДокументСсылка.ДатаИВремяОтправления);
	ДатаОкончания         = ?(ЗначениеЗаполнено(пВремяВозвратаПлан), пВремяВозвратаПлан, ДокументСсылка.ДатаИВремяВыполнения);
	
	ГрузоподъемностьИОбъемТС = уатОбщегоНазначения.уатПолучитьГрузоподъемностьИОбъемТС(ДокументСсылка.ТС);
	
	Если ЗначениеЗаполнено(ГрузоподъемностьИОбъемТС.Грузоподъемность) Тогда
		пЗагрузкаПоВесу = (ДокументСсылка.ВесБрутто / ГрузоподъемностьИОбъемТС.Грузоподъемность) * 100;
	Иначе 
		пЗагрузкаПоВесу = 0;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ГрузоподъемностьИОбъемТС.ОбъемКузова) Тогда
		пЗагрузкаПоОбъему = (ДокументСсылка.Объем / ГрузоподъемностьИОбъемТС.ОбъемКузова) * 100;
	Иначе 
		пЗагрузкаПоОбъему = 0;
	КонецЕсли;
		
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	&Период КАК Период,
	|	уатМаршрутныйЛист.Ссылка КАК Регистратор,
	|	уатМаршрутныйЛист.ТС КАК ТС,
	|	&ДатаОкончания КАК ДатаОкончания,
	|	уатМаршрутныйЛист.Контрагент КАК Контрагент,
	|	ЗНАЧЕНИЕ(Справочник.уатСостояниеТС.СформированМаршрутныйЛист) КАК Состояние,
	|	&ЗагрузкаПоВесу КАК ЗагрузкаПоВесу,
	|	&ЗагрузкаПоОбъему КАК ЗагрузкаПоОбъему
	|ИЗ
	|	Документ.уатМаршрутныйЛист КАК уатМаршрутныйЛист
	|ГДЕ
	|	уатМаршрутныйЛист.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период,
	|	уатМаршрутныйЛист.Ссылка,
	|	уатМаршрутныйЛист.Прицеп1,
	|	&ДатаОкончания,
	|	уатМаршрутныйЛист.Контрагент,
	|	ЗНАЧЕНИЕ(Справочник.уатСостояниеТС.СформированМаршрутныйЛист),
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО
	|ИЗ
	|	Документ.уатМаршрутныйЛист КАК уатМаршрутныйЛист
	|ГДЕ
	|	уатМаршрутныйЛист.Ссылка = &Ссылка
	|	И уатМаршрутныйЛист.Прицеп1 <> ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	&Период,
	|	уатМаршрутныйЛист.Ссылка,
	|	уатМаршрутныйЛист.Прицеп2,
	|	&ДатаОкончания,
	|	уатМаршрутныйЛист.Контрагент,
	|	ЗНАЧЕНИЕ(Справочник.уатСостояниеТС.СформированМаршрутныйЛист),
	|	НЕОПРЕДЕЛЕНО,
	|	НЕОПРЕДЕЛЕНО
	|ИЗ
	|	Документ.уатМаршрутныйЛист КАК уатМаршрутныйЛист
	|ГДЕ
	|	уатМаршрутныйЛист.Ссылка = &Ссылка
	|	И уатМаршрутныйЛист.Прицеп2 <> ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка)");
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("Период", ?(ЗначениеЗаполнено(ПериодДвижения), ПериодДвижения, ДокументСсылка.Дата));
	Запрос.УстановитьПараметр("ДатаОкончания", ?(ЗначениеЗаполнено(ДатаОкончания), ДатаОкончания, ДокументСсылка.Дата));
	Запрос.УстановитьПараметр("ЗагрузкаПоВесу", пЗагрузкаПоВесу);
	Запрос.УстановитьПараметр("ЗагрузкаПоОбъему", пЗагрузкаПоОбъему);
	
	тблСостояниеТС = Запрос.Выполнить().Выгрузить();
		
	ДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСостоянийТС", тблСостояниеТС);
	
КонецПроцедуры

Процедура СформироватьОбъемыПеревозок(ДокументСсылка, ДополнительныеСвойства)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатМаршрутныйЛист.Ссылка КАК Ссылка,
	|	уатМаршрутныйЛист.Маршрут КАК Маршрут,
	|	уатМаршрутныйЛист.АдресОтправления КАК АдресОтправления,
	|	уатМаршрутныйЛист.АдресНазначения КАК АдресНазначения,
	|	уатМаршрутныйЛист.ОбъектСтроительства КАК ОбъектСтроительства,
	|	уатМаршрутныйЛист.Контрагент КАК Контрагент,
	|	уатМаршрутныйЛист.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	уатСценарииПланирования.Ссылка КАК Сценарий,
	|	уатМаршрутныйЛист.ВидПеревозки КАК ВидПеревозки,
	|	уатМаршрутныйЛист.НаправлениеПеревозки КАК НаправлениеПеревозки,
	|	уатМаршрутныйЛист.Организация КАК Организация,
	|	уатМаршрутныйЛист.Подразделение КАК Подразделение,
	|	уатПланированиеРаботыТС.Ссылка КАК ПланированиеРаботыТС,
	|	уатМаршрутныйЛист.ТС.Модель КАК МодельТС,
	|	уатМаршрутныйЛист.ТС.ТипТС КАК ТипТС,
	|	уатСценарииПланирования.ПараметрВыработки КАК ПараметрВыработки
	|ПОМЕСТИТЬ втСценарийПланирования
	|ИЗ
	|	Документ.уатМаршрутныйЛист КАК уатМаршрутныйЛист
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатПланированиеРаботыТС КАК уатПланированиеРаботыТС
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.уатСценарииПланирования КАК уатСценарииПланирования
	|			ПО уатПланированиеРаботыТС.Сценарий = уатСценарииПланирования.Ссылка
	|		ПО уатМаршрутныйЛист.Организация = уатПланированиеРаботыТС.Организация
	|			И уатМаршрутныйЛист.Подразделение = уатПланированиеРаботыТС.Подразделение
	|ГДЕ
	|	уатСценарииПланирования.Раздел = ЗНАЧЕНИЕ(Перечисление.уатРазделыПланирования.ОбъемыПеревозок)
	|	И уатПланированиеРаботыТС.Проведен = ИСТИНА
	|	И уатМаршрутныйЛист.Ссылка = &Ссылка
	|	И уатМаршрутныйЛист.ДоговорКонтрагента.ПланированиеОбъемовПеревозок = ИСТИНА
	|	И &ДатаЗакрытия МЕЖДУ уатПланированиеРаботыТС.ДатаПланирования И ВЫБОР
	|			КОГДА уатСценарииПланирования.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Декада)
	|				ТОГДА КОНЕЦПЕРИОДА(уатПланированиеРаботыТС.ДатаПланирования, ДЕКАДА)
	|			КОГДА уатСценарииПланирования.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
	|				ТОГДА КОНЕЦПЕРИОДА(уатПланированиеРаботыТС.ДатаПланирования, МЕСЯЦ)
	|			КОГДА уатСценарииПланирования.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
	|				ТОГДА КОНЕЦПЕРИОДА(уатПланированиеРаботыТС.ДатаПланирования, КВАРТАЛ)
	|			КОГДА уатСценарииПланирования.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие)
	|				ТОГДА КОНЕЦПЕРИОДА(уатПланированиеРаботыТС.ДатаПланирования, ПОЛУГОДИЕ)
	|			КОГДА уатСценарииПланирования.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.год)
	|				ТОГДА КОНЕЦПЕРИОДА(уатПланированиеРаботыТС.ДатаПланирования, ГОД)
	|			ИНАЧЕ уатПланированиеРаботыТС.ДатаПланирования
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втСценарийПланирования.Ссылка КАК Ссылка,
	|	втСценарийПланирования.Маршрут КАК Маршрут,
	|	втСценарийПланирования.АдресОтправления КАК АдресОтправления,
	|	втСценарийПланирования.АдресНазначения КАК АдресНазначения,
	|	втСценарийПланирования.ОбъектСтроительства КАК ОбъектСтроительства,
	|	втСценарийПланирования.Контрагент КАК Контрагент,
	|	втСценарийПланирования.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	втСценарийПланирования.Сценарий КАК Сценарий,
	|	втСценарийПланирования.ВидПеревозки КАК ВидПеревозки,
	|	втСценарийПланирования.НаправлениеПеревозки КАК НаправлениеПеревозки,
	|	уатПривязкаМаршрутныхЛистовКПеревозчикам_уэСрезПоследних.Перевозчик КАК Перевозчик,
	|	уатПривязкаМаршрутныхЛистовКПеревозчикам_уэСрезПоследних.Договор КАК Договор,
	|	втСценарийПланирования.Организация КАК Организация,
	|	втСценарийПланирования.Подразделение КАК Подразделение,
	|	втСценарийПланирования.ПланированиеРаботыТС КАК ПланированиеРаботыТС,
	|	втСценарийПланирования.МодельТС КАК МодельТС,
	|	втСценарийПланирования.ТипТС КАК ТипТС,
	|	втСценарийПланирования.ПараметрВыработки КАК ПараметрВыработки
	|ПОМЕСТИТЬ втСценарийПеревозчик
	|ИЗ
	|	втСценарийПланирования КАК втСценарийПланирования
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатПривязкаМаршрутныхЛистовКПеревозчикам_уэ.СрезПоследних(, ) КАК уатПривязкаМаршрутныхЛистовКПеревозчикам_уэСрезПоследних
	|		ПО втСценарийПланирования.Ссылка = уатПривязкаМаршрутныхЛистовКПеревозчикам_уэСрезПоследних.МаршрутныйЛист
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втСценарийПеревозчик.Ссылка КАК Регистратор,
	|	втСценарийПеревозчик.Организация КАК Организация,
	|	втСценарийПеревозчик.Подразделение КАК Подразделение,
	|	втСценарийПеревозчик.Перевозчик КАК Перевозчик,
	|	втСценарийПеревозчик.Договор КАК Договор,
	|	втСценарийПеревозчик.Сценарий КАК Сценарий,
	|	ВЫБОР
	|		КОГДА уатСценарииПланированияРазрезМаршрут.РазрезПланирования ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		КОГДА уатСценарииПланированияРазрезМаршрут.ВариантАналитики = ЗНАЧЕНИЕ(Перечисление.уатВариантыАналитик.Маршрут)
	|				И уатСценарииПланированияРазрезМаршрут.ПланированиеПоГруппам
	|			ТОГДА втСценарийПеревозчик.Маршрут.Родитель
	|		КОГДА уатСценарииПланированияРазрезМаршрут.ВариантАналитики = ЗНАЧЕНИЕ(Перечисление.уатВариантыАналитик.Маршрут)
	|			ТОГДА втСценарийПеревозчик.Маршрут
	|		КОГДА уатСценарииПланированияРазрезМаршрут.ВариантАналитики = ЗНАЧЕНИЕ(Перечисление.уатВариантыАналитик.ПунктОтправления)
	|				И уатСценарииПланированияРазрезМаршрут.ПланированиеПоГруппам
	|			ТОГДА втСценарийПеревозчик.АдресОтправления.Родитель
	|		КОГДА уатСценарииПланированияРазрезМаршрут.ВариантАналитики = ЗНАЧЕНИЕ(Перечисление.уатВариантыАналитик.ПунктОтправления)
	|			ТОГДА втСценарийПеревозчик.АдресОтправления
	|		КОГДА уатСценарииПланированияРазрезМаршрут.ВариантАналитики = ЗНАЧЕНИЕ(Перечисление.уатВариантыАналитик.ПунктНазначения)
	|				И уатСценарииПланированияРазрезМаршрут.ПланированиеПоГруппам
	|			ТОГДА втСценарийПеревозчик.АдресНазначения.Родитель
	|		КОГДА уатСценарииПланированияРазрезМаршрут.ВариантАналитики = ЗНАЧЕНИЕ(Перечисление.уатВариантыАналитик.ПунктНазначения)
	|			ТОГДА втСценарийПеревозчик.АдресНазначения
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Маршрут,
	|	ВЫБОР
	|		КОГДА уатСценарииПланированияРазрезВидПеревозки.РазрезПланирования ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ втСценарийПеревозчик.ВидПеревозки
	|	КОНЕЦ КАК ВидПеревозки,
	|	ВЫБОР
	|		КОГДА уатСценарииПланированияРазрезНаправлениеПеревозки.РазрезПланирования ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		КОГДА уатСценарииПланированияРазрезНаправлениеПеревозки.ПланированиеПоГруппам
	|			ТОГДА втСценарийПеревозчик.НаправлениеПеревозки.Родитель
	|		ИНАЧЕ втСценарийПеревозчик.НаправлениеПеревозки
	|	КОНЕЦ КАК НаправлениеПеревозки,
	|	ВЫБОР
	|		КОГДА уатСценарииПланированияРазрезОбъектСтроительства.РазрезПланирования ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		КОГДА уатСценарииПланированияРазрезОбъектСтроительства.ПланированиеПоГруппам
	|			ТОГДА втСценарийПеревозчик.ОбъектСтроительства.Родитель
	|		ИНАЧЕ втСценарийПеревозчик.ОбъектСтроительства
	|	КОНЕЦ КАК ОбъектСтроительства,
	|	ВЫБОР
	|		КОГДА уатСценарииПланированияРазрезВидТранспорта.РазрезПланирования ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		КОГДА уатСценарииПланированияРазрезВидТранспорта.ВариантАналитики = ЗНАЧЕНИЕ(Перечисление.уатВариантыАналитик.МодельТС)
	|				И уатСценарииПланированияРазрезВидТранспорта.ПланированиеПоГруппам
	|			ТОГДА втСценарийПеревозчик.МодельТС.Родитель
	|		КОГДА уатСценарииПланированияРазрезВидТранспорта.ВариантАналитики = ЗНАЧЕНИЕ(Перечисление.уатВариантыАналитик.МодельТС)
	|			ТОГДА втСценарийПеревозчик.МодельТС
	|		КОГДА уатСценарииПланированияРазрезВидТранспорта.ВариантАналитики = ЗНАЧЕНИЕ(Перечисление.уатВариантыАналитик.ТипТС)
	|				И уатСценарииПланированияРазрезВидТранспорта.ПланированиеПоГруппам
	|			ТОГДА втСценарийПеревозчик.ТипТС.Родитель
	|		КОГДА уатСценарииПланированияРазрезВидТранспорта.ВариантАналитики = ЗНАЧЕНИЕ(Перечисление.уатВариантыАналитик.ТипТС)
	|			ТОГДА втСценарийПеревозчик.ТипТС
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВидТС,
	|	1 КАК ПереданоРейсов,
	|	ВЫБОР
	|		КОГДА втСценарийПеревозчик.Ссылка.Выполнен
	|				И втСценарийПеревозчик.Перевозчик = втСценарийПеревозчик.Контрагент
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВыполненоРейсов,
	|	&ДатаЗакрытия КАК Период,
	|	втСценарийПеревозчик.ПланированиеРаботыТС КАК ПланированиеРаботыТС,
	|	втСценарийПеревозчик.ПараметрВыработки КАК ПараметрВыработки,
	|	ВЫБОР
	|		КОГДА втСценарийПеревозчик.Ссылка.Выполнен
	|				И втСценарийПеревозчик.Перевозчик = втСценарийПеревозчик.Контрагент
	|			ТОГДА ЕСТЬNULL(уатМаршрутныйЛистВыработкаТСиСотрудников.КоличествоФакт, 0)
	|		ИНАЧЕ ЕСТЬNULL(уатМаршрутныйЛистВыработкаТСиСотрудников.КоличествоПлан, 0)
	|	КОНЕЦ КАК ПереданоВыработки,
	|	ВЫБОР
	|		КОГДА втСценарийПеревозчик.Ссылка.Выполнен
	|				И втСценарийПеревозчик.Перевозчик = втСценарийПеревозчик.Контрагент
	|			ТОГДА ЕСТЬNULL(уатМаршрутныйЛистВыработкаТСиСотрудников.КоличествоФакт, 0)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВыполненоВыработки
	|ПОМЕСТИТЬ втМаршрутныйЛистСПланом
	|ИЗ
	|	втСценарийПеревозчик КАК втСценарийПеревозчик
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатСценарииПланирования.РазрезыПланирования КАК уатСценарииПланированияРазрезМаршрут
	|		ПО втСценарийПеревозчик.Сценарий = уатСценарииПланированияРазрезМаршрут.Ссылка
	|			И (уатСценарииПланированияРазрезМаршрут.РазрезПланирования = ЗНАЧЕНИЕ(Перечисление.уатРазрезыПланирования.Маршрут))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатСценарииПланирования.РазрезыПланирования КАК уатСценарииПланированияРазрезВидПеревозки
	|		ПО втСценарийПеревозчик.Сценарий = уатСценарииПланированияРазрезВидПеревозки.Ссылка
	|			И (уатСценарииПланированияРазрезВидПеревозки.РазрезПланирования = ЗНАЧЕНИЕ(Перечисление.уатРазрезыПланирования.ВидПеревозки))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатСценарииПланирования.РазрезыПланирования КАК уатСценарииПланированияРазрезНаправлениеПеревозки
	|		ПО втСценарийПеревозчик.Сценарий = уатСценарииПланированияРазрезНаправлениеПеревозки.Ссылка
	|			И (уатСценарииПланированияРазрезНаправлениеПеревозки.РазрезПланирования = ЗНАЧЕНИЕ(Перечисление.уатРазрезыПланирования.НаправлениеПеревозки))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатСценарииПланирования.РазрезыПланирования КАК уатСценарииПланированияРазрезОбъектСтроительства
	|		ПО втСценарийПеревозчик.Сценарий = уатСценарииПланированияРазрезОбъектСтроительства.Ссылка
	|			И (уатСценарииПланированияРазрезОбъектСтроительства.РазрезПланирования = ЗНАЧЕНИЕ(Перечисление.уатРазрезыПланирования.ОбъектСтроительства))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатСценарииПланирования.РазрезыПланирования КАК уатСценарииПланированияРазрезВидТранспорта
	|		ПО втСценарийПеревозчик.Сценарий = уатСценарииПланированияРазрезВидТранспорта.Ссылка
	|			И (уатСценарииПланированияРазрезВидТранспорта.РазрезПланирования = ЗНАЧЕНИЕ(Перечисление.уатРазрезыПланирования.ТС))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатМаршрутныйЛист.ВыработкаТСиСотрудников КАК уатМаршрутныйЛистВыработкаТСиСотрудников
	|		ПО втСценарийПеревозчик.ПараметрВыработки = уатМаршрутныйЛистВыработкаТСиСотрудников.ПараметрВыработки
	|			И втСценарийПеревозчик.Ссылка = уатМаршрутныйЛистВыработкаТСиСотрудников.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втМаршрутныйЛистСПланом.Регистратор КАК Регистратор,
	|	втМаршрутныйЛистСПланом.Организация КАК Организация,
	|	втМаршрутныйЛистСПланом.Подразделение КАК Подразделение,
	|	втМаршрутныйЛистСПланом.Перевозчик КАК Перевозчик,
	|	втМаршрутныйЛистСПланом.Договор КАК Договор,
	|	втМаршрутныйЛистСПланом.Сценарий КАК Сценарий,
	|	уатПланированиеРаботыТССоставПлана.Маршрут КАК Маршрут,
	|	уатПланированиеРаботыТССоставПлана.ВидПеревозки КАК ВидПеревозки,
	|	уатПланированиеРаботыТССоставПлана.НаправлениеПеревозки КАК НаправлениеПеревозки,
	|	уатПланированиеРаботыТССоставПлана.ОбъектСтроительства КАК ОбъектСтроительства,
	|	втМаршрутныйЛистСПланом.ПереданоРейсов КАК ПереданоРейсов,
	|	втМаршрутныйЛистСПланом.ВыполненоРейсов КАК ВыполненоРейсов,
	|	втМаршрутныйЛистСПланом.Период КАК Период,
	|	втМаршрутныйЛистСПланом.ПланированиеРаботыТС КАК ПланированиеРаботыТС,
	|	уатПланированиеРаботыТССоставПлана.Количество КАК КоличествоПлан,
	|	втМаршрутныйЛистСПланом.ВидТС КАК ВидТС,
	|	втМаршрутныйЛистСПланом.ПараметрВыработки КАК ПараметрВыработки,
	|	МАКСИМУМ(втМаршрутныйЛистСПланом.ПереданоВыработки) КАК ПереданоВыработки,
	|	МАКСИМУМ(втМаршрутныйЛистСПланом.ВыполненоВыработки) КАК ВыполненоВыработки
	|ИЗ
	|	втМаршрутныйЛистСПланом КАК втМаршрутныйЛистСПланом
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатПланированиеРаботыТС.СоставПлана КАК уатПланированиеРаботыТССоставПлана
	|		ПО втМаршрутныйЛистСПланом.ПланированиеРаботыТС = уатПланированиеРаботыТССоставПлана.Ссылка
	|			И втМаршрутныйЛистСПланом.Перевозчик = уатПланированиеРаботыТССоставПлана.Контрагент
	|			И втМаршрутныйЛистСПланом.Договор = уатПланированиеРаботыТССоставПлана.Договор
	|			И (втМаршрутныйЛистСПланом.Маршрут = уатПланированиеРаботыТССоставПлана.Маршрут
	|				ИЛИ уатПланированиеРаботыТССоставПлана.Маршрут = ЗНАЧЕНИЕ(Справочник.уатМаршруты.ПустаяСсылка)
	|				ИЛИ уатПланированиеРаботыТССоставПлана.Маршрут = ЗНАЧЕНИЕ(Справочник.уатПунктыНазначения.ПустаяСсылка)
	|				ИЛИ уатПланированиеРаботыТССоставПлана.Маршрут = НЕОПРЕДЕЛЕНО)
	|			И (втМаршрутныйЛистСПланом.ВидПеревозки = уатПланированиеРаботыТССоставПлана.ВидПеревозки
	|				ИЛИ уатПланированиеРаботыТССоставПлана.ВидПеревозки = ЗНАЧЕНИЕ(Справочник.уатВидыПеревозок.ПустаяСсылка))
	|			И (втМаршрутныйЛистСПланом.НаправлениеПеревозки = уатПланированиеРаботыТССоставПлана.НаправлениеПеревозки
	|				ИЛИ уатПланированиеРаботыТССоставПлана.НаправлениеПеревозки = ЗНАЧЕНИЕ(Справочник.уатНаправленияПеревозок.ПустаяСсылка))
	|			И (втМаршрутныйЛистСПланом.ОбъектСтроительства = уатПланированиеРаботыТССоставПлана.ОбъектСтроительства
	|				ИЛИ уатПланированиеРаботыТССоставПлана.ОбъектСтроительства = ЗНАЧЕНИЕ(Справочник.уатОбъектыСтроительства.ПустаяСсылка))
	|
	|СГРУППИРОВАТЬ ПО
	|	втМаршрутныйЛистСПланом.Регистратор,
	|	втМаршрутныйЛистСПланом.Организация,
	|	втМаршрутныйЛистСПланом.Подразделение,
	|	втМаршрутныйЛистСПланом.Перевозчик,
	|	втМаршрутныйЛистСПланом.Договор,
	|	втМаршрутныйЛистСПланом.Сценарий,
	|	уатПланированиеРаботыТССоставПлана.Маршрут,
	|	уатПланированиеРаботыТССоставПлана.ВидПеревозки,
	|	уатПланированиеРаботыТССоставПлана.НаправлениеПеревозки,
	|	уатПланированиеРаботыТССоставПлана.ОбъектСтроительства,
	|	втМаршрутныйЛистСПланом.ПереданоРейсов,
	|	втМаршрутныйЛистСПланом.ВыполненоРейсов,
	|	втМаршрутныйЛистСПланом.Период,
	|	втМаршрутныйЛистСПланом.ПланированиеРаботыТС,
	|	уатПланированиеРаботыТССоставПлана.Количество,
	|	втМаршрутныйЛистСПланом.ВидТС,
	|	втМаршрутныйЛистСПланом.ПараметрВыработки");
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ДатаЗакрытия",
		?(ДокументСсылка.ДатаЗакрытия = '00010101', ДокументСсылка.Дата, ДокументСсылка.ДатаЗакрытия));
	
	ТаблицаОбъемыПеревозок = Запрос.Выполнить().Выгрузить();
	ДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаОбъемыПеревозок", ТаблицаОбъемыПеревозок);
	
КонецПроцедуры

Функция СтруктураКурсаВалютыСтроки(Валюта, ДатаКурса, КэшКурсов = Неопределено)
	// Кеширование используется для исключения повторного получения курса для одной и той же валюты
	Если КэшКурсов = Неопределено Тогда
		КэшКурсов = Новый Соответствие;
	КонецЕсли;
	
	СтруктураКурсаСтроки = КэшКурсов.Получить(Валюта);
	Если СтруктураКурсаСтроки = Неопределено Тогда
		СтруктураКурсаСтроки = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(Валюта, ДатаКурса);
		КэшКурсов.Вставить(Валюта, СтруктураКурсаСтроки);
	КонецЕсли;
	
	Возврат СтруктураКурсаСтроки;
КонецФункции

#КонецОбласти

#Область Печать

Функция ПечатьМаршрутныйЛист(МассивОбъектов, ОбъектыПечати, ПараметрыПечати=Неопределено, ТипПФ = "Пункты")
	
	Если ПараметрыПечати = Неопределено Тогда 
		ПараметрыПечати = Новый Структура();
	КонецЕсли;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_МаршрутныйЛист";
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ПервыйДокумент = Истина;
	
	Для Каждого ТекущийДокумент Из МассивОбъектов Цикл
		

		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_МаршрутныйЛист_МаршрутныйЛист";
		Если ТипПФ = "Пункты" Тогда
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.уатМаршрутныйЛист.ПФ_MXL_МаршрутныйЛист");
		Иначе
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.уатМаршрутныйЛист.ПФ_MXL_МаршрутныйЛистСЗаказами");
		КонецЕсли;
		
		ОбластьЗаголовка           = "Заголовок";
		ОбластьРеквизитовЗаголовка = "ЗаголовокРеквизиты";

		// Заголовок
		ОбластьМакетаШапкаНачало = Макет.ПолучитьОбласть(ОбластьЗаголовка);
		ОбластьМакетаШапкаНачало.Параметры.ТекстЗаголовка = уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ТекущийДокумент, НСтр("en='Routing list';ru='Маршрутный лист'"));
		ОбластьМакетаШапкаНачало.Параметры.Организация    = уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(ТекущийДокумент.Организация), "НаименованиеДляПечатныхФорм");

		ОбластьМакетаШапкаТС = Макет.ПолучитьОбласть("ТСПривлеченная");
		ОбластьМакетаШапкаТС.Параметры.ПредставлениеПеревозчика = уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(
			уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(ТекущийДокумент.Контрагент, ТекущийДокумент.Дата), "НаименованиеДляПечатныхФорм");
		ОбластьМакетаШапкаТС.Параметры.Договор = ТекущийДокумент.ДоговорКонтрагента;
		
		ОбластьМакетаШапка = Макет.ПолучитьОбласть(ОбластьРеквизитовЗаголовка);
		ОбластьМакетаШапка.Параметры.ПредставлениеТС          = Строка(ТекущийДокумент.ТС) + " (" + уатОбщегоНазначения.уатПредставлениеМоделиТС(ТекущийДокумент.ТС) + ")";
		ОбластьМакетаШапка.Параметры.ПредставлениеВодителя = уатОбщегоНазначения.уатФИОСотрудникаПолноеСтрокой(ТекущийДокумент.Водитель1, НачалоДня(ТекущийДокумент.Дата));;
		
		Если ЗначениеЗаполнено(ТекущийДокумент.Прицеп1) Тогда
			ОбластьМакетаШапка.Параметры.ПредставлениеПрицепов = Строка(ТекущийДокумент.Прицеп1) + " (" + уатОбщегоНазначения.уатПредставлениеМоделиТС(ТекущийДокумент.Прицеп1) + ")";
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекущийДокумент.Прицеп2) Тогда
			ОбластьМакетаШапка.Параметры.ПредставлениеПрицепов = ?(ЗначениеЗаполнено(ТекущийДокумент.Прицеп1), ОбластьМакетаШапка.Параметры.ПредставлениеПрицепов + ", ", "") + Строка(ТекущийДокумент.Прицеп2) + " (" + уатОбщегоНазначения.уатПредставлениеМоделиТС(ТекущийДокумент.Прицеп2) + ")";
		КонецЕсли;
	
		ТабДокМаршрут = Новый ТабличныйДокумент;
		
		Если ТекущийДокумент.Заказы.Количество() Тогда 
			
			ОбластьМакетаШапка.Параметры.ПлановоеВремяВыезда = Формат(ПолучитьВремяОтправленияПлан(ТекущийДокумент), "ДП=' '");
			ОбластьМакетаШапка.Параметры.ПлановоеВремяВозврата = Формат(ПолучитьВремяВозвратаПлан(ТекущийДокумент), "ДП=' '");
			
			Если ТипПФ = "Пункты" Тогда
				ПечатьМаршрутныйЛистПункты(ТекущийДокумент, Макет, ТабДокМаршрут);
			Иначе
				ПечатьМаршрутныйЛистСЗаказами(ТекущийДокумент, Макет, ТабДокМаршрут, ТипПФ);
			КонецЕсли;

		КонецЕсли;
		
		ТабличныйДокумент.Вывести(ОбластьМакетаШапкаНачало);
		Если ТекущийДокумент.ТС.ПринадлежностьТС = Перечисления.уатПринадлежностьТС.Привлеченное Тогда
			ТабличныйДокумент.Вывести(ОбластьМакетаШапкаТС);
		КонецЕсли;
		ТабличныйДокумент.Вывести(ОбластьМакетаШапка);
		ТабличныйДокумент.Вывести(ТабДокМаршрут);
		
		ПрикрепитьКартинкуКарты(ПараметрыПечати, Макет, ТабличныйДокумент);
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ТекущийДокумент);
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатнаяФорма()

Функция ПечатьУпаковочныйЛист(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "УпаковочныйЛист";
	ТабличныйДокумент.ИмяПараметровПечати  = "ПараметрыПечати_МаршрутныйЛист_УпаковочныйЛист";

	ПервыйДокумент = Истина;
	Для Каждого ТекущийДокументМЛ Из МассивОбъектов Цикл
		
		СоответсвиеЗаказов = Новый Соответствие;
		Для Каждого ТекСтрока Из ТекущийДокументМЛ.Заказы Цикл
			Если НЕ ЗначениеЗаполнено(ТекСтрока.ЗаказГрузоотправителя) Тогда
				Продолжить;
			КонецЕсли;
			СоответсвиеЗаказов.Вставить(ТекСтрока.ЗаказГрузоотправителя, ТекСтрока.ЗаказГрузоотправителя);
		КонецЦикла;
		
		Для Каждого ТекущийДокументЗаказ Из СоответсвиеЗаказов Цикл
			ТекущийДокумент = ТекущийДокументЗаказ.Значение;
			Если Не ПервыйДокумент Тогда
				ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			КонецЕсли;
			ПервыйДокумент = Ложь;
			
			КолВоГрузов = 0;
			флФормированиеШКНаКаждыйЭкземпляр = Ложь;
			Если ТекущийДокумент.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам Тогда
				Для Каждого ТекСтрока Из ТекущийДокумент.ГрузовойСостав Цикл
					Если ТекСтрока.ГрузовоеМесто.ФормированиеШКНаКаждыйЭкземпляр Тогда
						Для Счетчик = 1 По ТекСтрока.КоличествоМест Цикл
							флФормированиеШКНаКаждыйЭкземпляр = Истина;
							КолВоГрузов = КолВоГрузов + 1;
						КонецЦикла;
					Иначе
						КолВоГрузов = КолВоГрузов + 1;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли ТекущийДокумент.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам Тогда
				Для Каждого ТекСтрока Из ТекущийДокумент.Товары Цикл
					КолВоГрузов = КолВоГрузов + 1;
				КонецЦикла;
			КонецЕсли;
			
			Если ТекущийДокумент.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам Тогда
				ПечатьЭкземпляраЭтикетки(ТабличныйДокумент, ОбъектыПечати, ТекущийДокумент, ТекущийДокумент);
			ИначеЕсли ТекущийДокумент.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам Тогда
				ТекСчетчик = 1;
				Для Каждого ТекСтрока Из ТекущийДокумент.ГрузовойСостав Цикл
					Если ТекСтрока.ГрузовоеМесто.ФормированиеШКНаКаждыйЭкземпляр Тогда
						Для Счетчик = 1 По ТекСтрока.КоличествоМест Цикл
							ПечатьЭкземпляраЭтикетки(ТабличныйДокумент, ОбъектыПечати, ТекущийДокумент, ТекСтрока.ГрузовоеМесто, ТекСчетчик, КолВоГрузов, ТекСтрока.НомерСтроки, флФормированиеШКНаКаждыйЭкземпляр);
							ТекСчетчик = ТекСчетчик + 1;
						КонецЦикла;
					Иначе
						ПечатьЭкземпляраЭтикетки(ТабличныйДокумент, ОбъектыПечати, ТекущийДокумент, ТекСтрока.ГрузовоеМесто, ТекСчетчик, КолВоГрузов, ТекСтрока.НомерСтроки, флФормированиеШКНаКаждыйЭкземпляр);
						ТекСчетчик = ТекСчетчик + 1;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли ТекущийДокумент.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам Тогда
				Для Каждого ТекСтрока Из ТекущийДокумент.Товары Цикл
					ПечатьЭкземпляраЭтикетки(ТабличныйДокумент, ОбъектыПечати, ТекущийДокумент, ТекСтрока.Номенклатура, ТекСтрока.НомерСтроки, КолВоГрузов, ТекСтрока.НомерСтроки);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	ТабличныйДокумент.АвтоМасштаб = Истина;
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатнаяФорма()

Процедура ПечатьЭкземпляраЭтикетки(ТабличныйДокумент, ОбъектыПечати, ТекущийДокумент, Груз, НомерМеста = 0, КоличествоМест = 0, НомерСтроки = 0, флФормированиеШКНаКаждыйЭкземпляр = Ложь)
	
	Перем Ошибки;
	
	ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();

	НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;

	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.уатЗаказГрузоотправителя.ПФ_MXL_УпаковочныйЛист");
	ТипШтрихкода = Константы.уатТипШтрихкодаДляПечати_уэ.Получить();
	
	// Печать штрихкодов
	флИспользованиеШК = уатЗащищенныеФункцииСервер_проф.ИспользоватьШтрихкодированиеОбъекта("уатЗаказГрузоотправителя");

	Если ЗначениеЗаполнено(ТекущийДокумент.Организация.ФайлЛоготип) Тогда
		Если флИспользованиеШК Тогда
			Если ТипШтрихкода = Перечисления.уатТипыШтрихкодов.QR Тогда
				ОбластьМакета = Макет.ПолучитьОбласть("ОбластьПечатьЛоготипQR");
				
				ПодписиИФаксимиле = Новый Соответствие; // Ключ - имя каринки в области, Значение - имя реквизита
				ПодписиИФаксимиле.Вставить("ЛоготипQR", "ФайлЛоготип");
			Иначе
				ОбластьМакета = Макет.ПолучитьОбласть("ОбластьПечатьЛоготипШтрихкод");
				
				ПодписиИФаксимиле = Новый Соответствие; // Ключ - имя каринки в области, Значение - имя реквизита
				ПодписиИФаксимиле.Вставить("ЛоготипШтрихкод", "ФайлЛоготип");
			КонецЕсли;
		Иначе
			 ОбластьМакета = Макет.ПолучитьОбласть("ОбластьПечатьЛоготип");
			 ПодписиИФаксимиле = Новый Соответствие; // Ключ - имя каринки в области, Значение - имя реквизита
			 ПодписиИФаксимиле.Вставить("Логотип", "ФайлЛоготип");

		КонецЕсли;
	
		уатОбщегоНазначения.ЗаполнитьФаксимилеВОбластиМакета(ОбластьМакета, ТекущийДокумент.Организация, ПодписиИФаксимиле, Ошибки);
	Иначе
		Если флИспользованиеШК Тогда
			Если ТипШтрихкода = Перечисления.уатТипыШтрихкодов.QR Тогда
				ОбластьМакета = Макет.ПолучитьОбласть("ОбластьПечатьQR");
			Иначе
				ОбластьМакета = Макет.ПолучитьОбласть("ОбластьПечатьШтрихкод");
			КонецЕсли;
		Иначе
			ОбластьМакета = Макет.ПолучитьОбласть("ОбластьПечать");
		КонецЕсли;
	КонецЕсли;
	
	ПечатьПрефиксовВключена = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ТекущийДокумент.Организация, ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ВыводитьПрефиксПриПечати"));

	Если ПечатьПрефиксовВключена Тогда
		ОбластьМакета.Параметры.НомерЗаказа = ТекущийДокумент.Номер;
	Иначе
		ОбластьМакета.Параметры.НомерЗаказа = уатОбщегоНазначенияКлиентСервер.НомерДокументаНаПечать(ТекущийДокумент.Номер, Истина, Истина);
	КонецЕсли;

	ОбластьМакета.Параметры.ВходящийНомер  		  = ТекущийДокумент.НомерПоУчетуЗаказчика;
	ОбластьМакета.Параметры.КолВоМест      		  = ?(КоличествоМест = 0, 1, КоличествоМест);
	
	ПорядковыйНомерМеста = Строка(НомерМеста) + ?(НЕ флФормированиеШКНаКаждыйЭкземпляр, "", "/" + Строка(КоличествоМест));

	ОбластьМакета.Параметры.ПорядковыйНомерМеста  = ?(ПорядковыйНомерМеста = "0", 1, ПорядковыйНомерМеста);
	ТабличныйДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("ОбластьПечати");
	ОбластьМакета.Параметры.ДатаДоставкиПлан      = ТекущийДокумент.ДоставкаС;
	ОбластьМакета.Параметры.Грузополучатель       = ТекущийДокумент.Грузополучатель;
	ОбластьМакета.Параметры.Грузоотправитель      = ТекущийДокумент.Грузоотправитель;

	Если ТипЗнч(ТекущийДокумент.АдресНазначения) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда
		ПараметрыЗаполненияПунктов = уатНастройкиШаблонов.ПолучитьПараметрыЗаполненияСправочникУатПунктыНазначения(ТекущийДокумент.АдресНазначения);		
		Город = ПараметрыЗаполненияПунктов.Город;
	Иначе
		Город = "";
	КонецЕсли;

	ОбластьМакета.Параметры.ГородСдачи = Врег(Город);
	ОбластьМакета.Параметры.АдресСдачи = ТекущийДокумент.АдресНазначения;
	ТабличныйДокумент.Вывести(ОбластьМакета);
		
	Если флИспользованиеШК = ИСТИНА Тогда
		уатЗащищенныеФункцииСервер_проф.ОтобразитьШКнаПФ(ТабличныйДокумент, Груз, ТекущийДокумент, НомерСтроки, НомерМеста);
	КонецЕсли;
	
	УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ТекущийДокумент);

КонецПроцедуры

Функция ПечатьМаршрутныйЛистСЗаказами(ТекущийДокумент, Макет, ТабДокМаршрут, ТипПФ)
	
	Если ТипПФ = "Заказы" Тогда
		ШапкаТЧ  = "НоменклатураШапка";
		СтрокаТЧ = "Номенклатура";
		ФлагНоменклатура = Ложь;
	Иначе
		ШапкаТЧ  = "НоменклатураШапкаГруз";
		СтрокаТЧ = "НоменклатураГруз";
		ФлагНоменклатура = ТипПФ = "Грузы";
	КонецЕсли;	
	
	Если ТекущийДокумент.Заказы.Количество() Тогда 
		ПервыйПункт   = ТекущийДокумент.Заказы[0].Пункт;
		ПерваяСтоянка = 0;
		ПредЗаказ     = Неопределено;
		
		Для Сч = 0 По ТекущийДокумент.Заказы.Количество()-1 Цикл 
			ТекСтрока = ТекущийДокумент.Заказы[Сч];
			Если Не ТекСтрока.Пункт = ПервыйПункт Тогда 
				Прервать;
			КонецЕсли;
			
			Если Не ПредЗаказ = ТекСтрока.ЗаказГрузоотправителя Тогда 
				ПерваяСтоянка = уатЗащищенныеФункцииСервер.СложитьВремя(ПерваяСтоянка, ТекСтрока.Стоянка);
				ПредЗаказ = ТекСтрока.ЗаказГрузоотправителя;
			КонецЕсли;
		КонецЦикла;
		
		ПерваяСтоянка = уатЗащищенныеФункцииСервер.СложитьВремя(ПерваяСтоянка, ТекущийДокумент.Заказы[0].СтоянкаИзПункта);
		
		мВремяПрибытия = уатЗащищенныеФункцииСервер.СложитьВремя(ТекущийДокумент.ДатаИВремяОтправленияПлан, -ПерваяСтоянка);
	КонецЕсли;
	
	ТабДокЗаказ   = Новый ТабличныйДокумент;
	
	ЕдиницаИзмеренияВес    = Константы.уатЕдиницаИзмеренияВеса.Получить();
	ЕдиницаИзмеренияОбъем  = Константы.уатЕдиницаИзмеренияОбъема.Получить();
	ЕдиницаИзмеренияМеста  = Справочники.уатВидыУпаковки_уэ.ПолучитьОсновнойВидУпаковки().КраткоеНаименование;

	ПараметрыПечати = Новый Структура("ЕдиницаИзмеренияВес, ЕдиницаИзмеренияОбъем, ЕдиницаИзмеренияМеста");
	ПараметрыПечати.ЕдиницаИзмеренияВес    = "(" + ЕдиницаИзмеренияВес +")";
	ПараметрыПечати.ЕдиницаИзмеренияОбъем  = "(" + ЕдиницаИзмеренияОбъем +")";
	ПараметрыПечати.ЕдиницаИзмеренияМеста  = ЕдиницаИзмеренияМеста;

	Если ТекущийДокумент.Заказы.Количество() <> 0 Тогда
		ОбластьМакета      = Макет.ПолучитьОбласть(ШапкаТЧ);
		ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
		ТабДокМаршрут.Вывести(ОбластьМакета);
	КонецЕсли;
	
	ОбластьМакетаАдрес          = Макет.ПолучитьОбласть("НоменклатураАдрес");
	ОбластьМакетаЗаказ          = Макет.ПолучитьОбласть(СтрокаТЧ);
		
	Заказы = ТекущийДокумент.Заказы.Выгрузить();
	
	ПредАдр = 0;
	ПредСтрока = Неопределено;
	ИзменилсяЗаказ = Ложь;
	ОбщийПробег = 0; мСтоянка  = 0; мОжидание  = 0; мВремя = 0;
	СчАдресов = 1;  СчЗаказов = 1;
	МаксВес    = 0; МаксОбъем    = 0; МаксКолМест    = 0; МаксЗаказов    = 0;
	ПеревезВес = 0; ПеревезОбъем = 0; ПеревезКолМест = 0; ПеревезЗаказов = 0;
	мВес       = 0; мОбъем       = 0; мКолМест       = 0; мРасстояние    = 0;
	ТекВес     = 0; ТекОбъем     = 0; ТекКолМест     = 0; ТекКолЗаказов  = 0;
	
	ПервыйПодПункт = Ложь;
	СтрокаСИзмАдресовВыведена = Ложь;
	Для Каждого ТекСтрока ИЗ Заказы цикл
		
		Если ТекСтрока.Пункт = Неопределено ИЛИ НЕ ЗначениеЗаполнено(ТекСтрока.Пункт) тогда
			Если НЕ ТекСтрока.ЗаказГрузоотправителя.Пустая() И (ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка
				ИЛИ ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяПогрузка) Тогда
				мАдр = ТекСтрока.ЗаказГрузоотправителя.АдресОтправления;
			ИначеЕсли НЕ ТекСтрока.ЗаказГрузоотправителя.Пустая() И (ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка
				ИЛИ ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяРазгрузка) Тогда
				мАдр = ТекСтрока.ЗаказГрузоотправителя.АдресДоставки;
			Иначе
				Продолжить;
			КонецЕсли;
		Иначе
			мАдр = ТекСтрока.Пункт;
		КонецЕсли;
		
		мАдр = уатОбщегоНазначения.ПолучитьАдресСтрокой(мАдр);
		
		Если мАдр <> ПредАдр тогда
			
			Если ПредАдр <> 0 тогда
				// выводим старую
				
				ОбластьМакетаАдрес.Параметры.Стоянка      = мСтоянка;
				ОбластьМакетаАдрес.Параметры.Ожидание     = мОжидание;
				ОбластьМакетаАдрес.Параметры.Время        = мВремя;
				ОбластьМакетаАдрес.Параметры.Расстояние   = мРасстояние;
				
				ТабДокМаршрут.Вывести(ОбластьМакетаАдрес);
				Если ИзменилсяЗаказ = Истина ИЛИ СтрокаСИзмАдресовВыведена = Ложь Тогда
					ОбластьМакетаЗаказ.Параметры.Вес            = мВес;
					ОбластьМакетаЗаказ.Параметры.Объем          = мОбъем;
					ОбластьМакетаЗаказ.Параметры.КоличествоМест = мКолМест;
					Если СчАдресов >= 2 тогда
						мВремяПрибытия = уатЗащищенныеФункцииСервер.СложитьВремя(мВремяПрибытия, мСтоянка);
						Если мВремяПрибытия > Дата(1970,01,01,00,00,00) Тогда
							ОбластьМакетаАдрес.Параметры.ПрибытиеПлан = мВремяПрибытия;
						КонецЕсли;
						ОбластьМакетаАдрес.Параметры.ПрибытиеПлан = мВремяПрибытия;
					КонецЕсли;
					ТабДокЗаказ.Вывести(ОбластьМакетаЗаказ);
					мВес = 0; мОбъем = 0; мКолМест = 0;
					СтрокаСИзмАдресовВыведена = Ложь;
				КонецЕсли;
				ТабДокМаршрут.Вывести(ТабДокЗаказ);
				ТабДокЗаказ = Новый ТабличныйДокумент;
				ИзменилсяЗаказ = Ложь;
			КонецЕсли;
			
			ПервыйПодПункт = Истина;
			ОбластьМакетаАдрес = Макет.ПолучитьОбласть("НоменклатураАдрес");
			ОбластьМакетаАдрес.Параметры.Адрес           = мАдр;
			ОбластьМакетаАдрес.Параметры.ПрибытиеПлан    = ?(ТекСтрока.ПрибытиеПлан > Дата(1970,01,01,00,00,00), ТекСтрока.ПрибытиеПлан, "");
			ОбластьМакетаАдрес.Параметры.УбытиеПлан      = ?(ТекСтрока.УбытиеПлан   > Дата(1970,01,01,00,00,00), ТекСтрока.УбытиеПлан, "");
			ОбластьМакетаАдрес.Параметры.НомерСтроки     = СчАдресов;
			мВремяПрибытия = уатЗащищенныеФункцииСервер.СложитьВремя(мВремяПрибытия, ТекСтрока.Время);
			мСтоянка    = 0;
			мСтоянка    = уатЗащищенныеФункцииСервер.СложитьВремя(мСтоянка, ТекСтрока.СтоянкаИзПункта);
			мОжидание   = 0;
			мВремя      = 0;
			мРасстояние = 0;
			СчАдресов = СчАдресов + 1;
			СчЗаказов = 1;
			ОбщийПробег = ОбщийПробег  + ТекСтрока.Расстояние;
			
		КонецЕсли;
		
		ПредАдр = мАдр;
		// произвольный пункт 
		Если ТекущийДокумент.ВидОперации = Перечисления.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя И НЕ ЗначениеЗаполнено(ТекСтрока.ЗаказГрузоотправителя) 
			ИЛИ ТекущийДокумент.ВидОперации = Перечисления.уатВидыОперацийМаршрутныйЛист.Произвольный И НЕ ЗначениеЗаполнено(ТекСтрока.Контрагент)
			И НЕ ЗначениеЗаполнено(ТекСтрока.Номенклатура) тогда
			
			мСтоянка    = мСтоянка  + ТекСтрока.Стоянка;
			мОжидание   = мОжидание + ТекСтрока.Ожидание;
			мВремя      = мВремя    + ТекСтрока.Время;
			мРасстояние = мРасстояние + ТекСтрока.Расстояние;
			ПредСтрока = ТекСтрока;
			СтрокаСИзмАдресовВыведена = Истина;
			Продолжить;
		КонецЕсли;
		
		флагПервыйПункт = Ложь;
		Если ПредСтрока = Неопределено
			ИЛИ (ТекущийДокумент.ВидОперации = Перечисления.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя И
			(ПредСтрока.ЗаказГрузоотправителя <> ТекСтрока.ЗаказГрузоотправителя ИЛИ ПредСтрока.ТипТочкиМаршрута <> ТекСтрока.ТипТочкиМаршрута))
			ИЛИ (ТекущийДокумент.ВидОперации = Перечисления.уатВидыОперацийМаршрутныйЛист.Произвольный) Тогда
			
			Если ИзменилсяЗаказ = Истина Тогда
				//Выводим
				ОбластьМакетаЗаказ.Параметры.Вес            = мВес;
				ОбластьМакетаЗаказ.Параметры.Объем          = мОбъем;
				ОбластьМакетаЗаказ.Параметры.КоличествоМест = мКолМест;
				ТабДокЗаказ.Вывести(ОбластьМакетаЗаказ);
				ИзменилсяЗаказ = Ложь;
				СтрокаСИзмАдресовВыведена = Истина;
				мВес = 0; мОбъем = 0; мКолМест = 0;
			КонецЕсли;
			
			Если ПервыйПодПункт = Истина Тогда
				мОжидание	 = ТекСтрока.Ожидание;
				мВремя		 = ТекСтрока.Время;
				мРасстояние	 = ТекСтрока.Расстояние;
				ПервыйПодПункт = Ложь;
			КонецЕсли;
			мСтоянка  = уатЗащищенныеФункцииСервер.СложитьВремя(мСтоянка,ТекСтрока.Стоянка);
		
			ОбластьМакетаЗаказ = Макет.ПолучитьОбласть(СтрокаТЧ);
			мКонтр = "";
			Если ТекСтрока.ЗаказГрузоотправителя.Пустая() И ЗначениеЗаполнено(ТекСтрока.Контрагент) тогда
				мКонтр = ТекСтрока.Контрагент;
			Иначе
				Если ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка
					ИЛИ ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяПогрузка Тогда
					мКонтр = ТекСтрока.ЗаказГрузоотправителя.Грузоотправитель;
				Иначе
					мКонтр = ТекСтрока.ЗаказГрузоотправителя.Грузополучатель;
				КонецЕсли;
				Если мКонтр = Неопределено ИЛИ НЕ ЗначениеЗаполнено(мКонтр) тогда
					мКонтр = ТекСтрока.ЗаказГрузоотправителя.Контрагент;
				КонецЕсли;
			КонецЕсли;
			
			ОбластьМакетаЗаказ.Параметры.НомерСтроки = "" + (СчАдресов - 1) + "." + СчЗаказов;
			флагПервыйПункт = Истина;
			ОбластьМакетаЗаказ.Параметры.Контрагент = мКонтр;
			ОбластьМакетаЗаказ.Параметры.Заказ      = ?(ТекСтрока.ЗаказГрузоотправителя.Пустая(), "", "" + ТекСтрока.ЗаказГрузоотправителя.Номер + " от " + Формат(ТекСтрока.ЗаказГрузоотправителя.Дата, "ДФ=dd.MM.yyyy"));
			Если ФлагНоменклатура И НЕ ТипПФ = "Заказы" Тогда
				ОбластьМакетаЗаказ.Параметры.Груз       = ?(ТипЗнч(ТекСтрока.Номенклатура) = Тип("СправочникСсылка.уатГрузовыеМеста_уэ"), "", ТекСтрока.Номенклатура);
			ИначеЕсли НЕ ТипПФ = "Заказы" Тогда
				ОбластьМакетаЗаказ.Параметры.Груз       = ?(ТипЗнч(ТекСтрока.Номенклатура) = Тип("СправочникСсылка.уатГрузовыеМеста_уэ"), ТекСтрока.Номенклатура, "");
			КонецЕсли;
			Если (ТипПФ = "Заказы") 
				ИЛИ (ФлагНоменклатура И ТипЗнч(ТекСтрока.Номенклатура) <> Тип("СправочникСсылка.уатГрузовыеМеста_уэ") 
				ИЛИ (НЕ ФлагНоменклатура И ТипЗнч(ТекСтрока.Номенклатура) = Тип("СправочникСсылка.уатГрузовыеМеста_уэ"))) Тогда
				ОбластьМакетаЗаказ.Параметры.Количество            = ?(ТипПФ = "Заказы", 1, ТекСтрока.Количество);
				ОбластьМакетаЗаказ.Параметры.ЕдиницаИзмерения      = ?(ТипПФ = "Заказы", Нстр("en = 'заказ'; ru = 'заказ'"),
				ТекСтрока.ЕдиницаИзмерения);
			КонецЕсли;
			ОбластьМакетаЗаказ.Параметры.НомерПоУчетуЗаказчика = ТекСтрока.ЗаказГрузоотправителя.НомерПоУчетуЗаказчика;
			ОбластьМакетаЗаказ.Параметры.Операция   = ТекСтрока.ТипТочкиМаршрута;
			
			СчЗаказов = СчЗаказов + 1;
			ИзменилсяЗаказ = Истина;
			
		КонецЕсли;
		
		мВес        = мВес        + ТекСтрока.ВесБрутто;
		мОбъем      = мОбъем      + ТекСтрока.Объем;
		мКолМест    = мКолМест    + ТекСтрока.КоличествоМест;
		Если ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка
			ИЛИ ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяПогрузка тогда
			ПеревезВес     = ПеревезВес     + ТекСтрока.ВесБрутто;
			ПеревезОбъем   = ПеревезОбъем   + ТекСтрока.Объем;
			ПеревезКолМест = ПеревезКолМест + ТекСтрока.КоличествоМест;
			ТекВес         = ТекВес         + ТекСтрока.ВесБрутто;
			ТекОбъем       = ТекОбъем       + ТекСтрока.Объем;
			ТекКолМест     = ТекКолМест     + ТекСтрока.КоличествоМест;
			ПеревезЗаказов = ПеревезЗаказов + 1;
			ТекКолЗаказов  = ТекКолЗаказов  + 1;
		ИначеЕсли ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка 
			ИЛИ ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяРазгрузка тогда
			ТекВес         = ТекВес         - ТекСтрока.ВесБрутто;
			ТекОбъем       = ТекОбъем       - ТекСтрока.Объем;
			ТекКолМест     = ТекКолМест     - ТекСтрока.КоличествоМест;
			ТекКолЗаказов  = ТекКолЗаказов  - 1;
		КонецЕсли;
		МаксВес     = Макс(МаксВес    ,ТекВес);
		МаксОбъем   = Макс(МаксОбъем  ,ТекОбъем);
		МаксКолМест = Макс(МаксКолМест,ТекКолМест);
		МаксЗаказов = Макс(МаксЗаказов,ТекКолЗаказов);
		
		Если (ТипПФ <> "Заказы") 
			И (ФлагНоменклатура И ТипЗнч(ТекСтрока.Номенклатура) <> Тип("СправочникСсылка.уатГрузовыеМеста_уэ") 
			ИЛИ (НЕ ФлагНоменклатура И ТипЗнч(ТекСтрока.Номенклатура) = Тип("СправочникСсылка.уатГрузовыеМеста_уэ")))Тогда
			//Выводим
			Если НЕ флагПервыйПункт Тогда
				ОбластьМакетаЗаказ = Макет.ПолучитьОбласть(СтрокаТЧ);
				мКонтр = "";
				Если ТекСтрока.ЗаказГрузоотправителя.Пустая() И ЗначениеЗаполнено(ТекСтрока.Контрагент) тогда
					мКонтр = ТекСтрока.Контрагент;
				Иначе
					Если ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка
						ИЛИ ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяПогрузка Тогда
						мКонтр = ТекСтрока.ЗаказГрузоотправителя.Грузоотправитель;
					Иначе
						мКонтр = ТекСтрока.ЗаказГрузоотправителя.Грузополучатель;
					КонецЕсли;
					Если мКонтр = Неопределено ИЛИ НЕ ЗначениеЗаполнено(мКонтр) тогда
						мКонтр = ТекСтрока.ЗаказГрузоотправителя.Контрагент;
					КонецЕсли;
				КонецЕсли;
				
				ОбластьМакетаЗаказ.Параметры.НомерСтроки = "" + (СчАдресов - 1) + "." + СчЗаказов;
				
				ОбластьМакетаЗаказ.Параметры.Контрагент = мКонтр;
				ОбластьМакетаЗаказ.Параметры.Заказ      = ?(ТекСтрока.ЗаказГрузоотправителя.Пустая(), "", "" + ТекСтрока.ЗаказГрузоотправителя.Номер + " от " + Формат(ТекСтрока.ЗаказГрузоотправителя.Дата, "ДФ=dd.MM.yyyy"));
				Если ФлагНоменклатура И НЕ ТипПФ = "Заказы" Тогда
					ОбластьМакетаЗаказ.Параметры.Груз       = ?(ТипЗнч(ТекСтрока.Номенклатура) = Тип("СправочникСсылка.уатГрузовыеМеста_уэ"), "", ТекСтрока.Номенклатура);
				ИначеЕсли НЕ ТипПФ = "Заказы" Тогда
					ОбластьМакетаЗаказ.Параметры.Груз       = ?(ТипЗнч(ТекСтрока.Номенклатура) = Тип("СправочникСсылка.уатГрузовыеМеста_уэ"), ТекСтрока.Номенклатура, "");
				КонецЕсли;
				ОбластьМакетаЗаказ.Параметры.Количество            = ТекСтрока.Количество;
				ОбластьМакетаЗаказ.Параметры.ЕдиницаИзмерения      = ТекСтрока.ЕдиницаИзмерения;
				ОбластьМакетаЗаказ.Параметры.НомерПоУчетуЗаказчика = ТекСтрока.ЗаказГрузоотправителя.НомерПоУчетуЗаказчика;
				ОбластьМакетаЗаказ.Параметры.Операция   = ТекСтрока.ТипТочкиМаршрута;
				
				СчЗаказов = СчЗаказов + 1;
			КонецЕсли;
			флагПервыйПункт = Ложь;
			
			ОбластьМакетаЗаказ.Параметры.Вес            = мВес;
			ОбластьМакетаЗаказ.Параметры.Объем          = мОбъем;
			ОбластьМакетаЗаказ.Параметры.КоличествоМест = мКолМест;
			ТабДокЗаказ.Вывести(ОбластьМакетаЗаказ);
			ИзменилсяЗаказ = Ложь;
			СтрокаСИзмАдресовВыведена = Истина;
			мВес = 0; мОбъем = 0; мКолМест = 0;
		КонецЕсли;

		ПредСтрока = ТекСтрока;
		
	КонецЦикла;
	
	ОбластьМакетаАдрес.Параметры.Стоянка    = мСтоянка;
	ОбластьМакетаАдрес.Параметры.Ожидание   = мОжидание;
	ОбластьМакетаАдрес.Параметры.Время      = мВремя;
	ОбластьМакетаАдрес.Параметры.Расстояние = мРасстояние;
	ТабДокМаршрут.Вывести(ОбластьМакетаАдрес);
	
	Если ИзменилсяЗаказ Тогда
		ОбластьМакетаЗаказ.Параметры.Вес            = мВес;
		ОбластьМакетаЗаказ.Параметры.Объем          = мОбъем;
		ОбластьМакетаЗаказ.Параметры.КоличествоМест = мКолМест;
		ТабДокЗаказ.Вывести(ОбластьМакетаЗаказ);
		СтрокаСИзмАдресовВыведена = Истина;
	КонецЕсли;
	
	Если ТекущийДокумент.Заказы.Количество() <> 0 Тогда
		ТабДокМаршрут.Вывести(ТабДокЗаказ);
		ОбластьМакета = Макет.ПолучитьОбласть("ПодвалНоменклатура");
		ОбластьМакета.Параметры.ЕдиницаИзмеренияВес   = ЕдиницаИзмеренияВес;
		ОбластьМакета.Параметры.ЕдиницаИзмеренияОбъем = ЕдиницаИзмеренияОбъем;
		ОбластьМакета.Параметры.ЕдиницаИзмеренияМеста = ЕдиницаИзмеренияМеста;
		
		ОбластьМакета.Параметры.ПеревезеноВес     = ?(ПеревезВес = 0, "", Формат(ПеревезВес, "ЧДЦ=3"));
		ОбластьМакета.Параметры.ПеревезеноОбъем   = ?(ПеревезОбъем = 0, "", Формат(ПеревезОбъем, "ЧДЦ=3"));
		ОбластьМакета.Параметры.ПеревезеноКолМест = ?(ПеревезКолМест = 0, "", Формат(ПеревезКолМест, "ЧДЦ=3"));
		ОбластьМакета.Параметры.ПеревезеноЗаказов = ПеревезЗаказов;
		ОбластьМакета.Параметры.МаксВес           = ?(МаксВес = 0, "", Формат(МаксВес, "ЧДЦ=3"));
		ОбластьМакета.Параметры.МаксОбъем         = ?(МаксОбъем = 0, "", Формат(МаксОбъем, "ЧДЦ=3"));
		ОбластьМакета.Параметры.МаксКолМест       = ?(МаксКолМест = 0, "", Формат(МаксКолМест, "ЧДЦ=3"));
		ОбластьМакета.Параметры.ПеревезеноЗаказов = ПеревезЗаказов;
		ОбластьМакета.Параметры.МаксЗаказов       = МаксЗаказов;
		
		Если ЕдиницаИзмеренияВес = Перечисления.уатЕдиницыИзмеренияВеса.Килограмм Тогда 
			КоэфВеса = 1000;
		Иначе 
			КоэфВеса = 1;
		КонецЕсли;
		РасчетВЦеломПоДокументу              = (Справочники.уатПараметрыВыработки.ТнКм.СпособВводаЗначений = Перечисления.уатСпособыВводаЗначенийВыработкивМЛ_уэ.ВЦеломПоДокументу);
		РасчетВЦеломПоДокументуВесГруза      = (Справочники.уатПараметрыВыработки.ВесГруза.СпособВводаЗначений = Перечисления.уатСпособыВводаЗначенийВыработкивМЛ_уэ.ВЦеломПоДокументу);
		РасчетВЦеломПоДокументуПробегСГрузом = (Справочники.уатПараметрыВыработки.ПробегСГрузом.СпособВводаЗначений = Перечисления.уатСпособыВводаЗначенийВыработкивМЛ_уэ.ВЦеломПоДокументу);
		
		ТнКм = 0;
		Если НЕ РасчетВЦеломПоДокументу Тогда
			тблГрузы = Новый ТаблицаЗначений;
			тблГрузы.Колонки.Добавить("Заказ");
			тблГрузы.Колонки.Добавить("Номенклатура");
			тблГрузы.Колонки.Добавить("ЕдиницаИзмерения");
			тблГрузы.Колонки.Добавить("Количество");

			мсвЗаказы = Новый Массив;
			Сч = -1;
			Для Каждого ТекЗаказ Из ТекущийДокумент.Заказы Цикл
				Сч = Сч + 1;
				Если (ТекЗаказ.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка
					ИЛИ ТекЗаказ.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяПогрузка
					ИЛИ ТекЗаказ.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка
					ИЛИ ТекЗаказ.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяРазгрузка) Тогда
					
					// добавляем или удаляем указанное количество груза
					НоваяСтрока = тблГрузы.Добавить();
					НоваяСтрока.Заказ = ТекЗаказ.ЗаказГрузоотправителя;
					НоваяСтрока.Номенклатура = ТекЗаказ.Номенклатура;
					НоваяСтрока.ЕдиницаИзмерения = ТекЗаказ.ЕдиницаИзмерения;
					
					Если ТекЗаказ.ЗаказГрузоотправителя.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам
						ИЛИ ТекЗаказ.ЗаказГрузоотправителя.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам Тогда
						Если ТекЗаказ.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка
							ИЛИ ТекЗаказ.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяПогрузка Тогда
							НоваяСтрока.Количество = ТекЗаказ.Количество;
						Иначе
							НоваяСтрока.Количество = -ТекЗаказ.Количество;
						КонецЕсли;
					Иначе //по заказу в целом
						Если ТекЗаказ.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка
							ИЛИ ТекЗаказ.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяПогрузка Тогда
							НоваяСтрока.Количество = 1;
						Иначе
							НоваяСтрока.Количество = -1;
						КонецЕсли;
					КонецЕсли;
					
					тблГрузы.Свернуть("Заказ, Номенклатура, ЕдиницаИзмерения", "Количество");
					
					// теперь нужно удалить строки с количеством = 0
					мсвСтрокиУдалить = тблГрузы.НайтиСтроки(Новый Структура("Количество", 0));
					Для Каждого ТекСтрокаГруз Из мсвСтрокиУдалить Цикл
						тблГрузы.Удалить(ТекСтрокаГруз);
					КонецЦикла;
					
				КонецЕсли;
				Если ТекЗаказ.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка
					ИЛИ ТекЗаказ.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяПогрузка тогда
					// вес груза
					Если НЕ РасчетВЦеломПоДокументуВесГруза Тогда
						ДопПараметры = Новый Структура("Заказ", ТекЗаказ.ЗаказГрузоотправителя);
						//ДобавитьВыработку(ТаблицаВыработка, Справочники.уатПараметрыВыработки.ВесГруза, ТекЗаказ.ВесБрутто, ДопПараметры);
					КонецЕсли;
				КонецЕсли;
				
				СледПункт = ?(ТекЗаказ.НомерСтроки < ТекущийДокумент.Заказы.Количество(), ТекущийДокумент.Заказы[ТекЗаказ.НомерСтроки].Пункт, Неопределено); //расчет пункта в следующей строке
				Если СледПункт <> ТекЗаказ.Пункт Тогда //это последняя строка в этом пункте, следующая строка - другой пункт
					флЭтоПоследнийПункт = Истина;
					Для СчДоп = Сч По (ТекущийДокумент.Заказы.Количество() - 1) Цикл
						Если ТекущийДокумент.Заказы[СчДоп].Пункт <> ТекЗаказ.Пункт Тогда
							флЭтоПоследнийПункт = Ложь;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					мсвУчитанныхЗаказов = Новый Массив;
					Для Каждого ТекГруз Из тблГрузы Цикл //просмотр состава грузов в этой точке маршрута
						Если мсвУчитанныхЗаказов.Найти(ТекГруз.Заказ) <> Неопределено Тогда //если много грузов по одному заказу, то учитываем только первый
							Продолжить;
						КонецЕсли;
						
						Если НЕ флЭтоПоследнийПункт Тогда //в последнем пункте время и расстояние не учитываем
							// расстояние (пробег с грузом)
							Если НЕ РасчетВЦеломПоДокументуПробегСГрузом Тогда
								ДопПараметры = Новый Структура("Заказ", ТекГруз.Заказ);
								//ДобавитьВыработку(ТаблицаВыработка, Справочники.уатПараметрыВыработки.ПробегСГрузом, ТекЗаказ.Расстояние, ДопПараметры);
							КонецЕсли;
						КонецЕсли;
						
						мсвУчитанныхЗаказов.Добавить(ТекГруз.Заказ);
					КонецЦикла;
				КонецЕсли;
				
				Если мсвЗаказы.Найти(ТекЗаказ.ЗаказГрузоотправителя) = Неопределено Тогда
					мсвЗаказы.Добавить(ТекЗаказ.ЗаказГрузоотправителя);
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого ТекЗаказ Из мсвЗаказы Цикл
				мсвСтрокиПробегСГрузом = ТекущийДокумент.ВыработкаТСиСотрудников.НайтиСтроки(Новый Структура(
					"ЗаказГрузоотправителя, ПараметрВыработки", ТекЗаказ, Справочники.уатПараметрыВыработки.ПробегСГрузом));
				мсвСтрокиВесГруза = ТекущийДокумент.ВыработкаТСиСотрудников.НайтиСтроки(Новый Структура(
					"ЗаказГрузоотправителя, ПараметрВыработки", ТекЗаказ, Справочники.уатПараметрыВыработки.ВесГруза));
				//мсвСтрокиПробегСГрузом = ТаблицаВыработка.НайтиСтроки(Новый Структура("Заказ, ПараметрВыработки", ТекЗаказ, Справочники.уатПараметрыВыработки.ПробегСГрузом));
				//мсвСтрокиВесГруза = ТаблицаВыработка.НайтиСтроки(Новый Структура("Заказ, ПараметрВыработки", ТекЗаказ, Справочники.уатПараметрыВыработки.ВесГруза));
				Если мсвСтрокиПробегСГрузом.Количество() > 0 И мсвСтрокиВесГруза.Количество() > 0 Тогда
					ТнКм = ТнКм + мсвСтрокиПробегСГрузом[0].КоличествоПлан * (мсвСтрокиВесГруза[0].КоличествоПлан / КоэфВеса);
				КонецЕсли;
			КонецЦикла;
		Иначе
			ТнКм = ТекущийДокумент.ПробегСГрузом * (ТекущийДокумент.ВесБрутто / КоэфВеса);
		КонецЕсли;
		ОбластьМакета.Параметры.ТнКм     = ?(ТнКм = 0, "", Формат(ТнКм, "ЧДЦ=3"));
		
		ТабДокМаршрут.Вывести(ОбластьМакета);
	КонецЕсли;
	
КонецФункции // ПечатнаяФорма()

Функция ПечатьКарты(МассивОбъектов, ОбъектыПечати, ПараметрыПечати=Неопределено)
	
	Если ПараметрыПечати = Неопределено Тогда 
		ПараметрыПечати = Новый Структура();
	КонецЕсли;
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_Карта";
	ТабличныйДокумент.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_МаршрутныйЛист_Карта";
	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.уатМаршрутныйЛист.ПФ_MXL_Карта");
	
	ПрикрепитьКартинкуКарты(ПараметрыПечати, Макет, ТабличныйДокумент);
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатьКарты()

Процедура ПрикрепитьКартинкуКарты(ПараметрыПечати, Макет, ТабличныйДокумент)
	
	Если ПараметрыПечати.Свойство("КартинкаBase64") Тогда 
		ДвоичныеДанныеКартинки = Base64Значение(ПараметрыПечати.КартинкаBase64);
		КартинкаКарты = Новый Картинка(ДвоичныеДанныеКартинки);
		
		Если Не КартинкаКарты = Неопределено Тогда 
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
			
			ОбластьМакета = Макет.ПолучитьОбласть("КартинкаКарты");
			Рисунок = ОбластьМакета.Рисунки.Добавить(ТипРисункаТабличногоДокумента.Картинка);
			Рисунок.РазмерКартинки = РазмерКартинки.Пропорционально;
			Рисунок.Картинка = КартинкаКарты;
			Рисунок.Верх   = 0; 
			Рисунок.Высота = 185;
			Рисунок.Ширина = 265;
			Рисунок.Лево   = 0; 
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьМаршрутныеПараметрыДереваЗаказов(ЗаказыДерево, ДатаИВремяОтправленияПлан)
	
	ЭлементыДерева = ЗаказыДерево.Строки;
	
	Если ЭлементыДерева.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПредВремяОтпр       = ЭлементыДерева[0].УбытиеПлан;
	ПредПунктСтрока     = Неопределено;
	СуммарноеРасстояние = 0;
	СуммарноеВремя      = 0;
	
	Для Каждого ТекСтрокаПункт Из ЭлементыДерева Цикл
		СуммарноеВремяСтоянки  = 0;
		
		Для Каждого ТекСтрокаЗаказ Из ТекСтрокаПункт.Строки Цикл 
			СуммарноеВремяСтоянки = уатЗащищенныеФункцииСервер.СложитьВремя(СуммарноеВремяСтоянки, ТекСтрокаЗаказ.Стоянка);
		КонецЦикла;
		
		СуммарноеВремяСтоянки = уатЗащищенныеФункцииСервер.СложитьВремя(СуммарноеВремяСтоянки, ТекСтрокаПункт.СтоянкаИзПункта);
		
		ТекСтрокаПункт.Стоянка = СуммарноеВремяСтоянки;
		СуммарноеРасстояние    = СуммарноеРасстояние + ТекСтрокаПункт.Расстояние;
		
		Если ЭлементыДерева.Индекс(ТекСтрокаПункт) = 0 Тогда
			ТекСтрокаПункт.ПрибытиеПлан = уатЗащищенныеФункцииСервер.СложитьВремя(ДатаИВремяОтправленияПлан, -СуммарноеВремяСтоянки);
			ТекСтрокаПункт.УбытиеПлан   = ДатаИВремяОтправленияПлан;
			ПредВремяОтпр               = ТекСтрокаПункт.УбытиеПлан;
		Иначе 
			ТекСтрокаПункт.ПрибытиеПлан = уатЗащищенныеФункцииСервер.СложитьВремя(ПредВремяОтпр,               ПредПунктСтрока.Время);
			ТекСтрокаПункт.УбытиеПлан   = уатЗащищенныеФункцииСервер.СложитьВремя(ТекСтрокаПункт.ПрибытиеПлан, СуммарноеВремяСтоянки);
			ПредВремяОтпр               = ТекСтрокаПункт.УбытиеПлан;
		КонецЕсли;
		ПредПунктСтрока = ТекСтрокаПункт;
	КонецЦикла;
	
КонецПроцедуры

Процедура ПечатьМаршрутныйЛистПункты(ТекущийДокумент, Макет, ТабДокМаршрут)
	
	ОбластьШапки               = "НоменклатураШапка";
	ОбластьСтроки              = "Номенклатура";
	ОбластьСтрокиГруппа        = "НоменклатураГруппа";
	ОбластьПодвал              = "ПодвалНоменклатура";
		
	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапки);
	ТабДокМаршрут.Вывести(ОбластьМакета);
	
	ЗаказыДерево = Новый ДеревоЗначений();
	ЗаказыДерево.Колонки.Добавить("ПунктЗаказНоменклатура",   Новый ОписаниеТипов("СправочникСсылка.уатПунктыНазначения, ДокументСсылка.уатЗаказГрузоотправителя, Строка, СправочникСсылка.Номенклатура"));
	ЗаказыДерево.Колонки.Добавить("Расстояние",               Новый ОписаниеТипов("Число"));
	ЗаказыДерево.Колонки.Добавить("Время",                    Новый ОписаниеТипов("Число"));
	ЗаказыДерево.Колонки.Добавить("ПрибытиеПлан",             Новый ОписаниеТипов("Дата"));
	ЗаказыДерево.Колонки.Добавить("ПрибытиеФакт",             Новый ОписаниеТипов("Дата"));
	ЗаказыДерево.Колонки.Добавить("УбытиеПлан",               Новый ОписаниеТипов("Дата"));
	ЗаказыДерево.Колонки.Добавить("УбытиеФакт",               Новый ОписаниеТипов("Дата"));
	ЗаказыДерево.Колонки.Добавить("Выполнен",                 Новый ОписаниеТипов("Булево"));
	ЗаказыДерево.Колонки.Добавить("ТипТочкиМаршрута",         Новый ОписаниеТипов("ПеречислениеСсылка.уатТипыТочекМаршрута"));
	ЗаказыДерево.Колонки.Добавить("ОкноС",                    Новый ОписаниеТипов("Дата"));
	ЗаказыДерево.Колонки.Добавить("ОкноПо",                   Новый ОписаниеТипов("Дата"));
	ЗаказыДерево.Колонки.Добавить("Количество",               Новый ОписаниеТипов("Число"));
	ЗаказыДерево.Колонки.Добавить("ВесБрутто",                Новый ОписаниеТипов("Число"));
	ЗаказыДерево.Колонки.Добавить("Объем",                    Новый ОписаниеТипов("Число"));
	ЗаказыДерево.Колонки.Добавить("КоличествоМест",           Новый ОписаниеТипов("Число"));
	ЗаказыДерево.Колонки.Добавить("ЕдиницаИзмерения",         Метаданные.Документы.уатМаршрутныйЛист.ТабличныеЧасти.Заказы.Реквизиты.ЕдиницаИзмерения.Тип);
	ЗаказыДерево.Колонки.Добавить("ЕдиницаИзмеренияПоЗаказу", Метаданные.Документы.уатМаршрутныйЛист.ТабличныеЧасти.Заказы.Реквизиты.ЕдиницаИзмеренияПоЗаказу.Тип);
	ЗаказыДерево.Колонки.Добавить("ЗаказГрузоотправителя",    Новый ОписаниеТипов("ДокументСсылка.уатЗаказГрузоотправителя"));
	ЗаказыДерево.Колонки.Добавить("GUIDСтроки",               Новый ОписаниеТипов("УникальныйИдентификатор"));
	ЗаказыДерево.Колонки.Добавить("Стоянка",                  Новый ОписаниеТипов("Число"));
	ЗаказыДерево.Колонки.Добавить("СтоянкаИзПункта",          Новый ОписаниеТипов("Число"));
	ЗаказыДерево.Колонки.Добавить("Ожидание",                 Новый ОписаниеТипов("Число"));
	ЗаказыДерево.Колонки.Добавить("Контрагент",               Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));

	Заказы = ТекущийДокумент.Заказы.Выгрузить();
	
	СменилсяПункт = Ложь;
	ПредСтрока    = Неопределено;
	ПредПункт     = Ложь;
	ПредЗаказ     = Неопределено;
	
	Для Каждого ТекСтрока Из Заказы Цикл
		//пункт
		Если ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка
			ИЛИ ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяПогрузка Тогда
			ТекПункт = ?(ЗначениеЗаполнено(ТекСтрока.Пункт), ТекСтрока.Пункт, ТекСтрока.ЗаказГрузоотправителя.АдресОтправления);
		ИначеЕсли ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка 
			ИЛИ ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяРазгрузка Тогда
			ТекПункт = ?(ЗначениеЗаполнено(ТекСтрока.Пункт), ТекСтрока.Пункт, ТекСтрока.ЗаказГрузоотправителя.АдресНазначения);
		Иначе
			ТекПункт = ТекСтрока.Пункт;
		КонецЕсли;
		
		Если ТекСтрока.ЗаказГрузоотправителя.Пустая() Или ТекСтрока.ТипТочкиМаршрута.Пустая() Тогда
			НовСтрокаПункт = ЗаказыДерево.Строки.Добавить();
			НовСтрокаПункт.ПунктЗаказНоменклатура = ТекПункт;
			НовСтрокаПункт.Расстояние             = ТекСтрока.Расстояние;
			НовСтрокаПункт.Время                  = ТекСтрока.Время;
			НовСтрокаПункт.ПрибытиеПлан           = ТекСтрока.ПрибытиеПлан;
			НовСтрокаПункт.ПрибытиеФакт           = ТекСтрока.ПрибытиеФакт;
			НовСтрокаПункт.УбытиеПлан             = ТекСтрока.УбытиеПлан;
			НовСтрокаПункт.УбытиеФакт             = ТекСтрока.УбытиеФакт;
			НовСтрокаПункт.Выполнен               = ТекСтрока.Выполнен;
			НовСтрокаПункт.ТипТочкиМаршрута       = ТекСтрока.ТипТочкиМаршрута;
			НовСтрокаПункт.Контрагент             = ТекСтрока.Контрагент;
			НовСтрокаПункт.Стоянка                = ТекСтрока.Стоянка;
			НовСтрокаПункт.Ожидание               = ТекСтрока.Ожидание;
			НовСтрокаПункт.ВесБрутто              = ТекСтрока.ВесБрутто;
			НовСтрокаПункт.Объем                  = ТекСтрока.Объем;
			НовСтрокаПункт.КоличествоМест         = ТекСтрока.КоличествоМест;
			
			ПредПункт     = ТекПункт;
			СменилсяПункт = Истина;
			
			Продолжить;
		КонецЕсли;
		
		Если Не ТекПункт = ПредПункт Или СменилсяПункт Тогда
			НовСтрокаПункт = ЗаказыДерево.Строки.Добавить();
			НовСтрокаПункт.ПунктЗаказНоменклатура = ТекПункт;
			НовСтрокаПункт.Расстояние             = ТекСтрока.Расстояние;
			НовСтрокаПункт.Время                  = ТекСтрока.Время;
			НовСтрокаПункт.ПрибытиеПлан           = ТекСтрока.ПрибытиеПлан;
			НовСтрокаПункт.ПрибытиеФакт           = ТекСтрока.ПрибытиеФакт;
			НовСтрокаПункт.УбытиеПлан             = ТекСтрока.УбытиеПлан;
			НовСтрокаПункт.УбытиеФакт             = ТекСтрока.УбытиеФакт;
			НовСтрокаПункт.СтоянкаИзПункта        = ТекСтрока.СтоянкаИзПункта;
			НовСтрокаПункт.Ожидание               = ТекСтрока.Ожидание;
			
			ПредПункт     = ТекПункт;
			СменилсяПункт = Истина;
		КонецЕсли;
		
		//Заказ
		Если Не ТекСтрока.ЗаказГрузоотправителя = ПредЗаказ 
			Или (Не ПредСтрока = Неопределено И Не ТекСтрока.ТипТочкиМаршрута = ПредСтрока.ТипТочкиМаршрута) 
			Или СменилсяПункт Тогда
			НовСтрокаЗаказ = НовСтрокаПункт.Строки.Добавить();
			НовСтрокаЗаказ.ПунктЗаказНоменклатура = ТекСтрока.ЗаказГрузоотправителя;
			НовСтрокаЗаказ.ТипТочкиМаршрута       = ТекСтрока.ТипТочкиМаршрута;
			НовСтрокаЗаказ.Стоянка                = ТекСтрока.Стоянка;
			НовСтрокаЗаказ.СтоянкаИзПункта        = ТекСтрока.СтоянкаИзПункта;
			НовСтрокаЗаказ.Расстояние             = ТекСтрока.Расстояние;
			НовСтрокаЗаказ.Время                  = ТекСтрока.Время;
			Если ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка
				ИЛИ ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяПогрузка Тогда
				НовСтрокаЗаказ.ОкноС  = ТекСтрока.ЗаказГрузоотправителя.ОтправлениеС;
				НовСтрокаЗаказ.ОкноПо = ТекСтрока.ЗаказГрузоотправителя.ОтправлениеПо;
			ИначеЕсли ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка
				ИЛИ ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяРазгрузка Тогда
				НовСтрокаЗаказ.ОкноС  = ТекСтрока.ЗаказГрузоотправителя.ДоставкаС;
				НовСтрокаЗаказ.ОкноПо = ТекСтрока.ЗаказГрузоотправителя.ДоставкаПо;
			КонецЕсли;
			ПредЗаказ     = ТекСтрока.ЗаказГрузоотправителя;
			СменилсяПункт = Ложь;
		КонецЕсли;
		
		//номенклатура
		НовСтрокаНоменклатура = НовСтрокаЗаказ.Строки.Добавить();
		НовСтрокаНоменклатура.ПунктЗаказНоменклатура      = ТекСтрока.Номенклатура;
		НовСтрокаНоменклатура.Количество                  = ТекСтрока.Количество;
		НовСтрокаНоменклатура.ВесБрутто                   = ТекСтрока.ВесБрутто;
		НовСтрокаНоменклатура.Объем                       = ТекСтрока.Объем;
		НовСтрокаНоменклатура.КоличествоМест              = ТекСтрока.КоличествоМест;
		НовСтрокаНоменклатура.ЕдиницаИзмерения            = ТекСтрока.ЕдиницаИзмерения;
		НовСтрокаНоменклатура.ЕдиницаИзмеренияПоЗаказу    = ТекСтрока.ЕдиницаИзмеренияПоЗаказу;
		НовСтрокаНоменклатура.ЗаказГрузоотправителя       = ТекСтрока.ЗаказГрузоотправителя;
		НовСтрокаНоменклатура.GUIDСтроки                  = ТекСтрока.GUIDСтроки;
		НовСтрокаНоменклатура.Выполнен                    = ТекСтрока.Выполнен;
		НовСтрокаНоменклатура.ТипТочкиМаршрута            = ТекСтрока.ТипТочкиМаршрута;
		
		ПредСтрока = ТекСтрока;
	КонецЦикла;
	
	Если ТекущийДокумент.ПересчетВремени = 0 Тогда
		ОбновитьМаршрутныеПараметрыДереваЗаказов(ЗаказыДерево, ТекущийДокумент.ДатаИВремяОтправленияПлан);
	КонецЕсли;
	ОбновитьГрузовыеПараметрыДереваЗаказов(ЗаказыДерево);
	
	МаксВес     = 0; МаксОбъем    = 0;   МаксКолМест    = 0;
	ПеревезВес  = 0; ПеревезОбъем = 0;   ПеревезКолМест = 0;
	ТекВес      = 0; ТекОбъем     = 0;   ТекКолМест     = 0;
	МаксЗаказов = 0; ПеревезЗаказов = 0; ТекКолЗаказов  = 0;
	
	СчСтрок = 1;
	Для Каждого ТекПункт Из ЗаказыДерево.Строки Цикл 
		мсвКонтрагентыПогрузка  = Новый Массив();
		мсвКонтрагентыРазгрузка = Новый Массив();
		мсвКонтрагентыПП        = Новый Массив();
		
		Для Каждого ТекЗаказ Из ТекПункт.Строки Цикл 
			Для Каждого ТекГруз Из ТекЗаказ.Строки Цикл 
				Если ТекЗаказ.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка
					ИЛИ ТекЗаказ.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяПогрузка Тогда
					ПеревезВес     = ПеревезВес     + ТекГруз.ВесБрутто;
					ПеревезОбъем   = ПеревезОбъем   + ТекГруз.Объем;
					ПеревезКолМест = ПеревезКолМест + ТекГруз.КоличествоМест;
					ТекВес         = ТекВес         + ТекГруз.ВесБрутто;
					ТекОбъем       = ТекОбъем       + ТекГруз.Объем;
					ТекКолМест     = ТекКолМест     + ТекГруз.КоличествоМест;
					ПеревезЗаказов = ПеревезЗаказов + 1;
					ТекКолЗаказов  = ТекКолЗаказов  + 1;
				ИначеЕсли ТекЗаказ.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка 
					ИЛИ ТекЗаказ.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяРазгрузка тогда
					ТекВес         = ТекВес         - ТекГруз.ВесБрутто;
					ТекОбъем       = ТекОбъем       - ТекГруз.Объем;
					ТекКолМест     = ТекКолМест     - ТекГруз.КоличествоМест;
					ТекКолЗаказов  = ТекКолЗаказов  - 1;
				КонецЕсли;
				МаксВес     = Макс(МаксВес,     ТекВес);
				МаксОбъем   = Макс(МаксОбъем,   ТекОбъем);
				МаксКолМест = Макс(МаксКолМест, ТекКолМест);
				МаксЗаказов = Макс(МаксЗаказов, ТекКолЗаказов);
			КонецЦикла;
			
			Если (ТекЗаказ.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка
				ИЛИ ТекЗаказ.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяПогрузка)
				И ЗначениеЗаполнено(ТекЗаказ.ПунктЗаказНоменклатура.Грузоотправитель) Тогда
				Если мсвКонтрагентыПогрузка.Найти(ТекЗаказ.ПунктЗаказНоменклатура.Грузоотправитель) = Неопределено Тогда
					мсвКонтрагентыПогрузка.Добавить(ТекЗаказ.ПунктЗаказНоменклатура.Грузоотправитель);
				КонецЕсли;
			ИначеЕсли ТекЗаказ.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка
				ИЛИ ТекЗаказ.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяПогрузка Тогда 
				Если мсвКонтрагентыПогрузка.Найти(ТекЗаказ.ПунктЗаказНоменклатура.Контрагент) = Неопределено Тогда
					мсвКонтрагентыПогрузка.Добавить(ТекЗаказ.ПунктЗаказНоменклатура.Контрагент);
				КонецЕсли;
			ИначеЕсли (ТекЗаказ.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка
				ИЛИ ТекЗаказ.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяРазгрузка)
				И ЗначениеЗаполнено(ТекЗаказ.ПунктЗаказНоменклатура.Грузополучатель) Тогда
				Если мсвКонтрагентыРазгрузка.Найти(ТекЗаказ.ПунктЗаказНоменклатура.Грузополучатель) = Неопределено Тогда
					мсвКонтрагентыРазгрузка.Добавить(ТекЗаказ.ПунктЗаказНоменклатура.Грузополучатель);
				КонецЕсли;
			ИначеЕсли ТекЗаказ.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ПромежуточныйПункт Тогда
				Если мсвКонтрагентыПП.Найти(ТекЗаказ.ПунктЗаказНоменклатура.Контрагент) = Неопределено Тогда
					мсвКонтрагентыПП.Добавить(ТекЗаказ.ПунктЗаказНоменклатура.Контрагент);
				КонецЕсли;
			Иначе
				Если мсвКонтрагентыРазгрузка.Найти(ТекЗаказ.ПунктЗаказНоменклатура.Контрагент) = Неопределено Тогда
					мсвКонтрагентыРазгрузка.Добавить(ТекЗаказ.ПунктЗаказНоменклатура.Контрагент);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		флПунктДобавлен = Ложь;
		
		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтроки);//МаршрутСтрокаГруппа
		
		Если мсвКонтрагентыПогрузка.Количество() И мсвКонтрагентыРазгрузка.Количество() Тогда 
			ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтрокиГруппа);
			
			СтрокаКонтрагентов1 = "";
			СтрокаКонтрагентов2 = "";
			Для Каждого ТекКонтрагент Из мсвКонтрагентыПогрузка Цикл 
				СтрокаКонтрагентов1 = СтрокаКонтрагентов1 + ?(СтрокаКонтрагентов1 = "", "", ", ") + ТекКонтрагент;
			КонецЦикла;
			Для Каждого ТекКонтрагент Из мсвКонтрагентыРазгрузка Цикл 
				СтрокаКонтрагентов2 = СтрокаКонтрагентов2 + ?(СтрокаКонтрагентов2 = "", "", ", ") + ТекКонтрагент;
			КонецЦикла;
			
			ОбластьМакета.Параметры.НомерСтроки  = СчСтрок;
			ОбластьМакета.Параметры.Адрес        = уатОбщегоНазначения.ПолучитьАдресСтрокой(ТекПункт.ПунктЗаказНоменклатура);
			ОбластьМакета.Параметры.Расстояние   = ТекПункт.Расстояние;
			ОбластьМакета.Параметры.Контрагент1  = СтрокаКонтрагентов1;
			ОбластьМакета.Параметры.Контрагент2  = СтрокаКонтрагентов2;
			ОбластьМакета.Параметры.ПрибытиеПлан = ?(ТекПункт.ПрибытиеПлан> Дата(1970,01,01,00,00,00), ТекПункт.ПрибытиеПлан, "");
			ОбластьМакета.Параметры.УбытиеПлан   = ?(ТекПункт.УбытиеПлан > Дата(1970,01,01,00,00,00), ТекПункт.УбытиеПлан , "");
			ОбластьМакета.Параметры.Операция1    = Перечисления.уатТипыТочекМаршрута.Погрузка;
			ОбластьМакета.Параметры.Операция2    = Перечисления.уатТипыТочекМаршрута.Разгрузка;
			ОбластьМакета.Параметры.Время        = ТекПункт.Время;
			ОбластьМакета.Параметры.Стоянка      = ТекПункт.Стоянка;
			ОбластьМакета.Параметры.Ожидание     = ТекПункт.Ожидание;
			
			ТабДокМаршрут.Вывести(ОбластьМакета);
			
			флПунктДобавлен = Истина;
			СчСтрок = СчСтрок + 1;
			
		ИначеЕсли мсвКонтрагентыПогрузка.Количество() Тогда 
			ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтроки);
			СтрокаКонтрагентов = "";
			
			Для Каждого ТекКонтрагент Из мсвКонтрагентыПогрузка Цикл 
				СтрокаКонтрагентов = СтрокаКонтрагентов + ?(СтрокаКонтрагентов = "", "", ", ") + ТекКонтрагент;
			КонецЦикла;
			
			ОбластьМакета.Параметры.НомерСтроки  = СчСтрок;
			ОбластьМакета.Параметры.Адрес        = уатОбщегоНазначения.ПолучитьАдресСтрокой(ТекПункт.ПунктЗаказНоменклатура);
			ОбластьМакета.Параметры.Расстояние   = ТекПункт.Расстояние;
			ОбластьМакета.Параметры.Контрагент   = СтрокаКонтрагентов;
			ОбластьМакета.Параметры.ПрибытиеПлан = ?(ТекПункт.ПрибытиеПлан > Дата(1970,01,01,00,00,00), ТекПункт.ПрибытиеПлан, "");
			ОбластьМакета.Параметры.УбытиеПлан   = ?(ТекПункт.УбытиеПлан > Дата(1970,01,01,00,00,00), ТекПункт.УбытиеПлан , "");
			ОбластьМакета.Параметры.Операция     = Перечисления.уатТипыТочекМаршрута.Погрузка;
			ОбластьМакета.Параметры.Время        = ТекПункт.Время;
			ОбластьМакета.Параметры.Стоянка      = ТекПункт.Стоянка;
			ОбластьМакета.Параметры.Ожидание     = ТекПункт.Ожидание;
			
			ТабДокМаршрут.Вывести(ОбластьМакета);
			
			флПунктДобавлен = Истина;
			СчСтрок = СчСтрок + 1;
		ИначеЕсли мсвКонтрагентыРазгрузка.Количество() Тогда 
			ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтроки);
			СтрокаКонтрагентов = "";
			
			Для Каждого ТекКонтрагент Из мсвКонтрагентыРазгрузка Цикл 
				СтрокаКонтрагентов = СтрокаКонтрагентов + ?(СтрокаКонтрагентов = "", "", ", ") + ТекКонтрагент;
			КонецЦикла;
			
			ОбластьМакета.Параметры.НомерСтроки  = СчСтрок;
			ОбластьМакета.Параметры.Адрес        = уатОбщегоНазначения.ПолучитьАдресСтрокой(ТекПункт.ПунктЗаказНоменклатура);
			ОбластьМакета.Параметры.Расстояние   = ТекПункт.Расстояние;
			ОбластьМакета.Параметры.Контрагент   = СтрокаКонтрагентов;
			ОбластьМакета.Параметры.ПрибытиеПлан = ?(ТекПункт.ПрибытиеПлан > Дата(1970,01,01,00,00,00), ТекПункт.ПрибытиеПлан, "");
			ОбластьМакета.Параметры.УбытиеПлан   = ?(ТекПункт.УбытиеПлан > Дата(1970,01,01,00,00,00), ТекПункт.УбытиеПлан , "");
			ОбластьМакета.Параметры.Операция     = Перечисления.уатТипыТочекМаршрута.Разгрузка;
			ОбластьМакета.Параметры.Время        = ТекПункт.Время;
			ОбластьМакета.Параметры.Стоянка      = ТекПункт.Стоянка;
			ОбластьМакета.Параметры.Ожидание     = ТекПункт.Ожидание;
			
			ТабДокМаршрут.Вывести(ОбластьМакета);
			
			флПунктДобавлен = Истина;
			СчСтрок = СчСтрок + 1;
		ИначеЕсли мсвКонтрагентыПП.Количество() Тогда 
			ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтроки);
			СтрокаКонтрагентов = "";
			
			Для Каждого ТекКонтрагент Из мсвКонтрагентыПП Цикл 
				СтрокаКонтрагентов = СтрокаКонтрагентов + ?(СтрокаКонтрагентов = "", "", ", ") + ТекКонтрагент;
			КонецЦикла;
			
			ОбластьМакета.Параметры.НомерСтроки  = СчСтрок;
			ОбластьМакета.Параметры.Адрес        = уатОбщегоНазначения.ПолучитьАдресСтрокой(ТекПункт.ПунктЗаказНоменклатура);
			ОбластьМакета.Параметры.Расстояние   = ТекПункт.Расстояние;
			ОбластьМакета.Параметры.Контрагент   = СтрокаКонтрагентов;
			ОбластьМакета.Параметры.ПрибытиеПлан = ?(ТекПункт.ПрибытиеПлан > Дата(1970,01,01,00,00,00), ТекПункт.ПрибытиеПлан, "");
			ОбластьМакета.Параметры.УбытиеПлан   = ?(ТекПункт.УбытиеПлан > Дата(1970,01,01,00,00,00), ТекПункт.УбытиеПлан , "");
			ОбластьМакета.Параметры.Операция     = Перечисления.уатТипыТочекМаршрута.ПромежуточныйПункт;
			ОбластьМакета.Параметры.Время        = ТекПункт.Время;
			ОбластьМакета.Параметры.Стоянка      = ТекПункт.Стоянка;
			ОбластьМакета.Параметры.Ожидание     = ТекПункт.Ожидание;
			
			ТабДокМаршрут.Вывести(ОбластьМакета);
			
			флПунктДобавлен = Истина;
			СчСтрок = СчСтрок + 1;

		КонецЕсли;
		
		Если Не флПунктДобавлен Тогда 
			ОбластьМакета.Параметры.НомерСтроки  = СчСтрок;
			ОбластьМакета.Параметры.Адрес        = уатОбщегоНазначения.ПолучитьАдресСтрокой(ТекПункт.ПунктЗаказНоменклатура);
			ОбластьМакета.Параметры.Расстояние   = ТекПункт.Расстояние;
			ОбластьМакета.Параметры.Контрагент   = ТекПункт.Контрагент;
			ОбластьМакета.Параметры.ПрибытиеПлан = ?(ТекПункт.ПрибытиеПлан > Дата(1970,01,01,00,00,00), ТекПункт.ПрибытиеПлан, "");
			ОбластьМакета.Параметры.УбытиеПлан   = ?(ТекПункт.УбытиеПлан > Дата(1970,01,01,00,00,00), ТекПункт.УбытиеПлан , "");
			ОбластьМакета.Параметры.Операция     = ТекПункт.ТипТочкиМаршрута;
			ОбластьМакета.Параметры.Время        = ТекПункт.Время;
			ОбластьМакета.Параметры.Стоянка      = ТекПункт.Стоянка;
			ОбластьМакета.Параметры.Ожидание     = ТекПункт.Ожидание;
			
			ТабДокМаршрут.Вывести(ОбластьМакета);
			
			СчСтрок = СчСтрок + 1;
			
			Если ТекПункт.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка
				ИЛИ ТекПункт.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяПогрузка Тогда
				ПеревезВес     = ПеревезВес     + ТекПункт.ВесБрутто;
				ПеревезОбъем   = ПеревезОбъем   + ТекПункт.Объем;
				ПеревезКолМест = ПеревезКолМест + ТекПункт.КоличествоМест;
				ТекВес         = ТекВес         + ТекПункт.ВесБрутто;
				ТекОбъем       = ТекОбъем       + ТекПункт.Объем;
				ТекКолМест     = ТекКолМест     + ТекПункт.КоличествоМест;
				ПеревезЗаказов = ПеревезЗаказов + 1;
				ТекКолЗаказов  = ТекКолЗаказов  + 1;
			ИначеЕсли ТекПункт.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка
				ИЛИ ТекПункт.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяРазгрузка тогда
				ТекВес         = ТекВес         - ТекПункт.ВесБрутто;
				ТекОбъем       = ТекОбъем       - ТекПункт.Объем;
				ТекКолМест     = ТекКолМест     - ТекПункт.КоличествоМест;
				ТекКолЗаказов  = ТекКолЗаказов  - 1;
			КонецЕсли;
			МаксВес     = Макс(МаксВес,     ТекВес);
			МаксОбъем   = Макс(МаксОбъем,   ТекОбъем);
			МаксКолМест = Макс(МаксКолМест, ТекКолМест);
			МаксЗаказов = Макс(МаксЗаказов, ТекКолЗаказов);
			
		КонецЕсли;
	КонецЦикла;
	
	Если ТекущийДокумент.Заказы.Количество() <> 0 Тогда
		ЕдиницаИзмеренияВес    = Константы.уатЕдиницаИзмеренияВеса.Получить();
		ЕдиницаИзмеренияОбъем  = Константы.уатЕдиницаИзмеренияОбъема.Получить();
		ЕдиницаИзмеренияМеста  = Справочники.уатВидыУпаковки_уэ.ПолучитьОсновнойВидУпаковки();

		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьПодвал);
		
		ОбластьМакета.Параметры.ЕдиницаИзмеренияВес   = ЕдиницаИзмеренияВес;
		ОбластьМакета.Параметры.ЕдиницаИзмеренияОбъем = ЕдиницаИзмеренияОбъем;
		ОбластьМакета.Параметры.ЕдиницаИзмеренияМеста = ЕдиницаИзмеренияМеста;
		
		ОбластьМакета.Параметры.ПеревезеноВес     = ?(ПеревезВес = 0, "", Формат(ПеревезВес, "ЧДЦ=3"));
		ОбластьМакета.Параметры.ПеревезеноОбъем   = ?(ПеревезОбъем = 0, "", Формат(ПеревезОбъем, "ЧДЦ=3"));
		ОбластьМакета.Параметры.ПеревезеноКолМест = ?(ПеревезКолМест = 0, "", Формат(ПеревезКолМест, "ЧДЦ=3"));
		ОбластьМакета.Параметры.ПеревезеноЗаказов = ПеревезЗаказов;
		ОбластьМакета.Параметры.МаксВес           = ?(МаксВес = 0, "", Формат(МаксВес, "ЧДЦ=3"));
		ОбластьМакета.Параметры.МаксОбъем         = ?(МаксОбъем = 0, "", Формат(МаксОбъем, "ЧДЦ=3"));
		ОбластьМакета.Параметры.МаксКолМест       = ?(МаксКолМест = 0, "", Формат(МаксКолМест, "ЧДЦ=3"));
		ОбластьМакета.Параметры.ПеревезеноЗаказов = ПеревезЗаказов;
		ОбластьМакета.Параметры.МаксЗаказов       = МаксЗаказов;
		
		Если ЕдиницаИзмеренияВес = Перечисления.уатЕдиницыИзмеренияВеса.Килограмм Тогда 
			КоэфВеса = 1000;
		Иначе 
			КоэфВеса = 1;
		КонецЕсли;
		РасчетВЦеломПоДокументу              = (Справочники.уатПараметрыВыработки.ТнКм.СпособВводаЗначений = Перечисления.уатСпособыВводаЗначенийВыработкивМЛ_уэ.ВЦеломПоДокументу);
		РасчетВЦеломПоДокументуВесГруза      = (Справочники.уатПараметрыВыработки.ВесГруза.СпособВводаЗначений = Перечисления.уатСпособыВводаЗначенийВыработкивМЛ_уэ.ВЦеломПоДокументу);
		РасчетВЦеломПоДокументуПробегСГрузом = (Справочники.уатПараметрыВыработки.ПробегСГрузом.СпособВводаЗначений = Перечисления.уатСпособыВводаЗначенийВыработкивМЛ_уэ.ВЦеломПоДокументу);

		ТнКм = 0;
		Если НЕ РасчетВЦеломПоДокументу Тогда
			тблГрузы = Новый ТаблицаЗначений;
			тблГрузы.Колонки.Добавить("Заказ");
			тблГрузы.Колонки.Добавить("Номенклатура");
			тблГрузы.Колонки.Добавить("ЕдиницаИзмерения");
			тблГрузы.Колонки.Добавить("Количество");

			мсвЗаказы = Новый Массив;
			Сч = -1;
			Для Каждого ТекЗаказ Из ТекущийДокумент.Заказы Цикл
				Сч = Сч + 1;
				Если (ТекЗаказ.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка 
					ИЛИ ТекЗаказ.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяПогрузка
					ИЛИ ТекЗаказ.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка
					ИЛИ ТекЗаказ.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяРазгрузка) Тогда
					
					// добавляем или удаляем указанное количество груза
					НоваяСтрока = тблГрузы.Добавить();
					НоваяСтрока.Заказ = ТекЗаказ.ЗаказГрузоотправителя;
					НоваяСтрока.Номенклатура = ТекЗаказ.Номенклатура;
					НоваяСтрока.ЕдиницаИзмерения = ТекЗаказ.ЕдиницаИзмерения;
					
					Если ТекЗаказ.ЗаказГрузоотправителя.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам
						ИЛИ ТекЗаказ.ЗаказГрузоотправителя.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам Тогда
						Если ТекЗаказ.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка
							ИЛИ ТекЗаказ.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяПогрузка Тогда
							НоваяСтрока.Количество = ТекЗаказ.Количество;
						Иначе
							НоваяСтрока.Количество = -ТекЗаказ.Количество;
						КонецЕсли;
					Иначе //по заказу в целом
						Если ТекЗаказ.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка
							ИЛИ ТекЗаказ.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяПогрузка Тогда
							НоваяСтрока.Количество = 1;
						Иначе
							НоваяСтрока.Количество = -1;
						КонецЕсли;
					КонецЕсли;
					
					тблГрузы.Свернуть("Заказ, Номенклатура, ЕдиницаИзмерения", "Количество");
					
					// теперь нужно удалить строки с количеством = 0
					мсвСтрокиУдалить = тблГрузы.НайтиСтроки(Новый Структура("Количество", 0));
					Для Каждого ТекСтрокаГруз Из мсвСтрокиУдалить Цикл
						тблГрузы.Удалить(ТекСтрокаГруз);
					КонецЦикла;
					
				КонецЕсли;
				Если ТекЗаказ.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка
					ИЛИ ТекЗаказ.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяПогрузка тогда
					// вес груза
					Если НЕ РасчетВЦеломПоДокументуВесГруза Тогда
						ДопПараметры = Новый Структура("Заказ", ТекЗаказ.ЗаказГрузоотправителя);
						//ДобавитьВыработку(ТаблицаВыработка, Справочники.уатПараметрыВыработки.ВесГруза, ТекЗаказ.ВесБрутто, ДопПараметры);
					КонецЕсли;
				КонецЕсли;
				
				СледПункт = ?(ТекЗаказ.НомерСтроки < ТекущийДокумент.Заказы.Количество(), ТекущийДокумент.Заказы[ТекЗаказ.НомерСтроки].Пункт, Неопределено); //расчет пункта в следующей строке
				Если СледПункт <> ТекЗаказ.Пункт Тогда //это последняя строка в этом пункте, следующая строка - другой пункт
					флЭтоПоследнийПункт = Истина;
					Для СчДоп = Сч По (ТекущийДокумент.Заказы.Количество() - 1) Цикл
						Если ТекущийДокумент.Заказы[СчДоп].Пункт <> ТекЗаказ.Пункт Тогда
							флЭтоПоследнийПункт = Ложь;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					мсвУчитанныхЗаказов = Новый Массив;
					Для Каждого ТекГруз Из тблГрузы Цикл //просмотр состава грузов в этой точке маршрута
						Если мсвУчитанныхЗаказов.Найти(ТекГруз.Заказ) <> Неопределено Тогда //если много грузов по одному заказу, то учитываем только первый
							Продолжить;
						КонецЕсли;
						
						Если НЕ флЭтоПоследнийПункт Тогда //в последнем пункте время и расстояние не учитываем
							// расстояние (пробег с грузом)
							Если НЕ РасчетВЦеломПоДокументуПробегСГрузом Тогда
								ДопПараметры = Новый Структура("Заказ", ТекГруз.Заказ);
								//ДобавитьВыработку(ТаблицаВыработка, Справочники.уатПараметрыВыработки.ПробегСГрузом, ТекЗаказ.Расстояние, ДопПараметры);
							КонецЕсли;
						КонецЕсли;
						
						мсвУчитанныхЗаказов.Добавить(ТекГруз.Заказ);
					КонецЦикла;
				КонецЕсли;
				
				Если мсвЗаказы.Найти(ТекЗаказ.ЗаказГрузоотправителя) = Неопределено Тогда
					мсвЗаказы.Добавить(ТекЗаказ.ЗаказГрузоотправителя);
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого ТекЗаказ Из мсвЗаказы Цикл
				мсвСтрокиПробегСГрузом = ТекущийДокумент.ВыработкаТСиСотрудников.НайтиСтроки(Новый Структура(
					"ЗаказГрузоотправителя, ПараметрВыработки", ТекЗаказ, Справочники.уатПараметрыВыработки.ПробегСГрузом));
				мсвСтрокиВесГруза = ТекущийДокумент.ВыработкаТСиСотрудников.НайтиСтроки(Новый Структура(
					"ЗаказГрузоотправителя, ПараметрВыработки", ТекЗаказ, Справочники.уатПараметрыВыработки.ВесГруза));
				//мсвСтрокиПробегСГрузом = ТаблицаВыработка.НайтиСтроки(Новый Структура("Заказ, ПараметрВыработки", ТекЗаказ, Справочники.уатПараметрыВыработки.ПробегСГрузом));
				//мсвСтрокиВесГруза = ТаблицаВыработка.НайтиСтроки(Новый Структура("Заказ, ПараметрВыработки", ТекЗаказ, Справочники.уатПараметрыВыработки.ВесГруза));
				Если мсвСтрокиПробегСГрузом.Количество() > 0 И мсвСтрокиВесГруза.Количество() > 0 Тогда
					ТнКм = ТнКм + мсвСтрокиПробегСГрузом[0].КоличествоПлан * (мсвСтрокиВесГруза[0].КоличествоПлан / КоэфВеса);
				КонецЕсли;
			КонецЦикла;
		Иначе
			ТнКм = ТекущийДокумент.ПробегСГрузом * (ТекущийДокумент.ВесБрутто / КоэфВеса);
		КонецЕсли;
		ОбластьМакета.Параметры.ТнКм     = ?(ТнКм = 0, "", Формат(ТнКм, "ЧДЦ=3"));

		ТабДокМаршрут.Вывести(ОбластьМакета);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьГрузовыеПараметрыДереваЗаказов(ЗаказыДерево)
	
	ТекВес   = 0; ТекОбъем   = 0; ТекКолМест   = 0;
	ЗаказВес = 0; ЗаказОбъем = 0; ЗаказКолМест = 0;
	
	СтрокиДерева = ЗаказыДерево.Строки;
	
	Для Каждого ТекПункт Из СтрокиДерева Цикл
		Подстроки = ТекПункт.Строки;
		Для Каждого ТекЗаказ Из Подстроки Цикл
			ЗаказВес = 0; ЗаказОбъем = 0; ЗаказКолМест = 0;
			
			Подстроки_2 = ТекЗаказ.Строки;
			
			Для Каждого ТекНоменклатура Из Подстроки_2 Цикл
				ЗаказВес     = ЗаказВес     + ТекНоменклатура.ВесБрутто;
				ЗаказОбъем   = ЗаказОбъем   + ТекНоменклатура.Объем;
				ЗаказКолМест = ЗаказКолМест + ТекНоменклатура.КоличествоМест;
			КонецЦикла; //ТекНоменклатура Из ТекЗаказ.Строки
			
			ТекЗаказ.ВесБрутто      = ЗаказВес;
			ТекЗаказ.Объем          = ЗаказОбъем;
			ТекЗаказ.КоличествоМест = ЗаказКолМест;
			Если ТекЗаказ.ТипТочкиМаршрута = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Погрузка")
				ИЛИ ТекЗаказ.ТипТочкиМаршрута = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.ДополнительнаяПогрузка") Тогда
				ТекВес     = ТекВес     + ЗаказВес;
				ТекОбъем   = ТекОбъем   + ЗаказОбъем;
				ТекКолМест = ТекКолМест + ЗаказКолМест;
			ИначеЕсли ТекЗаказ.ТипТочкиМаршрута = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Разгрузка")
				ИЛИ ТекЗаказ.ТипТочкиМаршрута = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.ДополнительнаяРазгрузка") Тогда
				ТекВес     = ТекВес     - ЗаказВес;
				ТекОбъем   = ТекОбъем   - ЗаказОбъем;
				ТекКолМест = ТекКолМест - ЗаказКолМест;
			КонецЕсли;
		КонецЦикла;//ТекЗаказ Из ТекПункт.Строки
		
		Если Подстроки.Количество() <> 0 Тогда
			ТекПункт.ВесБрутто      = ТекВес;
			ТекПункт.Объем          = ТекОбъем;
			ТекПункт.КоличествоМест = ТекКолМест;
		КонецЕсли;
	КонецЦикла;//ТекПункт ИЗ ЗаказыДерево.Строки
	
КонецПроцедуры

// Процедура - Заполнить структуру получателей печатных форм
//
// Параметры:
//  СтруктураДанныхОбъектаПечати - Структура - Структура данных получателей печатной формы
//
Процедура ЗаполнитьСтруктуруПолучателейПечатныхФорм(СтруктураДанныхОбъектаПечати) Экспорт
	
	СтруктураДанныхОбъектаПечати.ОсновнойПолучатель = "Контрагент";
	 
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Контрагент");
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("КонтактноеЛицо");
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Грузоотправитель");
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Грузополучатель");
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
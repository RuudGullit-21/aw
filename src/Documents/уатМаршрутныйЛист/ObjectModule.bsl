
#Область ПеременныеОбъекта

Перем мВалютаРегламентированногоУчета Экспорт;//Переменная хранит значение валюты регламентированного учёта,
                                              // полученное из констант
Перем табВыбраннаяНоменклатура Экспорт; //таблица с уже добавленной в таб часть заказы номенклатурой

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

// Функция выполняет получение таблицы номенклатуры, которая еще не присутствует в
//  маршрутном листе по указанному заказу
//
// Параметры:
//  Заказ	 - 	 - Заказ из которого производится выбор номенклатуры
// 
// Возвращаемое значение:
//  Таблица - доступной к выбору номенклатуры
//
Функция ПолучитьТаблицуДоступнойНоменклатурыПоЗаказу(Заказ) Экспорт
	
	Если НЕ ТипЗнч(Заказ) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") тогда
		мТаб = Новый ТаблицаЗначений();
		Возврат мТаб;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	мМенеджерВрТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.МенеджерВременныхТаблиц = мМенеджерВрТаблиц;
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ 
	|	Заказчик,
	|	ЗаказГрузоотправителя,
	|	Номенклатура,
	|	ЕдиницаИзмерения,
	|	Количество
	|ПОМЕСТИТЬ 
	|	ВремТаб 
	|ИЗ &ВыбНоменклатура КАК Таб";
	
	Запрос.УстановитьПараметр("ВыбНоменклатура", табВыбраннаяНоменклатура);
	Запрос.Выполнить();
		
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатЗаказыГрузоотправителейОстатки.ЗаказГрузоотправителя КАК Заказ,
	|	уатЗаказыГрузоотправителейОстатки.Номенклатура КАК Номенклатура,
	|	уатЗаказыГрузоотправителейОстатки.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	уатЗаказыГрузоотправителейОстатки.КоличествоОстаток - ЕСТЬNULL(ВремТаб.Количество, 0) КАК Количество,
	|	ЕСТЬNULL(уатЗаказГрузоотправителяЗаказы.ВесБрутто, 0) / ЕСТЬNULL(уатЗаказГрузоотправителяЗаказы.Количество, 1) 
	|		КАК ВесЕдиницы,
	|	ЕСТЬNULL(уатЗаказГрузоотправителяЗаказы.Объем, 0) / ЕСТЬNULL(уатЗаказГрузоотправителяЗаказы.Количество, 1) 
	|		КАК ОбъемЕдиницы,
	|	ЕСТЬNULL(уатЗаказГрузоотправителяЗаказы.КоличествоМест, 0) / ЕСТЬNULL(уатЗаказГрузоотправителяЗаказы.Количество, 1)
	|		КАК КоличествоМестЕдиницы,
	|	(уатЗаказыГрузоотправителейОстатки.КоличествоОстаток - ЕСТЬNULL(ВремТаб.Количество, 0)) * 
	|		ЕСТЬNULL(уатЗаказГрузоотправителяЗаказы.ВесБрутто, 0) / ЕСТЬNULL(уатЗаказГрузоотправителяЗаказы.Количество, 1)
	|			КАК Вес,
	|	(уатЗаказыГрузоотправителейОстатки.КоличествоОстаток - ЕСТЬNULL(ВремТаб.Количество, 0)) * 
	|		ЕСТЬNULL(уатЗаказГрузоотправителяЗаказы.Объем, 0) / ЕСТЬNULL(уатЗаказГрузоотправителяЗаказы.Количество, 1)
	|			КАК Объем,
	|	(уатЗаказыГрузоотправителейОстатки.КоличествоОстаток - ЕСТЬNULL(ВремТаб.Количество, 0)) * 
	|		ЕСТЬNULL(уатЗаказГрузоотправителяЗаказы.КоличествоМест, 0) /
	|			ЕСТЬNULL(уатЗаказГрузоотправителяЗаказы.Количество, 1) КАК КоличествоМест
	|ИЗ
	|	РегистрНакопления.уатЗаказыГрузоотправителей.Остатки(&ДатаКон, ЗаказГрузоотправителя = &ВыбЗаказ)
	|			КАК уатЗаказыГрузоотправителейОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВремТаб КАК ВремТаб
	|		ПО уатЗаказыГрузоотправителейОстатки.ЗаказГрузоотправителя.Контрагент = ВремТаб.Заказчик
	|			И уатЗаказыГрузоотправителейОстатки.ЗаказГрузоотправителя = ВремТаб.ЗаказГрузоотправителя
	|			И уатЗаказыГрузоотправителейОстатки.Номенклатура = ВремТаб.Номенклатура
	|			И уатЗаказыГрузоотправителейОстатки.ЕдиницаИзмерения = ВремТаб.ЕдиницаИзмерения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя.Товары КАК уатЗаказГрузоотправителяЗаказы
	|		ПО уатЗаказыГрузоотправителейОстатки.ЗаказГрузоотправителя.Контрагент = 
	|				уатЗаказГрузоотправителяЗаказы.Ссылка.Контрагент
	|			И уатЗаказыГрузоотправителейОстатки.ЗаказГрузоотправителя = уатЗаказГрузоотправителяЗаказы.Ссылка
	|			И уатЗаказыГрузоотправителейОстатки.Номенклатура = уатЗаказГрузоотправителяЗаказы.Номенклатура
	|			И уатЗаказыГрузоотправителейОстатки.ЕдиницаИзмерения = уатЗаказГрузоотправителяЗаказы.ЕдиницаИзмерения
	|ГДЕ
	|	уатЗаказыГрузоотправителейОстатки.КоличествоОстаток - ЕСТЬNULL(ВремТаб.Количество, 0) > 0";
	
	Запрос.УстановитьПараметр("ВыбЗаказ", Заказ);
	Запрос.УстановитьПараметр("ДатаКон" , КонецДня(ТекущаяДата()));
	Возврат Запрос.Выполнить().Выгрузить();
	
КОнецФункции

// Процедура выполняет пересчет времени и расстояния между пунктами.
//
// Параметры:
//  ПерезаполнитьВремяРасстояние - 	 - 
//
Процедура ОбновитьВремяРасстояниеМеждуПунктами(ПерезаполнитьВремяРасстояние=Ложь) Экспорт
	
	ДеревоПунктов = Новый ДеревоЗначений;
	ДеревоПунктов.Колонки.Добавить("Группировка", Новый ОписаниеТипов("СправочникСсылка.уатПунктыНазначения, Строка, Число"));
	ДеревоПунктов.Колонки.Добавить("Время",       Новый ОписаниеТипов("Число"));
	ДеревоПунктов.Колонки.Добавить("Расстояние",  Новый ОписаниеТипов("Число"));
	ДеревоПунктов.Колонки.Добавить("Заказ",       Новый ОписаниеТипов("ДокументСсылка.уатЗаказГрузоотправителя"));
	
	ПредЗаказ  = Неопределено;
	ПредСтрока = Неопределено;
	ПредПункт  = Ложь;
	Для Каждого ТекСтрока Из Заказы Цикл
		//пункт
		Если ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка 
			ИЛИ ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяПогрузка Тогда
			ТекПункт = ?(ЗначениеЗаполнено(ТекСтрока.Пункт), ТекСтрока.Пункт, ТекСтрока.ЗаказГрузоотправителя.АдресОтправления);
		ИначеЕсли ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка
			ИЛИ ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяРазгрузка Тогда
			ТекПункт = ?(ЗначениеЗаполнено(ТекСтрока.Пункт), ТекСтрока.Пункт, ТекСтрока.ЗаказГрузоотправителя.АдресНазначения);
		Иначе
			ТекПункт = ТекСтрока.Пункт;
		КонецЕсли;
		
		Если ТекСтрока.ЗаказГрузоотправителя.Пустая() Или ТекСтрока.ТипТочкиМаршрута.Пустая() Тогда
			НовСтрокаПункт = ДеревоПунктов.Строки.Добавить();
			НовСтрокаПункт.Группировка = ТекПункт;
			НовСтрокаПункт.Время       = ТекСтрока.Время;
			НовСтрокаПункт.Расстояние  = ТекСтрока.Расстояние;
			
			НовПодстрока = НовСтрокаПункт.Строки.Добавить();
			НовПодстрока.Группировка = ТекСтрока.НомерСтроки;
			
			ПредПункт = ТекПункт;
			
			Продолжить;
		КонецЕсли;
		
		Если Не ТекПункт = ПредПункт Тогда
			НовСтрокаПункт = ДеревоПунктов.Строки.Добавить();
			НовСтрокаПункт.Группировка = ТекПункт;
			НовСтрокаПункт.Время       = ТекСтрока.Время;
			НовСтрокаПункт.Расстояние  = ТекСтрока.Расстояние;
			НовСтрокаПункт.Заказ       = ТекСтрока.ЗаказГрузоотправителя;
			
			ПредПункт = ТекПункт;
		КонецЕсли;
		
		НовПодстрока = НовСтрокаПункт.Строки.Добавить();
		НовПодстрока.Группировка = ТекСтрока.НомерСтроки;
		
		ПредСтрока = ТекСтрока;
	КонецЦикла;
	
	мсвПункты = Новый Массив;
	Для Сч = 0 По ДеревоПунктов.Строки.Количество()-2 Цикл
		ТекСтрока = ДеревоПунктов.Строки[Сч];
		СледСтрока = ДеревоПунктов.Строки[Сч+1];
		Если ЗначениеЗаполнено(ТекСтрока.Группировка) И ЗначениеЗаполнено(СледСтрока.Группировка) 
				И (ПерезаполнитьВремяРасстояние Или (Не ПерезаполнитьВремяРасстояние И Не ЗначениеЗаполнено(ТекСтрока.Время) И Не ЗначениеЗаполнено(ТекСтрока.Расстояние))) Тогда
			мсвПункты.Добавить(Новый Структура("Пункт1, Пункт2, ВремяВыезда, Заказ", 
				ТекСтрока.Группировка, 
				СледСтрока.Группировка, 
				'00010101' + (ДатаИВремяОтправленияПлан - НачалоДня(ДатаИВремяОтправленияПлан)),
				ТекСтрока.Заказ));
		КонецЕсли;
	КонецЦикла;
	
	уатЗащищенныеФункцииСервер.РассчитатьТаблицуРасстояниеВремяМеждуПунктами(мсвПункты);
	
	Для Сч = 0 По ДеревоПунктов.Строки.Количество()-2 Цикл
		ТекСтрока = ДеревоПунктов.Строки[Сч];
		СледСтрока = ДеревоПунктов.Строки[Сч+1];
		Если ЗначениеЗаполнено(ТекСтрока.Группировка) И ЗначениеЗаполнено(СледСтрока.Группировка) 
				И (ПерезаполнитьВремяРасстояние Или (Не ПерезаполнитьВремяРасстояние И Не ЗначениеЗаполнено(ТекСтрока.Время) И Не ЗначениеЗаполнено(ТекСтрока.Расстояние))) Тогда
			Для Каждого ТекПункт Из мсвПункты Цикл
				Если ТекПункт.Пункт1 = ТекСтрока.Группировка
						И ТекПункт.Пункт2 = СледСтрока.Группировка 
						И ТекПункт.Заказ = ТекСтрока.Заказ Тогда
					ТекСтрока.Расстояние = ТекПункт.Расстояние;
					ТекСтрока.Время = ТекПункт.Время;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Если ДеревоПунктов.Строки.Количество() Тогда 
		ДеревоПунктов.Строки[ДеревоПунктов.Строки.Количество()-1].Время      = 0;
		ДеревоПунктов.Строки[ДеревоПунктов.Строки.Количество()-1].Расстояние = 0;
	КонецЕсли;
	
	флПланФакт = Константы.уатУчетПланФактаПоМаршрутуВМаршрутныхЛистах.Получить();
		
	Для Каждого ТекПункт Из ДеревоПунктов.Строки Цикл 
		Для Каждого ТекСтрока Из ТекПункт.Строки Цикл 
			СтрокаТЧ = Заказы.Найти(ТекСтрока.Группировка, "НомерСтроки");
			СтрокаТЧ.Время      = ТекПункт.Время;
			СтрокаТЧ.Расстояние = ТекПункт.Расстояние;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

// Процедура обновляет данные по пунктам погрузки/разгрузки и грузам/товарам Заказа на ТС
//
// Параметры:
//  Заказ - ДокументСсылка.уатЗаказГрузоотправителя - Заказ на ТС, данные по которому обновляются
//
Процедура ОбновитьДанныеПоЗаказуНаТС(Заказ, ПараметрыОбновления = Неопределено) Экспорт
	
	СтруктураОтбора = Новый Структура("ЗаказГрузоотправителя", Заказ);
	СтрокиМаршрута = Заказы.НайтиСтроки(СтруктураОтбора);
	
	КоличествоСтрокПогрузкиСтарое = 0;
	КоличествоСтрокПогрузкиНовое = 0;
	НомерСтрокиПунктаПогрузки = Заказы.Количество();
	НомерСтрокиПунктаРазгрузки = Заказы.Количество();
	Для Каждого ТекСтрокаМаршрута Из СтрокиМаршрута Цикл
		Если ТекСтрокаМаршрута.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка
			ИЛИ ТекСтрокаМаршрута.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяПогрузка Тогда
			НомерСтрокиПунктаПогрузки = Мин(НомерСтрокиПунктаПогрузки, ТекСтрокаМаршрута.НомерСтроки);
			КоличествоСтрокПогрузкиСтарое = КоличествоСтрокПогрузкиСтарое + 1;
		ИначеЕсли ТекСтрокаМаршрута.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка
			ИЛИ ТекСтрокаМаршрута.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяРазгрузка Тогда
			НомерСтрокиПунктаРазгрузки = Мин(НомерСтрокиПунктаРазгрузки, ТекСтрокаМаршрута.НомерСтроки);
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьГрузы = Истина;
	Если ТипЗнч(ПараметрыОбновления) = Тип("Структура") Тогда
		Если ПараметрыОбновления.Свойство("флНетИзмененийПунктов") Тогда
			флНетИзмененийПунктов = ПараметрыОбновления.флНетИзмененийПунктов;
		Иначе
			флНетИзмененийПунктов = Ложь;
		КонецЕсли;
		Если ПараметрыОбновления.Свойство("флИзмененТолькоПунктРазгрузки") Тогда
			флИзмененТолькоПунктРазгрузки = ПараметрыОбновления.флИзмененТолькоПунктРазгрузки;
		Иначе
			флИзмененТолькоПунктРазгрузки = Ложь;
		КонецЕсли;
		Если ПараметрыОбновления.Свойство("ОбновитьГрузы") Тогда
			ОбновитьГрузы = ПараметрыОбновления.ОбновитьГрузы;
		КонецЕсли;
	ИначеЕсли Заказ.FTL Тогда
		флНетИзмененийПунктов = Ложь;
		флИзмененТолькоПунктРазгрузки = Ложь;
	Иначе
		ПунктПогрузкиПоМаршрутномуЛисту = Заказы[НомерСтрокиПунктаПогрузки-1].Пункт;
		ПунктРазгрузкиПоМаршрутномуЛисту = Заказы[НомерСтрокиПунктаРазгрузки-1].Пункт;
		Если ПунктПогрузкиПоМаршрутномуЛисту = Заказ.АдресОтправления
			И ПунктРазгрузкиПоМаршрутномуЛисту = Заказ.АдресНазначения Тогда
			флНетИзмененийПунктов = Истина;
			флИзмененТолькоПунктРазгрузки = Ложь;
		ИначеЕсли ПунктПогрузкиПоМаршрутномуЛисту = Заказ.АдресОтправления Тогда
			флНетИзмененийПунктов = Ложь;
			флИзмененТолькоПунктРазгрузки = Истина;
		Иначе
			флНетИзмененийПунктов = Ложь;
			флИзмененТолькоПунктРазгрузки = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если Заказ.FTL Тогда
		// Строки, связанные с FTL заказом, перезаполняются. Обновляются и пункты, и грузы.
		Для Каждого ТекСтрокаМаршрута Из СтрокиМаршрута Цикл
			Заказы.Удалить(ТекСтрокаМаршрута);
		КонецЦикла;
		Документы.уатМаршрутныйЛист.ЗаполнитьТаблицуЗаказовПоЗаказуНаТС(ЭтотОбъект, Заказ);
	ИначеЕсли ОбновитьГрузы Тогда
		
		// Таблица, в которой сохраняются данные для неизмененных пунктов.
		ДанныеПунктов = Новый ТаблицаЗначений;
		ДанныеПунктов.Колонки.Добавить("Пункт", Новый ОписаниеТипов("СправочникСсылка.уатПунктыНазначения"));
		Если флНетИзмененийПунктов Или флИзмененТолькоПунктРазгрузки Тогда
			ДанныеПунктов.Колонки.Добавить("Выполнен", Новый ОписаниеТипов("Булево"));
			ДанныеПунктов.Колонки.Добавить("Время", Новый ОписаниеТипов("Число"));
			ДанныеПунктов.Колонки.Добавить("ВремяФакт", Новый ОписаниеТипов("Число"));
			ДанныеПунктов.Колонки.Добавить("Выработка1", Новый ОписаниеТипов("Число"));
			ДанныеПунктов.Колонки.Добавить("Выработка2", Новый ОписаниеТипов("Число"));
			ДанныеПунктов.Колонки.Добавить("Выработка3", Новый ОписаниеТипов("Число"));
			ДанныеПунктов.Колонки.Добавить("Выработка4", Новый ОписаниеТипов("Число"));
			ДанныеПунктов.Колонки.Добавить("Выработка5", Новый ОписаниеТипов("Число"));
			ДанныеПунктов.Колонки.Добавить("ОжиданиеФакт", Новый ОписаниеТипов("Число"));
			ДанныеПунктов.Колонки.Добавить("ПараметрВыработки1", Новый ОписаниеТипов("СправочникСсылка.уатПараметрыВыработки"));
			ДанныеПунктов.Колонки.Добавить("ПараметрВыработки2", Новый ОписаниеТипов("СправочникСсылка.уатПараметрыВыработки"));
			ДанныеПунктов.Колонки.Добавить("ПараметрВыработки3", Новый ОписаниеТипов("СправочникСсылка.уатПараметрыВыработки"));
			ДанныеПунктов.Колонки.Добавить("ПараметрВыработки4", Новый ОписаниеТипов("СправочникСсылка.уатПараметрыВыработки"));
			ДанныеПунктов.Колонки.Добавить("ПараметрВыработки5", Новый ОписаниеТипов("СправочникСсылка.уатПараметрыВыработки"));
			ДанныеПунктов.Колонки.Добавить("ПрибытиеПлан", Новый ОписаниеТипов("Дата"));
			ДанныеПунктов.Колонки.Добавить("ПрибытиеФакт", Новый ОписаниеТипов("Дата"));
			ДанныеПунктов.Колонки.Добавить("Расстояние", Новый ОписаниеТипов("Число"));
			ДанныеПунктов.Колонки.Добавить("РасстояниеФакт", Новый ОписаниеТипов("Число"));
			ДанныеПунктов.Колонки.Добавить("СтоянкаФакт", Новый ОписаниеТипов("Число"));
			ДанныеПунктов.Колонки.Добавить("УбытиеПлан", Новый ОписаниеТипов("Дата"));
			ДанныеПунктов.Колонки.Добавить("УбытиеФакт", Новый ОписаниеТипов("Дата"));
			
			ПредПункт = Неопределено;
			Для Каждого ТекСтрокаМаршрута Из СтрокиМаршрута Цикл
				Если ПредПункт <> ТекСтрокаМаршрута.Пункт Тогда
					НоваяСтрока = ДанныеПунктов.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаМаршрута);
					ПредПункт = ТекСтрокаМаршрута.Пункт;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		// Удаляем старые данные по заказу в таблице "Маршрут".
		Для Каждого ТекСтрокаМаршрута Из СтрокиМаршрута Цикл
			Заказы.Удалить(ТекСтрокаМаршрута);
		КонецЦикла;
		Документы.уатМаршрутныйЛист.ЗаполнитьТаблицуЗаказовПоЗаказуНаТС(ЭтотОбъект, Заказ);
		
		// Если точку погрузки и точку разгрузки, или только точку погрузки, требовалось оставить на том же месте,
		// перемещаем новые строки погрузки/разгрузки на старые позиции
		Если флНетИзмененийПунктов Тогда
			СтруктураОтбора = Новый Структура("ЗаказГрузоотправителя, ТипТочкиМаршрута", Заказ, Перечисления.уатТипыТочекМаршрута.Погрузка);
			СтрокиМаршрута = Заказы.НайтиСтроки(СтруктураОтбора);
			НовыйНомерСтрокиПунктаПогрузки = Заказы.Количество();
			Для Каждого ТекСтрокаМаршрута Из СтрокиМаршрута Цикл
				НайденныеСтроки = ДанныеПунктов.НайтиСтроки(Новый Структура("Пункт", ТекСтрокаМаршрута.Пункт));
				Если НайденныеСтроки.Количество() > 0 Тогда
					ЗаполнитьЗначенияСвойств(ТекСтрокаМаршрута, НайденныеСтроки[0]);
				КонецЕсли;
				НовыйНомерСтрокиПунктаПогрузки = Мин(НовыйНомерСтрокиПунктаПогрузки, ТекСтрокаМаршрута.НомерСтроки);
				КоличествоСтрокПогрузкиНовое = КоличествоСтрокПогрузкиНовое + 1;
			КонецЦикла;
			Для Каждого ТекСтрокаМаршрута Из СтрокиМаршрута Цикл
				Заказы.Сдвинуть(ТекСтрокаМаршрута, НомерСтрокиПунктаПогрузки - НовыйНомерСтрокиПунктаПогрузки);
			КонецЦикла;
			
			СтруктураОтбора = Новый Структура("ЗаказГрузоотправителя, ТипТочкиМаршрута", Заказ, Перечисления.уатТипыТочекМаршрута.ДополнительнаяПогрузка);
			СтрокиМаршрута = Заказы.НайтиСтроки(СтруктураОтбора);
			НовыйНомерСтрокиПунктаПогрузки = Заказы.Количество();
			Для Каждого ТекСтрокаМаршрута Из СтрокиМаршрута Цикл
				НайденныеСтроки = ДанныеПунктов.НайтиСтроки(Новый Структура("Пункт", ТекСтрокаМаршрута.Пункт));
				Если НайденныеСтроки.Количество() > 0 Тогда
					ЗаполнитьЗначенияСвойств(ТекСтрокаМаршрута, НайденныеСтроки[0]);
				КонецЕсли;
				НовыйНомерСтрокиПунктаПогрузки = Мин(НовыйНомерСтрокиПунктаПогрузки, ТекСтрокаМаршрута.НомерСтроки);
				КоличествоСтрокПогрузкиНовое = КоличествоСтрокПогрузкиНовое + 1;
			КонецЦикла;
			Для Каждого ТекСтрокаМаршрута Из СтрокиМаршрута Цикл
				Заказы.Сдвинуть(ТекСтрокаМаршрута, НомерСтрокиПунктаПогрузки - НовыйНомерСтрокиПунктаПогрузки);
			КонецЦикла;
			
			СтруктураОтбора = Новый Структура("ЗаказГрузоотправителя, ТипТочкиМаршрута", Заказ, Перечисления.уатТипыТочекМаршрута.Разгрузка);
			СтрокиМаршрута = Заказы.НайтиСтроки(СтруктураОтбора);
			НовыйНомерСтрокиПунктаРазгрузки = Заказы.Количество();
			Для Каждого ТекСтрокаМаршрута Из СтрокиМаршрута Цикл
				НайденныеСтроки = ДанныеПунктов.НайтиСтроки(Новый Структура("Пункт", ТекСтрокаМаршрута.Пункт));
				Если НайденныеСтроки.Количество() > 0 Тогда
					ЗаполнитьЗначенияСвойств(ТекСтрокаМаршрута, НайденныеСтроки[0]);
				КонецЕсли;
				НовыйНомерСтрокиПунктаРазгрузки = Мин(НовыйНомерСтрокиПунктаРазгрузки, ТекСтрокаМаршрута.НомерСтроки);
			КонецЦикла;
			Для Каждого ТекСтрокаМаршрута Из СтрокиМаршрута Цикл
				Заказы.Сдвинуть(ТекСтрокаМаршрута, НомерСтрокиПунктаРазгрузки - НовыйНомерСтрокиПунктаРазгрузки - КоличествоСтрокПогрузкиСтарое + КоличествоСтрокПогрузкиНовое);
			КонецЦикла;
			
			СтруктураОтбора = Новый Структура("ЗаказГрузоотправителя, ТипТочкиМаршрута", Заказ, Перечисления.уатТипыТочекМаршрута.ДополнительнаяРазгрузка);
			СтрокиМаршрута = Заказы.НайтиСтроки(СтруктураОтбора);
			НовыйНомерСтрокиПунктаРазгрузки = Заказы.Количество();
			Для Каждого ТекСтрокаМаршрута Из СтрокиМаршрута Цикл
				НайденныеСтроки = ДанныеПунктов.НайтиСтроки(Новый Структура("Пункт", ТекСтрокаМаршрута.Пункт));
				Если НайденныеСтроки.Количество() > 0 Тогда
					ЗаполнитьЗначенияСвойств(ТекСтрокаМаршрута, НайденныеСтроки[0]);
				КонецЕсли;
				НовыйНомерСтрокиПунктаРазгрузки = Мин(НовыйНомерСтрокиПунктаРазгрузки, ТекСтрокаМаршрута.НомерСтроки);
			КонецЦикла;
			Для Каждого ТекСтрокаМаршрута Из СтрокиМаршрута Цикл
				Заказы.Сдвинуть(ТекСтрокаМаршрута, НомерСтрокиПунктаРазгрузки - НовыйНомерСтрокиПунктаРазгрузки - КоличествоСтрокПогрузкиСтарое + КоличествоСтрокПогрузкиНовое);
			КонецЦикла;
		ИначеЕсли флИзмененТолькоПунктРазгрузки Тогда
			СтруктураОтбора = Новый Структура("ЗаказГрузоотправителя, ТипТочкиМаршрута", Заказ, Перечисления.уатТипыТочекМаршрута.Погрузка);
			СтрокиМаршрута = Заказы.НайтиСтроки(СтруктураОтбора);
			НовыйНомерСтрокиПунктаПогрузки = Заказы.Количество();
			Для Каждого ТекСтрокаМаршрута Из СтрокиМаршрута Цикл
				НайденныеСтроки = ДанныеПунктов.НайтиСтроки(Новый Структура("Пункт", ТекСтрокаМаршрута.Пункт));
				Если НайденныеСтроки.Количество() > 0 Тогда
					ЗаполнитьЗначенияСвойств(ТекСтрокаМаршрута, НайденныеСтроки[0]);
				КонецЕсли;
				НовыйНомерСтрокиПунктаПогрузки = Мин(НовыйНомерСтрокиПунктаПогрузки, ТекСтрокаМаршрута.НомерСтроки);
			КонецЦикла;
			Для Каждого ТекСтрокаМаршрута Из СтрокиМаршрута Цикл
				Заказы.Сдвинуть(ТекСтрокаМаршрута, НомерСтрокиПунктаПогрузки - НовыйНомерСтрокиПунктаПогрузки);
			КонецЦикла;
			
			СтруктураОтбора = Новый Структура("ЗаказГрузоотправителя, ТипТочкиМаршрута", Заказ, Перечисления.уатТипыТочекМаршрута.ДополнительнаяПогрузка);
			СтрокиМаршрута = Заказы.НайтиСтроки(СтруктураОтбора);
			НовыйНомерСтрокиПунктаПогрузки = Заказы.Количество();
			Для Каждого ТекСтрокаМаршрута Из СтрокиМаршрута Цикл
				НайденныеСтроки = ДанныеПунктов.НайтиСтроки(Новый Структура("Пункт", ТекСтрокаМаршрута.Пункт));
				Если НайденныеСтроки.Количество() > 0 Тогда
					ЗаполнитьЗначенияСвойств(ТекСтрокаМаршрута, НайденныеСтроки[0]);
				КонецЕсли;
				НовыйНомерСтрокиПунктаПогрузки = Мин(НовыйНомерСтрокиПунктаПогрузки, ТекСтрокаМаршрута.НомерСтроки);
			КонецЦикла;
			Для Каждого ТекСтрокаМаршрута Из СтрокиМаршрута Цикл
				Заказы.Сдвинуть(ТекСтрокаМаршрута, НомерСтрокиПунктаПогрузки - НовыйНомерСтрокиПунктаПогрузки);
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли флНетИзмененийПунктов Тогда
		// Не нужно обновлять ни пункты, ни грузы. Ничего делать не требутся.
	ИначеЕсли флИзмененТолькоПунктРазгрузки Тогда
		// Требуется изменить в строках разгрузки по заказу пункты и переместить их в конец табличной части.
		СтруктураОтбора = Новый Структура("ЗаказГрузоотправителя, ТипТочкиМаршрута", Заказ, Перечисления.уатТипыТочекМаршрута.Разгрузка);
		СтрокиРазгрузки = Заказы.НайтиСтроки(СтруктураОтбора);
		Для Каждого ТекСтрокаМаршрута Из СтрокиРазгрузки Цикл
			ТекСтрокаМаршрута.Пункт = Заказ.АдресНазначения;
			ТекСтрокаМаршрута.Выполнен = Ложь;
			Заказы.Сдвинуть(ТекСтрокаМаршрута, Заказы.Количество() - ТекСтрокаМаршрута.НомерСтроки);
		КонецЦикла; 
		
		СтруктураОтбора = Новый Структура("ЗаказГрузоотправителя, ТипТочкиМаршрута", Заказ, Перечисления.уатТипыТочекМаршрута.ДополнительнаяРазгрузка);
		СтрокиРазгрузки = Заказы.НайтиСтроки(СтруктураОтбора);
		Для Каждого ТекСтрокаМаршрута Из СтрокиРазгрузки Цикл
			ТекСтрокаМаршрута.Пункт = Заказ.АдресНазначения;
			ТекСтрокаМаршрута.Выполнен = Ложь;
			Заказы.Сдвинуть(ТекСтрокаМаршрута, Заказы.Количество() - ТекСтрокаМаршрута.НомерСтроки);
		КонецЦикла;

	Иначе
		// Требуется изменить во всех строках по заказу пункты и перенести их в конец табличной части.
		СтруктураОтбора = Новый Структура("ЗаказГрузоотправителя, ТипТочкиМаршрута", Заказ, Перечисления.уатТипыТочекМаршрута.Погрузка);
		СтрокиПогрузки = Заказы.НайтиСтроки(СтруктураОтбора);
		Для Каждого ТекСтрокаМаршрута Из СтрокиПогрузки Цикл
			ТекСтрокаМаршрута.Пункт = Заказ.АдресОтправления;
			ТекСтрокаМаршрута.Выполнен = Ложь;
			Заказы.Сдвинуть(ТекСтрокаМаршрута, Заказы.Количество() - ТекСтрокаМаршрута.НомерСтроки);
		КонецЦикла;
		
		СтруктураОтбора = Новый Структура("ЗаказГрузоотправителя, ТипТочкиМаршрута", Заказ, Перечисления.уатТипыТочекМаршрута.ДополнительнаяПогрузка);
		СтрокиПогрузки = Заказы.НайтиСтроки(СтруктураОтбора);
		Для Каждого ТекСтрокаМаршрута Из СтрокиПогрузки Цикл
			ТекСтрокаМаршрута.Пункт = Заказ.АдресОтправления;
			ТекСтрокаМаршрута.Выполнен = Ложь;
			Заказы.Сдвинуть(ТекСтрокаМаршрута, Заказы.Количество() - ТекСтрокаМаршрута.НомерСтроки);
		КонецЦикла;

		СтруктураОтбора = Новый Структура("ЗаказГрузоотправителя, ТипТочкиМаршрута", Заказ, Перечисления.уатТипыТочекМаршрута.Разгрузка);
		СтрокиРазгрузки = Заказы.НайтиСтроки(СтруктураОтбора);
		Для Каждого ТекСтрокаМаршрута Из СтрокиРазгрузки Цикл
			ТекСтрокаМаршрута.Пункт = Заказ.АдресНазначения;
			ТекСтрокаМаршрута.Выполнен = Ложь;
			Заказы.Сдвинуть(ТекСтрокаМаршрута, Заказы.Количество() - ТекСтрокаМаршрута.НомерСтроки);
		КонецЦикла;  
		
		СтруктураОтбора = Новый Структура("ЗаказГрузоотправителя, ТипТочкиМаршрута", Заказ, Перечисления.уатТипыТочекМаршрута.ДополнительнаяРазгрузка);
		СтрокиРазгрузки = Заказы.НайтиСтроки(СтруктураОтбора);
		Для Каждого ТекСтрокаМаршрута Из СтрокиРазгрузки Цикл
			ТекСтрокаМаршрута.Пункт = Заказ.АдресНазначения;
			ТекСтрокаМаршрута.Выполнен = Ложь;
			Заказы.Сдвинуть(ТекСтрокаМаршрута, Заказы.Количество() - ТекСтрокаМаршрута.НомерСтроки);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Расчитывает итоговые показатели (по кнопке "Рассчитать" внизу формы документа)
//
// Параметры:
//  ОбщееВремяСтоянок	 - 	 - 
//  ОбщийВесТары		 - 	 - 
//
Процедура РассчитатьИтоговыеПоказатели(ОбщееВремяСтоянок = 0, ОбщийВесТары = 0) Экспорт
	Документы.уатМаршрутныйЛист.РассчитатьИтоговыеПоказатели(ЭтотОбъект, ОбщееВремяСтоянок = 0, ОбщийВесТары = 0);
КонецПроцедуры
	
#КонецОбласти


#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда    
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеСвойства.Свойство("ИзменениеМЛизЗаказаПеревозчику") Тогда
		Возврат;
	КонецЕсли;
	
	флПланФакт = Константы.уатУчетПланФактаПоМаршрутуВМаршрутныхЛистах.Получить();
	Для Каждого ТекСтрока Из Заказы Цикл
		Если Не ЗначениеЗаполнено(ТекСтрока.GUIDСтроки) Тогда 
			ТекСтрока.GUIDСтроки = Новый УникальныйИдентификатор();
		Иначе
			// Устранение одинаковых GUID строк (могут возникнуть, например, при копировании строк)
			ПараметрыОтбора = Новый Структура("GUIDСтроки", ТекСтрока.GUIDСтроки);
			НайденныеСтроки = Заказы.НайтиСтроки(ПараметрыОтбора);
			Если НайденныеСтроки.Количество() > 1 Тогда
				Для Индекс = 1 По НайденныеСтроки.Количество()-1 Цикл
					НайденныеСтроки[Индекс].GUIDСтроки = Новый УникальныйИдентификатор();
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		Если ТекСтрока.Выполнен
			И (флПланФакт И (ТекСтрока.ПрибытиеФакт <= '00010101235959' ИЛИ ТекСтрока.УбытиеФакт <= '00010101235959')
			ИЛИ НЕ флПланФакт И (ТекСтрока.ПрибытиеПлан <= '00010101235959' ИЛИ ТекСтрока.УбытиеПлан <= '00010101235959')) Тогда 
			ТекСтрока.Выполнен = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если Не Отказ И Не ЗначениеЗаполнено(ПринятВодителем) Тогда
		ПринятВодителем = Перечисления.уатСтатусыПринятияМЛВодителем.НеУстановлено;
	КонецЕсли;
	
	Если Не Отказ И Не Константы.уатИспользоватьМультимодальныеПеревозки_уэ.Получить() И Не ЗначениеЗаполнено(ВидПеревозки) Тогда 
		ВидПеревозки = Справочники.уатВидыПеревозок.АвтомобильнаяГрузовая;
	КонецЕсли;
	
	Если НЕ Отказ И
		НЕ ЗначениеЗаполнено(ШаблонНастроек) Тогда 
		ШаблонНастроек = Константы.уатОсновнойШаблонМаршрутизации.Получить();
	КонецЕсли;
	
	// проверка ввода актов поступления/передачи
	Если НЕ Отказ И РежимЗаписи = РежимЗаписиДокумента.Проведение И уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП() Тогда
		ТекстОшибки = "";
		Документы.уатМаршрутныйЛист.ПроверитьВводСкладскихАктов(ЭтотОбъект, ТекстОшибки);
		Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,,, Отказ);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Проверка заполнения документа
	Если НЕ Отказ И РежимЗаписи = РежимЗаписиДокумента.Проведение И НЕ ПометкаУдаления Тогда
		Заголовок = уатОбщегоНазначенияТиповые.уатПредставлениеДокументаПриПроведении(Ссылка);
		ПроверитьЗаполнениеТабличнойЧастиЗаказы(Отказ, Заголовок);
		Если Отказ Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	// Расчет выработки по заказам (выполняется каждый раз перед распределением услуг и проведением)
	Если НЕ Отказ И РежимЗаписи = РежимЗаписиДокумента.Проведение
		И (ДополнительныеСвойства.Свойство("НастройкаНеРассчитыватьВыработку")
		И ДополнительныеСвойства.НастройкаНеРассчитыватьВыработку = Ложь) Тогда
		
		Документы.уатМаршрутныйЛист.РассчитатьВыработкуПоЗаказам(ЭтотОбъект);
	КонецЕсли;
		
	Если Не Отказ И Не ПометкаУдаления И РежимЗаписи <> РежимЗаписиДокумента.ОтменаПроведения Тогда
		флПересчетИтогов = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(
			ПользователиКлиентСервер.АвторизованныйПользователь(), "МаршрутныйЛистПерерасчетИтоговПриПроведении");
		Если флПересчетИтогов Тогда
			ОбновитьВремяРасстояниеМеждуПунктами();
			Документы.уатМаршрутныйЛист.РассчитатьИтоговыеПоказатели(ЭтотОбъект);
		КонецЕсли;
		Если (Ссылка.Пустая() ИЛИ флПересчетИтогов) И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			АвтоматическийРасчетИтогов();
		КонецЕсли;
	КонецЕсли;
	
	// Обновляем даты в шапке документа
	КоличествоВыполненных = Заказы.НайтиСтроки(Новый Структура("Выполнен", Истина)).Количество();     
	
	Если КоличествоВыполненных = 0 Тогда 
		Выполнен  = Ложь;
		Отправлен = Ложь;
		
		ДатаИВремяОтправления = '00010101';
		ДатаИВремяВыполнения  = '00010101';
		
	ИначеЕсли КоличествоВыполненных < Заказы.Количество() Тогда 
		Выполнен  = Ложь;
		Отправлен = Истина;
		
		МинДатаПоЗаказам = '39991231';
		Для Каждого ТекСтрока Из Заказы Цикл 
			Если флПланФакт Тогда
				Если ТекСтрока.ПрибытиеФакт <> '00010101' И ТекСтрока.ПрибытиеФакт < МинДатаПоЗаказам Тогда 
					МинДатаПоЗаказам = ТекСтрока.ПрибытиеФакт;
				КонецЕсли;
				Если ТекСтрока.УбытиеФакт <> '00010101' И ТекСтрока.УбытиеФакт < МинДатаПоЗаказам Тогда 
					МинДатаПоЗаказам = ТекСтрока.УбытиеФакт;
				КонецЕсли;
			Иначе
				Если ТекСтрока.ПрибытиеПлан <> '00010101' И ТекСтрока.ПрибытиеПлан < МинДатаПоЗаказам Тогда 
					МинДатаПоЗаказам = ТекСтрока.ПрибытиеПлан;
				КонецЕсли;
				Если ТекСтрока.УбытиеПлан <> '00010101' И ТекСтрока.УбытиеПлан < МинДатаПоЗаказам Тогда 
					МинДатаПоЗаказам = ТекСтрока.УбытиеПлан;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ДатаИВремяОтправления = ?(МинДатаПоЗаказам = '39991231', '00010101', НачалоМинуты(МинДатаПоЗаказам));
		ДатаИВремяВыполнения  = '00010101';
		
	Иначе 
		Выполнен  = Истина;
		Отправлен = Истина;
		
		МинДатаПоЗаказам  = '39991231';
		МаксДатаПоЗаказам = '00010101';
		Для Каждого ТекСтрока Из Заказы Цикл 
			Если флПланФакт Тогда
				Если ТекСтрока.ПрибытиеФакт <> '00010101' И ТекСтрока.ПрибытиеФакт < МинДатаПоЗаказам Тогда 
					МинДатаПоЗаказам = ТекСтрока.ПрибытиеФакт;
				КонецЕсли;
				Если ТекСтрока.УбытиеФакт <> '00010101' И ТекСтрока.УбытиеФакт < МинДатаПоЗаказам Тогда 
					МинДатаПоЗаказам = ТекСтрока.УбытиеФакт;
				КонецЕсли;
				Если ТекСтрока.ПрибытиеФакт <> '00010101' И ТекСтрока.ПрибытиеФакт > МаксДатаПоЗаказам Тогда 
					МаксДатаПоЗаказам = ТекСтрока.ПрибытиеФакт;
				КонецЕсли;
				Если ТекСтрока.УбытиеФакт <> '00010101' И ТекСтрока.УбытиеФакт > МаксДатаПоЗаказам Тогда 
					МаксДатаПоЗаказам = ТекСтрока.УбытиеФакт;
				КонецЕсли;
			Иначе
				Если ТекСтрока.ПрибытиеПлан <> '00010101' И ТекСтрока.ПрибытиеПлан < МинДатаПоЗаказам Тогда 
					МинДатаПоЗаказам = ТекСтрока.ПрибытиеПлан;
				КонецЕсли;
				Если ТекСтрока.УбытиеПлан <> '00010101' И ТекСтрока.УбытиеПлан < МинДатаПоЗаказам Тогда 
					МинДатаПоЗаказам = ТекСтрока.УбытиеПлан;
				КонецЕсли;
				Если ТекСтрока.ПрибытиеПлан <> '00010101' И ТекСтрока.ПрибытиеПлан > МаксДатаПоЗаказам Тогда 
					МаксДатаПоЗаказам = ТекСтрока.ПрибытиеПлан;
				КонецЕсли;
				Если ТекСтрока.УбытиеПлан <> '00010101' И ТекСтрока.УбытиеПлан > МаксДатаПоЗаказам Тогда 
					МаксДатаПоЗаказам = ТекСтрока.УбытиеПлан;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ДатаИВремяОтправления = ?(МинДатаПоЗаказам = '39991231', '00010101', НачалоМинуты(МинДатаПоЗаказам));
		ДатаИВремяВыполнения  = НачалоМинуты(МаксДатаПоЗаказам);
	КонецЕсли;
	
	// обновляем адреса отправления/назначения
	Если Заказы.Количество() > 0 Тогда
		АдресОтправления = Заказы[0].Пункт;
		АдресНазначения = Заказы[Заказы.Количество()-1].Пункт;
	КонецЕсли;
	
	ОчисткаНеактуальныхСтрокПрисоединенныхФайлов();
	
	// распределение доходов и затрат по заказам. выполняется при закрытии документа
	Если НЕ Отказ И РежимЗаписи = РежимЗаписиДокумента.Проведение И ДатаЗакрытия <> '00010101' Тогда
		ТаблицаДоходы = Доходы.Выгрузить().Скопировать();
		Документы.уатМаршрутныйЛист.РаспределениеУслугПоЗаказам(ТаблицаДоходы, ЭтотОбъект, Отказ,,"Доходы");
		Доходы.Загрузить(ТаблицаДоходы);
		ТаблицаЗатраты = Расходы.Выгрузить().Скопировать();
		Документы.уатМаршрутныйЛист.РаспределениеУслугПоЗаказам(ТаблицаЗатраты, ЭтотОбъект, Отказ,,"Расходы");
		Расходы.Загрузить(ТаблицаЗатраты);
	КонецЕсли;
	
	СуммаДоходов = уатОбщегоНазначенияТиповые.уатПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Доходы");
	СуммаЗатрат  = уатОбщегоНазначенияТиповые.уатПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Расходы");
	
	Если Константы.уатИспользоватьПлановыеУслуги_уэ.Получить() Тогда
		СуммаЗатратПлан  = уатОбщегоНазначенияТиповые.уатПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Расходы",,Истина); 
	КонецЕсли;
	
	// Формирование списка контрагентов маршрутного листа
	ТаблицаКонтрагентов = Новый ТаблицаЗначений();
	ТаблицаКонтрагентов.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	
	Контрагенты = ""; 
	Для Каждого Заказ Из Заказы Цикл
		НоваяСтрока = ТаблицаКонтрагентов.Добавить();
		Если (Заказ.ЗаказГрузоотправителя <> Документы.уатЗаказГрузоотправителя.ПустаяСсылка()) Тогда
			НоваяСтрока.Наименование = Заказ.ЗаказГрузоотправителя.Контрагент.Наименование;
		Иначе
			НоваяСтрока.Наименование = Заказ.Контрагент.Наименование;
		КонецЕсли;	
	КонецЦикла;
	
	ТаблицаКонтрагентов.Свернуть("Наименование");
	
	Для Каждого ТекСтрока Из ТаблицаКонтрагентов Цикл
		Контрагенты = Контрагенты + ?(Контрагенты = "", "", ", ") + ТекСтрока.Наименование;
	КонецЦикла;
	
	// запрет изменения закрытого документа
	Если Проведен Тогда
		РазрешитьРедактирование = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ПользователиКлиентСервер.АвторизованныйПользователь(), "РазрешитьРедактированиеЗакрытыхДокументов");
		Если НЕ РазрешитьРедактирование И Ссылка.ДатаЗакрытия <> '00010101' Тогда
			Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
				ТекстНСТР = НСтр("en='Posting canselation of closed document is prohibited.';ru='Отмена проведения закрытого документа запрещена.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР, ЭтотОбъект,,, Отказ);
			ИначеЕсли Модифицированность() Тогда
				ТекстНСТР = НСтр("en='Changing of closed document is prohibited.';ru='Изменение закрытого документа запрещено.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР, ЭтотОбъект,,, Отказ);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Удаление неактуальных записей в ТЧ "Секции".
	ИндСтроки = Секции.Количество() - 1;
	Пока ИндСтроки >= 0 Цикл 
		ТекСтрокаСекций = Секции[ИндСтроки];
		
		Если Заказы.НайтиСтроки(Новый Структура("GUIDСтроки", ТекСтрокаСекций.GUIDСтроки)).Количество() = 0 Тогда 
			Секции.Удалить(ИндСтроки);
		КонецЕсли;
		
		ИндСтроки = ИндСтроки - 1;
	КонецЦикла;
	
	// Заполнение реквизита "ДатаИВремяВыполненияПлан".
	Если Заказы.Количество() = 0 Тогда
		ДатаИВремяВыполненияПлан = '00010101';
	Иначе	
		ПоследняяСтрока  = Заказы[Заказы.Количество()-1];
		ТекИндекс        = Заказы.Количество()-1;
		ПоследнийПункт   = Заказы[ТекИндекс].Пункт;
		ПредЗаказ        = Неопределено;
		ПоследняяСтоянка = 0;
		
		Пока ТекИндекс > 0 Цикл 
			ТекСтрока = Заказы[ТекИндекс];
			Если Не ТекСтрока.Пункт = ПоследнийПункт Тогда 
				Прервать;
			КонецЕсли;
			
			Если Не ПредЗаказ = ТекСтрока.ЗаказГрузоотправителя Тогда 
				ПоследняяСтоянка = уатЗащищенныеФункцииСервер.СложитьВремя(ПоследняяСтоянка, ТекСтрока.Стоянка);
				ПредЗаказ = ТекСтрока.ЗаказГрузоотправителя;
			КонецЕсли;
			
			ТекИндекс = ТекИндекс - 1;
		КонецЦикла;
		
		ПоследняяСтоянка = уатЗащищенныеФункцииСервер.СложитьВремя(ПоследняяСтоянка, ПоследняяСтрока.СтоянкаИзПункта);
		
		Если ПоследняяСтрока.ПрибытиеПлан > '19700101000000' Тогда
			ДатаИВремяВыполненияПлан = уатЗащищенныеФункцииСервер.СложитьВремя(ПоследняяСтрока.ПрибытиеПлан, ПоследняяСтоянка);
		Иначе
			ДатаИВремяВыполненияПлан = '00010101';
		КонецЕсли;
	КонецЕсли;
	
	// Уведомления
	Если Не Отказ И Не ПометкаУдаления И ПолучитьФункциональнуюОпцию("уатИспользоватьУведомления_уэ") Тогда
		// Заполнение ТЧ "Получатели уведомлений"
		Если Модифицированность() Тогда
			тблПолучатели = уатОбщегоНазначения_уэ.СформироватьСписокПолучателейУведомлений(ЭтотОбъект);
			ПолучателиУведомлений.Загрузить(тблПолучатели);
		КонецЕсли;
		
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			СформироватьУведомления();
		КонецЕсли;
	КонецЕсли;
	
	// заполнение реквизитов многовалютного учета
	Если НЕ Отказ И РежимЗаписи <> РежимЗаписиДокумента.ОтменаПроведения Тогда
		Обработки.уатОтложенноеОбновлениеИБ.ЗаполнитьРеквизитыДокументаМноговалютныйУчет_1_1_7_1(ЭтотОбъект);
	КонецЕсли;
	
	// расчет статуса документа
	Документы.уатМаршрутныйЛист.РассчитатьСтатусДокумента(ЭтотОбъект);
	
	// установка доп. выработки по умолчанию
	Если НЕ Отказ И НЕ ПометкаУдаления И РежимЗаписи <> РежимЗаписиДокумента.ОтменаПроведения И ЭтоНовый() Тогда
		ЗаполнитьДопВыработкуПриСоздании();
	КонецЕсли;
	
	// Интеграция с WMS
	РазрешенОбменСWMS = РазрешенаВыгрузкаВWMS;
	Если ДополнительныеСвойства.Свойство("РазрешенОбменСWMS") Тогда
		РазрешенОбменСWMS = РазрешенОбменСWMS И ДополнительныеСвойства.РазрешенОбменСWMS;
	КонецЕсли;
	Если РазрешенОбменСWMS
		И (РежимЗаписи = РежимЗаписиДокумента.Проведение Или РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения)
		И ВидОперации = Перечисления.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя
		И ПолучитьФункциональнуюОпцию("уатИспользоватьИнтеграциюWMS_уэ")Тогда
		СкладWMS = Константы.уатСкладДляОбменаСWMS_уэ.Получить();
		Если ЗначениеЗаполнено(СкладWMS) Тогда
			МенЗаписи = РегистрыСведений.уатАдресаСкладов_уэ.СоздатьМенеджерЗаписи();
			МенЗаписи.Склад = СкладWMS;
			МенЗаписи.Прочитать();
			АдресСкладаWMS = МенЗаписи.Адрес;
			СтароеПосещениеСкладаWMS = Документы.уатМаршрутныйЛист.ПолучитьПосещениеСкладаWMS(Ссылка, АдресСкладаWMS);
			// Если склад уже был пройден, то изменения считаются некорректными и не передаются в WMS
			Если Не СтароеПосещениеСкладаWMS.ПунктСкладаWMSВыполнен Тогда
				ДополнительныеСвойства.Вставить("СтароеПосещениеСкладаWMS", СтароеПосещениеСкладаWMS);
				ДополнительныеСвойства.Вставить("АдресСкладаWMS", АдресСкладаWMS);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Сброс флага Рассчитан
	Если НЕ Отказ И РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		Рассчитан = Ложь;
		ДатаЗакрытия = '00010101';
		
		// обнуление фактической выработки и связанных с ней данных: доходы, расходы, ЗП
		ОчиститьФактическуюВыработку();
		
		Документы.уатМаршрутныйЛист.РассчитатьСтатусДокумента(ЭтотОбъект);
	КонецЕсли;
	
	уатПроведение_проф.ПолучитьСтарыеЗаказыПередЗаписью(ЭтотОбъект);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
		
	Если ОбменДанными.Загрузка Тогда    
		Возврат;
	КонецЕсли;
	
	ОбновитьНомерМаршрутногоЛистаВЗаказах(Отказ);
	
	Если НЕ Отказ И НЕ Проведен Тогда
		уатПроведение_проф.УстановитьДатуПлатежа(ЭтотОбъект);
	КонецЕсли;
	
	// Уведомления
	Если НЕ Отказ Тогда
		Если ДополнительныеСвойства.Свойство("флИзменениеПеревозчика") И ДополнительныеСвойства.флИзменениеПеревозчика Тогда
			уатОбщегоНазначения_уэ.СформироватьУведомление(Ссылка, Перечисления.уатТипыСобытийДляУведомления_уэ.ИзменениеПеревозчика);
		КонецЕсли;
		Если ДополнительныеСвойства.Свойство("флИзменениеТС") И ДополнительныеСвойства.флИзменениеТС Тогда
			уатОбщегоНазначения_уэ.СформироватьУведомление(Ссылка, Перечисления.уатТипыСобытийДляУведомления_уэ.ИзменениеТС);
		КонецЕсли;
		Если ДополнительныеСвойства.Свойство("флИзменениеВодителя") И ДополнительныеСвойства.флИзменениеВодителя Тогда
			уатОбщегоНазначения_уэ.СформироватьУведомление(Ссылка, Перечисления.уатТипыСобытийДляУведомления_уэ.ИзменениеВодителя);
		КонецЕсли;
		
		ДополнительныеПараметрыСобытия = Новый Структура;
		Если ДополнительныеСвойства.Свойство("мсвСтрокиПрибытиеФакт") И ДополнительныеСвойства.мсвСтрокиПрибытиеФакт.Количество() > 0 Тогда
			Для Каждого ТекСтрока Из ДополнительныеСвойства.мсвСтрокиПрибытиеФакт Цикл
				ДополнительныеПараметрыСобытия.Вставить("Пункт", ТекСтрока.Пункт);
				Если ТипЗнч(ТекСтрока.Пункт) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда
					ДополнительныеПараметрыСобытия.Вставить("ТипПункта", ТекСтрока.Пункт.ТипПункта);
				КонецЕсли;
				ДополнительныеПараметрыСобытия.Вставить("ТипТочкиМаршрута", ТекСтрока.ТипТочкиМаршрута);
				ДополнительныеПараметрыСобытия.Вставить("ДополнительныйДокумент", ТекСтрока.ЗаказГрузоотправителя);
				ДополнительныеПараметрыСобытия.Вставить("GUIDСтроки", ТекСтрока.GUIDСтроки);
				ДополнительныеПараметрыСобытия.Вставить("УбытиеПлан", ТекСтрока.УбытиеПлан);
				уатОбщегоНазначения_уэ.СформироватьУведомление(Ссылка,
					Перечисления.уатТипыСобытийДляУведомления_уэ.ПрибытиеВПунктФактИзменено,
					ДополнительныеПараметрыСобытия
				);
			КонецЦикла;
		КонецЕсли;
		Если ДополнительныеСвойства.Свойство("мсвСтрокиПрибытиеПлан") И ДополнительныеСвойства.мсвСтрокиПрибытиеПлан.Количество() > 0 Тогда
			Для Каждого ТекСтрока Из ДополнительныеСвойства.мсвСтрокиПрибытиеПлан Цикл
				ДополнительныеПараметрыСобытия.Вставить("Пункт", ТекСтрока.Пункт);
				Если ТипЗнч(ТекСтрока.Пункт) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда
					ДополнительныеПараметрыСобытия.Вставить("ТипПункта", ТекСтрока.Пункт.ТипПункта);
				КонецЕсли;
				ДополнительныеПараметрыСобытия.Вставить("ТипТочкиМаршрута", ТекСтрока.ТипТочкиМаршрута);
				ДополнительныеПараметрыСобытия.Вставить("ДополнительныйДокумент", ТекСтрока.ЗаказГрузоотправителя);
				ДополнительныеПараметрыСобытия.Вставить("GUIDСтроки", ТекСтрока.GUIDСтроки);
				ДополнительныеПараметрыСобытия.Вставить("УбытиеПлан", ТекСтрока.УбытиеПлан);
				уатОбщегоНазначения_уэ.СформироватьУведомление(Ссылка,
					Перечисления.уатТипыСобытийДляУведомления_уэ.ПрибытиеВПунктПланИзменено,
					ДополнительныеПараметрыСобытия
				);
			КонецЦикла;
		КонецЕсли;
		Если ДополнительныеСвойства.Свойство("мсвСтрокиУбытиеПлан") И ДополнительныеСвойства.мсвСтрокиУбытиеПлан.Количество() > 0 Тогда
			Для Каждого ТекСтрока Из ДополнительныеСвойства.мсвСтрокиУбытиеПлан Цикл
				ДополнительныеПараметрыСобытия.Вставить("Пункт", ТекСтрока.Пункт);
				Если ТипЗнч(ТекСтрока.Пункт) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда
					ДополнительныеПараметрыСобытия.Вставить("ТипПункта", ТекСтрока.Пункт.ТипПункта);
				КонецЕсли;
				ДополнительныеПараметрыСобытия.Вставить("ТипТочкиМаршрута", ТекСтрока.ТипТочкиМаршрута);
				ДополнительныеПараметрыСобытия.Вставить("ДополнительныйДокумент", ТекСтрока.ЗаказГрузоотправителя);
				ДополнительныеПараметрыСобытия.Вставить("GUIDСтроки", ТекСтрока.GUIDСтроки);
				ДополнительныеПараметрыСобытия.Вставить("УбытиеПлан", ТекСтрока.УбытиеПлан);
				уатОбщегоНазначения_уэ.СформироватьУведомление(Ссылка,
					Перечисления.уатТипыСобытийДляУведомления_уэ.УбытиеИзПунктаПланИзменено,
					ДополнительныеПараметрыСобытия
				);
			КонецЦикла;
		КонецЕсли;
		Если ДополнительныеСвойства.Свойство("мсвСтрокиУбытиеФакт") И ДополнительныеСвойства.мсвСтрокиУбытиеФакт.Количество() > 0 Тогда
			Для Каждого ТекСтрока Из ДополнительныеСвойства.мсвСтрокиУбытиеФакт Цикл
				ДополнительныеПараметрыСобытия.Вставить("Пункт", ТекСтрока.Пункт);
				Если ТипЗнч(ТекСтрока.Пункт) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда
					ДополнительныеПараметрыСобытия.Вставить("ТипПункта", ТекСтрока.Пункт.ТипПункта);
				КонецЕсли;
				ДополнительныеПараметрыСобытия.Вставить("ТипТочкиМаршрута", ТекСтрока.ТипТочкиМаршрута);
				ДополнительныеПараметрыСобытия.Вставить("ДополнительныйДокумент", ТекСтрока.ЗаказГрузоотправителя);
				ДополнительныеПараметрыСобытия.Вставить("GUIDСтроки", ТекСтрока.GUIDСтроки);
				ДополнительныеПараметрыСобытия.Вставить("УбытиеПлан", ТекСтрока.УбытиеПлан);
				уатОбщегоНазначения_уэ.СформироватьУведомление(Ссылка,
					Перечисления.уатТипыСобытийДляУведомления_уэ.УбытиеИзПунктаФактИзменено,
					ДополнительныеПараметрыСобытия
				);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;

	// Интеграция с WMS
	Если ДополнительныеСвойства.Свойство("АдресСкладаWMS") Тогда
		НовоеПосещениеСкладаWMS = Документы.уатМаршрутныйЛист.ПолучитьПосещениеСкладаWMS(ЭтотОбъект, ДополнительныеСвойства.АдресСкладаWMS);
		СтароеПосещениеСкладаWMS = ДополнительныеСвойства.СтароеПосещениеСкладаWMS;
		
		ТребуетсяПередатьСообщение = НовоеПосещениеСкладаWMS.Организация <> СтароеПосещениеСкладаWMS.Организация
			Или НовоеПосещениеСкладаWMS.Водитель <> СтароеПосещениеСкладаWMS.Водитель 
			Или НовоеПосещениеСкладаWMS.ТС <> СтароеПосещениеСкладаWMS.ТС 
			Или НовоеПосещениеСкладаWMS.Активность <> СтароеПосещениеСкладаWMS.Активность
			Или НовоеПосещениеСкладаWMS.СоставЗаказа.Количество() <> СтароеПосещениеСкладаWMS.СоставЗаказа.Количество();
			
		Если Не НовоеПосещениеСкладаWMS.Активность И Не СтароеПосещениеСкладаWMS.Активность Тогда
			// В случае, когда документ не проведен и не был проведен, изменения в WMS передавать не надо.
			ТребуетсяПередатьСообщение = ЛожЬ;
		ИначеЕсли НовоеПосещениеСкладаWMS.СоставЗаказа.Количество() = 0
			И СтароеПосещениеСкладаWMS.СоставЗаказа.Количество() = 0 Тогда
			// Если посещения склада не до записи документа и не появилось после, то изменения в WMS передавать не надо.
			ТребуетсяПередатьСообщение = ЛожЬ;
		ИначеЕсли Не ТребуетсяПередатьСообщение Тогда
			// Проверяем, различаются ли данные по строкам ТЧ Задание
			Для Сч = 0 По НовоеПосещениеСкладаWMS.СоставЗаказа.Количество()-1 Цикл
				НоваяСтрока = НовоеПосещениеСкладаWMS.СоставЗаказа[Сч];
				СтараяСтрока = СтароеПосещениеСкладаWMS.СоставЗаказа[Сч];
				Если НоваяСтрока.ДатаНачалаОперации <> СтараяСтрока.ДатаНачалаОперации
					Или НоваяСтрока.ДатаОкончанияОперации <> СтараяСтрока.ДатаОкончанияОперации
					Или НоваяСтрока.ВидРабот <> СтараяСтрока.ВидРабот
					Или НоваяСтрока.Ид <> СтараяСтрока.Ид Тогда
					ТребуетсяПередатьСообщение = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ТребуетсяПередатьСообщение Тогда
			// Если это первая отправка сообщения, то создаем запись регистра "Статусы синхронизации с WMS" с пустым статусом, 
			// чтобы понимать, что документ мог быть отправлен в WMS.
			Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	уатСтатусыСинхронизацииСWMS_уэСрезПоследних.СтатусВыгрузкиВWMS КАК СтатусВыгрузкиВWMS
			|ИЗ
			|	РегистрСведений.уатСтатусыСинхронизацииСWMS_уэ.СрезПоследних(, МаршрутныйЛист = &МаршрутныйЛист) КАК уатСтатусыСинхронизацииСWMS_уэСрезПоследних");
			Запрос.УстановитьПараметр("МаршрутныйЛист", Ссылка);
			Если Запрос.Выполнить().Пустой() Тогда
				СтатусОбмена = РегистрыСведений.уатСтатусыСинхронизацииСWMS_уэ.СоздатьМенеджерЗаписи();
				СтатусОбмена.Период = ТекущаяДатаСеанса();
				СтатусОбмена.МаршрутныйЛист = Ссылка;
				СтатусОбмена.Записать();
			КонецЕсли;
			
			уатИнтеграции_уэ.СоздатьЗаписьОчередиВыгрузки(Ссылка, НовоеПосещениеСкладаWMS);
		КонецЕсли;
		
	КонецЕсли;
	
	// Закрепление Маршрутных листов за перевозчиками
	Если НЕ Отказ
		И ПринадлежностьПеревозки = Перечисления.уатПринадлежностьТС.Привлеченное
		И ПолучитьФункциональнуюОпцию("уатИспользоватьЗакреплениеМаршрутныхЛистовЗаПеревозчиками_уэ") Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	уатПривязкаМаршрутныхЛистовКПеревозчикам_уэ.Период КАК Период,
		|	уатПривязкаМаршрутныхЛистовКПеревозчикам_уэ.Организация КАК Организация,
		|	уатПривязкаМаршрутныхЛистовКПеревозчикам_уэ.Подразделение КАК Подразделение,
		|	уатПривязкаМаршрутныхЛистовКПеревозчикам_уэ.МаршрутныйЛист КАК МаршрутныйЛист,
		|	уатПривязкаМаршрутныхЛистовКПеревозчикам_уэ.Перевозчик КАК Перевозчик,
		|	уатПривязкаМаршрутныхЛистовКПеревозчикам_уэ.Договор КАК Договор
		|ИЗ
		|	РегистрСведений.уатПривязкаМаршрутныхЛистовКПеревозчикам_уэ КАК уатПривязкаМаршрутныхЛистовКПеревозчикам_уэ
		|ГДЕ
		|	уатПривязкаМаршрутныхЛистовКПеревозчикам_уэ.Организация = &Организация
		|	И уатПривязкаМаршрутныхЛистовКПеревозчикам_уэ.Подразделение = &Подразделение
		|	И уатПривязкаМаршрутныхЛистовКПеревозчикам_уэ.МаршрутныйЛист = &МаршрутныйЛист");
		Запрос.УстановитьПараметр("Организация", Организация);
		Запрос.УстановитьПараметр("Подразделение", Подразделение);
		Запрос.УстановитьПараметр("МаршрутныйЛист", Ссылка);
		Если Запрос.Выполнить().Пустой() Тогда
			// Первоначальная привязка выполняется автоматически, дальнейшая - через форму
			Документы.уатМаршрутныйЛист.ЗакрепитьПеревозчикаЗаМаршрутнымЛистом(Ссылка);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	ДатаЗакрытия = Неопределено;
	ПринятВодителем       = Неопределено;
	ДатаПринятияВодителем = Дата(1,1,1);
	ЕстьРасхождения = Ложь;
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Документ создан в результате автоматической маршрутизации в АРМ Логиста.
	// Не формируем движения по регистрам
	Если СозданАвтоматически Тогда
		Возврат;
	КонецЕсли;
	
	Заголовок = уатОбщегоНазначенияТиповые.уатПредставлениеДокументаПриПроведении(Ссылка);
	
	Если ВидОперации = Перечисления.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя Тогда
		Если НЕ Отказ Тогда
			Документы.уатМаршрутныйЛист.ВыполнитьКонтрольГрузыКПеревозке(ЭтотОбъект, Отказ, Заголовок);
		КонецЕсли;
		Если НЕ Отказ Тогда
			Документы.уатМаршрутныйЛист.ВыполнитьКонтрольЗаказыГрузоотправителей(ЭтотОбъект, Отказ, Заголовок);
		КонецЕсли;
	КонецЕсли;
	
	мсвЗаказы = Новый Массив;
	Для Каждого ТекСтрока Из Заказы Цикл
		Если ТекСтрока.Выполнен И мсвЗаказы.Найти(ТекСтрока.ЗаказГрузоотправителя) = Неопределено Тогда
			флОтказ = уатОбщегоНазначения_проф.ПревышениеДопустимогоДолга(ТекСтрока.ЗаказГрузоотправителя.ДоговорКонтрагента);
			Отказ = Отказ ИЛИ флОтказ;
			
			мсвЗаказы.Добавить(ТекСтрока.ЗаказГрузоотправителя);
		КонецЕсли;
	КонецЦикла;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Инициализация дополнительных свойств для проведения документа.
	уатПроведение.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа.
	Документы.уатМаршрутныйЛист.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	уатПроведение.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	Если ВидОперации = Перечисления.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя тогда
		уатПроведение_уэ.ОтразитьГрузыКПеревозке(ДополнительныеСвойства, Движения, Отказ);
		уатПроведение.ОтразитьЗаказыГрузоотправителей(ДополнительныеСвойства, Движения, Отказ);
		уатПроведение_уэ.ОтразитьСтатусыГрузов(ДополнительныеСвойства, Движения, Отказ);
	КонецЕсли;
	
	уатПроведение_уэ.ОтразитьВыработкуПоМаршрутнымЛистам(ДополнительныеСвойства, Движения, Отказ);
	уатПроведение_проф.ОтразитьВыработкуСотрудниковПоМаршрутнымЛистам(ДополнительныеСвойства, Движения, Отказ);
	
	уатПроведение.ОтразитьДоходы(ДополнительныеСвойства, Движения, Отказ);
	уатПроведение.ОтразитьРасходы(ДополнительныеСвойства, Движения, Отказ);
	Если ПолучитьФункциональнуюОпцию("уатИспользоватьПлановыеУслуги_уэ") = Истина Тогда
		уатПроведение_уэ.ОтразитьПлановыеУслуги(ДополнительныеСвойства, Движения, Отказ);
	КонецЕсли;
	уатПроведение.ОтразитьПредоставленныеУслуги(ДополнительныеСвойства, Движения, Отказ);
	
	Если ПринадлежностьПеревозки = Перечисления.уатПринадлежностьТС.Собственное Тогда
		уатПроведение.ОтразитьОсновныеНачисления(ДополнительныеСвойства, Движения, Отказ);
	ИначеЕсли ПринадлежностьПеревозки = Перечисления.уатПринадлежностьТС.Привлеченное Тогда
		уатПроведение_проф.ОтразитьНачисленияФизическимЛицам(ДополнительныеСвойства, Движения, Отказ);
	КонецЕсли;
	
	Если уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП() Тогда
		уатПроведение_уэ.ОтразитьНевыставленныеРекламации(ДополнительныеСвойства, Движения, Отказ);
	КонецЕсли;

	// Обороты по маршрутному листу только для отправленного маршрутного листа
	Если ЗначениеЗаполнено(ДатаИВремяОтправления) Тогда
		уатПроведение.ОтразитьОборотыПоМаршрутномуЛисту(ДополнительныеСвойства, Движения, Отказ);
	КонецЕсли;
	
	Если ТС.ВидМоделиТС = Перечисления.уатВидыМоделейТС.Автотранспорт Тогда
		уатПроведение.ОтразитьСостояниеТС(ДополнительныеСвойства, Движения, Отказ);
	КонецЕсли;
	
	Если ПринадлежностьПеревозки = Перечисления.уатПринадлежностьТС.Привлеченное
		И ПолучитьФункциональнуюОпцию("уатИспользоватьЗакреплениеМаршрутныхЛистовЗаПеревозчиками_уэ") = Истина Тогда
		уатПроведение_уэ.ОтразитьОбъемыПеревозок(ДополнительныеСвойства, Движения, Отказ);
	КонецЕсли;
	
	уатПроведение_проф.ОтразитьДатыОбработкиДокументов(ДополнительныеСвойства, Движения, Отказ);
		
	// Запись наборов записей.
	уатПроведение.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль возникновения отрицательного остатка.
	Документы.уатМаршрутныйЛист.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);
	
	Если НЕ Отказ Тогда
		Документы.уатМаршрутныйЛист.ВыполнитьКонтрольОбъемыПеревозок(ЭтотОбъект, Отказ, Заголовок);
	КонецЕсли;
	
	уатПроведение_проф.ОбновитьТекущееСостояниеОплатыЗаказов(ЭтотОбъект);
	
	уатПроведение_проф.УстановитьДатуПлатежа(ЭтотОбъект);
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа
	уатПроведение.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	уатПроведение.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	уатПроведение.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	уатПроведение_проф.ОбновитьТекущееСостояниеОплатыЗаказов(ЭтотОбъект);
	
	// Контроль
	Документы.уатМаршрутныйЛист.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	уатОбщегоНазначенияСервер.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") Тогда
		СтандартнаяОбработка = Ложь;
		
		Если ДанныеЗаполнения.Мультимодальный И (Не ДанныеЗаполнения.ЭтоЭтап 
				Или Не ЗначениеЗаполнено(ДанныеЗаполнения.РодительскийЗаказ)) Тогда 
			Возврат;
		КонецЕсли;
		
		Дата                 = ТекущаяДата();
		ВидОперации          = Перечисления.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя;
		Организация          = ДанныеЗаполнения.Организация;
		ВидПеревозки         = ДанныеЗаполнения.ВидПеревозки;
		НаправлениеПеревозки = ДанныеЗаполнения.НаправлениеПеревозки;
		Подразделение        = ДанныеЗаполнения.Подразделение;
		ОбъектСтроительства  = ДанныеЗаполнения.ОбъектСтроительства;
		Маршрут              = ДанныеЗаполнения.Маршрут;
		
		ВалютаДокумента 		     = ДанныеЗаполнения.ВалютаДокумента;
		ВалютаДокументаКурсКратность = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ВалютаДокумента, ТекущаяДата());
		Курс                         = ВалютаДокументаКурсКратность.Курс;
		Кратность                    = ВалютаДокументаКурсКратность.Кратность;
		
		СтоянкаПервогоПункта = ДанныеЗаполнения.СтоянкаПунктОтправления;
		СтоянкаВПункте = уатЗащищенныеФункцииСервер_уэ.ПолучитьВремяСтоянкиВПункте(ДанныеЗаполнения.АдресОтправления, ТС.ТипТС);
		СтоянкаПервогоПункта = уатЗащищенныеФункцииСервер.СложитьВремя(СтоянкаПервогоПункта, СтоянкаВПункте);
		Если ДанныеЗаполнения.FTL И ДанныеЗаполнения.ПромежуточныеПункты.Количество() > 0 Тогда
			// Время отправления заполняется по плановой дате отправления
			ДатаИВремяОтправленияПлан = уатЗащищенныеФункцииСервер.СложитьВремя(ДанныеЗаполнения.ПромежуточныеПункты[0].ПрибытиеПлан, СтоянкаПервогоПункта);
		Иначе
			// Время отправления заполняется по временному окну отправления
			ДатаИВремяОтправленияПлан = уатЗащищенныеФункцииСервер.СложитьВремя(ДанныеЗаполнения.ОтправлениеС, СтоянкаПервогоПункта);
		КонецЕсли;
		Документы.уатМаршрутныйЛист.ЗаполнитьТаблицуЗаказовПоЗаказуНаТС(ЭтотОбъект, ДанныеЗаполнения);
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.уатЗаказПеревозчику_уэ") Тогда
		СтандартнаяОбработка = Ложь;
		
		Если ЗначениеЗаполнено(ДанныеЗаполнения.МаршрутныйЛист) Тогда 
			Возврат;
		КонецЕсли;
		
		Дата                      = ТекущаяДата();
		ТС                        = ДанныеЗаполнения.ТС;
		Прицеп1                   = ДанныеЗаполнения.Прицеп1;
		Прицеп2                   = ДанныеЗаполнения.Прицеп2;
		Водитель1                 = ?(ЗначениеЗаполнено(ДанныеЗаполнения.Водитель), ДанныеЗаполнения.Водитель, ДанныеЗаполнения.ТС.Водитель);
		ВесБрутто                 = ДанныеЗаполнения.ВесБрутто;
		ВидОперации               = Перечисления.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя;
		ВремяВПути                = ДанныеЗаполнения.Время;
		ДатаИВремяОтправленияПлан = ДанныеЗаполнения.ДатаИВремяОтправления;
		КоличествоМест            = ДанныеЗаполнения.КоличествоМест;
		Контрагент                = ДанныеЗаполнения.Контрагент;
		ДоговорКонтрагента        = ДанныеЗаполнения.ДоговорКонтрагента;
		Объем                     = ДанныеЗаполнения.Объем;
		Организация               = ДанныеЗаполнения.Организация;
		Расстояние                = ДанныеЗаполнения.Расстояние;
		ВидПеревозки              = ДанныеЗаполнения.ВидПеревозки;
		ПринадлежностьПеревозки   = Перечисления.уатПринадлежностьТС.Привлеченное;
		
		ВалютаДокумента 		     = ДанныеЗаполнения.ВалютаДокумента;
		ВалютаДокументаКурсКратность = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ВалютаДокумента, ТекущаяДата());
		Курс                         = ВалютаДокументаКурсКратность.Курс;
		Кратность                    = ВалютаДокументаКурсКратность.Кратность;
		
		ТабЗаказов = ДанныеЗаполнения.Грузы.Выгрузить(, "Заказ");
		ТабЗаказов.Свернуть("Заказ");
		
		// Заполнение дополнительных данных из ЗаказаНаТС.
		Если ТабЗаказов.Количество() > 0 Тогда
			ОснованиеЗаказНаТС = ТабЗаказов[0].Заказ;
			
			ВидПеревозки         = ОснованиеЗаказНаТС.ВидПеревозки;
			ОбъектСтроительства  = ОснованиеЗаказНаТС.ОбъектСтроительства;
			Подразделение        = ОснованиеЗаказНаТС.Подразделение;
			НаправлениеПеревозки = ОснованиеЗаказНаТС.НаправлениеПеревозки;
			Маршрут              = ОснованиеЗаказНаТС.Маршрут;
		КонецЕсли;
		
		ТабГрузов = ДанныеЗаполнения.Грузы.Выгрузить();
		ТабГрузов.Свернуть("Заказ,ГрузовоеМесто,ЕдиницаИзмерения", "Количество");
		мсвЗаполненныеЗаказыFTL = Новый Массив;
		
		Для Каждого ТекСтрока Из ТабЗаказов Цикл 
			Если ТекСтрока.Заказ.Мультимодальный И (Не ТекСтрока.Заказ.ЭтоЭтап 
					Или Не ЗначениеЗаполнено(ТекСтрока.Заказ.РодительскийЗаказ)) Тогда 
				Продолжить;
			КонецЕсли;
			
			ТекКонтрагент = ?(ТипЗнч(ТекСтрока.Заказ.Контрагент) = Тип("СправочникСсылка.Контрагенты"), 
				ТекСтрока.Заказ.Контрагент, 
				Неопределено
			);
			
			Если ТекСтрока.Заказ.FTL Тогда 
				// По FTL заказу на ТС всегда заполняются все грузы, независимо от грузов в заказе перевозчику
				Если мсвЗаполненныеЗаказыFTL.Найти(ТекСтрока.Заказ) = Неопределено Тогда
					Документы.уатМаршрутныйЛист.ЗаполнитьТаблицуЗаказовПоЗаказуНаТС(ЭтотОбъект, ТекСтрока.Заказ);
					мсвЗаполненныеЗаказыFTL.Добавить(ТекСтрока.Заказ);
				Иначе
					Продолжить;
				КонецЕсли;
			ИначеЕсли ТекСтрока.Заказ.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам Тогда
				СтрокиГрузов = ТабГрузов.НайтиСтроки(Новый Структура("Заказ", ТекСтрока.Заказ));
				Для Каждого ТекГруз Из СтрокиГрузов Цикл 
					СтрокиЗаказаНаТС = ТекГруз.Заказ.Товары.НайтиСтроки(Новый Структура("Номенклатура", ТекГруз.ГрузовоеМесто));
					Если СтрокиЗаказаНаТС.Количество() = 0 Тогда 
						Продолжить;
					КонецЕсли;
					
					НовСтрока = Заказы.Добавить();
					НовСтрока.ЗаказГрузоотправителя    = ТекГруз.Заказ;
					НовСтрока.Пункт                    = ТекГруз.Заказ.АдресОтправления;
					НовСтрока.ТипТочкиМаршрута         = Перечисления.уатТипыТочекМаршрута.Погрузка;
					НовСтрока.Номенклатура             = ТекГруз.ГрузовоеМесто;
					НовСтрока.ЕдиницаИзмерения         = ТекГруз.ЕдиницаИзмерения;
					НовСтрока.Количество               = ТекГруз.Количество;
					НовСтрока.ЕдиницаИзмеренияПоЗаказу = СтрокиЗаказаНаТС[0].ЕдиницаИзмерения;
					НовСтрока.КоличествоМест           = ?(СтрокиЗаказаНаТС[0].Количество = 0, СтрокиЗаказаНаТС[0].КоличествоМест, (ТекГруз.Количество / СтрокиЗаказаНаТС[0].Количество) * СтрокиЗаказаНаТС[0].КоличествоМест);
					НовСтрока.ВесБрутто                = ?(СтрокиЗаказаНаТС[0].Количество = 0, СтрокиЗаказаНаТС[0].ВесБрутто, (ТекГруз.Количество / СтрокиЗаказаНаТС[0].Количество) * СтрокиЗаказаНаТС[0].ВесБрутто);
					НовСтрока.Объем                    = ?(СтрокиЗаказаНаТС[0].Количество = 0, СтрокиЗаказаНаТС[0].Объем, (ТекГруз.Количество / СтрокиЗаказаНаТС[0].Количество) * СтрокиЗаказаНаТС[0].Объем);
					НовСтрока.Стоянка                  = ТекГруз.Заказ.СтоянкаПунктОтправления;
					НовСтрока.СтоянкаИзПункта          = уатЗащищенныеФункцииСервер_уэ.ПолучитьВремяСтоянкиВПункте(ТекГруз.Заказ.АдресОтправления, ТС.ТипТС);
					НовСтрока.ПрибытиеПлан             = ТекГруз.Заказ.ОтправлениеС;
					НовСтрока.Контрагент               = ТекКонтрагент;
				КонецЦикла;
				
				Для Каждого ТекГруз Из СтрокиГрузов Цикл 
					СтрокиЗаказаНаТС = ТекГруз.Заказ.Товары.НайтиСтроки(Новый Структура("Номенклатура", ТекГруз.ГрузовоеМесто));
					Если СтрокиЗаказаНаТС.Количество() = 0 Тогда 
						Продолжить;
					КонецЕсли;
					
					НовСтрока = Заказы.Добавить();
					НовСтрока.ЗаказГрузоотправителя    = ТекГруз.Заказ;
					НовСтрока.Пункт                    = ТекГруз.Заказ.АдресНазначения;
					НовСтрока.ТипТочкиМаршрута         = Перечисления.уатТипыТочекМаршрута.Разгрузка;
					НовСтрока.Номенклатура             = ТекГруз.ГрузовоеМесто;
					НовСтрока.ЕдиницаИзмерения         = ТекГруз.ЕдиницаИзмерения;
					НовСтрока.Количество               = ТекГруз.Количество;
					НовСтрока.ЕдиницаИзмеренияПоЗаказу = СтрокиЗаказаНаТС[0].ЕдиницаИзмерения;
					НовСтрока.КоличествоМест           = ?(СтрокиЗаказаНаТС[0].Количество = 0, СтрокиЗаказаНаТС[0].КоличествоМест, (ТекГруз.Количество / СтрокиЗаказаНаТС[0].Количество) * СтрокиЗаказаНаТС[0].КоличествоМест);
					НовСтрока.ВесБрутто                = ?(СтрокиЗаказаНаТС[0].Количество = 0, СтрокиЗаказаНаТС[0].ВесБрутто, (ТекГруз.Количество / СтрокиЗаказаНаТС[0].Количество) * СтрокиЗаказаНаТС[0].ВесБрутто);
					НовСтрока.Объем                    = ?(СтрокиЗаказаНаТС[0].Количество = 0, СтрокиЗаказаНаТС[0].Объем, (ТекГруз.Количество / СтрокиЗаказаНаТС[0].Количество) * СтрокиЗаказаНаТС[0].Объем);
					НовСтрока.Стоянка                  = ТекГруз.Заказ.СтоянкаПунктОтправления;
					НовСтрока.СтоянкаИзПункта          = уатЗащищенныеФункцииСервер_уэ.ПолучитьВремяСтоянкиВПункте(ТекГруз.Заказ.АдресНазначения, ТС.ТипТС);
					НовСтрока.ПрибытиеПлан             = ТекГруз.Заказ.ДоставкаС;
					НовСтрока.Контрагент               = ТекКонтрагент;
				КонецЦикла;
							
			ИначеЕсли ТекСтрока.Заказ.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам Тогда
				СтрокиГрузов = ТабГрузов.НайтиСтроки(Новый Структура("Заказ", ТекСтрока.Заказ));
				Для Каждого ТекГруз Из СтрокиГрузов Цикл 
					СтрокиЗаказаНаТС = ТекГруз.Заказ.ГрузовойСостав.НайтиСтроки(Новый Структура("ГрузовоеМесто", ТекГруз.ГрузовоеМесто));
					Если СтрокиЗаказаНаТС.Количество() = 0 Тогда 
						Продолжить;
					КонецЕсли;
					
					НоваяСтрока = Заказы.Добавить();
					НоваяСтрока.ЗаказГрузоотправителя    = ТекГруз.Заказ;
					НоваяСтрока.Номенклатура             = ТекГруз.ГрузовоеМесто;
					НоваяСтрока.ЕдиницаИзмеренияПоЗаказу = СтрокиЗаказаНаТС[0].ВидУпаковки;
					НоваяСтрока.ЕдиницаИзмеренияПоЗаказу = СтрокиЗаказаНаТС[0].ВидУпаковки;
					НоваяСтрока.ЕдиницаИзмерения         = ТекГруз.ЕдиницаИзмерения;
					НоваяСтрока.Количество               = ТекГруз.Количество;
					НоваяСтрока.КоличествоМест           = ?(СтрокиЗаказаНаТС[0].КоличествоМест = 0, СтрокиЗаказаНаТС[0].КоличествоМест, (ТекГруз.Количество / СтрокиЗаказаНаТС[0].КоличествоМест) * СтрокиЗаказаНаТС[0].КоличествоМест);
					НоваяСтрока.ВесБрутто                = ?(СтрокиЗаказаНаТС[0].КоличествоМест = 0, СтрокиЗаказаНаТС[0].ВесБрутто, (ТекГруз.Количество / СтрокиЗаказаНаТС[0].КоличествоМест) * СтрокиЗаказаНаТС[0].ВесБрутто);
					НоваяСтрока.Объем                    = ?(СтрокиЗаказаНаТС[0].КоличествоМест = 0, СтрокиЗаказаНаТС[0].Объем, (ТекГруз.Количество / СтрокиЗаказаНаТС[0].КоличествоМест) * СтрокиЗаказаНаТС[0].Объем);
					НоваяСтрока.Контрагент               = ТекКонтрагент;
					НоваяСтрока.ТипТочкиМаршрута         = Перечисления.уатТипыТочекМаршрута.Погрузка;
					НоваяСтрока.ПрибытиеПлан             = ТекГруз.Заказ.ОтправлениеС;
					НоваяСтрока.Пункт                    = ТекГруз.Заказ.АдресОтправления;
					НоваяСтрока.Стоянка                  = ТекГруз.Заказ.СтоянкаПунктОтправления;
					НоваяСтрока.СтоянкаИзПункта          = уатЗащищенныеФункцииСервер_уэ.ПолучитьВремяСтоянкиВПункте(ТекГруз.Заказ.АдресОтправления, ТС.ТипТС);
				КонецЦикла;
				
				Для Каждого ТекГруз Из СтрокиГрузов Цикл 
					СтрокиЗаказаНаТС = ТекГруз.Заказ.ГрузовойСостав.НайтиСтроки(Новый Структура("ГрузовоеМесто", ТекГруз.ГрузовоеМесто));
					Если СтрокиЗаказаНаТС.Количество() = 0 Тогда 
						Продолжить;
					КонецЕсли;
					
					НоваяСтрока = Заказы.Добавить();
					НоваяСтрока.ЗаказГрузоотправителя    = ТекГруз.Заказ;
					НоваяСтрока.Номенклатура             = ТекГруз.ГрузовоеМесто;
					НоваяСтрока.ЕдиницаИзмеренияПоЗаказу = СтрокиЗаказаНаТС[0].ВидУпаковки;
					НоваяСтрока.ЕдиницаИзмерения         = ТекГруз.ЕдиницаИзмерения;
					НоваяСтрока.Количество               = ТекГруз.Количество;
					НоваяСтрока.КоличествоМест           = ?(СтрокиЗаказаНаТС[0].КоличествоМест = 0, СтрокиЗаказаНаТС[0].КоличествоМест, (ТекГруз.Количество / СтрокиЗаказаНаТС[0].КоличествоМест) * СтрокиЗаказаНаТС[0].КоличествоМест);
					НоваяСтрока.ВесБрутто                = ?(СтрокиЗаказаНаТС[0].КоличествоМест = 0, СтрокиЗаказаНаТС[0].ВесБрутто, (ТекГруз.Количество / СтрокиЗаказаНаТС[0].КоличествоМест) * СтрокиЗаказаНаТС[0].ВесБрутто);
					НоваяСтрока.Объем                    = ?(СтрокиЗаказаНаТС[0].КоличествоМест = 0, СтрокиЗаказаНаТС[0].Объем, (ТекГруз.Количество / СтрокиЗаказаНаТС[0].КоличествоМест) * СтрокиЗаказаНаТС[0].Объем);
					НоваяСтрока.Контрагент               = ТекКонтрагент;
					НоваяСтрока.ТипТочкиМаршрута         = Перечисления.уатТипыТочекМаршрута.Разгрузка;
					НоваяСтрока.ПрибытиеПлан             = ТекГруз.Заказ.ДоставкаС;
					НоваяСтрока.Пункт                    = ТекГруз.Заказ.АдресНазначения;
					НоваяСтрока.Стоянка                  = ТекГруз.Заказ.СтоянкаПунктНазначения;
					НоваяСтрока.СтоянкаИзПункта          = уатЗащищенныеФункцииСервер_уэ.ПолучитьВремяСтоянкиВПункте(ТекГруз.Заказ.АдресНазначения, ТС.ТипТС);
				КонецЦикла;
				
			ИначеЕсли ТекСтрока.Заказ.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам Тогда
				НоваяСтрока = Заказы.Добавить();
				НоваяСтрока.ЗаказГрузоотправителя 		= ТекСтрока.Заказ;
				НоваяСтрока.ЕдиницаИзмерения 	  		= Справочники.ЕдиницыИзмерения.ПустаяСсылка();
				НоваяСтрока.ЕдиницаИзмеренияПоЗаказу 	= Справочники.ЕдиницыИзмерения.ПустаяСсылка();				
				НоваяСтрока.Количество            		= 1;
				НоваяСтрока.КоличествоМест        		= ТекСтрока.Заказ.КоличествоМест;
				НоваяСтрока.ВесБрутто             		= ТекСтрока.Заказ.ВесБрутто;
				НоваяСтрока.Объем                 		= ТекСтрока.Заказ.Объем;
				НоваяСтрока.Контрагент            		= ТекКонтрагент;
				НоваяСтрока.ТипТочкиМаршрута      		= Перечисления.уатТипыТочекМаршрута.Погрузка;
				НоваяСтрока.ПрибытиеПлан          		= ТекСтрока.Заказ.ОтправлениеС;
				НоваяСтрока.Пункт                 		= ТекСтрока.Заказ.АдресОтправления;
				НоваяСтрока.Стоянка               		= ТекСтрока.Заказ.СтоянкаПунктОтправления;
				НоваяСтрока.СтоянкаИзПункта       		= уатЗащищенныеФункцииСервер_уэ.ПолучитьВремяСтоянкиВПункте(ТекСтрока.Заказ.АдресОтправления, ТС.ТипТС);
				
				НоваяСтрока = Заказы.Добавить();
				НоваяСтрока.ЗаказГрузоотправителя 		= ТекСтрока.Заказ;
				НоваяСтрока.ЕдиницаИзмерения 	  		= Справочники.ЕдиницыИзмерения.ПустаяСсылка();
				НоваяСтрока.ЕдиницаИзмеренияПоЗаказу 	= Справочники.ЕдиницыИзмерения.ПустаяСсылка();				
				НоваяСтрока.Количество            		= 1;
				НоваяСтрока.КоличествоМест        		= ТекСтрока.Заказ.КоличествоМест;
				НоваяСтрока.ВесБрутто             		= ТекСтрока.Заказ.ВесБрутто;
				НоваяСтрока.Объем                 		= ТекСтрока.Заказ.Объем;
				НоваяСтрока.Контрагент            		= ТекКонтрагент;
				НоваяСтрока.ТипТочкиМаршрута      		= Перечисления.уатТипыТочекМаршрута.Разгрузка;
				НоваяСтрока.ПрибытиеПлан          		= ТекСтрока.Заказ.ДоставкаС;
				НоваяСтрока.Пункт                 		= ТекСтрока.Заказ.АдресНазначения;
				НоваяСтрока.Стоянка               		= ТекСтрока.Заказ.СтоянкаПунктНазначения;
				НоваяСтрока.СтоянкаИзПункта       		= уатЗащищенныеФункцииСервер_уэ.ПолучитьВремяСтоянкиВПункте(ТекСтрока.Заказ.АдресНазначения, ТС.ТипТС);
			КонецЕсли;
		КонецЦикла;
		
		Если Не ЗначениеЗаполнено(ДатаИВремяОтправленияПлан) И Заказы.Количество() > 0 Тогда
			ДатаИВремяОтправленияПлан = уатЗащищенныеФункцииСервер.СложитьВремя(Заказы[0].ПрибытиеПлан, Заказы[0].Стоянка);
			ДатаИВремяОтправленияПлан = уатЗащищенныеФункцииСервер.СложитьВремя(ДатаИВремяОтправленияПлан, Заказы[0].СтоянкаИзПункта);
		КонецЕсли;
		КэшКурсов = Неопределено;
		
	ИначеЕсли уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП() И 
		ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.уатАктОтгрузки_уэ") Тогда
		СтандартнаяОбработка = Ложь;
		
		Дата                    = ТекущаяДата();
		ВидОперации             = Перечисления.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя;
		ВидПеревозки            = Справочники.уатВидыПеревозок.АвтомобильнаяГрузовая;
		Организация             = ДанныеЗаполнения.Организация;
		ПринадлежностьПеревозки = ДанныеЗаполнения.ПринадлежностьПеревозки;
		Контрагент              = ДанныеЗаполнения.Перевозчик;
		Водитель1               = ДанныеЗаполнения.Водитель1;
		
		ДанныеЗаполненияПоАктуОтгрузки = Документы.уатМаршрутныйЛист.ПолучитьДанныеЗаполненияПоАктуОтгрузки(ДанныеЗаполнения);
		
		ДатаВремяОтправленияШапка = Неопределено;
		
		Для Каждого ДанныеТекЗаказа Из ДанныеЗаполненияПоАктуОтгрузки Цикл 
			Для Каждого ТекПункт Из ДанныеТекЗаказа.Пункты Цикл 
				Для Каждого ТекГруз Из ДанныеТекЗаказа.Грузы Цикл 
					НоваяСтрока = Заказы.Добавить();
					НоваяСтрока.GUIDСтроки               = Новый УникальныйИдентификатор();
					НоваяСтрока.ЗаказГрузоотправителя    = ДанныеТекЗаказа.Заказ;
					НоваяСтрока.Контрагент               = ДанныеТекЗаказа.Контрагент;
					НоваяСтрока.Пункт                    = ТекПункт.Пункт;
					НоваяСтрока.ТипТочкиМаршрута         = ТекПункт.ТипТочкиМаршрута;
					НоваяСтрока.Стоянка                  = ТекПункт.Стоянка;
					НоваяСтрока.СтоянкаИзПункта          = уатЗащищенныеФункцииСервер_уэ.ПолучитьВремяСтоянкиВПункте(НоваяСтрока.Пункт, ТС.ТипТС);
					НоваяСтрока.Номенклатура             = ТекГруз.Номенклатура;
					НоваяСтрока.ЕдиницаИзмерения         = ТекГруз.ЕдиницаИзмерения;
					НоваяСтрока.ЕдиницаИзмеренияПоЗаказу = ТекГруз.ЕдиницаИзмерения;
					НоваяСтрока.Количество               = ТекГруз.Количество;
					НоваяСтрока.ВесБрутто                = ТекГруз.ВесБрутто;
					НоваяСтрока.Объем                    = ТекГруз.Объем;
					НоваяСтрока.КоличествоМест           = ТекГруз.КоличествоМест;
					НоваяСтрока.ПрибытиеПлан             = ДанныеТекЗаказа.ОтправлениеС;
					
					Если ДатаВремяОтправленияШапка = Неопределено Тогда 
						ТекСтоянка = уатЗащищенныеФункцииСервер.СложитьВремя(НоваяСтрока.Стоянка, НоваяСтрока.СтоянкаИзПункта);
						ТекСтоянкаСек = Цел(ТекСтоянка) * 60 * 60 + ((ТекСтоянка - Цел(ТекСтоянка)) * 100 * 60);
						ДатаВремяОтправленияШапка = ДанныеТекЗаказа.ОтправлениеС + ТекСтоянкаСек;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
		Если Не ДатаВремяОтправленияШапка = Неопределено Тогда 
			ДатаИВремяОтправленияПлан = ДатаВремяОтправленияШапка;
		КонецЕсли;
	КонецЕсли;
	
	// Пересчет планового времени прибытия и расстояний между пунктами
	ОбновитьВремяРасстояниеМеждуПунктами();
	тблЗаказы = Заказы.Выгрузить();
	Документы.уатМаршрутныйЛист.ПересчитатьПлановоеВремя(тблЗаказы, ДатаИВремяОтправленияПлан, ПересчетВремени);
	Заказы.Загрузить(тблЗаказы);
	
	Документы.уатМаршрутныйЛист.УстановитьФлагФормироватьУведомленияОбОпозданияхВРейсе(ЭтотОбъект);
	РазрешенаВыгрузкаВWMS = ПолучитьФункциональнуюОпцию("уатИспользоватьИнтеграциюWMS_уэ");
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Заголовок = уатОбщегоНазначенияТиповые.уатПредставлениеДокументаПриПроведении(ЭтотОбъект);
	
	Если НЕ ЗначениеЗаполнено(ДатаИВремяОтправления) Тогда
		НайденныйРеквизит = ПроверяемыеРеквизиты.Найти("Водитель1");
		Если ЗначениеЗаполнено(НайденныйРеквизит) Тогда
			ПроверяемыеРеквизиты.Удалить(НайденныйРеквизит);
		КонецЕсли;
	КонецЕсли;
	
	Если ВидПеревозки = Справочники.уатВидыПеревозок.Авиационная 
			Или ВидПеревозки = Справочники.уатВидыПеревозок.Железнодорожная
			Или ВидПеревозки = Справочники.уатВидыПеревозок.Морская Тогда 
		НайденныйРеквизит = ПроверяемыеРеквизиты.Найти("Водитель1");
		Если ЗначениеЗаполнено(НайденныйРеквизит) Тогда
			ПроверяемыеРеквизиты.Удалить(НайденныйРеквизит);
		КонецЕсли;
		НайденныйРеквизит = ПроверяемыеРеквизиты.Найти("ТС");
		Если ЗначениеЗаполнено(НайденныйРеквизит) Тогда
			ПроверяемыеРеквизиты.Удалить(НайденныйРеквизит);
		КонецЕсли;
	КонецЕсли;
	
	// Контроль наличия виртуальных ТС
	ЕстьВыполненные = Ложь;
	Для Каждого ТекСтрока Из Заказы Цикл 
		Если ТекСтрока.Выполнен Тогда 
			ЕстьВыполненные = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если ЕстьВыполненные И ТС.ПринадлежностьТС = Перечисления.уатПринадлежностьТС.Виртуальное Тогда 
		ТекстНСТР = НСтр("en='It is forbidden to send a route list with a virtual vehicle."
"It is necessary to select another vehicle.';ru='Запрещено отправление маршрутного листа с виртуальным транспортным средством."
"Необходимо выбрать другое транспортное средство.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР, ЭтотОбъект,,, Отказ);
	КонецЕсли;
		
	// Проверка заполненности фактических дат для выполненных строк
	флПланФакт = Константы.уатУчетПланФактаПоМаршрутуВМаршрутныхЛистах.Получить();
	мсвЗаказы = Новый Массив;
	Для Каждого ТекСтрока Из Заказы Цикл 
		Если ТекСтрока.Выполнен Тогда 
			Если флПланФакт Тогда
				Если Не ЗначениеЗаполнено(ТекСтрока.ПрибытиеФакт) Тогда 
					ТекстНСТР = НСтр("en='Not specified the actual time of arrival to point ""№%1"" for executed line.';ru='Не указано фактическое время прибытия в пункт ""№%1"" для выполненной строки.'");
					ТекстНСТР = СтрШаблон(ТекстНСТР, ТекСтрока.Пункт);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР, ЭтотОбъект, "Заказы["+Формат(ТекСтрока.НомерСтроки, "ЧН=0; ЧГ=0")+"].ПрибытиеФакт",, Отказ);
				КонецЕсли;
				Если Не ЗначениеЗаполнено(ТекСтрока.УбытиеФакт) Тогда 
					ТекстНСТР = НСтр("en='Not indicated actual departure time from point ""№%1"" for line.';ru='Не указано фактическое время убытия из пункта ""№%1"" для выполненной строки.'");
					ТекстНСТР = СтрШаблон(ТекстНСТР, ТекСтрока.Пункт);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР, ЭтотОбъект, "Заказы["+Формат(ТекСтрока.НомерСтроки, "ЧН=0; ЧГ=0")+"].УбытиеФакт",, Отказ);
				КонецЕсли;
			Иначе
				Если Не ЗначениеЗаполнено(ТекСтрока.ПрибытиеПлан) Тогда 
					ТекстНСТР = НСтр("en='Not specified the time of arrival to point ""№%1"" for executed line.';ru='Не указано время прибытия в пункт ""№%1"" для выполненной строки.'");
					ТекстНСТР = СтрШаблон(ТекстНСТР, ТекСтрока.Пункт);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР, ЭтотОбъект, "Заказы["+Формат(ТекСтрока.НомерСтроки, "ЧН=0; ЧГ=0")+"].ПрибытиеПлан",, Отказ);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если мсвЗаказы.Найти(ТекСтрока.ЗаказГрузоотправителя) = Неопределено Тогда
			мсвЗаказы.Добавить(ТекСтрока.ЗаказГрузоотправителя);
		КонецЕсли;
	КонецЦикла;
	
	ПроверитьЧтоНетДублейУникальныхГМ(Отказ);
	
	// Проверка выбранных Заказов на ТС в ТЧ Доходы и ТЧ Расходы
	Для Каждого ТекУслуга Из Доходы Цикл
		Если ЗначениеЗаполнено(ТекУслуга.ЗаказНаТС) И мсвЗаказы.Найти(ТекУслуга.ЗаказНаТС) = Неопределено Тогда
			ТекстНСТР = НСтр("en='At line №%1 of tabular section ""Incomes"" specified order for trucking absent in routing list.';ru='В строке №%1 табличной части ""Доходы"" указан заказ на ТС, отсутствующий в маршрутном листе.'");
			ТекстНСТР = СтрШаблон(ТекстНСТР, ТекУслуга.НомерСтроки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР, ЭтотОбъект, "Доходы["+Формат(ТекУслуга.НомерСтроки, "ЧН=0; ЧГ=0")+"].ЗаказНаТС",, Отказ);
		КонецЕсли;
	КонецЦикла;
	Для Каждого ТекУслуга Из Расходы Цикл
		Если ЗначениеЗаполнено(ТекУслуга.ЗаказНаТС) И мсвЗаказы.Найти(ТекУслуга.ЗаказНаТС) = Неопределено Тогда
			ТекстНСТР = НСтр("en='At line №%1 of tabular section ""Expenses"" specified order for trucking not listed in routing list.';ru='В строке №%1 табличной части ""Расходы"" указан заказ на ТС, отсутствующий в маршрутном листе.'");
			ТекстНСТР = СтрШаблон(ТекстНСТР, ТекУслуга.НомерСтроки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР, ЭтотОбъект, "Расходы["+Формат(ТекУслуга.НомерСтроки, "ЧН=0; ЧГ=0")+"].ЗаказНаТС",, Отказ);
		КонецЕсли;
	КонецЦикла;
	
	// проверка наличия строк с одинаковыми услугами и разными валютами
	тблУслугиПоВалютам = Доходы.Выгрузить(, "Номенклатура, Валюта").Скопировать();
	тблУслугиПоВалютам.Свернуть("Номенклатура, Валюта");
	тблУслугиСвернутая = тблУслугиПоВалютам.Скопировать();
	тблУслугиСвернутая.Свернуть("Номенклатура");
	Если тблУслугиПоВалютам.Количество() <> тблУслугиСвернутая.Количество() Тогда
		уатОбщегоНазначенияТиповые.СообщитьОбОшибке("В табличной части ""Доходы"" не должно быть строк с одной номенклатурой, но разными валютами!",
			Отказ, Заголовок);
	КонецЕсли;
	тблУслугиПоВалютам = Расходы.Выгрузить(, "Номенклатура, Валюта, Контрагент").Скопировать();
	тблУслугиПоВалютам.Свернуть("Номенклатура, Валюта, Контрагент");
	тблУслугиСвернутая = тблУслугиПоВалютам.Скопировать();
	тблУслугиСвернутая.Свернуть("Номенклатура, Контрагент");
	Если тблУслугиПоВалютам.Количество() <> тблУслугиСвернутая.Количество() Тогда
		уатОбщегоНазначенияТиповые.СообщитьОбОшибке("В табличной части ""Расходы"" не должно быть строк с одной номенклатурой и контрагентом, но разными валютами!",
			Отказ, Заголовок);
	КонецЕсли;
		
	// Проверка на наличие отрицательного времени ожидания между пунктами
	// Контроль хронологической последовательности пунктов
	Для СчСтрок=1 По Заказы.Количество()-1 Цикл 
		ПредСтрока = Заказы[СчСтрок-1];
		ТекСтрока = Заказы[СчСтрок];
		
		Если СчСтрок = 1 И ПредСтрока.Ожидание < 0 Тогда 
			ТекстНСТР = НСтр("en='Waiting time cannot be negative.';ru='Время ожидания не может быть отрицательным.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР,,,, Отказ);
		КонецЕсли;
		
		Если ТекСтрока.Ожидание < 0 Тогда 
			ТекстНСТР = НСтр("en='Waiting time cannot be negative.';ru='Время ожидания не может быть отрицательным.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР,,,, Отказ);
		КонецЕсли;
		
		Если ПредСтрока.ПрибытиеПлан > ТекСтрока.ПрибытиеПлан Тогда 
			ТекстНСТР = НСтр("en='Time of arrival at point ""%1"" is less than arrival time in the previous point.';ru='Время прибытия в пункт ""%1"" меньше времени прибытия в предыдущий пункт.'");
			ТекстНСТР = СтрШаблон(ТекстНСТР, ТекСтрока.Пункт);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР,,,, Отказ);
		КонецЕсли;
	КонецЦикла;
	
	// Проверка весо-объемных характеристик
	Если Модифицированность() Тогда 
		МаксВесСцепки      = 0;
		МаксОбъемСцепки    = 0;
		МаксУпаковокСцепки = 0;
		
		ГрузоподъемностьИОбъемТС = уатОбщегоНазначения.уатПолучитьГрузоподъемностьИОбъемТС(ТС, Истина);
		МаксВесСцепки      = МаксВесСцепки + ГрузоподъемностьИОбъемТС.Грузоподъемность;
		МаксОбъемСцепки    = МаксОбъемСцепки + ГрузоподъемностьИОбъемТС.ОбъемКузова;
		МаксУпаковокСцепки = МаксУпаковокСцепки +
			?(ТС.МаксимальноеКоличествоУпаковок <> 0
			И ТС.Модель.МаксимальноеКоличествоУпаковок < ТС.МаксимальноеКоличествоУпаковок,
			ТС.МаксимальноеКоличествоУпаковок,
			ТС.Модель.МаксимальноеКоличествоУпаковок);
		
		ГрузоподъемностьИОбъемТС = уатОбщегоНазначения.уатПолучитьГрузоподъемностьИОбъемТС(Прицеп1, Истина);
		МаксВесСцепки      = МаксВесСцепки + ГрузоподъемностьИОбъемТС.Грузоподъемность;
		МаксОбъемСцепки    = МаксОбъемСцепки + ГрузоподъемностьИОбъемТС.ОбъемКузова;
		МаксУпаковокСцепки = МаксУпаковокСцепки +
			?(Прицеп1.МаксимальноеКоличествоУпаковок <> 0
			И Прицеп1.Модель.МаксимальноеКоличествоУпаковок < Прицеп1.МаксимальноеКоличествоУпаковок,
			Прицеп1.МаксимальноеКоличествоУпаковок, Прицеп1.Модель.МаксимальноеКоличествоУпаковок);

		Если Не Прицеп1 = Прицеп2 Тогда 
			ГрузоподъемностьИОбъемТС = уатОбщегоНазначения.уатПолучитьГрузоподъемностьИОбъемТС(Прицеп2, Истина);
			МаксВесСцепки      = МаксВесСцепки + ГрузоподъемностьИОбъемТС.Грузоподъемность;
			МаксОбъемСцепки    = МаксОбъемСцепки + ГрузоподъемностьИОбъемТС.ОбъемКузова;
			МаксУпаковокСцепки = МаксУпаковокСцепки +
			?(Прицеп2.МаксимальноеКоличествоУпаковок <> 0
			И Прицеп2.Модель.МаксимальноеКоличествоУпаковок < Прицеп2.МаксимальноеКоличествоУпаковок,
			Прицеп2.МаксимальноеКоличествоУпаковок, Прицеп2.Модель.МаксимальноеКоличествоУпаковок);

		КонецЕсли;
		
		МаксимальныеХарактеристики = ПолучитьМаксимальныеХарактеристики();
		
		Если ЗначениеЗаполнено(МаксВесСцепки) И МаксВесСцепки < МаксимальныеХарактеристики.ВесБрутто Тогда 
			Если ЗначениеЗаполнено(Прицеп1) Или ЗначениеЗаполнено(Прицеп2) Тогда
				ТекстНСТР = НСтр("en='Weight of cargo in document exceeds carrying capacity of vehicle and trailer!';ru='Вес груза в документе превышает общую грузоподъемность ТС и прицепа!'");
			Иначе
				ТекстНСТР = НСтр("en='Weight of cargo in document exceeds carrying capacity of vehicle!';ru='Вес груза в документе превышает грузоподъемность !'");
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(МаксОбъемСцепки) И МаксОбъемСцепки < МаксимальныеХарактеристики.Объем Тогда 
			Если ЗначениеЗаполнено(Прицеп1) Или ЗначениеЗаполнено(Прицеп2) Тогда
				ТекстНСТР = НСтр("en='Volume of cargo in document exceeds volume of vehicle and trailer!';ru='Объем груза в документе превышает общий объем ТС и прицепа!'");
			Иначе
				ТекстНСТР = НСтр("en='Volume of cargo in document exceeds volume of vehicle!';ru='Объем груза в документе превышает объем кузова!'");
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(МаксУпаковокСцепки) И МаксУпаковокСцепки < МаксимальныеХарактеристики.КоличествоМест Тогда 
			Если ЗначениеЗаполнено(Прицеп1) Или ЗначениеЗаполнено(Прицеп2) Тогда
				ТекстНСТР = НСтр("en='Number of packages in document exceeds maximum number of packages of vehicle and trailer!';ru='Количество упаковок в документе превышает максимальное количество упаковок ТС и прицепа!'");
			Иначе
				ТекстНСТР = НСтр("en='Number of packages in document exceeds maximum number of packages of vehicle!';ru='Количество упаковок в документе превышает максимальное количество упаковок!'");
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		КонецЕсли;
	КонецЕсли;
	
	ПроверкаСоответствияХарактеристикТСиЗаказов();
	уатОбщегоНазначения.ПроверкаЗаполненияПодразделения(Организация, Подразделение, Отказ, Заголовок);
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// Процедура выполняет очистку записей в табличной части "ПрисоединенныеФайлы"
// от неиспользуемых (утративших актуальность) строк.
//
Процедура ОчисткаНеактуальныхСтрокПрисоединенныхФайлов()
	
	УдаляемыеСтроки = Новый Массив();
	
	Для Каждого ТекПФ Из ПрисоединенныеФайлы Цикл 
		НайдСтрока = Заказы.Найти(ТекПФ.GUIDСтрокиЗаказа, "GUIDСтроки");
		Если НайдСтрока = Неопределено Тогда 
			УдаляемыеСтроки.Добавить(ТекПФ);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого УдаляемаяСтрока Из УдаляемыеСтроки Цикл 
		ПрисоединенныеФайлы.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
КонецПроцедуры

// Проверяет правильность заполнения строк табличной части "Заказы".
//
// Параметры:
// Параметры: 
//  ТаблицаПоЗаказам        - таблица значений, содержащая данные для проведения и проверки ТЧ Заказы
//  СтруктураШапкиДокумента - выборка из результата запроса по шапке документа,
//  Отказ                   - флаг отказа в проведении.
//  Заголовок               - строка, заголовок сообщения об ошибке проведения.
//
Процедура ПроверитьЗаполнениеТабличнойЧастиЗаказы(Отказ, Заголовок)
	
	Если Заказы.Количество() = 0 Тогда
		ТекстНСТР = НСтр("en='The tabular section ""Orders"" is not filled!';ru='Не заполнена табличная часть ""Заказы""!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР,,,, Отказ);
		Возврат;
	КонецЕсли;
	
	// !!!!вызываем не стандартный метод проверки, а делаем это своим потому что если у нас выбраны 
	// пункт выезда и возврата то в соответствующих строках таб части будет заполнено только поле Пункт 
	// и стандартный метод естественно будет ругаться на эту строку 
	// уатОбщегоНазначенияТиповые.уатПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, ""Заказы"", 
	//     СтруктураОбязательныхПолей, Отказ, Заголовок);
	
	ПредставлениеТабличнойЧасти = ЭтотОбъект.Метаданные().ТабличныеЧасти.Заказы.Представление();
	МетаданныеРеквизиты         = ЭтотОбъект.Метаданные().ТабличныеЧасти.Заказы.Реквизиты;
	Для Каждого ТекСтрока ИЗ Заказы цикл
		
		// Укажем, что надо проверить:
		Если ТекСтрока.ЗаказГрузоотправителя.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам Тогда
			СтруктураОбязательныхПолей = Новый Структура("Количество");	
		ИначеЕсли ТекСтрока.ЗаказГрузоотправителя.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам Тогда
			СтруктураОбязательныхПолей = Новый Структура("Номенклатура, Количество");	
		Иначе
			СтруктураОбязательныхПолей = Новый Структура("Номенклатура, ЕдиницаИзмерения, Количество");	
		КонецЕсли;
				
		Если ЗначениеЗаполнено(ТекСтрока.ЗаказГрузоотправителя) 
			И ТекСтрока.ТипТочкиМаршрута <> Перечисления.уатТипыТочекМаршрута.ПромежуточныйПункт Тогда
			Для Каждого КлючЗначение Из СтруктураОбязательныхПолей Цикл
				Значение = ТекСтрока[КлючЗначение.Ключ];
				Если НЕ ЗначениеЗаполнено(Значение) Тогда
					Если НЕ ЗначениеЗаполнено(КлючЗначение.Значение) Тогда
						ПредставлениеРеквизита = СокрЛП(МетаданныеРеквизиты[КлючЗначение.Ключ].Представление());
						
						ТекстНСТР = НСтр("en='At line №%1 of tabular section ""%2"" is not completed attribute value ""%3""!';ru='В строке №%1 табличной части ""%2"" не заполнено значение реквизита ""%3""!'");
						ТекстНСТР = СтрШаблон(ТекстНСТР, СокрЛП(ТекСтрока.НомерСтроки), ПредставлениеТабличнойЧасти, ПредставлениеРеквизита);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР,,,,Отказ);
					Иначе
						ТекстНСТР = НСтр("en='At line №%1 of tabular section ""%2"" ';ru='В строке №%1 табличной части ""%2"" '") + КлючЗначение.Значение;
						ТекстНСТР = СтрШаблон(ТекстНСТР, СокрЛП(ТекСтрока.НомерСтроки), ПредставлениеТабличнойЧасти);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР,,,,Отказ);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Если НЕ ЗначениеЗаполнено(ТекСтрока.Пункт) тогда
				ТекстНСТР = НСтр("en='At line №%1 in tabular section ""%2"" is not completed attribute value of ""Destination""!';ru='В строке №%1 табличной части ""%2"" не заполнено значение реквизита ""Пункт назначения""!'");
				ТекстНСТР = СтрШаблон(ТекстНСТР, СокрЛП(ТекСтрока.НомерСтроки), ПредставлениеТабличнойЧасти);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР,,,,Отказ);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры // ПроверитьЗаполнениеТабличнойЧастиЗаказы()

Процедура АвтоматическийРасчетИтогов() Экспорт
	Если ДополнительныеСвойства.Свойство("НеПересчитыватьИтоги") Тогда
		Возврат;
	КонецЕсли;
	
	флАвторасчетПриСоздании = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(
		ПользователиКлиентСервер.АвторизованныйПользователь(), "МаршрутныйЛистАвторасчетДоходовРасходовПриСоздании");
	Если Ссылка.Пустая() И НЕ флАвторасчетПриСоздании Тогда
		Возврат;
	КонецЕсли;
	
	флПересчетИтогов = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(
		ПользователиКлиентСервер.АвторизованныйПользователь(), "МаршрутныйЛистПерерасчетИтоговПриПроведении");
		
	флРасчетИтогов = флАвторасчетПриСоздании И Ссылка.Пустая() ИЛИ флПересчетИтогов;
	
	// Автопересчет услуг выполняется, если:
	// 1) установлено право ПерерасчетИтоговПриПроведении
	// 2) заказ закрыт (указана дата закрытия) - в этом случае сам заказ не изменяется,
	//	а выдается сообщение о необходимости пересчета, если есть различия в общей сумме услуг до и после пересчета
	// В других случаях отказываемся от автопересчета услуг
	Если НЕ флРасчетИтогов И НЕ ЗначениеЗаполнено(ДатаЗакрытия) Тогда
		Возврат;
	КонецЕсли;
	
	флПлановыеУслуги = ПолучитьФункциональнуюОпцию("уатИспользоватьПлановыеУслуги_уэ");
	флИнтерактивно = ДополнительныеСвойства.Свойство("Интерактивно");
	флСообщение = Ложь;
	
	СуммаДоходовСтарая = уатОбщегоНазначенияТиповые.уатПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Доходы");
	СуммаЗатратСтарая = уатОбщегоНазначенияТиповые.уатПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Расходы");
	
	Если флПлановыеУслуги Тогда  
		СуммаЗатратПланСтарая = уатОбщегоНазначенияТиповые.уатПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Расходы",,Истина);
	КонецЕсли;
	
	флВыполненАвтопересчетУслуг = 0; //флаг числовой (0 - пересчет не изменил данные ТЧ, 1 - изменил доходы, 2 - изменил расходы, 3 - изменил доходы и расходы)
	
	Если флРасчетИтогов Тогда
		Документы.уатМаршрутныйЛист.РассчитатьВыработкуПоЗаказам(ЭтотОбъект);
	КонецЕсли;
	
	ДопПараметры = Новый Структура("ЗаполнятьТЧДоходы, ЗаполнятьТЧРасходы", Ложь, Ложь);
	
	Если Доходы.Количество() > 0 ИЛИ флАвторасчетПриСоздании И Ссылка.Пустая() Тогда
		// перенос значений из структуры в документ-объект
		Если флРасчетИтогов Тогда
			СтруктураДокумента = уатОбщегоНазначенияКлиентСервер.СтруктураДокумента(ЭтотОбъект, "уатМаршрутныйЛист", ДопПараметры);
			уатРасчетыПоТарифам_уэ.РассчитатьУслугиПоМаршрутномуЛисту(СтруктураДокумента, "Доходы");
			уатРасчетыПоТарифамКлиентСервер_уэ.ЗаполнитьДоходыРасходыИзСтруктуры(ЭтотОбъект, СтруктураДокумента, "Доходы", "уатМаршрутныйЛист",, флСообщение);
			
			СуммаДоходовНовая = уатОбщегоНазначенияТиповые.уатПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Доходы");
			СуммаДоходов = СуммаДоходовНовая;			
		Иначе
			ЭтотОбъектКопия = ЭтотОбъект.Скопировать();
			ЭтотОбъектКопия.Дата = ЭтотОбъект.Дата;
			ЭтотОбъектКопия.ДатаЗакрытия = ЭтотОбъект.ДатаЗакрытия;
			
			Документы.уатМаршрутныйЛист.РассчитатьВыработкуПоЗаказам(ЭтотОбъектКопия);
			
			СтруктураДокумента = уатОбщегоНазначенияКлиентСервер.СтруктураДокумента(ЭтотОбъектКопия, "уатМаршрутныйЛист", ДопПараметры);
			уатРасчетыПоТарифам_уэ.РассчитатьУслугиПоМаршрутномуЛисту(СтруктураДокумента, "Доходы");
			уатРасчетыПоТарифамКлиентСервер_уэ.ЗаполнитьДоходыРасходыИзСтруктуры(ЭтотОбъектКопия, СтруктураДокумента, "Доходы", "уатМаршрутныйЛист",, флСообщение);
			
			СуммаДоходовНовая = уатОбщегоНазначенияТиповые.уатПолучитьСуммуДокументаСНДС(ЭтотОбъектКопия, "Доходы");			
		КонецЕсли;
		
		Если СуммаДоходовНовая <> СуммаДоходовСтарая Тогда
			Если НЕ Ссылка.Пустая() И НЕ флИнтерактивно Тогда //неинтерактивный пересчет, например при групповом проведении документов
				Если флРасчетИтогов Тогда
					ТекстНСТР = НСтр("en='Automatically recalculate tabular section ""Incomes"" in """ + Ссылка
						+ """';ru='Выполнен автоматический пересчет табличной части ""Доходы"" в документе """ + Ссылка + """'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР, ЭтотОбъект);
				Иначе
					ТекстНСТР = НСтр("en='It is necessary to recalculate of tabular section ""Incomes"" in """ + Ссылка
						+ """!';ru='Необходимо выполнить пересчет табличной части ""Доходы"" в документе """ + Ссылка + """!'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР, ЭтотОбъект);
				КонецЕсли;
			КонецЕсли;
			флВыполненАвтопересчетУслуг = 1;
		КонецЕсли;
	КонецЕсли;
	
	Если Расходы.Количество() > 0 ИЛИ флАвторасчетПриСоздании И Ссылка.Пустая() Тогда
		// заполнение промежуточной структуры документа
		СтруктураДокумента = уатОбщегоНазначенияКлиентСервер.СтруктураДокумента(ЭтотОбъект, "уатМаршрутныйЛист", ДопПараметры);
		СтруктураДокументаДопФакт = Неопределено;
		Если флПлановыеУслуги Тогда
			уатРасчетыПоТарифам_уэ.РассчитатьУслугиПоМаршрутномуЛисту(СтруктураДокумента, "Расходы", СтруктураДокумента.Контрагент,, Истина); //пересчет плана
		КонецЕсли;
		Если НЕ флПлановыеУслуги ИЛИ НЕ Ссылка.Пустая() Тогда
			Если флПлановыеУслуги Тогда //нужно пересчитать и план, и факт. Здесь есть сложность: факт затирает план
				ДопПараметры = Новый Структура("ЗаполнятьТЧДоходы, ЗаполнятьТЧРасходы", Ложь, Ложь);
				СтруктураДокументаДопФакт = уатОбщегоНазначенияКлиентСервер.СтруктураДокумента(ЭтотОбъект, "уатМаршрутныйЛист", ДопПараметры);
				уатРасчетыПоТарифам_уэ.РассчитатьУслугиПоМаршрутномуЛисту(СтруктураДокументаДопФакт, "Расходы", СтруктураДокумента.Контрагент); //пересчет факта
			Иначе
				уатРасчетыПоТарифам_уэ.РассчитатьУслугиПоМаршрутномуЛисту(СтруктураДокумента, "Расходы", СтруктураДокумента.Контрагент); //пересчет факта
			КонецЕсли;
		КонецЕсли;
		
		// перенос значений из структуры в документ-объект
		Если флРасчетИтогов Тогда
			Если СтруктураДокументаДопФакт = Неопределено Тогда
				уатРасчетыПоТарифамКлиентСервер_уэ.ЗаполнитьДоходыРасходыИзСтруктуры(ЭтотОбъект, СтруктураДокумента, "Расходы", "уатМаршрутныйЛист", Ложь, флСообщение);
			Иначе
				уатРасчетыПоТарифамКлиентСервер_уэ.ЗаполнитьДоходыРасходыИзСтруктуры(ЭтотОбъект, СтруктураДокумента, "Расходы", "уатМаршрутныйЛист", Истина, флСообщение);
				уатРасчетыПоТарифамКлиентСервер_уэ.ЗаполнитьДоходыРасходыИзСтруктуры(ЭтотОбъект, СтруктураДокументаДопФакт, "Расходы", "уатМаршрутныйЛист", Ложь, флСообщение);
			КонецЕсли;
			
			СуммаЗатратНовая = уатОбщегоНазначенияТиповые.уатПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Расходы");
			СуммаЗатрат = СуммаЗатратНовая;
			
			Если флПлановыеУслуги Тогда 
				СуммаЗатратПланНовая = уатОбщегоНазначенияТиповые.уатПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Расходы",,Истина);
				СуммаЗатратПлан = СуммаЗатратПланНовая;
			КонецЕсли;
			
		Иначе
			ЭтотОбъектКопия = ЭтотОбъект.Скопировать();
			ЭтотОбъектКопия.Дата = ЭтотОбъект.Дата;
			ЭтотОбъектКопия.ДатаЗакрытия = ЭтотОбъект.ДатаЗакрытия;
			
			Документы.уатМаршрутныйЛист.РассчитатьВыработкуПоЗаказам(ЭтотОбъектКопия);
			
			СтруктураДокумента = уатОбщегоНазначенияКлиентСервер.СтруктураДокумента(ЭтотОбъектКопия, "уатМаршрутныйЛист", ДопПараметры);
			уатРасчетыПоТарифам_уэ.РассчитатьУслугиПоМаршрутномуЛисту(СтруктураДокумента, "Расходы");
			уатРасчетыПоТарифамКлиентСервер_уэ.ЗаполнитьДоходыРасходыИзСтруктуры(ЭтотОбъектКопия, СтруктураДокумента, "Расходы", "уатМаршрутныйЛист",, флСообщение);
			
			СуммаЗатратНовая = уатОбщегоНазначенияТиповые.уатПолучитьСуммуДокументаСНДС(ЭтотОбъектКопия, "Расходы");
			
			Если флПлановыеУслуги Тогда
				СуммаЗатратПланНовая = уатОбщегоНазначенияТиповые.уатПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Расходы",,Истина);
			КонецЕсли;
			
		КонецЕсли;
		
		Если СуммаЗатратНовая <> СуммаЗатратСтарая Тогда 
			Если НЕ Ссылка.Пустая() И НЕ флИнтерактивно Тогда //неинтерактивный пересчет, например при групповом проведении документов
				Если флРасчетИтогов Тогда
					ТекстНСТР = НСтр("en='Automatically recalculate sum in tabular section ""Expenses"" in """ + Ссылка + """';ru='Выполнен автоматический пересчет суммы в табличной части ""Расходы"" в документе """ + Ссылка + """'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР, ЭтотОбъект);
				Иначе
					ТекстНСТР = НСтр("en='Recalculation of tabular section ""Expenses"" in """ + Ссылка + """ was not done!';ru='Не выполнен пересчет табличной части ""Расходы"" в документе """ + Ссылка + """!'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР, ЭтотОбъект);
				КонецЕсли;
			КонецЕсли;
			флВыполненАвтопересчетУслуг = флВыполненАвтопересчетУслуг + 2;
		КонецЕсли;
	КонецЕсли;
	
	Если флПересчетИтогов Тогда
		Документы.уатМаршрутныйЛист.РасчетЗП(ЭтотОбъект);
		Документы.уатМаршрутныйЛист.РасчетРасходаГСМ(ЭтотОбъект);
	КонецЕсли;
			
	ДополнительныеСвойства.Вставить("ПересчетИтогов", флРасчетИтогов);
	Если флВыполненАвтопересчетУслуг > 0 Тогда
		ДополнительныеСвойства.Вставить("ВыполненАвтопересчетУслуг", флВыполненАвтопересчетУслуг);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьМаксимальныеХарактеристики()
	
	МаксимальныеХарактеристики = Новый Структура("ВесБрутто, Объем, КоличествоМест", 0, 0, 0);
	
	ТекВес     = 0;
	ТекОбъем   = 0;
	ТекКолМест = 0;
	
	Для Каждого ТекСтрока Из Заказы Цикл
		Если ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка
			ИЛИ ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяПогрузка Тогда
			ТекВес     = ТекВес + ТекСтрока.ВесБрутто;
			ТекОбъем   = ТекОбъем + ТекСтрока.Объем;
			ТекКолМест = ТекКолМест + ТекСтрока.КоличествоМест;
			
		ИначеЕсли ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка
			ИЛИ ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяРазгрузка Тогда
			ТекВес     = ТекВес - ТекСтрока.ВесБрутто;
			ТекОбъем   = ТекОбъем - ТекСтрока.Объем;
			ТекКолМест = ТекКолМест - ТекСтрока.КоличествоМест;
		КонецЕсли;
		
		МаксимальныеХарактеристики.ВесБрутто      = Макс(МаксимальныеХарактеристики.ВесБрутто, ТекВес);
		МаксимальныеХарактеристики.Объем          = Макс(МаксимальныеХарактеристики.Объем, ТекОбъем);
		МаксимальныеХарактеристики.КоличествоМест = Макс(МаксимальныеХарактеристики.КоличествоМест, ТекКолМест);
	КонецЦикла;
	
	Возврат МаксимальныеХарактеристики;
	
КонецФункции // ПолучитьМаксимальныеХарактеристики()

Процедура ОбновитьНомерМаршрутногоЛистаВЗаказах(Отказ)
	
	Если Отказ Тогда 
		Возврат;
	КонецЕсли;
	
	СвойствоЗаказа = Константы.уатНомерМаршрутногоЛистаВЗаказеНаТС.Получить();
	Если Не ЗначениеЗаполнено(СвойствоЗаказа) Тогда 
		Возврат;
	КонецЕсли;
	
	мсвЗаказыМЛ = Новый Массив();
	Для Каждого ТекСтрока Из Заказы Цикл 
		Если Не ЗначениеЗаполнено(ТекСтрока.ЗаказГрузоотправителя) Тогда 
			Продолжить;
		КонецЕсли;
		
		Если мсвЗаказыМЛ.Найти(ТекСтрока.ЗаказГрузоотправителя) = Неопределено Тогда 
			мсвЗаказыМЛ.Добавить(ТекСтрока.ЗаказГрузоотправителя);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекЗаказ Из мсвЗаказыМЛ Цикл 
		НаборЗаписей = РегистрыСведений.ДополнительныеСведения.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Объект.Установить(ТекЗаказ);
		НаборЗаписей.Отбор.Свойство.Установить(СвойствоЗаказа);
		Запись = НаборЗаписей.Добавить();
		Запись.Объект   = ТекЗаказ;
		Запись.Свойство = СвойствоЗаказа;
		Запись.Значение = Номер;
		НаборЗаписей.Записать(Истина);
	КонецЦикла;
	
КонецПроцедуры

Процедура ПроверкаСоответствияХарактеристикТСиЗаказов()
	
	Если Не уатОбщегоНазначенияПовтИсп_проф.ИспользоватьХарактеристикиЗаказовНаТС() Тогда 
		Возврат;
	КонецЕсли;
	
	ХарактеристикиТС = ТС.Характеристики.Выгрузить(, "Характеристика").ВыгрузитьКолонку("Характеристика");
	
	тблЗаказы = Заказы.Выгрузить(, "ЗаказГрузоотправителя");
	тблЗаказы.Свернуть("ЗаказГрузоотправителя");
	мсвЗаказы = тблЗаказы.ВыгрузитьКолонку("ЗаказГрузоотправителя");
	
	мсвЗапрещенныеЗаказы = Новый Массив();
	
	Для Каждого ТекЗаказ Из мсвЗаказы Цикл 
		Если Не ЗначениеЗаполнено(ТекЗаказ) Тогда 
			Продолжить;
		КонецЕсли;
		
		флЗаказРазрешен = Истина;
		
		Для Каждого ТекХарактеристика Из ТекЗаказ.Характеристики Цикл 
			Если ХарактеристикиТС.Найти(ТекХарактеристика.Характеристика) = Неопределено Тогда 
				флЗаказРазрешен = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не флЗаказРазрешен Тогда 
			мсвЗапрещенныеЗаказы.Добавить(ТекЗаказ);
		КонецЕсли;
	КонецЦикла;
	
	Если мсвЗапрещенныеЗаказы.Количество() Тогда 
		ТекстОшибки = "";
		Для Каждого ТекЗаказ Из мсвЗапрещенныеЗаказы Цикл 
			ТекстОшибки = ТекстОшибки + ?(ТекстОшибки = "", "", ", ") + """" + Строка(ТекЗаказ) + """";
		КонецЦикла;
		
		ТекстОшибки = НСтр("ru = 'Характеристики указанных заказов не соответствуют характеристикам ТС:'")
			+ " " + ТекстОшибки;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

Процедура СформироватьУведомления()
	
	// Отслеживаем событие "Изменение перевозчика"
	флИзменениеПеревозчика = (Ссылка.Пустая() И ПринадлежностьПеревозки = Перечисления.уатПринадлежностьТС.Привлеченное)
	Или Ссылка.Контрагент <> Контрагент;
	ДополнительныеСвойства.Вставить("флИзменениеПеревозчика", флИзменениеПеревозчика);
	
	// Отслеживаем событие "Изменение ТС"
	флИзменениеТС = Ссылка.Пустая() Или Ссылка.ТС <> ТС;
	ДополнительныеСвойства.Вставить("флИзменениеТС", флИзменениеТС);
	
	// Отслеживаем событие "Изменение водителя"
	флИзменениеВодителя = Ссылка.Пустая() Или Ссылка.Водитель1 <> Водитель1;
	ДополнительныеСвойства.Вставить("флИзменениеВодителя", флИзменениеВодителя);
	
	// Отслеживаем события изменения планового/фактического времени прибытия/убытия в пункт
	мсвСтрокиПрибытиеФакт = Новый Массив;
	мсвСтрокиУбытиеФакт = Новый Массив;
	мсвСтрокиПрибытиеПлан = Новый Массив;
	мсвСтрокиУбытиеПлан = Новый Массив;
	УчетПланФакта = Константы.уатУчетПланФактаПоМаршрутуВМаршрутныхЛистах.Получить();
	
	// Сначала проверяем, что есть правила, обрабатывающие эти события
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	уатПравилаФормированияУведомлений_уэ.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.уатПравилаФормированияУведомлений_уэ КАК уатПравилаФормированияУведомлений_уэ
	|ГДЕ
	|	уатПравилаФормированияУведомлений_уэ.ТипСобытия = &ПрибытиеВПунктФактИзменено
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	уатПравилаФормированияУведомлений_уэ.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.уатПравилаФормированияУведомлений_уэ КАК уатПравилаФормированияУведомлений_уэ
	|ГДЕ
	|	уатПравилаФормированияУведомлений_уэ.ТипСобытия = &УбытиеИзПунктаФактИзменено
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	уатПравилаФормированияУведомлений_уэ.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.уатПравилаФормированияУведомлений_уэ КАК уатПравилаФормированияУведомлений_уэ
	|ГДЕ
	|	уатПравилаФормированияУведомлений_уэ.ТипСобытия = &ПрибытиеВПунктПланИзменено
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	уатПравилаФормированияУведомлений_уэ.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.уатПравилаФормированияУведомлений_уэ КАК уатПравилаФормированияУведомлений_уэ
	|ГДЕ
	|	уатПравилаФормированияУведомлений_уэ.ТипСобытия = &УбытиеИзПунктаПланИзменено");
	Запрос.УстановитьПараметр("ПрибытиеВПунктФактИзменено", Перечисления.уатТипыСобытийДляУведомления_уэ.ПрибытиеВПунктФактИзменено);
	Запрос.УстановитьПараметр("УбытиеИзПунктаФактИзменено", Перечисления.уатТипыСобытийДляУведомления_уэ.УбытиеИзПунктаФактИзменено);
	Запрос.УстановитьПараметр("ПрибытиеВПунктПланИзменено", Перечисления.уатТипыСобытийДляУведомления_уэ.ПрибытиеВПунктПланИзменено);
	Запрос.УстановитьПараметр("УбытиеИзПунктаПланИзменено", Перечисления.уатТипыСобытийДляУведомления_уэ.УбытиеИзПунктаПланИзменено);
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	флОтслеживаетсяПрибытиеФакт = УчетПланФакта И Не РезультатЗапроса[0].Пустой();
	флОтслеживаетсяУбытиеФакт = УчетПланФакта И Не РезультатЗапроса[1].Пустой();
	флОтслеживаетсяПрибытиеПлан = Не РезультатЗапроса[2].Пустой();
	флОтслеживаетсяУбытиеПлан = Не РезультатЗапроса[3].Пустой();
	Если флОтслеживаетсяПрибытиеФакт Или флОтслеживаетсяУбытиеФакт Или флОтслеживаетсяПрибытиеПлан Или флОтслеживаетсяУбытиеПлан Тогда
		тблЗаказы = Заказы.Выгрузить();
		
		// Удаляем из таблицы строки, отвечающие одинаковым заказам и пунктам 
		// (для таких строк будут формироваться одинаковые уведомления)
		Индекс = тблЗаказы.Количество()-1;
		ПредПункт = Неопределено;
		ПредЗаказ = Неопределено;
		ПредТипТочкиМаршрута = Неопределено;
		Пока Индекс >= 0 Цикл
			ТекСтрока = тблЗаказы[Индекс];
			Если ПредПункт = ТекСтрока.Пункт 
				И ПредЗаказ = ТекСтрока.ЗаказГрузоотправителя 
				И ПредТипТочкиМаршрута = ТекСтрока.ТипТочкиМаршрута Тогда
				тблЗаказы.Удалить(ТекСтрока);
			Иначе
				ПредПункт = ТекСтрока.Пункт;
				ПредЗаказ = ТекСтрока.ЗаказГрузоотправителя;
				ПредТипТочкиМаршрута = ТекСтрока.ТипТочкиМаршрута;
			КонецЕсли;
			Индекс = Индекс - 1;
		КонецЦикла;
		
		Если ЭтоНовый() Или Не Проведен Тогда
			Для Каждого ТекСтрока Из тблЗаказы Цикл
				Если флОтслеживаетсяПрибытиеФакт И ТекСтрока.ПрибытиеФакт > '00010101235959' Тогда
					мсвСтрокиПрибытиеФакт.Добавить(ТекСтрока);
				КонецЕсли;
				Если флОтслеживаетсяПрибытиеПлан И ТекСтрока.ПрибытиеПлан > '00010101235959' Тогда
					мсвСтрокиПрибытиеПлан.Добавить(ТекСтрока);
				КонецЕсли;
				Если флОтслеживаетсяУбытиеФакт И ТекСтрока.УбытиеФакт > '00010101235959' Тогда
					мсвСтрокиУбытиеФакт.Добавить(ТекСтрока);
				КонецЕсли;
				Если флОтслеживаетсяУбытиеПлан И ТекСтрока.УбытиеПлан > '00010101235959' Тогда
					мсвСтрокиУбытиеПлан.Добавить(ТекСтрока);
				КонецЕсли;
			КонецЦикла;
		Иначе
			Запрос = Новый Запрос(
			"ВЫБРАТЬ
			|	уатМаршрутныйЛистЗаказы.GUIDСтроки КАК GUIDСтроки,
			|	уатМаршрутныйЛистЗаказы.НомерСтроки КАК НомерСтроки,
			|	уатМаршрутныйЛистЗаказы.ПрибытиеПлан КАК ПрибытиеПлан,
			|	уатМаршрутныйЛистЗаказы.ПрибытиеФакт КАК ПрибытиеФакт,
			|	уатМаршрутныйЛистЗаказы.УбытиеПлан КАК УбытиеПлан,
			|	уатМаршрутныйЛистЗаказы.УбытиеФакт КАК УбытиеФакт,
			|	уатМаршрутныйЛистЗаказы.Стоянка КАК Стоянка,
			|	уатМаршрутныйЛистЗаказы.СтоянкаИзПункта КАК СтоянкаИзПункта,
			|	уатМаршрутныйЛистЗаказы.Пункт КАК Пункт,
			|	уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя
			|ИЗ
			|	Документ.уатМаршрутныйЛист.Заказы КАК уатМаршрутныйЛистЗаказы
			|ГДЕ
			|	уатМаршрутныйЛистЗаказы.Ссылка = &Ссылка
			|
			|УПОРЯДОЧИТЬ ПО
			|	НомерСтроки");
			Запрос.УстановитьПараметр("Ссылка", Ссылка);
			ЗаказыСтарые = Запрос.Выполнить().Выгрузить();
			
			Для Каждого ТекСтрока Из тблЗаказы Цикл
				НайденнаяСтрока = ЗаказыСтарые.Найти(ТекСтрока.GUIDСтроки, "GUIDСтроки");
				Если флОтслеживаетсяПрибытиеФакт
					И ТекСтрока.ПрибытиеФакт > '00010101235959'
					И (НайденнаяСтрока = Неопределено Или НайденнаяСтрока.ПрибытиеФакт <> ТекСтрока.ПрибытиеФакт) Тогда
					мсвСтрокиПрибытиеФакт.Добавить(ТекСтрока);
				КонецЕсли;
				Если флОтслеживаетсяПрибытиеПлан
					И ТекСтрока.ПрибытиеПлан > '00010101235959'
					И (НайденнаяСтрока = Неопределено Или НайденнаяСтрока.ПрибытиеПлан <> ТекСтрока.ПрибытиеПлан) Тогда
					мсвСтрокиПрибытиеПлан.Добавить(ТекСтрока);
				КонецЕсли;
				Если флОтслеживаетсяУбытиеФакт
					И ТекСтрока.УбытиеФакт > '00010101235959' 
					И (НайденнаяСтрока = Неопределено Или НайденнаяСтрока.УбытиеФакт <> ТекСтрока.УбытиеФакт) Тогда
					мсвСтрокиУбытиеФакт.Добавить(ТекСтрока);
				КонецЕсли;
				Если флОтслеживаетсяУбытиеПлан
					И ТекСтрока.УбытиеПлан > '00010101235959'
					И (НайденнаяСтрока = Неопределено Или НайденнаяСтрока.УбытиеПлан <> ТекСтрока.УбытиеПлан) Тогда
					мсвСтрокиУбытиеПлан.Добавить(ТекСтрока);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ДополнительныеСвойства.Вставить("мсвСтрокиПрибытиеФакт", мсвСтрокиПрибытиеФакт);
		ДополнительныеСвойства.Вставить("мсвСтрокиПрибытиеПлан", мсвСтрокиПрибытиеПлан);
		ДополнительныеСвойства.Вставить("мсвСтрокиУбытиеФакт",   мсвСтрокиУбытиеФакт);
		ДополнительныеСвойства.Вставить("мсвСтрокиУбытиеПлан",   мсвСтрокиУбытиеПлан);
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ЗаполнитьДопВыработкуПриСоздании()
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 5
	|	уатПараметрыВыработки.Ссылка
	|ИЗ
	|	Справочник.уатПараметрыВыработки КАК уатПараметрыВыработки
	|ГДЕ
	|	уатПараметрыВыработки.ИспользоватьВДопВыработкеМЛ
	|	И НЕ уатПараметрыВыработки.ПометкаУдаления
	|	И уатПараметрыВыработки.СпособВводаЗначений = ЗНАЧЕНИЕ(Перечисление.уатСпособыВводаЗначенийВыработкивМЛ_уэ.ВТабличнойЧасти)");
	мсвПараметрыДопВыработка = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Для Каждого ТекСтрока Из Заказы Цикл
		Если ЗначениеЗаполнено(ТекСтрока.ПараметрВыработки1) ИЛИ ЗначениеЗаполнено(ТекСтрока.ПараметрВыработки2)
			ИЛИ ЗначениеЗаполнено(ТекСтрока.ПараметрВыработки3) ИЛИ ЗначениеЗаполнено(ТекСтрока.ПараметрВыработки4)
			ИЛИ ЗначениеЗаполнено(ТекСтрока.ПараметрВыработки5) Тогда
			Продолжить;
		КонецЕсли;
		Сч = 0;
		Для Каждого ТекПараметрВыработки Из мсвПараметрыДопВыработка Цикл
			Сч = Сч + 1;
			ТекСтрока["ПараметрВыработки" + Сч] = ТекПараметрВыработки;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

Процедура ПроверитьЧтоНетДублейУникальныхГМ(Отказ)
	
	МассивГрузов = Новый Массив();
	НомерСтроки  = 1;
	
	Для Каждого ТекСтрока Из Заказы Цикл
		Если НЕ ЗначениеЗаполнено(ТекСтрока.Номенклатура)
			ИЛИ ТипЗнч(ТекСтрока.Номенклатура) = Тип("СправочникСсылка.Номенклатура")
			ИЛИ НЕ ТекСтрока.Номенклатура.УникальноеГрузовоеМесто Тогда
			Продолжить;
		КонецЕсли;
		Если (ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка
			ИЛИ ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяПогрузка)
			И МассивГрузов.Найти(ТекСтрока.Номенклатура) <> Неопределено Тогда
			ТекстНСТР = НСтр("ru='В табличной части ""Маршрут"" не должно быть строк с повторяющимся уникальным грузовым местом!'");
			уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, Отказ);
			Прервать;
		ИначеЕсли ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка
			ИЛИ ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяПогрузка Тогда
			МассивГрузов.Добавить(ТекСтрока.Номенклатура);
		ИначеЕсли ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка
			ИЛИ ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяРазгрузка Тогда
			ТекГрузовоеМесто = МассивГрузов.Найти(ТекСтрока.Номенклатура);
			Если ТекГрузовоеМесто <> Неопределено Тогда
				МассивГрузов.Удалить(ТекГрузовоеМесто);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОчиститьФактическуюВыработку()
	Сч = ВыработкаТСиСотрудников.Количество()-1;
	Пока Сч >= 0 Цикл
		Если НЕ ВыработкаТСиСотрудников[Сч].РучнойВвод Тогда
			Если ВыработкаТСиСотрудников[Сч].КоличествоПлан = 0 Тогда
				ВыработкаТСиСотрудников.Удалить(Сч);
			Иначе
				ВыработкаТСиСотрудников[Сч].КоличествоФакт = 0;
			КонецЕсли;
		КонецЕсли;
		Сч = Сч - 1;
	КонецЦикла;
	
	Сч = Доходы.Количество()-1;
	Пока Сч >= 0 Цикл
		Если НЕ Доходы[Сч].РучнойВвод Тогда
			Доходы.Удалить(Сч);
		КонецЕсли;
		Сч = Сч - 1;
	КонецЦикла;
	
	Сч = Расходы.Количество()-1;
	Пока Сч >= 0 Цикл
		Если НЕ Расходы[Сч].РучнойВвод Тогда
			Если Расходы[Сч].КоличествоПлан = 0 Тогда
				Расходы.Удалить(Сч);
			Иначе
				Расходы[Сч].Цена = 0;
				Расходы[Сч].Количество = 0;
				Расходы[Сч].Сумма = 0;
				Расходы[Сч].СуммаНДС = 0;
			КонецЕсли;
		КонецЕсли;
		Сч = Сч - 1;
	КонецЦикла;
	
	Сч = Зарплата.Количество()-1;
	Пока Сч >= 0 Цикл
		Если НЕ Зарплата[Сч].РучнойВвод Тогда
			Зарплата.Удалить(Сч);
		КонецЕсли;
		Сч = Сч - 1;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти


#Область ИсполняемаяЧастьМодуля

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

табВыбраннаяНоменклатура = Новый ТаблицаЗначений();
табВыбраннаяНоменклатура.Колонки.Добавить("Заказчик",              Новый ОписаниеТипов("СправочникСсылка.Контрагенты, СправочникСсылка.ПодразделенияОрганизаций"));
табВыбраннаяНоменклатура.Колонки.Добавить("ЗаказГрузоотправителя", Новый ОписаниеТипов("ДокументСсылка.уатЗаказГрузоотправителя"));
табВыбраннаяНоменклатура.Колонки.Добавить("Номенклатура",          Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
табВыбраннаяНоменклатура.Колонки.Добавить("ЕдиницаИзмерения",      Новый ОписаниеТипов("СправочникСсылка.ЕдиницыИзмерения"));
табВыбраннаяНоменклатура.Колонки.Добавить("Количество",            Новый ОписаниеТипов("Число",,, Новый КвалификаторыЧисла(15,3,ДопустимыйЗнак.Неотрицательный)));
табВыбраннаяНоменклатура.Колонки.Добавить("ДатаВыполнения",	       Новый ОписаниеТипов("Дата", Новый КвалификаторыДаты(ЧастиДаты.Дата)));
табВыбраннаяНоменклатура.Колонки.Добавить("ПараметрВыработки",     Новый ОписаниеТипов("СправочникСсылка.уатПараметрыВыработки"));

#КонецОбласти

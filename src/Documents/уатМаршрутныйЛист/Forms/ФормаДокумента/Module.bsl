
#Область ОписаниеПеременных

&НаКлиенте
Перем мБуфСтрока; // Буферная переменная для хранения кэша некоторых параметров изменяемой строки. Используется для поиска смежной строки после изменения основной.
&НаКлиенте
Перем ТекВремяСтроки;
&НаКлиенте
Перем ФормаДлительнойОперации;
&НаКлиенте
Перем ПараметрыОбработчикаОжидания;
&НаКлиенте
Перем ОповещениеПослеДлительнойОперации;
&НаКлиенте
Перем IDзадачиВнешнийМаршрутизатор;
&НаКлиенте
Перем ДанныеСтрокиУслуги; // Хранит данные строки ТЧ Доходы/Расходы перед началом редактирования.
&НаКлиенте
Перем УдаленнаяСтрокаВыработкиСводно; // Хранит данные строки ТЧ ВыработкаСводно при удалении строки.
&НаКлиенте
Перем ФормаКарты;

#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	флКонтрагентЗаполнен = ЗначениеЗаполнено(Объект.Контрагент);
	
	уатЗащищенныеФункцииСервер.уатДокументФормаЭлементаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, Объект, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	Если Не ПравоДоступа("Редактирование", Метаданные.Документы.уатМаршрутныйЛист) Тогда 
		Элементы.ГруппаОсновное.ТолькоПросмотр                  = Истина;
		Элементы.Заказы.ТолькоПросмотр                          = Истина;
		Элементы.Заказы1.ТолькоПросмотр                         = Истина;
		Элементы.ЗаказыДерево.ТолькоПросмотр                    = Истина;
		Элементы.ЗаказыДеревоИзменение.Доступность              = Ложь;
		Элементы.ЗаказыДеревоГруппаОтметить.Доступность         = Ложь;
		Элементы.ЗаказыДеревоГруппаЗаполнить.Доступность        = Ложь;
		Элементы.ЗаказыИзменение.Доступность                    = Ложь;
		Элементы.ЗаказыГруппаОтметить.Доступность               = Ложь;
		Элементы.ЗаказыГруппаЗаполнить.Доступность              = Ложь;
		Элементы.ЗаказыЗаполнитьФактПосещение.Доступность       = Ложь;
		Элементы.Заказы1Изменение.Доступность                   = Ложь;
		Элементы.Заказы1ГруппаОтметить.Доступность              = Ложь;
		Элементы.ЗаказыГруппаЗаполнение1.Доступность            = Ложь;
		Элементы.ЗаказыДеревоЗаполнитьФактПосещение.Доступность = Ложь;
		Элементы.ЗаказыЗаполнитьФактПосещение.Доступность       = Ложь;
		
		Элементы.ЗаказыДеревоОткрытьРедакторЦепочкиДокументов.Доступность                = Ложь;
		Элементы.ЗаказыДеревоКонтекстноеМенюОткрытьРедакторЦепочкиДокументов.Доступность = Ложь;
		Элементы.ЗаказыОткрытьРедакторЦепочкиДокументов.Доступность                      = Ложь;
		Элементы.ЗаказыКонтекстноеМенюОткрытьРедакторЦепочкиДокументов.Доступность       = Ложь;
	КонецЕсли;
	
	ВариантПоставкиКОРП = уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП();
	ИспользоватьОбменЭД = ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭД");
	Элементы.ГруппаСобытия.Видимость               = ВариантПоставкиКОРП;
	Элементы.ФормаОформлениеДокументов.Доступность = ВариантПоставкиКОРП И ПравоДоступа("Просмотр", Метаданные.ОбщиеФормы.уатФормаОформленияДокументов_уэ);
	Элементы.ФормаПоказатьМетрики.Видимость        = ВариантПоставкиКОРП;
	ИспользоватьОпоздания = ПолучитьФункциональнуюОпцию("уатПрогнозированиеОпозданийПоМаршрутнымЛистам");
	Элементы.ФормироватьУведомленияОбОпозданияхВРейсе.Видимость = ИспользоватьОпоздания
		И ПолучитьФункциональнуюОпцию("уатИспользоватьУведомления_уэ");
		
	Если ПолучитьФункциональнуюОпцию("уатРазделятьПланФактВСкладскихАктах_уэ") = Ложь Тогда
		Элементы.ЕстьРасхождения.Видимость = Ложь;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.Взаимодействия
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Взаимодействия") Тогда
		МодульВзаимодействия = ОбщегоНазначения.ОбщийМодуль("Взаимодействия");
		МодульВзаимодействия.ПодготовитьОповещения(ЭтотОбъект, Параметры, Ложь);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Взаимодействия

	Если ЗначениеЗаполнено(Параметры.Основание) И ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") Тогда 
		Если Параметры.Основание.Мультимодальный И (Не Параметры.Основание.ЭтоЭтап 
				Или Не ЗначениеЗаполнено(Параметры.Основание.РодительскийЗаказ)) Тогда 
			ТекстОшибки = НСтр("en='Routing list can be entered only on the basis of the stage of multimodal order';ru='Маршрутный лист может быть введен только на основании этапа мультимодального заказа'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			СтандартнаяОбработка = Ложь;
			Отказ = Истина;
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураОбъектовНастроек = Новый Структура();
	СтруктураОбъектовНастроек.Вставить("Организация",   Объект.Организация);
	СтруктураОбъектовНастроек.Вставить("Подразделение", Объект.Подразделение);
	СтруктураОбъектовНастроек.Вставить("Пользователь",  ПользователиКлиентСервер.АвторизованныйПользователь());
	
	Если Параметры.Ключ.Пустая() Тогда
		Если НЕ ЗначениеЗаполнено(Объект.ПринадлежностьПеревозки) Тогда 
			Объект.ПринадлежностьПеревозки = Перечисления.уатПринадлежностьТС.Собственное;
		КонецЕсли;
	
	    Если НЕ флКонтрагентЗаполнен Тогда
			Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Организации");
			Объект.Контрагент = Объект.Организация;
		КонецЕсли;
		Если Объект.ПринадлежностьПеревозки <> Перечисления.уатПринадлежностьТС.Привлеченное
			И ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
			Объект.ДоговорКонтрагента = Неопределено;
		КонецЕсли;
		Если Объект.ВидПеревозки.Пустая() Тогда
			Объект.ВидПеревозки = ПолучитьПраваИНастройкиПользователя(
				СтруктураОбъектовНастроек, 
				ПланыВидовХарактеристик.уатПраваИНастройки.ОсновнойВидПеревозок);
		КонецЕсли;
		Объект.ШаблонНастроек = Константы.уатОсновнойШаблонМаршрутизации.Получить();
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.ПринятВодителем) Тогда
		Объект.ПринятВодителем = Перечисления.уатСтатусыПринятияМЛВодителем.НеУстановлено;
	КонецЕсли;

	ДокументОснование = Параметры.Основание;
	
	// Установка реквизитов формы.
	флМноговалютныйУчет = ПолучитьФункциональнуюОпцию("уатМноговалютныйУчет");
	мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Отправлен = (Объект.ДатаИВремяОтправления <> '00010101');
	
	уатОбщегоНазначенияСервер.НастроитьПолеЕдиницыИзмерения(ЭтотОбъект, "Заказы");
	уатОбщегоНазначенияСервер.НастроитьПолеЕдиницыИзмерения(ЭтотОбъект, "ЗаказыДерево", "ПунктЗаказНоменклатура");
	уатОбщегоНазначенияСервер.НастроитьПолеЕдиницыИзмерения(ЭтотОбъект, "Заказы1");
	
	УстановитьРежимРаботыСПрисоединеннымиФайлами();
		
	УстановитьЗапретРедактированияЗакрытогоДокумента();
	УстановитьУсловноеОформлениеПолейСтатусов();
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЭлектронныеПеревозочныеДокументы, "Рейс", Объект.Ссылка);
	УстановитьОтборСопроводительныхДокументов();
	УстановитьОтборСобытий();
	ВывестиСтатусЗавершенияОбработкиСопроводительныхДокументов();
	ВывестиДатуПлатежаПеревозчику();
	
	ОбновитьПараметрВыработкиВременныйОказ();
	ОбновитьПараметрВыработкиВременныйПолуч();
	
	уатОбщегоНазначенияСервер.НастроитьПолеПодразделение(Элементы.Подразделение, "Объект.Организация");
	
	УстановитьВидимостьКомандПоGPS();
	
	ЗаголовокРеквизитаКоличествоМест = Справочники.уатВидыУпаковки_уэ.ПолучитьОсновнойВидУпаковки().КраткоеНаименование;
	Элементы.ЗаказыДеревоКоличествоМест.Заголовок = ЗаголовокРеквизитаКоличествоМест;
	Элементы.ЗаказыКоличествоМест.Заголовок       = ЗаголовокРеквизитаКоличествоМест;
	Элементы.Заказы1КоличествоМест.Заголовок      = ЗаголовокРеквизитаКоличествоМест;
	
	ПредставлениеЕдиницыИзмеренияВеса = уатОбщегоНазначенияПовтИсп.ПолучитьПредставлениеОсновнойЕдиницыИзмеренияВеса();
	Если ЗначениеЗаполнено(ПредставлениеЕдиницыИзмеренияВеса) Тогда
		Элементы.ЗаказыДеревоВесБрутто.Заголовок  = НСтр("en='Weight';ru='Вес'") + ", " + ПредставлениеЕдиницыИзмеренияВеса;
		Элементы.ЗаказыВесБрутто.Заголовок        = НСтр("en='Weight';ru='Вес'") + ", " + ПредставлениеЕдиницыИзмеренияВеса;
		Элементы.Заказы1ВесБрутто.Заголовок       = НСтр("en='Weight';ru='Вес'") + ", " + ПредставлениеЕдиницыИзмеренияВеса;
	КонецЕсли;
	
	ПредставлениеЕдиницыИзмеренияОбъема = уатОбщегоНазначенияПовтИсп.ПолучитьПредставлениеОсновнойЕдиницыИзмеренияОбъема();
	Если ЗначениеЗаполнено(ПредставлениеЕдиницыИзмеренияОбъема) Тогда
		Элементы.ЗаказыДеревоОбъем.Заголовок  = НСтр("en='Volume';ru='Объем'") + ", "+ ПредставлениеЕдиницыИзмеренияОбъема;
		Элементы.ЗаказыОбъем.Заголовок        = НСтр("en='Volume';ru='Объем'") + ", "+ ПредставлениеЕдиницыИзмеренияОбъема;
		Элементы.Заказы1Объем.Заголовок       = НСтр("en='Volume';ru='Объем'") + ", "+ ПредставлениеЕдиницыИзмеренияОбъема;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДатаЗакрытия) Тогда
		Элементы.ФормаЗакрытие.Заголовок = Нстр("en = 'Cancel closing'; ru = 'Отмена закрытия'");
	Иначе
		Элементы.ФормаЗакрытие.Заголовок = Нстр("en = 'Closing'; ru = 'Закрытие'");
	КонецЕсли;
	
	ВосстановитьНастройкиФормы();
	
	ДатаПредОтправления = Неопределено;
	ДатаПредПрибытия    = Неопределено;
	
	Если ЗначениеЗаполнено(ДокументОснование) И ЕстьПредварительныеДатыЭтапа(ДокументОснование, ДатаПредОтправления, ДатаПредПрибытия) Тогда 
		ЗаполнитьДатыПредварительными(ДатаПредОтправления, ДатаПредПрибытия);
	КонецЕсли;
	
	флИспользоватьПлановыеУслуги = ПолучитьФункциональнуюОпцию("уатИспользоватьПлановыеУслуги_уэ");
	флПланФакт   = Константы.уатУчетПланФактаПоМаршрутуВМаршрутныхЛистах.Получить();
	флРасчетТары = Константы.уатИспользоватьРасчетТары_уэ.Получить();
	
	флИспользоватьЗакреплениеМЛЗаПеревозчиками = ПолучитьФункциональнуюОпцию("уатИспользоватьЗакреплениеМаршрутныхЛистовЗаПеревозчиками_уэ");
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя")
		И РежимОтображенияДерево Тогда 
		
		ОбновитьДеревоЗаказовНаСервере();
		Элементы.ЗаказыДерево.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВерхнийУровень;
	Иначе 
		ПересчитатьПлановоеВремя();
		ЗаказыУстановитьСодержимоеЯчеек();
	КонецЕсли;
	
	ИспользоватьДокументооборот = ПолучитьФункциональнуюОпцию("уатИспользоватьДокументооборот");
	Элементы.ГруппаСтраницаДокументы.Видимость = ИспользоватьДокументооборот;
	
	ОбновитьСписокВыбораЭкипажа();
	ОбновитьПиктограммыПрисоединенныхФайлов();
	ОбновитьТипЗначенияВодителей_уэ();
	ОтобразитьСводнуюВыработку();
	ОтобразитьСводнуюЗП(ЭтотОбъект);
	
	Если ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.уатВзаиморасчетыСКонтрагентами) Тогда
		Элементы.ГруппаДолгКонтрагента.Видимость = Истина;
	Иначе 
		Элементы.ГруппаДолгКонтрагента.Видимость = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Прицеп1) Тогда 
		Элементы.ГруппаПрицеп1.Видимость = Истина;
	Иначе 
		Элементы.ГруппаПрицеп1.Видимость = Ложь;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Прицеп2) Тогда 
		Элементы.ГруппаПрицеп2.Видимость = Истина;
	Иначе 
		Элементы.ГруппаПрицеп2.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ДобавитьПрицеп.Видимость = Не (Элементы.ГруппаПрицеп1.Видимость И Элементы.ГруппаПрицеп2.Видимость);
	
	Если Параметры.Ключ.Пустая() И (ЗначениеЗаполнено(Параметры.Основание)
			Или ЗначениеЗаполнено(Параметры.ЗначенияЗаполнения) Или ЗначениеЗаполнено(Параметры.ЗначениеКопирования)) Тогда 
		РассчитатьПоказателиСервер();
		ОбновитьНадписьИтоги();
	КонецЕсли;
	
	// форматирование расхода ГСМ
	ТочностьОстТоплива = ПолучитьПраваИНастройкиПользователя(Объект.Организация, "ТочностьОстатковТоплива");
	Элементы.НормативныйРасходТоплива.Формат = "ЧЦ=" + (10-3+ТочностьОстТоплива) + "; ЧДЦ=" + ТочностьОстТоплива;
	Элементы.НормативныйРасходТоплива.ФорматРедактирования = Элементы.НормативныйРасходТоплива.Формат;
	
	УстановитьВозможностьРедактированияДоходовРасходов();
	УстановитьВозможностьРедактированияФакта();
	
	флПересчетИтогов = ПолучитьПраваИНастройкиПользователя(
		ПользователиКлиентСервер.АвторизованныйПользователь(),
		"МаршрутныйЛистПерерасчетИтоговПриПроведении");
		
	// уатУправлениеАвтотранспортом.МодификацияКонфигурации
	уатМодификацияКонфигурацииПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	// Конец уатУправлениеАвтотранспортом.МодификацияКонфигурации
	
	уатОбщегоНазначенияСервер.ПереместитьКнопкуКонтакты(Элементы);
	
	Если Не уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП() Тогда 
		Элементы.ЗаказыДеревоОптимальноеПерестроениеЗаказов.Видимость = Ложь;
		Элементы.ЗаказыОптимальноеПерестроениеЗаказов.Видимость       = Ложь;
	КонецЕсли;
	
	//Элементы.ГруппаСтатусДокумента.ТекущаяСтраница = ?(Объект.СозданАвтоматически, Элементы.ГруппаСозданАтоматически,
	//										Элементы.ГруппаДатаИВремяОтправления);
	Элементы.ГруппаСозданАтоматически.Видимость = Объект.СозданАвтоматически;									
											
	// Настройка интерфейса формы для внешнего польователя.
	АвторизованныйКонтрагент = уатЗащищенныеФункцииСервер_проф.АвторизованныйКонтрагент(АвторизованВнешнийПользователь);
	УровеньДоступаКРасходам = уатОбщегоНазначенияСервер.УровеньДоступаКонтрагентаКУслугам(АвторизованныйКонтрагент).РедактированиеРасходов;
	Если АвторизованВнешнийПользователь Тогда
		
		Элементы.Ответственный.Доступность = Ложь;
		Элементы.Организация.Доступность = Ложь;
		
		// Настройка командной панели
		Элементы.КомандыВнутреннегоПользователя.Видимость = Ложь;
		
		Если ЗначениеЗаполнено(АвторизованныйКонтрагент) Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(СтатусыСД, 
				"СопроводительныйДокументВладелецДокумента", АвторизованныйКонтрагент,
				ВидСравненияКомпоновкиДанных.Равно);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// уатУправлениеАвтотранспортом.МодификацияКонфигурации
	уатМодификацияКонфигурацииКлиентПереопределяемый.ПриОткрытии(ЭтотОбъект, Отказ);
	// Конец уатУправлениеАвтотранспортом.МодификацияКонфигурации
	
	уатЗащищенныеФункцииКлиент.уатДокументФормаЭлементаПриОткрытии(Отказ, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды  
	Элементы.ГруппаСостояниеЭДО.Видимость = ИспользоватьОбменЭД;
	Если Элементы.ГруппаСостояниеЭДО.Видимость
		И НЕ Объект.Ссылка.Пустая() Тогда
		КолВоЭПД = ПолучитьКоличествоЭПД(Объект.Ссылка);
	КонецЕсли;
	
	уатОбщегоНазначенияКлиент.ЗаполнитьСписокВыбораНастройкаНДС(Элементы.ОказываемыеУслугиУчитыватьНДСПредставление.СписокВыбора);
	уатОбщегоНазначенияКлиент.ЗаполнитьСписокВыбораНастройкаНДС(Элементы.ПолучаемыеУслугиУчитыватьНДСПредставление.СписокВыбора);
	
	ОтображениеВыработкиСводноПриИзменении(Неопределено);
	ОбновитьПодвалДоходовРасходов();
	ОбновитьДинамическиеПоля();
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя")
		И РежимОтображенияДерево Тогда
		ОбновитьТипыЗначенийСтрокДереваЗаказов();
	Иначе
		ОбновитьТипыЗначенийСтрокЗаказов();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка)Тогда
		ВывестиСообщениеОРазмещенииЗаказа();
	КонецЕсли;
	
	УстановитьВидимостьИДоступностьЭлементовФормы();
	УстановитьВидимостьMultiGo();
		
	ВопросКонвертация_2_2_21();
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.ГруппаЗаказы Тогда 
		ЗаказыУстановитьСодержимоеЯчеек();
	КонецЕсли;
	
	ОбновитьПиктограммыПрисоединенныхФайлов();
	УстановитьЗапретРедактированияЗакрытогоДокумента();
	УстановитьУсловноеОформлениеПолейСтатусов();
	УстановитьОтборСопроводительныхДокументов();
	УстановитьОтборСобытий();
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Доходы Цикл
		СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма
			+ ?(СтрокаТабличнойЧасти.УчитыватьНДС И НЕ СтрокаТабличнойЧасти.СуммаВключаетНДС, СтрокаТабличнойЧасти.СуммаНДС, 0);
	КонецЦикла;
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Расходы Цикл
		СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма
			+ ?(СтрокаТабличнойЧасти.УчитыватьНДС И НЕ СтрокаТабличнойЧасти.СуммаВключаетНДС, СтрокаТабличнойЧасти.СуммаНДС, 0);
	КонецЦикла;
	
	ОбновитьНадписьИтоги();
	ОбновитьДинамическиеПоляСервер();
	
	СтатусыСинхронизацииСWMS = ПолучитьСтатусыСинхронизацииСWMS(Объект.Ссылка);
	СтатусыСинхронизацииСWMS.Свернуть("Статус");
	Если СтатусыСинхронизацииСWMS.Количество() = 0 Тогда
		СтатусСинхронизацииСWMS = НСтр("ru = 'Данные не выгружались'");
		Элементы.СтатусСинхронизацииСWMS.Гиперссылка = Ложь;
	ИначеЕсли СтатусыСинхронизацииСWMS.Количество() = 1 Тогда
		СтатусСинхронизацииСWMS = СтатусыСинхронизацииСWMS[0].Статус;
		Элементы.СтатусСинхронизацииСWMS.Гиперссылка = Истина;
	Иначе
		СтатусСинхронизацииСWMS = НСтр("ru = 'Составной'; en = 'Составной'");
		Элементы.СтатусСинхронизацииСWMS.Гиперссылка = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ПараметрыАвтоматическогоРазмещения = Неопределено;
	ПередЗаписьюСервер(ПараметрыАвтоматическогоРазмещения);
	
	Если ПараметрыАвтоматическогоРазмещения.АвтоРазмещениеВключено Тогда
		Если ПараметрыАвтоматическогоРазмещения.Распределено = 0 Тогда
			// Распределение по секциям не выполнялось раньше, выполняем его сейчас, не задавая вопросов.
			АвтоматическоеРаспределениеСервер();
		ИначеЕсли ПараметрыАвтоматическогоРазмещения.ОбъемВсего > ПараметрыАвтоматическогоРазмещения.Распределено Тогда
			// Распределение по секциям выполнено не полностью, задаем вопрос.
			Если Не флПодтвердитьПерераспределение Тогда 
				флПодтвердитьПерераспределение = Истина;
				Отказ = Истина;
				ПоказатьВопрос(
					Новый ОписаниеОповещения("ПередЗаписьюОтветАвтоРазмещение", ЭтотОбъект, ПараметрыЗаписи),
					НСтр("ru = 'Не все грузы размещены в секциях. Выполнить автоматическое размещение груза в секциях?'"),
					РежимДиалогаВопрос.ДаНетОтмена
				);
			КонецЕсли;
		//Иначе
			// Не выполняем перераспределение, чтобы сохранить установленное пользователем распределение по секциям
			//АвтоматическоеРаспределениеСервер();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюСервер(ПараметрыАвтоматическогоРазмещения)
	
	Если Объект.ВидОперации = Перечисления.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя
		И РежимОтображенияДерево Тогда
		ЗаписатьДеревоЗаказов();
	КонецЕсли;
	ПараметрыАвтоматическогоРазмещения = ПолучитьПараметрыАвтоматическогоРазмещенияВСекциях();
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Интерактивно", Истина);
	Если ПараметрыЗаписи.Свойство("НеПересчитыватьИтоги") Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("НеПересчитыватьИтоги", Истина);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Прицеп1) Или ЗначениеЗаполнено(Объект.Прицеп2) Тогда
		Если (Объект.Прицеп1 = Объект.Прицеп2) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Один и тот же прицеп не может быть выбран в качестве первого и второго!");
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ИспользоватьОбменЭД
		И НЕ Объект.Ссылка.Пустая()
		И уатОбменСГИСЭПД.КлючевыхРеквизитыЭТрНИзменены(ТекущийОбъект) Тогда 
		флВопросИзменениеЭТрН = Истина;
	КонецЕсли;
	
	Если флИзмененоЗакреплениеЗаПеревозчиком
		И НЕ Объект.Ссылка.Пустая() Тогда
		Документы.уатМаршрутныйЛист.ЗакрепитьПеревозчикаЗаМаршрутнымЛистом(Объект.Ссылка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.ГруппаЗаказы Тогда 
		ЗаказыУстановитьСодержимоеЯчеек();
	КонецЕсли;
	
	ОбновитьПиктограммыПрисоединенныхФайлов();
	УстановитьЗапретРедактированияЗакрытогоДокумента();
	
	ОбновитьПараметрВыработкиВременныйОказ();
	ОбновитьПараметрВыработкиВременныйПолуч();
	УстановитьУсловноеОформлениеПолейСтатусов();
	
	УстановитьОтборСопроводительныхДокументов();
	УстановитьОтборСобытий();
	ВывестиСтатусЗавершенияОбработкиСопроводительныхДокументов();
	ВывестиДатуПлатежаПеревозчику();
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Доходы Цикл
		СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма
			+ ?(СтрокаТабличнойЧасти.УчитыватьНДС И НЕ СтрокаТабличнойЧасти.СуммаВключаетНДС, СтрокаТабличнойЧасти.СуммаНДС, 0);
	КонецЦикла;
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Расходы Цикл
		СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма
			+ ?(СтрокаТабличнойЧасти.УчитыватьНДС И НЕ СтрокаТабличнойЧасти.СуммаВключаетНДС, СтрокаТабличнойЧасти.СуммаНДС, 0);
	КонецЦикла;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя")
		И РежимОтображенияДерево Тогда
		ОбновитьДеревоЗаказовНаСервере();
	КонецЕсли;
	
	ОтобразитьСводнуюВыработку();
	ОтобразитьСводнуюЗП(ЭтотОбъект);
	ОбновитьНадписьИтоги();
	ПересчитатьПлановоеВремя();
	
	Если ЗначениеЗаполнено(ДокументОснование) И уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП()
		И ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.уатАктОтгрузки_уэ") 
		И Не ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда 
		ОбновитьПолеМЛВАктеОтгрузки(ДокументОснование, Объект.Ссылка);
	КонецЕсли;
	
	Если ТекущийОбъект.ДополнительныеСвойства.Свойство("ВыполненАвтопересчетУслуг") Тогда
		флПересчетИтогов = ТекущийОбъект.ДополнительныеСвойства.ПересчетИтогов;
		флВыполненАвтопересчетУслугПриЗаписи = ТекущийОбъект.ДополнительныеСвойства.ВыполненАвтопересчетУслуг;
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЭлектронныеПеревозочныеДокументы, "Рейс", Объект.Ссылка);
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если флВопросПереадресовкаТСЭПД
		И ИспользоватьОбменЭД Тогда  
		МассивЭПД = ПолучитьЭПДДляЗаменыТСВодителя(Объект.Ссылка);
		Если МассивЭПД.Количество() = 0 Тогда
			флВопросПереадресовкаТСЭПД = Ложь;
		Иначе
			Режим = РежимДиалогаВопрос.ДаНет;
			ТекстНСТР = НСтр("ru = 'В документе изменилось ТС/Водитель.
			|Открыть ""Электронную транспортную накладную""?'");
			ПоказатьВопрос(Новый ОписаниеОповещения("ВопросПереадресовкаТСЭПДЗавершение", ЭтотОбъект, МассивЭПД), ТекстНСТР, Режим);
		КонецЕсли;
	Иначе
		флВопросПереадресовкаТСЭПД = Ложь;
	КонецЕсли;
	
	Если флВопросИзменениеЭТрН 
		И ИспользоватьОбменЭД Тогда  
		МассивЭПД = ПолучитьЭТрН(Объект.Ссылка);
		Если МассивЭПД.Количество() = 0 Тогда
			флВопросИзменениеЭТрН = Ложь;
		Иначе
			Режим = РежимДиалогаВопрос.ДаНет;
			ТекстПредупреждения = НСтр("ru = 'В документе изменились ключевые ревизиты ЭТрН.
			|Открыть ""Электронную транспортную накладную""?'"); 
			ПоказатьВопрос(Новый ОписаниеОповещения("ВопросИзменениеЭТрН", ЭтотОбъект, МассивЭПД), ТекстПредупреждения, Режим);
		КонецЕсли;
	Иначе
		флВопросИзменениеЭТрН = Ложь;
	КонецЕсли;
	
	флИзмененоЗакреплениеЗаПеревозчиком = Ложь;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя")
		И РежимОтображенияДерево Тогда
		Элементы.ЗаказыДерево.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВерхнийУровень;
	Иначе 
		ЗаказыУстановитьСодержимоеЯчеек();
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя")
		И НЕ РежимОтображенияДерево Тогда 
		ОбновитьТипыЗначенийСтрокЗаказов();
	КонецЕсли;
		
	УстановитьВидимостьИДоступностьЭлементовФормы();

	ОбновитьДинамическиеПоля();
	
	// СтандартныеПодсистемы.Взаимодействия
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Взаимодействия") Тогда
		МодульВзаимодействияКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ВзаимодействияКлиент");
		МодульВзаимодействияКлиент.ВзаимодействиеПредметПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи, "уатЗаказГрузоотправителя");
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Взаимодействия
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Оповестить("Изменен маршрутный лист", Объект.Ссылка, ЭтотОбъект);
	
	Если ЗначениеЗаполнено(ДокументОснование) И уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП()
		И ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.уатАктОтгрузки_уэ")
		И ПараметрыЗаписи.РежимЗаписи <> РежимЗаписиДокумента.ОтменаПроведения Тогда 
		Оповестить("Изменен акт отгрузки", ДокументОснование, ЭтотОбъект);
	КонецЕсли;
	
	Если флВыполненАвтопересчетУслугПриЗаписи <> 0 Тогда
		Если флПересчетИтогов Тогда
			ЗаголовокНСТР = "";
			Если флВыполненАвтопересчетУслугПриЗаписи = 1 Тогда
				ОписаниеНСТР = НСтр("en='Incomes was calculated automaticaly'; ru='Выполнен автоматический пересчет доходов'");
			ИначеЕсли флВыполненАвтопересчетУслугПриЗаписи = 2 Тогда
				ОписаниеНСТР = НСтр("en='Expenses was calculated automaticaly'; ru='Выполнен автоматический пересчет расходов'");
			Иначе
				ОписаниеНСТР = НСтр("en='Incomes and expenses was calculated automaticaly'; ru='Выполнен автоматический пересчет доходов и расходов'");
			КонецЕсли;
			ПоказатьОповещениеПользователя(ЗаголовокНСТР,, ОписаниеНСТР);
		Иначе
			Если флВыполненАвтопересчетУслугПриЗаписи = 1 Тогда
				ОписаниеНСТР = НСтр("en='It is necessary to recalculate of tabular section ""Incomes"" was not done!'; ru='Необходимо выполнить пересчет табличной части ""Доходы""!'");
			ИначеЕсли флВыполненАвтопересчетУслугПриЗаписи = 2 Тогда
				ОписаниеНСТР = НСтр("en='It is necessary to recalculate of tabular section ""Expenses"" was not done!'; ru='Необходимо выполнить пересчет табличной части ""Расходы""!'");
			Иначе
				ОписаниеНСТР = НСтр("en='It is necessary to recalculate of tabular sections ""Incomes"" and ""Expenses"" was not done!'; ru='Необходимо выполнить пересчет табличных частей ""Доходы"" и ""Расходы""!'");
			КонецЕсли;
			ПоказатьПредупреждение(Неопределено, ОписаниеНСТР);
		КонецЕсли;
		флВыполненАвтопересчетУслугПриЗаписи = 0;
	КонецЕсли;
	
	Если ПроверитьНаличиеСвязанныхТТД(Объект.Ссылка) Тогда
		ТекстНСТР = НСтр("ru='Обнаружены документы ТТД, связанные с этим документом." + Символы.ПС
			+ "Для перезаполнения нажмите кнопку ""Заполнить по маршрутному листу и заказу на ТС"" в форме ТТД.';"
			+ "en='Shipping documents linked to this document may require updating.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	мБуфСтрока                        = Неопределено;
	ТекВремяСтроки                    = Неопределено;
	ФормаДлительнойОперации           = Неопределено;
	ПараметрыОбработчикаОжидания      = Неопределено;
	ОповещениеПослеДлительнойОперации = Неопределено;
	
	Если Не ЗавершениеРаботы Тогда 
		СохранитьНастройкиФормы();
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)  
	
	Если ИсточникВыбора.ИмяФормы = "Документ.уатЗаказГрузоотправителя.Форма.ФормаВыбора" Тогда
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя") И РежимОтображенияДерево Тогда 
			ДатаПредОтправления = Неопределено;
			ДатаПредПрибытия    = Неопределено;
			Если ЗаказыДерево.ПолучитьЭлементы().Количество()=0 И ЕстьПредварительныеДатыЭтапа(ВыбранноеЗначение, ДатаПредОтправления, ДатаПредПрибытия) Тогда 
				Оповещение = Новый ОписаниеОповещения("ОбработкаВыбораДеревоОтветНаВопрос", ЭтотОбъект, Новый Структура("ВыбранноеЗначение,ДатаПредОтправления,ДатаПредПрибытия", ВыбранноеЗначение, ДатаПредОтправления, ДатаПредПрибытия));
				ТекстНСТР = НСтр("en='Use preliminary dates and duration of the stage to fill in routing list?';ru='Использовать предварительные даты и продолжительность этапа для заполнения маршрутного листа?'");
				ПоказатьВопрос(Оповещение, ТекстНСТР, РежимДиалогаВопрос.ДаНет);
			Иначе 
				ЗаполнитьДеревоЗаказовПоЗаказуНаТС(ВыбранноеЗначение);  
				ОбновитьМаршрутныеПараметрыДереваЗаказов();
				ОбновитьГрузовыеПараметрыДереваЗаказов();  
				ЗаказыДеревоИзменитьДатыВШапке();
				ОбновитьТипыЗначенийСтрокЗаказов();
				РасстоянияТЧЗаказы(Неопределено);
				ОбновитьДанныеНаПланировщике();
				РассчитатьПоказателиСервер();
				ОбновитьДинамическиеПоля();
				ОбновитьНадписьИтоги();
				Модифицированность = Истина;
			КонецЕсли;
			
		Иначе 
			ДатаПредОтправления = Неопределено;
			ДатаПредПрибытия    = Неопределено;
			Если Объект.Заказы.Количество()=0 И ЕстьПредварительныеДатыЭтапа(ВыбранноеЗначение, ДатаПредОтправления, ДатаПредПрибытия) Тогда 
				Оповещение = Новый ОписаниеОповещения("ОбработкаВыбораСписокОтветНаВопрос", ЭтотОбъект, Новый Структура("ВыбранноеЗначение,ДатаПредОтправления,ДатаПредПрибытия", ВыбранноеЗначение, ДатаПредОтправления, ДатаПредПрибытия));
				ТекстНСТР = НСтр("en='Use preliminary dates and duration of the stage to fill in routing list?';ru='Использовать предварительные даты и продолжительность этапа для заполнения маршрутного листа?'");
				ПоказатьВопрос(Оповещение, ТекстНСТР, РежимДиалогаВопрос.ДаНет);
			Иначе 
				ЗаполнитьЗаказыПоЗаказуНаТСНаСервере(ВыбранноеЗначение);
				Если Объект.Заказы.Количество() <> 0 Тогда
					ДатаОтправленияПоЗаказу = ПолучитьДатуОтправленияПоЗаказу(Объект.Заказы[0].ЗаказГрузоотправителя);
				КонецЕсли;
				
				Если НЕ ДатаОтправленияПоЗаказу = Неопределено 
					И ЗначениеЗАполнено(ДатаОтправленияПоЗаказу) Тогда 
					ДатаВыездаНаМаршрут = ДатаОтправленияПоЗаказу;
				Иначе
					Если Объект.Заказы.Количество() <> 0 
						И ЗначениеЗаполнено(Объект.Заказы[0].ПрибытиеПлан) Тогда
						ДатаВыездаНаМаршрут = Объект.Заказы[0].ПрибытиеПлан;
					Иначе
						ДатаВыездаНаМаршрут = НачалоДня(ТекущаяДата());
					КонецЕсли;
				КонецЕсли;

				ПересчитатьПлановоеВремя(ДатаВыездаНаМаршрут);
				ЗаказыИзменитьДатыВШапке();
				РасстоянияТЧЗаказы(Неопределено);
				ОбновитьДанныеНаПланировщике();
				РассчитатьПоказателиСервер();
				ОбновитьДинамическиеПоля();
				ОбновитьНадписьИтоги();
				Модифицированность = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если ПредДатаИВремяОтправленияПлан <> НачалоДня(Объект.ДатаИВремяОтправленияПлан) Тогда
			Если НЕ (Объект.ВидПеревозки = ПредопределенноеЗначение("Справочник.уатВидыПеревозок.Авиационная") 
				Или Объект.ВидПеревозки = ПредопределенноеЗначение("Справочник.уатВидыПеревозок.Железнодорожная")
				Или Объект.ВидПеревозки = ПредопределенноеЗначение("Справочник.уатВидыПеревозок.Морская")) Тогда
				Если Объект.ПринадлежностьПеревозки = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное") тогда
					// заполняем водителей
					уатОбщегоНазначения.ЗаполнитьЭкипажТС(Объект.ТС, Объект.Организация, Объект.ДатаИВремяОтправленияПлан,
						Объект.Водитель1, Объект.Водитель2, Объект.Сотрудник1, Объект.Сотрудник2,
						Ложь, Объект.ДатаИВремяОтправленияПлан + 24*3600, Истина);
						
					ПредДатаИВремяОтправленияПлан = Объект.ДатаИВремяОтправленияПлан;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.уатШаблоныУслуг_уэ") Тогда
		ЗаполнитьУслугиПоШаблонуСервер(ВыбранноеЗначение);
		ОбновитьВсегоВТЧОказываемыеУслуги();
		ОбновитьВсегоВТЧПолучаемыеУслуги();
		ОбновитьНадписьИтоги();
		РассчитатьСуммуДокумента();
		ВывестиСуммовыеИтогиДокумента();
		ОбновитьПредставлениеНДСвТЧ("Доходы");
		ОбновитьПредставлениеНДСвТЧ("Расходы");
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.уатШаблоныДокументов_уэ") Тогда
		СопроводительныеДокументыЗаполнитьДокументыПоШаблонуЗавершение(ВыбранноеЗначение);	
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ИмяСобытия = "ЗаписьРекламации"
		И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя")
		И ТипЗнч(Параметр) = Тип("ДокументСсылка.уатРекламация_уэ") Тогда
		
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя") И РежимОтображенияДерево Тогда
			Для Каждого ТекСтрокаПункт Из ЗаказыДерево.ПолучитьЭлементы() Цикл
				Для Каждого ТекСтрокаЗаказ Из ТекСтрокаПункт.ПолучитьЭлементы() Цикл
					ТекСтрокаЗаказ.Рекламации = ПолучитьРекламацииДляСтрокиЗаказов(ТекСтрокаЗаказ.ЗаказГрузоотправителя);
				КонецЦикла;
			КонецЦикла;
		Иначе
			Для Каждого ТекСтрока Из Объект.Заказы Цикл 
				ТекСтрока.Рекламации = ПолучитьРекламацииДляСтрокиЗаказов(ТекСтрока.ЗаказГрузоотправителя);
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ИзменениеТС" И ТипЗнч(Параметр) = Тип("ДокументСсылка.уатЗаказПеревозчику_уэ") Тогда
		ЭтаФорма.Прочитать();
	ИначеЕсли ИмяСобытия = "ЭлектронныеКарты_ПодборПунктаВМаршрут" 
		И Параметр.Источник = Объект.Ссылка Тогда
		
		ФормаКарты = Источник;
		
		МассивПунктов        = Новый Массив();
		МассивПунктовСсылок  = Новый Массив();
		
		Индекс   = 0;
		ТекПункт = Неопределено;
		Для Каждого ТекСтрока Из Объект.Заказы Цикл
			Если ТипЗнч(ТекСтрока.Пункт) = Тип("Строка")
				ИЛИ (ТекПункт <> Неопределено
				И ТекСтрока.Пункт = ТекПункт) Тогда
				Индекс = Индекс + 1;
				Продолжить;
			КонецЕсли;
			
			МассивПунктов.Добавить(Новый Структура("Пункт, Расстояние, Индекс",
			ТекСтрока.Пункт, ТекСтрока.Расстояние, Индекс));
			МассивПунктовСсылок.Добавить(ТекСтрока.Пункт);
			Индекс = Индекс + 1;
		КонецЦикла;

		Если Параметр.ТипОтрезкаПути = 1 Тогда
			ИндексНовогоПункта = Индекс;
		Иначе
			ИндексНовогоПункта = ПодборПунктаВМаршрут(Параметр.Пункт, МассивПунктов, МассивПунктовСсылок);
		КонецЕсли;
	
		НовСтрока = Объект.Заказы.Вставить(ИндексНовогоПункта);
		НовСтрока.Пункт            = Параметр.Пункт;
		НовСтрока.ТипТочкиМаршрута = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.ПромежуточныйПункт");
		ТипТС    = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(Объект.ТС, "ТипТС");
		ЭтоГараж = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(НовСтрока.Пункт, "Гараж");
		
		Если НЕ ЗначениеЗаполнено(НовСтрока.ЗаказГрузоотправителя) И НЕ ЭтоГараж Тогда
			НовСтрока.СтоянкаИзПункта = уатЗащищенныеФункцииСервер_уэ.ПолучитьВремяСтоянкиВПункте(НовСтрока.Пункт, ТипТС);
		ИначеЕсли ЗначениеЗаполнено(НовСтрока.ЗаказГрузоотправителя) Тогда
			НовСтрока.СтоянкаИзПункта = уатЗащищенныеФункцииСервер_уэ.ПолучитьВремяСтоянкиВПункте(НовСтрока.Пункт, ТипТС);
		Иначе 
			НовСтрока.СтоянкаИзПункта = 0;
		КонецЕсли;

		ОбновитьДеревоЗаказовНаСервере();
		
		РасстоянияТЧЗаказы(Неопределено);
		ОбновитьПиктограммыПрисоединенныхФайлов();
		
		
		Оповестить("МаршрутныйЛист_ПодборПунктаВМаршрут",
			Новый Структура("Пункт", Параметр.Пункт));
	ИначеЕсли ИмяСобытия = "Запись_ДокументыЭПД" Тогда
		КолВоЭПД = ПолучитьКоличествоЭПД(Объект.Ссылка);
		Элементы.ЭлектронныеПеревозочныеДокументы.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	Если НЕ ВопросПереадресовкаТСЭПД 
		И флВопросПереадресовкаТСЭПД Тогда
		СтандартнаяОбработка		 = Ложь;
		ЗавершениеРаботы			 = Ложь;
		Отказ						 = Истина;
		ВопросПереадресовкаТСЭПД	 = Истина; 
		флВопросПереадресовкаТСЭПД   = Ложь;
	КонецЕсли;
	Если НЕ ВопросИзменениеЭТрН  
		И флВопросИзменениеЭТрН Тогда
		СтандартнаяОбработка		 = Ложь;
		ЗавершениеРаботы			 = Ложь;
		Отказ						 = Истина;
		ВопросИзменениеЭТрН			 = Истина; 
		флВопросИзменениеЭТрН		 = Ложь;
	КонецЕсли;
	Если флВопросЗакрытиеФормы Тогда
		Отказ = Истина;
		Оповещ = Новый ОписаниеОповещения("ПередЗакрытиемВопрос", ЭтотОбъект);
		ПоказатьВопрос(Оповещ, "При проверке корректности заполнения документа возникли предупреждения!
			|Продолжить закрытие формы?", РежимДиалогаВопрос.ОКОтмена);
		Возврат;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

// уатУправлениеАвтотранспортом.МодификацияКонфигурации
&НаКлиенте
Процедура Подключаемый_ПолеФормыНажатие(Элемент, СтандартнаяОбработка)
	
	уатМодификацияКонфигурацииКлиентПереопределяемый.ПолеФормыНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СсылкаMultiGoНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;  
	Оповещение = Новый ОписаниеОповещения("ЗапускПриложения", ЭтотОбъект);
	НачатьЗапускПриложения(Оповещение, Объект.СсылкаMultiGo);
КонецПроцедуры

&НаКлиенте
Процедура ВидПеревозкиПриИзменении(Элемент)
	
	УстановитьВидимостьИДоступностьЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	// форматирование расхода ГСМ
	ТочностьОстТоплива = ПолучитьПраваИНастройкиПользователя(Объект.Организация, "ТочностьОстатковТоплива");
	Элементы.НормативныйРасходТоплива.Формат = "ЧЦ=" + (10-3+ТочностьОстТоплива) + "; ЧДЦ=" + ТочностьОстТоплива;
	Элементы.НормативныйРасходТоплива.ФорматРедактирования = Элементы.НормативныйРасходТоплива.Формат;
	
	УстановитьВидимостьИДоступностьЭлементовФормы();
КонецПроцедуры

&НаКлиенте
Процедура ПринадлежностьПеревозкиПриИзменении(Элемент)
	
	Если Объект.ПринадлежностьПеревозки = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное") Тогда
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Организации");
		Объект.Контрагент                   = Объект.Организация;
		Объект.ДоговорКонтрагента           = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
		Объект.ТС                           = ПредопределенноеЗначение("Справочник.уатТС.ПустаяСсылка");
		Объект.Прицеп1                      = ПредопределенноеЗначение("Справочник.уатТС.ПустаяСсылка");
		Объект.Прицеп2 						= ПредопределенноеЗначение("Справочник.уатТС.ПустаяСсылка");		
	ИначеЕсли Объект.ПринадлежностьПеревозки = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Привлеченное") Тогда
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
		Объект.Контрагент                   = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
		Объект.ТС                           = ПредопределенноеЗначение("Справочник.уатТС.ПустаяСсылка");
		Объект.Прицеп1                      = ПредопределенноеЗначение("Справочник.уатТС.ПустаяСсылка");
		Объект.Прицеп2 						= ПредопределенноеЗначение("Справочник.уатТС.ПустаяСсылка");
		флИзмененоЗакреплениеЗаПеревозчиком = Истина;
	Иначе
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Организации");
		Объект.Контрагент                   = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");
		Объект.ДоговорКонтрагента           = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
		Объект.ТС                           = ПредопределенноеЗначение("Справочник.уатТС.ПустаяСсылка");
		Объект.Прицеп1                      = ПредопределенноеЗначение("Справочник.уатТС.ПустаяСсылка");
		Объект.Прицеп2 						= ПредопределенноеЗначение("Справочник.уатТС.ПустаяСсылка");
	КонецЕсли;
	
	УстановитьВидимостьИДоступностьЭлементовФормы();
	ОбновитьТипЗначенияВодителей_уэ();
	ИнициализацияДанныхАвтомобиляВФорме(); 
	ОбновитьСписокВыбораЭкипажа();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	Если Объект.ПринадлежностьПеревозки = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Привлеченное") Тогда
		ТСпред = Объект.ТС;
		ПриИзмененииКонтрагентаНаСервере();
		Если Объект.ТС <> ТСпред Тогда
			ТСПриИзменении(Элемент);
		КонецЕсли;
		УстановитьВладельцаСопроводительныхДокументов();
	
		// уатУправлениеАвтотранспортом.МодификацияКонфигурации (долг контрагента)
		уатМодификацияКонфигурацииКлиентПереопределяемый.ПолеФормыПриИзменении(ЭтотОбъект, Элементы.ДоговорКонтрагента);
		// Конец уатУправлениеАвтотранспортом.МодификацияКонфигурации
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Объект.ПринадлежностьПеревозки = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Привлеченное") Тогда 
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("РегистрСведений.уатСведенияОКонтрагентах_уэ.Форма.ФормаВыбораПеревозчика",, Элемент,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииКонтрагентаНаСервере()

	ДокументОбъект  = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.уатМаршрутныйЛист"));
	СписокДоговоров = Новый СписокЗначений;
	СписокДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	СтрПараметров   = Новый Структура("СписокДопустимыхВидовДоговоров", СписокДоговоров);
	
	// Выполняем общие действия для всех документов при изменении Контрагента.
	уатОбщегоНазначенияТиповыеСервер.уатПриИзмененииЗначенияКонтрагента(ДокументОбъект, СтрПараметров);
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);

	Если Объект.ТС.ВладелецТС <> Объект.Контрагент Тогда
		Объект.ТС = Неопределено;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТСПриИзменении(Элемент) 
	флВопросПереадресовкаТСЭПД = Истина;
	ЗаполнитьПустогоПеревозчикаПоТС();
	ИнициализацияДанныхАвтомобиляВФорме();
	ОбновитьСписокВыбораЭкипажа();
	ОбновитьВремяСтоянкиПриИзмененииТС();
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя") И РежимОтображенияДерево Тогда 
		ОбновитьМаршрутныеПараметрыДереваЗаказов();
		ОбновитьГрузовыеПараметрыДереваЗаказов();
	Иначе 
		ОбновитьТипыЗначенийСтрокЗаказов();
		ОбновитьГрузовыеПараметрыЗаказов();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтруктураОтбора = Новый Структура();
	
	Если Объект.ПринадлежностьПеревозки = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное") Тогда 
		СтруктураОтбора.Вставить("ПринадлежностьТС", ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное"));
		Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
			СтруктураОтбора.Вставить("Организация", Объект.Контрагент);
		КонецЕсли;
		
	ИначеЕсли Объект.ПринадлежностьПеревозки = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Привлеченное") Тогда 
		СтруктураОтбора.Вставить("ПринадлежностьТС", ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Привлеченное"));
		Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
			СтруктураОтбора.Вставить("ВладелецТС", Объект.Контрагент);
		КонецЕсли;
		
	Иначе 
		СтруктураОтбора.Вставить("ПринадлежностьТС", ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Виртуальное"));
	КонецЕсли;
	
	РазрешенныеВидыТС = Новый Массив();
	РазрешенныеВидыТС.Добавить(ВидМоделиТСПоВидуПеревозки(Объект.ВидПеревозки));
	СтруктураОтбора.Вставить("ВидМоделиТС", РазрешенныеВидыТС);
	
	уатИнтерфейсВводаТС.РеквизитТСНачалоВыбора(Элемент, Объект.ТС, ДанныеВыбора, СтандартнаяОбработка, СтруктураОтбора);
КонецПроцедуры

&НаКлиенте
Процедура ТСАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СтруктураОтбора = Новый Структура();
	
	Если Объект.ПринадлежностьПеревозки = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное") Тогда 
		СтруктураОтбора.Вставить("ПринадлежностьТС", ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное"));
		Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
			СтруктураОтбора.Вставить("Организация", Объект.Контрагент);
		КонецЕсли;
		
	ИначеЕсли Объект.ПринадлежностьПеревозки = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Привлеченное") Тогда 
		СтруктураОтбора.Вставить("ПринадлежностьТС", ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Привлеченное"));
		Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
			СтруктураОтбора.Вставить("ВладелецТС", Объект.Контрагент);
		КонецЕсли;
		
	Иначе 
		СтруктураОтбора.Вставить("ПринадлежностьТС", ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Виртуальное"));
	КонецЕсли;
	
	РазрешенныеВидыТС = Новый Массив();
	РазрешенныеВидыТС.Добавить(ВидМоделиТСПоВидуПеревозки(Объект.ВидПеревозки));
	СтруктураОтбора.Вставить("ВидМоделиТС", РазрешенныеВидыТС);
	
	уатИнтерфейсВводаТС.РеквизитТСАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка, СтруктураОтбора);
КонецПроцедуры

&НаКлиенте
Процедура ТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтруктураОтбора = Новый Структура();
	
	Если Объект.ПринадлежностьПеревозки = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное") Тогда 
		СтруктураОтбора.Вставить("ПринадлежностьТС", ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное"));
		Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
			СтруктураОтбора.Вставить("Организация", Объект.Контрагент);
		КонецЕсли;
		
	ИначеЕсли Объект.ПринадлежностьПеревозки = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Привлеченное") Тогда 
		СтруктураОтбора.Вставить("ПринадлежностьТС", ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Привлеченное"));
		Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
			СтруктураОтбора.Вставить("ВладелецТС", Объект.Контрагент);
		КонецЕсли;
		
	Иначе 
		СтруктураОтбора.Вставить("ПринадлежностьТС", ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Виртуальное"));
	КонецЕсли;
	
	РазрешенныеВидыТС = Новый Массив();
	РазрешенныеВидыТС.Добавить(ВидМоделиТСПоВидуПеревозки(Объект.ВидПеревозки));
	СтруктураОтбора.Вставить("ВидМоделиТС", РазрешенныеВидыТС);
	
	уатИнтерфейсВводаТС.РеквизитТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка, СтруктураОтбора);
КонецПроцедуры

&НаКлиенте
Процедура Водитель1ПриИзменении(Элемент)
	флВопросПереадресовкаТСЭПД = Истина;
	ИнициализацияЗП();
	ОтобразитьСводнуюЗП(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Водитель1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Объект.ПринадлежностьПеревозки = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное") Тогда
		уатЗащищенныеФункцииКлиент.ДиалогВыбораСотрудника(Элемент, Объект.Водитель1, Новый Структура("Организация", Объект.Организация), СтандартнаяОбработка);
	Иначе
		СтандартнаяОбработка = Ложь;
		
		Если Объект.ПринадлежностьПеревозки = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Привлеченное") Тогда
			ПараметрФормы = Новый Структура("РежимВыбора, Отбор", Истина, Новый Структура("Контрагент", Объект.Контрагент));
			ОткрытьФорму("РегистрСведений.уатСотрудникиКонтрагентов.ФормаСписка", ПараметрФормы, Элемент);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Водитель1ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("РегистрСведенийКлючЗаписи.уатСотрудникиКонтрагентов") тогда
		СтандартнаяОбработка = Ложь;
		Объект.Водитель1 = ФизЛицоВодителяКонтрагента(ВыбранноеЗначение);
	КонецЕсли;
	Объект.ПринятВодителем       = ПредопределенноеЗначение("Перечисление.уатСтатусыПринятияМЛВодителем.НеУстановлено");
	Объект.ДатаПринятияВодителем = Дата(1,1,1);
КонецПроцедуры

&НаКлиенте
Процедура Водитель1Открытие(Элемент, СтандартнаяОбработка)
	Если Объект.ПринадлежностьПеревозки = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное") Тогда
		уатЗащищенныеФункцииКлиент.ОткрытьФормуСотрудника(Объект.Водитель1, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Водитель1АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Ожидание = 0 Тогда //выбор из списка
		Возврат;
	КонецЕсли;
	
	Если Объект.ПринадлежностьПеревозки = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное") Тогда
		СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
		уатИнтерфейсВводаСотрудников.СотрудникАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Водитель1ОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	Если Объект.ПринадлежностьПеревозки = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное") Тогда
		СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
		уатИнтерфейсВводаСотрудников.СотрудникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Сотрудник1ПриИзменении(Элемент)
	ИнициализацияЗП();
	ОтобразитьСводнуюЗП(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Сотрудник1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Объект.ПринадлежностьПеревозки = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное") Тогда
		уатЗащищенныеФункцииКлиент.ДиалогВыбораСотрудника(Элемент, Объект.Сотрудник1, Новый Структура("Организация", Объект.Организация), СтандартнаяОбработка);
	Иначе
		СтандартнаяОбработка = Ложь;
		
		Если Объект.ПринадлежностьПеревозки = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Привлеченное") Тогда
			ПараметрФормы = Новый Структура("РежимВыбора, Отбор", Истина, Новый Структура("Контрагент", Объект.Контрагент));
			ОткрытьФорму("РегистрСведений.уатСотрудникиКонтрагентов.ФормаСписка", ПараметрФормы, Элемент);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Сотрудник1ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("РегистрСведенийКлючЗаписи.уатСотрудникиКонтрагентов") тогда
		СтандартнаяОбработка = Ложь;
		Объект.Сотрудник1 = ФизЛицоВодителяКонтрагента(ВыбранноеЗначение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Сотрудник1Открытие(Элемент, СтандартнаяОбработка)
	Если Объект.ПринадлежностьПеревозки = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное") Тогда
		уатЗащищенныеФункцииКлиент.ОткрытьФормуСотрудника(Объект.Сотрудник1, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Сотрудник1АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Ожидание = 0 Тогда //выбор из списка
		Возврат;
	КонецЕсли;
	
	Если Объект.ПринадлежностьПеревозки = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное") Тогда
		СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
		уатИнтерфейсВводаСотрудников.СотрудникАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Сотрудник1ОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	Если Объект.ПринадлежностьПеревозки = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное") Тогда
		СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
		уатИнтерфейсВводаСотрудников.СотрудникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Водитель2ПриИзменении(Элемент)   
	флВопросПереадресовкаТСЭПД = Истина;
	ИнициализацияЗП();
	ОтобразитьСводнуюЗП(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Водитель2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Объект.ПринадлежностьПеревозки = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное") Тогда
		уатЗащищенныеФункцииКлиент.ДиалогВыбораСотрудника(Элемент, Объект.Водитель2, Новый Структура("Организация", Объект.Организация), СтандартнаяОбработка);
		
	Иначе
		СтандартнаяОбработка = Ложь;
		
		Если Объект.ПринадлежностьПеревозки = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Привлеченное") Тогда
			ПараметрФормы = Новый Структура("РежимВыбора, Отбор", Истина, Новый Структура("Контрагент", Объект.Контрагент));
			ОткрытьФорму("РегистрСведений.уатСотрудникиКонтрагентов.ФормаСписка", ПараметрФормы, Элемент);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Водитель2ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("РегистрСведенийКлючЗаписи.уатСотрудникиКонтрагентов") тогда
		СтандартнаяОбработка = Ложь;
		Объект.Водитель2 = ФизЛицоВодителяКонтрагента(ВыбранноеЗначение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Водитель2Открытие(Элемент, СтандартнаяОбработка)
	Если Объект.ПринадлежностьПеревозки = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное") Тогда
		уатЗащищенныеФункцииКлиент.ОткрытьФормуСотрудника(Объект.Водитель2, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Водитель2АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Ожидание = 0 Тогда //выбор из списка
		Возврат;
	КонецЕсли;
	
	Если Объект.ПринадлежностьПеревозки = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное") Тогда
		СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
		уатИнтерфейсВводаСотрудников.СотрудникАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Водитель2ОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	Если Объект.ПринадлежностьПеревозки = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное") Тогда
		СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
		уатИнтерфейсВводаСотрудников.СотрудникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Сотрудник2ПриИзменении(Элемент)
	ИнициализацияЗП();
	ОтобразитьСводнуюЗП(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Сотрудник2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Объект.ПринадлежностьПеревозки = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное") Тогда
		уатЗащищенныеФункцииКлиент.ДиалогВыбораСотрудника(Элемент, Объект.Сотрудник2, Новый Структура("Организация", Объект.Организация), СтандартнаяОбработка);
		
	Иначе
		СтандартнаяОбработка = Ложь;
		
		Если Объект.ПринадлежностьПеревозки = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Привлеченное") Тогда
			ПараметрФормы = Новый Структура("РежимВыбора, Отбор", Истина, Новый Структура("Контрагент", Объект.Контрагент));
			ОткрытьФорму("РегистрСведений.уатСотрудникиКонтрагентов.ФормаСписка", ПараметрФормы, Элемент);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Сотрудник2ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("РегистрСведенийКлючЗаписи.уатСотрудникиКонтрагентов") тогда
		СтандартнаяОбработка = Ложь;
		Объект.Сотрудник2 = ФизЛицоВодителяКонтрагента(ВыбранноеЗначение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Сотрудник2Открытие(Элемент, СтандартнаяОбработка)
	Если Объект.ПринадлежностьПеревозки = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное") Тогда
		уатЗащищенныеФункцииКлиент.ОткрытьФормуСотрудника(Объект.Сотрудник2, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Сотрудник2АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Ожидание = 0 Тогда //выбор из списка
		Возврат;
	КонецЕсли;
	
	Если Объект.ПринадлежностьПеревозки = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное") Тогда
		СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
		уатИнтерфейсВводаСотрудников.СотрудникАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Сотрудник2ОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	Если Объект.ПринадлежностьПеревозки = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное") Тогда
		СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, Объект.Дата);
		уатИнтерфейсВводаСотрудников.СотрудникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НадписьВсегоПоДокументуНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя") И РежимОтображенияДерево Тогда 
		ЗаписатьДеревоЗаказов();
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Расстояние",     Объект.Расстояние);
	ПараметрыФормы.Вставить("ПробегСГрузом",  Объект.ПробегСГрузом);
	ПараметрыФормы.Вставить("ПробегПорожний", Объект.ПробегПорожний);
	ПараметрыФормы.Вставить("ВремяВПути",     Объект.ВремяВПути);
	ПараметрыФормы.Вставить("ВремяСтоянок",   ОбщееВремяСтоянок);
	ПараметрыФормы.Вставить("ВесБрутто",      Объект.ВесБрутто);
	ПараметрыФормы.Вставить("Объем",          Объект.Объем);
	ПараметрыФормы.Вставить("КоличествоМест", Объект.КоличествоМест);
	ПараметрыФормы.Вставить("ВидДокумента",   "уатМаршрутныйЛист");
	ПараметрыФормы.Вставить("Организация",    Объект.Организация);
	
	Если Объект.Проведен И Объект.ДатаЗакрытия <> '00010101' Тогда
		РазрешитьРедактирование = ПолучитьПраваИНастройкиПользователя(
			ПользователиКлиентСервер.АвторизованныйПользователь(), "РазрешитьРедактированиеЗакрытыхДокументов");
		Если Не РазрешитьРедактирование Тогда
			ПараметрыФормы.Вставить("ТолькоПросмотр", Истина);
		КонецЕсли;
	КонецЕсли;
	
	Если флРасчетТары Тогда
		мОбщийВесТары = 0;
		Для Каждого СтрокаМаршрута Из Объект.Заказы Цикл 
			Если Не СтрокаМаршрута.ТипТочкиМаршрута = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Погрузка") Тогда
				Продолжить;
			КонецЕсли;
			
			мОбщийВесТары = мОбщийВесТары + СтрокаМаршрута.ВесТары;
		КонецЦикла;
		ПараметрыФормы.Вставить("ВесТары", мОбщийВесТары);
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("НадписьВсегоПоДокументуНажатиеЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.уатРедактированиеМаршрутныхПоказателей", ПараметрыФормы, ЭтотОбъект,,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьВсегоПоДокументуНажатиеЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Заглушка = Истина;
	
	//Если РезультатЗакрытия = Неопределено Тогда 
	//	Возврат;
	//КонецЕсли;
	//
	//РезультатЗакрытия.Свойство("Расстояние",     Объект.Расстояние);
	//РезультатЗакрытия.Свойство("ПробегСГрузом",  Объект.ПробегСГрузом);
	//РезультатЗакрытия.Свойство("ПробегПорожний", Объект.ПробегПорожний);
	//РезультатЗакрытия.Свойство("ВремяВПути",     Объект.ВремяВПути);
	//РезультатЗакрытия.Свойство("ВремяСтоянок",   ОбщееВремяСтоянок);
	//РезультатЗакрытия.Свойство("ВесБрутто",      Объект.ВесБрутто);
	//РезультатЗакрытия.Свойство("Объем",          Объект.Объем);
	//РезультатЗакрытия.Свойство("КоличествоМест", Объект.КоличествоМест);
	//
	//РассчитатьПоказателиСервер();
	//РассчитатьУслугиПриИзмененииПоказателей();
	//
	//Модифицированность = Истина;
	//ОбновитьНадписьИтоги();
	//ОбновитьДинамическиеПоля();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьВыработкуВДереве(ТекСтрокаРодитель, НомерВыработки)
	Для Каждого ТекСтрока Из ТекСтрокаРодитель.ПолучитьЭлементы() Цикл
		ТекСтрока["Выработка" + НомерВыработки] = 0;
		ОчиститьВыработкуВДереве(ТекСтрока, НомерВыработки)
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	
	флИзмененоЗакреплениеЗаПеревозчиком = Истина;
	
	// уатУправлениеАвтотранспортом.МодификацияКонфигурации
	уатМодификацияКонфигурацииКлиентПереопределяемый.ПолеФормыПриИзменении(ЭтотОбъект, Элементы.ДоговорКонтрагента);
	// Конец уатУправлениеАвтотранспортом.МодификацияКонфигурации
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(Объект.Маршрут) Тогда 
		Если (РежимОтображенияДерево И Не ЗаказыДерево.ПолучитьЭлементы().Количество() = 0)
			Или (Не РежимОтображенияДерево И Не Объект.Заказы.Количество() = 0) Тогда 
			
			ТекстНСТР = НСтр("en='Refill tabular section ""Route"" on route?';ru='Перезаполнить табличную часть ""Маршрут"" по маршруту?'");
			Оповещение = Новый ОписаниеОповещения("МаршрутПриИзмененииОтветНаВопрос", ЭтотОбъект);
			ПоказатьВопрос(Оповещение, ТекстНСТР, РежимДиалогаВопрос.ДаНет);
		Иначе 
			ЗаполнитьТЧМаршрутПоМаршрутуСервер();
			ОбновитьДанныеНаПланировщике();
			ОбновитьДинамическиеПоля();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутПриИзмененииОтветНаВопрос(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;
	
	ЗаполнитьТЧМаршрутПоМаршрутуСервер();
	
	ОбновитьДанныеНаПланировщике();
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя") И РежимОтображенияДерево Тогда 
		ЗаказыДеревоИзменитьДатыВШапке();
	Иначе 
		ПересчитатьПлановоеВремя();
		ЗаказыИзменитьДатыВШапке();
		ОбновитьДинамическиеПоля();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТЧМаршрутПоМаршрутуСервер()
	
	ТипТС = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(Объект.ТС, "ТипТС");
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя") И РежимОтображенияДерево Тогда
		ЗаказыДерево.ПолучитьЭлементы().Очистить();
		
		Если Объект.Маршрут.ПредставлениеМаршрутаОднимПунктом Тогда 
			Для Каждого ТекЭтап Из Объект.Маршрут.Этапы Цикл 
				НовСтрокаДерево = ЗаказыДерево.ПолучитьЭлементы().Добавить();
				НовСтрокаДерево.ПунктЗаказНоменклатура = ТекЭтап.ПунктОтправления;
				НовСтрокаДерево.Время                  = ТекЭтап.ВремяВПути;
				НовСтрокаДерево.Расстояние             = ТекЭтап.Расстояние;
				НовСтрокаДерево.СтоянкаИзПункта        = ПолучитьСтоянкуВПункте(НовСтрокаДерево.ПунктЗаказНоменклатура, ТипТС);
			КонецЦикла;
			
		Иначе
			Для Сч = 0 По Объект.Маршрут.Этапы.Количество()-1 Цикл 
				ТекЭтап = Объект.Маршрут.Этапы[Сч];
				
				Если Сч > 0 И ТекЭтап.ПунктОтправления = Объект.Маршрут.Этапы[Сч-1].ПунктПрибытия Тогда 
					НовСтрокаДерево.Время           = ТекЭтап.ВремяВПути;
					НовСтрокаДерево.Расстояние      = ТекЭтап.Расстояние;
					НовСтрокаДерево.СтоянкаИзПункта = ПолучитьСтоянкуВПункте(НовСтрокаДерево.ПунктЗаказНоменклатура, ТипТС);
				Иначе 
					НовСтрокаДерево = ЗаказыДерево.ПолучитьЭлементы().Добавить();
					НовСтрокаДерево.ПунктЗаказНоменклатура = ТекЭтап.ПунктОтправления;
					НовСтрокаДерево.Время                  = ТекЭтап.ВремяВПути;
					НовСтрокаДерево.Расстояние             = ТекЭтап.Расстояние;
					НовСтрокаДерево.СтоянкаИзПункта        = ПолучитьСтоянкуВПункте(НовСтрокаДерево.ПунктЗаказНоменклатура, ТипТС);
				КонецЕсли;
				
				НовСтрокаДерево = ЗаказыДерево.ПолучитьЭлементы().Добавить();
				НовСтрокаДерево.ПунктЗаказНоменклатура = ТекЭтап.ПунктПрибытия;
				НовСтрокаДерево.СтоянкаИзПункта        = ПолучитьСтоянкуВПункте(НовСтрокаДерево.ПунктЗаказНоменклатура, ТипТС);
			КонецЦикла;
		КонецЕсли;
		
	Иначе
		Объект.Заказы.Очистить();
		
		Если Объект.Маршрут.ПредставлениеМаршрутаОднимПунктом Тогда 
			Для Каждого ТекЭтап Из Объект.Маршрут.Этапы Цикл 
				НовСтрока = Объект.Заказы.Добавить();
				НовСтрока.Пункт            = ТекЭтап.ПунктОтправления;
				Если ЗначениеЗаполнено(ТекЭтап.ТипТочиМаршрута) Тогда
					НовСтрока.ТипТочкиМаршрута = ТекЭтап.ТипТочиМаршрута;
				Иначе
					НовСтрока.ТипТочкиМаршрута = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.ПромежуточныйПункт");
				КонецЕсли;
				НовСтрока.Время            = ТекЭтап.ВремяВПути;
				НовСтрока.Расстояние       = ТекЭтап.Расстояние;
				НовСтрока.СтоянкаИзПункта  = ПолучитьСтоянкуВПункте(НовСтрока.Пункт, ТипТС);
			КонецЦикла;
			
		Иначе
			Для Сч = 0 По Объект.Маршрут.Этапы.Количество()-1 Цикл 
				ТекЭтап = Объект.Маршрут.Этапы[Сч];
				
				НовСтрока = Объект.Заказы.Добавить();
				НовСтрока.Пункт            = ТекЭтап.ПунктОтправления;
				НовСтрока.ТипТочкиМаршрута = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Погрузка");
				НовСтрока.Время      = ТекЭтап.ВремяВПути;
				НовСтрока.Расстояние = ТекЭтап.Расстояние;
				НовСтрока.СтоянкаИзПункта  = ПолучитьСтоянкуВПункте(НовСтрока.Пункт, ТипТС);
				
				НовСтрока = Объект.Заказы.Добавить();
				НовСтрока.Пункт            = ТекЭтап.ПунктПрибытия;
				НовСтрока.ТипТочкиМаршрута = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Разгрузка");
				НовСтрока.СтоянкаИзПункта  = ПолучитьСтоянкуВПункте(НовСтрока.Пункт, ТипТС);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьПиктограммыПрисоединенныхФайлов();
	РассчитатьПоказателиСервер();
	ОбновитьНадписьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура Прицеп1ПриИзменении(Элемент)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя") И РежимОтображенияДерево Тогда 
		ОбновитьГрузовыеПараметрыДереваЗаказов();
	Иначе 
		ОбновитьГрузовыеПараметрыЗаказов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Прицеп1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура("ТекущаяСтрока", Объект.Прицеп1);
	ФормаВыбора = ПолучитьФорму("Справочник.уатТС.ФормаВыбора", ПараметрыФормы, Элемент);
	
	ЭлементОтбора = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("Ссылка");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.НеРавно;
	ЭлементОтбора.ПравоеЗначение   = Объект.Прицеп2;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.Использование    = Истина;
	
	ЭлементОтбора = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("ЭтоГруппа");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение   = Ложь;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.Использование    = Истина;
	
	ЭлементОтбора = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("ПометкаУдаления");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение   = Ложь;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.Использование    = Истина;
	
	ГруппаОтбора = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы        = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	ГруппаОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ГруппаОтбора.Использование    = Истина;
	
	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("ВидМоделиТС");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение   = ПредопределенноеЗначение("Перечисление.уатВидыМоделейТС.Прицеп");
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.Использование    = Истина;
	
	Если АвторизованВнешнийПользователь Тогда
		ЭлементОтбора = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("ВладелецТС");
		ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение   = Объект.Контрагент;
		ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		ЭлементОтбора.Использование    = Истина;
	КонецЕсли;
	
	ФормаВыбора.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Прицеп1АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтруктураОтбора = Новый Структура();
	
	Если Объект.ПринадлежностьПеревозки = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное") Тогда 
		СтруктураОтбора.Вставить("ПринадлежностьТС", ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное"));
		Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
			СтруктураОтбора.Вставить("Организация", Объект.Контрагент);
		КонецЕсли;
		
	ИначеЕсли Объект.ПринадлежностьПеревозки = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Привлеченное") Тогда 
		СтруктураОтбора.Вставить("ПринадлежностьТС", ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Привлеченное"));
		Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
			СтруктураОтбора.Вставить("ВладелецТС", Объект.Контрагент);
		КонецЕсли;
		
	Иначе 
		СтруктураОтбора.Вставить("ПринадлежностьТС", ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Виртуальное"));
	КонецЕсли;
	
	РазрешенныеВидыТС = Новый Массив();
	РазрешенныеВидыТС.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыМоделейТС.Прицеп"));
	СтруктураОтбора.Вставить("ВидМоделиТС", РазрешенныеВидыТС);
	
	уатИнтерфейсВводаТС.РеквизитТСАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка, СтруктураОтбора);
	
КонецПроцедуры

&НаКлиенте
Процедура Прицеп1ОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	СтруктураОтбора = Новый Структура();
	
	Если Объект.ПринадлежностьПеревозки = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное") Тогда 
		СтруктураОтбора.Вставить("ПринадлежностьТС", ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное"));
		Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
			СтруктураОтбора.Вставить("Организация", Объект.Контрагент);
		КонецЕсли;
		
	ИначеЕсли Объект.ПринадлежностьПеревозки = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Привлеченное") Тогда 
		СтруктураОтбора.Вставить("ПринадлежностьТС", ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Привлеченное"));
		Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
			СтруктураОтбора.Вставить("ВладелецТС", Объект.Контрагент);
		КонецЕсли;
		
	Иначе 
		СтруктураОтбора.Вставить("ПринадлежностьТС", ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Виртуальное"));
	КонецЕсли;
	
	РазрешенныеВидыТС = Новый Массив();
	РазрешенныеВидыТС.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыМоделейТС.Прицеп"));
	СтруктураОтбора.Вставить("ВидМоделиТС", РазрешенныеВидыТС);
	
	уатИнтерфейсВводаТС.РеквизитТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка, СтруктураОтбора);
	
КонецПроцедуры

&НаКлиенте
Процедура Прицеп2ПриИзменении(Элемент)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя") И РежимОтображенияДерево Тогда 
		ОбновитьГрузовыеПараметрыДереваЗаказов();
	Иначе 
		ОбновитьГрузовыеПараметрыЗаказов();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Прицеп2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура("ТекущаяСтрока", Объект.Прицеп2);
	ФормаВыбора = ПолучитьФорму("Справочник.уатТС.ФормаВыбора", ПараметрыФормы, Элемент);
	
	ЭлементОтбора = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("Ссылка");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.НеРавно;
	ЭлементОтбора.ПравоеЗначение   = Объект.Прицеп1;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.Использование    = Истина;
	
	ЭлементОтбора = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("ЭтоГруппа");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение   = Ложь;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.Использование    = Истина;
	
	ЭлементОтбора = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("ПометкаУдаления");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение   = Ложь;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.Использование    = Истина;
	
	ГруппаОтбора = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы        = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	ГруппаОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ГруппаОтбора.Использование    = Истина;
	
	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("ВидМоделиТС");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение   = ПредопределенноеЗначение("Перечисление.уатВидыМоделейТС.Прицеп");
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.Использование    = Истина;
	
	Если АвторизованВнешнийПользователь Тогда
		ЭлементОтбора = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("ВладелецТС");
		ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение   = Объект.Контрагент;
		ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		ЭлементОтбора.Использование    = Истина;
	КонецЕсли;
	
	ФормаВыбора.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Прицеп2АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтруктураОтбора = Новый Структура();
	
	Если Объект.ПринадлежностьПеревозки = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное") Тогда 
		СтруктураОтбора.Вставить("ПринадлежностьТС", ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное"));
		Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
			СтруктураОтбора.Вставить("Организация", Объект.Контрагент);
		КонецЕсли;
		
	ИначеЕсли Объект.ПринадлежностьПеревозки = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Привлеченное") Тогда 
		СтруктураОтбора.Вставить("ПринадлежностьТС", ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Привлеченное"));
		Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
			СтруктураОтбора.Вставить("ВладелецТС", Объект.Контрагент);
		КонецЕсли;
		
	Иначе 
		СтруктураОтбора.Вставить("ПринадлежностьТС", ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Виртуальное"));
	КонецЕсли;
	
	РазрешенныеВидыТС = Новый Массив();
	РазрешенныеВидыТС.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыМоделейТС.Прицеп"));
	СтруктураОтбора.Вставить("ВидМоделиТС", РазрешенныеВидыТС);
	
	уатИнтерфейсВводаТС.РеквизитТСАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка, СтруктураОтбора);
	
КонецПроцедуры

&НаКлиенте
Процедура Прицеп2ОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	СтруктураОтбора = Новый Структура();
	
	Если Объект.ПринадлежностьПеревозки = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное") Тогда 
		СтруктураОтбора.Вставить("ПринадлежностьТС", ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное"));
		Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
			СтруктураОтбора.Вставить("Организация", Объект.Контрагент);
		КонецЕсли;
		
	ИначеЕсли Объект.ПринадлежностьПеревозки = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Привлеченное") Тогда 
		СтруктураОтбора.Вставить("ПринадлежностьТС", ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Привлеченное"));
		Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
			СтруктураОтбора.Вставить("ВладелецТС", Объект.Контрагент);
		КонецЕсли;
		
	Иначе 
		СтруктураОтбора.Вставить("ПринадлежностьТС", ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Виртуальное"));
	КонецЕсли;
	
	РазрешенныеВидыТС = Новый Массив();
	РазрешенныеВидыТС.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыМоделейТС.Прицеп"));
	СтруктураОтбора.Вставить("ВидМоделиТС", РазрешенныеВидыТС);
	
	уатИнтерфейсВводаТС.РеквизитТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка, СтруктураОтбора);
	
		
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикЗаказовПриОкончанииРедактирования(Элемент, НовыйЭлемент, ОтменаРедактирования)
	
	ОтменаРедактирования = Истина;
	
	Для Каждого ТекЭлемент Из Элемент.ВыделенныеЭлементы Цикл 
		Если ТекЭлемент.Значение = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		СтрокаЗаказа = ЗаказыДерево.НайтиПоИдентификатору(ТекЭлемент.Значение);
		Если СтрокаЗаказа = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		ТекущиеДанные = СтрокаЗаказа.ПолучитьРодителя();
		Если ТекущиеДанные = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		Если Не ТекущиеДанные.ПрибытиеПлан = ТекЭлемент.Начало Тогда 
			РазницаВремени = НачалоМинуты(ТекЭлемент.Начало) - ТекущиеДанные.ПрибытиеПлан;
			
			Объект.ДатаИВремяОтправленияПлан = Объект.ДатаИВремяОтправленияПлан + РазницаВремени;
			
			Если Объект.ПересчетВремени = 1 Тогда 
				РазницаЧас = Цел(РазницаВремени/3600);
				РазницаМин = Цел((РазницаВремени - РазницаЧас*3600) / 60);
				РазницаВремени = РазницаЧас + РазницаМин/100;
				
				флТекДанныеПройдены = Ложь;
				Для Каждого СтрокаПункта Из ЗаказыДерево.ПолучитьЭлементы() Цикл 
					Если СтрокаПункта = ТекущиеДанные Тогда 
						Если Не ЗаказыДерево.ПолучитьЭлементы()[0] = СтрокаПункта Тогда 
							СтрокаПункта.Ожидание = уатЗащищенныеФункцииСервер.СложитьВремя(СтрокаПункта.Ожидание, РазницаВремени);
						КонецЕсли;
						
						флТекДанныеПройдены = Истина;
						Продолжить;
					КонецЕсли;
					
					Если флТекДанныеПройдены Тогда 
						СтрокаПункта.Ожидание = уатЗащищенныеФункцииСервер.СложитьВремя(СтрокаПункта.Ожидание, -РазницаВремени);
						
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
		Иначе 
			РазницаВремени = НачалоМинуты(ТекЭлемент.Конец) - ТекущиеДанные.УбытиеПлан;
			
			Если ЗаказыДерево.ПолучитьЭлементы()[0] = ТекущиеДанные Или Объект.ПересчетВремени = 0 Тогда 
				Объект.ДатаИВремяОтправленияПлан = Объект.ДатаИВремяОтправленияПлан + РазницаВремени;
			КонецЕсли;
			
			Если Объект.ПересчетВремени = 1 Тогда 
				РазницаЧас = Цел(РазницаВремени/3600);
				РазницаМин = Цел((РазницаВремени - РазницаЧас*3600) / 60);
				РазницаВремени = РазницаЧас + РазницаМин/100;
				
				флТекДанныеПройдены = Ложь;
				Для Каждого СтрокаПункта Из ЗаказыДерево.ПолучитьЭлементы() Цикл 
					Если СтрокаПункта = ТекущиеДанные Тогда 
						Если Не ЗаказыДерево.ПолучитьЭлементы()[0] = СтрокаПункта Тогда 
							СтрокаПункта.Ожидание = уатЗащищенныеФункцииСервер.СложитьВремя(СтрокаПункта.Ожидание, РазницаВремени);
						КонецЕсли;
						
						флТекДанныеПройдены = Истина;
						Продолжить;
					КонецЕсли;
					
					Если флТекДанныеПройдены Тогда 
						СтрокаПункта.Ожидание = уатЗащищенныеФункцииСервер.СложитьВремя(СтрокаПункта.Ожидание, -РазницаВремени);
						
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		ОбновитьМаршрутныеПараметрыДереваЗаказов();
	КонецЦикла;
	
	// Для обновления планировщика будет использоваться дерево заказов
	Если Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя") 
		ИЛИ НЕ РежимОтображенияДерево Тогда 
		ЗаписатьДеревоЗаказов();
	КонецЕсли;
	
	ОбновитьДанныеНаПланировщике();
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикЗаказовПередСозданием(Элемент, Начало, Конец, Значения, Текст, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикЗаказовВыбор(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикЗаказовПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикЗаказовПередНачаломБыстрогоРедактирования(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусСинхронизацииСWMSНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СтруктураПараметров = Новый Структура("МаршрутныйЛист", Объект.Ссылка);
	ОткрытьФорму("РегистрСведений.уатСтатусыСинхронизацииСWMS_уэ.Форма.ФормаСписка", СтруктураПараметров, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура РазрешенаВыгрузкаВWMSПриИзменении(Элемент)
	УстановитьВидимостьИДоступностьЭлементовФормы();
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	мВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком");
	
	уатОбщегоНазначенияТиповыеКлиент.уатНачалоВыбораЗначенияДоговораКонтрагента(Объект, ЭтотОбъект, Элемент, Объект.Контрагент, 
	Объект.ДоговорКонтрагента, мВидДоговора, СтандартнаяОбработка);
	
КонецПроцедуры   

&НаКлиенте
Процедура ДоговорКонтрагентаСоздание(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВидДоговораДоступныеЗначения = Новый Массив;
	
	мВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком");
	ВидДоговораДоступныеЗначения.Добавить(мВидДоговора);
	
	ПараметрыФормы = Новый Структура(); 
	ПараметрыФормы.Вставить("Владелец", Объект.Контрагент);
	ПараметрыФормы.Вставить("ВидДоговораДоступныеЗначения", ВидДоговораДоступныеЗначения);
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
КонецПроцедуры 

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыЭлектронныеПеревозочныеДокументы

&НаКлиенте
Процедура ЭлектронныеПеревозочныеДокументыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ЭлектронныеПеревозочныеДокументы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Поле = Элементы.ЭлектронныеПеревозочныеДокументыСостояниеЭДО Тогда
		// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
		ОбменСКонтрагентамиКлиент.СостояниеЭДОНажатие_ФормаСписка(ТекущиеДанные.ЭПД, СтандартнаяОбработка);
		// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами 
	ИначеЕсли Поле = Элементы.ЭлектронныеПеревозочныеДокументыЗаказНаТС 
		И ЗначениеЗаполнено(ТекущиеДанные.ЗаказНаТС) Тогда
		ПоказатьЗначение(Неопределено, ТекущиеДанные.ЗаказНаТС);
	Иначе
		ПоказатьЗначение(Неопределено, ТекущиеДанные.ЭПД);
	КонецЕсли; 
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_ЗаказыДерево

&НаКлиенте
Процедура ЗаказыДеревоУстановитьПараметрыЯчейки(Элемент)
	
	Попытка
		ТекущийЭлемент_Имя = Элемент.ТекущийЭлемент.Имя;
	Исключение
		Возврат;
	КонецПопытки;
	
	// Обнулить свойства элементов
	Если ТекущийЭлемент_Имя = "ЗаказыДеревоПрибытиеФакт"
		ИЛИ	ТекущийЭлемент_Имя = "ЗаказыДеревоПрибытиеФактВремя"
		ИЛИ	ТекущийЭлемент_Имя = "ЗаказыДеревоПрибытиеПлан"
		ИЛИ	ТекущийЭлемент_Имя = "ЗаказыДеревоПрибытиеПланВремя"
		ИЛИ	ТекущийЭлемент_Имя = "ЗаказыДеревоУбытиеПлан"
		ИЛИ	ТекущийЭлемент_Имя = "ЗаказыДеревоУбытиеПланВремя"
		ИЛИ	ТекущийЭлемент_Имя = "ЗаказыДеревоУбытиеФакт"
		ИЛИ	ТекущийЭлемент_Имя = "ЗаказыДеревоУбытиеФактВремя"
		ИЛИ	ТекущийЭлемент_Имя = "ЗаказыДеревоВремя"
		ИЛИ	ТекущийЭлемент_Имя = "ЗаказыДеревоВремяФакт"
		ИЛИ	ТекущийЭлемент_Имя = "ЗаказыДеревоРасстояние"
		ИЛИ	ТекущийЭлемент_Имя = "ЗаказыДеревоРасстояниеФакт"
		ИЛИ	ТекущийЭлемент_Имя = "ЗаказыДеревоСтоянка"
		ИЛИ	ТекущийЭлемент_Имя = "ЗаказыДеревоСтоянкаФакт"
		ИЛИ	ТекущийЭлемент_Имя = "ЗаказыДеревоПунктЗаказНоменклатура" Тогда 
		Элемент.ТекущийЭлемент.ТолькоПросмотр = Ложь;
	ИначеЕсли ТекущийЭлемент_Имя = "ЗаказыДеревоЕдиницаИзмеренияПоЗаказу" Тогда 
		Элемент.ТекущийЭлемент.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	ТекСтрока = Элементы.ЗаказыДерево.ТекущиеДанные;
	Если ТекСтрока <> Неопределено Тогда
		Если ТекСтрока.ПолучитьРодителя() = Неопределено Тогда 
			Если (ТекущийЭлемент_Имя = "ЗаказыДеревоСтоянка"
				ИЛИ ТекущийЭлемент_Имя = "ЗаказыДеревоСтоянкаФакт"
				ИЛИ ТекущийЭлемент_Имя = "ЗаказыДеревоВесБрутто"
				ИЛИ ТекущийЭлемент_Имя = "ЗаказыДеревоОбъем"
				ИЛИ ТекущийЭлемент_Имя = "ЗаказыДеревоКоличествоМест")
				ИЛИ ЗаказыДерево.ПолучитьЭлементы().Индекс(ТекСтрока) = ЗаказыДерево.ПолучитьЭлементы().Количество()-1 
				И (ТекущийЭлемент_Имя = "ЗаказыДеревоВремя"
				ИЛИ ТекущийЭлемент_Имя = "ЗаказыДеревоВремяФакт"
				ИЛИ ТекущийЭлемент_Имя = "ЗаказыДеревоРасстояние"
				ИЛИ ТекущийЭлемент_Имя = "ЗаказыДеревоРасстояниеФакт") Тогда
					
				Элемент.ТекущийЭлемент.ТолькоПросмотр = Истина;
				
			КонецЕсли;
			
			Если ТекСтрока.ПолучитьЭлементы().Количество() = 0 Тогда 
				Если ТекущийЭлемент_Имя = "ЗаказыДеревоПунктЗаказНоменклатура" Тогда 
					Элемент.ТекущийЭлемент.ТолькоПросмотр = Ложь;
				КонецЕсли;
			Иначе 
				Если ТекущийЭлемент_Имя = "ЗаказыДеревоПунктЗаказНоменклатура"
					ИЛИ ТекущийЭлемент_Имя = "ЗаказыДеревоСтоянка" Тогда 
					Элемент.ТекущийЭлемент.ТолькоПросмотр = Истина;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ТекСтрока.ПунктЗаказНоменклатура = Тип("СправочникСсылка.Номенклатура") Тогда 
			Если ТекущийЭлемент_Имя = "ЗаказыДеревоЕдиницаИзмеренияПоЗаказу" Тогда 
				Элемент.ТекущийЭлемент.ТолькоПросмотр = Ложь;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	// Настройка доступа к ячейкам для внешнего пользователя.
	Если АвторизованВнешнийПользователь
		И (ТекущийЭлемент_Имя = "ЗаказыДеревоПунктЗаказНоменклатура"
		ИЛИ ТекущийЭлемент_Имя = "ЗаказыДеревоКоличество"
		ИЛИ ТекущийЭлемент_Имя = "ЗаказыДеревоЕдиницаИзмеренияПоЗаказу"
		ИЛИ ТекущийЭлемент_Имя = "ЗаказыДеревоТипТочкиМаршрута"
		ИЛИ ТекущийЭлемент_Имя = "ЗаказыДеревоЕдиницаИзмерения"
		ИЛИ ТекущийЭлемент_Имя = "ЗаказыДеревоВесБрутто"
		ИЛИ ТекущийЭлемент_Имя = "ЗаказыДеревоВесПроцент"
		ИЛИ ТекущийЭлемент_Имя = "ЗаказыДеревоОбъем"
		ИЛИ ТекущийЭлемент_Имя = "ЗаказыДеревоОбъемПроцент"
		ИЛИ ТекущийЭлемент_Имя = "ЗаказыДеревоКоличествоМест"
		ИЛИ ТекущийЭлемент_Имя = "ЗаказыДеревоКоличествоМестПроцент"
		ИЛИ ТекущийЭлемент_Имя = "ЗаказыДеревоВремя"
		ИЛИ ТекущийЭлемент_Имя = "ЗаказыДеревоРасстояние"
		ИЛИ ТекущийЭлемент_Имя = "ЗаказыДеревоСтоянка"
		ИЛИ ТекущийЭлемент_Имя = "ЗаказыДеревоОжидание"
		ИЛИ ТекущийЭлемент_Имя = "ЗаказыДеревоПрибытиеПлан"
		ИЛИ ТекущийЭлемент_Имя = "ЗаказыДеревоПрибытиеПланВремя"
		ИЛИ ТекущийЭлемент_Имя = "ЗаказыДеревоОкноС"
		ИЛИ ТекущийЭлемент_Имя = "ЗаказыДеревоОкноПо"
		ИЛИ ТекущийЭлемент_Имя = "ЗаказыДеревоУбытиеПлан"
		ИЛИ ТекущийЭлемент_Имя = "ЗаказыДеревоУбытиеПланВремя"
		ИЛИ ТекущийЭлемент_Имя = "ЗаказыДеревоТерминал"
		ИЛИ ТекущийЭлемент_Имя = "ЗаказыДеревоПричинаЗакрытияЗаказа"
		ИЛИ ТекущийЭлемент_Имя = "ЗаказыДеревоРекламация"
		ИЛИ ТекущийЭлемент_Имя = "ЗаказыДеревоРекламации"
		ИЛИ ТекущийЭлемент_Имя = "ЗаказыДеревоНадписьДопВыработка"
		ИЛИ ТекущийЭлемент_Имя = "ЗаказыДеревоРазмещение"
		ИЛИ ТекущийЭлемент_Имя = "ЗаказыДеревоВесТары"
		Или ТекущийЭлемент_Имя = "ЗаказыДеревоСтатусWMS") Тогда 
		
		Элемент.ТекущийЭлемент.ТолькоПросмотр = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыДеревоПриИзменении(Элемент)
	
	ЗаказыДеревоИзменитьДатыВШапке();
	ОбновитьДанныеНаПланировщике();
	
	мсвСерверныеПроцедуры = Новый Массив;
	мсвСерверныеПроцедуры.Добавить("РассчитатьПоказателиСервер");
	мсвСерверныеПроцедуры.Добавить("ОбновитьНадписьИтоги");
	
	ОбновитьДинамическиеПоля(мсвСерверныеПроцедуры);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыДеревоВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ЗаказыДеревоПрисоединенныеФайлы" Тогда 
		СтандартнаяОбработка = Ложь;
		
		ТекСтрока = Элементы.ЗаказыДерево.ТекущиеДанные;
		Если ТекСтрока = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		Если ТекСтрока.ПрисоединенныеФайлы = 0 Тогда 
			Возврат;
		КонецЕсли;
		
		мсвGUID = Новый Массив();
		мсвGUID.Добавить(ТекСтрока.GUIDСтроки);
		ПолучитьGUIDФайловРекурсивно(мсвGUID, ТекСтрока.ПолучитьЭлементы());
		
		ПоказатьПрисоединенныеФайлы(мсвGUID);
		
	ИначеЕсли Поле.Имя = "ЗаказыДеревоРекламации" Тогда
		ТекСтрока = Элементы.ЗаказыДерево.ТекущиеДанные;
		СписокРекламаций = ТекСтрока.Рекламации;
		Если СписокРекламаций.Количество() = 1 Тогда
			ПоказатьЗначение(Неопределено, СписокРекламаций[0].Значение);
		ИначеЕсли СписокРекламаций.Количество() > 1 Тогда
			Оповещение = Новый ОписаниеОповещения("ОбработкаВыбораРекламацииИзСписка", ЭтотОбъект);
			ТекстНСТР = НСтр("en='Select claim to view';ru='Выберите рекламацию для просмотра'");
			СписокРекламаций.ПоказатьВыборЭлемента(Оповещение, ТекстНСТР);
		КонецЕсли;
		
	ИначеЕсли Поле.Имя = "ЗаказыДеревоНадписьДопВыработка" Тогда	
		ЗаказыДеревоНадписьДопВыработкаНажатие(Неопределено, СтандартнаяОбработка);
		
	ИначеЕсли Поле.Имя = "ЗаказыДеревоСтатусWMS" Тогда
		ТекСтрока = Элементы.ЗаказыДерево.ТекущиеДанные;
		Если ЗначениеЗаполнено(ТекСтрока.ЗаказГрузоотправителя) Тогда
			СтруктураПараметров = Новый Структура("ЗаказНаТС", ТекСтрока.ЗаказГрузоотправителя);
			ОткрытьФорму("РегистрСведений.уатСтатусыСинхронизацииСWMS_уэ.Форма.ФормаСписка", СтруктураПараметров, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		ИначеЕсли ЗначениеЗаполнено(ТекСтрока.ПунктЗаказНоменклатура) 
			И ТипЗнч(ТекСтрока.ПунктЗаказНоменклатура) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") Тогда
			СтруктураПараметров = Новый Структура("ЗаказНаТС", ТекСтрока.ПунктЗаказНоменклатура);
			ОткрытьФорму("РегистрСведений.уатСтатусыСинхронизацииСWMS_уэ.Форма.ФормаСписка", СтруктураПараметров, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораРекламацииИзСписка(ВыбЭлемент, ДопПараметры) Экспорт
	Если ВыбЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(Неопределено, ВыбЭлемент.Значение);
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыДеревоПриАктивизацииЯчейки(Элемент)
	
	Если Не Элемент.ТекущаяСтрока = Неопределено Тогда 
		ЗаказыДеревоУстановитьПараметрыЯчейки(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыДеревоПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	 
	ТекущиеДанные = Элементы.ЗаказыДерево.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаказыДеревоУдалитьСтроку(ТекущиеДанные);
	
	ОбновитьМаршрутныеПараметрыДереваЗаказов();
	ОбновитьГрузовыеПараметрыДереваЗаказов();
	
	ОбновитьДанныеНаПланировщике();
	РассчитатьМаршрутныеПоказатели();
	ОбновитьНадписьИтоги();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыДеревоПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если Не НоваяСтрока И (ТипЗнч(ТекДанные.ПунктЗаказНоменклатура) = Тип("СправочникСсылка.Номенклатура") 
			Или ТипЗнч(ТекДанные.ПунктЗаказНоменклатура) = Тип("СправочникСсылка.уатГрузовыеМеста_уэ")) Тогда
		мБуфСтрока.ЕдиницаИзмерения = ТекДанные.ЕдиницаИзмерения;
		мБуфСтрока.Количество       = ТекДанные.Количество;
	КонецЕсли;
	
	ТекВремяСтроки = Неопределено;
	
	Если НЕ НоваяСтрока Тогда
		Группа = ТекДанные.ПолучитьРодителя();
		Если Группа <> Неопределено Тогда 
			ТекДанные = Группа;
		КонецЕсли;
		
		ТекВремяСтроки = Новый Структура;
		ТекВремяСтроки.Вставить("ПрибытиеПлан", ТекДанные.ПрибытиеПлан);
		ТекВремяСтроки.Вставить("УбытиеПлан",   ТекДанные.УбытиеПлан);
		ТекВремяСтроки.Вставить("ПрибытиеФакт", ТекДанные.ПрибытиеФакт);
		ТекВремяСтроки.Вставить("УбытиеФакт",   ТекДанные.УбытиеФакт);
		ТекВремяСтроки.Вставить("Время",        ТекДанные.Время);
		ТекВремяСтроки.Вставить("ВремяФакт",    ТекДанные.ВремяФакт);
		ТекВремяСтроки.Вставить("Ожидание",     ТекДанные.Ожидание);
		ТекВремяСтроки.Вставить("ОжиданиеФакт", ТекДанные.ОжиданиеФакт);
		ТекВремяСтроки.Вставить("Стоянка",      ТекДанные.Стоянка);
		ТекВремяСтроки.Вставить("СтоянкаФакт",  ТекДанные.СтоянкаФакт);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыДеревоПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	СтрокаИсточник = ЗаказыДерево.НайтиПоИдентификатору(Элемент.ТекущаяСтрока);
	Если Не Строка = Неопределено Тогда 
		СтрокаПриемник = ЗаказыДерево.НайтиПоИдентификатору(Строка);
	КонецЕсли;
	
	Если Строка = Неопределено Тогда
		ПараметрыПеретаскивания.Действие           = ДействиеПеретаскивания.Отмена;
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
		Возврат;
	КонецЕсли;
	
	СтрокаПунктПриемник = СтрокаПриемник;
	Пока Не СтрокаПунктПриемник.ПолучитьРодителя() = Неопределено Цикл
		СтрокаПунктПриемник = СтрокаПунктПриемник.ПолучитьРодителя();
	КонецЦикла;
	СтрокаПунктИсточник = СтрокаИсточник;
	Пока Не СтрокаПунктИсточник.ПолучитьРодителя() = Неопределено Цикл
		СтрокаПунктИсточник = СтрокаПунктИсточник.ПолучитьРодителя();
	КонецЦикла;
	
	Если СтрокаПунктИсточник = СтрокаПунктПриемник Тогда
		ПараметрыПеретаскивания.Действие            = ДействиеПеретаскивания.Отмена;
		ПараметрыПеретаскивания.ДопустимыеДействия  = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
		Возврат;
	КонецЕсли;
	
	ПеретаскиваниеВозможно = Истина;
	
	Если СтрокаИсточник.ПолучитьРодителя() = Неопределено И СтрокаИсточник.ПолучитьЭлементы().Количество() Тогда //пункт заказа
		
		Для Каждого ТекСтрокаЗаказ Из СтрокаИсточник.ПолучитьЭлементы() Цикл
			Для Каждого ТекСтрокаНоменклатура Из ТекСтрокаЗаказ.ПолучитьЭлементы() Цикл
				Если Не ПроверитьВозможностьПеретаскиванияВДеревеЗаказов(ТекСтрокаНоменклатура,СтрокаПриемник,СтрокаПунктИсточник,СтрокаПунктПриемник) Тогда
					ПеретаскиваниеВозможно = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если Не ПеретаскиваниеВозможно Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли СтрокаИсточник.ПолучитьРодителя() = Неопределено И Не СтрокаИсточник.ПолучитьЭлементы().Количество() Тогда //просто пункт
		
	ИначеЕсли ТипЗнч(СтрокаИсточник.ПунктЗаказНоменклатура) = Тип("ДокументССылка.уатЗаказГрузоотправителя") Тогда
		
		Для Каждого ТекСтрокаНоменклатура Из СтрокаИсточник.ПолучитьЭлементы() Цикл
			Если Не ПроверитьВозможностьПеретаскиванияВДеревеЗаказов(ТекСтрокаНоменклатура,СтрокаПриемник,СтрокаПунктИсточник,СтрокаПунктПриемник) Тогда
				ПеретаскиваниеВозможно = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(СтрокаИсточник.ПунктЗаказНоменклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		
		ПеретаскиваниеВозможно = ПроверитьВозможностьПеретаскиванияВДеревеЗаказов(СтрокаИсточник, СтрокаПриемник, СтрокаПунктИсточник, СтрокаПунктПриемник);
		
	КонецЕсли;
	
	ПараметрыПеретаскивания.Действие           = ?(ПеретаскиваниеВозможно, 
	                                               ДействиеПеретаскивания.Перемещение,
	                                               ДействиеПеретаскивания.Отмена);
	ПараметрыПеретаскивания.ДопустимыеДействия = ?(ПеретаскиваниеВозможно, 
	                                               ДопустимыеДействияПеретаскивания.Перемещение, 
	                                               ДопустимыеДействияПеретаскивания.НеОбрабатывать);
	
КонецПроцедуры

&НаКлиенте                    
Процедура ЗаказыДеревоПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	ЗаказыДеревоВыполнитьПеретаскивание(Элемент.ТекущаяСтрока, Строка);
	
	Модифицированность = Истина;
	РасстоянияТЧЗаказы(Неопределено);
	
	ОбновитьМаршрутныеПараметрыДереваЗаказов();
	ОбновитьГрузовыеПараметрыДереваЗаказов();
	
	РассчитатьМаршрутныеПоказатели();
	ОбновитьНадписьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыДеревоВремяПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЗаказыДерево.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Объект.ПересчетВремени = 1 Тогда 
		флТекДанныеПройдены = Ложь;
		Для Каждого СтрокаПункта Из ЗаказыДерево.ПолучитьЭлементы() Цикл 
			Если СтрокаПункта = ТекущиеДанные Тогда 
				флТекДанныеПройдены = Истина;
				Продолжить;
			КонецЕсли;
			
			Если флТекДанныеПройдены Тогда 
				Если ТекВремяСтроки <> Неопределено Тогда
					ПредВремяВПути = 0;
					
					ТекВремяСтроки.Свойство("Время", ПредВремяВПути);
					ТекВремяСтроки = Неопределено;
					
					РазницаВремени = уатЗащищенныеФункцииСервер.СложитьВремя(ТекущиеДанные.Время, -ПредВремяВПути);
					
					СтрокаПункта.Ожидание = уатЗащищенныеФункцииСервер.СложитьВремя(СтрокаПункта.Ожидание, -РазницаВремени);
				КонецЕсли;
				
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ОбновитьМаршрутныеПараметрыДереваЗаказов();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыДеревоРасстояниеПриИзменении(Элемент)
	
	ОбновитьМаршрутныеПараметрыДереваЗаказов();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыДеревоЕдиницаИзмеренияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЗаказыДерево.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТочкаМаршрутаРодителя = ТекущиеДанные.ПолучитьРодителя();
	Если Не ТочкаМаршрутаРодителя = Неопределено Тогда
		ТочкаМаршрутаРодителя = ТочкаМаршрутаРодителя.ТипТочкиМаршрута;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура();
	СтруктураПоиска.Вставить("ЗаказГрузоотправителя",    ТекущиеДанные.ЗаказГрузоотправителя);
	СтруктураПоиска.Вставить("ПунктЗаказНоменклатура",   ТекущиеДанные.ПунктЗаказНоменклатура);
	СтруктураПоиска.Вставить("ЕдиницаИзмерения",         мБуфСтрока.ЕдиницаИзмерения);
	СтруктураПоиска.Вставить("ЕдиницаИзмеренияПоЗаказу", ТекущиеДанные.ЕдиницаИзмеренияПоЗаказу);
	СтруктураПоиска.Вставить("Количество",               мБуфСтрока.Количество);
	
	НайдСтроки = НайтиСтрокиВДереве(ЗаказыДерево.ПолучитьЭлементы(), СтруктураПоиска, Истина);
	
	Если НайдСтроки.Количество() = 0 Тогда
		ТекущиеДанные.ЕдиницаИзмерения = мБуфСтрока.ЕдиницаИзмерения;
		Возврат;
		
	Иначе 
		Для Каждого ТекЭлем Из НайдСтроки Цикл
			СтрокаРодитель = ТекЭлем.ПолучитьРодителя();
			Если СтрокаРодитель <> Неопределено И СтрокаРодитель.ТипТочкиМаршрута <> ТочкаМаршрутаРодителя Тогда
				ТекЭлем.ЕдиницаИзмерения = ТекущиеДанные.ЕдиницаИзмерения;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ОбновитьГрузовыеПараметрыДереваЗаказов();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыДеревоЕдиницаИзмеренияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекДанные = Элементы.ЗаказыДерево.ТекущиеДанные;
	Если ТипЗнч(ТекДанные.ПунктЗаказНоменклатура) = Тип("СправочникСсылка.Номенклатура") 
			Или ТипЗнч(ТекДанные.ПунктЗаказНоменклатура) = Тип("СправочникСсылка.уатГрузовыеМеста_уэ") Тогда
		мБуфСтрока.ЕдиницаИзмерения = ТекДанные.ЕдиницаИзмерения;
		мБуфСтрока.Количество       = ТекДанные.Количество;
	КонецЕсли;
	
	уатОбщегоНазначенияКлиент.ТЧТоварыЕдиницаИзмеренияНачалоВыбора(ТекДанные.ПунктЗаказНоменклатура, ДанныеВыбора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыДеревоЕдиницаИзмеренияПоЗаказуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатОбщегоНазначенияКлиент.ТЧТоварыЕдиницаИзмеренияНачалоВыбора(
		Элементы.ЗаказыДерево.ТекущиеДанные.ПунктЗаказНоменклатура, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыДеревоСтоянкаПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ЗаказыДерево.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ГруппаОбхода = ТекущиеДанные.ПолучитьРодителя();
	
	СуммарноеВремяСтоянки = 0;
	Если ГруппаОбхода = Неопределено Тогда
		ТекущиеДанные.УбытиеПлан = уатЗащищенныеФункцииСервер.СложитьВремя(ТекущиеДанные.ПрибытиеПлан, ТекущиеДанные.Стоянка);
		
		Если ТекВремяСтроки <> Неопределено Тогда
			УбытиеПлан = 0;
			
			ТекВремяСтроки.Свойство("УбытиеПлан", УбытиеПлан);
			ТекВремяСтроки = Неопределено;
			
			РазницаВремени = ТекущиеДанные.УбытиеПлан - УбытиеПлан;
			
			Если Объект.ПересчетВремени = 1 Тогда 
				РазницаЧас = Цел(РазницаВремени/3600);
				РазницаМин = Цел((РазницаВремени - РазницаЧас*3600) / 60);
				РазницаВремени = РазницаЧас + РазницаМин/100;
				
				флТекДанныеПройдены = Ложь;
				Для Каждого СтрокаПункта Из ЗаказыДерево.ПолучитьЭлементы() Цикл 
					Если СтрокаПункта = ТекущиеДанные Тогда 
						флТекДанныеПройдены = Истина;
						Продолжить;
					КонецЕсли;
					
					Если флТекДанныеПройдены Тогда 
						СтрокаПункта.Ожидание = уатЗащищенныеФункцииСервер.СложитьВремя(СтрокаПункта.Ожидание, -РазницаВремени);
						
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
			ИначеЕсли ТекущиеДанные = ЗаказыДерево.ПолучитьЭлементы()[0] Тогда 
				Объект.ДатаИВремяОтправленияПлан = Объект.ДатаИВремяОтправленияПлан + РазницаВремени;
				Если Объект.Заказы.Количество() Тогда 
					Объект.Заказы.Получить(0).УбытиеПлан = Объект.ДатаИВремяОтправленияПлан;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	Иначе 
		Для Каждого ТекСтрокаЗаказ Из ГруппаОбхода.ПолучитьЭлементы() Цикл 
			СуммарноеВремяСтоянки = уатЗащищенныеФункцииСервер.СложитьВремя(СуммарноеВремяСтоянки, ТекСтрокаЗаказ.Стоянка);
		КонецЦикла;
		СуммарноеВремяСтоянки = уатЗащищенныеФункцииСервер.СложитьВремя(СуммарноеВремяСтоянки, ГруппаОбхода.СтоянкаИзПункта);
		
		ГруппаОбхода.УбытиеПлан = уатЗащищенныеФункцииСервер.СложитьВремя(ГруппаОбхода.ПрибытиеПлан, СуммарноеВремяСтоянки);
		
		Если Не ТекВремяСтроки = Неопределено Тогда 
			УбытиеПлан = 0;
			
			ТекВремяСтроки.Свойство("УбытиеПлан", УбытиеПлан);
			ТекВремяСтроки = Неопределено;
			
			РазницаВремени = ГруппаОбхода.УбытиеПлан - УбытиеПлан;
			
			Если ГруппаОбхода = ЗаказыДерево.ПолучитьЭлементы()[0] Тогда 
				Объект.ДатаИВремяОтправленияПлан = Объект.ДатаИВремяОтправленияПлан + РазницаВремени;
				Если Объект.Заказы.Количество() Тогда 
					Объект.Заказы.Получить(0).УбытиеПлан = Объект.ДатаИВремяОтправленияПлан;
				КонецЕсли;
			КонецЕсли;
			
			Если Объект.ПересчетВремени = 1 Тогда 
				РазницаЧас = Цел(РазницаВремени/3600);
				РазницаМин = Цел((РазницаВремени - РазницаЧас*3600) / 60);
				РазницаВремени = РазницаЧас + РазницаМин/100;
				
				флТекДанныеПройдены = Ложь;
				Для Каждого СтрокаПункта Из ЗаказыДерево.ПолучитьЭлементы() Цикл 
					Если СтрокаПункта = ГруппаОбхода Тогда 
						флТекДанныеПройдены = Истина;
						Продолжить;
					КонецЕсли;
					
					Если флТекДанныеПройдены Тогда 
						СтрокаПункта.Ожидание = уатЗащищенныеФункцииСервер.СложитьВремя(СтрокаПункта.Ожидание, -РазницаВремени);
						
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьМаршрутныеПараметрыДереваЗаказов();
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыДеревоСтоянкаФактПриИзменении(Элемент)
	ТекСтрока = Элементы.ЗаказыДерево.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	СтрокаРодитель = ТекСтрока.ПолучитьРодителя();
	Если СтрокаРодитель <> Неопределено И СтрокаРодитель.ПолучитьРодителя() = Неопределено Тогда
		СуммарноеВремяСтоянки = 0;
		Для Каждого ТекСтрокаЗаказ Из СтрокаРодитель.ПолучитьЭлементы() Цикл 
			СуммарноеВремяСтоянки = уатЗащищенныеФункцииСервер.СложитьВремя(СуммарноеВремяСтоянки, ТекСтрокаЗаказ.СтоянкаФакт);
		КонецЦикла;
		
		СтрокаРодитель.СтоянкаФакт = СуммарноеВремяСтоянки;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыДеревоОжиданиеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЗаказыДерево.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	уатЗащищенныеФункцииСервер.КонтрольВводаВремени(ТекущиеДанные.Ожидание);
	
	Если Объект.ПересчетВремени = 1 Тогда 
		Если НЕ ЗаказыДерево.ПолучитьЭлементы()[0] = ТекущиеДанные 
			И НЕ ТекВремяСтроки = Неопределено Тогда 
			ПредОжидание = 0;
			ТекВремяСтроки.Свойство("Ожидание", ПредОжидание);
			ТекВремяСтроки = Неопределено;
			
			РазницаВремени = ТекущиеДанные.Ожидание - ПредОжидание;
			
			РазницаВремениСек = ((РазницаВремени - Цел(РазницаВремени))*6000 + Цел(РазницаВремени)*3600);
			
			ТекущиеДанные.ПрибытиеПлан = ТекущиеДанные.ПрибытиеПлан + РазницаВремениСек;
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьМаршрутныеПараметрыДереваЗаказов();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыДеревоКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЗаказыДерево.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТочкаМаршрутаРодителя = ТекущиеДанные.ПолучитьРодителя();
	Если Не ТочкаМаршрутаРодителя = Неопределено Тогда
		ТочкаМаршрутаРодителя = ТочкаМаршрутаРодителя.ТипТочкиМаршрута;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура();
	СтруктураПоиска.Вставить("ЗаказГрузоотправителя",    ТекущиеДанные.ЗаказГрузоотправителя);
	СтруктураПоиска.Вставить("ПунктЗаказНоменклатура",   ТекущиеДанные.ПунктЗаказНоменклатура);
	СтруктураПоиска.Вставить("ЕдиницаИзмерения",         ТекущиеДанные.ЕдиницаИзмерения);
	СтруктураПоиска.Вставить("ЕдиницаИзмеренияПоЗаказу", ТекущиеДанные.ЕдиницаИзмеренияПоЗаказу);
	СтруктураПоиска.Вставить("Количество",               мБуфСтрока.Количество);
	
	НайдСтроки = НайтиСтрокиВДереве(ЗаказыДерево.ПолучитьЭлементы(), СтруктураПоиска, Истина);
	
	// Не найдено, остается старое значение.
	Если НайдСтроки.Количество() = 0 Тогда
		ТекущиеДанные.Количество = мБуфСтрока.Количество;
		Возврат;
	КонецЕсли;
	
	// Найдено, выполняется пропорциональный пересчет весо-объемных показателей.
	Для Каждого ТекЭлем Из НайдСтроки Цикл
		Если ТекЭлем.Количество = 0 Тогда
			ТекЭлем.ВесБрутто      = 0;
			ТекЭлем.Объем          = 0;
			ТекЭлем.КоличествоМест = 0;
		Иначе
			ТекЭлем.ВесБрутто      = ТекЭлем.ВесБрутто      / ТекЭлем.Количество * ТекущиеДанные.Количество;
			ТекЭлем.Объем          = ТекЭлем.Объем          / ТекЭлем.Количество * ТекущиеДанные.Количество;
			ТекЭлем.КоличествоМест = ТекЭлем.КоличествоМест / ТекЭлем.Количество * ТекущиеДанные.Количество;
		КонецЕсли;
		
		Если ТекЭлем.КоличествоМест = 0 Тогда
			ТекЭлем.КоличествоМест = 1;
		КонецЕсли;
		
		СтрокаРодитель = ТекЭлем.ПолучитьРодителя();
		Если СтрокаРодитель <> Неопределено И СтрокаРодитель.ТипТочкиМаршрута <> ТочкаМаршрутаРодителя Тогда
			ТекЭлем.Количество = ТекущиеДанные.Количество;
		КонецЕсли;
	КонецЦикла;
	
	Если мБуфСтрока.Количество = 0 Тогда
		ТекущиеДанные.ВесБрутто      = 0;
		ТекущиеДанные.Объем          = 0;
		ТекущиеДанные.КоличествоМест = 0;
	Иначе
		ТекущиеДанные.ВесБрутто      = ТекущиеДанные.ВесБрутто      / мБуфСтрока.Количество * ТекущиеДанные.Количество;
		ТекущиеДанные.Объем          = ТекущиеДанные.Объем          / мБуфСтрока.Количество * ТекущиеДанные.Количество;
		ТекущиеДанные.КоличествоМест = ТекущиеДанные.КоличествоМест / мБуфСтрока.Количество * ТекущиеДанные.Количество;
	КонецЕсли;
	
	Если ТекущиеДанные.КоличествоМест = 0 Тогда
		ТекущиеДанные.КоличествоМест = 1;
	КонецЕсли;
	
	ОбновитьГрузовыеПараметрыДереваЗаказов();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыДеревоПрибытиеФактВремяПриИзменении(Элемент)
	// Стандартно очистка времени вызывает также очистку всей даты, поэтому здесь обходим это поведение
	ТекСтрока = Элементы.ЗаказыДерево.ТекущиеДанные;
	Если ТекСтрока.ПрибытиеФакт = '00010101' И ТекВремяСтроки.ПрибытиеФакт <> '00010101' Тогда
		ТекСтрока.ПрибытиеФакт = НачалоДня(ТекВремяСтроки.ПрибытиеФакт);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыДеревоПрибытиеПланПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЗаказыДерево.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ТекВремяСтроки = Неопределено Тогда
		ПрибытиеПлан = 0;
		
		ТекВремяСтроки.Свойство("ПрибытиеПлан", ПрибытиеПлан);
		ТекВремяСтроки = Неопределено;
		
		РазницаВремениСек = ТекущиеДанные.ПрибытиеПлан - ПрибытиеПлан;
		
		Если Объект.ПересчетВремени = 1 Тогда 
			РазницаЧас = Цел(РазницаВремениСек/3600);
			РазницаМин = Цел((РазницаВремениСек - РазницаЧас*3600) / 60);
			РазницаВремени = РазницаЧас + РазницаМин/100;
			
			флТекДанныеПройдены = Ложь;
			Для Каждого СтрокаПункта Из ЗаказыДерево.ПолучитьЭлементы() Цикл 
				Если СтрокаПункта = ТекущиеДанные Тогда 
					Если Не ЗаказыДерево.ПолучитьЭлементы()[0] = СтрокаПункта Тогда 
						СтрокаПункта.Ожидание = уатЗащищенныеФункцииСервер.СложитьВремя(СтрокаПункта.Ожидание, РазницаВремени);
					Иначе 
						Объект.ДатаИВремяОтправленияПлан = Объект.ДатаИВремяОтправленияПлан + РазницаВремениСек;
					КонецЕсли;
					
					флТекДанныеПройдены = Истина;
					Продолжить;
				КонецЕсли;
				
				Если флТекДанныеПройдены Тогда 
					СтрокаПункта.Ожидание = уатЗащищенныеФункцииСервер.СложитьВремя(СтрокаПункта.Ожидание, -РазницаВремени);
					
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Иначе 
			Если ЗаказыДерево.ПолучитьЭлементы()[0] = ТекущиеДанные Или Объект.ПересчетВремени = 0 Тогда 
				Объект.ДатаИВремяОтправленияПлан = Объект.ДатаИВремяОтправленияПлан + РазницаВремениСек;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьМаршрутныеПараметрыДереваЗаказов();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыДеревоПрибытиеПланВремяПриИзменении(Элемент)
	// Стандартно очистка времени вызывает также очистку всей даты, поэтому здесь обходим это поведение
	ТекСтрока = Элементы.ЗаказыДерево.ТекущиеДанные;
	Если ТекСтрока.ПрибытиеПлан = '00010101' И ТекВремяСтроки.ПрибытиеПлан <> '00010101' Тогда
		ТекСтрока.ПрибытиеПлан = НачалоДня(ТекВремяСтроки.ПрибытиеПлан);
	КонецЕсли;
	
	ЗаказыДеревоПрибытиеПланПриИзменении(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыДеревоУбытиеПланПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЗаказыДерево.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТекВремяСтроки <> Неопределено Тогда
		УбытиеПлан = 0;
		
		ТекВремяСтроки.Свойство("УбытиеПлан", УбытиеПлан);
		ТекВремяСтроки = Неопределено;
		
		РазницаВремениСек = ТекущиеДанные.УбытиеПлан - УбытиеПлан;
		
		Если Объект.ПересчетВремени = 1 Тогда 
			РазницаЧас = Цел(РазницаВремениСек/3600);
			РазницаМин = Цел((РазницаВремениСек - РазницаЧас*3600) / 60);
			РазницаВремени = РазницаЧас + РазницаМин/100;
			
			флТекДанныеПройдены = Ложь;
			Для Каждого СтрокаПункта Из ЗаказыДерево.ПолучитьЭлементы() Цикл 
				Если СтрокаПункта = ТекущиеДанные Тогда 
					Если Не ЗаказыДерево.ПолучитьЭлементы()[0] = СтрокаПункта Тогда 
						СтрокаПункта.ПрибытиеПлан = СтрокаПункта.ПрибытиеПлан + РазницаВремениСек;
						СтрокаПункта.Ожидание = уатЗащищенныеФункцииСервер.СложитьВремя(СтрокаПункта.Ожидание, РазницаВремени);
					Иначе 
						Объект.ДатаИВремяОтправленияПлан = Объект.ДатаИВремяОтправленияПлан + РазницаВремениСек;
					КонецЕсли;
					
					флТекДанныеПройдены = Истина;
					Продолжить;
				КонецЕсли;
				
				Если флТекДанныеПройдены Тогда 
					СтрокаПункта.Ожидание = уатЗащищенныеФункцииСервер.СложитьВремя(СтрокаПункта.Ожидание, -РазницаВремени);
					
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Иначе 
			Если ЗаказыДерево.ПолучитьЭлементы()[0] = ТекущиеДанные Или Объект.ПересчетВремени = 0 Тогда 
				Объект.ДатаИВремяОтправленияПлан = Объект.ДатаИВремяОтправленияПлан + РазницаВремениСек;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьМаршрутныеПараметрыДереваЗаказов();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыДеревоУбытиеПланВремяПриИзменении(Элемент)
	// Стандартно очистка времени вызывает также очистку всей даты, поэтому здесь обходим это поведение
	ТекСтрока = Элементы.ЗаказыДерево.ТекущиеДанные;
	Если ТекСтрока.УбытиеПлан = '00010101' И ТекВремяСтроки.УбытиеПлан <> '00010101' Тогда
		ТекСтрока.УбытиеПлан = НачалоДня(ТекВремяСтроки.УбытиеПлан);
	КонецЕсли;
	
	ЗаказыДеревоУбытиеПланПриИзменении(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыДеревоУбытиеФактПриИзменении(Элемент)
	ОбновитьМаршрутныеПараметрыДереваЗаказов();
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыДеревоУбытиеФактВремяПриИзменении(Элемент)
	// Стандартно очистка времени вызывает также очистку всей даты, поэтому здесь обходим это поведение
	ТекСтрока = Элементы.ЗаказыДерево.ТекущиеДанные;
	Если ТекСтрока.УбытиеФакт = '00010101' И ТекВремяСтроки.УбытиеФакт <> '00010101' Тогда
		ТекСтрока.УбытиеФакт = НачалоДня(ТекВремяСтроки.УбытиеФакт);
	КонецЕсли;
	
	ЗаказыДеревоУбытиеФактПриИзменении(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыДеревоВесБруттоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЗаказыДерево.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТочкаМаршрутаРодителя = ТекущиеДанные.ПолучитьРодителя();
	Если Не ТочкаМаршрутаРодителя = Неопределено Тогда
		ТочкаМаршрутаРодителя = ТочкаМаршрутаРодителя.ТипТочкиМаршрута;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура();
	СтруктураПоиска.Вставить("ЗаказГрузоотправителя",    ТекущиеДанные.ЗаказГрузоотправителя);
	СтруктураПоиска.Вставить("ПунктЗаказНоменклатура",   ТекущиеДанные.ПунктЗаказНоменклатура);
	СтруктураПоиска.Вставить("ЕдиницаИзмерения",         ТекущиеДанные.ЕдиницаИзмерения);
	СтруктураПоиска.Вставить("ЕдиницаИзмеренияПоЗаказу", ТекущиеДанные.ЕдиницаИзмеренияПоЗаказу);
	СтруктураПоиска.Вставить("Количество",               ТекущиеДанные.Количество);
	
	НайдСтроки = НайтиСтрокиВДереве(ЗаказыДерево.ПолучитьЭлементы(), СтруктураПоиска, Истина);
	
	Для Каждого ТекЭлем Из НайдСтроки Цикл
		Если ТекЭлем = ТекущиеДанные Тогда 
			Продолжить;
		КонецЕсли;
		
		ТекРодитель = ТекЭлем.ПолучитьРодителя();
		Если Не ТекРодитель = Неопределено И Не ТекРодитель.ТипТочкиМаршрута = ТочкаМаршрутаРодителя Тогда 
			ТекЭлем.ВесБрутто = ТекущиеДанные.ВесБрутто;
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьГрузовыеПараметрыДереваЗаказов();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыДеревоОбъемПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЗаказыДерево.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТочкаМаршрутаРодителя = ТекущиеДанные.ПолучитьРодителя();
	Если Не ТочкаМаршрутаРодителя = Неопределено Тогда
		ТочкаМаршрутаРодителя = ТочкаМаршрутаРодителя.ТипТочкиМаршрута;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура();
	СтруктураПоиска.Вставить("ЗаказГрузоотправителя",    ТекущиеДанные.ЗаказГрузоотправителя);
	СтруктураПоиска.Вставить("ПунктЗаказНоменклатура",   ТекущиеДанные.ПунктЗаказНоменклатура);
	СтруктураПоиска.Вставить("ЕдиницаИзмерения",         ТекущиеДанные.ЕдиницаИзмерения);
	СтруктураПоиска.Вставить("ЕдиницаИзмеренияПоЗаказу", ТекущиеДанные.ЕдиницаИзмеренияПоЗаказу);
	СтруктураПоиска.Вставить("Количество",               ТекущиеДанные.Количество);
	
	НайдСтроки = НайтиСтрокиВДереве(ЗаказыДерево.ПолучитьЭлементы(), СтруктураПоиска, Истина);
	
	Для Каждого ТекЭлем Из НайдСтроки Цикл
		Если ТекЭлем = ТекущиеДанные Тогда 
			Продолжить;
		КонецЕсли;
		
		ТекРодитель = ТекЭлем.ПолучитьРодителя();
		Если Не ТекРодитель = Неопределено И Не ТекРодитель.ТипТочкиМаршрута = ТочкаМаршрутаРодителя Тогда 
			ТекЭлем.Объем = ТекущиеДанные.Объем;
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьГрузовыеПараметрыДереваЗаказов();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыДеревоКоличествоМестПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЗаказыДерево.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТочкаМаршрутаРодителя = ТекущиеДанные.ПолучитьРодителя();
	Если Не ТочкаМаршрутаРодителя = Неопределено Тогда
		ТочкаМаршрутаРодителя = ТочкаМаршрутаРодителя.ТипТочкиМаршрута;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура();
	СтруктураПоиска.Вставить("ЗаказГрузоотправителя",    ТекущиеДанные.ЗаказГрузоотправителя);
	СтруктураПоиска.Вставить("ПунктЗаказНоменклатура",   ТекущиеДанные.ПунктЗаказНоменклатура);
	СтруктураПоиска.Вставить("ЕдиницаИзмерения",         ТекущиеДанные.ЕдиницаИзмерения);
	СтруктураПоиска.Вставить("ЕдиницаИзмеренияПоЗаказу", ТекущиеДанные.ЕдиницаИзмеренияПоЗаказу);
	СтруктураПоиска.Вставить("Количество",               ТекущиеДанные.Количество);
	
	НайдСтроки = НайтиСтрокиВДереве(ЗаказыДерево.ПолучитьЭлементы(), СтруктураПоиска, Истина);
	
	Для Каждого ТекЭлем Из НайдСтроки Цикл
		Если ТекЭлем = ТекущиеДанные Тогда 
			Продолжить;
		КонецЕсли;
		
		ТекРодитель = ТекЭлем.ПолучитьРодителя();
		Если Не ТекРодитель = Неопределено И Не ТекРодитель.ТипТочкиМаршрута = ТочкаМаршрутаРодителя Тогда 
			ТекЭлем.КоличествоМест = ТекущиеДанные.КоличествоМест;
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьГрузовыеПараметрыДереваЗаказов();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыДеревоВыполненПриИзменении(Элемент)
	
	ПриИзмененииФлагаЗаказыВыполнен(Элементы.ЗаказыДерево.ТекущиеДанные, Истина);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыДеревоРекламацияПриИзменении(Элемент)
	ТекСтрока = Элементы.ЗаказыДерево.ТекущиеДанные;
	ТекСтрока_Рекламация = ТекСтрока.Рекламация;
	
	СтрокаРодитель = ТекСтрока.ПолучитьРодителя();
	
	// Пункт, не должно такого быть, но на всякий случай подстрахуемся
	Если СтрокаРодитель = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Отключение обработчика для внешнего пользователя.
	Если АвторизованВнешнийПользователь Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаРодительРодитель = СтрокаРодитель.ПолучитьРодителя();
	Если СтрокаРодительРодитель = Неопределено Тогда //Заказ
		Для Каждого ТекСтрокаНоменклатура Из ТекСтрока.ПолучитьЭлементы() Цикл
			ТекСтрокаНоменклатура.Рекламация = ТекСтрока_Рекламация;
			
			Для Каждого ТекПункт2 Из ЗаказыДерево.ПолучитьЭлементы() Цикл
				Для Каждого ТекЗаказ2 Из ТекПункт2.ПолучитьЭлементы() Цикл
					флРекламация = Истина;
					Для Каждого ТекГруз2 Из ТекЗаказ2.ПолучитьЭлементы() Цикл
						Если ТекЗаказ2.ПунктЗаказНоменклатура = ТекСтрока.ПунктЗаказНоменклатура
							И ТекГруз2.ПунктЗаказНоменклатура = ТекСтрокаНоменклатура.ПунктЗаказНоменклатура Тогда
							
							ТекГруз2.Рекламация = ТекСтрока_Рекламация;
						КонецЕсли;
						флРекламация = флРекламация И ТекГруз2.Рекламация;
					КонецЦикла;
					
					ТекЗаказ2.Рекламация = флРекламация;
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
		
	Иначе //Номенклатура
		флРекламация = Истина;
		Для Каждого ТекСтрокаНоменклатура Из СтрокаРодитель.ПолучитьЭлементы() Цикл
			флРекламация = флРекламация И ТекСтрокаНоменклатура.Рекламация;
		КонецЦикла;
		СтрокаРодитель.Рекламация = флРекламация;
		
		Для Каждого ТекПункт2 Из ЗаказыДерево.ПолучитьЭлементы() Цикл
			Для Каждого ТекЗаказ2 Из ТекПункт2.ПолучитьЭлементы() Цикл
				флРекламация = Истина;
				Для Каждого ТекГруз2 Из ТекЗаказ2.ПолучитьЭлементы() Цикл
					Если ТекЗаказ2.ПунктЗаказНоменклатура = СтрокаРодитель.ПунктЗаказНоменклатура
						И ТекГруз2.ПунктЗаказНоменклатура = ТекСтрока.ПунктЗаказНоменклатура Тогда
						
						ТекГруз2.Рекламация = ТекСтрока_Рекламация;
					КонецЕсли;
					флРекламация = флРекламация И ТекГруз2.Рекламация;
				КонецЦикла;
				
				ТекЗаказ2.Рекламация = флРекламация;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыДеревоТерминалНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ЗаказыДерево.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	СтрокаРодитель = ТекущиеДанные.ПолучитьРодителя();
	Если СтрокаРодитель = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Отбор", Новый Структура("Владелец", СтрокаРодитель.ПунктЗаказНоменклатура));
	
	ОткрытьФорму("Справочник.уатТерминалы.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыДеревоТерминалАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ЗаказыДерево.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	СтрокаРодитель = ТекущиеДанные.ПолучитьРодителя();
	Если СтрокаРодитель = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ПараметрыПолученияДанных = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыПолученияДанных.Отбор.Вставить("Владелец", СтрокаРодитель.ПунктЗаказНоменклатура);
	
	ДанныеВыбора = ПолучитьСписокВыбораТерминалов(ПараметрыПолученияДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыДеревоТерминалОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ЗаказыДерево.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	СтрокаРодитель = ТекущиеДанные.ПолучитьРодителя();
	Если СтрокаРодитель = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ПараметрыПолученияДанных = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыПолученияДанных.Отбор.Вставить("Владелец", СтрокаРодитель.ПунктЗаказНоменклатура);
	
	ДанныеВыбора = ПолучитьСписокВыбораТерминалов(ПараметрыПолученияДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыДеревоПунктЗаказНоменклатураПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ЗаказыДерево.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ТекущиеДанные.ТипЗначенияСтроки = 1 Тогда 
		Возврат;
	КонецЕсли;
	
	ТипТС    = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(Объект.ТС, "ТипТС");
	Если ЗначениеЗаполнено(ТекущиеДанные.ПунктЗаказНоменклатура) И ТипЗнч(ТекущиеДанные.ПунктЗаказНоменклатура) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда
		ЭтоГараж = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(ТекущиеДанные.ПунктЗаказНоменклатура, "Гараж");
	Иначе
		ЭтоГараж = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ЗаказГрузоотправителя) И НЕ ЭтоГараж Тогда
		ТекущиеДанные.СтоянкаИзПункта = уатЗащищенныеФункцииСервер_уэ.ПолучитьВремяСтоянкиВПункте(ТекущиеДанные.ПунктЗаказНоменклатура, ТипТС);
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.ЗаказГрузоотправителя) Тогда
		ТекущиеДанные.СтоянкаИзПункта = уатЗащищенныеФункцииСервер_уэ.ПолучитьВремяСтоянкиВПункте(ТекущиеДанные.ПунктЗаказНоменклатура, ТипТС);
	Иначе 
		ТекущиеДанные.СтоянкаИзПункта = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыДеревоНадписьДопВыработкаНажатие(Элемент, СтандартнаяОбработка)
	
	ТекСтрока = Элементы.ЗаказыДерево.ТекущиеДанные;
	СтандартнаяОбработка = Ложь;
	
	Если АвторизованВнешнийПользователь
		И УровеньДоступаКРасходам = ПредопределенноеЗначение("Перечисление.уатУровеньДоступаКУслугам.РедактированиеЗапрещено") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ИмяДокумента", "уатМаршрутныйЛист");
	ПараметрыОткрытия.Вставить("ТолькоПросмотр", Элементы.ГруппаШапка.ТолькоПросмотр);
	Для Сч = 1 По ТекСтрока.ДопВыработкаПараметры.Количество() Цикл
		ПараметрыОткрытия.Вставить("СпецРабота" + Сч, ТекСтрока.ДопВыработкаПараметры[Сч-1].Значение);
		ПараметрыОткрытия.Вставить("КоличествоСпецРаботы" + Сч, ТекСтрока.ДопВыработкаКоличество[Сч-1].Значение);
	КонецЦикла;
	Если ЗначениеЗаполнено(Объект.ТС) Тогда
		ПараметрыОткрытия.Вставить("ТС", Объект.ТС);
	КонецЕсли;
	Если ПараметрыОткрытия.ТолькоПросмотр Тогда
		Оповещение = Неопределено;
	Иначе
		ДопПараметры = Новый Структура("ИмяТаблицы", "ЗаказыДерево");
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияФормыРедактированияДопВыработки", ЭтотОбъект, ДопПараметры);
	КонецЕсли;
	
	ОткрытьФорму("Документ.уатПутевойЛист.Форма.ФормаРедактированияСпецРабот", ПараметрыОткрытия, ЭтотОбъект,,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыДеревоПричинаЗакрытияЗаказаПриИзменении(Элемент)
	
	ТекСтрока = Элементы.ЗаказыДерево.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТекСтрока.ТипЗначенияСтроки = 2 Тогда
		Для Каждого ТекСтрокаНоменклатура Из ТекСтрока.ПолучитьЭлементы() Цикл
			ТекСтрокаНоменклатура.ПричинаЗакрытияЗаказа = ТекСтрока.ПричинаЗакрытияЗаказа;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_Заказы

&НаКлиенте
Процедура ЗаказыУстановитьПараметрыЯчейки(Элемент)
	                                     
	ТекДанныеСтроки = Элементы.Заказы.ДанныеСтроки(Элемент.ТекущаяСтрока);
	
	Если ЗначениеЗаполнено(ТекДанныеСтроки.ЗаказГрузоотправителя) Тогда
		Если Элемент.ТекущийЭлемент.Имя = "ЗаказыПункт" Тогда 
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Истина;
		КонецЕсли;
		Если Элемент.ТекущийЭлемент.Имя = "ЗаказыВесБрутто" Тогда 
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Ложь;
		КонецЕсли;
		Если Элемент.ТекущийЭлемент.Имя = "ЗаказыОбъем" Тогда 
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Ложь;
		КонецЕсли;
		Если Элемент.ТекущийЭлемент.Имя = "ЗаказыКоличествоМест" Тогда 
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Ложь;
		КонецЕсли;
		Если Элемент.ТекущийЭлемент.Имя = "ЗаказыКоличество" Тогда 
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Ложь;
		КонецЕсли;
		Если Элемент.ТекущийЭлемент.Имя = "ЗаказыЕдиницаИзмерения" Тогда 
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Ложь;
		КонецЕсли;
	Иначе 
		Если Элемент.ТекущийЭлемент.Имя = "ЗаказыПункт" Тогда 
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Ложь;
		КонецЕсли;
		Если Элемент.ТекущийЭлемент.Имя = "ЗаказыВесБрутто" Тогда 
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Истина;
		КонецЕсли;
		Если Элемент.ТекущийЭлемент.Имя = "ЗаказыОбъем" Тогда 
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Истина;
		КонецЕсли;
		Если Элемент.ТекущийЭлемент.Имя = "ЗаказыКоличествоМест" Тогда 
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Истина;
		КонецЕсли;
		Если Элемент.ТекущийЭлемент.Имя = "ЗаказыКоличество" Тогда 
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Истина;
		КонецЕсли;
		Если Элемент.ТекущийЭлемент.Имя = "ЗаказыЕдиницаИзмерения" Тогда 
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Элемент.ТекущийЭлемент.Имя = "ЗаказыЕдиницаИзмеренияПоЗаказу" Тогда 
		Элемент.ТекущийЭлемент.ТолькоПросмотр = Ложь;
	КонецЕсли;
	
	Если Объект.Заказы.Индекс(Элемент.ТекущиеДанные) = Объект.Заказы.Количество()-1 Тогда
		Если Элемент.ТекущийЭлемент.Имя = "ЗаказыРасстояние" Тогда 
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Истина;
		КонецЕсли;
		Если Элемент.ТекущийЭлемент.Имя = "ЗаказыВремя" Тогда 
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Истина;
		КонецЕсли;
	Иначе 
		Если Элемент.ТекущийЭлемент.Имя = "ЗаказыРасстояние" Тогда 
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Ложь;
		КонецЕсли;
		Если Элемент.ТекущийЭлемент.Имя = "ЗаказыВремя" Тогда 
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Настройка доступности ячеек для внешнего пользователя.
	Если АвторизованВнешнийПользователь Тогда
		Если Элемент.ТекущийЭлемент.Имя = "ЗаказыПункт" Тогда 
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Истина;
		КонецЕсли;
		Если Элемент.ТекущийЭлемент.Имя = "ЗаказыЗаказГрузоотправителя" Тогда 
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Истина;
		КонецЕсли;
		Если Элемент.ТекущийЭлемент.Имя = "ЗаказыРасстояние" Тогда 
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Истина;
		КонецЕсли;
		Если Элемент.ТекущийЭлемент.Имя = "ЗаказыТипТочкиМаршрута" Тогда 
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Истина;
		КонецЕсли;
		Если Элемент.ТекущийЭлемент.Имя = "ЗаказыВремя" Тогда 
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Истина;
		КонецЕсли;
		Если Элемент.ТекущийЭлемент.Имя = "ЗаказыОжидание" Тогда 
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Истина;
		КонецЕсли;
		Если Элемент.ТекущийЭлемент.Имя = "ЗаказыСтоянка" Тогда 
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Истина;
		КонецЕсли;
		Если Элемент.ТекущийЭлемент.Имя = "ЗаказыСтоянкаИзПункта" Тогда 
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Истина;
		КонецЕсли;
		Если Элемент.ТекущийЭлемент.Имя = "ЗаказыНоменклатура" Тогда 
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Истина;
		КонецЕсли;
		Если Элемент.ТекущийЭлемент.Имя = "ЗаказыКоличество" Тогда 
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Истина;
		КонецЕсли;
		Если Элемент.ТекущийЭлемент.Имя = "ЗаказыЕдиницаИзмеренияПоЗаказу" Тогда 
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Истина;
		КонецЕсли;
		Если Элемент.ТекущийЭлемент.Имя = "ЗаказыЕдиницаИзмерения" Тогда 
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Истина;
		КонецЕсли;
		Если Элемент.ТекущийЭлемент.Имя = "ЗаказыПрибытиеПлан" Тогда 
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Истина;
		КонецЕсли;
		Если Элемент.ТекущийЭлемент.Имя = "ЗаказыПрибытиеПланВремя" Тогда 
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Истина;
		КонецЕсли;
		Если Элемент.ТекущийЭлемент.Имя = "ЗаказыОкноС" Тогда 
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Истина;
		КонецЕсли;
		Если Элемент.ТекущийЭлемент.Имя = "ЗаказыОкноПо" Тогда 
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Истина;
		КонецЕсли;
		Если Элемент.ТекущийЭлемент.Имя = "ЗаказыУбытиеПлан" Тогда 
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Истина;
		КонецЕсли;
		Если Элемент.ТекущийЭлемент.Имя = "ЗаказыУбытиеПланВремя" Тогда 
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Истина;
		КонецЕсли;
		Если Элемент.ТекущийЭлемент.Имя = "ЗаказыВесБрутто" Тогда 
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Истина;
		КонецЕсли;
		Если Элемент.ТекущийЭлемент.Имя = "ЗаказыОбъем" Тогда 
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Истина;
		КонецЕсли;
		Если Элемент.ТекущийЭлемент.Имя = "ЗаказыКоличествоМест" Тогда 
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Истина;
		КонецЕсли;
		Если Элемент.ТекущийЭлемент.Имя = "ЗаказыПричинаЗакрытияЗаказа" Тогда 
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Истина;
		КонецЕсли;
		Если Элемент.ТекущийЭлемент.Имя = "ЗаказыТерминал" Тогда 
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Истина;
		КонецЕсли;
		Если Элемент.ТекущийЭлемент.Имя = "ЗаказыРекламация" Тогда 
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Истина;
		КонецЕсли;
		Если Элемент.ТекущийЭлемент.Имя = "ЗаказыРекламации" Тогда 
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Истина;
		КонецЕсли;
		Если Элемент.ТекущийЭлемент.Имя = "ЗаказыРазмещение" Тогда 
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Истина;
		КонецЕсли;
		Если Элемент.ТекущийЭлемент.Имя = "ЗаказыНадписьДопВыработка" Тогда 
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Истина;
		КонецЕсли;
		Если Элемент.ТекущийЭлемент.Имя = "ЗаказыВесТары" Тогда 
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Истина;
		КонецЕсли;
		Если Элемент.ТекущийЭлемент.Имя = "ЗаказыСтатусWMS" Тогда 
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет содержание динамических колонок "окно с", "окно по", "рекламация", "статус обмена с WMS"
// в режиме "список"
//
&НаСервере
Процедура ЗаказыУстановитьСодержимоеЯчеек()
	
	ВремяПоЗаказам = ПолучитьВремяОтправленияДоставкиПоЗаказам();
	СтатусыСинхронизацииСWMS = ПолучитьСтатусыСинхронизацииСWMS(Объект.Ссылка);
	
	Для Каждого ТекСтрока Из Объект.Заказы Цикл 
		Если ТекСтрока.ТипТочкиМаршрута = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Погрузка") Тогда 
			ТекСтрока.ОкноС  = ВремяПоЗаказам.Получить(Объект.Заказы.Индекс(ТекСтрока)).ОтправлениеС;
			ТекСтрока.ОкноПо = ВремяПоЗаказам.Получить(Объект.Заказы.Индекс(ТекСтрока)).ОтправлениеПо;
		Иначе 
			ТекСтрока.ОкноС  = ВремяПоЗаказам.Получить(Объект.Заказы.Индекс(ТекСтрока)).ДоставкаС;
			ТекСтрока.ОкноПо = ВремяПоЗаказам.Получить(Объект.Заказы.Индекс(ТекСтрока)).ДоставкаПо;
		КонецЕсли;
		Если Объект.Заказы.Индекс(ТекСтрока) = Объект.Заказы.Количество()-1 Тогда 
			ТекСтрока.Время = Неопределено;
			ТекСтрока.Расстояние = Неопределено;
			Если флПланФакт Тогда
				ТекСтрока.ВремяФакт = Неопределено;
				ТекСтрока.РасстояниеФакт = Неопределено;
			КонецЕсли;
						
			Сч = Объект.Заказы.Количество()-2;
			Пока Сч >= 0 Цикл 
				измСтрока = Объект.Заказы.Получить(Сч);
				Если измСтрока.Пункт = ТекСтрока.Пункт Тогда 
					измСтрока.Время = Неопределено;
					измСтрока.Расстояние = Неопределено;
				Иначе 
					Сч = -1;
					Прервать;
				КонецЕсли;
				Сч = Сч - 1;
			КонецЦикла;
		КонецЕсли;
		ТекСтрока.Рекламации = ПолучитьРекламацииДляСтрокиЗаказов(ТекСтрока.ЗаказГрузоотправителя);
		
		СтрокаСтатуса = СтатусыСинхронизацииСWMS.Найти(ТекСтрока.ЗаказГрузоотправителя, "ЗаказНаТС");
		Если ЗначениеЗаполнено(СтрокаСтатуса) Тогда
			ТекСтрока.СтатусWMS = СтрокаСтатуса.Статус;
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыПриИзменении(Элемент)
	
	ЗаказыУстановитьСодержимоеЯчеек();
	УстановитьДанныеСтрокОдногоПункта(Элементы.Заказы.ТекущиеДанные);
	ПересчитатьПлановоеВремя();
	ЗаказыИзменитьДатыВШапке();
	ОбновитьДанныеНаПланировщике();
	РассчитатьПоказателиСервер();
	ОбновитьДинамическиеПоля();
	ОбновитьНадписьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле = Элементы.ЗаказыРекламации Тогда
		ТекСтрока = Элементы.Заказы.ТекущиеДанные;
		СписокРекламаций = ТекСтрока.Рекламации;
		Если СписокРекламаций.Количество() = 1 Тогда
			ПоказатьЗначение(Неопределено, СписокРекламаций[0].Значение);
		ИначеЕсли СписокРекламаций.Количество() > 1 Тогда
			Оповещение = Новый ОписаниеОповещения("ОбработкаВыбораРекламацииИзСписка", ЭтотОбъект);
			ТекстНСТР = НСтр("en='Select claim to view';ru='Выберите рекламацию для просмотра'");
			СписокРекламаций.ПоказатьВыборЭлемента(Оповещение, ТекстНСТР);
		КонецЕсли;
	ИначеЕсли Поле.Имя = "ЗаказыПрисоединенныеФайлы" Тогда 
		СтандартнаяОбработка = Ложь;
		
		ТекСтрока = Элементы.Заказы.ТекущиеДанные;
		Если ТекСтрока = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		Если ТекСтрока.ПрисоединенныеФайлы = 0 Тогда 
			Возврат;
		КонецЕсли;
		
		мсвGUID = Новый Массив();
		мсвGUID.Добавить(ТекСтрока.GUIDСтроки);
		
		ПоказатьПрисоединенныеФайлы(мсвGUID);
	ИначеЕсли Поле.Имя = "ЗаказыСтатусWMS" Тогда
		ТекСтрока = Элементы.Заказы.ТекущиеДанные;
		СтруктураПараметров = Новый Структура("ЗаказНаТС", ТекСтрока.ЗаказГрузоотправителя);
		ОткрытьФорму("РегистрСведений.уатСтатусыСинхронизацииСWMS_уэ.Форма.ФормаСписка", СтруктураПараметров, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	ИначеЕсли Поле.Имя = "ЗаказыНадписьДопВыработка" Тогда	
		ЗаказыНадписьДопВыработкаНажатие(Неопределено, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыПриАктивизацииЯчейки(Элемент)
	
	Если Не Элемент.ТекущаяСтрока = Неопределено
		И Не Элемент.ТекущийЭлемент = Неопределено Тогда
		ЗаказыУстановитьПараметрыЯчейки(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	ТекДанные = Элементы.Заказы.ТекущиеДанные;
	
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если ЗначениеЗаполнено(ТекДанные.ЗаказГрузоотправителя) Тогда
		
		СтруктураОтбора = Новый Структура("ЗаказГрузоотправителя, 
		                                  |Номенклатура, 
		                                  |ЕдиницаИзмеренияПоЗаказу,
		                                  |ЕдиницаИзмерения,
		                                  |Количество");
		
		СтруктураОтбора.ЗаказГрузоотправителя    = ТекДанные.ЗаказГрузоотправителя;
		СтруктураОтбора.Номенклатура             = ТекДанные.Номенклатура;
		СтруктураОтбора.ЕдиницаИзмеренияПоЗаказу = ТекДанные.ЕдиницаИзмеренияПоЗаказу;
		СтруктураОтбора.ЕдиницаИзмерения         = ТекДанные.ЕдиницаИзмерения;
		СтруктураОтбора.Количество               = ТекДанные.Количество;
		
		НайдСтроки = Объект.Заказы.НайтиСтроки(СтруктураОтбора);
		
		Если НайдСтроки.Количество() Тогда
			Объект.Заказы.Удалить(НайдСтроки[0]);
			Для СчИ = 1 По НайдСтроки.Количество() - 1 Цикл
				Объект.Заказы.Удалить(НайдСтроки[СчИ]);
			КонецЦикла;
		КонецЕсли;
		
	Иначе
		Объект.Заказы.Удалить(ТекДанные);
	КонецЕсли;
	
	Для Каждого СтрокаТЧ Из Объект.Заказы Цикл
		СтрокаТЧ.Время      = 0;
		СтрокаТЧ.Расстояние = 0;
		Если флПланФакт Тогда
			СтрокаТЧ.ВремяФакт      = 0;
			СтрокаТЧ.РасстояниеФакт = 0;
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьДанныеНаПланировщике();
	РассчитатьМаршрутныеПоказатели();
	ОбновитьНадписьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекДанные = Элементы.Заказы.ТекущиеДанные;
	Если Не НоваяСтрока И ЗначениеЗаполнено(ТекДанные.ЗаказГрузоотправителя) Тогда
		мБуфСтрока.ЕдиницаИзмерения = ТекДанные.ЕдиницаИзмерения;
		мБуфСтрока.Количество       = ТекДанные.Количество;
	КонецЕсли;
	
	ТекВремяСтроки = Неопределено;
	Если Не НоваяСтрока Тогда
		ТекВремяСтроки = Новый Структура;
		ТекВремяСтроки.Вставить("ПрибытиеПлан", ТекДанные.ПрибытиеПлан);
		ТекВремяСтроки.Вставить("УбытиеПлан",   ТекДанные.УбытиеПлан);
		ТекВремяСтроки.Вставить("ПрибытиеФакт", ТекДанные.ПрибытиеФакт);
		ТекВремяСтроки.Вставить("УбытиеФакт",   ТекДанные.УбытиеФакт);
		ТекВремяСтроки.Вставить("Время",        ТекДанные.Время);
		ТекВремяСтроки.Вставить("Ожидание",     ТекДанные.Ожидание);
		ТекВремяСтроки.Вставить("Стоянка",      ((ТекДанные.Стоянка - Цел(ТекДанные.Стоянка))*6000 + Цел(ТекДанные.Стоянка)*3600));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	//СтандартнаяОбработки = Ложь;
	мЗначение = ПараметрыПеретаскивания.Значение; //массив индексов перетаскиваемых строк
	Если мЗначение = Неопределено Или Строка = Неопределено Тогда
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Возврат;
	КонецЕсли;
	
	Если мЗначение.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТЧ = Элементы.Заказы.ДанныеСтроки(мЗначение[0]);
	
	Если ЗначениеЗаполнено(СтрокаТЧ.ЗаказГрузоотправителя) Тогда
		
		СтруктураОтбора = Новый Структура("ЗаказГрузоотправителя, 
										  |ТипТочкиМаршрута, 
										  |Номенклатура,
										  |ЕдиницаИзмеренияПоЗаказу,
										  |ЕдиницаИзмерения,
										  |Количество");
		СтруктураОтбора.ЗаказГрузоотправителя    = СтрокаТЧ.ЗаказГрузоотправителя;
		СтруктураОтбора.ТипТочкиМаршрута         = ?(СтрокаТЧ.ТипТочкиМаршрута = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Погрузка"),
		                                           ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Разгрузка"),
		                                           ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Погрузка"));
		СтруктураОтбора.Номенклатура             = СтрокаТЧ.Номенклатура;
		СтруктураОтбора.ЕдиницаИзмеренияПоЗаказу = СтрокаТЧ.ЕдиницаИзмеренияПоЗаказу;
		СтруктураОтбора.ЕдиницаИзмерения         = СтрокаТЧ.ЕдиницаИзмерения;
		СтруктураОтбора.Количество               = СтрокаТЧ.Количество;
		
		НайдСтроки = Объект.Заказы.НайтиСтроки(СтруктураОтбора);
		Если Не НайдСтроки.Количество() Тогда
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
			Возврат;
		КонецЕсли;
		
		СмежИндекс = ?(СтрокаТЧ.ТипТочкиМаршрута = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Погрузка"),100000000,-1);
		
		Для Каждого ТекСтрока Из НайдСтроки Цикл
			Если СтрокаТЧ.ТипТочкиМаршрута = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Погрузка") Тогда
				СмежИндекс = Мин(СмежИндекс,Объект.Заказы.Индекс(ТекСтрока));
			Иначе
				СмежИндекс = Макс(СмежИндекс,Объект.Заказы.Индекс(ТекСтрока));
			КонецЕсли;
		КонецЦикла;
		
		ТекИндекс      = Объект.Заказы.Индекс(СтрокаТЧ);
		дСтрокаПриемника = Элементы.Заказы.ДанныеСтроки(Строка);
		ИндексПриемник = Объект.Заказы.Индекс(дСтрокаПриемника);
		
		Если ТекИндекс > ИндексПриемник И ИндексПриемник <= СмежИндекс И (СтрокаТЧ.ТипТочкиМаршрута = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Разгрузка")
			ИЛИ СтрокаТЧ.ТипТочкиМаршрута = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.ДополнительнаяРазгрузка")) Тогда //тянем вверх
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		ИначеЕсли ТекИндекс < ИндексПриемник И ИндексПриемник >= СмежИндекс И (СтрокаТЧ.ТипТочкиМаршрута = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Погрузка")
			ИЛИ СтрокаТЧ.ТипТочкиМаршрута = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.ДополнительнаяПогрузка")) Тогда //тянем вниз
			ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	Для Каждого СтрокаТЧ Из Объект.Заказы Цикл
		СтрокаТЧ.Время      = 0;
		СтрокаТЧ.Расстояние = 0;
		Если флПланФакт Тогда
			СтрокаТЧ.ВремяФакт      = 0;
			СтрокаТЧ.РасстояниеФакт = 0;
		КонецЕсли;
	КонецЦикла;
	
	РасстоянияТЧЗаказы(Неопределено);
	РассчитатьМаршрутныеПоказатели();
	ОбновитьНадписьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыВыполненПриИзменении(Элемент)
	
	ПриИзмененииФлагаЗаказыВыполнен(Элементы.Заказы.ТекущиеДанные);
	ЗаказыИзменитьДатыВШапке();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыРекламацияПриИзменении(Элемент)
	
	// Отключение обработчика для внешнего пользователя.
	Если АвторизованВнешнийПользователь Тогда
		Возврат;
	КонецЕсли;
	
	// Нужно проставить галку в строках с таким же ключом [Заказ, ГрузовоеМесто/Номенклатура]
	ТекСтрока = Элементы.Заказы.ТекущиеДанные;
	флРекламация = ТекСтрока.Рекламация;
	мсвСтрок = Объект.Заказы.НайтиСтроки(Новый Структура("ЗаказГрузоотправителя, Номенклатура", ТекСтрока.ЗаказГрузоотправителя, ТекСтрока.Номенклатура));
	Для Каждого ТекСтрока Из мсвСтрок Цикл
		ТекСтрока.Рекламация = флРекламация;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыЕдиницаИзмеренияПриИзменении(Элемент)
	
	ТекДанные = Элементы.Заказы.ТекущиеДанные;
	СтруктураПоиска = Новый Структура("ЗаказГрузоотправителя, Номенклатура, ЕдиницаИзмерения, ЕдиницаИзмеренияПоЗаказу, Количество",
	                  ТекДанные.ЗаказГрузоотправителя, ТекДанные.Номенклатура,
	                  мБуфСтрока.ЕдиницаИзмерения,     ТекДанные.ЕдиницаИзмеренияПоЗаказу,
	                  ТекДанные.Количество);
	  
	НайдСтроки = Объект.Заказы.НайтиСтроки(СтруктураПоиска);
	Если НайдСтроки.Количество() = 0 Тогда
		ТекДанные.ЕдиницаИзмерения = мБуфСтрока.ЕдиницаИзмерения;
		
	Иначе
		Для Каждого ТекЭлем Из НайдСтроки Цикл
			Если ТекЭлем.ТипТочкиМаршрута <> ТекДанные.ТипТочкиМаршрута Тогда
				ТекЭлем.ЕдиницаИзмерения = ТекДанные.ЕдиницаИзмерения;
				ОбновитьГрузовыеПараметрыЗаказов(ТекЭлем);
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	ОбновитьГрузовыеПараметрыЗаказов(ТекДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыЕдиницаИзмеренияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекДанные                   = Элементы.Заказы.ТекущиеДанные;
	мБуфСтрока.ЕдиницаИзмерения = ТекДанные.ЕдиницаИзмерения;
	мБуфСтрока.Количество       = ТекДанные.Количество;
	
	уатОбщегоНазначенияКлиент.ТЧТоварыЕдиницаИзмеренияНачалоВыбора(ТекДанные.Номенклатура, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыЕдиницаИзмеренияПоЗаказуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	уатОбщегоНазначенияКлиент.ТЧТоварыЕдиницаИзмеренияНачалоВыбора(Элементы.Заказы.ТекущиеДанные.Номенклатура,
		ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыКоличествоПриИзменении(Элемент)
	
	ТекДанные = Элементы.Заказы.ТекущиеДанные;
	СтруктураПоиска = Новый Структура("ЗаказГрузоотправителя, Номенклатура, ЕдиницаИзмерения, ЕдиницаИзмеренияПоЗаказу, Количество",
	                  ТекДанные.ЗаказГрузоотправителя, ТекДанные.Номенклатура,
	                  ТекДанные.ЕдиницаИзмерения,      ТекДанные.ЕдиницаИзмеренияПоЗаказу,
	                  мБуфСтрока.Количество);
	  
	НайдСтроки = Объект.Заказы.НайтиСтроки(СтруктураПоиска);
	Если НайдСтроки.Количество() = 0 Тогда
		ТекДанные.Количество = мБуфСтрока.Количество;
	Иначе
		Для Каждого ТекЭлем Из НайдСтроки Цикл
			Если ТекЭлем.ТипТочкиМаршрута <> ТекДанные.ТипТочкиМаршрута Тогда
				ТекЭлем.Количество = ТекДанные.Количество;
				ОбновитьГрузовыеПараметрыЗаказов(ТекЭлем);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ОбновитьГрузовыеПараметрыЗаказов(ТекДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыСтоянкаПриИзменении(Элемент)
	
	ПересчитатьВремяВСтроке(Элементы.Заказы.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыОжиданиеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Заказы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	уатЗащищенныеФункцииСервер.КонтрольВводаВремени(ТекущиеДанные.Ожидание);
	
	ПересчитатьВремяВСтроке(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыВремяПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Заказы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	уатЗащищенныеФункцииСервер.КонтрольВводаВремени(ТекущиеДанные.Время);
	
	ПересчитатьВремяВСтроке(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыПрибытиеПланПриИзменении(Элемент)
	
	ПересчитатьВремяВСтроке(Элементы.Заказы.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыПрибытиеПланВремяПриИзменении(Элемент)
	// Стандартно очистка времени вызывает также очистку всей даты, поэтому здесь обходим это поведение
	ТекСтрока = Элементы.Заказы.ТекущиеДанные;
	Если ТекСтрока.ПрибытиеПлан = '00010101' И ТекВремяСтроки.ПрибытиеПлан <> '00010101' Тогда
		ТекСтрока.ПрибытиеПлан = НачалоДня(ТекВремяСтроки.ПрибытиеПлан);
	КонецЕсли;
	
	ЗаказыПрибытиеПланПриИзменении(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыУбытиеПланПриИзменении(Элемент)
	
	ПересчитатьВремяВСтроке(Элементы.Заказы.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыУбытиеПланВремяПриИзменении(Элемент)
	// Стандартно очистка времени вызывает также очистку всей даты, поэтому здесь обходим это поведение
	ТекСтрока = Элементы.Заказы.ТекущиеДанные;
	Если ТекСтрока.УбытиеПлан = '00010101' И ТекВремяСтроки.УбытиеПлан <> '00010101' Тогда
		ТекСтрока.УбытиеПлан = НачалоДня(ТекВремяСтроки.УбытиеПлан);
	КонецЕсли;
	
	ЗаказыУбытиеПланПриИзменении(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыВесБруттоПриИзменении(Элемент)
	
	ТекДанные = Элементы.Заказы.ТекущиеДанные;
	СтруктураПоиска = Новый Структура("ЗаказГрузоотправителя, Номенклатура, ЕдиницаИзмерения, ЕдиницаИзмеренияПоЗаказу, Количество",
	                  ТекДанные.ЗаказГрузоотправителя, ТекДанные.Номенклатура,
	                  ТекДанные.ЕдиницаИзмерения, ТекДанные.ЕдиницаИзмеренияПоЗаказу,
	                  ТекДанные.Количество);
	  
	НайдСтроки = Объект.Заказы.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого ТекЭлем Из НайдСтроки Цикл
		Если Не ТекЭлем.ТипТочкиМаршрута = ТекДанные.ТипТочкиМаршрута Тогда
			ТекЭлем.ВесБрутто = ТекДанные.ВесБрутто;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыОбъемПриИзменении(Элемент)
	
	ТекДанные = Элементы.Заказы.ТекущиеДанные;
	СтруктураПоиска = Новый Структура("ЗаказГрузоотправителя, Номенклатура, ЕдиницаИзмерения, ЕдиницаИзмеренияПоЗаказу, Количество",
	                  ТекДанные.ЗаказГрузоотправителя, ТекДанные.Номенклатура,
	                  ТекДанные.ЕдиницаИзмерения, ТекДанные.ЕдиницаИзмеренияПоЗаказу,
	                  ТекДанные.Количество);
	  
	НайдСтроки = Объект.Заказы.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого ТекЭлем Из НайдСтроки Цикл
		Если Не ТекЭлем.ТипТочкиМаршрута = ТекДанные.ТипТочкиМаршрута Тогда
			ТекЭлем.Объем = ТекДанные.Объем;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыКоличествоМестПриИзменении(Элемент)
	
	ТекДанные = Элементы.Заказы.ТекущиеДанные;
	СтруктураПоиска = Новый Структура("ЗаказГрузоотправителя, Номенклатура, ЕдиницаИзмерения, ЕдиницаИзмеренияПоЗаказу, Количество",
	                  ТекДанные.ЗаказГрузоотправителя, ТекДанные.Номенклатура,
	                  ТекДанные.ЕдиницаИзмерения, ТекДанные.ЕдиницаИзмеренияПоЗаказу,
	                  ТекДанные.Количество);
	  
	НайдСтроки = Объект.Заказы.НайтиСтроки(СтруктураПоиска);
	
	Для Каждого ТекЭлем Из НайдСтроки Цикл
		Если Не ТекЭлем.ТипТочкиМаршрута = ТекДанные.ТипТочкиМаршрута Тогда
			ТекЭлем.КоличествоМест = ТекДанные.КоличествоМест;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Заглушка = Истина;
	//уатЗащищенныеФункцииКлиент.ДиалогВыбораГруза(Элемент,Элементы.Заказы.ТекущиеДанные.Номенклатура,Элемент,СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Заказы.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);

	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.Количество) тогда
		СтрокаТабличнойЧасти.Количество = 1;
	КонецЕсли;
	
	ОбновитьТипыЗначенийСтрокЗаказов();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыТерминалНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Заказы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Отбор", Новый Структура("Владелец", ТекущиеДанные.Пункт));
	
	ОткрытьФорму("Справочник.уатТерминалы.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыТерминалАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Заказы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыПолученияДанных.Отбор.Вставить("Владелец", ТекущиеДанные.Пункт);
	
	ДанныеВыбора = ПолучитьСписокВыбораТерминалов(ПараметрыПолученияДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыТерминалОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.Заказы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыПолученияДанных.Отбор.Вставить("Владелец", ТекущиеДанные.Пункт);
	
	ДанныеВыбора = ПолучитьСписокВыбораТерминалов(ПараметрыПолученияДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыПунктПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Заказы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТипТС	 = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(Объект.ТС, "ТипТС");
	ЭтоГараж = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(ТекущиеДанные.Пункт, "Гараж");
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ЗаказГрузоотправителя) И ЭтоГараж <> Неопределено И НЕ ЭтоГараж Тогда
		ТекущиеДанные.СтоянкаИзПункта = уатЗащищенныеФункцииСервер_уэ.ПолучитьВремяСтоянкиВПункте(ТекущиеДанные.Пункт, ТипТС);
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.ЗаказГрузоотправителя) Тогда
		ТекущиеДанные.СтоянкаИзПункта = уатЗащищенныеФункцииСервер_уэ.ПолучитьВремяСтоянкиВПункте(ТекущиеДанные.Пункт, ТипТС);
	Иначе 
		ТекущиеДанные.СтоянкаИзПункта = 0;
	КонецЕсли;
	
	ПересчитатьПлановоеВремя();
	ЗаказыИзменитьДатыВШапке();
	РассчитатьМаршрутныеПоказатели();
	ОбновитьНадписьИтоги();
	ОбновитьПиктограммыПрисоединенныхФайлов();
	
	Модифицированность = Истина;
	
	РасстоянияТЧЗаказы(Неопределено);
	ОбновитьДанныеНаПланировщике();
	РассчитатьПоказателиСервер();
	ОбновитьДинамическиеПоля();
	ОбновитьНадписьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыНадписьДопВыработкаНажатие(Элемент, СтандартнаяОбработка)
	ТекСтрока = Элементы.Заказы.ТекущиеДанные;
	СтандартнаяОбработка = Ложь;
	
	Если АвторизованВнешнийПользователь
		И УровеньДоступаКРасходам = ПредопределенноеЗначение("Перечисление.уатУровеньДоступаКУслугам.РедактированиеЗапрещено") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ИмяДокумента", "уатМаршрутныйЛист");
	ПараметрыОткрытия.Вставить("ТолькоПросмотр", Элементы.ГруппаШапка.ТолькоПросмотр);
	КоличДопВыработки = 5;
	Для Сч = 1 По КоличДопВыработки Цикл
		ПараметрыОткрытия.Вставить("СпецРабота" + Сч, ТекСтрока["ПараметрВыработки" + Сч]);
		ПараметрыОткрытия.Вставить("КоличествоСпецРаботы" + Сч, ТекСтрока["Выработка" + Сч]);
	КонецЦикла;
	Если ЗначениеЗаполнено(Объект.ТС) Тогда
		ПараметрыОткрытия.Вставить("ТС", Объект.ТС);
	КонецЕсли;
	Если ПараметрыОткрытия.ТолькоПросмотр Тогда
		Оповещение = Неопределено;
	Иначе
		ДопПараметры = Новый Структура("ИмяТаблицы", "Заказы");
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияФормыРедактированияДопВыработки", ЭтотОбъект, ДопПараметры);
	КонецЕсли;
	
	ОткрытьФорму("Документ.уатПутевойЛист.Форма.ФормаРедактированияСпецРабот", ПараметрыОткрытия, ЭтотОбъект,,,, Оповещение);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_Заказы1

&НаКлиенте
Процедура Заказы1ПриИзменении(Элемент)
	
	УстановитьДанныеСтрокОдногоПункта(Элементы.Заказы1.ТекущиеДанные);
	
	ПересчитатьПлановоеВремя();
	ЗаказыИзменитьДатыВШапке();
	ОбновитьДанныеНаПланировщике();
	РассчитатьПоказателиСервер();
	ОбновитьДинамическиеПоля();
	ОбновитьНадписьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура Заказы1УстановитьПараметрыЯчейки(Элемент)
	
	ТекущийЭлемент_Имя = Элемент.ТекущийЭлемент.Имя;
	
	Если Объект.Заказы.Индекс(Элемент.ТекущиеДанные) = Объект.Заказы.Количество()-1 Тогда
		Если ТекущийЭлемент_Имя = "Заказы1Расстояние" ИЛИ ТекущийЭлемент_Имя = "Заказы1Время" Тогда
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Истина;
		КонецЕсли;
	Иначе 
		Если ТекущийЭлемент_Имя = "Заказы1Расстояние" ИЛИ ТекущийЭлемент_Имя = "Заказы1Время" Тогда
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// Настройка доступа к ячейкам для внешнего пользователя.
	Если АвторизованВнешнийПользователь Тогда
		Если ТекущийЭлемент_Имя = "Заказы1Пункт" ИЛИ ТекущийЭлемент_Имя = "Заказы1ТипТочкиМаршрута"
			ИЛИ ТекущийЭлемент_Имя = "Заказы1Время"	ИЛИ ТекущийЭлемент_Имя = "Заказы1Расстояние"
			ИЛИ ТекущийЭлемент_Имя = "Заказы1Стоянка" ИЛИ ТекущийЭлемент_Имя = "Заказы1Ожидание"
			ИЛИ ТекущийЭлемент_Имя = "Заказы1Контрагент" ИЛИ ТекущийЭлемент_Имя = "Заказы1ПричинаЗакрытияЗаказа"
			ИЛИ ТекущийЭлемент_Имя = "Заказы1СтоянкаИзПункта" ИЛИ ТекущийЭлемент_Имя = "Заказы1Номенклатура"
			ИЛИ ТекущийЭлемент_Имя = "Заказы1Количество" ИЛИ ТекущийЭлемент_Имя = "Заказы1ЕдиницаИзмерения"
			ИЛИ ТекущийЭлемент_Имя = "Заказы1ПрибытиеПлан" ИЛИ ТекущийЭлемент_Имя = "Заказы1ПрибытиеПланВремя"
			ИЛИ ТекущийЭлемент_Имя = "Заказы1УбытиеПлан" ИЛИ ТекущийЭлемент_Имя = "Заказы1УбытиеПланВремя"
			ИЛИ ТекущийЭлемент_Имя = "Заказы1ВесБрутто" ИЛИ ТекущийЭлемент_Имя = "Заказы1Объем"
			ИЛИ ТекущийЭлемент_Имя = "Заказы1КоличествоМест" ИЛИ ТекущийЭлемент_Имя = "Заказы1Рекламация"
			ИЛИ ТекущийЭлемент_Имя = "Заказы1ДопВыработка" Тогда
			
			Элемент.ТекущийЭлемент.ТолькоПросмотр = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Заказы1ПриАктивизацииЯчейки(Элемент)
	
	Если Не Элемент.ТекущаяСтрока = Неопределено Тогда 
		Заказы1УстановитьПараметрыЯчейки(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Заказы1ПередУдалением(Элемент, Отказ)
	
	ТекДанные = Элементы.Заказы1.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	Если Объект.Заказы.Количество() Тогда
		ПоследняяСтрока = Объект.Заказы[Объект.Заказы.Количество() - 1];
		ПоследняяСтрока.Время      = 0;
		ПоследняяСтрока.Расстояние = 0;
		Если флПланФакт Тогда
			ПоследняяСтрока.ВремяФакт      = 0;
			ПоследняяСтрока.РасстояниеФакт = 0;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Заказы1ПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекДанные = Элементы.Заказы1.ТекущиеДанные;
	
	Если НоваяСтрока И Не Копирование Тогда
		ТекДанные.Пункт = "";
		ТекДанные.ТипТочкиМаршрута = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Погрузка");
		ТекДанные.ЕдиницаИзмерения = ПредопределенноеЗначение("Справочник.ЕдиницыИзмерения.ПустаяСсылка");
		ТекДанные.ЕдиницаИзмеренияПоЗаказу = ПредопределенноеЗначение("Справочник.ЕдиницыИзмерения.ПустаяСсылка");
	КонецЕсли;
	
	ТекВремяСтроки = Неопределено;
	Если Не НоваяСтрока Тогда
		ТекВремяСтроки = Новый Структура;
		ТекВремяСтроки.Вставить("ПрибытиеПлан", ТекДанные.ПрибытиеПлан);
		ТекВремяСтроки.Вставить("УбытиеПлан",   ТекДанные.УбытиеПлан);
		ТекВремяСтроки.Вставить("ПрибытиеФакт", ТекДанные.ПрибытиеФакт);
		ТекВремяСтроки.Вставить("УбытиеФакт",   ТекДанные.УбытиеФакт);
		ТекВремяСтроки.Вставить("Время",        ТекДанные.Время);
		ТекВремяСтроки.Вставить("Ожидание",     ТекДанные.Ожидание);
		ТекВремяСтроки.Вставить("Стоянка",      ((ТекДанные.Стоянка - Цел(ТекДанные.Стоянка))*6000 + Цел(ТекДанные.Стоянка)*3600));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Заказы1Выбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле.Имя = "Заказы1НадписьДопВыработка" Тогда	
		Заказы1НадписьДопВыработкаНажатие(Неопределено, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Заказы1ВыполненПриИзменении(Элемент)
	
	ПриИзмененииФлагаЗаказыВыполнен(Элементы.Заказы1.ТекущиеДанные);
	ЗаказыИзменитьДатыВШапке();
	
КонецПроцедуры

&НаКлиенте
Процедура Заказы1РекламацияПриИзменении(Элемент)
	// Отключение обработчика для внешнего пользователя.
	Если АвторизованВнешнийПользователь Тогда
		Возврат;
	КонецЕсли;
	
	// Нужно проставить галку в строках с таким же ключом [Заказ, ГрузовоеМесто/Номенклатура]
	ТекСтрока = Элементы.Заказы1.ТекущиеДанные;
	флРекламация = ТекСтрока.Рекламация;
	мсвСтрок = Объект.Заказы.НайтиСтроки(Новый Структура("ЗаказГрузоотправителя, Номенклатура", ТекСтрока.ЗаказГрузоотправителя, ТекСтрока.Номенклатура));
	Для Каждого ТекСтрока Из мсвСтрок Цикл
		ТекСтрока.Рекламация = флРекламация;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура Заказы1НоменклатураПриИзменении(Элемент)
	
	ИндСтроки = Объект.Заказы.Индекс(Элементы.Заказы1.ТекущиеДанные);
	УстановитьЕдиницыИзмеренияПоНоменклатуре(ИндСтроки);
	ОбновитьТипыЗначенийСтрокЗаказов();
	
КонецПроцедуры

&НаКлиенте
Процедура Заказы1ЕдиницаИзмеренияПриИзменении(Элемент)
	ТекДанные = Элементы.Заказы1.ТекущиеДанные;
	ОбновитьГрузовыеПараметрыЗаказов(ТекДанные);
КонецПроцедуры

&НаКлиенте
Процедура Заказы1ЕдиницаИзмеренияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ИндТекДанных = Объект.Заказы.Индекс(Элементы.Заказы1.ТекущиеДанные);
	ТекДанные = Объект.Заказы.Получить(ИндТекДанных);
	уатОбщегоНазначенияКлиент.ТЧТоварыЕдиницаИзмеренияНачалоВыбора(ТекДанные.Номенклатура, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Заказы1КоличествоПриИзменении(Элемент)
	ТекДанные = Элементы.Заказы1.ТекущиеДанные;
	ОбновитьГрузовыеПараметрыЗаказов(ТекДанные);
КонецПроцедуры

&НаКлиенте
Процедура Заказы1ПунктПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Заказы1.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если (ЗначениеЗаполнено(Объект.ЭтапМаршрутизации) И уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(Объект.ЭтапМаршрутизации, "АлгоритмМаршрутизации") = 3) Тогда
		ТипТС = Новый Массив;
	Иначе
		ТипТС = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(Объект.ТС, "ТипТС");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Пункт) И ТипЗнч(ТекущиеДанные.Пункт) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда
		ЭтоГараж = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(ТекущиеДанные.Пункт, "Гараж");
	Иначе
		ЭтоГараж = Ложь;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекущиеДанные.ЗаказГрузоотправителя) И НЕ ЭтоГараж Тогда
		ТекущиеДанные.СтоянкаИзПункта = уатЗащищенныеФункцииСервер_уэ.ПолучитьВремяСтоянкиВПункте(ТекущиеДанные.Пункт, ТипТС);
	ИначеЕсли ЗначениеЗаполнено(ТекущиеДанные.ЗаказГрузоотправителя) Тогда
		ТекущиеДанные.СтоянкаИзПункта = уатЗащищенныеФункцииСервер_уэ.ПолучитьВремяСтоянкиВПункте(ТекущиеДанные.Пункт, ТипТС);
	Иначе 
		ТекущиеДанные.СтоянкаИзПункта = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Заказы1ОжиданиеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Заказы1.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	уатЗащищенныеФункцииСервер.КонтрольВводаВремени(ТекущиеДанные.Ожидание);
	
	ПересчитатьВремяВСтроке(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура Заказы1ВремяПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Заказы1.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	уатЗащищенныеФункцииСервер.КонтрольВводаВремени(ТекущиеДанные.Время);
	
	ПересчитатьВремяВСтроке(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура Заказы1СтоянкаПриИзменении(Элемент)
	
	ПересчитатьВремяВСтроке(Элементы.Заказы1.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура Заказы1ПрибытиеПланПриИзменении(Элемент)
	
	ПересчитатьВремяВСтроке(Элементы.Заказы1.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура Заказы1ПрибытиеПланВремяПриИзменении(Элемент)
	// Стандартно очистка времени вызывает также очистку всей даты, поэтому здесь обходим это поведение
	ТекСтрока = Элементы.Заказы1.ТекущиеДанные;
	Если ТекСтрока.ПрибытиеПлан = '00010101' И ТекВремяСтроки.ПрибытиеПлан <> '00010101' Тогда
		ТекСтрока.ПрибытиеПлан = НачалоДня(ТекВремяСтроки.ПрибытиеПлан);
	КонецЕсли;
	
	Заказы1ПрибытиеПланПриИзменении(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура Заказы1УбытиеПланПриИзменении(Элемент)
	
	ПересчитатьВремяВСтроке(Элементы.Заказы1.ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура Заказы1УбытиеПланВремяПриИзменении(Элемент)
	// Стандартно очистка времени вызывает также очистку всей даты, поэтому здесь обходим это поведение
	ТекСтрока = Элементы.Заказы1.ТекущиеДанные;
	Если ТекСтрока.УбытиеПлан = '00010101' И ТекВремяСтроки.УбытиеПлан <> '00010101' Тогда
		ТекСтрока.УбытиеПлан = НачалоДня(ТекВремяСтроки.УбытиеПлан);
	КонецЕсли;
	
	Заказы1УбытиеПланПриИзменении(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура Заказы1НадписьДопВыработкаНажатие(Элемент, СтандартнаяОбработка)
	ТекСтрока = Элементы.Заказы1.ТекущиеДанные;
	СтандартнаяОбработка = Ложь;
	
	Если АвторизованВнешнийПользователь
		И УровеньДоступаКРасходам = ПредопределенноеЗначение("Перечисление.уатУровеньДоступаКУслугам.РедактированиеЗапрещено") Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ИмяДокумента", "уатМаршрутныйЛист");
	ПараметрыОткрытия.Вставить("ТолькоПросмотр", Элементы.ГруппаШапка.ТолькоПросмотр);
	КоличДопВыработки = 5;
	Для Сч = 1 По КоличДопВыработки Цикл
		ПараметрыОткрытия.Вставить("СпецРабота" + Сч, ТекСтрока["ПараметрВыработки" + Сч]);
		ПараметрыОткрытия.Вставить("КоличествоСпецРаботы" + Сч, ТекСтрока["Выработка" + Сч]);
	КонецЦикла;
	Если ЗначениеЗаполнено(Объект.ТС) Тогда
		ПараметрыОткрытия.Вставить("ТС", Объект.ТС);
	КонецЕсли;
	Если ПараметрыОткрытия.ТолькоПросмотр Тогда
		Оповещение = Неопределено;
	Иначе
		ДопПараметры = Новый Структура("ИмяТаблицы", "Заказы1");
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияФормыРедактированияДопВыработки", ЭтотОбъект, ДопПараметры);
	КонецЕсли;
	
	ОткрытьФорму("Документ.уатПутевойЛист.Форма.ФормаРедактированияСпецРабот", ПараметрыОткрытия, ЭтотОбъект,,,, Оповещение);
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормы_Выработка

&НаКлиенте
Процедура ВыработкаТСиСотрудниковВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекСтрока = Элементы.ВыработкаТСиСотрудников.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле = Элементы.ВыработкаТСиСотрудниковРучнойВвод Тогда
		Если ТекСтрока.РучнойВвод Тогда
			ТекСтрока.РучнойВвод = Ложь;
			ОтобразитьСводнуюВыработку();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаТСиСотрудниковПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекСтрока = Элементы.ВыработкаТСиСотрудников.ТекущиеДанные;
	
	Если НоваяСтрока И НЕ Копирование Тогда
		ТекСтрока.РучнойВвод = Истина;
	КонецЕсли;
	
	ВыработкаУстановитьОграничениеТипаДопАналитики(ТекСтрока);
	ВыработкаУстановитьФорматРедактированияКоличества(ТекСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаТСиСотрудниковПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если НЕ ОтменаРедактирования Тогда
		СортироватьВыработку(2);
		ОтобразитьСводнуюВыработку();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаТСиСотрудниковПослеУдаления(Элемент)
	ОтобразитьСводнуюВыработку();
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаТСиСотрудниковПараметрВыработкиПриИзменении(Элемент)
	ТекСтрока = Элементы.ВыработкаТСиСотрудников.ТекущиеДанные;
	ТекСтрока.РучнойВвод = Истина;
	ТекСтрока.ДопАналитика = Неопределено;
	
	ТекСтрока.ПараметрВыработкиВременный = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрока.ПараметрВыработки, "Временный");
	Если ТекСтрока.ПараметрВыработкиВременный Тогда
		ТекСтрока.КоличествоПланФормат = Окр(ТекСтрока.КоличествоПланФормат, 2);
		ТекСтрока.КоличествоФактФормат = Окр(ТекСтрока.КоличествоФактФормат, 2);
		ТекСтрока.КоличествоПлан = уатОбщегоНазначения.уатВремяВСекунды(ТекСтрока.КоличествоПланФормат);
		ТекСтрока.КоличествоФакт = уатОбщегоНазначения.уатВремяВСекунды(ТекСтрока.КоличествоФактФормат);
	Иначе
		ТекСтрока.КоличествоПлан = ТекСтрока.КоличествоПланФормат;
		ТекСтрока.КоличествоФакт = ТекСтрока.КоличествоФактФормат;
	КонецЕсли;
	
	ВыработкаУстановитьОграничениеТипаДопАналитики(ТекСтрока);
	ВыработкаУстановитьФорматРедактированияКоличества(ТекСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаТСиСотрудниковКоличествоПланПриИзменении(Элемент)
	ТекСтрока = Элементы.ВыработкаТСиСотрудников.ТекущиеДанные;
	ТекСтрока.РучнойВвод = Истина;
	
	Если ТекСтрока.ПараметрВыработкиВременный Тогда
		уатЗащищенныеФункцииСервер.КонтрольВводаВремени(ТекСтрока.КоличествоПланФормат);
		ТекСтрока.КоличествоПлан = уатОбщегоНазначения.уатВремяВСекунды(ТекСтрока.КоличествоПланФормат);
	Иначе
		ТекСтрока.КоличествоПлан = ТекСтрока.КоличествоПланФормат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаТСиСотрудниковКоличествоФактПриИзменении(Элемент)
	ТекСтрока = Элементы.ВыработкаТСиСотрудников.ТекущиеДанные;
	ТекСтрока.РучнойВвод = Истина;
	
	Если ТекСтрока.ПараметрВыработкиВременный Тогда
		уатЗащищенныеФункцииСервер.КонтрольВводаВремени(ТекСтрока.КоличествоФактФормат);
		ТекСтрока.КоличествоФакт = уатОбщегоНазначения.уатВремяВСекунды(ТекСтрока.КоличествоФактФормат);
	Иначе
		ТекСтрока.КоличествоФакт = ТекСтрока.КоличествоФактФормат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаТСиСотрудниковЗаказГрузоотправителяПриИзменении(Элемент)
	Элементы.ВыработкаТСиСотрудников.ТекущиеДанные.РучнойВвод = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаТСиСотрудниковКонтрагентПриИзменении(Элемент)
	Элементы.ВыработкаТСиСотрудников.ТекущиеДанные.РучнойВвод = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаТСиСотрудниковВидПеревозкиПриИзменении(Элемент)
	Элементы.ВыработкаТСиСотрудников.ТекущиеДанные.РучнойВвод = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаТСиСотрудниковНаправлениеПеревозкиПриИзменении(Элемент)
	Элементы.ВыработкаТСиСотрудников.ТекущиеДанные.РучнойВвод = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаТСиСотрудниковМаршрутПриИзменении(Элемент)
	Элементы.ВыработкаТСиСотрудников.ТекущиеДанные.РучнойВвод = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаТСиСотрудниковОбъектСтроительстваПриИзменении(Элемент)
	Элементы.ВыработкаТСиСотрудников.ТекущиеДанные.РучнойВвод = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаТСиСотрудниковПодразделениеПриИзменении(Элемент)
	Элементы.ВыработкаТСиСотрудников.ТекущиеДанные.РучнойВвод = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаТСиСотрудниковДопАналитикаПриИзменении(Элемент)
	Элементы.ВыработкаТСиСотрудников.ТекущиеДанные.РучнойВвод = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаСводнаяВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекСтрока = Элементы.ВыработкаСводная.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле = Элементы.ВыработкаСводнаяРучнойВвод Тогда
		Если НЕ ТекСтрока.ТолькоПросмотр И ТекСтрока.РучнойВвод Тогда
			ТекСтрока.РучнойВвод = Ложь;
			ИзменитьСтрокуВыработкиПодробно(ТекСтрока);
		КонецЕсли;
	ИначеЕсли Поле = Элементы.ВыработкаСводнаяПараметрВыработки И ТекСтрока.ТолькоПросмотр Тогда
		ПоказатьЗначение(Неопределено, ТекСтрока.ПараметрВыработки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаСводнаяПередУдалением(Элемент, Отказ)
	ТекСтрока = Элементы.ВыработкаСводная.ТекущиеДанные;
	Если ТекСтрока.ТолькоПросмотр Тогда
		Отказ = Истина;
	КонецЕсли;
	
	УдаленнаяСтрокаВыработкиСводно = Новый Структура("ПараметрВыработки, ДопАналитика",
		ТекСтрока.ПараметрВыработки, ТекСтрока.ДопАналитика);
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаСводнаяПослеУдаления(Элемент)
	Если УдаленнаяСтрокаВыработкиСводно = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура;
	СтруктураПоиска.Вставить("ЗаказГрузоотправителя", ПредопределенноеЗначение("Документ.уатЗаказГрузоотправителя.ПустаяСсылка"));
	СтруктураПоиска.Вставить("ПараметрВыработки",     УдаленнаяСтрокаВыработкиСводно.ПараметрВыработки);
	СтруктураПоиска.Вставить("ДопАналитика",          УдаленнаяСтрокаВыработкиСводно.ДопАналитика);
	
	мсвСтрокиПодробно = Объект.ВыработкаТСиСотрудников.НайтиСтроки(СтруктураПоиска);
	Если мсвСтрокиПодробно.Количество() > 0 Тогда
		Объект.ВыработкаТСиСотрудников.Удалить(мсвСтрокиПодробно[0]);
	КонецЕсли;
	
	УдаленнаяСтрокаВыработкиСводно = Неопределено;
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаСводнаяПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекСтрока = Элементы.ВыработкаСводная.ТекущиеДанные;
	
	Если НоваяСтрока И НЕ Копирование Тогда
		ТекСтрока.РучнойВвод = Истина;
	КонецЕсли;
	
	ВыработкаУстановитьФорматРедактированияКоличества(ТекСтрока, Истина);
	ВыработкаСводнаяУстановитьОграничениеТипаДопАналитики(ТекСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаСводнаяПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если НЕ ОтменаРедактирования Тогда
		ТекСтрока = Элементы.ВыработкаСводная.ТекущиеДанные;
		ИзменитьСтрокуВыработкиПодробно(ТекСтрока);
		СортироватьВыработку();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СортироватьВыработку(СводноПодробно = Неопределено)
	Если СводноПодробно = Неопределено Тогда
		СортироватьВыработку(1);
		СортироватьВыработку(2);
		Возврат;
	КонецЕсли;
	Если СводноПодробно = 1 Тогда
		ВыработкаСводная.Сортировать("ТолькоПросмотр, ПараметрВыработки, ДопАналитика");
	ИначеЕсли СводноПодробно = 2 Тогда
		Объект.ВыработкаТСиСотрудников.Сортировать(
			"ЗаказГрузоотправителя, ПараметрВыработки, Контрагент, Подразделение"
			+ ", Маршрут, ОбъектСтроительства, ВидПеревозки, НаправлениеПеревозки, ДопАналитика");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаСводнаяПараметрВыработкиПриИзменении(Элемент)
	ТекСтрока = Элементы.ВыработкаСводная.ТекущиеДанные;
	ТекСтрока.РучнойВвод = Истина;
	ТекСтрока.ПараметрВыработкиВременный = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрока.ПараметрВыработки, "Временный");
	
	ВыработкаУстановитьФорматРедактированияКоличества(ТекСтрока, Истина);
	ВыработкаСводнаяУстановитьОграничениеТипаДопАналитики(ТекСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаСводнаяКоличествоПланПриИзменении(Элемент)
	ТекСтрока = Элементы.ВыработкаСводная.ТекущиеДанные;
	ТекСтрока.РучнойВвод = Истина;
	Если ТекСтрока.ПараметрВыработкиВременный Тогда
		уатЗащищенныеФункцииСервер.КонтрольВводаВремени(ТекСтрока.КоличествоПлан);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаСводнаяКоличествоФактПриИзменении(Элемент)
	ТекСтрока = Элементы.ВыработкаСводная.ТекущиеДанные;
	ТекСтрока.РучнойВвод = Истина;
	Если ТекСтрока.ПараметрВыработкиВременный Тогда
		уатЗащищенныеФункцииСервер.КонтрольВводаВремени(ТекСтрока.КоличествоФакт);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОтобразитьСводнуюВыработку()
	тблВыработкаСвернутая = Объект.ВыработкаТСиСотрудников.Выгрузить().Скопировать();
	
	// добавление выработки по всем оставшимся ПВ, используемым в МЛ
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	уатПараметрыВыработки.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.уатПараметрыВыработки КАК уатПараметрыВыработки
	|ГДЕ
	|	НЕ уатПараметрыВыработки.ПометкаУдаления
	|	И (уатПараметрыВыработки.ДействуетНаТСМЛ
	|			ИЛИ уатПараметрыВыработки.ДействуетНаСотрудниковМЛ)");
	ВыборкаДругиеПВ = Запрос.Выполнить().Выбрать();
	Пока ВыборкаДругиеПВ.Следующий() Цикл
		Если тблВыработкаСвернутая.Найти(ВыборкаДругиеПВ.Ссылка, "ПараметрВыработки") = Неопределено Тогда
			НоваяСтрока = тблВыработкаСвернутая.Добавить();
			НоваяСтрока.ПараметрВыработки = ВыборкаДругиеПВ.Ссылка;
		КонецЕсли;
	КонецЦикла;
	
	тблВыработкаСвернутая.Свернуть("РучнойВвод, ПараметрВыработки, ДопАналитика", "КоличествоПлан, КоличествоФакт");
	
	ВыработкаСводная.Загрузить(тблВыработкаСвернутая);
	
	Для Каждого ТекСтрока Из ВыработкаСводная Цикл
		ТекСтрока.ПараметрВыработкиВременный = ТекСтрока.ПараметрВыработки.Временный;
		ТекСтрока.ТолькоПросмотр = (ТекСтрока.ПараметрВыработки.СпособВводаЗначений
			= Перечисления.уатСпособыВводаЗначенийВыработкивМЛ_уэ.ВТабличнойЧасти);
			
		Если ТекСтрока.ПараметрВыработкиВременный Тогда
			ТекСтрока.КоличествоПлан = уатОбщегоНазначения.уатВремяВЧЧ_ММ(ТекСтрока.КоличествоПлан);
			ТекСтрока.КоличествоФакт = уатОбщегоНазначения.уатВремяВЧЧ_ММ(ТекСтрока.КоличествоФакт);
		КонецЕсли;
	КонецЦикла;
	
	ВыработкаСводная.Сортировать("ТолькоПросмотр, ПараметрВыработки, ДопАналитика");
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьСтрокуВыработкиПодробно(ТекСтрокиВыработкиСводно)
	мсвСтрокиВыработкиПодробно = Объект.ВыработкаТСиСотрудников.НайтиСтроки(
		Новый Структура("ПараметрВыработки, ЗаказГрузоотправителя",
		ТекСтрокиВыработкиСводно.ПараметрВыработки,
		ПредопределенноеЗначение("Документ.уатЗаказГрузоотправителя.ПустаяСсылка")));
		
	Если мсвСтрокиВыработкиПодробно.Количество() = 0 Тогда
		ТекСтрокаВыработкиПодробно = Объект.ВыработкаТСиСотрудников.Добавить();
		ТекСтрокаВыработкиПодробно.ПараметрВыработки = ТекСтрокиВыработкиСводно.ПараметрВыработки;
		ТекСтрокаВыработкиПодробно.ПараметрВыработкиВременный = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(
			ТекСтрокаВыработкиПодробно.ПараметрВыработки, "Временный");
	Иначе
		ТекСтрокаВыработкиПодробно = мсвСтрокиВыработкиПодробно[0];
	КонецЕсли;
	
	Если ТекСтрокиВыработкиСводно.ПараметрВыработкиВременный Тогда
		ТекСтрокаВыработкиПодробно.КоличествоПлан = уатОбщегоНазначения.уатВремяВСекунды(ТекСтрокиВыработкиСводно.КоличествоПлан);
		ТекСтрокаВыработкиПодробно.КоличествоФакт = уатОбщегоНазначения.уатВремяВСекунды(ТекСтрокиВыработкиСводно.КоличествоФакт);
	Иначе
		ТекСтрокаВыработкиПодробно.КоличествоПлан = ТекСтрокиВыработкиСводно.КоличествоПлан;
		ТекСтрокаВыработкиПодробно.КоличествоФакт = ТекСтрокиВыработкиСводно.КоличествоФакт;
	КонецЕсли;
	ТекСтрокаВыработкиПодробно.КоличествоПланФормат = ТекСтрокиВыработкиСводно.КоличествоПлан;
	ТекСтрокаВыработкиПодробно.КоличествоФактФормат = ТекСтрокиВыработкиСводно.КоличествоФакт;
		
	ТекСтрокаВыработкиПодробно.РучнойВвод = ТекСтрокиВыработкиСводно.РучнойВвод;
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаСводнаяУстановитьОграничениеТипаДопАналитики(ТекСтрока)
	Если ТекСтрока.ПараметрВыработки = ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.КоличествоУпаковок") Тогда
		ТекОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.уатВидыУпаковки_уэ");
	ИначеЕсли ТекСтрока.ПараметрВыработки = ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.КоличествоКонтейнеров") Тогда
		ТекОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.уатТипыКонтейнеров_уэ");
	ИначеЕсли ТекСтрока.ПараметрВыработки = ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.КоличествоТочекПоТипуПункта") Тогда
		ТекОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.уатТипыПунктов");
	ИначеЕсли ТекСтрока.ПараметрВыработки = ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.КоличествоТочекПоВидуОперации") Тогда
		ТекОграничениеТипа = Новый ОписаниеТипов("ПеречислениеСсылка.уатТипыТочекМаршрута");
	ИначеЕсли ТекСтрока.ПараметрВыработки = ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.СкладскаяОбработка") Тогда
		ТекОграничениеТипа = Новый ОписаниеТипов("ПеречислениеСсылка.уатВидыСкладскихОпераций_уэ");
	Иначе
		ТекОграничениеТипа = Новый ОписаниеТипов;
	КонецЕсли;
	
	Элементы.ВыработкаСводнаяДопАналитика.ОграничениеТипа = ТекОграничениеТипа;
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаУстановитьОграничениеТипаДопАналитики(ТекСтрока)
	Если ТекСтрока.ПараметрВыработки = ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.КоличествоУпаковок") Тогда
		ТекОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.уатВидыУпаковки_уэ");
	ИначеЕсли ТекСтрока.ПараметрВыработки = ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.КоличествоКонтейнеров") Тогда
		ТекОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.уатТипыКонтейнеров_уэ");
	ИначеЕсли ТекСтрока.ПараметрВыработки = ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.КоличествоТочекПоТипуПункта") Тогда
		ТекОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.уатТипыПунктов");
	ИначеЕсли ТекСтрока.ПараметрВыработки = ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.КоличествоТочекПоВидуОперации") Тогда
		ТекОграничениеТипа = Новый ОписаниеТипов("ПеречислениеСсылка.уатТипыТочекМаршрута");
	ИначеЕсли ТекСтрока.ПараметрВыработки = ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.СкладскаяОбработка") Тогда
		ТекОграничениеТипа = Новый ОписаниеТипов("ПеречислениеСсылка.уатВидыСкладскихОпераций_уэ");
	Иначе
		ТекОграничениеТипа = Новый ОписаниеТипов;
	КонецЕсли;
	
	Элементы.ВыработкаТСиСотрудниковДопАналитика.ОграничениеТипа = ТекОграничениеТипа;
КонецПроцедуры

&НаКлиенте
Процедура ВыработкаУстановитьФорматРедактированияКоличества(ТекСтрока, флСводная = Ложь)
	ФорматВремя = "ЧДЦ=2; ЧРД=:";
	ФорматЧисло = "ЧДЦ=3";
	ИмяЭлементаТЧ = ?(флСводная, "ВыработкаСводная", "ВыработкаТСиСотрудников");
	
	Если ТекСтрока.ПараметрВыработкиВременный Тогда
		Элементы[ИмяЭлементаТЧ + "КоличествоПлан"].ФорматРедактирования = ФорматВремя;
		Элементы[ИмяЭлементаТЧ + "КоличествоФакт"].ФорматРедактирования = ФорматВремя;
	Иначе
		Элементы[ИмяЭлементаТЧ + "КоличествоПлан"].ФорматРедактирования = ФорматЧисло;
		Элементы[ИмяЭлементаТЧ + "КоличествоФакт"].ФорматРедактирования = ФорматЧисло;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьНадписьЗаказыДопВыработка()
	
	Для Каждого ТекПункт Из ЗаказыДерево.ПолучитьЭлементы() Цикл 
		Для Каждого ТекЗаказ Из ТекПункт.ПолучитьЭлементы() Цикл 
			НадписьДопВыработка = "";
				
			Для Сч = 1 По ТекЗаказ.ДопВыработкаПараметры.Количество() Цикл
				ТекПараметрВыработки = ТекЗаказ.ДопВыработкаПараметры[Сч-1].Значение;
				ТекВыработка = ТекЗаказ.ДопВыработкаКоличество[Сч-1].Значение;
				
				Если ЗначениеЗаполнено(ТекВыработка) Тогда 
					Если ТекПараметрВыработки.ОтображениеВВидеФлага Тогда
						ТекНадписьДопВыработка = ?(ТекВыработка = 0, "Нет", "Да");
					ИначеЕсли ТекПараметрВыработки.Временный Тогда
						ТекНадписьДопВыработка = Формат(ТекВыработка, "ЧДЦ=2; ЧРД=:; ЧГ=");
					Иначе
						ТекНадписьДопВыработка = Формат(ТекВыработка, "ЧЦ=7; ЧДЦ=1");
					КонецЕсли;
					
					НадписьДопВыработка = НадписьДопВыработка + " / " + ТекНадписьДопВыработка;
				КонецЕсли;
			КонецЦикла;
				
			Если НадписьДопВыработка = "" Тогда 
				ТекЗаказ.НадписьДопВыработка = "Редактировать";
			Иначе
				ТекЗаказ.НадписьДопВыработка = Сред(НадписьДопВыработка, 4);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	КоличДопВыработки = 5;
	Для Каждого ТекСтрока Из Объект.Заказы Цикл 
		НадписьДопВыработка = "";
				
		Для Сч = 1 По КоличДопВыработки Цикл
			ТекПараметрВыработки = ТекСтрока["ПараметрВыработки" + Сч];
			ТекВыработка = ТекСтрока["Выработка" + Сч];
			
			Если ЗначениеЗаполнено(ТекВыработка) Тогда 
				Если ТекПараметрВыработки.ОтображениеВВидеФлага Тогда
					ТекНадписьДопВыработка = ?(ТекВыработка = 0, "Нет", "Да");
				ИначеЕсли ТекПараметрВыработки.Временный Тогда
					ТекНадписьДопВыработка = Формат(ТекВыработка, "ЧДЦ=2; ЧРД=:; ЧГ=");
				Иначе
					ТекНадписьДопВыработка = Формат(ТекВыработка, "ЧЦ=7; ЧДЦ=1");
				КонецЕсли;
				
				НадписьДопВыработка = НадписьДопВыработка + " / " + ТекНадписьДопВыработка;
			КонецЕсли;
		КонецЦикла;
			
		Если НадписьДопВыработка = "" Тогда 
			ТекСтрока.НадписьДопВыработка = "Редактировать";
		Иначе
			ТекСтрока.НадписьДопВыработка = Сред(НадписьДопВыработка, 4);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормы_Доходы

&НаКлиенте
Процедура ОказываемыеУслугиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ОказываемыеУслуги.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле = Элементы.ОказываемыеУслугиТариф Тогда
		ПоказатьЗначение(Неопределено, ТекущиеДанные.Тариф);
		
	ИначеЕсли Поле = Элементы.ОказываемыеУслугиТарифПараметрВыработки Тогда
		ПоказатьЗначение(Неопределено, ТекущиеДанные.ПараметрВыработки);
		
	ИначеЕсли Поле = Элементы.ОказываемыеУслугиРучнойВвод Тогда
		ТекущиеДанные.РучнойВвод = НЕ ТекущиеДанные.РучнойВвод;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОказываемыеУслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекСтрока = Элементы.ОказываемыеУслуги.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		ТекСтрока.РучнойВвод = Истина;
		Если НЕ Копирование Тогда
			ТекСтрока.СтатьяДоходов = ПредопределенноеЗначение("Справочник.уатСтатьиДоходов.ОсновнаяСтатьяДоходов");
			ТекСтрока.УчитыватьНДС     = ПолучитьПраваИНастройкиПользователя(Объект.Организация, "УчитыватьНДС");
			ТекСтрока.СуммаВключаетНДС = ПолучитьПраваИНастройкиПользователя(Объект.Организация, "СуммаВключаетНДС");
			
			Если ТекСтрока.УчитыватьНДС Тогда
				ТекСтрока.СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
					ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнаяСтавкаНДС");
			КонецЕсли;
				
			ДанныеВалютыРеглУчета = ПолучитьДанныеВалютыРеглУчета();
			ТекСтрока.Валюта      = ДанныеВалютыРеглУчета.Валюта;
		КонецЕсли;
		ОбновитьПредставлениеНДСвТЧ("Доходы", ТекСтрока);
	КонецЕсли;
	
	мсвПараметрыВыбора = Новый Массив();
	мсвПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", ПолучитьСписокЗаказовМЛ()));
	Элементы.ОказываемыеУслугиЗаказНаТС.ПараметрыВыбора = Новый ФиксированныйМассив(мсвПараметрыВыбора);
	
	УстановитьФорматРедактированияКоличествоВыработкиОказ();
	
	ДанныеСтрокиУслуги = Новый Структура("Валюта", ТекСтрока.Валюта);
	
КонецПроцедуры

&НаКлиенте
Процедура ОказываемыеУслугиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	РассчитатьСуммуДокумента();
	ВывестиСуммовыеИтогиДокумента();
	
	ОбновитьПараметрВыработкиВременныйОказ();
	ОбновитьВсегоВТЧОказываемыеУслуги();
	ОбновитьПредставлениеНДСвТЧ("Доходы");
КонецПроцедуры

&НаКлиенте
Процедура ОказываемыеУслугиПослеУдаления(Элемент)
	ОбновитьПараметрВыработкиВременныйОказ();
	ОбновитьВсегоВТЧОказываемыеУслуги();
	РассчитатьСуммуДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ОказываемыеУслугиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура")
		И ВыбранноеЗначение.Свойство("ТаблицаРаспределения")
		И ВыбранноеЗначение.ИмяТЧ = "Доходы" Тогда
		
		ДопПараметры = Новый Структура("ВыбранноеЗначение", ВыбранноеЗначение);
		
		Если Объект.Доходы.Количество() > 0 Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ОказываемыеУслугиОбработкаВыбораВопрос", ЭтотОбъект, ДопПараметры);
			ТекстНСТР = НСтр("en='Delete unassigned lines?';ru='Удалить нераспределенные строки?'");
			ПоказатьВопрос(ОписаниеОповещения, ТекстНСТР, РежимДиалогаВопрос.ДаНетОтмена,,КодВозвратаДиалога.Да);
		Иначе
			ОказываемыеУслугиОбработкаВыбораЗавершение(ДопПараметры);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОказываемыеУслугиНоменклатураПриИзменении(Элемент)
	ТекСтрокаТабличнойЧасти = Элементы.ОказываемыеУслуги.ТекущиеДанные;
	ТекСтрокаТабличнойЧасти.Содержание = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрокаТабличнойЧасти.Номенклатура, "НаименованиеПолное");
	
	Если ТекСтрокаТабличнойЧасти.УчитыватьНДС Тогда
		ТекСтрокаТабличнойЧасти.СтавкаНДС = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрокаТабличнойЧасти.Номенклатура, "СтавкаНДС");
	Иначе
		ТекСтрокаТабличнойЧасти.СтавкаНДС = Неопределено;
	КонецЕсли;
	
	ТекСтрокаТабличнойЧасти.Тариф = Неопределено;
	ТекСтрокаТабличнойЧасти.Цена = 0;
	ТекСтрокаТабличнойЧасти.Количество = 0;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрокаТабличнойЧасти, "Факт", Ложь);
	
	ТекСтрокаТабличнойЧасти.СтатьяДоходов = уатОбщегоНазначенияСервер.СтатьяДоходовНоменклатуры(ТекСтрокаТабличнойЧасти.Номенклатура);
	
	УстановитьФлагРучногоРедактирования(ТекСтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура ОказываемыеУслугиЗаказНаТСПриИзменении(Элемент)
	ТекСтрокаТабличнойЧасти = Элементы.ОказываемыеУслуги.ТекущиеДанные;
	
	ТекДоговор = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрокаТабличнойЧасти.ЗаказНаТС, "ДоговорКонтрагента");
	
	СтруктураДанные = ПолучитьДанныеДоговорПриИзменении(Объект.Дата, ТекДоговор);
	
	Если ЗначениеЗаполнено(ТекДоговор) И ТекСтрокаТабличнойЧасти.Валюта <> СтруктураДанные.ВалютаРасчетов Тогда
		ТекСтрокаТабличнойЧасти.Валюта = СтруктураДанные.ВалютаРасчетов;
	КонецЕсли;
	
	УстановитьФлагРучногоРедактирования(ТекСтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура ОказываемыеУслугиКоличествоПриИзменении(Элемент)
	ТекСтрокаТабличнойЧасти = Элементы.ОказываемыеУслуги.ТекущиеДанные;
	Если ТекСтрокаТабличнойЧасти.ПараметрВыработкиВременный Тогда 
		уатЗащищенныеФункцииСервер.КонтрольВводаВремени(ТекСтрокаТабличнойЧасти.КоличествоВыработка);
		ТекСтрокаТабличнойЧасти.Количество = уатОбщегоНазначения.уатВремяВСекунды(ТекСтрокаТабличнойЧасти.КоличествоВыработка)/3600;
	Иначе
		ТекСтрокаТабличнойЧасти.Количество = ТекСтрокаТабличнойЧасти.КоличествоВыработка;
	КонецЕсли;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрокаТабличнойЧасти, "Факт", Ложь);
	
	УстановитьФлагРучногоРедактирования(ТекСтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура ОказываемыеУслугиЦенаПриИзменении(Элемент)
	ТекСтрокаТабличнойЧасти = Элементы.ОказываемыеУслуги.ТекущиеДанные;
	РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрокаТабличнойЧасти, "Факт", Ложь);
	УстановитьФлагРучногоРедактирования(ТекСтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура ОказываемыеУслугиСуммаПриИзменении(Элемент)
	ТекСтрокаТабличнойЧасти = Элементы.ОказываемыеУслуги.ТекущиеДанные;
	
	Если ТекСтрокаТабличнойЧасти.Количество <> 0 Тогда
		ТекСтрокаТабличнойЧасти.Цена = ТекСтрокаТабличнойЧасти.Сумма / ТекСтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	
	РассчитатьСуммуНДС(ТекСтрокаТабличнойЧасти, "Факт", Ложь);
	РассчитатьСуммуВсегоВстрокеТЧ(ТекСтрокаТабличнойЧасти, "Факт", Ложь);
	
	УстановитьФлагРучногоРедактирования(ТекСтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура ОказываемыеУслугиСтавкаНДСПриИзменении(Элемент)
	ТекСтрокаТабличнойЧасти = Элементы.ОказываемыеУслуги.ТекущиеДанные;
	РассчитатьСуммуНДС(ТекСтрокаТабличнойЧасти, "Факт", Ложь);
	РассчитатьСуммуВсегоВстрокеТЧ(ТекСтрокаТабличнойЧасти, "Факт", Ложь);
	
	УстановитьФлагРучногоРедактирования(ТекСтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура ОказываемыеУслугиСуммаНДСПриИзменении(Элемент)
	ТекСтрокаТабличнойЧасти = Элементы.ОказываемыеУслуги.ТекущиеДанные;
	РассчитатьСуммуВсегоВстрокеТЧ(ТекСтрокаТабличнойЧасти, "Факт", Ложь);
	
	УстановитьФлагРучногоРедактирования(ТекСтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура ОказываемыеУслугиВалютаПриИзменении(Элемент)
	УслугиПриИзмененииВалюты("ОказываемыеУслуги");
КонецПроцедуры

&НаКлиенте
Процедура ОказываемыеУслугиУчитыватьНДСПредставлениеПриИзменении(Элемент)
	УслугиПриИзмененииУчитыватьНДС("ОказываемыеУслуги");
КонецПроцедуры

&НаКлиенте
Процедура ОказываемыеУслугиСтатьяДоходовПриИзменении(Элемент)
	ТекСтрокаТабличнойЧасти = Элементы.ОказываемыеУслуги.ТекущиеДанные;
	УстановитьФлагРучногоРедактирования(ТекСтрокаТабличнойЧасти);
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормы_Затраты

&НаКлиенте
Процедура ПолучаемыеУслугиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПолучаемыеУслуги.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле = Элементы.ПолучаемыеУслугиТариф И ЗначениеЗаполнено(ТекущиеДанные.Тариф) Тогда
		ПоказатьЗначение(Неопределено, ТекущиеДанные.Тариф);
		
	ИначеЕсли Поле = Элементы.ПолучаемыеУслугиТарифПараметрВыработки Тогда
		ПоказатьЗначение(Неопределено, ТекущиеДанные.ПараметрВыработки);
		
	ИначеЕсли Поле = Элементы.ПолучаемыеУслугиРучнойВвод
		И (Не АвторизованВнешнийПользователь 
		Или УровеньДоступаКРасходам = ПредопределенноеЗначение("Перечисление.уатУровеньДоступаКУслугам.РедактированиеУслугРазрешено")) Тогда
		ТекущиеДанные.РучнойВвод = НЕ ТекущиеДанные.РучнойВвод;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучаемыеУслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекСтрока = Элементы.ПолучаемыеУслуги.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		ТекСтрока.РучнойВвод = Истина;
		ТекСтрока.СтатьяРасходов = ПредопределенноеЗначение("Справочник.уатСтатьиРасходов.ОсновнаяСтатьяРасходов");
		ТекСтрока.УчитыватьНДС     = ПолучитьПраваИНастройкиПользователя(Объект.Организация, "УчитыватьНДС");
		ТекСтрока.СуммаВключаетНДС = ПолучитьПраваИНастройкиПользователя(Объект.Организация, "СуммаВключаетНДС");
		
		Если ТекСтрока.УчитыватьНДС Тогда
			ТекСтрока.СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
				ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнаяСтавкаНДС");
		КонецЕсли;
			
		ДанныеВалютыРеглУчета = ПолучитьДанныеВалютыРеглУчета();
		ТекСтрока.Валюта      = ДанныеВалютыРеглУчета.Валюта;
		
		ОбновитьПредставлениеНДСвТЧ("Расходы", ТекСтрока);
		
		Если АвторизованВнешнийПользователь И ЗначениеЗаполнено(АвторизованныйКонтрагент) Тогда
			ТекСтрока.Контрагент = АвторизованныйКонтрагент;
		КонецЕсли;
	КонецЕсли;
	
	мсвПараметрыВыбора = Новый Массив();
	мсвПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", ПолучитьСписокЗаказовМЛ()));
	Элементы.ПолучаемыеУслугиЗаказНаТС.ПараметрыВыбора = Новый ФиксированныйМассив(мсвПараметрыВыбора);
	
	УстановитьФорматРедактированияКоличествоВыработкиПолуч();

	ДанныеСтрокиУслуги = Новый Структура("Валюта", ТекСтрока.Валюта);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучаемыеУслугиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	РассчитатьСуммуДокумента();
	ВывестиСуммовыеИтогиДокумента();
	
	ОбновитьПараметрВыработкиВременныйПолуч();
	ОбновитьВсегоВТЧПолучаемыеУслуги();
	ОбновитьПредставлениеНДСвТЧ("Расходы");
КонецПроцедуры

&НаКлиенте
Процедура ПолучаемыеУслугиПослеУдаления(Элемент)
	РассчитатьСуммуДокумента();
	ВывестиСуммовыеИтогиДокумента();
	
	ОбновитьПараметрВыработкиВременныйПолуч();
	ОбновитьВсегоВТЧПолучаемыеУслуги();
	ОбновитьПредставлениеНДСвТЧ("Расходы");
КонецПроцедуры

&НаКлиенте
Процедура ПолучаемыеУслугиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура")
		И ВыбранноеЗначение.Свойство("ТаблицаРаспределения")
		И ВыбранноеЗначение.ИмяТЧ = "Расходы" Тогда
		
		ДопПараметры = Новый Структура("ВыбранноеЗначение", ВыбранноеЗначение);
		
		Если Объект.Расходы.Количество() > 0 Тогда
			ОписаниеОповещения = Новый ОписаниеОповещения("ПолучаемыеУслугиОбработкаВыбораВопрос", ЭтотОбъект, ДопПараметры);
			ТекстНСТР = НСтр("en='Delete unassigned lines?';ru='Удалить нераспределенные строки?'");
			ПоказатьВопрос(ОписаниеОповещения, ТекстНСТР, РежимДиалогаВопрос.ДаНетОтмена,,КодВозвратаДиалога.Да);
		Иначе
			ПолучаемыеУслугиОбработкаВыбораЗавершение(ДопПараметры);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПолучаемыеУслугиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если АвторизованВнешнийПользователь
		И УровеньДоступаКРасходам = ПредопределенноеЗначение("Перечисление.уатУровеньДоступаКУслугам.РедактированиеЗапрещено") Тогда
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПолучаемыеУслугиПередНачаломИзменения(Элемент, Отказ)
	ТекДанныеСтроки = Элементы.ПолучаемыеУслуги.ТекущиеДанные;
	Если АвторизованВнешнийПользователь Тогда
		Если ТекДанныеСтроки.Контрагент <> АвторизованныйКонтрагент Тогда
			Отказ = Истина;
		ИначеЕсли УровеньДоступаКРасходам = ПредопределенноеЗначение("Перечисление.уатУровеньДоступаКУслугам.РедактированиеЗапрещено") Тогда
			Отказ = Истина;
		ИначеЕсли УровеньДоступаКРасходам = ПредопределенноеЗначение("Перечисление.уатУровеньДоступаКУслугам.РедактированиеСтрокРучногоВводаРазрешено") И Не ТекДанныеСтроки.РучнойВвод Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПолучаемыеУслугиПередУдалением(Элемент, Отказ)
	ТекДанныеСтроки = Элементы.ПолучаемыеУслуги.ТекущиеДанные;
	Если АвторизованВнешнийПользователь Тогда
		Если ТекДанныеСтроки.Контрагент <> АвторизованныйКонтрагент Тогда
			Отказ = Истина;
		ИначеЕсли УровеньДоступаКРасходам = ПредопределенноеЗначение("Перечисление.уатУровеньДоступаКУслугам.РедактированиеЗапрещено") Тогда
			Отказ = Истина;
		ИначеЕсли УровеньДоступаКРасходам = ПредопределенноеЗначение("Перечисление.уатУровеньДоступаКУслугам.РедактированиеСтрокРучногоВводаРазрешено") И Не ТекДанныеСтроки.РучнойВвод Тогда
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПолучаемыеУслугиНоменклатураПриИзменении(Элемент)
	ТекСтрокаТабличнойЧасти = Элементы.ПолучаемыеУслуги.ТекущиеДанные;
	ТекСтрокаТабличнойЧасти.Содержание = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрокаТабличнойЧасти.Номенклатура, "НаименованиеПолное");
	
	Если ТекСтрокаТабличнойЧасти.УчитыватьНДС Тогда
		ТекСтрокаТабличнойЧасти.СтавкаНДС = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрокаТабличнойЧасти.Номенклатура, "СтавкаНДС");
	Иначе
		ТекСтрокаТабличнойЧасти.СтавкаНДС = Неопределено;
	КонецЕсли;
		
	ТекСтрокаТабличнойЧасти.Тариф = Неопределено;
	ТекСтрокаТабличнойЧасти.Цена = 0;
	ТекСтрокаТабличнойЧасти.Количество = 0;
	РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрокаТабличнойЧасти,, Истина);
	
	ТекСтрокаТабличнойЧасти.СтатьяРасходов = уатОбщегоНазначенияСервер.СтатьяРасходовНоменклатуры(ТекСтрокаТабличнойЧасти.Номенклатура);
	
	УстановитьФлагРучногоРедактирования(ТекСтрокаТабличнойЧасти, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПолучаемыеУслугиКонтрагентПриИзменении(Элемент)
	ТекСтрокаТабличнойЧасти = Элементы.ПолучаемыеУслуги.ТекущиеДанные;
	
	ТекСтрокаТабличнойЧасти.Тариф = Неопределено;
	ТекСтрокаТабличнойЧасти.Цена = 0;
	ТекСтрокаТабличнойЧасти.Количество = 0;
	РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрокаТабличнойЧасти,, Истина);
	
	ПриИзмененииКонтрагента(ТекСтрокаТабличнойЧасти, "Расходы");
	
	УстановитьФлагРучногоРедактирования(ТекСтрокаТабличнойЧасти, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПолучаемыеУслугиКонтрагентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("РегистрСведений.уатСведенияОКонтрагентах_уэ.Форма.ФормаВыбораПеревозчика",, Элемент,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучаемыеУслугиЗаказПеревозчикуПриИзменении(Элемент)
	ТекСтрокаТабличнойЧасти = Элементы.ПолучаемыеУслуги.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекСтрокаТабличнойЧасти.ЗаказПеревозчику) Тогда
		ТекСтрокаТабличнойЧасти.Контрагент = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(ТекСтрокаТабличнойЧасти.ЗаказПеревозчику, "Контрагент");
		ПолучаемыеУслугиКонтрагентПриИзменении(Неопределено);
		ТекСтрокаТабличнойЧасти.Договор = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(ТекСтрокаТабличнойЧасти.ЗаказПеревозчику, "ДоговорКонтрагента");
		ПолучаемыеУслугиДоговорПриИзменении(Неопределено);
		
		УстановитьФлагРучногоРедактирования(ТекСтрокаТабличнойЧасти, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПолучаемыеУслугиДоговорПриИзменении(Элемент)
	ТекСтрокаТабличнойЧасти = Элементы.ПолучаемыеУслуги.ТекущиеДанные;
	ПриИзмененииДоговора(ТекСтрокаТабличнойЧасти, "Расходы");
	УстановитьФлагРучногоРедактирования(ТекСтрокаТабличнойЧасти, Истина);
КонецПроцедуры  

&НаКлиенте
Процедура ПолучаемыеУслугиДоговорСоздание(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВидДоговораДоступныеЗначения = Новый Массив;
	
	мВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком");
	ВидДоговораДоступныеЗначения.Добавить(мВидДоговора);
	
	ТекСтрокаТабличнойЧасти = Элементы.ПолучаемыеУслуги.ТекущиеДанные;
	
	ПараметрыФормы = Новый Структура(); 
	ПараметрыФормы.Вставить("Владелец", ТекСтрокаТабличнойЧасти.Контрагент);
	ПараметрыФормы.Вставить("ВидДоговораДоступныеЗначения", ВидДоговораДоступныеЗначения);
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПолучаемыеУслугиКоличествоПриИзменении(Элемент)
	ТекСтрокаТабличнойЧасти = Элементы.ПолучаемыеУслуги.ТекущиеДанные;
	Если ТекСтрокаТабличнойЧасти.ПараметрВыработкиВременный Тогда 
		уатЗащищенныеФункцииСервер.КонтрольВводаВремени(ТекСтрокаТабличнойЧасти.КоличествоВыработка);
		ТекСтрокаТабличнойЧасти.Количество = уатОбщегоНазначения.уатВремяВСекунды(ТекСтрокаТабличнойЧасти.КоличествоВыработка)/3600;
	Иначе
		ТекСтрокаТабличнойЧасти.Количество = ТекСтрокаТабличнойЧасти.КоличествоВыработка;
	КонецЕсли;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрокаТабличнойЧасти, "Факт", Истина);
	
	УстановитьФлагРучногоРедактирования(ТекСтрокаТабличнойЧасти, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПолучаемыеУслугиЦенаПриИзменении(Элемент)
	ТекСтрокаТабличнойЧасти = Элементы.ПолучаемыеУслуги.ТекущиеДанные;
	РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрокаТабличнойЧасти, "Факт", Истина);
	УстановитьФлагРучногоРедактирования(ТекСтрокаТабличнойЧасти, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПолучаемыеУслугиСуммаПриИзменении(Элемент)
	ТекСтрокаТабличнойЧасти = Элементы.ПолучаемыеУслуги.ТекущиеДанные;
	
	Если ТекСтрокаТабличнойЧасти.Количество <> 0 Тогда
		ТекСтрокаТабличнойЧасти.Цена = ТекСтрокаТабличнойЧасти.Сумма / ТекСтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	
	РассчитатьСуммуНДС(ТекСтрокаТабличнойЧасти, "Факт", Истина);
	РассчитатьСуммуВсегоВстрокеТЧ(ТекСтрокаТабличнойЧасти, "Факт", Истина);
	
	УстановитьФлагРучногоРедактирования(ТекСтрокаТабличнойЧасти, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПолучаемыеУслугиСтавкаНДСПриИзменении(Элемент)
	ТекСтрокаТабличнойЧасти = Элементы.ПолучаемыеУслуги.ТекущиеДанные;
	Если флИспользоватьПлановыеУслуги Тогда
		РассчитатьСуммуНДС(ТекСтрокаТабличнойЧасти,, Истина);
		РассчитатьСуммуВсегоВстрокеТЧ(ТекСтрокаТабличнойЧасти,, Истина);
	Иначе
		РассчитатьСуммуНДС(ТекСтрокаТабличнойЧасти, "Факт", Истина);
		РассчитатьСуммуВсегоВстрокеТЧ(ТекСтрокаТабличнойЧасти, "Факт", Истина);
	КонецЕсли;
	
	УстановитьФлагРучногоРедактирования(ТекСтрокаТабличнойЧасти, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПолучаемыеУслугиКоличествоПланПриИзменении(Элемент)
	ТекСтрокаТабличнойЧасти = Элементы.ПолучаемыеУслуги.ТекущиеДанные;
	Если ТекСтрокаТабличнойЧасти.ПараметрВыработкиВременный Тогда 
		уатЗащищенныеФункцииСервер.КонтрольВводаВремени(ТекСтрокаТабличнойЧасти.КоличествоВыработкаПлан);
		ТекСтрокаТабличнойЧасти.КоличествоПлан = уатОбщегоНазначения.уатВремяВСекунды(ТекСтрокаТабличнойЧасти.КоличествоВыработкаПлан)/3600;
	Иначе
		ТекСтрокаТабличнойЧасти.КоличествоПлан = ТекСтрокаТабличнойЧасти.КоличествоВыработкаПлан;
	КонецЕсли;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрокаТабличнойЧасти, "План", Истина);
	
	УстановитьФлагРучногоРедактирования(ТекСтрокаТабличнойЧасти, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПолучаемыеУслугиЦенаПланПриИзменении(Элемент)
	ТекСтрокаТабличнойЧасти = Элементы.ПолучаемыеУслуги.ТекущиеДанные;
	РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрокаТабличнойЧасти, "План", Истина);
	УстановитьФлагРучногоРедактирования(ТекСтрокаТабличнойЧасти, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПолучаемыеУслугиСуммаПланПриИзменении(Элемент)
	ТекСтрокаТабличнойЧасти = Элементы.ПолучаемыеУслуги.ТекущиеДанные;
	
	Если ТекСтрокаТабличнойЧасти.КоличествоПлан <> 0 Тогда
		ТекСтрокаТабличнойЧасти.ЦенаПлан = ТекСтрокаТабличнойЧасти.СуммаПлан / ТекСтрокаТабличнойЧасти.КоличествоПлан;
	КонецЕсли;
	
	РассчитатьСуммуНДС(ТекСтрокаТабличнойЧасти, "План", Истина);
	РассчитатьСуммуВсегоВстрокеТЧ(ТекСтрокаТабличнойЧасти, "План", Истина);
	
	УстановитьФлагРучногоРедактирования(ТекСтрокаТабличнойЧасти, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПолучаемыеУслугиСуммаНДСПланПриИзменении(Элемент)
	ТекСтрокаТабличнойЧасти = Элементы.ПолучаемыеУслуги.ТекущиеДанные;
	РассчитатьСуммуВсегоВстрокеТЧ(ТекСтрокаТабличнойЧасти, "План", Истина);
	
	УстановитьФлагРучногоРедактирования(ТекСтрокаТабличнойЧасти, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПолучаемыеУслугиСуммаНДСПриИзменении(Элемент)
	ТекСтрокаТабличнойЧасти = Элементы.ПолучаемыеУслуги.ТекущиеДанные;
	Если флИспользоватьПлановыеУслуги Тогда
		РассчитатьСуммуВсегоВстрокеТЧ(ТекСтрокаТабличнойЧасти,, Истина);
	Иначе
		РассчитатьСуммуВсегоВстрокеТЧ(ТекСтрокаТабличнойЧасти, "Факт", Истина);
	КонецЕсли;
	
	УстановитьФлагРучногоРедактирования(ТекСтрокаТабличнойЧасти, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПолучаемыеУслугиВалютаПриИзменении(Элемент)
	УслугиПриИзмененииВалюты("ПолучаемыеУслуги");
КонецПроцедуры

&НаКлиенте
Процедура ПолучаемыеУслугиУчитыватьНДСПредставлениеПриИзменении(Элемент)
	УслугиПриИзмененииУчитыватьНДС("ПолучаемыеУслуги");
КонецПроцедуры

&НаКлиенте
Процедура ПолучаемыеУслугиСтатьяРасходовПриИзменении(Элемент)
	ТекСтрокаТабличнойЧасти = Элементы.ПолучаемыеУслуги.ТекущиеДанные;
	УстановитьФлагРучногоРедактирования(ТекСтрокаТабличнойЧасти);
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыЗарплата

&НаКлиенте
Процедура ЗарплатаСводнаяВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ОткрытьФормуСотрудника(Элементы.ЗарплатаСводная.ТекущиеДанные.Сотрудник, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаСводнаяПриАктивизацииСтроки(Элемент)
	ТекСтрока = Элементы.ЗарплатаСводная.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Элементы.Зарплата.ОтборСтрок = Новый ФиксированнаяСтруктура(Новый Структура("Сотрудник", Неопределено));
	Иначе
		Элементы.Зарплата.ОтборСтрок = Новый ФиксированнаяСтруктура(Новый Структура("Сотрудник", ТекСтрока.Сотрудник));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаСводнаяНачислятьЗарплатуПриИзменении(Элемент)
	ТекСтрокаЗП = Элементы.ЗарплатаСводная.ТекущиеДанные;
	
	// соотв. флаг расчета для сотрудника в шапке документа
	Если ТекСтрокаЗП.Сотрудник = Объект.Водитель1 Тогда
		Объект.НачислятьЗПВодителю1 = ТекСтрокаЗП.НачислятьЗарплату;
	ИначеЕсли ТекСтрокаЗП.Сотрудник = Объект.Водитель2 Тогда
		Объект.НачислятьЗПВодителю2 = ТекСтрокаЗП.НачислятьЗарплату;
	ИначеЕсли ТекСтрокаЗП.Сотрудник = Объект.Сотрудник1 Тогда
		Объект.НачислятьЗПСотруднику1 = ТекСтрокаЗП.НачислятьЗарплату;
	ИначеЕсли ТекСтрокаЗП.Сотрудник = Объект.Сотрудник2 Тогда
		Объект.НачислятьЗПСотруднику2 = ТекСтрокаЗП.НачислятьЗарплату;
	КонецЕсли;
	
	Если ТекСтрокаЗП.НачислятьЗарплату Тогда // перерасчет ЗП по сотруднику
		Отказ_ = Ложь;
		РасчетЗПсервер(Отказ_, ТекСтрокаЗП.Сотрудник);
		
	Иначе // удаляем предыдущие начисления по сотруднику, т.к. это в любом случае нужно сделать
		мЗП = Объект.Зарплата.НайтиСтроки(Новый Структура("Сотрудник", ТекСтрокаЗП.Сотрудник));
		Сч = Объект.Зарплата.Количество()-1;
		Пока Сч >= 0 Цикл
			ТекСтрока = Объект.Зарплата[Сч];
			Если ТекСтрока.Сотрудник = ТекСтрокаЗП.Сотрудник Тогда
				Объект.Зарплата.Удалить(Сч);
			КонецЕсли;
			Сч = Сч - 1;
		КонецЦикла;
		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура РасчетЗПсервер(Отказ, ТекСотрудник)
	Документы.уатМаршрутныйЛист.РасчетЗП(Объект, ТекСотрудник);
	ОтобразитьСводнуюЗП(ЭтотОбъект, ТекСотрудник);
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаПередНачаломИзменения(Элемент, Отказ)
	Если НЕ Элементы.Зарплата.ТекущиеДанные.РучнойВвод Тогда
		ТекстНСТР = НСтр("en='To edit the accrual is possible only for manual input and calculation type of ""Fixed amount""!';ru='Редактировать начисления можно только для ручного ввода и вида начисления ""Фиксированной суммой""!'");
		уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, Отказ,, СтатусСообщения.Внимание);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаПередУдалением(Элемент, Отказ)
	Если НЕ Элементы.Зарплата.ТекущиеДанные.РучнойВвод Тогда
		ТекстНСТР = НСтр("en='To edit the accrual is possible only for manual input and calculation type of ""Fixed amount""!';ru='Редактировать начисления можно только для ручного ввода и вида начисления ""Фиксированной суммой""!'");
		уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, Отказ,, СтатусСообщения.Внимание);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		ТекСтрока = Элементы.Зарплата.ТекущиеДанные;
		ТекСтрока.РучнойВвод = Истина;
		ТекСтрока.ВидНачисления = ПредопределенноеЗначение("ПланВидовРасчета.уатОсновныеНачисления.ФиксированнойСуммой");
		
		ТекСтрокаЗППоСотрудникам = Элементы.ЗарплатаСводная.ТекущиеДанные;
		Если ТекСтрокаЗППоСотрудникам <> Неопределено Тогда
			ТекСтрока.Сотрудник = ТекСтрокаЗППоСотрудникам.Сотрудник;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ТекСтрокаЗППоСотрудникам = Элементы.ЗарплатаСводная.ТекущиеДанные;
	мТекСотрудник = Неопределено;
	Если ТекСтрокаЗППоСотрудникам <> Неопределено Тогда
		мТекСотрудник = ТекСтрокаЗППоСотрудникам.Сотрудник;
	КонецЕсли;
	
	ОтобразитьСводнуюЗП(ЭтотОбъект, мТекСотрудник);
КонецПроцедуры

&НаКлиенте
Процедура ЗарплатаПослеУдаления(Элемент)
	ОтобразитьСводнуюЗП(ЭтотОбъект);
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОтобразитьСводнуюЗП(Форма, Сотрудник = "")
	Если Сотрудник = "" Тогда
		Форма.ЗарплатаСводная.Очистить();
		ОтобразитьСводнуюЗП(Форма, Форма.Объект.Водитель1);
		ОтобразитьСводнуюЗП(Форма, Форма.Объект.Водитель2);
		ОтобразитьСводнуюЗП(Форма, Форма.Объект.Сотрудник1);
		ОтобразитьСводнуюЗП(Форма, Форма.Объект.Сотрудник2);
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Сотрудник) Тогда
		Возврат;
	КонецЕсли;
	
	мСумма = 0;
	Для Каждого ТекСтрока Из Форма.Объект.Зарплата Цикл
		Если ТекСтрока.Сотрудник = Сотрудник Тогда
			мСумма = мСумма + ТекСтрока.Сумма;
		КонецЕсли;	
	КонецЦикла;
	
	мсвСтрок = Форма.ЗарплатаСводная.НайтиСтроки(Новый Структура("Сотрудник", Сотрудник));
	Если мсвСтрок.Количество() = 0 Тогда
		СтрПоиска = Форма.ЗарплатаСводная.Добавить();
		СтрПоиска.Сотрудник = Сотрудник;
	Иначе
		СтрПоиска = мсвСтрок[0];
	КонецЕсли;
	Если Сотрудник = Форма.Объект.Водитель1 Тогда
		СтрПоиска.НачислятьЗарплату = Форма.Объект.НачислятьЗПВодителю1;
	ИначеЕсли Сотрудник = Форма.Объект.Водитель2 Тогда
		СтрПоиска.НачислятьЗарплату = Форма.Объект.НачислятьЗПВодителю2;
	ИначеЕсли Сотрудник = Форма.Объект.Сотрудник1 Тогда
		СтрПоиска.НачислятьЗарплату = Форма.Объект.НачислятьЗПСотруднику1;
	ИначеЕсли Сотрудник = Форма.Объект.Сотрудник2 Тогда
		СтрПоиска.НачислятьЗарплату = Форма.Объект.НачислятьЗПСотруднику2;
	КонецЕсли;
	СтрПоиска.Сумма = мСумма;
КонецПроцедуры

&НаСервере
Процедура ИнициализацияЗП()
	мсвСотрудникиЗП = Новый Массив;
	Если ЗначениеЗаполнено(Объект.Водитель1) Тогда
		мсвСотрудникиЗП.Добавить(Объект.Водитель1);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Водитель2) Тогда
		мсвСотрудникиЗП.Добавить(Объект.Водитель2);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Сотрудник1) Тогда
		мсвСотрудникиЗП.Добавить(Объект.Сотрудник1);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Сотрудник2) Тогда
		мсвСотрудникиЗП.Добавить(Объект.Сотрудник2);
	КонецЕсли;
	
	// Удаление строк ЗП с сотрудниками, не содержащимися в шапке документа
	Сч = Объект.Зарплата.Количество()-1;
	Пока Сч >= 0 Цикл
		ТекСтрока = Объект.Зарплата[Сч];
		Если мсвСотрудникиЗП.Найти(ТекСтрока.Сотрудник) = Неопределено Тогда
			Объект.Зарплата.Удалить(ТекСтрока);
		КонецЕсли;
		Сч = Сч - 1;
	КонецЦикла;
	
	Объект.НачислятьЗПВодителю1   = ЗначениеЗаполнено(Объект.Водитель1);
	Объект.НачислятьЗПВодителю2   = ЗначениеЗаполнено(Объект.Водитель2);
	Объект.НачислятьЗПСотруднику1 = ЗначениеЗаполнено(Объект.Сотрудник1);
	Объект.НачислятьЗПСотруднику2 = ЗначениеЗаполнено(Объект.Сотрудник2);
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыСтатусыСД

&НаКлиенте
Процедура СтатусыСДВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если Элементы.СтатусыСД.ТекущийЭлемент.Имя = "СтатусыСДСтатус" Тогда
		ПоказатьЗначение(Неопределено, Элементы.СтатусыСД.ТекущиеДанные.Регистратор);
	ИначеЕсли Элементы.СтатусыСД.ТекущийЭлемент.Имя = "СтатусыСДПакетДокументов" Тогда
		ПоказатьЗначение(Неопределено, Элементы.СтатусыСД.ТекущиеДанные.ПакетДокументов);
	Иначе
		ПоказатьЗначение(Неопределено, Элементы.СтатусыСД.ТекущиеДанные.СопроводительныйДокумент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СтатусыСДПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
	Если Элементы.СтатусыСД.ТекущийЭлемент.Имя = "СтатусыСДСтатус" Тогда
		ПоказатьЗначение(Неопределено, Элементы.СтатусыСД.ТекущиеДанные.Регистратор);
	ИначеЕсли Элементы.СтатусыСД.ТекущийЭлемент.Имя = "СтатусыСДПакетДокументов" Тогда
		ПоказатьЗначение(Неопределено, Элементы.СтатусыСД.ТекущиеДанные.ПакетДокументов);
	Иначе
		ПоказатьЗначение(Неопределено, Элементы.СтатусыСД.ТекущиеДанные.СопроводительныйДокумент);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СтатусыСДПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	Для Каждого ТекСтрока Из Строки Цикл
		ТекПакет = ТекСтрока.Значение.Данные.ПакетДокументов;
		Если ЗначениеЗаполнено(ТекПакет) Тогда
			ТекСтрока.Значение.Данные.ПакетДокументовПредставление = "№" + ТекПакет.Номер + " от " + Формат(ТекПакет.Дата, "ДФ=dd.MM.yyyy");
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// уатУправлениеАвтотранспортом.МодификацияКонфигурации
&НаКлиенте
Процедура Подключаемый_уатВыполнитьКоманду(Команда)
	
	уатМодификацияКонфигурацииКлиентПереопределяемый.ВыполнитьПодключаемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры
// Конец уатУправлениеАвтотранспортом.МодификацияКонфигурации

&НаКлиенте
Процедура Объект_ЗаписатьИЗакрыть(Команда)
	
	флЗакрыватьПриЗаписи = Истина;
	
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	Если Записать(ПараметрыЗаписи) Тогда 
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокУстановитьВсе(Команда)
	
	Для Каждого ТекСтрока Из Объект.Заказы Цикл 
		ТекСтрока.Выполнен = Истина;
		ПриИзмененииФлагаЗаказыВыполнен(ТекСтрока);
	КонецЦикла;
	
	Объект.Выполнен = Истина;
	Отправлен       = Истина;
	
	Объект.ДатаИВремяОтправления = НачалоМинуты(ТекущаяДата());
	Объект.ДатаИВремяВыполнения  = ТекущаяДата();
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаЗаказы Тогда
		ЗаказыПриИзменении(Неопределено);
	Иначе
		Заказы1ПриИзменении(Неопределено);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СписокСнятьВсе(Команда)
	
	Для Каждого ТекСтрока Из Объект.Заказы Цикл 
		ТекСтрока.Выполнен = Ложь;
		ПриИзмененииФлагаЗаказыВыполнен(ТекСтрока);
	КонецЦикла;
	
	Объект.Выполнен = Ложь;
	Отправлен       = Ложь;
	
	Объект.ДатаИВремяОтправления = '00010101';
	Объект.ДатаИВремяВыполнения  = '00010101';
	
	Если Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаЗаказы Тогда
		ЗаказыПриИзменении(Неопределено);
	Иначе
		Заказы1ПриИзменении(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПункт(Команда)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя") И РежимОтображенияДерево Тогда
		НовСтрокаДерево = ЗаказыДерево.ПолучитьЭлементы().Добавить();
		НовСтрокаДерево.ПунктЗаказНоменклатура = ПредопределенноеЗначение("Справочник.уатПунктыНазначения.ПустаяСсылка");
		
		ОбновитьТипыЗначенийСтрокДереваЗаказов();
		
		Элементы.ЗаказыДерево.ТекущаяСтрока  = НовСтрокаДерево.ПолучитьИдентификатор();
		Элементы.ЗаказыДерево.ТекущийЭлемент = Элементы.ЗаказыДеревоПунктЗаказНоменклатура;
		Элементы.ЗаказыДерево.ИзменитьСтроку();
		
	Иначе
		НовСтрока = Объект.Заказы.Добавить();
		НовСтрока.Пункт            = ПредопределенноеЗначение("Справочник.уатПунктыНазначения.ПустаяСсылка");
		НовСтрока.ТипТочкиМаршрута = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.ПромежуточныйПункт");
		
		ОбновитьТипыЗначенийСтрокЗаказов();
		
		Элементы.Заказы.ТекущаяСтрока = НовСтрока.ПолучитьИдентификатор();
		Элементы.Заказы.ИзменитьСтроку();
	КонецЕсли;
	
	РасстоянияТЧЗаказы(Неопределено);
	ОбновитьПиктограммыПрисоединенныхФайлов();
	
КонецПроцедуры

&НаКлиенте
Процедура РежимДерево(Команда)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя") И РежимОтображенияДерево Тогда 
		Возврат;
	КонецЕсли;
	
	мМодифицированность = Модифицированность;
	ОбновитьДеревоЗаказовНаСервере();
	Элементы.ЗаказыДерево.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВерхнийУровень;
	РежимОтображенияДерево = Истина;
	Модифицированность = мМодифицированность;
	
	УстановитьВидимостьИДоступностьЭлементовФормы();
	ОбновитьДинамическиеПоля();
	
КонецПроцедуры

&НаКлиенте
Процедура РежимСписок(Команда)
	
	Если Не РежимОтображенияДерево Тогда 
		Возврат;
	КонецЕсли;
	
	мМодифицированность = Модифицированность;
	ЗаписатьДеревоЗаказов();
	РежимОтображенияДерево = Ложь;
	Модифицированность = мМодифицированность;
	
	УстановитьВидимостьИДоступностьЭлементовФормы();
	ОбновитьДинамическиеПоля();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьУслугиПоШаблону(Команда)
	ИмяТЧ = ?(Элементы.ГруппаСтраницыОсн.ТекущаяСтраница = Элементы.ГруппаСтраницаОснОказываемыеУслуги, "Доходы", "Расходы");
	Если Объект[ИмяТЧ].Количество() > 0 Тогда
		ОписаниеОповещ = Новый ОписаниеОповещения("ЗаполнитьУслугиПоШаблонуВопрос", ЭтотОбъект);
		ТекстНСТР = НСтр("en='To fill with cleaning tables?';ru='Заполнить с очисткой таблицы?'");
		ПоказатьВопрос(ОписаниеОповещ, ТекстНСТР, РежимДиалогаВопрос.ДаНетОтмена);
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Справочник.уатШаблоныУслуг_уэ.ФормаВыбора",, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПлановоеВремяИзЗаказа(Команда)
	ЗаказыУстановитьСодержимоеЯчеек();
	ПересчитатьПлановоеВремяПоЗаказам();
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя")
		И РежимОтображенияДерево Тогда 
		мМодифицированность = Модифицированность;
		ОбновитьДеревоЗаказовНаСервере();
		Элементы.ЗаказыДерево.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВерхнийУровень;
		
		РежимОтображенияДерево = Истина;
		УстановитьВидимостьИДоступностьЭлементовФормы();
		ОбновитьПиктограммыПрисоединенныхФайлов();
		Модифицированность = мМодифицированность;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьФактическоеВремяПоПлану(Команда)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя")
		И РежимОтображенияДерево Тогда
		НаборСтрок = ЗаказыДерево.ПолучитьЭлементы();
	Иначе
		НаборСтрок = Объект.Заказы;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из НаборСтрок Цикл
		ТекСтрока.Выполнен = Истина;
		ПриИзмененииФлагаЗаказыВыполнен(ТекСтрока,
			Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя")
			И РежимОтображенияДерево, , Истина);
	КонецЦикла;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя")
		И РежимОтображенияДерево	Тогда
		Объект.Выполнен = Истина;
		Отправлен       = Истина;
		
		Объект.ДатаИВремяОтправления = НачалоМинуты(ТекущаяДата());
		Объект.ДатаИВремяВыполнения  = ТекущаяДата();
		
		ЗаказыДеревоПриИзменении(Неопределено);
	Иначе
		ЗаказыИзменитьДатыВШапке();
		
		УстановитьВидимостьИДоступностьЭлементовФормы();
		ОбновитьПиктограммыПрисоединенныхФайлов();
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьУслугиПоШаблонуВопрос(Результат, ДопПараметры) Экспорт
	ИмяТЧ = ?(Элементы.ГруппаСтраницыОсн.ТекущаяСтраница = Элементы.ГруппаСтраницаОснОказываемыеУслуги, "Доходы", "Расходы");
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект[ИмяТЧ].Очистить();
		Модифицированность = Истина;
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
	Иначе
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Справочник.уатШаблоныУслуг_уэ.ФормаВыбора",, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОказываемыеУслуги(Команда)
	Если Объект.Доходы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстНСТР = НСтр("en='Clear the tabular section?';ru='Очистить табличную часть?'");
	ПоказатьВопрос(Новый ОписаниеОповещения("ОчиститьОказываемыеУслугиОтвет", ЭтотОбъект),
		ТекстНСТР, РежимДиалогаВопрос.ОКОтмена);
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПолучаемыеУслуги(Команда)
	Если Объект.Расходы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстНСТР = НСтр("en='Clear the tabular section?';ru='Очистить табличную часть?'");
	ПоказатьВопрос(Новый ОписаниеОповещения("ОчиститьПолучаемыеУслугиОтвет", ЭтотОбъект),
		ТекстНСТР, РежимДиалогаВопрос.ОКОтмена);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаказыПоЗаказуНаТС(Команда)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя") И РежимОтображенияДерево Тогда
		Если ЗаказыДерево.ПолучитьЭлементы().Количество() > 0 Тогда
			Оповещение = Новый ОписаниеОповещения("ЗаполнитьЗаказыПоЗаказуНаТСЗавершение", ЭтотОбъект);
			ТекстВопроса = НСтр("en='Clear the tabular section before filling?';ru='Очистить табличную часть перед заполнением?'");
			ТекстЗаголовка = НСтр("en='Clear the table';ru='Очистка таблицы'");
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет, ТекстЗаголовка);
			Возврат;
		КонецЕсли;
		
		ЗаполнитьЗаказыПоЗаказуНаТСФрагмент();
		
	Иначе 
		Если Объект.Заказы.Количество() > 0 Тогда
			Оповещение = Новый ОписаниеОповещения("ЗаполнитьЗаказыПоЗаказуНаТСЗавершениеСписок", ЭтотОбъект);
			ТекстВопроса = НСтр("en='Clear the tabular section before filling?';ru='Очистить табличную часть перед заполнением?'");
			ТекстЗаголовка = НСтр("en='Clear the table';ru='Очистка таблицы'");
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет, ТекстЗаголовка);
			Возврат;
		КонецЕсли;
		
		ЗаполнитьЗаказыПоЗаказуНаТСФрагмент1();
	КонецЕсли;
	
	ОбновитьПиктограммыПрисоединенныхФайлов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроизвестиРасчетГруппировок(Команда)

	Если НЕ ЗначениеЗаполнено(Объект.ШаблонНастроек) Тогда
		Обработчик = Новый ОписаниеОповещения("ПроизвестиРасчетГруппировокЗавершение", ЭтотОбъект);
		
		ПараметрыОткрытияФормы = Новый Структура();
		ПараметрыОткрытияФормы.Вставить("Заголовок", Нстр("ru = 'Выберите вариант настроек'"));
		ОткрытьФорму("Справочник.уатВариантыНастроекАРМЛогиста.ФормаВыбора", ПараметрыОткрытияФормы, ЭтотОбъект,,,,Обработчик);
	Иначе
		ПроизвестиРасчетГруппировокСервер(Объект.ШаблонНастроек); 
		Если РежимОтображенияДерево Тогда
			ОбновитьДеревоЗаказовНаСервере();  
			УстановитьВидимостьИДоступностьЭлементовФормы();
			ОбновитьДинамическиеПоля();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОформлениеДокументов(Команда)
	Если Объект.Ссылка.Пустая() Тогда
		ТекстНСТР = НСтр("en='To perform this operation, you must record the item. The document will be recorded.';ru='Для выполнения данной операции необходимо записать документ. Данные будут записаны.'");
		
		ОповещениеЗаписатьОбъект = Новый ОписаниеОповещения("ОформлениеДокументовПродолжение", ЭтотОбъект);
		
		ПоказатьВопрос(ОповещениеЗаписатьОбъект, ТекстНСТР, РежимДиалогаВопрос.ДаНет);
	Иначе
		ОткрытьФорму("ОбщаяФорма.уатФормаОформленияДокументов_уэ",,ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаказыПоЗаказуНаТСЗавершениеСписок(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Да Тогда
        Объект.Заказы.Очистить();
    КонецЕсли;
    
    ЗаполнитьЗаказыПоЗаказуНаТСФрагмент1();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаказыПоЗаказуНаТСФрагмент1()
    
    Перем ОповещениеОЗакрытии, Форма, ЭлементОтбора;
    
    Форма = ПолучитьФорму("Документ.уатЗаказГрузоотправителя.ФормаВыбора",,ЭтотОбъект);
    
    ЭлементОтбора                  = Форма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
    ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("Ссылка");
    ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.ВСписке;
    ЭлементОтбора.ПравоеЗначение   = ПолучитьСписокЗаказовНаСервере();
    ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
    ЭлементОтбора.Использование    = Истина;
    
    ОповещениеОЗакрытии               = Новый ОписаниеОповещения("ОбновитьСодержимоеТЧСПискаПослеЗаполнения", ЭтотОбъект);
    Форма.ОписаниеОповещенияОЗакрытии = ОповещениеОЗакрытии;
    
    Форма.Открыть();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаказыПоЗаказуНаТСЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Да Тогда
        ЗаказыДерево.ПолучитьЭлементы().Очистить();
    КонецЕсли;
    
    ЗаполнитьЗаказыПоЗаказуНаТСФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаказыПоЗаказуНаТСФрагмент()
	
	Форма = ПолучитьФорму("Документ.уатЗаказГрузоотправителя.ФормаВыбора",, ЭтотОбъект);
	ЭлементОтбора                     = Форма.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение       = Новый ПолеКомпоновкиДанных("Ссылка");
	ЭлементОтбора.ВидСравнения        = ВидСравненияКомпоновкиДанных.ВСписке;
	ЭлементОтбора.ПравоеЗначение      = ПолучитьСписокЗаказовНаСервере();
	ЭлементОтбора.РежимОтображения    = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.Использование       = Истина;
	Форма.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ОбновитьСодержимоеТЧСПискаПослеЗаполнения", ЭтотОбъект);
	
	Форма.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаказыДеревоПоОстаткамЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		ЗаказыДерево.ПолучитьЭлементы().Очистить();
	КонецЕсли;
	
	ЗаполнитьЗаказыДеревоПоОстаткамНаСервере();
	
	ОбновитьМаршрутныеПараметрыДереваЗаказов();
	ОбновитьГрузовыеПараметрыДереваЗаказов();  
	ЗаказыДеревоИзменитьДатыВШапке();
	ОбновитьТипыЗначенийСтрокЗаказов();
	ОбновитьДанныеНаПланировщике();
	РассчитатьПоказателиСервер();
	ОбновитьДинамическиеПоля();
	ОбновитьНадписьИтоги();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаказыТаблицаПоОстаткамЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.Заказы.Очистить();
	КонецЕсли;
	
	ЗаполнитьЗаказыПоОстаткамНаСервере();
	ПересчитатьПлановоеВремя();
	ЗаказыУстановитьСодержимоеЯчеек();
	ЗаказыИзменитьДатыВШапке();
	
	Если ПредДатаИВремяОтправленияПлан <> НачалоДня(Объект.ДатаИВремяОтправленияПлан) Тогда
		Если НЕ (Объект.ВидПеревозки = ПредопределенноеЗначение("Справочник.уатВидыПеревозок.Авиационная") 
			Или Объект.ВидПеревозки = ПредопределенноеЗначение("Справочник.уатВидыПеревозок.Железнодорожная")
			Или Объект.ВидПеревозки = ПредопределенноеЗначение("Справочник.уатВидыПеревозок.Морская")) Тогда
			Если Объект.ПринадлежностьПеревозки = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное") тогда
				// заполняем водителей
				уатОбщегоНазначения.ЗаполнитьЭкипажТС(Объект.ТС, Объект.Организация, Объект.ДатаИВремяОтправленияПлан,
					Объект.Водитель1, Объект.Водитель2, Объект.Сотрудник1, Объект.Сотрудник2,
					Ложь, Объект.ДатаИВремяОтправленияПлан + 24*3600, Истина);
					
				ПредДатаИВремяОтправленияПлан = Объект.ДатаИВремяОтправленияПлан;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаказыПоОстаткам(Команда)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя") И РежимОтображенияДерево Тогда
		Если ЗаказыДерево.ПолучитьЭлементы().Количество() > 0 Тогда
			ТекстНСТР = НСтр("en='Clean order tree before filling?';ru='Очистить дерево заказов перед заполнением?'");
			ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьЗаказыДеревоПоОстаткамЗавершение", ЭтотОбъект),
				ТекстНСТР, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет, НСтр("en='Clear the table';ru='Очистка таблицы'"));
		Иначе
			ЗаполнитьЗаказыДеревоПоОстаткамНаСервере();
			
			ОбновитьМаршрутныеПараметрыДереваЗаказов();
			ОбновитьГрузовыеПараметрыДереваЗаказов();  
			ЗаказыДеревоИзменитьДатыВШапке();
			ОбновитьТипыЗначенийСтрокЗаказов();
			ОбновитьДанныеНаПланировщике();
			РассчитатьПоказателиСервер();
			ОбновитьДинамическиеПоля();
			ОбновитьНадписьИтоги();
			Модифицированность = Истина;
		КонецЕсли;
		
	Иначе 
		Если Объект.Заказы.Количество() > 0 Тогда
			ТекстНСТР = НСтр("en='Clear the tabular section before filling?';ru='Очистить табличную часть перед заполнением?'");
			ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьЗаказыТаблицаПоОстаткамЗавершение", ЭтотОбъект),
				ТекстНСТР, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Нет, НСтр("en='Clear the table';ru='Очистка таблицы'"));
		Иначе
			ЗаполнитьЗаказыПоОстаткамНаСервере();
			ПересчитатьПлановоеВремя();
			ЗаказыУстановитьСодержимоеЯчеек();
			ЗаказыИзменитьДатыВШапке();
			ОбновитьТипыЗначенийСтрокЗаказов();
			ОбновитьДанныеНаПланировщике();
			РассчитатьПоказателиСервер();
			ОбновитьДинамическиеПоля();
			ОбновитьНадписьИтоги();
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьПиктограммыПрисоединенныхФайлов();
	РасстоянияТЧЗаказы(Неопределено);

	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РасстоянияТЧЗаказы(Команда)
	
	РассчитатьВремяРасстояниеМеждуПунктамиСервер();
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя") И РежимОтображенияДерево Тогда 
		ОбновитьДеревоЗаказовНаСервере();
		Элементы.ЗаказыДерево.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВерхнийУровень;
	КонецЕсли;
	
	ПересчитатьПлановоеВремя();
	ОбновитьДанныеНаПланировщике();
	РассчитатьПоказателиСервер();
	ОбновитьДинамическиеПоля();
	ОбновитьНадписьИтоги();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТЧЗаказы(Команда)
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя") И РежимОтображенияДерево Тогда
		Если ЗаказыДерево.ПолучитьЭлементы().Количество() > 0 Тогда
			ТекстНСТР = НСтр("en='Clear order tree?';ru='Очистить дерево заказов?'");
			ПоказатьВопрос(Новый ОписаниеОповещения("ОчиститьДеревоЗаказыЗавершение", ЭтотОбъект),
				ТекстНСТР, РежимДиалогаВопрос.ОКОтмена);
		КонецЕсли;
	Иначе 
		Если Объект.Заказы.Количество() > 0 Тогда 
			ТекстНСТР = НСтр("en='Clear the tabular section?';ru='Очистить табличную часть?'");
			ПоказатьВопрос(Новый ОписаниеОповещения("ОчиститьТЧЗаказыЗавершение", ЭтотОбъект),
				ТекстНСТР, РежимДиалогаВопрос.ОКОтмена);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьДеревоЗаказыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;	
	
	ЗаказыДерево.ПолучитьЭлементы().Очистить();
	
	ЗаказыДеревоИзменитьДатыВШапке();
	ОбновитьДанныеНаПланировщике();
	РассчитатьПоказателиСервер();
	ОбновитьДинамическиеПоля();
	ОбновитьНадписьИтоги();
	
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТЧЗаказыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	Объект.Заказы.Очистить();
	
	ЗаказыИзменитьДатыВШапке();
	ОбновитьДанныеНаПланировщике();
	РассчитатьПоказателиСервер();
	ОбновитьДинамическиеПоля();
	ОбновитьНадписьИтоги();
	
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ОперацияПоЗаказуГрузоотправителя(Команда)
	
	Если Элементы.ФормаОперацияПоЗаказуГрузоотправителя.Пометка Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура("ВидОперации","ПоЗаказуГрузоотправителя");
	
	Если Объект.Заказы.Количество() Тогда 
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОперация", ЭтотОбъект, ПараметрыОповещения);
		ТекстНСТР = НСтр("en='Tabular section ""Orders"" will be cleared. To continue the operation?';ru='Табличная часть ""Заказы"" будет очищена. Продолжить выполнение операции?'");
		ПоказатьВопрос(Оповещение, ТекстНСТР, Режим, 0);
	Иначе 
		ПослеЗакрытияВопросаОперация(КодВозвратаДиалога.Да, ПараметрыОповещения);
	КонецЕсли;
	
	ОбновитьПиктограммыПрисоединенныхФайлов();
	
КонецПроцедуры // ОперацияПоЗаказуГрузоотправителя();

&НаКлиенте
Процедура ОперацияПроизвольный(Команда)
	
	Если Элементы.ФормаОперацияПроизвольный.Пометка Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыОповещения = Новый Структура("ВидОперации", "Произвольный");
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя") И РежимОтображенияДерево Тогда 
		ТекстНСТР = НСтр("en='Tree of orders will be cleared. Continue operation?';ru='Дерево заказов будет очищено. Продолжить выполнение операции?'");
		ЗадатьВопрос = Не ЗаказыДерево.ПолучитьЭлементы().Количество()=0;
	Иначе 
		ТекстНСТР = НСтр("en='Tabular section ""Orders"" will be cleared. To continue the operation?';ru='Табличная часть ""Заказы"" будет очищена. Продолжить выполнение операции?'");
		ЗадатьВопрос = Не Объект.Заказы.Количество()=0;
	КонецЕсли;
	
	Если ЗадатьВопрос Тогда 
		Режим = РежимДиалогаВопрос.ДаНет;
		Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопросаОперация", ЭтотОбъект, ПараметрыОповещения);
		ПоказатьВопрос(Оповещение, ТекстНСТР, Режим, 0);
	Иначе 
		ПослеЗакрытияВопросаОперация(КодВозвратаДиалога.Да, ПараметрыОповещения);
	КонецЕсли;
	
	ОбновитьПиктограммыПрисоединенныхФайлов();
	
КонецПроцедуры // ОперацияПроизвольный() 

&НаКлиенте
Процедура ДеревоОтметитьВсе(Команда)
	Для каждого ТекСтрокаПункт ИЗ ЗаказыДерево.ПолучитьЭлементы() Цикл
		ТекСтрокаПункт.Выполнен = Истина;
		ПриИзмененииФлагаЗаказыВыполнен(ТекСтрокаПункт, Истина);
	КонецЦикла;
	
	Объект.Выполнен = Истина;
	Отправлен       = Истина;
	
	Объект.ДатаИВремяОтправления = НачалоМинуты(ТекущаяДата());
	Объект.ДатаИВремяВыполнения  = ТекущаяДата();
	
	ЗаказыДеревоПриИзменении(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСнятьВсе(Команда)
	Для каждого ТекСтрокаПункт ИЗ ЗаказыДерево.ПолучитьЭлементы() Цикл
		ТекСтрокаПункт.Выполнен = Ложь;
		ПриИзмененииФлагаЗаказыВыполнен(ТекСтрокаПункт, Истина);
	КонецЦикла;
	
	Объект.Выполнен = Ложь;
	Отправлен       = Ложь;
	
	Объект.ДатаИВремяОтправления = '00010101';
	Объект.ДатаИВремяВыполнения  = '00010101';
	
	ЗаказыДеревоПриИзменении(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоРазвернутьВсе(Команда)
	Для Каждого ТекСтрокаПункт ИЗ ЗаказыДерево.ПолучитьЭлементы() Цикл
		Элементы.ЗаказыДерево.Развернуть(ТекСтрокаПункт.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоСвернутьВсе(Команда)
	Для Каждого ТекСтрокаПункт ИЗ ЗаказыДерево.ПолучитьЭлементы() Цикл
		Элементы.ЗаказыДерево.Свернуть(ТекСтрокаПункт.ПолучитьИдентификатор());
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыОткрытьОбъект(Команда)
	
	Если Элементы.ЗаказыДерево.ТекущийЭлемент <> Элементы.ЗаказыДеревоПунктЗаказНоменклатура Тогда
		Возврат;
	КонецЕсли;
	
	ТекСтрока = Элементы.ЗаказыДерево.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Попытка
		ПоказатьЗначение(Неопределено, ТекСтрока.ПунктЗаказНоменклатура);
	Исключение
	КонецПопытки;

КонецПроцедуры

&НаКлиенте
Процедура Закрытие(Команда)
	Если ЗначениеЗаполнено(Объект.ДатаЗакрытия) Тогда
		Элементы.ФормаЗакрытие.Заголовок = Нстр("en = 'Closing'; ru = 'Закрытие'");
		СообщениеОшибки = "";
		ЗакрытиеДокументаСервер('00010101', СообщениеОшибки);
		Если ПустаяСтрока(СообщениеОшибки) Тогда
			Прочитать();
			УстановитьВидимостьИДоступностьЭлементовФормы();
			ОбновитьДинамическиеПоля();
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОшибки);
		КонецЕсли;
	Иначе
		ДопПараметры = Новый Структура("Документ", Объект.Ссылка);
		ТекстНСТР = НСтр("en='Enter closing date and time';ru='Введите дату и время закрытия'");
		ПоказатьВводДаты(Новый ОписаниеОповещения("ЗакрытиеВводДатыЗавершение", ЭтотОбъект, ДопПараметры),
			ДатаЗакрытияПоУмолчанию(уатОбщегоНазначенияКлиентСервер.СтруктураДокумента(Объект, "уатМаршрутныйЛист")),
			ТекстНСТР, ЧастиДаты.ДатаВремя);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ДатаЗакрытияПоУмолчанию(СтруктураДокумента)
	Возврат Документы.уатМаршрутныйЛист.ДатаЗакрытияПоУмолчанию(СтруктураДокумента, ТекущаяДата());
КонецФункции

&НаКлиенте
Процедура ЗакрытиеВводДатыЗавершение(Результат, ДопПараметры) Экспорт
	Если ЗначениеЗаполнено(Результат) Тогда
		СообщениеОшибки = "";
		флСуммаУслугИзменилась = Ложь;
		ЗакрытиеДокументаСервер(Результат, СообщениеОшибки, флСуммаУслугИзменилась);
		Если ПустаяСтрока(СообщениеОшибки) Тогда
			Если флСуммаУслугИзменилась Тогда
				Если флПересчетИтогов Тогда
					ЗаголовокНСТР = "";
					ОписаниеНСТР = НСтр("en='Incomes and expenses was calculated automaticaly'; ru='Выполнен автоматический пересчет доходов и расходов'");
					ПоказатьОповещениеПользователя(ЗаголовокНСТР,, ОписаниеНСТР);
				Иначе
					ПоказатьПредупреждение(Неопределено, НСтр("en='Recalculation of incomes and expenses was not done';ru='Не выполнен пересчет доходов и расходов'"));
				КонецЕсли;
			КонецЕсли;
			Прочитать();
			УстановитьВидимостьИДоступностьЭлементовФормы();
			ОбновитьДинамическиеПоля();
			Элементы.ФормаЗакрытие.Заголовок = Нстр("en = 'Cancel closing'; ru = 'Отмена закрытия'");
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОшибки);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗакрытиеДокументаСервер(ДатаЗакрытия, СообщениеОшибки = "", флСуммаУслугИзменилась = Ложь)
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	Документы.уатМаршрутныйЛист.ЗакрытиеДокумента(ДокументОбъект, ДатаЗакрытия, СообщениеОшибки, Истина, флСуммаУслугИзменилась);
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьОказываемыеУслугиПоГрузам(Команда)
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя") И РежимОтображенияДерево Тогда 
		ЗаписатьДеревоЗаказов();
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Дата", Объект.Дата);
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("ИмяТЧ", "Доходы");
		
	мГрузы = Новый Массив;
	Для Каждого ТекСтрока Из Объект.Заказы Цикл
		Если мГрузы.Найти(ТекСтрока.ЗаказГрузоотправителя) = Неопределено
			И ЗначениеЗаполнено(ТекСтрока.ЗаказГрузоотправителя) Тогда
			мГрузы.Добавить(ТекСтрока.ЗаказГрузоотправителя);
		КонецЕсли;
	КонецЦикла;
	ПараметрыФормы.Вставить("Грузы", мГрузы);
	
	флУчитыватьНДС = Ложь;
	мУслуги = Новый Массив;
	Для Каждого ТекСтрока Из Объект.Доходы Цикл
		Если ЗначениеЗаполнено(ТекСтрока.ЗаказНаТС) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураСтроки = Новый Структура("ЗаказГрузоотправителя, Номенклатура, СтатьяДоходов, Тариф, Цена, Количество, Сумма, СтавкаНДС, СуммаНДС, Валюта, УчитыватьНДС, СуммаВключаетНДС, РучнойВвод");
			
		Если флИспользоватьПлановыеУслуги Тогда
			СтруктураСтроки.Вставить("КоличествоПлан");
			СтруктураСтроки.Вставить("ЦенаПлан");
			СтруктураСтроки.Вставить("СуммаПлан");
			СтруктураСтроки.Вставить("СуммаНДСПлан");
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтруктураСтроки, ТекСтрока);
		СтруктураСтроки.ЗаказГрузоотправителя = ТекСтрока.ЗаказНаТС;
		мУслуги.Добавить(СтруктураСтроки);
		
		флУчитыватьНДС = флУчитыватьНДС ИЛИ СтруктураСтроки.УчитыватьНДС;
	КонецЦикла;
	
	ПараметрыФормы.Вставить("Услуги", мУслуги);
	ПараметрыФормы.Вставить("УчитыватьНДС", флУчитыватьНДС);
	
	СтруктураНеРедактируемыхПараметров = Новый Структура("Организация");
	ПараметрыФормы.Вставить("НередактируемыеПараметры", СтруктураНеРедактируемыхПараметров);
	
	ПараметрыФормы.Вставить("ДокументОбъект", уатОбщегоНазначенияКлиентСервер.СтруктураДокумента(Объект, "уатМаршрутныйЛист"));
	ПараметрыФормы.Вставить("ИмяДокумента", "уатМаршрутныйЛист");
	
	ОткрытьФорму("ОбщаяФорма.уатРаспределениеУслугПоЗаказам_уэ", ПараметрыФормы, Элементы.ОказываемыеУслуги);
КонецПроцедуры

&НаКлиенте
Процедура РаспределитьПолучаемыеУслугиПоГрузам(Команда)
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя") И РежимОтображенияДерево Тогда 
		ЗаписатьДеревоЗаказов();
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Дата", Объект.Дата);
	ПараметрыФормы.Вставить("Организация", Объект.Организация);
	ПараметрыФормы.Вставить("ИмяТЧ", "Расходы");
	
	мГрузы = Новый Массив;
	Для Каждого ТекСтрока Из Объект.Заказы Цикл
		Если мГрузы.Найти(ТекСтрока.ЗаказГрузоотправителя) = Неопределено
			И ЗначениеЗаполнено(ТекСтрока.ЗаказГрузоотправителя) Тогда
			мГрузы.Добавить(ТекСтрока.ЗаказГрузоотправителя);
		КонецЕсли;
	КонецЦикла;
	ПараметрыФормы.Вставить("Грузы", мГрузы);
	
	флУчитыватьНДС = Ложь;
	мУслуги = Новый Массив;
	Для Каждого ТекСтрока Из Объект.Расходы Цикл
		Если ЗначениеЗаполнено(ТекСтрока.ЗаказНаТС) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураСтроки = Новый Структура("Контрагент, Договор, ЗаказГрузоотправителя, Номенклатура, СтатьяРасходов, Тариф, Цена, Количество, Сумма, СтавкаНДС, СуммаНДС, Валюта, УчитыватьНДС, СуммаВключаетНДС, РучнойВвод");
		Если флИспользоватьПлановыеУслуги Тогда
			СтруктураСтроки.Вставить("ЦенаПлан");
			СтруктураСтроки.Вставить("КоличествоПлан");
			СтруктураСтроки.Вставить("СуммаПлан");
			СтруктураСтроки.Вставить("СуммаНДСПлан");
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтруктураСтроки, ТекСтрока);
		СтруктураСтроки.ЗаказГрузоотправителя = ТекСтрока.ЗаказНаТС;
		мУслуги.Добавить(СтруктураСтроки);
		
		флУчитыватьНДС = флУчитыватьНДС ИЛИ СтруктураСтроки.УчитыватьНДС;
	КонецЦикла;
	
	ПараметрыФормы.Вставить("Услуги", мУслуги);
	ПараметрыФормы.Вставить("УчитыватьНДС", флУчитыватьНДС);
	
	СтруктураНеРедактируемыхПараметров = Новый Структура("Организация");
	ПараметрыФормы.Вставить("НередактируемыеПараметры", СтруктураНеРедактируемыхПараметров);
	
	ПараметрыФормы.Вставить("ДокументОбъект", уатОбщегоНазначенияКлиентСервер.СтруктураДокумента(Объект, "уатМаршрутныйЛист"));
	ПараметрыФормы.Вставить("ИмяДокумента", "уатМаршрутныйЛист");
	ПараметрыФормы.Вставить("ИспользоватьПлановыеУслуги", флИспользоватьПлановыеУслуги);
	
	ОткрытьФорму("ОбщаяФорма.уатРаспределениеУслугПоЗаказам_уэ", ПараметрыФормы, Элементы.ПолучаемыеУслуги);
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьОказываемыеУслуги(Команда)
	// Пока отключена запись документа перед расчетом - непонятно зачем это было сделано.
	// В расчете услуг не обнаружено использование реквизитов ссылки, а только структура реквизитов документа-объекта
	//Если Модифицированность Тогда
	//	ТекстНСТР = НСтр("en='To perform this operation it is necessary to record the document. Continue?';ru='Для выполнения данной операции необходимо записать документ. Продолжить?'");
	//	ПоказатьВопрос(Новый ОписаниеОповещения("РассчитатьОказываемыеУслугиЗаписать", ЭтотОбъект),
	//		ТекстНСТР, РежимДиалогаВопрос.ОКОтмена, , КодВозвратаДиалога.ОК);
	//	Возврат;
	//КонецЕсли;
	
	РассчитатьОказываемыеУслугиДействия();
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПолучаемыеУслуги(Команда)
	//Если Объект.ПринадлежностьПеревозки = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное") Тогда
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Для перевозок собственным ТС расчет по тарифам не используется!");
	//	Возврат;
	//КонецЕсли;
	
	Если Объект.ПринадлежностьПеревозки = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Виртуальное") Тогда
		ТекстНСТР = НСтр("en='For transportation by virtual vehicle, calculation by tariffs is not used!';ru='Для перевозок виртуальным ТС расчет по тарифам не используется!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		Возврат;
	КонецЕсли;
	
	// Пока отключена запись документа перед расчетом - непонятно зачем это было сделано.
	// В расчете услуг не обнаружено использование реквизитов ссылки, а только структура реквизитов документа-объекта
	//Если Модифицированность Тогда
	//	ТекстНСТР = НСтр("en='To perform this operation it is necessary to record the document. Continue?';ru='Для выполнения данной операции необходимо записать документ. Продолжить?'");
	//	ПоказатьВопрос(Новый ОписаниеОповещения("РассчитатьПолучаемыеУслугиЗаписать", ЭтотОбъект, Новый	Структура("План", Ложь)),
	//		ТекстНСТР, РежимДиалогаВопрос.ОКОтмена, , КодВозвратаДиалога.ОК);
	//	Возврат;
	//КонецЕсли;
	
	РассчитатьПолучаемыеУслугиДействия();
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПолучаемыеУслугиДействия(флПлан = Ложь)
	Если Объект.Расходы.Количество() > 0 Тогда
		флЕстьРучнойВвод = (Объект.Расходы.НайтиСтроки(Новый Структура("РучнойВвод", Истина)).Количество()>0);
		Если флИспользоватьПлановыеУслуги Тогда
			Если флПлан Тогда
				ТекстАнгл = "Routine data table portion will be cleared! Continue?";
				ТекстРус = "Плановые данные табличной части будут очищены! Продолжить?";
			Иначе
				ТекстАнгл = "The actual data of tabular section will be cleared! Continue?";
				ТекстРус = "Фактические данные табличной части будут очищены! Продолжить?";
			КонецЕсли;
		Иначе
			ТекстАнгл = "Tabular section will be cleared! Continue?";
			ТекстРус = "Табличная часть будет очищена! Продолжить?";
		КонецЕсли;
		
		Если флЕстьРучнойВвод Тогда
			ТекстАнгл = ТекстАнгл + "
				|Yes - save manual input data, No - clear manual input data.";
			ТекстРус = ТекстРус + "
				|Да - сохранить строки с ручным вводом, Нет - удалить строки с ручным вводом.";
			РежимДиалога = РежимДиалогаВопрос.ДаНетОтмена;
		Иначе
			РежимДиалога = РежимДиалогаВопрос.ОКОтмена;
		КонецЕсли;
		
		ТекстНСТР = НСтр("en='" + ТекстАнгл + "'; ru='" + ТекстРус + "'");
		ПоказатьВопрос(Новый ОписаниеОповещения("РассчитатьПолучаемыеУслугиОтвет", ЭтотОбъект, Новый Структура("План", флПлан)), ТекстНСТР, РежимДиалога);
	Иначе
		РассчитатьПолучаемыеУслугиЗавершение(флПлан);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПолучаемыеУслугиОтвет(Результат, ДопПараметры) Экспорт
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	флУдалитьРучнойВвод = (Результат = КодВозвратаДиалога.Нет);
	
	РассчитатьПолучаемыеУслугиЗавершение(ДопПараметры.План,, флУдалитьРучнойВвод);
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПолучаемыеУслугиЗавершение(флПлан = Ложь, флСообщение = Ложь, флУдалитьРучнойВвод = Ложь)
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "МаршрутныйЛист.РасчетРасходов");
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
	Если флУдалитьРучнойВвод Тогда
		мсвСтрокиУдалить = Объект.Расходы.НайтиСтроки(Новый Структура("РучнойВвод", Истина));
		Для Каждого ТекСтрокаУдалить Из мсвСтрокиУдалить Цикл
			Объект.Расходы.Удалить(ТекСтрокаУдалить);
		КонецЦикла;
	КонецЕсли;
	
	РассчитатьВыработку();
	
	ДопПараметры = Новый Структура("ЗаполнятьТЧДоходы, ЗаполнятьТЧРасходы", Ложь, Ложь);
	СтруктураДокумента = уатОбщегоНазначенияКлиентСервер.СтруктураДокумента(Объект, "уатМаршрутныйЛист", ДопПараметры);
	РассчитатьУслугиСервер(СтруктураДокумента, "Расходы", флПлан);
	уатРасчетыПоТарифамКлиентСервер_уэ.ЗаполнитьДоходыРасходыИзСтруктуры(Объект, СтруктураДокумента, "Расходы", "уатМаршрутныйЛист", флПлан, флСообщение);
	
	Для Каждого ТекСтрока Из Объект.Расходы Цикл
		Если НЕ ЗначениеЗаполнено(ТекСтрока.Договор) Тогда
			ПриИзмененииКонтрагента(ТекСтрока, "Расходы");
		КонецЕсли;
	КонецЦикла;
	
	Модифицированность = Истина;
	
	РассчитатьСуммуДокумента();
	ОбновитьДинамическиеПоля();
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПолучаемыеУслугиПлан(Команда)
	Если Объект.ПринадлежностьПеревозки = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Виртуальное") Тогда
		ТекстНСТР = НСтр("en='For transportation by virtual vehicle, calculation by tariffs is not used!';ru='Для перевозок виртуальным ТС расчет по тарифам не используется!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		Возврат;
	КонецЕсли;
	
	// Пока отключена запись документа перед расчетом - непонятно зачем это было сделано.
	// В расчете услуг не обнаружено использование реквизитов ссылки, а только структура реквизитов документа-объекта
	//Если Модифицированность Тогда
	//	ТекстНСТР = НСтр("en='To perform this operation it is necessary to record the document. Continue?';ru='Для выполнения данной операции необходимо записать документ. Продолжить?'");
	//	ПоказатьВопрос(Новый ОписаниеОповещения("РассчитатьПолучаемыеУслугиЗаписать", ЭтотОбъект, Новый Структура("План", Истина)),
	//		ТекстНСТР, РежимДиалогаВопрос.ОКОтмена, , КодВозвратаДиалога.ОК);
	//	Возврат;
	//КонецЕсли;
	
	РассчитатьПолучаемыеУслугиДействия(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьФактПосещение(Команда)
	
	Если Модифицированность Тогда
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьФактПосещениеОтвет", ЭтотОбъект);
		ТекстВопроса = НСтр("ru='Перед выполнением операции Маршрутный лист будет записан. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	Иначе
		ЗаполнитьФактПосещениеПродолжение();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПостроитьМаршрутMultiGo(Команда)

	ПостроитьМаршрутMultiGoКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьМаршрутMultiGo(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ЗапускПриложения", ЭтотОбъект);
	НачатьЗапускПриложения(Оповещение, Объект.СсылкаMultiGo);
	
КонецПроцедуры

&НаКлиенте
Процедура ПерестроитьМаршрутMultiGo(Команда)
	
	ОчиститьМаршрутMultiGoКлиент();
	ПостроитьМаршрутMultiGoКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьМаршрутMultiGo(Команда)
	
	ОчиститьМаршрутMultiGoКлиент();
	УстановитьВидимостьMultiGo();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьФактПосещениеОтвет(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		
		Попытка
			Записать();
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Возврат;
		КонецПопытки;
		
		ЗаполнитьФактПосещениеПродолжение();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьФактПосещениеПродолжение(ЗадаватьВопросОчищатьФактическиеДанные = Истина)
	
	ИмяКлючевойОперации = "уатОперации.ФактическоеПосещениеПунктов.МаршрутныйЛистВручную";
	ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики(ИмяКлючевойОперации, 1);
	
	ЗаполнениеИзАРМКонтрольПеревозок = Ложь;
	
	УстановитьАдресХранилищаДляРезультатаЗаполненияФактПосещения();
	уатОбщегоНазначенияКлиент_проф.ФактическоеПосещениеПунктовПоДаннымССМ(Объект, Объект.Заказы, 
		АдресХранилищаФактПосещения, ЗаполнениеИзАРМКонтрольПеревозок, ЗадаватьВопросОчищатьФактическиеДанные);
	
	ПодключитьОбработчикОжидания("ФактическоеПосещениеПунктовПоДаннымМониторингаЗавершение", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗатратыПоЗаказуПеревозчику(Команда)
	
	Если Объект.Расходы.Количество() Тогда 
		ТекстНСТР = НСтр("en='Tabular section ""Additional expenses"" is not empty. Clean before filling?';ru='Табличная часть ""Дополнительные расходы"" не пустая. Очистить перед заполнением?'");
		Оповещение   = Новый ОписаниеОповещения("ЗаполнитьЗатратыПоЗаказуПеревозчикуОтветНаВопросОбОчисткеТЧ", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстНСТР, РежимДиалогаВопрос.ДаНетОтмена);
	Иначе 
		ЗаполнитьЗатратыПоЗаказуПеревозчикуПродолжение();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьФактИзПлана(Команда)
	Если Объект.Расходы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьФактИзПланаОтвет", ЭтотОбъект);
	ТекстНСТР = НСтр("en='The actual data table will be cleared. To continue the operation?';ru='Фактические данные табличной части будут очищены. Продолжить выполнение операции?'");
	ПоказатьВопрос(Оповещение, ТекстНСТР, РежимДиалогаВопрос.ОКОтмена, 0);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьФактИзПланаОтвет(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.ОК Тогда
		ЗаполнитьФактИзПланаЗавершениеСервер();
		ОбновитьВсегоВТЧПолучаемыеУслуги();
		РассчитатьСуммуДокумента();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФактИзПланаЗавершениеСервер()
	Для Каждого ТекСтрока Из Объект.Расходы Цикл
		Если ТекСтрока.СтатьяРасходов.НеКопироватьПлановыеРасходыВФактические Тогда
			Продолжить;
		КонецЕсли;
		
		ТекСтрока.Количество = ТекСтрока.КоличествоПлан;
		ТекСтрока.Цена = ТекСтрока.ЦенаПлан;
		ТекСтрока.Сумма = ТекСтрока.СуммаПлан;
		ТекСтрока.СуммаНДС = ТекСтрока.СуммаНДСПлан;
		ТекСтрока.Всего = ТекСтрока.ВсегоПлан;
	КонецЦикла;
	
	ОбновитьПараметрВыработкиВременныйПолуч();
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьДоходы(Команда)
	Для Каждого ТекСтрока Из Объект.Доходы Цикл
		ПересчитатьДоходыВТекущейСтроке(ТекСтрока);
	КонецЦикла;
	
	РассчитатьСуммуДокумента();
	ОбновитьДинамическиеПоля();
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьДоходыВСтроке(Команда)
	ТекСтрока = Элементы.ОказываемыеУслуги.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПересчитатьДоходыВТекущейСтроке(ТекСтрока);
	
	РассчитатьСуммуДокумента();
	ОбновитьДинамическиеПоля();
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьДоходыВТекущейСтроке(ТекСтрока)
	СтруктураСтроки = Новый Структура("НомерСтроки, Тариф, Цена, Количество, Сумма, СтавкаНДС, ЗаказНаТС");
	ЗаполнитьЗначенияСвойств(СтруктураСтроки, ТекСтрока);
	РассчитатьСтоимостьУслуги("Доходы", СтруктураСтроки, Ложь);
	ЗаполнитьЗначенияСвойств(ТекСтрока, СтруктураСтроки);
	РассчитатьСуммуНДС(ТекСтрока, "Факт", Ложь);
	РассчитатьСуммуВсегоВстрокеТЧ(ТекСтрока, "Факт", Ложь);
	
	ОбновитьПредставлениеНДСвТЧ("Доходы");
	ОбновитьПодвалДоходовРасходов("Доходы");
	
	ТекСтрока.РучнойВвод = Ложь;
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьРасходы(Команда)
	Для Каждого ТекСтрока Из Объект.Расходы Цикл
		ПересчитатьРасходыВТекущейСтроке(ТекСтрока, Ложь);
	КонецЦикла;
	
	РассчитатьСуммуДокумента();
	ОбновитьДинамическиеПоля();
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьРасходыПлан(Команда)
	Для Каждого ТекСтрока Из Объект.Расходы Цикл
		ПересчитатьРасходыВТекущейСтроке(ТекСтрока, Истина);
	КонецЦикла;
	
	ОбновитьДинамическиеПоля();
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьРасходыВСтроке(Команда)
	ТекСтрока = Элементы.ПолучаемыеУслуги.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПересчитатьРасходыВТекущейСтроке(ТекСтрока, Ложь);
	
	РассчитатьСуммуДокумента();
	ОбновитьДинамическиеПоля();
КонецПроцедуры                                           

&НаКлиенте
Процедура ПересчитатьРасходыВСтрокеПлан(Команда)
	ТекСтрока = Элементы.ПолучаемыеУслуги.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПересчитатьРасходыВТекущейСтроке(ТекСтрока, Истина);
	
	ОбновитьДинамическиеПоля();
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьРасходыВТекущейСтроке(ТекСтрока, флПлан = Ложь)
	СтруктураСтроки = Новый Структура;
	СтруктураСтроки.Вставить("НомерСтроки",  ТекСтрока.НомерСтроки);
	СтруктураСтроки.Вставить("Тариф",        ТекСтрока.Тариф);
	СтруктураСтроки.Вставить("ЗаказНаТС",    ТекСтрока.ЗаказНаТС);
	СтруктураСтроки.Вставить("УчитыватьНДС", ТекСтрока.УчитыватьНДС);
	
	Если флПлан Тогда
		СтруктураСтроки.Вставить("Цена",       ТекСтрока.ЦенаПлан);
		СтруктураСтроки.Вставить("Количество", ТекСтрока.КоличествоПлан);
		СтруктураСтроки.Вставить("Сумма",      ТекСтрока.СуммаПлан);
		СтруктураСтроки.Вставить("СтавкаНДС",  ТекСтрока.СтавкаНДС);
	Иначе
		СтруктураСтроки.Вставить("Цена",       ТекСтрока.Цена);
		СтруктураСтроки.Вставить("Количество", ТекСтрока.Количество);
		СтруктураСтроки.Вставить("Сумма",      ТекСтрока.Сумма);
		СтруктураСтроки.Вставить("СтавкаНДС",  ТекСтрока.СтавкаНДС);
	КонецЕсли;
	
	РассчитатьСтоимостьУслуги("Расходы", СтруктураСтроки, флПлан);
	
	ТекСтрока.Тариф = СтруктураСтроки.Тариф;
	Если флПлан Тогда
		ТекСтрока.ЦенаПлан = СтруктураСтроки.Цена;
		ТекСтрока.КоличествоПлан = СтруктураСтроки.Количество;
		ТекСтрока.СуммаПлан = СтруктураСтроки.Сумма;
		ТекСтрока.СтавкаНДС = СтруктураСтроки.СтавкаНДС;
		ТекСтрока.Валюта = СтруктураСтроки.Валюта;
		РассчитатьСуммуНДС(ТекСтрока, "План", Истина);
		РассчитатьСуммуВсегоВстрокеТЧ(ТекСтрока, "План", Истина);
	Иначе
		ТекСтрока.Цена = СтруктураСтроки.Цена;
		ТекСтрока.Количество = СтруктураСтроки.Количество;
		ТекСтрока.Сумма = СтруктураСтроки.Сумма;
		ТекСтрока.СтавкаНДС = СтруктураСтроки.СтавкаНДС;
		ТекСтрока.Валюта = СтруктураСтроки.Валюта;
		РассчитатьСуммуНДС(ТекСтрока, "Факт", Истина);
		РассчитатьСуммуВсегоВстрокеТЧ(ТекСтрока, "Факт", Истина);
	КонецЕсли;
	
	ТекСтрока.РучнойВвод = Ложь;
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьПрицеп(Команда)
	
	Если Не Элементы.ГруппаПрицеп1.Видимость Тогда 
		Элементы.ГруппаПрицеп1.Видимость = Истина;
		Прицеп = ПолучитьПрицеп(Объект.ТС, Объект.Прицеп2);
		Если Не Прицеп = Неопределено Тогда 
			Объект.Прицеп1 = Прицеп;
		КонецЕсли;
	ИначеЕсли Не Элементы.ГруппаПрицеп2.Видимость Тогда
		Элементы.ГруппаПрицеп2.Видимость = Истина;
		Прицеп = ПолучитьПрицеп(Объект.ТС, Объект.Прицеп1);
		Если Не Прицеп = Неопределено Тогда 
			Объект.Прицеп2 = Прицеп;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ДобавитьПрицеп.Видимость = Не (Элементы.ГруппаПрицеп1.Видимость И Элементы.ГруппаПрицеп2.Видимость);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьГараж(Команда)
	
	ПараметрыФормы = Новый Структура("Отбор", Новый Структура("Гараж", Истина));
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПослеЗакрытияФормыВыбораГаража", ЭтотОбъект);
	
	ОткрытьФорму("Справочник.уатПунктыНазначения.ФормаВыбора", ПараметрыФормы, ЭтотОбъект,,,, ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОптимальноеПерестроениеЗаказов(Команда)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя") И РежимОтображенияДерево Тогда 
		ЗаписатьДеревоЗаказов();
	КонецЕсли;
	
	ПараметрыОптимизации = ПодготовитьПараметрыОптимизации();
	Если ПараметрыОптимизации.Свойство("ОписаниеОшибки") И ЗначениеЗаполнено(ПараметрыОптимизации.ОписаниеОшибки) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ПараметрыОптимизации.ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	флRarusVRP = ПараметрыОптимизации.АлгоритмОптимальногоПерестроения = "RarusVRP";
	
	ОптимальноеПерестроениеЗаказовСервер(ПараметрыОптимизации.КоличествоПунктов);
	
	Отказ = Ложь;
	ЗаданВопрос = Ложь;
	Оповещение = Новый ОписаниеОповещения("ОптимальноеПерестроениеЗаказовПослеПроверкиЧислаЗаказов", ЭтотОбъект, ПараметрыОптимизации);
	уатОбщегоНазначенияКлиент_уэ.ПредупредитьОБольшомЧислеЗаказов(ПараметрыОптимизации, Оповещение, Отказ, ЗаданВопрос);
	
	Если Не Отказ И Не ЗаданВопрос Тогда
		ОптимальноеПерестроениеЗаказовПослеПроверкиЧислаЗаказов(КодВозвратаДиалога.Да, ПараметрыОптимизации);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОптимальноеПерестроениеЗаказовСервер(КоличествоПунктов)
	// Фиксация операции для статистики
	ИмяКлючевойОперации = "уатОперации.ОптимизацияМаршрута.МаршрутныйЛист";
	ЦентрМониторинга.ЗаписатьОперациюБизнесСтатистики(ИмяКлючевойОперации, КоличествоПунктов);
КонецПроцедуры

&НаКлиенте
Процедура ПодборЗаказов(Команда)
	
	ЕстьЗаказыВДокументе = Ложь;
	
	ДатаВыезда = Неопределено;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя") И РежимОтображенияДерево Тогда 
		Если ЗаказыДерево.ПолучитьЭлементы().Количество() Тогда 
			ДатаВыезда = ЗаказыДерево.ПолучитьЭлементы()[0].ПрибытиеПлан;
			ЕстьЗаказыВДокументе = Истина;
		КонецЕсли;
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя") И Не РежимОтображенияДерево Тогда 
		Если Объект.Заказы.Количество() Тогда 
			ДатаВыезда = Объект.Заказы[0].ПрибытиеПлан;
			ЕстьЗаказыВДокументе = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьЗаказыВДокументе Тогда 
		ТекстНСТР = НСтр("en='Clear the list of orders before the selection?';ru='Очистить список заказов перед подбором?'");
		Оповещение = Новый ОписаниеОповещения("ПодборЗаказовОчисткаТЧ", ЭтотОбъект, ДатаВыезда);
		ПоказатьВопрос(Оповещение, ТекстНСТР, РежимДиалогаВопрос.ДаНетОтмена);
	Иначе 
		ПодборЗаказовОткрытьФормуПодбора(ДатаВыезда);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоматическийПересчетВремени(Команда)
	
	Если Объект.ПересчетВремени = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	Объект.ПересчетВремени = 0;
	
	СохранитьНастройкиФормы();
	УстановитьВидимостьИДоступностьЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура РучнойПересчетВремени(Команда)
	
	Если Объект.ПересчетВремени = 1 Тогда 
		Возврат;
	КонецЕсли;
	
	Объект.ПересчетВремени = 1;
	
	СохранитьНастройкиФормы();
	УстановитьВидимостьИДоступностьЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура Планировщик(Команда)
	
	Элементы.ФормаПланировщик.Пометка = Не Элементы.ФормаПланировщик.Пометка;
	
	УстановитьВидимостьИДоступностьЭлементовФормы();
	
	ОбновитьДанныеНаПланировщике();
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаТары(Команда)
	
	ДанныеПоТаре = ПолучитьДанныеПоТаре();
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Тара", ДанныеПоТаре);
	
	ОткрытьФорму("ОбщаяФорма.уатРасшифровкаТары", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьРасходГСМ(Команда)
	Если НЕ ЗначениеЗаполнено(Объект.ТС) Тогда
		ТекстНСТР = НСтр("en='Vehicle not specified';ru='Не указано ТС'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
	КонецЕсли;
		
	Если НЕ ЗначениеЗаполнено(Объект.ОсновноеТопливо) И ЗначениеЗаполнено(Объект.ТС) Тогда
		Объект.ОсновноеТопливо = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.ТС, "Модель"), "ОсновноеТопливо");
	КонецЕсли;
	
	//Если НЕ ЗначениеЗаполнено(Объект.ОсновноеТопливо) Тогда
	//	ТекстНСТР = НСтр("en='Main fuel of vehicle isn`t fill'; ru='Не указано основное топливо ТС'");
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
	//КонецЕсли;
	
	РасчетРасходаГСМСервер();
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаРасходаГСМ(Команда)
	СписокНормРасхода = Новый СписокЗначений;
	Отказ = Ложь;
	
	РасчетРасходаГСМСервер(Отказ, СписокНормРасхода);
	
	Если Не Отказ Тогда
		ПараметрыОткрытия = Новый Структура("ТС, ДатаВыезда, СписокНормРасхода, ЭтоТЖ", Объект.ТС, Объект.Дата, СписокНормРасхода, Ложь);
		ОткрытьФорму("Документ.уатПутевойЛист.Форма.РасшифровкаНормыРасходаГСМ", ПараметрыОткрытия, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДоговорКонтрагента(Команда)
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Оповещ = Новый ОписаниеОповещения("СоздатьДоговорКонтрагентаВопрос", ЭтотОбъект);
		ПоказатьВопрос(Оповещ, "Будет создан и подставлен в документ новый договор. Продолжить?", РежимДиалогаВопрос.ОКОтмена);
	Иначе
		СоздатьДоговорКонтрагентаЗавершение();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДоговорКонтрагентаВопрос(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.ОК Тогда
		СоздатьДоговорКонтрагентаЗавершение();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДоговорКонтрагентаЗавершение()
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Владелец", Объект.Контрагент);
	ПараметрыЗаполнения.Вставить("Контрагент", Объект.Контрагент);
	ПараметрыЗаполнения.Вставить("Организация", Объект.Организация);
	Объект.ДоговорКонтрагента = уатНастройкиШаблонов.СоздатьДоговорКонтрагентаПоШаблону(ПараметрыЗаполнения, "2", Истина);
	ДоговорКонтрагентаПриИзменении(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура НастроитьШаблонДоговора(Команда)
	ПараметрыФормы = Новый Структура("ОбъектНастройки, ОбъектДоговора", "Справочник_ДоговорыКонтрагентов", "2");
	ОткрытьФорму("ОбщаяФорма.уатНастройкаШаблона", ПараметрыФормы, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСекции(Команда)
	
	ПараметрыФормы = Новый Структура();
	
	НастройкиАРМЛогиста = ПолучитьНастройкиМаршрутизации(Объект.ШаблонНастроек);
	ПараметрыФормы.Вставить("СмешиватьГрузыВСекциях", НастройкиАРМЛогиста.НастройкаСмешиватьГрузыВСекциях);
	
	ПараметрыФормы.Вставить("ТС",      Объект.ТС);
	ПараметрыФормы.Вставить("Прицеп1", Объект.Прицеп1);
	ПараметрыФормы.Вставить("Прицеп2", Объект.Прицеп2);
	
	ПараметрыФормы.Вставить("Заказы", Новый Массив());
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя") И РежимОтображенияДерево Тогда 
		Для Каждого СтрокаПункта Из ЗаказыДерево.ПолучитьЭлементы() Цикл 
			Для Каждого СтрокаЗаказа Из СтрокаПункта.ПолучитьЭлементы() Цикл 
				Если Не СтрокаЗаказа.ТипТочкиМаршрута = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Погрузка") Тогда 
					Продолжить;
				КонецЕсли;
				
				Если СтрокаЗаказа.ПолучитьЭлементы().Количество() = 0 Тогда 
					ДанныеЗаказа = Новый Структура();
					ДанныеЗаказа.Вставить("GUIDСтроки", СтрокаЗаказа.GUIDСтроки);
					ДанныеЗаказа.Вставить("Заказ",      СтрокаЗаказа.ЗаказГрузоотправителя);
					ДанныеЗаказа.Вставить("Груз",       Неопределено);
					ДанныеЗаказа.Вставить("Объем",      СтрокаЗаказа.Объем);
					ПараметрыФормы.Заказы.Добавить(ДанныеЗаказа);
					
				Иначе 
					Для Каждого СтрокаГруза Из СтрокаЗаказа.ПолучитьЭлементы() Цикл 
						ДанныеЗаказа = Новый Структура();
						ДанныеЗаказа.Вставить("GUIDСтроки", СтрокаГруза.GUIDСтроки);
						ДанныеЗаказа.Вставить("Заказ",      СтрокаГруза.ЗаказГрузоотправителя);
						ДанныеЗаказа.Вставить("Груз",       СтрокаГруза.ПунктЗаказНоменклатура);
						ДанныеЗаказа.Вставить("Объем",      СтрокаГруза.Объем);
						ПараметрыФормы.Заказы.Добавить(ДанныеЗаказа);
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	Иначе 
		Для Каждого ТекСтрока Из Объект.Заказы Цикл 
			Если Не ТекСтрока.ТипТочкиМаршрута = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Погрузка") Тогда 
				Продолжить;
			КонецЕсли;
			
			ДанныеЗаказа = Новый Структура();
			ДанныеЗаказа.Вставить("GUIDСтроки", ТекСтрока.GUIDСтроки);
			ДанныеЗаказа.Вставить("Заказ",      ТекСтрока.ЗаказГрузоотправителя);
			ДанныеЗаказа.Вставить("Груз",       ТекСтрока.Номенклатура);
			ДанныеЗаказа.Вставить("Объем",      ТекСтрока.Объем);
			ПараметрыФормы.Заказы.Добавить(ДанныеЗаказа);
		КонецЦикла;
	КонецЕсли;
	
	ПараметрыФормы.Вставить("Секции", Новый Массив());
	Для Каждого ТекСтрока Из Объект.Секции Цикл 
		ДанныеСекции = Новый Структура();
		ДанныеСекции.Вставить("GUIDСтроки", ТекСтрока.GUIDСтроки);
		ДанныеСекции.Вставить("Секция",     ТекСтрока.Секция);
		ДанныеСекции.Вставить("Объем",      ТекСтрока.Объем);
		ПараметрыФормы.Секции.Добавить(ДанныеСекции);
	КонецЦикла;
	
	ОткрытьФорму(
		"Обработка.уатМастерРаспределенияГрузовПоСекциям.Форма", 
		ПараметрыФормы, 
		ЭтотОбъект,
		,
		,
		,
		Новый ОписаниеОповещения("ПослеРаспределенияЗаказовПоСекциям", ЭтотОбъект),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПереместитьВверх(Команда)
	
	ТекСтрока = Элементы.ЗаказыДерево.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекСтрокаРодитель = ТекСтрока.ПолучитьРодителя();
	Если ТекСтрокаРодитель = Неопределено Тогда 
		ТекСтрокаРодитель = ЗаказыДерево;
	КонецЕсли;
	
	ИндексПункта = ТекСтрокаРодитель.ПолучитьЭлементы().Индекс(ТекСтрока);
	Если ИндексПункта = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПеремещениеВозможно = Истина;
	СтрокаПунктПриемник = ТекСтрокаРодитель.ПолучитьЭлементы()[ИндексПункта - 1];
	Для Каждого ТекСтрокаЗаказ Из ТекСтрока.ПолучитьЭлементы() Цикл
		ПеремещениеВозможно = ПроверитьВозможностьПеретаскиванияЗаказаВМаршрутах(ТекСтрокаЗаказ, ТекСтрока, СтрокаПунктПриемник);
		Если Не ПеремещениеВозможно Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если Не ПеремещениеВозможно Тогда
		Возврат;
	КонецЕсли;
	
	Если ИндексПункта = 1 Тогда
		ТекСтрокаРодитель.ПолучитьЭлементы().Сдвинуть(ИндексПункта, -1);
	Иначе
		ПровСтрокаСверху = ТекСтрокаРодитель.ПолучитьЭлементы()[ИндексПункта - 2];
		Если ПровСтрокаСверху.ПунктЗаказНоменклатура = ТекСтрока.ПунктЗаказНоменклатура Тогда
			Для Каждого ТекСтрокаЗаказ Из ТекСтрока.ПолучитьЭлементы() Цикл
				НовСтрока = ПровСтрокаСверху.ПолучитьЭлементы().Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрока, ТекСтрокаЗаказ);
			КонецЦикла;
			ТекСтрокаРодитель.ПолучитьЭлементы().Удалить(ИндексПункта);
		Иначе
			ТекСтрокаРодитель.ПолучитьЭлементы().Сдвинуть(ИндексПункта, -1);
		КонецЕсли;
	КонецЕсли;
	
	СтрокаПунктПриемникРодитель = СтрокаПунктПриемник.ПолучитьРодителя();
	Если СтрокаПунктПриемникРодитель = Неопределено Тогда 
		СтрокаПунктПриемникРодитель = ЗаказыДерево;
	КонецЕсли;
	
	ИндексПриемник = СтрокаПунктПриемникРодитель.ПолучитьЭлементы().Индекс(СтрокаПунктПриемник);
	Если ИндексПриемник = СтрокаПунктПриемникРодитель.ПолучитьЭлементы().Количество() - 1 Тогда
		Возврат;
	Иначе
		СтрокаПунктНиже = СтрокаПунктПриемникРодитель.ПолучитьЭлементы()[ИндексПриемник + 1];
		Если СтрокаПунктНиже.ПунктЗаказНоменклатура = СтрокаПунктПриемник.ПунктЗаказНоменклатура Тогда
			Для Каждого ТекСтрокаЗаказ Из СтрокаПунктПриемник.ПолучитьЭлементы() Цикл
				НовСтрока = СтрокаПунктНиже.ПолучитьЭлементы().Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрока, ТекСтрокаЗаказ);
			КонецЦикла;
			СтрокаПунктПриемникРодитель.ПолучитьЭлементы().Удалить(ИндексПриемник);
		КонецЕсли;
	КонецЕсли;
	
	Модифицированность = Истина;
	РасстоянияТЧЗаказы(Неопределено);
	
	ОбновитьМаршрутныеПараметрыДереваЗаказов();
	ОбновитьГрузовыеПараметрыДереваЗаказов();
	
	РассчитатьМаршрутныеПоказатели();
	ОбновитьНадписьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПереместитьВниз(Команда)
	
	ТекСтрока = Элементы.ЗаказыДерево.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекСтрокаРодитель = ТекСтрока.ПолучитьРодителя();
	Если ТекСтрокаРодитель = Неопределено Тогда 
		ТекСтрокаРодитель = ЗаказыДерево;
	КонецЕсли;
	
	ИндексПункта = ТекСтрокаРодитель.ПолучитьЭлементы().Индекс(ТекСтрока);
	Если ИндексПункта = ТекСтрокаРодитель.ПолучитьЭлементы().Количество() - 1 Тогда
		Возврат;
	КонецЕсли;
	
	ПеремещениеВозможно = Истина;
	СтрокаПунктПриемник = ТекСтрокаРодитель.ПолучитьЭлементы()[ИндексПункта + 1];
	Для Каждого ТекСтрокаЗаказ Из ТекСтрока.ПолучитьЭлементы() Цикл
		ПеремещениеВозможно = ПроверитьВозможностьПеретаскиванияЗаказаВМаршрутах(ТекСтрокаЗаказ, ТекСтрока, СтрокаПунктПриемник);
		Если Не ПеремещениеВозможно Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если Не ПеремещениеВозможно Тогда
		Возврат;
	КонецЕсли;
	
	Если ИндексПункта = ТекСтрокаРодитель.ПолучитьЭлементы().Количество() - 2 Тогда
		ТекСтрокаРодитель.ПолучитьЭлементы().Сдвинуть(ИндексПункта, 1);
	Иначе
		ПровСтрокаСнизу = ТекСтрокаРодитель.ПолучитьЭлементы()[ИндексПункта + 1];
		Если ПровСтрокаСнизу.ПунктЗаказНоменклатура = ТекСтрока.ПунктЗаказНоменклатура Тогда
			Для Каждого ТекСтрокаЗаказ ИЗ ТекСтрока.ПолучитьЭлементы() Цикл
				НовСтрока = ПровСтрокаСнизу.ПолучитьЭлементы().Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрока, ТекСтрокаЗаказ);
			КонецЦикла;
			ТекСтрокаРодитель.ПолучитьЭлементы().Удалить(ИндексПункта);
		Иначе
			ТекСтрокаРодитель.ПолучитьЭлементы().Сдвинуть(ИндексПункта, 1);
		КонецЕсли;
	КонецЕсли;
	
	СтрокаПунктПриемникРодитель = СтрокаПунктПриемник.ПолучитьРодителя();
	Если СтрокаПунктПриемникРодитель = Неопределено Тогда 
		СтрокаПунктПриемникРодитель = ЗаказыДерево;
	КонецЕсли;
	
	ИндексПриемник = СтрокаПунктПриемникРодитель.ПолучитьЭлементы().Индекс(СтрокаПунктПриемник);
	Если ИндексПриемник = 0 Тогда
		Возврат;
	Иначе
		СтрокаПунктВыше = СтрокаПунктПриемникРодитель.ПолучитьЭлементы()[ИндексПриемник - 1];
		Если СтрокаПунктВыше.ПунктЗаказНоменклатура = СтрокаПунктПриемник.ПунктЗаказНоменклатура Тогда
			Для Каждого ТекСтрокаЗаказ Из СтрокаПунктПриемник.ПолучитьЭлементы() Цикл
				НовСтрока = СтрокаПунктВыше.ПолучитьЭлементы().Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрока, ТекСтрокаЗаказ);
			КонецЦикла;
			СтрокаПунктПриемникРодитель.ПолучитьЭлементы().Удалить(ИндексПриемник);
		КонецЕсли;
	КонецЕсли;
	
	Модифицированность = Истина;
	РасстоянияТЧЗаказы(Неопределено);
	
	ОбновитьМаршрутныеПараметрыДереваЗаказов();
	ОбновитьГрузовыеПараметрыДереваЗаказов();
	
	РассчитатьМаршрутныеПоказатели();
	ОбновитьНадписьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура УтвердитьМаршрут(Команда)
	//Элементы.ГруппаСтатусДокумента.ТекущаяСтраница = Элементы.ГруппаДатаИВремяОтправления;
	Элементы.ГруппаСозданАтоматически.Видимость = Ложь;
	Объект.СозданАвтоматически = Ложь;
	Модифицированность         = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьМетрики(Команда)
	ОткрытьФорму("Документ.уатМаршрутныйЛист.Форма.ФормаМетрики",Новый Структура("ЭтапМаршрутизации, ТС, МЛ", Объект.ЭтапМаршрутизации, Объект.ТС, Объект.Ссылка),ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЦеныИВалюту(Команда)
	ОбработатьИзмененияПоКнопкеЦеныИВалюты(Новый ОписаниеОповещения("РедактироватьЦеныИВалютуЗавершение", ЭтотОбъект), Объект.ВалютаДокумента);
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЦеныИВалютуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПолучателейУведомлений(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Документ", Объект);
	ПараметрыФормы.Вставить("ТипДокумента", ПредопределенноеЗначение("Перечисление.уатТипыОбъектовДляУведомлений_уэ.МаршрутныйЛист"));
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ПолучателиУведомленийЗакрытиеФормы", ЭтаФорма);
	
	ОткрытьФорму("Документ.уатПотребностьВПеревозке_уэ.Форма.ФормаПолучателейУведомлений",
		ПараметрыФормы,
		ЭтаФорма,,,,
		ОписаниеОповещенияОЗакрытии,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
КонецПроцедуры

#Область ОбработчикиКомандФормыСопроводительныеДокументы

&НаКлиенте
Процедура СопроводительныеДокументыДобавить(Команда)
	Если Объект.Ссылка.Пустая() Тогда
		ДопПараметры = Новый Структура("ИмяКоманды", "Добавить");
		СопроводительныеДокументыВопросПриВводеНовогоМЛ(ДопПараметры);
	Иначе 
		СопроводительныеДокументыДобавитьОкончание();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СопроводительныеДокументыВопросПриВводеНовогоМЛ(ДопПараметры)
	ТекстВопроса = "Перед выполнением операции Маршутный лист будет записан. Продолжить?";
	Оповещение = Новый ОписаниеОповещения("СопроводительныеДокументыВопросПриВводеНовогоМЛОтвет", ЭтотОбъект, ДопПараметры);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
КонецПроцедуры

&НаКлиенте
Процедура СопроводительныеДокументыВопросПриВводеНовогоМЛОтвет(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Если НЕ (ПроверитьЗаполнение() И Записать()) Тогда 
			Возврат;
		КонецЕсли;
		
		Если ТипЗнч(ДопПараметры) = Тип("Структура") И ДопПараметры.Свойство("ИмяКоманды") Тогда
			Если ДопПараметры.ИмяКоманды = "Добавить" Тогда
				СопроводительныеДокументыДобавитьОкончание();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СопроводительныеДокументыДобавитьОкончание()
	ЗначенияЗаполнения = Новый Структура("ВладелецДокумента, Основание", Объект.Контрагент, Объект.Ссылка);
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	ОткрытьФорму("Справочник.уатСопроводительныеДокументы.Форма.ФормаЭлемента", ПараметрыФормы, ЭтотОбъект,,,,
		Новый ОписаниеОповещения("СопроводительныеДокументыОбновить", ЭтотОбъект));
КонецПроцедуры

&НаКлиенте
Процедура СопроводительныеДокументыУстановитьСтатус(Команда)
	мсвВыделенныеСтроки = Элементы.СтатусыСД.ВыделенныеСтроки;
	Если мсвВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураЗаполнения = Новый Структура("СопроводительныеДокументы", СопроводительныеДокументыВыделенныеСД(мсвВыделенныеСтроки));
	ПараметрыФормы = Новый Структура("УстановкаСтатусаИзЗаказа", СтруктураЗаполнения);
	ОткрытьФорму("Документ.уатУстановкаСтатусовСопроводительныхДокументов.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект,,,,
		Новый ОписаниеОповещения("СопроводительныеДокументыОбновить", ЭтотОбъект));
КонецПроцедуры

&НаКлиенте
Процедура СопроводительныеДокументыПринятьДокументыЗаказчика(Команда)
	списЗаказчики = СопроводительныеДокументыПолучитьЗаказчиковПоРейсу();
	
	Если списЗаказчики.Количество() = 0 Тогда
		Возврат;
	ИначеЕсли списЗаказчики.Количество() > 1 Тогда
		Оповещ = Новый ОписаниеОповещения("СопроводительныеДокументыПринятьДокументыЗаказчикаВыбор", ЭтотОбъект);
		списЗаказчики.ПоказатьВыборЭлемента(Оповещ, "Выберите заказчика");
		Возврат;
	КонецЕсли;
	
	СопроводительныеДокументыПринятьДокументыКонтрагента(списЗаказчики[0].Значение);
КонецПроцедуры

&НаКлиенте
Процедура СопроводительныеДокументыПринятьДокументыЗаказчикаВыбор(Результат, ДопПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		СопроводительныеДокументыПринятьДокументыКонтрагента(Результат.Значение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СопроводительныеДокументыПринятьДокументыПеревозчика(Команда)
	Если Объект.ПринадлежностьПеревозки = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Привлеченное") Тогда
		Перевозчик = Объект.Контрагент;
	Иначе
		Перевозчик = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
	КонецЕсли;
	
	СопроводительныеДокументыПринятьДокументыКонтрагента(Перевозчик);
КонецПроцедуры

&НаКлиенте
Процедура СопроводительныеДокументыПринятьДокументыПоПункту(Команда)
	списПункты = СопроводительныеДокументыПолучитьПунктыПоРейсу();
	
	Если списПункты.Количество() = 0 Тогда
		Возврат;
	ИначеЕсли списПункты.Количество() > 1 Тогда
		Оповещ = Новый ОписаниеОповещения("СопроводительныеДокументыПринятьДокументыЗаказчикаВыбор", ЭтотОбъект);
		списПункты.ПоказатьВыборЭлемента(Оповещ, "Выберите пункт");
		Возврат;
	КонецЕсли;
	
	СопроводительныеДокументыПринятьДокументыКонтрагента(списПункты[0].Значение);
КонецПроцедуры

&НаКлиенте
Процедура СопроводительныеДокументыЗаполнитьДокументыПоШаблону(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		Оповещ = Новый ОписаниеОповещения("СопроводительныеДокументыЗаполнитьДокументыПоШаблонуОтвет", ЭтотОбъект);
		ПоказатьВопрос(Оповещ, "Перед выполнением операции документ будет записан. Продолжить?",
			РежимДиалогаВопрос.ОКОтмена);
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Справочник.уатШаблоныДокументов_уэ.ФормаВыбора",, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СопроводительныеДокументыЗаполнитьДокументыПоШаблонуОтвет(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Рез = Записать();
		Если Рез Тогда
			ОткрытьФорму("Справочник.уатШаблоныДокументов_уэ.ФормаВыбора",, ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СопроводительныеДокументыЗаполнитьДокументыПоШаблонуЗавершение(Шаблон)
	мсвТЧВидыСД = СопроводительныеДокументыВидыДокументовПоШаблону(Шаблон);
	
	Для Каждого ТекВидДокумента Из мсвТЧВидыСД Цикл
		Если НЕ ЗначениеЗаполнено(ТекВидДокумента.ВидДокумента) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить("Основание",             Объект.Ссылка);
		ЗначенияЗаполнения.Вставить("ВидДокумента",          ТекВидДокумента.ВидДокумента);
		ЗначенияЗаполнения.Вставить("ДатаДокумента",         ТекущаяДата());
		ЗначенияЗаполнения.Вставить("КоличествоЭкземпляров", ТекВидДокумента.Количество);
		ЗначенияЗаполнения.Вставить("Комментарий",           ТекВидДокумента.Комментарий);
		
		ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
		ОткрытьФорму("Справочник.уатСопроводительныеДокументы.ФормаОбъекта", ПараметрыФормы,, Истина,,,
			Новый ОписаниеОповещения("СопроводительныеДокументыОбновить", ЭтотОбъект),
			РежимОткрытияОкнаФормы.Независимый);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СопроводительныеДокументыУдалить(Команда)
	ТекСтрокаСтатусыСД = Элементы.СтатусыСД.ТекущиеДанные;
	Если ТекСтрокаСтатусыСД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДопПараметры = Новый Структура("СопроводительныйДокумент", ТекСтрокаСтатусыСД.СопроводительныйДокумент);
	Оповещение = Новый ОписаниеОповещения("СопроводительныеДокументыУдалитьОтвет", ЭтотОбъект, ДопПараметры);
	ПоказатьВопрос(Оповещение, "Сопроводительный документ будет помечен на удаление, история статусов удалена. Продолжить?", РежимДиалогаВопрос.ОКОтмена);
КонецПроцедуры

&НаКлиенте
Процедура СопроводительныеДокументыУдалитьОтвет(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.ОК Тогда
		флОтказ = Ложь;
		ТекстОшибки = "";
		УдалитьСопроводительныйДокумент(ДопПараметры.СопроводительныйДокумент, флОтказ, ТекстОшибки);
		Если флОтказ Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Иначе
			СопроводительныеДокументыОбновить();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СопроводительныеДокументыОбновитьКоманда(Команда)
	СопроводительныеДокументыОбновить();
КонецПроцедуры

&НаКлиенте
Процедура СопроводительныеДокументыПринятьВсеДокументы(Команда)
	мсвСД = СопроводительныеДокументыПоРейсу(Объект.Ссылка);
	Если мсвСД.Количество() = 0 Тогда
		ТекстСообщения = "По текущему Маршрутному листу все сопроводительные документы приняты или отсутствуют";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	СтруктураЗаполнения = Новый Структура("СопроводительныеДокументы, Статус",
		СопроводительныеДокументыПоРейсу(Объект.Ссылка),
		ПредопределенноеЗначение("Справочник.уатСтатусы_уэ.ОбработкаЗавершена"));
	ПараметрыФормы = Новый Структура("УстановкаСтатусаИзЗаказа", СтруктураЗаполнения);
	ОткрытьФорму("Документ.уатУстановкаСтатусовСопроводительныхДокументов.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект,,,,
		Новый ОписаниеОповещения("СопроводительныеДокументыОбновить", ЭтотОбъект));
КонецПроцедуры

&НаКлиенте
Процедура СопроводительныеДокументыОтменитьПринятиеВсехДокументов(Команда)
	Оповещ = Новый ОписаниеОповещения("СопроводительныеДокументыОтменитьПринятиеВсехДокументовВопрос", ЭтотОбъект);
	ПоказатьВопрос(Оповещ,
		"Будет отмено принятие всех сопроводительных документов
		|по текущему Маршрутному листу! Продолжить?", РежимДиалогаВопрос.ОКОтмена);
КонецПроцедуры

&НаКлиенте
Процедура СопроводительныеДокументыОтменитьПринятиеВсехДокументовВопрос(Результат, ДопПараметры) Экспорт
	Если Результат <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	мсвСД = СопроводительныеДокументыПоРейсу(Объект.Ссылка,, Истина);
	Если мсвСД.Количество() = 0 Тогда
		ТекстСообщения = "Не найдено принятых сопроводительных документов по текущему Маршрутному листу";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ТекстОшибки = "";
	ОтменитьПринятиеВсехСопроводительныхДокументов(мсвСД, ТекстОшибки);
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сред(ТекстОшибки, 2));
	КонецЕсли;
	СопроводительныеДокументыОбновить();
КонецПроцедуры

&НаСервере
Процедура ОтменитьПринятиеВсехСопроводительныхДокументов(мсвСД, ТекстОшибки)
	Для Каждого ТекСД Из мсвСД Цикл
		// Если СД входит в Пакет, то нельзя отменять его принятие, поскольку нельзя изменять Пакет программно, только вручную
		Если ЗначениеЗаполнено(ТекСД.ПакетДокументов) Тогда
			ТекстОшибки = ТекстОшибки + СтрШаблон("
				|Сопроводительный документ ""%1"": включен в ""%2"", изменение статуса запрещено!",
				ТекСД.СопроводительныйДокумент,
				ТекСД.ПакетДокументов);
		Иначе
			ДокУстановкаСтатусов = ТекСД.Регистратор.ПолучитьОбъект();
			
			Если ДокУстановкаСтатусов.СопроводительныеДокументы.Количество() = 1 Тогда
				// Если СД в УстановкеСтатусов один, то просто отменяем проведение
				Попытка
					ДокУстановкаСтатусов.УстановитьПометкуУдаления(Истина);
				Исключение
					ТекстОшибки = ТекстОшибки + СтрШаблон("
						|Сопроводительный документ ""%1"": не удалось установить пометку удаления ""%2"". " + ИнформацияОбОшибке().Описание,
						ТекСД.СопроводительныйДокумент,
						ТекСД.Регистратор);
				КонецПопытки;
			Иначе
				// Если в УстановкеСтатусов есть другие СД, то отменять проведение нельзя, это вызовет отмену принятия других СД!
				// Поэтому удаляем точечно строку с этим СД и перепроводим.
				мсвСтрокУдалить = ДокУстановкаСтатусов.СопроводительныеДокументы.НайтиСтроки(
					Новый Структура("СопроводительныйДокумент", ТекСД.СопроводительныйДокумент));
					
				Для Каждого ТекСтрокаУдалить Из мсвСтрокУдалить Цикл
					ДокУстановкаСтатусов.СопроводительныеДокументы.Удалить(ТекСтрокаУдалить);
				КонецЦикла;
				Попытка
					ДокУстановкаСтатусов.Записать(РежимЗаписиДокумента.Проведение);
				Исключение
					ТекстОшибки = ТекстОшибки + СтрШаблон("
						|Сопроводительный документ ""%1"": не удалось записать ""%2"". " + ИнформацияОбОшибке().Описание,
						ТекСД.СопроводительныйДокумент,
						ТекСД.Регистратор);
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СопроводительныеДокументыУстановитьСрокОбработки(Команда)
	мсвВыделенныеСтроки = Элементы.СтатусыСД.ВыделенныеСтроки;
	Если мсвВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	Оповещ = Новый ОписаниеОповещения("СопроводительныеДокументыУстановитьСрокОбработкиОтвет", ЭтотОбъект);
	ПоказатьВводДаты(Оповещ,, "Введите срок обработки", ЧастиДаты.Дата);
КонецПроцедуры

&НаКлиенте
Процедура СопроводительныеДокументыУстановитьСрокОбработкиОтвет(Результат, ДопПараметры) Экспорт
	Если ЗначениеЗаполнено(Результат) Тогда
		мсвВыделенныеСтроки = Элементы.СтатусыСД.ВыделенныеСтроки;
		ТекстОшибки = "";
		СопроводительныеДокументыУстановитьСрокОбработкиСервер(мсвВыделенныеСтроки, Результат, ТекстОшибки);
		
		Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сред(ТекстОшибки, 2));
		КонецЕсли;
		
		СопроводительныеДокументыОбновить();
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СопроводительныеДокументыУстановитьСрокОбработкиСервер(мсвВыделенныеСтроки, ПлановаяДатаОбработки, ТекстОшибки)
	Для Каждого ТекСтрока Из мсвВыделенныеСтроки Цикл
		ТекСД = ТекСтрока.СопроводительныйДокумент.ПолучитьОбъект();
		ТекСД.ПлановаяДатаОбработкиВручную = Истина;
		ТекСД.ПлановаяДатаОбработки = ПлановаяДатаОбработки;
		
		Попытка
			ТекСД.Записать();
		Исключение
			ТекстОшибки = ТекстОшибки + СтрШаблон("
				|Сопроводительный документ ""%1"" не удалось записать: " + ИнформацияОбОшибке().Описание,
				ТекСтрока.СопроводительныйДокумент);
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СопроводительныеДокументыУведомитьПеревозчика(Команда)
	Если Объект.Ссылка.Пустая() Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Операция доступна только для записанного документа.");
		Возврат;
	ИначеЕсли Объект.ПринадлежностьПеревозки <> ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Привлеченное") Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Операция доступна только для привлеченного ТС.");
		Возврат;
	КонецЕсли;
	
	мсвСД = СопроводительныеДокументыПоРейсу(Объект.Ссылка, Объект.Контрагент);
	Если мсвСД.Количество() = 0 Тогда
		ТекстСообщения = "По текущему Маршрутному листу все сопроводительные документы перевозчика приняты или отсутствуют.";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ДопПараметры = Новый Структура("ТекстСозданияУведомления", "");
	уатОбщегоНазначения_уэ.СформироватьУведомление(Объект.Ссылка,
		ПредопределенноеЗначение("Перечисление.уатТипыСобытийДляУведомления_уэ.УведомлениеПеревозчикуПоСопроводительнымДокументам"),
		ДопПараметры);
	Если НЕ ПустаяСтрока(ДопПараметры.ТекстСозданияУведомления) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ДопПараметры.ТекстСозданияУведомления);
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Уведомление не было создано, проверьте настройки создания уведомлений!");
	КонецЕсли;		
КонецПроцедуры

&НаКлиенте
Процедура ПеревыставитьЗаказчику(Команда)
	
	ТекДанные = Элементы.ПолучаемыеУслуги.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		ТекстСообщения = НСтр(" ru = 'Для перевыставления расходов заказчику перевозки выберите одну из строк расходов'; en = ''");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	Иначе
		ОперацияРучноеЗаполнение = Ложь;
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийМаршрутныйЛист.Произвольный") Тогда
			ОперацияРучноеЗаполнение = Истина;
		КонецЕсли;
		МассивЗаказовНаТС = ПолучитьМассивЗаказовНаТС();
		
		ПараметрыФормы = Новый Структура("МаршрутныйЛист, ЗаказНаТС, ТекущаяСумма, МассивЗаказов, ОперацияРучноеЗаполнение", Объект.Ссылка, ТекДанные.ЗаказНаТС, ТекДанные.Сумма, МассивЗаказовНаТС, ОперацияРучноеЗаполнение); 
		ДопПараметры = Новый Структура("ТекДанныеСтроки", ТекДанные);
		ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ПеревыставитьЗаказчикуЗакрытие", ЭтотОбъект, ДопПараметры);
		ОткрытьФорму("Документ.уатЗаказГрузоотправителя.Форма.ФормаПеревыставленияРасходовЗаказчикуПеревозки", ПараметрыФормы, ЭтотОбъект,,,,
						ОписаниеОповещенияОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормыЗарплата

&НаКлиенте
Процедура РассчитатьЗарплату(Команда)
	РассчитатьЗарплатуСервер();
КонецПроцедуры

&НаСервере
Процедура РассчитатьЗарплатуСервер()
	Документы.уатМаршрутныйЛист.РасчетЗП(Объект);
	ОтобразитьСводнуюЗП(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормыВыработка

&НаКлиенте
Процедура ОтображениеВыработкиСводноПриИзменении(Элемент)
	Если ОтображениеВыработкиСводно Тогда
		Элементы.ГруппаВыработкаСводнаяКомПанель.Видимость   = Истина;
		Элементы.ГруппаВыработкаПодробнаяКомПанель.Видимость = Ложь;
		Элементы.ГруппаВыработкаСтраницы.ТекущаяСтраница     = Элементы.ГруппаВыработкаСтраницыСводно;
	Иначе
		Элементы.ГруппаВыработкаСводнаяКомПанель.Видимость   = Ложь;
		Элементы.ГруппаВыработкаПодробнаяКомПанель.Видимость = Истина;
		Элементы.ГруппаВыработкаСтраницы.ТекущаяСтраница     = Элементы.ГруппаВыработкаСтраницыПодробно;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура РасчетИтогов(Команда)
	// прописать проверки корректности
	
	ТекстСообщОшибки = "";
	Отказ = Ложь;
	РасчетИтоговСервер(Отказ, Ложь, ТекстСообщОшибки);
	
	//Объект.Рассчитан = НЕ Отказ;
	//ОбновитьНадписьРассчитан();
	
	Если НЕ ПустаяСтрока(ТекстСообщОшибки) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщОшибки);
	КонецЕсли;
	
	ОбновитьДинамическиеПоля(, Истина);
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя") И РежимОтображенияДерево Тогда 
		ОбновитьТипыЗначенийСтрокДереваЗаказов();
	Иначе 
		ОбновитьТипыЗначенийСтрокЗаказов();
	КонецЕсли;
	
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Процедура РасчетИтоговСервер(Отказ, флЗаписывать = Ложь, ТекстСообщОшибки = "")
	Если Объект.ВидОперации = Перечисления.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя
		И РежимОтображенияДерево Тогда
		
		ЗаписатьДеревоЗаказов();
	КонецЕсли;
		
	РассчитатьПоказателиСервер();
	
	Документы.уатМаршрутныйЛист.РасчетИтогов(Объект, Отказ);
	
	//ПроверитьТаблицуВыработкиТС(ТекстСообщОшибки);
	
	ОтобразитьСводнуюВыработку();
	ОтобразитьСводнуюЗП(ЭтотОбъект);
	РассчитатьСуммуДокумента();
	
	ОбновитьДинамическиеПоляСервер();
	ОбновитьНадписьИтоги();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРедакторЦепочкиДокументов(Команда)
	
	ЗаказНаТС = ВыбранныйЗаказ();
	
	Если ЗначениеЗаполнено(ЗаказНаТС) Тогда
		ДопПараметры = Новый Структура("ЗаказНаТС", ЗаказНаТС);
		Если Модифицированность Или Параметры.Ключ.Пустая() Тогда
			ТекстВопроса = НСтр("ru='Перед выполнением операции Маршрутный лист будет записан. Продолжить?'");
			Оповещение = Новый ОписаниеОповещения("ОткрытьРедакторЦепочкиДокументовОтвет", ЭтотОбъект, ДопПараметры);
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Иначе
			ОткрытьФорму("Обработка.уатРедакторЦепочкиДокументов_уэ.Форма.Форма", ДопПараметры, ЭтаФорма);
		КонецЕсли;
	Иначе
		ТекстНСтр = НСтр("ru = 'Для выполнения операции требуется выбрать строку, в которой заполнен Заказ на ТС'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстНСтр);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеПоЗаказуНаТС(Команда)
	
	ЗаказНаТС = ВыбранныйЗаказ();
	
	Если ЗначениеЗаполнено(ЗаказНаТС) Тогда
		Если Модифицированность Или Параметры.Ключ.Пустая() Тогда
			ТекстВопроса = НСтр("ru='Перед выполнением операции Маршрутный лист будет записан. Продолжить?'");
			Оповещение = Новый ОписаниеОповещения("ОбновитьДанныеПоЗаказуНаТСОтвет", ЭтотОбъект, ЗаказНаТС);
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Иначе
			ОбновитьДанныеПоЗаказуНаТСПродолжение(ЗаказНаТС);
			ОбновитьДанныеНаПланировщике();
			ОбновитьДинамическиеПоля();
		КонецЕсли;
	Иначе
		ТекстНСтр = НСтр("ru = 'Для выполнения операции требуется выбрать строку, в которой заполнен Заказ на ТС'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстНСтр);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьМаршрутныйЛистПоЗаказуНаТС(Команда)
	
	ЗаказНаТС = ВыбранныйЗаказ();
	
	Если ЗначениеЗаполнено(ЗаказНаТС) Тогда
		Если Модифицированность Или Параметры.Ключ.Пустая() Тогда
			ТекстВопроса = НСтр("ru='Перед выполнением операции Маршрутный лист будет записан. Продолжить?'");
			Оповещение = Новый ОписаниеОповещения("ОбновитьМаршрутныйЛистПоЗаказуНаТСОтвет", ЭтотОбъект, ЗаказНаТС);
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		Иначе
			ОбновитьМаршрутныйЛистПоЗаказуНаТСПродолжение(ЗаказНаТС);
			ОбновитьДанныеНаПланировщике();
			ОбновитьДинамическиеПоля();
			УстановитьВидимостьИДоступностьЭлементовФормы();
		КонецЕсли;
	Иначе
		ТекстНСтр = НСтр("ru = 'Для выполнения операции требуется выбрать строку, в которой заполнен Заказ на ТС'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстНСтр);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСобытие(Команда)
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстНСТР = НСтр("en='Necessary to record the document. Record?'
		|;ru='Необходимо записать документ. Записать?'");
		Оповещение = Новый ОписаниеОповещения("СоздатьСобытиеОтветНаВопросЗаписиДокумента", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстНСТР, РежимДиалогаВопрос.ОКОтмена, 30, КодВозвратаДиалога.ОК);
	Иначе
		ПараметрыОткрытия = Новый Структура("ОткрытИзДокумента,ДокументПеревозки", 
			Истина, Объект.Ссылка);
		ОткрытьФорму("РегистрСведений.уатСобытияПоПеревозке_уэ.ФормаЗаписи", ПараметрыОткрытия, Объект.Ссылка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОформитьЭТрН(Команда)
	Если Объект.Ссылка.Пустая() Тогда
		ТекстПредупреждения = НСтр("ru = 'Документ еще не записан. Ввод ЭПД возможен только на основании записанных документов.';
		|en = 'The document is not saved yet. You can enter the electronic shipping document only based on the saved documents.'");
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	уатОбменСГИСЭПДКлиент.ПроверитьИСоздатьЭТрН(Объект.Ссылка, ЭтотОбъект); 
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьЗакрепленногоПеревозчика(Команда)
	флИзмененоЗакреплениеЗаПеревозчиком = Истина;
	УстановитьВидимостьИДоступностьЭлементовФормы();
КонецПроцедуры

&НаКлиенте
Процедура РазрешитьРедактированиеПеревозчикаБезЗакрепления(Команда)
	флРазрешеноИзменениеПеревозчикаБезЗакрепления = Истина;
	УстановитьВидимостьИДоступностьЭлементовФормы();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиентеНаСервереБезКонтекста
Функция НайтиСтрокиВДереве(КоллекцияОбхода, ПараметрыОтбора, ИскатьВПодчиненных = Ложь)
	
	НайденныеСтроки = Новый Массив();
	
	Для Каждого ТекЭлемент Из КоллекцияОбхода Цикл 
		СоответствуетОтбору = Истина;
		Для Каждого ТекПараметр Из ПараметрыОтбора Цикл
			Если Не ТекЭлемент[ТекПараметр.Ключ] = ТекПараметр.Значение Тогда
				СоответствуетОтбору = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если СоответствуетОтбору Тогда 
			НайденныеСтроки.Добавить(ТекЭлемент);
		КонецЕсли;
		
		Если ИскатьВПодчиненных Тогда 
			НайденныеВПодчиненных = НайтиСтрокиВДереве(ТекЭлемент.ПолучитьЭлементы(), ПараметрыОтбора, ИскатьВПодчиненных);
			Для Каждого ТекНайденный Из НайденныеВПодчиненных Цикл 
				НайденныеСтроки.Добавить(ТекНайденный);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НайденныеСтроки;
	
КонецФункции // НайтиСтрокиВДереве()

&НаСервереБезКонтекста
Функция ЕстьПредварительныеДатыЭтапа(Заказ, ДатаОтправления, ДатаПрибытия)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Этап", Заказ);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатЭтапыМультимодальныхПеревозок_уэ.ДатаОтправленияПлан,
	|	уатЭтапыМультимодальныхПеревозок_уэ.ДатаПрибытияПлан
	|ИЗ
	|	РегистрСведений.уатЭтапыМультимодальныхПеревозок_уэ КАК уатЭтапыМультимодальныхПеревозок_уэ
	|ГДЕ
	|	уатЭтапыМультимодальныхПеревозок_уэ.Этап = &Этап";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() И ЗначениеЗаполнено(Выборка.ДатаОтправленияПлан) И ЗначениеЗаполнено(Выборка.ДатаПрибытияПлан) Тогда 
		ДатаОтправления = Выборка.ДатаОтправленияПлан;
		ДатаПрибытия    = Выборка.ДатаПрибытияПлан;
		
		Возврат Истина;
	Иначе 
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции // ЕстьПредварительныеДатыЭтапа()

&НаСервере
Процедура ЗаполнитьДатыПредварительными(ДатаПредОтправления, ДатаПредПрибытия)
	
	Для Сч = 0 По Объект.Заказы.Количество()-1 Цикл 
		ТекСтрока = Объект.Заказы[Сч];
		Если ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка
			ИЛИ ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяПогрузка Тогда 
			ТекСтрока.ПрибытиеПлан = ДатаПредОтправления;
			ТекСтрока.УбытиеПлан   = уатЗащищенныеФункцииСервер.СложитьВремя(ТекСтрока.ПрибытиеПлан, ТекСтрока.Стоянка);
			
			мВремяВПутиСек  = ДатаПредПрибытия - ТекСтрока.УбытиеПлан;
			мВремяВПутиЧас  = Цел(мВремяВПутиСек/3600);
			мВремяВПутиМин  = Цел((мВремяВПутиСек - мВремяВПутиЧас*3600)/60);
			мВремяВПути     = мВремяВПутиЧас + мВремяВПутиМин/100;
			
			ТекСтрока.Время = мВремяВПути;
		ИначеЕсли ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка
			ИЛИ ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяРазгрузка Тогда 
			ТекСтрока.ПрибытиеПлан = ДатаПредПрибытия;
			ТекСтрока.УбытиеПлан   = уатЗащищенныеФункцииСервер.СложитьВремя(ТекСтрока.ПрибытиеПлан, ТекСтрока.Стоянка);
		КонецЕсли;
		
		Если Сч = 0 Тогда 
			Объект.ДатаИВремяОтправленияПлан = ТекСтрока.УбытиеПлан;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДатыПредварительнымиДерево(ДатаПредОтправления, ДатаПредПрибытия)
	
	Если ЗаказыДерево.ПолучитьЭлементы().Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	Для Сч=0 По ЗаказыДерево.ПолучитьЭлементы().Количество()-1 Цикл 
		ТекСтрока = ЗаказыДерево.ПолучитьЭлементы()[Сч];
		
		Если Сч = 0 Тогда 
			ТекСтрока.ПрибытиеПлан = ДатаПредОтправления;
						
			мСтоянкаСтрока = 0;
			Для Каждого ПодСтрока Из ТекСтрока.ПолучитьЭлементы() Цикл 
				мСтоянкаСтрока = уатЗащищенныеФункцииСервер.СложитьВремя(мСтоянкаСтрока, ПодСтрока.Стоянка);
			КонецЦикла;
			мСтоянкаСтрока = уатЗащищенныеФункцииСервер.СложитьВремя(мСтоянкаСтрока, ТекСтрока.СтоянкаИзПункта);
			
			ТекСтрока.УбытиеПлан = уатЗащищенныеФункцииСервер.СложитьВремя(ТекСтрока.ПрибытиеПлан, мСтоянкаСтрока);
			мВремяВПутиСек  = ДатаПредПрибытия - ТекСтрока.УбытиеПлан;
						
			мВремяВПутиЧас  = Цел(мВремяВПутиСек/3600);
			мВремяВПутиМин  = Цел((мВремяВПутиСек - мВремяВПутиЧас*3600)/60);
			мВремяВПути     = мВремяВПутиЧас + мВремяВПутиМин/100;
			
			ТекСтрока.Время = мВремяВПути;
			Объект.ДатаИВремяОтправленияПлан = ТекСтрока.УбытиеПлан;
			
		ИначеЕсли Сч = 1 Тогда 
			ТекСтрока.ПрибытиеПлан = ДатаПредПрибытия;
						
			мСтоянкаСтрока = 0;
			Для Каждого ПодСтрока Из ТекСтрока.ПолучитьЭлементы() Цикл 
				мСтоянкаСтрока = уатЗащищенныеФункцииСервер.СложитьВремя(мСтоянкаСтрока, ПодСтрока.Стоянка);
			КонецЦикла;
			мСтоянкаСтрока = уатЗащищенныеФункцииСервер.СложитьВремя(мСтоянкаСтрока, ТекСтрока.СтоянкаИзПункта);
			
			ТекСтрока.УбытиеПлан = уатЗащищенныеФункцииСервер.СложитьВремя(ТекСтрока.ПрибытиеПлан, мСтоянкаСтрока);
						
		ИначеЕсли Сч > 1 Тогда  
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьИДоступностьЭлементовФормы()
	
	ЗаблокированоИзменениеЗакрепленногоПеревозчика = флИспользоватьЗакреплениеМЛЗаПеревозчиками
		И Не флИзмененоЗакреплениеЗаПеревозчиком 
		И Не флРазрешеноИзменениеПеревозчикаБезЗакрепления
		И Не Объект.Ссылка.Пустая()
		И Объект.ПринадлежностьПеревозки = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Привлеченное");
	Элементы.ИзменитьЗакрепленногоПеревозчика.Видимость = ЗаблокированоИзменениеЗакрепленногоПеревозчика;
	Элементы.ФормаРазрешитьРедактированиеПеревозчикаБезЗакрепления.Видимость = ЗаблокированоИзменениеЗакрепленногоПеревозчика;
	Элементы.Контрагент.Доступность = Не ЗаблокированоИзменениеЗакрепленногоПеревозчика;
	Элементы.ГруппаДоговор.Доступность = Не ЗаблокированоИзменениеЗакрепленногоПеревозчика;
	
	Если Элементы.ФормаПланировщик.Пометка Тогда 
		Элементы.ГруппаШапка.Видимость                        = Ложь;
		Элементы.ГруппаПеревозка.Видимость                    = Ложь;
		Элементы.ГруппаСтраницаОснОказываемыеУслуги.Видимость = Ложь;
		Элементы.ГруппаСтраницаОснПолучаемыеУслуги.Видимость  = Ложь;
		Элементы.СтраницаДополнительно.Видимость              = Ложь;
		Элементы.ГруппаИтоги.Видимость                        = Ложь;
		Элементы.ОтветственныйКоментарий.Видимость            = Ложь;
		
		Элементы.ГруппаСтраницыОсн.ТекущаяСтраница = Элементы.ГруппаСтраницаОснМаршрут;
		Элементы.ГруппаСтраницыОсн.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	Иначе 
		Элементы.ГруппаШапка.Видимость                        = Истина;
		Элементы.ГруппаПеревозка.Видимость                    = Истина;
		Элементы.ГруппаСтраницаОснОказываемыеУслуги.Видимость = Истина;
		Элементы.ГруппаСтраницаОснПолучаемыеУслуги.Видимость  = Истина;
		Элементы.СтраницаДополнительно.Видимость              = Истина;
		Элементы.ГруппаИтоги.Видимость                        = Истина;
		Элементы.ОтветственныйКоментарий.Видимость            = Истина;
		
		Элементы.ГруппаСтраницыОсн.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
	КонецЕсли;
	
	Элементы.ФормаОформлениеДокументов.Видимость = уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП();
	Если НЕ Элементы.ФормаОформлениеДокументов.Видимость Тогда
		Элементы.ПодменюФинансы.Вид = ВидГруппыФормы.ГруппаКнопок;
	КонецЕсли;
	
	// Рекламации
	ПоказыватьРекламации = уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП();
	Элементы.ЗаказыГруппаРекламации.Видимость = ПоказыватьРекламации;
	Элементы.Заказы1Рекламация.Видимость = ПоказыватьРекламации;
	Элементы.ЗаказыДеревоРекламация.Видимость = ПоказыватьРекламации;
	Элементы.ЗаказыДеревоРекламации.Видимость = ПоказыватьРекламации;	

	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя") Тогда 
		Элементы.ФормаОперацияПоЗаказуГрузоотправителя.Пометка = Истина;
		Элементы.ФормаОперацияПроизвольный.Пометка             = Ложь;
		Элементы.ФормаПланировщик.Видимость                    = Истина;
		
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя") И РежимОтображенияДерево Тогда 
			Элементы.ЗаказыДеревоРежимДерево.Пометка = Истина;
			Элементы.ЗаказыРежимДерево.Пометка       = Истина;
			Элементы.ЗаказыДеревоРежимСписок.Пометка = Ложь;
			Элементы.ЗаказыРежимСписок.Пометка       = Ложь;
			Элементы.ГруппаСтраницы.ТекущаяСтраница  = Элементы.ГруппаЗаказыДерево;
		Иначе 
			Элементы.ЗаказыДеревоРежимДерево.Пометка = Ложь;
			Элементы.ЗаказыРежимДерево.Пометка       = Ложь;
			Элементы.ЗаказыДеревоРежимСписок.Пометка = Истина;
			Элементы.ЗаказыРежимСписок.Пометка       = Истина;
			Элементы.ГруппаСтраницы.ТекущаяСтраница  = Элементы.ГруппаЗаказы;
		КонецЕсли;
		
	Иначе 
		Элементы.ФормаОперацияПоЗаказуГрузоотправителя.Пометка = Ложь;
		Элементы.ФормаОперацияПроизвольный.Пометка             = Истина;
		Элементы.ФормаПланировщик.Видимость                    = Ложь;
		
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаЗаказыПроизвольный;
	КонецЕсли;
	
	Элементы.ПланировщикЗаказов.Видимость = (Элементы.ФормаПланировщик.Пометка
		И Элементы.ФормаПланировщик.Видимость);
		
	Если Объект.ПересчетВремени = 1 Тогда 
		Элементы.ЗаказыДеревоАвтоматическийПересчетВремени.Пометка = Ложь;
		Элементы.ЗаказыДеревоРучнойПересчетВремени.Пометка = Истина;
		Элементы.ЗаказыАвтоматическийПересчетВремени.Пометка = Ложь;
		Элементы.ЗаказыРучнойПересчетВремени.Пометка = Истина;
		Элементы.Заказы1АвтоматическийПересчетВремени.Пометка = Ложь;
		Элементы.Заказы1РучнойПересчетВремени.Пометка = Истина;
	Иначе 
		Элементы.ЗаказыДеревоАвтоматическийПересчетВремени.Пометка = Истина;
		Элементы.ЗаказыДеревоРучнойПересчетВремени.Пометка = Ложь;
		Элементы.ЗаказыАвтоматическийПересчетВремени.Пометка = Истина;
		Элементы.ЗаказыРучнойПересчетВремени.Пометка = Ложь;
		Элементы.Заказы1АвтоматическийПересчетВремени.Пометка = Истина;
		Элементы.Заказы1РучнойПересчетВремени.Пометка = Ложь;
	КонецЕсли;
	
	ЗаголовокКолонкиВремяПлан      = ?(флПланФакт, НСтр("en='Time (plan)';ru='Время (п)'"),          НСтр("en='Time';ru='Время'"));
	ЗаголовокКолонкиРасстояниеПлан = ?(флПланФакт, НСтр("en='Distance (plan)';ru='Расст. (п)'"),     НСтр("en='Distance';ru='Расст.'"));
	ЗаголовокКолонкиСтоянкаПлан    = ?(флПланФакт, НСтр("en='Park (plan)';ru='Ст. (п)'"),            НСтр("en='Park';ru='Ст.'"));
	ЗаголовокКолонкиОжиданиеПлан   = ?(флПланФакт, НСтр("en='Wait (plan)';ru='Ож. (п)'"),            НСтр("en='Wait';ru='Ож.'"));
	ЗаголовокКолонкиПрибытиеПлан   = ?(флПланФакт, НСтр("en='Arrival (plan)';ru='Прибытие (п)'"),    НСтр("en='Arrival';ru='Прибытие'"));
	ЗаголовокКолонкиУбытиеПлан     = ?(флПланФакт, НСтр("en='Departure (plan)';ru='Убытие (п)'"),    НСтр("en='Departure';ru='Убытие'"));
	
	Элементы.ЗаказыДеревоВремяФакт.Видимость          = флПланФакт;
	Элементы.ЗаказыДеревоРасстояниеФакт.Видимость     = флПланФакт;
	Элементы.ЗаказыДеревоСтоянкаФакт.Видимость        = флПланФакт;
	Элементы.ЗаказыДеревоОжиданиеФакт.Видимость       = флПланФакт;
	Элементы.ЗаказыДеревоГруппаПрибытиеФакт.Видимость = флПланФакт;
	Элементы.ЗаказыДеревоГруппаУбытиеФакт.Видимость   = флПланФакт;
	
	Элементы.ЗаказыДеревоВремя.Заголовок              = ЗаголовокКолонкиВремяПлан;
	Элементы.ЗаказыДеревоРасстояние.Заголовок         = ЗаголовокКолонкиРасстояниеПлан;
	Элементы.ЗаказыДеревоСтоянка.Заголовок            = ЗаголовокКолонкиСтоянкаПлан;
	Элементы.ЗаказыДеревоОжидание.Заголовок           = ЗаголовокКолонкиОжиданиеПлан;
	Элементы.ЗаказыДеревоГруппаПрибытиеПлан.Заголовок = ЗаголовокКолонкиПрибытиеПлан;
	Элементы.ЗаказыДеревоГруппаУбытиеПлан.Заголовок   = ЗаголовокКолонкиУбытиеПлан;
	
	Элементы.ЗаказыДеревоЗаполнитьФактическоеВремяПоПлану.Видимость = флПланФакт;
	
	Элементы.ЗаказыВремяФакт.Видимость          = флПланФакт;
	Элементы.ЗаказыРасстояниеФакт.Видимость     = флПланФакт;
	Элементы.ЗаказыСтоянкаФакт.Видимость        = флПланФакт;
	Элементы.ЗаказыОжиданиеФакт.Видимость       = флПланФакт;
	Элементы.ЗаказыГруппаПрибытиеФакт.Видимость = флПланФакт;
	Элементы.ЗаказыГруппаУбытиеФакт.Видимость   = флПланФакт;
		
	Элементы.ЗаказыВремя.Заголовок              = ЗаголовокКолонкиВремяПлан;
	Элементы.ЗаказыРасстояние.Заголовок         = ЗаголовокКолонкиРасстояниеПлан;
	Элементы.ЗаказыСтоянка.Заголовок            = ЗаголовокКолонкиСтоянкаПлан;
	Элементы.ЗаказыОжидание.Заголовок           = ЗаголовокКолонкиОжиданиеПлан;
	Элементы.ЗаказыГруппаПрибытиеПлан.Заголовок = ЗаголовокКолонкиПрибытиеПлан;
	Элементы.ЗаказыГруппаУбытиеПлан.Заголовок   = ЗаголовокКолонкиУбытиеПлан;
	
	Элементы.Заказы1ВремяФакт.Видимость          = флПланФакт;
	Элементы.Заказы1РасстояниеФакт.Видимость     = флПланФакт;
	Элементы.Заказы1СтоянкаФакт.Видимость        = флПланФакт;
	Элементы.Заказы1ОжиданиеФакт.Видимость       = флПланФакт;
	Элементы.Заказы1ГруппаПрибытиеФакт.Видимость = флПланФакт;
	Элементы.Заказы1ГруппаУбытиеФакт.Видимость   = флПланФакт;
	
	Элементы.Заказы1Время.Заголовок              = ЗаголовокКолонкиВремяПлан;
	Элементы.Заказы1Расстояние.Заголовок         = ЗаголовокКолонкиРасстояниеПлан;
	Элементы.Заказы1Стоянка.Заголовок            = ЗаголовокКолонкиСтоянкаПлан;
	Элементы.Заказы1Ожидание.Заголовок           = ЗаголовокКолонкиОжиданиеПлан;
	Элементы.Заказы1ГруппаПрибытиеПлан.Заголовок = ЗаголовокКолонкиПрибытиеПлан;
	Элементы.Заказы1ГруппаУбытиеПлан.Заголовок   = ЗаголовокКолонкиУбытиеПлан;
	
	Элементы.ЗаказыГруппаСтоянка.Группировка = ?(флПланФакт, ГруппировкаКолонок.Горизонтальная, ГруппировкаКолонок.Вертикальная);
	Элементы.Заказы1ГруппаСтоянка.Группировка = ?(флПланФакт, ГруппировкаКолонок.Горизонтальная, ГруппировкаКолонок.Вертикальная);
	
	Элементы.ВыработкаТСиСотрудниковКоличествоПлан.Видимость = флПланФакт;
	Элементы.ВыработкаТСиСотрудниковКоличествоФакт.Заголовок = ?(флПланФакт, "Количество (факт)", "Количество");
	Элементы.ВыработкаСводнаяКоличествоПлан.Видимость = флПланФакт;
	Элементы.ВыработкаСводнаяКоличествоФакт.Заголовок = ?(флПланФакт, "Количество (факт)", "Количество");
	
	Элементы.ЗаказыДеревоЗаполнитьПлановоеВремяИзЗаказа.Заголовок = ?(флПланФакт, "План. время из Заказа на ТС", "Время из Заказа на ТС");
	Элементы.ЗаказыДеревоРасстоянияТЧЗаказы.Заголовок = ?(флПланФакт, "План. время и расстояние по карте", "Время и расстояние по карте");
	Элементы.ЗаказыГруппаЗаполнитьПлановоеВремяИзЗаказа.Заголовок = ?(флПланФакт, "План. время из Заказа на ТС", "Время из Заказа на ТС");
	Элементы.ЗаказыРасстоянияТЧЗаказы.Заголовок = ?(флПланФакт, "План. время и расстояние по карте", "Время и расстояние по карте");
	Элементы.ЗаказыРасстоянияТЧЗаказы1.Заголовок = ?(флПланФакт, "План. время и расстояние по карте", "Время и расстояние по карте");
	Элементы.ЗаказыЗаполнитьФактическоеВремяПоПлану.Видимость = флПланФакт;
	Элементы.ЗаказыЗаполнитьФактическоеВремяПоПлану1.Видимость = флПланФакт;
	
	Если Объект.ПринадлежностьПеревозки = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Виртуальное") Тогда 
		Элементы.Водитель1.Доступность          = Ложь;
		Элементы.Сотрудник1.Доступность         = Ложь;
		Элементы.Водитель2.Доступность          = Ложь;
		Элементы.Сотрудник2.Доступность         = Ложь;
		Элементы.Контрагент.Доступность         = Ложь;
		Элементы.ДоговорКонтрагента.Доступность = Ложь;
	Иначе 
		Элементы.Водитель1.Доступность          = Истина;
		Элементы.Сотрудник1.Доступность         = Истина;
		Элементы.Водитель2.Доступность          = Истина;
		Элементы.Сотрудник2.Доступность         = Истина;
		Если ЗаблокированоИзменениеЗакрепленногоПеревозчика Тогда
			Элементы.Контрагент.Доступность     = Ложь;
			Элементы.ДоговорКонтрагента.Доступность = Ложь;
		Иначе
			Элементы.Контрагент.Доступность     = Истина;
			Элементы.ДоговорКонтрагента.Доступность = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Объект.Контрагент) <> Тип("СправочникСсылка.Организации") Тогда
		Элементы.ГруппаСтраницыДоговор.ТекущаяСтраница = Элементы.ГруппаДоговор;
	Иначе
		Элементы.ГруппаСтраницыДоговор.ТекущаяСтраница = Элементы.ГруппаДоговорПустая;
	КонецЕсли;
	
	ТекВидМоделиТС = ВидМоделиТСПоВидуПеревозки(Объект.ВидПеревозки);
	
	СкрытьВодителейСотрудников = ТекВидМоделиТС = ПредопределенноеЗначение("Перечисление.уатВидыМоделейТС.АвиационныйТранспорт")
	Или ТекВидМоделиТС = ПредопределенноеЗначение("Перечисление.уатВидыМоделейТС.ЖДТранспорт") 
	Или ТекВидМоделиТС = ПредопределенноеЗначение("Перечисление.уатВидыМоделейТС.МорскойТранспорт");
	
	Если Объект.ВидПеревозки = ПредопределенноеЗначение("Справочник.уатВидыПеревозок.Авиационная")
		ИЛИ Объект.ВидПеревозки = ПредопределенноеЗначение("Справочник.уатВидыПеревозок.Железнодорожная")
		ИЛИ Объект.ВидПеревозки = ПредопределенноеЗначение("Справочник.уатВидыПеревозок.Морская")
		Или СкрытьВодителейСотрудников Тогда 
		
		Элементы.ГруппаВодитель1.Видимость  = Ложь;
		Элементы.ГруппаВодитель2.Видимость  = Ложь;
		Элементы.ГруппаСотрудник1.Видимость = Ложь;
		Элементы.ГруппаСотрудник2.Видимость = Ложь;
	Иначе 
		Элементы.ГруппаВодитель1.Видимость  = Истина;
		Элементы.ГруппаВодитель2.Видимость  = Истина;
		Элементы.ГруппаСотрудник1.Видимость = Истина;
		Элементы.ГруппаСотрудник2.Видимость = Истина;
	КонецЕсли;
	
	Элементы.ПолучаемыеУслугиКоличествоПлан.Видимость = флИспользоватьПлановыеУслуги;
	Элементы.ПолучаемыеУслугиЦенаПлан.Видимость = флИспользоватьПлановыеУслуги;
	Элементы.ПолучаемыеУслугиСуммаПлан.Видимость = флИспользоватьПлановыеУслуги;
	Элементы.ПолучаемыеУслугиСуммаНДСПлан.Видимость = флИспользоватьПлановыеУслуги;
	Элементы.ПолучаемыеУслугиВсегоПлан.Видимость = флИспользоватьПлановыеУслуги;
	Если флИспользоватьПлановыеУслуги Тогда
		Элементы.ПолучаемыеУслугиРасчитатьПолучаемыеУслуги.Заголовок = НСтр("en='Calculate fact by tariffs';ru='Рассчитать факт по тарифам'");
		Элементы.ПолучаемыеУслугиПересчитатьРасходыВСтроке.Заголовок = НСтр("en='Recalculate the fact in current row';ru='Пересчитать факт в текущей строке'");
		Элементы.ПолучаемыеУслугиПересчитатьРасходы.Заголовок = НСтр("en='Recalculate the fact in all rows';ru='Пересчитать факт во всех строках'");
		Элементы.ПолучаемыеУслугиКоличество.Заголовок = НСтр("en='Quantity (fact)';ru='Колич. (факт)'");
		Элементы.ПолучаемыеУслугиЦена.Заголовок = НСтр("en='Price (fact)';ru='Цена (факт)'");
		Элементы.ПолучаемыеУслугиСумма.Заголовок = НСтр("en='Sum (fact)';ru='Сумма (факт)'");
		Элементы.ПолучаемыеУслугиСуммаНДС.Заголовок = НСтр("en='VAT (fact)';ru='НДС (факт)'");
		Элементы.ПолучаемыеУслугиВсего.Заголовок = НСтр("en='Total (fact)';ru='Всего (факт)'");
	Иначе
		Элементы.ПолучаемыеУслугиРасчитатьПолучаемыеУслуги.Заголовок = НСтр("en='Calculate on tariffs';ru='Рассчитать по тарифам'");
		Элементы.ПолучаемыеУслугиПересчитатьРасходыВСтроке.Заголовок = НСтр("en='Recalculate current row';ru='Пересчитать в текущей строке'");
		Элементы.ПолучаемыеУслугиПересчитатьРасходы.Заголовок = НСтр("en='Recalculate all rows';ru='Пересчитать во всех строках'");
	КонецЕсли;
	
	Элементы.ОказываемыеУслугиВалюта.ТолькоПросмотр = НЕ флМноговалютныйУчет;
	Элементы.ПолучаемыеУслугиВалюта.ТолькоПросмотр  = НЕ флМноговалютныйУчет;
		
	ВывестиСуммовыеИтогиДокумента();
	
	// Настройка интерфейса для внешнего ползователя.
	Если АвторизованВнешнийПользователь Тогда
		Элементы.ГруппаПеревозки.Видимость = Ложь;
		Элементы.ВидПеревозки.Доступность = Ложь;
		Элементы.Контрагент.ТолькоПросмотр = Истина;
		Элементы.СоздатьДоговорКонтрагента.Видимость = Ложь;
		Элементы.ГруппаДолгКонтрагента.Видимость = Ложь;
		Элементы.Прицеп1.КнопкаОткрытия = Ложь;
		Элементы.Водитель1.КнопкаОткрытия = Ложь;
		Элементы.Сотрудник1.КнопкаОткрытия = Ложь;
		Элементы.Прицеп2.КнопкаОткрытия = Ложь;
		Элементы.Водитель2.КнопкаОткрытия = Ложь;
		Элементы.Сотрудник2.КнопкаОткрытия = Ложь;
		
		Элементы.ГруппаСтраницаВыработка.ТолькоПросмотр = Истина;
		
		Элементы.ГруппаСтраницаОснОказываемыеУслуги.Видимость = Ложь;
		Элементы.ГруппаСтраницаЗарплата.Видимость = Ложь;
		Элементы.ГруппаСобытия.Видимость = Ложь;
		Элементы.СтраницаДополнительно.Видимость = Ложь;
		Элементы.СуммаДоходов.Видимость = Ложь;
		
		// Настройка командной панели для заказы.
		Элементы.ЗаказыГруппаПересчетВремени.Видимость = Ложь;
		Элементы.ЗаказыПодборЗаказов.Видимость = Ложь;
		Элементы.ЗаказыИзменение.Видимость = Ложь;
		Элементы.ЗаказыГруппаЗаполнить.Видимость = Ложь;
		Элементы.ЗаказыЗаполнитьФактПосещение.Видимость = Ложь;
		Элементы.ЗаказыОптимальноеПерестроениеЗаказов.Видимость = Ложь;
		Элементы.Заказы.КонтекстноеМеню.Видимость = Ложь;
		Элементы.ЗаказыОткрытьРедакторЦепочкиДокументов.Видимость = Ложь;
		Элементы.ЗаказыПоказатьСекции.Видимость = Ложь;
		
		// Настройка командной панели для заказыДерево.
		Элементы.ЗаказыДеревоГруппаПересчетВремени.Видимость = Ложь;
		Элементы.ЗаказыДеревоПодборЗаказов.Видимость = Ложь;
		Элементы.ЗаказыДеревоИзменение.Видимость = Ложь;
		Элементы.ЗаказыДеревоГруппаЗаполнить.Видимость = Ложь;
		Элементы.ЗаказыДеревоЗаполнитьФактПосещение.Видимость = Ложь;
		Элементы.ЗаказыДеревоОптимальноеПерестроениеЗаказов.Видимость = Ложь;
		Элементы.ЗаказыДерево.КонтекстноеМеню.Видимость = Ложь;
		Элементы.ЗаказыДеревоГруппаПересчетВремени.Видимость = Ложь;
		Элементы.ЗаказыДеревоОткрытьРедакторЦепочкиДокументов.Видимость = Ложь;
		Элементы.ФормаПоказатьСекции.Видимость = Ложь;
		
		// Настройка командной панели для заказыПроизволный.
		Элементы.Заказы1Изменение.Видимость = Ложь;
		Элементы.ЗаказыГруппаЗаполнение1.Видимость = Ложь;
		Элементы.Заказы1ГруппаПересчетВремени.Видимость = Ложь;
		
		// Блокировка элементов основной вкладки
		Элементы.Маршрут.ТолькоПросмотр = Истина;
		Элементы.НаправлениеПеревозки.ТолькоПросмотр = Истина;
		Элементы.ДоговорКонтрагента.ТолькоПросмотр = Истина;
		
		Элементы.ПланировщикЗаказов.Видимость = Ложь;
		Элементы.ФормаОбъект_ЗаписатьИЗакрыть.Видимость = Ложь;
		
		// Настройка вкладки "Расходы"
		
		Если УровеньДоступаКРасходам = ПредопределенноеЗначение("Перечисление.уатУровеньДоступаКУслугам.РедактированиеЗапрещено") Тогда
			Элементы.ПолучаемыеУслуги.КоманднаяПанель.Видимость = Ложь;
			Элементы.ПолучаемыеУслуги.ТолькоПросмотр = Истина;
		Иначе
			Элементы.ПолучаемыеУслугиГруппаЗаполнить.Видимость = Ложь;
			Элементы.ПолучаемыеУслугиГруппаРассчитать.Видимость = Ложь;
			Элементы.ПолучаемыеУслугиКонтрагент.ТолькоПросмотр = Истина;
			Элементы.ПолучаемыеУслугиСтатьяРасходов.ТолькоПросмотр = Истина;
		КонецЕсли;
		Если ЗначениеЗаполнено(АвторизованныйКонтрагент) Тогда
			Элементы.ПолучаемыеУслуги.ОтборСтрок = Новый ФиксированнаяСтруктура("Контрагент", АвторизованныйКонтрагент);
		Иначе
			Элементы.ПолучаемыеУслуги.ОтборСтрок = Неопределено;
		КонецЕсли;
		
		Элементы.ПолучаемыеУслугиПеревыставитьЗаказчику.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.СопроводительныеДокументыУведомитьПеревозчика.Видимость = ПолучитьФункциональнуюОпциюСервер("уатИспользоватьУведомления_уэ");
	
	ЭтоМорскаяПеревозка = Объект.ВидПеревозки = ПредопределенноеЗначение("Справочник.уатВидыПеревозок.Морская");
	ЭтоАвиаПеревозка    = Объект.ВидПеревозки = ПредопределенноеЗначение("Справочник.уатВидыПеревозок.Авиационная");
	ЭтоЖДПеревозка      = Объект.ВидПеревозки = ПредопределенноеЗначение("Справочник.уатВидыПеревозок.Железнодорожная");
	
	Элементы.ГруппаРасходГСМ.Видимость           = Не ЭтоМорскаяПеревозка И Не ЭтоЖДПеревозка И Не ЭтоАвиаПеревозка;
	Элементы.ГруппаМобильноеПриложение.Видимость = Не ЭтоМорскаяПеревозка И Не ЭтоЖДПеревозка И Не ЭтоАвиаПеревозка;
	
	// Синхронизация с WMS
	Элементы.ЗаказыСтатусWMS.Видимость = Объект.РазрешенаВыгрузкаВWMS;
	Элементы.ЗаказыДеревоСтатусWMS.Видимость = Объект.РазрешенаВыгрузкаВWMS;
	Элементы.СтатусСинхронизацииСWMS.Видимость = Объект.РазрешенаВыгрузкаВWMS;
	Элементы.ГруппаИнтеграцияWMS.Видимость = ПолучитьФункциональнуюОпциюСервер("уатИспользоватьИнтеграциюWMS_уэ")
		И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя")
		И Не АвторизованВнешнийПользователь;
		
	Элементы.ДатаПлатежаПеревозчику.Видимость = (Объект.ПринадлежностьПеревозки
		= ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Привлеченное"));
		
	Элементы.ВыработкаТСиСотрудниковКонтрагент.Видимость = ПолучитьПраваИНастройкиПользователя(
		Объект.Организация, "УчетВыработкиПоКонтрагентам");
	Элементы.ВыработкаТСиСотрудниковПодразделение.Видимость = ПолучитьПраваИНастройкиПользователя(
		Объект.Организация, "УчетВыработкиПоПодразделениям");
	Элементы.ВыработкаТСиСотрудниковМаршрут.Видимость = ПолучитьПраваИНастройкиПользователя(
		Объект.Организация, "УчетВыработкиПоМаршрутам");
	Элементы.ВыработкаТСиСотрудниковОбъектСтроительства.Видимость
		= ПолучитьПраваИНастройкиПользователя(Объект.Организация, "УчетВыработкиПоОбъектамСтроительства");
	Элементы.ВыработкаТСиСотрудниковВидПеревозки.Видимость = ПолучитьПраваИНастройкиПользователя(
		Объект.Организация, "УчетВыработкиПоВидамПеревозок");
	Элементы.ВыработкаТСиСотрудниковНаправлениеПеревозки.Видимость
		= ПолучитьПраваИНастройкиПользователя(Объект.Организация, "УчетВыработкиПоНаправлениямПеревозок");
	
	// Не используется свойство команды "Изменяет сохраняемые данные", чтобы не при нажатии кнопки команды
	// не устанавливался флаг Модифицированность, и не задавался зря вопрос про сохранение документа
	Элементы.ЗаказыДеревоЗаполнитьФактПосещение.Доступность = Не ТолькоПросмотр
		И Элементы.ЗаказыДеревоЗаполнитьФактПосещение.Доступность;
	Элементы.ЗаказыЗаполнитьФактПосещение.Доступность = Не ТолькоПросмотр
		И Элементы.ЗаказыЗаполнитьФактПосещение.Доступность;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьФункциональнуюОпциюСервер(ИмяФункциональнойОпции)
	Возврат ПолучитьФункциональнуюОпцию(ИмяФункциональнойОпции);
КонецФункции

&НаСервере
Функция ПолучитьСписокЗаказовНаСервере()
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДатаКон", КонецДня(ТекущаяДата()));
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	уатЗаказыГрузоотправителейОстатки.ЗаказГрузоотправителя КАК Ссылка
	|ПОМЕСТИТЬ втТабл
	|ИЗ
	|	РегистрНакопления.уатЗаказыГрузоотправителей.Остатки(
	|			&ДатаКон,
	|			НЕ ЗаказГрузоотправителя.Мультимодальный
	|				ИЛИ ЗаказГрузоотправителя.Мультимодальный
	|					И ЗаказГрузоотправителя.ЭтоЭтап) КАК уатЗаказыГрузоотправителейОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	втТабл.Ссылка КАК Ссылка
	|ИЗ
	|	втТабл КАК втТабл
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.уатГрузыКПеревозке_уэ.Остатки(
	|				&ДатаКон,
	|				ЗаказГрузоотправителя В
	|					(ВЫБРАТЬ
	|						втТабл.Ссылка КАК Ссылка
	|					ИЗ
	|						втТабл КАК втТабл)) КАК уатГрузыКПеревозке_уэОстатки
	|		ПО втТабл.Ссылка = уатГрузыКПеревозке_уэОстатки.ЗаказГрузоотправителя";
	
	СписокЗаказов = Новый СписокЗначений();
	СписокЗаказов.ЗагрузитьЗначения(Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка"));
	
	Возврат СписокЗаказов;
	
КонецФункции

// Получает список номенклатуры по заказу, уже присутствующую в списке маршрутного листа 
// 
// Параметры:
//  Заказ        - Заказ на ТС,из которого будет получена номенклатура
//
&НаСервере
Процедура ПолучитьНоменклатуруПоЗаказуВСписке(Заказ)
	ПараметрОтбора = Новый Структура("ЗаказГрузоотправителя, ТипТочкиМаршрута",Заказ, Перечисления.уатТипыТочекМаршрута.Погрузка);
	НайдСтроки = Объект.Заказы.НайтиСтроки(ПараметрОтбора);
	ТабВыбраннаяНоменклатура.Очистить();
	Если НайдСтроки <> Неопределено Тогда
		Для Каждого ТекСтрока Из НайдСтроки Цикл
			НовСтрока = табВыбраннаяНоменклатура.Добавить();
			НовСтрока.Заказчик              = ТекСтрока.ЗаказГрузоотправителя.Контрагент;
			НовСтрока.ЗаказГрузоотправителя = ТекСтрока.ЗаказГрузоотправителя;
			НовСтрока.Номенклатура          = ТекСтрока.Номенклатура;
			НовСтрока.ЕдиницаИзмерения      = ТекСтрока.ЕдиницаИзмерения;
			НовСтрока.ЕдиницаИзмеренияПоЗаказу = ТекСтрока.ЕдиницаИзмеренияПоЗаказу;
			НовСтрока.Количество            = ТекСтрока.Количество;
			НовСтрока.ДатаВыполнения        = ТекСтрока.ДатаВыполнения;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

// Функция выполняет получение таблицы номенклатуры, которая еще не присутствует в 
// маршрутном листе по указанному заказу
//
// Параметры:
//  Заказ        - Заказ из которого производится выбор номенклатуры
//
// Возвращаемое значение:
//  Таблица доступной к выбору номенклатуры
//
&НаСервере
Функция ПолучитьТаблицуДоступнойНоменклатурыПоЗаказу(Заказ)
	
	Если Не ТипЗнч(Заказ) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") Тогда
		мТаб = Новый ТаблицаЗначений();
		Возврат мТаб;
	КонецЕсли;
	
	Если Заказ.FTL Тогда
		// FTL заказ всегда размещается в Маршрутном листе целиком
		Если табВыбраннаяНоменклатура.Количество() > 0 Тогда
			// FTL заказ уже есть в Маршрутном листе
			мТаб = Новый ТаблицаЗначений();
			Возврат мТаб;
		КонецЕсли;
		
		Возврат уатОбщегоНазначения_уэ.ПолучитьСписокГрузовПоFTLЗаказуДляМаршрутногоЛиста(Заказ);
	Иначе
	
		Запрос = Новый Запрос;
		мМенеджерВрТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.МенеджерВременныхТаблиц = мМенеджерВрТаблиц;
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ 
		|	Таб.Заказчик,
		|	Таб.ЗаказГрузоотправителя,
		|	Таб.Номенклатура,
		|	Таб.ЕдиницаИзмерения,
		|	Таб.Количество
		|ПОМЕСТИТЬ 
		|	ВремТаб 
		|ИЗ &ВыбНоменклатура КАК Таб";
		
		Запрос.УстановитьПараметр("ВыбНоменклатура", ДанныеФормыВЗначение(табВыбраннаяНоменклатура, Тип("ТаблицаЗначений")));
		Запрос.Выполнить();
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатЗаказыГрузоотправителейОстатки.ЗаказГрузоотправителя КАК Заказ,
		|	уатЗаказыГрузоотправителейОстатки.Номенклатура КАК Номенклатура,
		|	уатЗаказыГрузоотправителейОстатки.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	(уатЗаказыГрузоотправителейОстатки.КоличествоОстаток - ЕСТЬNULL(ВремТаб.Количество, 0)) / ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(уатЗаказыГрузоотправителейОстатки.ЕдиницаИзмерения) = ТИП(Справочник.уатТипыКонтейнеров_уэ)
		|				ИЛИ уатЗаказыГрузоотправителейОстатки.ЕдиницаИзмерения.Коэффициент = 0
		|			ТОГДА 1
		|		ИНАЧЕ уатЗаказыГрузоотправителейОстатки.ЕдиницаИзмерения.Коэффициент
		|	КОНЕЦ * уатЗаказыГрузоотправителейОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Количество,
		|	ЕСТЬNULL(уатЗаказГрузоотправителяЗаказы.ВесБрутто, 0) / ЕСТЬNULL(уатЗаказГрузоотправителяЗаказы.Количество, 1) КАК ВесЕдиницы,
		|	ЕСТЬNULL(уатЗаказГрузоотправителяЗаказы.Объем, 0) / ЕСТЬNULL(уатЗаказГрузоотправителяЗаказы.Количество, 1) КАК ОбъемЕдиницы,
		|	ЕСТЬNULL(уатЗаказГрузоотправителяЗаказы.КоличествоМест, 0) / ЕСТЬNULL(уатЗаказГрузоотправителяЗаказы.Количество, 1) КАК КоличествоМестЕдиницы,
		|	ЕСТЬNULL(уатЗаказГрузоотправителяЗаказы.ВесБрутто, 0) * (уатЗаказыГрузоотправителейОстатки.КоличествоОстаток - ЕСТЬNULL(ВремТаб.Количество, 0)) / ЕСТЬNULL(уатЗаказГрузоотправителяЗаказы.Количество, 1) / ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(уатЗаказыГрузоотправителейОстатки.ЕдиницаИзмерения) = ТИП(Справочник.уатТипыКонтейнеров_уэ)
		|				ИЛИ уатЗаказыГрузоотправителейОстатки.ЕдиницаИзмерения.Коэффициент = 0
		|			ТОГДА 1
		|		ИНАЧЕ уатЗаказыГрузоотправителейОстатки.ЕдиницаИзмерения.Коэффициент
		|	КОНЕЦ * уатЗаказыГрузоотправителейОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Вес,
		|	ЕСТЬNULL(уатЗаказГрузоотправителяЗаказы.Объем, 0) * (уатЗаказыГрузоотправителейОстатки.КоличествоОстаток - ЕСТЬNULL(ВремТаб.Количество, 0)) / ЕСТЬNULL(уатЗаказГрузоотправителяЗаказы.Количество, 1) / ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(уатЗаказыГрузоотправителейОстатки.ЕдиницаИзмерения) = ТИП(Справочник.уатТипыКонтейнеров_уэ)
		|				ИЛИ уатЗаказыГрузоотправителейОстатки.ЕдиницаИзмерения.Коэффициент = 0
		|			ТОГДА 1
		|		ИНАЧЕ уатЗаказыГрузоотправителейОстатки.ЕдиницаИзмерения.Коэффициент
		|	КОНЕЦ * уатЗаказыГрузоотправителейОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК Объем,
		|	ЕСТЬNULL(уатЗаказГрузоотправителяЗаказы.КоличествоМест, 0) * (уатЗаказыГрузоотправителейОстатки.КоличествоОстаток - ЕСТЬNULL(ВремТаб.Количество, 0)) / ЕСТЬNULL(уатЗаказГрузоотправителяЗаказы.Количество, 1) / ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(уатЗаказыГрузоотправителейОстатки.ЕдиницаИзмерения) = ТИП(Справочник.уатТипыКонтейнеров_уэ)
		|				ИЛИ уатЗаказыГрузоотправителейОстатки.ЕдиницаИзмерения.Коэффициент = 0
		|			ТОГДА 1
		|		ИНАЧЕ уатЗаказыГрузоотправителейОстатки.ЕдиницаИзмерения.Коэффициент
		|	КОНЕЦ * уатЗаказыГрузоотправителейОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК КоличествоМест,
		|	ЕСТЬNULL(уатЗаказГрузоотправителяЗаказы.НомерСтроки, 0) КАК НомерСтроки,
		|	0 КАК НомерПунктаОт,
		|	0 КАК НомерПунктаДо
		|ИЗ
		|	РегистрНакопления.уатЗаказыГрузоотправителей.Остатки(&ДатаКон, ЗаказГрузоотправителя = &ВыбЗаказ) КАК уатЗаказыГрузоотправителейОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВремТаб КАК ВремТаб
		|		ПО уатЗаказыГрузоотправителейОстатки.ЗаказГрузоотправителя.Контрагент = ВремТаб.Заказчик
		|			И уатЗаказыГрузоотправителейОстатки.ЗаказГрузоотправителя = ВремТаб.ЗаказГрузоотправителя
		|			И уатЗаказыГрузоотправителейОстатки.Номенклатура = ВремТаб.Номенклатура
		|			И уатЗаказыГрузоотправителейОстатки.ЕдиницаИзмерения = ВремТаб.ЕдиницаИзмерения
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя.Товары КАК уатЗаказГрузоотправителяЗаказы
		|		ПО уатЗаказыГрузоотправителейОстатки.ЗаказГрузоотправителя.Контрагент = уатЗаказГрузоотправителяЗаказы.Ссылка.Контрагент
		|			И уатЗаказыГрузоотправителейОстатки.ЗаказГрузоотправителя = уатЗаказГрузоотправителяЗаказы.Ссылка
		|			И уатЗаказыГрузоотправителейОстатки.Номенклатура = уатЗаказГрузоотправителяЗаказы.Номенклатура
		|			И уатЗаказыГрузоотправителейОстатки.ЕдиницаИзмерения = уатЗаказГрузоотправителяЗаказы.ЕдиницаИзмерения
		|ГДЕ
		|	уатЗаказыГрузоотправителейОстатки.КоличествоОстаток - ЕСТЬNULL(ВремТаб.Количество, 0) > 0";
			
		Запрос.УстановитьПараметр("ВыбЗаказ", Заказ);
		Запрос.УстановитьПараметр("ДатаКон" , КонецДня(ТекущаяДата()));
		Возврат Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	
КонецФункции

// Функция выполняет получение таблицы грузовых мест, которая еще не присутствует в 
// маршрутном листе по указанному заказу
//
// Параметры:
//  Заказ        - Заказ из которого производится выбор грузовых мест
//
// Возвращаемое значение:
//  Таблица доступной к выбору грузовых мест
//
&НаСервере
Функция ПолучитьТаблицуДоступныхГрузовыхМестПоЗаказу(Заказ)
	
	Если Не ТипЗнч(Заказ) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") Тогда
		мТаб = Новый ТаблицаЗначений();
		Возврат мТаб;
	КонецЕсли;
	
	Если Заказ.FTL Тогда
		// FTL заказ всегда размещается в Маршрутном листе целиком
		Если табВыбраннаяНоменклатура.Количество() > 0 Тогда
			// FTL заказ уже есть в Маршрутном листе
			мТаб = Новый ТаблицаЗначений();
			Возврат мТаб;
		КонецЕсли;
		
		Возврат уатОбщегоНазначения_уэ.ПолучитьСписокГрузовПоFTLЗаказуДляМаршрутногоЛиста(Заказ);
	Иначе
		Запрос = Новый Запрос;
		мМенеджерВрТаблиц = Новый МенеджерВременныхТаблиц;
		Запрос.МенеджерВременныхТаблиц = мМенеджерВрТаблиц;
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ 
		|	Таб.Заказчик,
		|	Таб.ЗаказГрузоотправителя,
		|	Таб.Номенклатура,
		|	Таб.ЕдиницаИзмерения,
		|	Таб.Количество
		|ПОМЕСТИТЬ 
		|	ВремТаб 
		|ИЗ &ВыбНоменклатура КАК Таб";
		
		Запрос.УстановитьПараметр("ВыбНоменклатура", ДанныеФормыВЗначение(табВыбраннаяНоменклатура, Тип("ТаблицаЗначений")));
		Запрос.Выполнить();
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатЗаказыГрузоотправителейОстатки.ЗаказГрузоотправителя КАК Заказ,
		|	уатЗаказыГрузоотправителейОстатки.ГрузовоеМесто КАК Номенклатура,
		|	уатЗаказыГрузоотправителейОстатки.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	уатЗаказыГрузоотправителейОстатки.КоличествоОстаток - ЕСТЬNULL(ВремТаб.Количество, 0) КАК Количество,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(уатЗаказГрузоотправителяЗаказы.КоличествоМест, 0) = 0
		|			ТОГДА ЕСТЬNULL(уатЗаказГрузоотправителяЗаказы.ВесБрутто, 0)
		|		ИНАЧЕ ЕСТЬNULL(уатЗаказГрузоотправителяЗаказы.ВесБрутто, 0) / ЕСТЬNULL(уатЗаказГрузоотправителяЗаказы.КоличествоМест, 0)
		|	КОНЕЦ КАК ВесЕдиницы,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(уатЗаказГрузоотправителяЗаказы.КоличествоМест, 0) = 0
		|			ТОГДА ЕСТЬNULL(уатЗаказГрузоотправителяЗаказы.Объем, 0)
		|		ИНАЧЕ ЕСТЬNULL(уатЗаказГрузоотправителяЗаказы.Объем, 0) / ЕСТЬNULL(уатЗаказГрузоотправителяЗаказы.КоличествоМест, 0)
		|	КОНЕЦ КАК ОбъемЕдиницы,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(уатЗаказГрузоотправителяЗаказы.ВидУпаковки) = ТИП(Справочник.уатТипыКонтейнеров_уэ)
		|			ТОГДА 1
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ЕСТЬNULL(уатЗаказГрузоотправителяЗаказы.ВидУпаковки.Коэффициент, 0) = 0
		|					ТОГДА 0
		|				ИНАЧЕ 1 / ЕСТЬNULL(уатЗаказГрузоотправителяЗаказы.ВидУпаковки.Коэффициент, 0)
		|			КОНЕЦ
		|	КОНЕЦ КАК КоличествоМестЕдиницы,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(уатЗаказГрузоотправителяЗаказы.КоличествоМест, 0) = 0
		|			ТОГДА ЕСТЬNULL(уатЗаказГрузоотправителяЗаказы.ВесБрутто, 0)
		|		ИНАЧЕ ЕСТЬNULL(уатЗаказГрузоотправителяЗаказы.ВесБрутто, 0) * (уатЗаказыГрузоотправителейОстатки.КоличествоОстаток - ЕСТЬNULL(ВремТаб.Количество, 0)) / ЕСТЬNULL(уатЗаказГрузоотправителяЗаказы.КоличествоМест, 0)
		|	КОНЕЦ КАК Вес,
		|	ВЫБОР
		|		КОГДА ЕСТЬNULL(уатЗаказГрузоотправителяЗаказы.КоличествоМест, 0) = 0
		|			ТОГДА ЕСТЬNULL(уатЗаказГрузоотправителяЗаказы.Объем, 0)
		|		ИНАЧЕ ЕСТЬNULL(уатЗаказГрузоотправителяЗаказы.Объем, 0) * (уатЗаказыГрузоотправителейОстатки.КоличествоОстаток - ЕСТЬNULL(ВремТаб.Количество, 0)) / ЕСТЬNULL(уатЗаказГрузоотправителяЗаказы.КоличествоМест, 0)
		|	КОНЕЦ КАК Объем,
		|	ВЫБОР
		|		КОГДА ТИПЗНАЧЕНИЯ(уатЗаказГрузоотправителяЗаказы.ВидУпаковки) = ТИП(Справочник.уатТипыКонтейнеров_уэ)
		|			ТОГДА 1 / 1 * (уатЗаказыГрузоотправителейОстатки.КоличествоОстаток - ЕСТЬNULL(ВремТаб.Количество, 0))
		|		ИНАЧЕ ВЫБОР
		|				КОГДА ЕСТЬNULL(уатЗаказГрузоотправителяЗаказы.ВидУпаковки.Коэффициент, 0) = 0
		|					ТОГДА 0
		|				ИНАЧЕ 1 / ЕСТЬNULL(уатЗаказГрузоотправителяЗаказы.ВидУпаковки.Коэффициент, 0) * (уатЗаказыГрузоотправителейОстатки.КоличествоОстаток - ЕСТЬNULL(ВремТаб.Количество, 0))
		|			КОНЕЦ
		|	КОНЕЦ КАК КоличествоМест,
		|	ЕСТЬNULL(уатЗаказГрузоотправителяЗаказы.НомерСтроки, 0) КАК НомерСтроки,
		|	0 КАК НомерПунктаОт,
		|	0 КАК НомерПунктаДо
		|ИЗ
		|	РегистрНакопления.уатГрузыКПеревозке_уэ.Остатки(&ДатаКон, ЗаказГрузоотправителя = &ВыбЗаказ) КАК уатЗаказыГрузоотправителейОстатки
		|		ЛЕВОЕ СОЕДИНЕНИЕ ВремТаб КАК ВремТаб
		|		ПО уатЗаказыГрузоотправителейОстатки.ЗаказГрузоотправителя.Контрагент = ВремТаб.Заказчик
		|			И уатЗаказыГрузоотправителейОстатки.ЗаказГрузоотправителя = ВремТаб.ЗаказГрузоотправителя
		|			И уатЗаказыГрузоотправителейОстатки.ГрузовоеМесто = ВремТаб.Номенклатура
		|			И уатЗаказыГрузоотправителейОстатки.ЕдиницаИзмерения = ВремТаб.ЕдиницаИзмерения
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя.ГрузовойСостав КАК уатЗаказГрузоотправителяЗаказы
		|		ПО уатЗаказыГрузоотправителейОстатки.ЗаказГрузоотправителя.Контрагент = уатЗаказГрузоотправителяЗаказы.Ссылка.Контрагент
		|			И уатЗаказыГрузоотправителейОстатки.ЗаказГрузоотправителя = уатЗаказГрузоотправителяЗаказы.Ссылка
		|			И уатЗаказыГрузоотправителейОстатки.ГрузовоеМесто = уатЗаказГрузоотправителяЗаказы.ГрузовоеМесто
		|			И уатЗаказыГрузоотправителейОстатки.ЕдиницаИзмерения = уатЗаказГрузоотправителяЗаказы.ВидУпаковки
		|ГДЕ
		|	уатЗаказыГрузоотправителейОстатки.КоличествоОстаток - ЕСТЬNULL(ВремТаб.Количество, 0) > 0";

		Запрос.УстановитьПараметр("ВыбЗаказ", Заказ);
		Запрос.УстановитьПараметр("ДатаКон" , КонецДня(ТекущаяДата()));
		Возврат Запрос.Выполнить().Выгрузить();
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьЗаказыПоЗаказуНаТСНаСервере(ВыбЗаказНаТС)
	
	Если Объект.Заказы.Количество() = 0 Тогда 
		Объект.ДатаИВремяОтправленияПлан = Неопределено;
	КонецЕсли;
	
	Если (ЗначениеЗаполнено(Объект.ЭтапМаршрутизации) И Объект.ЭтапМаршрутизации.АлгоритмМаршрутизации = 3) Тогда
		ТипТС = Новый Массив;
	Иначе
		ТипТС = Объект.ТС.ТипТС;
	КонецЕсли;
	
	ПустаяЕИ = Справочники.ЕдиницыИзмерения.ПустаяСсылка();
	Если Не ВыбЗаказНаТС.FTL Тогда
		СтрокаПунктПогрузка  = Неопределено;
		СтрокаПунктРазгрузка = Неопределено;
		
		Для Каждого ТекСтрока Из Объект.Заказы Цикл 
			Если ТекСтрока.Пункт = ВыбЗаказНаТС.АдресОтправления Тогда 
				СтрокаПунктПогрузка = ТекСтрока;
			КонецЕсли;
			Если ТекСтрока.ЗаказГрузоотправителя = ВыбЗаказНаТС И (ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка
				ИЛИ ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяПогрузка) Тогда 
				СтрокаПунктПогрузка = ТекСтрока;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если СтрокаПунктПогрузка = Неопределено Тогда 
			флПунктПогрузкиПройден = Истина; // Перебираем все пункты подряд.
		Иначе 
			флПунктПогрузкиПройден = Ложь; // Перебираем пункты после погрузки.
		КонецЕсли;
		
		Для Каждого ТекСтрока Из Объект.Заказы Цикл 
			Если Не флПунктПогрузкиПройден И ТекСтрока = СтрокаПунктПогрузка Тогда 
				флПунктПогрузкиПройден = Истина;
			КонецЕсли;
			
			Если флПунктПогрузкиПройден Тогда 
				Если ТекСтрока.Пункт = ВыбЗаказНаТС.АдресНазначения Тогда 
					СтрокаПунктРазгрузка = ТекСтрока;
				КонецЕсли;
				
				Если ТекСтрока.ЗаказГрузоотправителя = ВыбЗаказНаТС И (ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка
					ИЛИ ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяРазгрузка) Тогда 
					СтрокаПунктРазгрузка = ТекСтрока;
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ВыбЗаказНаТС.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам Тогда
		Если ВыбЗаказНаТС.FTL Тогда 
			Для Сч = 0 По ВыбЗаказНаТС.ПромежуточныеПункты.Количество()-1 Цикл 
				НовСтрока = Объект.Заказы.Добавить();
				НовСтрока.ЗаказГрузоотправителя    = ВыбЗаказНаТС;
				НовСтрока.Пункт                    = ВыбЗаказНаТС.ПромежуточныеПункты[Сч].Пункт;
				НовСтрока.ТипТочкиМаршрута         = ВыбЗаказНаТС.ПромежуточныеПункты[Сч].ТипТочкиМаршрута;
				НовСтрока.Количество               = 1;
				НовСтрока.ЕдиницаИзмерения         = ПустаяЕИ;
				НовСтрока.ЕдиницаИзмеренияПоЗаказу = ПустаяЕИ;
				НовСтрока.ВесБрутто                = ВыбЗаказНаТС.ВесБрутто;
				НовСтрока.Объем                    = ВыбЗаказНаТС.Объем;
				НовСтрока.КоличествоМест           = ВыбЗаказНаТС.КоличествоМест;
				НовСтрока.ОкноС                    = ВыбЗаказНаТС.ПромежуточныеПункты[Сч].ОкноС;
				НовСтрока.ОкноПо                   = ВыбЗаказНаТС.ПромежуточныеПункты[Сч].ОкноПо;
				НовСтрока.ПрибытиеПлан             = ВыбЗаказНаТС.ПромежуточныеПункты[Сч].ПрибытиеПлан;
				НовСтрока.УбытиеПлан               = ВыбЗаказНаТС.ПромежуточныеПункты[Сч].УбытиеПлан;
				НовСтрока.Стоянка                  = ВыбЗаказНаТС.ПромежуточныеПункты[Сч].Стоянка;
				НовСтрока.СтоянкаИзПункта          = уатЗащищенныеФункцииСервер_уэ.ПолучитьВремяСтоянкиВПункте(ВыбЗаказНаТС.ПромежуточныеПункты[Сч].Пункт, ТипТС);
				НовСтрока.Рекламации               = ПолучитьРекламацииДляСтрокиЗаказов(ВыбЗаказНаТС);
				
				Если ВыбЗаказНаТС.ПромежуточныеПункты[Сч].Ожидание > 0 И НовСтрока.Ожидание = 0 Тогда 
					НовСтрока.Ожидание             = ВыбЗаказНаТС.ПромежуточныеПункты[Сч].Ожидание;
				КонецЕсли;
			КонецЦикла;
			
		Иначе 
			Если СтрокаПунктРазгрузка = Неопределено Тогда 
				НовСтрока = Объект.Заказы.Добавить();
				СтрокаПунктРазгрузка = НовСтрока;
			Иначе 
				НовСтрока = Объект.Заказы.Вставить(Объект.Заказы.Индекс(СтрокаПунктРазгрузка)+1);
			КонецЕсли;
			НовСтрока.ЗаказГрузоотправителя    = ВыбЗаказНаТС;
			НовСтрока.Пункт                    = ВыбЗаказНаТС.АдресНазначения;
			НовСтрока.ТипТочкиМаршрута         = Перечисления.уатТипыТочекМаршрута.Разгрузка;
			НовСтрока.Количество               = 1;
			НовСтрока.ЕдиницаИзмерения         = ПустаяЕИ;
			НовСтрока.ЕдиницаИзмеренияПоЗаказу = ПустаяЕИ;
			НовСтрока.ВесБрутто                = ВыбЗаказНаТС.ВесБрутто;
			НовСтрока.Объем                    = ВыбЗаказНаТС.Объем;
			НовСтрока.КоличествоМест           = ВыбЗаказНаТС.КоличествоМест;
			НовСтрока.ОкноС                    = ВыбЗаказНаТС.ДоставкаС;
			НовСтрока.ОкноПо                   = ВыбЗаказНаТС.ДоставкаПо;
			НовСтрока.Стоянка                  = ВыбЗаказНаТС.СтоянкаПунктНазначения;
			НовСтрока.СтоянкаИзПункта          = уатЗащищенныеФункцииСервер_уэ.ПолучитьВремяСтоянкиВПункте(ВыбЗаказНаТС.АдресНазначения, ТипТС);
			НовСтрока.ПрибытиеПлан             = ВыбЗаказНаТС.ДоставкаС;
			НовСтрока.УбытиеПлан               = ВыбЗаказНаТС.ДоставкаПо;
			НовСтрока.Рекламации               = ПолучитьРекламацииДляСтрокиЗаказов(ВыбЗаказНаТС);
			
			Если СтрокаПунктПогрузка = Неопределено Тогда
				НовСтрока = Объект.Заказы.Вставить(Объект.Заказы.Индекс(СтрокаПунктРазгрузка));
			Иначе 
				НовСтрока = Объект.Заказы.Вставить(Объект.Заказы.Индекс(СтрокаПунктПогрузка)+1);
			КонецЕсли;
			НовСтрока.ЗаказГрузоотправителя    = ВыбЗаказНаТС;
			НовСтрока.Пункт                    = ВыбЗаказНаТС.АдресОтправления;
			НовСтрока.ТипТочкиМаршрута         = Перечисления.уатТипыТочекМаршрута.Погрузка;
			НовСтрока.Количество               = 1;
			НовСтрока.ЕдиницаИзмерения         = ПустаяЕИ;
			НовСтрока.ЕдиницаИзмеренияПоЗаказу = ПустаяЕИ;
			НовСтрока.ВесБрутто                = ВыбЗаказНаТС.ВесБрутто;
			НовСтрока.Объем                    = ВыбЗаказНаТС.Объем;
			НовСтрока.КоличествоМест           = ВыбЗаказНаТС.КоличествоМест;
			НовСтрока.ОкноС                    = ВыбЗаказНаТС.ОтправлениеС;
			НовСтрока.ОкноПо                   = ВыбЗаказНаТС.ОтправлениеПо;
			НовСтрока.Стоянка                  = ВыбЗаказНаТС.СтоянкаПунктОтправления;
			НовСтрока.СтоянкаИзПункта          = уатЗащищенныеФункцииСервер_уэ.ПолучитьВремяСтоянкиВПункте(ВыбЗаказНаТС.АдресОтправления, ТипТС);
			НовСтрока.ПрибытиеПлан             = ВыбЗаказНаТС.ОтправлениеС;
			НовСтрока.УбытиеПлан               = ВыбЗаказНаТС.ОтправлениеПо;
			НовСтрока.Рекламации               = ПолучитьРекламацииДляСтрокиЗаказов(ВыбЗаказНаТС);
		КонецЕсли;
		
	Иначе
		ПолучитьНоменклатуруПоЗаказуВСписке(ВыбЗаказНаТС);  
		
		Если ВыбЗаказНаТС.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам Тогда
			ДоступнаяНоменклатура = ПолучитьТаблицуДоступныхГрузовыхМестПоЗаказу(ВыбЗаказНаТС);
			КоличествоГрузов = ВыбЗаказНаТС.ГрузовойСостав.Количество();
		Иначе //По товару
			ДоступнаяНоменклатура = ПолучитьТаблицуДоступнойНоменклатурыПоЗаказу(ВыбЗаказНаТС);
			КоличествоГрузов = ВыбЗаказНаТС.Товары.Количество();
		КонецЕсли;
		
		Если Не ДоступнаяНоменклатура.Количество() Тогда
			Возврат;
		КонецЕсли;

		Если ВыбЗаказНаТС.FTL Тогда
			Если ДоступнаяНоменклатура.Количество() = 0 Тогда
				Возврат;
			КонецЕсли;
			
			КоличествоПунктов = ВыбЗаказНаТС.ПромежуточныеПункты.Количество();
			мсвОтрезкиПути = уатОбщегоНазначения_проф.ПолучитьНачальныеКонечныеПунктыГрузов(ВыбЗаказНаТС.ОтрезкиПути, КоличествоГрузов, КоличествоПунктов);
			
			Для Каждого ТекСтрока Из ДоступнаяНоменклатура Цикл
				ТекСтрока.НомерПунктаОт = мсвОтрезкиПути[ТекСтрока.НомерСтроки-1].От;
				ТекСтрока.НомерПунктаДо = мсвОтрезкиПути[ТекСтрока.НомерСтроки-1].До;
			КонецЦикла;
			
			Для Сч = 0 По ВыбЗаказНаТС.ПромежуточныеПункты.Количество()-1 Цикл 
				ПромежуточныйПункт = ВыбЗаказНаТС.ПромежуточныеПункты[Сч].Пункт;
				ТипТочкиМаршрута = ВыбЗаказНаТС.ПромежуточныеПункты[Сч].ТипТочкиМаршрута;
				СтоянкаПунктПП = уатЗащищенныеФункцииСервер_уэ.ПолучитьВремяСтоянкиВПункте(ПромежуточныйПункт, ТипТС);
				СтоянкаПП = ВыбЗаказНаТС.ПромежуточныеПункты[Сч].Стоянка;
				
				флПунктДобавлен = Ложь;
				флагПогрузка    = Ложь;
				флагРазгрузка   = Ложь;
				Если (ВыбЗаказНаТС.ПромежуточныеПункты[Сч].ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка
					Или ВыбЗаказНаТС.ПромежуточныеПункты[Сч].ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяПогрузка) Тогда 
					флагПогрузка = Истина;
				ИначеЕсли (ВыбЗаказНаТС.ПромежуточныеПункты[Сч].ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка
					Или ВыбЗаказНаТС.ПромежуточныеПункты[Сч].ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяРазгрузка) Тогда 
					флагРазгрузка = Истина;
				КонецЕсли;
				
				Для Каждого ТекСтрока Из ДоступнаяНоменклатура Цикл
					
					Если ТекСтрока.НомерПунктаОт < 0 Или ТекСтрока.НомерПунктаДо < 0 Тогда
						// Груз, которому не назначен отрезок пути
						Продолжить;
					КонецЕсли;
					
					Если Не ((флагПогрузка И ТекСтрока.НомерПунктаОт = Сч+1) Или (флагРазгрузка И ТекСтрока.НомерПунктаДо = Сч+1)) Тогда
						Продолжить;
					КонецЕсли;
					
					флПунктДобавлен = Истина;
					
					НовСтрока = Объект.Заказы.Добавить();
					НовСтрока.ЗаказГрузоотправителя    = ВыбЗаказНаТС;
					НовСтрока.Пункт                    = ПромежуточныйПункт;
					НовСтрока.ТипТочкиМаршрута         = ТипТочкиМаршрута;
					НовСтрока.Номенклатура             = ТекСтрока.Номенклатура;
					НовСтрока.Количество               = ТекСтрока.Количество;
					НовСтрока.ЕдиницаИзмерения         = ТекСтрока.ЕдиницаИзмерения;
					НовСтрока.ЕдиницаИзмеренияПоЗаказу = ТекСтрока.ЕдиницаИзмерения;
					НовСтрока.ВесБрутто                = ТекСтрока.Вес;
					НовСтрока.Объем                    = ТекСтрока.Объем;
					НовСтрока.КоличествоМест           = ТекСтрока.КоличествоМест;
					НовСтрока.ОкноС                    = ВыбЗаказНаТС.ПромежуточныеПункты[Сч].ОкноС;
					НовСтрока.ОкноПо                   = ВыбЗаказНаТС.ПромежуточныеПункты[Сч].ОкноПо;
					НовСтрока.Стоянка                  = СтоянкаПП;
					НовСтрока.СтоянкаИзПункта          = СтоянкаПунктПП;
					НовСтрока.ПрибытиеПлан         = ВыбЗаказНаТС.ПромежуточныеПункты[Сч].ПрибытиеПлан;
					НовСтрока.УбытиеПлан           = ВыбЗаказНаТС.ПромежуточныеПункты[Сч].УбытиеПлан;
					НовСтрока.Рекламации               = ПолучитьРекламацииДляСтрокиЗаказов(ВыбЗаказНаТС);
					
					Если ТипЗнч(ТекСтрока.Номенклатура) = Тип("СправочникСсылка.уатГрузовыеМеста_уэ") Тогда
						НовСтрока.ТипЗначенияСтроки = 1;
					КонецЕсли;
					
					Если ВыбЗаказНаТС.ПромежуточныеПункты[Сч].Ожидание > 0 И НовСтрока.Ожидание = 0 Тогда 
						НовСтрока.Ожидание = ВыбЗаказНаТС.ПромежуточныеПункты[Сч].Ожидание;
					КонецЕсли;
				КонецЦикла;
				
				Если НЕ флПунктДобавлен Тогда 
					НовСтрока = Объект.Заказы.Добавить();
					НовСтрока.ЗаказГрузоотправителя = ВыбЗаказНаТС;
					НовСтрока.Пункт                 = ПромежуточныйПункт;
					НовСтрока.ТипТочкиМаршрута      = ТипТочкиМаршрута;
					НовСтрока.Стоянка               = СтоянкаПП;
					НовСтрока.СтоянкаИзПункта       = СтоянкаПунктПП;
				КонецЕсли;
			КонецЦикла;
			
		Иначе 
			ПерваяСтрокаРазгрузки = Неопределено;
			
			СтоянкаПунктПД = уатЗащищенныеФункцииСервер_уэ.ПолучитьВремяСтоянкиВПункте(ВыбЗаказНаТС.АдресНазначения, ТипТС);
			СтоянкаПД = ВыбЗаказНаТС.СтоянкаПунктНазначения;
			Для Каждого ТекСтрока Из ДоступнаяНоменклатура Цикл
				Если СтрокаПунктРазгрузка = Неопределено Тогда 
					НовСтрока = Объект.Заказы.Добавить();
					СтрокаПунктРазгрузка = НовСтрока;
				Иначе 
					НовСтрока = Объект.Заказы.Вставить(Объект.Заказы.Индекс(СтрокаПунктРазгрузка)+1);
				КонецЕсли;
				Если ПерваяСтрокаРазгрузки = Неопределено Тогда 
					ПерваяСтрокаРазгрузки = СтрокаПунктРазгрузка;
				КонецЕсли;
				СтрокаПунктРазгрузка = НовСтрока;
				
				НовСтрока.ЗаказГрузоотправителя    = ВыбЗаказНаТС;
				НовСтрока.Пункт                    = ВыбЗаказНаТС.АдресНазначения;
				НовСтрока.ТипТочкиМаршрута         = Перечисления.уатТипыТочекМаршрута.Разгрузка;
				НовСтрока.Номенклатура             = ТекСтрока.Номенклатура;
				НовСтрока.Количество               = ТекСтрока.Количество;
				НовСтрока.ЕдиницаИзмерения         = ТекСтрока.ЕдиницаИзмерения;
				НовСтрока.ЕдиницаИзмеренияПоЗаказу = ТекСтрока.ЕдиницаИзмерения;
				НовСтрока.ВесБрутто                = ТекСтрока.Вес;
				НовСтрока.Объем                    = ТекСтрока.Объем;
				НовСтрока.КоличествоМест           = ТекСтрока.КоличествоМест;
				НовСтрока.ОкноС                    = ВыбЗаказНаТС.ДоставкаС;
				НовСтрока.ОкноПо                   = ВыбЗаказНаТС.ДоставкаПо;
				НовСтрока.Стоянка                  = СтоянкаПД;
				НовСтрока.СтоянкаИзПункта          = СтоянкаПунктПД;
				НовСтрока.ПрибытиеПлан             = ВыбЗаказНаТС.ДоставкаС;
				НовСтрока.УбытиеПлан               = ВыбЗаказНаТС.ДоставкаПо;
				НовСтрока.Рекламации               = ПолучитьРекламацииДляСтрокиЗаказов(ВыбЗаказНаТС);
				Если ТипЗнч(ТекСтрока.Номенклатура) = Тип("СправочникСсылка.уатГрузовыеМеста_уэ") Тогда
					НовСтрока.ТипЗначенияСтроки = 1;
				КонецЕсли;
			КонецЦикла;
			
			СтоянкаПунктПО = уатЗащищенныеФункцииСервер_уэ.ПолучитьВремяСтоянкиВПункте(ВыбЗаказНаТС.АдресОтправления, ТипТС);
			СтоянкаПО = ВыбЗаказНаТС.СтоянкаПунктОтправления;
			Для Каждого ТекСтрока Из ДоступнаяНоменклатура Цикл
				Если СтрокаПунктПогрузка = Неопределено Тогда
					НовСтрока = Объект.Заказы.Вставить(Объект.Заказы.Индекс(ПерваяСтрокаРазгрузки));
				Иначе 
					НовСтрока = Объект.Заказы.Вставить(Объект.Заказы.Индекс(СтрокаПунктПогрузка)+1);
				КонецЕсли;
				СтрокаПунктПогрузка = НовСтрока;
				
				НовСтрока.ЗаказГрузоотправителя    = ВыбЗаказНаТС;
				НовСтрока.Пункт                    = ВыбЗаказНаТС.АдресОтправления;
				НовСтрока.ТипТочкиМаршрута         = Перечисления.уатТипыТочекМаршрута.Погрузка;
				НовСтрока.Номенклатура             = ТекСтрока.Номенклатура;
				НовСтрока.Количество               = ТекСтрока.Количество;
				НовСтрока.ЕдиницаИзмерения         = ТекСтрока.ЕдиницаИзмерения;
				НовСтрока.ЕдиницаИзмеренияПоЗаказу = ТекСтрока.ЕдиницаИзмерения;
				НовСтрока.ВесБрутто                = ТекСтрока.Вес;
				НовСтрока.Объем                    = ТекСтрока.Объем;
				НовСтрока.КоличествоМест           = ТекСтрока.КоличествоМест;
				НовСтрока.ОкноС                    = ВыбЗаказНаТС.ОтправлениеС;
				НовСтрока.ОкноПо                   = ВыбЗаказНаТС.ОтправлениеПо;
				НовСтрока.Стоянка                  = СтоянкаПО;
				НовСтрока.СтоянкаИзПункта          = СтоянкаПунктПО;
				НовСтрока.ПрибытиеПлан             = ВыбЗаказНаТС.ОтправлениеС;
				НовСтрока.УбытиеПлан               = ВыбЗаказНаТС.ОтправлениеПо;
				НовСтрока.Рекламации               = ПолучитьРекламацииДляСтрокиЗаказов(ВыбЗаказНаТС);
				Если ТипЗнч(ТекСтрока.Номенклатура) = Тип("СправочникСсылка.уатГрузовыеМеста_уэ") Тогда
					НовСтрока.ТипЗначенияСтроки = 1;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ДатаИВремяОтправленияПлан) И Объект.Заказы.Количество() Тогда 
		Если флПланФакт Тогда
			Объект.ДатаИВремяОтправленияПлан = Объект.Заказы[0].УбытиеПлан;
		Иначе
			Объект.ДатаИВремяОтправленияПлан = Объект.Заказы[0].УбытиеФакт;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗаказыПоОстаткамНаСервере()
	
	Если Объект.Дата = Дата('00010101') Тогда 
		ПарамДата = КонецДня(ТекущаяДата());
	ИначеЕсли Час(Объект.Дата) = 0 И Минута(Объект.Дата) = 0 И Секунда(Объект.Дата) = 0 Тогда 
		ПарамДата = КонецДня(Объект.Дата);
	Иначе 
		ПарамДата = Объект.Дата;
	КонецЕсли;
	
	Если (ЗначениеЗаполнено(Объект.ЭтапМаршрутизации) И Объект.ЭтапМаршрутизации.АлгоритмМаршрутизации = 3) Тогда
		ТипТС = Новый Массив;
	Иначе
		ТипТС = Объект.ТС.ТипТС;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Дата", ПарамДата);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатГрузыКПеревозке_уэОстатки.ЗаказГрузоотправителя КАК Заказ,
	|	ВЫБОР
	|		КОГДА уатГрузыКПеревозке_уэОстатки.ЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам)
	|			ТОГДА уатГрузыКПеревозке_уэОстатки.Номенклатура
	|		ИНАЧЕ ВЫБОР
	|				КОГДА уатГрузыКПеревозке_уэОстатки.ЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам)
	|					ТОГДА уатГрузыКПеревозке_уэОстатки.ГрузовоеМесто
	|				ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			КОНЕЦ
	|	КОНЕЦ КАК Номенклатура,
	|	уатГрузыКПеревозке_уэОстатки.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	уатГрузыКПеревозке_уэОстатки.ЕдиницаИзмерения КАК ЕдиницаИзмеренияПоЗаказу,
	|	уатГрузыКПеревозке_уэОстатки.ЗаказГрузоотправителя.АдресОтправления КАК АдресОтправления,
	|	уатГрузыКПеревозке_уэОстатки.ЗаказГрузоотправителя.АдресНазначения КАК АдресДоставки,
	|	уатГрузыКПеревозке_уэОстатки.ЗаказГрузоотправителя.ДетализацияЗакрытия КАК ДетализацияЗакрытияНов,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА уатГрузыКПеревозке_уэОстатки.ЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам)
	|				ТОГДА ВЫБОР
	|						КОГДА уатГрузыКПеревозке_уэОстатки.ЕдиницаИзмерения.Коэффициент = 0
	|							ТОГДА уатГрузыКПеревозке_уэОстатки.КоличествоОстаток * уатГрузыКПеревозке_уэОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|						ИНАЧЕ уатГрузыКПеревозке_уэОстатки.КоличествоОстаток / уатГрузыКПеревозке_уэОстатки.ЕдиницаИзмерения.Коэффициент * уатГрузыКПеревозке_уэОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|					КОНЕЦ
	|			ИНАЧЕ уатГрузыКПеревозке_уэОстатки.КоличествоОстаток
	|		КОНЕЦ, 0) КАК Количество,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА уатГрузыКПеревозке_уэОстатки.ЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам)
	|				ТОГДА ВЫБОР
	|						КОГДА уатГрузыКПеревозке_уэОстатки.ЕдиницаИзмерения.Коэффициент = 0
	|							ТОГДА уатЗаказГрузоотправителя.ВесБрутто * уатГрузыКПеревозке_уэОстатки.КоличествоОстаток / уатЗаказГрузоотправителя.Количество * уатГрузыКПеревозке_уэОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|						ИНАЧЕ уатЗаказГрузоотправителя.ВесБрутто * уатГрузыКПеревозке_уэОстатки.КоличествоОстаток / уатЗаказГрузоотправителя.Количество / уатГрузыКПеревозке_уэОстатки.ЕдиницаИзмерения.Коэффициент * уатГрузыКПеревозке_уэОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|					КОНЕЦ
	|			ИНАЧЕ уатЗаказГрузоотправителя.ВесБрутто * уатГрузыКПеревозке_уэОстатки.КоличествоОстаток / уатЗаказГрузоотправителя.Количество
	|		КОНЕЦ, 0) КАК Вес,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА уатГрузыКПеревозке_уэОстатки.ЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам)
	|				ТОГДА ВЫБОР
	|						КОГДА уатГрузыКПеревозке_уэОстатки.ЕдиницаИзмерения.Коэффициент = 0
	|							ТОГДА уатЗаказГрузоотправителя.Объем * уатГрузыКПеревозке_уэОстатки.КоличествоОстаток / уатЗаказГрузоотправителя.Количество * уатГрузыКПеревозке_уэОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|						ИНАЧЕ уатЗаказГрузоотправителя.Объем * уатГрузыКПеревозке_уэОстатки.КоличествоОстаток / уатЗаказГрузоотправителя.Количество / уатГрузыКПеревозке_уэОстатки.ЕдиницаИзмерения.Коэффициент * уатГрузыКПеревозке_уэОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|					КОНЕЦ
	|			ИНАЧЕ уатЗаказГрузоотправителя.Объем * уатГрузыКПеревозке_уэОстатки.КоличествоОстаток / уатЗаказГрузоотправителя.Количество
	|		КОНЕЦ, 0) КАК Объем,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА уатГрузыКПеревозке_уэОстатки.ЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам)
	|				ТОГДА ВЫБОР
	|						КОГДА уатГрузыКПеревозке_уэОстатки.ЕдиницаИзмерения.Коэффициент = 0
	|							ТОГДА уатЗаказГрузоотправителя.КоличествоМест * уатГрузыКПеревозке_уэОстатки.КоличествоОстаток / уатЗаказГрузоотправителя.Количество * уатГрузыКПеревозке_уэОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|						ИНАЧЕ уатЗаказГрузоотправителя.КоличествоМест * уатГрузыКПеревозке_уэОстатки.КоличествоОстаток / уатЗаказГрузоотправителя.Количество / уатГрузыКПеревозке_уэОстатки.ЕдиницаИзмерения.Коэффициент * уатГрузыКПеревозке_уэОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|					КОНЕЦ
	|			ИНАЧЕ уатЗаказГрузоотправителя.КоличествоМест * уатГрузыКПеревозке_уэОстатки.КоличествоОстаток / уатЗаказГрузоотправителя.Количество
	|		КОНЕЦ, 0) КАК КоличествоМест,
	|	ЕСТЬNULL(уатЗаказГрузоотправителя.НомерСтроки, 0) КАК НомерСтроки
	|ИЗ
	|	РегистрНакопления.уатГрузыКПеревозке_уэ.Остатки(
	|			&Дата,
	|			НЕ ЗаказГрузоотправителя.FTL
	|				И (НЕ ЗаказГрузоотправителя.Мультимодальный
	|					ИЛИ ЗаказГрузоотправителя.Мультимодальный
	|						И ЗаказГрузоотправителя.ЭтоЭтап)) КАК уатГрузыКПеревозке_уэОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			уатЗаказГрузоотправителяТовары.Ссылка КАК Ссылка,
	|			уатЗаказГрузоотправителяТовары.ГрузовоеМесто КАК ГрузовоеМесто,
	|			уатЗаказГрузоотправителяТовары.Номенклатура КАК Номенклатура,
	|			уатЗаказГрузоотправителяТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|			СУММА(уатЗаказГрузоотправителяТовары.Количество) КАК Количество,
	|			СУММА(уатЗаказГрузоотправителяТовары.ВесБрутто) КАК ВесБрутто,
	|			СУММА(уатЗаказГрузоотправителяТовары.Объем) КАК Объем,
	|			СУММА(уатЗаказГрузоотправителяТовары.КоличествоМест) КАК КоличествоМест,
	|			уатЗаказГрузоотправителяТовары.Ссылка.Контрагент КАК Контрагент,
	|			уатЗаказГрузоотправителяТовары.НомерСтроки КАК НомерСтроки
	|		ИЗ
	|			Документ.уатЗаказГрузоотправителя.Товары КАК уатЗаказГрузоотправителяТовары
	|		ГДЕ
	|			уатЗаказГрузоотправителяТовары.Ссылка.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			уатЗаказГрузоотправителяТовары.Ссылка,
	|			уатЗаказГрузоотправителяТовары.ГрузовоеМесто,
	|			уатЗаказГрузоотправителяТовары.Номенклатура,
	|			уатЗаказГрузоотправителяТовары.ЕдиницаИзмерения,
	|			уатЗаказГрузоотправителяТовары.Ссылка.Контрагент,
	|			уатЗаказГрузоотправителяТовары.НомерСтроки
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			уатЗаказГрузоотправителяГрузМеста.Ссылка,
	|			уатЗаказГрузоотправителяГрузМеста.ГрузовоеМесто,
	|			NULL,
	|			уатЗаказГрузоотправителяГрузМеста.ВидУпаковки,
	|			СУММА(уатЗаказГрузоотправителяГрузМеста.КоличествоМест),
	|			СУММА(уатЗаказГрузоотправителяГрузМеста.ВесБрутто),
	|			СУММА(уатЗаказГрузоотправителяГрузМеста.Объем),
	|			СУММА(ВЫБОР
	|					КОГДА ТИПЗНАЧЕНИЯ(уатЗаказГрузоотправителяГрузМеста.ВидУпаковки) = ТИП(Справочник.уатТипыКонтейнеров_уэ)
	|						ТОГДА уатЗаказГрузоотправителяГрузМеста.КоличествоМест
	|					ИНАЧЕ ВЫБОР
	|							КОГДА уатЗаказГрузоотправителяГрузМеста.ВидУпаковки.Коэффициент = 0
	|								ТОГДА 0
	|							ИНАЧЕ уатЗаказГрузоотправителяГрузМеста.КоличествоМест / уатЗаказГрузоотправителяГрузМеста.ВидУпаковки.Коэффициент
	|						КОНЕЦ
	|				КОНЕЦ),
	|			уатЗаказГрузоотправителяГрузМеста.Ссылка.Контрагент,
	|			уатЗаказГрузоотправителяГрузМеста.НомерСтроки
	|		ИЗ
	|			Документ.уатЗаказГрузоотправителя.ГрузовойСостав КАК уатЗаказГрузоотправителяГрузМеста
	|		ГДЕ
	|			уатЗаказГрузоотправителяГрузМеста.Ссылка.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			уатЗаказГрузоотправителяГрузМеста.Ссылка,
	|			уатЗаказГрузоотправителяГрузМеста.ГрузовоеМесто,
	|			уатЗаказГрузоотправителяГрузМеста.ВидУпаковки,
	|			уатЗаказГрузоотправителяГрузМеста.Ссылка.Контрагент,
	|			уатЗаказГрузоотправителяГрузМеста.НомерСтроки
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			уатЗаказГрузоотправителя.Ссылка,
	|			NULL,
	|			NULL,
	|			NULL,
	|			СУММА(1),
	|			СУММА(уатЗаказГрузоотправителя.ВесБрутто),
	|			СУММА(уатЗаказГрузоотправителя.Объем),
	|			СУММА(уатЗаказГрузоотправителя.КоличествоМест),
	|			уатЗаказГрузоотправителя.Контрагент,
	|			NULL
	|		ИЗ
	|			Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	|		ГДЕ
	|			уатЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			уатЗаказГрузоотправителя.Ссылка,
	|			уатЗаказГрузоотправителя.Контрагент) КАК уатЗаказГрузоотправителя
	|		ПО уатГрузыКПеревозке_уэОстатки.ЗаказГрузоотправителя = уатЗаказГрузоотправителя.Ссылка
	|			И (ВЫБОР
	|				КОГДА уатЗаказГрузоотправителя.Номенклатура ЕСТЬ NULL
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ уатГрузыКПеревозке_уэОстатки.Номенклатура = уатЗаказГрузоотправителя.Номенклатура
	|			КОНЕЦ)
	|			И уатГрузыКПеревозке_уэОстатки.ЕдиницаИзмерения = уатЗаказГрузоотправителя.ЕдиницаИзмерения
	|			И уатГрузыКПеревозке_уэОстатки.ГрузовоеМесто = уатЗаказГрузоотправителя.ГрузовоеМесто
	|			И уатГрузыКПеревозке_уэОстатки.Контрагент = уатЗаказГрузоотправителя.Контрагент
	|ГДЕ
	|	ЕСТЬNULL(ВЫБОР
	|				КОГДА уатГрузыКПеревозке_уэОстатки.ЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам)
	|					ТОГДА ВЫБОР
	|							КОГДА уатГрузыКПеревозке_уэОстатки.ЕдиницаИзмерения.Коэффициент = 0
	|								ТОГДА уатГрузыКПеревозке_уэОстатки.КоличествоОстаток * уатГрузыКПеревозке_уэОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|							ИНАЧЕ уатГрузыКПеревозке_уэОстатки.КоличествоОстаток / уатГрузыКПеревозке_уэОстатки.ЕдиницаИзмерения.Коэффициент * уатГрузыКПеревозке_уэОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|						КОНЕЦ
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ТИПЗНАЧЕНИЯ(уатГрузыКПеревозке_уэОстатки.ЕдиницаИзмерения) = ТИП(Справочник.уатТипыКонтейнеров_уэ)
	|							ТОГДА уатГрузыКПеревозке_уэОстатки.КоличествоОстаток
	|						ИНАЧЕ уатГрузыКПеревозке_уэОстатки.КоличествоОстаток / уатГрузыКПеревозке_уэОстатки.ЕдиницаИзмерения.Коэффициент
	|					КОНЕЦ
	|			КОНЕЦ, 0) > 0
	|
	|УПОРЯДОЧИТЬ ПО
	|	Заказ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	предЗаказНаТС = Неопределено;
	мсвОтрезкиПути = Новый Массив;
	
	Пока Выборка.Следующий() Цикл 
		НовСтрока                          = Объект.Заказы.Добавить();
		НовСтрока.Пункт                    = Выборка.Заказ.АдресОтправления;
		НовСтрока.ЗаказГрузоотправителя    = Выборка.Заказ;
		НовСтрока.ТипТочкиМаршрута         = Перечисления.уатТипыТочекМаршрута.Погрузка;
		НовСтрока.Стоянка                  = Выборка.Заказ.СтоянкаПунктОтправления;
		НовСтрока.СтоянкаИзПункта          = уатЗащищенныеФункцииСервер_уэ.ПолучитьВремяСтоянкиВПункте(Выборка.Заказ.АдресОтправления, ТипТС);
		НовСтрока.Номенклатура             = Выборка.Номенклатура;
		НовСтрока.ЕдиницаИзмерения         = Выборка.ЕдиницаИзмерения;
		НовСтрока.ЕдиницаИзмеренияПоЗаказу = Выборка.ЕдиницаИзмерения;
		НовСтрока.Количество               = Выборка.Количество;
		НовСтрока.ВесБрутто                = Выборка.Вес;
		НовСтрока.Объем                    = Выборка.Объем;
		НовСтрока.КоличествоМест           = Выборка.КоличествоМест;
		
		НовСтрока                          = Объект.Заказы.Добавить();
		НовСтрока.Пункт                    = Выборка.Заказ.АдресНазначения;
		НовСтрока.ЗаказГрузоотправителя    = Выборка.Заказ;
		НовСтрока.ТипТочкиМаршрута         = Перечисления.уатТипыТочекМаршрута.Разгрузка;
		НовСтрока.Стоянка                  = Выборка.Заказ.СтоянкаПунктНазначения;
		НовСтрока.СтоянкаИзПункта          = уатЗащищенныеФункцииСервер_уэ.ПолучитьВремяСтоянкиВПункте(Выборка.Заказ.АдресНазначения, ТипТС);
		НовСтрока.Номенклатура             = Выборка.Номенклатура;
		НовСтрока.ЕдиницаИзмерения         = Выборка.ЕдиницаИзмерения;
		НовСТрока.ЕдиницаИзмеренияПоЗаказу = Выборка.ЕдиницаИзмерения;
		НовСтрока.Количество               = Выборка.Количество;
		НовСтрока.ВесБрутто                = Выборка.Вес;
		НовСтрока.Объем                    = Выборка.Объем;
		НовСтрока.КоличествоМест           = Выборка.КоличествоМест;
	КонецЦикла;
	
	// Только FTL заказы.
	Запрос.Текст = ТекстЗапросаКОстаткамFTLЗаказа();
	ВыборкаЗаказы = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаЗаказы.Следующий() Цикл
		
		КоличествоПунктов = ВыборкаЗаказы.Заказ.ПромежуточныеПункты.Количество();
		КоличествоГрузов = ВыборкаЗаказы.НомерСтроки; // Определяется по максимальному номеру строки таблицы грузов
		мсвОтрезкиПути = уатОбщегоНазначения_проф.ПолучитьНачальныеКонечныеПунктыГрузов(ВыборкаЗаказы.Заказ.ОтрезкиПути, КоличествоГрузов, КоличествоПунктов);
		
		ОтрезкиПутиКорректны = Истина;
		Для Каждого ТекОтрезокПути Из мсвОтрезкиПути Цикл
			Если ТекОтрезокПути.От < 0 Или ТекОтрезокПути.До < 0 Тогда
				// Заказ на ТС, в котором грузам некорректно назначены отрезки пути
				ОтрезкиПутиКорректны = Ложь;
			КонецЕсли;
		КонецЦикла;
		Если Не ОтрезкиПутиКорректны Тогда
			Продолжить;
		КонецЕсли;
		
		Для Сч = 0 По ВыборкаЗаказы.Заказ.ПромежуточныеПункты.Количество()-1 Цикл
			
			флагПогрузка = Ложь;
			флагРазгрузка = Ложь;
			Если (ВыборкаЗаказы.Заказ.ПромежуточныеПункты[Сч].ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка
					Или ВыборкаЗаказы.Заказ.ПромежуточныеПункты[Сч].ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяПогрузка) Тогда 
				флагПогрузка = Истина;

			ИначеЕсли (ВыборкаЗаказы.Заказ.ПромежуточныеПункты[Сч].ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка
					Или ВыборкаЗаказы.Заказ.ПромежуточныеПункты[Сч].ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяРазгрузка) Тогда 
				флагРазгрузка = Истина;

			Иначе 
				Продолжить;
			КонецЕсли;
			
			Выборка = ВыборкаЗаказы.Выбрать();
			Пока Выборка.Следующий() Цикл
				Если ВыборкаЗаказы.ДетализацияЗакрытия <> Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам Тогда
					Если Не ((флагПогрузка И мсвОтрезкиПути[Выборка.НомерСтроки-1].От = Сч+1) Или (флагРазгрузка И мсвОтрезкиПути[Выборка.НомерСтроки-1].До = Сч+1)) Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				НовСтрока                          = Объект.Заказы.Добавить();
				НовСтрока.Пункт                    = Выборка.Заказ.ПромежуточныеПункты[Сч].Пункт;
				НовСтрока.ЗаказГрузоотправителя    = Выборка.Заказ;
				НовСтрока.ТипТочкиМаршрута         = Выборка.Заказ.ПромежуточныеПункты[Сч].ТипТочкиМаршрута;
				НовСтрока.Стоянка                  = Выборка.Заказ.ПромежуточныеПункты[Сч].Стоянка;
				НовСтрока.СтоянкаИзПункта          = уатЗащищенныеФункцииСервер_уэ.ПолучитьВремяСтоянкиВПункте(Выборка.Заказ.ПромежуточныеПункты[Сч].Пункт, ТипТС);
				НовСтрока.Номенклатура             = Выборка.Номенклатура;
				НовСтрока.ЕдиницаИзмерения         = Выборка.ЕдиницаИзмерения;
				НовСтрока.ЕдиницаИзмеренияПоЗаказу = Выборка.ЕдиницаИзмерения;
				НовСтрока.Количество               = Выборка.Количество;
				НовСтрока.ВесБрутто                = Выборка.ВесБрутто;
				НовСтрока.Объем                    = Выборка.Объем;
				НовСтрока.КоличествоМест           = Выборка.КоличествоМест;
			КонецЦикла;
	
		КонецЦикла;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура УстановитьЕдиницыИзмеренияПоНоменклатуре(ИндексСтроки)
	
	ТекСтрока = Объект.Заказы.Получить(ИндексСтроки);
	
	Если ТипЗнч(ТекСтрока.Номенклатура) = Тип("СправочникСсылка.уатГрузовыеМеста_уэ") Тогда
		Если ТекСтрока.Номенклатура.Контейнер Тогда
			ТекСтрока.ЕдиницаИзмерения         = ТекСтрока.Номенклатура.ТипКонтейнера;
			ТекСтрока.ЕдиницаИзмеренияПоЗаказу = ТекСтрока.Номенклатура.ТипКонтейнера;
		Иначе
			ТекСтрока.ЕдиницаИзмерения         = ТекСтрока.Номенклатура.ВидУпаковки;
			ТекСтрока.ЕдиницаИзмеренияПоЗаказу = ТекСтрока.Номенклатура.ВидУпаковки;
		КонецЕсли;
	Иначе
		ТекСтрока.ЕдиницаИзмерения         = ТекСтрока.Номенклатура.ЕдиницаХраненияОстатков;
		ТекСтрока.ЕдиницаИзмеренияПоЗаказу = ТекСтрока.Номенклатура.ЕдиницаХраненияОстатков;
	КонецЕсли;
	  
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВремяСтоянкиПриИзмененииТС()
	
	ОбновитьВремяСтоянкиПриИзмененииТССервер();
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя") И РежимОтображенияДерево Тогда 
		ЗаказыДеревоПриИзменении(Неопределено);
	Иначе 
		ЗаказыПриИзменении(Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьВремяСтоянкиПриИзмененииТССервер()
	
	Если (ЗначениеЗаполнено(Объект.ЭтапМаршрутизации) И Объект.ЭтапМаршрутизации.АлгоритмМаршрутизации = 3) Тогда
		ТипТС = Новый Массив;
	Иначе
		ТипТС = Объект.ТС.ТипТС;
	КонецЕсли;
			
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя") И РежимОтображенияДерево Тогда 
		Для Каждого ТекСтрокаПункта Из ЗаказыДерево.ПолучитьЭлементы() Цикл
			
			Если ТипЗнч(ТекСтрокаПункта.ПунктЗаказНоменклатура) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда 
				ТекСтрокаПункта.СтоянкаИзПункта = уатЗащищенныеФункцииСервер_уэ.ПолучитьВремяСтоянкиВПункте(ТекСтрокаПункта.ПунктЗаказНоменклатура, ТипТС);
			Иначе 
				ТекСтрокаПункта.СтоянкаИзПункта = 0;
			КонецЕсли;
			
			мСуммаСтоянок = 0;
			Для Каждого ТекСтрокаЗаказ Из ТекСтрокаПункта.ПолучитьЭлементы() Цикл 
				ТекСтрокаЗаказ.СтоянкаИзПункта = ТекСтрокаПункта.СтоянкаИзПункта;
				
				мСуммаСтоянок = уатЗащищенныеФункцииСервер.СложитьВремя(мСуммаСтоянок, ТекСтрокаЗаказ.Стоянка);
				
				Для Каждого ТекСтрокаГруз Из ТекСтрокаЗаказ.ПолучитьЭлементы() Цикл 
					ТекСтрокаГруз.Стоянка = ТекСтрокаЗаказ.Стоянка;
				КонецЦикла;
			КонецЦикла;
			
			мСуммаСтоянок = уатЗащищенныеФункцииСервер.СложитьВремя(мСуммаСтоянок, ТекСтрокаПункта.СтоянкаИзПункта);
			ТекСтрокаПункта.Стоянка = мСуммаСтоянок;
		КонецЦикла;
		
	Иначе 
		Для Каждого ТекСтрока Из Объект.Заказы Цикл 
			ТекСтрока.СтоянкаИзПункта = уатЗащищенныеФункцииСервер_уэ.ПолучитьВремяСтоянкиВПункте(ТекСтрока.Пункт, ТипТС);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Получает набор данных с сервера для процедуры НоменклатураПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	Если ТипЗнч(СтруктураДанные.Номенклатура) = Тип("СправочникСсылка.уатГрузовыеМеста_уэ") Тогда
		Если СтруктураДанные.Номенклатура.Контейнер Тогда
			СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.ТипКонтейнера);
		Иначе
			СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.ВидУпаковки);
		КонецЕсли;
	Иначе
		СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.ЕдиницаХраненияОстатков);
	КонецЕсли;
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

// Процедура выполняет заполнение реквизитов относящихся к ТС в форме документа
//
&НаСервере
Процедура ИнициализацияДанныхАвтомобиляВФорме()
	
	Если ЗначениеЗаполнено(Объект.ТС) Тогда 
		
		Если ЗначениеЗаполнено(Объект.ТС.ОсновнойВидПеревозки) Тогда
			Объект.ВидПеревозки = Объект.ТС.ОсновнойВидПеревозки;
		ИначеЕсли НЕ ЗначениеЗаполнено(Объект.ВидПеревозки) Тогда
			СтруктураОбъектовНастроек = Новый Структура;
			СтруктураОбъектовНастроек.Вставить("Организация",   Объект.Организация);
			СтруктураОбъектовНастроек.Вставить("Подразделение", Объект.Подразделение);
			СтруктураОбъектовНастроек.Вставить("Пользователь",  ПользователиКлиентСервер.АвторизованныйПользователь());
			
			Объект.ВидПеревозки = ПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, ПланыВидовХарактеристик.уатПраваИНастройки.ОсновнойВидПеревозок);
		КонецЕсли;
		
		// очистим реквизиты
		Объект.Водитель1  = Справочники.Сотрудники.ПустаяСсылка();
		Объект.Водитель2  = Справочники.Сотрудники.ПустаяСсылка();
		Объект.Сотрудник1 = Справочники.Сотрудники.ПустаяСсылка();
		Объект.Сотрудник2 = Справочники.Сотрудники.ПустаяСсылка();
		
		Объект.Прицеп1 = Справочники.уатТС.ПустаяСсылка();
		Объект.Прицеп2 = Справочники.уатТС.ПустаяСсылка();
		
		Если Элементы.ГруппаПрицеп1.Видимость Тогда 
			Прицеп = ПолучитьПрицеп(Объект.ТС, Объект.Прицеп2);
			Если Не Прицеп = Неопределено Тогда 
				Объект.Прицеп1 = Прицеп;
			КонецЕсли;
		КонецЕсли;
		Если Элементы.ГруппаПрицеп2.Видимость Тогда
			Прицеп = ПолучитьПрицеп(Объект.ТС, Объект.Прицеп1);
			Если Не Прицеп = Неопределено Тогда 
				Объект.Прицеп2 = Прицеп;
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ (Объект.ВидПеревозки = Справочники.уатВидыПеревозок.Авиационная 
			Или Объект.ВидПеревозки = Справочники.уатВидыПеревозок.Железнодорожная
			Или Объект.ВидПеревозки = Справочники.уатВидыПеревозок.Морская) Тогда
			Если Объект.ПринадлежностьПеревозки = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное") тогда
				// заполняем водителей
				ТекДата = ?(Объект.Заказы.Количество() > 0, Объект.ДатаИВремяОтправленияПлан, Объект.Дата);
				уатОбщегоНазначения.ЗаполнитьЭкипажТС(Объект.ТС, Объект.Организация, ТекДата,
					Объект.Водитель1, Объект.Водитель2, Объект.Сотрудник1, Объект.Сотрудник2,
					Ложь, ТекДата + 24*3600, Истина);
				
				ПредДатаИВремяОтправленияПлан = ТекДата;
			Иначе
				Объект.Водитель1 = Объект.ТС.Водитель;
			КонецЕсли;
		КонецЕсли;
		
		ИнициализацияЗП();
	КонецЕсли;
	
	Объект.ОсновноеТопливо = Объект.ТС.Модель.ОсновноеТопливо;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокВыбораЭкипажа()
	
	Элементы.Водитель1.СписокВыбора.Очистить();
	Элементы.Водитель2.СписокВыбора.Очистить();
	Элементы.Сотрудник1.СписокВыбора.Очистить();
	Элементы.Сотрудник2.СписокВыбора.Очистить();
	
	Попытка
		Если Объект.ПринадлежностьПеревозки = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное") Тогда
			ЭкипажТССписок = уатЗащищенныеФункцииСервер.ЭкипажТССписок(Объект.ТС);
		ИначеЕсли Объект.ПринадлежностьПеревозки = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Привлеченное") Тогда 
			ЭкипажТССписок = уатОбщегоНазначения_уэ.ВодителиКонтрагента(уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(Объект.ТС, "ВладелецТС"));
		Иначе 
			ЭкипажТССписок = Новый СписокЗначений();
		КонецЕсли;
	Исключение
		ЭкипажТССписок = Новый СписокЗначений();
	КонецПопытки;
	
	ЭкипажТССписок_Количество = ЭкипажТССписок.Количество();
	
	Элементы.Водитель1.КнопкаВыпадающегоСписка = (ЭкипажТССписок_Количество > 0);
	Элементы.Водитель2.КнопкаВыпадающегоСписка = (ЭкипажТССписок_Количество > 0);
	Элементы.Сотрудник1.КнопкаВыпадающегоСписка = (ЭкипажТССписок_Количество > 0);
	Элементы.Сотрудник2.КнопкаВыпадающегоСписка = (ЭкипажТССписок_Количество > 0);
	
	Если ЭкипажТССписок_Количество = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекСотр Из ЭкипажТССписок Цикл
		Элементы.Водитель1.СписокВыбора.Добавить(ТекСотр.Значение);
		Элементы.Водитель2.СписокВыбора.Добавить(ТекСотр.Значение);
		Элементы.Сотрудник1.СписокВыбора.Добавить(ТекСотр.Значение);
		Элементы.Сотрудник2.СписокВыбора.Добавить(ТекСотр.Значение);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ФизЛицоВодителяКонтрагента(КлючЗаписи)
	Возврат КлючЗаписи.ФизЛицо;
КонецФункции

&НаСервере
Процедура ЗаполнитьПустогоПеревозчикаПоТС()
	
	Если ЗначениеЗаполнено(Объект.ТС) И НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Если Объект.ПринадлежностьПеревозки = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное") Тогда
			Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Организации");
			Объект.Контрагент = Объект.ТС.Организация;
		ИначеЕсли Объект.ПринадлежностьПеревозки = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Привлеченное") Тогда 
			Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
			Объект.Контрагент = Объект.ТС.ВладелецТС;
		Иначе 
			Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Организации");
			Объект.Контрагент = Справочники.Организации.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокиПоЗаказуНаСервере(Заказ, СтруктураЗаказа, РежимДобавленияЗаказовВМаршрутныйЛист)
	
	Если Объект.Заказы.Количество() = 0 Тогда 
		Объект.ДатаИВремяОтправленияПлан = Неопределено;
	КонецЕсли;
	
	Если (ЗначениеЗаполнено(Объект.ЭтапМаршрутизации) И Объект.ЭтапМаршрутизации.АлгоритмМаршрутизации = 3) Тогда
		ТипТС = Новый Массив;
	Иначе
		ТипТС = Объект.ТС.ТипТС;
	КонецЕсли;

	Если Заказ.FTL Тогда 
		ПредСчСтрокаАнализ = 0;
		мсвСтрокиFTLЗаказа = Новый Массив();
		
		Для Сч = 0 По Заказ.ПромежуточныеПункты.Количество() - 1 Цикл 
			Для СчСтрокаАнализ = ПредСчСтрокаАнализ По Объект.Заказы.Количество() - 1 Цикл 
				СтрокаТЧАнализ = Объект.Заказы[СчСтрокаАнализ];
				Если СтрокаТЧАнализ.Пункт = Заказ.ПромежуточныеПункты[Сч].Пункт
						И СтрокаТЧАнализ.ТипТочкиМаршрута = Заказ.ПромежуточныеПункты[Сч].ТипТочкиМаршрута
						И СтрокаТЧАнализ.ЗаказГрузоотправителя = Заказ Тогда 
					мсвСтрокиFTLЗаказа.Добавить(СтрокаТЧАнализ);
					ПредСчСтрокаАнализ = СчСтрокаАнализ;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Если Не мсвСтрокиFTLЗаказа.Количество() = Заказ.ПромежуточныеПункты.Количество() Тогда 
			мсвСтрокиFTLЗаказа = Неопределено;
		КонецЕсли;
		
		КоличествоПунктов = Заказ.ПромежуточныеПункты.Количество();
		Если Заказ.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам Тогда
			КоличествоГрузов = Заказ.Товары.Количество();
		Иначе
			КоличествоГрузов = Заказ.ГрузовойСостав.Количество();
		КонецЕсли;
		мсвОтрезкиПути = уатОбщегоНазначения_проф.ПолучитьНачальныеКонечныеПунктыГрузов(Заказ.ОтрезкиПути, КоличествоГрузов, КоличествоПунктов);
		
		Для Сч = 0 По Заказ.ПромежуточныеПункты.Количество()-1 Цикл
			флагПогрузка = Ложь;
			флагРазгрузка = Ложь;
			Если (Заказ.ПромежуточныеПункты[Сч].ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка
					Или Заказ.ПромежуточныеПункты[Сч].ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяПогрузка) Тогда 
				флагПогрузка = Истина;

			ИначеЕсли (Заказ.ПромежуточныеПункты[Сч].ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка
					Или Заказ.ПромежуточныеПункты[Сч].ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяРазгрузка) Тогда 
				флагРазгрузка = Истина;

			КонецЕсли;
			
			НомерСтрокиГруза = СтруктураЗаказа.НомерСтрокиГруза;
			Если НомерСтрокиГруза > 0 Тогда
				флагГрузАктивен = Истина;
				ТекОтрезокПути = мсвОтрезкиПути[НомерСтрокиГруза-1];
				Если ТекОтрезокПути.От < 0 Или ТекОтрезокПути.До < 0 Тогда
					// Груз, которому не назначен отрезок пути
					флагГрузАктивен = Ложь;
				КонецЕсли;
				
				Если Не ((флагПогрузка И ТекОтрезокПути.От = Сч+1) Или (флагРазгрузка И ТекОтрезокПути.До = Сч+1)) Тогда
					флагГрузАктивен = Ложь;
				КонецЕсли; 
			ИначеЕсли Заказ.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам Тогда
				флагГрузАктивен = Истина;
			Иначе
				флагГрузАктивен = Ложь;
			КонецЕсли;
			
			Если мсвСтрокиFTLЗаказа = Неопределено Тогда 
				НовСтрока = Объект.Заказы.Добавить();
			ИначеЕсли Не флагГрузАктивен Тогда
				Продолжить;
			ИначеЕсли мсвСтрокиFTLЗаказа[Сч].Количество = 0 
				И мсвСтрокиFTLЗаказа[Сч].ТипТочкиМаршрута = Заказ.ПромежуточныеПункты[Сч].ТипТочкиМаршрута Тогда
				// Была создана пустая строка, и ее можно перезаполнить
				НовСтрока = мсвСтрокиFTLЗаказа[Сч];
			Иначе
				ИндексВставки = Объект.Заказы.Индекс(мсвСтрокиFTLЗаказа[Сч]) + 1;
				НовСтрока = Объект.Заказы.Вставить(ИндексВставки);
			КонецЕсли;
								
			Если (НЕ флагПогрузка И НЕ флагРазгрузка) ИЛИ НЕ флагГрузАктивен Тогда
				НовСтрока.Пункт                 = Заказ.ПромежуточныеПункты[Сч].Пункт;
				НовСтрока.ТипТочкиМаршрута      = Заказ.ПромежуточныеПункты[Сч].ТипТочкиМаршрута;
				НовСтрока.ЗаказГрузоотправителя = Заказ;
				НовСтрока.ОкноС                 = Заказ.ПромежуточныеПункты[Сч].ОкноС;
				НовСтрока.ОкноПо                = Заказ.ПромежуточныеПункты[Сч].ОкноПо;
				НовСтрока.Стоянка               = Заказ.ПромежуточныеПункты[Сч].Стоянка;
				НовСтрока.СтоянкаИзПункта       = уатЗащищенныеФункцииСервер_уэ.ПолучитьВремяСтоянкиВПункте(Заказ.ПромежуточныеПункты[Сч].Пункт, ТипТС);
				НовСтрока.Рекламации            = ПолучитьРекламацииДляСтрокиЗаказов(Заказ);
				Если Заказ.ПромежуточныеПункты[Сч].Ожидание > 0 И НовСтрока.Ожидание = 0 Тогда 
					НовСтрока.Ожидание          = Заказ.ПромежуточныеПункты[Сч].Ожидание;
				КонецЕсли;
				НовСтрока.ПрибытиеПлан          = Заказ.ПромежуточныеПункты[Сч].ПрибытиеПлан;
				НовСтрока.УбытиеПлан            = Заказ.ПромежуточныеПункты[Сч].УбытиеПлан;

			Иначе 
				НовСтрока.Пункт                    = Заказ.ПромежуточныеПункты[Сч].Пункт;
				НовСтрока.ТипТочкиМаршрута         = Заказ.ПромежуточныеПункты[Сч].ТипТочкиМаршрута;
				НовСтрока.ЗаказГрузоотправителя    = Заказ;
				НовСтрока.Номенклатура             = СтруктураЗаказа.Номенклатура;
				НовСтрока.ЕдиницаИзмерения         = СтруктураЗаказа.ЕдиницаИзмерения;
				НовСтрока.ЕдиницаИзмеренияПоЗаказу = СтруктураЗаказа.ЕдиницаИзмерения;
				НовСтрока.Количество               = СтруктураЗаказа.Количество;
				НовСтрока.ВесБрутто                = СтруктураЗаказа.Вес;
				НовСтрока.Объем                    = СтруктураЗаказа.Объем;
				НовСтрока.КоличествоМест           = СтруктураЗаказа.КоличествоМест;
				НовСтрока.ОкноС                    = Заказ.ПромежуточныеПункты[Сч].ОкноС;
				НовСтрока.ОкноПо                   = Заказ.ПромежуточныеПункты[Сч].ОкноПо;
				НовСтрока.Стоянка                  = Заказ.ПромежуточныеПункты[Сч].Стоянка;
				НовСтрока.СтоянкаИзПункта          = уатЗащищенныеФункцииСервер_уэ.ПолучитьВремяСтоянкиВПункте(Заказ.ПромежуточныеПункты[Сч].Пункт, ТипТС);
				НовСтрока.Рекламации               = ПолучитьРекламацииДляСтрокиЗаказов(Заказ);
				
				Если Заказ.ПромежуточныеПункты[Сч].Ожидание > 0 И НовСтрока.Ожидание = 0 Тогда 
					НовСтрока.Ожидание             = Заказ.ПромежуточныеПункты[Сч].Ожидание;
				КонецЕсли;
				НовСтрока.ПрибытиеПлан             = Заказ.ПромежуточныеПункты[Сч].ПрибытиеПлан;
				НовСтрока.УбытиеПлан               = Заказ.ПромежуточныеПункты[Сч].УбытиеПлан;

			КонецЕсли;
		КонецЦикла;
		
	Иначе 
		СтрокаПунктПогрузка  = Неопределено;
		СтрокаПунктРазгрузка = Неопределено;
		
		Если РежимДобавленияЗаказовВМаршрутныйЛист = 0 Тогда 
			Для Каждого ТекСтрока Из Объект.Заказы Цикл 
				Если ТекСтрока.Пункт = Заказ.АдресОтправления Тогда 
					СтрокаПунктПогрузка = ТекСтрока;
				КонецЕсли;
				Если ТекСтрока.ЗаказГрузоотправителя = Заказ И (ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка
					ИЛИ ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяПогрузка) Тогда 
					СтрокаПунктПогрузка = ТекСтрока;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если СтрокаПунктПогрузка = Неопределено Тогда 
				флПунктПогрузкиПройден = Истина; // Перебираем все пункты подряд.
			Иначе 
				флПунктПогрузкиПройден = Ложь; // Перебираем пункты после погрузки.
			КонецЕсли;
			
			Для Каждого ТекСтрока Из Объект.Заказы Цикл 
				Если Не флПунктПогрузкиПройден И ТекСтрока = СтрокаПунктПогрузка Тогда 
					флПунктПогрузкиПройден = Истина;
				КонецЕсли;
				
				Если флПунктПогрузкиПройден Тогда 
					Если ТекСтрока.Пункт = Заказ.АдресНазначения Тогда 
						СтрокаПунктРазгрузка = ТекСтрока;
					КонецЕсли;
					
					Если ТекСтрока.ЗаказГрузоотправителя = Заказ И (ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка
						ИЛИ ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяРазгрузка) Тогда 
						СтрокаПунктРазгрузка = ТекСтрока;
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если СтрокаПунктРазгрузка = Неопределено Тогда 
			НовСтрока = Объект.Заказы.Добавить();
			СтрокаПунктРазгрузка = НовСтрока;
		Иначе 
			НовСтрока = Объект.Заказы.Вставить(Объект.Заказы.Индекс(СтрокаПунктРазгрузка)+1);
		КонецЕсли;
		НовСтрока.Пункт                    = Заказ.АдресНазначения;
		НовСтрока.ТипТочкиМаршрута         = Перечисления.уатТипыТочекМаршрута.Разгрузка;
		НовСтрока.ЗаказГрузоотправителя    = Заказ;
		НовСтрока.Номенклатура             = СтруктураЗаказа.Номенклатура;
		НовСтрока.ЕдиницаИзмерения         = СтруктураЗаказа.ЕдиницаИзмерения;
		НовСтрока.ЕдиницаИзмеренияПоЗаказу = СтруктураЗаказа.ЕдиницаИзмерения;
		НовСтрока.Количество               = СтруктураЗаказа.Количество;
		НовСтрока.ВесБрутто                = СтруктураЗаказа.Вес;
		НовСтрока.Объем                    = СтруктураЗаказа.Объем;
		НовСтрока.КоличествоМест           = СтруктураЗаказа.КоличествоМест;
		НовСтрока.ОкноС                    = Заказ.ДоставкаС;
		НовСтрока.ОкноПо                   = Заказ.ДоставкаПо;
		НовСтрока.Стоянка                  = Заказ.СтоянкаПунктНазначения;
		НовСтрока.СтоянкаИзПункта          = уатЗащищенныеФункцииСервер_уэ.ПолучитьВремяСтоянкиВПункте(Заказ.АдресНазначения, ТипТС);
		НовСтрока.ПрибытиеПлан             = Заказ.ДоставкаС;
		НовСтрока.УбытиеПлан               = Заказ.ДоставкаПо;
		НовСтрока.Рекламации               = ПолучитьРекламацииДляСтрокиЗаказов(Заказ);
		
		Если СтрокаПунктПогрузка = Неопределено Тогда
			НовСтрока = Объект.Заказы.Вставить(Объект.Заказы.Индекс(СтрокаПунктРазгрузка));
		Иначе 
			НовСтрока = Объект.Заказы.Вставить(Объект.Заказы.Индекс(СтрокаПунктПогрузка)+1);
		КонецЕсли;
		НовСтрока.Пункт                    = Заказ.АдресОтправления;
		НовСтрока.ТипТочкиМаршрута         = Перечисления.уатТипыТочекМаршрута.Погрузка;
		НовСтрока.ЗаказГрузоотправителя    = Заказ;
		НовСтрока.Номенклатура             = СтруктураЗаказа.Номенклатура;
		НовСтрока.ЕдиницаИзмерения         = СтруктураЗаказа.ЕдиницаИзмерения;
		НовСтрока.ЕдиницаИзмеренияПоЗаказу = СтруктураЗаказа.ЕдиницаИзмерения;
		НовСтрока.Количество               = СтруктураЗаказа.Количество;
		НовСтрока.ВесБрутто                = СтруктураЗаказа.Вес;
		НовСтрока.Объем                    = СтруктураЗаказа.Объем;
		НовСтрока.КоличествоМест           = СтруктураЗаказа.КоличествоМест;
		НовСтрока.ОкноС                    = Заказ.ОтправлениеС;
		НовСтрока.ОкноПо                   = Заказ.ОтправлениеПо;
		НовСтрока.Стоянка                  = Заказ.СтоянкаПунктОтправления;
		НовСтрока.СтоянкаИзПункта          = уатЗащищенныеФункцииСервер_уэ.ПолучитьВремяСтоянкиВПункте(Заказ.АдресОтправления, ТипТС);
		НовСтрока.ПрибытиеПлан             = Заказ.ОтправлениеС;
		НовСтрока.УбытиеПлан               = Заказ.ОтправлениеПо;
		НовСтрока.Рекламации               = ПолучитьРекламацииДляСтрокиЗаказов(Заказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ДатаИВремяОтправленияПлан) И Объект.Заказы.Количество() Тогда 
		Объект.ДатаИВремяОтправленияПлан = Объект.Заказы[0].УбытиеПлан;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьВремяОтправленияДоставкиПоЗаказам()
	
	Результат = Новый Соответствие;
	НомераОбработанныхСтрокFTLЗаказов = Новый Соответствие;
	
	Для Каждого ТекЗаказ Из Объект.Заказы Цикл 
		СтрокаРезультата = Новый Структура("ОтправлениеС, ОтправлениеПо, ДоставкаС, ДоставкаПо");
		
		FTL = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(ТекЗаказ.ЗаказГрузоотправителя, "FTL");
		
		Если ЗначениеЗаполнено(ТекЗаказ.ЗаказГрузоотправителя)
			И FTL = Истина Тогда 
			ОкноС = '00010101000000';
			ОкноПо = '00010101000000';
			НомерОбработаннойСтрокиЗаказа = НомераОбработанныхСтрокFTLЗаказов.Получить(ТекЗаказ.ЗаказГрузоотправителя);
			Если НомерОбработаннойСтрокиЗаказа = Неопределено Тогда
				НомерТекущейСтрокиЗаказа = 0;
			Иначе
				НомерТекущейСтрокиЗаказа = НомерОбработаннойСтрокиЗаказа;
			КонецЕсли;
			Пока НомерТекущейСтрокиЗаказа < ТекЗаказ.ЗаказГрузоотправителя.ПромежуточныеПункты.Количество() Цикл
				Если ТекЗаказ.Пункт = ТекЗаказ.ЗаказГрузоотправителя.ПромежуточныеПункты[НомерТекущейСтрокиЗаказа].Пункт
					И ТекЗаказ.ТипТочкиМаршрута = ТекЗаказ.ЗаказГрузоотправителя.ПромежуточныеПункты[НомерТекущейСтрокиЗаказа].ТипТочкиМаршрута Тогда
					ОкноС  = ТекЗаказ.ЗаказГрузоотправителя.ПромежуточныеПункты[НомерТекущейСтрокиЗаказа].ОкноС;
					ОкноПо = ТекЗаказ.ЗаказГрузоотправителя.ПромежуточныеПункты[НомерТекущейСтрокиЗаказа].ОкноПо;
					Прервать;
				Иначе
					НомерТекущейСтрокиЗаказа = НомерТекущейСтрокиЗаказа + 1;
				КонецЕсли;
			КонецЦикла;
			Если НомерТекущейСтрокиЗаказа <> НомерОбработаннойСтрокиЗаказа Тогда
				НомераОбработанныхСтрокFTLЗаказов.Вставить(ТекЗаказ.ЗаказГрузоотправителя, НомерТекущейСтрокиЗаказа);
			КонецЕсли;
			СтрокаРезультата.ОтправлениеС  = ОкноС;
			СтрокаРезультата.ОтправлениеПо = ОкноПо;
			СтрокаРезультата.ДоставкаС     = ОкноС;
			СтрокаРезультата.ДоставкаПо    = ОкноПо;
		ИначеЕсли ЗначениеЗаполнено(ТекЗаказ.ЗаказГрузоотправителя) Тогда
			СтруктураДанныхВремяЗаказа = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначенияРеквизитов(ТекЗаказ.ЗаказГрузоотправителя,
			"ОтправлениеС, ОтправлениеПо, ДоставкаС, ДоставкаПо");

			СтрокаРезультата.ОтправлениеС  = СтруктураДанныхВремяЗаказа.ОтправлениеС;
			СтрокаРезультата.ОтправлениеПо = СтруктураДанныхВремяЗаказа.ОтправлениеПо;
			СтрокаРезультата.ДоставкаС     = СтруктураДанныхВремяЗаказа.ДоставкаС;
			СтрокаРезультата.ДоставкаПо    = СтруктураДанныхВремяЗаказа.ДоставкаПо;
		Иначе 
			СтрокаРезультата.ОтправлениеС  = '00010101000000';
			СтрокаРезультата.ОтправлениеПо = '00010101000000';
			СтрокаРезультата.ДоставкаС     = '00010101000000';
			СтрокаРезультата.ДоставкаПо    = '00010101000000';
		КонецЕсли;
		
		Результат.Вставить(Объект.Заказы.Индекс(ТекЗаказ), СтрокаРезультата);
		
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьТипыЗначенийСтрокДереваЗаказов(Узел = Неопределено)
	// Типы значений строки:
	// 1 - СправочникСсылка.уатПунктыНазначения 
	// 2 - ДокументСсылка.уатЗаказГрузоотправителя
	// 3 - Строка
	// 4 - СправочникСсылка.Номенклатура
	// 5 - СправочникСсылка.уатГрузовыеМеста_уэ
	
	ОчиститьНедоступныеДанные = Ложь;
	
	Если Узел = Неопределено Тогда 
		Узел = ЗаказыДерево;
		ОчиститьНедоступныеДанные = Истина;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из Узел.ПолучитьЭлементы() Цикл 
		ОбновитьТипыЗначенийСтрокДереваЗаказов(ТекСтрока);
		Если ТипЗнч(ТекСтрока.ПунктЗаказНоменклатура) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда 
			ТекСтрока.ТипЗначенияСтроки = 1;
		ИначеЕсли ТипЗнч(ТекСтрока.ПунктЗаказНоменклатура) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") Тогда 
			ТекСтрока.ТипЗначенияСтроки = 2;
		ИначеЕсли ТипЗнч(ТекСтрока.ПунктЗаказНоменклатура) = Тип("Строка") Тогда 
			ТекСтрока.ТипЗначенияСтроки = 3;
		ИначеЕсли ТипЗнч(ТекСтрока.ПунктЗаказНоменклатура) = Тип("СправочникСсылка.Номенклатура") Тогда 
			ТекСтрока.ТипЗначенияСтроки = 4;
		ИначеЕсли ТипЗнч(ТекСтрока.ПунктЗаказНоменклатура) = Тип("СправочникСсылка.уатГрузовыеМеста_уэ") Тогда 
			ТекСтрока.ТипЗначенияСтроки = 5;
		КонецЕсли;
		
		Если ОчиститьНедоступныеДанные
			И ЗаказыДерево.ПолучитьЭлементы().Получить(ЗаказыДерево.ПолучитьЭлементы().Количество()-1) = ТекСтрока Тогда 
			ТекСтрока.Время      = Неопределено;
			ТекСтрока.Расстояние = Неопределено;
			Если флПланФакт Тогда
				ТекСтрока.ВремяФакт      = Неопределено;
				ТекСтрока.РасстояниеФакт = Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТипыЗначенийСтрокДереваЗаказовСервер(Узел = Неопределено)
	// Типы значений строки:
	// 1 - СправочникСсылка.уатПунктыНазначения 
	// 2 - ДокументСсылка.уатЗаказГрузоотправителя
	// 3 - Строка
	// 4 - СправочникСсылка.Номенклатура
	// 5 - СправочникСсылка.уатГрузовыеМеста_уэ
	
	ОчиститьНедоступныеДанные = Ложь;
	
	Если Узел = Неопределено Тогда 
		Узел = ЗаказыДерево;
		ОчиститьНедоступныеДанные = Истина;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из Узел.ПолучитьЭлементы() Цикл 
		ОбновитьТипыЗначенийСтрокДереваЗаказовСервер(ТекСтрока);
		Если ТипЗнч(ТекСтрока.ПунктЗаказНоменклатура) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда 
			ТекСтрока.ТипЗначенияСтроки = 1;
		ИначеЕсли ТипЗнч(ТекСтрока.ПунктЗаказНоменклатура) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") Тогда 
			ТекСтрока.ТипЗначенияСтроки = 2;
		ИначеЕсли ТипЗнч(ТекСтрока.ПунктЗаказНоменклатура) = Тип("Строка") Тогда 
			ТекСтрока.ТипЗначенияСтроки = 3;
		ИначеЕсли ТипЗнч(ТекСтрока.ПунктЗаказНоменклатура) = Тип("СправочникСсылка.Номенклатура") Тогда 
			ТекСтрока.ТипЗначенияСтроки = 4;
		ИначеЕсли ТипЗнч(ТекСтрока.ПунктЗаказНоменклатура) = Тип("СправочникСсылка.уатГрузовыеМеста_уэ") Тогда 
			ТекСтрока.ТипЗначенияСтроки = 5;
		КонецЕсли;
		
		Если ОчиститьНедоступныеДанные
			И ЗаказыДерево.ПолучитьЭлементы().Получить(ЗаказыДерево.ПолучитьЭлементы().Количество()-1) = ТекСтрока Тогда 
			ТекСтрока.Время      = Неопределено;
			ТекСтрока.Расстояние = Неопределено;
			Если флПланФакт Тогда
				ТекСтрока.ВремяФакт      = Неопределено;
				ТекСтрока.РасстояниеФакт = Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТипыЗначенийСтрокЗаказов(ТекСтрока = Неопределено)
	// Типы значений строки:
	// 0 - СправочникСсылка.Номенклатура
	// 1 - СправочникСсылка.уатГрузовыеМеста_уэ
	
	Если ТекСтрока = Неопределено Тогда 
		Для Каждого ТекСтрокаЗаказы Из Объект.Заказы Цикл
			ОбновитьТипыЗначенийСтрокЗаказов(ТекСтрокаЗаказы);
		КонецЦикла;
		
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекСтрока.Номенклатура) = Тип("СправочникСсылка.уатГрузовыеМеста_уэ") Тогда 
		ТекСтрока.ТипЗначенияСтроки = 1;
	КонецЕсли;
КонецПроцедуры

// Рассчитывает для дерева временные и километражные характеристики для дерева заказов:
//  - суммарное время стоянки в пунктах
//  - Плановое время прибытия 
//  - Плановое время убытия 
//  - общую протяженность маршрута
&НаСервере
Процедура ОбновитьМаршрутныеПараметрыДереваЗаказов(ДатаВыездаНаМаршрут=Неопределено)
	
	ЭлементыДерева = ЗаказыДерево.ПолучитьЭлементы();
	
	Если ЭлементыДерева.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПредВремяОтпр       = ЭлементыДерева[0].УбытиеПлан;
	ПредПунктСтрока     = Неопределено;
	СуммарноеВремя      = 0;
	ОбщееВремяСтоянок   = 0;
	
	Для Каждого ТекСтрокаПункт Из ЭлементыДерева Цикл
		СуммарноеВремяСтоянки = 0;
		
		ЭлементыПункта = ТекСтрокаПункт.ПолучитьЭлементы();
		Если ЭлементыПункта.Количество() = 0 Тогда
			СуммарноеВремяСтоянки = уатЗащищенныеФункцииСервер.СложитьВремя(СуммарноеВремяСтоянки, ТекСтрокаПункт.Стоянка);
		Иначе
			Для Каждого ТекСтрокаЗаказ Из ЭлементыПункта Цикл 
				СуммарноеВремяСтоянки = уатЗащищенныеФункцииСервер.СложитьВремя(СуммарноеВремяСтоянки, ТекСтрокаЗаказ.Стоянка);
			КонецЦикла;
		Конецесли;
		
		Если ЭлементыПункта.Количество() = 0 Тогда
			ОбщееВремяСтоянок      = уатЗащищенныеФункцииСервер.СложитьВремя(ОбщееВремяСтоянок, ТекСтрокаПункт.СтоянкаИзПункта);
			СуммарноеВремяСтоянки  = уатЗащищенныеФункцииСервер.СложитьВремя(СуммарноеВремяСтоянки, ТекСтрокаПункт.СтоянкаИзПункта); 
			ТекСтрокаПункт.Стоянка = СуммарноеВремяСтоянки;
		Иначе
			СуммарноеВремяСтоянки = уатЗащищенныеФункцииСервер.СложитьВремя(СуммарноеВремяСтоянки, ТекСтрокаПункт.СтоянкаИзПункта);
			ТекСтрокаПункт.Стоянка = СуммарноеВремяСтоянки;
			ОбщееВремяСтоянок = уатЗащищенныеФункцииСервер.СложитьВремя(ОбщееВремяСтоянок, ТекСтрокаПункт.Стоянка);
		Конецесли;
	
		// Суммирование фактических стоянок выполняется здесь, поскольку стоянка факт как и план редактируется не по пункту, а по заказам
		Если флПланФакт Тогда
			СуммарноеВремяСтоянкиФакт = 0;
			ЭлементыПункта = ТекСтрокаПункт.ПолучитьЭлементы();
			Если ЭлементыПункта.Количество() = 0 Тогда
				СуммарноеВремяСтоянкиФакт = уатЗащищенныеФункцииСервер.СложитьВремя(СуммарноеВремяСтоянкиФакт, ТекСтрокаПункт.СтоянкаФакт);
			Иначе
				Для Каждого ТекСтрокаЗаказ Из ЭлементыПункта Цикл 
					СуммарноеВремяСтоянкиФакт = уатЗащищенныеФункцииСервер.СложитьВремя(СуммарноеВремяСтоянкиФакт, ТекСтрокаЗаказ.СтоянкаФакт);
				КонецЦикла;
			Конецесли;
			ТекСтрокаПункт.СтоянкаФакт = СуммарноеВремяСтоянкиФакт;
		КонецЕсли;
		
		Если ЭлементыДерева.Индекс(ТекСтрокаПункт) = 0 Тогда
			Если ДатаВыездаНаМаршрут = Неопределено Тогда 
				ТекСтрокаПункт.ПрибытиеПлан =  уатЗащищенныеФункцииСервер.СложитьВремя(Объект.ДатаИВремяОтправленияПлан, -СуммарноеВремяСтоянки);
				ТекСтрокаПункт.УбытиеПлан   = Объект.ДатаИВремяОтправленияПлан;
				ПредВремяОтпр               = ТекСтрокаПункт.УбытиеПлан;
			Иначе 
				ТекСтрокаПункт.ПрибытиеПлан      = ДатаВыездаНаМаршрут;
				ТекСтрокаПункт.УбытиеПлан        = уатЗащищенныеФункцииСервер.СложитьВремя(ТекСтрокаПункт.ПрибытиеПлан, СуммарноеВремяСтоянки);
				Объект.ДатаИВремяОтправленияПлан = ТекСтрокаПункт.УбытиеПлан;
				ПредВремяОтпр                    = ТекСтрокаПункт.УбытиеПлан;
			КонецЕсли;
		Иначе 
			ТекПрибытие = уатЗащищенныеФункцииСервер.СложитьВремя(ПредВремяОтпр, ПредПунктСтрока.Время);
			
			Если Объект.ПересчетВремени = 1 Тогда 
				Если ЗначениеЗаполнено(ТекСтрокаПункт.ПрибытиеПлан) И ЗначениеЗаполнено(ТекПрибытие) Тогда
					РазницаВремени = ТекСтрокаПункт.ПрибытиеПлан - ТекПрибытие;
					
					РазницаЧас = Цел(РазницаВремени/3600);
					РазницаМин = Цел((РазницаВремени - РазницаЧас*3600) / 60);
					РазницаВремени = РазницаЧас + РазницаМин/100;
					
					ТекСтрокаПункт.Ожидание = РазницаВремени;
				Иначе
					ТекСтрокаПункт.Ожидание = 0;
				КонецЕсли;
			Иначе 
				ТекСтрокаПункт.ПрибытиеПлан = уатЗащищенныеФункцииСервер.СложитьВремя(ТекПрибытие, ТекСтрокаПункт.Ожидание);
			КонецЕсли;
			
			ТекСтрокаПункт.УбытиеПлан = уатЗащищенныеФункцииСервер.СложитьВремя(ТекСтрокаПункт.ПрибытиеПлан, СуммарноеВремяСтоянки);
			ПредВремяОтпр = ТекСтрокаПункт.УбытиеПлан;
		КонецЕсли;
		
		ПредПунктСтрока = ТекСтрокаПункт;
	КонецЦикла;
	
	ОбновитьТипыЗначенийСтрокДереваЗаказовСервер();
	
КонецПроцедуры

// Рассчитывает для дерева грузовые характеристики
//  - общий вес и объем заказа
//  - относительно и абсолютное значение загрузки ТС по весу и объему на выходе из точки 
&НаСервере
Процедура ОбновитьГрузовыеПараметрыДереваЗаказов()
	
	ТекВес   = 0; ТекОбъем   = 0; ТекКолМест   = 0;
	ЗаказВес = 0; ЗаказОбъем = 0; ЗаказКолМест = 0;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ГрузовыеПараметрыТС = уатОбщегоНазначения.уатПолучитьГрузоподъемностьИОбъемТС(Объект.ТС);
	ГрузоПодъемность    = ГрузовыеПараметрыТС.Грузоподъемность;
	ОбъемКузова         = ГрузовыеПараметрыТС.ОбъемКузова;
	
	МаксимумМест        = Объект.ТС.Модель.МаксимальноеКоличествоУпаковок;
	
	ГрузовыеПараметрыПрицеп1 = уатОбщегоНазначения.уатПолучитьГрузоподъемностьИОбъемТС(Объект.Прицеп1);
	ГрузоПодъемность         = ГрузоПодъемность + ГрузовыеПараметрыПрицеп1.Грузоподъемность;
	ОбъемКузова              = ОбъемКузова + ГрузовыеПараметрыПрицеп1.ОбъемКузова;
	МаксимумМест             = МаксимумМест + Объект.Прицеп1.Модель.МаксимальноеКоличествоУпаковок;
	
	Если Не Объект.Прицеп1 = Объект.Прицеп2 Тогда 
		ГрузовыеПараметрыПрицеп2 = уатОбщегоНазначения.уатПолучитьГрузоподъемностьИОбъемТС(Объект.Прицеп2);
		ГрузоПодъемность         = ГрузоПодъемность + ГрузовыеПараметрыПрицеп2.Грузоподъемность;
		ОбъемКузова              = ОбъемКузова + ГрузовыеПараметрыПрицеп2.ОбъемКузова;
		МаксимумМест             = МаксимумМест + Объект.Прицеп2.Модель.МаксимальноеКоличествоУпаковок;
	КонецЕсли;
	
	СтрокиДерева = ЗаказыДерево.ПолучитьЭлементы();
	
	мсвЗаказыСДетализациейВцеломПоЗаказу = Новый Массив;
	Для Каждого ТекПункт Из СтрокиДерева Цикл
		Для Каждого ТекЗаказ Из ТекПункт.ПолучитьЭлементы() Цикл
			Если ЗначениеЗаполнено(ТекЗаказ.ПунктЗаказНоменклатура)
				И мсвЗаказыСДетализациейВцеломПоЗаказу.Найти(ТекЗаказ.ПунктЗаказНоменклатура) = Неопределено
				И уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(ТекЗаказ.ПунктЗаказНоменклатура, "ДетализацияЗакрытия")
				= ПредопределенноеЗначение("Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам") Тогда
				мсвЗаказыСДетализациейВцеломПоЗаказу.Добавить(ТекЗаказ.ПунктЗаказНоменклатура)
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	флПогрузки  = Ложь;
	флРазгрузки = Ложь;

	Для Каждого ТекПункт Из СтрокиДерева Цикл
		Для Каждого ТекЗаказ Из ТекПункт.ПолучитьЭлементы() Цикл
			
			ЗаказВес = 0; ЗаказОбъем = 0; ЗаказКолМест = 0;
			
			Если ЗначениеЗаполнено(ТекЗаказ.ПунктЗаказНоменклатура)
				И мсвЗаказыСДетализациейВцеломПоЗаказу.Найти(ТекЗаказ.ПунктЗаказНоменклатура) <> Неопределено Тогда
				
				СтруктураЗаказа = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначенияРеквизитов(ТекЗаказ.ПунктЗаказНоменклатура, "ВесБрутто, Объем, КоличествоМест");
				ЗаказВес     = СтруктураЗаказа.ВесБрутто;
				ЗаказОбъем   = СтруктураЗаказа.Объем;
				ЗаказКолМест = СтруктураЗаказа.КоличествоМест;
			Иначе
				Для Каждого ТекНоменклатура Из ТекЗаказ.ПолучитьЭлементы() Цикл
					ЗаказВес     = ЗаказВес     + ТекНоменклатура.ВесБрутто;
					ЗаказОбъем   = ЗаказОбъем   + ТекНоменклатура.Объем;
					ЗаказКолМест = ЗаказКолМест + ТекНоменклатура.КоличествоМест;
				КонецЦикла;
			КонецЕсли;
			
			ТекЗаказ.ВесБрутто      = ЗаказВес;
			ТекЗаказ.Объем          = ЗаказОбъем;
			ТекЗаказ.КоличествоМест = ЗаказКолМест;
			
			флПогрузки  = Ложь;
			флРазгрузки = Ложь;
			Если ТекЗаказ.ТипТочкиМаршрута = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Погрузка")
				Или ТекЗаказ.ТипТочкиМаршрута = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.ДополнительнаяПогрузка") Тогда
				ТекВес     = ТекВес     + ЗаказВес;
				ТекОбъем   = ТекОбъем   + ЗаказОбъем;
				ТекКолМест = ТекКолМест + ЗаказКолМест;
				флПогрузки = Истина;
			ИначеЕсли ТекЗаказ.ТипТочкиМаршрута = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Разгрузка")
				Или ТекЗаказ.ТипТочкиМаршрута = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.ДополнительнаяРазгрузка") Тогда
				ТекВес      = ТекВес     - ЗаказВес;
				ТекОбъем    = ТекОбъем   - ЗаказОбъем;
				ТекКолМест  = ТекКолМест - ЗаказКолМест;
				флРазгрузки = Истина;
			КонецЕсли;
		КонецЦикла;
		
		ТекПункт.ВесБрутто      = ТекВес;
		ТекПункт.Объем          = ТекОбъем;
		ТекПункт.КоличествоМест = ТекКолМест;
		ТекПункт.ВесПроцент     = ?(Грузоподъемность, ТекВес / Грузоподъемность, 0) * 100;
		ТекПункт.ОбъемПроцент   = ?(ОбъемКузова, ТекОбъем / ОбъемКузова, 0) * 100;
		
		Если флПогрузки Тогда
			ТекПункт.Погрузка = 1;
		КонецЕсли;
		
		Если флРазгрузки Тогда
			ТекПункт.Разгрузка = 1;
		КонецЕсли;

		ТекПункт.ПогрузкаРазгрузкаПредставление = Строка(ТекПункт.Погрузка) + " / " + Строка(ТекПункт.Разгрузка);
		
		ТекПункт.КоличествоМестПроцент = ?(МаксимумМест=0, 0, ТекКолМест / МаксимумМест) * 100;
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ОбновитьТипыЗначенийСтрокДереваЗаказовСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьГрузовыеПараметрыЗаказов(ТекДанные = Неопределено)
	
	Если ТекДанные = Неопределено Тогда
		Для Каждого ТекСтрока Из Объект.Заказы Цикл
			ОбновитьГрузовыеПараметрыЗаказов(ТекСтрока);
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекДанные) = Тип("ДанныеФормыЭлементДерева") Тогда
		ТекНоменклатура = ТекДанные.ПунктЗаказНоменклатура;
	Иначе
		ТекНоменклатура = ТекДанные.Номенклатура;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекДанные.ЗаказГрузоотправителя) 
		И уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(ТекДанные.ЗаказГрузоотправителя, "ДетализацияЗакрытия") =
			ПредопределенноеЗначение("Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам") Тогда
		ВесОбъем = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначенияРеквизитов(ТекДанные.ЗаказГрузоотправителя, "ВесБрутто, Объем, КоличествоМест");
		ВесОбъем.Вставить("Вес", ВесОбъем.ВесБрутто);
	ИначеЕсли ТипЗнч(ТекНоменклатура) = Тип("СправочникСсылка.уатГрузовыеМеста_уэ") Тогда
		ВесОбъем = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначенияРеквизитов(ТекНоменклатура, "ВесБрутто, Объем");
		Если ТипЗнч(ТекДанные.ЕдиницаИзмерения) = Тип("СправочникСсылка.уатВидыУпаковки_уэ") Тогда
			КоличествоВОсновнойУпаковке = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(ТекДанные.ЕдиницаИзмерения, "Коэффициент");
			Если НЕ ЗначениеЗаполнено(КоличествоВОсновнойУпаковке) Тогда
				ВесОбъем.Вставить("КоличествоМест", 0);
			Иначе
				ВесОбъем.Вставить("КоличествоМест", ТекДанные.Количество / КоличествоВОсновнойУпаковке);
			КонецЕсли;
		Иначе
			ВесОбъем.Вставить("КоличествоМест", 0);
		КонецЕсли;
		ВесОбъем.Вставить("Вес",   ВесОбъем.ВесБрутто * ТекДанные.Количество);
		ВесОбъем.Вставить("Объем", ВесОбъем.Объем     * ТекДанные.Количество);
	ИначеЕсли ТипЗнч(ТекНоменклатура) = Тип("СправочникСсылка.Номенклатура") Тогда 
		ВесОбъем = уатОбщегоНазначения.ПолучитьВесОбъемНоменклатуры(ТекНоменклатура, ТекДанные.ЕдиницаИзмерения, ТекДанные.Количество);
	Иначе
		ТекДанные.ВесБрутто      = 0;
		ТекДанные.Объем          = 0;
		ТекДанные.КоличествоМест = 0;
		Возврат;
	КонецЕсли;
	
	ТекДанные.ВесБрутто      = ВесОбъем.Вес;
	ТекДанные.Объем          = ВесОбъем.Объем;
	ТекДанные.КоличествоМест = ВесОбъем.КоличествоМест;
	
КонецПроцедуры

// Процедура выполняет удаление строки номенклатуры  (вместе со смежной) из дерева
// 
// Параметры:
//  ДеревоЗаказов      - дерево значений, содержащее заказы
//  СтрокаНоменклатуры - удаляемая строка
//  УдалятьРодителей   - признак, что после удаления строки при необходимости будут удалены родители
//
&НаКлиенте
Процедура УдалитьНоменклатуруИзМаршрутногоЛиста(ДанныеСтроки, УдалятьРодителей = Истина)
	
	СтруктураПоиска = Новый Структура();
	СтруктураПоиска.Вставить("ЗаказГрузоотправителя",    ДанныеСтроки.ЗаказГрузоотправителя);
	СтруктураПоиска.Вставить("ПунктЗаказНоменклатура",   ДанныеСтроки.ПунктЗаказНоменклатура);
	СтруктураПоиска.Вставить("ЕдиницаИзмеренияПоЗаказу", ДанныеСтроки.ЕдиницаИзмеренияПоЗаказу);
	СтруктураПоиска.Вставить("Количество",               ДанныеСтроки.Количество);
	
	НайденныеСтроки = НайтиСтрокиВДереве(ЗаказыДерево.ПолучитьЭлементы(), СтруктураПоиска, Истина);
	
	Сч = НайденныеСтроки.Количество()-1;
	Пока Истина Цикл 
		Если Сч < 0 Тогда 
			Прервать;
		КонецЕсли;
		
		РодСтрокаЗаказ = НайденныеСтроки[Сч].ПолучитьРодителя();
		РодСтрокаПункт = НайденныеСтроки[Сч].ПолучитьРодителя().ПолучитьРодителя();
		
		НайденныеСтроки[Сч].ПолучитьРодителя().ПолучитьЭлементы().Удалить(НайденныеСтроки[Сч]);
		
		Если УдалятьРодителей Тогда
			Если РодСтрокаЗаказ.ПолучитьЭлементы().Количество() = 0 Тогда
				РодСтрокаЗаказ.ПолучитьРодителя().ПолучитьЭлементы().Удалить(РодСтрокаЗаказ);
			КонецЕсли;
			Если РодСтрокаПункт.ПолучитьЭлементы().Количество() = 0 Тогда
				ЗаказыДерево.ПолучитьЭлементы().Удалить(РодСтрокаПункт);
			КонецЕсли;
		КонецЕсли;
		
		Сч = Сч - 1;
	КонецЦикла;
	
КонецПроцедуры

// Процедура выполняет удаление строки номенклатуры  (вместе со смежной) из дерева
// 
// Параметры:
//  ДеревоЗаказов      - дерево значений, содержащее заказы
//  СтрокаНоменклатуры - удаляемая строка
//  УдалятьРодителей   - признак, что после удаления строки при необходимости будут удалены родители
//
&НаКлиенте
Процедура УдалитьЗаказБезНоменклатурыИзМаршрутногоЛиста(ДанныеСтроки, УдалятьРодителей = Истина)
	
	СтруктураПоиска = Новый Структура();
	СтруктураПоиска.Вставить("ЗаказГрузоотправителя",    ДанныеСтроки.ЗаказГрузоотправителя);
	СтруктураПоиска.Вставить("ПунктЗаказНоменклатура",   ДанныеСтроки.ПунктЗаказНоменклатура);
	СтруктураПоиска.Вставить("ЕдиницаИзмеренияПоЗаказу", ДанныеСтроки.ЕдиницаИзмеренияПоЗаказу);
	СтруктураПоиска.Вставить("Количество",               ДанныеСтроки.Количество);
	
	НайденныеСтроки = НайтиСтрокиВДереве(ЗаказыДерево.ПолучитьЭлементы(), СтруктураПоиска, Истина);
	
	Сч = НайденныеСтроки.Количество()-1;
	Пока Истина Цикл 
		Если Сч < 0 Тогда 
			Прервать;
		КонецЕсли;
		
		РодСтрокаПункт = НайденныеСтроки[Сч].ПолучитьРодителя();
		
		НайденныеСтроки[Сч].ПолучитьРодителя().ПолучитьЭлементы().Удалить(НайденныеСтроки[Сч]);
		
		Если УдалятьРодителей Тогда
			Если РодСтрокаПункт.ПолучитьЭлементы().Количество() = 0 Тогда
				ЗаказыДерево.ПолучитьЭлементы().Удалить(РодСтрокаПункт);
			КонецЕсли;
		КонецЕсли;
		
		Сч = Сч - 1;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОформлениеДокументовПродолжение(Результат, ДопПараметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если Не ПроверитьЗаполнение() Тогда
			Возврат;
		КонецЕсли;
		
		Попытка
			Записать();
			ОткрытьФорму("ОбщаяФорма.уатФормаОформленияДокументов_уэ",,ЭтотОбъект);
		Исключение
			ТекстСообщения = ИнформацияОбОшибке().Описание;
			ТекПричина = ИнформацияОбОшибке().Причина;
			Сч = 1; МаксСч = 10;
			Пока ТекПричина <> Неопределено И Сч <= МаксСч Цикл
				ТекстСообщения = ТекстСообщения + " \ " + ТекПричина.Описание;
				ТекПричина = ТекПричина.Причина;
				Сч = Сч + 1;
			КонецЦикла;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыДеревоУдалитьСтроку(ТекДанныеСтроки)
	
	Если ТипЗнч(ТекДанныеСтроки.ПунктЗаказНоменклатура) = Тип("СправочникСсылка.уатПунктыНазначения") 
			Или ТипЗнч(ТекДанныеСтроки.ПунктЗаказНоменклатура) = Тип("Строка") Тогда 
		Если ТекДанныеСтроки.ПолучитьЭлементы().Количество() = 0 Тогда // Просто пункт.
			ЗаказыДерево.ПолучитьЭлементы().Удалить(ТекДанныеСтроки);
			
		Иначе
			Пока Истина Цикл
				Попытка
					Если ТекДанныеСтроки.ПолучитьЭлементы().Количество() = 0 Тогда 
						Прервать;
					КонецЕсли;
				Исключение
					Прервать;
				КонецПопытки;
				
				ТекСтрокаЗаказ = ТекДанныеСтроки.ПолучитьЭлементы()[0];
				Если ТекСтрокаЗаказ.ПолучитьЭлементы().Количество() Тогда
					Пока Истина Цикл
						Попытка
							Если ТекСтрокаЗаказ.ПолучитьЭлементы().Количество() = 0 Тогда 
								Прервать;
							КонецЕсли;
						Исключение
							Прервать;
						КонецПопытки;
						
						ТекСтрокаГруз = ТекСтрокаЗаказ.ПолучитьЭлементы()[0];
						УдалитьНоменклатуруИзМаршрутногоЛиста(ТекСтрокаГруз);
					КонецЦикла;
				Иначе
					УдалитьЗаказБезНоменклатурыИзМаршрутногоЛиста(ТекСтрокаЗаказ);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ТекДанныеСтроки.ПунктЗаказНоменклатура) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") Тогда
		Если ТекДанныеСтроки.ПолучитьЭлементы().Количество() Тогда
			Пока Истина Цикл
				Попытка
					Если ТекДанныеСтроки.ПолучитьЭлементы().Количество() = 0 Тогда 
						Прервать;
					КонецЕсли;
				Исключение
					Прервать;
				КонецПопытки;
				
				ТекСтрокаГруз = ТекДанныеСтроки.ПолучитьЭлементы()[0];
				УдалитьНоменклатуруИзМаршрутногоЛиста(ТекСтрокаГруз);
			КонецЦикла;
		Иначе
			УдалитьЗаказБезНоменклатурыИзМаршрутногоЛиста(ТекДанныеСтроки);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ТекДанныеСтроки.ПунктЗаказНоменклатура) = Тип("СправочникСсылка.Номенклатура")
			Или ТипЗнч(ТекДанныеСтроки.ПунктЗаказНоменклатура) = Тип("СправочникСсылка.уатГрузовыеМеста_уэ") Тогда
		УдалитьНоменклатуруИзМаршрутногоЛиста(ТекДанныеСтроки);
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из ЗаказыДерево.ПолучитьЭлементы() Цикл
		СтрокаДерева.Время      = 0;
		СтрокаДерева.Расстояние = 0;
		Если флПланФакт Тогда
			СтрокаДерева.ВремяФакт      = 0;
			СтрокаДерева.РасстояниеФакт = 0;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗаказыДерево.ПолучитьЭлементы().Количество() Тогда 
		Объект.ДатаИВремяОтправленияПлан = ЗаказыДерево.ПолучитьЭлементы()[0].УбытиеПлан;
	КонецЕсли;
	
КонецПроцедуры

// Получает список номенклатуры по заказу, уже присутствующую в списке маршрутного листа 
// 
// Параметры:
//  Заказ        - Заказ на ТС,из которого будет получена номенклатура
//
&НаСервере
Процедура ПолучитьНоменклатуруПоЗаказуВДереве(Заказ)   
	
	дЗаказыДерево = ДанныеФормыВЗначение(ЗаказыДерево, Тип("ДеревоЗначений"));
	
	СтруктураОтбора = Новый Структура("ПунктЗаказНоменклатура, ТипТочкиМаршрута");
	СтруктураОтбора.ПунктЗаказНоменклатура = Заказ; 
	СтруктураОтбора.ТипТочкиМаршрута       = Перечисления.уатТипыТочекМаршрута.Погрузка;
	
	НайдСтроки = дЗаказыДерево.Строки.НайтиСтроки(СтруктураОтбора, Истина);
	
	ТабВыбраннаяНоменклатура.Очистить();
	
	Если Не НайдСтроки = Неопределено Тогда
		Для Каждого ТекСтрока Из НайдСтроки Цикл
			Для Каждого ТекСтрокаНом Из ТекСтрока.Строки Цикл
				НовСтрока = табВыбраннаяНоменклатура.Добавить();
				НовСтрока.Заказчик              = ТекСтрока.ПунктЗаказНоменклатура.Контрагент;
				НовСтрока.ЗаказГрузоотправителя = ТекСтрока.ПунктЗаказНоменклатура;
				НовСтрока.Номенклатура          = ТекСтрокаНом.ПунктЗаказНоменклатура;
				НовСтрока.ЕдиницаИзмерения      = ТекСтрокаНом.ЕдиницаИзмерения;
				НовСтрока.ЕдиницаИзмеренияПоЗаказу = ТекСтрокаНом.ЕдиницаИзмеренияПоЗаказу;
				НовСтрока.Количество            = ТекСтрокаНом.Количество;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняет поиск или создание строк уровня Заказ в дереве, в которые потом будут добавлены 
// перевозимые позиции. Если соответствующие строки найти не удается, то создаются новые
//
// Параметры:
//  мЗаказНаТС    - Заказ на ТС для которого необходимо добавить позицию в дерево заказов
//  дЗаказыДерево - Дерево заказов
//
// Возвращаемое значение:
//  Строки       - Структура, содержащая две строки. Одна для добавления погрузочной позиции, вторая для 
//               разгрузочной позиции
//
&НаСервере
Функция ПолучитьСтрокиДереваДляДобавленияПозиции(мЗаказНаТС, РежимДобавленияЗаказовВМаршрутныйЛист)
	
	Результат = Новый Структура("СтрокаЗаказПогрузка, СтрокаЗаказРазгрузка, СтрокиПромежуточныхПунктов", Неопределено, Неопределено, Новый Массив());
	
	Если мЗаказНаТС.FTL Тогда 
		ПредСчПоискПункт   = 0;
		мсвНайденныеПункты = Новый Массив();
		
		Для Сч = 0 По мЗаказНаТС.ПромежуточныеПункты.Количество()-1 Цикл 
			флПунктНайден = Ложь;
			Для СчПоискПункт = ПредСчПоискПункт По ЗаказыДерево.ПолучитьЭлементы().Количество() - 1 Цикл 
				Если ЗаказыДерево.ПолучитьЭлементы()[СчПоискПункт].ПунктЗаказНоменклатура = мЗаказНаТС.ПромежуточныеПункты[Сч].Пункт Тогда 
					Для Каждого ТекСтрокаЗаказа Из ЗаказыДерево.ПолучитьЭлементы()[СчПоискПункт].ПолучитьЭлементы() Цикл 
						Если ТекСтрокаЗаказа.ПунктЗаказНоменклатура = мЗаказНаТС И ТекСтрокаЗаказа.ТипТочкиМаршрута = мЗаказНаТС.ПромежуточныеПункты[Сч].ТипТочкиМаршрута Тогда 
							мсвНайденныеПункты.Добавить(ТекСтрокаЗаказа);
							ПредСчПоискПункт = Сч;
							флПунктНайден = Истина;
							Прервать;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				Если флПунктНайден Тогда
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		Если мсвНайденныеПункты.Количество() = мЗаказНаТС.ПромежуточныеПункты.Количество() Тогда 
			Для Каждого СтрокаЗаказа Из мсвНайденныеПункты Цикл 
				Результат.СтрокиПромежуточныхПунктов.Добавить(СтрокаЗаказа);
			КонецЦикла;
			
		Иначе 
			Для Сч = 0 По мЗаказНаТС.ПромежуточныеПункты.Количество()-1 Цикл 
				СтрокаПунктПП = ЗаказыДерево.ПолучитьЭлементы().Добавить(); 
				СтрокаПунктПП.ПунктЗаказНоменклатура = мЗаказНаТС.ПромежуточныеПункты[Сч].Пункт;
				
				СтрокаЗаказПП = СтрокаПунктПП.ПолучитьЭлементы().Добавить();
				СтрокаЗаказПП.ТипТочкиМаршрута = мЗаказНаТС.ПромежуточныеПункты[Сч].ТипТочкиМаршрута;
				
				Результат.СтрокиПромежуточныхПунктов.Добавить(СтрокаЗаказПП);
			КонецЦикла;
		КонецЕсли;
		
	Иначе 
		СтрокаПунктПогрузка  = Неопределено;
		СтрокаЗаказПогрузка  = Неопределено;
		СтрокаПунктРазгрузка = Неопределено;
		СтрокаЗаказРазгрузка = Неопределено;
		
		Если РежимДобавленияЗаказовВМаршрутныйЛист = 0 Тогда 
			СтруктураПоиска = Новый Структура();
			СтруктураПоиска.Вставить("ПунктЗаказНоменклатура", мЗаказНаТС);
			СтруктураПоиска.Вставить("ТипТочкиМаршрута",       Перечисления.уатТипыТочекМаршрута.Погрузка);
			
			НайдСтроки = НайтиСтрокиВДереве(ЗаказыДерево.ПолучитьЭлементы(), СтруктураПоиска, Истина);
			
			Если НайдСтроки.Количество() Тогда 
				СтрокаПунктПогрузка = НайдСтроки[0].ПолучитьРодителя();
				СтрокаЗаказПогрузка = НайдСтроки[0];
				
			Иначе 
				СтруктураПоискаВнутр = Новый Структура();
				СтруктураПоискаВнутр.Вставить("ПунктЗаказНоменклатура", мЗаказНаТС.АдресОтправления);
				
				НайдСтроки = НайтиСтрокиВДереве(ЗаказыДерево.ПолучитьЭлементы(), СтруктураПоискаВнутр, Ложь);
				
				Если НайдСтроки.Количество() Тогда 
					СтрокаПунктПогрузка = НайдСтроки[0];
					СтрокаЗаказПогрузка = СтрокаПунктПогрузка.ПолучитьЭлементы().Добавить();
					СтрокаЗаказПогрузка.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка;
				КонецЕсли;
			КонецЕсли;
			
			Если СтрокаПунктПогрузка = Неопределено Тогда 
				флПунктПогрузкиПройден = Истина; // Перебираем все пункты подряд.
			Иначе 
				флПунктПогрузкиПройден = Ложь; // Перебираем пункты после погрузки.
			КонецЕсли;
			
			Для Каждого ТекСтрокаПункта Из ЗаказыДерево.ПолучитьЭлементы() Цикл 
				Если Не флПунктПогрузкиПройден И ТекСтрокаПункта = СтрокаПунктПогрузка Тогда 
					флПунктПогрузкиПройден = Истина;
				КонецЕсли;
				
				Если флПунктПогрузкиПройден И ТекСтрокаПункта.ПунктЗаказНоменклатура = мЗаказНаТС.АдресНазначения Тогда 
					СтрокаПунктРазгрузка = ТекСтрокаПункта;
					
					Для Каждого ТекСтрокаЗаказа Из ТекСтрокаПункта.ПолучитьЭлементы() Цикл 
						Если ТекСтрокаЗаказа.ПунктЗаказНоменклатура = мЗаказНаТС 
								И (ТекСтрокаЗаказа.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка
								ИЛИ ТекСтрокаЗаказа.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяРазгрузка) Тогда 
							СтрокаЗаказРазгрузка = ТекСтрокаЗаказа;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					Если Не СтрокаЗаказРазгрузка = Неопределено Тогда 
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если СтрокаПунктРазгрузка = Неопределено Тогда // Нет такого пункта в МЛ или режим группировки по заказам - добавлять в конец.
			Если РежимДобавленияЗаказовВМаршрутныйЛист = 0 И ЗаказыДерево.ПолучитьЭлементы().Количество() 
					И ЗаказыДерево.ПолучитьЭлементы()[ЗаказыДерево.ПолучитьЭлементы().Количество()-1].ПунктЗаказНоменклатура = мЗаказНаТС.АдресНазначения Тогда
				СтрокаПунктРазгрузка = ЗаказыДерево.ПолучитьЭлементы()[ЗаказыДерево.ПолучитьЭлементы().Количество()-1];
			Иначе
				СтрокаПунктРазгрузка = ЗаказыДерево.ПолучитьЭлементы().Добавить();
				СтрокаПунктРазгрузка.ПунктЗаказНоменклатура = мЗаказНаТС.АдресНазначения;
				СтрокаПунктРазгрузка.ПрибытиеПлан = мЗаказНаТС.ДоставкаС;
				СтрокаПунктРазгрузка.УбытиеПлан = мЗаказНаТС.ДоставкаПо;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаПунктПогрузка = Неопределено Тогда // Нет такого пункта в МЛ или режим группировки по заказам - добавлять в конец.
			Если РежимДобавленияЗаказовВМаршрутныйЛист = 0 И ЗаказыДерево.ПолучитьЭлементы().Количество() 
					И ЗаказыДерево.ПолучитьЭлементы()[ЗаказыДерево.ПолучитьЭлементы().Количество()-1].ПунктЗаказНоменклатура = мЗаказНаТС.АдресОтправления Тогда
				СтрокаПунктПогрузка = ЗаказыДерево.ПолучитьЭлементы()[ЗаказыДерево.ПолучитьЭлементы().Количество()-1];
			Иначе
				СтрокаПунктПогрузка = ЗаказыДерево.ПолучитьЭлементы().Вставить(ЗаказыДерево.ПолучитьЭлементы().Индекс(СтрокаПунктРазгрузка));
				СтрокаПунктПогрузка.ПунктЗаказНоменклатура = мЗаказНаТС.АдресОтправления;
				СтрокаПунктПогрузка.ПрибытиеПлан = мЗаказНаТС.ОтправлениеС;
				СтрокаПунктПогрузка.УбытиеПлан = мЗаказНаТС.ОтправлениеПо;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрокаЗаказПогрузка = Неопределено Тогда 
			СтрокаЗаказПогрузка = СтрокаПунктПогрузка.ПолучитьЭлементы().Добавить();
			СтрокаЗаказПогрузка.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка;
		КонецЕсли;
		
		Если СтрокаЗаказРазгрузка = Неопределено Тогда 
			СтрокаЗаказРазгрузка = СтрокаПунктРазгрузка.ПолучитьЭлементы().Добавить();
			СтрокаЗаказРазгрузка.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка;
		КонецЕсли;
		
		Результат.СтрокаЗаказПогрузка  = СтрокаЗаказПогрузка;
		Результат.СтрокаЗаказРазгрузка = СтрокаЗаказРазгрузка;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ДобавитьСтрокиДереваПриВыбореЗаказа(ВыбранноеЗначение, РежимДобавленияЗаказовВМаршрутныйЛист)
	
	мСтроки = ПолучитьСтрокиДереваДляДобавленияПозиции(ВыбранноеЗначение.Заказ, РежимДобавленияЗаказовВМаршрутныйЛист);
	СтрокаЗаказПогрузка  = мСтроки.СтрокаЗаказПогрузка;
	мсвСтрокиПП          = мСтроки.СтрокиПромежуточныхПунктов;
	СтрокаЗаказРазгрузка = мСтроки.СтрокаЗаказРазгрузка;
	
	Если (ЗначениеЗаполнено(Объект.ЭтапМаршрутизации) И Объект.ЭтапМаршрутизации.АлгоритмМаршрутизации = 3) Тогда
		ТипТС = Новый Массив;
	Иначе
		ТипТС = Объект.ТС.ТипТС;
	КонецЕсли;
	
	Если ВыбранноеЗначение.Заказ.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам Тогда
		Если ВыбранноеЗначение.Заказ.FTL Тогда 
			Для Сч = 0 По ВыбранноеЗначение.Заказ.ПромежуточныеПункты.Количество()-1 Цикл 
				СтрокаЗаказПП                          = мсвСтрокиПП[Сч];
				СтрокаЗаказПП.ПунктЗаказНоменклатура   = ВыбранноеЗначение.Заказ;
				СтрокаЗаказПП.ЗаказГрузоотправителя    = ВыбранноеЗначение.Заказ;
				СтрокаЗаказПП.Количество               = ВыбранноеЗначение.Количество;
				СтрокаЗаказПП.ЕдиницаИзмерения         = ВыбранноеЗначение.ЕдиницаИзмерения;
				СтрокаЗаказПП.ЕдиницаИзмеренияПоЗаказу = ВыбранноеЗначение.ЕдиницаИзмерения;
				СтрокаЗаказПП.ВесБрутто                = ВыбранноеЗначение.Вес;
				СтрокаЗаказПП.Объем                    = ВыбранноеЗначение.Объем;
				СтрокаЗаказПП.КоличествоМест           = ВыбранноеЗначение.КоличествоМест;
				СтрокаЗаказПП.СтоянкаИзПункта          = уатЗащищенныеФункцииСервер_уэ.ПолучитьВремяСтоянкиВПункте(ВыбранноеЗначение.Заказ.ПромежуточныеПункты[Сч].Пункт, ТипТС);
				СтрокаЗаказПП.ОкноС                    = ВыбранноеЗначение.Заказ.ПромежуточныеПункты[Сч].ОкноС;
				СтрокаЗаказПП.ОкноПо                   = ВыбранноеЗначение.Заказ.ПромежуточныеПункты[Сч].ОкноПо;
				СтрокаЗаказПП.Рекламации               = ПолучитьРекламацииДляСтрокиЗаказов(ВыбранноеЗначение.Заказ);
				СтрокаЗаказПП.Стоянка              = ВыбранноеЗначение.Заказ.ПромежуточныеПункты[Сч].Стоянка;
				Если ВыбранноеЗначение.Заказ.ПромежуточныеПункты[Сч].Ожидание > 0 И СтрокаЗаказПП.ПолучитьРодителя().Ожидание = 0 Тогда 
					СтрокаЗаказПП.ПолучитьРодителя().Ожидание = ВыбранноеЗначение.Заказ.ПромежуточныеПункты[Сч].Ожидание;
				КонецЕсли;
			КонецЦикла;
			
		Иначе 
			СтрокаЗаказПогрузка.ПунктЗаказНоменклатура   = ВыбранноеЗначение.Заказ;
			СтрокаЗаказПогрузка.ЗаказГрузоотправителя    = ВыбранноеЗначение.Заказ;
			СтрокаЗаказПогрузка.Количество               = ВыбранноеЗначение.Количество;
			СтрокаЗаказПогрузка.ЕдиницаИзмерения         = ВыбранноеЗначение.ЕдиницаИзмерения;
			СтрокаЗаказПогрузка.ЕдиницаИзмеренияПоЗаказу = ВыбранноеЗначение.ЕдиницаИзмерения;
			СтрокаЗаказПогрузка.ВесБрутто                = ВыбранноеЗначение.Вес;
			СтрокаЗаказПогрузка.Объем                    = ВыбранноеЗначение.Объем;
			СтрокаЗаказПогрузка.КоличествоМест           = ВыбранноеЗначение.КоличествоМест;
			СтрокаЗаказПогрузка.ОкноС                    = ВыбранноеЗначение.Заказ.ОтправлениеС;
			СтрокаЗаказПогрузка.ОкноПо                   = ВыбранноеЗначение.Заказ.ОтправлениеПо;
			СтрокаЗаказПогрузка.Стоянка                  = ВыбранноеЗначение.Заказ.СтоянкаПунктОтправления;
			СтрокаЗаказПогрузка.СтоянкаИзПункта          = уатЗащищенныеФункцииСервер_уэ.ПолучитьВремяСтоянкиВПункте(ВыбранноеЗначение.Заказ.АдресОтправления, ТипТС);
			СтрокаЗаказПогрузка.Рекламации               = ПолучитьРекламацииДляСтрокиЗаказов(ВыбранноеЗначение.Заказ);
			
			СтрокаЗаказРазгрузка.ПунктЗаказНоменклатура   = ВыбранноеЗначение.Заказ;
			СтрокаЗаказРазгрузка.ЗаказГрузоотправителя    = ВыбранноеЗначение.Заказ;
			СтрокаЗаказРазгрузка.Количество               = ВыбранноеЗначение.Количество;
			СтрокаЗаказРазгрузка.ЕдиницаИзмерения         = ВыбранноеЗначение.ЕдиницаИзмерения;
			СтрокаЗаказРазгрузка.ЕдиницаИзмеренияПоЗаказу = ВыбранноеЗначение.ЕдиницаИзмерения;
			СтрокаЗаказРазгрузка.ВесБрутто                = ВыбранноеЗначение.Вес;
			СтрокаЗаказРазгрузка.Объем                    = ВыбранноеЗначение.Объем;
			СтрокаЗаказРазгрузка.КоличествоМест           = ВыбранноеЗначение.КоличествоМест;
			СтрокаЗаказРазгрузка.ОкноС                    = ВыбранноеЗначение.Заказ.ДоставкаС;
			СтрокаЗаказРазгрузка.ОкноПо                   = ВыбранноеЗначение.Заказ.ДоставкаПо;
			СтрокаЗаказРазгрузка.Стоянка                  = ВыбранноеЗначение.Заказ.СтоянкаПунктНазначения;
			СтрокаЗаказРазгрузка.СтоянкаИзПункта          = уатЗащищенныеФункцииСервер_уэ.ПолучитьВремяСтоянкиВПункте(ВыбранноеЗначение.Заказ.АдресНазначения, ТипТС);
			СтрокаЗаказРазгрузка.Рекламации               = ПолучитьРекламацииДляСтрокиЗаказов(ВыбранноеЗначение.Заказ);
		КонецЕсли;
		
	Иначе
		Если ВыбранноеЗначение.Заказ.FTL Тогда
			
			КоличествоПунктов = ВыбранноеЗначение.Заказ.ПромежуточныеПункты.Количество();
			Если ВыбранноеЗначение.Заказ.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам Тогда
				КоличествоГрузов = ВыбранноеЗначение.Заказ.Товары.Количество();
			Иначе
				КоличествоГрузов = ВыбранноеЗначение.Заказ.ГрузовойСостав.Количество();
			КонецЕсли;
			мсвОтрезкиПути = уатОбщегоНазначения_проф.ПолучитьНачальныеКонечныеПунктыГрузов(ВыбранноеЗначение.Заказ.ОтрезкиПути, КоличествоГрузов, КоличествоПунктов);
			
			Для Сч = 0 По ВыбранноеЗначение.Заказ.ПромежуточныеПункты.Количество()-1 Цикл 
				СтрокаЗаказПП                        = мсвСтрокиПП[Сч];
				СтрокаЗаказПП.ПунктЗаказНоменклатура = ВыбранноеЗначение.Заказ;
				СтрокаЗаказПП.СтоянкаИзПункта        = уатЗащищенныеФункцииСервер_уэ.ПолучитьВремяСтоянкиВПункте(ВыбранноеЗначение.Заказ.ПромежуточныеПункты[Сч].Пункт, ТипТС);
				СтрокаЗаказПП.ОкноС                  = ВыбранноеЗначение.Заказ.ПромежуточныеПункты[Сч].ОкноС;
				СтрокаЗаказПП.ОкноПо                 = ВыбранноеЗначение.Заказ.ПромежуточныеПункты[Сч].ОкноПо;
				СтрокаЗаказПП.Рекламации             = ПолучитьРекламацииДляСтрокиЗаказов(ВыбранноеЗначение.Заказ);
				СтрокаЗаказПП.Стоянка                = ВыбранноеЗначение.Заказ.ПромежуточныеПункты[Сч].Стоянка;
				Если ВыбранноеЗначение.Заказ.ПромежуточныеПункты[Сч].Ожидание > 0 И СтрокаЗаказПП.ПолучитьРодителя().Ожидание = 0 Тогда 
					СтрокаЗаказПП.ПолучитьРодителя().Ожидание = ВыбранноеЗначение.Заказ.ПромежуточныеПункты[Сч].Ожидание;
				КонецЕсли;
								
				флагПогрузка = Ложь;
				флагРазгрузка = Ложь;
				Если (ВыбранноеЗначение.Заказ.ПромежуточныеПункты[Сч].ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка
						Или ВыбранноеЗначение.Заказ.ПромежуточныеПункты[Сч].ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяПогрузка) Тогда 
					флагПогрузка = Истина;

				ИначеЕсли (ВыбранноеЗначение.Заказ.ПромежуточныеПункты[Сч].ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка
						Или ВыбранноеЗначение.Заказ.ПромежуточныеПункты[Сч].ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяРазгрузка) Тогда 
					флагРазгрузка = Истина;

				Иначе 
					Продолжить;
				КонецЕсли;
				
				НомерСтрокиГруза = ВыбранноеЗначение.НомерСтрокиГруза;
				флагГрузАктивен = Ложь;
				Если НомерСтрокиГруза > 0 Тогда
					флагГрузАктивен = Истина;
					ТекОтрезокПути = мсвОтрезкиПути[НомерСтрокиГруза-1];
					Если ТекОтрезокПути.От < 0 Или ТекОтрезокПути.До < 0 Тогда
						// Груз, которому не назначен отрезок пути
						флагГрузАктивен = Ложь;
					КонецЕсли;
					
					Если Не ((флагПогрузка И ТекОтрезокПути.От = Сч+1) Или (флагРазгрузка И ТекОтрезокПути.До = Сч+1)) Тогда
						флагГрузАктивен = Ложь;
					КонецЕсли; 
				КонецЕсли;
				
				Если Не флагГрузАктивен Тогда 
					Продолжить;
				КонецЕсли;
				
				СтрокаНомПП                          = СтрокаЗаказПП.ПолучитьЭлементы().Добавить();
				СтрокаНомПП.ЗаказГрузоотправителя    = ВыбранноеЗначение.Заказ;
				СтрокаНомПП.Количество               = ВыбранноеЗначение.Количество;
				СтрокаНомПП.ПунктЗаказНоменклатура   = ВыбранноеЗначение.Номенклатура;
				СтрокаНомПП.ЕдиницаИзмерения         = ВыбранноеЗначение.ЕдиницаИзмерения;
				СтрокаНомПП.ЕдиницаИзмеренияПоЗаказу = ВыбранноеЗначение.ЕдиницаИзмерения;
				СтрокаНомПП.ВесБрутто                = ВыбранноеЗначение.Вес;
				СтрокаНомПП.Объем                    = ВыбранноеЗначение.Объем;
				СтрокаНомПП.КоличествоМест           = ВыбранноеЗначение.КоличествоМест;
			КонецЦикла;
			
		Иначе 
			СтрокаНомПогрузка  = СтрокаЗаказПогрузка.ПолучитьЭлементы().Добавить();
			СтрокаНомРазгрузка = СтрокаЗаказРазгрузка.ПолучитьЭлементы().Добавить();
			
			СтрокаЗаказПогрузка.ПунктЗаказНоменклатура = ВыбранноеЗначение.Заказ;
			СтрокаНомПогрузка.ЗаказГрузоотправителя    = ВыбранноеЗначение.Заказ;
			СтрокаНомПогрузка.Количество               = ВыбранноеЗначение.Количество;
			СтрокаНомПогрузка.ПунктЗаказНоменклатура   = ВыбранноеЗначение.Номенклатура;
			СтрокаНомПогрузка.ЕдиницаИзмерения         = ВыбранноеЗначение.ЕдиницаИзмерения;
			СтрокаНомПогрузка.ЕдиницаИзмеренияПоЗаказу = ВыбранноеЗначение.ЕдиницаИзмерения;
			СтрокаНомПогрузка.ВесБрутто                = ВыбранноеЗначение.Вес;
			СтрокаНомПогрузка.Объем                    = ВыбранноеЗначение.Объем;
			СтрокаНомПогрузка.КоличествоМест           = ВыбранноеЗначение.КоличествоМест;
			СтрокаЗаказПогрузка.ОкноС                  = ВыбранноеЗначение.Заказ.ОтправлениеС;
			СтрокаЗаказПогрузка.ОкноПо                 = ВыбранноеЗначение.Заказ.ОтправлениеПо;
			СтрокаЗаказПогрузка.Стоянка            = ВыбранноеЗначение.Заказ.СтоянкаПунктОтправления;
			СтрокаЗаказПогрузка.СтоянкаИзПункта        = уатЗащищенныеФункцииСервер_уэ.ПолучитьВремяСтоянкиВПункте(ВыбранноеЗначение.Заказ.АдресОтправления, ТипТС);
			СтрокаЗаказПогрузка.Рекламации             = ПолучитьРекламацииДляСтрокиЗаказов(ВыбранноеЗначение.Заказ);
			
			СтрокаЗаказРазгрузка.ПунктЗаказНоменклатура = ВыбранноеЗначение.Заказ;
			СтрокаНомРазгрузка.ЗаказГрузоотправителя    = ВыбранноеЗначение.Заказ;
			СтрокаНомРазгрузка.Количество               = ВыбранноеЗначение.Количество;
			СтрокаНомРазгрузка.ПунктЗаказНоменклатура   = ВыбранноеЗначение.Номенклатура;
			СтрокаНомРазгрузка.ЕдиницаИзмерения         = ВыбранноеЗначение.ЕдиницаИзмерения;
			СтрокаНомРазгрузка.ЕдиницаИзмеренияПоЗаказу = ВыбранноеЗначение.ЕдиницаИзмерения;
			СтрокаНомРазгрузка.ВесБрутто                = ВыбранноеЗначение.Вес;
			СтрокаНомРазгрузка.Объем                    = ВыбранноеЗначение.Объем;
			СтрокаНомРазгрузка.КоличествоМест           = ВыбранноеЗначение.КоличествоМест;
			СтрокаЗаказРазгрузка.ОкноС                  = ВыбранноеЗначение.Заказ.ДоставкаС;
			СтрокаЗаказРазгрузка.ОкноПо                 = ВыбранноеЗначение.Заказ.ДоставкаПо;
			СтрокаЗаказРазгрузка.Стоянка                = ВыбранноеЗначение.Заказ.СтоянкаПунктНазначения;
			СтрокаЗаказРазгрузка.СтоянкаИзПункта        = уатЗащищенныеФункцииСервер_уэ.ПолучитьВремяСтоянкиВПункте(ВыбранноеЗначение.Заказ.АдресНазначения, ТипТС);
			СтрокаЗаказРазгрузка.Рекламации             = ПолучитьРекламацииДляСтрокиЗаказов(ВыбранноеЗначение.Заказ);
		КонецЕсли;
	КонецЕсли;
	
	Если ВыбранноеЗначение.Заказ.FTL Тогда 
		Для Сч = 0 По ВыбранноеЗначение.Заказ.ПромежуточныеПункты.Количество()-1 Цикл 
			СтрокаЗаказПП = мсвСтрокиПП[Сч];
			Если Не СтрокаЗаказПП.СтоянкаИзПункта = 0 Тогда 
				СтрокаЗаказПП.ПолучитьРодителя().СтоянкаИзПункта = СтрокаЗаказПП.СтоянкаИзПункта;
				СтрокаЗаказПП.ПолучитьРодителя().Стоянка         = СтрокаЗаказПП.Стоянка;
			КонецЕсли;
		КонецЦикла;
		
	Иначе 
		Если Не СтрокаЗаказПогрузка.СтоянкаИзПункта = 0 Тогда 
			СтрокаЗаказПогрузка.ПолучитьРодителя().СтоянкаИзПункта = СтрокаЗаказПогрузка.СтоянкаИзПункта;
			СтрокаЗаказПогрузка.ПолучитьРодителя().Стоянка         = СтрокаЗаказПогрузка.Стоянка;
		КонецЕсли;
		
		Если Не СтрокаЗаказРазгрузка.СтоянкаИзПункта = 0 Тогда 
			СтрокаЗаказРазгрузка.ПолучитьРодителя().СтоянкаИзПункта = СтрокаЗаказРазгрузка.СтоянкаИзПункта;
			СтрокаЗаказРазгрузка.ПолучитьРодителя().Стоянка         = СтрокаЗаказРазгрузка.Стоянка;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗаказыДерево.ПолучитьЭлементы().Количество() Тогда 
		СтоянкаПервогоПункта = 0;
		
		Для Каждого ТекСтрокаЗаказ Из ЗаказыДерево.ПолучитьЭлементы()[0].ПолучитьЭлементы() Цикл 
			СтоянкаПервогоПункта = уатЗащищенныеФункцииСервер.СложитьВремя(СтоянкаПервогоПункта, ТекСтрокаЗаказ.Стоянка);
		КонецЦикла;
		
		СтоянкаПервогоПункта = уатЗащищенныеФункцииСервер.СложитьВремя(СтоянкаПервогоПункта, ЗаказыДерево.ПолучитьЭлементы()[0].СтоянкаИзПункта);
		Объект.ДатаИВремяОтправленияПлан = уатЗащищенныеФункцииСервер.СложитьВремя(ЗаказыДерево.ПолучитьЭлементы()[0].ПрибытиеПлан, СтоянкаПервогоПункта);
	Иначе 
		Объект.ДатаИВремяОтправленияПлан = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьВозможностьПеретаскиванияВДеревеЗаказов(СтрокаНоменклатуры, СтрокаПриемник, СтрокаПунктИсточник = Неопределено, СтрокаПунктПриемник=Неопределено)
	
	Если СтрокаПунктИсточник = Неопределено Тогда
		СтрокаПунктИсточник = СтрокаНоменклатуры.ПолучитьРодителя().ПолучитьРодителя();
	КонецЕсли;
	Если СтрокаПунктПриемник = Неопределено Тогда
		СтрокаПунктПриемник = СтрокаПриемник;
		Пока Не СтрокаПунктПриемник.ПолучитьРодителя() = Неопределено Цикл
			СтрокаПунктПриемник = СтрокаПунктПриемник.ПолучитьРодителя();
		КонецЦикла;
	КонецЕсли;
	
	СтруктураПоиска = Новый Структура();
	СтруктураПоиска.Вставить("ЗаказГрузоотправителя",    СтрокаНоменклатуры.ЗаказГрузоотправителя);
	СтруктураПоиска.Вставить("ПунктЗаказНоменклатура",   СтрокаНоменклатуры.ПунктЗаказНоменклатура);
	СтруктураПоиска.Вставить("ЕдиницаИзмерения",         СтрокаНоменклатуры.ЕдиницаИзмерения);
	СтруктураПоиска.Вставить("ЕдиницаИзмеренияПоЗаказу", СтрокаНоменклатуры.ЕдиницаИзмеренияПоЗаказу);
	СтруктураПоиска.Вставить("Количество",               СтрокаНоменклатуры.Количество);
	
	НайденныеСтроки = НайтиСтрокиВДереве(ЗаказыДерево.ПолучитьЭлементы(), СтруктураПоиска, Истина);
	
	Для Каждого текНайдСтрока Из НайденныеСтроки Цикл
		Если Не ТекНайдСтрока = СтрокаНоменклатуры 
			И Не ТекНайдСтрока.ПолучитьРодителя().ТипТочкиМаршрута = СтрокаНоменклатуры.ПолучитьРодителя().ТипТочкиМаршрута Тогда
				СмежнаяСтрокаНоменклатуры = ТекНайдСтрока;
		КонецЕсли;
	Конеццикла;
	
	Если Не СмежнаяСтрокаНоменклатуры = Неопределено Тогда
		СтрокаПунктСмежный = СмежнаяСтрокаНоменклатуры;
		Пока Не СтрокаПунктСмежный.ПолучитьРодителя() = Неопределено Цикл
			СтрокаПунктСмежный = СтрокаПунктСмежный.ПолучитьРодителя();
		КонецЦикла;
	Иначе
		СтрокаПунктСмежный = СтрокаНоменклатуры;
	КонецЕсли;
	
	ИндексИсточник = ЗаказыДерево.ПолучитьЭлементы().Индекс(СтрокаПунктИсточник);
	ИндексПриемник = ЗаказыДерево.ПолучитьЭлементы().Индекс(СтрокаПунктПриемник);
	ИндексСмежный  = ЗаказыДерево.ПолучитьЭлементы().Индекс(СтрокаПунктСмежный);
	
	Если ИндексИсточник = ИндексПриемник Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СтрокаНоменклатуры.ПолучитьРодителя().ТипТочкиМаршрута = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Погрузка")
		ИЛИ СтрокаНоменклатуры.ПолучитьРодителя().ТипТочкиМаршрута = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.ДополнительнаяПогрузка") Тогда
		//       перетягиваем вниз                погрузка не окажется ниже разгрузки
		Если ИндексИсточник < ИндексПриемник И ИндексСмежный <= ИндексПриемник Тогда
			ПеретягиваниеВозможно = Ложь;
		Иначе
			ПеретягиваниеВозможно = Истина;
		КонецЕсли;
		
	Иначе
		//      перетягиваем вверх                   разгрузка не окажется выше погрузки
		Если ИндексИсточник > ИндексПриемник И ИндексСмежный >= ИндексПриемник Тогда
			ПеретягиваниеВозможно = Ложь;
		Иначе
			ПеретягиваниеВозможно = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПеретягиваниеВозможно;
	
КонецФункции // ПроверитьВозможностьПеретаскиванияВДеревеЗаказов()

// Функция выполняет получение строки пункта в дереве заказов по переданным строки источнику и строке приемнику.
// если подходящий строки не найдено, то возвращается неопределено
//
// Параметры:
//  ДеревоЗаказов       -
//  СтрокаПунктИсточник - 
//  СтрокаПунктПриемник -
//
// Возвращаемое значение:
//  строкаПункт  - подходящая строка пункт или неопределено если такой строки не найдено
//
&НаКлиенте
Функция ПолучитьСтрокуПунктПриПеретаскиванииВДеревеЗаказов(СтрокаПунктИсточник, СтрокаПунктПриемник) 
	
	ИндексИсточник = ЗаказыДерево.ПолучитьЭлементы().Индекс(СтрокаПунктИсточник);
	ИндексПриемник = ЗаказыДерево.ПолучитьЭлементы().Индекс(СтрокаПунктПриемник);
	
	Если (СтрокаПунктИсточник.ПолучитьЭлементы().Количество()
			И СтрокаПунктПриемник.ПолучитьЭлементы().Количество()) 
			Или (СтрокаПунктИсточник.ПолучитьЭлементы().Количество() = 0
			И СтрокаПунктПриемник.ПолучитьЭлементы().Количество() = 0 ) Тогда
		Если СтрокаПунктИсточник.ПунктЗаказНоменклатура = СтрокаПунктПриемник.ПунктЗаказНоменклатура Тогда
			Возврат СтрокаПунктПриемник;
		КонецЕсли;
	КонецЕсли;
	
	Если ИндексИсточник < ИндексПриемник Тогда
		ИндексСлед = ИндексПриемник + 1;
		
		Если ИндексСлед > ЗаказыДерево.ПолучитьЭлементы().Количество() - 1 Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Если (ЗаказыДерево.ПолучитьЭлементы()[ИндексСлед].ПолучитьЭлементы().Количество()
				И СтрокаПунктИсточник.ПолучитьЭлементы().Количество()) 
				Или (ЗаказыДерево.ПолучитьЭлементы()[ИндексСлед].ПолучитьЭлементы().Количество() = 0
				И СтрокаПунктИсточник.ПолучитьЭлементы().Количество() = 0) Тогда
			Если ЗаказыДерево.ПолучитьЭлементы()[ИндексСлед].ПунктЗаказНоменклатура = СтрокаПунктИсточник.ПунктЗаказНоменклатура Тогда
				Возврат ЗаказыДерево.ПолучитьЭлементы()[ИндексСлед];
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ИндексИсточник > ИндексПриемник Тогда
		ИндексПред = ИндексПриемник -1;
		
		Если ИндексПред < 0 Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Если (ЗаказыДерево.ПолучитьЭлементы()[ИндексПред].ПолучитьЭлементы().Количество()
				И СтрокаПунктИсточник.ПолучитьЭлементы().Количество()) 
				Или (ЗаказыДерево.ПолучитьЭлементы()[ИндексПред].ПолучитьЭлементы().Количество() = 0
				И СтрокаПунктИсточник.ПолучитьЭлементы().Количество() = 0) Тогда
			Если ЗаказыДерево.ПолучитьЭлементы()[ИндексПред].ПунктЗаказНоменклатура = СтрокаПунктИсточник.ПунктЗаказНоменклатура Тогда
				Возврат ЗаказыДерево.ПолучитьЭлементы()[ИндексПред];
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Неопределено;
	
КонецФункции

&НаКлиенте
Процедура ЗаказыДеревоВыполнитьПеретаскивание(ИдентификаторИсточник, ИдентификаторПриемник)
	
	мЗначение = ЗаказыДерево.НайтиПоИдентификатору(ИдентификаторИсточник);
	СтрокаПриемникВДереве = ЗаказыДерево.НайтиПоИдентификатору(ИдентификаторПриемник);
	
	СтрокаПунктПриемник = СтрокаПриемникВДереве;
	Пока Не СтрокаПунктПриемник.ПолучитьРодителя() = Неопределено Цикл
		СтрокаПунктПриемник = СтрокаПунктПриемник.ПолучитьРодителя();
	КонецЦикла;
	СтрокаПунктИсточник = мЗначение;
	Пока Не СтрокаПунктИсточник.ПолучитьРодителя() = Неопределено Цикл
		СтрокаПунктИсточник = СтрокаПунктИсточник.ПолучитьРодителя();
	КонецЦикла;
	ИндексСтрокаПунктИсточник = ЗаказыДерево.ПолучитьЭлементы().Индекс(СтрокаПунктИсточник); 
	ИндексСтрокаПунктПриемник = ЗаказыДерево.ПолучитьЭлементы().Индекс(СтрокаПунктПриемник);
	
	Если (ТипЗнч(мЗначение.ПунктЗаказНоменклатура) = Тип("СправочникСсылка.уатПунктыНазначения")
			Или ТипЗнч(мЗначение.ПунктЗаказНоменклатура) = Тип("Строка")) 
			Или (ТипЗнч(мЗначение.ПунктЗаказНоменклатура) = Тип("ДокументСсылка.уатЗаказГрузоотправителя")
			И мЗначение.ПолучитьРодителя().ПолучитьЭлементы().Количество() = 1)
			Или (ТипЗнч(мЗначение.ПунктЗаказНоменклатура) = Тип("СправочникСсылка.Номенклатура")
			И мЗначение.ПолучитьРодителя().ПолучитьЭлементы().Количество() = 1
			И мЗначение.ПолучитьРодителя().ПолучитьРодителя().ПолучитьЭлементы().Количество() = 1) Тогда 
		
		мСтр = ПолучитьСтрокуПунктПриПеретаскиванииВДеревеЗаказов(СтрокаПунктИсточник, СтрокаПунктПриемник);
		
		Если мСтр = Неопределено Или СтрокаПунктИсточник.ПолучитьЭлементы().Количество() = 0 Тогда
			Если ТипЗнч(мЗначение.ПунктЗаказНоменклатура) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") Тогда
				сдвигСтрока = мЗначение.ПолучитьРодителя();
				
			ИначеЕсли ТипЗнч(мЗначение.ПунктЗаказНоменклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
				сдвигСтрока = мЗначение.ПолучитьРодителя().ПолучитьРодителя();
				
			Иначе
				сдвигСтрока = мЗначение;
			КонецЕсли;
			
			Смещение = ЗаказыДерево.ПолучитьЭлементы().Индекс(СтрокаПунктПриемник) - ЗаказыДерево.ПолучитьЭлементы().Индекс(СтрокаПунктИсточник);
			ЗаказыДерево.ПолучитьЭлементы().Сдвинуть(ЗаказыДерево.ПолучитьЭлементы().Индекс(сдвигСтрока), Смещение);
			
		Иначе
			Для Каждого ТекЗаказ Из СтрокаПунктИсточник.ПолучитьЭлементы() Цикл
				СтруктураПоиска = Новый Структура("ПунктЗаказНоменклатура, ТипТочкиМаршрута");
				СтруктураПоиска.ПунктЗаказНоменклатура = ТекЗаказ.ПунктЗаказНоменклатура;
				СтруктураПоиска.ТипТочкиМаршрута       = ТекЗаказ.ТипТочкиМаршрута;
				
				НайдСтроки = НайтиСтрокиВДереве(мСтр.ПолучитьЭлементы(), СтруктураПоиска, Ложь);
				
				Если НайдСтроки.Количество() Тогда
					НовСтрокаЗаказ = НайдСтроки[0];
					
				Иначе
					НовСтрокаЗаказ = мСтр.ПолучитьЭлементы().Добавить();
					ЗаполнитьЗначенияСвойств(НовСтрокаЗаказ, ТекЗаказ);
				КонецЕсли;
				
				Для Каждого ТекСтрокаНоменклатура Из ТекЗаказ.ПолучитьЭлементы() Цикл
					НовСтрокаНоменклатура = НовСтрокаЗаказ.ПолучитьЭлементы().Добавить();
					ЗаполнитьЗначенияСвойств(НовСтрокаНоменклатура, ТекСтрокаНоменклатура);
				КонецЦикла;
			КонецЦикла;
			
			ЗаказыДерево.ПолучитьЭлементы().Удалить(СтрокаПунктИсточник);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(мЗначение.ПунктЗаказНоменклатура) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") Тогда
		НовСтрокаПункт = Неопределено;
		НовСтрокаЗаказ = Неопределено;
		
		мСтр = ПолучитьСтрокуПунктПриПеретаскиванииВДеревеЗаказов(СтрокаПунктИсточник, СтрокаПунктПриемник);
		Если мСтр = Неопределено Тогда
			НовСтрокаПункт = ЗаказыДерево.ПолучитьЭлементы().Вставить(ЗаказыДерево.ПолучитьЭлементы().Индекс(СтрокаПунктПриемник));
			ЗаполнитьЗначенияСвойств(НовСтрокаПункт, мЗначение.ПолучитьРодителя());
			
		Иначе
			НовСтрокаПункт = мСтр;
		КонецЕсли;
		
		Если ТипЗнч(СтрокаПриемникВДереве.ПунктЗаказНоменклатура) = Тип("СправочникСсылка.уатПунктыНазначения") 
				Или ТипЗнч(СтрокаПриемникВДереве.ПунктЗаказНоменклатура) = Тип("Строка") Тогда
			Если НовСтрокаПункт.ПолучитьЭлементы().Количество() 
					И НовСтрокаПункт.ПолучитьЭлементы()[НовСтрокаПункт.ПолучитьЭлементы().Количество() - 1].ПунктЗаказНоменклатура = мЗначение.ПунктЗаказНоменклатура 
					И НовСтрокаПункт.ПолучитьЭлементы()[НовСтрокаПункт.ПолучитьЭлементы().Количество() - 1].ТипТочкиМаршрута = мЗначение.ТипТочкиМаршрута Тогда
				НовСтрокаЗаказ = НовСтрокаПункт.ПолучитьЭлементы()[НовСтрокаПункт.ПолучитьЭлементы().Количество() - 1];
				
			Иначе
				НовСтрокаЗаказ = НовСтрокаПункт.ПолучитьЭлементы().Добавить();
				НовСтрокаЗаказ.ПунктЗаказНоменклатура = мЗначение.ПунктЗаказНоменклатура;
				НовСтрокаЗаказ.ТипТочкиМаршрута       = мЗначение.ТипТочкиМаршрута;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(СтрокаПриемникВДереве.ПунктЗаказНоменклатура) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") 
				Или ТипЗнч(СтрокаПриемникВДереве.ПунктЗаказНоменклатура) = Тип("СправочникСсылка.Номенклатура") Тогда 
			мСтрЗаказ = ?(ТипЗнч(СтрокаПриемникВДереве.ПунктЗаказНоменклатура) = Тип("ДокументСсылка.уатЗаказГрузоотправителя"), СтрокаПриемникВДереве, СтрокаПриемникВДереве.ПолучитьРодителя());
			
			Если мСтрЗаказ.ПунктЗаказНоменклатура = мЗначение.ПунктЗаказНоменклатура И мСтрЗаказ.ТипТочкиМаршрута = мЗначение.ТипТочкиМаршрута Тогда 
				НовСтрокаЗаказ = СтрокаПриемникВДереве;
				
			ИначеЕсли (Не мСтрЗаказ.ПолучитьРодителя().ПолучитьЭлементы().Индекс(мСтрЗаказ) = 0)
					И мСтрЗаказ.ПолучитьРодителя().ПолучитьЭлементы()[мСтрЗаказ.ПолучитьРодителя().ПолучитьЭлементы().Индекс(мСтрЗаказ)-1].ПунктЗаказНоменклатура = мЗначение.ПунктЗаказНоменклатура 
					И мСтрЗаказ.ПолучитьРодителя().ПолучитьЭлементы()[мСтрЗаказ.ПолучитьРодителя().ПолучитьЭлементы().Индекс(мСтрЗаказ)-1].ТипТочкиМаршрута = мЗначение.ТипТочкиМаршрута Тогда 
				НовСтрокаЗаказ = мСтрЗаказ.ПолучитьРодителя().ПолучитьЭлементы()[мСтрЗаказ.ПолучитьРодителя().ПолучитьЭлементы().Индекс(мСтрЗаказ)-1];
				
			Иначе
				НовСтрокаЗаказ = мСтрЗаказ.ПолучитьРодителя().ПолучитьЭлементы().Вставить(мСтрЗаказ.ПолучитьРодителя().ПолучитьЭлементы().Индекс(мСтрЗаказ));
				НовСтрокаЗаказ.ПунктЗаказНоменклатура = мЗначение.ПунктЗаказНоменклатура;
				НовСтрокаЗаказ.ТипТочкиМаршрута       = мЗначение.ТипТочкиМаршрута;
			КонецЕсли;
		КонецЕсли;
		
		Для Каждого мТекСтрока Из мЗначение.ПолучитьЭлементы() Цикл
			НовСтрокаНоменклатура = НовСтрокаЗаказ.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрокаНоменклатура, мТекСтрока);
		КонецЦикла;
		
		мРод = мЗначение.ПолучитьРодителя();
		мЗначение.ПолучитьРодителя().ПолучитьЭлементы().Удалить(мЗначение);
		Если мРод.ПолучитьЭлементы().Количество() = 0 Тогда
			ЗаказыДерево.ПолучитьЭлементы().Удалить(мРод);
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(мЗначение.ПунктЗаказНоменклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
		мСтр = ПолучитьСтрокуПунктПриПеретаскиванииВДеревеЗаказов(СтрокаПунктИсточник, СтрокаПунктПриемник);
		Если мСтр = Неопределено Тогда
			ИндексДляВставки = ЗаказыДерево.ПолучитьЭлементы().Индекс(СтрокаПунктПриемник);
			
			Если ЗаказыДерево.ПолучитьЭлементы().Индекс(СтрокаПунктПриемник) > ЗаказыДерево.ПолучитьЭлементы().Индекс(СтрокаПунктИсточник) Тогда
				ИндексДляВставки = ИндексДляВставки + 1;
			КонецЕсли;
			
			НовСтрокаПункт = ЗаказыДерево.ПолучитьЭлементы().Вставить(ИндексДляВставки);
			ЗаполнитьЗначенияСвойств(НовСтрокаПункт, мЗначение.ПолучитьРодителя().ПолучитьРодителя());
			
		Иначе
			НовСтрокаПункт = мСтр;
		КонецЕсли;
		
		Если ТипЗнч(СтрокаПриемникВДереве.ПунктЗаказНоменклатура) = Тип("СправочникСсылка.уатПунктыНазначения") 
				Или ТипЗнч(СтрокаПриемникВДереве.ПунктЗаказНоменклатура) = Тип("Строка") Тогда
			Если НовСтрокаПункт.ПолучитьЭлементы().Количество()
					И НовСтрокаПункт.ПолучитьЭлементы()[мСтр.ПолучитьЭлементы().Количество() - 1].ПунктЗаказНоменклатура = мЗначение.ПунктЗаказНоменклатура 
					И НовСтрокаПункт.ПолучитьЭлементы()[НовСтрокаПункт.ПолучитьЭлементы().Количество() - 1].ТипТочкиМаршрута = мЗначение.ТипТочкиМаршрута Тогда
				НовСтрокаЗаказ = НовСтрокаПункт.ПолучитьЭлементы()[НовСтрокаПункт.ПолучитьЭлементы().Количество() - 1];
				
			Иначе
				НовСтрокаЗаказ = НовСтрокаПункт.ПолучитьЭлементы().Добавить();
				НовСтрокаЗаказ.ПунктЗаказНоменклатура = мЗначение.ПолучитьРодителя().ПунктЗаказНоменклатура;
				НовСтрокаЗаказ.ТипТочкиМаршрута       = мЗначение.ПолучитьРодителя().ТипТочкиМаршрута;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(СтрокаПриемникВДереве.ПунктЗаказНоменклатура) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") 
				Или ТипЗнч(СтрокаПриемникВДереве.ПунктЗаказНоменклатура) = Тип("СправочникСсылка.Номенклатура") Тогда 
			мСтрЗаказ = ?(ТипЗнч(СтрокаПриемникВДереве.ПунктЗаказНоменклатура) = Тип("ДокументСсылка.уатЗаказГрузоотправителя"),СтрокаПриемникВДереве,СтрокаПриемникВДереве.ПолучитьРодителя());
			
			Если мСтрЗаказ.ПунктЗаказНоменклатура = мЗначение.ПунктЗаказНоменклатура И мСтрЗаказ.ТипТочкиМаршрута = мЗначение.ТипТочкиМаршрута Тогда 
				НовСтрокаЗаказ = СтрокаПриемникВДереве;
				
			ИначеЕсли (Не мСтрЗаказ.ПолучитьРодителя().ПолучитьЭлементы().Индекс(мСтрЗаказ) = 0)
					И мСтрЗаказ.ПолучитьРодителя().ПолучитьЭлементы()[мСтрЗаказ.ПолучитьРодителя().ПолучитьЭлементы().Индекс(мСтрЗаказ)-1].ПунктЗаказНоменклатура = мЗначение.ПунктЗаказНоменклатура 
					И мСтрЗаказ.ПолучитьРодителя().ПолучитьЭлементы()[мСтрЗаказ.ПолучитьРодителя().ПолучитьЭлементы().Индекс(мСтрЗаказ)-1].ТипТочкиМаршрута = мЗначение.ТипТочкиМаршрута тогда 
				НовСтрокаЗаказ = мСтрЗаказ.ПолучитьРодителя().ПолучитьЭлементы()[мСтрЗаказ.ПолучитьРодителя().ПолучитьЭлементы().Индекс(мСтрЗаказ)-1];
				
			Иначе
				НовСтрокаЗаказ = мСтрЗаказ.ПолучитьРодителя().ПолучитьЭлементы().Вставить(мСтрЗаказ.ПолучитьРодителя().ПолучитьЭлементы().Индекс(мСтрЗаказ));
				НовСтрокаЗаказ.ПунктЗаказНоменклатура = мЗначение.ПунктЗаказНоменклатура;
				НовСтрокаЗаказ.ТипТочкиМаршрута       = мЗначение.ТипТочкиМаршрута;
			КонецЕсли;
		КонецЕсли;
		
		НовСтрокаНоменклатура = НовСтрокаЗаказ.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрокаНоменклатура,мЗначение);
		
		мРодЗаказ = мЗначение.ПолучитьРодителя();
		мЗначение.ПолучитьРодителя().ПолучитьЭлементы().Удалить(мЗначение);
		Если мРодЗаказ.ПолучитьЭлементы().Количество() = 0 Тогда
			мРодПункт = мРодЗаказ.ПолучитьРодителя();
			мРодПункт.ПолучитьЭлементы().Удалить(мРодЗаказ);
			
			Если мРодПункт.ПолучитьЭлементы().Количество() = 0 Тогда
				ЗаказыДерево.ПолучитьЭлементы().Удалить(мРодПункт);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Для Каждого СтрокаДерева Из ЗаказыДерево.ПолучитьЭлементы() Цикл
		СтрокаДерева.Время      = 0;
		СтрокаДерева.Расстояние = 0;
		Если флПланФакт Тогда
			СтрокаДерева.ВремяФакт      = 0;
			СтрокаДерева.РасстояниеФакт = 0;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоЗаказовПоЗаказуНаТС(ВыбЗаказНаТС)
	
	ПустаяЕИ = Справочники.ЕдиницыИзмерения.ПустаяСсылка();
	Если (ЗначениеЗаполнено(Объект.ЭтапМаршрутизации) И Объект.ЭтапМаршрутизации.АлгоритмМаршрутизации = 3) Тогда
		ТипТС = Новый Массив;
	Иначе
		ТипТС = Объект.ТС.ТипТС;
	КонецЕсли;

	СтрокаПунктаПогрузки  = Неопределено;
	СтрокаПунктаРазгрузки = Неопределено;
	
	Для Каждого ТекСтрокаПункта Из ЗаказыДерево.ПолучитьЭлементы() Цикл 
		Если ТекСтрокаПункта.ПунктЗаказНоменклатура = ВыбЗаказНаТС.АдресОтправления Тогда 
			СтрокаПунктаПогрузки = ТекСтрокаПункта;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ВыбЗаказНаТС.FTL Тогда 
		Если СтрокаПунктаПогрузки = Неопределено Тогда 
			флПунктПогрузкиПройден = Истина; // Перебираем все пункты подряд.
		Иначе 
			флПунктПогрузкиПройден = Ложь; // Перебираем пункты после погрузки.
		КонецЕсли;
		
		Для Каждого ТекСтрокаПункта Из ЗаказыДерево.ПолучитьЭлементы() Цикл 
			Если Не флПунктПогрузкиПройден И ТекСтрокаПункта = СтрокаПунктаПогрузки Тогда 
				флПунктПогрузкиПройден = Истина;
			КонецЕсли;
			
			Если флПунктПогрузкиПройден И ТекСтрокаПункта.ПунктЗаказНоменклатура = ВыбЗаказНаТС.АдресНазначения Тогда 
				СтрокаПунктаРазгрузки = ТекСтрокаПункта;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если СтрокаПунктаРазгрузки = Неопределено Тогда // Нет такого пункта в МЛ или режим группировки по заказам - добавлять в конец.
			Если ЗаказыДерево.ПолучитьЭлементы().Количество() 
				И ЗаказыДерево.ПолучитьЭлементы()[ЗаказыДерево.ПолучитьЭлементы().Количество()-1].ПунктЗаказНоменклатура = ВыбЗаказНаТС.АдресНазначения Тогда
				
				СтрокаПунктаРазгрузки = ЗаказыДерево.ПолучитьЭлементы()[ЗаказыДерево.ПолучитьЭлементы().Количество()-1];
			Иначе
				СтрокаПунктаРазгрузки = ЗаказыДерево.ПолучитьЭлементы().Добавить();
				СтрокаПунктаРазгрузки.ПунктЗаказНоменклатура = ВыбЗаказНаТС.АдресНазначения;
				СтрокаПунктаРазгрузки.ПрибытиеПлан           = ВыбЗаказНаТС.ДоставкаС;
				СтрокаПунктаРазгрузки.УбытиеПлан             = ВыбЗаказНаТС.ДоставкаПо;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если СтрокаПунктаПогрузки = Неопределено Тогда // Нет такого пункта в МЛ или режим группировки по заказам - добавлять в конец.
		Если ЗаказыДерево.ПолучитьЭлементы().Количество() 
			И ЗаказыДерево.ПолучитьЭлементы()[ЗаказыДерево.ПолучитьЭлементы().Количество()-1].ПунктЗаказНоменклатура = ВыбЗаказНаТС.АдресОтправления Тогда
			
			СтрокаПунктаПогрузки = ЗаказыДерево.ПолучитьЭлементы()[ЗаказыДерево.ПолучитьЭлементы().Количество()-1];
			
		ИначеЕсли ВыбЗаказНаТС.FTL Тогда 
			СтрокаПунктаПогрузки = ЗаказыДерево.ПолучитьЭлементы().Добавить();
			СтрокаПунктаПогрузки.ПунктЗаказНоменклатура = ВыбЗаказНаТС.АдресОтправления;
			СтрокаПунктаПогрузки.СтоянкаИзПункта = уатЗащищенныеФункцииСервер_уэ.ПолучитьВремяСтоянкиВПункте(ВыбЗаказНаТС.АдресОтправления, ТипТС);
			Если ВыбЗаказНаТС.ПромежуточныеПункты.Количество() > 0 Тогда
				СтрокаПунктаПогрузки.ПрибытиеПлан = ВыбЗаказНаТС.ПромежуточныеПункты[0].ПрибытиеПлан;
				СтрокаПунктаПогрузки.УбытиеПлан = ВыбЗаказНаТС.ПромежуточныеПункты[0].УбытиеПлан;
			Иначе
				СтрокаПунктаПогрузки.ПрибытиеПлан = ВыбЗаказНаТС.ОтправлениеС;
				СтрокаПунктаПогрузки.УбытиеПлан = ВыбЗаказНаТС.ОтправлениеПо;
			КонецЕсли;
		Иначе 
			СтрокаПунктаПогрузки = ЗаказыДерево.ПолучитьЭлементы().Вставить(ЗаказыДерево.ПолучитьЭлементы().Индекс(СтрокаПунктаРазгрузки));
			СтрокаПунктаПогрузки.ПунктЗаказНоменклатура = ВыбЗаказНаТС.АдресОтправления;
			СтрокаПунктаПогрузки.ПрибытиеПлан = ВыбЗаказНаТС.ОтправлениеС;
			СтрокаПунктаПогрузки.УбытиеПлан = ВыбЗаказНаТС.ОтправлениеПо;
		КонецЕсли;
	КонецЕсли;
	
	Если ВыбЗаказНаТС.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам Тогда
		Если ВыбЗаказНаТС.FTL Тогда 
			НовСтрокаПункт = СтрокаПунктаПогрузки;
			Для Сч = 0 По ВыбЗаказНаТС.ПромежуточныеПункты.Количество()-1 Цикл 
				Если Не НовСтрокаПункт.ПунктЗаказНоменклатура = ВыбЗаказНаТС.ПромежуточныеПункты[Сч].Пункт Тогда
					НовСтрокаПункт = ЗаказыДерево.ПолучитьЭлементы().Добавить();
					НовСтрокаПункт.ПунктЗаказНоменклатура = ВыбЗаказНаТС.ПромежуточныеПункты[Сч].Пункт;
					НовСтрокаПункт.СтоянкаИзПункта        = уатЗащищенныеФункцииСервер_уэ.ПолучитьВремяСтоянкиВПункте(ВыбЗаказНаТС.ПромежуточныеПункты[Сч].Пункт, ТипТС);
				КонецЕсли;
				
				СтруктураПоиска = Новый Структура();
				СтруктураПоиска.Вставить("ПунктЗаказНоменклатура", ВыбЗаказНаТС);
				СтруктураПоиска.Вставить("ТипТочкиМаршрута",       ВыбЗаказНаТС.ПромежуточныеПункты[Сч].ТипТочкиМаршрута);
				
				НайдСтроки = НайтиСтрокиВДереве(НовСтрокаПункт.ПолучитьЭлементы(), СтруктураПоиска, Ложь);
				
				Если НайдСтроки.Количество() = 0 Тогда
					НовСтрокаЗаказ = НовСтрокаПункт.ПолучитьЭлементы().Добавить();
					НовСтрокаЗаказ.ПунктЗаказНоменклатура = ВыбЗаказНаТС;
					НовСтрокаЗаказ.ТипТочкиМаршрута       = ВыбЗаказНаТС.ПромежуточныеПункты[Сч].ТипТочкиМаршрута;
					НовСтрокаЗаказ.СтоянкаИзПункта        = уатЗащищенныеФункцииСервер_уэ.ПолучитьВремяСтоянкиВПункте(ВыбЗаказНаТС.ПромежуточныеПункты[Сч].Пункт, ТипТС);
					НовСтрокаЗаказ.ОкноС                  = ВыбЗаказНаТС.ПромежуточныеПункты[Сч].ОкноС;
					НовСтрокаЗаказ.ОкноПо                 = ВыбЗаказНаТС.ПромежуточныеПункты[Сч].ОкноПо;
					НовСтрокаЗаказ.Рекламации             = ПолучитьРекламацииДляСтрокиЗаказов(ВыбЗаказНаТС);
					НовСтрокаЗаказ.Стоянка                = ВыбЗаказНаТС.ПромежуточныеПункты[Сч].Стоянка;
					Если ВыбЗаказНаТС.ПромежуточныеПункты[Сч].Ожидание > 0 И НовСтрокаПункт.Ожидание = 0 Тогда 
						НовСтрокаПункт.Ожидание = ВыбЗаказНаТС.ПромежуточныеПункты[Сч].Ожидание;
					КонецЕсли;
				Иначе
					НовСтрокаЗаказ = НайдСтроки[0];
				КонецЕсли;
				
				НовСтрокаЗаказ.Количество               = 1;
				НовСтрокаЗаказ.ЕдиницаИзмерения         = ПустаяЕИ;
				НовСтрокаЗаказ.ЕдиницаИзмеренияПоЗаказу = ПустаяЕИ;
				НовСтрокаЗаказ.ВесБрутто                = ВыбЗаказНаТС.ВесБрутто;
				НовСтрокаЗаказ.Объем                    = ВыбЗаказНаТС.Объем;
				НовСтрокаЗаказ.КоличествоМест           = ВыбЗаказНаТС.КоличествоМест;
			КонецЦикла;
			
		Иначе 
			СтрокаПунктаПогрузки.СтоянкаИзПункта = уатЗащищенныеФункцииСервер_уэ.ПолучитьВремяСтоянкиВПункте(ВыбЗаказНаТС.АдресОтправления, ТипТС);
			
			СтруктураПоиска = Новый Структура();
			СтруктураПоиска.Вставить("ПунктЗаказНоменклатура", ВыбЗаказНаТС);
			СтруктураПоиска.Вставить("ТипТочкиМаршрута",       Перечисления.уатТипыТочекМаршрута.Погрузка);
			
			НайдСтроки = НайтиСтрокиВДереве(СтрокаПунктаПогрузки.ПолучитьЭлементы(), СтруктураПоиска, Ложь);
			
			Если НайдСтроки.Количество() = 0 Тогда
				НовСтрокаЗаказ = СтрокаПунктаПогрузки.ПолучитьЭлементы().Добавить();
				НовСтрокаЗаказ.ПунктЗаказНоменклатура = ВыбЗаказНаТС;
				НовСтрокаЗаказ.ТипТочкиМаршрута       = Перечисления.уатТипыТочекМаршрута.Погрузка;
				НовСТрокаЗаказ.Стоянка                = ВыбЗаказНаТС.СтоянкаПунктОтправления;
				НовСТрокаЗаказ.СтоянкаИзПункта        = уатЗащищенныеФункцииСервер_уэ.ПолучитьВремяСтоянкиВПункте(ВыбЗаказНаТС.АдресОтправления, ТипТС);
				НовСтрокаЗаказ.ОкноС                  = ВыбЗаказНаТС.ОтправлениеС;
				НовСтрокаЗаказ.ОкноПо                 = ВыбЗаказНаТС.ОтправлениеПо;
				НовСтрокаЗаказ.Рекламации             = ПолучитьРекламацииДляСтрокиЗаказов(ВыбЗаказНаТС);
			Иначе
				НовСтрокаЗаказ = НайдСтроки[0];
			КонецЕсли;
			
			НовСтрокаЗаказ.Количество               = 1;
			НовСтрокаЗаказ.ЕдиницаИзмерения         = ПустаяЕИ;
			НовСтрокаЗаказ.ЕдиницаИзмеренияПоЗаказу = ПустаяЕИ;
			НовСтрокаЗаказ.ВесБрутто                = ВыбЗаказНаТС.ВесБрутто;
			НовСтрокаЗаказ.Объем                    = ВыбЗаказНаТС.Объем;
			НовСтрокаЗаказ.КоличествоМест           = ВыбЗаказНаТС.КоличествоМест;
			
			СтрокаПунктаРазгрузки.СтоянкаИзПункта = уатЗащищенныеФункцииСервер_уэ.ПолучитьВремяСтоянкиВПункте(ВыбЗаказНаТС.АдресНазначения, ТипТС);
			
			СтруктураПоиска = Новый Структура();
			СтруктураПоиска.Вставить("ПунктЗаказНоменклатура", ВыбЗаказНаТС);
			СтруктураПоиска.Вставить("ТипТочкиМаршрута",       Перечисления.уатТипыТочекМаршрута.Разгрузка);
			
			НайдСтроки = НайтиСтрокиВДереве(СтрокаПунктаРазгрузки.ПолучитьЭлементы(), СтруктураПоиска, Ложь);
			
			Если НайдСтроки.Количество() = 0 Тогда
				НовСтрокаЗаказ = СтрокаПунктаРазгрузки.ПолучитьЭлементы().Добавить();
				НовСтрокаЗаказ.ПунктЗаказНоменклатура = ВыбЗаказНаТС;
				НовСтрокаЗаказ.ТипТочкиМаршрута       = Перечисления.уатТипыТочекМаршрута.Разгрузка;
				НовСТрокаЗаказ.Стоянка                = ВыбЗаказНаТС.СтоянкаПунктНазначения;
				НовСТрокаЗаказ.СтоянкаИзПункта        = уатЗащищенныеФункцииСервер_уэ.ПолучитьВремяСтоянкиВПункте(ВыбЗаказНаТС.АдресНазначения, ТипТС);
				НовСтрокаЗаказ.ОкноС                  = ВыбЗаказНаТС.ДоставкаС;
				НовСтрокаЗаказ.ОкноПо                 = ВыбЗаказНаТС.ДоставкаПо;
				НовСтрокаЗаказ.Рекламации             = ПолучитьРекламацииДляСтрокиЗаказов(ВыбЗаказНаТС);
			Иначе
				НовСтрокаЗаказ = НайдСтроки[0];
			КонецЕсли;
			
			НовСтрокаЗаказ.Количество               = 1;
			НовСтрокаЗаказ.ЕдиницаИзмерения         = ПустаяЕИ;
			НовСтрокаЗаказ.ЕдиницаИзмеренияПоЗаказу = ПустаяЕИ;
			НовСтрокаЗаказ.ВесБрутто                = ВыбЗаказНаТС.ВесБрутто;
			НовСтрокаЗаказ.Объем                    = ВыбЗаказНаТС.Объем;
			НовСтрокаЗаказ.КоличествоМест           = ВыбЗаказНаТС.КоличествоМест;
		КонецЕсли;
		
	Иначе
		ПолучитьНоменклатуруПоЗаказуВДереве(ВыбЗаказНаТС);   
		
		Если ВыбЗаказНаТС.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам Тогда
			ДоступнаяНоменклатура = ПолучитьТаблицуДоступныхГрузовыхМестПоЗаказу(ВыбЗаказНаТС);
			КоличествоГрузов = ВыбЗаказНаТС.ГрузовойСостав.Количество();
		Иначе //По товару
			ДоступнаяНоменклатура = ПолучитьТаблицуДоступнойНоменклатурыПоЗаказу(ВыбЗаказНаТС);
			КоличествоГрузов = ВыбЗаказНаТС.Товары.Количество();
		КонецЕсли;
		
		Если Не ДоступнаяНоменклатура.Количество() Тогда
			Возврат;
		КонецЕсли;
		
		Если ВыбЗаказНаТС.FTL Тогда 
			НовСтрокаПункт = СтрокаПунктаПогрузки;
			
			КоличествоПунктов = ВыбЗаказНаТС.ПромежуточныеПункты.Количество();
			мсвОтрезкиПути = уатОбщегоНазначения_проф.ПолучитьНачальныеКонечныеПунктыГрузов(ВыбЗаказНаТС.ОтрезкиПути, КоличествоГрузов, КоличествоПунктов);
			
			Для Каждого ТекСтрока Из ДоступнаяНоменклатура Цикл
				ТекСтрока.НомерПунктаОт = мсвОтрезкиПути[ТекСтрока.НомерСтроки-1].От;
				ТекСтрока.НомерПунктаДо = мсвОтрезкиПути[ТекСтрока.НомерСтроки-1].До;
			КонецЦикла;
			
			Для Сч = 0 По ВыбЗаказНаТС.ПромежуточныеПункты.Количество()-1 Цикл
				
				флагПогрузка = Ложь;
				флагРазгрузка = Ложь;
				
				Если Не НовСтрокаПункт.ПунктЗаказНоменклатура = ВыбЗаказНаТС.ПромежуточныеПункты[Сч].Пункт Тогда
					НовСтрокаПункт = ЗаказыДерево.ПолучитьЭлементы().Добавить();
					НовСтрокаПункт.ПунктЗаказНоменклатура = ВыбЗаказНаТС.ПромежуточныеПункты[Сч].Пункт;
					НовСтрокаПункт.СтоянкаИзПункта = уатЗащищенныеФункцииСервер_уэ.ПолучитьВремяСтоянкиВПункте(ВыбЗаказНаТС.ПромежуточныеПункты[Сч].Пункт, ТипТС);
				КонецЕсли;
				
				СтруктураПоиска = Новый Структура();
				СтруктураПоиска.Вставить("ПунктЗаказНоменклатура", ВыбЗаказНаТС);
				СтруктураПоиска.Вставить("ТипТочкиМаршрута",       ВыбЗаказНаТС.ПромежуточныеПункты[Сч].ТипТочкиМаршрута);
				
				НайдСтроки = НайтиСтрокиВДереве(НовСтрокаПункт.ПолучитьЭлементы(), СтруктураПоиска, Ложь);
				
				Если НайдСтроки.Количество() = 0 Тогда
					НовСтрокаЗаказ = НовСтрокаПункт.ПолучитьЭлементы().Добавить();
					НовСтрокаЗаказ.ПунктЗаказНоменклатура = ВыбЗаказНаТС;
					НовСтрокаЗаказ.ТипТочкиМаршрута       = ВыбЗаказНаТС.ПромежуточныеПункты[Сч].ТипТочкиМаршрута;
					НовСтрокаЗаказ.СтоянкаИзПункта        = уатЗащищенныеФункцииСервер_уэ.ПолучитьВремяСтоянкиВПункте(ВыбЗаказНаТС.ПромежуточныеПункты[Сч].Пункт, ТипТС);
					НовСтрокаЗаказ.ОкноС                  = ВыбЗаказНаТС.ПромежуточныеПункты[Сч].ОкноС;
					НовСтрокаЗаказ.ОкноПо                 = ВыбЗаказНаТС.ПромежуточныеПункты[Сч].ОкноПо;
					НовСтрокаЗаказ.Рекламации             = ПолучитьРекламацииДляСтрокиЗаказов(ВыбЗаказНаТС);
					НовСтрокаЗаказ.Стоянка                = ВыбЗаказНаТС.ПромежуточныеПункты[Сч].Стоянка;
					Если ВыбЗаказНаТС.ПромежуточныеПункты[Сч].Ожидание > 0 И НовСтрокаПункт.Ожидание = 0 Тогда 
						НовСтрокаПункт.Ожидание = ВыбЗаказНаТС.ПромежуточныеПункты[Сч].Ожидание;
					КонецЕсли;
				Иначе
					НовСтрокаЗаказ = НайдСтроки[0];
				КонецЕсли;
				
				Для Каждого ТекСтрока Из ДоступнаяНоменклатура Цикл
					Если (ВыбЗаказНаТС.ПромежуточныеПункты[Сч].ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка
						Или ВыбЗаказНаТС.ПромежуточныеПункты[Сч].ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяПогрузка) Тогда 
						флагПогрузка = Истина;

					ИначеЕсли (ВыбЗаказНаТС.ПромежуточныеПункты[Сч].ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка
						Или ВыбЗаказНаТС.ПромежуточныеПункты[Сч].ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяРазгрузка) Тогда 
						флагРазгрузка = Истина;
					КонецЕсли;
					
					Если ТекСтрока.НомерПунктаОт < 0 Или ТекСтрока.НомерПунктаДо < 0 Тогда
						// Груз, которому не назначен отрезок пути
						Продолжить;
					КонецЕсли;
					
					Если Не ((флагПогрузка И ТекСтрока.НомерПунктаОт = Сч+1) Или (флагРазгрузка И ТекСтрока.НомерПунктаДо = Сч+1)) Тогда
						Продолжить;
					КонецЕсли;
					
					НовСтрокаЗаказы = НовСтрокаЗаказ.ПолучитьЭлементы().Добавить();
					НовСтрокаЗаказы.ПунктЗаказНоменклатура   = ТекСтрока.Номенклатура;
					НовСтрокаЗаказы.Количество               = ТекСтрока.Количество;
					НовСтрокаЗаказы.ЕдиницаИзмерения         = ТекСтрока.ЕдиницаИзмерения;
					НовСтрокаЗаказы.ЕдиницаИзмеренияПоЗаказу = ТекСтрока.ЕдиницаИзмерения;
					НовСтрокаЗаказы.ВесБрутто                = ТекСтрока.Вес;
					НовСтрокаЗаказы.Объем                    = ТекСтрока.Объем;
					НовСтрокаЗаказы.КоличествоМест           = ТекСтрока.КоличествоМест;
				КонецЦикла;
			КонецЦикла;
			
		Иначе 
			СтрокаПунктаПогрузки.СтоянкаИзПункта = уатЗащищенныеФункцииСервер_уэ.ПолучитьВремяСтоянкиВПункте(ВыбЗаказНаТС.АдресОтправления, ТипТС);
			
			СтруктураПоиска = Новый Структура();
			СтруктураПоиска.Вставить("ПунктЗаказНоменклатура", ВыбЗаказНаТС);
			СтруктураПоиска.Вставить("ТипТочкиМаршрута",       Перечисления.уатТипыТочекМаршрута.Погрузка);
			
			НайдСтроки = НайтиСтрокиВДереве(СтрокаПунктаПогрузки.ПолучитьЭлементы(), СтруктураПоиска, Ложь);
			
			Если НайдСтроки.Количество() = 0 Тогда
				НовСтрокаЗаказ = СтрокаПунктаПогрузки.ПолучитьЭлементы().Добавить();
				НовСтрокаЗаказ.ПунктЗаказНоменклатура = ВыбЗаказНаТС;
				НовСтрокаЗаказ.ТипТочкиМаршрута       = Перечисления.уатТипыТочекМаршрута.Погрузка;
				НовСТрокаЗаказ.Стоянка                = ВыбЗаказНаТС.СтоянкаПунктОтправления;
				НовСТрокаЗаказ.СтоянкаИзПункта        = уатЗащищенныеФункцииСервер_уэ.ПолучитьВремяСтоянкиВПункте(ВыбЗаказНаТС.АдресОтправления, ТипТС);
				НовСтрокаЗаказ.ОкноС                  = ВыбЗаказНаТС.ОтправлениеС;
				НовСтрокаЗаказ.ОкноПо                 = ВыбЗаказНаТС.ОтправлениеПо;
				НовСтрокаЗаказ.Рекламации             = ПолучитьРекламацииДляСтрокиЗаказов(ВыбЗаказНаТС);
			Иначе
				НовСтрокаЗаказ = НайдСтроки[0];
			КонецЕсли;
			
			Для Каждого ТекСтрока Из ДоступнаяНоменклатура Цикл
				НовСтрокаЗаказы = НовСтрокаЗаказ.ПолучитьЭлементы().Добавить();
				НовСтрокаЗаказы.ПунктЗаказНоменклатура   = ТекСтрока.Номенклатура;
				НовСтрокаЗаказы.Количество               = ТекСтрока.Количество;
				НовСтрокаЗаказы.ЕдиницаИзмерения         = ТекСтрока.ЕдиницаИзмерения;
				НовСтрокаЗаказы.ЕдиницаИзмеренияПоЗаказу = ТекСтрока.ЕдиницаИзмерения;
				НовСтрокаЗаказы.ВесБрутто                = ТекСтрока.Вес;
				НовСтрокаЗаказы.Объем                    = ТекСтрока.Объем;
				НовСтрокаЗаказы.КоличествоМест           = ТекСтрока.КоличествоМест;
			КонецЦикла;
			
			СтрокаПунктаРазгрузки.СтоянкаИзПункта = уатЗащищенныеФункцииСервер_уэ.ПолучитьВремяСтоянкиВПункте(ВыбЗаказНаТС.АдресНазначения, ТипТС);
			
			СтруктураПоиска = Новый Структура();
			СтруктураПоиска.Вставить("ПунктЗаказНоменклатура", ВыбЗаказНаТС);
			СтруктураПоиска.Вставить("ТипТочкиМаршрута",       Перечисления.уатТипыТочекМаршрута.Разгрузка);
			
			НайдСтроки = НайтиСтрокиВДереве(СтрокаПунктаРазгрузки.ПолучитьЭлементы(), СтруктураПоиска, Ложь);
			
			Если НайдСтроки.Количество() = 0 Тогда
				НовСтрокаЗаказ = СтрокаПунктаРазгрузки.ПолучитьЭлементы().Добавить();
				НовСтрокаЗаказ.ПунктЗаказНоменклатура = ВыбЗаказНаТС;
				НовСтрокаЗаказ.ТипТочкиМаршрута       = Перечисления.уатТипыТочекМаршрута.Разгрузка;
				НовСтрокаЗаказ.Стоянка                = ВыбЗаказНаТС.СтоянкаПунктНазначения;
				НовСтрокаЗаказ.СтоянкаИзПункта        = уатЗащищенныеФункцииСервер_уэ.ПолучитьВремяСтоянкиВПункте(ВыбЗаказНаТС.АдресНазначения, ТипТС);
				НовСтрокаЗаказ.ОкноС                  = ВыбЗаказНаТС.ДоставкаС;
				НовСтрокаЗаказ.ОкноПо                 = ВыбЗаказНаТС.ДоставкаПо;
				НовСтрокаЗаказ.Рекламации             = ПолучитьРекламацииДляСтрокиЗаказов(ВыбЗаказНаТС);
			Иначе
				НовСтрокаЗаказ = НайдСтроки[0];
			КонецЕсли;
			
			Для Каждого ТекСтрока Из ДоступнаяНоменклатура Цикл
				НовСтрокаЗаказы = НовСтрокаЗаказ.ПолучитьЭлементы().Добавить();
				НовСтрокаЗаказы.ПунктЗаказНоменклатура   = ТекСтрока.Номенклатура;
				НовСтрокаЗаказы.Количество               = ТекСтрока.Количество;
				НовСтрокаЗаказы.ЕдиницаИзмерения         = ТекСтрока.ЕдиницаИзмерения;
				НовСтрокаЗаказы.ЕдиницаИзмеренияПоЗаказу = ТекСтрока.ЕдиницаИзмерения;
				НовСтрокаЗаказы.ВесБрутто                = ТекСтрока.Вес;
				НовСтрокаЗаказы.Объем                    = ТекСтрока.Объем;
				НовСтрокаЗаказы.КоличествоМест           = ТекСтрока.КоличествоМест;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если ЗаказыДерево.ПолучитьЭлементы().Количество() Тогда 
		СтоянкаПервогоПункта = 0;
		
		Для Каждого ТекСтрокаЗаказ Из ЗаказыДерево.ПолучитьЭлементы()[0].ПолучитьЭлементы() Цикл 
			СтоянкаПервогоПункта = уатЗащищенныеФункцииСервер.СложитьВремя(СтоянкаПервогоПункта, ТекСтрокаЗаказ.Стоянка);
		КонецЦикла;
		
		СтоянкаПервогоПункта = уатЗащищенныеФункцииСервер.СложитьВремя(СтоянкаПервогоПункта, ЗаказыДерево.ПолучитьЭлементы()[0].СтоянкаИзПункта);
		Объект.ДатаИВремяОтправленияПлан = уатЗащищенныеФункцииСервер.СложитьВремя(ЗаказыДерево.ПолучитьЭлементы()[0].ПрибытиеПлан, СтоянкаПервогоПункта);
	Иначе 
		Объект.ДатаИВремяОтправленияПлан = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗаказыДеревоПоОстаткамНаСервере()
	
	Если Объект.Дата = Дата('00010101') Тогда 
		ПарамДата = КонецДня(ТекущаяДата());
	ИначеЕсли Час(Объект.Дата) = 0 И Минута(Объект.Дата) = 0 И Секунда(Объект.Дата) = 0 Тогда 
		ПарамДата = КонецДня(Объект.Дата);
	Иначе 
		ПарамДата = Объект.Дата;
	КонецЕсли;
	
	Если (ЗначениеЗаполнено(Объект.ЭтапМаршрутизации) И Объект.ЭтапМаршрутизации.АлгоритмМаршрутизации = 3) Тогда
		ТипТС = Новый Массив;
	Иначе
		ТипТС = Объект.ТС.ТипТС;
	КонецЕсли;

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Дата", ПарамДата);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатГрузыКПеревозке_уэОстатки.ЗаказГрузоотправителя КАК Заказ,
	|	ВЫБОР
	|		КОГДА уатГрузыКПеревозке_уэОстатки.ЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам)
	|			ТОГДА уатГрузыКПеревозке_уэОстатки.Номенклатура
	|		ИНАЧЕ ВЫБОР
	|				КОГДА уатГрузыКПеревозке_уэОстатки.ЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам)
	|					ТОГДА уатГрузыКПеревозке_уэОстатки.ГрузовоеМесто
	|				ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			КОНЕЦ
	|	КОНЕЦ КАК Номенклатура,
	|	уатГрузыКПеревозке_уэОстатки.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	уатГрузыКПеревозке_уэОстатки.ЕдиницаИзмерения КАК ЕдиницаИзмеренияПоЗаказу,
	|	уатГрузыКПеревозке_уэОстатки.ЗаказГрузоотправителя.АдресОтправления КАК АдресОтправления,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА уатГрузыКПеревозке_уэОстатки.ЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам)
	|				ТОГДА ВЫБОР
	|						КОГДА уатГрузыКПеревозке_уэОстатки.ЕдиницаИзмерения.Коэффициент = 0
	|							ТОГДА уатГрузыКПеревозке_уэОстатки.КоличествоОстаток * уатГрузыКПеревозке_уэОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|						ИНАЧЕ уатГрузыКПеревозке_уэОстатки.КоличествоОстаток / уатГрузыКПеревозке_уэОстатки.ЕдиницаИзмерения.Коэффициент * уатГрузыКПеревозке_уэОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|					КОНЕЦ
	|			ИНАЧЕ уатГрузыКПеревозке_уэОстатки.КоличествоОстаток
	|		КОНЕЦ, 0) КАК Количество,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА уатГрузыКПеревозке_уэОстатки.ЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам)
	|				ТОГДА ВЫБОР
	|						КОГДА уатГрузыКПеревозке_уэОстатки.ЕдиницаИзмерения.Коэффициент = 0
	|							ТОГДА уатЗаказГрузоотправителя.ВесБрутто * уатГрузыКПеревозке_уэОстатки.КоличествоОстаток / уатЗаказГрузоотправителя.Количество * уатГрузыКПеревозке_уэОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|						ИНАЧЕ уатЗаказГрузоотправителя.ВесБрутто * уатГрузыКПеревозке_уэОстатки.КоличествоОстаток / уатЗаказГрузоотправителя.Количество / уатГрузыКПеревозке_уэОстатки.ЕдиницаИзмерения.Коэффициент * уатГрузыКПеревозке_уэОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|					КОНЕЦ
	|			ИНАЧЕ уатЗаказГрузоотправителя.ВесБрутто * уатГрузыКПеревозке_уэОстатки.КоличествоОстаток / уатЗаказГрузоотправителя.Количество
	|		КОНЕЦ, 0) КАК Вес,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА уатГрузыКПеревозке_уэОстатки.ЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам)
	|				ТОГДА ВЫБОР
	|						КОГДА уатГрузыКПеревозке_уэОстатки.ЕдиницаИзмерения.Коэффициент = 0
	|							ТОГДА уатЗаказГрузоотправителя.Объем * уатГрузыКПеревозке_уэОстатки.КоличествоОстаток / уатЗаказГрузоотправителя.Количество * уатГрузыКПеревозке_уэОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|						ИНАЧЕ уатЗаказГрузоотправителя.Объем * уатГрузыКПеревозке_уэОстатки.КоличествоОстаток / уатЗаказГрузоотправителя.Количество / уатГрузыКПеревозке_уэОстатки.ЕдиницаИзмерения.Коэффициент * уатГрузыКПеревозке_уэОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|					КОНЕЦ
	|			ИНАЧЕ уатЗаказГрузоотправителя.Объем * уатГрузыКПеревозке_уэОстатки.КоличествоОстаток / уатЗаказГрузоотправителя.Количество
	|		КОНЕЦ, 0) КАК Объем,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА уатГрузыКПеревозке_уэОстатки.ЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам)
	|				ТОГДА ВЫБОР
	|						КОГДА уатГрузыКПеревозке_уэОстатки.ЕдиницаИзмерения.Коэффициент = 0
	|							ТОГДА уатЗаказГрузоотправителя.КоличествоМест * уатГрузыКПеревозке_уэОстатки.КоличествоОстаток / уатЗаказГрузоотправителя.Количество * уатГрузыКПеревозке_уэОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|						ИНАЧЕ уатЗаказГрузоотправителя.КоличествоМест * уатГрузыКПеревозке_уэОстатки.КоличествоОстаток / уатЗаказГрузоотправителя.Количество / уатГрузыКПеревозке_уэОстатки.ЕдиницаИзмерения.Коэффициент * уатГрузыКПеревозке_уэОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|					КОНЕЦ
	|			ИНАЧЕ уатЗаказГрузоотправителя.КоличествоМест * уатГрузыКПеревозке_уэОстатки.КоличествоОстаток / уатЗаказГрузоотправителя.Количество
	|		КОНЕЦ, 0) КАК КоличествоМест
	|ИЗ
	|	РегистрНакопления.уатГрузыКПеревозке_уэ.Остатки(
	|			&Дата,
	|			НЕ ЗаказГрузоотправителя.FTL
	|				И (НЕ ЗаказГрузоотправителя.Мультимодальный
	|					ИЛИ ЗаказГрузоотправителя.Мультимодальный
	|						И ЗаказГрузоотправителя.ЭтоЭтап)) КАК уатГрузыКПеревозке_уэОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			уатЗаказГрузоотправителяТовары.Ссылка КАК Ссылка,
	|			уатЗаказГрузоотправителяТовары.ГрузовоеМесто КАК ГрузовоеМесто,
	|			уатЗаказГрузоотправителяТовары.Номенклатура КАК Номенклатура,
	|			уатЗаказГрузоотправителяТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|			СУММА(уатЗаказГрузоотправителяТовары.Количество) КАК Количество,
	|			СУММА(уатЗаказГрузоотправителяТовары.ВесБрутто) КАК ВесБрутто,
	|			СУММА(уатЗаказГрузоотправителяТовары.Объем) КАК Объем,
	|			СУММА(уатЗаказГрузоотправителяТовары.КоличествоМест) КАК КоличествоМест,
	|			уатЗаказГрузоотправителяТовары.Ссылка.Контрагент КАК Контрагент
	|		ИЗ
	|			Документ.уатЗаказГрузоотправителя.Товары КАК уатЗаказГрузоотправителяТовары
	|		ГДЕ
	|			уатЗаказГрузоотправителяТовары.Ссылка.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			уатЗаказГрузоотправителяТовары.Ссылка,
	|			уатЗаказГрузоотправителяТовары.ГрузовоеМесто,
	|			уатЗаказГрузоотправителяТовары.Номенклатура,
	|			уатЗаказГрузоотправителяТовары.ЕдиницаИзмерения,
	|			уатЗаказГрузоотправителяТовары.Ссылка.Контрагент
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			уатЗаказГрузоотправителяГрузМеста.Ссылка,
	|			уатЗаказГрузоотправителяГрузМеста.ГрузовоеМесто,
	|			NULL,
	|			уатЗаказГрузоотправителяГрузМеста.ВидУпаковки,
	|			СУММА(уатЗаказГрузоотправителяГрузМеста.КоличествоМест),
	|			СУММА(уатЗаказГрузоотправителяГрузМеста.ВесБрутто),
	|			СУММА(уатЗаказГрузоотправителяГрузМеста.Объем),
	|			СУММА(ВЫБОР
	|					КОГДА ТИПЗНАЧЕНИЯ(уатЗаказГрузоотправителяГрузМеста.ВидУпаковки) = ТИП(Справочник.уатТипыКонтейнеров_уэ)
	|						ТОГДА уатЗаказГрузоотправителяГрузМеста.КоличествоМест
	|					ИНАЧЕ ВЫБОР
	|							КОГДА уатЗаказГрузоотправителяГрузМеста.ВидУпаковки.Коэффициент = 0
	|								ТОГДА 0
	|							ИНАЧЕ уатЗаказГрузоотправителяГрузМеста.КоличествоМест / уатЗаказГрузоотправителяГрузМеста.ВидУпаковки.Коэффициент
	|						КОНЕЦ
	|				КОНЕЦ),
	|			уатЗаказГрузоотправителяГрузМеста.Ссылка.Контрагент
	|		ИЗ
	|			Документ.уатЗаказГрузоотправителя.ГрузовойСостав КАК уатЗаказГрузоотправителяГрузМеста
	|		ГДЕ
	|			уатЗаказГрузоотправителяГрузМеста.Ссылка.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			уатЗаказГрузоотправителяГрузМеста.Ссылка,
	|			уатЗаказГрузоотправителяГрузМеста.ГрузовоеМесто,
	|			уатЗаказГрузоотправителяГрузМеста.ВидУпаковки,
	|			уатЗаказГрузоотправителяГрузМеста.Ссылка.Контрагент
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			уатЗаказГрузоотправителя.Ссылка,
	|			NULL,
	|			NULL,
	|			NULL,
	|			СУММА(1),
	|			СУММА(уатЗаказГрузоотправителя.ВесБрутто),
	|			СУММА(уатЗаказГрузоотправителя.Объем),
	|			СУММА(уатЗаказГрузоотправителя.КоличествоМест),
	|			уатЗаказГрузоотправителя.Контрагент
	|		ИЗ
	|			Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	|		ГДЕ
	|			уатЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			уатЗаказГрузоотправителя.Ссылка,
	|			уатЗаказГрузоотправителя.Контрагент) КАК уатЗаказГрузоотправителя
	|		ПО уатГрузыКПеревозке_уэОстатки.ЗаказГрузоотправителя = уатЗаказГрузоотправителя.Ссылка
	|			И (ВЫБОР
	|				КОГДА уатЗаказГрузоотправителя.Номенклатура ЕСТЬ NULL
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ уатГрузыКПеревозке_уэОстатки.Номенклатура = уатЗаказГрузоотправителя.Номенклатура
	|			КОНЕЦ)
	|			И уатГрузыКПеревозке_уэОстатки.ЕдиницаИзмерения = уатЗаказГрузоотправителя.ЕдиницаИзмерения
	|			И уатГрузыКПеревозке_уэОстатки.ГрузовоеМесто = уатЗаказГрузоотправителя.ГрузовоеМесто
	|			И уатГрузыКПеревозке_уэОстатки.Контрагент = уатЗаказГрузоотправителя.Контрагент
	|ГДЕ
	|	ЕСТЬNULL(ВЫБОР
	|				КОГДА уатГрузыКПеревозке_уэОстатки.ЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам)
	|					ТОГДА ВЫБОР
	|							КОГДА уатГрузыКПеревозке_уэОстатки.ЕдиницаИзмерения.Коэффициент = 0
	|								ТОГДА уатГрузыКПеревозке_уэОстатки.КоличествоОстаток * уатГрузыКПеревозке_уэОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|							ИНАЧЕ уатГрузыКПеревозке_уэОстатки.КоличествоОстаток / уатГрузыКПеревозке_уэОстатки.ЕдиницаИзмерения.Коэффициент * уатГрузыКПеревозке_уэОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|						КОНЕЦ
	|				ИНАЧЕ уатГрузыКПеревозке_уэОстатки.КоличествоОстаток
	|			КОНЕЦ, 0) > 0
	|ИТОГИ ПО
	|	АдресОтправления,
	|	Заказ";
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Пока Выборка.Следующий() Цикл 
		КолСтрокВДереве = ЗаказыДерево.ПолучитьЭлементы().Количество();
		Если КолСтрокВДереве > 0 И ЗаказыДерево.ПолучитьЭлементы()[КолСтрокВДереве - 1].ПолучитьЭлементы().Количество() 
				И ЗаказыДерево.ПолучитьЭлементы()[КолСтрокВДереве - 1].ПунктЗаказНоменклатура = Выборка.АдресОтправления Тогда
			НовСтрокаПункт = ЗаказыДерево.ПолучитьЭлементы()[КолСтрокВДереве - 1];
		Иначе
			НовСтрокаПункт = ЗаказыДерево.ПолучитьЭлементы().Добавить();
			НовСтрокаПункт.ПунктЗаказНоменклатура = Выборка.АдресОтправления;
			НовСтрокаПункт.СтоянкаИзПункта        = уатЗащищенныеФункцииСервер_уэ.ПолучитьВремяСтоянкиВПункте(Выборка.АдресОтправления, ТипТС);
		КонецЕсли;
		
		ВыборкаЗаказы = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаЗаказы.Следующий() Цикл
			СтруктураПоиска = Новый Структура();
			СтруктураПоиска.Вставить("ПунктЗаказНоменклатура", ВыборкаЗаказы.Заказ);
			СтруктураПоиска.Вставить("ТипТочкиМаршрута",       Перечисления.уатТипыТочекМаршрута.Погрузка);
			
			НайдСтроки = НайтиСтрокиВДереве(НовСтрокаПункт.ПолучитьЭлементы(), СтруктураПоиска, Ложь);
			
			Если НайдСтроки.Количество() = 0 Тогда
				НовСтрокаЗаказПогрузка = НовСтрокаПункт.ПолучитьЭлементы().Добавить();
				НовСтрокаЗаказПогрузка.ПунктЗаказНоменклатура = ВыборкаЗаказы.Заказ;
				НовСтрокаЗаказПогрузка.ТипТочкиМаршрута       = Перечисления.уатТипыТочекМаршрута.Погрузка;
				НовСтрокаЗаказПогрузка.Стоянка                = ВыборкаЗаказы.Заказ.СтоянкаПунктОтправления;
				НовСтрокаЗаказПогрузка.СтоянкаИзПункта        = уатЗащищенныеФункцииСервер_уэ.ПолучитьВремяСтоянкиВПункте(ВыборкаЗаказы.Заказ.АдресОтправления, ТипТС);
				НовСтрокаЗаказПогрузка.ОкноС                  = ВыборкаЗаказы.Заказ.ОтправлениеС;
				НовСтрокаЗаказПогрузка.ОкноПо                 = ВыборкаЗаказы.Заказ.ОтправлениеПо;
				НовСтрокаЗаказПогрузка.Рекламации             = ПолучитьРекламацииДляСтрокиЗаказов(ВыборкаЗаказы.Заказ);
			Иначе
				НовСтрокаЗаказПогрузка = НайдСтроки[0];
			КонецЕсли;
			
			ВыборкаНоменклатура = ВыборкаЗаказы.Выбрать();
			Пока ВыборкаНоменклатура.Следующий() Цикл
				Если ВыборкаЗаказы.Заказ.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам Тогда
					НовСтрокаЗаказПогрузка.ЕдиницаИзмерения         = ВыборкаНоменклатура.ЕдиницаИзмерения;
					НовСтрокаЗаказПогрузка.ЕдиницаИзмеренияПоЗаказу = ВыборкаНоменклатура.ЕдиницаИзмерения;
					НовСтрокаЗаказПогрузка.Количество               = ВыборкаНоменклатура.Количество;
					НовСтрокаЗаказПогрузка.ВесБрутто                = ВыборкаНоменклатура.Вес;
					НовСтрокаЗаказПогрузка.Объем                    = ВыборкаНоменклатура.Объем;
					НовСтрокаЗаказПогрузка.КоличествоМест           = ВыборкаНоменклатура.КоличествоМест;
					
				Иначе
					НовСтрока = НовСтрокаЗаказПогрузка.ПолучитьЭлементы().Добавить();
					НовСтрока.ПунктЗаказНоменклатура   = ВыборкаНоменклатура.Номенклатура;
					НовСтрока.ЕдиницаИзмерения         = ВыборкаНоменклатура.ЕдиницаИзмерения;
					НовСтрока.ЕдиницаИзмеренияПоЗаказу = ВыборкаНоменклатура.ЕдиницаИзмерения;
					НовСтрока.Количество               = ВыборкаНоменклатура.Количество;
					НовСтрока.ВесБрутто                = ВыборкаНоменклатура.Вес;
					НовСтрока.Объем                    = ВыборкаНоменклатура.Объем;
					НовСтрока.КоличествоМест           = ВыборкаНоменклатура.КоличествоМест;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатГрузыКПеревозке_уэОстатки.ЗаказГрузоотправителя КАК Заказ,
	|	ВЫБОР
	|		КОГДА уатГрузыКПеревозке_уэОстатки.ЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам)
	|			ТОГДА уатГрузыКПеревозке_уэОстатки.Номенклатура
	|		ИНАЧЕ ВЫБОР
	|				КОГДА уатГрузыКПеревозке_уэОстатки.ЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам)
	|					ТОГДА уатГрузыКПеревозке_уэОстатки.ГрузовоеМесто
	|				ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|			КОНЕЦ
	|	КОНЕЦ КАК Номенклатура,
	|	уатГрузыКПеревозке_уэОстатки.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	уатГрузыКПеревозке_уэОстатки.ЕдиницаИзмерения КАК ЕдиницаИзмеренияПоЗаказу,
	|	уатГрузыКПеревозке_уэОстатки.ЗаказГрузоотправителя.АдресНазначения КАК АдресНазначения,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА уатГрузыКПеревозке_уэОстатки.ЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам)
	|				ТОГДА ВЫБОР
	|						КОГДА уатГрузыКПеревозке_уэОстатки.ЕдиницаИзмерения.Коэффициент = 0
	|							ТОГДА уатГрузыКПеревозке_уэОстатки.КоличествоОстаток * уатГрузыКПеревозке_уэОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|						ИНАЧЕ уатГрузыКПеревозке_уэОстатки.КоличествоОстаток / уатГрузыКПеревозке_уэОстатки.ЕдиницаИзмерения.Коэффициент * уатГрузыКПеревозке_уэОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|					КОНЕЦ
	|			ИНАЧЕ уатГрузыКПеревозке_уэОстатки.КоличествоОстаток
	|		КОНЕЦ, 0) КАК Количество,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА уатГрузыКПеревозке_уэОстатки.ЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам)
	|				ТОГДА ВЫБОР
	|						КОГДА уатГрузыКПеревозке_уэОстатки.ЕдиницаИзмерения.Коэффициент = 0
	|							ТОГДА уатЗаказГрузоотправителя.ВесБрутто * уатГрузыКПеревозке_уэОстатки.КоличествоОстаток / уатЗаказГрузоотправителя.Количество * уатГрузыКПеревозке_уэОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|						ИНАЧЕ уатЗаказГрузоотправителя.ВесБрутто * уатГрузыКПеревозке_уэОстатки.КоличествоОстаток / уатЗаказГрузоотправителя.Количество / уатГрузыКПеревозке_уэОстатки.ЕдиницаИзмерения.Коэффициент * уатГрузыКПеревозке_уэОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|					КОНЕЦ
	|			ИНАЧЕ уатЗаказГрузоотправителя.ВесБрутто * уатГрузыКПеревозке_уэОстатки.КоличествоОстаток / уатЗаказГрузоотправителя.Количество
	|		КОНЕЦ, 0) КАК Вес,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА уатГрузыКПеревозке_уэОстатки.ЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам)
	|				ТОГДА ВЫБОР
	|						КОГДА уатГрузыКПеревозке_уэОстатки.ЕдиницаИзмерения.Коэффициент = 0
	|							ТОГДА уатЗаказГрузоотправителя.Объем * уатГрузыКПеревозке_уэОстатки.КоличествоОстаток / уатЗаказГрузоотправителя.Количество * уатГрузыКПеревозке_уэОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|						ИНАЧЕ уатЗаказГрузоотправителя.Объем * уатГрузыКПеревозке_уэОстатки.КоличествоОстаток / уатЗаказГрузоотправителя.Количество / уатГрузыКПеревозке_уэОстатки.ЕдиницаИзмерения.Коэффициент * уатГрузыКПеревозке_уэОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|					КОНЕЦ
	|			ИНАЧЕ уатЗаказГрузоотправителя.Объем * уатГрузыКПеревозке_уэОстатки.КоличествоОстаток / уатЗаказГрузоотправителя.Количество
	|		КОНЕЦ, 0) КАК Объем,
	|	ЕСТЬNULL(ВЫБОР
	|			КОГДА уатГрузыКПеревозке_уэОстатки.ЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам)
	|				ТОГДА ВЫБОР
	|						КОГДА уатГрузыКПеревозке_уэОстатки.ЕдиницаИзмерения.Коэффициент = 0
	|							ТОГДА уатЗаказГрузоотправителя.КоличествоМест * уатГрузыКПеревозке_уэОстатки.КоличествоОстаток / уатЗаказГрузоотправителя.Количество * уатГрузыКПеревозке_уэОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|						ИНАЧЕ уатЗаказГрузоотправителя.КоличествоМест * уатГрузыКПеревозке_уэОстатки.КоличествоОстаток / уатЗаказГрузоотправителя.Количество / уатГрузыКПеревозке_уэОстатки.ЕдиницаИзмерения.Коэффициент * уатГрузыКПеревозке_уэОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|					КОНЕЦ
	|			ИНАЧЕ уатЗаказГрузоотправителя.КоличествоМест * уатГрузыКПеревозке_уэОстатки.КоличествоОстаток / уатЗаказГрузоотправителя.Количество
	|		КОНЕЦ, 0) КАК КоличествоМест
	|ИЗ
	|	РегистрНакопления.уатГрузыКПеревозке_уэ.Остатки(
	|			&Дата,
	|			НЕ ЗаказГрузоотправителя.FTL
	|				И (НЕ ЗаказГрузоотправителя.Мультимодальный
	|					ИЛИ ЗаказГрузоотправителя.Мультимодальный
	|						И ЗаказГрузоотправителя.ЭтоЭтап)) КАК уатГрузыКПеревозке_уэОстатки
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			уатЗаказГрузоотправителяТовары.Ссылка КАК Ссылка,
	|			уатЗаказГрузоотправителяТовары.ГрузовоеМесто КАК ГрузовоеМесто,
	|			уатЗаказГрузоотправителяТовары.Номенклатура КАК Номенклатура,
	|			уатЗаказГрузоотправителяТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|			СУММА(уатЗаказГрузоотправителяТовары.Количество) КАК Количество,
	|			СУММА(уатЗаказГрузоотправителяТовары.ВесБрутто) КАК ВесБрутто,
	|			СУММА(уатЗаказГрузоотправителяТовары.Объем) КАК Объем,
	|			СУММА(уатЗаказГрузоотправителяТовары.КоличествоМест) КАК КоличествоМест,
	|			уатЗаказГрузоотправителяТовары.Ссылка.Контрагент КАК Контрагент
	|		ИЗ
	|			Документ.уатЗаказГрузоотправителя.Товары КАК уатЗаказГрузоотправителяТовары
	|		ГДЕ
	|			уатЗаказГрузоотправителяТовары.Ссылка.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			уатЗаказГрузоотправителяТовары.Ссылка,
	|			уатЗаказГрузоотправителяТовары.ГрузовоеМесто,
	|			уатЗаказГрузоотправителяТовары.Номенклатура,
	|			уатЗаказГрузоотправителяТовары.ЕдиницаИзмерения,
	|			уатЗаказГрузоотправителяТовары.Ссылка.Контрагент
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			уатЗаказГрузоотправителяГрузМеста.Ссылка,
	|			уатЗаказГрузоотправителяГрузМеста.ГрузовоеМесто,
	|			NULL,
	|			уатЗаказГрузоотправителяГрузМеста.ВидУпаковки,
	|			СУММА(уатЗаказГрузоотправителяГрузМеста.КоличествоМест),
	|			СУММА(уатЗаказГрузоотправителяГрузМеста.ВесБрутто),
	|			СУММА(уатЗаказГрузоотправителяГрузМеста.Объем),
	|			СУММА(ВЫБОР
	|					КОГДА ТИПЗНАЧЕНИЯ(уатЗаказГрузоотправителяГрузМеста.ВидУпаковки) = ТИП(Справочник.уатТипыКонтейнеров_уэ)
	|						ТОГДА уатЗаказГрузоотправителяГрузМеста.КоличествоМест
	|					ИНАЧЕ ВЫБОР
	|							КОГДА уатЗаказГрузоотправителяГрузМеста.ВидУпаковки.Коэффициент = 0
	|								ТОГДА 0
	|							ИНАЧЕ уатЗаказГрузоотправителяГрузМеста.КоличествоМест / уатЗаказГрузоотправителяГрузМеста.ВидУпаковки.Коэффициент
	|						КОНЕЦ
	|				КОНЕЦ),
	|			уатЗаказГрузоотправителяГрузМеста.Ссылка.Контрагент
	|		ИЗ
	|			Документ.уатЗаказГрузоотправителя.ГрузовойСостав КАК уатЗаказГрузоотправителяГрузМеста
	|		ГДЕ
	|			уатЗаказГрузоотправителяГрузМеста.Ссылка.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			уатЗаказГрузоотправителяГрузМеста.Ссылка,
	|			уатЗаказГрузоотправителяГрузМеста.ГрузовоеМесто,
	|			уатЗаказГрузоотправителяГрузМеста.ВидУпаковки,
	|			уатЗаказГрузоотправителяГрузМеста.Ссылка.Контрагент
	|		
	|		ОБЪЕДИНИТЬ ВСЕ
	|		
	|		ВЫБРАТЬ
	|			уатЗаказГрузоотправителя.Ссылка,
	|			NULL,
	|			NULL,
	|			NULL,
	|			СУММА(1),
	|			СУММА(уатЗаказГрузоотправителя.ВесБрутто),
	|			СУММА(уатЗаказГрузоотправителя.Объем),
	|			СУММА(уатЗаказГрузоотправителя.КоличествоМест),
	|			уатЗаказГрузоотправителя.Контрагент
	|		ИЗ
	|			Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	|		ГДЕ
	|			уатЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			уатЗаказГрузоотправителя.Ссылка,
	|			уатЗаказГрузоотправителя.Контрагент) КАК уатЗаказГрузоотправителя
	|		ПО уатГрузыКПеревозке_уэОстатки.ЗаказГрузоотправителя = уатЗаказГрузоотправителя.Ссылка
	|			И (ВЫБОР
	|				КОГДА уатЗаказГрузоотправителя.Номенклатура ЕСТЬ NULL
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ уатГрузыКПеревозке_уэОстатки.Номенклатура = уатЗаказГрузоотправителя.Номенклатура
	|			КОНЕЦ)
	|			И уатГрузыКПеревозке_уэОстатки.ЕдиницаИзмерения = уатЗаказГрузоотправителя.ЕдиницаИзмерения
	|			И уатГрузыКПеревозке_уэОстатки.ГрузовоеМесто = уатЗаказГрузоотправителя.ГрузовоеМесто
	|			И уатГрузыКПеревозке_уэОстатки.Контрагент = уатЗаказГрузоотправителя.Контрагент
	|ГДЕ
	|	ЕСТЬNULL(ВЫБОР
	|				КОГДА уатГрузыКПеревозке_уэОстатки.ЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам)
	|					ТОГДА ВЫБОР
	|							КОГДА уатГрузыКПеревозке_уэОстатки.ЕдиницаИзмерения.Коэффициент = 0
	|								ТОГДА уатГрузыКПеревозке_уэОстатки.КоличествоОстаток * уатГрузыКПеревозке_уэОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|							ИНАЧЕ уатГрузыКПеревозке_уэОстатки.КоличествоОстаток / уатГрузыКПеревозке_уэОстатки.ЕдиницаИзмерения.Коэффициент * уатГрузыКПеревозке_уэОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|						КОНЕЦ
	|				ИНАЧЕ уатГрузыКПеревозке_уэОстатки.КоличествоОстаток
	|			КОНЕЦ, 0) > 0
	|ИТОГИ ПО
	|	АдресНазначения,
	|	Заказ";
	
	Выборка = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	Пока Выборка.Следующий() Цикл 
		КолСтрокВДереве = ЗаказыДерево.ПолучитьЭлементы().Количество();
		Если КолСтрокВДереве > 0 И ЗаказыДерево.ПолучитьЭлементы()[КолСтрокВДереве - 1].ПолучитьЭлементы().Количество() 
				И ЗаказыДерево.ПолучитьЭлементы()[КолСтрокВДереве - 1].ПунктЗаказНоменклатура = Выборка.АдресНазначения Тогда
			НовСтрокаПункт = ЗаказыДерево.ПолучитьЭлементы()[КолСтрокВДереве - 1];
		Иначе
			НовСтрокаПункт = ЗаказыДерево.ПолучитьЭлементы().Добавить();
			НовСтрокаПункт.ПунктЗаказНоменклатура = Выборка.АдресНазначения;
			НовСтрокаПункт.СтоянкаИзПункта        = уатЗащищенныеФункцииСервер_уэ.ПолучитьВремяСтоянкиВПункте(Выборка.АдресНазначения, ТипТС);
		КонецЕсли;
		
		ВыборкаЗаказы = Выборка.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		Пока ВыборкаЗаказы.Следующий() Цикл
			СтруктураПоиска = Новый Структура();
			СтруктураПоиска.Вставить("ПунктЗаказНоменклатура", ВыборкаЗаказы.Заказ);
			СтруктураПоиска.Вставить("ТипТочкиМаршрута",       Перечисления.уатТипыТочекМаршрута.Разгрузка);
			
			НайдСтроки = НайтиСтрокиВДереве(НовСтрокаПункт.ПолучитьЭлементы(), СтруктураПоиска, Ложь);
			
			Если НайдСтроки.Количество() = 0 Тогда
				НовСтрокаЗаказРазгрузка = НовСтрокаПункт.ПолучитьЭлементы().Добавить();
				НовСтрокаЗаказРазгрузка.ПунктЗаказНоменклатура = ВыборкаЗаказы.Заказ;
				НовСтрокаЗаказРазгрузка.ТипТочкиМаршрута       = Перечисления.уатТипыТочекМаршрута.Разгрузка;
				НовСтрокаЗаказРазгрузка.Стоянка            = ВыборкаЗаказы.Заказ.СтоянкаПунктНазначения;
				НовСтрокаЗаказРазгрузка.СтоянкаИзПункта        = уатЗащищенныеФункцииСервер_уэ.ПолучитьВремяСтоянкиВПункте(ВыборкаЗаказы.Заказ.АдресНазначения, ТипТС);
				НовСтрокаЗаказРазгрузка.ОкноС                  = ВыборкаЗаказы.Заказ.ДоставкаС;
				НовСтрокаЗаказРазгрузка.ОкноПо                 = ВыборкаЗаказы.Заказ.ДоставкаПо;
				НовСтрокаЗаказРазгрузка.Рекламации             = ПолучитьРекламацииДляСтрокиЗаказов(ВыборкаЗаказы.Заказ);
			Иначе
				НовСтрокаЗаказРазгрузка = НайдСтроки[0];
			КонецЕсли;
			
			ВыборкаНоменклатура = ВыборкаЗаказы.Выбрать();
			Пока ВыборкаНоменклатура.Следующий() Цикл
				Если ВыборкаЗаказы.Заказ.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам Тогда
					НовСтрокаЗаказРазгрузка.ЕдиницаИзмерения         = ВыборкаНоменклатура.ЕдиницаИзмерения;
					НовСтрокаЗаказРазгрузка.ЕдиницаИзмеренияПоЗаказу = ВыборкаНоменклатура.ЕдиницаИзмерения;
					НовСтрокаЗаказРазгрузка.Количество               = ВыборкаНоменклатура.Количество;
					НовСтрокаЗаказРазгрузка.ВесБрутто                = ВыборкаНоменклатура.Вес;
					НовСтрокаЗаказРазгрузка.Объем                    = ВыборкаНоменклатура.Объем;
					НовСтрокаЗаказРазгрузка.КоличествоМест           = ВыборкаНоменклатура.КоличествоМест;
					
				Иначе
					НовСтрока = НовСтрокаЗаказРазгрузка.ПолучитьЭлементы().Добавить();
					НовСтрока.ПунктЗаказНоменклатура   = ВыборкаНоменклатура.Номенклатура;
					НовСтрока.ЕдиницаИзмерения         = ВыборкаНоменклатура.ЕдиницаИзмерения;
					НовСтрока.ЕдиницаИзмеренияПоЗаказу = ВыборкаНоменклатура.ЕдиницаИзмерения;
					НовСтрока.Количество               = ВыборкаНоменклатура.Количество;
					НовСтрока.ВесБрутто                = ВыборкаНоменклатура.Вес;
					НовСтрока.Объем                    = ВыборкаНоменклатура.Объем;
					НовСтрока.КоличествоМест           = ВыборкаНоменклатура.КоличествоМест;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	// Только FTL заказы.
	Запрос.Текст = ТекстЗапросаКОстаткамFTLЗаказа();
	ВыборкаЗаказы = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	Пока ВыборкаЗаказы.Следующий() Цикл 
		
		КоличествоПунктов = ВыборкаЗаказы.Заказ.ПромежуточныеПункты.Количество();
		КоличествоГрузов = ВыборкаЗаказы.НомерСтроки; // Определяется по максимальному номеру строки таблицы грузов
		мсвОтрезкиПути = уатОбщегоНазначения_проф.ПолучитьНачальныеКонечныеПунктыГрузов(ВыборкаЗаказы.Заказ.ОтрезкиПути, КоличествоГрузов, КоличествоПунктов);
		
		ОтрезкиПутиКорректны = Истина;
		Для Каждого ТекОтрезокПути Из мсвОтрезкиПути Цикл
			Если ТекОтрезокПути.От < 0 Или ТекОтрезокПути.До < 0 Тогда
				// Заказ на ТС, в котором грузам некорректно назначены отрезки пути
				ОтрезкиПутиКорректны = Ложь;
			КонецЕсли;
		КонецЦикла;
		Если Не ОтрезкиПутиКорректны Тогда
			Продолжить;
		КонецЕсли;
		
		Для Сч = 0 По ВыборкаЗаказы.Заказ.ПромежуточныеПункты.Количество()-1 Цикл 
			Если Сч = 0 Или Не НовСтрокаПункт.ПунктЗаказНоменклатура = ВыборкаЗаказы.Заказ.ПромежуточныеПункты[Сч].Пункт Тогда 
				НовСтрокаПункт = ЗаказыДерево.ПолучитьЭлементы().Добавить();
				НовСтрокаПункт.ПунктЗаказНоменклатура = ВыборкаЗаказы.Заказ.ПромежуточныеПункты[Сч].Пункт;
				НовСтрокаПункт.СтоянкаИзПункта        = уатЗащищенныеФункцииСервер_уэ.ПолучитьВремяСтоянкиВПункте(
					ВыборкаЗаказы.Заказ.ПромежуточныеПункты[Сч].Пункт, ТипТС);
			КонецЕсли;
			
			НовСтрокаЗаказПП = НовСтрокаПункт.ПолучитьЭлементы().Добавить();
			НовСтрокаЗаказПП.ПунктЗаказНоменклатура = ВыборкаЗаказы.Заказ;
			НовСтрокаЗаказПП.ТипТочкиМаршрута       = ВыборкаЗаказы.Заказ.ПромежуточныеПункты[Сч].ТипТочкиМаршрута;
			НовСтрокаЗаказПП.СтоянкаИзПункта        = уатЗащищенныеФункцииСервер_уэ.ПолучитьВремяСтоянкиВПункте(
				ВыборкаЗаказы.Заказ.ПромежуточныеПункты[Сч].Пункт, ТипТС);
			НовСтрокаЗаказПП.ОкноС                  = ВыборкаЗаказы.Заказ.ПромежуточныеПункты[Сч].ОкноС;
			НовСтрокаЗаказПП.ОкноПо                 = ВыборкаЗаказы.Заказ.ПромежуточныеПункты[Сч].ОкноПо;
			НовСтрокаЗаказПП.Рекламации             = ПолучитьРекламацииДляСтрокиЗаказов(ВыборкаЗаказы.Заказ);
			НовСтрокаЗаказПП.Стоянка                = ВыборкаЗаказы.Заказ.ПромежуточныеПункты[Сч].Стоянка;
			Если ВыборкаЗаказы.Заказ.ПромежуточныеПункты[Сч].Ожидание > 0 И НовСтрокаПункт.Ожидание = 0 Тогда 
				НовСтрокаПункт.Ожидание = ВыборкаЗаказы.Заказ.ПромежуточныеПункты[Сч].Ожидание;
			КонецЕсли;
			
			ВыборкаНоменклатура = ВыборкаЗаказы.Выбрать();
			Пока ВыборкаНоменклатура.Следующий() Цикл
				Если ВыборкаЗаказы.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам Тогда
					НовСтрокаЗаказПП.ЕдиницаИзмерения         = ВыборкаНоменклатура.ЕдиницаИзмерения;
					НовСтрокаЗаказПП.ЕдиницаИзмеренияПоЗаказу = ВыборкаНоменклатура.ЕдиницаИзмерения;
					НовСтрокаЗаказПП.Количество               = ВыборкаНоменклатура.Количество;
					НовСтрокаЗаказПП.ВесБрутто                = ВыборкаНоменклатура.ВесБрутто;
					НовСтрокаЗаказПП.Объем                    = ВыборкаНоменклатура.Объем;
					НовСтрокаЗаказПП.КоличествоМест           = ВыборкаНоменклатура.КоличествоМест;
				Иначе
					флагПогрузка = Ложь;
					флагРазгрузка = Ложь;
					Если (ВыборкаЗаказы.Заказ.ПромежуточныеПункты[Сч].ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка
						ИЛИ ВыборкаЗаказы.Заказ.ПромежуточныеПункты[Сч].ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяПогрузка) Тогда 
						флагПогрузка = Истина;
					ИначеЕсли (ВыборкаЗаказы.Заказ.ПромежуточныеПункты[Сч].ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка
						ИЛИ ВыборкаЗаказы.Заказ.ПромежуточныеПункты[Сч].ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяРазгрузка) Тогда 
						флагРазгрузка = Истина;
					Иначе 
						Продолжить;
					КонецЕсли;
					
					Если НЕ ((флагПогрузка И мсвОтрезкиПути[ВыборкаНоменклатура.НомерСтроки-1].От = Сч+1)
						ИЛИ (флагРазгрузка И мсвОтрезкиПути[ВыборкаНоменклатура.НомерСтроки-1].До = Сч+1)) Тогда
						Продолжить;
					КонецЕсли;
					
					НовСтрока = НовСтрокаЗаказПП.ПолучитьЭлементы().Добавить();
					НовСтрока.ПунктЗаказНоменклатура   = ВыборкаНоменклатура.Номенклатура;
					НовСтрока.ЕдиницаИзмерения         = ВыборкаНоменклатура.ЕдиницаИзмерения;
					НовСтрока.ЕдиницаИзмеренияПоЗаказу = ВыборкаНоменклатура.ЕдиницаИзмерения;
					НовСтрока.Количество               = ВыборкаНоменклатура.Количество;
					НовСтрока.ВесБрутто                = ВыборкаНоменклатура.ВесБрутто;
					НовСтрока.Объем                    = ВыборкаНоменклатура.Объем;
					НовСтрока.КоличествоМест           = ВыборкаНоменклатура.КоличествоМест;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройкиФормы()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ВремРежим = ХранилищеНастроекДанныхФорм.Загрузить(
		"Документ.уатМаршрутныйЛист.Форма.ФормаДокумента", 
		"РежимОтображения"
	);
	
	Если ВремРежим = Неопределено Тогда 
		РежимОтображенияДерево = Истина;
	Иначе 
		РежимОтображенияДерево = ВремРежим;
	КонецЕсли;
	
	Если Параметры.Ключ.Пустая() Тогда 
		Объект.ПересчетВремени = ХранилищеНастроекДанныхФорм.Загрузить(
			"Документ.уатМаршрутныйЛист.Форма.ФормаДокумента", 
			"ПересчетВремени"
		);
	КонецЕсли;
	
	ВремРежим = ХранилищеНастроекДанныхФорм.Загрузить(
		"Документ.уатМаршрутныйЛист.Форма.ФормаДокумента",
		"ОтображениеВыработкиСводно");
	Если ВремРежим = Неопределено Тогда 
		ОтображениеВыработкиСводно = Истина;
	Иначе 
		ОтображениеВыработкиСводно = ВремРежим;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиФормы()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ХранилищеНастроекДанныхФорм.Сохранить(
		"Документ.уатМаршрутныйЛист.Форма.ФормаДокумента", 
		"РежимОтображения", 
		РежимОтображенияДерево
	);
	
	ХранилищеНастроекДанныхФорм.Сохранить(
		"Документ.уатМаршрутныйЛист.Форма.ФормаДокумента", 
		"ПересчетВремени", 
		Объект.ПересчетВремени
	);
	
	ХранилищеНастроекДанныхФорм.Сохранить(
		"Документ.уатМаршрутныйЛист.Форма.ФормаДокумента", 
		"ОтображениеВыработкиСводно", 
		ОтображениеВыработкиСводно
	);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДеревоЗаказовНаСервере()
	
	Перем НовСтрокаПункт, ПредПункт, НовСтрокаЗаказ, ПредЗаказ, ПредСтрока;
	
	дЗаказыДерево = ДанныеФормыВЗначение(ЗаказыДерево, Тип("ДеревоЗначений"));
	
	дЗаказыДерево.Строки.Очистить();

	СменилсяПункт = Ложь;
	ПредСтрока    = Неопределено;
	ПредПункт     = Ложь;
	
	ВремяПоЗаказам = ПолучитьВремяОтправленияДоставкиПоЗаказам();
	
	ИндексПункта = 1;
	УстановитьПривилегированныйРежим(Истина);
	СтатусыСинхронизацииСWMS = ПолучитьСтатусыСинхронизацииСWMS(Объект.Ссылка);
	Для Каждого ТекСтрока Из Объект.Заказы Цикл
		// Пункт.
		Если ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка Тогда
			ТекПункт = ?(ЗначениеЗаполнено(ТекСтрока.Пункт), ТекСтрока.Пункт, ТекСтрока.ЗаказГрузоотправителя.АдресОтправления);
		ИначеЕсли ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка Тогда
			ТекПункт = ?(ЗначениеЗаполнено(ТекСтрока.Пункт), ТекСтрока.Пункт, ТекСтрока.ЗаказГрузоотправителя.АдресНазначения);
		Иначе
			ТекПункт = ТекСтрока.Пункт;
		КонецЕсли;
		
		Если ТекСтрока.ЗаказГрузоотправителя.Пустая()
			ИЛИ ТекСтрока.ТипТочкиМаршрута.Пустая() Тогда
			НовСтрокаПункт = дЗаказыДерево.Строки.Добавить();
			НовСтрокаПункт.ПунктЗаказНоменклатура = ТекПункт;
			НовСтрокаПункт.Расстояние             = ТекСтрока.Расстояние;
			НовСтрокаПункт.РасстояниеФакт         = ТекСтрока.РасстояниеФакт;
			НовСтрокаПункт.Время                  = ТекСтрока.Время;
			НовСтрокаПункт.ВремяФакт              = ТекСтрока.ВремяФакт;
			НовСтрокаПункт.ПрибытиеПлан           = ТекСтрока.ПрибытиеПлан;
			НовСтрокаПункт.ПрибытиеФакт           = ТекСтрока.ПрибытиеФакт;
			НовСтрокаПункт.УбытиеПлан             = ТекСтрока.УбытиеПлан;
			НовСтрокаПункт.УбытиеФакт             = ТекСтрока.УбытиеФакт;
			НовСтрокаПункт.GUIDСтроки             = ТекСтрока.GUIDСтроки;
			НовСтрокаПункт.Выполнен               = ТекСтрока.Выполнен;
			НовСтрокаПункт.ПричинаЗакрытияЗаказа  = ТекСтрока.ПричинаЗакрытияЗаказа;
			НовСтрокаПункт.Ожидание               = ТекСтрока.Ожидание;
			НовСтрокаПункт.ОжиданиеФакт           = ТекСтрока.ОжиданиеФакт;
			НовСтрокаПункт.СтоянкаИзПункта        = ТекСтрока.СтоянкаИзПункта;
			НовСтрокаПункт.СтоянкаФакт            = ТекСтрока.СтоянкаФакт;
			НовСтрокаПункт.ОтветMultiGo           = ТекСтрока.ОтветMultiGo;
			НовСтрокаПункт.ОценкаСервиса          = ТекСтрока.ОценкаСервиса;
			НовСтрокаПункт.Подпись                = ТекСтрока.Подпись;
			Если ТипЗнч(ТекПункт) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда
				
				ТипПункта = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(ТекПункт, "ТипПункта");
				Если ЗначениеЗаполнено(ТипПункта) Тогда
					НовСтрокаПункт.Служебный = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(ТипПункта, "Служебный");  
				КонецЕсли;
			КонецЕсли;
			
			ПредПункт     = ТекПункт;
			СменилсяПункт = Истина;
			
			Продолжить;
		КонецЕсли;
		
		Если ТекПункт <> ПредПункт ИЛИ СменилсяПункт Тогда
			НовСтрокаПункт = дЗаказыДерево.Строки.Добавить();
			НовСтрокаПункт.ПунктЗаказНоменклатура = ТекПункт;
			НовСтрокаПункт.Расстояние             = ТекСтрока.Расстояние;
			НовСтрокаПункт.РасстояниеФакт         = ТекСтрока.РасстояниеФакт;
			НовСтрокаПункт.Время                  = ТекСтрока.Время;
			НовСтрокаПункт.ВремяФакт              = ТекСтрока.ВремяФакт;
			НовСтрокаПункт.ПрибытиеПлан           = ТекСтрока.ПрибытиеПлан;
			НовСтрокаПункт.ПрибытиеФакт           = ТекСтрока.ПрибытиеФакт;
			НовСтрокаПункт.УбытиеФакт             = ТекСтрока.УбытиеФакт;
			НовСтрокаПункт.УбытиеПлан             = ТекСтрока.УбытиеПлан;
			НовСтрокаПункт.ПричинаЗакрытияЗаказа  = ТекСтрока.ПричинаЗакрытияЗаказа;
			НовСтрокаПункт.Ожидание               = ТекСтрока.Ожидание;
			НовСтрокаПункт.ОжиданиеФакт           = ТекСтрока.ОжиданиеФакт;
			НовСтрокаПункт.СтоянкаИзПункта        = ТекСтрока.СтоянкаИзПункта;
			НовСтрокаПункт.НомерПункта            = ИндексПункта;
			НовСтрокаПункт.ОтветMultiGo           = ТекСтрока.ОтветMultiGo;
			НовСтрокаПункт.Служебный              = Ложь; 
			НовСтрокаПункт.ОценкаСервиса          = ТекСтрока.ОценкаСервиса;
			НовСтрокаПункт.Подпись                = ТекСтрока.Подпись;


			ПредПункт     = ТекПункт;
			СменилсяПункт = Истина;
			ИндексПункта  = ИндексПункта + 1;
		КонецЕсли;
		
		// Заказ.
		Если Не ТекСтрока.ЗаказГрузоотправителя = ПредЗаказ Или СменилсяПункт
			Или (Не ПредСтрока = Неопределено И Не ТекСтрока.ТипТочкиМаршрута = ПредСтрока.ТипТочкиМаршрута) Тогда
			
			НовСтрокаЗаказ = НовСтрокаПункт.Строки.Добавить();
			НовСтрокаЗаказ.ПунктЗаказНоменклатура = ТекСтрока.ЗаказГрузоотправителя;
			НовСтрокаЗаказ.ТипТочкиМаршрута       = ТекСтрока.ТипТочкиМаршрута;
			НовСтрокаЗаказ.ВесБрутто              = ТекСтрока.ВесБрутто;
			НовСтрокаЗаказ.Объем                  = ТекСтрока.Объем;
			НовСтрокаЗаказ.КоличествоМест         = ТекСтрока.КоличествоМест;
			НовСтрокаЗаказ.Стоянка                = ТекСтрока.Стоянка;
			НовСтрокаЗаказ.СтоянкаИзПункта        = ТекСтрока.СтоянкаИзПункта;
			НовСтрокаЗаказ.СтоянкаФакт            = ТекСтрока.СтоянкаФакт;
			НовСтрокаЗаказ.Расстояние             = ТекСтрока.Расстояние;
			НовСтрокаЗаказ.РасстояниеФакт         = ТекСтрока.РасстояниеФакт;
			НовСтрокаЗаказ.ПричинаЗакрытияЗаказа  = ТекСтрока.ПричинаЗакрытияЗаказа;
			НовСтрокаЗаказ.Терминал               = ТекСтрока.Терминал;
			НовСтрокаЗаказ.ОтветMultiGo           = ТекСтрока.ОтветMultiGo;
			НовСтрокаЗаказ.ОценкаСервиса          = ТекСтрока.ОценкаСервиса;
			НовСтрокаЗаказ.Подпись                = ТекСтрока.Подпись;
			НовСтрокаЗаказ.Служебный              = Ложь;
			
			Если ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка Тогда
				НовСтрокаЗаказ.ОкноС      = ВремяПоЗаказам.Получить(Объект.Заказы.Индекс(ТекСтрока)).ОтправлениеС;
				НовСтрокаЗаказ.ОкноПо     = ВремяПоЗаказам.Получить(Объект.Заказы.Индекс(ТекСтрока)).ОтправлениеПо;
				//НовСтрокаЗаказ.ОкноС      = ТекСтрока.ЗаказГрузоотправителя.ОтправлениеС;
				//НовСтрокаЗаказ.ОкноПо     = ТекСтрока.ЗаказГрузоотправителя.ОтправлениеПо;
				НовСтрокаЗаказ.Рекламации = ПолучитьРекламацииДляСтрокиЗаказов(ТекСтрока.ЗаказГрузоотправителя);
				
			ИначеЕсли ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка Тогда
				НовСтрокаЗаказ.ОкноС      = ВремяПоЗаказам.Получить(Объект.Заказы.Индекс(ТекСтрока)).ДоставкаС;
				НовСтрокаЗаказ.ОкноПо     = ВремяПоЗаказам.Получить(Объект.Заказы.Индекс(ТекСтрока)).ДоставкаПо;
				//НовСтрокаЗаказ.ОкноС      = ТекСтрока.ЗаказГрузоотправителя.ДоставкаС;
				//НовСтрокаЗаказ.ОкноПо     = ТекСтрока.ЗаказГрузоотправителя.ДоставкаПо;
				НовСтрокаЗаказ.Рекламации = ПолучитьРекламацииДляСтрокиЗаказов(ТекСтрока.ЗаказГрузоотправителя);
			Иначе
				// Для FTL заказов для каждой строчки есть только одно окно
				НовСтрокаЗаказ.ОкноС      = ВремяПоЗаказам.Получить(Объект.Заказы.Индекс(ТекСтрока)).ДоставкаС;
				НовСтрокаЗаказ.ОкноПо     = ВремяПоЗаказам.Получить(Объект.Заказы.Индекс(ТекСтрока)).ДоставкаПо;
			КонецЕсли;
			
			СтрокаСтатуса = СтатусыСинхронизацииСWMS.Найти(ТекСтрока.ЗаказГрузоотправителя, "ЗаказНаТС");
			Если ЗначениеЗаполнено(СтрокаСтатуса) Тогда
				НовСтрокаЗаказ.СтатусWMS = СтрокаСтатуса.Статус;
			КонецЕсли;
			
			// доп. выработка
			НовСтрокаЗаказ.ДопВыработкаПараметры.Очистить();
			НовСтрокаЗаказ.ДопВыработкаКоличество.Очистить();
			Для Сч = 1 По 5 Цикл
				Если ЗначениеЗаполнено(ТекСтрока["ПараметрВыработки" + Сч]) Тогда
					НовСтрокаЗаказ.ДопВыработкаПараметры.Добавить(ТекСтрока["ПараметрВыработки" + Сч]);
					НовСтрокаЗаказ.ДопВыработкаКоличество.Добавить(ТекСтрока["Выработка" + Сч]);
				КонецЕсли;
			КонецЦикла;
			
			ПредЗаказ     = ТекСтрока.ЗаказГрузоотправителя;
			СменилсяПункт = Ложь;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекСтрока.Номенклатура) Тогда 
			
			ПустаяЕИ = Справочники.ЕдиницыИзмерения.ПустаяСсылка();
			
			НовСтрокаЗаказ.Количество               = ТекСтрока.Количество;
			НовСтрокаЗаказ.ВесБрутто                = ТекСтрока.ВесБрутто;
			НовСтрокаЗаказ.Объем                    = ТекСтрока.Объем;
			НовСтрокаЗаказ.КоличествоМест           = ТекСтрока.КоличествоМест;
			НовСтрокаЗаказ.ЗаказГрузоотправителя    = ТекСтрока.ЗаказГрузоотправителя;
			НовСтрокаЗаказ.ЕдиницаИзмерения         = ПустаяЕИ;
			НовСтрокаЗаказ.ЕдиницаИзмеренияПоЗаказу = ПустаяЕИ;
			НовСтрокаЗаказ.GUIDСтроки               = ТекСтрока.GUIDСтроки;
			НовСтрокаЗаказ.Выполнен                 = ТекСтрока.Выполнен;
			НовСтрокаЗаказ.ПричинаЗакрытияЗаказа    = ТекСтрока.ПричинаЗакрытияЗаказа;
			НовСтрокаЗаказ.ВесТары                  = ?(флРасчетТары, ТекСтрока.ВесТары, 0);
			НовСтрокаЗаказ.Группа                   = ТекСтрока.Группа;
			НовСтрокаЗаказ.Паллета                  = ТекСтрока.Паллета;
			НовСтрокаЗаказ.Размещение               = ТекСтрока.Размещение;
			НовСтрокаЗаказ.Рекламация               = ТекСтрока.Рекламация;
			НовСтрокаЗаказ.Рекламации               = ПолучитьРекламацииДляСтрокиЗаказов(ТекСтрока.ЗаказГрузоотправителя);
			НовСтрокаЗаказ.Служебный                = Ложь;
		Иначе
			// Номенклатура.
			НовСтрокаНоменклатура = НовСтрокаЗаказ.Строки.Добавить();
			НовСтрокаНоменклатура.ПунктЗаказНоменклатура   = ТекСтрока.Номенклатура;
			НовСтрокаНоменклатура.Количество               = ТекСтрока.Количество;
			НовСтрокаНоменклатура.ВесБрутто                = ТекСтрока.ВесБрутто;
			НовСтрокаНоменклатура.Объем                    = ТекСтрока.Объем;
			НовСтрокаНоменклатура.КоличествоМест           = ТекСтрока.КоличествоМест;
			НовСтрокаНоменклатура.ЕдиницаИзмерения         = ТекСтрока.ЕдиницаИзмерения;
			НовСтрокаНоменклатура.ЕдиницаИзмеренияПоЗаказу = ТекСтрока.ЕдиницаИзмеренияПоЗаказу;
			НовСтрокаНоменклатура.ЗаказГрузоотправителя    = ТекСтрока.ЗаказГрузоотправителя;
			НовСтрокаНоменклатура.GUIDСтроки               = ТекСтрока.GUIDСтроки;
			НовСтрокаНоменклатура.ПричинаЗакрытияЗаказа    = ТекСтрока.ПричинаЗакрытияЗаказа;
			НовСтрокаНоменклатура.Выполнен                 = ТекСтрока.Выполнен;
			НовСтрокаНоменклатура.ВесТары                  = ?(флРасчетТары, ТекСтрока.ВесТары, 0);
			НовСтрокаНоменклатура.Группа                   = ТекСтрока.Группа;
			НовСтрокаНоменклатура.Паллета                  = ТекСтрока.Паллета;
			НовСтрокаНоменклатура.Размещение               = ТекСтрока.Размещение;
			НовСтрокаНоменклатура.Рекламация               = ТекСтрока.Рекламация;
			НовСтрокаНоменклатура.ОтветMultiGo             = ТекСтрока.ОтветMultiGo;
			НовСтрокаНоменклатура.ОценкаСервиса            = ТекСтрока.ОценкаСервиса;
			НовСтрокаНоменклатура.Подпись                  = ТекСтрока.Подпись;

			НовСтрокаНоменклатура.Служебный                = Ложь;
			НовСтрокаЗаказ.Рекламации                      = ПолучитьРекламацииДляСтрокиЗаказов(ТекСтрока.ЗаказГрузоотправителя);
		КонецЕсли;
				
		ПредСтрока = ТекСтрока;
	КонецЦикла;
	
	Для Каждого ТекУзел Из дЗаказыДерево.Строки Цикл 
		ТекУзел.Выполнен = ПолучитьПометкуУзлаДереваПриЗагрузке(ТекУзел);
		ПолучитьПометкуРекламацияУзлаДереваПриЗагрузке(ТекУзел);
	КонецЦикла;
	
	УстановитьПривилегированныйРежим(Ложь);
	
	ОбновитьПоляДереваЗаказов(дЗаказыДерево);
	
	ОбновитьМаршрутныеПараметрыДереваЗаказов();
	ОбновитьГрузовыеПараметрыДереваЗаказов();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПоляДереваЗаказов(ДеревоЗаказов)
	
	МаксИндексПриемника1 = ЗаказыДерево.ПолучитьЭлементы().Количество() - 1;
	
	Для Сч1 = 0 По ДеревоЗаказов.Строки.Количество() - 1 Цикл 
		СтрокаИсточник1 = ДеревоЗаказов.Строки[Сч1];
		
		Если Сч1 <= МаксИндексПриемника1 Тогда 
			СтрокаПриемник1 = ЗаказыДерево.ПолучитьЭлементы()[Сч1];
		Иначе 
			СтрокаПриемник1 = ЗаказыДерево.ПолучитьЭлементы().Добавить();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтрокаПриемник1, СтрокаИсточник1);
		
		МаксИндексПриемника2 = СтрокаПриемник1.ПолучитьЭлементы().Количество() - 1;
		
		Для Сч2 = 0 По СтрокаИсточник1.Строки.Количество() - 1 Цикл 
			СтрокаИсточник2 = СтрокаИсточник1.Строки[Сч2];
			
			Если Сч2 <= МаксИндексПриемника2 Тогда 
				СтрокаПриемник2 = СтрокаПриемник1.ПолучитьЭлементы()[Сч2];
			Иначе 
				СтрокаПриемник2 = СтрокаПриемник1.ПолучитьЭлементы().Добавить();
			КонецЕсли;
			
			ЗаполнитьЗначенияСвойств(СтрокаПриемник2, СтрокаИсточник2);
			
			МаксИндексПриемника3 = СтрокаПриемник2.ПолучитьЭлементы().Количество() - 1;
			
			Для Сч3 = 0 По СтрокаИсточник2.Строки.Количество() - 1 Цикл 
				СтрокаИсточник3 = СтрокаИсточник2.Строки[Сч3];
				
				Если Сч3 <= МаксИндексПриемника3 Тогда 
					СтрокаПриемник3 = СтрокаПриемник2.ПолучитьЭлементы()[Сч3];
				Иначе 
					СтрокаПриемник3 = СтрокаПриемник2.ПолучитьЭлементы().Добавить();
				КонецЕсли;
				
				ЗаполнитьЗначенияСвойств(СтрокаПриемник3, СтрокаИсточник3);
			КонецЦикла;
			
			СчУдаления = МаксИндексПриемника3;
			Пока СчУдаления >= СтрокаИсточник2.Строки.Количество() Цикл 
				СтрокаПриемник2.ПолучитьЭлементы().Удалить(СтрокаПриемник2.ПолучитьЭлементы()[СчУдаления]);
				СчУдаления = СчУдаления - 1;
			КонецЦикла;
		КонецЦикла;
		
		СчУдаления = МаксИндексПриемника2;
		Пока СчУдаления >= СтрокаИсточник1.Строки.Количество() Цикл 
			СтрокаПриемник1.ПолучитьЭлементы().Удалить(СтрокаПриемник1.ПолучитьЭлементы()[СчУдаления]);
			СчУдаления = СчУдаления - 1;
		КонецЦикла;
	КонецЦикла;
	
	СчУдаления = МаксИндексПриемника1;
	Пока СчУдаления >= ДеревоЗаказов.Строки.Количество() Цикл 
		ЗаказыДерево.ПолучитьЭлементы().Удалить(ЗаказыДерево.ПолучитьЭлементы()[СчУдаления]);
		СчУдаления = СчУдаления - 1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПометкуУзлаДереваПриЗагрузке(УзелОбхода)
	
	Если УзелОбхода.Строки.Количество() = 0 Тогда 
		Возврат УзелОбхода.Выполнен;
	КонецЕсли;
	
	СчВсегоСтрок = 0;
	СчВыполнено  = 0;
	Для Каждого ТекУзел Из УзелОбхода.Строки Цикл 
		СчВсегоСтрок = СчВсегоСтрок + 1;
		СчВыполнено  = СчВыполнено +
			?(ПолучитьПометкуУзлаДереваПриЗагрузке(ТекУзел),1,0);
	КонецЦикла;
	
	Если СчВсегоСтрок = СчВыполнено Тогда 
		УзелОбхода.Выполнен = Истина;
		Возврат Истина;
	Иначе 
		УзелОбхода.Выполнен = Ложь;
		Возврат Ложь;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ПолучитьПометкуРекламацияУзлаДереваПриЗагрузке(УзелОбхода)
	
	Если УзелОбхода.Строки.Количество() = 0 Тогда 
		Возврат УзелОбхода.Рекламация;
	КонецЕсли;
	
	СчВсегоСтрок = 0;
	СчВыполнено  = 0;
	Для Каждого ТекУзел Из УзелОбхода.Строки Цикл 
		СчВсегоСтрок = СчВсегоСтрок + 1;
		СчВыполнено  = СчВыполнено + ?(ПолучитьПометкуРекламацияУзлаДереваПриЗагрузке(ТекУзел),1,0);
	КонецЦикла;
	
	Если УзелОбхода.Родитель <> Неопределено Тогда
		Если СчВсегоСтрок = СчВыполнено Тогда 
			УзелОбхода.Рекламация = Истина;
			Возврат Истина;
		Иначе 
			УзелОбхода.Рекламация = Ложь;
			Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

// Процедура выполняет запись дерева маршрутов
//
&НаСервере
Процедура ЗаписатьДеревоЗаказов()
	
	дЗаказыДерево = ДанныеФормыВЗначение(ЗаказыДерево, Тип("ДеревоЗначений"));
	
	Объект.Заказы.Очистить();
	
	Для Каждого ТекСтрокаПункт Из дЗаказыДерево.Строки Цикл
		Если ТекСтрокаПункт.Строки.Количество() = 0 Тогда //просто пункт
			НовСтрокаЗаказы = Объект.Заказы.Добавить();
			НовСтрокаЗаказы.Пункт                 = ТекСтрокаПункт.ПунктЗаказНоменклатура;
			НовСтрокаЗаказы.Время                 = ТекСтрокаПункт.Время;
			НовСтрокаЗаказы.ВремяФакт             = ТекСтрокаПункт.ВремяФакт;
			НовСтрокаЗаказы.Расстояние            = ТекСтрокаПункт.Расстояние;
			НовСтрокаЗаказы.РасстояниеФакт        = ТекСтрокаПункт.РасстояниеФакт;
			НовСтрокаЗаказы.Стоянка               = ТекСтрокаПункт.Стоянка;
			НовСтрокаЗаказы.СтоянкаИзПункта       = ТекСтрокаПункт.СтоянкаИзПункта;
			НовСтрокаЗаказы.СтоянкаФакт           = ТекСтрокаПункт.СтоянкаФакт;
			НовСтрокаЗаказы.ПрибытиеПлан          = ТекСтрокаПункт.ПрибытиеПлан;
			НовСтрокаЗаказы.ПрибытиеФакт          = ТекСтрокаПункт.ПрибытиеФакт;
			НовСтрокаЗаказы.УбытиеПлан            = ТекСтрокаПункт.УбытиеПлан;
			НовСтрокаЗаказы.УбытиеФакт            = ТекСтрокаПункт.УбытиеФакт;
			НовСтрокаЗаказы.GUIDСтроки            = ТекСтрокаПункт.GUIDСтроки;
			НовСтрокаЗаказы.Выполнен              = ТекСтрокаПункт.Выполнен;
			НовСтрокаЗаказы.ТипТочкиМаршрута      = Перечисления.уатТипыТочекМаршрута.ПромежуточныйПункт;
			НовСтрокаЗаказы.Ожидание              = ТекСтрокаПункт.Ожидание;
			НовСтрокаЗаказы.ОжиданиеФакт          = ТекСтрокаПункт.ОжиданиеФакт;
			НовСтрокаЗаказы.ОтветMultiGo          = ТекСтрокаПункт.ОтветMultiGo;
			Продолжить;
		КонецЕсли;
		
		Для Каждого ТекСтрокаЗаказ Из ТекСтрокаПункт.Строки Цикл
			Если ТекСтрокаЗаказ.Строки.Количество() = 0 Тогда 
				ПустаяЕИ = Справочники.ЕдиницыИзмерения.ПустаяСсылка();
				
				НовСтрокаЗаказы = Объект.Заказы.Добавить();
				НовСтрокаЗаказы.ЗаказГрузоотправителя    = ТекСтрокаЗаказ.ПунктЗаказНоменклатура;
				НовСтрокаЗаказы.Пункт                    = ТекСтрокаПункт.ПунктЗаказНоменклатура;
				НовСтрокаЗаказы.ЕдиницаИзмеренияПоЗаказу = ПустаяЕИ;
				НовСтрокаЗаказы.ЕдиницаИзмерения         = ПустаяЕИ;
				НовСтрокаЗаказы.Количество               = ТекСтрокаЗаказ.Количество;
				НовСтрокаЗаказы.ТипТочкиМаршрута         = ТекСтрокаЗаказ.ТипТочкиМаршрута;
				НовСтрокаЗаказы.ВесБрутто                = ТекСтрокаЗаказ.ВесБрутто;
				НовСтрокаЗаказы.Объем                    = ТекСтрокаЗаказ.Объем;
				НовСтрокаЗаказы.КоличествоМест           = ТекСтрокаЗаказ.КоличествоМест;
				НовСтрокаЗаказы.Стоянка                  = ТекСтрокаЗаказ.Стоянка;
				НовСтрокаЗаказы.СтоянкаИзПункта          = ТекСтрокаЗаказ.СтоянкаИзПункта;
				НовСтрокаЗаказы.СтоянкаФакт              = ТекСтрокаЗаказ.СтоянкаФакт;
				НовСтрокаЗаказы.GUIDСтроки               = ТекСтрокаЗаказ.GUIDСтроки;
				НовСтрокаЗаказы.Расстояние               = ТекСтрокаПункт.Расстояние;
				НовСтрокаЗаказы.РасстояниеФакт           = ТекСтрокаПункт.РасстояниеФакт;
				НовСтрокаЗаказы.Время                    = ТекСтрокаПункт.Время;
				НовСтрокаЗаказы.ВремяФакт                = ТекСтрокаПункт.ВремяФакт;
				НовСтрокаЗаказы.ПрибытиеПлан             = ТекСтрокаПункт.ПрибытиеПлан;
				НовСтрокаЗаказы.ПрибытиеФакт             = ТекСтрокаПункт.ПрибытиеФакт;
				НовСтрокаЗаказы.УбытиеПлан               = ТекСтрокаПункт.УбытиеПлан;
				НовСтрокаЗаказы.УбытиеФакт               = ТекСтрокаПункт.УбытиеФакт;
				НовСтрокаЗаказы.Выполнен                 = ТекСтрокаЗаказ.Выполнен;
				НовСтрокаЗаказы.Рекламация               = ТекСтрокаЗаказ.Рекламация;
				НовСтрокаЗаказы.Рекламации               = ПолучитьРекламацииДляСтрокиЗаказов(НовСтрокаЗаказы.ЗаказГрузоотправителя);
				НовСтрокаЗаказы.ОкноС                    = ТекСтрокаЗаказ.ОкноС;
				НовСтрокаЗаказы.ОкноПо                   = ТекСтрокаЗаказ.ОкноПо;
				НовСтрокаЗаказы.ПричинаЗакрытияЗаказа    = ТекСтрокаЗаказ.ПричинаЗакрытияЗаказа;
				НовСтрокаЗаказы.Ожидание                 = ТекСтрокаПункт.Ожидание;
				НовСтрокаЗаказы.ОжиданиеФакт             = ТекСтрокаПункт.ОжиданиеФакт;
				НовСтрокаЗаказы.Терминал                 = ТекСтрокаЗаказ.Терминал;
				НовСтрокаЗаказы.ВесТары                  = ?(флРасчетТары, ТекСтрокаЗаказ.ВесТары, 0);
				НовСтрокаЗаказы.Группа                   = ТекСтрокаЗаказ.Группа;
				НовСтрокаЗаказы.Паллета                  = ТекСтрокаЗаказ.Паллета;
				НовСтрокаЗаказы.Размещение               = ТекСтрокаЗаказ.Размещение;
				НовСтрокаЗаказы.СтатусWMS                = ТекСтрокаЗаказ.СтатусWMS;
				НовСтрокаЗаказы.ОтветMultiGo             = ТекСтрокаЗаказ.ОтветMultiGo;
				
				Для Сч = 1 По ТекСтрокаЗаказ.ДопВыработкаПараметры.Количество() Цикл
					НовСтрокаЗаказы["ПараметрВыработки" + Сч] = ТекСтрокаЗаказ.ДопВыработкаПараметры[Сч-1].Значение;
					НовСтрокаЗаказы["Выработка" + Сч]         = ТекСтрокаЗаказ.ДопВыработкаКоличество[Сч-1].Значение;
				КонецЦикла;
				
			Иначе
				Для Каждого ТекСтрокаНом Из ТекСтрокаЗаказ.Строки Цикл
					НовСтрокаЗаказы = Объект.Заказы.Добавить();
					НовСтрокаЗаказы.ЗаказГрузоотправителя    = ТекСтрокаЗаказ.ПунктЗаказНоменклатура;
					НовСтрокаЗаказы.Пункт                    = ТекСтрокаПункт.ПунктЗаказНоменклатура;
					НовСтрокаЗаказы.Номенклатура             = ТекСтрокаНом.ПунктЗаказНоменклатура;
					НовСтрокаЗаказы.ЕдиницаИзмеренияПоЗаказу = ТекСтрокаНом.ЕдиницаИзмеренияПоЗаказу;
					НовСтрокаЗаказы.ЕдиницаИзмерения         = ТекСтрокаНом.ЕдиницаИзмерения;
					НовСтрокаЗаказы.Количество               = ТекСтрокаНом.Количество;
					НовСтрокаЗаказы.ТипТочкиМаршрута         = ТекСтрокаЗаказ.ТипТочкиМаршрута;
					НовСтрокаЗаказы.ВесБрутто                = ТекСтрокаНом.ВесБрутто;
					НовСтрокаЗаказы.Объем                    = ТекСтрокаНом.Объем;
					НовСтрокаЗаказы.КоличествоМест           = ТекСтрокаНом.КоличествоМест;
					НовСтрокаЗаказы.Стоянка                  = ТекСтрокаЗаказ.Стоянка;
					НовСтрокаЗаказы.СтоянкаИзПункта          = ТекСтрокаЗаказ.СтоянкаИзПункта;
					НовСтрокаЗаказы.СтоянкаФакт              = ТекСтрокаЗаказ.СтоянкаФакт;
					НовСтрокаЗаказы.GUIDСтроки               = ТекСтрокаНом.GUIDСтроки;
					НовСтрокаЗаказы.Расстояние               = ТекСтрокаПункт.Расстояние;
					НовСтрокаЗаказы.РасстояниеФакт           = ТекСтрокаПункт.РасстояниеФакт;
					НовСтрокаЗаказы.Время                    = ТекСтрокаПункт.Время;
					НовСтрокаЗаказы.ВремяФакт                = ТекСтрокаПункт.ВремяФакт;
					НовСтрокаЗаказы.ПрибытиеФакт             = ТекСтрокаПункт.ПрибытиеФакт;
					НовСтрокаЗаказы.ПрибытиеПлан             = ТекСтрокаПункт.ПрибытиеПлан;
					НовСтрокаЗаказы.УбытиеПлан               = ТекСтрокаПункт.УбытиеПлан;
					НовСтрокаЗаказы.УбытиеФакт               = ТекСтрокаПункт.УбытиеФакт;
					НовСтрокаЗаказы.Выполнен                 = ТекСтрокаНом.Выполнен;
					НовСтрокаЗаказы.Рекламация               = ТекСтрокаНом.Рекламация;
					НовСтрокаЗаказы.Рекламации               = ПолучитьРекламацииДляСтрокиЗаказов(НовСтрокаЗаказы.ЗаказГрузоотправителя);
					НовСтрокаЗаказы.ОкноС                    = ТекСтрокаЗаказ.ОкноС;
					НовСтрокаЗаказы.ОкноПо                   = ТекСтрокаЗаказ.ОкноПо;
					НовСтрокаЗаказы.ПричинаЗакрытияЗаказа    = ТекСтрокаНом.ПричинаЗакрытияЗаказа;
					НовСтрокаЗаказы.Ожидание                 = ТекСтрокаПункт.Ожидание;
					НовСтрокаЗаказы.ОжиданиеФакт             = ТекСтрокаПункт.ОжиданиеФакт;
					НовСтрокаЗаказы.Терминал                 = ТекСтрокаЗаказ.Терминал;
					НовСтрокаЗаказы.ВесТары                  = ?(флРасчетТары, ТекСтрокаНом.ВесТары, 0);
					НовСтрокаЗаказы.Группа                   = ТекСтрокаНом.Группа;
					НовСтрокаЗаказы.Паллета                  = ТекСтрокаНом.Паллета;
					НовСтрокаЗаказы.Размещение               = ТекСтрокаНом.Размещение;
					НовСтрокаЗаказы.СтатусWMS                = ТекСтрокаЗаказ.СтатусWMS;
					НовСтрокаЗаказы.ОтветMultiGo             = ТекСтрокаЗаказ.ОтветMultiGo;
					
					Для Сч = 1 По ТекСтрокаЗаказ.ДопВыработкаПараметры.Количество() Цикл
						НовСтрокаЗаказы["ПараметрВыработки" + Сч] = ТекСтрокаЗаказ.ДопВыработкаПараметры[Сч-1].Значение;
						НовСтрокаЗаказы["Выработка" + Сч]         = ТекСтрокаЗаказ.ДопВыработкаКоличество[Сч-1].Значение;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если дЗаказыДерево.Строки.Количество() > 0 Тогда
		Объект.ДатаИВремяОтправленияПлан = дЗаказыДерево.Строки[0].УбытиеПлан;
	КонецЕсли;
	
КонецПроцедуры

// Процедура заполняет данные в ТЧ после выполнения подборов
&НаКлиенте
Процедура ОбновитьСодержимоеТЧСПискаПослеЗаполнения(Параметр1, Параметр2) Экспорт
	
	ЗаказыУстановитьСодержимоеЯчеек();
	ЗаказыДеревоИзменитьДатыВШапке();
	РасстоянияТЧЗаказы(Неопределено);
	
КонецПроцедуры

// Процедура выполняет синхронизацию значений в "одинаковых" строках списка
//
// Параметры:
//  ОбновленнаяСтрока	 - 	 - 
//
&НаКлиенте
Процедура УстановитьДанныеСтрокОдногоПункта(ОбновленнаяСтрока)
	
	Если ОбновленнаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	мсвНаборСтрокПункта = Новый Массив;
	
	Индекс = ОбновленнаяСтрока.НомерСтроки-1;
	
	Пока Индекс >= 0 Цикл 
		ТекСтрока = Объект.Заказы.Получить(Индекс);
		Если ТекСтрока.Пункт = ОбновленнаяСтрока.Пункт Тогда 
			мсвНаборСтрокПункта.Добавить(ТекСтрока);
		Иначе 
			Прервать;
		КонецЕсли;
		Индекс = Индекс - 1;
	КонецЦикла;
	
	Индекс     = ОбновленнаяСтрока.НомерСтроки;
	МаксИндекс = Объект.Заказы.Количество()-1;
	
	Пока Индекс <= МаксИндекс Цикл 
		ТекСтрока = Объект.Заказы.Получить(Индекс);
		Если ТекСтрока.Пункт = ОбновленнаяСтрока.Пункт Тогда 
			мсвНаборСтрокПункта.Добавить(ТекСтрока);
		Иначе 
			Прервать;
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
	
	Для Каждого ТекСтрока Из мсвНаборСтрокПункта Цикл 
		ТекСтрока.Время        			= ОбновленнаяСтрока.Время;
		ТекСтрока.ВремяФакт             = ОбновленнаяСтрока.ВремяФакт;
		ТекСтрока.Расстояние   			= ОбновленнаяСтрока.Расстояние;
		ТекСтрока.РасстояниеФакт        = ОбновленнаяСтрока.РасстояниеФакт;
		ТекСтрока.Ожидание     			= ОбновленнаяСтрока.Ожидание;
		ТекСтрока.ОжиданиеФакт          = ОбновленнаяСтрока.ОжиданиеФакт;
		ТекСтрока.ПрибытиеПлан 			= ОбновленнаяСтрока.ПрибытиеПлан;
		ТекСтрока.ПрибытиеФакт 			= ОбновленнаяСтрока.ПрибытиеФакт;
		ТекСтрока.УбытиеПлан   			= ОбновленнаяСтрока.УбытиеПлан;
		ТекСтрока.УбытиеФакт   			= ОбновленнаяСтрока.УбытиеФакт;
		
		Если ТекСтрока.ЗаказГрузоотправителя = ОбновленнаяСтрока.ЗаказГрузоотправителя Тогда  
			ТекСтрока.Стоянка         = ОбновленнаяСтрока.Стоянка;
			ТекСтрока.СтоянкаИзПункта = ОбновленнаяСтрока.СтоянкаИзПункта;
			ТекСтрока.СтоянкаФакт     = ОбновленнаяСтрока.СтоянкаФакт;
			
			// доп. выработка одинакова в пределах одного заказа
			Для Сч = 1 По 5 Цикл
				ТекСтрока["ПараметрВыработки" + Сч] = ОбновленнаяСтрока["ПараметрВыработки" + Сч];
				ТекСтрока["Выработка" + Сч] = ОбновленнаяСтрока["Выработка" + Сч];
			КонецЦикла;
			
			Если ТекСтрока.Выполнен <> ОбновленнаяСтрока.Выполнен Тогда
				ТекСтрока.Выполнен = ОбновленнаяСтрока.Выполнен;
				ПриИзмененииФлагаЗаказыВыполнен(ТекСтрока, Ложь);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура обновляет плановое время в режиме отображения "список"
//
// Параметры:
//  ДатаВыездаНаМаршрут	 - 	 - 
//
&НаСервере
Процедура ПересчитатьПлановоеВремя(ДатаВыездаНаМаршрут=Неопределено)
	
	ПредПрибытиеПлан             = Неопределено;
	ПредУбытиеПлан               = Неопределено;
	ПредВремя                    = Неопределено;
	ПредПункт                    = Неопределено;
	ПредЗаказАнализ              = Неопределено;
	ПредПунктАнализ              = Неопределено;
	мсвСтрокиОбработка           = Новый Массив();
	ОбщееВремяСтоянкиВПунктеВСек = 0;
	флЕстьПерваяСтрока           = Ложь;
	
	Если ДатаВыездаНаМаршрут = Неопределено
		И Не ЗначениеЗаполнено(Объект.ДатаИВремяОтправленияПлан) 
		И Объект.Заказы.Количество() <> 0 Тогда
		Если ЗначениеЗаполнено(Объект.Заказы[0].УбытиеПлан) Тогда
			Объект.ДатаИВремяОтправленияПлан = Объект.Заказы[0].УбытиеПлан;
		Иначе
			Объект.ДатаИВремяОтправленияПлан = Объект.Заказы[0].ПрибытиеПлан;
		КонецЕсли;
	КонецЕсли;

	Для Каждого ТекСтрока Из Объект.Заказы Цикл 
		Если Не ТекСтрока.Пункт = ПредПункт Тогда 
			Для Сч = 1 По мсвСтрокиОбработка.Количество() Цикл 
				СтрокаПункта = мсвСтрокиОбработка.Получить(Сч-1);
				Если Сч = 1 И флЕстьПерваяСтрока Тогда 
					Если ДатаВыездаНаМаршрут = Неопределено Тогда 
						СтрокаПункта.УбытиеПлан   = Объект.ДатаИВремяОтправленияПлан;
						СтрокаПункта.ПрибытиеПлан = СтрокаПункта.УбытиеПлан - ОбщееВремяСтоянкиВПунктеВСек;
					Иначе 
						СтрокаПункта.ПрибытиеПлан        = ДатаВыездаНаМаршрут;
						СтрокаПункта.УбытиеПлан          = СтрокаПункта.ПрибытиеПлан + ОбщееВремяСтоянкиВПунктеВСек;
						Объект.ДатаИВремяОтправленияПлан = СтрокаПункта.УбытиеПлан;
					КонецЕсли;
					
					ПредПрибытиеПлан = СтрокаПункта.ПрибытиеПлан;
					ПредУбытиеПлан   = СтрокаПункта.УбытиеПлан;
					ПредВремя        = СтрокаПункта.Время;
					
				ИначеЕсли Сч = 1 И Не флЕстьПерваяСтрока Тогда
					ТекПрибытиеПлан = ПредУбытиеПлан + ((ПредВремя - Цел(ПредВремя))*6000 + Цел(ПредВремя)*3600);
					
					Если Объект.ПересчетВремени = 1 Тогда 
						Если ЗначениеЗаполнено(СтрокаПункта.ПрибытиеПлан)
							И ЗначениеЗаполнено(ТекПрибытиеПлан) Тогда
							РазницаВремени = СтрокаПункта.ПрибытиеПлан - ТекПрибытиеПлан;
							РазницаЧас = Цел(РазницаВремени/3600);
							РазницаМин = Цел((РазницаВремени - РазницаЧас*3600) / 60);
							РазницаВремени = РазницаЧас + РазницаМин/100;
							
							СтрокаПункта.Ожидание = РазницаВремени;
						Иначе
							СтрокаПункта.Ожидание = 0;
						КонецЕсли;
					Иначе 
						СтрокаПункта.ПрибытиеПлан = уатЗащищенныеФункцииСервер.СложитьВремя(ТекПрибытиеПлан, СтрокаПункта.Ожидание);
					КонецЕсли;
					
					СтрокаПункта.УбытиеПлан = СтрокаПункта.ПрибытиеПлан + ОбщееВремяСтоянкиВПунктеВСек;
					
					ПредПрибытиеПлан = СтрокаПункта.ПрибытиеПлан;
					ПредУбытиеПлан   = СтрокаПункта.УбытиеПлан;
					ПредВремя        = СтрокаПункта.Время;
					
				Иначе 
					СтрокаПункта.УбытиеПлан   = ПредУбытиеПлан;
					СтрокаПункта.ПрибытиеПлан = ПредПрибытиеПлан;
					СтрокаПункта.Время        = ПредВремя;
					
				КонецЕсли;
			КонецЦикла;
			
			ПредПункт = ТекСтрока.Пункт;
			ПредЗаказАнализ = Неопределено;
			ПредПунктАнализ = Неопределено;
			мсвСтрокиОбработка = Новый Массив();
			ОбщееВремяСтоянкиВПунктеВСек = 0;
			флЕстьПерваяСтрока = Ложь;
		КонецЕсли;
		
		мсвСтрокиОбработка.Добавить(ТекСтрока);
		Если ТекСтрока.НомерСтроки = 1 Тогда 
			флЕстьПерваяСтрока = Истина;
		КонецЕсли;
		
		Если ТекСтрока.Пункт <> ПредПунктАнализ Тогда 
			ПредПунктАнализ = ТекСтрока.Пункт;
			ОбщееВремяСтоянкиВПунктеВСек = ОбщееВремяСтоянкиВПунктеВСек + ((ТекСтрока.СтоянкаИзПункта - Цел(ТекСтрока.СтоянкаИзПункта))*6000 + Цел(ТекСтрока.СтоянкаИзПункта)*3600);
		КонецЕсли;
		
		Если ТекСтрока.ЗаказГрузоотправителя <> ПредЗаказАнализ Тогда 
			ПредЗаказАнализ = ТекСтрока.ЗаказГрузоотправителя;
			ОбщееВремяСтоянкиВПунктеВСек = ОбщееВремяСтоянкиВПунктеВСек + ((ТекСтрока.Стоянка - Цел(ТекСтрока.Стоянка))*6000 + Цел(ТекСтрока.Стоянка)*3600);
		КонецЕсли;
	КонецЦикла;
	
	Для Сч = 1 По мсвСтрокиОбработка.Количество() Цикл 
		СтрокаПункта = мсвСтрокиОбработка.Получить(Сч-1);
		Если Сч = 1 И флЕстьПерваяСтрока Тогда 
			Если ДатаВыездаНаМаршрут = Неопределено Тогда 
				СтрокаПункта.УбытиеПлан   = Объект.ДатаИВремяОтправленияПлан;
				СтрокаПункта.ПрибытиеПлан = СтрокаПункта.УбытиеПлан - ОбщееВремяСтоянкиВПунктеВСек;
			Иначе 
				СтрокаПункта.ПрибытиеПлан        = ДатаВыездаНаМаршрут;
				СтрокаПункта.УбытиеПлан          = СтрокаПункта.ПрибытиеПлан + ОбщееВремяСтоянкиВПунктеВСек;
				Объект.ДатаИВремяОтправленияПлан = СтрокаПункта.УбытиеПлан;
			КонецЕсли;
			
			ПредПрибытиеПлан = СтрокаПункта.ПрибытиеПлан;
			ПредУбытиеПлан   = СтрокаПункта.УбытиеПлан;
			ПредВремя        = СтрокаПункта.Время;
			
		ИначеЕсли Сч = 1 И Не флЕстьПерваяСтрока Тогда
			ТекПрибытиеПлан = ПредУбытиеПлан + ((ПредВремя - Цел(ПредВремя))*6000 + Цел(ПредВремя)*3600);
			
			Если Объект.ПересчетВремени = 1 Тогда 
				Если ЗначениеЗаполнено(СтрокаПункта.ПрибытиеПлан)
					И ЗначениеЗаполнено(ТекПрибытиеПлан) Тогда
					РазницаВремени = СтрокаПункта.ПрибытиеПлан - ТекПрибытиеПлан;
					РазницаЧас = Цел(РазницаВремени/3600);
					РазницаМин = Цел((РазницаВремени - РазницаЧас*3600) / 60);
					РазницаВремени = РазницаЧас + РазницаМин/100;
					
					СтрокаПункта.Ожидание = РазницаВремени;
				Иначе
					СтрокаПункта.Ожидание = 0;
				КонецЕсли;
			Иначе 
				СтрокаПункта.ПрибытиеПлан = уатЗащищенныеФункцииСервер.СложитьВремя(ТекПрибытиеПлан, СтрокаПункта.Ожидание);
			КонецЕсли;
			
			СтрокаПункта.УбытиеПлан = СтрокаПункта.ПрибытиеПлан + ОбщееВремяСтоянкиВПунктеВСек;
			
			ПредПрибытиеПлан = СтрокаПункта.ПрибытиеПлан;
			ПредУбытиеПлан   = СтрокаПункта.УбытиеПлан;
			ПредВремя        = СтрокаПункта.Время;
			
		Иначе 
			СтрокаПункта.УбытиеПлан   = ПредУбытиеПлан;
			СтрокаПункта.ПрибытиеПлан = ПредПрибытиеПлан;
			СтрокаПункта.Время    = ПредВремя;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьПлановоеВремяПоЗаказам(ДатаВыездаНаМаршрут=Неопределено)
	
	ПредПункт = Неопределено;
	Итератор  = 0;
	СоответствиеПунктов = Новый Соответствие();
	Для Каждого ТекСтрока Из Объект.Заказы Цикл
		Если Не ТекСтрока.Пункт = ПредПункт Тогда
			Итератор = Итератор + 1;
			СоответствиеПунктов.Вставить(Итератор, ТекСтрока.ОкноС);
		Иначе
			ПрибытиеПлан  = Мин(СоответствиеПунктов.Получить(Итератор),  ТекСтрока.ОкноС);
			СоответствиеПунктов.Вставить(Итератор, ПрибытиеПлан);
		КонецЕсли;
		ПредПункт = ТекСтрока.Пункт;
	КонецЦикла;
	
	ПредПрибытиеПлан             = Неопределено;
	ПредУбытиеПлан               = Неопределено;
	ПредВремя                    = Неопределено;
	ПредПункт                    = Неопределено;
	ПредЗаказАнализ              = Неопределено;
	ПредПунктАнализ              = Неопределено;
	мсвСтрокиОбработка           = Новый Массив();
	ОбщееВремяСтоянкиВПунктеВСек = 0;
	флЕстьПерваяСтрока           = Ложь;
	
	Итератор = 0;
	Для Каждого ТекСтрока Из Объект.Заказы Цикл 
		Если Не ТекСтрока.Пункт = ПредПункт Тогда 
			Итератор = Итератор + 1;
			
			Для Сч = 1 По мсвСтрокиОбработка.Количество() Цикл 
				СтрокаПункта = мсвСтрокиОбработка.Получить(Сч-1);
				Если Сч = 1 И флЕстьПерваяСтрока Тогда 
					
					СтрокаПункта.ПрибытиеПлан = СоответствиеПунктов.Получить(Итератор-1);
					СтрокаПункта.УбытиеПлан   = СтрокаПункта.ПрибытиеПлан + ОбщееВремяСтоянкиВПунктеВСек;
					Объект.ДатаИВремяОтправленияПлан = СтрокаПункта.УбытиеПлан;
					
					ПредПрибытиеПлан = СтрокаПункта.ПрибытиеПлан;
					ПредУбытиеПлан   = СтрокаПункта.УбытиеПлан;
					ПредВремя        = СтрокаПункта.Время;
										
				ИначеЕсли Сч = 1 И Не флЕстьПерваяСтрока Тогда
					СтрокаПункта.ПрибытиеПлан = СоответствиеПунктов.Получить(Итератор - 1);
					
					ТекПрибытиеПлан = ПредУбытиеПлан + ((ПредВремя - Цел(ПредВремя))*6000 + Цел(ПредВремя)*3600);
					РазницаВремени = СтрокаПункта.ПрибытиеПлан - ТекПрибытиеПлан;
					РазницаЧас = Цел(РазницаВремени / 3600);
					РазницаМин = Цел((РазницаВремени - РазницаЧас*3600) / 60);
					РазницаВремени = РазницаЧас + РазницаМин/100;
					
					Если РазницаВремени > 0 Тогда
						СтрокаПункта.Ожидание = РазницаВремени;
					Иначе
						СтрокаПункта.ПрибытиеПлан = ТекПрибытиеПлан;
						СтрокаПункта.Ожидание = 0;
					КонецЕсли;
					
					СтрокаПункта.УбытиеПлан = СтрокаПункта.ПрибытиеПлан + ОбщееВремяСтоянкиВПунктеВСек;
					
					ПредПрибытиеПлан = СтрокаПункта.ПрибытиеПлан;
					ПредУбытиеПлан   = СтрокаПункта.УбытиеПлан;
					ПредВремя        = СтрокаПункта.Время;
					
				Иначе 
					СтрокаПункта.УбытиеПлан   = ПредУбытиеПлан;
					СтрокаПункта.ПрибытиеПлан = ПредПрибытиеПлан;
					СтрокаПункта.Время    = ПредВремя;
				КонецЕсли;
			КонецЦикла;

			ПредПункт = ТекСтрока.Пункт;
			ПредЗаказАнализ = Неопределено;
			ПредПунктАнализ = Неопределено;
			мсвСтрокиОбработка = Новый Массив();
			ОбщееВремяСтоянкиВПунктеВСек = 0;
			флЕстьПерваяСтрока = Ложь;
		КонецЕсли;
		
		ТекСтрока.ПрибытиеПлан = СоответствиеПунктов.Получить(Итератор);
		мсвСтрокиОбработка.Добавить(ТекСтрока);
		Если ТекСтрока.НомерСтроки = 1 Тогда 
			флЕстьПерваяСтрока = Истина;
		КонецЕсли;
		
		Если Не ТекСтрока.Пункт = ПредПунктАнализ Тогда 
			ПредПунктАнализ = ТекСтрока.Пункт;
			ОбщееВремяСтоянкиВПунктеВСек = ОбщееВремяСтоянкиВПунктеВСек + ((ТекСтрока.СтоянкаИзПункта - Цел(ТекСтрока.СтоянкаИзПункта))*6000 + Цел(ТекСтрока.СтоянкаИзПункта)*3600);
		КонецЕсли;
		
		Если Не ТекСтрока.ЗаказГрузоотправителя = ПредЗаказАнализ Тогда 
			ПредЗаказАнализ = ТекСтрока.ЗаказГрузоотправителя;
			ОбщееВремяСтоянкиВПунктеВСек = ОбщееВремяСтоянкиВПунктеВСек + ((ТекСтрока.Стоянка - Цел(ТекСтрока.Стоянка))*6000 + Цел(ТекСтрока.Стоянка)*3600);
		КонецЕсли;
	КонецЦикла;

	Для Сч = 1 По мсвСтрокиОбработка.Количество() Цикл 
		СтрокаПункта = мсвСтрокиОбработка.Получить(Сч - 1);
		Если Сч = 1 И флЕстьПерваяСтрока Тогда 
			СтрокаПункта.УбытиеПлан          = СтрокаПункта.ПрибытиеПлан + ОбщееВремяСтоянкиВПунктеВСек;
			Объект.ДатаИВремяОтправленияПлан = СтрокаПункта.УбытиеПлан;
			
			ПредПрибытиеПлан = СтрокаПункта.ПрибытиеПлан;
			ПредУбытиеПлан   = СтрокаПункта.УбытиеПлан;
			ПредВремя        = СтрокаПункта.Время;
			
		ИначеЕсли Сч = 1 И Не флЕстьПерваяСтрока Тогда
			
			ТекПрибытиеПлан = ПредУбытиеПлан + ((ПредВремя - Цел(ПредВремя))*6000 + Цел(ПредВремя)*3600);

			РазницаВремени = СтрокаПункта.ПрибытиеПлан - ТекПрибытиеПлан;
			РазницаЧас = Цел(РазницаВремени/3600);
			РазницаМин = Цел((РазницаВремени - РазницаЧас*3600) / 60);
			РазницаВремени = РазницаЧас + РазницаМин/100;
			
			Если РазницаВремени > 0 Тогда
				СтрокаПункта.Ожидание = РазницаВремени;
			Иначе
				СтрокаПункта.ПрибытиеПлан = ТекПрибытиеПлан;
				СтрокаПункта.Ожидание = 0;
			КонецЕсли;
			
			СтрокаПункта.УбытиеПлан = СтрокаПункта.ПрибытиеПлан + ОбщееВремяСтоянкиВПунктеВСек;
			
			ПредПрибытиеПлан = СтрокаПункта.ПрибытиеПлан;
			ПредУбытиеПлан   = СтрокаПункта.УбытиеПлан;
			ПредВремя        = СтрокаПункта.Время;
			
		Иначе 
			СтрокаПункта.УбытиеПлан   = ПредУбытиеПлан;
			СтрокаПункта.ПрибытиеПлан = ПредПрибытиеПлан;
			СтрокаПункта.Время    = ПредВремя;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьВремяВСтроке(ТекСтрока)
	
	Если ТекСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТекВремяСтроки <> Неопределено Тогда
		УбытиеПлан   = 0;
		ПрибытиеПлан = 0;
		Стоянка      = 0;
		Время        = 0;
		Ожидание     = 0;
		
		ТекВремяСтроки.Свойство("УбытиеПлан",   УбытиеПлан);
		ТекВремяСтроки.Свойство("ПрибытиеПлан", ПрибытиеПлан);
		ТекВремяСтроки.Свойство("Стоянка",      Стоянка);
		ТекВремяСтроки.Свойство("Время",        Время);
		ТекВремяСтроки.Свойство("Ожидание",     Ожидание);
		ТекВремяСтроки = Неопределено;
		
		РазницаВремени = 0;
		Если ТекСтрока.УбытиеПлан <> УбытиеПлан Тогда
			РазницаВремени = ТекСтрока.УбытиеПлан - УбытиеПлан;
			ТекСтрока.ПрибытиеПлан = ТекСтрока.ПрибытиеПлан + РазницаВремени;
			
		ИначеЕсли ТекСтрока.ПрибытиеПлан <> ПрибытиеПлан Тогда
			РазницаВремени = ТекСтрока.ПрибытиеПлан - ПрибытиеПлан;
			
		ИначеЕсли ТекСтрока.Ожидание <> Ожидание Тогда
			РазницаВремени = уатЗащищенныеФункцииСервер.СложитьВремя(ТекСтрока.Ожидание, -Ожидание);
			
			Если Объект.Заказы[0] <> ТекСтрока Тогда 
				РазницаВремениСек = Цел(РазницаВремени) * 60 * 60 + ((РазницаВремени - Цел(РазницаВремени)) * 100 * 60);
				ТекСтрока.ПрибытиеПлан = ТекСтрока.ПрибытиеПлан + РазницаВремениСек;
			КонецЕсли;
			
		ИначеЕсли ТекСтрока.Стоянка <> Стоянка Тогда
			РазницаВремени = ((ТекСтрока.Стоянка - Цел(ТекСтрока.Стоянка))*6000 + Цел(ТекСтрока.Стоянка)*3600)-Стоянка;
			
		КонецЕсли;
		
 		Если Объект.ПересчетВремени = 0 ИЛИ (Объект.Заказы.Индекс(ТекСтрока) = 0) Тогда 
			Объект.ДатаИВремяОтправленияПлан = Объект.ДатаИВремяОтправленияПлан + РазницаВремени;
		КонецЕсли;
		
		Если ПредДатаИВремяОтправленияПлан <> НачалоДня(Объект.ДатаИВремяОтправленияПлан) Тогда
			Если НЕ (Объект.ВидПеревозки = ПредопределенноеЗначение("Справочник.уатВидыПеревозок.Авиационная") 
				Или Объект.ВидПеревозки = ПредопределенноеЗначение("Справочник.уатВидыПеревозок.Железнодорожная")
				Или Объект.ВидПеревозки = ПредопределенноеЗначение("Справочник.уатВидыПеревозок.Морская")) Тогда
				Если Объект.ПринадлежностьПеревозки = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное") тогда
					// заполняем водителей
					уатОбщегоНазначения.ЗаполнитьЭкипажТС(Объект.ТС, Объект.Организация, Объект.ДатаИВремяОтправленияПлан,
						Объект.Водитель1, Объект.Водитель2, Объект.Сотрудник1, Объект.Сотрудник2,
						Ложь, Объект.ДатаИВремяОтправленияПлан + 24*3600, Истина);
						
					ПредДатаИВремяОтправленияПлан = Объект.ДатаИВремяОтправленияПлан;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ДатаИВремяОтправленияПлан)	И Объект.Заказы.Количество() <> 0 Тогда
		Если ЗначениеЗаполнено(Объект.Заказы[0].УбытиеПлан) Тогда
			Объект.ДатаИВремяОтправленияПлан = Объект.Заказы[0].УбытиеПлан;
		Иначе
			Объект.ДатаИВремяОтправленияПлан = Объект.Заказы[0].ПрибытиеПлан;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыДеревоИзменитьДатыВШапке()
	
	ВсегоЭлементов   = 0;
	ВыполненоСтрок   = 0;
	МинимальнаяДата  = '39991231';
	МаксимальнаяДата = '00010101';
	
	ПолучитьДанныеДляИзмененияДатВШапке(ЗаказыДерево.ПолучитьЭлементы(), ВсегоЭлементов, ВыполненоСтрок, МинимальнаяДата, МаксимальнаяДата);
	
	Если МинимальнаяДата = '39991231' Тогда 
		МинимальнаяДата = '00010101';
	КонецЕсли;
	
	Если ВсегоЭлементов = 0 Тогда
		Объект.ДатаИВремяОтправленияПлан = '00010101';
	КонецЕсли;
	
	Если ВыполненоСтрок = 0 Тогда 
		Объект.Выполнен = Ложь;
		Отправлен       = Ложь;
		
		Объект.ДатаИВремяОтправления = '00010101';
		Объект.ДатаИВремяВыполнения  = '00010101';
		
	ИначеЕсли ВыполненоСтрок < ВсегоЭлементов Тогда 
		Объект.Выполнен = Ложь;
		Отправлен       = Истина;
		
		Объект.ДатаИВремяОтправления = НачалоМинуты(МинимальнаяДата);
		Объект.ДатаИВремяВыполнения  = '00010101';
		
	Иначе 
		Объект.Выполнен = Истина;
		Отправлен       = Истина;
		
		Объект.ДатаИВремяОтправления = НачалоМинуты(МинимальнаяДата);
		Объект.ДатаИВремяВыполнения  = НачалоМинуты(МаксимальнаяДата);
		
	КонецЕсли;
	
	УстановитьВидимостьИДоступностьЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДанныеДляИзмененияДатВШапке(Знач УзелОбхода, КоличествоЭлементов, КоличествоВыполненных, МинимальнаяДата, МаксимальнаяДата)
	
	Для Каждого ТекЭлемент Из УзелОбхода Цикл 
		КоличествоЭлементов = КоличествоЭлементов + 1;
		
		Если ТекЭлемент.Выполнен Тогда 
			КоличествоВыполненных = КоличествоВыполненных + 1;
		КонецЕсли;
		
		Если флПланФакт Тогда
			Если ТекЭлемент.ПрибытиеФакт <> '00010101' И ТекЭлемент.ПрибытиеФакт < МинимальнаяДата Тогда 
				МинимальнаяДата = ТекЭлемент.ПрибытиеФакт;
			КонецЕсли;
			Если ТекЭлемент.УбытиеФакт <> '00010101' И ТекЭлемент.УбытиеФакт < МинимальнаяДата Тогда 
				МинимальнаяДата = ТекЭлемент.УбытиеФакт;
			КонецЕсли;
			Если ТекЭлемент.ПрибытиеФакт <> '00010101' И ТекЭлемент.ПрибытиеФакт > МаксимальнаяДата Тогда 
				МаксимальнаяДата = ТекЭлемент.ПрибытиеФакт;
			КонецЕсли;
			Если ТекЭлемент.УбытиеФакт <> '00010101' И ТекЭлемент.УбытиеФакт > МаксимальнаяДата Тогда 
				МаксимальнаяДата = ТекЭлемент.УбытиеФакт;
			КонецЕсли;
		Иначе
			Если ТекЭлемент.ПрибытиеПлан <> '00010101' И ТекЭлемент.ПрибытиеПлан < МинимальнаяДата Тогда 
				МинимальнаяДата = ТекЭлемент.ПрибытиеПлан;
			КонецЕсли;
			Если ТекЭлемент.УбытиеПлан <> '00010101' И ТекЭлемент.УбытиеПлан < МинимальнаяДата Тогда 
				МинимальнаяДата = ТекЭлемент.УбытиеПлан;
			КонецЕсли;
			Если ТекЭлемент.ПрибытиеПлан <> '00010101' И ТекЭлемент.ПрибытиеПлан > МаксимальнаяДата Тогда 
				МаксимальнаяДата = ТекЭлемент.ПрибытиеПлан;
			КонецЕсли;
			Если ТекЭлемент.УбытиеПлан <> '00010101' И ТекЭлемент.УбытиеПлан > МаксимальнаяДата Тогда 
				МаксимальнаяДата = ТекЭлемент.УбытиеПлан;
			КонецЕсли;
		КонецЕсли;
				
		ПолучитьДанныеДляИзмененияДатВШапке(ТекЭлемент.ПолучитьЭлементы(), КоличествоЭлементов, КоличествоВыполненных, МинимальнаяДата, МаксимальнаяДата); 
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыИзменитьДатыВШапке()
	
	КоличествоВыполненных = Объект.Заказы.НайтиСтроки(Новый Структура("Выполнен", Истина)).Количество();
	
	Если КоличествоВыполненных = 0 Тогда 
		Объект.Выполнен = Ложь;
		Отправлен       = Ложь;
		
		Объект.ДатаИВремяОтправления = '00010101';
		Объект.ДатаИВремяВыполнения  = '00010101';
		
	ИначеЕсли КоличествоВыполненных < Объект.Заказы.Количество() Тогда 
		Объект.Выполнен = Ложь;
		Отправлен       = Истина;
		
		МинДатаПоЗаказам = '39991231';
		Для Каждого ТекСтрока Из Объект.Заказы Цикл 
			Если флПланФакт Тогда
				Если ТекСтрока.ПрибытиеФакт <> '00010101' И ТекСтрока.ПрибытиеФакт < МинДатаПоЗаказам Тогда 
					МинДатаПоЗаказам = ТекСтрока.ПрибытиеФакт;
				КонецЕсли;
				Если Не ТекСтрока.УбытиеФакт = '00010101' И ТекСтрока.УбытиеФакт < МинДатаПоЗаказам Тогда 
					МинДатаПоЗаказам = ТекСтрока.УбытиеФакт;
				КонецЕсли;
			Иначе
				Если ТекСтрока.ПрибытиеПлан <> '00010101' И ТекСтрока.ПрибытиеПлан < МинДатаПоЗаказам Тогда 
					МинДатаПоЗаказам = ТекСтрока.ПрибытиеПлан;
				КонецЕсли;
				Если Не ТекСтрока.УбытиеПлан = '00010101' И ТекСтрока.УбытиеПлан < МинДатаПоЗаказам Тогда 
					МинДатаПоЗаказам = ТекСтрока.УбытиеПлан;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Объект.ДатаИВремяОтправления = ?(МинДатаПоЗаказам = '39991231', '00010101', НачалоМинуты(МинДатаПоЗаказам));
		Объект.ДатаИВремяВыполнения  = '00010101';
		
	Иначе 
		Объект.Выполнен = Истина;
		Отправлен       = Истина;
		
		МинДатаПоЗаказам  = '39991231';
		МаксДатаПоЗаказам = '00010101';
		Для Каждого ТекСтрока Из Объект.Заказы Цикл 
			Если флПланФакт Тогда
				Если ТекСтрока.ПрибытиеФакт <> '00010101' И ТекСтрока.ПрибытиеФакт < МинДатаПоЗаказам Тогда 
					МинДатаПоЗаказам = ТекСтрока.ПрибытиеФакт;
				КонецЕсли;
				Если ТекСтрока.УбытиеФакт <> '00010101' И ТекСтрока.УбытиеФакт < МинДатаПоЗаказам Тогда 
					МинДатаПоЗаказам = ТекСтрока.УбытиеФакт;
				КонецЕсли;
				Если ТекСтрока.ПрибытиеФакт <> '00010101' И ТекСтрока.ПрибытиеФакт > МаксДатаПоЗаказам Тогда 
					МаксДатаПоЗаказам = ТекСтрока.ПрибытиеФакт;
				КонецЕсли;
				Если ТекСтрока.УбытиеФакт <> '00010101' И ТекСтрока.УбытиеФакт > МаксДатаПоЗаказам Тогда 
					МаксДатаПоЗаказам = ТекСтрока.УбытиеФакт;
				КонецЕсли;
			Иначе
				Если ТекСтрока.ПрибытиеПлан <> '00010101' И ТекСтрока.ПрибытиеПлан < МинДатаПоЗаказам Тогда 
					МинДатаПоЗаказам = ТекСтрока.ПрибытиеПлан;
				КонецЕсли;
				Если ТекСтрока.УбытиеПлан <> '00010101' И ТекСтрока.УбытиеПлан < МинДатаПоЗаказам Тогда 
					МинДатаПоЗаказам = ТекСтрока.УбытиеПлан;
				КонецЕсли;
				Если ТекСтрока.ПрибытиеПлан <> '00010101' И ТекСтрока.ПрибытиеПлан > МаксДатаПоЗаказам Тогда 
					МаксДатаПоЗаказам = ТекСтрока.ПрибытиеПлан;
				КонецЕсли;
				Если ТекСтрока.УбытиеПлан <> '00010101' И ТекСтрока.УбытиеПлан > МаксДатаПоЗаказам Тогда 
					МаксДатаПоЗаказам = ТекСтрока.УбытиеПлан;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Объект.ДатаИВремяОтправления = ?(МинДатаПоЗаказам = '39991231', '00010101', НачалоМинуты(МинДатаПоЗаказам));
		Объект.ДатаИВремяВыполнения  = НачалоМинуты(МаксДатаПоЗаказам);
		
	КонецЕсли;
	
	Если Объект.Заказы.Количество() = 0 Тогда
		Объект.ДатаИВремяОтправленияПлан = '00010101';
	КонецЕсли;
	
	УстановитьВидимостьИДоступностьЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВсегоВТЧОказываемыеУслуги()
	Для Каждого СтрокаТабличнойЧасти Из Объект.Доходы Цикл
		РассчитатьСуммуВсегоВстрокеТЧ(СтрокаТабличнойЧасти, "Факт", Ложь);
	КонецЦикла;
	ОбновитьПодвалДоходовРасходов("Доходы");
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВсегоВТЧПолучаемыеУслуги()
	Для Каждого СтрокаТабличнойЧасти Из Объект.Расходы Цикл
		РассчитатьСуммуВсегоВстрокеТЧ(СтрокаТабличнойЧасти,, Истина);
	КонецЦикла;
	ОбновитьПодвалДоходовРасходов("Расходы");
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуВсегоВстрокеТЧ(СтрокаТабличнойЧасти, ПланФакт = Неопределено, РасчетПлана = Истина)
	Если флИспользоватьПлановыеУслуги И РасчетПлана И (ПланФакт = Неопределено ИЛИ ПланФакт = "План") Тогда
		СтрокаТабличнойЧасти.ВсегоПлан = СтрокаТабличнойЧасти.СуммаПлан
			+ ?(СтрокаТабличнойЧасти.УчитыватьНДС И НЕ СтрокаТабличнойЧасти.СуммаВключаетНДС,
				СтрокаТабличнойЧасти.СуммаНДСПлан, 0);
	КонецЕсли;
	Если ПланФакт = Неопределено ИЛИ ПланФакт = "Факт" Тогда
		СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма
			+ ?(СтрокаТабличнойЧасти.УчитыватьНДС И НЕ СтрокаТабличнойЧасти.СуммаВключаетНДС, СтрокаТабличнойЧасти.СуммаНДС, 0);
	КонецЕсли;
КонецПроцедуры

// Процедура рассчитывает сумму в строке табличной части.
//
&НаКлиенте
Процедура РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти = Неопределено, ПланФакт = Неопределено, РасчетПлана = Истина, РасчетНДС = Истина)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Если флИспользоватьПлановыеУслуги И РасчетПлана И (ПланФакт = Неопределено ИЛИ ПланФакт = "План") Тогда
		СтрокаТабличнойЧасти.СуммаПлан = СтрокаТабличнойЧасти.КоличествоПлан * СтрокаТабличнойЧасти.ЦенаПлан;
	КонецЕсли;
	Если ПланФакт = Неопределено ИЛИ ПланФакт = "Факт" Тогда
		СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
	КонецЕсли;
	
	Если РасчетНДС Тогда
		РассчитатьСуммуНДС(СтрокаТабличнойЧасти, ПланФакт, РасчетПлана);
	КонецЕсли;
	
	РассчитатьСуммуВсегоВстрокеТЧ(СтрокаТабличнойЧасти, ПланФакт, РасчетПлана);
		
КонецПроцедуры // РассчитатьСуммуВСтрокеТабличнойЧасти()

// Рассчитывается сумма НДС в строке табличной части.
//
&НаКлиенте
Процедура РассчитатьСуммуНДС(СтрокаТабличнойЧасти, ПланФакт = Неопределено, РасчетПлана = Истина)
	
	СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	
	Если флИспользоватьПлановыеУслуги И РасчетПлана И (ПланФакт = Неопределено ИЛИ ПланФакт = "План") Тогда
		СтрокаТабличнойЧасти.СуммаНДСПлан = ?(СтрокаТабличнойЧасти.СуммаВключаетНДС, 
			СтрокаТабличнойЧасти.СуммаПлан - (СтрокаТабличнойЧасти.СуммаПлан) / ((СтавкаНДС + 100) / 100),
			СтрокаТабличнойЧасти.СуммаПлан * СтавкаНДС / 100);
	КонецЕсли;
	
	Если ПланФакт = Неопределено ИЛИ ПланФакт = "Факт" Тогда
		СтрокаТабличнойЧасти.СуммаНДС = ?(СтрокаТабличнойЧасти.СуммаВключаетНДС, 
			СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
			СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
	КонецЕсли;
			
КонецПроцедуры // РассчитатьСуммуНДС()

// Процедура при изменении контрагента.
//
&НаКлиенте
Процедура ПриИзмененииКонтрагента(СтрокаТабличнойЧасти, ИмяТабличнойЧасти)
	
	ДанныеОбменаССервером = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, Дата");
	ДанныеОбменаССервером.Организация = Объект.Организация;
	ДанныеОбменаССервером.Дата = Объект.Дата;
	ДанныеОбменаССервером.Контрагент = СтрокаТабличнойЧасти.Контрагент;
	ДанныеОбменаССервером.ДоговорКонтрагента = СтрокаТабличнойЧасти.Договор;
	
	// Получим данные с сервера
	ЗначенияДляЗаполнения = ИзменениеКонтрагентаСервер(ДанныеОбменаССервером, ИмяТабличнойЧасти = "Доходы");
	СтрокаТабличнойЧасти.Договор = ЗначенияДляЗаполнения.ДоговорКонтрагента;                           
	ПриИзмененииДоговора(СтрокаТабличнойЧасти, ИмяТабличнойЧасти);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ИзменениеКонтрагентаСервер(ДанныеДляЗаполнения, флПокупатель = Истина)
	Если флПокупатель = Истина Тогда
		СтруктураПараметровДляПолученияДоговора =
			уатЗаполнениеДокументов.ПолучитьСтруктуруПараметровДляПолученияДоговораПродажи();
	Иначе
		СтруктураПараметровДляПолученияДоговора =
			уатЗаполнениеДокументов.ПолучитьСтруктуруПараметровДляПолученияДоговораПокупки();
	КонецЕсли;
	
	ЗначенияДляЗаполнения = уатОбщегоНазначенияСервер.ПриИзмененииЗначенияКонтрагента(ДанныеДляЗаполнения,
							СтруктураПараметровДляПолученияДоговора);
	Возврат ЗначенияДляЗаполнения;
КонецФункции

// Получает набор данных с сервера для процедуры ДоговорПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеДоговорПриИзменении(Дата, Договор)
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
	"ВалютаРасчетов", Договор.ВалютаВзаиморасчетов);
	
	СтруктураДанные.Вставить(
	"ВалютаРасчетовКурсКратность",
	РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", Договор.ВалютаВзаиморасчетов)));
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеДоговорПриИзменении()

// Процедура при изменении договора.
//
&НаКлиенте
Процедура ПриИзмененииДоговора(ТекСтрокаТЧ, ИмяТЧ, ПересчитыватьСуммуПоКурсу = Ложь)
	
	СтруктураДанные = ПолучитьДанныеДоговорПриИзменении(Объект.Дата, ТекСтрокаТЧ.Договор);
	
	Если ЗначениеЗаполнено(ТекСтрокаТЧ.Договор)
		И ТекСтрокаТЧ.Валюта <> СтруктураДанные.ВалютаРасчетов Тогда
		Если ПересчитыватьСуммуПоКурсу Тогда
			СтруктураКурсНач = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ТекСтрокаТЧ.Валюта, Объект.Дата);
			ТекСтрокаТЧ.Цена = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрокаТЧ.Цена, 
				ТекСтрокаТЧ.Валюта,
				СтруктураДанные.ВалютаРасчетов,
				СтруктураКурсНач.Курс, 
				СтруктураДанные.ВалютаРасчетовКурсКратность.Курс, 
				СтруктураКурсНач.Кратность, 
				СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность);
																	
			РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрокаТЧ, ?(ИмяТЧ = "Доходы", "Факт", Неопределено), ИмяТЧ <> "Доходы");
		КонецЕсли;
		ТекСтрокаТЧ.Валюта = СтруктураДанные.ВалютаРасчетов;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеВалютыРеглУчета()
	
	Результат = Новый Структура("Валюта,Курс,Кратность");
	
	Результат.Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	
	КурсКратность = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(, Новый Структура("Валюта", Результат.Валюта));
	
	Результат.Курс      = ?(КурсКратность.Курс = 0, 1, КурсКратность.Курс);
	Результат.Кратность = ?(КурсКратность.Кратность = 0, 1, КурсКратность.Кратность);
	
	Возврат Результат;
	
КонецФункции // ПолучитьВалютуРеглУчета()

&НаСервере
Функция ПолучитьРекламацииДляСтрокиЗаказов(ЗаказГрузоотправителя)
	
	Рез = Новый СписокЗначений;
	
	Если НЕ уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП() Тогда
		Возврат Рез
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	уатРекламации_уэОбороты.Регистратор КАК Рекламация
	|ИЗ
	|	РегистрНакопления.уатРекламации_уэ.Обороты(
	|			,
	|			,
	|			Регистратор,
	|			ЗаказГрузоотправителя = &ЗаказГрузоотправителя
	|				И МаршрутныйЛист = &МаршрутныйЛист) КАК уатРекламации_уэОбороты");
	Запрос.УстановитьПараметр("ЗаказГрузоотправителя", ЗаказГрузоотправителя);
	Запрос.УстановитьПараметр("МаршрутныйЛист", Объект.Ссылка);
	мсвРекламации = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Рекламация");
	
	Для Каждого ТекРекл Из мсвРекламации Цикл
		Рез.Добавить(ТекРекл, "№" + СокрЛП(ТекРекл.Номер) + " от " + Формат(ТекРекл.Дата, "ДФ=dd.MM.yyyy"));
	КонецЦикла;
	
	Возврат Рез;
КонецФункции

&НаКлиенте
Функция ПолучитьСписокЗаказовМЛ()
	СписокЗаказы = Новый СписокЗначений;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя") И РежимОтображенияДерево Тогда
		Для Каждого ТекПункт Из ЗаказыДерево.ПолучитьЭлементы() Цикл
			Для Каждого ТекЗаказ Из ТекПункт.ПолучитьЭлементы() Цикл
				Если ЗначениеЗаполнено(ТекЗаказ.ПунктЗаказНоменклатура)
					И СписокЗаказы.НайтиПоЗначению(ТекЗаказ.ПунктЗаказНоменклатура) = Неопределено Тогда
					
					СписокЗаказы.Добавить(ТекЗаказ.ПунктЗаказНоменклатура);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	Иначе
		Для Каждого ТекСтрока Из Объект.Заказы Цикл
			Если ЗначениеЗаполнено(ТекСтрока.ЗаказГрузоотправителя)
				И СписокЗаказы.НайтиПоЗначению(ТекСтрока.ЗаказГрузоотправителя) = Неопределено Тогда
				
				СписокЗаказы.Добавить(ТекСтрока.ЗаказГрузоотправителя);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат СписокЗаказы;
КонецФункции

&НаСервере
Процедура ОбновитьПараметрВыработкиВременныйОказ()
	Для Каждого СтрокаТабличнойЧасти Из Объект.Доходы Цикл
		Если СтрокаТабличнойЧасти.Тариф.МетодРасчета = Перечисления.уатМетодыРасчетаПоТарифам.ПроцентомОтСуммы Тогда
			СтрокаТабличнойЧасти.ПараметрВыработки = Справочники.уатПараметрыВыработки.Наценка;
		Иначе
			СтрокаТабличнойЧасти.ПараметрВыработки = СтрокаТабличнойЧасти.Тариф.ПараметрВыработки;
		КонецЕсли;
		СтрокаТабличнойЧасти.ПараметрВыработкиВременный = СтрокаТабличнойЧасти.ПараметрВыработки.Временный;
		Если СтрокаТабличнойЧасти.ПараметрВыработкиВременный Тогда
			СтрокаТабличнойЧасти.КоличествоВыработка = уатОбщегоНазначения.уатВремяВЧЧ_ММ(СтрокаТабличнойЧасти.Количество*3600);
		Иначе
			СтрокаТабличнойЧасти.КоличествоВыработка = СтрокаТабличнойЧасти.Количество;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОбновитьПараметрВыработкиВременныйПолуч()
	Для Каждого СтрокаТабличнойЧасти Из Объект.Расходы Цикл
		Если СтрокаТабличнойЧасти.Тариф <> Неопределено Тогда
			Если СтрокаТабличнойЧасти.Тариф.МетодРасчета = Перечисления.уатМетодыРасчетаПоТарифам.ПроцентомОтСуммы Тогда
				СтрокаТабличнойЧасти.ПараметрВыработки = Справочники.уатПараметрыВыработки.Наценка;
			Иначе
				СтрокаТабличнойЧасти.ПараметрВыработки = СтрокаТабличнойЧасти.Тариф.ПараметрВыработки;
			КонецЕсли;
		КонецЕсли;
		СтрокаТабличнойЧасти.ПараметрВыработкиВременный = СтрокаТабличнойЧасти.ПараметрВыработки.Временный;
		Если СтрокаТабличнойЧасти.ПараметрВыработкиВременный Тогда
			СтрокаТабличнойЧасти.КоличествоВыработка = уатОбщегоНазначения.уатВремяВЧЧ_ММ(СтрокаТабличнойЧасти.Количество*3600);
			СтрокаТабличнойЧасти.КоличествоВыработкаПлан = уатОбщегоНазначения.уатВремяВЧЧ_ММ(СтрокаТабличнойЧасти.КоличествоПлан*3600);
		Иначе
			СтрокаТабличнойЧасти.КоличествоВыработка = СтрокаТабличнойЧасти.Количество;
			СтрокаТабличнойЧасти.КоличествоВыработкаПлан = СтрокаТабличнойЧасти.КоличествоПлан;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФорматРедактированияКоличествоВыработкиОказ()
	ТекСтрока = Элементы.ОказываемыеУслуги.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекСтрока.ПараметрВыработкиВременный Тогда
		Элементы.ОказываемыеУслугиКоличество.ФорматРедактирования = "ЧДЦ=2; ЧРД=:";
	Иначе
		Элементы.ОказываемыеУслугиКоличество.ФорматРедактирования = "";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФорматРедактированияКоличествоВыработкиПолуч()
	ТекСтрока = Элементы.ПолучаемыеУслуги.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекСтрока.ПараметрВыработкиВременный Тогда
		Элементы.ПолучаемыеУслугиКоличество.ФорматРедактирования = "ЧДЦ=2; ЧРД=:";
		Элементы.ПолучаемыеУслугиКоличествоПлан.ФорматРедактирования = "ЧДЦ=2; ЧРД=:";
	Иначе
		Элементы.ПолучаемыеУслугиКоличество.ФорматРедактирования = "";
		Элементы.ПолучаемыеУслугиКоличествоПлан.ФорматРедактирования = "";
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУслугиПоШаблонуСервер(Шаблон)
	ИмяТЧ = ?(Элементы.ГруппаСтраницыОсн.ТекущаяСтраница = Элементы.ГруппаСтраницаОснОказываемыеУслуги,
		"Доходы", "Расходы");
	
	УчитыватьНДС = ПолучитьПраваИНастройкиПользователя(Объект.Организация, "УчитыватьНДС");
	СуммаВключаетНДС = ПолучитьПраваИНастройкиПользователя(Объект.Организация, "СуммаВключаетНДС");
	
	ОсновнаяСтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
		ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнаяСтавкаНДС");
	
	Для Каждого ТекСтрока Из Шаблон.Услуги Цикл
		НоваяСтрока = Объект[ИмяТЧ].Добавить();
		НоваяСтрока.Номенклатура = ТекСтрока.Номенклатура;
		НоваяСтрока.Количество   = ТекСтрока.Количество;
		Если ИмяТЧ = "Расходы" И флИспользоватьПлановыеУслуги Тогда
			НоваяСтрока.КоличествоПлан = ТекСтрока.Количество;
		КонецЕсли;
		НоваяСтрока.УчитыватьНДС     = УчитыватьНДС;
		НоваяСтрока.СуммаВключаетНДС = СуммаВключаетНДС;
		Если УчитыватьНДС Тогда
			Если ЗначениеЗаполнено(НоваяСтрока.Номенклатура.СтавкаНДС) Тогда
				НоваяСтрока.СтавкаНДС = НоваяСтрока.Номенклатура.СтавкаНДС;
			Иначе
				НоваяСтрока.СтавкаНДС = ОсновнаяСтавкаНДС;
			КонецЕсли;
		КонецЕсли;
		НоваяСтрока.Содержание = НоваяСтрока.Номенклатура.НаименованиеПолное;
		Если ИмяТЧ = "Доходы" Тогда
			НоваяСтрока.СтатьяДоходов = уатОбщегоНазначенияСервер.СтатьяДоходовНоменклатуры(НоваяСтрока.Номенклатура);
		Иначе
			НоваяСтрока.СтатьяРасходов = уатОбщегоНазначенияСервер.СтатьяРасходовНоменклатуры(НоваяСтрока.Номенклатура);
		КонецЕсли;
	КонецЦикла;
	
	Если ИмяТЧ = "Доходы" Тогда
		ОбновитьПараметрВыработкиВременныйОказ();
	Иначе
		ОбновитьПараметрВыработкиВременныйПолуч();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОказываемыеУслугиОтвет(Результат, ДопПараметры) Экспорт
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Объект.Доходы.Очистить();
		РассчитатьСуммуДокумента();
		ВывестиСуммовыеИтогиДокумента();
		ОбновитьВсегоВТЧОказываемыеУслуги();
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПолучаемыеУслугиОтвет(Результат, ДопПараметры) Экспорт
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Объект.Расходы.Очистить();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура РассчитатьСтоимостьУслуги(ИмяТЧ, СтруктураСтроки, флПлан = Ложь)
	ТекСтрокаТЧ = Объект[ИмяТЧ][СтруктураСтроки.НомерСтроки-1];
	ТекЗаказ = ТекСтрокаТЧ.ЗаказНаТС;
	
	ДопПараметры = Новый Структура("Расстояние, ПробегСГрузом, ПробегПорожний, Время, ВесГруза, ОбъемГруза, КоличествоМест", 0, 0, 0, 0, 0, 0, 0);
	
	Если ЗначениеЗаполнено(ТекЗаказ) Тогда
		// Доп. таблица для определения порожнего пробега
		// считаем что машина идет порожняком, если таблица пуста
		тблГрузы = Новый ТаблицаЗначений;
		тблГрузы.Колонки.Добавить("Заказ");
		тблГрузы.Колонки.Добавить("Номенклатура");
		тблГрузы.Колонки.Добавить("ЕдиницаИзмерения");
		тблГрузы.Колонки.Добавить("Количество");
		
		Для Каждого ТекСтрока Из Объект.Заказы Цикл
			// обновляем доп. таблицу грузов для расчета порожнего пробега
			Если ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка
				ИЛИ ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка Тогда
				// добавляем строку груза
				НоваяСтрока = тблГрузы.Добавить();
				НоваяСтрока.Заказ = ТекСтрока.ЗаказГрузоотправителя;
				НоваяСтрока.Номенклатура = ТекСтрока.Номенклатура;
				НоваяСтрока.ЕдиницаИзмерения = ТекСтрока.ЕдиницаИзмерения;
				НоваяСтрока.Количество = ТекСтрока.Количество * ?(ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка, 1, -1);
				тблГрузы.Свернуть("Заказ, Номенклатура, ЕдиницаИзмерения", "Количество");
				// теперь нужно удалить строки с количеством = 0
				мсвСтрокиУдалить = тблГрузы.НайтиСтроки(Новый Структура("Количество", 0));
				Для Каждого ТекСтрокаГруз Из мсвСтрокиУдалить Цикл
					тблГрузы.Удалить(ТекСтрокаГруз);
				КонецЦикла;
			КонецЕсли;
			
			// обновляем пробег порожний и пробег с грузом
			Если тблГрузы.Количество() = 0 Тогда
				ДопПараметры.ПробегПорожний = ДопПараметры.ПробегПорожний + ТекСтрока.Расстояние;
			Иначе
				ДопПараметры.ПробегСГрузом = ДопПараметры.ПробегСГрузом + ТекСтрока.Расстояние;
			КонецЕсли;
			
			Если ТекСтрока.ЗаказГрузоотправителя = ТекЗаказ И
				ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка Тогда
				
				Если НЕ флПланФакт ИЛИ флПлан Тогда
					ДопПараметры.Расстояние = ДопПараметры.Расстояние + ТекСтрока.Расстояние;
					ДопПараметры.Время      = уатЗащищенныеФункцииСервер.СложитьВремя(ДопПараметры.Время, ТекСтрока.Время);
				Иначе
					ДопПараметры.Расстояние = ДопПараметры.Расстояние + ТекСтрока.РасстояниеФакт;
					ДопПараметры.Время      = уатЗащищенныеФункцииСервер.СложитьВремя(ДопПараметры.Время, ТекСтрока.ВремяФакт);
				КонецЕсли;
				
				ДопПараметры.ВесГруза = ДопПараметры.ВесГруза + ТекСтрока.ВесБрутто;
				ДопПараметры.ОбъемГруза = ДопПараметры.ОбъемГруза + ТекСтрока.Объем;
				ДопПараметры.КоличествоМест = ДопПараметры.КоличествоМест + ТекСтрока.КоличествоМест;
				
				//Если ЗначениеЗаполнено(ТекСтрока.Номенклатура)
				//	И ТипЗнч(ТекСтрока.Номенклатура) = Тип("СправочникСсылка.уатГрузовыеМеста_уэ") Тогда
				//	ДопПараметры.СтоимостьГруза = ДопПараметры.СтоимостьГруза + ТекСтрока.Номенклатура.Стоимость;
				//КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		ДопПараметры.Вставить("СтоимостьГруза", ТекЗаказ.СтоимостьГруза);
		ДопПараметры.Вставить("ВалютаТоваров",  ТекЗаказ.ВалютаТоваров);
	Иначе
		ДопПараметры.Расстояние = Объект.Расстояние;
		ДопПараметры.ПробегСГрузом = Объект.ПробегСГрузом;
		ДопПараметры.ПробегПорожний = Объект.ПробегПорожний;
		ДопПараметры.Время = Объект.ВремяВПути;
		ДопПараметры.ВесГруза = Объект.ВесБрутто;
		ДопПараметры.ОбъемГруза = Объект.Объем;
		ДопПараметры.КоличествоМест = Объект.КоличествоМест;
		
		ДопПараметры.Вставить("СтоимостьГруза", 0);
		ДопПараметры.Вставить("ВалютаТоваров",  Неопределено);
	КонецЕсли;
	
	Если ИмяТЧ = "Доходы" И ЗначениеЗаполнено(ТекЗаказ) Тогда
		ДопПараметры.Вставить("ВалютаДокумента",    ТекЗаказ.ВалютаДокумента);
		ДопПараметры.Вставить("КурсДокумента",      ТекЗаказ.КурсВзаиморасчетов);
		ДопПараметры.Вставить("КратностьДокумента", ТекЗаказ.КратностьВзаиморасчетов);
	ИначеЕсли ИмяТЧ = "Доходы" И НЕ ЗначениеЗаполнено(ТекЗаказ) Тогда
		ДопПараметры.Вставить("ВалютаДокумента", Неопределено);
		ДопПараметры.Вставить("КурсДокумента", 1);
		ДопПараметры.Вставить("КратностьДокумента", 1);
	ИначеЕсли ИмяТЧ = "Расходы" Тогда
		ДопПараметры.Вставить("ВалютаДокумента", ТекСтрокаТЧ.Договор.ВалютаВзаиморасчетов);
		СтруктураВалюта = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ТекСтрокаТЧ.Договор.ВалютаВзаиморасчетов, Объект.Дата);
		ДопПараметры.Вставить("КурсДокумента", СтруктураВалюта.Курс);
		ДопПараметры.Вставить("КратностьДокумента", СтруктураВалюта.Кратность);
	КонецЕсли;
	
	ДопПараметры.Вставить("Дата", Объект.Дата);
	ДопПараметры.Вставить("ИмяТЧ", ИмяТЧ);
	ДопПараметры.Вставить("НомерСтрокиДокумента", СтруктураСтроки.НомерСтроки-1);
	ДопПараметры.Вставить("Грузоподъемность", 0);
	ДопПараметры.Вставить("КлассГруза", 0);
	ДопПараметры.Вставить("ДокументОбъект", РеквизитФормыВЗначение("Объект"));
	Если ИмяТЧ = "Расходы" Тогда
		ДопПараметры.Вставить("СтатьяРасходов", ТекСтрокаТЧ.СтатьяРасходов);
	КонецЕсли;
	ДопПараметры.Вставить("ПересчетКоличества", Истина);
	ДопПараметры.Вставить("флПлан", флПлан);
	
	уатРасчетыПоТарифам_уэ.РассчитатьСтоимостьУслуги(СтруктураСтроки, ДопПараметры);
	
	СтруктураСтроки.Вставить("Валюта", ДопПараметры.ВалютаТарифа);
КонецПроцедуры

&НаКлиенте
Процедура ОказываемыеУслугиОбработкаВыбораВопрос(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		мсвСтрокУдалить = Объект.Доходы.НайтиСтроки(Новый Структура("ЗаказНаТС", ПредопределенноеЗначение("Документ.уатЗаказГрузоотправителя.ПустаяСсылка")));
		Для Каждого ТекСтрока Из мсвСтрокУдалить Цикл
			Объект.Доходы.Удалить(ТекСтрока);
		КонецЦикла;
		Модифицированность = Истина;
		
	ИначеЕсли Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
		
	КонецЕсли;
	
	ОказываемыеУслугиОбработкаВыбораЗавершение(ДопПараметры);
КонецПроцедуры

&НаКлиенте
Процедура ОказываемыеУслугиОбработкаВыбораЗавершение(ДопПараметры)
	мТаб = Неопределено;
	ДопПараметры.ВыбранноеЗначение.Свойство("ТаблицаРаспределения", мТаб);
	Для Каждого ТекСтрока Из мТаб Цикл
		НовСтрока = Объект.Доходы.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока, ТекСтрока);
		НовСтрока.ЗаказНаТС = ТекСтрока.ЗаказГрузоотправителя;
		
		//ТекДоговор = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(НовСтрока.ЗаказНаТС, "ДоговорКонтрагента");
		//СтруктураДанные = ПолучитьДанныеДоговорПриИзменении(Объект.Дата, ТекДоговор);
		//Если ЗначениеЗаполнено(ТекДоговор) И НовСтрока.Валюта <> СтруктураДанные.ВалютаРасчетов Тогда
		//	НовСтрока.Валюта = СтруктураДанные.ВалютаРасчетов;
		//КонецЕсли;
		//Если Не ЗначениеЗаполнено(НовСтрока.Валюта) Тогда 
		//	ДанныеВалютыРеглУчета = ПолучитьДанныеВалютыРеглУчета();
		//	НовСтрока.Валюта                  = ДанныеВалютыРеглУчета.Валюта;
		//КонецЕсли;
		
		НовСтрока.Содержание = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(ТекСтрока.Номенклатура, "НаименованиеПолное");
		РассчитатьСуммуВсегоВстрокеТЧ(НовСтрока, "Факт", Ложь);
		Модифицированность = Истина;
	КонецЦикла;
	//ОбновитьПараметрВыработкиВременныйОказ();
	ОбновитьДинамическиеПоля();
КонецПроцедуры

&НаКлиенте
Процедура ПолучаемыеУслугиОбработкаВыбораВопрос(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		мсвСтрокУдалить = Объект.Расходы.НайтиСтроки(Новый Структура("ЗаказНаТС", ПредопределенноеЗначение("Документ.уатЗаказГрузоотправителя.ПустаяСсылка")));
		Для Каждого ТекСтрока Из мсвСтрокУдалить Цикл
			Объект.Расходы.Удалить(ТекСтрока);
		КонецЦикла;
		Модифицированность = Истина;
	ИначеЕсли Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	ПолучаемыеУслугиОбработкаВыбораЗавершение(ДопПараметры);
КонецПроцедуры

&НаКлиенте
Процедура ПолучаемыеУслугиОбработкаВыбораЗавершение(ДопПараметры)
	мТаб = Неопределено;
	ДопПараметры.ВыбранноеЗначение.Свойство("ТаблицаРаспределения", мТаб);
	Для Каждого ТекСтрока Из мТаб Цикл
		НовСтрока = Объект.Расходы.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока, ТекСтрока);
		НовСтрока.ЗаказНаТС = ТекСтрока.ЗаказГрузоотправителя;
		НовСтрока.Содержание = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(ТекСтрока.Номенклатура, "НаименованиеПолное");
		
		//ПриИзмененииДоговора(НовСтрока, "Расходы", Истина);
		//Если Не ЗначениеЗаполнено(НовСтрока.Валюта) Тогда 
		//	ДанныеВалютыРеглУчета = ПолучитьДанныеВалютыРеглУчета();
		//	НовСтрока.Валюта      = ДанныеВалютыРеглУчета.Валюта;
		//КонецЕсли;
		
		РассчитатьСуммуВсегоВстрокеТЧ(НовСтрока,, Истина);
		Модифицированность = Истина;
	КонецЦикла;
	
	ОбновитьДинамическиеПоля();
КонецПроцедуры

&НаСервере
Процедура РассчитатьПоказателиСервер()
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя") И РежимОтображенияДерево Тогда
		ЗаписатьДеревоЗаказов();
	КонецЕсли;
	
	//ДокОбъект = РеквизитФормыВЗначение("Объект");
	//ДокОбъект.РассчитатьИтоговыеПоказатели(ОбщееВремяСтоянок);
	//ДокОбъект.РассчитатьСтатусДокумента();
	//ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
	Документы.уатМаршрутныйЛист.РассчитатьИтоговыеПоказатели(Объект);
	Документы.уатМаршрутныйЛист.РассчитатьСтатусДокумента(Объект);
	
	Если Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя")
		ИЛИ НЕ РежимОтображенияДерево Тогда 
		ПересчитатьПлановоеВремя();
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя") И РежимОтображенияДерево Тогда 
		ОбновитьДеревоЗаказовНаСервере();
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик  оповещения ответа на вопрос об изменении вида операции документа
//
// Параметры:
//  Результат	 -  результат выбора пользователя
//  Параметры	 -  значение дополнительных параметров
&НаКлиенте
Процедура ПослеЗакрытияВопросаОперация(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;
	
	ЗаказыДерево.ПолучитьЭлементы().Очистить();
	Объект.Заказы.Очистить();
	
	ВидОперации = "";
	Параметры.Свойство("ВидОперации", ВидОперации);
	Если ВидОперации = "ПоЗаказуГрузоотправителя" Тогда
		Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя");
		ОбновитьДеревоЗаказовНаСервере();
		Элементы.ЗаказыДерево.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВерхнийУровень;
	Иначе
		Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийМаршрутныйЛист.Произвольный");
		Объект.ПересчетВремени = 0;
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя") И РежимОтображенияДерево Тогда 
		ЗаказыДеревоИзменитьДатыВШапке();
	Иначе 
		ЗаказыИзменитьДатыВШапке();
	КонецЕсли;
	
	УстановитьВидимостьИДоступностьЭлементовФормы();
	
КонецПроцедуры // ПослеЗакрытияВопросаОперация()

&НаКлиенте
Процедура РассчитатьОказываемыеУслугиДействия()
	Если Объект.Доходы.Количество() > 0 Тогда
		флЕстьРучнойВвод = (Объект.Доходы.НайтиСтроки(Новый Структура("РучнойВвод", Истина)).Количество()>0);
		
		ТекстАнгл = "Tabular section will be cleared! Continue?";
		ТекстРус = "Табличная часть будет очищена! Продолжить?";
		
		Если флЕстьРучнойВвод Тогда
			ТекстАнгл = ТекстАнгл + "
				|Yes - save manual input data, No - clear manual input data.";
			ТекстРус = ТекстРус + "
				|Да - сохранить строки с ручным вводом, Нет - удалить строки с ручным вводом.";
			РежимДиалога = РежимДиалогаВопрос.ДаНетОтмена;
		Иначе
			РежимДиалога = РежимДиалогаВопрос.ОКОтмена;
		КонецЕсли;
		
		ТекстНСТР = НСтр("en='" + ТекстАнгл + "'; ru='" + ТекстРус + "'");
		ПоказатьВопрос(Новый ОписаниеОповещения("РассчитатьОказываемыеУслугиОтвет", ЭтотОбъект), ТекстНСТР, РежимДиалога);
	Иначе
		РассчитатьОказываемыеУслугиЗавершение();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьОказываемыеУслугиОтвет(Результат, ДопПараметры) Экспорт
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	флУдалитьРучнойВвод = (Результат = КодВозвратаДиалога.Нет);
	
	РассчитатьОказываемыеУслугиЗавершение(, флУдалитьРучнойВвод);
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьОказываемыеУслугиЗавершение(флСообщение = Ложь, флУдалитьРучнойВвод = Ложь)
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "МаршрутныйЛист.РасчетДоходов");
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
	Если флУдалитьРучнойВвод Тогда
		мсвСтрокиУдалить = Объект.Доходы.НайтиСтроки(Новый Структура("РучнойВвод", Истина));
		Для Каждого ТекСтрокаУдалить Из мсвСтрокиУдалить Цикл
			Объект.Доходы.Удалить(ТекСтрокаУдалить);
		КонецЦикла;
	КонецЕсли;
	
	РассчитатьВыработку();
	
	ДопПараметры = Новый Структура("ЗаполнятьТЧДоходы, ЗаполнятьТЧРасходы", Ложь, Ложь);
	СтруктураДокумента = уатОбщегоНазначенияКлиентСервер.СтруктураДокумента(Объект, "уатМаршрутныйЛист", ДопПараметры);
	РассчитатьУслугиСервер(СтруктураДокумента, "Доходы");
	уатРасчетыПоТарифамКлиентСервер_уэ.ЗаполнитьДоходыРасходыИзСтруктуры(Объект, СтруктураДокумента, "Доходы", "уатМаршрутныйЛист",, флСообщение);
	
	Модифицированность = Истина;
	
	РассчитатьСуммуДокумента();
	ОбновитьДинамическиеПоля();
КонецПроцедуры

&НаСервере
Процедура РассчитатьВыработку()
	
	Документы.уатМаршрутныйЛист.РассчитатьВыработкуПоЗаказам(Объект);
	ОтобразитьСводнуюВыработку();
	
КонецПроцедуры
	
&НаСервереБезКонтекста
Процедура РассчитатьУслугиСервер(СтруктураДокумента, ИмяТЧ, флПлан = Ложь)
	
	уатРасчетыПоТарифам_уэ.РассчитатьУслугиПоМаршрутномуЛисту(СтруктураДокумента, ИмяТЧ, СтруктураДокумента.Контрагент,, флПлан);
	
КонецПроцедуры

&НаСервере
Процедура НайтиСтрокиДереваПоGUID(НайденныеСтроки, СтруктураОтбора, Узлы)
	
	Для Каждого ТекУзел Из Узлы Цикл 
		Если СтруктураОтбора.GUIDСтроки = ТекУзел.GUIDСтроки Тогда 
			НайденныеСтроки.Добавить(ТекУзел);
		КонецЕсли;
		НайтиСтрокиДереваПоGUID(НайденныеСтроки, СтруктураОтбора, ТекУзел.ПолучитьЭлементы());
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПиктограммыПрисоединенныхФайлов()
	
	Если Не РаботаСПрисоединеннымиФайламиРазрешена Тогда 
		Возврат;
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя") И РежимОтображенияДерево Тогда 
		Для Каждого ТекПункт Из ЗаказыДерево.ПолучитьЭлементы() Цикл 
			ПФЗаказов = 0;
			Для Каждого ТекЗаказ Из ТекПункт.ПолучитьЭлементы() Цикл 
				ПФГрузов = 0;
				Для Каждого ТекГруз Из ТекЗаказ.ПолучитьЭлементы() Цикл 
					ТекГруз.ПрисоединенныеФайлы = 0;
					Если Не ЗначениеЗаполнено(ТекГруз.GUIDСтроки) Тогда 
						Продолжить;
					КонецЕсли;
					НайдСтроки = Объект.ПрисоединенныеФайлы.НайтиСтроки(Новый Структура("GUIDСтрокиЗаказа", ТекГруз.GUIDСтроки));
					Если НайдСтроки.Количество() Тогда 
						ТекГруз.ПрисоединенныеФайлы = 1;
						ПФГрузов = ПФГрузов + 1;
					КонецЕсли;
				КонецЦикла;
				
				ТекЗаказ.ПрисоединенныеФайлы = ?(ПФГрузов = 0, 0, 1);
				ПФЗаказов = ПФЗаказов + ?(ПФГрузов = 0, 0, 1);
				Если Не ЗначениеЗаполнено(ТекЗаказ.GUIDСтроки) Тогда 
					Продолжить;
				КонецЕсли;
				НайдСтроки = Объект.ПрисоединенныеФайлы.НайтиСтроки(Новый Структура("GUIDСтрокиЗаказа", ТекЗаказ.GUIDСтроки));
				Если НайдСтроки.Количество() Тогда 
					ТекЗаказ.ПрисоединенныеФайлы = 1;
					ПФЗаказов = ПФЗаказов + 1;
				КонецЕсли;
			КонецЦикла;
			
			ТекПункт.ПрисоединенныеФайлы = ?(ПФЗаказов = 0, 0, 1);
			Если Не ЗначениеЗаполнено(ТекПункт.GUIDСтроки) Тогда 
				Продолжить;
			КонецЕсли;
			НайдСтроки = Объект.ПрисоединенныеФайлы.НайтиСтроки(Новый Структура("GUIDСтрокиЗаказа", ТекПункт.GUIDСтроки));
			Если НайдСтроки.Количество() Тогда 
				ТекПункт.ПрисоединенныеФайлы = 1;
			КонецЕсли;
		КонецЦикла;
		
	Иначе 
		Для Каждого ТекСтрока Из Объект.Заказы Цикл 
			НайдСтроки = Объект.ПрисоединенныеФайлы.НайтиСтроки(Новый Структура("GUIDСтрокиЗаказа", ТекСтрока.GUIDСтроки));
			Если НайдСтроки.Количество() Тогда 
				ТекСтрока.ПрисоединенныеФайлы = 1;
			Иначе 
				ТекСтрока.ПрисоединенныеФайлы = 0;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПрисоединенныеФайлы(Знач мсвGUID)
	
	Если мсвGUID.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	СсылкиНаФайлы = Новый СписокЗначений();
	
	Для Каждого ТекGUID Из мсвGUID Цикл 
		НайдСтроки = Объект.ПрисоединенныеФайлы.НайтиСтроки(Новый Структура("GUIDСтрокиЗаказа", ТекGUID));
		Для Каждого ТекФайл Из НайдСтроки Цикл 
			СсылкиНаФайлы.Добавить(ТекФайл.ПрисоединенныйФайл);
		КонецЦикла;
	КонецЦикла;
	
	Если СсылкиНаФайлы.Количество() = 0 Тогда 
		Возврат;
		
	ИначеЕсли СсылкиНаФайлы.Количество() = 1 Тогда 
		ПоказатьПрисоединенныеФайлыПродолжение(СсылкиНаФайлы[0], Неопределено);
		
	Иначе 
		Оповещение = Новый ОписаниеОповещения("ПоказатьПрисоединенныеФайлыПродолжение", ЭтотОбъект);
		ТекстНСТР = НСтр("en='Select File';ru='Выбор файла'");
		СсылкиНаФайлы.ПоказатьВыборЭлемента(Оповещение, ТекстНСТР);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПрисоединенныеФайлыПродолжение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПредыдущийАдресФайла = "";
	
	ДанныеФайла = РаботаСФайламиСлужебныйВызовСервера.ДанныеФайлаДляОткрытия(ВыбранныйЭлемент.Значение, Неопределено,
		УникальныйИдентификатор, Неопределено, ПредыдущийАдресФайла);
	РаботаСФайламиКлиент.ОткрытьФайл(ДанныеФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьGUIDФайловРекурсивно(мсвGUID, КоллекцияОбхода)
	
	Для Каждого УзелОбхода Из КоллекцияОбхода Цикл 
		Если УзелОбхода.ПрисоединенныеФайлы = 1 Тогда 
			мсвGUID.Добавить(УзелОбхода.GUIDСтроки);
		КонецЕсли;
		ПолучитьGUIDФайловРекурсивно(мсвGUID, УзелОбхода.ПолучитьЭлементы());
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьРежимРаботыСПрисоединеннымиФайлами()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если Не Метаданные.НайтиПоПолномуИмени("Константа.уатИспользоватьМониторинг") = Неопределено И Константы.уатИспользоватьМониторинг.Получить() Тогда
		РаботаСПрисоединеннымиФайламиРазрешена             = Истина;
		Элементы.ЗаказыДеревоПрисоединенныеФайлы.Видимость = Истина;
		Элементы.ЗаказыПрисоединенныеФайлы.Видимость       = Истина;
	Иначе 
		РаботаСПрисоединеннымиФайламиРазрешена             = Ложь;
		Элементы.ЗаказыДеревоПрисоединенныеФайлы.Видимость = Ложь;
		Элементы.ЗаказыПрисоединенныеФайлы.Видимость       = Ложь;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНадписьИтоги()
	
	мОбщееВремяСтоянок = 0;
	мОбщийВесТары      = 0;
	
	Документы.уатМаршрутныйЛист.РассчитатьИтоговыеПоказатели(Объект, мОбщееВремяСтоянок, мОбщийВесТары);
	
	ПредставлениеЕдиницыИзмеренияВеса = Константы.уатЕдиницаИзмеренияВеса.Получить();
	
	ПарамВес = "" + Объект.ВесБрутто + " " + ПредставлениеЕдиницыИзмеренияВеса;
	
	Если ЗначениеЗаполнено(мОбщийВесТары) Тогда 
		ПарамВес = ПарамВес + " + " + мОбщийВесТары + " " + ПредставлениеЕдиницыИзмеренияВеса;
	КонецЕсли;
	
	НадписьВсегоПоДокументу = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 км / %2 / %3 / %4 %5 / %6 %7",
		Объект.Расстояние,
		Формат(уатЗащищенныеФункцииСервер.СложитьВремя(Объект.ВремяВПути, мОбщееВремяСтоянок), "ЧДЦ=2; ЧРД=:; ЧН=00:00; ЧГ="),
		ПарамВес,
		Объект.Объем,
		Константы.уатЕдиницаИзмеренияОбъема.Получить(),
		Объект.КоличествоМест,
		Справочники.уатВидыУпаковки_уэ.ПолучитьОсновнойВидУпаковки());
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТипЗначенияВодителей_уэ()
	Если Объект.ПринадлежностьПеревозки = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное") Тогда
		Элементы.Водитель1.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Сотрудники");
		Элементы.Водитель2.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Сотрудники");
		Элементы.Сотрудник1.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Сотрудники");
		Элементы.Сотрудник2.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Сотрудники");
	Иначе
		Элементы.Водитель1.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица");
		Элементы.Водитель2.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица");
		Элементы.Сотрудник1.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица");
		Элементы.Сотрудник2.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьМаршрутныеПоказатели()
	
	РассчитатьМаршрутныеПоказателиСервер();
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьМаршрутныеПоказателиСервер()
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя") И РежимОтображенияДерево Тогда
		ЗаписатьДеревоЗаказов();
	КонецЕсли;
	
	Объект.Расстояние = 0;
	Объект.ПробегСГрузом = 0;
	Объект.ПробегПорожний = 0;
	Объект.ВремяВПути = 0;
	ОбщееВремяСтоянок = 0;
	
	// Таблица для определения порожнего пробега
	// считаем что машина идет порожняком, если таблица пуста
	тблГрузы = Новый ТаблицаЗначений;
	тблГрузы.Колонки.Добавить("Заказ");
	тблГрузы.Колонки.Добавить("Номенклатура");
	тблГрузы.Колонки.Добавить("ЕдиницаИзмерения");
	тблГрузы.Колонки.Добавить("Количество");
	
	ПредПункт = Неопределено;
	ПредЗаказ = Неопределено;
	
	Для Каждого ТекСтрока Из Объект.Заказы Цикл
		
		Если Не ЗначениеЗаполнено(ТекСтрока.GUIDСтроки) Тогда 
			ТекСтрока.GUIDСтроки = Новый УникальныйИдентификатор();
		КонецЕсли;
		
		// обновляем таблицу грузов для расчета порожнего пробега
		Если (ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка
			ИЛИ ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка)
			И ТекСтрока.Количество > 0 Тогда
			
			// добавляем строку груза
			НоваяСтрока = тблГрузы.Добавить();
			НоваяСтрока.Заказ = ТекСтрока.ЗаказГрузоотправителя;
			НоваяСтрока.Номенклатура = ТекСтрока.Номенклатура;
			НоваяСтрока.ЕдиницаИзмерения = ТекСтрока.ЕдиницаИзмерения;
			НоваяСтрока.Количество = ТекСтрока.Количество * ?(ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка, 1, -1);
			тблГрузы.Свернуть("Заказ, Номенклатура, ЕдиницаИзмерения", "Количество");
			
			// теперь нужно удалить строки с количеством = 0
			мсвСтрокиУдалить = тблГрузы.НайтиСтроки(Новый Структура("Количество", 0));
			Для Каждого ТекСтрокаГруз Из мсвСтрокиУдалить Цикл
				тблГрузы.Удалить(ТекСтрокаГруз);
			КонецЦикла;
		КонецЕсли;
		
		// время стоянки, указываемое в заказах, прибавляется по каждому заказу
		Если ПредЗаказ <> ТекСтрока.ЗаказГрузоотправителя Тогда
			ОбщееВремяСтоянок = уатЗащищенныеФункцииСервер.СложитьВремя(ОбщееВремяСтоянок, ТекСтрока.Стоянка);
		КонецЕсли;
		
		// время в пути, время стоянки
		Если ПредПункт <> ТекСтрока.Пункт Тогда 
			// время стоянки, указываемое в пунктах, прибавляется для каждого пункта
			ОбщееВремяСтоянок = уатЗащищенныеФункцииСервер.СложитьВремя(ОбщееВремяСтоянок, ТекСтрока.СтоянкаИзПункта);
			
			Объект.ВремяВПути = уатЗащищенныеФункцииСервер.СложитьВремя(Объект.ВремяВПути, ТекСтрока.Время);
						
			ПредПункт  = ТекСтрока.Пункт;
		КонецЕсли;
		
		// Пробег порожний и пробег с грузом
		// расчет пункта в следующей строке
		СледПункт = ?(ТекСтрока.НомерСтроки < Объект.Заказы.Количество(), Объект.Заказы[ТекСтрока.НомерСтроки].Пункт, Неопределено);
		Если СледПункт <> ТекСтрока.Пункт Тогда
			Если тблГрузы.Количество() = 0 Тогда
				Объект.ПробегПорожний = Объект.ПробегПорожний + ТекСтрока.Расстояние;
			Иначе
				Объект.ПробегСГрузом = Объект.ПробегСГрузом + ТекСтрока.Расстояние;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// пробег общий
	Объект.Расстояние = Объект.ПробегПорожний + Объект.ПробегСГрузом;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораДеревоОтветНаВопрос(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ЗаполнитьДеревоЗаказовПоЗаказуНаТС(ДополнительныеПараметры.ВыбранноеЗначение);  
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда 
		ЗаполнитьДатыПредварительнымиДерево(ДополнительныеПараметры.ДатаПредОтправления, ДополнительныеПараметры.ДатаПредПрибытия);
	КонецЕсли;
	
	ОбновитьМаршрутныеПараметрыДереваЗаказов();
	ОбновитьГрузовыеПараметрыДереваЗаказов();  
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораСписокОтветНаВопрос(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	ЗаполнитьЗаказыПоЗаказуНаТСНаСервере(ДополнительныеПараметры.ВыбранноеЗначение);
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда 
		ЗаполнитьДатыПредварительными(ДополнительныеПараметры.ДатаПредОтправления, ДополнительныеПараметры.ДатаПредПрибытия);
	КонецЕсли;
	
	ПересчитатьПлановоеВремя();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗапретРедактированияЗакрытогоДокумента()
	РазрешитьРедактирование = ПолучитьПраваИНастройкиПользователя(ПользователиКлиентСервер.АвторизованныйПользователь(), "РазрешитьРедактированиеЗакрытыхДокументов");
	Если Объект.Проведен И Объект.ДатаЗакрытия <> '00010101' И НЕ РазрешитьРедактирование Тогда
		ТолькоПросмотр = Истина;
		Элементы.ФормаЗакрытие.Доступность = Ложь;
		Элементы.ФормаГруппаОперация.Доступность = Ложь;
		Элементы.ПринадлежностьПеревозки.ТолькоПросмотр = Истина;
		Элементы.ЗаказыДерево.ТолькоПросмотр = Истина;
		Элементы.ЗаказыДеревоГруппаКоманднаяПанель.Доступность = Ложь;
		Элементы.Заказы.ТолькоПросмотр = Истина;
		Элементы.ЗаказыГруппаКоманднаяПанель.Доступность = Ложь;
		Элементы.Заказы1.ТолькоПросмотр = Истина;
		Элементы.Заказы1ГруппаКоманднаяПанель.Доступность = Ложь;
		Элементы.ОказываемыеУслугиГруппаЗаполнить.Доступность = Ложь;
		Элементы.ПолучаемыеУслугиГруппаЗаполнить.Доступность = Ложь;
		Элементы.ПолучаемыеУслугиРасчитатьПолучаемыеУслуги.Доступность = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДинамическиеПоля(мсвСерверныеПроцедуры = Неопределено, ТолькоКлиентские = Ложь)
	
	Если ТолькоКлиентские <> Истина Тогда
		ОбновитьДинамическиеПоляСервер(мсвСерверныеПроцедуры);
	КонецЕсли;
	
	ОбновитьВсегоВТЧОказываемыеУслуги();
	ОбновитьВсегоВТЧПолучаемыеУслуги();
	ОбновитьПредставлениеНДСвТЧ("Доходы");
	ОбновитьПредставлениеНДСвТЧ("Расходы");
	
	УстановитьФорматРедактированияКоличествоВыработкиОказ();
	УстановитьФорматРедактированияКоличествоВыработкиПолуч();
	
	ВывестиСуммовыеИтогиДокумента();
	
КонецПроцедуры      

&НаСервере
Процедура ОбновитьДинамическиеПоляСервер(мсвСерверныеПроцедуры = Неопределено)
	
	Если мсвСерверныеПроцедуры <> Неопределено Тогда
		Для Каждого ТекСервПроц Из мсвСерверныеПроцедуры Цикл
			Выполнить(ТекСервПроц + "();");
		КонецЦикла;
	КонецЕсли;
	
	ОбновитьКоличествоВыработкиПодробноСервер();
	ОбновитьПараметрВыработкиВременныйОказ();
	ОбновитьПараметрВыработкиВременныйПолуч();
	ОбновитьПиктограммыПрисоединенныхФайлов();
	ОбновитьНадписьЗаказыДопВыработка();
	
	Если Объект.ВидОперации = Перечисления.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя
		И НЕ РежимОтображенияДерево Тогда 
		
		ЗаказыУстановитьСодержимоеЯчеек();
		ПересчитатьПлановоеВремя();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКомандПоGPS()
	
	Если Метаданные.Константы.Найти("уатИспользоватьМониторинг") = Неопределено Тогда 
		Элементы.ЗаказыДеревоЗаполнитьФактПосещение.Видимость = Ложь;
		Элементы.ЗаказыЗаполнитьФактПосещение.Видимость       = Ложь;
	Иначе 
		ИспользоватьМониторинг = Константы["уатИспользоватьМониторинг"].Получить();
		ИспользоватьМПВодителя = Константы["уатИспользоватьМобильноеПриложениеВодителя"].Получить();
		Если ИспользоватьМониторинг = Истина
			ИЛИ ИспользоватьМПВодителя = Истина Тогда 
			Элементы.ЗаказыДеревоЗаполнитьФактПосещение.Видимость = Истина;
			Элементы.ЗаказыЗаполнитьФактПосещение.Видимость       = Истина;
		Иначе 
			Элементы.ЗаказыДеревоЗаполнитьФактПосещение.Видимость = Ложь;
			Элементы.ЗаказыЗаполнитьФактПосещение.Видимость       = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьВремяРасстояниеМеждуПунктамиСервер()
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя") И РежимОтображенияДерево Тогда 
		ЗаписатьДеревоЗаказов();
	КонецЕсли;
	
	ДокОб = РеквизитФормыВЗначение("Объект");
	ДокОб.ОбновитьВремяРасстояниеМеждуПунктами(Истина);
	ЗначениеВРеквизитФормы(ДокОб, "Объект");
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗатратыПоЗаказуПеревозчикуОтветНаВопросОбОчисткеТЧ(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда 
		Объект.Расходы.Очистить();
		ЗаполнитьЗатратыПоЗаказуПеревозчикуПродолжение();
		
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда 
		ЗаполнитьЗатратыПоЗаказуПеревозчикуПродолжение();
		
	Иначе 
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗаказыПеревозчику(Знач ДокументСсылка)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МаршрутныйЛист", ДокументСсылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	уатЗаказПеревозчику_уэ.Ссылка
	|ИЗ
	|	Документ.уатЗаказПеревозчику_уэ КАК уатЗаказПеревозчику_уэ
	|ГДЕ
	|	уатЗаказПеревозчику_уэ.МаршрутныйЛист = &МаршрутныйЛист";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
КонецФункции // ПолучитьЗаказыПеревозчику()

&НаКлиенте
Процедура ЗаполнитьЗатратыПоЗаказуПеревозчикуПродолжение()
	
	мсвЗаказыПеревозчику = ПолучитьЗаказыПеревозчику(Объект.Ссылка);
	
	Если мсвЗаказыПеревозчику.Количество() = 0 Тогда 
		ТекстНСТР = НСтр("en='Not one of order to carrier on this routing list.';ru='Не найдено ни одного заказа перевозчику по данному маршрутному листу.'");
		ПоказатьПредупреждение(Неопределено, ТекстНСТР);
		
	ИначеЕсли мсвЗаказыПеревозчику.Количество() = 1 Тогда 
		ЗаполнитьЗатратыПоЗаказуПеревозчикуПослеВыбораЗаказа(мсвЗаказыПеревозчику[0], Неопределено);
		
	Иначе 
		ФормаВыбора = ПолучитьФорму("Документ.уатЗаказПеревозчику_уэ.ФормаВыбора",, ЭтотОбъект);
		
		ЭлементОтбора = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("Ссылка");
		ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.ВСписке;
		ЭлементОтбора.ПравоеЗначение   = мсвЗаказыПеревозчику;
		ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		ЭлементОтбора.Использование    = Истина;
		
		ФормаВыбора.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ЗаполнитьЗатратыПоЗаказуПеревозчикуПослеВыбораЗаказа", ЭтотОбъект);
		ФормаВыбора.РежимОткрытияОкна           = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
		
		ФормаВыбора.Открыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗатратыПоЗаказуПеревозчикуПослеВыбораЗаказа(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ЗаполнитьЗатратыПоЗаказуПеревозчикуПослеВыбораЗаказаСервер(РезультатЗакрытия);
	
	ОбновитьВсегоВТЧПолучаемыеУслуги();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗатратыПоЗаказуПеревозчикуПослеВыбораЗаказаСервер(Знач ЗаказПеревозчикуСсылка)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", ЗаказПеревозчикуСсылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатЗаказПеревозчику_уэ.Ссылка КАК ЗаказПеревозчику,
	|	уатЗаказПеревозчику_уэ.ВалютаДокумента КАК Валюта,
	|	уатЗаказПеревозчику_уэ.ДоговорКонтрагента КАК Договор,
	|	уатЗаказПеревозчику_уэ.Контрагент КАК Контрагент,
	|	уатЗаказПеревозчику_уэ.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	уатЗаказПеревозчику_уэ.УчитыватьНДС КАК УчитыватьНДС,
	|	СУММА(уатЗаказПеревозчику_уэЗатраты.Количество) КАК Количество,
	|	уатЗаказПеревозчику_уэЗатраты.Номенклатура КАК Номенклатура,
	|	ВЫРАЗИТЬ(СправочникНоменклатура.НаименованиеПолное КАК СТРОКА(1024)) КАК Содержание,
	|	уатЗаказПеревозчику_уэЗатраты.СтавкаНДС КАК СтавкаНДС,
	|	уатЗаказПеревозчику_уэЗатраты.СтатьяРасходов КАК СтатьяРасходов,
	|	СУММА(уатЗаказПеревозчику_уэЗатраты.Сумма) КАК Сумма,
	|	СУММА(уатЗаказПеревозчику_уэЗатраты.СуммаНДС) КАК СуммаНДС,
	|	уатЗаказПеревозчику_уэЗатраты.Тариф КАК Тариф,
	|	уатЗаказПеревозчику_уэЗатраты.Цена КАК Цена
	|ИЗ
	|	Документ.уатЗаказПеревозчику_уэ.Расходы КАК уатЗаказПеревозчику_уэЗатраты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатЗаказПеревозчику_уэ КАК уатЗаказПеревозчику_уэ
	|		ПО уатЗаказПеревозчику_уэЗатраты.Ссылка = уатЗаказПеревозчику_уэ.Ссылка
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО уатЗаказПеревозчику_уэЗатраты.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	уатЗаказПеревозчику_уэЗатраты.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	уатЗаказПеревозчику_уэЗатраты.Номенклатура,
	|	уатЗаказПеревозчику_уэЗатраты.СтавкаНДС,
	|	уатЗаказПеревозчику_уэЗатраты.СтатьяРасходов,
	|	уатЗаказПеревозчику_уэЗатраты.Тариф,
	|	уатЗаказПеревозчику_уэЗатраты.Цена,
	|	уатЗаказПеревозчику_уэ.УчитыватьНДС,
	|	уатЗаказПеревозчику_уэ.СуммаВключаетНДС,
	|	уатЗаказПеревозчику_уэ.Контрагент,
	|	уатЗаказПеревозчику_уэ.ДоговорКонтрагента,
	|	уатЗаказПеревозчику_уэ.ВалютаДокумента,
	|	уатЗаказПеревозчику_уэ.Ссылка,
	|	ВЫРАЗИТЬ(СправочникНоменклатура.НаименованиеПолное КАК СТРОКА(1024))";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		НовСтрока = Объект.Расходы.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока, Выборка);
		
		Если Не ЗначениеЗаполнено(НовСтрока.Валюта) Тогда 
			ДанныеВалютыРеглУчета = ПолучитьДанныеВалютыРеглУчета();
			НовСтрока.Валюта                  = ДанныеВалютыРеглУчета.Валюта;
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьПараметрВыработкиВременныйПолуч();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПрицеп(ТС, ИсключитьТС)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ВСоставе",    ТС);
	Запрос.УстановитьПараметр("ИсключитьТС", ИсключитьТС);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|	уатСоставТС.ТС КАК ТС
	|ИЗ
	|	РегистрСведений.уатСоставТС КАК уатСоставТС
	|ГДЕ
	|	НЕ уатСоставТС.ТС = &ИсключитьТС
	|	И уатСоставТС.ВСоставе = &ВСоставе
	|	И НЕ уатСоставТС.ТС.ЭтоГруппа
	|	И НЕ уатСоставТС.ТС.ПометкаУдаления
	|	И уатСоставТС.ТС.ВидМоделиТС = ЗНАЧЕНИЕ(Перечисление.уатВидыМоделейТС.Прицеп)
	|	И ВЫБОР
	|			КОГДА уатСоставТС.ТС.ПринадлежностьТС = ЗНАЧЕНИЕ(Перечисление.уатПринадлежностьТС.Привлеченное)
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ уатСоставТС.ТС.ДатаВыбытия = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|					И НЕ уатСоставТС.ТС.ДатаВводаВЭксплуатацию = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|		КОНЕЦ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.ТС;
	Иначе 
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции // ПолучитьСписокПрицепов()

&НаКлиенте
Процедура ПослеЗакрытияФормыВыбораГаража(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя") И РежимОтображенияДерево Тогда 
		Если ЗаказыДерево.ПолучитьЭлементы().Количество() Тогда 
			СтрокаПервогоПункта = ЗаказыДерево.ПолучитьЭлементы()[0];
		Иначе 
			СтрокаПервогоПункта = Неопределено;
		КонецЕсли;
		
		Если ЗаказыДерево.ПолучитьЭлементы().Количество() = 0 
				Или (ЗаказыДерево.ПолучитьЭлементы().Количество() И Не ЗаказыДерево.ПолучитьЭлементы()[0].ПунктЗаказНоменклатура = РезультатЗакрытия) Тогда 
			СтрокаГаражВыезд = ЗаказыДерево.ПолучитьЭлементы().Вставить(0);
			СтрокаГаражВыезд.ПунктЗаказНоменклатура = РезультатЗакрытия;
		Иначе
			СтрокаГаражВыезд = Неопределено;
		КонецЕсли;
		
		Если Не ЗаказыДерево.ПолучитьЭлементы()[ЗаказыДерево.ПолучитьЭлементы().Количество()-1].ПунктЗаказНоменклатура = РезультатЗакрытия Тогда 
			СтрокаГаражВозврат = ЗаказыДерево.ПолучитьЭлементы().Добавить();
			СтрокаГаражВозврат.ПунктЗаказНоменклатура = РезультатЗакрытия;
		Иначе 
			СтрокаГаражВозврат = Неопределено;
		КонецЕсли;
		
		Если Не СтрокаПервогоПункта = Неопределено И Не СтрокаГаражВыезд = Неопределено И ЗначениеЗаполнено(СтрокаПервогоПункта.ПрибытиеПлан) Тогда 
			СтрокаГаражВыезд.УбытиеПлан = Объект.ДатаИВремяОтправленияПлан;
			
			РассчитатьВремяРасстояниеМеждуПунктамиСервер();
			
			СтрокаГаражВыезд.УбытиеПлан   = уатЗащищенныеФункцииСервер.СложитьВремя(СтрокаПервогоПункта.ПрибытиеПлан, -Объект.Заказы[0].Время);
			СтрокаГаражВыезд.ПрибытиеПлан = СтрокаГаражВыезд.УбытиеПлан;
			
			Объект.ДатаИВремяОтправленияПлан = СтрокаГаражВыезд.УбытиеПлан;
			
			ОбновитьДеревоЗаказовНаСервере();
			Элементы.ЗаказыДерево.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВерхнийУровень;
			
			ЗаказыДеревоИзменитьДатыВШапке();
			ОбновитьТипыЗначенийСтрокЗаказов();
			ОбновитьНадписьИтоги();
			
			Модифицированность = Истина;
		КонецЕсли;
		
	Иначе 
		Если Объект.Заказы.Количество() Тогда 
			СтрокаПервогоПункта = Объект.Заказы[0];
		Иначе 
			СтрокаПервогоПункта = Неопределено;
		КонецЕсли;
		
		Если Объект.Заказы.Количество() = 0 Или (Объект.Заказы.Количество() И Не Объект.Заказы[0].Пункт = РезультатЗакрытия) Тогда 
			СтрокаГаражВыезд = Объект.Заказы.Вставить(0);
			СтрокаГаражВыезд.Пункт            = РезультатЗакрытия;
			СтрокаГаражВыезд.ТипТочкиМаршрута = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.ПромежуточныйПункт");
		Иначе
			СтрокаГаражВыезд = Неопределено;
		КонецЕсли;
		
		Если Не Объект.Заказы[Объект.Заказы.Количество()-1].Пункт = РезультатЗакрытия Тогда 
			СтрокаГаражВозврат = Объект.Заказы.Добавить();
			СтрокаГаражВозврат.Пункт            = РезультатЗакрытия;
			СтрокаГаражВозврат.ТипТочкиМаршрута = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.ПромежуточныйПункт");
		Иначе 
			СтрокаГаражВозврат = Неопределено;
		КонецЕсли;
		
		Если СтрокаПервогоПункта <> Неопределено И СтрокаГаражВыезд <> Неопределено И ЗначениеЗаполнено(СтрокаПервогоПункта.ПрибытиеПлан) Тогда 
			РассчитатьВремяРасстояниеМеждуПунктамиСервер();
			
			СтрокаГаражВыезд.УбытиеПлан   = уатЗащищенныеФункцииСервер.СложитьВремя(СтрокаПервогоПункта.ПрибытиеПлан, -СтрокаГаражВыезд.Время);
			СтрокаГаражВыезд.ПрибытиеПлан = СтрокаГаражВыезд.УбытиеПлан;
			
			Объект.ДатаИВремяОтправленияПлан = СтрокаГаражВыезд.УбытиеПлан;
			
			ПересчитатьПлановоеВремя();
			ЗаказыИзменитьДатыВШапке();
			РассчитатьМаршрутныеПоказатели();
			ОбновитьНадписьИтоги();
			ОбновитьПиктограммыПрисоединенныхФайлов();
			
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
	РасстоянияТЧЗаказы(Неопределено);
	ОбновитьДанныеНаПланировщике();
	РассчитатьПоказателиСервер();
	ОбновитьДинамическиеПоля();
	ОбновитьНадписьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура ОптимальноеПерестроениеЗаказовОбновитьПункты(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = "ОбновитьПункты" Тогда 
		Если ДополнительныеПараметры.НастройкиМаршрутизации.Оптимизация_НастройкаМаршрутизацияВФоновомРежиме Тогда 
			ПараметрыВыполненияФЗ = Новый Массив();
			ПараметрыВыполненияФЗ.Добавить(ДополнительныеПараметры.мсвДопАдреса);
			
			ИмяМетодаФЗ = "уатЗащищенныеФункцииСервер_уэ.ОбновитьВремяРасстояниеМеждуПунктами";
			
			ОповещениеПослеДлительнойОперации = Новый ОписаниеОповещения("ОптимальноеПерестроениеЗаказовПослеОбновленияПунктов", ЭтотОбъект, ДополнительныеПараметры);
			
			ЗаданиеВыполнено = СтартФоновогоЗаданияНаСервере(ПараметрыВыполненияФЗ, ИмяМетодаФЗ);
			Если ЗаданиеВыполнено Тогда
				ОптимальноеПерестроениеЗаказовПослеОбновленияПунктов(Неопределено, ДополнительныеПараметры);
				Возврат;
			КонецЕсли;
			
			// Операция еще не завершена, выполняется с помощью фонового задания (асинхронно).
			ПараметрыОбработчикаОжидания = Новый Структура(
				"МинимальныйИнтервал,
				|МаксимальныйИнтервал,
				|ТекущийИнтервал,
				|КоэффициентУвеличенияИнтервала", 
				1, 15, 1, 1.4);
			
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
			
			ФормаДлительнойОперации = ОткрытьФорму("ОбщаяФорма.уатДлительнаяОперация", Новый Структура("ИдентификаторЗадания", ИдентификаторЗадания), ЭтотОбъект);
		Иначе 
			уатЗащищенныеФункцииСервер_уэ.ОбновитьВремяРасстояниеМеждуПунктами(, ДополнительныеПараметры.мсвДопАдреса);
			ОптимальноеПерестроениеЗаказовПослеОбновленияПунктов(Неопределено, ДополнительныеПараметры);
		КонецЕсли;
		
	ИначеЕсли РезультатВопроса = "ПродолжитьБезОбновления" Тогда 
		ОптимальноеПерестроениеЗаказовПослеОбновленияПунктов(Неопределено, ДополнительныеПараметры);
		
	Иначе 
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВнешняяМаршрутизация_ДобавитьЗадачуSVRP(ПараметрыМаршрутизации, ТекстОшибки)
	
	МодульВнешнейМаршрутизации = ОбщегоНазначения.ОбщийМодуль("уатВнешнийМаршрутизаторСервер_уэ"); 
	
	Возврат МодульВнешнейМаршрутизации.Маршрутизация_ДобавитьЗадачуSVRP(
		ПараметрыМаршрутизации.ДанныеПоЗаказам.ДатаВыезда,
		ПараметрыМаршрутизации.ХарактеристикиСцепки,
		ПараметрыМаршрутизации.ДанныеПоЗаказам,
		ПараметрыМаршрутизации.НастройкиМаршрутизации,
		ТекстОшибки
	);
	
КонецФункции // ВнешняяМаршрутизация_ДобавитьЗадачуSVRP()

&НаСервереБезКонтекста
Функция ВнешняяМаршрутизация_ПолучитьРезультатSVRP(АдресВрХранилища, IDзадачи, ТекстОшибки, флRarusVRP)
	
	МодульВнешнейМаршрутизации = ОбщегоНазначения.ОбщийМодуль("уатВнешнийМаршрутизаторСервер_уэ");
	
	Возврат МодульВнешнейМаршрутизации.Маршрутизация_ПолучитьРезультатSVRP(
		АдресВрХранилища, IDзадачи, ТекстОшибки, флRarusVRP);
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ВнешняяМаршрутизация_ПроверитьВыполнениеЗадания()
	
	ТекстОшибки = "";
	
	ЗаданиеВыполнено = ВнешняяМаршрутизация_ПолучитьРезультатSVRP(АдресХранилищаДО, IDзадачиВнешнийМаршрутизатор, ТекстОшибки, флRarusVRP);
	
	Если ЗаданиеВыполнено Тогда
		ЗакрытьФормуДлительнойОперации();
		
		Если ТекстОшибки = "" Тогда 
			
			Если Не ОповещениеПослеДлительнойОперации = Неопределено Тогда 
				ВыполнитьОбработкуОповещения(ОповещениеПослеДлительнойОперации);
				ОповещениеПослеДлительнойОперации = Неопределено;
			КонецЕсли;

		Иначе 
			ПоказатьПредупреждение(, ТекстОшибки);
		КонецЕсли;
		IDзадачиВнешнийМаршрутизатор = Неопределено;
		
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.ТекущийИнтервал * ПараметрыОбработчикаОжидания.КоэффициентУвеличенияИнтервала;
	Если ПараметрыОбработчикаОжидания.ТекущийИнтервал > ПараметрыОбработчикаОжидания.МаксимальныйИнтервал Тогда
		ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.МаксимальныйИнтервал;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания(
		"Подключаемый_ВнешняяМаршрутизация_ПроверитьВыполнениеЗадания", 
		ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
		Истина
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытииФормыДлительнойОперации(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") И РезультатЗакрытия.Свойство("ОтменитьВыполнение")
			И ТипЗнч(ДополнительныеПараметры) = Тип("Структура") И ДополнительныеПараметры.Свойство("АлгоритмОптимальногоПерестроения")
			И (ДополнительныеПараметры.АлгоритмОптимальногоПерестроения = "Яндекс"
			Или ДополнительныеПараметры.АлгоритмОптимальногоПерестроения = "RarusVRP") Тогда
		
		Попытка
			ОтключитьОбработчикОжидания("Подключаемый_ВнешняяМаршрутизация_ПроверитьВыполнениеЗадания");
		Исключение
		КонецПопытки;
		
		ОповещениеПослеДлительнойОперации = Неопределено;
		IDзадачиВнешнийМаршрутизатор = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОптимальноеПерестроениеЗаказовПослеПроверкиЧислаЗаказов(РезультатВопроса, ПараметрыОптимизации) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыОптимизации.АлгоритмОптимальногоПерестроения <> "Яндекс"
		И ПараметрыОптимизации.АлгоритмОптимальногоПерестроения <> "RarusVRP"
		И Не уатЗащищенныеФункцииСервер_уэ.ВремяРасстояниеМеждуПунктамиЗаполнено(ПараметрыОптимизации.мсвДопАдреса) Тогда 
		
		ТекстВопроса = Новый ФорматированнаяСтрока(
			НСтр("en='To continue routing it is necessary to update the distances between the points.';ru='Для продолжения маршрутизации необходимо выполнить обновление расстояний между пунктами.'") + Символы.ПС
			+ НСтр("en='For update it is necessary to have access to the server';ru='Для обновления необходимо наличие доступа к серверу'") + " "
			+ НСтр("en='via the Internet. Operation can take a long time.';ru='через интернет. Операция может занять длительное время.'") + Символы.ПС
			+ НСтр("en='Duration depends on the number of destinations in orders.';ru='Продолжительность зависит от количества пунктов назначения в заказах.'") + Символы.ПС
			+ НСтр("en='Maximum number of requests to online service is limited.';ru='Максимальное количество запросов к онлайну сервису ограничено.'")
		);
		
		Оповещение = Новый ОписаниеОповещения("ОптимальноеПерестроениеЗаказовОбновитьПункты", ЭтотОбъект, ПараметрыОптимизации);
		
		СписокОтветов = Новый СписокЗначений();
		СписокОтветов.Добавить("ОбновитьПункты",          НСтр("en='Update distances';ru='Обновить расстояния'"));
		СписокОтветов.Добавить("ПродолжитьБезОбновления", НСтр("en='Continue without updating';ru='Продолжить без обновления'"));
		СписокОтветов.Добавить("Отменить",                НСтр("en='Cancel routing';ru='Отменить маршрутизацию'"));
		
		ПоказатьВопрос(Оповещение, ТекстВопроса, СписокОтветов);
		
	Иначе 
		ОптимальноеПерестроениеЗаказовПослеОбновленияПунктов(Неопределено, ПараметрыОптимизации);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОптимальноеПерестроениеЗаказовПослеОбновленияПунктов(Результат, ДопПараметры) Экспорт
	
	Если ДопПараметры.АлгоритмОптимальногоПерестроения = "Яндекс"
		Или ДопПараметры.АлгоритмОптимальногоПерестроения = "RarusVRP" Тогда
		ТекстОшибки = "";
		
		IDзадачиВнешнийМаршрутизатор = ВнешняяМаршрутизация_ДобавитьЗадачуSVRP(ДопПараметры, ТекстОшибки);
		
		Если Не ЗначениеЗаполнено(IDзадачиВнешнийМаршрутизатор) Тогда 
			ПоказатьПредупреждение(, ТекстОшибки);
			Возврат;
		КонецЕсли;
		
		УстановитьАдресХранилищаДляРезультатаМаршрутизации();
		
		ЗаданиеВыполнено = ВнешняяМаршрутизация_ПолучитьРезультатSVRP(АдресХранилищаДО, IDзадачиВнешнийМаршрутизатор, ТекстОшибки, флRarusVRP);
		Если ЗаданиеВыполнено Тогда
			Если ТекстОшибки = "" Тогда 
				ОптимальноеПерестроениеЗаказовПослеМаршрутизации(Неопределено, ДопПараметры);
			Иначе 
				ПоказатьПредупреждение(, ТекстОшибки);
			КонецЕсли;
			
			IDзадачиВнешнийМаршрутизатор = Неопределено;
			
			Возврат;
		КонецЕсли;
		
		ОповещениеПослеДлительнойОперации = Новый ОписаниеОповещения("ОптимальноеПерестроениеЗаказовПослеМаршрутизации", ЭтотОбъект, ДопПараметры);
		
		// Операция еще не завершена, выполняется с помощью фонового задания (асинхронно).
		ПараметрыОбработчикаОжидания = Новый Структура(
			"МинимальныйИнтервал,
			|МаксимальныйИнтервал,
			|ТекущийИнтервал,
			|КоэффициентУвеличенияИнтервала", 
			1, 15, 1, 1.4);
		
		ПодключитьОбработчикОжидания("Подключаемый_ВнешняяМаршрутизация_ПроверитьВыполнениеЗадания", 1, Истина);
		
		ФормаДлительнойОперации = ОткрытьФорму(
			"ОбщаяФорма.уатДлительнаяОперация",
			,
			ЭтотОбъект,
			,
			,
			,
			Новый ОписаниеОповещения("ПриЗакрытииФормыДлительнойОперации", ЭтотОбъект, ДопПараметры)
		);
		
	ИначеЕсли ДопПараметры.НастройкиМаршрутизации.Оптимизация_НастройкаМаршрутизацияВФоновомРежиме Тогда 
		ПараметрыВыполненияФЗ = Новый Массив();
		ПараметрыВыполненияФЗ.Добавить(ДопПараметры.ХарактеристикиСцепки.Грузоподъемность);
		ПараметрыВыполненияФЗ.Добавить(ДопПараметры.ХарактеристикиСцепки.ОбъемКузова);
		ПараметрыВыполненияФЗ.Добавить(ДопПараметры.ХарактеристикиСцепки.МаксимальноеКоличествоУпаковок);
		ПараметрыВыполненияФЗ.Добавить(ДопПараметры.ХарактеристикиСцепки.ТипТС);
		ПараметрыВыполненияФЗ.Добавить(ДопПараметры.ДанныеПоЗаказам.Заказы);
		ПараметрыВыполненияФЗ.Добавить(ДопПараметры.мсвДопАдреса);
		ПараметрыВыполненияФЗ.Добавить(ДопПараметры.ДанныеПоЗаказам.Гараж);
		ПараметрыВыполненияФЗ.Добавить(ДопПараметры.ДанныеПоЗаказам.УчитыватьГаражВозвращения);
		ПараметрыВыполненияФЗ.Добавить(ДопПараметры.ДанныеПоЗаказам.ДатаВыезда);
		ПараметрыВыполненияФЗ.Добавить(ДопПараметры.НастройкиМаршрутизации.Оптимизация_НастройкаРежимОптимизации);
		ПараметрыВыполненияФЗ.Добавить(ДопПараметры.НастройкиМаршрутизации.Оптимизация_НастройкаУчитыватьОкнаПоЗаказам);
		
		ИмяМетодаФЗ = "уатЗащищенныеФункцииСервер_уэ.РаспределитьЗаказыВМаршрутномЛисте";
		
		ОповещениеПослеДлительнойОперации = Новый ОписаниеОповещения("ОптимальноеПерестроениеЗаказовПослеМаршрутизации", ЭтотОбъект, ДопПараметры);
		
		ЗаданиеВыполнено = СтартФоновогоЗаданияНаСервере(ПараметрыВыполненияФЗ, ИмяМетодаФЗ);
		Если ЗаданиеВыполнено Тогда
			ОптимальноеПерестроениеЗаказовПослеМаршрутизации(Неопределено, ДопПараметры);
			Возврат;
		КонецЕсли;
		
		// Операция еще не завершена, выполняется с помощью фонового задания (асинхронно).
		ПараметрыОбработчикаОжидания = Новый Структура(
			"МинимальныйИнтервал,
			|МаксимальныйИнтервал,
			|ТекущийИнтервал,
			|КоэффициентУвеличенияИнтервала", 
			1, 15, 1, 1.4);
		
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		
		ФормаДлительнойОперации = ОткрытьФорму("ОбщаяФорма.уатДлительнаяОперация", Новый Структура("ИдентификаторЗадания", ИдентификаторЗадания), ЭтотОбъект);
		
	Иначе 
		УстановитьАдресХранилищаДляРезультатаМаршрутизации();
		уатЗащищенныеФункцииСервер_уэ.РаспределитьЗаказыВМаршрутномЛисте(
			АдресХранилищаДО,
			ДопПараметры.ХарактеристикиСцепки.Грузоподъемность,
			ДопПараметры.ХарактеристикиСцепки.ОбъемКузова,
			ДопПараметры.ХарактеристикиСцепки.МаксимальноеКоличествоУпаковок,
			ДопПараметры.ХарактеристикиСцепки.ТипТС,
			ДопПараметры.ДанныеПоЗаказам.Заказы,
			ДопПараметры.мсвДопАдреса,
			ДопПараметры.ДанныеПоЗаказам.Гараж,
			ДопПараметры.ДанныеПоЗаказам.УчитыватьГаражВозвращения,
			ДопПараметры.ДанныеПоЗаказам.ДатаВыезда,
			ДопПараметры.НастройкиМаршрутизации.Оптимизация_НастройкаРежимОптимизации,
			ДопПараметры.НастройкиМаршрутизации.Оптимизация_НастройкаУчитыватьОкнаПоЗаказам
		);
		ОптимальноеПерестроениеЗаказовПослеМаршрутизации(Неопределено, ДопПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОптимальноеПерестроениеЗаказовПослеМаршрутизации(Результат, ДопПараметры) Экспорт
	
	ТекстПредупреждения = "";
	ВыполнитьРаспределениеСервер(ДопПараметры, ТекстПредупреждения);
	
	ОбновитьДанныеНаПланировщике();
	ОбновитьДинамическиеПоля();
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя")
		И НЕ РежимОтображенияДерево Тогда 
		ОбновитьТипыЗначенийСтрокЗаказов();
	КонецЕсли;
	
	Модифицированность = Истина;
	
	ТекстПредупреждения = Новый ФорматированнаяСтрока(ТекстПредупреждения 
	+ Символы.ПС,
	?(ЗначениеЗаполнено(IDзадачиВнешнийМаршрутизатор),НСтр("ru = 'ID задачи: '; en = 'Task ID: '") + IDзадачиВнешнийМаршрутизатор, ""),
	Символы.ПС,
	?(ЗначениеЗаполнено(IDзадачиВнешнийМаршрутизатор) И НЕ флRarusVRP,
	Новый ФорматированнаяСтрока(НСтр("ru='Открыть в браузере'"),,,, "https://courier.yandex.ru/mvrp-map#" + IDзадачиВнешнийМаршрутизатор), ""));
	
	Если НЕ ПустаяСтрока(ТекстПредупреждения) Тогда 
		ПоказатьПредупреждение(, ТекстПредупреждения);
	КонецЕсли;
	НеВыводитьПредупреждение = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьРаспределениеСервер(ДопПараметры, ТекстПредупреждения)
	
	РаспредЗаказов = ПолучитьИзВременногоХранилища(АдресХранилищаДО);
	
	Если РаспредЗаказов = Неопределено 
		ИЛИ НЕ ТипЗнч(РаспредЗаказов) = Тип("Структура")
		ИЛИ НЕ РаспредЗаказов.Свойство("пул") Тогда 
		Возврат;
	КонецЕсли;
	
	уатОбщегоНазначения_уэ.ВыполнитьРаспределениеСервер(Объект, ДопПараметры.ДанныеПоЗаказам, РаспредЗаказов, ТекстПредупреждения);
	
	флВнешняяМаршрутизация = РаспредЗаказов.Свойство("ВнешняяМаршрутизация");
	Если Не флВнешняяМаршрутизация Тогда 
		ДокОб = РеквизитФормыВЗначение("Объект");
		ДокОб.ОбновитьВремяРасстояниеМеждуПунктами(Истина);
		ЗначениеВРеквизитФормы(ДокОб, "Объект");
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя") Тогда 
		Если РежимОтображенияДерево Тогда 
			ОбновитьДеревоЗаказовНаСервере();
			Элементы.ЗаказыДерево.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВерхнийУровень;
		Иначе 
			ПересчитатьПлановоеВремя();
			ЗаказыУстановитьСодержимоеЯчеек();
		КонецЕсли;
	КонецЕсли;
	
	РассчитатьПоказателиСервер();
	ОбновитьНадписьИтоги();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьАдресХранилищаДляРезультатаМаршрутизации()
	
	АдресХранилищаДО = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьАдресХранилищаДляРезультатаЗаполненияФактПосещения()
	
	АдресХранилищаФактПосещения = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Функция СтартФоновогоЗаданияНаСервере(ДопПараметрыВыполнения, ИмяМетода)
	
	АдресХранилищаДО = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	ЗаданиеВыполнено = Ложь; 
	
	НаименованиеЗадания = НСтр("en='Orders routing';ru='Маршрутизация заказов'");
	
	ПараметрыВыполнения = Новый Массив();
	ПараметрыВыполнения.Добавить(АдресХранилищаДО);
	
	Для Каждого ТекДопПараметр Из ДопПараметрыВыполнения Цикл 
		ПараметрыВыполнения.Добавить(ТекДопПараметр);
	КонецЦикла;
	
	Если ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая Тогда
		ВремяОжидания = 4;
	Иначе
		ВремяОжидания = 2;
	КонецЕсли;
	
	Задание = ФоновыеЗадания.Выполнить(ИмяМетода, ПараметрыВыполнения,, НаименованиеЗадания);
	
	Попытка
		Задание.ОжидатьЗавершения(ВремяОжидания);
	Исключение  
		// Специальная обработка не требуется. Предположительно, исключение вызвано истечением времени ожидания.
	КонецПопытки;
	
	ИдентификаторЗадания = Задание.УникальныйИдентификатор;
	// Если операция уже завершилась, то сразу обрабатываем результат.
	Если ЗаданиеВыполнено() Тогда
		ЗаданиеВыполнено = Истина;
	КонецЕсли; 
	
	Возврат ЗаданиеВыполнено;
	
КонецФункции

&НаСервере
Функция ЗаданиеВыполнено()
	
	Задание = НайтиЗаданиеПоИдентификатору();
	
	Если Задание <> Неопределено И Задание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Задание = Неопределено Тогда
		ТекстКомментария = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("en='The background job (id=%1) is not found';ru='Фоновое задание (id=%1) не найдено'"), ИдентификаторЗадания);
		ЗаписьЖурналаРегистрации(НСтр("en='Long-running operation';ru='Длительная операция'"),
			УровеньЖурналаРегистрации.Ошибка,,, ТекстКомментария);
	ИначеЕсли Задание.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
		ОшибкаЗадания = Задание.ИнформацияОбОшибке;
		Если ОшибкаЗадания <> Неопределено Тогда
			ЗаписьЖурналаРегистрации(НСтр("en='Long-running operation';ru='Длительная операция'"),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ОшибкаЗадания));
		Иначе
			ЗаписьЖурналаРегистрации(НСтр("en='Long-running operation';ru='Длительная операция'"),
				УровеньЖурналаРегистрации.Ошибка,,,
				НСтр("en='Task ended with an unknown error.';ru='Задание завершилось с неизвестной ошибкой.'"));
		КонецЕсли;
	ИначеЕсли Задание.Состояние = СостояниеФоновогоЗадания.Отменено Тогда
		ЗаписьЖурналаРегистрации(НСтр("en='Long-running operation';ru='Длительная операция'"),
			УровеньЖурналаРегистрации.Ошибка,,,
			НСтр("en='Background job cancelled by administrator';ru='Фоновое задание отменено администратором'"));
		Возврат Истина;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
	ВызватьИсключение(НСтр("en='Could not perform this operation. For details, see. in the register.';ru='Не удалось выполнить данную операцию. Подробности см. в Журнале регистрации.'"));
	
КонецФункции

&НаСервере
Функция НайтиЗаданиеПоИдентификатору()
	
	Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	
	Возврат Задание;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ЗаданиеВыполнено() Тогда 
			ЗакрытьФормуДлительнойОперации();
			Если Не ОповещениеПослеДлительнойОперации = Неопределено Тогда 
				ВыполнитьОбработкуОповещения(ОповещениеПослеДлительнойОперации);
				ОповещениеПослеДлительнойОперации = Неопределено;
			КонецЕсли;
			Возврат;
		КонецЕсли;
	Исключение
		ЗакрытьФормуДлительнойОперации();
		ВызватьИсключение;
	КонецПопытки;
	
	ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.ТекущийИнтервал * ПараметрыОбработчикаОжидания.КоэффициентУвеличенияИнтервала;
	Если ПараметрыОбработчикаОжидания.ТекущийИнтервал > ПараметрыОбработчикаОжидания.МаксимальныйИнтервал Тогда
		ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.МаксимальныйИнтервал;
	КонецЕсли;
	
	РезультатВыполнения = ПолучитьСостояниеВыполнения();
	
	Если Не РезультатВыполнения = Неопределено Тогда 
		Если РезультатВыполнения.Свойство("СообщениеПользователю") И Не РезультатВыполнения.СообщениеПользователю = Неопределено Тогда 
			ФормаДлительнойОперации.ТекстСтатуса = РезультатВыполнения.СообщениеПользователю;
		КонецЕсли;
		Если РезультатВыполнения.Свойство("Прогресс") И Не РезультатВыполнения.Прогресс = Неопределено Тогда
			Оповестить("ПоказатьПрогрессДлительнойОперации");
			ФормаДлительнойОперации.Прогресс = РезультатВыполнения.Прогресс;
		КонецЕсли;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания(
		"Подключаемый_ПроверитьВыполнениеЗадания", 
		ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
		Истина);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСостояниеВыполнения()
	
	Результат = ПолучитьИзВременногоХранилища(АдресХранилищаДО);
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗакрытьФормуДлительнойОперации()
	
	Если ТипЗнч(ФормаДлительнойОперации) = Тип("УправляемаяФорма") Тогда
		Если ФормаДлительнойОперации.Открыта() Тогда
			ФормаДлительнойОперации.Закрыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьНастройкиМаршрутизации(ШаблонНастроек)
	Возврат Документы.уатМаршрутныйЛист.ПолучитьНастройкиМаршрутизации(, ШаблонНастроек);
КонецФункции // ПолучитьНастройкиМаршрутизации()

&НаСервере
Функция ПодготовитьПараметрыОптимизации()
	
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	Результат = уатОбщегоНазначения_уэ.ПодготовитьПараметрыОптимизации(ДокОбъект);
	
	// Могли быть установлены отсутствующие идентификаторы строк Маршрутного листа
	ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПодборЗаказовОчисткаТЧ(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда 
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя") И РежимОтображенияДерево Тогда 
			ЗаказыДерево.ПолучитьЭлементы().Очистить();
		ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя") И Не РежимОтображенияДерево Тогда 
			Объект.Заказы.Очистить();
		КонецЕсли;
		
		ПодборЗаказовОткрытьФормуПодбора(ДополнительныеПараметры);
		
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		ПодборЗаказовОткрытьФормуПодбора(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборЗаказовОткрытьФормуПодбора(ДатаВыезда)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя") И РежимОтображенияДерево Тогда 
		ЗаписатьДеревоЗаказов();
	КонецЕсли;
	
	ПеренесенныеЗаказы = Новый Массив();
	
	Для Каждого ТекСтрока Из Объект.Заказы Цикл 
		Если ТекСтрока.ТипТочкиМаршрута = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Погрузка") Тогда 
			ДанныеЗаказа = Новый Структура();
			ДанныеЗаказа.Вставить("Заказ",      ТекСтрока.ЗаказГрузоотправителя);
			ДанныеЗаказа.Вставить("Груз",       ТекСтрока.Номенклатура);
			ДанныеЗаказа.Вставить("Количество", ТекСтрока.Количество);
			
			ПеренесенныеЗаказы.Добавить(ДанныеЗаказа);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ДокументПодбора",    "уатМаршрутныйЛист");
	ПараметрыФормы.Вставить("ТекущийМЛ",          Объект.Ссылка);
	ПараметрыФормы.Вставить("ПеренесенныеЗаказы", ПеренесенныеЗаказы);
	ПараметрыФормы.Вставить("ДатаВыезда",         ДатаВыезда);
	
	Оповещение = Новый ОписаниеОповещения("ПодборЗаказовПослеПодбора", ЭтотОбъект, ?(ЗначениеЗаполнено(ДатаВыезда), ДатаВыезда, Неопределено));
	
	ОткрытьФорму("ОбщаяФорма.уатПодборЗаказов", ПараметрыФормы, ЭтотОбъект,,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборЗаказовПослеПодбора(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя") И РежимОтображенияДерево Тогда 
		ДатаОтправленияПоЗаказу = Неопределено;
		
		мПредЗаказ = Неопределено;
		Для Сч = 0 По РезультатЗакрытия.ПодобранныеЗаказы.Количество()-1 Цикл 
			ТекСтрока = РезультатЗакрытия.ПодобранныеЗаказы[Сч];
			Если Сч = 0 Тогда 
				ДатаОтправленияПоЗаказу = ПолучитьДатуОтправленияПоЗаказу(ТекСтрока.Заказ);
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Объект.ВидПеревозки) Тогда
				Объект.ВидПеревозки = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрока.Заказ, "ВидПеревозки");
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Объект.Подразделение) Тогда
				Объект.Подразделение = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрока.Заказ, "Подразделение");
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Объект.ОбъектСтроительства) Тогда
				Объект.ОбъектСтроительства = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрока.Заказ, "ОбъектСтроительства");
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Объект.Маршрут) Тогда
				Объект.Маршрут = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрока.Заказ, "Маршрут");
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Объект.НаправлениеПеревозки) Тогда
				Объект.НаправлениеПеревозки = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрока.Заказ, "НаправлениеПеревозки");
			КонецЕсли;
			
			ДобавитьСтрокиДереваПриВыбореЗаказа(ТекСтрока, ?(мПредЗаказ = ТекСтрока.Заказ, 0, РезультатЗакрытия.РежимДобавленияЗаказовВМаршрутныйЛист));
			мПредЗаказ = ТекСтрока.Заказ;
		КонецЦикла;
		
		Если Не ЗначениеЗаполнено(РезультатЗакрытия.ДатаВыезда) И ДополнительныеПараметры = Неопределено И Не ДатаОтправленияПоЗаказу = Неопределено Тогда 
			ДатаВыездаНаМаршрут = ДатаОтправленияПоЗаказу;
		Иначе
			ДатаВыездаНаМаршрут = РезультатЗакрытия.ДатаВыезда;
		КонецЕсли;
		
		ОбновитьМаршрутныеПараметрыДереваЗаказов(ДатаВыездаНаМаршрут);
		ОбновитьГрузовыеПараметрыДереваЗаказов();
		
		ЗаказыДеревоИзменитьДатыВШапке();
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя") И Не РежимОтображенияДерево Тогда 
		ДатаОтправленияПоЗаказу = Неопределено;
		
		мПредЗаказ = Неопределено;
		
		Для Сч = 0 По РезультатЗакрытия.ПодобранныеЗаказы.Количество()-1 Цикл
			
			ТекСтрока = РезультатЗакрытия.ПодобранныеЗаказы[Сч];
			Если Сч = 0 Тогда 
				ДатаОтправленияПоЗаказу = ПолучитьДатуОтправленияПоЗаказу(ТекСтрока.Заказ);
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Объект.ВидПеревозки) Тогда
				Объект.ВидПеревозки = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрока.Заказ, "ВидПеревозки");
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Объект.Подразделение) Тогда
				Объект.Подразделение = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрока.Заказ, "Подразделение");
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Объект.ОбъектСтроительства) Тогда
				Объект.ОбъектСтроительства = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрока.Заказ, "ОбъектСтроительства");
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Объект.Маршрут) Тогда
				Объект.Маршрут = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрока.Заказ, "Маршрут");
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Объект.НаправлениеПеревозки) Тогда
				Объект.НаправлениеПеревозки = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрока.Заказ, "НаправлениеПеревозки");
			КонецЕсли;
			
			ЗаполнитьСтрокиПоЗаказуНаСервере(ТекСтрока.Заказ, ТекСтрока, ?(мПредЗаказ = ТекСтрока.Заказ, 0, РезультатЗакрытия.РежимДобавленияЗаказовВМаршрутныйЛист));
			мПредЗаказ = ТекСтрока.Заказ;
		КонецЦикла;

		Если Не ЗначениеЗаполнено(РезультатЗакрытия.ДатаВыезда)
			И ДополнительныеПараметры = Неопределено
			И НЕ ДатаОтправленияПоЗаказу = Неопределено Тогда 
			ДатаВыездаНаМаршрут = ДатаОтправленияПоЗаказу;
		Иначе
			ДатаВыездаНаМаршрут = РезультатЗакрытия.ДатаВыезда;
		КонецЕсли;
		
		ПересчитатьПлановоеВремя(ДатаВыездаНаМаршрут);
		
		ЗаказыИзменитьДатыВШапке();
		ОбновитьТипыЗначенийСтрокЗаказов();
		ЗаказыУстановитьСодержимоеЯчеек();
	КонецЕсли;
	
	РасстоянияТЧЗаказы(Неопределено);
	ОбновитьДанныеНаПланировщике();
	РассчитатьПоказателиСервер();
	ОбновитьНадписьИтоги();
	ОбновитьДинамическиеПоля();
	
	Если ПредДатаИВремяОтправленияПлан <> НачалоДня(Объект.ДатаИВремяОтправленияПлан) Тогда
		Если НЕ (Объект.ВидПеревозки = ПредопределенноеЗначение("Справочник.уатВидыПеревозок.Авиационная") 
			Или Объект.ВидПеревозки = ПредопределенноеЗначение("Справочник.уатВидыПеревозок.Железнодорожная")
			Или Объект.ВидПеревозки = ПредопределенноеЗначение("Справочник.уатВидыПеревозок.Морская")) Тогда
			Если Объект.ПринадлежностьПеревозки = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное") тогда
				
				// заполняем водителей
				уатОбщегоНазначения.ЗаполнитьЭкипажТС(Объект.ТС, Объект.Организация, Объект.ДатаИВремяОтправленияПлан,
					Объект.Водитель1, Объект.Водитель2, Объект.Сотрудник1, Объект.Сотрудник2,
					Ложь, Объект.ДатаИВремяОтправленияПлан + 24*3600, Истина);
					
				ПредДатаИВремяОтправленияПлан = Объект.ДатаИВремяОтправленияПлан;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеНаПланировщике()
	Если Не Элементы.ФормаПланировщик.Пометка Тогда 
		Возврат;
	КонецЕсли;
	
	ОбновитьДанныеНаПланировщикеСервер();
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеНаПланировщикеСервер()
	// Для обновления планировщика будет использоваться дерево заказов
	Если Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя") 
		ИЛИ НЕ РежимОтображенияДерево Тогда
		ОбновитьДеревоЗаказовНаСервере();
	КонецЕсли;
	
	ПланировщикЗаказов.Элементы.Очистить();
	ПланировщикЗаказов.Измерения.Очистить();
	ПланировщикЗаказов.ШкалаВремени.Элементы[2].Метки.Очистить();
	
	ИзмерениеПоЗаказам = ПланировщикЗаказов.Измерения.Добавить("Заказы");
	ИзмерениеПоЗаказам.Текст = "Заказы";
	
	ДатаНачалаПланирования = Неопределено;
	ДатаКонцаПланирования  = Неопределено;
	
	Для Каждого ТекПункт Из ЗаказыДерево.ПолучитьЭлементы() Цикл 
		Если ДатаНачалаПланирования = Неопределено Тогда 
			ДатаНачалаПланирования = ТекПункт.ПрибытиеПлан;
		Иначе 
			ДатаНачалаПланирования = Мин(ДатаНачалаПланирования, ТекПункт.ПрибытиеПлан);
		КонецЕсли;
		
		Если ДатаКонцаПланирования = Неопределено Тогда 
			ДатаКонцаПланирования = ТекПункт.УбытиеПлан;
		Иначе 
			ДатаКонцаПланирования = Макс(ДатаКонцаПланирования, ТекПункт.УбытиеПлан);
		КонецЕсли;
		
		Метки = ПланировщикЗаказов.ШкалаВремени.Элементы[2].Метки;
		ТекМетка = Метки.Добавить(ТекПункт.ПрибытиеПлан);
		Если ТипЗнч(ТекПункт.ПунктЗаказНоменклатура) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда 
			Если ЗначениеЗаполнено(ТекПункт.ПунктЗаказНоменклатура.ШифрПункта) Тогда 
				ТекМетка.Текст = ТекПункт.ПунктЗаказНоменклатура.ШифрПункта;
			Иначе 
				ТекМетка.Текст = ТекПункт.ПунктЗаказНоменклатура.Наименование;
			КонецЕсли;
		Иначе 
			ТекМетка.Текст = ТекПункт.ПунктЗаказНоменклатура;
		КонецЕсли;
		ТекМетка.ЦветЛинии  = WebЦвета.Коричневый;
		ТекМетка.ЦветТекста = WebЦвета.Коричневый;
		
		Для Каждого ТекЗаказ Из ТекПункт.ПолучитьЭлементы() Цикл 
			ИзмерениеЗаказ = ИзмерениеПоЗаказам.Элементы.Найти(ТекЗаказ.ПунктЗаказНоменклатура);
			Если ИзмерениеЗаказ = Неопределено Тогда 
				ИзмерениеЗаказ = ИзмерениеПоЗаказам.Элементы.Добавить(ТекЗаказ.ПунктЗаказНоменклатура);
				ИзмерениеЗаказ.Текст = ТекЗаказ.ПунктЗаказНоменклатура.Номер;
			КонецЕсли;
			
			ЗначенияИзмерений = Новый Соответствие();
			ЗначенияИзмерений.Вставить("Заказы", ТекЗаказ.ПунктЗаказНоменклатура);
			ЗначенияИзмерений.Вставить("Расстояние", ТекПункт.Расстояние);
			
			НовыйЭлемент = ПланировщикЗаказов.Элементы.Добавить(ТекПункт.ПрибытиеПлан, ТекПункт.УбытиеПлан);
			НовыйЭлемент.Значение          = ТекЗаказ.ПолучитьИдентификатор();
			НовыйЭлемент.ЗначенияИзмерений = Новый ФиксированноеСоответствие(ЗначенияИзмерений);
			
			Если ТекЗаказ.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка
				ИЛИ ТекЗаказ.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяПогрузка Тогда
				НовыйЭлемент.ЦветФона = WebЦвета.Желтый;
				НовыйЭлемент.Текст = СтрШаблон("Погрузка %1", Формат('00010101' + (НовыйЭлемент.Конец - НовыйЭлемент.Начало), "ДФ=HH:mm"));
			ИначеЕсли ТекЗаказ.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка
				ИЛИ ТекЗаказ.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяРазгрузка Тогда 
				НовыйЭлемент.ЦветФона = WebЦвета.Розовый;
				НовыйЭлемент.Текст = СтрШаблон("Разгрузка %1", Формат('00010101' + (НовыйЭлемент.Конец - НовыйЭлемент.Начало), "ДФ=HH:mm"));
			Иначе 
				НовыйЭлемент.ЦветФона = WebЦвета.Оранжевый;
			КонецЕсли;
			
			Если Не ЗаказыДерево.ПолучитьЭлементы()[0] = ТекПункт И ТекПункт.Ожидание > 0 Тогда 
				ЗначенияИзмерений = Новый Соответствие();
				ЗначенияИзмерений.Вставить("Заказы", ТекЗаказ.ПунктЗаказНоменклатура);
				
				НовыйЭлемент = ПланировщикЗаказов.Элементы.Добавить(уатЗащищенныеФункцииСервер.СложитьВремя(ТекПункт.ПрибытиеПлан, -ТекПункт.Ожидание), ТекПункт.ПрибытиеПлан);
				НовыйЭлемент.ЗначенияИзмерений = Новый ФиксированноеСоответствие(ЗначенияИзмерений);
				НовыйЭлемент.ЦветФона          = WebЦвета.НасыщенноНебесноГолубой;
				НовыйЭлемент.Текст = СтрШаблон("Ожидание %1", Формат('00010101' + (НовыйЭлемент.Конец - НовыйЭлемент.Начало), "ДФ=HH:mm"));
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого ИнтервалТранзита Из ПланировщикСформироватьИнтервалыТранзита(ПланировщикЗаказов.Элементы) Цикл 
		ЗначенияИзмерений = Новый Соответствие();
		ЗначенияИзмерений.Вставить("Заказы", ИнтервалТранзита.Заказ);
		
		НовыйЭлемент = ПланировщикЗаказов.Элементы.Добавить(ИнтервалТранзита.Начало, ИнтервалТранзита.Конец);
		НовыйЭлемент.ЗначенияИзмерений = Новый ФиксированноеСоответствие(ЗначенияИзмерений);
		НовыйЭлемент.ЦветФона          = WebЦвета.СветлоЗеленый;
		
		ВремяПоЗаказу = Формат(уатОбщегоНазначения.уатВремяВЧЧ_ММ(НовыйЭлемент.Конец - НовыйЭлемент.Начало), "ЧДЦ=2; ЧРД=:; ЧН=0:00");
		РасстояниеПоЗаказу = Формат(ИнтервалТранзита.Расстояние, "ЧДЦ=1; ЧН=0");
				
		НовыйЭлемент.Текст = СтрШаблон("В пути %1 / %2 км", ВремяПоЗаказу, РасстояниеПоЗаказу);
	КонецЦикла;
	
	мсвУдаляемыеЭлементы = Новый Массив();
	Для Каждого ТекЭлемент Из ПланировщикЗаказов.Элементы Цикл 
		Если (ТекЭлемент.Конец - ТекЭлемент.Начало) = 0 Тогда 
			мсвУдаляемыеЭлементы.Добавить(ТекЭлемент);
		КонецЕсли;
	КонецЦикла;
	Для Каждого УдаляемыйЭлемент Из мсвУдаляемыеЭлементы Цикл 
		ПланировщикЗаказов.Элементы.Удалить(УдаляемыйЭлемент);
	КонецЦикла;
	
	Если ДатаНачалаПланирования <> Неопределено И ДатаКонцаПланирования <> Неопределено Тогда 
		Если ДатаНачалаПланирования = НачалоЧаса(ДатаНачалаПланирования) Тогда
			ДатаНачалаПланирования = ДатаНачалаПланирования - 3600;
		Иначе
			ДатаНачалаПланирования = НачалоЧаса(ДатаНачалаПланирования);
		КонецЕсли;
		ДатаКонцаПланирования = ДатаКонцаПланирования + 3600;
		
		ПланировщикЗаказов.ТекущиеПериодыОтображения.Очистить();
		ПланировщикЗаказов.ТекущиеПериодыОтображения.Добавить(ДатаНачалаПланирования, ДатаКонцаПланирования);
		ПланировщикЗаказов.НачалоПериодаОтображения = ДатаНачалаПланирования;
		ПланировщикЗаказов.КонецПериодаОтображения  = ДатаКонцаПланирования;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПланировщикСформироватьИнтервалыТранзита(ЭлементыПланировщика)
	
	ИнтервалыТранзита = Новый ТаблицаЗначений();
	ИнтервалыТранзита.Колонки.Добавить("Заказ",  Новый ОписаниеТипов("ДокументСсылка.уатЗаказГрузоотправителя"));
	ИнтервалыТранзита.Колонки.Добавить("Начало", Новый ОписаниеТипов("Дата"));
	ИнтервалыТранзита.Колонки.Добавить("Конец",  Новый ОписаниеТипов("Дата"));
	ИнтервалыТранзита.Колонки.Добавить("Расстояние", Новый ОписаниеТипов("Число"));
	
	ТабИнтервалыЗаказов = Новый ТаблицаЗначений();
	ТабИнтервалыЗаказов.Колонки.Добавить("Заказ",  Новый ОписаниеТипов("ДокументСсылка.уатЗаказГрузоотправителя"));
	ТабИнтервалыЗаказов.Колонки.Добавить("Начало", Новый ОписаниеТипов("Дата"));
	ТабИнтервалыЗаказов.Колонки.Добавить("Конец",  Новый ОписаниеТипов("Дата"));
	ТабИнтервалыЗаказов.Колонки.Добавить("Расстояние", Новый ОписаниеТипов("Число"));
	
	Для Каждого ТекЭлемент Из ЭлементыПланировщика Цикл 
		НовИнтервал = ТабИнтервалыЗаказов.Добавить();
		НовИнтервал.Заказ  = ТекЭлемент.ЗначенияИзмерений.Получить("Заказы");
		НовИнтервал.Начало = ТекЭлемент.Начало;
		НовИнтервал.Конец  = ТекЭлемент.Конец;
		НовИнтервал.Расстояние = ТекЭлемент.ЗначенияИзмерений.Получить("Расстояние");
	КонецЦикла;
	
	ТабИнтервалыЗаказов.Сортировать("Заказ, Начало, Конец");
	
	Для Сч = 1 По ТабИнтервалыЗаказов.Количество()-1 Цикл 
		ПредСтрока = ТабИнтервалыЗаказов[Сч-1];
		ТекСтрока  = ТабИнтервалыЗаказов[Сч];
		
		Если Не ТекСтрока.Заказ = ПредСтрока.Заказ Тогда 
			Продолжить;
		КонецЕсли;
		
		Если ТекСтрока.Начало > ПредСтрока.Конец Тогда 
			НовТранзит = ИнтервалыТранзита.Добавить();
			НовТранзит.Заказ  = ТекСтрока.Заказ;
			НовТранзит.Начало = ПредСтрока.Конец;
			НовТранзит.Конец  = ТекСтрока.Начало;
			НовТранзит.Расстояние  = ПредСтрока.Расстояние;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ИнтервалыТранзита;
	
КонецФункции // ПланировщикСформироватьИнтервалыТранзита()

&НаСервереБезКонтекста
Функция ПолучитьСписокВыбораТерминалов(ПараметрыПолученияДанных)
	
	Возврат Справочники.уатТерминалы.ПолучитьДанныеВыбора(ПараметрыПолученияДанных);
	
КонецФункции // ПолучитьСписокВыбораТерминалов()

&НаСервере
Функция ПолучитьДанныеПоТаре()
	
	Результат = Новый Массив();
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя") И РежимОтображенияДерево Тогда 
		ЗаписатьДеревоЗаказов();
	КонецЕсли;
	
	Для Каждого СтрокаМаршрута Из Объект.Заказы Цикл 
		Если Не СтрокаМаршрута.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрокаМаршрута.ЗаказГрузоотправителя.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам Тогда 
			Для Каждого ТекСтрокаГруз Из СтрокаМаршрута.ЗаказГрузоотправителя.ГрузовойСостав Цикл
				Если Не ТекСтрокаГруз.ГрузовоеМесто = СтрокаМаршрута.Номенклатура Тогда 
					Продолжить;
				КонецЕсли;
				
				ДанныеСтроки = Новый Структура();
				ДанныеСтроки.Вставить("Тара",       ТекСтрокаГруз.ВидУпаковки);
				ДанныеСтроки.Вставить("Количество", СтрокаМаршрута.Количество);
				
				Если НЕ флРасчетТары Тогда
					ДанныеСтроки.Вставить("ВесТары", 0);
				Иначе
					Если ТекСтрокаГруз.ГрузовоеМесто.Контейнер Тогда
						ДанныеСтроки.Вставить("ВесТары",    ТекСтрокаГруз.ГрузовоеМесто.ВесТары * СтрокаМаршрута.Количество);
					Иначе
						ДанныеСтроки.Вставить("ВесТары",    ТекСтрокаГруз.ВидУпаковки.ВесТары * СтрокаМаршрута.Количество);
					КонецЕсли;
				КонецЕсли;
				
				Результат.Добавить(ДанныеСтроки);
			КонецЦикла;
			
		ИначеЕсли СтрокаМаршрута.ЗаказГрузоотправителя.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам Тогда 
			Для Каждого ТекСтрокаТовар Из СтрокаМаршрута.ЗаказГрузоотправителя.Товары Цикл
				Если Не ТекСтрокаТовар.Номенклатура = СтрокаМаршрута.Номенклатура Тогда 
					Продолжить;
				КонецЕсли;
				
				РаспределениеПоУпаковкам = уатОбщегоНазначения_уэ.УпаковатьНоменклатуру(ТекСтрокаТовар.Номенклатура, СтрокаМаршрута.Количество);
				
				Для Каждого ТекСтрокаУпаковки Из РаспределениеПоУпаковкам Цикл 
					ДанныеСтроки = Новый Структура();
					ДанныеСтроки.Вставить("Тара",       ТекСтрокаУпаковки.ВидУпаковки);
					ДанныеСтроки.Вставить("Количество", ТекСтрокаУпаковки.Количество);
					Если НЕ флРасчетТары Тогда
						ДанныеСтроки.Вставить("ВесТары", 0);
					Иначе
						ДанныеСтроки.Вставить("ВесТары",    ТекСтрокаУпаковки.ВидУпаковки.ВесТары * ТекСтрокаУпаковки.Количество);
					КонецЕсли; 
					
					Результат.Добавить(ДанныеСтроки);
				КонецЦикла;
			КонецЦикла;
			
		Иначе 
			Для Каждого ТекСтрокаГруз Из СтрокаМаршрута.ЗаказГрузоотправителя.ГрузовойСостав Цикл
				ДанныеСтроки = Новый Структура();
				ДанныеСтроки.Вставить("Тара",       ТекСтрокаГруз.ВидУпаковки);
				ДанныеСтроки.Вставить("Количество", ТекСтрокаГруз.КоличествоМест);
				
				Если НЕ флРасчетТары Тогда
					ДанныеСтроки.Вставить("ВесТары", 0);
				Иначе
					Если ТекСтрокаГруз.ГрузовоеМесто.Контейнер Тогда
						ДанныеСтроки.Вставить("ВесТары",    ТекСтрокаГруз.ГрузовоеМесто.ВесТары * ТекСтрокаГруз.Количество);
					Иначе
						ДанныеСтроки.Вставить("ВесТары",    ТекСтрокаГруз.ВидУпаковки.ВесТары * ТекСтрокаГруз.Количество);
					КонецЕсли;
				КонецЕсли;
				
				Результат.Добавить(ДанныеСтроки);
			КонецЦикла;
			
			Для Каждого ТекСтрокаТовар Из СтрокаМаршрута.ЗаказГрузоотправителя.Товары Цикл
				РаспределениеПоУпаковкам = уатОбщегоНазначения_уэ.УпаковатьНоменклатуру(ТекСтрокаТовар.Номенклатура, ТекСтрокаТовар.Количество);
				
				Для Каждого ТекСтрокаУпаковки Из РаспределениеПоУпаковкам Цикл 
					ДанныеСтроки = Новый Структура();
					ДанныеСтроки.Вставить("Тара",       ТекСтрокаУпаковки.ВидУпаковки);
					ДанныеСтроки.Вставить("Количество", ТекСтрокаУпаковки.Количество);
					ДанныеСтроки.Вставить("ВесТары",    ТекСтрокаУпаковки.ВидУпаковки.ВесТары * ТекСтрокаУпаковки.Количество);
					
					Результат.Добавить(ДанныеСтроки);
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции // ПолучитьДанныеПоТаре()

&НаСервереБезКонтекста
Процедура ОбновитьПолеМЛВАктеОтгрузки(АктОтгрузки, МаршрутныйЛист)
	
	Если ЗначениеЗаполнено(АктОтгрузки) Тогда 
		АктОбъект = АктОтгрузки.ПолучитьОбъект();
		Если АктОбъект.ВидОперации = Перечисления.уатВидыОперацийАктОтгрузки_уэ.ВРейс Тогда 
			Если Не ЗначениеЗаполнено(АктОбъект.МаршрутныйЛист) Тогда 
				АктОбъект.МаршрутныйЛист = МаршрутныйЛист;
				Попытка
					АктОбъект.Записать(РежимЗаписиДокумента.Проведение);
				Исключение
					ТекстОшибки = НСтр("en='Error when installing attribute ""Routing list"" in document ""Act of cargo transfer"".';ru='Ошибка при установке реквизита ""Маршрутный лист"" в документе ""Акт отгрузки"".'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПраваИНастройкиПользователя(Организация, НастройкаПольз)
	Возврат уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, НастройкаПольз);
КонецФункции

&НаСервере
Процедура УстановитьВозможностьРедактированияДоходовРасходов()
	РазрешитьРедактированиеДоходовРасходов = ПолучитьПраваИНастройкиПользователя(
		ПользователиКлиентСервер.АвторизованныйПользователь(), ПланыВидовХарактеристик.уатПраваИНастройки.РазрешитьРедактированиеДоходовРасходов);
		
	Если НЕ РазрешитьРедактированиеДоходовРасходов Тогда
		Элементы.ОказываемыеУслугиРучнойВвод.Доступность = Ложь;
		Элементы.ОказываемыеУслугиНоменклатура.Доступность = Ложь;
		Элементы.ОказываемыеУслугиСодержание.Доступность = Ложь;
		Элементы.ОказываемыеУслугиТариф.ТолькоПросмотр = Истина;
		Элементы.ОказываемыеУслугиКоличество.Доступность = Ложь;
		Элементы.ОказываемыеУслугиЦена.Доступность = Ложь;
		Элементы.ОказываемыеУслугиСумма.Доступность = Ложь;
		Элементы.ПолучаемыеУслугиРучнойВвод.Доступность = Ложь;
		Элементы.ПолучаемыеУслугиНоменклатура.Доступность = Ложь;
		Элементы.ПолучаемыеУслугиСодержание.Доступность = Ложь;
		Элементы.ПолучаемыеУслугиТариф.ТолькоПросмотр = Истина;
		Элементы.ПолучаемыеУслугиКоличество.Доступность = Ложь;
		Элементы.ПолучаемыеУслугиЦена.Доступность = Ложь;
		Элементы.ПолучаемыеУслугиСумма.Доступность = Ложь;
		Если флИспользоватьПлановыеУслуги Тогда
			Элементы.ПолучаемыеУслугиКоличествоПлан.Доступность = Ложь;
			Элементы.ПолучаемыеУслугиЦенаПлан.Доступность = Ложь;
			Элементы.ПолучаемыеУслугиСуммаПлан.Доступность = Ложь;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры 

&НаСервере
Процедура УстановитьВозможностьРедактированияФакта()
	РазрешитьРедактированиеФактаВМЛ = ПолучитьПраваИНастройкиПользователя(
		ПользователиКлиентСервер.АвторизованныйПользователь(), ПланыВидовХарактеристик.уатПраваИНастройки.РазрешитьРедактированиеФактаВМЛ);
		
	Если НЕ РазрешитьРедактированиеФактаВМЛ Тогда
		Элементы.ЗаказыДеревоГруппаПрибытиеФакт.Доступность = Ложь;
		Элементы.ЗаказыДеревоГруппаУбытиеФакт.Доступность   = Ложь;
		Элементы.ЗаказыДеревоОжиданиеФакт.Доступность       = Ложь;
		Элементы.ЗаказыДеревоСтоянкаФакт.Доступность        = Ложь;
		Элементы.ЗаказыДеревоРасстояниеФакт.Доступность     = Ложь;
		Элементы.ЗаказыДеревоВремяФакт.Доступность          = Ложь;
		Элементы.ЗаказыДеревоВыполнен.Доступность           = Ложь;
		
		Элементы.ЗаказыГруппаУбытиеФакт.Доступность         = Ложь;
		Элементы.ЗаказыГруппаПрибытиеФакт.Доступность       = Ложь;
		Элементы.ЗаказыОжиданиеФакт.Доступность             = Ложь;
		Элементы.ЗаказыСтоянкаФакт.Доступность              = Ложь;
		Элементы.ЗаказыРасстояниеФакт.Доступность           = Ложь;
		Элементы.ЗаказыВремяФакт.Доступность                = Ложь;
		Элементы.ЗаказыВыполнен.Доступность                 = Ложь;
		
		Элементы.Заказы1ГруппаУбытиеФакт.Доступность        = Ложь;
		Элементы.Заказы1ГруппаПрибытиеФакт.Доступность      = Ложь;
		Элементы.Заказы1ОжиданиеФакт.Доступность            = Ложь;
		Элементы.Заказы1СтоянкаФакт.Доступность             = Ложь;
		Элементы.Заказы1РасстояниеФакт.Доступность          = Ложь;
		Элементы.Заказы1ВремяФакт.Доступность               = Ложь;
		Элементы.Заказы1Выполнен.Доступность                = Ложь;
		
		Элементы.ЗаказыДеревоЗаполнитьФактПосещение.Доступность           = Ложь;
		Элементы.ЗаказыЗаполнитьФактПосещение.Доступность                 = Ложь;
		Элементы.ЗаказыЗаполнитьФактическоеВремяПоПлану1.Доступность      = Ложь;
		Элементы.ЗаказыДеревоЗаполнитьФактическоеВремяПоПлану.Доступность = Ложь;
		Элементы.ЗаказыЗаполнитьФактическоеВремяПоПлану.Доступность       = Ложь;
		Элементы.ЗаказыЗаполнитьФактическоеВремяПоПлану1.Доступность      = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВывестиСообщениеОРазмещенииЗаказа()
	
	Если Объект.Заказы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫРАЗИТЬ(уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя КАК Документ.уатЗаказГрузоотправителя) КАК ЗаказГрузоотправителя,
	|	ВЫБОР
	|		КОГДА уатМаршрутныйЛистЗаказы.Номенклатура ССЫЛКА Справочник.Номенклатура
	|			ТОГДА уатМаршрутныйЛистЗаказы.Номенклатура
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	|	КОНЕЦ КАК Номенклатура,
	|	уатМаршрутныйЛистЗаказы.Количество КАК Количество,
	|	уатМаршрутныйЛистЗаказы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	1 КАК Коэффициент,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(уатМаршрутныйЛистЗаказы.ЕдиницаИзмерения) = ТИП(Справочник.уатВидыУпаковки_уэ)
	|			ТОГДА ВЫРАЗИТЬ(уатМаршрутныйЛистЗаказы.ЕдиницаИзмерения КАК Справочник.уатВидыУпаковки_уэ)
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ТИПЗНАЧЕНИЯ(уатМаршрутныйЛистЗаказы.ЕдиницаИзмерения) = ТИП(Справочник.уатТипыКонтейнеров_уэ)
	|					ТОГДА ВЫРАЗИТЬ(уатМаршрутныйЛистЗаказы.ЕдиницаИзмерения КАК Справочник.уатТипыКонтейнеров_уэ)
	|				ИНАЧЕ ВЫРАЗИТЬ(уатМаршрутныйЛистЗаказы.ЕдиницаИзмерения КАК Справочник.ЕдиницыИзмерения)
	|			КОНЕЦ
	|	КОНЕЦ КАК КоличествоВЕдиницеХраненияОстатков,
	|	уатМаршрутныйЛистЗаказы.ЕдиницаИзмеренияПоЗаказу КАК ЕдиницаИзмеренияПоЗаказу,
	|	ВЫБОР
	|		КОГДА уатМаршрутныйЛистЗаказы.Номенклатура ССЫЛКА Справочник.уатГрузовыеМеста_уэ
	|			ТОГДА уатМаршрутныйЛистЗаказы.Номенклатура
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.уатГрузовыеМеста_уэ.ПустаяСсылка)
	|	КОНЕЦ КАК ГрузовоеМесто,
	|	уатМаршрутныйЛистЗаказы.Номенклатура КАК НоменклатураНаименование
	|ПОМЕСТИТЬ втМаршрутныйЛистЗаказы
	|ИЗ
	|	&МаршрутныйЛистЗаказы КАК уатМаршрутныйЛистЗаказы
	|ГДЕ
	|	уатМаршрутныйЛистЗаказы.ТипТочкиМаршрута В (&ТипТочкиРазгрузка)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя,
	|	уатМаршрутныйЛистЗаказы.Номенклатура КАК Номенклатура,
	|	уатМаршрутныйЛистЗаказы.ГрузовоеМесто КАК ГрузовоеМесто,
	|	уатМаршрутныйЛистЗаказы.Номенклатура КАК НоменклатураНаименование,
	|	СУММА(уатМаршрутныйЛистЗаказы.Количество) КАК Количество,
	|	уатМаршрутныйЛистЗаказы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СУММА(ВЫБОР
	|			КОГДА уатМаршрутныйЛистЗаказы.Номенклатура ССЫЛКА Справочник.Номенклатура
	|				ТОГДА ВЫРАЗИТЬ(уатМаршрутныйЛистЗаказы.Количество * (ВЫБОР
	|				КОГДА ТИПЗНАЧЕНИЯ(уатМаршрутныйЛистЗаказы.ЕдиницаИзмерения) = ТИП(Справочник.уатТипыКонтейнеров_уэ)
	|					ТОГДА 1
	|				ИНАЧЕ ВЫБОР
	|						КОГДА ТИПЗНАЧЕНИЯ(уатМаршрутныйЛистЗаказы.ЕдиницаИзмерения) = ТИП(Справочник.уатВидыУпаковки_уэ)
	|								ИЛИ ТИПЗНАЧЕНИЯ(уатМаршрутныйЛистЗаказы.ЕдиницаИзмерения) = ТИП(Справочник.ЕдиницыИзмерения)
	|							ТОГДА уатМаршрутныйЛистЗаказы.ЕдиницаИзмерения.Коэффициент
	|						ИНАЧЕ 1
	|					КОНЕЦ
	|				КОНЕЦ) / уатМаршрутныйЛистЗаказы.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент КАК ЧИСЛО(15, 3))
	|			ИНАЧЕ ВЫРАЗИТЬ(уатМаршрутныйЛистЗаказы.Количество КАК ЧИСЛО(15, 3))
	|		КОНЕЦ) КАК КоличествоВЕдиницеХраненияОстатков,
	|	уатМаршрутныйЛистЗаказы.ЕдиницаИзмеренияПоЗаказу КАК ЕдиницаИзмеренияПоЗаказу
	|ПОМЕСТИТЬ втМаршрутныйЛист
	|ИЗ
	|	втМаршрутныйЛистЗаказы КАК уатМаршрутныйЛистЗаказы
	|
	|СГРУППИРОВАТЬ ПО
	|	уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя,
	|	уатМаршрутныйЛистЗаказы.Номенклатура,
	|	уатМаршрутныйЛистЗаказы.ЕдиницаИзмерения,
	|	уатМаршрутныйЛистЗаказы.ЕдиницаИзмеренияПоЗаказу,
	|	уатМаршрутныйЛистЗаказы.ГрузовоеМесто,
	|	уатМаршрутныйЛистЗаказы.Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втМаршрутныйЛист.ЗаказГрузоотправителя КАК ЗаказНаТС,
	|	втМаршрутныйЛист.Номенклатура КАК Номенклатура,
	|	втМаршрутныйЛист.НоменклатураНаименование КАК НоменклатураНаименование,
	|	втМаршрутныйЛист.КоличествоВЕдиницеХраненияОстатков КАК КоличествоДокументЕдХрОстатков,
	|	втМаршрутныйЛист.Количество КАК КоличествоДокумент,
	|	втМаршрутныйЛист.ЕдиницаИзмерения КАК ЕдиницаИзмеренияДокумент,
	|	ЕСТЬNULL(уатЗаказыНаТСОстатки.КоличествоОстаток, 0) КАК КоличествоОстатокЗаказ,
	|	ЕСТЬNULL(уатЗаказыНаТСОстатки.ЕдиницаИзмерения, втМаршрутныйЛист.ЕдиницаИзмеренияПоЗаказу) КАК ЕдиницаИзмеренияЗаказ,
	|	ВЫБОР
	|		КОГДА втМаршрутныйЛист.Номенклатура ССЫЛКА Справочник.Номенклатура
	|			ТОГДА втМаршрутныйЛист.Номенклатура.ЕдиницаХраненияОстатков
	|		ИНАЧЕ втМаршрутныйЛист.ЕдиницаИзмерения
	|	КОНЕЦ КАК ЕдиницаХраненияОстатков
	|ПОМЕСТИТЬ втЗаказ
	|ИЗ
	|	втМаршрутныйЛист КАК втМаршрутныйЛист
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.уатЗаказыГрузоотправителей.Остатки(&Момент, ) КАК уатЗаказыНаТСОстатки
	|		ПО втМаршрутныйЛист.ЗаказГрузоотправителя = уатЗаказыНаТСОстатки.ЗаказГрузоотправителя
	|			И втМаршрутныйЛист.Номенклатура = уатЗаказыНаТСОстатки.Номенклатура
	|			И втМаршрутныйЛист.ЕдиницаИзмеренияПоЗаказу = уатЗаказыНаТСОстатки.ЕдиницаИзмерения
	|			И втМаршрутныйЛист.ГрузовоеМесто = уатЗаказыНаТСОстатки.ГрузовоеМесто
	|			И втМаршрутныйЛист.ЗаказГрузоотправителя.Контрагент = уатЗаказыНаТСОстатки.Контрагент
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	втЗаказ.ЗаказНаТС КАК ЗаказНаТС,
	|	втЗаказ.Номенклатура КАК Номенклатура,
	|	втЗаказ.НоменклатураНаименование КАК НоменклатураНаименование,
	|	втЗаказ.КоличествоДокументЕдХрОстатков КАК КоличествоДокументЕдХрОстатков,
	|	втЗаказ.КоличествоДокумент КАК КоличествоДокумент,
	|	втЗаказ.ЕдиницаИзмеренияДокумент КАК ЕдиницаИзмеренияДокумент,
	|	втЗаказ.КоличествоОстатокЗаказ КАК КоличествоОстатокЗаказ,
	|	втЗаказ.ЕдиницаИзмеренияЗаказ КАК ЕдиницаИзмеренияЗаказ,
	|	втЗаказ.ЕдиницаХраненияОстатков КАК ЕдиницаХраненияОстатков,
	|	ЕСТЬNULL(уатЗаказыГрузоотправителей.Регистратор, ЗНАЧЕНИЕ(Документ.уатМаршрутныйЛист.ПустаяСсылка)) КАК Регистратор
	|ИЗ
	|	втЗаказ КАК втЗаказ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.уатЗаказыГрузоотправителей КАК уатЗаказыГрузоотправителей
	|		ПО втЗаказ.ЗаказНаТС = уатЗаказыГрузоотправителей.ЗаказГрузоотправителя
	|			И (ТИПЗНАЧЕНИЯ(уатЗаказыГрузоотправителей.Регистратор) = ТИП(Документ.уатМаршрутныйЛист))";
	
	Запрос = Новый Запрос(ТекстЗапроса);
	
	Запрос.УстановитьПараметр("Момент",                    ТекущаяДата());
	Запрос.УстановитьПараметр("МаршрутныйЛистЗаказы",      Объект.Заказы.Выгрузить());
	
	ТипТочкиРазгрузка = Новый Массив();
	ТипТочкиРазгрузка.Добавить(Перечисления.уатТипыТочекМаршрута.Разгрузка);
	ТипТочкиРазгрузка.Добавить(Перечисления.уатТипыТочекМаршрута.ДополнительнаяРазгрузка);  
	
	Запрос.УстановитьПараметр("ТипТочкиРазгрузка", ТипТочкиРазгрузка);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка          = РезультатЗапроса.Выгрузить();
	тчВыборка        = Выборка.Скопировать();
	тчВыборка.Свернуть("ЗаказНаТС, Номенклатура, НоменклатураНаименование, ЕдиницаИзмеренияЗаказ, ЕдиницаХраненияОстатков, КоличествоОстатокЗаказ, КоличествоДокументЕдХрОстатков");
	
	СтрокаСообщения = "";
	Для Каждого ТекСтрока Из тчВыборка Цикл
		ДетальнаяВыборка = Выборка.НайтиСтроки(Новый Структура("ЗаказНаТС, Номенклатура, ЕдиницаИзмеренияЗаказ, ЕдиницаХраненияОстатков", ТекСтрока.ЗаказНаТС, ТекСтрока.Номенклатура, ТекСтрока.ЕдиницаИзмеренияЗаказ, ТекСтрока.ЕдиницаХраненияОстатков));
		Если ДетальнаяВыборка.Количество() > 0 И ЗначениеЗаполнено(ДетальнаяВыборка[0].Регистратор) Тогда
			СтрокаСообщения = НСтр("en='Order for trucking:';ru='Заказ на ТС:'") + уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ТекСтрока.ЗаказНаТС)+ " " + НСтр("en='by products and services:';ru='по номенклатуре:'") + " '" + ТекСтрока.НоменклатураНаименование  + "'";
			СтрокаСообщения = СтрокаСообщения + " " + НСтр("en='already posted in Routing lists:';ru='уже размещен в Маршрутных листах:'");
		Иначе
			Продолжить;
		КонецЕсли;
		Для Каждого ТекМЛ Из ДетальнаяВыборка Цикл
			Если ЗначениеЗаполнено(ТекМЛ.Регистратор) Тогда
				СтрокаСообщения = СтрокаСообщения + Символы.ПС + уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ТекМЛ.Регистратор);
			КонецЕсли;
		КонецЦикла;
		
		СтрокаСообщения = СтрокаСообщения + Символы.ПС
			+ НСтр("en='Remain:';ru='Доступный остаток:'") + " " + ТекСтрока.КоличествоОстатокЗаказ + " " + ТекСтрока.ЕдиницаИзмеренияЗаказ;
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаСообщения);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеРаспределенияЗаказовПоСекциям(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Объект.Секции.Очистить();
	
	Для Каждого ТекСтрока Из РезультатЗакрытия Цикл 
		НовСтрока = Объект.Секции.Добавить();
		НовСтрока.GUIDСтроки = ТекСтрока.GUIDСтроки;
		НовСтрока.Секция     = ТекСтрока.Секция;
		НовСтрока.Объем      = ТекСтрока.Объем;
	КонецЦикла;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПараметрыАвтоматическогоРазмещенияВСекциях()
	
	Результат = Новый Структура("АвтоРазмещениеВключено, ОбъемВсего, Распределено", Ложь, 0, 0);
	
	Если Не Константы.уатИспользоватьРазмещениеВСекциях_уэ.Получить() Тогда 
		Возврат Результат;
	КонецЕсли;
	
	НастройкиАРМЛогиста = ПолучитьНастройкиМаршрутизации(Объект.ШаблонНастроек);
	Если Не НастройкиАРМЛогиста.НастройкаУчитыватьСекцииТранспортныхСредств Тогда 
		Возврат Результат;
	КонецЕсли;
	
	мсвТС = Новый Массив();
	мсвТС.Добавить(Объект.ТС);
	мсвТС.Добавить(Объект.Прицеп1);
	мсвТС.Добавить(Объект.Прицеп2);
	
	ЗапросСекции = Новый Запрос();
	ЗапросСекции.УстановитьПараметр("мсвТС", мсвТС);
	
	ЗапросСекции.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатСекцииТС.Наименование КАК Наименование
	|ИЗ
	|	Справочник.уатСекцииТС КАК уатСекцииТС
	|ГДЕ
	|	уатСекцииТС.Владелец В(&мсвТС)
	|	И НЕ уатСекцииТС.ПометкаУдаления";
	
	Если ЗапросСекции.Выполнить().Пустой() Тогда 
		Возврат Результат;
	КонецЕсли;
	
	Результат.АвтоРазмещениеВключено = Истина;
	
	Для Каждого ТекСтрока Из Объект.Заказы Цикл 
		Если Не ТекСтрока.ТипТочкиМаршрута = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Погрузка") Тогда 
			Продолжить;
		КонецЕсли;
		
		Результат.ОбъемВсего = Результат.ОбъемВсего + ТекСтрока.Объем;
		
		НайдСтроки = Объект.Секции.НайтиСтроки(Новый Структура("GUIDСтроки", ТекСтрока.GUIDСтроки));
		Для Каждого НайдСтрока Из НайдСтроки Цикл 
			Результат.Распределено = Результат.Распределено + НайдСтрока.Объем;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ПередЗаписьюОтветАвтоРазмещение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда 
		АвтоматическоеРаспределениеСервер();
		
		Если Записать(ДополнительныеПараметры) Тогда 
			Если флЗакрыватьПриЗаписи Тогда 
				Закрыть();
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда 
		Если Записать(ДополнительныеПараметры) Тогда 
			Если флЗакрыватьПриЗаписи Тогда 
				Закрыть();
			КонецЕсли;
		КонецЕсли;
		
	Иначе 
		флПодтвердитьПерераспределение = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура АвтоматическоеРаспределениеСервер()
	
	Объект.Секции.Очистить();
	
	ЗаказыКРазмещению = Новый Массив();
	Для Каждого ТекСтрока Из Объект.Заказы Цикл 
		Если Не ТекСтрока.ТипТочкиМаршрута = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Погрузка") Тогда 
			Продолжить;
		КонецЕсли;
		
		ДанныеЗаказа = Новый Структура();
		ДанныеЗаказа.Вставить("Заказ", ТекСтрока.GUIDСтроки);
		ДанныеЗаказа.Вставить("Груз",  ТекСтрока.Номенклатура);
		ДанныеЗаказа.Вставить("Объем", ТекСтрока.Объем);
		ЗаказыКРазмещению.Добавить(ДанныеЗаказа);
	КонецЦикла;
	
	мсвТС = Новый Массив();
	мсвТС.Добавить(Объект.ТС);
	мсвТС.Добавить(Объект.Прицеп1);
	мсвТС.Добавить(Объект.Прицеп2);
	
	ЗапросСекции = Новый Запрос();
	ЗапросСекции.УстановитьПараметр("мсвТС", мсвТС);
	
	Если Константы.уатЕдиницаИзмеренияОбъема.Получить() = Перечисления.уатЕдиницыИзмеренияОбъема.Литр Тогда 
		ЗапросСекции.УстановитьПараметр("КоэфОбъемаКузова", 1000);
	Иначе 
		ЗапросСекции.УстановитьПараметр("КоэфОбъемаКузова", 1);
	КонецЕсли;
	
	ЗапросСекции.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатСекцииТС.Владелец КАК ТС,
	|	уатСекцииТС.Ссылка КАК Секция,
	|	уатСекцииТС.Объем * &КоэфОбъемаКузова КАК ОбъемСекции
	|ИЗ
	|	Справочник.уатСекцииТС КАК уатСекцииТС
	|ГДЕ
	|	уатСекцииТС.Владелец В(&мсвТС)
	|	И НЕ уатСекцииТС.ПометкаУдаления";
	
	ТекущиеСекции = ЗапросСекции.Выполнить().Выгрузить();
	
	НастройкиАРМЛогиста = ПолучитьНастройкиМаршрутизации(Объект.ШаблонНастроек);
	
	РезультатРаспределения = Обработки.уатАРМЛогиста_уэ.ПолучитьДанныеРазмещенияЗаказовПоСекциям(
		ЗаказыКРазмещению,
		Новый ДеревоЗначений(),
		НастройкиАРМЛогиста.НастройкаСмешиватьГрузыВСекциях,
		ТекущиеСекции
	);
	
	Если РезультатРаспределения.Размещено Тогда 
		Для Каждого ТекСтрока Из РезультатРаспределения.ТаблицаРазмещения Цикл 
			Для Каждого ТекЗаказ Из ТекСтрока.Заказы Цикл 
				НовСтрока = Объект.Секции.Добавить();
				НовСтрока.GUIDСтроки = ТекЗаказ.Заказ;
				НовСтрока.Секция     = ТекСтрока.Секция;
				НовСтрока.Объем      = ТекЗаказ.Объем;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьВозможностьПеретаскиванияЗаказаВМаршрутах(СтрокаЗаказа, СтрокаПунктИсточник, СтрокаПунктПриемник)
	
	Если ЗначениеЗаполнено(СтрокаЗаказа.ЗаказГрузоотправителя) Тогда 
		НайдСтрокиЗаказов = НайтиСтрокиВДереве(ЗаказыДерево.ПолучитьЭлементы(), Новый Структура("ЗаказГрузоотправителя", СтрокаЗаказа.ЗаказГрузоотправителя), Истина);
		
	ИначеЕсли ТипЗнч(СтрокаЗаказа.ПунктЗаказНоменклатура) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") Тогда 
		НайдСтрокиЗаказов = НайтиСтрокиВДереве(ЗаказыДерево.ПолучитьЭлементы(), Новый Структура("ПунктЗаказНоменклатура", СтрокаЗаказа.ПунктЗаказНоменклатура), Истина);
		
	Иначе 
		Возврат Ложь;
	КонецЕсли;
	
	Если НайдСтрокиЗаказов[0] = СтрокаЗаказа Тогда
		СтрокаПунктСмежный = НайдСтрокиЗаказов[1];
	Иначе
		СтрокаПунктСмежный = НайдСтрокиЗаказов[0];
	КонецЕсли;
	Пока СтрокаПунктСмежный.ПолучитьРодителя() <> Неопределено Цикл
		СтрокаПунктСмежный = СтрокаПунктСмежный.ПолучитьРодителя();
	КонецЦикла;
	
	ИндексИсточник = ЗаказыДерево.ПолучитьЭлементы().Индекс(СтрокаПунктИсточник);
	ИндексПриемник = ЗаказыДерево.ПолучитьЭлементы().Индекс(СтрокаПунктПриемник);
	ИндексСмежный  = ЗаказыДерево.ПолучитьЭлементы().Индекс(СтрокаПунктСмежный);
	
	Если ИндексИсточник = ИндексПриемник тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если СтрокаЗаказа.ТипТочкиМаршрута = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Погрузка") Тогда
		// Перетягиваем вниз и погрузка не окажется ниже разгрузки.
		Если ИндексИсточник < ИндексПриемник И ИндексСмежный <= ИндексПриемник тогда
			ПеретягиваниеВозможно = Ложь;
		Иначе
			ПеретягиваниеВозможно = Истина;
		КонецЕсли;
		
	Иначе
		// Перетягиваем вверх и разгрузка не окажется выше погрузки.
		Если ИндексИсточник > ИндексПриемник И ИндексСмежный >= ИндексПриемник тогда
			ПеретягиваниеВозможно = Ложь;
		Иначе
			ПеретягиваниеВозможно = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Возврат ПеретягиваниеВозможно;
	
КонецФункции

&НаСервере
Процедура РасчетРасходаГСМСервер(Отказ = Ложь, СписокНормРасхода = Неопределено)
	
	Документы.уатМаршрутныйЛист.РасчетРасходаГСМ(Объект, Отказ, СписокНормРасхода);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемВопрос(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.ОК Тогда
		флВопросЗакрытиеФормы = Ложь;
		Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлагРучногоРедактирования(ТекСтрокаТабличнойЧасти, флПолучаемыеУслуги = Ложь)
	ТекСтрокаТабличнойЧасти.РучнойВвод = Истина;
	Если флПолучаемыеУслуги Тогда
		ОбновитьВсегоВТЧПолучаемыеУслуги();
	Иначе
		ОбновитьВсегоВТЧОказываемыеУслуги();
	КонецЕсли;
	ВывестиСуммовыеИтогиДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ФактическоеПосещениеПунктовПоДаннымМониторингаЗавершение()
	
	НайденныйРезультат = ПолучитьИзВременногоХранилища(АдресХранилищаФактПосещения);
	Если ТипЗнч(НайденныйРезультат) = Тип("Массив") Тогда
		ОтключитьОбработчикОжидания("ФактическоеПосещениеПунктовПоДаннымМониторингаЗавершение");
				
		Если НайденныйРезультат.Количество() > 0 Тогда
			Модифицированность = Истина;
		КонецЕсли;
		
		Для Каждого ТекСтрока Из НайденныйРезультат Цикл
			НайдСтроки = Объект.Заказы.НайтиСтроки(Новый Структура("GUIDСтроки", ТекСтрока.НомерСтроки));
			Для Каждого Строка Из НайдСтроки Цикл
				ЗаполнитьЗначенияСвойств(Строка, ТекСтрока);
			КонецЦикла;
		КонецЦикла;
		
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя") И РежимОтображенияДерево Тогда
			Если Не флПланФакт И ЗаказыДерево.ПолучитьЭлементы().Количество() > 0 И Объект.Заказы.Количество() > 0 Тогда
				// Обновление планового времени отправления по Маршрутному листу для корректного пересчета дерева
				ПрибытиеВПервыйПунктПлан = Объект.Заказы[0].ПрибытиеПлан;
				СтоянкаПервогоПункта     = Объект.Заказы[0].Стоянка;
				СтоянкаПервогоПункта     = уатЗащищенныеФункцииСервер.СложитьВремя(СтоянкаПервогоПункта, Объект.Заказы[0].СтоянкаИзПункта);
				Объект.ДатаИВремяОтправленияПлан = уатЗащищенныеФункцииСервер.СложитьВремя(ПрибытиеВПервыйПунктПлан, СтоянкаПервогоПункта);
			КонецЕсли;
			ОбновитьДеревоЗаказовНаСервере();
			Элементы.ЗаказыДерево.НачальноеОтображениеДерева = НачальноеОтображениеДерева.РаскрыватьВерхнийУровень;
			ЗаказыДеревоИзменитьДатыВШапке();
			ОбновитьНадписьЗаказыДопВыработка();
		Иначе 
			ЗаказыИзменитьДатыВШапке();
		КонецЕсли;   
		
	Иначе
		ПодключитьОбработчикОжидания("ФактическоеПосещениеПунктовПоДаннымМониторингаЗавершение", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняет пересчет в табличной части документа после изменений 
// в форме "Цены и валюта".Выполняется пересчет колонок: цена, скидка, сумма,
// сумма НДС, всего.
//
&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты(Знач Оповещение, Знач ВалютаРасчетовПередИзменением, ПересчитатьЦены = Ложь)
	
	// 1. Формируем структуру параметров для заполнения формы "Цены и Валюта".
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВалютаДокумента",		  Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("Курс",				  Объект.Курс);
	СтруктураПараметров.Вставить("Кратность",			  Объект.Кратность);
	СтруктураПараметров.Вставить("ДатаКурса",             Объект.ДатаКурса);
	//СтруктураПараметров.Вставить("Контрагент",			  Объект.Контрагент);
	//СтруктураПараметров.Вставить("Договор",				  Объект.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("Организация",			  Объект.Организация);
	СтруктураПараметров.Вставить("ДатаДокумента",		  Объект.Дата);
	СтруктураПараметров.Вставить("ПерезаполнитьЦены",	  Ложь);
	СтруктураПараметров.Вставить("ПересчитатьЦены",		  ПересчитатьЦены);
	СтруктураПараметров.Вставить("БылиВнесеныИзменения",  Ложь);
	//СтруктураПараметров.Вставить("СуммаВключаетНДС",      Объект.СуммаВключаетНДС);
	//СтруктураПараметров.Вставить("НалогообложениеНДС",	  Объект.УчитыватьНДС);
	
	ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров,,,,, Новый ОписаниеОповещения("ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение",
		ЭтотОбъект, Новый Структура("ВалютаРасчетовПередИзменением, Оповещение", ВалютаРасчетовПередИзменением, Оповещение)),
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры // ОбработатьИзмененияПоКнопкеЦеныИВалюты()

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВалютаРасчетовПередИзменением = ДополнительныеПараметры.ВалютаРасчетовПередИзменением;
	Оповещение = ДополнительныеПараметры.Оповещение;
	СтруктураЦеныИВалюта = Результат;
	
	// 3. Перезаполняем табличную часть "Номенклатура", если были внесены изменения в форме "Цены и Валюта".
	Если ТипЗнч(СтруктураЦеныИВалюта) = Тип("Структура")  Тогда
		ДопПараметры = Новый Структура("ПредКурс, ПредКратность, Курс, Кратность",
			Объект.Курс, Объект.Кратность, СтруктураЦеныИВалюта.Курс, СтруктураЦеныИВалюта.Кратность);
			
		Если СтруктураЦеныИВалюта.Свойство("ВалютаДокумента") И СтруктураЦеныИВалюта.Свойство("Курс") И СтруктураЦеныИВалюта.Свойство("Кратность") И
			СтруктураЦеныИВалюта.Свойство("СуммаВключаетНДС") И  СтруктураЦеныИВалюта.Свойство("НалогообложениеНДС") Тогда
			
			Объект.ВалютаДокумента		   = СтруктураЦеныИВалюта.ВалютаДокумента;
			Объект.Курс	                   = СтруктураЦеныИВалюта.Курс;
			Объект.Кратность               = СтруктураЦеныИВалюта.Кратность;
			Объект.ДатаКурса               = СтруктураЦеныИВалюта.ДатаКурса;
			
			Если НЕ флМноговалютныйУчет Тогда
				Для Каждого ТекСтрока Из Объект.Доходы Цикл
					ТекСтрока.Валюта = Объект.ВалютаДокумента;
				КонецЦикла;
				Для Каждого ТекСтрока Из Объект.Расходы Цикл
					ТекСтрока.Валюта = Объект.ВалютаДокумента;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		// Пересчитываем цены по валюте.
		Если НЕ флМноговалютныйУчет И СтруктураЦеныИВалюта.ПересчитатьЦены Тогда	
			ПересчитатьЦеныТабличнойЧастиПоВалюте(ВалютаРасчетовПередИзменением, "Доходы");
			ПересчитатьЦеныТабличнойЧастиПоВалюте(ВалютаРасчетовПередИзменением, "Расходы");
		КонецЕсли;
	КонецЕсли;
	
	РассчитатьСуммуДокумента();
	ОбновитьВсегоВТЧОказываемыеУслуги();
	ОбновитьВсегоВТЧПолучаемыеУслуги();
	ОбновитьНадписьИтоги();
	ВывестиСуммовыеИтогиДокумента();
	
	УстановитьВидимостьИДоступностьЭлементовФормы();
	
	Если Оповещение <> Неопределено Тогда 
		ВыполнитьОбработкуОповещения(Оповещение);
	КонецЕсли;
	
КонецПроцедуры // ОбработатьИзмененияПоКнопкеЦеныИВалюты()

&НаСервере
Процедура РассчитатьСуммуДокумента()
	СтруктураДокумента = уатОбщегоНазначенияКлиентСервер.СтруктураДокумента(Объект, "уатМаршрутныйЛист");
	Объект.СуммаДоходов = уатОбщегоНазначенияТиповые.уатПолучитьСуммуДокументаСНДС(СтруктураДокумента, "Доходы");
	Объект.СуммаЗатрат  = уатОбщегоНазначенияТиповые.уатПолучитьСуммуДокументаСНДС(СтруктураДокумента, "Расходы");
КонецПроцедуры

&НаКлиенте
Процедура ВывестиСуммовыеИтогиДокумента()
	Если НЕ ЗначениеЗаполнено(Объект.ВалютаДокумента) ИЛИ Объект.ВалютаДокумента = мВалютаРегламентированногоУчета Тогда 
		НадписьКурс = "(1.0000)";
		Элементы.НадписьКурс.Видимость = Ложь;
	Иначе
		НадписьКурс = "(" + Формат(
			?(Объект.Кратность = 0, Объект.Курс, Объект.Курс/Объект.Кратность),
			"ЧДЦ=4; ЧРД=.; ЧН=0.0000; ЧГ=0") + ")";
		Элементы.НадписьКурс.Видимость = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриИзмененииВалюты(ИмяТЧ)
	ТекСтрока = Элементы[ИмяТЧ].ТекущиеДанные;
	
	Если ТекСтрока.Валюта = ДанныеСтрокиУслуги.Валюта Тогда
		Возврат;
	КонецЕсли;
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ТекСтрока", ТекСтрока);
	ДопПараметры.Вставить("ИмяТЧ", ИмяТЧ);
	
	Если ТекСтрока.Цена = 0 И ТекСтрока.ЦенаПлан = 0 Тогда
		УслугиПриИзмененииВалютыЗавершение(КодВозвратаДиалога.Нет, ДопПараметры);
	Иначе
		Оповещ = Новый ОписаниеОповещения("УслугиПриИзмененииВалютыЗавершение", ЭтотОбъект, ДопПараметры);
		ПоказатьВопрос(Оповещ, "Изменилась валюта строки. Пересчитать цену и сумму по курсу?", РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриИзмененииВалютыЗавершение(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда //пересчет сумм в строке по курсу
		СтруктураКурсаПред = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ДанныеСтрокиУслуги.Валюта, Объект.ДатаКурса);
		СтруктураКурса = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ДопПараметры.ТекСтрока.Валюта, Объект.ДатаКурса);
				
		ДопПараметры.ТекСтрока.Цена = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ДопПараметры.ТекСтрока.Цена,
			ДанныеСтрокиУслуги.Валюта,
			ДопПараметры.ТекСтрока.Валюта,
			СтруктураКурсаПред.Курс,
			СтруктураКурса.Курс,
			СтруктураКурсаПред.Кратность,
			СтруктураКурса.Кратность);
		РассчитатьСуммуВСтрокеТабличнойЧасти(ДопПараметры.ТекСтрока, "Факт", ДопПараметры.ИмяТЧ = "ПолучаемыеУслуги");
		
		Если флИспользоватьПлановыеУслуги И ДопПараметры.ИмяТЧ = "ПолучаемыеУслуги" Тогда
			ДопПараметры.ТекСтрока.ЦенаПлан = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ДопПараметры.ТекСтрока.ЦенаПлан,
				ДанныеСтрокиУслуги.Валюта,
				ДопПараметры.ТекСтрока.Валюта,
				СтруктураКурсаПред.Курс,
				СтруктураКурса.Курс,
				СтруктураКурсаПред.Кратность,
				СтруктураКурса.Кратность);
			РассчитатьСуммуВСтрокеТабличнойЧасти(ДопПараметры.ТекСтрока, "План", Истина);
		КонецЕсли;
		
		Если ДопПараметры.ИмяТЧ = "ПолучаемыеУслуги" Тогда
			РассчитатьСуммуНДС(ДопПараметры.ТекСтрока,, Истина);
			РассчитатьСуммуВсегоВстрокеТЧ(ДопПараметры.ТекСтрока,, Истина);
		Иначе
			РассчитатьСуммуНДС(ДопПараметры.ТекСтрока, "Факт", Ложь);
			РассчитатьСуммуВсегоВстрокеТЧ(ДопПараметры.ТекСтрока, "Факт", Ложь);
		КонецЕсли;
	КонецЕсли;
	
	Если ДопПараметры.ИмяТЧ = "ПолучаемыеУслуги" Тогда
		ОбновитьВсегоВТЧПолучаемыеУслуги();
	Иначе
		ОбновитьВсегоВТЧОказываемыеУслуги();
	КонецЕсли;
	
	РассчитатьСуммуДокумента();
	ВывестиСуммовыеИтогиДокумента();
	ОбновитьНадписьИтоги();
	
	ДанныеСтрокиУслуги.Валюта = ДопПараметры.ТекСтрока.Валюта;
	
	ДопПараметры.ТекСтрока.РучнойВвод = Истина;
	Модифицированность = Истина;	
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриИзмененииУчитыватьНДС(ИмяТЧ)
	ТекСтрока = Элементы[ИмяТЧ].ТекущиеДанные;
	
	ПредСуммаВключаетНДС = ТекСтрока.СуммаВключаетНДС;
	ПредУчитыватьНДС     = ТекСтрока.УчитыватьНДС;
	
	Если ТекСтрока.УчитыватьНДСПредставление = "Строка без НДС" Тогда
		ТекСтрока.УчитыватьНДС = Ложь;
		ТекСтрока.СуммаВключаетНДС = Ложь;
		ТекСтрока.СтавкаНДС = Неопределено;
		ТекСтрока.СуммаНДС = 0;
		ТекСтрока.Всего = 0;
		Если флИспользоватьПлановыеУслуги И ИмяТЧ = "ПолучаемыеУслуги" Тогда
			ТекСтрока.СуммаНДСПлан = 0;
			ТекСтрока.ВсегоПлан = 0;
		КонецЕсли;
	ИначеЕсли ТекСтрока.УчитыватьНДСПредставление = "НДС в сумме" Тогда
		ТекСтрока.УчитыватьНДС = Истина;
		ТекСтрока.СуммаВключаетНДС = Истина;
	Иначе
		ТекСтрока.УчитыватьНДС = Истина;
		ТекСтрока.СуммаВключаетНДС = Ложь;
	КонецЕсли;
	
	Если ТекСтрока.УчитыватьНДС И НЕ ЗначениеЗаполнено(ТекСтрока.СтавкаНДС) Тогда
		ТекСтрока.СтавкаНДС = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрока.Номенклатура, "СтавкаНДС");
	КонецЕсли;
	
	Если ПредСуммаВключаетНДС <> ТекСтрока.СуммаВключаетНДС ИЛИ ПредУчитыватьНДС <> ТекСтрока.УчитыватьНДС Тогда
		СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеСтавкиНДС(ТекСтрока.СтавкаНДС);
		Если ПредУчитыватьНДС Тогда
			Если ТекСтрока.СуммаВключаетНДС Тогда
				ТекСтрока.Цена = (ТекСтрока.Цена * (100 + СтавкаНДС)) / 100;
				Если флИспользоватьПлановыеУслуги И ИмяТЧ = "ПолучаемыеУслуги" Тогда
					ТекСтрока.ЦенаПлан = (ТекСтрока.ЦенаПлан * (100 + СтавкаНДС)) / 100;
				КонецЕсли;
			Иначе
				ТекСтрока.Цена = (ТекСтрока.Цена * 100) / (100 + СтавкаНДС);
				Если флИспользоватьПлановыеУслуги И ИмяТЧ = "ПолучаемыеУслуги" Тогда
					ТекСтрока.ЦенаПлан = (ТекСтрока.ЦенаПлан * 100) / (100 + СтавкаНДС);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрока,, ИмяТЧ = "ПолучаемыеУслуги");
	КонецЕсли;

	Если ИмяТЧ = "ПолучаемыеУслуги" Тогда
		ОбновитьПредставлениеНДСвТЧ("Расходы", ТекСтрока);
	Иначе
		ОбновитьПредставлениеНДСвТЧ("Доходы", ТекСтрока);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПодвалДоходовРасходов(ИмяТЧ = Неопределено)
	Если ИмяТЧ = Неопределено Тогда
		ОбновитьПодвалДоходовРасходов("Доходы");
		ОбновитьПодвалДоходовРасходов("Расходы");
		Возврат;
	КонецЕсли;
	
	ИмяЭлементаТЧ = ?(ИмяТЧ = "Доходы", "ОказываемыеУслуги", "ПолучаемыеУслуги");
	
	СтрокаКолонки = "Сумма, СуммаНДС, Всего";
	Если ИмяТЧ = "Расходы" И флИспользоватьПлановыеУслуги Тогда
		СтрокаКолонки = СтрокаКолонки + ", СуммаПлан, СуммаНДСПлан, ВсегоПлан";
	КонецЕсли;
	СтруктураКолонки = Новый Структура(СтрокаКолонки);
	
	соотвИтогиВВалюте = Новый Соответствие;
	Для Каждого ТекСтрока Из Объект[ИмяТЧ] Цикл
		ТекЭлем = соотвИтогиВВалюте.Получить(ТекСтрока.Валюта);
		Если ТекЭлем = Неопределено Тогда
			ТекСтруктураКолонки = Новый Структура(СтрокаКолонки);
			ЗаполнитьЗначенияСвойств(ТекСтруктураКолонки, ТекСтрока);
			соотвИтогиВВалюте.Вставить(ТекСтрока.Валюта, ТекСтруктураКолонки);
		Иначе
			Для Каждого КолонкаИтоги Из СтруктураКолонки Цикл
				ТекЭлем[КолонкаИтоги.Ключ] = ТекЭлем[КолонкаИтоги.Ключ] + ТекСтрока[КолонкаИтоги.Ключ];
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	мВысотаПодвала = 1;
	
	Для Каждого КолонкаИтоги Из СтруктураКолонки Цикл
		ТекТекстПодвала = "";
		мКоличВалют = 0;
		
		Для Каждого ТекСтрокаИтогиВВалюте Из соотвИтогиВВалюте Цикл
			ТекИтого = ТекСтрокаИтогиВВалюте.Значение[КолонкаИтоги.Ключ];
			Если ТекИтого = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ТекТекстПодвала = ТекТекстПодвала + "
				|" + Формат(ТекИтого, "ЧДЦ=2") + " " + ТекСтрокаИтогиВВалюте.Ключ + "";;
			
			мКоличВалют = мКоличВалют + 1;
		КонецЦикла;
		
		Если ИмяТЧ = "Доходы" Тогда
			ЭтотОбъект["НадписьПодвалДоходы" + КолонкаИтоги.Ключ] = Сред(ТекТекстПодвала, 2);
		Иначе
			ЭтотОбъект["НадписьПодвалРасходы" + КолонкаИтоги.Ключ] = Сред(ТекТекстПодвала, 2);
		КонецЕсли;
		
		//Элементы[ИмяЭлементаТЧ + КолонкаИтоги.Ключ].ТекстПодвала = Сред(ТекТекстПодвала, 2);
		
		мВысотаПодвала = Макс(мВысотаПодвала, мКоличВалют);
	КонецЦикла;
	
	Если Элементы[ИмяЭлементаТЧ].ВысотаПодвала <> мВысотаПодвала Тогда
		Элементы[ИмяЭлементаТЧ].ВысотаПодвала = мВысотаПодвала;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредставлениеНДСвТЧ(ИмяТЧ = "Доходы", ТекСтрокаТЧ = Неопределено)
	Для Каждого ТекСтрока Из Объект[ИмяТЧ] Цикл 
		Если ТекСтрокаТЧ <> Неопределено И ТекСтрока <> ТекСтрокаТЧ Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекСтрока.УчитыватьНДС Тогда 
			Если ТекСтрока.СуммаВключаетНДС Тогда 
				ТекСтрока.УчитыватьНДСПредставление = НСтр("en='VAT amount';ru='НДС в сумме'");
			Иначе 
				ТекСтрока.УчитыватьНДСПредставление = НСтр("en='VAT from above';ru='НДС сверху'");
			КонецЕсли;
		Иначе 
			ТекСтрока.УчитыватьНДСПредставление = НСтр("en='Document excluding VAT';ru='Строка без НДС'");
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиУведомленийЗакрытиеФормы(Результат, ДопПараметры) Экспорт
	Если ТипЗнч(Результат) = Тип("ДанныеФормыКоллекция") Тогда
		Объект.ПолучателиУведомлений.Очистить();
		Для Каждого ТекСтрока Из Результат Цикл
			НоваяСтрока = Объект.ПолучателиУведомлений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		КонецЦикла;
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПересчитатьЦеныТабличнойЧастиПоВалюте(ВалютаРасчетовПередИзменением, ИмяТЧ, ДопПараметры = Неопределено)
	уатОбщегоНазначенияСервер.ПересчитатьЦеныТабличнойЧастиПоВалюте(Объект, ВалютаРасчетовПередИзменением, ИмяТЧ, ДопПараметры);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДатуОтправленияПоЗаказу(ЗаказСсылка)
	Если ЗаказСсылка.FTL И ЗаказСсылка.ПромежуточныеПункты.Количество() > 0 Тогда
		// Время отправления заполняется по плановой дате отправления
		ДатаОтправленияЗаказа = ЗаказСсылка.ПромежуточныеПункты[0].ПрибытиеПлан;
	Иначе
		// Время отправления заполняется по временному окну отправления
		ДатаОтправленияЗаказа = ЗаказСсылка.ОтправлениеС;
	КонецЕсли;
	Возврат ДатаОтправленияЗаказа;
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьСтоянкуВПункте(Пункт, ТипТС, ЗаказГрузоотправителя = Неопределено)
	
	ЭтоГараж = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(Пункт, "Гараж");
	Если НЕ ЗначениеЗаполнено(ЗаказГрузоотправителя) И ЭтоГараж <> Неопределено И НЕ ЭтоГараж Тогда
		СтоянкаИзПункта = уатЗащищенныеФункцииСервер_уэ.ПолучитьВремяСтоянкиВПункте(Пункт, ТипТС);
	ИначеЕсли ЗначениеЗаполнено(ЗаказГрузоотправителя) Тогда
		СтоянкаИзПункта = уатЗащищенныеФункцииСервер_уэ.ПолучитьВремяСтоянкиВПункте(Пункт, ТипТС);
	Иначе 
		СтоянкаИзПункта = 0;
	КонецЕсли;
	
	Возврат СтоянкаИзПункта;
	
КонецФункции

#Область СлужебныеПроцедурыИФункцииСопроводительныеДокументы

&НаКлиенте
Процедура СопроводительныеДокументыОбновить(Результат = Неопределено, ДопПараметры = Неопределено) Экспорт
	Если ИспользуетсяДокументооборот() Тогда
		Элементы.СтатусыСД.Обновить();
	КонецЕсли;
	ВывестиСтатусЗавершенияОбработкиСопроводительныхДокументов();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИспользуетсяДокументооборот()
	Если ПолучитьФункциональнуюОпцию("уатИспользоватьДокументооборот") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура СопроводительныеДокументыПринятьДокументыКонтрагента(КонтрагентИЛИПункт)
	мсвСД = СопроводительныеДокументыПоРейсу(Объект.Ссылка, КонтрагентИЛИПункт);
	Если мсвСД.Количество() = 0 Тогда
		Если КонтрагентИЛИПункт = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка")
			И (Объект.ПринадлежностьПеревозки = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное")
			ИЛИ Объект.ПринадлежностьПеревозки = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Виртуальное")) Тогда
			
			ТекстСообщения = "Не найдено сопроводительных документов по нашей организации";
		Иначе
			Если ТипЗнч(КонтрагентИЛИПункт) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда
				СтрокаВариант = "пункту";
			ИначеЕсли КонтрагентИЛИПункт = Объект.Контрагент Тогда
				СтрокаВариант = "перевозчику";
			Иначе
				СтрокаВариант = "заказчику";
			КонецЕсли;
			
			ТекстСообщения = СтрШаблон("Не найдено сопроводительных документов по %1 ""%2""", СтрокаВариант, КонтрагентИЛИПункт);
		КонецЕсли;
		
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	СтруктураЗаполнения = Новый Структура("СопроводительныеДокументы, Статус",
		мсвСД,
		ПредопределенноеЗначение("Справочник.уатСтатусы_уэ.ОбработкаЗавершена"));
	ПараметрыФормы = Новый Структура("УстановкаСтатусаИзЗаказа", СтруктураЗаполнения);
	ОткрытьФорму("Документ.уатУстановкаСтатусовСопроводительныхДокументов.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект,,,,
		Новый ОписаниеОповещения("СопроводительныеДокументыОбновить", ЭтотОбъект));
КонецПроцедуры

&НаСервере
Функция СопроводительныеДокументыПолучитьЗаказчиковПоРейсу()
	Рез = Новый СписокЗначений;
	Для Каждого ТекСтрока Из Объект.Заказы Цикл
		Если Рез.НайтиПоЗначению(ТекСтрока.ЗаказГрузоотправителя.Контрагент) = Неопределено Тогда
			Рез.Добавить(ТекСтрока.ЗаказГрузоотправителя.Контрагент);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Рез;
КонецФункции

&НаСервере
Функция СопроводительныеДокументыПолучитьПунктыПоРейсу()
	Рез = Новый СписокЗначений;
	Для Каждого ТекСтрока Из Объект.Заказы Цикл
		Если Рез.НайтиПоЗначению(ТекСтрока.Пункт) = Неопределено Тогда
			Рез.Добавить(ТекСтрока.Пункт);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Рез;
КонецФункции

&НаСервере
Процедура УстановитьОтборСопроводительныхДокументов()
	списОснования = Новый СписокЗначений;
	списОснования.Добавить(Объект.Ссылка);
	//Для Каждого ТекЗаказ Из Объект.Заказы Цикл
	//	Если списОснования.НайтиПоЗначению(ТекЗаказ.ЗаказГрузоотправителя) = Неопределено Тогда
	//		списОснования.Добавить(ТекЗаказ.ЗаказГрузоотправителя);
	//	КонецЕсли;
	//КонецЦикла;
		
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СтатусыСД, "Основания", списОснования);
КонецПроцедуры

&НаСервере
Процедура ВывестиСтатусЗавершенияОбработкиСопроводительныхДокументов()
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	уатСтатусыСопроводительныхДокументовСрезПоследних.СопроводительныйДокумент КАК Ссылка
	|ИЗ
	|	РегистрСведений.уатСтатусыСопроводительныхДокументов.СрезПоследних(, СопроводительныйДокумент.Основание = &МаршрутныйЛист) КАК уатСтатусыСопроводительныхДокументовСрезПоследних
	|ГДЕ
	|	уатСтатусыСопроводительныхДокументовСрезПоследних.Статус <> ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.ОбработкаЗавершена)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(уатСтатусыСопроводительныхДокументовСрезПоследних.Период) КАК Период
	|ИЗ
	|	РегистрСведений.уатСтатусыСопроводительныхДокументов.СрезПоследних(, СопроводительныйДокумент.Основание = &МаршрутныйЛист) КАК уатСтатусыСопроводительныхДокументовСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	уатСтатусыСопроводительныхДокументовСрезПоследних.СопроводительныйДокумент КАК Ссылка
	|ИЗ
	|	РегистрСведений.уатСтатусыСопроводительныхДокументов.СрезПоследних(, СопроводительныйДокумент.Основание = &МаршрутныйЛист) КАК уатСтатусыСопроводительныхДокументовСрезПоследних");
	Запрос.УстановитьПараметр("МаршрутныйЛист", Объект.Ссылка);
	Результат = Запрос.ВыполнитьПакет();
	
	Если Результат[2].Пустой() Тогда
		Элементы.ГруппаСтраницыСтатусОбработкиСД.Видимость = Ложь;
		Возврат;
	Иначе
		Элементы.ГруппаСтраницыСтатусОбработкиСД.Видимость = Истина;
	КонецЕсли;
	
	флВсеЗавершены = Результат[0].Пустой();
	Если флВсеЗавершены Тогда
		ВыборкаДата = Результат[1].Выбрать();
		Если ВыборкаДата.Следующий() Тогда
			ДатаОбработкиПоследняя = Формат(ВыборкаДата.Период, "ДФ=dd.MM.yyyy");;
		Иначе
			ДатаОбработкиПоследняя = "";
		КонецЕсли;
		СопроводительныеДокументыОбработкаЗавершена = "Обработка документов завершена " + ДатаОбработкиПоследняя;
	Иначе
		СопроводительныеДокументыОбработкаЗавершена = "Обработка документов не завершена";
	КонецЕсли;
	
	Если флВсеЗавершены Тогда
		Элементы.ГруппаСтраницыСтатусОбработкиСД.ТекущаяСтраница = Элементы.ГруппаСтраницаСтатусОбработкиСДЗавершена;
	Иначе
		Элементы.ГруппаСтраницыСтатусОбработкиСД.ТекущаяСтраница = Элементы.ГруппаСтраницаСтатусОбработкиСДНеЗавершена;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВывестиДатуПлатежаПеревозчику()
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя
	|ПОМЕСТИТЬ тблЗаказы
	|ИЗ
	|	Документ.уатМаршрутныйЛист.Заказы КАК уатМаршрутныйЛистЗаказы
	|ГДЕ
	|	уатМаршрутныйЛистЗаказы.Ссылка = &МЛ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(уатДатыПлатежей.ДатаПлатежа) КАК ДатаПлатежа
	|ИЗ
	|	РегистрСведений.уатДатыПлатежей КАК уатДатыПлатежей
	|ГДЕ
	|	уатДатыПлатежей.Контрагент = &Контрагент
	|	И уатДатыПлатежей.ЗаказНаТС В
	|			(ВЫБРАТЬ
	|				тблЗаказы.ЗаказГрузоотправителя
	|			ИЗ
	|				тблЗаказы)");
	Запрос.УстановитьПараметр("МЛ", Объект.Ссылка);
	Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ДатаПлатежаПеревозчику = Выборка.ДатаПлатежа;
	Иначе
		ДатаПлатежаПеревозчику = '00010101';
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеПолейСтатусов()
	
	мсвПутиКДанным = Новый Массив;
	мсвПутиКДанным.Добавить(Новый Структура("Отбор, Поле", "СтатусыСД.Статус", "СтатусыСДСтатус"));
	мсвПутиКДанным.Добавить(Новый Структура("Отбор, Поле", "ДокументыЭтапов.Статус", "ДокументыЭтаповСтатус"));
		
	уатОбщегоНазначения_проф.УстановитьУсловноеОформлениеСтатусовСД(УсловноеОформление, мсвПутиКДанным);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СопроводительныеДокументыВыделенныеСД(мсвВыделенныеСтроки)
	мсвСопрДокументы = Новый Массив;
	Для Каждого ТекСтрока Из мсвВыделенныеСтроки Цикл
		СтруктураСтроки = Новый Структура("СопроводительныйДокумент", ТекСтрока.СопроводительныйДокумент);
		мсвСопрДокументы.Добавить(СтруктураСтроки);
	КонецЦикла;
	
	Возврат мсвСопрДокументы;
КонецФункции

&НаСервереБезКонтекста
Функция СопроводительныеДокументыВидыДокументовПоШаблону(Шаблон)
	тблВидыДокументов = Шаблон.ВидыДокументов.Выгрузить();
	мсвСтрок = уатОбщегоНазначенияСервер.ПреобразоватьТаблицувМассивСтрок(тблВидыДокументов);
	Возврат мсвСтрок;
КонецФункции

&НаСервереБезКонтекста
Функция СопроводительныеДокументыПоРейсу(МаршрутныйЛист, КонтрагентИЛИПункт = Неопределено, ОбработкаЗавершена = Ложь)
	мсвСопрДокументы = Новый Массив;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	уатСтатусыСопроводительныхДокументовСрезПоследних.СопроводительныйДокумент КАК СопроводительныйДокумент,
	|	уатСтатусыСопроводительныхДокументовСрезПоследних.ПакетДокументов КАК ПакетДокументов,
	|	уатСтатусыСопроводительныхДокументовСрезПоследних.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрСведений.уатСтатусыСопроводительныхДокументов.СрезПоследних КАК уатСтатусыСопроводительныхДокументовСрезПоследних
	|ГДЕ
	|	(&ОбработкаЗавершена
	|				И уатСтатусыСопроводительныхДокументовСрезПоследних.Статус = ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.ОбработкаЗавершена)
	|			ИЛИ НЕ &ОбработкаЗавершена
	|				И уатСтатусыСопроводительныхДокументовСрезПоследних.Статус <> ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.ОбработкаЗавершена))
	|	И уатСтатусыСопроводительныхДокументовСрезПоследних.СопроводительныйДокумент.Основание = &МаршрутныйЛист
	|	И (&Пункт = НЕОПРЕДЕЛЕНО
	|			ИЛИ уатСтатусыСопроводительныхДокументовСрезПоследних.СопроводительныйДокумент.ПунктНазначения = &Пункт)
	|	И (&Контрагент = НЕОПРЕДЕЛЕНО
	|			ИЛИ уатСтатусыСопроводительныхДокументовСрезПоследних.СопроводительныйДокумент.ВладелецДокумента = &Контрагент)");
	Запрос.УстановитьПараметр("МаршрутныйЛист", МаршрутныйЛист);
	Запрос.УстановитьПараметр("ОбработкаЗавершена", ОбработкаЗавершена);
	Если ТипЗнч(КонтрагентИЛИПункт) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда
		Запрос.УстановитьПараметр("Контрагент", Неопределено);
		Запрос.УстановитьПараметр("Пункт", КонтрагентИЛИПункт);
	Иначе
		Запрос.УстановитьПараметр("Контрагент", КонтрагентИЛИПункт);
		Запрос.УстановитьПараметр("Пункт", Неопределено);
	КонецЕсли;
	
	тблСД = Запрос.Выполнить().Выгрузить();
	
	мсвСопрДокументы = уатОбщегоНазначенияСервер.ПреобразоватьТаблицувМассивСтрок(тблСД);
		
	Возврат мсвСопрДокументы;
КонецФункции

&НаСервереБезКонтекста
Процедура УдалитьСопроводительныйДокумент(СопроводительныйДокумент, Отказ = Ложь, ТекстОшибки = "")
	НачатьТранзакцию();
		
	Попытка 	
		СопроводительныйДокумент.ПолучитьОбъект().УстановитьПометкуУдаления(Истина)
	Исключение
		ОтменитьТранзакцию();
		Отказ = Истина;
		ТекстОшибки = ОписаниеОшибки();
	КонецПопытки;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// удаляем записи из регистра истории статусов
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатСопроводительныеДокументы.Регистратор
	|ИЗ
	|	РегистрСведений.уатСтатусыСопроводительныхДокументов КАК уатСопроводительныеДокументы
	|ГДЕ
	|	уатСопроводительныеДокументы.СопроводительныйДокумент = &СопроводительныйДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	уатСопроводительныеДокументы.Регистратор");
	Запрос.УстановитьПараметр("СопроводительныйДокумент", СопроводительныйДокумент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДокОб = Выборка.Регистратор.ПолучитьОбъект();
		Попытка		    
			ДокОб.Записать(РежимЗаписиДокумента.Проведение);				
		Исключение
			ОтменитьТранзакцию();
			Отказ = Истина;
			ТекстОшибки = СтрШаблон("Не удалось перепровести %1 для удаления статуса: %2", ДокОб, ОписаниеОшибки());
			Прервать;
		КонецПопытки;	
	КонецЦикла;	
	
	Если ТранзакцияАктивна() Тогда
		ЗафиксироватьТранзакцию();		
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтатусыСинхронизацииСWMS(МаршрутныйЛист)
	
	Если Не ЗначениеЗаполнено(МаршрутныйЛист)
		Или НЕ ПолучитьФункциональнуюОпцию("уатИспользоватьИнтеграциюWMS_уэ") Тогда
		Результат = Новый ТаблицаЗначений;
		Результат.Колонки.Добавить("ЗаказНаТС");
		Результат.Колонки.Добавить("Статус");
		Возврат Результат;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатСтатусыСинхронизацииСWMS_уэСрезПоследних.ЗаказНаТС КАК ЗаказНаТС,
	|	уатСтатусыСинхронизацииСWMS_уэСрезПоследних.СтатусВыгрузкиВWMS КАК Статус
	|ИЗ
	|	РегистрСведений.уатСтатусыСинхронизацииСWMS_уэ.СрезПоследних(
	|			,
	|			ЗаказНаТС <> ЗНАЧЕНИЕ(Документ.уатЗаказГрузоотправителя.Пустаяссылка)
	|				И МаршрутныйЛист = &МаршрутныйЛист) КАК уатСтатусыСинхронизацииСWMS_уэСрезПоследних
	|
	|УПОРЯДОЧИТЬ ПО
	|	уатСтатусыСинхронизацииСWMS_уэСрезПоследних.Период УБЫВ");
	Запрос.УстановитьПараметр("МаршрутныйЛист", МаршрутныйЛист);
	ТаблицаСтатусов = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаСтатусов;
	
КонецФункции

&НаСервереБезКонтекста
Функция ТекстЗапросаКОстаткамFTLЗаказа();
	
	// Если FTL заказ входит в Маршрутный лист, то он входит в него целиком.
	// Поэтому количество, вес и объем берутся из Заказа на ТС, а не из остатков регистра.
	ТекстЗапроса = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	уатГрузыКПеревозке_уэОстатки.ЗаказГрузоотправителя КАК Заказ,
	               |	уатГрузыКПеревозке_уэОстатки.ЗаказГрузоотправителя.ДетализацияЗакрытия КАК ДетализацияЗакрытия
	               |ПОМЕСТИТЬ втFTLЗаказы
	               |ИЗ
	               |	РегистрНакопления.уатГрузыКПеревозке_уэ.Остатки(
	               |			&Дата,
	               |			ЗаказГрузоотправителя.FTL
	               |				И (НЕ ЗаказГрузоотправителя.Мультимодальный
	               |					ИЛИ ЗаказГрузоотправителя.Мультимодальный
	               |						И ЗаказГрузоотправителя.ЭтоЭтап)) КАК уатГрузыКПеревозке_уэОстатки
	               |ГДЕ
	               |	уатГрузыКПеревозке_уэОстатки.КоличествоОстаток > 0
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	втFTLЗаказы.Заказ КАК Заказ,
	               |	уатЗаказГрузоотправителяТовары.Номенклатура КАК Номенклатура,
	               |	уатЗаказГрузоотправителяТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	               |	уатЗаказГрузоотправителяТовары.НомерСтроки КАК НомерСтроки,
	               |	уатЗаказГрузоотправителяТовары.Количество КАК Количество,
	               |	уатЗаказГрузоотправителяТовары.ВесБрутто КАК ВесБрутто,
	               |	уатЗаказГрузоотправителяТовары.Объем КАК Объем,
	               |	уатЗаказГрузоотправителяТовары.КоличествоМест КАК КоличествоМест,
	               |	втFTLЗаказы.ДетализацияЗакрытия КАК ДетализацияЗакрытия
	               |ИЗ
	               |	втFTLЗаказы КАК втFTLЗаказы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя.Товары КАК уатЗаказГрузоотправителяТовары
	               |		ПО втFTLЗаказы.Заказ = уатЗаказГрузоотправителяТовары.Ссылка
	               |			И (втFTLЗаказы.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам))
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	втFTLЗаказы.Заказ,
	               |	уатЗаказГрузоотправителяГрузовойСостав.ГрузовоеМесто,
	               |	уатЗаказГрузоотправителяГрузовойСостав.ВидУпаковки,
	               |	уатЗаказГрузоотправителяГрузовойСостав.НомерСтроки,
	               |	уатЗаказГрузоотправителяГрузовойСостав.КоличествоМест,
	               |	уатЗаказГрузоотправителяГрузовойСостав.ВесБрутто,
	               |	уатЗаказГрузоотправителяГрузовойСостав.Объем,
	               |	ВЫБОР
	               |		КОГДА ТИПЗНАЧЕНИЯ(уатЗаказГрузоотправителяГрузовойСостав.ВидУпаковки) = ТИП(Справочник.уатТипыКонтейнеров_уэ)
	               |			ТОГДА уатЗаказГрузоотправителяГрузовойСостав.КоличествоМест
	               |		ИНАЧЕ ВЫБОР
	               |				КОГДА уатЗаказГрузоотправителяГрузовойСостав.ВидУпаковки.Коэффициент = 0
	               |					ТОГДА 0
	               |				ИНАЧЕ уатЗаказГрузоотправителяГрузовойСостав.КоличествоМест / уатЗаказГрузоотправителяГрузовойСостав.ВидУпаковки.Коэффициент
	               |			КОНЕЦ
	               |	КОНЕЦ,
	               |	втFTLЗаказы.ДетализацияЗакрытия
	               |ИЗ
	               |	втFTLЗаказы КАК втFTLЗаказы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя.ГрузовойСостав КАК уатЗаказГрузоотправителяГрузовойСостав
	               |		ПО втFTLЗаказы.Заказ = уатЗаказГрузоотправителяГрузовойСостав.Ссылка
	               |			И (втFTLЗаказы.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам))
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	втFTLЗаказы.Заказ,
	               |	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка),
	               |	ЗНАЧЕНИЕ(Справочник.ЕдиницыИзмерения.ПустаяСсылка),
	               |	0,
	               |	1,
	               |	уатЗаказГрузоотправителя.ВесБрутто,
	               |	уатЗаказГрузоотправителя.Объем,
	               |	уатЗаказГрузоотправителя.КоличествоМест,
	               |	втFTLЗаказы.ДетализацияЗакрытия
	               |ИЗ
	               |	втFTLЗаказы КАК втFTLЗаказы
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	               |		ПО втFTLЗаказы.Заказ = уатЗаказГрузоотправителя.Ссылка
	               |			И (втFTLЗаказы.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам))
	               |ИТОГИ
	               |	МАКСИМУМ(НомерСтроки),
	               |	МАКСИМУМ(ДетализацияЗакрытия)
	               |ПО
	               |	Заказ";
	
	Возврат ТекстЗапроса;
	
КонецФункции

&НаКлиенте
Процедура ПриИзмененииФлагаЗаказыВыполнен(ТекСтрока, флДерево = Ложь, НаправлениеИтерации = Неопределено, флЗаполнитьФактИзПлана = Ложь)
	Если ТекСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если флДерево Тогда
		СтрокаРодитель = ТекСтрока.ПолучитьРодителя();
		Если СтрокаРодитель = Неопределено Тогда
			ТекУровень = 0;
		Иначе
			СтрокаРодительРодитель = СтрокаРодитель.ПолучитьРодителя();
			Если СтрокаРодительРодитель = Неопределено Тогда //Заказ
				ТекУровень = 1;
			Иначе
				ТекУровень = 2;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ТекУровень = 0;
	КонецЕсли;
	
	Если НЕ ТекСтрока.Выполнен Тогда
		ТекСтрока.ПричинаЗакрытияЗаказа = Неопределено;
	КонецЕсли;
		
	Если ТекУровень = 0 Тогда //Пункт или Строка ТЧ
		Если флПланФакт Тогда
			Если ТекСтрока.Выполнен Тогда
				Если флЗаполнитьФактИзПлана Тогда
					ТекСтрока.ПрибытиеФакт = ТекСтрока.ПрибытиеПлан;
				ИначеЕсли НЕ ЗначениеЗаполнено(ТекСтрока.ПрибытиеФакт) Тогда 
					ТекСтрока.ПрибытиеФакт = НачалоМинуты(ТекущаяДата());
				КонецЕсли;
				Если флЗаполнитьФактИзПлана Тогда
					ТекСтрока.УбытиеФакт = ТекСтрока.УбытиеПлан;
				ИначеЕсли НЕ ЗначениеЗаполнено(ТекСтрока.УбытиеФакт) Тогда 
					ТекСтрока.УбытиеФакт = НачалоМинуты(ТекущаяДата());
				КонецЕсли;
				Если флЗаполнитьФактИзПлана Тогда 
					ТекСтрока.ВремяФакт      = ТекСтрока.Время;
					ТекСтрока.РасстояниеФакт = ТекСтрока.Расстояние;
					ТекСтрока.СтоянкаФакт    = ТекСтрока.Стоянка;
					ТекСтрока.ОжиданиеФакт   = ТекСтрока.Ожидание;
				Иначе
					// Заполняется фактические время и расстояние в предыдущей строке,
					// поскольку прибыли в текущий пункт, значит предыдущий отрезок пути пройден
					// todo: Реализовать заполнение факта по данным ССМ и МП
					Если флДерево Тогда
						СчПредСтрока = ЗаказыДерево.ПолучитьЭлементы().Индекс(ТекСтрока)-1
					Иначе
						СчПредСтрока = ТекСтрока.НомерСтроки-2;
					КонецЕсли;
					Пока СчПредСтрока >= 0 Цикл
						Если флДерево Тогда
							ПредСтрока = ЗаказыДерево.ПолучитьЭлементы()[СчПредСтрока];
							ПредПункт  = ПредСтрока.ПунктЗаказНоменклатура;
							ТекПункт   = ТекСтрока.ПунктЗаказНоменклатура;
						Иначе
							ПредСтрока = Объект.Заказы[СчПредСтрока];
							ПредПункт  = ПредСтрока.Пункт;
							ТекПункт   = ТекСтрока.Пункт;
						КонецЕсли;
						Если ПредПункт <> ТекПункт Тогда
							Если НЕ ЗначениеЗаполнено(ПредСтрока.ВремяФакт)
								И ЗначениеЗаполнено(ПредСтрока.Время) Тогда
								ПредСтрока.ВремяФакт = ПредСтрока.Время;
							КонецЕсли;
							Если НЕ ЗначениеЗаполнено(ПредСтрока.РасстояниеФакт)
								И ЗначениеЗаполнено(ПредСтрока.Расстояние) Тогда
								ПредСтрока.РасстояниеФакт = ПредСтрока.Расстояние;
							КонецЕсли;
							
							//Прервать;
						КонецЕсли;
						
						СчПредСтрока = СчПредСтрока - 1;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если флДерево И НаправлениеИтерации <> "Вверх" Тогда
			Для Каждого ТекСтрокаЗаказ Из ТекСтрока.ПолучитьЭлементы() Цикл
				ТекСтрокаЗаказ.Выполнен = ТекСтрока.Выполнен;
				ПриИзмененииФлагаЗаказыВыполнен(ТекСтрокаЗаказ, флДерево, "Вниз", флЗаполнитьФактИзПлана);
			КонецЦикла;
		КонецЕсли;
		
	ИначеЕсли ТекУровень = 1 Тогда //Заказ
		Если флПланФакт Тогда
			Если ТекСтрока.Выполнен Тогда
				Если флЗаполнитьФактИзПлана
					ИЛИ НЕ ЗначениеЗаполнено(ТекСтрока.СтоянкаФакт) Тогда 
					ТекСтрока.СтоянкаФакт = ТекСтрока.Стоянка;
				КонецЕсли;
			КонецЕсли;
			
			СуммарноеВремяСтоянки = 0;
			Для Каждого ТекСтрокаЗаказ Из СтрокаРодитель.ПолучитьЭлементы() Цикл 
				СуммарноеВремяСтоянки = уатЗащищенныеФункцииСервер.СложитьВремя(СуммарноеВремяСтоянки, ТекСтрокаЗаказ.СтоянкаФакт);
			КонецЦикла;
			СтрокаРодитель.СтоянкаФакт = СуммарноеВремяСтоянки;
		КонецЕсли;
		
		Если НаправлениеИтерации <> "Вверх" Тогда
			Для Каждого ТекСтрокаНоменклатура Из ТекСтрока.ПолучитьЭлементы() Цикл
				ТекСтрокаНоменклатура.Выполнен = ТекСтрока.Выполнен;
				ПриИзмененииФлагаЗаказыВыполнен(ТекСтрокаНоменклатура, флДерево, "Вниз", флЗаполнитьФактИзПлана);
			КонецЦикла;
		КонецЕсли;
		
		Если НаправлениеИтерации <> "Вниз" Тогда
			флВыполнен = Истина;
			Для Каждого ТекСтрокаЗаказ Из СтрокаРодитель.ПолучитьЭлементы() Цикл
				флВыполнен = флВыполнен И ТекСтрокаЗаказ.Выполнен;
			КонецЦикла;
			СтрокаРодитель.Выполнен = флВыполнен;
			ПриИзмененииФлагаЗаказыВыполнен(СтрокаРодитель, флДерево, "Вверх", флЗаполнитьФактИзПлана);
		КонецЕсли;
				
	Иначе //Номенклатура
		Если НаправлениеИтерации <> "Вниз" Тогда
			флВыполнен = Истина;
			Для Каждого ТекСтрокаНоменклатура Из СтрокаРодитель.ПолучитьЭлементы() Цикл
				флВыполнен = флВыполнен И ТекСтрокаНоменклатура.Выполнен;
			КонецЦикла;
			СтрокаРодитель.Выполнен = флВыполнен;
			ПриИзмененииФлагаЗаказыВыполнен(СтрокаРодитель, флДерево, "Вверх", флЗаполнитьФактИзПлана);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьКоличествоВыработкиПодробноСервер()
	Для Каждого ТекСтрока Из Объект.ВыработкаТСиСотрудников Цикл
		ТекСтрока.ПараметрВыработкиВременный = ТекСтрока.ПараметрВыработки.Временный;
		Если ТекСтрока.ПараметрВыработкиВременный Тогда
			ТекСтрока.КоличествоПланФормат = уатОбщегоНазначения.уатВремяВЧЧ_ММ(ТекСтрока.КоличествоПлан);
			ТекСтрока.КоличествоФактФормат = уатОбщегоНазначения.уатВремяВЧЧ_ММ(ТекСтрока.КоличествоФакт);
		Иначе
			ТекСтрока.КоличествоПланФормат = ТекСтрока.КоличествоПлан;
			ТекСтрока.КоличествоФактФормат = ТекСтрока.КоличествоФакт;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

// Подключаемый динамически обработчик оповещения
&НаКлиенте
Процедура ПослеЗакрытияФормыРедактированияДопВыработки(РезультатЗакрытия, ДопПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекСтрока = Элементы[ДопПараметры.ИмяТаблицы].ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	КоличДопВыработки = 5;
	Если ДопПараметры.ИмяТаблицы = "ЗаказыДерево" Тогда
		ТекСтрока.ДопВыработкаПараметры.Очистить();
		ТекСтрока.ДопВыработкаКоличество.Очистить();
		Для Сч = 1 По КоличДопВыработки Цикл
			ТекСтрока.ДопВыработкаПараметры.Добавить(РезультатЗакрытия["СпецРабота" + Сч]);
			ТекСтрока.ДопВыработкаКоличество.Добавить(РезультатЗакрытия["КоличествоСпецРаботы" + Сч]);
		КонецЦикла;
	Иначе
		Для Сч = 1 По КоличДопВыработки Цикл
			ТекСтрока["ПараметрВыработки" + Сч] = РезультатЗакрытия["СпецРабота" + Сч];
			ТекСтрока["Выработка" + Сч] = РезультатЗакрытия["КоличествоСпецРаботы" + Сч];
		КонецЦикла;
	КонецЕсли;
	
	Если ДопПараметры.ИмяТаблицы = "ЗаказыДерево" Тогда
		ЗаказыДеревоПриИзменении(Неопределено);
	ИначеЕсли ДопПараметры.ИмяТаблицы = "Заказы" Тогда
		ЗаказыПриИзменении(Неопределено);
	ИначеЕсли ДопПараметры.ИмяТаблицы = "Заказы1" Тогда
		Заказы1ПриИзменении(Неопределено);
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Функция ВыбранныйЗаказ()
	
	ЗаказНаТС = ПредопределенноеЗначение("Документ.уатЗаказГрузоотправителя.ПустаяСсылка");
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийМаршрутныйЛист.Произвольный") Тогда
		Возврат ЗаказНаТС;
	КонецЕсли;
	
	Если РежимОтображенияДерево Тогда 
		ТекущиеДанные = Элементы.ЗаказыДерево.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			ЗаказНаТС = ТекущиеДанные.ПунктЗаказНоменклатура;
			Если ТипЗнч(ЗаказНаТС) = Тип("СправочникСсылка.Номенклатура")
				Или ТипЗнч(ЗаказНаТС) = Тип("СправочникСсылка.уатГрузовыеМеста_уэ") тогда
				СтрокаЗаказа = ТекущиеДанные.ПолучитьРодителя();
				ЗаказНаТС = СтрокаЗаказа.ПунктЗаказНоменклатура;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ТекущиеДанные = Элементы.Заказы.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено Тогда
			ЗаказНаТС = ТекущиеДанные.ЗаказГрузоотправителя;
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ЗаказНаТС) Или ТипЗнч(ЗаказНаТС) <> Тип("ДокументСсылка.уатЗаказГрузоотправителя") Тогда
		ЗаказНаТС = ПредопределенноеЗначение("Документ.уатЗаказГрузоотправителя.ПустаяСсылка");
	КонецЕсли;
	
	Возврат ЗаказНаТС;
	
КонецФункции

&НаКлиенте
Процедура ОткрытьРедакторЦепочкиДокументовОтвет(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		
		Если НЕ (ПроверитьЗаполнение() И Записать()) Тогда 
			Возврат;
		КонецЕсли;
		
		ОткрытьФорму("Обработка.уатРедакторЦепочкиДокументов_уэ.Форма.Форма", ДопПараметры, ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеПоЗаказуНаТСОтвет(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		
		Если НЕ (ПроверитьЗаполнение() И Записать()) Тогда 
			Возврат;
		КонецЕсли;
		
		ОбновитьДанныеПоЗаказуНаТСПродолжение(ДопПараметры);
		ОбновитьДанныеНаПланировщике();
		ОбновитьДинамическиеПоля();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьМаршрутныйЛистПоЗаказуНаТСОтвет(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		
		Если НЕ (ПроверитьЗаполнение() И Записать()) Тогда 
			Возврат;
		КонецЕсли;
		
		ОбновитьМаршрутныйЛистПоЗаказуНаТСПродолжение(ДопПараметры);
		ОбновитьДанныеНаПланировщике();
		ОбновитьДинамическиеПоля();
		УстановитьВидимостьИДоступностьЭлементовФормы();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПоЗаказуНаТСПродолжение(ЗаказНаТС)
	
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	ДокОбъект.ОбновитьДанныеПоЗаказуНаТС(ЗаказНаТС);
	ДокОбъект.ОбновитьВремяРасстояниеМеждуПунктами(Истина);
	ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
	
	ЗаказыУстановитьСодержимоеЯчеек();
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя") И РежимОтображенияДерево Тогда 
		ОбновитьДеревоЗаказовНаСервере();
	КонецЕсли;
	
	ПересчитатьПлановоеВремя();
	РассчитатьПоказателиСервер();
	ОбновитьНадписьИтоги();
	ОбновитьНадписьЗаказыДопВыработка();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьМаршрутныйЛистПоЗаказуНаТСПродолжение(ЗаказНаТС)
	
	// Обновление реквизитов шапки
	Объект.ВидПеревозки = ЗаказНаТС.ВидПеревозки;
	Объект.Маршрут = ЗаказНаТС.Маршрут;
	Объект.НаправлениеПеревозки = ЗаказНаТС.НаправлениеПеревозки;
	Объект.ОбъектСтроительства = ЗаказНаТС.ОбъектСтроительства;
	Если Объект.Организация <> ЗаказНаТС.Организация Тогда
		Объект.Организация = ЗаказНаТС.Организация;
		
		// форматирование расхода ГСМ
		ТочностьОстТоплива = ПолучитьПраваИНастройкиПользователя(Объект.Организация, "ТочностьОстатковТоплива");
		Элементы.НормативныйРасходТоплива.Формат = "ЧЦ=" + (10-3+ТочностьОстТоплива) + "; ЧДЦ=" + ТочностьОстТоплива;
		Элементы.НормативныйРасходТоплива.ФорматРедактирования = Элементы.НормативныйРасходТоплива.Формат;
	КонецЕсли;
	Объект.Подразделение = ЗаказНаТС.Подразделение;
	
	// Обновление пунктов маршрута
	ОбновитьДанныеПоЗаказуНаТСПродолжение(ЗаказНаТС);
	
КонецПроцедуры

#КонецОбласти

&НаСервереБезКонтекста
Функция ПроверитьНаличиеСвязанныхТТД(ДокументСсылка)
	Возврат уатОбщегоНазначения_проф.ПроверитьНаличиеСвязанныхТТД(ДокументСсылка);
КонецФункции

&НаКлиенте
Процедура ВопросКонвертация_2_2_21()
	Если ЗначениеЗаполнено(Объект.Статус) Тогда
		Возврат;
	КонецЕсли;
	
	Оповещ = Новый ОписаниеОповещения("ВопросКонвертация_2_2_21_Продолжение", ЭтотОбъект);
	ТекстРелиз = ?(уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП(), "1.1.21", "2.2.21");
	ПоказатьВопрос(Оповещ,
		"Требуется конвертация данных документа в формат ""Релиз " + ТекстРелиз + """.
		|При конвертации будет выполнен расчет итогов с пересчетом выработки, доходов и расходов и заполнен статус документа.
		|Продолжить?
		|
		|Для групповой обработки документов воспользуйтесь обработкой ""Изменить выделенные"" в списке документов.", РежимДиалогаВопрос.ОКОтмена);
КонецПроцедуры

&НаКлиенте
Процедура ВопросКонвертация_2_2_21_Продолжение(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Конвертация_2_2_21_Сервер();
		УстановитьВидимостьИДоступностьЭлементовФормы();
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура Конвертация_2_2_21_Сервер()
	//ДокОбъект = РеквизитФормыВЗначение("Объект");
	уатОбновлениеИнформационнойБазы.КонвертацияМаршрутногоЛиста_2_2_21(Объект);
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя")
		И РежимОтображенияДерево Тогда
		
		ОбновитьДеревоЗаказовНаСервере();
	КонецЕсли;
	
	РасчетИтоговСервер(Ложь);
	//Документы.уатМаршрутныйЛист.РасчетИтогов(ДокОбъект);
	//ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВидМоделиТСПоВидуПеревозки(ВидПеревозки)
	
	Возврат ВидПеревозки.ВидМоделиТС;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПодборПунктаВМаршрут(НовыйПункт, МассивПунктов, МассивПунктовСсылок)
	
	Возврат уатЭлектронныеКартыСервер.ПодборПунктаВМаршрут(НовыйПункт, МассивПунктов, МассивПунктовСсылок);
	
КонецФункции

&НаКлиенте
Процедура СоздатьСобытиеОтветНаВопросЗаписиДокумента(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатВопроса = КодВозвратаДиалога.ОК Тогда 
		Возврат;
	КонецЕсли;
	
	Если НЕ (ПроверитьЗаполнение() И Записать()) Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура("ОткрытИзДокумента,ДокументПеревозки",
		Истина, Объект.Ссылка);
	ОткрытьФорму("РегистрСведений.уатСобытияПоПеревозке_уэ.ФормаЗаписи", ПараметрыОткрытия, Объект.Ссылка);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборСобытий()
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(События, "Документ", Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВладельцаСопроводительныхДокументов();
	Если Объект.Контрагент.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	мсвОснования = ПолучитьСписокЗаказовМЛ().ВыгрузитьЗначения();
	мсвОснования.Добавить(Объект.Ссылка);
	
	мсвСД = СДсПустымПеревозчиком(мсвОснования);
	Если мсвСД.Количество() > 0 Тогда
		Оповещ = Новый ОписаниеОповещения("УстановитьВладельцаСопроводительныхДокументовВопрос", ЭтотОбъект, 
			Новый Структура("мсвСД", мсвСД));
		ПоказатьВопрос(Оповещ,
			СтрШаблон("Подставить выбранного перевозчика ""%1"" в сопроводительные документы с незаполненным перевозчиком?",
				Объект.Контрагент),
			РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВладельцаСопроводительныхДокументовВопрос(Результат, ДопПараметры) Экспорт
	Если Результат <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьПеревозчикаСД(ДопПараметры.мсвСД, Объект.Контрагент);
	Элементы.СтатусыСД.Обновить();
КонецПроцедуры

&НаСервереБезКонтекста
Функция СДсПустымПеревозчиком(ОснованияСД)
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатСопроводительныеДокументы.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.уатСопроводительныеДокументы КАК уатСопроводительныеДокументы
	|ГДЕ
	|	НЕ уатСопроводительныеДокументы.ПометкаУдаления
	|	И уатСопроводительныеДокументы.ВладелецДокумента = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|	И уатСопроводительныеДокументы.ВидВладельца = ЗНАЧЕНИЕ(Перечисление.уатВидыВладельцевСопроводительныхДокументов.ДокументыПеревозчика)
	|	И уатСопроводительныеДокументы.Основание В (&ОснованияСД)");
	Запрос.УстановитьПараметр("ОснованияСД", ОснованияСД);
	мсвСД = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат мсвСД;
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьПеревозчикаСД(мсвСД, Перевозчик)
	Для Каждого ТекСД Из мсвСД Цикл
		ОбъектСД = ТекСД.ПолучитьОбъект();
		ОбъектСД.ВладелецДокумента = Перевозчик;
		Попытка
			ОбъектСД.Записать();
		Исключение
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПостроитьМаршрутMultiGoДлительнаяОперацияЗавершение(Операция, ДополнительныеПараметры) Экспорт
	
	Если Операция = Неопределено Тогда
		
	Иначе
		Если Операция.Статус = "Выполнено" Тогда
			Если ЭтоАдресВременногоХранилища(Операция.АдресРезультата) Тогда
				Данные = ПолучитьИзВременногоХранилища(Операция.АдресРезультата);
				Если ТипЗнч(Данные) = Тип("Структура") Тогда
					Если ЗначениеЗаполнено(Данные.ТекстОшибки) Тогда
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Данные.ТекстОшибки);
						Возврат;
					Иначе
						Объект.СсылкаMultiGo = Данные.СсылкаMultiGo;
						ПерестроитьМаршрутМЛMultiGo(Данные.МассивПунктов);  
						УстановитьВидимостьMultiGo();
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Иначе
			ВызватьИсключение Операция.КраткоеПредставлениеОшибки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерестроитьМаршрутМЛMultiGo(МассивПунктов)
	
	РучнойПересчетВремени(Неопределено);
	
	ПредПункт = Неопределено;
	ИндексНовогоПункта = 0;

	Для Каждого ТекСтрокаПункт Из МассивПунктов Цикл
		Если ТекСтрокаПункт.ТипПункта = 1
			ИЛИ ТекСтрокаПункт.ТипПункта = 2
			ИЛИ ТекСтрокаПункт.ТипПункта = 3 Тогда
			
			Если ТекСтрокаПункт.ТипПункта = 1 Тогда
				Объект.ДатаИВремяОтправленияПлан = уатЗащищенныеФункцииСервер.СложитьВремя(ТекСтрокаПункт.ПрибытиеПлан, 
						ТекСтрокаПункт.Стоянка);
			КонецЕсли;
			ПредПункт = ТекСтрокаПункт.Пункт;
			
			Индекс        = 0;
			ФлПунктНайден = Ложь;
			Для Каждого ТекСтрока Из Объект.Заказы Цикл
				Если ПредПункт = ТекСтрока.Пункт 
					И ИндексНовогоПункта <= Индекс Тогда
					ФлПунктНайден      = Истина;
					ИндексНовогоПункта = Индекс;
					
					СтоянкаСек = Цел(ТекСтрокаПункт.Стоянка) * 60 * 60 + (ТекСтрокаПункт.Стоянка - Цел(ТекСтрокаПункт.Стоянка)) * 100 * 60;
					Если Объект.Заказы[Индекс].УбытиеПлан - Объект.Заказы[Индекс].ПрибытиеПлан <> СтоянкаСек Тогда
						Объект.Заказы[Индекс].СтоянкаИзПункта = ТекСтрокаПункт.Стоянка;
						Объект.Заказы[Индекс].Стоянка         = 0;
					КонецЕсли;
					
					Объект.Заказы[Индекс].ПрибытиеПлан    = ТекСтрокаПункт.ПрибытиеПлан;
					Объект.Заказы[Индекс].УбытиеПлан      = уатЗащищенныеФункцииСервер.СложитьВремя(ТекСтрокаПункт.ПрибытиеПлан, 
						ТекСтрокаПункт.Стоянка); 
					
					
					Объект.Заказы[Индекс].Расстояние   = ТекСтрокаПункт.Расстояние;
					Объект.Заказы[Индекс].Время        = ТекСтрокаПункт.Время;
					Объект.Заказы[Индекс].ОтветMultiGo = ТекСтрокаПункт.ОтветMultiGo;
				ИначеЕсли ФлПунктНайден
					И ПредПункт <> ТекСтрока.Пункт Тогда
					Прервать;
				КонецЕсли;
				Индекс = Индекс + 1;
			КонецЦикла;
		Иначе
			Индекс        = 1;
			ФлПунктНайден = Ложь;
			Для Каждого ТекСтрока Из Объект.Заказы Цикл
				Если ПредПункт = ТекСтрока.Пункт 
					И ИндексНовогоПункта <= Индекс Тогда
					ИндексНовогоПункта = Индекс;
					ФлПунктНайден      = Истина;
				ИначеЕсли ФлПунктНайден
					И ПредПункт <> ТекСтрока.Пункт Тогда
					Прервать;
				КонецЕсли;
				Индекс = Индекс + 1;
			КонецЦикла;
			
			НовСтрока = Объект.Заказы.Вставить(ИндексНовогоПункта);
			НовСтрока.Пункт            = ТекСтрокаПункт.Пункт;
			НовСтрока.ТипТочкиМаршрута = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.ПромежуточныйПункт");
			
			НовСтрока.СтоянкаИзПункта = ТекСтрокаПункт.Стоянка;
			НовСтрока.Расстояние      = ТекСтрокаПункт.Расстояние;
			НовСтрока.ПрибытиеПлан    = ТекСтрокаПункт.ПрибытиеПлан;
			НовСтрока.УбытиеПлан      = уатЗащищенныеФункцииСервер.СложитьВремя(ТекСтрокаПункт.ПрибытиеПлан, ТекСтрокаПункт.Стоянка);

			НовСтрока.Время           = ТекСтрокаПункт.Время;
			НовСтрока.ОтветMultiGo    = ТекСтрокаПункт.ОтветMultiGo;
			
			ПредПункт = ТекСтрокаПункт.Пункт;
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьДеревоЗаказовНаСервере();
	ОбновитьПиктограммыПрисоединенныхФайлов();
	ОбновитьНадписьИтоги();
	
КонецПроцедуры

&НаСервере
Функция ПостроитьМаршрутMultiGoДлительнаяОперацияСервер(ПараметрыЗапуска)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Расчет рейса'");
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;

	ТЗЗаказы = Объект.Заказы.Выгрузить();
	Заказы   = уатАРМ.ПреобразоватьТаблицуВМассивДляПередачиНаКлиент(ТЗЗаказы);
	Возврат ДлительныеОперации.ВыполнитьВФоне(
	"уатИнтеграции_проф.MultiGo_ПостроитьМаршрутДлительнаяОперация",
	Новый Структура("Номер, ТС, ДатаИВремяОтправленияПлан, Заказы, ДатаСтарта, Настройки",
		Объект.Номер, Объект.ТС, Объект.ДатаИВремяОтправленияПлан, Заказы,
		ПараметрыЗапуска.ДатаСтарта, ПараметрыЗапуска.Настройки),
	ПараметрыВыполнения);
	
КонецФункции

&НаКлиенте
Процедура ПостроитьМаршрутMultiGoЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено Тогда
		УстановитьВидимостьMultiGo();
		Возврат;
	КонецЕсли;
	
	ДлительнаяОперация = ПостроитьМаршрутMultiGoДлительнаяОперацияСервер(Результат);
	
	НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	НастройкиОжидания.ВыводитьОкноОжидания       = Истина;
	НастройкиОжидания.ВыводитьПрогрессВыполнения = Истина;
	
	Обработчик = Новый ОписаниеОповещения("ПостроитьМаршрутMultiGoДлительнаяОперацияЗавершение", ЭтотОбъект);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, НастройкиОжидания);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначениеРеквизита(Объект, ИмяРеквизита)
	Возврат уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект, ИмяРеквизита);
КонецФункции

&НаКлиенте
Процедура ПостроитьМаршрутMultiGoКлиент()
	
	ИмяКлючевойОперации = "уатОперации.ПостроитьМаршрутMultiGo";
	ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики(ИмяКлючевойОперации, 1);
	
	Если НЕ ЗначениеЗаполнено(Объект.ТС) Тогда 
		ТекстОшибки = НСтр("ru='Необходимо указать ТС.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "Объект.ТС");
		Возврат;
	КонецЕсли;
	УчетнаяЗаписьMultiGo = ПолучитьЗначениеРеквизита(Объект.ТС, "УчетнаяЗаписьMultiGo"); 
	Если НЕ ЗначениеЗаполнено(УчетнаяЗаписьMultiGo) Тогда 
		ТекстОшибки = НСтр("ru='ТС не подключено к сервису.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "Объект.ТС");
		Возврат;
	КонецЕсли;
	
	Если Объект.Заказы.Количество() < 2 Тогда	 
		ТекстОшибки = НСтр("ru='Не выбраны точки для построения маршрута.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "Объект.Заказы");
		Возврат;	
	КонецЕсли;
	
	Если Объект.Заказы.Количество() <> 0 Тогда
		ДатаСтарта = Объект.Заказы[0].ПрибытиеПлан;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ДатаСтарта) Тогда
		ДатаСтарта = ТекущаяДата();
	КонецЕсли;

	Обработчик = Новый ОписаниеОповещения("ПостроитьМаршрутMultiGoЗавершение", ЭтотОбъект);
	ПараметрыОткрытияФормы = Новый Структура();
	ПараметрыОткрытияФормы.Вставить("ТС",         Объект.ТС);
	ПараметрыОткрытияФормы.Вставить("ДатаСтарта", ДатаСтарта);
	ОткрытьФорму("Справочник.уатУчетныеЗаписиMultiGo.Форма.ФормаНастроекПостроенияМаршрута", ПараметрыОткрытияФормы, ЭтотОбъект,,,,Обработчик);

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьМаршрутMultiGoКлиент()
	Объект.СсылкаMultiGo = "";
	ОчиститьМаршрутMultiGoСервер();
	
	ОбновитьМаршрутныеПараметрыДереваЗаказов();
	ОбновитьГрузовыеПараметрыДереваЗаказов();
	
	ОбновитьДанныеНаПланировщике();
	РассчитатьМаршрутныеПоказатели();
	ОбновитьНадписьИтоги();
КонецПроцедуры

&НаСервере
Процедура ОчиститьМаршрутMultiGoСервер()
	МассивДляУдаления = Новый Массив();   
	
	Для Каждого ТекСтрока Из Объект.Заказы Цикл  
		Если НЕ ЗначениеЗаполнено(ТекСтрока.ОтветMultiGo) Тогда
			Продолжить;
		КонецЕсли;
		
		Попытка
			ЧтениеJSON = Новый ЧтениеJSON();
			ЧтениеJSON.УстановитьСтроку(ТекСтрока.ОтветMultiGo);
			Данные = ПрочитатьJSON(ЧтениеJSON, Истина);
			ЧтениеJSON.Закрыть();
			
			Если ТипЗнч(Данные) = Тип("Соответствие") Тогда
				ТипТочки = Данные.Получить("type");
				Если НЕ (ТипТочки = 1
					ИЛИ ТипТочки = 2
					ИЛИ ТипТочки = 3) Тогда 
					МассивДляУдаления.Добавить(ТекСтрока);
				КонецЕсли;
			КонецЕсли;
		Исключение
		КонецПопытки; 
		
		ТекСтрока.ОтветMultiGo = "";  
	КонецЦикла;
	
	Для Каждого ТекСтрока Из МассивДляУдаления Цикл
		Объект.Заказы.Удалить(ТекСтрока);
	КонецЦикла;
	ОбновитьДеревоЗаказовНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьMultiGo()
	Если АвторизованВнешнийПользователь Тогда
		Элементы.ЗаказыПостроитьМаршрутMultiGo.Видимость = Ложь;
		Элементы.ЗаказыMultiGo.Видимость = Ложь;
		Элементы.ЗаказыДеревоПостроитьМаршрутMultiGo.Видимость = Ложь;
		Элементы.ЗаказыДеревоMultiGo.Видимость = Ложь;
	ИначеЕсли ЗначениеЗаполнено(Объект.СсылкаMultiGo) Тогда
		Элементы.ЗаказыПостроитьМаршрутMultiGo.Видимость = Ложь;
		Элементы.ЗаказыMultiGo.Видимость                 = Истина; 
		
		Элементы.ЗаказыДеревоПостроитьМаршрутMultiGo.Видимость = Ложь;
		Элементы.ЗаказыДеревоMultiGo.Видимость                 = Истина; 
	Иначе
		Элементы.ЗаказыПостроитьМаршрутMultiGo.Видимость = Истина;
		Элементы.ЗаказыMultiGo.Видимость                 = Ложь;
		
		Элементы.ЗаказыДеревоПостроитьМаршрутMultiGo.Видимость = Истина;
		Элементы.ЗаказыДеревоMultiGo.Видимость                 = Ложь;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ПроизвестиРасчетГруппировокЗавершение(ШаблонНастроек, ДополнительныеПараметры) Экспорт
	
	Если ШаблонНастроек = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ПроизвестиРасчетГруппировокСервер(ШаблонНастроек);
	Если РежимОтображенияДерево Тогда
		ОбновитьДеревоЗаказовНаСервере();  
		УстановитьВидимостьИДоступностьЭлементовФормы();
		ОбновитьДинамическиеПоля();	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроизвестиРасчетГруппировокСервер(ШаблонНастроек)
	
	НастройкиРазмещения = Новый Структура(
	"УчитыватьГруппировкуВМаршрутномЛисте, ВесОтдельнойГруппировки, УчитыватьУпаковкуВПаллетыВМЛ, 
	|ПонижающийКоэффициентЗагрузкиПаллетыПоОбъему",
	Ложь, 0, Ложь, 100);
	
	НастройкаИспользоватьРасчетТары = Ложь;
	
	ВариантНастройки = ШаблонНастроек;
	
	Если ЗначениеЗаполнено(ВариантНастройки) Тогда 
		СпрОб = ВариантНастройки.ПолучитьОбъект();
		Если Не СпрОб.ПометкаУдаления Тогда 
			ХранилищеНастроек = СпрОб.НастройкиХранилище.Получить();
			Если Не ХранилищеНастроек = Неопределено Тогда 
				СтруктураНастроек = ХранилищеНастроек;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	НастройкаАлгоритмМаршрутизации = Неопределено;
	Если НЕ СтруктураНастроек = Неопределено
		И ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
		Если СтруктураНастроек.Свойство("НастройкаАлгоритмМаршрутизации") Тогда 
			НастройкаАлгоритмМаршрутизации = СтруктураНастроек.НастройкаАлгоритмМаршрутизации;
		Иначе 
			НастройкаАлгоритмМаршрутизации = Неопределено;
		КонецЕсли;
		
		Если СтруктураНастроек.Свойство("НастройкаКларкРайтРежимДоставки") Тогда 
			НастройкаКларкРайтРежимДоставки = СтруктураНастроек.НастройкаКларкРайтРежимДоставки;
		Иначе 
			НастройкаКларкРайтРежимДоставки = Неопределено;
		КонецЕсли;
		
		Если СтруктураНастроек.Свойство("НастройкаУчитыватьГруппировкуВМаршрутномЛисте") Тогда 
			НастройкаУчитыватьГруппировкуВМаршрутномЛисте = СтруктураНастроек.НастройкаУчитыватьГруппировкуВМаршрутномЛисте;
		Иначе 
			НастройкаУчитыватьГруппировкуВМаршрутномЛисте = Ложь;
		КонецЕсли;
		
		Если СтруктураНастроек.Свойство("НастройкаУчитыватьУпаковкуВПаллетыВМЛ") Тогда 
			НастройкаУчитыватьУпаковкуВПаллетыВМЛ = СтруктураНастроек.НастройкаУчитыватьУпаковкуВПаллетыВМЛ;
		Иначе 
			НастройкаУчитыватьУпаковкуВПаллетыВМЛ = Ложь;
		КонецЕсли;
		
		Если СтруктураНастроек.Свойство("НастройкаВесОтдельнойГруппировки") Тогда 
			НастройкаВесОтдельнойГруппировки = СтруктураНастроек.НастройкаВесОтдельнойГруппировки;
		Иначе 
			НастройкаВесОтдельнойГруппировки = 0;
		КонецЕсли;
		
		Если СтруктураНастроек.Свойство("НастройкаПонижающийКоэффициентЗагрузкиПаллетыПоОбъему") Тогда 
			НастройкаПонижающийКоэффициентЗагрузкиПаллетыПоОбъему = СтруктураНастроек.НастройкаПонижающийКоэффициентЗагрузкиПаллетыПоОбъему;
		Иначе 
			НастройкаПонижающийКоэффициентЗагрузкиПаллетыПоОбъему = 100;
		КонецЕсли;
		
		Если Константы.уатИспользоватьГруппировкуГрузов_уэ.Получить() И НастройкаАлгоритмМаршрутизации = 1
			И НастройкаКларкРайтРежимДоставки = 0 И НастройкаУчитыватьГруппировкуВМаршрутномЛисте Тогда 
			УчитыватьГруппировкуВМаршрутномЛисте = Истина;
		Иначе 
			УчитыватьГруппировкуВМаршрутномЛисте = Ложь;
		КонецЕсли;
		
		Если Константы.уатИспользоватьРазмещениеНаПаллетах_уэ.Получить() И НастройкаАлгоритмМаршрутизации = 1
			И НастройкаКларкРайтРежимДоставки = 0 И НастройкаУчитыватьУпаковкуВПаллетыВМЛ Тогда 
			УчитыватьУпаковкуВПаллетыВМЛ = Истина;
		Иначе 
			УчитыватьУпаковкуВПаллетыВМЛ = Ложь;
		КонецЕсли;
		
		НастройкиРазмещения.УчитыватьГруппировкуВМаршрутномЛисте         = УчитыватьГруппировкуВМаршрутномЛисте;
		НастройкиРазмещения.ВесОтдельнойГруппировки                      = НастройкаВесОтдельнойГруппировки;
		НастройкиРазмещения.УчитыватьУпаковкуВПаллетыВМЛ                 = УчитыватьУпаковкуВПаллетыВМЛ;
		НастройкиРазмещения.ПонижающийКоэффициентЗагрузкиПаллетыПоОбъему = НастройкаПонижающийКоэффициентЗагрузкиПаллетыПоОбъему;
	КонецЕсли;

	Если НастройкаАлгоритмМаршрутизации <> 1 Тогда
		ТекстОшибки = НСтр("ru = 'Расчет группировок и размещения на паллетах может быть произведен только, если выбран шаблон с алгоритмом маршрутизации Кларка-Райта. '");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	Если флРасчетТары Тогда  
		
		мсвЗаказыКРазмещению = Новый Массив();
		Для Каждого ТекСтрока Из Объект.Заказы Цикл
			Если ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка 
				ИЛИ ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяПогрузка Тогда
				
				ДанныеСтроки = Новый Структура;
				ДанныеСтроки.Вставить("Заказ",      ТекСтрока.ЗаказГрузоотправителя);
				ДанныеСтроки.Вставить("Груз",       ?(ЗначениеЗаполнено(ТекСтрока.Номенклатура), ТекСтрока.Номенклатура, Неопределено));
				ДанныеСтроки.Вставить("Количество", ТекСтрока.Количество);
				мсвЗаказыКРазмещению.Добавить(ДанныеСтроки);
			КонецЕсли; 
		КонецЦикла;
		
		РазмещениеЗаказовМаршрутногоЛиста = уатОбщегоНазначения_уэ.РасчитатьРазмещениеЗаказовМаршрутногоЛиста(
		мсвЗаказыКРазмещению,
		НастройкиРазмещения.УчитыватьГруппировкуВМаршрутномЛисте,
		НастройкиРазмещения.ВесОтдельнойГруппировки,
		НастройкиРазмещения.УчитыватьУпаковкуВПаллетыВМЛ,
		НастройкиРазмещения.ПонижающийКоэффициентЗагрузкиПаллетыПоОбъему
		);
		
		Для Каждого ТекСтрока Из Объект.Заказы Цикл 
			ОтборРазмещения = Новый Структура();
			ОтборРазмещения.Вставить("Заказ", ТекСтрока.ЗаказГрузоотправителя);
			ОтборРазмещения.Вставить("Груз",  ?(ЗначениеЗаполнено(ТекСтрока.Номенклатура), ТекСтрока.Номенклатура, Неопределено));
			НайдСтроки = РазмещениеЗаказовМаршрутногоЛиста.НайтиСтроки(ОтборРазмещения);
			Если НайдСтроки.Количество() Тогда 
				ТекСтрока.ВесТары    = НайдСтроки[0].ВесТары;
				ТекСтрока.Группа     = НайдСтроки[0].Группа;
				ТекСтрока.Паллета    = НайдСтроки[0].Паллета;
				ТекСтрока.Размещение = НайдСтроки[0].Размещение;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ТекстОшибки = НСтр("ru='Включите использование расчета тары в настроках функциональности программы.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	КонецЕсли; 
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКоличествоЭПД(Документ)
	
	Возврат уатОбменСГИСЭПД.ПолучитьКоличествоЭПД(Документ);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЭПДДляЗаменыТСВодителя(Рейс)
	
	Запрос = Новый Запрос(); 
	Запрос.УстановитьПараметр("Рейс", Рейс);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатСвязанныеДокументыЭПД.ЭПД КАК ЭПД
	|ИЗ
	|	РегистрСведений.уатСвязанныеДокументыЭПД КАК уатСвязанныеДокументыЭПД
	|ГДЕ
	|	уатСвязанныеДокументыЭПД.Рейс = &Рейс
	|
	|СГРУППИРОВАТЬ ПО
	|	уатСвязанныеДокументыЭПД.ЭПД";
	Выборка   = Запрос.Выполнить().Выбрать();
	
	ЗаменятьТСВодителя = Ложь;
	
	МассивЭПД = Новый Массив();
	Пока Выборка.Следующий() Цикл
		ДанныеСостоянияЭДО = ИнтеграцияЭДОВызовСервера.ДанныеСостоянияЭДОДляФормыОбъектаУчета(Выборка.ЭПД);
		ТитулыПоДокументу = ОбменСГИСЭПДВызовСервера.ПолучитьТитулыПоДокументу(Выборка.ЭПД, Истина);
		
		Если ДанныеСостоянияЭДО.ПредставлениеСостояния <> "Закрыт с отклонением" Тогда
			Если ТитулыПоДокументу.Получить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул1")) <> Неопределено
				И ТитулыПоДокументу.Получить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул2")) <> Неопределено
				И ДанныеСостоянияЭДО.ПредставлениеСостояния <> "Требуется повторная отправка" Тогда
				
				Если ТитулыПоДокументу.Получить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул3")) = Неопределено
					И ТитулыПоДокументу.Получить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул4")) = Неопределено Тогда
					ЗаменятьТСВодителя = Истина;
					МассивЭПД.Добавить(Выборка.ЭПД);
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;  
	
	Возврат МассивЭПД;
	
КонецФункции

&НаКлиенте
Процедура ВопросПереадресовкаТСЭПДЗавершение(РезультатВопроса, МассивЭПД) Экспорт

	ВопросПереадресовкаТСЭПД  = Истина;
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Для Каждого ТекЭПД Из МассивЭПД Цикл
			ПараметрыФормы = Новый Структура();
			ПараметрыФормы.Вставить("Ключ", ТекЭПД);
			ПараметрыФормы.Вставить("СоздатьЭстафету", Истина);
			
			ОткрытьФорму("Документ.ЭлектроннаяТранспортнаяНакладная.Форма.ОсновнаяФорма", ПараметрыФормы,ЭтотОбъект);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросИзменениеЭТрН(РезультатВопроса, МассивЭПД) Экспорт

	ВопросИзменениеЭТрН = Истина; 
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Для Каждого ТекЭПД Из МассивЭПД Цикл
			ПараметрыФормы = Новый Структура();
			ПараметрыФормы.Вставить("Ключ", ТекЭПД);
			
			ОткрытьФорму("Документ.ЭлектроннаяТранспортнаяНакладная.Форма.ОсновнаяФорма", ПараметрыФормы,ЭтотОбъект);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЭТрН(Рейс)
	
	Запрос = Новый Запрос(); 
	Запрос.УстановитьПараметр("Рейс", Рейс);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	уатСвязанныеДокументыЭПД.ЭПД КАК ЭПД
	               |ИЗ
	               |	РегистрСведений.уатСвязанныеДокументыЭПД КАК уатСвязанныеДокументыЭПД
	               |ГДЕ
	               |	уатСвязанныеДокументыЭПД.Рейс = &Рейс
	               |	И ТИПЗНАЧЕНИЯ(уатСвязанныеДокументыЭПД.ЭПД) = ТИП(Документ.ЭлектроннаяТранспортнаяНакладная)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	уатСвязанныеДокументыЭПД.ЭПД";
	Выборка   = Запрос.Выполнить().Выбрать();
	
	МассивЭПД = Новый Массив();
	Пока Выборка.Следующий() Цикл
		МассивЭПД.Добавить(Выборка.ЭПД);
	КонецЦикла;  
	
	Возврат МассивЭПД;
	
КонецФункции

&НаКлиенте
Процедура ПеревыставитьЗаказчикуЗакрытие(Результат, ДопПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	Иначе
		Если Результат.Свойство("НоваяСумма") Тогда 
			НоваяСтрока = Объект.Доходы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДопПараметры.ТекДанныеСтроки);
			НоваяСтрока.ЗаказНаТС         = Результат.ЗаказНаТС;
			НоваяСтрока.Сумма             = Результат.НоваяСумма;
			НоваяСтрока.РучнойВвод        = Истина; 
			НоваяСтрока.СтатьяДоходов     = ПредопределенноеЗначение("Справочник.уатСтатьиДоходов.ОсновнаяСтатьяДоходов");
			НоваяСтрока.Тариф             = ПредопределенноеЗначение("Справочник.уатТарифыТС.ПустаяСсылка");
			НоваяСтрока.ПараметрВыработки = ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.ПустаяСсылка");
			
			Если НоваяСтрока.Количество <> 0 Тогда
				НоваяСтрока.Цена = НоваяСтрока.Сумма / НоваяСтрока.Количество;
			КонецЕсли;
			
			РассчитатьСуммуНДС(НоваяСтрока, "Факт");
			РассчитатьСуммуВсегоВстрокеТЧ(НоваяСтрока, "Факт"); 
			
			РассчитатьСуммуДокумента();
			ВывестиСуммовыеИтогиДокумента();
			
			ОбновитьПараметрВыработкиВременныйОказ();
			ОбновитьВсегоВТЧОказываемыеУслуги();
			ОбновитьПредставлениеНДСвТЧ("Доходы");
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры 

&НаСервере
Функция ПолучитьМассивЗаказовНаТС(); 
	ТаблицаЗаказов = Объект.Заказы.Выгрузить();  
	ТаблицаЗаказов.Свернуть("ЗаказГрузоотправителя");
	Возврат ТаблицаЗаказов.ВыгрузитьКолонку("ЗаказГрузоотправителя");
КонецФункции

&НаКлиенте
Процедура ЗапускПриложения(КодВозврата, ДополнительныйПараметр) Экспорт
// Заглушка 
Заглушка = Истина;
КонецПроцедуры

#КонецОбласти

#Область Инициализация

мБуфСтрока = Новый Структура("ЕдиницаИзмерения, Количество, Вес, Объем");

#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	уатЗащищенныеФункцииСервер.уатДокументФормаЭлементаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, Объект, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// заполнение при вводе из путевого листа
	Если Параметры.Свойство("ДобавлениеЗаправкиИзПЛ") И Параметры.ДобавлениеЗаправкиИзПЛ = Истина Тогда
		ДобавлениеЗаправкиИзПЛ = Истина;
		ПризнакРедактированияИзПутевогоЛиста = Истина;
		ПризнакРедактированияИзПутевогоЛистаСсылка = Параметры.ПутевойЛист;
		ДокОбъект = РеквизитФормыВЗначение("Объект");
		ДокОбъект.ПризнакРедактированияИзПутевогоЛиста = Истина;
		ДокОбъект.ПризнакРедактированияИзПутевогоЛистаСсылка = Параметры.ПутевойЛист;
		
		ДокОбъект.Заполнить(Параметры.ПутевойЛист);
		
		УчетВыработкиПоПодразделениям = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокОбъект.Организация,
			ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.УчетВыработкиПоПодразделениям"));
		Если УчетВыработкиПоПодразделениям Тогда
			ДокОбъект.ПодразделениеОрганизации = Параметры.ПутевойЛист.Подразделение;
		КонецЕсли;
		
		Если Параметры.Свойство("ЗаправкаКопирование") И ТипЗнч(Параметры.ЗаправкаКопирование) = Тип("Структура") Тогда
			ДокОбъект.Заправки.Очистить();
			НоваяЗаправка = ДокОбъект.Заправки.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяЗаправка, Параметры.ЗаправкаКопирование);
			НоваяЗаправка.ПутевойЛист = Параметры.ПутевойЛист;
			ДокОбъект.АЗС = Параметры.ЗаправкаКопирование.АЗС;
			ДокОбъект.ВидДвиженияГСМ = Параметры.ЗаправкаКопирование.ВидДвиженияГСМ;
			ДокОбъект.ДоговорКонтрагента = Параметры.ЗаправкаКопирование.Договор;
		КонецЕсли;
		
		ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
	КонецЕсли;
	
	// заполнение при редактировании из путевого листа
	Если Параметры.Свойство("РедактированиеЗаправкиИзПЛ") И Параметры.РедактированиеЗаправкиИзПЛ = Истина Тогда
		РедактированиеЗаправкиИзПЛ = Истина;
		ПризнакРедактированияИзПутевогоЛиста = Истина;
		ПризнакРедактированияИзПутевогоЛистаСсылка = Параметры.ПутевойЛист;
		ДокОбъект = РеквизитФормыВЗначение("Объект");
		ДокОбъект.ПризнакРедактированияИзПутевогоЛиста = Истина;
		ДокОбъект.ПризнакРедактированияИзПутевогоЛистаСсылка = Параметры.ПутевойЛист;
		ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
	КонецЕсли;
	
	// Установка реквизитов формы.
	ВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	ВалютаВзаиморасчетов = Объект.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	
	Если Объект.Ссылка.Пустая() Тогда
		СтруктураОбъектовНастроек = Новый Структура;
		СтруктураОбъектовНастроек.Вставить("Организация", Объект.Организация);
		СтруктураОбъектовНастроек.Вставить("Подразделение", Объект.ПодразделениеОрганизации);
		Если НЕ ЗначениеЗаполнено(Объект.АЗС) Тогда
			Объект.АЗС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек,
				ПланыВидовХарактеристик.уатПраваИНастройки.ОсновнаяАЗС);
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.ВидДвиженияГСМ) тогда
			Объект.ВидДвиженияГСМ = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек,
				ПланыВидовХарактеристик.уатПраваИНастройки.ОсновнойВидЗаправки);
		КонецЕсли;
		Если Объект.Заправки.Количество() = 0 Тогда
			ДатаЗаправки = Объект.Дата;
			Если НЕ ЗначениеЗаполнено(ДатаЗаправки) Тогда
				ДатаЗаправки = ТекущаяДата();
			КонецЕсли;
			ДатаЗаправки = уатОбщегоНазначения.уатДатаБезСекунд(ДатаЗаправки);
			
			НоваяСтрока = Объект.Заправки.Добавить();
			НоваяСтрока.Дата      = ДатаЗаправки;
			Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
				ВалютаВзаиморасчетов = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.ДоговорКонтрагента,
				"ВалютаВзаиморасчетов");
				НоваяСтрока.Валюта    = ВалютаВзаиморасчетов;
			Иначе
				НоваяСтрока.Валюта    = ВалютаРегламентированногоУчета;
			КонецЕсли;
			Если Объект.УчитыватьНДС Тогда
				НоваяСтрока.СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
					ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнаяСтавкаНДС");
			КонецЕсли;
						
			Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
				НоваяСтрока.ПутевойЛист = Объект.ДокументОснование;
				НоваяСтрока.ТС = Объект.ДокументОснование.ТранспортноеСредство;
				НоваяСтрока.Дата = Объект.ДокументОснование.ДатаВыезда;
				НоваяСтрока.Водитель = Объект.ДокументОснование.Водитель1;
				
				Если Объект.ВидДвиженияГСМ <> Перечисления.уатВидыДвиженияГСМ.ЗаправкаТалоны Тогда
					НоваяСтрока.ГСМ = Объект.ДокументОснование.ТранспортноеСредство.Модель.ОсновноеТопливо;
				КонецЕсли;
			Иначе
				НоваяСтрока.Водитель = Справочники.Сотрудники.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.Заправки.Количество() = 0 Тогда
		НоваяСтрока = Объект.Заправки.Добавить();
		Элементы.Заправки.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	Иначе
		Элементы.Заправки.ТекущаяСтрока = Объект.Заправки[0].ПолучитьИдентификатор();
	КонецЕсли;
	
	Если Параметры.Свойство("ОткрытИзПЛ") И Параметры.ОткрытИзПЛ Тогда
		ТекущийЭлемент = Элементы.ЗаправкиКоличество;
		Если Объект.Заправки.Количество() > 0 Тогда
			Элементы.Заправки.ТекущаяСтрока = 0;
		КонецЕсли;
		ТекущийЭлемент.РежимРедактирования = РежимРедактированияКолонки.Непосредственно;
	КонецЕсли;
	
	Если уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД() Тогда
		Элементы.ПутевойЛист.ОграничениеТипа = Новый ОписаниеТипов("ДокументСсылка.уатПутевойЛист");
		Элементы.ЗаправкиПутевойЛист.ОграничениеТипа = Новый ОписаниеТипов("ДокументСсылка.уатПутевойЛист");
	КонецЕсли;
	
	уатОбщегоНазначенияСервер.НастроитьПолеПодразделение(Элементы.ПодразделениеОрганизации, "Объект.Организация");
		
	// уатУправлениеАвтотранспортом.МодификацияКонфигурации
	уатМодификацияКонфигурацииПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	// Конец уатУправлениеАвтотранспортом.МодификацияКонфигурации
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// уатУправлениеАвтотранспортом.МодификацияКонфигурации
	уатМодификацияКонфигурацииКлиентПереопределяемый.ПриОткрытии(ЭтотОбъект, Отказ);
	// Конец уатУправлениеАвтотранспортом.МодификацияКонфигурации
	
	уатЗащищенныеФункцииКлиент.уатДокументФормаЭлементаПриОткрытии(Отказ, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если Объект.Ссылка.Пустая() Тогда
		Если ЗначениеЗаполнено(Объект.АЗС) Тогда
			АЗСПриИзменении(Неопределено);
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.ВидДвиженияГСМ) Тогда
			ВидДвиженияГСМПриИзменении(Неопределено);
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ВидДвиженияГСМ.СписокВыбора.Очистить();
	Для Каждого ТекВидЗаправки Из уатОбщегоНазначения.СписокВидовЗаправок() Цикл
		Элементы.ВидДвиженияГСМ.СписокВыбора.Добавить(ТекВидЗаправки.Значение, ТекВидЗаправки.Представление);
	КонецЦикла;
	
	УстановитьТипЗаправки();
	УстановитьОтборАЗС();
	УстановитьОтборДоговора();
		
	ОбновитьВсегоВТЧЗаправки();
	ОбновитьСписокПластиковыхКарт();
	   
	Если Объект.Заправки.Количество()>1 Тогда
		СпособРедактирования = 1;
	Иначе
		СпособРедактирования = 0;
		УстановитьОтборПЛ();
	КонецЕсли;
	
	// Установить видимость реквизитов и заголовков колонок.
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// Контроль вызываем здесь, а не в ОбработкаПроверкиЗаполненияНаСервере, поскольку тот не срабатывает
	// при записи. Режим проведения устанавливается программно позже - в модуле объекта в процедуре ПередЗаписью
	Если флПроверкаПередЗакрытием <> Неопределено Тогда
		Отказ = Отказ ИЛИ флПроверкаПередЗакрытием.Отказ;
		Для Каждого ТекСообщение Из флПроверкаПередЗакрытием.Сообщения Цикл
			уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекСообщение);
		КонецЦикла;
		флПроверкаПередЗакрытием = Неопределено;
	ИначеЕсли ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Запись
		ИЛИ ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		// Проверим не превышает ли заправка уровень топлива в баке
		мсвСообщениеПревышение = Новый Массив;
		ПроверитьПревышениеУровняТопливаВБаке(Отказ, Ложь, мсвСообщениеПревышение);
		Если мсвСообщениеПревышение.Количество() > 0 И ПризнакРедактированияИзПутевогоЛиста Тогда
			Оповестить("ПревышениеУровняТопливаВБаке", мсвСообщениеПревышение[0]);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
		
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ДобавлениеЗаправкиИзПЛ Тогда
		Оповестить("ДобавлениеЗаправкиИзПЛ", Объект.Ссылка);
	КонецЕсли;
	Если РедактированиеЗаправкиИзПЛ Тогда
		Оповестить("РедактированиеЗаправкиИзПЛ", Объект.Ссылка);
	КонецЕсли;
	
	#Если Клиент Тогда
		Оповестить("ЗаправкаГСМ_Запись", Объект.Ссылка, ЭтотОбъект);
	#КонецЕсли
	
	ОбновитьВсегоВТЧЗаправки();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если флВопросЗакрытиеФормы Тогда
		Отказ = Истина;
		Оповещ = Новый ОписаниеОповещения("ПередЗакрытиемВопрос", ЭтотОбъект);
		ПоказатьВопрос(Оповещ, "При проверке корректности заполнения документа возникли предупреждения!
			|Продолжить закрытие формы?", РежимДиалогаВопрос.ОКОтмена);
	ИначеЕсли Модифицированность И НЕ Объект.Ссылка.Пустая() Тогда
		флОтказ = Ложь;
		мсвСообщения = Новый Массив;
		ПроверитьПревышениеУровняТопливаВБаке(флОтказ, Истина, мсвСообщения);
		флПроверкаПередЗакрытием = Новый Структура("Отказ, Сообщения", флОтказ, мсвСообщения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемВопрос(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.ОК Тогда
		флВопросЗакрытиеФормы = Ложь;
		Закрыть();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

// уатУправлениеАвтотранспортом.МодификацияКонфигурации
&НаКлиенте
Процедура Подключаемый_ПолеФормыНажатие(Элемент, СтандартнаяОбработка)
	
	уатМодификацияКонфигурацииКлиентПереопределяемый.ПолеФормыНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	СтруктураОбъектовНастроек = Новый Структура;
	СтруктураОбъектовНастроек.Вставить("Организация", Объект.Организация);
	СтруктураОбъектовНастроек.Вставить("Подразделение", Объект.ПодразделениеОрганизации);
	
	Объект.АЗС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек,
		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ОсновнаяАЗС"));
	АЗСПриИзменении(Неопределено);
	
	Объект.ВидДвиженияГСМ = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек,
		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ОсновнойВидЗаправки"));
	ВидДвиженияГСМПриИзменении(Неопределено);
	
	Объект.УчитыватьНДС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
	ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.УчитыватьНДС"));
	Объект.СуммаВключаетНДС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
	ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.СуммаВключаетНДС"));
	
	РассчитатьСуммуНДСвТабЧасти();
	ОбновитьВсегоВТЧЗаправки();
	РассчитатьСуммуДокумента();
	
	УстановитьВидимость();

КонецПроцедуры

&НаКлиенте
Процедура ВидДвиженияГСМПриИзменении(Элемент)
	УстановитьТипЗаправки();
	СтрокаСообщения = "";
	Если НЕ КонтрольТипаАЗС(СтрокаСообщения) тогда
		Объект.АЗС = Неопределено;
	КонецЕсли;
	
	Если Объект.Заправки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если Объект.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаСклад")
		ИЛИ Объект.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад")
		ИЛИ Объект.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаТалоны") Тогда
		Объект.ДоговорКонтрагента = Неопределено;
	КонецЕсли;
	
	Для Каждого ТекСтрокаЗаправки из Объект.Заправки Цикл 
		ТекСтрокаЗаправки.Плотность = Неопределено;
		мТС = ТекСтрокаЗаправки.ТС;
		Если Объект.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКарта")
			ИЛИ Объект.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад") Тогда
			Если мТС = Неопределено Тогда
				ТекСтрокаЗаправки.ГСМ = Неопределено;
				ТекСтрокаЗаправки.ПластиковаяКарта = Неопределено;
			Иначе
				ТекСтрокаЗаправки.ГСМ = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(
					уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(мТС, "Модель"), "ОсновноеТопливо");
				АЗС = ?(ЗначениеЗаполнено(Объект.АЗС), Объект.АЗС, Неопределено);
				ПластиковаяКарта = 
					уатОбщегоНазначения.уатПластиковаяКартаТСВодителя(мТС, ТекСтрокаЗаправки.Водитель, АЗС, ТекСтрокаЗаправки.Дата);
				Если ЗначениеЗаполнено(ПластиковаяКарта) Тогда
					ТекСтрокаЗаправки.ПластиковаяКарта = ПластиковаяКарта;
				КонецЕсли;
			КонецЕсли;
		Иначе
			ТекСтрокаЗаправки.ПластиковаяКарта = Неопределено;
		КонецЕсли;
		
		Если Объект.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаСклад") 
			ИЛИ Объект.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад") Тогда
			ТекСтрокаЗаправки.Плотность = уатОбщегоНазначения.уатПрочитатьРеквизитГСМ(ТекСтрокаЗаправки.ГСМ).Плотность;
		КонецЕсли;	
		
		Если Объект.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаСклад") 
			ИЛИ Объект.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад")
			ИЛИ Объект.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаТалоны") Тогда
			ТекСтрокаЗаправки.СтавкаНДС = Неопределено;
			ТекСтрокаЗаправки.СуммаНДС = 0;
		КонецЕсли;
	КонецЦикла;
	
	УстановитьОтборАЗС();
КонецПроцедуры

&НаКлиенте
Процедура АЗСПриИзменении(Элемент)
	УстановитьОтборДоговора();
	
	СтрокаСообщения = "";
	Если Не КонтрольТипаАЗС(СтрокаСообщения) Тогда
		Объект.АЗС = Неопределено;
		ПоказатьПредупреждение(Неопределено, СтрокаСообщения, 30);
	Иначе
		Контрагент_Склад = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.АЗС, "Контрагент_Склад");
		Если ТипЗнч(Контрагент_Склад) = Тип("СправочникСсылка.Контрагенты") Тогда
			Если уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.ДоговорКонтрагента, "Владелец") <> Контрагент_Склад Тогда
				Объект.ДоговорКонтрагента = уатЗаполнениеДокументов.ПолучитьОсновнойДоговорКонтрагента(Контрагент_Склад, "СПоставщиком", Объект.Организация);
				ПриИзмененииДоговора();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКарта")
		ИЛИ Объект.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад") Тогда
		Для Каждого ТекСтрокаЗаправки из Объект.Заправки Цикл 
			АЗС = ?(ЗначениеЗаполнено(Объект.АЗС), Объект.АЗС, Неопределено);
			
			ПластиковаяКарта = уатОбщегоНазначения.уатПластиковаяКартаТСВодителя(
			ТекСтрокаЗаправки.ТС, ТекСтрокаЗаправки.Водитель, АЗС, ТекСтрокаЗаправки.Дата);
			Если ЗначениеЗаполнено(ПластиковаяКарта) Тогда
				ТекСтрокаЗаправки.ПластиковаяКарта = ПластиковаяКарта;
			КонецЕсли;
			ОбновитьСписокПластиковыхКарт();
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	ПриИзмененииДоговора();
КонецПроцедуры 

&НаКлиенте
Процедура ДоговорКонтрагентаСоздание(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВидДоговораДоступныеЗначения = Новый Массив;
	
	мВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком");
	ВидДоговораДоступныеЗначения.Добавить(мВидДоговора);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ВидДоговораДоступныеЗначения", ВидДоговораДоступныеЗначения);
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ВодительПриИзменении(Элемент)
	Если Объект.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКарта")
		ИЛИ Объект.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад") Тогда
		АЗС = ?(ЗначениеЗаполнено(Объект.АЗС), Объект.АЗС, Неопределено);
		ПластиковаяКарта = уатОбщегоНазначения.уатПластиковаяКартаТСВодителя(
		Элементы.Заправки.ТекущиеДанные.ТС, Элементы.Заправки.ТекущиеДанные.Водитель, АЗС, Элементы.Заправки.ТекущиеДанные.Дата);
		Если ЗначениеЗаполнено(ПластиковаяКарта) Тогда
			Элементы.Заправки.ТекущиеДанные.ПластиковаяКарта = ПластиковаяКарта;
		КонецЕсли;
		
	КонецЕсли;
		
	ОбновитьСписокПластиковыхКарт();
КонецПроцедуры

&НаКлиенте
Процедура ВодительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекСтрока = Элементы.Заправки.ТекущиеДанные;
	уатЗащищенныеФункцииКлиент.ДиалогВыбораСотрудника(Элемент, ТекСтрока.Водитель,
		Новый Структура("Организация", Объект.Организация), СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ВодительАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Ожидание = 0 Тогда //выбор из списка
		Возврат;
	КонецЕсли;
	
	ТекСтрока = Элементы.Заправки.ТекущиеДанные;
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, ТекСтрока.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура ВодительОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ТекСтрока = Элементы.Заправки.ТекущиеДанные;
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, ТекСтрока.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура ГСМНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если Объект.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаТалоны") Тогда
		мГруппаГСМ = ПредопределенноеЗначение("Перечисление.уатГруппыГСМ.Талон");
		мУчитыватьТЖ = Ложь;
	Иначе	
		мГруппаГСМ = ПредопределенноеЗначение("Перечисление.уатГруппыГСМ.Топливо");
		мУчитыватьТЖ = Истина;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("ТопливоДоИзменения", Элементы.Заправки.ТекущиеДанные.ГСМ);
	ОписаниеОповещенияЗакр  = Новый ОписаниеОповещения("ОписаниеОповещенияВыбораГСМ", ЭтотОбъект, ДополнительныеПараметры);
	уатЗащищенныеФункцииКлиент.СписокГСМдляТС(Объект.Организация, Элементы.Заправки.ТекущиеДанные.ТС, мГруппаГСМ,, мУчитыватьТЖ, ОписаниеОповещенияЗакр);
	
КонецПроцедуры

// Подключаемый динамически обработчик оповещения
&НаКлиенте
Процедура ОписаниеОповещенияВыбораГСМ(Результат, ДопПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		ТекСтрока = Элементы.Заправки.ТекущиеДанные;
		ТекСтрока.ГСМ = Результат;
		Если Объект.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаСклад") 
			Или  Объект.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад") Тогда
			ТекСтрока.Плотность = уатОбщегоНазначения.уатПрочитатьРеквизитГСМ(Результат).Плотность;
		КонецЕсли;
		ГСМПриИзменении(Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГСМОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ТекГСМ = Объект.Заправки[0].ГСМ;
	Если ЗначениеЗаполнено(ТекГСМ) Тогда
		ОткрытьФорму("РегистрСведений.уатНоменклатураГСМ.ФормаЗаписи", Новый Структура("Ключ",
		ПолучитьКлючЗаписиГСМ(ТекГСМ)), Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГСМПриИзменении(Элемент)
	ТекСтрока = Объект.Заправки[0];
	
	СтруктураЦенаВалюта = уатОбщегоНазначения.уатНайтиЦенуНоменклатуры(ТекСтрока.Дата, ТекСтрока.ГСМ, Объект.АЗС, Ложь);
	Если ЗначениеЗаполнено(СтруктураЦенаВалюта.Цена) Тогда
		мЦена = СтруктураЦенаВалюта.Цена;
		ТекСтрока.Цена = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(мЦена,
		СтруктураЦенаВалюта.Валюта,
		ТекСтрока.Валюта,
		Объект.Дата, Объект.Дата);
		ЦенаПриИзменении(Неопределено);
	КонецЕсли;
	Если Объект.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаСклад") 
			Или  Объект.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад") Тогда
			ТекСтрока.Плотность = уатОбщегоНазначения.уатПрочитатьРеквизитГСМ(ТекСтрока.ГСМ).Плотность;
	КонецЕсли;
	Если Объект.УчитыватьНДС И ЗначениеЗаполнено(ТекСтрока.ГСМ) Тогда
		СтавкаНДС = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрока.ГСМ, "СтавкаНДС");
		ТекСтрока.СтавкаНДС = ?(ЗначениеЗаполнено(СтавкаНДС), СтавкаНДС, ТекСтрока.СтавкаНДС);
	Иначе
		ТекСтрока.СтавкаНДС = Неопределено;
	Конецесли;

КонецПроцедуры

&НаКлиенте
Процедура ПластиковаяКартаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокВладельцев = Новый СписокЗначений;
	Если ЗначениеЗаполнено(Элементы.Заправки.ТекущиеДанные.ТС) Тогда
		СписокВладельцев.Добавить(Элементы.Заправки.ТекущиеДанные.ТС);
	КонецЕсли;
	ТСВладелец = уатОбщегоНазначения.ПолучитьВладельцаТС(Элементы.Заправки.ТекущиеДанные.ТС);
	Если ТСВладелец <> Неопределено Тогда
		СписокВладельцев.Добавить(ТСВладелец);
	КонецЕсли;

	Если ЗначениеЗаполнено(Элементы.Заправки.ТекущиеДанные.Водитель) Тогда
		СписокВладельцев.Добавить(Элементы.Заправки.ТекущиеДанные.Водитель);
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура();
	Если СписокВладельцев.Количество() <> 0 Тогда
		СтруктураОтбора.Вставить("КомуВыдана", СписокВладельцев);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.АЗС) Тогда
		СтруктураОтбора.Вставить("КемВыдана", Объект.АЗС);
	КонецЕсли;
	
	ПарамВыбора = Новый Структура("Отбор", СтруктураОтбора);
	ОткрытьФорму("Справочник.уатПластиковыеКарты.ФормаВыбора", ПарамВыбора, Элемент,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоПриИзменении(Элемент)
	РассчитатьСумму(Объект.Заправки[0]);
	РассчитатьСуммуНДС(Объект.Заправки[0]);
	РассчитатьСуммуДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ЦенаПриИзменении(Элемент)
	РассчитатьСумму(Объект.Заправки[0]);
	РассчитатьСуммуНДС(Объект.Заправки[0]);
	РассчитатьСуммуДокумента();
КонецПроцедуры

&НаКлиенте
Процедура СуммаПриИзменении(Элемент)
	ПриИзмененииСуммы(Объект.Заправки[0]);
	РассчитатьСуммуНДС(Объект.Заправки[0]);
	РассчитатьСуммуДокумента();
КонецПроцедуры

&НаКлиенте
Процедура СтавкаНДСПриИзменении(Элемент)
	РассчитатьСуммуНДС(Объект.Заправки[0]);
	РассчитатьСуммуДокумента();
КонецПроцедуры

&НаКлиенте
Процедура СпособРедактрованияПриИзменении(Элемент)
	Если Не Булево(СпособРедактирования) И Объект.Заправки.Количество() > 1 Тогда
		ТекстНСТР = НСтр("en='All lines of refuelings, except the first, will be deleted. Continue?';ru='Все строки заправок, кроме первой, будут удалены. Продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("СпособРедактрованияПриИзмененииЗавершение", ЭтотОбъект),
			ТекстНСТР, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
			
		Возврат;
	Иначе
		Если Объект.Заправки.Количество()  = 0 Тогда
			НоваяЗаправка = Объект.Заправки.Добавить();
			НоваяЗаправка.Дата = ТекущаяДата();
		КонецЕсли;
		
		Элементы.Заправки.ТекущаяСтрока = Объект.Заправки[0].ПолучитьИдентификатор();
		СтрокаЗаправки = Элементы.Заправки.ТекущиеДанные;
	КонецЕсли;
	
	СпособРедактрованияПриИзмененииФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ПутевойЛистПриИзменении(Элемент)
	ТекСтрока = Элементы.Заправки.ТекущиеДанные;
	Если ТекСтрока = Неопределено ИЛИ НЕ ЗначениеЗаполнено(ТекСтрока.ПутевойЛист) Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекСтрока.ТС) Тогда
		мсвТС = ПолучитьТСИПрицепыПоПутевомуЛисту(ТекСтрока.ПутевойЛист);
		Если мсвТС.Найти(ТекСтрока.ТС) = Неопределено Тогда
			ТекСтрока.ТС = ПолучитьТСПоПутевомуЛисту(ТекСтрока.ПутевойЛист);
			ЗаправкиТСПриИзменении(Элемент);
		КонецЕсли;
	Иначе
		ТекСтрока.ТС = ПолучитьТСПоПутевомуЛисту(ТекСтрока.ПутевойЛист);
		ЗаправкиТСПриИзменении(Элемент);
	КонецЕсли;
	
	УстановитьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЗаправки

&НаКлиенте
Процедура ЗаправкиДатаПриИзменении(Элемент)
	ТекСтрока = Элементы.Заправки.ТекущиеДанные;
	уатОбщегоНазначения.ЗаполнитьЭкипажТС(ТекСтрока.ТС, Объект.Организация, ТекСтрока.Дата, ТекСтрока.Водитель,,,,Ложь,,,Истина);
КонецПроцедуры

&НаКлиенте
Процедура ДатаЗаправкиПриИзменении(Элемент)
	ТекСтрока = Элементы.Заправки.ТекущиеДанные;
	уатОбщегоНазначения.ЗаполнитьЭкипажТС(ТекСтрока.ТС, Объект.Организация, ТекСтрока.Дата, ТекСтрока.Водитель,,,,Ложь,,,Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиПриАктивизацииСтроки(Элемент)
	СтрокаЗаправки = Элементы.Заправки.ТекущиеДанные;
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекСтрока = Элементы.Заправки.ТекущиеДанные;
	Если Поле.Имя = "ЗаправкиПутевойЛист"
		И ЗначениеЗаполнено(ТекСтрока.ПутевойЛист)
		И уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрока.ПутевойЛист, "Рассчитан") Тогда
		
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(Неопределено, ТекСтрока.ПутевойЛист);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиПередНачаломИзменения(Элемент, Отказ)
	мПутевойЛист = Элементы.Заправки.ТекущиеДанные.ПутевойЛист;
	
	Если ЗначениеЗаполнено(мПутевойЛист)
		И уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(мПутевойЛист, "Проведен")
		И уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(мПутевойЛист, "Рассчитан") Тогда
		
		Если ПризнакРедактированияИзПутевогоЛиста И ПризнакРедактированияИзПутевогоЛистаСсылка = мПутевойЛист Тогда
		Иначе
			Отказ = Истина;
			ТекстНСТР = НСтр("en='You can not change the refueling for a closed waybill!';ru='Нельзя изменить заправку для закрытого путевого листа!'");
			ПоказатьПредупреждение(Новый ОписаниеОповещения("ЗаправкиПередНачаломИзмененияЗавершение", ЭтотОбъект,
			Новый Структура("мПутевойЛист, Элемент", мПутевойЛист, Элемент)), ТекстНСТР);
			Возврат;
		КонецЕсли;
		
		ЗаправкиПередНачаломИзмененияФрагмент(мПутевойЛист, Элемент);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиПередНачаломИзмененияЗавершение(ДополнительныеПараметры) Экспорт
    
    мПутевойЛист = ДополнительныеПараметры.мПутевойЛист;
    Элемент = ДополнительныеПараметры.Элемент;
    
    
    ЗаправкиПередНачаломИзмененияФрагмент(мПутевойЛист, Элемент);

КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиПередНачаломИзмененияФрагмент(Знач мПутевойЛист, Знач Элемент)
    
    Если Элемент.ТекущийЭлемент.Имя = "ЗаправкиПутевойЛист" Тогда
        ПоказатьЗначение(Неопределено, мПутевойЛист);
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиПередУдалением(Элемент, Отказ)
	Если Объект.Заправки.Количество() = 1 Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// получили пут. лист
	мПутевойЛист = Элементы.Заправки.ТекущиеДанные.ПутевойЛист;
	
	Если ЗначениеЗаполнено(мПутевойЛист)
		И уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(мПутевойЛист, "Проведен")
		И уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(мПутевойЛист, "Рассчитан") Тогда
		
		Если ПризнакРедактированияИзПутевогоЛиста И ПризнакРедактированияИзПутевогоЛистаСсылка = мПутевойЛист Тогда
		Иначе
			Отказ = Истина;
			ТекстНСТР = НСтр("en='You can not change the refueling for a closed waybill!';ru='Нельзя изменить заправку для закрытого путевого листа!'");
			ПоказатьПредупреждение(Неопределено, ТекстНСТР);
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиПередОкончаниемРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования, Отказ)
	Если (НЕ ОтменаРедактирования) Тогда
		мПутевойЛист = Элементы.Заправки.ТекущиеДанные.ПутевойЛист;
		
		Если ЗначениеЗаполнено(мПутевойЛист)
			И уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(мПутевойЛист, "Проведен")
			И уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(мПутевойЛист, "Рассчитан") Тогда
			
			Если ПризнакРедактированияИзПутевогоЛиста И ПризнакРедактированияИзПутевогоЛистаСсылка = мПутевойЛист Тогда
			Иначе
				Отказ = Истина;
				ТекстНСТР = НСтр("en='Cannot add/change refueling for closed waybill!';ru='Нельзя добавить/изменить заправку для закрытого путевого листа!'");
				ПоказатьПредупреждение(Неопределено, ТекстНСТР);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	мСписок = Новый СписокЗначений;
	
	Если НоваяСтрока Тогда
		ТекСтрока = Элементы.Заправки.ТекущиеДанные;
		Если НЕ ЗначениеЗаполнено(ТекСтрока.Валюта) Тогда
			ТекСтрока.Валюта = ?(ЗначениеЗаполнено(ВалютаВзаиморасчетов), ВалютаВзаиморасчетов, ВалютаРегламентированногоУчета);
		КонецЕсли;
		Если Объект.УчитыватьНДС И НЕ ЗначениеЗаполнено(ТекСтрока.СтавкаНДС) Тогда
			ТекСтрока.СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
			ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнаяСтавкаНДС");
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
			Если НЕ уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД()
				И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.уатТехнологическийПутевойЛист") Тогда
				ИмяРеквизитаТС = "ТС";
				ИмяРеквизитаВодитель = "Водитель";
			Иначе
				ИмяРеквизитаТС = "ТранспортноеСредство";
				ИмяРеквизитаВодитель = "Водитель1";
			КонецЕсли;
			
			СтруктураРеквизитовОснование = уатОбщегоНазначенияТиповые.ПолучитьЗначенияРеквизитов(
				Объект.ДокументОснование, ИмяРеквизитаТС + ", ДатаВыезда, " + ИмяРеквизитаВодитель);
			
			ТекСтрока.ПутевойЛист = Объект.ДокументОснование;
			ТекСтрока.ТС = СтруктураРеквизитовОснование[ИмяРеквизитаТС];
			АЗС = ?(ЗначениеЗаполнено(Объект.АЗС), Объект.АЗС, Неопределено);
			ПластиковаяКарта = уатОбщегоНазначения.уатПластиковаяКартаТСВодителя(ТекСтрока.ТС, ТекСтрока.Водитель,
				АЗС, ТекСтрока.Дата);
			Если ЗначениеЗаполнено(ПластиковаяКарта) Тогда
				ТекСтрока.ПластиковаяКарта = ПластиковаяКарта;
			КонецЕсли;

			Если НЕ ЗначениеЗаполнено(ТекСтрока.Дата) Тогда 
				ТекСтрока.Дата = СтруктураРеквизитовОснование.ДатаВыезда;
			КонецЕсли;
			Если Не ЗначениеЗаполнено(ТекСтрока.Водитель) Тогда
				ТекСтрока.Водитель = СтруктураРеквизитовОснование[ИмяРеквизитаВодитель];
			КонецЕсли;
			Если Объект.ВидДвиженияГСМ <> ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаТалоны") И
				НЕ ЗначениеЗаполнено(ТекСтрока.ГСМ) Тогда
				ТекСтрока.ГСМ = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(
					уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(СтруктураРеквизитовОснование[ИмяРеквизитаТС],
					"Модель"), "ОсновноеТопливо");
			КонецЕсли;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ТекСтрока.Дата) Тогда
			ТекСтрока.Дата = Объект.Дата;
		КонецЕсли;
		Если Объект.УчитыватьНДС И НЕ ЗначениеЗаполнено(ТекСтрока.СтавкаНДС) Тогда
			ТекСтрока.СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
				ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнаяСтавкаНДС");
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.АЗС) И ЗначениеЗаполнено(ТекСтрока.ГСМ) Тогда
			 ЗаправкиГСМПриИзменении(Элемент);
	 	КонецЕсли;
		Если НЕ Копирование Тогда
			ТекСтрока.Водитель = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьСписокВыбораЭкипажа();
	УстановитьОтборПЛ();
	ОбновитьСписокПластиковыхКарт();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОбновитьВсегоВТЧЗаправки();
	РассчитатьСуммуДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиПослеУдаления(Элемент)
	ОбновитьВсегоВТЧЗаправки();
	РассчитатьСуммуДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если Объект.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаТалоны") Тогда
		мГруппаГСМ = ПредопределенноеЗначение("Перечисление.уатГруппыГСМ.Талон");
		мУчитыватьТЖ = Ложь;
	Иначе	
		мГруппаГСМ = ПредопределенноеЗначение("Перечисление.уатГруппыГСМ.Топливо");
		мУчитыватьТЖ = Истина;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура("ТопливоДоИзменения", Элементы.Заправки.ТекущиеДанные.ГСМ);
	ОписаниеОповещенияЗакр  = Новый ОписаниеОповещения("ОписаниеОповещенияВыбораЗаправкиГСМ", ЭтотОбъект, ДополнительныеПараметры);
	уатЗащищенныеФункцииКлиент.СписокГСМдляТС(Объект.Организация, Элементы.Заправки.ТекущиеДанные.ТС, мГруппаГСМ,, мУчитыватьТЖ, ОписаниеОповещенияЗакр);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ТекГСМ = Элементы.Заправки.ТекущиеДанные.ГСМ;
	Если ЗначениеЗаполнено(ТекГСМ) Тогда
		ОткрытьФорму("РегистрСведений.уатНоменклатураГСМ.ФормаЗаписи", Новый Структура("Ключ",
		ПолучитьКлючЗаписиГСМ(ТекГСМ)), Элемент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМПриИзменении(Элемент)
	ТекСтрока = Элементы.Заправки.ТекущиеДанные;
	
	СтруктураЦенаВалюта = уатОбщегоНазначения.уатНайтиЦенуНоменклатуры(ТекСтрока.Дата, ТекСтрока.ГСМ, Объект.АЗС, Ложь);
	Если ЗначениеЗаполнено(СтруктураЦенаВалюта.Цена) Тогда
		мЦена			= СтруктураЦенаВалюта.Цена;
		ТекСтрока.Цена	= уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(мЦена,
			СтруктураЦенаВалюта.Валюта,
			ТекСтрока.Валюта,
			Объект.Дата, Объект.Дата);
		ЗаправкиЦенаПриИзменении(Неопределено);
	КонецЕсли;
	Если Объект.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаСклад")
			ИЛИ Объект.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад") Тогда
			ТекСтрока.Плотность = уатОбщегоНазначения.уатПрочитатьРеквизитГСМ(ТекСтрока.ГСМ).Плотность;
	КонецЕсли;
	Если Объект.УчитыватьНДС И ЗначениеЗаполнено(ТекСтрока.ГСМ) Тогда
		СтавкаНДС = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(
			ТекСтрока.ГСМ, "СтавкаНДС");
		ТекСтрока.СтавкаНДС = ?(ЗначениеЗаполнено(СтавкаНДС), СтавкаНДС, ТекСтрока.СтавкаНДС);
	Иначе
		ТекСтрока.СтавкаНДС = Неопределено;
	Конецесли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиТСПриИзменении(Элемент)
	ТекСтрока = Элементы.Заправки.ТекущиеДанные;
	ПредГСМ = ТекСтрока.ГСМ;
	УстановитьТС(ТекСтрока.ТС);
	Если ТекСтрока.ГСМ <> ПредГСМ Тогда
		ЗаправкиГСМПриИзменении(Элемент);
	КонецЕсли;
	Если Объект.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКарта")
		ИЛИ Объект.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад") Тогда
		Если ЗначениеЗаполнено(ТекСтрока.ТС) и ЗначениеЗаполнено(ТекСтрока.ПутевойЛист) Тогда
			АЗС = ?(ЗначениеЗаполнено(Объект.АЗС), Объект.АЗС, Неопределено);
			ПластиковаяКарта = уатОбщегоНазначения.уатПластиковаяКартаТСВодителя(ТекСтрока.ТС,ТекСтрока.Водитель, АЗС, ТекСтрока.Дата);
			Если ЗначениеЗаполнено(ПластиковаяКарта) Тогда
				ТекСтрока.ПластиковаяКарта = ПластиковаяКарта;
			Иначе
				Если НЕ уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД()
					И ТипЗнч(ТекСтрока.ПутевойЛист) = Тип("ДокументСсылка.уатТехнологическийПутевойЛист") Тогда
					ТС = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрока.ПутевойЛист, "ТС");
				Иначе
					ТС = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрока.ПутевойЛист, "ТранспортноеСредство");
				КонецЕсли;
				ПластиковаяКарта = уатОбщегоНазначения.уатПластиковаяКартаТСВодителя(ТС, ТекСтрока.Водитель, АЗС, ТекСтрока.Дата);
				Если ЗначениеЗаполнено(ПластиковаяКарта) Тогда
					ТекСтрока.ПластиковаяКарта = ПластиковаяКарта;
				КонецЕсли;

			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьСписокВыбораЭкипажа();
	ОбновитьСписокПластиковыхКарт();
	
	УстановитьОтборПЛ();
	Если ЗначениеЗаполнено(ТекСтрока.ПутевойЛист)
		И Элементы.ПутевойЛист.ПараметрыВыбора.Количество() > 0
		И ТипЗнч(Элементы.ПутевойЛист.ПараметрыВыбора[0].Значение) = Тип("Массив")
		И Элементы.ПутевойЛист.ПараметрыВыбора[0].Значение.Найти(ТекСтрока.ПутевойЛист) = Неопределено Тогда
		ТекСтрока.ПутевойЛист = Неопределено;
	КонецЕсли;
	
	Если СпособРедактирования = 0 И ЗначениеЗаполнено(ТекСтрока.ТС) Тогда
		МестонахождениеТС = уатОбщегоНазначения.МестонахождениеТС(ТекСтрока.ТС, ТекСтрока.Дата);
		Если НЕ ЗначениеЗаполнено(Объект.Колонна) Тогда
			Объект.Колонна = МестонахождениеТС.Колонна;
		КонецЕсли;
	КонецЕсли;

	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиТСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.РеквизитТСНачалоВыбора(Элемент, Элементы.Заправки.ТекущиеДанные.ТС, ДанныеВыбора, СтандартнаяОбработка, СтруктураОтборТС());
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиТСАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.РеквизитТСАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка, СтруктураОтборТС());
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	уатИнтерфейсВводаТС.РеквизитТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка, СтруктураОтборТС());
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиГСМАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ТекСтрока = Элементы.Заправки.ТекущиеДанные;
	
	СтандартнаяОбработка = Ложь;
	мсвГруппДляОтбора = Новый Массив;
	Если Объект.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаТалоны") Тогда
		мсвГруппДляОтбора.Добавить(ПредопределенноеЗначение("Перечисление.уатГруппыГСМ.Талон"));
		мУчитыватьТЖ = Ложь;
	Иначе	
		мсвГруппДляОтбора.Добавить(ПредопределенноеЗначение("Перечисление.уатГруппыГСМ.Топливо"));
		мУчитыватьТЖ = Истина;
	КонецЕсли;
	ДопПараметры = Новый Структура("ТС, Организация, УчитыватьТЖ", ТекСтрока.ТС, Объект.Организация, мУчитыватьТЖ);
	ДанныеВыбора = уатГСМ.ПолучитьСписокАвтоподбораПоляГСМ(Текст, мсвГруппДляОтбора, ДопПараметры);
КонецПроцедуры

&НаКлиенте
Процедура ГСМОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ПараметрыПолученияДанных.СтрокаПоиска = "";
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиВодительПриИзменении(Элемент)
	Если Объект.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКарта")
		ИЛИ Объект.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад") Тогда
		АЗС = ?(ЗначениеЗаполнено(Объект.АЗС), Объект.АЗС, Неопределено);
		ПластиковаяКарта = уатОбщегоНазначения.уатПластиковаяКартаТСВодителя(
		Элементы.Заправки.ТекущиеДанные.ТС, Элементы.Заправки.ТекущиеДанные.Водитель, АЗС, Элементы.Заправки.ТекущиеДанные.Дата);
		Если ЗначениеЗаполнено(ПластиковаяКарта) Тогда
			Элементы.Заправки.ТекущиеДанные.ПластиковаяКарта = ПластиковаяКарта;
		КонецЕсли;
		
	КонецЕсли;
		
	ОбновитьСписокПластиковыхКарт();
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиВодительНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ДиалогВыбораСотрудника(Элемент, Элементы.Заправки.ТекущиеДанные.Водитель, Новый Структура("Организация", Объект.Организация), СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиВодительОткрытие(Элемент, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ОткрытьФормуСотрудника(Элементы.Заправки.ТекущиеДанные.Водитель, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиВодительАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Ожидание = 0 Тогда //выбор из списка
		Возврат;
	КонецЕсли;
	
	ТекСтрока = Элементы.Заправки.ТекущиеДанные;
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, ТекСтрока.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиВодительОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ТекСтрока = Элементы.Заправки.ТекущиеДанные;
	СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Объект.Организация, ТекСтрока.Дата);
	уатИнтерфейсВводаСотрудников.СотрудникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиПластиковаяКартаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	СписокВладельцев = Новый СписокЗначений;
	Если ЗначениеЗаполнено(Элементы.Заправки.ТекущиеДанные.ТС) Тогда
		СписокВладельцев.Добавить(Элементы.Заправки.ТекущиеДанные.ТС);
	КонецЕсли;
	ТСВладелец = уатОбщегоНазначения.ПолучитьВладельцаТС(Элементы.Заправки.ТекущиеДанные.ТС);
	Если ТСВладелец <> Неопределено Тогда
		СписокВладельцев.Добавить(ТСВладелец);
	КонецЕсли;

	Если ЗначениеЗаполнено(Элементы.Заправки.ТекущиеДанные.Водитель) Тогда
		СписокВладельцев.Добавить(Элементы.Заправки.ТекущиеДанные.Водитель);
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура();
	Если СписокВладельцев.Количество() <> 0 Тогда
		СтруктураОтбора.Вставить("КомуВыдана", СписокВладельцев);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.АЗС) Тогда
		СтруктураОтбора.Вставить("КемВыдана", Объект.АЗС);
	КонецЕсли;
	
	ПарамВыбора = Новый Структура("Отбор", СтруктураОтбора);
	ОткрытьФорму("Справочник.уатПластиковыеКарты.ФормаВыбора", ПарамВыбора, Элемент,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиКоличествоПриИзменении(Элемент)
	РассчитатьСумму(Элементы.Заправки.ТекущиеДанные);
	РассчитатьСуммуНДС(Элементы.Заправки.ТекущиеДанные);
	РассчитатьСуммуДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиЦенаПриИзменении(Элемент)
	РассчитатьСумму(Элементы.Заправки.ТекущиеДанные);
	РассчитатьСуммуНДС(Элементы.Заправки.ТекущиеДанные);
	РассчитатьСуммуДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиСуммаПриИзменении(Элемент)
	ПриИзмененииСуммы(Элементы.Заправки.ТекущиеДанные);
	РассчитатьСуммуНДС(Элементы.Заправки.ТекущиеДанные);
	РассчитатьСуммуВсегоВстрокеТЧ(Элементы.Заправки.ТекущиеДанные);
	РассчитатьСуммуДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиСуммаНДСПриИзменении(Элемент)
	РассчитатьСуммуВсегоВстрокеТЧ(Элементы.Заправки.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиСтавкаНДСПриИзменении(Элемент)
	РассчитатьСуммуНДС(Элементы.Заправки.ТекущиеДанные);
	РассчитатьСуммуВсегоВстрокеТЧ(Элементы.Заправки.ТекущиеДанные);
	РассчитатьСуммуДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиПутевойЛистПриИзменении(Элемент)
	ТекСтрока = Элементы.Заправки.ТекущиеДанные;
	Если ТекСтрока = Неопределено ИЛИ НЕ ЗначениеЗаполнено(ТекСтрока.ПутевойЛист) Тогда
		Возврат;
	КонецЕсли;
		
	Если ЗначениеЗаполнено(ТекСтрока.ТС) Тогда
		
		мсвТС = ПолучитьТСИПрицепыПоПутевомуЛисту(ТекСтрока.ПутевойЛист);
		Если мсвТС.Найти(ТекСтрока.ТС) = Неопределено Тогда
			ТекСтрока.ТС = ПолучитьТСПоПутевомуЛисту(ТекСтрока.ПутевойЛист);
			ЗаправкиТСПриИзменении(Элемент);
		КонецЕсли;
		ТекСтрока.Водитель = ПолучитьВодителяПоПЛ(ТекСтрока.ПутевойЛист);
		
	Иначе
		ТекСтрока.ТС = ПолучитьТСПоПутевомуЛисту(ТекСтрока.ПутевойЛист);
		ЗаправкиТСПриИзменении(Элемент);
	КонецЕсли;
	
	УстановитьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура ПластиковаяКартаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	АвтоПодбор(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПластиковаяКартаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	АвтоПодбор(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиПластиковаяКартаАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	АвтоПодбор(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ЗаправкиПластиковаяКартаОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	АвтоПодбор(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// уатУправлениеАвтотранспортом.МодификацияКонфигурации
&НаКлиенте
Процедура Подключаемый_уатВыполнитьКоманду(Команда)
	
	уатМодификацияКонфигурацииКлиентПереопределяемый.ВыполнитьПодключаемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры
// Конец уатУправлениеАвтотранспортом.МодификацияКонфигурации

&НаКлиенте
Процедура РедактироватьСписком(Команда)
	
	УстановитьВозможностьРедактированияСписком();
	
КонецПроцедуры // РедактироватьСписком()

&НаКлиенте
Процедура ЗаполнитьПоПутевомуЛисту(Команда)
	Если Объект.Заправки.Количество() > 0 Тогда
		ТекстНСТР = НСтр("en='Tabular section will be cleared. Continue?';ru='Табличная часть будет очищена. Продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоПутевомуЛистуЗавершение", ЭтотОбъект), 
			ТекстНСТР, РежимДиалогаВопрос.ДаНет, 0, КодВозвратаДиалога.Нет);
        Возврат;
	КонецЕсли;
	
	ЗаполнитьПоПутевомуЛистуФрагмент();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// Процедура - устанавливает возможность редактирования списком.
//
&НаКлиенте
Процедура УстановитьВозможностьРедактированияСписком()
	Элементы.РедактироватьСписком.Пометка = НЕ Элементы.РедактироватьСписком.Пометка;
	
	КоличествоСтрок = Объект.Заправки.Количество();
	
	Если НЕ Элементы.РедактироватьСписком.Пометка И Объект.Заправки.Количество() > 1 Тогда
		ТекстНСТР = НСтр("en='All lines except the first will be deleted. Continue?';ru='Все строки кроме первой будут удалены. Продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("УстановитьВозможностьРедактированияСпискомЗавершение", ЭтотОбъект,
			Новый Структура("КоличествоСтрок", КоличествоСтрок)), ТекстНСТР, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
	//Если Элементы.РедактироватьСписком.Пометка Тогда
	//	Элементы.Страницы.ТекущаяСтраница = Элементы.Списком;
	//Иначе
	//	Элементы.Страницы.ТекущаяСтраница = Элементы.ОднаСтрока;
	//КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВозможностьРедактированияСпискомЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    КоличествоСтрок = ДополнительныеПараметры.КоличествоСтрок;
    
    
    Ответ = РезультатВопроса;
    
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        Элементы.РедактироватьСписком.Пометка = Истина;
        Возврат;
    КонецЕсли;
    
    Пока КоличествоСтрок > 1 Цикл
        Объект.Заправки.Удалить(Объект.Заправки[КоличествоСтрок - 1]);
        КоличествоСтрок = КоличествоСтрок - 1;
    КонецЦикла;
    Элементы.Заправки.ТекущаяСтрока = Объект.Заправки[0].ПолучитьИдентификатор();

КонецПроцедуры // УстановитьВозможностьРедактированияСписком()

&НаКлиенте
Процедура УстановитьТипЗаправки()
	Для Каждого ТекСтрока Из Объект.Заправки Цикл
		мГруппаГСМ = уатОбщегоНазначения.уатПрочитатьРеквизитГСМ(ТекСтрока.ГСМ, "ГруппаГСМ");
		Если (Объект.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаТалоны") И 
			мГруппаГСМ <> ПредопределенноеЗначение("Перечисление.уатГруппыГСМ.Талон")) ИЛИ
			(Объект.ВидДвиженияГСМ <> ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаТалоны") И 
			мГруппаГСМ = ПредопределенноеЗначение("Перечисление.уатГруппыГСМ.Талон")) Тогда
			ТекСтрока.ГСМ = "";
		КонецЕсли;
	КонецЦикла;
	
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТС(мТС)
	ТекСтрокаЗаправки = Элементы.Заправки.ТекущиеДанные;
	
	Если ТекСтрокаЗаправки.ПутевойЛист = Неопределено Тогда
		ТСПЛ = Неопределено;
	Иначе
		Если НЕ уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД()
			И ТипЗнч(ТекСтрокаЗаправки.ПутевойЛист) = Тип("ДокументСсылка.уатТехнологическийПутевойЛист") Тогда
			ТСПЛ = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрокаЗаправки.ПутевойЛист, "ТС");
		Иначе
			ТСПЛ = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрокаЗаправки.ПутевойЛист, "ТранспортноеСредство");
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекСтрокаЗаправки.ПутевойЛист) ИЛИ ТСПЛ <> мТС Тогда
		мДатаНачала = ДобавитьМесяц(ТекСтрокаЗаправки.Дата, -1);
		мДатаКонца  = ДобавитьМесяц(ТекСтрокаЗаправки.Дата,  1);
		УстановитьТССервер(ТекСтрокаЗаправки.ПутевойЛист, ТекСтрокаЗаправки.Водитель, мТС, мДатаНачала, мДатаКонца,
			ТекСтрокаЗаправки.Дата, Объект.Организация);
	КонецЕсли;
	
	Если мТС = Неопределено Тогда
		ТекСтрокаЗаправки.ГСМ = Неопределено;
		ТекСтрокаЗаправки.ПластиковаяКарта = Неопределено;
	Иначе
		Если Объект.ВидДвиженияГСМ <> ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаТалоны") Тогда
			ТекСтрокаЗаправки.ГСМ = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(
				уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(мТС, "Модель"), "ОсновноеТопливо");
			
			Если Объект.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКарта")
				ИЛИ Объект.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад") Тогда
				АЗС = ?(ЗначениеЗаполнено(Объект.АЗС), Объект.АЗС, Неопределено);
				ПластиковаяКарта = уатОбщегоНазначения.уатПластиковаяКартаТСВодителя(мТС,	ТекСтрокаЗаправки.Водитель, АЗС, ТекСтрокаЗаправки.Дата);
				Если ЗначениеЗаполнено(ПластиковаяКарта) Тогда
					ТекСтрокаЗаправки.ПластиковаяКарта = ПластиковаяКарта;
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьТССервер(мПутевойЛист, мВодитель, мТС, мДатаНачала, мДата, ДатаЗаправки, Организация)
	
	ТаблицаПЛ = уатОбщегоНазначения.уатПутевыеЛисты(мТС, мДатаНачала, КонецДня(мДата),, Ложь);
	
	Если ТаблицаПЛ.Количество() > 0 Тогда
		мПутевойЛист = ТаблицаПЛ[0].Ссылка;
		Если уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД()
			ИЛИ ТипЗнч(мПутевойЛист) <> Тип("ДокументСсылка.уатТехнологическийПутевойЛист") Тогда
			мВодитель = мПутевойЛист.Водитель1;
		Иначе
			мВодитель = мПутевойЛист.Водитель;
		КонецЕсли;
	Иначе
		// заполняем водителей
		уатОбщегоНазначения.ЗаполнитьЭкипажТС(мТС, Организация, ДатаЗаправки, мВодитель);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимость()
	
	Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницы.ПодчиненныеЭлементы.ГруппаЗаправки;
	Если СпособРедактирования = 0 Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.ОднаСтрока;
	Иначе
		Элементы.Страницы.ТекущаяСтраница = Элементы.Страницы.ПодчиненныеЭлементы.Списком;
	КонецЕсли;
	Элементы.Колонна.Видимость = (СпособРедактирования <> 0);
	
	флЗаправкаПластикКарта = (Объект.ВидДвиженияГСМ = 
	ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКарта"));
	флЗаправкаТалоны       = (Объект.ВидДвиженияГСМ = 
	ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаТалоны"));
	флЗаправкаНаличные     = (Объект.ВидДвиженияГСМ = 
	ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаНаличные"));
	флЗаправкаПоставщик    = (Объект.ВидДвиженияГСМ = 
	ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПоставщик"));
	флЗаправкаСклад        = (Объект.ВидДвиженияГСМ = 
	ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаСклад"));
	флЗаправкаПластикКартаСклад = (Объект.ВидДвиженияГСМ = 
	ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад"));
	
	Элементы.ЗаправкиПластиковаяКарта.Видимость = флЗаправкаПластикКарта ИЛИ флЗаправкаПластикКартаСклад;
	Элементы.ПластиковаяКарта.Видимость = флЗаправкаПластикКарта ИЛИ флЗаправкаПластикКартаСклад;
	Элементы.ЗаправкиНомераТалонов.Видимость = флЗаправкаТалоны;
	Элементы.НомераТалонов.Видимость = флЗаправкаТалоны;
	
	Элементы.ГруппаДоговор.Видимость = (флЗаправкаНаличные ИЛИ флЗаправкаПластикКарта ИЛИ флЗаправкаПоставщик); 
	
	мВидимостьРеквизитовНДС = Объект.УчитыватьНДС И Элементы.ГруппаДоговор.Видимость;
	
	Элементы.СтраницыИтогов.Видимость = Элементы.ГруппаДоговор.Видимость;
	
	Элементы.ЗаправкиСтавкаНДС.Видимость = мВидимостьРеквизитовНДС;
	Элементы.ЗаправкиСуммаНДС.Видимость = мВидимостьРеквизитовНДС;
	Элементы.ЗаправкиВсего.Видимость = мВидимостьРеквизитовНДС;
	Элементы.СтавкаНДС.Видимость = мВидимостьРеквизитовНДС;
	Элементы.СуммаНДС.Видимость = мВидимостьРеквизитовНДС;
	
	Если флЗаправкаНаличные	ИЛИ флЗаправкаПоставщик ИЛИ флЗаправкаПластикКарта Тогда
		Элементы.ЗаправкиЦена.Видимость = Истина;
		Элементы.ЗаправкиСумма.Видимость = Истина;
		Элементы.ЗаправкиВалюта.Видимость = Истина;
		//Элементы.ЗаправкиВсего.Видимость = Истина;
		Элементы.ЗаправкиПлотность.Видимость = Ложь;
		Элементы.Цена.Видимость = Истина;
		Элементы.Валюта.Видимость = Истина;
		Элементы.Плотность.Видимость = Ложь;
		Элементы.Сумма.Видимость = Истина;
		//Элементы.Всего.Видимость = Истина;
		//Элементы.НадписьВсего.Видимость = Истина;
	Иначе	
		Элементы.ЗаправкиЦена.Видимость   = Ложь;
		Элементы.ЗаправкиСумма.Видимость  = Ложь;
		Элементы.ЗаправкиВалюта.Видимость = Ложь;
		//Элементы.ЗаправкиВсего.Видимость 	= Ложь;
		Элементы.Цена.Видимость = Ложь;
		Элементы.Сумма.Видимость = Ложь;
		Элементы.Валюта.Видимость = Ложь;
		//Элементы.Всего.Видимость = Ложь;
		//Элементы.НадписьВсего.Видимость = Ложь;
		
		Если флЗаправкаСклад ИЛИ флЗаправкаПластикКартаСклад Тогда
			Элементы.ЗаправкиПлотность.Видимость = Истина;
			Элементы.Плотность.Видимость = Истина;
		Иначе	
			Элементы.ЗаправкиПлотность.Видимость = Ложь;
			Элементы.Плотность.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Если флЗаправкаНаличные Тогда
		Элементы.Водитель.АвтоОтметкаНезаполненного = Истина;
		Элементы.ЗаправкиВодитель.АвтоОтметкаНезаполненного = Истина;
		//Элементы.Водитель.ОтметкаНезаполненного = НЕ ЗначениеЗаполнено(Объект.Заправки[0].Водитель);
		//Элементы.ЗаправкиВодитель.ОтметкаНезаполненного = НЕ ЗначениеЗаполнено(Объект.Заправки[0].Водитель);
	Иначе
		Элементы.Водитель.АвтоОтметкаНезаполненного = Ложь;
		Элементы.ЗаправкиВодитель.АвтоОтметкаНезаполненного = Ложь;
		//Элементы.Водитель.ОтметкаНезаполненного = Ложь;
		//Элементы.ЗаправкиВодитель.ОтметкаНезаполненного = Ложь;
	КонецЕсли;
	
	// автоотметка обязательных для заполнения
	Если Объект.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаНаличные") Тогда
		Элементы.Водитель.АвтоОтметкаНезаполненного = Истина;
		//Элементы.Водитель.ОтметкаНезаполненного = НЕ ЗначениеЗаполнено(Заправки[0].Водитель);
		Элементы.ЗаправкиВодитель.АвтоОтметкаНезаполненного = Истина;
	Иначе
		Элементы.Водитель.АвтоОтметкаНезаполненного = Ложь;
		//ЭлементыФормы.Водитель.ОтметкаНезаполненного = Ложь;
		Элементы.ЗаправкиВодитель.АвтоОтметкаНезаполненного = Ложь;
	КонецЕсли;
	УстановитьДоступность();
	ВывестиСуммовыеИтогиДокумента();
КонецПроцедуры   

&НаКлиенте
Процедура УстановитьОтборАЗС()
	Если Объект.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаСклад")
		ИЛИ Объект.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад")
		ИЛИ Объект.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаТалоны") Тогда
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ЭтоАЗССклад", Истина);
	Иначе
		НовыйПараметр = Новый ПараметрВыбора("Отбор.ЭтоАЗССклад", Ложь);
	КонецЕсли;
	МассивПарамВыбора = Новый Массив();
	МассивПарамВыбора.Добавить(НовыйПараметр);
	Элементы.АЗС.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПарамВыбора);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборДоговора()
	МассивПарамВыбора = Новый Массив();
	МассивПарамВыбора.Добавить(Новый ПараметрВыбора("Отбор.Владелец",
		уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.АЗС, "Контрагент_Склад")));
	МассивПарамВыбора.Добавить(Новый ПараметрВыбора("Отбор.ВидДоговора",
		ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком")));
	
	Элементы.ДоговорКонтрагента.ПараметрыВыбора = Новый ФиксированныйМассив(МассивПарамВыбора);
КонецПроцедуры

&НаСервере
Функция ЗаполнитьЗаправкиПоПЛ()
	
	ТаблицаЗаправок = Объект.Заправки.Выгрузить();
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	СписокЗаправок.Дата КАК Дата,
	|	СписокЗаправок.ТС КАК ТС
	|ПОМЕСТИТЬ СписокЗаправок
	|ИЗ
	|	&ТаблицаЗаправок КАК СписокЗаправок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	уатПутевойЛист.Водитель1 КАК Водитель,
	|	уатПутевойЛист.ВыдатьГорючее КАК ГСМ,
	|	уатПутевойЛист.Ссылка КАК ПутевойЛист,
	|	уатПутевойЛист.ТранспортноеСредство КАК ТС,
	|	СписокЗаправок.Дата КАК Дата,
	|	&СтавкаНДС КАК СтавкаНДС,
	|	&Валюта КАК Валюта
	|ИЗ
	|	СписокЗаправок КАК СписокЗаправок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатПутевойЛист КАК уатПутевойЛист
	|		ПО (СписокЗаправок.Дата МЕЖДУ уатПутевойЛист.ДатаВыезда И уатПутевойЛист.ДатаВозвращения)
	|			И (ВЫБОР
	|				КОГДА СписокЗаправок.ТС <> ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка)
	|					ТОГДА СписокЗаправок.ТС = уатПутевойЛист.ТранспортноеСредство
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|			И (НЕ уатПутевойЛист.ПометкаУдаления)
	|			И (НЕ уатПутевойЛист.Рассчитан)
	|			И (ВЫБОР
	|				КОГДА СписокЗаправок.ТС <> ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка)
	|					ТОГДА уатПутевойЛист.ТранспортноеСредство.Модель.НаличиеТопливногоБака = ИСТИНА
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|			И (уатПутевойЛист.Организация = &Организация)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатПутевойЛистПрицепы.Ссылка.Водитель1,
	|	уатПутевойЛистПрицепы.ТС.Модель.ОсновноеТопливо,
	|	уатПутевойЛистПрицепы.Ссылка,
	|	уатПутевойЛистПрицепы.ТС,
	|	СписокЗаправок.Дата,
	|	&СтавкаНДС,
	|	&Валюта
	|ИЗ
	|	СписокЗаправок КАК СписокЗаправок
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатПутевойЛист.Прицепы КАК уатПутевойЛистПрицепы
	|		ПО (СписокЗаправок.Дата МЕЖДУ уатПутевойЛистПрицепы.Ссылка.ДатаВыезда И уатПутевойЛистПрицепы.Ссылка.ДатаВозвращения)
	|			И (НЕ уатПутевойЛистПрицепы.Ссылка.ПометкаУдаления)
	|			И (НЕ уатПутевойЛистПрицепы.Ссылка.Рассчитан)
	|			И (ВЫБОР
	|				КОГДА СписокЗаправок.ТС <> ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка)
	|					ТОГДА уатПутевойЛистПрицепы.ТС.Модель.НаличиеТопливногоБака = ИСТИНА
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|			И (ВЫБОР
	|				КОГДА СписокЗаправок.ТС <> ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка)
	|					ТОГДА СписокЗаправок.ТС = уатПутевойЛистПрицепы.ТС
	|				ИНАЧЕ ИСТИНА
	|			КОНЕЦ)
	|			И (уатПутевойЛистПрицепы.Ссылка.Организация = &Организация)";
	
	СтруктураОбъектовНастроек = Новый Структура;
	СтруктураОбъектовНастроек.Вставить("Организация", Объект.Организация);
	СтруктураОбъектовНастроек.Вставить("Подразделение", Объект.ПодразделениеОрганизации);
	
	СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
			ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнаяСтавкаНДС");
	
	Запрос.УстановитьПараметр("ТаблицаЗаправок", ТаблицаЗаправок);
	Запрос.УстановитьПараметр("Валюта",    ?(ЗначениеЗаполнено(ВалютаВзаиморасчетов), ВалютаВзаиморасчетов, ВалютаРегламентированногоУчета));
	Запрос.УстановитьПараметр("СтавкаНДС", СтавкаНДС);
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	
	РезультатЗапроса = Запрос.Выполнить();
	Если НЕ РезультатЗапроса.Пустой() Тогда
		Объект.Заправки.Очистить();
		Выборка = РезультатЗапроса.Выбрать();
		Пока Выборка.Следующий() Цикл
			НСтрока = Объект.Заправки.Добавить();
			ЗаполнитьЗначенияСвойств(НСтрока,Выборка);
		КонецЦикла;
		
		Для Каждого ТекСтрока Из ТаблицаЗаправок Цикл
			СтруктураПоиска = Новый Структура("Дата", ТекСтрока.Дата);
			Если ЗначениеЗаполнено(ТекСтрока.ТС) Тогда
				СтруктураПоиска.Вставить("ТС", ТекСтрока.ТС);
				ПустыеПЛ = Объект.Заправки.НайтиСтроки(СтруктураПоиска);
				Если НЕ ПустыеПЛ.Количество() Тогда
					ТекстНСТР = НСтр("en='Fuelling ""%1"" from %2. Waybills not found!';ru='Заправка ""%1"" от %2. Путевые листы не найдены!'");
					ТекстНСТР = СтрШаблон(ТекстНСТР, ТекСтрока.ТС, ТекСтрока.Дата);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
				КонецЕсли;
			Иначе;
				ПустыеПЛ = Объект.Заправки.НайтиСтроки(СтруктураПоиска);
				Если НЕ ПустыеПЛ.Количество() Тогда
					ТекстНСТР = НСтр("en='Fuelling from %1. Waybills not found!';ru='Заправка от %1. Путевые листы не найдены!'");
					ТекстНСТР = СтрШаблон(ТекстНСТР, Выборка.Дата);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Возврат "";
	Иначе
		Возврат НСтр("en='Waybills not found!';ru='Путевые листы не найдены!'");
	КонецЕсли;
КонецФункции

// Проверим соответствие типа АЗС и вида заправки
//
&НаКлиенте
Функция КонтрольТипаАЗС(СтрокаСообщения)
	Результат = Истина;
	
	ЭтоАЗССклад = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.АЗС, "ЭтоАЗССклад");
	
	Если (НЕ ЭтоАЗССклад) И (Объект.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаСклад")
		ИЛИ Объект.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад")
		ИЛИ Объект.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаТалоны")) Тогда
		
		СтрокаСообщения = Нстр("en='You should select gas station - warehouse!';ru='Должна быть выбрана АЗС - склад!'");
		Результат = Ложь;
	КонецЕсли;
	
	Если ЭтоАЗССклад И (Объект.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПоставщик")
		ИЛИ Объект.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКарта")
		ИЛИ	Объект.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаНаличные")) Тогда
		
		СтрокаСообщения = Нстр("en='You should select gas station - counterparty!';ru='Должна быть выбрана АЗС - контрагент!'");
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ПриИзмененииДоговора()
	
	ВалютаВзаиморасчетов = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.ДоговорКонтрагента,
	"ВалютаВзаиморасчетов");
	
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Для Каждого ТекЗаправка Из Объект.Заправки Цикл
			Если ТекЗаправка.Валюта <> ВалютаВзаиморасчетов Тогда
				ТекЗаправка.Цена = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекЗаправка.Цена,
					ТекЗаправка.Валюта, ВалютаВзаиморасчетов,
					Объект.Дата, Объект.Дата);
					
				ТекЗаправка.Валюта = ВалютаВзаиморасчетов;
				РассчитатьСумму(ТекЗаправка);
				РассчитатьСуммуНДС(ТекЗаправка);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	РассчитатьСуммуДокумента();
	//УстановитьЗаголовкиПоДоговору();
	//УстановитьВидимость();
	//УстановитьАвтоотметку();
	
	// уатУправлениеАвтотранспортом.МодификацияКонфигурации
	уатМодификацияКонфигурацииКлиентПереопределяемый.ПолеФормыПриИзменении(ЭтотОбъект, Элементы.ДоговорКонтрагента);
	// Конец уатУправлениеАвтотранспортом.МодификацияКонфигурации
	
КонецПроцедуры // ПриИзмененииДоговора()

&НаСервере
Процедура РассчитатьСуммуНДСвТабЧасти()
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	Для Каждого ТекСтрока Из Объект.Заправки Цикл
		уатОбщегоНазначенияТиповыеСервер.уатРассчитатьСуммуНДСТабЧасти(ТекСтрока, ДокОбъект);
	КонецЦикла;	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКлючЗаписиГСМ(ТекГСМ)
	КлючЗаписиГСМ = РегистрыСведений.уатНоменклатураГСМ.СоздатьКлючЗаписи(Новый Структура("Номенклатура", ТекГСМ));
	Возврат КлючЗаписиГСМ;
КонецФункции

&НаКлиенте
Процедура РассчитатьСумму(СтрокаТабличнойЧасти)
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
	РассчитатьСуммуВсегоВстрокеТЧ(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуНДС(СтрокаТабличнойЧасти)
	СтрокаТабличнойЧасти.СуммаНДС = уатОбщегоНазначенияТиповые.уатРассчитатьСуммуНДС(СтрокаТабличнойЧасти.Сумма,
	Объект.УчитыватьНДС, Объект.СуммаВключаетНДС,
	уатОбщегоНазначенияТиповые.уатПолучитьСтавкуНДС(СтрокаТабличнойЧасти.СтавкаНДС));
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСуммы(СтрокаТабличнойЧасти)
	Если СтрокаТабличнойЧасти.Количество = 0 Тогда
		СтрокаТабличнойЧасти.Цена = 0;
	Иначе	
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуДокумента()
	НДСВсего = Объект.Заправки.Итог("СуммаНДС");
	Объект.СуммаДокумента = Объект.Заправки.Итог("Сумма");
	Если Объект.УчитыватьНДС И НЕ Объект.СуммаВключаетНДС Тогда
		Объект.СуммаДокумента = Объект.СуммаДокумента + НДСВсего;
	КонецЕсли;
	ВывестиСуммовыеИтогиДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВсегоВТЧЗаправки()
	Для Каждого СтрокаТабличнойЧасти Из Объект.Заправки Цикл
		РассчитатьСуммуВсегоВстрокеТЧ(СтрокаТабличнойЧасти);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуВсегоВстрокеТЧ(СтрокаТабличнойЧасти)
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма
		+ ?(Объект.УчитыватьНДС И НЕ Объект.СуммаВключаетНДС, СтрокаТабличнойЧасти.СуммаНДС, 0);
КонецПроцедуры

&НаСервере
Функция ПолучитьТСПоПутевомуЛисту(ПутевойЛист)
	Если ЗначениеЗаполнено(ПутевойЛист) Тогда
		Если НЕ уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД()
			И ТипЗнч(ПутевойЛист) = Тип("ДокументСсылка.уатТехнологическийПутевойЛист") Тогда
			Возврат ПутевойЛист.ТС;
		Иначе
			Возврат ПутевойЛист.ТранспортноеСредство;
		КонецЕсли;
	Иначе
		Возврат Справочники.уатТС.ПустаяСсылка();
	КонецЕсли;
КонецФункции

&НаСервере
Функция ПолучитьТСИПрицепыПоПутевомуЛисту(ПутевойЛист)
	мсвТС = Новый Массив;
	
	Если ЗначениеЗаполнено(ПутевойЛист) Тогда
		Если НЕ уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД()
			И ТипЗнч(ПутевойЛист) = Тип("ДокументСсылка.уатТехнологическийПутевойЛист") Тогда
			мсвТС.Добавить(ПутевойЛист.ТС);
		Иначе
			мсвТС.Добавить(ПутевойЛист.ТранспортноеСредство);
			Для Каждого ТекПрицеп Из ПутевойЛист.Прицепы Цикл
				Если ТекПрицеп.ТС.Модель.НаличиеТопливногоБака И мсвТС.Найти(ТекПрицеп.ТС) = Неопределено Тогда
					мсвТС.Добавить(ТекПрицеп.ТС);
				КонецЕсли;
			КонецЦикла;
			
			// для Проф/Корп добавляем прицепы/оборудование из задания
			Если НЕ уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД() Тогда
				Для Каждого ТекЗадание Из ПутевойЛист.Задание Цикл
					Если ТекЗадание.Прицеп1.Модель.НаличиеТопливногоБака И мсвТС.Найти(ТекЗадание.Прицеп1) = Неопределено Тогда
						мсвТС.Добавить(ТекЗадание.Прицеп1);
					КонецЕсли;
					Если ТекЗадание.Прицеп2.Модель.НаличиеТопливногоБака И мсвТС.Найти(ТекЗадание.Прицеп2) = Неопределено Тогда
						мсвТС.Добавить(ТекЗадание.Прицеп2);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
	Возврат мсвТС;
КонецФункции

&НаСервере
Функция ПолучитьПутевыеЛистыПоТС(ТС)
	ТаблицаПЛ = уатОбщегоНазначения.уатПутевыеЛисты(ТС, '00010101', '00010101',, Ложь);
	Рез = ТаблицаПЛ.ВыгрузитьКолонку("Ссылка");
	
	Возврат Рез;
КонецФункции

&НаКлиенте
Процедура ОбновитьСписокВыбораЭкипажа()
	ТекСтрока = Элементы.Заправки.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ЗаправкиВодитель.СписокВыбора.Очистить();
	Элементы.Водитель.СписокВыбора.Очистить();
	
	ЭкипажТССписок = уатЗащищенныеФункцииСервер.ЭкипажТССписок(ТекСтрока.ТС, ТекСтрока.Дата);
	ЭкипажТССписок_Количество = ЭкипажТССписок.Количество();
	
	Если ЭкипажТССписок_Количество = 0 Тогда	
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекСотр Из ЭкипажТССписок Цикл
		Элементы.ЗаправкиВодитель.СписокВыбора.Добавить(ТекСотр.Значение);
		Элементы.Водитель.СписокВыбора.Добавить(ТекСотр.Значение);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПЛ()
	
	ТекДанные = Элементы.Заправки.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	мсвПутевыхЛистов = ПолучитьПутевыеЛистыПоТС(ТекДанные.ТС);
	мсвПараметрыВыбора = Новый Массив;
	мсвПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", мсвПутевыхЛистов));
	Элементы.ПутевойЛист.ПараметрыВыбора = Новый ФиксированныйМассив(мсвПараметрыВыбора);
	Элементы.ЗаправкиПутевойЛист.ПараметрыВыбора = Новый ФиксированныйМассив(мсвПараметрыВыбора);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДоступность()
	Если Объект.Заправки.Количество() = 0 Тогда
		мТолькоПросмотр = Ложь;
	Иначе
		мПутевойЛист = Объект.Заправки[0].ПутевойЛист;
		мТолькоПросмотр = ЗначениеЗаполнено(мПутевойЛист)
			И мПутевойЛист.Проведен
			И мПутевойЛист.Рассчитан
			И (НЕ ПризнакРедактированияИзПутевогоЛиста);
	КонецЕсли;
	
	Элементы.ДатаЗаправки.ТолькоПросмотр              = мТолькоПросмотр;
	Элементы.ТС.ТолькоПросмотр                        = мТолькоПросмотр;
	Элементы.Водитель.ТолькоПросмотр                  = мТолькоПросмотр;
	Элементы.ГСМ.ТолькоПросмотр                       = мТолькоПросмотр;
	Элементы.Количество.ТолькоПросмотр                = мТолькоПросмотр;
	Элементы.Плотность.ТолькоПросмотр                 = мТолькоПросмотр;
	Элементы.ПутевойЛист.ТолькоПросмотр               = мТолькоПросмотр;
	Элементы.ПластиковаяКарта.ТолькоПросмотр          = мТолькоПросмотр;
	Элементы.НомераТалонов.ТолькоПросмотр             = мТолькоПросмотр;
	Элементы.Цена.ТолькоПросмотр                      = мТолькоПросмотр;
	Элементы.Сумма.ТолькоПросмотр                     = мТолькоПросмотр;
	Элементы.СтавкаНДС.ТолькоПросмотр                 = мТолькоПросмотр;
	Элементы.СуммаНДС.ТолькоПросмотр                  = мТолькоПросмотр;
	//Элементы.Валюта.ТолькоПросмотр                    = мТолькоПросмотр;
	НадписьЗапретИзменения                            = ?(мТолькоПросмотр, 
	Нстр("en='It is forbidden to change fueling for closed waybill!';ru='Запрещено изменение заправки для закрытого путевого листа!'"), "");
	Элементы.Дата.ТолькоПросмотр                      = мТолькоПросмотр;
	Элементы.Организация.ТолькоПросмотр               = мТолькоПросмотр;
	Элементы.ВидДвиженияГСМ.ТолькоПросмотр            = мТолькоПросмотр;
	Элементы.АЗС.ТолькоПросмотр                       = мТолькоПросмотр;
	Элементы.ДоговорКонтрагента.ТолькоПросмотр        = мТолькоПросмотр;
	Элементы.Колонна.ТолькоПросмотр                   = мТолькоПросмотр;
	Элементы.ПодразделениеОрганизации.ТолькоПросмотр  = мТолькоПросмотр;
	Элементы.Страна.ТолькоПросмотр                    = мТолькоПросмотр;
	Элементы.Ответственный.ТолькоПросмотр             = мТолькоПросмотр;
	Элементы.Комментарий.ТолькоПросмотр               = мТолькоПросмотр;
	
	Элементы.Заправки.ТолькоПросмотр                      = мТолькоПросмотр;
	Элементы.РедактироватьСписком.Доступность             = НЕ мТолькоПросмотр;
	Элементы.ЗаправкиЗаполнитьПоПутевомуЛисту.Доступность = НЕ мТолькоПросмотр;
	Элементы.РедактироватьЦеныИВалюту.Доступность         = НЕ мТолькоПросмотр;
КонецПроцедуры

&НаКлиенте
Процедура РедактирорватьНалоги(Команда)
	ОбработатьИзмененияПоКнопкеНалоги(Новый ОписаниеОповещения("РедактирорватьНалогиЗавершение", ЭтотОбъект));
КонецПроцедуры

&НаКлиенте
Процедура РедактирорватьНалогиЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    ОбновитьВсегоВТЧЗаправки();

КонецПроцедуры

// Процедура выполняет пересчет в табличной части документа после изменений 
// в форме "Налоги".Выполняется пересчет колонок: цена, сумма,
// сумма НДС, всего.
//
&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеНалоги(Знач Оповещение)
	
	// 1. Формируем структуру параметров для заполнения формы "Налоги".
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("Организация",			  Объект.Организация);
	СтруктураПараметров.Вставить("ДатаДокумента",		  Объект.Дата);
	СтруктураПараметров.Вставить("БылиВнесеныИзменения",  Ложь);
	СтруктураПараметров.Вставить("СуммаВключаетНДС",      Объект.СуммаВключаетНДС);
	СтруктураПараметров.Вставить("НалогообложениеНДС",	  Объект.УчитыватьНДС);
	
	
	ОткрытьФорму("Документ.уатЗаправкаГСМ.Форма.ФормаНалоги",СтруктураПараметров,,,,, Новый ОписаниеОповещения("ОбработатьИзмененияПоКнопкеНалогиЗавершение", ЭтотОбъект, Новый Структура("Оповещение", Оповещение)), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеНалогиЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Оповещение = ДополнительныеПараметры.Оповещение;
    
    
    // 2. Открываем форму "Налоги".
    СтруктураНалоги = Результат;
    
    // 3. Перезаполняем табличную часть "Номенклатура", если были внесены изменения в форме "Цены и Валюта".
    Если ТипЗнч(СтруктураНалоги) = Тип("Структура") И СтруктураНалоги.БылиВнесеныИзменения Тогда
        
        Объект.СуммаВключаетНДС		   = СтруктураНалоги.СуммаВключаетНДС;
        Объект.УчитыватьНДС			   = СтруктураНалоги.НалогообложениеНДС;
        
        // Пересчитываем сумму если изменился признак Налогообложение НДС.
        Если СтруктураНалоги.НалогообложениеНДС <> СтруктураНалоги.ПредНалогообложениеНДС Тогда
            УстановитьВидимость();
            РассчитатьСуммуНДСвТабЧасти();		
        КонецЕсли;
        
        // Пересчитываем сумму если изменился признак "Сумма включает НДС".
        Если СтруктураНалоги.СуммаВключаетНДС <> СтруктураНалоги.ПредСуммаВключаетНДС Тогда
            РассчитатьСуммуНДСвТабЧасти();
		КонецЕсли;
    КонецЕсли;
    
	РассчитатьСуммуДокумента();
	
	Если Не Оповещение = Неопределено Тогда 
		ВыполнитьОбработкуОповещения(Оповещение);
	КонецЕсли;

КонецПроцедуры // ОбработатьИзмененияПоКнопкеЦеныИВалюты()

// Процедура - обработчик команды РедактироватьСписком.
//
&НаКлиенте
Процедура ЗаполнитьПоПутевомуЛистуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    ЗаполнитьПоПутевомуЛистуФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоПутевомуЛистуФрагмент()
    
    Перем СтруктураЦенаВалюта, ТекСтрока;
	
	ТекстОшибки = ЗаполнитьЗаправкиПоПЛ();
	Если ТекстОшибки = "" Тогда
		Для Каждого ТекСтрока Из Объект.Заправки Цикл
			СтруктураЦенаВалюта = уатОбщегоНазначения.уатНайтиЦенуНоменклатуры(ТекСтрока.Дата, ТекСтрока.ГСМ, Объект.АЗС, Ложь);
			Если ЗначениеЗаполнено(СтруктураЦенаВалюта.Цена) Тогда
				мЦена = СтруктураЦенаВалюта.Цена;
				ТекСтрока.Цена = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(мЦена,
				СтруктураЦенаВалюта.Валюта,
				ТекСтрока.Валюта,
				Объект.Дата, Объект.Дата);
			КонецЕсли;
		КонецЦикла;
		Элементы.Заправки.ТекущаяСтрока = 1;
		Модифицированность = Истина;
	Иначе
		ПоказатьПредупреждение(Неопределено, ТекстОшибки, 5);
	КонецЕсли;


КонецПроцедуры

// Подключаемый динамически обработчик оповещения
&НаКлиенте
Процедура ОписаниеОповещенияВыбораЗаправкиГСМ(Результат, ДопПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		ТекСтрока = Элементы.Заправки.ТекущиеДанные;
		ТекСтрока.ГСМ = Результат;
		Если Объект.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаСклад")
			ИЛИ Объект.ВидДвиженияГСМ = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад") Тогда
			ТекСтрока.Плотность = уатОбщегоНазначения.уатПрочитатьРеквизитГСМ(Результат).Плотность;
		КонецЕсли;	
		ЗаправкиГСМПриИзменении(Неопределено);
	КонецЕсли;
	
	Если Элементы.Заправки.ТекущиеДанные.ГСМ <> ДопПараметры.ТопливоДоИзменения Тогда 
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПодразделениеОрганизацииПриИзменении(Элемент)
	СтруктураОбъектовНастроек = Новый Структура;
	СтруктураОбъектовНастроек.Вставить("Организация", Объект.Организация);
	СтруктураОбъектовНастроек.Вставить("Подразделение", Объект.ПодразделениеОрганизации);
	
	ОснВидЗаправки = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек,
		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ОсновнойВидЗаправки"));
	Если ЗначениеЗаполнено(ОснВидЗаправки) И Объект.ВидДвиженияГСМ <> ОснВидЗаправки Тогда
		Объект.ВидДвиженияГСМ = ОснВидЗаправки;
		ВидДвиженияГСМПриИзменении(Неопределено);
	КонецЕсли;
	ОснАЗС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек,
		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ОсновнаяАЗС"));
	Если ЗначениеЗаполнено(ОснАЗС) И Объект.АЗС <> ОснАЗС Тогда
		Объект.АЗС = ОснАЗС;
		АЗСПриИзменении(Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СпособРедактрованияПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    
    Если Ответ <> КодВозвратаДиалога.Да Тогда
        СпособРедактирования = 1;
        Возврат;
    КонецЕсли;
    
    Пока Объект.Заправки.Количество()>1 Цикл
        СтрокаУдаления = Объект.Заправки[1];
        Объект.Заправки.Удалить(СтрокаУдаления);
    КонецЦикла;
    
    Элементы.Заправки.ТекущаяСтрока = Объект.Заправки[0].ПолучитьИдентификатор();
	
	//СтрокаЗаправки = Элементы.Заправки.ТекущиеДанные;
	//СтрокаЗаправки.Сумма = Объект.СуммаДокумента;
	//РассчитатьСуммуНДС(СтрокаЗаправки);
        
    СпособРедактрованияПриИзмененииФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура СпособРедактрованияПриИзмененииФрагмент()
    
    УстановитьВидимость();
	ОбновитьСписокПластиковыхКарт();

КонецПроцедуры

&НаСервере
Процедура ВывестиСуммовыеИтогиДокумента()
	
	Если Объект.УчитыватьНДС Тогда 
		Если Объект.СуммаВключаетНДС Тогда 
			НадписьВсегоНДС = НСтр("en='VAT amount';ru='НДС в сумме'") + ":";
		Иначе 
			НадписьВсегоНДС = НСтр("en='VAT from above';ru='НДС сверху'") + ":";
		КонецЕсли;
		НадписьВсего = НСтр("en='Total including VAT';ru='Всего с НДС'");
		Элементы.СтраницыИтогов.ТекущаяСтраница = Элементы.ИтогоУчетНДС;
	Иначе 
		НадписьВсего = НСтр("en='Total';ru='Всего'");
		Элементы.СтраницыИтогов.ТекущаяСтраница = Элементы.ИтогоБезНДС;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокПластиковыхКарт()
	ВладельцыКарт = Новый СписокЗначений();
	ВладельцыКарт.Добавить(Элементы.Заправки.ТекущиеДанные.ТС);
	ВладельцыКарт.Добавить(Элементы.Заправки.ТекущиеДанные.Водитель);
	ТСВладелец = уатОбщегоНазначения.ПолучитьВладельцаТС(Элементы.Заправки.ТекущиеДанные.ТС);
	Если ТСВладелец <> Неопределено Тогда
		ВладельцыКарт.Добавить(ТСВладелец);
	КонецЕсли;
	ВладельцыКарт.Добавить(Элементы.Заправки.ТекущиеДанные.Водитель);
	ДатаЗаправки = Элементы.Заправки.ТекущиеДанные.Дата;
	СписокПлКарт = уатОбщегоНазначения.уатСписокТопливныхКарт(ВладельцыКарт, ДатаЗаправки, Объект.АЗС).ВыгрузитьЗначения();
	Элементы.ПластиковаяКарта.СписокВыбора.Очистить();
	Элементы.ЗаправкиПластиковаяКарта.СписокВыбора.Очистить();
	Если СпособРедактирования = 0 Тогда
		Элементы.ПластиковаяКарта.СписокВыбора.ЗагрузитьЗначения(СписокПлКарт);
	Иначе
		Элементы.ЗаправкиПластиковаяКарта.СписокВыбора.ЗагрузитьЗначения(СписокПлКарт);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьВодителяПоПЛ(ПутевойЛист)
	Если ЗначениеЗаполнено(ПутевойЛист) Тогда
		Если НЕ уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД()
			И ТипЗнч(ПутевойЛист) = Тип("ДокументСсылка.уатТехнологическийПутевойЛист") Тогда
			Возврат ПутевойЛист.Водитель;
		Иначе
			Возврат ПутевойЛист.Водитель1;
		КонецЕсли;
	Иначе
		Возврат Справочники.Сотрудники.ПустаяСсылка();
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура АвтоПодбор(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	Если Текст <> "" Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = Новый СписокЗначений;
		КоличествоНайденных = 0;
		Для каждого ЭлементСписка Из Элемент.СписокВыбора Цикл
			Если ЛЕВ(ВРег(ЭлементСписка.Значение),СтрДлина(СокрЛП(Текст))) = ВРег(СокрЛП(Текст)) Тогда
				ДанныеВыбора.Добавить(ЭлементСписка.Значение);
				КоличествоНайденных = КоличествоНайденных + 1;
				Если КоличествоНайденных > 7 Тогда
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция СтруктураОтборТС()
	СтруктураОтбор = Новый Структура("Организация", Объект.Организация);
	Если ЗначениеЗаполнено(Объект.ПодразделениеОрганизации) Тогда
		СтруктураОтбор.Вставить("Подразделение", Объект.ПодразделениеОрганизации);
	КонецЕсли;
	Если ЗначениеЗаполнено(Объект.Колонна) Тогда
		СтруктураОтбор.Вставить("Колонна", Объект.Колонна);
	КонецЕсли;
	
	Возврат СтруктураОтбор;
КонецФункции

&НаСервере
Процедура ПроверитьПревышениеУровняТопливаВБаке(Отказ, ВызовПередЗакрытиемФормы = Ложь, мсвСообщения = Неопределено)
	Если НЕ уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
		"ПредупреждатьПриПревышенииУровняТопливаВБаке") Тогда
		Возврат;
	КонецЕсли;
	
	Если мсвСообщения = Неопределено Тогда
		мсвСообщения = Новый Массив;
	КонецЕсли;
	
	// Проверим не превышает ли заправка уровень топлива в баке
	СообщениеПревышение = "";
	тблЗаправки = Объект.Заправки.Выгрузить();
	уатГСМ.ПроверитьПревышениеУровняТопливаВБаке(тблЗаправки, Объект.Организация, Объект.АЗС, СообщениеПревышение);
	
	Если НЕ ПустаяСтрока(СообщениеПревышение) Тогда
		мсвСообщения.Добавить(СообщениеПревышение);
		Если НЕ ВызовПередЗакрытиемФормы И НЕ ПризнакРедактированияИзПутевогоЛиста Тогда
			флВопросЗакрытиеФормы = Истина;
			уатОбщегоНазначенияТиповые.СообщитьОбОшибке(СообщениеПревышение);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

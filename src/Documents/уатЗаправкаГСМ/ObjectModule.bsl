
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

	
#Область ОписаниеПеременных

Перем ПризнакРедактированияИзПутевогоЛиста Экспорт; // Если документ вводится/редактируется из путевого листа
Перем ПризнакРедактированияИзПутевогоЛистаСсылка Экспорт; // Если документ вводится/редактируется из путевого листа, ссылка на путевой лист

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

// Проверим соответствие типа АЗС и вида заправки
// 
Функция КонтрольТипаАЗС(СтрокаСообщения) Экспорт
	Результат = Истина;
	
	Если НЕ ЗначениеЗаполнено(АЗС) Тогда
		Возврат Истина;
	КонецЕсли;
		
	Если (НЕ АЗС.ЭтоАЗССклад) И (ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаСклад
		ИЛИ ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад
		ИЛИ ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаТалоны) Тогда
		
		СтрокаСообщения = НСтр("en='You should select gas station - warehouse!';ru='Должна быть выбрана АЗС - склад!'");
		Результат = Ложь;
	КонецЕсли;
	
	Если АЗС.ЭтоАЗССклад И (ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаПоставщик
		ИЛИ ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКарта
		ИЛИ ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаНаличные) Тогда
		
		СтрокаСообщения = НСтр("en='You should select gas station - counterparty!';ru='Должна быть выбрана АЗС - контрагент!'");
		Результат = Ложь;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

// Процедура вызывается при изменении ГСМ
Процедура ЗаправкиПриИзмененииГСМ(ТекСтрока) Экспорт
	Если ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаНаличные
		ИЛИ ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаПоставщик
		ИЛИ ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКарта
		ИЛИ ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад Тогда
		
		СтруктураЦенаВалюта = уатОбщегоНазначения.уатНайтиЦенуНоменклатуры(Дата, ТекСтрока.ГСМ, АЗС, Ложь);
		Если ЗначениеЗаполнено(СтруктураЦенаВалюта.Цена) Тогда
			ТекСтрока.Цена = СтруктураЦенаВалюта.Цена;
			ТекСтрока.Сумма = ТекСтрока.Цена * ТекСтрока.Количество;
			уатОбщегоНазначенияТиповыеСервер.уатРассчитатьСуммуНДСТабЧасти(ТекСтрока, ЭтотОбъект);
			ТекСтрока.Валюта = СтруктураЦенаВалюта.Валюта;
		КонецЕсли;
	Иначе
		ТекСтрока.Цена = 0;
		ТекСтрока.Сумма = 0;
		ТекСтрока.СуммаНДС = 0;
		ТекСтрока.СтавкаНДС = Неопределено;
		ТекСтрока.Валюта = Неопределено;
	КонецЕсли;
КонецПроцедуры

// Процедура заполняет стоимость номенклатуры ГСМ
Процедура ЗаполнитьСтоимостьНоменклатурыГСМ() Экспорт
	Перем мСписаноКоличество;
	Перем мСписаноСтоимость;
	
	ОчиститьСтоимостьНоменклатурыГСМ();
	
	// Остатки партии по всей номенклатуре ГСМ
	ОстаткиПартийВсейНоменклатуры = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПартии.Скопировать();
	
	// Перебираем строки номенклатуры ГСМ, которую надо списать
	Для каждого текСтрока Из Заправки Цикл // цикл по заправкам
		ДанныеПоНоменклатуреГСМ = ПолучитьПараметрыНоменклатурыГСМ(текСтрока.ГСМ,текСтрока.НомерСтроки);
		Если ДанныеПоНоменклатуреГСМ = Неопределено Тогда
			ТекстНСТР = НСтр("en='Not found data on fuels ""%1""';ru='Не обнаружены данные по ГСМ ""%1""'");
			ТекстНСТР = СтрШаблон(ТекстНСТР, текСтрока.ГСМ);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
			Продолжить;
		КонецЕсли;
		
		мСписаноСтоимость = 0;
		мСписаноНДС       = 0;
		
		НадоСписатьКоличество = ДанныеПоНоменклатуреГСМ.Количество;
		
		// Получение остатков позиции номенклатуры по партиям
		РезультатЗапросаПартии = ОстаткиПартийВсейНоменклатуры.НайтиСтроки(Новый Структура("Номенклатура, Склад", текСтрока.ГСМ, АЗС.Контрагент_Склад));
		
		Для Каждого СтрокаПартии Из РезультатЗапросаПартии Цикл // цикл по партиям
			Если (НадоСписатьКоличество  <= 0) Тогда
				Прервать; // Все списали
			КонецЕсли;      
			
			мКоличество = Мин(НадоСписатьКоличество, СтрокаПартии.Количество);
			
			мСтоимость = ?(НадоСписатьКоличество > СтрокаПартии.Количество, СтрокаПартии.Стоимость,
				НадоСписатьКоличество*СтрокаПартии.Стоимость/СтрокаПартии.Количество);
			мНДС = ?(НадоСписатьКоличество > СтрокаПартии.Количество, СтрокаПартии.СуммаНДС,
				НадоСписатьКоличество*СтрокаПартии.СуммаНДС/СтрокаПартии.Количество);
			
			Если мКоличество > 0 Или мСтоимость > 0 Или мНДС > 0 Тогда
				СтрокаПартии.Количество = СтрокаПартии.Количество - мКоличество; //обновим количество партии
				СтрокаПартии.Стоимость  = СтрокаПартии.Стоимость - мСтоимость;   //обновим стоимость партии
				СтрокаПартии.СуммаНДС   = СтрокаПартии.СуммаНДС - мНДС;          //обновим сумму НДС
				
				текСтрока.Сумма    = текСтрока.Сумма + мСтоимость;
				текСтрока.СуммаНДС = текСтрока.СуммаНДС + мНДС;
			КонецЕсли;
			
			НадоСписатьКоличество = НадоСписатьКоличество - мКоличество;
		КонецЦикла;
	КонецЦикла;
	
	// Корректировка стоимости в строках ТЧ согласно стоимости списания.
	// Например, если списывается 1 партия ГСМ при этом приходуется несколько строк на ТС
	// Может возникнуть ситуация, когда сумма прихода на ТС будет отличаться от суммы списания
	// партий. Поэтому необходимо в последней строке ТЧ изменить сумму с учетом погрешности округления
	// на предыдущем шаге.
	ТабСписанияПартий = ДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаПартии.Скопировать();
	ТабСписанияПартий.Свернуть("Номенклатура", "Стоимость, СуммаНДС");
	
	ТабЗаправокДок = Заправки.Выгрузить(, "ГСМ, Сумма, СуммаНДС");
	ТабЗаправокДок.Свернуть("ГСМ", "Сумма, СуммаНДС");
	
	Для Каждого ТекСтрока Из ТабЗаправокДок Цикл 
		СтрокаСписания = ТабСписанияПартий.Найти(ТекСтрока.ГСМ, "Номенклатура");
		Если СтрокаСписания = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		Разница    = ТекСтрока.Сумма - СтрокаСписания.Стоимость;
		РазницаНДС = ТекСтрока.СуммаНДС - СтрокаСписания.СуммаНДС;
		Если Не Разница = 0 Или Не РазницаНДС = 0 Тогда 
			ИндексМакс = Заправки.Количество() - 1;
			Для Сч = 0 По ИндексМакс Цикл 
				СтрокаТЧ = Заправки[ИндексМакс-Сч];
				Если СтрокаТЧ.ГСМ = ТекСтрока.ГСМ Тогда 
					СтрокаТЧ.Сумма    = СтрокаТЧ.Сумма - Разница;
					СтрокаТЧ.СуммаНДС = СтрокаТЧ.СуммаНДС - РазницаНДС;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытий

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка) 
	
	уатОбщегоНазначенияСервер.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
	флОснованиеТехПЛ = (ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.уатТехнологическийПутевойЛист"));
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.уатПутевойЛист") ИЛИ флОснованиеТехПЛ Тогда
		СтандартнаяОбработка = Ложь;
		
		ТекТС = ?(флОснованиеТехПЛ, ДанныеЗаполнения.ТС, ДанныеЗаполнения.ТранспортноеСредство);
		ТекВодитель = ?(флОснованиеТехПЛ, ДанныеЗаполнения.Водитель, ДанныеЗаполнения.Водитель1);
			
		Если Ссылка.Пустая() Тогда 
			Организация   = ДанныеЗаполнения.Организация;
			Дата          = ДанныеЗаполнения.ДатаВыезда;
			
			уатОбщегоНазначенияТиповые.ЗаполнитьШапкуДокумента(ЭтотОбъект, ПользователиКлиентСервер.АвторизованныйПользователь());
			
			Если ЗначениеЗаполнено(ДанныеЗаполнения.Подразделение) Тогда
				ПодразделениеОрганизации = ДанныеЗаполнения.Подразделение;
			КонецЕсли;
			Если ЗначениеЗаполнено(ТекТС) Тогда
				МестонахождениеТС = уатОбщегоНазначения.МестонахождениеТС(ТекТС, Дата);
				Колонна = МестонахождениеТС.Колонна;
				Если НЕ ЗначениеЗаполнено(ПодразделениеОрганизации) Тогда
					ПодразделениеОрганизации = МестонахождениеТС.Подразделение;
				КонецЕсли;
			КонецЕсли;
			
			АЗСпоУмолчанию = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация,
						ПланыВидовХарактеристик.уатПраваИНастройки.ОсновнаяАЗС);
			
			ВидДвиженияГСМпоУмолчанию = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация,
							ПланыВидовХарактеристик.уатПраваИНастройки.ОсновнойВидЗаправки);
			
			Если Не ЗначениеЗаполнено(АЗС) Тогда
				Если (АЗСпоУмолчанию.ЭтоАЗССклад И (ВидДвиженияГСМпоУмолчанию = Перечисления.уатВидыДвиженияГСМ.ЗаправкаСклад
							Или ВидДвиженияГСМпоУмолчанию = Перечисления.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад
							Или ВидДвиженияГСМпоУмолчанию = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаТалоны")))
						Или (Не АЗСпоУмолчанию.ЭтоАЗССклад И(ВидДвиженияГСМпоУмолчанию = Перечисления.уатВидыДвиженияГСМ.ЗаправкаПоставщик
							Или ВидДвиженияГСМпоУмолчанию = Перечисления.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКарта
							Или ВидДвиженияГСМпоУмолчанию = Перечисления.уатВидыДвиженияГСМ.ЗаправкаНаличные)) Тогда 
					АЗС = АЗСпоУмолчанию;
				КонецЕсли;
				Если ТипЗнч(АЗС.Контрагент_Склад) = Тип("СправочникСсылка.Контрагенты") Тогда
					ДоговорКонтрагента = уатЗаполнениеДокументов.ПолучитьОсновнойДоговорКонтрагента(АЗС.Контрагент_Склад, "СПоставщиком", Организация);
				КонецЕсли;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ВидДвиженияГСМ) Тогда
				ВидДвиженияГСМ = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация,
									ПланыВидовХарактеристик.уатПраваИНастройки.ОсновнойВидЗаправки);
			КонецЕсли;
		КонецЕсли;
		
		// добавим основной ТС
		НоваяСтрока = Заправки.Добавить();
		НоваяСтрока.ПутевойЛист = ДанныеЗаполнения.Ссылка;
		НоваяСтрока.ТС          = ТекТС;
		НоваяСтрока.Дата        = ДанныеЗаполнения.ДатаВыезда;
		НоваяСтрока.Водитель    = ТекВодитель;
		Если ВидДвиженияГСМ <> Перечисления.уатВидыДвиженияГСМ.ЗаправкаТалоны Тогда
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.ГСМ) И ЗначениеЗаполнено(ТекТС) Тогда
				НоваяСтрока.ГСМ = ТекТС.Модель.ОсновноеТопливо;
				ЗаправкиПриИзмененииГСМ(НоваяСтрока);
			КонецЕсли;	
			Если НЕ ЗначениеЗаполнено(НоваяСтрока.ПластиковаяКарта) И
				(ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКарта
				ИЛИ ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад) Тогда
				
				НоваяСтрока.ПластиковаяКарта = уатОбщегоНазначения.уатПластиковаяКартаТСВодителя(НоваяСтрока.ТС,
					НоваяСтрока.Водитель,, НоваяСтрока.Дата, Истина);
			КонецЕсли;	
		КонецЕсли;	
		Если НЕ ЗначениеЗаполнено(НоваяСтрока.Валюта) Тогда
			НоваяСтрока.Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
		КонецЕсли;
		НоваяСтрока.СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнаяСтавкаНДС");
		уатОбщегоНазначенияТиповыеСервер.уатРассчитатьСуммуНДСТабЧасти(НоваяСтрока, ЭтотОбъект);
		
		Если НЕ ЗначениеЗаполнено(ДокументОснование) Тогда
			ДокументОснование = ДанныеЗаполнения.Ссылка;
		КонецЕсли;
				
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	флОтражатьВПартиях = (ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаСклад
		ИЛИ	ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад
		ИЛИ	ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаТалоны);
		
	// Инициализация дополнительных свойств для проведения документа.
    уатПроведение.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
    
    // Инициализация данных документа - только по партиям
	Документы.уатЗаправкаГСМ.ИнициализироватьДанныеДокументаПоПартиям(Ссылка, ДополнительныеСвойства);
	
	// Для заправок со склада заполняем стоимость номенклатуры по стоимости партии
	Если флОтражатьВПартиях
		И уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация,
		ПланыВидовХарактеристик.уатПраваИНастройки.ВестиСкладскойУчетУАТ) Тогда
		
		ЗаполнитьСтоимостьНоменклатурыГСМ();
		Записать();
	КонецЕсли;
	
	// Инициализация данных документа - остальные (все кроме партий)
    Документы.уатЗаправкаГСМ.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
    // Подготовка наборов записей.
    уатПроведение.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
    
    // Отражение в разделах учета.
	Если флОтражатьВПартиях И уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация,
				ПланыВидовХарактеристик.уатПраваИНастройки.ВестиСкладскойУчетУАТ) Тогда
		ПроведениеПоПартиям(ДополнительныеСвойства, Движения, Отказ);
	КонецЕсли;
	уатПроведение.ОтразитьОстаткиГСМНаТС(ДополнительныеСвойства, Движения, Отказ);
	уатПроведение.ОтразитьПартииТЖ(ДополнительныеСвойства, Движения, Отказ);
	уатПроведение.ОтразитьОборотыПоЗаправкамГСМ(ДополнительныеСвойства, Движения, Отказ);
	уатПроведение.ОтразитьРасходТЖ(ДополнительныеСвойства, Движения, Отказ);

    // Запись наборов записей.
    уатПроведение.ЗаписатьНаборыЗаписей(ЭтотОбъект);
    
    // Контроль возникновения отрицательного остатка.
	Если флОтражатьВПартиях И уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация,
				ПланыВидовХарактеристик.уатПраваИНастройки.ВестиСкладскойУчетУАТ) Тогда
		Документы.уатЗаправкаГСМ.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);
	КонецЕсли;
	
	Если Отказ И флОтражатьВПартиях Тогда
		ОчиститьСтоимостьНоменклатурыГСМ();
	КонецЕсли;
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаСообщения = "";

	Заголовок = уатОбщегоНазначенияТиповые.уатПредставлениеДокументаПриПроведении(ЭтотОбъект);
	
	Если (НЕ Отказ) И (НЕ КонтрольТипаАЗС(СтрокаСообщения)) Тогда
		уатОбщегоНазначенияТиповые.СообщитьОбОшибке(СтрокаСообщения, Отказ, Заголовок);
	КонецЕсли;
	
	Если (ПометкаУдаления ИЛИ РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения) И ЕстьПутевыеЛисты() Тогда
		Заголовок = уатОбщегоНазначенияТиповые.уатПредставлениеДокументаПриПроведении(ЭтотОбъект);
		ТекстНСТР = НСтр("en='It was not possible to record: there are calculated waybills containing this gas station!';ru='Не удалось записать: существуют рассчитанные путевые листы, содержащие данную заправку!'");
		уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, Отказ, Заголовок);
	КонецЕсли;
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	СуммаДокумента = уатОбщегоНазначенияТиповые.уатПолучитьСуммуДокументаСНДС(ЭтотОбъект);
	КоличествоДокумента = Заправки.Итог("Количество");
	
	МассивТС = Новый Массив();
	Для Каждого ТекСтрока Из Заправки Цикл 
		Если МассивТС.Найти(ТекСтрока.ТС) = Неопределено Тогда 
			МассивТС.Добавить(ТекСтрока.ТС);
		КонецЕсли;
	КонецЦикла;
	
	СписокТС = "";
	Для Каждого ТекТС Из МассивТС Цикл 
		СписокТС = СписокТС + ?(СписокТС = "", "", ", ") + ТекТС.Наименование;
	КонецЦикла;
	
	// Документ-основание переопределяется на другой ПЛ, если документа-основания нет в ТЧ Заправки
	// частный случай: документ-основание очищается, при удалении всех ПЛ
	Если ЗначениеЗаполнено(ДокументОснование)
		И Заправки.Найти(ДокументОснование, "ПутевойЛист") = Неопределено Тогда
		
		ПервыйПЛПоЗаправкам = Неопределено;
		Для Каждого ТекСтрока Из Заправки Цикл
			Если ЗначениеЗаполнено(ТекСтрока.ПутевойЛист) Тогда
				ПервыйПЛПоЗаправкам = ТекСтрока.ПутевойЛист;
				Прервать;
			КонецЕсли;
		КонецЦикла;

		ДокументОснование = ПервыйПЛПоЗаправкам;
	КонецЕсли;
	
КонецПроцедуры // ПередЗаписью

Процедура ПередУдалением(Отказ)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ЕстьПутевыеЛисты() Тогда
		Заголовок = уатОбщегоНазначенияТиповые.уатПредставлениеДокументаПриПроведении(ЭтотОбъект);
		ТекстНСТР = НСтр("en='Failed to delete: there are calculated waybills containing this fuelling!';ru='Не удалось удалить: существуют рассчитанные путевые листы, содержащие данную заправку!'");
		уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, Отказ, Заголовок);
	КонецЕсли;
КонецПроцедуры // ПередЗаписью

Процедура ПриКопировании(ОбъектКопирования)
	Для Каждого ТекСтрока Из Заправки Цикл
		Если ЗначениеЗаполнено(ТекСтрока.ПутевойЛист) И ТекСтрока.ПутевойЛист.Рассчитан Тогда
			ТекСтрока.ПутевойЛист = Неопределено;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Заголовок = уатОбщегоНазначенияТиповые.уатПредставлениеДокументаПриПроведении(ЭтотОбъект);
	
	Если ЭтотОбъект.ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаНаличные 
		Или ЭтотОбъект.ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаПоставщик Тогда 
		
		ПроверяемыеРеквизиты.Добавить("ДоговорКонтрагента");
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		Если ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаНаличные
			ИЛИ ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКарта
			ИЛИ ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад
			ИЛИ ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаПоставщик Тогда
			
			СтруктураПолей = Новый Структура();
			Если ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКарта
				ИЛИ ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад Тогда
				СтруктураПолей.Вставить("ПластиковаяКарта");
			КонецЕсли;
			//СтруктураПолей.Вставить("Цена");
			//СтруктураПолей.Вставить("Сумма");
			Если НЕ ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад Тогда
				Если УчитыватьНДС Тогда
					СтруктураПолей.Вставить("СтавкаНДС");
				КонецЕсли;
			КонецЕсли;
			
			Если ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаНаличные Тогда
				СтруктураПолей.Вставить("Водитель");
			КонецЕсли;
			
			уатОбщегоНазначенияТиповые.уатПроверитьЗаполнениеТабличнойЧасти(ЭтотОбъект, "Заправки", СтруктураПолей, Отказ,
				Заголовок);
		КонецЕсли;
	КонецЕсли;
	
	// проверка по наличию бака в ТС
	Если НЕ Отказ Тогда
		Для Каждого СтрокаТаблицы Из Заправки Цикл
			Если ЗначениеЗаполнено(СтрокаТаблицы.ТС) И (НЕ СтрокаТаблицы.ТС.Модель.НаличиеТопливногоБака) Тогда
				ТекстНСТР = НСтр("en='At line number %1 specified Vehicle/Equipment which has no fuel tank!';ru='В строке №%1 указано ТС/Оборудование у которого отсутствует топливный бак!'");
				ТекстНСТР = СтрШаблон(ТекстНСТР, СтрокаТаблицы.НомерСтроки);
				уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, Отказ, Заголовок);
			КонецЕсли;
			Если уатГСМ.ЭтоТехническаяЖидкость(СтрокаТаблицы.ГСМ) И Не ЗначениеЗаполнено(СтрокаТаблицы.Водитель) Тогда 
				ТекстНСТР = НСтр("en='At line №%1 is not specified driver!';ru='В строке №%1 не указан водитель!'");
				ТекстНСТР = СтрШаблон(ТекстНСТР, СтрокаТаблицы.НомерСтроки);
				уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, Отказ, Заголовок);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СтрокаСообщения = "";
	Если (НЕ Отказ) И (НЕ КонтрольТипаАЗС(СтрокаСообщения)) Тогда
		уатОбщегоНазначенияТиповые.СообщитьОбОшибке(СтрокаСообщения, Отказ, Заголовок);
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		Для Каждого ТекСтрока Из Заправки Цикл
			Если ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКарта
				ИЛИ ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад Тогда
				Если ТекСтрока.ПластиковаяКарта.ДатаОкончания <> Дата(1,1,1) Тогда
					Если ТекСтрока.ПластиковаяКарта.ДатаОкончания < НачалоДня(ТекСтрока.Дата) Тогда 
						ТекстНСТР = НСтр("en='In line №%1 fuel card is expired';ru='В строке №%1 топливная карта просрочена'");
						ТекстНСТР = СтрШаблон(ТекстНСТР, ТекСтрока.НомерСтроки);
						уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, Отказ, Заголовок);
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			Если ТекСтрока.Количество < 0 ИЛИ ТекСтрока.Сумма < 0 Тогда
				ТекстНСТР = НСтр("en='At line №%1 a negative value is specified of quantity or sum';ru='В строке №%1 указано отрицательное значение количества или суммы'");
				ТекстНСТР = СтрШаблон(ТекстНСТР, ТекСтрока.НомерСтроки);
				уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, Отказ, Заголовок);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Не Отказ Тогда
		уатОбщегоНазначения.ПроверкаЗаполненияПодразделения(Организация, ПодразделениеОрганизации, Отказ, Заголовок);
		уатОбщегоНазначенияСервер.ПроверкаСоответствияМестонахожденияТС(ЭтотОбъект, Отказ, "Заправки", Заголовок);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	// Инициализация дополнительных свойств для проведения документа
	уатПроведение.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	уатПроведение.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	уатПроведение.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	// Контроль
	Документы.уатЗаправкаГСМ.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ, Истина);
	
	// Очищаем цены ГСМ
	Если НЕ Отказ И (ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаСклад ИЛИ
		ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаТалоны) Тогда
		
		ОчиститьСтоимостьНоменклатурыГСМ();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// Функция проверяет, есть ли рассчитанные путевые листы, содержащие данную заправку
Функция ЕстьПутевыеЛисты()
	флЕстьРассчитанныйПутевойЛист = Ложь;
	Для Каждого ТекСтрока Из Заправки Цикл
		Если ЗначениеЗаполнено(ТекСтрока.ПутевойЛист)
			И ТекСтрока.ПутевойЛист.Проведен
			И ТекСтрока.ПутевойЛист.Рассчитан
			И ПризнакРедактированияИзПутевогоЛистаСсылка <> ТекСтрока.ПутевойЛист Тогда
			
			флЕстьРассчитанныйПутевойЛист = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат флЕстьРассчитанныйПутевойЛист;
КонецФункции

// Получает данные по регистру Номенклатура ГСМ
// Это плотность ГСМ, группа ГСМ (топливо, талон литровый/рублевый), ГСМ для талона
//
Функция ПолучитьПараметрыНоменклатурыГСМ(ГСМ,НомерСтроки)
	// получим результат запроса по товарной таблице
	Запрос = Новый Запрос();
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА уатНоменклатураГСМ.ГруппаГСМ = &ГруппаГСМТалоны
	|			ТОГДА уатНоменклатураГСМ.ГСМТалона
	|		ИНАЧЕ уатНоменклатураГСМ.Номенклатура
	|	КОНЕЦ КАК НоменклатураГСМ,
	|	ВЫБОР
	|		КОГДА уатЗаправкаГСМЗаправки.Плотность <> 0
	|			ТОГДА уатЗаправкаГСМЗаправки.Количество * уатЗаправкаГСМЗаправки.Плотность
	|		ИНАЧЕ уатЗаправкаГСМЗаправки.Количество
	|	КОНЕЦ КАК Количество,
	|	уатЗаправкаГСМЗаправки.ТС КАК ТС,
	|	уатЗаправкаГСМЗаправки.Водитель КАК Водитель
	|ИЗ
	|	Документ.уатЗаправкаГСМ.Заправки КАК уатЗаправкаГСМЗаправки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.уатНоменклатураГСМ КАК уатНоменклатураГСМ
	|		ПО уатЗаправкаГСМЗаправки.ГСМ = уатНоменклатураГСМ.Номенклатура
	|ГДЕ
	|	уатЗаправкаГСМЗаправки.Ссылка = &Ссылка
	|	И уатЗаправкаГСМЗаправки.ГСМ = &ГСМ
	|	И уатЗаправкаГСМЗаправки.НомерСтроки = &НомерСтроки";
	
	Запрос.Текст=ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.УстановитьПараметр("ГСМ", ГСМ);
	Запрос.УстановитьПараметр("ГруппаГСМТалоны", Перечисления.уатГруппыГСМ.Талон);
	Запрос.УстановитьПараметр("НомерСтроки",НомерСтроки);
	
	Рез = Запрос.Выполнить();
	Если Рез.Пустой() Тогда
		Возврат Неопределено;
	Иначе
		Возврат Рез.Выгрузить()[0];
	КонецЕсли;
	
КонецФункции

Процедура ОчиститьСтоимостьНоменклатурыГСМ()
	Для Каждого ТекСтрока Из Заправки Цикл
		ТекСтрока.Сумма = 0;
		ТекСтрока.СуммаНДС = 0;
	КонецЦикла;
КонецПроцедуры

// Процедура обеспечивает проведение по партиям. Поскольку заправки могут быть выполнены в различное время
// то для корректного получения партий необходимо перед списанием очередной списывать предыдущие. В связи с этим 
// движения делаются последовательно с группировкой по каждой дате. 
//
Процедура ПроведениеПоПартиям(СтруктураДополнительныеСвойства, Движения, Отказ) 
	
	ТаблицаГСМДата = Новый ТаблицаЗначений;
	ТаблицаГСМДата.Колонки.Добавить("Склад"       ,Новый ОписаниеТипов("СправочникСсылка.Склады"));
	ТаблицаГСМДата.Колонки.Добавить("Номенклатура",Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));
	ТаблицаГСМДата.Колонки.Добавить("Количество"  ,Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(15,3)));

	мЗапрос = Новый Запрос;
	мЗапрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаДокумента.Ссылка КАК Регистратор,
	|	ТаблицаДокумента.Дата КАК Период,
	|	ТаблицаДокумента.Ссылка.АЗС.Контрагент_Склад КАК Склад,
	|	ТаблицаДокумента.ГСМ КАК Номенклатура,
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаДокумента.Плотность = 0
	|				ТОГДА ТаблицаДокумента.Количество
	|			ИНАЧЕ ТаблицаДокумента.Количество * ТаблицаДокумента.Плотность
	|		КОНЕЦ) КАК Количество
	|ИЗ
	|	Документ.уатЗаправкаГСМ.Заправки КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.уатНоменклатураГСМ КАК уатНоменклатураГСМ
	|		ПО ТаблицаДокумента.ГСМ = уатНоменклатураГСМ.Номенклатура
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.ГСМ,
	|	ТаблицаДокумента.Дата,
	|	ТаблицаДокумента.Ссылка.АЗС.Контрагент_Склад,
	|	ТаблицаДокумента.Ссылка,
	|	уатНоменклатураГСМ.ГруппаГСМ,
	|	уатНоменклатураГСМ.ГСМТалона
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период
	|ИТОГИ ПО
	|	Период";
	
	мЗапрос.УстановитьПараметр("Ссылка", Ссылка);
	ВыборкаГСМ = мЗапрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаГСМ.Следующий() Цикл
		ВыборкаГруппировкаДата = ВыборкаГСМ.Выбрать();
		ТаблицаГСМДата.Очистить();
		Пока ВыборкаГруппировкаДата.Следующий() Цикл
			НовСтрока = ТаблицаГСМДата.Добавить();
			НовСтрока.Склад        = ВыборкаГруппировкаДата.склад;
			НовСтрока.Номенклатура = ВыборкаГруппировкаДата.Номенклатура;
			НовСтрока.Количество   = ВыборкаГруппировкаДата.Количество;
		КонецЦикла;
		мМоментВремениПартий = Новый Граница(ВыборкаГСМ.Период, ВидГраницы.Включая);
		ТаблицаПартий = уатПроведение.ПолучитьТаблицуПартийДляСписания(ТаблицаГСМДата,
							уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация,
								ПланыВидовХарактеристик.уатПраваИНастройки.СпособОценкиМПЗ), мМоментВремениПартий);
		
		ЗапросПартии = Новый Запрос();
		ЗапросПартии.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТабДанных.Склад КАК Склад,
		|	ТабДанных.Номенклатура КАК Номенклатура,
		|	ТабДанных.Партия КАК Партия,
		|	ТабДанных.Количество КАК Количество,
		|	ТабДанных.Стоимость КАК Стоимость,
		|	ТабДанных.СтоимостьУпр КАК СтоимостьУпр,
		|	ТабДанных.СуммаНДС КАК СуммаНДС
		|ПОМЕСТИТЬ ВремТаблицаПартий
		|ИЗ
		|	&ТаблицаПарам КАК ТабДанных
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
		|	&Период КАК Период,
		|	&Регистратор КАК Регистратор,
		|	ТабДанных.Склад КАК Склад,
		|	ТабДанных.Партия КАК Партия,
		|	ТабДанных.Номенклатура КАК Номенклатура,
		|	ТабДанных.Количество КАК Количество,
		|	ТабДанных.Стоимость КАК Стоимость,
		|	ТабДанных.СтоимостьУпр КАК СтоимостьУпр,
		|	ТабДанных.СуммаНДС КАК СуммаНДС
		|ИЗ
		|	ВремТаблицаПартий КАК ТабДанных";
		
		ЗапросПартии.УстановитьПараметр("Период"      , ВыборкаГСМ.Период);
		ЗапросПартии.УстановитьПараметр("ТаблицаПарам", ТаблицаПартий);
		ЗапросПартии.УстановитьПараметр("Регистратор" , Ссылка);
		
		МассивРезультатов = ЗапросПартии.ВыполнитьПакет();
		ТаблицаДвижений = МассивРезультатов[1].Выгрузить();
		
		Движения.уатПартииТоваровНаСкладах.Загрузить(ТаблицаДвижений);
		Движения.уатПартииТоваровНаСкладах.Записать(Ложь);
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти


#Область Инициализация

ПризнакРедактированияИзПутевогоЛиста = Ложь;
ПризнакРедактированияИзПутевогоЛистаСсылка = Документы.уатПутевойЛист.ПустаяСсылка();

#КонецОбласти


#КонецЕсли
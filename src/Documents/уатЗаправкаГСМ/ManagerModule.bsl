#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	Настройки.ПриПолученииСлужебныхРеквизитов = Ложь;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор  = "Реестр";
	КомандаПечати.Представление  = НСтр("en='Document register';ru='Реестр документов'");
	КомандаПечати.ЗаголовокФормы = НСтр("en='Register of documents ""Fueling""';ru='Реестр документов ""Заправка ГСМ""'");
	КомандаПечати.Обработчик     = "уатОбщегоНазначенияТиповыеКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм     = "ФормаСписка";
	КомандаПечати.Порядок        = 100;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр).
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной
//                                                            параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной
//                                            параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если НЕ уатОбщегоНазначенияСервер.РазрешениеПечатиНепроведенногоДокумента(МассивОбъектов) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	уатОбщегоНазначенияСервер.УстановитьРедактированиеПечатныхФормДокумента(КоллекцияПечатныхФорм);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.УправлениеДоступом

// Позволяет переопределить ограничение, указанное в модуле менеджера объекта метаданных.
//
// Параметры:
//  Ограничение - Структура:
//    * Текст                             - Строка - ограничение доступа для пользователей.
//                                          Если пустая строка, значит, доступ разрешен.
//    * ТекстДляВнешнихПользователей      - Строка - ограничение доступа для внешних пользователей.
//                                          Если пустая строка, значит, доступ запрещен.
//    * ПоВладельцуБезЗаписиКлючейДоступа - Неопределено - определить автоматически.
//                                        - Булево - если Ложь, то всегда записывать ключи доступа,
//                                          если Истина, тогда не записывать ключи доступа,
//                                          а использовать ключи доступа владельца (требуется,
//                                          чтобы ограничение было строго по объекту-владельцу).
//   * ПоВладельцуБезЗаписиКлючейДоступаДляВнешнихПользователей - Неопределено, Булево - также
//                                          как у параметра ПоВладельцуБезЗаписиКлючейДоступа.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(ПодразделениеОрганизации)";
	
	Ограничение.ТекстДляВнешнихПользователей = Ограничение.Текст;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// СтандартныеПодсистемы.ВариантыОтчетов

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВариантыОтчетов

#КонецОбласти

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	
	СформироватьТаблицаГСМ(ДокументСсылка, СтруктураДополнительныеСвойства);
	СформироватьТаблицаТЖ(ДокументСсылка, СтруктураДополнительныеСвойства);
	СформироватьТаблицаОборотыГСМ(ДокументСсылка, СтруктураДополнительныеСвойства);
	СформироватьТаблицаОборотыТЖ(ДокументСсылка, СтруктураДополнительныеСвойства);
	
КонецПроцедуры // ИнициализироватьДанныеДокумента()

// Выполняет контроль корректности движений документа.
//
Процедура ВыполнитьКонтроль(ДокументСсылка, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь) Экспорт
	
	Заголовок = уатОбщегоНазначенияТиповые.уатПредставлениеДокументаПриПроведении(ДокументСсылка);
	
	Если (ДокументСсылка.ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаСклад
		ИЛИ ДокументСсылка.ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаТалоны
		ИЛИ ДокументСсылка.ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад)
	   И уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументСсылка.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.ВестиСкладскойУчетУАТ)
	   И ДокументСсылка.Заправки.Количество() > 0 Тогда
		
		ТаблицаДат = Новый ТаблицаЗначений;
		ТаблицаДат.Колонки.Добавить("Дата");
		ТаблицаДат.Колонки.Добавить("ГСМ");
		Для каждого ТекСтрокаЗаправка ИЗ ДокументСсылка.Заправки Цикл
			НовСтрока = ТаблицаДат.Добавить();
			НовСтрока.Дата = ТекСтрокаЗаправка.Дата;
			НовСтрока.ГСМ = ТекСтрокаЗаправка.ГСМ;
		КонецЦикла;
		
		мЗапрос = Новый Запрос;
		
		СчетчикДат = 1;
		Для каждого ТекДата ИЗ ТаблицаДат Цикл
			Если СчетчикДат <> 1 тогда
				мЗапрос.Текст = мЗапрос.Текст + "
				|
				|ОБЪЕДИНИТЬ ВСЕ
				|";
			КонецЕсли;
			мЗапрос.Текст = мЗапрос.Текст + "
			|ВЫБРАТЬ
			|	&Дата" + СчетчикДат + " КАК Дата,
			|	уатПартииТоваровНаСкладах.Номенклатура КАК Номенклатура,
			|	ЕСТЬNULL(уатПартииТоваровНаСкладах.КоличествоОстаток, 0) КАК КоличествоОстаток
			|ИЗ
			|	РегистрНакопления.уатПартииТоваровНаСкладах.Остатки(&ДатаГр" + СчетчикДат + ", Склад = &Склад И Номенклатура = &Номенклатура" + СчетчикДат + ") КАК уатПартииТоваровНаСкладах
			|ГДЕ
			|	ЕСТЬNULL(уатПартииТоваровНаСкладах.КоличествоОстаток, 0) < 0";
			мЗапрос.УстановитьПараметр("ДатаГр" + СчетчикДат, Новый Граница(ТекДата.Дата, ВидГраницы.Включая));
			мЗапрос.УстановитьПараметр("Дата" + СчетчикДат, ТекДата.Дата);
			мЗапрос.УстановитьПараметр("Номенклатура" + СчетчикДат, ТекДата.ГСМ);
			СчетчикДат = СчетчикДат + 1;
		КонецЦикла;
		
		мЗапрос.УстановитьПараметр("Склад", ДокументСсылка.АЗС.Контрагент_Склад);
		Рез = мЗапрос.Выполнить().Выбрать();
		
		Пока Рез.Следующий() Цикл
			ТекстНСТР = НСтр("en='Negative balance of products and services ""%1"" at warehouse ""%2"" for date %3: %4';ru='Отрицательный остаток номенклатуры ""%1"" на складе ""%2"" на дату %3: %4'");
			ТекстНСТР = СтрШаблон(ТекстНСТР, Рез.Номенклатура, ДокументСсылка.АЗС.Контрагент_Склад, Рез.Дата, Рез.КоличествоОстаток);
			уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, Отказ, Заголовок);
			ЗаписьЖурналаРегистрации("Документ. Проведение",
				УровеньЖурналаРегистрации.Предупреждение,
				Метаданные.Документы.уатЗаправкаГСМ,
				ДокументСсылка,
				ТекстНСТР);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Получает дополнительные реквизиты для отображения в отчете "Реестр документов"
// 
// Возвращаемое значение:
//   Структура доп. реквизитов
//
Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура("Информация", "АЗС");
	Возврат Результат;
	
КонецФункции

// Инициализирует таблицы значений, содержащие данные табличных частей документа.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура ИнициализироватьДанныеДокументаПоПартиям(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	
	Если (ДокументСсылка.ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаСклад
		ИЛИ ДокументСсылка.ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаТалоны
		ИЛИ ДокументСсылка.ВидДвиженияГСМ = Перечисления.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад)
		И уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументСсылка.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.ВестиСкладскойУчетУАТ) Тогда
		
		СформироватьТаблицаПартий(ДокументСсылка, СтруктураДополнительныеСвойства);
	КонецЕсли;
	
КонецПроцедуры // ИнициализироватьДанныеДокумента()

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаПартий(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	мЗапрос = Новый Запрос;
	мЗапрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	мЗапрос.УстановитьПараметр("ГруппаГСМТалоны", Перечисления.уатГруппыГСМ.Талон);
	//мЗапрос.УстановитьПараметр("Склад", ДокументСсылка.Склад);
	//мЗапрос.УстановитьПараметр("МоментВремени", СтруктураДополнительныеСвойства.ДляПроведения.МоментКонтроля);
	
	мЗапрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаДокумента.Ссылка.АЗС.Контрагент_Склад КАК Склад,
	|	ТаблицаДокумента.ГСМ КАК Номенклатура,
	|	СУММА(ВЫБОР
	|			КОГДА ТаблицаДокумента.Плотность = 0
	|				ТОГДА ТаблицаДокумента.Количество
	|			ИНАЧЕ ТаблицаДокумента.Количество * ТаблицаДокумента.Плотность
	|		КОНЕЦ) КАК Количество
	|ИЗ
	|	Документ.уатЗаправкаГСМ.Заправки КАК ТаблицаДокумента
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.уатНоменклатураГСМ КАК уатНоменклатураГСМ
	|		ПО ТаблицаДокумента.ГСМ = уатНоменклатураГСМ.Номенклатура
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	ТаблицаДокумента.ГСМ,
	|	ТаблицаДокумента.Ссылка.АЗС.Контрагент_Склад";
	
	тблДокумента = мЗапрос.Выполнить().Выгрузить();
	
	// управляемая блокировка
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.уатПартииТоваровНаСкладах");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = тблДокумента;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Номенклатура", "Номенклатура");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Склад", "Склад");
	Блокировка.Заблокировать();
	
	ТаблицаПартий = уатПроведение.ПолучитьТаблицуПартийДляСписания(тблДокумента,
		уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументСсылка.Организация,
		ПланыВидовХарактеристик.уатПраваИНастройки.СпособОценкиМПЗ),СтруктураДополнительныеСвойства.ДляПроведения.МоментКонтроля);
	
	ЗапросПартии = Новый Запрос();
	ЗапросПартии.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТабДанных.Склад КАК Склад,
	|	ТабДанных.Номенклатура КАК Номенклатура,
	|	ТабДанных.Партия КАК Партия,
	|	ТабДанных.Количество КАК Количество,
	|	ТабДанных.Стоимость КАК Стоимость,
	|	ТабДанных.СтоимостьУпр КАК СтоимостьУпр,
	|	ТабДанных.СуммаНДС КАК СуммаНДС
	|ПОМЕСТИТЬ ВремТаблицаПартий
	|ИЗ
	|	&ТаблицаПарам КАК ТабДанных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период КАК Период,
	|	&Регистратор КАК Регистратор,
	|	ТабДанных.Склад КАК Склад,
	|	ТабДанных.Партия КАК Партия,
	|	ТабДанных.Номенклатура КАК Номенклатура,
	|	ТабДанных.Количество КАК Количество,
	|	ТабДанных.Стоимость КАК Стоимость,
	|	ТабДанных.СтоимостьУпр КАК СтоимостьУпр,
	|	ТабДанных.СуммаНДС КАК СуммаНДС
	|ИЗ
	|	ВремТаблицаПартий КАК ТабДанных";
	
	ЗапросПартии.УстановитьПараметр("Период"         , ДокументСсылка.Дата);
	ЗапросПартии.УстановитьПараметр("ТаблицаПарам"   , ТаблицаПартий);
	ЗапросПартии.УстановитьПараметр("Регистратор"    , ДокументСсылка);

	МассивРезультатов = ЗапросПартии.ВыполнитьПакет();
	ТаблицаДокумента = МассивРезультатов[1].Выгрузить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПартии", ТаблицаДокумента);
	
КонецПроцедуры // СформироватьТаблицаПартий()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаГСМ(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	// получим результат запроса по товарной таблице
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатЗаправкаГСМЗаправки.ТС,
	|	уатЗаправкаГСМЗаправки.Ссылка.Организация КАК Организация,
	|	уатЗаправкаГСМЗаправки.Ссылка.ПодразделениеОрганизации КАК Подразделение,
	|	уатЗаправкаГСМЗаправки.Ссылка.Колонна КАК Колонна,
	|	ВЫБОР
	|		КОГДА уатНоменклатураГСМ.ГруппаГСМ = &ГруппаГСМТалоны
	|			ТОГДА уатНоменклатураГСМ.ГСМТалона
	|		ИНАЧЕ уатНоменклатураГСМ.Номенклатура
	|	КОНЕЦ КАК ГСМ,
	|	уатНоменклатураГСМ.ГруппаГСМ,
	|	уатЗаправкаГСМЗаправки.Количество,
	|	ВЫБОР
	|		КОГДА уатЗаправкаГСМЗаправки.Ссылка.ВидДвиженияГСМ = ЗНАЧЕНИЕ(Перечисление.уатВидыДвиженияГСМ.ЗаправкаСклад)
	|				ИЛИ уатЗаправкаГСМЗаправки.Ссылка.ВидДвиженияГСМ = ЗНАЧЕНИЕ(Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад)
	|				ИЛИ уатЗаправкаГСМЗаправки.Ссылка.ВидДвиженияГСМ = ЗНАЧЕНИЕ(Перечисление.уатВидыДвиженияГСМ.ЗаправкаТалоны)
	|			ТОГДА уатЗаправкаГСМЗаправки.Сумма
	|		КОГДА уатЗаправкаГСМЗаправки.Ссылка.СуммаВключаетНДС
	|			ТОГДА уатЗаправкаГСМЗаправки.Сумма - уатЗаправкаГСМЗаправки.СуммаНДС
	|		ИНАЧЕ уатЗаправкаГСМЗаправки.Сумма
	|	КОНЕЦ КАК Сумма,
	|	уатЗаправкаГСМЗаправки.СуммаНДС КАК СуммаНДС,
	|	уатЗаправкаГСМЗаправки.Валюта,
	|	ВЫБОР
	|		КОГДА уатЗаправкаГСМЗаправки.ПутевойЛист <> ЗНАЧЕНИЕ(Документ.уатПутевойЛист.ПустаяСсылка)
	|				И уатЗаправкаГСМЗаправки.Дата < уатЗаправкаГСМЗаправки.ПутевойЛист.ДатаВыезда
	|			ТОГДА уатЗаправкаГСМЗаправки.ПутевойЛист.ДатаВыезда
	|		ИНАЧЕ ВЫБОР
	|				КОГДА уатЗаправкаГСМЗаправки.ПутевойЛист <> ЗНАЧЕНИЕ(Документ.уатПутевойЛист.ПустаяСсылка)
	|						И уатЗаправкаГСМЗаправки.ПутевойЛист.ДатаВозвращения <> ДАТАВРЕМЯ(1, 1, 1)
	|						И уатЗаправкаГСМЗаправки.Дата > уатЗаправкаГСМЗаправки.ПутевойЛист.ДатаВозвращения
	|					ТОГДА уатЗаправкаГСМЗаправки.ПутевойЛист.ДатаВозвращения
	|				ИНАЧЕ уатЗаправкаГСМЗаправки.Дата
	|			КОНЕЦ
	|	КОНЕЦ КАК Дата,
	|	уатЗаправкаГСМЗаправки.ПутевойЛист,
	|	уатЗаправкаГСМЗаправки.ПластиковаяКарта,
	|	уатЗаправкаГСМЗаправки.Ссылка.АЗС КАК АЗС,
	|	уатЗаправкаГСМЗаправки.Ссылка.ВидДвиженияГСМ,
	|	уатЗаправкаГСМЗаправки.ГСМ КАК ГСМ1
	|ИЗ
	|	Документ.уатЗаправкаГСМ.Заправки КАК уатЗаправкаГСМЗаправки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.уатНоменклатураГСМ КАК уатНоменклатураГСМ
	|		ПО уатЗаправкаГСМЗаправки.ГСМ = уатНоменклатураГСМ.Номенклатура
	|			И (уатНоменклатураГСМ.ГруппаГСМ <> &ГруппаГСМТЖ)
	|ГДЕ
	|	уатЗаправкаГСМЗаправки.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ГруппаГСМТалоны", Перечисления.уатГруппыГСМ.Талон);
	Запрос.УстановитьПараметр("ГруппаГСМТЖ", Перечисления.уатГруппыГСМ.ПрисадкиИТехническиеЖидкости);
	
	тблГСМ = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ТекСтрока Из тблГСМ Цикл
		Если ТекСтрока.ГруппаГСМ = Перечисления.уатГруппыГСМ.Талон Тогда
			ТекСтрока.Количество = уатОбщегоНазначения.уатКоличествоЛитровТалонаГСМ(ТекСтрока.Дата, ТекСтрока.АЗС, ТекСтрока.ГСМ1, ТекСтрока.Количество);
		КонецЕсли;	
	КонецЦикла;
	
	// округляем до точности хранения остатков ГСМ в ТС
	мТочностьОстатковГСМ = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументСсылка.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.ТочностьОстатковТоплива);
	Для Каждого ТекСтрока Из тблГСМ Цикл
		ТекСтрока.Количество = Окр(ТекСтрока.Количество, мТочностьОстатковГСМ);
	КонецЦикла;
	
	тблГСМ.Колонки.Добавить("ВидДвижения");
	тблГСМ.Колонки.Добавить("Партия");
	тблГСМ.Колонки.Добавить("Регистратор");
	тблГСМ.Колонки.Добавить("Стоимость");
	тблГСМ.Колонки.Добавить("СтоимостьУпр");
	тблГСМ.Колонки.Дата.Имя = "Период";
		
	мВалютаРегл = Константы.ВалютаРегламентированногоУчета.Получить();
	Если уатОбщегоНазначенияТиповые.уатЕстьКонстанта("ВалютаУправленческогоУчета") Тогда 
		мВалютаУпр = Константы.ВалютаУправленческогоУчета.Получить();
	Иначе
		мВалютаУпр = мВалютаРегл;
	КонецЕсли;
	мКурсВалютыРеглСтруктура = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(мВалютаРегл, ДокументСсылка.Дата);
	мКурсВалютыРегл = ?(мКурсВалютыРеглСтруктура.Кратность = 0, 0, мКурсВалютыРеглСтруктура.Курс / мКурсВалютыРеглСтруктура.Кратность);
	мКурсВалютыУпрСтруктура = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(мВалютаУпр, ДокументСсылка.Дата);
	мКурсВалютыУпр = ?(мКурсВалютыУпрСтруктура.Кратность = 0, 0, мКурсВалютыУпрСтруктура.Курс / мКурсВалютыУпрСтруктура.Кратность);
	
	Если уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументСсылка.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.СпособОценкиМПЗ) <> Перечисления.СпособыОценки.ПоСредней Тогда
		ТекПартия = ДокументСсылка;
	Иначе
		ТекПартия = Неопределено;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из тблГСМ Цикл
		ТекСтрока.Регистратор = ДокументСсылка;
		ТекСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
		ТекСтрока.Партия = ТекПартия;
		
		ТекСтрока.Стоимость = 0;
		ТекСтрока.СтоимостьУпр = 0;
		Если ТекСтрока.Сумма > 0 Тогда
			мКурсТекВалютыСтруктура = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ТекСтрока.Валюта, ДокументСсылка.Дата);
			мКурсТекВалюты = ?(мКурсТекВалютыСтруктура.Кратность = 0, 0, мКурсТекВалютыСтруктура.Курс / мКурсТекВалютыСтруктура.Кратность);
			
			ТекСтрока.СтоимостьУпр = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.Сумма,
				ТекСтрока.Валюта, мВалютаУпр, мКурсТекВалюты, мКурсВалютыУпр);
			ТекСтрока.Стоимость = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.Сумма,
				ТекСтрока.Валюта, мВалютаРегл, мКурсТекВалюты, мКурсВалютыРегл);
			ТекСтрока.СуммаНДС = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаНДС,
				ТекСтрока.Валюта, мВалютаРегл, мКурсТекВалюты, мКурсВалютыРегл);
		КонецЕсли;
	КонецЦикла;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаГСМ", тблГСМ);
	
КонецПроцедуры // СформироватьТаблицаГСМ()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаТЖ(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	// получим результат запроса по товарной таблице
	Запрос = Новый Запрос();
	ТекстЗапроса=
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатЗаправкаГСМЗаправки.ТС,
	|	уатЗаправкаГСМЗаправки.Ссылка.Организация КАК Организация,
	|	уатЗаправкаГСМЗаправки.Ссылка.ПодразделениеОрганизации КАК Подразделение,
	|	уатЗаправкаГСМЗаправки.Ссылка.Колонна КАК Колонна,
	|	уатНоменклатураГСМ.Номенклатура КАК ТЖ,
	|	уатЗаправкаГСМЗаправки.Количество,
	|	ВЫБОР
	|		КОГДА уатЗаправкаГСМЗаправки.Ссылка.ВидДвиженияГСМ = ЗНАЧЕНИЕ(Перечисление.уатВидыДвиженияГСМ.ЗаправкаСклад)
	|				ИЛИ уатЗаправкаГСМЗаправки.Ссылка.ВидДвиженияГСМ = ЗНАЧЕНИЕ(Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад)
	|				ИЛИ уатЗаправкаГСМЗаправки.Ссылка.ВидДвиженияГСМ = ЗНАЧЕНИЕ(Перечисление.уатВидыДвиженияГСМ.ЗаправкаТалоны)
	|			ТОГДА уатЗаправкаГСМЗаправки.Сумма
	|		КОГДА уатЗаправкаГСМЗаправки.Ссылка.СуммаВключаетНДС
	|			ТОГДА уатЗаправкаГСМЗаправки.Сумма - уатЗаправкаГСМЗаправки.СуммаНДС
	|		ИНАЧЕ уатЗаправкаГСМЗаправки.Сумма
	|	КОНЕЦ КАК Сумма,
	|	уатЗаправкаГСМЗаправки.СуммаНДС КАК СуммаНДС,
	|	уатЗаправкаГСМЗаправки.Валюта,
	|	ВЫБОР
	|		КОГДА уатЗаправкаГСМЗаправки.ПутевойЛист <> ЗНАЧЕНИЕ(Документ.уатПутевойЛист.ПустаяСсылка)
	|				И уатЗаправкаГСМЗаправки.Дата < уатЗаправкаГСМЗаправки.ПутевойЛист.ДатаВыезда
	|			ТОГДА уатЗаправкаГСМЗаправки.ПутевойЛист.ДатаВыезда
	|		ИНАЧЕ ВЫБОР
	|				КОГДА уатЗаправкаГСМЗаправки.ПутевойЛист <> ЗНАЧЕНИЕ(Документ.уатПутевойЛист.ПустаяСсылка)
	|						И уатЗаправкаГСМЗаправки.ПутевойЛист.ДатаВозвращения <> ДАТАВРЕМЯ(1, 1, 1)
	|						И уатЗаправкаГСМЗаправки.Дата > уатЗаправкаГСМЗаправки.ПутевойЛист.ДатаВозвращения
	|					ТОГДА уатЗаправкаГСМЗаправки.ПутевойЛист.ДатаВозвращения
	|				ИНАЧЕ уатЗаправкаГСМЗаправки.Дата
	|			КОНЕЦ
	|	КОНЕЦ КАК Дата
	|ИЗ
	|	Документ.уатЗаправкаГСМ.Заправки КАК уатЗаправкаГСМЗаправки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.уатНоменклатураГСМ КАК уатНоменклатураГСМ
	|		ПО уатЗаправкаГСМЗаправки.ГСМ = уатНоменклатураГСМ.Номенклатура
	|			И (уатНоменклатураГСМ.ВестиУчетОстатковТЖ)
	|ГДЕ
	|	уатЗаправкаГСМЗаправки.Ссылка = &Ссылка";
	Запрос.Текст=ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("ГруппаГСМТЖ", Перечисления.уатГруппыГСМ.ПрисадкиИТехническиеЖидкости);
	
	тблТЖ = Запрос.Выполнить().Выгрузить();
	
	тблТЖ.Колонки.Добавить("ВидДвижения");
	тблТЖ.Колонки.Добавить("Партия");
	тблТЖ.Колонки.Добавить("Регистратор");
	тблТЖ.Колонки.Добавить("Стоимость");
	тблТЖ.Колонки.Добавить("СтоимостьУпр");
	тблТЖ.Колонки.Дата.Имя = "Период";
	
	мВалютаРегл = Константы.ВалютаРегламентированногоУчета.Получить();
	Если уатОбщегоНазначенияТиповые.уатЕстьКонстанта("ВалютаУправленческогоУчета") Тогда 
		мВалютаУпр = Константы.ВалютаУправленческогоУчета.Получить();
	Иначе
		мВалютаУпр = мВалютаРегл;
	КонецЕсли;
	мКурсВалютыРеглСтруктура = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(мВалютаРегл, ДокументСсылка.Дата);
	мКурсВалютыРегл = ?(мКурсВалютыРеглСтруктура.Кратность = 0, 0, мКурсВалютыРеглСтруктура.Курс / мКурсВалютыРеглСтруктура.Кратность);
	мКурсВалютыУпрСтруктура = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(мВалютаУпр, ДокументСсылка.Дата);
	мКурсВалютыУпр = ?(мКурсВалютыУпрСтруктура.Кратность = 0, 0, мКурсВалютыУпрСтруктура.Курс / мКурсВалютыУпрСтруктура.Кратность);
	
	Если уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументСсылка.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.СпособОценкиМПЗ) <> Перечисления.СпособыОценки.ПоСредней Тогда
		ТекПартия = ДокументСсылка;
	Иначе
		ТекПартия = Неопределено;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из тблТЖ Цикл
		ТекСтрока.Регистратор = ДокументСсылка;
		ТекСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
		ТекСтрока.Партия = ТекПартия;
		
		ТекСтрока.Стоимость = 0;
		ТекСтрока.СтоимостьУпр = 0;
		Если ТекСтрока.Сумма > 0 Тогда
			мКурсТекВалютыСтруктура = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ТекСтрока.Валюта, ДокументСсылка.Дата);
			мКурсТекВалюты = ?(мКурсТекВалютыСтруктура.Кратность = 0, 0, мКурсТекВалютыСтруктура.Курс / мКурсТекВалютыСтруктура.Кратность);
			
			ТекСтрока.СтоимостьУпр = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.Сумма,
				ТекСтрока.Валюта, мВалютаУпр, мКурсТекВалюты, мКурсВалютыУпр);
			ТекСтрока.Стоимость = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.Сумма,
				ТекСтрока.Валюта, мВалютаРегл, мКурсТекВалюты, мКурсВалютыРегл);
			ТекСтрока.СуммаНДС = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаНДС,
				ТекСтрока.Валюта, мВалютаРегл, мКурсТекВалюты, мКурсВалютыРегл);
		КонецЕсли;
	КонецЦикла;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПартииТЖ", тблТЖ);
	
КонецПроцедуры // СформироватьТаблицаТЖ()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаОборотыГСМ(ДокументСсылка, СтруктураДополнительныеСвойства)
	// получим результат запроса по таблице ГСМ
	Запрос = Новый Запрос();
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатЗаправкаГСМЗаправки.Ссылка КАК Регистратор,
	|	ВЫБОР
	|		КОГДА уатЗаправкаГСМЗаправки.ПутевойЛист <> ЗНАЧЕНИЕ(Документ.уатПутевойЛист.ПустаяСсылка)
	|				И уатЗаправкаГСМЗаправки.Дата < уатЗаправкаГСМЗаправки.ПутевойЛист.ДатаВыезда
	|			ТОГДА уатЗаправкаГСМЗаправки.ПутевойЛист.ДатаВыезда
	|		ИНАЧЕ ВЫБОР
	|				КОГДА уатЗаправкаГСМЗаправки.ПутевойЛист <> ЗНАЧЕНИЕ(Документ.уатПутевойЛист.ПустаяСсылка)
	|						И уатЗаправкаГСМЗаправки.ПутевойЛист.ДатаВозвращения <> ДАТАВРЕМЯ(1, 1, 1)
	|						И уатЗаправкаГСМЗаправки.Дата > уатЗаправкаГСМЗаправки.ПутевойЛист.ДатаВозвращения
	|					ТОГДА уатЗаправкаГСМЗаправки.ПутевойЛист.ДатаВозвращения
	|				ИНАЧЕ уатЗаправкаГСМЗаправки.Дата
	|			КОНЕЦ
	|	КОНЕЦ КАК Период,
	|	уатЗаправкаГСМЗаправки.Ссылка.Колонна КАК Колонна,
	|	уатЗаправкаГСМЗаправки.ТС КАК ТС,
	|	ВЫБОР
	|		КОГДА уатНоменклатураГСМ.ГруппаГСМ = ЗНАЧЕНИЕ(Перечисление.уатГруппыГСМ.Талон)
	|			ТОГДА уатЗаправкаГСМЗаправки.ГСМ
	|		ИНАЧЕ NULL
	|	КОНЕЦ КАК НоменклатураТалонов,
	|	ВЫБОР
	|		КОГДА уатНоменклатураГСМ.ГруппаГСМ = ЗНАЧЕНИЕ(Перечисление.уатГруппыГСМ.Талон)
	|			ТОГДА уатНоменклатураГСМ.ГСМТалона
	|		ИНАЧЕ уатЗаправкаГСМЗаправки.ГСМ
	|	КОНЕЦ КАК ГСМ,
	|	уатНоменклатураГСМ.ГруппаГСМ КАК ГруппаГСМ,
	|	уатЗаправкаГСМЗаправки.Ссылка.АЗС КАК АЗС,
	|	уатЗаправкаГСМЗаправки.Ссылка.ВидДвиженияГСМ КАК ВидЗаправки,
	|	уатЗаправкаГСМЗаправки.Водитель КАК Водитель,
	|	уатЗаправкаГСМЗаправки.ПластиковаяКарта КАК ПластиковаяКарта,
	|	ВЫБОР
	|		КОГДА уатЗаправкаГСМЗаправки.Ссылка.ВидДвиженияГСМ = ЗНАЧЕНИЕ(Перечисление.уатВидыДвиженияГСМ.ЗаправкаСклад)
	|				ИЛИ уатЗаправкаГСМЗаправки.Ссылка.ВидДвиженияГСМ = ЗНАЧЕНИЕ(Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад)
	|				ИЛИ уатЗаправкаГСМЗаправки.Ссылка.ВидДвиженияГСМ = ЗНАЧЕНИЕ(Перечисление.уатВидыДвиженияГСМ.ЗаправкаТалоны)
	|			ТОГДА уатЗаправкаГСМЗаправки.Сумма + уатЗаправкаГСМЗаправки.СуммаНДС
	|		КОГДА уатЗаправкаГСМЗаправки.Ссылка.УчитыватьНДС И НЕ уатЗаправкаГСМЗаправки.Ссылка.СуммаВключаетНДС
	|			ТОГДА уатЗаправкаГСМЗаправки.Сумма + уатЗаправкаГСМЗаправки.СуммаНДС
	|		ИНАЧЕ уатЗаправкаГСМЗаправки.Сумма
	|	КОНЕЦ КАК Стоимость,
	|	ВЫБОР
	|		КОГДА уатЗаправкаГСМЗаправки.Ссылка.ВидДвиженияГСМ = ЗНАЧЕНИЕ(Перечисление.уатВидыДвиженияГСМ.ЗаправкаСклад)
	|				ИЛИ уатЗаправкаГСМЗаправки.Ссылка.ВидДвиженияГСМ = ЗНАЧЕНИЕ(Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад)
	|				ИЛИ уатЗаправкаГСМЗаправки.Ссылка.ВидДвиженияГСМ = ЗНАЧЕНИЕ(Перечисление.уатВидыДвиженияГСМ.ЗаправкаТалоны)
	|			ТОГДА уатЗаправкаГСМЗаправки.Сумма + уатЗаправкаГСМЗаправки.СуммаНДС
	|		КОГДА уатЗаправкаГСМЗаправки.Ссылка.УчитыватьНДС И НЕ уатЗаправкаГСМЗаправки.Ссылка.СуммаВключаетНДС
	|			ТОГДА уатЗаправкаГСМЗаправки.Сумма + уатЗаправкаГСМЗаправки.СуммаНДС
	|		ИНАЧЕ уатЗаправкаГСМЗаправки.Сумма
	|	КОНЕЦ КАК СтоимостьУпр,
	|	уатЗаправкаГСМЗаправки.СуммаНДС КАК СуммаНДС,
	|	уатЗаправкаГСМЗаправки.Валюта КАК Валюта,
	|	уатЗаправкаГСМЗаправки.Ссылка.Организация КАК Организация,
	|	уатЗаправкаГСМЗаправки.Ссылка.ПодразделениеОрганизации КАК ПодразделениеОрганизации,
	|	уатЗаправкаГСМЗаправки.ПутевойЛист КАК ПутевойЛист,
	|	уатЗаправкаГСМЗаправки.НомераТалонов,
	|	уатЗаправкаГСМЗаправки.Количество КАК Количество,
	|	ВЫБОР
	|		КОГДА уатНоменклатураГСМ.ГруппаГСМ = ЗНАЧЕНИЕ(Перечисление.уатГруппыГСМ.Талон)
	|			ТОГДА уатЗаправкаГСМЗаправки.Количество
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК КоличествоТалонов
	|ИЗ
	|	Документ.уатЗаправкаГСМ.Заправки КАК уатЗаправкаГСМЗаправки
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатНоменклатураГСМ КАК уатНоменклатураГСМ
	|		ПО уатЗаправкаГСМЗаправки.ГСМ = уатНоменклатураГСМ.Номенклатура
	|ГДЕ
	|	уатЗаправкаГСМЗаправки.Ссылка = &Ссылка";
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	тблГСМ = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ТекСтрока Из тблГСМ Цикл
		Если ТекСтрока.ГруппаГСМ = Перечисления.уатГруппыГСМ.Талон Тогда
			ТекСтрока.Количество = уатОбщегоНазначения.уатКоличествоЛитровТалонаГСМ(ТекСтрока.Период, ТекСтрока.АЗС, ТекСтрока.НоменклатураТалонов, ТекСтрока.Количество);
		КонецЕсли;
		
		Если ТекСтрока.Стоимость <> 0 ИЛИ ТекСтрока.СтоимостьУпр <> 0 Тогда
			мКурсВалютыСтруктура = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ТекСтрока.Валюта, ТекСтрока.Период);
		КонецЕсли;
		
		Если ТекСтрока.Стоимость <> 0 И СтруктураДополнительныеСвойства.ВалютаРеглУчета <> ТекСтрока.Валюта тогда
			ТекСтрока.Стоимость = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.Стоимость, ТекСтрока.Валюта, 
			СтруктураДополнительныеСвойства.ВалютаРеглУчета,
			мКурсВалютыСтруктура.Курс, 
			СтруктураДополнительныеСвойства.КурсРегл,
			мКурсВалютыСтруктура.Кратность,  
			СтруктураДополнительныеСвойства.КратностьРегл);
		КонецЕсли;
		
		Если ТекСтрока.СтоимостьУпр <> 0 И СтруктураДополнительныеСвойства.Свойство("ВалютаУпрУчета") И СтруктураДополнительныеСвойства.ВалютаУпрУчета <> ТекСтрока.Валюта тогда
			ТекСтрока.СтоимостьУпр = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СтоимостьУпр, ТекСтрока.Валюта,
			СтруктураДополнительныеСвойства.ВалютаУпрУчета, 
			мКурсВалютыСтруктура.Курс, 
			СтруктураДополнительныеСвойства.КурсУпр,
			мКурсВалютыСтруктура.Кратность,  
			СтруктураДополнительныеСвойства.КратностьУпр);
		КонецЕсли;
		
		Если ТекСтрока.СуммаНДС <> 0 И СтруктураДополнительныеСвойства.ВалютаРеглУчета <> ТекСтрока.Валюта тогда
			ТекСтрока.СуммаНДС = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаНДС, ТекСтрока.Валюта, 
			СтруктураДополнительныеСвойства.ВалютаРеглУчета,
			мКурсВалютыСтруктура.Курс, 
			СтруктураДополнительныеСвойства.КурсРегл,
			мКурсВалютыСтруктура.Кратность,  
			СтруктураДополнительныеСвойства.КратностьРегл);
		КонецЕсли;
	КонецЦикла;
	
	// проставляем колонну, если не заполнена
	Если НЕ ЗначениеЗаполнено(ДокументСсылка.Колонна) Тогда
		Для Каждого ТекСтрока Из тблГСМ Цикл
			ТекСтрока.Колонна = уатОбщегоНазначения.МестонахождениеТС(ТекСтрока.ТС, ТекСтрока.Период).Колонна;
		КонецЦикла;
	КонецЕсли;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаОборотыПоЗаправкамГСМ", тблГСМ);
	
КонецПроцедуры // СформироватьТаблицаОборотыГСМ()

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаОборотыТЖ(ДокументСсылка, СтруктураДополнительныеСвойства)
	// получим результат запроса по таблице ГСМ
	Запрос = Новый Запрос();
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатЗаправкаГСМЗаправки.Ссылка КАК Регистратор,
	|	ВЫБОР
	|		КОГДА уатЗаправкаГСМЗаправки.ПутевойЛист <> ЗНАЧЕНИЕ(Документ.уатПутевойЛист.ПустаяСсылка)
	|				И уатЗаправкаГСМЗаправки.Дата < уатЗаправкаГСМЗаправки.ПутевойЛист.ДатаВыезда
	|			ТОГДА уатЗаправкаГСМЗаправки.ПутевойЛист.ДатаВыезда
	|		ИНАЧЕ ВЫБОР
	|				КОГДА уатЗаправкаГСМЗаправки.ПутевойЛист <> ЗНАЧЕНИЕ(Документ.уатПутевойЛист.ПустаяСсылка)
	|						И уатЗаправкаГСМЗаправки.ПутевойЛист.ДатаВозвращения <> ДАТАВРЕМЯ(1, 1, 1)
	|						И уатЗаправкаГСМЗаправки.Дата > уатЗаправкаГСМЗаправки.ПутевойЛист.ДатаВозвращения
	|					ТОГДА уатЗаправкаГСМЗаправки.ПутевойЛист.ДатаВозвращения
	|				ИНАЧЕ уатЗаправкаГСМЗаправки.Дата
	|			КОНЕЦ
	|	КОНЕЦ КАК Период,
	|	уатЗаправкаГСМЗаправки.Ссылка.Колонна КАК Колонна,
	|	уатЗаправкаГСМЗаправки.ТС КАК ТС,
	|	уатЗаправкаГСМЗаправки.ГСМ КАК ГСМ,
 	|	ЗНАЧЕНИЕ(Перечисление.уатВидыОперацийСТехническимиЖидкостями.ДоливПоАкту) КАК ВидОперации,
	|	уатЗаправкаГСМЗаправки.Водитель КАК Водитель,
	|	уатЗаправкаГСМЗаправки.Ссылка.Организация КАК Организация,
	|	уатЗаправкаГСМЗаправки.Количество КАК КоличествоПриход
	|ИЗ
	|	Документ.уатЗаправкаГСМ.Заправки КАК уатЗаправкаГСМЗаправки
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.уатНоменклатураГСМ КАК уатНоменклатураГСМ
	|		ПО уатЗаправкаГСМЗаправки.ГСМ = уатНоменклатураГСМ.Номенклатура
	|			И уатНоменклатураГСМ.ВестиУчетОстатковТЖ
	|ГДЕ
	|	уатЗаправкаГСМЗаправки.Ссылка = &Ссылка";
	Запрос.Текст = ТекстЗапроса;
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	тблТЖ = Запрос.Выполнить().Выгрузить();
	
	// проставляем колонну, если не заполнена
	Если НЕ ЗначениеЗаполнено(ДокументСсылка.Колонна) Тогда
		Для Каждого ТекСтрока Из тблТЖ Цикл
			ТекСтрока.Колонна = уатОбщегоНазначения.МестонахождениеТС(ТекСтрока.ТС, ТекСтрока.Период).Колонна;
		КонецЦикла;
	КонецЕсли;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаОборотыТЖ", тблТЖ);
	
КонецПроцедуры // СформироватьТаблицаОборотыТЖ()

#КонецОбласти

#КонецЕсли
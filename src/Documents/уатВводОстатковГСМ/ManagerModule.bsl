#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	Настройки.ПриПолученииСлужебныхРеквизитов = Ложь;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	// необходима для подключения внешних ПФ
	Заглушка = Истина;
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.УправлениеДоступом

// Позволяет переопределить ограничение, указанное в модуле менеджера объекта метаданных.
//
// Параметры:
//  Ограничение - Структура:
//    * Текст                             - Строка - ограничение доступа для пользователей.
//                                          Если пустая строка, значит, доступ разрешен.
//    * ТекстДляВнешнихПользователей      - Строка - ограничение доступа для внешних пользователей.
//                                          Если пустая строка, значит, доступ запрещен.
//    * ПоВладельцуБезЗаписиКлючейДоступа - Неопределено - определить автоматически.
//                                        - Булево - если Ложь, то всегда записывать ключи доступа,
//                                          если Истина, тогда не записывать ключи доступа,
//                                          а использовать ключи доступа владельца (требуется,
//                                          чтобы ограничение было строго по объекту-владельцу).
//   * ПоВладельцуБезЗаписиКлючейДоступаДляВнешнихПользователей - Неопределено, Булево - также
//                                          как у параметра ПоВладельцуБезЗаписиКлючейДоступа.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";
	
	Ограничение.ТекстДляВнешнихПользователей = Ограничение.Текст;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// СтандартныеПодсистемы.ВариантыОтчетов

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВариантыОтчетов

#КонецОбласти

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	
	СформироватьТаблицаГСМ(ДокументСсылка, СтруктураДополнительныеСвойства);
	
КонецПроцедуры // ИнициализироватьДанныеДокумента()

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// Формирует таблицу значений, содержащую данные для проведения по регистру.
// Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
Процедура СформироватьТаблицаГСМ(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	мВалютаРегл = Константы.ВалютаРегламентированногоУчета.Получить();
	Если уатОбщегоНазначенияТиповые.уатЕстьКонстанта("ВалютаУправленческогоУчета") Тогда 
		мВалютаУпр = Константы.ВалютаУправленческогоУчета.Получить();
	Иначе
		мВалютаУпр = мВалютаРегл;
	КонецЕсли;
	мКурсВалютыРеглСтруктура = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(мВалютаРегл, ДокументСсылка.Дата);
	мКурсВалютыРеглКратность = ?(мКурсВалютыРеглСтруктура.Кратность=0, 1, мКурсВалютыРеглСтруктура.Кратность);
	мКурсВалютыРегл = мКурсВалютыРеглСтруктура.Курс / мКурсВалютыРеглКратность;
	
	мКурсВалютыУпрСтруктура = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(мВалютаУпр, ДокументСсылка.Дата);
	мКурсВалютыУпрКратность = ?(мКурсВалютыУпрСтруктура.Кратность=0, 1, мКурсВалютыУпрСтруктура.Кратность);
	мКурсВалютыУпр = мКурсВалютыУпрСтруктура.Курс / мКурсВалютыУпрКратность;
	
	//топливо
	тблГСМ = ДокументСсылка.Топливо.Выгрузить();
	тблГСМ.Колонки.Добавить("Период");
	тблГСМ.Колонки.Добавить("ВидДвижения");
	тблГСМ.Колонки.Добавить("Партия");
	тблГСМ.Колонки.Добавить("Организация");
	тблГСМ.Колонки.Добавить("Подразделение");
	тблГСМ.Колонки.Добавить("Колонна");
	тблГСМ.Колонки.Сумма.Имя = "Стоимость";
	тблГСМ.Колонки.Добавить("СтоимостьУпр"); 
	тблГСМ.Колонки.Добавить("ГруппаГСМ");
	
	ЗапросГруппГСМ = Новый Запрос();
	ЗапросГруппГСМ.Текст = "ВЫБРАТЬ
	|	тблГСМ.ГСМ КАК ГСМ
	|ПОМЕСТИТЬ втНоменклатураГСМ
	|ИЗ
	|	&тблГСМ КАК тблГСМ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втНоменклатураГСМ.ГСМ КАК ГСМ,
	|	уатНоменклатураГСМ.ГруппаГСМ КАК ГруппаГСМ
	|ИЗ
	|	втНоменклатураГСМ КАК втНоменклатураГСМ
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатНоменклатураГСМ КАК уатНоменклатураГСМ
	|		ПО втНоменклатураГСМ.ГСМ = уатНоменклатураГСМ.Номенклатура"; 
	
	ЗапросГруппГСМ.УстановитьПараметр("тблГСМ", тблГСМ);
	тблГруппыГСМ = ЗапросГруппГСМ.Выполнить().Выгрузить();
	
	Для Каждого ТекСтрока Из тблГСМ Цикл  
		ПараметрыОтбора = Новый Структура("ГСМ", ТекСтрока.ГСМ);
		ТекСтрокаГруппаГСМ = тблГруппыГСМ.НайтиСтроки(ПараметрыОтбора);
		Если ЗначениеЗаполнено(ТекСтрокаГруппаГСМ) Тогда
			ТекСтрока.ГруппаГСМ = ТекСтрокаГруппаГСМ[0].ГруппаГСМ;
		КонецЕсли;
	КонецЦикла;
	
	// округляем до точности хранения остатков ГСМ в ТС
	мТочностьОстатковГСМ = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументСсылка.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.ТочностьОстатковТоплива);
	Для Каждого ТекСтрока Из тблГСМ Цикл
		ТекСтрока.Количество = Окр(ТекСтрока.Количество, мТочностьОстатковГСМ);
	КонецЦикла;
	
	Если уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументСсылка.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.СпособОценкиМПЗ) <> Перечисления.СпособыОценки.ПоСредней Тогда
		ТекПартия = ДокументСсылка;
	Иначе
		ТекПартия = Неопределено;
	КонецЕсли;
	
	ТаблицаДвиженийТЖ = тблГСМ.Скопировать();  
	ТаблицаДвиженийТЖ.Колонки.ГСМ.Имя = "ТЖ";
	ТаблицаДвиженийТЖ.Очистить();
	
	ТаблицаДвиженийГСМ = тблГСМ.Скопировать();
	ТаблицаДвиженийГСМ.Очистить(); 
	
	Для Каждого ТекСтрока Из тблГСМ Цикл
		Если ТекСтрока.ГруппаГСМ = Перечисления.уатГруппыГСМ.Топливо Тогда
			НовСтрока = ТаблицаДвиженийГСМ.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, ТекСтрока);
		ИначеЕсли ТекСтрока.ГруппаГСМ = Перечисления.уатГруппыГСМ.ПрисадкиИТехническиеЖидкости Тогда
			НовСтрока = ТаблицаДвиженийТЖ.Добавить();
			НовСтрока.ТЖ = ТекСтрока.ГСМ;
			ЗаполнитьЗначенияСвойств(НовСтрока, ТекСтрока);
		КонецЕсли;	
	КонецЦикла;
	
	Для Каждого ТекСтрока Из ТаблицаДвиженийГСМ Цикл
		ТекСтрока.Период = ДокументСсылка.Дата;
		ТекСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
		ТекСтрока.Партия = ТекПартия;
		ТекСтрока.Организация = ДокументСсылка.Организация;
		ТекСтрока.Подразделение = ДокументСсылка.Подразделение;
		ТекСтрока.Колонна = ДокументСсылка.Колонна;
		ТекСтрока.СтоимостьУпр = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.Стоимость,
			мВалютаРегл, мВалютаУпр, мКурсВалютыРегл, мКурсВалютыУпр);
	КонецЦикла;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаГСМ", ТаблицаДвиженийГСМ);  
	
	Для Каждого ТекСтрока Из ТаблицаДвиженийТЖ Цикл
		ТекСтрока.Период = ДокументСсылка.Дата;
		ТекСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
		ТекСтрока.Партия = ТекПартия;
		ТекСтрока.Организация = ДокументСсылка.Организация;
		ТекСтрока.Подразделение = ДокументСсылка.Подразделение;
		ТекСтрока.Колонна = ДокументСсылка.Колонна;
		ТекСтрока.СтоимостьУпр = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.Стоимость,
			мВалютаРегл, мВалютаУпр, мКурсВалютыРегл, мКурсВалютыУпр);
	КонецЦикла;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПартииТЖ", ТаблицаДвиженийТЖ);
	
КонецПроцедуры // СформироватьТаблицаТопливо()

// Выполняет контроль корректности движений документа.
//
Процедура ВыполнитьКонтроль(ДокументСсылка, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь) Экспорт
	
	Заголовок = уатОбщегоНазначенияТиповые.уатПредставлениеДокументаПриПроведении(ДокументСсылка);
	
	тблТопливо = ДокументСсылка.Топливо.Выгрузить();
	
	мсвГСМ = Новый Массив;
	мсвТС = Новый Массив;
	Для Каждого ТекСтрока Из тблТопливо Цикл
		мсвГСМ.Добавить(ТекСтрока.ГСМ);
		мсвТС.Добавить(ТекСтрока.ТС);
	КонецЦикла;
	
	Запрос = Новый Запрос("
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатОстаткиГСМнаТС.ГСМ КАК ГСМ,
	|	уатОстаткиГСМнаТС.ТС КАК ТС,
	|	ЕСТЬNULL(уатОстаткиГСМнаТС.КоличествоОстаток, 0) КАК КоличествоОстатокГСМнаТС
	|ИЗ
	|	РегистрНакопления.уатОстаткиГСМнаТС.Остатки(&МоментКонтроля, ТС В (&ТС) И ГСМ В(&ГСМ)) КАК уатОстаткиГСМнаТС
	|ГДЕ
	|	ЕСТЬNULL(уатОстаткиГСМнаТС.КоличествоОстаток, 0) < 0");
	Запрос.УстановитьПараметр("МоментКонтроля", ДополнительныеСвойства.ДляПроведения.МоментКонтроля);
	Запрос.УстановитьПараметр("ГСМ", мсвГСМ);
	Запрос.УстановитьПараметр("ТС", мсвТС);
	Рез = Запрос.Выполнить().Выбрать();
	
	Пока Рез.Следующий() Цикл
		ТекстНСТР = НСтр("en='Fond out fuels negative remain ""%1"" on vehicle ""%2"": %3';ru='Обнаружен отрицательный остаток ГСМ ""%1"" на ТС ""%2"": %3'");
		ТекстНСТР = СтрШаблон(ТекстНСТР, Рез.ГСМ, Рез.ТС, Рез.КоличествоОстатокГСМнаТС);
		уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, Отказ, Заголовок);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
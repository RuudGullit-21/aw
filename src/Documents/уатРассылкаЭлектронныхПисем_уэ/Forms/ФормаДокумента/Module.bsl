
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	уатЗащищенныеФункцииСервер.уатДокументФормаЭлементаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, Объект, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	Если Метаданные.Документы.Найти("ЭлектронноеПисьмоИсходящее") = Неопределено Тогда 
		ТекстНСТР = НСтр("en='The subsystem ""Interaction"" is not available in the joint configuration.';ru='Подсистема ""Взаимодействия"" не доступна в объединенной конфигурации.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		СтандартнаяОбработка = Ложь;
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ЗапрещенныеРасширения = РаботаСФайламиСлужебный.СписокЗапрещенныхРасширений();
	
	КэшТипыСправочниковПрисоединенныхФайлов = ПолучитьОписаниеТиповПрисоединенныхФайлов();
	
	// Заполним список выбора учетных записей.
	УправлениеЭлектроннойПочтой.ПолучитьДоступныеУчетныеЗаписиДляОтправки(Элементы.ОтправительПредставление.СписокВыбора, ДоступныеДляОтправкиУчетныеЗаписи);
	
	Если Объект.Ссылка.Пустая() Тогда
		ПриСозданииИПриЧтенииНаСервере();
	КонецЕсли;
	
	Элементы.Вложения.ОтборСтрок = Новый ФиксированнаяСтруктура("ИдентификаторПочтовогоВложения","#");
	
	СписокПисем.Отбор.Элементы.Очистить();
	УстановитьОтборСписка(СписокПисем, "Предмет", Объект.Ссылка);
	
	Если Объект.Ссылка.Пустая() Тогда
		Элементы.Панель.ТекущаяСтраница = Элементы.СтраницаСодержания;
	Иначе	
		Элементы.Панель.ТекущаяСтраница = ?(CRM_ЕстьПисьма,Элементы.СтраницаПисем,Элементы.СтраницаПолучателей);
	КонецЕсли;
	
	ОбновитьСтатусОтправленныхПисемНаСервере();
	
	НастроитьВидимостьИДоступностьФормы(ЭтотОбъект);
	СформироватьПредставлениеВложений();
	УстановитьВидимостьТемыСодержания();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	#Если Не ВебКлиент Тогда
		Для Каждого СтрокаТаблицыВложений Из Вложения Цикл
			Если СтрокаТаблицыВложений.Расположение = 2 Тогда
				Попытка
					Данные = Новый ДвоичныеДанные(СтрокаТаблицыВложений.ИмяФайлаНаКомпьютере);
					СтрокаТаблицыВложений.ИмяФайлаНаКомпьютере = ПоместитьВоВременноеХранилище(Данные, "");
					СтрокаТаблицыВложений.Расположение = 4;
				Исключение
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(КраткоеПредставлениеОшибки(ИнформацияОбОшибке()),,"Вложения",, Отказ);
				КонецПопытки;
			КонецЕсли;
		КонецЦикла;
	#КонецЕсли
	
	Объект.ЕстьВложения = (Вложения.Количество() <> 0);
	
	// Если рассылка не новая и уже есть черновики, тогда надо уточнить переносить ли изменения
	// содержания, вложений и отправителя в существующие черновики.
	Если Не ПараметрыЗаписи.Свойство("ОтветПолучен") Тогда 
		Если НЕ Объект.Ссылка.Пустая() И ЕстьНеОтправленныеПисьма(Объект.Ссылка) И ( Объект.ЕстьИзменения
																				 ИЛИ CRM_ИзмененоСодержаниеРассылки 
																				 ИЛИ CRM_ИзмененОтправитель
																				 ИЛИ CRM_ИзмененыВложения
																				 ИЛИ CRM_ИзмененСоставПолучателей
																				 ИЛИ CRM_ИзмененаТема) Тогда
			Если НЕ CRM_НеЗадаватьВопросПередЗаписью Тогда
				ТекстВопроса = НСтр("en='Mailout has been changed. Re-form letters?';ru='Рассылка была изменена. Переформировать письма?'");
				Оповещение = Новый ОписаниеОповещения("ПередЗаписьюПодтвержениеПереформироватьПисьма", ЭтотОбъект);
				ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
				Отказ = Истина;
				Возврат;
				
			Иначе
				Объект.ЕстьИзменения   = Ложь;
				CRM_ПеренестиИзменения = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ CRM_ЕстьПисьма ИЛИ CRM_ИзмененоСодержаниеРассылки Тогда
		
		ДокументHTMLТекущегоПисьмаПодготовлен = Ложь;
		
		// Подготовим документ HTML из содержимого форматированного документа.
		ТаблицаСоответствийИменВложенийИдентификаторам.Очистить();
		
		СтруктураВложений = Новый Структура;
		ТекстПисьмаФорматированныйДокумент.ПолучитьHTML(ТекущийОбъект.ТекстHTML, СтруктураВложений);
		
		ДобавитьВТаблицуСоответствийИменВложенийИдентификаторамКартинкиИзИнтернета(ТекущийОбъект.ТекстHTML);
		
		Для каждого Вложение Из СтруктураВложений Цикл
			
			НоваяСтрока = ТаблицаСоответствийИменВложенийИдентификаторам.Добавить();
			НоваяСтрока.ИмяФайла = Вложение.Ключ;
			НоваяСтрока.ИдентификаторФайлаДляHTML = Новый УникальныйИдентификатор;
			НоваяСтрока.Картинка = Вложение.Значение;
			
		КонецЦикла;
		
		Если ТаблицаСоответствийИменВложенийИдентификаторам.Количество() > 0 Тогда
			
			ДокументHTML = Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ТекущийОбъект.ТекстHTML);
			Взаимодействия.ЗаменитьИменаКартинокНаИдентификаторыПочтовыхВложенийВHTML(
			    ДокументHTML, ТаблицаСоответствийИменВложенийИдентификаторам.Выгрузить());
			ДокументHTMLТекущегоПисьмаПодготовлен = Истина;
			
		КонецЕсли;
			
		Если ДокументHTMLТекущегоПисьмаПодготовлен Тогда
			ТекущийОбъект.ТекстHTML = Взаимодействия.ПолучитьТекстHTMLИзОбъектаДокументHTML(ДокументHTML);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗаписиНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	Если НЕ CRM_ЕстьПисьма ИЛИ CRM_ИзмененоСодержаниеРассылки Тогда
		
		УстановитьПривилегированныйРежим(Истина);
		Письмо = ТекущийОбъект.Ссылка;
		
		// Добавим в список удаленных вложений ранее сохраненные картинки, отображаемые в теле форматированного документа.
		ТаблицаВложенийКартинокФорматированногоДокумента = Взаимодействия.ПолучитьВложенияПисьмаСНеПустымИД(Письмо);
		
		Для каждого Вложение Из ТаблицаВложенийКартинокФорматированногоДокумента Цикл
			УдаленныеВложения.Добавить(Вложение.Ссылка);
		КонецЦикла;
		
		// Удалим удаленные вложения
		Для Каждого УдаленноеВложение Из УдаленныеВложения Цикл
			ОбъектВложение = УдаленноеВложение.Значение.ПолучитьОбъект();
			ОбъектВложение.Удалить();
		КонецЦикла;
		
		УдаленныеВложения.Очистить();
			
		Для каждого Вложение Из ТаблицаСоответствийИменВложенийИдентификаторам Цикл
			
			ИмяФайлаВложения = "_" + СтрЗаменить(Вложение.ИдентификаторФайлаДляHTML, "-", "_") + "." + Вложение.Картинка.Формат();
			
			ДвоичныеДанныеКартинки = Вложение.Картинка.ПолучитьДвоичныеДанные();
			АдресКартинкиВоВременномХранилище = ПоместитьВоВременноеХранилище(ДвоичныеДанныеКартинки, УникальныйИдентификатор);
			ПрисоединенныйФайл = УправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(
			                     Письмо,
			                     АдресКартинкиВоВременномХранилище,
			                     ИмяФайлаВложения,
			                     ДвоичныеДанныеКартинки.Размер());
			
			Если ПрисоединенныйФайл <> Неопределено Тогда
				ПрисоединенныйФайлОбъект = ПрисоединенныйФайл.ПолучитьОбъект();
				ПрисоединенныйФайлОбъект.ИДФайлаЭлектронногоПисьма = Вложение.ИдентификаторФайлаДляHTML;
				ПрисоединенныйФайлОбъект.Записать();
			КонецЕсли;
			
		КонецЦикла;
			
		Для Каждого СтрокаТаблицыВложений Из Вложения Цикл
			
			ИмяФайла = СтрокаТаблицыВложений.ИмяФайла;
			
			Если СтрокаТаблицыВложений.Расположение = 4 Тогда
				// из временного хранилища
				УправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьмаИзВременногоХранилища(
					Письмо, СтрокаТаблицыВложений.ИмяФайлаНаКомпьютере, Новый Структура("ИмяФайла", ИмяФайла));
				
			ИначеЕсли СтрокаТаблицыВложений.Расположение = 3 Тогда
				// из файла на сервере
				
			ИначеЕсли СтрокаТаблицыВложений.Расположение = 1 Тогда
				
				УправлениеЭлектроннойПочтой.ЗаписатьВложениеЭлектронногоПисьмаСкопировавВложениеДругогоПисьма(
					Письмо, СтрокаТаблицыВложений.Ссылка, УникальныйИдентификатор);
				
			ИначеЕсли СтрокаТаблицыВложений.Расположение = 0 Тогда
				// перезаписать вложение
			КонецЕсли;
			
			СтрокаТаблицыВложений.Расположение = 0;
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьВложения();
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// Переносим изменения в ранее созданные письма, если требуется
	// создаем новые письма.
	Если CRM_ПеренестиИзменения Тогда
		ПолучитьНеОтправленныеПисьмаИСкорректировать();
		ОбновитьИнтерфейс();
		Элементы.СписокПисем.Обновить();
	КонецЕсли;
	
	Если CRM_ЕстьПисьма Тогда
		ОбновитьИнтерфейс();
		Элементы.Вложения.Обновить();
	КонецЕсли;
	
	CRM_НеЗадаватьВопросПередЗаписью = Ложь;
	CRM_ПеренестиИзменения			  = Ложь;
	CRM_ИзмененоСодержаниеРассылки	  = Ложь;
	CRM_ИзмененОтправитель			  = Ложь;
	CRM_ИзмененыВложения			  = Ложь;
	CRM_ИзмененСоставПолучателей	  = Ложь;
	CRM_ИзмененаТема				  = Ложь;
	
	УстановитьСвойстваЭлементовФормы();
	
	УжеЗаписан = Ложь;	
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаписиНового(НовыйОбъект, Источник, СтандартнаяОбработка)
	
	Если ТипЗнч(НовыйОбъект) = Тип("ЗадачаСсылка.ЗадачаИсполнителя") Тогда
		НастроитьВидимостьИДоступностьФормы(ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	уатЗащищенныеФункцииКлиент.уатДокументФормаЭлементаПриОткрытии(Отказ, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если ВсеВложенияПометка Тогда
		Элементы.Вложения.ОтборСтрок = Неопределено;
	Иначе
		Элементы.Вложения.ОтборСтрок = Новый ФиксированнаяСтруктура("ИдентификаторПочтовогоВложения","#");
	КонецЕсли;	
	СформироватьПредставлениеВложений();	
	
	УстановитьСвойстваЭлементовФормы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Контрагенты") Тогда
		Если Объект.Получатели.Количество() > 0 Тогда
			ТекстВопроса = НСтр("en='Clear list of recipients?';ru='Очистить список получателей?'");
			Оповещение = Новый ОписаниеОповещения("ПодтверждениеОчисткиПолучателейПриВыборе", ЭтотОбъект, ВыбранноеЗначение);
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
			
		Иначе 
			ОбработкаВыбораНаСервере(ВыбранноеЗначение);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ПриСозданииИПриЧтенииНаСервере();
	УстановитьВидимостьТемыСодержания();
	
КонецПроцедуры // ПриЧтенииНаСервере()

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	Если НЕ Настройки["ВсеВложенияПометка"] = Неопределено Тогда
		ВсеВложенияПометка	= Настройки["ВсеВложенияПометка"];
	Иначе
		ВсеВложенияПометка	= Ложь;
	КонецЕсли;
	Элементы.ФормаВсеВложения.Пометка	= ВсеВложенияПометка;
	
	Если НЕ Настройки["ВсегдаПоказыватьВложения"] = Неопределено Тогда
		ВсегдаПоказыватьВложения	= Настройки["ВсегдаПоказыватьВложения"];
	Иначе
		ВсегдаПоказыватьВложения	= Ложь;
	КонецЕсли;
	Элементы.ФормаВсегдаПоказыватьВложения.Пометка	= ВсегдаПоказыватьВложения;	
	Элементы.КоманднаяПанельВложенияСкрытьПанель.Видимость = НЕ ВсегдаПоказыватьВложения;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ШаблонСообщенияПриИзменении(Элемент)
	УстановитьВидимостьТемыСодержания();
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПредставлениеНажатие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если ВложенияПредставление = НСтр("en='Add file ...';ru='Добавить файл...'") Тогда
		ДобавитьВложение();		
	КонецЕсли;			
	Элементы.Вложения.Видимость = НЕ Элементы.Вложения.Видимость;
	СформироватьПредставлениеВложений();
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеОтправителяОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если НЕ ПроверитьЧтоУчетнаяЗаписьИспользуетсяДляОтправки(ВыбранноеЗначение) Тогда
		ПоказатьПредупреждение(Неопределено,
			Нстр("en='In this account, sending letters is disabled!';ru='В данной учётной записи отключена отправка писем!'"));
		СтандартнаяОбработка = Ложь;				
		Возврат;
	КонецЕсли;	
	
	Объект.УчетнаяЗапись = ВыбранноеЗначение;
	ЭлементСписка = Элемент.СписокВыбора.НайтиПоЗначению(ВыбранноеЗначение);
	Если ЭлементСписка <> Неопределено Тогда
		СтандартнаяОбработка			= Ложь;
		Объект.ОтправительПредставление	= ЭлементСписка.Представление;
		Модифицированность		= Истина;
		Если CRM_ЕстьПисьма Тогда
			CRM_ИзмененОтправитель	= Истина;
			Объект.ЕстьИзменения = (CRM_ЕстьПисьма И НЕ CRM_Отправляли);
			УстановитьСвойстваЭлементовФормы();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТемаПриИзменении(Элемент)
	
	Если CRM_ЕстьПисьма Тогда
		CRM_ИзмененаТема	= Истина;
		Объект.ЕстьИзменения = (CRM_ЕстьПисьма И НЕ CRM_Отправляли);
		УстановитьСвойстваЭлементовФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТекстПисьмаФорматированныйДокументПриИзменении(Элемент)
	
	Если CRM_ЕстьПисьма Тогда
		CRM_ИзмененоСодержаниеРассылки = Истина;
		Объект.ЕстьИзменения = (CRM_ЕстьПисьма И НЕ CRM_Отправляли);
		УстановитьСвойстваЭлементовФормы();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_Получатели

&НаКлиенте
Процедура ПриИзмененииПолучателейПисем(Элемент)
	
	Если CRM_ЕстьПисьма Тогда
		CRM_ИзмененСоставПолучателей = Истина;
		Объект.ЕстьИзменения = (CRM_ЕстьПисьма И НЕ CRM_Отправляли);
		УстановитьСвойстваЭлементовФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиКонтрагентПриИзменении(Элемент)
	
	ТекДанные = Элементы.Получатели.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекДанные.Контрагент) И ТипЗнч(ТекДанные.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		ТекДанные.КонтактноеЛицо = ВернутьКЛКонтрагента(ТекДанные.Контрагент);
		СписокАдресов = СформироватьСписокАдресов(Новый Структура("Контрагент, КонтактноеЛицо",ТекДанные.Контрагент,ТекДанные.КонтактноеЛицо));
		Если СписокАдресов.Количество() > 0 Тогда
			Адрес = СписокАдресов[0].Значение;
			Если НЕ Адрес.Количество() = 0 Тогда
				ТекДанные.Адрес					= Адрес.Представление;
				ТекДанные.ПредставлениеАдреса	= ?(Адрес.Объект = ТекДанные.Контрагент,Строка(ТекДанные.Контрагент),Строка(ТекДанные.КонтактноеЛицо)) + " <" + Адрес.Представление + ">";
			Иначе
				ТекДанные.Адрес					= "";
				ТекДанные.ПредставлениеАдреса	= "";
			КонецЕсли;
		Иначе
			ТекДанные.Адрес					= "";
			ТекДанные.ПредставлениеАдреса	= "";
		КонецЕсли;
	Иначе
		ТекДанные.Адрес					= "";
		ТекДанные.ПредставлениеАдреса	= "";
	КонецЕсли;
	
	Если CRM_ЕстьПисьма Тогда
		CRM_ИзмененСоставПолучателей = Истина;
		Объект.ЕстьИзменения = (CRM_ЕстьПисьма И НЕ CRM_Отправляли);
		УстановитьСвойстваЭлементовФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиКонтактноеЛицоПриИзменении(Элемент)
	
	ТекДанные = Элементы.Получатели.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекДанные.Контрагент) Тогда
		СписокАдресов = СформироватьСписокАдресов(Новый Структура("Контрагент, КонтактноеЛицо",ТекДанные.Контрагент,ТекДанные.КонтактноеЛицо));
		Если СписокАдресов.Количество() > 0 Тогда
			Адрес = СписокАдресов[0].Значение;
			Если НЕ Адрес.Количество() = 0 Тогда
				ТекДанные.Адрес					= Адрес.Представление;
				ТекДанные.ПредставлениеАдреса	= ?(Адрес.Объект = ТекДанные.Контрагент,Строка(ТекДанные.Контрагент),Строка(ТекДанные.КонтактноеЛицо)) + " <" + Адрес.Представление + ">";
			Иначе
				ТекДанные.Адрес					= "";
				ТекДанные.ПредставлениеАдреса	= "";
			КонецЕсли;
		Иначе
			ТекДанные.Адрес					= "";
			ТекДанные.ПредставлениеАдреса	= "";
		КонецЕсли;
	КонецЕсли;
	
	Если CRM_ЕстьПисьма Тогда
		CRM_ИзмененСоставПолучателей = Истина;
		Объект.ЕстьИзменения = (CRM_ЕстьПисьма И НЕ CRM_Отправляли);
		УстановитьСвойстваЭлементовФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиАдресНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = ложь;
	
	ТекДанные = Элементы.Получатели.ТекущиеДанные;
	
	СписокАдресов = СформироватьСписокАдресов(Новый Структура("Контрагент, КонтактноеЛицо", ТекДанные.Контрагент,ТекДанные.КонтактноеЛицо));
	ОповещениеОВыборе = Новый ОписаниеОповещения("ПолучателиАдресПослеВыбораВСписке", ЭтотОбъект, ТекДанные);
	
	ТекстНСТР = НСтр("en='Select the address';ru='Выберите адрес'");
	СписокАдресов.ПоказатьВыборЭлемента(ОповещениеОВыборе, ТекстНСТР);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиАдресПослеВыбораВСписке(ВыбранныйЭлемент, ТекДанные) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат; 
	КонецЕсли;
	
	Адрес = ВыбранныйЭлемент.Значение;
	Если Не Адрес.Количество() = 0 Тогда
		ТекДанные.Адрес = Адрес.Представление;
		ТекДанные.ПредставлениеАдреса = ?(Адрес.Объект = ТекДанные.Контрагент,Строка(ТекДанные.Контрагент),Строка(ТекДанные.КонтактноеЛицо)) + " <" + Адрес.Представление + ">";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиАдресОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекДанные = Элементы.Получатели.ТекущиеДанные;
	ТекДанные.ПредставлениеАдреса	= Строка(ТекДанные.Контрагент) + " <" + Текст + ">";
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Для Каждого ЭлементМассива Из ВыбранноеЗначение Цикл
		ДобавитьВыбранноеЗначение(Элемент, ЭлементМассива, СтандартнаяОбработка);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Если НЕ Копирование Тогда
		Отказ = Истина;
		НоваяСтрока = Объект.Получатели.Добавить();
		НоваяСтрока.Контрагент = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
		Элементы.Получатели.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиАдресПриИзменении(Элемент)
	РезультатПроверки = АнализАдресаЭП(СокрЛП(Элемент.ТекстРедактирования));
	Если РезультатПроверки.КодОшибки<>0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверки.Сообщение, , Элемент.Имя);
	Иначе
		ТекДанные = Элементы.Получатели.ТекущиеДанные;
		ТекДанные.ПредставлениеАдреса	= ?(ЗначениеЗаполнено(ТекДанные.КонтактноеЛицо),Строка(ТекДанные.КонтактноеЛицо),Строка(ТекДанные.Контрагент)) + " <" + ТекДанные.Адрес + ">";
	КонецЕсли;
	
	Если CRM_ЕстьПисьма Тогда
		CRM_ИзмененСоставПолучателей = Истина;
		Объект.ЕстьИзменения = (CRM_ЕстьПисьма И НЕ CRM_Отправляли);
		УстановитьСвойстваЭлементовФормы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиАдресОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	РезультатПроверки = АнализАдресаЭП(СокрЛП(ВыбранноеЗначение));
	Если РезультатПроверки.КодОшибки<>0 Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверки.Сообщение, , Элемент.Имя);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_Вложения

&НаКлиенте
Процедура ВложенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ОткрытьВложениеВыполнить();
	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Истина;
	Если Не Копирование Тогда
		ДобавитьВложениеВыполнить();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ВложенияПередУдалением(Элемент, Отказ)
	УдалитьВложениеВыполнить();	
	Отказ = Истина;	
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;    
	ПараметрыПеретаскивания.ДопустимыеДействия  = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
КонецПроцедуры

&НаКлиенте
Процедура ВложенияПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
	ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
	Если ПеретаскиваетсяФайл(ПараметрыПеретаскивания.Значение) = Истина Тогда
		ДобавитьПрисоединенныйФайлПеретаскиванием(ПараметрыПеретаскивания.Значение);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_СписокПисем

&НаКлиенте
Процедура СписокПисемПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	Отказ = Копирование;
	
	Если Не Отказ Тогда
		// Стандартная обработка нас не устраивает, надо передать параметры.
		
		Отказ = Истина;
		
		ПараметрыФормы = Новый Структура("Основание", Объект.Ссылка);
		
		ОткрытьФорму("Документ.ЭлектронноеПисьмоИсходящее.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект, УникальныйИдентификатор);
		
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_НеОтправленныеПисьма

&НаКлиенте
Процедура НеОтправленныеПисьмаПисьмоОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура НеОтправленныеПисьмаОписаниеОшибкиОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура НеОтправленныеПисьмаПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НеОтправленныеПисьмаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ОбновитьСтатусОтправленныхПисем(Команда)
	ОбновитьСтатусОтправленныхПисемНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТЧ(Команда)
	
	ОчиститьТабличнуюЧасть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьИЗакрыть(Команда)
	
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	ОтправитьПисьма();
	
	Если НЕ ЕстьОшибки Тогда
		Закрыть();
	Иначе
		ЕстьОшибки = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Отправить(Команда)
	
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
		Записать();
	КонецЕсли;
	
	ОтправитьПисьма();
	
	Если НЕ ЕстьОшибки Тогда
		Состояние(НСтр("en='Sending of emails completed';ru='Отправка электронных писем завершена'"));
	Иначе
		ЕстьОшибки = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьАдреса(Команда)
	
	ПроверитьАдресаПолучателей();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьКонтактыБезАдреса(Команда)
	
	УдалитьКонтактыБезАдреса();
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьОдинаковыеСтроки(Команда)
	
	УдалитьКонтактыСОдинаковымиАдресами();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыделитьОдинаковыеСтроки(Команда)
	
	ВыделитьКонтактыСОдинаковымиАдресами();
	
КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ЗакрыватьПриВыборе",  Ложь);
	ПараметрыФормы.Вставить("МножественныйВыбор",  Истина);
	ПараметрыФормы.Вставить("РежимВыбора",         Истина);
	ПараметрыФормы.Вставить("ПрограммноеОткрытие", Истина);
	
	ОткрытьФорму("Справочник.Контрагенты.ФормаВыбора", ПараметрыФормы, Элементы.Получатели);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтрокиСПустымиАдресамиКлиенты(Команда)
	ОбновитьАдресаКлиенты();
КонецПроцедуры

&НаКлиенте
Процедура ВложенияСкрытьПанель(Команда)
	ВложенияПредставлениеНажатие(Неопределено, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ВсегдаПоказыватьВложения(Команда)
	
	Элементы.ФормаВсегдаПоказыватьВложения.Пометка = НЕ Элементы.ФормаВсегдаПоказыватьВложения.Пометка;
	ВсегдаПоказыватьВложения = Элементы.ФормаВсегдаПоказыватьВложения.Пометка;
	Элементы.КоманднаяПанельВложенияСкрытьПанель.Видимость = НЕ ВсегдаПоказыватьВложения;
	
	СформироватьПредставлениеВложений();	
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеВложения(Команда)
	
	Элементы.ФормаВсеВложения.Пометка	= НЕ Элементы.ФормаВсеВложения.Пометка;
	ВсеВложенияПометка					= Элементы.ФормаВсеВложения.Пометка;
	
	Если ВсеВложенияПометка Тогда
		Элементы.Вложения.ОтборСтрок = Неопределено;
	Иначе
		Элементы.Вложения.ОтборСтрок = Новый ФиксированнаяСтруктура("ИдентификаторПочтовогоВложения","#");
	КонецЕсли;
	
	СформироватьПредставлениеВложений();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоГруппе(Команда)
	
	ПараметрыФормы = Новый Структура("ЗакрыватьПриВыборе", Истина);
	ОткрытьФорму("Справочник.Контрагенты.ФормаВыбораГруппы", ПараметрыФормы, ЭтотОбъект, ,);
	
КонецПроцедуры

&НаКлиенте
Процедура ПометитьНаУдалениеПисьма(Команда)
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		ПолучитьПисьмаПоставитьПометкуУдаления(Объект.Ссылка);
		ОбновитьИнтерфейс();
		Элементы.СписокПисем.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьПисьма(Команда)
	
	CRM_НеЗадаватьВопросПередЗаписью = (НЕ Объект.Ссылка.Пустая() И Модифицированность) ИЛИ Объект.ЕстьИзменения;
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность ИЛИ Объект.ЕстьИзменения Тогда
		Записать();
	КонецЕсли;
	
	Если НЕ CRM_ЕстьПисьма И СформироватьПисьмаНаСервере() Тогда
		CRM_ЕстьПисьма = Истина;
	КонецЕсли;
	
	УстановитьСвойстваЭлементовФормы();
	
	Если CRM_ЕстьПисьма Тогда
		ОбновитьИнтерфейс();
		Элементы.СписокПисем.Обновить();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаСервереБезКонтекста
Процедура ПолучитьПисьмаПоставитьПометкуУдаления(Рассылка)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Предмет", Рассылка);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭлектронноеПисьмоИсходящее.Ссылка
	|ИЗ
	|	Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
	|		ПО ЭлектронноеПисьмоИсходящее.Ссылка = ПредметыПапкиВзаимодействий.Взаимодействие
	|			И (ПредметыПапкиВзаимодействий.Предмет = &Предмет)
	|ГДЕ
	|	НЕ ЭлектронноеПисьмоИсходящее.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НачатьТранзакцию();
		Попытка
			Письмо = Выборка.Ссылка.ПолучитьОбъект();
			Письмо.УстановитьПометкуУдаления(Истина);
			Письмо.Записать();
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СформироватьСписокАдресов(ТекущиеДанные)
	
	Возврат Документы.уатРассылкаЭлектронныхПисем_уэ.СформироватьСписокАдресов(ТекущиеДанные);
	
КонецФункции

&НаСервереБезКонтекста
Функция ВернутьКЛКонтрагента(ТекКонтрагент)
	
	Возврат ТекКонтрагент.ОсновноеКонтактноеЛицо;
	
КонецФункции

&НаСервере
Процедура ПолучитьНеОтправленныеПисьмаИСкорректировать()
	
	// Получим актуальную таблицу получателей.
	ТабПолучателей = СформироватьТаблицуПолучателей();
	ТабПолучателей.Колонки.Добавить("Обработано",Новый ОписаниеТипов("Булево"));
	
	// Создадим таблицу для неактуальных писем.
	ТаблицаНеактуальныхПисем = Новый ТаблицаЗначений;
	ТаблицаНеактуальныхПисем.Колонки.Добавить("Ссылка",Новый ОписаниеТипов("ДокументСсылка.ЭлектронноеПисьмоИсходящее"));
	
	// Запросом получим ранее созданные письма.
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭлектронноеПисьмоИсходящее.Ссылка
	|ИЗ
	|	Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
	|		ПО ЭлектронноеПисьмоИсходящее.Ссылка = ПредметыПапкиВзаимодействий.Взаимодействие
	|			И (ПредметыПапкиВзаимодействий.Предмет = &Ссылка)
	|ГДЕ
	|	НЕ ЭлектронноеПисьмоИсходящее.СтатусПисьма = ЗНАЧЕНИЕ(Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Отправлено)
	|	И НЕ ЭлектронноеПисьмоИсходящее.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		МассивПолучателей = ТабПолучателей.НайтиСтроки(Новый Структура("Контакт", Выборка.Ссылка.ПолучателиПисьма[0].Контакт));
		
		// Если среди получателей не нашли, то данное письмо неактуально.
		Если МассивПолучателей.Количество() = 0 Тогда
			НоваяСтрока = ТаблицаНеактуальныхПисем.Добавить();
			НоваяСтрока.Ссылка = Выборка.Ссылка;
			Продолжить;
		КонецЕсли;
		
		// Перенесем изменения в письмо.
		НачатьТранзакцию();
		Попытка
			МассивПолучателей[0].Обработано = Истина;
			
			ЭлектронноеПисьмо = Выборка.Ссылка.ПолучитьОбъект();
			
			ИзмененАдресПолучателя = Ложь;
			
			// Если изменили адрес почты, то меняем и в письме.
			Если НЕ Выборка.Ссылка.ПолучателиПисьма[0].Адрес = МассивПолучателей[0].Адрес Тогда
				ЭлектронноеПисьмо.ПолучателиПисьма[0].Адрес         = МассивПолучателей[0].Адрес;
				ЭлектронноеПисьмо.ПолучателиПисьма[0].Представление = МассивПолучателей[0].ПредставлениеАдреса;
				ЭлектронноеПисьмо.СписокПолучателейПисьма           = МассивПолучателей[0].ПредставлениеАдреса;
				
				АдресПисьма              = МассивПолучателей[0].Адрес;
				АдресПисьмаПредставление = МассивПолучателей[0].ПредставлениеАдреса;
				
				ИзмененАдресПолучателя = Истина;
			Иначе
				АдресПисьма              = Выборка.Ссылка.ПолучателиПисьма[0].Адрес;
				АдресПисьмаПредставление = Выборка.Ссылка.ПолучателиПисьма[0].Представление;
			КонецЕсли;
			
			СтрокаПолучателя = Новый Структура;
			СтрокаПолучателя.Вставить("НомерСтроки", 0);
			
			СтрокаПолучателя.Вставить("Адрес",               АдресПисьма);
			СтрокаПолучателя.Вставить("ПредставлениеАдреса", АдресПисьмаПредставление);
			
			СтрокаПолучателя.Вставить("Контакт",                 МассивПолучателей[0].Контакт);
			СтрокаПолучателя.Вставить("Контрагент",              МассивПолучателей[0].Контрагент);
			СтрокаПолучателя.Вставить("КонтактноеЛицо",          МассивПолучателей[0].КонтактноеЛицо);
			СтрокаПолучателя.Вставить("Рассылка",                МассивПолучателей[0].Рассылка);
			СтрокаПолучателя.Вставить("Тендер",                  МассивПолучателей[0].Тендер);
			СтрокаПолучателя.Вставить("ТендерНомер",             МассивПолучателей[0].ТендерНомер);
			СтрокаПолучателя.Вставить("ТендерДата",              МассивПолучателей[0].ТендерДата);
			СтрокаПолучателя.Вставить("Организация",             МассивПолучателей[0].Организация);
			СтрокаПолучателя.Вставить("ОрганизацияНаименование", МассивПолучателей[0].ОрганизацияНаименование);
			
			ИтоговыйТекстПисьма = СформироватьТекстПисьмаПолучателю(СтрокаПолучателя);
			
			Если CRM_ИзмененОтправитель Тогда
				ЭлектронноеПисьмо.УчетнаяЗапись            = Объект.УчетнаяЗапись;
				ЭлектронноеПисьмо.ОтправительПредставление = Объект.ОтправительПредставление;
			КонецЕсли;
			
			Если CRM_ИзмененоСодержаниеРассылки ИЛИ ИзмененАдресПолучателя Тогда
				ЭлектронноеПисьмо.ТекстHTML = ИтоговыйТекстПисьма;
			КонецЕсли;
			
			Если CRM_ИзмененаТема Тогда
				ЭлектронноеПисьмо.Тема = ВернутьТему(СтрокаПолучателя);
			КонецЕсли;
			
			Если (CRM_ИзмененоСодержаниеРассылки ИЛИ CRM_ИзмененОтправитель ИЛИ ИзмененАдресПолучателя ИЛИ CRM_ИзмененаТема) И НЕ CRM_ИзмененыВложения Тогда
				ЭлектронноеПисьмо.Записать();
			КонецЕсли;
			
			Если CRM_ИзмененоСодержаниеРассылки ИЛИ CRM_ИзмененыВложения Тогда
				ЭлектронноеПисьмо.ЕстьВложения = Объект.ЕстьВложения;
				ЭлектронноеПисьмо.Записать();
			КонецЕсли;
			
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЦикла;
	
	Для Каждого СтрокаПолучателя Из ТабПолучателей Цикл
		// Тут либо новый получатель, либо поменяли получателя.
		Если НЕ СтрокаПолучателя.Обработано Тогда
			НачатьТранзакцию();
			Попытка
				Если ЗначениеЗаполнено(СтрокаПолучателя.Адрес) Тогда
					
					НовоеЭлектронноеПисьмо = СоздатьЗаполнитьЭлектронноеПисьмоИсходящее(СтрокаПолучателя);
					НовоеЭлектронноеПисьмо.Записать();
					
					СоздатьЗаписьПредметВзаимодействия(НовоеЭлектронноеПисьмо.Ссылка, Объект.Ссылка);
					
				КонецЕсли;
				ЗафиксироватьТранзакцию();
			Исключение
				ОтменитьТранзакцию();
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
	// Установим пометку удаления у неактуальных писем.
	Для Каждого НеактуальноеПисьмо Из ТаблицаНеактуальныхПисем Цикл
		НачатьТранзакцию();
		Попытка
			НеактуальноеПисьмоОбъект = НеактуальноеПисьмо.Ссылка.ПолучитьОбъект();
			НеактуальноеПисьмоОбъект.УстановитьПометкуУдаления(Истина);
			НеактуальноеПисьмоОбъект.Записать();
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьНеОтправленныеПисьма(ДокументСсылка)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Предмет", ДокументСсылка);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ЭлектронноеПисьмоИсходящее.Ссылка
	|ИЗ
	|	Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
	|		ПО ЭлектронноеПисьмоИсходящее.Ссылка = ПредметыПапкиВзаимодействий.Взаимодействие
	|			И (ПредметыПапкиВзаимодействий.Предмет = &Предмет)
	|ГДЕ
	|	НЕ ЭлектронноеПисьмоИсходящее.СтатусПисьма = ЗНАЧЕНИЕ(Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Отправлено)
	|	И НЕ ЭлектронноеПисьмоИсходящее.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Возврат Выборка.Следующий();
	
КонецФункции

&НаСервереБезКонтекста
Функция ВведеныПисьмаНаОсновании(ДокументСсылка)
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Предмет",ДокументСсылка);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	ЭлектронноеПисьмоИсходящее.Ссылка,
	|	ВЫБОР
	|		КОГДА ЭлектронноеПисьмоИсходящее.СтатусПисьма = ЗНАЧЕНИЕ(Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Отправлено)
	|			ТОГДА ИСТИНА
	|		ИНАЧЕ ЛОЖЬ
	|	КОНЕЦ КАК Отправляли
	|ИЗ
	|	Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
	|		ПО ЭлектронноеПисьмоИсходящее.Ссылка = ПредметыПапкиВзаимодействий.Взаимодействие
	|			И (ПредметыПапкиВзаимодействий.Предмет = &Предмет)
	|
	|УПОРЯДОЧИТЬ ПО
	|	Отправляли УБЫВ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	СтруктураВозврата = Новый Структура("ЕстьПисьма, Отправляли");
	Если Выборка.Следующий() Тогда
		СтруктураВозврата.ЕстьПисьма	= Истина;
		СтруктураВозврата.Отправляли	= Выборка.Отправляли;
	Иначе
		СтруктураВозврата.ЕстьПисьма	= Ложь;
		СтруктураВозврата.Отправляли	= Ложь;
	КонецЕсли;
	
	Возврат СтруктураВозврата;
	
КонецФункции

&НаСервере
Процедура УстановитьОтборСписка(СписокОтбора, ИмяПоляОтбора, ЗначениеОтбора)

	СписокОтбора.Отбор.Элементы.Очистить();
	НовыйЭлементОтбора = СписокОтбора.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));

	НовыйЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ИмяПоляОтбора);
	НовыйЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	НовыйЭлементОтбора.Использование  = Истина;
	НовыйЭлементОтбора.ПравоеЗначение = ЗначениеОтбора;

КонецПроцедуры// УстановитьОтборСписка(СписокОтбора, ИмяПоляОтбора, ЗначениеОтбора)	

&НаСервере
Функция СформироватьТаблицуПолучателей()
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатРассылкаЭлектронныхПисем_уэПолучатели.НомерСтроки,
	|	ВЫБОР
	|		КОГДА уатРассылкаЭлектронныхПисем_уэПолучатели.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|			ТОГДА уатРассылкаЭлектронныхПисем_уэПолучатели.КонтактноеЛицо
	|		ИНАЧЕ уатРассылкаЭлектронныхПисем_уэПолучатели.Контрагент
	|	КОНЕЦ КАК Контакт,
	|	уатРассылкаЭлектронныхПисем_уэПолучатели.Контрагент,
	|	уатРассылкаЭлектронныхПисем_уэПолучатели.КонтактноеЛицо,
	|	уатРассылкаЭлектронныхПисем_уэПолучатели.Адрес,
	|	уатРассылкаЭлектронныхПисем_уэПолучатели.ПредставлениеАдреса,
	|	уатРассылкаЭлектронныхПисем_уэПолучатели.Ссылка КАК Рассылка,
	|	уатРассылкаЭлектронныхПисем_уэПолучатели.Ссылка.Основание КАК Тендер,
	|	&СтрокаВыборкиТендерНомер КАК ТендерНомер,
	|	&СтрокаВыборкиТендерДата КАК ТендерДата,
	|	уатРассылкаЭлектронныхПисем_уэПолучатели.Ссылка.Организация КАК Организация,
	|	уатРассылкаЭлектронныхПисем_уэПолучатели.Ссылка.Организация.Наименование КАК ОрганизацияНаименование
	|ИЗ
	|	Документ.уатРассылкаЭлектронныхПисем_уэ.Получатели КАК уатРассылкаЭлектронныхПисем_уэПолучатели
	|ГДЕ
	|	уатРассылкаЭлектронныхПисем_уэПолучатели.Ссылка.Ссылка = &Ссылка";
	
	Если ПравоДоступа("Просмотр", Метаданные.Документы.уатТендер_уэ) Тогда 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СтрокаВыборкиТендерНомер", "уатРассылкаЭлектронныхПисем_уэПолучатели.Ссылка.Основание.Номер");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СтрокаВыборкиТендерДата", "уатРассылкаЭлектронныхПисем_уэПолучатели.Ссылка.Основание.Дата");
	Иначе 
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СтрокаВыборкиТендерНомер", """""");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&СтрокаВыборкиТендерДата", "ДАТАВРЕМЯ(1,1,1)");
	КонецЕсли;
	
	Запрос.УстановитьПараметр("Ссылка",Объект.Ссылка);
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

&НаСервере
Функция СоздатьЗаполнитьЭлектронноеПисьмоИсходящее(СтрокаПолучателя)
	
	НовоеЭлектронноеПисьмо = Документы.ЭлектронноеПисьмоИсходящее.СоздатьДокумент();
	
	НовоеЭлектронноеПисьмо.Дата                      = ТекущаяДата();
	
	НовоеЭлектронноеПисьмо.УчетнаяЗапись			= Объект.УчетнаяЗапись;
	НовоеЭлектронноеПисьмо.ОтправительПредставление	= Объект.ОтправительПредставление;
	
	НовоеЭлектронноеПисьмо.Ответственный			= Объект.Ответственный;
	НовоеЭлектронноеПисьмо.Автор					= Пользователи.ТекущийПользователь();
	НовоеЭлектронноеПисьмо.Тема						= ВернутьТему(СтрокаПолучателя);
	НовоеЭлектронноеПисьмо.СтатусПисьма				= Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Черновик;
	
	НовоеЭлектронноеПисьмо.Кодировка				= "utf-8";
	НовоеЭлектронноеПисьмо.Важность 				= Перечисления.ВариантыВажностиВзаимодействия.Обычная;
	
	ИтоговыйТекстПисьма = СформироватьТекстПисьмаПолучателю(СтрокаПолучателя);
	НовоеЭлектронноеПисьмо.ТекстHTML				= ИтоговыйТекстПисьма;
	НовоеЭлектронноеПисьмо.ТипТекста                = Перечисления.ТипыТекстовЭлектронныхПисем.HTML;
	
	НовоеЭлектронноеПисьмо.СписокПолучателейПисьма = СтрокаПолучателя.ПредставлениеАдреса;
	
	НоваяСтрокаПолучателей = НовоеЭлектронноеПисьмо.ПолучателиПисьма.Добавить();
	
	НоваяСтрокаПолучателей.Адрес         = СтрокаПолучателя.Адрес;
	НоваяСтрокаПолучателей.Представление = СтрокаПолучателя.КонтактноеЛицо;
	НоваяСтрокаПолучателей.Контакт       = СтрокаПолучателя.Контрагент;
	
	НовоеЭлектронноеПисьмо.ЕстьВложения = Объект.ЕстьВложения;
	
	Возврат НовоеЭлектронноеПисьмо;
	
КонецФункции

&НаСервере
Функция СформироватьПисьмаНаСервере()
	
	НачатьТранзакцию();
	Попытка
		СоздалиХотьОдноПисьмо = Ложь;
		ТабПолучателей = СформироватьТаблицуПолучателей();
		
		Для Каждого СтрокаПолучателя Из ТабПолучателей Цикл
			Если ЗначениеЗаполнено(СтрокаПолучателя.Адрес) Тогда
				
				НовоеЭлектронноеПисьмо = СоздатьЗаполнитьЭлектронноеПисьмоИсходящее(СтрокаПолучателя);
				НовоеЭлектронноеПисьмо.Записать();
				
				СоздатьЗаписьПредметВзаимодействия(НовоеЭлектронноеПисьмо.Ссылка, Объект.Ссылка);
				СкопироватьПрисоединенныеФайлы(НовоеЭлектронноеПисьмо.Ссылка);
				
				СоздалиХотьОдноПисьмо = Истина;
			КонецЕсли;
		КонецЦикла;
		
		ЗафиксироватьТранзакцию();
		
		УстановитьОтборСписка(СписокПисем, "Предмет", Объект.Ссылка);
		
		Возврат СоздалиХотьОдноПисьмо;
	Исключение
		ОтменитьТранзакцию();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ПодробноеПредставлениеОшибки(ИнформацияОбОшибке()));
		ЕстьОшибки = Истина;
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции

&НаСервере
Процедура СкопироватьПрисоединенныеФайлы(ДокументЭлектронноеПисьмо)
	
	ЗапросПФрассылка = Новый Запрос();
	ЗапросПФрассылка.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатРассылкаЭлектронныхПисем_уэПрисоединенныеФайлы.Ссылка,
	|	уатРассылкаЭлектронныхПисем_уэПрисоединенныеФайлы.Наименование,
	|	уатРассылкаЭлектронныхПисем_уэПрисоединенныеФайлы.Автор,
	|	уатРассылкаЭлектронныхПисем_уэПрисоединенныеФайлы.ДатаМодификацииУниверсальная,
	|	уатРассылкаЭлектронныхПисем_уэПрисоединенныеФайлы.ДатаСоздания,
	|	уатРассылкаЭлектронныхПисем_уэПрисоединенныеФайлы.Зашифрован,
	|	уатРассылкаЭлектронныхПисем_уэПрисоединенныеФайлы.Изменил,
	|	уатРассылкаЭлектронныхПисем_уэПрисоединенныеФайлы.ИндексКартинки,
	|	уатРассылкаЭлектронныхПисем_уэПрисоединенныеФайлы.Описание,
	|	уатРассылкаЭлектронныхПисем_уэПрисоединенныеФайлы.ПодписанЭП,
	|	уатРассылкаЭлектронныхПисем_уэПрисоединенныеФайлы.ПутьКФайлу,
	|	уатРассылкаЭлектронныхПисем_уэПрисоединенныеФайлы.Размер,
	|	уатРассылкаЭлектронныхПисем_уэПрисоединенныеФайлы.Расширение,
	|	уатРассылкаЭлектронныхПисем_уэПрисоединенныеФайлы.Редактирует,
	|	уатРассылкаЭлектронныхПисем_уэПрисоединенныеФайлы.СтатусИзвлеченияТекста,
	|	уатРассылкаЭлектронныхПисем_уэПрисоединенныеФайлы.ТекстХранилище,
	|	уатРассылкаЭлектронныхПисем_уэПрисоединенныеФайлы.ТипХраненияФайла,
	|	уатРассылкаЭлектронныхПисем_уэПрисоединенныеФайлы.Том,
	|	уатРассылкаЭлектронныхПисем_уэПрисоединенныеФайлы.ФайлХранилище,
	|	уатРассылкаЭлектронныхПисем_уэПрисоединенныеФайлы.ИДФайлаЭлектронногоПисьма
	|ИЗ
	|	&ИмяТаблицыПрисоединенныхФайлов КАК уатРассылкаЭлектронныхПисем_уэПрисоединенныеФайлы
	|ГДЕ
	|	уатРассылкаЭлектронныхПисем_уэПрисоединенныеФайлы.ВладелецФайла = &ВладелецФайла
	|	И НЕ уатРассылкаЭлектронныхПисем_уэПрисоединенныеФайлы.ПометкаУдаления";
	
	Если ЗначениеЗаполнено(Объект.ШаблонСообщения) Тогда 
		ЗапросПФрассылка.УстановитьПараметр("ВладелецФайла", Объект.ШаблонСообщения);
		ЗапросПФрассылка.Текст = СтрЗаменить(ЗапросПФрассылка.Текст, "&ИмяТаблицыПрисоединенныхФайлов", "Справочник.ШаблоныСообщенийПрисоединенныеФайлы");
	Иначе 
		ЗапросПФрассылка.УстановитьПараметр("ВладелецФайла", Объект.Ссылка);
		ЗапросПФрассылка.Текст = СтрЗаменить(ЗапросПФрассылка.Текст, "&ИмяТаблицыПрисоединенныхФайлов", "Справочник.уатРассылкаЭлектронныхПисем_уэПрисоединенныеФайлы");
	КонецЕсли;
	
	ВыборкаПФрассылка = ЗапросПФрассылка.Выполнить().Выбрать();
	
	Пока ВыборкаПФрассылка.Следующий() Цикл
		
		ПараметрыФайла = РаботаСФайлами.ПараметрыДобавленияФайла();
		ПараметрыФайла.Автор                       = ВыборкаПФрассылка.Автор;
		ПараметрыФайла.ВладелецФайлов              = ДокументЭлектронноеПисьмо;
		ПараметрыФайла.ИмяБезРасширения            = ВыборкаПФрассылка.Наименование;
		ПараметрыФайла.РасширениеБезТочки          = ВыборкаПФрассылка.Расширение;
		ПараметрыФайла.ВремяИзмененияУниверсальное = ВыборкаПФрассылка.ДатаМодификацииУниверсальная;
		АдресФайлаВоВременномХранилище = ПоместитьВоВременноеХранилище(РаботаСФайлами.ДвоичныеДанныеФайла(ВыборкаПФрассылка.Ссылка));
		РаботаСФайлами.ДобавитьФайл(ПараметрыФайла, АдресФайлаВоВременномХранилище,, ВыборкаПФрассылка.Описание);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьНеОтправленныеПисьмаИОтправить()
	
	Если Не ИспользуетсяПочтовыйКлиент() Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЭлектронноеПисьмоИсходящее.Ссылка
	|ИЗ
	|	Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
	|		ПО ЭлектронноеПисьмоИсходящее.Ссылка = ПредметыПапкиВзаимодействий.Взаимодействие
	|			И (ПредметыПапкиВзаимодействий.Предмет = &Ссылка)
	|ГДЕ
	|	НЕ ЭлектронноеПисьмоИсходящее.СтатусПисьма = ЗНАЧЕНИЕ(Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Отправлено)
	|	И НЕ ЭлектронноеПисьмоИсходящее.ПометкаУдаления";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ПисьмоОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ПисьмоОбъект.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Исходящее;
		ПисьмоОбъект.Записать();
	КонецЦикла;
	
	УправлениеЭлектроннойПочтой.ПолучениеИОтправкаЭлектронныхПисем();
	ОбновитьСтатусОтправленныхПисемНаСервере();
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьАдресаПолучателей()
	
	Флаг = Истина;
	
	Для Каждого СтрокаТЧ Из Объект.Получатели Цикл
		РезультатПроверки = АнализАдресаЭП(СокрЛП(СтрокаТЧ.Адрес));
		Если РезультатПроверки.КодОшибки <> 0 Тогда
			Флаг = Ложь;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверки.Сообщение, , "Объект.Получатели["
				+ Формат(СтрокаТЧ.НомерСтроки - 1, "ЧН=0; ЧГ=0") + "].Адрес");
		КонецЕсли;
	КонецЦикла;
	
	Возврат Флаг;
	
КонецФункции

&НаСервере
Процедура УдалитьКонтактыБезАдреса(ИмяТаблицы = "Получатели")
	
	Индекс = 0;
	Пока Индекс <= Объект[ИмяТаблицы].Количество()-1 Цикл
		Если Не ЗначениеЗаполнено(Объект[ИмяТаблицы][Индекс].Адрес) Тогда
			Объект[ИмяТаблицы].Удалить(Индекс);
			Модифицированность = Истина;
			Продолжить;
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УдалитьКонтактыСОдинаковымиАдресами(ИмяТаблицы = "Получатели")
	
	ТабТЧ = Объект[ИмяТаблицы].Выгрузить();
	Индекс = 0;
	Пока Индекс <= Объект[ИмяТаблицы].Количество()-1 Цикл
		Если ЗначениеЗаполнено(Объект[ИмяТаблицы][Индекс].Адрес) Тогда
			МассивСтрок = ТабТЧ.НайтиСтроки(Новый Структура("Адрес", Объект[ИмяТаблицы][Индекс].Адрес));
			Если МассивСтрок.Количество() > 1 Тогда
				Объект[ИмяТаблицы].Удалить(Индекс);
				Модифицированность = Истина;
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Индекс = Индекс + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьОформлениеЭлемента(ЭлементДляПоиска, ИмяЭлемента)
	
	Для Каждого ОформлениеЭлемента Из ЭлементДляПоиска.Оформление.Элементы Цикл
		Если ОформлениеЭлемента.Параметр = Новый ПараметрКомпоновкиДанных(ИмяЭлемента) Тогда
			Возврат ОформлениеЭлемента;
		КонецЕсли;
	КонецЦикла;
	Возврат Неопределено;
	
КонецФункции

&НаСервере
Процедура УдалитьЭлементыОформленияКонтактовСОдинаковымиАдресами(ИмяТаблицы = "Получатели")
	// "Аккуратный" поиск и удаление созданных программно оформлений для поля -
	// на случай, если у формы есть другие условные оформления - их трогать нельзя.
	МассивЭлементовДляУдаления = Новый Массив();
	Для Каждого ЭлементОформления Из УсловноеОформление.Элементы Цикл
		Если ЭлементОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный Тогда
			Если	ЭлементОформления.Поля.Элементы.Количество() <> 1
				Или	ЭлементОформления.Поля.Элементы[0].Поле <> Новый ПолеКомпоновкиДанных(ИмяТаблицы) Тогда
				//
				Продолжить;
			КонецЕсли;
			
			ОформлениеЭлемента = ПолучитьОформлениеЭлемента(ЭлементОформления, "ЦветФона");
			Если ОформлениеЭлемента = Неопределено Тогда Продолжить; КонецЕсли;
			
			Если	ЭлементОформления.Отбор.Элементы.Количество() <> 1
				Или	ТипЗнч(ЭлементОформления.Отбор.Элементы[0]) <> Тип("ЭлементОтбораКомпоновкиДанных")
				Или	ЭлементОформления.Отбор.Элементы[0].ЛевоеЗначение <> Новый ПолеКомпоновкиДанных("Объект." + ИмяТаблицы + ".ИдентификаторОформления")
				Или	ТипЗнч(ЭлементОформления.Отбор.Элементы[0].ПравоеЗначение) <> Тип("Строка") Тогда
				//
				Продолжить;
			КонецЕсли;
			
			Если Найти(ЭлементОформления.Отбор.Элементы[0].ПравоеЗначение, "_Ид_Оформления_") > 0 Тогда
				МассивЭлементовДляУдаления.Добавить(ЭлементОформления);
			КонецЕсли;
			
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементДляУдаления Из МассивЭлементовДляУдаления Цикл
		Попытка УсловноеОформление.Элементы.Удалить(ЭлементДляУдаления);
		Исключение КонецПопытки;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВыделитьКонтактыСОдинаковымиАдресами(ИмяТаблицы = "Получатели")
	УдалитьЭлементыОформленияКонтактовСОдинаковымиАдресами(ИмяТаблицы);
	
	Для Каждого СтрокаТаблицы Из Объект[ИмяТаблицы] Цикл
		СтрокаТаблицы.ИдентификаторОформления = "";
	КонецЦикла;
	
	МассивЦветов = Новый Массив();
	МассивЦветов.Добавить(Новый Цвет(216,218,154));
	МассивЦветов.Добавить(Новый Цвет(218,195,154));
	МассивЦветов.Добавить(Новый Цвет(218,172,154));
	МассивЦветов.Добавить(Новый Цвет(218,154,156));
	МассивЦветов.Добавить(Новый Цвет(218,154,180));
	МассивЦветов.Добавить(Новый Цвет(196,154,218));
	МассивЦветов.Добавить(Новый Цвет(154,162,218));
	МассивЦветов.Добавить(Новый Цвет(154,192,218));
	МассивЦветов.Добавить(Новый Цвет(148,218,228));
	
	УжеПроверенныеАдреса = Новый Массив();
	ТекущийИндексИдентификатораОформления = 0;
	ТекущийИндексСдвига = 0;
	Для Каждого СтрокаТаблицы Из Объект[ИмяТаблицы] Цикл
		ТекАдрес = СтрокаТаблицы.Адрес;
		Если Не ЗначениеЗаполнено(ТекАдрес) Тогда Продолжить; КонецЕсли;
		Если УжеПроверенныеАдреса.Найти(ТекАдрес) <> Неопределено Тогда Продолжить; КонецЕсли;
		
		УжеПроверенныеАдреса.Добавить(ТекАдрес);
		
		НайденныеСтроки = Объект[ИмяТаблицы].НайтиСтроки(Новый Структура("Адрес", ТекАдрес));
		Если НайденныеСтроки.Количество() > 1 Тогда
			СтрИдентификаторОформления = "_Ид_Оформления_" + Формат(ТекущийИндексИдентификатораОформления, "ЧН=0; ЧГ=");
			ТекущийИндексЦвета = Мин(ТекущийИндексИдентификатораОформления, МассивЦветов.ВГраница());
			ТекущийИндексИдентификатораОформления = ТекущийИндексИдентификатораОформления + 1;
			
			ЭлементОформления = УсловноеОформление.Элементы.Добавить();
			ЭлементОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
			ЭлементОформления.Использование = Истина;
			
			ОформлениеЭлемента = ПолучитьОформлениеЭлемента(ЭлементОформления, "ЦветФона");
			ОформлениеЭлемента.Использование = Истина;
			ОформлениеЭлемента.Значение = МассивЦветов[ТекущийИндексЦвета];
			
			НовоеПоле = ЭлементОформления.Поля.Элементы.Добавить();
			НовоеПоле.Поле = Новый ПолеКомпоновкиДанных(ИмяТаблицы);
			НовоеПоле.Использование = Истина;
			
			НовыйЭлементОтбора = ЭлементОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Объект." + ИмяТаблицы + ".ИдентификаторОформления");
			НовыйЭлементОтбора.ПравоеЗначение = СтрИдентификаторОформления;
			НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			НовыйЭлементОтбора.Использование = Истина;
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				НайденнаяСтрока.ИдентификаторОформления = СтрИдентификаторОформления;
				
				ИндексСтроки = Объект[ИмяТаблицы].Индекс(НайденнаяСтрока);
				Если ИндексСтроки > ТекущийИндексСдвига Тогда
					Объект[ИмяТаблицы].Сдвинуть(ИндексСтроки, ТекущийИндексСдвига - ИндексСтроки);
					ТекущийИндексСдвига = ТекущийИндексСдвига + 1;
				Иначе
					ТекущийИндексСдвига = ИндексСтроки + 1;
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатусОтправленныхПисемНаСервере()
	КоличествоВсего = 0;
	КоличествоОтправлено = 0;
	
	Если Не Объект.Ссылка.Пустая() Тогда
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СУММА(ВЫБОР
		|			КОГДА ЭлектронноеПисьмоИсходящее.СтатусПисьма = ЗНАЧЕНИЕ(Перечисление.СтатусыИсходящегоЭлектронногоПисьма.Отправлено)
		|				ТОГДА 1
		|			ИНАЧЕ 0
		|		КОНЕЦ) КАК Отправлено,
		|	СУММА(1) КАК Всего
		|ИЗ
		|	Документ.ЭлектронноеПисьмоИсходящее КАК ЭлектронноеПисьмоИсходящее
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ПредметыПапкиВзаимодействий КАК ПредметыПапкиВзаимодействий
		|		ПО ЭлектронноеПисьмоИсходящее.Ссылка = ПредметыПапкиВзаимодействий.Взаимодействие
		|			И (ПредметыПапкиВзаимодействий.Предмет = &Ссылка)
		|ГДЕ
		|	НЕ ЭлектронноеПисьмоИсходящее.ПометкаУдаления";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если Выборка.Всего <> Null Тогда
				КоличествоВсего			= Выборка.Всего;
				КоличествоОтправлено	= Выборка.Отправлено;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Элементы.ДекорацияСтатусОтправленныхПисем.Заголовок =
		"" + Формат(КоличествоОтправлено, "ЧН=0; ЧГ=")
		+ " " + НСтр("en='from';ru='из'")
		+ " " + Формат(КоличествоВсего, "ЧН=0; ЧГ=")
		+ НСтр("en=' letters';ru=' писем'");
	//
КонецПроцедуры

&НаСервере
Функция ПроверитьЧтоУчетнаяЗаписьИспользуетсяДляОтправки(УчетнаяЗапись)
	Возврат УчетнаяЗапись.ИспользоватьДляОтправки;
КонецФункции

&НаСервере
// Процедура заполняет надпись представление вложений.
//
// Параметры:
//	Нет.
//
Процедура СформироватьПредставлениеВложений()
	Если ВсегдаПоказыватьВложения Тогда
		Элементы.ВложенияПредставление.Видимость = Ложь;
		Если НЕ Элементы.Вложения.Видимость Тогда
			Элементы.Вложения.Видимость = Истина;
		КонецЕсли;			
		Возврат;
	КонецЕсли;		
		
	Если Элементы.Вложения.Видимость Тогда
		ВложенияПредставление	= НСтр("en='roll attachments';ru='свернуть вложения'");
		Элементы.ВложенияПредставление.Видимость = Ложь;		
	Иначе	
		ВложенияПредставление = "";
		Элементы.ВложенияПредставление.Видимость = Истина;
		Для Каждого ЭлементТаблицы Из Вложения Цикл
			Если НЕ ВсеВложенияПометка И ЭлементТаблицы.ИдентификаторПочтовогоВложения = "#" Тогда
				ВложенияПредставление = ВложенияПредставление + "; " + ЭлементТаблицы.ИмяФайла + "(" + ЭлементТаблицы.РазмерСтрокой + ")";
			ИначеЕсли ВсеВложенияПометка Тогда
				ВложенияПредставление = ВложенияПредставление + "; " + ЭлементТаблицы.ИмяФайла + "(" + ЭлементТаблицы.РазмерСтрокой + ")";
			КонецЕсли;
		КонецЦикла;
		Если ПустаяСтрока(ВложенияПредставление) Тогда
			ВложенияПредставление = НСтр("en='Add file ...';ru='Добавить файл...'");
			Элементы.ВложенияПредставление.Видимость = Истина;			
		Иначе
			ВложенияПредставление = Сред(ВложенияПредставление, 3);
			Элементы.ВложенияПредставление.Видимость = Истина;			
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры // СформироватьПредставлениеВложений()	

&НаСервереБезКонтекста
Функция ПолучитьОписаниеТиповПрисоединенныхФайлов()
	МассивТипов = Новый Массив();
	Для Каждого СправочникМд Из Метаданные.Справочники Цикл
		Если Прав(СправочникМд.Имя, 19) = "ПрисоединенныеФайлы" Тогда
			МассивТипов.Добавить(Тип("СправочникСсылка." + СправочникМд.Имя));
		КонецЕсли;
	КонецЦикла;
	Возврат Новый ОписаниеТипов(МассивТипов);
КонецФункции

&НаКлиенте
Функция ПеретаскиваетсяФайл(ЗначениеПеретаскивания)
	Если	(ТипЗнч(ЗначениеПеретаскивания) = Тип("Файл") И ЗначениеПеретаскивания.ЭтоФайл())
		Или	(ТипЗнч(ЗначениеПеретаскивания) = Тип("Массив") И ЗначениеПеретаскивания.Количество() > 0 И ТипЗнч(ЗначениеПеретаскивания[0]) = Тип("Файл") И ЗначениеПеретаскивания[0].ЭтоФайл()) Тогда
		
		Возврат Истина;
		
	Иначе
		
		Если ТипЗнч(ЗначениеПеретаскивания) = Тип("Файл") Тогда
			Если Не ЗначениеПеретаскивания.ЭтоФайл() Тогда
				Возврат Неопределено;
			КонецЕсли;
		КонецЕсли;
		Если ТипЗнч(ЗначениеПеретаскивания) = Тип("Массив") И ЗначениеПеретаскивания.Количество() > 0 И ТипЗнч(ЗначениеПеретаскивания[0]) = Тип("Файл") И Не ЗначениеПеретаскивания[0].ЭтоФайл() Тогда
			Возврат Неопределено;
		КонецЕсли;
		
		Возврат Ложь;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьПрисоединенныйФайлПеретаскиванием(МассивФайловИлиФайл)
	Если ТипЗнч(МассивФайловИлиФайл) = Тип("Массив") Тогда
		МассивФайлов = МассивФайловИлиФайл;
	Иначе
		МассивФайлов = Новый Массив();
		МассивФайлов.Добавить(МассивФайловИлиФайл);
	КонецЕсли;
	
	ЗагружаемыеФайлы = Новый Массив();
	Для Каждого ЭлементМассива Из МассивФайлов Цикл
		Если Не ПеретаскиваетсяФайл(ЭлементМассива) = Истина Тогда
			Продолжить;
		КонецЕсли;
		
		ОписаниеФайла = Новый ОписаниеПередаваемогоФайла(ЭлементМассива.ПолноеИмя);
		ЗагружаемыеФайлы.Добавить(ОписаниеФайла);
	КонецЦикла;
	
	Если ЗагружаемыеФайлы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещение = Новый ОписаниеОповещения("ПослеВыбораФайлов", ЭтотОбъект);
	
	ПараметрыЗагрузкиФайла = ФайловаяСистемаКлиент.ПараметрыЗагрузкиФайла();
	ПараметрыЗагрузкиФайла.Интерактивно = Ложь;
	ПараметрыЗагрузкиФайла.ИдентификаторФормы = ЭтотОбъект.УникальныйИдентификатор;
	ФайловаяСистемаКлиент.ЗагрузитьФайлы(ОписаниеОповещение, ПараметрыЗагрузкиФайла, ЗагружаемыеФайлы);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьЗаписьПредметВзаимодействия(ЭлектронноеПисьмоСсылка, ПредметСсылка)
	
	НаборЗаписей = РегистрыСведений.ПредметыПапкиВзаимодействий.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Взаимодействие.Установить(ЭлектронноеПисьмоСсылка);
	
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() Тогда 
		Запись = НаборЗаписей[0];
	Иначе 
		Запись = НаборЗаписей.Добавить();
	КонецЕсли;
	
	Запись.Взаимодействие = ЭлектронноеПисьмоСсылка;
	Запись.Предмет        = ПредметСсылка;
	
	НаборЗаписей.Записать(Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСвойстваЭлементовФормы()
	
	Элементы.ФормаСформироватьПисьма.Доступность = НЕ ТолькоПросмотр;
	
	Элементы.СтраницаПолучателей.Видимость			= НЕ CRM_Отправляли;
	Элементы.СтраницаПисем.Видимость				= CRM_ЕстьПисьма;
	Элементы.СтраницаНеОтправленныеПисьма.Видимость	= CRM_ЕстьПисьма;
	Элементы.ИнформационнаяНадпись.Видимость		= Объект.ЕстьИзменения И НЕ CRM_Отправляли;
	Элементы.СтраницаНеОтправленныеПисьма.Видимость	= CRM_ЕстьПисьма;
	Элементы.ИнформационнаяНадпись.Видимость		= Объект.ЕстьИзменения И НЕ CRM_Отправляли;
	
	Элементы.ФормаСформироватьПисьма.Доступность	= НЕ CRM_Отправляли И (Объект.ЕстьИзменения 
													  ИЛИ НЕ CRM_ЕстьПисьма 
													  ИЛИ CRM_ИзмененСоставПолучателей
													  ИЛИ CRM_ИзмененыВложения
													  ИЛИ CRM_ИзмененОтправитель
													  ИЛИ CRM_ИзмененоСодержаниеРассылки
													  ИЛИ CRM_ИзмененаТема);
	Если CRM_ЕстьПисьма Тогда
		Элементы.ФормаСформироватьПисьма.Заголовок	= НСтр("en='Reform letters';ru='Переформировать письма'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюПодтвержениеПереформироватьПисьма(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда 
		Объект.ЕстьИзменения   = Ложь;
		CRM_ПеренестиИзменения = Истина;
	Иначе 
		Объект.ЕстьИзменения = Истина;
	КонецЕсли;
	
	Записать(Новый Структура("ОтветПолучен"));
	
КонецПроцедуры

&НаСервере
Функция ДобавитьВТаблицуСоответствийИменВложенийИдентификаторамКартинкиИзИнтернета(ПереданныйТекстHTML)
	
	ДокументHTML = Взаимодействия.ПолучитьОбъектДокументHTMLИзТекстаHTML(ПереданныйТекстHTML);
	
	Для каждого Картинка Из ДокументHTML.Картинки Цикл
		
		АтрибутИсточникКартинки = Картинка.Атрибуты.ПолучитьИменованныйЭлемент("src");
		Если АтрибутИсточникКартинки = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если СтрЧислоВхождений(АтрибутИсточникКартинки.ТекстовоеСодержимое, "://") > 0 Тогда
			РезультатСкаченногоФайла = ПолучениеФайловИзИнтернета.СкачатьФайлВоВременноеХранилище(АтрибутИсточникКартинки.ТекстовоеСодержимое);
			
			Если НЕ РезультатСкаченногоФайла = Неопределено И РезультатСкаченногоФайла.Статус Тогда
				НоваяКартинка = Новый Картинка(ПолучитьИзВременногоХранилища(РезультатСкаченногоФайла.Путь));
				
				НоваяСтрока = ТаблицаСоответствийИменВложенийИдентификаторам.Добавить();
				НоваяСтрока.ИмяФайла = АтрибутИсточникКартинки.ТекстовоеСодержимое;
				НоваяСтрока.ИдентификаторФайлаДляHTML = Новый УникальныйИдентификатор;
				НоваяСтрока.Картинка = НоваяКартинка;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

&НаКлиенте
Процедура ПодтверждениеОчисткиПолучателейПриВыборе(РезультатВопроса, ВыбранноеЗначение) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда 
		Объект.Получатели.Очистить();
		ОбработкаВыбораНаСервере(ВыбранноеЗначение);
		
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда 
		ОбработкаВыбораНаСервере(ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВыбранноеЗначение(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		
			ТекДанные = Объект.Получатели.Добавить();
			ТекДанные.Контрагент = ВыбранноеЗначение;
			ТекДанные.КонтактноеЛицо = ВернутьКЛКонтрагента(ТекДанные.Контрагент);
			СписокАдресов = СформироватьСписокАдресов(Новый Структура("Контрагент, КонтактноеЛицо",ТекДанные.Контрагент,ТекДанные.КонтактноеЛицо));
			Если СписокАдресов.Количество() > 0 Тогда
				Адрес = СписокАдресов[0].Значение;
				Если НЕ Адрес.Количество() = 0 Тогда
					ТекДанные.Адрес					= Адрес.Представление;
					ТекДанные.ПредставлениеАдреса	= ?(Адрес.Объект = ТекДанные.Контрагент,Строка(ТекДанные.Контрагент),Строка(ТекДанные.КонтактноеЛицо)) + " <" + Адрес.Представление + ">";
				Иначе
					ТекДанные.Адрес					= "";
					ТекДанные.ПредставлениеАдреса	= "";
				КонецЕсли;
			Иначе
				ТекДанные.Адрес					= "";
				ТекДанные.ПредставлениеАдреса	= "";
			КонецЕсли;
			
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьАдресаКлиенты(КонтактСсылка = Неопределено)
	Если ЗначениеЗаполнено(КонтактСсылка) Тогда
		Если ТипЗнч(КонтактСсылка) = Тип("СправочникСсылка.Контрагенты") Тогда
			ИтераторСтрок = Объект.Получатели.НайтиСтроки(Новый Структура("Контрагент", КонтактСсылка));
		ИначеЕсли ТипЗнч(КонтактСсылка) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
			ИтераторСтрок = Объект.Получатели.НайтиСтроки(Новый Структура("КонтактноеЛицо", КонтактСсылка));
		Иначе
			ИтераторСтрок = Объект.Получатели;
		КонецЕсли;
	Иначе
		ИтераторСтрок = Объект.Получатели;
	КонецЕсли;
	
	Для Каждого СтрокаТаблицы Из ИтераторСтрок Цикл
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Адрес) И ЗначениеЗаполнено(СтрокаТаблицы.Контрагент) Тогда
			СписокАдресов = СформироватьСписокАдресов(Новый Структура("Контрагент, КонтактноеЛицо",СтрокаТаблицы.Контрагент,СтрокаТаблицы.КонтактноеЛицо));
			Если СписокАдресов.Количество() > 0 Тогда
				Адрес = СписокАдресов[0].Значение;
				Если НЕ Адрес.Количество() = 0 Тогда
					СтрокаТаблицы.Адрес					= Адрес.Представление;
					СтрокаТаблицы.ПредставлениеАдреса	= ?(Адрес.Объект = СтрокаТаблицы.Контрагент,Строка(СтрокаТаблицы.Контрагент),Строка(СтрокаТаблицы.КонтактноеЛицо)) + " <" + Адрес.Представление + ">";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТабличнуюЧасть(ИмяТаблицы = "Получатели")
	
	Если Объект[ИмяТаблицы].Количество() > 0 Тогда
		ТекстВопроса = НСтр("en='Tabular section contains records. Continue?';ru='Табличная часть содержит записи. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ОчиститьТабличнуюЧастьПослеПодтверждения", ЭтотОбъект, ИмяТаблицы);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТабличнуюЧастьПослеПодтверждения(РезультатВопроса, ИмяТаблицы) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;
	
	Объект[ИмяТаблицы].Очистить();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура НастроитьВидимостьИДоступностьФормы(Форма)
	
	Форма.Элементы.Вложения.Видимость = Ложь;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИспользуетсяПочтовыйКлиент()
	
	Возврат ПолучитьФункциональнуюОпцию("ИспользоватьПочтовыйКлиент");
	
КонецФункции // ИспользуетсяПочтовыйКлиент()

&НаКлиенте
Процедура ОтправитьПисьма()
	
	Если Не ИспользуетсяПочтовыйКлиент() Тогда
		ПоказатьПредупреждение(, НСтр("en='Use of mail client is disabled, sending emails is impossible.';ru='Использование почтового клиента отключено, отправка писем невозможна.'"));
		Возврат;
	КонецЕсли;
	
	Если НЕ CRM_ЕстьПисьма Тогда
		Если (Объект.Получатели.Количество() > 0) И ПроверитьАдресаПолучателей() Тогда
			Состояние(НСтр("en='Forming of e-mails. Please wait...';ru='Выполняется формирование электронных писем. Пожалуйста подождите...'"));
			
			Если СформироватьПисьмаНаСервере() Тогда
				Состояние(НСтр("en='Formation of the e-mails is completed.';ru='Формирование электронных писем завершено.'"));
				CRM_ЕстьПисьма = Истина;
				УстановитьСвойстваЭлементовФормы();
				ОбновитьИнтерфейс();
				Элементы.Панель.ТекущаяСтраница = Элементы.СтраницаПисем;
				Элементы.СписокПисем.Обновить();
				Состояние(НСтр("en='Sending messages. Please wait...';ru='Выполняется отправка писем. Пожалуйста подождите...'"));
				ПолучитьНеОтправленныеПисьмаИОтправить();
				CRM_Отправляли = Истина;
			КонецЕсли;
			
		ИначеЕсли Объект.Получатели.Количество() = 0 Тогда
			ЕстьОшибки = Истина;
			ТекстНСТР = НСтр("en='Not specified recipients!';ru='Не указаны получатели!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		Иначе
			ЕстьОшибки = Истина;
		КонецЕсли;
	Иначе
		Состояние(НСтр("en='Sending messages. Please wait...';ru='Выполняется отправка писем. Пожалуйста подождите...'"));
		ПолучитьНеОтправленныеПисьмаИОтправить();
		ОбновитьИнтерфейс();
		Элементы.СписокПисем.Обновить();
		CRM_Отправляли = Истина;
	КонецЕсли;
	
	УстановитьСвойстваЭлементовФормы();
	Если CRM_ЕстьПисьма Тогда
		ОбновитьИнтерфейс();
		Элементы.СписокПисем.Обновить();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложение()
	
	ОписаниеОповещение = Новый ОписаниеОповещения("ПослеВыбораФайлов", ЭтотОбъект);
	
	ПараметрыЗагрузкиФайла = ФайловаяСистемаКлиент.ПараметрыЗагрузкиФайла();
	ПараметрыЗагрузкиФайла.ИдентификаторФормы = ЭтотОбъект.УникальныйИдентификатор;
	ФайловаяСистемаКлиент.ЗагрузитьФайлы(ОписаниеОповещение, ПараметрыЗагрузкиФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеВыбораФайлов(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ВыбранныйФайл Из ВыбранныеФайлы Цикл
		
		ИмяФайла                   = "";
		РасширениеФайла            = ОбщегоНазначенияКлиентСервер.ПолучитьРасширениеИмениФайла(ВыбранныйФайл.Имя);
		ПолучитьКаталогИИмяФайла(ВыбранныйФайл.Имя, "", ИмяФайла);

		новСтр						= Вложения.Добавить();
		новСтр.Расположение			= 4;
		новСтр.ИмяФайла				= ИмяФайла;
		новСтр.ИмяФайлаНаКомпьютере	= ВыбранныйФайл.Хранение;
		новСтр.ИндексКартинки		= РаботаСФайламиСлужебныйКлиентСервер.ПолучитьИндексПиктограммыФайла(РасширениеФайла);
		новСтр.ИдентификаторПочтовогоВложения = "#";
		
	КонецЦикла;
	
	Модифицированность = Истина;
	ОбновитьОтображениеДанных();
	СформироватьПредставлениеВложений();
	
КонецПроцедуры

// Получает каталог и имя файла для переданного полного имени файла.
//
// Параметры:
//  ПолноеИмяФайла  - Строка - полное имя файла, из которого будут получены имя каталога и имя файла.
//  ИмяКаталога     - Строка - в данную переменную будет помещено полученное имя каталога.
//  ИмяФайла        - Строка - в данную переменную будет помещено полученное имя файла.
//
&НаКлиентеНаСервереБезКонтекста
Процедура ПолучитьКаталогИИмяФайла(Знач ПолноеИмяФайла, ИмяКаталога, ИмяФайла)
	
	ИмяФайла = ПолноеИмяФайла;
	ИмяКаталога = "";
	
	Пока Истина Цикл
		
		Позиция = Макс(СтрНайти(ИмяФайла, "\"), СтрНайти(ИмяФайла, "/"));
		Если Позиция = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ИмяКаталога = ИмяКаталога + Лев(ИмяФайла, Позиция);
		ИмяФайла = Сред(ИмяФайла, Позиция+1);
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложениеВыполнить()
	
	ДобавитьВложение();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьВложениеВыполнить()
	
	текДанные = Элементы.Вложения.ТекущиеДанные;
	Если текДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если (текДанные.Расположение = 0) ИЛИ (текДанные.Расположение = 1) Тогда
		УправлениеЭлектроннойПочтойКлиент.ОткрытьВложение(текДанные.Ссылка, ЭтотОбъект);

	ИначеЕсли текДанные.Расположение = 2 Тогда
		#Если Не ВебКлиент Тогда
			ЗапуститьПриложение("""" + текДанные.ИмяФайлаНаКомпьютере + """");
		#КонецЕсли

	ИначеЕсли текДанные.Расположение = 4 Тогда
		
		#Если ВебКлиент Тогда
			
			Если Не РаботаСФайламиСлужебныйКлиент.РасширениеРаботыСФайламиПодключено() Тогда
				
				Возврат
				
			КонецЕсли;	
		
		#КонецЕсли	
		#Если Не ВебКлиент Тогда
		ДвоичныеДанныеФайла = ПолучитьИзВременногоХранилища(текДанные.ИмяФайлаНаКомпьютере);
			
		ДвоичныеДанныеФайла.Записать(КаталогВременныхФайлов() + текДанные.ИмяФайла);
			
		ЗапуститьПриложение("""" + КаталогВременныхФайлов() + текДанные.ИмяФайла + """");		
		#КонецЕсли
		//Если текДанные.Расположение = 3 Тогда
		//	
		//КонецЕсли;
		//ПолучитьФайл(текДанные.ИмяФайлаНаКомпьютере, текДанные.ИмяФайла, Истина);

	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеПрисоединенногоФайла(Ссылка, УникальныйИДФормы)
	
	Возврат РаботаСФайлами.ДанныеФайла(Ссылка, УникальныйИДФормы)
	
КонецФункции // ПолучитьДанныеПрисоединенногоФайла()

&НаКлиенте
Процедура СохранитьВложениеВыполнить()
	
	текДанные = Элементы.Вложения.ТекущиеДанные;
	Если текДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если (текДанные.Расположение = 0) ИЛИ (текДанные.Расположение = 1) Тогда
		Попытка
			ДанныеФайла = ПолучитьДанныеПрисоединенногоФайла(текДанные.Ссылка, УникальныйИдентификатор);
		Исключение
			ТекстНСТР = Нстр("en='This file format is not supported!';ru='Данный формат файлов не поддерживается!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
			Возврат;
		КонецПопытки;
		РасширениеВложения = ВРег(СокрЛП(ДанныеФайла.Расширение));
		Если РасширениеВложения = "EML" Тогда
			ПоказатьПредупреждение(,НСтр("en='This attachment could not be saved.';ru='Это вложение не может быть сохранено.'"));
			Возврат;
		КонецЕсли;
		РаботаСФайламиКлиент.СохранитьФайлКак(ДанныеФайла);
		
	ИначеЕсли текДанные.Расположение = 2 Тогда
		
	ИначеЕсли текДанные.Расположение = 4 Тогда
		
		ФайлВложения = Новый Файл(текДанные.ИмяФайла);
		
		РасширениеВложения = ?(ПустаяСтрока(ФайлВложения.Расширение), ФайлВложения.Расширение, Прав(ФайлВложения.Расширение, СтрДлина(ФайлВложения.Расширение)-1));
		
		Если РасширениеВложения = "EML" Тогда
			
			Оповещение = Новый ОписаниеОповещения("СохранитьВложениеВыполнитьОповещениеОЗавершение", ЭтотОбъект);
			ПоказатьПредупреждение(Оповещение,НСтр("en='This attachment could not be saved.';ru='Это вложение не может быть сохранено.'"));
			
		КонецЕсли;
		
		ОбщегоНазначенияКлиент.ПроверитьРасширениеРаботыСФайламиПодключено(Неопределено);
		
		Если РаботаСФайламиСлужебныйКлиент.РасширениеРаботыСФайламиПодключено() Тогда
			
			ВыборФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
			ВыборФайла.МножественныйВыбор = Ложь;
			ВыборФайла.ПолноеИмяФайла = текДанные.ИмяФайла;
			ВыборФайла.Расширение = РасширениеВложения;
			ВыборФайла.Фильтр = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("en='All files (*.%1)|*.%1';ru='Все файлы (*.%1)|*.%1'"), РасширениеВложения, РасширениеВложения);
			
			Если ВыборФайла.Выбрать() Тогда
				
				ТекстПояснения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
								НСтр("en='Saving the file ""%1"" ..."
"Please wait.';ru='Выполняется сохранение файла ""%1"" ..."
"Пожалуйста, подождите.'"), текДанные.ИмяФайла);
				
				Состояние(ТекстПояснения);
				
				ПолучаемыйФайл = Новый ОписаниеПередаваемогоФайла(ВыборФайла.ПолноеИмяФайла, текДанные.ИмяФайлаНаКомпьютере);
				ПолучаемыеФайлы = Новый Массив;
				ПолучаемыеФайлы.Добавить(ПолучаемыйФайл);
				
				ПолученныеФайлы = Новый Массив;
				
				НачатьПолучениеФайлов(
				Новый ОписаниеОповещения("ПриПолученииФайлаЗавершение",
				ЭтотОбъект,
				ПолученныеФайлы),
				ПолучаемыеФайлы,
				,
				Ложь);
				
			КонецЕсли;
			
		Иначе
	#Если ВебКлиент Тогда
			ПолучитьФайл(текДанные.ИмяФайлаНаКомпьютере, текДанные.ИмяФайла, Истина);
	#КонецЕсли
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПолученииФайлаЗавершение(ПолученныеФайлы, РезультатПолучения) Экспорт
	
	Если ТипЗнч(ПолученныеФайлы) <> Тип("Массив") Или ПолученныеФайлы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	//Состояние(НСтр("en='The file was successfully saved';ru='Файл успешно сохранен'"), , ПолученныеФайлы.ПолноеИмяФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВложениеВыполнитьОповещениеОЗавершение(ДополнительныеПараметры) Экспорт
	
	Возврат;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьВложениеВыполнить()

	ДобавитьВложениеВСписокУдаленных();
	
	текДанные = Элементы.Вложения.ТекущиеДанные;
	Если текДанные <> Неопределено Тогда
		Индекс = Вложения.Индекс(текДанные);
		Вложения.Удалить(Индекс);
		
		ОбновитьОтображениеДанных();
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьВложениеВСписокУдаленных()

	текДанные = Элементы.Вложения.ТекущиеДанные;
	Если (текДанные <> Неопределено) И (текДанные.Расположение = 0) Тогда
		 
		 УдаленныеВложения.Добавить(текДанные.Ссылка);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СформироватьТекстПисьмаПолучателю(СтрокаТаблицы)
	
	Если ЗначениеЗаполнено(Объект.ШаблонСообщения) Тогда 
		Если ЗначениеЗаполнено(СтрокаТаблицы.КонтактноеЛицо) Тогда 
			ДопПараметры = Новый Структура("ПолучательРассылки", СтрокаТаблицы.КонтактноеЛицо);
		Иначе 
			ДопПараметры = Новый Структура("ПолучательРассылки", СтрокаТаблицы.Контрагент);
		КонецЕсли;
		врСообщение = ШаблоныСообщений.СформироватьСообщение(Объект.ШаблонСообщения, Объект.Основание, УникальныйИдентификатор, ДопПараметры);
		Возврат врСообщение.Текст;
		
	Иначе 
		Возврат Объект.ТекстHTML;
	КонецЕсли;
	
КонецФункции

&НаСервере
Функция ВернутьТему(СтрокаТаблицы)
	
	Если ЗначениеЗаполнено(Объект.ШаблонСообщения) Тогда 
		Если ЗначениеЗаполнено(СтрокаТаблицы.КонтактноеЛицо) Тогда 
			ДопПараметры = Новый Структура("ПолучательРассылки", СтрокаТаблицы.КонтактноеЛицо);
		Иначе 
			ДопПараметры = Новый Структура("ПолучательРассылки", СтрокаТаблицы.Контрагент);
		КонецЕсли;
		врСообщение = ШаблоныСообщений.СформироватьСообщение(Объект.ШаблонСообщения, Объект.Основание, УникальныйИдентификатор, ДопПараметры);
		Возврат врСообщение.Тема;
	Иначе 
		Возврат Объект.Тема;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Функция ПолучитьСледСимвол(стр)
	
	Символ = Сред(стр,1,1);
	стр = Сред(стр,2,СтрДлина(стр)-1);
	
	Возврат Символ;
	
КонецФункции // ПолучитьСледСимвол()

&НаКлиенте
Функция ПолучитьЛогин(Текст,ТекущийСимвол,Терм_Конец,НедопустимыеСимволы,СимволыРусскогоАлфавита = "")
	
	СтруктураВозврата = Новый Структура("Логин,КодОшибки");
	ВыходСтрока = "";
	Пока ТекущийСимвол <> Терм_Конец Цикл
		Если ТекущийСимвол = "" Тогда
			// Логин завершили считывать, а домен еще даже не начали.
			СтруктураВозврата.КодОшибки = 2;
			Возврат СтруктураВозврата;
		КонецЕсли;
		Если ТекущийСимвол = " " Тогда
			// Пробел в имени?
			СтруктураВозврата.КодОшибки = 2;
			Возврат СтруктураВозврата;
		КонецЕсли;
		Если Найти(НедопустимыеСимволы,ТекущийСимвол) Тогда
			СтруктураВозврата.КодОшибки = 1;
			Возврат СтруктураВозврата;
		КонецЕсли;
		Если Найти(СимволыРусскогоАлфавита,ТекущийСимвол) Тогда
			СтруктураВозврата.КодОшибки = 4;
			Возврат СтруктураВозврата;
		КонецЕсли;
		ВыходСтрока = ВыходСтрока + ТекущийСимвол;
		ТекущийСимвол = ПолучитьСледСимвол(Текст);
	КонецЦикла;
	Если СтрДлина(ВыходСтрока) = 0 Тогда
		// Логин пустым не бывает
		СтруктураВозврата.КодОшибки = 4;
		Возврат СтруктураВозврата;
	КонецЕсли;
	СтруктураВозврата.КодОшибки = 0;
	СтруктураВозврата.Логин = ВыходСтрока;
	Возврат СтруктураВозврата;
КонецФункции

&НаКлиенте
Функция ПолучитьДомены(Текст,ТекущийСимвол,Терм_Конец,НедопустимыеСимволы,СимволыРусскогоАлфавита = "")
	
	СтруктураВозврата = Новый Структура("Домены,КодОшибки");
	МассивДоменов = Новый Массив(4);
	ТекущийСимвол = ПолучитьСледСимвол(Текст);
	ТекущийДомен = "";
	НомТекущегоДомена = 0;
	
	Если ТекущийСимвол = "." ИЛИ ТекущийСимвол = "" Тогда
		СтруктураВозврата.КодОшибки = 5;
		Возврат СтруктураВозврата;
	КонецЕсли;
	
	КоличествоДомИмен = 0;
	
	Пока ТекущийСимвол<>Терм_Конец Цикл
		// Если у нас первый символ начинается на точку те @.dudud.ru или @dududu..ru.
		// Пока доменное имя пусто
		Пока ТекущийСимвол<>"." И ТекущийСимвол<>Терм_Конец Цикл
			Если Найти(НедопустимыеСимволы,ТекущийСимвол) Тогда
				СтруктураВозврата.КодОшибки = 1;
				Возврат СтруктураВозврата;
			КонецЕсли;
			Если Найти(СимволыРусскогоАлфавита,ТекущийСимвол) Тогда
				СтруктураВозврата.КодОшибки = 4;
				Возврат СтруктураВозврата;
			КонецЕсли;
			// Пробелов тоже не должно быть в доменном имени.
			Если ТекущийСимвол=" " Тогда
				СтруктураВозврата.КодОшибки = 2;
				Возврат СтруктураВозврата;
			КонецЕсли;
			ТекущийДомен = ТекущийДомен+ТекущийСимвол;
			ТекущийСимвол = ПолучитьСледСимвол(Текст);
			//ПустойДомен = Ложь;
		КонецЦикла;
		ПредСимвол = ТекущийСимвол;
		МассивДоменов.Вставить(НомТекущегоДомена,ТекущийДомен);
		КоличествоДомИмен = КоличествоДомИмен+1;
		ТекущийДомен = "";
		НомТекущегоДомена = НомТекущегоДомена + 1;
		ТекущийСимвол = ПолучитьСледСимвол(Текст);
		Если ПредСимвол ="." И (ТекущийСимвол = "." ИЛИ ТекущийСимвол = "") Тогда
			СтруктураВозврата.КодОшибки = 5;
			Возврат СтруктураВозврата;
		КонецЕсли;
	КонецЦикла;
	
	Если КоличествоДомИмен < 2 Тогда
		СтруктураВозврата.КодОшибки = 2;
		Возврат СтруктураВозврата;
	КонецЕсли; 
	
	СтруктураВозврата.Домены = МассивДоменов;
	СтруктураВозврата.КодОшибки = 0;
	
	Возврат СтруктураВозврата;
	
КонецФункции // ПолучитьДомены()

&НаКлиенте
Функция АнализАдресаЭП(Знач Адрес)
	// Выходные значения 
	Представление = "";
	Логин = "";
	Домены = Новый Массив(4);
	ВозврСтруктура = Новый Структура("АдресЭП,Представление,Логин,Домены,Сообщение,КодОшибки","","",Домены,"",0);
	// Нечего анализировать = возвращаем, что все ок с кодом ошибки 0.
	Если Адрес = "" Тогда
		ВозврСтруктура.КодОшибки = 0;
		Возврат ВозврСтруктура;
	КонецЕсли;
	// Коды Ошибок
	СообщениеНедопустимыеСимволы			= НСтр("en='Invalid characters in email address."
"E-mail addresses must not contain: !#$%^&*()+`~|\/=;,';ru='Недопустимые символы в адресе электронной почты."
"Адреса электронной почты не должен содержать: !#$%^&*()+`~|\/=;,'");
	СообщениеНеверныйФорматПочтовогоАдреса	= НСтр("en='Invalid format of email address.';ru='Неверный формат адреса электронной почты.'");
	СообщениеПробелВСтроке					= НСтр("en='E-mail addresses must not contain spaces.';ru='Адреса электронной почты не должены содержать пробелов.'");
	СообщениеСимволыРусскогоАлфавита		= НСтр("en='E-mail addresses must consist of letters of English alphabet';ru='Адреса электронной почты должны состоять из букв английского алфавита'");
	СообщениеПустоеДоменноеИмя				= НСтр("en='Domain name can not be empty';ru='Доменное имя не может быть пустым'");
	МассивСообщений = Новый Массив(6);
	МассивСообщений.Вставить(1,СообщениеНедопустимыеСимволы);
	МассивСообщений.Вставить(2,СообщениеНеверныйФорматПочтовогоАдреса);
	МассивСообщений.Вставить(3,СообщениеПробелВСтроке);
	МассивСообщений.Вставить(4,СообщениеСимволыРусскогоАлфавита);
	МассивСообщений.Вставить(5,СообщениеПустоеДоменноеИмя);
	
	
	// Символы 
	НедопустимыеСимволы	= "!#$%^&*()+`~|\/=;,";
	
	// Убрана проверка на символы русского алфавита, если нужно будет вернуть обратно - раскомментировать.
	СимволыРусскогоАлфавита		= "";
	//СимволыРусскогоАлфавита		= "ёйцукенгшщзхъфывапролджэячсмитьбю";
	
	СимволыЛатинскогоАлфавита = "qwertyuiopasdfghjklzxcvbnm";
	СимволыЦифры ="0123456789";
	
	Терм_Домен = "@";
	Текст = СокрЛП(Адрес);
	// Смотрим имеется ли представление.
	ПозицияНачалаАдреса = Найти(Текст, "<");
	Если ПозицияНачалаАдреса > 0 Тогда
		
		ПозицияОкончанияАдреса = Найти(Текст, ">");
		
		Если ПозицияОкончанияАдреса < ПозицияНачалаАдреса Тогда
			
			ВозврСтруктура.КодОшибки = 1;
			
			ВозврСтруктура.Сообщение = МассивСообщений[1];
			
			Возврат ВозврСтруктура;		
			
		КонецЕсли;
		
		ВозврСтруктура.Представление = СокрЛП(Лев(Текст, ПозицияНачалаАдреса - 1));
		
		Текст = СокрЛП(Сред(Текст, ПозицияНачалаАдреса + 1, ПозицияОкончанияАдреса - ПозицияНачалаАдреса - 1));
	Иначе
		ПозицияОкончанияАдреса = Найти(Текст, ">");
		Если ПозицияОкончанияАдреса > 0 Тогда
			
			ВозврСтруктура.КодОшибки = 1;
			
			ВозврСтруктура.Сообщение = МассивСообщений[1];
			
			Возврат ВозврСтруктура;
			
		КонецЕсли;
	КонецЕсли;
	
	ТекущийСимвол = ПолучитьСледСимвол(Текст);
	
	// Если нет представления разбираем адрес на логин и домены.
	// Сначала разбираем логин
	СтрЛогин = ПолучитьЛогин(Текст,ТекущийСимвол,Терм_Домен,НедопустимыеСимволы,СимволыРусскогоАлфавита);
	Если СтрЛогин.КодОшибки = 0 Тогда
		// Все в порядке продолжаем
		// Пытаемся получить домены
		ВозврСтруктура.Логин = СтрЛогин.Логин;
		СтрДомены = ПолучитьДомены(Текст,ТекущийСимвол,"",НедопустимыеСимволы,СимволыРусскогоАлфавита);
		Если СтрДомены.КодОшибки = 0 Тогда
			// Тогда все хорошо и можно завершить разбор.
			ВозврСтруктура.Домены = СтрДомены.Домены;
			// ПолучимСтроку адреса электронной почты.
			СтрДоменов = "";
			Для каждого Домен Из ВозврСтруктура.Домены Цикл
				Если ЗначениеЗаполнено(Домен) Тогда
				
					СтрДоменов = СтрДоменов + Домен + ".";
				КонецЕсли;
			КонецЦикла;
			СтрДоменов = Сред(СтрДоменов,1,СтрДлина(СтрДоменов)-1);
			ВозврСтруктура.АдресЭП = ВозврСтруктура.Логин +"@"+СтрДоменов;
			ВозврСтруктура.КодОшибки = 0;
			Возврат ВозврСтруктура;
		Иначе
			ВозврСтруктура.КодОшибки = СтрДомены.КодОшибки;
			ВозврСтруктура.Сообщение = МассивСообщений[СтрДомены.КодОшибки];
			Возврат ВозврСтруктура;
		КонецЕсли;
	Иначе
		// Иначе ругаемся
		ВозврСтруктура.Сообщение = МассивСообщений[СтрЛогин.КодОшибки];
		ВозврСтруктура.КодОшибки = СтрЛогин.КодОшибки;
		Возврат ВозврСтруктура;
	КонецЕсли;
	ВозврСтруктура.КодОшибки = 10;
	Возврат ВозврСтруктура;
КонецФункции

&НаСервере
Функция ПолучитьКонтрагентовГруппы(КонтрагентГруппа)
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Родитель", КонтрагентГруппа);
	Запрос.Текст =  "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                |	Контрагенты.Ссылка КАК Ссылка
	                |ИЗ
	                |	Справочник.Контрагенты КАК Контрагенты
	                |ГДЕ
	                |	НЕ Контрагенты.ПометкаУдаления
	                |	И НЕ Контрагенты.ЭтоГруппа";
	Если КонтрагентГруппа.ЭтоГруппа Тогда
		Запрос.Текст =  Запрос.Текст + "
    |	И Контрагенты.Родитель В ИЕРАРХИИ(&Родитель)";
	Иначе	
		Запрос.Текст =  Запрос.Текст + "
	|	И Контрагенты.Родитель = &Родитель";
	КонецЕсли;					
	Запрос.Текст =  Запрос.Текст + "
    |
    |УПОРЯДОЧИТЬ ПО
    |	Контрагенты.Наименование";
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
КонецФункции // ()

&НаСервере
Процедура ПриСозданииИПриЧтенииНаСервере()
	
	ОбработатьПереданныеПараметры(Параметры);
	
	Если НЕ Объект.Ссылка.Пустая() Тогда
		ДанныеПоПисьмам = ВведеныПисьмаНаОсновании(Объект.Ссылка);
		CRM_ЕстьПисьма		= ДанныеПоПисьмам.ЕстьПисьма;
		CRM_Отправляли		= ДанныеПоПисьмам.Отправляли;
	КонецЕсли;
	
	ЗаполнитьВложения(Параметры);
	
	СтруктураВложений = Новый Структура;
	Объект.ТекстHTML = Взаимодействия.ОбработатьТекстHTMLДляФорматированногоДокумента(
		Объект.Ссылка, Объект.ТекстHTML, СтруктураВложений);
	ТекстПисьмаФорматированныйДокумент.УстановитьHTML(Объект.ТекстHTML, СтруктураВложений);
	
КонецПроцедуры 

&НаСервере
Процедура ЗаполнитьВложения(Параметры = Неопределено)
	
	Если Объект.Ссылка.Пустая() И Параметры <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			табВложения = Документы.уатРассылкаЭлектронныхПисем_уэ.ПолучитьВложенияЭлектронногоПисьма(Параметры.ЗначениеКопирования, Истина);
			
			Для Каждого Стр Из табВложения Цикл
				Если ПустаяСтрока(Стр.ИДФайлаЭлектронногоПисьма) Тогда
					новСтр = Вложения.Добавить();
					новСтр.Ссылка								= Стр.Ссылка;
					новСтр.ИмяФайла								= Стр.ИмяФайла;
					новСтр.ИндексКартинки						= Стр.ИндексКартинки;
					новСтр.Размер								= Стр.Размер;
					РазмерВложения								= Цел(новСтр.Размер/1024);
					новСтр.РазмерСтрокой						= ?(РазмерВложения > 0, Строка(РазмерВложения) + " кб", Строка(новСтр.Размер) + " байт");
					новСтр.РазмерПредставление					= Стр.РазмерПредставление;
					новСтр.ПодписанЭП							= Стр.ПодписанЭП;
					новСтр.Расположение							= 1;
					новСтр.ИдентификаторПочтовогоВложения	= ?(Стр.ИДФайлаЭлектронногоПисьма = "", "#", Стр.ИДФайлаЭлектронногоПисьма);
					новСтр.ИДФайлаЭлектронногоПисьма			= Стр.ИДФайлаЭлектронногоПисьма;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	Иначе
		Вложения.Очистить();
		
		табВложения = Документы.уатРассылкаЭлектронныхПисем_уэ.ПолучитьВложенияЭлектронногоПисьма(Объект.Ссылка, Истина);
		
		Для Каждого Стр Из табВложения Цикл
			АдресВоВремХранилище = "";
			
			новСтр = Вложения.Добавить();
			новСтр.Ссылка								= Стр.Ссылка;
			новСтр.ИмяФайла								= Стр.ИмяФайла;
			новСтр.ИмяФайлаНаКомпьютере					= АдресВоВремХранилище;
			новСтр.ИндексКартинки						= Стр.ИндексКартинки;
			новСтр.Размер								= Стр.Размер;
			РазмерВложения								= Цел(новСтр.Размер/1024);
			новСтр.РазмерСтрокой						= ?(РазмерВложения > 0, Строка(РазмерВложения) + " кб", Строка(новСтр.Размер) + " байт");
			новСтр.РазмерПредставление					= Стр.РазмерПредставление;
			новСтр.ПодписанЭП							= Стр.ПодписанЭП;
			новСтр.Расположение							= 0;
			новСтр.ИдентификаторПочтовогоВложения	= ?(Стр.ИДФайлаЭлектронногоПисьма = "", "#", Стр.ИДФайлаЭлектронногоПисьма);
			новСтр.ИДФайлаЭлектронногоПисьма			= Стр.ИДФайлаЭлектронногоПисьма;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьПереданныеПараметры(Параметры)
	
	Если Объект.Ссылка.Пустая() И Параметры <> Неопределено Тогда
		
		Если ЗначениеЗаполнено(Объект.УчетнаяЗапись) Тогда
			ОсновнаяУчетнаяЗапись = Объект.УчетнаяЗапись;
		Иначе
			Если Параметры.Свойство("УчетнаяЗапись") И ЗначениеЗаполнено(Параметры.УчетнаяЗапись) Тогда
				ОсновнаяУчетнаяЗапись = Параметры.УчетнаяЗапись;
			Иначе
				ОсновнаяУчетнаяЗапись = ХранилищеОбщихНастроек.Загрузить("ОсновнаяУчетнаяЗапись", "ОсновнаяУчетнаяЗапись");
			КонецЕсли;
		КонецЕсли;
		
		Если НЕ ОсновнаяУчетнаяЗапись = Неопределено Тогда
			Если НЕ Элементы.ОтправительПредставление.СписокВыбора.НайтиПоЗначению(ОсновнаяУчетнаяЗапись) = Неопределено Тогда
				Объект.УчетнаяЗапись = ОсновнаяУчетнаяЗапись;
				Объект.ОтправительПредставление = ВзаимодействияКлиентСервер.ПолучитьПредставлениеАдресата(ОсновнаяУчетнаяЗапись.ИмяПользователя, ОсновнаяУчетнаяЗапись.АдресЭлектроннойПочты, "");
			ИначеЕсли Элементы.ОтправительПредставление.СписокВыбора.Количество() > 0 Тогда 
				Объект.УчетнаяЗапись = Элементы.ОтправительПредставление.СписокВыбора[0].Значение;
				Объект.ОтправительПредставление = Элементы.ОтправительПредставление.СписокВыбора[0].Представление;
			КонецЕсли;
		ИначеЕсли Элементы.ОтправительПредставление.СписокВыбора.Количество() > 0 Тогда 
			Объект.УчетнаяЗапись = Элементы.ОтправительПредставление.СписокВыбора[0].Значение;
			Объект.ОтправительПредставление = Элементы.ОтправительПредставление.СписокВыбора[0].Представление;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
			
			ОснованиеСтруктураВложений = Новый Структура;
			ОснованиеТекстHTML = Взаимодействия.ОбработатьТекстHTMLДляФорматированногоДокумента(
				Параметры.ЗначениеКопирования, Параметры.ЗначениеКопирования.ТекстHTML,ОснованиеСтруктураВложений);
				
			ТекстПисьмаФорматированныйДокумент.УстановитьHTML(ОснованиеТекстHTML, ОснованиеСтруктураВложений);
		КонецЕсли;
	Иначе
		УчетнаяЗаписьСпискавыбора =  Элементы.ОтправительПредставление.СписокВыбора.НайтиПоЗначению(Объект.УчетнаяЗапись);
		Если УчетнаяЗаписьСпискаВыбора  <> Неопределено Тогда
			Объект.ОтправительПредставление =  УчетнаяЗаписьСпискавыбора.Представление;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаВыбораНаСервере(ВыбранноеЗначение)

	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Контрагенты") Тогда
	
		Если ВыбранноеЗначение.ЭтоГруппа 
			ИЛИ (ВыбранноеЗначение = Справочники.Контрагенты.ПустаяСсылка()) Тогда
		
			мКонтрагенты = ПолучитьКонтрагентовГруппы(ВыбранноеЗначение);
			Для Каждого эКонтрагент Из мКонтрагенты Цикл
			
				ТекДанные = Объект.Получатели.Добавить();
				ТекДанные.Контрагент = эКонтрагент;
				ТекДанные.КонтактноеЛицо = ВернутьКЛКонтрагента(ТекДанные.Контрагент);
				СписокАдресов = СформироватьСписокАдресов(Новый Структура("Контрагент, КонтактноеЛицо",ТекДанные.Контрагент,ТекДанные.КонтактноеЛицо));
				Если СписокАдресов.Количество() > 0 Тогда
					Адрес = СписокАдресов[0].Значение;
					Если НЕ Адрес.Количество() = 0 Тогда
						ТекДанные.Адрес					= Адрес.Представление;
						ТекДанные.ПредставлениеАдреса	= ?(Адрес.Объект = ТекДанные.Контрагент,Строка(ТекДанные.Контрагент),Строка(ТекДанные.КонтактноеЛицо)) + " <" + Адрес.Представление + ">";
					Иначе
						ТекДанные.Адрес					= "";
						ТекДанные.ПредставлениеАдреса	= "";
					КонецЕсли;
				Иначе
					ТекДанные.Адрес					= "";
					ТекДанные.ПредставлениеАдреса	= "";
				КонецЕсли;
			
			КонецЦикла;
			
		КонецЕсли;
		
		Модифицированность = Истина;
		
	КонецЕсли;

КонецПроцедуры
 
&НаСервере
Процедура УстановитьВидимостьТемыСодержания()
	
	Если ЗначениеЗаполнено(Объект.ШаблонСообщения) Тогда 
		Элементы.Тема.Видимость               = Ложь;
		Элементы.СтраницаСодержания.Видимость = Ложь;
	Иначе 
		Элементы.Тема.Видимость               = Истина;
		Элементы.СтраницаСодержания.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

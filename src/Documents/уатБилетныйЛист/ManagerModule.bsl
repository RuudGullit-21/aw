#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатБилетныйЛист";
	КомандаПечати.Идентификатор = "ПечататьЛицСторону";
	КомандаПечати.Представление = НСтр("en='Print front side.';ru='Печатать лиц. сторону'");
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатБилетныйЛист";
	КомандаПечати.Идентификатор = "ПечататьОбрСторону";
	КомандаПечати.Представление = НСтр("en='Print reverse side.';ru='Печатать обр. сторону'");
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатБилетныйЛист";
	КомандаПечати.Идентификатор = "ПечатьВесьДокумент";
	КомандаПечати.Представление = НСтр("en='Print whole document';ru='Печатать весь документ'");
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр).
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной
//                                                            параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной
//                                            параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	Если НЕ уатОбщегоНазначенияСервер.РазрешениеПечатиНепроведенногоДокумента(МассивОбъектов) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПечатьВесьДокумент") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПечатьВесьДокумент", "Печать весь документ", ПечатьБЛ(МассивОбъектов, ОбъектыПечати, 0));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПечататьЛицСторону") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПечататьЛицСторону", "Печатать лиц. сторону", ПечатьБЛ(МассивОбъектов, ОбъектыПечати, 1));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ПечататьОбрСторону") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ПечататьОбрСторону", "Печатать обр. сторону", ПечатьБЛ(МассивОбъектов, ОбъектыПечати, 2));
	КонецЕсли;
	
	уатОбщегоНазначенияСервер.УстановитьРедактированиеПечатныхФормДокумента(КоллекцияПечатныхФорм);
КонецПроцедуры // Печать

// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	Настройки.ПриПолученииСлужебныхРеквизитов = Ложь;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// Позволяет переопределить ограничение, указанное в модуле менеджера объекта метаданных.
//
// Параметры:
//  Ограничение - Структура:
//    * Текст                             - Строка - ограничение доступа для пользователей.
//                                          Если пустая строка, значит, доступ разрешен.
//    * ТекстДляВнешнихПользователей      - Строка - ограничение доступа для внешних пользователей.
//                                          Если пустая строка, значит, доступ запрещен.
//    * ПоВладельцуБезЗаписиКлючейДоступа - Неопределено - определить автоматически.
//                                        - Булево - если Ложь, то всегда записывать ключи доступа,
//                                          если Истина, тогда не записывать ключи доступа,
//                                          а использовать ключи доступа владельца (требуется,
//                                          чтобы ограничение было строго по объекту-владельцу).
//   * ПоВладельцуБезЗаписиКлючейДоступаДляВнешнихПользователей - Неопределено, Булево - также
//                                          как у параметра ПоВладельцуБезЗаписиКлючейДоступа.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";
	
	Ограничение.ТекстДляВнешнихПользователей = Ограничение.Текст;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// СтандартныеПодсистемы.ВариантыОтчетов

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВариантыОтчетов

#КонецОбласти

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	СформироватьТаблицаВыручка(ДокументСсылка, СтруктураДополнительныеСвойства);
	СформироватьТаблицаБилетыНаСкладах(ДокументСсылка, СтруктураДополнительныеСвойства);
КонецПроцедуры // ИнициализироватьДанныеДокумента()

Процедура ВыполнитьКонтроль(ДокументСсылка, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь) Экспорт
	мЗапрос = Новый Запрос;
	мЗапрос.МенеджерВременныхТаблиц = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц; 
	мЗапрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ТабБилеты.Билет
	|ПОМЕСТИТЬ ТаблицаБилетов
	|ИЗ
	|	Документ.уатБилетныйЛист.Билеты КАК ТабБилеты
	|ГДЕ
	|	ТабБилеты.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаДокумента.Билет,
	|	ТаблицаДокумента.Ссылка КАК Регистратор,
	|	уатБилетыНаСкладахОстатки.КоличествоОстаток
	|ИЗ
	|	Документ.уатБилетныйЛист.Билеты КАК ТаблицаДокумента
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.уатБилетыНаСкладах.Остатки(
	|				&МоментВремени,
	|				Склад = &Склад
	|					И Билет В
	|						(ВЫБРАТЬ
	|							ТаблицаБилетов.Билет
	|						ИЗ
	|							ТаблицаБилетов)) КАК уатБилетыНаСкладахОстатки
	|		ПО (&Склад = уатБилетыНаСкладахОстатки.Склад)
	|			И ТаблицаДокумента.Билет = уатБилетыНаСкладахОстатки.Билет
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|	И ЕСТЬNULL(уатБилетыНаСкладахОстатки.КоличествоОстаток, 0) < 0";
	
	мЗапрос.УстановитьПараметр("Склад"        , ДокументСсылка.Склад);
	мЗапрос.УстановитьПараметр("Ссылка"       , ДокументСсылка);
	мЗапрос.УстановитьПараметр("МоментВремени", ДополнительныеСвойства.ДляПроведения.МоментКонтроля);
	
	Выборка = мЗапрос.Выполнить().Выбрать();
	Если Выборка.Количество() тогда
		Заголовок = уатОбщегоНазначенияТиповые.уатПредставлениеДокументаПриПроведении(ДокументСсылка);
		Пока Выборка.Следующий() Цикл
			ТекстНСТР = НСтр("en='For ""%1"" were received negative remains at warehouse ""%2"":%3';ru='Для ""%1"" получены отрицательные остатки на складе ""%2"": %3'");
			ТекстНСТР = СтрШаблон(ТекстНСТР, Выборка.Билет, мЗапрос.Параметры.Склад, Выборка.КоличествоОстаток);
			уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, Отказ, Заголовок);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// Формирует таблицу значений, содержащую данные для проведения по регистру.
//  Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
// Параметры:
//  ДокументСсылка					 - 	 - 
//  СтруктураДополнительныеСвойства	 - 	 - 
//
Процедура СформироватьТаблицаВыручка(ДокументСсылка, СтруктураДополнительныеСвойства)
	мЗапрос = Новый Запрос;
	мЗапрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	мЗапрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТабЧастьДокумента.Ссылка.Дата КАК Период,
	|	ТабЧастьДокумента.Ссылка КАК Регистратор,
	|	ТабЧастьДокумента.Билет,
	|	ТабЧастьДокумента.Маршрут,
	|	ТабЧастьДокумента.Количество,
	|	ТабЧастьДокумента.Сумма,
	|	ТабЧастьДокумента.Ссылка.Организация КАК Организация,
	|	ТабЧастьДокумента.Ссылка.Сотрудник КАК Сотрудник,
	|	ТабЧастьДокумента.Ссылка.ТС КАК ТС,
	|	ТабЧастьДокумента.ПутевойЛист
	|ИЗ
	|	Документ.уатБилетныйЛист.Билеты КАК ТабЧастьДокумента
	|ГДЕ
	|	ТабЧастьДокумента.Ссылка = &Ссылка";
	ТаблицаДвижений = мЗапрос.Выполнить().Выгрузить(); 
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаВыручка", ТаблицаДвижений);
КонецПроцедуры

// Формирует таблицу значений, содержащую данные для проведения по регистру.
//  Таблицы значений сохраняет в свойствах структуры "ДополнительныеСвойства".
//
// Параметры:
//  ДокументСсылка					 - 	 - 
//  СтруктураДополнительныеСвойства	 - 	 - 
//
Процедура СформироватьТаблицаБилетыНаСкладах(ДокументСсылка, СтруктураДополнительныеСвойства)
	мЗапрос = Новый Запрос;
	мЗапрос.УстановитьПараметр("Ссылка"          , ДокументСсылка);
	мЗапрос.УстановитьПараметр("Склад"           , ДокументСсылка.Склад);
	мЗапрос.УстановитьПараметр("МоментВремени"   , СтруктураДополнительныеСвойства.ДляПроведения.МоментКонтроля);
	мЗапрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	мЗапрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТаблицаДокумента.Ссылка КАК Регистратор,
	|	ТаблицаДокумента.Ссылка.Дата КАК Период,
	|	ТаблицаДокумента.Ссылка.Склад КАК Склад,
	|	ТаблицаДокумента.Билет,
	|	ТаблицаДокумента.Количество
	|ПОМЕСТИТЬ ТаблицаДокументаБилеты
	|ИЗ
	|	Документ.уатБилетныйЛист.Билеты КАК ТаблицаДокумента
	|ГДЕ
	|	ТаблицаДокумента.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ТаблицаДокументаБилеты.Склад,
	|	ТаблицаДокументаБилеты.Билет
	|ИЗ
	|	ТаблицаДокументаБилеты КАК ТаблицаДокументаБилеты";	
	
	МассивРезультатов = мЗапрос.ВыполнитьПакет();
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.уатБилетыНаСкладах");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = МассивРезультатов[1];
	Для каждого КолонкаРезультатЗапроса Из МассивРезультатов[1].Колонки Цикл
		ЭлементБлокировки.ИспользоватьИзИсточникаДанных(КолонкаРезультатЗапроса.Имя, КолонкаРезультатЗапроса.Имя);
	КонецЦикла;
	Блокировка.Заблокировать();

	мЗапрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТабНоменклатуры.Склад,
	|	ТабНоменклатуры.Билет,
	|	ТабНоменклатуры.Количество,
	|	ТабНоменклатуры.Период
	|ИЗ 
	|	ТаблицаДокументаБилеты КАК ТабНоменклатуры";
	
	ТаблицаПартий = уатПроведение_проф.ПолучитьТаблицуПартийБилетовДляСписания(мЗапрос.Выполнить().Выгрузить(),
		уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументСсылка.Организация, "СпособОценкиМПЗ"),
		СтруктураДополнительныеСвойства.ДляПроведения.МоментКонтроля);
	
	ЗапросПартии = Новый Запрос();
	ЗапросПартии.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТабДанных.Склад КАК Склад,
	|	ТабДанных.Билет КАК Билет,
	|	ТабДанных.Партия КАК Партия,
	|	ТабДанных.Количество КАК Количество
	|ПОМЕСТИТЬ ВремТаблицаПартий
	|ИЗ
	|	&ТаблицаПарам КАК ТабДанных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	&Период КАК Период,
	|	&Регистратор КАК Регистратор,
	|	ТабДанных.Склад КАК Склад,
	|	ТабДанных.Партия КАК Партия,
	|	ТабДанных.Билет КАК Билет,
	|	ТабДанных.Количество КАК Количество
	|ИЗ
	|	ВремТаблицаПартий КАК ТабДанных";
	
	ЗапросПартии.УстановитьПараметр("Период"         , ДокументСсылка.Дата);
	ЗапросПартии.УстановитьПараметр("ТаблицаПарам"   , ТаблицаПартий);
	ЗапросПартии.УстановитьПараметр("Регистратор"    , ДокументСсылка);

	МассивРезультатов = ЗапросПартии.ВыполнитьПакет();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаБилетыНаСкладах", МассивРезультатов[1].Выгрузить());
КонецПроцедуры

Функция ПолучитьМаршрут(Ссылка)
	Маршрут = Новый Структура("Номер, Наименование");
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	уатБилетныйЛистБилеты.Маршрут.НомерМаршрута КАК Номер,
	|	уатБилетныйЛистБилеты.Маршрут.Наименование КАК Наименование
	|ИЗ
	|	Документ.уатБилетныйЛист.Билеты КАК уатБилетныйЛистБилеты
	|ГДЕ
	|	уатБилетныйЛистБилеты.Ссылка = &СсылкаНаОбъект";
	
	Запрос.УстановитьПараметр("СсылкаНаОбъект", Ссылка);
	
	Результат = Запрос.Выполнить();
	Выборка = Результат.Выбрать();
	
	Если Выборка.Следующий() Тогда 
		Маршрут.Номер = Выборка.Номер;
		Маршрут.Наименование = Выборка.Наименование;
	КонецЕсли;
	Возврат Маршрут;
КонецФункции

Функция ПечатьБЛ(МассивОбъектов, ОбъектыПечати, ФлагПечати="")
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_БилетныйЛист";
	ПервыйДокумент = Истина;
	
	Для Каждого ТекущийДокумент Из МассивОбъектов Цикл
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		Запрос = Новый Запрос;
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатБилетныйЛист.Номер КАК НомерДокумента,
		|	уатБилетныйЛист.Дата КАК ДатаДокумента,
		|	уатБилетныйЛист.Организация КАК Организация,
		|	уатБилетныйЛист.Сотрудник КАК Кондуктор,
		|	уатБилетныйЛист.ТС.ГосударственныйНомер КАК ГосНомерТС,
		|	уатБилетныйЛист.Сотрудник.Код КАК ТабельныйНомер
		|ИЗ
		|	Документ.уатБилетныйЛист КАК уатБилетныйЛист
		|ГДЕ
		|	уатБилетныйЛист.Ссылка = &СсылкаНаОбъект";
		
		Запрос.УстановитьПараметр("СсылкаНаОбъект", ТекущийДокумент.Ссылка);
		
		Результат = Запрос.Выполнить();
		Выборка = Результат.Выбрать();
		
		Если Выборка.Следующий() Тогда
			ДанныеШапка = Выборка;
		Иначе
			ТекстНСТР = НСтр("en='Failed to print document';ru='Не удалось напечатать документ'");
			уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР,,, СтатусСообщения.Важное);
		КонецЕсли;
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 9
		|	уатБилетныйЛистБилеты.Билет.ВидБилета КАК ВидБилета,
		|	уатБилетныйЛистБилеты.Билет.Цена КАК ЦенаБилета,
		|	уатБилетныйЛистБилеты.Билет.Серия КАК СерияБилета,
		|	уатБилетныйЛистБилеты.НомерНачальный КАК НомерБилетаНачальный,
		|	уатБилетныйЛистБилеты.НомерКонечный КАК НомерБилетаКонечный,
		|	уатБилетныйЛистБилеты.Количество КАК КоличествоБилетов,
		|	уатБилетныйЛистБилеты.Сумма КАК СуммаБилетов
		|ИЗ
		|	Документ.уатБилетныйЛист.Билеты КАК уатБилетныйЛистБилеты
		|ГДЕ
		|	уатБилетныйЛистБилеты.Ссылка = &СсылкаНаОбъект
		|
		|УПОРЯДОЧИТЬ ПО
		|	уатБилетныйЛистБилеты.НомерСтроки";
		
		ВыборкаСтрок = Запрос.Выполнить().Выбрать();
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.уатБилетныйЛист.БилетноУчетныйЛист");
		
		// печатаем лицевую сторону п/л
		Если ФлагПечати <> 2 Тогда
			Область = Макет.ПолучитьОбласть("Страница1");
			Область.Параметры.Заполнить(ДанныеШапка);
			СписокТребуемыхПараметров			= "НаименованиеДляПечатныхФорм";
			СведенияОбОбъекте					= уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(ДанныеШапка.Организация);
			Область.Параметры.Организация		= уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(СведенияОбОбъекте, СписокТребуемыхПараметров);
			
			ПечатьПрефиксовВключена = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ТекущийДокумент.Организация, ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ВыводитьПрефиксПриПечати"));
			Если ПечатьПрефиксовВключена Тогда
				Область.Параметры.НомерДокумента = ТекущийДокумент.Номер;
			Иначе
				Область.Параметры.НомерДокумента = уатОбщегоНазначенияКлиентСервер.НомерДокументаНаПечать(ТекущийДокумент.Номер, Истина, Истина);
			КонецЕсли;
			
			Маршрут = ПолучитьМаршрут(ТекущийДокумент.Ссылка);
			Область.Параметры.НомерМаршрута = Маршрут.Номер;
			Область.Параметры.НаименованиеМаршрута = Маршрут.Наименование;
			Счетчик = 1;
			Пока ВыборкаСтрок.Следующий() Цикл
				Область.Параметры["ВидБилета"            + Строка(Счетчик)] = ВыборкаСтрок.ВидБилета;
				Область.Параметры["ЦенаБилета"           + Строка(Счетчик)] = ВыборкаСтрок.ЦенаБилета;
				Область.Параметры["СерияБилета"          + Строка(Счетчик)] = ВыборкаСтрок.СерияБилета;
				Область.Параметры["НомерБилетаНачальный" + Строка(Счетчик)] = ВыборкаСтрок.НомерБилетаНачальный;
				Область.Параметры["НомерБилетаКонечный"  + Строка(Счетчик)] = ВыборкаСтрок.НомерБилетаКонечный;
				Область.Параметры["КоличествоБилетов"    + Строка(Счетчик)] = ВыборкаСтрок.КоличествоБилетов;
				Область.Параметры["СуммаБилетов"         + Строка(Счетчик)] = ВыборкаСтрок.СуммаБилетов;
				Счетчик = Счетчик + 1;
			КонецЦикла;
			ТабличныйДокумент.Вывести(Область);
		КонецЕсли;
		
		Если ФлагПечати = 0 Тогда	//Новая страница для печати полного пут. листа
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		
		// печатаем обратную сторону п/л
		Если ФлагПечати <> 1 Тогда
			
			Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.уатБилетныйЛист.БилетноУчетныйЛистОбратнаяСторона");
			Область = Макет.ПолучитьОбласть("Страница2");
			Область.Параметры.Заполнить(ДанныеШапка);
			ТабличныйДокумент.Вывести(Область);
		КонецЕсли;
		
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ТекущийДокумент);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
КонецФункции

#КонецОбласти

#КонецЕсли

#Область ОписаниеПеременных

&НаКлиенте
Перем СоответсвиеИдентификаторНаименованияГруза;
&НаКлиенте
Перем СоответсвиеНоменклатураНаименованияГруза;
&НаКлиенте
Перем СоответсвиеИдентификаторНаименованияУпаковки;
&НаКлиенте
Перем СоответсвиеВидГрузаНаименованияУпаковки;
&НаКлиенте
Перем СоответсвиеКонтактов;
&НаКлиенте
Перем СоответсвиеВалют;
&НаКлиенте
Перем СоответсвиеНаименованияВалют;
&НаКлиенте
Перем СоответсвиеВалютаНаименования;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	уатЗащищенныеФункцииСервер.уатДокументФормаЭлементаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, Объект, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если Параметры.Ключ.Пустая() Тогда
		Если Не ЗначениеЗаполнено(Объект.СтатусТендера) Тогда 
			Объект.СтатусТендера = Справочники.уатСтатусы_уэ.Новый;
		КонецЕсли;
		
		Объект.ОперацияТипаЗагрузки = "OR";
		Объект.ОперацияТипаВыгрузки = "OR";
		Объект.ВариантЗагрузки      = 1;

		СтруктураОбъектовНастроек = Новый Структура;
		СтруктураОбъектовНастроек.Вставить("Организация",    Объект.Организация);
		СтруктураОбъектовНастроек.Вставить("Подразделение",  Объект.Подразделение);
		СтруктураОбъектовНастроек.Вставить("Пользователь",   ПользователиКлиентСервер.АвторизованныйПользователь());
		
		Объект.Биржа = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, ПланыВидовХарактеристик.уатПраваИНастройки.ОсновнаяБиржа);
		
		Если ЗначениеЗаполнено(Объект.ДокументОснование)
			И ТипЗнч(Объект.ДокументОснование) = Тип("ДокументСсылка.уатЗаказГрузоотправителя")
			И Объект.ДокументОснование.Мультимодальный Тогда
			Объект.Биржа = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	уатИспользоватьИнтеграциюАТИ    = Константы.уатИспользоватьИнтеграциюАТИ_уэ.Получить();
	
	Элементы.ГруппаАТИ.Видимость            = уатИспользоватьИнтеграциюАТИ;
	Элементы.ПеревозчикиОбработка.Видимость = уатИспользоватьИнтеграциюАТИ;
	
	уатОбщегоНазначенияСервер.НастроитьПолеПодразделение(Элементы.Подразделение, "Объект.Организация");
	уатОбщегоНазначенияСервер.НастроитьПолеЕдиницыИзмерения(ЭтотОбъект, "Грузы", "ГрузовоеМесто");
	
	УстановитьУсловноеОформлениеПолейСтатусов();
	ОбновитьСтатусыГрузовСервер();
	ОбновитьВсегоВТЧПеревозчикиСервер();
	
	Если ЗначениеЗаполнено(Объект.МаршрутныйЛист) Тогда 
		СпособЗаполнения     = 1; // По маршрутным листам.
		ПредСпособЗаполнения = 1;
		ЗаполнитьДеревоЗаказовПоМЛ();
	Иначе 
		СпособЗаполнения     = 0; // По заказам на ТС.
		ПредСпособЗаполнения = 0;
	КонецЕсли;
	
	Элементы.ЗаказыДеревоКоличествоМест.Заголовок = Справочники.уатВидыУпаковки_уэ.ПолучитьОсновнойВидУпаковки().КраткоеНаименование;
	
	ПредставлениеЕдиницыИзмеренияВеса = уатОбщегоНазначенияПовтИсп.ПолучитьПредставлениеОсновнойЕдиницыИзмеренияВеса();
	Если ЗначениеЗаполнено(ПредставлениеЕдиницыИзмеренияВеса) Тогда
		Элементы.ГрузыВесБрутто.Заголовок = НСтр("en='Weight';ru='Вес'") + ", " + ПредставлениеЕдиницыИзмеренияВеса;
	КонецЕсли;
	
	ПредставлениеЕдиницыИзмеренияОбъема = уатОбщегоНазначенияПовтИсп.ПолучитьПредставлениеОсновнойЕдиницыИзмеренияОбъема();
	Если ЗначениеЗаполнено(ПредставлениеЕдиницыИзмеренияОбъема) Тогда
		Элементы.ГрузыОбъем.Заголовок = НСтр("en='Volume';ru='Объем'") + ", "+ ПредставлениеЕдиницыИзмеренияОбъема;
	КонецЕсли;
	
	ПредставлениеКоличествоМест = Справочники.уатВидыУпаковки_уэ.ПолучитьОсновнойВидУпаковки().КраткоеНаименование;
	Если ЗначениеЗаполнено(ПредставлениеКоличествоМест) Тогда
		Элементы.ГрузыКоличествоМест.Заголовок = ПредставлениеКоличествоМест;
	КонецЕсли;
	
	Если Объект.Организация <> Справочники.Организации.ПустаяСсылка() Тогда
		мВидимостьРеквизитовНДС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
		ПланыВидовХарактеристик.уатПраваИНастройки.УчитыватьНДС);
	КонецЕсли;
	
	мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	Если уатРаботаСМетаданными.уатЕстьКонстанта("ВалютаУправленческогоУчета") Тогда
		мВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
	Иначе
		мВалютаУправленческогоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;

	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	уатЗащищенныеФункцииКлиент.уатДокументФормаЭлементаПриОткрытии(Отказ, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	СоответсвиеИдентификаторНаименованияГруза    = Новый Соответствие;
	СоответсвиеНоменклатураНаименованияГруза     = Новый Соответствие;
	СоответсвиеИдентификаторНаименованияУпаковки = Новый Соответствие;
	СоответсвиеВидГрузаНаименованияУпаковки      = Новый Соответствие;
	СоответсвиеКонтактов                         = Новый Соответствие;
	СоответсвиеВалют                             = Новый Соответствие;
	СоответсвиеНаименованияВалют                 = Новый Соответствие;
	СоответсвиеВалютаНаименования                = Новый Соответствие;
	уатОбщегоНазначенияКлиент.ЗаполнитьСписокВыбораНастройкаНДС(Элементы.ПеревозчикиУчитыватьНДС.СписокВыбора);
	ОбновитьНДСвТЧПеревозчики();
	
	Если Объект.Биржа = ПредопределенноеЗначение("Справочник.уатБиржиГрузоперевозок_уэ.АТИ") Тогда
		Вес   = Объект.Вес;
		Объем = Объект.Объем;
		БиржаАТИПриИзменении();
		Если Объект.ПромежуточныеПункты.Количество() <> 0 Тогда
			ИдентификаторГородаПрибытия    = Объект.ПромежуточныеПункты[Объект.ПромежуточныеПункты.Количество() - 1].ИдентификаторГородаСтрока;
			ИдентификаторГородаОтправления = Объект.ПромежуточныеПункты[0].ИдентификаторГородаСтрока;
		КонецЕсли;
		
		Для Каждого ТекСтрокаГорода Из Объект.БлижайшиеКрупныеГорода Цикл
			НавигационнаяСсылкаФС = "Тег_" + ТекСтрокаГорода.ПолучитьИдентификатор();
			ТекСтрокаГорода.Представление   = ФорматированнаяСтрокаПредставленияТега(ТекСтрокаГорода.ИдентификаторГородаСтрока, Ложь, НавигационнаяСсылкаФС);
		КонецЦикла;
		ОбновитьЭлементыТеговХарактеристик("ОблакоТеговХарактеристик", "0");
		ОбновитьЭлементыТеговХарактеристик("ОблакоТеговХарактеристикПрибытие", "1");
		
		Если Объект.Ссылка.Пустая() Тогда
			Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
				Если СпособЗаполнения = 1 Тогда
					ЗаполнитьРеквизитыАТИПоМЛ(СоответсвиеНоменклатураНаименованияГруза, СоответсвиеВидГрузаНаименованияУпаковки, СоответсвиеНаименованияВалют);
				Иначе
					ЗаполнитьРеквизитыАТИПоЗаказуНаТС(СоответсвиеНоменклатураНаименованияГруза, СоответсвиеВидГрузаНаименованияУпаковки, СоответсвиеНаименованияВалют);
				КонецЕсли;
				Итератор = 0;
				Для Каждого ТекСтрока Из Объект.ПромежуточныеПункты Цикл
					Если Итератор = 0 Тогда
						ИдетификаторГорода = "ИдентификаторГородаОтправления";
					ИначеЕсли Итератор = Объект.ПромежуточныеПункты.Количество()-1 Тогда
						ИдетификаторГорода = "ИдентификаторГородаПрибытия";
					Иначе
						ИдетификаторГорода = "";
					КонецЕсли;
					ПодобратьГород(ТекСтрока,0,,ИдетификаторГорода);
					Итератор = Итератор + 1;
				КонецЦикла;
				
				НаименованияГрузаПриИзменении(Неопределено);
				НаименованияУпаковкиПриИзменении(Неопределено);
				ВесПриИзменении(Неопределено);
				ОбъемПриИзменении(Неопределено);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	УстановитьВидимостьАТИ();
	
	МассивСтрок = Объект.Перевозчики.НайтиСтроки(Новый Структура("ЭтоПобедитель", 1));
	Если МассивСтрок.Количество() <> 0 Тогда
		ИтогСумма    = МассивСтрок[0].Сумма;
		ИтогСуммаНДС = МассивСтрок[0].СуммаНДС;
	Конецесли;

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ОбновитьСтатусыГрузовСервер();
	УстановитьУсловноеОформлениеПолейСтатусов();
	ОбновитьВсегоВТЧПеревозчикиСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "РегистрСведений.уатСведенияОКонтрагентах_уэ.Форма.ФормаВыбораПеревозчика" 
			И ЗначениеЗаполнено(ВыбранноеЗначение) И ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Контрагенты") Тогда 
		ДанныеПеревозчика = уатЗащищенныеФункцииСервер_уэ.ПолучитьДанныеПеревозчика(ВыбранноеЗначение);
		
		НовСтрокаПеревозчика = Объект.Перевозчики.Добавить();
		НовСтрокаПеревозчика.Перевозчик = ВыбранноеЗначение;
		НовСтрокаПеревозчика.Услуга     = ДанныеПеревозчика.Услуга;
		НовСтрокаПеревозчика.СпособЗапроса = ПредопределенноеЗначение("Справочник.уатСпособыВзаимодействий_уэ.БиржаГрузоперевозок");
		НовСтрокаПеревозчика.УчитыватьНДС  = мВидимостьРеквизитовНДС;
		
		Если ЗначениеЗаполнено(ДанныеПеревозчика.СтавкаНДС) Тогда 
			НовСтрокаПеревозчика.СтавкаНДС = ДанныеПеревозчика.СтавкаНДС;
			
		Иначе 
			НовСтрокаПеревозчика.СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
				ПользователиКлиентСервер.АвторизованныйПользователь(), 
				"ОсновнаяСтавкаНДС");
		КонецЕсли;
		
		РассчитатьСуммуНДС(НовСтрокаПеревозчика);
		ОбновитьВсегоВТЧПеревозчикиСервер();
		
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьСтатусыГрузовСервер();
	УстановитьУсловноеОформлениеПолейСтатусов();
	ОбновитьВсегоВТЧПеревозчикиСервер();
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если флВопросЗакрытиеФормы Тогда
		Отказ = Истина;
		Оповещ = Новый ОписаниеОповещения("ПередЗакрытиемВопрос", ЭтотОбъект);
		ПоказатьВопрос(Оповещ, "При проверке корректности заполнения документа возникли предупреждения!
			|Продолжить закрытие формы?", РежимДиалогаВопрос.ОКОтмена);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтатусТендераНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("Отбор", Новый Структура("ДействуетНаТендеры", Истина));
	Оповещение = Новый ОписаниеОповещения("СтатусТендераПослеВыбораСтатуса", ЭтотОбъект);
	ОткрытьФорму("Справочник.уатСтатусы_уэ.ФормаВыбора", ПараметрыФормы, ЭтотОбъект,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
	
КонецПроцедуры

&НаКлиенте
Процедура СпособЗаполненияПриИзменении(Элемент)
	
	Если Объект.Грузы.Количество() Тогда 
		ТекстНСТР = НСтр("en='Tabular section ""Orders for trucking"" will be cleared. Continue?';ru='Табличная часть ""Заказы на ТС"" будет очищена. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("РежимЗаполненияПриИзмененииОтвет", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстНСТР, РежимДиалогаВопрос.ОКОтмена);
	Иначе 
		РежимЗаполненияПриИзмененииЗавершение();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутныйЛистПриИзменении(Элемент)
	
	ЗаполнитьДеревоЗаказовПоМЛ();
	Если ЗначениеЗаполнено(Объект.Биржа) Тогда
		Если СпособЗаполнения = 1 Тогда
			ЗаполнитьРеквизитыАТИПоМЛ(СоответсвиеНоменклатураНаименованияГруза, СоответсвиеВидГрузаНаименованияУпаковки, СоответсвиеНаименованияВалют);
		Иначе
			ЗаполнитьРеквизитыАТИПоЗаказуНаТС(СоответсвиеНоменклатураНаименованияГруза, СоответсвиеВидГрузаНаименованияУпаковки, СоответсвиеНаименованияВалют);	
		КонецЕсли;
		НаименованияГрузаПриИзменении(Неопределено);
		НаименованияУпаковкиПриИзменении(Неопределено);
		ВесПриИзменении(Неопределено);
		ОбъемПриИзменении(Неопределено);
		УстановитьВидимостьАТИ();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Элемент.ТекущийЭлемент = Элементы[Элемент.Имя + "ФлагВыбора"] Тогда
		СтандартнаяОбработка = Ложь;
		Если Элемент.ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		МассивГрупп = Новый Массив();
		МассивГрупп.Добавить("91");
		МассивГрупп.Добавить("844424930131980");
		МассивГрупп.Добавить("70368744191104");
		МассивГрупп.Добавить("18726594281984");

		Элемент.ТекущиеДанные.ФлагВыбора = НЕ Элемент.ТекущиеДанные.ФлагВыбора;
		Если Элемент.Имя = "ТипыКузова" Тогда
			Если МассивГрупп.Найти(Элемент.ТекущиеДанные.Идентификатор) <> Неопределено Тогда
				Если Элемент.ТекущиеДанные.Идентификатор = "844424930131980" Тогда
					Итератор = 8;
					Строки = Объект.ТипыКузова.НайтиСтроки(Новый Структура("Идентификатор", "8"));
					Если Строки.Количество() <> 0 Тогда
						Строки[0].ФлагВыбора = Элемент.ТекущиеДанные.ФлагВыбора;
						Строки[0].ИдентификаторГруппы = Элемент.ТекущиеДанные.Идентификатор;
					КонецЕсли;
				Иначе
					Итератор = 0;
				КонецЕсли;
				ФлагГруппы = Ложь;
				Для Каждого ТекСтрока Из Объект.ТипыКузова Цикл
					Если ТекСтрока.Идентификатор = Элемент.ТекущиеДанные.Идентификатор Тогда
						ФлагГруппы = Истина;
						Продолжить;
					Конецесли;
					Если ФлагГруппы Тогда
						Если Итератор = Число(Элемент.ТекущиеДанные.Идентификатор) Тогда
							Прервать;
						Конецесли;
						Итератор = Итератор + Число(ТекСтрока.Идентификатор);
						ТекСтрока.ФлагВыбора = Элемент.ТекущиеДанные.ФлагВыбора;
						ТекСтрока.ИдентификаторГруппы = Элемент.ТекущиеДанные.Идентификатор;
					Конецесли;
				КонецЦикла;
			КонецЕсли;
			Если Элемент.ТекущиеДанные.Идентификатор = "8"
				И НЕ Элемент.ТекущиеДанные.ФлагВыбора Тогда
				Строки = Объект.ТипыКузова.НайтиСтроки(Новый Структура("Идентификатор", "844424930131980"));
				Если Строки.Количество() <> 0 Тогда
					Строки[0].ФлагВыбора = 0;
				КонецЕсли;
				Строки = Объект.ТипыКузова.НайтиСтроки(Новый Структура("Идентификатор", "91"));
				Если Строки.Количество() <> 0 Тогда
					Строки[0].ФлагВыбора = 0;
				КонецЕсли;
			ИначеЕсли ЗначениеЗаполнено(Элемент.ТекущиеДанные.ИдентификаторГруппы) 
				И НЕ Элемент.ТекущиеДанные.ФлагВыбора Тогда
				Строки = Объект.ТипыКузова.НайтиСтроки(Новый Структура("Идентификатор", Элемент.ТекущиеДанные.ИдентификаторГруппы));
				Если Строки.Количество() <> 0 Тогда
					Строки[0].ФлагВыбора = 0;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.Организация) Тогда
		мВидимостьРеквизитовНДС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
			ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.УчитыватьНДС"));
			
		Если Объект.Биржа = ПредопределенноеЗначение("Справочник.уатБиржиГрузоперевозок_уэ.АТИ") Тогда
			Объект.УчетнаяЗапись = ПолучитьУчетнуюЗаписьАТИ(Объект.Биржа, Объект.Организация, Объект.Ответственный);
			ПолучениеИнформацииОбАккаунте(СоответсвиеКонтактов);
			ПолучениеСпискаПлощадокДляРазмещения();
			УстановитьВидимостьАТИ();
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйПриИзменении(Элемент)
	Если Объект.Биржа = ПредопределенноеЗначение("Справочник.уатБиржиГрузоперевозок_уэ.АТИ") Тогда
		Объект.УчетнаяЗапись = ПолучитьУчетнуюЗаписьАТИ(Объект.Биржа, Объект.Организация, Объект.Ответственный);
		ПолучениеИнформацииОбАккаунте(СоответсвиеКонтактов);
		ПолучениеСпискаПлощадокДляРазмещения();
		УстановитьВидимостьАТИ();
	КонецЕсли;
КонецПроцедуры

#Область АТИ

&НаКлиенте
Процедура НаименованияГрузаПриИзменении(Элемент)
	Объект.ИдентификаторНаименованияГруза = СтрЗаменить(СтрЗаменить(СоответсвиеИдентификаторНаименованияГруза.Получить(НаименованиеГруза), " ", ""), Символы.НПП, "");
	УстановитьВидимостьАТИ();
КонецПроцедуры

&НаКлиенте
Процедура СтавкаНалПриИзменении(Элемент)
	УстановитьВидимостьАТИ();
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеКонтактаПриИзменении(Элемент)
	Объект.ИдентификаторКонтакта = СтрЗаменить(СтрЗаменить(СоответсвиеКонтактов.Получить(НаименованиеКонтакта), " ", ""), Символы.НПП, "");
КонецПроцедуры

&НаКлиенте
Процедура ЧерезБанкДнейВключеноПриИзменении(Элемент)
	УстановитьВидимостьАТИ();
КонецПроцедуры

&НаКлиенте
Процедура ПеревозчикиУчитыватьНДСПриИзменении(Элемент)
	
	ТекСтрока = Элементы.Перевозчики.ТекущиеДанные;
	
	ПредСуммаВключаетНДС = ТекСтрока.СуммаВключаетНДС;
	ПредУчитыватьНДС     = ТекСтрока.УчитыватьНДС;
	
	Если ТекСтрока.УчитыватьНДСПредставление = "Строка без НДС" Тогда
		ТекСтрока.УчитыватьНДС = Ложь;
		ТекСтрока.СуммаВключаетНДС = Ложь;
		ТекСтрока.СтавкаНДС = Неопределено;
		ТекСтрока.СуммаНДС = 0;
		ТекСтрока.Всего = 0;
	ИначеЕсли ТекСтрока.УчитыватьНДСПредставление = "НДС в сумме" Тогда
		ТекСтрока.УчитыватьНДС = Истина;
		ТекСтрока.СуммаВключаетНДС = Истина;
	Иначе
		ТекСтрока.УчитыватьНДС = Истина;
		ТекСтрока.СуммаВключаетНДС = Ложь;
	КонецЕсли;
	
	Если ТекСтрока.УчитыватьНДС И НЕ ЗначениеЗаполнено(ТекСтрока.СтавкаНДС) Тогда
		ТекСтрока.СтавкаНДС = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрока.Услуга, "СтавкаНДС");
	КонецЕсли;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрока);
	
	ОбновитьНДСвТЧПеревозчики();
КонецПроцедуры

&НаКлиенте
Процедура ПеревозчикиСуммаНДСПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Перевозчики.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;

	РассчитатьСуммуВСтрокеТабличнойЧасти(ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ПромежуточныеПунктыИдентификаторГородаСтрокаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПромежуточныеПункты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ТекущиеДанные.ИдентификаторГорода = "";
	ПодобратьГород(ТекущиеДанные,0,Элемент);
КонецПроцедуры

&НаКлиенте
Процедура НаименованияУпаковкиПриИзменении(Элемент)
	Объект.ИдентификаторНаименованияУпаковки = СтрЗаменить(СтрЗаменить(СоответсвиеИдентификаторНаименованияУпаковки.Получить(НаименованиеУпоковки), " ", ""), Символы.НПП, "");
	УстановитьВидимостьАТИ();
КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикаИзменениеТекстаРедактирования(Элемент, Текст, СтандартнаяОбработка)
	Если НЕ ЭтоЧисло(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		Объект[Элемент.Имя] = Объект[Элемент.Имя];
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		Объект[Элемент.Имя] = "0";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВариантЗагрузкиСтрокаПриИзменении(Элемент)
	Если ВариантЗагрузкиСтрока = Нстр("ru = 'только отдельной машиной'") Тогда
		Объект.ВариантЗагрузки = 1;
	ИначеЕсли ВариантЗагрузкиСтрока = Нстр("ru = 'отдельной или догрузом'") Тогда
		Объект.ВариантЗагрузки = 2;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторГородаОтправленияПриИзменении(Элемент)
	
	Если Объект.ПромежуточныеПункты.Количество() <> 0 Тогда
		Объект.ПромежуточныеПункты[0].ИдентификаторГородаСтрока = ИдентификаторГородаОтправления;
		Объект.ПромежуточныеПункты[0].ИдентификаторГорода = "";
	Иначе
		НоваяСтрока = Объект.ПромежуточныеПункты.Добавить();
		НоваяСтрока.ИдентификаторГородаСтрока = ИдентификаторГородаОтправления;
		НоваяСтрока.ИдентификаторГорода = "";
		НоваяСтрока.ТипТочкиМаршрута = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Погрузка");
	КонецЕсли;
	
	Строки  = Объект.БлижайшиеКрупныеГорода.НайтиСтроки(Новый Структура("ИдентификаторГородаОснования", "0"));
	Для Каждого ТекСтрока Из Строки Цикл
		Объект.БлижайшиеКрупныеГорода.Удалить(ТекСтрока);
	КонецЦикла;

	ОбновитьЭлементыТеговХарактеристик("ОблакоТеговХарактеристик", "0");
	УстановитьВидимостьАТИ();
	ПодобратьГород(Объект.ПромежуточныеПункты[0],1, Элемент,"ИдентификаторГородаОтправления");

КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторГородаПрибытияПриИзменении(Элемент)
	
	Если Объект.ПромежуточныеПункты.Количество() <> 0 Тогда
		Если Объект.ПромежуточныеПункты.Количество() = 1 Тогда 
			НоваяСтрока = Объект.ПромежуточныеПункты.Добавить();
			НоваяСтрока.ИдентификаторГородаСтрока = ИдентификаторГородаПрибытия;
			НоваяСтрока.ИдентификаторГорода = "";
			НоваяСтрока.ТипТочкиМаршрута = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Разгрузка");
		КонецЕсли;
		Объект.ПромежуточныеПункты[Объект.ПромежуточныеПункты.Количество() - 1].ИдентификаторГородаСтрока = ИдентификаторГородаПрибытия;
		Объект.ПромежуточныеПункты[Объект.ПромежуточныеПункты.Количество() - 1].ИдентификаторГорода       = "";
	Иначе
		НоваяСтрока = Объект.ПромежуточныеПункты.Добавить();
		НоваяСтрока.ИдентификаторГородаСтрока = ИдентификаторГородаПрибытия;
		НоваяСтрока.ИдентификаторГорода = "";
		НоваяСтрока.ТипТочкиМаршрута = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Разгрузка");
	КонецЕсли;

	Строки  = Объект.БлижайшиеКрупныеГорода.НайтиСтроки(Новый Структура("ИдентификаторГородаОснования", "1"));
	Для Каждого ТекСтрока Из Строки Цикл
		Объект.БлижайшиеКрупныеГорода.Удалить(ТекСтрока);
	КонецЦикла;

	ОбновитьЭлементыТеговХарактеристик("ОблакоТеговХарактеристикПрибытие", "1");
	УстановитьВидимостьАТИ();
	ПодобратьГород(Объект.ПромежуточныеПункты[Объект.ПромежуточныеПункты.Количество() - 1],2, Элемент,"ИдентификаторГородаПрибытия");

КонецПроцедуры

&НаКлиенте
Процедура БиржаПриИзменении(Элемент)

	Если Объект.Биржа = ПредопределенноеЗначение("Справочник.уатБиржиГрузоперевозок_уэ.АТИ") Тогда
		БиржаАТИПриИзменении();
		Если СпособЗаполнения = 1 Тогда
			ЗаполнитьРеквизитыАТИПоМЛ(СоответсвиеНоменклатураНаименованияГруза, СоответсвиеВидГрузаНаименованияУпаковки, СоответсвиеНаименованияВалют);
		Иначе
			ЗаполнитьРеквизитыАТИПоЗаказуНаТС(СоответсвиеНоменклатураНаименованияГруза, СоответсвиеВидГрузаНаименованияУпаковки, СоответсвиеНаименованияВалют);
		КонецЕсли;
		НаименованияГрузаПриИзменении(Неопределено);
		НаименованияУпаковкиПриИзменении(Неопределено);
		ВесПриИзменении(Неопределено);
		ОбъемПриИзменении(Неопределено);
	КонецЕсли;
	УстановитьВидимостьАТИ();

КонецПроцедуры

&НаКлиенте
Процедура ПредоплатаВключенаПриИзменении(Элемент)
	УстановитьВидимостьАТИ();
КонецПроцедуры

&НаКлиенте
Процедура ВесПриИзменении(Элемент)
	Объект.Вес  = Вес;
КонецПроцедуры

&НаКлиенте
Процедура ОбъемПриИзменении(Элемент)
	Объект.Объем = Объем;
КонецПроцедуры

&НаКлиенте
Процедура ВалютаПриИзменении(Элемент)
	Объект.ИдентификаторВалюты = СтрЗаменить(СтрЗаменить(СоответсвиеВалют.Получить(ВалютаСтрока), " ", ""), Символы.НПП, "");
	Объект.ВалютаДокумента     = СоответсвиеВалютаНаименования.Получить(ВалютаСтрока);
	
	СтруктураКурса                 = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
	Объект.КурсВзаиморасчетов      = СтруктураКурса.Курс;
	Объект.КратностьВзаиморасчетов = СтруктураКурса.Кратность;

КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторГородаОтправленияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Объект.ПромежуточныеПункты.Количество() = 0 
		ИЛИ (Объект.ПромежуточныеПункты.Количество() = 1 
		И Объект.ПромежуточныеПункты[0].ТипТочкиМаршрута = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Разгрузка")) Тогда
		НоваяСтрока = Объект.ПромежуточныеПункты.Добавить();
		НоваяСтрока.ТипТочкиМаршрута = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Погрузка");
	КонецЕсли;
	Строки  = Объект.БлижайшиеКрупныеГорода.НайтиСтроки(Новый Структура("ИдентификаторГородаОснования", "0"));
	Для Каждого ТекСтрока Из Строки Цикл
		Объект.БлижайшиеКрупныеГорода.Удалить(ТекСтрока);
	КонецЦикла;
	
	ПодобратьГород(Объект.ПромежуточныеПункты[0],1, Элемент,"ИдентификаторГородаОтправления");
КонецПроцедуры

&НаКлиенте
Процедура ИдентификаторГородаПрибытияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Объект.ПромежуточныеПункты.Количество() = 0 
		ИЛИ (Объект.ПромежуточныеПункты.Количество() = 1 
		И Объект.ПромежуточныеПункты[0].ТипТочкиМаршрута = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Погрузка")) Тогда
		НоваяСтрока = Объект.ПромежуточныеПункты.Добавить();
		НоваяСтрока.ТипТочкиМаршрута = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Разгрузка");
	КонецЕсли;
	Строки  = Объект.БлижайшиеКрупныеГорода.НайтиСтроки(Новый Структура("ИдентификаторГородаОснования", "1"));
	Для Каждого ТекСтрока Из Строки Цикл
		Объект.БлижайшиеКрупныеГорода.Удалить(ТекСтрока);
	КонецЦикла;
	
	ПодобратьГород(Объект.ПромежуточныеПункты[Объект.ПромежуточныеПункты.Количество() - 1],2, Элемент,"ИдентификаторГородаПрибытия");
КонецПроцедуры

&НаКлиенте
Процедура ПромежуточныеПунктыИдентификаторГородаСтрокаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПромежуточныеПункты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ПодобратьГород(ТекущиеДанные,0,Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ПромежуточныеПунктыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ЭтотОбъект.ИдентификаторГородаОтправления = Объект.ПромежуточныеПункты[0].ИдентификаторГородаСтрока;
	ЭтотОбъект.ИдентификаторГородаПрибытия    = Объект.ПромежуточныеПункты[Объект.ПромежуточныеПункты.Количество() - 1].ИдентификаторГородаСтрока;
	УстановитьВидимостьАТИ();
КонецПроцедуры

&НаКлиенте
Процедура ПрикрепитьБлижайшиеГорода(Элемент)
	Если Объект.ПромежуточныеПункты.Количество() = 0
		ИЛИ НЕ ЗначениеЗаполнено(Объект.ПромежуточныеПункты[0].ИдентификаторГорода) Тогда
		Возврат;
	КонецЕсли;
	СписокГородов = уатИнтеграции_уэ.АТИ_ПолучениеCпискаБлижайшихГородов(Объект.УчетнаяЗапись, СтрЗаменить(Объект.ПромежуточныеПункты[0].ИдентификаторГорода, Символы.НПП, ""));
	КолВоГородов = 1;
	Для Каждого ТекСтрока Из СписокГородов Цикл
		Если КолВоГородов > 3 
			ИЛИ Объект.БлижайшиеКрупныеГорода.Количество() >= 10 Тогда
			Прервать;
		КонецЕсли;
		Если Объект.БлижайшиеКрупныеГорода.НайтиСтроки(
			Новый Структура("ИдентификаторГородаОснования, ИдентификаторГорода", "0", ТекСтрока.Значение)).Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = Объект.БлижайшиеКрупныеГорода.Добавить();
		НоваяСтрока.ИдентификаторГородаОснования = "0";
		НоваяСтрока.ИдентификаторГорода          = ТекСтрока.Значение;
		НоваяСтрока.ИдентификаторГородаСтрока    = ТекСтрока.Представление;
		
		НавигационнаяСсылкаФС = "Тег_" + НоваяСтрока.ПолучитьИдентификатор();
		НоваяСтрока.Представление   = ФорматированнаяСтрокаПредставленияТега(ТекСтрока.Представление, Ложь, НавигационнаяСсылкаФС);
		
		КолВоГородов = КолВоГородов + 1;
	КонецЦикла;
	ОбновитьЭлементыТеговХарактеристик("ОблакоТеговХарактеристик", "0");
	
КонецПроцедуры

&НаКлиенте
Процедура ПрикрепитьБлижайшиеГорода1(Элемент)
	Если Объект.ПромежуточныеПункты.Количество() = 0
		ИЛИ НЕ ЗначениеЗаполнено(Объект.ПромежуточныеПункты[Объект.ПромежуточныеПункты.Количество() - 1].ИдентификаторГорода) Тогда
		Возврат;
	КонецЕсли;
	СписокГородов = уатИнтеграции_уэ.АТИ_ПолучениеCпискаБлижайшихГородов(Объект.УчетнаяЗапись, СтрЗаменить(Объект.ПромежуточныеПункты[Объект.ПромежуточныеПункты.Количество() - 1].ИдентификаторГорода, Символы.НПП, ""));
	КолВоГородов = 1;
	Для Каждого ТекСтрока Из СписокГородов Цикл
		Если КолВоГородов > 3 
			ИЛИ Объект.БлижайшиеКрупныеГорода.Количество() >= 10 Тогда
			Прервать;
		КонецЕсли;
		Если Объект.БлижайшиеКрупныеГорода.НайтиСтроки(
			Новый Структура("ИдентификаторГородаОснования, ИдентификаторГорода", "1", ТекСтрока.Значение)).Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		НоваяСтрока = Объект.БлижайшиеКрупныеГорода.Добавить();
		НоваяСтрока.ИдентификаторГородаОснования = "1";
		НоваяСтрока.ИдентификаторГорода          = ТекСтрока.Значение;
		НоваяСтрока.ИдентификаторГородаСтрока    = ТекСтрока.Представление;
		
		НавигационнаяСсылкаФС = "Тег_" + НоваяСтрока.ПолучитьИдентификатор();
		НоваяСтрока.Представление   = ФорматированнаяСтрокаПредставленияТега(ТекСтрока.Представление, Ложь, НавигационнаяСсылкаФС);
		
		КолВоГородов = КолВоГородов + 1;
	КонецЦикла;
	ОбновитьЭлементыТеговХарактеристик("ОблакоТеговХарактеристикПрибытие", "1");
	
КонецПроцедуры

&НаКлиенте
Процедура ОблакоТеговХарактеристикОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТегИД = Сред(НавигационнаяСсылкаФорматированнойСтроки, СтрДлина("Тег_")+1);
	СтрокаТегов = Объект.БлижайшиеКрупныеГорода.НайтиПоИдентификатору(ТегИД);
	Объект.БлижайшиеКрупныеГорода.Удалить(СтрокаТегов);
	
	ОбновитьЭлементыТеговХарактеристик("ОблакоТеговХарактеристик", "0");
	
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ОблакоТеговХарактеристикОбработкаНавигационнойСсылки1(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ТегИД = Сред(НавигационнаяСсылкаФорматированнойСтроки, СтрДлина("Тег_")+1);
	СтрокаТегов = Объект.БлижайшиеКрупныеГорода.НайтиПоИдентификатору(ТегИД);
	Объект.БлижайшиеКрупныеГорода.Удалить(СтрокаТегов);
	
	ОбновитьЭлементыТеговХарактеристик("ОблакоТеговХарактеристикПрибытие", "1");
	
	Модифицированность = Истина;

КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_Перевозчики

&НаКлиенте
Процедура ПеревозчикиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбновитьСтатусыГрузовСервер();
	ОбновитьВсегоВТЧПеревозчикиСервер();
	ОбновитьНДСвТЧПеревозчики();
	ВывестиСуммовыеИтогиДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеревозчикиПослеУдаления(Элемент)
	
	ОбновитьСтатусыГрузовСервер();
	ОбновитьВсегоВТЧПеревозчикиСервер();
	ВывестиСуммовыеИтогиДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеревозчикиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		ТекущиеДанные = Элементы.Перевозчики.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		Конецесли;
		
		ТекущиеДанные.СпособЗапроса = ПредопределенноеЗначение("Справочник.уатСпособыВзаимодействий_уэ.БиржаГрузоперевозок");		
		ТекущиеДанные.УчитыватьНДС  = мВидимостьРеквизитовНДС;
		ТекущиеДанные.СуммаВключаетНДС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.СуммаВключаетНДС"));
	КонецЕсли;
	ОбновитьНДСвТЧПеревозчики();
КонецПроцедуры


&НаКлиенте
Процедура ПеревозчикиПеревозчикНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("РегистрСведений.уатСведенияОКонтрагентах_уэ.Форма.ФормаВыбораПеревозчика",, Элемент,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеревозчикиПеревозчикОткрытие(Элемент, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.Перевозчики.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;

	Если ТипЗнч(ТекущиеДанные.Перевозчик) = Тип("Строка") Тогда
		Структура = Новый Структура("Контрагент", ТекущиеДанные.Перевозчик);
		Массив = Новый Массив;
		Массив.Добавить(Структура);
		Ключ = Новый("РегистрСведенийКлючЗаписи.уатСведенияОКонтрагентах_уэ", Массив); 
		ПараметрыФормы = Новый Структура("Ключ", Ключ);
		ОткрытьФорму("РегистрСведений.уатСведенияОКонтрагентах_уэ.Форма.ФормаЗаписи",ПараметрыФормы, Элемент,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПеревозчикиПеревозчикОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.Перевозчики.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеПеревозчика = уатЗащищенныеФункцииСервер_уэ.ПолучитьДанныеПеревозчика(ВыбранноеЗначение);
	
	ТекущиеДанные.Услуга = ДанныеПеревозчика.Услуга;
	
	Если ЗначениеЗаполнено(ДанныеПеревозчика.СтавкаНДС) Тогда 
		ТекущиеДанные.СтавкаНДС = ДанныеПеревозчика.СтавкаНДС;
		
	Иначе 
		ТекущиеДанные.СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
			ПользователиКлиентСервер.АвторизованныйПользователь(), 
			"ОсновнаяСтавкаНДС");
	КонецЕсли;
	
	РассчитатьСуммуНДС(ТекущиеДанные);
	ОбновитьВсегоВТЧПеревозчикиСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеревозчикиУслугаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Перевозчики.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	СтавкаНДСУслуги = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекущиеДанные.Услуга, "СтавкаНДС");
	
	Если ЗначениеЗаполнено(СтавкаНДСУслуги) Тогда 
		ТекущиеДанные.СтавкаНДС = СтавкаНДСУслуги;
		
	Иначе 
		ТекущиеДанные.СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
			ПользователиКлиентСервер.АвторизованныйПользователь(), 
			"ОсновнаяСтавкаНДС");
	КонецЕсли;
	
	РассчитатьСуммуНДС(ТекущиеДанные);
	ОбновитьВсегоВТЧПеревозчикиСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеревозчикиСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Перевозчики.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеревозчикиСтавкаНДСПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.Перевозчики.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	РассчитатьСуммуНДС(ТекущиеДанные);
	РассчитатьСуммуВсегоВстрокеТЧ(ТекущиеДанные);
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_Грузы

&НаКлиенте
Процедура ГрузыПриИзменении(Элемент)
	
	ОбновитьСтатусыГрузовСервер();
	ОбновитьВсегоВТЧПеревозчикиСервер();
	
	Если ЗначениеЗаполнено(Объект.Биржа) Тогда
		Если СпособЗаполнения = 1 Тогда
			ЗаполнитьРеквизитыАТИПоМЛ(СоответсвиеНоменклатураНаименованияГруза, СоответсвиеВидГрузаНаименованияУпаковки, СоответсвиеНаименованияВалют);
		Иначе
			ЗаполнитьРеквизитыАТИПоЗаказуНаТС(СоответсвиеНоменклатураНаименованияГруза, СоответсвиеВидГрузаНаименованияУпаковки, СоответсвиеНаименованияВалют);
		КонецЕсли;
		
		Итератор = 0;
		Для Каждого ТекСтрока Из Объект.ПромежуточныеПункты Цикл
			Если Итератор = 0 Тогда
				ИдетификаторГорода = "ИдентификаторГородаОтправления";
			ИначеЕсли Итератор = Объект.ПромежуточныеПункты.Количество()-1 Тогда
				ИдетификаторГорода = "ИдентификаторГородаПрибытия";
			Иначе
				ИдетификаторГорода = "";
			КонецЕсли;
			ПодобратьГород(ТекСтрока,0,,ИдетификаторГорода);
			Итератор = Итератор + 1;
		КонецЦикла;
		
		НаименованияГрузаПриИзменении(Неопределено);
		НаименованияУпаковкиПриИзменении(Неопределено);
		ВесПриИзменении(Неопределено);
		ОбъемПриИзменении(Неопределено);
		УстановитьВидимостьАТИ();
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ГрузыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		ТекДанные = Элементы.Грузы.ТекущиеДанные;
		ТекДанные.Количество = 1;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбновитьСтатусыГрузовСервер();
	ОбновитьВсегоВТЧПеревозчикиСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузыЗаказПриИзменении(Элемент)
	
	ТекСтрока = Элементы.Грузы.ТекущиеДанные;
	Если ТекСтрока = Неопределено Или Не ЗначениеЗаполнено(ТекСтрока.Заказ) Тогда
		Возврат;
	КонецЕсли;
	
	ТекСтрока.ГрузовоеМесто = Неопределено;
	ТекСтрока.Количество = 1;
	ТекСтрока.ЕдиницаИзмерения = Неопределено;
	
	ОбновитьВесоОбъемныеПоказателиСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузыГрузовоеМестоПриИзменении(Элемент)
	
	ОбновитьВесоОбъемныеПоказателиСервер();
	
	ТекДанные = Элементы.Грузы.ТекущиеДанные;
	Если ТекДанные = Неопределено Или Не ЗначениеЗаполнено(ТекДанные.Заказ) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекДанные.ГрузовоеМесто) = Тип("СправочникСсылка.Номенклатура") И ЗначениеЗаполнено(ТекДанные.ГрузовоеМесто) тогда
		ТекДанные.ЕдиницаИзмерения = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекДанные.ГрузовоеМесто, "ЕдиницаХраненияОстатков");
	ИначеЕсли ТипЗнч(ТекДанные.ГрузовоеМесто) = Тип("СправочникСсылка.уатГрузовыеМеста_уэ") И ЗначениеЗаполнено(ТекДанные.ГрузовоеМесто) тогда
		РеквизитыГрузовогоМеста = уатОбщегоНазначенияТиповые.ПолучитьЗначенияРеквизитов(ТекДанные.ГрузовоеМесто, "ВидУпаковки, ТипКонтейнера, Контейнер");
		Если РеквизитыГрузовогоМеста.Контейнер Тогда
			ТекДанные.ЕдиницаИзмерения = РеквизитыГрузовогоМеста.ТипКонтейнера;
		Иначе
			ТекДанные.ЕдиницаИзмерения = РеквизитыГрузовогоМеста.ВидУпаковки;
		КонецЕсли;
	Иначе
		ТекДанные.ЕдиницаИзмерения = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузыГрузовоеМестоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекСтрока = Элементы.Грузы.ТекущиеДанные;
	Если ТекСтрока = Неопределено Или Не ЗначениеЗаполнено(ТекСтрока.Заказ) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеВыбора = СписокГрузМестЗаказаСервер(ТекСтрока.Заказ);
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузыГрузовоеМестоОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекДанные = Элементы.Грузы.ТекущиеДанные;
	Если ТекДанные = Неопределено ИЛИ НЕ ЗначениеЗаполнено(ТекДанные.Заказ) Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.Номенклатура") И ЗначениеЗаполнено(ВыбранноеЗначение) тогда
		ТекДанные.ЕдиницаИзмерения = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "ЕдиницаХраненияОстатков");
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.уатГрузовыеМеста_уэ") И ЗначениеЗаполнено(ВыбранноеЗначение) тогда
		РеквизитыГрузовогоМеста = уатОбщегоНазначенияТиповые.ПолучитьЗначенияРеквизитов(ВыбранноеЗначение, "ВидУпаковки, ТипКонтейнера, Контейнер");
		Если РеквизитыГрузовогоМеста.Контейнер Тогда
			ТекДанные.ЕдиницаИзмерения = РеквизитыГрузовогоМеста.ТипКонтейнера;
		Иначе
			ТекДанные.ЕдиницаИзмерения = РеквизитыГрузовогоМеста.ВидУпаковки;
		КонецЕсли;
	Иначе
		ТекДанные.ЕдиницаИзмерения = Неопределено;
	КонецЕсли;
	
	ТекДанные.Количество = ПолучитьКоличествоГрузаПоЗаказу(ТекДанные.Заказ, ВыбранноеЗначение, ТекДанные.ЕдиницаИзмерения);
	
	ОбновитьВесоОбъемныеПоказателиСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузыКоличествоПриИзменении(Элемент)
	
	ОбновитьВесоОбъемныеПоказателиСервер();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ОчиститьПеревозчиков(Команда)
	
	Если Объект.Перевозчики.Количество() Тогда 
		ТекстНСТР = НСтр("en='Tabular section ""Carriers"" will be cleared. Continue?';ru='Табличная часть ""Перевозчики"" будет очищена. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ОчиститьПеревозчиковОтвет", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстНСТР, РежимДиалогаВопрос.ДаНет);
	Иначе 
		ОчиститьПеревозчиковЗавершение();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборПеревозчиков(Команда)
	
	ПараметрыФормы = Новый Структура("ЗакрыватьПриВыборе", Ложь);
	ОткрытьФорму("РегистрСведений.уатСведенияОКонтрагентах_уэ.Форма.ФормаВыбораПеревозчика", ПараметрыФормы, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПобедителя(Команда)
	
	ТекущиеДанные = Элементы.Перевозчики.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ЭтоПобедитель = ?(ТекущиеДанные.ЭтоПобедитель=0, 1, 0);
	
	Если ТекущиеДанные.ЭтоПобедитель Тогда
		Объект.СуммаДокумента = ТекущиеДанные.Сумма + ?(ТекущиеДанные.СуммаВключаетНДС, 0, ТекущиеДанные.СуммаНДС);
	Иначе
		Объект.СуммаДокумента = 0;
	Конецесли;
	
	Для Каждого ТекСтрока Из Объект.Перевозчики Цикл 
		Если ТекСтрока = ТекущиеДанные Тогда 
			Продолжить;
		КонецЕсли;
		
		ТекСтрока.ЭтоПобедитель = 0;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборЗаказов(Команда)
	
	Если Объект.Грузы.Количество() Тогда 
		ТекстНСТР = НСтр("en='Clear the list of orders before the selection?';ru='Очистить список заказов перед подбором?'");
		Оповещение = Новый ОписаниеОповещения("ПодборЗаказовОчисткаТЧ", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстНСТР, РежимДиалогаВопрос.ДаНетОтмена);
	Иначе 
		ПодборЗаказовОткрытьФормуПодбора();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЦеныИВалюту(Команда)
	
	ОбработатьИзмененияПоКнопкеЦеныИВалюты(Новый ОписаниеОповещения("РедактироватьЦеныИВалютуЗавершение", ЭтотОбъект), Объект.ВалютаДокумента);
	
КонецПроцедуры

#Область АТИ

&НаКлиенте
Процедура ОпубликоватьАТИ(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		ТекстНСТР = НСтр("en='To perform this operation, you must record the item. The document will be recorded.';ru='Для выполнения данной операции необходимо записать документ. Данные будут записаны.'");
		
		ОповещениеЗаписатьОбъект = Новый ОписаниеОповещения("ОпубликоватьАТИПродолжение", ЭтотОбъект);
		
		ПоказатьВопрос(ОповещениеЗаписатьОбъект, ТекстНСТР, РежимДиалогаВопрос.ДаНет);
	Иначе
		ОпубликоватьАТИКлиент();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Оформить(Команда)
	ТекущиеДанные = Элементы.Перевозчики.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено 
		ИЛИ НЕ ЗначениеЗаполнено(Объект.ИдентификаторАТИ) Тогда
		ТекстОшибки = Нстр("ru = 'Груз не опубликован.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,Объект.Ссылка,"Объект.ИдентификаторАТИ");
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ПодтвержденПеревозчиком
		И ТекущиеДанные.ЭтоПобедитель 
		И ЗначениеЗаполнено(ТекущиеДанные.GUID) Тогда
		
		ТекстОшибки = "";
		Ответ = уатИнтеграции_уэ.АТИ_СозданиеЗаявки(Объект.УчетнаяЗапись, ТекущиеДанные.GUID, ТекстОшибки);
		Если НЕ ЗначениеЗАполнено(ТекстОшибки) Тогда
			ТестСообщения = Новый ФорматированнаяСтрока("Перевозчик взял груз и прислал данные для заявки."
			,Символы.ПС, "Заявку можно оформить, перейдя по"," ", Новый ФорматированнаяСтрока(НСтр("ru='ссылке'"),,,,
			Ответ), ".");
			
			ОповещениеЗаписатьОбъект = Новый ОписаниеОповещения("ОформитьПродолжение", ЭтотОбъект, ТекущиеДанные);
			ПоказатьВопрос(ОповещениеЗаписатьОбъект,ТестСообщения,РежимДиалогаВопрос.ОКОтмена);
		Иначе
			ПоказатьПредупреждение(Неопределено, ТекстОшибки);;
		КонецЕсли;

	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Обработать(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.ИдентификаторАТИ) Тогда
		ТекстОшибки = Нстр("ru = 'Груз не опубликован.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,Объект.Ссылка,"Объект.ИдентификаторАТИ");
		Возврат;
	КонецЕсли;
	
	МассивСтрок = Объект.Перевозчики.НайтиСтроки(Новый Структура("ЭтоПобедитель", 1));
	Если МассивСтрок.Количество() <> 0 Тогда
		Строка = МассивСтрок[0];
	Иначе
		Возврат;
	КонецЕсли;

	ТекстОшибки = "";
	Ответ = уатИнтеграции_уэ.АТИ_СменаСтатусаБезоговорочнойСделкиНаПросмотрено(Объект.УчетнаяЗапись, Строка.Guid, ТекстОшибки);
	Если НЕ ЗначениеЗАполнено(ТекстОшибки) Тогда
		Строка.Ответ = ПредопределенноеЗначение("Перечисление.уатРезультатТендера_уэ.Обработан");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АрхивАТИ(Команда)
	
	GUID        = "";
	МассивСтрок = Объект.Перевозчики.НайтиСтроки(Новый Структура("ЭтоПобедитель", 1));
	Если МассивСтрок.Количество() <> 0 Тогда
		GUID = МассивСтрок[0].GUID;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(GUID) 
		ИЛИ (Объект.СтатусТендера <> ПредопределенноеЗначение("Справочник.уатСтатусы_уэ.Согласование") 
		И Объект.СтатусТендера <> ПредопределенноеЗначение("Справочник.уатСтатусы_уэ.ВИсполнении")) Тогда
		ТекстОшибки = Нстр("ru = 'Для данного груза не найдена безоговорочная сделка.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,Объект.Ссылка);
		Возврат;
	КонецЕсли;

	
	ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("АрхивАТИЗавершение", ЭтотОбъект, Новый Структура("GUID, НомерСтроки", GUID, МассивСтрок[0].ПолучитьИдентификатор()));
	ПоказатьВводСтроки(ОписаниеОповещенияОЗавершении,,Нстр("ru = 'Укажите причину, по которой отклоняется предложение на перевозку.'"), 150);

КонецПроцедуры

&НаКлиенте
Процедура УдалитьГруз(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.ИдентификаторАТИ) Тогда
		ТекстОшибки = Нстр("ru = 'Груз не опубликован.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,Объект.Ссылка,"Объект.ИдентификаторАТИ");
		Возврат;
	КонецЕсли;
	
	Если Объект.СтатусТендера = ПредопределенноеЗначение("Справочник.уатСтатусы_уэ.Архив") Тогда
		ТекстОшибки = Нстр("ru = 'Груз уже в архиве.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,Объект.Ссылка);
		Возврат;
	КонецЕсли;
	
	ТекстОшибки = "";
	уатИнтеграции_уэ.АТИ_УдалениеГруза(Объект.УчетнаяЗапись, Объект.ИдентификаторАТИ, ТекстОшибки);
	Если НЕ ЗначениеЗАполнено(ТекстОшибки) Тогда
		Объект.СтатусТендера = ПредопределенноеЗначение("Справочник.уатСтатусы_уэ.Архив");
		УстановитьУсловноеОформлениеПолейСтатусов();
		ПоказатьПредупреждение(Неопределено, Нстр("ru = 'Груз перемещен в архив.'"));
	Иначе
		ПоказатьПредупреждение(Неопределено, ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьАТИ(Команда)
	
	GUID        = "";
	МассивСтрок = Объект.Перевозчики.НайтиСтроки(Новый Структура("ЭтоПобедитель", 1));
	Если МассивСтрок.Количество() <> 0 Тогда
		GUID = МассивСтрок[0].GUID;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(GUID) 
		ИЛИ (Объект.СтатусТендера <> ПредопределенноеЗначение("Справочник.уатСтатусы_уэ.Согласование") 
		И Объект.СтатусТендера <> ПредопределенноеЗначение("Справочник.уатСтатусы_уэ.ВИсполнении")) Тогда
		ТекстОшибки = Нстр("ru = 'Для данного груза не найдена безоговорочная сделка.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,Объект.Ссылка);
		Возврат;
	КонецЕсли;

	ТекстОшибки = "";
	Ответ = уатИнтеграции_уэ.АТИ_ЗавершениеПеревозки(Объект.УчетнаяЗапись, GUID, ТекстОшибки);
	Если НЕ ЗначениеЗАполнено(ТекстОшибки) Тогда
		Объект.СтатусТендера = ПредопределенноеЗначение("Справочник.уатСтатусы_уэ.Завершено");
		УстановитьУсловноеОформлениеПолейСтатусов();
		ПоказатьПредупреждение(Неопределено, Нстр("ru = 'Сделка завершена.'"));
	Иначе
		ПоказатьПредупреждение(Неопределено, ТекстОшибки);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПригласитьНаСделку(Команда)
	ТекущиеДанные = Элементы.Перевозчики.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено 
		ИЛИ НЕ ЗначениеЗаполнено(Объект.ИдентификаторАТИ) Тогда
		ТекстОшибки = Нстр("ru = 'Груз не опубликован.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,Объект.Ссылка,"Объект.ИдентификаторАТИ");
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.Ответ = ПредопределенноеЗначение("Перечисление.уатРезультатТендера_уэ.Отклонен") Тогда
		ТекстОшибки = Нстр("ru = 'Данное предложение отклонено.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,Объект.Ссылка,"Объект.ИдентификаторАТИ");
		Возврат;
	КонецЕсли;

	МассивСтрок = Объект.Перевозчики.НайтиСтроки(Новый Структура("ЭтоПобедитель", 1));
	Если МассивСтрок.Количество() <> 0 
		И ЗначениеЗаполнено(МассивСтрок[0].GUID) Тогда
		ТекстОшибки = Нстр("ru = 'На данный груз уже имеется сделка.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ТекстОшибки  = "";
	СтрокаОтвета = ПригласитьНаСделкуСервер(ТекущиеДанные.GUID, ТекущиеДанные.СтрокаЗапроса, ТекстОшибки);
	Если НЕ ЗначениеЗаполнено(ТекстОшибки) Тогда
		ТекущиеДанные.ЗапросОтправлен = Истина;
		ТекущиеДанные.Ответ           = ПредопределенноеЗначение("Перечисление.уатРезультатТендера_уэ.ПриглашенНаСделку");
		Объект.СтатусТендера          = ПредопределенноеЗначение("Справочник.уатСтатусы_уэ.Согласование");
		ТекущиеДанные.ДатаЗапроса     = ТекущаяДата();
		УстановитьПобедителя(Неопределено);
	Иначе
		ПоказатьПредупреждение(Неопределено, ТекстОшибки);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьВсеСтроки(Команда)
	Для Каждого ТекСтрока Из Объект.ТипыЗагрузки Цикл
		ТекСтрока.ФлагВыбора = Истина;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметкиВоВсехСтроках(Команда)
	Для Каждого ТекСтрока Из Объект.ТипыЗагрузки Цикл
		ТекСтрока.ФлагВыбора = Ложь;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьВсеСтрокиТипВыгрузки(Команда)
	Для Каждого ТекСтрока Из Объект.ТипыВыгрузки Цикл
		ТекСтрока.ФлагВыбора = Истина;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметкиВоВсехСтрокахТипВыгрузки(Команда)
	Для Каждого ТекСтрока Из Объект.ТипыВыгрузки Цикл
		ТекСтрока.ФлагВыбора = Ложь;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьВсеСтрокиПлощадки(Команда)
	Для Каждого ТекСтрока Из Объект.Площадки Цикл
		ТекСтрока.ФлагВыбора = Истина;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметкиВоВсехСтрокахПлощадки(Команда)
	Для Каждого ТекСтрока Из Объект.Площадки Цикл
		ТекСтрока.ФлагВыбора = Ложь;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписок(Команда)
	ПолучениеСпискаПлощадокДляРазмещения();
КонецПроцедуры

&НаКлиенте
Процедура ОперацияИЛИ(Команда)
	Элементы.ОперацияИЛИТипыЗагрузки.Пометка = Истина;
	Элементы.ОперацияИТипыЗагрузки.Пометка   = Ложь;
	Объект.ОперацияТипаЗагрузки = "OR";
КонецПроцедуры

&НаКлиенте
Процедура ОперацияИЛИВыгрузка(Команда)
	Элементы.ОперацияИЛИТипыВыгрузки.Пометка = Истина;
	Элементы.ОперацияИТипыВыгрузки.Пометка   = Ложь;
	Объект.ОперацияТипаВыгрузки = "OR";
КонецПроцедуры

&НаКлиенте
Процедура ОперацияИ(Команда)
	Элементы.ОперацияИЛИТипыЗагрузки.Пометка = Ложь;
	Элементы.ОперацияИТипыЗагрузки.Пометка   = Истина;
	Объект.ОперацияТипаЗагрузки = "AND";
КонецПроцедуры

&НаКлиенте
Процедура ОперацияИВыгрузка(Команда)
	Элементы.ОперацияИЛИТипыВыгрузки.Пометка = Ложь;
	Элементы.ОперацияИТипыВыгрузки.Пометка   = Истина;
	Объект.ОперацияТипаВыгрузки = "AND";
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОбъемамПеревозок(Команда)
	Если Объект.Перевозчики.Количество() > 0 Тогда
		Оповещ = Новый ОписаниеОповещения("ЗаполнитьПоОбъемамПеревозокВопрос", ЭтотОбъект);
		ПоказатьВопрос(Оповещ, НСтр("ru = 'Табличная часть ""Перевозчики"" не пустая. Очистить перед заполнением?'"),
			РежимДиалогаВопрос.ДаНетОтмена);
	Иначе
		ЗаполнитьПоОбъемамПеревозокЗавершение();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура СтатусТендераПослеВыбораСтатуса(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Объект.СтатусТендера = РезультатЗакрытия;
	УстановитьУсловноеОформлениеПолейСтатусов();
	
	Если Объект.СтатусТендера = ПредопределенноеЗначение("Справочник.уатСтатусы_уэ.Закрыт")
			И Не ЗначениеЗаполнено(Объект.ДатаОкончания) Тогда 
		Объект.ДатаОкончания = ТекущаяДата();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеПолейСтатусов()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатСтатусы_уэ.Ссылка,
	|	уатСтатусы_уэ.Наименование,
	|	уатСтатусы_уэ.ЦветФонаПоУмолчанию,
	|	уатСтатусы_уэ.ЦветТекстаПоУмолчанию
	|ИЗ
	|	Справочник.уатСтатусы_уэ КАК уатСтатусы_уэ
	|ГДЕ
	|	НЕ уатСтатусы_уэ.ПометкаУдаления
	|	И уатСтатусы_уэ.ДействуетНаТендеры";
	
	ВыборкаЦвета = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЦвета.Следующий() Цикл 
		ЦветФона   = Неопределено;
		ЦветТекста = Неопределено;
		
		ХранилищеЦветФона = ВыборкаЦвета.ЦветФонаПоУмолчанию;
		Если Не ХранилищеЦветФона = Неопределено Тогда 
			ДанныеЦветФона = ХранилищеЦветФона.Получить();
			Если Не ДанныеЦветФона = Неопределено И ТипЗнч(ДанныеЦветФона) = Тип("Цвет") Тогда
				ЦветФона = ДанныеЦветФона;
			КонецЕсли;
		КонецЕсли;
		
		ХранилищеЦветТекста = ВыборкаЦвета.ЦветТекстаПоУмолчанию;
		Если Не ХранилищеЦветТекста = Неопределено Тогда 
			ДанныеЦветТекста = ХранилищеЦветТекста.Получить();
			Если Не ДанныеЦветТекста = Неопределено И ТипЗнч(ДанныеЦветТекста) = Тип("Цвет") Тогда
				ЦветТекста = ДанныеЦветТекста;
			КонецЕсли;
		КонецЕсли;
		
		Если ЦветТекста = Неопределено И ЦветФона = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		// Установка цвета реквизита шапки
		Если ВыборкаЦвета.Ссылка = Объект.СтатусТендера Тогда 
			Если Не ЦветТекста = Неопределено Тогда 
				Элементы.СтатусТендера.ЦветТекста = ЦветТекста;
			КонецЕсли;
			
			Если Не ЦветФона = Неопределено Тогда 
				Элементы.СтатусТендера.ЦветФона = ЦветФона;
			КонецЕсли;
			
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	// Цвет статуса в ТЧ Грузы
	
	мсвУдаляемыхЭлементов = Новый Массив();
	Для Каждого ЭлементУсловногоОформления Из УсловноеОформление.Элементы Цикл
		Если ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "Предустановленный_ЦветаСтатусовЗаказов" Тогда
			мсвУдаляемыхЭлементов.Добавить(ЭлементУсловногоОформления);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементУсловногоОформления Из мсвУдаляемыхЭлементов Цикл
		УсловноеОформление.Элементы.Удалить(ЭлементУсловногоОформления);
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатСтатусы_уэ.Ссылка,
	|	уатСтатусы_уэ.Наименование,
	|	уатСтатусы_уэ.ЦветФонаПоУмолчанию,
	|	уатСтатусы_уэ.ЦветТекстаПоУмолчанию
	|ИЗ
	|	Справочник.уатСтатусы_уэ КАК уатСтатусы_уэ
	|ГДЕ
	|	НЕ уатСтатусы_уэ.ПометкаУдаления
	|	И уатСтатусы_уэ.ДействуетНаЗаказыГрузоотправителей";
	
	ВыборкаЦвета = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЦвета.Следующий() Цикл 
		ЦветФона   = Неопределено;
		ЦветТекста = Неопределено;
		
		ХранилищеЦветФона = ВыборкаЦвета.ЦветФонаПоУмолчанию;
		Если Не ХранилищеЦветФона = Неопределено Тогда 
			ДанныеЦветФона = ХранилищеЦветФона.Получить();
			Если Не ДанныеЦветФона = Неопределено И ТипЗнч(ДанныеЦветФона) = Тип("Цвет") Тогда
				ЦветФона = ДанныеЦветФона;
			КонецЕсли;
		КонецЕсли;
		
		ХранилищеЦветТекста = ВыборкаЦвета.ЦветТекстаПоУмолчанию;
		Если Не ХранилищеЦветТекста = Неопределено Тогда 
			ДанныеЦветТекста = ХранилищеЦветТекста.Получить();
			Если Не ДанныеЦветТекста = Неопределено И ТипЗнч(ДанныеЦветТекста) = Тип("Цвет") Тогда
				ЦветТекста = ДанныеЦветТекста;
			КонецЕсли;
		КонецЕсли;
		
		Если ЦветТекста = Неопределено И ЦветФона = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		
		ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.Грузы.Статус");
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = ВыборкаЦвета.Ссылка;
		
		Если Не ЦветТекста = Неопределено Тогда 
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветТекста);
		КонецЕсли;
		
		Если Не ЦветФона = Неопределено Тогда 
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветФона);
		КонецЕсли;
		
		ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "Предустановленный_ЦветаСтатусовЗаказов";
		ЭлементУсловногоОформления.Представление = "По цвету статуса " + ВыборкаЦвета.Наименование;
		
		ПолеОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ГрузыСтатус");
		ПолеОформления.Использование = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РежимЗаполненияПриИзмененииОтвет(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.ОК Тогда 
		СпособЗаполнения = ПредСпособЗаполнения;
		Возврат;
	КонецЕсли;
	
	Объект.Грузы.Очистить();
	
	РежимЗаполненияПриИзмененииЗавершение();
	
КонецПроцедуры

&НаКлиенте
Процедура РежимЗаполненияПриИзмененииЗавершение()
	
	ПредСпособЗаполнения = СпособЗаполнения;
	
	Если СпособЗаполнения = 0 Тогда
		Объект.МаршрутныйЛист = Неопределено;
	КонецЕсли;
	
	УстановитьВидимость();
	
	ЗаполнитьДеревоЗаказовПоМЛ();
	
	Если ЗначениеЗаполнено(Объект.Биржа) Тогда
		Если СпособЗаполнения = 1 Тогда
			ЗаполнитьРеквизитыАТИПоМЛ(СоответсвиеНоменклатураНаименованияГруза, СоответсвиеВидГрузаНаименованияУпаковки, СоответсвиеНаименованияВалют);
		Иначе
			ЗаполнитьРеквизитыАТИПоЗаказуНаТС(СоответсвиеНоменклатураНаименованияГруза, СоответсвиеВидГрузаНаименованияУпаковки, СоответсвиеНаименованияВалют);
		КонецЕсли;
		НаименованияГрузаПриИзменении(Неопределено);
		НаименованияУпаковкиПриИзменении(Неопределено);
		ВесПриИзменении(Неопределено);
		ОбъемПриИзменении(Неопределено);
		УстановитьВидимостьАТИ();

	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьВидимость()
	
	Если Элементы.ПеревозчикиСтавкаНДС.Видимость <> Объект.УчитыватьНДС Тогда
		Элементы.ПеревозчикиСтавкаНДС.Видимость = Объект.УчитыватьНДС;
		Элементы.ПеревозчикиСуммаНДС.Видимость = Объект.УчитыватьНДС;
		Элементы.ПеревозчикиВсего.Видимость = Объект.УчитыватьНДС;
	КонецЕсли; 
	
	Если СпособЗаполнения = 1 Тогда // По маршрутным листам.
		Элементы.ГруппаМаршрутныйЛист.Видимость = Истина;
		Элементы.ГруппаГрузы.Видимость    = Ложь;
		Элементы.ГруппаМаршрут.Видимость  = Истина;
		Элементы.ПеревозчикиЗаполнитьПоОбъемамПеревозок.Видимость
			= ПолучитьФункциональнуюОпцию("уатИспользоватьЗакреплениеМаршрутныхЛистовЗаПеревозчиками_уэ");
		
	Иначе // По заказам на ТС.
		Элементы.ГруппаМаршрутныйЛист.Видимость = Ложь;
		Элементы.ГруппаГрузы.Видимость    = Истина;
		Элементы.ГруппаМаршрут.Видимость  = Ложь;
		Элементы.ПеревозчикиЗаполнитьПоОбъемамПеревозок.Видимость = Ложь;
	КонецЕсли;
	
	ВывестиСуммовыеИтогиДокумента();
	
КонецПроцедуры // УстановитьВидимость()

&НаСервере
Процедура ЗаполнитьДеревоЗаказовПоМЛ()
	
	Перем НовСтрокаПункт, ПредПункт, НовСтрокаЗаказ, ПредЗаказ, ПредСтрока;
	
	ЗаказыДерево.ПолучитьЭлементы().Очистить();
	ОбщееВремяСтоянок = 0;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", Объект.МаршрутныйЛист);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатМаршрутныйЛистЗаказы.НомерСтроки КАК НомерСтроки,
	|	уатМаршрутныйЛистЗаказы.ВесБрутто КАК ВесБрутто,
	|	уатМаршрутныйЛистЗаказы.Время КАК Время,
	|	уатМаршрутныйЛистЗаказы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя,
	|	уатМаршрутныйЛистЗаказы.Количество КАК Количество,
	|	уатМаршрутныйЛистЗаказы.КоличествоМест КАК КоличествоМест,
	|	уатМаршрутныйЛистЗаказы.Контрагент КАК Контрагент,
	|	уатМаршрутныйЛистЗаказы.Номенклатура КАК Номенклатура,
	|	уатМаршрутныйЛистЗаказы.Объем КАК Объем,
	|	уатМаршрутныйЛистЗаказы.ПрибытиеПлан КАК ПрибытиеПлан,
	|	уатМаршрутныйЛистЗаказы.УбытиеПлан КАК УбытиеПлан,
	|	уатМаршрутныйЛистЗаказы.Пункт КАК Пункт,
	|	уатМаршрутныйЛистЗаказы.Расстояние КАК Расстояние,
	|	уатМаршрутныйЛистЗаказы.Стоянка КАК Стоянка,
	|	уатМаршрутныйЛистЗаказы.СтоянкаИзПункта КАК СтоянкаИзПункта,
	|	уатМаршрутныйЛистЗаказы.ТипТочкиМаршрута КАК ТипТочкиМаршрута,
	|	уатМаршрутныйЛистЗаказы.Ссылка.ДатаИВремяОтправленияПлан КАК ДатаИВремяОтправленияПлан
	|ИЗ
	|	Документ.уатМаршрутныйЛист.Заказы КАК уатМаршрутныйЛистЗаказы
	|ГДЕ
	|	уатМаршрутныйЛистЗаказы.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	
	СменилсяПункт = Ложь;
	ПредСтрока    = Неопределено;
	ПредПункт     = Ложь;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		//пункт
		Если Выборка.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка Тогда
			ТекПункт = ?(ЗначениеЗаполнено(Выборка.Пункт), Выборка.Пункт, Выборка.ЗаказГрузоотправителя.АдресОтправления);
		ИначеЕсли Выборка.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка Тогда
			ТекПункт = ?(ЗначениеЗаполнено(Выборка.Пункт), Выборка.Пункт, Выборка.ЗаказГрузоотправителя.АдресНазначения);
		Иначе
			ТекПункт = Выборка.Пункт;
		КонецЕсли;
		
		Если Выборка.ЗаказГрузоотправителя.Пустая()
			ИЛИ Выборка.ТипТочкиМаршрута.Пустая() Тогда
			НовСтрокаПункт = ЗаказыДерево.ПолучитьЭлементы().Добавить();
			НовСтрокаПункт.ПунктЗаказНоменклатура = ТекПункт;
			НовСтрокаПункт.Расстояние             = Выборка.Расстояние;
			НовСтрокаПункт.Время                  = Выборка.Время;
			НовСтрокаПункт.ПрибытиеПлан           = Выборка.ПрибытиеПлан;
			
			ПредПункт     = ТекПункт;
			СменилсяПункт = Истина;
			
			Если ЗначениеЗаполнено(Выборка.УбытиеПлан) Тогда
				НовСтрокаПункт.УбытиеПлан = Выборка.УбытиеПлан;
			ИначеЕсли ЗаказыДерево.ПолучитьЭлементы().Индекс(НовСтрокаПункт) = 0 Тогда
				НовСтрокаПункт.УбытиеПлан = Выборка.ДатаИВремяОтправленияПлан;
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
		
		Если Не ТекПункт = ПредПункт Или СменилсяПункт Тогда
			НовСтрокаПункт = ЗаказыДерево.ПолучитьЭлементы().Добавить();
			НовСтрокаПункт.ПунктЗаказНоменклатура = ТекПункт;
			НовСтрокаПункт.Расстояние             = Выборка.Расстояние;
			НовСтрокаПункт.Время                  = Выборка.Время;
			НовСтрокаПункт.ПрибытиеПлан           = Выборка.ПрибытиеПлан;
			НовСтрокаПункт.СтоянкаИзПункта        = Выборка.СтоянкаИзПункта;
			
			ПредПункт     = ТекПункт;
			СменилсяПункт = Истина;
			
			Если ЗначениеЗаполнено(Выборка.УбытиеПлан) Тогда
				НовСтрокаПункт.УбытиеПлан = Выборка.УбытиеПлан;
			ИначеЕсли ЗаказыДерево.ПолучитьЭлементы().Индекс(НовСтрокаПункт) = 0 Тогда
				НовСтрокаПункт.УбытиеПлан = Выборка.ДатаИВремяОтправленияПлан;
			КонецЕсли;
		КонецЕсли;
		
		//Заказ
		Если НЕ Выборка.ЗаказГрузоотправителя = ПредЗаказ 
			ИЛИ (НЕ ПредСтрока = Неопределено
			И НЕ Выборка.ТипТочкиМаршрута = ПредСтрока.ТипТочкиМаршрута) 
			ИЛИ СменилсяПункт Тогда
				НовСтрокаЗаказ = НовСтрокаПункт.ПолучитьЭлементы().Добавить();
				НовСтрокаЗаказ.ПунктЗаказНоменклатура = Выборка.ЗаказГрузоотправителя;
				НовСтрокаЗаказ.ТипТочкиМаршрута       = Выборка.ТипТочкиМаршрута;
				НовСтрокаЗаказ.ВесБрутто              = Выборка.ВесБрутто;
				НовСтрокаЗаказ.Объем                  = Выборка.Объем;
				НовСтрокаЗаказ.КоличествоМест         = Выборка.КоличествоМест;
				НовСтрокаЗаказ.Стоянка                = Выборка.Стоянка;
				НовСтрокаЗаказ.СтоянкаИзПункта        = Выборка.СтоянкаИзПункта;
				НовСтрокаЗаказ.Расстояние             = Выборка.Расстояние;
				
				Если Выборка.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка Тогда
					НовСтрокаЗаказ.ОкноС  = Выборка.ЗаказГрузоотправителя.ОтправлениеС;
					НовСтрокаЗаказ.ОкноПо = Выборка.ЗаказГрузоотправителя.ОтправлениеПо;
					
				ИначеЕсли Выборка.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка Тогда
					НовСтрокаЗаказ.ОкноС  = Выборка.ЗаказГрузоотправителя.ДоставкаС;
					НовСтрокаЗаказ.ОкноПо = Выборка.ЗаказГрузоотправителя.ДоставкаПо;
				КонецЕсли;
				
				ПредЗаказ     = Выборка.ЗаказГрузоотправителя;
				СменилсяПункт = Ложь;
				
				ОбщееВремяСтоянок = уатЗащищенныеФункцииСервер.СложитьВремя(ОбщееВремяСтоянок, Выборка.Стоянка);
		КонецЕсли;
		
		Если Выборка.ЗаказГрузоотправителя.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам Тогда
			ПустаяЕИ = Справочники.ЕдиницыИзмерения.ПустаяСсылка();
			
			НовСтрокаЗаказ.Количество       = Выборка.Количество;
			НовСтрокаЗаказ.ВесБрутто        = Выборка.ВесБрутто;
			НовСтрокаЗаказ.Объем            = Выборка.Объем;
			НовСтрокаЗаказ.КоличествоМест   = Выборка.КоличествоМест;
			НовСтрокаЗаказ.ЕдиницаИзмерения = ПустаяЕИ;
			
		Иначе
			//номенклатура
			НовСтрокаНоменклатура = НовСтрокаЗаказ.ПолучитьЭлементы().Добавить();
			НовСтрокаНоменклатура.ПунктЗаказНоменклатура = Выборка.Номенклатура;
			НовСтрокаНоменклатура.Количество             = Выборка.Количество;
			НовСтрокаНоменклатура.ВесБрутто              = Выборка.ВесБрутто;
			НовСтрокаНоменклатура.Объем                  = Выборка.Объем;
			НовСтрокаНоменклатура.КоличествоМест         = Выборка.КоличествоМест;
			НовСтрокаНоменклатура.ЕдиницаИзмерения       = Выборка.ЕдиницаИзмерения;
		КонецЕсли;
		
		ПредСтрока = Выборка;
	КонецЦикла;
	
	ОбновитьМаршрутныеПараметрыДереваЗаказов();
	ОбновитьГрузовыеПараметрыДереваЗаказов();
	ОбновитьТипыЗначенийСтрокДереваЗаказов();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьМаршрутныеПараметрыДереваЗаказов()
	
	ЭлементыДерева = ЗаказыДерево.ПолучитьЭлементы();
	
	Если ЭлементыДерева.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ПредВремяОтпр       = ЭлементыДерева[0].УбытиеПлан;
	ПредПунктСтрока     = Неопределено;
	СуммарноеРасстояние = 0;
	СуммарноеВремя      = 0;
	
	Для Каждого ТекСтрокаПункт Из ЭлементыДерева Цикл
		СуммарноеВремяСтоянки = 0;
		
		Для Каждого ТекСтрокаЗаказ Из ТекСтрокаПункт.ПолучитьЭлементы() Цикл 
			СуммарноеВремяСтоянки = уатЗащищенныеФункцииСервер.СложитьВремя(СуммарноеВремяСтоянки, ТекСтрокаЗаказ.Стоянка);
		КонецЦикла;
		
		СуммарноеВремяСтоянки = уатЗащищенныеФункцииСервер.СложитьВремя(СуммарноеВремяСтоянки, ТекСтрокаПункт.СтоянкаИзПункта);
		
		ТекСтрокаПункт.Стоянка = СуммарноеВремяСтоянки;
		СуммарноеРасстояние    = СуммарноеРасстояние + ТекСтрокаПункт.Расстояние;
		
		Если ЭлементыДерева.Индекс(ТекСтрокаПункт) = 0 Тогда
			ПредВремяОтпр = ТекСтрокаПункт.УбытиеПлан;
		Иначе 
			ТекСтрокаПункт.ПрибытиеПлан = уатЗащищенныеФункцииСервер.СложитьВремя(ПредВремяОтпр,               ПредПунктСтрока.Время);
			ТекСтрокаПункт.УбытиеПлан   = уатЗащищенныеФункцииСервер.СложитьВремя(ТекСтрокаПункт.ПрибытиеПлан, СуммарноеВремяСтоянки);
			ПредВремяОтпр               = ТекСтрокаПункт.УбытиеПлан;
		КонецЕсли;
		
		ПредПунктСтрока = ТекСтрокаПункт;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьГрузовыеПараметрыДереваЗаказов()
	
	ТекВес   = 0; ТекОбъем   = 0; ТекКолМест   = 0;
	ЗаказВес = 0; ЗаказОбъем = 0; ЗаказКолМест = 0;
	
	СтрокиДерева = ЗаказыДерево.ПолучитьЭлементы();
	
	мсвЗаказыСДетализациейВцеломПоЗаказу = Новый Массив();
	Для Каждого ТекПункт Из СтрокиДерева Цикл
		Для Каждого ТекЗаказ Из ТекПункт.ПолучитьЭлементы() Цикл
			Если ЗначениеЗаполнено(ТекЗаказ.ПунктЗаказНоменклатура)
					И мсвЗаказыСДетализациейВцеломПоЗаказу.Найти(ТекЗаказ.ПунктЗаказНоменклатура) = Неопределено
					И ТекЗаказ.ПунктЗаказНоменклатура.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам Тогда
				мсвЗаказыСДетализациейВцеломПоЗаказу.Добавить(ТекЗаказ.ПунктЗаказНоменклатура)
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого ТекПункт Из СтрокиДерева Цикл
		Для Каждого ТекЗаказ Из ТекПункт.ПолучитьЭлементы() Цикл
			
			ЗаказВес = 0; ЗаказОбъем = 0; ЗаказКолМест = 0;
			
			Если ЗначениеЗаполнено(ТекЗаказ.ПунктЗаказНоменклатура)
				И мсвЗаказыСДетализациейВцеломПоЗаказу.Найти(ТекЗаказ.ПунктЗаказНоменклатура) <> Неопределено Тогда
				
				ЗаказВес     = ТекЗаказ.ПунктЗаказНоменклатура.ВесБрутто;
				ЗаказОбъем   = ТекЗаказ.ПунктЗаказНоменклатура.Объем;
				ЗаказКолМест = ТекЗаказ.ПунктЗаказНоменклатура.КоличествоМест;
			Иначе
				Для Каждого ТекНоменклатура Из ТекЗаказ.ПолучитьЭлементы() Цикл
					ЗаказВес     = ЗаказВес     + ТекНоменклатура.ВесБрутто;
					ЗаказОбъем   = ЗаказОбъем   + ТекНоменклатура.Объем;
					ЗаказКолМест = ЗаказКолМест + ТекНоменклатура.КоличествоМест;
				КонецЦикла;
			КонецЕсли;
			
			ТекЗаказ.ВесБрутто      = ЗаказВес;
			ТекЗаказ.Объем          = ЗаказОбъем;
			ТекЗаказ.КоличествоМест = ЗаказКолМест;
			Если ТекЗаказ.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка Тогда
				ТекВес     = ТекВес     + ЗаказВес;
				ТекОбъем   = ТекОбъем   + ЗаказОбъем;
				ТекКолМест = ТекКолМест + ЗаказКолМест;
			ИначеЕсли ТекЗаказ.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка Тогда
				ТекВес     = ТекВес     - ЗаказВес;
				ТекОбъем   = ТекОбъем   - ЗаказОбъем;
				ТекКолМест = ТекКолМест - ЗаказКолМест;
			КонецЕсли;
		КонецЦикла;
		
		ТекПункт.ВесБрутто      = ТекВес;
		ТекПункт.Объем          = ТекОбъем;
		ТекПункт.КоличествоМест = ТекКолМест;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТипыЗначенийСтрокДереваЗаказов(Узел = Неопределено)
	// Типы значений строки:
	// 1 - СправочникСсылка.уатПунктыНазначения 
	// 2 - ДокументСсылка.уатЗаказГрузоотправителя
	// 3 - Строка
	// 4 - СправочникСсылка.Номенклатура
	// 5 - СправочникСсылка.уатГрузовыеМеста_уэ
	
	Если Узел = Неопределено Тогда 
		Узел = ЗаказыДерево;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из Узел.ПолучитьЭлементы() Цикл 
		ОбновитьТипыЗначенийСтрокДереваЗаказов(ТекСтрока);
		Если ТипЗнч(ТекСтрока.ПунктЗаказНоменклатура) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда 
			ТекСтрока.ТипЗначенияСтроки = 1;
		ИначеЕсли ТипЗнч(ТекСтрока.ПунктЗаказНоменклатура) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") Тогда 
			ТекСтрока.ТипЗначенияСтроки = 2;
		ИначеЕсли ТипЗнч(ТекСтрока.ПунктЗаказНоменклатура) = Тип("Строка") Тогда 
			ТекСтрока.ТипЗначенияСтроки = 3;
		ИначеЕсли ТипЗнч(ТекСтрока.ПунктЗаказНоменклатура) = Тип("СправочникСсылка.Номенклатура") Тогда 
			ТекСтрока.ТипЗначенияСтроки = 4;
		ИначеЕсли ТипЗнч(ТекСтрока.ПунктЗаказНоменклатура) = Тип("СправочникСсылка.уатГрузовыеМеста_уэ") Тогда 
			ТекСтрока.ТипЗначенияСтроки = 5;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСтатусыГрузовСервер()
	
	мсвЗаказы = Новый Массив();
	Для Каждого ТекСтрока Из Объект.Грузы Цикл
		мсвЗаказы.Добавить(ТекСтрока.Заказ);
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("мсвЗаказы", мсвЗаказы);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатЗаказГрузоотправителя.Ссылка КАК Заказ
	|ПОМЕСТИТЬ ВРТ_Документы
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	|ГДЕ
	|	уатЗаказГрузоотправителя.Ссылка В(&мсвЗаказы)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатЭтапыМультимодальныхПеревозок_уэ.Этап
	|ИЗ
	|	РегистрСведений.уатЭтапыМультимодальныхПеревозок_уэ КАК уатЭтапыМультимодальныхПеревозок_уэ
	|ГДЕ
	|	уатЭтапыМультимодальныхПеревозок_уэ.ЗаказГрузоотправителя В(&мсвЗаказы)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Заказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатСтатусыГрузов_уэСрезПоследних.Период КАК Период,
	|	уатСтатусыГрузов_уэСрезПоследних.Заказ КАК Заказ,
	|	уатСтатусыГрузов_уэСрезПоследних.ГрузовоеМесто КАК ГрузовоеМесто,
	|	уатСтатусыГрузов_уэСрезПоследних.Статус КАК Статус
	|ИЗ
	|	РегистрСведений.уатСтатусыГрузов_уэ.СрезПоследних(
	|			,
	|			Заказ В
	|				(ВЫБРАТЬ
	|					ВТ.Заказ
	|				ИЗ
	|					ВРТ_Документы КАК ВТ)) КАК уатСтатусыГрузов_уэСрезПоследних
	|
	|УПОРЯДОЧИТЬ ПО
	|	Заказ,
	|	ГрузовоеМесто,
	|	Период УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатЗаказГрузоотправителя.Ссылка КАК Заказ,
	|	ВЫБОР
	|		КОГДА уатЗаказГрузоотправителя.Мультимодальный
	|				И НЕ уатЗаказГрузоотправителя.ЭтоЭтап
	|			ТОГДА ЕСТЬNULL(СтатусРодительскогоЗаказа.СтатусЭтапа, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый))
	|		ИНАЧЕ ВЫБОР
	|				КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЕСТЬNULL(уатСтатусыГрузов_уэСрезПоследних.Статус, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый))) > 1
	|					ТОГДА ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Составной)
	|				ИНАЧЕ МАКСИМУМ(ЕСТЬNULL(уатСтатусыГрузов_уэСрезПоследних.Статус, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый)))
	|			КОНЕЦ
	|	КОНЕЦ КАК СтатусЗаказа
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатСтатусыГрузов_уэ.СрезПоследних КАК уатСтатусыГрузов_уэСрезПоследних
	|		ПО (уатСтатусыГрузов_уэСрезПоследних.Заказ = уатЗаказГрузоотправителя.Ссылка)
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВЫБОР
	|				КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЕСТЬNULL(уатСтатусыГрузов_уэСрезПоследних.Статус, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый))) > 1
	|					ТОГДА ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Составной)
	|				ИНАЧЕ МАКСИМУМ(ЕСТЬNULL(уатСтатусыГрузов_уэСрезПоследних.Статус, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый)))
	|			КОНЕЦ КАК СтатусЭтапа,
	|			уатЭтапыМультимодальныхПеревозок_уэ.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя
	|		ИЗ
	|			РегистрСведений.уатЭтапыМультимодальныхПеревозок_уэ КАК уатЭтапыМультимодальныхПеревозок_уэ
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатСтатусыГрузов_уэ.СрезПоследних КАК уатСтатусыГрузов_уэСрезПоследних
	|				ПО (уатСтатусыГрузов_уэСрезПоследних.Заказ = уатЭтапыМультимодальныхПеревозок_уэ.Этап)
	|		ГДЕ
	|			уатЭтапыМультимодальныхПеревозок_уэ.ЗаказГрузоотправителя В(&мсвЗаказы)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			уатЭтапыМультимодальныхПеревозок_уэ.ЗаказГрузоотправителя) КАК СтатусРодительскогоЗаказа
	|		ПО уатЗаказГрузоотправителя.Ссылка = СтатусРодительскогоЗаказа.ЗаказГрузоотправителя
	|ГДЕ
	|	уатЗаказГрузоотправителя.Ссылка В(&мсвЗаказы)
	|
	|СГРУППИРОВАТЬ ПО
	|	уатЗаказГрузоотправителя.Мультимодальный,
	|	уатЗаказГрузоотправителя.ЭтоЭтап,
	|	СтатусРодительскогоЗаказа.СтатусЭтапа,
	|	уатЗаказГрузоотправителя.Ссылка";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	табСтатусыГрузов  = РезультатЗапроса[1].Выгрузить();
	табСтатусыЗаказов = РезультатЗапроса[2].Выгрузить();
	
	Для Каждого ТекСтрока Из Объект.Грузы Цикл 
		Если ТекСтрока.Заказ.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам Тогда 
			НайдСтроки = табСтатусыГрузов.НайтиСтроки(Новый Структура("Заказ, ГрузовоеМесто", ТекСтрока.Заказ, ТекСтрока.ГрузовоеМесто));
			Если НайдСтроки.Количество() Тогда 
				ТекСтрока.Статус = НайдСтроки[0].Статус;
			Иначе 
				ТекСтрока.Статус = Неопределено;
			КонецЕсли;
			
		Иначе 
			НайдСтроки = табСтатусыЗаказов.НайтиСтроки(Новый Структура("Заказ", ТекСтрока.Заказ));
			Если НайдСтроки.Количество() Тогда 
				ТекСтрока.Статус = НайдСтроки[0].СтатусЗаказа;
			Иначе 
				ТекСтрока.Статус = Неопределено;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьДетализациюЗаказовСервер();
	ОбновитьВесоОбъемныеПоказателиСервер();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДетализациюЗаказовСервер()
	
	Для Каждого ТекСтрока Из Объект.Грузы Цикл
		ТекСтрока.ДетализацияЗаказа = ТекСтрока.Заказ.ДетализацияЗакрытия;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВесоОбъемныеПоказателиСервер()
	
	Для Каждого ТекСтрока Из Объект.Грузы Цикл
		Если ТекСтрока.Заказ.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам Тогда
			СтрокаГруза = ТекСтрока.Заказ.ГрузовойСостав.Найти(ТекСтрока.ГрузовоеМесто, "ГрузовоеМесто");
			Если Не СтрокаГруза = Неопределено Тогда 
				ТекСтрока.ВесБрутто      = СтрокаГруза.ВесБрутто * (ТекСтрока.Количество / СтрокаГруза.КоличествоМест);
				ТекСтрока.Объем          = СтрокаГруза.Объем * (ТекСтрока.Количество / СтрокаГруза.КоличествоМест);
				
				Если ТипЗнч(СтрокаГруза.ВидУпаковки) = Тип("СправочникСсылка.уатВидыУпаковки_уэ") Тогда
					ТекСтрока.КоличествоМест = ?(СтрокаГруза.ВидУпаковки.Коэффициент = 0, 0, ТекСтрока.Количество / СтрокаГруза.ВидУпаковки.Коэффициент);
				Иначе
					ТекСтрока.КоличествоМест = 1;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ТекСтрока.Заказ.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам Тогда
			СтрокиТовара = ТекСтрока.Заказ.Товары.НайтиСтроки(Новый Структура("Номенклатура, ЕдиницаИзмерения", ТекСтрока.ГрузовоеМесто, ТекСтрока.ЕдиницаИзмерения));
			Если СтрокиТовара.Количество() Тогда 
				ТекСтрока.ВесБрутто      = СтрокиТовара[0].ВесБрутто * (ТекСтрока.Количество / СтрокиТовара[0].Количество);
				ТекСтрока.Объем          = СтрокиТовара[0].Объем * (ТекСтрока.Количество / СтрокиТовара[0].Количество);
				ТекСтрока.КоличествоМест = СтрокиТовара[0].КоличествоМест * (ТекСтрока.Количество / СтрокиТовара[0].Количество);
			КонецЕсли;
			
		ИначеЕсли ТекСтрока.Заказ.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам Тогда 
			ТекСтрока.ВесБрутто = ТекСтрока.Заказ.ВесБрутто;
			ТекСтрока.Объем = ТекСтрока.Заказ.Объем;
			ТекСтрока.КоличествоМест = ТекСтрока.Заказ.КоличествоМест;
			
		Иначе
			ТекСтрока.ВесБрутто = 0;
			ТекСтрока.Объем = 0;
			ТекСтрока.КоличествоМест = 0;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВсегоВТЧПеревозчикиСервер()
	
	ТабПеревозчики = Объект.Перевозчики.Выгрузить(, "Перевозчик");
	ТабПеревозчики.Свернуть("Перевозчик");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("мсвКонтрагенты", ТабПеревозчики.ВыгрузитьКолонку("Перевозчик"));
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатСведенияОКонтрагентах_уэ.Контрагент,
	|	уатСведенияОКонтрагентах_уэ.Рейтинг
	|ИЗ
	|	РегистрСведений.уатСведенияОКонтрагентах_уэ КАК уатСведенияОКонтрагентах_уэ
	|ГДЕ
	|	уатСведенияОКонтрагентах_уэ.Контрагент В(&мсвКонтрагенты)";
	
	ТабДанныхПеревозчиков = Запрос.Выполнить().Выгрузить();
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Перевозчики Цикл
		СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма
			+ ?(Объект.УчитыватьНДС И НЕ Объект.СуммаВключаетНДС, СтрокаТабличнойЧасти.СуммаНДС, 0);
	
		ДанныеПеревозчика = ТабДанныхПеревозчиков.Найти(СтрокаТабличнойЧасти.Перевозчик, "Контрагент");
		Если Не ДанныеПеревозчика = Неопределено Тогда 
			СтрокаТабличнойЧасти.Рейтинг = ДанныеПеревозчика.Рейтинг;
			СтрокаТабличнойЧасти.ПеревозчикСтрока = ЗначениеЗаполнено(СтрокаТабличнойЧасти.Перевозчик) 
				И ТипЗнч(СтрокаТабличнойЧасти.Перевозчик) = Тип("Строка");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СписокГрузМестЗаказаСервер(ТекЗаказ)
	
	СписРез = Новый СписокЗначений();
	Если ТекЗаказ.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам Тогда
		Для Каждого ТекСтрока Из ТекЗаказ.ГрузовойСостав Цикл
			Если СписРез.НайтиПоЗначению(ТекСтрока.ГрузовоеМесто) = Неопределено Тогда
				СписРез.Добавить(ТекСтрока.ГрузовоеМесто);
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ТекЗаказ.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам Тогда
		Для Каждого ТекСтрока Из ТекЗаказ.Товары Цикл
			Если СписРез.НайтиПоЗначению(ТекСтрока.Номенклатура) = Неопределено Тогда
				СписРез.Добавить(ТекСтрока.Номенклатура);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат СписРез;
	
КонецФункции

&НаКлиенте
Процедура ОчиститьПеревозчиковОтвет(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда 
		Объект.Перевозчики.Очистить();
	КонецЕсли;
	
	ОчиститьПеревозчиковЗавершение();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПеревозчиковЗавершение()
	
	ОбновитьСтатусыГрузовСервер();
	ОбновитьВсегоВТЧПеревозчикиСервер();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтавкуНДСПоНалогообложениеНДС()
	
	СтавкаНДСПоУмолчанию = Перечисления.СтавкиНДС.ПустаяСсылка();
	Для Каждого СтрокаТабличнойЧасти Из Объект.Перевозчики Цикл
		СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
		СтрокаТабличнойЧасти.СуммаНДС = 0;
	КонецЦикла;
	
	Если Объект.УчитыватьНДС Тогда
		Для Каждого СтрокаТабличнойЧасти Из Объект.Перевозчики Цикл
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Услуга.СтавкаНДС) Тогда
				СтрокаТабличнойЧасти.СтавкаНДС = СтрокаТабличнойЧасти.Услуга.СтавкаНДС;
			КонецЕсли;
			
			СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
			СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
									  		СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
									  		СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
			
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСтавкуНДСПоНалогообложениеНДС()

&НаКлиенте
Процедура РассчитатьСуммуНДС(СтрокаТабличнойЧасти)
	
	СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	
	СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
		СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
		СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
	
КонецПроцедуры // РассчитатьСуммуНДС()

&НаСервереБезКонтекста
Функция ПравоРедактированиеДокумента()
	Рез = ПравоДоступа("Редактирование", Метаданные.Документы.уатТендер_уэ);
	Возврат Рез;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКоличествоГрузаПоЗаказу(ЗаказНаТС, Груз, ЕдиницаИзмерения)
	
	Если ТипЗнч(Груз) = Тип("СправочникСсылка.уатГрузовыеМеста_уэ") Тогда 
		СтрокаГруза = ЗаказНаТС.ГрузовойСостав.Найти(Груз, "ГрузовоеМесто");
		Если СтрокаГруза = Неопределено Тогда 
			Возврат 1;
		Иначе 
			Возврат СтрокаГруза.КоличествоМест;
		КонецЕсли;
		
	Иначе 
		СтрокиГруза = ЗаказНаТС.Товары.НайтиСтроки(Новый Структура("Номенклатура, ЕдиницаИзмерения", Груз, ЕдиницаИзмерения));
		Если СтрокиГруза.Количество() Тогда 
			Возврат СтрокиГруза[0].Количество;
		Иначе 
			Возврат 1;
		КонецЕсли;
	КонецЕсли;
	
КонецФункции // ПолучитьКоличествоГрузаПоЗаказу()

&НаКлиенте
Процедура ПодборЗаказовОчисткаТЧ(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда 
		Объект.Грузы.Очистить();
		
		ПодборЗаказовОткрытьФормуПодбора();
		
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		ПодборЗаказовОткрытьФормуПодбора();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборЗаказовОткрытьФормуПодбора()
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ДокументПодбора", "уатТендер_уэ");
	
	Оповещение = Новый ОписаниеОповещения("ПодборЗаказовПослеПодбора", ЭтотОбъект);
	
	ОткрытьФорму("ОбщаяФорма.уатПодборЗаказов", ПараметрыФормы, ЭтотОбъект,,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборЗаказовПослеПодбора(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из РезультатЗакрытия.ПодобранныеЗаказы Цикл 
		НоваяСтрока = Объект.Грузы.Добавить();
		НоваяСтрока.Заказ            = ТекСтрока.Заказ;
		НоваяСтрока.ГрузовоеМесто    = ТекСтрока.Номенклатура;
		НоваяСтрока.ЕдиницаИзмерения = ТекСтрока.ЕдиницаИзмерения;
		НоваяСтрока.Количество       = ТекСтрока.Количество;
	КонецЦикла;
	
	ОбновитьСтатусыГрузовСервер();
	ОбновитьВсегоВТЧПеревозчикиСервер();
	
	Если ЗначениеЗаполнено(Объект.Биржа) Тогда
		Если СпособЗаполнения = 1 Тогда
			ЗаполнитьРеквизитыАТИПоМЛ(СоответсвиеНоменклатураНаименованияГруза, СоответсвиеВидГрузаНаименованияУпаковки, СоответсвиеНаименованияВалют);
		Иначе
			ЗаполнитьРеквизитыАТИПоЗаказуНаТС(СоответсвиеНоменклатураНаименованияГруза, СоответсвиеВидГрузаНаименованияУпаковки, СоответсвиеНаименованияВалют);
		КонецЕсли;
		Итератор = 0;
		Для Каждого ТекСтрока Из Объект.ПромежуточныеПункты Цикл
			Если Итератор = 0 Тогда
				ИдетификаторГорода = "ИдентификаторГородаОтправления";
			ИначеЕсли Итератор = Объект.ПромежуточныеПункты.Количество()-1 Тогда
				ИдетификаторГорода = "ИдентификаторГородаПрибытия";
			Иначе
				ИдетификаторГорода = "";
			КонецЕсли;
			ПодобратьГород(ТекСтрока,0,,ИдетификаторГорода);
			Итератор = Итератор + 1;
		КонецЦикла;

		НаименованияГрузаПриИзменении(Неопределено);
		НаименованияУпаковкиПриИзменении(Неопределено);
		ВесПриИзменении(Неопределено);
		ОбъемПриИзменении(Неопределено);
		УстановитьВидимостьАТИ();
	КонецЕсли;

	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемВопрос(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.ОК Тогда
		флВопросЗакрытиеФормы = Ложь;
		Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВывестиСуммовыеИтогиДокумента()
	
	Всего       = Объект.Перевозчики.Итог("Всего");
	МассивСтрок = Объект.Перевозчики.НайтиСтроки(Новый Структура("ЭтоПобедитель", 1));
	Если МассивСтрок.Количество() <> 0 Тогда
		Строка = МассивСтрок[0];
	Иначе
		Возврат;
	КонецЕсли;
	
	Если Строка.УчитыватьНДС Тогда 
		Если Строка.СуммаВключаетНДС Тогда 
			НадписьВсегоНДС = НСтр("en='VAT amount';ru='НДС в сумме'") + ":";
		Иначе 
			НадписьВсегоНДС = НСтр("en='VAT from above';ru='НДС сверху'") + ":";
		КонецЕсли;
		НадписьВсего = НСтр("en='Total including VAT';ru='Всего с НДС'");
		Элементы.СтраницыИтогов.ТекущаяСтраница = Элементы.ИтогоУчетНДС;
	Иначе 
		НадписьВсего = НСтр("en='Total';ru='Всего'");
		Элементы.СтраницыИтогов.ТекущаяСтраница = Элементы.ИтогоБезНДС;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьГород(СтрокаПунктов, ТипПункта, Элемент = Неопределено,ИдентификаторГорода = "")
	
	Если Объект.ПромежуточныеПункты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	Если Элемент <> Неопределено 
		И ЗначениеЗаполнено(Элемент.ТекстРедактирования) Тогда
		ИдентификаторГородаОтправленияСтрока = Элемент.ТекстРедактирования;
	Иначе
		ИдентификаторГородаОтправленияСтрока = СтрокаПунктов.ИдентификаторГородаСтрока;
	КонецЕсли;

	Если НЕ ЗначениеЗаполнено(ИдентификаторГородаОтправленияСтрока) Тогда
		Возврат;
	КонецЕсли;
	
	CписокВыбораГородов = Новый СписокЗначений;
	CписокГородов = уатИнтеграции_уэ.АТИ_ПолучениеCпискаГородов(,ИдентификаторГородаОтправленияСтрока);
	Для Каждого ТекСтрока Из CписокГородов Цикл
		CписокВыбораГородов.Добавить(ТекСтрока.Значение, ТекСтрока.Представление);
	КонецЦикла;
	
	Если CписокГородов.Количество() <> 0 Тогда
		Если ЗначениеЗаполнено(ИдентификаторГорода) Тогда
			ЭтотОбъект[ИдентификаторГорода]         = CписокГородов[0].Представление;
		КонецЕсли;
	
		СтрокаПунктов.ИдентификаторГорода       = CписокГородов[0].Значение;
		СтрокаПунктов.ИдентификаторГородаСтрока = CписокГородов[0].Представление;
	Иначе
		Если ТипПункта = 1 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru = 'Не определен город отправления'"));
		ИначеЕсли ТипПункта = 2 Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru = 'Не определен город прибытия'"));
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru = 'Не определен город пункта '") + СтрокаПунктов.Пункт);
		КонецЕсли;
		СтрокаПунктов.ИдентификаторГорода       = "";
	КонецЕсли;
	
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ПоказатьВыборИзСпискаЗавершение", ЭтотОбъект, Новый Структура("СтрокаПунктов, ИдентификаторГорода", СтрокаПунктов.ПолучитьИдентификатор(), ИдентификаторГорода));
	
	Если Элемент <> Неопределено Тогда
		ПоказатьВыборИзСписка(ОписаниеОповещенияОЗакрытии, CписокВыбораГородов, Элемент);
	КонецЕсли;
	ОбновитьЭлементыТеговХарактеристик("ОблакоТеговХарактеристик", "0");
	ОбновитьЭлементыТеговХарактеристик("ОблакоТеговХарактеристикПрибытие", "1");
	УстановитьВидимостьАТИ();
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьВыборИзСпискаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	Конецесли;
	
	Если ЗначениеЗаполнено(ДополнительныеПараметры.ИдентификаторГорода) Тогда
		ЭтотОбъект[ДополнительныеПараметры.ИдентификаторГорода]     = Результат.Представление;
	КонецЕсли;
	
	СтрокаПунктов = Объект.ПромежуточныеПункты.НайтиПоИдентификатору(ДополнительныеПараметры.СтрокаПунктов);
	Если СтрокаПунктов <> Неопределено Тогда
		СтрокаПунктов.ИдентификаторГорода       = Результат.Значение;
		СтрокаПунктов.ИдентификаторГородаСтрока = Результат.Представление;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьГородПрибытия(Команда)
	
	Если Объект.ПромежуточныеПункты.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторГородаПрибытия) Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ИдентификаторГородаПрибытия.СписокВыбора.Очистить();
	CписокГородов = уатИнтеграции_уэ.АТИ_ПолучениеCпискаГородов(,ИдентификаторГородаПрибытия);
	Для Каждого ТекСтрока Из CписокГородов Цикл
		Элементы.ИдентификаторГородаПрибытия.СписокВыбора.Добавить(ТекСтрока.Представление, ТекСтрока.Представление);
	КонецЦикла;
	

	ИдентификаторГородаПрибытияПриИзменении(Неопределено);
	Если CписокГородов.Количество() <> 0 Тогда
		ИдентификаторГородаПрибытия = CписокГородов[0].Представление;
		
		Объект.ПромежуточныеПункты[Объект.ПромежуточныеПункты.Количество() - 1].ИдентификаторГорода       = CписокГородов[0].Значение;
		Объект.ПромежуточныеПункты[Объект.ПромежуточныеПункты.Количество() - 1].ИдентификаторГородаСтрока = CписокГородов[0].Представление;
		
		ПрикрепитьБлижайшиеГорода1(Неопределено);
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru = 'Не определен город прибытия'"));
		Объект.ПромежуточныеПункты[Объект.ПромежуточныеПункты.Количество() - 1].ИдентификаторГорода       = "";
	КонецЕсли;
	
	УстановитьВидимостьАТИ();

КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЦеныИВалютуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	УстановитьВидимость();
	ОбновитьСтатусыГрузовСервер();
	ОбновитьВсегоВТЧПеревозчикиСервер();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты(Знач Оповещение, Знач ВалютаРасчетовПередИзменением, ПересчитатьЦены = Ложь)
	
	СтруктураПараметров = Новый Структура();
	СтруктураПараметров.Вставить("ВалютаДокумента",      Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("Курс",                 Объект.КурсВзаиморасчетов);
	СтруктураПараметров.Вставить("Кратность",            Объект.КратностьВзаиморасчетов);
	СтруктураПараметров.Вставить("Организация",          Объект.Организация);
	СтруктураПараметров.Вставить("ДатаДокумента",        Объект.Дата);
	СтруктураПараметров.Вставить("ПерезаполнитьЦены",    Ложь);
	СтруктураПараметров.Вставить("ПересчитатьЦены",      ПересчитатьЦены);
	СтруктураПараметров.Вставить("БылиВнесеныИзменения", Ложь);
	СтруктураПараметров.Вставить("СуммаВключаетНДС",     Объект.СуммаВключаетНДС);
	СтруктураПараметров.Вставить("НалогообложениеНДС",   Объект.УчитыватьНДС);
	СтруктураПараметров.Вставить("ДокументБезНДС",       НЕ Объект.УчитыватьНДС);
	
	Если НЕ ПравоРедактированиеДокумента() Тогда
		СтруктураПараметров.Вставить("ТолькоПросмотр", Истина);
	КонецЕсли;
	
	ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров,,,,, Новый ОписаниеОповещения("ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение",
		ЭтотОбъект, Новый Структура("ВалютаРасчетовПередИзменением, Оповещение", ВалютаРасчетовПередИзменением, Оповещение)),
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры // ОбработатьИзмененияПоКнопкеЦеныИВалюты()

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Отмена ИЛИ НЕ ПравоРедактированиеДокумента() Тогда
		Возврат;
	КонецЕсли;
	
	ВалютаРасчетовПередИзменением = ДополнительныеПараметры.ВалютаРасчетовПередИзменением;
	Оповещение = ДополнительныеПараметры.Оповещение;
	СтруктураЦеныИВалюта = Результат;
	
	Если ТипЗнч(СтруктураЦеныИВалюта) = Тип("Структура")  Тогда
		уатОбщегоНазначенияКлиент.ЗаполнитьСтруктуруЦеныИВалютыДляБП3(
			СтруктураЦеныИВалюта,
			Объект.ВалютаДокумента,
			ВалютаРасчетовПередИзменением,
			Объект.УчитыватьНДС);
		
		Объект.ВалютаДокумента         = СтруктураЦеныИВалюта.ВалютаДокумента;

		Объект.КурсВзаиморасчетов      = СтруктураЦеныИВалюта.Курс;
		Объект.КратностьВзаиморасчетов = СтруктураЦеныИВалюта.Кратность;
		Объект.СуммаВключаетНДС        = СтруктураЦеныИВалюта.СуммаВключаетНДС;
		Объект.УчитыватьНДС            = СтруктураЦеныИВалюта.НалогообложениеНДС;
		
		Если ЗначениеЗаполнено(Объект.Биржа) Тогда
			ВалютаСтрока                   = СоответсвиеНаименованияВалют.Получить(Объект.ВалютаДокумента);
			Объект.ИдентификаторВалюты     = СтрЗаменить(СтрЗаменить(СоответсвиеВалют.Получить(ВалютаСтрока), " ", ""), Символы.НПП, "");
			
			Если СпособЗаполнения = 1 Тогда
				ЗаполнитьРеквизитыАТИПоМЛ(СоответсвиеНоменклатураНаименованияГруза, СоответсвиеВидГрузаНаименованияУпаковки, СоответсвиеНаименованияВалют);
			Иначе
				ЗаполнитьРеквизитыАТИПоЗаказуНаТС(СоответсвиеНоменклатураНаименованияГруза, СоответсвиеВидГрузаНаименованияУпаковки, СоответсвиеНаименованияВалют);	
			КонецЕсли;
		КонецЕсли;
		Если СтруктураЦеныИВалюта.НалогообложениеНДС <> СтруктураЦеныИВалюта.ПредНалогообложениеНДС Тогда
			ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не Оповещение = Неопределено Тогда 
		ВыполнитьОбработкуОповещения(Оповещение);
	КонецЕсли;
	
КонецПроцедуры // ОбработатьИзмененияПоКнопкеЦеныИВалюты()


#Область АТИ

&НаСервере
Процедура ЗаполнитьРеквизитыАТИПоЗаказуНаТС(СоответсвиеНоменклатураНаименованияГруза, СоответсвиеВидГрузаНаименованияУпаковки, СоответсвиеНаименованияВалют)

	Если Константы.уатЕдиницаИзмеренияВеса.Получить() = Перечисления.уатЕдиницыИзмеренияВеса.Килограмм Тогда
		КоэфВеса = 1000;
	Иначе 
		КоэфВеса = 1;
	КонецЕсли;
	
	Если Константы.уатЕдиницаИзмеренияОбъема.Получить() = Перечисления.уатЕдиницыИзмеренияОбъема.Литр Тогда 
		КоэфОбъема = 1000;
	Иначе 
		КоэфОбъема = 1;
	КонецЕсли;
	
	ВесГруза    = 0;
	ОбъемГруза  = 0;
	ДлинаГруза  = 0;
	ШиринаГруза = 0;
	ВысотаГруза = 0;
	
	МассивЗаказов      = Новый Массив();
	ПредНоменклатура    = Неопределено;
	Номенклатура       = Неопределено;
	
	ПредВидУпаковки    = Неопределено;
	ВидУпаковки        = Неопределено;

	НоменклатураСтрока = "";

	Объект.КоличествоУпаковокДляГруза = 0;
	
	Итератор = 0;
	Для Каждого ТекСтрока Из Объект.Грузы Цикл
		ВесГруза   = ВесГруза   + ТекСтрока.ВесБрутто;
		ОбъемГруза = ОбъемГруза + ТекСтрока.Объем;
		Если МассивЗаказов.Найти(ТекСтрока.Заказ) = Неопределено Тогда
			МассивЗаказов.Добавить(ТекСтрока.Заказ);
		КонецЕсли;
		Если ТипЗнч(ТекСтрока.ГрузовоеМесто) = Тип("СправочникСсылка.Номенклатура") Тогда
			Если Итератор = 0 Тогда
				ХарактеристикиНоменклатуры = уатОбщегоНазначения.ПолучитьВесОбъемНоменклатуры(ТекСтрока.ГрузовоеМесто, ТекСтрока.ЕдиницаИзмерения, ТекСтрока.Количество);
				ДлинаГруза  = ХарактеристикиНоменклатуры.Длина;
				ШиринаГруза = ХарактеристикиНоменклатуры.Ширина;
				ВысотаГруза = ХарактеристикиНоменклатуры.Высота;
			КонецЕсли;
		
			Объект.КлассОпасности = Макс(Объект.КлассОпасности, Цел(уатОбщегоНазначения.уатКлассГруза(ТекСтрока.ГрузовоеМесто)));
			
			Номенклатура = ?(ПредНоменклатура = Неопределено ИЛИ ТекСтрока.ГрузовоеМесто.уатВидГруза = ПредНоменклатура, ТекСтрока.ГрузовоеМесто.уатВидГруза, Неопределено);
			ПредНоменклатура = ТекСтрока.ГрузовоеМесто.уатВидГруза;
			
			ПредВидУпаковки = ?(ВидУпаковки = Неопределено ИЛИ ТекСтрока.ГрузовоеМесто.уатВидГруза = ВидУпаковки, ТекСтрока.ГрузовоеМесто.уатВидУпаковкиОсновной, Неопределено);
			ВидУпаковки = ТекСтрока.ГрузовоеМесто.уатВидУпаковкиОсновной;

			Если СтрНайти(НоменклатураСтрока, ТекСтрока.ГрузовоеМесто.Наименование) = 0 Тогда
				НоменклатураСтрока = ?(ЗначениеЗаполнено(НоменклатураСтрока), НоменклатураСтрока + "; ", "") + ТекСтрока.ГрузовоеМесто.Наименование;
			КонецЕсли;

		ИначеЕсли ТипЗнч(ТекСтрока.ГрузовоеМесто) = Тип("СправочникСсылка.уатГрузовыеМеста_уэ") Тогда
			Если Итератор = 0 Тогда
				ДлинаГруза  = ТекСтрока.ГрузовоеМесто.Длина;
				ШиринаГруза = ТекСтрока.ГрузовоеМесто.Ширина;
				ВысотаГруза = ТекСтрока.ГрузовоеМесто.Высота;
			КонецЕсли;
			
			Номенклатура = ?(ПредНоменклатура = Неопределено ИЛИ ТекСтрока.ГрузовоеМесто.ВидГруза = ПредНоменклатура, ТекСтрока.ГрузовоеМесто.ВидГруза, Неопределено);
			ПредНоменклатура = ТекСтрока.ГрузовоеМесто.ВидГруза;
			
			ПредВидУпаковки = ?(ВидУпаковки = Неопределено ИЛИ ТекСтрока.ГрузовоеМесто.ВидУпаковки = ВидУпаковки, ТекСтрока.ГрузовоеМесто.ВидУпаковки, Неопределено);
			ВидУпаковки = ТекСтрока.ГрузовоеМесто.ВидУпаковки;
			
			Если СтрНайти(НоменклатураСтрока, ТекСтрока.ГрузовоеМесто.Наименование) = 0 Тогда
				НоменклатураСтрока = ?(ЗначениеЗаполнено(НоменклатураСтрока), НоменклатураСтрока + "; ", "") + ТекСтрока.ГрузовоеМесто.Наименование;
			КонецЕсли;

		КонецЕсли;

		Объект.КоличествоУпаковокДляГруза = Объект.КоличествоУпаковокДляГруза + ТекСтрока.КоличествоМест;
		Итератор = Итератор + 1;
	КонецЦикла;
	
	ВесГруза   = ВесГруза / КоэфВеса;
	ОбъемГруза = ОбъемГруза / КоэфОбъема;
	
	Вес    = ПривестиВесОбъемКСтандартамАТИ(ВесГруза, "Вес груза");
	Объем  = ПривестиВесОбъемКСтандартамАТИ(ОбъемГруза, "Объем груза");
	Объект.Длина  = ПривестиВесОбъемКСтандартамАТИ(ДлинаГруза, "Длина груза");
	Объект.Ширина = ПривестиВесОбъемКСтандартамАТИ(ШиринаГруза, "Ширина груза");
	Объект.Высота = ПривестиВесОбъемКСтандартамАТИ(ВысотаГруза, "Высота груза");
	СуммаПлан    = 0;
	
	МассивПунктов = Новый Массив();
	Для Каждого ТекСтрокаЗаказ Из МассивЗаказов Цикл
		Если ТекСтрокаЗаказ.FTL Тогда
			Для Каждого ТекСтрока Из ТекСтрокаЗаказ.ПромежуточныеПункты Цикл
				Если ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ПромежуточныйПункт Тогда
					Продолжить;
				КонецЕсли;
				МассивПунктов.Добавить(Новый Структура("Заказ, Пункт, ТипТочкиМаршрута", ТекСтрокаЗаказ, ТекСтрока.Пункт, ТекСтрока.ТипТочкиМаршрута));
			КонецЦикла;
		Иначе
			МассивПунктов.Добавить(Новый Структура("Заказ, Пункт, ТипТочкиМаршрута", ТекСтрокаЗаказ, ТекСтрокаЗаказ.АдресОтправления, Перечисления.уатТипыТочекМаршрута.Погрузка));
			МассивПунктов.Добавить(Новый Структура("Заказ, Пункт, ТипТочкиМаршрута", ТекСтрокаЗаказ, ТекСтрокаЗаказ.АдресНазначения, Перечисления.уатТипыТочекМаршрута.Разгрузка));
		КонецЕсли;
		СуммаПлан = СуммаПлан + ПолучитьДанныеПрибыльНаСервере(ТекСтрокаЗаказ);
	КонецЦикла;
	
	Если НЕ Объект.УчитыватьНДС Тогда
		Объект.СтавкаСНДС   = 0;
		Объект.СтавкаБезНДС = СуммаПлан;
	Иначе
		Объект.СтавкаБезНДС = 0;
		Объект.СтавкаСНДС   = СуммаПлан;
	КонецЕсли;
	
	Если МассивПунктов.Количество() <> 0 Тогда
		ЗначенияСтрокиОтправления = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(МассивПунктов[0].Заказ, "ОтправлениеС, ОтправлениеПо, АдресОтправления");
		Объект.ОтправлениеС  = ЗначенияСтрокиОтправления.ОтправлениеС;
		Объект.ОтправлениеПо = ЗначенияСтрокиОтправления.ОтправлениеПо;
		
		ТекущийДень = НачалоДня(ТекущаяДата());
		Если Объект.ОтправлениеС < ТекущийДень Тогда
			ПривестиДатыЗаказаКСтандартамАТИ(ТекущийДень, Объект.ОтправлениеС, Объект.ОтправлениеПо);
		КонецЕсли;
		
		ЗначенияСтрокиДоставки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(МассивПунктов[МассивПунктов.Количество() - 1].Заказ,
			"ДоставкаС, ДоставкаПо, АдресНазначения");
		Объект.ДоставкаС  = ЗначенияСтрокиДоставки.ДоставкаС;
		Объект.ДоставкаПо = ЗначенияСтрокиДоставки.ДоставкаПо;
		
		Если Объект.ДоставкаС < ТекущийДень Тогда
			ПривестиДатыЗаказаКСтандартамАТИ(ТекущийДень, Объект.ДоставкаС, Объект.ДоставкаПо);
		КонецЕсли;
		
		АдресОтправления = ЗначенияСтрокиОтправления.АдресОтправления;
		АдресНазначения  = ЗначенияСтрокиДоставки.АдресНазначения;
		
		Если ЗначениеЗаполнено(АдресОтправления) 
			И ТипЗнч(АдресОтправления) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда
			ЛатОтправления   = АдресОтправления.Лат;
			ЛонОтправления   = АдресОтправления.Лон;
		КонецЕсли;
		Если ЗначениеЗаполнено(АдресНазначения) 
			И ТипЗнч(АдресНазначения) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда
			ЛатПрибытия      = АдресНазначения.Лат;
			ЛонПрибытия      = АдресНазначения.Лон;
		КонецЕсли;

		Объект.ПромежуточныеПункты.Очистить();
		
		Итератор = 0;
		Для Каждого ТекСтрока Из МассивПунктов Цикл 
			
			НоваяСтрока = Объект.ПромежуточныеПункты.Добавить();
			НоваяСтрока.ТипТочкиМаршрута          = ТекСтрока.ТипТочкиМаршрута;
			НоваяСтрока.Пункт                     = ТекСтрока.Пункт;
			Если ТипЗнч(ТекСтрока.Пункт) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда
				ПараметрыЗаполненияПунктов = уатНастройкиШаблонов.ПолучитьПараметрыЗаполненияСправочникУатПунктыНазначения(ТекСтрока.Пункт);
				
				Город = ПараметрыЗаполненияПунктов.Город;
				Город = уатЭлектронныеКартыСервер.ПолучитьПредставлениеАдресаБезСокращений(Город);
				Если НЕ ЗначениеЗаполнено(Город) Тогда
					Город = ПараметрыЗаполненияПунктов.НаселенныйПункт;
					Город = уатЭлектронныеКартыСервер.ПолучитьПредставлениеАдресаБезСокращений(Город);
				КонецЕсли;

				НоваяСтрока.ИдентификаторГородаСтрока = ?(ЗначениеЗаполнено(Город), Город, ТекСтрока.Пункт.Адрес);
			Иначе
				НоваяСтрока.ИдентификаторГородаСтрока = ТекСтрока.Пункт;
			КонецЕсли;
			
			Если Итератор = 0 Тогда
				ИдентификаторГородаОтправления = НоваяСтрока.ИдентификаторГородаСтрока;
			КонецЕсли;
			
			ИдентификаторГородаПрибытия = НоваяСтрока.ИдентификаторГородаСтрока;
			Итератор = Итератор + 1;
		КонецЦикла;
	Конецесли;
	
	Объект.НаименованиеГруза = "";
	НаименованиеГруза        = "Другой";
	Если СоответсвиеНоменклатураНаименованияГруза <> Неопределено Тогда
		мНаименованиеГруза = "";
		Если ЗначениеЗаполнено(Номенклатура) Тогда
			мНаименованиеГруза = СоответсвиеНоменклатураНаименованияГруза.Получить(Номенклатура);
		КонецЕсли;
		
		НоменклатураСтрока = СтрЗаменить(НоменклатураСтрока, """", "'");
		НаименованиеГруза = мНаименованиеГруза;
		Если НЕ ЗначениеЗаполнено(НаименованиеГруза) Тогда
			НаименованиеГруза = "Другой";
			Объект.НаименованиеГруза = НоменклатураСтрока;
		ИначеЕсли НаименованиеГруза = "Другой" Тогда
			Объект.НаименованиеГруза = НоменклатураСтрока;
		КонецЕсли;
	Иначе
		НаименованиеГруза = "Другой";
		Объект.НаименованиеГруза = НоменклатураСтрока;
	КонецЕсли;
	
	Если СоответсвиеВидГрузаНаименованияУпаковки <> Неопределено Тогда
		мВидУпаковки = "";
		Если ЗначениеЗаполнено(ВидУпаковки) Тогда
			НаименованиеУпоковки = СоответсвиеВидГрузаНаименованияУпаковки.Получить(ВидУпаковки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыАТИПоМЛ(СоответсвиеНоменклатураНаименованияГруза, СоответсвиеВидГрузаНаименованияУпаковки, СоответсвиеНаименованияВалют)
	
	Если Константы.уатЕдиницаИзмеренияВеса.Получить() = Перечисления.уатЕдиницыИзмеренияВеса.Килограмм Тогда
		КоэфВеса = 1000;
	Иначе 
		КоэфВеса = 1;
	КонецЕсли;
	
	Если Константы.уатЕдиницаИзмеренияОбъема.Получить() = Перечисления.уатЕдиницыИзмеренияОбъема.Литр Тогда 
		КоэфОбъема = 1000;
	Иначе 
		КоэфОбъема = 1;
	КонецЕсли;

	Объект.Длина  = "0";
	Объект.Ширина = "0";
	Объект.Высота = "0";

	Грузы = Объект.МаршрутныйЛист;
	Вес   = 0;
	Объем = 0;
	
	ВесГруза   = Объект.МаршрутныйЛист.ВесБрутто;
	ОбъемГруза = Объект.МаршрутныйЛист.Объем;
	
	ВесГруза   = ВесГруза / КоэфВеса;
	ОбъемГруза = ОбъемГруза / КоэфОбъема;
	
	Вес    = ПривестиВесОбъемКСтандартамАТИ(ВесГруза, "Вес груза");
	Объем  = ПривестиВесОбъемКСтандартамАТИ(ОбъемГруза, "Объем груза");
	
	СуммаПлан = 0;
	СуммаПлан = СуммаПлан + ПолучитьДанныеПрибыльНаСервере(Объект.МаршрутныйЛист);
	
	
	Если НЕ Объект.УчитыватьНДС Тогда
		Объект.СтавкаСНДС   = 0;
		Объект.СтавкаБезНДС = СуммаПлан;
	Иначе
		Объект.СтавкаБезНДС = 0;
		Объект.СтавкаСНДС   = СуммаПлан;
	КонецЕсли;

	МассивПунктов = Новый Массив();
	ПредНоменклатура    = Неопределено;
	Номенклатура       = Неопределено;
	
	ПредВидУпаковки    = Неопределено;
	ВидУпаковки        = Неопределено;

	НоменклатураСтрока = "";
	
	ВесГруза    = 0;
	ОбъемГруза  = 0;
	ДлинаГруза  = 0;
	ШиринаГруза = 0;
	ВысотаГруза = 0;

	Итератор    = 0;
	ПредПункт    = Неопределено;
	ПредТипТочки = Неопределено;
	Объект.КоличествоУпаковокДляГруза = 0;
	
	Для Каждого ТекСтрокаЗаказ Из Объект.МаршрутныйЛист.Заказы Цикл
		Если ТекСтрокаЗаказ.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ПромежуточныйПункт Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ТекСтрокаЗаказ.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда
			Если Итератор = 0 Тогда
				ХарактеристикиНоменклатуры = уатОбщегоНазначения.ПолучитьВесОбъемНоменклатуры(ТекСтрокаЗаказ.Номенклатура, ТекСтрокаЗаказ.ЕдиницаИзмерения, ТекСтрокаЗаказ.Количество);
				ДлинаГруза  = ХарактеристикиНоменклатуры.Длина;
				ШиринаГруза = ХарактеристикиНоменклатуры.Ширина;
				ВысотаГруза = ХарактеристикиНоменклатуры.Высота;
			КонецЕсли;
			
			Объект.КлассОпасности = Макс(Объект.КлассОпасности, Цел(уатОбщегоНазначения.уатКлассГруза(ТекСтрокаЗаказ.Номенклатура)));
			
			Номенклатура = ?(ПредНоменклатура = Неопределено ИЛИ ТекСтрокаЗаказ.Номенклатура.уатВидГруза = ПредНоменклатура, ТекСтрокаЗаказ.Номенклатура.уатВидГруза, Неопределено);
			ПредНоменклатура = ТекСтрокаЗаказ.Номенклатура.уатВидГруза;
			
			ПредВидУпаковки = ?(ВидУпаковки = Неопределено ИЛИ ТекСтрокаЗаказ.Номенклатура.уатВидГруза = ВидУпаковки, ТекСтрокаЗаказ.Номенклатура.уатВидУпаковкиОсновной, Неопределено);
			ВидУпаковки = ТекСтрокаЗаказ.Номенклатура.уатВидУпаковкиОсновной;
			
			Если СтрНайти(НоменклатураСтрока, ТекСтрокаЗаказ.Номенклатура.Наименование) = 0 Тогда
				НоменклатураСтрока = ?(ЗначениеЗаполнено(НоменклатураСтрока), НоменклатураСтрока + "; ", "") + ТекСтрокаЗаказ.Номенклатура.Наименование;
			КонецЕсли;
		ИначеЕсли ТипЗнч(ТекСтрокаЗаказ.Номенклатура) = Тип("СправочникСсылка.уатГрузовыеМеста_уэ") Тогда
			Если Итератор = 0 Тогда
				ДлинаГруза  = ТекСтрокаЗаказ.Номенклатура.Длина;
				ШиринаГруза = ТекСтрокаЗаказ.Номенклатура.Ширина;
				ВысотаГруза = ТекСтрокаЗаказ.Номенклатура.Высота;
			КонецЕсли;
			
			Номенклатура = ?(ПредНоменклатура = Неопределено ИЛИ ТекСтрокаЗаказ.Номенклатура.ВидГруза = ПредНоменклатура, ТекСтрокаЗаказ.Номенклатура.ВидГруза, Неопределено);
			ПредНоменклатура = ТекСтрокаЗаказ.Номенклатура.ВидГруза;
			
			ПредВидУпаковки = ?(ВидУпаковки = Неопределено ИЛИ ТекСтрокаЗаказ.Номенклатура.ВидУпаковки = ВидУпаковки, ТекСтрокаЗаказ.Номенклатура.ВидУпаковки, Неопределено);
			ВидУпаковки = ТекСтрокаЗаказ.Номенклатура.ВидУпаковки;
			Если СтрНайти(НоменклатураСтрока, ТекСтрокаЗаказ.Номенклатура.Наименование) = 0 Тогда
				НоменклатураСтрока = ?(ЗначениеЗаполнено(НоменклатураСтрока), НоменклатураСтрока + "; ", "") + ТекСтрокаЗаказ.Номенклатура.Наименование;
			КонецЕсли;
		КонецЕсли;

		Если НЕ ТекСтрокаЗаказ.Пункт = ПредПункт 
			ИЛИ НЕ ТекСтрокаЗаказ.ТипТочкиМаршрута = ПредТипТочки Тогда
			МассивПунктов.Добавить(Новый Структура("Заказ, Пункт, ТипТочкиМаршрута", ТекСтрокаЗаказ.ЗаказГрузоотправителя, ТекСтрокаЗаказ.Пункт, ТекСтрокаЗаказ.ТипТочкиМаршрута));
		КонецЕсли;
		ПредПункт    = ТекСтрокаЗаказ.Пункт;
		ПредТипТочки = ТекСтрокаЗаказ.ТипТочкиМаршрута;
		
		Если ТекСтрокаЗаказ.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка
			ИЛИ ТекСтрокаЗаказ.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяПогрузка Тогда
			Объект.КоличествоУпаковокДляГруза = Объект.КоличествоУпаковокДляГруза + ТекСтрокаЗаказ.КоличествоМест;
		КонецЕсли;
		
		Итератор = Итератор + 1;
	КонецЦикла;
	
	Объект.Длина  = ПривестиВесОбъемКСтандартамАТИ(ДлинаГруза, "Длина груза");
	Объект.Ширина = ПривестиВесОбъемКСтандартамАТИ(ШиринаГруза, "Ширина груза");
	Объект.Высота = ПривестиВесОбъемКСтандартамАТИ(ВысотаГруза, "Высота груза");
	
	Если МассивПунктов.Количество() <> 0 Тогда
		ЗначенияСтрокиОтправления = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(МассивПунктов[0].Заказ, "ОтправлениеС, ОтправлениеПо, АдресОтправления");
		Объект.ОтправлениеС  = ЗначенияСтрокиОтправления.ОтправлениеС;
		Объект.ОтправлениеПо = ЗначенияСтрокиОтправления.ОтправлениеПо;
		
		ТекущийДень = НачалоДня(ТекущаяДата());
		Если Объект.ОтправлениеС < ТекущийДень Тогда
			ПривестиДатыЗаказаКСтандартамАТИ(ТекущийДень, Объект.ОтправлениеС, Объект.ОтправлениеПо);
		КонецЕсли;
		
		ЗначенияСтрокиДоставки = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(МассивПунктов[МассивПунктов.Количество() - 1].Заказ,
		"ДоставкаС, ДоставкаПо, АдресНазначения");
		Объект.ДоставкаС  = ЗначенияСтрокиДоставки.ДоставкаС;
		Объект.ДоставкаПо = ЗначенияСтрокиДоставки.ДоставкаПо;
		
		Если Объект.ДоставкаС < ТекущийДень Тогда
			ПривестиДатыЗаказаКСтандартамАТИ(ТекущийДень, Объект.ДоставкаС, Объект.ДоставкаПо);
		КонецЕсли;
		
		АдресОтправления = ЗначенияСтрокиОтправления.АдресОтправления;
		АдресНазначения  = ЗначенияСтрокиДоставки.АдресНазначения;
		Если ТипЗнч(АдресОтправления) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда
			ЛатОтправления   = АдресОтправления.Лат;
			ЛонОтправления   = АдресОтправления.Лон;
		КонецЕсли;
	
		Если ТипЗнч(АдресНазначения) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда
			ЛатПрибытия      = АдресНазначения.Лат;
			ЛонПрибытия      = АдресНазначения.Лон;
		КонецЕсли;
		
		Объект.ПромежуточныеПункты.Очистить();
		
		Итератор = 0;
		Для Каждого ТекСтрока Из МассивПунктов Цикл 
			
			НоваяСтрока = Объект.ПромежуточныеПункты.Добавить();
			НоваяСтрока.ТипТочкиМаршрута          = ТекСтрока.ТипТочкиМаршрута;
			НоваяСтрока.Пункт                     = ТекСтрока.Пункт;
			
			Город = "";
			Если ТипЗнч(НоваяСтрока.Пункт) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда
				Город = уатНастройкиШаблонов.ПолучитьПараметрыЗаполненияСправочникУатПунктыНазначения(НоваяСтрока.Пункт).Город;
			КонецЕсли;
			НоваяСтрока.ИдентификаторГородаСтрока = ?(ЗначениеЗаполнено(Город), Город, ТекСтрока.Пункт);
			
			Если Итератор = 0 Тогда
				ИдентификаторГородаОтправления = НоваяСтрока.ИдентификаторГородаСтрока;
			КонецЕсли;
			
			ИдентификаторГородаПрибытия = НоваяСтрока.ИдентификаторГородаСтрока;
			Итератор = Итератор + 1;
		КонецЦикла;
	Конецесли;

	Объект.НаименованиеГруза = "";
	НаименованиеГруза        = "Другой";
	Если СоответсвиеНоменклатураНаименованияГруза <> Неопределено Тогда
		мНаименованиеГруза = "";
		Если ЗначениеЗаполнено(Номенклатура) Тогда
			мНаименованиеГруза = СоответсвиеНоменклатураНаименованияГруза.Получить(Номенклатура);
		КонецЕсли;
		
		НоменклатураСтрока = СтрЗаменить(НоменклатураСтрока, """", "'");
		Если ЗначениеЗаполнено(мНаименованиеГруза) Тогда
			НаименованиеГруза = мНаименованиеГруза;
			Если НЕ ЗначениеЗаполнено(НаименованиеГруза) Тогда
				НаименованиеГруза = "Другой";
				Объект.НаименованиеГруза = НоменклатураСтрока;
			КонецЕсли;
		ИначеЕсли НаименованиеГруза = "Другой" Тогда
			Объект.НаименованиеГруза = НоменклатураСтрока;
		КонецЕсли;
	Иначе
		НаименованиеГруза = "Другой";
		Объект.НаименованиеГруза = НоменклатураСтрока;
	КонецЕсли;
	
	Если СоответсвиеВидГрузаНаименованияУпаковки <> Неопределено Тогда
		мВидУпаковки = "";
		Если ЗначениеЗаполнено(ВидУпаковки) Тогда
			НаименованиеУпоковки = СоответсвиеВидГрузаНаименованияУпаковки.Получить(ВидУпаковки);
		КонецЕсли;
	КонецЕсли;


КонецПроцедуры

&НаСервере
Функция ПривестиВесОбъемКСтандартамАТИ(Характеристика, ХарактеристикаСтрока)
	
	Если Характеристика = 0 Тогда
		Возврат Характеристика;
	КонецЕсли;
	Если СтрДлина(СтрЗаменить(СтрЗаменить(СтрЗаменить(Строка(Характеристика), " ", ""), Символы.НПП, ""), ",", "")) >= 4 Тогда
		ДлинаЦелого = СтрДлина(СтрЗаменить(СтрЗаменить(СтрЗаменить(Строка(Цел(Характеристика)), " ", ""), Символы.НПП, ""), ",", ""));
		Если ДлинаЦелого > 4 Тогда
			ТекстНстр = СтрШаблон(Нстр("ru = '%1 не соответствует требованиям добавления груза системы АТИ. Максимальная длина не должна превышать 4 символа.'"), ХарактеристикаСтрока);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНстр);
			Характеристика = 0;
		ИначеЕсли ДлинаЦелого = 4 Тогда
			Характеристика = Окр(Характеристика, 0);
		ИначеЕсли ДлинаЦелого = 3 Тогда
			Характеристика = Окр(Характеристика, 0);
		ИначеЕсли ДлинаЦелого = 2 Тогда
			Характеристика = Окр(Характеристика, 1);
		ИначеЕсли ДлинаЦелого = 1 Тогда
			Характеристика = Окр(Характеристика, 2);
		КонецЕсли;
	КонецЕсли;
	
	Если Характеристика = 0 Тогда
		ТекстНстр = СтрШаблон(Нстр("ru = '%1 не соответствует требованиям добавления груза системы АТИ. Максимальная длина не должна превышать 4 символа.'"), ХарактеристикаСтрока);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНстр);
	КонецЕсли;
		
	Возврат Характеристика;
	
КонецФункции

&НаСервере
Процедура ПривестиДатыЗаказаКСтандартамАТИ(ТекущийДень, ДатаС, ДатаПо)
	
	мВремяС  = ДатаС - Началодня(ДатаС);
	мВремяПо = ДатаПо - Началодня(ДатаПо);
	
	ДнейИзменилась   = (НачалоДня(ДатаПо) - НачалоДня(ДатаС))/60/60/24;
	
	СекундИзменилась = ?(Цел(ДнейИзменилась) <> 0, ДнейИзменилась * 60 *60 *24, 0);
	
	ДатаС  = ТекущийДень + мВремяС;
	ДатаПо = ТекущийДень + мВремяПо + СекундИзменилась;
	
КонецПроцедуры

&НаКлиенте
Функция ЭтоЧисло(Знач ПроверяемоеЗначение)
	
	ОписаниеТипаЧисло = Новый ОписаниеТипов("Число");
	ЭтоЧисло = ОписаниеТипаЧисло.ПривестиЗначение(ПроверяемоеЗначение) <> 0;
	ЭтоНоль  = Ложь;
	Если НЕ ЭтоЧисло Тогда
		СтрДлина = СтрДлина(ПроверяемоеЗначение);
		Строка   = ПроверяемоеЗначение;
		Для сч = 1 По СтрДлина Цикл
			Строка = СтрЗаменить(Строка,"0", "");
			Строка = СтрЗаменить(Строка,",", "");
			Строка = СтрЗаменить(Строка,".", "");
		КонецЦикла;
		ЭтоНоль = Строка = "";
	КонецЕсли;
	
	Возврат ЭтоЧисло ИЛИ ЭтоНоль;
		
КонецФункции

&НаКлиенте
Процедура ПримечаниеКГрузуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.ПримечаниеКГрузу", Нстр("ru = 'Примечание к грузу'"));
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ФорматированнаяСтрокаПредставленияТега(НаименованиеТега, ПометкаУдаления, НавигационнаяСсылкаФС)
	
	#Если Клиент Тогда
	Цвет = ОбщегоНазначенияКлиентПовтИсп.ЦветСтиля("ТекстВторостепеннойНадписи");
	БазовыйШрифт = ОбщегоНазначенияКлиентПовтИсп.ШрифтСтиля("МелкийШрифтТекста");
	#Иначе
	Цвет = ЦветаСтиля.ТекстВторостепеннойНадписи;
	БазовыйШрифт = ШрифтыСтиля.ОбычныйШрифтТекста;
	#КонецЕсли
	
	Шрифт = Новый Шрифт(БазовыйШрифт,,,Истина,,?(ПометкаУдаления, Истина, Неопределено));
	
	КомпонентыФС = Новый Массив;
	КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(НаименованиеТега + Символы.НПП, Шрифт, Цвет));
	КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(БиблиотекаКартинок.Очистить, , , , НавигационнаяСсылкаФС));
	
	Возврат Новый ФорматированнаяСтрока(КомпонентыФС);
	
КонецФункции

&НаСервере
Процедура ОбновитьЭлементыТеговХарактеристик(НаименованиеПоля, ИдентификаторГородаОснования)
	
	Строки = Объект.БлижайшиеКрупныеГорода.НайтиСтроки(Новый Структура("ИдентификаторГородаОснования", Строка(ИдентификаторГородаОснования)));
	ФС = Объект.БлижайшиеКрупныеГорода.Выгрузить(Строки, "Представление").ВыгрузитьКолонку("Представление");
	
	Индекс = ФС.Количество()-1;
	Пока Индекс > 0 Цикл
		ФС.Вставить(Индекс, "  ");
		Индекс = Индекс - 1;
	КонецЦикла;
	
	Попытка
		Элементы[НаименованиеПоля].Заголовок	= Новый ФорматированнаяСтрока(ФС);
		Элементы[НаименованиеПоля].Видимость	= ФС.Количество() > 0;
	Исключение
		Элементы[НаименованиеПоля].Видимость	= Ложь;
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция ПригласитьНаСделкуСервер(ИдентификаторВстречногоПредложения, СтрокаЗапроса, ТекстОшибки)
	СтрокаОтвета = уатИнтеграции_уэ.АТИ_ПриглашениеНаСделку(Объект.УчетнаяЗапись, Объект.ИдентификаторАТИ, ИдентификаторВстречногоПредложения, СтрокаЗапроса, ТекстОшибки);
	Возврат СтрокаОтвета;
КонецФункции

&НаСервере
Функция ПроверкаНаЗаполнениеОбязательныеПолейАТИ()
	
	НетОшибок = Истина;
	Если НЕ ЗначениеЗаполнено(Объект.ИдентификаторНаименованияГруза) Тогда
		ТекстОшибки = Нстр("ru = 'Не выбрано наименование груза'");
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Поле  = "НаименованиеГруза";
		Сообщение.Текст = ТекстОшибки;
		Сообщение.Сообщить();
		
		НетОшибок = Ложь;
	Конецесли;
	
	Если НЕ ЗначениеЗаполнено(Объект.ИдентификаторКонтакта) Тогда
		ТекстОшибки = Нстр("ru = 'Не выбран контакт'");
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Поле  = "НаименованиеКонтакта";
		Сообщение.Текст = ТекстОшибки;
		Сообщение.Сообщить();
		
		НетОшибок = Ложь;
	Конецесли;
	
	Если НачалоДня(Объект.ОтправлениеС) < НачалоДня(ТекущаяДата()) Тогда
		ТекстОшибки = Нстр("ru = 'Дата отправления должна быть больше текущей даты'");
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Поле  = "Объект.ОтправлениеС";
		Сообщение.Текст = ТекстОшибки;
		Сообщение.Сообщить();
		
		НетОшибок = Ложь;
	Конецесли;
	
	Если НачалоДня(Объект.ОтправлениеПо) < НачалоДня(ТекущаяДата()) Тогда
		ТекстОшибки = Нстр("ru = 'Дата отправления должна быть больше текущей даты'");
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Поле  = "Объект.ОтправлениеПо";
		Сообщение.Текст = ТекстОшибки;
		Сообщение.Сообщить();
		
		НетОшибок = Ложь;
	Конецесли;
	
	Если НачалоДня(Объект.ДоставкаС) < НачалоДня(ТекущаяДата()) Тогда
		ТекстОшибки = Нстр("ru = 'Дата прибытия должна быть больше текущей даты'");
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Поле  = "Объект.ДоставкаС";
		Сообщение.Текст = ТекстОшибки;
		Сообщение.Сообщить();
		
		НетОшибок = Ложь;
	Конецесли;

	Если НачалоДня(Объект.ДоставкаПо) < НачалоДня(ТекущаяДата()) Тогда
		ТекстОшибки = Нстр("ru = 'Дата прибытия должна быть больше текущей даты'");
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Поле  = "Объект.ДоставкаПо";
		Сообщение.Текст = ТекстОшибки;
		Сообщение.Сообщить();
		
		НетОшибок = Ложь;
	Конецесли;

	Если НЕ ЗначениеЗаполнено(Объект.ИдентификаторНаименованияУпаковки) Тогда
		ТекстОшибки = Нстр("ru = 'Не выбран вариант загрузки'");
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Поле  = "НаименованиеУпоковки";
		Сообщение.Текст = ТекстОшибки;
		Сообщение.Сообщить();
		
		НетОшибок = Ложь;
	Конецесли;

	Если НЕ ЗначениеЗаполнено(Объект.ИдентификаторВалюты) Тогда
		ТекстОшибки = Нстр("ru = 'Не выбрана валюта'");
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Поле  = "ВалютаСтрока";
		Сообщение.Текст = ТекстОшибки;
		Сообщение.Сообщить();
		
		НетОшибок = Ложь;
	Конецесли;
	
	Если (НЕ ЗначениеЗаполнено(Вес) 
			ИЛИ Вес = "0")
			И (НЕ ЗначениеЗаполнено(Объем)
			ИЛИ Объем = "0") Тогда
		ТекстОшибки = Нстр("ru = 'Не указан вес или объем груза'");
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Поле  = "Вес";
		Сообщение.Текст = ТекстОшибки;
		Сообщение.Сообщить();
		
		НетОшибок = Ложь;
	Конецесли;
	
	Если Объект.ПромежуточныеПункты.Количество() = 0 Тогда
		ТекстОшибки = Нстр("ru = 'Не выбран заказ'");
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Поле  = "ИдентификаторГородаОтправления";
		Сообщение.Текст = ТекстОшибки;
		Сообщение.Сообщить();
		
		НетОшибок = Ложь;
	Конецесли;
	
	Если Объект.ПромежуточныеПункты.Количество() <> 0 
		И НЕ ЗначениеЗаполнено(Объект.ПромежуточныеПункты[0].ИдентификаторГорода) Тогда
		ТекстОшибки = Нстр("ru = 'Не выбран пункт отправления'; en = 'Departure point is not selected'");
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Поле  = "ИдентификаторГородаОтправления";
		Сообщение.Текст = ТекстОшибки;
		Сообщение.Сообщить();
		
		НетОшибок = Ложь;
	Конецесли;
	
	Если Объект.ПромежуточныеПункты.Количество() <> 0 
		И НЕ ЗначениеЗаполнено(Объект.ПромежуточныеПункты[Объект.ПромежуточныеПункты.Количество()-1].ИдентификаторГорода) Тогда
		ТекстОшибки = Нстр("ru = 'Не выбран пункт прибытия'");
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Поле  = "ИдентификаторГородаПрибытия";
		Сообщение.Текст = ТекстОшибки;
		Сообщение.Сообщить();
		
		НетОшибок = Ложь;
	Конецесли;
	
	Если НаименованиеГруза = "Другой" 
		И НЕ ЗначениеЗаполнено(Объект.НаименованиеГруза) Тогда
		
		ТекстОшибки = Нстр("ru = 'Не заполнено наименование груза'");

		Сообщение = Новый СообщениеПользователю;
		Сообщение.Поле  = "НаименованиеГрузаСтрока";
		Сообщение.Текст = ТекстОшибки;
		Сообщение.Сообщить();
		
		НетОшибок = Ложь;
	Конецесли;
	
	Если НЕ ЗначениеЗаполнено(Объект.СтавкаНаличные) 
		И НЕ ЗначениеЗаполнено(Объект.СтавкаСНДС) 
		И НЕ ЗначениеЗаполнено(Объект.СтавкаБезНДС) Тогда
		ТекстОшибки = Нстр("ru = 'Не указана ставка'");
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Поле  = "Объект.СтавкаНаличные";
		Сообщение.Текст = ТекстОшибки;
		Сообщение.Сообщить();
		
		НетОшибок = Ложь;
	Конецесли;

	Возврат НетОшибок;
	

КонецФункции

&НаКлиенте
Процедура БиржаАТИПриИзменении()

	Элементы.Страницы.ТекущаяСтраница = Элементы.ГруппаАТИ;
	Объект.УчетнаяЗапись              = ПолучитьУчетнуюЗаписьАТИ(Объект.Биржа, Объект.Организация, Объект.Ответственный);
	
	Если Не ЗначениеЗаполнено(Объект.УчетнаяЗапись) Тогда
		ТекстОшибки = СтрШаблон(Нстр("ru = 'Не удалось получить учетную запись для Организации %1'"), Объект.Организация);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
	ПолучитьНастройкиБиржыАТИ(Объект.Биржа, СоответсвиеИдентификаторНаименованияГруза,
			СоответсвиеИдентификаторНаименованияУпаковки, СоответсвиеВидГрузаНаименованияУпаковки, СоответсвиеКонтактов, СоответсвиеНоменклатураНаименованияГруза,
			СоответсвиеВалют, СоответсвиеНаименованияВалют, СоответсвиеВалютаНаименования);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьНастройкиБиржыАТИ(Биржа, СоответсвиеИдентификаторНаименованияГруза, СоответсвиеИдентификаторНаименованияУпаковки,
	СоответсвиеВидГрузаНаименованияУпаковки, СоответсвиеКонтактов,
	СоответсвиеНоменклатураНаименованияГруза, СоответсвиеВалют, СоответсвиеНаименованияВалют, СоответсвиеВалютаНаименования)
	
	Если Не ЗначениеЗаполнено(Объект.УчетнаяЗапись) Тогда
		Возврат;
	КонецЕсли;
	
	СпрОб = Биржа.ПолучитьОбъект();
	ХранилищеНастроек = СпрОб.НастройкиХранилище.Получить();
	Если Не ХранилищеНастроек = Неопределено Тогда 
		СтруктураНастроек = ХранилищеНастроек;
	КонецЕсли;
	
	Если СтруктураНастроек = Неопределено Тогда 
		СпаравочникиЗагружены = Ложь;
	Иначе
		СпаравочникиЗагружены = СтруктураНастроек.СпаравочникиЗагружены;
		
		CписокНаименованийУпаковок = СтруктураНастроек.СоответсвиеУпаковки;
		Для Каждого ТекСтрока Из CписокНаименованийУпаковок Цикл
			Элементы.НаименованиеУпоковки.СписокВыбора.Добавить(ТекСтрока.НаименованиеАТИ, ТекСтрока.НаименованиеАТИ);
			СоответсвиеИдентификаторНаименованияУпаковки.Вставить(ТекСтрока.НаименованиеАТИ, ТекСтрока.Идентификатор);
			СоответсвиеВидГрузаНаименованияУпаковки.Вставить(ТекСтрока.Упаковка, ТекСтрока.НаименованиеАТИ);
			
			Если Объект.ИдентификаторНаименованияУпаковки = ТекСтрока.Идентификатор Тогда
				НаименованиеУпоковки = ТекСтрока.НаименованиеАТИ;
			КонецЕсли;
		КонецЦикла;
		
		CписокНаименованийГрузов = СтруктураНастроек.НаименованияГрузов;
		Для Каждого ТекСтрока Из CписокНаименованийГрузов Цикл
			Элементы.НаименованиеГруза.СписокВыбора.Добавить(ТекСтрока.НаименованиеАТИ, ТекСтрока.НаименованиеАТИ);
			СоответсвиеИдентификаторНаименованияГруза.Вставить(ТекСтрока.НаименованиеАТИ, ТекСтрока.Идентификатор);
			СоответсвиеНоменклатураНаименованияГруза.Вставить(ТекСтрока.Номенклатура, ТекСтрока.НаименованиеАТИ);
			
			Если Объект.ИдентификаторНаименованияГруза = ТекСтрока.Идентификатор Тогда
				НаименованиеГруза = ТекСтрока.НаименованиеАТИ;
			КонецЕсли;
		КонецЦикла;
		
		CписокВариантовЗагрузки = СтруктураНастроек.ТипыКузова;
		Для Каждого ТекСтрока Из CписокВариантовЗагрузки Цикл
			НоваяСтрока = Объект.ТипыКузова.Добавить();
			НоваяСтрока.Наименование  = ТекСтрока.НаименованиеАТИ;
			НоваяСтрока.Идентификатор = ТекСтрока.Идентификатор;
		КонецЦИкла;
		
		CписокВариантовРазгрузки = СтруктураНастроек.ВариантыЗагрузки;
		Для Каждого ТекСтрока Из CписокВариантовРазгрузки Цикл
			НоваяСтрока = Объект.ТипыЗагрузки.Добавить();
			НоваяСтрока.Наименование  = ТекСтрока.НаименованиеАТИ;
			НоваяСтрока.Идентификатор = ТекСтрока.Идентификатор;
		КонецЦИкла;
		
		ТаблицаКузовов = СтруктураНастроек.ВариантыРазгрузки;
		Для Каждого ТекСтрока Из ТаблицаКузовов Цикл
			НоваяСтрока = Объект.ТипыВыгрузки.Добавить();
			НоваяСтрока.Наименование  = ТекСтрока.НаименованиеАТИ;
			НоваяСтрока.Идентификатор = ТекСтрока.Идентификатор;
		КонецЦикла;
		
		CписокВалют = СтруктураНастроек.Валюты;
		Для Каждого ТекСтрока Из CписокВалют Цикл
			Элементы.Валюта.СписокВыбора.Добавить(ТекСтрока.НаименованиеАТИ, ТекСтрока.НаименованиеАТИ);
			СоответсвиеВалют.Вставить(ТекСтрока.НаименованиеАТИ, ТекСтрока.Идентификатор);
			СоответсвиеНаименованияВалют.Вставить(ТекСтрока.Валюта, ТекСтрока.НаименованиеАТИ);
			СоответсвиеВалютаНаименования.Вставить(ТекСтрока.НаименованиеАТИ, ТекСтрока.Валюта);

			Если Объект.Ссылка.Пустая()
				И НЕ ЗначениеЗаполнено(Объект.ИдентификаторВалюты) Тогда
				Если Объект.ВалютаДокумента = ТекСтрока.Валюта Тогда
					Объект.ИдентификаторВалюты = ТекСтрока.Идентификатор;
					ВалютаСтрока = ТекСтрока.НаименованиеАТИ;
				КонецЕсли;
			ИначеЕсли Объект.ИдентификаторВалюты = ТекСтрока.Идентификатор Тогда
				ВалютаСтрока = ТекСтрока.НаименованиеАТИ;
			КонецЕсли;
		КонецЦИкла;
		
		Если Объект.ВариантЗагрузки = 1 Тогда
			ВариантЗагрузкиСтрока = Нстр("ru = 'только отдельной машиной'");
		ИначеЕсли Объект.ВариантЗагрузки = 2 
			ИЛИ Объект.ВариантЗагрузки = 3 Тогда
			ВариантЗагрузкиСтрока = Нстр("ru = 'отдельной или догрузом'");
		КонецЕсли;
		
		ПолучениеИнформацииОбАккаунте(СоответсвиеКонтактов);
		ПолучениеСпискаПлощадокДляРазмещения();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПолучениеИнформацииОбАккаунте(СоответсвиеКонтактов)
	
	СоответсвиеКонтактов = Новый Соответствие();
	
	ТекстОшибки = "";
	ИнформацияОбАккаунте = уатИнтеграции_уэ.АТИ_ПолучениеИнформацииОбАккаунте(Объект.УчетнаяЗапись, ТекстОшибки);
	Если НЕ ЗначениеЗАполнено(ТекстОшибки) Тогда
		Если ЗначениеЗаполнено(ИнформацияОбАккаунте)
			И ИнформацияОбАккаунте.Свойство("Contacts") 
			И ТипЗнч(ИнформацияОбАккаунте.Contacts) = Тип("Массив") Тогда
			
			Элементы.НаименованиеКонтакта.СписокВыбора.Очистить();
			
			Контакты = ИнформацияОбАккаунте.Contacts;
			Для Каждого ТекСтрока Из Контакты Цикл
				Элементы.НаименованиеКонтакта.СписокВыбора.Добавить(ТекСтрока.Name, ТекСтрока.Name);
				СоответсвиеКонтактов.Вставить(ТекСтрока.Name, ТекСтрока.ID);
				Если Объект.ИдентификаторКонтакта = ТекСтрока.ID Тогда
					НаименованиеКонтакта = ТекСтрока.Name;
				КонецЕсли;
			КонецЦикла;
			
			Если ЗначениеЗаполнено(Объект.УчетнаяЗапись.IDКонтакта) Тогда
				НаименованиеКонтакта		 = Объект.УчетнаяЗапись.Контакт;
				Объект.ИдентификаторКонтакта = Объект.УчетнаяЗапись.IDКонтакта;
			ИначеЕсли Контакты.Количество() <> 0 Тогда
				НаименованиеКонтакта		 = Контакты[0].Name;
				Объект.ИдентификаторКонтакта = Контакты[0].ID;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьУчетнуюЗаписьАТИ(Биржа, Организация, Ответственный)
	
	УчетнаяЗапись = Справочники.уатУчетныеЗаписиБирж.ПустаяСсылка();
	УчетныеЗаписи = Биржа.УчетныеЗаписи;
	НужныеСтроки  = УчетныеЗаписи.НайтиСтроки(Новый Структура("Организация, Пользователь", Организация, Ответственный));
	Если НужныеСтроки.Количество() = 0 Тогда
		НужныеСтроки  = УчетныеЗаписи.НайтиСтроки(Новый Структура("Организация", Организация));
		Если НужныеСтроки.Количество() <> 0 Тогда
			УчетнаяЗапись = НужныеСтроки[0].УчетнаяЗапись;
		КонецЕсли;
	Иначе
		УчетнаяЗапись = НужныеСтроки[0].УчетнаяЗапись;
	КонецЕсли;
	
	Возврат УчетнаяЗапись;
КонецФункции

&НаКлиенте
Процедура УстановитьВидимостьАТИ()
	
	Элементы.ГруппаАТИ.Видимость               = ЗначениеЗаполнено(Объект.Биржа)
		И Объект.Биржа = ПредопределенноеЗначение("Справочник.уатБиржиГрузоперевозок_уэ.АТИ");
		
	Элементы.НаименованиеГрузаСтрока.Видимость = Объект.ИдентификаторНаименованияГруза = "59";
	Элементы.КоманднаяПанельАТИ.Доступность = ЗначениеЗаполнено(Объект.УчетнаяЗапись);
	Элементы.ФормаОпубликоватьАТИ.Видимость = НЕ ЗначениеЗаполнено(Объект.ИдентификаторАТИ);
	Элементы.УдалитьГруз.Видимость          = ЗначениеЗаполнено(Объект.ИдентификаторАТИ);
	
	Итератор         = 0;
	УстановитьСтатус = Ложь;
	АдресОтправленияСтатусКартинка = 1;
	АдресНазначенияСтатусКартинка  = 1;
	ПунктыСтатусКартинка           = 1;
	
	КолВоПунктов     = Объект.ПромежуточныеПункты.Количество();
	Для Каждого ТекСтрока Из Объект.ПромежуточныеПункты Цикл
		ТекСтрока.Статус  = НЕ ЗначениеЗаполнено(ТекСтрока.ИдентификаторГорода);
		Если НЕ УстановитьСтатус Тогда
			УстановитьСтатус  = НЕ ЗначениеЗаполнено(ТекСтрока.ИдентификаторГорода);
			Если НЕ УстановитьСтатус
				И Итератор <> 0 Тогда
				ПунктыСтатусКартинка = 0;
			Иначе
				ПунктыСтатусКартинка = 1;
			Конецесли;
		КонецЕсли;
		Если Итератор = 0 Тогда
			Если ЗначениеЗаполнено(ТекСтрока.ИдентификаторГорода) Тогда
				АдресОтправленияСтатусКартинка = 0;
			Иначе
				АдресОтправленияСтатусКартинка = 1;
			Конецесли;
		Конецесли;
		Если Итератор = КолВоПунктов - 1 
			И Итератор <> 0 Тогда
			Если ЗначениеЗаполнено(ТекСтрока.ИдентификаторГорода) Тогда
				АдресНазначенияСтатусКартинка = 0;
			Иначе
				АдресНазначенияСтатусКартинка = 1;
			Конецесли;
		Конецесли;
		Итератор = Итератор + 1;
	КонецЦикла;
	
	Элементы.ПроцентПредоплаты.Доступность = Объект.ПредоплатаВключена;
	Если Объект.ИдентификаторНаименованияУпаковки = "1"
		ИЛИ Объект.ИдентификаторНаименованияУпаковки = "3" 
		ИЛИ Объект.ИдентификаторНаименованияУпаковки = "0" Тогда
		Объект.КоличествоУпаковокДляГруза               = 0;
		Элементы.КоличествоУпаковокДляГруза.Доступность = Ложь;
	Иначе
		Элементы.КоличествоУпаковокДляГруза.Доступность = Истина;
	КонецЕсли;
	
	Элементы.ОперацияИЛИТипыВыгрузки.Пометка = Объект.ОперацияТипаВыгрузки = "OR";
	Элементы.ОперацияИТипыВыгрузки.Пометка   = Объект.ОперацияТипаВыгрузки = "AND";

	Элементы.ОперацияИЛИТипыЗагрузки.Пометка = Объект.ОперацияТипаЗагрузки = "OR";
	Элементы.ОперацияИТипыЗагрузки.Пометка   = Объект.ОперацияТипаЗагрузки = "AND";

	Если ЗначениеЗаполнено(Объект.СтавкаНаличные) Тогда
		Объект.СтавкаСНДС   = 0;
		Объект.СтавкаБезНДС = 0;
		Элементы.СтавкаСНДС.Доступность   = Ложь;
		Элементы.СтавкаБезНДС.Доступность = Ложь;
	Иначе
		Элементы.СтавкаСНДС.Доступность   = Истина;
		Элементы.СтавкаБезНДС.Доступность = Истина;
	КонецЕсли;

	Элементы.ЧерезБанкДней.Доступность    = Объект.ЧерезБанкДнейВключено;
	Элементы.ДекорацияОплата.Доступность  = Объект.ЧерезБанкДнейВключено;
	
	Объект.ЧерезБанкДней                  = ?(Объект.ЧерезБанкДнейВключено, Объект.ЧерезБанкДней, 0);
	
КонецПроцедуры 

&НаСервере
Процедура ОпубликоватьАТИСервер(ТекстОшибки)
	
	ТекстОшибки = "";
	Если Истина Тогда
		ПараметрыЗапроса = ЗаполнитьСтруктуруГрузаАТИ(ТекстОшибки);
	Иначе
		ПараметрыЗапроса = ЗаполнитьСтруктуруГрузаАТИ2(ТекстОшибки);
	КонецЕсли; 
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		Возврат;
	КонецЕсли;

	ИдентификаторАТИ = уатИнтеграции_уэ.АТИ_ДобавлениеГруза(Объект.УчетнаяЗапись, ПараметрыЗапроса, ТекстОшибки);
	
	Если НЕ ЗначениеЗАполнено(ТекстОшибки) Тогда
		Объект.СтатусТендера = Справочники.уатСтатусы_уэ.Опубликовано;
		УстановитьУсловноеОформлениеПолейСтатусов();
		Объект.ИдентификаторАТИ = ИдентификаторАТИ;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьСтруктуруГрузаАТИ(ТекстОшибки)
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("CargoTypeId",		 Объект.ИдентификаторНаименованияГруза);
	ПараметрыЗапроса.Вставить("ADR",				 Объект.КлассОпасности);
	ПараметрыЗапроса.Вставить("Weight",				 СтрЗаменить(Вес, ",", "."));
	ПараметрыЗапроса.Вставить("Volume",				 СтрЗаменить(Объем, ",", "."));
	ПараметрыЗапроса.Вставить("BeltCount",			 СтрЗаменить(СтрЗаменить(Строка(Объект.КоличествоРемней), Символы.НПП, "")," ", ""));
	ПараметрыЗапроса.Вставить("PackType",			 Объект.ИдентификаторНаименованияУпаковки);
	ПараметрыЗапроса.Вставить("PalletCount",		 СтрЗаменить(СтрЗаменить(Строка(Объект.КоличествоУпаковокДляГруза), Символы.НПП, "")," ", ""));
	ПараметрыЗапроса.Вставить("DogruzType",			 Объект.ВариантЗагрузки);
	ПараметрыЗапроса.Вставить("SborGruz",			 ?(Объект.СборныйГруз, "true", "false"));
	ПараметрыЗапроса.Вставить("SizeLength",			 СтрЗаменить(Объект.Длина, ",", "."));
	ПараметрыЗапроса.Вставить("SizeWidth",			 СтрЗаменить(Объект.Ширина, ",", "."));
	ПараметрыЗапроса.Вставить("SizeHeight",			 СтрЗаменить(Объект.Высота, ",", "."));
	ПараметрыЗапроса.Вставить("CityId",				 СтрЗаменить(Объект.ПромежуточныеПункты[0].ИдентификаторГорода, Символы.НПП, ""));
	ПараметрыЗапроса.Вставить("UnloadingCityId",	 СтрЗаменить(Объект.ПромежуточныеПункты[Объект.ПромежуточныеПункты.Количество() -1].ИдентификаторГорода, Символы.НПП, ""));
	ПараметрыЗапроса.Вставить("ContactId1",			 СтрЗаменить(Объект.ИдентификаторКонтакта, Символы.НПП, ""));
	ПараметрыЗапроса.Вставить("FirstDate",			 Формат(Объект.ОтправлениеС, "ДФ=yyyy-MM-ddTHH:mm:ss"));
	ПараметрыЗапроса.Вставить("LastDate",			 Формат(Объект.ОтправлениеПо, "ДФ=yyyy-MM-ddTHH:mm:ss"));
	ПараметрыЗапроса.Вставить("Latitude",			 СтрЗаменить(Строка(ЛатОтправления), ",", "."));
	ПараметрыЗапроса.Вставить("Longitude",			 СтрЗаменить(Строка(ЛонОтправления), ",", "."));
	ПараметрыЗапроса.Вставить("UnloadingLatitude",	 СтрЗаменить(Строка(ЛатПрибытия), ",", "."));
	ПараметрыЗапроса.Вставить("UnloadingLongitude",	 СтрЗаменить(Строка(ЛонПрибытия), ",", "."));
	ПараметрыЗапроса.Вставить("TimeStart",			 Формат(Объект.ОтправлениеС, "ДФ=HH:mm:ss"));
	ПараметрыЗапроса.Вставить("TimeEnd",			 Формат(Объект.ОтправлениеПо, "ДФ=HH:mm:ss"));
	ПараметрыЗапроса.Вставить("CargoType",			 СтрЗаменить(Объект.НаименованиеГруза, """", "'"));
	ПараметрыЗапроса.Вставить("LoadingLogicalOperator",   Объект.ОперацияТипаЗагрузки);
	ПараметрыЗапроса.Вставить("UnloadingLogicalOperator", Объект.ОперацияТипаВыгрузки);
	ПараметрыЗапроса.Вставить("Note",				 СтрЗаменить(Объект.ПримечаниеКГрузу, """", "'"));
	ПараметрыЗапроса.Вставить("UnloadFirstDate",	 Формат(Объект.ДоставкаС, "ДФ=yyyy-MM-ddTHH:mm:ss"));
	ПараметрыЗапроса.Вставить("UnloadLastDate",		 Формат(Объект.ДоставкаПо, "ДФ=yyyy-MM-ddTHH:mm:ss"));
	ПараметрыЗапроса.Вставить("UnloadingTimeStart",	 Формат(Объект.ДоставкаС, "ДФ=HH:mm:ss"));
	ПараметрыЗапроса.Вставить("UnloadingTimeEnd",	 Формат(Объект.ДоставкаПо, "ДФ=HH:mm:ss"));
	ПараметрыЗапроса.Вставить("OrderNumber",		 Строка(Объект.Номер));
	ПараметрыЗапроса.Вставить("RateSum",			 СтрЗаменить(СтрЗаменить(Строка(Объект.СтавкаНаличные), ",", "."), Символы.НПП, ""));
	ПараметрыЗапроса.Вставить("SumWithNDS",			 СтрЗаменить(СтрЗаменить(Строка(Объект.СтавкаСНДС), ",", "."), Символы.НПП, ""));
	ПараметрыЗапроса.Вставить("SumWithoutNDS",		 СтрЗаменить(СтрЗаменить(Строка(Объект.СтавкаБезНДС), ",", "."), Символы.НПП, ""));
	ПараметрыЗапроса.Вставить("PrepayPercentEnabled", ?(Объект.ПредоплатаВключена, "true", "false"));
	ПараметрыЗапроса.Вставить("PrepayPercent",		 СтрЗаменить(СтрЗаменить(Строка(Объект.ПроцентПредоплаты), ",", "."), Символы.НПП, ""));
	ПараметрыЗапроса.Вставить("Torg",				 ?(Объект.ВозможенТорг, "true", "false"));
	ПараметрыЗапроса.Вставить("CurrencyId",			 СтрЗаменить(Объект.ИдентификаторВалюты, Символы.НПП, ""));
	
	Если ТипЗнч(Объект.ПромежуточныеПункты[Объект.ПромежуточныеПункты.Количество() -1].Пункт) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда
		ПараметрыЗапроса.Вставить("UnloadingStreet",	 Лев(Объект.ПромежуточныеПункты[Объект.ПромежуточныеПункты.Количество() -1].Пункт.Адрес, 99));
	ИначеЕсли ЗначениеЗаполнено(Объект.ПромежуточныеПункты[Объект.ПромежуточныеПункты.Количество() -1].Пункт) Тогда
		ПараметрыЗапроса.Вставить("UnloadingStreet",	 Лев(Объект.ПромежуточныеПункты[Объект.ПромежуточныеПункты.Количество() -1].Пункт, 99));
	Иначе
		ПараметрыЗапроса.Вставить("UnloadingStreet",	 Лев(Объект.ПромежуточныеПункты[Объект.ПромежуточныеПункты.Количество() -1].ИдентификаторГородаСтрока, 99));
	КонецЕсли;
	
	Если ТипЗнч(Объект.ПромежуточныеПункты[0].Пункт) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда
		ПараметрыЗапроса.Вставить("Street",	 Лев(Объект.ПромежуточныеПункты[0].Пункт.Адрес, 99));
	ИначеЕсли ЗначениеЗаполнено(Объект.ПромежуточныеПункты[Объект.ПромежуточныеПункты.Количество() -1].Пункт) Тогда
		ПараметрыЗапроса.Вставить("Street",	 Лев(Объект.ПромежуточныеПункты[0].Пункт, 99));
	Иначе
		ПараметрыЗапроса.Вставить("Street",	 Лев(Объект.ПромежуточныеПункты[0].ИдентификаторГородаСтрока, 99));
	КонецЕсли;
	ПараметрыЗапроса.Вставить("PayDaysEnabled",	 	 ?(Объект.ЧерезБанкДнейВключено, "true", "false"));
	ПараметрыЗапроса.Вставить("PayDays",	 		 Объект.ЧерезБанкДней);

	
	CarType = 0;
	МассивГрупп = Новый Массив();
	МассивГрупп.Добавить("91");
	МассивГрупп.Добавить("844424930131980");
	МассивГрупп.Добавить("70368744191104");
	МассивГрупп.Добавить("18726594281984");
	
	Для Каждого ТекСтрока Из Объект.ТипыКузова Цикл
		Если НЕ ТекСтрока.ФлагВыбора Тогда
			Продолжить;
		КонецЕсли;
		Если МассивГрупп.Найти(ТекСтрока.Идентификатор) <> Неопределено Тогда
			Продолжить;
		Конецесли;
		CarType = CarType + Число(ТекСтрока.Идентификатор);
	КонецЦикла;
	Если CarType = 0 Тогда
		ТекстОшибки = Нстр("ru = 'Не указан тип кузова'");
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Поле  = "Объект.ТипыКузова";
		Сообщение.Текст = ТекстОшибки;
		Сообщение.Сообщить();

		Возврат ПараметрыЗапроса;
	КонецЕсли;
	
	ПараметрыЗапроса.Вставить("CarType",	СтрЗаменить(Строка(CarType), Символы.НПП, ""));
	
	LoadingType = 0;
	Для Каждого ТекСтрока Из Объект.ТипыЗагрузки Цикл
		Если НЕ ТекСтрока.ФлагВыбора Тогда
			Продолжить;
		КонецЕсли;
		LoadingType = LoadingType + Число(ТекСтрока.Идентификатор);
	КонецЦикла;
	UnloadingType = 0;
	Для Каждого ТекСтрока Из Объект.ТипыВыгрузки Цикл
		Если НЕ ТекСтрока.ФлагВыбора Тогда
			Продолжить;
		КонецЕсли;
		UnloadingType = UnloadingType + Число(ТекСтрока.Идентификатор);
	КонецЦикла;
	ПараметрыЗапроса.Вставить("LoadingType",	СтрЗаменить(Строка(LoadingType), Символы.НПП, ""));
	ПараметрыЗапроса.Вставить("UnloadingType",	СтрЗаменить(Строка(UnloadingType), Символы.НПП, ""));

	
	МассивПлощадок = Новый Массив();
	Для Каждого ТекСтрока Из Объект.Площадки Цикл
		Если ТекСтрока.ФлагВыбора Тогда
			МассивПлощадок.Добавить(ТекСтрока.Идентификатор);
		Конецесли;
	КонецЦикла;
		
	МассивПункты = Новый Массив();
	Итератор = 0;
	Для Каждого ТекСтрока Из Объект.ПромежуточныеПункты Цикл
		Если Итератор = 0
			ИЛИ Итератор = Объект.ПромежуточныеПункты.Количество() - 1 Тогда
			Итератор = Итератор + 1;
			Продолжить;
		Конецесли;
		Если ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяРазгрузка
			ИЛИ ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка Тогда
			ТипТочкиМаршрута = "2";
		Иначе
			ТипТочкиМаршрута = "1";
		Конецесли;
		Если ТипЗнч(ТекСтрока.Пункт) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда
			Адрес = ТекСтрока.Пункт.Адрес;
			Лат   = ТекСтрока.Пункт.Лат;
			Лон   = ТекСтрока.Пункт.Лон;
		ИначеЕсли ЗначениеЗаполнено(ТекСтрока.Пункт) Тогда
			Адрес = ТекСтрока.Пункт;
			Лат   = 0;
			Лат   = 0;
		Иначе
			Адрес = ТекСтрока.ИдентификаторГородаСтрока;
			Лат   = 0;
			Лон   = 0;
		КонецЕсли;
		МассивПункты.Добавить(Новый Структура("ИдентификаторГорода, ТипТочкиМаршрута, Лат, Лон, Адрес",
			СтрЗаменить(Строка(ТекСтрока.ИдентификаторГорода), Символы.НПП, ""), ТипТочкиМаршрута, Лат, Лон, Лев(Адрес, 99)));
		Итератор = Итератор + 1;
	КонецЦикла;
	
	Строки        = Объект.БлижайшиеКрупныеГорода.НайтиСтроки(Новый Структура("ИдентификаторГородаОснования", "0"));
	МассивГородов = Объект.БлижайшиеКрупныеГорода.Выгрузить(Строки, "ИдентификаторГорода").ВыгрузитьКолонку("ИдентификаторГорода");
	
	Строки                = Объект.БлижайшиеКрупныеГорода.НайтиСтроки(Новый Структура("ИдентификаторГородаОснования", "1"));
	МассивГородовДоставка = Объект.БлижайшиеКрупныеГорода.Выгрузить(Строки, "ИдентификаторГорода").ВыгрузитьКолонку("ИдентификаторГорода");
	
	ПараметрыЗапроса.Вставить("МассивПлощадок",			МассивПлощадок);
	ПараметрыЗапроса.Вставить("МассивГородов",			МассивГородов);
	ПараметрыЗапроса.Вставить("МассивГородовДоставка",	МассивГородовДоставка);
	ПараметрыЗапроса.Вставить("МассивПункты",			МассивПункты);
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

&НаСервере
Функция ЗаполнитьСтруктуруГрузаАТИ2(ТекстОшибки)
	
	ПараметрыЗапроса = Новый Структура();
	ПараметрыЗапроса.Вставить("CargoTypeId",		 Число(Объект.ИдентификаторНаименованияГруза));
	ПараметрыЗапроса.Вставить("ADR",				 Объект.КлассОпасности);
	ПараметрыЗапроса.Вставить("Weight",				 Число(Вес));
	ПараметрыЗапроса.Вставить("Volume",				 Число(Объем));
	ПараметрыЗапроса.Вставить("BeltCount",			 Объект.КоличествоРемней);
	ПараметрыЗапроса.Вставить("PackType",			 Число(Объект.ИдентификаторНаименованияУпаковки));
	ПараметрыЗапроса.Вставить("PalletCount",		 Объект.КоличествоУпаковокДляГруза);
	ПараметрыЗапроса.Вставить("DogruzType",			 Объект.ВариантЗагрузки);
	ПараметрыЗапроса.Вставить("SborGruz",			 Объект.СборныйГруз);
	ПараметрыЗапроса.Вставить("SizeLength",			 Число(Объект.Длина));
	ПараметрыЗапроса.Вставить("SizeWidth",			 Число(Объект.Ширина));
	ПараметрыЗапроса.Вставить("SizeHeight",			 Число(Объект.Высота));
	ПараметрыЗапроса.Вставить("CityId",				 Число(Объект.ПромежуточныеПункты[0].ИдентификаторГорода));
	ПараметрыЗапроса.Вставить("UnloadingCityId",	 Число(Объект.ПромежуточныеПункты[Объект.ПромежуточныеПункты.Количество() -1].ИдентификаторГорода));
	ПараметрыЗапроса.Вставить("ContactId1",			 Объект.ИдентификаторКонтакта);
	ПараметрыЗапроса.Вставить("FirstDate",			 Формат(Объект.ОтправлениеС, "ДФ=yyyy-MM-ddTHH:mm:ss"));
	ПараметрыЗапроса.Вставить("LastDate",			 Формат(Объект.ОтправлениеПо, "ДФ=yyyy-MM-ddTHH:mm:ss"));
	ПараметрыЗапроса.Вставить("Latitude",			 ЛатОтправления);
	ПараметрыЗапроса.Вставить("Longitude",			 ЛонОтправления);
	ПараметрыЗапроса.Вставить("UnloadingLatitude",	 ЛатПрибытия);
	ПараметрыЗапроса.Вставить("UnloadingLongitude",	 ЛонПрибытия);
	ПараметрыЗапроса.Вставить("TimeStart",			 Формат(Объект.ОтправлениеС, "ДФ=HH:mm:ss"));
	ПараметрыЗапроса.Вставить("TimeEnd",			 Формат(Объект.ОтправлениеПо, "ДФ=HH:mm:ss"));
	ПараметрыЗапроса.Вставить("CargoType",			 СтрЗаменить(Объект.НаименованиеГруза, """", "'"));
	ПараметрыЗапроса.Вставить("LoadingLogicalOperator",   Объект.ОперацияТипаЗагрузки);
	ПараметрыЗапроса.Вставить("UnloadingLogicalOperator", Объект.ОперацияТипаВыгрузки);
	ПараметрыЗапроса.Вставить("Note",				 СтрЗаменить(Объект.ПримечаниеКГрузу, """", "'"));
	ПараметрыЗапроса.Вставить("UnloadFirstDate",	 Формат(Объект.ДоставкаС, "ДФ=yyyy-MM-ddTHH:mm:ss"));
	ПараметрыЗапроса.Вставить("UnloadLastDate",		 Формат(Объект.ДоставкаПо, "ДФ=yyyy-MM-ddTHH:mm:ss"));
	ПараметрыЗапроса.Вставить("UnloadingTimeStart",	 Формат(Объект.ДоставкаС, "ДФ=HH:mm:ss"));
	ПараметрыЗапроса.Вставить("UnloadingTimeEnd",	 Формат(Объект.ДоставкаПо, "ДФ=HH:mm:ss"));
	ПараметрыЗапроса.Вставить("OrderNumber",		 Строка(Объект.Номер));
	ПараметрыЗапроса.Вставить("RateSum",			 Объект.СтавкаНаличные);
	ПараметрыЗапроса.Вставить("SumWithNDS",			 Объект.СтавкаСНДС);
	ПараметрыЗапроса.Вставить("SumWithoutNDS",		 Объект.СтавкаБезНДС);
	ПараметрыЗапроса.Вставить("PrepayPercentEnabled",Объект.ПредоплатаВключена);
	ПараметрыЗапроса.Вставить("PrepayPercent",		 Объект.ПроцентПредоплаты);
	ПараметрыЗапроса.Вставить("Torg",				 Объект.ВозможенТорг);
	ПараметрыЗапроса.Вставить("CurrencyId",			 Число(Объект.ИдентификаторВалюты));
	
	Если ТипЗнч(Объект.ПромежуточныеПункты[Объект.ПромежуточныеПункты.Количество() -1].Пункт) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда
		ПараметрыЗапроса.Вставить("UnloadingStreet",	 Лев(Объект.ПромежуточныеПункты[Объект.ПромежуточныеПункты.Количество() -1].Пункт.Адрес, 99));
	ИначеЕсли ЗначениеЗаполнено(Объект.ПромежуточныеПункты[Объект.ПромежуточныеПункты.Количество() -1].Пункт) Тогда
		ПараметрыЗапроса.Вставить("UnloadingStreet",	 Лев(Объект.ПромежуточныеПункты[Объект.ПромежуточныеПункты.Количество() -1].Пункт, 99));
	Иначе
		ПараметрыЗапроса.Вставить("UnloadingStreet",	 Лев(Объект.ПромежуточныеПункты[Объект.ПромежуточныеПункты.Количество() -1].ИдентификаторГородаСтрока, 99));
	КонецЕсли;
	
	Если ТипЗнч(Объект.ПромежуточныеПункты[0].Пункт) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда
		ПараметрыЗапроса.Вставить("Street",	 Лев(Объект.ПромежуточныеПункты[0].Пункт.Адрес, 99));
	ИначеЕсли ЗначениеЗаполнено(Объект.ПромежуточныеПункты[Объект.ПромежуточныеПункты.Количество() -1].Пункт) Тогда
		ПараметрыЗапроса.Вставить("Street",	 Лев(Объект.ПромежуточныеПункты[0].Пункт, 99));
	Иначе
		ПараметрыЗапроса.Вставить("Street",	 Лев(Объект.ПромежуточныеПункты[0].ИдентификаторГородаСтрока, 99));
	КонецЕсли;
	ПараметрыЗапроса.Вставить("PayDaysEnabled",	 	 Объект.ЧерезБанкДнейВключено);
	ПараметрыЗапроса.Вставить("PayDays",	 		 Объект.ЧерезБанкДней);

	
	CarType = 0;
	МассивГрупп = Новый Массив();
	МассивГрупп.Добавить("91");
	МассивГрупп.Добавить("844424930131980");
	МассивГрупп.Добавить("70368744191104");
	МассивГрупп.Добавить("18726594281984");
	
	МассивТиповКузовов = Новый Массив();
	Для Каждого ТекСтрока Из Объект.ТипыКузова Цикл
		Если НЕ ТекСтрока.ФлагВыбора Тогда
			Продолжить;
		КонецЕсли;
		Если МассивГрупп.Найти(ТекСтрока.Идентификатор) <> Неопределено Тогда
			Продолжить;
		Конецесли;
		МассивТиповКузовов.Добавить(Число(ТекСтрока.Идентификатор));
	КонецЦикла;
	Если МассивТиповКузовов.Количество() = 0 Тогда
		ТекстОшибки = Нстр("ru = 'Не указан тип кузова'");
		
		Сообщение = Новый СообщениеПользователю;
		Сообщение.Поле  = "Объект.ТипыКузова";
		Сообщение.Текст = ТекстОшибки;
		Сообщение.Сообщить();

		Возврат ПараметрыЗапроса;
	КонецЕсли;
	
	ПараметрыЗапроса.Вставить("МассивТиповКузовов",	МассивТиповКузовов);
	
	МассивСпособовЗагрузки = Новый Массив();
	Для Каждого ТекСтрока Из Объект.ТипыЗагрузки Цикл
		Если НЕ ТекСтрока.ФлагВыбора Тогда
			Продолжить;
		КонецЕсли;
		МассивСпособовЗагрузки.Добавить(Число(ТекСтрока.Идентификатор));
	КонецЦикла;
	МассивСпособовРазгрузки = Новый Массив();
	Для Каждого ТекСтрока Из Объект.ТипыВыгрузки Цикл
		Если НЕ ТекСтрока.ФлагВыбора Тогда
			Продолжить;
		КонецЕсли;
		МассивСпособовРазгрузки.Добавить(Число(ТекСтрока.Идентификатор));
	КонецЦикла;
	ПараметрыЗапроса.Вставить("МассивСпособовЗагрузки", МассивСпособовЗагрузки);
	ПараметрыЗапроса.Вставить("МассивСпособовРазгрузки",	МассивСпособовРазгрузки);

	
	МассивПлощадок = Новый Массив();
	Для Каждого ТекСтрока Из Объект.Площадки Цикл
		Если ТекСтрока.ФлагВыбора Тогда
			МассивПлощадок.Добавить(ТекСтрока.Идентификатор);
		Конецесли;
	КонецЦикла;
		
	МассивПункты = Новый Массив();
	Итератор = 0;
	Для Каждого ТекСтрока Из Объект.ПромежуточныеПункты Цикл
		Если Итератор = 0
			ИЛИ Итератор = Объект.ПромежуточныеПункты.Количество() - 1 Тогда
			Итератор = Итератор + 1;
			Продолжить;
		Конецесли;
		Если ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяРазгрузка
			ИЛИ ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка Тогда
			ТипТочкиМаршрута = "unloading";
		Иначе
			ТипТочкиМаршрута = "loading";
		Конецесли;
		Если ТипЗнч(ТекСтрока.Пункт) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда
			Адрес = ТекСтрока.Пункт.Адрес;
			Лат   = ТекСтрока.Пункт.Лат;
			Лон   = ТекСтрока.Пункт.Лон;
		ИначеЕсли ЗначениеЗаполнено(ТекСтрока.Пункт) Тогда
			Адрес = ТекСтрока.Пункт;
			Лат   = 0;
			Лат   = 0;
		Иначе
			Адрес = ТекСтрока.ИдентификаторГородаСтрока;
			Лат   = 0;
			Лон   = 0;
		КонецЕсли;
		МассивПункты.Добавить(Новый Структура("ИдентификаторГорода, ТипТочкиМаршрута, Лат, Лон, Адрес",
			Число(ТекСтрока.ИдентификаторГорода), ТипТочкиМаршрута, Лат, Лон, Лев(Адрес, 99)));
		Итератор = Итератор + 1;
	КонецЦикла;
	
	Строки        = Объект.БлижайшиеКрупныеГорода.НайтиСтроки(Новый Структура("ИдентификаторГородаОснования", "0"));
	МассивГородов = Объект.БлижайшиеКрупныеГорода.Выгрузить(Строки, "ИдентификаторГорода").ВыгрузитьКолонку("ИдентификаторГорода");
	Для Каждого ТекСтрока Из МассивГородов Цикл
		ТекСтрока = Число(ТекСтрока);
	КонецЦикла;
	Строки                = Объект.БлижайшиеКрупныеГорода.НайтиСтроки(Новый Структура("ИдентификаторГородаОснования", "1"));
	МассивГородовДоставка = Объект.БлижайшиеКрупныеГорода.Выгрузить(Строки, "ИдентификаторГорода").ВыгрузитьКолонку("ИдентификаторГорода");
	Для Каждого ТекСтрока Из МассивГородовДоставка Цикл
		ТекСтрока = Число(ТекСтрока);
	КонецЦикла;
	ПараметрыЗапроса.Вставить("МассивПлощадок",			МассивПлощадок);
	ПараметрыЗапроса.Вставить("МассивГородов",			МассивГородов);
	ПараметрыЗапроса.Вставить("МассивГородовДоставка",	МассивГородовДоставка);
	ПараметрыЗапроса.Вставить("МассивПункты",			МассивПункты);
	
	Возврат ПараметрыЗапроса;
	
КонецФункции

&НаКлиенте
Процедура ОпубликоватьАТИПродолжение(Результат, ДопПараметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если Не ПроверитьЗаполнение() Тогда
			Возврат;
		КонецЕсли;
		
		Попытка
			Записать();
			ОпубликоватьАТИКлиент();
		Исключение
			ТекстСообщения = ИнформацияОбОшибке().Описание;
			ТекПричина = ИнформацияОбОшибке().Причина;
			Сч = 1; МаксСч = 10;
			Пока ТекПричина <> Неопределено И Сч <= МаксСч Цикл
				ТекстСообщения = ТекстСообщения + " \ " + ТекПричина.Описание;
				ТекПричина = ТекПричина.Причина;
				Сч = Сч + 1;
			КонецЦикла;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОформитьПродолжение(Результат, ТекущиеДанные) Экспорт 
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		ТекущиеДанные.Ответ = ПредопределенноеЗначение("Перечисление.уатРезультатТендера_уэ.Подтвержден");
		
		ЗаполнятьКонтрагента = Ложь;
		Если НЕ ЗначениеЗаполнено(Объект.Победитель) Тогда
			ЗаполнятьКонтрагента = Истина;
		КонецЕсли;
		
		СтруктураПеревозки = уатИнтеграции_уэ.АТИ_ПолучениеИнформацииТСВодитель(Объект.УчетнаяЗапись, ТекущиеДанные.GUID,
			Объект.Организация, Объект.Подразделение, ТекущиеДанные.Перевозчик);
		Если ЗаполнятьКонтрагента Тогда
			Объект.Победитель        = ТекущиеДанные.Перевозчик;
			
			ТекДанные = Элементы.Перевозчики.ТекущиеДанные;
			ТекДанные.Перевозчик = ТекущиеДанные.Перевозчик; 
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Основание",         Объект.Ссылка);
		ПараметрыФормы.Вставить("СтруктураПеревозки", СтруктураПеревозки); 
		ПараметрыФормы.Вставить("Перевозчик",         Объект.Победитель);


		ОткрытьФорму("Документ.уатЗаказПеревозчику_уэ.Форма.ФормаДокумента", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОпубликоватьАТИКлиент() 
	
	Если ЗначениеЗаполнено(Объект.ИдентификаторАТИ) Тогда
		ТекстОшибки = Нстр("ru = 'Данный груз уже опубликован'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.УчетнаяЗапись) Тогда
		ТекстОшибки = СтрШаблон(Нстр("ru = 'Не заполнена учетная запись для Организации %1'"), Объект.Организация);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,Объект.Ссылка,"Объект.Биржа");
		Возврат;
	КонецЕсли;
	
	Если НЕ ПроверкаНаЗаполнениеОбязательныеПолейАТИ() Тогда
		Возврат;
	КонецЕсли;
	
	ТекстОшибки = "";
	ОпубликоватьАТИСервер(ТекстОшибки);
	
	Если ЗначениеЗаполнено(Объект.ИдентификаторАТИ) Тогда
		ОписаниеНСТР = Нстр("ru = 'Груз успешно опубликован.'");
		ПоказатьПредупреждение(Неопределено, ОписаниеНСТР);
		Модифицированность = Истина;
		УстановитьВидимостьАТИ();
		Попытка
			Записать();
		Исключение
		КонецПопытки;
		
	ИначеЕсли ЗначениеЗаполнено(ТекстОшибки) Тогда
		ПоказатьПредупреждение(Неопределено, ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПолучениеСпискаПлощадокДляРазмещения()
	ТекстОшибки = "";
	CписокПлощадокДляРазмещения = уатИнтеграции_уэ.АТИ_ПолучениеСпискаПлощадокДляРазмещения(Объект.УчетнаяЗапись, ТекстОшибки);
	Если НЕ ЗначениеЗАполнено(ТекстОшибки) Тогда
		ПлощадкаВыбрана = Ложь;
		Для Каждого ТекСтрока Из CписокПлощадокДляРазмещения Цикл
			ИдентификаторВыбранныхПлощадок = Объект.Площадки.НайтиСтроки(Новый Структура("Идентификатор", ТекСтрока.Идентификатор));
			Если ИдентификаторВыбранныхПлощадок.Количество() <> 0 Тогда
				НоваяСтрока = ИдентификаторВыбранныхПлощадок[0];
				Если НоваяСтрока.ФлагВыбора Тогда
					ПлощадкаВыбрана = Истина;
				КонецЕсли;
			Иначе
				НоваяСтрока = Объект.Площадки.Добавить();
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
			
			ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.Площадки.Идентификатор");
			ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
			ЭлементОтбора.ПравоеЗначение = ТекСтрока.Идентификатор;
			
			ПолеЭлемента = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных("ПлощадкиФлагВыбора");
			
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ТекСтрока.Цвет);
		КонецЦИкла;
		Если НЕ ПлощадкаВыбрана Тогда
			ИдентификаторВыбранныхПлощадок = Объект.Площадки.НайтиСтроки(Новый Структура("Идентификатор", "a0a0a0a0a0a0a0a0a0a0a0a0"));
			Если ИдентификаторВыбранныхПлощадок.Количество() <> 0 Тогда
				НоваяСтрока = ИдентификаторВыбранныхПлощадок[0];
				НоваяСтрока.ФлагВыбора = 1;
			КонецЕсли;
		КонецЕсли;
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеПрибыльНаСервере(ДокументСсылка)
	ДатаКурса          = Объект.Дата;
	СтруктураВалютаУпр  = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(мВалютаУправленческогоУчета, ДатаКурса);
	СтруктураВалютаРегл = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(мВалютаРегламентированногоУчета, ДатаКурса);
	Расходы = 0;
	СуммаНДС = 0;

	// Плановые услуги
	ИспользоватьПлановыеУслуги = ПолучитьФункциональнуюОпцию("уатИспользоватьПлановыеУслуги_уэ");
	Если ИспользоватьПлановыеУслуги Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатПлановыеУслуги_уэОбороты.СуммаУпрОборот КАК РасходыПлан,
		|	уатПлановыеУслуги_уэОбороты.СуммаРеглОборот КАК РасходыПланРегл,
		|	уатПлановыеУслуги_уэОбороты.СтавкаНДС КАК СтавкаНДС
		|ПОМЕСТИТЬ ПлановыеУслуги
		|ИЗ
		|	РегистрНакопления.уатПлановыеУслуги_уэ.Обороты(, , Регистратор, ПолучательУслуг = ЗНАЧЕНИЕ(Перечисление.уатПолучателиУслуг.НашаОрганизация)) КАК уатПлановыеУслуги_уэОбороты
		|ГДЕ
		|	уатПлановыеУслуги_уэОбороты.Регистратор = &Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ПлановыеУслуги.РасходыПлан), 0) КАК РасходыПлан,
		|	ЕСТЬNULL(СУММА(ПлановыеУслуги.РасходыПланРегл), 0) КАК РасходыПланРегл,
		|	ПлановыеУслуги.СтавкаНДС КАК СтавкаНДС
		|ИЗ
		|	ПлановыеУслуги КАК ПлановыеУслуги
		|
		|СГРУППИРОВАТЬ ПО
		|	ПлановыеУслуги.СтавкаНДС");
		Запрос.УстановитьПараметр("Регистратор", ДокументСсылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Если Объект.ВалютаДокумента = мВалютаУправленческогоУчета Тогда
				Расходы = Выборка.РасходыПлан;
			ИначеЕсли Объект.ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
				Расходы = Выборка.РасходыПланРегл;
			Иначе
				Расходы = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(Выборка.РасходыПлан,
				мВалютаУправленческогоУчета,  Объект.ВалютаДокумента,
				СтруктураВалютаУпр.Курс,      Объект.КурсВзаиморасчетов,
				СтруктураВалютаУпр.Кратность, Объект.КратностьВзаиморасчетов);
			КонецЕсли;
			
			СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеСтавкиНДС(Выборка.СтавкаНДС);
			СуммаНДС  = ?(Объект.СуммаВключаетНДС, 
			Расходы - (Расходы) / ((СтавкаНДС + 100) / 100),
			Расходы * СтавкаНДС / 100);
			
			Расходы = Расходы + ?(Объект.СуммаВключаетНДС, 0, СуммаНДС);

		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Расходы) Тогда
		// Фактические услуги
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(уатРасходыОстаткиИОбороты.СуммаУпрОборот, 0) КАК Расходы,
		|	ЕСТЬNULL(уатРасходыОстаткиИОбороты.СуммаРеглОборот, 0) КАК РасходыРегл,
		|	ЕСТЬNULL(уатРасходыОстаткиИОбороты.СуммаНДСОборот, 0) КАК СуммаНДСОборот
		|ПОМЕСТИТЬ ДоходыИРасходы
		|ИЗ
		|	РегистрНакопления.уатРасходы.ОстаткиИОбороты(, , Регистратор, , ) КАК уатРасходыОстаткиИОбороты
		|ГДЕ
		|	уатРасходыОстаткиИОбороты.Регистратор = &Регистратор
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	СУММА(ЕстьNull(ДоходыИРасходы.Расходы, 0)) КАК Расходы,
		|	СУММА(ЕстьNull(ДоходыИРасходы.РасходыРегл, 0)) КАК РасходыРегл,
		|	СУММА(ЕстьNull(ДоходыИРасходы.СуммаНДСОборот, 0)) КАК СуммаНДС
		|ИЗ
		|	ДоходыИРасходы КАК ДоходыИРасходы");
		Запрос.УстановитьПараметр("Регистратор", ДокументСсылка);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Если Объект.ВалютаДокумента = мВалютаУправленческогоУчета Тогда
				Расходы = ?(НЕ ЗначениеЗаполнено(Выборка.Расходы), 0,Выборка.Расходы);
				
				СуммаНДС = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(?(НЕ ЗначениеЗаполнено(Выборка.СуммаНДС), 0,Выборка.СуммаНДС),
				мВалютаРегламентированногоУчета,     Объект.ВалютаДокумента,
				СтруктураВалютаРегл.Курс,            Объект.КурсВзаиморасчетов,
				СтруктураВалютаРегл.Кратность,       Объект.КратностьВзаиморасчетов);

			ИначеЕсли Объект.ВалютаДокумента = мВалютаРегламентированногоУчета Тогда
				Расходы  = Выборка.РасходыРегл;
				СуммаНДС = Выборка.СуммаНДС;
			Иначе
				Расходы  = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(?(НЕ ЗначениеЗаполнено(Выборка.Расходы), 0,Выборка.Расходы),
				мВалютаУправленческогоУчета,  Объект.ВалютаДокумента,
				СтруктураВалютаУпр.Курс,            Объект.КурсВзаиморасчетов,
				СтруктураВалютаУпр.Кратность,       Объект.КратностьВзаиморасчетов);
				СуммаНДС = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(?(НЕ ЗначениеЗаполнено(Выборка.СуммаНДС), 0,Выборка.СуммаНДС),
				мВалютаРегламентированногоУчета,     Объект.ВалютаДокумента,
				СтруктураВалютаРегл.Курс,            Объект.КурсВзаиморасчетов,
				СтруктураВалютаРегл.Кратность,       Объект.КратностьВзаиморасчетов);
			КонецЕсли;
			
			Расходы = ?(НЕ ЗначениеЗаполнено(Расходы), 0, Расходы);
			СуммаНДС = ?(НЕ ЗначениеЗаполнено(СуммаНДС), 0, СуммаНДС);

			Расходы = Расходы + ?(Объект.СуммаВключаетНДС, 0, СуммаНДС);

		КонецЕсли;
	КонецЕсли;
	
	Возврат Расходы;
КонецФункции

&НаКлиенте
Процедура АрхивАТИЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено 
		ИЛИ РезультатЗакрытия = "" Тогда
		ТекстОшибки = Нстр("ru = 'Не заполнена причина, по которой отклоняется предложение на перевозку.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ТекстОшибки = "";
	Ответ = уатИнтеграции_уэ.АТИ_ОтклонениеЗаявкиГрузовладельцем(Объект.УчетнаяЗапись, ДополнительныеПараметры.GUID, РезультатЗакрытия, ТекстОшибки);
	Если НЕ ЗначениеЗАполнено(ТекстОшибки) Тогда
		Объект.СтатусТендера = ПредопределенноеЗначение("Справочник.уатСтатусы_уэ.Опубликовано");
		УстановитьУсловноеОформлениеПолейСтатусов();
		
		Строка = Объект.Перевозчики.НайтиПоИдентификатору(ДополнительныеПараметры.НомерСтроки);
		Если Строка <> Неопределено Тогда
			Строка.ЭтоПобедитель = 0;
			Строка.Ответ         = ПредопределенноеЗначение("Перечисление.уатРезультатТендера_уэ.Отклонен");
			Строка.Комментарий   = Строка.Комментарий + Символы.ПС + Нстр("ru = 'Был осуществлен отказ от груза по причине: '") + РезультатЗакрытия;
			Строка.GUID          = "";
		КонецЕсли;
		
		ПоказатьПредупреждение(Неопределено, Нстр("ru = 'Был осуществлен отказ от груза по причине: '") + РезультатЗакрытия);
	Иначе
		ПоказатьПредупреждение(Неопределено, ТекстОшибки);
	КонецЕсли;

	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНДСвТЧПеревозчики()
	Для Каждого ТекСтрока Из Объект.Перевозчики Цикл 
		Если ТекСтрока.УчитыватьНДС Тогда 
			Если ТекСтрока.СуммаВключаетНДС Тогда 
				ТекСтрока.УчитыватьНДСПредставление = НСтр("en='VAT amount';ru='НДС в сумме'");
			Иначе 
				ТекСтрока.УчитыватьНДСПредставление = НСтр("en='VAT from above';ru='НДС сверху'");
			КонецЕсли;
		Иначе 
			ТекСтрока.УчитыватьНДСПредставление = НСтр("en='Document excluding VAT';ru='Строка без НДС'");
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти = Неопределено)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	РассчитатьСуммуВсегоВстрокеТЧ(СтрокаТабличнойЧасти);
		
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуВсегоВстрокеТЧ(СтрокаТабличнойЧасти)
	Попытка
		СуммаВключаетНДС = СтрокаТабличнойЧасти.СуммаВключаетНДС;
	Исключение
		СуммаВключаетНДС = Объект.СуммаВключаетНДС;
	КонецПопытки;
	Попытка
		УчитыватьНДС = СтрокаТабличнойЧасти.УчитыватьНДС;
	Исключение
		УчитыватьНДС = Объект.УчитыватьНДС;
	КонецПопытки;
	
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма
		+ ?(УчитыватьНДС И НЕ СуммаВключаетНДС, СтрокаТабличнойЧасти.СуммаНДС, 0);
		
	МассивСтрок = Объект.Перевозчики.НайтиСтроки(Новый Структура("ЭтоПобедитель", 1));
	Если МассивСтрок.Количество() <> 0 Тогда
		Объект.СуммаДокумента = МассивСтрок[0].Всего;
		ИтогСумма    = МассивСтрок[0].Сумма;
		ИтогСуммаНДС = МассивСтрок[0].СуммаНДС;
	Конецесли;
	ВывестиСуммовыеИтогиДокумента();

КонецПроцедуры

&НаКлиенте
Процедура ПромежуточныеПунктыПриАктивизацииСтроки(Элемент)
	
	Если Объект.ПромежуточныеПункты.Количество() = 0 Тогда
		Возврат;
	Конецесли;
	
	ЭтотОбъект.ИдентификаторГородаОтправления = Объект.ПромежуточныеПункты[0].ИдентификаторГородаСтрока;
	ЭтотОбъект.ИдентификаторГородаПрибытия    = Объект.ПромежуточныеПункты[Объект.ПромежуточныеПункты.Количество() - 1].ИдентификаторГородаСтрока;
	ПромежуточныеПунктыПриАктивизацииСтрокиСерер();
	УстановитьВидимостьАТИ();
КонецПроцедуры

&НаСервере
Процедура ПромежуточныеПунктыПриАктивизацииСтрокиСерер()
	
	Если ТипЗнч(Объект.ПромежуточныеПункты[0].Пункт) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда
		ЛатОтправления   = Объект.ПромежуточныеПункты[0].Пункт.Лат;
		ЛонОтправления   = Объект.ПромежуточныеПункты[0].Пункт.Лон;
	Иначе
		ЛатОтправления = 0;
		ЛонОтправления = 0;
	КонецЕсли;
	Если ТипЗнч(Объект.ПромежуточныеПункты[Объект.ПромежуточныеПункты.Количество() - 1].Пункт) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда
		ЛатПрибытия      = Объект.ПромежуточныеПункты[Объект.ПромежуточныеПункты.Количество() - 1].Пункт.Лат;
		ЛонПрибытия      = Объект.ПромежуточныеПункты[Объект.ПромежуточныеПункты.Количество() - 1].Пункт.Лон;
	Иначе
		ЛатПрибытия = 0;
		ЛонПрибытия = 0;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ЗаполнитьПоОбъемамПеревозокВопрос(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда 
		Объект.Перевозчики.Очистить();
		ЗаполнитьПоОбъемамПеревозокЗавершение();
		
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда 
		ЗаполнитьПоОбъемамПеревозокЗавершение();
		
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоОбъемамПеревозокЗавершение()
	
	СписокПеревозчиков = ПолучитьПеревозчиковСУчетомОбъемовПеревозчиков(Объект.МаршрутныйЛист);
	Для Каждого ТекПеревозчик Из СписокПеревозчиков Цикл
		ДанныеПеревозчика = уатЗащищенныеФункцииСервер_уэ.ПолучитьДанныеПеревозчика(ТекПеревозчик);
		
		СтрокаПеревозчика = Объект.Перевозчики.Добавить();
		СтрокаПеревозчика.Перевозчик = ТекПеревозчик;
		СтрокаПеревозчика.Услуга     = ДанныеПеревозчика.Услуга;
		
		Если ЗначениеЗаполнено(ДанныеПеревозчика.СтавкаНДС) Тогда 
			СтрокаПеревозчика.СтавкаНДС = ДанныеПеревозчика.СтавкаНДС;
		Иначе
			СтрокаПеревозчика.СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
			ПользователиКлиентСервер.АвторизованныйПользователь(), 
			"ОсновнаяСтавкаНДС");
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПеревозчиковСУчетомОбъемовПеревозчиков(МаршрутныйЛист)
	
	// Подбираем всех перевозчиков, для которых в текущем документе "Планирование работы ТС" есть строки с аналитиками,
	// соответствующими Маршрутному листу
	
	Результат = Новый Массив();
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатМаршрутныйЛист.Ссылка КАК Ссылка,
	|	уатМаршрутныйЛист.Маршрут КАК Маршрут,
	|	уатМаршрутныйЛист.АдресОтправления КАК АдресОтправления,
	|	уатМаршрутныйЛист.АдресНазначения КАК АдресНазначения,
	|	уатМаршрутныйЛист.ОбъектСтроительства КАК ОбъектСтроительства,
	|	уатСценарииПланирования.Ссылка КАК Сценарий,
	|	уатМаршрутныйЛист.ВидПеревозки КАК ВидПеревозки,
	|	уатМаршрутныйЛист.НаправлениеПеревозки КАК НаправлениеПеревозки,
	|	уатМаршрутныйЛист.Организация КАК Организация,
	|	уатМаршрутныйЛист.Подразделение КАК Подразделение,
	|	уатПланированиеРаботыТС.Ссылка КАК ПланированиеРаботыТС,
	|	уатМаршрутныйЛист.ТС.Модель КАК МодельТС,
	|	уатМаршрутныйЛист.ТС.ТипТС КАК ТипТС,
	|	уатСценарииПланирования.ПараметрВыработки КАК ПараметрВыработки
	|ПОМЕСТИТЬ втСценарийПланирования
	|ИЗ
	|	Документ.уатМаршрутныйЛист КАК уатМаршрутныйЛист
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатПланированиеРаботыТС КАК уатПланированиеРаботыТС
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.уатСценарииПланирования КАК уатСценарииПланирования
	|			ПО уатПланированиеРаботыТС.Сценарий = уатСценарииПланирования.Ссылка
	|		ПО уатМаршрутныйЛист.Организация = уатПланированиеРаботыТС.Организация
	|			И уатМаршрутныйЛист.Подразделение = уатПланированиеРаботыТС.Подразделение
	|ГДЕ
	|	уатСценарииПланирования.Раздел = ЗНАЧЕНИЕ(Перечисление.уатРазделыПланирования.ОбъемыПеревозок)
	|	И уатПланированиеРаботыТС.Проведен = ИСТИНА
	|	И уатМаршрутныйЛист.Ссылка = &Ссылка
	|	И уатМаршрутныйЛист.ДоговорКонтрагента.ПланированиеОбъемовПеревозок = ИСТИНА
	|	И &ДатаЗакрытия МЕЖДУ уатПланированиеРаботыТС.ДатаПланирования И ВЫБОР
	|			КОГДА уатСценарииПланирования.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Декада)
	|				ТОГДА КОНЕЦПЕРИОДА(уатПланированиеРаботыТС.ДатаПланирования, ДЕКАДА)
	|			КОГДА уатСценарииПланирования.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Месяц)
	|				ТОГДА КОНЕЦПЕРИОДА(уатПланированиеРаботыТС.ДатаПланирования, МЕСЯЦ)
	|			КОГДА уатСценарииПланирования.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Квартал)
	|				ТОГДА КОНЕЦПЕРИОДА(уатПланированиеРаботыТС.ДатаПланирования, КВАРТАЛ)
	|			КОГДА уатСценарииПланирования.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.Полугодие)
	|				ТОГДА КОНЕЦПЕРИОДА(уатПланированиеРаботыТС.ДатаПланирования, ПОЛУГОДИЕ)
	|			КОГДА уатСценарииПланирования.Периодичность = ЗНАЧЕНИЕ(Перечисление.Периодичность.год)
	|				ТОГДА КОНЕЦПЕРИОДА(уатПланированиеРаботыТС.ДатаПланирования, ГОД)
	|			ИНАЧЕ уатПланированиеРаботыТС.ДатаПланирования
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втСценарийПланирования.Организация КАК Организация,
	|	втСценарийПланирования.Подразделение КАК Подразделение,
	|	втСценарийПланирования.Сценарий КАК Сценарий,
	|	втСценарийПланирования.ПланированиеРаботыТС КАК ПланированиеРаботыТС,
	|	ВЫБОР
	|		КОГДА уатСценарииПланированияРазрезМаршрут.РазрезПланирования ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		КОГДА уатСценарииПланированияРазрезМаршрут.ВариантАналитики = ЗНАЧЕНИЕ(Перечисление.уатВариантыАналитик.Маршрут)
	|			ТОГДА втСценарийПланирования.Маршрут
	|		КОГДА уатСценарииПланированияРазрезМаршрут.ВариантАналитики = ЗНАЧЕНИЕ(Перечисление.уатВариантыАналитик.ПунктОтправления)
	|			ТОГДА втСценарийПланирования.АдресОтправления
	|		КОГДА уатСценарииПланированияРазрезМаршрут.ВариантАналитики = ЗНАЧЕНИЕ(Перечисление.уатВариантыАналитик.ПунктНазначения)
	|			ТОГДА втСценарийПланирования.АдресНазначения
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК Маршрут,
	|	ВЫБОР
	|		КОГДА уатСценарииПланированияРазрезВидПеревозки.РазрезПланирования ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ втСценарийПланирования.ВидПеревозки
	|	КОНЕЦ КАК ВидПеревозки,
	|	ВЫБОР
	|		КОГДА уатСценарииПланированияРазрезНаправлениеПеревозки.РазрезПланирования ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ втСценарийПланирования.НаправлениеПеревозки
	|	КОНЕЦ КАК НаправлениеПеревозки,
	|	ВЫБОР
	|		КОГДА уатСценарииПланированияРазрезОбъектСтроительства.РазрезПланирования ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		ИНАЧЕ втСценарийПланирования.ОбъектСтроительства
	|	КОНЕЦ КАК ОбъектСтроительства,
	|	ВЫБОР
	|		КОГДА уатСценарииПланированияРазрезВидТранспорта.РазрезПланирования ЕСТЬ NULL
	|			ТОГДА НЕОПРЕДЕЛЕНО
	|		КОГДА уатСценарииПланированияРазрезВидТранспорта.ВариантАналитики = ЗНАЧЕНИЕ(Перечисление.уатВариантыАналитик.МодельТС)
	|			ТОГДА втСценарийПланирования.МодельТС
	|		КОГДА уатСценарииПланированияРазрезВидТранспорта.ВариантАналитики = ЗНАЧЕНИЕ(Перечисление.уатВариантыАналитик.ТипТС)
	|			ТОГДА втСценарийПланирования.ТипТС
	|		ИНАЧЕ НЕОПРЕДЕЛЕНО
	|	КОНЕЦ КАК ВидТС
	|ПОМЕСТИТЬ втМаршрутныйЛистСПланом
	|ИЗ
	|	втСценарийПланирования КАК втСценарийПланирования
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатСценарииПланирования.РазрезыПланирования КАК уатСценарииПланированияРазрезМаршрут
	|		ПО втСценарийПланирования.Сценарий = уатСценарииПланированияРазрезМаршрут.Ссылка
	|			И (уатСценарииПланированияРазрезМаршрут.РазрезПланирования = ЗНАЧЕНИЕ(Перечисление.уатРазрезыПланирования.Маршрут))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатСценарииПланирования.РазрезыПланирования КАК уатСценарииПланированияРазрезВидПеревозки
	|		ПО втСценарийПланирования.Сценарий = уатСценарииПланированияРазрезВидПеревозки.Ссылка
	|			И (уатСценарииПланированияРазрезВидПеревозки.РазрезПланирования = ЗНАЧЕНИЕ(Перечисление.уатРазрезыПланирования.ВидПеревозки))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатСценарииПланирования.РазрезыПланирования КАК уатСценарииПланированияРазрезНаправлениеПеревозки
	|		ПО втСценарийПланирования.Сценарий = уатСценарииПланированияРазрезНаправлениеПеревозки.Ссылка
	|			И (уатСценарииПланированияРазрезНаправлениеПеревозки.РазрезПланирования = ЗНАЧЕНИЕ(Перечисление.уатРазрезыПланирования.НаправлениеПеревозки))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатСценарииПланирования.РазрезыПланирования КАК уатСценарииПланированияРазрезОбъектСтроительства
	|		ПО втСценарийПланирования.Сценарий = уатСценарииПланированияРазрезОбъектСтроительства.Ссылка
	|			И (уатСценарииПланированияРазрезОбъектСтроительства.РазрезПланирования = ЗНАЧЕНИЕ(Перечисление.уатРазрезыПланирования.ОбъектСтроительства))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатСценарииПланирования.РазрезыПланирования КАК уатСценарииПланированияРазрезВидТранспорта
	|		ПО втСценарийПланирования.Сценарий = уатСценарииПланированияРазрезВидТранспорта.Ссылка
	|			И (уатСценарииПланированияРазрезВидТранспорта.РазрезПланирования = ЗНАЧЕНИЕ(Перечисление.уатРазрезыПланирования.ТС))
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатМаршрутныйЛист.ВыработкаТСиСотрудников КАК уатМаршрутныйЛистВыработкаТСиСотрудников
	|		ПО втСценарийПланирования.ПараметрВыработки = уатМаршрутныйЛистВыработкаТСиСотрудников.ПараметрВыработки
	|			И втСценарийПланирования.Ссылка = уатМаршрутныйЛистВыработкаТСиСотрудников.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втМаршрутныйЛистСПланом.Организация КАК Организация,
	|	втМаршрутныйЛистСПланом.Подразделение КАК Подразделение,
	|	уатПланированиеРаботыТССоставПлана.Контрагент КАК Перевозчик
	|ИЗ
	|	втМаршрутныйЛистСПланом КАК втМаршрутныйЛистСПланом
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатПланированиеРаботыТС.СоставПлана КАК уатПланированиеРаботыТССоставПлана
	|		ПО втМаршрутныйЛистСПланом.ПланированиеРаботыТС = уатПланированиеРаботыТССоставПлана.Ссылка
	|			И (втМаршрутныйЛистСПланом.Маршрут = уатПланированиеРаботыТССоставПлана.Маршрут
	|				ИЛИ уатПланированиеРаботыТССоставПлана.Маршрут = ЗНАЧЕНИЕ(Справочник.уатМаршруты.ПустаяСсылка)
	|				ИЛИ уатПланированиеРаботыТССоставПлана.Маршрут = ЗНАЧЕНИЕ(Справочник.уатПунктыНазначения.ПустаяСсылка)
	|				ИЛИ уатПланированиеРаботыТССоставПлана.Маршрут = НЕОПРЕДЕЛЕНО)
	|			И (втМаршрутныйЛистСПланом.ВидПеревозки = уатПланированиеРаботыТССоставПлана.ВидПеревозки
	|				ИЛИ уатПланированиеРаботыТССоставПлана.ВидПеревозки = ЗНАЧЕНИЕ(Справочник.уатВидыПеревозок.ПустаяСсылка))
	|			И (втМаршрутныйЛистСПланом.НаправлениеПеревозки = уатПланированиеРаботыТССоставПлана.НаправлениеПеревозки
	|				ИЛИ уатПланированиеРаботыТССоставПлана.НаправлениеПеревозки = ЗНАЧЕНИЕ(Справочник.уатНаправленияПеревозок.ПустаяСсылка))
	|			И (втМаршрутныйЛистСПланом.ОбъектСтроительства = уатПланированиеРаботыТССоставПлана.ОбъектСтроительства
	|				ИЛИ уатПланированиеРаботыТССоставПлана.ОбъектСтроительства = ЗНАЧЕНИЕ(Справочник.уатОбъектыСтроительства.ПустаяСсылка))
	|
	|СГРУППИРОВАТЬ ПО
	|	втМаршрутныйЛистСПланом.Организация,
	|	втМаршрутныйЛистСПланом.Подразделение,
	|	втМаршрутныйЛистСПланом.ПланированиеРаботыТС,
	|	уатПланированиеРаботыТССоставПлана.Контрагент");
	Запрос.УстановитьПараметр("Ссылка", МаршрутныйЛист);
	Запрос.УстановитьПараметр("ДатаЗакрытия",
		?(МаршрутныйЛист.ДатаЗакрытия = '00010101', МаршрутныйЛист.Дата, МаршрутныйЛист.ДатаЗакрытия));
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Результат.Добавить(Выборка.Перевозчик);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти

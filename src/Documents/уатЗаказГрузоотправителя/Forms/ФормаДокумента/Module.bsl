
#Область ПеременныеФормы

&НаКлиенте
Перем мКоличествоГрузовыхМестДляЦикла; // Хранит количество грузовых мест для цикла, необходимо для вывода дублирующихся при необходимости.
&НаКлиенте
Перем ДанныеСтрокиПромежуточныхПунктов; // Хранит данные строки ТЧ перед началом редактирования.
&НаКлиенте
Перем ДанныеСтрокиУслуги; // Хранит данные строки ТЧ Доходы/Расходы перед началом редактирования.
&НаКлиенте
Перем СтрокаПолученияПодсказкиАдреса; // Хранит строку, по которой выполнялся поиск в сервисе подсказок по адресам
&НаКлиенте
Перем СписокПодсказокАдреса; // Хранит подсказки, полученные в сервисе подсказок по адресам
#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	уатЗащищенныеФункцииСервер.уатДокументФормаЭлементаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, Объект, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Взаимодействия
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Взаимодействия") Тогда
		МодульВзаимодействия = ОбщегоНазначения.ОбщийМодуль("Взаимодействия");
		МодульВзаимодействия.ПодготовитьОповещения(ЭтотОбъект, Параметры, Ложь);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Взаимодействия
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	уатОбменСКонтрагентами.КомандыЭДО_ФормаДокумента(ЭтотОбъект);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЭлектронныеПеревозочныеДокументы, "ЗаказНаТС", Объект.Ссылка);
	//НастроенОбменЭПД = уатОбменСГИСЭПД.ДокументооборотНастроен(Объект.Организация, Объект.Грузоотправитель);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

	Если Не ПравоДоступа("Использование", Метаданные.Отчеты.уатОказанныеТранспортныеУслуги) Тогда 
		Элементы.ОткрытьОтчетОказУслуги.Доступность = Ложь;
	КонецЕсли;
	ВариантПоставкиКОРП = уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП();
	ИспользоватьОбменЭД = ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭД"); 

	Элементы.ГруппаСобытия.Видимость                                      = ВариантПоставкиКОРП;
	Элементы.ПромежуточныеПунктыОткрытьРедакторСхемыПеревозки.Доступность = ВариантПоставкиКОРП;
	Элементы.ТабЭтапыЗаказаОткрытьРедакторСхемыПеревозки.Доступность      = ВариантПоставкиКОРП;
	Элементы.ФормаОформлениеДокументов.Доступность                        = ВариантПоставкиКОРП
		И ПравоДоступа("Просмотр", Метаданные.ОбщиеФормы.уатФормаОформленияДокументов_уэ);
		
	Если Метаданные.Отчеты.Найти("уатСравнениеПлановыхИФактическихДоходовИРасходов") <> Неопределено  Тогда 
		Если Не ПравоДоступа("Использование", Метаданные.Отчеты.уатСравнениеПлановыхИФактическихДоходовИРасходов) Тогда 
			Элементы.ОткрытьОтчетПланФактДоходыРасходы.Доступность = Ложь;
		КонецЕсли;
	Иначе
		Элементы.ОткрытьОтчетПланФактДоходыРасходы.Видимость = Ложь;
	КонецЕсли;
	
	уатЭлектронныеКартыСервер.УстановитьСписокВыбораЦветовВПоле(Элементы.ЦветДокумента);
	Если Параметры.Ключ.Пустая() Тогда 
		УстановитьСлучайныйЦветЗаказа();
	КонецЕсли;
	
	ВосстановитьПользовательскиеНастройки();
	ПравоРедактированиеДокумента = ПравоРедактированиеДокумента();
	
	АвторизованныйКонтрагент = уатЗащищенныеФункцииСервер_проф.АвторизованныйКонтрагент(АвторизованВнешнийПользователь);
	Если АвторизованВнешнийПользователь Тогда 
		Если Параметры.Ключ.Пустая() Тогда 
			Объект.Ответственный = ПользователиКлиентСервер.АвторизованныйПользователь();
			Объект.Контрагент = АвторизованныйКонтрагент;
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ДоговорыКонтрагентов.Организация КАК Организация,
			|	ДоговорыКонтрагентов.Ссылка КАК Договор
			|ИЗ
			|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
			|ГДЕ
			|	ДоговорыКонтрагентов.Владелец = &Контрагент";
			
			Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент);
			
			РезультатЗапроса = Запрос.Выполнить().Выгрузить();
			
			Если РезультатЗапроса.Количество() <> 0 Тогда
				Объект.Организация = РезультатЗапроса[0].Организация;
				Объект.ДоговорКонтрагента = РезультатЗапроса[0].Договор;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
	МноговалютныйУчет = ПолучитьФункциональнуюОпцию("уатМноговалютныйУчет");
	Мультимодальный   = Объект.Мультимодальный;
	
	Если Параметры.Свойство("МультимодальныйРодительскийЗаказ") Тогда 
		ДокОбъект = РеквизитФормыВЗначение("Объект");
		ДокОбъект.ДополнительныеСвойства.Вставить("ЗаполнениеЭтапаПоРодительскомуЗаказу", Истина);
		Если Параметры.Свойство("ПараметрыЭтапа") Тогда
			ДокОбъект.ДополнительныеСвойства.Вставить("ПараметрыЭтапа", Параметры.ПараметрыЭтапа);
		КонецЕсли;
		Если Параметры.Свойство("ГрузДляКопирования") Тогда
			ДокОбъект.ДополнительныеСвойства.Вставить("ГрузДляКопирования", Параметры.ГрузДляКопирования);
		КонецЕсли;
		ДокОбъект.Заполнить(Параметры.МультимодальныйРодительскийЗаказ);
		ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
	КонецЕсли;
	Если Параметры.Свойство("ПланировщикНачалоПериода") Тогда 
		Объект.ОтправлениеС  = Параметры.ПланировщикНачалоПериода;
		Объект.ОтправлениеПо = Объект.ОтправлениеС;
	КонецЕсли;
	Если Параметры.Свойство("ПланировщикКонецПериода") Тогда 
		Объект.ДоставкаС  = Параметры.ПланировщикКонецПериода;
		Объект.ДоставкаПо = Объект.ДоставкаС;
	КонецЕсли;
	
	// Ввод на основании потребности
	Если Параметры.Свойство("Потребность") И Параметры.Свойство("IDПотребности") Тогда
		Если Параметры.Свойство("ДатаДокумента") И ЗначениеЗаполнено(Параметры.ДатаДокумента) Тогда
			Объект.Дата = Параметры.ДатаДокумента;
		КонецЕсли;
		Если Параметры.Свойство("Организация") Тогда
			Объект.Организация = ?(ЗначениеЗаполнено(Параметры.Организация), Параметры.Организация, Объект.Организация);
		КонецЕсли;
		
		IDДатыДействия = ?(Параметры.Свойство("IDДатыДействия"), Параметры.IDДатыДействия, "");
		
		ДокОбъект = РеквизитФормыВЗначение("Объект");
		ЗаписатьПромежуточныеПункты(ДокОбъект);
		Документы.уатЗаказГрузоотправителя.ЗаполнитьНаОснованииПотребности(ДокОбъект, Параметры.Потребность,
			Параметры.IDПотребности, IDДатыДействия, Параметры.ДатаОтправления, Параметры.ДатаПрибытия);
		ДокОбъект.РассчитатьИтоговыеПоказатели();
		ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
		ПрочитатьПромежуточныеПункты(ДокОбъект); 
		
	ИначеЕсли Параметры.Свойство("ЭПД") Тогда
		ЭПД = Параметры.ЭПД;
		ЗаполнитьЗначенияСвойств(Объект, ЭПД,, "Контрагент");
		Если ЗначениеЗаполнено(ЭПД.Контрагент) Тогда
			Объект.Контрагент = ЭПД.Контрагент;
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ДоговорыКонтрагентов.Организация КАК Организация,
			|	ДоговорыКонтрагентов.Ссылка КАК Договор
			|ИЗ
			|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
			|ГДЕ
			|	ДоговорыКонтрагентов.Владелец = &Контрагент
			|	И ДоговорыКонтрагентов.Организация = &Организация";
			
			Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент); 
			Запрос.УстановитьПараметр("Организация", Объект.Организация);
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Если Выборка.Следующий() Тогда
				Объект.ДоговорКонтрагента = Выборка.Договор;
			Иначе
				Объект.ДоговорКонтрагента = Неопределено;
			КонецЕсли;
			
		Иначе
			Объект.Контрагент         = Справочники.Контрагенты.ПустаяСсылка();
			Объект.ДоговорКонтрагента = Неопределено;
		КонецЕсли;
		Объект.ВалютаТоваров = ЭПД.Валюта;
		Для Каждого ТекСтрока Из ЭПД.МассивГрузов Цикл
			НоваяСтрока = Объект.ГрузовойСостав.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			НоваяСтрока.ВидУпаковки    = НоваяСтрока.ГрузовоеМесто.ВидУпаковки;
			НоваяСтрока.Стоимость      = ТекСтрока.СтоимостьГруза;
			НоваяСтрока.ВесБрутто      = ?(ЗначениеЗаполнено(ТекСтрока.МассаНетто),
				ТекСтрока.МассаНетто, ТекСтрока.МассаБрутто);
			НоваяСтрока.Объем          = ТекСтрока.ОбъемГруза;
			НоваяСтрока.КоличествоМест = ТекСтрока.КоличествоГрузовыхМест; 
			НоваяСтрока.ОписаниеГруза  = НоваяСтрока.ГрузовоеМесто.ОписаниеГруза;
			НоваяСтрока.ВесТары        = ?(ЗначениеЗаполнено(ТекСтрока.МассаНетто),
				ТекСтрока.МассаБрутто - ТекСтрока.МассаНетто, 0);
			НоваяСтрока.Валюта         = Справочники.Валюты.НайтиПоКоду(ТекСтрока.КодВалютыСтоимости);
			
		КонецЦикла;
	КонецЕсли;
	
	РазрешитьДетализациюЗаказовПоТоварам = (уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(
		Объект.Организация, "РазрешитьДетализациюЗаказовПоТоварам") = Истина);
	Если НЕ РазрешитьДетализациюЗаказовПоТоварам Тогда
		ЭлемТовары = Элементы.ДетализацияЗакрытия.СписокВыбора.НайтиПоЗначению(Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам);
		Если ЭлемТовары <> Неопределено Тогда
			Элементы.ДетализацияЗакрытия.СписокВыбора.Удалить(ЭлемТовары);
		КонецЕсли;
	КонецЕсли;
	РазрешитьДетализациюЗаказовПоГрузовымМестам = (уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(
		Объект.Организация, "РазрешитьДетализациюЗаказовПоГрузовымМестам")= Истина);
	Если НЕ РазрешитьДетализациюЗаказовПоГрузовымМестам Тогда
		ЭлемТовары = Элементы.ДетализацияЗакрытия.СписокВыбора.НайтиПоЗначению(Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам);
		Если ЭлемТовары <> Неопределено Тогда
			Элементы.ДетализацияЗакрытия.СписокВыбора.Удалить(ЭлемТовары);
		КонецЕсли;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.УчитыватьНДС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация, "УчитыватьНДС");
		Объект.СуммаВключаетНДС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация, "СуммаВключаетНДС");
		
		Если НЕ ЗначениеЗаполнено(Объект.Контрагент) тогда
			Объект.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.КонтактноеЛицоГрузоотправителя) тогда
			Объект.КонтактноеЛицоГрузоотправителя = "";
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.КонтактноеЛицоГрузополучателя) тогда
			Объект.КонтактноеЛицоГрузополучателя = "";
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.АдресОтправления) тогда
			Объект.АдресОтправления = "";
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.АдресНазначения) тогда
			Объект.АдресНазначения = "";
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(Объект.Контрагент) тогда
			флЗаказОтКонтрагента = 1;
			Объект.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		КонецЕсли;
		
		// заполнение детализации
		Если НЕ (Параметры.Свойство("Потребность") И Параметры.Свойство("IDПотребности"))
			И НЕ (Параметры.Свойство("ЗначениеКопирования") И ЗначениеЗаполнено(Параметры.ЗначениеКопирования)) 
			И НЕ ЗначениеЗаполнено(Объект.ДетализацияЗакрытия) Тогда
			ДетализацияНастройка = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(
				Объект.Организация, 
				"ДетализацияЗаказаГрузоотправителя"
			);
			Если ЗначениеЗаполнено(ДетализацияНастройка) Тогда
				Объект.ДетализацияЗакрытия = ДетализацияНастройка;
			КонецЕсли;
		КонецЕсли;
		
		Если Параметры.Свойство("ЗначениеКопирования")
			И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) И Объект.FTL ТОгда
			ДокОбъект = РеквизитФормыВЗначение("Объект");
			ДокОбъект.РассчитатьИтоговыеПоказатели(Истина);
			ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
			ПрочитатьПромежуточныеПункты(ДокОбъект);
		ИначеЕсли Объект.FTL И Объект.ПромежуточныеПункты.Количество() > 0 Тогда
			ПрочитатьПромежуточныеПункты(ДокОбъект);
		КонецЕсли;
		
		Если (Не РазрешитьДетализациюЗаказовПоТоварам И Не РазрешитьДетализациюЗаказовПоГрузовымМестам)
				Или (Не РазрешитьДетализациюЗаказовПоТоварам И Объект.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам)
				Или (Не РазрешитьДетализациюЗаказовПоГрузовымМестам И Объект.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам) Тогда
			Объект.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам;
		КонецЕсли;
		
	КонецЕсли;
	
	Если ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.Контрагенты") тогда
		флЗаказОтКонтрагента = 1;
		Элементы.Контрагент.ПодсказкаВвода = НСтр("'Введите ИНН или наименование'; en = 'Enter TIN or name'");
	Иначе
		флЗаказОтКонтрагента = 0;
		Элементы.Контрагент.ПодсказкаВвода = "";
	КонецЕсли;
	
	// Инициализация реквизитов формы.
	мВалютаРеглУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	Если уатРаботаСМетаданными.уатЕстьКонстанта("ВалютаУправленческогоУчета") Тогда
		мВалютаУпрУчета = Константы.ВалютаУправленческогоУчета.Получить();
	Иначе
		мВалютаУпрУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;
	
	Контрагент = Объект.Контрагент;
	Если НЕ Объект.Ссылка.Пустая() ИЛИ НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Договор = Объект.ДоговорКонтрагента;
	КонецЕсли;
	ВалютаРасчетов = Объект.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	НациональнаяВалюта = мВалютаРеглУчета;
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", НациональнаяВалюта));
	КурсНациональнаяВалюта = СтруктураПоВалюте.Курс;
	КратностьНациональнаяВалюта = СтруктураПоВалюте.Кратность;
	
	ИспользоватьПлановыеУслуги = ПолучитьФункциональнуюОпцию("уатИспользоватьПлановыеУслуги_уэ");
	ИспользоватьРасчетТары     = ПолучитьФункциональнуюОпцию("уатИспользоватьРасчетТары_уэ");
	
	Если Объект.Ссылка.Пустая() И НЕ ЗначениеЗаполнено(Объект.ВалютаТоваров) Тогда
		Объект.ВалютаТоваров = мВалютаУпрУчета;
	КонецЕсли;
	ВалютаТоваровПред = Объект.ВалютаТоваров;
	
	СтруктураОбъектовНастроек = Новый Структура;
	СтруктураОбъектовНастроек.Вставить("Организация", Объект.Организация);
	СтруктураОбъектовНастроек.Вставить("Подразделение", Объект.Подразделение);
	СтруктураОбъектовНастроек.Вставить("Пользователь", ПользователиКлиентСервер.АвторизованныйПользователь());
	
	Если Объект.Ссылка.Пустая() И Объект.ВидПеревозки.Пустая() Тогда
		Объект.ВидПеревозки = ПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, ПланыВидовХарактеристик.уатПраваИНастройки.ОсновнойВидПеревозок);
	КонецЕсли;
	Если Объект.Ссылка.Пустая() И Объект.ВидДоставки.Пустая() Тогда
		Объект.ВидДоставки = ПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, ПланыВидовХарактеристик.уатПраваИНастройки.ОсновнойВидДоставки);
	КонецЕсли;
	Если Объект.Ссылка.Пустая() И Объект.НаправлениеПеревозки.Пустая() Тогда
		Объект.НаправлениеПеревозки = ПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, ПланыВидовХарактеристик.уатПраваИНастройки.ОсновноеНаправлениеПеревозки);
	КонецЕсли;
	
	уатОбщегоНазначенияСервер.НастроитьПолеЕдиницыИзмерения(ЭтотОбъект, "Товары");
	уатОбщегоНазначенияСервер.НастроитьПолеКонтактноеЛицо(Элементы.КонтактноеЛицоГрузоотправителя);
	уатОбщегоНазначенияСервер.НастроитьПолеКонтактноеЛицо(Элементы.КонтактноеЛицоГрузополучателя);
	уатОбщегоНазначенияСервер.НастроитьПолеПодразделение(Элементы.Контрагент, "Объект.Организация", Объект.Ссылка.Метаданные().Реквизиты.Контрагент.Тип);
	уатОбщегоНазначенияСервер.НастроитьПолеДоговорКонтрагента(Элементы.ДоговорКонтрагента, "Объект.Организация", "Объект.Контрагент", "СПокупателем");
	
	УстановитьУсловноеОформлениеПолейСтатусов();
	УстановитьДоступностьДокументаПоИзменениямСтатуса();
	
	ОбновитьНадписьИтоги();
		
	Если Объект.Ссылка.Пустая() И Объект.Выработка.Количество() = 0 Тогда
		ЗаполнитьДопВыработкуПриСоздании();
	КонецЕсли;
	
	ОбновитьПараметрВыработкиВременныйОказ();
	ОбновитьПараметрВыработкиВременныйПолуч();
	
	УстановитьОтборСопроводительныхДокументов();
	УстановитьОтборСобытий();
	
	ВывестиСтатусЗавершенияОбработкиСопроводительныхДокументов();
	
	УстановитьВидимостьРеквизитовМультимодальнойПеревозки();
	
	Если Объект.Мультимодальный Тогда 
		Если Объект.ЭтоЭтап Тогда
			ОбновитьПлановыеДатыЭтапов();
		Иначе 
			ОбновитьПланировщикЭтапов();
			ОбновитьДоходыПоЭтапамСервер();
			ОбновитьРасходыПоЭтапамСервер();
		КонецЕсли;
	КонецЕсли;
	
	уатОбщегоНазначенияСервер.НастроитьПолеПодразделение(Элементы.Подразделение, "Объект.Организация");
	
	УстановитьВидимостьРеквизитовFTL();
	FTL = Объект.FTL;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла") Тогда 
		Элементы.ГрузовойСоставЗагрузитьГрузыИзФайла.Видимость                                = Истина;
		Элементы.ТоварыЗагрузитьТоварыИзФайла.Видимость                                       = Истина;
		Элементы.УслугиЗагрузитьУслугиИзФайла.Видимость                                       = Истина;
		Элементы.ПолучаемыеУслугиЗагрузитьЗатратыИзФайла.Видимость                            = Истина;
	Иначе 
		Элементы.ГрузовойСоставЗагрузитьГрузыИзФайла.Видимость                                = Ложь;
		Элементы.ТоварыЗагрузитьТоварыИзФайла.Видимость                                       = Ложь;
		Элементы.УслугиЗагрузитьУслугиИзФайла.Видимость                                       = Ложь;
		Элементы.ПолучаемыеУслугиЗагрузитьЗатратыИзФайла.Видимость                            = Ложь;
	КонецЕсли;
	
	Элементы.ТоварыКоличествоМест.Заголовок         = Справочники.уатВидыУпаковки_уэ.ПолучитьОсновнойВидУпаковки().КраткоеНаименование;
	
	ПредставлениеЕдиницыИзмеренияВеса = уатОбщегоНазначенияПовтИсп.ПолучитьПредставлениеОсновнойЕдиницыИзмеренияВеса();
	Если ЗначениеЗаполнено(ПредставлениеЕдиницыИзмеренияВеса) Тогда
		Элементы.ГрузовойСоставВесБрутто.Заголовок = НСтр("en='Weight, ';ru='Вес, '") + ПредставлениеЕдиницыИзмеренияВеса;
		Элементы.ТоварыВесБрутто.Заголовок         = НСтр("en='Weight, ';ru='Вес, '") + ПредставлениеЕдиницыИзмеренияВеса;
	КонецЕсли;
	
	ПредставлениеЕдиницыИзмеренияОбъема = уатОбщегоНазначенияПовтИсп.ПолучитьПредставлениеОсновнойЕдиницыИзмеренияОбъема();
	Если ЗначениеЗаполнено(ПредставлениеЕдиницыИзмеренияОбъема) Тогда
		Элементы.ГрузовойСоставОбъем.Заголовок = НСтр("en='Volume, ';ru='Объем, '") + ПредставлениеЕдиницыИзмеренияОбъема;
		Элементы.ТоварыОбъем.Заголовок         = НСтр("en='Volume, ';ru='Объем, '") + ПредставлениеЕдиницыИзмеренияОбъема;
	КонецЕсли;
	
	ОрганизацияПередИзменением = Объект.Организация;
	
	ОбновитьВалютуВТЧГрузовТоваровСервер();
	ЗаполнитьРеквизитыГрузовыхМест();

	ОбновитьВсегоВТЧСервер();
	ОбновитьПодвалСервер(Истина);
	
	Если ПравоДоступа("Чтение", Метаданные.РегистрыНакопления.уатВзаиморасчетыСКонтрагентами) Тогда
		Элементы.ГруппаДолгКонтрагента.Видимость = Истина;
	Иначе 
		Элементы.ГруппаДолгКонтрагента.Видимость = Ложь;
	КонецЕсли;
	
	ПрочитатьДанныеТегов();
	ОбновитьЭлементыТеговХарактеристик();
	ОбновитьЭлементыТеговГруппыСовместимости();
	
	Если ВариантПоставкиКОРП 
		И Константы.уатИспользоватьАвтоматическуюМаршрутизацию_уэ.Получить() Тогда
		Элементы.ГруппаМаршрутизация.Видимость           = Константы.уатИспользоватьОбъектыКОРП.Получить();
		Элементы.ТегиХарактеристики.Видимость      = Константы.уатИспользоватьХарактеристикиЗаказовНаТС_уэ.Получить();
		Элементы.ТегиГруппыСовместимости.Видимость = Константы.уатИспользоватьГруппыСовместимостиЗаказовНаТС_уэ.Получить();
	Иначе
		Элементы.ГруппаМаршрутизация.Видимость = Ложь;
	КонецЕсли;
	
	УстановитьВозможностьРедактированияДоходовРасходов();
	
	флПересчетИтогов = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ПользователиКлиентСервер.АвторизованныйПользователь(),
		"ЗаказНаТСПерерасчетИтоговПриПроведении");
	
	Если Параметры.Ключ.Пустая() И Не ЗначениеЗаполнено(Объект.АдресОтправления) Тогда
		ЗаполнитьАдресОтправленияПоУмолчанию();
		ОбновитьНадписьИтоги();
	КонецЕсли;
	
	мОтправлениеС  = Объект.ОтправлениеС;
	мОтправлениеПО = Объект.ОтправлениеПо;
	мДоставкаПО    = Объект.ДоставкаПо;
	мДоставкаС     = Объект.ДоставкаС;
	
	Если НЕ ЗначениеЗаполнено(Объект.ДатаКурса) Тогда
		Если ЗначениеЗаполнено(Объект.Дата) Тогда
			Объект.ДатаКурса = Объект.Дата;
		Иначе
			Объект.ДатаКурса = ТекущаяДата();
		КонецЕсли;
		Если ЗначениеЗаполнено(Объект.Ссылка) Тогда
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
	ИспользоватьСтрахование = ПолучитьФункциональнуюОпцию("уатИспользоватьСтрахование_уэ");
	Если ВариантПоставкиКОРП Тогда
		СтраховыеСертификаты.ПроизвольныйЗапрос = Истина;
		СтраховыеСертификаты.ОсновнаяТаблица    = "Документ.уатСтраховойСертификат_уэ";
		СтраховыеСертификаты.ТекстЗапроса = ТекстЗапросаСтраховыхСертификатов();
	КонецЕсли;
	
	ИспользоватьСкладскиеАкты = ПолучитьФункциональнуюОпцию("уатИспользоватьСкладскиеАкты_уэ");
	РазделятьПланФактВСкладскихАктах = ПолучитьФункциональнуюОпцию("уатРазделятьПланФактВСкладскихАктах_уэ");
	Элементы.ФормаОтчетГрузыВРейсах.Видимость = ИспользоватьСкладскиеАкты;
	Элементы.ФормаОтчетОстаткиГрузовНаСкладахКомплектации.Видимость = ИспользоватьСкладскиеАкты;
	Элементы.ФормаОтчетАнализОтгрузки.Видимость = ИспользоватьСкладскиеАкты И РазделятьПланФактВСкладскихАктах;
	Элементы.ФормаОтчетАнализПриемки.Видимость = ИспользоватьСкладскиеАкты И РазделятьПланФактВСкладскихАктах;
	Элементы.ЕстьРасхождения.Видимость = ИспользоватьСкладскиеАкты И РазделятьПланФактВСкладскихАктах;
	Элементы.ТабЭтапыЗаказаГруппаСкладскиеАкты.Видимость = ИспользоватьСкладскиеАкты;
	Элементы.ТабЭтапыЗаказаГруппаОперацииСГрузом.Видимость = ИспользоватьСкладскиеАкты;
	
	ИспользоватьДокументооборот = ПолучитьФункциональнуюОпцию("уатИспользоватьДокументооборот");
	Элементы.ГруппаДокументы.Видимость = ИспользоватьДокументооборот;
	
	
	// Отбор списка СтраховыеСертификаты
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СтраховыеСертификаты, "Ссылка", Объект.Ссылка);
	Если Объект.Ссылка.Пустая() Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СтраховыеСертификаты.Отбор, "Ссылка", Документы.уатЗаказГрузоотправителя.ПустаяСсылка());
	КонецЕсли;
	УстановитьЦветаСтатусовСтраховыеСертификаты();

	ОбновитьПодвалДоходовРасходов();

	УстановитьПредставленияОтрезковПути();
	
	УстановитьВидимость();
	
	// уатУправлениеАвтотранспортом.МодификацияКонфигурации
	уатМодификацияКонфигурацииПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	// Конец уатУправлениеАвтотранспортом.МодификацияКонфигурации
	
	ПунктОтправленияИмеетКоординаты	 = ПунктНазначенияИмеетКоординаты(Объект.АдресОтправления);
	ПунктНазначенияИмеетКоординаты	 = ПунктНазначенияИмеетКоординаты(Объект.АдресНазначения);
	ВидДоставкиСкладСклад			 = Перечисления.уатВидыДоставки_уэ.СкладСклад;
	ВидДоставкиСкладДверь			 = Перечисления.уатВидыДоставки_уэ.СкладДверь;
	ВидДоставкиДверьДверь			 = Перечисления.уатВидыДоставки_уэ.ДверьДверь;
	ВидДоставкиДверьСклад			 = Перечисления.уатВидыДоставки_уэ.ДверьСклад;
	
	ТипПоставщика = уатЭлектронныеКартыСервер.ПолучитьТипИспользуемыхЭлектронныхКарт("ПодсказкиАдресов");
	Если ТипПоставщика = Перечисления.уатТипыЭлектронныхКарт.DaData
		Или ТипПоставщика = Перечисления.уатТипыЭлектронныхКарт.Яндекс
		Или ТипПоставщика = Перечисления.уатТипыЭлектронныхКарт.OSM Тогда
		ИспользоватьПодсказкиАдресов = Истина;
		СоздаватьПодобранныеПунктыАвтоматически = уатЭлектронныеКартыСервер.ПолучитьНастройкуСервераКартографииМаршрутизации("ПодсказкиАдресов_СоздаватьПунктыВЗаказеНаТС");
	КонецЕсли;
	
	ЗаполнитьСписокВыбораПунктов(Элементы.АдресОтправления, Объект.Грузоотправитель, Объект.Контрагент, Ложь);
	ЗаполнитьСписокВыбораПунктов(Элементы.АдресНазначения, Объект.Грузополучатель, Объект.Контрагент, Ложь);
	
	ИспользоватьРедакторЦепочкиДокументов = ПолучитьФункциональнуюОпцию("уатИспользоватьРедакторЦепочкиДокументов_уэ")
		И ПравоДоступа("Просмотр", Метаданные.Обработки.уатРедакторЦепочкиДокументов_уэ);
	Элементы.НеОткрыватьРедакторЦепочкиДокументов.Видимость = ИспользоватьРедакторЦепочкиДокументов;
	
	УстановитьОсновнуюТаблицуСД();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// уатУправлениеАвтотранспортом.МодификацияКонфигурации
	уатМодификацияКонфигурацииКлиентПереопределяемый.ПриОткрытии(ЭтотОбъект, Отказ);
	// Конец уатУправлениеАвтотранспортом.МодификацияКонфигурации
	
	уатЗащищенныеФункцииКлиент.уатДокументФормаЭлементаПриОткрытии(Отказ, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
	Элементы.ГруппаСостояниеЭДО.Видимость = ИспользоватьОбменЭД;
	Если Элементы.ГруппаСостояниеЭДО.Видимость
		И НЕ Объект.Ссылка.Пустая() Тогда
		КолВоЭПД = ПолучитьКоличествоЭПД(Объект.Ссылка);
	КонецЕсли;
	Элементы.ГрузовойСоставЗаполнитьГрузовойСоставПоЭТрН.Видимость = КолВоЭПД <> 0;
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

	АдресОтправленияСтрока = Объект.АдресОтправления;
	АдресНазначенияСтрока = Объект.АдресНазначения;
	
	Если Объект.Ссылка.Пустая() И ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		уатОбщегоНазначенияКлиент.ПриИзмененииДоговора(ЭтаФорма, Неопределено, Договор);
	КонецЕсли;
		
	УстановитьОграничениеТипаКонтрагент(Ложь);
	УстановитьОграничениеТипаОтправительПолучатель();
	
	ОтобразитьСтатусыАдресов();
	
	Если НЕ ПравоРедактированиеДокумента Тогда 
		Элементы.ГруппаЗаказчик.ТолькоПросмотр                     = Истина;
		Элементы.ГруппаПараметрыМаршрута.ТолькоПросмотр            = Истина;
		Элементы.ГруппаОтправление.ТолькоПросмотр                  = Истина;
		Элементы.ГруппаПрибытие.ТолькоПросмотр                     = Истина;
		Элементы.СтатусДокумента.Доступность                       = Ложь;
		Элементы.УслугиГруппаРассчитать.Доступность                = Ложь;
		Элементы.УслугиГруппаЗаполнить.Доступность                 = Ложь;
		Элементы.ПолучаемыеУслугиГруппаЗаполнить.Доступность       = Ложь;
		Элементы.ПолучаемыеУслугиГруппаРассчитать.Доступность      = Ложь;
		Элементы.ВыбратьОтправителяПоКонтрагенту.Доступность       = Ложь;
		Элементы.ВыбратьПолучателяПоКонтрагенту.Доступность        = Ложь;
		Элементы.СоздатьАдресНазначения.Доступность                = Ложь;
		Элементы.СоздатьАдресОтправления.Доступность               = Ложь;
		Элементы.ОбновитьПодвалПрибыль.Доступность                 = Ложь;
		Элементы.ФормаОткрытьРедакторЦепочкиДокументов.Доступность = Ложь;
	КонецЕсли;
		
	уатОбщегоНазначенияКлиент.ЗаполнитьСписокВыбораНастройкаНДС(Элементы.ПолучаемыеУслугиУчитыватьНДСПредставление.СписокВыбора);
	ОбновитьНДСвТЧРасходы();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	ВариантПоставкиКОРП = уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП();
	
	ПрочитатьПромежуточныеПункты(ТекущийОбъект);
	
	ЗаполнитьСтатусыДокумента();
	ЗаполнитьРеквизитыГрузовыхМест();
	УстановитьУсловноеОформлениеПолейСтатусов();
	УстановитьДоступностьДокументаПоИзменениямСтатуса();
	ОбновитьНадписьИтоги();
	ОбновитьПараметрВыработкиВременныйОказ();
	ОбновитьПараметрВыработкиВременныйПолуч();
	УстановитьОтборСопроводительныхДокументов();
	УстановитьОтборСобытий();
	ПрочитатьДанныеТегов();
	
	Если ТекущийОбъект.Мультимодальный Тогда 
		Если ТекущийОбъект.ЭтоЭтап Тогда
			ОбновитьПлановыеДатыЭтапов();
		Иначе
			ОбновитьСписокЭтапов();
			//ОбновитьПланировщикЭтапов();
			ОбновитьДоходыПоЭтапамСервер();
			ОбновитьРасходыПоЭтапамСервер();
		КонецЕсли;
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ИмяСобытия = "СозданоГрузовоеМесто" Тогда
		ОбработкаСозданияГрузовогоМеста(Параметр.Ссылка, Параметр.УдалитьСтрокуПосле, Параметр.ТоварныйСостав);
	ИначеЕсли ИмяСобытия = "ЗаписанЭлементСправочникаПунктыНазначения"
		Или ИмяСобытия = "ЭлектронныеКарты_ЗаписьКоординатПункта" Тогда
		ПересчитатьСтоянкуИКоординатыПункта(Истина);
		ОтобразитьСтатусыАдресов();
		
	ИначеЕсли ИмяСобытия = "Изменен заказ грузоотправителя" Тогда
		Если НЕ Параметр = Объект.Ссылка Тогда 
			Если ПолучитьРодителя(Параметр) = Объект.Ссылка Тогда
				ОбновитьДанныеМультимодальногоЗаказа();
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "Изменено закрытие заказов на ТС" Тогда
		Если НЕ Параметр = Объект.Ссылка Тогда
			ОбновитьДанныеМультимодальногоЗаказа();
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ОбновленыПунктыЗаказаНаТС" Тогда
		// Параметр - массив структур с данными о пунктах.
		Если FTL Тогда
			ПромежуточныеПункты.Очистить();
			Для Каждого ТекСтрока Из Параметр Цикл
				НоваяСтрока = ПромежуточныеПункты.Добавить();
				НоваяСтрока.ТипТочкиМаршрута = ТекСтрока.ТипТочкиМаршрута;
				НоваяСтрока.Пункт            = ТекСтрока.Пункт;
				ПромежуточныеПунктыПунктПриИзмененииДанных(НоваяСтрока);
				ПромежуточныеПунктыПриИзменении(Неопределено);
			КонецЦикла;
		Иначе
			Объект.АдресОтправления = Параметр[0].Пункт;
			Объект.АдресНазначения  = Параметр[1].Пункт;
			
			АдресОтправленияСтрока = Объект.АдресОтправления;
			АдресНазначенияСтрока = Объект.АдресНазначения;
			РазрешеноИспользоватьРасписание = Ложь;
			ОбновитьДатыОтправления(РазрешеноИспользоватьРасписание);
			ОбновитьДатыНазначения(РазрешеноИспользоватьРасписание);
			АдресПриИзмененииЗавершение();
		КонецЕсли;
		Модифицированность = Истина;
		Записать();
		Если Открыта() Тогда
			Если Модифицированность Тогда
				ОбновитьОтображениеДанных();
			Иначе
				Прочитать();
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "ЭлектронныеКарты_СозданиеНовогоПункта" Тогда
		Если Источник = Объект.Ссылка Тогда
			Если АдресОтправленияСтрока = Параметр.Представление Тогда
				Объект.АдресОтправления = Параметр.Пункт;
				АдресОтправленияСтрока = Объект.АдресОтправления;
				АдресПриИзмененииЗавершение();
				Модифицированность = Истина;
			ИначеЕсли АдресНазначенияСтрока = Параметр.Представление Тогда
				Объект.АдресНазначения = Параметр.Пункт;
				АдресНазначенияСтрока = Объект.АдресНазначения;
				АдресПриИзмененииЗавершение();
				Модифицированность = Истина;
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ИмяСобытия = "Запись_ДокументыЭПД" Тогда
		КолВоЭПД = ПолучитьКоличествоЭПД(Объект.Ссылка);
		Элементы.ЭлектронныеПеревозочныеДокументы.Обновить();
	КонецЕсли;
	
	Если (ИмяСобытия = "Изменен маршрутный лист"
		ИЛИ ИмяСобытия = "Изменен статус заказа"
		ИЛИ ИмяСобытия = "Изменено закрытие заказов на ТС")
		И НеобходимоПеречитатьОбъектИзБД(ИмяСобытия, Параметр, Объект.Ссылка) Тогда 
		Прочитать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	// Для шаблонов из всех связанных документов могут быть только другие Заказы на ТС,
	// которые не изменяются редактором цепочки документов
	Если (ИспользоватьРедакторЦепочкиДокументов
		ИЛИ ИспользоватьОбменЭД)
		И НЕ флНеПроверятьОткрытиеРедактораЦепочкиДокументов
		И НЕ Объект.Ссылка.Пустая()
		И НЕ Объект.ЭтоШаблонПеревозки Тогда
		СтруктураДокументаСтарая = СтруктураДокументаПоСсылке(Объект.Ссылка);
		ПараметрыЗаписи.Вставить("СтруктураДокументаСтарая", СтруктураДокументаСтарая);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ЗаписатьПромежуточныеПункты(ТекущийОбъект);
	ЗаполнитьОписание(ТекущийОбъект);
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ФлагОтменаЗакрытия", ФлагОтменаЗакрытия);
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Интерактивно", Истина);
	Если ПараметрыЗаписи.Свойство("НеПересчитыватьИтоги") Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("НеПересчитыватьИтоги", Истина);
	КонецЕсли;
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("ТребуетсяЗаписатьПлановыеДниЭтапаШаблона", Объект.Ссылка.Пустая()
		И Объект.ЭтоШаблонПеревозки
		И (ЗначениеЗаполнено(ДнейОтНачалаНазначениеЭтапаШаблона) Или ЗначениеЗаполнено(ДнейОтНачалаОтправлениеЭтапаШаблона)));
		
	Если ИспользоватьОбменЭД
		И НЕ Объект.Ссылка.Пустая()
		И уатОбменСГИСЭПД.КлючевыхРеквизитыЭТрНИзменены(ТекущийОбъект) Тогда 
		флВопросИзменениеЭТрН = Истина;
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ЗаполнитьСтатусыДокумента();
	УстановитьУсловноеОформлениеПолейСтатусов();
	УстановитьДоступностьДокументаПоИзменениямСтатуса();
	ОбновитьНадписьИтоги();
	ОбновитьВалютуВТЧГрузовТоваровСервер();
	ОбновитьПараметрВыработкиВременныйОказ();
	ОбновитьПараметрВыработкиВременныйПолуч();
	УстановитьПредставленияОтрезковПути();
	ЗаполнитьРеквизитыГрузовыхМест();
	УстановитьОтборСопроводительныхДокументов();
	УстановитьОтборСобытий();
	
	ВывестиСтатусЗавершенияОбработкиСопроводительныхДокументов();
	
	Если ВариантПоставкиКОРП
		И ТекущийОбъект.Мультимодальный Тогда 
		Если ТекущийОбъект.ЭтоЭтап Тогда
			ЗаписатьПлановыеДатыЭтапов();
			Если ТекущийОбъект.ДополнительныеСвойства.Свойство("ТребуетсяЗаписатьПлановыеДниЭтапаШаблона")
				И ТекущийОбъект.ДополнительныеСвойства.ТребуетсяЗаписатьПлановыеДниЭтапаШаблона Тогда
				ЗаписатьПлановыеДниЭтапаШаблона();
			КонецЕсли;
		Иначе
			ОбновитьСписокЭтапов();
			ОбновитьПланировщикЭтапов();
			ОбновитьДоходыПоЭтапамСервер();
			ОбновитьРасходыПоЭтапамСервер();
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьВсегоВТЧСервер();
	ОбновитьПодвалСервер(Истина);
	
	флВыполненАвтопересчетУслугПриЗаписи = ТекущийОбъект.ДополнительныеСвойства.Свойство("ВыполненАвтопересчетУслуг");
	Если ТекущийОбъект.ДополнительныеСвойства.Свойство("ПересчетИтогов") Тогда
		флПересчетИтогов = ТекущийОбъект.ДополнительныеСвойства.ПересчетИтогов;
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЭлектронныеПеревозочныеДокументы, "ЗаказНаТС", Объект.Ссылка);
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Взаимодействия
	Если ОбщегоНазначенияКлиент.ПодсистемаСуществует("СтандартныеПодсистемы.Взаимодействия") Тогда
		МодульВзаимодействияКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ВзаимодействияКлиент");
		МодульВзаимодействияКлиент.ВзаимодействиеПредметПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи, "уатЗаказГрузоотправителя");
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Взаимодействия
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Оповестить("Изменен заказ грузоотправителя", Объект.Ссылка, ЭтотОбъект);
	
	Если флВопросИзменениеЭТрН 
		И ИспользоватьОбменЭД Тогда  
		МассивЭПД = ПолучитьЭТрН(Объект.Ссылка);
		Если МассивЭПД.Количество() = 0 Тогда
			флВопросИзменениеЭТрН = Ложь;
		Иначе
			Режим = РежимДиалогаВопрос.ДаНет;
			ТекстПредупреждения = НСтр("ru = 'В документе изменились ключевые ревизиты ЭТрН.
			|Открыть ""Электронную транспортную накладную""?'"); 
			ПоказатьВопрос(Новый ОписаниеОповещения("ВопросИзменениеЭТрН", ЭтотОбъект, МассивЭПД), ТекстПредупреждения, Режим);
		КонецЕсли;
	Иначе
		флВопросИзменениеЭТрН = Ложь;
	КонецЕсли;
	
	Если флВопросПереадресовкаЭПД
		И ИспользоватьОбменЭД Тогда  
		МассивЭПД = ПолучитьЭПДДляПереадресовки(Объект.Ссылка);
		Если МассивЭПД.Количество() = 0 Тогда
			флВопросПереадресовкаЭПД = Ложь;
		Иначе
			Режим = РежимДиалогаВопрос.ДаНет;
			ТекстНСТР = НСтр("ru = 'В документе изменился адрес.
			|Открыть ""Электронную транспортную накладную""?'");
			ПоказатьВопрос(Новый ОписаниеОповещения("ВопросПереадресовкаЗавершение", ЭтотОбъект, МассивЭПД), ТекстНСТР, Режим);
		КонецЕсли;
	Иначе
		флВопросПереадресовкаЭПД = Ложь;
	КонецЕсли;
	
	Если флВыполненАвтопересчетУслугПриЗаписи Тогда
		Если флПересчетИтогов Тогда
			ЗаголовокНСТР = "";
			ОписаниеНСТР = НСтр("en='Incomes was calculated automaticaly'; ru='Выполнен автоматический пересчет доходов'");
			ПоказатьОповещениеПользователя(ЗаголовокНСТР,, ОписаниеНСТР);
		Иначе
			ПоказатьПредупреждение(Неопределено, НСтр("en='It is necessary to recalculate of tabular section ""Incomes"" was not done!';ru='Необходимо выполнить пересчет табличной части ""Доходы""!'"));
		КонецЕсли;
		флВыполненАвтопересчетУслугПриЗаписи = Ложь;
	КонецЕсли;
	
	Если ИспользоватьРедакторЦепочкиДокументов
		И ПараметрыЗаписи.Свойство("СтруктураДокументаСтарая") Тогда
		
		СтруктураДокументаСтарая = ПараметрыЗаписи.СтруктураДокументаСтарая;
		СтруктураДокументаНовая = СтруктураДокументаПоСсылке(Объект.Ссылка);
		Если уатОбщегоНазначения_уэ.ТребуетсяОткрытьРедакторЦепочкиДокументов(СтруктураДокументаНовая, СтруктураДокументаСтарая) Тогда
			ДопПараметры = Новый Структура("СтруктураДокументаНовая, СтруктураДокументаСтарая", СтруктураДокументаНовая, СтруктураДокументаСтарая);
			Оповещение = Новый ОписаниеОповещения("ОткрытьРедакторЦепочкиДокументовПродолжение", ЭтотОбъект, ДопПараметры);
			ОткрытьФорму("Документ.уатЗаказГрузоотправителя.Форма.ФормаВопросРедакторЦепочкиДокументов", 
				Новый Структура("НеОткрыватьРедакторЦепочкиДокументов", Объект.НеОткрыватьРедакторЦепочкиДокументов),
				ЭтаФорма,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			флОткрытиеРедактораЦепочкиДокументов = Истина;
		Иначе
			флОткрытиеРедактораЦепочкиДокументов = Ложь;
		КонецЕсли;
	Иначе
		флОткрытиеРедактораЦепочкиДокументов = Ложь;
	КонецЕсли;
	
	Если Не ИспользоватьРедакторЦепочкиДокументов
		И ПроверитьНаличиеСвязанныхТТДНаСервере(Объект.Ссылка) Тогда
		ТекстНСТР = НСтр("ru='Обнаружены документы ТТД, связанные с этим документом." + Символы.ПС
			+ "Для перезаполнения нажмите кнопку ""Заполнить по маршрутному листу и заказу на ТС"" в форме ТТД.';"
			+ "en='Shipping documents linked to this document may require updating.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
	КонецЕсли;
	
	ОбновитьНДСвТЧРасходы();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если Объект.FTL И Объект.Мультимодальный И Не Объект.ЭтоЭтап Тогда
		// Чтобы не было ошибки для уже созданных документов, Отказ не устанавливается
		ТекстОшибки = НСтр("ru = 'Для родительского мультимодального заказа флаг FTL должен быть снят'; en = 'This operation is not allowed for FTL orders'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				,
				"ПромежуточныеПункты"
			);
	КонецЕсли;
	
	Если Объект.FTL И (Не Объект.Мультимодальный Или Объект.ЭтоЭтап) Тогда 
		Если ПромежуточныеПункты.Количество() < 2 Тогда 
			ТекстОшибки = НСтр("ru = 'Необходимо заполнить маршрут следования'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
				ТекстОшибки,
				,
				"ПромежуточныеПункты",
				,
				Отказ
			);
		КонецЕсли;
		
		Для СчСтрок = 0 По ПромежуточныеПункты.Количество() - 1 Цикл 
			Если Не ЗначениеЗаполнено(ПромежуточныеПункты[СчСтрок].Пункт) Тогда 
				ТекстОшибки = НСтр("ru = 'Не заполнен пункт'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					,
					"ПромежуточныеПункты[" + Формат(СчСтрок, "ЧН=0; ЧГ=0") + "].Пункт",
					,
					Отказ
				);
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ПромежуточныеПункты[СчСтрок].ПрибытиеПлан) Тогда 
				ТекстОшибки = НСтр("ru = 'Не заполнена дата прибытия план'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					,
					"ПромежуточныеПункты[" + Формат(СчСтрок, "ЧН=0; ЧГ=0") + "].ПрибытиеПлан",
					,
					Отказ
				);
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ПромежуточныеПункты[СчСтрок].УбытиеПлан) Тогда 
				ТекстОшибки = НСтр("ru = 'Не заполнена дата убытия план'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					,
					"ПромежуточныеПункты[" + Формат(СчСтрок, "ЧН=0; ЧГ=0") + "].УбытиеПлан",
					,
					Отказ
				);
			КонецЕсли;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.уатШаблоныДокументов_уэ") Тогда
		СопроводительныеДокументыЗаполнитьДокументыПоШаблонуЗавершение(ВыбранноеЗначение);
		
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.уатШаблоныУслуг_уэ") Тогда
		ЗаполнитьУслугиПоШаблонуСервер(ВыбранноеЗначение);
		
		флСтраницаДоходы = Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницаУслуги;
		Если флСтраницаДоходы Тогда
			ОбновитьДоходыПоЭтапамСервер();
		Иначе
			ОбновитьРасходыПоЭтапамСервер();
			ОбновитьНДСвТЧРасходы();
		КонецЕсли;
		РассчитатьСуммуДокумента();
		Если флСтраницаДоходы Тогда
			ОбновитьВсегоВТЧУслуги();
		Иначе
			ОбновитьВсегоВТЧПолучаемыеУслуги();
		КонецЕсли;
		ОбновитьПодвалСервер();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ВопросПереадресовкаЭПД
		И флВопросПереадресовкаЭПД Тогда
		СтандартнаяОбработка		 = Ложь;
		ЗавершениеРаботы			 = Ложь;
		Отказ						 = Истина;
		ВопросПереадресовкаЭПД		 = Истина; 
		флВопросПереадресовкаЭПД	 = Ложь;
	КонецЕсли;
    Если НЕ ВопросИзменениеЭТрН  
		И флВопросИзменениеЭТрН Тогда
		СтандартнаяОбработка		 = Ложь;
		ЗавершениеРаботы			 = Ложь;
		Отказ						 = Истина;
		ВопросИзменениеЭТрН			 = Истина; 
		флВопросИзменениеЭТрН		 = Ложь;
	КонецЕсли;

	Если флВопросЗакрытиеФормы Тогда
		Отказ = Истина;
		Оповещ = Новый ОписаниеОповещения("ПередЗакрытиемВопрос", ЭтотОбъект);
		ПоказатьВопрос(Оповещ, "При проверке корректности заполнения документа возникли предупреждения!
			|Продолжить закрытие формы?", РежимДиалогаВопрос.ОКОтмена);
	КонецЕсли;
	
	Если Не Отказ И флОткрытиеРедактораЦепочкиДокументов Тогда
		// Форма будет закрыта после ответа на вопрос об открытии редактора цепочки документов
		флЗакрыватьПриЗаписи = Истина;
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

// уатУправлениеАвтотранспортом.МодификацияКонфигурации
&НаКлиенте
Процедура Подключаемый_ПолеФормыНажатие(Элемент, СтандартнаяОбработка)
	
	уатМодификацияКонфигурацииКлиентПереопределяемый.ПолеФормыНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусДокументаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	// проверка на доступ на изменение пользователем закрытого документа
	Если СтатусДокумента = ПредопределенноеЗначение("Справочник.уатСтатусы_уэ.Закрыт") Тогда
		ТекПользователь = ПользователиКлиентСервер.АвторизованныйПользователь();
		РазрешитьРедактирование = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ТекПользователь, "РазрешитьРедактированиеЗакрытыхДокументов");
	
		Если НЕ РазрешитьРедактирование Тогда
			ТекстОшибки = НСтр("en='Forbidden to change status of closed documents!';ru='Запрещено изменение статуса закрытых документов!'");
			ПоказатьПредупреждение(, ТекстОшибки);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьНовыйСтатус();
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если Объект.Организация = ОрганизацияПередИзменением Тогда
		Возврат;
	КонецЕсли;
	ОрганизацияПередИзменением = Объект.Организация;
	
	ПриИзмененииКонтрагентаИлиОрганизации(Новый ОписаниеОповещения("ОрганизацияПриИзмененииФрагментЗавершение", ЭтотОбъект));

КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзмененииФрагментЗавершение(Результат, ДополнительныеПараметры) Экспорт
	УчитыватьНДСПередИзменением = Объект.УчитыватьНДС;
	СуммаВключаетНДСПередИзменением = Объект.СуммаВключаетНДС;
	
	Объект.УчитыватьНДС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.УчитыватьНДС"));
	Объект.СуммаВключаетНДС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.СуммаВключаетНДС"));
		
	Если Объект.УчитыватьНДС <> УчитыватьНДСПередИзменением ИЛИ Объект.СуммаВключаетНДС <> СуммаВключаетНДСПередИзменением Тогда
		ПересчитатьНДС();
		
		ОбновитьПодвалСервер();
		ОбновитьВалютуВТЧГрузовТоваровСервер();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПередИзменением = Контрагент;
	Контрагент = Объект.Контрагент;
	
	Если КонтрагентПередИзменением <> Объект.Контрагент Тогда
		ПриИзмененииКонтрагентаИлиОрганизации(Неопределено);
		ЗаполнитьГрузоотправителяГрузополучателя();
		ГрузоотправительПриИзменении(Элементы.Грузоотправитель);
		ГрузополучательПриИзменении(Элементы.Грузополучатель);
	Иначе
		// Договор был очищен по связи параметров выбора, возвращаем старое значение
		Объект.ДоговорКонтрагента = Договор;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если флЗаказОтКонтрагента = 1 Тогда 
		уатОбщегоНазначенияКлиент.КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если флЗаказОтКонтрагента = 1 Тогда 
		уатОбщегоНазначенияКлиент.КонтрагентАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если флЗаказОтКонтрагента = 1 Тогда 
		уатОбщегоНазначенияКлиент.КонтрагентОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаСоздание(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВидДоговораДоступныеЗначения = Новый Массив;
	
	мВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем");
	ВидДоговораДоступныеЗначения.Добавить(мВидДоговора);
	
	ПараметрыФормы = Новый Структура();   
	ПараметрыФормы.Вставить("Владелец", Объект.Контрагент);
	ПараметрыФормы.Вставить("ВидДоговораДоступныеЗначения", ВидДоговораДоступныеЗначения);
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	Оповещ = Новый ОписаниеОповещения("ДоговорКонтрагентаПриИзмененииЗавершение", ЭтотОбъект);
	уатОбщегоНазначенияКлиент.ДоговорКонтрагентаПриИзменении(ЭтаФорма, Оповещ);
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзмененииЗавершение(Результат, ДопПараметры) Экспорт
	уатОбщегоНазначенияКлиент.ПриИзмененииДоговора(ЭтаФорма, Неопределено, Договор);
КонецПроцедуры

// Вызывается из процедуры уатОбщегоНазначенияКлиент.ПриИзмененииДоговора()
//
&НаКлиенте
Процедура ПриИзмененииДоговораЛокальныеОбработчики() Экспорт
	РассчитатьСуммуДокумента();
	ОбновитьВсегоВТЧУслуги();
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура флЗаказОтКонтрагентаПриИзменении(Элемент)
	УстановитьОграничениеТипаКонтрагент();
	Объект.ДоговорКонтрагента = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьНДС()
	ПересчитатьСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС("Услуги");
	ОбновитьВсегоВТЧУслуги();
	УстановитьВидимость();
	ОбновитьПодвалСервер();
КонецПроцедуры

&НаКлиенте
Процедура ДетализацияЗакрытияПриИзменении(Элемент)
	
	Если Объект.FTL Тогда
		Объект.ОтрезкиПути.Очистить();
		УстановитьПредставленияОтрезковПути();
	КонецЕсли;
	
	Если Объект.ДетализацияЗакрытия = ПредопределенноеЗначение("Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам") Тогда 
		Для Каждого ТекСтрока Из Объект.ГрузовойСостав Цикл 
			ТекСтрока.ГрузовоеМесто = Неопределено;
		КонецЦикла;
		Для Каждого ТекСтрока Из Объект.Товары Цикл 
			ТекСтрока.ГрузовоеМесто = Неопределено;
		КонецЦикла;
	КонецЕсли;
	
	УстановитьВидимость();
	РассчитатьПоказателиСервер(Ложь);
	ОбновитьВалютуВТЧГрузовТоваровСервер();
	ОбновитьПараметрВыработкиВременныйОказ();
	ОбновитьПараметрВыработкиВременныйПолуч();
	ОбновитьНадписьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура ТребованиеКТСПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.ТребованиеКТС) Тогда
		Объект.ТребованиеКТСТипТС = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.ТребованиеКТС, "ТипТС");
	КонецЕсли;
	ПересчитатьСтоянкуИКоординатыПункта();
КонецПроцедуры

&НаКлиенте
Процедура ТребованиеКТСТипТСПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Объект.ТребованиеКТСТипТС) Тогда
		Модель_ТипТС = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.ТребованиеКТС, "ТипТС");
		Если Модель_ТипТС <> Объект.ТребованиеКТСТипТС Тогда
			Объект.ТребованиеКТС = Неопределено;
		КонецЕсли;
	КонецЕсли;
	ПересчитатьСтоянкуИКоординатыПункта();
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПоказатели(Команда)
	РассчитатьПоказателиСервер(Истина);
	РассчитатьУслугиПриИзмененииПоказателей();
	ОбновитьВалютуВТЧГрузовТоваровСервер();
	ОбновитьВсегоВТЧТовары();
	ОбновитьВсегоВТЧУслуги();
	ОбновитьВсегоВТЧПолучаемыеУслуги();
	ОбновитьНадписьИтоги();
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Процедура РассчитатьПоказателиСервер(ПересчетВремениРасстояния)
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	ЗаписатьПромежуточныеПункты(ДокОбъект);
	ДокОбъект.РассчитатьИтоговыеПоказатели(ПересчетВремениРасстояния, кэшНулевыеРасстоянияМеждуПунктами);
	ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
	ПрочитатьПромежуточныеПункты(ДокОбъект);
	УстановитьПредставленияОтрезковПути();
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьСтатусыАдресов()
	
	Если НЕ ЗначениеЗаполнено(Объект.АдресОтправления) Тогда
		Элементы.НайтиНаКартеАдресОтправления.Картинка = БиблиотекаКартинок.уатКартаКрасныйБалун;
	ИначеЕсли ТипЗнч(Объект.АдресОтправления) = Тип("СправочникСсылка.уатПунктыНазначения")
		И ПунктОтправленияИмеетКоординаты Тогда
		Элементы.НайтиНаКартеАдресОтправления.Картинка = БиблиотекаКартинок.уатКартаЗеленыйБалун;
	Иначе
		Элементы.НайтиНаКартеАдресОтправления.Картинка = БиблиотекаКартинок.уатКартаКрасныйБалун;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Объект.АдресНазначения) Тогда
		Элементы.НайтиНаКартеАдресНазначения.Картинка = БиблиотекаКартинок.уатКартаКрасныйБалун;
	ИначеЕсли ТипЗнч(Объект.АдресНазначения) = Тип("СправочникСсылка.уатПунктыНазначения")
		И ПунктНазначенияИмеетКоординаты Тогда
		Элементы.НайтиНаКартеАдресНазначения.Картинка = БиблиотекаКартинок.уатКартаЗеленыйБалун;
	Иначе
		Элементы.НайтиНаКартеАдресНазначения.Картинка = БиблиотекаКартинок.уатКартаКрасныйБалун;
	КонецЕсли;
		
	Для Каждого ТекСтрока Из ПромежуточныеПункты Цикл 
		Если НЕ ЗначениеЗаполнено(ТекСтрока.Пункт) Тогда
			ТекСтрока.ПунктСтатусКартинка = -1;
		ИначеЕсли ТипЗнч(ТекСтрока.Пункт) = Тип("СправочникСсылка.уатПунктыНазначения")
				И ТекСтрока.ПунктНазначенияИмеетКоординаты Тогда
			ТекСтрока.ПунктСтатусКартинка = 0;
		Иначе
			ТекСтрока.ПунктСтатусКартинка = 1;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПунктНазначенияИмеетКоординаты(Пункт)
	Если ТипЗнч(Пункт) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда
		Возврат (ЗначениеЗаполнено(Пункт.Лат) И ЗначениеЗаполнено(Пункт.Лон));
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура АдресОтправленияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	уатОбщегоНазначенияКлиент.ПунктНачалоВыбора(Элемент, СтандартнаяОбработка, Объект.АдресОтправления);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресОтправленияОчистка(Элемент, СтандартнаяОбработка)
	
	АдресОтправленияПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресОтправленияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	НайтиАдресНаКарте = Ложь;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
		Попытка
			#Если ВебКлиент Тогда
				АдресСтруктура = ПрочитатьJSONНаСервере(ВыбранноеЗначение);
			#Иначе
				ЧтениеJSON = Новый ЧтениеJSON;
				ЧтениеJSON.УстановитьСтроку(ВыбранноеЗначение);
				АдресСтруктура = ПрочитатьJSON(ЧтениеJSON);
				ЧтениеJSON.Закрыть();
				
			#КонецЕсли
			АдресСтруктура.Вставить("АдресДляПоиска", Элемент.ТекстРедактирования);
			
			Если СоздаватьПодобранныеПунктыАвтоматически И АдресСтруктура.Свойство("ЗначениеАдреса") Тогда
				СоздатьАдресПоСтроке("АдресОтправления", АдресСтруктура.ПредставлениеАдреса, АдресСтруктура);
				ВыбранноеЗначение = Объект.АдресОтправления;
			ИначеЕсли СоздаватьПодобранныеПунктыАвтоматически Тогда
				// Для создания адреса без вопросов пользователю формируем значение адреса по представлению
				ВидКИ = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента");
				ЗначениеАдреса = ПолучитьЗначениеАдресаJSON(АдресСтруктура.ПредставлениеАдреса, ВидКИ);
				АдресСтруктура.Вставить("ЗначениеАдреса", ЗначениеАдреса);
				СоздатьАдресПоСтроке("АдресОтправления", АдресСтруктура.ПредставлениеАдреса, АдресСтруктура);
				ВыбранноеЗначение = Объект.АдресОтправления;
			Иначе
				АдресОтправленияСтруктура = АдресСтруктура;
				ВыбранноеЗначение = АдресСтруктура.ПредставлениеАдреса;
			КонецЕсли;
		Исключение
			// В строке не содержится данные в формате JSON. Проверяем, не нужно ли сразу отразить текст на карте.
			ТекстНайтиНаКарте = "НайтиНаКарте ";
			Если СтрНачинаетсяС(ВыбранноеЗначение, ТекстНайтиНаКарте) Тогда
				ВыбранноеЗначение = Сред(ВыбранноеЗначение, СтрДлина(ТекстНайтиНаКарте)+1);
				НайтиАдресНаКарте = Истина;
			КонецЕсли;
		КонецПопытки;
	КонецЕсли;
	
	уатОбщегоНазначенияКлиент.ПунктОбработкаВыбора(Объект.АдресОтправления, ВыбранноеЗначение, СтандартнаяОбработка);
	АдресОтправленияПриИзменении(Элемент);
	
	Если НайтиАдресНаКарте Тогда
		НайтиНаКартеАдресОтправления(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресОтправленияАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Если Не ПустаяСтрока(Текст)
		И ТипЗнч(СтрокаПолученияПодсказкиАдреса) = Тип("Строка")
		И ТипЗнч(СписокПодсказокАдреса) = Тип("СписокЗначений")
		И СокрЛП(Текст) = СокрЛП(СтрокаПолученияПодсказкиАдреса)
		И СписокПодсказокАдреса.Количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = СписокПодсказокАдреса.Скопировать();
		Возврат;
	ИначеЕсли Ожидание = 0 Тогда
		Возврат;
	КонецЕсли;
	
	АдресаКонтрагентов = Новый Массив;
	ПолучатьФактическиеАдреса = Ложь;
	Если ЗначениеЗаполнено(Объект.Грузоотправитель) Тогда
		АдресаКонтрагентов = ПолучитьАдреса(Объект.Грузоотправитель, ПолучатьФактическиеАдреса);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(АдресаКонтрагентов) И ЗначениеЗаполнено(Объект.Контрагент) Тогда
		АдресаКонтрагентов = ПолучитьАдреса(Объект.Контрагент, ПолучатьФактическиеАдреса);
	КонецЕсли;
	СписокАдреса = ПодобратьАдреса(Текст, АдресаКонтрагентов);
	Если СписокАдреса.Количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = СписокАдреса;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресОтправленияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Если ИспользоватьПодсказкиАдресов И Не ПустаяСтрока(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ТекстОшибки = "";
		ДанныеВыбора = уатЭлектронныеКартыКлиент.ПолучитьПодсказкиПоАдресу(Текст, ТекстОшибки);
		
		ПредставлениеНайтиНаКарте = СтрШаблон(НСтр("ru = 'Найти ""%1"" на карте'"), Текст);
		ДанныеВыбора.Добавить("НайтиНаКарте " + Текст, ПредставлениеНайтиНаКарте,, БиблиотекаКартинок.уатКартаСинийБалун);
		ДанныеВыбора.Добавить(Текст,,, БиблиотекаКартинок.УровеньДоступаРедактирование);
		Если ТекстОшибки <> "" Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
		КонецЕсли;
		
		СтрокаПолученияПодсказкиАдреса = Текст;
		СписокПодсказокАдреса = ДанныеВыбора.Скопировать();
	Иначе
		Объект.АдресОтправления = Текст;
		АдресОтправленияПриИзменении(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресОтправленияПриИзменении(Элемент)
	
	флВопросПереадресовкаЭПД = Истина;
	АдресОтправленияСтрока = Объект.АдресОтправления;
	РазрешеноИспользоватьРасписание = Истина;
	ОбновитьДатыОтправления(РазрешеноИспользоватьРасписание);
	АдресПриИзмененииЗавершение();
	
КонецПроцедуры

&НаКлиенте
Процедура АдресОтправленияОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(Объект.АдресОтправления) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда
		ПоказатьЗначение(Неопределено, Объект.АдресОтправления);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АдресНазначенияОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если ТипЗнч(Объект.АдресНазначения) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда
		ПоказатьЗначение(Неопределено, Объект.АдресНазначения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура АдресНазначенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	уатОбщегоНазначенияКлиент.ПунктНачалоВыбора(Элемент, СтандартнаяОбработка, Объект.АдресНазначения);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресНазначенияОчистка(Элемент, СтандартнаяОбработка)
	
	АдресНазначенияПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура АдресНазначенияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	НайтиАдресНаКарте = Ложь;
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
		Попытка
			#Если ВебКлиент Тогда
				АдресСтруктура = ПрочитатьJSONНаСервере(ВыбранноеЗначение);
			#Иначе
				ЧтениеJSON = Новый ЧтениеJSON;
				ЧтениеJSON.УстановитьСтроку(ВыбранноеЗначение);
				АдресСтруктура = ПрочитатьJSON(ЧтениеJSON);
				ЧтениеJSON.Закрыть();
				
			#КонецЕсли
			АдресСтруктура.Вставить("АдресДляПоиска", Элемент.ТекстРедактирования);
			
			Если СоздаватьПодобранныеПунктыАвтоматически И АдресСтруктура.Свойство("ЗначениеАдреса") Тогда
				СоздатьАдресПоСтроке("АдресНазначения", АдресСтруктура.ПредставлениеАдреса, АдресСтруктура);
				ВыбранноеЗначение = Объект.АдресНазначения;
			ИначеЕсли СоздаватьПодобранныеПунктыАвтоматически Тогда
				// Для создания адреса без вопросов пользователю формируем значение адреса по представлению
				ВидКИ = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента");
				ЗначениеАдреса = ПолучитьЗначениеАдресаJSON(АдресСтруктура.ПредставлениеАдреса, ВидКИ);
				АдресСтруктура.Вставить("ЗначениеАдреса", ЗначениеАдреса);
				СоздатьАдресПоСтроке("АдресНазначения", АдресСтруктура.ПредставлениеАдреса, АдресСтруктура);
				ВыбранноеЗначение = Объект.АдресНазначения;
			Иначе
				АдресНазначенияСтруктура = АдресСтруктура;
				ВыбранноеЗначение = АдресСтруктура.ПредставлениеАдреса;
			КонецЕсли;
		Исключение
			// В строке не содержится данные в формате JSON. Проверяем, не нужно ли сразу отразить текст на карте.
			ТекстНайтиНаКарте = "НайтиНаКарте ";
			Если СтрНачинаетсяС(ВыбранноеЗначение, ТекстНайтиНаКарте) Тогда
				ВыбранноеЗначение = Сред(ВыбранноеЗначение, СтрДлина(ТекстНайтиНаКарте)+1);
				НайтиАдресНаКарте = Истина;
			КонецЕсли;
		КонецПопытки;
	КонецЕсли;
	
	уатОбщегоНазначенияКлиент.ПунктОбработкаВыбора(Объект.АдресНазначения, ВыбранноеЗначение, СтандартнаяОбработка);
	АдресНазначенияПриИзменении(Элемент);
	
	Если НайтиАдресНаКарте Тогда
		НайтиНаКартеАдресНазначения(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресНазначенияАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	Если Не ПустаяСтрока(Текст)
		И ТипЗнч(СтрокаПолученияПодсказкиАдреса) = Тип("Строка")
		И ТипЗнч(СписокПодсказокАдреса) = Тип("СписокЗначений")
		И СокрЛП(Текст) = СокрЛП(СтрокаПолученияПодсказкиАдреса)
		И СписокПодсказокАдреса.Количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = СписокПодсказокАдреса.Скопировать();
		Возврат;
	ИначеЕсли Ожидание = 0 Тогда
		Возврат;
	КонецЕсли;
	
	АдресаКонтрагентов = Новый Массив;
	ПолучатьФактическиеАдреса = Ложь;
	Если ЗначениеЗаполнено(Объект.Грузополучатель) Тогда
		АдресаКонтрагентов = ПолучитьАдреса(Объект.Грузополучатель, ПолучатьФактическиеАдреса);
	КонецЕсли;
	Если Не ЗначениеЗаполнено(АдресаКонтрагентов) И ЗначениеЗаполнено(Объект.Контрагент) Тогда
		АдресаКонтрагентов = ПолучитьАдреса(Объект.Контрагент, ПолучатьФактическиеАдреса);
	КонецЕсли;
	СписокАдреса = ПодобратьАдреса(Текст, АдресаКонтрагентов);
	Если СписокАдреса.Количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = СписокАдреса;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресНазначенияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	
	Если ИспользоватьПодсказкиАдресов И Не ПустаяСтрока(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		ТекстОшибки = "";
		ДанныеВыбора = уатЭлектронныеКартыКлиент.ПолучитьПодсказкиПоАдресу(Текст, ТекстОшибки);
		
		ПредставлениеНайтиНаКарте = СтрШаблон(НСтр("ru = 'Найти ""%1"" на карте'"), Текст);
		ДанныеВыбора.Добавить("НайтиНаКарте " + Текст, ПредставлениеНайтиНаКарте,, БиблиотекаКартинок.уатКартаСинийБалун);
		ДанныеВыбора.Добавить(Текст,,, БиблиотекаКартинок.УровеньДоступаРедактирование);
		Если ТекстОшибки <> "" Тогда
			ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстОшибки);
		КонецЕсли;
		
		СтрокаПолученияПодсказкиАдреса = Текст;
		СписокПодсказокАдреса = ДанныеВыбора.Скопировать();
	Иначе
		Объект.АдресНазначения = Текст;
		АдресНазначенияПриИзменении(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура АдресНазначенияПриИзменении(Элемент)

	флВопросПереадресовкаЭПД = Истина;
	АдресНазначенияСтрока = Объект.АдресНазначения;
	РазрешеноИспользоватьРасписание = Истина;
	ОбновитьДатыНазначения(РазрешеноИспользоватьРасписание);
	АдресПриИзмененииЗавершение()
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправлениеСПриИзменении(Элемент)
	Если Объект.ОтправлениеПо < мОтправлениеС Тогда
		мОтправлениеС = Объект.ОтправлениеС;
		Возврат;
	КонецЕсли;

	АвтоподборНезаполненныхДатМаршрутаПриИзменении("ОтправлениеПо");
КонецПроцедуры

&НаКлиенте
Процедура ОтправлениеПоПриИзменении(Элемент)
	Если мОтправлениеПо < Объект.ОтправлениеС Тогда
		мОтправлениеПо = Объект.ОтправлениеПо;
		Возврат;
	КонецЕсли;
	АвтоподборНезаполненныхДатМаршрутаПриИзменении("ОтправлениеС");
КонецПроцедуры

&НаКлиенте
Процедура ДоставкаСПриИзменении(Элемент)
	Если Объект.ДоставкаПо < мДоставкаС Тогда
		мДоставкаС = Объект.ДоставкаС;
		Возврат;
	КонецЕсли;

	АвтоподборНезаполненныхДатМаршрутаПриИзменении("ДоставкаПо");
КонецПроцедуры

&НаКлиенте
Процедура ДоставкаПоПриИзменении(Элемент)
	Если мДоставкаПо < Объект.ДоставкаС Тогда
		мДоставкаПо = Объект.ДоставкаПо;
		Возврат;
	КонецЕсли;

	АвтоподборНезаполненныхДатМаршрутаПриИзменении("ДоставкаС");
КонецПроцедуры

&НаКлиенте
Процедура ДнейОтНачалаОтправлениеЭтапаШаблонаПриИзменении(Элемент)
	ЗаписатьПлановыеДниЭтапаШаблона();
КонецПроцедуры

&НаКлиенте
Процедура ДнейОтНачалаНазначениеЭтапаШаблонаПриИзменении(Элемент)
	ЗаписатьПлановыеДниЭтапаШаблона();
КонецПроцедуры

&НаКлиенте
Процедура СтоянкаПунктОтправленияПриИзменении(Элемент)
	
	уатЗащищенныеФункцииСервер.КонтрольВводаВремени(Объект.СтоянкаПунктОтправления);
	
	ПересчитатьСтоянкуИКоординатыПункта();
	
	Если Не Объект.FTL Тогда 
		РассчитатьПоказателиСервер(Ложь);
		ОбновитьВалютуВТЧГрузовТоваровСервер();
		ОбновитьПараметрВыработкиВременныйОказ();
		ОбновитьПараметрВыработкиВременныйПолуч();
		ОбновитьНадписьИтоги();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СтоянкаПунктНазначенияПриИзменении(Элемент)
	
	уатЗащищенныеФункцииСервер.КонтрольВводаВремени(Объект.СтоянкаПунктНазначения);
	
	ПересчитатьСтоянкуИКоординатыПункта();
	
	Если Не Объект.FTL Тогда 
		РассчитатьПоказателиСервер(Ложь);
		ОбновитьВалютуВТЧГрузовТоваровСервер();
		ОбновитьПараметрВыработкиВременныйОказ();
		ОбновитьПараметрВыработкиВременныйПолуч();
		ОбновитьНадписьИтоги();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузоотправительПриИзменении(Элемент)
	АдресИзменен = Ложь;
	ГрузоотправительПриИзмененииСервер(АдресИзменен);
	Если АдресИзменен Тогда 
		АдресОтправленияСтрока = Объект.АдресОтправления;
		РазрешеноИспользоватьРасписание = Ложь;
		ОбновитьДатыОтправления(РазрешеноИспользоватьРасписание);
		АдресПриИзмененииЗавершение();
	КонецЕсли;
	ЗаполнитьСписокВыбораПунктов(Элементы.АдресОтправления, Объект.Грузоотправитель, Объект.Контрагент, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ГрузоотправительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Объект.ВидДоставки = ВидДоставкиСкладДверь
		ИЛИ Объект.ВидДоставки = ВидДоставкиСкладСклад Тогда
		Возврат;
	КонецЕсли;
	
	уатОбщегоНазначенияКлиент.КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузоотправительАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Объект.ВидДоставки = ВидДоставкиСкладДверь
		ИЛИ Объект.ВидДоставки = ВидДоставкиСкладСклад Тогда
		Возврат;
	КонецЕсли;
	
	уатОбщегоНазначенияКлиент.КонтрагентАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузоотправительОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если Объект.ВидДоставки = ВидДоставкиСкладДверь
		ИЛИ Объект.ВидДоставки = ВидДоставкиСкладСклад Тогда
		Возврат;
	КонецЕсли;
	
	уатОбщегоНазначенияКлиент.КонтрагентОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ГрузоотправительПриИзмененииСервер(АдресИзменен=Ложь)
	
	КонтактноеЛицоАдрес = ПолучитьКонтактноеЛицоАдрес(Объект.Грузоотправитель);
	
	Если ЗначениеЗаполнено(КонтактноеЛицоАдрес.Адрес) И Не ЗначениеЗаполнено(Объект.АдресОтправления) Тогда
		Объект.АдресОтправления = КонтактноеЛицоАдрес.Адрес;
		АдресИзменен = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.КонтактноеЛицоГрузоотправителя) Тогда 
		Объект.КонтактноеЛицоГрузоотправителя = КонтактноеЛицоАдрес.КонтактноеЛицо;
	КонецЕсли;
	
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКонтактноеЛицоАдрес(ОбъектСсылка)
	
	Результат = Новый Структура("КонтактноеЛицо, Адрес", Справочники.КонтактныеЛица.ПустаяСсылка(), Справочники.уатПунктыНазначения.ПустаяСсылка());
	
	Если ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.Контрагенты") Тогда 
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Ссылка", ОбъектСсылка);
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	КонтрагентыПунктыНазначения.ПунктНазначения КАК ПунктНазначения,
		|	КонтрагентыПунктыНазначения.КонтактноеЛицо КАК КонтактноеЛицо,
		|	1 КАК Порядок
		|ИЗ
		|	Справочник.Контрагенты.ПунктыНазначения КАК КонтрагентыПунктыНазначения
		|ГДЕ
		|	КонтрагентыПунктыНазначения.Ссылка = &Ссылка
		|	И КонтрагентыПунктыНазначения.Основной
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	КонтрагентыПунктыНазначения.ПунктНазначения,
		|	КонтрагентыПунктыНазначения.КонтактноеЛицо,
		|	2
		|ИЗ
		|	Справочник.Контрагенты.ПунктыНазначения КАК КонтрагентыПунктыНазначения
		|ГДЕ
		|	КонтрагентыПунктыНазначения.Ссылка = &Ссылка
		|	И НЕ КонтрагентыПунктыНазначения.Основной
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда 
			Результат.КонтактноеЛицо = Выборка.КонтактноеЛицо;
			Результат.Адрес          = Выборка.ПунктНазначения;
			
			Возврат Результат;
		КонецЕсли;
		
		АдресОбъекта = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
			ОбъектСсылка, 
			Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента
		);
		
		Если Не ЗначениеЗаполнено(АдресОбъекта) Тогда
			АдресОбъекта = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
				ОбъектСсылка, 
				Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента
			);
		КонецЕсли;
		
		Результат.КонтактноеЛицо = ОбъектСсылка.ОсновноеКонтактноеЛицо;
		Результат.Адрес          = АдресОбъекта;
		
		Возврат Результат;
		
	ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.Склады") Тогда
		Результат.КонтактноеЛицо = ОбъектСсылка.КонтактноеЛицо;
		Результат.Адрес          = уатОбщегоНазначения_уэ.АдресСклада(ОбъектСсылка);
		
		Возврат Результат;
		
	Иначе 
		Возврат Результат;
	КонецЕсли;
	
КонецФункции // ПолучитьКонтактноеЛицоАдрес()

&НаСервереБезКонтекста
Функция ПолучитьАдреса(ОбъектСсылка, ФактАдрес = Истина)
	
	Результат = Новый Массив();
	
	Если ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.Контрагенты") Тогда 
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Ссылка", ОбъектСсылка);
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КонтрагентыПунктыНазначения.ПунктНазначения КАК ПунктНазначения,
		|	КонтрагентыПунктыНазначения.КонтактноеЛицо КАК КонтактноеЛицо,
		|	1 КАК Порядок
		|ИЗ
		|	Справочник.Контрагенты.ПунктыНазначения КАК КонтрагентыПунктыНазначения
		|ГДЕ
		|	КонтрагентыПунктыНазначения.Ссылка = &Ссылка
		|	И КонтрагентыПунктыНазначения.Основной
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КонтрагентыПунктыНазначения.ПунктНазначения,
		|	КонтрагентыПунктыНазначения.КонтактноеЛицо,
		|	2
		|ИЗ
		|	Справочник.Контрагенты.ПунктыНазначения КАК КонтрагентыПунктыНазначения
		|ГДЕ
		|	КонтрагентыПунктыНазначения.Ссылка = &Ссылка
		|	И НЕ КонтрагентыПунктыНазначения.Основной
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл 
			Результат.Добавить(Выборка.ПунктНазначения);
		КонецЦикла;
		
		Если ФактАдрес Тогда
			АдресОбъектаФакт = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
			ОбъектСсылка, 
			Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента
			);
			
			Если ЗначениеЗаполнено(АдресОбъектаФакт) Тогда
				Результат.Добавить(АдресОбъектаФакт);
			КонецЕсли;
			
			АдресОбъекта = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
			ОбъектСсылка, 
			Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента
			);
			
			Если ЗначениеЗаполнено(АдресОбъекта) И АдресОбъектаФакт <> АдресОбъекта Тогда
				Результат.Добавить(АдресОбъекта);
			КонецЕсли;
		КонецЕсли;

		Возврат Результат;
		
	ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.Склады") Тогда
		Результат.Добавить(уатОбщегоНазначения_уэ.АдресСклада(ОбъектСсылка));
		Возврат Результат;
	Иначе 
		Возврат Результат;
	КонецЕсли;
	
КонецФункции // ПолучитьКонтактноеЛицоАдрес()

&НаКлиенте
Процедура ГрузополучательПриИзменении(Элемент)
	
	флВопросПереадресовкаЭПД = Истина;
	АдресИзменен = Ложь;
	ГрузополучательПриИзмененииСервер(АдресИзменен);
	Если АдресИзменен Тогда 
		АдресНазначенияСтрока = Объект.АдресНазначения;
		РазрешеноИспользоватьРасписание = Ложь;
		ОбновитьДатыНазначения(РазрешеноИспользоватьРасписание);
		АдресПриИзмененииЗавершение();
	КонецЕсли;
	ЗаполнитьСписокВыбораПунктов(Элементы.АдресНазначения, Объект.Грузополучатель, Объект.Контрагент, Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ГрузополучательОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Объект.ВидДоставки = ВидДоставкиДверьСклад
		ИЛИ Объект.ВидДоставки = ВидДоставкиСкладСклад Тогда
		Возврат;
	КонецЕсли;
	
	уатОбщегоНазначенияКлиент.КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузополучательАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Объект.ВидДоставки = ВидДоставкиДверьСклад
		ИЛИ Объект.ВидДоставки = ВидДоставкиСкладСклад Тогда
		Возврат;
	КонецЕсли;
	
	уатОбщегоНазначенияКлиент.КонтрагентАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузополучательОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если Объект.ВидДоставки = ВидДоставкиДверьСклад
		ИЛИ Объект.ВидДоставки = ВидДоставкиСкладСклад Тогда
		Возврат;
	КонецЕсли;
	
	уатОбщегоНазначенияКлиент.КонтрагентОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаСервере
Процедура ГрузополучательПриИзмененииСервер(АдресИзменен=Ложь)
	
	КонтактноеЛицоАдрес = ПолучитьКонтактноеЛицоАдрес(Объект.Грузополучатель);
	
	Если ЗначениеЗаполнено(КонтактноеЛицоАдрес.Адрес) И Не ЗначениеЗаполнено(Объект.АдресНазначения) Тогда
		Объект.АдресНазначения = КонтактноеЛицоАдрес.Адрес;
		АдресИзменен = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.КонтактноеЛицоГрузополучателя) Тогда 
		Объект.КонтактноеЛицоГрузополучателя = КонтактноеЛицоАдрес.КонтактноеЛицо;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактноеЛицоГрузоотправителяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатОбщегоНазначенияТиповыеКлиент.уатНачалоВыбораКонтактногоЛицаКонтрагента(Элемент, СтандартнаяОбработка,
		?(Не ЗначениеЗаполнено(Объект.Грузоотправитель), Объект.Контрагент, Объект.Грузоотправитель));
КонецПроцедуры

&НаКлиенте
Процедура КонтактноеЛицоГрузополучателяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатОбщегоНазначенияТиповыеКлиент.уатНачалоВыбораКонтактногоЛицаКонтрагента(Элемент, СтандартнаяОбработка,
		?(Не ЗначениеЗаполнено(Объект.Грузополучатель), Объект.Контрагент, Объект.Грузополучатель));
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

&НаКлиенте
Процедура ВидПеревозкиПриИзменении(Элемент)
	
	УстановитьВидимость();
	
	Если Не (Объект.ВидПеревозки = ПредопределенноеЗначение("Справочник.уатВидыПеревозок.АвтомобильнаяГрузовая")
			Или Объект.ВидПеревозки = ПредопределенноеЗначение("Справочник.уатВидыПеревозок.АвтомобильнаяПассажирская")) Тогда 
		Объект.ТребованиеКТСТипТС = Неопределено;
		Объект.ТребованиеКТС      = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РодительскийЗаказСсылкаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПоказатьЗначение(, Объект.РодительскийЗаказ);
	
КонецПроцедуры

&НаКлиенте
Процедура МультимодальныйПриИзменении(Элемент)
	
	Если Мультимодальный И Не ВозможноВключениеМультимодальногоЗаказа(Объект.Ссылка) Тогда 
		ТекстНСТР = НСтр("en='Documents have been entered for order."
"Order can be saved as a stage of a new multimodal order."
"Continue?';ru='По заказу введены документы."
"Заказ может быть сохранен в качестве этапа нового мультимодального заказа."
"Продолжить?'");
		
		Оповещение = Новый ОписаниеОповещения("МультимодальныйПриИзмененииПодтвердитьВводЭтапа", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстНСТР, РежимДиалогаВопрос.ДаНет);
		
	ИначеЕсли Не Мультимодальный И ЕстьПодчиненныеЭтапы(Объект.Ссылка) Тогда 
		ТекстНСТР = НСтр("en='By order entered stages. Change is prohibited.';ru='По заказу введены этапы. Изменение запрещено.'");
		ПоказатьПредупреждение(Неопределено, ТекстНСТР);
		Мультимодальный = Объект.Мультимодальный;
		Возврат;
		
	Иначе
		Если Не Мультимодальный Тогда
			Объект.ЭтоШаблонПеревозки = Ложь;
		КонецЕсли;
		МультимодальныйПриИзмененииЗавершение();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаДниПланировщикаПриИзменении(Элемент)
	
	Если НастройкаДниПланировщика < 1 Тогда
		НастройкаДниПланировщика = 1;
	КонецЕсли;
	ПланировщикЭтаповЗаказа.ШкалаВремени.Элементы[0].Кратность = 1;
	
	#Если Не ВебКлиент Тогда
		ОбновитьПланировщикЭтапов();
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаДетализацияПланировщикаПриИзменении(Элемент)
	
	Если Не ПланировщикЭтаповЗаказа.ШкалаВремени.Элементы[1].Кратность = НастройкаДетализацияПланировщика Тогда
		ПланировщикЭтаповЗаказа.ШкалаВремени.Элементы[1].Кратность = НастройкаДетализацияПланировщика;
	КонецЕсли;
	
	#Если Не ВебКлиент Тогда
		ОбновитьПланировщикЭтапов();
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикЭтаповЗаказаПередСозданием(Элемент, Начало, Конец, Значения, Текст, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДопПараметры = Новый Структура();
	Если ЗначениеЗаполнено(Начало) Тогда 
		ДопПараметры.Вставить("Начало", Начало);
	КонецЕсли;
	Если ЗначениеЗаполнено(Конец) Тогда 
		ДопПараметры.Вставить("Конец", Конец);
	КонецЕсли;
	
	ГрузДляКопирования = Значения.Получить("Груз");
	Если Не ГрузДляКопирования = Неопределено Тогда 
		ДопПараметры.Вставить("ГрузДляКопирования", ГрузДляКопирования);
	КонецЕсли;
	
	Если Модифицированность Тогда
		ТекстНСТР = НСтр("en='Before adding the steps it is necessary to record the document. Record?';ru='Перед добавлением этапов необходимо записать документ. Записать?'");
		Оповещение = Новый ОписаниеОповещения("ПланировщикЭтаповЗаказаПередСозданиемОтветНаВопросЗаписиДокумента", ЭтотОбъект, ДопПараметры);
		ПоказатьВопрос(Оповещение, ТекстНСТР, РежимДиалогаВопрос.ОКОтмена, 30, КодВозвратаДиалога.ОК);
	Иначе 
		ПланировщикЭтаповЗаказаПередСозданиемПослеЗаписиДокумента(ДопПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикЭтаповЗаказаВыбор(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СписокВыбораДокумента = Новый СписокЗначений();
	
	Для Каждого ТекБлок Из Элемент.ВыделенныеЭлементы Цикл 
		СписокВыбораДокумента.Добавить(ТекБлок.Значение);
		ДанныеМЛ = ПолучитьДанныеМЛПоЭтапу(ТекБлок.Значение);
		Для Каждого ТекМЛ Из ДанныеМЛ.МаршрутныеЛисты Цикл 
			СписокВыбораДокумента.Добавить(ТекМЛ);
		КонецЦикла;
	КонецЦикла;
	
	Если СписокВыбораДокумента.Количество() = 0 Тогда 
		Возврат;
	ИначеЕсли СписокВыбораДокумента.Количество() = 1 Тогда 
		ОткрытьФормуДокумента(СписокВыбораДокумента[0].Значение);
	Иначе 
		Оповещение = Новый ОписаниеОповещения("ПланировщикЭтаповЗаказаВыборВыборДокумента", ЭтотОбъект);
		ТекстНСТР = НСтр("en='Select the document';ru='Выберите документ'");
		СписокВыбораДокумента.ПоказатьВыборЭлемента(Оповещение, ТекстНСТР);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикЭтаповЗаказаПриОкончанииРедактирования(Элемент, НовыйЭлемент, ОтменаРедактирования)
	
	ОтменаРедактирования = Истина;
	
	Если НовыйЭлемент И Элемент.ВыделенныеЭлементы.Количество() Тогда 
		Оповещение = Новый ОписаниеОповещения("ОбновитьПланировщикПослеЗаписиДокумента", ЭтотОбъект);
		ПараметрыФормы = Новый Структура("ЗначениеКопирования, ПланировщикНачалоПериода, ПланировщикКонецПериода", 
			Элемент.ВыделенныеЭлементы[0].Значение,
			Элемент.ВыделенныеЭлементы[0].Начало,
			Элемент.ВыделенныеЭлементы[0].Конец);
		ГрузДляКопирования = Элемент.ВыделенныеЭлементы[0].ЗначенияИзмерений.Получить("Груз");
		Если Не ГрузДляКопирования = Неопределено Тогда 
			ПараметрыФормы.Вставить("ГрузДляКопирования", ГрузДляКопирования);
		КонецЕсли;
		
		ОткрытьФорму("Документ.уатЗаказГрузоотправителя.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект,,,, Оповещение);
		
	Иначе 
		мсвЭтапов = Новый Массив();
		флРодительскийЗаказ = Ложь;
		фл1970 = Ложь;
		Для Каждого ТекБлок Из Элемент.ВыделенныеЭлементы Цикл 
			ДанныеМЛ = ПолучитьДанныеМЛПоЭтапу(ТекБлок.Значение);
			Если ДанныеМЛ.ЕстьМЛ Тогда 
				Продолжить;
			КонецЕсли;
			мсвЭтапов.Добавить(Новый Структура("Этап, Начало, Конец", ТекБлок.Значение, ТекБлок.Начало, ТекБлок.Конец));
			Если ТекБлок.Значение = Объект.Ссылка Тогда
				флРодительскийЗаказ = Истина;
			КонецЕсли;
			Если ТекБлок.Начало = '19700101' И ТекБлок.Конец = '19700101' Тогда
				фл1970 = Истина;
			КонецЕсли;
		КонецЦикла;
		Если мсвЭтапов.Количество() = 0 Тогда 
			Возврат;
		КонецЕсли;
		Если фл1970 Тогда 
			Возврат;
		КонецЕсли;
		Если флРодительскийЗаказ Тогда
			ПоказатьПредупреждение(Неопределено, "Изменение интервала планировщика для родительского заказа запрещено!");
			Возврат;
		КонецЕсли;
		
		ЗаписатьИзмененияПоЭтапам(мсвЭтапов);
		ОбновитьСписокЭтапов();
		#Если Не ВебКлиент Тогда
			ОбновитьПланировщикЭтапов();
		#КонецЕсли
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикЭтаповЗаказаПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
	Если Не Элемент.ВыделенныеЭлементы.Количество() Тогда 
		Возврат;
	КонецЕсли;
	
	Если Элемент.ВыделенныеЭлементы.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	ТекстНСТР = НСтр("en='Specified stage will be rejected. Continue?';ru='Указанный этап будет отклонен. Продолжить?'");
	Оповещение = Новый ОписаниеОповещения("СписокЭтаповОтклонитьЭтапПослеПодтверждения", ЭтотОбъект, Новый Структура("Этап", Элемент.ВыделенныеЭлементы[0].Значение));
	ПоказатьВопрос(Оповещение, ТекстНСТР, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикЭтаповЗаказаПередНачаломБыстрогоРедактирования(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикЭтаповЗаказаПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Дата, Значения)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикЭтаповЗаказаПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Дата, Значения)
	
	СтандартнаяОбработка = Ложь;
	
	мсвЭтапы = Новый Массив();
	Для Каждого ТекЭтап Из ПараметрыПеретаскивания.Значение Цикл 
		мсвЭтапы.Добавить(ТекЭтап.Этап);
	КонецЦикла;
	ПеренестиДатыЭтапаПриПеретаскиванииНаПланировщик(мсвЭтапы, Дата);
	
	ОбновитьСписокЭтапов();
	
	#Если Не ВебКлиент Тогда
		ОбновитьПланировщикЭтапов();
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектСтроительстваПриИзменении(Элемент)
	
	Если флЗаказОтКонтрагента = 1 И ЗначениеЗаполнено(Объект.ОбъектСтроительства) Тогда 
		КонтрагентПоОбъектуСтроительства = ПолучитьКонтрагентаПоОбъектуСтроительства(Объект.ОбъектСтроительства);
		
		Если ЗначениеЗаполнено(Объект.Контрагент) И ЗначениеЗаполнено(КонтрагентПоОбъектуСтроительства) 
			И Не Объект.Контрагент = КонтрагентПоОбъектуСтроительства Тогда
			
			ТекстНСТР = НСтр("en='contractor on the construction project does not match the counterparty on request.';ru='Контрагент по объекту строительства не соответствует контрагенту по заказу.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР,, "Объект.ОбъектСтроительства");
			
		ИначеЕсли Не ЗначениеЗаполнено(Объект.Контрагент) Тогда 
			Объект.Контрагент = КонтрагентПоОбъектуСтроительства;
			КонтрагентПриИзменении(Элементы.Контрагент);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВидДоставкиПриИзменении(Элемент)
	УстановитьОграничениеТипаОтправительПолучатель();
КонецПроцедуры

&НаКлиенте
Процедура МаршрутПриИзменении(Элемент)
	
	Если МаршрутЗаполненПоиском Тогда
		МаршрутЗаполненПоиском = Ложь;
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Маршрут) Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.АдресОтправления) И Не ЗначениеЗаполнено(Объект.АдресНазначения) Тогда
		УстановитьДанныеПоМаршрутуСервер();
		ПодборВремениПрибытияУбытияПоРасписанию();
	Иначе
		Оповещение = Новый ОписаниеОповещения("ПослеИзмененияМаршрута", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, "Перезаполнить пункты назначения по выбранному маршруту?", РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПослеИзмененияМаршрута(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		УстановитьДанныеПоМаршрутуСервер();
	КонецЕсли;
	
	ПодборВремениПрибытияУбытияПоРасписанию();
		
КонецПроцедуры

&НаКлиенте
Процедура ПодборВремениПрибытияУбытияПоРасписанию()
	
	ДанныеРасписания = ПодобратьДанныеРасписания();
	Если ДанныеРасписания <> Неопределено Тогда
		ЗаполнитьДатыПоРасписанию(ДанныеРасписания);
		Если Не Объект.FTL Тогда
			АдресПриИзмененииЗавершение();
		КонецЕсли;
	ИначеЕсли Объект.FTL Тогда 
		ПромежуточныеПунктыПриИзменении(Элементы.ПромежуточныеПункты);
	Иначе 
		Объект.ПрибытиеПоРасписанию = Неопределено;
		АдресОтправленияСтрока = Объект.АдресОтправления;
		АдресНазначенияСтрока = Объект.АдресНазначения;
		РазрешеноИспользоватьРасписание = Ложь;
		ОбновитьДатыОтправления(РазрешеноИспользоватьРасписание);
		ОбновитьДатыНазначения(РазрешеноИспользоватьРасписание);
		АдресПриИзмененииЗавершение();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура FTLПриИзменении(Элемент)
	
	Если Не FTL И ПромежуточныеПункты.Количество() > 2 Тогда 
		ТекстНСТР = НСтр("en='List of intermediate points will be cleared. Continue?';ru='Список промежуточных пунктов будет очищен. Продолжить?'");
		ОповещениеОчисткаПП = Новый ОписаниеОповещения("FTLПриИзмененииОчисткаТЧ", ЭтотОбъект);
		ПоказатьВопрос(ОповещениеОчисткаПП, ТекстНСТР, РежимДиалогаВопрос.ДаНет);
	Иначе
		FTLПриИзмененииЗавершение();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НазваниеГрузаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, 
	"Объект.НазваниеГруза",Нстр("en = 'Cargo description'; ru = 'Описание груза'"));
КонецПроцедуры

&НаКлиенте
Процедура НаименованиеГрузаДляДоверенностиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, 
	"Объект.ВидГрузаДляДоверенности",Нстр("en = 'Cargo description'; ru = 'Вид груза для доверенности'"));
КонецПроцедуры

&НаКлиенте
Процедура ПолеВводаХарактеристикОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.уатХарактеристикиЗаказов_уэ") Тогда
		ПрикрепитьТегХарактеристикНаСервере(ВыбранноеЗначение);
	КонецЕсли;
	Элемент.ОбновитьТекстРедактирования();
		
КонецПроцедуры

&НаКлиенте
Процедура ПолеВводаГруппыСовместимостиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если Не ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.уатГруппыСовместимости_уэ") Тогда
		ПрикрепитьТегГруппыСовместимостиНаСервере(ВыбранноеЗначение);
	КонецЕсли;
	Элемент.ОбновитьТекстРедактирования();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеВводаХарактеристикОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	Если Не ПустаяСтрока(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		СоздатьИПрикрепитьТегХарактеристикНаСервере(Текст);
		ТекущийЭлемент = Элементы.ПолеВводаХарактеристик;
		
		Если ФлагСозданЭлементСправочника Тогда
			ТекстНстр = НСтр("ru='Создан элемент справочника ""Характеристики заказов"": '") + "«" + Текст + "»";
			ПоказатьОповещениеПользователя("",,ТекстНстр);
			ФлагСозданЭлементСправочника = Ложь;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПолеВводаГруппыСовместимостиОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	Если Не ПустаяСтрока(Текст) Тогда
		СтандартнаяОбработка = Ложь;
		СоздатьИПрикрепитьТегГруппыСовместимостиНаСервере(Текст);
		ТекущийЭлемент = Элементы.ПолеВводаГруппыСовместимости;
		
		Если ФлагСозданЭлементСправочника Тогда
			ТекстНстр = НСтр("ru='Создан элемент справочника ""Группы совместимости"": '") + "«" + Текст + "»";
			ПоказатьОповещениеПользователя("",,ТекстНстр);
			ФлагСозданЭлементСправочника = Ложь;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОблакоТеговХарактеристикОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ТегИД = Сред(НавигационнаяСсылкаФорматированнойСтроки, СтрДлина("Тег_")+1);
	СтрокаТегов = Объект.Характеристики.НайтиПоИдентификатору(ТегИД);
	Объект.Характеристики.Удалить(СтрокаТегов);
	
	ОбновитьЭлементыТеговХарактеристик();
	
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ОблакоТеговГруппыСовместимостиОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ТегИД = Сред(НавигационнаяСсылкаФорматированнойСтроки, СтрДлина("Тег_")+1);
	СтрокаТегов = Объект.ГруппыСовместимости.НайтиПоИдентификатору(ТегИД);
	Объект.ГруппыСовместимости.Удалить(СтрокаТегов);
	
	ОбновитьЭлементыТеговГруппыСовместимости();
	
	Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ПолеВводаХарактеристикНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Справочник.уатХарактеристикиЗаказов_уэ.ФормаВыбора",,Элементы.ПолеВводаХарактеристик);
КонецПроцедуры

&НаКлиенте
Процедура ПолеВводаГруппыСовместимостиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОткрытьФорму("Справочник.уатГруппыСовместимости_уэ.ФормаВыбора",,Элементы.ПолеВводаГруппыСовместимости);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНаименованиеДляДоверенности(Команда)
	Если ЗначениеЗаполнено(Объект.ВидГрузаДляДоверенности) Тогда
		ЗаполнитьНаименованиеВопрос();
	Иначе 
		ЗаполнитьНаименованиеОкончание();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНаименованиеВопрос()
	ТекстВопроса = "Наименование груза для доверенности будет перезаполнено по видам груза. Продолжить?";
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьНаименованиеОтвет", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНаименованиеОтвет(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Объект.ВидГрузаДляДоверенности = "";
		ЗаполнитьНаименованиеОкончание();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНаименованиеОкончание()
	
	ЗаполнитьНаименованиеНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьНаименованиеНаСервере()
	
	// При заполнении выбирается первый заполненный вид груза в ТЧ "Грузовые места"
	// или ТЧ "Товары" в зависимости от детализации.
	// При детализации "Заказ" сначала выбираются грузовые места, затем товары.

	Объект.ВидГрузаДляДоверенности = "";
	
	Если Объект.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам 
		ИЛИ Объект.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам Тогда
		Для Каждого ТекСтрока Из Объект.ГрузовойСостав Цикл
			Если ЗначениеЗаполнено(ТекСтрока.ГрузовоеМесто)
				И ЗначениеЗаполнено(ТекСтрока.ГрузовоеМесто.ВидГруза) Тогда
				Объект.ВидГрузаДляДоверенности = ТекСтрока.ГрузовоеМесто.ВидГруза;		
				Возврат;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	
	Если Объект.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам 
		ИЛИ Объект.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам Тогда
		Для Каждого ТекСтрока Из Объект.Товары Цикл
			Если ЗначениеЗаполнено(ТекСтрока.Номенклатура)
				И ЗначениеЗаполнено(ТекСтрока.Номенклатура.уатВидГруза) Тогда
				Объект.ВидГрузаДляДоверенности = ТекСтрока.Номенклатура.уатВидГруза;		
				Возврат;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;	
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормы_ПромежуточныеПункты

&НаКлиенте
Процедура ПромежуточныеПунктыПриИзменении(Элемент)
	
	ЗаписатьПромежуточныеПункты();
	ПрочитатьПромежуточныеПункты();
	
	Если ПромежуточныеПункты.Количество() < 2 Тогда
		Объект.АдресОтправления               = Неопределено;
		Объект.СтоянкаПунктОтправления        = Неопределено;
		Объект.Грузоотправитель               = Неопределено;
		Объект.КонтактноеЛицоГрузоотправителя = Неопределено;
		Объект.ОтправлениеС                   = Неопределено;
		Объект.ОтправлениеПо                  = Неопределено;
		АдресОтправленияСтрока                = Неопределено;
		
		Объект.АдресНазначения               = Неопределено;
		Объект.СтоянкаПунктНазначения        = Неопределено;
		Объект.Грузополучатель               = Неопределено;
		Объект.КонтактноеЛицоГрузополучателя = Неопределено;
		Объект.ДоставкаС                     = Неопределено;
		Объект.ДоставкаПо                    = Неопределено;
		АдресНазначенияСтрока                = Неопределено;
		
		Объект.Стоянка = Неопределено;
		
		ОчиститьВремяРасстояниеМеждуПунктами();
		
	ИначеЕсли ПромежуточныеПункты.Количество() > 1 Тогда
		Если Не Объект.АдресОтправления = ПромежуточныеПункты[0].Пункт Тогда 
			Объект.АдресОтправления = ПромежуточныеПункты[0].Пункт;
			РазрешеноИспользоватьРасписание = Ложь;
			ОбновитьДатыОтправления(РазрешеноИспользоватьРасписание);
			АдресПриИзмененииЗавершение();
		КонецЕсли;
		
		Если Не Объект.Грузоотправитель = ПромежуточныеПункты[0].ОтправительПолучатель Тогда 
			Объект.Грузоотправитель = ПромежуточныеПункты[0].ОтправительПолучатель;
			ГрузоотправительПриИзменении(Элементы.Грузоотправитель);
		КонецЕсли;
		
		Если Не Объект.КонтактноеЛицоГрузоотправителя = ПромежуточныеПункты[0].КонтактноеЛицо Тогда 
			Объект.КонтактноеЛицоГрузоотправителя = ПромежуточныеПункты[0].КонтактноеЛицо;
		КонецЕсли;
		
		Если Не Объект.ОтправлениеС = ПромежуточныеПункты[0].ПрибытиеПлан Тогда 
			Объект.ОтправлениеС = ПромежуточныеПункты[0].ПрибытиеПлан;
			//ОтправлениеСПриИзменении(Элементы.ОтправлениеСДни);
		КонецЕсли;
		
		Если Не Объект.ОтправлениеПо = ПромежуточныеПункты[0].УбытиеПлан Тогда 
			Объект.ОтправлениеПо = ПромежуточныеПункты[0].УбытиеПлан;
			//ОтправлениеПоПриИзменении(Элементы.ОтправлениеПоДни);
		КонецЕсли;
		
		Если Не Объект.СтоянкаПунктОтправления = ПромежуточныеПункты[0].Стоянка Тогда 
			Объект.СтоянкаПунктОтправления = ПромежуточныеПункты[0].Стоянка;
			СтоянкаПунктОтправленияПриИзменении(Элементы.ОтправлениеСтоянка);
		КонецЕсли;
		
		Если Не Объект.АдресНазначения = ПромежуточныеПункты[ПромежуточныеПункты.Количество()-1].Пункт Тогда 
			Объект.АдресНазначения = ПромежуточныеПункты[ПромежуточныеПункты.Количество()-1].Пункт;
			РазрешеноИспользоватьРасписание = Ложь;
			ОбновитьДатыНазначения(РазрешеноИспользоватьРасписание);
			АдресПриИзмененииЗавершение();
		КонецЕсли;
		
		Если Не Объект.Грузополучатель = ПромежуточныеПункты[ПромежуточныеПункты.Количество()-1].ОтправительПолучатель Тогда 
			Объект.Грузополучатель = ПромежуточныеПункты[ПромежуточныеПункты.Количество()-1].ОтправительПолучатель;
			ГрузополучательПриИзменении(Элементы.Грузополучатель);
		КонецЕсли;
		
		Если Не Объект.КонтактноеЛицоГрузополучателя = ПромежуточныеПункты[ПромежуточныеПункты.Количество()-1].КонтактноеЛицо Тогда 
			Объект.КонтактноеЛицоГрузополучателя = ПромежуточныеПункты[ПромежуточныеПункты.Количество()-1].КонтактноеЛицо;
		КонецЕсли;
		
		Если Не Объект.СтоянкаПунктНазначения = ПромежуточныеПункты[ПромежуточныеПункты.Количество()-1].Стоянка Тогда 
			Объект.СтоянкаПунктНазначения = ПромежуточныеПункты[ПромежуточныеПункты.Количество()-1].Стоянка;
			СтоянкаПунктНазначенияПриИзменении(Элементы.ПрибытиеСтоянка);
		КонецЕсли;
	КонецЕсли;
	
	УстановитьСпискиВыбораОтрезковПути();
	
	ОтобразитьСтатусыАдресов();
	РассчитатьПоказателиСервер(Истина);
	ОбновитьВалютуВТЧГрузовТоваровСервер();
	ОбновитьПараметрВыработкиВременныйОказ();
	ОбновитьПараметрВыработкиВременныйПолуч();
	ОбновитьНадписьИтоги();
	УстановитьПредставленияОтрезковПути();
	
	// Выполняется после расчета показателей, т.к. расчет показателей может изменить время в пути между пунктами
	Если ПромежуточныеПункты.Количество() > 1 Тогда
		Если Не Объект.ДоставкаС = ПромежуточныеПункты[ПромежуточныеПункты.Количество()-1].ПрибытиеПлан Тогда 
			Объект.ДоставкаС = ПромежуточныеПункты[ПромежуточныеПункты.Количество()-1].ПрибытиеПлан;
			//ДоставкаСПриИзменении(Элементы.ДоставкаСДни);
		КонецЕсли;
		
		Если Не Объект.ДоставкаПо = ПромежуточныеПункты[ПромежуточныеПункты.Количество()-1].УбытиеПлан Тогда 
			Объект.ДоставкаПо = ПромежуточныеПункты[ПромежуточныеПункты.Количество()-1].УбытиеПлан;
			//ДоставкаПоПриИзменении(Элементы.ДоставкаПоДни);
		КонецЕсли;
	КонецЕсли;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПромежуточныеПунктыПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.ТекущийЭлемент = Элементы.ПромежуточныеПунктыПрибытиеПлан
			Или Элемент.ТекущийЭлемент = Элементы.ПромежуточныеПунктыУбытиеПлан Тогда 
		ДанныеСтрокиПромежуточныхПунктов = Новый Структура();
		ДанныеСтрокиПромежуточныхПунктов.Вставить("ПрибытиеПлан", Элемент.ТекущиеДанные.ПрибытиеПлан);
		ДанныеСтрокиПромежуточныхПунктов.Вставить("УбытиеПлан", Элемент.ТекущиеДанные.УбытиеПлан);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПромежуточныеПунктыПрибытиеПланПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПромежуточныеПункты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ДанныеСтрокиПромежуточныхПунктов = Неопределено И Не ПромежуточныеПункты.Индекс(ТекущиеДанные) = 0 Тогда 
		ОжиданиеСек = ТекущиеДанные.ПрибытиеПлан - ДанныеСтрокиПромежуточныхПунктов.ПрибытиеПлан;
		ОжиданиеЧас = Цел(ОжиданиеСек / 3600);
		ОжиданиеСек = ОжиданиеСек - ОжиданиеЧас * 3600;
		ОжиданиеМин = Цел(ОжиданиеСек / 60);
		ОжиданиеСек = ОжиданиеСек - ОжиданиеМин * 60;
		Если ОжиданиеСек > 30 Тогда 
			ОжиданиеМин = ОжиданиеМин + 1;
		КонецЕсли;
		Если ОжиданиеМин > 59 Тогда 
			ОжиданиеМин = 0;
			ОжиданиеЧас = ОжиданиеЧас + 1;
		КонецЕсли;
		
		ТекущиеДанные.Ожидание = уатЗащищенныеФункцииСервер.СложитьВремя(
			ТекущиеДанные.Ожидание, 
			(ОжиданиеЧас + ОжиданиеМин / 100)
		);
	КонецЕсли;
	
	// Обновление временного окна прибытия в пункт. Выполняется только для той строки, в которой изменилось время,
	// в остальных строках будет выполнено в процедуре ПрочитатьПромежуточныеПункты
	Если Не ДанныеСтрокиПромежуточныхПунктов = Неопределено Тогда
		СдвигОкна = НачалоДня(ТекущиеДанные.ПрибытиеПлан) - НачалоДня(ДанныеСтрокиПромежуточныхПунктов.ПрибытиеПлан);
		ТекущиеДанные.ОкноС  = ТекущиеДанные.ОкноС  + СдвигОкна;
		ТекущиеДанные.ОкноПо = ТекущиеДанные.ОкноПо + СдвигОкна;
	КонецЕсли;
	
	ДанныеСтрокиПромежуточныхПунктов = Новый Структура();
	ДанныеСтрокиПромежуточныхПунктов.Вставить("ПрибытиеПлан", ТекущиеДанные.ПрибытиеПлан);
	ДанныеСтрокиПромежуточныхПунктов.Вставить("УбытиеПлан", ТекущиеДанные.УбытиеПлан);
	
КонецПроцедуры

&НаКлиенте
Процедура ПромежуточныеПунктыУбытиеПланПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПромежуточныеПункты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ДанныеСтрокиПромежуточныхПунктов = Неопределено Тогда
		ОжиданиеСек = ТекущиеДанные.УбытиеПлан - ДанныеСтрокиПромежуточныхПунктов.УбытиеПлан;
		
		Если ПромежуточныеПункты.Индекс(ТекущиеДанные) = 0 Тогда 
			ТекущиеДанные.ПрибытиеПлан = ТекущиеДанные.ПрибытиеПлан + ОжиданиеСек;
			
		Иначе 
			ОжиданиеЧас = Цел(ОжиданиеСек / 3600);
			ОжиданиеСек = ОжиданиеСек - ОжиданиеЧас * 3600;
			ОжиданиеМин = Цел(ОжиданиеСек / 60);
			ОжиданиеСек = ОжиданиеСек - ОжиданиеМин * 60;
			Если ОжиданиеСек > 30 Тогда 
				ОжиданиеМин = ОжиданиеМин + 1;
			КонецЕсли;
			Если ОжиданиеМин > 59 Тогда 
				ОжиданиеМин = 0;
				ОжиданиеЧас = ОжиданиеЧас + 1;
			КонецЕсли;
			
			ТекущиеДанные.Ожидание = уатЗащищенныеФункцииСервер.СложитьВремя(
				ТекущиеДанные.Ожидание, 
				(ОжиданиеЧас + ОжиданиеМин / 100)
			);
		КонецЕсли;
		
		// Обновление временного окна прибытия в пункт. Выполняется только для той строки, в которой изменилось время,
		// в остальных строках будет выполнено в процедуре ПрочитатьПромежуточныеПункты
		СдвигОкна = НачалоДня(ТекущиеДанные.УбытиеПлан) - НачалоДня(ДанныеСтрокиПромежуточныхПунктов.УбытиеПлан);
		ТекущиеДанные.ОкноС  = ТекущиеДанные.ОкноС  + СдвигОкна;
		ТекущиеДанные.ОкноПо = ТекущиеДанные.ОкноПо + СдвигОкна;
	КонецЕсли;
	
	ДанныеСтрокиПромежуточныхПунктов = Новый Структура();
	ДанныеСтрокиПромежуточныхПунктов.Вставить("ПрибытиеПлан", ТекущиеДанные.ПрибытиеПлан);
	ДанныеСтрокиПромежуточныхПунктов.Вставить("УбытиеПлан", ТекущиеДанные.УбытиеПлан);
	
КонецПроцедуры

&НаКлиенте
Процедура ПромежуточныеПунктыОтправительПолучательПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПромежуточныеПункты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	АдресИзменен = Ложь;
	
	КонтактноеЛицоАдрес = ПолучитьКонтактноеЛицоАдрес(ТекущиеДанные.ОтправительПолучатель);
	
	Если ЗначениеЗаполнено(КонтактноеЛицоАдрес.Адрес) И Не ЗначениеЗаполнено(ТекущиеДанные.Пункт) Тогда
		ТекущиеДанные.Пункт = КонтактноеЛицоАдрес.Адрес;
		АдресИзменен = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.КонтактноеЛицо) Тогда 
		ТекущиеДанные.КонтактноеЛицо = КонтактноеЛицоАдрес.КонтактноеЛицо;
	КонецЕсли;
	
	Если АдресИзменен Тогда 
		ПромежуточныеПунктыПунктПриИзменении(Элементы.ПромежуточныеПунктыПункт);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПромежуточныеПунктыОтправительПолучательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПромежуточныеПункты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ТипТочкиМаршрута = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Погрузка")
			Или ТекущиеДанные.ТипТочкиМаршрута = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.ДополнительнаяПогрузка") Тогда 
		Если Объект.ВидДоставки = ВидДоставкиСкладДверь
				Или Объект.ВидДоставки = ВидДоставкиСкладСклад Тогда
			СтандартнаяОбработка = Ложь;
			ОткрытьФорму("Справочник.Склады.ФормаВыбора",, Элемент);
		Иначе 
			СтандартнаяОбработка = Ложь;
			ОткрытьФорму("Справочник.Контрагенты.ФормаВыбора",, Элемент);
		КонецЕсли;
		
	Иначе 
		Если Объект.ВидДоставки = ВидДоставкиДверьСклад
				Или Объект.ВидДоставки = ВидДоставкиСкладСклад Тогда
			СтандартнаяОбработка = Ложь;
			ОткрытьФорму("Справочник.Склады.ФормаВыбора",, Элемент);
		Иначе 
			СтандартнаяОбработка = Ложь;
			ОткрытьФорму("Справочник.Контрагенты.ФормаВыбора",, Элемент);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПромежуточныеПунктыОтправительПолучательОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПромежуточныеПункты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ТипТочкиМаршрута = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Погрузка")
			Или ТекущиеДанные.ТипТочкиМаршрута = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.ДополнительнаяПогрузка") Тогда 
		Если Объект.ВидДоставки = ВидДоставкиСкладДверь
				Или Объект.ВидДоставки = ВидДоставкиСкладСклад Тогда
			Возврат;
		КонецЕсли;
		
		уатОбщегоНазначенияКлиент.КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
		
	Иначе 
		Если Объект.ВидДоставки = ВидДоставкиДверьСклад
				Или Объект.ВидДоставки = ВидДоставкиСкладСклад Тогда
			Возврат;
		КонецЕсли;
		
		уатОбщегоНазначенияКлиент.КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПромежуточныеПунктыОтправительПолучательАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПромежуточныеПункты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ТипТочкиМаршрута = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Погрузка")
			Или ТекущиеДанные.ТипТочкиМаршрута = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.ДополнительнаяПогрузка") Тогда 
		Если Объект.ВидДоставки = ВидДоставкиСкладДверь
				Или Объект.ВидДоставки = ВидДоставкиСкладСклад Тогда
			Возврат;
		КонецЕсли;
		
		уатОбщегоНазначенияКлиент.КонтрагентАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
		
	Иначе 
		Если Объект.ВидДоставки = ВидДоставкиДверьСклад
				Или Объект.ВидДоставки = ВидДоставкиСкладСклад Тогда
			Возврат;
		КонецЕсли;
		
		уатОбщегоНазначенияКлиент.КонтрагентАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПромежуточныеПунктыОтправительПолучательОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПромежуточныеПункты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ТипТочкиМаршрута = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Погрузка")
			Или ТекущиеДанные.ТипТочкиМаршрута = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.ДополнительнаяПогрузка") Тогда 
		Если Объект.ВидДоставки = ВидДоставкиСкладДверь
				Или Объект.ВидДоставки = ВидДоставкиСкладСклад Тогда
			Возврат;
		КонецЕсли;
		
		уатОбщегоНазначенияКлиент.КонтрагентОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
		
	Иначе 
		Если Объект.ВидДоставки = ВидДоставкиДверьСклад
				Или Объект.ВидДоставки = ВидДоставкиСкладСклад Тогда
			Возврат;
		КонецЕсли;
		
		уатОбщегоНазначенияКлиент.КонтрагентОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПромежуточныеПунктыКонтактноеЛицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПромежуточныеПункты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	уатОбщегоНазначенияТиповыеКлиент.уатНачалоВыбораКонтактногоЛицаКонтрагента(
		Элемент, 
		СтандартнаяОбработка,
		?(Не ЗначениеЗаполнено(ТекущиеДанные.ОтправительПолучатель), Объект.Контрагент, ТекущиеДанные.ОтправительПолучатель)
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПромежуточныеПунктыПунктПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПромежуточныеПункты.ТекущиеДанные;
	ПромежуточныеПунктыПунктПриИзмененииДанных(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ПромежуточныеПунктыПунктНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПромежуточныеПункты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	уатОбщегоНазначенияКлиент.ПунктНачалоВыбора(Элемент, СтандартнаяОбработка, ТекущиеДанные.Пункт);
	
КонецПроцедуры

&НаКлиенте
Процедура ПромежуточныеПунктыПунктОчистка(Элемент, СтандартнаяОбработка)
	
	ПромежуточныеПунктыПунктПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПромежуточныеПунктыПунктОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ПромежуточныеПункты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.Пункт) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда
		ПоказатьЗначение(Неопределено, ТекущиеДанные.Пункт);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПромежуточныеПунктыПунктОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПромежуточныеПункты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Пункт = ВыбранноеЗначение;
	ПромежуточныеПунктыПунктПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПромежуточныеПунктыПунктАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПромежуточныеПункты.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда
		ЗаполнитьСписокВыбораПунктов(Элементы.ПромежуточныеПунктыПункт, ТекущиеДанные.ОтправительПолучатель, Объект.Контрагент, Ложь);
	КонецЕсли;
	
	Если Ожидание = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СписокАдреса = ПодобратьАдреса(Текст);
	Если СписокАдреса.Количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = СписокАдреса;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПромежуточныеПунктыПунктОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПромежуточныеПункты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Пункт = Текст;
	ПромежуточныеПунктыПунктПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПромежуточныеПунктыСтоянкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПромежуточныеПункты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	уатЗащищенныеФункцииСервер.КонтрольВводаВремени(ТекущиеДанные.Стоянка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПромежуточныеПунктыОжиданиеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПромежуточныеПункты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	уатЗащищенныеФункцииСервер.КонтрольВводаВремени(ТекущиеДанные.Ожидание);
	
КонецПроцедуры

&НаКлиенте
Процедура ПромежуточныеПунктыВремяПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПромежуточныеПункты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	уатЗащищенныеФункцииСервер.КонтрольВводаВремени(ТекущиеДанные.Время);
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыГрузовойСостав

&НаКлиенте
Процедура ГрузовойСоставПриИзменении(Элемент)
	
	ТекСтрока = Элементы.ГрузовойСостав.ТекущиеДанные;
	Если ТекСтрока <> Неопределено
		И ТекСтрока.ВидУпаковки = Неопределено Тогда 
		ТекСтрока.ВидУпаковки = ПредопределенноеЗначение("Справочник.уатВидыУпаковки_уэ.ПустаяСсылка"); 
	КонецЕсли;
	РассчитатьПоказателиСервер(Ложь);
	ОбновитьВалютуВТЧГрузовТоваровСервер();
	ОбновитьПараметрВыработкиВременныйОказ();
	ОбновитьПараметрВыработкиВременныйПолуч();
	ОбновитьНадписьИтоги();
	УстановитьПредставленияОтрезковПути();
	ЗаполнитьРеквизитыГрузовыхМест();
КонецПроцедуры

&НаКлиенте
Процедура ГрузовойСоставВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.ГрузовойСоставСтатус Тогда 
		СтандартнаяОбработка = Ложь;
		ТекДанные = Элементы.ГрузовойСостав.ТекущиеДанные;
		Если ТекДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		Если ТолькоПросмотр Тогда 
			Возврат;
		КонецЕсли;
		УстановитьНовыйСтатус(ТекДанные.ГрузовоеМесто);
	ИначеЕсли Элемент.ТекущиеДанные.УникальноеГрузовоеМесто
		И (Поле = Элементы.ГрузовойСоставКоличествоМест
			ИЛИ Поле = Элементы.ГрузовойСоставШирина
			ИЛИ Поле = Элементы.ГрузовойСоставВысота
			ИЛИ Поле = Элементы.ГрузовойСоставДлина
			ИЛИ Поле = Элементы.ГрузовойСоставОбъем
			ИЛИ Поле = Элементы.ГрузовойСоставВесБрутто) Тогда
		СтандартнаяОбработка = Ложь;
		ТекстНСТР = НСтр("ru = 'Запрещено менять весо-объемные характеристики уникального грузового места/контейнера.
                          |Внесите изменения в грузовое место/контейнер и нажмите кнопку ""Обновить грузовые параметры"".'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);	
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузовойСоставПередНачаломИзменения(Элемент, Отказ)
	Если Элемент.ТекущиеДанные.УникальноеГрузовоеМесто
		И (Элемент.ТекущийЭлемент = Элементы.ГрузовойСоставКоличествоМест
			ИЛИ Элемент.ТекущийЭлемент = Элементы.ГрузовойСоставШирина
			ИЛИ Элемент.ТекущийЭлемент = Элементы.ГрузовойСоставВысота
			ИЛИ Элемент.ТекущийЭлемент = Элементы.ГрузовойСоставДлина
			ИЛИ Элемент.ТекущийЭлемент = Элементы.ГрузовойСоставОбъем
			ИЛИ Элемент.ТекущийЭлемент = Элементы.ГрузовойСоставВесБрутто) Тогда
		Отказ = Истина;
		ТекстНСТР = НСтр("ru = 'Запрещено менять весо-объемные характеристики уникального грузового места/контейнера.
                          |Внесите изменения в грузовое место/контейнер и нажмите кнопку ""Обновить грузовые параметры"".'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГрузовойСоставГрузовоеМестоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекСтрока = Элементы.ГрузовойСостав.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("РежимВыбора,НачальноеЗначениеВыбора",
		Истина, ТекСтрока.ГрузовоеМесто);
	
	Если Объект.Мультимодальный И Объект.ЭтоЭтап И ЗначениеЗаполнено(Объект.РодительскийЗаказ) Тогда
		ПараметрыФормы.Вставить("СписокГрузовыхМест", ПолучитьСписокГрузовыхМестРодительскогоЗаказа(Объект.РодительскийЗаказ, "ГрузовойСостав"));
	КонецЕсли;
		
	ОткрытьФорму("Справочник.уатГрузовыеМеста_уэ.ФормаВыбора", ПараметрыФормы, Элемент);

	
КонецПроцедуры

&НаКлиенте
Процедура ГрузовойСоставГрузовоеМестоАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Объект.Мультимодальный
		И Объект.ЭтоЭтап 
		И ЗначениеЗаполнено(Объект.РодительскийЗаказ) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ПолучитьСписокГрузовыхМестРодительскогоЗаказаДляАвтоподбора(Объект.РодительскийЗаказ, "ГрузовойСостав", Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьГрузовойСоставПоТоварному(Команда)
	
	мКоличТоваров = 0;
	СтруктураГрузовоеМесто = Новый Структура("ВесБрутто, КоличествоМест, Объем", 0,0,0);
	Для Каждого ТекСтрока Из Объект.Товары Цикл
		Если ЗначениеЗаполнено(ТекСтрока.ГрузовоеМесто) Тогда
			Продолжить;
		КонецЕсли;
		
		СтруктураГрузовоеМесто.ВесБрутто = СтруктураГрузовоеМесто.ВесБрутто + ТекСтрока.ВесБрутто;
		СтруктураГрузовоеМесто.КоличествоМест = СтруктураГрузовоеМесто.КоличествоМест + ТекСтрока.КоличествоМест;
		СтруктураГрузовоеМесто.Объем = СтруктураГрузовоеМесто.Объем + ТекСтрока.Объем;
		
		мКоличТоваров = мКоличТоваров + 1;
	КонецЦикла;
	
	Если мКоличТоваров > 0 Тогда
		НовыйГруз = Объект.ГрузовойСостав.Добавить();
		ЗаполнитьЗначенияСвойств(НовыйГруз, СтруктураГрузовоеМесто);
		
		НовыйГруз.ВидУпаковки = ПолучитьОсновнойВидУпаковки();
		
		РассчитатьСуммуДокумента();
		ОбновитьВалютуВТЧГрузовТоваровСервер();
		Модифицированность = Истина;
	Иначе
		ТекстНСТР = НСтр("en='In tabular section ""Commodity composition"" no rows with empty cargo place!';ru='В табличной части ""Товарный состав"" нет строк с незаполненным грузовым местом!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
	КонецЕсли;
	
	РассчитатьПоказателиСервер(Ложь);
	ОбновитьВалютуВТЧГрузовТоваровСервер();
	ОбновитьПараметрВыработкиВременныйОказ();
	ОбновитьПараметрВыработкиВременныйПолуч();
	ОбновитьНадписьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьГрузовойСоставПоЭТрН(Команда)

	Если Объект.ГрузовойСостав.Количество() Тогда 
		ТекстНСТР = НСтр("en='Clear the table ""Cargos"" before filling?';ru='Очистить таблицу ""Грузовые места"" перед заполнением?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьГрузовойСоставПоЭТрНОтвет", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстНСТР, РежимДиалогаВопрос.ДаНетОтмена);
	Иначе 
		ЗаполнитьГрузовойСоставПоЭТрНЗаполнение(); 
		
		РассчитатьПоказателиСервер(Ложь);
		ОбновитьВалютуВТЧГрузовТоваровСервер();
		ОбновитьПараметрВыработкиВременныйОказ();
		ОбновитьПараметрВыработкиВременныйПолуч();
		ОбновитьНадписьИтоги();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьГрузовыеПараметры(Команда)
	Для Каждого ТекСтрока Из Объект.ГрузовойСостав Цикл
		ГрузовоеМестоСтруктура = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначенияРеквизитов(ТекСтрока.ГрузовоеМесто,
		"ВидУпаковки, ВесБрутто, КоличествоМест,
		|Объем, Длина, Ширина, Высота, Стоимость,
		|Валюта, СуммаВключаетНДС, УчитыватьНДС,
		|ОписаниеГруза,УникальноеГрузовоеМесто,ТипКонтейнера,Контейнер");
		
		ЗаполнитьЗначенияСвойств(ТекСтрока, ГрузовоеМестоСтруктура,
		"ВесБрутто, КоличествоМест,
		|Объем, Длина, Ширина, Высота, Стоимость,
		|ОписаниеГруза, УникальноеГрузовоеМесто");
		
		Если НЕ ЗначениеЗаполнено(ТекСтрока.ГрузовоеМесто) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ГрузовоеМестоСтруктура.Контейнер Тогда
			ТекСтрока.ВидУпаковки = ГрузовоеМестоСтруктура.ТипКонтейнера;
		Иначе
			ТекСтрока.ВидУпаковки = ГрузовоеМестоСтруктура.ВидУпаковки;
		КонецЕсли;
	КонецЦикла;
	ГрузовойСоставПриИзменении(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьГрузовыеПараметрыВСтроке(Команда)
	ТекСтрока = Элементы.ГрузовойСостав.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ГрузовойСоставГрузовоеМестоПриИзменении(Неопределено);
	ГрузовойСоставПриИзменении(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьГрузовойСостав(Команда)
	Если Объект.ГрузовойСостав.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстНСТР = НСтр("en='Clear freight train?';ru='Очистить грузовой состав?'");
	ПоказатьВопрос(Новый ОписаниеОповещения("ОчиститьГрузовойСоставОтвет", ЭтотОбъект), ТекстНСТР, РежимДиалогаВопрос.ОКОтмена);
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьГрузовойСоставОтвет(Результат, ДопПараметры) Экспорт
	
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Объект.ГрузовойСостав.Очистить();
	КонецЕсли;
	
	РассчитатьПоказателиСервер(Ложь);
	ОбновитьВалютуВТЧГрузовТоваровСервер();
	ОбновитьПараметрВыработкиВременныйОказ();
	ОбновитьПараметрВыработкиВременныйПолуч();
	ОбновитьНадписьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаСозданияГрузовогоМеста(ГрузМесто, УдалитьСтрокуПосле, ТоварныйСоставДанныеФормы)
	
	Если УдалитьСтрокуПосле Тогда
		ТекСтрока = Элементы.ГрузовойСостав.ТекущиеДанные;
		Если ТекСтрока = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Объект.ГрузовойСостав.Удалить(ТекСтрока);
	КонецЕсли;
	
	Если Не (ТипЗнч(мКоличествоГрузовыхМестДляЦикла) = Тип("Число") И мКоличествоГрузовыхМестДляЦикла > 1) Тогда
		мКоличествоГрузовыхМестДляЦикла = 1;	
	КонецЕсли;
	
	мсвДопГрузовыеМеста = СформироватьДополнительныеГрузовыеМеста(ГрузМесто, мКоличествоГрузовыхМестДляЦикла - 1);
	
	Сч = 0;
	Пока мКоличествоГрузовыхМестДляЦикла > 0 Цикл
		НовСтрока = Объект.ГрузовойСостав.Добавить();
		
		Сч = Сч + 1;
		Если Сч = 1 Тогда
			НовСтрока.ГрузовоеМесто = ГрузМесто;
		Иначе
			// Второе и последующие грузовые места создаем программно добавлением к наименованию доп. индекса
			НовСтрока.ГрузовоеМесто = мсвДопГрузовыеМеста[Сч-2];
		КонецЕсли;
		
		ГрузовоеМестоСтруктура = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначенияРеквизитов(НовСтрока.ГрузовоеМесто,
			"ВидУпаковки, ВесБрутто, КоличествоМест, Объем, Длина, Ширина, Высота, Стоимость, Валюта, СуммаВключаетНДС, УчитыватьНДС, ОписаниеГруза");
		
		ЗаполнитьЗначенияСвойств(НовСтрока, ГрузовоеМестоСтруктура, "ВидУпаковки, ВесБрутто, КоличествоМест, Объем, Длина, Ширина, Высота, Стоимость, ОписаниеГруза");
		
		// пересчет стоимости грузового места в валюту товаров
		ПересчитатьСуммуИзОднойВалютыВДругую(НовСтрока.Стоимость, ГрузовоеМестоСтруктура.Валюта, Объект.ВалютаТоваров, Объект.Дата);
		
		НайдСтроки = Объект.Товары.НайтиСтроки(Новый Структура);
		Для Каждого ТекСтрокаТовар Из НайдСтроки Цикл
			Если ЗначениеЗаполнено(ТекСтрокаТовар.ГрузовоеМесто) Тогда
				Продолжить;
			КонецЕсли;
			Объект.Товары.Удалить(ТекСтрокаТовар);
		КонецЦикла;
		
		Для Каждого ТекСоставГрузМеста Из ТоварныйСоставДанныеФормы Цикл
			НовыйТовар = Объект.Товары.Добавить();
			НовыйТовар.ГрузовоеМесто = НовСтрока.ГрузовоеМесто;
			НовыйТовар.Номенклатура = ТекСоставГрузМеста.Номенклатура;
			НовыйТовар.ЕдиницаИзмерения = ТекСоставГрузМеста.ЕдиницаИзмерения;
			НовыйТовар.Количество = ТекСоставГрузМеста.Количество;
			НовыйТовар.СтавкаНДС = ТекСоставГрузМеста.СтавкаНДС;
			НовыйТовар.ЕдиницаИзмерения = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(НовыйТовар.Номенклатура,
				"ЕдиницаХраненияОстатков");
			
			ВесОбъем = уатОбщегоНазначения.ПолучитьВесОбъемНоменклатуры(НовыйТовар.Номенклатура, НовыйТовар.ЕдиницаИзмерения, НовыйТовар.Количество);
			НовыйТовар.ВесБрутто      = ВесОбъем.Вес;
			НовыйТовар.Объем          = ВесОбъем.Объем;
			НовыйТовар.КоличествоМест = ВесОбъем.КоличествоМест;
			
		КонецЦикла;
		
		мКоличествоГрузовыхМестДляЦикла = мКоличествоГрузовыхМестДляЦикла - 1;
	КонецЦикла;
	
	РассчитатьСуммуДокумента();
	мКоличествоГрузовыхМестДляЦикла = 1;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьДополнительныеГрузовыеМеста(ГрузМесто, КоличДопМест)
	Рез = Новый Массив;
	
	Для Сч = 1 По КоличДопМест Цикл
		НовоеГрузМесто = ГрузМесто.Скопировать();
		НовоеГрузМесто.Наименование = ГрузМесто.Наименование + (Сч + 1);
		НовоеГрузМесто.Записать();
		Рез.Добавить(НовоеГрузМесто.Ссылка);
	КонецЦикла;
	
	Возврат Рез;
КонецФункции

&НаКлиенте
Процедура ГрузовойСоставГрузовоеМестоПриИзменении(Элемент)
	ТекДанные = Элементы.ГрузовойСостав.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекДанные.ГрузовоеМесто) Тогда
		ГрузовоеМестоСтруктура = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначенияРеквизитов(ТекДанные.ГрузовоеМесто,
		"ВидУпаковки, ВесБрутто, КоличествоМест,
		|Объем, Длина, Ширина, Высота, Стоимость,
		|Валюта, СуммаВключаетНДС, УчитыватьНДС,
		|ОписаниеГруза,УникальноеГрузовоеМесто,ТипКонтейнера,Контейнер");
		
		ЗаполнитьЗначенияСвойств(ТекДанные, ГрузовоеМестоСтруктура,
		"ВесБрутто, КоличествоМест,
		|Объем, Длина, Ширина, Высота, Стоимость,
		|ОписаниеГруза, УникальноеГрузовоеМесто");
		Если ГрузовоеМестоСтруктура.Контейнер Тогда
			ТекДанные.ВидУпаковки = ГрузовоеМестоСтруктура.ТипКонтейнера;
		Иначе
			ТекДанные.ВидУпаковки = ГрузовоеМестоСтруктура.ВидУпаковки;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РазбитьНаГрузовыеМеста(Команда)
	
	УдалитьСтрокуПосле = Истина;
	ТекСтрока = Элементы.ГрузовойСостав.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		УдалитьСтрокуПосле = Ложь;
	Иначе	
		Если ЗначениеЗаполнено(ТекСтрока.ГрузовоеМесто) Тогда
			УдалитьСтрокуПосле = Ложь;
		КонецЕсли;
	КонецЕсли;

		
	Если НЕ УдалитьСтрокуПосле Тогда
		ТекСтрока = Новый Структура("ВесБрутто, КоличествоМест, Объем, ВидУпаковки, ОписаниеГруза, Стоимость, Длина, Ширина, Высота",
			0, 0, 0, ПредопределенноеЗначение("Справочник.уатВидыУпаковки_уэ.ПустаяСсылка"), "", 0, 0, 0, 0);
	КонецЕсли;
	
	мсвТоварныйСостав = Новый Массив;
	Для Каждого ТекСтрокаТовар Из Объект.Товары Цикл
		Если ЗначениеЗаполнено(ТекСтрокаТовар.ГрузовоеМесто) Тогда
			Продолжить;
		КонецЕсли; 
		
		СтруктураСтроки = Новый Структура("Номенклатура, ЕдиницаИзмерения, Количество, Цена, Сумма, СтавкаНДС, СуммаНДС");
		ЗаполнитьЗначенияСвойств(СтруктураСтроки, ТекСтрокаТовар);
		
		мсвТоварныйСостав.Добавить(СтруктураСтроки);
		
	КонецЦикла;
	
	Если мсвТоварныйСостав.Количество() = 0 Тогда
		ТекстНСТР = НСтр("en='Not detected lines with empty cargo space to split the packages!';ru='Не обнаружено строк с незаполненным грузовым местом для разбиения грузовых мест!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещенияПриЗаполненииДатДействия = Новый ОписаниеОповещения("ОбработкаРазбитьНаГрузовыеМеста", ЭтотОбъект,
		Новый Структура("мсвТоварныйСостав, ТекСтрока, УдалитьСтрокуПосле", мсвТоварныйСостав, ТекСтрока, УдалитьСтрокуПосле));
		
	ТекстНСТР = НСтр("en='Enter number of cargo places';ru='Введите количество грузовых мест'");
	ПоказатьВводЧисла(ОписаниеОповещенияПриЗаполненииДатДействия, 1, ТекстНСТР,, 0);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаРазбитьНаГрузовыеМеста(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Число") И Результат > 0 Тогда
		
		КоличествоГрузовыхМест = Результат;
		мсвТоварныйСостав = ДополнительныеПараметры.мсвТоварныйСостав;
		ТекСтрока = ДополнительныеПараметры.ТекСтрока;
		УдалитьСтрокуПосле = ДополнительныеПараметры.УдалитьСтрокуПосле;
		
		Если Результат > 1 Тогда
			// Разделим пропорционально необходимые показатели
			
			ТекСтрока.ВесБрутто = ТекСтрока.ВесБрутто 	/ Результат; 
			ТекСтрока.Объем 	= ТекСтрока.Объем 		/ Результат;
			ТекСтрока.Стоимость = ТекСтрока.Стоимость 	/ Результат;
			ТекСтрока.КоличествоМест = Цел(ТекСтрока.КоличествоМест / Результат);
			
			Если ТекСтрока.КоличествоМест = 0 Тогда
				ТекСтрока.КоличествоМест = 1;
			КонецЕсли;
						
			Для Каждого ТекТовар Из мсвТоварныйСостав Цикл
				ТекТовар.Количество = ТекТовар.Количество 	/ Результат; 
			КонецЦикла;
			
		КонецЕсли;	
		
		мКоличествоГрузовыхМестДляЦикла = Результат;
		
		ПараметрыФормы = Новый Структура("ТоварныйСостав, ВесБрутто, КоличествоМест, Объем, УчитыватьНДС, СуммаВключаетНДС, Валюта, ВидУпаковки, ОписаниеГруза, Стоимость, Длина, Ширина, Высота",
		мсвТоварныйСостав, ТекСтрока.ВесБрутто, ТекСтрока.КоличествоМест, ТекСтрока.Объем,
		Объект.УчитыватьНДС, Объект.СуммаВключаетНДС, Объект.ВалютаТоваров, ТекСтрока.ВидУпаковки, ТекСтрока.ОписаниеГруза, ТекСтрока.Стоимость, ТекСтрока.Длина, ТекСтрока.Ширина, ТекСтрока.Высота);
		ПараметрыФормы.Вставить("СозданиеГрузовогоМестаИзЗаказа", Истина);
		ПараметрыФормы.Вставить("УдалитьСтрокуПосле", УдалитьСтрокуПосле);
		
		ОткрытьФорму("Справочник.уатГрузовыеМеста_уэ.ФормаОбъекта", ПараметрыФормы);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПересчитатьСуммуИзОднойВалютыВДругую(ТекСумма, Знач ВалютаНач, Знач ВалютаКон, Знач ДатаПересчета)
	Если ТекСумма = 0 ИЛИ ВалютаНач = ВалютаКон Тогда
		Возврат;
	КонецЕсли;
	
	ТекСумма = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСумма, ВалютаНач, ВалютаКон, ДатаПересчета, ДатаПересчета);
КонецПроцедуры

&НаКлиенте
Процедура ГрузовойСоставКоличествоМестПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ГрузовойСостав.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ГрузовоеМесто) Тогда 
		Возврат;
	КонецЕсли;
	
	ХарактеристикиГрузовогоМеста = ПолучитьХарактеристикиГрузовогоМеста(ТекущиеДанные.ГрузовоеМесто);
	
	КоэфПересчета = ?(ХарактеристикиГрузовогоМеста.КоличествоМест = 0, 0, ТекущиеДанные.КоличествоМест / ХарактеристикиГрузовогоМеста.КоличествоМест);
	ТекущиеДанные.ВесБрутто = ХарактеристикиГрузовогоМеста.ВесБрутто * КоэфПересчета;
	ТекущиеДанные.Объем     = ХарактеристикиГрузовогоМеста.Объем * КоэфПересчета;
	ТекущиеДанные.Стоимость = ХарактеристикиГрузовогоМеста.Стоимость * КоэфПересчета;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузовойСоставОтрезокПутиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Объект.ДетализацияЗакрытия = ПредопределенноеЗначение("Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам")
		Или Объект.ДетализацияЗакрытия = ПредопределенноеЗначение("Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам") Тогда
		ОбработатьИзменениеОтрезкаПути(Элементы.ГрузовойСостав, ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузовойСоставОтрезокПутиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Не ЗначениеЗаполнено(Элементы.ГрузовойСоставОтрезокПути.СписокВыбора) Тогда
		ТекстНСТР = НСтр("en='No applicable route segments found. Maybe destination points are not added, or operations in them not specified.';
			|ru='Нет подходящих отрезков пути. Возможно, не добавлены пункты назначения или не заполнены операции в пунктах.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		Возврат;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыТоварныйСостав

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	РассчитатьПоказателиСервер(Ложь);
	ОбновитьВалютуВТЧГрузовТоваровСервер();
	ОбновитьПараметрВыработкиВременныйОказ();
	ОбновитьПараметрВыработкиВременныйПолуч();
	ОбновитьНадписьИтоги();
	ОбновитьВсегоВТЧТовары();
	УстановитьПредставленияОтрезковПути();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыГрузовоеМестоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекСтрока = Элементы.Товары.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("РежимВыбора, НачальноеЗначениеВыбора", Истина, ТекСтрока.ГрузовоеМесто);
	
	ФормаВыбора = ПолучитьФорму("Справочник.уатГрузовыеМеста_уэ.ФормаВыбора", ПараметрыФормы, Элемент);
	
	Если Объект.Мультимодальный И Объект.ЭтоЭтап И ЗначениеЗаполнено(Объект.РодительскийЗаказ) Тогда 
		ЭлементОтбора = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("Ссылка");
		ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.ВСписке;
		ЭлементОтбора.ПравоеЗначение   = ПолучитьСписокГрузовыхМестРодительскогоЗаказа(Объект.РодительскийЗаказ, "Товары");
		ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		ЭлементОтбора.Использование    = Истина;
	КонецЕсли;
	
	ФормаВыбора.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыГрузовоеМестоАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Объект.Мультимодальный И Объект.ЭтоЭтап И ЗначениеЗаполнено(Объект.РодительскийЗаказ) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ПолучитьСписокГрузовыхМестРодительскогоЗаказаДляАвтоподбора(Объект.РодительскийЗаказ, "Товары", Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекСтрока = Элементы.Товары.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("РежимВыбора, НачальноеЗначениеВыбора", Истина, ТекСтрока.Номенклатура);
	
	ФормаВыбора = ПолучитьФорму("РегистрСведений.уатНоменклатураГрузов.Форма.ФормаВыбора", ПараметрыФормы, Элемент);
	
	Если Объект.Мультимодальный И Объект.ЭтоЭтап И ЗначениеЗаполнено(Объект.РодительскийЗаказ) Тогда 
		ЭлементОтбора = ФормаВыбора.Номенклатура.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("Ссылка");
		ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.ВСписке;
		ЭлементОтбора.ПравоеЗначение   = ПолучитьСписокТоваровРодительскогоЗаказа(Объект.РодительскийЗаказ);
		ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		ЭлементОтбора.Использование    = Истина;
	КонецЕсли;
	
	ФормаВыбора.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Объект.Мультимодальный И Объект.ЭтоЭтап И ЗначениеЗаполнено(Объект.РодительскийЗаказ) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ПолучитьСписокТоваровРодительскогоЗаказаДляАвтоподбора(Объект.РодительскийЗаказ, Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТоварныйСоставПоГрузовому(Команда)
	
	Если Объект.ГрузовойСостав.Количество() = 0 Тогда
		ТекстНСТР = НСтр("en='In tabular section ""Freight train"" no lines!';ru='В табличной части ""Грузовой состав"" нет строк!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		Возврат;
	КонецЕсли;
	
	Если Объект.Товары.Количество() > 0 Тогда
		ТекстНСТР = НСтр("en='Do you want to clear the table before filling?';ru='Очистить таблицу перед заполнением?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьТоварныйСоставЗавершение", ЭтотОбъект,),
			ТекстНСТР, РежимДиалогаВопрос.ДаНетОтмена,, КодВозвратаДиалога.Нет);
	Иначе	
		ЗаполнитьТоварныйСоставПоГрузовомуСервер();
		РассчитатьСуммуДокумента();
		ОбновитьВалютуВТЧГрузовТоваровСервер();
		Модифицированность = Истина;
	КонецЕсли;
	
	РассчитатьПоказателиСервер(Ложь);
	ОбновитьВалютуВТЧГрузовТоваровСервер();
	ОбновитьПараметрВыработкиВременныйОказ();
	ОбновитьПараметрВыработкиВременныйПолуч();
	ОбновитьНадписьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТоварныйСостав(Команда)
	Если Объект.Товары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстНСТР = НСтр("en='Clear commodity composition?';ru='Очистить товарный состав?'");
	ПоказатьВопрос(Новый ОписаниеОповещения("ОчиститьТоварныйСоставОтвет", ЭтотОбъект),
		ТекстНСТР, РежимДиалогаВопрос.ОКОтмена);
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТоварныйСоставОтвет(Результат, ДопПараметры) Экспорт
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Объект.Товары.Очистить();
		Модифицированность = Истина;
	КонецЕсли;
	
	РассчитатьПоказателиСервер(Ложь);
	ОбновитьВалютуВТЧГрузовТоваровСервер();
	ОбновитьПараметрВыработкиВременныйОказ();
	ОбновитьПараметрВыработкиВременныйПолуч();
	ОбновитьНадписьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТоварныйСоставЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
	Ответ = РезультатВопроса;
	
	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
		Объект.Товары.Очистить();		
	КонецЕсли;
	
	ЗаполнитьТоварныйСоставПоГрузовомуСервер();
	
	РассчитатьСуммуДокумента();
	Модифицированность = Истина;
		
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТоварныйСоставПоГрузовомуСервер()
	
	мсвДобавленныеГрузМеста = Новый Соответствие;
	Для Каждого ТекСтрока Из Объект.ГрузовойСостав Цикл
		Если мсвДобавленныеГрузМеста.Получить(ТекСтрока.ГрузовоеМесто) = Неопределено Тогда
			// Новое грузовое место
			мсвДобавленныеГрузМеста.Вставить(ТекСтрока.ГрузовоеМесто, 1);
		Иначе
			// Прибавим количество
			мсвДобавленныеГрузМеста[ТекСтрока.ГрузовоеМесто] = мсвДобавленныеГрузМеста[ТекСтрока.ГрузовоеМесто] + 1;	
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекСтрока Из мсвДобавленныеГрузМеста Цикл
		ГрМесто = ТекСтрока.Ключ;
		КоличествоДублей = ТекСтрока.Значение;
		
		Для Каждого ТекСоставГрузМеста Из ГрМесто.ТоварныйСостав Цикл
			НовыйТовар = Объект.Товары.Добавить();
			НовыйТовар.ГрузовоеМесто = ГрМесто;
			НовыйТовар.Номенклатура = ТекСоставГрузМеста.Номенклатура;
			НовыйТовар.ЕдиницаИзмерения = ТекСоставГрузМеста.ЕдиницаИзмерения;
			НовыйТовар.Количество = ТекСоставГрузМеста.Количество * КоличествоДублей;
			НовыйТовар.ЕдиницаИзмерения = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(НовыйТовар.Номенклатура,
				"ЕдиницаХраненияОстатков");
			
			ВесОбъем = уатОбщегоНазначения.ПолучитьВесОбъемНоменклатуры(НовыйТовар.Номенклатура, НовыйТовар.ЕдиницаИзмерения, НовыйТовар.Количество);
			НовыйТовар.ВесБрутто      = ВесОбъем.Вес;
			НовыйТовар.Объем          = ВесОбъем.Объем;
			НовыйТовар.КоличествоМест = ВесОбъем.КоличествоМест;
			
			Если Объект.УчитыватьНДС Тогда
				НовыйТовар.СтавкаНДС = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(
					НовыйТовар.Номенклатура, "СтавкаНДС");
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И Копирование = Ложь Тогда
		ТекДанные = Элементы.Товары.ТекущиеДанные;
		ТекДанные.КоличествоМест = 1;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	ОбновитьВсегоВТЧТовары();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекДанные = Элементы.Товары.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекДанные.Номенклатура) тогда
		ТекДанные.ЕдиницаИзмерения = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(
				ТекДанные.Номенклатура,
				"ЕдиницаХраненияОстатков"
			);
		
		ВесОбъем = уатОбщегоНазначения.ПолучитьВесОбъемНоменклатуры(ТекДанные.Номенклатура, ТекДанные.ЕдиницаИзмерения, ТекДанные.Количество);
		ТекДанные.ВесБрутто      = ВесОбъем.Вес;
		ТекДанные.Объем          = ВесОбъем.Объем;
		ТекДанные.КоличествоМест = ВесОбъем.КоличествоМест;
		
		Если Объект.УчитыватьНДС Тогда
			ТекДанные.СтавкаНДС = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекДанные.Номенклатура, "СтавкаНДС");
		Иначе 
			ТекДанные.СтавкаНДС = Неопределено;
		КонецЕсли;
				
		СтруктураЦенаВалюта = уатОбщегоНазначения.уатНайтиЦенуНоменклатуры(Объект.Дата, ТекДанные.Номенклатура, Объект.Контрагент, Ложь);
		Если ЗначениеЗаполнено(СтруктураЦенаВалюта.Цена) Тогда
			мЦена = СтруктураЦенаВалюта.Цена;
			ТекДанные.Цена = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(мЦена,
				СтруктураЦенаВалюта.Валюта, Объект.ВалютаТоваров,
				Объект.Дата, Объект.Дата);
			ТоварыЦенаПриИзменении(Неопределено);
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатОбщегоНазначенияКлиент.ТЧТоварыЕдиницаИзмеренияНачалоВыбора(Элементы.Товары.ТекущиеДанные.Номенклатура, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	
	ТекДанные = Элементы.Товары.ТекущиеДанные;
	
	ВесОбъем = уатОбщегоНазначения.ПолучитьВесОбъемНоменклатуры(ТекДанные.Номенклатура, ТекДанные.ЕдиницаИзмерения, ТекДанные.Количество);
	ТекДанные.ВесБрутто      = ВесОбъем.Вес;
	ТекДанные.Объем          = ВесОбъем.Объем;
	ТекДанные.КоличествоМест = ВесОбъем.КоличествоМест;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	ТекДанные = Элементы.Товары.ТекущиеДанные;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(ТекДанные, "Факт");
	
	ВесОбъем = уатОбщегоНазначения.ПолучитьВесОбъемНоменклатуры(ТекДанные.Номенклатура, ТекДанные.ЕдиницаИзмерения, ТекДанные.Количество);
	ТекДанные.ВесБрутто      = ВесОбъем.Вес;
	ТекДанные.Объем          = ВесОбъем.Объем;
	ТекДанные.КоличествоМест = ВесОбъем.КоличествоМест;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	РассчитатьСуммуВСтрокеТабличнойЧасти(Элементы.Товары.ТекущиеДанные, "Факт");
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти, "Факт");
	РассчитатьСуммуВсегоВстрокеТЧ(СтрокаТабличнойЧасти, "Факт");
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	РассчитатьСуммуВсегоВстрокеТЧ(СтрокаТабличнойЧасти, "Факт");
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	РассчитатьСуммуНДС(Элементы.Товары.ТекущиеДанные, "Факт");
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОбновитьВсегоВТЧТовары();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыОтрезокПутиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если Объект.ДетализацияЗакрытия = ПредопределенноеЗначение("Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам") Тогда
		ОбработатьИзменениеОтрезкаПути(Элементы.Товары, ВыбранноеЗначение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыОтрезокПутиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Не ЗначениеЗаполнено(Элементы.ТоварыОтрезокПути.СписокВыбора) Тогда
		ТекстНСТР = НСтр("en='No applicable route segments found. Maybe destination points are not added, or operations in them not specified.';
			|ru='Нет подходящих отрезков пути. Возможно, не добавлены пункты назначения или не заполнены операции в пунктах.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		Возврат;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыУслуги

&НаКлиенте
Процедура ВариантРасчетаДоходовИРасходовПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьОказываемыеУслуги(Команда)
	Если Модифицированность Тогда
		ТекстНСТР = НСтр("en='To perform this operation it is necessary to record the document. Continue?';ru='Для выполнения данной операции необходимо записать документ. Продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("РассчитатьОказываемыеУслугиЗаписать", ЭтотОбъект, Новый Структура("План", Ложь)),
			ТекстНСТР, РежимДиалогаВопрос.ОКОтмена,, КодВозвратаДиалога.ОК);
		Возврат;
	КонецЕсли;
	
	РассчитатьОказываемыеУслугиДействия();
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьОказываемыеУслугиЗаписать(Результат, ДопПараметры) Экспорт
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Записать(Новый Структура("НеПересчитыватьИтоги", Истина));
	Исключение
		Возврат;
	КонецПопытки;
	
	РассчитатьОказываемыеУслугиДействия(ДопПараметры.План);
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьОказываемыеУслугиДействия(флПлан = Ложь)
	
	АвторизованныйПользователь = ПользователиКлиентСервер.АвторизованныйПользователь();
	Если Объект.Услуги.Количество() > 0 И ТипЗнч(АвторизованныйПользователь) <> Тип("СправочникСсылка.ВнешниеПользователи") Тогда
		флЕстьРучнойВвод = (Объект.Услуги.НайтиСтроки(Новый Структура("РучнойВвод", Истина)).Количество()>0);
		Если ИспользоватьПлановыеУслуги Тогда
			Если флПлан Тогда
				ТекстАнгл = "Routine data table portion will be cleared! Continue?";
				ТекстРус = "Плановые данные табличной части будут очищены! Продолжить?";
			Иначе
				ТекстАнгл = "The actual data of tabular section will be cleared! Continue?";
				ТекстРус = "Фактические данные табличной части будут очищены! Продолжить?";
			КонецЕсли;
		Иначе
			ТекстАнгл = "Tabular section will be cleared! Continue?";
			ТекстРус = "Табличная часть будет очищена! Продолжить?";
		КонецЕсли;
		
		Если флЕстьРучнойВвод Тогда
			ТекстАнгл = ТекстАнгл + "
				|Yes - save manual input data, No - clear manual input data.";
			ТекстРус = ТекстРус + "
				|Да - сохранить строки с ручным вводом, Нет - удалить строки с ручным вводом.";
			РежимДиалога = РежимДиалогаВопрос.ДаНетОтмена;
		Иначе
			РежимДиалога = РежимДиалогаВопрос.ОКОтмена;
		КонецЕсли;
		
		ТекстНСТР = НСтр("en='" + ТекстАнгл + "'; ru='" + ТекстРус + "'");
		ПоказатьВопрос(Новый ОписаниеОповещения("РассчитатьОказываемыеУслугиОтвет", ЭтотОбъект, Новый Структура("План", флПлан)), ТекстНСТР, РежимДиалога);
	Иначе
		РассчитатьОказываемыеУслугиЗавершение(флПлан);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьОказываемыеУслугиОтвет(Результат, ДопПараметры) Экспорт
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	флУдалитьРучнойВвод = (Результат = КодВозвратаДиалога.Нет);
	
	РассчитатьОказываемыеУслугиЗавершение(ДопПараметры.План,, флУдалитьРучнойВвод);
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьОказываемыеУслугиЗавершение(флПлан = Ложь, флСообщение = Ложь, флУдалитьРучнойВвод = Ложь)
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "ЗаказНаТС.РасчетДоходов");
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
	Если флУдалитьРучнойВвод Тогда
		мсвСтрокиУдалить = Объект.Услуги.НайтиСтроки(Новый Структура("РучнойВвод", Истина));
		Для Каждого ТекСтрокаУдалить Из мсвСтрокиУдалить Цикл
			Объект.Услуги.Удалить(ТекСтрокаУдалить);
		КонецЦикла;
	КонецЕсли;
	
	ДопПараметры = Новый Структура("ЗаполнятьТЧДоходы, ЗаполнятьТЧРасходы", Ложь, Ложь);
	СтруктураДокумента = уатОбщегоНазначенияКлиентСервер.СтруктураДокумента(Объект, "уатЗаказГрузоотправителя", ДопПараметры);
	РассчитатьУслугиСервер(СтруктураДокумента, "Услуги", флПлан);
	уатРасчетыПоТарифамКлиентСервер_уэ.ЗаполнитьДоходыРасходыИзСтруктуры(Объект, СтруктураДокумента, "Услуги", "уатЗаказГрузоотправителя", флПлан, флСообщение);
	
	РассчитатьОказываемыеУслугиЗавершениеСервер(флПлан);
	
	РассчитатьСуммуДокумента();
	ОбновитьВсегоВТЧУслуги();
	
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Процедура РассчитатьОказываемыеУслугиЗавершениеСервер(флПлан)
	ОбновитьПараметрВыработкиВременныйОказ();
	ОбновитьПодвалСервер();
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьОказываемыеУслугиПлан(Команда)
	Если Модифицированность Тогда
		ТекстНСТР = НСтр("en='To perform this operation it is necessary to record the document. Continue?';ru='Для выполнения данной операции необходимо записать документ. Продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("РассчитатьОказываемыеУслугиЗаписать", ЭтотОбъект, Новый Структура("План", Истина)),
			ТекстНСТР, РежимДиалогаВопрос.ОКОтмена, , КодВозвратаДиалога.ОК);
		Возврат;
	КонецЕсли;
	
	РассчитатьОказываемыеУслугиДействия(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьФактИзПлана(Команда)
	Если Объект.Услуги.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	ТекстНСТР = НСтр("en='The actual data table will be cleared. To continue the operation?';ru='Фактические данные табличной части будут очищены. Продолжить выполнение операции?'");
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьФактИзПланаОтвет", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстНСТР, РежимДиалогаВопрос.ОКОтмена, 0);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьФактИзПланаОтвет(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.ОК Тогда
		ЗаполнитьФактИзПланаЗавершениеСервер();
		ОбновитьВсегоВТЧУслуги();
		РассчитатьСуммуДокумента();
		ОбновитьПодвалСервер();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФактИзПланаЗавершениеСервер()
	Для Каждого ТекСтрока Из Объект.Услуги Цикл
		ТекСтрока.Количество = ТекСтрока.КоличествоПлан;
		ТекСтрока.Цена = ТекСтрока.ЦенаПлан;
		ТекСтрока.Сумма = ТекСтрока.СуммаПлан;
		ТекСтрока.СуммаНДС = ТекСтрока.СуммаНДСПлан;
		ТекСтрока.Всего = ТекСтрока.ВсегоПлан;
	КонецЦикла;
	
	ОбновитьПараметрВыработкиВременныйОказ();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьФактИзПланаРасходы(Команда)
	Если Объект.Расходы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;	
	
	ТекстНСТР = НСтр("en='The actual data table will be cleared. To continue the operation?';ru='Фактические данные табличной части будут очищены. Продолжить выполнение операции?'");
	Оповещение = Новый ОписаниеОповещения("ЗаполнитьФактИзПланаРасходыОтвет", ЭтотОбъект);
	ПоказатьВопрос(Оповещение, ТекстНСТР, РежимДиалогаВопрос.ОКОтмена, 0);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьФактИзПланаРасходыОтвет(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.ОК Тогда
		ЗаполнитьФактИзПланаРасходыЗавершениеСервер();
		ОбновитьВсегоВТЧПолучаемыеУслуги();
		ОбновитьПодвалПрибыли();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФактИзПланаРасходыЗавершениеСервер()
	Для Каждого ТекСтрока Из Объект.Расходы Цикл
		ТекСтрока.Количество = ТекСтрока.КоличествоПлан;
		ТекСтрока.Цена = ТекСтрока.ЦенаПлан;
		ТекСтрока.Сумма = ТекСтрока.СуммаПлан;
		ТекСтрока.СуммаНДС = ТекСтрока.СуммаНДСПлан;
		ТекСтрока.Всего = ТекСтрока.ВсегоПлан;
	КонецЦикла;
	
	ОбновитьПараметрВыработкиВременныйПолуч();
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОказываемыеУслуги(Команда)
	Если Объект.Услуги.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстНСТР = НСтр("en='Clean provided services?';ru='Очистить оказываемые услуги?'");
	ПоказатьВопрос(Новый ОписаниеОповещения("ОчиститьОказываемыеУслугиОтвет", ЭтотОбъект),
		ТекстНСТР, РежимДиалогаВопрос.ОКОтмена);
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОказываемыеУслугиОтвет(Результат, ДопПараметры) Экспорт
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Объект.Услуги.Очистить();
		РассчитатьСуммуДокумента();
		ОбновитьВсегоВТЧУслуги();
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекСтрока = Элементы.Услуги.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		ТекСтрока.РучнойВвод = Истина;
		
		Если НЕ Копирование Тогда
			ТекСтрока.СтатьяДоходов = ПредопределенноеЗначение("Справочник.уатСтатьиДоходов.ОсновнаяСтатьяДоходов");
			ТекСтрока.Валюта    = Объект.ВалютаДокумента;
			
			Если Объект.УчитыватьНДС Тогда
				ТекСтрока.СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
					ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнаяСтавкаНДС");
			КонецЕсли;
			
			Если Объект.ЭтоШаблонПеревозки Тогда
				ТекСтрока.ВидДокумента = ПредопределенноеЗначение("Перечисление.уатВидыДокументовШаблонаДоходовРасходов_уэ.ЗаказНаТС");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьФорматРедактированияКоличествоВыработкиОказ();
	
	ДанныеСтрокиУслуги = Новый Структура("Валюта", ТекСтрока.Валюта);
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	РассчитатьСуммуДокумента();
	
	ОбновитьПараметрВыработкиВременныйОказ();
	ОбновитьДоходыПоЭтапамСервер();
	ОбновитьВсегоВТЧУслуги();
КонецПроцедуры

&НаКлиенте
Процедура УслугиПослеУдаления(Элемент)
	РассчитатьСуммуДокумента();
	
	ОбновитьПараметрВыработкиВременныйОказ();
	ОбновитьДоходыПоЭтапамСервер();
	ОбновитьВсегоВТЧУслуги();
КонецПроцедуры

&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)
	ТекСтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	Если ТекСтрокаТабличнойЧасти.ПараметрВыработкиВременный Тогда 
		уатЗащищенныеФункцииСервер.КонтрольВводаВремени(ТекСтрокаТабличнойЧасти.КоличествоВыработка);
		ТекСтрокаТабличнойЧасти.Количество = уатОбщегоНазначения.уатВремяВСекунды(ТекСтрокаТабличнойЧасти.КоличествоВыработка)/3600;
	Иначе
		ТекСтрокаТабличнойЧасти.Количество = ТекСтрокаТабличнойЧасти.КоличествоВыработка;
	КонецЕсли;
	
	РассчитатьСуммуСкидки(ТекСтрокаТабличнойЧасти, "Факт");
	РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрокаТабличнойЧасти, "Факт", Истина);
	
	УстановитьФлагРучногоРедактирования(ТекСтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)
	ТекСтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	
	РассчитатьСуммуСкидки(ТекСтрокаТабличнойЧасти, "Факт");
	РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрокаТабличнойЧасти, "Факт", Истина);
	
	УстановитьФлагРучногоРедактирования(ТекСтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаПриИзменении(Элемент)
	ТекСтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	
	Если ТекСтрокаТабличнойЧасти.Количество = 0 Тогда
		ТекСтрокаТабличнойЧасти.Количество = 1;
	КонецЕсли;
	
	Если ТекСтрокаТабличнойЧасти.Цена = 0 Тогда
		ТекСтрокаТабличнойЧасти.Цена = ТекСтрокаТабличнойЧасти.Сумма;
	КонецЕсли;	
	
	Если ТекСтрокаТабличнойЧасти.ПроцентСкидки = 100 И ТекСтрокаТабличнойЧасти.Сумма <> 0 Тогда
		ТекСтрокаТабличнойЧасти.СуммаСкидки = ТекСтрокаТабличнойЧасти.Количество * ТекСтрокаТабличнойЧасти.Цена -
			ТекСтрокаТабличнойЧасти.Сумма;
		ТекСтрокаТабличнойЧасти.ПроцентСкидки = ТекСтрокаТабличнойЧасти.СуммаСкидки /
			(ТекСтрокаТабличнойЧасти.Количество * ТекСтрокаТабличнойЧасти.Цена) * 100;
			
		// Нужно также пересчитать и плановые показатели, т.к. процент скидки относится и к плану, и к факту
		Если ИспользоватьПлановыеУслуги Тогда
			РассчитатьСуммуСкидки(ТекСтрокаТабличнойЧасти, "План");
			РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрокаТабличнойЧасти, "План", Истина);
			РассчитатьСуммуНДС(ТекСтрокаТабличнойЧасти, "План");
			РассчитатьСуммуВсегоВстрокеТЧ(ТекСтрокаТабличнойЧасти, "План");
		КонецЕсли;
	Иначе
		ТекСтрокаТабличнойЧасти.Цена = ТекСтрокаТабличнойЧасти.Сумма / ТекСтрокаТабличнойЧасти.Количество /
			(1 - ТекСтрокаТабличнойЧасти.ПроцентСкидки/100);
		
		РассчитатьСуммуСкидки(ТекСтрокаТабличнойЧасти, "Факт");
	КонецЕсли;
	
	РассчитатьСуммуНДС(ТекСтрокаТабличнойЧасти, "Факт");
	РассчитатьСуммуВсегоВстрокеТЧ(ТекСтрокаТабличнойЧасти, "Факт");
	
	УстановитьФлагРучногоРедактирования(ТекСтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаНДСПриИзменении(Элемент)
	ТекСтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	РассчитатьСуммуВсегоВстрокеТЧ(ТекСтрокаТабличнойЧасти, "Факт");
	
	УстановитьФлагРучногоРедактирования(ТекСтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаНДСПланПриИзменении(Элемент)
	ТекСтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	РассчитатьСуммуВсегоВстрокеТЧ(ТекСтрокаТабличнойЧасти, "План");
	
	УстановитьФлагРучногоРедактирования(ТекСтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура УслугиСтавкаНДСПриИзменении(Элемент)
	ТекСтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	
	РассчитатьСуммуНДС(ТекСтрокаТабличнойЧасти);
	РассчитатьСуммуВсегоВстрокеТЧ(ТекСтрокаТабличнойЧасти);
	
	УстановитьФлагРучногоРедактирования(ТекСтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура УслугиКоличествоПланПриИзменении(Элемент)
	ТекСтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	Если ТекСтрокаТабличнойЧасти.ПараметрВыработкиВременный Тогда 
		уатЗащищенныеФункцииСервер.КонтрольВводаВремени(ТекСтрокаТабличнойЧасти.КоличествоВыработкаПлан);
		ТекСтрокаТабличнойЧасти.КоличествоПлан = уатОбщегоНазначения.уатВремяВСекунды(ТекСтрокаТабличнойЧасти.КоличествоВыработкаПлан)/3600;
	Иначе
		ТекСтрокаТабличнойЧасти.КоличествоПлан = ТекСтрокаТабличнойЧасти.КоличествоВыработкаПлан;
	КонецЕсли;
	
	РассчитатьСуммуСкидки(ТекСтрокаТабличнойЧасти, "План");
	РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрокаТабличнойЧасти, "План", Истина);
	
	УстановитьФлагРучногоРедактирования(ТекСтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаПланПриИзменении(Элемент)
	ТекСтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	
	РассчитатьСуммуСкидки(ТекСтрокаТабличнойЧасти, "План");
	РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрокаТабличнойЧасти, "План", Истина);
	
	УстановитьФлагРучногоРедактирования(ТекСтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаПланПриИзменении(Элемент)
	ТекСтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	
	Если ТекСтрокаТабличнойЧасти.КоличествоПлан = 0 Тогда
		ТекСтрокаТабличнойЧасти.КоличествоПлан = 1;
	КонецЕсли;
	
	Если ТекСтрокаТабличнойЧасти.ЦенаПлан = 0 Тогда
		ТекСтрокаТабличнойЧасти.ЦенаПлан = ТекСтрокаТабличнойЧасти.СуммаПлан;
	КонецЕсли;	
	
	Если ТекСтрокаТабличнойЧасти.ПроцентСкидки = 100 И ТекСтрокаТабличнойЧасти.СуммаПлан <> 0 Тогда
		ТекСтрокаТабличнойЧасти.СуммаСкидкиПлан = ТекСтрокаТабличнойЧасти.КоличествоПлан * ТекСтрокаТабличнойЧасти.ЦенаПлан -
			ТекСтрокаТабличнойЧасти.СуммаПлан;
		ТекСтрокаТабличнойЧасти.ПроцентСкидки = ТекСтрокаТабличнойЧасти.СуммаСкидкиПлан /
			(ТекСтрокаТабличнойЧасти.КоличествоПлан * ТекСтрокаТабличнойЧасти.ЦенаПлан) * 100;
			
		// Нужно также пересчитать и фактические показатели, т.к. процент скидки относится и к плану, и к факту
		РассчитатьСуммуСкидки(ТекСтрокаТабличнойЧасти, "Факт");
		РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрокаТабличнойЧасти, "Факт", Истина);
		РассчитатьСуммуНДС(ТекСтрокаТабличнойЧасти, "Факт");
		РассчитатьСуммуВсегоВстрокеТЧ(ТекСтрокаТабличнойЧасти, "Факт");
	Иначе
		ТекСтрокаТабличнойЧасти.ЦенаПлан = ТекСтрокаТабличнойЧасти.СуммаПлан / ТекСтрокаТабличнойЧасти.КоличествоПлан /
			(1 - ТекСтрокаТабличнойЧасти.ПроцентСкидки/100);
		
		РассчитатьСуммуСкидки(ТекСтрокаТабличнойЧасти, "План");
	КонецЕсли;
	
	РассчитатьСуммуНДС(ТекСтрокаТабличнойЧасти, "План");
	РассчитатьСуммуВсегоВстрокеТЧ(ТекСтрокаТабличнойЧасти, "План");
	
	УстановитьФлагРучногоРедактирования(ТекСтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура УслугиНоменклатураПриИзменении(Элемент)
	ТекСтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	ТекСтрокаТабличнойЧасти.Содержание = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрокаТабличнойЧасти.Номенклатура, "НаименованиеПолное");
	
	Если Объект.УчитыватьНДС Тогда
		ТекСтрокаТабличнойЧасти.СтавкаНДС = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрокаТабличнойЧасти.Номенклатура, "СтавкаНДС");
	КонецЕсли;
		
	ТекСтрокаТабличнойЧасти.Тариф = Неопределено;
	ТекСтрокаТабличнойЧасти.Цена = 0;
	ТекСтрокаТабличнойЧасти.Количество = 0;
	Если ИспользоватьПлановыеУслуги Тогда
		ТекСтрокаТабличнойЧасти.ЦенаПлан = 0;
		ТекСтрокаТабличнойЧасти.КоличествоПлан = 0;
	КонецЕсли;
	
	РассчитатьСуммуСкидки(ТекСтрокаТабличнойЧасти);
	РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрокаТабличнойЧасти);
	
	ТекСтрокаТабличнойЧасти.СтатьяДоходов = уатОбщегоНазначенияСервер.СтатьяДоходовНоменклатуры(ТекСтрокаТабличнойЧасти.Номенклатура);
	
	УстановитьФлагРучногоРедактирования(ТекСтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьУслугиПоШаблону(Команда)
	Если Объект.Услуги.Количество() > 0 Тогда
		ОписаниеОповещ = Новый ОписаниеОповещения("ЗаполнитьУслугиПоШаблонуВопрос", ЭтотОбъект);
		ТекстНСТР = НСтр("en='To fill with cleaning tables?';ru='Заполнить с очисткой таблицы?'");
		ПоказатьВопрос(ОписаниеОповещ, ТекстНСТР, РежимДиалогаВопрос.ДаНетОтмена);
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Справочник.уатШаблоныУслуг_уэ.ФормаВыбора",, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьУслугиПоШаблонуВопрос(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.Услуги.Очистить();
		Модифицированность = Истина;
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
	Иначе
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Справочник.уатШаблоныУслуг_уэ.ФормаВыбора",, ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУслугиПоШаблонуСервер(Шаблон)
	ОсновнаяСтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
		ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнаяСтавкаНДС");
	
	флСтраницаДоходы = Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаСтраницаУслуги;
	
	Для Каждого ТекСтрока Из Шаблон.Услуги Цикл
		Если флСтраницаДоходы Тогда
			НоваяСтрока = Объект.Услуги.Добавить();
		Иначе
			НоваяСтрока = Объект.Расходы.Добавить();
		КонецЕсли;
		НоваяСтрока.Номенклатура = ТекСтрока.Номенклатура;
		НоваяСтрока.Количество   = ТекСтрока.Количество;
		Если ИспользоватьПлановыеУслуги Тогда
			НоваяСтрока.КоличествоПлан   = ТекСтрока.Количество;
		КонецЕсли;
		Если НЕ флСтраницаДоходы Тогда
			НоваяСтрока.УчитыватьНДС = Объект.УчитыватьНДС;
			НоваяСтрока.СуммаВключаетНДС = Объект.СуммаВключаетНДС;
		КонецЕсли;
		Если Объект.УчитыватьНДС Тогда
			Если ЗначениеЗаполнено(НоваяСтрока.Номенклатура.СтавкаНДС) Тогда
				НоваяСтрока.СтавкаНДС = НоваяСтрока.Номенклатура.СтавкаНДС;
			Иначе
				НоваяСтрока.СтавкаНДС = ОсновнаяСтавкаНДС;
			КонецЕсли;
		КонецЕсли;
		НоваяСтрока.Содержание = НоваяСтрока.Номенклатура.НаименованиеПолное;
		Если флСтраницаДоходы Тогда
			НоваяСтрока.СтатьяДоходов = уатОбщегоНазначенияСервер.СтатьяДоходовНоменклатуры(НоваяСтрока.Номенклатура);
		Иначе
			НоваяСтрока.СтатьяРасходов = уатОбщегоНазначенияСервер.СтатьяРасходовНоменклатуры(НоваяСтрока.Номенклатура);
		КонецЕсли;
		НоваяСтрока.Валюта = Объект.ВалютаДокумента;
		Если Объект.ЭтоШаблонПеревозки Тогда
			НоваяСтрока.ВидДокумента = Перечисления.уатВидыДокументовШаблонаДоходовРасходов_уэ.ЗаказНаТС;
		КонецЕсли;
	КонецЦикла;
	
	Если флСтраницаДоходы Тогда
		ОбновитьПараметрВыработкиВременныйОказ();
	Иначе
		ОбновитьПараметрВыработкиВременныйПолуч();
	КонецЕсли;
	
	ОбновитьПодвалПрибыли();
КонецПроцедуры

&НаКлиенте
Процедура УслугиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если уатОбщегоНазначения.ПроверкаВнешнегоПользователя() Тогда
		Возврат;
	КонецЕсли;
	ТекСтрока = Элементы.Услуги.ТекущиеДанные;
	
	Если Поле = Элементы.УслугиТариф Тогда
		ПоказатьЗначение(Неопределено, ТекСтрока.Тариф);
		
	ИначеЕсли Поле = Элементы.УслугиТарифПараметрВыработки Тогда
		ПоказатьЗначение(Неопределено, ТекСтрока.ПараметрВыработки);
		
	ИначеЕсли Поле = Элементы.УслугиРучнойВвод Тогда
		ТекСтрока.РучнойВвод = НЕ ТекСтрока.РучнойВвод;
		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура РассчитатьСтоимостьУслуги(СтруктураСтроки, Знач ДопПараметры)
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	ЗаписатьПромежуточныеПункты(ДокОбъект);
	ДопПараметры.Вставить("ДокументОбъект", ДокОбъект);
	уатРасчетыПоТарифам_уэ.РассчитатьСтоимостьУслуги(СтруктураСтроки, ДопПараметры);
КонецПроцедуры

&НаКлиенте
Процедура УслугиВалютаПриИзменении(Элемент)
	УслугиПриИзмененииВалюты("Услуги");
КонецПроцедуры

&НаКлиенте
Процедура УслугиСтатьяДоходовПриИзменении(Элемент)
	ТекСтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	УстановитьФлагРучногоРедактирования(ТекСтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура УслугиСкидкаПриИзменении(Элемент)
	ТекСтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	
	РассчитатьСуммуСкидки(ТекСтрокаТабличнойЧасти);
	РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрокаТабличнойЧасти, , Истина);
	
	УстановитьФлагРучногоРедактирования(ТекСтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаСкидкиПланПриИзменении(Элемент)
	ТекСтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	
	ЦенаКоличество = ТекСтрокаТабличнойЧасти.КоличествоПлан * ТекСтрокаТабличнойЧасти.ЦенаПлан;
	Если ЦенаКоличество = 0 Тогда
		ТекСтрокаТабличнойЧасти.ПроцентСкидки = 0;
	Иначе
		ТекСтрокаТабличнойЧасти.ПроцентСкидки = ТекСтрокаТабличнойЧасти.СуммаСкидкиПлан / ЦенаКоличество * 100;
	КонецЕсли;
		
	РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрокаТабличнойЧасти,, Истина);
	
	УстановитьФлагРучногоРедактирования(ТекСтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаСкидкиПриИзменении(Элемент)
	ТекСтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	
	ЦенаКоличество = ТекСтрокаТабличнойЧасти.Количество * ТекСтрокаТабличнойЧасти.Цена;
	Если ЦенаКоличество = 0 Тогда
		ТекСтрокаТабличнойЧасти.ПроцентСкидки = 0;
	Иначе
		ТекСтрокаТабличнойЧасти.ПроцентСкидки = ТекСтрокаТабличнойЧасти.СуммаСкидки / ЦенаКоличество * 100;
	КонецЕсли;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрокаТабличнойЧасти,, Истина);
	
	УстановитьФлагРучногоРедактирования(ТекСтрокаТабличнойЧасти);
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыРасходы

&НаКлиенте
Процедура ЗаполнитьПолучаемыеУслугиПоШаблону(Команда)
	Если Объект.Расходы.Количество() > 0 Тогда
		ТекстНСТР = НСтр("en='To fill with cleaning tables?';ru='Заполнить с очисткой таблицы?'");
		ОписаниеОповещ = Новый ОписаниеОповещения("ЗаполнитьПолучаемыеУслугиПоШаблонуВопрос", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещ, ТекстНСТР, РежимДиалогаВопрос.ДаНетОтмена);
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Справочник.уатШаблоныУслуг_уэ.ФормаВыбора",, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПолучаемыеУслугиПоШаблонуВопрос(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.Расходы.Очистить();
		Модифицированность = Истина;
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
	Иначе
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Справочник.уатШаблоныУслуг_уэ.ФормаВыбора",, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПолучаемыеУслуги(Команда)
	Если Объект.Расходы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстНСТР = НСтр("en='Clear rendering services?';ru='Очистить получаемые услуги?'");
	ПоказатьВопрос(Новый ОписаниеОповещения("ОчиститьПолучаемыеУслугиОтвет", ЭтотОбъект),
		ТекстНСТР, РежимДиалогаВопрос.ОКОтмена);
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьПолучаемыеУслугиОтвет(Результат, ДопПараметры) Экспорт
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Объект.Расходы.Очистить();
		ОбновитьПодвалПрибыли();
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПолучаемыеУслугиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекСтрока = Элементы.ПолучаемыеУслуги.ТекущиеДанные;
	
	Если Поле = Элементы.ПолучаемыеУслугиТариф Тогда
		ПоказатьЗначение(Неопределено, ТекСтрока.Тариф);
		
	ИначеЕсли Поле = Элементы.ПолучаемыеУслугиРучнойВвод Тогда
		ТекСтрока.РучнойВвод = НЕ ТекСтрока.РучнойВвод;
		
	ИначеЕсли Поле = Элементы.ПолучаемыеУслугиТарифПараметрВыработки Тогда
		ПоказатьЗначение(Неопределено, ТекСтрока.ПараметрВыработки);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПолучаемыеУслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекСтрока = Элементы.ПолучаемыеУслуги.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		ТекСтрока.РучнойВвод = Истина;
		
		Если НЕ Копирование Тогда
			ТекСтрока.СтатьяРасходов = ПредопределенноеЗначение("Справочник.уатСтатьиРасходов.ОсновнаяСтатьяРасходов");
				
			ТекСтрока.УчитыватьНДС = Объект.УчитыватьНДС;
			ТекСтрока.СуммаВключаетНДС = Объект.СуммаВключаетНДС;
		 	ТекСтрока.Валюта    = Объект.ВалютаДокумента;
			
			Если ТекСтрока.УчитыватьНДС Тогда
				ТекСтрока.СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
					ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнаяСтавкаНДС");
			КонецЕсли;
			
			Если Объект.ЭтоШаблонПеревозки Тогда
				ТекСтрока.ВидДокумента = ПредопределенноеЗначение("Перечисление.уатВидыДокументовШаблонаДоходовРасходов_уэ.ЗаказНаТС");
			КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
	УстановитьФорматРедактированияКоличествоВыработкиПолуч();
	ОбновитьНДСвТЧРасходы();
	
	ДанныеСтрокиУслуги = Новый Структура("Валюта", ТекСтрока.Валюта);
КонецПроцедуры

&НаКлиенте
Процедура ПолучаемыеУслугиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОбновитьПараметрВыработкиВременныйПолуч();
	ОбновитьРасходыПоЭтапамСервер();
	ОбновитьПодвалПрибыли();
	ОбновитьНДСвТЧРасходы();
	ОбновитьВсегоВТЧПолучаемыеУслуги();
КонецПроцедуры

&НаКлиенте
Процедура ПолучаемыеУслугиПослеУдаления(Элемент)
	ОбновитьПараметрВыработкиВременныйПолуч();
	ОбновитьРасходыПоЭтапамСервер();
	ОбновитьПодвалПрибыли();
	ОбновитьНДСвТЧРасходы();
	ОбновитьВсегоВТЧПолучаемыеУслуги();
КонецПроцедуры

&НаКлиенте
Процедура ПолучаемыеУслугиНоменклатураПриИзменении(Элемент)
	ТекСтрокаТабличнойЧасти = Элементы.ПолучаемыеУслуги.ТекущиеДанные;
	ТекСтрокаТабличнойЧасти.Содержание = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрокаТабличнойЧасти.Номенклатура, "НаименованиеПолное");
	ТекСтрокаТабличнойЧасти.СтатьяРасходов = уатОбщегоНазначенияСервер.СтатьяРасходовНоменклатуры(ТекСтрокаТабличнойЧасти.Номенклатура);
	
	Если ТекСтрокаТабличнойЧасти.УчитыватьНДС Тогда
		ТекСтрокаТабличнойЧасти.СтавкаНДС = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрокаТабличнойЧасти.Номенклатура, "СтавкаНДС");
	Иначе
		ТекСтрокаТабличнойЧасти.СтавкаНДС = Неопределено;
	КонецЕсли;
	
	ТекСтрокаТабличнойЧасти.Тариф = Неопределено;
	ТекСтрокаТабличнойЧасти.Цена = 0;
	ТекСтрокаТабличнойЧасти.Количество = 0;
	Если ИспользоватьПлановыеУслуги Тогда
		ТекСтрокаТабличнойЧасти.ЦенаПлан = 0;
		ТекСтрокаТабличнойЧасти.КоличествоПлан = 0;
	КонецЕсли;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрокаТабличнойЧасти);
	УстановитьФлагРучногоРедактирования(ТекСтрокаТабличнойЧасти, "Расходы");
КонецПроцедуры

&НаКлиенте
Процедура ПолучаемыеУслугиКоличествоПриИзменении(Элемент)
	ТекСтрокаТабличнойЧасти = Элементы.ПолучаемыеУслуги.ТекущиеДанные;
	Если ТекСтрокаТабличнойЧасти.ПараметрВыработкиВременный Тогда 
		уатЗащищенныеФункцииСервер.КонтрольВводаВремени(ТекСтрокаТабличнойЧасти.КоличествоВыработка);
		ТекСтрокаТабличнойЧасти.Количество = уатОбщегоНазначения.уатВремяВСекунды(ТекСтрокаТабличнойЧасти.КоличествоВыработка)/3600;
	Иначе
		ТекСтрокаТабличнойЧасти.Количество = ТекСтрокаТабличнойЧасти.КоличествоВыработка;
	КонецЕсли;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрокаТабличнойЧасти, "Факт");
	УстановитьФлагРучногоРедактирования(ТекСтрокаТабличнойЧасти, "Расходы");
КонецПроцедуры

&НаКлиенте
Процедура ПолучаемыеУслугиЦенаПриИзменении(Элемент)
	ТекСтрокаТабличнойЧасти = Элементы.ПолучаемыеУслуги.ТекущиеДанные;
	РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрокаТабличнойЧасти, "Факт");
	УстановитьФлагРучногоРедактирования(ТекСтрокаТабличнойЧасти, "Расходы");
КонецПроцедуры

&НаКлиенте
Процедура ПолучаемыеУслугиСуммаПриИзменении(Элемент)
	ТекСтрокаТабличнойЧасти = Элементы.ПолучаемыеУслуги.ТекущиеДанные;
	
	Если ТекСтрокаТабличнойЧасти.Количество <> 0 Тогда
		ТекСтрокаТабличнойЧасти.Цена = ТекСтрокаТабличнойЧасти.Сумма / ТекСтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	
	РассчитатьСуммуНДС(ТекСтрокаТабличнойЧасти, "Факт");
	РассчитатьСуммуВсегоВстрокеТЧ(ТекСтрокаТабличнойЧасти, "Факт");
	УстановитьФлагРучногоРедактирования(ТекСтрокаТабличнойЧасти, "Расходы");
КонецПроцедуры

&НаКлиенте
Процедура ПолучаемыеУслугиСуммаНДСПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ПолучаемыеУслуги.ТекущиеДанные;
	РассчитатьСуммуВсегоВстрокеТЧ(СтрокаТабличнойЧасти, "Факт");
КонецПроцедуры

&НаКлиенте
Процедура ПолучаемыеУслугиКоличествоПланПриИзменении(Элемент)
	ТекСтрокаТабличнойЧасти = Элементы.ПолучаемыеУслуги.ТекущиеДанные;
	Если ТекСтрокаТабличнойЧасти.ПараметрВыработкиВременный Тогда 
		уатЗащищенныеФункцииСервер.КонтрольВводаВремени(ТекСтрокаТабличнойЧасти.КоличествоВыработкаПлан);
		ТекСтрокаТабличнойЧасти.КоличествоПлан = уатОбщегоНазначения.уатВремяВСекунды(ТекСтрокаТабличнойЧасти.КоличествоВыработкаПлан)/3600;
	Иначе
		ТекСтрокаТабличнойЧасти.КоличествоПлан = ТекСтрокаТабличнойЧасти.КоличествоВыработкаПлан;
	КонецЕсли;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрокаТабличнойЧасти, "План");
	УстановитьФлагРучногоРедактирования(ТекСтрокаТабличнойЧасти, "Расходы");
КонецПроцедуры

&НаКлиенте
Процедура ПолучаемыеУслугиЦенаПланПриИзменении(Элемент)
	ТекСтрокаТабличнойЧасти = Элементы.ПолучаемыеУслуги.ТекущиеДанные;
	РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрокаТабличнойЧасти, "План");
	УстановитьФлагРучногоРедактирования(ТекСтрокаТабличнойЧасти, "Расходы");
КонецПроцедуры

&НаКлиенте
Процедура ПолучаемыеУслугиСуммаПланПриИзменении(Элемент)
	ТекСтрокаТабличнойЧасти = Элементы.ПолучаемыеУслуги.ТекущиеДанные;
	
	Если ТекСтрокаТабличнойЧасти.КоличествоПлан <> 0 Тогда
		ТекСтрокаТабличнойЧасти.ЦенаПлан = ТекСтрокаТабличнойЧасти.СуммаПлан / ТекСтрокаТабличнойЧасти.КоличествоПлан;
	КонецЕсли;
	
	РассчитатьСуммуНДС(ТекСтрокаТабличнойЧасти, "План");
	РассчитатьСуммуВсегоВстрокеТЧ(ТекСтрокаТабличнойЧасти, "План");
	УстановитьФлагРучногоРедактирования(ТекСтрокаТабличнойЧасти, "Расходы");
КонецПроцедуры

&НаКлиенте
Процедура ПолучаемыеУслугиСуммаНДСПланПриИзменении(Элемент)
	ТекСтрокаТабличнойЧасти = Элементы.ПолучаемыеУслуги.ТекущиеДанные;
	РассчитатьСуммуВсегоВстрокеТЧ(ТекСтрокаТабличнойЧасти, "План");
	УстановитьФлагРучногоРедактирования(ТекСтрокаТабличнойЧасти, "Расходы");
КонецПроцедуры

&НаКлиенте
Процедура ПолучаемыеУслугиСтавкаНДСПриИзменении(Элемент)
	ТекСтрокаТабличнойЧасти = Элементы.ПолучаемыеУслуги.ТекущиеДанные;
	РассчитатьСуммуНДС(ТекСтрокаТабличнойЧасти);
	РассчитатьСуммуВсегоВстрокеТЧ(ТекСтрокаТабличнойЧасти);
	УстановитьФлагРучногоРедактирования(ТекСтрокаТабличнойЧасти, "Расходы");
КонецПроцедуры

&НаКлиенте
Процедура ПолучаемыеУслугиКонтрагентПриИзменении(Элемент)
	ТекСтрокаТабличнойЧасти = Элементы.ПолучаемыеУслуги.ТекущиеДанные;
	
	ДанныеОбменаССервером = Новый Структура("Организация, Дата");
	ЗаполнитьЗначенияСвойств(ДанныеОбменаССервером, Объект);
	ДанныеОбменаССервером.Вставить("Контрагент", ТекСтрокаТабличнойЧасти.Контрагент);
	ДанныеОбменаССервером.Вставить("ДоговорКонтрагента", ТекСтрокаТабличнойЧасти.Договор);
	// Получим данные с сервера
	
	ЗначенияДляЗаполнения = ИзменениеКонтрагентаСерверПолучаемыеУслуги(ДанныеОбменаССервером);
	ТекСтрокаТабличнойЧасти.Договор = ЗначенияДляЗаполнения.ДоговорКонтрагента;
	
	ТекСтрокаТабличнойЧасти.Тариф = Неопределено;
	ТекСтрокаТабличнойЧасти.Цена = 0;
	ТекСтрокаТабличнойЧасти.Количество = 0;
	Если ИспользоватьПлановыеУслуги Тогда
		ТекСтрокаТабличнойЧасти.ЦенаПлан = 0;
		ТекСтрокаТабличнойЧасти.КоличествоПлан = 0;
	КонецЕсли;
	РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрокаТабличнойЧасти);
	УстановитьФлагРучногоРедактирования(ТекСтрокаТабличнойЧасти, "Расходы");
КонецПроцедуры

&НаКлиенте
Процедура ПолучаемыеУслугиКонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	уатОбщегоНазначенияКлиент.КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучаемыеУслугиКонтрагентАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	уатОбщегоНазначенияКлиент.КонтрагентАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучаемыеУслугиКонтрагентОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	уатОбщегоНазначенияКлиент.КонтрагентОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучаемыеУслугиДоговорПриИзменении(Элемент)
	ТекСтрокаТабличнойЧасти = Элементы.ПолучаемыеУслуги.ТекущиеДанные;
	
	УстановитьФлагРучногоРедактирования(ТекСтрокаТабличнойЧасти, "Расходы");
	
	ТекСтрокаТабличнойЧасти.Валюта = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрокаТабличнойЧасти.Договор, "ВалютаВзаиморасчетов");
	УслугиПриИзмененииВалюты("ПолучаемыеУслуги");
КонецПроцедуры 

&НаКлиенте
Процедура ПолучаемыеУслугиДоговорСоздание(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВидДоговораДоступныеЗначения = Новый Массив;
	
	мВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком");
	ВидДоговораДоступныеЗначения.Добавить(мВидДоговора);  
	
	ТекДанные = Элементы.ПолучаемыеУслуги.ТекущиеДанные;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Владелец", ТекДанные.Контрагент);
	ПараметрыФормы.Вставить("ВидДоговораДоступныеЗначения", ВидДоговораДоступныеЗначения);
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПолучаемыеУслугиВалютаПриИзменении(Элемент)
	УслугиПриИзмененииВалюты("ПолучаемыеУслуги");
КонецПроцедуры

&НаКлиенте
Процедура ПолучаемыеУслугиУчитыватьНДСПредставлениеПриИзменении(Элемент)
	ТекСтрока = Элементы.ПолучаемыеУслуги.ТекущиеДанные;
	
	ПредСуммаВключаетНДС = ТекСтрока.СуммаВключаетНДС;
	ПредУчитыватьНДС     = ТекСтрока.УчитыватьНДС;
	
	Если ТекСтрока.УчитыватьНДСПредставление = "Строка без НДС" Тогда
		ТекСтрока.УчитыватьНДС = Ложь;
		ТекСтрока.СуммаВключаетНДС = Ложь;
		ТекСтрока.СтавкаНДС = Неопределено;
		ТекСтрока.СуммаНДС = 0;
		ТекСтрока.Всего = 0;
		Если ИспользоватьПлановыеУслуги Тогда
			ТекСтрока.СуммаНДСПлан = 0;
			ТекСтрока.ВсегоПлан = 0;
		КонецЕсли;
	ИначеЕсли ТекСтрока.УчитыватьНДСПредставление = "НДС в сумме" Тогда
		ТекСтрока.УчитыватьНДС = Истина;
		ТекСтрока.СуммаВключаетНДС = Истина;
	Иначе
		ТекСтрока.УчитыватьНДС = Истина;
		ТекСтрока.СуммаВключаетНДС = Ложь;
	КонецЕсли;
	
	Если ТекСтрока.УчитыватьНДС И НЕ ЗначениеЗаполнено(ТекСтрока.СтавкаНДС) Тогда
		ТекСтрока.СтавкаНДС = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрока.Номенклатура, "СтавкаНДС");
	КонецЕсли;
	
	Если ПредСуммаВключаетНДС <> ТекСтрока.СуммаВключаетНДС ИЛИ ПредУчитыватьНДС <> ТекСтрока.УчитыватьНДС Тогда
		СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеСтавкиНДС(ТекСтрока.СтавкаНДС);
		Если ПредУчитыватьНДС Тогда
			Если ТекСтрока.СуммаВключаетНДС Тогда
				ТекСтрока.Цена = (ТекСтрока.Цена * (100 + СтавкаНДС)) / 100;
				Если ИспользоватьПлановыеУслуги Тогда
					ТекСтрока.ЦенаПлан = (ТекСтрока.ЦенаПлан * (100 + СтавкаНДС)) / 100;
				КонецЕсли;
			Иначе
				ТекСтрока.Цена = (ТекСтрока.Цена * 100) / (100 + СтавкаНДС);
				Если ИспользоватьПлановыеУслуги Тогда
					ТекСтрока.ЦенаПлан = (ТекСтрока.ЦенаПлан * 100) / (100 + СтавкаНДС);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрока);
		//РассчитатьСуммуНДС(ТекСтрока);
		//РассчитатьСуммуВсегоВстрокеТЧ(ТекСтрока);
	КонецЕсли;
	
	ОбновитьНДСвТЧРасходы();
КонецПроцедуры

&НаКлиенте
Процедура ПолучаемыеУслугиУчитыватьНДСПредставлениеОчистка(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ПолучаемыеУслугиСтатьяРасходовПриИзменении(Элемент)
	ТекСтрокаТабличнойЧасти = Элементы.ПолучаемыеУслуги.ТекущиеДанные;
	УстановитьФлагРучногоРедактирования(ТекСтрокаТабличнойЧасти);
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыРаспределениепоЗаказам

&НаКлиенте
Процедура ЗаполнитьРаспределениеПоОстаткамВКонтейнерах(Команда)
	Если Объект.РаспределениеПоЗаказам.Количество() > 0 Тогда
		ТекстНСТР = НСтр("en='Do you want to clear the table before filling?';ru='Очистить таблицу перед заполнением?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьРаспределениеПоОстаткамВКонтейнерахЗавершение", ЭтотОбъект),
			ТекстНСТР, РежимДиалогаВопрос.ДаНетОтмена,, КодВозвратаДиалога.Нет);
	Иначе	
		ЗаполнитьРаспределениеПоОстаткамВКонтейнерахСервер();
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРаспределениеПоОстаткамВКонтейнерахЗавершение(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли Результат = КодВозвратаДиалога.Да Тогда
		Объект.РаспределениеПоЗаказам.Очистить();		
	КонецЕсли;
	
	ЗаполнитьРаспределениеПоОстаткамВКонтейнерахСервер();
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРаспределениеПоОстаткамВКонтейнерахСервер()
	мсвКонтейнеры = Новый Массив;
	Для Каждого ТекГрузовоеМесто Из Объект.ГрузовойСостав Цикл
		Если ТекГрузовоеМесто.ГрузовоеМесто.Контейнер Тогда
			мсвКонтейнеры.Добавить(ТекГрузовоеМесто.ГрузовоеМесто);
		КонецЕсли;
	КонецЦикла;
	
	ДатаОстатки = '00010101';
	Если НЕ Объект.Ссылка.Пустая() Тогда
		МЛ = уатОбщегоНазначения_проф.ПолучитьМЛдляЗаказаНаТС(Объект.Ссылка);
		Если ЗначениеЗаполнено(МЛ) Тогда
			Если ЗначениеЗаполнено(МЛ.ДатаИВремяОтправления) Тогда
				ДатаОстатки = МЛ.ДатаИВремяОтправления;
			ИначеЕсли ЗначениеЗаполнено(МЛ.ДатаИВремяОтправленияПлан) Тогда
				ДатаОстатки = МЛ.ДатаИВремяОтправленияПлан;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	Если ДатаОстатки = '00010101' Тогда
		Если ЗначениеЗаполнено(Объект.ОтправлениеПо) Тогда
			ДатаОстатки = Объект.ОтправлениеПо;
		ИначеЕсли ЗначениеЗаполнено(Объект.ОтправлениеС) Тогда
			ДатаОстатки = Объект.ОтправлениеС;
		КонецЕсли;
	КонецЕсли;
		
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатОстаткиГрузовВКонтейнерах_уэОстатки.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя
	|ИЗ
	|	РегистрНакопления.уатОстаткиГрузовВКонтейнерах_уэ.Остатки(&ДатаОстатки, Контейнер В (&мсвКонтейнеры)) КАК уатОстаткиГрузовВКонтейнерах_уэОстатки");
	Запрос.УстановитьПараметр("мсвКонтейнеры", мсвКонтейнеры);
	Запрос.УстановитьПараметр("ДатаОстатки", ДатаОстатки);
	ВыборкаЗаказы = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЗаказы.Следующий() Цикл
		НоваяСтрока = Объект.РаспределениеПоЗаказам.Добавить();
		НоваяСтрока.ЗаказГрузоотправителя = ВыборкаЗаказы.ЗаказГрузоотправителя;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыЭтапыЗаказа

&НаКлиенте
Процедура ТабЭтапыЗаказаПриАктивизацииСтроки(Элемент)
	
	#Если Не ВебКлиент Тогда
		ОбновитьПланировщикЭтапов();
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ТабЭтапыЗаказаПриИзменении(Элемент)
	
	ЗаписатьИзмененияТаблицыЭтапов();
	
	#Если Не ВебКлиент Тогда
		ОбновитьПланировщикЭтапов();
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ТабЭтапыЗаказаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ТабЭтапыЗаказаДатаОтправленияПлан"
		Или Поле.Имя = "ТабЭтапыЗаказаДатаПрибытияПлан"
		Или Поле.Имя = "ТабЭтапыЗаказаДатаОтправленияПланШаблон"
		Или Поле.Имя = "ТабЭтапыЗаказаДатаПрибытияПланШаблон"
		Или Поле.Имя = "ТабЭтапыЗаказаДнейОтНачалаОтправление"
		Или Поле.Имя = "ТабЭтапыЗаказаДнейОтНачалаНазначение"
		Или Поле.Имя = "ТабЭтапыЗаказаСоздаватьАктОтгрузки"
		Или Поле.Имя = "ТабЭтапыЗаказаСоздаватьАктПриемки"
		Или Поле.Имя = "ТабЭтапыЗаказаСоздаватьИзвлечениеГрузовИзКонтейнера"
		Или Поле.Имя = "ТабЭтапыЗаказаСоздаватьРазмещениеГрузовВКонтейнере"
		Или Поле.Имя = "ТабЭтапыЗаказаСоздаватьМаршрутныйЛист"
		Или Поле.Имя = "ТабЭтапыЗаказаПеревозчик"
		Или Поле.Имя = "ТабЭтапыЗаказаДоговорСПеревозчиком"
		Или Поле.Имя = "ТабЭтапыЗаказаТС"
		Или Поле.Имя = "ТабЭтапыЗаказаНастройкаФормированияКомплектовДокументов" Тогда 
		СтандартнаяОбработка = Истина;
	ИначеЕсли Поле.Имя = "ТабЭтапыЗаказаМаршрутныеЛисты" Тогда 
		СтандартнаяОбработка = Ложь;
		
		ТекСтрока = Элементы.ТабЭтапыЗаказа.ТекущиеДанные;
		Если ТекСтрока = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		ДанныеМЛ = ПолучитьДанныеМЛПоЭтапу(ТекСтрока.Этап);
		Если Не ДанныеМЛ.ЕстьМЛ Тогда 
			Возврат;
		КонецЕсли;
		
		Если ДанныеМЛ.МаршрутныеЛисты.Количество() = 0 Тогда
			Возврат;
		ИначеЕсли ДанныеМЛ.МаршрутныеЛисты.Количество() = 1 Тогда 
			ОткрытьФормуДокумента(ДанныеМЛ.МаршрутныеЛисты[0]);
		Иначе 
			СписокВыбораМЛ = Новый СписокЗначений();
			Для Каждого ТекМЛ Из ДанныеМЛ.МаршрутныеЛисты Цикл 
				СписокВыбораМЛ.Добавить(ТекМЛ);
			КонецЦикла;
			Оповещение = Новый ОписаниеОповещения("ТабЭтапыЗаказаВыборВыборМаршрутногоЛиста", ЭтотОбъект);
			ТекстНСТР = НСтр("en='Choose of routing list';ru='Выбор маршрутного листа'");
			СписокВыбораМЛ.ПоказатьВыборЭлемента(Оповещение, ТекстНСТР);
		КонецЕсли;
		
	Иначе 
		СтандартнаяОбработка = Ложь;
		
		ТекСтрока = Элементы.ТабЭтапыЗаказа.ТекущиеДанные;
		Если ТекСтрока = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		ОткрытьФормуДокумента(ТекСтрока.Этап);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабЭтапыЗаказаПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
	ДопПараметры = Новый Структура();
	ДопПараметры.Вставить("Копирование", Копирование);
	
	Если Копирование Тогда 
		ТекСтрока = Элементы.ТабЭтапыЗаказа.ТекущиеДанные;
		Если ТекСтрока = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		ДопПараметры.Вставить("Этап", ТекСтрока.Этап);
	КонецЕсли;
	
	Если Модифицированность Тогда
		ТекстНСТР = НСтр("en='Before adding the steps it is necessary to record the document. Record?';ru='Перед добавлением этапов необходимо записать документ. Записать?'");
		Оповещение = Новый ОписаниеОповещения("ТабЭтапыЗаказаПередНачаломДобавленияОтветНаВопросЗаписиДокумента", ЭтотОбъект, ДопПараметры);
		ПоказатьВопрос(Оповещение, ТекстНСТР, РежимДиалогаВопрос.ОКОтмена, 30, КодВозвратаДиалога.ОК);
	Иначе 
		ТабЭтапыЗаказаПередНачаломДобавленияПослеЗаписиДокумента(ДопПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабЭтапыЗаказаПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.ТекущийЭлемент.Имя = "ТабЭтапыЗаказаДатаОтправленияПлан"
		Или Элемент.ТекущийЭлемент.Имя = "ТабЭтапыЗаказаДатаПрибытияПлан"
		Или Элемент.ТекущийЭлемент.Имя = "ТабЭтапыЗаказаДатаОтправленияПланШаблон"
		Или Элемент.ТекущийЭлемент.Имя = "ТабЭтапыЗаказаДатаПрибытияПланШаблон"
		Или Элемент.ТекущийЭлемент.Имя = "ТабЭтапыЗаказаДнейОтНачалаОтправление"
		Или Элемент.ТекущийЭлемент.Имя = "ТабЭтапыЗаказаДнейОтНачалаНазначение"
		Или Элемент.ТекущийЭлемент.Имя = "ТабЭтапыЗаказаСоздаватьАктОтгрузки"
		Или Элемент.ТекущийЭлемент.Имя = "ТабЭтапыЗаказаСоздаватьАктПриемки"
		Или Элемент.ТекущийЭлемент.Имя = "ТабЭтапыЗаказаСоздаватьИзвлечениеГрузовИзКонтейнера"
		Или Элемент.ТекущийЭлемент.Имя = "ТабЭтапыЗаказаСоздаватьРазмещениеГрузовВКонтейнере"
		Или Элемент.ТекущийЭлемент.Имя = "ТабЭтапыЗаказаСоздаватьМаршрутныйЛист"
		Или Элемент.ТекущийЭлемент.Имя = "ТабЭтапыЗаказаПеревозчик"
		Или Элемент.ТекущийЭлемент.Имя = "ТабЭтапыЗаказаДоговорСПеревозчиком"
		Или Элемент.ТекущийЭлемент.Имя = "ТабЭтапыЗаказаТС"
		Или Элемент.ТекущийЭлемент.Имя = "ТабЭтапыЗаказаНастройкаФормированияКомплектовДокументов" Тогда
		Отказ = Ложь;
	Иначе
		Отказ = Истина;
		
		ТекСтрока = Элементы.ТабЭтапыЗаказа.ТекущиеДанные;
		Если ТекСтрока = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		ОткрытьФормуДокумента(ТекСтрока.Этап);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабЭтапыЗаказаПередУдалением(Элемент, Отказ)
	
	ТекСтрокаЭтапы = Элементы.ТабЭтапыЗаказа.ТекущиеДанные;
	Если ТекСтрокаЭтапы = Неопределено Тогда
		Возврат;
	Иначе
		ПометитьНаУдалениеСервер(ТекСтрокаЭтапы.Этап);
		ОбновитьДанныеМультимодальногоЗаказа();
	КонецЕсли;
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ТабЭтапыЗаказаТСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТабЭтапыЗаказа.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОтбора = СтруктураОтбораТС(ТекущиеДанные);
	уатИнтерфейсВводаТС.РеквизитТСНачалоВыбора(Элемент, ТекущиеДанные.ТС, ДанныеВыбора, СтандартнаяОбработка, СтруктураОтбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ТабЭтапыЗаказаТСАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТабЭтапыЗаказа.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОтбора = СтруктураОтбораТС(ТекущиеДанные);
	уатИнтерфейсВводаТС.РеквизитТСАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка, СтруктураОтбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ТабЭтапыЗаказаТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ТабЭтапыЗаказа.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураОтбора = СтруктураОтбораТС(ТекущиеДанные);
	уатИнтерфейсВводаТС.РеквизитТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка, СтруктураОтбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ТабЭтапыЗаказаПеревозчикПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТабЭтапыЗаказа.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Перевозчик) И ТипЗнч(ТекущиеДанные.Перевозчик) = Тип("СправочникСсылка.Контрагенты") Тогда
		СписокДоговоров = Новый СписокЗначений();
		СписокДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"));
		СтрПараметров = Новый Структура("СписокДопустимыхВидовДоговоров", СписокДоговоров);
		ТекущиеДанные.ДоговорСПеревозчиком = уатОбщегоНазначенияТиповыеСервер.уатПолучитьДоговорПоОрганизацииИКонтрагенту(
			Объект.Организация, ТекущиеДанные.Перевозчик, СтрПараметров);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыСопроводительныеДокументы

&НаКлиенте
Процедура СтатусыСДВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если Элементы.СтатусыСД.ТекущийЭлемент.Имя = "СтатусыСДСтатус" Тогда
		ПоказатьЗначение(Неопределено, Элементы.СтатусыСД.ТекущиеДанные.Регистратор);
	ИначеЕсли Элементы.СтатусыСД.ТекущийЭлемент.Имя = "СтатусыСДПакетДокументов" Тогда
		ПоказатьЗначение(Неопределено, Элементы.СтатусыСД.ТекущиеДанные.ПакетДокументов);
	Иначе
		ПоказатьЗначение(Неопределено, Элементы.СтатусыСД.ТекущиеДанные.СопроводительныйДокумент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СтатусыСДПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
	Если Элементы.СтатусыСД.ТекущийЭлемент.Имя = "СтатусыСДСтатус" Тогда
		ПоказатьЗначение(Неопределено, Элементы.СтатусыСД.ТекущиеДанные.Регистратор);
	ИначеЕсли Элементы.СтатусыСД.ТекущийЭлемент.Имя = "СтатусыСДПакетДокументов" Тогда
		ПоказатьЗначение(Неопределено, Элементы.СтатусыСД.ТекущиеДанные.ПакетДокументов);
	Иначе
		ПоказатьЗначение(Неопределено, Элементы.СтатусыСД.ТекущиеДанные.СопроводительныйДокумент);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СтатусыСДПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	Для Каждого ТекСтрока Из Строки Цикл
		ТекПакет = ТекСтрока.Значение.Данные.ПакетДокументов;
		Если ЗначениеЗаполнено(ТекПакет) Тогда
			ТекСтрока.Значение.Данные.ПакетДокументовПредставление = "№" + ТекПакет.Номер + " от " + Формат(ТекПакет.Дата, "ДФ=dd.MM.yyyy");
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДокументыЭтаповПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	Для Каждого ТекСтрока Из Строки Цикл
		ТекПакет = ТекСтрока.Значение.Данные.ПакетДокументов;
		Если ЗначениеЗаполнено(ТекПакет) Тогда
			ТекСтрока.Значение.Данные.ПакетДокументовПредставление = "№" + ТекПакет.Номер + " от " + Формат(ТекПакет.Дата, "ДФ=dd.MM.yyyy");
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыЭлектронныеПеревозочныеДокументы

&НаКлиенте
Процедура ЭлектронныеПеревозочныеДокументыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.ЭлектронныеПеревозочныеДокументы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Если Поле = Элементы.ЭлектронныеПеревозочныеДокументыСостояниеЭДО Тогда
		// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
		ОбменСКонтрагентамиКлиент.СостояниеЭДОНажатие_ФормаСписка(ТекущиеДанные.ЭПД, СтандартнаяОбработка);
		// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами 
	ИначеЕсли Поле = Элементы.ЭлектронныеПеревозочныеДокументыРейс 
		И ЗначениеЗаполнено(ТекущиеДанные.Рейс) Тогда
		ПоказатьЗначение(Неопределено, ТекущиеДанные.Рейс);
	Иначе
		ПоказатьЗначение(Неопределено, ТекущиеДанные.ЭПД);
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСобытия

&НаКлиенте
Процедура СобытияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.События.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура("Ключ, ЭтоШаблонПеревозки,ОткрытИзДокумента,ДокументПеревозки", 
		ПолучитьКлючЗаписиСобытияПоПеревозке(ТекущиеДанные), Объект.ЭтоШаблонПеревозки, Истина, Объект.Ссылка);
	ОткрытьФорму("РегистрСведений.уатСобытияПоПеревозке_уэ.ФормаЗаписи", ПараметрыОткрытия, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура СобытияЭтаповВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.СобытияЭтапов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	СтандартнаяОбработка = Ложь;
	
	ПараметрыОткрытия = Новый Структура("Ключ, ЭтоШаблонПеревозки,ОткрытИзДокумента,ДокументПеревозки", 
		ПолучитьКлючЗаписиСобытияПоПеревозке(ТекущиеДанные), Объект.ЭтоШаблонПеревозки, Истина, Объект.Ссылка);
	ОткрытьФорму("РегистрСведений.уатСобытияПоПеревозке_уэ.ФормаЗаписи", ПараметрыОткрытия, Объект.Ссылка);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// уатУправлениеАвтотранспортом.МодификацияКонфигурации
&НаКлиенте
Процедура Подключаемый_уатВыполнитьКоманду(Команда)
	
	уатМодификацияКонфигурацииКлиентПереопределяемый.ВыполнитьПодключаемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры
// Конец уатУправлениеАвтотранспортом.МодификацияКонфигурации

// СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла
&НаКлиенте
Процедура ЗагрузитьТоварыИзФайла(Команда)
	
	МодульЗагрузкаДанныхИзФайлаКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЗагрузкаДанныхИзФайлаКлиент");
	
	ПараметрыЗагрузки = МодульЗагрузкаДанныхИзФайлаКлиент.ПараметрыЗагрузкиДанных();
	ПараметрыЗагрузки.ПолноеИмяТабличнойЧасти = "уатЗаказГрузоотправителя.Товары";
	ПараметрыЗагрузки.Заголовок = НСтр("en='Download goods list from a file';ru='Загрузка списка товаров из файла'");
	
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьТоварыИзФайлаЗавершение", ЭтотОбъект);
	
	МодульЗагрузкаДанныхИзФайлаКлиент.ПоказатьФормуЗагрузки(ПараметрыЗагрузки, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьУслугиИзФайла(Команда)
	
	МодульЗагрузкаДанныхИзФайлаКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЗагрузкаДанныхИзФайлаКлиент");
	
	ПараметрыЗагрузки = МодульЗагрузкаДанныхИзФайлаКлиент.ПараметрыЗагрузкиДанных();
	ПараметрыЗагрузки.ПолноеИмяТабличнойЧасти = "уатЗаказГрузоотправителя.Услуги";
	ПараметрыЗагрузки.Заголовок = НСтр("en='Download list of services on the income from a file';ru='Загрузка списка услуг по доходам из файла'");
	
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьУслугиИзФайлаЗавершение", ЭтотОбъект);
	
	МодульЗагрузкаДанныхИзФайлаКлиент.ПоказатьФормуЗагрузки(ПараметрыЗагрузки, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьГрузыИзФайла(Команда)
	
	МодульЗагрузкаДанныхИзФайлаКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЗагрузкаДанныхИзФайлаКлиент");
	
	ПараметрыЗагрузки = МодульЗагрузкаДанныхИзФайлаКлиент.ПараметрыЗагрузкиДанных();
	ПараметрыЗагрузки.ПолноеИмяТабличнойЧасти = "уатЗаказГрузоотправителя.ГрузовойСостав";
	ПараметрыЗагрузки.Заголовок = НСтр("en='Download cargo list from a file';ru='Загрузка списка грузов из файла'");
	
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьГрузыИзФайлаЗавершение", ЭтотОбъект);
	
	МодульЗагрузкаДанныхИзФайлаКлиент.ПоказатьФормуЗагрузки(ПараметрыЗагрузки, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьЗатратыИзФайла(Команда)
	
	МодульЗагрузкаДанныхИзФайлаКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЗагрузкаДанныхИзФайлаКлиент");
	
	ПараметрыЗагрузки = МодульЗагрузкаДанныхИзФайлаКлиент.ПараметрыЗагрузкиДанных();
	ПараметрыЗагрузки.ПолноеИмяТабличнойЧасти = "уатЗаказГрузоотправителя.Расходы";
	ПараметрыЗагрузки.Заголовок = НСтр("en='Download list of services on expenses from file';ru='Загрузка списка услуг по затратам из файла'");
	
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьЗатратыИзФайлаЗавершение", ЭтотОбъект);
	
	МодульЗагрузкаДанныхИзФайлаКлиент.ПоказатьФормуЗагрузки(ПараметрыЗагрузки, Оповещение);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла

// ЭлектронноеВзаимодействие.ОбменСКонтрагентами&НаКлиенте
&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ЭПД = ПолучитьЭПД(Объект.Ссылка);
	
	Если НЕ ЗначениеЗаполнено(ЭПД) Тогда
		Возврат;
	КонецЕсли;
		
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Новый Структура("Ссылка",ЭПД));
	
КонецПроцедуры
// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

&НаКлиенте
Процедура Объект_ЗаписатьИЗакрыть(Команда)
	
	флЗакрыватьПриЗаписи = Истина;
	
	ПараметрыЗаписи = Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение);
	Если Записать(ПараметрыЗаписи) И Не флОткрытиеРедактораЦепочкиДокументов Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьВсегоПоДокументуНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Расстояние",          Объект.Расстояние);
	ПараметрыФормы.Вставить("ПробегСГрузом",       Объект.ПробегСГрузом);
	ПараметрыФормы.Вставить("ПробегПорожний",      Объект.ПробегПорожний);
	ПараметрыФормы.Вставить("ВремяВПути",          Объект.Время);
	ПараметрыФормы.Вставить("ВремяСтоянок",        Объект.Стоянка);
	ПараметрыФормы.Вставить("ВесБрутто",           Объект.ВесБрутто);
	ПараметрыФормы.Вставить("Объем",               Объект.Объем);
	ПараметрыФормы.Вставить("КоличествоМест",      Объект.КоличествоМест);
	ПараметрыФормы.Вставить("СтоимостьГруза",      Объект.СтоимостьГруза);
	ПараметрыФормы.Вставить("ОтображатьСтоимость", Истина);
	ПараметрыФормы.Вставить("ВалютаТоваров",       Объект.ВалютаТоваров);
	ПараметрыФормы.Вставить("ОтображатьВалюту",    Истина);
	ПараметрыФормы.Вставить("ВидДокумента",        "уатЗаказГрузоотправителя");
	ПараметрыФормы.Вставить("FTL",                 ?(Объект.FTL И ПромежуточныеПункты.Количество() > 2, Истина, Ложь));
	
	Если ИспользоватьРасчетТары Тогда
		ПараметрыФормы.Вставить("ВесТары",         Объект.ВесТары);
	КонецЕсли;

	ПараметрыФормы.Вставить("ДетализацияЗакрытия", Объект.ДетализацияЗакрытия);
	
	ДопВыработка = Новый Массив;
	Для Каждого ТекСтрока Из Объект.Выработка Цикл
		ДопВыработка.Добавить(Новый Структура("ПараметрВыработки, Значение", ТекСтрока.ПараметрВыработки, ТекСтрока.Значение));
	КонецЦикла;
	ПараметрыФормы.Вставить("ДопВыработка", ДопВыработка);
	
	Оповещение = Новый ОписаниеОповещения("НадписьВсегоПоДокументуНажатиеЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.уатРедактированиеМаршрутныхПоказателей", ПараметрыФормы, ЭтотОбъект,,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьВсегоПоДокументуНажатиеЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	РезультатЗакрытия.Свойство("Расстояние",     Объект.Расстояние);
	РезультатЗакрытия.Свойство("ПробегСГрузом",  Объект.ПробегСГрузом);
	РезультатЗакрытия.Свойство("ПробегПорожний", Объект.ПробегПорожний);
	РезультатЗакрытия.Свойство("ВремяВПути",     Объект.Время);
	РезультатЗакрытия.Свойство("ВесБрутто",      Объект.ВесБрутто);
	РезультатЗакрытия.Свойство("Объем",          Объект.Объем);
	РезультатЗакрытия.Свойство("КоличествоМест", Объект.КоличествоМест);
	РезультатЗакрытия.Свойство("СтоимостьГруза", Объект.СтоимостьГруза);
	РезультатЗакрытия.Свойство("ВалютаТоваров",  Объект.ВалютаТоваров);
	
	Если РезультатЗакрытия.Свойство("ДопВыработка") Тогда
		Объект.Выработка.Очистить();
		Для Каждого ТекДопВыработка Из РезультатЗакрытия.ДопВыработка Цикл
			НоваяСтрока = Объект.Выработка.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекДопВыработка);
		КонецЦикла;
	КонецЕсли;
	
	// изменилась валюта товаров
	Если Объект.ВалютаТоваров <> ВалютаТоваровПред Тогда
		ОповещениеОтвет = Новый ОписаниеОповещения("НадписьВсегоПоДокументуНажатиеЗавершениеОтвет", ЭтотОбъект);
		ТекстНСТР = НСтр("en='Currency of accounting for goods has changed. Recalculate according to new currency?';ru='Изменилась валюта учета товаров. Пересчитать в соответствии с новой валютой?'");
		ПоказатьВопрос(ОповещениеОтвет, ТекстНСТР, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	НадписьВсегоПоДокументуНажатиеЗавершениеФрагмент();
		
КонецПроцедуры

&НаКлиенте
Процедура НадписьВсегоПоДокументуНажатиеЗавершениеОтвет(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да тогда
		Для Каждого ТекСтрока Из Объект.Товары Цикл
			Если НЕ ЗначениеЗаполнено(ТекСтрока.ГрузовоеМесто) Тогда
				ТекСтрока.Цена = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.Цена,
					ВалютаТоваровПред, Объект.ВалютаТоваров, Объект.Дата, Объект.Дата);
				
				// Рассчитать реквизиты табличной части.
				РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрока, "Факт");
			КонецЕсли;
		КонецЦикла;
		Для Каждого ТекСтрока Из Объект.ГрузовойСостав Цикл
			Если НЕ ЗначениеЗаполнено(ТекСтрока.ГрузовоеМесто) Тогда
				ТекСтрока.Стоимость = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.Стоимость,
					ВалютаТоваровПред, Объект.ВалютаТоваров, Объект.Дата, Объект.Дата);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ВалютаТоваровПред = Объект.ВалютаТоваров;
	
	НадписьВсегоПоДокументуНажатиеЗавершениеФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура НадписьВсегоПоДокументуНажатиеЗавершениеФрагмент()
	
	РассчитатьПоказателиСервер(Ложь);
	РассчитатьУслугиПриИзмененииПоказателей();
	ЗаполнитьСтатусыДокумента();
	УстановитьУсловноеОформлениеПолейСтатусов();
	УстановитьДоступностьДокументаПоИзменениямСтатуса();
	ОбновитьВсегоВТЧТовары();
	ОбновитьВсегоВТЧУслуги();
	ОбновитьВсегоВТЧПолучаемыеУслуги();
	ОбновитьНадписьИтоги();
	ОбновитьВалютуВТЧГрузовТоваровСервер();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьАдресОтправления(Команда)
	Если ПустаяСтрока(АдресОтправленияСтрока) Тогда
		ТекстНСТР = НСтр("en='Not filled address of departure!';ru='Не заполнен адрес отправления!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР,, "АдресОтправленияСтрока"); 
		Возврат;
	КонецЕсли;
	
	СоздатьАдресПоСтроке("АдресОтправления", АдресОтправленияСтрока, АдресОтправленияСтруктура);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьАдресНазначения(Команда)
	Если ПустаяСтрока(АдресНазначенияСтрока) Тогда
		ТекстНСТР = НСтр("en='Not filled in destination address!';ru='Не заполнен адрес назначения!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР,, "АдресНазначенияСтрока"); 
		Возврат;
	КонецЕсли;
	
	СоздатьАдресПоСтроке("АдресНазначения", АдресНазначенияСтрока, АдресНазначенияСтруктура);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьАдресПоСтроке(ПутьКДанным, АдресСтрока, СтруктураДанныеАдреса)
	
	Если ТипЗнч(СтруктураДанныеАдреса) = Тип("Структура")
		И СтруктураДанныеАдреса.Свойство("ПредставлениеАдреса")
		И СтруктураДанныеАдреса.ПредставлениеАдреса = АдресСтрока
		И СтруктураДанныеАдреса.Свойство("ЗначениеАдреса") Тогда
		// Данные о полях адреса получены из сервиса подсказок
		СоздатьАдресВводКИЗавершение(
			Новый Структура("Значение, Представление", СтруктураДанныеАдреса.ЗначениеАдреса, АдресСтрока), 
			Новый Структура("ПутьКДанным, СтруктураДанныеАдреса", ПутьКДанным, СтруктураДанныеАдреса));
	Иначе
		ВидКИ = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента");
		ДопПараметры = Новый Структура("ПутьКДанным", ПутьКДанным);
		Если ТипЗнч(СтруктураДанныеАдреса) = Тип("Структура")
			И СтруктураДанныеАдреса.Свойство("ПредставлениеАдреса")
			И СтруктураДанныеАдреса.ПредставлениеАдреса = АдресСтрока Тогда
			// Данные адреса (но не полей адреса) получены из сервиса подсказок)
			ДопПараметры.Вставить("СтруктураДанныеАдреса", СтруктураДанныеАдреса);
		КонецЕсли;
		ОповещениеОЗакрытии = Новый ОписаниеОповещения("СоздатьАдресВводКИЗавершение", ЭтотОбъект, ДопПараметры);
		
		ДанныеАдресаJSON = ПолучитьДанныеАдресаJSON(АдресСтрока, ВидКИ);
		
		ПараметрыОткрытия = Новый Структура;
		ПараметрыОткрытия.Вставить("ВидКонтактнойИнформации", ВидКИ);
		ПараметрыОткрытия.Вставить("Значение",                ДанныеАдресаJSON);
		ПараметрыОткрытия.Вставить("Представление",           АдресСтрока);
		ПараметрыОткрытия.Вставить("ОткрытаПоСценарию",       Истина);
		
		ФормаАдреса = ОткрытьФорму("Обработка.ВводКонтактнойИнформации.Форма", ПараметрыОткрытия, Неопределено,,,, ОповещениеОЗакрытии);
		ФормаАдреса.Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеАдресаJSON(АдресСтрока, ВидКИ)
	ДанныеАдресаJSON = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияПоПредставлению(АдресСтрока, ВидКИ);
	Возврат ДанныеАдресаJSON;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЗначениеАдресаJSON(АдресСтрока, ВидКИ)
	ДанныеАдресаJSON = ПолучитьДанныеАдресаJSON(АдресСтрока, ВидКИ);
	ЗначениеАдреса = УправлениеКонтактнойИнформациейСлужебный.СтруктураВСтрокуJSON(ДанныеАдресаJSON);
	Возврат ЗначениеАдреса;
КонецФункции

&НаКлиенте
Процедура СоздатьАдресВводКИЗавершение(РезультатЗакрытия, ДопПараметры) Экспорт
	Если ТипЗнч(РезультатЗакрытия) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ТекстПредставления = РезультатЗакрытия.Представление;
	Если ПустаяСтрока(ТекстПредставления) Тогда
		Возврат;
	КонецЕсли;
	
	АдресДляПоиска = ТекстПредставления;
	ЗначениеАдреса = РезультатЗакрытия.Значение;
	Если ДопПараметры.Свойство("СтруктураДанныеАдреса")
		И ДопПараметры.СтруктураДанныеАдреса.Свойство("Широта")
		И ДопПараметры.СтруктураДанныеАдреса.Свойство("Долгота") Тогда
		КоординатыАдреса = Новый Структура("Широта, Долгота", ДопПараметры.СтруктураДанныеАдреса.Широта, ДопПараметры.СтруктураДанныеАдреса.Долгота);
		
		АдресДляПоиска   = ?(ДопПараметры.СтруктураДанныеАдреса.Свойство("АдресДляПоиска"),
		ДопПараметры.СтруктураДанныеАдреса.АдресДляПоиска, ТекстПредставления);
	Иначе
		КоординатыАдреса = ПолучитьКоординатыАдреса(ТекстПредставления, ЗначениеАдреса);
	КонецЕсли;

	НовыйАдресСсылка = СоздатьАдресСервер(ТекстПредставления, КоординатыАдреса, ЗначениеАдреса, АдресДляПоиска);
	Если ЗначениеЗаполнено(НовыйАдресСсылка) Тогда
		Объект[ДопПараметры.ПутьКДанным] = НовыйАдресСсылка;
		Если ДопПараметры.ПутьКДанным = "АдресОтправления" Тогда
			АдресОтправленияПриИзменении(Неопределено);
		ИначеЕсли ДопПараметры.ПутьКДанным = "АдресНазначения" Тогда
			АдресНазначенияПриИзменении(Неопределено);
		Иначе
			Выполнить(ДопПараметры.ПутьКДанным + "ПриИзменении(Неопределено);");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция СоздатьАдресСервер(АдресПредставление, КоординатыАдреса, ЗначениеАдреса, АдресДляПоиска = "")
	
	ТекстНСтр = "";
	НовыйАдрес = Справочники.уатПунктыНазначения.СоздатьЭлемент();
	НовыйАдрес.Лат                 = КоординатыАдреса.Широта;
	НовыйАдрес.Лон                 = КоординатыАдреса.Долгота;
	
	// Поиск существующего в базе пункта
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатПунктыНазначения.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.уатПунктыНазначения КАК уатПунктыНазначения
	|ГДЕ
	|	уатПунктыНазначения.ПометкаУдаления = ЛОЖЬ
	|	И уатПунктыНазначения.ЭтоГруппа = ЛОЖЬ
	|	И (уатПунктыНазначения.Наименование = &АдресПредставление
	|			ИЛИ уатПунктыНазначения.Адрес = &АдресПредставление)
	|	И (уатПунктыНазначения.Лат = &Широта
	|			ИЛИ &Широта = 0)
	|	И (уатПунктыНазначения.Лон = &Долгота
	|			ИЛИ &Долгота = 0)");
	Запрос.УстановитьПараметр("АдресПредставление", АдресПредставление);
	Запрос.УстановитьПараметр("Широта",             НовыйАдрес.Лат);
	Запрос.УстановитьПараметр("Долгота",            НовыйАдрес.Лон);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Результат = Выборка.Ссылка;
		ТекстНСтр = НСтр("ru = 'Обнаружен существующий пункт назначения. Новый элемент не был создан.'");
	Иначе
		Наименование = уатНастройкиШаблонов.СформироватьНаименованиеПоШаблону("Справочник_уатПунктыНазначения", НовыйАдрес);
		
		НовыйАдрес.Наименование        = Наименование;
		НовыйАдрес.Адрес               = АдресПредставление;
		НовыйАдрес.АдресДляПоиска      = АдресДляПоиска;
		НовыйАдрес.ЗначениеАдреса      = ЗначениеАдреса;
		НовыйАдрес.ТипПункта           = Справочники.уатТипыПунктов.Адрес;
		НовыйАдрес.Страна              = РаботаСАдресамиКлиентСервер.ОсновнаяСтрана();
		НовыйАдрес.УстановитьСлучайныйЦветПункта();
		НовыйАдрес.Записать();
		
		Результат = НовыйАдрес.Ссылка;
		ТекстНСтр = НСтр("ru = 'Новый пункт создан успешно.'");
	КонецЕсли;
	
	ОбщегоНазначения.СообщитьПользователю(ТекстНСтр);
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Функция ПолучитьКоординатыАдреса(АдресПредставление, ЗначениеАдресаJSON)
	СтруктураФорма = Новый Структура;
	СтруктураОбъект = Новый Структура("Лат, Лон, Ссылка", 0, 0, ПредопределенноеЗначение("Справочник.уатПунктыНазначения.ПустаяСсылка"));
	СтруктураОбъект.Вставить("ЗначениеАдреса", ЗначениеАдресаJSON);
	СтруктураФорма.Вставить("Объект", СтруктураОбъект);
	// {Совместимость}
	// Этот код - для совместимости с старым форматом хранения адреса в XML.
	СтруктураФорма.Вставить("ЗначениеПолей", "");
	// {/Совместимость}
	СтруктураФорма.Вставить("Модифицированность", Ложь);
	
	уатЭлектронныеКартыКлиент.ГеокодироватьКоординатыВПунктеНазначения(СтруктураФорма, Ложь);
	
	Рез = Новый Структура("Широта, Долгота", СтруктураФорма.Объект.Лат, СтруктураФорма.Объект.Лон);
	
	Возврат Рез;
КонецФункции

&НаКлиенте
Процедура СписокЭтаповОбновить(Команда)
	
	ОбновитьСписокЭтапов();
	
	#Если Не ВебКлиент Тогда
		ОбновитьПланировщикЭтапов();
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЭтаповОтклонитьЭтап(Команда)
	
	ТекСтрока = Элементы.ТабЭтапыЗаказа.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекстНСТР = НСтр("en='Specified stage will be rejected. Continue?';ru='Указанный этап будет отклонен. Продолжить?'");
	Оповещение = Новый ОписаниеОповещения("СписокЭтаповОтклонитьЭтапПослеПодтверждения", ЭтотОбъект, Новый Структура("Этап", ТекСтрока.Этап));
	ПоказатьВопрос(Оповещение, ТекстНСТР, РежимДиалогаВопрос.ДаНет, 30, КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДоходыПоЭтапам(Команда)
	
	ОбновитьДоходыПоЭтапамСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьРасходыПоЭтапам(Команда)
	
	ОбновитьРасходыПоЭтапамСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПланированияВперед(Команда)
	
	НачальнаяДатаПланирования = НачальнаяДатаПланирования + 86400;
	
	#Если Не ВебКлиент Тогда
		ОбновитьПланировщикЭтапов();
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПланированияНазад(Команда)
	
	НачальнаяДатаПланирования = НачальнаяДатаПланирования - 86400;           
	
	#Если Не ВебКлиент Тогда
		ОбновитьПланировщикЭтапов();
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаПланированияТекущая(Команда)
	
	Если Объект.ЭтоЭтап Тогда 
		НачальнаяДатаПланирования = НачалоДня(уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.РодительскийЗаказ, "ОтправлениеС"));
	Иначе 
		НачальнаяДатаПланирования = НачалоДня(Объект.ОтправлениеС);
	КонецЕсли;
	
	#Если Не ВебКлиент Тогда
		ОбновитьПланировщикЭтапов();
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьЭтапыСписком(Команда)
	
	Элементы.НастройкаОтображатьЭтапыСписком.Пометка   = Не Элементы.НастройкаОтображатьЭтапыСписком.Пометка;
	Элементы.ГруппаЭтапыЗаказаСтраницаСписка.Видимость = Объект.Мультимодальный И Не Объект.ЭтоЭтап И Элементы.НастройкаОтображатьЭтапыСписком.Пометка;
	
	Элементы.ТабЭтапыЗаказаСписокЭтаповОтклонитьЭтап.Видимость = Объект.Мультимодальный И Не Объект.ЭтоЭтап И Элементы.НастройкаОтображатьЭтапыСписком.Пометка;
	Элементы.ТабЭтапыЗаказаПереместитьВверх.Видимость          = Объект.Мультимодальный И Не Объект.ЭтоЭтап И Элементы.НастройкаОтображатьЭтапыСписком.Пометка;
	Элементы.ТабЭтапыЗаказаПереместитьВниз.Видимость           = Объект.Мультимодальный И Не Объект.ЭтоЭтап И Элементы.НастройкаОтображатьЭтапыСписком.Пометка;
	
	Если Не Элементы.Найти("ТабЭтапыЗаказаДобавить") = Неопределено Тогда 
		Элементы["ТабЭтапыЗаказаДобавить"].Видимость = Объект.Мультимодальный И Не Объект.ЭтоЭтап И Элементы.НастройкаОтображатьЭтапыСписком.Пометка;
	КонецЕсли;
	Если Не Элементы.Найти("ТабЭтапыЗаказаЗакончитьРедактирование") = Неопределено Тогда 
		Элементы["ТабЭтапыЗаказаЗакончитьРедактирование"].Видимость = Объект.Мультимодальный И Не Объект.ЭтоЭтап И Элементы.НастройкаОтображатьЭтапыСписком.Пометка;
	КонецЕсли;
	Если Не Элементы.Найти("ТабЭтапыЗаказаИзменить") = Неопределено Тогда 
		Элементы["ТабЭтапыЗаказаИзменить"].Видимость = Объект.Мультимодальный И Не Объект.ЭтоЭтап И Элементы.НастройкаОтображатьЭтапыСписком.Пометка;
	КонецЕсли;
	Если Не Элементы.Найти("ТабЭтапыЗаказаНайти") = Неопределено Тогда 
		Элементы["ТабЭтапыЗаказаНайти"].Видимость = Объект.Мультимодальный И Не Объект.ЭтоЭтап И Элементы.НастройкаОтображатьЭтапыСписком.Пометка;
	КонецЕсли;
	Если Не Элементы.Найти("ТабЭтапыЗаказаОтменитьПоиск") = Неопределено Тогда 
		Элементы["ТабЭтапыЗаказаОтменитьПоиск"].Видимость = Объект.Мультимодальный И Не Объект.ЭтоЭтап И Элементы.НастройкаОтображатьЭтапыСписком.Пометка;
	КонецЕсли;
	Если Не Элементы.Найти("ТабЭтапыЗаказаПереместить") = Неопределено Тогда 
		Элементы["ТабЭтапыЗаказаПереместить"].Видимость = Объект.Мультимодальный И Не Объект.ЭтоЭтап И Элементы.НастройкаОтображатьЭтапыСписком.Пометка;
	КонецЕсли;
	Если Не Элементы.Найти("ТабЭтапыЗаказаСкопировать") = Неопределено Тогда 
		Элементы["ТабЭтапыЗаказаСкопировать"].Видимость = Объект.Мультимодальный И Не Объект.ЭтоЭтап И Элементы.НастройкаОтображатьЭтапыСписком.Пометка;
	КонецЕсли;
	Если Не Элементы.Найти("ТабЭтапыЗаказаСортировка") = Неопределено Тогда 
		Элементы["ТабЭтапыЗаказаСортировка"].Видимость = Объект.Мультимодальный И Не Объект.ЭтоЭтап И Элементы.НастройкаОтображатьЭтапыСписком.Пометка;
	КонецЕсли;
	
	ОтображатьПланировщик = Элементы.НастройкаОтображатьЭтапыПланировщиком.Пометка И Не Объект.ЭтоШаблонПеревозки;
	Элементы.НастройкаДниПланировщика.Видимость                       = Объект.Мультимодальный И Не Объект.ЭтоЭтап И ОтображатьПланировщик;
	Элементы.НастройкаДетализацияПланировщика.Видимость               = Объект.Мультимодальный И Не Объект.ЭтоЭтап И ОтображатьПланировщик;
	Элементы.ПланировщикЭтаповЗаказаПланировщикПланФактДаты.Видимость = Объект.Мультимодальный И Не Объект.ЭтоЭтап И ОтображатьПланировщик;
	Элементы.ДатаПланированияНазад.Видимость                          = Объект.Мультимодальный И Не Объект.ЭтоЭтап И ОтображатьПланировщик;
	Элементы.ДатаПланированияТекущая.Видимость                        = Объект.Мультимодальный И Не Объект.ЭтоЭтап И ОтображатьПланировщик;
	Элементы.ДатаПланированияВперед.Видимость                         = Объект.Мультимодальный И Не Объект.ЭтоЭтап И ОтображатьПланировщик;
	Элементы.ТабЭтапыЗаказаПечать.Видимость                           = Объект.Мультимодальный И Не Объект.ЭтоЭтап И ОтображатьПланировщик;
	Элементы.ТабЭтапыЗаказаПредварительныйПросмотр.Видимость          = Объект.Мультимодальный И Не Объект.ЭтоЭтап И ОтображатьПланировщик;
	
	Элементы.ГруппаЭтапыЗаказа.Видимость = Объект.Мультимодальный И Не Объект.ЭтоЭтап И (Элементы.НастройкаОтображатьЭтапыПланировщиком.Пометка Или Элементы.НастройкаОтображатьЭтапыСписком.Пометка);
	
	СохранитьПользовательскиеНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьЭтапыПланировщиком(Команда)
	
	Элементы.НастройкаОтображатьЭтапыПланировщиком.Пометка         = Не Элементы.НастройкаОтображатьЭтапыПланировщиком.Пометка;
	Элементы.ГруппаЭтапыЗаказаСтраницаСпискаПланировщика.Видимость = Объект.Мультимодальный И Не Объект.ЭтоЭтап И Элементы.НастройкаОтображатьЭтапыПланировщиком.Пометка
		И Не Объект.ЭтоШаблонПеревозки;
	
	Элементы.ТабЭтапыЗаказаСписокЭтаповОтклонитьЭтап.Видимость = Объект.Мультимодальный И Не Объект.ЭтоЭтап И Элементы.НастройкаОтображатьЭтапыСписком.Пометка;
	Элементы.ТабЭтапыЗаказаПереместитьВверх.Видимость          = Объект.Мультимодальный И Не Объект.ЭтоЭтап И Элементы.НастройкаОтображатьЭтапыСписком.Пометка;
	Элементы.ТабЭтапыЗаказаПереместитьВниз.Видимость           = Объект.Мультимодальный И Не Объект.ЭтоЭтап И Элементы.НастройкаОтображатьЭтапыСписком.Пометка;
	
	Если Не Элементы.Найти("ТабЭтапыЗаказаДобавить") = Неопределено Тогда 
		Элементы["ТабЭтапыЗаказаДобавить"].Видимость = Объект.Мультимодальный И Не Объект.ЭтоЭтап И Элементы.НастройкаОтображатьЭтапыСписком.Пометка;
	КонецЕсли;
	Если Не Элементы.Найти("ТабЭтапыЗаказаЗакончитьРедактирование") = Неопределено Тогда 
		Элементы["ТабЭтапыЗаказаЗакончитьРедактирование"].Видимость = Объект.Мультимодальный И Не Объект.ЭтоЭтап И Элементы.НастройкаОтображатьЭтапыСписком.Пометка;
	КонецЕсли;
	Если Не Элементы.Найти("ТабЭтапыЗаказаИзменить") = Неопределено Тогда 
		Элементы["ТабЭтапыЗаказаИзменить"].Видимость = Объект.Мультимодальный И Не Объект.ЭтоЭтап И Элементы.НастройкаОтображатьЭтапыСписком.Пометка;
	КонецЕсли;
	Если Не Элементы.Найти("ТабЭтапыЗаказаНайти") = Неопределено Тогда 
		Элементы["ТабЭтапыЗаказаНайти"].Видимость = Объект.Мультимодальный И Не Объект.ЭтоЭтап И Элементы.НастройкаОтображатьЭтапыСписком.Пометка;
	КонецЕсли;
	Если Не Элементы.Найти("ТабЭтапыЗаказаОтменитьПоиск") = Неопределено Тогда 
		Элементы["ТабЭтапыЗаказаОтменитьПоиск"].Видимость = Объект.Мультимодальный И Не Объект.ЭтоЭтап И Элементы.НастройкаОтображатьЭтапыСписком.Пометка;
	КонецЕсли;
	Если Не Элементы.Найти("ТабЭтапыЗаказаПереместить") = Неопределено Тогда 
		Элементы["ТабЭтапыЗаказаПереместить"].Видимость = Объект.Мультимодальный И Не Объект.ЭтоЭтап И Элементы.НастройкаОтображатьЭтапыСписком.Пометка;
	КонецЕсли;
	Если Не Элементы.Найти("ТабЭтапыЗаказаСкопировать") = Неопределено Тогда 
		Элементы["ТабЭтапыЗаказаСкопировать"].Видимость = Объект.Мультимодальный И Не Объект.ЭтоЭтап И Элементы.НастройкаОтображатьЭтапыСписком.Пометка;
	КонецЕсли;
	Если Не Элементы.Найти("ТабЭтапыЗаказаСортировка") = Неопределено Тогда 
		Элементы["ТабЭтапыЗаказаСортировка"].Видимость = Объект.Мультимодальный И Не Объект.ЭтоЭтап И Элементы.НастройкаОтображатьЭтапыСписком.Пометка;
	КонецЕсли;
	
	ОтображатьПланировщик = Элементы.НастройкаОтображатьЭтапыПланировщиком.Пометка И Не Объект.ЭтоШаблонПеревозки;
	Элементы.НастройкаДниПланировщика.Видимость                       = Объект.Мультимодальный И Не Объект.ЭтоЭтап И ОтображатьПланировщик;
	Элементы.НастройкаДетализацияПланировщика.Видимость               = Объект.Мультимодальный И Не Объект.ЭтоЭтап И ОтображатьПланировщик;
	Элементы.ПланировщикЭтаповЗаказаПланировщикПланФактДаты.Видимость = Объект.Мультимодальный И Не Объект.ЭтоЭтап И ОтображатьПланировщик;
	Элементы.ДатаПланированияНазад.Видимость                          = Объект.Мультимодальный И Не Объект.ЭтоЭтап И ОтображатьПланировщик;
	Элементы.ДатаПланированияТекущая.Видимость                        = Объект.Мультимодальный И Не Объект.ЭтоЭтап И ОтображатьПланировщик;
	Элементы.ДатаПланированияВперед.Видимость                         = Объект.Мультимодальный И Не Объект.ЭтоЭтап И ОтображатьПланировщик;
	Элементы.ТабЭтапыЗаказаПечать.Видимость                           = Объект.Мультимодальный И Не Объект.ЭтоЭтап И ОтображатьПланировщик;
	Элементы.ТабЭтапыЗаказаПредварительныйПросмотр.Видимость          = Объект.Мультимодальный И Не Объект.ЭтоЭтап И ОтображатьПланировщик;
	
	Элементы.ГруппаЭтапыЗаказа.Видимость = Объект.Мультимодальный И Не Объект.ЭтоЭтап И (Элементы.НастройкаОтображатьЭтапыПланировщиком.Пометка Или Элементы.НастройкаОтображатьЭтапыСписком.Пометка);
	
	СохранитьПользовательскиеНастройки();
	
	ОбновитьПланировщикЭтапов();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьДоходыЭтапов(Команда)
	
	Элементы.НастройкаОтображатьДоходыЭтапов.Пометка = Не Элементы.НастройкаОтображатьДоходыЭтапов.Пометка;
	Элементы.ГруппаДоходыПоЭтапам.Видимость          = Элементы.НастройкаОтображатьДоходыЭтапов.Пометка;
	
	Если Элементы.НастройкаОтображатьДоходыЭтапов.Пометка Тогда 
		ОбновитьДоходыПоЭтапамСервер();
	КонецЕсли;
	
	СохранитьПользовательскиеНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьЗатратыЭтапов(Команда)
	
	Элементы.НастройкаОтображатьЗатратыЭтапов.Пометка = Не Элементы.НастройкаОтображатьЗатратыЭтапов.Пометка;
	Элементы.ГруппаРасходыПоЭтапам.Видимость          = Элементы.НастройкаОтображатьЗатратыЭтапов.Пометка;
	
	Если Элементы.НастройкаОтображатьЗатратыЭтапов.Пометка Тогда 
		ОбновитьРасходыПоЭтапамСервер();
	КонецЕсли;
	
	СохранитьПользовательскиеНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьДокументыЭтапов(Команда)
	
	Элементы.НастройкаОтображатьДокументыЭтапов.Пометка = Не Элементы.НастройкаОтображатьДокументыЭтапов.Пометка;
	Элементы.ДокументыЭтапов.Видимость                  = Элементы.НастройкаОтображатьДокументыЭтапов.Пометка;
	
	Если Элементы.НастройкаОтображатьДокументыЭтапов.Пометка Тогда 
		СопроводительныеДокументыОбновить();
	КонецЕсли;
	
	СохранитьПользовательскиеНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьСобытияЭтапов(Команда)
	
	Элементы.НастройкаОтображатьСобытияЭтапов.Пометка   = НЕ Элементы.НастройкаОтображатьСобытияЭтапов.Пометка;
	Элементы.СобытияЭтапов.Видимость                    = Элементы.НастройкаОтображатьСобытияЭтапов.Пометка;
	
	СохранитьПользовательскиеНастройки();
	
КонецПроцедуры

&НаСервере
Процедура ЗакрытиеЗаказаСервер(ДатаЗакрытия, СообщениеОшибки = "", Интерактивно = Ложь, флСуммаУслугИзменилась = Ложь)
	ДокументОбъект = РеквизитФормыВЗначение("Объект");
	ЗаписатьПромежуточныеПункты(ДокументОбъект);
	Документы.уатЗаказГрузоотправителя.ЗакрытиеДокумента(ДокументОбъект, ДатаЗакрытия, СообщениеОшибки, Интерактивно, флСуммаУслугИзменилась);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьГрузовойСоставПоРодительскомуЗаказу(Команда)
	
	Если Объект.ГрузовойСостав.Количество() Тогда 
		ТекстНСТР = НСтр("en='Clear the table ""Cargos"" before filling?';ru='Очистить таблицу ""Грузы"" перед заполнением?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьГрузовойСоставПоРодительскомуОтвет", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстНСТР, РежимДиалогаВопрос.ДаНетОтмена);
	Иначе 
		ЗаполнитьГрузовойСоставПоРодительскомуЗаполнение();
	КонецЕсли;
	
	РассчитатьПоказателиСервер(Ложь);
	ОбновитьВалютуВТЧГрузовТоваровСервер();
	ОбновитьПараметрВыработкиВременныйОказ();
	ОбновитьПараметрВыработкиВременныйПолуч();
	ОбновитьНадписьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТоварныйСоставПоРодительскомуЗаказу(Команда)
	
	Если Объект.Товары.Количество() Тогда 
		ТекстНСТР = НСтр("en='Clean table ""Goods"" before filling?';ru='Очистить таблицу ""Товары"" перед заполнением?'");
		Оповещение = Новый ОписаниеОповещения("ЗаполнитьТоварныйСоставПоРодительскомуОтвет", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстНСТР, РежимДиалогаВопрос.ДаНетОтмена);
	Иначе 
		ЗаполнитьТоварныйСоставПоРодительскомуЗаполнение();
	КонецЕсли;
	
	РассчитатьПоказателиСервер(Ложь);
	ОбновитьВалютуВТЧГрузовТоваровСервер();
	ОбновитьПараметрВыработкиВременныйОказ();
	ОбновитьПараметрВыработкиВременныйПолуч();
	ОбновитьНадписьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьДоходыВСтроке(Команда)
	ТекСтрока = Элементы.Услуги.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПересчитатьДоходыСервер(Ложь, ТекСтрока.НомерСтроки);
	
	РассчитатьСуммуДокумента();
	ОбновитьВсегоВТЧУслуги();
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьДоходыВСтрокеПлан(Команда)
	ТекСтрока = Элементы.Услуги.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПересчитатьДоходыСервер(Истина, ТекСтрока.НомерСтроки);
		
	РассчитатьСуммуДокумента();
	ОбновитьВсегоВТЧУслуги();
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьДоходы(Команда)
	ПересчитатьДоходыСервер(Ложь);
	
	РассчитатьСуммуДокумента();
	ОбновитьВсегоВТЧУслуги();
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьДоходыПлан(Команда)
	ПересчитатьДоходыСервер(Истина);
	
	РассчитатьСуммуДокумента();
	ОбновитьВсегоВТЧУслуги();
КонецПроцедуры

&НаСервере
Процедура ПересчитатьДоходыСервер(флПлан, НомерСтроки = Неопределено)
	Если НомерСтроки <> Неопределено Тогда
		ПересчитатьДоходыВТекущейСтроке(Объект.Услуги[НомерСтроки-1], флПлан);
	Иначе
		Для Каждого ТекСтрока Из Объект.Услуги Цикл
			ПересчитатьДоходыВТекущейСтроке(ТекСтрока, флПлан);
		КонецЦикла;
	КонецЕсли;
	
	ОбновитьПодвалСервер();
	ОбновитьПараметрВыработкиВременныйОказ();
	ОбновитьПодвалПрибыли();
КонецПроцедуры

&НаСервере
Процедура ПересчитатьДоходыВТекущейСтроке(ТекСтрока, флПлан = Ложь)
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Расстояние", Объект.Расстояние);
	ДопПараметры.Вставить("Время", Объект.Время);
	ДопПараметры.Вставить("ВесГруза", Объект.ВесБрутто);
	ДопПараметры.Вставить("ОбъемГруза", Объект.Объем);
	ДопПараметры.Вставить("КоличествоМест", Объект.КоличествоМест);
	ДопПараметры.Вставить("СтоимостьГруза", Объект.СтоимостьГруза);
	ДопПараметры.Вставить("Грузоподъемность", 0);
	ДопПараметры.Вставить("КлассГруза", 0);
	ДопПараметры.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	ДопПараметры.Вставить("ВалютаТоваров", Объект.ВалютаТоваров);
	ДопПараметры.Вставить("КурсДокумента", Объект.КурсВзаиморасчетов);
	ДопПараметры.Вставить("КратностьДокумента", Объект.КратностьВзаиморасчетов);
	ДопПараметры.Вставить("Дата", Объект.Дата);
	ДопПараметры.Вставить("ИмяТЧ", "Услуги");
	ДопПараметры.Вставить("НомерСтрокиДокумента", ТекСтрока.НомерСтроки-1);
	ДопПараметры.Вставить("Контрагент", Объект.Контрагент);
	ДопПараметры.Вставить("ПересчетКоличества", Истина);
	ДопПараметры.Вставить("флПлан", флПлан);
	
	Если флПлан Тогда
		СтруктураСтроки = Новый Структура("Тариф, Цена, Количество, Сумма, СтавкаНДС, СуммаНДС, Валюта, ПроцентСкидки, СуммаСкидки",
			ТекСтрока.Тариф, ТекСтрока.ЦенаПлан, ТекСтрока.КоличествоПлан, ТекСтрока.СуммаПлан, ТекСтрока.СтавкаНДС,
			ТекСтрока.СуммаНДСПлан, ТекСтрока.Валюта, ТекСтрока.ПроцентСкидки, ТекСтрока.СуммаСкидкиПлан);
			
		РассчитатьСтоимостьУслуги(СтруктураСтроки, ДопПараметры);
		
		ТекСтрока.Тариф           = СтруктураСтроки.Тариф;
		ТекСтрока.ЦенаПлан        = СтруктураСтроки.Цена;
		ТекСтрока.КоличествоПлан  = СтруктураСтроки.Количество;
		ТекСтрока.СуммаПлан       = СтруктураСтроки.Сумма;
		ТекСтрока.СтавкаНДС       = СтруктураСтроки.СтавкаНДС;
		ТекСтрока.СуммаНДСПлан    = СтруктураСтроки.СуммаНДС;
		ТекСтрока.Валюта          = СтруктураСтроки.Валюта;
		ТекСтрока.ПроцентСкидки   = СтруктураСтроки.ПроцентСкидки;
		ТекСтрока.СуммаСкидкиПлан = СтруктураСтроки.СуммаСкидки;
				
		РассчитатьСуммуНДССервер(ТекСтрока, "План");
	Иначе
		СтруктураСтроки = Новый Структура("Тариф, Цена, Количество, Сумма, СтавкаНДС, СуммаНДС, Валюта, ПроцентСкидки, СуммаСкидки",
			ТекСтрока.Тариф, ТекСтрока.Цена, ТекСтрока.Количество, ТекСтрока.Сумма, ТекСтрока.СтавкаНДС,
			ТекСтрока.СуммаНДС, ТекСтрока.Валюта, ТекСтрока.ПроцентСкидки, ТекСтрока.СуммаСкидки);
			
		РассчитатьСтоимостьУслуги(СтруктураСтроки, ДопПараметры);
		
		ТекСтрока.Тариф         = СтруктураСтроки.Тариф;
		ТекСтрока.Цена          = СтруктураСтроки.Цена;
		ТекСтрока.Количество    = СтруктураСтроки.Количество;
		ТекСтрока.Сумма         = СтруктураСтроки.Сумма;
		ТекСтрока.СтавкаНДС     = СтруктураСтроки.СтавкаНДС;
		ТекСтрока.СуммаНДС      = СтруктураСтроки.СуммаНДС;
		ТекСтрока.Валюта        = СтруктураСтроки.Валюта;
		ТекСтрока.ПроцентСкидки = СтруктураСтроки.ПроцентСкидки;
		ТекСтрока.СуммаСкидки   = СтруктураСтроки.СуммаСкидки;
		
		РассчитатьСуммуНДССервер(ТекСтрока, "Факт");
	КонецЕсли;
	
	ТекСтрока.РучнойВвод = Ложь;
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьРасходыВСтроке(Команда)
	ТекСтрока = Элементы.ПолучаемыеУслуги.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПересчитатьРасходыСервер(Ложь, ТекСтрока.НомерСтроки);
	
	ОбновитьВсегоВТЧПолучаемыеУслуги();
	ОбновитьНДСвТЧРасходы();
КонецПроцедуры                                           

&НаКлиенте
Процедура ПересчитатьРасходыВСтрокеПлан(Команда)
	ТекСтрока = Элементы.ПолучаемыеУслуги.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПересчитатьРасходыСервер(Истина, ТекСтрока.НомерСтроки);
	
	ОбновитьВсегоВТЧПолучаемыеУслуги();
	ОбновитьНДСвТЧРасходы();
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьРасходы(Команда)
	ПересчитатьРасходыСервер(Ложь);
	
	РассчитатьСуммуДокумента();
	ОбновитьВсегоВТЧПолучаемыеУслуги();
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьРасходыПлан(Команда)
	ПересчитатьРасходыСервер(Истина);
	
	РассчитатьСуммуДокумента();
	ОбновитьВсегоВТЧПолучаемыеУслуги();
	ОбновитьНДСвТЧРасходы();
КонецПроцедуры

&НаСервере
Процедура ПересчитатьРасходыСервер(флПлан, НомерСтроки = Неопределено)
	Если НомерСтроки <> Неопределено Тогда
		ПересчитатьРасходыВТекущейСтроке(Объект.Расходы[НомерСтроки-1], флПлан);
	Иначе
		Для Каждого ТекСтрока Из Объект.Расходы Цикл
			ПересчитатьРасходыВТекущейСтроке(ТекСтрока, флПлан);
		КонецЦикла;
	КонецЕсли;
	
	ОбновитьПодвалДоходовРасходов("Расходы");
	ОбновитьПодвалСервер();
	ОбновитьПараметрВыработкиВременныйПолуч();
	ОбновитьПодвалПрибыли();
КонецПроцедуры

&НаСервере
Процедура ПересчитатьРасходыВТекущейСтроке(ТекСтрока, флПлан = Ложь)
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Расстояние", Объект.Расстояние);
	ДопПараметры.Вставить("Время", Объект.Время);
	ДопПараметры.Вставить("ВесГруза", Объект.ВесБрутто);
	ДопПараметры.Вставить("ОбъемГруза", Объект.Объем);
	ДопПараметры.Вставить("КоличествоМест", Объект.КоличествоМест);
	ДопПараметры.Вставить("СтоимостьГруза", Объект.СтоимостьГруза);
	ДопПараметры.Вставить("Грузоподъемность", 0);
	ДопПараметры.Вставить("КлассГруза", 0);
	ДопПараметры.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	ДопПараметры.Вставить("ВалютаТоваров", Объект.ВалютаТоваров);
	ДопПараметры.Вставить("КурсДокумента", Объект.КурсВзаиморасчетов);
	ДопПараметры.Вставить("КратностьДокумента", Объект.КратностьВзаиморасчетов);
	ДопПараметры.Вставить("Дата", Объект.Дата);
	ДопПараметры.Вставить("ИмяТЧ", "Расходы");
	ДопПараметры.Вставить("НомерСтрокиДокумента", ТекСтрока.НомерСтроки-1);
	ДопПараметры.Вставить("Контрагент", ТекСтрока.Контрагент);
	ДопПараметры.Вставить("ПересчетКоличества", Истина);
	ДопПараметры.Вставить("флПлан", флПлан);
	
	Если флПлан Тогда
		СтруктураСтроки = Новый Структура("Тариф, Цена, Количество, Сумма, СтавкаНДС, Валюта, Договор",
			ТекСтрока.Тариф, ТекСтрока.ЦенаПлан, ТекСтрока.КоличествоПлан, ТекСтрока.СуммаПлан, ТекСтрока.СтавкаНДС,
			ТекСтрока.Валюта, ТекСтрока.Договор);
			
		РассчитатьСтоимостьУслуги(СтруктураСтроки, ДопПараметры);
		
		ТекСтрока.Тариф = СтруктураСтроки.Тариф;
		ТекСтрока.ЦенаПлан = СтруктураСтроки.Цена;
		ТекСтрока.КоличествоПлан = СтруктураСтроки.Количество;
		ТекСтрока.СуммаПлан = СтруктураСтроки.Сумма;
		ТекСтрока.СтавкаНДС = СтруктураСтроки.СтавкаНДС;
		ТекСтрока.Валюта = СтруктураСтроки.Валюта;
		
		РассчитатьСуммуНДССервер(ТекСтрока, "План");
	Иначе
		СтруктураСтроки = Новый Структура("Тариф, Цена, Количество, Сумма, СтавкаНДС, Валюта, Договор",
			ТекСтрока.Тариф, ТекСтрока.Цена, ТекСтрока.Количество, ТекСтрока.Сумма, ТекСтрока.СтавкаНДС,
			ТекСтрока.Валюта, ТекСтрока.Договор);
			
		РассчитатьСтоимостьУслуги(СтруктураСтроки, ДопПараметры);
		
		ЗаполнитьЗначенияСвойств(ТекСтрока, СтруктураСтроки);
		ТекСтрока.Валюта = СтруктураСтроки.Валюта;
		
		РассчитатьСуммуНДССервер(ТекСтрока, "Факт");
	КонецЕсли;
		
	ТекСтрока.РучнойВвод = Ложь;
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьОтправителяПоКонтрагенту(Команда)
	
	ПараметрыФормы = Новый Структура("Контрагент, НачальноеЗначениеВыбора, Режим", Объект.Контрагент, Объект.Грузоотправитель, "Грузоотправитель");
	Оповещение = Новый ОписаниеОповещения("Подключаемый_ВыбратьОтправителяПоКонтрагентуЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Документ.уатЗаказГрузоотправителя.Форма.ФормаВыбораОтправителяПолучателя", ПараметрыФормы, ЭтотОбъект,,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПолучателяПоКонтрагенту(Команда)
	
	ПараметрыФормы = Новый Структура("Контрагент, НачальноеЗначениеВыбора, Режим", Объект.Контрагент, Объект.Грузополучатель, "Грузополучатель");
	Оповещение = Новый ОписаниеОповещения("Подключаемый_ВыбратьПолучателяПоКонтрагентуЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Документ.уатЗаказГрузоотправителя.Форма.ФормаВыбораОтправителяПолучателя", ПараметрыФормы, ЭтотОбъект,,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьАдресОтправленияИзКИ(Команда)
	
	ПараметрыФормы = Новый Структура("Контрагент, Режим", Объект.Грузоотправитель, "КонтактноеЛицоАдрес");
	Оповещение = Новый ОписаниеОповещения("Подключаемый_ВыбратьАдресОтправленияИзКИЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Документ.уатЗаказГрузоотправителя.Форма.ФормаВыбораОтправителяПолучателя", ПараметрыФормы, ЭтотОбъект,,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьАдресНазначенияИзКИ(Команда)
	
	ПараметрыФормы = Новый Структура("Контрагент, Режим", Объект.Грузополучатель, "КонтактноеЛицоАдрес");
	Оповещение = Новый ОписаниеОповещения("Подключаемый_ВыбратьАдресНазначенияИзКИЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Документ.уатЗаказГрузоотправителя.Форма.ФормаВыбораОтправителяПолучателя", ПараметрыФормы, ЭтотОбъект,,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетПланФактДоходыРасходы(Команда)
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Отбор",                   Новый Структура("Заказ", ЗаказИЭтапы(Объект.Ссылка)));
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	ПараметрыФормы.Вставить("КлючВарианта", "Расшифровка заказа");
	ОткрытьФорму("Отчет.уатСравнениеПлановыхИФактическихДоходовИРасходов.Форма", ПараметрыФормы, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетОказУслуги(Команда)
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Отбор",                   Новый Структура("ЗаказНаТС", ЗаказИЭтапы(Объект.Ссылка)));
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	ПараметрыФормы.Вставить("КлючВарианта", "Расшифровка заказа");
	ОткрытьФорму("Отчет.уатОказанныеТранспортныеУслуги.Форма", ПараметрыФормы, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтчетКонтрольПлатежей(Команда)
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Отбор",                   Новый Структура("ЗаказНаТС", ЗаказИЭтапы(Объект.Ссылка)));
	ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
	ПараметрыФормы.Вставить("КлючВарианта", "Контроль отсрочки платежей по этапам оплаты");
	ОткрытьФорму("Отчет.уатКонтрольОтсрочкиПлатежей.Форма", ПараметрыФормы, ЭтотОбъект);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаказИЭтапы(ЗаказНаТС)
	Если НЕ ЗаказНаТС.Мультимодальный Тогда
		Возврат ЗаказНаТС;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	уатЗаказГрузоотправителя.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	|ГДЕ
	|	уатЗаказГрузоотправителя.РодительскийЗаказ = &РодительскийЗаказ");
	Запрос.УстановитьПараметр("РодительскийЗаказ", ЗаказНаТС);
	мсвРез = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	мсвРез.Добавить(ЗаказНаТС);
	
	Возврат мсвРез;
КонецФункции

&НаКлиенте
Процедура ОбновитьПодвалПрибыль(Команда)
	ОбновитьПодвалПрибыли(Истина);
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаТары(Команда)
	
	ДанныеПоТаре = ПолучитьДанныеПоТаре();
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Тара", ДанныеПоТаре);
	
	ОткрытьФорму("ОбщаяФорма.уатРасшифровкаТары", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура Закрытие(Команда)
	
	Если СтатусДокумента = ПредопределенноеЗначение("Справочник.уатСтатусы_уэ.Закрыт") Тогда
		Если Объект.Мультимодальный И НЕ Объект.ЭтоЭтап Тогда
			Возврат;
		КонецЕсли;
		Отказ = Ложь;
		ОтменитьСтатусЗакрытДокумента(Отказ);
		Если НЕ Отказ Тогда
			Элементы.ФормаЗакрытие.Заголовок = Нстр("en = 'Closing'; ru = 'Закрытие'");
			УстановитьУсловноеОформлениеПолейСтатусов();
			УстановитьДоступностьДокументаПоИзменениямСтатуса();
			ОбновитьНадписьИтоги();
			Прочитать();
		КонецЕсли;
	Иначе
		ПоказатьВводДаты(
		Новый ОписаниеОповещения("ЗакрытиеВводДатыЗавершение", ЭтотОбъект),
		ТекущаяДата(),
		НСтр("en='Enter closing date and time';ru='Введите дату и время закрытия'"), 
		ЧастиДаты.ДатаВремя
		);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтменитьСтатусЗакрытДокумента(Отказ)
	
	РазрешитьРедактирование = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ПользователиКлиентСервер.АвторизованныйПользователь(), "РазрешитьРедактированиеЗакрытыхДокументов");
	Если НЕ РазрешитьРедактирование Тогда
		ТекстНСТР = НСтр("en='There are no rights to edit private documents.';ru='Нет прав на редактирование закрытых документов.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		Отказ = Истина;
	Иначе
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
		Запрос.Текст = "ВЫБРАТЬ ПЕРВЫЕ 1
		|	уатСтатусыГрузов_уэ.Статус КАК Статус
		|ИЗ
		|	РегистрСведений.уатСтатусыГрузов_уэ КАК уатСтатусыГрузов_уэ
		|ГДЕ
		|	уатСтатусыГрузов_уэ.Заказ = &Ссылка
		|	И уатСтатусыГрузов_уэ.Статус <> ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Закрыт)
		|
		|УПОРЯДОЧИТЬ ПО
		|	уатСтатусыГрузов_уэ.МоментВремени УБЫВ,
		|	уатСтатусыГрузов_уэ.Регистратор.МоментВремени УБЫВ";
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда 
			СтатусДокумента = Выборка.Статус;
		Иначе
			СтатусДокумента = Справочники.уатСтатусы_уэ.Новый;
		КонецЕсли;
		
		// очищаем дату закрытия, если статус заказа изменился на не закрытый
		Если Объект.ДатаЗакрытия <> '00010101' И СтатусДокумента <> Справочники.уатСтатусы_уэ.Закрыт Тогда
			ДокОбъект = Объект.Ссылка.ПолучитьОбъект();
			ДокОбъект.ДатаЗакрытия = '00010101';
			Попытка
				ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
			Исключение
			КонецПопытки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДоговорКонтрагента(Команда)
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Оповещ = Новый ОписаниеОповещения("СоздатьДоговорКонтрагентаВопрос", ЭтотОбъект);
		ПоказатьВопрос(Оповещ, "Будет создан и подставлен в документ новый договор. Продолжить?", РежимДиалогаВопрос.ОКОтмена);
	Иначе
		СоздатьДоговорКонтрагентаЗавершение();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДоговорКонтрагентаВопрос(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.ОК Тогда
		СоздатьДоговорКонтрагентаЗавершение();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДоговорКонтрагентаЗавершение()
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Владелец", Объект.Контрагент);
	ПараметрыЗаполнения.Вставить("Контрагент", Объект.Контрагент);
	ПараметрыЗаполнения.Вставить("Организация", Объект.Организация);
	Объект.ДоговорКонтрагента = уатНастройкиШаблонов.СоздатьДоговорКонтрагентаПоШаблону(ПараметрыЗаполнения, "1", Истина);
	ДоговорКонтрагентаПриИзменении(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура НастроитьШаблонДоговора(Команда)
	ПараметрыФормы = Новый Структура("ОбъектНастройки, ОбъектДоговора", "Справочник_ДоговорыКонтрагентов", "1");
	ОткрытьФорму("ОбщаяФорма.уатНастройкаШаблона", ПараметрыФормы, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
КонецПроцедуры

&НаКлиенте
Процедура ОформлениеДокументов(Команда)
	Если Объект.Ссылка.Пустая() Тогда
		ТекстНСТР = НСтр("en='To perform this operation, you must record the item. The document will be recorded.';ru='Для выполнения данной операции необходимо записать документ. Данные будут записаны.'");
		
		ОповещениеЗаписатьОбъект = Новый ОписаниеОповещения("ОформлениеДокументовПродолжение", ЭтотОбъект);
		
		ПоказатьВопрос(ОповещениеЗаписатьОбъект, ТекстНСТР, РежимДиалогаВопрос.ДаНет);
	Иначе
		ОткрытьФорму("ОбщаяФорма.уатФормаОформленияДокументов_уэ",,ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ППОтправительПолучательПоКонтрагенту(Команда)
	
	ТекущиеДанные = Элементы.ПромежуточныеПункты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Контрагент", Объект.Контрагент);
	ПараметрыФормы.Вставить("НачальноеЗначениеВыбора", ТекущиеДанные.ОтправительПолучатель);
	
	Если ТекущиеДанные.ТипТочкиМаршрута = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Погрузка")
			Или ТекущиеДанные.ТипТочкиМаршрута = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.ДополнительнаяПогрузка") Тогда 
		ПараметрыФормы.Вставить("Режим", "Грузоотправитель");
	Иначе 
		ПараметрыФормы.Вставить("Режим", "Грузополучатель");
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("Подключаемый_ППОтправительПолучательПоКонтрагентуЗавершение", ЭтотОбъект, ТекущиеДанные);
	
	ОткрытьФорму("Документ.уатЗаказГрузоотправителя.Форма.ФормаВыбораОтправителяПолучателя", ПараметрыФормы, ЭтотОбъект,,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПППунктИзКИ(Команда)
	
	ТекущиеДанные = Элементы.ПромежуточныеПункты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Контрагент, Режим", ТекущиеДанные.ОтправительПолучатель, "КонтактноеЛицоАдрес");
	Оповещение = Новый ОписаниеОповещения("Подключаемый_ПППунктИзКИЗавершение", ЭтотОбъект, ТекущиеДанные);
	
	ОткрытьФорму("Документ.уатЗаказГрузоотправителя.Форма.ФормаВыбораОтправителяПолучателя", ПараметрыФормы, ЭтотОбъект,,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ППСоздатьПункт(Команда)
	
	ТекущиеДанные = Элементы.ПромежуточныеПункты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ТипЗнч(ТекущиеДанные.Пункт) = Тип("Строка") Тогда 
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(ТекущиеДанные.Пункт) Тогда
		ТекстНСТР = НСтр("ru='Не заполнен пункт назначения.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР); 
		Возврат;
	КонецЕсли;
	
	ВидКИ = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента");
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ППСоздатьПунктЗавершение", ЭтотОбъект, ТекущиеДанные);
	
	ДанныеАдресаJSON = ПолучитьДанныеАдресаJSON(ТекущиеДанные.Пункт, ВидКИ);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ВидКонтактнойИнформации", ВидКИ);
	ПараметрыОткрытия.Вставить("Значение",                ДанныеАдресаJSON);
	ПараметрыОткрытия.Вставить("Представление",           ТекущиеДанные.Пункт);
	ПараметрыОткрытия.Вставить("ОткрытаПоСценарию",       Истина);
	
	ФормаАдреса = ОткрытьФорму("Обработка.ВводКонтактнойИнформации.Форма", ПараметрыОткрытия, Неопределено,,,, ОповещениеОЗакрытии);
	ФормаАдреса.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОтрезокПутиВГрузах(Команда)
	
	флТребуетсяОчистка = Объект.ОтрезкиПути.Количество() > 0;
	
	Если флТребуетсяОчистка Тогда 
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ЗаполнитьОтрезокПутиВГрузахВыборВарианта", ЭтотОбъект),
			НСтр("ru = 'Значение во всех строках будет заменено на выбранное. Продолжить?'"),
			РежимДиалогаВопрос.ДаНет,
		);
		
	Иначе 
		ЗаполнитьОтрезокПутиВГрузахВыборВарианта(КодВозвратаДиалога.Да, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОтрезокПутиВТоварах(Команда)
	
	флТребуетсяОчистка = Объект.ОтрезкиПути.Количество() > 0;
	
	Если флТребуетсяОчистка Тогда 
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ЗаполнитьОтрезокПутиВТоварахВыборВарианта", ЭтотОбъект),
			НСтр("ru = 'Значение во всех строках будет заменено на выбранное. Продолжить?'"),
			РежимДиалогаВопрос.ДаНет,
		);
		
	Иначе 
		ЗаполнитьОтрезокПутиВТоварахВыборВарианта(КодВозвратаДиалога.Да, Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПолучателейУведомлений(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Документ", Объект);
	ПараметрыФормы.Вставить("ТипДокумента", ПредопределенноеЗначение("Перечисление.уатТипыОбъектовДляУведомлений_уэ.ЗаказНаТС"));
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ПолучателиУведомленийЗакрытиеФормы", ЭтаФорма);
	
	ОткрытьФорму("Документ.уатПотребностьВПеревозке_уэ.Форма.ФормаПолучателейУведомлений",
		ПараметрыФормы,
		ЭтаФорма,,,,
		ОповещениеОЗакрытии,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРедакторСхемыПеревозки(Команда)
	
	ПараметрыСхемы = Новый Структура();
	ПараметрыСхемы.Вставить("ФлагFTLЗаказ", Объект.FTL);
	ПараметрыСхемы.Вставить("ФлагМультимодальныйЗаказ", Объект.Мультимодальный И Не Объект.ЭтоЭтап);
	Если Не ПараметрыСхемы.ФлагFTLЗаказ И Не ПараметрыСхемы.ФлагМультимодальныйЗаказ Тогда
		ТекстНСТР = НСтр("en='Editor can only be opened for multimodal parent order or FTL order.';ru='Редактор схемы доступен только для родительского мультимодального заказа или для FTL заказа.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Или Параметры.Ключ.Пустая() Тогда 
		ТекстНСТР = НСтр("en='Before opening the editor the changes will be saved. Continue?';ru='Перед открытием редактора схемы необходимо сохранить изменения. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ОткрытьРедакторСхемыПеревозкиЗаписьДокумента", ЭтотОбъект, ПараметрыСхемы);
		ПоказатьВопрос(Оповещение, ТекстНСТР, РежимДиалогаВопрос.ДаНет);
	Иначе 
		ОткрытьРедакторСхемыПеревозкиПослеЗаписиДокумента(ПараметрыСхемы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РежимТехническогоСпециалиста(Команда)
	Элементы.ФормаРежимТехническогоСпециалиста.Пометка = Не Элементы.ФормаРежимТехническогоСпециалиста.Пометка;
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСтраховойСертификат(Команда)
	ОткрытьФорму("Документ.уатСтраховойСертификат_уэ.Форма.ФормаДокумента",Новый Структура("Основание", Объект.Ссылка),Объект.Ссылка);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСобытие(Команда)
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		ТекстНСТР = НСтр("en='Necessary to record the document. Record?'
		|;ru='Необходимо записать документ. Записать?'");
		Оповещение = Новый ОписаниеОповещения("СоздатьСобытиеОтветНаВопросЗаписиДокумента", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстНСТР, РежимДиалогаВопрос.ОКОтмена, 30, КодВозвратаДиалога.ОК);
	Иначе
		ПараметрыОткрытия = Новый Структура("ЭтоШаблонПеревозки,ОткрытИзДокумента,ДокументПеревозки", 
			Объект.ЭтоШаблонПеревозки, Истина, Объект.Ссылка);
		ОткрытьФорму("РегистрСведений.уатСобытияПоПеревозке_уэ.ФормаЗаписи", ПараметрыОткрытия, Объект.Ссылка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СобытияОбновить(Команда)
	УстановитьОтборСобытий();
	Элементы.События.Обновить();
	Если Элементы.СобытияЭтапов.Видимость Тогда
		Элементы.СобытияЭтапов.Обновить();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтчетИсторияЗаказа(Команда)
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(Объект.Ссылка);
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.уатЗаказГрузоотправителя", "ЗаказНаТСИсторияЗаказа", МассивОбъектов, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьМаршрут(Команда)
	МассивРезультатов = Новый Массив;
	МассивРезультатов = ПоискМаршрута(МассивРезультатов, Истина);
	
	Если МассивРезультатов.Количество() > 1 Тогда
		МаршрутЗаполненПоиском = Истина;
		Элементы.Маршрут.СписокВыбора.Очистить();
		Элементы.Маршрут.СписокВыбора.ЗагрузитьЗначения(МассивРезультатов);
		Объект.Маршрут = МассивРезультатов[0];
		Модифицированность = Истина;
	ИначеЕсли МассивРезультатов.Количество() = 1 Тогда
		Объект.Маршрут = МассивРезультатов[0];
		Модифицированность = Истина;
	ИначеЕсли МассивРезультатов.Количество() = 0 Тогда
		ТекстСообщения = НСтр("ru='Подходящий маршрут не найден'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьМаршрут(Команда)
	ПодходящиеМаршруты = Новый Массив;
	ПодходящиеМаршруты = ПоискМаршрута(ПодходящиеМаршруты, Истина);
	
	Если ПодходящиеМаршруты.Количество() <> 0 Тогда
		Оповещение = Новый ОписаниеОповещения("СоздатьМаршрутЗавершение", ЭтотОбъект, ПодходящиеМаршруты);
		ПоказатьВопрос(Оповещение, НСтр("ru='Найден существующий маршрут, выполнить создание нового?'"), 
			РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	Иначе
		СоздатьМаршрутФрагмент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетАнализОтгрузки(Команда)
	ПараметрыОткрытия = ПолучитьПараметрыОткрытияОтчетАнализОтгрузки(Объект.Ссылка);
	ОткрытьФорму("Отчет.уатАнализОтгрузки_уэ.Форма", ПараметрыОткрытия, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОтчетАнализПриемки(Команда)
	ПараметрыОткрытия = ПолучитьПараметрыОткрытияОтчетАнализПриемки(Объект.Ссылка);
	ОткрытьФорму("Отчет.уатАнализПриемки_уэ.Форма", ПараметрыОткрытия, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОтчетОстаткиГрузовНаСкладахКомплектации(Команда)
	ПараметрыОткрытия = ПолучитьПараметрыОткрытияОтчетОстаткиГрузовНаСкладахКомплектации(Объект.Ссылка);
	ОткрытьФорму("Отчет.уатОстаткиГрузовНаСкладахКомплектации_уэ.Форма", ПараметрыОткрытия, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОтчетГрузыВРейсах(Команда)
	ПараметрыОткрытия = ПолучитьПараметрыОткрытияОтчетГрузыВРейсах(Объект.Ссылка);
	ОткрытьФорму("Отчет.уатГрузыВРейсах_уэ.Форма", ПараметрыОткрытия, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОтчетИсторияОперацийСГрузом(Команда)
	ПараметрыОткрытия = ПолучитьПараметрыОткрытияОтчетИсторияОперацийСГрузом(Объект.Ссылка);
	ОткрытьФорму("Отчет.уатИсторияОперацийСГрузом_уэ.Форма", ПараметрыОткрытия, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура РазбитьНаЭтапы(Команда)
	
	Если Объект.Мультимодальный И Объект.ЭтоЭтап Тогда
		ТекстНСтр = НСтр("ru='Данная операция недоступна для этапа мультимодального заказа';
			|en='This operation is not allowed for stages of multimodal orders'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстНСтр);
	ИначеЕсли Объект.FTL Тогда
		ТекстНСтр = НСтр("ru='Для родительского мультимодального заказа флаг FTL должен быть снят';
			|en='This operation is not allowed for FTL orders'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстНСтр);
	ИначеЕсли Модифицированность Тогда
		ТекстНСТР = НСтр("en='Before changing the steps it is necessary to record the document. Record?'
			|;ru='Перед разбиением на этапы необходимо записать документ. Записать?'");
		Оповещение = Новый ОписаниеОповещения("РазбитьНаЭтапыОтветНаВопросЗаписиДокумента", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстНСТР, РежимДиалогаВопрос.ОКОтмена, 30, КодВозвратаДиалога.ОК);
	ИначеЕсли ТабЭтапыЗаказа.Количество() Тогда
		ТекстНСтр = НСтр("ru='Все существующие этапы будут удалены. Продолжить?';
			|en='Existing stages will be marked for deletion. Continue?'");
		ОписаниеОповещенияОЗавершении 
			= Новый ОписаниеОповещения("РазбитьНаЭтапыОтветНаВопросУдаленияЭтапов", ЭтаФорма);
		ПоказатьВопрос(ОписаниеОповещенияОЗавершении, ТекстНСтр, РежимДиалогаВопрос.ОКОтмена, , КодВозвратаДиалога.ОК);
	Иначе 
		РазбитьНаЭтапыПослеЗаписиДокумента();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборДатПоРасписанию(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.АдресОтправления) Или Не ЗначениеЗаполнено(Объект.АдресНазначения) Тогда
		ТекстНСтр = НСтр("ru='Перед выполнением операции необходимо заполнить адреса отправления и прибытия'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСтр);
		Возврат;
	КонецЕсли;
	
	ПараметрыВыбораДат = Новый Структура("АдресОтправления, АдресНазначения, Грузоотправитель, Грузополучатель, Маршрут");
	ЗаполнитьЗначенияСвойств(ПараметрыВыбораДат, Объект);
	ОповещениеОЗакрытииФормы = Новый ОписаниеОповещения("ВыборДатПоРасписаниюПослеВыбора", ЭтаФорма);
	ОткрытьФорму("Документ.уатЗаказГрузоотправителя.Форма.ФормаВыбораИзРасписания", ПараметрыВыбораДат, ЭтаФорма,,,,
		ОповещениеОЗакрытииФормы, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#Область ОбработчикиКомандФормыСопроводительныеДокументы

&НаКлиенте
Процедура СопроводительныеДокументыДобавить(Команда)
	Если Объект.Ссылка.Пустая() Тогда
		ДопПараметры = Новый Структура("ИмяКоманды", "Добавить");
		СопроводительныеДокументыВопросПриВводеНовогоЗаказа(ДопПараметры);
	Иначе 
		СопроводительныеДокументыДобавитьОкончание();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СопроводительныеДокументыВопросПриВводеНовогоЗаказа(ДопПараметры)
	ТекстВопроса = "Перед выполнением операции Заказ будет записан. Продолжить?";
	Оповещение = Новый ОписаниеОповещения("СопроводительныеДокументыВопросПриВводеНовогоЗаказаОтвет", ЭтотОбъект, ДопПараметры);
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
КонецПроцедуры

&НаКлиенте
Процедура СопроводительныеДокументыВопросПриВводеНовогоЗаказаОтвет(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Если НЕ (ПроверитьЗаполнение() И Записать()) Тогда 
			Возврат;
		КонецЕсли;
		
		Если ТипЗнч(ДопПараметры) = Тип("Структура") И ДопПараметры.Свойство("ИмяКоманды") Тогда
			Если ДопПараметры.ИмяКоманды = "Добавить" Тогда
				СопроводительныеДокументыДобавитьОкончание();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СопроводительныеДокументыДобавитьОкончание()
	ЗначенияЗаполнения = Новый Структура;
	ЗначенияЗаполнения.Вставить("Шаблон",            Объект.ЭтоШаблонПеревозки);
	ЗначенияЗаполнения.Вставить("ВидВладельца",      ПредопределенноеЗначение("Перечисление.уатВидыВладельцевСопроводительныхДокументов.ДокументыЗаказчика"));
	ЗначенияЗаполнения.Вставить("ВладелецДокумента", Объект.Контрагент);
	ЗначенияЗаполнения.Вставить("ВидОснования",      ПредопределенноеЗначение("Перечисление.уатВидыОснованийСопроводительныхДокументов.ЗаказНаТС"));
	ЗначенияЗаполнения.Вставить("Основание",         Объект.Ссылка);
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
	ОткрытьФорму("Справочник.уатСопроводительныеДокументы.Форма.ФормаЭлемента", ПараметрыФормы, ЭтотОбъект,,,,
		Новый ОписаниеОповещения("СопроводительныеДокументыОбновить", ЭтотОбъект));
КонецПроцедуры

&НаКлиенте
Процедура СопроводительныеДокументыУстановитьСтатус(Команда)
	мсвВыделенныеСтроки = Элементы.СтатусыСД.ВыделенныеСтроки;
	Если мсвВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураЗаполнения = Новый Структура("СопроводительныеДокументы",
		СопроводительныеДокументыВыделенныеСД(мсвВыделенныеСтроки, Объект.ЭтоШаблонПеревозки));
	ПараметрыФормы = Новый Структура("УстановкаСтатусаИзЗаказа", СтруктураЗаполнения);
	ОткрытьФорму("Документ.уатУстановкаСтатусовСопроводительныхДокументов.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект,,,,
		Новый ОписаниеОповещения("СопроводительныеДокументыОбновить", ЭтотОбъект));
КонецПроцедуры

&НаКлиенте
Процедура СопроводительныеДокументыЗаполнитьДокументыПоШаблону(Команда)
	
	Если Объект.Ссылка.Пустая() Тогда
		Оповещ = Новый ОписаниеОповещения("СопроводительныеДокументыЗаполнитьДокументыПоШаблонуОтвет", ЭтотОбъект);
		ПоказатьВопрос(Оповещ, "Перед выполнением операции документ будет записан. Продолжить?",
			РежимДиалогаВопрос.ОКОтмена);
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Справочник.уатШаблоныДокументов_уэ.ФормаВыбора",, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СопроводительныеДокументыЗаполнитьДокументыПоШаблонуОтвет(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Рез = Записать();
		Если Рез Тогда
			ОткрытьФорму("Справочник.уатШаблоныДокументов_уэ.ФормаВыбора",, ЭтотОбъект);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СопроводительныеДокументыЗаполнитьДокументыПоШаблонуЗавершение(Шаблон)
	мсвТЧВидыСД = СопроводительныеДокументыВидыДокументовПоШаблону(Шаблон);
	
	Для Каждого ТекВидДокумента Из мсвТЧВидыСД Цикл
		Если НЕ ЗначениеЗаполнено(ТекВидДокумента.ВидДокумента) Тогда
			Продолжить;
		КонецЕсли;
		
		ЗначенияЗаполнения = Новый Структура;
		ЗначенияЗаполнения.Вставить("ВидОснования",          ПредопределенноеЗначение("Перечисление.уатВидыОснованийСопроводительныхДокументов.ЗаказНаТС"));
		ЗначенияЗаполнения.Вставить("Основание",             Объект.Ссылка);
		ЗначенияЗаполнения.Вставить("ВидДокумента",          ТекВидДокумента.ВидДокумента);
		ЗначенияЗаполнения.Вставить("ВидВладельца",          ПредопределенноеЗначение("Перечисление.уатВидыВладельцевСопроводительныхДокументов.ОбщиеДокументы"));
		ЗначенияЗаполнения.Вставить("ДатаДокумента",         ТекущаяДата());
		ЗначенияЗаполнения.Вставить("КоличествоЭкземпляров", ТекВидДокумента.Количество);
		ЗначенияЗаполнения.Вставить("Комментарий",           ТекВидДокумента.Комментарий);
		
		ПараметрыФормы = Новый Структура("ЗначенияЗаполнения", ЗначенияЗаполнения);
		ОткрытьФорму("Справочник.уатСопроводительныеДокументы.ФормаОбъекта", ПараметрыФормы,, Истина,,,
			Новый ОписаниеОповещения("СопроводительныеДокументыОбновить", ЭтотОбъект), РежимОткрытияОкнаФормы.Независимый);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СопроводительныеДокументыУдалить(Команда)
	ТекСтрокаСтатусыСД = Элементы.СтатусыСД.ТекущиеДанные;
	Если ТекСтрокаСтатусыСД = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДопПараметры = Новый Структура("СопроводительныйДокумент", ТекСтрокаСтатусыСД.СопроводительныйДокумент);
	Оповещение = Новый ОписаниеОповещения("СопроводительныеДокументыУдалитьОтвет", ЭтотОбъект, ДопПараметры);
	ПоказатьВопрос(Оповещение, "Сопроводительный документ будет помечен на удаление, история статусов удалена. Продолжить?", РежимДиалогаВопрос.ОКОтмена);
КонецПроцедуры

&НаКлиенте
Процедура СопроводительныеДокументыУдалитьОтвет(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.ОК Тогда
		флОтказ = Ложь;
		ТекстОшибки = "";
		УдалитьСопроводительныйДокумент(ДопПараметры.СопроводительныйДокумент, флОтказ, ТекстОшибки);
		Если флОтказ Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Иначе
			Если ИспользуетсяДокументооборот() Тогда
				Элементы.СтатусыСД.Обновить();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СопроводительныеДокументыОбновитьКоманда(Команда)
	СопроводительныеДокументыОбновить();
КонецПроцедуры

&НаКлиенте
Процедура СопроводительныеДокументыПринятьВсеДокументы(Команда)
	мсвСД = СопроводительныеДокументыПоЗаказу(Объект.Ссылка);
	Если мсвСД.Количество() = 0 Тогда
		ТекстСообщения = "По текущему Заказу на ТС все сопроводительные документы приняты или отсутствуют";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	СтруктураЗаполнения = Новый Структура("СопроводительныеДокументы, Статус",
		СопроводительныеДокументыПоЗаказу(Объект.Ссылка),
		ПредопределенноеЗначение("Справочник.уатСтатусы_уэ.ОбработкаЗавершена"));
	ПараметрыФормы = Новый Структура("УстановкаСтатусаИзЗаказа", СтруктураЗаполнения);
	ОткрытьФорму("Документ.уатУстановкаСтатусовСопроводительныхДокументов.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект,,,,
		Новый ОписаниеОповещения("СопроводительныеДокументыОбновить", ЭтотОбъект));
КонецПроцедуры

&НаКлиенте
Процедура СопроводительныеДокументыОтменитьПринятиеВсехДокументов(Команда)
	Оповещ = Новый ОписаниеОповещения("СопроводительныеДокументыОтменитьПринятиеВсехДокументовВопрос", ЭтотОбъект);
	ПоказатьВопрос(Оповещ,
		"Будет отмено принятие всех сопроводительных документов
		|по текущему Заказу на ТС! Продолжить?", РежимДиалогаВопрос.ОКОтмена);
КонецПроцедуры

&НаКлиенте
Процедура СопроводительныеДокументыОтменитьПринятиеВсехДокументовВопрос(Результат, ДопПараметры) Экспорт
	Если Результат <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	мсвСД = СопроводительныеДокументыПоЗаказу(Объект.Ссылка,, Истина);
	Если мсвСД.Количество() = 0 Тогда
		ТекстСообщения = "Не найдено принятых сопроводительных документов по текущему Заказу на ТС";
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	КонецЕсли;
	
	ТекстОшибки = "";
	ОтменитьПринятиеВсехСопроводительныхДокументов(мсвСД, ТекстОшибки);
	Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сред(ТекстОшибки, 2));
	КонецЕсли;
	СопроводительныеДокументыОбновить();
КонецПроцедуры

&НаКлиенте
Процедура СопроводительныеДокументыУстановитьСрокОбработки(Команда)
	мсвВыделенныеСтроки = Элементы.СтатусыСД.ВыделенныеСтроки;
	Если мсвВыделенныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
		
	Оповещ = Новый ОписаниеОповещения("СопроводительныеДокументыУстановитьСрокОбработкиОтвет", ЭтотОбъект);
	ПоказатьВводДаты(Оповещ,, "Введите срок обработки", ЧастиДаты.Дата);
КонецПроцедуры

&НаКлиенте
Процедура СопроводительныеДокументыУстановитьСрокОбработкиОтвет(Результат, ДопПараметры) Экспорт
	Если ЗначениеЗаполнено(Результат) Тогда
		мсвВыделенныеСтроки = Элементы.СтатусыСД.ВыделенныеСтроки;
		ТекстОшибки = "";
		СопроводительныеДокументыУстановитьСрокОбработкиСервер(мсвВыделенныеСтроки, Результат, ТекстОшибки);
		
		Если НЕ ПустаяСтрока(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Сред(ТекстОшибки, 2));
		КонецЕсли;
		
		СопроводительныеДокументыОбновить();
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СопроводительныеДокументыУстановитьСрокОбработкиСервер(мсвВыделенныеСтроки, ПлановаяДатаОбработки, ТекстОшибки)
	Для Каждого ТекСтрока Из мсвВыделенныеСтроки Цикл
		ТекСД = ТекСтрока.СопроводительныйДокумент.ПолучитьОбъект();
		ТекСД.ПлановаяДатаОбработкиВручную = Истина;
		ТекСД.ПлановаяДатаОбработки = ПлановаяДатаОбработки;
		
		Попытка
			ТекСД.Записать();
		Исключение
			ТекстОшибки = ТекстОшибки + СтрШаблон("
				|Сопроводительный документ ""%1"" не удалось записать: " + ИнформацияОбОшибке().Описание,
				ТекСтрока.СопроводительныйДокумент);
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИспользуетсяДокументооборот()
	Если ПолучитьФункциональнуюОпцию("уатИспользоватьДокументооборот") Тогда
		Возврат Истина;
	Иначе
		Возврат Ложь;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ПеревыставитьЗаказчику(Команда)
	
	ТекДанные = Элементы.ПолучаемыеУслуги.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		ТекстСообщения = НСтр(" ru = 'Для перевыставления расходов заказчику перевозки выберите одну из строк расходов'; en = ''");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Возврат;
	Иначе
		ПараметрыФормы = Новый Структура("ТекущаяСумма", ТекДанные.Сумма); 
		ДопПараметры = Новый Структура("ТекДанныеСтроки", ТекДанные);
		ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ПеревыставитьЗаказчикуЗакрытие", ЭтотОбъект, ДопПараметры);
		ОткрытьФорму("Документ.уатЗаказГрузоотправителя.Форма.ФормаПеревыставленияРасходовЗаказчикуПеревозки", ПараметрыФормы, ЭтотОбъект,,,,
						ОписаниеОповещенияОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура НайтиНаКартеАдресОтправления(Команда)
	ПараметрыАдреса = Новый Структура("АдресСтрока, АдресСсылка", АдресОтправленияСтрока, Объект.АдресОтправления);
	Если Объект.Ссылка.Пустая() Тогда
		ТекстНСТР = НСтр("en='To perform this operation, you must record the item. The document will be recorded.';
			|ru='Для выполнения данной операции необходимо записать документ. Данные будут записаны.'");
		ОповещениеЗаписатьОбъект = Новый ОписаниеОповещения("НайтиНаКартеАдресПродолжение", ЭтотОбъект, ПараметрыАдреса);
		ПоказатьВопрос(ОповещениеЗаписатьОбъект, ТекстНСТР, РежимДиалогаВопрос.ДаНет);
	Иначе
		НайтиНаКартеАдресЗавершение(ПараметрыАдреса)
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НайтиНаКартеАдресНазначения(Команда)
	ПараметрыАдреса = Новый Структура("АдресСтрока, АдресСсылка", АдресНазначенияСтрока, Объект.АдресНазначения);
	Если Объект.Ссылка.Пустая() Тогда
		ТекстНСТР = НСтр("en='To perform this operation, you must record the item. The document will be recorded.';
			|ru='Для выполнения данной операции необходимо записать документ. Данные будут записаны.'");
		ОповещениеЗаписатьОбъект = Новый ОписаниеОповещения("НайтиНаКартеАдресПродолжение", ЭтотОбъект, ПараметрыАдреса);
		ПоказатьВопрос(ОповещениеЗаписатьОбъект, ТекстНСТР, РежимДиалогаВопрос.ДаНет);
	Иначе
		НайтиНаКартеАдресЗавершение(ПараметрыАдреса)
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРедакторЦепочкиДокументов(Команда)
	Если Модифицированность Или Параметры.Ключ.Пустая() Тогда
		ТекстВопроса = НСтр("ru='Перед выполнением операции Заказ будет записан. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ОткрытьРедакторЦепочкиДокументовОтвет", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	Иначе
		ДопПараметры = Новый Структура("ЗаказНаТС", Объект.Ссылка);
		ОткрытьФорму("Обработка.уатРедакторЦепочкиДокументов_уэ.Форма.Форма", ДопПараметры, ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОформитьЭТрН(Команда)
	Если Объект.Ссылка.Пустая() Тогда
		ТекстПредупреждения = НСтр("ru = 'Документ еще не записан. Ввод ЭПД возможен только на основании записанных документов.';
									|en = 'The document is not saved yet. You can enter the electronic shipping document only based on the saved documents.'");
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения);
		Возврат;
	КонецЕсли;
	
	уатОбменСГИСЭПДКлиент.ПроверитьИСоздатьЭТрН(Объект.Ссылка, ЭтотОбъект);  

КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции   

&НаКлиенте
Процедура ПеревыставитьЗаказчикуЗакрытие(Результат, ДопПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	Иначе
		Если Результат.Свойство("НоваяСумма") Тогда 
			НоваяСтрока = Объект.Услуги.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ДопПараметры.ТекДанныеСтроки);  
			НоваяСтрока.Сумма             = Результат.НоваяСумма;
			НоваяСтрока.РучнойВвод        = Истина;
			НоваяСтрока.СтатьяДоходов     = ПредопределенноеЗначение("Справочник.уатСтатьиДоходов.ОсновнаяСтатьяДоходов");
			НоваяСтрока.Тариф             = ПредопределенноеЗначение("Справочник.уатТарифыТС.ПустаяСсылка");
			НоваяСтрока.ПараметрВыработки = ПредопределенноеЗначение("Справочник.уатПараметрыВыработки.ПустаяСсылка");

			
			Если НоваяСтрока.Количество <> 0 Тогда
				НоваяСтрока.Цена = НоваяСтрока.Сумма / НоваяСтрока.Количество;
			КонецЕсли;
			
			РассчитатьСуммуНДС(НоваяСтрока, "Факт");
			РассчитатьСуммуВсегоВстрокеТЧ(НоваяСтрока, "Факт"); 
			
			РассчитатьСуммуДокумента();
			
			ОбновитьПараметрВыработкиВременныйОказ();
			ОбновитьДоходыПоЭтапамСервер();
			ОбновитьВсегоВТЧУслуги();
				
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла
&НаКлиенте
Процедура ЗагрузитьТоварыИзФайлаЗавершение(АдресЗагруженныхДанных, ДополнительныеПараметры) Экспорт
	
	Если АдресЗагруженныхДанных = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ЗагрузитьТоварыИзФайлаНаСервере(АдресЗагруженныхДанных);
	
	РассчитатьПоказателиСервер(Ложь);
	ОбновитьВалютуВТЧГрузовТоваровСервер();
	ОбновитьПараметрВыработкиВременныйОказ();
	ОбновитьПараметрВыработкиВременныйПолуч();
	ОбновитьНадписьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьУслугиИзФайлаЗавершение(АдресЗагруженныхДанных, ДополнительныеПараметры) Экспорт
	
	Если АдресЗагруженныхДанных = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ЗагрузитьУслугиИзФайлаНаСервере(АдресЗагруженныхДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьГрузыИзФайлаЗавершение(АдресЗагруженныхДанных, ДополнительныеПараметры) Экспорт
	
	Если АдресЗагруженныхДанных = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ЗагрузитьГрузыИзФайлаНаСервере(АдресЗагруженныхДанных);
	
	РассчитатьПоказателиСервер(Ложь);
	ОбновитьВалютуВТЧГрузовТоваровСервер();
	ОбновитьПараметрВыработкиВременныйОказ();
	ОбновитьПараметрВыработкиВременныйПолуч();
	ОбновитьНадписьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьЗатратыИзФайлаЗавершение(АдресЗагруженныхДанных, ДополнительныеПараметры) Экспорт
	
	Если АдресЗагруженныхДанных = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ЗагрузитьЗатратыИзФайлаНаСервере(АдресЗагруженныхДанных);
	
КонецПроцедуры

&НаКлиенте
Процедура ОформлениеДокументовПродолжение(Результат, ДопПараметры) Экспорт 
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если Не ПроверитьЗаполнение() Тогда
			Возврат;
		КонецЕсли;
		
		Попытка
			Записать();
			ОткрытьФорму("ОбщаяФорма.уатФормаОформленияДокументов_уэ",,ЭтотОбъект);
		Исключение
			ТекстСообщения = ИнформацияОбОшибке().Описание;
			ТекПричина = ИнформацияОбОшибке().Причина;
			Сч = 1; МаксСч = 10;
			Пока ТекПричина <> Неопределено И Сч <= МаксСч Цикл
				ТекстСообщения = ТекстСообщения + " \ " + ТекПричина.Описание;
				ТекПричина = ТекПричина.Причина;
				Сч = Сч + 1;
			КонецЦикла;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьТоварыИзФайлаНаСервере(АдресЗагруженныхДанных)
	
	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных);
	
	ТоварыДобавлены = Ложь;
	Для Каждого СтрокаТаблицы Из ЗагруженныеДанные Цикл 
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда 
			Продолжить;
		КонецЕсли;
		НоваяСтрокаТовары = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, СтрокаТаблицы);
		
		Если Объект.УчитыватьНДС И ЗначениеЗаполнено(НоваяСтрокаТовары.СтавкаНДС) Тогда 
			СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеСтавкиНДС(НоваяСтрокаТовары.СтавкаНДС);
			НоваяСтрокаТовары.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
				НоваяСтрокаТовары.Сумма - (НоваяСтрокаТовары.Сумма) / ((СтавкаНДС + 100) / 100),
				НоваяСтрокаТовары.Сумма * СтавкаНДС / 100);
		КонецЕсли;
		
		НоваяСтрокаТовары.Всего = НоваяСтрокаТовары.Сумма
			+ ?(Объект.УчитыватьНДС И НЕ Объект.СуммаВключаетНДС, НоваяСтрокаТовары.СуммаНДС, 0);
		
		ТоварыДобавлены = Истина;
	КонецЦикла;
	
	Если ТоварыДобавлены Тогда
		ОбновитьВалютуВТЧГрузовТоваровСервер();
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьУслугиИзФайлаНаСервере(АдресЗагруженныхДанных)
	
	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных);
	
	УслугиДобавлены = Ложь;
	Для Каждого СтрокаТаблицы Из ЗагруженныеДанные Цикл 
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда 
			Продолжить;
		КонецЕсли;
		НоваяСтрокаУслуги = Объект.Услуги.Добавить();
		
		Если Объект.ЭтоШаблонПеревозки Тогда
			НоваяСтрокаУслуги.ВидДокумента = Перечисления.уатВидыДокументовШаблонаДоходовРасходов_уэ.ЗаказНаТС;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(НоваяСтрокаУслуги, СтрокаТаблицы);
		
		НоваяСтрокаУслуги.Содержание = НоваяСтрокаУслуги.Номенклатура.НаименованиеПолное;
		
		Если НЕ ЗначениеЗаполнено(НоваяСтрокаУслуги.СтатьяДоходов) Тогда
			НоваяСтрокаУслуги.СтатьяДоходов = уатОбщегоНазначенияСервер.СтатьяДоходовНоменклатуры(НоваяСтрокаУслуги.Номенклатура);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НоваяСтрокаУслуги.СтавкаНДС) Тогда 
			СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеСтавкиНДС(НоваяСтрокаУслуги.СтавкаНДС);
			НоваяСтрокаУслуги.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
				НоваяСтрокаУслуги.Сумма - (НоваяСтрокаУслуги.Сумма) / ((СтавкаНДС + 100) / 100),
				НоваяСтрокаУслуги.Сумма * СтавкаНДС / 100);
		КонецЕсли;
		
		НоваяСтрокаУслуги.Всего = НоваяСтрокаУслуги.Сумма
			+ ?(Объект.УчитыватьНДС И НЕ Объект.СуммаВключаетНДС, НоваяСтрокаУслуги.СуммаНДС, 0);
			
		УслугиДобавлены = Истина;
	КонецЦикла;
	
	Если УслугиДобавлены Тогда
		ОбновитьПодвалСервер();
		ОбновитьПараметрВыработкиВременныйОказ();
		ОбновитьПодвалДоходовРасходов("Услуги");
		ОбновитьДоходыПоЭтапамСервер();
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьГрузыИзФайлаНаСервере(АдресЗагруженныхДанных)
	
	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных);
	
	ГрузыДобавлены = Ложь;
	Для Каждого СтрокаТаблицы Из ЗагруженныеДанные Цикл 
		НоваяСтрокаГрузы = Объект.ГрузовойСостав.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаГрузы, СтрокаТаблицы);
		
		ГрузыДобавлены = Истина;
	КонецЦикла;
	
	Если ГрузыДобавлены Тогда
		ОбновитьВалютуВТЧГрузовТоваровСервер();
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьЗатратыИзФайлаНаСервере(АдресЗагруженныхДанных)
	
	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных);
	
	ЗатратыДобавлены = Ложь;
	Для Каждого СтрокаТаблицы Из ЗагруженныеДанные Цикл 
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда 
			Продолжить;
		КонецЕсли;
		
		НоваяСтрокаЗатраты = Объект.Расходы.Добавить();
		
		Если Объект.ЭтоШаблонПеревозки Тогда
			НоваяСтрокаЗатраты.ВидДокумента = Перечисления.уатВидыДокументовШаблонаДоходовРасходов_уэ.ЗаказНаТС;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(НоваяСтрокаЗатраты, СтрокаТаблицы);
		
		НоваяСтрокаЗатраты.Содержание = НоваяСтрокаЗатраты.Номенклатура.НаименованиеПолное;
		НоваяСтрокаЗатраты.УчитыватьНДС     = Объект.УчитыватьНДС;
		НоваяСтрокаЗатраты.СуммаВключаетНДС = Объект.СуммаВключаетНДС;
		
		Если НЕ ЗначениеЗаполнено(НоваяСтрокаЗатраты.СтатьяРасходов) Тогда
			НоваяСтрокаЗатраты.СтатьяРасходов = уатОбщегоНазначенияСервер.СтатьяРасходовНоменклатуры(НоваяСтрокаЗатраты.Номенклатура);
		КонецЕсли;
		
		Если НоваяСтрокаЗатраты.УчитыватьНДС И ЗначениеЗаполнено(НоваяСтрокаЗатраты.СтавкаНДС) Тогда 
			СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеСтавкиНДС(НоваяСтрокаЗатраты.СтавкаНДС);
			НоваяСтрокаЗатраты.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
				НоваяСтрокаЗатраты.Сумма - (НоваяСтрокаЗатраты.Сумма) / ((СтавкаНДС + 100) / 100),
				НоваяСтрокаЗатраты.Сумма * СтавкаНДС / 100);
		КонецЕсли;
		
		НоваяСтрокаЗатраты.Всего = НоваяСтрокаЗатраты.Сумма
			+ ?(Объект.УчитыватьНДС И НЕ Объект.СуммаВключаетНДС, НоваяСтрокаЗатраты.СуммаНДС, 0);
		
		ЗатратыДобавлены = Истина;
	КонецЦикла;
	
	Если ЗатратыДобавлены Тогда
		ОбновитьПодвалСервер();
		ОбновитьПараметрВыработкиВременныйПолуч();
		ОбновитьПодвалДоходовРасходов("Расходы");
		ОбновитьРасходыПоЭтапамСервер();
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла

// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()

	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);

КонецПроцедуры

// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

&НаСервере
Процедура УстановитьДоступностьДокументаПоИзменениямСтатуса()
	РазрешитьРедактирование = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ПользователиКлиентСервер.АвторизованныйПользователь(), "РазрешитьРедактированиеЗакрытыхДокументов");

	Если НЕ РазрешитьРедактирование И уатЗащищенныеФункцииСервер_уэ.КонтрольОперацийПоЗаказу(Объект.Ссылка) 
		И СтатусДокумента = Справочники.уатСтатусы_уэ.Закрыт Тогда 
		ТолькоПросмотр = Истина;
		Элементы.флЗаказОтКонтрагента.ТолькоПросмотр = Истина;
		Элементы.АдресОтправления.ТолькоПросмотр = Истина;
		Элементы.СоздатьАдресОтправления.Доступность = Ложь;
		Элементы.ВыбратьАдресОтправленияИзКИ.Доступность = Ложь;
		Элементы.ВыбратьОтправителяПоКонтрагенту.Доступность = Ложь;
		Элементы.ВыбратьПолучателяПоКонтрагенту.Доступность = Ложь;
		Элементы.АдресНазначения.ТолькоПросмотр = Истина;
		Элементы.ВыбратьАдресНазначенияИзКИ.Доступность = Ложь;
		Элементы.СоздатьАдресНазначения.Доступность = Ложь;
		Элементы.РассчитатьПоказатели1.Доступность = Ложь;
		Элементы.РассчитатьПоказатели2.Доступность = Ложь;
		Элементы.ГрузовойСоставГруппаЗаполнение.Доступность = Ложь;
		Элементы.РазбитьНаГрузовыеМеста.Доступность = Ложь;
		Элементы.ТоварныйСоставГруппаЗаполнение.Доступность = Ложь;
		Элементы.УслугиГруппаЗаполнить.Доступность = Ложь;
		Элементы.УслугиРасчитатьОказываемыеУслуги.Доступность = Ложь;
		Элементы.ПолучаемыеУслугиГруппаЗаполнить.Доступность = Ложь;
		Элементы.СтатусыСДСопроводительныеДокументыДобавить.Доступность = Ложь;
		Элементы.СтатусыСДСопроводительныеДокументыУстановитьСтатус.Доступность = Ложь;
		Элементы.СтатусыСДСопроводительныеДокументыУдалить.Доступность = Ложь;
		Элементы.СопроводительныеДокументыГруппаЗаполнить.Доступность = Ложь;
		Элементы.РассчитатьПоказатели1.Доступность = Ложь;
		Элементы.РассчитатьПоказатели2.Доступность = Ложь;
		Элементы.НадписьВсегоПоДокументу1.Доступность = Ложь;
		Элементы.НадписьВсегоПоДокументу2.Доступность = Ложь;
		Элементы.РедактироватьЦеныИВалюту1.Доступность = Ложь;
		Элементы.РедактироватьЦеныИВалюту2.Доступность = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеПолейСтатусов()
	
	мсвУдаляемыхЭлементов = Новый Массив();
	Для Каждого ЭлементУсловногоОформления Из УсловноеОформление.Элементы Цикл
		Если ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "Предустановленный_ЦветаСтатусов" Тогда
			мсвУдаляемыхЭлементов.Добавить(ЭлементУсловногоОформления);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементУсловногоОформления Из мсвУдаляемыхЭлементов Цикл
		УсловноеОформление.Элементы.Удалить(ЭлементУсловногоОформления);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатСтатусы_уэ.Ссылка,
	|	уатСтатусы_уэ.Наименование,
	|	уатСтатусы_уэ.ЦветФонаПоУмолчанию,
	|	уатСтатусы_уэ.ЦветТекстаПоУмолчанию
	|ИЗ
	|	Справочник.уатСтатусы_уэ КАК уатСтатусы_уэ
	|ГДЕ
	|	НЕ уатСтатусы_уэ.ПометкаУдаления
	|	И уатСтатусы_уэ.ДействуетНаЗаказыГрузоотправителей";
	
	ВыборкаЦвета = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЦвета.Следующий() Цикл 
		ЦветФона   = Неопределено;
		ЦветТекста = Неопределено;
		
		ХранилищеЦветФона = ВыборкаЦвета.ЦветФонаПоУмолчанию;
		Если Не ХранилищеЦветФона = Неопределено Тогда 
			ДанныеЦветФона = ХранилищеЦветФона.Получить();
			Если Не ДанныеЦветФона = Неопределено И ТипЗнч(ДанныеЦветФона) = Тип("Цвет") Тогда
				ЦветФона = ДанныеЦветФона;
			КонецЕсли;
		КонецЕсли;
		
		ХранилищеЦветТекста = ВыборкаЦвета.ЦветТекстаПоУмолчанию;
		Если Не ХранилищеЦветТекста = Неопределено Тогда 
			ДанныеЦветТекста = ХранилищеЦветТекста.Получить();
			Если Не ДанныеЦветТекста = Неопределено И ТипЗнч(ДанныеЦветТекста) = Тип("Цвет") Тогда
				ЦветТекста = ДанныеЦветТекста;
			КонецЕсли;
		КонецЕсли;
		
		Если ЦветТекста = Неопределено И ЦветФона = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		// Установка цвета реквизита шапки
		Если ВыборкаЦвета.Ссылка = СтатусДокумента Тогда 
			Если Не ЦветТекста = Неопределено Тогда 
				Элементы.СтатусДокумента.ЦветТекста = ЦветТекста;
			КонецЕсли;
			
			Если Не ЦветФона = Неопределено Тогда 
				Элементы.СтатусДокумента.ЦветФона = ЦветФона;
			КонецЕсли;
		КонецЕсли;
		
		// Установка условного оформления колонки ТЧ Грузовой состав
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		
		ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.ГрузовойСостав.Статус");
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = ВыборкаЦвета.Ссылка;
		
		Если Не ЦветТекста = Неопределено Тогда 
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветТекста);
		КонецЕсли;
		
		Если Не ЦветФона = Неопределено Тогда 
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветФона);
		КонецЕсли;
		
		ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "Предустановленный_ЦветаСтатусовШапки";
		ЭлементУсловногоОформления.Представление = НСтр("en='By status color';ru='По цвету статуса '") + ВыборкаЦвета.Наименование;
		
		ПолеОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ГрузовойСоставСтатус");
		ПолеОформления.Использование = Истина;
		
		// Установка условного оформления колонки ТЧ ЭтапыЗаказа
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		
		ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ТабЭтапыЗаказа.Статус");
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = ВыборкаЦвета.Ссылка;
		
		Если Не ЦветТекста = Неопределено Тогда 
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветТекста);
		КонецЕсли;
		
		Если Не ЦветФона = Неопределено Тогда 
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветФона);
		КонецЕсли;
		
		ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "Предустановленный_ЦветаСтатусовЭтапыЗаказа";
		ЭлементУсловногоОформления.Представление = НСтр("en='By status color';ru='По цвету статуса '") + ВыборкаЦвета.Наименование;
		
		ПолеОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ТабЭтапыЗаказаСтатус");
		ПолеОформления.Использование = Истина;
	КонецЦикла;
	
	// цвета статусов сопроводительных документов
	мсвПутиКДанным = Новый Массив;
	мсвПутиКДанным.Добавить(Новый Структура("Отбор, Поле", "СтатусыСД.Статус", "СтатусыСДСтатус"));
	мсвПутиКДанным.Добавить(Новый Структура("Отбор, Поле", "ДокументыЭтапов.Статус", "ДокументыЭтаповСтатус"));
		
	уатОбщегоНазначения_проф.УстановитьУсловноеОформлениеСтатусовСД(УсловноеОформление, мсвПутиКДанным);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтатусыДокумента()
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", Объект.Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатЗаказГрузоотправителя.Ссылка КАК Заказ
	|ПОМЕСТИТЬ ВРТ_Документы
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	|ГДЕ
	|	уатЗаказГрузоотправителя.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатЭтапыМультимодальныхПеревозок_уэ.Этап
	|ИЗ
	|	РегистрСведений.уатЭтапыМультимодальныхПеревозок_уэ КАК уатЭтапыМультимодальныхПеревозок_уэ
	|ГДЕ
	|	уатЭтапыМультимодальныхПеревозок_уэ.ЗаказГрузоотправителя = &Ссылка
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Заказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	уатСтатусыГрузов_уэСрезПоследних.Период КАК Период,
	|	уатСтатусыГрузов_уэСрезПоследних.ГрузовоеМесто КАК ГрузовоеМесто,
	|	уатСтатусыГрузов_уэСрезПоследних.Статус КАК Статус
	|ИЗ
	|	РегистрСведений.уатСтатусыГрузов_уэ.СрезПоследних(
	|			,
	|			Заказ В
	|				(ВЫБРАТЬ
	|					ВТ.Заказ
	|				ИЗ
	|					ВРТ_Документы КАК ВТ)) КАК уатСтатусыГрузов_уэСрезПоследних
	|
	|УПОРЯДОЧИТЬ ПО
	|	ГрузовоеМесто,
	|	Период УБЫВ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	уатЗаказГрузоотправителя.Ссылка КАК Ссылка,
	|	уатЗаказГрузоотправителя.Мультимодальный КАК Мультимодальный,
	|	уатЗаказГрузоотправителя.ЭтоЭтап КАК ЭтоЭтап
	|ПОМЕСТИТЬ ВТ_ТекущийЗаказ
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	|ГДЕ
	|	уатЗаказГрузоотправителя.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	уатЭтапыМультимодальныхПеревозок_уэ.Этап КАК Этап
	|ПОМЕСТИТЬ ВТ_ЭтапыМультимодальныхПеревозок
	|ИЗ
	|	РегистрСведений.уатЭтапыМультимодальныхПеревозок_уэ КАК уатЭтапыМультимодальныхПеревозок_уэ
	|ГДЕ
	|	уатЭтапыМультимодальныхПеревозок_уэ.ЗаказГрузоотправителя = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВЫБОР
	|		КОГДА уатЗаказГрузоотправителя.Мультимодальный
	|				И НЕ уатЗаказГрузоотправителя.ЭтоЭтап
	|			ТОГДА ЕСТЬNULL(СтатусРодительскогоЗаказа.СтатусЭтапа, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый))
	|		ИНАЧЕ ВЫБОР
	|				КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЕСТЬNULL(уатСтатусыГрузов_уэСрезПоследних.Статус, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый))) > 1
	|					ТОГДА ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Составной)
	|				ИНАЧЕ МАКСИМУМ(ЕСТЬNULL(уатСтатусыГрузов_уэСрезПоследних.Статус, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый)))
	|			КОНЕЦ
	|	КОНЕЦ КАК СтатусЗаказа
	|ИЗ
	|	ВТ_ТекущийЗаказ КАК уатЗаказГрузоотправителя
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатСтатусыГрузов_уэ.СрезПоследних(, Заказ = &Ссылка) КАК уатСтатусыГрузов_уэСрезПоследних
	|		ПО (уатСтатусыГрузов_уэСрезПоследних.Заказ = уатЗаказГрузоотправителя.Ссылка),
	|	(ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЕСТЬNULL(уатСтатусыГрузов_уэСрезПоследних.Статус, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый))) > 1
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Составной)
	|			ИНАЧЕ МАКСИМУМ(ЕСТЬNULL(уатСтатусыГрузов_уэСрезПоследних.Статус, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый)))
	|		КОНЕЦ КАК СтатусЭтапа
	|	ИЗ
	|		ВТ_ЭтапыМультимодальныхПеревозок КАК уатЭтапыМультимодальныхПеревозок_уэ
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатСтатусыГрузов_уэ.СрезПоследних(
	|					,
	|					Заказ В
	|						(ВЫБРАТЬ
	|							ВТ_ЭтапыМультимодальныхПеревозок.Этап
	|						ИЗ
	|							ВТ_ЭтапыМультимодальныхПеревозок)) КАК уатСтатусыГрузов_уэСрезПоследних
	|			ПО уатЭтапыМультимодальныхПеревозок_уэ.Этап = уатСтатусыГрузов_уэСрезПоследних.Заказ) КАК СтатусРодительскогоЗаказа
	|
	|СГРУППИРОВАТЬ ПО
	|	уатЗаказГрузоотправителя.Мультимодальный,
	|	уатЗаказГрузоотправителя.ЭтоЭтап,
	|	СтатусРодительскогоЗаказа.СтатусЭтапа";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	Если Объект.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам Тогда
		ВыборкаГрузМест = РезультатЗапроса[1].Выбрать();
		Для Каждого СтрокаТЧ Из Объект.ГрузовойСостав Цикл 
			ВыборкаГрузМест.Сбросить();
			Если ВыборкаГрузМест.НайтиСледующий(СтрокаТЧ.ГрузовоеМесто, "ГрузовоеМесто") Тогда 
				СтрокаТЧ.Статус = ВыборкаГрузМест.Статус;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ВыборкаДокумент = РезультатЗапроса[4].Выбрать();
	Если ВыборкаДокумент.Следующий() Тогда 
		СтатусДокумента = ВыборкаДокумент.СтатусЗаказа;
	Иначе 
		СтатусДокумента = Справочники.уатСтатусы_уэ.Новый;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ДатаЗакрытия) И НЕ (Объект.Мультимодальный И НЕ Объект.ЭтоЭтап) Тогда
		Элементы.ФормаЗакрытие.Заголовок = Нстр("en = 'Cancel closing'; ru = 'Отмена закрытия'");
	Иначе
		Элементы.ФормаЗакрытие.Заголовок = Нстр("en = 'Closing'; ru = 'Закрытие'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыГрузовыхМест()
	
	МассивГрузовыхМест = Новый Массив();
	Для Каждого СтрокаТЧ Из Объект.ГрузовойСостав Цикл 
		МассивГрузовыхМест.Добавить(СтрокаТЧ.ГрузовоеМесто);
	КонецЦикла;
	
	СоответвиеРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивГрузовыхМест,
		"УникальноеГрузовоеМесто");
	Для Каждого СтрокаТЧ Из Объект.ГрузовойСостав Цикл 
		ДанныеГМ = СоответвиеРеквизитов.Получить(СтрокаТЧ.ГрузовоеМесто);
		Если ДанныеГМ = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТЧ.УникальноеГрузовоеМесто = ДанныеГМ.УникальноеГрузовоеМесто;
		Если СтрокаТЧ.КоличествоМест = 0 Тогда
			СтрокаТЧ.КоличествоМест = 1;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимость()
	
	ОтображатьПланировщик = Элементы.НастройкаОтображатьЭтапыПланировщиком.Пометка И Не Объект.ЭтоШаблонПеревозки;
	// В версии КОРП адрес назначения не обязательный, т.к. может определяться автоматически при маршрутизации
	Элементы.АдресНазначения.АвтоОтметкаНезаполненного = НЕ ВариантПоставкиКОРП;
	
	Если Объект.Мультимодальный И Не Объект.ЭтоЭтап Тогда 
		Элементы.НастройкаПанелейЭтапов.Видимость = Истина;
	Иначе 
		Элементы.НастройкаПанелейЭтапов.Видимость = Ложь;
	КонецЕсли;
	
	Если Объект.АдресИзмененВХодеМаршрутизации Тогда
		Элементы.АдресПрибытияЗаголовок.Заголовок = Нстр("ru = 'Адрес (изменен):'");
	Иначе
		Элементы.АдресПрибытияЗаголовок.Заголовок = Нстр("ru = 'Адрес:'");
	КонецЕсли;
	
	Элементы.ГруппаЭтапыЗаказаСтраницаСписка.Видимость = Объект.Мультимодальный И Не Объект.ЭтоЭтап И Элементы.НастройкаОтображатьЭтапыСписком.Пометка;
	Элементы.ГруппаДоходыПоЭтапам.Видимость            = Объект.Мультимодальный И Не Объект.ЭтоЭтап
		И Элементы.НастройкаОтображатьДоходыЭтапов.Пометка И (НЕ Объект.ЭтоШаблонПеревозки ИЛИ Объект.ВариантРасчетаДоходовИРасходов = 1);
	Элементы.ГруппаРасходыПоЭтапам.Видимость           = Объект.Мультимодальный И Не Объект.ЭтоЭтап
		И Элементы.НастройкаОтображатьЗатратыЭтапов.Пометка И (НЕ Объект.ЭтоШаблонПеревозки ИЛИ Объект.ВариантРасчетаДоходовИРасходов = 1);
	Элементы.ДокументыЭтапов.Видимость                 = Объект.Мультимодальный И Не Объект.ЭтоЭтап И Элементы.НастройкаОтображатьДокументыЭтапов.Пометка;
	Элементы.СобытияЭтапов.Видимость                   = Объект.Мультимодальный И НЕ Объект.ЭтоЭтап И Элементы.НастройкаОтображатьСобытияЭтапов.Пометка;
	Элементы.ГруппаСтрахование.Видимость = ИспользоватьСтрахование И Не Объект.ЭтоШаблонПеревозки;
	Элементы.ГруппаРаспределениеЗаказов.Видимость = Не Объект.ЭтоШаблонПеревозки;
	
	Элементы.ТабЭтапыЗаказаСписокЭтаповОтклонитьЭтап.Видимость = Объект.Мультимодальный И Не Объект.ЭтоЭтап И Элементы.НастройкаОтображатьЭтапыСписком.Пометка
		И Не Объект.ЭтоШаблонПеревозки;
	Элементы.ТабЭтапыЗаказаПереместитьВверх.Видимость          = Объект.Мультимодальный И Не Объект.ЭтоЭтап И Элементы.НастройкаОтображатьЭтапыСписком.Пометка;
	Элементы.ТабЭтапыЗаказаПереместитьВниз.Видимость           = Объект.Мультимодальный И Не Объект.ЭтоЭтап И Элементы.НастройкаОтображатьЭтапыСписком.Пометка;
	
	Элементы.ФормаОформлениеДокументов.Видимость = ВариантПоставкиКОРП;
	Если Не Элементы.ФормаОформлениеДокументов.Видимость Тогда
		Элементы.ПодменюФинансы.Вид = ВидГруппыФормы.ГруппаКнопок;
	КонецЕсли;
	Если Не Элементы.Найти("ТабЭтапыЗаказаДобавить") = Неопределено Тогда 
		Элементы["ТабЭтапыЗаказаДобавить"].Видимость = Объект.Мультимодальный И Не Объект.ЭтоЭтап И Элементы.НастройкаОтображатьЭтапыСписком.Пометка;
	КонецЕсли;
	Если Не Элементы.Найти("ТабЭтапыЗаказаЗакончитьРедактирование") = Неопределено Тогда 
		Элементы["ТабЭтапыЗаказаЗакончитьРедактирование"].Видимость = Объект.Мультимодальный И Не Объект.ЭтоЭтап И Элементы.НастройкаОтображатьЭтапыСписком.Пометка;
	КонецЕсли;
	Если Не Элементы.Найти("ТабЭтапыЗаказаИзменить") = Неопределено Тогда 
		Элементы["ТабЭтапыЗаказаИзменить"].Видимость = Объект.Мультимодальный И Не Объект.ЭтоЭтап И Элементы.НастройкаОтображатьЭтапыСписком.Пометка;
	КонецЕсли;
	Если Не Элементы.Найти("ТабЭтапыЗаказаНайти") = Неопределено Тогда 
		Элементы["ТабЭтапыЗаказаНайти"].Видимость = Объект.Мультимодальный И Не Объект.ЭтоЭтап И Элементы.НастройкаОтображатьЭтапыСписком.Пометка;
	КонецЕсли;
	Если Не Элементы.Найти("ТабЭтапыЗаказаОтменитьПоиск") = Неопределено Тогда 
		Элементы["ТабЭтапыЗаказаОтменитьПоиск"].Видимость = Объект.Мультимодальный И Не Объект.ЭтоЭтап И Элементы.НастройкаОтображатьЭтапыСписком.Пометка;
	КонецЕсли;
	Если Не Элементы.Найти("ТабЭтапыЗаказаПереместить") = Неопределено Тогда 
		Элементы["ТабЭтапыЗаказаПереместить"].Видимость = Объект.Мультимодальный И Не Объект.ЭтоЭтап И Элементы.НастройкаОтображатьЭтапыСписком.Пометка;
	КонецЕсли;
	Если Не Элементы.Найти("ТабЭтапыЗаказаСкопировать") = Неопределено Тогда 
		Элементы["ТабЭтапыЗаказаСкопировать"].Видимость = Объект.Мультимодальный И Не Объект.ЭтоЭтап И Элементы.НастройкаОтображатьЭтапыСписком.Пометка;
	КонецЕсли;
	Если Не Элементы.Найти("ТабЭтапыЗаказаСортировка") = Неопределено Тогда 
		Элементы["ТабЭтапыЗаказаСортировка"].Видимость = Объект.Мультимодальный И Не Объект.ЭтоЭтап И Элементы.НастройкаОтображатьЭтапыСписком.Пометка;
	КонецЕсли;
	
	Если Объект.ЭтоШаблонПеревозки Тогда
		Элементы.ТабЭтапыЗаказаГруппаПункты.Группировка          = ГруппировкаКолонок.Вертикальная;
		Элементы.ТабЭтапыЗаказаГруппаВремяРасстояние.Группировка = ГруппировкаКолонок.Вертикальная;
		
		Элементы.Организация.АвтоОтметкаНезаполненного        = Ложь;
		Элементы.Организация.ОтметкаНезаполненного            = Ложь;
		Элементы.Контрагент.АвтоОтметкаНезаполненного         = Ложь;
		Элементы.Контрагент.ОтметкаНезаполненного             = Ложь;
		Элементы.ДоговорКонтрагента.АвтоОтметкаНезаполненного = Ложь;
		Элементы.ДоговорКонтрагента.ОтметкаНезаполненного     = Ложь;
		Элементы.АдресОтправления.АвтоОтметкаНезаполненного   = Ложь;
		Элементы.АдресОтправления.ОтметкаНезаполненного       = Ложь;
		Элементы.ОтправлениеСЧас.АвтоОтметкаНезаполненного    = Ложь;
		Элементы.ОтправлениеСЧас.ОтметкаНезаполненного        = Ложь;
		Элементы.ОтправлениеПоЧас.АвтоОтметкаНезаполненного   = Ложь;
		Элементы.ОтправлениеПоЧас.ОтметкаНезаполненного       = Ложь;
		Элементы.АдресНазначения.АвтоОтметкаНезаполненного    = Ложь;
		Элементы.АдресНазначения.ОтметкаНезаполненного        = Ложь;
		Элементы.ДоставкаСЧас.АвтоОтметкаНезаполненного       = Ложь;
		Элементы.ДоставкаСЧас.ОтметкаНезаполненного           = Ложь;
		Элементы.ДоставкаПоЧас.АвтоОтметкаНезаполненного      = Ложь;
		Элементы.ДоставкаПоЧас.ОтметкаНезаполненного          = Ложь;
		
		
	Иначе
		Элементы.ТабЭтапыЗаказаГруппаПункты.Группировка          = ГруппировкаКолонок.Горизонтальная;
		Элементы.ТабЭтапыЗаказаГруппаВремяРасстояние.Группировка = ГруппировкаКолонок.Горизонтальная;
		
		Элементы.Организация.АвтоОтметкаНезаполненного        = Истина;
		Элементы.Контрагент.АвтоОтметкаНезаполненного         = Истина;
		Элементы.ДоговорКонтрагента.АвтоОтметкаНезаполненного = Истина;
		Элементы.АдресОтправления.АвтоОтметкаНезаполненного   = Истина;
		Элементы.ОтправлениеСЧас.АвтоОтметкаНезаполненного    = Истина;
		Элементы.ОтправлениеПоЧас.АвтоОтметкаНезаполненного   = Истина;
		Элементы.АдресНазначения.АвтоОтметкаНезаполненного    = Истина;
		Элементы.ДоставкаСЧас.АвтоОтметкаНезаполненного       = Истина;
		Элементы.ДоставкаПоЧас.АвтоОтметкаНезаполненного      = Истина;
	КонецЕсли;
	Элементы.ТабЭтапыЗаказаГруппаШаблон.Видимость     = Объект.ЭтоШаблонПеревозки;
	Элементы.ТабЭтапыЗаказаГруппаДатыШаблон.Видимость = Объект.ЭтоШаблонПеревозки;
	Элементы.ТабЭтапыЗаказаГруппаДатыОтправленияПрибытия.Видимость  = Не Объект.ЭтоШаблонПеревозки;
	Элементы.ТабЭтапыЗаказаГруппаСтатусСостояние.Видимость          = Не Объект.ЭтоШаблонПеревозки;
	Элементы.ТабЭтапыЗаказаМаршрутныеЛисты.Видимость                = Не Объект.ЭтоШаблонПеревозки;
	
	Элементы.НастройкаДниПланировщика.Видимость                       = Объект.Мультимодальный И Не Объект.ЭтоЭтап И ОтображатьПланировщик;
	Элементы.НастройкаДетализацияПланировщика.Видимость               = Объект.Мультимодальный И Не Объект.ЭтоЭтап И ОтображатьПланировщик;
	Элементы.ПланировщикЭтаповЗаказаПланировщикПланФактДаты.Видимость = Объект.Мультимодальный И Не Объект.ЭтоЭтап И ОтображатьПланировщик;
	Элементы.ДатаПланированияНазад.Видимость                          = Объект.Мультимодальный И Не Объект.ЭтоЭтап И ОтображатьПланировщик;
	Элементы.ДатаПланированияТекущая.Видимость                        = Объект.Мультимодальный И Не Объект.ЭтоЭтап И ОтображатьПланировщик;
	Элементы.ДатаПланированияВперед.Видимость                         = Объект.Мультимодальный И Не Объект.ЭтоЭтап И ОтображатьПланировщик;
	Элементы.ТабЭтапыЗаказаПечать.Видимость                           = Объект.Мультимодальный И Не Объект.ЭтоЭтап И ОтображатьПланировщик;
	Элементы.ТабЭтапыЗаказаПредварительныйПросмотр.Видимость          = Объект.Мультимодальный И Не Объект.ЭтоЭтап И ОтображатьПланировщик;
	
	Элементы.ГруппаЭтапыЗаказа.Видимость = Объект.Мультимодальный И Не Объект.ЭтоЭтап И (Элементы.НастройкаОтображатьЭтапыПланировщиком.Пометка Или Элементы.НастройкаОтображатьЭтапыСписком.Пометка);
	
	Элементы.ТабЭтапыЗаказаОткрытьРедакторСхемыПеревозки.Видимость = ВариантПоставкиКОРП
		И Объект.Мультимодальный И Не Объект.FTL И Не Объект.ЭтоШаблонПеревозки;
	
	#Если ВебКлиент Тогда
		Элементы.ГруппаЭтапыЗаказаСтраницаСпискаПланировщика.Видимость = Ложь;
		Элементы.НастройкаОтображатьЭтапыСписком.Видимость             = Ложь;
		Элементы.НастройкаОтображатьЭтапыПланировщиком.Видимость       = Ложь;
	#Иначе
		Элементы.ГруппаЭтапыЗаказаСтраницаСпискаПланировщика.Видимость = Объект.Мультимодальный И Не Объект.ЭтоЭтап И ОтображатьПланировщик;
		Элементы.НастройкаОтображатьЭтапыСписком.Видимость             = Истина;
		Элементы.НастройкаОтображатьЭтапыПланировщиком.Видимость       = Истина;
	#КонецЕсли
	
	// Колонки налога показываем только тогда, когда его учитываем.
	Элементы.УслугиСтавкаНДС.Видимость = Объект.УчитыватьНДС;
	Элементы.УслугиСуммаНДС.Видимость = Объект.УчитыватьНДС;
	Элементы.УслугиВсего.Видимость = Объект.УчитыватьНДС;
	//Элементы.ПолучаемыеУслугиСтавкаНДС.Видимость = Объект.УчитыватьНДС;
	//Элементы.ПолучаемыеУслугиСуммаНДС.Видимость = Объект.УчитыватьНДС;
	//Элементы.ПолучаемыеУслугиВсего.Видимость = Объект.УчитыватьНДС;
	Элементы.ТоварыСтавкаНДС.Видимость = Объект.УчитыватьНДС;
	Элементы.ТоварыСуммаНДС.Видимость = Объект.УчитыватьНДС;
	Элементы.ТоварыВсего.Видимость = Объект.УчитыватьНДС;
	
	Элементы.ГруппаДоговор.Видимость = флЗаказОтКонтрагента;
	
	Элементы.Контрагент.Заголовок = ?(флЗаказОтКонтрагента, НСтр("en='Counterpartу';ru='Контрагент'"), НСтр("en='Department';ru='Подразделение'"));
	
	Элементы.ГрузовойСоставГрузовоеМесто.Видимость = 
		(Объект.ДетализацияЗакрытия = ПредопределенноеЗначение("Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам")
		ИЛИ Объект.ДетализацияЗакрытия = ПредопределенноеЗначение("Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам"));
	Элементы.ТоварыГрузовоеМесто.Видимость = Элементы.ГрузовойСоставГрузовоеМесто.Видимость;
	Элементы.ГрузовойСоставСтатус.Видимость = 
		Объект.ДетализацияЗакрытия = ПредопределенноеЗначение("Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам");
	Элементы.РазбитьНаГрузовыеМеста.Видимость = 
		(Объект.ДетализацияЗакрытия = ПредопределенноеЗначение("Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам")
		Или Объект.ДетализацияЗакрытия = ПредопределенноеЗначение("Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам"));
	Элементы.ТоварыЗаполнитьТоварныйСоставПоГрузовому.Видимость = 
		(Объект.ДетализацияЗакрытия = ПредопределенноеЗначение("Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам")
		Или Объект.ДетализацияЗакрытия = ПредопределенноеЗначение("Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам"));
	Элементы.ТоварыПричинаЗакрытия.Видимость =
		Объект.ДетализацияЗакрытия = ПредопределенноеЗначение("Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам");
	Элементы.ГрузовойСоставПричинаЗакрытия.Видимость =
		Объект.ДетализацияЗакрытия = ПредопределенноеЗначение("Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам");
	
	ТолькоПросмотрПоказателейГрузовыхМест = Элементы.ГрузовойСоставГрузовоеМесто.Видимость;
	
	Элементы.ГрузовойСоставВидУпаковки.ТолькоПросмотр = ТолькоПросмотрПоказателейГрузовыхМест;
	
	Если Не (Объект.ВидПеревозки = ПредопределенноеЗначение("Справочник.уатВидыПеревозок.АвтомобильнаяГрузовая")
			Или Объект.ВидПеревозки = ПредопределенноеЗначение("Справочник.уатВидыПеревозок.АвтомобильнаяПассажирская")) Тогда 
		Элементы.ТребованиеКТСТипТС.Видимость    = Ложь;
		Элементы.ТребованиеКТС.Видимость = Ложь;
	Иначе 
		Элементы.ТребованиеКТСТипТС.Видимость    = Истина;
		Элементы.ТребованиеКТС.Видимость = Истина;
	КонецЕсли;
	
	Если Объект.Мультимодальный И Объект.ЭтоЭтап Тогда 
		Элементы.ГруппаОтправлениеПредварительно.Видимость = Истина;
		Элементы.ГруппаПрибытиеПредварительно.Видимость   = Истина;
	Иначе 
		Элементы.ГруппаОтправлениеПредварительно.Видимость = Ложь;
		Элементы.ГруппаПрибытиеПредварительно.Видимость   = Ложь;
	КонецЕсли;
	Элементы.ЭтоШаблонПеревозки.Доступность  = Объект.Мультимодальный И Не Объект.ЭтоЭтап И Не АвторизованВнешнийПользователь;
	Элементы.ЭтоШаблонПеревозки.Видимость    = ВариантПоставкиКОРП И Объект.Мультимодальный;
	Элементы.НаименованиеШаблона.Доступность = Объект.Мультимодальный И Не Объект.ЭтоЭтап И Не АвторизованВнешнийПользователь;
	Элементы.НаименованиеШаблона.Видимость   = Объект.ЭтоШаблонПеревозки И Объект.Мультимодальный;
	
	Элементы.Мультимодальный.Доступность = НЕ Объект.ЭтоЭтап И Не ЕстьПодчиненныеЭтапы(Объект.Ссылка);
	
	УстановитьВидимостьРеквизитовFTL();
	
	Если ИспользоватьПлановыеУслуги Тогда
		Элементы.УслугиКоличествоПлан.Видимость = Истина;
		Элементы.УслугиЦенаПлан.Видимость = Истина;
		Элементы.УслугиСуммаСкидкиПлан.Видимость = Истина;
		Элементы.УслугиСуммаПлан.Видимость = Истина;
		Элементы.УслугиСуммаНДСПлан.Видимость = Объект.УчитыватьНДС;
		Элементы.УслугиВсегоПлан.Видимость = Объект.УчитыватьНДС;
		Элементы.ПолучаемыеУслугиКоличествоПлан.Видимость = Истина;
		Элементы.ПолучаемыеУслугиЦенаПлан.Видимость = Истина;
		Элементы.ПолучаемыеУслугиСуммаПлан.Видимость = Истина;
		Элементы.ПолучаемыеУслугиСуммаНДСПлан.Видимость = Объект.УчитыватьНДС;
		Элементы.ПолучаемыеУслугиВсегоПлан.Видимость = Объект.УчитыватьНДС;
		Элементы.УслугиРасчитатьОказываемыеУслуги.Заголовок = НСтр("en='Calculate fact by tariffs';ru='Рассчитать факт по тарифам'");
		Элементы.УслугиПересчитатьДоходы.Заголовок = НСтр("en='Recalculate the fact in all rows';ru='Пересчитать факт во всех строках'");
		Элементы.УслугиПересчитатьДоходыВСтроке.Заголовок = НСтр("en='Recalculate the fact in current row';ru='Пересчитать факт в текущей строке'");
		Элементы.УслугиКонтекстноеМенюПересчитатьДоходыВСтроке.Заголовок = Элементы.УслугиПересчитатьДоходыВСтроке.Заголовок;
		Элементы.ПолучаемыеУслугиПересчитатьРасходы.Заголовок = НСтр("en='Recalculate the fact in all rows';ru='Пересчитать факт во всех строках'");
		Элементы.ПолучаемыеУслугиПересчитатьРасходыВСтроке.Заголовок = НСтр("en='Recalculate the fact in current row';ru='Пересчитать факт в текущей строке'");
		Элементы.ПолучаемыеУслугиКонтекстноеМенюПересчитатьРасходыВСтроке.Заголовок = Элементы.ПолучаемыеУслугиПересчитатьРасходыВСтроке.Заголовок;
		Элементы.УслугиКоличество.Заголовок = НСтр("en='Quantity (fact)';ru='Колич. (факт)'");
		Элементы.УслугиЦена.Заголовок = НСтр("en='Price (fact)';ru='Цена (факт)'");
		Элементы.УслугиСуммаСкидки.Заголовок = "Скидка (факт)";
		Элементы.УслугиСумма.Заголовок = НСтр("en='Sum (fact)';ru='Сумма (факт)'");
		Элементы.УслугиСуммаНДС.Заголовок = НСтр("en='VAT (fact)';ru='НДС (факт)'");
		Элементы.УслугиВсего.Заголовок = НСтр("en='Total (fact)';ru='Всего (факт)'");
		Элементы.ПолучаемыеУслугиКоличество.Заголовок = НСтр("en='Quantity (fact)';ru='Колич. (факт)'");
		Элементы.ПолучаемыеУслугиЦена.Заголовок = НСтр("en='Price (fact)';ru='Цена (факт)'");
		Элементы.ПолучаемыеУслугиСумма.Заголовок = НСтр("en='Sum (fact)';ru='Сумма (факт)'");
		Элементы.ПолучаемыеУслугиСуммаНДС.Заголовок = НСтр("en='VAT (fact)';ru='НДС (факт)'");
		Элементы.ПолучаемыеУслугиВсего.Заголовок = НСтр("en='Total (fact)';ru='Всего (факт)'");
		Элементы.ГруппаИтогиПрибыльПодвалПоДокументуПлан.Видимость = Истина;
		Элементы.ГруппаИтогиПрибыльПодвалПоПеревозкеПлан.Видимость = Истина;
		Элементы.ДекорацияПодвалПрибыльПоДокументуФакт.Видимость = Истина;
		Элементы.ДекорацияПодвалПрибыльФакт.Видимость = Истина;
		Элементы.ДекорацияПрибыльДоходы.Ширина = 14;
		Элементы.ДекорацияПрибыльДоходы1.Ширина = 14;
	Иначе
		Элементы.УслугиКоличествоПлан.Видимость = Ложь;
		Элементы.УслугиЦенаПлан.Видимость = Ложь;
		Элементы.УслугиСуммаСкидкиПлан.Видимость = Ложь;
		Элементы.УслугиСуммаПлан.Видимость = Ложь;
		Элементы.УслугиСуммаНДСПлан.Видимость = Ложь;
		Элементы.УслугиВсегоПлан.Видимость = Ложь;
		Элементы.ПолучаемыеУслугиКоличествоПлан.Видимость = Ложь;
		Элементы.ПолучаемыеУслугиЦенаПлан.Видимость = Ложь;
		Элементы.ПолучаемыеУслугиСуммаПлан.Видимость = Ложь;
		Элементы.ПолучаемыеУслугиСуммаНДСПлан.Видимость = Ложь;
		Элементы.ПолучаемыеУслугиВсегоПлан.Видимость = Ложь;
		Элементы.УслугиРасчитатьОказываемыеУслуги.Заголовок = НСтр("en='Calculate on tariffs';ru='Рассчитать по тарифам'");
		Элементы.УслугиПересчитатьДоходы.Заголовок = НСтр("en='Recalculate all rows';ru='Пересчитать во всех строках'");
		Элементы.УслугиПересчитатьДоходыВСтроке.Заголовок = НСтр("en='Recalculate current row';ru='Пересчитать в текущей строке'");
		Элементы.УслугиКонтекстноеМенюПересчитатьДоходыВСтроке.Заголовок = Элементы.УслугиПересчитатьДоходыВСтроке.Заголовок;
		Элементы.ПолучаемыеУслугиПересчитатьРасходы.Заголовок = НСтр("en='Recalculate all rows';ru='Пересчитать во всех строках'");
		Элементы.ПолучаемыеУслугиПересчитатьРасходыВСтроке.Заголовок = НСтр("en='Recalculate current row';ru='Пересчитать в текущей строке'");
		Элементы.ПолучаемыеУслугиКонтекстноеМенюПересчитатьРасходыВСтроке.Заголовок = Элементы.ПолучаемыеУслугиПересчитатьРасходыВСтроке.Заголовок;
		Элементы.ГруппаИтогиПрибыльПодвалПоДокументуПлан.Видимость = Ложь;
		Элементы.ГруппаИтогиПрибыльПодвалПоПеревозкеПлан.Видимость = Ложь;
		Элементы.ДекорацияПодвалПрибыльПоДокументуФакт.Видимость = Ложь;
		Элементы.ДекорацияПодвалПрибыльФакт.Видимость = Ложь;
		Элементы.ДекорацияПрибыльДоходы.Ширина = 10;
		Элементы.ДекорацияПрибыльДоходы1.Ширина = 10;
	КонецЕсли;
	
	Элементы.УслугиВалюта.ТолькоПросмотр           = НЕ МноговалютныйУчет;
	Элементы.ПолучаемыеУслугиВалюта.ТолькоПросмотр = НЕ МноговалютныйУчет;
	
	Элементы.ГруппаОтрезкиПути.Видимость = Элементы.ФормаРежимТехническогоСпециалиста.Пометка;
	Элементы.ПромежуточныеПунктыОткрытьРедакторСхемыПеревозки.Видимость = ВариантПоставкиКОРП;
	
	// Настройка видимости элементов для внешнего пользователя
	Если уатОбщегоНазначения.ПроверкаВнешнегоПользователя() Тогда
		
		Элементы.Ответственный.Доступность = Ложь;
		Элементы.Организация.Доступность = Ложь;
		Элементы.ГруппаСтраницаУслугиПолучаемые.Видимость = Ложь;
		
		// Настройка командной панели
		Элементы.КомандыВнутреннегоПользователя.Видимость = Ложь;
		
		// Ограничение доступа к справочникам
		флЗаказОтКонтрагента = 1;
		Элементы.ГруппаЗаказчик.Доступность = Ложь;
		Элементы.Ответственный.Доступность = Ложь;
		Элементы.Контрагент.ТолькоПросмотр = Истина;
		Элементы.Контрагент.КнопкаВыбора = Ложь;
		Элементы.Контрагент.КнопкаОткрытия = Истина;
		Элементы.СоздатьДоговорКонтрагента.Видимость = Ложь;
		Элементы.Грузоотправитель.КнопкаОткрытия = Ложь;
		Элементы.Грузополучатель.КнопкаОткрытия = Ложь;
		
		Элементы.ГруппаИтогиПрибыльПодвал.Видимость = Ложь;
		
		// Настройка страниц
		Элементы.Услуги.Доступность = Ложь;
		Элементы.Услуги.КоманднаяПанель.Видимость = Ложь;
		Элементы.УслугиТариф.ГиперссылкаЯчейки = Ложь;
		Элементы.ГруппаДоходыПоЭтапам.Видимость = Ложь;
		Элементы.ГруппаСтраницаУслуги.Заголовок = НСтр("en='Cost';ru='Стоимость'");
		Элементы.ДокументыЭтапов.Видимость = Ложь;
		Элементы.ГруппаСтраницаУслугиПолучаемые.Видимость = Ложь;
		Элементы.ГруппаЭтапыЗаказа.Видимость = Ложь;
		Элементы.ГруппаОтрезкиПути.Видимость = Ложь;
		
		Элементы.ТребованиеКТС.КнопкаОткрытия = Ложь;
		Элементы.Подразделение.Видимость = Ложь;
		
		Элементы.СтатусДокумента.Гиперссылка = Ложь;
		
		Если НЕ ПравоРедактированиеДокумента Тогда
			Элементы.НадписьВсегоПоДокументу1.Гиперссылка = Ложь;
		КонецЕсли;
		
		// Отбор документов по внешнему пользователю
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СтатусыСД, "Владелец", Объект.Контрагент);
		Элементы.СтатусыСД.ТолькоПросмотр = Истина;
		
	КонецЕсли;
	
	Элементы.ФормаОткрытьРедакторЦепочкиДокументов.Видимость = ПравоРедактированиеДокумента
		И Не Объект.ЭтоШаблонПеревозки;
	
	Элементы.FTL.Доступность            = Не Объект.ЭтоШаблонПеревозки;
	Элементы.ОтправлениеСДни.Видимость  = Не Объект.ЭтоШаблонПеревозки;
	Элементы.ОтправлениеПоДни.Видимость = Не Объект.ЭтоШаблонПеревозки;
	Элементы.ДнейОтНачалаОтправлениеЭтапаШаблона.Видимость = Объект.ЭтоШаблонПеревозки;
	Элементы.ОтправлениеПредварительноДни.Видимость = Не Объект.ЭтоШаблонПеревозки;
	Элементы.ДоставкаСДни.Видимость     = Не Объект.ЭтоШаблонПеревозки;
	Элементы.ДоставкаПоДни.Видимость    = Не Объект.ЭтоШаблонПеревозки;
	Элементы.ДнейОтНачалаНазначениеЭтапаШаблона.Видимость = Объект.ЭтоШаблонПеревозки;
	Элементы.ПрибытиеПредварительноДни.Видимость = Не Объект.ЭтоШаблонПеревозки;
	Элементы.ГруппаВхДок.Видимость      = Не Объект.ЭтоШаблонПеревозки;
	Элементы.ДатаЗакрытия.Видимость     = Не Объект.ЭтоШаблонПеревозки;
	Элементы.ЦветДокумента.Видимость    = Не Объект.ЭтоШаблонПеревозки;
	
	Элементы.СтатусыСДПлановаяДатаОбработки.Видимость = НЕ Объект.ЭтоШаблонПеревозки;
	Элементы.СтатусыСДГруппаСтатус.Видимость          = НЕ Объект.ЭтоШаблонПеревозки;
	Элементы.СтатусыСДГруппаОтветственный.Видимость   = НЕ Объект.ЭтоШаблонПеревозки;
	Элементы.СтатусыСДГруппаОтправление.Видимость     = НЕ Объект.ЭтоШаблонПеревозки;
	Элементы.СтатусыСДГруппаПрибытие.Видимость        = НЕ Объект.ЭтоШаблонПеревозки;
	Элементы.СтатусыСДПакетДокументов.Видимость       = НЕ Объект.ЭтоШаблонПеревозки;
	Элементы.ДокументыЭтаповПлановаяДатаОбработки.Видимость        = НЕ Объект.ЭтоШаблонПеревозки;
	Элементы.ДокументыЭтаповГруппа3.Видимость                      = НЕ Объект.ЭтоШаблонПеревозки;
	Элементы.ДокументыЭтаповГруппа4.Видимость                      = НЕ Объект.ЭтоШаблонПеревозки;
	Элементы.ДокументыЭтаповГруппа5.Видимость                      = НЕ Объект.ЭтоШаблонПеревозки;
	Элементы.ДокументыЭтаповГруппа6.Видимость                      = НЕ Объект.ЭтоШаблонПеревозки;
	Элементы.ДокументыЭтаповГруппа7.Видимость                      = НЕ Объект.ЭтоШаблонПеревозки;
	Элементы.ДокументыЭтаповПакетДокументовПредставление.Видимость = НЕ Объект.ЭтоШаблонПеревозки;
	Элементы.ГруппаВариантРасчета.Видимость         = Объект.ЭтоШаблонПеревозки;
	Элементы.ГруппаВариантРасчетаРасходы.Видимость  = Объект.ЭтоШаблонПеревозки;
	Элементы.УслугиВидДокумента.Видимость           = Объект.ЭтоШаблонПеревозки;
	Элементы.ПолучаемыеУслугиВидДокумента.Видимость = Объект.ЭтоШаблонПеревозки;
	Элементы.Услуги.Видимость           = НЕ Объект.ЭтоШаблонПеревозки ИЛИ Объект.ВариантРасчетаДоходовИРасходов = 1;
	Элементы.ПолучаемыеУслуги.Видимость = НЕ Объект.ЭтоШаблонПеревозки ИЛИ Объект.ВариантРасчетаДоходовИРасходов = 1;
	Элементы.ГруппаДоходыКомПанель.Видимость        = Элементы.Услуги.Видимость;
	Элементы.ГруппаРасходыКомПанель.Видимость       = Элементы.ПолучаемыеУслуги.Видимость;
	Элементы.ГруппаСтраницыСтатусОбработкиСД.Видимость          = НЕ Объект.ЭтоШаблонПеревозки;
	Элементы.СопроводительныеДокументыГруппаЗаполнить.Видимость = НЕ Объект.ЭтоШаблонПеревозки;
	Элементы.ГруппаРаспределениеЗаказов.Видимость = ВариантПоставкиКОРП;
	
КонецПроцедуры // УстановитьВидимость()

&НаКлиенте
Процедура УстановитьОграничениеТипаКонтрагент(Очищать=Истина)
	Если флЗаказОтКонтрагента Тогда
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
		Если Очищать Тогда
			Объект.Контрагент = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");		
			Элементы.Контрагент.ПодсказкаВвода = НСтр("'Введите ИНН или наименование'; en = 'Enter TIN or name'");
		КонецЕсли;
	Иначе
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций");
		Если Очищать Тогда
			Объект.Контрагент = ПредопределенноеЗначение("Справочник.ПодразделенияОрганизаций.ПустаяСсылка");
			Элементы.Контрагент.ПодсказкаВвода = "";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОграничениеТипаОтправительПолучатель()
	
	Если Объект.ВидДоставки = ВидДоставкиСкладДверь
			ИЛИ Объект.ВидДоставки = ВидДоставкиСкладСклад Тогда
		Элементы.Грузоотправитель.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Склады");
		Элементы.Грузоотправитель.ПодсказкаВвода = "Введите наименование склада";
		Элементы.ВыбратьОтправителяПоКонтрагенту.Доступность = Ложь;
		Элементы.ВыбратьАдресОтправленияИзКИ.Доступность = Ложь;
		
	Иначе
		Элементы.Грузоотправитель.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
		Элементы.Грузоотправитель.ПодсказкаВвода = НСтр("'Введите ИНН или наименование'; en = 'Enter TIN or name'");
		Элементы.ВыбратьОтправителяПоКонтрагенту.Доступность = Истина;
		Элементы.ВыбратьАдресОтправленияИзКИ.Доступность = Истина;
	КонецЕсли;
	
	Если Объект.ВидДоставки = ВидДоставкиДверьСклад
			ИЛИ Объект.ВидДоставки = ВидДоставкиСкладСклад Тогда
		Элементы.Грузополучатель.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Склады");
		Элементы.Грузополучатель.ПодсказкаВвода = "Введите наименование склада";
		Элементы.ВыбратьПолучателяПоКонтрагенту.Доступность = Ложь;
		Элементы.ВыбратьАдресНазначенияИзКИ.Доступность = Ложь;
		
	Иначе
		Элементы.Грузополучатель.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
		Элементы.Грузополучатель.ПодсказкаВвода = НСтр("'Введите ИНН или наименование'; en = 'Enter TIN or name'");
		Элементы.ВыбратьПолучателяПоКонтрагенту.Доступность = Истина;
		Элементы.ВыбратьАдресНазначенияИзКИ.Доступность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПодвалСервер(ПеречитатьКэшРешистров = Ложь)
	// При изменении данных обновим суммы в подвале.
	ЗаписатьПромежуточныеПункты(Объект);
	
	СтруктураДокумента = уатОбщегоНазначенияКлиентСервер.СтруктураДокумента(Объект, "уатЗаказГрузоотправителя");
	ВсегоНДС = уатОбщегоНазначенияТиповые.ПолучитьНДСДокумента(СтруктураДокумента, "Услуги");
	
	//Процедура ВывестиСуммовыеИтогиДокумента()
	Если Объект.УчитыватьНДС Тогда 
		Если Объект.СуммаВключаетНДС Тогда 
			НадписьВсегоНДС = НСтр("en='VAT amount';ru='НДС в сумме'") + ":";
		Иначе 
			НадписьВсегоНДС = НСтр("en='VAT from above';ru='НДС сверху'") + ":";
		КонецЕсли;
		НадписьВсего = НСтр("en='Total with VAT:';ru='Всего с НДС:'");
		Элементы.СтраницыИтогов.ТекущаяСтраница = Элементы.ИтогоУчетНДС;
	Иначе 
		НадписьВсего = НСтр("en='Total:';ru='Всего:'");
		Элементы.СтраницыИтогов.ТекущаяСтраница = Элементы.ИтогоБезНДС;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ВалютаДокумента) Или Объект.ВалютаДокумента = мВалютаРеглУчета Тогда 
		НадписьКурс = "(1.0000)";
		Элементы.НадписьКурс.Видимость = Ложь;
		Элементы.НадписьКурс2.Видимость = Ложь;
	Иначе 
		НадписьКурс = "(" + Формат(
			?(Объект.КратностьВзаиморасчетов = 0, Объект.КурсВзаиморасчетов, Объект.КурсВзаиморасчетов/Объект.КратностьВзаиморасчетов),
			"ЧДЦ=4; ЧРД=.; ЧН=0.0000; ЧГ=0") + ")";
		Элементы.НадписьКурс.Видимость = Истина;
		Элементы.НадписьКурс2.Видимость = Истина;
	КонецЕсли;
	
	ОбновитьПодвалПрибыли(ПеречитатьКэшРешистров);
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииКонтрагентаИлиОрганизации(Знач Оповещение)
	
	ДанныеОбменаССервером = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, Дата, Приоритет");
	ЗаполнитьЗначенияСвойств(ДанныеОбменаССервером, Объект);
	// Получим данные с сервера
	ДанныеОбменаССервером.ДоговорКонтрагента = Объект.ДоговорКонтрагента;
	ЗначенияДляЗаполнения = ИзменениеКонтрагентаСервер(ДанныеОбменаССервером);
	Объект.ДоговорКонтрагента = ЗначенияДляЗаполнения.ДоговорКонтрагента;
	Если ТипЗнч(ДанныеОбменаССервером.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		Объект.Приоритет = ЗначенияДляЗаполнения.Приоритет;
	КонецЕсли;
	ДоговорПередИзменением = Договор;
	//Договор = Объект.ДоговорКонтрагента;
	
	Оповещ = Новый ОписаниеОповещения("ПриИзмененииКонтрагентаИлиОрганизацииЗавершение", ЭтотОбъект, Новый Структура("Оповещение", Оповещение));
	уатОбщегоНазначенияКлиент.ПриИзмененииДоговора(ЭтаФорма, Оповещ, ДоговорПередИзменением);
	
КонецПроцедуры // ПриИзмененииКонтрагентаИлиОрганизации()

&НаКлиенте
Процедура ПриИзмененииКонтрагентаИлиОрганизацииЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Оповещение = ДополнительныеПараметры.Оповещение;
    
	Если Не Оповещение = Неопределено Тогда 
		ВыполнитьОбработкуОповещения(Оповещение);
	КонецЕсли;

КонецПроцедуры // ПриИзмененииКонтрагентаИлиОрганизации()

&НаСервереБезКонтекста
Функция ИзменениеКонтрагентаСервер(ДанныеДляЗаполнения)
	
	СтруктураПараметровДляПолученияДоговора =
		уатЗаполнениеДокументов.ПолучитьСтруктуруПараметровДляПолученияДоговораПродажи();
	
	ЗначенияДляЗаполнения = уатОбщегоНазначенияСервер.ПриИзмененииЗначенияКонтрагента(
		ДанныеДляЗаполнения,
		СтруктураПараметровДляПолученияДоговора
	);
	
	Если ДанныеДляЗаполнения.Свойство("Контрагент") И ДанныеДляЗаполнения.Свойство("Приоритет") Тогда 
		Если ТипЗнч(ДанныеДляЗаполнения.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда 
			ЗначенияДляЗаполнения.Вставить("Приоритет", ДанныеДляЗаполнения.Контрагент.Приоритет);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗначенияДляЗаполнения;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИзменениеКонтрагентаСерверПолучаемыеУслуги(ДанныеДляЗаполнения)
	СтруктураПараметровДляПолученияДоговора =
		уатЗаполнениеДокументов.ПолучитьСтруктуруПараметровДляПолученияДоговораПокупки();
	
	ЗначенияДляЗаполнения = уатОбщегоНазначенияСервер.ПриИзмененииЗначенияКонтрагента(ДанныеДляЗаполнения,
							СтруктураПараметровДляПолученияДоговора);
	Возврат ЗначенияДляЗаполнения;
КонецФункции

// Процедура рассчитывает сумму в строке табличной части.
//
&НаКлиенте
Процедура РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти = Неопределено, ПланФакт = Неопределено, флЕстьСкидки = Ложь)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ПланФакт = Неопределено ИЛИ ПланФакт = "Факт" Тогда
		СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
		Если флЕстьСкидки Тогда
			СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Сумма - СтрокаТабличнойЧасти.СуммаСкидки;
		КонецЕсли;
	КонецЕсли;
	Если ИспользоватьПлановыеУслуги И ПланФакт = Неопределено ИЛИ ПланФакт = "План" Тогда
		СтрокаТабличнойЧасти.СуммаПлан = СтрокаТабличнойЧасти.КоличествоПлан * СтрокаТабличнойЧасти.ЦенаПлан;
		Если флЕстьСкидки Тогда
			СтрокаТабличнойЧасти.СуммаПлан = СтрокаТабличнойЧасти.СуммаПлан - СтрокаТабличнойЧасти.СуммаСкидкиПлан;
		КонецЕсли;
	КонецЕсли;
	
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти, ПланФакт);
	РассчитатьСуммуВсегоВстрокеТЧ(СтрокаТабличнойЧасти, ПланФакт);
		
КонецПроцедуры // РассчитатьСуммуВСтрокеТабличнойЧасти()

&НаКлиенте
Процедура РассчитатьСуммуВсегоВстрокеТЧ(СтрокаТабличнойЧасти, ПланФакт = Неопределено)
	Попытка
		СуммаВключаетНДС = СтрокаТабличнойЧасти.СуммаВключаетНДС;
	Исключение
		СуммаВключаетНДС = Объект.СуммаВключаетНДС;
	КонецПопытки;
	Попытка
		УчитыватьНДС = СтрокаТабличнойЧасти.УчитыватьНДС;
	Исключение
		УчитыватьНДС = Объект.УчитыватьНДС;
	КонецПопытки;
	
	Если ИспользоватьПлановыеУслуги И ПланФакт = Неопределено ИЛИ ПланФакт = "План" Тогда
		СтрокаТабличнойЧасти.ВсегоПлан = СтрокаТабличнойЧасти.СуммаПлан
			+ ?(УчитыватьНДС И НЕ СуммаВключаетНДС, СтрокаТабличнойЧасти.СуммаНДСПлан, 0);
	КонецЕсли;
	Если ПланФакт = Неопределено ИЛИ ПланФакт = "Факт" Тогда
		СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма
			+ ?(УчитыватьНДС И НЕ СуммаВключаетНДС, СтрокаТабличнойЧасти.СуммаНДС, 0);
	КонецЕсли;
КонецПроцедуры

// Рассчитывается сумма НДС в строке табличной части.
//
&НаКлиенте
Процедура РассчитатьСуммуНДС(СтрокаТабличнойЧасти, ПланФакт = Неопределено)
	
	СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	
	Попытка
		СуммаВклНДС = СтрокаТабличнойЧасти.СуммаВключаетНДС;
	Исключение
		СуммаВклНДС = Объект.СуммаВключаетНДС;
	КонецПопытки;
		
	Если ПланФакт = Неопределено ИЛИ ПланФакт = "Факт" Тогда
		СтрокаТабличнойЧасти.СуммаНДС = ?(СуммаВклНДС, 
			СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
			СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
	КонецЕсли;
	Если ИспользоватьПлановыеУслуги И ПланФакт = Неопределено ИЛИ ПланФакт = "План" Тогда
		СтрокаТабличнойЧасти.СуммаНДСПлан = ?(СуммаВклНДС, 
			СтрокаТабличнойЧасти.СуммаПлан - (СтрокаТабличнойЧасти.СуммаПлан) / ((СтавкаНДС + 100) / 100),
			СтрокаТабличнойЧасти.СуммаПлан * СтавкаНДС / 100);
	КонецЕсли;
		
КонецПроцедуры // РассчитатьСуммуНДС()

// Рассчитывается сумма НДС в строке табличной части.
//
&НаСервере
Процедура РассчитатьСуммуНДССервер(СтрокаТабличнойЧасти, ПланФакт = Неопределено)
	
	СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	
	Попытка
		СуммаВклНДС = СтрокаТабличнойЧасти.СуммаВключаетНДС;
	Исключение
		СуммаВклНДС = Объект.СуммаВключаетНДС;
	КонецПопытки;
		
	Если ПланФакт = Неопределено ИЛИ ПланФакт = "Факт" Тогда
		СтрокаТабличнойЧасти.СуммаНДС = ?(СуммаВклНДС, 
			СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
			СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
	КонецЕсли;
	Если ИспользоватьПлановыеУслуги И ПланФакт = Неопределено ИЛИ ПланФакт = "План" Тогда
		СтрокаТабличнойЧасти.СуммаНДСПлан = ?(СуммаВклНДС, 
			СтрокаТабличнойЧасти.СуммаПлан - (СтрокаТабличнойЧасти.СуммаПлан) / ((СтавкаНДС + 100) / 100),
			СтрокаТабличнойЧасти.СуммаПлан * СтавкаНДС / 100);
	КонецЕсли;
		
КонецПроцедуры // РассчитатьСуммуНДС()

&НаКлиенте
Процедура РассчитатьСуммуСкидки(СтрокаТабличнойЧасти, ПланФакт = Неопределено)
	
	Если ПланФакт = Неопределено ИЛИ ПланФакт = "Факт" Тогда
		СтрокаТабличнойЧасти.СуммаСкидки =
			СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.ПроцентСкидки / 100;
	КонецЕсли;
	Если ИспользоватьПлановыеУслуги И ПланФакт = Неопределено ИЛИ ПланФакт = "План" Тогда
		СтрокаТабличнойЧасти.СуммаСкидкиПлан =
			СтрокаТабличнойЧасти.КоличествоПлан * СтрокаТабличнойЧасти.ЦенаПлан * СтрокаТабличнойЧасти.ПроцентСкидки / 100;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуДокумента()
	СтруктураДокумента = уатОбщегоНазначенияКлиентСервер.СтруктураДокумента(Объект, "уатЗаказГрузоотправителя");
	Объект.СуммаДокумента = уатОбщегоНазначенияТиповые.уатПолучитьСуммуДокументаСНДС(СтруктураДокумента, "Услуги");
	
	ОбновитьПодвалСервер();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВсегоВТЧТовары()
	Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		РассчитатьСуммуВсегоВстрокеТЧ(СтрокаТабличнойЧасти, "Факт");
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВсегоВТЧУслуги()
	Для Каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл
		РассчитатьСуммуВсегоВстрокеТЧ(СтрокаТабличнойЧасти);
	КонецЦикла;
	ОбновитьПодвалДоходовРасходов("Услуги");
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВсегоВТЧПолучаемыеУслуги()
	Для Каждого СтрокаТабличнойЧасти Из Объект.Расходы Цикл
		РассчитатьСуммуВсегоВстрокеТЧ(СтрокаТабличнойЧасти);
	КонецЦикла;
	ОбновитьПодвалДоходовРасходов("Расходы");
КонецПроцедуры

&НаСервере
Процедура ОбновитьВсегоВТЧСервер();
	флУчитыватьНДСиСуммаНеВключаетНДС = (Объект.УчитыватьНДС И НЕ Объект.СуммаВключаетНДС);
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
		СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма;
		
		Если флУчитыватьНДСиСуммаНеВключаетНДС Тогда
			СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Всего + СтрокаТабличнойЧасти.СуммаНДС;
		КонецЕсли;
	КонецЦикла;
	Для Каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл
		СтрокаТабличнойЧасти.ВсегоПлан = СтрокаТабличнойЧасти.СуммаПлан;
		СтрокаТабличнойЧасти.Всего     = СтрокаТабличнойЧасти.Сумма;
		
		Если флУчитыватьНДСиСуммаНеВключаетНДС Тогда
			СтрокаТабличнойЧасти.ВсегоПлан = СтрокаТабличнойЧасти.ВсегоПлан + СтрокаТабличнойЧасти.СуммаНДСПлан;
			СтрокаТабличнойЧасти.Всего     = СтрокаТабличнойЧасти.Всего     + СтрокаТабличнойЧасти.СуммаНДС;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Расходы Цикл
		СтрокаТабличнойЧасти.ВсегоПлан = СтрокаТабличнойЧасти.СуммаПлан;
		СтрокаТабличнойЧасти.Всего     = СтрокаТабличнойЧасти.Сумма;
		
		Если СтрокаТабличнойЧасти.УчитыватьНДС И НЕ СтрокаТабличнойЧасти.СуммаВключаетНДС Тогда
			СтрокаТабличнойЧасти.ВсегоПлан = СтрокаТабличнойЧасти.ВсегоПлан + СтрокаТабличнойЧасти.СуммаНДСПлан;
			СтрокаТабличнойЧасти.Всего     = СтрокаТабличнойЧасти.Всего     + СтрокаТабличнойЧасти.СуммаНДС;
		КонецЕсли;
	КонецЦикла;
	
	ОбновитьПодвалДоходовРасходов();
КонецПроцедуры

// Процедура выполняет пересчет в табличной части документа после изменений 
// в форме "Цены и валюта".Выполняется пересчет колонок: цена, скидка, сумма,
// сумма НДС, всего.
//
&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты(Знач Оповещение, Знач ВалютаРасчетовПередИзменением, ПересчитатьЦены = Ложь)
	
	// 1. Формируем структуру параметров для заполнения формы "Цены и Валюта".
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВалютаДокумента",		  Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("Курс",				  Объект.КурсВзаиморасчетов);
	СтруктураПараметров.Вставить("Кратность",			  Объект.КратностьВзаиморасчетов);
	СтруктураПараметров.Вставить("ДатаКурса",             Объект.ДатаКурса);
	СтруктураПараметров.Вставить("Контрагент",			  Объект.Контрагент);
	СтруктураПараметров.Вставить("Договор",				  Объект.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("Организация",			  Объект.Организация);
	СтруктураПараметров.Вставить("ДатаДокумента",		  Объект.Дата);
	СтруктураПараметров.Вставить("ПерезаполнитьЦены",	  Ложь);
	СтруктураПараметров.Вставить("ПересчитатьЦены",		  ПересчитатьЦены);
	СтруктураПараметров.Вставить("БылиВнесеныИзменения",  Ложь);
	СтруктураПараметров.Вставить("СуммаВключаетНДС",      Объект.СуммаВключаетНДС);
	СтруктураПараметров.Вставить("НалогообложениеНДС",	  Объект.УчитыватьНДС);
	// Для объедининенного решения с БП 3
	СтруктураПараметров.Вставить("ДокументБезНДС",       НЕ Объект.УчитыватьНДС);
	СтруктураПараметров.Вставить("ТипЦен",               Объект.ТипЦен);
	
	Если НЕ ПравоРедактированиеДокумента Тогда
		СтруктураПараметров.Вставить("ТолькоПросмотр", Истина);
	КонецЕсли;
	
	ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров,,,,, Новый ОписаниеОповещения("ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение",
		ЭтотОбъект, Новый Структура("ВалютаРасчетовПередИзменением, Оповещение", ВалютаРасчетовПередИзменением, Оповещение)),
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры // ОбработатьИзмененияПоКнопкеЦеныИВалюты()

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено
		ИЛИ НЕ ПравоРедактированиеДокумента Тогда
		Возврат;
	КонецЕсли;
	
	ВалютаРасчетовПередИзменением = ДополнительныеПараметры.ВалютаРасчетовПередИзменением;
	Оповещение                    = ДополнительныеПараметры.Оповещение;
	СтруктураЦеныИВалюта          = Результат;
	
	// 3. Перезаполняем табличную часть "Номенклатура", если были внесены изменения в форме "Цены и Валюта".
	Если ТипЗнч(СтруктураЦеныИВалюта) = Тип("Структура")  Тогда
		ДопПараметры = Новый Структура("ПредКурс, ПредКратность, Курс, Кратность",
			Объект.КурсВзаиморасчетов, Объект.КратностьВзаиморасчетов, СтруктураЦеныИВалюта.Курс, СтруктураЦеныИВалюта.Кратность);
			
		Если СтруктураЦеныИВалюта.Свойство("ВалютаДокумента") И СтруктураЦеныИВалюта.Свойство("Курс") И СтруктураЦеныИВалюта.Свойство("Кратность") И
			СтруктураЦеныИВалюта.Свойство("СуммаВключаетНДС") И  СтруктураЦеныИВалюта.Свойство("НалогообложениеНДС") Тогда
			
			Объект.ВалютаДокумента		   = СтруктураЦеныИВалюта.ВалютаДокумента;
			Объект.КурсВзаиморасчетов	   = СтруктураЦеныИВалюта.Курс;
			Объект.КратностьВзаиморасчетов = СтруктураЦеныИВалюта.Кратность;
			Объект.ДатаКурса               = СтруктураЦеныИВалюта.ДатаКурса;
			Объект.СуммаВключаетНДС		   = СтруктураЦеныИВалюта.СуммаВключаетНДС;
			Объект.УчитыватьНДС			   = СтруктураЦеныИВалюта.НалогообложениеНДС;
			
			Если НЕ МноговалютныйУчет Тогда
				Для Каждого ТекСтрока Из Объект.Услуги Цикл
					ТекСтрока.Валюта = Объект.ВалютаДокумента;
				КонецЦикла;
				Для Каждого ТекСтрока Из Объект.Расходы Цикл
					ТекСтрока.Валюта = Объект.ВалютаДокумента;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		// Пересчитываем сумму если изменился признак Налогообложение НДС.
		Если СтруктураЦеныИВалюта.Свойство("НалогообложениеНДС") И СтруктураЦеныИВалюта.Свойство("ПредНалогообложениеНДС") Тогда
			Если СтруктураЦеныИВалюта.НалогообложениеНДС <> СтруктураЦеныИВалюта.ПредНалогообложениеНДС Тогда
				ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
			КонецЕсли;
		КонецЕсли;
		
		// Пересчитываем цены по валюте.
		Если СтруктураЦеныИВалюта.ПересчитатьЦены Тогда	
			ПересчитатьЦеныТабличнойЧастиПоВалюте(ВалютаРасчетовПередИзменением, "Товары");
			Если НЕ МноговалютныйУчет Тогда
				ПересчитатьЦеныТабличнойЧастиПоВалюте(ВалютаРасчетовПередИзменением, "Услуги", ДопПараметры);
				ПересчитатьЦеныТабличнойЧастиПоВалюте(ВалютаРасчетовПередИзменением, "Расходы", ДопПараметры);
			КонецЕсли;
		КонецЕсли;
		
		// Пересчитываем сумму если изменился признак "Сумма включает НДС".
		Если СтруктураЦеныИВалюта.Свойство("СуммаВключаетНДС") И СтруктураЦеныИВалюта.Свойство("ПредСуммаВключаетНДС") Тогда
			Если СтруктураЦеныИВалюта.СуммаВключаетНДС <> СтруктураЦеныИВалюта.ПредСуммаВключаетНДС Тогда
				ПересчитатьСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС("Товары");
				ПересчитатьСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС("Услуги");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	РассчитатьСуммуДокумента();
	ОбновитьВсегоВТЧУслуги();
    УстановитьВидимость();
	
	Если Оповещение <> Неопределено Тогда 
		ВыполнитьОбработкуОповещения(Оповещение);
	КонецЕсли;
	
КонецПроцедуры // ОбработатьИзмененияПоКнопкеЦеныИВалюты()

&НаКлиенте
Процедура РедактироватьЦеныИВалюту(Команда)
	
	ОбработатьИзмененияПоКнопкеЦеныИВалюты(Новый ОписаниеОповещения("РедактироватьЦеныИВалютуЗавершение", ЭтотОбъект), Объект.ВалютаДокумента);
	
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЦеныИВалютуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ОбновитьВсегоВТЧУслуги();
	Модифицированность = Истина;
	
КонецПроцедуры

// Процедура заполняет Ставку НДС в табличной части по системе налогообложения.
// 
&НаСервере
Процедура ЗаполнитьСтавкуНДСПоНалогообложениеНДС()
	
	//СтавкаНДСПоУмолчанию = уатОбщегоНазначенияПовтИсп.ПолучитьСтавкуНДСНоль();
	СтавкаНДСПоУмолчанию = Перечисления.СтавкиНДС.ПустаяСсылка();
	Для каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл
		СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
		СтрокаТабличнойЧасти.СуммаНДС = 0;
		Если ИспользоватьПлановыеУслуги Тогда
			СтрокаТабличнойЧасти.СуммаНДСПлан = 0;
		КонецЕсли;
	КонецЦикла;
	
	Если Объект.УчитыватьНДС Тогда
		Элементы.УслугиСтавкаНДС.Видимость = Истина;
		Элементы.УслугиСуммаНДС.Видимость  = Истина;
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС) Тогда
				СтрокаТабличнойЧасти.СтавкаНДС = СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
			КонецЕсли;	
			
			СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
			СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
									  		СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
									  		СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
			СтрокаТабличнойЧасти.СуммаНДСПлан = ?(Объект.СуммаВключаетНДС, 
									  		СтрокаТабличнойЧасти.СуммаПлан - (СтрокаТабличнойЧасти.СуммаПлан) / ((СтавкаНДС + 100) / 100),
									  		СтрокаТабличнойЧасти.СуммаПлан * СтавкаНДС / 100);
			
		КонецЦикла;
		
	Иначе
		Элементы.УслугиСтавкаНДС.Видимость = Ложь;
		Элементы.УслугиСуммаНДС.Видимость  = Ложь;
		
	КонецЕсли;	
	
КонецПроцедуры // ЗаполнитьСтавкуНДСПоНалогообложениеНДС()

&НаКлиенте
Процедура АвтоподборНезаполненныхДатМаршрутаПриИзменении(Поле = "")
	
	Если Поле = "ОтправлениеС" Тогда
		СдвинутьДату(Объект.ОтправлениеПо, мОтправлениеПо, Объект.ОтправлениеС, мОтправлениеС);
	ИначеЕсли Поле = "ОтправлениеПо" Тогда
		СдвинутьДату(Объект.ОтправлениеС, мОтправлениеС, Объект.ОтправлениеПо, мОтправлениеПо);
	ИначеЕсли Поле = "ДоставкаС" Тогда
		СдвинутьДату(Объект.ДоставкаПо, мДоставкаПо, Объект.ДоставкаС, мДоставкаС);
	ИначеЕсли Поле = "ДоставкаПо" Тогда
		СдвинутьДату(Объект.ДоставкаС, мДоставкаС, Объект.ДоставкаПо, мДоставкаПо);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура РассчитатьУслугиСервер(СтруктураДокумента, ИмяТЧ, флПлан = Ложь)
	уатРасчетыПоТарифам_уэ.РассчитатьУслугиПоЗаказуНаТС(СтруктураДокумента, флПлан);
КонецПроцедуры

&НаСервере
Процедура ОбновитьНадписьИтоги()
	
	ПредставлениеЕдиницыИзмеренияВеса = Константы.уатЕдиницаИзмеренияВеса.Получить();
	
	ПарамКоличествоМест = " " + Объект.КоличествоМест + " " + Справочники.уатВидыУпаковки_уэ.ПолучитьОсновнойВидУпаковки().КраткоеНаименование + " /";
	
	ПарамВес = "" + Объект.ВесБрутто + " " + ПредставлениеЕдиницыИзмеренияВеса;
	
	Если ИспользоватьРасчетТары
		И ЗначениеЗаполнено(Объект.ВесТары) Тогда 
		ПарамВес = ПарамВес + " + " + Объект.ВесТары + " " + ПредставлениеЕдиницыИзмеренияВеса;
	КонецЕсли;
	
	НадписьВсегоПоДокументу = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 / %2 / %3 / %4 %5 /%6 %7 %8",
		Строка(Объект.Расстояние) + " " + НСтр("en='km';ru='км'"),
		Формат(уатЗащищенныеФункцииСервер.СложитьВремя(Объект.Время, Объект.Стоянка), "ЧДЦ=2; ЧРД=:; ЧН=00:00; ЧГ="),
		ПарамВес, 
		Объект.Объем, 
		Константы.уатЕдиницаИзмеренияОбъема.Получить(),
		ПарамКоличествоМест, Объект.СтоимостьГруза, Объект.ВалютаТоваров);
	
	Если Объект.Выработка.Итог("Значение") > 0 Тогда
		НадписьВсегоПоДокументу = НадписьВсегоПоДокументу + " + доп. выработка";
	КонецЕсли;
	
	Если ТипЗнч(Объект.АдресОтправления) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда 
		СтоянкаДоп = уатОбщегоНазначения.ПолучитьВремяДопСтонки(Объект.АдресОтправления);
	Иначе
		СтоянкаДоп = 0;
	КонецЕсли;
	
	Если ТипЗнч(Объект.АдресОтправления) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда 
		ОбщаяСтоянкаПунктОтправления = уатЗащищенныеФункцииСервер.СложитьВремя(Объект.СтоянкаПунктОтправления, СтоянкаДоп);
	Иначе 
		ОбщаяСтоянкаПунктОтправления = Объект.СтоянкаПунктОтправления;
	КонецЕсли;
	//ОбщаяСтоянкаПунктОтправления = НСтр("ru = 'Общее время стоянки'") + ": " + Формат(ОбщаяСтоянкаОтправление, "ЧДЦ=2; ЧРД=:; ЧН=0:00; ЧГ=");
	
	Если ТипЗнч(Объект.АдресОтправления) = Тип("СправочникСсылка.уатПунктыНазначения") И СтоянкаДоп > 0 Тогда 
		Элементы.ОбщаяСтоянкаПунктОтправления.Подсказка = НСтр("ru = 'С учетом доп.стоянки в пункте'")
			+ " " + Формат(СтоянкаДоп, "ЧДЦ=2; ЧРД=:; ЧН=0:00; ЧГ=")
	Иначе 
		Элементы.ОбщаяСтоянкаПунктОтправления.Подсказка = НСтр("ru = 'Доп.стоянка в пункте не указана'");
	КонецЕсли;
	
	Если ТипЗнч(Объект.АдресНазначения) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда 
		СтоянкаДоп = уатОбщегоНазначения.ПолучитьВремяДопСтонки(Объект.АдресНазначения);
	Иначе
		СтоянкаДоп = 0;
	КонецЕсли;

	Если ТипЗнч(Объект.АдресНазначения) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда 
		ОбщаяСтоянкаПунктНазначения = уатЗащищенныеФункцииСервер.СложитьВремя(Объект.СтоянкаПунктНазначения, СтоянкаДоп);
	Иначе 
		ОбщаяСтоянкаПунктНазначения = Объект.СтоянкаПунктНазначения;
	КонецЕсли;
	//ОбщаяСтоянкаПунктНазначения = НСтр("ru = 'Общее время стоянки'") + ": " + Формат(ОбщаяСтоянкаНазначение, "ЧДЦ=2; ЧРД=:; ЧН=0:00; ЧГ=");
	
	Если ТипЗнч(Объект.АдресНазначения) = Тип("СправочникСсылка.уатПунктыНазначения") И СтоянкаДоп > 0 Тогда 
		Элементы.ОбщаяСтоянкаПунктНазначения.Подсказка = НСтр("ru = 'С учетом доп.стоянки в пункте'")
			+ " " + Формат(СтоянкаДоп, "ЧДЦ=2; ЧРД=:; ЧН=0:00; ЧГ=")
	Иначе 
		Элементы.ОбщаяСтоянкаПунктНазначения.Подсказка = НСтр("ru = 'Доп.стоянка в пункте не указана'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПодвалПрибыли(ПеречитатьКэшРегистров = Ложь)
	НадписьИтогиПрибыльДоходыПлан = 0;
	НадписьИтогиПрибыльДоходыФакт = 0;
	НадписьИтогиПрибыльРасходыПлан = 0;
	НадписьИтогиПрибыльРасходыФакт = 0;
	
	СтруктураВалютаУпр = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(мВалютаУпрУчета, Объект.Дата);
	СтруктураВалютаДок = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
	
	НадписьИтогиПрибыльДоходыПланДокумент = 0;
	НадписьИтогиПрибыльДоходыФактДокумент = 0;
	НадписьИтогиПрибыльРасходыПланДокумент = 0;
	НадписьИтогиПрибыльРасходыФактДокумент = 0;
	КэшКурсов = Неопределено;
	Для Каждого ТекСтрока Из Объект.Услуги Цикл
		Если ЗначениеЗаполнено(ТекСтрока.Валюта) Тогда
			СтруктураКурсаВалютыСтроки = СтруктураКурсаВалютыСтроки(ТекСтрока.Валюта, Объект.ДатаКурса, КэшКурсов);
			
			НадписьИтогиПрибыльДоходыПланДокумент = НадписьИтогиПрибыльДоходыПланДокумент + 
				уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаПлан,
				ТекСтрока.Валюта, Объект.ВалютаДокумента,
				СтруктураКурсаВалютыСтроки.Курс, СтруктураВалютаДок.Курс,
				СтруктураКурсаВалютыСтроки.Кратность, СтруктураВалютаДок.Кратность);
			НадписьИтогиПрибыльДоходыФактДокумент = НадписьИтогиПрибыльДоходыФактДокумент + 
				уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.Сумма,
				ТекСтрока.Валюта, Объект.ВалютаДокумента,
				СтруктураКурсаВалютыСтроки.Курс, СтруктураВалютаДок.Курс,
				СтруктураКурсаВалютыСтроки.Кратность, СтруктураВалютаДок.Кратность);
		Иначе
			НадписьИтогиПрибыльДоходыПланДокумент = НадписьИтогиПрибыльДоходыПланДокумент + ТекСтрока.СуммаПлан;
			НадписьИтогиПрибыльДоходыФактДокумент = НадписьИтогиПрибыльДоходыФактДокумент + ТекСтрока.Сумма;
		КонецЕсли;
	КонецЦикла;
	Для Каждого ТекСтрока Из Объект.Расходы Цикл
		Если ЗначениеЗаполнено(ТекСтрока.Валюта) Тогда
			СтруктураКурсаВалютыСтроки = СтруктураКурсаВалютыСтроки(ТекСтрока.Валюта, Объект.ДатаКурса, КэшКурсов);
			
			НадписьИтогиПрибыльРасходыПланДокумент = НадписьИтогиПрибыльРасходыПланДокумент + 
				уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаПлан,
				ТекСтрока.Валюта, Объект.ВалютаДокумента,
				СтруктураКурсаВалютыСтроки.Курс, СтруктураВалютаДок.Курс,
				СтруктураКурсаВалютыСтроки.Кратность, СтруктураВалютаДок.Кратность);
			НадписьИтогиПрибыльРасходыФактДокумент = НадписьИтогиПрибыльРасходыФактДокумент + 
				уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.Сумма,
				ТекСтрока.Валюта, Объект.ВалютаДокумента,
				СтруктураКурсаВалютыСтроки.Курс, СтруктураВалютаДок.Курс,
				СтруктураКурсаВалютыСтроки.Кратность, СтруктураВалютаДок.Кратность);
		Иначе
			НадписьИтогиПрибыльРасходыПланДокумент = НадписьИтогиПрибыльРасходыПланДокумент + ТекСтрока.СуммаПлан;
			НадписьИтогиПрибыльРасходыФактДокумент = НадписьИтогиПрибыльРасходыФактДокумент + ТекСтрока.Сумма;
		КонецЕсли;
	КонецЦикла;
		
	Если ПеречитатьКэшРегистров И ЗначениеЗаполнено(Объект.Ссылка) Тогда
		// доходы план
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(СУММА(уатПлановыеУслуги_уэОбороты.СуммаУпрОборот - ВЫБОР
		|		КОГДА &ВычитатьНДС
		|			ТОГДА уатПлановыеУслуги_уэОбороты.СуммаНДСУпрОборот
		|		ИНАЧЕ 0
		|	КОНЕЦ), 0) КАК Сумма,
		|	ЕСТЬNULL(СУММА(уатПлановыеУслуги_уэОбороты.СуммаРеглОборот - ВЫБОР
		|		КОГДА &ВычитатьНДС
		|			ТОГДА уатПлановыеУслуги_уэОбороты.СуммаНДСОборот
		|		ИНАЧЕ 0
		|	КОНЕЦ), 0) КАК СуммаРегл
		|ИЗ
		|	РегистрНакопления.уатПлановыеУслуги_уэ.Обороты(
		|			,
		|			,
		|			Регистратор,
		|			ПолучательУслуг = ЗНАЧЕНИЕ(Перечисление.уатПолучателиУслуг.Контрагент)
		|				И ЗаказНаТС <> ЗНАЧЕНИЕ(Документ.уатЗаказГрузоотправителя.ПустаяСсылка)
		|				И (ЗаказНаТС = &Заказ
		|					ИЛИ ЗаказНаТС.РодительскийЗаказ = &Заказ)) КАК уатПлановыеУслуги_уэОбороты
		|ГДЕ
		|	уатПлановыеУслуги_уэОбороты.Регистратор <> &Заказ");
		Запрос.УстановитьПараметр("Заказ", Объект.Ссылка);
		Запрос.УстановитьПараметр("ВычитатьНДС", Объект.УчитыватьНДС И НЕ Объект.СуммаВключаетНДС);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если Объект.ВалютаДокумента = мВалютаРеглУчета Тогда
				НадписьИтогиПрибыльДоходыПланКэшРегистров = Выборка.СуммаРегл;
			Иначе
				Если Объект.ВалютаДокумента = мВалютаУпрУчета Тогда
					НадписьИтогиПрибыльДоходыПланКэшРегистров = Выборка.Сумма;
				Иначе
					НадписьИтогиПрибыльДоходыПланКэшРегистров = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(Выборка.Сумма,
						мВалютаУпрУчета, Объект.ВалютаДокумента,
						СтруктураВалютаУпр.Курс, СтруктураВалютаДок.Курс,
						СтруктураВалютаУпр.Кратность, СтруктураВалютаДок.Кратность);
				КонецЕсли;
			КонецЕсли;
		Иначе
			НадписьИтогиПрибыльДоходыПланКэшРегистров = 0;
		КонецЕсли;
		
		// расходы план
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЕСТЬNULL(СУММА(уатПлановыеУслуги_уэОбороты.СуммаУпрОборот - ВЫБОР
		|		КОГДА &ВычитатьНДС
		|			ТОГДА уатПлановыеУслуги_уэОбороты.СуммаНДСУпрОборот
		|		ИНАЧЕ 0
		|	КОНЕЦ), 0) КАК Сумма,
		|	ЕСТЬNULL(СУММА(уатПлановыеУслуги_уэОбороты.СуммаРеглОборот - ВЫБОР
		|		КОГДА &ВычитатьНДС
		|			ТОГДА уатПлановыеУслуги_уэОбороты.СуммаНДСОборот
		|		ИНАЧЕ 0
		|	КОНЕЦ), 0) КАК СуммаРегл
		|ИЗ
		|	РегистрНакопления.уатПлановыеУслуги_уэ.Обороты(
		|			,
		|			,
		|			Регистратор,
		|			ПолучательУслуг = ЗНАЧЕНИЕ(Перечисление.уатПолучателиУслуг.НашаОрганизация)
		|				И ЗаказНаТС <> ЗНАЧЕНИЕ(Документ.уатЗаказГрузоотправителя.ПустаяСсылка)
		|				И (ЗаказНаТС = &Заказ ИЛИ ЗаказНаТС.РодительскийЗаказ = &Заказ)) КАК уатПлановыеУслуги_уэОбороты
		|ГДЕ
		|	уатПлановыеУслуги_уэОбороты.Регистратор <> &Заказ");
		Запрос.УстановитьПараметр("Заказ", Объект.Ссылка);
		Запрос.УстановитьПараметр("ВычитатьНДС", Объект.УчитыватьНДС И НЕ Объект.СуммаВключаетНДС);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			Если Объект.ВалютаДокумента = мВалютаРеглУчета Тогда
				НадписьИтогиПрибыльРасходыПланКэшРегистров = Выборка.СуммаРегл;
			Иначе
				Если Объект.ВалютаДокумента = мВалютаУпрУчета Тогда
					НадписьИтогиПрибыльРасходыПланКэшРегистров = Выборка.Сумма;
				Иначе
					НадписьИтогиПрибыльРасходыПланКэшРегистров = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(Выборка.Сумма,
						мВалютаУпрУчета, Объект.ВалютаДокумента,
						СтруктураВалютаУпр.Курс, СтруктураВалютаДок.Курс,
						СтруктураВалютаУпр.Кратность, СтруктураВалютаДок.Кратность);
				КонецЕсли;
			КонецЕсли;
		Иначе
			НадписьИтогиПрибыльРасходыПланКэшРегистров = 0;
		КонецЕсли;
		
		// доходы факт
		Если Объект.Ссылка.Пустая() Тогда
			НадписьИтогиПрибыльДоходыФактКэшРегистров = 0;
		Иначе
			Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	уатЗаказГрузоотправителя.Ссылка КАК Заказ
			|ПОМЕСТИТЬ ВТ_Заказы
			|ИЗ
			|	Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
			|ГДЕ
			|	уатЗаказГрузоотправителя.Ссылка = &Заказ
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	уатЗаказГрузоотправителя.Ссылка
			|ИЗ
			|	Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
			|ГДЕ
			|	уатЗаказГрузоотправителя.РодительскийЗаказ = &Заказ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	уатДоходыОстатки.СуммаУпрОстаток - ВЫБОР
			|		КОГДА &ВычитатьНДС
			|			ТОГДА уатДоходыОстатки.СуммаНДСУпрОстаток
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК Сумма,
			|	уатДоходыОстатки.СуммаРеглОстаток - ВЫБОР
			|		КОГДА &ВычитатьНДС
			|			ТОГДА уатДоходыОстатки.СуммаНДСОстаток
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК СуммаРегл,
			|	0 КАК ФинРез
			|ПОМЕСТИТЬ тбл
			|ИЗ
			|	РегистрНакопления.уатДоходы.Остатки(
			|			,
			|			Заказ В
			|				(ВЫБРАТЬ
			|					ВТ_Заказы.Заказ
			|				ИЗ
			|					ВТ_Заказы)) КАК уатДоходыОстатки
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	0,
			|	0,
			|	ВЫБОР
			|		КОГДА &ВычитатьНДС
			|			ТОГДА уатФинансовыеРезультатыОбороты.СуммаДоходовБезНДСУпрОборот
			|		ИНАЧЕ уатФинансовыеРезультатыОбороты.СуммаДоходовУпрОборот
			|	КОНЕЦ
			|ИЗ
			|	РегистрНакопления.уатФинансовыеРезультаты.Обороты(
			|			,
			|			,
			|			,
			|			Заказ В
			|				(ВЫБРАТЬ
			|					ВТ_Заказы.Заказ
			|				ИЗ
			|					ВТ_Заказы)) КАК уатФинансовыеРезультатыОбороты
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	-(уатДоходыДвижения.СуммаУпрОборот - ВЫБОР
			|		КОГДА &ВычитатьНДС
			|			ТОГДА уатДоходыДвижения.СуммаНДСУпрОборот
			|		ИНАЧЕ 0
			|	КОНЕЦ),
			|	-(уатДоходыДвижения.СуммаРеглОборот - ВЫБОР
			|		КОГДА &ВычитатьНДС
			|			ТОГДА уатДоходыДвижения.СуммаНДСОборот
			|		ИНАЧЕ 0
			|	КОНЕЦ),
			|	0
			|ИЗ
			|	РегистрНакопления.уатДоходы.Обороты(
			|			,
			|			,
			|			Регистратор,
			|			Заказ В
			|				(ВЫБРАТЬ
			|					ВТ_Заказы.Заказ
			|				ИЗ
			|					ВТ_Заказы)) КАК уатДоходыДвижения
			|ГДЕ
			|	уатДоходыДвижения.Регистратор = &Заказ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СУММА(тбл.Сумма) КАК Сумма,
			|	СУММА(тбл.СуммаРегл) КАК СуммаРегл,
			|	СУММА(тбл.ФинРез) КАК ФинРез
			|ИЗ
			|	тбл КАК тбл");
			Запрос.УстановитьПараметр("Заказ", Объект.Ссылка);
			Запрос.УстановитьПараметр("ВычитатьНДС", Объект.УчитыватьНДС И НЕ Объект.СуммаВключаетНДС);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Если Объект.ВалютаДокумента = мВалютаУпрУчета Тогда
					НадписьИтогиПрибыльДоходыФактКэшРегистров = Выборка.Сумма;
				ИначеЕсли Объект.ВалютаДокумента = мВалютаРеглУчета Тогда
					НадписьИтогиПрибыльДоходыФактКэшРегистров = Выборка.СуммаРегл;
				Иначе
					НадписьИтогиПрибыльДоходыФактКэшРегистров = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(Выборка.Сумма,
						мВалютаУпрУчета, Объект.ВалютаДокумента,
						СтруктураВалютаУпр.Курс, СтруктураВалютаДок.Курс,
						СтруктураВалютаУпр.Кратность, СтруктураВалютаДок.Кратность);
				КонецЕсли;
				
				НадписьИтогиПрибыльДоходыФактКэшРегистров = НадписьИтогиПрибыльДоходыФактКэшРегистров + 
					уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(Выборка.ФинРез,
					мВалютаУпрУчета, Объект.ВалютаДокумента,
					СтруктураВалютаУпр.Курс, СтруктураВалютаДок.Курс,
					СтруктураВалютаУпр.Кратность, СтруктураВалютаДок.Кратность);
			Иначе
				НадписьИтогиПрибыльДоходыФактКэшРегистров = 0;
			КонецЕсли;
		КонецЕсли;
				
		// расходы факт
		Если Объект.Ссылка.Пустая() Тогда
			НадписьИтогиПрибыльРасходыФактКэшРегистров = 0;
		Иначе
			Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	уатЗаказГрузоотправителя.Ссылка КАК Заказ
			|ПОМЕСТИТЬ ВТ_Заказы
			|ИЗ
			|	Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
			|ГДЕ
			|	уатЗаказГрузоотправителя.Ссылка = &Заказ
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	уатЗаказГрузоотправителя.Ссылка
			|ИЗ
			|	Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
			|ГДЕ
			|	уатЗаказГрузоотправителя.РодительскийЗаказ = &Заказ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	уатРасходыОстатки.СуммаУпрОстаток - ВЫБОР
			|		КОГДА &ВычитатьНДС
			|			ТОГДА уатРасходыОстатки.СуммаНДСУпрОстаток
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК Сумма,
			|	уатРасходыОстатки.СуммаРеглОстаток - ВЫБОР
			|		КОГДА &ВычитатьНДС
			|			ТОГДА уатРасходыОстатки.СуммаНДСОстаток
			|		ИНАЧЕ 0
			|	КОНЕЦ КАК СуммаРегл,
			|	0 КАК ФинРез
			|ПОМЕСТИТЬ тбл
			|ИЗ
			|	РегистрНакопления.уатРасходы.Остатки(
			|			,
			|			Заказ В
			|				(ВЫБРАТЬ
			|					ВТ_Заказы.Заказ
			|				ИЗ
			|					ВТ_Заказы)) КАК уатРасходыОстатки
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	0,
			|	0,
			|	ВЫБОР
			|		КОГДА &ВычитатьНДС
			|			ТОГДА уатФинансовыеРезультатыОбороты.СуммаРасходовБезНДСУпрОборот
			|		ИНАЧЕ уатФинансовыеРезультатыОбороты.СуммаРасходовУпрОборот
			|	КОНЕЦ
			|ИЗ
			|	РегистрНакопления.уатФинансовыеРезультаты.Обороты(
			|			,
			|			,
			|			,
			|			Заказ В
			|				(ВЫБРАТЬ
			|					ВТ_Заказы.Заказ
			|				ИЗ
			|					ВТ_Заказы)) КАК уатФинансовыеРезультатыОбороты
			|
			|ОБЪЕДИНИТЬ ВСЕ
			|
			|ВЫБРАТЬ
			|	-(уатРасходыДвижения.СуммаУпрОборот - ВЫБОР
			|		КОГДА &ВычитатьНДС
			|			ТОГДА уатРасходыДвижения.СуммаНДСУпрОборот
			|		ИНАЧЕ 0
			|	КОНЕЦ),
			|	-(уатРасходыДвижения.СуммаРеглОборот - ВЫБОР
			|		КОГДА &ВычитатьНДС
			|			ТОГДА уатРасходыДвижения.СуммаНДСОборот
			|		ИНАЧЕ 0
			|	КОНЕЦ),
			|	0
			|ИЗ
			|	РегистрНакопления.уатРасходы.Обороты(
			|			,
			|			,
			|			Регистратор,
			|			Заказ В
			|				(ВЫБРАТЬ
			|					ВТ_Заказы.Заказ
			|				ИЗ
			|					ВТ_Заказы)) КАК уатРасходыДвижения
			|ГДЕ
			|	уатРасходыДвижения.Регистратор = &Заказ
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	СУММА(тбл.Сумма) КАК Сумма,
			|	СУММА(тбл.СуммаРегл) КАК СуммаРегл,
			|	СУММА(тбл.ФинРез) КАК ФинРез
			|ИЗ
			|	тбл КАК тбл");
			Запрос.УстановитьПараметр("Заказ", Объект.Ссылка);
			Запрос.УстановитьПараметр("ВычитатьНДС", Объект.УчитыватьНДС И НЕ Объект.СуммаВключаетНДС);
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				Если Объект.ВалютаДокумента = мВалютаУпрУчета Тогда
					НадписьИтогиПрибыльРасходыФактКэшРегистров = Выборка.Сумма;
				ИначеЕсли Объект.ВалютаДокумента = мВалютаРеглУчета Тогда
					НадписьИтогиПрибыльРасходыФактКэшРегистров = Выборка.СуммаРегл;
				Иначе
					НадписьИтогиПрибыльРасходыФактКэшРегистров = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(Выборка.Сумма,
						мВалютаУпрУчета, Объект.ВалютаДокумента,
						СтруктураВалютаУпр.Курс, СтруктураВалютаДок.Курс,
						СтруктураВалютаУпр.Кратность, СтруктураВалютаДок.Кратность);
				КонецЕсли;
					
				НадписьИтогиПрибыльРасходыФактКэшРегистров = НадписьИтогиПрибыльРасходыФактКэшРегистров + 
					уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(Выборка.ФинРез,
						мВалютаУпрУчета, Объект.ВалютаДокумента,
						СтруктураВалютаУпр.Курс, СтруктураВалютаДок.Курс,
						СтруктураВалютаУпр.Кратность, СтруктураВалютаДок.Кратность);
			Иначе
				НадписьИтогиПрибыльРасходыФактКэшРегистров = 0;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	НадписьИтогиПрибыльДоходыПлан = НадписьИтогиПрибыльДоходыПланКэшРегистров + НадписьИтогиПрибыльДоходыПланДокумент;
	НадписьИтогиПрибыльРасходыПлан = НадписьИтогиПрибыльРасходыПланКэшРегистров + НадписьИтогиПрибыльРасходыПланДокумент;
	НадписьИтогиПрибыльДоходыФакт = НадписьИтогиПрибыльДоходыФактКэшРегистров + НадписьИтогиПрибыльДоходыФактДокумент;
	НадписьИтогиПрибыльРасходыФакт = НадписьИтогиПрибыльРасходыФактКэшРегистров + НадписьИтогиПрибыльРасходыФактДокумент;
	
	НадписьИтогиПрибыльПрибыльПлан = НадписьИтогиПрибыльДоходыПлан - НадписьИтогиПрибыльРасходыПлан;
	НадписьИтогиПрибыльПрибыльФакт = НадписьИтогиПрибыльДоходыФакт - НадписьИтогиПрибыльРасходыФакт;
	
	НадписьИтогиПрибыльПоПеревозке =
		НСтр("en='Profit on transportation: ';ru='Прибыль по перевозке: '") + Формат(НадписьИтогиПрибыльПрибыльФакт, "ЧН=0")
		+ " " + Объект.ВалютаДокумента;
		
	Если НадписьИтогиПрибыльПрибыльФакт < 0
		И Элементы.ГруппаИтогиПрибыльПодвалПоПеревозке.ЦветТекстаЗаголовка <> WebЦвета.Красный Тогда
		Элементы.ГруппаИтогиПрибыльПодвалПоПеревозке.ЦветТекстаЗаголовка = WebЦвета.Красный;
	ИначеЕсли НадписьИтогиПрибыльПрибыльФакт >= 0
		И Элементы.ГруппаИтогиПрибыльПодвалПоПеревозке.ЦветТекстаЗаголовка = WebЦвета.Красный Тогда
		Элементы.ГруппаИтогиПрибыльПодвалПоПеревозке.ЦветТекстаЗаголовка = Новый Цвет(0, 150, 70);
	КонецЕсли;
	
	НадписьИтогиПрибыльПрибыльПланДокумент = НадписьИтогиПрибыльДоходыПланДокумент - НадписьИтогиПрибыльРасходыПланДокумент;
	НадписьИтогиПрибыльПрибыльФактДокумент = НадписьИтогиПрибыльДоходыФактДокумент - НадписьИтогиПрибыльРасходыФактДокумент;
	
	НадписьИтогиПрибыльПоДокументу = НСтр("en='Profit on document: ';ru='Прибыль по документу: '")
		+ Формат(НадписьИтогиПрибыльПрибыльФактДокумент, "ЧН=0") + " " + Объект.ВалютаДокумента;
		
	Если НадписьИтогиПрибыльПрибыльФактДокумент < 0
		И Элементы.ГруппаИтогиПрибыльПодвалПоДокументу.ЦветТекстаЗаголовка <> WebЦвета.Красный Тогда
		Элементы.ГруппаИтогиПрибыльПодвалПоДокументу.ЦветТекстаЗаголовка = WebЦвета.Красный;
	ИначеЕсли НадписьИтогиПрибыльПрибыльФактДокумент >= 0
		И Элементы.ГруппаИтогиПрибыльПодвалПоДокументу.ЦветТекстаЗаголовка = WebЦвета.Красный Тогда
		Элементы.ГруппаИтогиПрибыльПодвалПоДокументу.ЦветТекстаЗаголовка = Новый Цвет(0, 150, 70);
	КонецЕсли;
	
	ОбновитьПодвалОплачено();
КонецПроцедуры

&НаСервере
Процедура ОбновитьПодвалОплачено()

	мсвЗаказы = Новый Массив;
	мсвЗаказы.Добавить(Объект.Ссылка);
	СостояниеОплатыПоЗаказу = уатОбщегоНазначения_проф.СостояниеОплатыПоЗаказам(мсвЗаказы)[0];
    
	ЗаголовокИтогиОплачено = СтрШаблон("Оплата по перевозке: %1 %2 (%3)",
		Формат(СостояниеОплатыПоЗаказу.СуммаОплатыФакт, "ЧДЦ=2; ЧН=0"),
		Объект.ВалютаДокумента,
		Формат(СостояниеОплатыПоЗаказу.ПроцентОплатыФакт, "ЧДЦ=0; ЧН=0") + "%");
		
	флКрасныйЗаголовок = Ложь;
	Если СостояниеОплатыПоЗаказу.ПроцентПредоплаты = 0 Тогда
		НадписьИтогиПредоплата = "Оплата до отправки не требуется";
	Иначе
		НадписьИтогиПредоплата = СтрШаблон("Требуется до отправки: %1 (%2)",
			Формат(СостояниеОплатыПоЗаказу.СуммаПредоплаты, "ЧДЦ=2; ЧН=0"),
			Формат(СостояниеОплатыПоЗаказу.ПроцентПредоплаты, "ЧДЦ=0; ЧН=0") + "%");
		Если СостояниеОплатыПоЗаказу.СуммаОплатыФакт < СостояниеОплатыПоЗаказу.СуммаПредоплаты Тогда
			флКрасныйЗаголовок = Истина;
		КонецЕсли;
	КонецЕсли;
	Если флКрасныйЗаголовок И Элементы.ГруппаИтогиПрибыльОплачено.ЦветТекстаЗаголовка <> WebЦвета.Красный Тогда
		Элементы.ГруппаИтогиПрибыльОплачено.ЦветТекстаЗаголовка = WebЦвета.Красный;
	ИначеЕсли НЕ флКрасныйЗаголовок И Элементы.ГруппаИтогиПрибыльОплачено.ЦветТекстаЗаголовка = WebЦвета.Красный Тогда
		Элементы.ГруппаИтогиПрибыльОплачено.ЦветТекстаЗаголовка = Новый Цвет(0, 150, 70);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПараметрВыработкиВременныйОказ()
	Для Каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл
		Если СтрокаТабличнойЧасти.Тариф.МетодРасчета = Перечисления.уатМетодыРасчетаПоТарифам.ПроцентомОтСуммы Тогда
			СтрокаТабличнойЧасти.ПараметрВыработки = Справочники.уатПараметрыВыработки.Наценка;
		Иначе
			СтрокаТабличнойЧасти.ПараметрВыработки = СтрокаТабличнойЧасти.Тариф.ПараметрВыработки;
		КонецЕсли;
		СтрокаТабличнойЧасти.ПараметрВыработкиВременный = СтрокаТабличнойЧасти.ПараметрВыработки.Временный;
		Если СтрокаТабличнойЧасти.ПараметрВыработкиВременный Тогда
			СтрокаТабличнойЧасти.КоличествоВыработка = уатОбщегоНазначения.уатВремяВЧЧ_ММ(СтрокаТабличнойЧасти.Количество*3600);
			СтрокаТабличнойЧасти.КоличествоВыработкаПлан = уатОбщегоНазначения.уатВремяВЧЧ_ММ(СтрокаТабличнойЧасти.КоличествоПлан*3600);
		Иначе
			СтрокаТабличнойЧасти.КоличествоВыработка = СтрокаТабличнойЧасти.Количество;
			СтрокаТабличнойЧасти.КоличествоВыработкаПлан = СтрокаТабличнойЧасти.КоличествоПлан;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОбновитьПараметрВыработкиВременныйПолуч()
	Для Каждого СтрокаТабличнойЧасти Из Объект.Расходы Цикл
		Если СтрокаТабличнойЧасти.Тариф.МетодРасчета = Перечисления.уатМетодыРасчетаПоТарифам.ПроцентомОтСуммы Тогда
			СтрокаТабличнойЧасти.ПараметрВыработки = Справочники.уатПараметрыВыработки.Наценка;
		Иначе
			СтрокаТабличнойЧасти.ПараметрВыработки = СтрокаТабличнойЧасти.Тариф.ПараметрВыработки;
		КонецЕсли;
		СтрокаТабличнойЧасти.ПараметрВыработкиВременный = СтрокаТабличнойЧасти.ПараметрВыработки.Временный;
		Если СтрокаТабличнойЧасти.ПараметрВыработкиВременный Тогда
			СтрокаТабличнойЧасти.КоличествоВыработка = уатОбщегоНазначения.уатВремяВЧЧ_ММ(СтрокаТабличнойЧасти.Количество*3600);
			СтрокаТабличнойЧасти.КоличествоВыработкаПлан = уатОбщегоНазначения.уатВремяВЧЧ_ММ(СтрокаТабличнойЧасти.КоличествоПлан*3600);
		Иначе
			СтрокаТабличнойЧасти.КоличествоВыработка = СтрокаТабличнойЧасти.Количество;
			СтрокаТабличнойЧасти.КоличествоВыработкаПлан = СтрокаТабличнойЧасти.КоличествоПлан;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФорматРедактированияКоличествоВыработкиОказ()
	ТекСтрока = Элементы.Услуги.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекСтрока.ПараметрВыработкиВременный Тогда
		Элементы.УслугиКоличество.ФорматРедактирования = "ЧДЦ=2; ЧРД=:";
		Если ИспользоватьПлановыеУслуги Тогда
			Элементы.УслугиКоличествоПлан.ФорматРедактирования = "ЧДЦ=2; ЧРД=:";
		КонецЕсли;
	Иначе
		Элементы.УслугиКоличество.ФорматРедактирования = "";
		Если ИспользоватьПлановыеУслуги Тогда
			Элементы.УслугиКоличествоПлан.ФорматРедактирования = "";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФорматРедактированияКоличествоВыработкиПолуч()
	ТекСтрока = Элементы.ПолучаемыеУслуги.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекСтрока.ПараметрВыработкиВременный Тогда
		Элементы.ПолучаемыеУслугиКоличество.ФорматРедактирования = "ЧДЦ=2; ЧРД=:";
		Если ИспользоватьПлановыеУслуги Тогда
			Элементы.ПолучаемыеУслугиКоличествоПлан.ФорматРедактирования = "ЧДЦ=2; ЧРД=:";
		КонецЕсли;
	Иначе
		Элементы.ПолучаемыеУслугиКоличество.ФорматРедактирования = "";
		Если ИспользоватьПлановыеУслуги Тогда
			Элементы.ПолучаемыеУслугиКоличествоПлан.ФорматРедактирования = "";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСписокГрузовыхМестРодительскогоЗаказа(Знач РодительскийЗаказ, Знач ИмяТЧ)
	
	Возврат Документы.уатЗаказГрузоотправителя.ПолучитьСписокГрузовыхМестРодительскогоЗаказа(РодительскийЗаказ, ИмяТЧ);
	
КонецФункции // ПолучитьСписокГрузовыхМестРодительскогоЗаказа()

&НаСервереБезКонтекста
Функция ПолучитьСписокГрузовыхМестРодительскогоЗаказаДляАвтоподбора(Знач РодительскийЗаказ, Знач ИмяТЧ, Знач СтрокаПодбора)
	
	Возврат Документы.уатЗаказГрузоотправителя.ПолучитьСписокГрузовыхМестРодительскогоЗаказаДляАвтоподбора(РодительскийЗаказ, ИмяТЧ, СтрокаПодбора);
	
КонецФункции // ПолучитьСписокГрузовыхМестРодительскогоЗаказаДляАвтоподбора()

&НаСервереБезКонтекста
Функция ПолучитьСписокТоваровРодительскогоЗаказа(Знач РодительскийЗаказ)
	
	Возврат Документы.уатЗаказГрузоотправителя.ПолучитьСписокТоваровРодительскогоЗаказа(РодительскийЗаказ);
	
КонецФункции // ПолучитьСписокТоваровРодительскогоЗаказа()

&НаСервереБезКонтекста
Функция ПолучитьСписокТоваровРодительскогоЗаказаДляАвтоподбора(Знач РодительскийЗаказ, Знач СтрокаПодбора)
	
	Возврат Документы.уатЗаказГрузоотправителя.ПолучитьСписокТоваровРодительскогоЗаказаДляАвтоподбора(РодительскийЗаказ, СтрокаПодбора);
	
КонецФункции // ПолучитьСписокТоваровРодительскогоЗаказаДляАвтоподбора()

&НаСервере
Процедура ЗаписатьИзмененияТаблицыЭтапов()
	
	Для Сч = 0 По ТабЭтапыЗаказа.Количество()-1 Цикл 
		НаборЗаписей = РегистрыСведений.уатЭтапыМультимодальныхПеревозок_уэ.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ЗаказГрузоотправителя.Установить(Объект.Ссылка);
		НаборЗаписей.Отбор.Этап.Установить(ТабЭтапыЗаказа[Сч].Этап);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() Тогда 
			НаборЗаписей[0].НомерЭтапа          = Сч + 1;
			НаборЗаписей[0].ДатаОтправленияПлан = ТабЭтапыЗаказа[Сч].ДатаОтправленияПлан;
			НаборЗаписей[0].ДатаПрибытияПлан    = ТабЭтапыЗаказа[Сч].ДатаПрибытияПлан;
			Если Объект.ЭтоШаблонПеревозки Тогда
				НаборЗаписей[0].ДоговорСПеревозчиком                      = ТабЭтапыЗаказа[Сч].ДоговорСПеревозчиком;
				НаборЗаписей[0].НастройкаФормированияКомплектовДокументов = ТабЭтапыЗаказа[Сч].НастройкаФормированияКомплектовДокументов;
				НаборЗаписей[0].Перевозчик                                = ТабЭтапыЗаказа[Сч].Перевозчик;
				НаборЗаписей[0].СоздаватьАктОтгрузки                      = ТабЭтапыЗаказа[Сч].СоздаватьАктОтгрузки;
				НаборЗаписей[0].СоздаватьАктПриемки                       = ТабЭтапыЗаказа[Сч].СоздаватьАктПриемки;
				НаборЗаписей[0].СоздаватьИзвлечениеГрузовИзКонтейнера     = ТабЭтапыЗаказа[Сч].СоздаватьИзвлечениеГрузовИзКонтейнера;
				НаборЗаписей[0].СоздаватьМаршрутныйЛист                   = ТабЭтапыЗаказа[Сч].СоздаватьМаршрутныйЛист;
				НаборЗаписей[0].СоздаватьРазмещениеГрузовВКонтейнере      = ТабЭтапыЗаказа[Сч].СоздаватьРазмещениеГрузовВКонтейнере;
				НаборЗаписей[0].ТС                                        = ТабЭтапыЗаказа[Сч].ТС;
				НаборЗаписей[0].ТС                                        = ТабЭтапыЗаказа[Сч].ТС;
				НаборЗаписей[0].ТС                                        = ТабЭтапыЗаказа[Сч].ТС;
				НаборЗаписей[0].ДнейОтНачалаОтправление                   = ТабЭтапыЗаказа[Сч].ДнейОтНачалаОтправление;
				НаборЗаписей[0].ДнейОтНачалаНазначение                    = ТабЭтапыЗаказа[Сч].ДнейОтНачалаНазначение;
			Иначе
				НаборЗаписей[0].ДоговорСПеревозчиком                      = Неопределено;
				НаборЗаписей[0].НастройкаФормированияКомплектовДокументов = Неопределено;
				НаборЗаписей[0].Перевозчик                                = Неопределено;
				НаборЗаписей[0].СоздаватьАктОтгрузки                      = Ложь;
				НаборЗаписей[0].СоздаватьАктПриемки                       = Ложь;
				НаборЗаписей[0].СоздаватьИзвлечениеГрузовИзКонтейнера     = Ложь;
				НаборЗаписей[0].СоздаватьМаршрутныйЛист                   = Ложь;
				НаборЗаписей[0].СоздаватьРазмещениеГрузовВКонтейнере      = Ложь;
				НаборЗаписей[0].ТС                                        = Неопределено;
				НаборЗаписей[0].ДнейОтНачалаОтправление                   = Неопределено;
				НаборЗаписей[0].ДнейОтНачалаНазначение                    = Неопределено;
			КонецЕсли;
			НаборЗаписей.Записать(Истина);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокЭтапов()
	
	Если НЕ Объект.Мультимодальный
		ИЛИ Объект.ЭтоЭтап Тогда 
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ЗаказГрузоотправителя", Объект.Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА уатЗаказГрузоотправителя.ПометкаУдаления
	|			ТОГДА 2
	|		ИНАЧЕ ВЫБОР
	|				КОГДА уатЗаказГрузоотправителя.Проведен
	|					ТОГДА 1
	|				ИНАЧЕ 0
	|			КОНЕЦ
	|	КОНЕЦ КАК ИндексКартинки,
	|	уатЭтапыМультимодальныхПеревозок_уэ.Этап КАК Этап,
	|	уатЗаказГрузоотправителя.АдресОтправления КАК АдресОтправления,
	|	уатЗаказГрузоотправителя.АдресНазначения КАК АдресПрибытия,
	|	уатЗаказГрузоотправителя.ВидПеревозки КАК ВидПеревозки,
	|	уатЗаказГрузоотправителя.Расстояние КАК Расстояние,
	|	уатЗаказГрузоотправителя.Время КАК Время,
	|	уатЭтапыМультимодальныхПеревозок_уэ.ДатаОтправленияПлан КАК ДатаОтправленияПлан,
	|	уатЭтапыМультимодальныхПеревозок_уэ.ДатаПрибытияПлан КАК ДатаПрибытияПлан,
	|	уатЭтапыМультимодальныхПеревозок_уэ.НомерЭтапа КАК НомерЭтапа,
	|	уатЭтапыМультимодальныхПеревозок_уэ.СоздаватьАктОтгрузки КАК СоздаватьАктОтгрузки,
	|	уатЭтапыМультимодальныхПеревозок_уэ.СоздаватьАктПриемки КАК СоздаватьАктПриемки,
	|	уатЭтапыМультимодальныхПеревозок_уэ.СоздаватьИзвлечениеГрузовИзКонтейнера КАК СоздаватьИзвлечениеГрузовИзКонтейнера,
	|	уатЭтапыМультимодальныхПеревозок_уэ.СоздаватьМаршрутныйЛист КАК СоздаватьМаршрутныйЛист,
	|	уатЭтапыМультимодальныхПеревозок_уэ.СоздаватьРазмещениеГрузовВКонтейнере КАК СоздаватьРазмещениеГрузовВКонтейнере,
	|	уатЭтапыМультимодальныхПеревозок_уэ.Перевозчик КАК Перевозчик,
	|	уатЭтапыМультимодальныхПеревозок_уэ.ТС КАК ТС,
	|	уатЭтапыМультимодальныхПеревозок_уэ.ДоговорСПеревозчиком КАК ДоговорСПеревозчиком,
	|	уатЭтапыМультимодальныхПеревозок_уэ.НастройкаФормированияКомплектовДокументов КАК НастройкаФормированияКомплектовДокументов,
	|	уатЭтапыМультимодальныхПеревозок_уэ.ДнейОтНачалаОтправление КАК ДнейОтНачалаОтправление,
	|	уатЭтапыМультимодальныхПеревозок_уэ.ДнейОтНачалаНазначение КАК ДнейОтНачалаНазначение
	|ПОМЕСТИТЬ ВТ_Этапы
	|ИЗ
	|	РегистрСведений.уатЭтапыМультимодальныхПеревозок_уэ КАК уатЭтапыМультимодальныхПеревозок_уэ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	|		ПО уатЭтапыМультимодальныхПеревозок_уэ.Этап = уатЗаказГрузоотправителя.Ссылка
	|ГДЕ
	|	уатЭтапыМультимодальныхПеревозок_уэ.ЗаказГрузоотправителя = &ЗаказГрузоотправителя
	|	И НЕ уатЗаказГрузоотправителя.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_Этапы.ИндексКартинки КАК ИндексКартинки,
	|	ВТ_Этапы.Этап КАК Этап,
	|	ВТ_Этапы.АдресОтправления КАК АдресОтправления,
	|	ВТ_Этапы.АдресПрибытия КАК АдресПрибытия,
	|	ВТ_Этапы.ВидПеревозки КАК ВидПеревозки,
	|	ВТ_Этапы.Расстояние КАК Расстояние,
	|	ВТ_Этапы.Время КАК Время,
	|	ВТ_Этапы.ДатаОтправленияПлан КАК ДатаОтправленияПлан,
	|	ВТ_Этапы.ДатаПрибытияПлан КАК ДатаПрибытияПлан,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЕСТЬNULL(уатСтатусыГрузов_уэСрезПоследних.Статус, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый))) > 1
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Составной)
	|		ИНАЧЕ МАКСИМУМ(ЕСТЬNULL(уатСтатусыГрузов_уэСрезПоследних.Статус, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый)))
	|	КОНЕЦ КАК СтатусЗаказа,
	|	ВТ_Этапы.НомерЭтапа КАК НомерЭтапа,
	|	ВТ_Этапы.СоздаватьАктОтгрузки КАК СоздаватьАктОтгрузки,
	|	ВТ_Этапы.СоздаватьАктПриемки КАК СоздаватьАктПриемки,
	|	ВТ_Этапы.СоздаватьИзвлечениеГрузовИзКонтейнера КАК СоздаватьИзвлечениеГрузовИзКонтейнера,
	|	ВТ_Этапы.СоздаватьМаршрутныйЛист КАК СоздаватьМаршрутныйЛист,
	|	ВТ_Этапы.СоздаватьРазмещениеГрузовВКонтейнере КАК СоздаватьРазмещениеГрузовВКонтейнере,
	|	ВТ_Этапы.Перевозчик КАК Перевозчик,
	|	ВТ_Этапы.ТС КАК ТС,
	|	ВТ_Этапы.ДоговорСПеревозчиком КАК ДоговорСПеревозчиком,
	|	ВТ_Этапы.НастройкаФормированияКомплектовДокументов КАК НастройкаФормированияКомплектовДокументов,
	|	ВТ_Этапы.ДнейОтНачалаОтправление КАК ДнейОтНачалаОтправление,
	|	ВТ_Этапы.ДнейОтНачалаНазначение КАК ДнейОтНачалаНазначение,
	|	уатТекущееСостояниеВыполненияЗаказов.Состояние КАК СостояниеВыполнения
	|ИЗ
	|	ВТ_Этапы КАК ВТ_Этапы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатСтатусыГрузов_уэ.СрезПоследних(
	|				,
	|				Заказ В
	|					(ВЫБРАТЬ
	|						ВТ_Этапы.Этап
	|					ИЗ
	|						ВТ_Этапы)) КАК уатСтатусыГрузов_уэСрезПоследних
	|		ПО (уатСтатусыГрузов_уэСрезПоследних.Заказ = ВТ_Этапы.Этап)
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатТекущееСостояниеВыполненияЗаказов КАК уатТекущееСостояниеВыполненияЗаказов
	|		ПО ВТ_Этапы.Этап = уатТекущееСостояниеВыполненияЗаказов.Заказ
	|
	|СГРУППИРОВАТЬ ПО
	|	ВТ_Этапы.ИндексКартинки,
	|	ВТ_Этапы.Этап,
	|	ВТ_Этапы.АдресОтправления,
	|	ВТ_Этапы.АдресПрибытия,
	|	ВТ_Этапы.ВидПеревозки,
	|	ВТ_Этапы.Расстояние,
	|	ВТ_Этапы.Время,
	|	ВТ_Этапы.ДатаОтправленияПлан,
	|	ВТ_Этапы.ДатаПрибытияПлан,
	|	ВТ_Этапы.НомерЭтапа,
	|	ВТ_Этапы.СоздаватьАктОтгрузки,
	|	ВТ_Этапы.СоздаватьАктПриемки,
	|	ВТ_Этапы.СоздаватьИзвлечениеГрузовИзКонтейнера,
	|	ВТ_Этапы.СоздаватьМаршрутныйЛист,
	|	ВТ_Этапы.СоздаватьРазмещениеГрузовВКонтейнере,
	|	ВТ_Этапы.Перевозчик,
	|	ВТ_Этапы.ТС,
	|	ВТ_Этапы.ДоговорСПеревозчиком,
	|	ВТ_Этапы.НастройкаФормированияКомплектовДокументов,
	|	ВТ_Этапы.ДнейОтНачалаОтправление,
	|	ВТ_Этапы.ДнейОтНачалаНазначение,
	|	уатТекущееСостояниеВыполненияЗаказов.Состояние
	|
	|ИМЕЮЩИЕ
	|	НЕ ВЫБОР
	|			КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЕСТЬNULL(уатСтатусыГрузов_уэСрезПоследних.Статус, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый))) > 1
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Составной)
	|			ИНАЧЕ МАКСИМУМ(ЕСТЬNULL(уатСтатусыГрузов_уэСрезПоследних.Статус, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый)))
	|		КОНЕЦ = ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Отклонен)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерЭтапа";
	
	ТабЭтапыЗаказа.Очистить();
	ТабЭтапыЗаказаКоличествоСтрок = 0;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		НовСтрока = ТабЭтапыЗаказа.Добавить();
		НовСтрока.ИндексКартинки      = Выборка.ИндексКартинки;
		НовСтрока.Этап                = Выборка.Этап;
		НовСтрока.Статус              = Выборка.СтатусЗаказа;
		НовСтрока.Состояние           = Выборка.СостояниеВыполнения;
		НовСтрока.АдресОтправления    = Выборка.АдресОтправления;
		НовСтрока.АдресПрибытия       = Выборка.АдресПрибытия;
		НовСтрока.ВидПеревозки        = Выборка.ВидПеревозки;
		НовСтрока.Расстояние          = Выборка.Расстояние;
		НовСтрока.Время               = Выборка.Время;
		НовСтрока.ДатаОтправленияПлан = Выборка.ДатаОтправленияПлан;
		НовСтрока.ДатаПрибытияПлан    = Выборка.ДатаПрибытияПлан;
		
		// Реквизиты, связанные с шаблонами перевозок
		НовСтрока.СоздаватьАктОтгрузки                      = Выборка.СоздаватьАктОтгрузки;
		НовСтрока.СоздаватьАктПриемки                       = Выборка.СоздаватьАктПриемки;
		НовСтрока.СоздаватьИзвлечениеГрузовИзКонтейнера     = Выборка.СоздаватьИзвлечениеГрузовИзКонтейнера;
		НовСтрока.СоздаватьМаршрутныйЛист                   = Выборка.СоздаватьМаршрутныйЛист;
		НовСтрока.СоздаватьРазмещениеГрузовВКонтейнере      = Выборка.СоздаватьРазмещениеГрузовВКонтейнере;
		НовСтрока.Перевозчик                                = Выборка.Перевозчик;
		НовСтрока.ТС                                        = Выборка.ТС;
		НовСтрока.ДоговорСПеревозчиком                      = Выборка.ДоговорСПеревозчиком;
		НовСтрока.НастройкаФормированияКомплектовДокументов = Выборка.НастройкаФормированияКомплектовДокументов;
		НовСтрока.ДнейОтНачалаОтправление                   = Выборка.ДнейОтНачалаОтправление;
		НовСтрока.ДнейОтНачалаНазначение                    = Выборка.ДнейОтНачалаНазначение;
		Если Не Объект.ЭтоШаблонПеревозки Тогда
			ДанныеМЛ = ПолучитьДанныеМЛПоЭтапу(Выборка.Этап);
			Если ДанныеМЛ.ЕстьМЛ Тогда 
				СтрокаМЛ = "";
				Для Каждого ТекМЛ Из ДанныеМЛ.МаршрутныеЛисты Цикл 
					СтрокаМЛ = СтрокаМЛ + ?(СтрокаМЛ="", "", ", ") + ТекМЛ.Номер;
				КонецЦикла;
				
				НовСтрока.ДатаОтправленияПлан  = ДанныеМЛ.ДатаОтправления;
				НовСтрока.ДатаПрибытияПлан     = ДанныеМЛ.ДатаПрибытия;
				НовСтрока.МаршрутныеЛисты      = СтрокаМЛ;
				НовСтрока.СозданМаршрутныйЛист = Истина;
			КонецЕсли;
		КонецЕсли;
		
		
		
		ТабЭтапыЗаказаКоличествоСтрок = ТабЭтапыЗаказаКоличествоСтрок + 1;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЭтаповОтклонитьЭтапПослеПодтверждения(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("СписокЭтаповОтклонитьЭтапПослеПолученияПричины", ЭтотОбъект, ДополнительныеПараметры);
	ОткрытьФорму("Справочник.уатПричиныЗакрытияЗаказов.ФормаВыбора",, ЭтотОбъект,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЭтаповОтклонитьЭтапПослеПолученияПричины(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекстОшибки = "";
	Если СписокЭтаповОтклонитьЭтапОтклонитьЭтап(ДополнительныеПараметры.Этап, РезультатЗакрытия, ТекстОшибки) Тогда 
		ОбновитьСписокЭтапов();
		
		#Если Не ВебКлиент Тогда
			ОбновитьПланировщикЭтапов();
		#КонецЕсли
		
	Иначе 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		ФормаДокумента = ПолучитьФорму("Документ.уатОтклонениеГруза.ФормаОбъекта",, ЭтотОбъект);
		ФормаДокумента.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("СписокЭтаповОтклонитьЭтапЗаписьДокументаОтклонения", ЭтотОбъект, ДополнительныеПараметры);
		ФормаДокумента.РежимОткрытияОкна = РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс;
		
		ФормаДокумента.Объект.Дата          = ТекущаяДата();
		ФормаДокумента.Объект.Заказчик      = Объект.Контрагент;
		ФормаДокумента.Объект.Организация   = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ДополнительныеПараметры.Этап, "Организация");
		ФормаДокумента.Объект.Ответственный = ПользователиКлиентСервер.АвторизованныйПользователь();
		
		НовСтрока = ФормаДокумента.Объект.Заказы.Добавить();
		НовСтрока.ЗаказГрузоотправителя = ДополнительныеПараметры.Этап;
		НовСтрока.ПричинаОтклонения     = РезультатЗакрытия;
		
		ФормаДокумента.Открыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокЭтаповОтклонитьЭтапЗаписьДокументаОтклонения(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ОбновитьСписокЭтапов();
	
	#Если Не ВебКлиент Тогда
		ОбновитьПланировщикЭтапов();
	#КонецЕсли
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СписокЭтаповОтклонитьЭтапОтклонитьЭтап(Знач ЭтапСсылка, Знач ПричинаОтклонения, ТекстОшибки)
	
	ДокументОтклонения = Документы.уатОтклонениеГруза.СоздатьДокумент();
	ДокументОтклонения.Дата          = ТекущаяДата();
	ДокументОтклонения.Заказчик      = ЭтапСсылка.Контрагент;
	ДокументОтклонения.Организация   = ЭтапСсылка.Организация;
	ДокументОтклонения.Ответственный = ПользователиКлиентСервер.АвторизованныйПользователь();
	
	НовСтрока = ДокументОтклонения.Заказы.Добавить();
	НовСтрока.ЗаказГрузоотправителя = ЭтапСсылка;
	НовСтрока.ПричинаОтклонения     = ПричинаОтклонения;
	
	Попытка
		ДокументОтклонения.Записать(РежимЗаписиДокумента.Проведение);
		Возврат Истина;
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Возврат Ложь;
	КонецПопытки;
	
КонецФункции // ТабЭтапыЗаказаПередУдалениемОтклонитьЭтап()

&НаКлиенте
Процедура ОткрытьФормуДокумента(Знач ДокументСсылка)
	
	ПоказатьЗначение(, ДокументСсылка);
	
КонецПроцедуры

&НаКлиенте
Процедура ТабЭтапыЗаказаПередНачаломДобавленияОтветНаВопросЗаписиДокумента(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.ОК Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не (ПроверитьЗаполнение() И Записать()) Тогда 
		Возврат;
	КонецЕсли;
	
	ТабЭтапыЗаказаПередНачаломДобавленияПослеЗаписиДокумента(ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ТабЭтапыЗаказаПередНачаломДобавленияПослеЗаписиДокумента(ДопПараметры)
	
	Если ДопПараметры.Копирование Тогда
		ПараметрыФормы = Новый Структура("ЗначениеКопирования", ДопПараметры.Этап);
		ОткрытьФорму("Документ.уатЗаказГрузоотправителя.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
	Иначе
		ПараметрыФормы = Новый Структура("МультимодальныйРодительскийЗаказ", Объект.Ссылка);
		ОткрытьФорму("Документ.уатЗаказГрузоотправителя.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеМультимодальногоЗаказа()
	
	Если Не Объект.Мультимодальный Тогда 
		Возврат;
	КонецЕсли;
	
	Если Объект.ЭтоЭтап Тогда 
		Прочитать();
		ДанныеРодительскогоЗаказа = ПолучитьДанныеРодительскогоЗаказа(Объект.РодительскийЗаказ);
		
		РодительскийЗаказСсылка = "Родительский заказ " + ДанныеРодительскогоЗаказа.Номер;
		
		Если Не Объект.ДетализацияЗакрытия = ДанныеРодительскогоЗаказа.ДетализацияЗакрытия Тогда 
			Объект.ДетализацияЗакрытия = ДанныеРодительскогоЗаказа.ДетализацияЗакрытия;
		КонецЕсли;
		
		Если Не Объект.Контрагент = ДанныеРодительскогоЗаказа.Контрагент Тогда 
			Если Не ТипЗнч(Объект.Контрагент) = ТипЗнч(ДанныеРодительскогоЗаказа.Контрагент) Тогда 
				Если ТипЗнч(ДанныеРодительскогоЗаказа.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
					флЗаказОтКонтрагента = 1;
				Иначе
					флЗаказОтКонтрагента = 0;
				КонецЕсли;
				
				УстановитьОграничениеТипаКонтрагент();
				Объект.ДоговорКонтрагента = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
			КонецЕсли;
			
			Объект.Контрагент = ДанныеРодительскогоЗаказа.Контрагент;
			Контрагент = Объект.Контрагент;
			ПриИзмененииКонтрагентаИлиОрганизации(Неопределено);
		КонецЕсли;
		
		Если Не Объект.ДоговорКонтрагента = ДанныеРодительскогоЗаказа.ДоговорКонтрагента Тогда 
			ДоговорПередИзменением = Объект.ДоговорКонтрагента;
			Объект.ДоговорКонтрагента = ДанныеРодительскогоЗаказа.ДоговорКонтрагента;
			Договор = Объект.ДоговорКонтрагента;
			уатОбщегоНазначенияКлиент.ПриИзмененииДоговора(ЭтаФорма, Неопределено, ДоговорПередИзменением);
		КонецЕсли;
		
		УстановитьВидимость();
		
	Иначе 
		ОбновитьСписокЭтапов();
		
		#Если Не ВебКлиент Тогда
			ОбновитьПланировщикЭтапов();
		#КонецЕсли
		
		ОбновитьДоходыПоЭтапамСервер();
		ОбновитьРасходыПоЭтапамСервер();
		СопроводительныеДокументыОбновить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеРодительскогоЗаказа(Знач РодительскийЗаказ)
	
	ДанныеРодительскогоЗаказа = Новый Структура("Номер,ДетализацияЗакрытия,Контрагент,ДоговорКонтрагента");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", РодительскийЗаказ);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатЗаказГрузоотправителя.Номер КАК Номер,
	|	уатЗаказГрузоотправителя.ДетализацияЗакрытия КАК ДетализацияЗакрытия,
	|	уатЗаказГрузоотправителя.Контрагент КАК Контрагент,
	|	уатЗаказГрузоотправителя.ДоговорКонтрагента КАК ДоговорКонтрагента
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	|ГДЕ
	|	уатЗаказГрузоотправителя.Ссылка = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда 
		ЗаполнитьЗначенияСвойств(ДанныеРодительскогоЗаказа, Выборка);
	КонецЕсли;
	
	Возврат ДанныеРодительскогоЗаказа;
	
КонецФункции // ПолучитьДанныеРодительскогоЗаказа()

&НаСервере
Процедура ОбновитьДоходыПоЭтапамСервер()
	
	ДоходыПоЭтапам.Очистить();
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ЗаказГрузоотправителя", Объект.Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатЗаказГрузоотправителяУслуги.Ссылка КАК Этап,
	|	уатЗаказГрузоотправителяУслуги.НомерСтроки КАК НомерСтроки,
	|	уатЗаказГрузоотправителяУслуги.Номенклатура,
	|	уатЗаказГрузоотправителяУслуги.Содержание,
	|	уатЗаказГрузоотправителяУслуги.СтатьяДоходов,
	|	уатЗаказГрузоотправителяУслуги.Количество,
	|	уатЗаказГрузоотправителяУслуги.Цена,
	|	уатЗаказГрузоотправителяУслуги.Сумма,
	|	уатЗаказГрузоотправителяУслуги.СтавкаНДС,
	|	уатЗаказГрузоотправителяУслуги.СуммаНДС,
	|	уатЗаказГрузоотправителяУслуги.Тариф,
	|	ВЫБОР
	|		КОГДА уатЗаказГрузоотправителяУслуги.Ссылка.УчитыватьНДС И НЕ уатЗаказГрузоотправителяУслуги.Ссылка.СуммаВключаетНДС
	|			ТОГДА ВЫРАЗИТЬ(уатЗаказГрузоотправителяУслуги.Сумма + уатЗаказГрузоотправителяУслуги.СуммаНДС КАК ЧИСЛО(15, 2))
	|		ИНАЧЕ уатЗаказГрузоотправителяУслуги.Сумма
	|	КОНЕЦ КАК Всего,
	|	уатЗаказГрузоотправителяУслуги.Валюта
	|ИЗ
	|	РегистрСведений.уатЭтапыМультимодальныхПеревозок_уэ КАК уатЭтапыМультимодальныхПеревозок_уэ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя.Услуги КАК уатЗаказГрузоотправителяУслуги
	|		ПО уатЭтапыМультимодальныхПеревозок_уэ.Этап = уатЗаказГрузоотправителяУслуги.Ссылка
	|ГДЕ
	|	уатЭтапыМультимодальныхПеревозок_уэ.ЗаказГрузоотправителя = &ЗаказГрузоотправителя
	|
	|УПОРЯДОЧИТЬ ПО
	|	уатЭтапыМультимодальныхПеревозок_уэ.НомерЭтапа,
	|	НомерСтроки";
	
	ИтогоДоходовПоММЗаказу = 0;
	КэшКурсов = Неопределено;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		НовСтрока = ДоходыПоЭтапам.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока, Выборка);
		
		Если ЗначениеЗаполнено(НовСтрока.Валюта) И НовСтрока.Валюта <> Объект.ВалютаДокумента Тогда
			СтруктураКурсаВалютыСтроки = СтруктураКурсаВалютыСтроки(НовСтрока.Валюта, Объект.ДатаКурса, КэшКурсов);
			ИтогоДоходовПоММЗаказу = ИтогоДоходовПоММЗаказу + уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(Выборка.Всего,
				НовСтрока.Валюта,                     Объект.ВалютаДокумента,
				СтруктураКурсаВалютыСтроки.Курс,      Объект.КурсВзаиморасчетов,
				СтруктураКурсаВалютыСтроки.Кратность, Объект.КратностьВзаиморасчетов);
		Иначе
			ИтогоДоходовПоММЗаказу = ИтогоДоходовПоММЗаказу + Выборка.Всего;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураДокумента = уатОбщегоНазначенияКлиентСервер.СтруктураДокумента(Объект, "уатЗаказГрузоотправителя");
	СуммаДокументаДоходы = уатОбщегоНазначенияТиповые.уатПолучитьСуммуДокументаСНДС(СтруктураДокумента, "Услуги");
	
	ИтогоДоходовПоММЗаказу = ИтогоДоходовПоММЗаказу + СуммаДокументаДоходы;
	
	НадписьИтогоДоходовПоММЗаказу = "Общие доходы по мультимодальному заказу " + Формат(ИтогоДоходовПоММЗаказу, "ЧДЦ=2; ЧРД=,; ЧН=0,00; ЧГ=3,0") + " " + Объект.ВалютаДокумента;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьРасходыПоЭтапамСервер()
	
	РасходыПоЭтапам.Очистить();
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ЗаказГрузоотправителя", Объект.Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатЗаказГрузоотправителяЗатраты.Ссылка КАК Этап,
	|	уатЗаказГрузоотправителяЗатраты.НомерСтроки КАК НомерСтроки,
	|	уатЗаказГрузоотправителяЗатраты.Договор,
	|	уатЗаказГрузоотправителяЗатраты.Количество,
	|	уатЗаказГрузоотправителяЗатраты.Контрагент,
	|	уатЗаказГрузоотправителяЗатраты.Номенклатура,
	|	уатЗаказГрузоотправителяЗатраты.Содержание,
	|	уатЗаказГрузоотправителяЗатраты.СтавкаНДС,
	|	уатЗаказГрузоотправителяЗатраты.СтатьяРасходов,
	|	уатЗаказГрузоотправителяЗатраты.Сумма,
	|	уатЗаказГрузоотправителяЗатраты.СуммаНДС,
	|	уатЗаказГрузоотправителяЗатраты.Тариф,
	|	уатЗаказГрузоотправителяЗатраты.Цена,
	|	ВЫБОР
	|		КОГДА уатЗаказГрузоотправителяЗатраты.Ссылка.УчитыватьНДС И НЕ уатЗаказГрузоотправителяЗатраты.Ссылка.СуммаВключаетНДС 
	|			ТОГДА ВЫРАЗИТЬ(уатЗаказГрузоотправителяЗатраты.Сумма + уатЗаказГрузоотправителяЗатраты.СуммаНДС КАК ЧИСЛО(15, 2))
	|		ИНАЧЕ уатЗаказГрузоотправителяЗатраты.Сумма
	|	КОНЕЦ КАК Всего,
	|	уатЗаказГрузоотправителяЗатраты.Валюта
	|ИЗ
	|	РегистрСведений.уатЭтапыМультимодальныхПеревозок_уэ КАК уатЭтапыМультимодальныхПеревозок_уэ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя.Расходы КАК уатЗаказГрузоотправителяЗатраты
	|		ПО уатЭтапыМультимодальныхПеревозок_уэ.Этап = уатЗаказГрузоотправителяЗатраты.Ссылка
	|ГДЕ
	|	уатЭтапыМультимодальныхПеревозок_уэ.ЗаказГрузоотправителя = &ЗаказГрузоотправителя
	|
	|УПОРЯДОЧИТЬ ПО
	|	уатЭтапыМультимодальныхПеревозок_уэ.НомерЭтапа,
	|	НомерСтроки";
	
	ИтогоЗатратПоММЗаказу = 0;
	КэшКурсов = Неопределено;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		НовСтрока = РасходыПоЭтапам.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока, Выборка);
				
		Если ЗначениеЗаполнено(НовСтрока.Валюта) И НовСтрока.Валюта <> Объект.ВалютаДокумента Тогда
			СтруктураКурсаВалютыСтроки = СтруктураКурсаВалютыСтроки(НовСтрока.Валюта, Объект.ДатаКурса, КэшКурсов);
			ИтогоЗатратПоММЗаказу = ИтогоЗатратПоММЗаказу + уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(Выборка.Всего,
				НовСтрока.Валюта,                     Объект.ВалютаДокумента,
				СтруктураКурсаВалютыСтроки.Курс,      Объект.КурсВзаиморасчетов,
				СтруктураКурсаВалютыСтроки.Кратность, Объект.КратностьВзаиморасчетов);
		Иначе
			ИтогоЗатратПоММЗаказу = ИтогоЗатратПоММЗаказу + Выборка.Всего;
		КонецЕсли;
	КонецЦикла;
	
	СтруктураДокумента = уатОбщегоНазначенияКлиентСервер.СтруктураДокумента(Объект, "уатЗаказГрузоотправителя");
	СуммаДокументаРасходы = уатОбщегоНазначенияТиповые.уатПолучитьСуммуДокументаСНДС(СтруктураДокумента, "Расходы");
	
	ИтогоЗатратПоММЗаказу = ИтогоЗатратПоММЗаказу + СуммаДокументаРасходы;
	
	НадписьИтогоЗатратПоММЗаказу = "Общие расходы по мультимодальному заказу " + Формат(ИтогоЗатратПоММЗаказу, "ЧДЦ=2; ЧРД=,; ЧН=0,00; ЧГ=3,0") + " " + Объект.ВалютаДокумента;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьПодчиненныеЭтапы(Знач РодительскийЗаказ)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ЗаказГрузоотправителя", РодительскийЗаказ);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатЭтапыМультимодальныхПеревозок_уэ.НомерЭтапа
	|ИЗ
	|	РегистрСведений.уатЭтапыМультимодальныхПеревозок_уэ КАК уатЭтапыМультимодальныхПеревозок_уэ
	|ГДЕ
	|	уатЭтапыМультимодальныхПеревозок_уэ.ЗаказГрузоотправителя = &ЗаказГрузоотправителя";
	
	Возврат Не Запрос.Выполнить().Пустой();
	
КонецФункции // ЕстьПодчиненныеЭтапы()

&НаСервереБезКонтекста
Функция ВозможноВключениеМультимодальногоЗаказа(Знач ЗаказСсылка)
	
	Если Не ЗначениеЗаполнено(ЗаказСсылка) Тогда 
		Возврат Истина;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ЗаказГрузоотправителя", ЗаказСсылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	уатМаршрутныйЛистЗаказы.Ссылка
	|ИЗ
	|	Документ.уатМаршрутныйЛист.Заказы КАК уатМаршрутныйЛистЗаказы
	|ГДЕ
	|	уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя = &ЗаказГрузоотправителя
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	уатЗаказПеревозчику_уэГрузы.Ссылка
	|ИЗ
	|	Документ.уатЗаказПеревозчику_уэ.Грузы КАК уатЗаказПеревозчику_уэГрузы
	|ГДЕ
	|	уатЗаказПеревозчику_уэГрузы.Заказ = &ЗаказГрузоотправителя";
	
	Возврат Запрос.Выполнить().Пустой();
	
КонецФункции // ВозможноВключениеМультимодальногоЗаказа()

&НаСервере
Процедура УстановитьВидимостьРеквизитовМультимодальнойПеревозки()
	
	Если Не ПолучитьФункциональнуюОпцию("уатИспользоватьМультимодальныеПеревозки_уэ") Тогда 
		Элементы.Мультимодальный.Видимость = Ложь;
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпцию("уатИспользоватьFTLПеревозки_уэ") Тогда 
		Элементы.Переместить(Элементы.Мультимодальный, Элементы.ГруппаВидДоставкиЛев);
		Элементы.Переместить(Элементы.РодительскийЗаказСсылка, Элементы.ГруппаВидДоставкиЛев);
	КонецЕсли;
	
	Если Объект.Мультимодальный Тогда 
		Элементы.FTL.Видимость = Объект.ЭтоЭтап;
	КонецЕсли;
	
	Если Объект.Мультимодальный И Объект.ЭтоЭтап Тогда 
		Элементы.Мультимодальный.Видимость = НЕ Объект.ЭтоЭтап;
		Элементы.РодительскийЗаказСсылка.Доступность = Истина;
		РодительскийЗаказСсылка = "Родительский заказ " + Объект.РодительскийЗаказ.Номер;
		
		Элементы.ДетализацияЗакрытия.Доступность  = Ложь;
		Элементы.флЗаказОтКонтрагента.Доступность = Ложь;
		
		Элементы.ГрузовойСоставЗаполнитьГрузовойСоставПоРодительскомуЗаказу.Видимость = Истина;
		Элементы.ТоварыЗаполнитьТоварныйСоставПоРодительскомуЗаказу.Видимость         = Истина;
		
	Иначе 
		Элементы.РодительскийЗаказСсылка.Видимость = Ложь;
		Элементы.ДетализацияЗакрытия.Доступность  = Истина;
		Элементы.флЗаказОтКонтрагента.Доступность = Истина;
		
		Элементы.ГрузовойСоставЗаполнитьГрузовойСоставПоРодительскомуЗаказу.Видимость = Ложь;
		Элементы.ТоварыЗаполнитьТоварныйСоставПоРодительскомуЗаказу.Видимость         = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МультимодальныйПриИзмененииПодтвердитьВводЭтапа(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда 
		Мультимодальный = Объект.Мультимодальный;
		Возврат;
	КонецЕсли;
	
	Если Не (ПроверитьЗаполнение() И Записать()) Тогда 
		Мультимодальный = Объект.Мультимодальный;
		Возврат;
	КонецЕсли;
	
	ТекстОшибки = "";
	РодительскийЗаказ = СоздатьРодительскийЗаказНаОснованииНемультимодального(Объект.Ссылка, ТекстОшибки);
	Если Не ТекстОшибки = "" Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Мультимодальный = Объект.Мультимодальный;
		Возврат;
	КонецЕсли;
	
	Объект.Мультимодальный   = Истина;
	Объект.ЭтоЭтап           = Истина;
	Объект.РодительскийЗаказ = РодительскийЗаказ;
	
	Записать();
	
	УстановитьВидимостьРеквизитовМультимодальнойПеревозки();
	
	МультимодальныйПриИзмененииЗавершение();
	
	ПараметрыФормыРодителя = Новый Структура("Ключ", РодительскийЗаказ);
	ОткрытьФорму("Документ.уатЗаказГрузоотправителя.ФормаОбъекта", ПараметрыФормыРодителя);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СоздатьРодительскийЗаказНаОснованииНемультимодального(Знач ЗаказСсылка, ТекстОшибки)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", ЗаказСсылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатЗаказГрузоотправителя.Дата КАК Дата,
	|	уатЗаказГрузоотправителя.АдресНазначения КАК АдресНазначения,
	|	уатЗаказГрузоотправителя.АдресОтправления КАК АдресОтправления,
	|	уатЗаказГрузоотправителя.ВалютаДокумента КАК ВалютаДокумента,
	|	уатЗаказГрузоотправителя.ВалютаТоваров КАК ВалютаТоваров,
	|	уатЗаказГрузоотправителя.ВесБрутто КАК ВесБрутто,
	|	уатЗаказГрузоотправителя.ВидОперации КАК ВидОперации,
	|	уатЗаказГрузоотправителя.Время КАК Время,
	|	уатЗаказГрузоотправителя.Грузоотправитель КАК Грузоотправитель,
	|	уатЗаказГрузоотправителя.Грузополучатель КАК Грузополучатель,
	|	уатЗаказГрузоотправителя.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	|	уатЗаказГрузоотправителя.ДетализацияЗакрытия КАК ДетализацияЗакрытия,
	|	уатЗаказГрузоотправителя.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	уатЗаказГрузоотправителя.ДоставкаПо КАК ДоставкаПо,
	|	уатЗаказГрузоотправителя.ДоставкаС КАК ДоставкаС,
	|	уатЗаказГрузоотправителя.КоличествоМест КАК КоличествоМест,
	|	уатЗаказГрузоотправителя.Комментарий КАК Комментарий,
	|	уатЗаказГрузоотправителя.КонтактноеЛицоГрузоотправителя КАК КонтактноеЛицоГрузоотправителя,
	|	уатЗаказГрузоотправителя.КонтактноеЛицоГрузополучателя КАК КонтактноеЛицоГрузополучателя,
	|	уатЗаказГрузоотправителя.Контрагент КАК Контрагент,
	|	уатЗаказГрузоотправителя.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	|	уатЗаказГрузоотправителя.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	уатЗаказГрузоотправителя.НазваниеГруза КАК НазваниеГруза,
	|	уатЗаказГрузоотправителя.НомерПоУчетуЗаказчика КАК НомерПоУчетуЗаказчика,
	|	уатЗаказГрузоотправителя.Объем КАК Объем,
	|	уатЗаказГрузоотправителя.Организация КАК Организация,
	|	уатЗаказГрузоотправителя.ОтправлениеПо КАК ОтправлениеПо,
	|	уатЗаказГрузоотправителя.ОтправлениеС КАК ОтправлениеС,
	|	уатЗаказГрузоотправителя.Приоритет КАК Приоритет,
	|	уатЗаказГрузоотправителя.Расстояние КАК Расстояние,
	|	уатЗаказГрузоотправителя.СтоимостьГруза КАК СтоимостьГруза,
	|	уатЗаказГрузоотправителя.Стоянка КАК Стоянка,
	|	уатЗаказГрузоотправителя.СтоянкаПунктНазначения КАК СтоянкаПунктНазначения,
	|	уатЗаказГрузоотправителя.СтоянкаПунктОтправления КАК СтоянкаПунктОтправления,
	|	уатЗаказГрузоотправителя.СуммаВключаетНДС КАК СуммаВключаетНДС,
	|	уатЗаказГрузоотправителя.ВидПеревозки КАК ВидПеревозки,
	|	уатЗаказГрузоотправителя.НаправлениеПеревозки КАК НаправлениеПеревозки,
	|	уатЗаказГрузоотправителя.ТипЦен КАК ТипЦен,
	|	уатЗаказГрузоотправителя.ТребованиеКТС КАК ТребованиеКТС,
	|	уатЗаказГрузоотправителя.ТребованиеКТСТипТС КАК ТребованиеКТСТипТС,
	|	уатЗаказГрузоотправителя.УчитыватьНДС КАК УчитыватьНДС,
	|	уатЗаказГрузоотправителя.ГрузовойСостав.(
	|		ГрузовоеМесто КАК ГрузовоеМесто,
	|		ВидУпаковки КАК ВидУпаковки,
	|		ВесБрутто КАК ВесБрутто,
	|		Объем КАК Объем,
	|		КоличествоМест КАК КоличествоМест,
	|		Высота КАК Высота,
	|		Длина КАК Длина,
	|		Ширина КАК Ширина,
	|		Стоимость КАК Стоимость,
	|		ОписаниеГруза КАК ОписаниеГруза
	|	) КАК ГрузовойСостав,
	|	уатЗаказГрузоотправителя.Товары.(
	|		Номенклатура КАК Номенклатура,
	|		ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		ГрузовоеМесто КАК ГрузовоеМесто,
	|		Количество КАК Количество,
	|		Комментарий КАК Комментарий,
	|		ВесБрутто КАК ВесБрутто,
	|		Объем КАК Объем,
	|		КоличествоМест КАК КоличествоМест,
	|		Цена КАК Цена,
	|		Сумма КАК Сумма,
	|		СтавкаНДС КАК СтавкаНДС,
	|		СуммаНДС КАК СуммаНДС
	|	) КАК Товары
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	|ГДЕ
	|	уатЗаказГрузоотправителя.Ссылка = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Не Выборка.Следующий() Тогда 
		ТекстОшибки = "Документ отсутствует в базе";
		Возврат Неопределено;
	КонецЕсли;
	
	РодительскийЗаказ = Документы.уатЗаказГрузоотправителя.СоздатьДокумент();
	РодительскийЗаказ.Дата                           = Выборка.Дата - 1;
	РодительскийЗаказ.АдресНазначения                = Выборка.АдресНазначения;
	РодительскийЗаказ.АдресОтправления               = Выборка.АдресОтправления;
	РодительскийЗаказ.ВалютаДокумента                = Выборка.ВалютаДокумента;
	РодительскийЗаказ.ВалютаТоваров                  = Выборка.ВалютаТоваров;
	РодительскийЗаказ.ВесБрутто                      = Выборка.ВесБрутто;
	РодительскийЗаказ.ВидОперации                    = Выборка.ВидОперации;
	РодительскийЗаказ.Время                          = Выборка.Время;
	РодительскийЗаказ.Грузоотправитель               = Выборка.Грузоотправитель;
	РодительскийЗаказ.Грузополучатель                = Выборка.Грузополучатель;
	РодительскийЗаказ.ДатаВходящегоДокумента         = Выборка.ДатаВходящегоДокумента;
	РодительскийЗаказ.ДетализацияЗакрытия            = Выборка.ДетализацияЗакрытия;
	РодительскийЗаказ.ДоговорКонтрагента             = Выборка.ДоговорКонтрагента;
	РодительскийЗаказ.ДоставкаПо                     = Выборка.ДоставкаПо;
	РодительскийЗаказ.ДоставкаС                      = Выборка.ДоставкаС;
	РодительскийЗаказ.КоличествоМест                 = Выборка.КоличествоМест;
	РодительскийЗаказ.Комментарий                    = Выборка.Комментарий;
	РодительскийЗаказ.КонтактноеЛицоГрузоотправителя = Выборка.КонтактноеЛицоГрузоотправителя;
	РодительскийЗаказ.КонтактноеЛицоГрузополучателя  = Выборка.КонтактноеЛицоГрузополучателя;
	РодительскийЗаказ.Контрагент                     = Выборка.Контрагент;
	РодительскийЗаказ.КратностьВзаиморасчетов        = Выборка.КратностьВзаиморасчетов;
	РодительскийЗаказ.КурсВзаиморасчетов             = Выборка.КурсВзаиморасчетов;
	РодительскийЗаказ.НазваниеГруза                  = Выборка.НазваниеГруза;
	РодительскийЗаказ.НомерПоУчетуЗаказчика          = Выборка.НомерПоУчетуЗаказчика;
	РодительскийЗаказ.Объем                          = Выборка.Объем;
	РодительскийЗаказ.Организация                    = Выборка.Организация;
	РодительскийЗаказ.ОтправлениеПо                  = Выборка.ОтправлениеПо;
	РодительскийЗаказ.ОтправлениеС                   = Выборка.ОтправлениеС;
	РодительскийЗаказ.Приоритет                      = Выборка.Приоритет;
	РодительскийЗаказ.Расстояние                     = Выборка.Расстояние;
	РодительскийЗаказ.СтоимостьГруза                 = Выборка.СтоимостьГруза;
	РодительскийЗаказ.Стоянка                        = Выборка.Стоянка;
	РодительскийЗаказ.СтоянкаПунктНазначения         = Выборка.СтоянкаПунктНазначения;
	РодительскийЗаказ.СтоянкаПунктОтправления        = Выборка.СтоянкаПунктОтправления;
	РодительскийЗаказ.СуммаВключаетНДС               = Выборка.СуммаВключаетНДС;
	РодительскийЗаказ.ВидПеревозки                   = Выборка.ВидПеревозки;
	РодительскийЗаказ.НаправлениеПеревозки           = Выборка.НаправлениеПеревозки;
	РодительскийЗаказ.ТипЦен                         = Выборка.ТипЦен;
	РодительскийЗаказ.ТребованиеКТС                  = Выборка.ТребованиеКТС;
	РодительскийЗаказ.ТребованиеКТСТипТС             = Выборка.ТребованиеКТСТипТС;
	РодительскийЗаказ.УчитыватьНДС                   = Выборка.УчитыватьНДС;
	РодительскийЗаказ.РодительскийЗаказ              = Неопределено;
	РодительскийЗаказ.Мультимодальный                = Истина;
	РодительскийЗаказ.ЭтоЭтап                        = Ложь;
	
	ВыборкаТовары = Выборка.Товары.Выбрать();
	Пока ВыборкаТовары.Следующий() Цикл 
		НовСтрока = РодительскийЗаказ.Товары.Добавить();
		НовСтрока.Номенклатура     = ВыборкаТовары.Номенклатура;
		НовСтрока.ЕдиницаИзмерения = ВыборкаТовары.ЕдиницаИзмерения;
		НовСтрока.ГрузовоеМесто    = ВыборкаТовары.ГрузовоеМесто;
		НовСтрока.Количество       = ВыборкаТовары.Количество;
		НовСтрока.Комментарий      = ВыборкаТовары.Комментарий;
		НовСтрока.ВесБрутто        = ВыборкаТовары.ВесБрутто;
		НовСтрока.Объем            = ВыборкаТовары.Объем;
		НовСтрока.КоличествоМест   = ВыборкаТовары.КоличествоМест;
		НовСтрока.Цена             = ВыборкаТовары.Цена;
		НовСтрока.Сумма            = ВыборкаТовары.Сумма;
		НовСтрока.СтавкаНДС        = ВыборкаТовары.СтавкаНДС;
		НовСтрока.СуммаНДС         = ВыборкаТовары.СуммаНДС;
	КонецЦикла;
	
	ВыборкаГрузовойСостав = Выборка.ГрузовойСостав.Выбрать();
	Пока ВыборкаГрузовойСостав.Следующий() Цикл 
		НовСтрока = РодительскийЗаказ.ГрузовойСостав.Добавить();
		НовСтрока.ГрузовоеМесто  = ВыборкаГрузовойСостав.ГрузовоеМесто;
		НовСтрока.ВидУпаковки    = ВыборкаГрузовойСостав.ВидУпаковки;
		НовСтрока.ВесБрутто      = ВыборкаГрузовойСостав.ВесБрутто;
		НовСтрока.Объем          = ВыборкаГрузовойСостав.Объем;
		НовСтрока.КоличествоМест = ВыборкаГрузовойСостав.КоличествоМест;
		НовСтрока.Высота         = ВыборкаГрузовойСостав.Высота;
		НовСтрока.Длина          = ВыборкаГрузовойСостав.Длина;
		НовСтрока.Ширина         = ВыборкаГрузовойСостав.Ширина;
		НовСтрока.Стоимость      = ВыборкаГрузовойСостав.Стоимость;
		НовСтрока.ОписаниеГруза  = ВыборкаГрузовойСостав.ОписаниеГруза;
	КонецЦикла;
	
	РодительскийЗаказ.РассчитатьИтоговыеПоказатели();
	РодительскийЗаказ.АвтоматическийПересчетДоходовИРасходов();
	
	Попытка
		РодительскийЗаказ.Записать(РежимЗаписиДокумента.Проведение);
	Исключение
		ТекстОшибки = ОписаниеОшибки();
		Возврат Неопределено;
	КонецПопытки;
	
	Возврат РодительскийЗаказ.Ссылка;
	
КонецФункции // СоздатьРодительскийЗаказНаОснованииНемультимодального()

&НаКлиенте
Процедура МультимодальныйПриИзмененииЗавершение()
	
	Объект.Мультимодальный = Мультимодальный;
	
	УстановитьВидимость();
	
	ОбновитьСписокЭтапов();
	
	#Если Не ВебКлиент Тогда
		ОбновитьПланировщикЭтапов();
	#КонецЕсли
	
	ОбновитьДоходыПоЭтапамСервер();
	ОбновитьРасходыПоЭтапамСервер();
	СопроводительныеДокументыОбновить();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьПланировщикЭтапов()
	
	Если НЕ Элементы.ГруппаЭтапыЗаказаСтраницаСпискаПланировщика.Видимость Тогда
		Возврат;
	КонецЕсли;
			
	Если Объект.ЭтоЭтап Тогда 
		ОбъектДанных = Объект.РодительскийЗаказ;
		ЦветФонаРодЗаказа = уатЭлектронныеКартыСервер.ПолучитьЦветДокументаПоКоллекции(Объект.РодительскийЗаказ.ЦветДокумента);
	Иначе 
		ОбъектДанных      = Объект;
		ЦветФонаРодЗаказа = уатЭлектронныеКартыСервер.ПолучитьЦветДокументаПоКоллекции(Объект.ЦветДокумента);
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ЗаказГрузоотправителя", ОбъектДанных.Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	уатЭтапыМультимодальныхПеревозок_уэ.Этап КАК Этап,
	|	уатЭтапыМультимодальныхПеревозок_уэ.НомерЭтапа КАК НомерЭтапа,
	|	уатЭтапыМультимодальныхПеревозок_уэ.ДатаОтправленияПлан КАК ДатаОтправленияПлан,
	|	уатЭтапыМультимодальныхПеревозок_уэ.ДатаПрибытияПлан КАК ДатаПрибытияПлан
	|ПОМЕСТИТЬ ВТ_ЭтапыМультимодальныхПеревозок
	|ИЗ
	|	РегистрСведений.уатЭтапыМультимодальныхПеревозок_уэ КАК уатЭтапыМультимодальныхПеревозок_уэ
	|ГДЕ
	|	уатЭтапыМультимодальныхПеревозок_уэ.ЗаказГрузоотправителя = &ЗаказГрузоотправителя
	|	И уатЭтапыМультимодальныхПеревозок_уэ.Этап.Проведен
	|	И НЕ уатЭтапыМультимодальныхПеревозок_уэ.Этап.ПометкаУдаления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатЭтапыМультимодальныхПеревозок_уэ.Этап КАК Этап,
	|	уатЭтапыМультимодальныхПеревозок_уэ.НомерЭтапа КАК НомерЭтапа,
	|	уатЭтапыМультимодальныхПеревозок_уэ.ДатаОтправленияПлан КАК ДатаОтправленияПлан,
	|	уатЭтапыМультимодальныхПеревозок_уэ.ДатаПрибытияПлан КАК ДатаПрибытияПлан,
	|	ЕСТЬNULL(уатЗаказГрузоотправителяГрузовойСостав.ГрузовоеМесто, ЗНАЧЕНИЕ(Справочник.уатГрузовыеМеста_уэ.ПустаяСсылка)) КАК ГрузовоеМесто
	|ПОМЕСТИТЬ ВТ_ЭтапыМультимодальныхПеревозок2
	|ИЗ
	|	ВТ_ЭтапыМультимодальныхПеревозок КАК уатЭтапыМультимодальныхПеревозок_уэ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	|		ПО уатЭтапыМультимодальныхПеревозок_уэ.Этап = уатЗаказГрузоотправителя.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя.ГрузовойСостав КАК уатЗаказГрузоотправителяГрузовойСостав
	|		ПО уатЭтапыМультимодальныхПеревозок_уэ.Этап = уатЗаказГрузоотправителяГрузовойСостав.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатСтатусыГрузов_уэ.СрезПоследних(
	|				,
	|				Заказ В
	|					(ВЫБРАТЬ
	|						ВТ_ЭтапыМультимодальныхПеревозок.Этап
	|					ИЗ
	|						ВТ_ЭтапыМультимодальныхПеревозок)) КАК уатСтатусыГрузов_уэСрезПоследних
	|		ПО уатЭтапыМультимодальныхПеревозок_уэ.Этап = уатСтатусыГрузов_уэСрезПоследних.Заказ
	|
	|СГРУППИРОВАТЬ ПО
	|	уатЭтапыМультимодальныхПеревозок_уэ.Этап,
	|	уатЗаказГрузоотправителяГрузовойСостав.ГрузовоеМесто,
	|	уатЭтапыМультимодальныхПеревозок_уэ.НомерЭтапа,
	|	уатЭтапыМультимодальныхПеревозок_уэ.ДатаОтправленияПлан,
	|	уатЭтапыМультимодальныхПеревозок_уэ.ДатаПрибытияПлан
	|
	|ИМЕЮЩИЕ
	|	НЕ ВЫБОР
	|			КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЕСТЬNULL(уатСтатусыГрузов_уэСрезПоследних.Статус, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый))) > 1
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Составной)
	|			ИНАЧЕ МАКСИМУМ(ЕСТЬNULL(уатСтатусыГрузов_уэСрезПоследних.Статус, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый)))
	|		КОНЕЦ = ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Отклонен)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатЭтапыМультимодальныхПеревозок_уэ.Этап КАК Этап,
	|	уатЭтапыМультимодальныхПеревозок_уэ.ГрузовоеМесто КАК ГрузовоеМесто,
	|	уатЭтапыМультимодальныхПеревозок_уэ.ГрузовоеМесто.Наименование КАК ГрузовоеМестоНаименование,
	|	уатЭтапыМультимодальныхПеревозок_уэ.НомерЭтапа КАК НомерЭтапа,
	|	уатЭтапыМультимодальныхПеревозок_уэ.ДатаОтправленияПлан КАК ДатаОтправленияПлан,
	|	уатЭтапыМультимодальныхПеревозок_уэ.ДатаПрибытияПлан КАК ДатаПрибытияПлан,
	|	уатЭтапыМультимодальныхПеревозок_уэ.Этап.Номер КАК Этап_Номер,
	|	уатЭтапыМультимодальныхПеревозок_уэ.Этап.ЦветДокумента КАК Этап_ЦветДокумента,
	|	уатЭтапыМультимодальныхПеревозок_уэ.Этап.АдресОтправления КАК АдресОтправления,
	|	уатЭтапыМультимодальныхПеревозок_уэ.Этап.АдресОтправления.Наименование КАК АдресОтправленияНаименование,
	|	уатЭтапыМультимодальныхПеревозок_уэ.Этап.АдресОтправления.ШифрПункта КАК АдресОтправленияШифрПункта,
	|	уатЭтапыМультимодальныхПеревозок_уэ.Этап.АдресНазначения КАК АдресНазначения,
	|	уатЭтапыМультимодальныхПеревозок_уэ.Этап.АдресНазначения.Наименование КАК АдресНазначенияНаименование,
	|	уатЭтапыМультимодальныхПеревозок_уэ.Этап.АдресНазначения.ШифрПункта КАК АдресНазначенияШифрПункта,
	|	уатЭтапыМультимодальныхПеревозок_уэ.Этап.ДетализацияЗакрытия КАК ДетализацияЗакрытия,
	|	уатЭтапыМультимодальныхПеревозок_уэ.Этап.ВидПеревозки КАК ВидПеревозки,
	|	уатЭтапыМультимодальныхПеревозок_уэ.Этап.ОтправлениеС КАК ОтправлениеС,
	|	уатЭтапыМультимодальныхПеревозок_уэ.Этап.ОтправлениеПо КАК ОтправлениеПо,
	|	уатЭтапыМультимодальныхПеревозок_уэ.Этап.ДоставкаС КАК ДоставкаС,
	|	уатЭтапыМультимодальныхПеревозок_уэ.Этап.ДоставкаПо КАК ДоставкаПо
	|ИЗ
	|	ВТ_ЭтапыМультимодальныхПеревозок2 КАК уатЭтапыМультимодальныхПеревозок_уэ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	//Если Не ЗначениеЗаполнено(НачальнаяДатаПланирования) Или Не ЗначениеЗаполнено(НастройкаДниПланировщика) Тогда 
		МинДатаПериода  = Неопределено;
		МаксДатаПериода = Неопределено;
		Пока Выборка.Следующий() Цикл 
			Если ЗначениеЗаполнено(Выборка.ДатаОтправленияПлан) Тогда 
				МинДатаПериода  = ?(МинДатаПериода = Неопределено, Выборка.ДатаОтправленияПлан, Мин(МинДатаПериода, Выборка.ДатаОтправленияПлан));
			КонецЕсли;
			Если ЗначениеЗаполнено(Выборка.ДатаПрибытияПлан) Тогда 
				МаксДатаПериода = ?(МаксДатаПериода = Неопределено, Выборка.ДатаПрибытияПлан, Макс(МаксДатаПериода, Выборка.ДатаПрибытияПлан));
			КонецЕсли;
			Если ЗначениеЗаполнено(Выборка.ОтправлениеС) Тогда 
				МинДатаПериода  = ?(МинДатаПериода = Неопределено, Выборка.ОтправлениеС, Мин(МинДатаПериода, Выборка.ОтправлениеС));
			КонецЕсли;
			Если ЗначениеЗаполнено(Выборка.ДоставкаС) Тогда 
				МинДатаПериода  = ?(МинДатаПериода = Неопределено, Выборка.ДоставкаС, Мин(МинДатаПериода, Выборка.ДоставкаС));
			КонецЕсли;
			Если ЗначениеЗаполнено(Выборка.ОтправлениеПо) Тогда 
				МаксДатаПериода = ?(МаксДатаПериода = Неопределено, Выборка.ОтправлениеПо, Макс(МаксДатаПериода, Выборка.ОтправлениеПо));
			КонецЕсли;
			Если ЗначениеЗаполнено(Выборка.ДоставкаПо) Тогда 
				МаксДатаПериода = ?(МаксДатаПериода = Неопределено, Выборка.ДоставкаПо, Макс(МаксДатаПериода, Выборка.ДоставкаПо));
			КонецЕсли;
		КонецЦикла;
		
		Если ЗначениеЗаполнено(ОбъектДанных.ОтправлениеС) Тогда 
			МинДатаПериода  = ?(МинДатаПериода = Неопределено, ОбъектДанных.ОтправлениеС, Мин(МинДатаПериода, ОбъектДанных.ОтправлениеС));
		КонецЕсли;
		Если ЗначениеЗаполнено(ОбъектДанных.ОтправлениеПо) Тогда 
			МаксДатаПериода = ?(МаксДатаПериода = Неопределено, ОбъектДанных.ОтправлениеПо, Макс(МаксДатаПериода, ОбъектДанных.ОтправлениеПо));
		КонецЕсли;
		Если ЗначениеЗаполнено(ОбъектДанных.ДоставкаС) Тогда 
			МинДатаПериода  = ?(МинДатаПериода = Неопределено, ОбъектДанных.ДоставкаС, Мин(МинДатаПериода, ОбъектДанных.ДоставкаС));
		КонецЕсли;
		Если ЗначениеЗаполнено(ОбъектДанных.ДоставкаПо) Тогда 
			МаксДатаПериода = ?(МаксДатаПериода = Неопределено, ОбъектДанных.ДоставкаПо, Макс(МаксДатаПериода, ОбъектДанных.ДоставкаПо));
		КонецЕсли;
		
		//Если Не ЗначениеЗаполнено(НачальнаяДатаПланирования) И Не МинДатаПериода = Неопределено Тогда 
		Если МинДатаПериода <> Неопределено Тогда 
			НачальнаяДатаПланирования = НачалоДня(МинДатаПериода);
		КонецЕсли;
		
		Если Не МинДатаПериода = Неопределено
			И Не МаксДатаПериода = Неопределено Тогда
			НастройкаДниПланировщика = Цел((НачалоДня(МаксДатаПериода) - НачалоДня(МинДатаПериода)) / 86400) + 1;
		КонецЕсли;
	//КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НастройкаДетализацияПланировщика) Тогда 
		Если НастройкаДниПланировщика = 1 Тогда 
			НастройкаДетализацияПланировщика = 2;
		ИначеЕсли НастройкаДниПланировщика = 2 Тогда 
			НастройкаДетализацияПланировщика = 4;
		ИначеЕсли НастройкаДниПланировщика = 3 Тогда 
			НастройкаДетализацияПланировщика = 12;
		Иначе 
			НастройкаДетализацияПланировщика = 24;
		КонецЕсли;
	КонецЕсли;
	
	ДатаНачалаПланирования = НачалоДня(НачальнаяДатаПланирования);
	ДатаКонцаПланирования  = НачальнаяДатаПланирования + НастройкаДниПланировщика*86400;
	
	ПланировщикЭтаповЗаказа.ИнтервалыФона.Очистить();
	
	ПланировщикЭтаповЗаказа.ТекущиеПериодыОтображения.Очистить();
	ПланировщикЭтаповЗаказа.ТекущиеПериодыОтображения.Добавить(ДатаНачалаПланирования, ДатаКонцаПланирования);
	ПланировщикЭтаповЗаказа.НачалоПериодаОтображения = ДатаНачалаПланирования;
	ПланировщикЭтаповЗаказа.КонецПериодаОтображения  = ДатаКонцаПланирования;
	
	ПланировщикЭтаповЗаказа.Измерения.Очистить();
	ИзмерениеГруз = ПланировщикЭтаповЗаказа.Измерения.Добавить("Груз");
	ИзмерениеГруз.Текст = " ";
	ПланировщикЭтаповЗаказа.Элементы.Очистить();
	
	Если Не ПланировщикЭтаповЗаказа.ШкалаВремени.Элементы[1].Кратность = НастройкаДетализацияПланировщика Тогда
		ПланировщикЭтаповЗаказа.ШкалаВремени.Элементы[1].Кратность = НастройкаДетализацияПланировщика;
	КонецЕсли;
	ПланировщикЭтаповЗаказа.ШкалаВремени.Элементы[1].Видимость = (НастройкаДетализацияПланировщика <> 24);
	
	СтрокаРодительскийЗаказ = ИзмерениеГруз.Элементы.Найти("");
	Если СтрокаРодительскийЗаказ = Неопределено Тогда 
		СтрокаРодительскийЗаказ = ИзмерениеГруз.Элементы.Добавить("");
		СтрокаРодительскийЗаказ.Текст = "Мультимодальный заказ";
	КонецЕсли;
	
	// в версии 1С ниже 8.3.17 не поддерживаются вложеные измерения планировщика
	флИспользоватьГруппировку = Истина;
	СистемнаяИнформация = Новый СистемнаяИнформация;
	Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии("8.3.17.0", СистемнаяИнформация.ВерсияПриложения) >= 0 Тогда
		СтрокаРодительскийЗаказ = ИзмерениеГруз;
		флИспользоватьГруппировку = Ложь;
	КонецЕсли;
	
	ДетализацияГрузовыеМеста = (ОбъектДанных.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам);
	
	// Добавляем сразу все грузовые места из родительского заказа, чтобы видеть незапланированные
	Если ДетализацияГрузовыеМеста Тогда 
		Для Каждого ТекСтрокаГруза Из ОбъектДанных.ГрузовойСостав Цикл 
			СтрокаГрузовоеМесто = СтрокаРодительскийЗаказ.Элементы.Найти(ТекСтрокаГруза.ГрузовоеМесто);
			Если СтрокаГрузовоеМесто = Неопределено Тогда 
				СтрокаГрузовоеМесто = СтрокаРодительскийЗаказ.Элементы.Добавить(ТекСтрокаГруза.ГрузовоеМесто);
				СтрокаГрузовоеМесто.Текст = ТекСтрокаГруза.ГрузовоеМесто.Наименование;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	СоотвГруз = Новый Соответствие;
	СоотвГруз.Вставить("Груз", "");
	ЗначенияИзмеренийКорень = Новый ФиксированноеСоответствие(СоотвГруз);
	
	ПериодОтправления = уатОбщегоНазначения_уэ.ПолучитьПериодФонаДляПланировщика(ОбъектДанных.ОтправлениеС, ОбъектДанных.ОтправлениеПо, НастройкаДниПланировщика);
	ПериодРодительскогоЗаказа = ПланировщикЭтаповЗаказа.ИнтервалыФона.Добавить(ПериодОтправления.ДатаНачала, ПериодОтправления.ДатаОкончания);
	ПериодРодительскогоЗаказа.Цвет = ЦветФонаРодЗаказа;
	ПериодРодительскогоЗаказа.ЗначенияИзмерений = ЗначенияИзмеренийКорень;
	ПериодПрибытия = уатОбщегоНазначения_уэ.ПолучитьПериодФонаДляПланировщика(ОбъектДанных.ДоставкаС, ОбъектДанных.ДоставкаПо, НастройкаДниПланировщика);
	ПериодРодительскогоЗаказа = ПланировщикЭтаповЗаказа.ИнтервалыФона.Добавить(ПериодПрибытия.ДатаНачала, ПериодПрибытия.ДатаОкончания);
	ПериодРодительскогоЗаказа.Цвет = ЦветФонаРодЗаказа;
	ПериодРодительскогоЗаказа.ЗначенияИзмерений = ЗначенияИзмеренийКорень;
	ДатаНачалаРодБлока = '39991231';
	ДатаКонцаРодБлока  = '00010101';
	
	Выборка.Сбросить();
	Пока Выборка.Следующий() Цикл 
		Если ДетализацияГрузовыеМеста Тогда
			СтрокаЭтапГрузовоеМесто = СтрокаРодительскийЗаказ.Элементы.Найти(Выборка.ГрузовоеМесто);
			Если СтрокаЭтапГрузовоеМесто = Неопределено Тогда 
				СтрокаЭтапГрузовоеМесто = СтрокаРодительскийЗаказ.Элементы.Добавить(Выборка.ГрузовоеМесто);
				Если ЗначениеЗаполнено(Выборка.ГрузовоеМесто) Тогда 
					СтрокаЭтапГрузовоеМесто.Текст = Выборка.ГрузовоеМестоНаименование;
				Иначе 
					СтрокаЭтапГрузовоеМесто.Текст = "<Пустое грузовое место>";
				КонецЕсли;
			КонецЕсли;
		Иначе
			СтрокаЭтапГрузовоеМесто = СтрокаРодительскийЗаказ.Элементы.Найти(Выборка.Этап);
			Если СтрокаЭтапГрузовоеМесто = Неопределено Тогда
				СтрокаЭтапГрузовоеМесто = СтрокаРодительскийЗаказ.Элементы.Добавить(Выборка.Этап);
				Если ЗначениеЗаполнено(Выборка.Этап) Тогда 
					СтрокаЭтапГрузовоеМесто.Текст = Выборка.Этап_Номер;
				Иначе 
					СтрокаЭтапГрузовоеМесто.Текст = "<Пустой этап>";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
				
		ДанныеМЛ = ПолучитьДанныеМЛПоЭтапу(Выборка.Этап);
		
		ПредставлениеЭлемента = "" + Формат(Выборка.НомерЭтапа, "ЧН=0; ЧГ=0") + " "
			+ ?(ТипЗнч(Выборка.АдресОтправления) = Тип("СправочникСсылка.уатПунктыНазначения"), 
				?(ЗначениеЗаполнено(Выборка.АдресОтправленияШифрПункта), 
					Выборка.АдресОтправленияШифрПункта, 
					Выборка.АдресОтправленияНаименование), 
				Выборка.АдресОтправления)
			+ " - "
			+ ?(ТипЗнч(Выборка.АдресНазначения) = Тип("СправочникСсылка.уатПунктыНазначения"),
				?(ЗначениеЗаполнено(Выборка.АдресНазначенияШифрПункта), 
					Выборка.АдресНазначенияШифрПункта, 
					Выборка.АдресНазначенияНаименование), 
				Выборка.АдресНазначения);
		
		СтрокаМЛ = "";
		Для Каждого ТекМЛ Из ДанныеМЛ.МаршрутныеЛисты Цикл 
			СтрокаМЛ = СтрокаМЛ + ?(СтрокаМЛ="", "", ", ") + ТекМЛ.Номер;
		КонецЦикла;
		
		ПодсказкаЭлемента = "Этап мультимодальной перевозки №" + Выборка.Этап_Номер 
			+ Символы.ПС + ?(ДанныеМЛ.ЕстьМЛ, "Маршрутный лист: " + СтрокаМЛ + Символы.ПС, "")
			+ ПредставлениеЭлемента;
		
		ЦветЭлемента = уатЭлектронныеКартыСервер.ПолучитьЦветДокументаПоКоллекции(Выборка.Этап_ЦветДокумента);
		
		флЕстьФакт = Ложь;
		Если ДанныеМЛ.ЕстьМЛ Тогда 
			ФактДатаНачала = '39991231';
			ФактДатаОкончания = '00010101';
			
			Для Каждого ТекМЛ Из ДанныеМЛ.МаршрутныеЛисты Цикл 
				ДанныеФактДат = Документы.уатМаршрутныйЛист.ПолучитьФактическийПериодМаршрутногоЛиста(ТекМЛ);
				Если ДанныеФактДат.ЕстьФакт Тогда 
					ФактДатаНачала    = Мин(ФактДатаНачала, ДанныеФактДат.ДатаНачала);
					ФактДатаОкончания = Макс(ФактДатаОкончания, ДанныеФактДат.ДатаОкончания);
				КонецЕсли;
			КонецЦикла;
			
			Если ФактДатаНачала = '39991231' Или ФактДатаОкончания = '00010101' Или (ФактДатаОкончания - ФактДатаНачала)=0 Тогда 
				ДатаНачалБлока = ДанныеМЛ.ДатаОтправления;
				ДатаКонцаБлока = ДанныеМЛ.ДатаПрибытия;
			ИначеЕсли ПланировщикОтображатьФактДаты Тогда  
				флЕстьФакт     = Истина;
				ДатаНачалБлока = ФактДатаНачала;
				ДатаКонцаБлока = ФактДатаОкончания;
			Иначе 
				ДатаНачалБлока = ДанныеМЛ.ДатаОтправления;
				ДатаКонцаБлока = ДанныеМЛ.ДатаПрибытия;
			КонецЕсли;
		Иначе 
			ДатаНачалБлока = Выборка.ДатаОтправленияПлан;
			ДатаКонцаБлока = Выборка.ДатаПрибытияПлан;
		КонецЕсли;
		
		ДатаНачалаРодБлока = Мин(ДатаНачалаРодБлока, ДатаНачалБлока);
		ДатаКонцаРодБлока  = Макс(ДатаКонцаРодБлока,  ДатаКонцаБлока);
		
		Если ПланировщикОтображатьФактДаты И Не флЕстьФакт Тогда 
			Продолжить;
		КонецЕсли;
		
		ЗначенияИзмерений = Новый Соответствие;
		Если ДетализацияГрузовыеМеста Тогда
			ЗначенияИзмерений.Вставить("Груз", Выборка.ГрузовоеМесто);
		Иначе
			ЗначенияИзмерений.Вставить("Груз", Выборка.Этап);
		КонецЕсли;
		
		НовыйЭлемент = ПланировщикЭтаповЗаказа.Элементы.Добавить(ДатаНачалБлока, ДатаКонцаБлока);
		
		НовыйЭлемент.Значение          = Выборка.Этап;
		НовыйЭлемент.ЗначенияИзмерений = Новый ФиксированноеСоответствие(ЗначенияИзмерений);
		НовыйЭлемент.Текст             = ПредставлениеЭлемента;
		НовыйЭлемент.Подсказка         = ПодсказкаЭлемента;
		НовыйЭлемент.ЦветФона          = ЦветЭлемента;
		
		Если Выборка.ВидПеревозки = Справочники.уатВидыПеревозок.Авиационная Тогда 
			НовыйЭлемент.Картинка = БиблиотекаКартинок.уатЗаказТСПеревозкаАвиа;
		ИначеЕсли Выборка.ВидПеревозки = Справочники.уатВидыПеревозок.АвтомобильнаяГрузовая Тогда 
			НовыйЭлемент.Картинка = БиблиотекаКартинок.уатЗаказТСПеревозкаАвтоГрузовая;
		ИначеЕсли Выборка.ВидПеревозки = Справочники.уатВидыПеревозок.АвтомобильнаяПассажирская Тогда 
			НовыйЭлемент.Картинка = БиблиотекаКартинок.уатЗаказТСПеревозкаАвтоПассажирская;
		ИначеЕсли Выборка.ВидПеревозки = Справочники.уатВидыПеревозок.Железнодорожная Тогда 
			НовыйЭлемент.Картинка = БиблиотекаКартинок.уатЗаказТСПеревозкаЖД;
		ИначеЕсли Выборка.ВидПеревозки = Справочники.уатВидыПеревозок.Морская Тогда 
			НовыйЭлемент.Картинка = БиблиотекаКартинок.уатЗаказТСПеревозкаМорская;
		КонецЕсли;
		
		ПериодОтправления = уатОбщегоНазначения_уэ.ПолучитьПериодФонаДляПланировщика(Выборка.ОтправлениеС, Выборка.ОтправлениеПо, НастройкаДниПланировщика);
		ПериодЭтапа = ПланировщикЭтаповЗаказа.ИнтервалыФона.Добавить(ПериодОтправления.ДатаНачала, ПериодОтправления.ДатаОкончания);
		ПериодЭтапа.Цвет = ЦветЭлемента; 
		ПериодЭтапа.ЗначенияИзмерений = НовыйЭлемент.ЗначенияИзмерений;
		ПериодПрибытия = уатОбщегоНазначения_уэ.ПолучитьПериодФонаДляПланировщика(Выборка.ДоставкаС, Выборка.ДоставкаПо, НастройкаДниПланировщика);
		ПериодЭтапа = ПланировщикЭтаповЗаказа.ИнтервалыФона.Добавить(ПериодПрибытия.ДатаНачала, ПериодПрибытия.ДатаОкончания);
		ПериодЭтапа.Цвет = ЦветЭлемента;
		ПериодЭтапа.ЗначенияИзмерений = НовыйЭлемент.ЗначенияИзмерений;
				
	КонецЦикла;
	
	// интервал родительского заказа
	Если ЗначениеЗаполнено(ДатаНачалаРодБлока)
		И ДатаНачалаРодБлока <> '39991231'
		И ЗначениеЗаполнено(ДатаКонцаРодБлока) Тогда
		
		ПредставлениеЭлемента =	""
			+ ?(ТипЗнч(Объект.АдресОтправления) = Тип("СправочникСсылка.уатПунктыНазначения"), 
				?(ЗначениеЗаполнено(Объект.АдресОтправления.ШифрПункта),
					Объект.АдресОтправления.ШифрПункта, 
					Объект.АдресОтправления.Наименование), 
				Выборка.АдресОтправления)
			+ " - "
			+ ?(ТипЗнч(Объект.АдресНазначения) = Тип("СправочникСсылка.уатПунктыНазначения"), 
				?(ЗначениеЗаполнено(Объект.АдресНазначения.ШифрПункта),
					Объект.АдресНазначения.ШифрПункта, 
					Объект.АдресНазначения.Наименование), 
				Выборка.АдресНазначения);
				
		ПодсказкаЭлемента = "Родительский заказ мультимодальной перевозки
			|" + ПредставлениеЭлемента;
			
		НовыйЭлемент = ПланировщикЭтаповЗаказа.Элементы.Добавить(ДатаНачалаРодБлока, ДатаКонцаРодБлока);
		НовыйЭлемент.Значение          = Объект.Ссылка;
		НовыйЭлемент.ЗначенияИзмерений = ЗначенияИзмеренийКорень;
		НовыйЭлемент.Текст             = ПредставлениеЭлемента;
		НовыйЭлемент.Подсказка         = ПодсказкаЭлемента;
		НовыйЭлемент.ЦветФона          = ЦветФонаРодЗаказа;
		
		Если Объект.ВидПеревозки = Справочники.уатВидыПеревозок.Авиационная Тогда 
			НовыйЭлемент.Картинка = БиблиотекаКартинок.уатЗаказТСПеревозкаАвиа;
		ИначеЕсли Объект.ВидПеревозки = Справочники.уатВидыПеревозок.АвтомобильнаяГрузовая Тогда 
			НовыйЭлемент.Картинка = БиблиотекаКартинок.уатЗаказТСПеревозкаАвтоГрузовая;
		ИначеЕсли Объект.ВидПеревозки = Справочники.уатВидыПеревозок.АвтомобильнаяПассажирская Тогда 
			НовыйЭлемент.Картинка = БиблиотекаКартинок.уатЗаказТСПеревозкаАвтоПассажирская;
		ИначеЕсли Объект.ВидПеревозки = Справочники.уатВидыПеревозок.Железнодорожная Тогда 
			НовыйЭлемент.Картинка = БиблиотекаКартинок.уатЗаказТСПеревозкаЖД;
		ИначеЕсли Объект.ВидПеревозки = Справочники.уатВидыПеревозок.Морская Тогда 
			НовыйЭлемент.Картинка = БиблиотекаКартинок.уатЗаказТСПеревозкаМорская;
		КонецЕсли;
	КонецЕсли;
		
	Если флИспользоватьГруппировку Тогда
		Элементы.ПланировщикЭтаповЗаказа.РазвернутьЭлементИзмерения(ЗначенияИзмеренийКорень);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикЭтаповЗаказаПередСозданиемОтветНаВопросЗаписиДокумента(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.ОК Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не (ПроверитьЗаполнение() И Записать()) Тогда 
		Возврат;
	КонецЕсли;
	
	ПланировщикЭтаповЗаказаПередСозданиемПослеЗаписиДокумента(ДополнительныеПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикЭтаповЗаказаПередСозданиемПослеЗаписиДокумента(ДопПараметры)
	
	Оповещение = Новый ОписаниеОповещения("ОбновитьПланировщикПослеЗаписиДокумента", ЭтотОбъект);
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("МультимодальныйРодительскийЗаказ", Объект.Ссылка);
	Если ДопПараметры.Свойство("Начало") Тогда 
		ПараметрыФормы.Вставить("ПланировщикНачалоПериода", ДопПараметры.Начало);
	КонецЕсли;
	Если ДопПараметры.Свойство("Конец") Тогда 
		ПараметрыФормы.Вставить("ПланировщикКонецПериода", ДопПараметры.Конец);
	КонецЕсли;
	Если ДопПараметры.Свойство("ГрузДляКопирования") Тогда 
		ПараметрыФормы.Вставить("ГрузДляКопирования", ДопПараметры.ГрузДляКопирования);
	КонецЕсли;
	
	ОткрытьФорму("Документ.уатЗаказГрузоотправителя.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект,,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПланировщикПослеЗаписиДокумента(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	ОбновитьСписокЭтапов();
	
	#Если Не ВебКлиент Тогда
		ОбновитьПланировщикЭтапов();
	#КонецЕсли
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьИзмененияПоЭтапам(Знач мсвЭтапов)
	
	Для Каждого ТекЭтап Из мсвЭтапов Цикл 
		НаборЗаписей = РегистрыСведений.уатЭтапыМультимодальныхПеревозок_уэ.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ЗаказГрузоотправителя.Установить(ТекЭтап.Этап.РодительскийЗаказ);
		НаборЗаписей.Отбор.Этап.Установить(ТекЭтап.Этап);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() Тогда 
			НаборЗаписей[0].ДатаОтправленияПлан = ТекЭтап.Начало;
			НаборЗаписей[0].ДатаПрибытияПлан    = ТекЭтап.Конец;
			НаборЗаписей.Записать(Истина);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикЭтаповЗаказаВыборВыборДокумента(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуДокумента(ВыбранныйЭлемент.Значение);
	
КонецПроцедуры

&НаКлиенте
Процедура ТабЭтапыЗаказаВыборВыборМаршрутногоЛиста(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ОткрытьФормуДокумента(ВыбранныйЭлемент.Значение);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеМЛПоЭтапу(Знач Этап)
	
	Возврат уатЗащищенныеФункцииСервер_уэ.ПолучитьДанныеМЛПоЭтапу(Этап);
	
КонецФункции // ПолучитьДанныеМЛПоЭтапу()

&НаСервере
Процедура ОбновитьПлановыеДатыЭтапов()
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ЗаказГрузоотправителя", Объект.РодительскийЗаказ);
	Запрос.УстановитьПараметр("Этап", Объект.Ссылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатЭтапыМультимодальныхПеревозок_уэ.ДатаОтправленияПлан КАК ДатаОтправленияПлан,
	|	уатЭтапыМультимодальныхПеревозок_уэ.ДатаПрибытияПлан КАК ДатаПрибытияПлан,
	|	уатЭтапыМультимодальныхПеревозок_уэ.ДнейОтНачалаОтправление КАК ДнейОтНачалаОтправление,
	|	уатЭтапыМультимодальныхПеревозок_уэ.ДнейОтНачалаНазначение КАК ДнейОтНачалаНазначение
	|ИЗ
	|	РегистрСведений.уатЭтапыМультимодальныхПеревозок_уэ КАК уатЭтапыМультимодальныхПеревозок_уэ
	|ГДЕ
	|	уатЭтапыМультимодальныхПеревозок_уэ.ЗаказГрузоотправителя = &ЗаказГрузоотправителя
	|	И уатЭтапыМультимодальныхПеревозок_уэ.Этап = &Этап";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда 
		ПлановаяДатаОтправленияЭтапа        = Выборка.ДатаОтправленияПлан;
		ПлановаяДатаПрибытияЭтапа           = Выборка.ДатаПрибытияПлан;
		ДнейОтНачалаОтправлениеЭтапаШаблона = Выборка.ДнейОтНачалаОтправление;
		ДнейОтНачалаНазначениеЭтапаШаблона  = Выборка.ДнейОтНачалаНазначение;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьПлановыеДатыЭтапов()
	
	уатЗащищенныеФункцииСервер_уэ.ЗаписатьПлановыеДатыЭтапов(Объект.РодительскийЗаказ, Объект.Ссылка, ПлановаяДатаОтправленияЭтапа, ПлановаяДатаПрибытияЭтапа);
	
КонецПроцедуры

&НаСервере
Процедура ПеренестиДатыЭтапаПриПеретаскиванииНаПланировщик(МассивЭтапов, ДатаПланировщика)
	
	Для Каждого ТекЭтап Из МассивЭтапов Цикл 
		НаборЗаписей = РегистрыСведений.уатЭтапыМультимодальныхПеревозок_уэ.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ЗаказГрузоотправителя.Установить(Объект.Ссылка);
		НаборЗаписей.Отбор.Этап.Установить(ТекЭтап);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() Тогда 
			РазностьДат = НаборЗаписей[0].ДатаПрибытияПлан - НаборЗаписей[0].ДатаОтправленияПлан;
			НаборЗаписей[0].ДатаОтправленияПлан = ДатаПланировщика;
			НаборЗаписей[0].ДатаПрибытияПлан    = ДатаПланировщика + РазностьДат;
			НаборЗаписей.Записать(Истина);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПланФактДаты(Команда)
	
	ПланировщикОтображатьФактДаты = Не ПланировщикОтображатьФактДаты;
	Элементы.ПланировщикЭтаповЗаказаПланировщикПланФактДаты.Пометка = ПланировщикОтображатьФактДаты;
	
	#Если Не ВебКлиент Тогда
		ОбновитьПланировщикЭтапов();
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНовыйСтатус(ГрузовоеМесто=Неопределено)
	
	Если Объект.Мультимодальный И Не Объект.ЭтоЭтап Тогда 
		ТекстНСТР = НСтр("en='Immediate installation of the status of the multimodal parent order is prohibited."
"It is allowed to set the status of the stages of a multimodal order.';ru='Непосредственная установка статуса мультимодального родительского заказа запрещена."
"Разрешено устанавливать статусы этапов мультимодального заказа.'");
		ПоказатьПредупреждение(, ТекстНСТР);
		
	ИначеЕсли Модифицированность Или Параметры.Ключ.Пустая() Тогда 
		ТекстНСТР = НСтр("en='Before change the status save the changes. Continue?';ru='Перед изменением статуса необходимо сохранить изменения. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("УстановитьНовыйСтатусЗаписьДокумента", ЭтотОбъект, ГрузовоеМесто);
		ПоказатьВопрос(Оповещение, ТекстНСТР, РежимДиалогаВопрос.ДаНет);
	Иначе 
		УстановитьНовыйСтатусПослеЗаписиДокумента(ГрузовоеМесто);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНовыйСтатусЗаписьДокумента(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;
	
	Если ПроверитьЗаполнение() И Записать() Тогда 
		УстановитьНовыйСтатусПослеЗаписиДокумента(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНовыйСтатусПослеЗаписиДокумента(ГрузовоеМесто=Неопределено)
	
	ПараметрыФормыВыбора = Новый Структура("ПоказатьВводДаты");
	ФормаВыбораСтатуса = ПолучитьФорму("Справочник.уатСтатусы_уэ.ФормаВыбора", ПараметрыФормыВыбора, ЭтотОбъект);
	ФормаВыбораСтатуса.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("УстановитьНовыйСтатусПослеВыбораСтатуса", ЭтотОбъект, ГрузовоеМесто);
	ФормаВыбораСтатуса.РежимОткрытияОкна           = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ЭлементОтбора = ФормаВыбораСтатуса.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("ДействуетНаЗаказыГрузоотправителей");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение   = Истина;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.Использование    = Истина;
	
	ФормаВыбораСтатуса.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНовыйСтатусПослеВыбораСтатуса(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если РезультатЗакрытия.Статус = ПредопределенноеЗначение("Справочник.уатСтатусы_уэ.Закрыт") Тогда 
		Если ЗначениеЗаполнено(РезультатЗакрытия.ДатаУстановки) Тогда 
			СообщениеОшибки = "";
			флСуммаУслугИзменилась = Ложь;
			ЗакрытиеЗаказаСервер(РезультатЗакрытия.ДатаУстановки, СообщениеОшибки, Истина, флСуммаУслугИзменилась);
			Если ПустаяСтрока(СообщениеОшибки) Тогда
				Если флСуммаУслугИзменилась И НЕ флПересчетИтогов Тогда
					ПоказатьПредупреждение(Неопределено, НСтр("en='Recalculation of tabular section ""Incomes"" was not done!';ru='Не выполнен пересчет табличной части ""Доходы""!'"));
				КонецЕсли;
				Прочитать();
				ЗаполнитьСтатусыДокумента();
				УстановитьУсловноеОформлениеПолейСтатусов();
				УстановитьДоступностьДокументаПоИзменениямСтатуса();
				ОбновитьПараметрВыработкиВременныйОказ();
				ОбновитьПараметрВыработкиВременныйПолуч();
				ОбновитьНадписьИтоги();
			Иначе
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОшибки);
			КонецЕсли;
		КонецЕсли;
	Иначе 
		УстановитьСтатусБезОткрытияФормы(Объект.Ссылка, РезультатЗакрытия.Статус, РезультатЗакрытия.ДатаУстановки, ДополнительныеПараметры);
		Прочитать();
		ЗаполнитьСтатусыДокумента();
		УстановитьУсловноеОформлениеПолейСтатусов();
		ОбновитьПараметрВыработкиВременныйОказ();
		ОбновитьПараметрВыработкиВременныйПолуч();
		ОбновитьНадписьИтоги();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьСтатусБезОткрытияФормы(ЗаказСсылка, НовыйСтатус, ДатаУстановкиСтатуса, ГрузовоеМесто)
	
	Документы.уатЗаказГрузоотправителя.УстановитьСтатусЗаказа(ЗаказСсылка, НовыйСтатус, ДатаУстановкиСтатуса, ГрузовоеМесто);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКонтрагентаПоОбъектуСтроительства(Знач ОбъектСтроительства)
	
	Если Метаданные.Справочники.уатОбъектыСтроительства.Реквизиты.Найти("Контрагент") = Неопределено Тогда 
		Возврат Справочники.Контрагенты.ПустаяСсылка();
	Иначе 
		Возврат ОбъектСтроительства.Контрагент;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьГрузовойСоставПоРодительскомуОтвет(РезультатВопроса, ДополнительныеПараметры) Экспорт 
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда 
		Объект.ГрузовойСостав.Очистить();
		ЗаполнитьГрузовойСоставПоРодительскомуЗаполнение();
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда 
		ЗаполнитьГрузовойСоставПоРодительскомуЗаполнение();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьГрузовойСоставПоЭТрНОтвет(РезультатВопроса, ДополнительныеПараметры) Экспорт 
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда 
		Объект.ГрузовойСостав.Очистить();
		ЗаполнитьГрузовойСоставПоЭТрНЗаполнение();
		
		РассчитатьПоказателиСервер(Ложь);
		ОбновитьВалютуВТЧГрузовТоваровСервер();
		ОбновитьПараметрВыработкиВременныйОказ();
		ОбновитьПараметрВыработкиВременныйПолуч();
		ОбновитьНадписьИтоги();
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда 
		ЗаполнитьГрузовойСоставПоЭТрНЗаполнение();
		
		РассчитатьПоказателиСервер(Ложь);
		ОбновитьВалютуВТЧГрузовТоваровСервер();
		ОбновитьПараметрВыработкиВременныйОказ();
		ОбновитьПараметрВыработкиВременныйПолуч();
		ОбновитьНадписьИтоги();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТоварныйСоставПоРодительскомуОтвет(РезультатВопроса, ДополнительныеПараметры) Экспорт 
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда 
		Объект.Товары.Очистить();
		ЗаполнитьТоварныйСоставПоРодительскомуЗаполнение();
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда 
		ЗаполнитьТоварныйСоставПоРодительскомуЗаполнение();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьГрузовойСоставПоРодительскомуЗаполнение()
	
	Если Не ЗначениеЗаполнено(Объект.РодительскийЗаказ) Тогда 
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекГруз Из Объект.РодительскийЗаказ.ГрузовойСостав Цикл 
		НовГруз = Объект.ГрузовойСостав.Добавить();
		ЗаполнитьЗначенияСвойств(НовГруз, ТекГруз);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьГрузовойСоставПоЭТрНЗаполнение()

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ЗаказНаТС", Объект.Ссылка);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	уатСвязанныеДокументыЭПД.ЭПД КАК ЭПД,
	               |	уатСвязанныеДокументыЭПД.ЗаказНаТС КАК ЗаказНаТС,
	               |	уатСвязанныеДокументыЭПД.Рейс КАК Рейс,
	               |	уатСвязанныеДокументыЭПД.ЭПД.Организация КАК ЭПДОрганизация
	               |ИЗ
	               |	РегистрСведений.уатСвязанныеДокументыЭПД КАК уатСвязанныеДокументыЭПД
	               |ГДЕ
	               |	уатСвязанныеДокументыЭПД.ЗаказНаТС = &ЗаказНаТС";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		СтруктураРеквизитов = Неопределено;
		ВыбранныйТитул      = Перечисления.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул1;
		ОбменСГИСЭПД.ЗаполнитьТаблицуЗначенийРеквизитов(Выборка.ЭПД, Выборка.ЭПДОрганизация, СтруктураРеквизитов);
		РеквизитыТекущейВерсииТитула = ОбменСГИСЭПД.ПолучитьВерсиюТитулаДокумента(СтруктураРеквизитов, ВыбранныйТитул, 0);
		уатОбменСГИСЭПД.ДополнитьСтруктуруРеквизитовИнформациейОтаблицах(РеквизитыТекущейВерсииТитула);

		МассивГрузов = уатОбменСГИСЭПД.ЗаполнитьМассивГрузов("ТитулГрузоотправителяГрузы", РеквизитыТекущейВерсииТитула);
		Для Каждого ТекСтрока Из МассивГрузов Цикл
			НоваяСтрока = Объект.ГрузовойСостав.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			НоваяСтрока.ВидУпаковки    = НоваяСтрока.ГрузовоеМесто.ВидУпаковки;
			НоваяСтрока.Стоимость      = ТекСтрока.СтоимостьГруза;
			НоваяСтрока.ВесБрутто      = ?(ЗначениеЗаполнено(ТекСтрока.МассаНетто),
			ТекСтрока.МассаНетто, ТекСтрока.МассаБрутто);
			НоваяСтрока.Объем          = ТекСтрока.ОбъемГруза;
			НоваяСтрока.КоличествоМест = ТекСтрока.КоличествоГрузовыхМест; 
			НоваяСтрока.ОписаниеГруза  = НоваяСтрока.ГрузовоеМесто.ОписаниеГруза;
			НоваяСтрока.ВесТары        = ?(ЗначениеЗаполнено(ТекСтрока.МассаНетто),
			ТекСтрока.МассаБрутто - ТекСтрока.МассаНетто, 0);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТоварныйСоставПоРодительскомуЗаполнение()
	
	Если Не ЗначениеЗаполнено(Объект.РодительскийЗаказ) Тогда 
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекТовар Из Объект.РодительскийЗаказ.Товары Цикл 
		НовТовар = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НовТовар, ТекТовар);
	КонецЦикла;
	ОбновитьВалютуВТЧГрузовТоваровСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьВремяРасстояниеМеждуПунктами()
	
	Объект.Время         = 0;
	Объект.Расстояние    = 0;
	Объект.ПробегСГрузом = 0;
	
	Для Каждого ТекСтрока Из ПромежуточныеПункты Цикл 
		ТекСтрока.Время      = 0;
		ТекСтрока.Расстояние = 0;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьРеквизитовFTL()
	
	Элементы.ГруппаОсновноеКолонкаЛево.Видимость                 = Не Объект.FTL;
	Элементы.ГруппаОсновноеКолонкаПраво.Видимость                = Не Объект.FTL;
	Элементы.ГруппаОсновноеМаршрут.Видимость                     = Объект.FTL;
	
	Элементы.ГрузовойСоставОтрезокПути.Видимость                 = Объект.FTL
		И (Объект.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам
		Или Объект.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам);
	Элементы.ТоварыОтрезокПути.Видимость                         = Объект.FTL 
		И Объект.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам;
	Элементы.ГрузовойСоставЗаполнитьОтрезокПутиВГрузах.Видимость = Элементы.ГрузовойСоставОтрезокПути.Видимость;
	Элементы.ТоварыЗаполнитьОтрезокПутиВТоварах.Видимость        = Элементы.ТоварыОтрезокПути.Видимость;
	
	Если Объект.Мультимодальный И Не Объект.ЭтоЭтап Тогда 
		Элементы.ГруппаОсновноеКолонкаЛево.Видимость                 = Истина;
		Элементы.ГруппаОсновноеКолонкаПраво.Видимость                = Истина;
		Элементы.ГруппаОсновноеМаршрут.Видимость                     = Ложь;
		Элементы.ГрузовойСоставОтрезокПути.Видимость                 = Ложь;
		Элементы.ТоварыОтрезокПути.Видимость                         = Ложь;
		Элементы.ГрузовойСоставЗаполнитьОтрезокПутиВГрузах.Видимость = Ложь;
		Элементы.ТоварыЗаполнитьОтрезокПутиВТоварах.Видимость        = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура FTLПриИзмененииОчисткаТЧ(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда 
		FTL = Объект.FTL;
		Возврат;
	КонецЕсли;
	
	FTLПриИзмененииЗавершение();
	
КонецПроцедуры

&НаКлиенте
Процедура FTLПриИзмененииЗавершение()
	
	Объект.FTL = FTL;
	
	Если Объект.FTL Тогда  
		ПромежуточныеПункты.Очистить();
		ДобавитьПунктыШапкиВПромежуточныеПункты();
		Объект.ОтрезкиПути.Очистить();
	Иначе 
		Объект.Время      = 0;
		Объект.Расстояние = 0;
		Объект.Стоянка    = 0;
		
		Если ПромежуточныеПункты.Количество() > 0 Тогда
			Объект.ОтправлениеС  = ПромежуточныеПункты[0].ПрибытиеПлан;
			Объект.ОтправлениеПо = ПромежуточныеПункты[0].УбытиеПлан;
		КонецЕсли;
		
		Если ПромежуточныеПункты.Количество() > 1 Тогда
			Объект.ДоставкаС  = ПромежуточныеПункты[ПромежуточныеПункты.Количество()-1].ПрибытиеПлан;
			Объект.ДоставкаПо = ПромежуточныеПункты[ПромежуточныеПункты.Количество()-1].УбытиеПлан;
		КонецЕсли;
		
		мОтправлениеС     = Объект.ОтправлениеС;
		мОтправлениеПо    = Объект.ОтправлениеПо;
		мДоставкаС        = Объект.ДоставкаС;
		мДоставкаПо       = Объект.ДоставкаПо;   
		
		ПромежуточныеПункты.Очистить();
		Объект.ОтрезкиПути.Очистить();
	КонецЕсли;
	
	УстановитьВидимость();
	УстановитьВидимостьРеквизитовFTL();
	РассчитатьПоказателиСервер(Истина);
	ОбновитьВалютуВТЧГрузовТоваровСервер();
	ОбновитьПараметрВыработкиВременныйОказ();
	ОбновитьПараметрВыработкиВременныйПолуч();
	ОбновитьНадписьИтоги();
	УстановитьПредставленияОтрезковПути();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДанныеПоМаршрутуСервер()
	
	Если Не ЗначениеЗаполнено(Объект.Маршрут) Или Объект.Маршрут.Этапы.Количество() = 0 Тогда 
		//Объект.АдресОтправления        = Неопределено;
		//Объект.АдресНазначения         = Неопределено;
		//Объект.Время                   = 0;
		//Объект.Расстояние              = 0;
		//Объект.СтоянкаПунктОтправления = 0;
		//Объект.СтоянкаПунктНазначения  = 0;
		//Объект.Стоянка                 = 0;
		//Объект.ПробегСГрузом           = 0;
		//Объект.ОтправлениеС            = Неопределено;
		//Объект.ОтправлениеПо           = Неопределено;
		//Объект.ДоставкаС               = Неопределено;
		//Объект.ДоставкаПо              = Неопределено;
		//ПромежуточныеПункты.Очистить();
		Если Объект.FTL Тогда 
			ДобавитьПунктыШапкиВПромежуточныеПункты();
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	ПромежуточныеПункты.Очистить();
	
	Если Объект.FTL И МаршрутЗаполненКорректно(Объект.Маршрут) Тогда 
		
		МаршрутЭтапы = Объект.Маршрут.Этапы;
		Если Объект.Маршрут.ПредставлениеМаршрутаОднимПунктом Тогда
			Если МаршрутЭтапы.Количество() Тогда
				Объект.АдресОтправления = МаршрутЭтапы[0].ПунктОтправления;
				Если МаршрутЭтапы.Количество() > 1 Тогда
					Объект.АдресНазначения  = МаршрутЭтапы[МаршрутЭтапы.Количество()-1].ПунктОтправления;
				КонецЕсли;
			КонецЕсли;
			Сч = 0;
			Для Каждого ТекСтрока Из МаршрутЭтапы Цикл
				Сч = Сч + 1;
				НовСтрока = ПромежуточныеПункты.Добавить();
				НовСтрока.Пункт            = ТекСтрока.ПунктОтправления;
				НовСтрока.ТипТочкиМаршрута = ТекСтрока.ТипТочиМаршрута;
				НовСтрока.ПунктНазначенияИмеетКоординаты = ПунктНазначенияИмеетКоординаты(ТекСтрока.ПунктОтправления);
				
				ВремяДоступности = уатОбщегоНазначения_проф.ПолучитьВремяДоступностиПункта(НовСтрока.Пункт,
					НовСтрока.ОтправительПолучатель);
				НовСтрока.ОкноС            = ВремяДоступности.ВремяДоступностиС;
				НовСтрока.ОкноПо           = ВремяДоступности.ВремяДоступностиПо;
				НовСтрока.ОкноПо = ?(ЗначениеЗаполнено(НовСтрока.ОкноПо), НовСтрока.ОкноПо, '00010101235900');
				
				Если МаршрутЭтапы.Количество() > 1 И Сч = МаршрутЭтапы.Количество() Тогда
					НовСтрока.Время      = 0;
					НовСтрока.Расстояние = 0;
				Иначе
					НовСтрока.Время      = ТекСтрока.ВремяВПути;
					НовСтрока.Расстояние = ТекСтрока.Расстояние;
				КонецЕсли;
				НовСтрока.Стоянка        = ПолучитьВремяСтоянкиПоУмолчанию(НовСтрока.Пункт);
			КонецЦикла;
		Иначе
			Для Сч = 0 По МаршрутЭтапы.Количество()-1 Цикл
				Если Сч = 0 Тогда 
					Объект.АдресОтправления = МаршрутЭтапы[Сч].ПунктОтправления;
				КонецЕсли;
				Если Сч = МаршрутЭтапы.Количество()-1 И ЗначениеЗаполнено(МаршрутЭтапы[Сч].ПунктПрибытия) Тогда
					Объект.АдресНазначения = МаршрутЭтапы[Сч].ПунктПрибытия;
				ИначеЕсли Сч = МаршрутЭтапы.Количество()-1 Тогда
					Объект.АдресНазначения = МаршрутЭтапы[Сч].ПунктОтправления;
				КонецЕсли;
				
				НовСтрока = ПромежуточныеПункты.Добавить();
				НовСтрока.Пункт            = МаршрутЭтапы[Сч].ПунктОтправления;
				НовСтрока.ПунктНазначенияИмеетКоординаты = ПунктНазначенияИмеетКоординаты(НовСтрока.Пункт);

				ВремяДоступности = уатОбщегоНазначения_проф.ПолучитьВремяДоступностиПункта(НовСтрока.Пункт,
					НовСтрока.ОтправительПолучатель);
				НовСтрока.ОкноС            = ВремяДоступности.ВремяДоступностиС;
				НовСтрока.ОкноПо           = ВремяДоступности.ВремяДоступностиПо;
				НовСтрока.ОкноПо = ?(ЗначениеЗаполнено(НовСтрока.ОкноПо), НовСтрока.ОкноПо, '00010101235900');
				НовСтрока.Время            = МаршрутЭтапы[Сч].ВремяВПути;
				НовСтрока.Расстояние       = МаршрутЭтапы[Сч].Расстояние;
				НовСтрока.Стоянка          = ПолучитьВремяСтоянкиПоУмолчанию(НовСтрока.Пункт);
				НовСтрока.ТипТочкиМаршрута = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Погрузка");
				
				НовСтрока = ПромежуточныеПункты.Добавить();
				НовСтрока.Пункт            = МаршрутЭтапы[Сч].ПунктПрибытия;
				НовСтрока.ПунктНазначенияИмеетКоординаты = ПунктНазначенияИмеетКоординаты(НовСтрока.Пункт);
				ВремяДоступности = уатОбщегоНазначения_проф.ПолучитьВремяДоступностиПункта(НовСтрока.Пункт,
					НовСтрока.ОтправительПолучатель);
				НовСтрока.ОкноС            = ВремяДоступности.ВремяДоступностиС;
				НовСтрока.ОкноПо           = ВремяДоступности.ВремяДоступностиПо;
				НовСтрока.ОкноПо = ?(ЗначениеЗаполнено(НовСтрока.ОкноПо), НовСтрока.ОкноПо, '00010101235900');
				НовСтрока.Время            = 0;
				НовСтрока.Расстояние       = 0;
				НовСтрока.Стоянка          = ПолучитьВремяСтоянкиПоУмолчанию(НовСтрока.Пункт);
				НовСтрока.ТипТочкиМаршрута = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Разгрузка");
			КонецЦикла;
		КонецЕсли;
		
		Если ПромежуточныеПункты.Количество() И ЗначениеЗаполнено(ПромежуточныеПункты[0].Пункт)
				И Не ЗначениеЗаполнено(ПромежуточныеПункты[0].ПрибытиеПлан) Тогда 
			мВремяС  = 0; 
			мВремяПо = 0; 
			мСтоянка = 0; 
			
			Если ТипЗнч(ПромежуточныеПункты[0].Пункт) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда 
				мВыбЗнач = ПромежуточныеПункты[0].Пункт;
				мВремяС  = ПромежуточныеПункты[0].ОкноС;
				мВремяПо = ПромежуточныеПункты[0].ОкноПо;
				мСтоянка = ПолучитьВремяСтоянкиПоУмолчанию(ПромежуточныеПункты[0].Пункт);
				
			Иначе 
				мВыбЗнач = ПромежуточныеПункты[0].Пункт;
			КонецЕсли;
			
			Если ТипЗнч(мВремяС) = Тип("Дата") Тогда
				мВремяС = мВремяС - Дата('00010101');
			КонецЕсли;
			
			Если ТипЗнч(мВремяПо) = Тип("Дата") Тогда
				мВремяПо = мВремяПо - Дата('00010101');
				мВремяПо = ?(ЗначениеЗаполнено(мВремяПо), мВремяПо, '00010101235900'-Дата('00010101'))
			КонецЕсли;
			
			ПромежуточныеПункты[0].ПрибытиеПлан = НачалоДня(Объект.Дата) + мВремяС;
			ПромежуточныеПункты[0].ОкноС        = ПромежуточныеПункты[0].ПрибытиеПлан;
			ПромежуточныеПункты[0].УбытиеПлан   = НачалоДня(Объект.Дата) + мВремяПо;
			ПромежуточныеПункты[0].ОкноПо       = ПромежуточныеПункты[0].УбытиеПлан;
			
			ПромежуточныеПункты[0].Стоянка      = мСтоянка;
		КонецЕсли;
		
	Иначе 
		мВремяВПути = 0;
		мРасстояние = 0;
		
		Для Сч = 0 По Объект.Маршрут.Этапы.Количество()-1 Цикл 
			мВремяВПути = уатЗащищенныеФункцииСервер.СложитьВремя(мВремяВПути, Объект.Маршрут.Этапы[Сч].ВремяВПути);
			мРасстояние = мРасстояние + Объект.Маршрут.Этапы[Сч].Расстояние;
			
			Если Сч = 0 Тогда 
				Объект.АдресОтправления = Объект.Маршрут.Этапы[Сч].ПунктОтправления;
			КонецЕсли;
			Если Сч = Объект.Маршрут.Этапы.Количество()-1 Тогда 
				Если Объект.Маршрут.ПредставлениеМаршрутаОднимПунктом Тогда 
					Объект.АдресНазначения = Объект.Маршрут.Этапы[Сч].ПунктОтправления;
				Иначе 
					Объект.АдресНазначения = Объект.Маршрут.Этапы[Сч].ПунктПрибытия;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Объект.Время      = мВремяВПути;
		Объект.Расстояние = мРасстояние;
		Если Объект.FTL Тогда 
			ДобавитьПунктыШапкиВПромежуточныеПункты();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьПользовательскиеНастройки()
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураНастроек = Новый Структура();
	СтруктураНастроек.Вставить("ОтображатьЭтапыСписком",       Элементы.НастройкаОтображатьЭтапыСписком.Пометка);
	СтруктураНастроек.Вставить("ОтображатьЭтапыПланировщиком", Элементы.НастройкаОтображатьЭтапыПланировщиком.Пометка);
	СтруктураНастроек.Вставить("ОтображатьДоходыЭтапов",       Элементы.НастройкаОтображатьДоходыЭтапов.Пометка);
	СтруктураНастроек.Вставить("ОтображатьЗатратыЭтапов",      Элементы.НастройкаОтображатьЗатратыЭтапов.Пометка);
	СтруктураНастроек.Вставить("ОтображатьДокументыЭтапов",    Элементы.НастройкаОтображатьДокументыЭтапов.Пометка);
	СтруктураНастроек.Вставить("ОтображатьСобытияЭтапов",      Элементы.НастройкаОтображатьСобытияЭтапов.Пометка);
	
	ХранилищеНастроекДанныхФорм.Сохранить("Документ.уатЗаказГрузоотправителя.Форма.ФормаДокумента", "уатЗаказГрузоотправителя_НастройкиДокумента", СтруктураНастроек);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьПользовательскиеНастройки()
	
	СтруктураНастроек = ХранилищеНастроекДанныхФорм.Загрузить("Документ.уатЗаказГрузоотправителя.Форма.ФормаДокумента", "уатЗаказГрузоотправителя_НастройкиДокумента");
	
	Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
		Если СтруктураНастроек.Свойство("ОтображатьЭтапыСписком") Тогда 
			Элементы.НастройкаОтображатьЭтапыСписком.Пометка = СтруктураНастроек.ОтображатьЭтапыСписком;
		Иначе 
			Элементы.НастройкаОтображатьЭтапыСписком.Пометка = Истина;
		КонецЕсли;
		Если СтруктураНастроек.Свойство("ОтображатьЭтапыПланировщиком") Тогда 
			Элементы.НастройкаОтображатьЭтапыПланировщиком.Пометка = СтруктураНастроек.ОтображатьЭтапыПланировщиком;
		Иначе 
			Элементы.НастройкаОтображатьЭтапыПланировщиком.Пометка = Истина;
		КонецЕсли;
		Если СтруктураНастроек.Свойство("ОтображатьДоходыЭтапов") Тогда 
			Элементы.НастройкаОтображатьДоходыЭтапов.Пометка = СтруктураНастроек.ОтображатьДоходыЭтапов;
		Иначе 
			Элементы.НастройкаОтображатьДоходыЭтапов.Пометка = Истина;
		КонецЕсли;
		Если СтруктураНастроек.Свойство("ОтображатьЗатратыЭтапов") Тогда 
			Элементы.НастройкаОтображатьЗатратыЭтапов.Пометка = СтруктураНастроек.ОтображатьЗатратыЭтапов;
		Иначе 
			Элементы.НастройкаОтображатьЗатратыЭтапов.Пометка = Истина;
		КонецЕсли;
		Если СтруктураНастроек.Свойство("ОтображатьДокументыЭтапов") Тогда 
			Элементы.НастройкаОтображатьДокументыЭтапов.Пометка = СтруктураНастроек.ОтображатьДокументыЭтапов;
		Иначе 
			Элементы.НастройкаОтображатьДокументыЭтапов.Пометка = Истина;
		КонецЕсли;
		Если СтруктураНастроек.Свойство("ОтображатьСобытияЭтапов") Тогда 
			Элементы.НастройкаОтображатьСобытияЭтапов.Пометка = СтруктураНастроек.ОтображатьСобытияЭтапов;
		Иначе 
			Элементы.НастройкаОтображатьСобытияЭтапов.Пометка = Истина;
		КонецЕсли;

		
		Элементы.ГруппаЭтапыЗаказаСтраницаСписка.Видимость             = Объект.Мультимодальный И Не Объект.ЭтоЭтап И Элементы.НастройкаОтображатьЭтапыСписком.Пометка;
		Элементы.ГруппаЭтапыЗаказаСтраницаСпискаПланировщика.Видимость = Объект.Мультимодальный И Не Объект.ЭтоЭтап И Элементы.НастройкаОтображатьЭтапыПланировщиком.Пометка
			И Не Объект.ЭтоШаблонПеревозки;
		Элементы.ГруппаДоходыПоЭтапам.Видимость                        = Объект.Мультимодальный И Не Объект.ЭтоЭтап И Элементы.НастройкаОтображатьДоходыЭтапов.Пометка;
		Элементы.ГруппаРасходыПоЭтапам.Видимость                       = Объект.Мультимодальный И Не Объект.ЭтоЭтап И Элементы.НастройкаОтображатьЗатратыЭтапов.Пометка;
		Элементы.ДокументыЭтапов.Видимость                             = Объект.Мультимодальный И Не Объект.ЭтоЭтап И Элементы.НастройкаОтображатьДокументыЭтапов.Пометка;
		Элементы.СобытияЭтапов.Видимость                               = Объект.Мультимодальный И Не Объект.ЭтоЭтап И Элементы.НастройкаОтображатьСобытияЭтапов.Пометка;

		Элементы.ТабЭтапыЗаказаСписокЭтаповОтклонитьЭтап.Видимость = Объект.Мультимодальный И Не Объект.ЭтоЭтап И Элементы.НастройкаОтображатьЭтапыСписком.Пометка;
		Элементы.ТабЭтапыЗаказаПереместитьВверх.Видимость          = Объект.Мультимодальный И Не Объект.ЭтоЭтап И Элементы.НастройкаОтображатьЭтапыСписком.Пометка;
		Элементы.ТабЭтапыЗаказаПереместитьВниз.Видимость           = Объект.Мультимодальный И Не Объект.ЭтоЭтап И Элементы.НастройкаОтображатьЭтапыСписком.Пометка;
		
		Если Не Элементы.Найти("ТабЭтапыЗаказаДобавить") = Неопределено Тогда 
			Элементы["ТабЭтапыЗаказаДобавить"].Видимость = Объект.Мультимодальный И Не Объект.ЭтоЭтап И Элементы.НастройкаОтображатьЭтапыСписком.Пометка;
		КонецЕсли;
		Если Не Элементы.Найти("ТабЭтапыЗаказаЗакончитьРедактирование") = Неопределено Тогда 
			Элементы["ТабЭтапыЗаказаЗакончитьРедактирование"].Видимость = Объект.Мультимодальный И Не Объект.ЭтоЭтап И Элементы.НастройкаОтображатьЭтапыСписком.Пометка;
		КонецЕсли;
		Если Не Элементы.Найти("ТабЭтапыЗаказаИзменить") = Неопределено Тогда 
			Элементы["ТабЭтапыЗаказаИзменить"].Видимость = Объект.Мультимодальный И Не Объект.ЭтоЭтап И Элементы.НастройкаОтображатьЭтапыСписком.Пометка;
		КонецЕсли;
		Если Не Элементы.Найти("ТабЭтапыЗаказаНайти") = Неопределено Тогда 
			Элементы["ТабЭтапыЗаказаНайти"].Видимость = Объект.Мультимодальный И Не Объект.ЭтоЭтап И Элементы.НастройкаОтображатьЭтапыСписком.Пометка;
		КонецЕсли;
		Если Не Элементы.Найти("ТабЭтапыЗаказаОтменитьПоиск") = Неопределено Тогда 
			Элементы["ТабЭтапыЗаказаОтменитьПоиск"].Видимость = Объект.Мультимодальный И Не Объект.ЭтоЭтап И Элементы.НастройкаОтображатьЭтапыСписком.Пометка;
		КонецЕсли;
		Если Не Элементы.Найти("ТабЭтапыЗаказаПереместить") = Неопределено Тогда 
			Элементы["ТабЭтапыЗаказаПереместить"].Видимость = Объект.Мультимодальный И Не Объект.ЭтоЭтап И Элементы.НастройкаОтображатьЭтапыСписком.Пометка;
		КонецЕсли;
		Если Не Элементы.Найти("ТабЭтапыЗаказаСкопировать") = Неопределено Тогда 
			Элементы["ТабЭтапыЗаказаСкопировать"].Видимость = Объект.Мультимодальный И Не Объект.ЭтоЭтап И Элементы.НастройкаОтображатьЭтапыСписком.Пометка;
		КонецЕсли;
		Если Не Элементы.Найти("ТабЭтапыЗаказаСортировка") = Неопределено Тогда 
			Элементы["ТабЭтапыЗаказаСортировка"].Видимость = Объект.Мультимодальный И Не Объект.ЭтоЭтап И Элементы.НастройкаОтображатьЭтапыСписком.Пометка;
		КонецЕсли;
		
		ОтображатьПланировщик = Элементы.НастройкаОтображатьЭтапыПланировщиком.Пометка И Не Объект.ЭтоШаблонПеревозки;
		Элементы.НастройкаДниПланировщика.Видимость                       = Объект.Мультимодальный И Не Объект.ЭтоЭтап И ОтображатьПланировщик;
		Элементы.НастройкаДетализацияПланировщика.Видимость               = Объект.Мультимодальный И Не Объект.ЭтоЭтап И ОтображатьПланировщик;
		Элементы.ПланировщикЭтаповЗаказаПланировщикПланФактДаты.Видимость = Объект.Мультимодальный И Не Объект.ЭтоЭтап И ОтображатьПланировщик;
		Элементы.ДатаПланированияНазад.Видимость                          = Объект.Мультимодальный И Не Объект.ЭтоЭтап И ОтображатьПланировщик;
		Элементы.ДатаПланированияТекущая.Видимость                        = Объект.Мультимодальный И Не Объект.ЭтоЭтап И ОтображатьПланировщик;
		Элементы.ДатаПланированияВперед.Видимость                         = Объект.Мультимодальный И Не Объект.ЭтоЭтап И ОтображатьПланировщик;
		Элементы.ТабЭтапыЗаказаПечать.Видимость                           = Объект.Мультимодальный И Не Объект.ЭтоЭтап И ОтображатьПланировщик;
		Элементы.ТабЭтапыЗаказаПредварительныйПросмотр.Видимость          = Объект.Мультимодальный И Не Объект.ЭтоЭтап И ОтображатьПланировщик;
		
		Элементы.ГруппаЭтапыЗаказа.Видимость = Объект.Мультимодальный И Не Объект.ЭтоЭтап И (Элементы.НастройкаОтображатьЭтапыПланировщиком.Пометка Или Элементы.НастройкаОтображатьЭтапыСписком.Пометка);
		
		Если Объект.Мультимодальный И Не Объект.ЭтоЭтап И Элементы.НастройкаОтображатьДоходыЭтапов.Пометка Тогда 
			ОбновитьДоходыПоЭтапамСервер();
		КонецЕсли;
		
		Если Объект.Мультимодальный И Не Объект.ЭтоЭтап И Элементы.НастройкаОтображатьЗатратыЭтапов.Пометка Тогда 
			ОбновитьРасходыПоЭтапамСервер();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция МаршрутЗаполненКорректно(МаршрутСсылка)
	
	Если МаршрутСсылка.ПредставлениеМаршрутаОднимПунктом Тогда 
		Возврат Истина;
	КонецЕсли;
	
	флДанныеКорректны = Истина;
	Для Сч = 0 По МаршрутСсылка.Этапы.Количество()-2 Цикл 
		ТекСтрока  = МаршрутСсылка.Этапы[Сч];
		СледСтрока = МаршрутСсылка.Этапы[Сч+1];
		
		Если Не ТекСтрока.ПунктПрибытия = СледСтрока.ПунктОтправления Тогда 
			флДанныеКорректны = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат флДанныеКорректны;
	
КонецФункции // МаршрутЗаполненКорректно()

&НаСервереБезКонтекста
Функция ПравоРедактированиеДокумента()
	Результат = ПравоДоступа("Редактирование", Метаданные.Документы.уатЗаказГрузоотправителя);
	Возврат Результат;
КонецФункции

&НаСервере
Процедура ДобавитьПунктыШапкиВПромежуточныеПункты()
	
	Если ЗначениеЗаполнено(Объект.АдресОтправления) Или ЗначениеЗаполнено(Объект.Грузоотправитель)
			Или ЗначениеЗаполнено(Объект.КонтактноеЛицоГрузоотправителя) Или ЗначениеЗаполнено(Объект.ОтправлениеС)
			Или ЗначениеЗаполнено(Объект.ОтправлениеПо) Или ЗначениеЗаполнено(Объект.СтоянкаПунктОтправления) Тогда 
		НовСтрока = ПромежуточныеПункты.Добавить();
		НовСтрока.Пункт                 = Объект.АдресОтправления;
		НовСтрока.ПунктНазначенияИмеетКоординаты = ПунктНазначенияИмеетКоординаты(НовСтрока.Пункт);
		НовСтрока.ТипТочкиМаршрута      = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Погрузка");
		НовСтрока.ОтправительПолучатель = Объект.Грузоотправитель;
		НовСтрока.КонтактноеЛицо        = Объект.КонтактноеЛицоГрузоотправителя;
		НовСтрока.ПрибытиеПлан          = Объект.ОтправлениеС;
		НовСтрока.УбытиеПлан            = Объект.ОтправлениеПо;
		НовСтрока.Стоянка               = Объект.СтоянкаПунктОтправления;
		НовСтрока.Время                 = ?(ЗначениеЗаполнено(Объект.АдресНазначения), Объект.Время, 0);
		НовСтрока.Расстояние            = ?(ЗначениеЗаполнено(Объект.АдресНазначения), Объект.Расстояние, 0);
		НовСтрока.ОкноС                 = Объект.ОтправлениеС;
		НовСтрока.ОкноПо                = Объект.ОтправлениеПо;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.АдресНазначения) Или ЗначениеЗаполнено(Объект.Грузополучатель)
			Или ЗначениеЗаполнено(Объект.КонтактноеЛицоГрузополучателя) Или ЗначениеЗаполнено(Объект.ДоставкаС)
			Или ЗначениеЗаполнено(Объект.ДоставкаПо) Или ЗначениеЗаполнено(Объект.СтоянкаПунктНазначения) Тогда 
		НовСтрока = ПромежуточныеПункты.Добавить();
		НовСтрока.Пункт                 = Объект.АдресНазначения;
		НовСтрока.ПунктНазначенияИмеетКоординаты = ПунктНазначенияИмеетКоординаты(НовСтрока.Пункт);
		НовСтрока.ТипТочкиМаршрута      = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Разгрузка");
		НовСтрока.ОтправительПолучатель = Объект.Грузополучатель;
		НовСтрока.КонтактноеЛицо        = Объект.КонтактноеЛицоГрузополучателя;
		НовСтрока.ПрибытиеПлан          = Объект.ДоставкаС;
		НовСтрока.УбытиеПлан            = Объект.ДоставкаПо;
		НовСтрока.Стоянка               = Объект.СтоянкаПунктНазначения;
		НовСтрока.Время                 = 0;
		НовСтрока.Расстояние            = 0;
		НовСтрока.ОкноС                 = Объект.ДоставкаС;
		НовСтрока.ОкноПо                = Объект.ДоставкаПо;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДопВыработкуПриСоздании()
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатПараметрыВыработки.Ссылка
	|ИЗ
	|	Справочник.уатПараметрыВыработки КАК уатПараметрыВыработки
	|ГДЕ
	|	уатПараметрыВыработки.ИспользоватьВДопВыработкеМЛ
	|	И НЕ уатПараметрыВыработки.Предопределенный
	|	И НЕ уатПараметрыВыработки.ПометкаУдаления
	|	И уатПараметрыВыработки.ИспользоватьДляЗаказовИПотребности");
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Объект.Выработка.Добавить();
		НоваяСтрока.ПараметрВыработки = Выборка.Ссылка;
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьХарактеристикиГрузовогоМеста(ГрузовоеМесто)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", ГрузовоеМесто);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатГрузовыеМеста_уэ.ВесБрутто,
	|	уатГрузовыеМеста_уэ.Объем,
	|	уатГрузовыеМеста_уэ.Стоимость,
	|	уатГрузовыеМеста_уэ.КоличествоМест
	|ИЗ
	|	Справочник.уатГрузовыеМеста_уэ КАК уатГрузовыеМеста_уэ
	|ГДЕ
	|	уатГрузовыеМеста_уэ.Ссылка = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Результат = Новый Структура("ВесБрутто, Объем, Стоимость, КоличествоМест", 0, 0, 0, 0);
	ЗаполнитьЗначенияСвойств(Результат, Выборка);
	
	Возврат Результат;
	
КонецФункции // ПолучитьХарактеристикиГрузовогоМеста()

&НаСервереБезКонтекста
Функция ПолучитьОсновнойВидУпаковки()
	
	Возврат Справочники.уатВидыУпаковки_уэ.ПолучитьОсновнойВидУпаковки();
	
КонецФункции // ПолучитьОсновнойВидУпаковки()

&НаСервереБезКонтекста
Функция ПодобратьАдреса(Знач Текст, АдресаКонтрагентов = Неопределено)
	
	Возврат Документы.уатЗаказГрузоотправителя.ПодобратьАдреса(Текст, АдресаКонтрагентов);
	
КонецФункции

&НаСервере
Процедура ОбновитьВалютуВТЧГрузовТоваровСервер()
	Для Каждого ТекСтрока Из Объект.ГрузовойСостав Цикл
		Если ЗначениеЗаполнено(ТекСтрока.ГрузовоеМесто) Тогда
			ТекСтрока.Валюта = ТекСтрока.ГрузовоеМесто.Валюта;
		Иначе
			ТекСтрока.Валюта = Объект.ВалютаТоваров;
		КонецЕсли;
	КонецЦикла;
	Для Каждого ТекСтрока Из Объект.Товары Цикл
		Если ЗначениеЗаполнено(ТекСтрока.ГрузовоеМесто) Тогда
			ТекСтрока.Валюта = ТекСтрока.ГрузовоеМесто.Валюта;
		Иначе
			ТекСтрока.Валюта = Объект.ВалютаТоваров;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьГрузоотправителяГрузополучателя()
	
	МенеджерВТ = Новый МенеджерВременныхТаблиц();
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВТ;
	Запрос.УстановитьПараметр("Ссылка", Объект.Контрагент);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	КонтрагентыГрузоотправители.Контрагент КАК Контрагент,
	|	1 КАК Порядок
	|ИЗ
	|	Справочник.Контрагенты.Грузоотправители КАК КонтрагентыГрузоотправители
	|ГДЕ
	|	КонтрагентыГрузоотправители.Основной
	|	И КонтрагентыГрузоотправители.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	КонтрагентыГрузоотправители.Контрагент,
	|	2
	|ИЗ
	|	Справочник.Контрагенты.Грузоотправители КАК КонтрагентыГрузоотправители
	|ГДЕ
	|	НЕ КонтрагентыГрузоотправители.Основной
	|	И КонтрагентыГрузоотправители.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	КонтрагентыГрузополучатели.Контрагент КАК Контрагент,
	|	1 КАК Порядок
	|ИЗ
	|	Справочник.Контрагенты.Грузополучатели КАК КонтрагентыГрузополучатели
	|ГДЕ
	|	КонтрагентыГрузополучатели.Основной
	|	И КонтрагентыГрузополучатели.Ссылка = &Ссылка
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	КонтрагентыГрузополучатели.Контрагент,
	|	2
	|ИЗ
	|	Справочник.Контрагенты.Грузополучатели КАК КонтрагентыГрузополучатели
	|ГДЕ
	|	НЕ КонтрагентыГрузополучатели.Основной
	|	И КонтрагентыГрузополучатели.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	Порядок";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ВыборкаГрузоотправитель = РезультатЗапроса[0].Выбрать();
	Если ВыборкаГрузоотправитель.Следующий() 
			И (Объект.ВидДоставки = Перечисления.уатВидыДоставки_уэ.ДверьДверь 
			ИЛИ Объект.ВидДоставки = Перечисления.уатВидыДоставки_уэ.ДверьСклад) Тогда 
		Объект.Грузоотправитель = ВыборкаГрузоотправитель.Контрагент;
	КонецЕсли;
	
	ВыборкаГрузополучатель = РезультатЗапроса[1].Выбрать();
	Если ВыборкаГрузополучатель.Следующий() 
			И (Объект.ВидДоставки = Перечисления.уатВидыДоставки_уэ.ДверьДверь 
			ИЛИ Объект.ВидДоставки = Перечисления.уатВидыДоставки_уэ.СкладДверь) Тогда 
		Объект.Грузополучатель = ВыборкаГрузополучатель.Контрагент;
	КонецЕсли;
	
	МенеджерВТ.Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыбратьОтправителяПоКонтрагентуЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Объект.ВидДоставки = ВидДоставкиДверьДверь
			ИЛИ Объект.ВидДоставки = ВидДоставкиДверьСклад Тогда 
		Объект.Грузоотправитель = РезультатЗакрытия;
		ГрузоотправительПриИзменении(Элементы.Грузоотправитель);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыбратьПолучателяПоКонтрагентуЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Объект.ВидДоставки = ВидДоставкиДверьДверь
			ИЛИ Объект.ВидДоставки = ВидДоставкиСкладДверь Тогда 
		Объект.Грузополучатель = РезультатЗакрытия;
		ГрузополучательПриИзменении(Элементы.Грузополучатель);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыбратьАдресОтправленияИзКИЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Объект.АдресОтправления = РезультатЗакрытия.ПунктНазначения;
	АдресОтправленияПриИзменении(Элементы.АдресОтправления);
	
	Объект.КонтактноеЛицоГрузоотправителя = РезультатЗакрытия.КонтактноеЛицо;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВыбратьАдресНазначенияИзКИЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Объект.АдресНазначения = РезультатЗакрытия.ПунктНазначения;
	АдресНазначенияПриИзменении(Элементы.АдресНазначения);
	
	Объект.КонтактноеЛицоГрузополучателя = РезультатЗакрытия.КонтактноеЛицо;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеПоТаре()
	
	Результат = Новый Массив();
	Если НЕ ИспользоватьРасчетТары Тогда
		Возврат Результат;
	КонецЕсли;
	
	Если Объект.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам
			ИЛИ Объект.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам Тогда
		
		Для Каждого ТекСтрокаГруз Из Объект.ГрузовойСостав Цикл
			ДанныеСтроки = Новый Структура();
			ДанныеСтроки.Вставить("Тара",       ТекСтрокаГруз.ВидУпаковки);
			ДанныеСтроки.Вставить("Количество", ТекСтрокаГруз.КоличествоМест);
			
			Если ТекСтрокаГруз.ГрузовоеМесто.Контейнер Тогда
				ДанныеСтроки.Вставить("ВесТары", ТекСтрокаГруз.ГрузовоеМесто.ВесТары * ТекСтрокаГруз.КоличествоМест);
			ИначеЕсли ЗначениеЗаполнено(ТекСтрокаГруз.ВидУпаковки) Тогда
				ДанныеСтроки.Вставить("ВесТары", ТекСтрокаГруз.ВидУпаковки.ВесТары * ТекСтрокаГруз.КоличествоМест);
			Иначе
				ДанныеСтроки.Вставить("ВесТары", 0);
			КонецЕсли;
		
			Результат.Добавить(ДанныеСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если Объект.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам
			Или Объект.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам Тогда
		
		Для Каждого ТекСтрокаТовар Из Объект.Товары Цикл
			РаспределениеПоУпаковкам = уатОбщегоНазначения_уэ.УпаковатьНоменклатуру(ТекСтрокаТовар.Номенклатура, ТекСтрокаТовар.Количество);
			
			Для Каждого ТекСтрокаУпаковки Из РаспределениеПоУпаковкам Цикл 
				ДанныеСтроки = Новый Структура();
				ДанныеСтроки.Вставить("Тара",       ТекСтрокаУпаковки.ВидУпаковки);
				ДанныеСтроки.Вставить("Количество", ТекСтрокаУпаковки.Количество);
				ДанныеСтроки.Вставить("ВесТары",    ТекСтрокаУпаковки.ВидУпаковки.ВесТары * ТекСтрокаУпаковки.Количество);
				
				Результат.Добавить(ДанныеСтроки);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПолучитьДанныеПоТаре()

&НаСервере
Процедура ПересчитатьСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС(ИмяТЧ)
	уатОбщегоНазначенияСервер.ПересчитатьСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС(Объект[ИмяТЧ], Объект.СуммаВключаетНДС);
КонецПроцедуры

&НаСервере
Процедура ПересчитатьЦеныТабличнойЧастиПоВалюте(ВалютаРасчетовПередИзменением, ИмяТЧ, ДопПараметры = Неопределено)
	уатОбщегоНазначенияСервер.ПересчитатьЦеныТабличнойЧастиПоВалюте(Объект, ВалютаРасчетовПередИзменением, ИмяТЧ, ДопПараметры);
КонецПроцедуры

&НаСервереБезКонтекста
Функция НеобходимоПеречитатьОбъектИзБД(ИмяСобытия, ИсточникСсылка, ЗаказСсылка)
	
	Если Не ЗначениеЗаполнено(ЗаказСсылка) Тогда 
		Возврат Ложь;
	КонецЕсли;
	
	Если ИмяСобытия = "Изменен маршрутный лист" Тогда 
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("МаршрутныйЛист", ИсточникСсылка);
		Запрос.УстановитьПараметр("ЗаказНаТС",      ЗаказСсылка);
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	уатМаршрутныйЛистЗаказы.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	Документ.уатМаршрутныйЛист.Заказы КАК уатМаршрутныйЛистЗаказы
		|ГДЕ
		|	уатМаршрутныйЛистЗаказы.Ссылка = &МаршрутныйЛист
		|	И уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя = &ЗаказНаТС";
		
		Возврат Не Запрос.Выполнить().Пустой();
		
	ИначеЕсли ИмяСобытия = "Изменен статус заказа"
		И уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП() Тогда 
		Если ТипЗнч(ИсточникСсылка) = Тип("ДокументСсылка.уатАктОтгрузки_уэ") Тогда 
			Запрос = Новый Запрос();
			Запрос.УстановитьПараметр("АктОтгрузки", ИсточникСсылка);
			Запрос.УстановитьПараметр("ЗаказНаТС",        ЗаказСсылка);
			
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	уатАктОтгрузки_уэГрузы.НомерСтроки КАК НомерСтроки
			|ИЗ
			|	Документ.уатАктОтгрузки_уэ.Грузы КАК уатАктОтгрузки_уэГрузы
			|ГДЕ
			|	уатАктОтгрузки_уэГрузы.Ссылка = &АктОтгрузки
			|	И уатАктОтгрузки_уэГрузы.Заказ = &ЗаказНаТС";
			
			Возврат Не Запрос.Выполнить().Пустой();
			
		ИначеЕсли ТипЗнч(ИсточникСсылка) = Тип("ДокументСсылка.уатАктПриемки_уэ") Тогда 
			Запрос = Новый Запрос();
			Запрос.УстановитьПараметр("АктПриемки", ИсточникСсылка);
			Запрос.УстановитьПараметр("ЗаказНаТС",           ЗаказСсылка);
			
			Запрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
			|	уатАктПриемки_уэГрузы.НомерСтроки КАК НомерСтроки
			|ИЗ
			|	Документ.уатАктПриемки_уэ.Грузы КАК уатАктПриемки_уэГрузы
			|ГДЕ
			|	уатАктПриемки_уэГрузы.Ссылка = &АктПриемки
			|	И уатАктПриемки_уэГрузы.Заказ = &ЗаказНаТС";
			
			Возврат Не Запрос.Выполнить().Пустой();
		КонецЕсли;
		
	ИначеЕсли ИмяСобытия = "Изменено закрытие заказов на ТС" Тогда 
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("ЗакрытиеЗаказов", ИсточникСсылка);
		Запрос.УстановитьПараметр("ЗаказНаТС",       ЗаказСсылка);
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	уатОтклонениеГрузаЗаказы.НомерСтроки КАК НомерСтроки
		|ИЗ
		|	Документ.уатОтклонениеГруза.Заказы КАК уатОтклонениеГрузаЗаказы
		|ГДЕ
		|	уатОтклонениеГрузаЗаказы.Ссылка = &ЗакрытиеЗаказов
		|	И уатОтклонениеГрузаЗаказы.ЗаказГрузоотправителя = &ЗаказНаТС";
		
		Возврат Не Запрос.Выполнить().Пустой();
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // НеобходимоПеречитатьОбъектИзБД()

&НаСервереБезКонтекста
Процедура СдвинутьДату(ДатаИсх, мДатаИсх, ДатаКон, мДатаКон)

	ПередИзменением = мДатаИсх;
	
	Если НЕ ЗначениеЗаполнено(ДатаКон)
		ИЛИ НЕ ЗначениеЗаполнено(ПередИзменением)
		ИЛИ НЕ ЗначениеЗаполнено(ДатаИсх) 
		ИЛИ ((ДатаИсх - ДатаКон) < 0 И -(ДатаИсх - ДатаКон) >= 31536000)
		ИЛИ ((ДатаИсх - ДатаКон) > 0 И (ДатаИсх - ДатаКон) >= 31536000)
		ИЛИ ((мДатаИсх - мДатаКон) < 0 И -(мДатаИсх - мДатаКон) >= 31536000)
		ИЛИ ((мДатаИсх - мДатаКон) > 0 И (мДатаИсх - мДатаКон) >= 31536000) Тогда
		мДатаИсх = ДатаИсх;
		Возврат;
	КонецЕсли;
	мДатаИсх = ДатаИсх;
	
	Если ПередИзменением <> ДатаИсх Тогда
		Если ЗначениеЗаполнено(ДатаКон) Тогда
			ДнейИзменилась = (ПередИзменением - мДатаИсх)/60/60/24;
			
			СекундИзменилась = ?(Цел(ДнейИзменилась) <> 0, ДнейИзменилась * 60 *60 *24, 0);
			ДатаКон  = ДатаКон - СекундИзменилась;
			мДатаКон = ДатаКон;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПраваИНастройкиПользователя(Организация, НастройкаПольз)
	Возврат уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, НастройкаПольз);
КонецФункции

&НаКлиенте
Процедура РассчитатьУслугиПриИзмененииПоказателей(флПередЗаписью = Ложь)
	Если ИспользоватьПлановыеУслуги Тогда
		РассчитатьОказываемыеУслугиЗавершение(Истина, Истина);
	КонецЕсли;
	РассчитатьОказываемыеУслугиЗавершение(Ложь, Истина);
КонецПроцедуры

&НаСервере
Процедура УстановитьВозможностьРедактированияДоходовРасходов()
	РазрешитьРедактированиеДоходовРасходов = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(
		ПользователиКлиентСервер.АвторизованныйПользователь(), ПланыВидовХарактеристик.уатПраваИНастройки.РазрешитьРедактированиеДоходовРасходов);
		
	Если НЕ РазрешитьРедактированиеДоходовРасходов Тогда
		Элементы.УслугиРучнойВвод.Доступность = Ложь;
		Элементы.УслугиНоменклатура.Доступность = Ложь;
		Элементы.УслугиСодержание.Доступность = Ложь;
		Элементы.УслугиТариф.ТолькоПросмотр = Истина;
		Элементы.УслугиКоличество.Доступность = Ложь;
		Элементы.УслугиКоличествоПлан.Доступность = Ложь;
		Элементы.УслугиЦена.Доступность = Ложь;
		Элементы.УслугиЦенаПлан.Доступность = Ложь;
		Элементы.УслугиСумма.Доступность = Ложь;
		Элементы.УслугиСуммаПлан.Доступность = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытиеВводДатыЗавершение(Результат, ДопПараметры) Экспорт
	
	Если Результат = Неопределено Или Не ЗначениеЗаполнено(Результат) Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеЗакрытия = Новый Структура();
	ДанныеЗакрытия.Вставить("Статус",        ПредопределенноеЗначение("Справочник.уатСтатусы_уэ.Закрыт"));
	ДанныеЗакрытия.Вставить("ДатаУстановки", Результат);
	
	УстановитьНовыйСтатусПослеВыбораСтатуса(ДанныеЗакрытия, ДопПараметры);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ПометитьНаУдалениеСервер(Этап)
	Попытка
		ДокументОбъект = Этап.ПолучитьОбъект();
		ДокументОбъект.УстановитьПометкуУдаления(Истина);
	Исключение
	КонецПопытки;
КонецПроцедуры

&НаСервере
Функция ПолучитьРодителя(Параметр)
	Возврат Параметр.РодительскийЗаказ;
КонецФункции

&НаКлиенте
Процедура Подключаемый_ППОтправительПолучательПоКонтрагентуЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Объект.ВидДоставки = ВидДоставкиДверьДверь
			Или Объект.ВидДоставки = ВидДоставкиДверьСклад Тогда 
		ДополнительныеПараметры.ОтправительПолучатель = РезультатЗакрытия;
		ПромежуточныеПунктыОтправительПолучательПриИзменении(Элементы.ПромежуточныеПунктыОтправительПолучатель);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПППунктИзКИЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.ОтправительПолучатель = РезультатЗакрытия.ПунктНазначения;
	ПромежуточныеПунктыПунктПриИзменении(Элементы.ПромежуточныеПунктыПункт);
	
	ДополнительныеПараметры.КонтактноеЛицо = РезультатЗакрытия.КонтактноеЛицо;
	
КонецПроцедуры

&НаКлиенте
Процедура ППСоздатьПунктЗавершение(РезультатЗакрытия, ДопПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ТекстПредставления = РезультатЗакрытия.Представление;
	Если ПустаяСтрока(ТекстПредставления) Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеАдреса = РезультатЗакрытия.Значение;
	КоординатыАдреса = ПолучитьКоординатыАдреса(ТекстПредставления, ЗначениеАдреса);
	
	НовыйАдресСсылка = СоздатьАдресСервер(ТекстПредставления, КоординатыАдреса, ЗначениеАдреса);
	
	Если ЗначениеЗаполнено(НовыйАдресСсылка) Тогда
		ДопПараметры.Пункт = НовыйАдресСсылка;
		ПромежуточныеПунктыПунктПриИзменении(Элементы.ПромежуточныеПунктыПункт);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьПромежуточныеПункты(ДокОбъект=Неопределено)
	
	Если ДокОбъект = Неопределено Тогда 
		ДокОбъект = Объект;
	КонецЕсли;
	
	ПромежуточныеПункты.Очистить();
	
	ТекВремя = '00010101';
	ПредПрибытиеПлан = '00010101';
	НакопленноеВремя = 0;
	
	Для СчСтрок = 0 По ДокОбъект.ПромежуточныеПункты.Количество() - 1 Цикл 
		НовСтрока = ПромежуточныеПункты.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока, ДокОбъект.ПромежуточныеПункты[СчСтрок]);
		НовСтрока.ПунктНазначенияИмеетКоординаты = ПунктНазначенияИмеетКоординаты(НовСтрока.Пункт);
		НовСтрока.СтоянкаДоп   = уатОбщегоНазначения.ПолучитьВремяДопСтонки(НовСтрока.Пункт);

		Если СчСтрок = 0 Тогда 
			ТекВремя = ДокОбъект.ПромежуточныеПункты[СчСтрок].ПрибытиеПлан;
			ПредПрибытиеПлан = ДокОбъект.ПромежуточныеПункты[СчСтрок].ПрибытиеПлан;
		Иначе 
			ТекВремя = уатЗащищенныеФункцииСервер.СложитьВремя(ТекВремя, ДокОбъект.ПромежуточныеПункты[СчСтрок].Ожидание);
		КонецЕсли;
		
		НовСтрока.ПрибытиеПлан = ТекВремя;
		// Обновление временного окна прибытия в пункт
		СдвигОкна = НачалоДня(НовСтрока.ПрибытиеПлан) - НачалоДня(ДокОбъект.ПромежуточныеПункты[СчСтрок].ПрибытиеПлан);
		НовСтрока.ОкноС  = НовСтрока.ОкноС  + СдвигОкна;
		НовСтрока.ОкноПо = НовСтрока.ОкноПо + СдвигОкна;
		
		ТекВремя = уатЗащищенныеФункцииСервер.СложитьВремя(ТекВремя, ДокОбъект.ПромежуточныеПункты[СчСтрок].Стоянка);
		
		Если ТипЗнч(ДокОбъект.ПромежуточныеПункты[СчСтрок].Пункт) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда 
			ТекВремя = уатЗащищенныеФункцииСервер.СложитьВремя(ТекВремя, уатОбщегоНазначения.ПолучитьВремяДопСтонки(ДокОбъект.ПромежуточныеПункты[СчСтрок].Пункт));
		КонецЕсли;
		
		НовСтрока.УбытиеПлан = ТекВремя;
		
		ТекВремя = уатЗащищенныеФункцииСервер.СложитьВремя(ТекВремя, ДокОбъект.ПромежуточныеПункты[СчСтрок].Время);
		
		Если Не ЗначениеЗаполнено(НовСтрока.Пункт) Тогда
			НовСтрока.ПунктСтатусКартинка = -1;
		ИначеЕсли ТипЗнч(НовСтрока.Пункт) = Тип("СправочникСсылка.уатПунктыНазначения")
				И ПунктНазначенияИмеетКоординаты(НовСтрока.Пункт) Тогда
			НовСтрока.ПунктСтатусКартинка = 0;
		Иначе
			НовСтрока.ПунктСтатусКартинка = 1;
		КонецЕсли;
		
		НакопленноеВремя = НакопленноеВремя + (НовСтрока.ПрибытиеПлан - ПредПрибытиеПлан);
		ПредПрибытиеПлан = НовСтрока.ПрибытиеПлан;
		ВремяВТекТочке   = НакопленноеВремя;
		
		НовСтрока.Длительность = "";
		Если ВремяВТекТочке > 0 Тогда 
			чДней = Цел(ВремяВТекТочке / 86400);
			ВремяВТекТочке = ВремяВТекТочке - чДней * 86400;
			чЧас = Цел(ВремяВТекТочке / 3600);
			ВремяВТекТочке = ВремяВТекТочке - чЧас * 3600;
			чМин = Цел(ВремяВТекТочке / 60);
			ВремяВТекТочке = ВремяВТекТочке - чМин * 60;
			
			Если ВремяВТекТочке > 0 Тогда 
				чМин = чМин + 1;
			КонецЕсли;
			
			Если чМин > 59 Тогда 
				чМин = 0;
				чЧас = чЧас + 1;
			КонецЕсли;
			
			Если чЧас > 23 Тогда 
				чЧас = 0;
				чДней = чДней + 1;
			КонецЕсли;
			
			НовСтрока.Длительность = "" 
				+ ?(чДней = 0, "", Строка(чДней) + " " + НСтр("ru='дн.';en='days.'") + " ")
				+ Формат(чЧас, "ЧЦ=2; ЧДЦ=; ЧН=00; ЧВН=; ЧГ=0") + ":"
				+ Формат(чМин, "ЧЦ=2; ЧДЦ=; ЧН=00; ЧВН=; ЧГ=0");
		КонецЕсли;
	КонецЦикла;
	
	УстановитьСпискиВыбораОтрезковПути();
	УстановитьПредставленияОтрезковПути();
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьПромежуточныеПункты(ДокОбъект=Неопределено)
	
	Если ДокОбъект = Неопределено Тогда 
		ДокОбъект = Объект;
	КонецЕсли;
	
	ДокОбъект.ПромежуточныеПункты.Очистить();
	Для Каждого ТекСтрока Из ПромежуточныеПункты Цикл 
		НовСтрока = ДокОбъект.ПромежуточныеПункты.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока, ТекСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьВариантыОтрезков()
	
	ВариантыОтрезков = Новый Массив();
	
	Для СчПогрузка = 0 По ПромежуточныеПункты.Количество() - 1 Цикл 
		СтрокаПогрузка = ПромежуточныеПункты[СчПогрузка];
		
		Если Не (СтрокаПогрузка.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка
				Или СтрокаПогрузка.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяПогрузка) Тогда 
			Продолжить;
		КонецЕсли;
		
		Для СчРазгрузка = (СчПогрузка + 1) По ПромежуточныеПункты.Количество() - 1 Цикл 
			СтрокаРазгрузка = ПромежуточныеПункты[СчРазгрузка];
			
			Если Не (СтрокаРазгрузка.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка
					Или СтрокаРазгрузка.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяРазгрузка) Тогда 
				Продолжить;
			КонецЕсли;
			
			ВариантОтрезка = Новый Структура;
			ВариантОтрезка.Вставить("Значение", Строка(СчПогрузка+1) + " - " + Строка(СчРазгрузка+1));
			ПредставлениеОтрезка = уатОбщегоНазначения_проф.ПолучитьПредставлениеОтрезкаПути(
				СтрокаПогрузка.Пункт, СтрокаРазгрузка.Пункт, СчПогрузка+1, СчРазгрузка+1);
			ВариантОтрезка.Вставить("Представление", ПредставлениеОтрезка);
			ВариантыОтрезков.Добавить(ВариантОтрезка);
		КонецЦикла;
	КонецЦикла;
	
	Возврат ВариантыОтрезков;
	
КонецФункции // ПолучитьВариантыОтрезков()

&НаСервере
Процедура УстановитьСпискиВыбораОтрезковПути()
	
	Элементы.ГрузовойСоставОтрезокПути.СписокВыбора.Очистить();
	Элементы.ТоварыОтрезокПути.СписокВыбора.Очистить();
	
	Для Каждого ТекВариант Из ПолучитьВариантыОтрезков() Цикл 
		Элементы.ГрузовойСоставОтрезокПути.СписокВыбора.Добавить(ТекВариант.Значение, ТекВариант.Представление);
		Элементы.ТоварыОтрезокПути.СписокВыбора.Добавить(ТекВариант.Значение, ТекВариант.Представление);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОтрезокПутиВГрузахВыборВарианта(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;
	
	СписокВыбораВарианта = Новый СписокЗначений();
	
	Для Каждого ТекВариант Из ПолучитьВариантыОтрезков() Цикл 
		СписокВыбораВарианта.Добавить(ТекВариант.Значение, ТекВариант.Представление);
	КонецЦикла;
	
	СписокВыбораВарианта.ПоказатьВыборЭлемента(
		Новый ОписаниеОповещения("ЗаполнитьОтрезокПутиВГрузахЗавершение", ЭтотОбъект),
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОтрезокПутиВГрузахЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПоложениеРазделителя = СтрНайти(ВыбранныйЭлемент.Значение, " - ");
	Если ПоложениеРазделителя > 0 Тогда
		От = Число(Лев(ВыбранныйЭлемент.Значение, ПоложениеРазделителя-1));
		До = Число(Сред(ВыбранныйЭлемент.Значение, ПоложениеРазделителя+2));
	Иначе
		Возврат;
	КонецЕсли;
	
	Объект.ОтрезкиПути.Очистить();
	Для Сч = От По До-1 Цикл
		id = Строка(Новый УникальныйИдентификатор);
		Для Каждого ТекСтрока Из Объект.ГрузовойСостав Цикл 
			НоваяСтрока = Объект.ОтрезкиПути.Добавить();
			НоваяСтрока.ПунктОтправления = Сч;
			НоваяСтрока.ПунктНазначения = Сч+1;
			НоваяСтрока.Груз = ТекСтрока.НомерСтроки;
			НоваяСтрока.id = id;
		КонецЦикла;
	КонецЦикла;

	УстановитьПредставленияОтрезковПути();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОтрезокПутиВТоварахВыборВарианта(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;
	
	СписокВыбораВарианта = Новый СписокЗначений();
	
	Для Каждого ТекВариант Из ПолучитьВариантыОтрезков() Цикл 
		СписокВыбораВарианта.Добавить(ТекВариант.Значение, ТекВариант.Представление);
	КонецЦикла;
	
	СписокВыбораВарианта.ПоказатьВыборЭлемента(
		Новый ОписаниеОповещения("ЗаполнитьОтрезокПутиВТоварахЗавершение", ЭтотОбъект),
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОтрезокПутиВТоварахЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПоложениеРазделителя = СтрНайти(ВыбранныйЭлемент.Значение, " - ");
	Если ПоложениеРазделителя > 0 Тогда
		От = Число(Лев(ВыбранныйЭлемент.Значение, ПоложениеРазделителя));
		До = Число(Прав(ВыбранныйЭлемент.Значение, ПоложениеРазделителя));
	Иначе
		Возврат;
	КонецЕсли;
	
	Объект.ОтрезкиПути.Очистить();
	Для Сч = От По До-1 Цикл
		id = Строка(Новый УникальныйИдентификатор);
		Для Каждого ТекСтрока Из Объект.Товары Цикл 
			НоваяСтрока = Объект.ОтрезкиПути.Добавить();
			НоваяСтрока.ПунктОтправления = Сч;
			НоваяСтрока.ПунктНазначения = Сч+1;
			НоваяСтрока.Груз = ТекСтрока.НомерСтроки;
			НоваяСтрока.id = id;
		КонецЦикла;
	КонецЦикла;
	
	УстановитьПредставленияОтрезковПути();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАдресОтправленияПоУмолчанию()
	
	СтруктураОбъектовНастроек = Новый Структура();
	СтруктураОбъектовНастроек.Вставить("Организация",   Объект.Организация);
	СтруктураОбъектовНастроек.Вставить("Подразделение", Объект.Подразделение);
	
	Объект.АдресОтправления = ПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, ПланыВидовХарактеристик.уатПраваИНастройки.ОсновнойПунктОтправления);
	
	мВремяС  = Объект.АдресОтправления.ВремяДоступностиС;
	мВремяПо = Объект.АдресОтправления.ВремяДоступностиПо;
	мЛат     = Объект.АдресОтправления.Лат;
	мЛон     = Объект.АдресОтправления.Лон;
	мСтоянка = ПолучитьВремяСтоянкиПоУмолчанию(Объект.АдресОтправления);
	
	мВремяС  = мВремяС - '00010101';
	мВремяПо = мВремяПо - '00010101';
	
	ТекущаяДата = ТекущаяДата();
	Объект.ОтправлениеС            = НачалоДня(ТекущаяДата) + мВремяС;
	Объект.ОтправлениеПо           = НачалоДня(ТекущаяДата) + мВремяПо;
	Объект.СтоянкаПунктОтправления = мСтоянка;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСлучайныйЦветЗаказа()
	
	Объект.ЦветДокумента = уатЗащищенныеФункцииСервер_проф.СлучайноеЧисло(, 15);
	
	Если Объект.ЦветДокумента = 0 Тогда 
		Объект.ЦветДокумента = 16;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьВремяСтоянкиПоУмолчанию(ПунктСсылка)
	
	Возврат уатОбщегоНазначения.ПолучитьВремяСтоянкиПоУмолчанию(ПунктСсылка);
	
КонецФункции // ПолучитьВремяСтоянкиПоУмолчанию()

&НаСервере
Процедура ПересчитатьСтоянкуИКоординатыПункта(ПроставитьФлагКоординат = Ложь)
	
	мСтоянка = 0;
	
	Если Объект.FTL Тогда 
		Для Каждого СтрокаПП Из ПромежуточныеПункты Цикл 
			мСтоянка = уатЗащищенныеФункцииСервер.СложитьВремя(мСтоянка, СтрокаПП.Стоянка);
			
			Если ТипЗнч(СтрокаПП.Пункт) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда 
				мСтоянка = уатЗащищенныеФункцииСервер.СложитьВремя(мСтоянка, уатОбщегоНазначения.ПолучитьВремяДопСтонки(СтрокаПП.Пункт));
			КонецЕсли;
			
			Если ПроставитьФлагКоординат Тогда
				СтрокаПП.ПунктНазначенияИмеетКоординаты = ПунктНазначенияИмеетКоординаты(СтрокаПП.Пункт);
			КонецЕсли;
		КонецЦикла;
		
	Иначе 
		мСтоянка = уатЗащищенныеФункцииСервер.СложитьВремя(Объект.СтоянкаПунктОтправления, Объект.СтоянкаПунктНазначения);
		
		Если ТипЗнч(Объект.АдресОтправления) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда 
			мСтоянка = уатЗащищенныеФункцииСервер.СложитьВремя(мСтоянка, уатОбщегоНазначения.ПолучитьВремяДопСтонки(Объект.АдресОтправления));
			Если ПроставитьФлагКоординат Тогда
				ПунктОтправленияИмеетКоординаты = ПунктНазначенияИмеетКоординаты(Объект.АдресОтправления);
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗнч(Объект.АдресНазначения) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда 
			мСтоянка = уатЗащищенныеФункцииСервер.СложитьВремя(мСтоянка, уатОбщегоНазначения.ПолучитьВремяДопСтонки(Объект.АдресНазначения));
			Если ПроставитьФлагКоординат Тогда
				ПунктНазначенияИмеетКоординаты = ПунктНазначенияИмеетКоординаты(Объект.АдресНазначения);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Объект.Стоянка = мСтоянка;
	
КонецПроцедуры

&НаСервере
Процедура ПрикрепитьТегХарактеристикНаСервере(Тег)
	
	Если Объект.Характеристики.НайтиСтроки(Новый Структура("Характеристика", Тег)).Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеТега = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Тег, "Наименование, ПометкаУдаления");
	
	СтрокаТегов = Объект.Характеристики.Добавить();
	НавигационнаяСсылкаФС = "Тег_" + СтрокаТегов.ПолучитьИдентификатор();
	
	СтрокаТегов.Характеристика  = Тег;
	СтрокаТегов.ПометкаУдаления = ДанныеТега.ПометкаУдаления;
	СтрокаТегов.Представление   = ФорматированнаяСтрокаПредставленияТега(ДанныеТега.Наименование, ДанныеТега.ПометкаУдаления, НавигационнаяСсылкаФС);
	СтрокаТегов.ДлинаТега       = СтрДлина(ДанныеТега.Наименование);
	
	ОбновитьЭлементыТеговХарактеристик();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПрикрепитьТегГруппыСовместимостиНаСервере(Тег)
	
	Если Объект.ГруппыСовместимости.НайтиСтроки(Новый Структура("ГруппаСовместимости", Тег)).Количество() > 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеТега = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(Тег, "Наименование, ПометкаУдаления");
	
	СтрокаТегов = Объект.ГруппыСовместимости.Добавить();
	НавигационнаяСсылкаФС = "Тег_" + СтрокаТегов.ПолучитьИдентификатор();
	
	СтрокаТегов.ГруппаСовместимости = Тег;
	СтрокаТегов.ПометкаУдаления     = ДанныеТега.ПометкаУдаления;
	СтрокаТегов.Представление       = ФорматированнаяСтрокаПредставленияТега(ДанныеТега.Наименование, ДанныеТега.ПометкаУдаления, НавигационнаяСсылкаФС);
	СтрокаТегов.ДлинаТега           = СтрДлина(ДанныеТега.Наименование);
	
	ОбновитьЭлементыТеговГруппыСовместимости();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыТеговХарактеристик()
	
	Для Каждого ТекСтрока Из Объект.Характеристики Цикл
		Если ТекСтрока.Представление = Неопределено Тогда
			ПрочитатьДанныеТегов();
			Прервать;
		КонецЕсли;
	КонецЦикла;
	ФС = Объект.Характеристики.Выгрузить(, "Представление").ВыгрузитьКолонку("Представление");
	
	Индекс = ФС.Количество()-1;
	Пока Индекс > 0 Цикл
		ФС.Вставить(Индекс, "  ");
		Индекс = Индекс - 1;
	КонецЦикла;
	
	Элементы.ОблакоТеговХарактеристик.Заголовок	= Новый ФорматированнаяСтрока(ФС);
	Элементы.ОблакоТеговХарактеристик.Видимость	= ФС.Количество() > 0;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьЭлементыТеговГруппыСовместимости()
	
	Для Каждого ТекСтрока Из Объект.ГруппыСовместимости Цикл
		Если ТекСтрока.Представление = Неопределено Тогда
			ПрочитатьДанныеТегов();
			Прервать;
		КонецЕсли;
	КонецЦикла;
	ФС = Объект.ГруппыСовместимости.Выгрузить(, "Представление").ВыгрузитьКолонку("Представление");
	
	Индекс = ФС.Количество()-1;
	Пока Индекс > 0 Цикл
		ФС.Вставить(Индекс, "  ");
		Индекс = Индекс - 1;
	КонецЦикла;
	
	Элементы.ОблакоТеговГруппыСовместимости.Заголовок = Новый ФорматированнаяСтрока(ФС);
	Элементы.ОблакоТеговГруппыСовместимости.Видимость = ФС.Количество() > 0;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ФорматированнаяСтрокаПредставленияТега(НаименованиеТега, ПометкаУдаления, НавигационнаяСсылкаФС)
	
	#Если Клиент Тогда
	Цвет = ОбщегоНазначенияКлиентПовтИсп.ЦветСтиля("ТекстВторостепеннойНадписи");
	БазовыйШрифт = ОбщегоНазначенияКлиентПовтИсп.ШрифтСтиля("ОбычныйШрифтТекста");
	#Иначе
	Цвет = ЦветаСтиля.ТекстВторостепеннойНадписи;
	БазовыйШрифт = ШрифтыСтиля.ОбычныйШрифтТекста;
	#КонецЕсли
	
	Шрифт = Новый Шрифт(БазовыйШрифт,,,Истина,,?(ПометкаУдаления, Истина, Неопределено));
	
	КомпонентыФС = Новый Массив;
	КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(НаименованиеТега + Символы.НПП, Шрифт, Цвет));
	КомпонентыФС.Добавить(Новый ФорматированнаяСтрока(БиблиотекаКартинок.Очистить, , , , НавигационнаяСсылкаФС));
	
	Возврат Новый ФорматированнаяСтрока(КомпонентыФС);
	
КонецФункции

&НаСервере
Процедура СоздатьИПрикрепитьТегГруппыСовместимостиНаСервере(знач ЗаголовокТега)
	
	Тег = НайтиСоздатьТегГруппыСовместимости(ЗаголовокТега);
	ПрикрепитьТегГруппыСовместимостиНаСервере(Тег);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьИПрикрепитьТегХарактеристикНаСервере(знач ЗаголовокТега)
	
	Тег = НайтиСоздатьТегХарактеристик(ЗаголовокТега);
	ПрикрепитьТегХарактеристикНаСервере(Тег);
	
КонецПроцедуры

&НаСервере
Функция НайтиСоздатьТегХарактеристик(Знач ЗаголовокТега)
	
	Тег = Справочники["уатХарактеристикиЗаказов_уэ"].НайтиПоНаименованию(ЗаголовокТега, Истина);
	
	Если Тег.Пустая() Тогда
		
		ТегОбъект = Справочники["уатХарактеристикиЗаказов_уэ"].СоздатьЭлемент();
		ТегОбъект.Наименование = ЗаголовокТега;
		ТегОбъект.Записать();
		Тег = ТегОбъект.Ссылка;
		ФлагСозданЭлементСправочника = Истина;
	КонецЕсли;
	
	Возврат Тег;
	
КонецФункции

&НаСервере
Функция НайтиСоздатьТегГруппыСовместимости(Знач ЗаголовокТега)
	
	Тег = Справочники["уатГруппыСовместимости_уэ"].НайтиПоНаименованию(ЗаголовокТега, Истина);
	
	Если Тег.Пустая() Тогда
		
		ТегОбъект = Справочники["уатГруппыСовместимости_уэ"].СоздатьЭлемент();
		ТегОбъект.Наименование = ЗаголовокТега;
		ТегОбъект.Записать();
		Тег = ТегОбъект.Ссылка;
		ФлагСозданЭлементСправочника = Истина;
	КонецЕсли;
	
	Возврат Тег;
	
КонецФункции

&НаСервере
Процедура ПрочитатьДанныеТегов()
		
	Для Каждого ТекСтрока Из Объект.ГруппыСовместимости Цикл
		НавигационнаяСсылкаФС = "Тег_" + ТекСтрока.ПолучитьИдентификатор();
		ТекСтрока.Представление = ФорматированнаяСтрокаПредставленияТега(ТекСтрока.ГруппаСовместимости.Наименование, ТекСтрока.ПометкаУдаления, НавигационнаяСсылкаФС);
		ТекСтрока.ДлинаТега = СтрДлина(ТекСтрока.ГруппаСовместимости);
	КонецЦикла;
	
	Для Каждого ТекСтрока Из Объект.Характеристики Цикл
		НавигационнаяСсылкаФС = "Тег_" + ТекСтрока.ПолучитьИдентификатор();
		ТекСтрока.Представление = ФорматированнаяСтрокаПредставленияТега(ТекСтрока.Характеристика.Наименование, ТекСтрока.ПометкаУдаления, НавигационнаяСсылкаФС);
		ТекСтрока.ДлинаТега = СтрДлина(ТекСтрока.Характеристика);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемВопрос(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.ОК Тогда
		флВопросЗакрытиеФормы = Ложь;
		Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФлагРучногоРедактирования(ТекСтрокаТабличнойЧасти, ИмяТЧ = "Услуги")
	ТекСтрокаТабличнойЧасти.РучнойВвод = Истина;
	
	Если ИмяТЧ = "Услуги" Тогда
		РассчитатьСуммуДокумента();
		ОбновитьВсегоВТЧУслуги();
	Иначе
		ОбновитьВсегоВТЧПолучаемыеУслуги();
	КонецЕсли;
	
	ОбновитьПодвалСервер();
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСписокВыбораПунктов(ЭлементАдрес, ТекКонтрагент, ОбъектКонтрагент, ПолучатьФактАдрес = Истина)
	
	СписокВыбораАдресОтправления = ЭлементАдрес.СписокВыбора;
	СписокВыбораАдресОтправления.Очистить();
	АдресаКонтрагента = ПолучитьАдреса(?(ЗначениеЗаполнено(ТекКонтрагент), ТекКонтрагент, ОбъектКонтрагент), ПолучатьФактАдрес);
	Для Каждого ТекСтрока ИЗ АдресаКонтрагента Цикл
		СписокВыбораАдресОтправления.Добавить(ТекСтрока,,, БиблиотекаКартинок.УстановитьОтветственногоЗаВзаимодействие);
	КонецЦикла;
	
	Если АдресаКонтрагента.Количество() = 0 И ЗначениеЗаполнено(ТекКонтрагент) Тогда
		АдресаКонтрагента = ПолучитьАдреса(ОбъектКонтрагент, Ложь);
		Для Каждого ТекСтрока ИЗ АдресаКонтрагента Цикл
			СписокВыбораАдресОтправления.Добавить(ТекСтрока,,, БиблиотекаКартинок.УстановитьОтветственногоЗаВзаимодействие);
		КонецЦикла;
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УслугиПриИзмененииВалюты(ИмяТЧ)
	ТекСтрока = Элементы[ИмяТЧ].ТекущиеДанные;
	
	Если ТекСтрока.Валюта = ДанныеСтрокиУслуги.Валюта Тогда
		Возврат;
	КонецЕсли;
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ТекСтрока", ТекСтрока);
	ДопПараметры.Вставить("ИмяТЧ", ИмяТЧ);
	
	Если ТекСтрока.Цена = 0 И ТекСтрока.ЦенаПлан = 0 Тогда
		УслугиПриИзмененииВалютыЗавершение(КодВозвратаДиалога.Нет, ДопПараметры);
	Иначе
		Оповещ = Новый ОписаниеОповещения("УслугиПриИзмененииВалютыЗавершение", ЭтотОбъект, ДопПараметры);
		ПоказатьВопрос(Оповещ, "Изменилась валюта строки. Пересчитать цену и сумму по курсу?", РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриИзмененииВалютыЗавершение(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда //пересчет сумм в строке по курсу
		СтруктураКурсаПред = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ДанныеСтрокиУслуги.Валюта, Объект.ДатаКурса);
		СтруктураКурса = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ДопПараметры.ТекСтрока.Валюта, Объект.ДатаКурса);
				
		ДопПараметры.ТекСтрока.Цена = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ДопПараметры.ТекСтрока.Цена,
			ДанныеСтрокиУслуги.Валюта,    ДопПараметры.ТекСтрока.Валюта,
			СтруктураКурсаПред.Курс,      СтруктураКурса.Курс,
			СтруктураКурсаПред.Кратность, СтруктураКурса.Кратность);
			
		флУчитыватьСкидки = (ДопПараметры.ИмяТЧ = "Услуги");
		Если флУчитыватьСкидки Тогда
			РассчитатьСуммуСкидки(ДопПараметры.ТекСтрока, "Факт");
		КонецЕсли;
		
		РассчитатьСуммуВСтрокеТабличнойЧасти(ДопПараметры.ТекСтрока, "Факт", флУчитыватьСкидки);
		
		Если ИспользоватьПлановыеУслуги Тогда
			ДопПараметры.ТекСтрока.ЦенаПлан = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ДопПараметры.ТекСтрока.ЦенаПлан,
				ДанныеСтрокиУслуги.Валюта,    ДопПараметры.ТекСтрока.Валюта,
				СтруктураКурсаПред.Курс,      СтруктураКурса.Курс,
				СтруктураКурсаПред.Кратность, СтруктураКурса.Кратность);
				
			Если флУчитыватьСкидки Тогда
				РассчитатьСуммуСкидки(ДопПараметры.ТекСтрока, "План");
			КонецЕсли;
			
			РассчитатьСуммуВСтрокеТабличнойЧасти(ДопПараметры.ТекСтрока, "План", флУчитыватьСкидки);
		КонецЕсли;
		
		РассчитатьСуммуНДС(ДопПараметры.ТекСтрока);
		РассчитатьСуммуВсегоВстрокеТЧ(ДопПараметры.ТекСтрока);
	КонецЕсли;
	
	Если ДопПараметры.ИмяТЧ = "ПолучаемыеУслуги" Тогда
		ОбновитьНДСвТЧРасходы();
		ОбновитьВсегоВТЧПолучаемыеУслуги();
	Иначе
		ОбновитьВсегоВТЧУслуги();
	КонецЕсли;
	
	ОбновитьНадписьИтоги();
	ОбновитьПодвалСервер();
	
	ДанныеСтрокиУслуги.Валюта = ДопПараметры.ТекСтрока.Валюта;
	
	ДопПараметры.ТекСтрока.РучнойВвод = Истина;
	Модифицированность = Истина;	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьНДСвТЧРасходы()
	Для Каждого ТекСтрока Из Объект.Расходы Цикл 
		Если ТекСтрока.УчитыватьНДС Тогда 
			Если ТекСтрока.СуммаВключаетНДС Тогда 
				ТекСтрока.УчитыватьНДСПредставление = НСтр("en='VAT amount';ru='НДС в сумме'");
			Иначе 
				ТекСтрока.УчитыватьНДСПредставление = НСтр("en='VAT from above';ru='НДС сверху'");
			КонецЕсли;
		Иначе 
			ТекСтрока.УчитыватьНДСПредставление = НСтр("en='Document excluding VAT';ru='Строка без НДС'");
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция СтруктураКурсаВалютыСтроки(Валюта, ДатаКурса, КэшКурсов = Неопределено)
	// Кеширование используется для исключения повторного получения курса для одной и той же валюты
	Если КэшКурсов = Неопределено Тогда
		КэшКурсов = Новый Соответствие;
	КонецЕсли;
	
	СтруктураКурсаСтроки = КэшКурсов.Получить(Валюта);
	Если СтруктураКурсаСтроки = Неопределено Тогда
		СтруктураКурсаСтроки = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(Валюта, ДатаКурса);
		КэшКурсов.Вставить(Валюта, СтруктураКурсаСтроки);
	КонецЕсли;
	
	Возврат СтруктураКурсаСтроки;
КонецФункции

&НаСервере
Процедура ОбновитьПодвалДоходовРасходов(ИмяТЧ = Неопределено)
	Если ИмяТЧ = Неопределено Тогда
		ОбновитьПодвалДоходовРасходов("Услуги");
		ОбновитьПодвалДоходовРасходов("Расходы");
		Возврат;
	КонецЕсли;
	
	ИмяЭлементаТЧ = ?(ИмяТЧ = "Услуги", "Услуги", "ПолучаемыеУслуги");
	
	СтрокаКолонки = "Сумма, СуммаНДС, Всего";
	Если ИспользоватьПлановыеУслуги Тогда
		СтрокаКолонки = СтрокаКолонки + ", СуммаПлан, СуммаНДСПлан, ВсегоПлан";
	КонецЕсли;
	СтруктураКолонки = Новый Структура(СтрокаКолонки);
	
	соотвИтогиВВалюте = Новый Соответствие;
	Для Каждого ТекСтрока Из Объект[ИмяТЧ] Цикл
		ТекЭлем = соотвИтогиВВалюте.Получить(ТекСтрока.Валюта);
		Если ТекЭлем = Неопределено Тогда
			ТекСтруктураКолонки = Новый Структура;
			Для Каждого КолонкаИтоги Из СтруктураКолонки Цикл
				ТекСтруктураКолонки.Вставить(КолонкаИтоги.Ключ, 0);
			КонецЦикла;
			соотвИтогиВВалюте.Вставить(ТекСтрока.Валюта, ТекСтруктураКолонки);
			ТекЭлем = соотвИтогиВВалюте.Получить(ТекСтрока.Валюта);
		КонецЕсли;
		
		Для Каждого КолонкаИтоги Из СтруктураКолонки Цикл
			ТекЭлем[КолонкаИтоги.Ключ] = ТекЭлем[КолонкаИтоги.Ключ] +
				ТекСтрока[КолонкаИтоги.Ключ] * ?(ТекСтрока.Тариф.Скидка, -1, 1);
		КонецЦикла;
	КонецЦикла;
	
	мВысотаПодвала = 1;
	
	Для Каждого КолонкаИтоги Из СтруктураКолонки Цикл
		ТекТекстПодвала = "";
		мКоличВалют = 0;
		
		Для Каждого ТекСтрокаИтогиВВалюте Из соотвИтогиВВалюте Цикл
			ТекИтого = ТекСтрокаИтогиВВалюте.Значение[КолонкаИтоги.Ключ];
			Если ТекИтого = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ТекТекстПодвала = ТекТекстПодвала + "
				|" + Формат(ТекИтого, "ЧДЦ=2") + " " + ТекСтрокаИтогиВВалюте.Ключ + "";;
			
			мКоличВалют = мКоличВалют + 1;
		КонецЦикла;
		
		Если ИмяТЧ = "Услуги" Тогда
			ЭтотОбъект["НадписьПодвалДоходы" + КолонкаИтоги.Ключ] = Сред(ТекТекстПодвала, 2);
		Иначе
			ЭтотОбъект["НадписьПодвалРасходы" + КолонкаИтоги.Ключ] = Сред(ТекТекстПодвала, 2);
		КонецЕсли;
		
		//Элементы[ИмяЭлементаТЧ + КолонкаИтоги.Ключ].ТекстПодвала = Сред(ТекТекстПодвала, 2);
		
		мВысотаПодвала = Макс(мВысотаПодвала, мКоличВалют);
	КонецЦикла;
	
	Если Элементы[ИмяЭлементаТЧ].ВысотаПодвала <> мВысотаПодвала Тогда
		Элементы[ИмяЭлементаТЧ].ВысотаПодвала = мВысотаПодвала;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиУведомленийЗакрытиеФормы(Результат, ДопПараметры) Экспорт
	Если ТипЗнч(Результат) = Тип("ДанныеФормыКоллекция") Тогда
		Объект.ПолучателиУведомлений.Очистить();
		Для Каждого ТекСтрока Из Результат Цикл
			НоваяСтрока = Объект.ПолучателиУведомлений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		КонецЦикла;
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПромежуточныеПунктыПунктПриИзмененииДанных(ТекущиеДанные)
	
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	уатОбщегоНазначенияКлиент.ЗаполнитьВремяДоступностиИСтоянкуВПункте(ТекущиеДанные, Объект.Дата);
	
	ОчиститьВремяРасстояниеМеждуПунктами();
	
	ПересчитатьСтоянкуИКоординатыПункта(Истина);
	ПромежуточныеПунктыПриИзменении(Элементы.ПромежуточныеПункты);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПредставленияОтрезковПути()

	Если Объект.ДетализацияЗакрытия = ПредопределенноеЗначение("Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам")
		Или Объект.ДетализацияЗакрытия = ПредопределенноеЗначение("Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам") Тогда
		КоличествоГрузов = Объект.ГрузовойСостав.Количество();
	Иначе
		КоличествоГрузов = Объект.Товары.Количество();
	КонецЕсли;
	
	МассивОтрезков = уатОбщегоНазначения_проф.ПолучитьНачальныеКонечныеПунктыГрузов(
		Объект.ОтрезкиПути, КоличествоГрузов, Объект.ПромежуточныеПункты.Количество());
	
	Для Каждого ТекПредставление Из МассивОтрезков Цикл
		Если ТекПредставление.От > 0 И ТекПредставление.До > -1 Тогда
			ПредставлениеТекущегоОтрезка = уатОбщегоНазначения_проф.ПолучитьПредставлениеОтрезкаПути( 
				ПромежуточныеПункты[ТекПредставление.От-1].Пункт,
				ПромежуточныеПункты[ТекПредставление.До-1].Пункт,
				ТекПредставление.От,
				ТекПредставление.До
			);
		Иначе
			ПредставлениеТекущегоОтрезка = "";
		КонецЕсли;
		ТекПредставление.Вставить("Представление", ПредставлениеТекущегоОтрезка);
	КонецЦикла;
	
	Возврат МассивОтрезков;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьИзменениеОтрезкаПути(Элемент, ВыбранноеЗначение)
	
	Если Элемент <> Элементы.Товары И Элемент <> Элементы.ГрузовойСостав Тогда
		Возврат;
	КонецЕсли;
	
	// Удаление старых строк, связанных с текущим грузом, из ТЧ ОтрезкиПути
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	НомерСтрокиГруза = ТекущиеДанные.НомерСтроки;
	Сч = Объект.ОтрезкиПути.Количество();
	Пока Сч > 0 Цикл
		Сч = Сч-1;
		Если Объект.ОтрезкиПути[Сч].Груз = НомерСтрокиГруза Тогда
			Объект.ОтрезкиПути.Удалить(Сч);
		КонецЕсли;
	КонецЦикла;
	
	// Добавление новых строк, связанных с текущим грузом, в ТЧ ОтрезкиПути
	ПоложениеРазделителя = СтрНайти(ВыбранноеЗначение, " - ");
	Если ПоложениеРазделителя > 0 Тогда
		От = Число(Лев(ВыбранноеЗначение, ПоложениеРазделителя));
		До = Число(Прав(ВыбранноеЗначение, ПоложениеРазделителя));
		
		Для Сч = От По До-1 Цикл
			НайденныеСтроки = Объект.ОтрезкиПути.НайтиСтроки(Новый Структура("ПунктОтправления, ПунктНазначения", Сч, Сч+1));
			Если НайденныеСтроки.Количество() > 0 Тогда
				id = НайденныеСтроки[0].id;
			Иначе
				id = Строка(Новый УникальныйИдентификатор);
			КонецЕсли;
			
			НоваяСтрока = Объект.ОтрезкиПути.Добавить();
			НоваяСтрока.ПунктОтправления = Сч;
			НоваяСтрока.ПунктНазначения = Сч+1;
			НоваяСтрока.Груз = НомерСтрокиГруза;
			НоваяСтрока.id = id;
		КонецЦикла;
	КонецЕсли;
	
	УстановитьПредставленияОтрезковПути();

КонецПроцедуры

&НаСервере
Процедура УстановитьПредставленияОтрезковПути()
	
	Если Объект.ДетализацияЗакрытия = ПредопределенноеЗначение("Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам")
		Или Объект.ДетализацияЗакрытия = ПредопределенноеЗначение("Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам") Тогда
		ТаблицаГрузов = Объект.ГрузовойСостав;
	Иначе
		ТаблицаГрузов = Объект.Товары;
	КонецЕсли;
	
	Если Объект.ОтрезкиПути.Количество() > 0 Тогда
		МассивПредставлений = ПолучитьПредставленияОтрезковПути();
		Для Сч = 0 По МассивПредставлений.Количество()-1 Цикл
			ТаблицаГрузов[Сч].ПредставлениеОтрезкаПути = МассивПредставлений[Сч].Представление;
		КонецЦикла;
	Иначе
		// Документ, в котором отрезки пути еще не заполнены, или документ, для которого не выполнены обработчики обновления.
		Для Каждого ТекСтрока Из ТаблицаГрузов Цикл
			ТекСтрока.ПредставлениеОтрезкаПути = ТекСтрока.ОтрезокПути;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРедакторСхемыПеревозкиЗаписьДокумента(РезультатВопроса, ПараметрыСхемы) Экспорт
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;
	
	Если Записать() Тогда 
		ОткрытьРедакторСхемыПеревозкиПослеЗаписиДокумента(ПараметрыСхемы);
	КонецЕсли;
КонецПроцедуры
	
&НаКлиенте
Процедура ОткрытьРедакторСхемыПеревозкиПослеЗаписиДокумента(ПараметрыСхемы)

	Оповещение = Новый ОписаниеОповещения("РедакторСхемыПеревозкиПослеЗакрытия", ЭтаФорма);
	
	ПараметрыСхемы.Вставить("ЗаказНаТС", Объект.Ссылка);
	ПараметрыСхемы.Вставить("ДетализацияЗакрытия", Объект.ДетализацияЗакрытия);
	ОткрытьФорму("Обработка.уатРедактированиеСхемыПеревозки_уэ.Форма.Форма", ПараметрыСхемы,,,,, Оповещение, РежимОткрытияОкнаФормы.Независимый);
	
КонецПроцедуры

&НаКлиенте
Процедура РедакторСхемыПеревозкиПослеЗакрытия(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	Прочитать();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОписание(ТекущийОбъект)
	
	Если Не ПустаяСтрока(ТекущийОбъект.НазваниеГруза) Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаОписаний = Новый ТаблицаЗначений;
	ТаблицаОписаний.Колонки.Добавить("Описание");
	
	Если ТекущийОбъект.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам Тогда
		ТабличнаяЧастьДокумента = ТекущийОбъект.Товары.Выгрузить();
		ГрузовойСостав = Ложь;
	Иначе
		ТабличнаяЧастьДокумента = ТекущийОбъект.ГрузовойСостав.Выгрузить();
		ГрузовойСостав = Истина;
	КонецЕсли;
	
	Для Каждого Строка Из ТабличнаяЧастьДокумента Цикл
		
		Если ГрузовойСостав Тогда
			ОписаниеСтроки = Строка.ОписаниеГруза;
			
			Если ПустаяСтрока(ОписаниеСтроки) Тогда
				ОписаниеСтроки = Строка.ГрузовоеМесто.Наименование;
			КонецЕсли;
			
		Иначе
			ОписаниеСтроки = Строка.Номенклатура.Наименование;
		КонецЕсли;
		
		Если Не ПустаяСтрока(ОписаниеСтроки) Тогда
			СтрокаОписания = ТаблицаОписаний.Добавить();
			СтрокаОписания.Описание = ОписаниеСтроки;
		КонецЕсли;
		
	КонецЦикла;
	
	ТаблицаОписаний.Свернуть("Описание");
	Описание = "";
	
	Для Каждого Строка Из ТаблицаОписаний Цикл
		
		Если ПустаяСтрока(Описание) Тогда
			Описание = Строка.Описание;
		Иначе
			Описание = Описание + ", " + Строка.Описание;
		КонецЕсли;
		
	КонецЦикла;
	
	ТекущийОбъект.НазваниеГруза = Описание;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЦветаСтатусовСтраховыеСертификаты()
	
	мсвУдаляемыхЭлементов = Новый Массив();
	Для Каждого ЭлементУсловногоОформления Из СтраховыеСертификаты.УсловноеОформление.Элементы Цикл
		Если ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "Предустановленный" Тогда
			мсвУдаляемыхЭлементов.Добавить(ЭлементУсловногоОформления);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементУсловногоОформления Из мсвУдаляемыхЭлементов Цикл
		СтраховыеСертификаты.УсловноеОформление.Элементы.Удалить(ЭлементУсловногоОформления);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатСтатусы_уэ.Ссылка,
	|	уатСтатусы_уэ.Наименование,
	|	уатСтатусы_уэ.ЦветФонаПоУмолчанию,
	|	уатСтатусы_уэ.ЦветТекстаПоУмолчанию
	|ИЗ
	|	Справочник.уатСтатусы_уэ КАК уатСтатусы_уэ
	|ГДЕ
	|	НЕ уатСтатусы_уэ.ПометкаУдаления
	|	И уатСтатусы_уэ.ДействуетНаСтраховыеСертификаты";
	
	ВыборкаЦвета = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЦвета.Следующий() Цикл 
		ЦветФона   = Неопределено;
		ЦветТекста = Неопределено;
		
		ХранилищеЦветФона = ВыборкаЦвета.ЦветФонаПоУмолчанию;
		Если Не ХранилищеЦветФона = Неопределено Тогда 
			ДанныеЦветФона = ХранилищеЦветФона.Получить();
			Если Не ДанныеЦветФона = Неопределено И ТипЗнч(ДанныеЦветФона) = Тип("Цвет") Тогда
				ЦветФона = ДанныеЦветФона;
			КонецЕсли;
		КонецЕсли;
		
		ХранилищеЦветТекста = ВыборкаЦвета.ЦветТекстаПоУмолчанию;
		Если Не ХранилищеЦветТекста = Неопределено Тогда 
			ДанныеЦветТекста = ХранилищеЦветТекста.Получить();
			Если Не ДанныеЦветТекста = Неопределено И ТипЗнч(ДанныеЦветТекста) = Тип("Цвет") Тогда
				ЦветТекста = ДанныеЦветТекста;
			КонецЕсли;
		КонецЕсли;
		
		Если ЦветТекста = Неопределено И ЦветФона = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		ЭлементУсловногоОформления = СтраховыеСертификаты.УсловноеОформление.Элементы.Добавить();
		
		ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Статус");
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = ВыборкаЦвета.Ссылка;
		
		Если Не ЦветТекста = Неопределено Тогда 
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветТекста);
		КонецЕсли;
		
		Если Не ЦветФона = Неопределено Тогда 
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветФона);
		КонецЕсли;
		
		ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "Предустановленный";
		ЭлементУсловногоОформления.Представление = "По цвету статуса " + ВыборкаЦвета.Наименование;
		
		ПолеОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("Статус");
		ПолеОформления.Использование = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ТекстЗапросаСтраховыхСертификатов()
	ТекстЗапроса = "ВЫБРАТЬ
	               |	уатСтраховойСертификат_уэ.Ссылка КАК Ссылка,
	               |	уатСтраховойСертификат_уэ.ВерсияДанных КАК ВерсияДанных,
	               |	уатСтраховойСертификат_уэ.ПометкаУдаления КАК ПометкаУдаления,
	               |	уатСтраховойСертификат_уэ.Номер КАК Номер,
	               |	уатСтраховойСертификат_уэ.Дата КАК Дата,
	               |	уатСтраховойСертификат_уэ.Проведен КАК Проведен,
	               |	уатСтраховойСертификат_уэ.Организация КАК Организация,
	               |	уатСтраховойСертификат_уэ.ВходящийНомер КАК ВходящийНомер,
	               |	уатСтраховойСертификат_уэ.ДатаВходящегоДокумента КАК ДатаВходящегоДокумента,
	               |	уатСтраховойСертификат_уэ.Контрагент КАК Контрагент,
	               |	уатСтраховойСертификат_уэ.ДоговорКонтрагента КАК ДоговорКонтрагента,
	               |	уатСтраховойСертификат_уэ.Статус КАК Статус,
	               |	уатСтраховойСертификат_уэ.СтоимостьГруза КАК СтоимостьГруза,
	               |	уатСтраховойСертификат_уэ.ВалютаГрузов КАК ВалютаГрузов,
	               |	уатСтраховойСертификат_уэ.ВалютаДокумента КАК ВалютаДокумента,
	               |	уатСтраховойСертификат_уэ.Ответственный КАК Ответственный,
	               |	уатСтраховойСертификат_уэ.Комментарий КАК Комментарий,
	               |	уатСтраховойСертификат_уэ.ДокументОснование КАК ДокументОснование,
	               |	уатСтраховойСертификат_уэ.УчитыватьНДС КАК УчитыватьНДС,
	               |	уатСтраховойСертификат_уэ.СуммаВключаетНДС КАК СуммаВключаетНДС,
	               |	уатСтраховойСертификат_уэ.СуммаДокумента КАК СуммаДокумента,
	               |	уатСтраховойСертификат_уэ.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	               |	уатСтраховойСертификат_уэ.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	               |	уатСтраховойСертификат_уэ.ДатаКурса КАК ДатаКурса,
	               |	уатСтраховойСертификат_уэ.ВесБрутто КАК ВесБрутто,
	               |	уатСтраховойСертификат_уэ.Объем КАК Объем,
	               |	уатСтраховойСертификат_уэ.КоличествоМест КАК КоличествоМест,
	               |	уатСтраховойСертификат_уэ.Представление КАК Представление,
	               |	уатСтраховойСертификат_уэ.МоментВремени КАК МоментВремени
	               |ИЗ
	               |	Документ.уатСтраховойСертификат_уэ КАК уатСтраховойСертификат_уэ
	               |ГДЕ
	               |	уатСтраховойСертификат_уэ.Грузы.ЗаказНаТС = &Ссылка";
	Возврат ТекстЗапроса;
КонецФункции

&НаКлиенте
Процедура ПослеЗакрытияСозданияНовогоМаршрута(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(ДополнительныеПараметры.Форма.Объект.Ссылка) Тогда
		Объект.Маршрут = ДополнительныеПараметры.Форма.Объект.Ссылка;
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьМаршрутЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		СоздатьМаршрутФрагмент();
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Объект.Маршрут = ДополнительныеПараметры[0];
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьМаршрутФрагмент()
	Форма = ПолучитьФорму("Справочник.уатМаршруты.Форма.ФормаЭлемента",,Элементы.Маршрут);
	НаименованиеМаршрута = "";
	
	Если Объект.FTL Тогда
		Форма.Объект.ПредставлениеМаршрутаОднимПунктом = Истина;
		
		Для Каждого ТочкаМаршрута Из Объект.ПромежуточныеПункты Цикл 
			
			Если ТипЗнч(Объект.АдресНазначения) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда
				Если ТочкаМаршрута.Пункт.Пустая() Тогда
					Продолжить;
				КонецЕсли;
				КраткоеНаименование = КраткоеНаименованиеПункта(ТочкаМаршрута.Пункт);
			КонецЕсли;
			
			НоваяСтрока = Форма.Объект.Этапы.Добавить();
			НоваяСтрока.ПунктОтправления = ТочкаМаршрута.Пункт;
			НоваяСтрока.ТипТочиМаршрута = ТочкаМаршрута.ТипТочкиМаршрута;
			
			Если Не ПустаяСтрока(КраткоеНаименование) Тогда 
				Если Не ПустаяСтрока(НаименованиеМаршрута) Тогда
					НаименованиеМаршрута = НаименованиеМаршрута + " - " + КраткоеНаименование;
				Иначе
					НаименованиеМаршрута = КраткоеНаименование;
				КонецЕсли;
			Иначе
				Если Не ПустаяСтрока(НаименованиеМаршрута) Тогда
					НаименованиеМаршрута = НаименованиеМаршрута + " - " + Строка(ТочкаМаршрута.Пункт);
				Иначе
					НаименованиеМаршрута = Строка(ТочкаМаршрута.Пункт);
				КонецЕсли;
			КонецЕсли;
			
		КонецЦикла;
		
		Форма.Объект.Наименование = НаименованиеМаршрута;
		
	Иначе
		Форма.Объект.ПредставлениеМаршрутаОднимПунктом = Ложь;
		НоваяСтрока = Форма.Объект.Этапы.Добавить();
		НоваяСтрока.ПунктОтправления = Объект.АдресОтправления;
		НоваяСтрока.ПунктПрибытия = Объект.АдресНазначения;
		
		КраткоеНаименованиеОтправления = "";
		Если ТипЗнч(Объект.АдресОтправления) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда
			Если Не Объект.АдресОтправления.Пустая() Тогда
				КраткоеНаименованиеОтправления = КраткоеНаименованиеПункта(Объект.АдресОтправления);
			КонецЕсли;
		КонецЕсли;
		
		Если Не ПустаяСтрока(КраткоеНаименованиеОтправления) Тогда 
			НаименованиеМаршрута = КраткоеНаименованиеОтправления;
		Иначе
			НаименованиеМаршрута = Строка(Объект.АдресОтправления);
		КонецЕсли;
		
		КраткоеНаименованиеПрибытия = "";
		
		Если ТипЗнч(Объект.АдресНазначения) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда
			Если Не Объект.АдресНазначения.Пустая() Тогда
				КраткоеНаименованиеПрибытия = КраткоеНаименованиеПункта(Объект.АдресНазначения);
			КонецЕсли;
		КонецЕсли;
		
		Если Не ПустаяСтрока(КраткоеНаименованиеПрибытия) Тогда 
			НаименованиеМаршрута = НаименованиеМаршрута + " - " + КраткоеНаименованиеПрибытия;
		Иначе
			НаименованиеМаршрута = НаименованиеМаршрута + " - " + Строка(Объект.АдресНазначения);
		КонецЕсли;
		
		Форма.Объект.Наименование = НаименованиеМаршрута;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияСозданияНовогоМаршрута", ЭтотОбъект, Новый Структура("Форма", Форма));
	Форма.ОписаниеОповещенияОЗакрытии = Оповещение;
	
	Форма.Открыть();
КонецПроцедуры

&НаСервере
Функция КраткоеНаименованиеПункта(Пункт)
	Возврат Пункт.ШифрПункта;
КонецФункции

&НаСервере
Функция ПоискМаршрута(МассивРезультатов, ПервыйВызов)
	
	ПоставкаКорп = ВариантПоставкиКОРП;
	
	ТекстОбычный = 
	"ВЫБРАТЬ
	|	уатМаршруты.Ссылка КАК Маршрут
	|ИЗ
	|	Справочник.уатМаршруты.Этапы КАК уатМаршрутыЭтапыОтправления
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатМаршруты.Этапы КАК уатМаршрутыЭтапыПрибытия
	|		ПО уатМаршрутыЭтапыОтправления.Ссылка = уатМаршрутыЭтапыПрибытия.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатМаршруты КАК уатМаршруты
	|		ПО уатМаршрутыЭтапыОтправления.Ссылка = уатМаршруты.Ссылка
	|ГДЕ
	|	уатМаршрутыЭтапыОтправления.ПунктОтправления = &ПунктОтправления
	|	И уатМаршрутыЭтапыОтправления.ТипТочиМаршрута = ЗНАЧЕНИЕ(Перечисление.уатТипыТочекМаршрута.Погрузка)
	|	И уатМаршрутыЭтапыПрибытия.ПунктОтправления = &ПунктПрибытия
	|	И уатМаршрутыЭтапыПрибытия.ТипТочиМаршрута = ЗНАЧЕНИЕ(Перечисление.уатТипыТочекМаршрута.Разгрузка)
	|	И уатМаршруты.ПредставлениеМаршрутаОднимПунктом = ИСТИНА
	|	И уатМаршруты.Статус = ЗНАЧЕНИЕ(Перечисление.уатСтатусыДействия.Действует)
	|	И уатМаршруты.ПометкаУдаления = ЛОЖЬ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	уатМаршруты.Ссылка
	|ИЗ
	|	Справочник.уатМаршруты.Этапы КАК уатМаршрутыЭтапы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатМаршруты КАК уатМаршруты
	|		ПО уатМаршрутыЭтапы.Ссылка = уатМаршруты.Ссылка
	|ГДЕ
	|	уатМаршруты.ПредставлениеМаршрутаОднимПунктом = ЛОЖЬ
	|	И уатМаршрутыЭтапы.ПунктОтправления = &ПунктОтправления
	|	И уатМаршрутыЭтапы.ПунктПрибытия = &ПунктПрибытия
	|	И уатМаршруты.Статус = ЗНАЧЕНИЕ(Перечисление.уатСтатусыДействия.Действует)";
	
	ПодборГеозон = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.ПоискМаршрутаПоГеозонам);
	
	Запрос = Новый Запрос;
	Если Не Объект.FTL Тогда
		Если ПодборГеозон И ПоставкаКорп И ПервыйВызов Тогда
			Запрос.Текст = ТекстЗапросаПоискаМаршрутаПоГеозонам();
		Иначе
			Запрос.Текст = ТекстОбычный;
		КонецЕсли;
		Запрос.УстановитьПараметр("ПунктОтправления", Объект.АдресОтправления);
		Запрос.УстановитьПараметр("ПунктПрибытия", Объект.АдресНазначения);
		
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
		
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
						
			Если ПодборГеозон И ПоставкаКорп И ПервыйВызов И ВыборкаДетальныеЗаписи.Маршрут.ПредставлениеМаршрутаОднимПунктом Тогда
				Если уатОбщегоНазначения_уэ.ГеозонаПунктаНазначения(ВыборкаДетальныеЗаписи.Маршрут.Этапы[1].ПунктОтправления) = 
					уатОбщегоНазначения_уэ.ГеозонаПунктаНазначения(Объект.АдресНазначения) Тогда
					МассивРезультатов.Добавить(ВыборкаДетальныеЗаписи.Маршрут);
				КонецЕсли;
			Иначе
				МассивРезультатов.Добавить(ВыборкаДетальныеЗаписи.Маршрут);
			КонецЕсли;
			
		КонецЦикла;
		
	Иначе
		Запрос.Текст = ТекстЗапросаПоискаМаршрутаПоФТЛ();
		
		КоличествоПунктов = Объект.ПромежуточныеПункты.Количество();
		ТЧ = Объект.ПромежуточныеПункты.Выгрузить(,"Пункт, ТипТочкиМаршрута");
		
		РезультатЗапроса = Запрос.Выполнить();
		ВыборкаСсылка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
		
		Пока ВыборкаСсылка.Следующий() Цикл
			Если ВыборкаСсылка.ПунктОтправления <> КоличествоПунктов Тогда
				Продолжить;
			КонецЕсли;
			
			ВыборкаДетальныеЗаписи = ВыборкаСсылка.Выбрать();
			
			Сч = 0;
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				Если ВыборкаДетальныеЗаписи.ТипТочиМаршрута = ТЧ[Сч].ТипТочкиМаршрута Тогда
					Если ПодборГеозон И ПоставкаКорп И ПервыйВызов Тогда
						Если ВыборкаДетальныеЗаписи.Геозона = уатОбщегоНазначения_уэ.ГеозонаПунктаНазначения(ТЧ[Сч].Пункт) Тогда
							Сч = Сч + 1;
						КонецЕсли;
					Иначе
						Если ВыборкаДетальныеЗаписи.ПунктОтправления = ТЧ[Сч].Пункт Тогда
							Сч = Сч + 1;
						КонецЕсли;
					КонецЕсли;
				Иначе
					Прервать;
				КонецЕсли;
				
				Если Сч = КоличествоПунктов Тогда
					МассивРезультатов.Добавить(ВыборкаСсылка.Маршрут);
				КонецЕсли;
			КонецЦикла;
			
		КонецЦикла;
		
		// Заполнение парными
		Если Тч.Количество() <> 0 И Тч.Количество() % 2 = 0 И ПервыйВызов Тогда
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	уатМаршруты.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.уатМаршруты.Этапы КАК уатМаршрутыЭтапы
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатМаршруты КАК уатМаршруты
			|		ПО уатМаршрутыЭтапы.Ссылка = уатМаршруты.Ссылка
			|ГДЕ
			|	уатМаршруты.ПредставлениеМаршрутаОднимПунктом = ЛОЖЬ
			|	И уатМаршрутыЭтапы.ПунктОтправления = &ПунктОтправления
			|	И уатМаршрутыЭтапы.ПунктПрибытия = &ПунктПрибытия
			|	И уатМаршруты.ПометкаУдаления = ЛОЖЬ
			|	И уатМаршруты.Статус = ЗНАЧЕНИЕ(Перечисление.уатСтатусыДействия.Действует)";
			
			Запрос.УстановитьПараметр("ПунктОтправления", Объект.ПромежуточныеПункты[0].Пункт);
			Запрос.УстановитьПараметр("ПунктПрибытия", Объект.ПромежуточныеПункты[1].Пункт);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				
				ЭтапыМаршрута = ВыборкаДетальныеЗаписи.Ссылка.Этапы.Выгрузить();
				Если ЭтапыМаршрута.Количество() <> Тч.Количество()/2 Тогда
					Продолжить
				КонецЕсли;
				
				Сч = 0;
				Сч2 = 0;
				
				Пока Истина Цикл
					Если Тч[Сч].Пункт = ВыборкаДетальныеЗаписи.Ссылка.Этапы[Сч2].ПунктОтправления 
						И Тч[Сч].ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка 
						И Тч[Сч+1].Пункт = ВыборкаДетальныеЗаписи.Ссылка.Этапы[Сч2].ПунктПрибытия 
						И Тч[Сч+1].ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка Тогда
						Сч = Сч + 2;
						Сч2 = Сч2 +1;
						
						Если Сч = ТЧ.Количество() Тогда
							МассивРезультатов.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
							Прервать;
						КонецЕсли;
					Иначе
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ
			|	ПунктыОтправления.ПунктНазначения КАК ПунктНазначения
			|ПОМЕСТИТЬ ПунктыОтправления
			|ИЗ
			|	РегистрСведений.уатПривязкаПунктовНазначенияКГеозонам_уэ КАК ГеозонаОтправления
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатПривязкаПунктовНазначенияКГеозонам_уэ КАК ПунктыОтправления
			|		ПО ГеозонаОтправления.Геозона = ПунктыОтправления.Геозона
			|ГДЕ
			|	ГеозонаОтправления.ПунктНазначения = &ПунктОтправления
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	ПунктыНазначения.ПунктНазначения КАК ПунктНазначения
			|ПОМЕСТИТЬ ПунктыНазначения
			|ИЗ
			|	РегистрСведений.уатПривязкаПунктовНазначенияКГеозонам_уэ КАК ГеозонаНазначения
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатПривязкаПунктовНазначенияКГеозонам_уэ КАК ПунктыНазначения
			|		ПО ГеозонаНазначения.Геозона = ПунктыНазначения.Геозона
			|ГДЕ
			|	ГеозонаНазначения.ПунктНазначения = &ПунктПрибытия
			|;
			|
			|////////////////////////////////////////////////////////////////////////////////
			|ВЫБРАТЬ
			|	уатМаршруты.Ссылка КАК Ссылка
			|ИЗ
			|	Справочник.уатМаршруты.Этапы КАК уатМаршрутыЭтапы
			|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатМаршруты КАК уатМаршруты
			|		ПО уатМаршрутыЭтапы.Ссылка = уатМаршруты.Ссылка,
			|	ПунктыОтправления КАК ПунктыОтправления,
			|	ПунктыНазначения КАК ПунктыНазначения
			|ГДЕ
			|	уатМаршрутыЭтапы.ПунктОтправления = ПунктыОтправления.ПунктНазначения
			|	И уатМаршрутыЭтапы.ПунктПрибытия = ПунктыНазначения.ПунктНазначения
			|	И уатМаршруты.ПредставлениеМаршрутаОднимПунктом = ЛОЖЬ
			|	И уатМаршруты.Статус = ЗНАЧЕНИЕ(Перечисление.уатСтатусыДействия.Действует)
			|	И уатМаршруты.ПометкаУдаления = ЛОЖЬ
			|	И уатМаршруты.Статус = ЗНАЧЕНИЕ(Перечисление.уатСтатусыДействия.Действует)";
			
			Запрос.УстановитьПараметр("ПунктОтправления", Объект.ПромежуточныеПункты[0].Пункт);
			Запрос.УстановитьПараметр("ПунктПрибытия", Объект.ПромежуточныеПункты[1].Пункт);
			
			РезультатЗапроса = Запрос.Выполнить();
			
			ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
			
			Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
				ЭтапыМаршрута = ВыборкаДетальныеЗаписи.Ссылка.Этапы.Выгрузить();
				Если ЭтапыМаршрута.Количество() <> Тч.Количество()/2 Тогда
					Продолжить
				КонецЕсли;
				
				Сч = 0;
				Сч2 = 0;
				
				Пока ПодборГеозон И ПервыйВызов И ПоставкаКорп Цикл
					Если уатОбщегоНазначения_уэ.ГеозонаПунктаНазначения(Тч[Сч].Пункт) = 
						уатОбщегоНазначения_уэ.ГеозонаПунктаНазначения(ВыборкаДетальныеЗаписи.Ссылка.Этапы[Сч2].ПунктОтправления) 
						И Тч[Сч].ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка 
						И уатОбщегоНазначения_уэ.ГеозонаПунктаНазначения(Тч[Сч+1].Пункт) = 
						уатОбщегоНазначения_уэ.ГеозонаПунктаНазначения(ВыборкаДетальныеЗаписи.Ссылка.Этапы[Сч2].ПунктПрибытия) 
						И Тч[Сч+1].ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка Тогда
						Сч = Сч + 2;
						Сч2 = Сч2 +1;
						
						Если Сч = ТЧ.Количество() Тогда
							МассивРезультатов.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
							Прервать;
						КонецЕсли;
					Иначе
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если ПодборГеозон И ПоставкаКорп И ПервыйВызов Тогда
		МассивРезультатов = ПоискМаршрута(МассивРезультатов, Ложь);
	КонецЕсли;
	
	Возврат МассивРезультатов;
	
КонецФункции

&НаСервере
Функция ТекстЗапросаПоискаМаршрутаПоГеозонам();
	ТекстГеозоны = 
	"ВЫБРАТЬ
	|	ПунктыОтправления.ПунктНазначения КАК ПунктНазначения
	|ПОМЕСТИТЬ ПунктыОтправления
	|ИЗ
	|	РегистрСведений.уатПривязкаПунктовНазначенияКГеозонам_уэ КАК ГеозонаОтправления
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатПривязкаПунктовНазначенияКГеозонам_уэ КАК ПунктыОтправления
	|		ПО ГеозонаОтправления.Геозона = ПунктыОтправления.Геозона
	|ГДЕ
	|	ГеозонаОтправления.ПунктНазначения = &ПунктОтправления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ПунктыНазначения.ПунктНазначения КАК ПунктНазначения
	|ПОМЕСТИТЬ ПунктыНазначения
	|ИЗ
	|	РегистрСведений.уатПривязкаПунктовНазначенияКГеозонам_уэ КАК ГеозонаНазначения
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатПривязкаПунктовНазначенияКГеозонам_уэ КАК ПунктыНазначения
	|		ПО ГеозонаНазначения.Геозона = ПунктыНазначения.Геозона
	|ГДЕ
	|	ГеозонаНазначения.ПунктНазначения = &ПунктПрибытия
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	уатМаршруты.Ссылка КАК Маршрут
	|ИЗ
	|	Справочник.уатМаршруты.Этапы КАК уатМаршрутыЭтапы
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатМаршруты КАК уатМаршруты
	|		ПО уатМаршрутыЭтапы.Ссылка = уатМаршруты.Ссылка,
	|	ПунктыОтправления КАК ПунктыОтправления,
	|	ПунктыНазначения КАК ПунктыНазначения
	|ГДЕ
	|	уатМаршрутыЭтапы.ПунктОтправления = ПунктыОтправления.ПунктНазначения
	|	И уатМаршрутыЭтапы.ПунктПрибытия = ПунктыНазначения.ПунктНазначения
	|	И уатМаршруты.ПредставлениеМаршрутаОднимПунктом = ЛОЖЬ
	|	И уатМаршруты.Статус = ЗНАЧЕНИЕ(Перечисление.уатСтатусыДействия.Действует)
	|	И уатМаршруты.ПометкаУдаления = ЛОЖЬ
	|	И уатМаршруты.Статус = ЗНАЧЕНИЕ(Перечисление.уатСтатусыДействия.Действует)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	уатМаршруты.Ссылка
	|ИЗ
	|	ПунктыОтправления КАК ПунктыОтправления,
	|	ПунктыНазначения КАК ПунктыНазначения,
	|	Справочник.уатМаршруты.Этапы КАК уатМаршрутыЭтапыНазначения,
	|	Справочник.уатМаршруты.Этапы КАК уатМаршрутыЭтапыОтправления
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатМаршруты КАК уатМаршруты
	|		ПО уатМаршрутыЭтапыОтправления.Ссылка = уатМаршруты.Ссылка
	|ГДЕ
	|	уатМаршруты.ПредставлениеМаршрутаОднимПунктом = ИСТИНА
	|	И уатМаршрутыЭтапыОтправления.ТипТочиМаршрута = ЗНАЧЕНИЕ(Перечисление.уатТипыТочекМаршрута.Погрузка)
	|	И уатМаршрутыЭтапыОтправления.ПунктОтправления = ПунктыОтправления.ПунктНазначения
	|	И уатМаршрутыЭтапыНазначения.ПунктОтправления = ПунктыНазначения.ПунктНазначения
	|	И уатМаршрутыЭтапыНазначения.ТипТочиМаршрута = ЗНАЧЕНИЕ(Перечисление.уатТипыТочекМаршрута.Разгрузка)
	|	И уатМаршруты.ПометкаУдаления = ЛОЖЬ
	|	И уатМаршруты.Статус = ЗНАЧЕНИЕ(Перечисление.уатСтатусыДействия.Действует)";
	
	Возврат ТекстГеозоны;
	
КонецФункции

&НаСервере
Функция ТекстЗапросаПоискаМаршрутаПоФТЛ()
	
	ПоставкаКорп = ВариантПоставкиКОРП;
	ПодборГеозон = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация, ПланыВидовХарактеристик.уатПраваИНастройки.ПоискМаршрутаПоГеозонам);
	
	Если ПоставкаКорп И ПодборГеозон Тогда
		
		ТекстФТЛ = "ВЫБРАТЬ
		|	уатМаршрутыЭтапы.ПунктОтправления КАК ПунктОтправления,
		|	уатМаршрутыЭтапы.ТипТочиМаршрута КАК ТипТочиМаршрута,
		|	уатМаршруты.Ссылка КАК Маршрут,
		|	уатПривязкаПунктовНазначенияКГеозонам_уэ.Геозона КАК Геозона
		|ИЗ
		|	Справочник.уатМаршруты.Этапы КАК уатМаршрутыЭтапы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатМаршруты КАК уатМаршруты
		|		ПО уатМаршрутыЭтапы.Ссылка = уатМаршруты.Ссылка
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатПривязкаПунктовНазначенияКГеозонам_уэ КАК уатПривязкаПунктовНазначенияКГеозонам_уэ
		|		ПО (уатПривязкаПунктовНазначенияКГеозонам_уэ.Геозона В
		|				(ВЫБРАТЬ ПЕРВЫЕ 1
		|					уатПривязкаПунктовНазначенияКГеозонам.Геозона КАК Геозона
		|				ИЗ
		|					РегистрСведений.уатПривязкаПунктовНазначенияКГеозонам_уэ КАК уатПривязкаПунктовНазначенияКГеозонам
		|				ГДЕ
		|					уатПривязкаПунктовНазначенияКГеозонам.ПунктНазначения = уатМаршрутыЭтапы.ПунктОтправления
		|				УПОРЯДОЧИТЬ ПО
		|					уатПривязкаПунктовНазначенияКГеозонам.Геозона.ПриоритетПриРасчетеПоТарифам УБЫВ,
		|					уатПривязкаПунктовНазначенияКГеозонам.Геозона.Код))
		|			И уатМаршрутыЭтапы.ПунктОтправления = уатПривязкаПунктовНазначенияКГеозонам_уэ.ПунктНазначения
		|ГДЕ
		|	уатМаршруты.ПредставлениеМаршрутаОднимПунктом = ИСТИНА
		|	И уатМаршруты.ПометкаУдаления = ЛОЖЬ
		|	И уатМаршруты.Статус = ЗНАЧЕНИЕ(Перечисление.уатСтатусыДействия.Действует)
		|
		|УПОРЯДОЧИТЬ ПО
		|	уатМаршрутыЭтапы.НомерСтроки
		|ИТОГИ
		|	КОЛИЧЕСТВО(ПунктОтправления)
		|ПО
		|	Маршрут"
		
	Иначе
		
		ТекстФТЛ = "ВЫБРАТЬ
		|	уатМаршрутыЭтапы.ПунктОтправления КАК ПунктОтправления,
		|	уатМаршрутыЭтапы.ТипТочиМаршрута КАК ТипТочиМаршрута,
		|	уатМаршруты.Ссылка КАК Маршрут
		|ИЗ
		|	Справочник.уатМаршруты.Этапы КАК уатМаршрутыЭтапы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатМаршруты КАК уатМаршруты
		|		ПО уатМаршрутыЭтапы.Ссылка = уатМаршруты.Ссылка
		|ГДЕ
		|	уатМаршруты.ПредставлениеМаршрутаОднимПунктом = ИСТИНА
		|	И уатМаршруты.ПометкаУдаления = ЛОЖЬ
		|	И уатМаршруты.Статус = ЗНАЧЕНИЕ(Перечисление.уатСтатусыДействия.Действует)
		|
		|УПОРЯДОЧИТЬ ПО
		|	уатМаршрутыЭтапы.НомерСтроки
		|ИТОГИ
		|	КОЛИЧЕСТВО(ПунктОтправления)
		|ПО
		|	Маршрут";
		
	КонецЕсли;
			   
	
	Возврат ТекстФТЛ;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПараметрыОткрытияОтчетАнализОтгрузки(Ссылка)
	Возврат Документы.уатЗаказГрузоотправителя.ПолучитьПараметрыОткрытияОтчетАнализОтгрузки(Ссылка);
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПараметрыОткрытияОтчетАнализПриемки(Ссылка)
	Возврат Документы.уатЗаказГрузоотправителя.ПолучитьПараметрыОткрытияОтчетАнализПриемки(Ссылка);
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПараметрыОткрытияОтчетОстаткиГрузовНаСкладахКомплектации(Ссылка)
	Возврат Документы.уатЗаказГрузоотправителя.ПолучитьПараметрыОткрытияОтчетОстаткиГрузовНаСкладахКомплектации(Ссылка);
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПараметрыОткрытияОтчетГрузыВРейсах(Ссылка)
	Возврат Документы.уатЗаказГрузоотправителя.ПолучитьПараметрыОткрытияОтчетГрузыВРейсах(Ссылка);
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПараметрыОткрытияОтчетИсторияОперацийСГрузом(Ссылка)
	Возврат Документы.уатЗаказГрузоотправителя.ПолучитьПараметрыОткрытияОтчетИсторияОперацийСГрузом(Ссылка);
КонецФункции

&НаКлиенте
Процедура РазбитьНаЭтапыОтветНаВопросЗаписиДокумента(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.ОК Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не (ПроверитьЗаполнение() И Записать()) Тогда 
		Возврат;
	КонецЕсли;
	
	РазбитьНаЭтапы(Элементы.ТабЭтапыЗаказаРазбитьНаЭтапы);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСобытиеОтветНаВопросЗаписиДокумента(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если НЕ РезультатВопроса = КодВозвратаДиалога.ОК Тогда 
		Возврат;
	КонецЕсли;
	
	Если НЕ (ПроверитьЗаполнение() И Записать()) Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = Новый Структура("ЭтоШаблонПеревозки,ОткрытИзДокумента,ДокументПеревозки",
		Объект.ЭтоШаблонПеревозки, Истина, Объект.Ссылка);
	ОткрытьФорму("РегистрСведений.уатСобытияПоПеревозке_уэ.ФормаЗаписи", ПараметрыОткрытия, Объект.Ссылка);
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьНаЭтапыПослеЗаписиДокумента();
	
	ПараметрыОткрытия = Новый Структура;
	
	ПараметрыОткрытия.Вставить("ОтправлениеС",              Объект.ОтправлениеС);
	ПараметрыОткрытия.Вставить("ОтправлениеПо",             Объект.ОтправлениеПо);
	ПараметрыОткрытия.Вставить("ДоставкаС",                 Объект.ДоставкаС);
	ПараметрыОткрытия.Вставить("ДоставкаПо",                Объект.ДоставкаПо);
	ПараметрыОткрытия.Вставить("АдресОтправления",          Объект.АдресОтправления);
	ПараметрыОткрытия.Вставить("АдресНазначения",           Объект.АдресНазначения);
	ПараметрыОткрытия.Вставить("Маршрут",                   Объект.Маршрут);
	ПараметрыОткрытия.Вставить("ЭтоШаблонПеревозки",        Объект.ЭтоШаблонПеревозки);
	ПараметрыОткрытия.Вставить("ИспользоватьВременныеОкна", Истина);
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("РазбитьНаЭтапыПослеРазбиения", ЭтаФорма);
	ОткрытьФорму("Документ.уатЗаказГрузоотправителя.Форма.ФормаРазбиенияНаЭтапы", ПараметрыОткрытия, ЭтаФорма, , , ,
		ОповещениеОЗакрытии ,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура РазбитьНаЭтапыОтветНаВопросУдаленияЭтапов(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
		ПометитьВсеЭтапыНаУдаление();
		ОбновитьДанныеМультимодальногоЗаказа();
		РазбитьНаЭтапы(Элементы.ТабЭтапыЗаказаРазбитьНаЭтапы);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПометитьВсеЭтапыНаУдаление()
	Для Каждого ТекСтрокаЭтапы Из ТабЭтапыЗаказа Цикл
		ПометитьНаУдалениеСервер(ТекСтрокаЭтапы.Этап);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура РазбитьНаЭтапыПослеРазбиения(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Свойство("АдресОтправления") И Результат.АдресОтправления <> Объект.АдресОтправления Тогда
		Объект.АдресОтправления = Результат.АдресОтправления;
		АдресОтправленияСтрока = Объект.АдресОтправления;
		РазрешеноИспользоватьРасписание = Ложь;
		ОбновитьДатыОтправления(РазрешеноИспользоватьРасписание);
		АдресПриИзмененииЗавершение();
	КонецЕсли;
	Если Результат.Свойство("АдресНазначения") И Результат.АдресНазначения <> Объект.АдресНазначения Тогда
		Объект.АдресНазначения = Результат.АдресНазначения;
		АдресНазначенияСтрока = Объект.АдресНазначения;
		РазрешеноИспользоватьРасписание = Ложь;
		ОбновитьДатыНазначения(РазрешеноИспользоватьРасписание);
		АдресПриИзмененииЗавершение();
	КонецЕсли;
	
	Результат.Свойство("ОтправлениеС",  Объект.ОтправлениеС);
	Результат.Свойство("ОтправлениеПо", Объект.ОтправлениеПо);
	Результат.Свойство("ДоставкаС",     Объект.ДоставкаС);
	Результат.Свойство("ДоставкаПо",    Объект.ДоставкаПо);
	
	// Создание новых этапов
	Если Результат.Свойство("МассивЭтапов") Тогда
		ТекстОшибки = "";
		ДлительнаяОперация = РазбитьНаЭтапыДлительнаяОперацияСервер(Результат.МассивЭтапов, ТекстОшибки);
		НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтаФорма);
		НастройкиОжидания.ВыводитьОкноОжидания       = Ложь;
		НастройкиОжидания.ВыводитьПрогрессВыполнения = Ложь;
		Обработчик = Новый ОписаниеОповещения("РазбитьНаЭтапыДлительнаяОперацияЗавершение", ЭтотОбъект);
	   	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, НастройкиОжидания);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция РазбитьНаЭтапыДлительнаяОперацияСервер(МассивЭтапов, ТекстОшибки)
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Создание этапов'");
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	ПараметрыПроцедуры = Новый Структура("МассивЭтапов, МультимодальныйРодительскийЗаказ", МассивЭтапов, Объект.Ссылка);
	Возврат ДлительныеОперации.ВыполнитьВФоне(
		"уатОбщегоНазначения_уэ.СоздатьЭтапыМультимодальногоЗаказаДлительнаяОперация",
		ПараметрыПроцедуры,
		ПараметрыВыполнения);
	
КонецФункции

&НаКлиенте
Процедура РазбитьНаЭтапыДлительнаяОперацияЗавершение(Операция, ДополнительныеПараметры) Экспорт
	
	Если Операция = Неопределено Тогда
		
	Иначе
		Если Операция.Статус = "Выполнено" Тогда
			Если ЭтоАдресВременногоХранилища(Операция.АдресРезультата) Тогда
				Данные = ПолучитьИзВременногоХранилища(Операция.АдресРезультата);
				Если ТипЗнч(Данные) = Тип("Структура") Тогда
					Если Данные.Свойство("ТекстОшибки") Тогда
						Если ЗначениеЗаполнено(Данные.ТекстОшибки) Тогда
							ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Данные.ТекстОшибки);
							Возврат;
						Иначе
							ОбновитьДанныеМультимодальногоЗаказа();
						КонецЕсли;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
		Иначе
			ВызватьИсключение Операция.КраткоеПредставлениеОшибки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборДатПоРасписаниюПослеВыбора(Результат, ДопПараметры) Экспорт
	ЗаполнитьДатыПоРасписанию(Результат);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатыПоРасписанию(ДанныеРасписания)
	Если ТипЗнч(ДанныеРасписания) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ПустаяДата = Дата('00010101');
	СекундВДне = 24*60*60;
	
	// Если данные по времени прибытия по расписанию не заполнены, то берем окно из пункта
	Если ДанныеРасписания.ВремяОтправленияС = ПустаяДата И ДанныеРасписания.ВремяОтправленияПо = ПустаяДата Тогда
		ВремяДоступности = уатОбщегоНазначения_проф.ПолучитьВремяДоступностиПункта(Объект.АдресОтправления, Объект.Грузоотправитель);
		ДанныеРасписания.ВремяОтправленияС  = ВремяДоступности.ВремяДоступностиС;
		Если ЗначениеЗаполнено(ВремяДоступности.ВремяДоступностиПо) Тогда
			ДанныеРасписания.ВремяОтправленияПо = ВремяДоступности.ВремяДоступностиПо;
		Иначе
			ДанныеРасписания.ВремяОтправленияПо = '00010101235900';
		КонецЕсли;
	КонецЕсли;
	Если ДанныеРасписания.ВремяПрибытияС = ПустаяДата И ДанныеРасписания.ВремяПрибытияПо = ПустаяДата Тогда
		ВремяДоступности = уатОбщегоНазначения_проф.ПолучитьВремяДоступностиПункта(Объект.АдресНазначения, Объект.Грузополучатель);
		ДанныеРасписания.ВремяПрибытияС  = ВремяДоступности.ВремяДоступностиС;
		Если ЗначениеЗаполнено(ВремяДоступности.ВремяДоступностиПо) Тогда
			ДанныеРасписания.ВремяПрибытияПо = ВремяДоступности.ВремяДоступностиПо;
		Иначе
			ДанныеРасписания.ВремяПрибытияПо = '00010101235900';
		КонецЕсли;
	КонецЕсли;
	
	//Если Объект.ЭтоШаблонПеревозки Тогда
	//	Объект.ОтправлениеС = ДанныеРасписания.ВремяОтправленияС;
	//	Объект.ВремяОтправленияПо = ДанныеРасписания.ВремяОтправленияПо;
	//	Объект.ДоставкаС = ДанныеРасписания.ВремяПрибытияС;
	//	Объект.ДоставкаПо = ДанныеРасписания.ВремяПрибытияПо;
	//Иначе
		Объект.ОтправлениеС = ДанныеРасписания.ДатаОтправления + (ДанныеРасписания.ВремяОтправленияС - ПустаяДата);
		Если ДанныеРасписания.ВремяОтправленияС > ДанныеРасписания.ВремяОтправленияПо Тогда
			// Обработка временного окна, переходящего через полночь
			Объект.ОтправлениеПо = ДанныеРасписания.ДатаОтправления + (ДанныеРасписания.ВремяОтправленияПо - ПустаяДата) + СекундВДне;
		Иначе
			Объект.ОтправлениеПо = ДанныеРасписания.ДатаОтправления + (ДанныеРасписания.ВремяОтправленияПо - ПустаяДата);
		КонецЕсли;
		Объект.ДоставкаС = ДанныеРасписания.ДатаПрибытия + (ДанныеРасписания.ВремяПрибытияС - ПустаяДата);
		Если ДанныеРасписания.ВремяПрибытияС > ДанныеРасписания.ВремяПрибытияПо Тогда
			// Обработка временного окна, переходящего через полночь
			Объект.ДоставкаПо = ДанныеРасписания.ДатаПрибытия + (ДанныеРасписания.ВремяПрибытияПо - ПустаяДата) + СекундВДне;
		Иначе
			Объект.ДоставкаПо = ДанныеРасписания.ДатаПрибытия + (ДанныеРасписания.ВремяПрибытияПо - ПустаяДата);
		КонецЕсли;
		Объект.ПрибытиеПоРасписанию = Объект.ДоставкаС;
	//КонецЕсли;
	
	Если ДанныеРасписания.FTL <> Объект.FTL Тогда
		FTL = ДанныеРасписания.FTL;
		FTLПриИзмененииЗавершение();
		Если Объект.FTL И ЗначениеЗаполнено(Объект.Маршрут) Тогда
			// Заполнение таблицы пунктов по маршруту
			УстановитьДанныеПоМаршрутуСервер();
			ПромежуточныеПунктыПриИзменении(Элементы.ПромежуточныеПункты);
		КонецЕсли;
	КонецЕсли;
	
	// Перезаполняем плановое время прибытия в таблице "Промежуточные пункты" по данным расписания.
	Если Объект.FTL И ЗначениеЗаполнено(Объект.Маршрут) Тогда
		ДанныеРасписания.Вставить("Маршрут", Объект.Маршрут);
		ТаблицаFTL = уатОбщегоНазначения_уэ.ПолучитьДанныеFTLЗаказаПоРасписанию(ДанныеРасписания);
		Для Сч = 0 По Мин(ПромежуточныеПункты.Количество()-1, ТаблицаFTL.Количество()-1) Цикл
			Если ПромежуточныеПункты[Сч].Пункт = ТаблицаFTL[Сч].Пункт Тогда
				ПромежуточныеПункты[Сч].ПрибытиеПлан = ТаблицаFTL[Сч].ПрибытиеПлан;
				ПромежуточныеПункты[Сч].УбытиеПлан = ТаблицаFTL[Сч].УбытиеПлан;
				ПромежуточныеПункты[Сч].ОкноС = ТаблицаFTL[Сч].ПрибытиеПлан;
				ПромежуточныеПункты[Сч].ОкноПо = ТаблицаFTL[Сч].УбытиеПлан;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли Объект.FTL Тогда
		// Заполнение по пунктам
		Для Сч = 1 По ПромежуточныеПункты.Количество()-2 Цикл
			ПромежуточныеПункты[Сч].ПрибытиеПлан = ПустаяДата;
			ПромежуточныеПункты[Сч].УбытиеПлан = ПустаяДата;
			ПромежуточныеПункты[Сч].ОкноС = ПустаяДата;
			ПромежуточныеПункты[Сч].ОкноПо = ПустаяДата;
		КонецЦикла;
		Если ПромежуточныеПункты.Количество() > 0 Тогда
			ПромежуточныеПункты[0].ПрибытиеПлан = Объект.ОтправлениеС;
			ПромежуточныеПункты[0].УбытиеПлан = Объект.ОтправлениеПо;
			ПромежуточныеПункты[0].ОкноС = Объект.ОтправлениеС;
			ПромежуточныеПункты[0].ОкноПо = Объект.ОтправлениеПо;
		КонецЕсли;
		Если ПромежуточныеПункты.Количество() > 1 Тогда
			ПромежуточныеПункты[ПромежуточныеПункты.Количество()-1].ПрибытиеПлан = Объект.ДоставкаС;
			ПромежуточныеПункты[ПромежуточныеПункты.Количество()-1].УбытиеПлан =  Объект.ДоставкаПо;
			ПромежуточныеПункты[ПромежуточныеПункты.Количество()-1].ОкноС = Объект.ДоставкаС;
			ПромежуточныеПункты[ПромежуточныеПункты.Количество()-1].ОкноПо = Объект.ДоставкаПо;
		КонецЕсли;
	Иначе
		АдресОтправленияСтрока = Объект.АдресОтправления;
		АдресНазначенияСтрока = Объект.АдресНазначения;
		мОтправлениеС  = Объект.ОтправлениеС;
		мОтправлениеПо = Объект.ОтправлениеПо;
		мДоставкаС     = Объект.ДоставкаС;
		мДоставкаПо    = Объект.ДоставкаПо;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте 
Функция ПодобратьДанныеРасписания()
	СтруктураПараметров = Новый Структура("Маршрут, АдресОтправления, АдресНазначения, Грузоотправитель, Грузополучатель");
	СтруктураПараметров.Маршрут = Объект.Маршрут;
	СтруктураПараметров.АдресОтправления = Объект.АдресОтправления;
	СтруктураПараметров.АдресНазначения = Объект.АдресНазначения;
	СтруктураПараметров.Грузоотправитель = Объект.Грузоотправитель;
	СтруктураПараметров.Грузополучатель = Объект.Грузополучатель;
	Если ЗначениеЗаполнено(Объект.Дата) Тогда
		НачалоПериода = Объект.Дата;
	Иначе
		НачалоПериода = Неопределено;
	КонецЕсли;
	ДанныеРасписания = уатОбщегоНазначения_уэ.БлижайшийДоступныйРейс(НачалоПериода,, СтруктураПараметров);
	Возврат ДанныеРасписания;
КонецФункции

&НаКлиенте 
Процедура АдресПриИзмененииЗавершение()
	ОчиститьВремяРасстояниеМеждуПунктами();
	ПересчитатьСтоянкуИКоординатыПункта(Истина);
	Если НЕ Объект.FTL Тогда 
		ОтобразитьСтатусыАдресов();
		РассчитатьПоказателиСервер(Истина);
		ОбновитьВалютуВТЧГрузовТоваровСервер();
		ОбновитьПараметрВыработкиВременныйОказ();
		ОбновитьПараметрВыработкиВременныйПолуч();
		ОбновитьНадписьИтоги();
	КонецЕсли;
КонецПроцедуры
	
&НаКлиенте
Процедура ОбновитьДатыОтправления(РазрешеноИспользоватьРасписание = Ложь)
	
	ПустаяДата = Дата('00010101');
	СекундВДне = 24*60*60;
	Объект.ПрибытиеПоРасписанию = ПустаяДата;
	
	Если ЗначениеЗаполнено(Объект.АдресОтправления) Тогда
		
		ВыбранноеЗначение = Объект.АдресОтправления;
		
		мВремяС  = 0; 
		мВремяПо = 0; 
		ДанныеРасписания = Неопределено;
		
		Если ТипЗнч(ВыбранноеЗначение) = Тип("Строка") тогда
			мВыбЗнач = ВыбранноеЗначение;
			
		ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.уатПунктыНазначения") тогда 
			мВыбЗнач = ВыбранноеЗначение;
			Объект.СтоянкаПунктОтправления = ПолучитьВремяСтоянкиПоУмолчанию(ВыбранноеЗначение);
			
			// Подбор времени прибытия/убытия по расписанию
			Если РазрешеноИспользоватьРасписание Тогда
				ДанныеРасписания = ПодобратьДанныеРасписания();
			КонецЕсли;
			Если ДанныеРасписания <> Неопределено Тогда
				ЗаполнитьДатыПоРасписанию(ДанныеРасписания);
			Иначе
				ВремяДоступности = уатОбщегоНазначения_проф.ПолучитьВремяДоступностиПункта(мВыбЗнач, Объект.Грузоотправитель);
				мВремяС  = ВремяДоступности.ВремяДоступностиС;
				мВремяПо = ВремяДоступности.ВремяДоступностиПо;
			КонецЕсли;
		Иначе
			Возврат;
		КонецЕсли;
		
		Если ДанныеРасписания = Неопределено Тогда
			Если ТипЗнч(мВремяС) = Тип("Дата") Тогда
				мВремяС = мВремяС - Дата('00010101');
			КонецЕсли;
			
			Если ТипЗнч(мВремяПо) = Тип("Дата") Тогда
				мВремяПо = мВремяПо - Дата('00010101');
				мВремяПо = ?(ЗначениеЗаполнено(мВремяПо), мВремяПо, '00010101235900'-Дата('00010101'))
			КонецЕсли;
			
			мДатаОтправленияС = ?(ЗначениеЗаполнено(Объект.ОтправлениеС),НачалоДня(Объект.ОтправлениеС),НачалоДня(Объект.Дата));
			мДатаОтправленияПо = ?(ЗначениеЗаполнено(Объект.ОтправлениеПо),НачалоДня(Объект.ОтправлениеПо),НачалоДня(Объект.Дата));
			
			мДатаОтправления = ?(ЗначениеЗаполнено(Объект.ОтправлениеС),НачалоДня(Объект.ОтправлениеС),НачалоДня(Объект.Дата));
			мДатаОтправления = ?(ЗначениеЗаполнено(Объект.ОтправлениеС),НачалоДня(Объект.ОтправлениеС),НачалоДня(Объект.Дата));
			
			Объект.ОтправлениеС            = мДатаОтправления + мВремяС;
			Объект.ОтправлениеПо           = мДатаОтправления + мВремяПо;
		КонецЕсли;
		мОтправлениеС  = Объект.ОтправлениеС;
		мОтправлениеПо = Объект.ОтправлениеПо;
		мДоставкаС     = Объект.ДоставкаС;
		мДоставкаПо    = Объект.ДоставкаПо;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДатыНазначения(РазрешеноИспользоватьРасписание = Ложь)
	
	ПустаяДата = Дата('00010101');
	СекундВДне = 24*60*60;
	Объект.ПрибытиеПоРасписанию = ПустаяДата;
	Объект.АдресИзмененВХодеМаршрутизации = Ложь;
	
	Если ЗначениеЗаполнено(Объект.АдресНазначения) Тогда
		
		ВыбранноеЗначение = Объект.АдресНазначения;
		
		мВремяС  = 0;
		мВремяПо = 0;
		ДанныеРасписания = Неопределено;
		
		Если ТипЗнч(ВыбранноеЗначение) = Тип("Строка") Тогда
			мВыбЗнач = ВыбранноеЗначение;
			
		ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда 
			мВыбЗнач = ВыбранноеЗначение;
			Объект.СтоянкаПунктНазначения = ПолучитьВремяСтоянкиПоУмолчанию(ВыбранноеЗначение);
			
			Если РазрешеноИспользоватьРасписание Тогда
				ДанныеРасписания = ПодобратьДанныеРасписания();
			КонецЕсли;
			Если ДанныеРасписания <> Неопределено Тогда
				ЗаполнитьДатыПоРасписанию(ДанныеРасписания);
			Иначе
				ВремяДоступности = уатОбщегоНазначения_проф.ПолучитьВремяДоступностиПункта(мВыбЗнач, Объект.Грузоотправитель);
				мВремяС  = ВремяДоступности.ВремяДоступностиС;
				мВремяПо = ВремяДоступности.ВремяДоступностиПо;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(Объект.НаправлениеПеревозки) Тогда
				Объект.НаправлениеПеревозки = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "НаправлениеПеревозки");
			КонецЕсли;
			
		Иначе
			Возврат;
		КонецЕсли;
		
		Если ДанныеРасписания = Неопределено Тогда
			Если ТипЗнч(мВремяС) = Тип("Дата") Тогда
				мВремяС = мВремяС - Дата('00010101');
			КонецЕсли;
			
			Если ТипЗнч(мВремяПо) = Тип("Дата") Тогда
				мВремяПо = мВремяПо - Дата('00010101');
				мВремяПо = ?(ЗначениеЗаполнено(мВремяПо), мВремяПо, '00010101235900'-Дата('00010101'))
			КонецЕсли;
			
			мДатаПрибытияС = ?(ЗначениеЗаполнено(Объект.ДоставкаС),НачалоДня(Объект.ДоставкаС),НачалоДня(Объект.Дата));
			мДатаПрибытияПо = ?(ЗначениеЗаполнено(Объект.ДоставкаПо),НачалоДня(Объект.ДоставкаПо),НачалоДня(Объект.Дата));
			
			Объект.ДоставкаС              = мДатаПрибытияС + мВремяС;
			Объект.ДоставкаПо             = мДатаПрибытияПо + мВремяПо;
		КонецЕсли;
		мОтправлениеС  = Объект.ОтправлениеС;
		мОтправлениеПо = Объект.ОтправлениеПо;
		мДоставкаС     = Объект.ДоставкаС;
		мДоставкаПо    = Объект.ДоставкаПо;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьНаличиеСвязанныхТТДНаСервере(СсылкаНаДокумент)
	Если Не ПолучитьФункциональнуюОпцию("уатИспользоватьРедакторЦепочкиДокументов_уэ") Тогда
		Возврат уатОбщегоНазначения_проф.ПроверитьНаличиеСвязанныхТТД(СсылкаНаДокумент);
	Иначе
		// Редактор цепочки документов помогает, в том числе, отслеживать наличие связанных ТТД,
		// поэтому отдельное сообщение не требуется.
		Возврат Ложь;
	КонецЕсли;
КонецФункции

#Область СлужебныеПроцедурыИФункцииСопроводительныеДокументы

&НаКлиенте
Процедура СопроводительныеДокументыОбновить(Результат = Неопределено, ДопПараметры = Неопределено) Экспорт
	Если ИспользуетсяДокументооборот() Тогда
		Элементы.СтатусыСД.Обновить();
	КонецЕсли;
	ВывестиСтатусЗавершенияОбработкиСопроводительныхДокументов();
КонецПроцедуры

&НаСервере
Процедура ОтменитьПринятиеВсехСопроводительныхДокументов(мсвСД, ТекстОшибки)
	Для Каждого ТекСД Из мсвСД Цикл
		// Если СД входит в Пакет, то нельзя отменять его принятие, поскольку нельзя изменять Пакет программно, только вручную
		Если ЗначениеЗаполнено(ТекСД.ПакетДокументов) Тогда
			ТекстОшибки = ТекстОшибки + СтрШаблон("
				|Сопроводительный документ ""%1"": включен в ""%2"", изменение статуса запрещено!",
				ТекСД.СопроводительныйДокумент,
				ТекСД.ПакетДокументов);
		Иначе
			ДокУстановкаСтатусов = ТекСД.Регистратор.ПолучитьОбъект();
			
			Если ДокУстановкаСтатусов.СопроводительныеДокументы.Количество() = 1 Тогда
				// Если СД в УстановкеСтатусов один, то просто отменяем проведение
				Попытка
					ДокУстановкаСтатусов.УстановитьПометкуУдаления(Истина);
				Исключение
					ТекстОшибки = ТекстОшибки + СтрШаблон("
						|Сопроводительный документ ""%1"": не удалось установить пометку удаления ""%2"". " + ИнформацияОбОшибке().Описание,
						ТекСД.СопроводительныйДокумент,
						ТекСД.Регистратор);
				КонецПопытки;
			Иначе
				// Если в УстановкеСтатусов есть другие СД, то отменять проведение нельзя, это вызовет отмену принятия других СД!
				// Поэтому удаляем точечно строку с этим СД и перепроводим.
				мсвСтрокУдалить = ДокУстановкаСтатусов.СопроводительныеДокументы.НайтиСтроки(
					Новый Структура("СопроводительныйДокумент", ТекСД.СопроводительныйДокумент));
					
				Для Каждого ТекСтрокаУдалить Из мсвСтрокУдалить Цикл
					ДокУстановкаСтатусов.СопроводительныеДокументы.Удалить(ТекСтрокаУдалить);
				КонецЦикла;
				Попытка
					ДокУстановкаСтатусов.Записать(РежимЗаписиДокумента.Проведение);
				Исключение
					ТекстОшибки = ТекстОшибки + СтрШаблон("
						|Сопроводительный документ ""%1"": не удалось записать ""%2"". " + ИнформацияОбОшибке().Описание,
						ТекСД.СопроводительныйДокумент,
						ТекСД.Регистратор);
				КонецПопытки;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборСопроводительныхДокументов()
	// по этому заказу
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СтатусыСД, "ЗаказНаТС", Объект.Ссылка);
	
	// по всем этапам родительского ММ заказа
	списЗаказыСД = Новый СписокЗначений;
	Если НЕ Объект.Ссылка.Пустая() И Объект.Мультимодальный И НЕ Объект.ЭтоЭтап Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	уатЗаказГрузоотправителя.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
		|ГДЕ
		|	уатЗаказГрузоотправителя.РодительскийЗаказ = &Заказ
		|	И НЕ уатЗаказГрузоотправителя.ПометкаУдаления");
		Запрос.УстановитьПараметр("Заказ", Объект.Ссылка);
		тблЭтапы = Запрос.Выполнить().Выгрузить();
		списЗаказыСД.ЗагрузитьЗначения(тблЭтапы.ВыгрузитьКолонку("Ссылка"));
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ДокументыЭтапов, "ЗаказыНаТС", списЗаказыСД);
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборСобытий()
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(События, "Документ", Объект.Ссылка);
	
	СписокЭтапов = Новый СписокЗначений;
	Если НЕ Объект.Ссылка.Пустая()
		И Объект.Мультимодальный
		И НЕ Объект.ЭтоЭтап Тогда
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	уатЗаказГрузоотправителя.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ втЗаказы
		|ИЗ
		|	Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
		|ГДЕ
		|	(уатЗаказГрузоотправителя.РодительскийЗаказ = &Заказ
		|			ИЛИ уатЗаказГрузоотправителя.Ссылка = &Заказ)
		|	И НЕ уатЗаказГрузоотправителя.ПометкаУдаления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	уатМаршрутныйЛистЗаказы.Ссылка КАК Ссылка
		|ИЗ
		|	втЗаказы КАК втЗаказы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатМаршрутныйЛист.Заказы КАК уатМаршрутныйЛистЗаказы
		|		ПО втЗаказы.Ссылка = уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	втЗаказы.Ссылка
		|ИЗ
		|	втЗаказы КАК втЗаказы
		|ГДЕ
		|	втЗаказы.Ссылка <> &Заказ");
		Запрос.УстановитьПараметр("Заказ", Объект.Ссылка);
		тблЭтапы = Запрос.Выполнить().Выгрузить();
		СписокЭтапов.ЗагрузитьЗначения(тблЭтапы.ВыгрузитьКолонку("Ссылка"));
		
	КонецЕсли;
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СобытияЭтапов, "ЗаказыНаТС", СписокЭтапов);

КонецПроцедуры

&НаСервере
Процедура ВывестиСтатусЗавершенияОбработкиСопроводительныхДокументов()
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	уатСтатусыСопроводительныхДокументовСрезПоследних.СопроводительныйДокумент КАК Ссылка
	|ИЗ
	|	РегистрСведений.уатСтатусыСопроводительныхДокументов.СрезПоследних(, СопроводительныйДокумент.Основание = &ЗаказНаТС) КАК уатСтатусыСопроводительныхДокументовСрезПоследних
	|ГДЕ
	|	уатСтатусыСопроводительныхДокументовСрезПоследних.Статус <> ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.ОбработкаЗавершена)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	МАКСИМУМ(уатСтатусыСопроводительныхДокументовСрезПоследних.Период) КАК Период
	|ИЗ
	|	РегистрСведений.уатСтатусыСопроводительныхДокументов.СрезПоследних(, СопроводительныйДокумент.Основание = &ЗаказНаТС) КАК уатСтатусыСопроводительныхДокументовСрезПоследних
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	уатСтатусыСопроводительныхДокументовСрезПоследних.СопроводительныйДокумент КАК Ссылка
	|ИЗ
	|	РегистрСведений.уатСтатусыСопроводительныхДокументов.СрезПоследних(, СопроводительныйДокумент.Основание = &ЗаказНаТС) КАК уатСтатусыСопроводительныхДокументовСрезПоследних");
	Запрос.УстановитьПараметр("ЗаказНаТС", Объект.Ссылка);
	Результат = Запрос.ВыполнитьПакет();
	
	Если Результат[2].Пустой() Тогда
		Элементы.ГруппаСтраницыСтатусОбработкиСД.Видимость = Ложь;
		Возврат;
	Иначе
		Элементы.ГруппаСтраницыСтатусОбработкиСД.Видимость = Истина;
	КонецЕсли;
	
	флВсеЗавершены = Результат[0].Пустой();
	Если флВсеЗавершены Тогда
		ВыборкаДата = Результат[1].Выбрать();
		Если ВыборкаДата.Следующий() Тогда
			ДатаОбработкиПоследняя = Формат(ВыборкаДата.Период, "ДФ=dd.MM.yyyy");;
		Иначе
			ДатаОбработкиПоследняя = "";
		КонецЕсли;
		СопроводительныеДокументыОбработкаЗавершена = "Обработка документов завершена " + ДатаОбработкиПоследняя;
	Иначе
		СопроводительныеДокументыОбработкаЗавершена = "Обработка документов не завершена";
	КонецЕсли;
	
	Если флВсеЗавершены Тогда
		Элементы.ГруппаСтраницыСтатусОбработкиСД.ТекущаяСтраница = Элементы.ГруппаСтраницаСтатусОбработкиСДЗавершена;
	Иначе
		Элементы.ГруппаСтраницыСтатусОбработкиСД.ТекущаяСтраница = Элементы.ГруппаСтраницаСтатусОбработкиСДНеЗавершена;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция СопроводительныеДокументыВыделенныеСД(мсвВыделенныеСтроки, ЭтоШаблонПеревозки = Ложь)
	мсвСопрДокументы = Новый Массив;
	Для Каждого ТекСтрока Из мсвВыделенныеСтроки Цикл
		СтруктураСтроки = Новый Структура("СопроводительныйДокумент",
			?(ЭтоШаблонПеревозки, ТекСтрока, ТекСтрока.СопроводительныйДокумент));
		мсвСопрДокументы.Добавить(СтруктураСтроки);
	КонецЦикла;
	
	Возврат мсвСопрДокументы;
КонецФункции

&НаСервереБезКонтекста
Функция СопроводительныеДокументыВидыДокументовПоШаблону(Шаблон)
	тблВидыДокументов = Шаблон.ВидыДокументов.Выгрузить();
	мсвСтрок = уатОбщегоНазначенияСервер.ПреобразоватьТаблицувМассивСтрок(тблВидыДокументов);
	Возврат мсвСтрок;
КонецФункции

&НаСервереБезКонтекста
Процедура УдалитьСопроводительныйДокумент(СопроводительныйДокумент, Отказ = Ложь, ТекстОшибки = "")
	НачатьТранзакцию();
		
	Попытка 	
		СопроводительныйДокумент.ПолучитьОбъект().УстановитьПометкуУдаления(Истина)
	Исключение
		ОтменитьТранзакцию();
		Отказ = Истина;
		ТекстОшибки = ОписаниеОшибки();
	КонецПопытки;
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// удаляем записи из регистра истории статусов
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатСопроводительныеДокументы.Регистратор
	|ИЗ
	|	РегистрСведений.уатСтатусыСопроводительныхДокументов КАК уатСопроводительныеДокументы
	|ГДЕ
	|	уатСопроводительныеДокументы.СопроводительныйДокумент = &СопроводительныйДокумент
	|
	|СГРУППИРОВАТЬ ПО
	|	уатСопроводительныеДокументы.Регистратор");
	Запрос.УстановитьПараметр("СопроводительныйДокумент", СопроводительныйДокумент);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДокОб = Выборка.Регистратор.ПолучитьОбъект();
		Попытка		    
			ДокОб.Записать(РежимЗаписиДокумента.Проведение);				
		Исключение
			ОтменитьТранзакцию();
			Отказ = Истина;
			ТекстОшибки = СтрШаблон("Не удалось перепровести %1 для удаления статуса: %2", ДокОб, ОписаниеОшибки());
			Прервать;
		КонецПопытки;	
	КонецЦикла;	
	
	Если ТранзакцияАктивна() Тогда
		ЗафиксироватьТранзакцию();		
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция СопроводительныеДокументыПоЗаказу(ЗаказНаТС, КонтрагентИЛИПункт = Неопределено, ОбработкаЗавершена = Ложь)
	мсвСопрДокументы = Новый Массив;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	уатСтатусыСопроводительныхДокументовСрезПоследних.СопроводительныйДокумент КАК СопроводительныйДокумент,
	|	уатСтатусыСопроводительныхДокументовСрезПоследних.ПакетДокументов КАК ПакетДокументов,
	|	уатСтатусыСопроводительныхДокументовСрезПоследних.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрСведений.уатСтатусыСопроводительныхДокументов.СрезПоследних КАК уатСтатусыСопроводительныхДокументовСрезПоследних
	|ГДЕ
	|	(&ОбработкаЗавершена
	|				И уатСтатусыСопроводительныхДокументовСрезПоследних.Статус = ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.ОбработкаЗавершена)
	|			ИЛИ НЕ &ОбработкаЗавершена
	|				И уатСтатусыСопроводительныхДокументовСрезПоследних.Статус <> ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.ОбработкаЗавершена))
	|	И уатСтатусыСопроводительныхДокументовСрезПоследних.СопроводительныйДокумент.Основание = &ЗаказНаТС
	|	И (&Пункт = НЕОПРЕДЕЛЕНО
	|			ИЛИ уатСтатусыСопроводительныхДокументовСрезПоследних.СопроводительныйДокумент.ПунктНазначения = &Пункт)
	|	И (&Контрагент = НЕОПРЕДЕЛЕНО
	|			ИЛИ уатСтатусыСопроводительныхДокументовСрезПоследних.СопроводительныйДокумент.ВладелецДокумента = &Контрагент)");
	Запрос.УстановитьПараметр("ЗаказНаТС", ЗаказНаТС);
	Запрос.УстановитьПараметр("ОбработкаЗавершена", ОбработкаЗавершена);
	Если ТипЗнч(КонтрагентИЛИПункт) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда
		Запрос.УстановитьПараметр("Контрагент", Неопределено);
		Запрос.УстановитьПараметр("Пункт", КонтрагентИЛИПункт);
	Иначе
		Запрос.УстановитьПараметр("Контрагент", КонтрагентИЛИПункт);
		Запрос.УстановитьПараметр("Пункт", Неопределено);
	КонецЕсли;
	
	тблСД = Запрос.Выполнить().Выгрузить();
	
	мсвСопрДокументы = уатОбщегоНазначенияСервер.ПреобразоватьТаблицувМассивСтрок(тблСД);
		
	Возврат мсвСопрДокументы;
КонецФункции

&НаКлиенте
Процедура НайтиНаКартеАдресПродолжение(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если Не ПроверитьЗаполнение() Тогда
			Возврат;
		КонецЕсли;
		
		Попытка
			Записать();
			НайтиНаКартеАдресЗавершение(ДопПараметры);
		Исключение
			ТекстСообщения = ИнформацияОбОшибке().Описание;
			ТекПричина = ИнформацияОбОшибке().Причина;
			Сч = 1; МаксСч = 10;
			Пока ТекПричина <> Неопределено И Сч <= МаксСч Цикл
				ТекстСообщения = ТекстСообщения + " \ " + ТекПричина.Описание;
				ТекПричина = ТекПричина.Причина;
				Сч = Сч + 1;
			КонецЦикла;
			
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НайтиНаКартеАдресЗавершение(ПараметрыАдреса)
	РежимОткрытияКарты = "РежимКарты_ПунктыНазначения";
	ПараметрыФормыКарты = Новый Структура("РежимОткрытия, ДокументОснование", РежимОткрытияКарты, Объект.Ссылка);
	Если ЗначениеЗаполнено(ПараметрыАдреса.АдресСсылка) 
		И ТипЗнч(ПараметрыАдреса.АдресСсылка) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда
		ПараметрыФормыКарты.Вставить("ОбъектОснование", ПараметрыАдреса.АдресСсылка);
	Иначе
		ПараметрыФормыКарты.Вставить("ПунктСтрока", ПараметрыАдреса.АдресСтрока);
	КонецЕсли;
	уатЭлектронныеКартыКлиент.ОткрытьКартуИУстановитьРежим(ПараметрыФормыКарты);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПрочитатьJSONНаСервере(СтрокаJSON)
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
	СтруктураСхемы = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	
	Возврат СтруктураСхемы;
КонецФункции

#КонецОбласти

#Область СлужебныеПроцедурыИФункцииРедакторЦепочкиДокументов

&НаСервереБезКонтекста
Функция СтруктураДокументаПоСсылке(Ссылка)
	// Параметры, необходимые для работы редактора цепочки документов
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ЗаполнятьТЧОтрезкиПути", Истина);
	ДопПараметры.Вставить("ЗаполнятьВсеКолонкиТЧТовары", Истина);
	ДопПараметры.Вставить("ЗаполнятьВсеКолонкиТЧГрузовойСостав", Истина);
	Возврат уатОбщегоНазначенияКлиентСервер.СтруктураДокумента(Ссылка.ПолучитьОбъект(), "уатЗаказГрузоотправителя", ДопПараметры);
КонецФункции

&НаКлиенте
Процедура ОткрытьРедакторЦепочкиДокументовПродолжение(Результат, ДопПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Если Результат.НеОткрыватьРедакторЦепочкиДокументов Тогда
			Объект.НеОткрыватьРедакторЦепочкиДокументов = Истина;
			// Нет проверки успешности записи документа, так как он только что был проведен
			// и изменился только флаг "Не открывать редактор цепочки документов"
			Записать();
			ДопПараметры.СтруктураДокументаНовая.НеОткрыватьРедакторЦепочкиДокументов = Истина;
		КонецЕсли;
		Если Результат.ОткрытьРедактор Тогда
			ОткрытьФорму("Обработка.уатРедакторЦепочкиДокументов_уэ.Форма.Форма", ДопПараметры, ЭтаФорма);
		КонецЕсли;
	КонецЕсли;
	
	флОткрытиеРедактораЦепочкиДокументов = Ложь;
	Если флЗакрыватьПриЗаписи Тогда
		ЭтаФорма.Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРедакторЦепочкиДокументовОтвет(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		
		СтруктураДокументаСтарая = СтруктураДокументаПоСсылке(Объект.Ссылка);
		флНеПроверятьОткрытиеРедактораЦепочкиДокументов = Истина;
		Если НЕ (ПроверитьЗаполнение() И Записать()) Тогда
			флНеПроверятьОткрытиеРедактораЦепочкиДокументов = Ложь;
			Возврат;
		КонецЕсли;
		флНеПроверятьОткрытиеРедактораЦепочкиДокументов = Ложь;
		СтруктураДокументаНовая = СтруктураДокументаПоСсылке(Объект.Ссылка);
		
		ДопПараметры = Новый Структура("СтруктураДокументаНовая, СтруктураДокументаСтарая", СтруктураДокументаНовая, СтруктураДокументаСтарая);
		ОткрытьФорму("Обработка.уатРедакторЦепочкиДокументов_уэ.Форма.Форма", ДопПараметры, ЭтаФорма);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЭтоШаблонПеревозкиПриИзменении(Элемент)
	УстановитьВидимость();
	УстановитьОсновнуюТаблицуСД();
КонецПроцедуры

#КонецОбласти

&НаСервереБезКонтекста
Функция ВидМоделиТСПоВидуПеревозки(ВидПеревозки)
	
	Возврат ВидПеревозки.ВидМоделиТС;
	
КонецФункции

&НаКлиенте
Функция СтруктураОтбораТС(ТекущиеДанные)
	
	СтруктураОтбора = Новый Структура();
	
	Если ТипЗнч(ТекущиеДанные.Перевозчик) = Тип("СправочникСсылка.Организации") Тогда
		СтруктураОтбора.Вставить("ПринадлежностьТС", ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное"));
		Если ЗначениеЗаполнено(ТекущиеДанные.Перевозчик) Тогда
			СтруктураОтбора.Вставить("Организация", ТекущиеДанные.Перевозчик);
		КонецЕсли;
	ИначеЕсли ТипЗнч(ТекущиеДанные.Перевозчик) = Тип("СправочникСсылка.Контрагенты") Тогда 
		СтруктураОтбора.Вставить("ПринадлежностьТС", ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Привлеченное"));
		Если ЗначениеЗаполнено(ТекущиеДанные.Перевозчик) Тогда
			СтруктураОтбора.Вставить("ВладелецТС", ТекущиеДанные.Перевозчик);
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ВидПеревозки) Тогда
		РазрешенныеВидыТС = Новый Массив();
		РазрешенныеВидыТС.Добавить(ВидМоделиТСПоВидуПеревозки(ТекущиеДанные.ВидПеревозки));
		СтруктураОтбора.Вставить("ВидМоделиТС", РазрешенныеВидыТС);
	КонецЕсли;
	
	Возврат СтруктураОтбора;
	
КонецФункции

&НаСервере
Процедура ЗаписатьПлановыеДниЭтапаШаблона()
	
	Если Объект.Ссылка.Пустая() Или Не Объект.ЭтоШаблонПеревозки Тогда
		Возврат;
	КонецЕсли;
	
	НаборЗаписей = РегистрыСведений.уатЭтапыМультимодальныхПеревозок_уэ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Этап.Установить(Объект.Ссылка);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() Тогда 
		НаборЗаписей[0].ДнейОтНачалаОтправление = ДнейОтНачалаОтправлениеЭтапаШаблона;
		НаборЗаписей[0].ДнейОтНачалаНазначение  = ДнейОтНачалаНазначениеЭтапаШаблона;
		НаборЗаписей.Записать(Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьКлючЗаписиСобытияПоПеревозке(ТекСтрока)

	ЗначениеКлюча = Новый Структура;
	ЗначениеКлюча.Вставить("ТипСобытия",        ТекСтрока.ТипСобытия);
	ЗначениеКлюча.Вставить("ДокументПеревозки", ТекСтрока.ДокументПеревозки);
	ЗначениеКлюча.Вставить("Событие",           ТекСтрока.Событие);
	ЗначениеКлюча.Вставить("ВидДокумента",      ТекСтрока.ВидДокумента);

    Возврат РегистрыСведений.уатСобытияПоПеревозке_уэ.СоздатьКлючЗаписи(ЗначениеКлюча);

КонецФункции

&НаСервере
Процедура УстановитьОсновнуюТаблицуСД()
	СтатусыСД.ОсновнаяТаблица = ?(Объект.ЭтоШаблонПеревозки, "Справочник.уатСопроводительныеДокументы",
		"РегистрСведений.уатСтатусыСопроводительныхДокументов.СрезПоследних");
	ДокументыЭтапов.ОсновнаяТаблица = ?(Объект.ЭтоШаблонПеревозки, "Справочник.уатСопроводительныеДокументы",
		"РегистрСведений.уатСтатусыСопроводительныхДокументов.СрезПоследних");
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКоличествоЭПД(Документ)
	
	Возврат уатОбменСГИСЭПД.ПолучитьКоличествоЭПД(Документ);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЭПД(ЗаказНаТС)
	
	Запрос = Новый Запрос(); 
	Запрос.УстановитьПараметр("ЗаказНаТС", ЗаказНаТС);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатСвязанныеДокументыЭПД.ЭПД КАК ЭПД,
	|	уатСвязанныеДокументыЭПД.ЗаказНаТС КАК ЗаказНаТС
	|ИЗ
	|	РегистрСведений.уатСвязанныеДокументыЭПД КАК уатСвязанныеДокументыЭПД
	|ГДЕ
	|	уатСвязанныеДокументыЭПД.ЗаказНаТС = &ЗаказНаТС
	|	И ТИПЗНАЧЕНИЯ(уатСвязанныеДокументыЭПД.ЭПД) = ТИП(Документ.ЭлектроннаяТранспортнаяНакладная)
	|
	|СГРУППИРОВАТЬ ПО
	|	уатСвязанныеДокументыЭПД.ЭПД,
	|	уатСвязанныеДокументыЭПД.ЗаказНаТС";
	Выборка   = Запрос.Выполнить().Выбрать();
	ЭПД = Неопределено;
	Пока Выборка.Следующий() Цикл
		ЭПД = Выборка.ЭПД;
	КонецЦикла;
	Возврат ЭПД;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЭПДДляПереадресовки(ЗаказНаТС)
	
	Запрос = Новый Запрос(); 
	Запрос.УстановитьПараметр("ЗаказНаТС", ЗаказНаТС);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	уатСвязанныеДокументыЭПД.ЭПД КАК ЭПД
	               |ИЗ
	               |	РегистрСведений.уатСвязанныеДокументыЭПД КАК уатСвязанныеДокументыЭПД
	               |ГДЕ
	               |	уатСвязанныеДокументыЭПД.ЗаказНаТС = &ЗаказНаТС
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	уатСвязанныеДокументыЭПД.ЭПД";
	Выборка   = Запрос.Выполнить().Выбрать();
	
	МассивЭПД = Новый Массив();
	Пока Выборка.Следующий() Цикл
		ДанныеСостоянияЭДО = ИнтеграцияЭДОВызовСервера.ДанныеСостоянияЭДОДляФормыОбъектаУчета(Выборка.ЭПД);
		ТитулыПоДокументу = ОбменСГИСЭПДВызовСервера.ПолучитьТитулыПоДокументу(Выборка.ЭПД, Истина);
		
		Если ДанныеСостоянияЭДО.ПредставлениеСостояния <> "Закрыт с отклонением" Тогда
			Если ТитулыПоДокументу.Получить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул1")) <> Неопределено
				И ТитулыПоДокументу.Получить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул2")) <> Неопределено
				И ДанныеСостоянияЭДО.ПредставлениеСостояния <> "Требуется повторная отправка" Тогда
				
				Если ТитулыПоДокументу.Получить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул2")) <> Неопределено
					И ТитулыПоДокументу.Получить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул3")) = Неопределено
					И Выборка.ЭПД.ТекущийШаг <> "Приемка" Тогда
					МассивЭПД.Добавить(Выборка.ЭПД);
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;  
	
	Возврат МассивЭПД;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЭТрН(ЗаказНаТС)
	
	Запрос = Новый Запрос(); 
	Запрос.УстановитьПараметр("ЗаказНаТС", ЗаказНаТС);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	уатСвязанныеДокументыЭПД.ЭПД КАК ЭПД
	               |ИЗ
	               |	РегистрСведений.уатСвязанныеДокументыЭПД КАК уатСвязанныеДокументыЭПД
	               |ГДЕ
	               |	уатСвязанныеДокументыЭПД.ЗаказНаТС = &ЗаказНаТС
	               |	И ТИПЗНАЧЕНИЯ(уатСвязанныеДокументыЭПД.ЭПД) = ТИП(Документ.ЭлектроннаяТранспортнаяНакладная)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	уатСвязанныеДокументыЭПД.ЭПД";
	Выборка   = Запрос.Выполнить().Выбрать();
	
	МассивЭПД = Новый Массив();
	Пока Выборка.Следующий() Цикл
		МассивЭПД.Добавить(Выборка.ЭПД);
	КонецЦикла;  
	
	Возврат МассивЭПД;
	
КонецФункции

&НаКлиенте
Процедура ВопросПереадресовкаЗавершение(РезультатВопроса, МассивЭПД) Экспорт

	ВопросПереадресовкаЭПД  = Истина;
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Для Каждого ТекЭПД Из МассивЭПД Цикл
			ПараметрыФормы = Новый Структура();
			ПараметрыФормы.Вставить("Ключ", ТекЭПД);
			ПараметрыФормы.Вставить("СоздатьПереадресовку", Истина);
			
			ОткрытьФорму("Документ.ЭлектроннаяТранспортнаяНакладная.Форма.ОсновнаяФорма", ПараметрыФормы,ЭтотОбъект);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросИзменениеЭТрН(РезультатВопроса, МассивЭПД) Экспорт

	ВопросИзменениеЭТрН = Истина; 
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Для Каждого ТекЭПД Из МассивЭПД Цикл
			ПараметрыФормы = Новый Структура();
			ПараметрыФормы.Вставить("Ключ", ТекЭПД);
			
			ОткрытьФорму("Документ.ЭлектроннаяТранспортнаяНакладная.Форма.ОсновнаяФорма", ПараметрыФормы,ЭтотОбъект);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

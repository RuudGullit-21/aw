
#Область ПеременныеФормы

&НаКлиенте
Перем ТекущиеДанныеСсылка; // Хранит данные строки ТЧ

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	уатЗащищенныеФункцииСервер.уатДокументФормаСпискаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// Внешнему пользователю физическому лицу запрещено открытие документов
	Если уатОбщегоНазначения.ПроверкаВнешнегоПользователя() И ТипЗнч(ПользователиКлиентСервер.АвторизованныйПользователь().ОбъектАвторизации) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами.
	уатОбменСКонтрагентами.КомандыЭДО_ФормаСписка(ЭтотОбъект);  
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами  
	ИспользоватьОбменЭД    = ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭД");
	Элементы.ЭПД.Видимость          = ИспользоватьОбменЭД;
	Элементы.СостояниеЭДО.Видимость = ИспользоватьОбменЭД;

	
	ПравоРедактированияДокумента = ПравоДоступа("Редактирование", Метаданные.Документы.уатЗаказГрузоотправителя);
	Если Не ПравоРедактированияДокумента Тогда 
		Элементы.ФормаИзменитьВыделенные.Видимость                 = Ложь;
		Элементы.СписокКонтекстноеМенюИзменитьВыделенные.Видимость = Ложь;
		Элементы.ФормаОткрытьРедакторЦепочкиДокументов.Видимость   = Ложь;
	КонецЕсли;
	
	Если уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП() Тогда
		ПравоСозданияПеревозокПоШаблонам = ПравоДоступа("Просмотр", Метаданные.Обработки.уатРедакторКонтейнернойПеревозки_уэ);
	Иначе
		ПравоСозданияПеревозокПоШаблонам = Ложь;
	КонецЕсли;
	Элементы.ПодменюНоваяПеревозка.Видимость = ПравоСозданияПеревозокПоШаблонам;
	
	Если НЕ ПолучитьФункциональнуюОпцию("уатИспользоватьПлатежныйКалендарь")
		ИЛИ НЕ ПравоДоступа("Просмотр", Метаданные.РегистрыНакопления.уатПлатежныйКалендарь) Тогда
		Элементы.Оплачено.Видимость = Ложь;
	КонецЕсли;
	
	// Ограничение просмотра для внешнего пользователя
	АвторизованВнешнийПользователь = Ложь;
	АвторизованныйКонтрагент = уатЗащищенныеФункцииСервер_проф.АвторизованныйКонтрагент(АвторизованВнешнийПользователь);
	Если АвторизованВнешнийПользователь Тогда
		ЭлементОтбора                  = Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("Контрагент");
		ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение   = АвторизованныйКонтрагент;
		ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		ЭлементОтбора.Использование    = Истина;
		
		Элементы.ФормаИзменитьВыделенные.Видимость = Ложь;
		Элементы.КомандыВнутреннегоПользователя.Видимость = Ложь;
	КонецЕсли;
	
	ИспользоватьСкладскиеАкты = ПолучитьФункциональнуюОпцию("уатИспользоватьСкладскиеАкты_уэ");
	РазделятьПланФактВСкладскихАктах = ПолучитьФункциональнуюОпцию("уатРазделятьПланФактВСкладскихАктах_уэ");
	Элементы.ФормаОтчетГрузыВРейсах.Видимость = ИспользоватьСкладскиеАкты;
	Элементы.ФормаОтчетОстаткиГрузовНаСкладахКомплектации.Видимость = ИспользоватьСкладскиеАкты;
	Элементы.ФормаОтчетАнализОтгрузки.Видимость = ИспользоватьСкладскиеАкты И РазделятьПланФактВСкладскихАктах;
	Элементы.ФормаОтчетАнализПриемки.Видимость = ИспользоватьСкладскиеАкты И РазделятьПланФактВСкладскихАктах;
		
	ВосстановитьПользовательскиеНастройки();
	
	ЗаполнитьСписокПолейСортировки();
	УстановитьЦветаСтатусов();
	
	//ПодключаемоеОборудование
	уатОбщегоНазначения_проф.НастроитьПодключаемоеОборудование(ЭтотОбъект); 
	//Конец ПодключаемоеОборудование
	
	уатОбщегоНазначенияСервер.ПереместитьКнопкуКонтакты(Элементы);
	
	Если ПолучитьФункциональнуюОпцию("уатИспользоватьДокументооборот") = Ложь Тогда
		Элементы.СтатусОбработкиСопроводительныхДокументов.Видимость      = Ложь;
		Элементы.ОтборСтатусОбработкиСопроводительныхДокументов.Видимость = Ложь;
	КонецЕсли;
	
	Если ПолучитьФункциональнуюОпцию("уатРазделятьПланФактВСкладскихАктах_уэ") = Ложь Тогда
		Элементы.КартинкаЕстьРасхождения.Видимость = Ложь;
	КонецЕсли;
	Список.Параметры.УстановитьЗначениеПараметра("ОтборСтатус", Ложь);
	Список.Параметры.УстановитьЗначениеПараметра("МассивЗаказовДляСтатусов", Новый Массив);
	
	ЗапрещенныеВОтбореПоля = Новый Массив;
	ЗапрещенныеВОтбореПоля.Добавить("СтатусЗаказа");
	ЗапрещенныеВОтбореПоля.Добавить("СтатусОбработкиСопроводительныхДокументов");
	Список.УстановитьОграниченияИспользованияВОтборе(ЗапрещенныеВОтбореПоля);
	Список.УстановитьОграниченияИспользованияВПорядке(ЗапрещенныеВОтбореПоля);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Изменен заказ грузоотправителя"
			Или ИмяСобытия = "Изменен маршрутный лист" 
			Или ИмяСобытия = "Изменено закрытие заказов на ТС"
			Или ИмяСобытия = "Изменен статус заказа" Тогда
		
		Элементы.Список.Обновить();
		
		Если ПоказыватьИсториюСтатусов Тогда 
			ПодключитьОбработчикОжидания("Подключаемый_ОбновитьИсториюИзмененияСтатусов", 0.5, Истина);
		КонецЕсли;
	КонецЕсли;
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		уатОбщегоНазначенияКлиент.ОбработатьСобытиеПодключаемогоОборудования(ИмяСобытия, Параметр, Источник);
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ПараметрыОповещенияЭДО = ОбменСКонтрагентамиКлиент.ПараметрыОповещенияЭДО_ФормаСписка();
	ПараметрыОповещенияЭДО.Форма							 = ЭтотОбъект;
	ПараметрыОповещенияЭДО.МестоРазмещенияКоманд 			 = Элементы.КомандыЭДО;
	ПараметрыОповещенияЭДО.ЕстьОбработчикОбновитьКомандыЭДО	 = Истина;
	ПараметрыОповещенияЭДО.ИмяДинамическогоСписка			 = "Список";
	ПараметрыОповещенияЭДО.ЕстьОбработчикОбновленияВидимостиСостоянияЭДО = Истина;
	ОбменСКонтрагентамиКлиент.ОбработкаОповещения_ФормаСписка(ИмяСобытия, Параметр, Источник, ПараметрыОповещенияЭДО);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	уатЗащищенныеФункцииКлиент.уатДокументФормаСпискаПриОткрытии(Отказ, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанныеСсылка = ПредопределенноеЗначение("Документ.уатЗаказГрузоотправителя.ПустаяСсылка");
	//ПодключаемоеОборудование
	уатОбщегоНазначенияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(ЭтотОбъект);
	//Конец ПодключаемоеОборудование 
	
	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ОбменСКонтрагентамиКлиент.ПриОткрытии(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	УстановитьВидимостьИсторииСтатусов(); 
	
	ЭтоКОРП = уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП(); 
	Элементы.ФормаПоискПоТрекНомеру.Видимость = ЭтоКОРП;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если НЕ ЗавершениеРаботы Тогда
		СохранитьПользовательскиеНастройки(ПоказыватьИсториюСтатусов);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НаправлениеСортировкиПриИзменении(Элемент)
	
	СортировкаСписокПриИзменении(Элементы.СортировкаСписок);
	
КонецПроцедуры

&НаКлиенте
Процедура СортировкаСписокПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ПолеСортировки) Тогда 
		мПолеСортировки = ПолеСортировки;
	Иначе 
		мПолеСортировки = "Дата";
	КонецЕсли;
	
	Список.Порядок.Элементы.Очистить();
	
	НовПорядок = Список.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
	НовПорядок.Поле              = Новый ПолеКомпоновкиДанных(мПолеСортировки);
	НовПорядок.РежимОтображения  = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	НовПорядок.ТипУпорядочивания = ?(ПереключательНаправлениеСортировки= 1, НаправлениеСортировкиКомпоновкиДанных.Убыв, НаправлениеСортировкиКомпоновкиДанных.Возр);
	НовПорядок.Использование     = Истина;
	
	Для Каждого ТекПользовательскаяНастройка Из Список.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл 
		Если Не ТипЗнч(ТекПользовательскаяНастройка) = Тип("ПорядокКомпоновкиДанных") Тогда 
			Продолжить;
		КонецЕсли;
		
		ТекПользовательскаяНастройка.Элементы.Очистить();
	КонецЦикла;
	
	Элементы.Список.Обновить();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_Список

&НаКлиенте
Процедура СписокПриАктивизацииСтроки(Элемент)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	// ЭлектронноеВзаимодействие.ОбменСКонтрагентами"
	ОбменСКонтрагентамиКлиент.ПриАктивизацииСтроки_ФормаСписка(ЭтотОбъект);
	// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	
	Если ПоказыватьИсториюСтатусов Тогда 
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьИсториюИзмененияСтатусов", 0.5, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.СтатусЗаказа
		И ПравоРедактированияДокумента Тогда 
		СтандартнаяОбработка = Ложь;
		
		РеквизитыЗаказа = уатОбщегоНазначенияТиповые.ПолучитьЗначенияРеквизитов(ВыбраннаяСтрока, "Мультимодальный, ЭтоЭтап, Проведен, ДатаЗакрытия");
		
		Если РеквизитыЗаказа.Мультимодальный И Не РеквизитыЗаказа.ЭтоЭтап Тогда 
			ТекстНСТР = НСтр("en = 'Immediate installation of the status of the multimodal parent order is prohibited.'; ru = 'Непосредственная установка статуса мультимодального родительского заказа запрещена.'")
				+ Символы.ПС + НСтр("en = 'It is necessary to set the stage statuses for this order.'; ru = 'Необходимо устанавливать статусы этапов по данному заказу.'");
			ПоказатьПредупреждение(Неопределено, ТекстНСТР);
			
		Иначе
			ТекДанные = Элементы.Список.ТекущиеДанные;
			флДокументЗакрыт = Ложь;
			Если Не ТекДанные = Неопределено Тогда 
				Если ТекДанные.СтатусЗаказа = ПредопределенноеЗначение("Справочник.уатСтатусы_уэ.Закрыт") Тогда 
					флДокументЗакрыт = Истина;
				КонецЕсли;
			КонецЕсли;
			
			// Проверка на доступ на изменение пользователем закрытого документа.
			РазрешитьРедактирование = Ложь;
			Если флДокументЗакрыт Тогда
				ТекПользователь = ПользователиКлиентСервер.АвторизованныйПользователь();
				РазрешитьРедактирование = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ТекПользователь, "РазрешитьРедактированиеЗакрытыхДокументов");
			КонецЕсли;
			
			Если флДокументЗакрыт И НЕ РазрешитьРедактирование Тогда 
				ТекстНСТР = НСтр("en='This order has already been closed. Status can not be changed.';ru='Данный заказ уже был закрыт. Изменение статуса невозможно.'");
				ПоказатьПредупреждение(Неопределено, ТекстНСТР);
			Иначе 
				ПараметрыФормыВыбора = Новый Структура("ПоказатьВводДаты");
				ФормаВыбораСтатуса = ПолучитьФорму("Справочник.уатСтатусы_уэ.ФормаВыбора", ПараметрыФормыВыбора, ЭтотОбъект);
				ФормаВыбораСтатуса.ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("СписокВыборПослеВыбораСтатуса", ЭтотОбъект, ВыбраннаяСтрока);
				ФормаВыбораСтатуса.РежимОткрытияОкна           = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
				
				ЭлементОтбора = ФормаВыбораСтатуса.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("ДействуетНаЗаказыГрузоотправителей");
				ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
				ЭлементОтбора.ПравоеЗначение   = Истина;
				ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
				ЭлементОтбора.Использование    = Истина;
				
				ФормаВыбораСтатуса.Открыть();
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Поле = Элементы.СостояниеЭДО Тогда 
		ТекущиеДанные = Элементы.Список.ТекущиеДанные;
		Если ТекущиеДанные = Неопределено
			ИЛИ НЕ ЗначениеЗаполнено(ТекущиеДанные.ЭПД) Тогда
			Возврат;
		КонецЕсли;
		// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
		ОбменСКонтрагентамиКлиент.СостояниеЭДОНажатие_ФормаСписка(ТекущиеДанные.ЭПД, СтандартнаяОбработка);
		// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	ИначеЕсли Поле = Элементы.ЭПД Тогда 
		СтандартнаяОбработка = Ложь;
		
		ДокументыЭПД = ПолучитьДокументыЭПД(ВыбраннаяСтрока);
		Если ДокументыЭПД.Количество() = 1 Тогда
			ПоказатьЗначение(Неопределено, ДокументыЭПД[0].ЭПД);
		ИначеЕсли ДокументыЭПД.Количество() > 1 Тогда
			МассивДокументов = Новый СписокЗначений;
			Для Каждого СтрТаб Из ДокументыЭПД Цикл
				МассивДокументов.Добавить(СтрТаб.ЭПД);	
			КонецЦикла;
			ПараметрыОткрытия = Новый Структура("СписокОбъектов", МассивДокументов);
			ОткрытьФорму("ЖурналДокументов.уатЭлектронныеПеревозочныеДокументы.Форма.ФормаВыбораЭПД", ПараметрыОткрытия);
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПриИзменении(Элемент)
	ТекДанные = Элементы.Список.ТекущиеДанные;
	Если Не ТекДанные = Неопределено И Не ТекДанные.Свойство("ГруппировкаСтроки") И ТекДанные.Мультимодальный И ТекДанные.ЭтоЭтап Тогда
		Оповестить("Изменен заказ грузоотправителя", ТекДанные.Ссылка);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	КлючиСтрок = Строки.ПолучитьКлючи();
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	уатЗаказГрузоотправителя.Ссылка КАК Ссылка,
	               |	уатЗаказГрузоотправителя.Мультимодальный КАК Мультимодальный,
	               |	уатЗаказГрузоотправителя.ЭтоЭтап КАК ЭтоЭтап,
	               |	уатЗаказГрузоотправителя.Проведен КАК Проведен
	               |ПОМЕСТИТЬ втЗаказы
	               |ИЗ
	               |	Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	               |ГДЕ
	               |	уатЗаказГрузоотправителя.Ссылка В(&мсвЗаказов)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	уатЭтапыМультимодальныхПеревозок_уэ.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя,
	               |	уатЭтапыМультимодальныхПеревозок_уэ.Этап КАК Этап
	               |ПОМЕСТИТЬ втЭтапы
	               |ИЗ
	               |	РегистрСведений.уатЭтапыМультимодальныхПеревозок_уэ КАК уатЭтапыМультимодальныхПеревозок_уэ
	               |ГДЕ
	               |	уатЭтапыМультимодальныхПеревозок_уэ.ЗаказГрузоотправителя В(&мсвЗаказов)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	втЭтапы.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя,
	               |	втЭтапы.Этап КАК Этап,
	               |	ВЫБОР
	               |		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЕСТЬNULL(уатСтатусыГрузов_уэСрезПоследних.Статус, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый))) > 1
	               |			ТОГДА ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Составной)
	               |		ИНАЧЕ МАКСИМУМ(ЕСТЬNULL(уатСтатусыГрузов_уэСрезПоследних.Статус, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый)))
	               |	КОНЕЦ КАК СтатусЗаказа
	               |ПОМЕСТИТЬ втСтатусыРодительскихЗаказов
	               |ИЗ
	               |	втЭтапы КАК втЭтапы
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатСтатусыГрузов_уэ.СрезПоследних(
	               |				,
	               |				Заказ В
	               |					(ВЫБРАТЬ
	               |						втЭтапы.Этап КАК Заказ
	               |					ИЗ
	               |						втЭтапы КАК втЭтапы)) КАК уатСтатусыГрузов_уэСрезПоследних
	               |		ПО (уатСтатусыГрузов_уэСрезПоследних.Заказ = втЭтапы.Этап)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	втЭтапы.ЗаказГрузоотправителя,
	               |	втЭтапы.Этап
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	втСтатусыРодительскихЗаказов.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя,
	               |	ВЫБОР
	               |		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЕСТЬNULL(втСтатусыРодительскихЗаказов.СтатусЗаказа, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый))) > 1
	               |			ТОГДА ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Составной)
	               |		ИНАЧЕ МАКСИМУМ(ЕСТЬNULL(втСтатусыРодительскихЗаказов.СтатусЗаказа, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый)))
	               |	КОНЕЦ КАК СтатусЗаказа
	               |ПОМЕСТИТЬ ТабСтатусовРодительскихЗаказов
	               |ИЗ
	               |	втСтатусыРодительскихЗаказов КАК втСтатусыРодительскихЗаказов
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	втСтатусыРодительскихЗаказов.ЗаказГрузоотправителя
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	уатСтатусыГрузов_уэСрезПоследних.Заказ КАК Заказ,
	               |	ВЫБОР
	               |		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЕСТЬNULL(уатСтатусыГрузов_уэСрезПоследних.Статус, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый))) > 1
	               |			ТОГДА ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Составной)
	               |		ИНАЧЕ МАКСИМУМ(ЕСТЬNULL(уатСтатусыГрузов_уэСрезПоследних.Статус, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый)))
	               |	КОНЕЦ КАК Статус
	               |ПОМЕСТИТЬ уатСтатусыГрузов_уэСрезПоследних
	               |ИЗ
	               |	РегистрСведений.уатСтатусыГрузов_уэ.СрезПоследних(, Заказ В (&мсвЗаказов)) КАК уатСтатусыГрузов_уэСрезПоследних
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	уатСтатусыГрузов_уэСрезПоследних.Заказ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	уатСтатусыСопроводительныхДокументовСрезПоследних.СопроводительныйДокумент.Основание КАК Основание,
	               |	КОЛИЧЕСТВО(уатСтатусыСопроводительныхДокументовСрезПоследних.СопроводительныйДокумент) КАК Всего,
	               |	СУММА(ВЫБОР
	               |			КОГДА уатСтатусыСопроводительныхДокументовСрезПоследних.Статус = ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.ОбработкаЗавершена)
	               |				ТОГДА 1
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК ОбработкаЗавершена
	               |ПОМЕСТИТЬ втСтатусыСопроводительныхДокументовСрезПоследних
	               |ИЗ
	               |	РегистрСведений.уатСтатусыСопроводительныхДокументов.СрезПоследних(, СопроводительныйДокумент.Основание В (&МсвЗаказов)) КАК уатСтатусыСопроводительныхДокументовСрезПоследних
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	уатСтатусыСопроводительныхДокументовСрезПоследних.СопроводительныйДокумент.Основание
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втЗаказы.Ссылка КАК Ссылка,
	               |	ВЫБОР
	               |		КОГДА втЗаказы.Мультимодальный
	               |				И НЕ втЗаказы.ЭтоЭтап
	               |			ТОГДА ЕСТЬNULL(ТабСтатусовРодительскихЗаказов.СтатусЗаказа, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый))
	               |		ИНАЧЕ ЕСТЬNULL(уатСтатусыГрузов_уэСрезПоследних.Статус, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый))
	               |	КОНЕЦ КАК СтатусЗаказа,
	               |	СУММА(ЕСТЬNULL(втСтатусыСопроводительныхДокументовСрезПоследних.Всего, 0)) <> 0 КАК НаличиеСопроводительныхДокументов,
	               |	ВЫБОР
	               |		КОГДА СУММА(втСтатусыСопроводительныхДокументовСрезПоследних.Всего) = СУММА(втСтатусыСопроводительныхДокументовСрезПоследних.ОбработкаЗавершена)
	               |			ТОГДА 3
	               |		КОГДА СУММА(ЕСТЬNULL(втСтатусыСопроводительныхДокументовСрезПоследних.Всего, 0)) = 0
	               |			ТОГДА 0
	               |		КОГДА СУММА(втСтатусыСопроводительныхДокументовСрезПоследних.ОбработкаЗавершена) = 0
	               |			ТОГДА 1
	               |		ИНАЧЕ 2
	               |	КОНЕЦ КАК СтатусОбработкиСопроводительныхДокументов
	               |ИЗ
	               |	втЗаказы КАК втЗаказы
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТабСтатусовРодительскихЗаказов КАК ТабСтатусовРодительскихЗаказов
	               |		ПО втЗаказы.Ссылка = ТабСтатусовРодительскихЗаказов.ЗаказГрузоотправителя
	               |		ЛЕВОЕ СОЕДИНЕНИЕ уатСтатусыГрузов_уэСрезПоследних КАК уатСтатусыГрузов_уэСрезПоследних
	               |		ПО втЗаказы.Ссылка = уатСтатусыГрузов_уэСрезПоследних.Заказ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ втСтатусыСопроводительныхДокументовСрезПоследних КАК втСтатусыСопроводительныхДокументовСрезПоследних
	               |		ПО втЗаказы.Ссылка = втСтатусыСопроводительныхДокументовСрезПоследних.Основание
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	втЗаказы.Ссылка,
	               |	ВЫБОР
	               |		КОГДА втЗаказы.Мультимодальный
	               |				И НЕ втЗаказы.ЭтоЭтап
	               |			ТОГДА ЕСТЬNULL(ТабСтатусовРодительскихЗаказов.СтатусЗаказа, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый))
	               |		ИНАЧЕ ЕСТЬNULL(уатСтатусыГрузов_уэСрезПоследних.Статус, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый))
	               |	КОНЕЦ";
	Запрос.УстановитьПараметр("мсвЗаказов", КлючиСтрок);

	ВыборкаЗаказ = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЗаказ.Следующий() Цикл
		СтрокаСписка        = Строки[ВыборкаЗаказ.Ссылка];	
		ДанныеСтрокаСписка  = СтрокаСписка.Данные;
		ДанныеСтрокаСписка.СтатусЗаказа = ВыборкаЗаказ.СтатусЗаказа; 
		ДанныеСтрокаСписка.СостояниеВыполненияСтрока = Строка(ДанныеСтрокаСписка.ПроцентВыполнения)
			+ "% " + Нстр("en = 'done'; ru = 'выполнено'");
		ДанныеСтрокаСписка.НаличиеСопроводительныхДокументов         = ВыборкаЗаказ.НаличиеСопроводительныхДокументов;
		ДанныеСтрокаСписка.СтатусОбработкиСопроводительныхДокументов = ВыборкаЗаказ.СтатусОбработкиСопроводительныхДокументов;
	КонецЦикла;   
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборОрганизацияПриИзменении(Элемент)
	УстановитьОтбор();
КонецПроцедуры

&НаКлиенте
Процедура ОтборСтатусПриИзменении(Элемент)
	УстановитьОтбор();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_ИсторияИзмененияСтатусов

&НаКлиенте
Процедура ИсторияИзмененияСтатусовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ИсторияИзмененияСтатусов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Поле = Элементы.ИсторияИзмененияСтатусовРегистратор И ЗначениеЗаполнено(ТекущиеДанные.Регистратор) Тогда 
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ТекущиеДанные.Регистратор);
	ИначеЕсли Поле = Элементы.ИсторияИзмененияСтатусовСтатус И ЗначениеЗаполнено(ТекущиеДанные.Статус) Тогда 
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ТекущиеДанные.Статус);
	ИначеЕсли Поле = Элементы.ИсторияИзмененияСтатусовГруппировка И (ТипЗнч(ТекущиеДанные.Группировка) = Тип("ДокументСсылка.уатЗаказГрузоотправителя")
			Или ТипЗнч(ТекущиеДанные.Группировка) = Тип("СправочникСсылка.уатГрузовыеМеста_уэ")) И ЗначениеЗаполнено(ТекущиеДанные.Группировка) Тогда 
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, ТекущиеДанные.Группировка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Элементы.Список);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ИзменитьВыделенные(Команда)
	
	ГрупповоеИзменениеОбъектовКлиент.ИзменитьВыделенные(Элементы.Список, Список);
	
КонецПроцедуры

&НаКлиенте
Процедура ИсторияСтатусов(Команда)
	
	ПоказыватьИсториюСтатусов = Не ПоказыватьИсториюСтатусов;
	
	УстановитьВидимостьИсторииСтатусов();
	
	Если ПоказыватьИсториюСтатусов Тогда 
		ПодключитьОбработчикОжидания("Подключаемый_ОбновитьИсториюИзмененияСтатусов", 0.5, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетИсторияЗаказа(Команда)
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МассивОбъектов = Новый Массив;
	МассивОбъектов.Добавить(ТекущиеДанные.Ссылка);
	УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.уатЗаказГрузоотправителя", "ЗаказНаТСИсторияЗаказа", МассивОбъектов, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОтчетАнализОтгрузки(Команда)
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = ПолучитьПараметрыОткрытияОтчетАнализОтгрузки(ТекущиеДанные.Ссылка);
	ОткрытьФорму("Отчет.уатАнализОтгрузки_уэ.Форма", ПараметрыОткрытия, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОтчетАнализПриемки(Команда)
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = ПолучитьПараметрыОткрытияОтчетАнализПриемки(ТекущиеДанные.Ссылка);
	ОткрытьФорму("Отчет.уатАнализПриемки_уэ.Форма", ПараметрыОткрытия, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОтчетОстаткиГрузовНаСкладахКомплектации(Команда)
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = ПолучитьПараметрыОткрытияОтчетОстаткиГрузовНаСкладахКомплектации(ТекущиеДанные.Ссылка);
	ОткрытьФорму("Отчет.уатОстаткиГрузовНаСкладахКомплектации_уэ.Форма", ПараметрыОткрытия, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОтчетГрузыВРейсах(Команда)
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = ПолучитьПараметрыОткрытияОтчетГрузыВРейсах(ТекущиеДанные.Ссылка);
	ОткрытьФорму("Отчет.уатГрузыВРейсах_уэ.Форма", ПараметрыОткрытия, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОтчетИсторияОперацийСГрузом(Команда)
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыОткрытия = ПолучитьПараметрыОткрытияОтчетИсторияОперацийСГрузом(ТекущиеДанные.Ссылка);
	ОткрытьФорму("Отчет.уатИсторияОперацийСГрузом_уэ.Форма", ПараметрыОткрытия, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРедакторЦепочкиДокументов(Команда)
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДопПараметры = Новый Структура("ЗаказНаТС", ТекущиеДанные.Ссылка);
	ОткрытьФорму("Обработка.уатРедакторЦепочкиДокументов_уэ.Форма.Форма", ДопПараметры, ЭтаФорма);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьКонтейнернуюПеревозку(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ТекущиеДанные.ЭтоШаблонПеревозки Тогда
		ТекстНСтр = НСтр("ru = 'Создание перевозки возможно только по Заказу на ТС с установленным флагом ""Шаблон""'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстНСтр);
	КонецЕсли;
	
	ДопПараметры = Новый Структура("ШаблонПеревозки, СоздатьКонтейнернуюПеревозку", ТекущиеДанные.Ссылка, Истина);
	ОткрытьФорму("Обработка.уатРедакторКонтейнернойПеревозки_уэ.Форма.Форма", ДопПараметры, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьПеревозку(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ТекущиеДанные.ЭтоШаблонПеревозки Тогда
		ТекстНСтр = НСтр("ru = 'Создание перевозки возможно только по Заказу на ТС с установленным флагом ""Шаблон""'");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстНСтр);
	КонецЕсли;
	
	ДопПараметры = Новый Структура("ШаблонПеревозки, СоздатьПеревозку", ТекущиеДанные.Ссылка, Истина);
	ОткрытьФорму("Обработка.уатРедакторКонтейнернойПеревозки_уэ.Форма.Форма", ДопПараметры, ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоТрекНомеру(Команда)
	ОткрытьФорму("ОбщаяФорма.уатФормаПоискаПоТрекНомеру",,,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Элементы.Список);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
&НаКлиенте
Процедура Подключаемый_ОбновитьКомандыЭДО() Экспорт
	
	ОбменСКонтрагентамиКлиент.ОбновитьКоманды(ЭтотОбъект, Элементы.Список);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьВидимостьСостоянияЭДО() Экспорт
	
	ОбменСКонтрагентамиКлиент.ОбработчикОбновленияВидимостьСостоянияЭДО(ЭтотОбъект, Элементы.СостояниеЭДО);
	
КонецПроцедуры 

&НаКлиенте
Процедура Подключаемый_ВыполнитьКомандуЭДО(Команда)
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено
		ИЛИ НЕ ЗначениеЗаполнено(ТекущиеДанные.ЭПД) Тогда
		Возврат;
	КонецЕсли;
	ЭлектронноеВзаимодействиеКлиент.ВыполнитьПодключаемуюКомандуЭДО(Команда, ЭтотОбъект, Новый Структура("Ссылка",ТекущиеДанные.ЭПД));
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбработчикОжиданияЭДО()

	ОбменСКонтрагентамиКлиент.ОбработчикОжиданияЭДО(ЭтотОбъект);

КонецПроцедуры

// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами

&НаКлиенте
Процедура Подключаемый_ОбновитьИсториюИзмененияСтатусов()
	
	ТекущиеДанные = Элементы.Список.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено 
		ИЛИ ТипЗнч(ТекущиеДанные) = Тип("СтрокаГруппировкиДинамическогоСписка")
		ИЛИ (ТипЗнч(ТекущиеДанные) = Тип("ДанныеФормыСтруктура")
			И НЕ ТекущиеДанные.Свойство("Ссылка")) Тогда
		Возврат;
	КонецЕсли;
	Если ТекущиеДанные.Ссылка = ТекущиеДанныеСсылка Тогда
		Возврат;
	КонецЕсли;
	
	ДокументСсылка		 = ТекущиеДанные.Ссылка;
	ТекущиеДанныеСсылка	 = ДокументСсылка;

	Если ПоказыватьИсториюСтатусов Тогда 
		ОбновитьИсториюИзмененияСтатусов(ДокументСсылка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЦветаСтатусов()
	
	мсвУдаляемыхЭлементов = Новый Массив();
	Для Каждого ЭлементУсловногоОформления Из УсловноеОформление.Элементы Цикл
		Если ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "Предустановленный" Тогда
			мсвУдаляемыхЭлементов.Добавить(ЭлементУсловногоОформления);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементУсловногоОформления Из мсвУдаляемыхЭлементов Цикл
		УсловноеОформление.Элементы.Удалить(ЭлементУсловногоОформления);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатСтатусы_уэ.Ссылка,
	|	уатСтатусы_уэ.Наименование,
	|	уатСтатусы_уэ.ЦветФонаПоУмолчанию,
	|	уатСтатусы_уэ.ЦветТекстаПоУмолчанию
	|ИЗ
	|	Справочник.уатСтатусы_уэ КАК уатСтатусы_уэ
	|ГДЕ
	|	НЕ уатСтатусы_уэ.ПометкаУдаления
	|	И уатСтатусы_уэ.ДействуетНаЗаказыГрузоотправителей";
	
	ВыборкаЦвета = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЦвета.Следующий() Цикл 
		ЦветФона   = Неопределено;
		ЦветТекста = Неопределено;
		
		ХранилищеЦветФона = ВыборкаЦвета.ЦветФонаПоУмолчанию;
		Если Не ХранилищеЦветФона = Неопределено Тогда 
			ДанныеЦветФона = ХранилищеЦветФона.Получить();
			Если Не ДанныеЦветФона = Неопределено И ТипЗнч(ДанныеЦветФона) = Тип("Цвет") Тогда
				ЦветФона = ДанныеЦветФона;
			КонецЕсли;
		КонецЕсли;
		
		ХранилищеЦветТекста = ВыборкаЦвета.ЦветТекстаПоУмолчанию;
		Если Не ХранилищеЦветТекста = Неопределено Тогда 
			ДанныеЦветТекста = ХранилищеЦветТекста.Получить();
			Если Не ДанныеЦветТекста = Неопределено И ТипЗнч(ДанныеЦветТекста) = Тип("Цвет") Тогда
				ЦветТекста = ДанныеЦветТекста;
			КонецЕсли;
		КонецЕсли;
		
		Если ЦветТекста = Неопределено И ЦветФона = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		
		ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Список.СтатусЗаказа");
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = ВыборкаЦвета.Ссылка;
		ЭлементОтбора.Использование  = Истина;
		
		Если Не ЦветТекста = Неопределено Тогда 
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветТекста);
		КонецЕсли;
		
		Если Не ЦветФона = Неопределено Тогда 
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветФона);
		КонецЕсли;
		
		ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "Предустановленный";
		ЭлементУсловногоОформления.Представление = НСтр("en='By status color';ru='По цвету статуса '") + ВыборкаЦвета.Наименование;
		ЭлементУсловногоОформления.Использование = Истина;
		
		ПолеОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("СтатусЗаказа");
		ПолеОформления.Использование = Истина;
		
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		
		ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ДеревоЗаказов.СтатусЗаказа");
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = ВыборкаЦвета.Ссылка;
		ЭлементОтбора.Использование  = Истина;
		
		Если Не ЦветТекста = Неопределено Тогда 
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветТекста);
		КонецЕсли;
		
		Если Не ЦветФона = Неопределено Тогда 
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветФона);
		КонецЕсли;
		
		ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "Предустановленный";
		ЭлементУсловногоОформления.Представление = НСтр("en='By status color';ru='По цвету статуса '") + ВыборкаЦвета.Наименование;
		ЭлементУсловногоОформления.Использование = Истина;
		
		ПолеОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ДеревоЗаказовСтатусЗаказа");
		ПолеОформления.Использование = Истина;
		
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		
		ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ИсторияИзмененияСтатусов.Статус");
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = ВыборкаЦвета.Ссылка;
		ЭлементОтбора.Использование  = Истина;
		
		Если Не ЦветТекста = Неопределено Тогда 
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветТекста);
		КонецЕсли;
		
		Если Не ЦветФона = Неопределено Тогда 
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветФона);
		КонецЕсли;
		
		ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "Предустановленный";
		ЭлементУсловногоОформления.Представление = НСтр("en='By status color';ru='По цвету статуса '") + ВыборкаЦвета.Наименование;
		ЭлементУсловногоОформления.Использование = Истина;
		
		ПолеОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ИсторияИзмененияСтатусовСтатус");
		ПолеОформления.Использование = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыборПослеВыбораСтатуса(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДополнительныеПараметры) И ТипЗнч(ДополнительныеПараметры) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") Тогда 
		Если РезультатЗакрытия.Статус = ПредопределенноеЗначение("Справочник.уатСтатусы_уэ.Закрыт") Тогда 
			Если ЗначениеЗаполнено(РезультатЗакрытия.ДатаУстановки) Тогда 
				СообщениеОшибки = "";
				флСуммаУслугИзменилась = Ложь;
				флПересчетИтогов = Ложь;
				ЗакрытиеЗаказаСервер(ДополнительныеПараметры, РезультатЗакрытия.ДатаУстановки, СообщениеОшибки, Истина, флСуммаУслугИзменилась, флПересчетИтогов);
				Если Не ПустаяСтрока(СообщениеОшибки) Тогда
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СообщениеОшибки);
				Иначе
					Если флСуммаУслугИзменилась И НЕ флПересчетИтогов Тогда
						ПоказатьПредупреждение(Неопределено, НСтр("en='Recalculation of tabular section ""Incomes"" was not done!';ru='Не выполнен пересчет табличной части ""Доходы""!'"));
					КонецЕсли;
					Элементы.Список.Обновить();
				КонецЕсли;
			КонецЕсли;
			
		Иначе 
			УстановитьСтатусБезОткрытияФормы(ДополнительныеПараметры, РезультатЗакрытия.Статус, РезультатЗакрытия.ДатаУстановки);
			Элементы.Список.Обновить();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьСтатусБезОткрытияФормы(ЗаказСсылка, НовыйСтатус, ДатаУстановкиСтатуса)
	
	Документы.уатЗаказГрузоотправителя.УстановитьСтатусЗаказа(ЗаказСсылка, НовыйСтатус, ДатаУстановкиСтатуса);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокПолейСортировки()
	
	Элементы.СортировкаСписок.СписокВыбора.Очистить();
	
	Для Каждого ТекПоле Из Список.Порядок.ДоступныеПоляПорядка.Элементы Цикл
		ПредставлениеТекПоля = ТекПоле.Заголовок;
		
		Если ТекПоле.Заголовок = "Статус заказа" Тогда
			ПредставлениеТекПоля = НСтр("en='Order status';ru='Статус заказа'");
		КонецЕсли;
		Если ТекПоле.Заголовок = "Статус проведения документа" Тогда
			ПредставлениеТекПоля = НСтр("en='Status of document posting';ru='Статус проведения документа'");
		КонецЕсли;
		Если ТекПоле.Заголовок = "Вид мультимодального заказа" Тогда
			ПредставлениеТекПоля = НСтр("en='Multimodal order type';ru='Вид мультимодального заказа'");
		КонецЕсли;
		Если ТекПоле.Заголовок = "Детализация закрытия" Тогда
			ПредставлениеТекПоля = НСтр("en='Closing details';ru='Детализация закрытия'");
		КонецЕсли;
		Если ТекПоле.Заголовок = "Комментарий" Тогда
			ПредставлениеТекПоля = НСтр("en='Comment';ru='Комментарий'");
		КонецЕсли;
		Если ТекПоле.Заголовок = "Название груза" Тогда
			ПредставлениеТекПоля = НСтр("en='Name of cargo';ru='Название груза'");
		КонецЕсли;
		Если ТекПоле.Заголовок = "Состояние выполнения" Тогда
			ПредставлениеТекПоля = НСтр("en='Execution state';ru='Состояние выполнения'");
		КонецЕсли;
		
		Элементы.СортировкаСписок.СписокВыбора.Добавить(Строка(ТекПоле.Поле), ПредставлениеТекПоля);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗакрытиеЗаказаСервер(ДокументСсылка, ДатаЗакрытия, СообщениеОшибки = "", Интерактивно = Ложь, флСуммаУслугИзменилась = Ложь, флПересчетИтогов = Ложь)
	Если ЗначениеЗаполнено(ДокументСсылка) Тогда
		Документы.уатЗаказГрузоотправителя.ЗакрытиеДокумента(ДокументСсылка, ДатаЗакрытия, СообщениеОшибки, Интерактивно, флСуммаУслугИзменилась);
		флПересчетИтогов = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ПользователиКлиентСервер.АвторизованныйПользователь(), "ЗаказНаТСПерерасчетИтоговПриПроведении");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьИсториюИзмененияСтатусов(ЗаказСсылка)
	
	ЕстьЭтапы = Ложь;
	ЕстьГрузы = Ложь;
	Строки = ИсторияИзмененияСтатусов.ПолучитьЭлементы();
	Строки.Очистить();
	
	СтруктураДерева = ОбновитьИсториюИзмененияСтатусовСервер(ЗаказСсылка, ЕстьЭтапы, ЕстьГрузы);
	СтруктураВДерево(СтруктураДерева.Строки, Строки);
	
	Если ЕстьЭтапы
		И ЕстьГрузы Тогда 
		Элементы.ИсторияИзмененияСтатусовГруппировка.Заголовок = НСтр("en='Period / Stage / Cargo';ru='Период / Этап / Груз'");
	ИначеЕсли ЕстьЭтапы Тогда 
		Элементы.ИсторияИзмененияСтатусовГруппировка.Заголовок = НСтр("en='Period / Stage';ru='Период / Этап'");
	ИначеЕсли ЕстьГрузы Тогда 
		Элементы.ИсторияИзмененияСтатусовГруппировка.Заголовок = НСтр("en='Period / Cargo';ru='Период / Груз'");
	Иначе 
		Элементы.ИсторияИзмененияСтатусовГруппировка.Заголовок = НСтр("en='Period';ru='Период'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбновитьИсториюИзмененияСтатусовСервер(ЗаказСсылка, ЕстьЭтапы, ЕстьГрузы)
	
	ИсторияИзмененияСтатусов = Новый ДеревоЗначений;
	ИсторияИзмененияСтатусов.Колонки.Добавить("Группировка");
	ИсторияИзмененияСтатусов.Колонки.Добавить("Статус");
	ИсторияИзмененияСтатусов.Колонки.Добавить("Регистратор");
	ИсторияИзмененияСтатусов.Колонки.Добавить("Порядок");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ЗаказСсылка", ЗаказСсылка);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатЭтапыМультимодальныхПеревозок_уэ.Этап КАК Этап
	|ИЗ
	|	РегистрСведений.уатЭтапыМультимодальныхПеревозок_уэ КАК уатЭтапыМультимодальныхПеревозок_уэ
	|ГДЕ
	|	уатЭтапыМультимодальныхПеревозок_уэ.ЗаказГрузоотправителя = &ЗаказСсылка";
	
	мсвЗаказы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Этап");
	мсвЗаказы.Добавить(ЗаказСсылка);
	
	Запрос.УстановитьПараметр("мсвЗаказы", мсвЗаказы);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатСтатусыГрузов_уэ.Период КАК Период,
	|	уатСтатусыГрузов_уэ.Регистратор КАК Регистратор,
	|	уатСтатусыГрузов_уэ.Заказ КАК Заказ,
	|	уатСтатусыГрузов_уэ.ГрузовоеМесто КАК ГрузовоеМесто,
	|	уатСтатусыГрузов_уэ.Статус КАК Статус,
	|	уатСтатусыГрузов_уэ.МоментВремени КАК МоментВремени
	|ИЗ
	|	РегистрСведений.уатСтатусыГрузов_уэ КАК уатСтатусыГрузов_уэ
	|ГДЕ
	|	уатСтатусыГрузов_уэ.Активность
	|	И уатСтатусыГрузов_уэ.Заказ В(&мсвЗаказы)
	|
	|УПОРЯДОЧИТЬ ПО
	|	уатСтатусыГрузов_уэ.МоментВремени
	|ИТОГИ
	|	МАКСИМУМ(Период)
	|ПО
	|	МоментВремени";
	
	ВыборкаРегистратор = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	кэшПредыдущиеСостояния = Новый ТаблицаЗначений();
	кэшПредыдущиеСостояния.Колонки.Добавить("Заказ",         Новый ОписаниеТипов("ДокументСсылка.уатЗаказГрузоотправителя"));
	кэшПредыдущиеСостояния.Колонки.Добавить("ГрузовоеМесто", Новый ОписаниеТипов("СправочникСсылка.уатГрузовыеМеста_уэ"));
	кэшПредыдущиеСостояния.Колонки.Добавить("Статус",        Новый ОписаниеТипов("СправочникСсылка.уатСтатусы_уэ"));
	Если уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП() Тогда
		ТипКолонки = Новый ОписаниеТипов("ДокументСсылка.уатОтклонениеГруза, ДокументСсылка.уатМаршрутныйЛист, ДокументСсылка.уатАктПриемки_уэ, ДокументСсылка.уатЗаказГрузоотправителя, ДокументСсылка.уатАктОтгрузки_уэ, ДокументСсылка.уатУстановкаСтатусаГруза_уэ, ДокументСсылка.уатПутевойЛист");
	ИначеЕсли уатОбщегоНазначенияПовтИсп.ВариантПоставкиПРОФ() Тогда
		ТипКолонки = Новый ОписаниеТипов("ДокументСсылка.уатОтклонениеГруза, ДокументСсылка.уатМаршрутныйЛист, ДокументСсылка.уатЗаказГрузоотправителя, ДокументСсылка.уатУстановкаСтатусаГруза_уэ, ДокументСсылка.уатПутевойЛист");
	КонецЕсли;
	кэшПредыдущиеСостояния.Колонки.Добавить("Регистратор", ТипКолонки);
	
	СчПорядка = 1;
	ЕстьЭтапы = Ложь;
	ЕстьГрузы = Ложь;
	
	СоответствиеЗаказов	 = Новый Соответствие();
	ПервыйЗаказ			 = Неопределено;
	Пока ВыборкаРегистратор.Следующий() Цикл 
		ВыборкаДетальныеЗаписи = ВыборкаРегистратор.Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл 
			НайдСтроки = кэшПредыдущиеСостояния.НайтиСтроки(Новый Структура("Заказ, ГрузовоеМесто", ВыборкаДетальныеЗаписи.Заказ, ВыборкаДетальныеЗаписи.ГрузовоеМесто));
			Если НайдСтроки.Количество() Тогда 
				НайдСтроки[0].Статус      = ВыборкаДетальныеЗаписи.Статус;
				НайдСтроки[0].Регистратор = ВыборкаДетальныеЗаписи.Регистратор;
			Иначе 
				НайдСтроки = кэшПредыдущиеСостояния.Добавить();
				НайдСтроки.Заказ         = ВыборкаДетальныеЗаписи.Заказ;
				НайдСтроки.ГрузовоеМесто = ВыборкаДетальныеЗаписи.ГрузовоеМесто;
				НайдСтроки.Статус        = ВыборкаДетальныеЗаписи.Статус;
				НайдСтроки.Регистратор   = ВыборкаДетальныеЗаписи.Регистратор;
				
				мсвСтрок = СоответствиеЗаказов.Получить(НайдСтроки.Заказ);
				Если мсвСтрок <> Неопределено Тогда
					мсвСтрок.Добавить(НайдСтроки);
					СоответствиеЗаказов.Вставить(НайдСтроки.Заказ, мсвСтрок);
				Иначе
					мсвСтрок = Новый Массив();
					мсвСтрок.Добавить(НайдСтроки);
					СоответствиеЗаказов.Вставить(НайдСтроки.Заказ, мсвСтрок);
					
					ПервыйЗаказ = НайдСтроки.Заказ;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		НоваяСтрокаИстории = ИсторияИзмененияСтатусов.Строки.Добавить();
		НоваяСтрокаИстории.Группировка = ВыборкаРегистратор.Период;
		НоваяСтрокаИстории.Порядок     = СчПорядка;
		
		СчПорядка = СчПорядка + 1;
		
		Если СоответствиеЗаказов.Количество() = 1
			И (НЕ ЗначениеЗаполнено(ПервыйЗаказ) ИЛИ ПервыйЗаказ = ЗаказСсылка) Тогда 
			ДеревоКэшСтроки = СоответствиеЗаказов.Получить(ПервыйЗаказ);
			Если ДеревоКэшСтроки.Количество() = 1 И НЕ ЗначениеЗаполнено(ДеревоКэшСтроки[0].ГрузовоеМесто) Тогда 
				НоваяСтрокаИстории.Статус      = ДеревоКэшСтроки[0].Статус;
				НоваяСтрокаИстории.Регистратор = ДеревоКэшСтроки[0].Регистратор;
			Иначе 
				ЕстьГрузы = Истина;
				Для Каждого СтрокаГМ Из ДеревоКэшСтроки Цикл 
					УзелВставкиГМ = НоваяСтрокаИстории.Строки.Добавить();
					УзелВставкиГМ.Группировка = СтрокаГМ.ГрузовоеМесто;
					УзелВставкиГМ.Статус      = СтрокаГМ.Статус;
					УзелВставкиГМ.Регистратор = СтрокаГМ.Регистратор;
				КонецЦикла;
			КонецЕсли;
		Иначе 
			ЕстьЭтапы = Истина;
			Для Каждого СтрокаЗаказа Из СоответствиеЗаказов Цикл 
				УзелВставкиЗаказа = НоваяСтрокаИстории.Строки.Добавить();
				УзелВставкиЗаказа.Группировка = СтрокаЗаказа.Ключ;
				
				Если СтрокаЗаказа.Значение.Количество() = 1
					И НЕ ЗначениеЗаполнено(СтрокаЗаказа.Значение[0].ГрузовоеМесто) Тогда 
					УзелВставкиЗаказа.Статус      = СтрокаЗаказа.Значение[0].Статус;
					УзелВставкиЗаказа.Регистратор = СтрокаЗаказа.Значение[0].Регистратор;
				Иначе 
					ЕстьГрузы = Истина;
					Для Каждого СтрокаГМ Из СтрокаЗаказа.Значение Цикл 
						УзелВставкиГМ = УзелВставкиЗаказа.Строки.Добавить();
						УзелВставкиГМ.Группировка = СтрокаГМ.ГрузовоеМесто;
						УзелВставкиГМ.Статус      = СтрокаГМ.Статус;
						УзелВставкиГМ.Регистратор = СтрокаГМ.Регистратор;
					КонецЦикла;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	УстановитьСтатусыРодителей(ИсторияИзмененияСтатусов.Строки);
	ИсторияИзмененияСтатусов.Строки.Сортировать("Порядок Убыв", Ложь);
	
	СтруктураДерева = Новый Структура();
	ДеревоВСтруктуру(ИсторияИзмененияСтатусов.Строки, СтруктураДерева);
	
	Возврат СтруктураДерева;
	
КонецФункции

&НаСервереБезКонтекста
Функция ДеревоВСтруктуру(СтрокиДерева, СтруктураДерева)

	МассивСтрок = Новый Массив();
	
	Для Каждого Строка Из СтрокиДерева Цикл
				
		ДанныеСтроки = ОбщегоНазначения.СтрокаТаблицыЗначенийВСтруктуру(Строка);
		ДанныеСтроки.Вставить("Строки", Новый Структура);
		
		ДеревоВСтруктуру(Строка.Строки, ДанныеСтроки);	
		
		МассивСтрок.Добавить(ДанныеСтроки);
		
	КонецЦикла;
	
	СтруктураДерева.Вставить("Строки", МассивСтрок);
	
КонецФункции

&НаКлиенте
Процедура СтруктураВДерево(СтруктураДерева, СтрокаДерева)

	Для Каждого Строка Из СтруктураДерева Цикл
				
		ДанныеСтроки = СтрокаДерева.Добавить();
		ЗаполнитьЗначенияСвойств(ДанныеСтроки, Строка);
		
		Строки = Строка.Строки;
		Если Строки.Количество() <> 0 Тогда
			СтруктураВДерево(Строки, ДанныеСтроки.ПолучитьЭлементы());
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция УстановитьСтатусыРодителей(КоллекцияОбхода)
	
	ПредСтатус = Неопределено;
	
	Для Каждого ТекУзел Из КоллекцияОбхода Цикл 
		Если ТекУзел.Строки.Количество() Тогда 
			ТекУзел.Статус = УстановитьСтатусыРодителей(ТекУзел.Строки);
		КонецЕсли;
		
		Если ПредСтатус = Неопределено Тогда 
			ПредСтатус = ТекУзел.Статус;
		ИначеЕсли Не ПредСтатус = ТекУзел.Статус Тогда 
			ПредСтатус = Справочники.уатСтатусы_уэ.Составной;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПредСтатус;
	
КонецФункции // УстановитьСтатусыРодителей()

&НаКлиенте
Процедура УстановитьВидимостьИсторииСтатусов()
	
	Элементы.ФормаИсторияСтатусов.Пометка = ПоказыватьИсториюСтатусов;
	
	Элементы.ИсторияИзмененияСтатусов.Видимость = ПоказыватьИсториюСтатусов;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьПользовательскиеНастройки(ПоказыватьИсториюСтатусов)
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураНастроек = Новый Структура();
	
	СтруктураНастроек.Вставить("ПоказыватьИсториюСтатусов", ПоказыватьИсториюСтатусов);
	
	ХранилищеНастроекДанныхФорм.Сохранить("Документ.уатЗаказГрузоотправителя.Форма.ФормаСписка", "уатЗаказГрузоотправителя_НастройкиСписка", СтруктураНастроек);
	
	УстановитьПривилегированныйРежим(Ложь);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьПользовательскиеНастройки()
	
	СтруктураНастроек = ХранилищеНастроекДанныхФорм.Загрузить("Документ.уатЗаказГрузоотправителя.Форма.ФормаСписка", "уатЗаказГрузоотправителя_НастройкиСписка");
	
	Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
		СтруктураНастроек.Свойство("ПоказыватьИсториюСтатусов", ПоказыватьИсториюСтатусов);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПараметрыОткрытияОтчетАнализОтгрузки(Ссылка)
	Возврат Документы.уатЗаказГрузоотправителя.ПолучитьПараметрыОткрытияОтчетАнализОтгрузки(Ссылка);
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПараметрыОткрытияОтчетАнализПриемки(Ссылка)
	Возврат Документы.уатЗаказГрузоотправителя.ПолучитьПараметрыОткрытияОтчетАнализПриемки(Ссылка);
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПараметрыОткрытияОтчетОстаткиГрузовНаСкладахКомплектации(Ссылка)
	Возврат Документы.уатЗаказГрузоотправителя.ПолучитьПараметрыОткрытияОтчетОстаткиГрузовНаСкладахКомплектации(Ссылка);
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПараметрыОткрытияОтчетГрузыВРейсах(Ссылка)
	Возврат Документы.уатЗаказГрузоотправителя.ПолучитьПараметрыОткрытияОтчетГрузыВРейсах(Ссылка);
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПараметрыОткрытияОтчетИсторияОперацийСГрузом(Ссылка)
	Возврат Документы.уатЗаказГрузоотправителя.ПолучитьПараметрыОткрытияОтчетИсторияОперацийСГрузом(Ссылка);
КонецФункции

&НаКлиенте
Процедура УстановитьОтбор()
	Если ЗначениеЗаполнено(ОтборСтатус)
		ИЛИ ЗначениеЗаполнено(ОтборСтатусОбработкиСопроводительныхДокументов) Тогда
		МассивЗаказовДляСтатусов = ПолучитьМассивЗаказовПоСтатусам(ОтборСтатус, ОтборСтатусОбработкиСопроводительныхДокументов);
		Список.Параметры.УстановитьЗначениеПараметра("ОтборСтатус", Истина);
		Список.Параметры.УстановитьЗначениеПараметра("МассивЗаказовДляСтатусов", МассивЗаказовДляСтатусов);
	Иначе
		Список.Параметры.УстановитьЗначениеПараметра("ОтборСтатус", Ложь);
		Список.Параметры.УстановитьЗначениеПараметра("МассивЗаказовДляСтатусов", Новый Массив);
	КонецЕсли;
	Если ЗначениеЗаполнено(ОтборОрганизация) Тогда
		уатОбщегоНазначенияКлиент.УстановитьОтборУСписка(Список.Отбор, "Организация", ОтборОрганизация);
	Иначе
		уатОбщегоНазначенияКлиент.УстановитьОтборУСписка(Список.Отбор, "Организация",,, Ложь);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМассивЗаказовПоСтатусам(Статус, СтатусОбработкиСопроводительныхДокументов)
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	уатЗаказГрузоотправителя.Ссылка КАК Ссылка,
	               |	уатЗаказГрузоотправителя.Мультимодальный КАК Мультимодальный,
	               |	уатЗаказГрузоотправителя.ЭтоЭтап КАК ЭтоЭтап,
	               |	уатЗаказГрузоотправителя.Проведен КАК Проведен
	               |ПОМЕСТИТЬ втЗаказы
	               |ИЗ
	               |	Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	уатЭтапыМультимодальныхПеревозок_уэ.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя,
	               |	уатЭтапыМультимодальныхПеревозок_уэ.Этап КАК Этап
	               |ПОМЕСТИТЬ втЭтапы
	               |ИЗ
	               |	РегистрСведений.уатЭтапыМультимодальныхПеревозок_уэ КАК уатЭтапыМультимодальныхПеревозок_уэ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	втЭтапы.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя,
	               |	втЭтапы.Этап КАК Этап,
	               |	ВЫБОР
	               |		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЕСТЬNULL(уатСтатусыГрузов_уэСрезПоследних.Статус, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый))) > 1
	               |			ТОГДА ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Составной)
	               |		ИНАЧЕ МАКСИМУМ(ЕСТЬNULL(уатСтатусыГрузов_уэСрезПоследних.Статус, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый)))
	               |	КОНЕЦ КАК СтатусЗаказа
	               |ПОМЕСТИТЬ втСтатусыРодительскихЗаказов
	               |ИЗ
	               |	втЭтапы КАК втЭтапы
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатСтатусыГрузов_уэ.СрезПоследних(
	               |				,
	               |				Заказ В
	               |					(ВЫБРАТЬ
	               |						втЭтапы.Этап КАК Заказ
	               |					ИЗ
	               |						втЭтапы КАК втЭтапы)) КАК уатСтатусыГрузов_уэСрезПоследних
	               |		ПО (уатСтатусыГрузов_уэСрезПоследних.Заказ = втЭтапы.Этап)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	втЭтапы.ЗаказГрузоотправителя,
	               |	втЭтапы.Этап
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	втСтатусыРодительскихЗаказов.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя,
	               |	ВЫБОР
	               |		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЕСТЬNULL(втСтатусыРодительскихЗаказов.СтатусЗаказа, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый))) > 1
	               |			ТОГДА ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Составной)
	               |		ИНАЧЕ МАКСИМУМ(ЕСТЬNULL(втСтатусыРодительскихЗаказов.СтатусЗаказа, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый)))
	               |	КОНЕЦ КАК СтатусЗаказа
	               |ПОМЕСТИТЬ ТабСтатусовРодительскихЗаказов
	               |ИЗ
	               |	втСтатусыРодительскихЗаказов КАК втСтатусыРодительскихЗаказов
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	втСтатусыРодительскихЗаказов.ЗаказГрузоотправителя
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	уатСтатусыГрузов_уэСрезПоследних.Заказ КАК Заказ,
	               |	ВЫБОР
	               |		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЕСТЬNULL(уатСтатусыГрузов_уэСрезПоследних.Статус, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый))) > 1
	               |			ТОГДА ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Составной)
	               |		ИНАЧЕ МАКСИМУМ(ЕСТЬNULL(уатСтатусыГрузов_уэСрезПоследних.Статус, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый)))
	               |	КОНЕЦ КАК Статус
	               |ПОМЕСТИТЬ уатСтатусыГрузов_уэСрезПоследних
	               |ИЗ
	               |	РегистрСведений.уатСтатусыГрузов_уэ.СрезПоследних(, ) КАК уатСтатусыГрузов_уэСрезПоследних
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	уатСтатусыГрузов_уэСрезПоследних.Заказ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	уатСтатусыСопроводительныхДокументовСрезПоследних.СопроводительныйДокумент.Основание КАК Основание,
	               |	КОЛИЧЕСТВО(уатСтатусыСопроводительныхДокументовСрезПоследних.СопроводительныйДокумент) КАК Всего,
	               |	СУММА(ВЫБОР
	               |			КОГДА уатСтатусыСопроводительныхДокументовСрезПоследних.Статус = ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.ОбработкаЗавершена)
	               |				ТОГДА 1
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК ОбработкаЗавершена
	               |ПОМЕСТИТЬ втСтатусыСопроводительныхДокументовСрезПоследних
	               |ИЗ
	               |	РегистрСведений.уатСтатусыСопроводительныхДокументов.СрезПоследних(, ) КАК уатСтатусыСопроводительныхДокументовСрезПоследних
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	уатСтатусыСопроводительныхДокументовСрезПоследних.СопроводительныйДокумент.Основание
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втЗаказы.Ссылка КАК Ссылка,
	               |	ВЫБОР
	               |		КОГДА втЗаказы.Мультимодальный
	               |				И НЕ втЗаказы.ЭтоЭтап
	               |			ТОГДА ЕСТЬNULL(ТабСтатусовРодительскихЗаказов.СтатусЗаказа, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый))
	               |		ИНАЧЕ ЕСТЬNULL(уатСтатусыГрузов_уэСрезПоследних.Статус, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый))
	               |	КОНЕЦ КАК СтатусЗаказа,
	               |	СУММА(ЕСТЬNULL(втСтатусыСопроводительныхДокументовСрезПоследних.Всего, 0)) <> 0 КАК НаличиеСопроводительныхДокументов,
	               |	ВЫБОР
	               |		КОГДА СУММА(втСтатусыСопроводительныхДокументовСрезПоследних.Всего) = СУММА(втСтатусыСопроводительныхДокументовСрезПоследних.ОбработкаЗавершена)
	               |			ТОГДА ""обработка завершена""
	               |		КОГДА СУММА(ЕСТЬNULL(втСтатусыСопроводительныхДокументовСрезПоследних.Всего, 0)) = 0
	               |			ТОГДА ""не введены""
	               |		КОГДА СУММА(втСтатусыСопроводительныхДокументовСрезПоследних.ОбработкаЗавершена) = 0
	               |			ТОГДА ""обработка не завершена""
	               |		ИНАЧЕ ""обработка в работе""
	               |	КОНЕЦ КАК СтатусОбработкиСопроводительныхДокументов
	               |ПОМЕСТИТЬ втРезультат
	               |ИЗ
	               |	втЗаказы КАК втЗаказы
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТабСтатусовРодительскихЗаказов КАК ТабСтатусовРодительскихЗаказов
	               |		ПО втЗаказы.Ссылка = ТабСтатусовРодительскихЗаказов.ЗаказГрузоотправителя
	               |		ЛЕВОЕ СОЕДИНЕНИЕ уатСтатусыГрузов_уэСрезПоследних КАК уатСтатусыГрузов_уэСрезПоследних
	               |		ПО втЗаказы.Ссылка = уатСтатусыГрузов_уэСрезПоследних.Заказ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ втСтатусыСопроводительныхДокументовСрезПоследних КАК втСтатусыСопроводительныхДокументовСрезПоследних
	               |		ПО втЗаказы.Ссылка = втСтатусыСопроводительныхДокументовСрезПоследних.Основание
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	втЗаказы.Ссылка,
	               |	ВЫБОР
	               |		КОГДА втЗаказы.Мультимодальный
	               |				И НЕ втЗаказы.ЭтоЭтап
	               |			ТОГДА ЕСТЬNULL(ТабСтатусовРодительскихЗаказов.СтатусЗаказа, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый))
	               |		ИНАЧЕ ЕСТЬNULL(уатСтатусыГрузов_уэСрезПоследних.Статус, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый))
	               |	КОНЕЦ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втРезультат.Ссылка КАК Ссылка,
	               |	втРезультат.СтатусЗаказа КАК СтатусЗаказа,
	               |	втРезультат.НаличиеСопроводительныхДокументов КАК НаличиеСопроводительныхДокументов,
	               |	втРезультат.СтатусОбработкиСопроводительныхДокументов КАК СтатусОбработкиСопроводительныхДокументов
	               |ИЗ
	               |	втРезультат КАК втРезультат
	               |ГДЕ  ";
	Если ЗначениеЗаполнено(Статус) 
		И ЗначениеЗаполнено(СтатусОбработкиСопроводительныхДокументов) Тогда
		Запрос.Текст = Запрос.Текст + "
		|	втРезультат.СтатусЗаказа = &Статус
		|	И втРезультат.СтатусОбработкиСопроводительныхДокументов = &СтатусОбработкиСопроводительныхДокументов";
	ИначеЕсли ЗначениеЗаполнено(Статус) Тогда
		Запрос.Текст = Запрос.Текст + "
		|	втРезультат.СтатусЗаказа = &Статус";
	ИначеЕсли ЗначениеЗаполнено(СтатусОбработкиСопроводительныхДокументов) Тогда
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	уатЗаказГрузоотправителя.Ссылка КАК Ссылка,
		               |	уатЗаказГрузоотправителя.Мультимодальный КАК Мультимодальный,
		               |	уатЗаказГрузоотправителя.ЭтоЭтап КАК ЭтоЭтап,
		               |	уатЗаказГрузоотправителя.Проведен КАК Проведен
		               |ПОМЕСТИТЬ втЗаказы
		               |ИЗ
		               |	Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	уатСтатусыСопроводительныхДокументовСрезПоследних.СопроводительныйДокумент.Основание КАК Основание,
		               |	КОЛИЧЕСТВО(уатСтатусыСопроводительныхДокументовСрезПоследних.СопроводительныйДокумент) КАК Всего,
		               |	СУММА(ВЫБОР
		               |			КОГДА уатСтатусыСопроводительныхДокументовСрезПоследних.Статус = ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.ОбработкаЗавершена)
		               |				ТОГДА 1
		               |			ИНАЧЕ 0
		               |		КОНЕЦ) КАК ОбработкаЗавершена
		               |ПОМЕСТИТЬ втСтатусыСопроводительныхДокументовСрезПоследних
		               |ИЗ
		               |	РегистрСведений.уатСтатусыСопроводительныхДокументов.СрезПоследних(, ) КАК уатСтатусыСопроводительныхДокументовСрезПоследних
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	уатСтатусыСопроводительныхДокументовСрезПоследних.СопроводительныйДокумент.Основание
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	ВЫБОР
		               |		КОГДА СУММА(втСтатусыСопроводительныхДокументовСрезПоследних.Всего) = СУММА(втСтатусыСопроводительныхДокументовСрезПоследних.ОбработкаЗавершена)
		               |			ТОГДА ""обработка завершена""
		               |		КОГДА СУММА(ЕСТЬNULL(втСтатусыСопроводительныхДокументовСрезПоследних.Всего, 0)) = 0
		               |			ТОГДА ""не введены""
		               |		КОГДА СУММА(втСтатусыСопроводительныхДокументовСрезПоследних.ОбработкаЗавершена) = 0
		               |			ТОГДА ""обработка не завершена""
		               |		ИНАЧЕ ""обработка в работе""
		               |	КОНЕЦ КАК СтатусОбработкиСопроводительныхДокументов,
		               |	втЗаказы.Ссылка КАК Ссылка
		               |ПОМЕСТИТЬ втРезультат
		               |ИЗ
		               |	втЗаказы КАК втЗаказы
		               |		ЛЕВОЕ СОЕДИНЕНИЕ втСтатусыСопроводительныхДокументовСрезПоследних КАК втСтатусыСопроводительныхДокументовСрезПоследних
		               |		ПО втЗаказы.Ссылка = втСтатусыСопроводительныхДокументовСрезПоследних.Основание
		               |
		               |СГРУППИРОВАТЬ ПО
		               |	втЗаказы.Ссылка
		               |;
		               |
		               |////////////////////////////////////////////////////////////////////////////////
		               |ВЫБРАТЬ
		               |	втРезультат.СтатусОбработкиСопроводительныхДокументов КАК СтатусОбработкиСопроводительныхДокументов,
		               |	втРезультат.Ссылка КАК Ссылка
		               |ИЗ
		               |	втРезультат КАК втРезультат
		               |ГДЕ
		               |	втРезультат.СтатусОбработкиСопроводительныхДокументов = &СтатусОбработкиСопроводительныхДокументов";
	КонецЕсли;
	Запрос.УстановитьПараметр("Статус", Статус);
	Запрос.УстановитьПараметр("СтатусОбработкиСопроводительныхДокументов", СтатусОбработкиСопроводительныхДокументов);
	
	ВыборкаЗаказ = Запрос.Выполнить().Выбрать();
	
	МассивЗаказовДляСтатусов = Новый Массив();
	Пока ВыборкаЗаказ.Следующий() Цикл
		МассивЗаказовДляСтатусов.Добавить(ВыборкаЗаказ.Ссылка);
	КонецЦикла;

	Возврат МассивЗаказовДляСтатусов;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьДокументыЭПД(Ссылка)
	
	МассивДокументов = Новый Массив();
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	               |	уатСвязанныеДокументыЭПД.ЭПД КАК ЭПД
	               |ИЗ
	               |	РегистрСведений.уатСвязанныеДокументыЭПД КАК уатСвязанныеДокументыЭПД
	               |ГДЕ
	               |	уатСвязанныеДокументыЭПД.ЗаказНаТС = &Ссылка";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивДокументов.Добавить(Новый Структура("ЭПД", Выборка.ЭПД));
	КонецЦикла;
	
	Возврат МассивДокументов;
	
КонецФункции

#КонецОбласти

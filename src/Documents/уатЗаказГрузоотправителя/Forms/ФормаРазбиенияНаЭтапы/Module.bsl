
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	СтрокаПунктаОтправления = ТаблицаПунктов.Добавить();
	Параметры.Свойство("АдресОтправления", СтрокаПунктаОтправления.Пункт);
	Параметры.Свойство("ОтправлениеС",     СтрокаПунктаОтправления.ОтправлениеС);
	Параметры.Свойство("ОтправлениеПо",    СтрокаПунктаОтправления.ОтправлениеПо);
	
	СтрокаПунктаНазначения = ТаблицаПунктов.Добавить();
	Параметры.Свойство("АдресНазначения", СтрокаПунктаНазначения.Пункт);
	Параметры.Свойство("ДоставкаС",       СтрокаПунктаНазначения.ДоставкаС);
	Параметры.Свойство("ДоставкаПо",      СтрокаПунктаНазначения.ДоставкаПо);
	
	Параметры.Свойство("ИспользоватьВременныеОкна", ИспользоватьВременныеОкна);
	Параметры.Свойство("ЭтоШаблонПеревозки",        ЭтоШаблонПеревозки);
	Если Параметры.Свойство("Маршрут") И ЗначениеЗаполнено(Параметры.Маршрут) Тогда
		ЗаполнитьПоМаршрутуСервер(Параметры.Маршрут);
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если ТаблицаПунктов.Количество() > 0 Тогда
		ЗаполнитьВременныеОкна(Ложь);
	КонецЕсли;
	УстановитьУсловноеОформление();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаПунктов

&НаКлиенте
Процедура ТаблицаПунктовПриИзменении(Элемент)
	УстановитьУсловноеОформление();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПунктовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И ТаблицаПунктов.Количество() > 2 Тогда
		// Делаем новую строку не последней, а предпоследней, 
		// т.к. считается, что первый и последний пункты получены из родительского заказа и не изменяются.
		ИндексСтроки = ТаблицаПунктов.Количество() - 1;
		ТаблицаПунктов.Сдвинуть(ИндексСтроки, -1);
		УстановитьУсловноеОформление();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПунктовПунктПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаПунктов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьВременныеОкнаПункта(ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполнитьРазбиение(Команда)
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	ПоляПараметровЭтапов = "ОтправлениеС, ОтправлениеПо, ДоставкаС, ДоставкаПо, ДатаОтправленияПлан, ДатаПрибытияПлан,
		|АдресОтправления, АдресНазначения";
	
	// Для шаблонов перевозки даты не актуальны. Отбрасываем их, оставляем только время.
	Если ЭтоШаблонПеревозки Тогда
		Для Каждого ТекСтрока Из ТаблицаПунктов Цикл
			ТекСтрока.ОтправлениеС        = ВремяБезДаты(ТекСтрока.ОтправлениеС);
			ТекСтрока.ОтправлениеПо       = ВремяБезДаты(ТекСтрока.ОтправлениеПо);
			ТекСтрока.ДатаОтправленияПлан = ВремяБезДаты(ТекСтрока.ДатаОтправленияПлан);
			ТекСтрока.ДоставкаС           = ВремяБезДаты(ТекСтрока.ДоставкаС);
			ТекСтрока.ДоставкаПо          = ВремяБезДаты(ТекСтрока.ДоставкаПо);
			ТекСтрока.ДатаПрибытияПлан    = ВремяБезДаты(ТекСтрока.ДатаПрибытияПлан);
		КонецЦикла;
	КонецЕсли;
	
	МассивЭтапов = Новый Массив;
	Для Сч = 0 По ТаблицаПунктов.Количество()-2 Цикл
		ПараметрыЭтапа = Новый Структура(ПоляПараметровЭтапов);
		ПараметрыЭтапа.АдресОтправления    = ТаблицаПунктов[Сч].Пункт;
		ПараметрыЭтапа.ОтправлениеС        = ТаблицаПунктов[Сч].ОтправлениеС;
		ПараметрыЭтапа.ОтправлениеПо       = ТаблицаПунктов[Сч].ОтправлениеПо;
		ПараметрыЭтапа.ДатаОтправленияПлан = ТаблицаПунктов[Сч].ДатаОтправленияПлан;
		
		ПараметрыЭтапа.АдресНазначения     = ТаблицаПунктов[Сч+1].Пункт;
		ПараметрыЭтапа.ДоставкаС           = ТаблицаПунктов[Сч+1].ДоставкаС;
		ПараметрыЭтапа.ДоставкаПо          = ТаблицаПунктов[Сч+1].ДоставкаПо;
		ПараметрыЭтапа.ДатаПрибытияПлан    = ТаблицаПунктов[Сч+1].ДатаПрибытияПлан;
		МассивЭтапов.Добавить(ПараметрыЭтапа);
	КонецЦикла;
		
	Результат = Новый Структура("ОтправлениеС, ОтправлениеПо, ДоставкаС, ДоставкаПо, АдресОтправления, АдресНазначения");
	Если ТаблицаПунктов.Количество() > 0 Тогда
		СтрокаОтправления = ТаблицаПунктов[0];
		Результат.АдресОтправления = СтрокаОтправления.Пункт;
		Результат.ОтправлениеС     = СтрокаОтправления.ОтправлениеС;
		Результат.ОтправлениеПо    = СтрокаОтправления.ОтправлениеПо;
	КонецЕсли;
	Если ТаблицаПунктов.Количество() > 1 Тогда
		СтрокаНазначения = ТаблицаПунктов[ТаблицаПунктов.Количество()-1];
		Результат.АдресНазначения = СтрокаНазначения.Пункт;
		Результат.ДоставкаС       = СтрокаНазначения.ДоставкаС;
		Результат.ДоставкаПо      = СтрокаНазначения.ДоставкаПо;
	КонецЕсли;
	Результат.Вставить("МассивЭтапов", МассивЭтапов);
	Закрыть(Результат);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоМаршруту(Команда)
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЗаполнитьПоМаршрутуЗавершение", ЭтаФорма);
	ОткрытьФорму("Справочник.уатМаршруты.ФормаВыбора", , ЭтаФорма, , , , ОповещениеОЗакрытии);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьВидимость()
	
	Элементы.ТаблицаПунктовГруппаОтправлениеС.Видимость      = ИспользоватьВременныеОкна;
	Элементы.ТаблицаПунктовОтправлениеСДата.Видимость        = Не ЭтоШаблонПеревозки;
	Элементы.ТаблицаПунктовГруппаОтправлениеПо.Видимость     = ИспользоватьВременныеОкна;
	Элементы.ТаблицаПунктовОтправлениеПоДата.Видимость       = Не ЭтоШаблонПеревозки;
	Элементы.ТаблицаПунктовГруппаДоставкаС.Видимость         = ИспользоватьВременныеОкна;
	Элементы.ТаблицаПунктовДоставкаСДата.Видимость           = Не ЭтоШаблонПеревозки;
	Элементы.ТаблицаПунктовГруппаДоставкаПо.Видимость        = ИспользоватьВременныеОкна;
	Элементы.ТаблицаПунктовДоставкаПоДата.Видимость          = Не ЭтоШаблонПеревозки;
	Элементы.ТаблицаПунктовДатаОтправленияПланДата.Видимость = Не ЭтоШаблонПеревозки;
	Элементы.ТаблицаПунктовДатаПрибытияПланДата.Видимость    = Не ЭтоШаблонПеревозки;;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоМаршрутуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	Если ЗначениеЗаполнено(Результат) И ТипЗнч(Результат) = Тип("СправочникСсылка.уатМаршруты") Тогда
		ЗаполнитьПоМаршрутуСервер(Результат);
		ЗаполнитьВременныеОкна(Истина);
		УстановитьУсловноеОформление();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПоМаршрутуСервер(Маршрут)
	
	// Сохраняем временные окна из первой и последней строки, 
	// так как они являются окнами отправления/прибытия по заказу в целом
	Если ТаблицаПунктов.Количество() > 0 Тогда
		ОтправлениеС = ТаблицаПунктов[0].ОтправлениеС;
		ОтправлениеПо = ТаблицаПунктов[0].ОтправлениеПо;
	Иначе
		ОтправлениеС = НачалоДня(ТекущаяДатаСеанса());
		ОтправлениеПо = КонецДня(ТекущаяДатаСеанса());
	КонецЕсли;
	Если ТаблицаПунктов.Количество() > 1 Тогда
		ДоставкаС = ТаблицаПунктов[ТаблицаПунктов.Количество()-1].ДоставкаС;
		ДоставкаПо = ТаблицаПунктов[ТаблицаПунктов.Количество()-1].ДоставкаПо;
	Иначе
		ДоставкаС = НачалоДня(ТекущаяДатаСеанса());
		ДоставкаПо = КонецДня(ТекущаяДатаСеанса());
	КонецЕсли;
	
	ТаблицаПунктов.Очистить();
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ
	|	уатМаршруты.ПредставлениеМаршрутаОднимПунктом КАК ПредставлениеМаршрутаОднимПунктом,
	|	уатМаршрутыЭтапы.НомерСтроки КАК НомерСтроки,
	|	уатМаршрутыЭтапы.ПунктОтправления КАК ПунктОтправления,
	|	уатМаршрутыЭтапы.ПунктПрибытия КАК ПунктПрибытия
	|ИЗ
	|	Справочник.уатМаршруты КАК уатМаршруты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.уатМаршруты.Этапы КАК уатМаршрутыЭтапы
	|		ПО уатМаршруты.Ссылка = уатМаршрутыЭтапы.Ссылка
	|ГДЕ
	|	уатМаршруты.Ссылка = &Ссылка
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерСтроки";
	Запрос.УстановитьПараметр("Ссылка", Маршрут);
	Выборка = Запрос.Выполнить().Выбрать();
	ПредыдущийПункт = Справочники.уатПунктыНазначения.ПустаяСсылка();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ПредставлениеМаршрутаОднимПунктом Тогда
			НоваяСтрока = ТаблицаПунктов.Добавить();
			НоваяСтрока.Пункт = Выборка.ПунктОтправления;
		Иначе
			Если Выборка.ПунктОтправления <> ПредыдущийПункт Тогда
				НоваяСтрока = ТаблицаПунктов.Добавить();
				НоваяСтрока.Пункт = Выборка.ПунктОтправления;
			КонецЕсли;
			НоваяСтрока = ТаблицаПунктов.Добавить();
			НоваяСтрока.Пункт = Выборка.ПунктПрибытия;
			ПредыдущийПункт = Выборка.ПунктПрибытия;
		КонецЕсли;
	КонецЦикла;
	
	// Восстанавливаем временные окна в первой и последней строках
	Если ТаблицаПунктов.Количество() > 0 Тогда
		ТаблицаПунктов[0].ОтправлениеС = ОтправлениеС;
		ТаблицаПунктов[0].ОтправлениеПо = ОтправлениеПо;
	КонецЕсли;
	Если ТаблицаПунктов.Количество() > 1 Тогда
		ТаблицаПунктов[ТаблицаПунктов.Количество()-1].ДоставкаС = ДоставкаС;
		ТаблицаПунктов[ТаблицаПунктов.Количество()-1].ДоставкаПо = ДоставкаПо;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВременныеОкнаПункта(ТекущиеДанныеПункта)
	
	Если Не ИспользоватьВременныеОкна Тогда
		Возврат;
	КонецЕсли;
	
	ВремяДоступности = уатОбщегоНазначения_проф.ПолучитьВремяДоступностиПункта(ТекущиеДанныеПункта.Пункт);
	ПустаяДата = Дата(1,1,1,0,0,0);
	мВремяС  = ВремяДоступности.ВремяДоступностиС - ПустаяДата;
	Если ЗначениеЗаполнено(ВремяДоступности.ВремяДоступностиПо) Тогда
		мВремяПо = ВремяДоступности.ВремяДоступностиПо - ПустаяДата;
	Иначе
		мВремяПо = КонецДня(ВремяДоступности.ВремяДоступностиПо) - ПустаяДата;
	КонецЕсли;
	
	НомерПоследнейСтроки = ТаблицаПунктов.Количество()-1;
	Если ЗначениеЗаполнено(ТекущиеДанныеПункта.ОтправлениеС) Тогда
		ТекущиеДанныеПункта.ОтправлениеС = НачалоДня(ТекущиеДанныеПункта.ОтправлениеС) + мВремяС;
	Иначе
		ТекущиеДанныеПункта.ОтправлениеС = НачалоДня(ТаблицаПунктов[0].ОтправлениеС) + мВремяС;
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекущиеДанныеПункта.ОтправлениеПо) Тогда
		ТекущиеДанныеПункта.ОтправлениеПо = НачалоДня(ТекущиеДанныеПункта.ОтправлениеПо) + мВремяПо;
	Иначе
		ТекущиеДанныеПункта.ОтправлениеПо = НачалоДня(ТаблицаПунктов[0].ОтправлениеПо) + мВремяПо;
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекущиеДанныеПункта.ДоставкаС) Тогда
		ТекущиеДанныеПункта.ДоставкаС = НачалоДня(ТекущиеДанныеПункта.ДоставкаС) + мВремяС;
	Иначе
		ТекущиеДанныеПункта.ДоставкаС = НачалоДня(ТаблицаПунктов[НомерПоследнейСтроки].ДоставкаС) + мВремяС;
	КонецЕсли;
	Если ЗначениеЗаполнено(ТекущиеДанныеПункта.ДоставкаПо) Тогда
		ТекущиеДанныеПункта.ДоставкаПо = НачалоДня(ТекущиеДанныеПункта.ДоставкаПо) + мВремяПо;
	Иначе
		ТекущиеДанныеПункта.ДоставкаПо = НачалоДня(ТаблицаПунктов[НомерПоследнейСтроки].ДоставкаПо) + мВремяПо;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВременныеОкна(ЗаполнятьОкнаНачальногоИКонечногоПункта)
	
	Если ЗаполнятьОкнаНачальногоИКонечногоПункта Тогда
		НомерСтрокиНачала = 0;
		НомерСтрокиКонца = ТаблицаПунктов.Количество()-1;
	Иначе
		НомерСтрокиНачала = 1;
		НомерСтрокиКонца = ТаблицаПунктов.Количество()-2;
	КонецЕсли;
	
	Для Сч = НомерСтрокиНачала По НомерСтрокиКонца Цикл
		УстановитьВременныеОкнаПункта(ТаблицаПунктов[Сч]);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьУсловноеОформление()
	// Устанавливаются значения служебных колонок, по которым работает условное оформление.
	Для Сч = 0 По ТаблицаПунктов.Количество()-1 Цикл
		ЭтоСтрокаОтправления = (Сч = 0);
		ТаблицаПунктов[Сч].ЭтоСтрокаОтправления = ЭтоСтрокаОтправления;
		ТаблицаПунктов[Сч].ЭтоСтрокаНазначения = (Сч = ТаблицаПунктов.Количество()-1 И Не ЭтоСтрокаОтправления);
	КонецЦикла; 
КонецПроцедуры

&НаКлиенте
Функция ВремяБезДаты(ДатаВремя)
	ПустаяДата = '00010101';
	Возврат ПустаяДата + (ДатаВремя - НачалоДня(ДатаВремя));
КонецФункции

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	Настройки.ПриПолученииСлужебныхРеквизитов = Ложь;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатЗаказГрузоотправителя";
	КомандаПечати.Идентификатор = "ЗаказНаТСТовары";
	КомандаПечати.Представление = НСтр("en='Order for trucking (details by goods)';ru='Заказ на ТС (детализация по товарам)'");
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатЗаказГрузоотправителя";
	КомандаПечати.Идентификатор = "ЗаказНаТСГрМеста";
	КомандаПечати.Представление = НСтр("en='Order for trucking (detailing by packages)';ru='Заказ на ТС (детализация по грузовым местам)'");
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатЗаказГрузоотправителя";
	КомандаПечати.Идентификатор = "УпаковочныйЛист";
	КомандаПечати.Представление = НСтр("ru='Упаковочный лист'");
	
	//КомандаПечати = КомандыПечати.Добавить();
	//КомандаПечати.МенеджерПечати = "Документ.уатЗаказГрузоотправителя";
	//КомандаПечати.Идентификатор = "ЗаказНаТСИсторияЗаказа";
	//КомандаПечати.Представление = НСтр("en='Trucking order history';ru='История заказа на ТС'");
	//// Комнада не отображается в подменю "Печать"
	//КомандаПечати.СписокФорм = "";
		
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор  = "Реестр";
	КомандаПечати.Представление  = НСтр("en='Document register';ru='Реестр документов'");
	КомандаПечати.ЗаголовокФормы = НСтр("en='Register of documents ""Order for trucking""';ru='Реестр документов ""Заказ на ТС""'");
	КомандаПечати.Обработчик     = "уатОбщегоНазначенияТиповыеКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм     = "ФормаСписка";
	КомандаПечати.Порядок        = 100;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр).
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной
//                                                            параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной
//                                            параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если НЕ уатОбщегоНазначенияСервер.РазрешениеПечатиНепроведенногоДокумента(МассивОбъектов) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЗаказНаТСТовары") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ЗаказНаТСТовары",
		НСтр("en='Order for trucking';ru='Заказ на ТС'"), ПечатьЗаказНаТС(МассивОбъектов, ОбъектыПечати));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЗаказНаТСГрМеста") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ЗаказНаТСГрМеста",
		НСтр("en='Order for trucking';ru='Заказ на ТС'"), ПечатьЗаказНаТС(МассивОбъектов, ОбъектыПечати, "ГрузМеста"));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "УпаковочныйЛист") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "УпаковочныйЛист",
		НСтр("en='Order for trucking';ru='Заказ на ТС'"), ПечатьУпаковочныйЛист(МассивОбъектов, ОбъектыПечати));
	ИначеЕсли УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЗаказНаТСИсторияЗаказа") 
		И уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП() Тогда 
		МодульЗаказыНаТС = ОбщегоНазначения.ОбщийМодуль("уатЗаказыНаТС_уэ");
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ЗаказНаТСИсторияЗаказа",
		НСтр("en='Trucking order history';ru='История заказа на ТС'"),
		МодульЗаказыНаТС.ПечатьИсторияЗаказа(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
	уатОбщегоНазначенияСервер.УстановитьРедактированиеПечатныхФормДокумента(КоллекцияПечатныхФорм);
	уатУправлениеПечатью.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов, КоллекцияПечатныхФорм);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.Взаимодействия

// Возвращает контакты по предмету.
//
// Параметры:
//  Ссылка	 - СправочникСсылка	 - Ссылка на предмет-владелец контактов
// 
// Возвращаемое значение:
//  Массив - массив контактов
//
Функция ПолучитьКонтакты(Ссылка) Экспорт
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПоКонтактам();
	Запрос.УстановитьПараметр("Предмет", Ссылка);
	
	НачатьТранзакцию();
	Попытка
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			Результат = Неопределено;
		Иначе
			Результат = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Контакт");
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Возвращает текст запроса по контактам взаимодействий, содержащимся в документе.
//
// Параметры:
//  ЭтоФрагментЗапроса	 - Булево	 - признак, указывающий на необходимость добавления конструкции ОБЪЕДИНИТЬ в запрос.
// 
// Возвращаемое значение:
//  Строка - сформированный текст запроса для получения контактов взаимодействий объекта.
//
Функция ТекстЗапросаПоКонтактам(ЭтоФрагментЗапроса = Ложь) Экспорт
	
	ТекстЗапроса = "
	|%ШаблонВыбрать%
	|	уатЗаказГрузоотправителя.Контрагент КАК Контакт
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	|ГДЕ
	|	уатЗаказГрузоотправителя.Ссылка = &Предмет
	|	И ТИПЗНАЧЕНИЯ(уатЗаказГрузоотправителя.Контрагент) = ТИП(Справочник.Контрагенты)
	|	И (НЕ уатЗаказГрузоотправителя.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатЗаказГрузоотправителя.Грузоотправитель
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	|ГДЕ
	|	уатЗаказГрузоотправителя.Ссылка = &Предмет
	|	И ТИПЗНАЧЕНИЯ(уатЗаказГрузоотправителя.Грузоотправитель) = ТИП(Справочник.Контрагенты)
	|	И (НЕ уатЗаказГрузоотправителя.Грузоотправитель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатЗаказГрузоотправителя.Грузополучатель
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	|ГДЕ
	|	уатЗаказГрузоотправителя.Ссылка = &Предмет
	|	И ТИПЗНАЧЕНИЯ(уатЗаказГрузоотправителя.Грузополучатель) = ТИП(Справочник.Контрагенты)
	|	И (НЕ уатЗаказГрузоотправителя.Грузополучатель = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатЗаказГрузоотправителя.КонтактноеЛицоГрузоотправителя
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	|ГДЕ
	|	уатЗаказГрузоотправителя.Ссылка = &Предмет
	|	И ТИПЗНАЧЕНИЯ(уатЗаказГрузоотправителя.КонтактноеЛицоГрузоотправителя) = ТИП(Справочник.КонтактныеЛица)
	|	И (НЕ уатЗаказГрузоотправителя.КонтактноеЛицоГрузоотправителя = ЗНАЧЕНИЕ(Справочник.КонтактныеЛица.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатЗаказГрузоотправителя.КонтактноеЛицоГрузополучателя
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	|ГДЕ
	|	уатЗаказГрузоотправителя.Ссылка = &Предмет
	|	И ТИПЗНАЧЕНИЯ(уатЗаказГрузоотправителя.КонтактноеЛицоГрузополучателя) = ТИП(Справочник.КонтактныеЛица)
	|	И (НЕ уатЗаказГрузоотправителя.КонтактноеЛицоГрузополучателя = ЗНАЧЕНИЕ(Справочник.КонтактныеЛица.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатЗаказГрузоотправителя.Ответственный
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	|ГДЕ
	|	уатЗаказГрузоотправителя.Ссылка = &Предмет
	|	И (НЕ уатЗаказГрузоотправителя.Ответственный = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))";
	
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса, 
		"%ШаблонВыбрать%", 
		?(ЭтоФрагментЗапроса, "ВЫБРАТЬ РАЗЛИЧНЫЕ", "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ")
	);
	
	Если ЭтоФрагментЗапроса Тогда
		ТекстЗапроса = "
			| ОБЪЕДИНИТЬ ВСЕ
			|" + ТекстЗапроса;
	КонецЕсли;
	
	Возврат ТекстЗапроса;
		
КонецФункции

// Конец СтандартныеПодсистемы.Взаимодействия

// СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла

// Устанавливает параметры загрузки.
//
// Параметры:
//  Параметры	 - Структура	 - Структура параметров
//
Процедура УстановитьПараметрыЗагрузкиИзФайлаВТЧ(Параметры) Экспорт
	СпециальнойОбработкиНеТребуется = Истина;
КонецПроцедуры

// Производит сопоставление данных, загружаемых в табличную часть ПолноеИмяТабличнойЧасти,
//  с данными в ИБ, и заполняет параметры АдресТаблицыСопоставления и СписокНеоднозначностей.
//
// Параметры:
//  АдресЗагружаемыхДанных		 - Строка	 - адрес временного хранилища с таблицей значений, в которой
//  	находятся загруженные данные из файла. Состав колонок:
//  	* Идентификатор – Число – порядковый номер строки;
//  	* остальные колонки соответствуют колонкам макета ЗагрузкаИзФайла.
//  АдресТаблицыСопоставления	 - Строка	 - адрес временного хранилища с пустой таблицей значений,
//  	являющейся копией табличной части документа,
//  	которую необходимо заполнить из таблицы АдресЗагружаемыхДанных.
//  СписокНеоднозначностей		 - ТаблицаЗначений	 - список неоднозначных значений,
//  	для которых в ИБ имеется несколько подходящих вариантов.
//  	* Колонка       – Строка – имя колонки, в которой была обнаружена неоднозначность;
//  	* Идентификатор – Число  – идентификатор строки, в которой была обнаружена неоднозначность.
//  ПолноеИмяТабличнойЧасти		 - Строка			 - полное имя табличной части, в которую загружаются данные.
//  ДополнительныеПараметры		 - Структура		 - Любые дополнительные сведения.
//
Процедура СопоставитьЗагружаемыеДанные(АдресЗагружаемыхДанных, АдресТаблицыСопоставления, СписокНеоднозначностей, ПолноеИмяТабличнойЧасти, ДополнительныеПараметры) Экспорт
	
	Если ПолноеИмяТабличнойЧасти = "Документ.уатЗаказГрузоотправителя.ТабличнаяЧасть.Товары" Тогда 
		СопоставитьЗагружаемыеДанныеТовары(АдресЗагружаемыхДанных, АдресТаблицыСопоставления, СписокНеоднозначностей, ДополнительныеПараметры);
	ИначеЕсли ПолноеИмяТабличнойЧасти = "Документ.уатЗаказГрузоотправителя.ТабличнаяЧасть.Услуги" Тогда 
		СопоставитьЗагружаемыеДанныеУслуги(АдресЗагружаемыхДанных, АдресТаблицыСопоставления, СписокНеоднозначностей, ДополнительныеПараметры);
	ИначеЕсли ПолноеИмяТабличнойЧасти = "Документ.уатЗаказГрузоотправителя.ТабличнаяЧасть.ГрузовойСостав" Тогда 
		СопоставитьЗагружаемыеДанныеГрузовойСостав(АдресЗагружаемыхДанных, АдресТаблицыСопоставления, СписокНеоднозначностей, ДополнительныеПараметры);
	ИначеЕсли ПолноеИмяТабличнойЧасти = "Документ.уатЗаказГрузоотправителя.ТабличнаяЧасть.Расходы" Тогда 
		СопоставитьЗагружаемыеДанныеЗатраты(АдресЗагружаемыхДанных, АдресТаблицыСопоставления, СписокНеоднозначностей, ДополнительныеПараметры);
	ИначеЕсли ПолноеИмяТабличнойЧасти = "Документ.уатЗаказГрузоотправителя.ТабличнаяЧасть.СопроводительныеДокументы" Тогда 
		СопоставитьЗагружаемыеДанныеСопроводительныеДокументы(АдресЗагружаемыхДанных, АдресТаблицыСопоставления, СписокНеоднозначностей, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла

// СтандартныеПодсистемы.УправлениеДоступом

// Позволяет переопределить ограничение, указанное в модуле менеджера объекта метаданных.
//
// Параметры:
//  Ограничение - Структура:
//    * Текст                             - Строка - ограничение доступа для пользователей.
//                                          Если пустая строка, значит, доступ разрешен.
//    * ТекстДляВнешнихПользователей      - Строка - ограничение доступа для внешних пользователей.
//                                          Если пустая строка, значит, доступ запрещен.
//    * ПоВладельцуБезЗаписиКлючейДоступа - Неопределено - определить автоматически.
//                                        - Булево - если Ложь, то всегда записывать ключи доступа,
//                                          если Истина, тогда не записывать ключи доступа,
//                                          а использовать ключи доступа владельца (требуется,
//                                          чтобы ограничение было строго по объекту-владельцу).
//   * ПоВладельцуБезЗаписиКлючейДоступаДляВнешнихПользователей - Неопределено, Булево - также
//                                          как у параметра ПоВладельцуБезЗаписиКлючейДоступа.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Подразделение)";
	
	Ограничение.ТекстДляВнешнихПользователей = Ограничение.Текст;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// СтандартныеПодсистемы.ВариантыОтчетов

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	//Если уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП() Тогда
	//	Команда = КомандыОтчетов.Добавить();
	//	Команда.Представление      = НСтр("ru = 'История операций с грузом'; en = 'Основной'");
	//	Команда.МножественныйВыбор = Ложь;
	//	Команда.Менеджер           = "Отчет.уатИсторияОперацийСГрузом_уэ";
	//	Команда.КлючВарианта       = "Основной";
	//	Команда.ИмяПараметраФормы  = "Отбор.Заказ";
	//	Команда.Важность           = "УАТ";
	//КонецЕсли;
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВариантыОтчетов

// СтандартныеПодсистемы.ШаблоныСообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf",
//                           "png", "jpg", mxl" и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
	НовРеквизитыГруппа = Реквизиты.Добавить();
	НовРеквизитыГруппа.Имя           = "уатЗаказГрузоотправителя.ДанныеМаршрутногоЛиста";
	НовРеквизитыГруппа.Представление = " Данные маршрутного листа";
	
	НовРеквизит = НовРеквизитыГруппа.Строки.Добавить();
	НовРеквизит.Имя           = "уатЗаказГрузоотправителя.ДанныеМаршрутногоЛиста.ТС";
	НовРеквизит.Представление = "ТС";
	НовРеквизит = НовРеквизитыГруппа.Строки.Добавить();
	НовРеквизит.Имя           = "уатЗаказГрузоотправителя.ДанныеМаршрутногоЛиста.НомерТС";
	НовРеквизит.Представление = "Номер ТС";
	НовРеквизит = НовРеквизитыГруппа.Строки.Добавить();
	НовРеквизит.Имя           = "уатЗаказГрузоотправителя.ДанныеМаршрутногоЛиста.НомерМЛ";
	НовРеквизит.Представление = "Номер маршрутного листа";
	НовРеквизит = НовРеквизитыГруппа.Строки.Добавить();
	НовРеквизит.Имя           = "уатЗаказГрузоотправителя.ДанныеМаршрутногоЛиста.Водитель";
	НовРеквизит.Представление = "Водитель";
	НовРеквизит = НовРеквизитыГруппа.Строки.Добавить();
	НовРеквизит.Имя           = "уатЗаказГрузоотправителя.ДанныеМаршрутногоЛиста.ТелефонВодителя";
	НовРеквизит.Представление = "Телефон водителя";
	НовРеквизит = НовРеквизитыГруппа.Строки.Добавить();
	НовРеквизит.Имя           = "уатЗаказГрузоотправителя.ДанныеМаршрутногоЛиста.ВесЗаказа";
	НовРеквизит.Представление = "Вес заказа в маршрутном листе";
	НовРеквизит = НовРеквизитыГруппа.Строки.Добавить();
	НовРеквизит.Имя           = "уатЗаказГрузоотправителя.ДанныеМаршрутногоЛиста.ОбъемЗаказа";
	НовРеквизит.Представление = "Объем заказа в маршрутном листе";
	НовРеквизит = НовРеквизитыГруппа.Строки.Добавить();
	НовРеквизит.Имя           = "уатЗаказГрузоотправителя.ДанныеМаршрутногоЛиста.КоличествоМестЗаказа";
	НовРеквизит.Представление = "Количество мест заказа в маршрутном листе";
	
	НовРеквизит = НовРеквизитыГруппа.Строки.Добавить();
	НовРеквизит.Имя           = "уатЗаказГрузоотправителя.ДанныеМаршрутногоЛиста.ПрибытиеПланПогрузка";
	НовРеквизит.Представление = "Плановая дата прибытия в пункт погрузки";
	НовРеквизит = НовРеквизитыГруппа.Строки.Добавить();
	НовРеквизит.Имя           = "уатЗаказГрузоотправителя.ДанныеМаршрутногоЛиста.ПрибытиеПланРазгрузка";
	НовРеквизит.Представление = "Плановая дата прибытия в пункт разгрузки";
	НовРеквизит = НовРеквизитыГруппа.Строки.Добавить();
	НовРеквизит.Имя           = "уатЗаказГрузоотправителя.ДанныеМаршрутногоЛиста.ПрибытиеФактПогрузка";
	НовРеквизит.Представление = "Фактическая дата прибытия в пункт погрузки";
	НовРеквизит = НовРеквизитыГруппа.Строки.Добавить();
	НовРеквизит.Имя           = "уатЗаказГрузоотправителя.ДанныеМаршрутногоЛиста.ПрибытиеФактРазгрузка";
	НовРеквизит.Представление = "Фактическая дата прибытия в пункт разгрузки";
	НовРеквизит = НовРеквизитыГруппа.Строки.Добавить();
	НовРеквизит.Имя           = "уатЗаказГрузоотправителя.ДанныеМаршрутногоЛиста.УбытиеПланПогрузка";
	НовРеквизит.Представление = "Плановая дата убытия из пункта погрузки";
	НовРеквизит = НовРеквизитыГруппа.Строки.Добавить();
	НовРеквизит.Имя           = "уатЗаказГрузоотправителя.ДанныеМаршрутногоЛиста.УбытиеПланРазгрузка";
	НовРеквизит.Представление = "Плановая дата убытия из пункта разгрузки";
	НовРеквизит = НовРеквизитыГруппа.Строки.Добавить();
	НовРеквизит.Имя           = "уатЗаказГрузоотправителя.ДанныеМаршрутногоЛиста.УбытиеФактПогрузка";
	НовРеквизит.Представление = "Фактическая дата убытия из пункта погрузки";
	НовРеквизит = НовРеквизитыГруппа.Строки.Добавить();
	НовРеквизит.Имя           = "уатЗаказГрузоотправителя.ДанныеМаршрутногоЛиста.УбытиеФактРазгрузка";
	НовРеквизит.Представление = "Фактическая дата убытия из пункта разгрузки";
	
	ВариантПоставкиКОРП = уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП();
	Если ВариантПоставкиКОРП
		И ПолучитьФункциональнуюОпцию("уатИспользоватьWialon") Тогда
		НовРеквизит = НовРеквизитыГруппа.Строки.Добавить();
		НовРеквизит.Имя           = "уатЗаказГрузоотправителя.ДанныеМаршрутногоЛиста.СсылкаНаЛокатор";
		НовРеквизит.Представление = "Ссылка на локатор Wialon";
	КонецЕсли;
	
	НовРеквизитыГруппа = Реквизиты.Добавить();
	НовРеквизитыГруппа.Имя           = "уатЗаказГрузоотправителя.ДанныеСтатуса";
	НовРеквизитыГруппа.Представление = " Данные по статусу заказа";
	НовРеквизит = НовРеквизитыГруппа.Строки.Добавить();
	НовРеквизит.Имя           = "уатЗаказГрузоотправителя.ДанныеСтатуса.Статус";
	НовРеквизит.Представление = "Статус";
	НовРеквизит = НовРеквизитыГруппа.Строки.Добавить();
	НовРеквизит.Имя           = "уатЗаказГрузоотправителя.ДанныеСтатуса.ГрузовоеМесто";
	НовРеквизит.Представление = "Грузовое место";
	НовРеквизит = НовРеквизитыГруппа.Строки.Добавить();
	НовРеквизит.Имя           = "уатЗаказГрузоотправителя.ДанныеСтатуса.ДатаУстановкиСтатуса";
	НовРеквизит.Представление = "Дата установки статуса";

	// Удаление из списка вложений печатной формы "Реестр документов"
	НомСтроки = Вложения.Количество()-1;
	Пока НомСтроки >= 0 Цикл
	    Если Вложения[НомСтроки].Имя = "Реестр" И Вложения[НомСтроки].Статус = "ПечатнаяФорма" Тогда
	        Вложения.Удалить(НомСтроки);
	    КонецЕсли;
    	НомСтроки = НомСтроки - 1;
	КонецЦикла;
	
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов 
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
	Если Не ЗначениеЗаполнено(ПредметСообщения) Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеСтатусаШаблон = Сообщение.ЗначенияРеквизитов.Получить("ДанныеСтатуса");

	Если ДополнительныеПараметры.Свойство("ПараметрыСообщения") Тогда
		ПараметрыСообщения = ДополнительныеПараметры.ПараметрыСообщения;
		Если НЕ ТипЗнч(ПараметрыСообщения) = Тип("Структура") Тогда
			ПараметрыСообщения = Новый Структура;
		КонецЕсли;
	Иначе
		ПараметрыСообщения = Новый Структура;
	КонецЕсли;
	
	ДанныеСтатуса = Новый Соответствие;
	Если ПараметрыСообщения.Свойство("СтатусДокумента")
		И ЗначениеЗаполнено(ПараметрыСообщения.СтатусДокумента) Тогда
		ДанныеСтатуса.Вставить("Статус", ПараметрыСообщения.СтатусДокумента);
	Иначе
		ДанныеСтатуса.Вставить("Статус", "");
	КонецЕсли;
	Если ПараметрыСообщения.Свойство("ДатаУстановкиСтатуса")
		И ЗначениеЗаполнено(ПараметрыСообщения.ДатаУстановкиСтатуса) Тогда
		ДанныеСтатуса.Вставить("ДатаУстановкиСтатуса", ПараметрыСообщения.ДатаУстановкиСтатуса);
	Иначе
		ДанныеСтатуса.Вставить("ДатаУстановкиСтатуса", "");
	КонецЕсли;
	Если ПараметрыСообщения.Свойство("ГрузовоеМесто")
		И ЗначениеЗаполнено(ПараметрыСообщения.ГрузовоеМесто) Тогда
		ДанныеСтатуса.Вставить("ГрузовоеМесто", ПараметрыСообщения.ГрузовоеМесто);
	Иначе
		ДанныеСтатуса.Вставить("ГрузовоеМесто", "");
	КонецЕсли;
	
	ДанныеМаршрутногоЛиста = Новый Соответствие;
	ДанныеМаршрутногоЛиста.Вставить("ТС", "");
	ДанныеМаршрутногоЛиста.Вставить("НомерТС", "");
	ДанныеМаршрутногоЛиста.Вставить("Водитель", "");
	ДанныеМаршрутногоЛиста.Вставить("НомерМЛ", "");
	ДанныеМаршрутногоЛиста.Вставить("ВесЗаказа", "");
	ДанныеМаршрутногоЛиста.Вставить("ОбъемЗаказа", "");
	ДанныеМаршрутногоЛиста.Вставить("КоличествоМестЗаказа", "");
	ДанныеМаршрутногоЛиста.Вставить("ТелефонВодителя", "");
	ДанныеМаршрутногоЛиста.Вставить("ПрибытиеПланРазгрузка", "");
	ДанныеМаршрутногоЛиста.Вставить("ПрибытиеФактРазгрузка", "");
	ДанныеМаршрутногоЛиста.Вставить("УбытиеПланРазгрузка", "");
	ДанныеМаршрутногоЛиста.Вставить("УбытиеФактРазгрузка", "");
	ДанныеМаршрутногоЛиста.Вставить("ПрибытиеПланПогрузка", "");
	ДанныеМаршрутногоЛиста.Вставить("ПрибытиеФактПогрузка", "");
	ДанныеМаршрутногоЛиста.Вставить("УбытиеПланПогрузка", "");
	ДанныеМаршрутногоЛиста.Вставить("УбытиеФактПогрузка", "");
	
	МаршрутныйЛист = Неопределено;
	Если ПараметрыСообщения.Свойство("ДополнительныйДокумент") 
		И ЗначениеЗаполнено(ПараметрыСообщения.ДополнительныйДокумент) 
		И ТипЗнч(ПараметрыСообщения.ДополнительныйДокумент) = Тип("ДокументСсылка.уатМаршрутныйЛист") Тогда
		МаршрутныйЛист = ПараметрыСообщения.ДополнительныйДокумент;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(МаршрутныйЛист) Тогда
		МаршрутныйЛист = ПолучитьСвязанныйМаршрутныйЛист(ПредметСообщения);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(МаршрутныйЛист) Тогда 
		
		СтруктураДанныеМЛ = ОбщегоНазначения.ЗначенияРеквизитовОбъекта(МаршрутныйЛист,
			"ТС, Номер, Водитель1", Истина);
		ДанныеМаршрутногоЛиста.Вставить("ТС", СтруктураДанныеМЛ.ТС);
		ДанныеМаршрутногоЛиста.Вставить("НомерТС", ОбщегоНазначения.ЗначениеРеквизитаОбъекта(СтруктураДанныеМЛ.ТС, "ГосударственныйНомер"));
		ДанныеМаршрутногоЛиста.Вставить("НомерМЛ", СтруктураДанныеМЛ.Номер);
		ДанныеМаршрутногоЛиста.Вставить("Водитель", СтруктураДанныеМЛ.Водитель1);
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	ФизическиеЛицаКонтактнаяИнформация.Представление КАК Представление
		|ИЗ
		|	Справочник.ФизическиеЛица.КонтактнаяИнформация КАК ФизическиеЛицаКонтактнаяИнформация
		|ГДЕ
		|	ФизическиеЛицаКонтактнаяИнформация.Ссылка = &Ссылка
		|	И ФизическиеЛицаКонтактнаяИнформация.Вид = &ВидКИ");
		НастройкиВидовКИ = уатОбщегоНазначенияПовтИсп_проф.ПолучитьНастройкиВидовКонтактнойИнформации();
		Запрос.УстановитьПараметр("ВидКИ", НастройкиВидовКИ.видКонтактнойИнформацииТелефонФизическогоЛица);
		Если ТипЗнч(СтруктураДанныеМЛ.Водитель1) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			Запрос.УстановитьПараметр("Ссылка", СтруктураДанныеМЛ.Водитель1);
		ИначеЕсли ТипЗнч(СтруктураДанныеМЛ.Водитель1) = Тип("СправочникСсылка.Сотрудники") Тогда
			Запрос.УстановитьПараметр("Ссылка", СтруктураДанныеМЛ.Водитель1.ФизическоеЛицо);
		Иначе
			Запрос.УстановитьПараметр("Ссылка", Справочники.ФизическиеЛица.ПустаяСсылка());
		КонецЕсли;
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			ДанныеМаршрутногоЛиста.Вставить("ТелефонВодителя", Выборка.Представление);
		КонецЕсли;
		
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СУММА(уатМаршрутныйЛистЗаказы.ВесБрутто) КАК ВесБрутто,
		|	СУММА(уатМаршрутныйЛистЗаказы.Объем) КАК Объем,
		|	СУММА(уатМаршрутныйЛистЗаказы.КоличествоМест) КАК КоличествоМест
		|ИЗ
		|	Документ.уатМаршрутныйЛист.Заказы КАК уатМаршрутныйЛистЗаказы
		|ГДЕ
		|	уатМаршрутныйЛистЗаказы.Ссылка = &Ссылка
		|	И уатМаршрутныйЛистЗаказы.ТипТочкиМаршрута = &ТипТочкиМаршрута
		|	И уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя = &ЗаказГрузоотправителя");
		Если ПараметрыСообщения.Свойство("ГрузовоеМесто")
			И ЗначениеЗаполнено(ПараметрыСообщения.ГрузовоеМесто) Тогда
			Запрос.Текст = Запрос.Текст + "
			|	И уатМаршрутныйЛистЗаказы.Номенклатура = &ГрузовоеМесто";
			Запрос.УстановитьПараметр("ГрузовоеМесто", ПараметрыСообщения.ГрузовоеМесто);
		КонецЕсли;
		Запрос.УстановитьПараметр("Ссылка", МаршрутныйЛист);
		Запрос.УстановитьПараметр("ТипТочкиМаршрута", Перечисления.уатТипыТочекМаршрута.Погрузка);
		Запрос.УстановитьПараметр("ЗаказГрузоотправителя", ПредметСообщения);
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда 
			ДанныеМаршрутногоЛиста.Вставить("ВесЗаказа", Выборка.ВесБрутто);
			ДанныеМаршрутногоЛиста.Вставить("ОбъемЗаказа", Выборка.Объем);
			ДанныеМаршрутногоЛиста.Вставить("КоличествоМестЗаказа", Выборка.КоличествоМест);
		КонецЕсли;
		
		тблЗаказы = МаршрутныйЛист.Заказы.Выгрузить();
		
		ПараметрыОтбора = Новый Структура;
		ПараметрыОтбора.Вставить("ТипТочкиМаршрута", Перечисления.уатТипыТочекМаршрута.Погрузка);
		ПараметрыОтбора.Вставить("ЗаказГрузоотправителя", ПредметСообщения);
		Если ПараметрыСообщения.Свойство("ГрузовоеМесто")
			И ЗначениеЗаполнено(ПараметрыСообщения.ГрузовоеМесто) Тогда
        	ПараметрыОтбора.Вставить("Номенклатура", ПараметрыСообщения.ГрузовоеМесто);
		КонецЕсли;
		НайденныеСтроки = тблЗаказы.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() > 0 Тогда
			СтрокаПогрузка = НайденныеСтроки[0];
			ДанныеМаршрутногоЛиста.Вставить("ПрибытиеПланПогрузка", СтрокаПогрузка.ПрибытиеПлан);
			ДанныеМаршрутногоЛиста.Вставить("ПрибытиеФактПогрузка", СтрокаПогрузка.ПрибытиеФакт);
			ДанныеМаршрутногоЛиста.Вставить("УбытиеПланПогрузка", СтрокаПогрузка.УбытиеПлан);
			ДанныеМаршрутногоЛиста.Вставить("УбытиеФактПогрузка", СтрокаПогрузка.УбытиеФакт);
		КонецЕсли;
		ПараметрыОтбора.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка;
		НайденныеСтроки = тблЗаказы.НайтиСтроки(ПараметрыОтбора);
		Если НайденныеСтроки.Количество() > 0 Тогда
			СтрокаРазгрузка = НайденныеСтроки[НайденныеСтроки.Количество()-1];
			ДанныеМаршрутногоЛиста.Вставить("ПрибытиеПланРазгрузка", СтрокаРазгрузка.ПрибытиеПлан);
			ДанныеМаршрутногоЛиста.Вставить("ПрибытиеФактРазгрузка", СтрокаРазгрузка.ПрибытиеФакт);
			ДанныеМаршрутногоЛиста.Вставить("УбытиеПланРазгрузка", СтрокаРазгрузка.УбытиеПлан);
			ДанныеМаршрутногоЛиста.Вставить("УбытиеФактРазгрузка", СтрокаРазгрузка.УбытиеФакт);
		КонецЕсли;
	КонецЕсли;
	
	ДанныеМаршрутногоЛистаШаблон = Сообщение.ЗначенияРеквизитов.Получить("ДанныеМаршрутногоЛиста");
	ВариантПоставкиКОРП = уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП();
	Если ВариантПоставкиКОРП
		И ДанныеМаршрутногоЛистаШаблон <> Неопределено 
		И ДанныеМаршрутногоЛистаШаблон.Получить("СсылкаНаЛокатор") <> Неопределено Тогда
		ЗаполнитьСсылкуНаЛокатор(ДанныеМаршрутногоЛиста, МаршрутныйЛист)
	КонецЕсли;
	
	Сообщение.ЗначенияРеквизитов.Вставить("ДанныеМаршрутногоЛиста", ДанныеМаршрутногоЛиста);
	Сообщение.ЗначенияРеквизитов.Вставить("ДанныеСтатуса", ДанныеСтатуса);
	
КонецПроцедуры

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS.
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - СправочникСсылка - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма.
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ШаблоныСообщений

#КонецОбласти

#Область СозданиеНаОсновании

// Определяет список команд создания на основании.
//
// Параметры:
//  КомандыСозданияНаОсновании - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.КомандыСозданияНаОсновании
//  Параметры - см. СозданиеНаОснованииПереопределяемый.ПередДобавлениемКомандСозданияНаОсновании.Параметры
//
Процедура ДобавитьКомандыСозданияНаОсновании(КомандыСозданияНаОсновании, Параметры) Экспорт
	
	уатОбменСГИСЭПД.ДобавитьКомандуЭТрНСоздатьНаОсновании(КомандыСозданияНаОсновании);

КонецПроцедуры

#КонецОбласти

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

// СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла

// Возвращает список подходящих объектов ИБ для неоднозначного значения ячейки.
//
// Параметры:
//  ПолноеИмяТабличнойЧасти		 - Строка	 - полное имя табличной части, в которую загружаются данные.
//  СписокНеоднозначностей		 - ТаблицаЗначений	 - Список для заполения с неоднозначными данными
//  	* Идентификатор        - Число  - Уникальный идентификатор строки
//  	* Колонка              - Строка -  Имя колонки с возникшей неоднозначностью
//  ИмяКолонки					 - Строка			 - имя колонки, в который возника неоднозначность
//  ЗагружаемыеЗначенияСтрока	 - Строка			 - Загружаемые данные на основании которых возникла неоднозначность.
//  ДополнительныеПараметры		 - 					 - 
//
Процедура ЗаполнитьСписокНеоднозначностей(ПолноеИмяТабличнойЧасти, СписокНеоднозначностей, ИмяКолонки, ЗагружаемыеЗначенияСтрока, ДополнительныеПараметры) Экспорт
	
	Если ИмяКолонки = "Номенклатура" Тогда
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Наименование", ЗагружаемыеЗначенияСтрока.Номенклатура);
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Номенклатура.Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Наименование = &Наименование";
		
		ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СписокНеоднозначностей.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
		КонецЦикла;
		
	ИначеЕсли ИмяКолонки = "ГрузовоеМесто" Тогда
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Наименование", ЗагружаемыеЗначенияСтрока.ГрузовоеМесто);
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатГрузовыеМеста_уэ.Ссылка
		|ИЗ
		|	Справочник.уатГрузовыеМеста_уэ КАК уатГрузовыеМеста_уэ
		|ГДЕ
		|	уатГрузовыеМеста_уэ.Наименование = &Наименование";
		
		ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СписокНеоднозначностей.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
		КонецЦикла;
		
	ИначеЕсли ИмяКолонки = "ВидУпаковки" Тогда
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Наименование", ЗагружаемыеЗначенияСтрока.ВидУпаковки);
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатВидыУпаковки_уэ.Ссылка
		|ИЗ
		|	Справочник.уатВидыУпаковки_уэ КАК уатВидыУпаковки_уэ
		|ГДЕ
		|	уатВидыУпаковки_уэ.Наименование = &Наименование";
		
		ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СписокНеоднозначностей.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
		КонецЦикла;
		
	ИначеЕсли ИмяКолонки = "Договор" Тогда
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Наименование", ЗагружаемыеЗначенияСтрока.Договор);
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДоговорыКонтрагентов.Ссылка
		|ИЗ
		|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
		|ГДЕ
		|	ДоговорыКонтрагентов.Наименование = &Наименование";
		
		ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СписокНеоднозначностей.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
		КонецЦикла;
		
	ИначеЕсли ИмяКолонки = "Контрагент" Тогда
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Наименование", ЗагружаемыеЗначенияСтрока.Контрагент);
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Контрагенты.Ссылка
		|ИЗ
		|	Справочник.Контрагенты КАК Контрагенты
		|ГДЕ
		|	Контрагенты.Наименование = &Наименование";
		
		ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СписокНеоднозначностей.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
		КонецЦикла;
		
	ИначеЕсли ИмяКолонки = "СтатьяРасходов" Тогда
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Наименование", ЗагружаемыеЗначенияСтрока.СтатьяРасходов);
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	СтатьиЗатрат.Ссылка
		|ИЗ
		|	Справочник.уатСтатьиРасходов КАК СтатьиЗатрат
		|ГДЕ
		|	СтатьиЗатрат.Наименование = &Наименование";
		
		ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СписокНеоднозначностей.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
		КонецЦикла;
		
	ИначеЕсли ИмяКолонки = "ВидДокумента" Тогда
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Наименование", ЗагружаемыеЗначенияСтрока.ВидДокумента);
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатВидыДокументов.Ссылка
		|ИЗ
		|	Справочник.уатВидыДокументов КАК уатВидыДокументов
		|ГДЕ
		|	уатВидыДокументов.Наименование = &Наименование";
		
		ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СписокНеоднозначностей.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
		КонецЦикла;
		
	ИначеЕсли ПолноеИмяТабличнойЧасти = "Документ.уатЗаказГрузоотправителя.ТабличнаяЧасть.СопроводительныеДокументы" 
			И ИмяКолонки = "Статус" Тогда
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Наименование", ЗагружаемыеЗначенияСтрока.Статус);
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатСтатусы_уэ.Ссылка
		|ИЗ
		|	Справочник.уатСтатусы_уэ КАК уатСтатусы_уэ
		|ГДЕ
		|	уатСтатусы_уэ.Наименование = &Наименование
		|	И уатСтатусы_уэ.ДействуетНаСопроводительныеДокументы";
		
		ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СписокНеоднозначностей.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, СтруктураДополнительныеСвойства, Отказ) Экспорт
	
	НеФормироватьДвиженийПоУслугам = СтруктураДополнительныеСвойства.Свойство("НеФормироватьДвиженийПоУслугам");
	
	Если НЕ НеФормироватьДвиженийПоУслугам Тогда
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	уатСтатусыГрузов_уэ.Статус КАК Статус
		               |ИЗ
		               |	РегистрСведений.уатСтатусыГрузов_уэ.СрезПоследних(
		               |			,
		               |			Заказ = &Ссылка
		               |				И Статус = ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Отклонен)) КАК уатСтатусыГрузов_уэ
		               |ГДЕ
		               |	уатСтатусыГрузов_уэ.Заказ = &Ссылка";
		РезультатЗапроса = Запрос.Выполнить();
		Если НЕ РезультатЗапроса.Пустой() Тогда 
			НеФормироватьДвиженийПоУслугам = Истина;
		КонецЕсли
	КонецЕсли;
	
	ДатаКурса = ?(ДокументСсылка.ДатаКурса = '00010101', ДокументСсылка.Дата, ДокументСсылка.ДатаКурса);
	
	мЗапрос = Новый Запрос( 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	""Предоставленные услуги (получатель контрагент)"" КАК ИмяТЧ,
	|	уатЗаказГрузоотправителяУслуги.Ссылка КАК Регистратор,
	|	ЗНАЧЕНИЕ(Перечисление.уатПолучателиУслуг.Контрагент) КАК ПолучательУслуг,
	|	уатЗаказГрузоотправителяУслуги.Ссылка.Организация КАК Организация,
	|	уатЗаказГрузоотправителяУслуги.Ссылка.ОбъектСтроительства КАК ОбъектСтроительства,
	|	уатЗаказГрузоотправителяУслуги.Ссылка.Маршрут КАК Маршрут,
	|	уатЗаказГрузоотправителяУслуги.Ссылка.ВидПеревозки КАК ВидПеревозки,
	|	уатЗаказГрузоотправителяУслуги.Ссылка.НаправлениеПеревозки КАК НаправлениеПеревозки,
	|	ВЫБОР
	|		КОГДА уатЗаказГрузоотправителяУслуги.Тариф.МетодРасчета = ЗНАЧЕНИЕ(Перечисление.уатМетодыРасчетаПоТарифам.ПроцентомОтСуммы)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.Наценка)
	|		ИНАЧЕ уатЗаказГрузоотправителяУслуги.Тариф.ПараметрВыработки
	|	КОНЕЦ КАК ПараметрВыработки,
	|	уатЗаказГрузоотправителяУслуги.Ссылка.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	уатЗаказГрузоотправителяУслуги.Номенклатура КАК Номенклатура,
	|	уатЗаказГрузоотправителяУслуги.Содержание КАК Содержание,
	|	уатЗаказГрузоотправителяУслуги.Количество КАК Количество,
	|	уатЗаказГрузоотправителяУслуги.Сумма + ВЫБОР
	|		КОГДА уатЗаказГрузоотправителяУслуги.Ссылка.УчитыватьНДС
	|				И НЕ уатЗаказГрузоотправителяУслуги.Ссылка.СуммаВключаетНДС
	|			ТОГДА уатЗаказГрузоотправителяУслуги.СуммаНДС
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма,
	|	0 КАК СуммаРегл,
	|	0 КАК СуммаУпр,
	|	уатЗаказГрузоотправителяУслуги.СтавкаНДС КАК СтавкаНДС,
	|	уатЗаказГрузоотправителяУслуги.СуммаНДС КАК СуммаНДС,
	|	уатЗаказГрузоотправителяУслуги.Ссылка.Дата КАК Период,
	|	уатЗаказГрузоотправителяУслуги.Ссылка КАК ЗаказНаТС,
	|	уатЗаказГрузоотправителяУслуги.Валюта КАК Валюта,
	|	уатЗаказГрузоотправителяУслуги.СтатьяДоходов КАК Статья
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя.Услуги КАК уатЗаказГрузоотправителяУслуги
	|ГДЕ
	|	уатЗаказГрузоотправителяУслуги.Ссылка = &Ссылка
	|	И (уатЗаказГрузоотправителяУслуги.Количество > 0 ИЛИ уатЗаказГрузоотправителяУслуги.Сумма > 0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Предоставленные услуги (получатель наша организация)"",
	|	уатЗаказГрузоотправителяПолучаемыеУслуги.Ссылка,
	|	ЗНАЧЕНИЕ(Перечисление.уатПолучателиУслуг.НашаОрганизация),
	|	уатЗаказГрузоотправителяПолучаемыеУслуги.Ссылка.Организация,
	|	уатЗаказГрузоотправителяПолучаемыеУслуги.Ссылка.ОбъектСтроительства,
	|	уатЗаказГрузоотправителяПолучаемыеУслуги.Ссылка.Маршрут,
	|	уатЗаказГрузоотправителяПолучаемыеУслуги.Ссылка.ВидПеревозки,
	|	уатЗаказГрузоотправителяПолучаемыеУслуги.Ссылка.НаправлениеПеревозки,
	|	ВЫБОР
	|		КОГДА уатЗаказГрузоотправителяПолучаемыеУслуги.Тариф.МетодРасчета = ЗНАЧЕНИЕ(Перечисление.уатМетодыРасчетаПоТарифам.ПроцентомОтСуммы)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.Наценка)
	|		ИНАЧЕ уатЗаказГрузоотправителяПолучаемыеУслуги.Тариф.ПараметрВыработки
	|	КОНЕЦ,
	|	уатЗаказГрузоотправителяПолучаемыеУслуги.Договор,
	|	уатЗаказГрузоотправителяПолучаемыеУслуги.Номенклатура,
	|	уатЗаказГрузоотправителяПолучаемыеУслуги.Содержание,
	|	уатЗаказГрузоотправителяПолучаемыеУслуги.Количество,
	|	уатЗаказГрузоотправителяПолучаемыеУслуги.Сумма + ВЫБОР
	|		КОГДА уатЗаказГрузоотправителяПолучаемыеУслуги.УчитыватьНДС
	|				И НЕ уатЗаказГрузоотправителяПолучаемыеУслуги.СуммаВключаетНДС
	|			ТОГДА уатЗаказГрузоотправителяПолучаемыеУслуги.СуммаНДС
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	0,
	|	0,
	|	уатЗаказГрузоотправителяПолучаемыеУслуги.СтавкаНДС,
	|	уатЗаказГрузоотправителяПолучаемыеУслуги.СуммаНДС,
	|	уатЗаказГрузоотправителяПолучаемыеУслуги.Ссылка.Дата,
	|	уатЗаказГрузоотправителяПолучаемыеУслуги.Ссылка,
	|	уатЗаказГрузоотправителяПолучаемыеУслуги.Валюта,
	|	уатЗаказГрузоотправителяПолучаемыеУслуги.СтатьяРасходов
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя.Расходы КАК уатЗаказГрузоотправителяПолучаемыеУслуги
	|ГДЕ
	|	уатЗаказГрузоотправителяПолучаемыеУслуги.Ссылка = &Ссылка
	|	И (уатЗаказГрузоотправителяПолучаемыеУслуги.Количество > 0 ИЛИ уатЗаказГрузоотправителяПолучаемыеУслуги.Сумма > 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	""По товарному составу"" КАК ИмяТЧ,
	|	уатЗаказГрузоотправителяТовары.Ссылка.Дата КАК Период,
	|	уатЗаказГрузоотправителяТовары.Ссылка КАК Регистратор,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	уатЗаказГрузоотправителяТовары.Ссылка.Контрагент КАК Контрагент,
	|	уатЗаказГрузоотправителяТовары.Ссылка.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	уатЗаказГрузоотправителяТовары.Ссылка КАК ЗаказГрузоотправителя,
	|	уатЗаказГрузоотправителяТовары.Номенклатура КАК Номенклатура,
	|	уатЗаказГрузоотправителяТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	СУММА(уатЗаказГрузоотправителяТовары.Количество
	|		* ЕСТЬNULL(уатЗаказГрузоотправителяТовары.ЕдиницаИзмерения.Коэффициент, 1)
	|		/ уатЗаказГрузоотправителяТовары.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент) КАК Количество
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя.Товары КАК уатЗаказГрузоотправителяТовары
	|ГДЕ
	|	уатЗаказГрузоотправителяТовары.Ссылка = &Ссылка
	|	И НЕ уатЗаказГрузоотправителяТовары.ПричинаЗакрытия = &ПричинаЗакрытияОтклонен
	|
	|СГРУППИРОВАТЬ ПО
	|	уатЗаказГрузоотправителяТовары.Ссылка.Дата,
	|	уатЗаказГрузоотправителяТовары.Ссылка,
	|	уатЗаказГрузоотправителяТовары.Ссылка.Контрагент,
	|	уатЗаказГрузоотправителяТовары.Ссылка.ДоговорКонтрагента,
	|	уатЗаказГрузоотправителяТовары.Номенклатура,
	|	уатЗаказГрузоотправителяТовары.ЕдиницаИзмерения,
	|	уатЗаказГрузоотправителяТовары.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	""По грузовым местам"" КАК ИмяТЧ,
	|	уатЗаказГрузоотправителяГрузовойСостав.Ссылка.Дата КАК Период,
	|	уатЗаказГрузоотправителяГрузовойСостав.Ссылка КАК Регистратор,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	уатЗаказГрузоотправителяГрузовойСостав.Ссылка.Контрагент КАК Контрагент,
	|	уатЗаказГрузоотправителяГрузовойСостав.Ссылка.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	уатЗаказГрузоотправителяГрузовойСостав.Ссылка КАК ЗаказГрузоотправителя,
	|	уатЗаказГрузоотправителяГрузовойСостав.ГрузовоеМесто КАК ГрузовоеМесто,
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура,
	|	уатЗаказГрузоотправителяГрузовойСостав.ВидУпаковки КАК ЕдиницаИзмерения,
	|	уатЗаказГрузоотправителяГрузовойСостав.КоличествоМест КАК Количество
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя.ГрузовойСостав КАК уатЗаказГрузоотправителяГрузовойСостав
	|ГДЕ
	|	уатЗаказГрузоотправителяГрузовойСостав.Ссылка = &Ссылка
	|	И НЕ уатЗаказГрузоотправителяГрузовойСостав.ПричинаЗакрытия = &ПричинаЗакрытияОтклонен
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	""По заказу в целом"" КАК ИмяТЧ,
	|	уатЗаказГрузоотправителя.Дата КАК Период,
	|	уатЗаказГрузоотправителя.Ссылка КАК Регистратор,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения,
	|	уатЗаказГрузоотправителя.Контрагент КАК Контрагент,
	|	уатЗаказГрузоотправителя.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	уатЗаказГрузоотправителя.Ссылка КАК ЗаказГрузоотправителя,
	|	ЗНАЧЕНИЕ(Справочник.уатГрузовыеМеста_уэ.ПустаяСсылка) КАК ГрузовоеМесто,
	|	ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка) КАК Номенклатура,
	|	&ПустаяЕИ КАК ЕдиницаИзмерения,
	|	1 КАК Количество
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	|ГДЕ
	|	уатЗаказГрузоотправителя.Ссылка = &Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	""Статусы грузов"" КАК ИмяТЧ,
	|	уатЗаказГрузоотправителя.Ссылка КАК Регистратор,
	|	уатЗаказГрузоотправителя.Дата КАК Период,
	|	МАКСИМУМ(уатЗаказГрузоотправителя.Ссылка) КАК Заказ,
	|	ВЫБОР
	|		КОГДА уатЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам)
	|			ТОГДА ЕСТЬNULL(уатЗаказГрузоотправителяГрузовойСостав.ГрузовоеМесто, ЗНАЧЕНИЕ(Справочник.уатГрузовыеМеста_уэ.ПустаяСсылка))
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.уатГрузовыеМеста_уэ.ПустаяСсылка)
	|	КОНЕЦ КАК ГрузовоеМесто,
	|	МАКСИМУМ(ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Открыт)) КАК Статус
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя.ГрузовойСостав КАК уатЗаказГрузоотправителяГрузовойСостав
	|		ПО уатЗаказГрузоотправителя.Ссылка = уатЗаказГрузоотправителяГрузовойСостав.Ссылка
	|ГДЕ
	|	уатЗаказГрузоотправителя.Ссылка = &Ссылка
	|
	|СГРУППИРОВАТЬ ПО
	|	уатЗаказГрузоотправителя.Ссылка,
	|	уатЗаказГрузоотправителя.Дата,
	|	ВЫБОР
	|		КОГДА уатЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам)
	|			ТОГДА ЕСТЬNULL(уатЗаказГрузоотправителяГрузовойСостав.ГрузовоеМесто, ЗНАЧЕНИЕ(Справочник.уатГрузовыеМеста_уэ.ПустаяСсылка))
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.уатГрузовыеМеста_уэ.ПустаяСсылка)
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Статусы грузов"",
	|	уатЗаказГрузоотправителя.Ссылка,
	|	уатЗаказГрузоотправителя.ДатаЗакрытия,
	|	МАКСИМУМ(уатЗаказГрузоотправителя.Ссылка),
	|	ВЫБОР
	|		КОГДА уатЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам)
	|			ТОГДА ЕСТЬNULL(уатЗаказГрузоотправителяГрузовойСостав.ГрузовоеМесто, ЗНАЧЕНИЕ(Справочник.уатГрузовыеМеста_уэ.ПустаяСсылка))
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.уатГрузовыеМеста_уэ.ПустаяСсылка)
	|	КОНЕЦ,
	|	МАКСИМУМ(ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Закрыт))
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя.ГрузовойСостав КАК уатЗаказГрузоотправителяГрузовойСостав
	|		ПО уатЗаказГрузоотправителя.Ссылка = уатЗаказГрузоотправителяГрузовойСостав.Ссылка
	|ГДЕ
	|	уатЗаказГрузоотправителя.Ссылка = &Ссылка
	|	И уатЗаказГрузоотправителя.ДатаЗакрытия <> ДАТАВРЕМЯ(1, 1, 1)
	|
	|СГРУППИРОВАТЬ ПО
	|	уатЗаказГрузоотправителя.Ссылка,
	|	уатЗаказГрузоотправителя.ДатаЗакрытия,
	|	ВЫБОР
	|		КОГДА уатЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам)
	|			ТОГДА ЕСТЬNULL(уатЗаказГрузоотправителяГрузовойСостав.ГрузовоеМесто, ЗНАЧЕНИЕ(Справочник.уатГрузовыеМеста_уэ.ПустаяСсылка))
	|		ИНАЧЕ ЗНАЧЕНИЕ(Справочник.уатГрузовыеМеста_уэ.ПустаяСсылка)
	|	КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Статусы грузов"",
	|	уатЗаказГрузоотправителя.Ссылка,
	|	ДОБАВИТЬКДАТЕ(уатЗаказГрузоотправителя.Дата, СЕКУНДА, 1),
	|	МАКСИМУМ(уатЗаказГрузоотправителя.Ссылка),
	|	ЕСТЬNULL(уатЗаказГрузоотправителяГрузовойСостав.ГрузовоеМесто, ЗНАЧЕНИЕ(Справочник.уатГрузовыеМеста_уэ.ПустаяСсылка)),
	|	МАКСИМУМ(ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Отклонен))
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя.ГрузовойСостав КАК уатЗаказГрузоотправителяГрузовойСостав
	|		ПО уатЗаказГрузоотправителя.Ссылка = уатЗаказГрузоотправителяГрузовойСостав.Ссылка
	|ГДЕ
	|	уатЗаказГрузоотправителя.Ссылка = &Ссылка
	|	И уатЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам)
	|	И ЕСТЬNULL(уатЗаказГрузоотправителяГрузовойСостав.ПричинаЗакрытия, ЗНАЧЕНИЕ(Справочник.уатПричиныЗакрытияЗаказов.ПустаяСсылка)) = &ПричинаЗакрытияОтклонен
	|
	|СГРУППИРОВАТЬ ПО
	|	ЕСТЬNULL(уатЗаказГрузоотправителяГрузовойСостав.ГрузовоеМесто, ЗНАЧЕНИЕ(Справочник.уатГрузовыеМеста_уэ.ПустаяСсылка)),
	|	ДОБАВИТЬКДАТЕ(уатЗаказГрузоотправителя.Дата, СЕКУНДА, 1),
	|	уатЗаказГрузоотправителя.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	""Доходы"" КАК ИмяТЧ,
	|	уатЗаказГрузоотправителяОказываемыеУслуги.Ссылка КАК Регистратор,
	|	ВЫБОР
	|		КОГДА уатЗаказГрузоотправителяОказываемыеУслуги.Ссылка.ДатаЗакрытия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА уатЗаказГрузоотправителяОказываемыеУслуги.Ссылка.Дата
	|		ИНАЧЕ уатЗаказГрузоотправителяОказываемыеУслуги.Ссылка.ДатаЗакрытия
	|	КОНЕЦ КАК Период,
	|	уатЗаказГрузоотправителяОказываемыеУслуги.Ссылка КАК Заказ,
	|	уатЗаказГрузоотправителяОказываемыеУслуги.Ссылка.Маршрут КАК Маршрут,
	|	уатЗаказГрузоотправителяОказываемыеУслуги.Ссылка.ОбъектСтроительства КАК ОбъектСтроительства,
	|	уатЗаказГрузоотправителяОказываемыеУслуги.Ссылка.Подразделение КАК Подразделение,
	|	уатЗаказГрузоотправителяОказываемыеУслуги.Ссылка.ВидПеревозки КАК ВидПеревозки,
	|	уатЗаказГрузоотправителяОказываемыеУслуги.Ссылка.НаправлениеПеревозки КАК НаправлениеПеревозки,
	|	уатЗаказГрузоотправителяОказываемыеУслуги.Ссылка.Контрагент КАК Контрагент,
	|	уатЗаказГрузоотправителяОказываемыеУслуги.Ссылка.Организация КАК Организация,
	|	уатЗаказГрузоотправителяОказываемыеУслуги.СтатьяДоходов КАК СтатьяДоходов,
	|	уатЗаказГрузоотправителяОказываемыеУслуги.Номенклатура КАК НоменклатураУслуги,
	|	уатЗаказГрузоотправителяОказываемыеУслуги.СтавкаНДС КАК СтавкаНДС,
	|	ВЫБОР
	|		КОГДА уатЗаказГрузоотправителяОказываемыеУслуги.Тариф.МетодРасчета = ЗНАЧЕНИЕ(Перечисление.уатМетодыРасчетаПоТарифам.ПроцентомОтСуммы)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.Наценка)
	|		ИНАЧЕ уатЗаказГрузоотправителяОказываемыеУслуги.Тариф.ПараметрВыработки
	|	КОНЕЦ КАК ПараметрВыработки,
	|	ВЫБОР
	|		КОГДА уатЗаказГрузоотправителяОказываемыеУслуги.Ссылка.УчитыватьНДС
	|				И НЕ уатЗаказГрузоотправителяОказываемыеУслуги.Ссылка.СуммаВключаетНДС
	|			ТОГДА уатЗаказГрузоотправителяОказываемыеУслуги.Сумма + уатЗаказГрузоотправителяОказываемыеУслуги.СуммаНДС
	|		ИНАЧЕ уатЗаказГрузоотправителяОказываемыеУслуги.Сумма
	|	КОНЕЦ КАК Сумма,
	|	уатЗаказГрузоотправителяОказываемыеУслуги.СуммаНДС КАК СуммаНДС,
	|	уатЗаказГрузоотправителяОказываемыеУслуги.СуммаНДС КАК СуммаНДСУпр,
	|	0 КАК СуммаРегл,
	|	0 КАК СуммаУпр,
	|	уатЗаказГрузоотправителяОказываемыеУслуги.Валюта КАК Валюта,
	|	уатЗаказГрузоотправителяОказываемыеУслуги.Ссылка.Ответственный КАК Менеджер
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя.Услуги КАК уатЗаказГрузоотправителяОказываемыеУслуги
	|ГДЕ
	|	уатЗаказГрузоотправителяОказываемыеУслуги.Ссылка = &Ссылка
	|	И (уатЗаказГрузоотправителяОказываемыеУслуги.Количество > 0 ИЛИ уатЗаказГрузоотправителяОказываемыеУслуги.Сумма > 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	""Расходы"" КАК ИмяТЧ,
	|	уатЗаказГрузоотправителяПолучаемыеУслуги.Ссылка КАК Регистратор,
	|	ВЫБОР
	|		КОГДА уатЗаказГрузоотправителяПолучаемыеУслуги.Ссылка.ДатаЗакрытия = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА уатЗаказГрузоотправителяПолучаемыеУслуги.Ссылка.Дата
	|		ИНАЧЕ уатЗаказГрузоотправителяПолучаемыеУслуги.Ссылка.ДатаЗакрытия
	|	КОНЕЦ КАК Период,
	|	уатЗаказГрузоотправителяПолучаемыеУслуги.Ссылка.ОбъектСтроительства КАК ОбъектСтроительства,
	|	уатЗаказГрузоотправителяПолучаемыеУслуги.Ссылка.ВидПеревозки КАК ВидПеревозки,
	|	уатЗаказГрузоотправителяПолучаемыеУслуги.Ссылка.НаправлениеПеревозки КАК НаправлениеПеревозки,
	|	уатЗаказГрузоотправителяПолучаемыеУслуги.Ссылка.Подразделение КАК Подразделение,
	|	уатЗаказГрузоотправителяПолучаемыеУслуги.Ссылка.Маршрут КАК Маршрут,
	|	уатЗаказГрузоотправителяПолучаемыеУслуги.Ссылка КАК Заказ,
	|	уатЗаказГрузоотправителяПолучаемыеУслуги.Номенклатура КАК Затрата,
	|	уатЗаказГрузоотправителяПолучаемыеУслуги.Номенклатура КАК НоменклатураУслуги,
	|	уатЗаказГрузоотправителяПолучаемыеУслуги.Контрагент КАК Контрагент,
	|	уатЗаказГрузоотправителяПолучаемыеУслуги.Договор КАК Договор,
	|	уатЗаказГрузоотправителяПолучаемыеУслуги.Ссылка.Организация КАК Организация,
	|	уатЗаказГрузоотправителяПолучаемыеУслуги.СтатьяРасходов КАК СтатьяРасходов,
	|	ВЫБОР
	|		КОГДА уатЗаказГрузоотправителяПолучаемыеУслуги.Тариф.МетодРасчета = ЗНАЧЕНИЕ(Перечисление.уатМетодыРасчетаПоТарифам.ПроцентомОтСуммы)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.Наценка)
	|		ИНАЧЕ уатЗаказГрузоотправителяПолучаемыеУслуги.Тариф.ПараметрВыработки
	|	КОНЕЦ КАК ПараметрВыработки,
	|	ВЫБОР
	|		КОГДА уатЗаказГрузоотправителяПолучаемыеУслуги.УчитыватьНДС
	|				И НЕ уатЗаказГрузоотправителяПолучаемыеУслуги.СуммаВключаетНДС
	|			ТОГДА уатЗаказГрузоотправителяПолучаемыеУслуги.Сумма + уатЗаказГрузоотправителяПолучаемыеУслуги.СуммаНДС
	|		ИНАЧЕ уатЗаказГрузоотправителяПолучаемыеУслуги.Сумма
	|	КОНЕЦ КАК Сумма,
	|	уатЗаказГрузоотправителяПолучаемыеУслуги.СуммаНДС КАК СуммаНДС,
	|	уатЗаказГрузоотправителяПолучаемыеУслуги.СуммаНДС КАК СуммаНДСУпр,
	|	0 КАК СуммаРегл,
	|	0 КАК СуммаУпр,
	|	уатЗаказГрузоотправителяПолучаемыеУслуги.Валюта КАК Валюта,
	|	уатЗаказГрузоотправителяПолучаемыеУслуги.Ссылка.Ответственный КАК Менеджер,
	|	ЛОЖЬ КАК РучнойВвод
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя.Расходы КАК уатЗаказГрузоотправителяПолучаемыеУслуги
	|ГДЕ
	|	уатЗаказГрузоотправителяПолучаемыеУслуги.Ссылка = &Ссылка
	|	И (уатЗаказГрузоотправителяПолучаемыеУслуги.Количество > 0 ИЛИ уатЗаказГрузоотправителяПолучаемыеУслуги.Сумма > 0)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	""Плановые доходы"" КАК ИмяТЧ,
	|	ЗНАЧЕНИЕ(Перечисление.уатПолучателиУслуг.Контрагент) КАК ПолучательУслуг,
	|	уатЗаказГрузоотправителяОказываемыеУслуги.Ссылка КАК Регистратор,
	|	уатЗаказГрузоотправителяОказываемыеУслуги.Ссылка.Дата КАК Период,
	|	уатЗаказГрузоотправителяОказываемыеУслуги.СтатьяДоходов КАК СтатьяДоходов,
	|	НЕОПРЕДЕЛЕНО КАК СтатьяРасходов,
	|	уатЗаказГрузоотправителяОказываемыеУслуги.НомерСтроки КАК НомерСтроки,
	|	уатЗаказГрузоотправителяОказываемыеУслуги.Ссылка КАК ЗаказНаТС,
	|	уатЗаказГрузоотправителяОказываемыеУслуги.Ссылка.Маршрут КАК Маршрут,
	|	уатЗаказГрузоотправителяОказываемыеУслуги.Ссылка.ОбъектСтроительства КАК ОбъектСтроительства,
	|	уатЗаказГрузоотправителяОказываемыеУслуги.Ссылка.ВидПеревозки КАК ВидПеревозки,
	|	уатЗаказГрузоотправителяОказываемыеУслуги.Ссылка.НаправлениеПеревозки КАК НаправлениеПеревозки,
	|	уатЗаказГрузоотправителяОказываемыеУслуги.Ссылка.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	уатЗаказГрузоотправителяОказываемыеУслуги.Ссылка.Организация КАК Организация,
	|	уатЗаказГрузоотправителяОказываемыеУслуги.Номенклатура КАК Номенклатура,
	|	уатЗаказГрузоотправителяОказываемыеУслуги.СтавкаНДС КАК СтавкаНДС,
	|	ВЫБОР
	|		КОГДА уатЗаказГрузоотправителяОказываемыеУслуги.Тариф.МетодРасчета = ЗНАЧЕНИЕ(Перечисление.уатМетодыРасчетаПоТарифам.ПроцентомОтСуммы)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.Наценка)
	|		ИНАЧЕ уатЗаказГрузоотправителяОказываемыеУслуги.Тариф.ПараметрВыработки
	|	КОНЕЦ КАК ПараметрВыработки,
	|	уатЗаказГрузоотправителяОказываемыеУслуги.КоличествоПлан КАК Количество,
	|	ВЫБОР
	|		КОГДА уатЗаказГрузоотправителяОказываемыеУслуги.Ссылка.УчитыватьНДС
	|				И НЕ уатЗаказГрузоотправителяОказываемыеУслуги.Ссылка.СуммаВключаетНДС
	|			ТОГДА уатЗаказГрузоотправителяОказываемыеУслуги.СуммаПлан + уатЗаказГрузоотправителяОказываемыеУслуги.СуммаНДСПлан
	|		ИНАЧЕ уатЗаказГрузоотправителяОказываемыеУслуги.СуммаПлан
	|	КОНЕЦ КАК Сумма,
	|	0 КАК СуммаРегл,
	|	0 КАК СуммаУпр,
	|	уатЗаказГрузоотправителяОказываемыеУслуги.СуммаНДСПлан КАК СуммаНДС,
	|	уатЗаказГрузоотправителяОказываемыеУслуги.СуммаНДСПлан КАК СуммаНДСУпр,
	|	уатЗаказГрузоотправителяОказываемыеУслуги.Валюта КАК Валюта,
	|	уатЗаказГрузоотправителяОказываемыеУслуги.Ссылка.Ответственный КАК Менеджер,
	|	уатЗаказГрузоотправителяОказываемыеУслуги.РучнойВвод КАК РучнойВвод
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя.Услуги КАК уатЗаказГрузоотправителяОказываемыеУслуги
	|ГДЕ
	|	уатЗаказГрузоотправителяОказываемыеУслуги.Ссылка = &Ссылка
	|	И (уатЗаказГрузоотправителяОказываемыеУслуги.КоличествоПлан > 0 ИЛИ уатЗаказГрузоотправителяОказываемыеУслуги.СуммаПлан > 0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""Плановые расходы"",
	|	ЗНАЧЕНИЕ(Перечисление.уатПолучателиУслуг.НашаОрганизация),
	|	уатЗаказГрузоотправителяПолучаемыеУслуги.Ссылка,
	|	уатЗаказГрузоотправителяПолучаемыеУслуги.Ссылка.Дата,
	|	НЕОПРЕДЕЛЕНО,
	|	уатЗаказГрузоотправителяПолучаемыеУслуги.СтатьяРасходов,
	|	уатЗаказГрузоотправителяПолучаемыеУслуги.НомерСтроки,
	|	уатЗаказГрузоотправителяПолучаемыеУслуги.Ссылка,
	|	уатЗаказГрузоотправителяПолучаемыеУслуги.Ссылка.Маршрут,
	|	уатЗаказГрузоотправителяПолучаемыеУслуги.Ссылка.ОбъектСтроительства,
	|	уатЗаказГрузоотправителяПолучаемыеУслуги.Ссылка.ВидПеревозки,
	|	уатЗаказГрузоотправителяПолучаемыеУслуги.Ссылка.НаправлениеПеревозки,
	|	уатЗаказГрузоотправителяПолучаемыеУслуги.Договор,
	|	уатЗаказГрузоотправителяПолучаемыеУслуги.Ссылка.Организация,
	|	уатЗаказГрузоотправителяПолучаемыеУслуги.Номенклатура,
	|	уатЗаказГрузоотправителяПолучаемыеУслуги.СтавкаНДС,
	|	ВЫБОР
	|		КОГДА уатЗаказГрузоотправителяПолучаемыеУслуги.Тариф.МетодРасчета = ЗНАЧЕНИЕ(Перечисление.уатМетодыРасчетаПоТарифам.ПроцентомОтСуммы)
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.Наценка)
	|		ИНАЧЕ уатЗаказГрузоотправителяПолучаемыеУслуги.Тариф.ПараметрВыработки
	|	КОНЕЦ,
	|	уатЗаказГрузоотправителяПолучаемыеУслуги.КоличествоПлан,
	|	ВЫБОР
	|		КОГДА уатЗаказГрузоотправителяПолучаемыеУслуги.УчитыватьНДС
	|				И НЕ уатЗаказГрузоотправителяПолучаемыеУслуги.СуммаВключаетНДС
	|			ТОГДА уатЗаказГрузоотправителяПолучаемыеУслуги.СуммаПлан + уатЗаказГрузоотправителяПолучаемыеУслуги.СуммаНДСПлан
	|		ИНАЧЕ уатЗаказГрузоотправителяПолучаемыеУслуги.СуммаПлан
	|	КОНЕЦ,
	|	0,
	|	0,
	|	уатЗаказГрузоотправителяПолучаемыеУслуги.СуммаНДСПлан,
	|	уатЗаказГрузоотправителяПолучаемыеУслуги.СуммаНДСПлан,
	|	уатЗаказГрузоотправителяПолучаемыеУслуги.Валюта,
	|	уатЗаказГрузоотправителяПолучаемыеУслуги.Ссылка.Ответственный КАК Менеджер,
	|	ЛОЖЬ
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя.Расходы КАК уатЗаказГрузоотправителяПолучаемыеУслуги
	|ГДЕ
	|	уатЗаказГрузоотправителяПолучаемыеУслуги.Ссылка = &Ссылка
	|	И (уатЗаказГрузоотправителяПолучаемыеУслуги.КоличествоПлан > 0 ИЛИ уатЗаказГрузоотправителяПолучаемыеУслуги.СуммаПлан > 0)");
	мЗапрос.УстановитьПараметр("ПустаяЕИ", Справочники.ЕдиницыИзмерения.ПустаяСсылка());
	
	мЗапрос.УстановитьПараметр("Ссылка",ДокументСсылка);
	мЗапрос.УстановитьПараметр("ПричинаЗакрытияОтклонен", Справочники.уатПричиныЗакрытияЗаказов.Отклонен);
	
	МассивРезультатов = мЗапрос.ВыполнитьПакет();
	
	Если ДокументСсылка.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам Тогда
		ТаблицаДокумента = МассивРезультатов[1].Выгрузить();
	ИначеЕсли ДокументСсылка.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам Тогда
		ТаблицаДокумента = МассивРезультатов[2].Выгрузить();
	Иначе
		ТаблицаДокумента = МассивРезультатов[3].Выгрузить();   
	КонецЕсли;
	
	КурсДокумента = уатОбщегоНазначенияТиповые.уатКурсДокумента(ДокументСсылка, СтруктураДополнительныеСвойства.ВалютаРеглУчета);
	КратностьДокумента = уатОбщегоНазначенияТиповые.уатКратностьДокумента(ДокументСсылка, СтруктураДополнительныеСвойства.ВалютаРеглУчета);
	
	ТаблицаСтатусыГрузов = МассивРезультатов[4].Выгрузить();
	
	Если ДокументСсылка.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам Тогда
		Для Каждого ТекСтрока Из ДокументСсылка.ГрузовойСостав Цикл
			Если ТекСтрока.ПричинаЗакрытия.ЗакрытУспешно 
				ИЛИ НЕ ЗначениеЗаполнено(ТекСтрока.ПричинаЗакрытия) Тогда
				НеФормироватьДвиженийПоУслугам = Ложь;
				Прервать;
			ИначеЕсли ЗначениеЗаполнено(ТекСтрока.ПричинаЗакрытия) Тогда 
				НеФормироватьДвиженийПоУслугам = Истина;
			КонецЕсли;
		КонецЦикла;
	Иначе
		Если НЕ НеФормироватьДвиженийПоУслугам Тогда
			Для Каждого ТекСтрока Из ТаблицаСтатусыГрузов Цикл
				Если ТекСтрока.Статус = Справочники.уатСтатусы_уэ.Отклонен Тогда 
					НеФормироватьДвиженийПоУслугам = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если НеФормироватьДвиженийПоУслугам Тогда
		ТаблицаДоходы  = Новый ТаблицаЗначений();
		ТаблицаРасходы = Новый ТаблицаЗначений();
	Иначе
		ТаблицаДоходы  = МассивРезультатов[5].Выгрузить();
		ТаблицаРасходы = МассивРезультатов[6].Выгрузить();
	КонецЕсли;
	
	КэшКурсов = Неопределено;
	
	//доходы
	Для Каждого ТекСтрока Из ТаблицаДоходы Цикл
		Если ЗначениеЗаполнено(ТекСтрока.Валюта) Тогда
			ВалютаСтроки = ТекСтрока.Валюта;
			СтруктураКурсаСтроки = СтруктураКурсаВалютыСтроки(ТекСтрока.Валюта, ДатаКурса, КэшКурсов);
		Иначе
			ВалютаСтроки = ДокументСсылка.ВалютаДокумента;
			СтруктураКурсаСтроки = Новый Структура("Курс, Кратность",
				СтруктураДополнительныеСвойства.КурсДокумента, СтруктураДополнительныеСвойства.КратностьДокумента);
		КонецЕсли;
			
		Если ВалютаСтроки = СтруктураДополнительныеСвойства.ВалютаУпрУчета Тогда
			ТекСтрока.СуммаУпр = ТекСтрока.Сумма;
		Иначе
			ТекСтрока.СуммаУпр  = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.Сумма,
				ВалютаСтроки,                   СтруктураДополнительныеСвойства.ВалютаУпрУчета,
				СтруктураКурсаСтроки.Курс,      СтруктураДополнительныеСвойства.КурсУпр,
				СтруктураКурсаСтроки.Кратность, СтруктураДополнительныеСвойства.КратностьУпр);
			ТекСтрока.СуммаНДСУпр = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаНДСУпр,
				ВалютаСтроки,                   СтруктураДополнительныеСвойства.ВалютаУпрУчета,
				СтруктураКурсаСтроки.Курс,      СтруктураДополнительныеСвойства.КурсУпр,
				СтруктураКурсаСтроки.Кратность, СтруктураДополнительныеСвойства.КратностьУпр);
		КонецЕсли;
		
		Если ВалютаСтроки = СтруктураДополнительныеСвойства.ВалютаРеглУчета Тогда
			ТекСтрока.СуммаРегл = ТекСтрока.Сумма;
		Иначе
			ТекСтрока.СуммаРегл = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.Сумма,
				ВалютаСтроки,                   СтруктураДополнительныеСвойства.ВалютаРеглУчета,
				СтруктураКурсаСтроки.Курс,      СтруктураДополнительныеСвойства.КурсРегл,
				СтруктураКурсаСтроки.Кратность, СтруктураДополнительныеСвойства.КратностьРегл);
			ТекСтрока.СуммаНДС 	= уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаНДС,
				ВалютаСтроки,                   СтруктураДополнительныеСвойства.ВалютаРеглУчета,
				СтруктураКурсаСтроки.Курс,      СтруктураДополнительныеСвойства.КурсРегл,
				СтруктураКурсаСтроки.Кратность, СтруктураДополнительныеСвойства.КратностьРегл);
		КонецЕсли;
	КонецЦикла;
	
	//расходы
	Для Каждого ТекСтрока Из ТаблицаРасходы Цикл
		Если ЗначениеЗаполнено(ТекСтрока.Валюта) Тогда
			ВалютаСтроки = ТекСтрока.Валюта;
			СтруктураКурсаСтроки = СтруктураКурсаВалютыСтроки(ТекСтрока.Валюта, ДатаКурса, КэшКурсов);
		Иначе
			ВалютаСтроки = ДокументСсылка.ВалютаДокумента;
			СтруктураКурсаСтроки = Новый Структура("Курс, Кратность",
				СтруктураДополнительныеСвойства.КурсДокумента, СтруктураДополнительныеСвойства.КратностьДокумента);
		КонецЕсли;
		
		Если ВалютаСтроки = СтруктураДополнительныеСвойства.ВалютаУпрУчета Тогда
			ТекСтрока.СуммаУпр = ТекСтрока.Сумма;
		Иначе
			ТекСтрока.СуммаУпр  = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.Сумма,
				ВалютаСтроки,                   СтруктураДополнительныеСвойства.ВалютаУпрУчета,
				СтруктураКурсаСтроки.Курс,      СтруктураДополнительныеСвойства.КурсУпр,
				СтруктураКурсаСтроки.Кратность, СтруктураДополнительныеСвойства.КратностьУпр);
			ТекСтрока.СуммаНДСУпр = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаНДСУпр,
				ВалютаСтроки,                   СтруктураДополнительныеСвойства.ВалютаУпрУчета,
				СтруктураКурсаСтроки.Курс,      СтруктураДополнительныеСвойства.КурсУпр,
				СтруктураКурсаСтроки.Кратность, СтруктураДополнительныеСвойства.КратностьУпр);
		КонецЕсли;

		Если ВалютаСтроки = СтруктураДополнительныеСвойства.ВалютаРеглУчета Тогда
			ТекСтрока.СуммаРегл = ТекСтрока.Сумма;
		Иначе
			ТекСтрока.СуммаРегл = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.Сумма,
				ВалютаСтроки,                   СтруктураДополнительныеСвойства.ВалютаРеглУчета,
				СтруктураКурсаСтроки.Курс,      СтруктураДополнительныеСвойства.КурсРегл,
				СтруктураКурсаСтроки.Кратность, СтруктураДополнительныеСвойства.КратностьРегл);
			ТекСтрока.СуммаНДС 	= уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаНДС,
				ВалютаСтроки,                   СтруктураДополнительныеСвойства.ВалютаРеглУчета,
				СтруктураКурсаСтроки.Курс,      СтруктураДополнительныеСвойства.КурсРегл,
				СтруктураКурсаСтроки.Кратность, СтруктураДополнительныеСвойства.КратностьРегл);
		КонецЕсли;
	КонецЦикла;
	
	мсвСообщенияОшибкиРаспределенияПоТС = Новый Массив;
	НастройкаДатаРаспределенияДоходовРасходов = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ДокументСсылка.Организация,
		ПланыВидовХарактеристик.уатПраваИНастройки.ДатаРаспределенияДоходовРасходовПоТСвЗаказахНаТС);
	Если НастройкаДатаРаспределенияДоходовРасходов = Перечисления.уатДатаРаспределенияДоходовРасходовПоТСвЗаказахНаТС.ДатаДокумента
		ИЛИ ДокументСсылка.ДатаЗакрытия <> '00010101' Тогда
		флОтказ = Ложь;
		РаспределениеУслугПоТС(ТаблицаДоходы, ДокументСсылка, флОтказ, "Доходы", мсвСообщенияОшибкиРаспределенияПоТС);
		РаспределениеУслугПоТС(ТаблицаРасходы, ДокументСсылка, флОтказ, "Расходы", мсвСообщенияОшибкиРаспределенияПоТС);
	КонецЕсли;
	
	// распределение доходов и расходов по заказам внутри контейнера
	мсвСообщенияОшибкиРаспределенияПоЗаказам = Новый Массив;
	уатРасчетыПоТарифам_уэ.РаспределитьДоходыРасходыМеждуЗаказами(ТаблицаДоходы, мсвСообщенияОшибкиРаспределенияПоЗаказам);
	уатРасчетыПоТарифам_уэ.РаспределитьДоходыРасходыМеждуЗаказами(ТаблицаРасходы, мсвСообщенияОшибкиРаспределенияПоЗаказам);
		
	уатОбщегоНазначения_уэ.ПодставитьСчетЗатратВТаблицуЗатрат(ТаблицаРасходы, ДокументСсылка.Организация, , ДокументСсылка.Подразделение);
		
	// Предоставленные услуги
	Если НеФормироватьДвиженийПоУслугам Тогда
		ТаблицаПредоставленныхУслуг = Новый ТаблицаЗначений();
	Иначе
		ТаблицаПредоставленныхУслуг = МассивРезультатов[0].Выгрузить();
	КонецЕсли;
	
	Для Каждого ТекСтрока Из ТаблицаПредоставленныхУслуг Цикл
		Если ЗначениеЗаполнено(ТекСтрока.Валюта) Тогда
			ВалютаСтроки = ТекСтрока.Валюта;
			СтруктураКурсаСтроки = СтруктураКурсаВалютыСтроки(ТекСтрока.Валюта, ДатаКурса, КэшКурсов);
		Иначе
			ВалютаСтроки = ДокументСсылка.ВалютаДокумента;
			СтруктураКурсаСтроки = Новый Структура("Курс, Кратность",
				СтруктураДополнительныеСвойства.КурсДокумента, СтруктураДополнительныеСвойства.КратностьДокумента);
		КонецЕсли;

		Если ВалютаСтроки = СтруктураДополнительныеСвойства.ВалютаРеглУчета Тогда
			ТекСтрока.СуммаРегл = ТекСтрока.Сумма;
		Иначе
			ТекСтрока.СуммаРегл = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.Сумма,
				ВалютаСтроки,                   СтруктураДополнительныеСвойства.ВалютаРеглУчета,
				СтруктураКурсаСтроки.Курс,      СтруктураДополнительныеСвойства.КурсРегл,
				СтруктураКурсаСтроки.Кратность, СтруктураДополнительныеСвойства.КратностьРегл);
			ТекСтрока.СуммаНДС 	= уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаНДС,
				ВалютаСтроки,                   СтруктураДополнительныеСвойства.ВалютаРеглУчета,
				СтруктураКурсаСтроки.Курс,      СтруктураДополнительныеСвойства.КурсРегл,
				СтруктураКурсаСтроки.Кратность, СтруктураДополнительныеСвойства.КратностьРегл);
		КонецЕсли;
		
		//Если ТекСтрока.ПолучательУслуг = Перечисления.уатПолучателиУслуг.НашаОрганизация И ВалютаСтроки <> ТекСтрока.ДоговорКонтрагента.ВалютаВзаиморасчетов Тогда
		//	СтруктураКурсаВзаиморасчетов = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ТекСтрока.ДоговорКонтрагента.ВалютаВзаиморасчетов, ДокументСсылка.Дата);
		//	ТекСтрока.Сумма = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.Сумма,
		//		ВалютаСтроки, ТекСтрока.ДоговорКонтрагента.ВалютаВзаиморасчетов,
		//		СтруктураКурсаСтроки.Курс, СтруктураКурсаВзаиморасчетов.Курс,
		//		СтруктураКурсаСтроки.Кратность, СтруктураКурсаВзаиморасчетов.Кратность);
		//КонецЕсли;
	КонецЦикла;
	
	Если НастройкаДатаРаспределенияДоходовРасходов = Перечисления.уатДатаРаспределенияДоходовРасходовПоТСвЗаказахНаТС.ДатаДокумента
		ИЛИ ДокументСсылка.ДатаЗакрытия <> '00010101' Тогда
		флОтказ = Ложь;
		РаспределениеУслугПоТС(ТаблицаПредоставленныхУслуг, ДокументСсылка, флОтказ, "Предоставленные услуги", мсвСообщенияОшибкиРаспределенияПоТС);
	КонецЕсли;

	// распределение предоставленных услуг по заказам внутри контейнера
	уатРасчетыПоТарифам_уэ.РаспределитьДоходыРасходыМеждуЗаказами(ТаблицаПредоставленныхУслуг, мсвСообщенияОшибкиРаспределенияПоЗаказам);
	
	// удаление срок с пустым договором, когда не удалось распределить по заказам
	Сч = ТаблицаПредоставленныхУслуг.Количество()-1;
	Пока Сч >= 0 Цикл
		Если НЕ ЗначениеЗаполнено(ТаблицаПредоставленныхУслуг[Сч].ДоговорКонтрагента) Тогда
			ТаблицаПредоставленныхУслуг.Удалить(Сч);
		КонецЕсли;
		Сч = Сч - 1;
	КонецЦикла;
		
	// плановые услуги
	Если ПолучитьФункциональнуюОпцию("уатИспользоватьПлановыеУслуги_уэ") Тогда
		Если НеФормироватьДвиженийПоУслугам Тогда
			ТаблицаПлановыеУслуги = Новый ТаблицаЗначений();
		Иначе
			ТаблицаПлановыеУслуги = МассивРезультатов[7].Выгрузить();
		КонецЕсли;
		
		Для Каждого ТекСтрока Из ТаблицаПлановыеУслуги Цикл
			Если ЗначениеЗаполнено(ТекСтрока.Валюта) Тогда
				ВалютаСтроки = ТекСтрока.Валюта;
				СтруктураКурсаСтроки = СтруктураКурсаВалютыСтроки(ТекСтрока.Валюта, ДатаКурса, КэшКурсов);
			Иначе
				ВалютаСтроки = ДокументСсылка.ВалютаДокумента;
				СтруктураКурсаСтроки = Новый Структура("Курс, Кратность",
					СтруктураДополнительныеСвойства.КурсДокумента, СтруктураДополнительныеСвойства.КратностьДокумента);
			КонецЕсли;
			
			Если ВалютаСтроки = СтруктураДополнительныеСвойства.ВалютаУпрУчета Тогда
				ТекСтрока.СуммаУпр = ТекСтрока.Сумма;
			Иначе
				ТекСтрока.СуммаУпр  = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.Сумма,
					ВалютаСтроки, СтруктураДополнительныеСвойства.ВалютаУпрУчета,
					СтруктураКурсаСтроки.Курс, СтруктураДополнительныеСвойства.КурсУпр,
					СтруктураКурсаСтроки.Кратность, СтруктураДополнительныеСвойства.КратностьУпр);
				ТекСтрока.СуммаНДСУпр = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаНДСУпр,
					ВалютаСтроки,                   СтруктураДополнительныеСвойства.ВалютаУпрУчета,
					СтруктураКурсаСтроки.Курс,      СтруктураДополнительныеСвойства.КурсУпр,
					СтруктураКурсаСтроки.Кратность, СтруктураДополнительныеСвойства.КратностьУпр);
			КонецЕсли;

			Если ВалютаСтроки = СтруктураДополнительныеСвойства.ВалютаРеглУчета Тогда
				ТекСтрока.СуммаРегл = ТекСтрока.Сумма;
			Иначе
				ТекСтрока.СуммаРегл = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.Сумма,
					ВалютаСтроки, СтруктураДополнительныеСвойства.ВалютаРеглУчета,
					СтруктураКурсаСтроки.Курс, СтруктураДополнительныеСвойства.КурсРегл,
					СтруктураКурсаСтроки.Кратность, СтруктураДополнительныеСвойства.КратностьРегл);
				ТекСтрока.СуммаНДС 	= уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаНДС,
					ВалютаСтроки, СтруктураДополнительныеСвойства.ВалютаРеглУчета,
					СтруктураКурсаСтроки.Курс, СтруктураДополнительныеСвойства.КурсРегл,
					СтруктураКурсаСтроки.Кратность, СтруктураДополнительныеСвойства.КратностьРегл);
			КонецЕсли;
		КонецЦикла;
		
		Если НастройкаДатаРаспределенияДоходовРасходов = Перечисления.уатДатаРаспределенияДоходовРасходовПоТСвЗаказахНаТС.ДатаДокумента
			ИЛИ ДокументСсылка.ДатаЗакрытия <> '00010101' Тогда
			флОтказ = Ложь;
			РаспределениеУслугПоТС(ТаблицаПлановыеУслуги, ДокументСсылка, флОтказ, "Плановые услуги", мсвСообщенияОшибкиРаспределенияПоТС);
		КонецЕсли;
		
		// распределение плановых услуг по заказам внутри контейнера
		уатРасчетыПоТарифам_уэ.РаспределитьДоходыРасходыМеждуЗаказами(ТаблицаПлановыеУслуги, мсвСообщенияОшибкиРаспределенияПоЗаказам);
		
		//// удаление строк с пустым договором, когда не удалось распределить по заказам
		//Сч = ТаблицаПлановыеУслуги.Количество()-1;
		//Пока Сч >= 0 Цикл
		//	Если НЕ ЗначениеЗаполнено(ТаблицаПлановыеУслуги[Сч].ДоговорКонтрагента) Тогда
		//		ТаблицаПлановыеУслуги.Удалить(Сч);
		//	КонецЕсли;
		//	Сч = Сч - 1;
		//КонецЦикла;
		
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПлановыеУслуги", ТаблицаПлановыеУслуги);
	КонецЕсли;
	
	// сообщение об ошибках распределения по ТС
	Если мсвСообщенияОшибкиРаспределенияПоТС.Количество() > 0 Тогда
		флОшибкиДоходы  = (мсвСообщенияОшибкиРаспределенияПоТС.Найти("Доходы") <> Неопределено);
		флОшибкиРасходы = (мсвСообщенияОшибкиРаспределенияПоТС.Найти("Расходы") <> Неопределено);
		
		Если флОшибкиДоходы ИЛИ флОшибкиРасходы Тогда
			Если флОшибкиДоходы И флОшибкиРасходы Тогда
				ТекстДоходыРасходы = "доходов и расходов";
			ИначеЕсли флОшибкиДоходы Тогда
				ТекстДоходыРасходы = "доходов";
			Иначе
				ТекстДоходыРасходы = "расходов";
			КонецЕсли;
			ТекстНСТР = СтрШаблон("Распределение %1 по ТС не выполнено или выполнено частично: в одной или нескольких статьях %1 не указан параметр распределения или отсутствует выработка по маршрутным листам",
				ТекстДоходыРасходы);
			уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР,,, СтатусСообщения.Внимание);
		КонецЕсли;
	КонецЕсли;
	
	// сообщение об ошибках распределения по Заказам
	Если мсвСообщенияОшибкиРаспределенияПоЗаказам.Количество() > 0 Тогда
		ТекстНСТР = СтрШаблон("Распределение услуг по Заказам не выполнено или выполнено частично: отсутствует выработка по Параметру распределения между вложенными Заказами (статья доходов/расходов - распределение между аналитиками)");
		уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР,,, СтатусСообщения.Внимание);
	КонецЕсли;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПредоставленныхУслуг",    ТаблицаПредоставленныхУслуг);
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗаказовГрузоотправителя", ТаблицаДокумента);
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаГрузовКПеревозке",        ТаблицаДокумента);
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаСтатусыГрузов",           ТаблицаСтатусыГрузов);
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДоходы",                  ТаблицаДоходы);
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРасходы",                 ТаблицаРасходы);
	
	уатПроведение_проф.СформироватьТаблицуДатыОбработкиДокументов(ДокументСсылка, СтруктураДополнительныеСвойства);
		
КонецПроцедуры // ИнициализироватьДанныеДокумента()

Процедура ВыполнитьКонтроль(ДокументСсылка, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь) Экспорт
	
	Заголовок = уатОбщегоНазначенияТиповые.уатПредставлениеДокументаПриПроведении(ДокументСсылка);
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатЗаказыГрузоотправителейОстатки.Контрагент,
	|	уатЗаказыГрузоотправителейОстатки.Номенклатура,
	|	уатЗаказыГрузоотправителейОстатки.КоличествоОстаток
	|ИЗ
	|	РегистрНакопления.уатЗаказыГрузоотправителей.Остатки(&МоментКонтроля, ЗаказГрузоотправителя = &Ссылка) КАК уатЗаказыГрузоотправителейОстатки
	|ГДЕ
	|	уатЗаказыГрузоотправителейОстатки.КоличествоОстаток < 0";
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("МоментКонтроля", ДополнительныеСвойства.ДляПроведения.МоментКонтроля);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ТекстНСТР = НСтр("en='Negative balances on customer ""%1"" for products and services ""%2"" were received';ru='Получены отрицательные остатки по заказчику ""%1"" для номенклатуры ""%2""'");
		ТекстНСТР = СтрШаблон(ТекстНСТР, Выборка.Контрагент, Выборка.Номенклатура);
		уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, Отказ, Заголовок, СтатусСообщения.Внимание);
	КонецЦикла;
	
	// Проверка возможности закрытия: можно закрыть только полностью развезенный или отклоненный заказ
	СтруктураНастроек = Новый Структура("Организация, Подразделение", ДокументСсылка.Организация, ДокументСсылка.Подразделение);
	Если НЕ УдалениеПроведения И ДокументСсылка.ДатаЗакрытия <> '00010101' Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	уатЗаказыГрузоотправителейОстатки.ЗаказГрузоотправителя
		|ИЗ
		|	РегистрНакопления.уатЗаказыГрузоотправителей.Остатки(, ЗаказГрузоотправителя = &ЗаказГрузоотправителя) КАК уатЗаказыГрузоотправителейОстатки");
		Запрос.УстановитьПараметр("ЗаказГрузоотправителя", ДокументСсылка);
		Если НЕ Запрос.Выполнить().Пустой() Тогда
			ТекстНСТР = НСтр("en='Closing of order is canceled: goods are not delivered or delivered not completely!';ru='Закрытие заказа отменено: грузы не доставлены или доставлены не полностью!'");
			уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, Отказ, Заголовок, СтатусСообщения.Внимание);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

// Получает дополнительные реквизиты для отображения в отчете "Реестр документов"
// 
// Возвращаемое значение:
//   Структура доп. реквизитов
//
Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура("Информация", "Контрагент");
	Возврат Результат;
	
КонецФункции

// Выполняет заполнение документа при вводе на основании потребности
//
// Параметры:
//  ДокОбъект			 - 	 - 
//  ДокПотребность		 - 	 - 
//  IDСтрокиПотребности	 - 	 - 
//  IDДатыДействия		 - 	 - 
//  ДатаОтправления		 - 	 - 
//  ДатаПрибытия		 - 	 - 
//
Процедура ЗаполнитьНаОснованииПотребности(ДокОбъект, ДокПотребность, IDСтрокиПотребности, IDДатыДействия, ДатаОтправления, ДатаПрибытия) Экспорт
	
	ДокОбъект.ДокументОснование   = ДокПотребность;
	ДокОбъект.IDСтрокиПотребности = IDСтрокиПотребности;
	ДокОбъект.IDДатыДействияПотребности = IDДатыДействия;
	
	СтрокаПотребности = Докпотребность.ПунктыНазначения.Найти(IDСтрокиПотребности, "ID");
	Если СтрокаПотребности = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДокОбъект.Контрагент                     = Докпотребность.Контрагент;
	ДокОбъект.ДоговорКонтрагента             = Докпотребность.ДоговорКонтрагента;
	ДокОбъект.ВалютаТоваров                  = Докпотребность.ВалютаТоваров;
	ДокОбъект.ВалютаДокумента                = Докпотребность.ВалютаДокумента;
	ДокОбъект.АдресОтправления               = СтрокаПотребности.АдресОтправления;
	ДокОбъект.АдресНазначения                = СтрокаПотребности.АдресНазначения;
	ДокОбъект.ТребованиеКТС                  = СтрокаПотребности.ТребованиеКТС;
	ДокОбъект.ТребованиеКТСТипТС             = СтрокаПотребности.ТребованиеКТСТипТС;
	ДокОбъект.КурсВзаиморасчетов             = Докпотребность.КурсВзаиморасчетов;
	ДокОбъект.КратностьВзаиморасчетов        = Докпотребность.КратностьВзаиморасчетов;
	ДокОбъект.СуммаВключаетНДС               = Докпотребность.СуммаВключаетНДС;
	ДокОбъект.УчитыватьНДС                   = Докпотребность.УчитыватьНДС;
	ДокОбъект.Грузоотправитель               = СтрокаПотребности.Грузоотправитель;
	ДокОбъект.Грузополучатель                = СтрокаПотребности.Грузополучатель;
	ДокОбъект.КонтактноеЛицоГрузоотправителя = СтрокаПотребности.КонтактноеЛицоГрузоотправителя;
	ДокОбъект.КонтактноеЛицоГрузополучателя  = СтрокаПотребности.КонтактноеЛицоГрузополучателя;
	ДокОбъект.ДетализацияЗакрытия            = Докпотребность.ДетализацияЗаказов;
	ДокОбъект.ВидПеревозки                   = СтрокаПотребности.ВидПеревозки;
	ДокОбъект.НаправлениеПеревозки           = СтрокаПотребности.НаправлениеПеревозки;
	ДокОбъект.ВидДоставки                    = СтрокаПотребности.ВидДоставки;
	ДокОбъект.ОбъектСтроительства            = СтрокаПотребности.ОбъектСтроительства;
	ДокОбъект.FTL                            = СтрокаПотребности.FTL;
	ДокОбъект.Маршрут                        = СтрокаПотребности.Маршрут;
	ДокОбъект.СтоянкаПунктОтправления        = СтрокаПотребности.СтоянкаПунктОтправления;
	ДокОбъект.СтоянкаПунктНазначения         = СтрокаПотребности.СтоянкаПунктНазначения;
	
	ДокОбъект.ОтправлениеС                   = ДатаОтправления + (СтрокаПотребности.ОтправлениеС - '00010101');
	ДокОбъект.ОтправлениеПо                  = ДатаОтправления + (СтрокаПотребности.ОтправлениеПо - '00010101');
	ДокОбъект.ДоставкаС                      = ДатаПрибытия + (СтрокаПотребности.ПрибытиеС - '00010101');
	ДокОбъект.ДоставкаПо                     = ДатаПрибытия + (СтрокаПотребности.ПрибытиеПо - '00010101');
	
	СоответствиеГрузов = Новый Соответствие;
	СоответствиеПунктов = Новый Соответствие;
	
	Для Каждого ТекСтрокаГрузМесто Из Докпотребность.ГрузовойСостав Цикл
		Если ТекСтрокаГрузМесто.ID = IDСтрокиПотребности Тогда
			НоваяСтрока = ДокОбъект.ГрузовойСостав.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаГрузМесто);
			Если ДокОбъект.FTL 
				И (ДокОбъект.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам
				Или ДокОбъект.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам) Тогда
				СоответствиеГрузов.Вставить(ТекСтрокаГрузМесто.НомерСтроки, НоваяСтрока.НомерСтроки);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекСтрокаТовар Из Докпотребность.ТоварныйСостав Цикл
		Если ТекСтрокаТовар.ID = IDСтрокиПотребности Тогда
			НоваяСтрока = ДокОбъект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаТовар);
			Если ДокОбъект.FTL 
				И ДокОбъект.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам Тогда
				СоответствиеГрузов.Вставить(ТекСтрокаТовар.НомерСтроки, НоваяСтрока.НомерСтроки);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	флЗаполнятьПлановыеДанные = ПолучитьФункциональнуюОпцию("уатИспользоватьПлановыеУслуги_уэ");
	
	Для Каждого ТекСтрокаУслуга Из Докпотребность.Услуги Цикл
		Если ТекСтрокаУслуга.ID = IDСтрокиПотребности Тогда
			НоваяСтрока = ДокОбъект.Услуги.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаУслуга);
			Если флЗаполнятьПлановыеДанные Тогда
				НоваяСтрока.КоличествоПлан = НоваяСтрока.Количество;
				НоваяСтрока.ЦенаПлан = НоваяСтрока.Цена;
				НоваяСтрока.СуммаПлан = НоваяСтрока.Сумма;
				НоваяСтрока.СуммаНДСПлан = НоваяСтрока.СуммаНДС;
				НоваяСтрока.Количество = 0;
				НоваяСтрока.Цена = 0;
				НоваяСтрока.Сумма = 0;
				НоваяСтрока.СуммаНДС = 0;
			КонецЕсли;
			НоваяСтрока.Содержание = НоваяСтрока.Номенклатура;
			НоваяСтрока.СтатьяДоходов = уатОбщегоНазначенияСервер.СтатьяДоходовНоменклатуры(НоваяСтрока.Номенклатура);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекСтрокаЗатрата Из Докпотребность.Расходы Цикл
		Если ТекСтрокаЗатрата.ID = IDСтрокиПотребности Тогда
			НоваяСтрока = ДокОбъект.Расходы.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаЗатрата);
			Если флЗаполнятьПлановыеДанные Тогда
				НоваяСтрока.КоличествоПлан = НоваяСтрока.Количество;
				НоваяСтрока.ЦенаПлан = НоваяСтрока.Цена;
				НоваяСтрока.СуммаПлан = НоваяСтрока.Сумма;
				НоваяСтрока.СуммаНДСПлан = НоваяСтрока.СуммаНДС;
				НоваяСтрока.Количество = 0;
				НоваяСтрока.Цена = 0;
				НоваяСтрока.Сумма = 0;
				НоваяСтрока.СуммаНДС = 0;
			КонецЕсли;
			НоваяСтрока.Содержание = НоваяСтрока.Номенклатура;
			НоваяСтрока.СтатьяРасходов = уатОбщегоНазначенияСервер.СтатьяРасходовНоменклатуры(НоваяСтрока.Номенклатура);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекСтрокаПП Из Докпотребность.ПромежуточныеПункты Цикл
		Если ТекСтрокаПП.ID = IDСтрокиПотребности Тогда
			НоваяСтрока = ДокОбъект.ПромежуточныеПункты.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаПП);
			Если ДокОбъект.FTL Тогда
				СоответствиеПунктов.Вставить(ТекСтрокаПП.НомерСтроки, НоваяСтрока.НомерСтроки);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ДокОбъект.FTL Тогда
		Для Каждого ТекСтрокаОтрезокПути Из Докпотребность.ОтрезкиПути Цикл
			Если ТекСтрокаОтрезокПути.ID = IDСтрокиПотребности Тогда
				НоваяСтрока = ДокОбъект.ОтрезкиПути.Добавить();
				НоваяСтрока.ПунктОтправления = СоответствиеПунктов.Получить(ТекСтрокаОтрезокПути.ПунктОтправления);
				НоваяСтрока.ПунктНазначения = СоответствиеПунктов.Получить(ТекСтрокаОтрезокПути.ПунктНазначения);
				НоваяСтрока.Груз = СоответствиеГрузов.Получить(ТекСтрокаОтрезокПути.Груз);
			КонецЕсли;
		КонецЦикла;
		
		// Обновление id отрезков пути
		Для Каждого ТекСтрока Из ДокОбъект.ОтрезкиПути Цикл
			Если ТекСтрока.id <> "" Тогда 
				Продолжить;
			КонецЕсли;
			ТекСтрока.id = Строка(Новый УникальныйИдентификатор);
			Для Сч = ТекСтрока.НомерСтроки По ДокОбъект.ОтрезкиПути.Количество()-1 Цикл
				Если ТекСтрока.ПунктНазначения = ДокОбъект.ОтрезкиПути[Сч].ПунктНазначения
					И ТекСтрока.ПунктОтправления = ДокОбъект.ОтрезкиПути[Сч].ПунктОтправления Тогда
					ДокОбъект.ОтрезкиПути[Сч].id = ТекСтрока.id;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	ДокОбъект.ВесБрутто      = СтрокаПотребности.ВесБрутто;
	ДокОбъект.Объем          = СтрокаПотребности.Объем;
	ДокОбъект.КоличествоМест = СтрокаПотребности.КоличествоМест;
	ДокОбъект.Расстояние     = СтрокаПотребности.Расстояние;
	ДокОбъект.ПробегСГрузом  = СтрокаПотребности.ПробегСГрузом;
	ДокОбъект.Время          = СтрокаПотребности.Время;
	ДокОбъект.Стоянка        = СтрокаПотребности.Стоянка;
	ДокОбъект.СтоимостьГруза = СтрокаПотребности.СтоимостьГруза;
	ДокОбъект.НазваниеГруза  = СтрокаПотребности.ОписаниеГруза;
	
	ДокОбъект.СуммаДокумента = уатОбщегоНазначенияТиповые.уатПолучитьСуммуДокументаСНДС(ДокОбъект, "Услуги");
		
КонецПроцедуры

// Вызывается при переходе на версию конфигурации 2.2.8.2
// Выполняет обновление способа хранения отрезков пути для FTL заказов
//
// Параметры:
//  ДокОбъект			 - 	 -  
Процедура ПерезаполнитьОтрезкиПути(ДокОбъект) Экспорт
	
	Если ДокОбъект.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам
		Или ДокОбъект.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам Тогда
		ТаблицаГрузов = ДокОбъект.ГрузовойСостав;
	Иначе
		ТаблицаГрузов = ДокОбъект.Товары;
	КонецЕсли;
	
	Отрезки = ТаблицаГрузов.Выгрузить(, "ОтрезокПути");
	Отрезки.Свернуть("ОтрезокПути");
	флДобавленыОтрезки = Ложь;
	
	Для Каждого ТекОтрезок Из Отрезки Цикл
		Если ТекОтрезок = "" Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокиГрузов = ТаблицаГрузов.НайтиСтроки(Новый Структура("ОтрезокПути", ТекОтрезок.ОтрезокПути));
		
		ОтрезкиПострочно = СтрЗаменить(ТекОтрезок.ОтрезокПути, " - ", Символы.ПС);
		
		Если СтрокиГрузов.Количество() Тогда 
			НомерПунктПогрузка  = Неопределено;
			НомерПунктРазгрузка = Неопределено;
			
			Для Сч = 0 По ДокОбъект.ПромежуточныеПункты.Количество() - 1 Цикл 
				Если Строка(ДокОбъект.ПромежуточныеПункты[Сч].Пункт) = СтрПолучитьСтроку(ОтрезкиПострочно, 1)
						И (ДокОбъект.ПромежуточныеПункты[Сч].ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка
						Или ДокОбъект.ПромежуточныеПункты[Сч].ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяПогрузка) Тогда 
					НомерПунктПогрузка = Сч+1;
					Для Сч2 = (Сч + 1) По ДокОбъект.ПромежуточныеПункты.Количество() - 1 Цикл 
						Если Строка(ДокОбъект.ПромежуточныеПункты[Сч2].Пункт) = СтрПолучитьСтроку(ОтрезкиПострочно, 2)
								И (ДокОбъект.ПромежуточныеПункты[Сч2].ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка
								Или ДокОбъект.ПромежуточныеПункты[Сч2].ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяРазгрузка) Тогда 
							НомерПунктРазгрузка = Сч2+1;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если Не НомерПунктПогрузка = Неопределено И Не НомерПунктРазгрузка = Неопределено Тогда 
				флДобавленыОтрезки = Истина;
				Для Каждого ТекСтрока Из СтрокиГрузов Цикл
					Для Сч = НомерПунктПогрузка По НомерПунктРазгрузка-1 Цикл                  
						НоваяСтрока = ДокОбъект.ОтрезкиПути.Добавить();
						НоваяСтрока.Груз = ТекСтрока.НомерСтроки;
						НоваяСтрока.ПунктОтправления = Сч;
						НоваяСтрока.ПунктНазначения = Сч+1;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекСтрока Из ДокОбъект.Товары Цикл
		ТекСтрока.ОтрезокПути = "";
	КонецЦикла;
	Для Каждого ТекСтрока Из ДокОбъект.ГрузовойСостав Цикл
		ТекСтрока.ОтрезокПути = "";
	КонецЦикла;
			
	Если флДобавленыОтрезки Тогда
		Для Каждого ТекСтрока Из ДокОбъект.ОтрезкиПути Цикл
			Если ТекСтрока.id <> "" Тогда 
				Продолжить;
			КонецЕсли;
			ТекСтрока.id = Строка(Новый УникальныйИдентификатор);
			Для Сч = ТекСтрока.НомерСтроки По ДокОбъект.ОтрезкиПути.Количество()-1 Цикл
				Если ТекСтрока.ПунктНазначения = ДокОбъект.ОтрезкиПути[Сч].ПунктНазначения
					И ТекСтрока.ПунктОтправления = ДокОбъект.ОтрезкиПути[Сч].ПунктОтправления Тогда
					ДокОбъект.ОтрезкиПути[Сч].id = ТекСтрока.id;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Формирует заголовок документа для печатных форм
Функция СформироватьНазваниеДокументаДляПечати(ТекущийДокумент) Экспорт
	
	Возврат уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ТекущийДокумент, НСтр("en='Order for trucking';ru='Заказ на ТС'"));
	
КонецФункции

Функция ПолучитьПараметрыОткрытияОтчетАнализОтгрузки(Ссылка) Экспорт
	СхемаКомпоновкиДанных = Отчеты.уатАнализОтгрузки_уэ.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");

    КомпоновщикНастроекКомпоновкиДанных = Новый КомпоновщикНастроекКомпоновкиДанных;
    КомпоновщикНастроекКомпоновкиДанных.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	НастройкиКомпоновки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	Для Каждого ТекЭлем Из НастройкиКомпоновки.Отбор.Элементы Цикл
		Если Строка(ТекЭлем.ЛевоеЗначение) = "Грузы.ЗаказГрузоотправителя" Тогда
			ТекЭлем.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ТекЭлем.ПравоеЗначение = Ссылка;
			ТекЭлем.Использование = Истина;
		КонецЕсли;
	КонецЦикла;
	
	КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьНастройки(НастройкиКомпоновки);
 
    сткПараметры = Новый Структура("СформироватьПриОткрытии, ПользовательскиеНастройки", Истина, КомпоновщикНастроекКомпоновкиДанных.ПользовательскиеНастройки);
	
	Возврат сткПараметры;
КонецФункции

Функция ПолучитьПараметрыОткрытияОтчетАнализПриемки(Ссылка) Экспорт
	СхемаКомпоновкиДанных = Отчеты.уатАнализПриемки_уэ.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");

    КомпоновщикНастроекКомпоновкиДанных = Новый КомпоновщикНастроекКомпоновкиДанных;
    КомпоновщикНастроекКомпоновкиДанных.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	НастройкиКомпоновки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	Для Каждого ТекЭлем Из НастройкиКомпоновки.Отбор.Элементы Цикл
		Если Строка(ТекЭлем.ЛевоеЗначение) = "Грузы.ЗаказГрузоотправителя" Тогда
			ТекЭлем.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ТекЭлем.ПравоеЗначение = Ссылка;
			ТекЭлем.Использование = Истина;
		КонецЕсли;
	КонецЦикла;
	
	КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьНастройки(НастройкиКомпоновки);
 
    сткПараметры = Новый Структура("СформироватьПриОткрытии, ПользовательскиеНастройки", Истина, КомпоновщикНастроекКомпоновкиДанных.ПользовательскиеНастройки);
	
	Возврат сткПараметры;
КонецФункции

Функция ПолучитьПараметрыОткрытияОтчетОстаткиГрузовНаСкладахКомплектации(Ссылка) Экспорт
	СхемаКомпоновкиДанных = Отчеты.уатОстаткиГрузовНаСкладахКомплектации_уэ.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");

    КомпоновщикНастроекКомпоновкиДанных = Новый КомпоновщикНастроекКомпоновкиДанных;
    КомпоновщикНастроекКомпоновкиДанных.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	НастройкиКомпоновки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	Для Каждого ТекЭлем Из НастройкиКомпоновки.Отбор.Элементы Цикл
		Если Строка(ТекЭлем.ЛевоеЗначение) = "ЗаказГрузоотправителя" Тогда
			ТекЭлем.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ТекЭлем.ПравоеЗначение = Ссылка;
			ТекЭлем.Использование = Истина;
		КонецЕсли;
	КонецЦикла;
	
	КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьНастройки(НастройкиКомпоновки);
 
    сткПараметры = Новый Структура("СформироватьПриОткрытии, ПользовательскиеНастройки", Истина, КомпоновщикНастроекКомпоновкиДанных.ПользовательскиеНастройки);
	
	Возврат сткПараметры;
КонецФункции

Функция ПолучитьПараметрыОткрытияОтчетГрузыВРейсах(Ссылка) Экспорт
	СхемаКомпоновкиДанных = Отчеты.уатГрузыВРейсах_уэ.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");

    КомпоновщикНастроекКомпоновкиДанных = Новый КомпоновщикНастроекКомпоновкиДанных;
    КомпоновщикНастроекКомпоновкиДанных.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	НастройкиКомпоновки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	Для Каждого ТекЭлем Из НастройкиКомпоновки.Отбор.Элементы Цикл
		Если Строка(ТекЭлем.ЛевоеЗначение) = "ЗаказГрузоотправителя" Тогда
			ТекЭлем.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ТекЭлем.ПравоеЗначение = Ссылка;
			ТекЭлем.Использование = Истина;
		КонецЕсли;
	КонецЦикла;
	
	КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьНастройки(НастройкиКомпоновки);
 
    сткПараметры = Новый Структура("СформироватьПриОткрытии, ПользовательскиеНастройки", Истина, КомпоновщикНастроекКомпоновкиДанных.ПользовательскиеНастройки);
	
	Возврат сткПараметры;
КонецФункции

Функция ПолучитьПараметрыОткрытияОтчетИсторияОперацийСГрузом(Ссылка) Экспорт
	СхемаКомпоновкиДанных = Отчеты.уатИсторияОперацийСГрузом_уэ.ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");

    КомпоновщикНастроекКомпоновкиДанных = Новый КомпоновщикНастроекКомпоновкиДанных;
    КомпоновщикНастроекКомпоновкиДанных.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	НастройкиКомпоновки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	Для Каждого ТекЭлем Из НастройкиКомпоновки.ПараметрыДанных.Элементы Цикл
		Если Строка(ТекЭлем.Параметр) = "Заказ" Тогда
			ТекЭлем.Значение = Ссылка;
		КонецЕсли;
	КонецЦикла;
	
	КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьНастройки(НастройкиКомпоновки);
 
    сткПараметры = Новый Структура("СформироватьПриОткрытии, ПользовательскиеНастройки", Истина, КомпоновщикНастроекКомпоновкиДанных.ПользовательскиеНастройки);
	
	Возврат сткПараметры;
КонецФункции

Функция ПолучитьСписокГрузовыхМестРодительскогоЗаказа(Знач РодительскийЗаказ, Знач ИмяТЧ) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", РодительскийЗаказ);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	уатЗаказГрузоотправителяТабличнаяЧасть.ГрузовоеМесто КАК ГрузовоеМесто
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя." + ИмяТЧ + " КАК уатЗаказГрузоотправителяТабличнаяЧасть
	|ГДЕ
	|	уатЗаказГрузоотправителяТабличнаяЧасть.Ссылка = &Ссылка";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ГрузовоеМесто");
	
КонецФункции

Функция ПолучитьСписокГрузовыхМестРодительскогоЗаказаДляАвтоподбора(Знач РодительскийЗаказ, Знач ИмяТЧ, Знач СтрокаПодбора) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка",        РодительскийЗаказ);
	Запрос.УстановитьПараметр("СтрокаПодбора", "" + СтрокаПодбора + "%");
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 50
	|	уатЗаказГрузоотправителяТабличнаяЧасть.ГрузовоеМесто КАК Ссылка,
	|	уатГрузовыеМеста_уэ.Наименование КАК Наименование
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя." + ИмяТЧ + " КАК уатЗаказГрузоотправителяТабличнаяЧасть
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.уатГрузовыеМеста_уэ КАК уатГрузовыеМеста_уэ
	|		ПО уатЗаказГрузоотправителяТабличнаяЧасть.ГрузовоеМесто = уатГрузовыеМеста_уэ.Ссылка
	|ГДЕ
	|	уатЗаказГрузоотправителяТабличнаяЧасть.Ссылка = &Ссылка
	|	И уатГрузовыеМеста_уэ.Наименование ПОДОБНО &СтрокаПодбора";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДанныеВыбора = Новый СписокЗначений();
	
	Пока Выборка.Следующий() Цикл 
		врПозицияОтсечения = СтрДлина(СтрокаПодбора);
		тПредставление = Новый ФорматированнаяСтрока(
			Новый ФорматированнаяСтрока(Лев(Выборка.Наименование, врПозицияОтсечения),, WebЦвета.Красный), 
			Новый ФорматированнаяСтрока(Прав(Выборка.Наименование, СтрДлина(Выборка.Наименование)-врПозицияОтсечения)));
		ДанныеВыбора.Добавить(Выборка.Ссылка, тПредставление);
	КонецЦикла;
	
	Возврат ДанныеВыбора;
	
КонецФункции

Функция ПолучитьСписокТоваровРодительскогоЗаказа(Знач РодительскийЗаказ) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", РодительскийЗаказ);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	уатЗаказГрузоотправителяТабличнаяЧасть.Номенклатура КАК Номенклатура
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя.Товары КАК уатЗаказГрузоотправителяТабличнаяЧасть
	|ГДЕ
	|	уатЗаказГрузоотправителяТабличнаяЧасть.Ссылка = &Ссылка";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Номенклатура");
	
КонецФункции

Функция ПолучитьСписокТоваровРодительскогоЗаказаДляАвтоподбора(Знач РодительскийЗаказ, Знач СтрокаПодбора) Экспорт
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка",        РодительскийЗаказ);
	Запрос.УстановитьПараметр("СтрокаПодбора", "" + СтрокаПодбора + "%");
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 50
	|	уатЗаказГрузоотправителяТабличнаяЧасть.Номенклатура КАК Ссылка,
	|	СправочникНоменклатура.Наименование КАК Наименование
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя.Товары КАК уатЗаказГрузоотправителяТабличнаяЧасть
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО уатЗаказГрузоотправителяТабличнаяЧасть.Номенклатура = СправочникНоменклатура.Ссылка
	|ГДЕ
	|	уатЗаказГрузоотправителяТабличнаяЧасть.Ссылка = &Ссылка
	|	И СправочникНоменклатура.Наименование ПОДОБНО &СтрокаПодбора";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДанныеВыбора = Новый СписокЗначений();
	
	Пока Выборка.Следующий() Цикл 
		врПозицияОтсечения = СтрДлина(СтрокаПодбора);
		тПредставление = Новый ФорматированнаяСтрока(
			Новый ФорматированнаяСтрока(Лев(Выборка.Наименование, врПозицияОтсечения),, WebЦвета.Красный), 
			Новый ФорматированнаяСтрока(Прав(Выборка.Наименование, СтрДлина(Выборка.Наименование)-врПозицияОтсечения)));
		ДанныеВыбора.Добавить(Выборка.Ссылка, тПредставление);
	КонецЦикла;
	
	Возврат ДанныеВыбора;
	
КонецФункции

#КонецОбласти


#Область ОбработчикиСобытий

Процедура ОбработкаПолученияПредставления(Данные, Представление, СтандартнаяОбработка)
	
	Заглушка = Истина;
	
	// Получение представления отключено для ускорения формирования списков.
	//СтандартнаяОбработка = Ложь;
	//
	//Если Не Данные.Ссылка = Неопределено И Данные.Ссылка.Мультимодальный Тогда 
	//	Если Данные.Ссылка.ЭтоЭтап И ЗначениеЗаполнено(Данные.Ссылка.РодительскийЗаказ) Тогда 
	//		мПредставление = "Этап";
	//	Иначе 
	//		мПредставление = "Мультимодальный заказ";
	//	КонецЕсли;
	//Иначе 
	//	мПредставление = "Заказ на ТС";
	//КонецЕсли;
	//
	//Представление = мПредставление + " " + Данные.Номер + " от " + Формат(Данные.Дата, "ДФ='dd.MM.yyyy HH:mm:ss'; ДП='01.01.0001 00:00:00'");
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Функция ПечатьЗаказНаТС(МассивОбъектов, ОбъектыПечати, ТипПФ = "Грузы")
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_ЗаказНаТС";
	
	ПервыйДокумент = Истина;
	флИспользованиеШК = уатЗащищенныеФункцииСервер_проф.ИспользоватьШтрихкодированиеОбъекта("уатЗаказГрузоотправителя");
	
	Для Каждого ТекущийДокумент Из МассивОбъектов Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_уатЗаказГрузоотправителя_ЗаказНаТС";
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.уатЗаказГрузоотправителя.ПФ_MXL_ЗаказНаТС");
		
		ОбластьЗаголовка           = "Заголовок";
		ОбластьРеквизитовЗаголовка = "ЗаголовокРеквизиты";
		ОбластьШапки               = "НоменклатураШапка";
		ОбластьСтроки              = "Номенклатура";
		ОбластьПодвал              = "ПодвалНоменклатура";
		ОбластьШапкиУслуги         = "УслугиШапка";
		ОбластьСтрокиУслуги        = "Услуги";
		ОбластьИтого               = "Итого";
		ОбластьПодвалУслуги        = "ПодвалУслуги";
		
		ТипШтрихкода = Константы.уатТипШтрихкодаДляПечати_уэ.Получить();
		Если ТипШтрихкода = Перечисления.уатТипыШтрихкодов.QR Тогда
			ОбластьМакета = Макет.ПолучитьОбласть("ЗаголовокQR");
			ОбластьМакета.Параметры.ТекстЗаголовка = СформироватьНазваниеДокументаДляПечати(ТекущийДокумент);			
			ОбластьМакета.Параметры.Заполнить(ТекущийДокумент);
			СписокТребуемыхПараметров	= "НаименованиеДляПечатныхФорм";
			СведенияОбОбъекте			= уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(ТекущийДокумент.Организация);
			ОбластьМакета.Параметры.ПредставлениеОрганизации = уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(СведенияОбОбъекте, СписокТребуемыхПараметров);
			
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		Иначе
			ОбластьМакета = Макет.ПолучитьОбласть(ОбластьЗаголовка);
			ОбластьМакета.Параметры.ТекстЗаголовка = СформироватьНазваниеДокументаДляПечати(ТекущийДокумент);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			// Шапка
			Шапка = Макет.ПолучитьОбласть(ОбластьРеквизитовЗаголовка);
			Шапка.Параметры.Заполнить(ТекущийДокумент);
			СписокТребуемыхПараметров	= "НаименованиеДляПечатныхФорм";
			СведенияОбОбъекте			= уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(ТекущийДокумент.Организация);
			Шапка.Параметры.ПредставлениеОрганизации = уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(СведенияОбОбъекте, СписокТребуемыхПараметров);
			
			ТабличныйДокумент.Вывести(Шапка);
		КонецЕсли;
		// Заказы
		Если ТипПФ = "Грузы" Тогда
			Таблица = ТекущийДокумент.Товары;
		Иначе
			Таблица = ТекущийДокумент.ГрузовойСостав;
		КонецЕсли;
		
		Если Таблица.Количество() Тогда
			ЕдиницаИзмеренияВес   = Константы.уатЕдиницаИзмеренияВеса.Получить();
			ЕдиницаИзмеренияОбъем = Константы.уатЕдиницаИзмеренияОбъема.Получить();
			ЕдиницаИзмеренияМеста = Справочники.уатВидыУпаковки_уэ.ПолучитьОсновнойВидУпаковки().КраткоеНаименование;

			Область = Макет.ПолучитьОбласть(ОбластьШапки);
			Область.Параметры.ЕдиницаИзмеренияВес   = "(" + ЕдиницаИзмеренияВес +")";
			Область.Параметры.ЕдиницаИзмеренияОбъем = "(" + ЕдиницаИзмеренияОбъем +")";
			Область.Параметры.ЕдиницаИзмеренияМеста = ЕдиницаИзмеренияМеста;
			ТабличныйДокумент.Вывести(Область);
			ОбластьЗаказы = Макет.ПолучитьОбласть(ОбластьСтроки);
			
			КоличествоНаименований = 0;
			ПеревезеноВес          = 0;
			ПеревезеноОбъем        = 0;
			ПеревезеноКолМест	   = 0;
			Для Каждого ТекСтрока Из Таблица Цикл
				ОбластьЗаказы.Параметры.НомерСтроки           = ТекСтрока.НомерСтроки;
				ОбластьЗаказы.Параметры.Номенклатура          = ?(ТипПФ = "Грузы", ТекСтрока.Номенклатура, ТекСтрока.ГрузовоеМесто);
				ОбластьЗаказы.Параметры.Количество            = ?(ТипПФ = "Грузы", ТекСтрока.Количество, ТекСтрока.КоличествоМест);
				ОбластьЗаказы.Параметры.ЕдиницаИзмерения      = ?(ТипПФ = "Грузы", ТекСтрока.ЕдиницаИзмерения, ТекСтрока.ВидУпаковки);
				ОбластьЗаказы.Параметры.Вес                   = ТекСтрока.ВесБрутто + ТекСтрока.ВесТары;
				ОбластьЗаказы.Параметры.Объем                 = ТекСтрока.Объем;
				ОбластьЗаказы.Параметры.КоличествоМест        = ТекСтрока.КоличествоМест;

				ТабличныйДокумент.Вывести(ОбластьЗаказы);
				
				КоличествоНаименований = КоличествоНаименований + 1;
			КонецЦикла;
			
			ПеревезеноВес          = ТекущийДокумент.ВесБрутто + ТекущийДокумент.ВесТары;
			ПеревезеноОбъем        = ТекущийДокумент.Объем;
			ПеревезеноКолМест      = ТекущийДокумент.КоличествоМест;

			ПараметрыПечати = Новый Структура();
			ПараметрыПечати.Вставить("КоличествоНаименований", ?(КоличествоНаименований = 0, "", КоличествоНаименований));
			ПараметрыПечати.Вставить("ПеревезеноВес", ?(ПеревезеноВес = 0, "", Формат(ПеревезеноВес, "ЧДЦ=3") + " " + ЕдиницаИзмеренияВес));
			ПараметрыПечати.Вставить("ПеревезеноОбъем", ?(ПеревезеноОбъем = 0, "", Формат(ПеревезеноОбъем, "ЧДЦ=3") + " " + ЕдиницаИзмеренияОбъем));
			ПараметрыПечати.Вставить("ПеревезеноКолМест", ?(ПеревезеноКолМест = 0, "", Формат(ПеревезеноКолМест, "ЧДЦ=3") + " " + ЕдиницаИзмеренияМеста));
			
			ОбластьМакета = Макет.ПолучитьОбласть(ОбластьПодвал);
			ОбластьМакета.Параметры.Заполнить(ПараметрыПечати);
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
		КонецЕсли;
		
		Сумма    = 0;
		СуммаНДС = 0;

		Если ТекущийДокумент.Услуги.Количество() Тогда
			Область = Макет.ПолучитьОбласть(ОбластьШапкиУслуги);
			ТабличныйДокумент.Вывести(Область);
			
			КэшКурсов = Неопределено;
			
			ОбластьУслуги = Макет.ПолучитьОбласть(ОбластьСтрокиУслуги);
			Для Каждого ТекСтрокаУслуги Из ТекущийДокумент.Услуги Цикл
				ОбластьУслуги.Параметры.Заполнить(ТекСтрокаУслуги);
				ОбластьУслуги.Параметры.Номенклатура = уатОбщегоНазначенияСервер.ПолучитьНаименованиеУслугиДляПечати(ТекСтрокаУслуги.Номенклатура, ТекСтрокаУслуги.Содержание);
				
				Если ЗначениеЗаполнено(ТекСтрокаУслуги.Валюта) И ТекСтрокаУслуги.Валюта <> ТекущийДокумент.ВалютаДокумента Тогда
					ДатаКурса = ?(ТекущийДокумент.ДатаКурса = '00010101', ТекущийДокумент.Дата, ТекущийДокумент.ДатаКурса);
					СтруктураКурсаСтроки = СтруктураКурсаВалютыСтроки(ТекСтрокаУслуги.Валюта, ДатаКурса, КэшКурсов);
					
					ТекЦена  = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрокаУслуги.Цена,
						ТекСтрокаУслуги.Валюта,         ТекущийДокумент.ВалютаДокумента,
						СтруктураКурсаСтроки.Курс,      ТекущийДокумент.КурсВзаиморасчетов,
						СтруктураКурсаСтроки.Кратность, ТекущийДокумент.КратностьВзаиморасчетов);
						
					ТекСумма  = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрокаУслуги.Сумма,
						ТекСтрокаУслуги.Валюта,         ТекущийДокумент.ВалютаДокумента,
						СтруктураКурсаСтроки.Курс,      ТекущийДокумент.КурсВзаиморасчетов,
						СтруктураКурсаСтроки.Кратность, ТекущийДокумент.КратностьВзаиморасчетов);
						
					ТекСуммаНДС  = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрокаУслуги.СуммаНДС,
						ТекСтрокаУслуги.Валюта,         ТекущийДокумент.ВалютаДокумента,
						СтруктураКурсаСтроки.Курс,      ТекущийДокумент.КурсВзаиморасчетов,
						СтруктураКурсаСтроки.Кратность, ТекущийДокумент.КратностьВзаиморасчетов);
						
					ОбластьУслуги.Параметры.Цена     = ТекЦена;
					ОбластьУслуги.Параметры.Сумма    = ТекСумма;
				Иначе
					ТекСумма    = ТекСтрокаУслуги.Сумма;
					ТекСуммаНДС = ТекСтрокаУслуги.СуммаНДС;
				КонецЕсли;
				
				Сумма    = Сумма    + ТекСумма;
				СуммаНДС = СуммаНДС + ТекСуммаНДС;
				
				ТабличныйДокумент.Вывести(ОбластьУслуги);
			КонецЦикла;
			
			// Итого
			ОбластьМакета = Макет.ПолучитьОбласть(ОбластьИтого);
			ОбластьМакета.Параметры.Всего = уатОбщегоНазначенияТиповые.уатФорматСумм(Сумма);
			
			Если ТекущийДокумент.УчитыватьНДС Тогда
				СтавкиНДС = ОбщегоНазначения.ВыгрузитьКолонку(ТекущийДокумент.Услуги, "СтавкаНДС", Истина);
				ДанныеПечатиНДС = уатОбщегоНазначенияТиповые.уатДанныеПечатиИтоговНДС(СуммаНДС, СтавкиНДС, ТекущийДокумент.СуммаВключаетНДС, ":");
				
				ОбластьМакета.Параметры.ВсегоНДС = ДанныеПечатиНДС.ВсегоНДС;
				ОбластьМакета.Параметры.НДС      = ДанныеПечатиНДС.НДС;
			КонецЕсли;
			ТабличныйДокумент.Вывести(ОбластьМакета);
			
			// Подвал
			ОбластьМакета = Макет.ПолучитьОбласть(ОбластьПодвалУслуги);
			СуммаКПрописи = Сумма + ?(ТекущийДокумент.СуммаВключаетНДС, 0, СуммаНДС);
			Если ТекущийДокумент.УчитыватьНДС И СуммаНДС <> 0 Тогда
				ОбластьМакета.Параметры.ИтоговаяСтрока = "Всего оказано услуг " + ТекущийДокумент.Услуги.Количество()
				+ ", на сумму " + уатОбщегоНазначенияТиповые.уатФорматСумм(СуммаКПрописи, ТекущийДокумент.ВалютаДокумента) + ", в том числе НДС "
				+ уатОбщегоНазначенияТиповые.уатФорматСумм(СуммаНДС, ТекущийДокумент.ВалютаДокумента);
				ОбластьМакета.Параметры.СуммаПрописью  = уатОбщегоНазначенияТиповые.уатСформироватьСуммуПрописью(СуммаКПрописи, ТекущийДокумент.ВалютаДокумента)
				+ ", в том числе НДС " + уатОбщегоНазначенияТиповые.уатСформироватьСуммуПрописью(СуммаНДС, ТекущийДокумент.ВалютаДокумента);
			Иначе
				ОбластьМакета.Параметры.ИтоговаяСтрока = "Всего оказано услуг " + ТекущийДокумент.Услуги.Количество()
				+ ", на сумму " + уатОбщегоНазначенияТиповые.уатФорматСумм(СуммаКПрописи, ТекущийДокумент.ВалютаДокумента);
				ОбластьМакета.Параметры.СуммаПрописью  = уатОбщегоНазначенияТиповые.уатСформироватьСуммуПрописью(СуммаКПрописи, ТекущийДокумент.ВалютаДокумента);		
			КонецЕсли;
			ТабличныйДокумент.Вывести(ОбластьМакета);
		КонецЕсли;
	
		УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ТекущийДокумент);
		
		// Печать штрихкодов
		Если флИспользованиеШК Тогда
			уатЗащищенныеФункцииСервер_проф.ОтобразитьШКнаПФ(ТабличныйДокумент, ТекущийДокумент);
		КонецЕсли;
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
    
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатнаяФорма()

Функция ПечатьУпаковочныйЛист(МассивОбъектов, ОбъектыПечати)
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "УпаковочныйЛист";
	ТабличныйДокумент.ИмяПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_уатЗаказГрузоотправителя_УпаковочныйЛист";

	ПервыйДокумент = Истина;
	Для Каждого ТекущийДокумент Из МассивОбъектов Цикл
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;

		КолВоГрузов = 0;
		флФормированиеШКНаКаждыйЭкземпляр = Ложь;
		Если ТекущийДокумент.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам Тогда
			Для Каждого ТекСтрока Из ТекущийДокумент.ГрузовойСостав Цикл
				Если ТекСтрока.ГрузовоеМесто.ФормированиеШКНаКаждыйЭкземпляр Тогда
					Для Счетчик = 1 По ТекСтрока.КоличествоМест Цикл
						флФормированиеШКНаКаждыйЭкземпляр = Истина;
						КолВоГрузов = КолВоГрузов + 1;
					КонецЦикла;
				Иначе
					 КолВоГрузов = КолВоГрузов + 1;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ТекущийДокумент.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам Тогда
			Для Каждого ТекСтрока Из ТекущийДокумент.Товары Цикл
				 КолВоГрузов = КолВоГрузов + 1;
			КонецЦикла;
		КонецЕсли;
		
		Если ТекущийДокумент.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам Тогда
			  ПечатьЭкземпляраЭтикетки(ТабличныйДокумент, ОбъектыПечати, ТекущийДокумент, ТекущийДокумент);
		ИначеЕсли ТекущийДокумент.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам Тогда
			ТекСчетчик = 1;
			Для Каждого ТекСтрока Из ТекущийДокумент.ГрузовойСостав Цикл
				Если ТекСтрока.ГрузовоеМесто.ФормированиеШКНаКаждыйЭкземпляр Тогда
					Для Счетчик = 1 По ТекСтрока.КоличествоМест Цикл
						 ПечатьЭкземпляраЭтикетки(ТабличныйДокумент, ОбъектыПечати, ТекущийДокумент, ТекСтрока.ГрузовоеМесто, ТекСчетчик, КолВоГрузов, ТекСтрока.НомерСтроки, флФормированиеШКНаКаждыйЭкземпляр);
						 ТекСчетчик = ТекСчетчик + 1;
					КонецЦикла;
				Иначе
					ПечатьЭкземпляраЭтикетки(ТабличныйДокумент, ОбъектыПечати, ТекущийДокумент, ТекСтрока.ГрузовоеМесто, ТекСчетчик, КолВоГрузов, ТекСтрока.НомерСтроки, флФормированиеШКНаКаждыйЭкземпляр);
					ТекСчетчик = ТекСчетчик + 1;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ТекущийДокумент.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам Тогда
			Для Каждого ТекСтрока Из ТекущийДокумент.Товары Цикл
				 ПечатьЭкземпляраЭтикетки(ТабличныйДокумент, ОбъектыПечати, ТекущийДокумент, ТекСтрока.Номенклатура, ТекСтрока.НомерСтроки, КолВоГрузов, ТекСтрока.НомерСтроки);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;

	ТабличныйДокумент.АвтоМасштаб = Истина;
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатнаяФорма()

Процедура ПечатьЭкземпляраЭтикетки(ТабличныйДокумент, ОбъектыПечати, ТекущийДокумент, Груз, НомерМеста = 0, КоличествоМест = 0, НомерСтроки = 0, флФормированиеШКНаКаждыйЭкземпляр = Ложь)
	
	Перем Ошибки;
	
	ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();

	НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;

	Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.уатЗаказГрузоотправителя.ПФ_MXL_УпаковочныйЛист");
	ТипШтрихкода = Константы.уатТипШтрихкодаДляПечати_уэ.Получить();
	
	// Печать штрихкодов
	флИспользованиеШК      = уатЗащищенныеФункцииСервер_проф.ИспользоватьШтрихкодированиеОбъекта("уатЗаказГрузоотправителя");
	флИспользуетсяШаблонШК = Константы.уатИспользоватьШаблонШтрихкода_уэ.Получить();

	Если ЗначениеЗаполнено(ТекущийДокумент.Организация.ФайлЛоготип) Тогда
		Если флИспользованиеШК Тогда
			Если ТипШтрихкода = Перечисления.уатТипыШтрихкодов.QR Тогда
				ОбластьМакета = Макет.ПолучитьОбласть("ОбластьПечатьЛоготипQR");
				
				ПодписиИФаксимиле = Новый Соответствие; // Ключ - имя каринки в области, Значение - имя реквизита
				ПодписиИФаксимиле.Вставить("ЛоготипQR", "ФайлЛоготип");
			Иначе
				ОбластьМакета = Макет.ПолучитьОбласть("ОбластьПечатьЛоготипШтрихкод");
				
				ПодписиИФаксимиле = Новый Соответствие; // Ключ - имя каринки в области, Значение - имя реквизита
				ПодписиИФаксимиле.Вставить("ЛоготипШтрихкод", "ФайлЛоготип");
			КонецЕсли;
		Иначе
			 ОбластьМакета = Макет.ПолучитьОбласть("ОбластьПечатьЛоготип");
			 ПодписиИФаксимиле = Новый Соответствие; // Ключ - имя каринки в области, Значение - имя реквизита
			 ПодписиИФаксимиле.Вставить("Логотип", "ФайлЛоготип");

		КонецЕсли;
	
		уатОбщегоНазначения.ЗаполнитьФаксимилеВОбластиМакета(ОбластьМакета, ТекущийДокумент.Организация, ПодписиИФаксимиле, Ошибки);
	Иначе
		Если флИспользованиеШК Тогда
			Если ТипШтрихкода = Перечисления.уатТипыШтрихкодов.QR Тогда
				ОбластьМакета = Макет.ПолучитьОбласть("ОбластьПечатьQR");
			Иначе
				ОбластьМакета = Макет.ПолучитьОбласть("ОбластьПечатьШтрихкод");
			КонецЕсли;
		Иначе
			ОбластьМакета = Макет.ПолучитьОбласть("ОбластьПечать");
		КонецЕсли;
	КонецЕсли;
	
	ПечатьПрефиксовВключена = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ТекущийДокумент.Организация, ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ВыводитьПрефиксПриПечати"));
	Если ПечатьПрефиксовВключена Тогда 
		ОбластьМакета.Параметры.НомерЗаказа    		  = ТекущийДокумент.Номер;
	Иначе 
		ОбластьМакета.Параметры.НомерЗаказа    		  = уатОбщегоНазначенияКлиентСервер.НомерДокументаНаПечать(ТекущийДокумент.Номер, Истина, Истина);
	КонецЕсли;
	
	ОбластьМакета.Параметры.ВходящийНомер  		  = ТекущийДокумент.НомерПоУчетуЗаказчика;
	ОбластьМакета.Параметры.КолВоМест      		  = ?(КоличествоМест = 0, 1, КоличествоМест);
	
	ПорядковыйНомерМеста = Строка(НомерМеста) + ?(НЕ флФормированиеШКНаКаждыйЭкземпляр, "", "/" + Строка(КоличествоМест));

	ОбластьМакета.Параметры.ПорядковыйНомерМеста  = ?(ПорядковыйНомерМеста = "0", 1, ПорядковыйНомерМеста);
	ТабличныйДокумент.Вывести(ОбластьМакета);

	ОбластьМакета = Макет.ПолучитьОбласть("ОбластьПечати");
	ОбластьМакета.Параметры.ДатаДоставкиПлан      = ТекущийДокумент.ДоставкаС;
	ОбластьМакета.Параметры.Грузополучатель       = ТекущийДокумент.Грузополучатель;
	ОбластьМакета.Параметры.Грузоотправитель      = ТекущийДокумент.Грузоотправитель;

	Если ТекущийДокумент.FTL Тогда
		АдресНазначения = ТекущийДокумент.АдресНазначения;
		Если ЗначениеЗаполнено(Груз) Тогда
			Для Каждого ТекСтрока Из ТекущийДокумент.ОтрезкиПути Цикл
				Если ТекСтрока.Груз = НомерМеста Тогда
					Попытка
						АдресНазначенияНомер = ТекСтрока.ПунктНазначения;
						АдресНазначения      = ТекущийДокумент.ПромежуточныеПункты[АдресНазначенияНомер - 1].Пункт;
					ИСключение
					КонецПопытки;
				КонецЕсли;
			КонецЦикла;
		Иначе
			Для Каждого ТекСтрока Из ТекущийДокумент.ПромежуточныеПункты Цикл
				Если ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка Тогда
					АдресНазначения = ТекСтрока.Пункт;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	Иначе
		АдресНазначения = ТекущийДокумент.АдресНазначения;
	КонецЕсли;
	
	Если ТипЗнч(АдресНазначения) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда
		Город = РаботаСАдресами.ГородАдресаКонтактнойИнформации(АдресНазначения.ЗначениеАдреса);
	Иначе
		Город = "";
	КонецЕсли;
		
	ОбластьМакета.Параметры.ГородСдачи = Врег(Город);
	ОбластьМакета.Параметры.АдресСдачи = АдресНазначения;
	ТабличныйДокумент.Вывести(ОбластьМакета);
	
	Если флИспользуетсяШаблонШК И Не ТипШтрихКода = Перечисления.уатТипыШтрихкодов.EAN13 Тогда
		ОбластьМакета = Макет.ПолучитьОбласть("ОбластьТрекНомера");
		ШК = уатЗащищенныеФункцииСервер_проф.ПолучитьСформироватьШтрихкодОбъекта(Груз, ТекущийДокумент, НомерСтроки, НомерМеста); 
		ОбластьМакета.Параметры.ТрекНомер = ШК;
		ТабличныйДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
		
	Если флИспользованиеШК = ИСТИНА Тогда
		уатЗащищенныеФункцииСервер_проф.ОтобразитьШКнаПФ(ТабличныйДокумент, Груз, ТекущийДокумент, НомерСтроки, НомерМеста);
	КонецЕсли;
	
	УправлениеПечатью.ЗадатьОбластьПечатиДокумента(ТабличныйДокумент, НомерСтрокиНачало, ОбъектыПечати, ТекущийДокумент);

КонецПроцедуры

// Распределяет доходы, расходы в Заказе по ТС, указанным в МЛ
//
Процедура РаспределениеУслугПоТС(ТаблицаУслуги, ДокументСсылка, Отказ, ИмяТЧ = "Доходы", СообщенияОбОшибках)
	Если ТаблицаУслуги.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Отказ = Ложь;
	
	Если ТаблицаУслуги.Колонки.Найти("ТС") = Неопределено Тогда
		ТаблицаУслуги.Колонки.Добавить("ТС");
	КонецЕсли;
	флЕстьКолонкаСуммаНДС        = (ТаблицаУслуги.Колонки.Найти("СуммаНДС") <> Неопределено);
	флЕстьКолонкаСуммаНДСУпр     = (ТаблицаУслуги.Колонки.Найти("СуммаНДСУпр") <> Неопределено);
	флЕстьКолонкаСумма           = (ТаблицаУслуги.Колонки.Найти("Сумма") <> Неопределено);
	флЕстьКолонкиЦенаИКоличество = (ТаблицаУслуги.Колонки.Найти("Цена") <> Неопределено) И (ТаблицаУслуги.Колонки.Найти("Количество") <> Неопределено);
	
	// построение таблицы коэффициентов по ТС
	тблТСМЛ = Новый ТаблицаЗначений;
	тблТСМЛ.Колонки.Добавить("ТС");
	тблТСМЛ.Колонки.Добавить("Прицеп1");
	тблТСМЛ.Колонки.Добавить("Прицеп2");
	тблТСМЛ.Колонки.Добавить("ПараметрВыработки");
	тблТСМЛ.Колонки.Добавить("Колонна");
	тблТСМЛ.Колонки.Добавить("Коэффициент", Новый ОписаниеТипов("Число"));
	
	ЗапросМЛ = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	уатМаршрутныйЛист.Ссылка,
	|	уатМаршрутныйЛист.ТС,
	|	уатМаршрутныйЛист.Прицеп1,
	|	уатМаршрутныйЛист.Прицеп2,
	|	уатМестонахождениеТССрезПоследних.Колонна
	|ИЗ
	|	Документ.уатМаршрутныйЛист КАК уатМаршрутныйЛист
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатМестонахождениеТС.СрезПоследних КАК уатМестонахождениеТССрезПоследних
	|		ПО уатМаршрутныйЛист.ТС = уатМестонахождениеТССрезПоследних.ТС
	|ГДЕ
	|	уатМаршрутныйЛист.Заказы.ЗаказГрузоотправителя = &ЗаказГрузоотправителя
	|	И уатМаршрутныйЛист.Проведен
	|	И НЕ уатМаршрутныйЛист.ПометкаУдаления");
	ЗапросМЛ.УстановитьПараметр("ЗаказГрузоотправителя", ДокументСсылка);
	ВыборкаМЛ = ЗапросМЛ.Выполнить().Выбрать();
	
	// для распределения по стоимости нужно переводить в валюту регл.
	ВалютаРегл = Константы.ВалютаРегламентированногоУчета.Получить();
	СтруктураКурсРегл = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ВалютаРегл, ДокументСсылка.Дата);
	СтруктураВалютаКурс = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ДокументСсылка.ВалютаТоваров, ДокументСсылка.Дата);
	
	Пока ВыборкаМЛ.Следующий() Цикл
		// таблица грузов в текущей точке маршрута
		тблГрузы = Новый ТаблицаЗначений;
		тблГрузы.Колонки.Добавить("Заказ");
		тблГрузы.Колонки.Добавить("Номенклатура");
		тблГрузы.Колонки.Добавить("ЕдиницаИзмерения");
		тблГрузы.Колонки.Добавить("Количество");
		
		МЛЗаказы = ВыборкаМЛ.Ссылка.Заказы;
		
		ПредПункт = Неопределено;
		ПредЗаказ = Неопределено;
		Для Каждого ТекСтрока Из МЛЗаказы Цикл
			
			// обновляем состав грузов в текущей точке маршрута
			Если (ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка
				ИЛИ ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка)
				И ТекСтрока.Количество > 0 Тогда
				// добавляем строку груза
				НоваяСтрока = тблГрузы.Добавить();
				НоваяСтрока.Заказ = ТекСтрока.ЗаказГрузоотправителя;
				НоваяСтрока.Номенклатура = ТекСтрока.Номенклатура;
				НоваяСтрока.ЕдиницаИзмерения = ТекСтрока.ЕдиницаИзмерения;
				НоваяСтрока.Количество = ТекСтрока.Количество * ?(ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка, 1, -1);
				тблГрузы.Свернуть("Заказ, Номенклатура, ЕдиницаИзмерения", "Количество");
				// теперь нужно удалить строки с количеством = 0
				мсвСтрокиУдалить = тблГрузы.НайтиСтроки(Новый Структура("Количество", 0));
				Для Каждого ТекСтрокаГруз Из мсвСтрокиУдалить Цикл
					тблГрузы.Удалить(ТекСтрокаГруз);
				КонецЦикла;
			КонецЕсли;
			
			Если ТекСтрока.ЗаказГрузоотправителя = ДокументСсылка Тогда
				// количество заказов
				Если тблТСМЛ.НайтиСтроки(Новый Структура("ТС, ПараметрВыработки", ВыборкаМЛ.ТС, Справочники.уатПараметрыВыработки.КоличествоЗаказов)).Количество() = 0 Тогда
					СтрокаТС = тблТСМЛ.Добавить();
					СтрокаТС.ТС = ВыборкаМЛ.ТС;
					СтрокаТС.Прицеп1 = ВыборкаМЛ.Прицеп1;
					СтрокаТС.Прицеп2 = ВыборкаМЛ.Прицеп2;
					СтрокаТС.Колонна = ВыборкаМЛ.Колонна;
					СтрокаТС.ПараметрВыработки = Справочники.уатПараметрыВыработки.КоличествоЗаказов;
					СтрокаТС.Коэффициент = 1 * Справочники.уатПараметрыВыработки.КоличествоЗаказов.ВесовойКоэффициентДоходовРасходов;
				КонецЕсли;
				
				Если ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка тогда
					// вес груза
					СтрокаТС = тблТСМЛ.Добавить();
					СтрокаТС.ТС = ВыборкаМЛ.ТС;
					СтрокаТС.Прицеп1 = ВыборкаМЛ.Прицеп1;
					СтрокаТС.Прицеп2 = ВыборкаМЛ.Прицеп2;
					СтрокаТС.Колонна = ВыборкаМЛ.Колонна;
					СтрокаТС.ПараметрВыработки = Справочники.уатПараметрыВыработки.ВесГруза;
					СтрокаТС.Коэффициент = ТекСтрока.ВесБрутто * Справочники.уатПараметрыВыработки.ВесГруза.ВесовойКоэффициентДоходовРасходов;
					// объем груза
					СтрокаТС = тблТСМЛ.Добавить();
					СтрокаТС.ТС = ВыборкаМЛ.ТС;
					СтрокаТС.Прицеп1 = ВыборкаМЛ.Прицеп1;
					СтрокаТС.Прицеп2 = ВыборкаМЛ.Прицеп2;
					СтрокаТС.Колонна = ВыборкаМЛ.Колонна;
					СтрокаТС.ПараметрВыработки = Справочники.уатПараметрыВыработки.Объем;
					СтрокаТС.Коэффициент = ТекСтрока.Объем * Справочники.уатПараметрыВыработки.Объем.ВесовойКоэффициентДоходовРасходов;
				КонецЕсли;
			КонецЕсли;
			
			// Время и расстояние - чуть сложнее - нужно учитывать для каждого груза по каждой точке маршрута,
			// если этот груз находится в машине
			
			// расчет пункта в следующей строке
			СледПункт = ?(ТекСтрока.НомерСтроки < МЛЗаказы.Количество(), МЛЗаказы[ТекСтрока.НомерСтроки].Пункт, Неопределено);
			Если СледПункт <> ТекСтрока.Пункт Тогда // Это последняя строка в этом пункте, следующая строка - другой пункт
				мсвУчитанныхЗаказов = Новый Массив;
				Для Каждого ТекГруз Из тблГрузы Цикл // Просмотр состава грузов в этой точке маршрута
					Если мсвУчитанныхЗаказов.Найти(ТекГруз.Заказ) <> Неопределено Тогда // Если много грузов по одному заказу, то учитываем только первый
						Продолжить;
					КонецЕсли;
					
					Если ТекГруз.Заказ = ДокументСсылка Тогда
						Если ТекСтрока.НомерСтроки <> МЛЗаказы.Количество() Тогда // В последнем пункте время и расстояние не учитываем
							// расстояние (пробег с грузом)
							СтрокаТС = тблТСМЛ.Добавить();
							СтрокаТС.ТС = ВыборкаМЛ.ТС;
							СтрокаТС.Прицеп1 = ВыборкаМЛ.Прицеп1;
							СтрокаТС.Прицеп2 = ВыборкаМЛ.Прицеп2;
							СтрокаТС.Колонна = ВыборкаМЛ.Колонна;
							СтрокаТС.ПараметрВыработки = Справочники.уатПараметрыВыработки.ПробегСГрузом;
							СтрокаТС.Коэффициент = ТекСтрока.Расстояние * Справочники.уатПараметрыВыработки.ПробегСГрузом.ВесовойКоэффициентДоходовРасходов;
							// расстояние (пробег общий)
							СтрокаТС = тблТСМЛ.Добавить();
							СтрокаТС.ТС = ВыборкаМЛ.ТС;
							СтрокаТС.Прицеп1 = ВыборкаМЛ.Прицеп1;
							СтрокаТС.Прицеп2 = ВыборкаМЛ.Прицеп2;
							СтрокаТС.Колонна = ВыборкаМЛ.Колонна;
							СтрокаТС.ПараметрВыработки = Справочники.уатПараметрыВыработки.ПробегОбщий;
							СтрокаТС.Коэффициент = ТекСтрока.Расстояние * Справочники.уатПараметрыВыработки.ПробегОбщий.ВесовойКоэффициентДоходовРасходов;
							// время
							СтрокаТС = тблТСМЛ.Добавить();
							СтрокаТС.ТС = ВыборкаМЛ.ТС;
							СтрокаТС.Прицеп1 = ВыборкаМЛ.Прицеп1;
							СтрокаТС.Прицеп2 = ВыборкаМЛ.Прицеп2;
							СтрокаТС.Колонна = ВыборкаМЛ.Колонна;
							СтрокаТС.ПараметрВыработки = Справочники.уатПараметрыВыработки.ВремяВРаботе;
							СтрокаТС.Коэффициент = уатОбщегоНазначения.уатВремяВСекунды(ТекСтрока.Время) * Справочники.уатПараметрыВыработки.ВремяВРаботе.ВесовойКоэффициентДоходовРасходов;
						КонецЕсли;
						// стоянки
						СтрокаТС = тблТСМЛ.Добавить();
						СтрокаТС.ТС = ВыборкаМЛ.ТС;
						СтрокаТС.Прицеп1 = ВыборкаМЛ.Прицеп1;
						СтрокаТС.Прицеп2 = ВыборкаМЛ.Прицеп2;
						СтрокаТС.Колонна = ВыборкаМЛ.Колонна;
						СтрокаТС.ПараметрВыработки = Справочники.уатПараметрыВыработки.ВремяВПростое;
						СтрокаТС.Коэффициент = уатОбщегоНазначения.уатВремяВСекунды(ТекСтрока.Стоянка) * Справочники.уатПараметрыВыработки.ВремяВПростое.ВесовойКоэффициентДоходовРасходов;
					КонецЕсли;
					
					мсвУчитанныхЗаказов.Добавить(ТекГруз.Заказ);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	тблТСМЛ.Свернуть("ТС, Прицеп1, Прицеп2, Колонна, ПараметрВыработки", "Коэффициент");
	
	Если Константы.уатЕдиницаИзмеренияВеса.Получить() = Перечисления.уатЕдиницыИзмеренияВеса.Килограмм Тогда 
		КоэфГрузоподъемности = 1000;
	Иначе 
		КоэфГрузоподъемности = 1;
	КонецЕсли;
	
	Если Константы.уатЕдиницаИзмеренияОбъема.Получить() = Перечисления.уатЕдиницыИзмеренияОбъема.Литр Тогда 
		КоэфОбъемаКузова = 1000;
	Иначе 
		КоэфОбъемаКузова = 1;
	КонецЕсли;
	
	// наконец, распределение услуг
	мсвСтрокУдалить = Новый Массив;
	Для Сч = 0 По ТаблицаУслуги.Количество()-1 Цикл
		ТекСтрокаУслуги = ТаблицаУслуги[Сч];
		
		Если ИмяТЧ = "Доходы" Тогда
			ИмяТЧдоп = "Доходы";
			ТекСтатья = ТекСтрокаУслуги.СтатьяДоходов;
		ИначеЕсли ИмяТЧ = "Расходы" Тогда
			ИмяТЧдоп = "Расходы";
			ТекСтатья = ТекСтрокаУслуги.СтатьяРасходов;
		ИначеЕсли ИмяТЧ = "Плановые услуги" И ТекСтрокаУслуги.ИмяТЧ = "Плановые доходы" Тогда
			ИмяТЧдоп = "Доходы";
			ТекСтатья = ТекСтрокаУслуги.СтатьяДоходов;
		ИначеЕсли ИмяТЧ = "Плановые услуги" И ТекСтрокаУслуги.ИмяТЧ = "Плановые расходы" Тогда
			ИмяТЧдоп = "Расходы";
			ТекСтатья = ТекСтрокаУслуги.СтатьяРасходов;
		ИначеЕсли ИмяТЧ = "Предоставленные услуги" Тогда
			Если ТипЗнч(ТекСтрокаУслуги.Статья) = Тип("СправочникСсылка.уатСтатьиДоходов") Тогда
				ИмяТЧдоп = "Доходы";
			Иначе
				ИмяТЧдоп = "Расходы";
			КонецЕсли;
			ТекСтатья = ТекСтрокаУслуги.Статья;
		КонецЕсли;
		
		тблТСМЛпоСтатье = тблТСМЛ.Скопировать();
		
		// Вычисление параметра выработки для распределения
		// если способ = не распределять, то переходим к следующей строке
		Если ИмяТЧдоп = "Доходы" Тогда
			флРаспределять = (ТекСтатья.СпособРаспределенияМеждуТС = Перечисления.уатСпособыРаспределенияДоходовРасходовМеждуТС.ПоОбъемуВыработкиМЛ);
		Иначе
			флРаспределять = (ТекСтатья.СпособРаспределенияЗатрат = Перечисления.уатСпособыРаспределенияДоходовРасходовМеждуТС.ПоОбъемуВыработкиМЛ);
		КонецЕсли;
		Если НЕ флРаспределять Тогда
			Продолжить;
		КонецЕсли;
		
		// проверка на заполнение параметра выработки для распределения
		Если НЕ ЗначениеЗаполнено(ТекСтатья.ПараметрВыработкиРаспределенияМеждуТС) Тогда
			Если СообщенияОбОшибках.Найти(ИмяТЧдоп) = Неопределено Тогда
				СообщенияОбОшибках.Добавить(ИмяТЧдоп);
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
		
		// удаляем лишние строки в таблице коэффициентов
		мсвСтрокКоэфУдалить = Новый Массив;
		Для Каждого ТекСтрокаКоэф Из тблТСМЛпоСтатье Цикл
			Если ТекСтрокаКоэф.ПараметрВыработки <> ТекСтатья.ПараметрВыработкиРаспределенияМеждуТС Тогда
				мсвСтрокКоэфУдалить.Добавить(ТекСтрокаКоэф);
			КонецЕсли;
		КонецЦикла;
		Для Каждого ТекСтрокаКоэф Из мсвСтрокКоэфУдалить Цикл
			тблТСМЛпоСтатье.Удалить(ТекСтрокаКоэф);
		КонецЦикла;
		
		// проверка на наличие выработки по параметру выработки распределения
		КоэффициентВсего = тблТСМЛпоСтатье.Итог("Коэффициент");
		Если КоэффициентВсего = 0 Тогда
			Если СообщенияОбОшибках.Найти(ИмяТЧдоп) = Неопределено Тогда
				СообщенияОбОшибках.Добавить(ИмяТЧдоп);
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
		
		// переменные для расчета "последней копейки"
		СуммаРаспределеннаяРегл = 0;
		СуммаРаспределеннаяУпр = 0;
		СуммаРаспределеннаяНДС = 0;
		СуммаРаспределеннаяНДСУпр = 0;
		СуммаРаспределенная = 0;
		
		Если Не ТекСтрокаУслуги.Владелец().Колонки.Найти("СтатьяДоходов") = Неопределено И Не ТекСтрокаУслуги.СтатьяДоходов = Неопределено Тогда 
			флРаспределятьПоСцепке = ТекСтрокаУслуги.СтатьяДоходов.РаспределениеДоходовПоСцепкам;
			СпособРаспределенияСцепки = ТекСтрокаУслуги.СтатьяДоходов.СпособРаспределенияВнутриСцепки;
		ИначеЕсли Не ТекСтрокаУслуги.Владелец().Колонки.Найти("СтатьяРасходов") = Неопределено И Не ТекСтрокаУслуги.СтатьяРасходов = Неопределено Тогда 
			флРаспределятьПоСцепке = ТекСтрокаУслуги.СтатьяРасходов.РаспределениеРасходовПоСцепкам;
			СпособРаспределенияСцепки = ТекСтрокаУслуги.СтатьяРасходов.СпособРаспределенияВнутриСцепки;
		Иначе 
			флРаспределятьПоСцепке = Ложь;
			СпособРаспределенияСцепки = Неопределено;
		КонецЕсли;
		
		Для Каждого ТекТС Из тблТСМЛпоСтатье Цикл
			СчОбх = 0;
			ОбщКоэф = 0;
			мсвТСПодстановка = Новый Массив();
			
			Если СпособРаспределенияСцепки = Перечисления.уатСпособРаспределенияВнутриСцепки.ПропорциональноГрузоподъемности Тогда 
				ТекКоэф = ТекТС.ТС.Модель.Грузоподъемность * КоэфГрузоподъемности;
				ОбщКоэф = ТекТС.ТС.Модель.Грузоподъемность * КоэфГрузоподъемности;
			ИначеЕсли СпособРаспределенияСцепки = Перечисления.уатСпособРаспределенияВнутриСцепки.ПропорциональноОбъемуКузова Тогда 
				ТекКоэф = ТекТС.ТС.Модель.ОбъемКузова * КоэфОбъемаКузова;
				ОбщКоэф = ТекТС.ТС.Модель.ОбъемКузова * КоэфОбъемаКузова;
			ИначеЕсли СпособРаспределенияСцепки = Перечисления.уатСпособРаспределенияВнутриСцепки.ПропорциональноКоличествуУпаковок Тогда 
				ТекКоэф = ТекТС.ТС.Модель.МаксимальноеКоличествоУпаковок;
				ОбщКоэф = ТекТС.ТС.Модель.МаксимальноеКоличествоУпаковок;
			Иначе 
				ТекКоэф = 0;
			КонецЕсли;
			мсвТСПодстановка.Добавить(Новый Структура("ТС, Коэф", ТекТС.ТС, ТекКоэф));
			
			Если флРаспределятьПоСцепке Тогда 
				Если ЗначениеЗаполнено(ТекТС.Прицеп1) Тогда 
					СчОбх = СчОбх + 1;
					
					Если СпособРаспределенияСцепки = Перечисления.уатСпособРаспределенияВнутриСцепки.ПропорциональноГрузоподъемности Тогда 
						ТекКоэф = ТекТС.Прицеп1.Модель.Грузоподъемность * КоэфГрузоподъемности;
						ОбщКоэф = ОбщКоэф + ТекТС.Прицеп1.Модель.Грузоподъемность * КоэфГрузоподъемности;
					ИначеЕсли СпособРаспределенияСцепки = Перечисления.уатСпособРаспределенияВнутриСцепки.ПропорциональноОбъемуКузова Тогда 
						ТекКоэф = ТекТС.Прицеп1.Модель.ОбъемКузова * КоэфОбъемаКузова;
						ОбщКоэф = ОбщКоэф + ТекТС.Прицеп1.Модель.ОбъемКузова * КоэфОбъемаКузова;
					ИначеЕсли СпособРаспределенияСцепки = Перечисления.уатСпособРаспределенияВнутриСцепки.ПропорциональноКоличествуУпаковок Тогда 
						ТекКоэф = ТекТС.Прицеп1.Модель.МаксимальноеКоличествоУпаковок;
						ОбщКоэф = ОбщКоэф + ТекТС.Прицеп1.Модель.МаксимальноеКоличествоУпаковок;
					Иначе 
						ТекКоэф = 0;
					КонецЕсли;
					мсвТСПодстановка.Добавить(Новый Структура("ТС, Коэф", ТекТС.Прицеп1, ТекКоэф));
				КонецЕсли;
				Если ЗначениеЗаполнено(ТекТС.Прицеп2) Тогда 
					СчОбх = СчОбх + 1;
					
					Если СпособРаспределенияСцепки = Перечисления.уатСпособРаспределенияВнутриСцепки.ПропорциональноГрузоподъемности Тогда 
						ТекКоэф = ТекТС.Прицеп2.Модель.Грузоподъемность * КоэфГрузоподъемности;
						ОбщКоэф = ОбщКоэф + ТекТС.Прицеп2.Модель.Грузоподъемность * КоэфГрузоподъемности;
					ИначеЕсли СпособРаспределенияСцепки = Перечисления.уатСпособРаспределенияВнутриСцепки.ПропорциональноОбъемуКузова Тогда 
						ТекКоэф = ТекТС.Прицеп2.Модель.ОбъемКузова * КоэфОбъемаКузова;
						ОбщКоэф = ОбщКоэф + ТекТС.Прицеп2.Модель.ОбъемКузова * КоэфОбъемаКузова;
					ИначеЕсли СпособРаспределенияСцепки = Перечисления.уатСпособРаспределенияВнутриСцепки.ПропорциональноКоличествуУпаковок Тогда 
						ТекКоэф = ТекТС.Прицеп2.Модель.МаксимальноеКоличествоУпаковок;
						ОбщКоэф = ОбщКоэф + ТекТС.Прицеп2.Модель.МаксимальноеКоличествоУпаковок;
					Иначе 
						ТекКоэф = 0;
					КонецЕсли;
					мсвТСПодстановка.Добавить(Новый Структура("ТС, Коэф", ТекТС.Прицеп2, ТекКоэф));
				КонецЕсли;
			КонецЕсли;
			
			Для ИндЭлем = 0 По СчОбх Цикл 
				НоваяСтрокаУслуги = ТаблицаУслуги.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаУслуги, ТекСтрокаУслуги);
				НоваяСтрокаУслуги.ТС = мсвТСПодстановка[ИндЭлем].ТС;
				
				СуммаУпрСцепки = ТекСтрокаУслуги.СуммаУпр * ТекТС.Коэффициент / КоэффициентВсего;
				НоваяСтрокаУслуги.СуммаУпр = ?(ОбщКоэф = 0, СуммаУпрСцепки, СуммаУпрСцепки * мсвТСПодстановка[ИндЭлем].Коэф / ОбщКоэф);
				СуммаРаспределеннаяУпр = СуммаРаспределеннаяУпр + НоваяСтрокаУслуги.СуммаУпр;
				
				СуммаРеглСцепки = ТекСтрокаУслуги.СуммаРегл * ТекТС.Коэффициент / КоэффициентВсего;
				НоваяСтрокаУслуги.СуммаРегл = ?(ОбщКоэф = 0, СуммаРеглСцепки, СуммаРеглСцепки * мсвТСПодстановка[ИндЭлем].Коэф / ОбщКоэф);
				СуммаРаспределеннаяРегл = СуммаРаспределеннаяРегл + НоваяСтрокаУслуги.СуммаРегл;
				
				Если флЕстьКолонкаСуммаНДС Тогда
					СуммаНДССцепки = ТекСтрокаУслуги.СуммаНДС * ТекТС.Коэффициент / КоэффициентВсего;
					НоваяСтрокаУслуги.СуммаНДС = ?(ОбщКоэф = 0, СуммаНДССцепки, СуммаНДССцепки * мсвТСПодстановка[ИндЭлем].Коэф / ОбщКоэф);
					СуммаРаспределеннаяНДС = СуммаРаспределеннаяНДС + НоваяСтрокаУслуги.СуммаНДС;
				КонецЕсли;
				
				Если флЕстьКолонкаСуммаНДСУпр Тогда
					СуммаНДССцепкиУпр = ТекСтрокаУслуги.СуммаНДСУпр * ТекТС.Коэффициент / КоэффициентВсего;
					НоваяСтрокаУслуги.СуммаНДСУпр = ?(ОбщКоэф = 0, СуммаНДССцепкиУпр, СуммаНДССцепкиУпр * мсвТСПодстановка[ИндЭлем].Коэф / ОбщКоэф);
					СуммаРаспределеннаяНДСУпр = СуммаРаспределеннаяНДСУпр + НоваяСтрокаУслуги.СуммаНДСУпр;
				КонецЕсли;
				
				Если флЕстьКолонкаСумма Тогда
					СуммаСцепки = ТекСтрокаУслуги.Сумма * ТекТС.Коэффициент / КоэффициентВсего;
					НоваяСтрокаУслуги.Сумма = ?(ОбщКоэф = 0, СуммаСцепки, СуммаСцепки * мсвТСПодстановка[ИндЭлем].Коэф / ОбщКоэф);
					СуммаРаспределенная = СуммаРаспределенная + НоваяСтрокаУслуги.Сумма;
				КонецЕсли;
				
				Если флЕстьКолонкиЦенаИКоличество И ТекСтрокаУслуги.Цена <> 0 Тогда
					КоличествоСцепки = НоваяСтрокаУслуги.Сумма / ТекСтрокаУслуги.Цена;
					НоваяСтрокаУслуги.Количество = ?(ОбщКоэф = 0, КоличествоСцепки, КоличествоСцепки * мсвТСПодстановка[ИндЭлем].Коэф / ОбщКоэф);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		// учет "последней копейки"
		НоваяСтрокаУслуги.СуммаУпр = НоваяСтрокаУслуги.СуммаУпр + (ТекСтрокаУслуги.СуммаУпр - СуммаРаспределеннаяУпр);
		НоваяСтрокаУслуги.СуммаРегл = НоваяСтрокаУслуги.СуммаРегл + (ТекСтрокаУслуги.СуммаРегл - СуммаРаспределеннаяРегл);
		Если флЕстьКолонкаСуммаНДС Тогда
			НоваяСтрокаУслуги.СуммаНДС = НоваяСтрокаУслуги.СуммаНДС + (ТекСтрокаУслуги.СуммаНДС - СуммаРаспределеннаяНДС);
		КонецЕсли;
		Если флЕстьКолонкаСуммаНДСУпр Тогда
			НоваяСтрокаУслуги.СуммаНДСУпр = НоваяСтрокаУслуги.СуммаНДСУпр + (ТекСтрокаУслуги.СуммаНДСУпр - СуммаРаспределеннаяНДСУпр);
		КонецЕсли;
		Если флЕстьКолонкаСумма Тогда
			НоваяСтрокаУслуги.Сумма = НоваяСтрокаУслуги.Сумма + (ТекСтрокаУслуги.Сумма - СуммаРаспределенная);
		КонецЕсли;
		Если флЕстьКолонкиЦенаИКоличество И ТекСтрокаУслуги.Цена <> 0 Тогда
			НоваяСтрокаУслуги.Количество = НоваяСтрокаУслуги.Сумма / ТекСтрокаУслуги.Цена;
		КонецЕсли;
		
		мсвСтрокУдалить.Добавить(ТекСтрокаУслуги);
	КонецЦикла;
	Для Каждого ТекСтрокаУдалить Из мсвСтрокУдалить Цикл //распределенные строки удаляем
		ТаблицаУслуги.Удалить(ТекСтрокаУдалить);
	КонецЦикла;
				
КонецПроцедуры

// Выполняет закрытие заказа: устанавливает состояние Закрыт и проставляет Дату закрытия
//
Процедура ЗакрытиеДокумента(ДокументСсылка, ДатаЗакрытия, СообщениеОшибки = "", Интерактивно = Ложь, флСуммаУслугИзменилась = Ложь) Экспорт
	// Если ДокументСсылка.ДатаЗакрытия <> '00010101' Тогда // заказ уже закрыт
	//	Возврат;
	// КонецЕсли;
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументОбъект.уатЗаказГрузоотправителя") Тогда
		ДокументОбъект = ДокументСсылка;
	Иначе
		ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
	КонецЕсли;
	
	ДокументОбъект.ДатаЗакрытия = ДатаЗакрытия;
	Если НЕ ДокументОбъект.ПроверитьЗаполнение() Тогда
		ТекстНСТР = НСтр("en='Closing ""% 1"" canceled: incorrect filling of the document!';ru='Закрытие ""%1"" отменено: некорректное заполнение документа!'");
		ТекстНСТР = СтрШаблон(ТекстНСТР, ДокументСсылка);
		СообщениеОшибки = СообщениеОшибки + ТекстНСТР;
		Возврат;
	КонецЕсли;
	
	флСуммаУслугИзменилась = Ложь;
		
	Попытка
		ДокументОбъект.ДополнительныеСвойства.Вставить("Интерактивно", Интерактивно);
		ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		флСуммаУслугИзменилась = ДокументОбъект.ДополнительныеСвойства.Свойство("ВыполненАвтопересчетУслуг");
	Исключение
		ТекстНСТР = НСтр("en='Closing ""%1"" canceled: errors occurred when writing document!';ru='Закрытие ""%1"" отменено: возникли ошибки при записи документа!'");
		ТекстНСТР = СтрШаблон(ТекстНСТР, ДокументСсылка);
		СообщениеОшибки = СообщениеОшибки + ТекстНСТР;
		Возврат;
	КонецПопытки;
КонецПроцедуры

// Процедура выполняет необходимые действия по установке выбранного статуса для документа.
//
Процедура УстановитьСтатусЗаказа(ДокументСсылка, НовыйСтатус, Знач ДатаУстановки = Неопределено, Знач ГрузовоеМесто = Неопределено) Экспорт
	
	Если Не ЗначениеЗаполнено(ДатаУстановки) Тогда
		ДатаУстановки = ТекущаяДата();
	КонецЕсли;
	
	флУстановленУспешно = Истина;
	
	Если НовыйСтатус = Справочники.уатСтатусы_уэ.Отклонен Тогда 
		ДокУстановки = Документы.уатОтклонениеГруза.СоздатьДокумент();
		
		ДокУстановки.Дата          = ДатаУстановки;
		ДокУстановки.Заказчик      = ДокументСсылка.Контрагент;
		ДокУстановки.Организация   = ДокументСсылка.Организация;
		ДокУстановки.Ответственный = ПользователиКлиентСервер.АвторизованныйПользователь();
		
		НовСтрока = ДокУстановки.Заказы.Добавить();
		НовСтрока.ЗаказГрузоотправителя = ДокументСсылка;
		НовСтрока.ПричинаОтклонения     = Справочники.уатПричиныЗакрытияЗаказов.Отклонен;
		
		Попытка
			ДокУстановки.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			флУстановленУспешно = Ложь;
		КонецПопытки;
		
	Иначе
		ДокУстановки = Документы.уатУстановкаСтатусаГруза_уэ.СоздатьДокумент();
		Если ГрузовоеМесто = Неопределено Тогда  
			ДокУстановки.Заполнить(ДокументСсылка);
			Для Каждого ТекСтрока Из ДокУстановки.Грузы Цикл 
				ТекСтрока.НовыйСтатус = НовыйСтатус;
			КонецЦикла;
			
		Иначе 
			ДокУстановки.Дата        = ТекущаяДата();
			ДокУстановки.Организация = ДокументСсылка.Организация;
			НовСтрока = ДокУстановки.Грузы.Добавить();
			НовСтрока.ЗаказГрузоотправителя = ДокументСсылка;
			НовСтрока.ГрузовоеМесто         = ГрузовоеМесто;
			НовСтрока.НовыйСтатус           = НовыйСтатус;
		КонецЕсли;
		
		ДокУстановки.ДатаВремяУстановкиСтатуса = ДатаУстановки;
		ДокУстановки.Ответственный = ПользователиКлиентСервер.АвторизованныйПользователь();
		
		Попытка
			ДокУстановки.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			флУстановленУспешно = Ложь;
		КонецПопытки;
	КонецЕсли;
	
	// очищаем дату закрытия, если статус заказа изменился на не закрытый
	Если флУстановленУспешно И ДокументСсылка.ДатаЗакрытия <> '00010101' И НовыйСтатус <> Справочники.уатСтатусы_уэ.Закрыт Тогда
		ДокОбъект = ДокументСсылка.ПолучитьОбъект();
		ДокОбъект.ДатаЗакрытия = '00010101';
		Попытка
			ДокОбъект.Записать();
		Исключение
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

// Выполняет подбор адреса в справочнике по переданной строке поиска
//
Функция ПодобратьАдреса(Знач ПодстрокаПоиска, АдресаКонтрагентов = Неопределено) Экспорт
	Рез = Новый СписокЗначений;
	
	Если НЕ ЗначениеЗаполнено(ПодстрокаПоиска) Тогда
		Возврат Рез;
	КонецЕсли;
	
	Если АдресаКонтрагентов = Неопределено Тогда
		АдресаКонтрагентов = Новый Массив;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
	|	уатПунктыНазначения.Ссылка КАК Ссылка,
	|	уатПунктыНазначения.Наименование КАК Наименование,
	|	ВЫБОР
	|		КОГДА уатПунктыНазначения.Ссылка В (&АдресаКонтрагентов)
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Приоритет
	|ИЗ
	|	Справочник.уатПунктыНазначения КАК уатПунктыНазначения
	|ГДЕ
	|	НЕ уатПунктыНазначения.ПометкаУдаления
	|	И НЕ уатПунктыНазначения.ЭтоГруппа
	|	И (уатПунктыНазначения.Наименование ПОДОБНО &парамТекст СПЕЦСИМВОЛ ""~""
	|			ИЛИ уатПунктыНазначения.АдресДляПоиска ПОДОБНО &парамТекст СПЕЦСИМВОЛ ""~"")
	|
	|УПОРЯДОЧИТЬ ПО
	|	Приоритет УБЫВ");
	Запрос.УстановитьПараметр("АдресаКонтрагентов", АдресаКонтрагентов);
	
	ПодстрокаПоиска = СокрЛП(ПодстрокаПоиска);
	// заменим спецсимволы
	Текст = ПодстрокаПоиска;
	Текст = СтрЗаменить(Текст, "~", "~~");
	Текст = СтрЗаменить(Текст, "%", "~%");
	Текст = СтрЗаменить(Текст, "_", "~_");
	Текст = СтрЗаменить(Текст, "[", "~[");
	Текст = СтрЗаменить(Текст, "-", "~-");
	Текст = "%" + сокрЛП(Текст) + "%";

	Запрос.УстановитьПараметр("парамТекст", Текст);
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		ПозицияТекст = Найти(ВРег(Выборка.Наименование), ВРег(ПодстрокаПоиска));
		тПредставление = Новый ФорматированнаяСтрока(
			Лев(Выборка.Наименование, ПозицияТекст-1),
			Новый ФорматированнаяСтрока(Сред(Выборка.Наименование, ПозицияТекст, СтрДлина(ПодстрокаПоиска)),, WebЦвета.Красный),
				Сред(Выборка.Наименование, ПозицияТекст + СтрДлина(ПодстрокаПоиска)));
		КартинкаПункта = ?(Выборка.Приоритет = 1, БиблиотекаКартинок.УстановитьОтветственногоЗаВзаимодействие, БиблиотекаКартинок.уатКартаТекущийПункт);
		Рез.Добавить(Выборка.Ссылка, тПредставление,, КартинкаПункта);
	КонецЦикла;
	
	Возврат Рез;
КонецФункции // ПодобратьАдреса();

Процедура СопоставитьЗагружаемыеДанныеТовары(АдресЗагружаемыхДанных, АдресТаблицыСопоставления, СписокНеоднозначностей, ДополнительныеПараметры)
	
	Товары = ПолучитьИзВременногоХранилища(АдресТаблицыСопоставления);
	ЗагружаемыеДанные = ПолучитьИзВременногоХранилища(АдресЗагружаемыхДанных);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДанныеДляСопоставления", ЗагружаемыеДанные);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДанныеДляСопоставления.Номенклатура,
	|	ДанныеДляСопоставления.ГрузовоеМесто,
	|	ДанныеДляСопоставления.Идентификатор
	|ПОМЕСТИТЬ ДанныеДляСопоставления
	|ИЗ
	|	&ДанныеДляСопоставления КАК ДанныеДляСопоставления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(СправочникНоменклатура.Ссылка) КАК Ссылка,
	|	ДанныеДляСопоставления.Идентификатор,
	|	КОЛИЧЕСТВО(ДанныеДляСопоставления.Идентификатор) КАК Количество
	|ИЗ
	|	ДанныеДляСопоставления КАК ДанныеДляСопоставления
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО (СправочникНоменклатура.Наименование ПОДОБНО ДанныеДляСопоставления.Номенклатура)
	|ГДЕ
	|	НЕ СправочникНоменклатура.Ссылка ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДляСопоставления.Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(уатГрузовыеМеста_уэ.Ссылка) КАК Ссылка,
	|	ДанныеДляСопоставления.Идентификатор,
	|	КОЛИЧЕСТВО(ДанныеДляСопоставления.Идентификатор) КАК Количество
	|ИЗ
	|	ДанныеДляСопоставления КАК ДанныеДляСопоставления
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатГрузовыеМеста_уэ КАК уатГрузовыеМеста_уэ
	|		ПО (уатГрузовыеМеста_уэ.Наименование ПОДОБНО ДанныеДляСопоставления.ГрузовоеМесто)
	|ГДЕ
	|	НЕ уатГрузовыеМеста_уэ.Ссылка ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДляСопоставления.Идентификатор";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаНоменклатура = РезультатЗапроса[1].Выгрузить();
	ТаблицаГрузовыхМест = РезультатЗапроса[2].Выгрузить();
	
	МенеджерВременныхТаблиц.Закрыть();
	
	мТекПользователь = ПользователиКлиентСервер.АвторизованныйПользователь();
	мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Для Каждого СтрокаТаблицы Из ЗагружаемыеДанные Цикл
		Товар = Товары.Добавить();
		Товар.Идентификатор  = СтрокаТаблицы.Идентификатор;
		Товар.Количество     = СтрокаТаблицы.Количество;
		Товар.ВесБрутто      = СтрокаТаблицы.ВесБрутто;
		Товар.Объем          = СтрокаТаблицы.Объем;
		Товар.КоличествоМест = СтрокаТаблицы.КоличествоМест;
		Товар.Комментарий    = СтрокаТаблицы.Комментарий;
		Товар.СтавкаНДС      = СтавкаНДСПоПредставлению(СтрокаТаблицы.СтавкаНДС);
		Товар.Количество     = СтрокаТаблицы.Количество;
		Товар.Цена           = СтрокаТаблицы.Цена;
		Товар.Сумма          = Товар.Количество * Товар.Цена;
		
		СтрокаНоменклатура = ТаблицаНоменклатура.Найти(СтрокаТаблицы.Идентификатор, "Идентификатор");
		Если СтрокаНоменклатура = Неопределено И Не ПустаяСтрока(СтрокаТаблицы.Номенклатура) Тогда // Создание нового элемента.
			НовыйЭлемент = Справочники.Номенклатура.СоздатьЭлемент();
			НовыйЭлемент.УстановитьНовыйКод();
			НовыйЭлемент.Наименование = СтрокаТаблицы.Номенклатура;
			НовыйЭлемент.НаименованиеПолное = СтрокаТаблицы.Номенклатура;
			НовыйЭлемент.ВидНоменклатуры = Справочники.ВидыНоменклатуры.Товар;
			НовыйЭлемент.Услуга = Ложь;
			НовыйЭлемент.ЕдиницаИзмерения = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
				мТекПользователь, "ОсновнаяЕдиницаПоКлассификатору");
			НовыйЭлемент.СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
				мТекПользователь, "ОсновнаяСтавкаНДС");
				
			Попытка
				НовыйЭлемент.Записать();
			Исключение
			КонецПопытки;
			
			Если НЕ НовыйЭлемент.Ссылка.Пустая() Тогда
				Товар.Номенклатура = НовыйЭлемент.Ссылка;
				// нужно еще заполнить единицу хранения остатков для подстановки в ТЧ
				Если ЗначениеЗаполнено(НовыйЭлемент.ЕдиницаИзмерения) Тогда
					НоваяЕдиницаОстатков = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
					НоваяЕдиницаОстатков.Владелец = НовыйЭлемент.Ссылка;
					НоваяЕдиницаОстатков.Наименование = Строка(НовыйЭлемент.ЕдиницаИзмерения);
					НоваяЕдиницаОстатков.ЕдиницаПоКлассификатору = НовыйЭлемент.ЕдиницаИзмерения;
					НоваяЕдиницаОстатков.Коэффициент = 1;
					Попытка
						НоваяЕдиницаОстатков.Записать();
					Исключение
					КонецПопытки;
					Если НЕ НоваяЕдиницаОстатков.Ссылка.Пустая() Тогда
						НовыйЭлемент.ЕдиницаХраненияОстатков = НоваяЕдиницаОстатков.Ссылка;
						Попытка
							НовыйЭлемент.Записать();
						Исключение
						КонецПопытки;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли Не СтрокаНоменклатура = Неопределено Тогда 
			Если СтрокаНоменклатура.Количество = 1 Тогда 
				Товар.Номенклатура = СтрокаНоменклатура.Ссылка;
			ИначеЕсли СтрокаНоменклатура.Количество > 1 Тогда
				ЗаписьОНеоднозначности = СписокНеоднозначностей.Добавить();
				ЗаписьОНеоднозначности.Идентификатор = СтрокаТаблицы.Идентификатор; 
				ЗаписьОНеоднозначности.Колонка = "Номенклатура";
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Товар.Номенклатура) Тогда
			Товар.ЕдиницаИзмерения = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Товар.Номенклатура, "ЕдиницаХраненияОстатков");
		КонецЕсли;
		
		СтрокаГрузовоеМесто = ТаблицаГрузовыхМест.Найти(СтрокаТаблицы.Идентификатор, "Идентификатор");
		Если СтрокаГрузовоеМесто = Неопределено И НЕ ПустаяСтрока(СтрокаТаблицы.ГрузовоеМесто) Тогда //создание нового элемента
			НовыйЭлемент = Справочники.уатГрузовыеМеста_уэ.СоздатьЭлемент();
			НовыйЭлемент.УстановитьНовыйКод();
			НовыйЭлемент.Наименование = СтрокаТаблицы.ГрузовоеМесто;
			НовыйЭлемент.Валюта = мВалютаРегламентированногоУчета;
			НовыйЭлемент.ВесБрутто = СтрокаТаблицы.ВесБрутто;
			НовыйЭлемент.Объем = СтрокаТаблицы.Объем;
			НовыйЭлемент.КоличествоМест = СтрокаТаблицы.КоличествоМест;
			//НовыйЭлемент.Высота = СтрокаТаблицы.Высота;
			//НовыйЭлемент.Длина = СтрокаТаблицы.Длина;
			//НовыйЭлемент.Ширина = СтрокаТаблицы.Ширина;
			//НовыйЭлемент.ОписаниеГруза = СтрокаТаблицы.ОписаниеГруза;
			//НовыйЭлемент.Стоимость = СтрокаТаблицы.Стоимость;
			Попытка
				НовыйЭлемент.Записать();
				Товар.ГрузовоеМесто = НовыйЭлемент.Ссылка;
			Исключение
			КонецПопытки;
			
		ИначеЕсли Не СтрокаГрузовоеМесто = Неопределено Тогда 
			Если СтрокаГрузовоеМесто.Количество = 1 Тогда 
				Товар.ГрузовоеМесто = СтрокаГрузовоеМесто.Ссылка;
			ИначеЕсли СтрокаГрузовоеМесто.Количество > 1 Тогда
				ЗаписьОНеоднозначности = СписокНеоднозначностей.Добавить();
				ЗаписьОНеоднозначности.Идентификатор = СтрокаТаблицы.Идентификатор; 
				ЗаписьОНеоднозначности.Колонка = "ГрузовоеМесто";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(Товары, АдресТаблицыСопоставления);
	
КонецПроцедуры

Процедура СопоставитьЗагружаемыеДанныеУслуги(АдресЗагружаемыхДанных, АдресТаблицыСопоставления, СписокНеоднозначностей, ДополнительныеПараметры)
	
	Услуги = ПолучитьИзВременногоХранилища(АдресТаблицыСопоставления);
	ЗагружаемыеДанные = ПолучитьИзВременногоХранилища(АдресЗагружаемыхДанных);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДанныеДляСопоставления", ЗагружаемыеДанные);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДанныеДляСопоставления.Номенклатура,
	|	ДанныеДляСопоставления.Валюта КАК Валюта,
	|	ДанныеДляСопоставления.Идентификатор
	|ПОМЕСТИТЬ ДанныеДляСопоставления
	|ИЗ
	|	&ДанныеДляСопоставления КАК ДанныеДляСопоставления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(СправочникНоменклатура.Ссылка) КАК Ссылка,
	|	ДанныеДляСопоставления.Идентификатор,
	|	КОЛИЧЕСТВО(ДанныеДляСопоставления.Идентификатор) КАК Количество
	|ИЗ
	|	ДанныеДляСопоставления КАК ДанныеДляСопоставления
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО (СправочникНоменклатура.Наименование ПОДОБНО ДанныеДляСопоставления.Номенклатура)
	|ГДЕ
	|	НЕ СправочникНоменклатура.Ссылка ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДляСопоставления.Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(СправочникВалюты.Ссылка) КАК Ссылка,
	|	ДанныеДляСопоставления.Идентификатор КАК Идентификатор,
	|	КОЛИЧЕСТВО(ДанныеДляСопоставления.Идентификатор) КАК Количество
	|ИЗ
	|	ДанныеДляСопоставления КАК ДанныеДляСопоставления
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Валюты КАК СправочникВалюты
	|		ПО (СправочникВалюты.Наименование ПОДОБНО ДанныеДляСопоставления.Валюта)
	|ГДЕ
	|	НЕ СправочникВалюты.Ссылка ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДляСопоставления.Идентификатор";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаНоменклатура = РезультатЗапроса[1].Выгрузить();
	ТаблицаВалюта       = РезультатЗапроса[2].Выгрузить();
	
	МенеджерВременныхТаблиц.Закрыть();
	
	мТекПользователь = ПользователиКлиентСервер.АвторизованныйПользователь();
	
	Для Каждого СтрокаТаблицы Из ЗагружаемыеДанные Цикл
		Услуга = Услуги.Добавить();
		Услуга.Идентификатор = СтрокаТаблицы.Идентификатор;
		
		СтрокаНоменклатура = ТаблицаНоменклатура.Найти(СтрокаТаблицы.Идентификатор, "Идентификатор");
		Если СтрокаНоменклатура = Неопределено И Не ПустаяСтрока(СтрокаТаблицы.Номенклатура) Тогда // Создание нового элемента.
			НовыйЭлемент = Справочники.Номенклатура.СоздатьЭлемент();
			НовыйЭлемент.УстановитьНовыйКод();
			НовыйЭлемент.Наименование = СтрокаТаблицы.Номенклатура;
			НовыйЭлемент.НаименованиеПолное = СтрокаТаблицы.Номенклатура;
			НовыйЭлемент.ВидНоменклатуры = Справочники.ВидыНоменклатуры.Услуга;
			НовыйЭлемент.Услуга = Истина;
			НовыйЭлемент.ЕдиницаИзмерения = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
				мТекПользователь, "ОсновнаяЕдиницаПоКлассификатору");
			НовыйЭлемент.СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
				мТекПользователь, "ОсновнаяСтавкаНДС");
			Попытка
				НовыйЭлемент.Записать();
				Услуга.Номенклатура = НовыйЭлемент.Ссылка;
			Исключение
			КонецПопытки;
			
		ИначеЕсли Не СтрокаНоменклатура = Неопределено Тогда 
			Если СтрокаНоменклатура.Количество = 1 Тогда 
				Услуга.Номенклатура = СтрокаНоменклатура.Ссылка;
			ИначеЕсли СтрокаНоменклатура.Количество > 1 Тогда
				ЗаписьОНеоднозначности = СписокНеоднозначностей.Добавить();
				ЗаписьОНеоднозначности.Идентификатор = СтрокаТаблицы.Идентификатор; 
				ЗаписьОНеоднозначности.Колонка = "Номенклатура";
			КонецЕсли;
		КонецЕсли;
		
		СтрокаВалюта = ТаблицаВалюта.Найти(СтрокаТаблицы.Идентификатор, "Идентификатор");
		Если СтрокаВалюта <> Неопределено Тогда 
			Если СтрокаВалюта.Количество = 1 Тогда 
				Услуга.Валюта = СтрокаВалюта.Ссылка;
			ИначеЕсли СтрокаВалюта.Количество > 1 Тогда
				ЗаписьОНеоднозначности = СписокНеоднозначностей.Добавить();
				ЗаписьОНеоднозначности.Идентификатор = СтрокаТаблицы.Идентификатор; 
				ЗаписьОНеоднозначности.Колонка = "Валюта";
			КонецЕсли;
		КонецЕсли;
		
		Услуга.Содержание = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Услуга.Номенклатура, "НаименованиеПолное");
		Услуга.СтавкаНДС = СтавкаНДСПоПредставлению(СтрокаТаблицы.СтавкаНДС);
		
		Услуга.Количество = СтрокаТаблицы.Количество;
		Услуга.Цена       = СтрокаТаблицы.Цена;
		Услуга.Сумма      = Услуга.Количество * Услуга.Цена;
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(Услуги, АдресТаблицыСопоставления);
	
КонецПроцедуры

Процедура СопоставитьЗагружаемыеДанныеГрузовойСостав(АдресЗагружаемыхДанных, АдресТаблицыСопоставления, СписокНеоднозначностей, ДополнительныеПараметры)
	
	ГрузовойСостав = ПолучитьИзВременногоХранилища(АдресТаблицыСопоставления);
	ЗагружаемыеДанные = ПолучитьИзВременногоХранилища(АдресЗагружаемыхДанных);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДанныеДляСопоставления", ЗагружаемыеДанные);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДанныеДляСопоставления.ГрузовоеМесто,
	|	ДанныеДляСопоставления.ВидУпаковки,
	|	ДанныеДляСопоставления.Идентификатор
	|ПОМЕСТИТЬ ДанныеДляСопоставления
	|ИЗ
	|	&ДанныеДляСопоставления КАК ДанныеДляСопоставления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(уатГрузовыеМеста_уэ.Ссылка) КАК Ссылка,
	|	ДанныеДляСопоставления.Идентификатор,
	|	КОЛИЧЕСТВО(ДанныеДляСопоставления.Идентификатор) КАК Количество
	|ИЗ
	|	ДанныеДляСопоставления КАК ДанныеДляСопоставления
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатГрузовыеМеста_уэ КАК уатГрузовыеМеста_уэ
	|		ПО (уатГрузовыеМеста_уэ.Наименование ПОДОБНО ДанныеДляСопоставления.ГрузовоеМесто)
	|ГДЕ
	|	НЕ уатГрузовыеМеста_уэ.Ссылка ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДляСопоставления.Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(уатВидыУпаковки_уэ.Ссылка) КАК Ссылка,
	|	ДанныеДляСопоставления.Идентификатор,
	|	КОЛИЧЕСТВО(ДанныеДляСопоставления.Идентификатор) КАК Количество
	|ИЗ
	|	ДанныеДляСопоставления КАК ДанныеДляСопоставления
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатВидыУпаковки_уэ КАК уатВидыУпаковки_уэ
	|		ПО (уатВидыУпаковки_уэ.Наименование ПОДОБНО ДанныеДляСопоставления.ВидУпаковки)
	|ГДЕ
	|	НЕ уатВидыУпаковки_уэ.Ссылка ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДляСопоставления.Идентификатор";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаГрузовыхМест = РезультатЗапроса[1].Выгрузить();
	ТаблицаВидыУпаковки = РезультатЗапроса[2].Выгрузить();
	
	МенеджерВременныхТаблиц.Закрыть();
	
	мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Для Каждого СтрокаТаблицы Из ЗагружаемыеДанные Цикл
		НовыйГруз = ГрузовойСостав.Добавить();
		НовыйГруз.ВесБрутто      = СтрокаТаблицы.ВесБрутто;
		НовыйГруз.Объем          = СтрокаТаблицы.Объем;
		НовыйГруз.КоличествоМест = СтрокаТаблицы.КоличествоМест;
		НовыйГруз.Высота         = СтрокаТаблицы.Высота;
		НовыйГруз.Длина          = СтрокаТаблицы.Длина;
		НовыйГруз.Ширина         = СтрокаТаблицы.Ширина;
		НовыйГруз.Стоимость      = СтрокаТаблицы.Стоимость;
		НовыйГруз.ОписаниеГруза  = СтрокаТаблицы.ОписаниеГруза;
		
		СтрокаВидУпаковки = ТаблицаВидыУпаковки.Найти(СтрокаТаблицы.Идентификатор, "Идентификатор");
		Если СтрокаВидУпаковки = Неопределено И Не ПустаяСтрока(СтрокаТаблицы.ВидУпаковки) Тогда 
			НовыйЭлемент = Справочники.уатВидыУпаковки_уэ.СоздатьЭлемент();
			НовыйЭлемент.УстановитьНовыйКод();
			НовыйЭлемент.Наименование = СтрокаТаблицы.ВидУпаковки;
			НовыйЭлемент.Коэффициент = 1;
			Попытка
				НовыйЭлемент.Записать();
				НовыйГруз.ВидУпаковки = НовыйЭлемент.Ссылка;
			Исключение
			КонецПопытки;
			
		ИначеЕсли Не СтрокаВидУпаковки = Неопределено Тогда 
			Если СтрокаВидУпаковки.Количество = 1 Тогда 
				НовыйГруз.ВидУпаковки = СтрокаВидУпаковки.Ссылка;
			ИначеЕсли СтрокаВидУпаковки.Количество > 1 Тогда
				ЗаписьОНеоднозначности = СписокНеоднозначностей.Добавить();
				ЗаписьОНеоднозначности.Идентификатор = СтрокаТаблицы.Идентификатор; 
				ЗаписьОНеоднозначности.Колонка = "ВидУпаковки";
			КонецЕсли;
		КонецЕсли;
		
		СтрокаГрузовоеМесто = ТаблицаГрузовыхМест.Найти(СтрокаТаблицы.Идентификатор, "Идентификатор");
		Если СтрокаГрузовоеМесто = Неопределено И НЕ ПустаяСтрока(СтрокаТаблицы.ГрузовоеМесто) Тогда //создание нового элемента
			НовыйЭлемент = Справочники.уатГрузовыеМеста_уэ.СоздатьЭлемент();
			НовыйЭлемент.УстановитьНовыйКод();
			НовыйЭлемент.Наименование = СтрокаТаблицы.ГрузовоеМесто;
			НовыйЭлемент.Валюта = мВалютаРегламентированногоУчета;
			НовыйЭлемент.ВесБрутто = СтрокаТаблицы.ВесБрутто;
			НовыйЭлемент.ВидУпаковки = НовыйГруз.ВидУпаковки;
			НовыйЭлемент.Высота = СтрокаТаблицы.Высота;
			НовыйЭлемент.Длина = СтрокаТаблицы.Длина;
			НовыйЭлемент.КоличествоМест = СтрокаТаблицы.КоличествоМест;
			НовыйЭлемент.Объем = СтрокаТаблицы.Объем;
			НовыйЭлемент.ОписаниеГруза = СтрокаТаблицы.ОписаниеГруза;
			НовыйЭлемент.Стоимость = СтрокаТаблицы.Стоимость;
			НовыйЭлемент.Ширина = СтрокаТаблицы.Ширина;
			Попытка
				НовыйЭлемент.Записать();
				НовыйГруз.ГрузовоеМесто = НовыйЭлемент.Ссылка;
			Исключение
			КонецПопытки;
			
		ИначеЕсли Не СтрокаГрузовоеМесто = Неопределено Тогда 
			Если СтрокаГрузовоеМесто.Количество = 1 Тогда 
				НовыйГруз.ГрузовоеМесто = СтрокаГрузовоеМесто.Ссылка;
			ИначеЕсли СтрокаГрузовоеМесто.Количество > 1 Тогда
				ЗаписьОНеоднозначности = СписокНеоднозначностей.Добавить();
				ЗаписьОНеоднозначности.Идентификатор = СтрокаТаблицы.Идентификатор; 
				ЗаписьОНеоднозначности.Колонка = "ГрузовоеМесто";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(ГрузовойСостав, АдресТаблицыСопоставления);
	
КонецПроцедуры

Процедура СопоставитьЗагружаемыеДанныеЗатраты(АдресЗагружаемыхДанных, АдресТаблицыСопоставления, СписокНеоднозначностей, ДополнительныеПараметры)
	
	Затраты = ПолучитьИзВременногоХранилища(АдресТаблицыСопоставления);
	ЗагружаемыеДанные = ПолучитьИзВременногоХранилища(АдресЗагружаемыхДанных);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДанныеДляСопоставления", ЗагружаемыеДанные);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДанныеДляСопоставления.Контрагент,
	|	ДанныеДляСопоставления.Договор,
	|	ДанныеДляСопоставления.СтатьяРасходов,
	|	ДанныеДляСопоставления.Номенклатура,
	|	ДанныеДляСопоставления.Валюта,
	|	ДанныеДляСопоставления.Идентификатор
	|ПОМЕСТИТЬ ДанныеДляСопоставления
	|ИЗ
	|	&ДанныеДляСопоставления КАК ДанныеДляСопоставления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(СправочникНоменклатура.Ссылка) КАК Ссылка,
	|	ДанныеДляСопоставления.Идентификатор,
	|	КОЛИЧЕСТВО(ДанныеДляСопоставления.Идентификатор) КАК Количество
	|ИЗ
	|	ДанныеДляСопоставления КАК ДанныеДляСопоставления
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО (СправочникНоменклатура.Наименование ПОДОБНО ДанныеДляСопоставления.Номенклатура)
	|ГДЕ
	|	НЕ СправочникНоменклатура.Ссылка ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДляСопоставления.Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(СправочникКонтрагенты.Ссылка) КАК Ссылка,
	|	ДанныеДляСопоставления.Идентификатор,
	|	КОЛИЧЕСТВО(ДанныеДляСопоставления.Идентификатор) КАК Количество
	|ИЗ
	|	ДанныеДляСопоставления КАК ДанныеДляСопоставления
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Контрагенты КАК СправочникКонтрагенты
	|		ПО (СправочникКонтрагенты.Наименование ПОДОБНО ДанныеДляСопоставления.Контрагент)
	|ГДЕ
	|	НЕ СправочникКонтрагенты.Ссылка ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДляСопоставления.Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(ДоговорыКонтрагентов.Ссылка) КАК Ссылка,
	|	ДанныеДляСопоставления.Идентификатор,
	|	КОЛИЧЕСТВО(ДанныеДляСопоставления.Идентификатор) КАК Количество
	|ИЗ
	|	ДанныеДляСопоставления КАК ДанныеДляСопоставления
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
	|		ПО (ДоговорыКонтрагентов.Наименование ПОДОБНО ДанныеДляСопоставления.Договор)
	|			И (ДоговорыКонтрагентов.Владелец.Наименование ПОДОБНО ДанныеДляСопоставления.Контрагент)
	|			И (ДоговорыКонтрагентов.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком))
	|ГДЕ
	|	НЕ ДоговорыКонтрагентов.Ссылка ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДляСопоставления.Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(СтатьиЗатрат.Ссылка) КАК Ссылка,
	|	ДанныеДляСопоставления.Идентификатор,
	|	КОЛИЧЕСТВО(ДанныеДляСопоставления.Идентификатор) КАК Количество
	|ИЗ
	|	ДанныеДляСопоставления КАК ДанныеДляСопоставления
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатСтатьиРасходов КАК СтатьиЗатрат
	|		ПО (СтатьиЗатрат.Наименование ПОДОБНО ДанныеДляСопоставления.СтатьяРасходов)
	|ГДЕ
	|	НЕ СтатьиЗатрат.Ссылка ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДляСопоставления.Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(СправочникВалюты.Ссылка) КАК Ссылка,
	|	ДанныеДляСопоставления.Идентификатор КАК Идентификатор,
	|	КОЛИЧЕСТВО(ДанныеДляСопоставления.Идентификатор) КАК Количество
	|ИЗ
	|	ДанныеДляСопоставления КАК ДанныеДляСопоставления
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Валюты КАК СправочникВалюты
	|		ПО (СправочникВалюты.Наименование ПОДОБНО ДанныеДляСопоставления.Валюта)
	|ГДЕ
	|	НЕ СправочникВалюты.Ссылка ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДляСопоставления.Идентификатор";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаНоменклатура = РезультатЗапроса[1].Выгрузить();
	ТаблицаКонтрагентов = РезультатЗапроса[2].Выгрузить();
	ТаблицаДоговоров    = РезультатЗапроса[3].Выгрузить();
	ТаблицаСтатейЗатрат = РезультатЗапроса[4].Выгрузить();
	ТаблицаВалюта       = РезультатЗапроса[5].Выгрузить();
	
	МенеджерВременныхТаблиц.Закрыть();
	
	мТекПользователь = ПользователиКлиентСервер.АвторизованныйПользователь();
	
	Для Каждого СтрокаТаблицы Из ЗагружаемыеДанные Цикл
		Затрата = Затраты.Добавить();
		
		Затрата.Идентификатор = СтрокаТаблицы.Идентификатор;
		Затрата.Количество    = СтрокаТаблицы.Количество;
		Затрата.Цена          = СтрокаТаблицы.Цена;
		Затрата.Сумма         = Затрата.Количество * Затрата.Цена;
		Затрата.СтавкаНДС     = СтавкаНДСПоПредставлению(СтрокаТаблицы.СтавкаНДС);
		
		СтрокаНоменклатура = ТаблицаНоменклатура.Найти(СтрокаТаблицы.Идентификатор, "Идентификатор");
		Если СтрокаНоменклатура = Неопределено И НЕ ПустаяСтрока(СтрокаТаблицы.Номенклатура) Тогда //создание нового элемента
			НовыйЭлемент = Справочники.Номенклатура.СоздатьЭлемент();
			НовыйЭлемент.УстановитьНовыйКод();
			НовыйЭлемент.Наименование = СтрокаТаблицы.Номенклатура;
			НовыйЭлемент.НаименованиеПолное = СтрокаТаблицы.Номенклатура;
			НовыйЭлемент.ВидНоменклатуры = Справочники.ВидыНоменклатуры.Услуга;
			НовыйЭлемент.Услуга = Истина;
			НовыйЭлемент.ЕдиницаИзмерения = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
				мТекПользователь, "ОсновнаяЕдиницаПоКлассификатору");
			НовыйЭлемент.СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
				мТекПользователь, "ОсновнаяСтавкаНДС");
			Попытка
				НовыйЭлемент.Записать();
				Затрата.Номенклатура = НовыйЭлемент.Ссылка;
			Исключение
			КонецПопытки;
			
		ИначеЕсли Не СтрокаНоменклатура = Неопределено Тогда 
			Если СтрокаНоменклатура.Количество = 1 Тогда 
				Затрата.Номенклатура = СтрокаНоменклатура.Ссылка;
			ИначеЕсли СтрокаНоменклатура.Количество > 1 Тогда
				ЗаписьОНеоднозначности = СписокНеоднозначностей.Добавить();
				ЗаписьОНеоднозначности.Идентификатор = СтрокаТаблицы.Идентификатор; 
				ЗаписьОНеоднозначности.Колонка = "Номенклатура";
			КонецЕсли;
		КонецЕсли;
		
		Затрата.Содержание = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Затрата.Номенклатура, "НаименованиеПолное");
		
		СтрокаКонтрагента = ТаблицаКонтрагентов.Найти(СтрокаТаблицы.Идентификатор, "Идентификатор");
		Если СтрокаКонтрагента <> Неопределено Тогда 
			Если СтрокаКонтрагента.Количество = 1 Тогда 
				Затрата.Контрагент = СтрокаКонтрагента.Ссылка;
			ИначеЕсли СтрокаКонтрагента.Количество > 1 Тогда
				ЗаписьОНеоднозначности = СписокНеоднозначностей.Добавить();
				ЗаписьОНеоднозначности.Идентификатор = СтрокаТаблицы.Идентификатор; 
				ЗаписьОНеоднозначности.Колонка = "Контрагент";
			КонецЕсли;
		КонецЕсли;
		
		СтрокаДоговора = ТаблицаДоговоров.Найти(СтрокаТаблицы.Идентификатор, "Идентификатор");
		Если СтрокаДоговора <> Неопределено Тогда 
			Если СтрокаДоговора.Количество = 1 Тогда 
				Затрата.Договор = СтрокаДоговора.Ссылка;
			ИначеЕсли СтрокаДоговора.Количество > 1 Тогда
				ЗаписьОНеоднозначности = СписокНеоднозначностей.Добавить();
				ЗаписьОНеоднозначности.Идентификатор = СтрокаТаблицы.Идентификатор; 
				ЗаписьОНеоднозначности.Колонка = "Договор";
			КонецЕсли;
		КонецЕсли;
		
		СтрокаСтатьиЗатрат = ТаблицаСтатейЗатрат.Найти(СтрокаТаблицы.Идентификатор, "Идентификатор");
		Если СтрокаСтатьиЗатрат <> Неопределено Тогда 
			Если СтрокаСтатьиЗатрат.Количество = 1 Тогда 
				Затрата.СтатьяРасходов = СтрокаСтатьиЗатрат.Ссылка;
			ИначеЕсли СтрокаСтатьиЗатрат.Количество > 1 Тогда
				ЗаписьОНеоднозначности = СписокНеоднозначностей.Добавить();
				ЗаписьОНеоднозначности.Идентификатор = СтрокаТаблицы.Идентификатор; 
				ЗаписьОНеоднозначности.Колонка = "СтатьяРасходов";
			КонецЕсли;
		КонецЕсли;
		
		СтрокаВалюта = ТаблицаВалюта.Найти(СтрокаТаблицы.Идентификатор, "Идентификатор");
		Если СтрокаВалюта <> Неопределено Тогда 
			Если СтрокаВалюта.Количество = 1 Тогда 
				Затрата.Валюта = СтрокаВалюта.Ссылка;
			ИначеЕсли СтрокаВалюта.Количество > 1 Тогда
				ЗаписьОНеоднозначности = СписокНеоднозначностей.Добавить();
				ЗаписьОНеоднозначности.Идентификатор = СтрокаТаблицы.Идентификатор; 
				ЗаписьОНеоднозначности.Колонка = "Валюта";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(Затраты, АдресТаблицыСопоставления);
	
КонецПроцедуры

Процедура СопоставитьЗагружаемыеДанныеСопроводительныеДокументы(АдресЗагружаемыхДанных, АдресТаблицыСопоставления, СписокНеоднозначностей, ДополнительныеПараметры)
	
	СопроводительныеДокументы = ПолучитьИзВременногоХранилища(АдресТаблицыСопоставления);
	ЗагружаемыеДанные = ПолучитьИзВременногоХранилища(АдресЗагружаемыхДанных);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДанныеДляСопоставления", ЗагружаемыеДанные);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДанныеДляСопоставления.ВидДокумента,
	|	ДанныеДляСопоставления.Статус,
	|	ДанныеДляСопоставления.Идентификатор
	|ПОМЕСТИТЬ ДанныеДляСопоставления
	|ИЗ
	|	&ДанныеДляСопоставления КАК ДанныеДляСопоставления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(уатВидыДокументов.Ссылка) КАК Ссылка,
	|	ДанныеДляСопоставления.Идентификатор,
	|	КОЛИЧЕСТВО(ДанныеДляСопоставления.Идентификатор) КАК Количество
	|ИЗ
	|	ДанныеДляСопоставления КАК ДанныеДляСопоставления
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатВидыДокументов КАК уатВидыДокументов
	|		ПО (уатВидыДокументов.Наименование ПОДОБНО ДанныеДляСопоставления.ВидДокумента)
	|ГДЕ
	|	НЕ уатВидыДокументов.Ссылка ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДляСопоставления.Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(уатСтатусы_уэ.Ссылка) КАК Ссылка,
	|	ДанныеДляСопоставления.Идентификатор,
	|	КОЛИЧЕСТВО(ДанныеДляСопоставления.Идентификатор) КАК Количество
	|ИЗ
	|	ДанныеДляСопоставления КАК ДанныеДляСопоставления
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатСтатусы_уэ КАК уатСтатусы_уэ
	|		ПО (уатСтатусы_уэ.Наименование ПОДОБНО ДанныеДляСопоставления.Статус)
	|			И (уатСтатусы_уэ.ДействуетНаСопроводительныеДокументы)
	|ГДЕ
	|	НЕ уатСтатусы_уэ.Ссылка ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДляСопоставления.Идентификатор";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаВидыДокументов = РезультатЗапроса[1].Выгрузить();
	ТаблицаСтатусы        = РезультатЗапроса[2].Выгрузить();
	
	МенеджерВременныхТаблиц.Закрыть();
	
	Для Каждого СтрокаТаблицы Из ЗагружаемыеДанные Цикл
		НовыйДокумент = СопроводительныеДокументы.Добавить();
		НовыйДокумент.Количество    = СтрокаТаблицы.Количество;
		НовыйДокумент.ДатаПолучения = ЗагружаемыеДанныеСтрокаВДату(СтрокаТаблицы.ДатаПолучения);
		НовыйДокумент.ДатаПередачи  = ЗагружаемыеДанныеСтрокаВДату(СтрокаТаблицы.ДатаПередачи);
		НовыйДокумент.Комментарий   = СтрокаТаблицы.Комментарий;
		
		СтрокаВидДокумента = ТаблицаВидыДокументов.Найти(СтрокаТаблицы.Идентификатор, "Идентификатор");
		Если СтрокаВидДокумента <> Неопределено Тогда 
			Если СтрокаВидДокумента.Количество = 1 Тогда 
				НовыйДокумент.ВидДокумента = СтрокаВидДокумента.Ссылка;
			ИначеЕсли СтрокаВидДокумента.Количество > 1 Тогда
				ЗаписьОНеоднозначности = СписокНеоднозначностей.Добавить();
				ЗаписьОНеоднозначности.Идентификатор = СтрокаТаблицы.Идентификатор; 
				ЗаписьОНеоднозначности.Колонка = "ВидДокумента";
			КонецЕсли;
		КонецЕсли;
		
		СтрокаСтатуса = ТаблицаСтатусы.Найти(СтрокаТаблицы.Идентификатор, "Идентификатор");
		Если СтрокаСтатуса <> Неопределено Тогда 
			Если СтрокаСтатуса.Количество = 1 Тогда 
				НовыйДокумент.Статус = СтрокаСтатуса.Ссылка;
			ИначеЕсли СтрокаСтатуса.Количество > 1 Тогда
				ЗаписьОНеоднозначности = СписокНеоднозначностей.Добавить();
				ЗаписьОНеоднозначности.Идентификатор = СтрокаТаблицы.Идентификатор; 
				ЗаписьОНеоднозначности.Колонка = "Статус";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(СопроводительныеДокументы, АдресТаблицыСопоставления);
	
КонецПроцедуры

Функция СтавкаНДСПоПредставлению(НаименованиеСтавки)
	
	ТабСтавок = Новый ТаблицаЗначений();
	ТабСтавок.Колонки.Добавить("Ссылка",       Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	ТабСтавок.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	
	Для Каждого ТекЗначение Из Метаданные.Перечисления.СтавкиНДС.ЗначенияПеречисления Цикл 
		НовСтавка = ТабСтавок.Добавить();
		НовСтавка.Ссылка       = Перечисления.СтавкиНДС[ТекЗначение.Имя];
		НовСтавка.Наименование = ТекЗначение.Синоним;
	КонецЦикла;
	
	НайдСтавка = ТабСтавок.Найти(НаименованиеСтавки, "Наименование");
	
	Если НайдСтавка = Неопределено Тогда 
		Возврат Перечисления.СтавкиНДС.ПустаяСсылка();
	Иначе 
		Возврат НайдСтавка.Ссылка;
	КонецЕсли;
	
КонецФункции // СтавкаНДСПоПредставлению()

Функция ЗагружаемыеДанныеСтрокаВДату(Знач ДатаСтрокой)
	
	Поз = Найти(ДатаСтрокой, ".");
	сДен = Лев(ДатаСтрокой, Поз-1);
	сРазбор = Прав(ДатаСтрокой, СтрДлина(ДатаСтрокой)-Поз);
	
	Поз = Найти(сРазбор, ".");
	сМес = Лев(сРазбор, Поз-1);
	сРазбор = Прав(сРазбор, СтрДлина(сРазбор)-Поз);
	
	Поз = Найти(сРазбор, " ");
	Если Поз = 0 Тогда 
		сГод = сРазбор;
		сЧас = 0;
		сМин = 0;
		сСек = 0;
	Иначе 
		сГод = Лев(сРазбор, Поз-1);
		сРазбор = Прав(сРазбор, СтрДлина(сРазбор)-Поз);
		
		Поз = Найти(сРазбор, ":");
		сЧас = Лев(сРазбор, Поз-1);
		сРазбор = Прав(сРазбор, СтрДлина(сРазбор)-Поз);
		
		Поз = Найти(сРазбор, ":");
		Если Поз = 0 Тогда 
			сМин = сРазбор;
			сСек = 0;
		Иначе 
			сМин = Лев(сРазбор, Поз-1);
			сСек = Прав(сРазбор, СтрДлина(сРазбор)-Поз);
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		Возврат (Дата(Число(сГод), Число(сМес), Число(сДен), Число(сЧас), Число(сМин), Число(сСек)));
	Исключение
		Возврат '00010101';
	КонецПопытки;
	
КонецФункции // ЗагружаемыеДанныеСтрокаВДату()

Функция СтруктураКурсаВалютыСтроки(Валюта, ДатаКурса, КэшКурсов = Неопределено)
	// Кеширование используется для исключения повторного получения курса для одной и той же валюты
	Если КэшКурсов = Неопределено Тогда
		КэшКурсов = Новый Соответствие;
	КонецЕсли;
	
	СтруктураКурсаСтроки = КэшКурсов.Получить(Валюта);
	Если СтруктураКурсаСтроки = Неопределено Тогда
		СтруктураКурсаСтроки = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(Валюта, ДатаКурса);
		КэшКурсов.Вставить(Валюта, СтруктураКурсаСтроки);
	КонецЕсли;
	
	Возврат СтруктураКурсаСтроки;
КонецФункции

Процедура ЗаполнитьСсылкуНаЛокатор(ДанныеМаршрутногоЛиста, МаршрутныйЛист)
	
	Если ПолучитьФункциональнуюОпцию("уатИспользоватьWialon") = ЛОЖЬ Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(МаршрутныйЛист) Тогда
		ТекстОшибки = "";
		СсылкаНаЛокатор = уатМониторинг.Wialon_ПолучитьСсылкуНаЛокатор(МаршрутныйЛист.ТС, ТекстОшибки);
		ДанныеМаршрутногоЛиста.Вставить("СсылкаНаЛокатор", СсылкаНаЛокатор);
	КонецЕсли;
	
КонецПроцедуры

Функция ПолучитьСвязанныйМаршрутныйЛист(ПредметСообщения)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ЗаказСсылка", ПредметСообщения);
	Запрос.Текст = "ВЫБРАТЬ
	|	уатМаршрутныйЛист.Ссылка КАК Ссылка,
	|	уатМаршрутныйЛист.ТС КАК ТС
	|ИЗ
	|	РегистрНакопления.уатГрузыКПеревозке_уэ КАК уатГрузыКПеревозке_уэ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатМаршрутныйЛист КАК уатМаршрутныйЛист
	|		ПО уатГрузыКПеревозке_уэ.Регистратор = уатМаршрутныйЛист.Ссылка
	|			И (уатГрузыКПеревозке_уэ.ЗаказГрузоотправителя = &ЗаказСсылка)
	|ГДЕ
	|	уатМаршрутныйЛист.Проведен
	|	И уатМаршрутныйЛист.ТС <> ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка)
	|	И уатМаршрутныйЛист.ТС.ИспользуемаяСистемаGPS = ЗНАЧЕНИЕ(Справочник.уатВнешниеСистемы.Wialon)
	|
	|УПОРЯДОЧИТЬ ПО
	|	уатМаршрутныйЛист.Дата УБЫВ";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		МаршрутныйЛист = Выборка.Ссылка;
	КонецЕсли;
	Возврат МаршрутныйЛист;
	
КонецФункции

// Процедура - Заполнить структуру получателей печатных форм
//
// Параметры:
//  СтруктураДанныхОбъектаПечати - Структура - Структура данных получателей печатной формы
//
Процедура ЗаполнитьСтруктуруПолучателейПечатныхФорм(СтруктураДанныхОбъектаПечати) Экспорт
	
	СтруктураДанныхОбъектаПечати.ОсновнойПолучатель = "Контрагент";
	 
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Контрагент");
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("КонтактноеЛицо");
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Грузоотправитель");
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Грузополучатель");
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
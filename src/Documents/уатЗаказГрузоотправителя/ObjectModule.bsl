#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПеременныеОбъекта

Перем мВалютаРегламентированногоУчета Экспорт; //Переменная хранит значение валюты регламентированного учёта,
                                               // полученное из констант

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

// Расчитывает итоговые показатели (по кнопке "Рассчитать" внизу формы документа)
//
// Параметры:
//  ПересчетВремениРасстояния	 - 	 - 
//
Процедура РассчитатьИтоговыеПоказатели(ПересчетВремениРасстояния=Истина, кэшНулевыеРасстоянияМеждуПунктами = Неопределено) Экспорт
	
	мВесБрутто      = 0; 
	мОбъем          = 0; 
	мКолМест        = 0;
	мСтоимость      = 0;
	мВалютаУпрУчета = Неопределено;
	мВесТары        = 0;
	
	// Цикл по грузам.
	Если ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам
			Или ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам Тогда
		
		мВесБрутто = мВесБрутто + ГрузовойСостав.Итог("ВесБрутто");
		мОбъем = мОбъем + ГрузовойСостав.Итог("Объем");
		
		Для Каждого ТекСтрокаГруз Из ГрузовойСостав Цикл
			Если ЗначениеЗаполнено(ТекСтрокаГруз.ВидУпаковки) 
				И ТипЗнч(ТекСтрокаГруз.ВидУпаковки) = Тип("СправочникСсылка.уатВидыУпаковки_уэ") Тогда 
				КоэфПересчетаУпаковок = ТекСтрокаГруз.ВидУпаковки.Коэффициент;
			Иначе 
				КоэфПересчетаУпаковок = 1;
			КонецЕсли;
			
			мКолМест = мКолМест + ?(КоэфПересчетаУпаковок = 0, 0, ТекСтрокаГруз.КоличествоМест / КоэфПересчетаУпаковок);
			
			Если ЗначениеЗаполнено(ТекСтрокаГруз.ГрузовоеМесто) Тогда
				ГрузовоеМестоВалюта = ТекСтрокаГруз.ГрузовоеМесто.Валюта;
				Если Не ЗначениеЗаполнено(ГрузовоеМестоВалюта) Тогда //если валюта ГМ не указана, считается что в валюте упр. учета
					Если мВалютаУпрУчета = Неопределено Тогда
						Если уатРаботаСМетаданными.уатЕстьКонстанта("ВалютаУправленческогоУчета") Тогда 
							мВалютаУпрУчета = Константы.ВалютаУправленческогоУчета.Получить();
						Иначе 
							мВалютаУпрУчета = Константы.ВалютаРегламентированногоУчета.Получить();
						КонецЕсли;
					КонецЕсли;
					ГрузовоеМестоВалюта = мВалютаУпрУчета;
				КонецЕсли;
			Иначе
				ГрузовоеМестоВалюта = ВалютаТоваров;
			КонецЕсли;
			
			мСтоимость = мСтоимость + уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(
				ТекСтрокаГруз.Стоимость, ГрузовоеМестоВалюта, ВалютаТоваров, Дата, Дата);
				
			Если ТекСтрокаГруз.ГрузовоеМесто.Контейнер Тогда
				ТекСтрокаГруз.ВесТары = ТекСтрокаГруз.ГрузовоеМесто.ВесТары * ТекСтрокаГруз.КоличествоМест;
			ИначеЕсли ЗначениеЗаполнено(ТекСтрокаГруз.ВидУпаковки) Тогда
				ТекСтрокаГруз.ВесТары = ТекСтрокаГруз.ВидУпаковки.ВесТары * ТекСтрокаГруз.КоличествоМест;
			КонецЕсли;
			мВесТары = мВесТары + ТекСтрокаГруз.ВесТары;
		КонецЦикла;
	КонецЕсли;
	
	// Цикл по товарам.
	Если ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам
			Или ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам Тогда
		
		мВесБрутто = мВесБрутто + Товары.Итог("ВесБрутто");
		мОбъем = мОбъем + Товары.Итог("Объем");
		
		Для Каждого ТекСтрокаТовар Из Товары Цикл
			мКолМест = мКолМест + ТекСтрокаТовар.КоличествоМест;
			
			Если ЗначениеЗаполнено(ТекСтрокаТовар.ГрузовоеМесто) Тогда
				ТекВалюта = ТекСтрокаТовар.ГрузовоеМесто.Валюта;
				Если Не ЗначениеЗаполнено(ТекВалюта) Тогда //если валюта ГМ не указана, считается что в валюте упр. учета
					Если мВалютаУпрУчета = Неопределено Тогда
						Если уатРаботаСМетаданными.уатЕстьКонстанта("ВалютаУправленческогоУчета") Тогда 
							мВалютаУпрУчета = Константы.ВалютаУправленческогоУчета.Получить();
						Иначе 
							мВалютаУпрУчета = Константы.ВалютаРегламентированногоУчета.Получить();
						КонецЕсли;
					КонецЕсли;
					ТекВалюта = мВалютаУпрУчета;
				КонецЕсли;
			Иначе
				ТекВалюта = ВалютаТоваров;
			КонецЕсли;
			
			ТекСумма = ТекСтрокаТовар.Сумма + ?(УчитыватьНДС И НЕ СуммаВключаетНДС, ТекСтрокаТовар.СуммаНДС, 0);
			
			мСтоимость = мСтоимость + уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(
				ТекСумма, ТекВалюта, ВалютаТоваров, Дата, Дата);
			
			РаспределениеПоУпаковкам = уатОбщегоНазначения_уэ.УпаковатьНоменклатуру(ТекСтрокаТовар.Номенклатура, ТекСтрокаТовар.Количество);
			ТекСтрокаТовар.ВесТары = уатОбщегоНазначения_уэ.ПолучитьВесТарыПоУпаковкам(РаспределениеПоУпаковкам);
			мВесТары = мВесТары + ТекСтрокаТовар.ВесТары;
		КонецЦикла;
	КонецЕсли;
	
	ВесБрутто      = мВесБрутто;
	Объем          = мОбъем; 
	КоличествоМест = мКолМест;
	СтоимостьГруза = мСтоимость;
	ВесТары        = мВесТары;
	
	Если FTL Тогда 
		Если ПересчетВремениРасстояния Тогда 
			мсвПункты = Новый Массив();
			
			Для Сч = 0 По ПромежуточныеПункты.Количество()-2 Цикл 
				Пункт1 = ПромежуточныеПункты[Сч].Пункт;
				Пункт2 = ПромежуточныеПункты[(Сч+1)].Пункт;
				
				Если Не ТипЗнч(Пункт1) = Тип("СправочникСсылка.уатПунктыНазначения") Или Не ЗначениеЗаполнено(Пункт1) 
						Или Не ТипЗнч(Пункт2) = Тип("СправочникСсылка.уатПунктыНазначения") Или Не ЗначениеЗаполнено(Пункт2) Тогда 
					Продолжить;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ПромежуточныеПункты[Сч].Время) Или ЗначениеЗаполнено(ПромежуточныеПункты[Сч].Расстояние) Тогда 
					Продолжить;
				КонецЕсли;
				
				// Используем закэшированную информацию о том, что расстояния равны 0, чтобы не пересчитывать ее
				Если кэшНулевыеРасстоянияМеждуПунктами <> Неопределено Тогда
					СтруктураПоиска = Новый Структура("ПунктОтправления, ПунктНазначения", Пункт1, Пункт2);
					НайденныеСтроки = кэшНулевыеРасстоянияМеждуПунктами.НайтиСтроки(СтруктураПоиска);
					Если НайденныеСтроки.Количество() > 0 Тогда
						Продолжить;
					КонецЕсли;
				КонецЕсли;
				
				мсвПункты.Добавить(Новый Структура("Пункт1, Лат1, Лон1, Пункт2, Лат2, Лон2, ИдентификаторСтрокиПункта, ВремяВыезда",
					Пункт1,,, Пункт2,,, Сч, '00010101' + (ОтправлениеС - НачалоДня(ОтправлениеС))));
			КонецЦикла;
			
			Если мсвПункты.Количество() > 0 Тогда
				уатЗащищенныеФункцииСервер.РассчитатьТаблицуРасстояниеВремяМеждуПунктами(мсвПункты);
				Для Каждого ТекСтрока Из мсвПункты Цикл 
					ПромежуточныеПункты[ТекСтрока.ИдентификаторСтрокиПункта].Время      = ТекСтрока.Время;
					ПромежуточныеПункты[ТекСтрока.ИдентификаторСтрокиПункта].Расстояние = ТекСтрока.Расстояние;
					
					// кэшируем нулевые расстояния между пунктами, чтобы не пересчитывать их потом
					Если кэшНулевыеРасстоянияМеждуПунктами <> Неопределено 
						И ТекСтрока.Время = 0 И ТекСтрока.Расстояние = 0 Тогда
						СтруктураПоиска = Новый Структура("ПунктОтправления, ПунктНазначения", ТекСтрока.Пункт1, ТекСтрока.Пункт2);
						НайденныеСтроки = кэшНулевыеРасстоянияМеждуПунктами.НайтиСтроки(СтруктураПоиска);
						Если НайденныеСтроки.Количество() = 0 Тогда
							НоваяСтрока = кэшНулевыеРасстоянияМеждуПунктами.Добавить();
							НоваяСтрока.ПунктОтправления = СтруктураПоиска.ПунктОтправления;
							НоваяСтрока.ПунктНазначения = СтруктураПоиска.ПунктНазначения;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		мСтоянка       = 0;
		мВремя         = 0;
		ПробегСГрузом  = 0;
		ПробегПорожний = 0;
		
		// Таблица для определения порожнего пробега. Считаем что машина идет порожняком, если таблица пуста.
		тблГрузы = Новый ТаблицаЗначений;
		тблГрузы.Колонки.Добавить("Номенклатура");
		тблГрузы.Колонки.Добавить("ЕдиницаИзмерения");
		тблГрузы.Колонки.Добавить("Количество");
		
		Для Сч = 0 По ПромежуточныеПункты.Количество()-1 Цикл
			ТекСтрокаПункт = ПромежуточныеПункты[Сч];
			
			мСтоянка = уатЗащищенныеФункцииСервер.СложитьВремя(мСтоянка, ТекСтрокаПункт.Стоянка);
			Если ТипЗнч(ТекСтрокаПункт.Пункт) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда 
				мСтоянка = уатЗащищенныеФункцииСервер.СложитьВремя(мСтоянка, уатОбщегоНазначения.ПолучитьВремяДопСтонки(ТекСтрокаПункт.Пункт));
			КонецЕсли;
			
			мВремя = уатЗащищенныеФункцииСервер.СложитьВремя(мВремя, ТекСтрокаПункт.Время);
			
			// Обновляем таблицу грузов для расчета порожнего пробега.
			флЭтоПогрузка = ТекСтрокаПункт.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка
				ИЛИ ТекСтрокаПункт.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяПогрузка;
			флЭтоРазгрузка = ТекСтрокаПункт.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка
				ИЛИ ТекСтрокаПункт.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяРазгрузка;
				
			Если флЭтоПогрузка ИЛИ флЭтоРазгрузка Тогда
				Если флЭтоПогрузка Тогда
					мсвОтрезкиПути = ОтрезкиПути.НайтиСтроки(Новый Структура("ПунктОтправления", ТекСтрокаПункт.Пункт));
				Иначе
					мсвОтрезкиПути = ОтрезкиПути.НайтиСтроки(Новый Структура("ПунктНазначения",  ТекСтрокаПункт.Пункт));
				КонецЕсли;
				Если мсвОтрезкиПути.Количество() = 0 Тогда
					Если флЭтоПогрузка Тогда
						НоваяСтрока                  = тблГрузы.Добавить();
						НоваяСтрока.Номенклатура     = Неопределено;
						НоваяСтрока.ЕдиницаИзмерения = Неопределено;
						НоваяСтрока.Количество       = ?(флЭтоПогрузка, 1, -1);
					Иначе
						тблГрузы.Очистить();
					КонецЕсли;
				Иначе
					Для Каждого ТекОтрезокПути Из мсвОтрезкиПути Цикл
						НоваяСтрока                      = ТекСтрокаГруз.Добавить();
						Если ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам Тогда
							ТекСтрокаГруз = Товары[ТекОтрезокПути.Груз];
							НоваяСтрока.Номенклатура     = ТекСтрокаГруз.Номенклатура;
							НоваяСтрока.ЕдиницаИзмерения = ТекСтрокаГруз.ЕдиницаИзмерения;
							НоваяСтрока.Количество       = ТекСтрокаГруз.Количество * ?(флЭтоПогрузка, 1, -1);
						Иначе
							ТекСтрокаГруз = ГрузовойСостав[ТекОтрезокПути.Груз];
							НоваяСтрока.Номенклатура     = ТекСтрокаГруз.ГрузовоеМесто;
							НоваяСтрока.ЕдиницаИзмерения = ТекСтрокаГруз.ВидУпаковки;
							НоваяСтрока.Количество       = ТекСтрокаГруз.КоличествоМест * ?(флЭтоПогрузка, 1, -1);;
						КонецЕсли;
					КонецЦикла;
				КонецЕсли;
				
				тблГрузы.Свернуть("Номенклатура, ЕдиницаИзмерения", "Количество");
				
				// Теперь нужно удалить строки с количеством = 0.
				мсвСтрокиУдалить = тблГрузы.НайтиСтроки(Новый Структура("Количество", 0));
				Для Каждого ТекСтрокаГруз Из мсвСтрокиУдалить Цикл
					тблГрузы.Удалить(ТекСтрокаГруз);
				КонецЦикла;
			КонецЕсли;
			
			// Пробег порожний и пробег с грузом.
			СледПункт = ?(ТекСтрокаПункт.НомерСтроки < ПромежуточныеПункты.Количество(),
				ПромежуточныеПункты[ТекСтрокаПункт.НомерСтроки].Пункт, Неопределено);
			Если СледПункт <> ТекСтрокаПункт.Пункт Тогда
				Если тблГрузы.Количество() = 0 Тогда
					ПробегПорожний = ПробегПорожний + ТекСтрокаПункт.Расстояние;
				Иначе
					ПробегСГрузом  = ПробегСГрузом  + ТекСтрокаПункт.Расстояние;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Расстояние = ПробегСГрузом + ПробегПорожний;
		Время      = мВремя;
		Стоянка    = мСтоянка;
		
	Иначе 
		мСтоянка = 0;
		мСтоянка = уатЗащищенныеФункцииСервер.СложитьВремя(СтоянкаПунктОтправления, СтоянкаПунктНазначения);
		
		Если ТипЗнч(АдресОтправления) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда 
			мСтоянка = уатЗащищенныеФункцииСервер.СложитьВремя(мСтоянка, уатОбщегоНазначения.ПолучитьВремяДопСтонки(АдресОтправления));
		КонецЕсли;
		
		Если ТипЗнч(АдресНазначения) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда 
			мСтоянка = уатЗащищенныеФункцииСервер.СложитьВремя(мСтоянка, уатОбщегоНазначения.ПолучитьВремяДопСтонки(АдресНазначения));
		КонецЕсли;
		
		Стоянка = мСтоянка;
		
		Если ПересчетВремениРасстояния Тогда 
			Расстояние = 0;
			ПробегСГрузом = 0;
			Время = 0;
			Если ЗначениеЗаполнено(АдресОтправления) И ЗначениеЗаполнено(АдресНазначения) Тогда
				мсвПункты = Новый Массив();
				мсвПункты.Добавить(Новый Структура("Пункт1, Лат1, Лон1, Пункт2, Лат2, Лон2, ИдентификаторСтрокиПункта, ВремяВыезда, Маршрут", 
					АдресОтправления,,, АдресНазначения,,,, '00010101' + (ОтправлениеС - НачалоДня(ОтправлениеС)), Маршрут));
				
				уатЗащищенныеФункцииСервер.РассчитатьТаблицуРасстояниеВремяМеждуПунктами(мсвПункты);
				
				Если мсвПункты.Количество() Тогда 
					ПробегСГрузом = мсвПункты[0].Расстояние;
					Время         = мсвПункты[0].Время;
				КонецЕсли;
			КонецЕсли;
			
			Расстояние = ПробегСГрузом + ПробегПорожний;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура АвтоматическийПересчетДоходовИРасходов() Экспорт
	Если ДополнительныеСвойства.Свойство("НеПересчитыватьИтоги") ИЛИ ЭтоШаблонПеревозки Тогда
		Возврат;
	КонецЕсли;
		
	Если НЕ Ссылка.Пустая() И Услуги.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	флАвторасчетПриСоздании = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(
		ПользователиКлиентСервер.АвторизованныйПользователь(), "ЗаказНаТСАвторасчетДоходовПриСоздании");
	Если НЕ флАвторасчетПриСоздании И Ссылка.Пустая() Тогда
		Возврат;
	КонецЕсли;
	
	флПересчетИтогов = флАвторасчетПриСоздании ИЛИ уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(
		ПользователиКлиентСервер.АвторизованныйПользователь(), "ЗаказНаТСПерерасчетИтоговПриПроведении");
		
	// Автопересчет услуг выполняется, если:
	// 1) установлено право ПерерасчетИтоговПриПроведении
	// 2) заказ закрыт (указана дата закрытия) - в этом случае сам заказ не изменяется,
	//	а выдается сообщение о необходимости пересчета, если есть различия в общей сумме услуг до и после пересчета
	// В других случаях отказываемся от автопересчета услуг
	Если НЕ флПересчетИтогов И НЕ ЗначениеЗаполнено(ДатаЗакрытия) Тогда
		Возврат;
	КонецЕсли;
	
	флПлановыеУслуги = ПолучитьФункциональнуюОпцию("уатИспользоватьПлановыеУслуги_уэ");
	флИнтерактивно = ДополнительныеСвойства.Свойство("Интерактивно");
	флСообщение = Ложь;
	
	СуммаДоходовСтарая = уатОбщегоНазначенияТиповые.уатПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Услуги");
	
	ДопПараметры = Новый Структура("ЗаполнятьТЧДоходы, ЗаполнятьТЧРасходы", Ложь, Ложь);
	СтруктураДокумента = уатОбщегоНазначенияКлиентСервер.СтруктураДокумента(ЭтотОбъект, "уатЗаказГрузоотправителя", ДопПараметры);
	СтруктураДокументаДопФакт = Неопределено;
	
	// заполнение промежуточной структуры документа
	Если флПлановыеУслуги Тогда
		уатРасчетыПоТарифам_уэ.РассчитатьУслугиПоЗаказуНаТС(СтруктураДокумента, Истина); //пересчет плана
	КонецЕсли;
	Если НЕ флПлановыеУслуги ИЛИ НЕ Ссылка.Пустая() Тогда
		Если флПлановыеУслуги Тогда //нужно пересчитать и план, и факт. Здесь есть сложность: факт затирает план
			СтруктураДокументаДопФакт = уатОбщегоНазначенияКлиентСервер.СтруктураДокумента(ЭтотОбъект, "уатЗаказГрузоотправителя", ДопПараметры);
			уатРасчетыПоТарифам_уэ.РассчитатьУслугиПоЗаказуНаТС(СтруктураДокументаДопФакт); //пересчет факта
		Иначе
			уатРасчетыПоТарифам_уэ.РассчитатьУслугиПоЗаказуНаТС(СтруктураДокумента); //пересчет факта
		КонецЕсли;
	КонецЕсли;
	
	// перенос значений из структуры в документ-объект
	Если флПересчетИтогов Тогда
		Если СтруктураДокументаДопФакт = Неопределено Тогда
			уатРасчетыПоТарифамКлиентСервер_уэ.ЗаполнитьДоходыРасходыИзСтруктуры(ЭтотОбъект, СтруктураДокумента, "Услуги", "уатЗаказГрузоотправителя", Ложь, флСообщение);
		Иначе
			уатРасчетыПоТарифамКлиентСервер_уэ.ЗаполнитьДоходыРасходыИзСтруктуры(ЭтотОбъект, СтруктураДокумента, "Услуги", "уатЗаказГрузоотправителя", Истина, флСообщение);
			уатРасчетыПоТарифамКлиентСервер_уэ.ЗаполнитьДоходыРасходыИзСтруктуры(ЭтотОбъект, СтруктураДокументаДопФакт, "Услуги", "уатЗаказГрузоотправителя", Ложь, флСообщение);
		КонецЕсли;
		СуммаДоходовНовая = уатОбщегоНазначенияТиповые.уатПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Услуги");
	Иначе
		ЭтотОбъектКопия = ЭтотОбъект.Скопировать();
		ЭтотОбъектКопия.Дата = ЭтотОбъект.Дата;
		ЭтотОбъектКопия.ДатаЗакрытия = ЭтотОбъект.ДатаЗакрытия;
		уатРасчетыПоТарифамКлиентСервер_уэ.ЗаполнитьДоходыРасходыИзСтруктуры(ЭтотОбъектКопия, СтруктураДокумента, "Услуги", "уатЗаказГрузоотправителя",, флСообщение);
		СуммаДоходовНовая = уатОбщегоНазначенияТиповые.уатПолучитьСуммуДокументаСНДС(ЭтотОбъектКопия, "Услуги");
	КонецЕсли;
	
	Если Не Ссылка.Пустая() И СуммаДоходовНовая <> СуммаДоходовСтарая Тогда 
		Если НЕ флИнтерактивно Тогда //неинтерактивный пересчет, например при групповом проведении документов
			Если флПересчетИтогов Тогда
				ТекстНСТР = НСтр("en='Automatically recalculate tabular section ""Incomes"" in """ + ЭтотОбъект
					+ """';ru='Выполнен автоматический пересчет табличной части ""Доходы"" в документе """ + ЭтотОбъект + """'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР, ЭтотОбъект);
			Иначе
				ТекстНСТР = НСтр("en='It is necessary to recalculate of tabular section ""Incomes"" in """ + ЭтотОбъект
					+ """!';ru='Необходимо выполнить пересчет табличной части ""Доходы"" в документе """ + ЭтотОбъект + """!'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР, ЭтотОбъект);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
		
	ДополнительныеСвойства.Вставить("ПересчетИтогов", флПересчетИтогов);
	Если СуммаДоходовНовая <> СуммаДоходовСтарая Тогда
		ДополнительныеСвойства.Вставить("ВыполненАвтопересчетУслуг");
	КонецЕсли;
		
КонецПроцедуры

Процедура УстановитьВременныеОкнаПоУмолчанию(ДатаОтправления = Неопределено, ДатаПрибытия = Неопределено) Экспорт
	
	// Окно отправления
	ВремяДоступности = уатОбщегоНазначения_проф.ПолучитьВремяДоступностиПункта(АдресОтправления, Грузоотправитель);
	мВремяС = ВремяДоступности.ВремяДоступностиС;
	мВремяПо = ВремяДоступности.ВремяДоступностиПо;
	Если ТипЗнч(мВремяС) = Тип("Дата") Тогда
		мВремяС = мВремяС - Дата('00010101');
	КонецЕсли;
	Если ТипЗнч(мВремяПо) = Тип("Дата") Тогда
		мВремяПо = мВремяПо - Дата('00010101');
		мВремяПо = ?(ЗначениеЗаполнено(мВремяПо), мВремяПо, '00010101235900'-Дата('00010101'))
	КонецЕсли;
		
	мДатаОтправления = ?(ЗначениеЗаполнено(ДатаОтправления), НачалоДня(ДатаОтправления), НачалоДня(Дата));
	ОтправлениеС  = мДатаОтправления + мВремяС;
	ОтправлениеПо = мДатаОтправления + мВремяПо;
	
	// Окно прибытия
	ВремяДоступности = уатОбщегоНазначения_проф.ПолучитьВремяДоступностиПункта(АдресНазначения, Грузополучатель);
	мВремяС = ВремяДоступности.ВремяДоступностиС;
	мВремяПо = ВремяДоступности.ВремяДоступностиПо;
	Если ТипЗнч(мВремяС) = Тип("Дата") Тогда
		мВремяС = мВремяС - Дата('00010101');
	КонецЕсли;
	Если ТипЗнч(мВремяПо) = Тип("Дата") Тогда
		мВремяПо = мВремяПо - Дата('00010101');
		мВремяПо = ?(ЗначениеЗаполнено(мВремяПо), мВремяПо, '00010101235900'-Дата('00010101'))
	КонецЕсли;
	
	мДатаПрибытия = ?(ЗначениеЗаполнено(ДатаПрибытия), НачалоДня(ДатаПрибытия), НачалоДня(Дата));
	ДоставкаС  = мДатаПрибытия + мВремяС;
	ДоставкаПо = мДатаПрибытия + мВремяПо;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	РазрешитьРедактирование = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ПользователиКлиентСервер.АвторизованныйПользователь(), "РазрешитьРедактированиеЗакрытыхДокументов");
	Если НЕ РазрешитьРедактирование 
		И ЗначениеЗаполнено(ДатаЗакрытия) Тогда // Настройка применяется только для закрытых заказов
		
		Если РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
			Если Ссылка.ДатаЗакрытия <> '00010101' Тогда
				ТекстНСТР = Строка(Ссылка) + " " + НСтр("en='is closed. Posting cancellation is prohibited!';ru='закрыт. Отмена проведения запрещена!'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР, ЭтотОбъект,,, Отказ);
			КонецЕсли;
		ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			Если Ссылка.Проведен Тогда
				// Проверка возможности закрытия: можно закрыть только полностью развезенный или отклоненный заказ
				Запрос = Новый Запрос(
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
				|	уатЗаказыГрузоотправителейОстатки.ЗаказГрузоотправителя
				|ИЗ
				|	РегистрНакопления.уатЗаказыГрузоотправителей.Остатки(, ЗаказГрузоотправителя = &ЗаказГрузоотправителя) КАК уатЗаказыГрузоотправителейОстатки");
				Запрос.УстановитьПараметр("ЗаказГрузоотправителя", Ссылка);
				Если НЕ Запрос.Выполнить().Пустой() Тогда
					ТекстНСТР = НСтр("en='Closing of order is canceled: goods are not delivered or delivered not completely!';ru='Закрытие заказа отменено: грузы не доставлены или доставлены не полностью!'");
					уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, Отказ, , СтатусСообщения.Внимание);
				КонецЕсли;
			Иначе
				ТекстНСТР = НСтр("en='Closure order is prohibited for unposted document!';ru='Закрытие заказа запрещено для непроведенного документа!'");
				уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, Отказ, , СтатусСообщения.Внимание);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Не Отказ Тогда 
		Если FTL И ПромежуточныеПункты.Количество() > 1 Тогда 
			ПромежуточныеПункты[0].Пункт   = АдресОтправления;
			ПромежуточныеПункты[0].Стоянка = СтоянкаПунктОтправления;
			
			ПромежуточныеПункты[ПромежуточныеПункты.Количество()-1].Пункт   = АдресНазначения;
			ПромежуточныеПункты[ПромежуточныеПункты.Количество()-1].Стоянка = СтоянкаПунктНазначения;
		Иначе 
			ПромежуточныеПункты.Очистить();
		КонецЕсли;
	КонецЕсли;
	
	Если Не Отказ 
		И НЕ ЗначениеЗаполнено(ВидПеревозки) 
		И Не Константы.уатИспользоватьМультимодальныеПеревозки_уэ.Получить() Тогда 
		ВидПеревозки = Справочники.уатВидыПеревозок.АвтомобильнаяГрузовая;
	КонецЕсли;
	
	Если Не Отказ И Не ПометкаУдаления = Ссылка.ПометкаУдаления Тогда
		Если ПометкаУдаления И Мультимодальный И Не ЭтоЭтап И Не ЗначениеЗаполнено(РодительскийЗаказ) Тогда
			Запрос = Новый Запрос();
			Запрос.УстановитьПараметр("Заказ", Ссылка);
			Запрос.Текст = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	уатЭтапыМультимодальныхПеревозок_уэ.Этап КАК Ссылка
			|ИЗ
			|	РегистрСведений.уатЭтапыМультимодальныхПеревозок_уэ КАК уатЭтапыМультимодальныхПеревозок_уэ
			|ГДЕ
			|	уатЭтапыМультимодальныхПеревозок_уэ.ЗаказГрузоотправителя = &Заказ";
			
			Выборка = Запрос.Выполнить().Выбрать();
			
			Пока Выборка.Следующий() Цикл
				ДокОбъект = Выборка.Ссылка.ПолучитьОбъект();
				Попытка
					ДокОбъект.УстановитьПометкуУдаления(Истина);
				Исключение
					Отказ = Истина;
				КонецПопытки;
				Если Отказ Тогда
					Возврат;
				КонецЕсли;
			КонецЦикла;
			
		ИначеЕсли Не ПометкаУдаления И Мультимодальный И ЭтоЭтап И ЗначениеЗаполнено(РодительскийЗаказ) Тогда
			Если РодительскийЗаказ.ПометкаУдаления Тогда
				ТекстНСТР = НСтр("en='You can not remove the deletion flag for step ""%1"". The parent order is marked for deletion.';ru='Невозможно снять пометку удаления для этапа ""%1"". Родительский заказ помечен на удаление.'");
				ТекстНСТР = СтрШаблон(ТекстНСТР, Ссылка);
				уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, Отказ);
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Не Отказ Тогда 
		// Проверим уникальность документа по дате и IDСтрокиПотребности
		Если ЗначениеЗаполнено(IDСтрокиПотребности) Тогда
			Запрос = Новый Запрос(
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
			|	уатЗаказГрузоотправителя.Ссылка,
			|	уатПотребностьВПеревозке_уэПунктыНазначения.НомерСтроки КАК НомерСтроки,
			|	уатПотребностьВПеревозке_уэПунктыНазначения.Ссылка КАК Потребность
			|ИЗ
			|	Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
			|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатПотребностьВПеревозке_уэ.ПунктыНазначения КАК уатПотребностьВПеревозке_уэПунктыНазначения
			|		ПО уатЗаказГрузоотправителя.IDСтрокиПотребности = уатПотребностьВПеревозке_уэПунктыНазначения.ID
			|ГДЕ
			|	уатЗаказГрузоотправителя.IDСтрокиПотребности = &IDСтрокиПотребности
			|	И НАЧАЛОПЕРИОДА(уатЗаказГрузоотправителя.ОтправлениеС, ДЕНЬ) = &ДатаОтправления
			|	И уатЗаказГрузоотправителя.Ссылка <> &Ссылка
			|	И НЕ уатЗаказГрузоотправителя.ПометкаУдаления
			|	И НЕ уатПотребностьВПеревозке_уэПунктыНазначения.Ссылка.ПометкаУдаления");
			
			Запрос.УстановитьПараметр("IDСтрокиПотребности", IDСтрокиПотребности);
			Запрос.УстановитьПараметр("ДатаОтправления", НачалоДня(ОтправлениеС));
			Запрос.УстановитьПараметр("Ссылка", Ссылка);
			
			Выборка = Запрос.Выполнить().Выбрать();
			Если Выборка.Следующий() Тогда
				ТекстНСТР = НСтр("en='Need for the carriage ""%1"" at line number %2 already has an order date of departure %3!';ru='По потребности ""%1"" в строке №%2 уже имеется заказ с датой отправления %3!'");
				ТекстНСТР = СтрШаблон(ТекстНСТР, Выборка.Потребность, Выборка.НомерСтроки, Формат(ОтправлениеС, "ДФ=dd.MM.yyyy"));
				уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, Отказ);
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ВалютаТоваров) Тогда
			ВалютаТоваров = ВалютаДокумента;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(НазваниеГруза) Тогда
			Если ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам
				Или ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам Тогда
				
				Если ГрузовойСостав.Количество() > 0 Тогда
					НазваниеГруза = ГрузовойСостав[0].ГрузовоеМесто;
				КонецЕсли;
				
			ИначеЕсли ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам
				Или ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам Тогда
				
				Если Товары.Количество() > 0 Тогда
					НазваниеГруза = Товары[0].Номенклатура.Наименование;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		Если Не ПометкаУдаления И РежимЗаписи <> РежимЗаписиДокумента.ОтменаПроведения Тогда
			флПересчетИтогов = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(
				ПользователиКлиентСервер.АвторизованныйПользователь(), "ЗаказНаТСПерерасчетИтоговПриПроведении");
			Если флПересчетИтогов Тогда
				РассчитатьИтоговыеПоказатели();
			КонецЕсли;
			Если (Ссылка.Пустая() ИЛИ флПересчетИтогов) И РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
				АвтоматическийПересчетДоходовИРасходов();
			КонецЕсли;
		КонецЕсли;
		
		СуммаДокумента = уатОбщегоНазначенияТиповые.уатПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Услуги");
		СуммаЗатрат    = уатОбщегоНазначенияТиповые.уатПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Расходы");
		
		Если Константы.уатИспользоватьПлановыеУслуги_уэ.Получить() Тогда
			
			СуммаДоходовПлан = уатОбщегоНазначенияТиповые.уатПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Услуги",,Истина);
			СуммаРасходовПлан = уатОбщегоНазначенияТиповые.уатПолучитьСуммуДокументаСНДС(ЭтотОбъект, "Расходы",,Истина);
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если ЦветДокумента = 0 Тогда 
		УстановитьСлучайныйЦветЗаказа();
	КонецЕсли;
	
	Если уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП() Тогда 
		ТабХарактеристик = Характеристики.Выгрузить(, "Характеристика");
		ТабХарактеристик.Свернуть("Характеристика");
		
		Если Не ТабХарактеристик.Количество() = Характеристики.Количество() Тогда 
			ТекстОшибки = НСтр("ru = 'Таблица характеристик содержит дубли'");
			уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстОшибки, Отказ);
		КонецЕсли;
	КонецЕсли;
	
	// Уведомления
	ИспользоватьУведомления = ПолучитьФункциональнуюОпцию("уатИспользоватьУведомления_уэ");
	Если Не Отказ И Не ПометкаУдаления И Не ЭтоШаблонПеревозки И ИспользоватьУведомления Тогда
		// Заполнение ТЧ "Получатели уведомлений"
		Если Модифицированность() Тогда
			тблПолучатели = уатОбщегоНазначения_уэ.СформироватьСписокПолучателейУведомлений(ЭтотОбъект);
			ПолучателиУведомлений.Загрузить(тблПолучатели);
		КонецЕсли;
		
		// Уведомления
		Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
			// Отслеживаем событие "Изменение весо-объемных характеристик"
			флИзменениеВесообъемныхХарактеристик = ВесБрутто <> Ссылка.ВесБрутто
				Или Объем <> Ссылка.Объем
				Или КоличествоМест <> Ссылка.КоличествоМест;
			ДополнительныеСвойства.Вставить("флИзменениеВесообъемныхХарактеристик", флИзменениеВесообъемныхХарактеристик);
			
			// Отслеживаем событие "Изменение маршрута"
			флИзменениеПунктовМаршрута = АдресОтправления <> Ссылка.АдресОтправления
				Или АдресНазначения <> Ссылка.АдресНазначения;
			ДополнительныеСвойства.Вставить("флИзменениеПунктовМаршрута", флИзменениеПунктовМаршрута);
		КонецЕсли;
	КонецЕсли;
	
	// Заполнение реквизитов многовалютного учета
	Если НЕ Отказ И РежимЗаписи <> РежимЗаписиДокумента.ОтменаПроведения И НЕ Служебный_ВыполненоОтложенноеОбновление_1_1_7_1 Тогда
		Обработки.уатОтложенноеОбновлениеИБ.ЗаполнитьРеквизитыДокументаМноговалютныйУчет_1_1_7_1(ЭтотОбъект);
	КонецЕсли;
	
	// Удаление некорректных отрезков пути
	Если Не Отказ И FTL Тогда
		Если ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам Тогда
			КоличествоГрузов = Товары.Количество();
		Иначе
			КоличествоГрузов = ГрузовойСостав.Количество();
		КонецЕсли;
		
		Сч = ОтрезкиПути.Количество();
		Пока Сч > 0 Цикл
			Сч = Сч-1;
			Если ОтрезкиПути[Сч].Груз > КоличествоГрузов Тогда
				ОтрезкиПути.Удалить(Сч);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// Для шаблонов перевозки в окнах хранится только время, без даты
	ПустаяДата = '00010101';
	Если ЭтоШаблонПеревозки Тогда
		ОтправлениеС  = ПустаяДата + (ОтправлениеС  - НачалоДня(ОтправлениеС));
		ОтправлениеПо = ПустаяДата + (ОтправлениеПо - НачалоДня(ОтправлениеПо));
		ДоставкаС     = ПустаяДата + (ДоставкаС     - НачалоДня(ДоставкаС));
		ДоставкаПо    = ПустаяДата + (ДоставкаПо    - НачалоДня(ДоставкаПо));
	КонецЕсли;
	
	уатПроведение_проф.ПолучитьСтарыеЗаказыПередЗаписью(ЭтотОбъект);
	
КонецПроцедуры

Процедура ПриЗаписи(Отказ)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ Отказ И НЕ ЭтоШаблонПеревозки
		И уатЗащищенныеФункцииСервер_проф.ИспользоватьШтрихкодированиеОбъекта(Ссылка) Тогда
		
		Если ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам Тогда
			уатЗащищенныеФункцииСервер_проф.ПолучитьСформироватьШтрихкодОбъекта(Ссылка);
		ИначеЕсли ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам Тогда
			флИспользованиеШКГрузов = Константы.уатИспользоватьШтрихкодированиеГрузовЗаказахНаТС_уэ.Получить();
			уатЗащищенныеФункцииСервер_проф.ПолучитьСформироватьШтрихкодОбъекта(Ссылка);
			
			Если флИспользованиеШКГрузов Тогда
				ТекСчетчик = 1;
				Для Каждого ТекСтрока Из ГрузовойСостав Цикл
					Если ТекСтрока.ГрузовоеМесто.ФормированиеШКНаКаждыйЭкземпляр Тогда
						Для Счетчик = 1 По ТекСтрока.КоличествоМест Цикл
							уатЗащищенныеФункцииСервер_проф.ПолучитьСформироватьШтрихкодОбъекта(ТекСтрока.ГрузовоеМесто, Ссылка, ТекСтрока.НомерСтроки, ТекСчетчик);
							ТекСчетчик = ТекСчетчик + 1;
						КонецЦикла;
					Иначе
						уатЗащищенныеФункцииСервер_проф.ПолучитьСформироватьШтрихкодОбъекта(ТекСтрока.ГрузовоеМесто, Ссылка, ТекСтрока.НомерСтроки, ТекСчетчик);
						ТекСчетчик = ТекСчетчик + 1;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		ИначеЕсли ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам Тогда
			флИспользованиеШКГрузов = Константы.уатИспользоватьШтрихкодированиеГрузовЗаказахНаТС_уэ.Получить();
			уатЗащищенныеФункцииСервер_проф.ПолучитьСформироватьШтрихкодОбъекта(Ссылка);
			
			Если флИспользованиеШКГрузов Тогда
				Для Каждого ТекСтрока Из Товары Цикл
					уатЗащищенныеФункцииСервер_проф.ПолучитьСформироватьШтрихкодОбъекта(ТекСтрока.Номенклатура, Ссылка, ТекСтрока.НомерСтроки);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если Не Отказ И Мультимодальный Тогда 
		Если ЭтоЭтап И ЗначениеЗаполнено(РодительскийЗаказ) Тогда 
			Если Дата < РодительскийЗаказ.Дата Тогда 
				ТекстНСТР = НСтр("en='Recording of document ""%1"" impossible. Stage date less than date of parent order.';ru='Запись документа ""%1"" невозможна. Дата этапа меньше даты родительского заказа.'");
				ТекстНСТР = СтрШаблон(ТекстНСТР, Ссылка);
				уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, Отказ);
				Возврат;
			КонецЕсли;
			
			ОтразитьЭтапПеревозкиНаРегистре();
		Иначе 
			ОбновитьДанныеПодчиненныхЭтапов(Отказ);
			Если Отказ Тогда 
				Возврат;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Взаимодействия
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.Взаимодействия") Тогда
		Взаимодействия.УстановитьПризнакАктивен(Ссылка, Истина);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Взаимодействия
	
	Если НЕ Отказ Тогда
		уатПроведение_проф.УстановитьДатуПлатежа(ЭтотОбъект);
	КонецЕсли;
	
	// Уведомления
	Если ДополнительныеСвойства.Свойство("флИзменениеВесообъемныхХарактеристик") И ДополнительныеСвойства.флИзменениеВесообъемныхХарактеристик Тогда
		уатОбщегоНазначения_уэ.СформироватьУведомление(Ссылка, Перечисления.уатТипыСобытийДляУведомления_уэ.ИзменениеВесообъемныхХарактеристик);
	КонецЕсли;
	Если ДополнительныеСвойства.Свойство("флИзменениеПунктовМаршрута") И ДополнительныеСвойства.флИзменениеПунктовМаршрута Тогда
		уатОбщегоНазначения_уэ.СформироватьУведомление(Ссылка, Перечисления.уатТипыСобытийДляУведомления_уэ.ИзменениеПунктовМаршрута);
	КонецЕсли;
	
КонецПроцедуры

Процедура ПриКопировании(ОбъектКопирования)
	
	Выработка.Очистить();
	Услуги.Очистить();
	Расходы.Очистить();
	ДатаЗакрытия = Неопределено;
	IDСтрокиПотребности = "";
	IDДатыДействияПотребности = "";
	НомерПоУчетуЗаказчика  = "";
	ДатаВходящегоДокумента = Дата(1,1,1);
	ЕстьРасхождения = Ложь;
	Основание = Неопределено;
	НеОткрыватьРедакторЦепочкиДокументов = Ложь;
	
	// Обновление id отрезков пути
	Для Каждого ТекСтрока Из ОтрезкиПути Цикл
		ТекСтрока.id = "";
	КонецЦикла;
	Для Каждого ТекСтрока Из ОтрезкиПути Цикл
		Если ТекСтрока.id <> "" Тогда 
			Продолжить;
		КонецЕсли;
		ТекСтрока.id = Строка(Новый УникальныйИдентификатор);
		Для Сч = ТекСтрока.НомерСтроки По ОтрезкиПути.Количество()-1 Цикл
			Если ТекСтрока.ПунктНазначения = ОтрезкиПути[Сч].ПунктНазначения
				И ТекСтрока.ПунктОтправления = ОтрезкиПути[Сч].ПунктОтправления Тогда
				ОтрезкиПути[Сч].id = ТекСтрока.id;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	уатОбщегоНазначенияСервер.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.уатПакетСопроводительныхДокументов") Тогда
		ВидОперации = Перечисления.уатВидыОперацийЗаказГрузоотправителя.МестнаяДоставка;
		ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам;
		ДокументОснование = ДанныеЗаполнения;
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.уатЗаказГрузоотправителя")
		И ДополнительныеСвойства.Свойство("ЗаполнениеЭтапаПоРодительскомуЗаказу") 
		И ДополнительныеСвойства.ЗаполнениеЭтапаПоРодительскомуЗаказу Тогда
		Мультимодальный                = Истина;
		ЭтоЭтап                        = Истина;
		Дата = Макс(ТекущаяДатаСеанса(), ДанныеЗаполнения.Дата);
		Если ДополнительныеСвойства.Свойство("ПараметрыЭтапа") Тогда
			АдресОтправления             = ДополнительныеСвойства.ПараметрыЭтапа.АдресОтправления;
			АдресНазначения              = ДополнительныеСвойства.ПараметрыЭтапа.АдресНазначения;
			ПлановаяДатаОтправленияЭтапа = ДополнительныеСвойства.ПараметрыЭтапа.ДатаОтправленияПлан;
			ПлановаяДатаПрибытияЭтапа    = ДополнительныеСвойства.ПараметрыЭтапа.ДатаПрибытияПлан;
			ОтправлениеС                 = ДополнительныеСвойства.ПараметрыЭтапа.ОтправлениеС;
			ОтправлениеПо                = ДополнительныеСвойства.ПараметрыЭтапа.ОтправлениеПо;
			ДоставкаС                    = ДополнительныеСвойства.ПараметрыЭтапа.ДоставкаС;
			ДоставкаПо                   = ДополнительныеСвойства.ПараметрыЭтапа.ДоставкаПо;
			ДополнительныеСвойства.ПараметрыЭтапа.Свойство("Время", Время);
			ДополнительныеСвойства.ПараметрыЭтапа.Свойство("Расстояние", Расстояние);
		Иначе
			АдресОтправления             = ДанныеЗаполнения.АдресОтправления;
			АдресНазначения              = ДанныеЗаполнения.АдресНазначения;
			ОтправлениеС                 = ДанныеЗаполнения.ОтправлениеС;
			ОтправлениеПо                = ДанныеЗаполнения.ОтправлениеПо;
			ДоставкаС                    = ДанныеЗаполнения.ДоставкаС;
			ДоставкаПо                   = ДанныеЗаполнения.ДоставкаПо;
			Время                        = ДанныеЗаполнения.Время;
			Расстояние                   = ДанныеЗаполнения.Расстояние;
		КонецЕсли;
		РодительскийЗаказ              = ДанныеЗаполнения.Ссылка;
		ДетализацияЗакрытия            = ДанныеЗаполнения.ДетализацияЗакрытия;
		Организация                    = ДанныеЗаполнения.Организация;
		Подразделение                  = ДанныеЗаполнения.Подразделение;
		Контрагент                     = ДанныеЗаполнения.Контрагент;
		ДоговорКонтрагента             = ДанныеЗаполнения.ДоговорКонтрагента;
		ВидДоставки                    = ДанныеЗаполнения.ВидДоставки;
		ВидПеревозки                   = ДанныеЗаполнения.ВидПеревозки;
		ВидОперации                    = ДанныеЗаполнения.ВидОперации;
		ТребованиеКТСТипТС             = ДанныеЗаполнения.ТребованиеКТСТипТС;
		ТребованиеКТС                  = ДанныеЗаполнения.ТребованиеКТС;
		СтоянкаПунктОтправления        = ДанныеЗаполнения.СтоянкаПунктОтправления;
		СтоянкаПунктНазначения         = ДанныеЗаполнения.СтоянкаПунктНазначения;
		Грузоотправитель               = ДанныеЗаполнения.Грузоотправитель;
		КонтактноеЛицоГрузоотправителя = ДанныеЗаполнения.КонтактноеЛицоГрузоотправителя;
		Грузополучатель                = ДанныеЗаполнения.Грузополучатель;
		КонтактноеЛицоГрузополучателя  = ДанныеЗаполнения.КонтактноеЛицоГрузополучателя;
		ОбъектСтроительства            = ДанныеЗаполнения.ОбъектСтроительства;
		НазваниеГруза                  = ДанныеЗаполнения.НазваниеГруза;
		ЭтоШаблонПеревозки             = ДанныеЗаполнения.ЭтоШаблонПеревозки;
		НаименованиеШаблона            = ДанныеЗаполнения.НаименованиеШаблона;
		
		Ответственный                  = ДанныеЗаполнения.Ответственный;
		ВалютаДокумента                = ДанныеЗаполнения.ВалютаДокумента;
		ВалютаТоваров                  = ДанныеЗаполнения.ВалютаТоваров;
		КратностьВзаиморасчетов        = ДанныеЗаполнения.КратностьВзаиморасчетов;
		КурсВзаиморасчетов             = ДанныеЗаполнения.КурсВзаиморасчетов;
		ДатаКурса                      = ДанныеЗаполнения.ДатаКурса;
		УчитыватьНДС                   = ДанныеЗаполнения.УчитыватьНДС;
		СуммаВключаетНДС               = ДанныеЗаполнения.СуммаВключаетНДС;
		
		Если ДополнительныеСвойства.Свойство("ГрузДляКопирования") Тогда 
			Если ДанныеЗаполнения.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам Тогда 
				СтрокиГрузов = ДанныеЗаполнения.ГрузовойСостав.НайтиСтроки(Новый Структура("ГрузовоеМесто", ДополнительныеСвойства.ГрузДляКопирования));
				Если СтрокиГрузов.Количество() > 0 Тогда 
					НовСтрока = ГрузовойСостав.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтрока, СтрокиГрузов[0]);
				КонецЕсли;
			ИначеЕсли ДанныеЗаполнения.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам Тогда 
				СтрокиГрузов = ДанныеЗаполнения.Товары.НайтиСтроки(Новый Структура("Номенклатура", ДополнительныеСвойства.ГрузДляКопирования));
				Если СтрокиГрузов.Количество() > 0 Тогда 
					НовСтрока = Товары.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтрока, СтрокиГрузов[0]);
				КонецЕсли;
			КонецЕсли;
		Иначе 
			Для Каждого ТекГруз Из ДанныеЗаполнения.ГрузовойСостав Цикл 
				НовГруз = ГрузовойСостав.Добавить();
				ЗаполнитьЗначенияСвойств(НовГруз, ТекГруз);
			КонецЦикла;
			Для Каждого ТекТовар Из ДанныеЗаполнения.Товары Цикл 
				НовТовар = Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НовТовар, ТекТовар);
			КонецЦикла;
		КонецЕсли;
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") Тогда
		// Заказ на возврат
		СписокСвойств = "ВалютаДокумента, ВалютаТоваров, ВидГрузаДляДоверенности, ВидОперации, ВидПеревозки, ДатаКурса,
			|ДетализацияЗакрытия, ДоговорКонтрагента, Контрагент, КратностьВзаиморасчетов, КурсВзаиморасчетов,
			|НаправлениеПеревозки, ОбъектСтроительства, Организация, Подразделение, СуммаВключаетНДС, ТипЦен,
			|ТребованиеКТС, ТребованиеКТСТипТС, УчитыватьНДС";
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеЗаполнения, СписокСвойств);
		ДокументОснование = ДанныеЗаполнения;
		Комментарий = СтрШаблон(НСтр("ru = 'Заказ на возврат для документа %1'"), Строка(ДанныеЗаполнения));
		
		Если ДанныеЗаполнения.ВидДоставки = Перечисления.уатВидыДоставки_уэ.ДверьСклад Тогда
			ВидДоставки = Перечисления.уатВидыДоставки_уэ.СкладДверь;
		ИначеЕсли ДанныеЗаполнения.ВидДоставки = Перечисления.уатВидыДоставки_уэ.СкладДверь Тогда
			ВидДоставки = Перечисления.уатВидыДоставки_уэ.ДверьСклад;
		Иначе
			ВидДоставки = ДанныеЗаполнения.ВидДоставки;
		КонецЕсли;
		
		// Пункты отправления и назначения возвращаемого заказа меняются местами
		АдресОтправления =ДанныеЗаполнения.АдресНазначения;
		АдресНазначения = ДанныеЗаполнения.АдресОтправления;
		СтоянкаПунктОтправления = ДанныеЗаполнения.СтоянкаПунктНазначения;
		СтоянкаПунктНазначения = ДанныеЗаполнения.СтоянкаПунктОтправления;
		
		ОтправлениеС = ДанныеЗаполнения.ДоставкаС;
		ОтправлениеПо = ДанныеЗаполнения.ДоставкаПо;
		ДоставкаС = ДанныеЗаполнения.ОтправлениеС;
		ДоставкаПо = ДанныеЗаполнения.ОтправлениеПо;
		Если ОтправлениеС > ДоставкаПо Тогда
			ДнейВПути = НачалоДня(ОтправлениеС) - НачалоДня(ДоставкаПо);
			Если ОтправлениеС > ДоставкаПо + ДнейВПути Тогда
				ДеньВСекундах = 24*60*60;
				ДоставкаС = ДоставкаС + ДнейВПути + ДеньВСекундах;
				ДоставкаПо = ДоставкаПо + ДнейВПути + ДеньВСекундах;
			Иначе
				ДоставкаС = ДоставкаС + ДнейВПути;
				ДоставкаПо = ДоставкаПо + ДнейВПути;
			КонецЕсли;
		КонецЕсли;
		Грузоотправитель = ДанныеЗаполнения.Грузополучатель;
		Грузополучатель = ДанныеЗаполнения.Грузоотправитель;
		КонтактноеЛицоГрузоотправителя = ДанныеЗаполнения.КонтактноеЛицоГрузополучателя;
		КонтактноеЛицоГрузополучателя = ДанныеЗаполнения.КонтактноеЛицоГрузоотправителя;
		
		Если ДанныеЗаполнения.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам Тогда
			Если ДополнительныеСвойства.Свойство("ОтмеченныеСтрокиГрузов") Тогда
				СтрокиВозвращаемыхГрузов = ДополнительныеСвойства.ОтмеченныеСтрокиГрузов;
			Иначе
				СтрокиВозвращаемыхГрузов = ДанныеЗаполнения.ГрузовойСостав;
			КонецЕсли;
			Для Каждого ТекСтрока Из СтрокиВозвращаемыхГрузов Цикл
				НоваяСтрока = ГрузовойСостав.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			КонецЦикла;
		ИначеЕсли ДанныеЗаполнения.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам Тогда
			Если ДополнительныеСвойства.Свойство("ОтмеченныеСтрокиГрузов") Тогда
				СтрокиВозвращаемыхГрузов = ДополнительныеСвойства.ОтмеченныеСтрокиГрузов;
			Иначе
				СтрокиВозвращаемыхГрузов = ДанныеЗаполнения.Товары;
			КонецЕсли;
			Для Каждого ТекСтрока Из СтрокиВозвращаемыхГрузов Цикл
				НоваяСтрока = Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			КонецЦикла;
		КонецЕсли;
		
	Иначе
		ВидОперации = Перечисления.уатВидыОперацийЗаказГрузоотправителя.МестнаяДоставка;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)

	Если ЭтоШаблонПеревозки Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(АдресОтправления) Тогда 
		ТекстОшибки = НСтр("ru = 'Необходимо заполнить реквизит ""Адрес отправления""'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,,, Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОтправлениеС) Тогда 
		ТекстОшибки = НСтр("ru = 'Необходимо заполнить реквизит ""Отправление с""'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,,, Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОтправлениеПо) Тогда 
		ТекстОшибки = НСтр("ru = 'Необходимо заполнить реквизит ""Отправление по""'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,,, Отказ);
	КонецЕсли;

	Если FTL 
		И ДетализацияЗакрытия <> Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам Тогда 
		
		СоответвиеГрузов = Новый Соответствие();   
		
		Если ДетализацияЗакрытия = ПредопределенноеЗначение("Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам") Тогда
			ТаблицаГрузов = ГрузовойСостав;
		Иначе
			ТаблицаГрузов = Товары;
		КонецЕсли;
	
		КоличествоПунктов = ПромежуточныеПункты.Количество();
		мсвОтрезкиПути = уатОбщегоНазначения_проф.ПолучитьНачальныеКонечныеПунктыГрузов(ОтрезкиПути,
			ТаблицаГрузов.Количество(), КоличествоПунктов);
		Для Каждого ТекСтрока Из мсвОтрезкиПути Цикл
			СоответвиеГрузов.Вставить(ТекСтрока.От, ТекСтрока.От);
			СоответвиеГрузов.Вставить(ТекСтрока.До, ТекСтрока.До);
		КонецЦикла;

		ИндексПункта = 0;
		Для Каждого ТекСтрока Из ПромежуточныеПункты Цикл 
			ИндексПункта = ИндексПункта + 1;
			Если ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ПромежуточныйПункт Тогда
				Продолжить;
			КонецЕсли;
			Если СоответвиеГрузов.Получить(ИндексПункта) = Неопределено Тогда  
				Если ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам Тогда 
					ТабличнаяЧасть = НСтр("ru='Грузовые места'");
				Иначе
					ТабличнаяЧасть = НСтр("ru='Товары'");
				КонецЕсли;
				ТекстОшибки = НСтр("ru='В табличной части ""%1"" для пункта ""%2"" не указан груз'");
				ТекстОшибки = СтрШаблон(ТекстОшибки, ТабличнаяЧасть, ТекСтрока.Пункт);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	флОтказ = уатОбщегоНазначения_проф.ПревышениеДопустимогоДолга(ДоговорКонтрагента);
	Отказ = Отказ ИЛИ флОтказ;
		
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	// Инициализация дополнительных свойств для проведения документа.
	уатПроведение.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	Документы.уатЗаказГрузоотправителя.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства, Отказ);
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	уатПроведение.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	уатПроведение.ОтразитьПредоставленныеУслуги(ДополнительныеСвойства, Движения, Отказ);
	Если Не Мультимодальный Или (Мультимодальный И ЭтоЭтап) Тогда
		Если ЗначениеЗаполнено(АдресНазначения) Тогда
			уатПроведение.ОтразитьЗаказыГрузоотправителей(ДополнительныеСвойства, Движения, Отказ);
			уатПроведение_уэ.ОтразитьГрузыКПеревозке(ДополнительныеСвойства, Движения, Отказ);
		КонецЕсли;
		уатПроведение_уэ.ОтразитьСтатусыГрузов(ДополнительныеСвойства, Движения, Отказ);
	КонецЕсли;
	уатПроведение.ОтразитьДоходы(ДополнительныеСвойства, Движения, Отказ);
	уатПроведение.ОтразитьРасходы(ДополнительныеСвойства, Движения, Отказ);
	Если ПолучитьФункциональнуюОпцию("уатИспользоватьПлановыеУслуги_уэ") Тогда
		уатПроведение_уэ.ОтразитьПлановыеУслуги(ДополнительныеСвойства, Движения, Отказ);
	КонецЕсли;
	уатПроведение_проф.ОтразитьДатыОбработкиДокументов(ДополнительныеСвойства, Движения, Отказ);
	
	уатПроведение.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	уатПроведение_проф.ОбновитьТекущееСостояниеОплатыЗаказов(ЭтотОбъект);
	
	Документы.уатЗаказГрузоотправителя.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);

КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа
	уатПроведение.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	уатПроведение.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	уатПроведение.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	уатПроведение_проф.ОбновитьТекущееСостояниеОплатыЗаказов(ЭтотОбъект);
	
	// Контроль
	Документы.уатЗаказГрузоотправителя.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ, Истина);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Проверим корректность дат отправления и доставки
	Отказ = ПроверкаНеКорректностиДатДействия();
	
	// Разрешаем проведение для заказов с незаполненными параметрами прибытия
	ИндексУдаляемого = ПроверяемыеРеквизиты.Найти("ДоставкаС");
	Если Не ИндексУдаляемого = Неопределено Тогда 
		ПроверяемыеРеквизиты.Удалить(ИндексУдаляемого);
	КонецЕсли;
	ИндексУдаляемого = ПроверяемыеРеквизиты.Найти("ДоставкаПо");
	Если Не ИндексУдаляемого = Неопределено Тогда 
		ПроверяемыеРеквизиты.Удалить(ИндексУдаляемого);
	КонецЕсли;
	ИндексУдаляемого = ПроверяемыеРеквизиты.Найти("АдресНазначения");
	Если Не ИндексУдаляемого = Неопределено Тогда 
		ПроверяемыеРеквизиты.Удалить(ИндексУдаляемого);
	КонецЕсли;
	
	Заголовок = уатОбщегоНазначенияТиповые.уатПредставлениеДокументаПриПроведении(ЭтотОбъект);
	
	Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		ПроверяемыеРеквизиты.Добавить("ДоговорКонтрагента");
	КонецЕсли;
	Если УчитыватьНДС Тогда
		ПроверяемыеРеквизиты.Добавить("Услуги.СтавкаНДС");
	КонецЕсли;
	
	уатОбщегоНазначенияТиповые.ПроверитьЧтоНетУслуг(ЭтотОбъект, "Товары", , Отказ, Заголовок);
	уатОбщегоНазначенияТиповые.уатПроверитьЧтоНетТоваров(ЭтотОбъект, "Услуги", , Отказ, Заголовок);

	Если ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам Тогда
		Если Не ЭтоШаблонПеревозки Тогда
			ПроверяемыеРеквизиты.Добавить("ГрузовойСостав");
		КонецЕсли;
		ПроверяемыеРеквизиты.Добавить("ГрузовойСостав.ГрузовоеМесто");
		ПроверяемыеРеквизиты.Добавить("Товары.ГрузовоеМесто");
		
		уатОбщегоНазначенияТиповые.ПроверитьЧтоНетДублейУникальныхГМ(ЭтотОбъект, "ГрузовойСостав", Отказ, Заголовок);
	ИначеЕсли ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам
		И Не ЭтоШаблонПеревозки Тогда 
		ПроверяемыеРеквизиты.Добавить("Товары");
	КонецЕсли;
	
	Если Мультимодальный И ЭтоЭтап И ЗначениеЗаполнено(РодительскийЗаказ) Тогда 
		ИндексУдаляемого = ПроверяемыеРеквизиты.Найти("ОтправлениеС");
		Если Не ИндексУдаляемого = Неопределено Тогда 
			ПроверяемыеРеквизиты.Удалить(ИндексУдаляемого);
		КонецЕсли;
		ИндексУдаляемого = ПроверяемыеРеквизиты.Найти("ОтправлениеПо");
		Если Не ИндексУдаляемого = Неопределено Тогда 
			ПроверяемыеРеквизиты.Удалить(ИндексУдаляемого);
		КонецЕсли;
		ИндексУдаляемого = ПроверяемыеРеквизиты.Найти("ДоставкаС");
		Если Не ИндексУдаляемого = Неопределено Тогда 
			ПроверяемыеРеквизиты.Удалить(ИндексУдаляемого);
		КонецЕсли;
		ИндексУдаляемого = ПроверяемыеРеквизиты.Найти("ДоставкаПо");
		Если Не ИндексУдаляемого = Неопределено Тогда 
			ПроверяемыеРеквизиты.Удалить(ИндексУдаляемого);
		КонецЕсли;
	КонецЕсли;
	
	// проверка заполнения значения договора, если указан контрагент в ТЧ Затраты
	Для Каждого ТекСтрока Из Расходы Цикл
		Если ДатаЗакрытия <> '00010101' И НЕ ЗначениеЗаполнено(ТекСтрока.СтатьяРасходов) Тогда
			
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекСтрока.Контрагент) И Не ЗначениеЗаполнено(ТекСтрока.Договор) Тогда
			ТекстНСТР = НСтр("en='In tabular section ""Expenses"" at line №%1 does not specify contract!';ru='В табличной части ""Расходы"" в строке №%1 не указан договор!'");
			ТекстНСТР = СтрШаблон(ТекстНСТР, ТекСтрока.НомерСтроки);
			уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, Отказ, Заголовок);
		КонецЕсли;
	КонецЦикла;
	
	// проверка заполнения статьи доходов и расходов
	Если ДатаЗакрытия <> '00010101' Тогда
		Для Каждого ТекСтрока Из Услуги Цикл
			Если НЕ ЗначениеЗаполнено(ТекСтрока.СтатьяДоходов) Тогда
				ТекстНСТР = НСтр("en='In tabular part ""Incomes"" at line №%1 not specified income item!';ru='В табличной части ""Доходы"" в строке №%1 не указана статья доходов!'");
				ТекстНСТР = СтрШаблон(ТекстНСТР, ТекСтрока.НомерСтроки);
				уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, Отказ, Заголовок);
			КонецЕсли;
		КонецЦикла;
		Для Каждого ТекСтрока Из Расходы Цикл
			Если НЕ ЗначениеЗаполнено(ТекСтрока.СтатьяРасходов) Тогда
				ТекстНСТР = НСтр("en='In tabular section ""Expenses"" at line №%1 not specified expense!';ru='В табличной части ""Расходы"" в строке №%1 не указана статья расходов!'");
				ТекстНСТР = СтрШаблон(ТекстНСТР, ТекСтрока.НомерСтроки);
				уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, Отказ, Заголовок);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	// проверка наличия строк с одинаковыми услугами и разными валютами
	тблУслугиПоВалютам = Услуги.Выгрузить(, "Номенклатура, Валюта").Скопировать();
	тблУслугиПоВалютам.Свернуть("Номенклатура, Валюта");
	тблУслугиСвернутая = тблУслугиПоВалютам.Скопировать();
	тблУслугиСвернутая.Свернуть("Номенклатура");
	Если тблУслугиПоВалютам.Количество() <> тблУслугиСвернутая.Количество() Тогда
		уатОбщегоНазначенияТиповые.СообщитьОбОшибке("В табличной части ""Доходы"" не должно быть строк с одной номенклатурой, но разными валютами!",
			Отказ, Заголовок);
	КонецЕсли;
	тблУслугиПоВалютам = Расходы.Выгрузить(, "Номенклатура, Валюта, Контрагент").Скопировать();
	тблУслугиПоВалютам.Свернуть("Номенклатура, Валюта, Контрагент");
	тблУслугиСвернутая = тблУслугиПоВалютам.Скопировать();
	тблУслугиСвернутая.Свернуть("Номенклатура, Контрагент");
	Если тблУслугиПоВалютам.Количество() <> тблУслугиСвернутая.Количество() Тогда
		уатОбщегоНазначенияТиповые.СообщитьОбОшибке("В табличной части ""Расходы"" не должно быть строк с одной номенклатурой и контрагентом, но разными валютами!",
			Отказ, Заголовок);
	КонецЕсли;
	
	// Проверка заполнения реквизитов "ПрибытиеПлан", "УбытиеПлан" ТЧ "ПромежуточныеПункты" FTL заказов.
	Если FTL Тогда 
		ИндексУдаляемого = ПроверяемыеРеквизиты.Найти("АдресОтправления");
		Если Не ИндексУдаляемого = Неопределено Тогда 
			ПроверяемыеРеквизиты.Удалить(ИндексУдаляемого);
		КонецЕсли;
		ИндексУдаляемого = ПроверяемыеРеквизиты.Найти("АдресНазначения");
		Если Не ИндексУдаляемого = Неопределено Тогда 
			ПроверяемыеРеквизиты.Удалить(ИндексУдаляемого);
		КонецЕсли;
		ИндексУдаляемого = ПроверяемыеРеквизиты.Найти("ОтправлениеС");
		Если Не ИндексУдаляемого = Неопределено Тогда 
			ПроверяемыеРеквизиты.Удалить(ИндексУдаляемого);
		КонецЕсли;
		ИндексУдаляемого = ПроверяемыеРеквизиты.Найти("ОтправлениеПо");
		Если Не ИндексУдаляемого = Неопределено Тогда 
			ПроверяемыеРеквизиты.Удалить(ИндексУдаляемого);
		КонецЕсли;
		ИндексУдаляемого = ПроверяемыеРеквизиты.Найти("ДоставкаС");
		Если Не ИндексУдаляемого = Неопределено Тогда 
			ПроверяемыеРеквизиты.Удалить(ИндексУдаляемого);
		КонецЕсли;
		ИндексУдаляемого = ПроверяемыеРеквизиты.Найти("ДоставкаПо");
		Если Не ИндексУдаляемого = Неопределено Тогда 
			ПроверяемыеРеквизиты.Удалить(ИндексУдаляемого);
		КонецЕсли;
	КонецЕсли;
	
	// Проверка заполнения реквизитов "Отрезок пути".
	Если FTL И (Не Мультимодальный Или ЭтоЭтап) Тогда
		флОтрицательноеОжидание = Ложь;
		
		Для Каждого ТекСтрока Из ПромежуточныеПункты Цикл 
			
			Если ТекСтрока.Ожидание < 0 Тогда 
				флОтрицательноеОжидание = Истина;
			КонецЕсли;
		КонецЦикла;
		
		Если флОтрицательноеОжидание Тогда 
			ТекстОшибки = НСтр("ru = 'В строках таблицы ""Маршрут"" указано отрицательное значение ожидания.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,,, Отказ);
		КонецЕсли;
		
		Если ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам Тогда
			мсвОтрезкиПути = уатОбщегоНазначения_проф.ПолучитьНачальныеКонечныеПунктыГрузов(ОтрезкиПути, Товары.Количество(), ПромежуточныеПункты.Количество());
			Для Сч = 0 По мсвОтрезкиПути.Количество()-1 Цикл
				ТекОтрезок = мсвОтрезкиПути[Сч];
				Если ТекОтрезок.От < 0 Или ТекОтрезок.До < 0 Тогда
					Если ЗначениеЗаполнено(Товары[Сч].ОтрезокПути) И уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП() Тогда
						ТекстОшибкиОтрезркПути = НСтр("ru = 'Не заполнен отрезок пути. Возможно, требуется выполнить обработчик отложенного обновления на версию 1.1.9.1'
						|;en = 'Route segment not specified.'");
					ИначеЕсли ЗначениеЗаполнено(Товары[Сч].ОтрезокПути) Тогда
						ТекстОшибкиОтрезркПути = НСтр("ru = 'Не заполнен отрезок пути. Возможно, требуется выполнить обработчик отложенного обновления на версию 2.2.9.1'
						|;en = 'Route segment not specified.'");
					Иначе
						ТекстОшибкиОтрезркПути = НСтр("ru = 'Не заполнен отрезок пути.';en = 'Route segment not specified.'");
					КонецЕсли;
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстОшибкиОтрезркПути,
						ЭтотОбъект,
						"Товары["+Формат(Сч, "ЧН=0; ЧГ=0")+"].ПредставлениеОтрезкаПути",
						,
						Отказ
					);
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам Тогда
			мсвОтрезкиПути = уатОбщегоНазначения_проф.ПолучитьНачальныеКонечныеПунктыГрузов(ОтрезкиПути, ГрузовойСостав.Количество(), ПромежуточныеПункты.Количество());
			Для Сч = 0 По мсвОтрезкиПути.Количество()-1 Цикл
				ТекОтрезок = мсвОтрезкиПути[Сч];
				Если ТекОтрезок.От < 0 Или ТекОтрезок.До < 0 Тогда
					Если ЗначениеЗаполнено(ГрузовойСостав[Сч].ОтрезокПути) И уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП() Тогда
						ТекстОшибкиОтрезркПути = НСтр("ru = 'Не заполнен отрезок пути. Возможно, требуется выполнить обработчик отложенного обновления на версию 1.1.9.1'
						|;en = 'Route segment not specified.'");
					ИначеЕсли ЗначениеЗаполнено(ГрузовойСостав[Сч].ОтрезокПути) Тогда
						ТекстОшибкиОтрезркПути = НСтр("ru = 'Не заполнен отрезок пути. Возможно, требуется выполнить обработчик отложенного обновления на версию 2.2.9.1'
						|;en = 'Route segment not specified.'");
					Иначе
						ТекстОшибкиОтрезркПути = НСтр("ru = 'Не заполнен отрезок пути.';en = 'Route segment not specified.'");
					КонецЕсли;
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстОшибкиОтрезркПути,
						ЭтотОбъект,
						"ГрузовойСостав["+Формат(Сч, "ЧН=0; ЧГ=0")+"].ПредставлениеОтрезкаПути",
						,
						Отказ
					);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не ЭтоШаблонПеревозки Тогда
		уатОбщегоНазначенияСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "НаименованиеШаблона");
	КонецЕсли;
	
	Если ЭтоШаблонПеревозки Тогда
		уатОбщегоНазначенияСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Организация");
		уатОбщегоНазначенияСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "Контрагент");
		уатОбщегоНазначенияСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ДоговорКонтрагента");
		
		уатОбщегоНазначенияСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ВидДоставки");
		уатОбщегоНазначенияСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ВидПеревозки");
		уатОбщегоНазначенияСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "АдресОтправления");
		уатОбщегоНазначенияСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "АдресНазначения");
		уатОбщегоНазначенияСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ДоставкаС");
		уатОбщегоНазначенияСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ДоставкаПо");
		уатОбщегоНазначенияСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ОтправлениеС");
		уатОбщегоНазначенияСервер.УдалитьПроверяемыйРеквизит(ПроверяемыеРеквизиты, "ОтправлениеПо");
		
		ПроверяемыеРеквизиты.Добавить("Услуги.ВидДокумента");
		ПроверяемыеРеквизиты.Добавить("Расходы.ВидДокумента");
	КонецЕсли;
	
	уатОбщегоНазначения.ПроверкаЗаполненияПодразделения(Организация, Подразделение, Отказ, Заголовок);
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// Проверяет корректность заполнения дат действия
//  
// Возвращаемое значение:
//  Истина - Заполнение не корректно,
//  Ложь - заполнение корректно.
//
Функция ПроверкаНеКорректностиДатДействия()
	
	Отказ = Ложь;
	
	Если ЭтоШаблонПеревозки Тогда
		// Отбрасывание дат, которое будет выполнено ПередЗаписью, еще не выполнено. Оставляем для проверки только время.
		ПустаяДата = '00010101';
		
		ДатаОтправлениеС  = ПустаяДата + (ОтправлениеС  - НачалоДня(ОтправлениеС));
		ДатаОтправлениеПо = ПустаяДата + (ОтправлениеПо - НачалоДня(ОтправлениеПо));
		ДатаДоставкаС     = ПустаяДата + (ДоставкаС     - НачалоДня(ДоставкаС));
		ДатаДоставкаПо    = ПустаяДата + (ДоставкаПо    - НачалоДня(ДоставкаПо));
	Иначе
		ДатаОтправлениеС  = ОтправлениеС;
		ДатаОтправлениеПо = ОтправлениеПо;
		ДатаДоставкаС     = ДоставкаС;
		ДатаДоставкаПо    = ДоставкаПо;
	КонецЕсли;
	
	Если ДатаОтправлениеС > ДатаОтправлениеПо Тогда 
		ТекстНСТР = НСтр("en='""Departure from"" can not be more than ""Departure till""!';ru='""Отправление с"" не может быть больше ""Отправление по""!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР,,,, Отказ);
	КонецЕсли;
	
	Если ДатаДоставкаС > ДатаДоставкаПо Тогда
		ТекстНСТР = НСтр("en='""Arrival from"" cannot be greater ""Arrival till""!';ru='""Прибытие с"" не может быть больше ""Прибытие по""!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР,,,, Отказ);
	КонецЕсли;
	
	Если ДатаОтправлениеС > ДатаДоставкаПо И ЗначениеЗаполнено(ДатаДоставкаПо) Тогда
		ТекстНСТР = НСтр("en='""Departure from"" can not be more than ""Arrival till""!';ru='""Отправление с"" не может быть больше ""Прибытие по""!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР,,,, Отказ);
	КонецЕсли;
	
	Возврат Отказ;
	
КонецФункции

Процедура ОтразитьЭтапПеревозкиНаРегистре()
	
	НаборЗаписей = РегистрыСведений.уатЭтапыМультимодальныхПеревозок_уэ.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.ЗаказГрузоотправителя.Установить(РодительскийЗаказ);
	НаборЗаписей.Отбор.Этап.Установить(Ссылка);
	НаборЗаписей.Прочитать();
	
	Если НаборЗаписей.Количество() = 0 Тогда 
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("ЗаказГрузоотправителя", РодительскийЗаказ);
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МАКСИМУМ(уатЭтапыМультимодальныхПеревозок_уэ.НомерЭтапа) КАК НомерЭтапа
		|ИЗ
		|	РегистрСведений.уатЭтапыМультимодальныхПеревозок_уэ КАК уатЭтапыМультимодальныхПеревозок_уэ
		|ГДЕ
		|	уатЭтапыМультимодальныхПеревозок_уэ.ЗаказГрузоотправителя = &ЗаказГрузоотправителя";
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда
			НомерЭтапа = ?(Выборка.НомерЭтапа = NULL, 0, Выборка.НомерЭтапа) + 1;
		Иначе
			НомерЭтапа = 1;
		КонецЕсли;
		
		НовЗапись = НаборЗаписей.Добавить();
		НовЗапись.ЗаказГрузоотправителя = РодительскийЗаказ;
		НовЗапись.Этап                  = Ссылка;
		НовЗапись.НомерЭтапа            = НомерЭтапа;
		НовЗапись.ДатаОтправленияПлан   = ОтправлениеС;
		НовЗапись.ДатаПрибытияПлан      = ДоставкаС;
		
		НаборЗаписей.Записать(Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбновитьДанныеПодчиненныхЭтапов(мОтказ)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Заказ", Ссылка);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатЭтапыМультимодальныхПеревозок_уэ.Этап КАК Ссылка
	|ИЗ
	|	РегистрСведений.уатЭтапыМультимодальныхПеревозок_уэ КАК уатЭтапыМультимодальныхПеревозок_уэ
	|ГДЕ
	|	уатЭтапыМультимодальныхПеревозок_уэ.ЗаказГрузоотправителя = &Заказ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		ДокОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		флДокИзменен = Ложь;
		
		Если Не ДокОбъект.Мультимодальный Тогда 
			ДокОбъект.Мультимодальный = Истина;
			флДокИзменен = Истина;
		КонецЕсли;
		
		Если Не ДокОбъект.ЭтоЭтап Тогда 
			ДокОбъект.ЭтоЭтап = Истина;
			флДокИзменен = Истина;
		КонецЕсли;
		
		Если Не ДокОбъект.РодительскийЗаказ = Ссылка Тогда 
			ДокОбъект.РодительскийЗаказ = Ссылка;
			флДокИзменен = Истина;
		КонецЕсли;
		
		Если Не ДокОбъект.ДетализацияЗакрытия = ДетализацияЗакрытия Тогда 
			ДокОбъект.ДетализацияЗакрытия = ДетализацияЗакрытия;
			Если ДокОбъект.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам Тогда 
				Для Каждого ТекСтрока Из ДокОбъект.ГрузовойСостав Цикл 
					ТекСтрока.ГрузовоеМесто = Неопределено;
				КонецЦикла;
				Для Каждого ТекСтрока Из ДокОбъект.Товары Цикл 
					ТекСтрока.ГрузовоеМесто = Неопределено;
				КонецЦикла;
			КонецЕсли;
			флДокИзменен = Истина;
		КонецЕсли;
		
		Если Не ДокОбъект.Контрагент = Контрагент Тогда 
			ДокОбъект.Контрагент = Контрагент;
			флДокИзменен = Истина;
		КонецЕсли;
		
		Если Не ДокОбъект.ДоговорКонтрагента = ДоговорКонтрагента Тогда 
			ДокОбъект.ДоговорКонтрагента = ДоговорКонтрагента;
			флДокИзменен = Истина;
		КонецЕсли;
		
		Если флДокИзменен Тогда 
			Попытка
				ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
			Исключение
				мОтказ = Истина;
				Возврат;
			КонецПопытки;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьСлучайныйЦветЗаказа()
	
	ЦветДокумента = уатЗащищенныеФункцииСервер_проф.СлучайноеЧисло(, 15);
	
	Если ЦветДокумента = 0 Тогда 
		ЦветДокумента = 16;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ИсполняемаяЧастьМодуля

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

#КонецОбласти

#КонецЕсли
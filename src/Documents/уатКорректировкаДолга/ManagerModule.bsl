#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.УправлениеДоступом

// Позволяет переопределить ограничение, указанное в модуле менеджера объекта метаданных.
//
// Параметры:
//  Ограничение - Структура:
//    * Текст                             - Строка - ограничение доступа для пользователей.
//                                          Если пустая строка, значит, доступ разрешен.
//    * ТекстДляВнешнихПользователей      - Строка - ограничение доступа для внешних пользователей.
//                                          Если пустая строка, значит, доступ запрещен.
//    * ПоВладельцуБезЗаписиКлючейДоступа - Неопределено - определить автоматически.
//                                        - Булево - если Ложь, то всегда записывать ключи доступа,
//                                          если Истина, тогда не записывать ключи доступа,
//                                          а использовать ключи доступа владельца (требуется,
//                                          чтобы ограничение было строго по объекту-владельцу).
//   * ПоВладельцуБезЗаписиКлючейДоступаДляВнешнихПользователей - Неопределено, Булево - также
//                                          как у параметра ПоВладельцуБезЗаписиКлючейДоступа.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Подразделение)";
	
	Ограничение.ТекстДляВнешнихПользователей = Ограничение.Текст;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	
	мЗапрос = Новый Запрос;
	мЗапрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	мЗапрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА уатКорректировкаДолгаСостав.УвеличениеДолга > уатКорректировкаДолгаСостав.УменьшениеДолга
	|			ТОГДА ВЫБОР
	|					КОГДА уатКорректировкаДолгаСостав.Договор.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком)
	|						ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|					ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА уатКорректировкаДолгаСостав.Договор.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком)
	|					ТОГДА ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход)
	|				ИНАЧЕ ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|			КОНЕЦ
	|	КОНЕЦ КАК ВидДвижения,
	|	уатКорректировкаДолгаСостав.Ссылка.Дата КАК Период,
	|	уатКорректировкаДолгаСостав.Ссылка КАК Регистратор,
	|	уатКорректировкаДолгаСостав.Ссылка.Контрагент КАК Контрагент,
	|	уатКорректировкаДолгаСостав.Ссылка.Организация КАК Организация,
	|	уатКорректировкаДолгаСостав.Ссылка.Подразделение КАК Подразделение,
	|	уатКорректировкаДолгаСостав.Ссылка.СтатьяДоходов КАК СтатьяДоходов,
	|	уатКорректировкаДолгаСостав.Ссылка.СтатьяРасходов КАК СтатьяРасходов,
	|	уатКорректировкаДолгаСостав.Сделка КАК Сделка,
	|	уатКорректировкаДолгаСостав.Договор КАК ДоговорКонтрагента,
	|	уатКорректировкаДолгаСостав.Валюта КАК Валюта,
	|	уатКорректировкаДолгаСостав.Курс КАК Курс,
	|	уатКорректировкаДолгаСостав.Кратность КАК Кратность,
	|	ВЫБОР
	|		КОГДА уатКорректировкаДолгаСостав.УвеличениеДолга > уатКорректировкаДолгаСостав.УменьшениеДолга
	|			ТОГДА уатКорректировкаДолгаСостав.УвеличениеДолга - уатКорректировкаДолгаСостав.УменьшениеДолга
	|		ИНАЧЕ уатКорректировкаДолгаСостав.УменьшениеДолга - уатКорректировкаДолгаСостав.УвеличениеДолга
	|	КОНЕЦ КАК СуммаВзаиморасчетов,
	|	0 КАК СуммаУпр,
	|	0 КАК СуммаРегл
	|ИЗ
	|	Документ.уатКорректировкаДолга.Состав КАК уатКорректировкаДолгаСостав
	|ГДЕ
	|	уатКорректировкаДолгаСостав.Ссылка = &Ссылка
	|	И уатКорректировкаДолгаСостав.УвеличениеДолга <> уатКорректировкаДолгаСостав.УменьшениеДолга
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫБОР
	|		КОГДА уатКорректировкаДолгаСостав.Договор.ВидДоговора = ЗНАЧЕНИЕ(Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком)
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.уатПолучателиУслуг.НашаОрганизация)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.уатПолучателиУслуг.Контрагент)
	|	КОНЕЦ КАК ПолучательУслуг,
	|	уатКорректировкаДолгаСостав.Ссылка.Дата КАК Период,
	|	уатКорректировкаДолгаСостав.Ссылка КАК Регистратор,
	|	уатКорректировкаДолгаСостав.Ссылка.Организация КАК Организация,
	|	уатКорректировкаДолгаСостав.Ссылка.Контрагент КАК Контрагент,
	|	уатКорректировкаДолгаСостав.Договор КАК ДоговорКонтрагента,
	|	уатКорректировкаДолгаСостав.Сделка КАК Сделка,
	|	уатКорректировкаДолгаСостав.ЗаказНаТС КАК ЗаказНаТС,
	|	уатКорректировкаДолгаСостав.Валюта КАК Валюта,
	|	уатКорректировкаДолгаСостав.Курс КАК Курс,
	|	уатКорректировкаДолгаСостав.Кратность КАК Кратность,
	|	ВЫБОР
	|		КОГДА уатКорректировкаДолгаСостав.УвеличениеДолга - уатКорректировкаДолгаСостав.УменьшениеДолга > 0
	|			ТОГДА уатКорректировкаДолгаСостав.УвеличениеДолга - уатКорректировкаДолгаСостав.УменьшениеДолга
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаПриход,
	|	ВЫБОР
	|		КОГДА уатКорректировкаДолгаСостав.УвеличениеДолга - уатКорректировкаДолгаСостав.УменьшениеДолга < 0
	|			ТОГДА уатКорректировкаДолгаСостав.УменьшениеДолга - уатКорректировкаДолгаСостав.УвеличениеДолга
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СуммаРасход,
	|	0 КАК СуммаПриходУпр,
	|	0 КАК СуммаРасходУпр
	|ИЗ
	|	Документ.уатКорректировкаДолга.Состав КАК уатКорректировкаДолгаСостав
	|ГДЕ
	|	уатКорректировкаДолгаСостав.Ссылка = &Ссылка
	|	И уатКорректировкаДолгаСостав.УвеличениеДолга <> уатКорректировкаДолгаСостав.УменьшениеДолга
	|	И (уатКорректировкаДолгаСостав.Договор.ВедениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказамНаТС)
	|			ИЛИ уатКорректировкаДолгаСостав.Договор.ВедениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоНакладным)
	|			ИЛИ уатКорректировкаДолгаСостав.Договор.ВедениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам))";
	
	МассивРезультатов = мЗапрос.ВыполнитьПакет();
	
	// взаиморасчеты
	тблВзаиморасчеты = МассивРезультатов[0].Выгрузить();
	Для Каждого ТекСтрока Из тблВзаиморасчеты Цикл
		ТекСтрока.СуммаУпр = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаВзаиморасчетов,
			ТекСтрока.Валюта,    СтруктураДополнительныеСвойства.ВалютаУпрУчета,
			ТекСтрока.Курс,      СтруктураДополнительныеСвойства.КурсУпр,
			ТекСтрока.Кратность, СтруктураДополнительныеСвойства.КратностьУпр);
			
		ТекСтрока.СуммаРегл = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаВзаиморасчетов,
			ТекСтрока.Валюта,    СтруктураДополнительныеСвойства.ВалютаРеглУчета,
			ТекСтрока.Курс,      СтруктураДополнительныеСвойства.КурсРегл,
			ТекСтрока.Кратность, СтруктураДополнительныеСвойства.КратностьРегл);
	КонецЦикла;
	
	// оперативные доходы и расходы
	тблДоходы = тблВзаиморасчеты.Скопировать();
	тблДоходы.Очистить();
	тблДоходы.Колонки.Добавить("Заказ");
	тблДоходы.Колонки.Добавить("Менеджер");
	тблДоходы.Колонки.Добавить("Маршрут");
	тблДоходы.Колонки.Добавить("ОбъектСтроительства");
	тблДоходы.Колонки.Добавить("ВидПеревозки");
	тблДоходы.Колонки.Добавить("НаправлениеПеревозки");
	тблРасходы = тблДоходы.Скопировать();
	Для Каждого ТекСтрока Из тблВзаиморасчеты Цикл
		Если ТекСтрока.ВидДвижения = ВидДвиженияНакопления.Приход Тогда
			НоваяСтрока = тблДоходы.Добавить();
		Иначе
			НоваяСтрока = тблРасходы.Добавить();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		НоваяСтрока.ВидДвижения = ВидДвиженияНакопления.Приход;
		Если ТипЗнч(ТекСтрока.Сделка) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") Тогда
			НоваяСтрока.Заказ = ТекСтрока.Сделка;
			НоваяСтрока.Менеджер = ТекСтрока.Сделка.Ответственный;
			НоваяСтрока.Маршрут = ТекСтрока.Сделка.Маршрут;
			НоваяСтрока.ОбъектСтроительства = ТекСтрока.Сделка.ОбъектСтроительства;
			НоваяСтрока.ВидПеревозки = ТекСтрока.Сделка.ВидПеревозки;
			НоваяСтрока.НаправлениеПеревозки = ТекСтрока.Сделка.НаправлениеПеревозки;
		КонецЕсли;
	КонецЦикла;
	// тблДоходы.Свернуть(
	//	"ВидДвижения, Период, Регистратор, Контрагент, Организация, Подразделение, СтатьяДоходов, Заказ",
	//	"СуммаУпр, СуммаРегл");
	// тблРасходы.Свернуть(
	//	"ВидДвижения, Период, Регистратор, Контрагент, Организация, Подразделение, СтатьяРасходов, Заказ",
	//	"СуммаУпр, СуммаРегл");
	
	// платежный календарь
	ТаблицаПлатежныйКалендарь = МассивРезультатов[1].Выгрузить();
	Для Каждого ТекСтрока Из ТаблицаПлатежныйКалендарь Цикл		
		ТекСтрока.СуммаПриходУпр = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаПриход,
			ТекСтрока.Валюта,    СтруктураДополнительныеСвойства.ВалютаУпрУчета,
			ТекСтрока.Курс,      СтруктураДополнительныеСвойства.КурсУпр,
			ТекСтрока.Кратность, СтруктураДополнительныеСвойства.КратностьУпр);
		ТекСтрока.СуммаРасходУпр = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаРасход,
			ТекСтрока.Валюта,    СтруктураДополнительныеСвойства.ВалютаУпрУчета,
			ТекСтрока.Курс,      СтруктураДополнительныеСвойства.КурсУпр,
			ТекСтрока.Кратность, СтруктураДополнительныеСвойства.КратностьУпр);
			
		// если в счете/накладной всего один заказ, то подставляем его
		Если ТекСтрока.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоНакладным
			ИЛИ ТекСтрока.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			мсвЗаказы = ЗаказыПоСделке(ТекСтрока.Сделка);
			Если мсвЗаказы.Количество() = 1 Тогда
				ТекСтрока.ЗаказНаТС	= мсвЗаказы[0];
			КонецЕсли;
		// заказ = сделка, при ведении расчетов по заказам
		ИначеЕсли ТекСтрока.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказамНаТС Тогда
			ТекСтрока.ЗаказНаТС	= ТекСтрока.Сделка;
		КонецЕсли;
	КонецЦикла;
	ТаблицаПлатежныйКалендарь.Свернуть(
		"ПолучательУслуг, Период, Регистратор, Организация, Контрагент, ДоговорКонтрагента, Сделка, ЗаказНаТС, Валюта",
		"СуммаПриход, СуммаПриходУпр, СуммаРасход, СуммаРасходУпр");
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаВзаиморасчетов", тблВзаиморасчеты);
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДоходы", тблДоходы);
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРасходы", тблРасходы);
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаПлатежныйКалендарь", ТаблицаПлатежныйКалендарь);
	
КонецПроцедуры // ИнициализироватьДанныеДокумента()

Процедура ВыполнитьКонтроль(ДокументСсылка, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь) Экспорт
	Заглушка = Истина;	
КонецПроцедуры // ВыполнитьКонтроль()

Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура("Информация", "Контрагент");
	Возврат Результат;
	
КонецФункции

Функция ЗаказыПоСделке(Сделка) Экспорт
	Если НЕ ЗначениеЗаполнено(Сделка)
		ИЛИ (ТипЗнч(Сделка) <> Тип("ДокументСсылка.уатРеализацияУслуг")
		И ТипЗнч(Сделка) <> Тип("ДокументСсылка.уатПоступлениеТоваровУслуг")
		И ТипЗнч(Сделка) <> Тип("ДокументСсылка.уатСчетНаОплатуПокупателю")
		И ТипЗнч(Сделка) <> Тип("ДокументСсылка.уатСчетНаОплатуПоставщика")) Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	тблЗаказы = Сделка.Услуги.Выгрузить();
	тблЗаказы.Свернуть("Заказ");
	мсвЗаказы = тблЗаказы.ВыгрузитьКолонку("Заказ");

	Возврат мсвЗаказы;
КонецФункции

#КонецОбласти

#КонецЕсли
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
	
#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	уатПроведение_проф.ПолучитьСтарыеЗаказыПередЗаписью(ЭтотОбъект);
	
	РасчитатьСуммуДокумента();
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, ТекстЗаполнения, СтандартнаяОбработка)
	уатОбщегоНазначенияСервер.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	ВалютаДокумента = Константы.ВалютаРегламентированногоУчета.Получить();
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	// Инициализация дополнительных свойств для проведения документа.
	уатПроведение.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа.
	Документы.уатКорректировкаДолга.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	уатПроведение.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета.
	уатПроведение_проф.ОтразитьВзаиморасчетыСКонтрагентами(ДополнительныеСвойства, Движения, Отказ);
	уатПроведение.ОтразитьДоходы(ДополнительныеСвойства, Движения, Отказ);
	уатПроведение.ОтразитьРасходы(ДополнительныеСвойства, Движения, Отказ);
	Если ПолучитьФункциональнуюОпцию("уатИспользоватьПлатежныйКалендарь") Тогда
		уатПроведение_проф.ОтразитьПлатежныйКалендарь(ДополнительныеСвойства, Движения, Отказ);
	КонецЕсли;
		
	// Запись наборов записей.
	уатПроведение.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	уатПроведение_проф.ОбновитьТекущееСостояниеОплатыЗаказов(ЭтотОбъект);
	
	// Контроль возникновения отрицательного остатка.
	Документы.уатКорректировкаДолга.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);
	
КонецПроцедуры // ОбработкаПроведения()

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа
	уатПроведение.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	уатПроведение.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	уатПроведение.ЗаписатьНаборыЗаписей(ЭтотОбъект);

	уатПроведение_проф.ОбновитьТекущееСостояниеОплатыЗаказов(ЭтотОбъект);
	
	// Контроль
	Документы.уатКорректировкаДолга.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ, Истина);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Заголовок = уатОбщегоНазначенияТиповые.уатПредставлениеДокументаПриПроведении(ЭтотОбъект);
	
	Если Мультивалютный Тогда
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("ВалютаДокумента"));
	КонецЕсли;
	
	флЕстьДоходы = Ложь;
	флЕстьРасходы = Ложь;
	Для Каждого ТекСтрока Из Состав Цикл
		ТекВидДоговора = ТекСтрока.Договор.ВидДоговора;
		ТекВедениеВзаиморасчетов = ТекСтрока.Договор.ВедениеВзаиморасчетов;
		
		Если НЕ ЗначениеЗаполнено(ТекСтрока.Сделка)
			И (ТекВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоНакладным
			ИЛИ ТекВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам
			ИЛИ ТекВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказамНаТС) Тогда
			СтрокаСообщения = "В строке " + ТекСтрока.НомерСтроки + " табличной части ""Состав"" не указано значение сделки!";
			уатОбщегоНазначенияТиповые.СообщитьОбОшибке(СтрокаСообщения, Отказ, Заголовок);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекСтрока.Сделка) И НЕ ЗначениеЗаполнено(ТекСтрока.ЗаказНаТС)
			И (ТекВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам
			ИЛИ ТекВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоНакладным) Тогда
			мсвЗаказы = Документы.уатКорректировкаДолга.ЗаказыПоСделке(ТекСтрока.Сделка);
			Если мсвЗаказы.Количество() > 1 Тогда
				СтрокаСообщения = "В строке " + ТекСтрока.НомерСтроки + " табличной части ""Состав"" не указан Заказ!";
				уатОбщегоНазначенияТиповые.СообщитьОбОшибке(СтрокаСообщения, Отказ, Заголовок);	
			КонецЕсли;
		КонецЕсли;
			
		Если ТекСтрока.УвеличениеДолга > ТекСтрока.УменьшениеДолга Тогда // УвеличениеДолга
			Если ТекВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
				флЕстьРасходы = Истина;
			Иначе
				флЕстьДоходы = Истина;
			КонецЕсли;
		ИначеЕсли ТекСтрока.УвеличениеДолга < ТекСтрока.УменьшениеДолга Тогда // УменьшениеДолга
			Если ТекВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком Тогда
				флЕстьДоходы = Истина;
			Иначе
				флЕстьРасходы = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если флЕстьДоходы Тогда
		ПроверяемыеРеквизиты.Добавить("СтатьяДоходов");
	КонецЕсли;
	Если флЕстьРасходы Тогда
		ПроверяемыеРеквизиты.Добавить("СтатьяРасходов");
	КонецЕсли;
	
	уатОбщегоНазначения.ПроверкаЗаполненияПодразделения(Организация, Подразделение, Отказ, Заголовок);
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Процедура РасчитатьСуммуДокумента()
	СуммаПриход = 0;
	СуммаРасход = 0;
	Для Каждого ТекСтрока Из Состав Цикл
		Если Мультивалютный Тогда
			ТекСуммаПриход = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.УвеличениеДолга,
				ТекСтрока.Валюта,    ВалютаДокумента,
				ТекСтрока.Курс,      Курс,
				ТекСтрока.Кратность, Кратность);
			ТекСуммаРасход = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.УменьшениеДолга,
				ТекСтрока.Валюта,    ВалютаДокумента,
				ТекСтрока.Курс,      Курс,
				ТекСтрока.Кратность, Кратность);
		Иначе
			ТекСуммаПриход = ТекСтрока.УвеличениеДолга;
			ТекСуммаРасход = ТекСтрока.УменьшениеДолга;
		КонецЕсли;
		
		СуммаПриход = СуммаПриход + ТекСуммаПриход;
		СуммаРасход = СуммаРасход + ТекСуммаРасход;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти


#КонецЕсли

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	уатЗащищенныеФункцииСервер.уатДокументФормаЭлементаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, Объект, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// Установка реквизитов формы.
	мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	уатОбщегоНазначенияСервер.НастроитьПолеЕдиницыИзмерения(ЭтотОбъект, "Товары");
	уатОбщегоНазначенияСервер.НастроитьПолеПодразделение(Элементы.Подразделение, "Объект.Организация");
	
	флАдресноеХранение = ПолучитьФункциональнуюОпцию("уатАдресноеХранение") = Истина;
	
	//ПодключаемоеОборудование
	уатОбщегоНазначения_проф.НастроитьПодключаемоеОборудование(ЭтотОбъект);
	//Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// уатУправлениеАвтотранспортом.МодификацияКонфигурации
	уатМодификацияКонфигурацииКлиентПереопределяемый.ПриОткрытии(ЭтотОбъект, Отказ);
	// Конец уатУправлениеАвтотранспортом.МодификацияКонфигурации
	
	уатЗащищенныеФункцииКлиент.уатДокументФормаЭлементаПриОткрытии(Отказ, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	//ПодключаемоеОборудование
	уатОбщегоНазначенияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(ЭтотОбъект);
	//Конец ПодключаемоеОборудование
	
	ПосчитатьОтклонение();
	УстановитьВидимость();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ПосчитатьОтклонение();
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ИсточникВыбора.ИмяФормы = "Обработка.уатПодборНоменклатуры.Форма.Форма" или ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.Форма" Тогда
		ОбработкаПодбора(ИсточникВыбора.ИмяТаблицы, ВыбранноеЗначение);
	ИначеЕсли   ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровВДокументЗакупки.Форма.Форма" Тогда
		ОбработкаПодбора("Товары", ВыбранноеЗначение);
	КонецЕсли;
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Оповещ = Новый ОписаниеОповещения("ДобавитьНоменклатуруВТЧПоШтрихкоду", ЭтотОбъект);
		уатОбщегоНазначенияКлиент.ОбработатьСобытиеПодключаемогоОборудования(ИмяСобытия, Параметр, Источник,
			Новый Структура("Оповещение", Оповещ));
	КонецЕсли;
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	// ПодключаемоеОборудование
	уатОбщегоНазначенияКлиент.ОбработкаВнешнегоСобытия(Источник, Событие, Данные);
	// Конец ПодключаемоеОборудование
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	// Обработка события изменения организации.
	Если НЕ уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ВестиСкладскойУчетУАТ")) Тогда
		
		ТекстНСТР = НСтр("en='For company ""%1"" the possibility of inventory management with FMS documents is disabled!';ru='Для организации ""%1"" отключена возможность ведения складского учета документами УАТ!'");
		ТекстНСТР = СтрШаблон(ТекстНСТР, Объект.Организация);
		ПоказатьПредупреждение(Неопределено, ТекстНСТР, 5);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзменении(Элемент)
	Если Объект.Товары.Количество() > 0 Тогда
		ТекстНСТР = НСтр("en='Refill number and amount?';ru='Перезаполнить учетные количества и суммы?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("СкладПриИзмененииЗавершение", ЭтотОбъект, Новый Структура("ТекстВопроса", ТекстНСТР)),
			ТекстНСТР, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, );
        Возврат; 
	КонецЕсли;
	
	// Документ должен быть записан, чтобы этот запрос сработал.
	СкладПриИзмененииФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
        Возврат;
    КонецЕсли; 
    
    СкладПриИзмененииФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзмененииФрагмент()
    
    флЗаписать = Ложь;
	Если Модифицированность ИЛИ Объект.Ссылка.Пустая() Тогда
		ТекстНСТР = НСтр("en='Before filling, be sure to record your document. Continue?';ru='Перед заполнением следует записать документ. Продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("СкладПриИзмененииФрагментЗавершение", ЭтотОбъект), ТекстНСТР, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, );
        Возврат;
    КонецЕсли;
    
    СкладПриИзмененииФрагментФрагмент(флЗаписать);
КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзмененииФрагментЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ <> КодВозвратаДиалога.Да Тогда
        Возврат;
    КонецЕсли;
    флЗаписать = Истина;
    
    СкладПриИзмененииФрагментФрагмент(флЗаписать);

КонецПроцедуры

&НаКлиенте
Процедура СкладПриИзмененииФрагментФрагмент(Знач флЗаписать)
    
    ПерезаполнитьУчетныеКоличестваИСуммыСервер(мВалютаРегламентированногоУчета, флЗаписать);
    
    ПосчитатьОтклонение();
	УстановитьВидимость();

КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	СтруктураДанные = Новый Структура();
	СтруктураДанные.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
	
	СтруктураДанные = ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные);
	
	СтрокаТабличнойЧасти.ЕдиницаИзмерения = СтруктураДанные.ЕдиницаИзмерения;
	СтрокаТабличнойЧасти.Цена 			  = 0;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатОбщегоНазначенияКлиент.ТЧТоварыЕдиницаИзмеренияНачалоВыбора(Элементы.Товары.ТекущиеДанные.Номенклатура, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	//Если НЕ уатОбщегоНазначенияСервер.СуществуетСправочникЕдиницыИзмерения()
	//	ИЛИ СтрокаТабличнойЧасти.ЕдиницаИзмерения = ВыбранноеЗначение ИЛИ СтрокаТабличнойЧасти.Цена = 0 Тогда
	//	Возврат;
	//КонецЕсли;
	Если СтрокаТабличнойЧасти.ЕдиницаИзмерения = ВыбранноеЗначение
		ИЛИ СтрокаТабличнойЧасти.Цена = 0
		ИЛИ НЕ уатОбщегоНазначенияТиповые.уатЕстьРеквизитСправочника("Коэффициент", СтрокаТабличнойЧасти.ЕдиницаИзмерения) Тогда
		
		Возврат;
	КонецЕсли;	
	
	ТекКоэффициент = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(СтрокаТабличнойЧасти.ЕдиницаИзмерения,
						"Коэффициент");
	Если ТекКоэффициент <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Цена * уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(
									ВыбранноеЗначение, "Коэффициент") / ТекКоэффициент;
	КонецЕсли; 		
	
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
	
	ТоварыСуммаПриИзменении(Элемент);
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ТоварыПодбор(Команда)
	ПараметрыПодбора = ПолучитьПараметрыПодбора("Товары");
	Если ПараметрыПодбора <> Неопределено Тогда
		уатОбщегоНазначенияТиповыеКлиент.уатОткрытьПодборНоменклатуры(ЭтотОбъект,ПараметрыПодбора,УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОстаткамНаСкладе(Команда)
	Если НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
		ТекстНСТР = НСтр("en='Warehouse is not selected. Filling impossible.';ru='Склад не выбран. Заполнение невозможно.'");
		ПоказатьПредупреждение(Неопределено, ТекстНСТР);
		Возврат;                                                  		
	КонецЕсли;	
	
	Если Объект.Товары.Количество() > 0 Тогда	
		ТекстНСТР = НСтр("en='Before filling the datasheet portion will be cleared. Fill?';ru='Перед заполнением табличная часть будет очищена. Заполнить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьПоОстаткамНаСкладеЗавершение", ЭтотОбъект), ТекстНСТР, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, );
		Возврат;		
	КонецЕсли;
	
	ЗаполнитьПоОстаткамНаСкладеФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьУчетныеКоличества(Команда)
	Если НЕ ЗначениеЗаполнено(Объект.Склад) Тогда
		ТекстНСТР = НСтр("en='Warehouse is not selected. Filling impossible.';ru='Склад не выбран. Заполнение невозможно.'");
		ПоказатьПредупреждение(Неопределено, ТекстНСТР);
		Возврат;
	КонецЕсли;	
	
	Если Объект.Товары.Количество() > 0 Тогда	
		ТекстНСТР = НСтр("en='Before filling the datasheet portion will be cleared. Fill?';ru='Перед заполнением табличная часть будет очищена. Заполнить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьУчетныеКоличестваЗавершение", ЭтотОбъект), ТекстНСТР, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, );
		Возврат;
	КонецЕсли;
	
	ЗаполнитьУчетныеКоличестваФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьУчетныеКоличестваИСуммы(Команда)
	Если Объект.Товары.Количество() > 0 Тогда	
		ТекстНСТР = НСтр("en='Refill number and amount?';ru='Перезаполнить учетные количества и суммы?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ПерезаполнитьУчетныеКоличестваИСуммыЗавершение", ЭтотОбъект,
			Новый Структура("ТекстВопроса", ТекстНСТР)), ТекстНСТР, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, );
        Возврат;
	КонецЕсли;
	
	// Документ должен быть записан, чтобы этот запрос сработал.
	ПерезаполнитьУчетныеКоличестваИСуммыФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура Очистить(Команда)
	Если Объект.Товары.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстНСТР = НСтр("en='Clear the tabular section?';ru='Очистить табличную часть?'");
	ПоказатьВопрос(Новый ОписаниеОповещения("ОчиститьЗавершение", ЭтотОбъект), ТекстНСТР, РежимДиалогаВопрос.ДаНет, , 
			КодВозвратаДиалога.Нет, НСтр("en='Clear the table';ru='Очистка таблицы'"));

КонецПроцедуры

&НаКлиенте
Процедура СоздатьНаОснованииВнутреннееПеремещениеИзвлечение(Команда)
	Если Модифицированность Тогда
		Если НЕ (ПроверитьЗаполнение() И Записать()) Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Основание, ВидОперации", Объект.Ссылка,
		ПредопределенноеЗначение("Перечисление.уатВидыОперацийВнутреннееПеремещение.ИзвлечениеИзЯчейки"));
	ОткрытьФорму("Документ.уатВнутреннееПеремещение.ФормаОбъекта", ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНаОснованииВнутреннееПеремещениеРазмещение(Команда)
	Если Модифицированность Тогда
		Если НЕ (ПроверитьЗаполнение() И Записать()) Тогда 
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Основание, ВидОперации", Объект.Ссылка,
		ПредопределенноеЗначение("Перечисление.уатВидыОперацийВнутреннееПеремещение.РазмещениеВЯчейке"));
	ОткрытьФорму("Документ.уатВнутреннееПеремещение.ФормаОбъекта", ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура ПакетноеСписание(Команда)
	СоздатьНаОснованииВнутреннееПеремещениеИзвлечение(Неопределено);
	
	ПараметрыФормы = Новый Структура("Основание", Объект.Ссылка);
	ОткрытьФорму("Документ.уатСписаниеТоваров.ФормаОбъекта", ПараметрыФормы);
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	Оповещ = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект);
	ПоказатьВводЗначения(Оповещ, "", "Введите штрихкод номенклатуры", Тип("Строка"));
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(Результат, ДопПараметры) Экспорт
	Если ЗначениеЗаполнено(Результат) Тогда
		ТекНоменклатура = уатЗащищенныеФункцииСервер_проф.ПолучитьОбъектПоШтрихкоду(Результат);
		ДобавитьНоменклатуруВТЧПоШтрихкоду(Новый Структура("Штрихкод, Объект", Результат, ТекНоменклатура));
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// Получает набор данных с сервера для процедуры НоменклатураПриИзменении.
//
&НаСервереБезКонтекста
Функция ПолучитьДанныеНоменклатураПриИзменении(СтруктураДанные)
	
	СтруктураДанные.Вставить("ЕдиницаИзмерения", СтруктураДанные.Номенклатура.ЕдиницаХраненияОстатков);
	
	Возврат СтруктураДанные;
	
КонецФункции // ПолучитьДанныеНоменклатураПриИзменении()

// Процедура рассчитывает сумму в строке табличной части.
//
&НаКлиенте
Процедура РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти = Неопределено)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Сумма      = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
	СтрокаТабличнойЧасти.Отклонение = СтрокаТабличнойЧасти.Количество - СтрокаТабличнойЧасти.КоличествоУчет;
	
КонецПроцедуры // РассчитатьСуммуВСтрокеТабличнойЧасти()

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
&НаКлиенте
Процедура ОбработкаПодбора(ИмяТабличнойЧасти, ЗначениеВыбора)
	
	Если ЗначениеВыбора.Свойство("АдресПодобраннойНоменклатурыВХранилище") Тогда
		МассивТоваров = ПолучитьТоварыИзВременногоХранилища(ЗначениеВыбора.АдресПодобраннойНоменклатурыВХранилище);
	Иначе
		МассивТоваров = ПолучитьТоварыИзВременногоХранилища(ЗначениеВыбора.АдресТоваровВХранилище);
	КонецЕсли;
	
	Для Каждого ТекСтрока из МассивТоваров Цикл
		
		// Ищем выбранную позицию в таблице подобранной номенклатуры.
		// Если найдем - увеличим количество; не найдем - добавим новую строку.
		СтруктураОтбора = Новый Структура();
		
		СтруктураОтбора.Вставить("Номенклатура",     ТекСтрока.Номенклатура);
		СтруктураОтбора.Вставить("ЕдиницаИзмерения", ТекСтрока.ЕдиницаИзмерения);
		СтруктураОтбора.Вставить("Цена",             ТекСтрока.Цена);
		
		МассивСтрок = Объект.Товары.НайтиСтроки(СтруктураОтбора);
		Если МассивСтрок.Количество() = 0 Тогда
			СтрокаТабличнойЧасти = Неопределено;
		Иначе
			СтрокаТабличнойЧасти = МассивСтрок[0];
		КонецЕсли;
		
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество +   ТекСтрока.Количество;
		Иначе
			// Не нашли - добавляем новую строку.
			СтрокаТабличнойЧасти = Объект.Товары.Добавить();
			СтрокаТабличнойЧасти.Номенклатура	  = ТекСтрока.Номенклатура;
			СтрокаТабличнойЧасти.Количество  	  = ТекСтрока.Количество;
			СтрокаТабличнойЧасти.ЕдиницаИзмерения =  ТекСтрока.ЕдиницаИзмерения;
			СтрокаТабличнойЧасти.Цена = ТекСтрока.Цена;
		КонецЕсли;
		РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
	КонецЦикла;
КонецПроцедуры //

&НаСервере
Процедура ЗаполнитьПоОстаткамНаСкладеСервер(ВалютаУчета, ТолькоУчетные = Ложь)
	
	СтруктураКурса    = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ВалютаУчета, Объект.Дата);
	КурсУпрУчета      = СтруктураКурса.Курс;
	КратностьУпрУчета = СтруктураКурса.Кратность;
	
	флАдресноеХранение = ПолучитьФункциональнуюОпцию("уатАдресноеХранение") И Объект.Склад.АдресноеХранение;
	Если флАдресноеХранение Тогда
		ЗапросЯчейки = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ТоварыВЯчейках.Номенклатура КАК Номенклатура,
		|	ТоварыВЯчейках.Ячейка КАК Ячейка,
		|	ТоварыВЯчейках.КоличествоОстаток КАК Количество
		|ИЗ
		|	РегистрНакопления.уатТоварыВЯчейках.Остатки(&ДатаОстатков, Склад = &Склад) КАК ТоварыВЯчейках");
		ЗапросЯчейки.УстановитьПараметр("Склад", Объект.Склад);
		ЗапросЯчейки.УстановитьПараметр("ДатаОстатков", ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
		тблТоварыВЯчейках = ЗапросЯчейки.Выполнить().Выгрузить();
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОстаткиПартий.Номенклатура КАК Номенклатура,
	|	ОстаткиПартий.Номенклатура.ЕдиницаХраненияОстатков КАК ЕдиницаХранения,
	|	ОстаткиПартий.КоличествоОстаток КАК Количество,
	|	ОстаткиПартий.СтоимостьОстаток КАК Сумма
	|ИЗ
	|	РегистрНакопления.уатПартииТоваровНаСкладах.Остатки(&ДатаОстатков, Склад = &Склад) КАК ОстаткиПартий
	|
	|УПОРЯДОЧИТЬ ПО
	|	ОстаткиПартий.Номенклатура.Наименование");
	Запрос.УстановитьПараметр("Склад", Объект.Склад);
	Запрос.УстановитьПараметр("ДатаОстатков", ?(ЗначениеЗаполнено(Объект.Дата), Объект.Дата, ТекущаяДатаСеанса()));
		
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.Количество = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		КоличВсего = Выборка.Количество;
		СуммаВсего = Выборка.Сумма;
			
		Если флАдресноеХранение Тогда
			мсвСтроки = тблТоварыВЯчейках.НайтиСтроки(Новый Структура("Номенклатура", Выборка.Номенклатура));
			Для Каждого ТекСтрокаТоварыВЯчейках Из мсвСтроки Цикл
				СтрокаТабличнойЧасти = Объект.Товары.Добавить();
				СтрокаТабличнойЧасти.Номенклатура     = Выборка.Номенклатура;
				СтрокаТабличнойЧасти.ЕдиницаИзмерения = Выборка.ЕдиницаХранения;
				
				СтрокаТабличнойЧасти.Ячейка           = ТекСтрокаТоварыВЯчейках.Ячейка;
				СтрокаТабличнойЧасти.КоличествоУчет   = ТекСтрокаТоварыВЯчейках.Количество;
				СтрокаТабличнойЧасти.Количество       = ?(ТолькоУчетные, 0, СтрокаТабличнойЧасти.КоличествоУчет);
				
				СтрокаТабличнойЧасти.СуммаУчет        = Выборка.Сумма / Выборка.Количество * ТекСтрокаТоварыВЯчейках.Количество;
				СтрокаТабличнойЧасти.Сумма            = ?(ТолькоУчетные, 0, СтрокаТабличнойЧасти.СуммаУчет);
				СтрокаТабличнойЧасти.Цена             = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.КоличествоУчет;
				
				КоличВсего = КоличВсего - СтрокаТабличнойЧасти.КоличествоУчет;
				СуммаВсего = СуммаВсего - СтрокаТабличнойЧасти.СуммаУчет;
			КонецЦикла;
		КонецЕсли;
		
		Если КоличВсего > 0 Тогда
			СтрокаТабличнойЧасти = Объект.Товары.Добавить();
			СтрокаТабличнойЧасти.Номенклатура     = Выборка.Номенклатура;
			СтрокаТабличнойЧасти.ЕдиницаИзмерения = Выборка.ЕдиницаХранения;
			
			СтрокаТабличнойЧасти.КоличествоУчет   = КоличВсего;
			СтрокаТабличнойЧасти.Количество       = ?(ТолькоУчетные, 0, КоличВсего);
			
			СтрокаТабличнойЧасти.СуммаУчет        = СуммаВсего;
			СтрокаТабличнойЧасти.Сумма            = ?(ТолькоУчетные, 0, СтрокаТабличнойЧасти.СуммаУчет);
			СтрокаТабличнойЧасти.Цена             = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.КоличествоУчет;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПерезаполнитьУчетныеКоличестваИСуммыСервер(ВалютаУчета, флЗаписатьДокумент = Ложь)
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	
	Если флЗаписатьДокумент Тогда
		ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПартииПартий.Номенклатура,
	|	" + ?(уатОбщегоНазначенияСервер.СуществуетСправочникЕдиницыИзмерения(), 
			"ПартииПартий.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент", "1") + " КАК КоэффициентЕдиницыХранения,
	|	СУММА(ПартииПартий.КоличествоОстаток) КАК Количество,
	|	ВЫБОР
	|		КОГДА (СУММА(ПартииПартий.КоличествоОстаток) = 0) ИЛИ (СУММА(ПартииПартий.КоличествоОстаток) ЕСТЬ NULL) ТОГДА
	|			0 
	|		ИНАЧЕ
	|			СУММА(ПартииПартий.СтоимостьОстаток) * СУММА(ПартииПартий.КоличествоОстаток) / 
	|				СУММА(ПартииПартий.КоличествоОстаток)
	|	КОНЕЦ КАК Сумма
	|ИЗ
	|	РегистрНакопления.уатПартииТоваровНаСкладах.Остатки(&МоментДокумента, 
	|	                Номенклатура В (ВЫБРАТЬ Номенклатура ИЗ Документ.уатИнвентаризацияТоваров.Товары
	|	                                ГДЕ Документ.уатИнвентаризацияТоваров.Товары.Ссылка = &ДокументСсылка)
	|	              И Склад = &Склад) КАК ПартииПартий
	|
	|{ГДЕ ПартииПартий.Номенклатура КАК Номенклатура}
	|
	|СГРУППИРОВАТЬ ПО
	|	ПартииПартий.Номенклатура");
	
	Запрос.УстановитьПараметр("Склад", ДокОбъект.Склад);
	Запрос.УстановитьПараметр("ДокументСсылка", ДокОбъект.Ссылка);
	Если ДокОбъект.Ссылка.Пустая() Тогда
		Запрос.УстановитьПараметр("МоментДокумента", ДокОбъект.Дата);
	Иначе
		Запрос.УстановитьПараметр("МоментДокумента", ДокОбъект.МоментВремени());
	КонецЕсли;

	ТаблицаОстатков = Запрос.Выполнить().Выгрузить();
	СтрокаИндекса = "Номенклатура";
	ТаблицаОстатков.Индексы.Добавить(СтрокаИндекса);

	Для каждого СтрокаТабличнойЧасти ИЗ ДокОбъект.Товары Цикл

		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("Номенклатура", СтрокаТабличнойЧасти.Номенклатура);
		
		МассивСтрок = ТаблицаОстатков.НайтиСтроки(СтруктураПоиска);

		Если МассивСтрок.Количество() = 0 Тогда
			СтрокаТабличнойЧасти.КоличествоУчет = 0;
			СтрокаТабличнойЧасти.СуммаУчет      = 0;
			Продолжить;
		КонецЕсли;

		Если уатОбщегоНазначенияСервер.СуществуетСправочникЕдиницыИзмерения() тогда
			СтрокаТабличнойЧасти.КоличествоУчет = МассивСтрок[0].Количество * МассивСтрок[0].КоэффициентЕдиницыХранения / 
													СтрокаТабличнойЧасти.ЕдиницаИзмерения.Коэффициент;
		Иначе
			СтрокаТабличнойЧасти.КоличествоУчет = МассивСтрок[0].Количество;
		КонецЕсли;
		
		СтрокаТабличнойЧасти.СуммаУчет = МассивСтрок[0].Сумма;
		СтрокаТабличнойЧасти.Цена      = ?(СтрокаТабличнойЧасти.КоличествоУчет = 0, 0,
											  СтрокаТабличнойЧасти.СуммаУчет / СтрокаТабличнойЧасти.КоличествоУчет);
											  
		СтрокаТабличнойЧасти.Сумма     = СтрокаТабличнойЧасти.Цена * СтрокаТабличнойЧасти.Количество;
		
	КонецЦикла;	
	ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
КонецПроцедуры

&НаКлиенте
Процедура ПосчитатьОтклонение()
	Для Каждого ТекСтрока Из Объект.Товары Цикл
		ТекСтрока.Отклонение = ТекСтрока.Количество - ТекСтрока.КоличествоУчет;	
	КонецЦикла;	
КонецПроцедуры

&НаСервере 
Функция ПолучитьТоварыИзВременногоХранилища(ЗначениеВыбора)
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ЗначениеВыбора);
	МассивТоваров = Новый Массив;
	Для Каждого ТекСтрока Из ТаблицаТоваров Цикл
		Структура = Новый Структура;
		Структура.Вставить("Номенклатура",		 ТекСтрока.Номенклатура);
		Структура.Вставить("ЕдиницаИзмерения",	 ТекСтрока.Номенклатура.ЕдиницаХраненияОстатков);
		Структура.Вставить("Количество",		 ТекСтрока.Количество);
		Структура.Вставить("Цена",				 ТекСтрока.Цена);
		МассивТоваров.Добавить(Структура);
	КонецЦикла;
	
	Возврат МассивТоваров;
КонецФункции

&НаКлиенте
Функция ПолучитьПараметрыПодбора(ИмяТаблицы)

	ДатаРасчетов 	 = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	
	ЗаголовокПодбора = НСтр("en='Selection products and services in %1 (%2)';ru='Подбор номенклатуры в %1 (%2)'");
	ПредставлениеТаблицы = НСтр("en='Goods';ru='Товары'");
	ЗаголовокПодбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, Объект.Ссылка, НСтр("en='Goods';ru='Товары'"));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПоказыватьЦены", Истина);
	ПараметрыФормы.Вставить("ЕстьЦена"      , Истина);
	ПараметрыФормы.Вставить("ЕстьКоличество", Истина);
	ПараметрыФормы.Вставить("ДатаРасчетов"  , ДатаРасчетов);
	ПараметрыФормы.Вставить("Валюта"        , мВалютаРегламентированногоУчета);
	ПараметрыФормы.Вставить("Склад"         , Объект.Склад);
	ПараметрыФормы.Вставить("Заголовок"     , ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ВидПодбора"    , ПолучитьВидПодбора(ИмяТаблицы));
	ПараметрыФормы.Вставить("ИмяТаблицы"    , ИмяТаблицы);
	ПараметрыФормы.Вставить("Услуги"        , ИмяТаблицы = "Услуги");
	ПараметрыФормы.Вставить("Организация"   , Объект.Организация);
	ПараметрыФормы.Вставить("ПоказыватьОстатки"  , Истина);
	ПараметрыФормы.Вставить("ПоказыватьСчетУчета", Истина);
	
	Возврат ПараметрыФормы;

КонецФункции

&НаКлиенте
Функция ПолучитьВидПодбора(ИмяТаблицы)

	ВидПодбора = "";
	
	Возврат ВидПодбора;

КонецФункции

&НаКлиенте
Процедура ЗаполнитьПоОстаткамНаСкладеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ <> КодВозвратаДиалога.Да Тогда
        Возврат;
    КонецЕсли;
    
    Объект.Товары.Очистить();		
    
    ЗаполнитьПоОстаткамНаСкладеФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПоОстаткамНаСкладеФрагмент()
	
	ЗаполнитьПоОстаткамНаСкладеСервер(мВалютаРегламентированногоУчета);
	
	ПосчитатьОтклонение();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьУчетныеКоличестваЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ <> КодВозвратаДиалога.Да Тогда
        Возврат;
    КонецЕсли;
    
    Объект.Товары.Очистить();		
    
    ЗаполнитьУчетныеКоличестваФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьУчетныеКоличестваФрагмент()
    
    ЗаполнитьПоОстаткамНаСкладеСервер(мВалютаРегламентированногоУчета, Истина);
    
    ПосчитатьОтклонение();

КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьУчетныеКоличестваИСуммыЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ТекстВопроса = ДополнительныеПараметры.ТекстВопроса;
    
    
    Ответ = РезультатВопроса;
    Если Ответ <> КодВозвратаДиалога.Да Тогда
        Возврат;
    КонецЕсли;
    
    ПерезаполнитьУчетныеКоличестваИСуммыФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьУчетныеКоличестваИСуммыФрагмент()
	
	Перем Ответ, ТекстВопроса, флЗаписать;
	
	флЗаписать = Ложь;
	Если Модифицированность ИЛИ Объект.Ссылка.Пустая() Тогда
		ТекстНСТР = НСтр("en='Before filling, be sure to record your document. Continue?';ru='Перед заполнением следует записать документ. Продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ПерезаполнитьУчетныеКоличестваИСуммыФрагментЗавершение", ЭтотОбъект),
		ТекстНСТР, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да, );
		Возврат;
	КонецЕсли;
	
	ПерезаполнитьУчетныеКоличестваИСуммыФрагментФрагмент(флЗаписать);
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьУчетныеКоличестваИСуммыФрагментЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ <> КодВозвратаДиалога.Да Тогда
        Возврат;
    КонецЕсли;
    флЗаписать = Истина;
    
    ПерезаполнитьУчетныеКоличестваИСуммыФрагментФрагмент(флЗаписать);

КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьУчетныеКоличестваИСуммыФрагментФрагмент(Знач флЗаписать)
	
	ПерезаполнитьУчетныеКоличестваИСуммыСервер(мВалютаРегламентированногоУчета, флЗаписать);
	
	ПосчитатьОтклонение();

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Да Тогда
        Объект.Товары.Очистить();
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимость()
	
	флСкладЯчеистый = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.Склад, "АдресноеХранение");
	Элементы.ТоварыЯчейка.Видимость = флАдресноеХранение И флСкладЯчеистый;
	Элементы.ФормаСоздатьНаОснованииВнутреннееПеремещениеИзвлечение.Видимость = флАдресноеХранение И флСкладЯчеистый;
	Элементы.ФормаСоздатьНаОснованииВнутреннееПеремещениеРазмещение.Видимость = флАдресноеХранение И флСкладЯчеистый;
	Элементы.ФормаПакетноеСписание.Видимость = флАдресноеХранение И флСкладЯчеистый;
		
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНоменклатуруВТЧПоШтрихкоду(Результат, ДопПараметры = Неопределено) Экспорт
	
	Если Результат = Неопределено ИЛИ НЕ ЗначениеЗаполнено(Результат.Объект)
		ИЛИ ТипЗнч(Результат.Объект) <> Тип("СправочникСсылка.Номенклатура") Тогда
		Возврат;
	КонецЕсли;
	Номенклатура = Результат.Объект;
	
	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	// Если найдем - увеличим количество; не найдем - добавим новую строку.
	МассивСтрок = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура", Номенклатура));
	Если МассивСтрок.Количество() = 0 Тогда
		СтрокаТабличнойЧасти = Неопределено;
	Иначе
		СтрокаТабличнойЧасти = МассивСтрок[0];
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		// Нашли, увеличиваем количество в первой найденной строке.
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + 1;
	Иначе
		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти =  Объект.Товары.Добавить();
		СтрокаТабличнойЧасти.Номенклатура = Номенклатура;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(
			СтрокаТабличнойЧасти.Номенклатура, "ЕдиницаХраненияОстатков");
		СтрокаТабличнойЧасти.Количество = 1;
	КонецЕсли;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
		
КонецПроцедуры

#КонецОбласти

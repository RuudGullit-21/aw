
#Область ПеременныеФормы

&НаКлиенте
Перем мКнопкиЗаполненияТЧ;              // Хранит дерево кнопок подменю заполнение ТЧ
&НаКлиенте
Перем мПодменюПечати;                   // Хранит элемент управления подменю печати
&НаКлиенте
Перем мПечатьПоУмолчанию;               // Хранит элемент управления кнопку печать по умолчанию
&НаКлиенте
Перем мДеревоМакетов;                   // Хранит дерево макетов печатных форм
&НаКлиенте
Перем ДанныеСтрокиУслуги; // Хранит данные строки ТЧ Доходы/Расходы перед началом редактирования.

#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	уатЗащищенныеФункцииСервер.уатДокументФормаЭлементаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, Объект, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.УчетОригиналовПервчиныхДокументов
	УчетОригиналовПервичныхДокументов.ПриСозданииНаСервере_ФормаДокумента(ЭтотОбъект, Элементы.ГруппаУчетПервичныхДокументов);
	уатУчетОригиналовПервичныхДокументов.ОтобразитьДатуПоследнегоИзмененияПервичныхДокументов(ЭтотОбъект, Элементы.ГруппаУчетПервичныхДокументов);
	// Конец СтандартныеПодсистемы.УчетОригиналовПервчиныхДокументов
	
	// Ввод на основании ЗаказаНаТС и МЛ
	Если ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.уатЗаказГрузоотправителя")
		ИЛИ ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.уатМаршрутныйЛист")
		ИЛИ (Метаданные.Документы.Найти("уатЗаказПеревозчику_уэ") <> Неопределено 
		И ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.уатЗаказПеревозчику_уэ"))Тогда
		ДокОбъект = РеквизитФормыВЗначение("Объект");
		
		ДанныеЗаполнения = Новый Структура();
		ДанныеЗаполнения.Вставить("флВыбратьКонтрагента", Истина);
		ДанныеЗаполнения.Вставить("Основание", Параметры.Основание);
		ДанныеЗаполнения.Вставить("Расходы", Параметры.Основание.Расходы);
		
		ДокОбъект.Заполнить(ДанныеЗаполнения);
		Объект.ДокументОснование = Параметры.Основание;
		Если ДокОбъект.ДополнительныеСвойства.Свойство("мсвКонтрагенты") Тогда
			
			тзКонтрагенты = ДокОбъект.ДополнительныеСвойства.мсвКонтрагенты;
			мсвКонтрагенты.ЗагрузитьЗначения(уатОбщегоНазначенияСервер.ПреобразоватьТаблицувМассивСтрок(тзКонтрагенты));
			
			тзТаблицаУслуги = ДокОбъект.ДополнительныеСвойства.ТаблицаУслуги;
			ТаблицаУслуги.ЗагрузитьЗначения(уатОбщегоНазначенияСервер.ПреобразоватьТаблицувМассивСтрок(тзТаблицаУслуги));
			
			Возврат;
			
		ИначеЕсли ДокОбъект.ДополнительныеСвойства.Свойство("мсвТаблицаУслуги") Тогда
			// Один контрагент
			мсвТаблицаУслуги         = ДокОбъект.ДополнительныеСвойства.мсвТаблицаУслуги;
			ДокОбъект.ОбработкаЗаполненияИзФормыВыбораКонтрагента(Объект.ДокументОснование, мсвТаблицаУслуги);
			ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
		КонецЕсли;
	КонецЕсли;
		
	Если ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.уатРеестрОплатыШтрафов") Тогда
		ДокОбъект = РеквизитФормыВЗначение("Объект");
		
		ДанныеЗаполнения = Новый Структура();
		ДанныеЗаполнения.Вставить("флВыбратьКонтрагента", Истина);
		ДанныеЗаполнения.Вставить("Основание", Параметры.Основание);
		ДанныеЗаполнения.Вставить("Штрафы",    Параметры.Основание.Штрафы);
		
		ДокОбъект.Заполнить(ДанныеЗаполнения);
		Объект.ДокументОснование = Параметры.Основание;
		Если ДокОбъект.ДополнительныеСвойства.Свойство("мсвКонтрагенты") Тогда
			
			тзКонтрагенты = ДокОбъект.ДополнительныеСвойства.мсвКонтрагенты;
			мсвКонтрагенты.ЗагрузитьЗначения(уатОбщегоНазначенияСервер.ПреобразоватьТаблицувМассивСтрок(тзКонтрагенты));
			
			тзТаблицаУслуги = ДокОбъект.ДополнительныеСвойства.ТаблицаУслуги;
			ТаблицаУслуги.ЗагрузитьЗначения(уатОбщегоНазначенияСервер.ПреобразоватьТаблицувМассивСтрок(тзТаблицаУслуги));
			
			Возврат;
			
		ИначеЕсли ДокОбъект.ДополнительныеСвойства.Свойство("мсвТаблицаУслуги") Тогда
			// Один контрагент
			мсвТаблицаУслуги         = ДокОбъект.ДополнительныеСвойства.мсвТаблицаУслуги;
			ДокОбъект.ОбработкаЗаполненияИзФормыВыбораКонтрагента(Объект.ДокументОснование, мсвТаблицаУслуги);
			ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
		КонецЕсли;
	КонецЕсли;
	
	// Ввод на основании Заявки на ремонт
	Если ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.уатЗаявкаНаРемонт") Тогда   
		
		флРемонтВАвтосервисе = Параметры.Основание.СпособРемонта = Перечисления.уатСпособыРемонта.Автосервис; 
		
		Если Не флРемонтВАвтосервисе Тогда
			СкладПолученияОстатков = Параметры.Основание.Контрагент;
		КонецЕсли;
		
		ХарактеристикиМатериалов = Новый Массив();
		
		ТаблицаМатериалов = Параметры.Основание.Материалы.Выгрузить(); 
		Для Каждого ТекСтрока Из ТаблицаМатериалов Цикл
			СтруктураСтроки = Новый Структура("Номенклатура, ЕдиницаИзмерения, Количество");
			ЗаполнитьЗначенияСвойств(СтруктураСтроки, ТекСтрока);
			ХарактеристикиМатериалов.Добавить(СтруктураСтроки);
		КонецЦикла;
		
		Для Каждого ТекЭлемент Из ХарактеристикиМатериалов Цикл
			НоваяСтрока = ТаблицаМатериалы.Добавить();
			НоваяСтрока.ПоЗаявкеНаРемонт = ТекЭлемент.Количество;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекЭлемент);	
		КонецЦикла;   
		
	КонецЕсли; 
	
	Если Параметры.Свойство("МатериалыИРаботыВыбраны") Тогда 
		
		ВведенПоЗаявкеНаРемонт = Истина;
		Основание = Параметры.ДокументОснование;
		ДокОбъект = РеквизитФормыВЗначение("Объект");
		ДокОбъект.Заполнить(Основание); 
		ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
		
		Если Параметры.Свойство("Материалы") И Параметры.Материалы.Количество() > 0 Тогда
			Для Каждого ТекСтрока Из Параметры.Материалы Цикл 
				Если ТекСтрока.Количество = 0 Тогда
					Продолжить;
				Иначе
					НовСтрока = Объект.Товары.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтрока, ТекСтрока); 
					ТоварыНоменклатураПриИзмененииНаСервере(НовСтрока.НомерСтроки);
					НовСтрока.СтатьяРасходов = уатОбщегоНазначенияСервер.СтатьяРасходовНоменклатуры(НовСтрока.Номенклатура);
				КонецЕсли;
				
			КонецЦикла;
		КонецЕсли; 
		
	КонецЕсли;
	
	// Настройка интерфейса формы для внешнего польователя.
	АвторизованныйКонтрагент = уатЗащищенныеФункцииСервер_проф.АвторизованныйКонтрагент(АвторизованВнешнийПользователь);
	УровеньДоступаКУслугам = уатОбщегоНазначенияСервер.УровеньДоступаКонтрагентаКУслугам(АвторизованныйКонтрагент).РедактированиеСчетовНаОплату;
	Если АвторизованВнешнийПользователь Тогда
		Если НЕ Объект.Ссылка.Пустая()
			И Объект.СозданПеревозчиком
			И уатСогласованиеДокументовСервер.ДокументСогласован(Объект.Ссылка) Тогда
			ТекстПредупреждения = НСтр("ru = 'Для данного документа завершен процесс согласования.
				|Документ открыт в режиме просмотра'");
			ОбщегоНазначения.СообщитьПользователю(ТекстПредупреждения);
			ТолькоПросмотр = Истина;
		ИначеЕсли Не Объект.Ссылка.Пустая() И Не Объект.СозданПеревозчиком Тогда
			ТекстПредупреждения = НСтр("ru = 'Для данного документа не установлен флаг ""Создан перевозчиком"".
				|Документ открыт в режиме просмотра'");
			ОбщегоНазначения.СообщитьПользователю(ТекстПредупреждения);
			ТолькоПросмотр = Истина;
		КонецЕсли;
		Если Объект.Ссылка.Пустая() Тогда
			Объект.СозданПеревозчиком = Истина;
			Объект.Контрагент = АвторизованныйКонтрагент;
			
			Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
				Запрос = Новый Запрос;
				Запрос.Текст = 
				"ВЫБРАТЬ ПЕРВЫЕ 1
				|	ДоговорыКонтрагентов.Организация КАК Организация,
				|	ДоговорыКонтрагентов.Ссылка КАК Договор
				|ИЗ
				|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
				|ГДЕ
				|	ДоговорыКонтрагентов.Владелец = &Контрагент
				|	И ДоговорыКонтрагентов.ВидДоговора = &ВидДоговора";
				Запрос.УстановитьПараметр("ВидДоговора", Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
				Запрос.УстановитьПараметр("Контрагент", АвторизованныйКонтрагент);
				
				РезультатЗапроса = Запрос.Выполнить().Выгрузить();
				
				Если РезультатЗапроса.Количество() <> 0 Тогда
					Объект.Организация = РезультатЗапроса[0].Организация;
					Объект.ДоговорКонтрагента = РезультатЗапроса[0].Договор;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Элементы.Переместить(Элементы.Дата, Элементы.ГруппаВхДок);
		Элементы.Переместить(Элементы.Номер, Элементы.ГруппаВхДок);
		Элементы.Переместить(Элементы.ДатаВходящегоДокумента, Элементы.ДатаНомер);
		Элементы.Переместить(Элементы.НомерВходящегоДокумента, Элементы.ДатаНомер);
		
		Если уатОбщегоНазначенияСервер.АвторизованВнещнийПеревозчик() Тогда
			КомандаСоздатьНаОсновании = Элементы.Найти("ФормаДокументуатПоступлениеТоваровУслугСоздатьНаОсновании");
			Если КомандаСоздатьНаОсновании <> Неопределено Тогда
				КомандаСоздатьНаОсновании.Заголовок = НСтр("ru = 'Реализация услуг'");
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ЗаполнениеШапкиПриСозданииДокумента(Отказ, СтандартнаяОбработка, Параметры);
	
	// уатСогласованиеДокументов
	ИмяДокументаСогласование = "СчетНаОплатуПоставщика";
	уатСогласованиеДокументовСервер.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец уатСогласованиеДокументов

	//ПодключаемоеОборудование
	уатОбщегоНазначения_проф.НастроитьПодключаемоеОборудование(ЭтотОбъект);
	//Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеШапкиПриСозданииДокумента(Отказ, СтандартнаяОбработка, Параметры)
	// Создание из "ФормаВыборКонтрагента"
	Если Параметры.Свойство("Услуги") Тогда
		Объект.ДокументОснование = Параметры.ДокументОснование;
		мсвТаблицаУслуги         = Параметры.Услуги;
		ДокОбъект = РеквизитФормыВЗначение("Объект");
		ДокОбъект.ОбработкаЗаполненияИзФормыВыбораКонтрагента(Объект.ДокументОснование, мсвТаблицаУслуги);
		ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
	КонецЕсли;
		
	// Инициализация реквизитов формы.
	МноговалютныйУчет = ПолучитьФункциональнуюОпцию("уатМноговалютныйУчет");
	
	// Установка реквизитов формы.
	Если НЕ ЗначениеЗаполнено(Объект.Ссылка) Тогда
		Объект.ДатаНач = ?(Объект.ДатаНач = '00010101', НачалоМесяца(ТекущаяДата()), Объект.ДатаНач);
		Объект.ДатаКон = ?(Объект.ДатаКон = '00010101', ТекущаяДата(), Объект.ДатаКон);
		
		Если ЗначениеЗаполнено(Объект.Организация) Тогда
			ПриИзмененииОрганизацииНаСервере(Истина);
		КонецЕсли;
		
	КонецЕсли;
	
	ОрганизацияПередИзменением = Объект.Организация;
	
	мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Контрагент = Объект.Контрагент;
	Если НЕ Объект.Ссылка.Пустая() ИЛИ НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Договор = Объект.ДоговорКонтрагента;
	КонецЕсли;
	ВалютаРасчетов = Объект.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	
	уатОбщегоНазначенияСервер.НастроитьПолеЕдиницыИзмерения(ЭтотОбъект, "Товары");
	уатОбщегоНазначенияСервер.НастроитьПолеКонтактноеЛицо(Элементы.КонтактноеЛицо);
	уатОбщегоНазначенияСервер.НастроитьПолеДоговорКонтрагента(Элементы.ДоговорКонтрагента, "Объект.Организация", "Объект.Контрагент", "СПоставщиком");
	
	// уатУправлениеАвтотранспортом.МодификацияКонфигурации
	уатМодификацияКонфигурацииПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	// Конец уатУправлениеАвтотранспортом.МодификацияКонфигурации
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ) 
	// уатУправлениеАвтотранспортом.МодификацияКонфигурации
	уатМодификацияКонфигурацииКлиентПереопределяемый.ПриОткрытии(ЭтотОбъект, Отказ);
	// Конец уатУправлениеАвтотранспортом.МодификацияКонфигурации
	
	уатЗащищенныеФункцииКлиент.уатДокументФормаЭлементаПриОткрытии(Отказ, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
		
	Если мсвКонтрагенты.Количество() > 1 Тогда
		ПараметрыФормы = Новый Структура("ВидОперации, Ссылка, Контрагенты, Услуги, ДокументОснование",
			0, Объект.Ссылка, мсвКонтрагенты, ТаблицаУслуги, Объект.ДокументОснование);
		ОткрытьФорму("Документ.уатПоступлениеТоваровУслуг.Форма.ФормаВыборКонтрагента", ПараметрыФормы, ЭтотОбъект);
	Иначе
		Если Объект.Ссылка.Пустая() И ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
			уатОбщегоНазначенияКлиент.ПриИзмененииДоговора(ЭтаФорма, Неопределено, Договор);
		КонецЕсли;
	КонецЕсли;
	
	Если ТаблицаМатериалы.Количество() > 0 Тогда 
		ПараметрыОткрытияФормы = Новый Структура("Материалы, РемонтВАвтосервисе, СкладОстатков, Организация, Основание", ТаблицаМатериалы, флРемонтВАвтосервисе, СкладПолученияОстатков, Объект.Организация, Объект.ДокументОснование); 
		Если ВладелецФормы <> Неопределено Тогда
			ОткрытьФорму("Документ.уатЗаявкаНаРемонт.Форма.ФормаЗаполненияМатериалов", ПараметрыОткрытияФормы, ВладелецФормы,,,,,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца); 
		Иначе
			ОткрытьФорму("Документ.уатЗаявкаНаРемонт.Форма.ФормаЗаполненияМатериалов", ПараметрыОткрытияФормы, ЭтотОбъект,,,,,РежимОткрытияОкнаФормы.Независимый);
		КонецЕсли;
		Отказ = Истина;
		Возврат;
	КонецЕсли; 
	
	Если ВведенПоЗаявкеНаРемонт Тогда
		
		Для Каждого ТекСтрока Из Объект.Товары Цикл 
			ЗаполнитьЦенуПоКонтрагенту(ТекСтрока);
		КонецЦикла; 
		
		Для Каждого ТекСтрока Из Объект.Услуги Цикл 
			ЗаполнитьЦенуПоКонтрагенту(ТекСтрока);
		КонецЦикла;
		
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// уатСогласованиеДокументов
	уатСогласованиеДокументовКлиент.ОбновитьСтатусСогласования(ЭтотОбъект);
	// Конец уатСогласованиеДокументов
	
	//ПодключаемоеОборудование
	уатОбщегоНазначенияКлиент.НачатьПодключениеОборудованиеПриОткрытииФормы(ЭтотОбъект);
	//Конец ПодключаемоеОборудование
	
	УстановитьВидимость();
	
	ОбновитьВсегоВТЧТовары();
	ОбновитьВсегоВТЧУслуги();
	ВывестиСуммовыеИтогиДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ИсточникВыбора.ИмяФормы = "Обработка.уатПодборНоменклатуры.Форма.Форма" или ИсточникВыбора.ИмяФормы = "Обработка.ПодборНоменклатуры.Форма.Форма" Тогда
		ОбработкаПодбора(ИсточникВыбора.ИмяТаблицы, ВыбранноеЗначение);
	ИначеЕсли   ИсточникВыбора.ИмяФормы = "Обработка.ПодборТоваровВДокументЗакупки.Форма.Форма" Тогда
		ОбработкаПодбора("Товары", ВыбранноеЗначение);
	КонецЕсли;
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ОбновитьВсегоВТЧТовары();
	ОбновитьВсегоВТЧУслуги();
	ВывестиСуммовыеИтогиДокумента();
	
	УстановитьВидимость();
	
	#Если Клиент Тогда
		Оповестить("Изменен счет на оплату поставщика");
	#КонецЕсли
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// уатСогласованиеДокументов
	уатСогласованиеДокументовКлиент.ПослеЗаписи(ЭтотОбъект);
	// Конец уатСогласованиеДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если Не ВводДоступен() Тогда
		Возврат;
	КонецЕсли;
	
	// ПодключаемоеОборудование
	уатОбщегоНазначенияКлиент.ОбработкаВнешнегоСобытия(Источник, Событие, Данные);
	// Конец ПодключаемоеОборудование
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов	
	УчетОригиналовПервичныхДокументовКлиент.ОбработчикОповещенияФормаДокумента(ИмяСобытия, ЭтотОбъект);
	// Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	
	// уатСогласованиеДокументов
	уатСогласованиеДокументовКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр);
	// Конец уатСогласованиеДокументов
	
	Если ИмяСобытия = "СозданиеДокументаИзФормыВыбораКонтрагента_уатСчетНаОплатуПоставщика"
		И мсвКонтрагенты.Количество() > 0 И Объект.Ссылка.Пустая() Тогда
		
		Параметр.Вставить("Основание",           Параметр.ДокументОснование);
		Параметр.Вставить("ЗначениеКопирования", Неопределено);
		Параметр.Вставить("ЗначенияЗаполнения",  Новый Структура);
		ЗаполнениеШапкиПриСозданииДокумента(Ложь, Истина, Параметр);
		
		Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
			уатОбщегоНазначенияКлиент.ПриИзмененииДоговора(ЭтаФорма, Неопределено, Договор);
		КонецЕсли;
		
		// Установить видимость реквизитов и заголовков колонок.
		УстановитьВидимость();
		
		ОбновитьВсегоВТЧТовары();
		ОбновитьВсегоВТЧУслуги();
		ВывестиСуммовыеИтогиДокумента();
		
		мсвКонтрагенты.Очистить();
	КонецЕсли;
	
	// ПодключаемоеОборудование
	Если Источник = "ПодключаемоеОборудование" И ВводДоступен() Тогда
		Оповещ = Новый ОписаниеОповещения("ДобавитьНоменклатуруВТЧПоШтрихкоду", ЭтотОбъект);
		уатОбщегоНазначенияКлиент.ОбработатьСобытиеПодключаемогоОборудования(ИмяСобытия, Параметр, Источник,
			Новый Структура("Оповещение", Оповещ));
	КонецЕсли;
	// Конец ПодключаемоеОборудование

КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	Если Объект.СозданПеревозчиком
		И Не ЗначениеЗаполнено(Объект.ДатаВходящегоДокумента) И Не ЗначениеЗаполнено(Объект.НомерВходящегоДокумента) Тогда
		Объект.ДатаВходящегоДокумента = Объект.Дата;
		Объект.НомерВходящегоДокумента = Объект.Номер;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если флВопросЗакрытиеФормы Тогда
		Отказ = Истина;
		Оповещ = Новый ОписаниеОповещения("ПередЗакрытиемВопрос", ЭтотОбъект);
		ПоказатьВопрос(Оповещ, "При проверке корректности заполнения документа возникли предупреждения!
			|Продолжить закрытие формы?", РежимДиалогаВопрос.ОКОтмена);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемВопрос(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.ОК Тогда
		флВопросЗакрытиеФормы = Ложь;
		Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

// уатУправлениеАвтотранспортом.МодификацияКонфигурации
&НаКлиенте
Процедура Подключаемый_ПолеФормыНажатие(Элемент, СтандартнаяОбработка)
	
	уатМодификацияКонфигурацииКлиентПереопределяемый.ПолеФормыНажатие(ЭтотОбъект, Элемент, СтандартнаяОбработка);
	
КонецПроцедуры
// Конец уатУправлениеАвтотранспортом.МодификацияКонфигурации

&НаКлиенте
Процедура Подключаемый_ДекорацияСостояниеОригиналаНажатие()

	// СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов
	УчетОригиналовПервичныхДокументовКлиент.ОткрытьМенюВыбораСостояния(ЭтотОбъект, Элементы.ДекорацияСостояниеОригинала);
	//Конец СтандартныеПодсистемы.УчетОригиналовПервичныхДокументов

КонецПроцедуры

// Процедура - Дата при изменении
//
// Параметры:
//  Элемент	 - Элемент формы
//
&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	ЕстьВалютаДокумента    		= Объект.Свойство("ВалютаДокумента");
	ЕстьДоговорКонтрагента 		= Объект.Свойство("ДоговорКонтрагента");
	ЕстьКурсДокумента 			= Объект.Свойство("КурсДокумента");
	ЕстьКратностьДокумента 		= Объект.Свойство("КратностьДокумента");
	ЕстьКурсВзаиморасчетов 		= Объект.Свойство("КурсВзаиморасчетов");
	ЕстьКратностьВзаиморасчетов = Объект.Свойство("КратностьВзаиморасчетов");
	
	ПроверкаПоВалютеВзаиморасчетов = Ложь;
	ФлагИзмененияКурса             = Ложь;
	
	// В некоторых документах нет валюты документа и договора.
	Если ЕстьВалютаДокумента Тогда
		Если ЕстьДоговорКонтрагента Тогда
			Договор = Объект.ДоговорКонтрагента;
			
			Если НЕ уатОбщегоНазначения.уатЗначениеНеЗаполнено(Договор) Тогда
				Валюта = уатОбщегоНазначенияТиповыеСервер.ПолучитьВалютуВзаиморасчетовИзДоговора(Договор);
				ПроверкаПоВалютеВзаиморасчетов = Истина;
			Иначе
				Возврат;
			КонецЕсли;
		Иначе
			Валюта = Объект.ВалютаДокумента;
		КонецЕсли;
	Иначе
		Возврат;
	КонецЕсли;
	СтруктураНовогоКурсаВалюты  = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(Валюта, Объект.Дата);
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("НовыйКурс", СтруктураНовогоКурсаВалюты.Курс);
	ДопПараметры.Вставить("НоваяКратность", СтруктураНовогоКурсаВалюты.Кратность);
	ДопПараметры.Вставить("ЕстьКурсДокумента", ЕстьКурсДокумента);
	ДопПараметры.Вставить("ЕстьКратностьДокумента", ЕстьКратностьДокумента);
	ДопПараметры.Вставить("ЕстьКурсВзаиморасчетов", ЕстьКурсВзаиморасчетов);
	ДопПараметры.Вставить("ЕстьКратностьВзаиморасчетов", ЕстьКратностьВзаиморасчетов);
	
	// В некоторых документах курс и кратность документа отсутствуют
	Если ПроверкаПоВалютеВзаиморасчетов И ДопПараметры.ЕстьКурсВзаиморасчетов И ДопПараметры.ЕстьКратностьВзаиморасчетов Тогда
		ДопПараметры.Вставить("СтарыйКурс", Объект.КурсВзаиморасчетов);
		ДопПараметры.Вставить("СтараяКратность", Объект.КратностьВзаиморасчетов);
		
	ИначеЕсли НЕ ПроверкаПоВалютеВзаиморасчетов И ДопПараметры.ЕстьКурсДокумента И ДопПараметры.ЕстьКратностьДокумента Тогда
		ДопПараметры.Вставить("СтарыйКурс", Объект.КурсДокумента);
		ДопПараметры.Вставить("СтараяКратность", Объект.КратностьДокумента);
		
	Иначе
		Возврат;
		
	КонецЕсли;
	
	// Если курс и кратность не изменились, то выход.
	Если ДопПараметры.НовыйКурс = ДопПараметры.СтарыйКурс И ДопПараметры.НоваяКратность = ДопПараметры.СтараяКратность Тогда
		Возврат;
	КонецЕсли;
	
	ТекстВалюты     = ?(ПроверкаПоВалютеВзаиморасчетов, НСтр("en='mutual settlements';ru='взаиморасчетов'") + " ", НСтр("en='document';ru='документа'") + " ");
	ТекстНовыйКурс  = СокрЛП(ПолучитьИнформациюКурсаВалютыСтрокой(Валюта, ДопПараметры.НовыйКурс,  ДопПараметры.НоваяКратность,  мВалютаРегламентированногоУчета));
	ТекстСтарыйКурс = СокрЛП(ПолучитьИнформациюКурсаВалютыСтрокой(Валюта, ДопПараметры.СтарыйКурс, ДопПараметры.СтараяКратность, мВалютаРегламентированногоУчета));
	ТекстНСТР       = СтрШаблон(НСтр("en='On date of document currency %1 %2 was asked a different course.';ru='На дату документа у валюты %1%2 был задан другой курс.'"), ТекстВалюты, ТекстСтарыйКурс) +
		Символы.ПС + СтрШаблон(НСтр("en='Set course %1%2 in accordance with the exchange rate?';ru='Установить курс %1%2 в соответствии с курсом валюты?'"), ТекстВалюты, ТекстНовыйКурс);
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ОбработкаОповещенияПриИзмененииДаты", ЭтотОбъект, ДопПараметры);
	ПоказатьВопрос(ОписаниеОповещения, ТекстНСТР, РежимДиалогаВопрос.ДаНет);

КонецПроцедуры

// Функция возвращает представление курса
//
// Параметры: 
//  Валюта                         - Валюта, курс которой необходимо отобразить
//  Курс                           - курс, которой необходимо отобразить
//  Кратность                      - кратность, которую необходимо отобразить
//  ВалютаРегламентированногоУчета - валюта регламентированного учета
//
// Возвращаемое значение:
//  Строка с данными о курсе и кратности валюты
//
&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьИнформациюКурсаВалютыСтрокой(Валюта, Курс, Кратность, ВалютаРегламентированногоУчета)
	
	Если НЕ ЗначениеЗаполнено(Валюта) Тогда
		Возврат "";
	Иначе
		Возврат " (" 
		+ Кратность + " "
		+ СокрЛП(Валюта)
		+ " = "
		+ Курс + " " 
		+ СокрЛП(ВалютаРегламентированногоУчета)
		+ ")";
	КонецЕсли;
	
КонецФункции // ПолучитьИнформациюКурсаВалютыСтрокой()

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если Объект.Организация = ОрганизацияПередИзменением Тогда
		Возврат;
	КонецЕсли;
	ОрганизацияПередИзменением = Объект.Организация;
	
	УчитыватьНДСПередИзменением = Объект.УчитыватьНДС;
	СуммаВключаетНДСПередИзменением = Объект.СуммаВключаетНДС;
	
	// Выполняем общие действия для всех документов при изменении Организация.
	ПриИзмененииОрганизацииНаСервере();
	
	Объект.УчитыватьНДС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.УчитыватьНДС"));
	Объект.СуммаВключаетНДС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.СуммаВключаетНДС"));
		
	Если Объект.УчитыватьНДС <> УчитыватьНДСПередИзменением ИЛИ Объект.СуммаВключаетНДС <> СуммаВключаетНДСПередИзменением Тогда	
		ПересчитатьСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС("Товары");
		ПересчитатьСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС("Услуги");
		РассчитатьСуммуДокумента();
		ОбновитьВсегоВТЧТовары();
		ОбновитьВсегоВТЧУслуги();
	КонецЕсли;
	
	УстановитьВидимость();
	
	// уатСогласованиеДокументов
	уатСогласованиеДокументовКлиент.ОрганизацияПодразделениеПриИзменении(ЭтотОбъект);
	// Конец уатСогласованиеДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПередИзменением = Контрагент;
	Контрагент = Объект.Контрагент;
	
	Если КонтрагентПередИзменением <> Объект.Контрагент Тогда
		ПриИзмененииКонтрагентаНаСервере();
		Для Каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл
			ЗаполнитьЦенуПоКонтрагенту(СтрокаТабличнойЧасти, Истина);
		КонецЦикла;
		Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
			ЗаполнитьЦенуПоКонтрагенту(СтрокаТабличнойЧасти);
		КонецЦикла;
	КонецЕсли;
	
	// Могли поменять договор.
	ДоговорПередИзменением = Договор;
	//Договор = Объект.ДоговорКонтрагента;
	
	уатОбщегоНазначенияКлиент.ПриИзмененииДоговора(ЭтаФорма, Неопределено, ДоговорПередИзменением);
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
    ОбновитьВсегоВТЧТовары();
    ОбновитьВсегоВТЧУслуги();
    ВывестиСуммовыеИтогиДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент) 
	Оповещ = Новый ОписаниеОповещения("ДоговорКонтрагентаПриИзмененииЗавершение", ЭтотОбъект);
	уатОбщегоНазначенияКлиент.ДоговорКонтрагентаПриИзменении(ЭтаФорма, Оповещ);
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзмененииЗавершение(Результат, ДопПараметры) Экспорт
	уатОбщегоНазначенияКлиент.ПриИзмененииДоговора(ЭтаФорма, Неопределено, Договор);
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	мВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком");
	
	уатОбщегоНазначенияТиповыеКлиент.уатНачалоВыбораЗначенияДоговораКонтрагента(Объект, ЭтотОбъект, Элемент, Объект.Контрагент, 
	Объект.ДоговорКонтрагента, мВидДоговора, СтандартнаяОбработка);
КонецПроцедуры  

&НаКлиенте
Процедура ДоговорКонтрагентаСоздание(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВидДоговораДоступныеЗначения = Новый Массив;
	
	мВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком");
	ВидДоговораДоступныеЗначения.Добавить(мВидДоговора);
	
	ПараметрыФормы = Новый Структура();   
	ПараметрыФормы.Вставить("Владелец", Объект.Контрагент);
	ПараметрыФормы.Вставить("ВидДоговораДоступныеЗначения", ВидДоговораДоступныеЗначения);
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
КонецПроцедуры

// Вызывается из процедуры уатОбщегоНазначенияКлиент.ПриИзмененииДоговора()
//
&НаКлиенте
Процедура ПриИзмененииДоговораЛокальныеОбработчики() Экспорт
	РассчитатьСуммуДокумента();
	ОбновитьВсегоВТЧТовары();
	ОбновитьВсегоВТЧУслуги();
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура КонтактноеЛицоПриИзменении(Элемент)
	
	ПриИзмененииКЛНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтактноеЛицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	уатОбщегоНазначенияТиповыеКлиент.уатНачалоВыбораКонтактногоЛицаКонтрагента(Элемент, СтандартнаяОбработка, Объект.Контрагент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПанельОсновнаяПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	ОбновитьВсегоВТЧТовары();
	ОбновитьВсегоВТЧУслуги();
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

&НаКлиенте
Процедура ТребуетСогласованияПриИзменении(Элемент)
	
	// уатСогласованиеДокументов
	уатСогласованиеДокументовКлиент.ТребуетСогласованияПриИзменении(ЭтотОбъект);
	// Конец уатСогласованиеДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСогласованНажатие(Элемент)
	
	// уатСогласованиеДокументов
	уатСогласованиеДокументовКлиент.НадписьСогласованНажатие(ЭтотОбъект);
	// Конец уатСогласованиеДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура СозданПеревозчикомПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыТовары

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И НЕ Копирование Тогда
		Если Объект.УчитыватьНДС Тогда
			Элементы.Товары.ТекущиеДанные.СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
				ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнаяСтавкаНДС");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	РассчитатьСуммуДокумента();
	ОбновитьВсегоВТЧТовары();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПослеУдаления(Элемент)
	РассчитатьСуммуДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент) 
	
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	ТоварыНоменклатураПриИзмененииНаСервере(СтрокаТабличнойЧасти.НомерСтроки);
	ЗаполнитьЦенуПоКонтрагенту(СтрокаТабличнойЧасти);
	СтрокаТабличнойЧасти.СтатьяРасходов = уатОбщегоНазначенияСервер.СтатьяРасходовНоменклатуры(СтрокаТабличнойЧасти.Номенклатура);
	ОбновитьВсегоВТЧТовары();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатОбщегоНазначенияКлиент.ТЧТоварыЕдиницаИзмеренияНачалоВыбора(
		Элементы.Товары.ТекущиеДанные.Номенклатура, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент) 
	ТекСтрока = Элементы.Товары.ТекущиеДанные;
	РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент) 
	ТекСтрока = Элементы.Товары.ТекущиеДанные;
	РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент) 
	ТекСтрока = Элементы.Товары.ТекущиеДанные;
	ТекСтрока.Цена = ?(ТекСтрока.Количество = 0, 0, ТекСтрока.Сумма / ТекСтрока.Количество);
	РассчитатьСуммуНДС(ТекСтрока);
	
	ОбновитьВсегоВТЧТовары();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент) 
	ОбновитьВсегоВТЧТовары();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент) 
	ТекСтрока = Элементы.Товары.ТекущиеДанные;
	РассчитатьСуммуНДС(ТекСтрока);
	ОбновитьВсегоВТЧТовары();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка) // уточнить
	
	// Услуг в этом документе быть не должно.
	Если ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		Если уатОбщегоНазначения.ВидНоменклатурыУслуга(ВыбранноеЗначение) Тогда
			СтандартнаяОбработка = Ложь;  
			ПоказатьПредупреждение(Неопределено, НСтр("en='There should not be services in this document.';ru='Услуг в этом документе быть не должно.'")); 
		КонецЕсли; 
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыУслуги

&НаКлиенте
Процедура УслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекСтрока = Элементы.Услуги.ТекущиеДанные;
	
	Если НоваяСтрока И НЕ Копирование Тогда
		Если Объект.УчитыватьНДС Тогда
			ТекСтрока.СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
				ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнаяСтавкаНДС");
		КонецЕсли;
			
		Если МноговалютныйУчет Тогда
			ТекСтрока.Валюта = Объект.ВалютаДокумента;
			ТекСтрока.КроссКурс = 1;
		КонецЕсли;
	КонецЕсли;
	
	ДанныеСтрокиУслуги = Новый Структура("Валюта", ТекСтрока.Валюта);
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОбновитьВсегоВТЧУслуги();
	РассчитатьСуммуДокумента();
КонецПроцедуры

&НаКлиенте
Процедура УслугиПослеУдаления(Элемент)
	РассчитатьСуммуДокумента();
КонецПроцедуры

&НаКлиенте
Процедура УслугиНоменклатураПриИзменении(Элемент) 
	ТекСтрока = Элементы.Услуги.ТекущиеДанные;
	ТекСтрока.Содержание = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрока.Номенклатура, "НаименованиеПолное");
	ЗаполнитьЦенуПоКонтрагенту(ТекСтрока, Истина);
	ТекСтрока.СтатьяРасходов = уатОбщегоНазначенияСервер.СтатьяРасходовНоменклатуры(ТекСтрока.Номенклатура);
КонецПроцедуры

&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент) 
	ТекСтрока = Элементы.Услуги.ТекущиеДанные;
	РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрока, Истина);
КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент) 
	ТекСтрока = Элементы.Услуги.ТекущиеДанные;
	Если МноговалютныйУчет И ТекСтрока.ЦенаВалютная = 0 И ТекСтрока.КроссКурс <> 0 Тогда
		ТекСтрока.ЦенаВалютная = ТекСтрока.Цена / ТекСтрока.КроссКурс;
	КонецЕсли;
	РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрока, Истина);
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаПриИзменении(Элемент) 
	ТекСтрока = Элементы.Услуги.ТекущиеДанные;
	ТекСтрока.Цена = ?(ТекСтрока.Количество = 0, 0, ТекСтрока.Сумма / ТекСтрока.Количество);
	Если МноговалютныйУчет И ТекСтрока.ЦенаВалютная = 0 И ТекСтрока.КроссКурс <> 0 Тогда
		ТекСтрока.СуммаВалютная = ТекСтрока.Сумма / ТекСтрока.КроссКурс;
		ТекСтрока.ЦенаВалютная = ?(ТекСтрока.Количество = 0, 0, ТекСтрока.СуммаВалютная / ТекСтрока.Количество);
	КонецЕсли;
	РассчитатьСуммуНДС(ТекСтрока, Истина);
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаНДСПриИзменении(Элемент) 
	ТекСтрока = Элементы.Услуги.ТекущиеДанные;
	ОбновитьВсегоВстрокеТЧ(ТекСтрока);
КонецПроцедуры

&НаКлиенте
Процедура УслугиСтавкаНДСПриИзменении(Элемент) 
	ТекСтрока = Элементы.Услуги.ТекущиеДанные;
	РассчитатьСуммуНДС(ТекСтрока, Истина);
КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаВалютнаяПриИзменении(Элемент)
	ТекСтрока = Элементы.Услуги.ТекущиеДанные;
	ТекСтрока.Цена = ТекСтрока.ЦенаВалютная * ТекСтрока.КроссКурс;
	РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрока, Истина);
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаВалютнаяПриИзменении(Элемент)
	ТекСтрока = Элементы.Услуги.ТекущиеДанные;
	ТекСтрока.ЦенаВалютная = ?(ТекСтрока.Количество = 0, 0, ТекСтрока.СуммаВалютная / ТекСтрока.Количество);
	ТекСтрока.Цена = ТекСтрока.ЦенаВалютная * ТекСтрока.КроссКурс;
	РассчитатьСуммуНДС(ТекСтрока, Истина);
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаНДСвалютнаяПриИзменении(Элемент)
	ТекСтрока = Элементы.Услуги.ТекущиеДанные;
	ОбновитьВсегоВстрокеТЧ(ТекСтрока);
КонецПроцедуры

&НаКлиенте
Процедура УслугиВалютаПриИзменении(Элемент)
	ТекСтрока = Элементы.Услуги.ТекущиеДанные;
	
	Если ТекСтрока.Валюта = ДанныеСтрокиУслуги.Валюта Тогда
		Возврат;
	КонецЕсли;
	
	ТекСтрока.КроссКурс = ПолучитьКроссКурс(ТекСтрока.Валюта, Объект.ВалютаДокумента, Объект.ДатаКурса);
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ТекСтрока", ТекСтрока);
		
	Если ТекСтрока.Цена = 0 Тогда
		УслугиПриИзмененииВалютыЗавершение(КодВозвратаДиалога.Нет, ДопПараметры);
	Иначе
		Оповещ = Новый ОписаниеОповещения("УслугиПриИзмененииВалютыЗавершение", ЭтотОбъект, ДопПараметры);
		ПоказатьВопрос(Оповещ, "Изменилась валюта строки. Пересчитать цену и сумму по курсу?", РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриИзмененииВалютыЗавершение(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда //пересчет сумм в строке по курсу
		СтруктураКурсаПред = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ДанныеСтрокиУслуги.Валюта, Объект.ДатаКурса);
		СтруктураКурса = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ДопПараметры.ТекСтрока.Валюта, Объект.ДатаКурса);
		
		ДопПараметры.ТекСтрока.ЦенаВалютная = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ДопПараметры.ТекСтрока.ЦенаВалютная,
			ДанныеСтрокиУслуги.Валюта,    ДопПараметры.ТекСтрока.Валюта,
			СтруктураКурсаПред.Курс,      СтруктураКурса.Курс,
			СтруктураКурсаПред.Кратность, СтруктураКурса.Кратность);
	КонецЕсли;
	
	ДопПараметры.ТекСтрока.Цена = ДопПараметры.ТекСтрока.ЦенаВалютная * ДопПараметры.ТекСтрока.КроссКурс;
	РассчитатьСуммуВСтрокеТабличнойЧасти(ДопПараметры.ТекСтрока, Истина);
		
	РассчитатьСуммуНДС(ДопПараметры.ТекСтрока);
	ОбновитьВсегоВстрокеТЧ(ДопПараметры.ТекСтрока);
		
	ВывестиСуммовыеИтогиДокумента();
	
	ДанныеСтрокиУслуги = Новый Структура("Валюта", ДопПараметры.ТекСтрока.Валюта);
	Модифицированность = Истина;	
КонецПроцедуры

&НаКлиенте
Процедура УслугиКроссКурсПриИзменении(Элемент)
	ТекСтрока = Элементы.Услуги.ТекущиеДанные;
	ПриИзменииКроссКурсаВСтроке(ТекСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ПриИзменииКроссКурсаВСтроке(ТекСтрока, ПересчетИтогов = Истина)
	ТекСтрока.Сумма = ТекСтрока.СуммаВалютная * ТекСтрока.КроссКурс;
	УслугиСуммаПриИзменении(Неопределено);
	ОбновитьВсегоВстрокеТЧ(ТекСтрока);
	
	Если ПересчетИтогов = Истина Тогда
		ОбновитьВсегоВТЧУслуги();
		ВывестиСуммовыеИтогиДокумента();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УслугиЗаказНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекСтрока = Элементы.Услуги.ТекущиеДанные;
	ПараметрыФормы = Новый Структура("ЗаказНаТС, Перевозчик", ТекСтрока.ЗаказНаТС, Контрагент);
	ОткрытьФорму("Документ.уатЗаказПеревозчику_уэ.ФормаВыбора", ПараметрыФормы, Элемент);
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// уатУправлениеАвтотранспортом.МодификацияКонфигурации
&НаКлиенте
Процедура Подключаемый_уатВыполнитьКоманду(Команда)
	
	уатМодификацияКонфигурацииКлиентПереопределяемый.ВыполнитьПодключаемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры
// Конец уатУправлениеАвтотранспортом.МодификацияКонфигурации

&НаКлиенте
Процедура РедактироватьЦеныИВалюту(Команда)
	
	ОбработатьИзмененияПоКнопкеЦеныИВалюты(Новый ОписаниеОповещения("РедактироватьЦеныИВалютуЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура Подбор(Команда)
	
	ПараметрыПодбора = ПолучитьПараметрыПодбора("Товары");
	Если ПараметрыПодбора <> Неопределено Тогда
		уатОбщегоНазначенияТиповыеКлиент.уатОткрытьПодборНоменклатуры(ЭтотОбъект,ПараметрыПодбора,УникальныйИдентификатор);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Очистить(Команда)
	Если Объект.Услуги.Количество() Тогда
		ТекстНСТР = НСтр("en='The list of services is not empty! Clear?';ru='Список услуг не пустой! Очистить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ОчиститьЗавершение", ЭтотОбъект), ТекстНСТР,
			РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет, НСтр("en='Clean the table';ru='Очистка таблицы'"));
        Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Объект.Услуги.Очистить();
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаПериод(Команда)
	
	Если Объект.Услуги.Количество() > 0 Тогда
		ТекстНСТР = НСтр("en='Before filling out the document table is cleared. Do you want to continue?';ru='Перед заполнением таблица документа будет очищена. Продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьЗаПериодЗавершение", ЭтотОбъект), ТекстНСТР, РежимДиалогаВопрос.ДаНет);
        Возврат;
	КонецЕсли;
	
	ЗаполнитьЗаПериодФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаПериодЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        Возврат;
    Иначе
        Объект.Услуги.Очистить();
		Модифицированность = Истина;
    КонецЕсли;
    
    ЗаполнитьЗаПериодФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаПериодФрагмент()
    
    ПараметрыФормы = Новый Структура("НачалоПериода, КонецПериода, СсылкаОснование", Объект.ДатаНач, Объект.ДатаКон, Объект.Ссылка);
    ОткрытьФорму("ОбщаяФорма.уатЗаполнениеПоУслугам", ПараметрыФормы, ЭтотОбъект,,,, Новый ОписаниеОповещения("ЗаполнитьЗаПериодФрагментЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗаПериодФрагментЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	ВалютаВзаиморасчетов = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.ДоговорКонтрагента, "ВалютаВзаиморасчетов");
	ВалютаВзаиморасчетовКурсКратность = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ВалютаВзаиморасчетов, Объект.Дата);
	
	КэшКурсов = Новый Соответствие;
	КэшКурсов.Вставить(Объект.ВалютаДокумента, Новый Структура("Курс, Кратность", Объект.КурсВзаиморасчетов, Объект.КратностьВзаиморасчетов));
	
	мсвУслуги = Результат;
	Если ТипЗнч(мсвУслуги) = Тип("Массив") И мсвУслуги.Количество() > 0 Тогда
		Для Каждого СтрокаУслуг Из мсвУслуги Цикл
			НоваяСтрока = Объект.Услуги.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаУслуг,, "Цена, Сумма");
			НоваяСтрока.ЗаказНаТС = СтрокаУслуг.Заказ;
			НоваяСтрока.Заказ = СтрокаУслуг.ЗаказПеревозчику;
			
			Если Объект.УчитыватьНДС И Объект.СуммаВключаетНДС Тогда
				НоваяСтрока.Сумма = СтрокаУслуг.Сумма;
				НоваяСтрока.Цена = СтрокаУслуг.Цена;
			Иначе
				НоваяСтрока.Сумма = СтрокаУслуг.Сумма - СтрокаУслуг.СуммаНДС;
				НоваяСтрока.Цена = ?(СтрокаУслуг.Количество = 0, 0, НоваяСтрока.Сумма / СтрокаУслуг.Количество);
			КонецЕсли;
			
			Если НЕ Объект.УчитыватьНДС Тогда
				НоваяСтрока.СтавкаНДС = Неопределено;
				НоваяСтрока.СуммаНДС  = 0;
			КонецЕсли;
			
			Если Объект.УчитыватьНДС И НЕ ЗначениеЗаполнено(НоваяСтрока.СтавкаНДС)
				И ЗначениеЗаполнено(НоваяСтрока.Номенклатура) Тогда
				НоваяСтрока.СтавкаНДС = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(
										НоваяСтрока.Номенклатура, "СтавкаНДС");
				РассчитатьСуммуНДС(НоваяСтрока, Истина);
			КонецЕсли;
			
			НоваяСтрока.СтатьяРасходов = уатОбщегоНазначенияСервер.СтатьяРасходовНоменклатуры(НоваяСтрока.Номенклатура);
			
			Если МноговалютныйУчет Тогда
				НоваяСтрока.Валюта = СтрокаУслуг.Валюта;
				НоваяСтрока.КроссКурс = ПолучитьКроссКурс(СтрокаУслуг.Валюта, Объект.ВалютаДокумента, Объект.ДатаКурса, КэшКурсов);
				НоваяСтрока.ЦенаВалютная     = НоваяСтрока.Цена;
				НоваяСтрока.СуммаВалютная    = НоваяСтрока.Сумма;
				НоваяСтрока.СуммаНДСВалютная = НоваяСтрока.СуммаНДС;
				
				// перевод невалютных колонок в валюту документа из валюты заказа
				Если НоваяСтрока.Валюта <> Объект.ВалютаДокумента Тогда
					НоваяСтрока.Цена = НоваяСтрока.ЦенаВалютная * НоваяСтрока.КроссКурс;
					РассчитатьСуммуВСтрокеТабличнойЧасти(НоваяСтрока, Истина, Ложь);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Модифицированность = Истина;
	КонецЕсли;

	РассчитатьСуммуДокумента();
	ОбновитьВсегоВТЧУслуги();
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаНастройкаПериода(Команда)
	
	ПроизвольныйПериод               = Новый СтандартныйПериод;
	ПроизвольныйПериод.Вариант       = ВариантСтандартногоПериода.ПроизвольныйПериод;
	ПроизвольныйПериод.ДатаНачала    = Объект.ДатаНач;
	ПроизвольныйПериод.ДатаОкончания = Объект.ДатаКон;

	ДиалогВыбораПериода        = Новый ДиалогРедактированияСтандартногоПериода();
	ДиалогВыбораПериода.Период = ПроизвольныйПериод;
	
	ДиалогВыбораПериода.Показать(Новый ОписаниеОповещения("КнопкаНастройкаПериодаЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаНастройкаПериодаЗавершение(Период, ДополнительныеПараметры) Экспорт
	
	Если Не Период = Неопределено Тогда
	    Объект.ДатаНач = Период.ДатаНачала;
	    Объект.ДатаКон = Период.ДатаОкончания;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаВводаНаОсновании(Команда)
	ОткрытьФорму("ОбщаяФорма.уатНастройкиВводаНаОсновании",, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьКроссКурсВТЧ(Команда)
	мсвВалюты = Новый Массив;
	Для Каждого ТекСтрока Из Объект.Услуги Цикл
		Если НЕ ЗначениеЗаполнено(ТекСтрока.Валюта) Тогда
			Продолжить;
		КонецЕсли;
		
		Если мсвВалюты.Найти(ТекСтрока.Валюта) = Неопределено Тогда
			мсвВалюты.Добавить(ТекСтрока.Валюта);
		КонецЕсли;
	КонецЦикла;
	
	Если мсвВалюты.Количество() = 0 Тогда
		уатОбщегоНазначенияТиповые.СообщитьОбОшибке("Выделенные строки не содержат ни одной валюты!
			|Операция допустима только для строк с указанными валютами.",,, СтатусСообщения.Внимание);
		Возврат;
	КонецЕсли;
	
	Если мсвВалюты.Количество() > 1 Тогда
		Оповещ = Новый ОписаниеОповещения("ИзменитьКроссКурсВТЧВыборВалюты", ЭтотОбъект);
		
		СписВалюты = Новый СписокЗначений;
		СписВалюты.ЗагрузитьЗначения(мсвВалюты);
		СписВалюты.ПоказатьВыборЭлемента(Оповещ, "Строки с выбранной валютой будут пересчитаны", СписВалюты);
		Возврат;
	КонецЕсли;
	
	ИзменитьКроссКурсВТЧВводКроссКурса(мсвВалюты[0]);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьКроссКурсВТЧВыборВалюты(Результат, ДопПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		ИзменитьКроссКурсВТЧВводКроссКурса(Результат.Значение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьКроссКурсВТЧВводКроссКурса(Валюта)
	ДопПараметры = Новый Структура("Валюта", Валюта);
	Оповещ = Новый ОписаниеОповещения("ИзменитьКроссКурсВТЧВводКроссКурсаЗавершение", ЭтотОбъект, ДопПараметры);
	ПоказатьВводЧисла(Оповещ, , "Укажите новое значение кросс-курса", 10, 4);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьКроссКурсВТЧВводКроссКурсаЗавершение(Результат, ДопПараметры) Экспорт
	Если НЕ ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	мсвСтрок = Объект.Услуги.НайтиСтроки(Новый Структура("Валюта", ДопПараметры.Валюта));
	Для Каждого ТекСтрока Из мсвСтрок Цикл
		ТекСтрока.КроссКурс = Результат;
		
		ТекСтрока.Цена = ТекСтрока.ЦенаВалютная * ТекСтрока.КроссКурс;
		РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрока, Истина, Ложь);
		РассчитатьСуммуНДС(ТекСтрока, Истина);
	КонецЦикла;
	
	РассчитатьСуммуДокумента();
	ОбновитьВсегоВТЧУслуги();
	ВывестиСуммовыеИтогиДокумента();
	
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкоду(Команда)
	Оповещ = Новый ОписаниеОповещения("ПоискПоШтрихкодуЗавершение", ЭтотОбъект);
	ПоказатьВводЗначения(Оповещ, "", "Введите штрихкод номенклатуры", Тип("Строка"));
КонецПроцедуры

&НаКлиенте
Процедура ПоискПоШтрихкодуЗавершение(Результат, ДопПараметры) Экспорт
	Если ЗначениеЗаполнено(Результат) Тогда
		ТекНоменклатура = уатЗащищенныеФункцииСервер_проф.ПолучитьОбъектПоШтрихкоду(Результат);
		ДобавитьНоменклатуруВТЧПоШтрихкоду(Новый Структура("Штрихкод, Объект", Результат, ТекНоменклатура));
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// Производит заполнение документа переданными из формы подбора данными.
//
// Параметры:
//  ТабличнаяЧасть    - табличная часть, в которую надо добавлять подобранную позицию номенклатуры;
//  ЗначениеВыбора    - структура, содержащая параметры подбора.
//
&НаКлиенте
Процедура ОбработкаПодбора(ИмяТабличнойЧасти, ЗначениеВыбора)
	
	Если ЗначениеВыбора.Свойство("АдресПодобраннойНоменклатурыВХранилище") Тогда
		МассивТоваров = ПолучитьТоварыИзВременногоХранилища(ЗначениеВыбора.АдресПодобраннойНоменклатурыВХранилище);
	Иначе
		МассивТоваров = ПолучитьТоварыИзВременногоХранилища(ЗначениеВыбора.АдресТоваровВХранилище);
	КонецЕсли;
	
	Для Каждого ТекСтрока из МассивТоваров Цикл
		// Ищем выбранную позицию в таблице подобранной номенклатуры.
		// Если найдем - увеличим количество; не найдем - добавим новую строку.
		СтруктураОтбора = Новый Структура();
		
		СтруктураОтбора.Вставить("Номенклатура",     ТекСтрока.Номенклатура);
		Если ИмяТабличнойЧасти <> "Услуги" Тогда
			СтруктураОтбора.Вставить("ЕдиницаИзмерения", ТекСтрока.ЕдиницаИзмерения);
		КонецЕсли;
		СтруктураОтбора.Вставить("Цена",             ТекСтрока.Цена);

		МассивСтрок = Объект[ИмяТабличнойЧасти].НайтиСтроки(СтруктураОтбора);
		Если МассивСтрок.Количество() = 0 Тогда
			СтрокаТабличнойЧасти = Неопределено;
		Иначе
			СтрокаТабличнойЧасти = МассивСтрок[0];
		КонецЕсли;
		
		Если СтрокаТабличнойЧасти <> Неопределено Тогда
			// Нашли, увеличиваем количество в первой найденной строке.
			СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество +   ТекСтрока.Количество;
		Иначе
			// Не нашли - добавляем новую строку.
			СтрокаТабличнойЧасти =  Объект[ИмяТабличнойЧасти].Добавить();
			СтрокаТабличнойЧасти.Номенклатура	  = ТекСтрока.Номенклатура;
			СтрокаТабличнойЧасти.Количество  	  = ТекСтрока.Количество;
			СтрокаТабличнойЧасти.ЕдиницаИзмерения = ТекСтрока.ЕдиницаИзмерения;
			СтрокаТабличнойЧасти.Цена = ТекСтрока.Цена;
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Цена) Тогда
				Если Объект.УчитыватьНДС Тогда 
					СтрокаТабличнойЧасти.СтавкаНДС		  = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрока.Номенклатура,
					"СтавкаНДС");
				КонецЕсли;
			Иначе
				ЗаполнитьЦенуПоКонтрагенту(СтрокаТабличнойЧасти, ИмяТабличнойЧасти = "Услуги");
			КонецЕсли;
			Если ИмяТабличнойЧасти = "Услуги" Тогда
				СтрокаТабличнойЧасти.Содержание = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрока.Номенклатура,
				"НаименованиеПолное");
			Иначе
				СтрокаТабличнойЧасти.ЕдиницаИзмерения = ТекСтрока.ЕдиницаИзмерения;
			КонецЕсли;
			
			СтрокаТабличнойЧасти.СтатьяРасходов = уатОбщегоНазначенияСервер.СтатьяРасходовНоменклатуры(СтрокаТабличнойЧасти.Номенклатура);
		КонецЕсли;
		РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти, ИмяТабличнойЧасти = "Услуги", Ложь);
	КонецЦикла;

	РассчитатьСуммуДокумента();
	
КонецПроцедуры 

// Процедура заполняет Ставку НДС в табличной части по системе налогообложения.
// 
&НаСервере
Процедура ЗаполнитьСтавкуНДСПоНалогообложениеНДС()
	
	//СтавкаНДСПоУмолчанию = уатОбщегоНазначенияПовтИсп.ПолучитьСтавкуНДСНоль();
	СтавкаНДСПоУмолчанию = Перечисления.СтавкиНДС.ПустаяСсылка();
	Для Каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл 
		СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
		СтрокаТабличнойЧасти.СуммаНДС  = 0;
	КонецЦикла;
	Для Каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл
		СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
		СтрокаТабличнойЧасти.СуммаНДС  = 0;
	КонецЦикла;
	
	Если Объект.УчитыватьНДС Тогда
		Элементы.ТоварыСтавкаНДС.Видимость = Истина;
		Элементы.ТоварыСуммаНДС.Видимость  = Истина;
		Элементы.ТоварыВсего.Видимость     = Истина;
		
		Элементы.УслугиСтавкаНДС.Видимость = Истина;
		Элементы.УслугиСуммаНДС.Видимость  = Истина;
		Элементы.УслугиВсего.Видимость     = Истина;
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Товары Цикл
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС) Тогда
				СтрокаТабличнойЧасти.СтавкаНДС = СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
			КонецЕсли;	
			
			СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
			СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
									  		СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
									  		СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
			
		КонецЦикла;

		Для каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС) Тогда
				СтрокаТабличнойЧасти.СтавкаНДС = СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
			КонецЕсли;	
			
			СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
			СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
									  		СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
									  		СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
			
		КонецЦикла;
		
	Иначе
		Элементы.ТоварыСтавкаНДС.Видимость = Ложь;
		Элементы.ТоварыСуммаНДС.Видимость  = Ложь;
		Элементы.ТоварыВсего.Видимость     = Ложь;
		
		Элементы.УслугиСтавкаНДС.Видимость = Ложь;
		Элементы.УслугиСуммаНДС.Видимость  = Ложь;
		Элементы.УслугиВсего.Видимость     = Ложь;
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСтавкуНДСПоНалогообложениеНДС()

// Процедура устанавливает видимость для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
&НаКлиенте
Процедура УстановитьВидимость()
	
	// Для внешнего пользователя (перевозчика) Счет на оплату поставщика отображается как Счет на оплату
	Если Объект.Ссылка.Пустая() И уатОбщегоНазначенияСервер.АвторизованВнещнийПеревозчик() Тогда
		ЭтотОбъект.АвтоЗаголовок = Ложь;
		ЭтотОбъект.Заголовок = НСтр("ru = 'Счет на оплату (создание)'");
	Иначе
		ЭтотОбъект.АвтоЗаголовок = Истина;
		ЭтотОбъект.Заголовок = "";
	КонецЕсли;
	
	Элементы.Товары.Видимость = Не Объект.СозданПеревозчиком;
	Элементы.СозданПеревозчиком.Доступность = Не АвторизованВнешнийПользователь;
	Элементы.Контрагент.Доступность = Не АвторизованВнешнийПользователь;
	
	Элементы.УслугиСтавкаНДС.Видимость = Объект.УчитыватьНДС;
	Элементы.УслугиСуммаНДС.Видимость  = Объект.УчитыватьНДС;
	Элементы.УслугиВсего.Видимость     = Объект.УчитыватьНДС;
	Элементы.ТоварыСтавкаНДС.Видимость = Объект.УчитыватьНДС;
	Элементы.ТоварыСуммаНДС.Видимость  = Объект.УчитыватьНДС;
	Элементы.ТоварыВсего.Видимость     = Объект.УчитыватьНДС;
	
	ФлагДоступность = (ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.Контрагенты"));
	ФлагАвтоОтметка = (ФлагДоступность И уатОбщегоНазначения.уатЗначениеНеЗаполнено(Объект.ДоговорКонтрагента));
	Элементы.ДоговорКонтрагента.АвтоОтметкаНезаполненного = ФлагАвтоОтметка;
	Элементы.ДоговорКонтрагента.ОтметкаНезаполненного     = ФлагАвтоОтметка;
	Элементы.ДоговорКонтрагента.Доступность               = ФлагДоступность;
	
	Элементы.УслугиЦенаВалютная.Видимость     = МноговалютныйУчет;
	Элементы.УслугиСуммаВалютная.Видимость    = МноговалютныйУчет;
	Элементы.УслугиСуммаНДСвалютная.Видимость = МноговалютныйУчет И Объект.УчитыватьНДС;
	Элементы.УслугиВсегоВалютная.Видимость    = МноговалютныйУчет И Объект.УчитыватьНДС;
	Элементы.УслугиГруппаВалюта.Видимость     = МноговалютныйУчет;
	Если МноговалютныйУчет Тогда
		Элементы.УслугиЦена.Заголовок     = СтрШаблон("Цена (%1)", Объект.ВалютаДокумента);
		Элементы.УслугиСумма.Заголовок    = СтрШаблон("Сумма (%1)", Объект.ВалютаДокумента);
		Элементы.УслугиСуммаНДС.Заголовок = СтрШаблон("Сумма НДС (%1)", Объект.ВалютаДокумента);
		Элементы.УслугиВсего.Заголовок    = СтрШаблон("Всего (%1)", Объект.ВалютаДокумента);
	Иначе
		Элементы.УслугиЦена.Заголовок     = "";
		Элементы.УслугиСумма.Заголовок    = "";
		Элементы.УслугиСуммаНДС.Заголовок = "";
		Элементы.УслугиВсего.Заголовок    = "";
	КонецЕсли;
	Элементы.УслугиИзменитьКроссКурсВТЧ.Видимость                = МноговалютныйУчет;
	Элементы.УслугиКонтекстноеМенюИзменитьКроссКурсВТЧ.Видимость = МноговалютныйУчет;
	
	// Настройка интерфейса формы для внешнего польователя.
	Если АвторизованВнешнийПользователь Тогда
		Элементы.УслугиНастройкаВводаНаОсновании.Видимость = Ложь;
		Элементы.УслугиИзменитьКроссКурсВТЧ.Видимость = Ложь;
		Если УровеньДоступаКУслугам = ПредопределенноеЗначение("Перечисление.уатУровеньДоступаКУслугам.РедактированиеЗапрещено")
			И ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
			Элементы.Шапка.ТолькоПросмотр = Истина;
			Элементы.ПанельОсновная.ТолькоПросмотр = Истина;
			Элементы.СтраницыИтогов.ТолькоПросмотр = Истина;
			Элементы.ОтветственныйКомментарий.ТолькоПросмотр = Истина;
			
			Элементы.Услуги.КоманднаяПанель.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ВывестиСуммовыеИтогиДокумента();
	
КонецПроцедуры // УстановитьВидимость()

// Процедура выполняет пересчет в табличной части документа после изменений 
// в форме "Цены и валюта".Выполняется пересчет колонок: цена, скидка, сумма,
// сумма НДС, всего.
//
&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты(Знач Оповещение, ПересчитатьЦены = Ложь)
	
	// 1. Формируем структуру параметров для заполнения формы "Цены и Валюта".
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВалютаДокумента",      Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("Курс",                 Объект.КурсВзаиморасчетов);
	СтруктураПараметров.Вставить("Кратность",            Объект.КратностьВзаиморасчетов);
	СтруктураПараметров.Вставить("Контрагент",           Объект.Контрагент);
	СтруктураПараметров.Вставить("Договор",              Объект.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("Организация",          Объект.Организация);
	СтруктураПараметров.Вставить("ДатаДокумента",        Объект.Дата);
	СтруктураПараметров.Вставить("ДатаКурса",            Объект.ДатаКурса);
	СтруктураПараметров.Вставить("ПерезаполнитьЦены",    Ложь);
	СтруктураПараметров.Вставить("ПересчитатьЦены",      ПересчитатьЦены);
	СтруктураПараметров.Вставить("БылиВнесеныИзменения", Ложь);
	СтруктураПараметров.Вставить("СуммаВключаетНДС",     Объект.СуммаВключаетНДС);
	СтруктураПараметров.Вставить("НалогообложениеНДС",   Объект.УчитыватьНДС);
	// Для объедининенного решения с БП 3
	СтруктураПараметров.Вставить("ДокументБезНДС",       НЕ Объект.УчитыватьНДС);
	
	Если НЕ ПравоРедактированиеДокумента() Тогда
		СтруктураПараметров.Вставить("ТолькоПросмотр", Истина);
	КонецЕсли;
		
	ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров,,,,,
		Новый ОписаниеОповещения("ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение", ЭтотОбъект, Новый Структура("Оповещение", Оповещение)),
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена ИЛИ НЕ ПравоРедактированиеДокумента() Тогда
		Возврат;
	КонецЕсли;
	
    ВалютаДокументаПередИзменением = Объект.ВалютаДокумента;
    Оповещение                     = ДополнительныеПараметры.Оповещение;
	СтруктураЦеныИВалюта           = Результат;
    
	// 3. Перезаполняем табличную часть "Номенклатура", если были внесены изменения в форме "Цены и Валюта".
	Если ТипЗнч(СтруктураЦеныИВалюта) = Тип("Структура") Тогда
		ДопПараметры = Новый Структура("ПредКурс, ПредКратность, Курс, Кратность, ПредДатаКурса",
			Объект.КурсВзаиморасчетов, Объект.КратностьВзаиморасчетов, СтруктураЦеныИВалюта.Курс,
			СтруктураЦеныИВалюта.Кратность, Объект.ДатаКурса);
		
		Если СтруктураЦеныИВалюта.Свойство("ВалютаДокумента") И СтруктураЦеныИВалюта.Свойство("Курс") И СтруктураЦеныИВалюта.Свойство("Кратность")
			И СтруктураЦеныИВалюта.Свойство("СуммаВключаетНДС") И  СтруктураЦеныИВалюта.Свойство("НалогообложениеНДС") Тогда
			Объект.ВалютаДокумента         = СтруктураЦеныИВалюта.ВалютаДокумента;
			Объект.КурсВзаиморасчетов      = СтруктураЦеныИВалюта.Курс;
			Объект.КратностьВзаиморасчетов = СтруктураЦеныИВалюта.Кратность;
			Объект.ДатаКурса               = СтруктураЦеныИВалюта.ДатаКурса;
			Объект.СуммаВключаетНДС        = СтруктураЦеныИВалюта.СуммаВключаетНДС;
			Объект.УчитыватьНДС            = СтруктураЦеныИВалюта.НалогообложениеНДС;
		КонецЕсли;
		
		// Пересчитываем сумму если изменился признак Налогообложение НДС.
		Если СтруктураЦеныИВалюта.Свойство("НалогообложениеНДС")
			И СтруктураЦеныИВалюта.Свойство("ПредНалогообложениеНДС")
			И СтруктураЦеныИВалюта.НалогообложениеНДС <> СтруктураЦеныИВалюта.ПредНалогообложениеНДС Тогда
			
			ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
		КонецЕсли;
		
		// Пересчитываем цены по валюте.
		Если СтруктураЦеныИВалюта.Свойство("ПересчитатьЦены") И СтруктураЦеныИВалюта.ПересчитатьЦены Тогда
			ПересчитатьЦеныТабличнойЧастиПоВалюте(ВалютаДокументаПередИзменением, "Товары", ДопПараметры);
			ПересчитатьЦеныТабличнойЧастиПоВалюте(ВалютаДокументаПередИзменением, "Услуги", ДопПараметры);
			Если МноговалютныйУчет И (ДопПараметры.Курс <> ДопПараметры.ПредКурс
				ИЛИ ДопПараметры.Кратность <> ДопПараметры.ПредКратность) Тогда //рассчитывает валютные показатели
				Для Каждого ТекСтрока Из Объект.Услуги Цикл
					РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрока, Истина, Ложь);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		// Пересчитываем сумму если изменился признак "Сумма включает НДС".
		Если СтруктураЦеныИВалюта.Свойство("СуммаВключаетНДС") И СтруктураЦеныИВалюта.Свойство("ПредСуммаВключаетНДС") Тогда
			Если СтруктураЦеныИВалюта.СуммаВключаетНДС <> СтруктураЦеныИВалюта.ПредСуммаВключаетНДС Тогда
				ПересчитатьСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС("Товары");
				ПересчитатьСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС("Услуги");
			КонецЕсли;
		КонецЕсли;
		
		// Пересчитываем кросс-курс в строках
		Если МноговалютныйУчет
			И (Результат.ВалютаДокумента <> Результат.ПредВалютаДокумента
			ИЛИ Объект.ДатаКурса <> ДопПараметры.ПредДатаКурса) Тогда
			
			Для Каждого ТекСтрока Из Объект.Услуги Цикл
				ТекСтрока.КроссКурс = ПолучитьКроссКурс(ТекСтрока.Валюта, Объект.ВалютаДокумента, Объект.ДатаКурса);
				ПриИзменииКроссКурсаВСтроке(ТекСтрока, Ложь);
			КонецЦикла;
		КонецЕсли;
    КонецЕсли;
    
    УстановитьВидимость();
	
	РассчитатьСуммуДокумента();
	ОбновитьВсегоВТЧТовары();
    ОбновитьВсегоВТЧУслуги();
        
	Если Оповещение <> Неопределено Тогда 
		ВыполнитьОбработкуОповещения(Оповещение);
	КонецЕсли;

КонецПроцедуры // ОбработатьИзмененияПоКнопкеЦеныИВалюты()

&НаКлиенте
Функция ПолучитьПараметрыПодбора(ИмяТаблицы)

	ДатаРасчетов 	 = ?(НачалоДня(Объект.Дата) = НачалоДня(ТекущаяДата()), Неопределено, Объект.Дата);
	
	ЗаголовокПодбора = НСтр("en='Selection products and services in %1 (%2)';ru='Подбор номенклатуры в %1 (%2)'");
	ПредставлениеТаблицы = НСтр("en='Goods';ru='Товары'");
	ЗаголовокПодбора = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(ЗаголовокПодбора, Объект.Ссылка, НСтр("en='Goods';ru='Товары'"));
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ПоказыватьЦены", Истина);
	ПараметрыФормы.Вставить("ЕстьЦена"      , Истина);
	ПараметрыФормы.Вставить("Контрагент"    , Объект.Контрагент);
	ПараметрыФормы.Вставить("ЕстьКоличество", Истина);
	ПараметрыФормы.Вставить("ДатаРасчетов"  , ДатаРасчетов);
	ПараметрыФормы.Вставить("Валюта"        , Объект.ВалютаДокумента);
	//ПараметрыФормы.Вставить("Склад"         , Объект.Склад);
	ПараметрыФормы.Вставить("Заголовок"     , ЗаголовокПодбора);
	ПараметрыФормы.Вставить("ВидПодбора"    , ПолучитьВидПодбора(ИмяТаблицы));
	ПараметрыФормы.Вставить("ИмяТаблицы"    , ИмяТаблицы);
	ПараметрыФормы.Вставить("Услуги"        , ИмяТаблицы = "Услуги");
	ПараметрыФормы.Вставить("Организация"   , Объект.Организация);
	ПараметрыФормы.Вставить("ПоказыватьОстатки"  , Истина);
	ПараметрыФормы.Вставить("ПоказыватьСчетУчета", Истина);

	Возврат ПараметрыФормы;

КонецФункции

&НаКлиенте
Функция ПолучитьВидПодбора(ИмяТаблицы)

	ВидПодбора = "";
	
	Возврат ВидПодбора;

КонецФункции

&НаСервере 
Функция ПолучитьТоварыИзВременногоХранилища(ЗначениеВыбора)
	ТаблицаТоваров = ПолучитьИзВременногоХранилища(ЗначениеВыбора);
	МассивТоваров = Новый Массив;
	Для Каждого ТекСтрока Из ТаблицаТоваров Цикл
		Структура = Новый Структура;
		Структура.Вставить("Номенклатура",		 ТекСтрока.Номенклатура);
		Структура.Вставить("ЕдиницаИзмерения",	 ТекСтрока.Номенклатура.ЕдиницаХраненияОстатков);
		Структура.Вставить("Количество",		 ТекСтрока.Количество);
		Структура.Вставить("Цена",				 ТекСтрока.Цена);
		МассивТоваров.Добавить(Структура);
	КонецЦикла;
	
	Возврат МассивТоваров;
КонецФункции

// Рассчитывается сумма НДС в строке табличной части.
//
&НаКлиенте
Процедура РассчитатьСуммуНДС(СтрокаТабличнойЧасти, флУслуги = Ложь)
	
	СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	
	СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
		СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
		СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
		
	Если флУслуги И МноговалютныйУчет Тогда
		СтрокаТабличнойЧасти.СуммаНДСВалютная = ?(Объект.СуммаВключаетНДС, 
			СтрокаТабличнойЧасти.СуммаВалютная - (СтрокаТабличнойЧасти.СуммаВалютная) / ((СтавкаНДС + 100) / 100),
			СтрокаТабличнойЧасти.СуммаВалютная * СтавкаНДС / 100);
	КонецЕсли;
	
	ОбновитьВсегоВстрокеТЧ(СтрокаТабличнойЧасти, флУслуги);
	
КонецПроцедуры // РассчитатьСуммуНДС()

&НаКлиенте
Процедура РедактироватьЦеныИВалютуЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Модифицированность = Истина;

КонецПроцедуры // РедактироватьЦеныИВалютуЗавершение()

&НаКлиенте
Процедура ОбработкаОповещенияПриИзмененииДаты(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Если ДополнительныеПараметры.ЕстьКурсДокумента Тогда
			Объект.КурсДокумента           = ДополнительныеПараметры.НовыйКурс;
		КонецЕсли;
		Если ДополнительныеПараметры.ЕстьКратностьДокумента Тогда
			Объект.КратностьДокумента      = ДополнительныеПараметры.НоваяКратность;
		КонецЕсли;
		Если ДополнительныеПараметры.ЕстьКурсВзаиморасчетов Тогда
			Объект.КурсВзаиморасчетов      = ДополнительныеПараметры.НовыйКурс;
		КонецЕсли;
		Если ДополнительныеПараметры.ЕстьКратностьВзаиморасчетов Тогда
			Объект.КратностьВзаиморасчетов = ДополнительныеПараметры.НоваяКратность;
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьВсегоВТЧТовары();
	ОбновитьВсегоВТЧУслуги();
	ВывестиСуммовыеИтогиДокумента();

	УстановитьВидимость();
КонецПроцедуры

&НаСервере
Функция ПолучитьОрганизациюПоСчетуНаСервере(ТекСчет)

	Если ЗначениеЗаполнено(ТекСчет) Тогда
		Возврат ТекСчет.Владелец;
	Иначе 
		Возврат Справочники.Организации.ПустаяСсылка();
	КонецЕсли;

КонецФункции // ПолучитьОрганизациюПоСчетуНаСервере()

&НаСервере
Процедура ПриИзмененииОрганизацииНаСервере(ПриОткрытииФормы = Ложь)
	
	// Надо установить банк. счет, если он принадлежит другой организации или не заполнен
	Если НЕ ЗначениеЗаполнено(Объект.СтруктурнаяЕдиница) 
		ИЛИ (ПолучитьОрганизациюПоСчетуНаСервере(Объект.СтруктурнаяЕдиница) <> Объект.Организация) Тогда
		Объект.СтруктурнаяЕдиница = уатОбщегоНазначенияТиповыеСервер.ПолучитьОсновнойСчетПоОрганизации(Объект.Организация);
	КонецЕсли;
	
	Если НЕ ПриОткрытииФормы ИЛИ НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Если Объект.ДоговорКонтрагента.Организация <> Объект.Организация Тогда
			СписокДоговоров = Новый СписокЗначений;
			СписокДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
			СтрПараметров   = Новый Структура("СписокДопустимыхВидовДоговоров",СписокДоговоров);
			
			Объект.ДоговорКонтрагента = уатОбщегоНазначенияТиповыеСервер.уатПолучитьДоговорПоОрганизацииИКонтрагенту(Объект.Организация, Объект.Контрагент, СтрПараметров);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументОснованиеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ЕстьНезаполненныеРеквизиты = Ложь;
	
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда 
		ТекстНСТР = НСтр("en='Before choosing a document of the basis, you must select a counterparty.';ru='Перед выбором документа основания необходимо выбрать контрагента.'");
		ЕстьНезаполненныеРеквизиты = Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР,,"Объект.Контрагент");
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда 
		ТекстНСТР = НСтр("en='Before choosing the basis document, you must choose a contract.';ru='Перед выбором документа основания необходимо выбрать договор.'");
		ЕстьНезаполненныеРеквизиты = Истина;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР,,"Объект.ДоговорКонтрагента");
	КонецЕсли;
	
	Если ЕстьНезаполненныеРеквизиты Тогда 
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ТоварыНоменклатураПриИзмененииНаСервере(строкаТЧ)

	ДокументОбъект = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.уатСчетНаОплатуПоставщика"));
	ТекСтрокаТЧ    = ДокументОбъект.Товары.Получить(строкаТЧ-1);
	
	ТекСтрокаТЧ.ЕдиницаИзмерения = ТекСтрокаТЧ.Номенклатура.ЕдиницаХраненияОстатков;
	
	Если НЕ ЗначениеЗаполнено(ТекСтрокаТЧ.Количество) Тогда 
		ТекСтрокаТЧ.Количество = 1;
	КонецЕсли;
	
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);

КонецПроцедуры                                     

&НаКлиенте
Процедура ОбновитьВсегоВстрокеТЧ(СтрокаТабличнойЧасти, флУслуги = Ложь)
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма
		+ ?(Объект.УчитыватьНДС И НЕ Объект.СуммаВключаетНДС, СтрокаТабличнойЧасти.СуммаНДС, 0);
	
	Если флУслуги И МноговалютныйУчет Тогда
		СтрокаТабличнойЧасти.ВсегоВалютная = СтрокаТабличнойЧасти.СуммаВалютная
			+ ?(Объект.УчитыватьНДС И НЕ Объект.СуммаВключаетНДС, СтрокаТабличнойЧасти.СуммаНДСВалютная, 0);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВсегоВТЧУслуги()
	Для Каждого ТекСтрока Из Объект.Услуги Цикл 
		ОбновитьВсегоВстрокеТЧ(ТекСтрока, Истина);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВсегоВТЧТовары()
	Для Каждого ТекСтрока Из Объект.Товары Цикл 
		ОбновитьВсегоВстрокеТЧ(ТекСтрока);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииКонтрагентаНаСервере()

	ДокументОбъект  = ДанныеФормыВЗначение(Объект, Тип("ДокументОбъект.уатСчетНаОплатуПоставщика"));
	СписокДоговоров = Новый СписокЗначений;
	СписокДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	
	СтрПараметров   = Новый Структура("СписокДопустимыхВидовДоговоров",СписокДоговоров);
	
	// Выполняем общие действия для всех документов при изменении Контрагента.
	
	уатОбщегоНазначенияТиповыеСервер.уатПриИзмененииЗначенияКонтрагента(ДокументОбъект, СтрПараметров);
	
	ЗначениеВДанныеФормы(ДокументОбъект, Объект);
	

КонецПроцедуры

&НаСервере
Процедура ПриИзмененииКЛНаСервере()

	Если ЗначениеЗаполнено(Объект.КонтактноеЛицо) Тогда
		Если (НЕ ЗначениеЗаполнено(Объект.Контрагент) ИЛИ Объект.КонтактноеЛицо.ОбъектВладелец <> Объект.Контрагент) Тогда
			Объект.Контрагент = Объект.КонтактноеЛицо.ОбъектВладелец;
			Объект.ДоговорКонтрагента = уатЗаполнениеДокументов.ПолучитьОсновнойДоговорКонтрагента(Объект.Контрагент, "СПоставщиком", Объект.Организация);
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ВывестиСуммовыеИтогиДокумента()
	
	Если Объект.УчитыватьНДС Тогда 
		ВсегоНДС = Объект.Товары.Итог("СуммаНДС") + Объект.Услуги.Итог("СуммаНДС");
		
		Если Объект.СуммаВключаетНДС Тогда 
			НадписьВсегоНДС = НСтр("en='VAT amount';ru='НДС в сумме'") + ":";
		Иначе 
			НадписьВсегоНДС = НСтр("en='VAT from above';ru='НДС сверху'") + ":";
		КонецЕсли;
		НадписьВсего = НСтр("en='Total including VAT';ru='Всего с НДС'");
		Элементы.СтраницыИтогов.ТекущаяСтраница = Элементы.ИтогоУчетНДС;
	Иначе
		ВсегоНДС = 0;
		НадписьВсего = НСтр("en='Total';ru='Всего'");
		Элементы.СтраницыИтогов.ТекущаяСтраница = Элементы.ИтогоБезНДС;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ВалютаДокумента) Или Объект.ВалютаДокумента = мВалютаРегламентированногоУчета Тогда 
		НадписьКурс = "(1.0000)";
		Элементы.НадписьКурс.Видимость = Ложь;
		Элементы.НадписьКурс2.Видимость = Ложь;
	Иначе
		НадписьКурс = "(" + Формат(
			?(Объект.КратностьВзаиморасчетов = 0, Объект.КурсВзаиморасчетов, Объект.КурсВзаиморасчетов/Объект.КратностьВзаиморасчетов),
			"ЧДЦ=4; ЧРД=.; ЧН=0.0000; ЧГ=0") + ")";
		Элементы.НадписьКурс.Видимость = Истина;
		Элементы.НадписьКурс2.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПравоРедактированиеДокумента()
	Рез = ПравоДоступа("Редактирование", Метаданные.Документы.уатСчетНаОплатуПоставщика);
	Возврат Рез;
КонецФункции

&НаСервере
Процедура ПересчитатьСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС(ИмяТЧ)
	уатОбщегоНазначенияСервер.ПересчитатьСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС(Объект[ИмяТЧ], Объект.СуммаВключаетНДС);
КонецПроцедуры

&НаСервере
Процедура ПересчитатьЦеныТабличнойЧастиПоВалюте(ВалютаПередИзменением, ИмяТЧ, ДопПараметры = Неопределено)
	уатОбщегоНазначенияСервер.ПересчитатьЦеныТабличнойЧастиПоВалюте(Объект, ВалютаПередИзменением, ИмяТЧ, ДопПараметры);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЦенуПоКонтрагенту(СтрокаТабличнойЧасти, флУслуги = Ложь)
	
	Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура) Тогда
		Если Объект.УчитыватьНДС Тогда
			СтавкаНДС = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(СтрокаТабличнойЧасти.Номенклатура, "СтавкаНДС");
			СтрокаТабличнойЧасти.СтавкаНДС = ?(ЗначениеЗаполнено(СтавкаНДС), СтавкаНДС, СтрокаТабличнойЧасти.СтавкаНДС);
		Иначе
			СтрокаТабличнойЧасти.СтавкаНДС = Неопределено;
		КонецЕсли;
		
		СтруктураЦенаВалюта = уатОбщегоНазначения.уатНайтиЦенуНоменклатуры(Объект.Дата, СтрокаТабличнойЧасти.Номенклатура, Объект.Контрагент, Ложь);
		мЦена = 0;
		Если ЗначениеЗаполнено(СтруктураЦенаВалюта.Цена) Тогда
			мЦена = СтруктураЦенаВалюта.Цена;
			мЦена = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(мЦена,
				СтруктураЦенаВалюта.Валюта,	Объект.ВалютаДокумента,
				Объект.Дата, Объект.Дата);
		КонецЕсли;
		СтрокаТабличнойЧасти.Цена = мЦена;
		РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти, флУслуги);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуДокумента()
	Объект.СуммаДокумента = Объект.Услуги.Итог("Сумма") + Объект.Товары.Итог("Сумма");
	Если Объект.УчитыватьНДС И НЕ Объект.СуммаВключаетНДС Тогда
		Объект.СуммаДокумента = Объект.СуммаДокумента
			+ Объект.Услуги.Итог("СуммаНДС") + Объект.Товары.Итог("СуммаНДС");
	КонецЕсли;
	ВывестиСуммовыеИтогиДокумента();
КонецПроцедуры

// Процедура рассчитывает сумму в строке табличной части.
//
&НаКлиенте
Процедура РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти = Неопределено, флУслуги = Ложь, РасчетСуммыДокумента = Истина)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
	Если флУслуги И МноговалютныйУчет Тогда
		СтрокаТабличнойЧасти.СуммаВалютная = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.ЦенаВалютная;
	КонецЕсли;
	
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти, флУслуги);
	ОбновитьВсегоВстрокеТЧ(СтрокаТабличнойЧасти, флУслуги);
	
	// Посчитать суммы документа и записать ее в соответствующий реквизит шапки для показа в журналах
	Если РасчетСуммыДокумента Тогда
		РассчитатьСуммуДокумента();
	КонецЕсли;
		
КонецПроцедуры // РассчитатьСуммуТабЧасти()

// Промежуточная функция расчета кросс-курса - избавляемся от таскания контекста формы на сервер
&НаСервереБезКонтекста
Функция ПолучитьКроссКурс(ВалютаНач, ВалютаКон, ДатаКурса, КэшКурсов = Неопределено)
	Возврат уатОбщегоНазначенияСервер.ПолучитьКроссКурс(ВалютаНач, ВалютаКон, ДатаКурса, КэшКурсов);
КонецФункции

&НаКлиенте
Процедура ДобавитьНоменклатуруВТЧПоШтрихкоду(Результат, ДопПараметры = Неопределено) Экспорт
	
	Если Результат = Неопределено ИЛИ НЕ ЗначениеЗаполнено(Результат.Объект) Тогда
		Возврат;
	КонецЕсли;
	Номенклатура = Результат.Объект;
	
	// Ищем выбранную позицию в таблице подобранной номенклатуры.
	// Если найдем - увеличим количество; не найдем - добавим новую строку.
	МассивСтрок = Объект.Товары.НайтиСтроки(Новый Структура("Номенклатура", Номенклатура));
	Если МассивСтрок.Количество() = 0 Тогда
		СтрокаТабличнойЧасти = Неопределено;
	Иначе
		СтрокаТабличнойЧасти = МассивСтрок[0];
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти <> Неопределено Тогда
		// Нашли, увеличиваем количество в первой найденной строке.
		СтрокаТабличнойЧасти.Количество = СтрокаТабличнойЧасти.Количество + 1;
	Иначе
		// Не нашли - добавляем новую строку.
		СтрокаТабличнойЧасти =  Объект.Товары.Добавить();
		СтрокаТабличнойЧасти.Номенклатура = Номенклатура;
		СтрокаТабличнойЧасти.ЕдиницаИзмерения = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(
			СтрокаТабличнойЧасти.Номенклатура, "ЕдиницаХраненияОстатков");
		СтрокаТабличнойЧасти.Количество = 1;
		ЗаполнитьЦенуПоКонтрагенту(СтрокаТабличнойЧасти);
		СтрокаТабличнойЧасти.СтатьяРасходов = уатОбщегоНазначенияСервер.СтатьяРасходовНоменклатуры(
			СтрокаТабличнойЧасти.Номенклатура);
	
	    Если Объект.УчитыватьНДС Тогда 
			СтрокаТабличнойЧасти.СтавкаНДС = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(
				СтрокаТабличнойЧасти.Номенклатура, "СтавкаНДС");
			Если НЕ ЗначениеЗаполнено(СтрокаТабличнойЧасти.СтавкаНДС) Тогда
				СтрокаТабличнойЧасти.СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
				ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнаяСтавкаНДС");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
	ОбновитьВсегоВТЧТовары();
	
КонецПроцедуры

#КонецОбласти
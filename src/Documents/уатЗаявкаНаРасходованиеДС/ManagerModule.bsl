#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.МенеджерПечати = "Документ.уатЗаявкаНаРасходованиеДС";
	КомандаПечати.Идентификатор = "ЗаявкаНаРасходованиеСредств";
	КомандаПечати.Представление = НСтр("en='Request';ru='Заявка'");
	
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор  = "Реестр";
	КомандаПечати.Представление  = НСтр("en='Document register';ru='Реестр документов'");
	КомандаПечати.ЗаголовокФормы = НСтр("en='Register of documents ""Expenditure request""';ru='Реестр документов ""Заявка на расходование денежных средств""'");
	КомандаПечати.Обработчик     = "уатОбщегоНазначенияТиповыеКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм     = "ФормаСписка";
	КомандаПечати.Порядок        = 100;
	
КонецПроцедуры

// Формирует печатные формы.
//
// Параметры:
//  МассивОбъектов  - Массив    - ссылки на объекты, которые нужно распечатать;
//  ПараметрыПечати - Структура - дополнительные настройки печати;
//  КоллекцияПечатныхФорм - ТаблицаЗначений - сформированные табличные документы (выходной параметр).
//  ОбъектыПечати         - СписокЗначений  - значение - ссылка на объект;
//                                            представление - имя области в которой был выведен объект (выходной
//                                                            параметр);
//  ПараметрыВывода       - Структура       - дополнительные параметры сформированных табличных документов (выходной
//                                            параметр).
//
Процедура Печать(МассивОбъектов, ПараметрыПечати, КоллекцияПечатныхФорм, ОбъектыПечати, ПараметрыВывода) Экспорт
	
	Если НЕ уатОбщегоНазначенияСервер.РазрешениеПечатиНепроведенногоДокумента(МассивОбъектов) Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыВывода.ДоступнаПечатьПоКомплектно = Истина;
	
	Если УправлениеПечатью.НужноПечататьМакет(КоллекцияПечатныхФорм, "ЗаявкаНаРасходованиеСредств") Тогда
		УправлениеПечатью.ВывестиТабличныйДокументВКоллекцию(КоллекцияПечатныхФорм, "ЗаявкаНаРасходованиеСредств",
			"Заявка на расходование средств", ПечатьЗаявка(МассивОбъектов, ОбъектыПечати));
	КонецЕсли;
	
	уатОбщегоНазначенияСервер.УстановитьРедактированиеПечатныхФормДокумента(КоллекцияПечатныхФорм);
	уатУправлениеПечатью.ЗаполнитьПараметрыОтправки(ПараметрыВывода.ПараметрыОтправки, МассивОбъектов, КоллекцияПечатныхФорм);
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	Настройки.ПриПолученииСлужебныхРеквизитов = Ложь;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// Позволяет переопределить ограничение, указанное в модуле менеджера объекта метаданных.
//
// Параметры:
//  Ограничение - Структура:
//    * Текст                             - Строка - ограничение доступа для пользователей.
//                                          Если пустая строка, значит, доступ разрешен.
//    * ТекстДляВнешнихПользователей      - Строка - ограничение доступа для внешних пользователей.
//                                          Если пустая строка, значит, доступ запрещен.
//    * ПоВладельцуБезЗаписиКлючейДоступа - Неопределено - определить автоматически.
//                                        - Булево - если Ложь, то всегда записывать ключи доступа,
//                                          если Истина, тогда не записывать ключи доступа,
//                                          а использовать ключи доступа владельца (требуется,
//                                          чтобы ограничение было строго по объекту-владельцу).
//   * ПоВладельцуБезЗаписиКлючейДоступаДляВнешнихПользователей - Неопределено, Булево - также
//                                          как у параметра ПоВладельцуБезЗаписиКлючейДоступа.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(ЦФО)";
	
	Ограничение.ТекстДляВнешнихПользователей = Ограничение.Текст;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// СтандартныеПодсистемы.ВариантыОтчетов

// Определяет список команд отчетов.
//
// Параметры:
//   КомандыОтчетов - ТаблицаЗначений - Таблица с командами отчетов. Для изменения.
//       См. описание 1 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//   Параметры - Структура - Вспомогательные параметры. Для чтения.
//       См. описание 2 параметра процедуры ВариантыОтчетовПереопределяемый.ПередДобавлениемКомандОтчетов().
//
Процедура ДобавитьКомандыОтчетов(КомандыОтчетов, Параметры) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВариантыОтчетов

#КонецОбласти

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	
	мЗапрос = Новый Запрос;
	мЗапрос.МенеджерВременныхТаблиц = СтруктураДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц;
	мЗапрос.УстановитьПараметр("Ссылка",ДокументСсылка);
	
	мЗапрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатЗаявкаНаРасходованиеДСРасшифровкаПлатежа.Ссылка КАК Регистратор,
	|	уатЗаявкаНаРасходованиеДСРасшифровкаПлатежа.Ссылка.Дата КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.приход) КАК ВидДвижения,
	|	уатЗаявкаНаРасходованиеДСРасшифровкаПлатежа.Ссылка КАК ЗаявкаНаРасходование,
	|	уатЗаявкаНаРасходованиеДСРасшифровкаПлатежа.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	уатЗаявкаНаРасходованиеДСРасшифровкаПлатежа.Сделка КАК Сделка,
	|	уатЗаявкаНаРасходованиеДСРасшифровкаПлатежа.СтатьяДвиженияДенежныхСредств КАК СтатьяДвиженияДенежныхСредств,
	|	уатЗаявкаНаРасходованиеДСРасшифровкаПлатежа.Ссылка.Организация КАК Организация,
	|	ВЫБОР
	|		КОГДА уатЗаявкаНаРасходованиеДСРасшифровкаПлатежа.Ссылка.ВидОперации = ЗНАЧЕНИЕ(Перечисление.уатВидыОперацийЗаявкиНаРасходование.ВыдачаПОдотчетнику)
	|			ТОГДА уатЗаявкаНаРасходованиеДСРасшифровкаПлатежа.Ссылка.ПодотчетноеЛицо
	|		ИНАЧЕ уатЗаявкаНаРасходованиеДСРасшифровкаПлатежа.Ссылка.Контрагент
	|	КОНЕЦ КАК Контрагент,
	|	уатЗаявкаНаРасходованиеДСРасшифровкаПлатежа.СуммаПлатежа КАК Сумма,
	|	уатЗаявкаНаРасходованиеДСРасшифровкаПлатежа.СуммаПлатежа КАК СуммаВзаиморасчетов,
	|	уатЗаявкаНаРасходованиеДСРасшифровкаПлатежа.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	уатЗаявкаНаРасходованиеДСРасшифровкаПлатежа.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов
	|ИЗ
	|	Документ.уатЗаявкаНаРасходованиеДС.РасшифровкаПлатежа КАК уатЗаявкаНаРасходованиеДСРасшифровкаПлатежа
	|ГДЕ
	|	уатЗаявкаНаРасходованиеДСРасшифровкаПлатежа.Ссылка = &Ссылка";
	
	ТабЗаявок = мЗапрос.Выполнить().Выгрузить();
	ТабЗаявок.Колонки.Добавить("СуммаУпр");
	
	Для каждого ТекСтрока ИЗ ТабЗаявок Цикл
		Если ДокументСсылка.ВидОперации = Перечисления.уатВидыОперацийЗаявкиНаРасходование.ПрочийРасходДенежныхСредств
			ИЛИ ДокументСсылка.ВидОперации = Перечисления.уатВидыОперацийЗаявкиНаРасходование.ВыдачаПодотчетнику Тогда
			
			КурсКратностьДокумента = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ДокументСсылка.ВалютаДокумента, ДокументСсылка.Дата);
			ТекСтрока.СуммаУпр = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаВзаиморасчетов,
																				   ДокументСсылка.ВалютаДокумента,
																				   СтруктураДополнительныеСвойства.ВалютаУпрУчета,
																				   КурсКратностьДокумента.Курс,
																				   СтруктураДополнительныеСвойства.КурсУпр,
																				   КурсКратностьДокумента.Кратность,
																				   СтруктураДополнительныеСвойства.КратностьУпр);
		Иначе
			ТекСтрока.СуммаУпр = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаВзаиморасчетов,
																				   ДокументСсылка.ВалютаДокумента,
																				   СтруктураДополнительныеСвойства.ВалютаУпрУчета,
																				   ТекСтрока.КурсВзаиморасчетов,
																				   СтруктураДополнительныеСвойства.КурсУпр,
																				   ТекСтрока.КратностьВзаиморасчетов,
																				   СтруктураДополнительныеСвойства.КратностьУпр);																				   
		КонеЦесли;

		Если НЕ ЗначениеЗаполнено(ТекСтрока.ДоговорКонтрагента.ВедениеВзаиморасчетов)
			ИЛИ ТекСтрока.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом тогда
			ТекСтрока.Сделка = Неопределено;
		КонеЦесли;
	КонецЦикла;
	
	ТабБюджетов = Новый ТаблицаЗначений;
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаЗаявокНаРасходованиеДС"        , ТабЗаявок);
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаКонтролируемыхЗначенияБюджетов", ТабБюджетов);
	
КонецПроцедуры // ИнициализироватьДанныеДокумента()

Процедура ВыполнитьКонтроль(ДокументСсылка, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь) Экспорт
	
	мЗапрос = Новый Запрос;
	мЗапрос.МенеджерВременныхТаблиц = ДополнительныеСвойства.ДляПроведения.СтруктураВременныеТаблицы.МенеджерВременныхТаблиц; 
	мЗапрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	                |	уатЗаявкиНаРасходованиеДСОстатки.ЗаявкаНаРасходование КАК Заявка,
	                |	уатЗаявкиНаРасходованиеДСОстатки.СуммаОстаток КАК Остаток
	                |ИЗ
	                |	РегистрНакопления.уатЗаявкиНаРасходованиеДС.Остатки(, ЗаявкаНаРасходование = &Ссылка) КАК уатЗаявкиНаРасходованиеДСОстатки
	                |ГДЕ
	                |	ЕСТЬNULL(уатЗаявкиНаРасходованиеДСОстатки.СуммаОстаток, 0) < 0";
	мЗапрос.УстановитьПараметр("Ссылка" , ДокументСсылка);
	Выборка = мЗапрос.Выполнить().Выбрать();
	Если Выборка.Количество() тогда
		Заголовок = уатОбщегоНазначенияТиповые.уатПредставлениеДокументаПриПроведении(ДокументСсылка);
		Пока Выборка.Следующий() Цикл
			#Если ТонкийКлиент тогда	
			#Иначе
				ТекстНСТР = НСтр("en='For request ""%1"" received negative remains. Remains on request is: %2';ru='Для заявки ""%1"" получены отрицательные остатки. Остаток по заявке: %2'");
				ТекстНСТР = СтрШаблон(ТекстНСТР, Выборка.Заявка, Выборка.Остаток);
				уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, Отказ, Заголовок);
			#КонецЕсли
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Получает дополнительные реквизиты для отображения в отчете "Реестр документов"
// 
// Возвращаемое значение:
//   Структура доп. реквизитов
//
Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура("Информация", "Контрагент");
	Возврат Результат;
	
КонецФункции

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Функция ПечатьЗаявка(МассивОбъектов, ОбъектыПечати)  
	
	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.КлючПараметровПечати = "ПараметрыПечати_ЗаявкаНаРасходованиеДС";
	
	ПервыйДокумент = Истина;
	
	Для Каждого ТекДокумент Из МассивОбъектов Цикл 
		
		Если Не ПервыйДокумент Тогда
			ТабличныйДокумент.ВывестиГоризонтальныйРазделительСтраниц();
		КонецЕсли;
		ПервыйДокумент = Ложь;
		
		НомерСтрокиНачало = ТабличныйДокумент.ВысотаТаблицы + 1;
		
		ТабличныйДокумент.ИмяПараметровПечати = "ПараметрыПечати_ЗаявкаНаРасходованиеДС";
		Макет = УправлениеПечатью.МакетПечатнойФормы("Документ.уатЗаявкаНаРасходованиеДС.ПФ_MXL_ЗаявкаНаРасходованиеСредств");
		
		Заголовок = уатОбщегоНазначенияТиповые.уатПредставлениеДокументаПриПроведении(ТекДокумент);
		
		ЕстьРасчетыСКонтрагентами = уатОбщегоНазначения_проф.ЕстьРасчетыСКонтрагентами(ТекДокумент.ВидОперации);
		Если ЕстьРасчетыСКонтрагентами Тогда
			СтруктураПолей = Новый Структура("Контрагент, Ответственный");
		Иначе
			СтруктураПолей = Новый Структура("Ответственный, ВалютаДокумента");
		КонецЕсли;
		
		Отказ = Ложь;
		// Проверим заполнение реквизитов документов
		уатОбщегоНазначенияТиповые.уатПроверитьЗаполнениеШапкиДокумента(ТекДокумент, СтруктураПолей, Отказ, Заголовок);
		
		Если Отказ Тогда
			Прервать;
		КонецЕсли;
		
		Обл = Макет.ПолучитьОбласть("Заголовок");
		
		//Обл.Параметры.ЗаголовокЗаявки = "" + ТекДокумент + Символы.ПС + ТекДокумент.ВидОперации;
		
		Обл.Параметры.ЗаголовокЗаявки = уатОбщегоНазначенияТиповые.уатСформироватьЗаголовокДокумента(ТекДокумент, НСтр("en='';ru='Заявка на расходование денежных средств'"))
		+ Символы.ПС + ТекДокумент.ВидОперации;
		
		Обл.Параметры.Заполнить(ТекДокумент);
		
		ТабличныйДокумент.Вывести(Обл);
		
		Если ЕстьРасчетыСКонтрагентами Тогда
			Обл = Макет.ПолучитьОбласть("ЗаголовокРасчеты");
			Обл.Параметры.Контрагент = ТекДокумент.Контрагент;
			ТабличныйДокумент.Вывести(Обл);
			
			Запрос = Новый Запрос;
			Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.ДоговорКонтрагента КАК ДоговорКонтрагента,
			|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Сделка КАК Сделка,
			|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.СуммаПлатежа КАК СуммаПлатежа,
			|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.ДоговорКонтрагента.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
			|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
			|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.СуммаПлатежа КАК СуммаВзаиморасчетов,
			|	ВЫБОР
			|		КОГДА (НЕ РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток ЕСТЬ NULL )
			|			ТОГДА ВЫБОР
			|					КОГДА (НЕ ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Ссылка.Проведен)
			|						ТОГДА РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток + ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.СуммаВзаиморасчетов
			|					ИНАЧЕ РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток
			|				КОНЕЦ
			|		ИНАЧЕ ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.СуммаВзаиморасчетов
			|	КОНЕЦ КАК ТекущийДолг
			|ИЗ
			|	Документ.уатЗаявкаНаРасходованиеДС.РасшифровкаПлатежа КАК ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа
			|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.уатВзаиморасчетыСКонтрагентами.Остатки КАК РасчетыСКонтрагентамиОстатки
			|		ПО ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.ДоговорКонтрагента = РасчетыСКонтрагентамиОстатки.ДоговорКонтрагента
			|			И ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Сделка = РасчетыСКонтрагентамиОстатки.Сделка
			|ГДЕ
			|	ЗаявкаНаРасходованиеСредствРасшифровкаПлатежа.Ссылка = &Ссылка";
			
			Запрос.УстановитьПараметр("Ссылка", ТекДокумент);
			
			Результат = Запрос.Выполнить().Выбрать();
			
			Пока Результат.Следующий() Цикл
				
				Обл = Макет.ПолучитьОбласть("СтрокаРасчеты");
				Обл.Параметры.Заполнить(Результат);
				ТабличныйДокумент.Вывести(Обл);
				
			КонецЦикла;
			
			Обл = Макет.ПолучитьОбласть("ПодвалРасчеты");
			ТабличныйДокумент.Вывести(Обл);
			
		КонецЕсли;
		
		Если Не ТекДокумент.Описание="" Тогда
			
			Обл = Макет.ПолучитьОбласть("ОписаниеЗаявки");
			Обл.Параметры.Описание = ТекДокумент.Описание;
			ТабличныйДокумент.Вывести(Обл);
			
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекДокумент.Сценарий) Тогда // Есть связь с бюджетированием
			
			Обл = Макет.ПолучитьОбласть("ЗаголовокБюджетирование");
			Обл.Параметры.Заполнить(ТекДокумент);
			
			Обл = Макет.ПолучитьОбласть("ПодвалКонтроль");
			ТабличныйДокумент.Вывести(Обл);
			
		КонецЕсли;
		
		Обл = Макет.ПолучитьОбласть("Подвал");
		ТабличныйДокумент.Вывести(Обл);
		
		// Первую колонку не печатаем
		ТабличныйДокумент.ОбластьПечати = ТабличныйДокумент.Область(1,1,ТабличныйДокумент.ВысотаТаблицы,ТабличныйДокумент.ШиринаТаблицы);
		
	КонецЦикла;
	
	ТабличныйДокумент.АвтоМасштаб = Истина;
	
	Возврат ТабличныйДокумент;
	
КонецФункции // ПечатнаяФорма()

// Процедура - Заполнить структуру получателей печатных форм
//
// Параметры:
//  СтруктураДанныхОбъектаПечати - Структура - Структура данных получателей печатной формы
//
Процедура ЗаполнитьСтруктуруПолучателейПечатныхФорм(СтруктураДанныхОбъектаПечати) Экспорт
	
	СтруктураДанныхОбъектаПечати.ОсновнойПолучатель = "Контрагент";
	 
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Контрагент");
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("КонтактноеЛицо");
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Грузоотправитель");
	СтруктураДанныхОбъектаПечати.МассивРеквизитовПолучателей.Добавить("Грузополучатель");
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
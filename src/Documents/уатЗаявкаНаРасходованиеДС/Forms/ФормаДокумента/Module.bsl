
#Область Переменные_формы

&НаКлиенте
Перем СтрокаПлатеж;

&НаКлиенте
Перем ОтветПередЗаписью;

#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	уатЗащищенныеФункцииСервер.уатДокументФормаЭлементаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, Объект, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Объект.Ссылка.Пустая() И ЗначениеЗаполнено(Объект.Организация) Тогда
		ПриИзмененииОрганизацииНаСервере();
	КонецЕсли;
	
	ПараметрыЗначениеКопирования = Параметры.ЗначениеКопирования;
	
	уатОбщегоНазначенияСервер.НастроитьПолеПодразделение(Элементы.ЦФО, "Объект.Организация");
	
	// уатСогласованиеДокументов
	ИмяДокументаСогласование = "ЗаявкаНаРасходованиеДС";
	уатСогласованиеДокументовСервер.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец уатСогласованиеДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	уатЗащищенныеФункцииКлиент.уатДокументФормаЭлементаПриОткрытии(Отказ, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
		НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
	КонецЕсли;
	
	Элементы.РасшифровкаПлатежа.ТекущаяСтрока = Объект.РасшифровкаПлатежа[0].ПолучитьИдентификатор();
		
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	УстановитьКурсДокумента();
	
	Если Параметры.Ключ.Пустая() Тогда // проверить объект на то, что он еще не внесен в ИБ	
		
		Объект.ФормаОплаты = ПредопределенноеЗначение("Перечисление.уатФормыОплаты.Наличные");
		
		Если Не ЗначениеЗаполнено(Объект.БанковскийСчетКасса) Тогда
			Объект.БанковскийСчетКасса = ПредопределенноеЗначение("Справочник.Кассы.ПустаяСсылка");
			
			Если Объект.ФормаОплаты = ПредопределенноеЗначение("Перечисление.уатФормыОплаты.Наличные") Тогда
				
				мКасса = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнаяКасса");
				Если мКасса <> Неопределено Тогда
					ВалютаКассы = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(мКасса, "ВалютаДенежныхСредств");
				Иначе
					ВалютаКассы = Неопределено;
				КонецЕсли;
				Если Не ЗначениеЗаполнено(Объект.ВалютаДокумента) Тогда
					Объект.БанковскийСчетКасса = мКасса;
					Объект.ВалютаДокумента     = ВалютаКассы;
				ИначеЕсли ВалютаКассы = Объект.ВалютаДокумента Тогда
					Объект.БанковскийСчетКасса = мКасса;
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		Если ПараметрыЗначениеКопирования.Пустая() Тогда
			ЗаполнитьКонтрагента();
		Иначе
			УстановитьКурсДокумента();
		КонецЕсли;
		
	Иначе
		УстановитьКурсДокумента();
		
	КонецЕсли;
	
	// уатСогласованиеДокументов
	уатСогласованиеДокументовКлиент.ОбновитьСтатусСогласования(ЭтотОбъект);
	// Конец уатСогласованиеДокументов
	
	СтараяВалютаДокумента = Объект.ВалютаДокумента;
	
	// Установить видимость реквизитов и заголовков колонок.
	Если Объект.РасшифровкаПлатежа.Количество()>1 Тогда
		СпособРедактирования = 1;
	Иначе
		СпособРедактирования = 0;
	КонецЕсли;
	
	УстановитьОграничениеТипаСделка();
	УправлениеДоступностьюНоменклатуры();
	УстановитьВидимость();
	
	РассчитатьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// уатСогласованиеДокументов
	уатСогласованиеДокументовКлиент.ПослеЗаписи(ЭтотОбъект);
	// Конец уатСогласованиеДокументов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Если НЕ ОтветПередЗаписью
		И (ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Запись ИЛИ ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение)
		И Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа") <> Объект.СуммаДокумента Тогда
		
		Отказ = Истина;
		
		ТекстНСТР = НСтр("en='Do not match document amount (%1) and its interpretation (%2). Recalculate amount of document?';ru='Не совпадают сумма документа (%1) и ее расшифровка (%2). Пересчитать сумму документа?'");
		ТекстНСТР = СтрШаблон(ТекстНСТР, Объект.СуммаДокумента, Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа"));
		ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗаписьюЗавершение", ЭтотОбъект, Новый Структура("ПараметрыЗаписи", ПараметрыЗаписи)),
			ТекстНСТР, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОтветПередЗаписью = Истина;
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
		Записать(ДополнительныеПараметры.ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	// уатСогласованиеДокументов
	уатСогласованиеДокументовКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр);
	// Конец уатСогласованиеДокументов
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если Не ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		Если ВыбранноеЗначение = "АвтоПодбор" Тогда
			Если Объект.РасшифровкаПлатежа.Количество()>1 Тогда
				СпособРедактирования = 1;
			ИначеЕсли Объект.РасшифровкаПлатежа.Количество()=0 Тогда
				СпособРедактирования = 0;
				НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
			КонецЕсли;
			
			СтрокаПлатеж = Объект.РасшифровкаПлатежа[0];
		КонецЕсли;
		
	Иначе
		Если Не ВыбранноеЗначение.ЕстьПодбор Тогда
			
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("ДоговорКонтрагента", ВыбранноеЗначение.ДоговорКонтрагента);
			
			ВедениеВзаиморасчетов = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(ВыбранноеЗначение.ДоговорКонтрагента, "ВедениеВзаиморасчетов");
			Если ВедениеВзаиморасчетов = ПредопределенноеЗначение("Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам")
				ИЛИ ВедениеВзаиморасчетов = ПредопределенноеЗначение("Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоНакладным")
				ИЛИ ВедениеВзаиморасчетов = ПредопределенноеЗначение("Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказамНаТС") Тогда
				СтруктураОтбора.Вставить("Сделка", ВыбранноеЗначение.Сделка);
			КонецЕсли;
			
			МассивСтрок = Объект.РасшифровкаПлатежа.НайтиСтроки(СтруктураОтбора);
			
			Если Не МассивСтрок = Неопределено Тогда
				Для Каждого Строка Из МассивСтрок Цикл
					Объект.РасшифровкаПлатежа.Удалить(Строка);
				КонецЦикла;
			КонецЕсли;
			
			Если Объект.РасшифровкаПлатежа.Количество() > 0 И Не ЗначениеЗаполнено(Объект.РасшифровкаПлатежа[0].ДоговорКонтрагента) Тогда
				Объект.РасшифровкаПлатежа.Удалить(Объект.РасшифровкаПлатежа[0]);
			КонецЕсли;
			
		КонецЕсли;
		
		Если (Не (Объект.РасшифровкаПлатежа.Количество() = 1 И Не Булево(СпособРедактирования))) 
			ИЛИ Объект.РасшифровкаПлатежа.Количество()=0 Тогда
			СтрокаПлатеж = Объект.РасшифровкаПлатежа.Добавить();
		КонецЕсли;
		
		СтрокаПлатеж.ДоговорКонтрагента = ВыбранноеЗначение.ДоговорКонтрагента;
		СтрокаПлатеж.Сделка             = ВыбранноеЗначение.Сделка;
		
		СтрокаПлатеж.СуммаПлатежа            = ВыбранноеЗначение.СуммаПлатежа;
		СтрокаПлатеж.КурсВзаиморасчетов      = ВыбранноеЗначение.КурсВзаиморасчетов;
		СтрокаПлатеж.КратностьВзаиморасчетов = ВыбранноеЗначение.КратностьВзаиморасчетов;
				
	КонецЕсли;
	
	Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	РассчитатьИтоги();
	
	УстановитьФокус();
	УстановитьВидимость();
	УстановитьОграничениеТипаСделка();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если флВопросЗакрытиеФормы Тогда
		Отказ = Истина;
		Оповещ = Новый ОписаниеОповещения("ПередЗакрытиемВопрос", ЭтотОбъект);
		ПоказатьВопрос(Оповещ, "При проверке корректности заполнения документа возникли предупреждения!
			|Продолжить закрытие формы?", РежимДиалогаВопрос.ОКОтмена);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОперацияОплатаПоставщику(Команда)
	Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийЗаявкиНаРасходование.ОплатаПоставщику");
	ВидОперацииПриИзменении();
КонецПроцедуры

&НаКлиенте
Процедура ОперацияПрочиеРасчетыСКонтрагентами(Команда)
	Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийЗаявкиНаРасходование.ПрочиеРасчетыСКонтрагентами");
	ВидОперацииПриИзменении();
КонецПроцедуры

&НаКлиенте
Процедура ОперацияРасходДенежныхСредствПрочее(Команда)
	Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийЗаявкиНаРасходование.ПрочийРасходДенежныхСредств");
	ВидОперацииПриИзменении();
КонецПроцедуры

&НаКлиенте
Процедура ОперацияВыдачаПодотчетнику(Команда)
	Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийЗаявкиНаРасходование.ВыдачаПодотчетнику");
	ВидОперацииПриИзменении();
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении()
	Если ЗначениеЗаполнено(Объект.Контрагент) И Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийЗаявкиНаРасходование.ВыдачаПодотчетнику") Тогда
		Объект.Контрагент = Неопределено;
	ИначеЕсли ЗначениеЗаполнено(Объект.ПодотчетноеЛицо) И Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.уатВидыОперацийЗаявкиНаРасходование.ВыдачаПодотчетнику") Тогда
		Объект.ПодотчетноеЛицо = Неопределено;
	КонецЕсли;
		
	Объект.РасшифровкаПлатежа.Очистить();
	СтрокаПлатеж = Объект.РасшифровкаПлатежа.Добавить();
	СтрокаПлатеж.СуммаПлатежа = Объект.СуммаДокумента;
	
	СпособРедактирования = 0;
	
	УстановитьФокус();
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура НачалоВыбораСделки(Элемент, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда 
		СтандартнаяОбработка = Ложь;
		
		Если СпособРедактирования = 0 Тогда 
			ПолеДанных = "Элементы.РасшифровкаПлатежа.ТекущиеДанные.Сделка";
		Иначе 
			ТекСтрока = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
			Если Не ТекСтрока = Неопределено Тогда 
				ИндексСтроки = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(ТекСтрока.ПолучитьИдентификатор()).НомерСтроки-1;
				ПолеДанных = "Объект.РасшифровкаПлатежа["+Формат(ИндексСтроки,"ЧГ=0")+"].Сделка";
			Иначе 
				ПолеДанных = "Объект.РасшифровкаПлатежа";
			КонецЕсли;
		КонецЕсли;
		
		ТекстНСТР = НСтр("en='You must select the contract of counterparty.';ru='Необходимо выбрать договор контрагента.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР,, ПолеДанных);
		
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		СтандартнаяОбработка = Ложь;
		ТекстНСТР = НСтр("en='Not selected counterparty contract!';ru='Не выбран договор контрагента!'");
		ПоказатьПредупреждение(Неопределено, ТекстНСТР);
		Возврат;
	КонецЕсли;
	// Тип выбираемого значения зависит от договора.
	ВидДоговораКонтрагента = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(СтрокаПлатеж.ДоговорКонтрагента, "ВидДоговора");
	Если ВидДоговораКонтрагента = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.Прочее") Тогда
		СтандартнаяОбработка = Ложь;
		ТекстНСТР = НСтр("en='Under contracts with  type ""other"", there are no payments on deals!';ru='По договорам с видом ""Прочее"" не ведутся взаиморасчеты по сделкам!'");
		ПоказатьПредупреждение(Неопределено, ТекстНСТР);
		Возврат;
	КонецЕсли;
			
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОграничениеТипаСделка()
	ВедениеВзаиморасчетов = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(СтрокаПлатеж.ДоговорКонтрагента, "ВедениеВзаиморасчетов");
	Если ВедениеВзаиморасчетов = ПредопределенноеЗначение("Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоНакладным") Тогда
		Элементы.РасшифровкаПлатежаСделка.ОграничениеТипа = Новый ОписаниеТипов("ДокументСсылка.уатПоступлениеТоваровУслуг");
		Элементы.РасшифровкаПлатежаСделка1.ОграничениеТипа = Новый ОписаниеТипов("ДокументСсылка.уатПоступлениеТоваровУслуг");
		Элементы.РасшифровкаПлатежаСделка1.Заголовок = НСтр("en='Income';ru='Поступление'");
		Элементы.РасшифровкаПлатежаСделка1.Подсказка = НСтр("en='Receipt of materials and services';ru='Поступление материалов и услуг'");
		
		мсвПараметрыВыбора = Новый Массив;
		мсвПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.ДоговорКонтрагента", СтрокаПлатеж.ДоговорКонтрагента));
		Элементы.РасшифровкаПлатежаСделка.ПараметрыВыбора = Новый ФиксированныйМассив(мсвПараметрыВыбора);
		Элементы.РасшифровкаПлатежаСделка1.ПараметрыВыбора = Новый ФиксированныйМассив(мсвПараметрыВыбора);
		
	ИначеЕсли ВедениеВзаиморасчетов = ПредопределенноеЗначение("Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам") Тогда
		Элементы.РасшифровкаПлатежаСделка.ОграничениеТипа = Новый ОписаниеТипов("ДокументСсылка.уатСчетНаОплатуПоставщика");
		Элементы.РасшифровкаПлатежаСделка1.ОграничениеТипа = Новый ОписаниеТипов("ДокументСсылка.уатСчетНаОплатуПоставщика");
		Элементы.РасшифровкаПлатежаСделка1.Заголовок = НСтр("en='Invoice';ru='Счет на оплату'");
		Элементы.РасшифровкаПлатежаСделка1.Подсказка = НСтр("en='Invoice for supplier';ru='Счет на оплату поставщика'");
		
		мсвПараметрыВыбора = Новый Массив;
		мсвПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.ДоговорКонтрагента", СтрокаПлатеж.ДоговорКонтрагента));
		Элементы.РасшифровкаПлатежаСделка.ПараметрыВыбора = Новый ФиксированныйМассив(мсвПараметрыВыбора);
		Элементы.РасшифровкаПлатежаСделка1.ПараметрыВыбора = Новый ФиксированныйМассив(мсвПараметрыВыбора);
		
	ИначеЕсли ВедениеВзаиморасчетов = ПредопределенноеЗначение("Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказамНаТС") Тогда
		Элементы.РасшифровкаПлатежаСделка.ОграничениеТипа = Новый ОписаниеТипов("ДокументСсылка.уатЗаказГрузоотправителя");
		Элементы.РасшифровкаПлатежаСделка1.ОграничениеТипа = Новый ОписаниеТипов("ДокументСсылка.уатЗаказГрузоотправителя");
		Элементы.РасшифровкаПлатежаСделка1.Заголовок = НСтр("en='Order for trucking';ru='Заказ на ТС'");
		Элементы.РасшифровкаПлатежаСделка1.Подсказка = НСтр("en='Order for trucking';ru='Заказ на ТС'");
		
		
		мсвЗаказыДляОтбора = уатОбщегоНазначения_проф.ПолучитьЗаказыПоДоговору(СтрокаПлатеж.ДоговорКонтрагента, Ложь);
		
		мсвПараметрыВыбора = Новый Массив;
		мсвПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", мсвЗаказыДляОтбора));
		Элементы.РасшифровкаПлатежаСделка.ПараметрыВыбора = Новый ФиксированныйМассив(мсвПараметрыВыбора);
		Элементы.РасшифровкаПлатежаСделка1.ПараметрыВыбора = Новый ФиксированныйМассив(мсвПараметрыВыбора);
		
	Иначе
		Элементы.РасшифровкаПлатежаСделка.ОграничениеТипа = Новый ОписаниеТипов("Неопределено");
		Элементы.РасшифровкаПлатежаСделка1.ОграничениеТипа = Новый ОписаниеТипов("Неопределено");
		Элементы.РасшифровкаПлатежаСделка1.Заголовок = НСтр("en='Deal';ru='Сделка'");
		Элементы.РасшифровкаПлатежаСделка1.Подсказка = НСтр("en='Invoice for buyer or Receipt of materials and services';ru='Счет на оплату покупателю или Поступление материалов и услуг'");
		
		мсвПараметрыВыбора = Новый Массив;
		Элементы.РасшифровкаПлатежаСделка.ПараметрыВыбора = Новый ФиксированныйМассив(мсвПараметрыВыбора);
		Элементы.РасшифровкаПлатежаСделка1.ПараметрыВыбора = Новый ФиксированныйМассив(мсвПараметрыВыбора);
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	УстановитьКурсДокумента();
		
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ПриИзмененииОрганизации();
	ПриИзмененииОрганизацииНаСервере();
	
	// уатСогласованиеДокументов
	уатСогласованиеДокументовКлиент.ОрганизацияПодразделениеПриИзменении(ЭтотОбъект);
	// Конец уатСогласованиеДокументов
	
	УстановитьФокус();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииОрганизацииНаСервере()

	Если Объект.ФормаОплаты = Перечисления.уатФормыОплаты.Безналичные Тогда
		Если НЕ ЗначениеЗаполнено(Объект.БанковскийСчетКасса) 
			ИЛИ (ПолучитьОрганизациюПоСчетуНаСервере(Объект.БанковскийСчетКасса) <> Объект.Организация) Тогда
			
			Объект.БанковскийСчетКасса = ПолучитьСчетПоОрганизацииНаСервере(Объект.Организация);
			
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПолучитьСчетПоОрганизацииНаСервере(ТекОрганизация)

	Если ЗначениеЗаполнено(ТекОрганизация)
		И ТипЗнч(ТекОрганизация) = Тип("СправочникСсылка.Организации") Тогда
		
		Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитСправочника("ОсновнойБанковскийСчет", "Организации") Тогда
			Возврат ТекОрганизация.ОсновнойБанковскийСчет;
		КонецЕсли;
	Иначе
		Если Метаданные.Справочники.Найти("БанковскиеСчета") <> Неопределено Тогда
			Возврат Справочники.БанковскиеСчета.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;

КонецФункции // ПолучитьСчетПоОрганизацииНаСервере()

&НаСервере
Функция ПолучитьОрганизациюПоСчетуНаСервере(ТекСчет)

	Если ЗначениеЗаполнено(ТекСчет) Тогда
		Возврат ТекСчет.Владелец;
	Иначе 
		Возврат Справочники.Организации.ПустаяСсылка();
	КонецЕсли;

КонецФункции // ПолучитьОрганизациюПоСчетуНаСервере()

&НаКлиенте
Процедура ТребуетСогласованияПриИзменении(Элемент)
	
	// уатСогласованиеДокументов
	уатСогласованиеДокументовКлиент.ТребуетСогласованияПриИзменении(ЭтотОбъект);
	// Конец уатСогласованиеДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСогласованНажатие(Элемент)
	
	// уатСогласованиеДокументов
	уатСогласованиеДокументовКлиент.НадписьСогласованНажатие(ЭтотОбъект);
	// Конец уатСогласованиеДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаОплатыПриИзменении(Элемент)
	
	Если Объект.ФормаОплаты = ПредопределенноеЗначение("Перечисление.уатФормыОплаты.Безналичные") Тогда
		Объект.БанковскийСчетКасса = Новый(Тип("СправочникСсылка.БанковскиеСчета"));
	ИначеЕсли Объект.ФормаОплаты = ПредопределенноеЗначение("Перечисление.уатФормыОплаты.Наличные") Тогда
		Объект.БанковскийСчетКасса = Новый(Тип("СправочникСсылка.Кассы"));
	Иначе
		Объект.БанковскийСчетКасса = Неопределено;
	КонецЕсли;
	
	ПриИзмененииОрганизацииНаСервере();
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура БанковскийСчетКассаПриИзменении(Элемент)
	
	ПересчитыватьСумму = Истина;
	
	ВалютаДенежныхСредствКассы = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(Объект.БанковскийСчетКасса, "ВалютаДенежныхСредств");
	СтараяВалюта = Объект.ВалютаДокумента;
	уатОбщегоНазначенияТиповые_проф.ПриИзмененииЗначенияКассыБанковскогоСчета(Объект.ВалютаДокумента, 
		Объект.КурсДокумента, Объект.КратностьДокумента, Объект.Дата, Объект.СуммаДокумента, ВалютаДенежныхСредствКассы);
	
	// Пересчитаем суммы платежей при изменении валюты
	Если ПересчитыватьСумму Тогда
		Если уатОбщегоНазначения_проф.ЕстьРасчетыСКонтрагентами(Объект.ВидОперации) Тогда
			Для Каждого Строка Из Объект.РасшифровкаПлатежа Цикл
				СтрокаПлатеж = Строка;
				
				ВалютаВзаиморасчетов = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(СтрокаПлатеж.ДоговорКонтрагента, "ВалютаВзаиморасчетов");
				
				Если НЕ ЗначениеЗаполнено(ВалютаВзаиморасчетов) Тогда
					ВалютаВзаиморасчетов = СтараяВалюта;
				КонецЕсли;
				
				Если ВалютаВзаиморасчетов <> Объект.ВалютаДокумента Тогда
					Строка.СуммаПлатежа = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(Строка.СуммаПлатежа,
						ВалютаВзаиморасчетов, Объект.ВалютаДокумента, Объект.Дата, Объект.Дата);
						
					Строка.ДоговорКонтрагента = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
					ПриИзмененииДоговора();
                КонецЕсли;
			КонецЦикла;
		Иначе
			СуммаДокументаПриИзменении(Неопределено);
		КонецЕсли;
		
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	Иначе
		Для Каждого Строка Из Объект.РасшифровкаПлатежа Цикл
			ВалютаВзаиморасчетов = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(СтрокаПлатеж.ДоговорКонтрагента, "ВалютаВзаиморасчетов");
			
			Если ВалютаВзаиморасчетов <> Объект.ВалютаДокумента Тогда
				Строка.ДоговорКонтрагента = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	УстановитьФокус();
	УстановитьВидимость();
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(Объект.БанковскийСчетКасса, "Владелец");
	КонецЕсли;
	
	РассчитатьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаПриИзменении(Элемент)
	
	РассчитатьСуммуПлатежа();
	
КонецПроцедуры

&НаКлиенте
Процедура БанковскийСчетКассаОчистка(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка=Ложь;
	
	Если Объект.ФормаОплаты = ПредопределенноеЗначение("Перечисление.уатФормыОплаты.Безналичные") Тогда
		Объект.БанковскийСчетКасса = ПредопределенноеЗначение("Справочник.БанковскиеСчета.ПустаяСсылка");
	Иначе
		Объект.БанковскийСчетКасса = ПредопределенноеЗначение("Справочник.Кассы.ПустаяСсылка");
	КонецЕсли;
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	// проставим основной договор контрагента
	ПриИзмененииКонтрагента();
	ПриИзмененииДоговора();
	УстановитьФокус();
	
КонецПроцедуры

&НаКлиенте
Процедура СпособРедактированияПриИзменении(Элемент)
	
	Если Не Булево(СпособРедактирования) И Объект.РасшифровкаПлатежа.Количество()>1 Тогда
		ТекстНСТР = НСтр("en='All lines of payment decryption except the first will be deleted. Do you want to continue?';ru='Все строки расшифровки платежа, кроме первой, будут удалены. Продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("СпособРедактированияПриИзмененииЗавершение", ЭтотОбъект),
			ТекстНСТР, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
        Возврат;
	Иначе
		Элементы.РасшифровкаПлатежа.ТекущаяСтрока = Объект.РасшифровкаПлатежа[0].ПолучитьИдентификатор();
		СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	КонецЕсли;
	
	УстановитьВидимость();
    РассчитатьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура СпособРедактированияПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	
	Если Ответ <> КодВозвратаДиалога.Да Тогда
		СпособРедактирования = 1;
		Возврат;
	КонецЕсли;
	
	Пока Объект.РасшифровкаПлатежа.Количество()>1 Цикл
		СтрокаУдаления = Объект.РасшифровкаПлатежа[1];
		Объект.РасшифровкаПлатежа.Удалить(СтрокаУдаления);
	КонецЦикла;
	
	Элементы.РасшифровкаПлатежа.ТекущаяСтрока = Объект.РасшифровкаПлатежа[0].ПолучитьИдентификатор();
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	//СтрокаПлатеж.СуммаПлатежа = Объект.СуммаДокумента;
	
	Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	
	УстановитьВидимость();
    РассчитатьИтоги();

КонецПроцедуры

&НаКлиенте
Процедура ОснованиеОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Если ЗначениеЗаполнено(Объект.ДокументОснование) Тогда
		ПоказатьЗначение(Неопределено, Объект.ДокументОснование);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте 
Процедура СценарийПриИзменении(Элемент)
	
	ДетПлСценарий = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(Объект.Сценарий, "ДетализацияПланирования");
	Если ДетПлСценарий = ПредопределенноеЗначение("Перечисление.уатДетализацияПланирования.МодельТС")
		И Не ТипЗнч(Объект.Номенклатура)=Тип("СправочникСсылка.уатМоделиТС") Тогда
			Объект.Номенклатура = Новый(Тип("СправочникСсылка.уатМоделиТС"));
	ИначеЕсли ДетПлСценарий = ПредопределенноеЗначение("Перечисление.уатДетализацияПланирования.ТС")
		И Не ТипЗнч(Объект.Номенклатура)=Тип("СправочникСсылка.уатТС") Тогда
			Объект.Номенклатура = Новый(Тип("СправочникСсылка.уатТС"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте 
Процедура СтатьяОборотовПриИзменении(Элемент)
	
	УправлениеДоступностьюНоменклатуры();
	
КонецПроцедуры

&НаКлиенте 
Процедура НоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДетПлСценарий = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(Объект.Сценарий, "ДетализацияПланирования");
	Если ДетПлСценарий = ПредопределенноеЗначение("Перечисление.уатДетализацияПланирования.ТС") Тогда
		ПараметрыОткрытия = Новый Структура;
		Если ЗначениеЗаполнено(Объект.Номенклатура) И ТипЗнч(Объект.Номенклатура)=Тип("СправочникСсылка.уатТС") Тогда
			ПараметрыОткрытия.Вставить("ТекущаяСтрока", Объект.Номенклатура);
		КонецЕсли;
		ФормаВыбора = ОткрытьФорму("Справочник.уатТС.ФормаВыбора", ПараметрыОткрытия, Элемент);
	ИначеЕсли ДетПлСценарий = ПредопределенноеЗначение("Перечисление.уатДетализацияПланирования.МодельТС") Тогда
		ПараметрыОткрытия = Новый Структура;
		Если ЗначениеЗаполнено(Объект.Номенклатура) И ТипЗнч(Объект.Номенклатура)=Тип("СправочникСсылка.уатМоделиТС") Тогда
			ПараметрыОткрытия.Вставить("ТекущаяСтрока", Объект.Номенклатура);
		КонецЕсли;
		ФормаВыбора = ОткрытьФорму("Справочник.уатМоделиТС.ФормаВыбора", ПараметрыОткрытия, Элемент);
	Иначе
		ПараметрыОткрытия = Новый Структура;
		Если ЗначениеЗаполнено(Объект.Номенклатура) И ТипЗнч(Объект.Номенклатура)=Тип("СправочникСсылка.Номенклатура") Тогда
			ПараметрыОткрытия.Вставить("ТекущаяСтрока", Объект.Номенклатура);
		КонецЕсли;
		ФормаВыбора = ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора", ПараметрыОткрытия, Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_РасшифровкаПлатежа

&НаКлиенте
Процедура РасшифровкаПлатежаДоговорКонтрагентаПриИзменении(Элемент)
	
	ПриИзмененииДоговора();
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаДоговорКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда 
		СтандартнаяОбработка = Ложь;
		
		ТекСтрока = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
		Если Не ТекСтрока = Неопределено Тогда 
			ИндексСтроки = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(ТекСтрока.ПолучитьИдентификатор()).НомерСтроки-1;
			ПолеДанных = "Объект.РасшифровкаПлатежа["+Формат(ИндексСтроки,"ЧГ=0")+"].ДоговорКонтрагента";
		Иначе 
			ПолеДанных = "Объект.РасшифровкаПлатежа";
		КонецЕсли;
		
		ТекстНСТР = НСтр("en='You must select a counterparty.';ru='Необходимо выбрать контрагента.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР,,ПолеДанных);
		
		Возврат;
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийЗаявкиНаРасходование.ПрочиеРасчетыСКонтрагентами") Тогда
		мВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.Прочее");
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийЗаявкиНаРасходование.ОплатаПоставщику") Тогда
		мВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком");
	КонецЕсли;
	
	СтруктураОтбора = Новый Структура("ЗначениеОтбора", Объект.ВалютаДокумента);
	СтруктураДопПараметров = Новый Структура("ВалютаВзаиморасчетов", СтруктураОтбора);
	уатОбщегоНазначенияТиповыеКлиент.уатНачалоВыбораЗначенияДоговораКонтрагента(Объект, ЭтотОбъект, Элемент, Объект.Контрагент, 
		Элементы.РасшифровкаПлатежа.ТекущиеДанные.ДоговорКонтрагента, мВидДоговора, СтандартнаяОбработка, СтруктураДопПараметров);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаСоздание(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВидДоговораДоступныеЗначения = Новый Массив;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийЗаявкиНаРасходование.ПрочиеРасчетыСКонтрагентами") Тогда
		мВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.Прочее");
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийЗаявкиНаРасходование.ОплатаПоставщику") Тогда
		мВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком");
	КонецЕсли;
	ВидДоговораДоступныеЗначения.Добавить(мВидДоговора);
	
	ПараметрыФормы = Новый Структура(); 
	ПараметрыФормы.Вставить("Владелец", Объект.Контрагент);
	ПараметрыФормы.Вставить("ВидДоговораДоступныеЗначения", ВидДоговораДоступныеЗначения);
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСделкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСделки(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаКурсВзаиморасчетовПриИзменении(Элемент)
	
	РассчитатьСуммуПлатежа();
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаКратностьВзаиморасчетовПриИзменении(Элемент)
	РассчитатьСуммуПлатежа();
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаКурсВзаиморасчетовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	// Отменить стандартную обработку.
	СтандартнаяОбработка = Ложь;
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	// Если не заполнен договор, то курс взаиморасчетов выбрать нельзя
	Если Не ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		ТекстНСТР = НСтр("en='To select a course of mutual settlements need to choose the counterparty contract.';ru='Для выбора курса взаиморасчетов нужно выбрать договор контрагента.'");
		ПоказатьПредупреждение(Неопределено, ТекстНСТР); 
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Валюта", уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(СтрокаПлатеж.ДоговорКонтрагента, "ВалютаВзаиморасчетов"));
	ПараметрыФормы.Вставить("КратностьВалюты", СтрокаПлатеж.КратностьВзаиморасчетов);
	ПараметрыФормы.Вставить("КурсВалюты", СтрокаПлатеж.КурсВзаиморасчетов);
	ПараметрыФормы.Вставить("ДатаУстановкиКурсаИКратности", Объект.Дата);
	ОповещениеЗакрытие = Новый ОписаниеОповещения("КурсВзаиморасчетовНачалоВыбораЗакрытие", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.уатФормаВводаКурсаИКратности", ПараметрыФормы, ЭтотОбъект,,,, ОповещениеЗакрытие, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура КурсВзаиморасчетовНачалоВыбораЗакрытие(Результат, ДопПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		СтрокаПлатеж.КурсВзаиморасчетов      = Результат.КурсВалюты;
		СтрокаПлатеж.КратностьВзаиморасчетов = Результат.КратностьВалюты;
	КонецЕсли;
	
	РассчитатьСуммуПлатежа();
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаПлатежаПриИзменении(Элемент)
	
	Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПередУдалением(Элемент, Отказ)
	
	Если Объект.РасшифровкаПлатежа.Количество()=1 Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПриИзменении(Элемент)
	Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	РассчитатьИтоги();
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	УстановитьОграничениеТипаСделка();
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПриАктивизацииСтроки(Элемент)
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСделка1ПриИзменении(Элемент)
	
	ТекДанные = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекДанные.Сделка) Тогда
		ВедениеВзаиморасчетов = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(СтрокаПлатеж.ДоговорКонтрагента, "ВедениеВзаиморасчетов");
		Если (ВедениеВзаиморасчетов = ПредопределенноеЗначение("Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам")
			ИЛИ ВедениеВзаиморасчетов = ПредопределенноеЗначение("Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоНакладным")) Тогда
			
			СделкаСтруктура = ПолучитьРеквизитыСделки(ТекДанные.Сделка);
			ТекДанные.КратностьВзаиморасчетов	 = СделкаСтруктура.КратностьВзаиморасчетов;
			ТекДанные.КурсВзаиморасчетов		 = СделкаСтруктура.КурсВзаиморасчетов;
			ТекДанные.СуммаПлатежа				 = СделкаСтруктура.СуммаПлатежа;

			Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ЗаполнитьПлатежи(Команда)
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстНСТР = НСтр("en='You must specify company';ru='Необходимо указать организацию'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР,,"Объект.Организация");
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ТекстНСТР = НСтр("en='You must specify the counterparty';ru='Необходимо указать контрагента'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР,,"Объект.Контрагент");
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДокументСсылка",              Объект.Ссылка);
	СтруктураПараметров.Вставить("КурсДокумента",               Объект.КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента",          Объект.КратностьДокумента);
	СтруктураПараметров.Вставить("ТипЗадолженности",            "<0");
	СтруктураПараметров.Вставить("Контрагент",                  Объект.Контрагент);
	СтруктураПараметров.Вставить("БанковскийСчетКасса",         Объект.БанковскийСчетКасса);
	СтруктураПараметров.Вставить("Организация",                 Объект.Организация);
	СтруктураПараметров.Вставить("ВалютаДокумента",             Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("ДатаДок",                     Объект.Дата);
	СтруктураПараметров.Вставить("СуммаДляПодбора",             Объект.СуммаДокумента);
	СтруктураПараметров.Вставить("ПлатежПоСуммеВзаиморасчетов", Истина);
	СтруктураПараметров.Вставить("ЕстьПодбор",                  Ложь);
		
	мсвСтрокРасшифровка = Новый Массив;
	Для Каждого ТекСтрока Из Объект.РасшифровкаПлатежа Цикл
		НовСтрока = Новый Структура("ДоговорКонтрагента, КурсВзаиморасчетов, КратностьВзаиморасчетов, СуммаВзаиморасчетов, СуммаПлатежа, Сделка");
		ЗаполнитьЗначенияСвойств(НовСтрока, ТекСтрока);
		//НовСтрока.Вставить("Валюта", ТекСтрока.ВалютаВзаиморасчетов);
	КонецЦикла;
	СтруктураПараметров.Вставить("РасшифровкаПлатежа", мсвСтрокРасшифровка);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбработкаСобытияЗаполнениеПлатежей", ЭтотОбъект);
	ОткрытьФорму("Обработка.уатПодборПараметровРасшифровкиПлатежа.Форма.ПараметрыЗаполнения", СтруктураПараметров, ЭтотОбъект,,,,ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборВРасшифровку(Команда)
	ПодборПоЗадолженности(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ПодборДоговора(Команда)
	ПодборПоЗадолженности(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПодборПоЗадолженности(флБезРазбиения)
	
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ТекстНСТР = НСтр("en='You must specify the counterparty';ru='Необходимо указать контрагента'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР,,"Объект.Контрагент");
		Возврат;
	КонецЕсли;
	
	ФормаПодбора = ПолучитьФорму("Обработка.уатПодборПараметровРасшифровкиПлатежа.Форма.ФормаПодбораЗадолженностей",,ЭтотОбъект);
	
	ФормаПодбора.ДокументСсылка              = Объект.Ссылка;
	Для Каждого ТекСтрока Из Объект.РасшифровкаПлатежа Цикл 
		НовСтрока = ФормаПодбора.ДокументРасшифровкаПлатежа.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока, ТекСтрока);
		НовСтрока.Валюта = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(ТекСтрока.ДоговорКонтрагента, "ВалютаВзаиморасчетов");
	КонецЦикла;
	ФормаПодбора.КурсДокумента               = Объект.КурсДокумента;
	ФормаПодбора.КратностьДокумента          = Объект.КратностьДокумента;
	ФормаПодбора.ТипЗадолженности            = "<0";
	ФормаПодбора.Контрагент                  = Объект.Контрагент;
	ФормаПодбора.БанковскийСчетКасса         = Объект.БанковскийСчетКасса;
	ФормаПодбора.Организация                 = Объект.Организация;
	ФормаПодбора.ВалютаДокумента             = Объект.ВалютаДокумента;
	ФормаПодбора.ДатаДок                     = Объект.Дата;
	ФормаПодбора.СуммаДляПодбора             = Объект.СуммаДокумента;
	ФормаПодбора.ПлатежПоСуммеВзаиморасчетов = Истина;
	ФормаПодбора.ЕстьПодбор                  = Истина;
	
	ФормаПодбора.ЗакрыватьПриВыборе          = флБезРазбиения;
	
	ФормаПодбора.Открыть();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// Рассчитывает новый курс документа при смене даты
//
&НаКлиенте
Процедура УстановитьКурсДокумента()
	
	СтруктураКурсаВалютаДокумента = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
	Объект.КурсДокумента        = СтруктураКурсаВалютаДокумента.Курс;
	Объект.КратностьДокумента   = СтруктураКурсаВалютаДокумента.Кратность;
	
КонецПроцедуры // УстановитьКурсДокумента()

// Проверяет установленные курсы валют документа перед пересчетом сумм
// Нулевые курсы устанавливаются в 1
//
&НаКлиенте
Процедура ПроверкаКурсовВалют(СтрокаПлатеж=Неопределено)
	
	Объект.КурсДокумента      = ?(Объект.КурсДокумента=0, 1, Объект.КурсДокумента);
	Объект.КратностьДокумента = ?(Объект.КратностьДокумента=0, 1, Объект.КратностьДокумента);
	
	Если Не СтрокаПлатеж = Неопределено Тогда
		СтрокаПлатеж.КурсВзаиморасчетов      = ?(СтрокаПлатеж.КурсВзаиморасчетов=0, 1, СтрокаПлатеж.КурсВзаиморасчетов);
		СтрокаПлатеж.КратностьВзаиморасчетов = ?(СтрокаПлатеж.КратностьВзаиморасчетов=0, 1, СтрокаПлатеж.КратностьВзаиморасчетов);
	КонецЕсли;
	
КонецПроцедуры // ПроверкаКурсовВалют()

// Процедура устанавливает видимость для тех колонок в табличной части 
// "Товары", видимость которых определяется реквизитами документа.
//
// Параметры:
//  Нет.
//
&НаКлиенте
Процедура УстановитьВидимость()
	
	ВидОперации_ОплатаПоставщику = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийЗаявкиНаРасходование.ОплатаПоставщику"));
	ВидОперации_ПрочиеРасчеты = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийЗаявкиНаРасходование.ПрочиеРасчетыСКонтрагентами"));
	ВидОперации_РасходПрочий = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийЗаявкиНаРасходование.ПрочийРасходДенежныхСредств"));
	ВидОперации_ВыдачаПодотчетнику = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийЗаявкиНаРасходование.ВыдачаПодотчетнику"));
	
	Элементы.ФормаОперацияОплатаПоставщику.Пометка            = ВидОперации_ОплатаПоставщику;
	Элементы.ФормаОперацияПрочиеРасчетыСКонтрагентами.Пометка = ВидОперации_ПрочиеРасчеты;
	Элементы.ФормаОперацияРасходДенежныхСредствПрочее.Пометка = ВидОперации_РасходПрочий;
	Элементы.ФормаОперацияВыдачаПодотчетнику.Пометка          = ВидОперации_ВыдачаПодотчетнику;
	
	Если ВидОперации_РасходПрочий Тогда
		Элементы.СтраницаОсновная.Заголовок = НСтр("en='Other expenses';ru='Прочие расходы'");
		Элементы.СтраницаОсновнаяСтраницы.ТекущаяСтраница = Элементы.ПрочиеРасходы;
		
		Элементы.ГруппаДоговорКонтрагента.Видимость = Истина;
		Элементы.РасшифровкаПлатежаДоговорКонтрагента.Видимость = Истина;
		Элементы.СпособРедактирования.Видимость = Ложь;
			
		Элементы.Контрагент.Видимость = Истина;
		Элементы.ПодотчетноеЛицо.Видимость = Ложь;
		
		Элементы.РасшифровкаПлатежаПодборВРасшифровку.Видимость = Истина;
		Элементы.РасшифровкаПлатежаЗаполнитьПлатежи.Видимость = Истина;
			
	Иначе
		Элементы.СтраницаОсновная.Заголовок = НСтр("en='Settlements with counterparties';ru='Расчеты с контрагентами'");
		Элементы.СтраницаОсновнаяСтраницы.ТекущаяСтраница = Элементы.Расчеты;
		
		Если Булево(СпособРедактирования) Тогда
			Элементы.ГруппаПлатежи.ТекущаяСтраница = Элементы.ГруппаПлатежи.ПодчиненныеЭлементы.ПлатежиПоНесколькимСделкам;
		Иначе
			Элементы.ГруппаПлатежи.ТекущаяСтраница = Элементы.ГруппаПлатежи.ПодчиненныеЭлементы.ПлатежиПоОднойСделке;
		КонецЕсли;
		
		Элементы.РасшифровкаПлатежаСделка1.Видимость = ВидОперации_ОплатаПоставщику;
		Элементы.РасшифровкаПлатежаСделка.Видимость  = ВидОперации_ОплатаПоставщику;
		
		Если ВидОперации_ВыдачаПодотчетнику Тогда
			Элементы.ГруппаРасшифровкаПлатежа.Заголовок = НСтр("en='Issuance detail';ru='Расшифровка выдачи'");
			
			Элементы.ГруппаДоговорКонтрагента.Видимость = Ложь;
			Элементы.РасшифровкаПлатежаДоговорКонтрагента.Видимость = Ложь;
			Элементы.СпособРедактирования.Видимость = Истина;
			
			Элементы.Контрагент.Видимость = Ложь;
			Элементы.ПодотчетноеЛицо.Видимость = Истина;
			
			Элементы.РасшифровкаПлатежаПодборВРасшифровку.Видимость = Ложь;
			Элементы.РасшифровкаПлатежаЗаполнитьПлатежи.Видимость = Ложь;
			
		Иначе
			Элементы.ГруппаРасшифровкаПлатежа.Заголовок = НСтр("en='Decoding of payment';ru='Расшифровка платежа'");
			
			Элементы.ГруппаДоговорКонтрагента.Видимость = Истина;
			Элементы.РасшифровкаПлатежаДоговорКонтрагента.Видимость = Истина;
			Элементы.СпособРедактирования.Видимость = Истина;
			
			Элементы.Контрагент.Видимость = Истина;
			Элементы.ПодотчетноеЛицо.Видимость = Ложь;
			
			Элементы.РасшифровкаПлатежаПодборВРасшифровку.Видимость = Истина;
			Элементы.РасшифровкаПлатежаЗаполнитьПлатежи.Видимость = Истина;

		КонецЕсли;
		
	КонецЕсли;
	
	Если Объект.ФормаОплаты = ПредопределенноеЗначение("Перечисление.уатФормыОплаты.Безналичные") Тогда 
		Элементы.БанковскийСчетКасса.Заголовок = НСтр("en='Bank account';ru='Банк. счет'");
		Элементы.БанковскийСчетКасса.Подсказка = НСтр("en='Bank account from which it is planned to write off money';ru='Банковский счет с которого планируется списание денежных средств'");
	Иначе
		Элементы.БанковскийСчетКасса.Заголовок = НСтр("en='Cash fund';ru='Касса'");
		Элементы.БанковскийСчетКасса.Подсказка = НСтр("en='Cash fund from which expenditure of funds is planned';ru='Касса из которой планируется расход денежных средств'");
	КонецЕсли;
	
	Если СпособРедактирования = 0 Тогда
		ВедениеВзаиморасчетов = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(СтрокаПлатеж.ДоговорКонтрагента, "ВедениеВзаиморасчетов");
		Если ВедениеВзаиморасчетов = ПредопределенноеЗначение("Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам")
			ИЛИ ВедениеВзаиморасчетов = ПредопределенноеЗначение("Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоНакладным")
			ИЛИ ВедениеВзаиморасчетов = ПредопределенноеЗначение("Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказамНаТС") Тогда
			
			Элементы.РасшифровкаПлатежаСделка1.АвтоОтметкаНезаполненного = Истина;
		Иначе
			Элементы.РасшифровкаПлатежаСделка1.ОтметкаНезаполненного = Ложь;
			Элементы.РасшифровкаПлатежаСделка1.АвтоОтметкаНезаполненного = Ложь;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры // УстановитьВидимость()

// Возвращает фокус на строку ТЧ "Расшифровка платежа" при его потере в режиме редактирования
// одиночного платежа.
&НаКлиенте
Процедура УстановитьФокус()
	
	Если Элементы.РасшифровкаПлатежа.ТекущаяСтрока = Неопределено Тогда
		Элементы.РасшифровкаПлатежа.ТекущаяСтрока = СтрокаПлатеж.ПолучитьИдентификатор();
	КонецЕсли;          
	Если Не Булево(СпособРедактирования) Тогда 
		Элементы.РасшифровкаПлатежа.ТекущаяСтрока = СтрокаПлатеж.ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры // УстановитьФокус()

// Процедура выполняет необходимые действия при изменении договора взаиморасчетов
// с контрагентом.
//
&НаКлиенте
Процедура ПриИзмененииДоговора()
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(СтрокаПлатеж.ДоговорКонтрагента, "Организация");
	КонецЕсли;
	
	СтрокаПлатеж.Сделка = Неопределено;
	
	ВалютаВзаиморасчетовПоДоговору = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(СтрокаПлатеж.ДоговорКонтрагента, "ВалютаВзаиморасчетов");
	СтруктураКурсаВзаиморасчетов = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ВалютаВзаиморасчетовПоДоговору, Объект.Дата);
	
	СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
	СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
	
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Объект.Контрагент = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(СтрокаПлатеж.ДоговорКонтрагента, "Владелец");
	КонецЕсли;
	
	УстановитьОграничениеТипаСделка();
	УстановитьВидимость();
		
КонецПроцедуры // ПриИзмененииДоговора()

&НаКлиенте
Процедура ПриИзмененииКонтрагента()
	
	Объект.РасшифровкаПлатежа.Очистить();
	СтрокаПлатеж = Объект.РасшифровкаПлатежа.Добавить();
	
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		СтрокаПлатеж.ДоговорКонтрагента = Неопределено;
		
	Иначе
		СписокДоговоров = Новый СписокЗначений;
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийЗаявкиНаРасходование.ПрочиеРасчетыСКонтрагентами") Тогда
			СписокДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.Прочее"));
		ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийЗаявкиНаРасходование.ОплатаПоставщику") Тогда
			СписокДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком"));
		КонецЕсли;
		
		СтруктураПараметровДляПолученияДоговора = Новый Структура;
		СтруктураПараметровДляПолученияДоговора.Вставить("СписокДопустимыхВидовДоговоров", СписокДоговоров);
		СтруктураПараметровДляПолученияДоговора.Вставить("ВалютаВзаиморасчетовДоговора", Объект.ВалютаДокумента);
		
		СтрокаПлатеж.ДоговорКонтрагента = уатОбщегоНазначенияТиповыеСервер.уатПолучитьДоговорПоОрганизацииИКонтрагенту(Объект.Организация, 
			Объект.Контрагент, СтруктураПараметровДляПолученияДоговора);
		
	КонецЕсли;
	
	СтрокаПлатеж.СуммаПлатежа = Объект.СуммаДокумента;
	
	Если ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		
		КонтрагентНаименованиеПолное = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(Объект.Контрагент, "НаименованиеПолное");
		КонтрагентНаименование       = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(Объект.Контрагент, "Наименование");
		Объект.ПринятоОт = ?(ПустаяСтрока(КонтрагентНаименованиеПолное), КонтрагентНаименование, КонтрагентНаименованиеПолное);
		
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииКонтрагента

&НаКлиенте
Процедура ПриИзмененииОрганизации()
	
	ВладелецБС = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(Объект.БанковскийСчетКасса, "Владелец");
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийПоступлениеДС.ПоступлениеНаличными") 
		И (Объект.БанковскийСчетКасса = Неопределено Или ВладелецБС <> Объект.Организация) Тогда
			Объект.БанковскийСчетКасса = ПредопределенноеЗначение("Справочник.Кассы.ПустаяСсылка");
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийПоступлениеДС.ПоступлениеБезналичными") 
		И (Объект.БанковскийСчетКасса = Неопределено Или ВладелецБС <> Объект.Организация) Тогда
			Объект.БанковскийСчетКасса = ПредопределенноеЗначение("Справочник.БанковскиеСчета.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииОрганизации()

// Процедура рассчитывает сумму платежа по сумме взаиморасчетов.
//
&НаКлиенте
Процедура РассчитатьСуммуПлатежа()
	
	ПроверкаКурсовВалют(СтрокаПлатеж);
	
	ВалютаВзаиморасчетов = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(СтрокаПлатеж.ДоговорКонтрагента, "ВалютаВзаиморасчетов");
	
	Если ВалютаВзаиморасчетов <> Объект.ВалютаДокумента Тогда
		СтрокаПлатеж.СуммаПлатежа = 0;
	КонецЕсли;
		
	Если Объект.РасшифровкаПлатежа.Количество()=1 Тогда
		 СтрокаПлатеж.СуммаПлатежа = Объект.СуммаДокумента;
	КонецЕсли;
	
КонецПроцедуры // РассчитатьСуммуПлатежа()

&НаКлиенте
Процедура УправлениеДоступностьюНоменклатуры()
	
	Если Не ЗначениеЗаполнено(Объект.СтатьяОборотов) Тогда
		Элементы.Номенклатура.Доступность = Ложь;
	Иначе
		Элементы.Номенклатура.Доступность = Истина;
	КонецЕсли; 
	
КонецПроцедуры

// Процедура выполняет заполнение реквизита Контрагент значением по умолчанию.
//
&НаКлиенте
Процедура ЗаполнитьКонтрагента()
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Возврат;
	КонецЕсли;
	СписокЗначений = Новый СписокЗначений;
	ВремКонтрагент = Неопределено;
	
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Объект.Контрагент = ВремКонтрагент;
		
		// проставим основной договор контрагента
		ПриИзмененииКонтрагента();
		ПриИзмененииДоговора();
		УстановитьФокус();
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьКонтрагента()

&НаКлиенте
Процедура ОбработкаСобытияЗаполнениеПлатежей(ТаблицаПлатежей, Параметр2) Экспорт 
	
	Объект.РасшифровкаПлатежа.Очистить();
	Если Не ТаблицаПлатежей = Неопределено Тогда 
		Для Каждого ТекСтрока Из ТаблицаПлатежей Цикл 
			НовСтрока = Объект.РасшифровкаПлатежа.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, ТекСтрока);
		КонецЦикла;
	КонецЕсли;
	
	Если Объект.РасшифровкаПлатежа.Количество()=0 Тогда
		НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
	КонецЕсли;
	
	Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	РассчитатьИтоги();
	
	Элементы.РасшифровкаПлатежа.ТекущаяСтрока = Объект.РасшифровкаПлатежа[0].ПолучитьИдентификатор();
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьИтоги()
	Элементы.РасшифровкаПлатежаСуммаПлатежа.ТекстПодвала = Формат(Объект.СуммаДокумента,"ЧЦ=12; ЧДЦ=2") + " " + Строка(Объект.ВалютаДокумента);
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемВопрос(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.ОК Тогда
		флВопросЗакрытиеФормы = Ложь;
		Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьРеквизитыСделки(Сделка)
	
	СтруктураСделка = Новый Структура("КратностьВзаиморасчетов, КурсВзаиморасчетов, СуммаПлатежа");
	СтруктураСделка.КратностьВзаиморасчетов	 = Сделка.КратностьВзаиморасчетов;
	СтруктураСделка.КурсВзаиморасчетов		 = Сделка.КурсВзаиморасчетов;
	СтруктураСделка.СуммаПлатежа			 = Сделка.СуммаДокумента;
	
	Возврат СтруктураСделка;
	
КонецФункции

#КонецОбласти


#Область ИсполняемаяЧастьМодуля

ОтветПередЗаписью = Ложь;

#КонецОбласти

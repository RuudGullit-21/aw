#Область ОбработчикиСобытий

Процедура ОбработкаПроведения(Отказ, Режим)
	// Инициализация дополнительных свойств для проведения документа.
	уатПроведение.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	// Инициализация данных документа.
	Документы.уатЗаявкаНаРасходованиеДС.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	// Подготовка наборов записей.
	уатПроведение.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета.
	уатПроведение_проф.ОтразитьЗаявкиНаРасходованиеДС(ДополнительныеСвойства, Движения, Отказ);
	
	// Запись наборов записей.
	уатПроведение.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль возникновения отрицательного остатка.
	Документы.уатЗаявкаНаРасходованиеДС.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);
	
КонецПроцедуры // ОбработкаПроведения

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка  Тогда
		Возврат;
	КонецЕсли;
	
	МассивДоговоров = ЭтотОбъект.РасшифровкаПлатежа.ВыгрузитьКолонку("ДоговорКонтрагента");
	ТаблицаДоговоров = Новый таблицаЗначений;
	ТаблицаДоговоров.Колонки.Добавить("Договор");
	ТаблицаДоговоров.ЗагрузитьКолонку(МассивДоговоров,"Договор");
	ТаблицаДоговоров.Свернуть("Договор");
	
	Если ТаблицаДоговоров.Количество() = 1 Тогда
		ДоговорКонтрагента = ТаблицаДоговоров[0].Договор;
	Иначе
		ДоговорКонтрагента = Неопределено;
	КонецЕсли;
	
	// уатСогласованиеДокументов
	уатСогласованиеДокументовСервер.ПередЗаписью(ЭтотОбъект, РежимЗаписи, Отказ);
	// Конец уатСогласованиеДокументов
	
КонецПроцедуры // ПередЗаписью

Процедура ОбработкаУдаленияПроведения(Отказ)
	
	// Инициализация дополнительных свойств для проведения документа
	уатПроведение.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	уатПроведение.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	уатПроведение.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль при отмене проведения не выполняем
	//Документы.уатЗаявкаНаРасходованиеДС.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ, Истина);
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	Если НЕ РасшифровкаПлатежа.Итог("СуммаПлатежа") = СуммаДокумента Тогда
		ТекстНСТР = НСтр("en='Not the same amount of the document and its interpretation.';ru='Не совпадают сумма документа и ее расшифровка.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР,,,,Отказ);
	КонецЕсли;
	
	Если ВидОперации = Перечисления.уатВидыОперацийЗаявкиНаРасходование.ВыдачаПодотчетнику Тогда
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("Контрагент"));
	Иначе
		Если ВидОперации = Перечисления.уатВидыОперацийЗаявкиНаРасходование.ПрочийРасходДенежныхСредств Тогда
			ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("Контрагент"));
		КонецЕсли;
		ПроверяемыеРеквизиты.Удалить(ПроверяемыеРеквизиты.Найти("ПодотчетноеЛицо"));
	КонецЕсли;
	
	Для Каждого Платеж Из РасшифровкаПлатежа Цикл
		
		// Сделка должна быть заполнена, если учет взаиморасчетов ведется по заказам.
		Если ЗначениеЗаполнено(Платеж.ДоговорКонтрагента) И НЕ ЗначениеЗаполнено(Платеж.Сделка) Тогда
			Если РасшифровкаПлатежа.Количество() > 1 Тогда
				Если Платеж.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам
					ИЛИ Платеж.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоНакладным
					ИЛИ Платеж.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказамНаТС Тогда
					ТекстНСТР = СтрШаблон(НСтр("en='At line №%1 was not filled in attribute value ""Deal""';ru='В строке №%1 не заполнено значение реквизита ""Сделка""'"), Платеж.НомерСтроки);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР,,,,Отказ);
				КонецЕсли;
			Иначе
				Если Платеж.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
					ТекстНСТР = НСтр("en='Not completed requisite value ""Invoice""';ru='Не заполнено значение реквизита ""Счет на оплату""'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР,,,,Отказ);
				ИначеЕсли Платеж.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоНакладным Тогда
					ТекстНСТР = НСтр("en='Not completed requisite value ""Receipt""';ru='Не заполнено значение реквизита ""Поступление""'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР,,,,Отказ);
				ИначеЕсли Платеж.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказамНаТС Тогда
					ТекстНСТР = НСтр("en='Not completed requisite value ""Order for trucking""';ru='Не заполнено значение реквизита ""Заказ на ТС""'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР,,,,Отказ);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Организация) И ЗначениеЗаполнено(Платеж.ДоговорКонтрагента) И Организация <> Платеж.ДоговорКонтрагента.Организация Тогда
			Если РасшифровкаПлатежа.Количество() = 1 Тогда
				ТекстНСТР = НСтр("en='Selected the contract of a counterparty, not corresponding to company specified in the document!';ru='Выбран договор контрагента, не соответствующий организации, указанной в документе!'");
			Иначе
				ТекстНСТР = СтрШаблон(НСтр("en='At line №%1 selected counterparty contract that does not match to company specified in document!';ru='В строке №%1 выбран договор контрагента, не соответствующий организации, указанной в документе!'"), Платеж.НомерСтроки);
			КонецЕсли;
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР,,,,Отказ);
		КонецЕсли;
		
		Если ВидОперации = Перечисления.уатВидыОперацийЗаявкиНаРасходование.ОплатаПоставщику
			ИЛИ ВидОперации = Перечисления.уатВидыОперацийЗаявкиНаРасходование.ПрочиеРасчетыСКонтрагентами Тогда
			Если Не ЗначениеЗаполнено(Платеж.ДоговорКонтрагента) Тогда
				Если РасшифровкаПлатежа.Количество() = 1 Тогда
					ТекстНСТР = НСтр("en='Counterparty contract not filled!';ru='Не заполнен договор контрагента!'");
				Иначе
					ТекстНСТР = СтрШаблон(НСтр("en='At line №%1 is not fill counterparty contract!';ru='В строке №%1 не заполнен договор контрагента!'"), Платеж.НомерСтроки);
				КонецЕсли;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР,,,,Отказ);
			КонецЕсли;
			Если Не ЗначениеЗаполнено(Платеж.СуммаПлатежа) Тогда
				Если РасшифровкаПлатежа.Количество() = 1 Тогда
					ТекстНСТР = НСтр("en='Sum is not filled!';ru='Не заполнена сумма!'");
				Иначе
					ТекстНСТР = СтрШаблон(НСтр("en='In line №%1 was not filled sum!';ru='В строке №%1 не заполнена сумма!'"), Платеж.НомерСтроки);
				КонецЕсли;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР,,,,Отказ);
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Платеж.ДоговорКонтрагента) И Платеж.ДоговорКонтрагента.ВалютаВзаиморасчетов <> ВалютаДокумента Тогда
			ТекстНСТР = НСтр("en='In line № ""%1"" currency of counterparty contract is different from currency of document!';ru='В строке № ""%1"" валюта договора контрагента отличается от валюты документа!'");
			ТекстНСТР = СтрШаблон(ТекстНСТР, Платеж.НомерСтроки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР,,,,Отказ);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	уатОбщегоНазначенияСервер.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	уатОбщегоНазначенияТиповые.ЗаполнитьШапкуДокумента(ЭтотОбъект, ПользователиКлиентСервер.АвторизованныйПользователь());
	
	//Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.уатСчетНаОплатуПоставщика") Тогда
	//	ВидОперации	 = Перечисления.уатВидыОперацийЗаявкиНаРасходование.ОплатаПоставщику;
	//	Основание	 = ДанныеЗаполнения;
	//	Контрагент	 = ДанныеЗаполнения.Контрагент;
	//	ВалютаДокумента = 
	//	
	//	НоваяСтрока	 = РасшифровкаПлатежа.Добавить();
	//	НоваяСтрока.ДоговорКонтрагента		 = ДанныеЗаполнения.ДоговорКонтрагента;
	//	НоваяСтрока.КратностьВзаиморасчетов	 = ДанныеЗаполнения.КратностьВзаиморасчетов;
	//	НоваяСтрока.КурсВзаиморасчетов		 = ДанныеЗаполнения.КурсВзаиморасчетов;
	//	НоваяСтрока.СуммаПлатежа			 = ДанныеЗаполнения.СуммаДокумента;
	//	НоваяСтрока.Сделка					 = ДанныеЗаполнения;
	//	СуммаДокумента	 = ДанныеЗаполнения.СуммаДокумента;
	//	Организация		 = ДанныеЗаполнения.Организация;
	//ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.уатПоступлениеТоваровУслуг") Тогда
	//	ВидОперации	 = Перечисления.уатВидыОперацийЗаявкиНаРасходование.ОплатаПоставщику;
	//	Основание	 = ДанныеЗаполнения;
	//	Контрагент	 = ДанныеЗаполнения.Контрагент;
	//	
	//	НоваяСтрока	 = РасшифровкаПлатежа.Добавить();
	//	НоваяСтрока.ДоговорКонтрагента		 = ДанныеЗаполнения.ДоговорКонтрагента;
	//	НоваяСтрока.КратностьВзаиморасчетов	 = ДанныеЗаполнения.КратностьВзаиморасчетов;
	//	НоваяСтрока.КурсВзаиморасчетов		 = ДанныеЗаполнения.КурсВзаиморасчетов;
	//	НоваяСтрока.СуммаПлатежа			 = ДанныеЗаполнения.СуммаДокумента;
	//	НоваяСтрока.Сделка					 = ДанныеЗаполнения;
	//	
	//	СуммаДокумента	 = ДанныеЗаполнения.СуммаДокумента;
	//	Организация		 = ДанныеЗаполнения.Организация;
	//КонецЕсли;
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.уатПоступлениеТоваровУслуг")
		ИЛИ ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.уатСчетНаОплатуПоставщика") Тогда
		
		Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.уатПоступлениеТоваровУслуг")
			И ДанныеЗаполнения.ОплатаПодотчетнымЛицом Тогда
			ВидОперации     = Перечисления.уатВидыОперацийЗаявкиНаРасходование.ВыдачаПодотчетнику;
			ПодотчетноеЛицо = ДанныеЗаполнения.ПодотчетноеЛицо;
		Иначе
			ВидОперации     = Перечисления.уатВидыОперацийЗаявкиНаРасходование.ОплатаПоставщику;
		КонецЕсли;
		Основание           = ДанныеЗаполнения;
		ДокументОснование   = ДанныеЗаполнения;
		Контрагент          = ДанныеЗаполнения.Контрагент;
		ДоговорКонтрагента  = ДанныеЗаполнения.ДоговорКонтрагента;
		ВалютаДокумента     = ДанныеЗаполнения.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		Организация         = ДанныеЗаполнения.Организация;
		Комментарий         = ДанныеЗаполнения.Комментарий;
		
		Если ВалютаДокумента = ДанныеЗаполнения.ВалютаДокумента Тогда
			КурсДокумента = ДанныеЗаполнения.КурсВзаиморасчетов;
			КратностьДокумента = ДанныеЗаполнения.КратностьВзаиморасчетов;
		Иначе
			ВалютаДокументаКурсКратность = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ВалютаДокумента, ТекущаяДата());
			КурсДокумента = ВалютаДокументаКурсКратность.Курс;
			КратностьДокумента = ВалютаДокументаКурсКратность.Кратность;
		КонецЕсли;
		
		флСуммаНеВключаетНДС = (ДанныеЗаполнения.УчитыватьНДС И НЕ ДанныеЗаполнения.СуммаВключаетНДС);
		
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	уатПоступлениеТоваровУслугТовары.Ссылка.ВалютаДокумента КАК Валюта,
		|	ЗНАЧЕНИЕ(Документ.уатЗаказГрузоотправителя.ПустаяСсылка) КАК ЗаказНаТС,
		|	уатПоступлениеТоваровУслугТовары.Сумма КАК Сумма,
		|	уатПоступлениеТоваровУслугТовары.СуммаНДС КАК СуммаНДС,
		|	уатПоступлениеТоваровУслугТовары.Сумма КАК СуммаВалютная,
		|	уатПоступлениеТоваровУслугТовары.СуммаНДС КАК СуммаНДСвалютная
		|ИЗ
		|	Документ.уатПоступлениеТоваровУслуг.Товары КАК уатПоступлениеТоваровУслугТовары
		|ГДЕ
		|	уатПоступлениеТоваровУслугТовары.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	уатПоступлениеТоваровУслугУслуги.Валюта,
		|	уатПоступлениеТоваровУслугУслуги.ЗаказНаТС,
		|	уатПоступлениеТоваровУслугУслуги.Сумма,
		|	уатПоступлениеТоваровУслугУслуги.СуммаНДС,
		|	уатПоступлениеТоваровУслугУслуги.СуммаВалютная,
		|	уатПоступлениеТоваровУслугУслуги.СуммаНДСвалютная
		|ИЗ
		|	Документ.уатПоступлениеТоваровУслуг.Услуги КАК уатПоступлениеТоваровУслугУслуги
		|ГДЕ
		|	уатПоступлениеТоваровУслугУслуги.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	уатСчетНаОплатуПоставщикаТовары.Ссылка.ВалютаДокумента КАК Валюта,
		|	ЗНАЧЕНИЕ(Документ.уатЗаказГрузоотправителя.ПустаяСсылка) КАК ЗаказНаТС,
		|	уатСчетНаОплатуПоставщикаТовары.Сумма КАК Сумма,
		|	уатСчетНаОплатуПоставщикаТовары.СуммаНДС КАК СуммаНДС,
		|	уатСчетНаОплатуПоставщикаТовары.Сумма КАК СуммаВалютная,
		|	уатСчетНаОплатуПоставщикаТовары.СуммаНДС КАК СуммаНДСвалютная
		|ИЗ
		|	Документ.уатСчетНаОплатуПоставщика.Товары КАК уатСчетНаОплатуПоставщикаТовары
		|ГДЕ
		|	уатСчетНаОплатуПоставщикаТовары.Ссылка = &Ссылка
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	уатСчетНаОплатуПоставщикаУслуги.Валюта,
		|	уатСчетНаОплатуПоставщикаУслуги.ЗаказНаТС,
		|	уатСчетНаОплатуПоставщикаУслуги.Сумма,
		|	уатСчетНаОплатуПоставщикаУслуги.СуммаНДС,
		|	уатСчетНаОплатуПоставщикаУслуги.СуммаВалютная,
		|	уатСчетНаОплатуПоставщикаУслуги.СуммаНДСвалютная
		|ИЗ
		|	Документ.уатСчетНаОплатуПоставщика.Услуги КАК уатСчетНаОплатуПоставщикаУслуги
		|ГДЕ
		|	уатСчетНаОплатуПоставщикаУслуги.Ссылка = &Ссылка");
		
		Запрос.УстановитьПараметр("Ссылка", ДокументОснование);
		тблДанные = Запрос.Выполнить().Выгрузить();
		
		Для Каждого ТекСтрока Из тблДанные Цикл
			НоваяСтрока = РасшифровкаПлатежа.Добавить();
			НоваяСтрока.ДоговорКонтрагента = ДанныеЗаполнения.ДоговорКонтрагента;
			
			Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказамНаТС Тогда
				НоваяСтрока.Сделка = ТекСтрока.ЗаказНаТС;
			Иначе
				Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.уатПоступлениеТоваровУслуг") Тогда
					Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоНакладным Тогда
						НоваяСтрока.Сделка = ДанныеЗаполнения;
					Иначе
						НоваяСтрока.Сделка = ДанныеЗаполнения.Сделка;
					КонецЕсли;
				Иначе
					Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
						НоваяСтрока.Сделка = ДанныеЗаполнения;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если ВалютаДокумента = ДанныеЗаполнения.ВалютаДокумента Тогда
				НоваяСтрока.СуммаПлатежа = ТекСтрока.Сумма + ?(флСуммаНеВключаетНДС, ТекСтрока.СуммаНДС, 0);
			ИначеЕсли ВалютаДокумента = ТекСтрока.Валюта Тогда
				НоваяСтрока.СуммаПлатежа = ТекСтрока.СуммаВалютная + ?(флСуммаНеВключаетНДС, ТекСтрока.СуммаНДСВалютная, 0);
			Иначе
				СуммаСтроки = ТекСтрока.Сумма + ?(флСуммаНеВключаетНДС, ТекСтрока.СуммаНДС, 0);
				НоваяСтрока.СуммаПлатежа = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(СуммаСтроки,
					ДанныеЗаполнения.ВалютаДокумента,         ВалютаДокумента,
					ДанныеЗаполнения.КурсВзаиморасчетов,      КурсДокумента,
					ДанныеЗаполнения.КратностьВзаиморасчетов, КратностьДокумента);
			КонецЕсли;
			
			НоваяСтрока.КурсВзаиморасчетов      = КурсДокумента;
			НоваяСтрока.КратностьВзаиморасчетов = КратностьДокумента;
		КонецЦикла;
		
		РасшифровкаПлатежа.Свернуть("ДоговорКонтрагента, Сделка, КурсВзаиморасчетов, КратностьВзаиморасчетов, СтатьяДвиженияДенежныхСредств",
			"СуммаПлатежа");
		 
		СуммаДокумента	    = РасшифровкаПлатежа.Итог("СуммаПлатежа");
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

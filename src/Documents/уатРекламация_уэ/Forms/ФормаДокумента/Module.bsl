
#Область ПеременныеФормы

&НаКлиенте
Перем СтрокаПлатеж;

#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	уатЗащищенныеФункцииСервер.уатДокументФормаЭлементаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, Объект, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// Ввод на основании МЛ
	Если ТипЗнч(Параметры.Основание) = Тип("ДокументСсылка.уатМаршрутныйЛист") Тогда
		Объект.МаршрутныйЛист = Параметры.Основание;
		Объект.Организация    = Параметры.Основание.Организация;
		Объект.Подразделение  = Параметры.Основание.Подразделение;
		ДокОбъект = РеквизитФормыВЗначение("Объект");
		
		ДанныеЗаполнения = Новый Структура();
		ДанныеЗаполнения.Вставить("флВыбратьКонтрагента", Истина);
		ДанныеЗаполнения.Вставить("Заказы", Параметры.Основание.Заказы);
		
		ДокОбъект.Заполнить(ДанныеЗаполнения);
		Если ДокОбъект.ДополнительныеСвойства.Свойство("мсвКонтрагенты") Тогда
			
			тзКонтрагенты = ДокОбъект.ДополнительныеСвойства.мсвКонтрагенты;
			мсвКонтрагенты.ЗагрузитьЗначения(уатОбщегоНазначенияСервер.ПреобразоватьТаблицувМассивСтрок(тзКонтрагенты));
			
			тзТаблицаЗаказы = ДокОбъект.ДополнительныеСвойства.ТаблицаЗаказы;
			ТаблицаЗаказы.ЗагрузитьЗначения(уатОбщегоНазначенияСервер.ПреобразоватьТаблицувМассивСтрок(тзТаблицаЗаказы));
			
			Возврат;
			
		ИначеЕсли ДокОбъект.ДополнительныеСвойства.Свойство("мсвТаблицаЗаказы") Тогда
			// Один контрагент
			ДокОбъект.Контрагент            = ДокОбъект.ДополнительныеСвойства.Контрагент;
			ДокОбъект.ДоговорКонтрагента    = ДокОбъект.ДополнительныеСвойства.Договор;
			ДокОбъект.ЗаказГрузоотправителя = ДокОбъект.ДополнительныеСвойства.Заказ;
			
			мсвТаблицаЗаказы         = ДокОбъект.ДополнительныеСвойства.мсвТаблицаЗаказы;
			ДокОбъект.ОбработкаЗаполненияМЛ(Объект.МаршрутныйЛист, мсвТаблицаЗаказы);
			ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнениеШапкиПриСозданииДокумента(Отказ, СтандартнаяОбработка, Параметры);
	
	// уатСогласованиеДокументов
	ИмяДокументаСогласование = "Рекламация";
	уатСогласованиеДокументовСервер.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец уатСогласованиеДокументов
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнениеШапкиПриСозданииДокумента(Отказ, СтандартнаяОбработка, Параметры)
	// Создание из "ФормаВыборКонтрагента"
	Если Параметры.Свойство("Услуги") Тогда
		ДокОбъект = РеквизитФормыВЗначение("Объект");
		ДокОбъект.МаршрутныйЛист        = Параметры.ДокументОснование;
		ДокОбъект.ЗаказГрузоотправителя = Параметры.ЗаказГрузоотправителя;
		ДокОбъект.Контрагент            = Параметры.Контрагент;
		ДокОбъект.ДоговорКонтрагента    = Параметры.Договор;

		мсвТаблицаУслуги         = Параметры.Услуги;
		ДокОбъект.ОбработкаЗаполненияМЛ(Объект.МаршрутныйЛист, мсвТаблицаУслуги);
		ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
	КонецЕсли;
	
	МноговалютныйУчет = ПолучитьФункциональнуюОпцию("уатМноговалютныйУчет");
	
	Если ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.Контрагенты") тогда
		флРекламацияОтКонтрагента = 1;
	Иначе
		флРекламацияОтКонтрагента = 0;
	КонецЕсли;
	УстановитьОграничениеТипаКонтрагент(Ложь);
		
	Если Объект.Ссылка.Пустая() Тогда
		Объект.УчитыватьНДС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация, "УчитыватьНДС");
		Объект.СуммаВключаетНДС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация, "СуммаВключаетНДС");
	КонецЕсли;
			
	// Установка реквизитов формы.
	Контрагент = Объект.Контрагент;
	Если НЕ Объект.Ссылка.Пустая() ИЛИ НЕ ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Договор = Объект.ДоговорКонтрагента;
	КонецЕсли;
	ВалютаРасчетов = Объект.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	ОрганизацияПередИзменением = Объект.Организация;
	
	мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();;
	НациональнаяВалюта = мВалютаРегламентированногоУчета;
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата,
		Новый Структура("Валюта", НациональнаяВалюта));
	КурсНациональнаяВалюта = СтруктураПоВалюте.Курс;
	КратностьНациональнаяВалюта = СтруктураПоВалюте.Кратность;
	
	Если Объект.СуммаВыставленная = 0 И Параметры.ЗначенияЗаполнения.Свойство("СуммаВыставленная") Тогда
		Объект.СуммаВыставленная = Параметры.ЗначенияЗаполнения.СуммаВыставленная;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Объект.МаршрутныйЛист) И Параметры.ЗначенияЗаполнения.Свойство("МаршрутныйЛист") Тогда
		Объект.МаршрутныйЛист = Параметры.ЗначенияЗаполнения.МаршрутныйЛист;
	КонецЕсли;
		
	уатОбщегоНазначенияСервер.НастроитьПолеДоговорКонтрагента(Элементы.ДоговорКонтрагента,
		"Объект.Организация", "Объект.Контрагент", "СПокупателем");
	//уатОбщегоНазначенияСервер.НастроитьПолеДоговорКонтрагента(Элементы.РаспределениеДоговорКонтрагента,
	//	"Объект.Организация", "Объект.Распределение.Контрагент", "СПокупателем");
	уатОбщегоНазначенияСервер.НастроитьПолеПодразделение(Элементы.Подразделение, "Объект.Организация");
	
	УстановитьОтборЗаказаНаТСиМаршрутногоЛиста();
	
	ВывестиПредставлениеГруза();
	РассчитатьДинамическиеКолонки();
	ОбновитьВсегоВТЧСервер();
	ВывестиСуммовыеИтогиДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	уатЗащищенныеФункцииКлиент.уатДокументФормаЭлементаПриОткрытии(Отказ, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	Если мсвКонтрагенты.Количество() > 1 Тогда
		ПараметрыФормы = Новый Структура("ВидОперации, Ссылка, Контрагенты, Услуги, ДокументОснование",
			0, Объект.Ссылка, мсвКонтрагенты, ТаблицаЗаказы, Объект.МаршрутныйЛист);
		ОткрытьФорму("Документ.уатПоступлениеТоваровУслуг.Форма.ФормаВыборКонтрагента", ПараметрыФормы, ЭтотОбъект);
	Иначе
		Если Объект.Ссылка.Пустая() И ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
			уатОбщегоНазначенияКлиент.ПриИзмененииДоговора(ЭтаФорма, Неопределено, Договор);
		КонецЕсли;
	КонецЕсли;
		
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// уатСогласованиеДокументов
	уатСогласованиеДокументовКлиент.ОбновитьСтатусСогласования(ЭтотОбъект);
	// Конец уатСогласованиеДокументов
	
	УстановитьОграничениеТипаСделка(Объект.ДоговорКонтрагента, Элементы.Сделка);
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	РассчитатьДинамическиеКолонки();
	ОбновитьВсегоВТЧСервер();
	ВывестиСуммовыеИтогиДокумента();
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Оповестить("ЗаписьРекламации", Объект.Ссылка);
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// уатСогласованиеДокументов
	уатСогласованиеДокументовКлиент.ПослеЗаписи(ЭтотОбъект);
	// Конец уатСогласованиеДокументов
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ОбновитьВсегоВТЧСервер();
	ВывестиСуммовыеИтогиДокумента();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "СозданиеДокументаИзФормыВыбораКонтрагента_уатРекламация_уэ"
		И Объект.Ссылка.Пустая() Тогда
		
		Параметр.Вставить("Основание",           Параметр.ДокументОснование);
		Параметр.Вставить("ЗначениеКопирования", Неопределено);
		Параметр.Вставить("ЗначенияЗаполнения",  Новый Структура);
		ЗаполнениеШапкиПриСозданииДокумента(Ложь, Истина, Параметр);
		
		Если Объект.Ссылка.Пустая() И ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
			уатОбщегоНазначенияКлиент.ПриИзмененииДоговора(ЭтаФорма, Неопределено, Договор);
		КонецЕсли;
		
		// Установить видимость реквизитов и заголовков колонок.
		УстановитьВидимостьДоступность();
		
		ОбновитьВсегоВТЧСервер();
		ВывестиСуммовыеИтогиДокумента();
	КонецЕсли;
	
	// уатСогласованиеДокументов
	уатСогласованиеДокументовКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр);
	// Конец уатСогласованиеДокументов
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если Объект.Организация = ОрганизацияПередИзменением Тогда
		Возврат;
	КонецЕсли;
	ОрганизацияПередИзменением = Объект.Организация;
	
	// Обработка события изменения организации.
	ПриИзмененииКонтрагентаИлиОрганизации(Новый ОписаниеОповещения("ОрганизацияПриИзмененииФрагментЗавершение", ЭтотОбъект));
	
	// уатСогласованиеДокументов
	уатСогласованиеДокументовКлиент.ОрганизацияПодразделениеПриИзменении(ЭтотОбъект);
	// Конец уатСогласованиеДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзмененииФрагментЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Для Каждого ТекСтрока Из Объект.Распределение Цикл
		Если ЗначениеЗаполнено(ТекСтрока.ДоговорКонтрагента) тогда
			ПриИзмененииДоговораТабЧасти(ТекСтрока);
		КонецЕсли;
		Если ТипЗнч(ТекСтрока.Контрагент) = Тип("СправочникСсылка.Организации") тогда
			ТекСтрока.Контрагент = Объект.Организация;
		КонецЕсли;
	КонецЦикла;
	
	УчитыватьНДСПередИзменением = Объект.УчитыватьНДС;
	СуммаВключаетНДСПередИзменением = Объект.СуммаВключаетНДС;
	
	Объект.УчитыватьНДС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.УчитыватьНДС"));
	Объект.СуммаВключаетНДС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.СуммаВключаетНДС"));
		
	Если Объект.УчитыватьНДС <> УчитыватьНДСПередИзменением ИЛИ Объект.СуммаВключаетНДС <> СуммаВключаетНДСПередИзменением Тогда
		ПересчитатьНДС();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура флРекламацияОтКонтрагентаПриИзменении(Элемент)
	УстановитьОграничениеТипаКонтрагент();
	Объект.ДоговорКонтрагента = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	КонтрагентПередИзменением = Контрагент;
	Контрагент = Объект.Контрагент;
	Если КонтрагентПередИзменением <> Объект.Контрагент Тогда
		ПриИзмененииКонтрагентаИлиОрганизации(Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если флРекламацияОтКонтрагента = 1 Тогда 
		уатОбщегоНазначенияКлиент.КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если флРекламацияОтКонтрагента = 1 Тогда 
		уатОбщегоНазначенияКлиент.КонтрагентАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	Если флРекламацияОтКонтрагента = 1 Тогда 
		уатОбщегоНазначенияКлиент.КонтрагентОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	Оповещ = Новый ОписаниеОповещения("ДоговорКонтрагентаПриИзмененииЗавершение", ЭтотОбъект);
	уатОбщегоНазначенияКлиент.ДоговорКонтрагентаПриИзменении(ЭтаФорма, Оповещ);
КонецПроцедуры  

&НаКлиенте
Процедура ДоговорКонтрагентаСоздание(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВидДоговораДоступныеЗначения = Новый Массив;
	
	мВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем");
	ВидДоговораДоступныеЗначения.Добавить(мВидДоговора);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Владелец", Объект.Контрагент);
	ПараметрыФормы.Вставить("ВидДоговораДоступныеЗначения", ВидДоговораДоступныеЗначения);
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзмененииЗавершение(Результат, ДопПараметры) Экспорт
	уатОбщегоНазначенияКлиент.ПриИзмененииДоговора(ЭтаФорма, Неопределено, Договор);
	УстановитьОграничениеТипаСделка(Объект.ДоговорКонтрагента, Элементы.Сделка);
	УстановитьВидимостьДоступность();
КонецПроцедуры

// Вызывается из процедуры уатОбщегоНазначенияКлиент.ПриИзмененииДоговора()
//
&НаКлиенте
Процедура ПриИзмененииДоговораЛокальныеОбработчики() Экспорт
	РассчитатьСуммуВзаиморасчетов();
	УстановитьВидимостьДоступность();
	УстановитьОтборЗаказаНаТСиМаршрутногоЛиста();
КонецПроцедуры

&НаКлиенте
Процедура ЗаказГрузоотправителяПриИзменении(Элемент)
	ЗаказГрузоотправителяПриИзмененииСервер();
	УстановитьОтборЗаказаНаТСиМаршрутногоЛиста(, Истина);
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаСервере
Процедура ЗаказГрузоотправителяПриИзмененииСервер()
	Если ЗначениеЗаполнено(Объект.ЗаказГрузоотправителя) Тогда
		Если ТипЗнч(Объект.ЗаказГрузоотправителя.Контрагент) = Тип("СправочникСсылка.Контрагенты") тогда
			флРекламацияОтКонтрагента = 1;
		Иначе
			флРекламацияОтКонтрагента = 0;
		КонецЕсли;
		УстановитьОграничениеТипаКонтрагент();
		
		Объект.Контрагент         = Объект.ЗаказГрузоотправителя.Контрагент;
		Объект.ДоговорКонтрагента = Объект.ЗаказГрузоотправителя.ДоговорКонтрагента;
	КонецЕсли;
	ВывестиПредставлениеГруза();
КонецПроцедуры

&НаКлиенте
Процедура МаршрутныйЛистПриИзменении(Элемент)
	УстановитьОтборЗаказаНаТСиМаршрутногоЛиста(Истина);
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеПриИзменении(Элемент)
	РассчитатьДинамическиеКолонки();
	ОбновитьВсегоВТЧСервер();
	ВывестиСуммовыеИтогиДокумента();
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекДанные = Элементы.Распределение.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		Если НЕ Копирование Тогда
			ТекДанные.СтатьяРасходов = Неопределено;
		КонецЕсли;
		Если Объект.УчитыватьНДС Тогда
			ТекДанные.СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
				ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнаяСтавкаНДС");
		Иначе
			ТекДанные.СтавкаНДС = Неопределено;
		КонецЕсли;
		
		Если Объект.УчитыватьНДС Тогда	
			ТекДанные.Всего = Объект.СуммаПодтвержденная - (Объект.Распределение.Итог("Всего") - ТекДанные.Всего);
			РаспределениеВсегоПриИзменении(Элементы.Распределение);
		Иначе
			ТекДанные.Сумма = Объект.СуммаПодтвержденная - (Объект.Распределение.Итог("Сумма") - ТекДанные.Сумма);
			РаспределениеСуммаПриИзменении(Элементы.Распределение);
		КонецЕсли;
	КонецЕсли;
	
	УстановитьОграничениеТипаСделка(ТекДанные.ДоговорКонтрагента, Элементы.РаспределениеСделка);
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеКонтрагентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	СписокДляВыбора = Новый СписокЗначений;
	СписокДляВыбора.Добавить("Контрагент");
	СписокДляВыбора.Добавить("Физическое лицо");
	СписокДляВыбора.Добавить("Наша организация", НСтр("en='Our company - ';ru='Наша организация - '") + Объект.Организация);
	
	Оповещение = Новый ОписаниеОповещения("РаспределениеКонтрагентНачалоВыбораОповещение", ЭтотОбъект);
	ПоказатьВыборИзСписка(Оповещение, СписокДляВыбора);
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеКонтрагентНачалоВыбораОповещение(Результат, ДопПараметры) Экспорт
	Если Результат = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Значение = "Наша организация" тогда
		ТекДанные = Элементы.Распределение.ТекущиеДанные;
		ТекДанные.Контрагент = Объект.Организация;
		РаспределениеКонтрагентПриИзменении(Неопределено);
	ИначеЕсли Результат.Значение = "Контрагент" тогда
		ОткрытьФорму("Справочник.Контрагенты.ФормаВыбора",, Элементы.РаспределениеКонтрагент);
	ИначеЕсли Результат.Значение = "Физическое лицо" тогда
		ОткрытьФорму("Справочник.ФизическиеЛица.ФормаВыбора",, Элементы.РаспределениеКонтрагент);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеКонтрагентПриИзменении(Элемент)
	РассчитатьДинамическиеКолонки();
	ТекДанные = Элементы.Распределение.ТекущиеДанные;
	Если ТекДанные.ЭтоКонтрагент Тогда
		ДанныеОбменаССервером = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, Дата",
			Объект.Организация, ТекДанные.Контрагент, ТекДанные.ДоговорКонтрагента, Объект.Дата);
		// Получим данные с сервера
		ЗначенияДляЗаполнения = ИзменениеКонтрагентаСервер(ДанныеОбменаССервером);
		ТекДанные.ДоговорКонтрагента = ЗначенияДляЗаполнения.ДоговорКонтрагента;
		
		// Могли поменять договор.
		ПриИзмененииДоговораТабЧасти(ТекДанные);
	Иначе
		ТекДанные.ДоговорКонтрагента      = Неопределено;
		ТекДанные.КурсВзаиморасчетов      = 0;
		ТекДанные.КратностьВзаиморасчетов = 0;
	КонецЕсли;
	ТекДанные.Сделка = Неопределено;
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеДоговорКонтрагентаПриИзменении(Элемент)
	ТекДанные = Элементы.Распределение.ТекущиеДанные;
	ПриИзмененииДоговораТабЧасти(ТекДанные);
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеДоговорКонтрагентаСоздание(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВидДоговораДоступныеЗначения = Новый Массив;
	
	мВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком");
	ВидДоговораДоступныеЗначения.Добавить(мВидДоговора);
	
	мВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем");
	ВидДоговораДоступныеЗначения.Добавить(мВидДоговора);  
	
	ТекДанные = Элементы.Распределение.ТекущиеДанные;
	
	ПараметрыФормы = Новый Структура();  
	ПараметрыФормы.Вставить("Владелец", ТекДанные.Контрагент);
	ПараметрыФормы.Вставить("ВидДоговораДоступныеЗначения", ВидДоговораДоступныеЗначения);
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеВалютаПриИзменении(Элемент)
	ТекДанные = Элементы.Распределение.ТекущиеДанные;
	
	СтруктураКурсаВзаиморасчетов = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ТекДанные.Валюта, Объект.Дата);
		
	ТекДанные.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
	ТекДанные.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;

	РассчитатьСуммуВзаиморасчетов(ТекДанные);
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеСуммаПриИзменении(Элемент)
	ТекДанные = Элементы.Распределение.ТекущиеДанные;
	РассчитатьСуммуНДС(ТекДанные);
	РассчитатьСуммуВсегоВстрокеТЧ(ТекДанные);
	РассчитатьСуммуВзаиморасчетов(ТекДанные);
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеСуммаНДСПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Распределение.ТекущиеДанные;
	РассчитатьСуммуВсегоВстрокеТЧ(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеВсегоПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Распределение.ТекущиеДанные;
	
	СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	
	Если Объект.СуммаВключаетНДС Тогда
		СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Всего;
		СтрокаТабличнойЧасти.СуммаНДС = СтрокаТабличнойЧасти.Всего - (СтрокаТабличнойЧасти.Всего) / ((СтавкаНДС + 100) / 100);
	Иначе
		СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Всего / ((СтавкаНДС + 100) / 100);
		СтрокаТабличнойЧасти.СуммаНДС = СтрокаТабличнойЧасти.Всего - СтрокаТабличнойЧасти.Сумма;
	КонецЕсли;
	
	РассчитатьСуммуВзаиморасчетов(СтрокаТабличнойЧасти);

КонецПроцедуры

&НаКлиенте
Процедура РаспределениеСтавкаНДСПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Распределение.ТекущиеДанные;
	
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	РассчитатьСуммуВсегоВстрокеТЧ(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеКурсВзаиморасчетовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	СтрокаПлатеж = Элементы.Распределение.ТекущиеДанные;
	
	// Если не заполнен договор, то курс взаиморасчетов выбрать нельзя
	Если НЕ ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда  
		ПоказатьПредупреждение(Неопределено, НСтр("en='To select a course of mutual settlements need to choose the counterparty contract.';ru='Для выбора курса взаиморасчетов нужно выбрать договор контрагента.'"));
		Возврат;
	КонецЕсли;

	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Валюта", уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(СтрокаПлатеж.ДоговорКонтрагента, "ВалютаВзаиморасчетов"));
	ПараметрыФормы.Вставить("КратностьВалюты", СтрокаПлатеж.КратностьВзаиморасчетов);
	ПараметрыФормы.Вставить("КурсВалюты", СтрокаПлатеж.КурсВзаиморасчетов);
	ПараметрыФормы.Вставить("ДатаУстановкиКурсаИКратности", Объект.Дата);
	ОповещениеЗакрытие = Новый ОписаниеОповещения("КурсВзаиморасчетовНачалоВыбораЗакрытие", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.уатФормаВводаКурсаИКратности", ПараметрыФормы, ЭтотОбъект,,,, ОповещениеЗакрытие, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура КурсВзаиморасчетовНачалоВыбораЗакрытие(Результат, ДопПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		СтрокаПлатеж.КурсВзаиморасчетов      = Результат.КурсВалюты;
		СтрокаПлатеж.КратностьВзаиморасчетов = Результат.КратностьВалюты;
	КонецЕсли;
	
	РассчитатьСуммуВзаиморасчетов(СтрокаПлатеж);
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеКурсВзаиморасчетовПриИзменении(Элемент)
	РассчитатьСуммуВзаиморасчетов(Элементы.Распределение.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеКратностьВзаиморасчетовПриИзменении(Элемент)
	РассчитатьСуммуВзаиморасчетов(Элементы.Распределение.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура РаспределениеСуммаВзаиморасчетовПриИзменении(Элемент)
	ТекДанные = Элементы.Распределение.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ВалютаВзаиморасчетов = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекДанные.ДоговорКонтрагента, "ВалютаВзаиморасчетов");

	Если (ТекДанные.КурсВзаиморасчетов <> 0) И (ТекДанные.КратностьВзаиморасчетов <> 0) Тогда
		Если Объект.УчитыватьНДС И НЕ Объект.СуммаВключаетНДС Тогда
			ТекДанные.Всего = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекДанные.СуммаВзаиморасчетов,
				ВалютаВзаиморасчетов             , Объект.ВалютаДокумента,
				ТекДанные.КурсВзаиморасчетов     , Объект.КурсДокумента,
				ТекДанные.КратностьВзаиморасчетов, Объект.КратностьДокумента);
			
			СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеСтавкиНДС(ТекДанные.СтавкаНДС);
			ТекДанные.Сумма = ТекДанные.Всего / ((СтавкаНДС + 100) / 100);
			ТекДанные.СуммаНДС = ТекДанные.Всего - ТекДанные.Сумма;
		Иначе
			ТекДанные.Сумма = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекДанные.СуммаВзаиморасчетов,
				ВалютаВзаиморасчетов             , Объект.ВалютаДокумента,
				ТекДанные.КурсВзаиморасчетов     , Объект.КурсДокумента,
				ТекДанные.КратностьВзаиморасчетов, Объект.КратностьДокумента);	
			
			Если Объект.УчитыватьНДС Тогда	
				РассчитатьСуммуНДС(ТекДанные);
				РассчитатьСуммуВсегоВстрокеТЧ(ТекДанные);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СуммаПодтвержденнаяПриИзменении(Элемент)
	РассчитатьДинамическиеКолонки();
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

&НаКлиенте
Процедура ТребуетСогласованияПриИзменении(Элемент)
	
	// уатСогласованиеДокументов
	уатСогласованиеДокументовКлиент.ТребуетСогласованияПриИзменении(ЭтотОбъект);
	// Конец уатСогласованиеДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСогласованНажатие(Элемент)
	
	// уатСогласованиеДокументов
	уатСогласованиеДокументовКлиент.НадписьСогласованНажатие(ЭтотОбъект);
	// Конец уатСогласованиеДокументов
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура РедактироватьЦеныИВалюту(Команда)
	ОбработатьИзмененияПоКнопкеЦеныИВалюты(Новый ОписаниеОповещения("РедактироватьЦеныИВалютуЗавершение", ЭтотОбъект), Объект.ВалютаДокумента);
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЦеныИВалютуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	РассчитатьСуммуВзаиморасчетов();
	РассчитатьДинамическиеКолонки();
	ОбновитьВсегоВТЧСервер();
	ВывестиСуммовыеИтогиДокумента();
	УстановитьВидимостьДоступность();
	Модифицированность = Истина;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаСервере
Процедура ВывестиПредставлениеГруза()
	Если ЗначениеЗаполнено(Объект.ЗаказГрузоотправителя) Тогда
		ГрузПредставление = СокрЛП(Объект.ЗаказГрузоотправителя.НазваниеГруза);
	Иначе
		ГрузПредставление = "";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииКонтрагентаИлиОрганизации(Знач Оповещение)
	
	ДанныеОбменаССервером = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, Дата");
	ЗаполнитьЗначенияСвойств(ДанныеОбменаССервером, Объект);
	// Получим данные с сервера
	ДанныеОбменаССервером.ДоговорКонтрагента = Объект.ДоговорКонтрагента;
	ЗначенияДляЗаполнения = ИзменениеКонтрагентаСервер(ДанныеОбменаССервером);
	Объект.ДоговорКонтрагента = ЗначенияДляЗаполнения.ДоговорКонтрагента;
	
	ДоговорПередИзменением = Договор;
	//Договор = Объект.ДоговорКонтрагента;
	
	Оповещ = Новый ОписаниеОповещения("ПриИзмененииКонтрагентаИлиОрганизацииЗавершение", ЭтотОбъект, Новый Структура("Оповещение", Оповещение));
	уатОбщегоНазначенияКлиент.ПриИзмененииДоговора(ЭтаФорма, Оповещ, ДоговорПередИзменением);
	
	УстановитьОграничениеТипаСделка(Объект.ДоговорКонтрагента, Элементы.Сделка);
	УстановитьВидимостьДоступность();
	
КонецПроцедуры // ПриИзмененииКонтрагентаИлиОрганизации()

&НаКлиенте
Процедура ПриИзмененииКонтрагентаИлиОрганизацииЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Оповещение = ДополнительныеПараметры.Оповещение;
    Если Не Оповещение = Неопределено Тогда 
		ВыполнитьОбработкуОповещения(Оповещение);
	КонецЕсли;
	
	УстановитьОтборЗаказаНаТСиМаршрутногоЛиста();

КонецПроцедуры // ПриИзмененииКонтрагентаИлиОрганизации()

&НаКлиенте
Процедура ПриИзмененииДоговораТабЧасти(ТекДанные)

	Если ЗначениеЗаполнено(Объект.Организация) И уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(
		ТекДанные.ДоговорКонтрагента, "Организация") <> Объект.Организация Тогда
		
		ТекДанные.ДоговорКонтрагента = Неопределено;
	КонецЕсли;
	
	Если МноговалютныйУчет Тогда
		ТекДанные.Валюта = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекДанные.ДоговорКонтрагента,
			"ВалютаВзаиморасчетов");
		СтруктураКурсаВзаиморасчетов = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ТекДанные.Валюта, Объект.Дата);
	Иначе
		СтруктураКурсаВзаиморасчетов = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(
			уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекДанные.ДоговорКонтрагента,
			"ВалютаВзаиморасчетов"), Объект.Дата);
	КонецЕсли;
		
	ТекДанные.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
	ТекДанные.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;

	РассчитатьСуммуВзаиморасчетов(ТекДанные);

	УстановитьВидимостьДоступность();

КонецПроцедуры // ПриИзмененииДоговора()

&НаСервереБезКонтекста
Функция ИзменениеКонтрагентаСервер(ДанныеДляЗаполнения)
	СтруктураПараметровДляПолученияДоговора = 
		уатЗаполнениеДокументов.ПолучитьСтруктуруПараметровДляПолученияДоговораПродажи();
	
	ЗначенияДляЗаполнения = уатОбщегоНазначенияСервер.ПриИзмененииЗначенияКонтрагента(ДанныеДляЗаполнения,
		СтруктураПараметровДляПолученияДоговора);
	Возврат ЗначенияДляЗаполнения;
КонецФункции

// Процедура выполняет пересчет в табличной части документа после изменений 
// в форме "Цены и валюта".Выполняется пересчет колонок: цена, скидка, сумма,
// сумма НДС, всего.
//
&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты(Знач Оповещение, Знач ВалютаРасчетовПередИзменением, ПересчитатьЦены = Ложь)
	
	// 1. Формируем структуру параметров для заполнения формы "Цены и Валюта".
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВалютаДокумента",		  Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("Курс",				  Объект.КурсДокумента);
	СтруктураПараметров.Вставить("Кратность",			  Объект.КратностьДокумента);
	СтруктураПараметров.Вставить("Контрагент",			  Объект.Контрагент);
	СтруктураПараметров.Вставить("Договор",				  Объект.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("Организация",			  Объект.Организация);
	СтруктураПараметров.Вставить("ДатаКурса",		      Объект.Дата);
	СтруктураПараметров.Вставить("ПерезаполнитьЦены",	  Ложь);
	СтруктураПараметров.Вставить("ПересчитатьЦены",		  ПересчитатьЦены);
	СтруктураПараметров.Вставить("БылиВнесеныИзменения",  Ложь);
	СтруктураПараметров.Вставить("СуммаВключаетНДС",      Объект.СуммаВключаетНДС);
	СтруктураПараметров.Вставить("НалогообложениеНДС",	  Объект.УчитыватьНДС);
	// Для объедининенного решения с БП 3
	СтруктураПараметров.Вставить("ДокументБезНДС",        НЕ Объект.УчитыватьНДС);
	// Для объедининенного решения с БП 3

	Если НЕ ПравоРедактированиеДокумента() Тогда
		СтруктураПараметров.Вставить("ТолькоПросмотр", Истина);
	КонецЕсли;
		
	// 2. Открываем форму "Цены и Валюта".
	ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров,,,,,
		Новый ОписаниеОповещения("ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение", ЭтотОбъект,
		Новый Структура("ВалютаРасчетовПередИзменением, Оповещение", ВалютаРасчетовПередИзменением, Оповещение)),
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры // ОбработатьИзмененияПоКнопкеЦеныИВалюты()

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено ИЛИ НЕ ПравоРедактированиеДокумента() Тогда
		Возврат;
	КонецЕсли;
	
	ВалютаРасчетовПередИзменением = ДополнительныеПараметры.ВалютаРасчетовПередИзменением;
	Оповещение                    = ДополнительныеПараметры.Оповещение;
	СтруктураЦеныИВалюта          = Результат;
	
	// 3. Перезаполняем табличную часть "Номенклатура", если были внесены изменения в форме "Цены и Валюта".
	Если ТипЗнч(СтруктураЦеныИВалюта) = Тип("Структура")  Тогда
		ДопПараметры = Новый Структура("ПредКурс, ПредКратность, Курс, Кратность, ПредДатаКурса",
			Объект.КурсДокумента, Объект.КратностьДокумента, СтруктураЦеныИВалюта.Курс,
			СтруктураЦеныИВалюта.Кратность, Объект.Дата);
			
		Если СтруктураЦеныИВалюта.Свойство("ВалютаДокумента") И СтруктураЦеныИВалюта.Свойство("Курс") И СтруктураЦеныИВалюта.Свойство("Кратность")
            И СтруктураЦеныИВалюта.Свойство("СуммаВключаетНДС") И  СтруктураЦеныИВалюта.Свойство("НалогообложениеНДС") Тогда
			Объект.ВалютаДокумента		   = СтруктураЦеныИВалюта.ВалютаДокумента;
			Объект.КурсДокумента		   = СтруктураЦеныИВалюта.Курс;
			Объект.КратностьДокумента	   = СтруктураЦеныИВалюта.Кратность;
			Объект.СуммаВключаетНДС		   = СтруктураЦеныИВалюта.СуммаВключаетНДС;
            Объект.УчитыватьНДС			   = СтруктураЦеныИВалюта.НалогообложениеНДС;
        КонецЕсли;
		
		// Пересчитываем сумму если изменился признак Налогообложение НДС.
		Если СтруктураЦеныИВалюта.Свойство("НалогообложениеНДС") И СтруктураЦеныИВалюта.Свойство("ПредНалогообложениеНДС")
			И СтруктураЦеныИВалюта.НалогообложениеНДС <> СтруктураЦеныИВалюта.ПредНалогообложениеНДС Тогда
			
			ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
		КонецЕсли;
		
		// Пересчитываем цены по валюте.
		Если СтруктураЦеныИВалюта.Свойство("ПересчитатьЦены") И СтруктураЦеныИВалюта.ПересчитатьЦены Тогда	
			ПересчитатьЦеныТабличнойЧастиПоВалюте(ВалютаРасчетовПередИзменением, "Распределение", ДопПараметры);
		КонецЕсли;
		
		СтруктураКурсы = уатОбщегоНазначенияСервер.ПолучитьКурсыВалют(ВалютаРасчетовПередИзменением, Объект.ВалютаДокумента, Объект.Дата);
		
		Объект.СуммаВыставленная = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(Объект.СуммаВыставленная, 
			ВалютаРасчетовПередИзменением,
			Объект.ВалютаДокумента,
			СтруктураКурсы.КурсНач, 
			Объект.КурсДокумента, 
			СтруктураКурсы.КратностьНач,
			Объект.КратностьДокумента);
			
		Объект.СуммаПодтвержденная = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(Объект.СуммаПодтвержденная, 
			ВалютаРасчетовПередИзменением,
			Объект.ВалютаДокумента,
			СтруктураКурсы.КурсНач, 
			Объект.КурсДокумента, 
			СтруктураКурсы.КратностьНач,
			Объект.КратностьДокумента);
			
		// Пересчитываем сумму если изменился признак "Сумма включает НДС".
		Если СтруктураЦеныИВалюта.Свойство("СуммаВключаетНДС") И СтруктураЦеныИВалюта.Свойство("ПредСуммаВключаетНДС") Тогда
			Если СтруктураЦеныИВалюта.СуммаВключаетНДС <> СтруктураЦеныИВалюта.ПредСуммаВключаетНДС Тогда
				ПересчитатьСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	УстановитьВидимостьДоступность();
	ОбновитьВсегоВТЧСервер();
	ВывестиСуммовыеИтогиДокумента();
	
	Если Оповещение <> Неопределено Тогда 
		ВыполнитьОбработкуОповещения(Оповещение);
	КонецЕсли;
	
КонецПроцедуры // ОбработатьИзмененияПоКнопкеЦеныИВалюты()

&НаСервере
Процедура ОбновитьВсегоВТЧСервер()
	Для Каждого СтрокаТабличнойЧасти Из Объект.Распределение Цикл
		СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма
			+ ?(Объект.УчитыватьНДС И НЕ Объект.СуммаВключаетНДС, СтрокаТабличнойЧасти.СуммаНДС, 0);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьДоступность()
	
	Элементы.РаспределениеСтавкаНДС.Видимость = Объект.УчитыватьНДС;
	Элементы.РаспределениеСуммаНДС.Видимость  = Объект.УчитыватьНДС;
	Элементы.РаспределениеВсего.Видимость     = Объект.УчитыватьНДС;
	
	Элементы.РаспределениеВалюта.Видимость = МноговалютныйУчет;
	Элементы.РаспределениеВалютаВзаиморасчетов.Видимость = НЕ МноговалютныйУчет;
	
	Элементы.ДоговорКонтрагента.Видимость = флРекламацияОтКонтрагента;
	Элементы.Контрагент.Заголовок = ?(флРекламацияОтКонтрагента, НСтр("en='Counterpartу';ru='Контрагент'"), НСтр("en='Customer';ru='Заказчик'"));
	
	ВедениеВзаиморасчетов = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(Объект.ДоговорКонтрагента, "ВедениеВзаиморасчетов");
	Элементы.Сделка.Видимость = (ВедениеВзаиморасчетов = ПредопределенноеЗначение("Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоНакладным")
		ИЛИ ВедениеВзаиморасчетов = ПредопределенноеЗначение("Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам"));
	
	ВывестиСуммовыеИтогиДокумента();
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьДинамическиеКолонки()
	Для Каждого ТекСтрока Из Объект.Распределение Цикл
		СуммаВсегоСтроки = ТекСтрока.Сумма + ?(Объект.УчитыватьНДС И НЕ Объект.СуммаВключаетНДС, ТекСтрока.СуммаНДС, 0);
		ТекСтрока.ПроцентОтПодтвержденнойСуммы = ?(Объект.СуммаПодтвержденная = 0, 0, Окр((СуммаВсегоСтроки / Объект.СуммаПодтвержденная * 100), 2));
		ТекСтрока.ЭтоКонтрагент = (ТекСтрока.Контрагент = Неопределено ИЛИ ТипЗнч(ТекСтрока.Контрагент) = Тип("СправочникСсылка.Контрагенты"));
		ТекСтрока.СделкаКонтрольЗаполнения = (ТекСтрока.ЭтоКонтрагент
			И (ТекСтрока.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоНакладным
			ИЛИ ТекСтрока.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам));
	КонецЦикла;
КонецПроцедуры

// Процедура рассчитывает сумму взаиморасчетов
//
&НаКлиенте
Процедура РассчитатьСуммуВзаиморасчетов(ТекДанные = Неопределено)

	Если ТекДанные = Неопределено Тогда
		Для Каждого ТекСтрока Из Объект.Распределение Цикл
			РассчитатьСуммуВзаиморасчетов(ТекСтрока);
		КонецЦикла;
		Возврат;
	КонецЕсли;
	
	ВалютаВзаиморасчетов = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекДанные.ДоговорКонтрагента, "ВалютаВзаиморасчетов");

	Если (ТекДанные.КурсВзаиморасчетов <> 0) И (ТекДанные.КратностьВзаиморасчетов <> 0) Тогда
		СуммаВсегоСтроки = ТекДанные.Сумма + ?(Объект.УчитыватьНДС И НЕ Объект.СуммаВключаетНДС, ТекДанные.СуммаНДС, 0);
		ТекДанные.СуммаВзаиморасчетов = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(СуммаВсегоСтроки,
			Объект.ВалютаДокумента   , ВалютаВзаиморасчетов,
			Объект.КурсДокумента     , ТекДанные.КурсВзаиморасчетов,
			Объект.КратностьДокумента, ТекДанные.КратностьВзаиморасчетов);	
	Иначе
		ТекДанные.СуммаВзаиморасчетов = 0;
	КонецЕсли;
	
КонецПроцедуры // РассчитатьСуммуВзаиморасчетов()

&НаКлиенте
Процедура УстановитьОграничениеТипаСделка(ДоговорКонтрагента, ЭлементСделка)
	ВедениеВзаиморасчетов = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(ДоговорКонтрагента, "ВедениеВзаиморасчетов");
	Если ВедениеВзаиморасчетов = ПредопределенноеЗначение("Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоНакладным") Тогда
		ЭлементСделка.ОграничениеТипа = Новый ОписаниеТипов("ДокументСсылка.уатПоступлениеТоваровУслуг, ДокументСсылка.уатРеализацияУслуг");
				
		мсвПараметрыВыбора = Новый Массив;
		мсвПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.ДоговорКонтрагента", ДоговорКонтрагента));
		ЭлементСделка.ПараметрыВыбора = Новый ФиксированныйМассив(мсвПараметрыВыбора);
		Если ЭлементСделка = Элементы.Сделка Тогда
			Элементы.Сделка.Заголовок = "Реализация услуг";
		КонецЕсли;
		
	ИначеЕсли ВедениеВзаиморасчетов = ПредопределенноеЗначение("Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам") Тогда
		ЭлементСделка.ОграничениеТипа = Новый ОписаниеТипов("ДокументСсылка.уатСчетНаОплатуПокупателю, ДокументСсылка.уатСчетНаОплатуПоставщика");
				
		мсвПараметрыВыбора = Новый Массив;
		мсвПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.ДоговорКонтрагента", ДоговорКонтрагента));
		ЭлементСделка.ПараметрыВыбора = Новый ФиксированныйМассив(мсвПараметрыВыбора);
		Если ЭлементСделка = Элементы.Сделка Тогда
			Элементы.Сделка.Заголовок = "Счет на оплату";
		КонецЕсли;
		
	Иначе
		ЭлементСделка.ОграничениеТипа = Новый ОписаниеТипов("Неопределено");
				
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ВывестиСуммовыеИтогиДокумента()
	
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	Всего     = уатОбщегоНазначенияТиповые.уатПолучитьСуммуДокументаСНДС(ДокОбъект, "Распределение");
	ВсегоНДС  = уатОбщегоНазначенияТиповые.ПолучитьНДСДокумента(ДокОбъект, "Распределение");
	
	Если Объект.УчитыватьНДС Тогда
		Если Объект.СуммаВключаетНДС Тогда 
			НадписьВсегоНДС = НСтр("en='VAT amount';ru='НДС в сумме'") + ":";
		Иначе 
			НадписьВсегоНДС = НСтр("en='VAT from above';ru='НДС сверху'") + ":";
		КонецЕсли;
		НадписьВсего = НСтр("en='Total including VAT';ru='Всего с НДС'");
		Элементы.СтраницыИтогов.ТекущаяСтраница = Элементы.ИтогоУчетНДС;
	Иначе
		НадписьВсего = НСтр("en='Total';ru='Всего'");
		Элементы.СтраницыИтогов.ТекущаяСтраница = Элементы.ИтогоБезНДС;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ВалютаДокумента) Или Объект.ВалютаДокумента = мВалютаРегламентированногоУчета Тогда 
		НадписьКурс = "(1.0000)";
		Элементы.НадписьКурс.Видимость  = Ложь;
		Элементы.НадписьКурс2.Видимость = Ложь;
	Иначе 
		НадписьКурс = "(" + Формат(
			?(Объект.КратностьДокумента = 0, Объект.КурсДокумента, Объект.КурсДокумента/Объект.КратностьДокумента),
			"ЧДЦ=4; ЧРД=.; ЧН=0.0000; ЧГ=0") + ")";
		Элементы.НадписьКурс.Видимость  = Истина;
		Элементы.НадписьКурс2.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПравоРедактированиеДокумента()
	Рез = ПравоДоступа("Редактирование", Метаданные.Документы.уатРекламация_уэ);
	Возврат Рез;
КонецФункции

&НаСервере
Процедура ПересчитатьЦеныТабличнойЧастиПоВалюте(ВалютаРасчетовПередИзменением, ИмяТЧ, ДопПараметры)
	уатОбщегоНазначенияСервер.ПересчитатьЦеныТабличнойЧастиПоВалюте(Объект, ВалютаРасчетовПередИзменением, ИмяТЧ, ДопПараметры);
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборЗаказаНаТСиМаршрутногоЛиста(флУстановитьЗначениеЗаказа = Ложь, флУстановитьЗначениеМЛ = Ложь)
	мсвПараметрыВыбора = Новый Массив;
	Если ЗначениеЗаполнено(Объект.МаршрутныйЛист) Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗЛИЧНЫЕ
		|	уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя КАК Ссылка
		|ИЗ
		|	Документ.уатМаршрутныйЛист.Заказы КАК уатМаршрутныйЛистЗаказы
		|ГДЕ
		|	уатМаршрутныйЛистЗаказы.Ссылка = &МаршрутныйЛист
		|	И уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя <> ЗНАЧЕНИЕ(Документ.уатЗаказГрузоотправителя.ПустаяСсылка)");
		Запрос.УстановитьПараметр("МаршрутныйЛист", Объект.МаршрутныйЛист);
		мсвЗаказы = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		мсвПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(мсвЗаказы)));
		Если мсвЗаказы.Количество() = 1 И флУстановитьЗначениеЗаказа Тогда
			Объект.ЗаказГрузоотправителя = мсвЗаказы[0];
			ЗаказГрузоотправителяПриИзмененииСервер();
			УстановитьОтборЗаказаНаТСиМаршрутногоЛиста();
		КонецЕсли;
	Иначе
		мсвПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.Контрагент", Объект.Контрагент));
		мсвПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.ДоговорКонтрагента", Объект.ДоговорКонтрагента));
	КонецЕсли;
	Элементы.ЗаказГрузоотправителя.ПараметрыВыбора = Новый ФиксированныйМассив(мсвПараметрыВыбора);
	
	мсвПараметрыВыбора = Новый Массив;
	Если ЗначениеЗаполнено(Объект.ЗаказГрузоотправителя) Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	уатМаршрутныйЛист.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.уатМаршрутныйЛист КАК уатМаршрутныйЛист
		|ГДЕ
		|	уатМаршрутныйЛист.Заказы.ЗаказГрузоотправителя = &ЗаказГрузоотправителя");
		Запрос.УстановитьПараметр("ЗаказГрузоотправителя", Объект.ЗаказГрузоотправителя);
		мсвМЛ = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		мсвПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(мсвМЛ)));
		Если мсвМЛ.Количество() = 1 И флУстановитьЗначениеМЛ Тогда
			Объект.МаршрутныйЛист = мсвМЛ[0];
			УстановитьОтборЗаказаНаТСиМаршрутногоЛиста();
		КонецЕсли;
	Иначе
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	уатМаршрутныйЛист.Ссылка КАК Ссылка
		|ИЗ
		|	Документ.уатМаршрутныйЛист КАК уатМаршрутныйЛист
		|ГДЕ
		|	уатМаршрутныйЛист.Заказы.ЗаказГрузоотправителя.Контрагент = &Контрагент
		|	И уатМаршрутныйЛист.Заказы.ЗаказГрузоотправителя.ДоговорКонтрагента = &ДоговорКонтрагента");
		Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент);
		Запрос.УстановитьПараметр("ДоговорКонтрагента", Объект.ДоговорКонтрагента);
		мсвМЛ = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
		мсвПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", Новый ФиксированныйМассив(мсвМЛ)));
	КонецЕсли;
	Элементы.МаршрутныйЛист.ПараметрыВыбора = Новый ФиксированныйМассив(мсвПараметрыВыбора);
КонецПроцедуры

&НаСервере
Процедура УстановитьОграничениеТипаКонтрагент(Очищать = Истина)
	Если флРекламацияОтКонтрагента Тогда
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
		Если Очищать Тогда
			Объект.Контрагент = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");		
			Элементы.Контрагент.ПодсказкаВвода = НСтр("'Введите ИНН или наименование'; en = 'Enter TIN or name'");
		КонецЕсли;
	Иначе
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций");
		Если Очищать Тогда
			Объект.Контрагент = ПредопределенноеЗначение("Справочник.ПодразделенияОрганизаций.ПустаяСсылка");
			Элементы.Контрагент.ПодсказкаВвода = "";
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьНДС()
	ПересчитатьСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС();
	ОбновитьВсегоВТЧСервер();
	ВывестиСуммовыеИтогиДокумента();
	УстановитьВидимостьДоступность();
КонецПроцедуры

// Рассчитывается сумма НДС в строке табличной части.
//
&НаКлиенте
Процедура РассчитатьСуммуНДС(СтрокаТабличнойЧасти)
	
	СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	
	СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
	СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
	СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
	
КонецПроцедуры // РассчитатьСуммуНДС()

&НаКлиенте
Процедура РассчитатьСуммуВсегоВстрокеТЧ(СтрокаТабличнойЧасти)
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма
			+ ?(Объект.УчитыватьНДС И НЕ Объект.СуммаВключаетНДС, СтрокаТабличнойЧасти.СуммаНДС, 0);
КонецПроцедуры

// Процедура заполняет Ставку НДС в табличной части по системе налогообложения.
// 
&НаСервере
Процедура ЗаполнитьСтавкуНДСПоНалогообложениеНДС()
	
	Если Объект.УчитыватьНДС Тогда
		СтавкаНДСПоУмолчанию = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
			ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнаяСтавкаНДС")
	Иначе
		СтавкаНДСПоУмолчанию = Перечисления.СтавкиНДС.ПустаяСсылка();
	КонецЕсли;
	
	Для каждого СтрокаТабличнойЧасти Из Объект.Распределение Цикл
		СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
		
		Если Объект.УчитыватьНДС Тогда
			СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
			СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
				СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
				СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
		Иначе
			СтрокаТабличнойЧасти.СуммаНДС = 0;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры // ЗаполнитьСтавкуНДСПоНалогообложениеНДС()

&НаСервере
Процедура ПересчитатьСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС()
	уатОбщегоНазначенияСервер.ПересчитатьСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС(Объект.Распределение, Объект.СуммаВключаетНДС);
КонецПроцедуры

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор  = "Реестр";
	КомандаПечати.Представление  = НСтр("en='Document register';ru='Реестр документов'");
	КомандаПечати.ЗаголовокФормы = НСтр("en='Register of documents ""Claim""';ru='Реестр документов ""Рекламация""'");
	КомандаПечати.Обработчик     = "уатОбщегоНазначенияТиповыеКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм     = "ФормаСписка";
	КомандаПечати.Порядок        = 100;
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	Настройки.ПриПолученииСлужебныхРеквизитов = Ложь;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.УправлениеДоступом

// Позволяет переопределить ограничение, указанное в модуле менеджера объекта метаданных.
//
// Параметры:
//  Ограничение - Структура:
//    * Текст                             - Строка - ограничение доступа для пользователей.
//                                          Если пустая строка, значит, доступ разрешен.
//    * ТекстДляВнешнихПользователей      - Строка - ограничение доступа для внешних пользователей.
//                                          Если пустая строка, значит, доступ запрещен.
//    * ПоВладельцуБезЗаписиКлючейДоступа - Неопределено - определить автоматически.
//                                        - Булево - если Ложь, то всегда записывать ключи доступа,
//                                          если Истина, тогда не записывать ключи доступа,
//                                          а использовать ключи доступа владельца (требуется,
//                                          чтобы ограничение было строго по объекту-владельцу).
//   * ПоВладельцуБезЗаписиКлючейДоступаДляВнешнихПользователей - Неопределено, Булево - также
//                                          как у параметра ПоВладельцуБезЗаписиКлючейДоступа.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Подразделение)";
	
	Ограничение.ТекстДляВнешнихПользователей = Ограничение.Текст;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	
	СформироватьТаблицаЗадолженностьКонтрагентов(ДокументСсылка, СтруктураДополнительныеСвойства);
	СформироватьТаблицаРекламации(ДокументСсылка, СтруктураДополнительныеСвойства);
	Если ЗначениеЗаполнено(ДокументСсылка.МаршрутныйЛист) Тогда
		СформироватьТаблицаНевыставленныеРекламации(ДокументСсылка, СтруктураДополнительныеСвойства);
	КонецЕсли;
	СформироватьТаблицаОперативныеРасходы(ДокументСсылка, СтруктураДополнительныеСвойства);
	
КонецПроцедуры // ИнициализироватьДанныеДокумента()

Процедура ВыполнитьКонтроль(ДокументСсылка, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь) Экспорт
	
	Если ЗначениеЗаполнено(ДокументСсылка.ЗаказГрузоотправителя) Тогда
		Заголовок = уатОбщегоНазначенияТиповые.уатПредставлениеДокументаПриПроведении(ДокументСсылка);
		
		мЗапрос = Новый Запрос;
		мЗапрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатНевыставленныеРекламации.ЗаказГрузоотправителя,
		|	уатНевыставленныеРекламации.КоличествоОстаток
		|ИЗ
		|	РегистрНакопления.уатНевыставленныеРекламации_уэ.Остатки(
		|			&МоментВремени,
		|			ЗаказГрузоотправителя = &Ссылка
		|				И МаршрутныйЛист = &МаршрутныйЛист) КАК уатНевыставленныеРекламации
		|ГДЕ
		|	ЕСТЬNULL(уатНевыставленныеРекламации.КоличествоОстаток, 0) < 0";
		
		мГраницаКонтроля = Новый Граница(ДокументСсылка.МоментВремени(), ВидГраницы.Исключая);
		
		мЗапрос.УстановитьПараметр("Ссылка"        , ДокументСсылка.ЗаказГрузоотправителя);
		мЗапрос.УстановитьПараметр("МаршрутныйЛист", ДокументСсылка.МаршрутныйЛист);
		мЗапрос.УстановитьПараметр("МоментВремени" , мГраницаКонтроля);
		
		Выборка = мЗапрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ТекстНСТР = СтрШаблон(НСтр("en='According to document ""%1"" has already been entered complaint!';ru='По документу ""%1"" уже была введена рекламация!'"), Выборка.ЗаказГрузоотправителя);
			уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, Отказ, Заголовок);	
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Получает дополнительные реквизиты для отображения в отчете "Реестр документов"
// 
// Возвращаемое значение:
//  Структура - доп. реквизитов
//
Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура();
	Результат.Вставить("Информация", "Контрагент");
	Результат.Вставить("СуммаДокумента","СуммаПодтвержденная");
	Возврат Результат;
	
КонецФункции

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Процедура СформироватьТаблицаЗадолженностьКонтрагентов(ДокументСсылка, СтруктураДополнительныеСвойства)
	флМноговалютныйУчет = ПолучитьФункциональнуюОпцию("уатМноговалютныйУчет");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатРекламация_уэРаспределение.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ВЫБОР
	|		КОГДА &МноговалютныйУчет
	|			ТОГДА уатРекламация_уэРаспределение.Валюта
	|		ИНАЧЕ уатРекламация_уэРаспределение.ДоговорКонтрагента.ВалютаВзаиморасчетов
	|	КОНЕЦ КАК Валюта,
	|	уатРекламация_уэРаспределение.Ссылка.Организация КАК Организация,
	|	уатРекламация_уэРаспределение.Контрагент КАК Контрагент,
	|	уатРекламация_уэРаспределение.СуммаВзаиморасчетов КАК СуммаВзаиморасчетов,
	|	уатРекламация_уэРаспределение.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	уатРекламация_уэРаспределение.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	|	уатРекламация_уэРаспределение.Сделка КАК Сделка,
	|	0 КАК СуммаУпр,
	|	уатРекламация_уэРаспределение.Сумма + ВЫБОР
	|		КОГДА уатРекламация_уэРаспределение.Ссылка.УчитыватьНДС
	|				И НЕ уатРекламация_уэРаспределение.Ссылка.СуммаВключаетНДС
	|			ТОГДА уатРекламация_уэРаспределение.СуммаНДС
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма,
	|	уатРекламация_уэРаспределение.Ссылка КАК Регистратор,
	|	уатРекламация_уэРаспределение.Ссылка.Дата КАК Период,
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Приход) КАК ВидДвижения
	|ИЗ
	|	Документ.уатРекламация_уэ.Распределение КАК уатРекламация_уэРаспределение
	|ГДЕ
	|	уатРекламация_уэРаспределение.Ссылка = &Ссылка
	|	И уатРекламация_уэРаспределение.Контрагент ССЫЛКА Справочник.Контрагенты");
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	Запрос.УстановитьПараметр("МноговалютныйУчет", флМноговалютныйУчет);
	
	ТабЗадолженностиКонтрагентов = Запрос.Выполнить().Выгрузить();
	
	ТабЗадолженностиКонтрагентов.Колонки.Добавить("СделкаВрем"); //тип сделки в ТЧ не содержит Заказ на ТС, а он нам нужен
	
	СтруктураКурсаВалютыДок = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ДокументСсылка.ВалютаДокумента, ДокументСсылка.Дата);
	СтруктураКурсаВзаиморасчетов = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ДокументСсылка.ДоговорКонтрагента.ВалютаВзаиморасчетов, ДокументСсылка.Дата);
	
	// задолженность контрагента перед нами
	Для каждого ТекСтрока Из ТабЗадолженностиКонтрагентов Цикл
		//ТекСтрока.СуммаУпр = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.Сумма, 
		//	ДокументСсылка.ВалютаДокумента,    СтруктураДополнительныеСвойства.ВалютаУпрУчета,
		//	СтруктураКурсаВалютыДок.Курс,      СтруктураДополнительныеСвойства.КурсУпр,
		//	СтруктураКурсаВалютыДок.Кратность, СтруктураДополнительныеСвойства.КратностьУпр);
		
		Если ДокументСсылка.ВалютаДокумента = СтруктураДополнительныеСвойства.ВалютаУпрУчета Тогда
			ТекСтрока.СуммаУпр = ТекСтрока.Сумма;
		Иначе
			ТекСтрока.СуммаУпр = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаВзаиморасчетов, 
				ТекСтрока.Валюта,                  СтруктураДополнительныеСвойства.ВалютаУпрУчета,
				ТекСтрока.КурсВзаиморасчетов,      СтруктураДополнительныеСвойства.КурсУпр,
				ТекСтрока.КратностьВзаиморасчетов, СтруктураДополнительныеСвойства.КратностьУпр);
		КонецЕсли;
												
		Если ТекСтрока.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом
			ИЛИ НЕ ЗначениеЗаполнено(ТекСтрока.ДоговорКонтрагента.ВедениеВзаиморасчетов) Тогда
			ТекСтрока.Сделка = Неопределено;	
		КонецЕсли;
		
		ТекСтрока.СделкаВрем = ТекСтрока.Сделка;
	КонецЦикла;
	
	// наша задолженность перед контрагентом
	Если ТипЗнч(ДокументСсылка.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		НовСтрока = ТабЗадолженностиКонтрагентов.Добавить();
		НовСтрока.Период = ДокументСсылка.Дата;
		НовСтрока.ВидДвижения = ВидДвиженияНакопления.Расход;
		НовСтрока.ДоговорКонтрагента = ДокументСсылка.ДоговорКонтрагента;
		НовСтрока.Валюта             = ДокументСсылка.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		НовСтрока.Организация        = ДокументСсылка.Организация;
		НовСтрока.Контрагент         = ДокументСсылка.Контрагент;
		Если ДокументСсылка.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказамНаТС Тогда
			НовСтрока.СделкаВрем     = ДокументСсылка.ЗаказГрузоотправителя;
		ИначеЕсли ДокументСсылка.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоНакладным
			ИЛИ ДокументСсылка.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
			НовСтрока.СделкаВрем     = ДокументСсылка.Сделка;
		КонецЕсли;
		НовСтрока.СуммаВзаиморасчетов = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ДокументСсылка.СуммаПодтвержденная,
			ДокументСсылка.ВалютаДокумента,    ДокументСсылка.ДоговорКонтрагента.ВалютаВзаиморасчетов,
			СтруктураКурсаВалютыДок.Курс,      СтруктураКурсаВзаиморасчетов.Курс,
			СтруктураКурсаВалютыДок.Кратность, СтруктураКурсаВзаиморасчетов.Кратность);
			
		НовСтрока.СуммаУпр = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ДокументСсылка.СуммаПодтвержденная, 
			ДокументСсылка.ВалютаДокумента,    СтруктураДополнительныеСвойства.ВалютаУпрУчета,
			СтруктураКурсаВалютыДок.Курс,      СтруктураДополнительныеСвойства.КурсУпр,
			СтруктураКурсаВалютыДок.Кратность, СтруктураДополнительныеСвойства.КратностьУпр);
	КонецЕсли;
	
	ТабЗадолженностиКонтрагентов.Колонки.Удалить("Сделка");
	ТабЗадолженностиКонтрагентов.Колонки.СделкаВрем.Имя = "Сделка";
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаВзаиморасчетов", ТабЗадолженностиКонтрагентов);
КонецПроцедуры

Процедура СформироватьТаблицаРекламации(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатРекламация_уэРаспределение.Контрагент КАК Виновник,
	|	уатРекламация_уэРаспределение.СтатьяРасходов КАК СтатьяРасходов,
	|	уатРекламация_уэРаспределение.Ссылка.Контрагент КАК Контрагент,
	|	уатРекламация_уэРаспределение.Ссылка.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	уатРекламация_уэРаспределение.Ссылка.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя,
	|	уатРекламация_уэРаспределение.Сумма + ВЫБОР
	|		КОГДА уатРекламация_уэРаспределение.Ссылка.УчитыватьНДС
	|				И НЕ уатРекламация_уэРаспределение.Ссылка.СуммаВключаетНДС
	|			ТОГДА уатРекламация_уэРаспределение.СуммаНДС
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Сумма,
	|	0 КАК СуммаУпр,
	|	0 КАК СуммаРегл,
	|	уатРекламация_уэРаспределение.Ссылка.Дата КАК Период,
	|	уатРекламация_уэРаспределение.Ссылка.МаршрутныйЛист КАК МаршрутныйЛист
	|ИЗ
	|	Документ.уатРекламация_уэ.Распределение КАК уатРекламация_уэРаспределение
	|ГДЕ
	|	уатРекламация_уэРаспределение.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	мТаб = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ТекСтрока Из мТаб Цикл
		ТекСтрока.СуммаРегл = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.Сумма,
			ДокументСсылка.ВалютаДокумента,    СтруктураДополнительныеСвойства.ВалютаРеглУчета,
			ДокументСсылка.КурсДокумента,      СтруктураДополнительныеСвойства.КурсРегл,
			ДокументСсылка.КратностьДокумента, СтруктураДополнительныеСвойства.КратностьРегл);
			
		ТекСтрока.СуммаУпр = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.Сумма,
			ДокументСсылка.ВалютаДокумента,    СтруктураДополнительныеСвойства.ВалютаУпрУчета,
			ДокументСсылка.КурсДокумента,      СтруктураДополнительныеСвойства.КурсУпр,
			ДокументСсылка.КратностьДокумента, СтруктураДополнительныеСвойства.КратностьУпр);
	КонецЦикла;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРекламации", мТаб);
КонецПроцедуры

Процедура СформироватьТаблицаНевыставленныеРекламации(ДокументСсылка, СтруктураДополнительныеСвойства)
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход) КАК ВидДвижения,
	|	уатРекламация_уэ.Ссылка КАК Регистратор,
	|	уатРекламация_уэ.Дата КАК Период,
	|	уатРекламация_уэ.ЗаказГрузоотправителя,
	|	1 КАК Количество,
	|	уатРекламация_уэ.МаршрутныйЛист
	|ИЗ
	|	Документ.уатРекламация_уэ КАК уатРекламация_уэ
	|ГДЕ
	|	уатРекламация_уэ.Ссылка = &Ссылка");
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	тблДвижения = Запрос.Выполнить().Выгрузить();
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаНевыставленныеРекламации", тблДвижения);
КонецПроцедуры

Процедура СформироватьТаблицаОперативныеРасходы(ДокументСсылка, СтруктураДополнительныеСвойства)
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатРекламация_уэРаспределение.Ссылка КАК Регистратор,
	|	уатРекламация_уэРаспределение.Ссылка.Дата КАК Период,
	|	уатРекламация_уэРаспределение.Ссылка.ЗаказГрузоотправителя КАК Заказ,
	|	уатРекламация_уэРаспределение.Ссылка.ЗаказГрузоотправителя.Ответственный КАК Менеджер,
	|	ВЫБОР
	|		КОГДА уатРекламация_уэРаспределение.Ссылка.ЗаказГрузоотправителя = ЗНАЧЕНИЕ(Документ.уатЗаказГрузоотправителя.ПустаяСсылка)
	|			ТОГДА уатРекламация_уэРаспределение.Ссылка.МаршрутныйЛист.Маршрут
	|		ИНАЧЕ уатРекламация_уэРаспределение.Ссылка.ЗаказГрузоотправителя.Маршрут
	|	КОНЕЦ КАК Маршрут,
	|	ВЫБОР
	|		КОГДА уатРекламация_уэРаспределение.Ссылка.ЗаказГрузоотправителя = ЗНАЧЕНИЕ(Документ.уатЗаказГрузоотправителя.ПустаяСсылка)
	|			ТОГДА уатРекламация_уэРаспределение.Ссылка.МаршрутныйЛист.ОбъектСтроительства
	|		ИНАЧЕ уатРекламация_уэРаспределение.Ссылка.ЗаказГрузоотправителя.ОбъектСтроительства
	|	КОНЕЦ КАК ОбъектСтроительства,
	|	ВЫБОР
	|		КОГДА уатРекламация_уэРаспределение.Ссылка.ЗаказГрузоотправителя = ЗНАЧЕНИЕ(Документ.уатЗаказГрузоотправителя.ПустаяСсылка)
	|			ТОГДА уатРекламация_уэРаспределение.Ссылка.МаршрутныйЛист.ВидПеревозки
	|		ИНАЧЕ уатРекламация_уэРаспределение.Ссылка.ЗаказГрузоотправителя.ВидПеревозки
	|	КОНЕЦ КАК ВидПеревозки,
	|	ВЫБОР
	|		КОГДА уатРекламация_уэРаспределение.Ссылка.ЗаказГрузоотправителя = ЗНАЧЕНИЕ(Документ.уатЗаказГрузоотправителя.ПустаяСсылка)
	|			ТОГДА уатРекламация_уэРаспределение.Ссылка.МаршрутныйЛист.НаправлениеПеревозки
	|		ИНАЧЕ уатРекламация_уэРаспределение.Ссылка.ЗаказГрузоотправителя.НаправлениеПеревозки
	|	КОНЕЦ КАК НаправлениеПеревозки,
	|	ВЫБОР
	|		КОГДА уатРекламация_уэРаспределение.Ссылка.Подразделение <> ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|			ТОГДА уатРекламация_уэРаспределение.Ссылка.Подразделение
	|		КОГДА уатРекламация_уэРаспределение.Ссылка.ЗаказГрузоотправителя = ЗНАЧЕНИЕ(Документ.уатЗаказГрузоотправителя.ПустаяСсылка)
	|			ТОГДА уатРекламация_уэРаспределение.Ссылка.МаршрутныйЛист.Подразделение
	|		ИНАЧЕ уатРекламация_уэРаспределение.Ссылка.ЗаказГрузоотправителя.Подразделение
	|	КОНЕЦ КАК Подразделение,
	|	уатРекламация_уэРаспределение.Ссылка.МаршрутныйЛист.ТС КАК ТС,
	|	уатРекламация_уэРаспределение.Ссылка.Контрагент КАК Контрагент,
	|	уатРекламация_уэРаспределение.Ссылка.ДоговорКонтрагента КАК Договор,
	|	уатРекламация_уэРаспределение.Ссылка.Организация КАК Организация,
	|	уатРекламация_уэРаспределение.СтатьяРасходов КАК СтатьяРасходов,
	|	1 КАК Количество,
	|	уатРекламация_уэРаспределение.Сумма КАК Сумма,
	|	уатРекламация_уэРаспределение.СуммаНДС КАК СуммаНДС,
	|	уатРекламация_уэРаспределение.СуммаНДС КАК СуммаНДСУпр,
	|	0 КАК СуммаРегл,
	|	0 КАК СуммаУпр
	|ИЗ
	|	Документ.уатРекламация_уэ.Распределение КАК уатРекламация_уэРаспределение
	|ГДЕ
	|	уатРекламация_уэРаспределение.Ссылка = &Ссылка
	|	И (уатРекламация_уэРаспределение.Контрагент = уатРекламация_уэРаспределение.Ссылка.Организация
	|			ИЛИ уатРекламация_уэРаспределение.Контрагент ССЫЛКА Справочник.ФизическиеЛица)");
	Запрос.УстановитьПараметр("Ссылка", ДокументСсылка);
	
	ТаблицаРасходы = Запрос.Выполнить().Выгрузить();
	
	// заполнение колонны ТС
	Если ЗначениеЗаполнено(ДокументСсылка.МаршрутныйЛист) И ЗначениеЗаполнено(ДокументСсылка.МаршрутныйЛист.ТС) Тогда
		СтруктураМестоТС = уатОбщегоНазначения.МестонахождениеТС(ДокументСсылка.МаршрутныйЛист.ТС, ДокументСсылка.МаршрутныйЛист.Дата);
		Если ЗначениеЗаполнено(СтруктураМестоТС.Колонна) Тогда
			ТаблицаРасходы.Колонки.Добавить("Колонна");
			ТаблицаРасходы.ЗаполнитьЗначения(СтруктураМестоТС.Колонна, "Колонна");
		КонецЕсли;
	КонецЕсли;
		
	КурсДокумента = уатОбщегоНазначенияТиповые.уатКурсДокумента(ДокументСсылка, СтруктураДополнительныеСвойства.ВалютаРеглУчета);
	КратностьДокумента = уатОбщегоНазначенияТиповые.уатКратностьДокумента(ДокументСсылка, СтруктураДополнительныеСвойства.ВалютаРеглУчета);
	
	Для Каждого ТекСтрока Из ТаблицаРасходы Цикл
		СуммаВсего = ТекСтрока.Сумма + ?(ДокументСсылка.УчитыватьНДС И НЕ ДокументСсылка.СуммаВключаетНДС, ТекСтрока.СуммаНДС, 0);
		
		ТекСтрока.СуммаУпр  = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(СуммаВсего,
			ДокументСсылка.ВалютаДокумента, СтруктураДополнительныеСвойства.ВалютаУпрУчета,
			КурсДокумента,                  СтруктураДополнительныеСвойства.КурсУпр,
			КратностьДокумента,             СтруктураДополнительныеСвойства.КратностьУпр);
									
		ТекСтрока.СуммаРегл = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(СуммаВсего,
			ДокументСсылка.ВалютаДокумента, СтруктураДополнительныеСвойства.ВалютаРеглУчета,
			КурсДокумента,                  СтруктураДополнительныеСвойства.КурсРегл,
			КратностьДокумента,             СтруктураДополнительныеСвойства.КратностьРегл);
									
		ТекСтрока.СуммаНДС = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаНДС,
			ДокументСсылка.ВалютаДокумента, СтруктураДополнительныеСвойства.ВалютаРеглУчета,
			КурсДокумента,                  СтруктураДополнительныеСвойства.КурсРегл,
			КратностьДокумента,             СтруктураДополнительныеСвойства.КратностьРегл);
			
		ТекСтрока.СуммаНДСУпр = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаНДСУпр,
			ДокументСсылка.ВалютаДокумента, СтруктураДополнительныеСвойства.ВалютаУпрУчета,
			КурсДокумента,                  СтруктураДополнительныеСвойства.КурсУпр,
			КратностьДокумента,             СтруктураДополнительныеСвойства.КратностьУпр);
	КонецЦикла;
	
	уатРасчетыПоТарифам_уэ.РаспределитьДоходыРасходыМеждуЗаказами(ТаблицаРасходы);
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРасходы", ТаблицаРасходы);
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
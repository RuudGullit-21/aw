#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОписаниеПеременных

Перем мВалютаРегламентированногоУчета Экспорт; //Переменная хранит значение валюты регламентированного учёта,
												// полученное из констант

#КонецОбласти


#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// уатСогласованиеДокументов
	уатСогласованиеДокументовСервер.ПередЗаписью(ЭтотОбъект, РежимЗаписи, Отказ);
	// Конец уатСогласованиеДокументов
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	уатПроведение.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	Документы.уатРекламация_уэ.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	уатПроведение.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	уатПроведение_уэ.ОтразитьРекламации(ДополнительныеСвойства, Движения, Отказ);
	Если ЗначениеЗаполнено(МаршрутныйЛист) Тогда
		уатПроведение_уэ.ОтразитьНевыставленныеРекламации(ДополнительныеСвойства, Движения, Отказ);
	КонецЕсли;
	уатПроведение_проф.ОтразитьВзаиморасчетыСКонтрагентами(ДополнительныеСвойства, Движения, Отказ);
	уатПроведение.ОтразитьРасходы(ДополнительныеСвойства, Движения, Отказ);
	
	уатПроведение.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	Документы.уатРекламация_уэ.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);
	
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка) 
	
	уатОбщегоНазначенияСервер.Заполнить(ЭтотОбъект, ДанныеЗаполнения);

	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") тогда
		СтандартнаяОбработка = Ложь;
		ДокументОснование     = ДанныеЗаполнения;
		Контрагент            = ДанныеЗаполнения.Контрагент;
		ДоговорКонтрагента    = ДанныеЗаполнения.ДоговорКонтрагента;
		ЗаказГрузоотправителя = ДанныеЗаполнения.Ссылка;
		Организация           = ДанныеЗаполнения.Организация;
		Подразделение         = ДанныеЗаполнения.Подразделение;
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("Структура") Тогда
		
		//МаршрутныйЛист
		Если ДанныеЗаполнения.Свойство("флВыбратьКонтрагента")
			И ДанныеЗаполнения.Свойство("Заказы") Тогда
				// выходной массив контрагентов для выбора
				тзКонтрагенты = Новый ТаблицаЗначений();
				тзКонтрагенты.Колонки.Добавить("Заказ");
				тзКонтрагенты.Колонки.Добавить("Контрагент");
				тзКонтрагенты.Колонки.Добавить("Договор");
				
				ТаблицаЗаказы = ДанныеЗаполнения.Заказы.Выгрузить();
				Для Каждого ТекСтрока Из ТаблицаЗаказы Цикл
					Если ТекСтрока.Рекламация Тогда
						Строка = тзКонтрагенты.Добавить();
						Строка.Заказ      = ТекСтрока.ЗаказГрузоотправителя;
						Если ЗначениеЗаполнено(ТекСтрока.ЗаказГрузоотправителя) Тогда
							Строка.Контрагент = ТекСтрока.ЗаказГрузоотправителя.Контрагент;
							Строка.Договор    = ТекСтрока.ЗаказГрузоотправителя.ДоговорКонтрагента;
						Иначе
							Строка.Контрагент = ТекСтрока.Контрагент;
							СтруктураПараметровДляПолученияДоговора =
								уатЗаполнениеДокументов.ПолучитьСтруктуруПараметровДляПолученияДоговораПродажи();
							Строка.Договор = уатОбщегоНазначенияТиповыеСервер.уатПолучитьДоговорПоОрганизацииИКонтрагенту(
								Организация, Строка.Контрагент, СтруктураПараметровДляПолученияДоговора);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
				тзКонтрагенты.Свернуть("Заказ, Контрагент, Договор");
				КоличествоКонтрагентов = тзКонтрагенты.Количество();
				Если КоличествоКонтрагентов > 1 Тогда
					тзКонтрагенты.Сортировать("Заказ, Контрагент, Договор");
					ДополнительныеСвойства.Вставить("мсвКонтрагенты", тзКонтрагенты);
					ДополнительныеСвойства.Вставить("ТаблицаЗаказы", ТаблицаЗаказы);
				ИначеЕсли КоличествоКонтрагентов = 1 Тогда
					ДополнительныеСвойства.Вставить("Контрагент", тзКонтрагенты[0].Контрагент);
					ДополнительныеСвойства.Вставить("Договор",    тзКонтрагенты[0].Договор);
					ДополнительныеСвойства.Вставить("Заказ",      тзКонтрагенты[0].Заказ);
					ДополнительныеСвойства.Вставить("мсвТаблицаЗаказы", ТаблицаЗаказы);
				КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	Заголовок = уатОбщегоНазначенияТиповые.уатПредставлениеДокументаПриПроведении(Ссылка);
	
	ИтогоРаспределение = 0;
	Для Каждого ТекСтрока Из Распределение Цикл
		ИтогоРаспределение = ИтогоРаспределение + ТекСтрока.Сумма + ?(УчитыватьНДС И НЕ СуммаВключаетНДС, ТекСтрока.СуммаНДС, 0);
	КонецЦикла;
	Если ЗначениеЗаполнено(СуммаПодтвержденная) И СуммаПодтвержденная <> ИтогоРаспределение тогда
		ТекстНСТР = НСтр("en='Confirmed amount of reclamation does not match with distributed amount';ru='Подтвержденная сумма рекламации не совпадает с распределенной суммой'");
		уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, Отказ, Заголовок);
	КонецЕсли;
	
	Если ТипЗнч(Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		ПроверяемыеРеквизиты.Добавить("ДоговорКонтрагента");
	КонецЕсли;
	//Если УчитыватьНДС Тогда
	//	ПроверяемыеРеквизиты.Добавить("Услуги.СтавкаНДС");
	//КонецЕсли;
	
	Если ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоНакладным
		ИЛИ ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
		ПроверяемыеРеквизиты.Добавить("Сделка");
	КонецЕсли;
	
	Для каждого ТекСтрока Из Распределение Цикл
		Если ТипЗнч(ТекСтрока.Контрагент) = Тип("СправочникСсылка.Контрагенты") тогда
			Если Не ЗначениеЗаполнено(ТекСтрока.ДоговорКонтрагента) Тогда
				ТекстНСТР = СтрШаблон(НСтр("en='At line number ""%1"" of tabular section ""Allocation"" was not completed attribute value ""Counterparty contract""';ru='В строке номер ""%1"" табличной части ""Распределение"" не заполнено значение реквизита ""Договор контрагента""'"), СокрЛП(ТекСтрока.НомерСтроки));;
				уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, Отказ, Заголовок);
			КонецЕсли;
			Если ТекСтрока.ДоговорКонтрагента.Организация <> Организация Тогда
				ТекстНСТР = СтрШаблон(НСтр("en='In line number ""%1"" of the tabular section ""Distribution"" company of the specified contract does not coincide with the company of the document.';ru='В строке номер ""%1"" табличной части ""Распределение"" организация указанного договора не совпадает с организацией документа.'"), СокрЛП(ТекСтрока.НомерСтроки));;
				уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, Отказ, Заголовок);
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ТекСтрока.СуммаВзаиморасчетов) Тогда
				ТекстНСТР = СтрШаблон(НСтр("en='At line number ""%1"" of tabular section ""Distribution"" is not filled in the amount of the settlement.';ru='В строке номер ""%1"" табличной части ""Распределение"" не заполнена сумма взаиморасчетов.'"), СокрЛП(ТекСтрока.НомерСтроки));;
				уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, Отказ, Заголовок);
			КонецЕсли;
			Если НЕ ЗначениеЗаполнено(ТекСтрока.Сделка) Тогда
				Если ТекСтрока.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам Тогда
					ТекстНСТР = СтрШаблон(НСтр("en='At line number ""%1"" of tabular section ""Allocation"" is not specified invoice.';ru='В строке номер ""%1"" табличной части ""Распределение"" не указан счет на оплату.'"), СокрЛП(ТекСтрока.НомерСтроки));;
					уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, Отказ, Заголовок);
				КонецЕсли;
				Если ТекСтрока.ДоговорКонтрагента.ВедениеВзаиморасчетов = Перечисления.ВедениеВзаиморасчетовПоДоговорам.ПоНакладным Тогда
					ТекстНСТР = СтрШаблон(НСтр("en='At line number ""%1"" of tabular section ""Allocation"" not specified invoice.';ru='В строке номер ""%1"" табличной части ""Распределение"" не указана накладная.'"), СокрЛП(ТекСтрока.НомерСтроки));
					уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, Отказ, Заголовок);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	уатОбщегоНазначения.ПроверкаЗаполненияПодразделения(Организация, Подразделение, Отказ, Заголовок);
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Процедура ОбработкаЗаполненияМЛ(мДокументОснование, ДанныеЗаполнения) Экспорт
	мсвДанныеРекламаций = ПолучитьДанныеДляВводаРекламаций(ДанныеЗаполнения);
	Если мсвДанныеРекламаций.Количество() > 0 Тогда
		СуммаВыставленная = мсвДанныеРекламаций[0].Сумма;
	КонецЕсли;
КонецПроцедуры

Функция ПолучитьДанныеДляВводаРекламаций(ДанныеЗаполнения)
	мсвРез = Новый Массив();
	
	ВалютаРеглУчета = ПолучитьДанныеВалютыРеглУчета().Валюта;
	
	тблЗаказы = Новый ТаблицаЗначений();
	тблЗаказы.Колонки.Добавить("ЗаказГрузоотправителя");
	тблЗаказы.Колонки.Добавить("ТипТочкиМаршрута");
	тблЗаказы.Колонки.Добавить("Рекламация");
	тблЗаказы.Колонки.Добавить("Номенклатура");
	
	Для Каждого ТекСтрока Из ДанныеЗаполнения Цикл
		НоваяСтрока = тблЗаказы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
	КонецЦикла;
	
	мтблЗаказы = тблЗаказы.Скопировать();
	мтблЗаказы.Свернуть("ЗаказГрузоотправителя");
	Для Каждого ТекЗаказ Из мтблЗаказы Цикл
		мСумма = 0;
		
		тблЦеныТоваров = Неопределено;
		ВалютаЗаказа = ?(ЗначениеЗаполнено(ТекЗаказ.ЗаказГрузоотправителя.ВалютаДокумента),
			ТекЗаказ.ЗаказГрузоотправителя.ВалютаДокумента, ВалютаРеглУчета);
		
		мсвСтрокиЗаказа = тблЗаказы.НайтиСтроки(Новый Структура("ЗаказГрузоотправителя, ТипТочкиМаршрута, Рекламация",
			ТекЗаказ.ЗаказГрузоотправителя, Перечисления.уатТипыТочекМаршрута.Погрузка, Истина));
			
		Для Каждого ТекСтрока Из мсвСтрокиЗаказа Цикл
			Если ТипЗнч(ТекСтрока.Номенклатура) = Тип("СправочникСсылка.Номенклатура") Тогда //товар
				
				Если тблЦеныТоваров = Неопределено Тогда
					ЗапросПоЦенам = Новый Запрос(
					"ВЫБРАТЬ РАЗРЕШЕННЫЕ
					|	уатЦеныНоменклатурыКонтрагентовСрезПоследних.Валюта,
					|	уатЦеныНоменклатурыКонтрагентовСрезПоследних.Цена,
					|	уатЦеныНоменклатурыКонтрагентовСрезПоследних.Номенклатура
					|ИЗ
					|	РегистрСведений.уатЦеныНоменклатурыКонтрагентов.СрезПоследних(&Период, Контрагент = &Контрагент И Номенклатура В (&Номенклатура)) КАК уатЦеныНоменклатурыКонтрагентовСрезПоследних");
					ЗапросПоЦенам.УстановитьПараметр("Период", МаршрутныйЛист.Дата);
					ЗапросПоЦенам.УстановитьПараметр("Контрагент", Контрагент);
					
					мсвНоменклатура = Новый Массив;
					Для Каждого ТекСтрока2 Из тблЗаказы Цикл
						Если ТипЗнч(ТекСтрока2.Номенклатура) <> Тип("СправочникСсылка.Номенклатура") Тогда
							Продолжить;
						КонецЕсли;
						Если НЕ ТекСтрока2.Рекламация Тогда
							Продолжить;
						КонецЕсли;
						
						Если мсвНоменклатура.Найти(ТекСтрока2.Номенклатура) = Неопределено Тогда
							мсвНоменклатура.Добавить(ТекСтрока2.Номенклатура);
						КонецЕсли;
					КонецЦикла;
					ЗапросПоЦенам.УстановитьПараметр("Номенклатура", мсвНоменклатура);
					
					тблЦеныТоваров = ЗапросПоЦенам.Выполнить().Выгрузить();
				КонецЕсли;
				
				СтрокаПоискаЦены = тблЦеныТоваров.Найти(ТекСтрока.Номенклатура, "Номенклатура");
				Если СтрокаПоискаЦены <> Неопределено Тогда
					мЦена = СтрокаПоискаЦены.Цена;
					мЦена = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(мЦена,
						СтрокаПоискаЦены.Валюта,
						ВалютаЗаказа,
						уатОбщегоНазначенияТиповые.уатКурсДокумента(ТекЗаказ.ЗаказГрузоотправителя, ВалютаРеглУчета),
						ТекЗаказ.ЗаказГрузоотправителя.КурсВзаиморасчетов,
						уатОбщегоНазначенияТиповые.уатКратностьДокумента(ТекЗаказ.ЗаказГрузоотправителя, ВалютаРеглУчета),
						ТекЗаказ.ЗаказГрузоотправителя.КратностьВзаиморасчетов);
						
					 мСумма = мСумма + мЦена;
				КонецЕсли;
				
			ИначеЕсли ТипЗнч(ТекСтрока.Номенклатура) = Тип("СправочникСсылка.уатГрузовыеМеста_уэ") Тогда // грузовое место
				мЦена = ТекСтрока.Номенклатура.Стоимость;
				мЦена = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(мЦена,
					ТекСтрока.Номенклатура.Валюта,
					ВалютаЗаказа,
					МаршрутныйЛист.Дата,
					МаршрутныйЛист.Дата);
						
				мСумма = мСумма + мЦена;
				
			КонецЕсли;
		КонецЦикла;
		
		мсвРез.Добавить(Новый Структура("ЗаказГрузоотправителя, Сумма", ТекЗаказ.ЗаказГрузоотправителя, мСумма));
	КонецЦикла;
	
	Возврат мсвРез;
КонецФункции

Функция ПолучитьДанныеВалютыРеглУчета()
	
	Результат = Новый Структура("Валюта,Курс,Кратность");
	
	Результат.Валюта = Константы.ВалютаРегламентированногоУчета.Получить();
	
	КурсКратность = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(, Новый Структура("Валюта", Результат.Валюта));
	
	Результат.Курс      = ?(КурсКратность.Курс = 0, 1, КурсКратность.Курс);
	Результат.Кратность = ?(КурсКратность.Кратность = 0, 1, КурсКратность.Кратность);
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти


#Область Инициализация

мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();

#КонецОбласти

#КонецЕсли
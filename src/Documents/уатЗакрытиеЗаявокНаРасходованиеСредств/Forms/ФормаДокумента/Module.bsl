
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	уатЗащищенныеФункцииСервер.уатДокументФормаЭлементаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, Объект, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если Параметры.Ключ.Пустая() Тогда 
		Объект.ЦФО = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
	КонецЕсли;
	
	уатОбщегоНазначенияСервер.НастроитьПолеПодразделение(Элементы.ЦФО);
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	уатЗащищенныеФункцииКлиент.уатДокументФормаЭлементаПриОткрытии(Отказ, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_ЗаявкиНаРасходованиеСредств

&НаКлиенте
Процедура ЗаявкиНаРасходованиеСредствЗаявкаПриИзменении(Элемент)
	
	ТекСтрока = Элементы.ЗаявкиНаРасходованиеСредств.ТекущиеДанные;
	
	ДанныеСтрокиПоЗаявке = ПолучитьДанныеПоЗаявке(ТекСтрока.Заявка);
	
	Если ДанныеСтрокиПоЗаявке.ЕстьДанные Тогда 
		ЗаполнитьЗначенияСвойств(ТекСтрока, ДанныеСтрокиПоЗаявке);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаявкиНаРасходованиеСредствЗаявкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура();
	
	Если ЗначениеЗаполнено(Элементы.ЗаявкиНаРасходованиеСредств.ТекущиеДанные.Заявка) Тогда
		ПараметрыФормы.Вставить("ТекущаяСтрока", Элементы.ЗаявкиНаРасходованиеСредств.ТекущиеДанные.Заявка);
	КонецЕсли;
	
	ФормаВыбора = ПолучитьФорму("Документ.уатЗаявкаНаРасходованиеДС.ФормаВыбора", ПараметрыФормы, Элемент);
	
	ФормаВыбора.Список.Отбор.Элементы.Очистить();
	
	ЭлементОтбора                  = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("ЦФО");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение   = Объект.ЦФО;
	Если Объект.ОтборЦФО Тогда 
		ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	Иначе 
		ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Авто;
	КонецЕсли;
	ЭлементОтбора.Использование    = Объект.ОтборЦФО;
	
	ЭлементОтбора                  = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("Контрагент");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение   = Объект.Контрагент;
	Если Объект.ОтборКонтрагент Тогда 
		ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	Иначе 
		ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Авто;
	КонецЕсли;
	ЭлементОтбора.Использование    = Объект.ОтборКонтрагент;
	
	ЭлементОтбора                  = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("Ответственный");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение   = Объект.Ответственный;
	Если Объект.ОтборОтветственный Тогда 
		ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	Иначе 
		ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Авто;
	КонецЕсли;
	ЭлементОтбора.Использование    = Объект.ОтборОтветственный;
	
	Если Не Объект.ОтборДатаНач = '00010101' Тогда
		ЭлементОтбора                  = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("ДатаРасхода");
		ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
		ЭлементОтбора.ПравоеЗначение   = НачалоДня(Объект.ОтборДатаНач);
		ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		ЭлементОтбора.Использование    = Истина;
	КонецЕсли;
	Если Не Объект.ОтборДатаКон = '00010101' Тогда
		ЭлементОтбора                  = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("ДатаРасхода");
		ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
		ЭлементОтбора.ПравоеЗначение   = КонецДня(Объект.ОтборДатаКон);
		ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		ЭлементОтбора.Использование    = Истина;
	КонецЕсли;
	
	ФормаВыбора.Открыть();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ВыборПериода(Команда)
	
	ПроизвольныйПериод               = Новый СтандартныйПериод;
	ПроизвольныйПериод.Вариант       = ВариантСтандартногоПериода.ПроизвольныйПериод;
	ПроизвольныйПериод.ДатаНачала    = Объект.ОтборДатаНач;
	ПроизвольныйПериод.ДатаОкончания = Объект.ОтборДатаКон;
	
	ДиалогВыбораПериода        = Новый ДиалогРедактированияСтандартногоПериода();
	ДиалогВыбораПериода.Период = ПроизвольныйПериод;
	
	ДиалогВыбораПериода.Показать(Новый ОписаниеОповещения("ВыборПериодаЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	Если Объект.ЗаявкиНаРасходованиеСредств.Количество() > 0 Тогда
		ТекстНСТР = НСтр("en='Before filling the datasheet portion will be cleared. Fill?';ru='Перед заполнением табличная часть будет очищена. Заполнить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьЗавершение", ЭтотОбъект),
			ТекстНСТР, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
        Возврат;
	КонецЕсли;
	
	ЗаполнитьЗаявкиПоОстаткам();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// Создает запрос для получения остатков по регистрам "ЗаявкиНаРасходованиеСредств"
// и "ДенежныеСредстваВРезерве"
//
&НаСервере
Функция СформироватьЗапрос(Заявка="")
	
	Запрос = Новый Запрос;
	СтруктураПараметров = Новый Структура;
	
	ТекстОтбора = "";
	
	Если Заявка = "" Тогда // Формируем запрос для заполнения ТЧ
		
		Если Объект.ОтборЦФО Тогда
			
			Если Объект.ЦФО = Неопределено Или Не ЗначениеЗаполнено(Объект.ЦФО) Тогда
				ТекстОтбора=ТекстОтбора+"
				|И (##.ЦФО = &ЦФО)";
			Иначе
				ТекстОтбора=ТекстОтбора+"
				|И (##.ЦФО В ИЕРАРХИИ (&ЦФО))";
			КонецЕсли;
			
			СтруктураПараметров.Вставить("ЦФО",Объект.ЦФО);
			
		КонецЕсли;
		
		Если Объект.ОтборКонтрагент Тогда
			
			Если НЕ ЗначениеЗаполнено(Объект.Контрагент) Тогда
				ТекстОтбора=ТекстОтбора+"
				|И (##.Контрагент = &Контрагент)";
			Иначе
				ТекстОтбора=ТекстОтбора+"
				|И (##.Контрагент В ИЕРАРХИИ (&Контрагент))";
			КонецЕсли;
			
			СтруктураПараметров.Вставить("Контрагент",Объект.Контрагент);
			
		КонецЕсли;
		
		Если Объект.ОтборОтветственный Тогда
			
			Если Не ЗначениеЗаполнено(Объект.Ответственный) Тогда
				ТекстОтбора=ТекстОтбора+"
				|И (##.Ответственный = &Ответственный)";
			Иначе
				ТекстОтбора=ТекстОтбора+"
				|И (##.Ответственный В ИЕРАРХИИ (&Ответственный))";
			КонецЕсли;
			
			СтруктураПараметров.Вставить("Ответственный",Объект.ОтветственныйЗаявка);
			
		КонецЕсли;
		
		Если Не (Объект.ОтборДатаНач='00010101' Или Объект.ОтборДатаКон='00010101') Тогда
			
			ТекстОтбора=ТекстОтбора+"
			|И (##.ДатаРасхода МЕЖДУ &ДатаНач И &ДатаКон)";
			
			СтруктураПараметров.Вставить("ДатаНач",НачалоДня(Объект.ОтборДатаНач));
			СтруктураПараметров.Вставить("ДатаКон",КонецДня(Объект.ОтборДатаКон));
			
		ИначеЕсли Не Объект.ОтборДатаНач='00010101' Тогда
			
			ТекстОтбора=ТекстОтбора+"
			|И (##.ДатаРасхода >= &ДатаНач)";
			
			СтруктураПараметров.Вставить("ДатаНач",НачалоДня(Объект.ОтборДатаНач));
			
		ИначеЕсли Не Объект.ОтборДатаКон='00010101' Тогда
			
			ТекстОтбора=ТекстОтбора+"
			|И (##.ДатаРасхода <= &ДатаКон)";
			
			СтруктураПараметров.Вставить("ДатаКон",КонецДня(Объект.ОтборДатаКон));
			
		КонецЕсли;

		ТекстОтбора=Сред(ТекстОтбора,4);
		
	Иначе // Формируем запрос по конкретной заявке
		
		ТекстОтбора="##=&Заявка";
		СтруктураПараметров.Вставить("Заявка",Заявка);
		
	КонецЕсли;
	
	ТекстОтбораЗаявок = ?(ПустаяСтрока(ТекстОтбора), "", "ЗаявкаНаРасходование В (ВЫБРАТЬ Ссылка ИЗ Документ.уатЗаявкаНаРасходованиеДС ГДЕ "+ТекстОтбора+")");
	
	Запрос.Текст="ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ЗаявкиОстаток.Заявка КАК Заявка,
	|	СУММА(ЗаявкиОстаток.СуммаЗаявкиОстаток) КАК ОстатокЗаявка,
	|	ЗаявкиОстаток.Заявка.Ответственный КАК Ответственный,
	|	ЗаявкиОстаток.Заявка.ВалютаДокумента КАК ВалютаЗаявка,
	|	ЗаявкиОстаток.Контрагент КАК Контрагент
	|ИЗ
	|	(ВЫБРАТЬ
	|		ЗаявкиНаРасходованиеСредствОстатки.ЗаявкаНаРасходование КАК Заявка,
	|		ЗаявкиНаРасходованиеСредствОстатки.Контрагент КАК Контрагент,
	|		ЗаявкиНаРасходованиеСредствОстатки.СуммаОстаток КАК СуммаЗаявкиОстаток,
	|		0 КАК СуммаРезерваОстаток,
	|       0 КАК СуммаРазмещенияОстаток
	|	ИЗ
	|		РегистрНакопления.уатЗаявкиНаРасходованиеДС.Остатки(&МоментДокумента,"+СтрЗаменить(ТекстОтбораЗаявок,"##","Ссылка")+" ) КАК ЗаявкиНаРасходованиеСредствОстатки
	|	
	|) КАК ЗаявкиОстаток
	|
	|СГРУППИРОВАТЬ ПО
	|	ЗаявкиОстаток.Заявка,
	|	ЗаявкиОстаток.Контрагент";
	
	Для Каждого Параметр Из СтруктураПараметров Цикл
		
		Запрос.УстановитьПараметр(Параметр.Ключ,Параметр.Значение);
		
	КонецЦикла;
	
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	
	Если Параметры.Ключ.Пустая() Тогда
		Запрос.УстановитьПараметр("МоментДокумента", КонецДня(ДокОбъект.Дата));
	Иначе
		Запрос.УстановитьПараметр("МоментДокумента", Новый Граница(ДокОбъект.МоментВремени(),ВидГраницы.Исключая));
	КонецЕсли;
	
	Возврат Запрос;
	
КонецФункции // СформироватьЗапрос()

// Добавляет в табличную часть заявки, по которым есть остатки в регистрах
// "ЗаявкиНаРасходованиеСредств" и (или) в регистре "ДенежныеСредстваВРезерве"
//
&НаСервере
Процедура ЗаполнитьЗаявкиПоОстаткам()
	
	Запрос = СформироватьЗапрос();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Объект.ЗаявкиНаРасходованиеСредств.Добавить();
		НоваяСтрока.Заявка            = Выборка.Заявка;
		НоваяСтрока.ВалютаЗаявка      = Выборка.ВалютаЗаявка;
		НоваяСтрока.ОстатокЗаявка     = Выборка.ОстатокЗаявка;
		НоваяСтрока.Контрагент        = Выборка.Контрагент;
		НоваяСтрока.Ответственный     = Выборка.Ответственный;
	КонецЦикла; 
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборПериодаЗавершение(Период, ДополнительныеПараметры) Экспорт
    
    Если Не Период = Неопределено Тогда
        Объект.ОтборДатаНач = Период.ДатаНачала;
        Объект.ОтборДатаКон = Период.ДатаОкончания;
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Не Ответ = КодВозвратаДиалога.Да Тогда
        Возврат;
    КонецЕсли; 
    
    Объект.ЗаявкиНаРасходованиеСредств.Очистить();
    
    ЗаполнитьЗаявкиПоОстаткам();

КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеПоЗаявке(Заявка)
	
	Результат = Новый Структура("ЕстьДанные, 
	                            |ВалютаЗаявка, 
	                            |ОстатокЗаявка, 
	                            |Контрагент, 
	                            |Ответственный");
	
	Запрос = СформироватьЗапрос(Заявка);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(Результат, Выборка);
		Результат.ЕстьДанные = Истина;
	Иначе 
		Результат.ЕстьДанные = Ложь;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПолучитьДанныеПоЗаявке()

#КонецОбласти

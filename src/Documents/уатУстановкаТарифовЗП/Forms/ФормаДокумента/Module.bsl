
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	уатЗащищенныеФункцииСервер.уатДокументФормаЭлементаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, Объект, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// уатСогласованиеДокументов
	ИмяДокументаСогласование = "УстановкаТарифовЗП";
	уатСогласованиеДокументовСервер.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец уатСогласованиеДокументов
	
	ОбновитьИконкуМетодаРасчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	уатЗащищенныеФункцииКлиент.уатДокументФормаЭлементаПриОткрытии(Отказ, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// уатСогласованиеДокументов
	уатСогласованиеДокументовКлиент.ОбновитьСтатусСогласования(ЭтотОбъект);
	// Конец уатСогласованиеДокументов
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// уатСогласованиеДокументов
	уатСогласованиеДокументовКлиент.ПослеЗаписи(ЭтотОбъект);
	// Конец уатСогласованиеДокументов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// уатСогласованиеДокументов
	уатСогласованиеДокументовКлиент.ОбработкаОповещения(ЭтотОбъект, ИмяСобытия, Параметр);
	// Конец уатСогласованиеДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийУстановкаТарифовЗП.Сотрудники") Тогда
		ТекстСообщения = "";
		СтруктураСотрудников = ПолучитьСотрудниковДляПроверки();
		Если СтруктураСотрудников.мсвСотрудниковДругойОрганизации.Количество() <> 0  Тогда
			ТекстСообщения =
				НСтр("en='Attention! In the tabular section there are employees currently employed in documents organisation:';"
				+ "ru='Внимание! В табличной части имеются сотрудники, не работающие в организации """
				+ Объект.Организация + """:'") + Символы.ПС;
				
			Для Каждого ТекСтрока Из СтруктураСотрудников.мсвСотрудниковДругойОрганизации Цикл
				ТекстСообщения = ТекстСообщения + "  " + ТекСтрока + ";" + Символы.ПС;
			КонецЦикла;
		КонецЕсли;
		
		Если ТекстСообщения <> "" Тогда
			ТекстСообщения = ТекстСообщения + НСтр("en='Calculation of salary in documents will not be made!';ru='Начисление зарплаты в документах выполняться не будет!'");
			ПоказатьПредупреждение(, ТекстСообщения,, НСтр("en='ATTENTION!';ru='ВНИМАНИЕ!'"));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	ОбновитьИконкуМетодаРасчета();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.уатТарифныеПланыЗП") Тогда
		Для Каждого ТекСтрока Из Объект.Тарифы Цикл
			ТекСтрока.Тариф = ВыбранноеЗначение;
		КонецЦикла;
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	// уатСогласованиеДокументов
	уатСогласованиеДокументовКлиент.ОрганизацияПодразделениеПриИзменении(ЭтотОбъект);
	// Конец уатСогласованиеДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура ТребуетСогласованияПриИзменении(Элемент)
	
	// уатСогласованиеДокументов
	уатСогласованиеДокументовКлиент.ТребуетСогласованияПриИзменении(ЭтотОбъект);
	// Конец уатСогласованиеДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьСогласованНажатие(Элемент)
	
	// уатСогласованиеДокументов
	уатСогласованиеДокументовКлиент.НадписьСогласованНажатие(ЭтотОбъект);
	// Конец уатСогласованиеДокументов
	
КонецПроцедуры

&НаКлиенте
Процедура ТарифыТарифПриИзменении(Элемент)
	ОбновитьИконкуМетодаРасчета();
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормы_Тарифы

&НаКлиенте
Процедура ТарифыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		ТекСтрока = Элементы.Тарифы.ТекущиеДанные;
		ТекСтрока.ИконкаМетодРасчета = 4;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТарифыСотрудникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Заглушка = Истина;
	//уатЗащищенныеФункцииКлиент.ДиалогВыбораСотрудника(Элемент, Элементы.Тарифы.ТекущиеДанные.Сотрудник, Новый Структура("Организация", Объект.Организация), СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ТарифыСотрудникОткрытие(Элемент, СтандартнаяОбработка)
	Заглушка = Истина;
	//уатЗащищенныеФункцииКлиент.ОткрытьФормуСотрудника(Элементы.Тарифы.ТекущиеДанные.Сотрудник, СтандартнаяОбработка);
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ЗаполнитьВсемиСотрудниками(Команда)
	Если Объект.Тарифы.Количество() > 0 Тогда
		ТекстНСТР = НСтр("en='Fill with cleaning the tabular section?';ru='Заполнить с очисткой табличной части?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьВсемиСотрудникамиЗавершение", ЭтотОбъект), ТекстНСТР, РежимДиалогаВопрос.ДаНетОтмена);
        Возврат;
	КонецЕсли;
	
	ЗаполнитьВсемиСотрудникамиФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДействующимиТарифами(Команда)
	Если Объект.Тарифы.Количество() > 0 Тогда
		ТекстНСТР = НСтр("en='Fill with cleaning the tabular section?';ru='Заполнить с очисткой табличной части?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьДействующимиТарифамиЗавершение", ЭтотОбъект),
			ТекстНСТР, РежимДиалогаВопрос.ДаНетОтмена);
        Возврат;
	КонецЕсли;
	
	ЗаполнитьДействующимиТарифамиФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура Очистить(Команда)
	Если Объект.Тарифы.Количество() > 0 Тогда
		ТекстНСТР = НСтр("en='Clear the tabular section?';ru='Очистить табличную часть?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ОчиститьЗавершение", ЭтотОбъект), ТекстНСТР, РежимДиалогаВопрос.ОКОтмена);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РасширенноеЗаполнение(Команда)
	
	ПараметрыФормы = Новый Структура("ДатаСреза, флФизическиеЛица", Объект.Дата,
		Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийУстановкаТарифовЗП.ФизическиеЛица"));
	Оповещение = Новый ОписаниеОповещения("РасширенноеЗаполнениеЗавершение", ЭтотОбъект);
	ОткрытьФорму("Документ.уатУстановкаТарифовЗП.Форма.ФормаЗаполнения", ПараметрыФормы, ЭтотОбъект,,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ОперацияСотрудники(Команда)
	Если Элементы.ФормаОперацияСотрудники.Пометка Тогда 
		Возврат;
	КонецЕсли;	
	
	Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийУстановкаТарифовЗП.Сотрудники");
	Для Каждого ТекСтрока Из Объект.Тарифы Цикл
		ТекСтрока.Сотрудник = Неопределено;
	КонецЦикла;
	
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ОперацияФизЛица(Команда)
	Если Элементы.ФормаОперацияФизЛица.Пометка Тогда 
		Возврат;
	КонецЕсли;	
	
	Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийУстановкаТарифовЗП.ФизическиеЛица");
	Для Каждого ТекСтрока Из Объект.Тарифы Цикл
		ТекСтрока.Сотрудник = Неопределено;
	КонецЦикла;
	
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТарифныйПлан(Команда)
	ОткрытьФорму("Справочник.уатТарифныеПланыЗП.ФормаВыбора",, ЭтаФорма);
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаСервере
Функция ПолучитьСотрудниковДляПроверки()
	мсвСотрудниковДругойОрганизации = Новый Массив;
	Тарифы = Объект.Тарифы.Выгрузить();
	Тарифы.Свернуть("Сотрудник");
	Для Каждого ТекСтрока Из Тарифы Цикл
		СведенияОСотруднике = уатОбщегоНазначения.уатПрочитатьРеквизитыВодителя(
			ТекСтрока.Сотрудник, КонецДня(Объект.Дата), Объект.Организация);
		Если НЕ ЗначениеЗаполнено(СведенияОСотруднике.Организация) Тогда
			мсвСотрудниковДругойОрганизации.Добавить(ТекСтрока.Сотрудник);
		КонецЕсли;
	КонецЦикла;
	
	СтруктураВозврата = Новый Структура("мсвСотрудниковДругойОрганизации", мсвСотрудниковДругойОрганизации); 
	
	Возврат СтруктураВозврата;
КонецФункции

&НаКлиенте
Процедура ЗаполнитьВсемиСотрудникамиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Да Тогда
        Объект.Тарифы.Очистить();
    ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
    Иначе
        Возврат;
    КонецЕсли;
    
    ЗаполнитьВсемиСотрудникамиФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВсемиСотрудникамиФрагмент()
    
    ЗаполнитьВсемиСотрудникамиСервер();
    Модифицированность = Истина;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВсемиСотрудникамиСервер()
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СправочникСотрудники.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Сотрудники КАК СправочникСотрудники
	|ГДЕ
	|	СправочникСотрудники.Организация = &Организация
	|	И (СправочникСотрудники.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ СправочникСотрудники.ДатаУвольнения > &Период)
	|	И СправочникСотрудники.ДатаПриема <> ДАТАВРЕМЯ(1, 1, 1)
	|	И СправочникСотрудники.ДатаПриема < &Период
	|
	|УПОРЯДОЧИТЬ ПО
	|	СправочникСотрудники.Наименование");
	Запрос.УстановитьПараметр("Организация", Объект.Организация);
	Запрос.УстановитьПараметр("Период", Объект.Дата);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Объект.Тарифы.Добавить();
		НоваяСтрока.Сотрудник = Выборка.Ссылка;
		НоваяСтрока.ДатаНачала = Объект.Дата;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДействующимиТарифамиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Да Тогда
        Объект.Тарифы.Очистить();
    ИначеЕсли Ответ = КодВозвратаДиалога.Нет Тогда
    Иначе
        Возврат;
    КонецЕсли;
    
    ЗаполнитьДействующимиТарифамиФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДействующимиТарифамиФрагмент()
    
    ЗаполнитьДействующимиТарифамиСервер();
    Модифицированность = Истина;

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДействующимиТарифамиСервер()
	Если Объект.ВидОперации = Перечисления.уатВидыОперацийУстановкаТарифовЗП.ФизическиеЛица Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатТарифыСотрудниковСрезПоследних.Сотрудник КАК Сотрудник,
		|	уатТарифыСотрудниковСрезПоследних.ТарифЗП КАК ТарифЗП,
		|	уатТарифыСотрудниковСрезПоследних.Период КАК Период,
		|	уатТарифыСотрудниковСрезПоследних.ДатаОкончания КАК ДатаОкончания
		|ИЗ
		|	РегистрСведений.уатТарифыСотрудников.СрезПоследних(
		|			&Период,
		|			Сотрудник ССЫЛКА Справочник.ФизическиеЛица
		|				И НЕ Сотрудник.ПометкаУдаления
		|				И ВЫБОР
		|					КОГДА ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1)
		|						ТОГДА ДатаОкончания >= &Период
		|					ИНАЧЕ ИСТИНА
		|				КОНЕЦ) КАК уатТарифыСотрудниковСрезПоследних");
		Запрос.УстановитьПараметр("Период", Объект.Дата);
	Иначе
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатТарифыСотрудниковСрезПоследних.Сотрудник КАК Сотрудник,
		|	уатТарифыСотрудниковСрезПоследних.ТарифЗП КАК ТарифЗП,
		|	уатТарифыСотрудниковСрезПоследних.Период КАК Период,
		|	уатТарифыСотрудниковСрезПоследних.ДатаОкончания КАК ДатаОкончания
		|ИЗ
		|	РегистрСведений.уатТарифыСотрудников.СрезПоследних(
		|			&Период,
		|			Сотрудник ССЫЛКА Справочник.Сотрудники
		|				И НЕ Сотрудник.ПометкаУдаления
		|				И ВЫБОР
		|					КОГДА ДатаОкончания <> ДАТАВРЕМЯ(1, 1, 1)
		|						ТОГДА ДатаОкончания >= &Период
		|					ИНАЧЕ ИСТИНА
		|				КОНЕЦ) КАК уатТарифыСотрудниковСрезПоследних
		|ГДЕ
		|	(уатТарифыСотрудниковСрезПоследних.Сотрудник.ДатаУвольнения = ДАТАВРЕМЯ(1, 1, 1)
		|			ИЛИ уатТарифыСотрудниковСрезПоследних.Сотрудник.ДатаУвольнения > &Период)
		|	И уатТарифыСотрудниковСрезПоследних.Сотрудник.ДатаПриема <> ДАТАВРЕМЯ(1, 1, 1)
		|	И уатТарифыСотрудниковСрезПоследних.Сотрудник.ДатаПриема < &Период
		|
		|УПОРЯДОЧИТЬ ПО
		|	уатТарифыСотрудниковСрезПоследних.Сотрудник.Наименование");
		Запрос.УстановитьПараметр("Период", Объект.Дата);
		Запрос.УстановитьПараметр("Организация", Объект.Организация);
	КонецЕсли;
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Объект.Тарифы.Добавить();
		НоваяСтрока.Сотрудник = Выборка.Сотрудник;
		НоваяСтрока.Тариф = Выборка.ТарифЗП;
		//НоваяСтрока.Действует = Выборка.Действует;
		НоваяСтрока.ДатаНачала = Выборка.Период;
		НоваяСтрока.ДатаОкончания = Выборка.ДатаОкончания;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
        Объект.Тарифы.Очистить();
        Модифицированность = Истина;
    КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура РасширенноеЗаполнениеЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Для Каждого Сотрудник Из РезультатЗакрытия Цикл
		НоваяСтрока = Объект.Тарифы.Добавить();
		НоваяСтрока.Сотрудник = Сотрудник;
		НоваяСтрока.ДатаНачала = Объект.Дата;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьИконкуМетодаРасчета()
	Для Каждого ТекСтрока Из Объект.Тарифы Цикл
		Если ТипЗнч(ТекСтрока.Тариф) = Тип("СправочникСсылка.уатТарифыЗП") Тогда
			Если ТекСтрока.Тариф.ВидНачисления.СпособРасчетаОплатыТруда = Перечисления.уатСпособыРасчетаОплатыТруда.СдельныйЗаработок Тогда
				ТекСтрока.ИконкаМетодРасчета = 0;
			ИначеЕсли ТекСтрока.Тариф.ВидНачисления.СпособРасчетаОплатыТруда = Перечисления.уатСпособыРасчетаОплатыТруда.ФиксированнойСуммой Тогда
				ТекСтрока.ИконкаМетодРасчета = 1;
			ИначеЕсли ТекСтрока.Тариф.ВидНачисления.СпособРасчетаОплатыТруда = Перечисления.уатСпособыРасчетаОплатыТруда.ПроцентомОтВыручки
				ИЛИ ТекСтрока.Тариф.ВидНачисления.СпособРасчетаОплатыТруда = Перечисления.уатСпособыРасчетаОплатыТруда.ПроцентомОтВидовНачислений Тогда
				ТекСтрока.ИконкаМетодРасчета = 2;
			ИначеЕсли ТекСтрока.Тариф.ВидНачисления.СпособРасчетаОплатыТруда = Перечисления.уатСпособыРасчетаОплатыТруда.ДоплатаЗаНочныеЧасы
				ИЛИ ТекСтрока.Тариф.ВидНачисления.СпособРасчетаОплатыТруда = Перечисления.уатСпособыРасчетаОплатыТруда.ДоплатаЗаПраздничныеИВыходные Тогда
				ТекСтрока.ИконкаМетодРасчета = 3;
			Иначе
				ТекСтрока.ИконкаМетодРасчета = 4;
			КонецЕсли;
		Иначе
			ТекСтрока.ИконкаМетодРасчета = 4;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимость()
	флФизЛица = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийУстановкаТарифовЗП.ФизическиеЛица"));
	
	Элементы.ТарифыЗаполнитьВсемиСотрудниками.Видимость = НЕ флФизЛица;
	Элементы.ТарифыСотрудник.Заголовок = ?(флФизЛица, "Физическое лицо", "Сотрудник");
	Элементы.ФормаОперацияСотрудники.Пометка = НЕ флФизЛица;
	Элементы.ФормаОперацияФизЛица.Пометка    = флФизЛица;
		
	Если флФизЛица Тогда
		Элементы.ТарифыСотрудник.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица");
	Иначе
		Элементы.ТарифыСотрудник.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Сотрудники");
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ПеременныеФормы

&НаКлиенте
Перем СтрокаПлатеж;
&НаКлиенте
Перем ОтветПередЗаписью;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	уатЗащищенныеФункцииСервер.уатДокументФормаЭлементаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, Объект, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если Объект.Ссылка.Пустая() И ЗначениеЗаполнено(Объект.Организация) Тогда
		ПриИзмененииОрганизацииНаСервере();
	КонецЕсли;
	
	ПараметрыЗначениеКопирования = Параметры.ЗначениеКопирования;
	уатОбщегоНазначенияСервер.НастроитьПолеПодразделение(Элементы.Подразделение, "Объект.Организация");
	
	МноговалютныйУчет = ПолучитьФункциональнуюОпцию("уатМноговалютныйУчет");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	уатЗащищенныеФункцииКлиент.уатДокументФормаЭлементаПриОткрытии(Отказ, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	Если Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
		НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
		НоваяСтрока.СтавкаНДС =  уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнаяСтавкаНДС");
	КонецЕсли;
	
	Элементы.РасшифровкаПлатежа.ТекущаяСтрока = Объект.РасшифровкаПлатежа[0].ПолучитьИдентификатор();
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
	УстановитьКурсДокумента();
	
	Если Параметры.Ключ.Пустая() Тогда // проверить объект на то, что он еще не внесен в ИБ	
		
		Если Не ЗначениеЗаполнено(Объект.ВидПлатежа) Тогда
			Объект.ВидПлатежа = Элементы.ВидПлатежа.СписокВыбора[2];
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Объект.ОчередностьПлатежа) Тогда
			Объект.ОчередностьПлатежа = 6;
		КонецЕсли;
		
		Если ПараметрыЗначениеКопирования.Пустая() 
			И Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.уатВидыОперацийПлатежноеПоручениеИсходящее.ВыдачаПодотчетнику")
			И Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.уатВидыОперацийПлатежноеПоручениеИсходящее.ПереводНаДругойСчет") Тогда
			ЗаполнитьКонтрагента();
		Иначе
			УстановитьКурсДокумента();
		КонецЕсли;
	Иначе
		УстановитьКурсДокумента();
	КонецЕсли;
	
	УстановитьПометкуОперации();
	
	// Установить видимость реквизитов и заголовков колонок.
	Если Объект.РасшифровкаПлатежа.Количество()>1 Тогда
		СпособРедактирования = 1;
	Иначе
		СпособРедактирования = 0;
	КонецЕсли;
	
	ВалютаВзаиморасчетовСтарая = СтрокаПлатеж.ВалютаВзаиморасчетов;
	
	УстановитьОграничениеТипаСделка();
	УстановитьВидимость();
	РассчитатьИтоги();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если Не ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
		Если ВыбранноеЗначение = "АвтоПодбор" Тогда
			Если Объект.РасшифровкаПлатежа.Количество() > 1 Тогда
				СпособРедактирования = 1;
			ИначеЕсли Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
				СпособРедактирования = 0;
				СтрокаПлатеж = Объект.РасшифровкаПлатежа.Добавить();
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		НДСПоУмолчанию = ?(Не ЗначениеЗаполнено(СтрокаПлатеж.СтавкаНДС),
			уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнаяСтавкаНДС"),
			СтрокаПлатеж.СтавкаНДС);
		
		Если Не ВыбранноеЗначение.ЕстьПодбор Тогда
			
			СтруктураОтбора = Новый Структура;
			СтруктураОтбора.Вставить("ДоговорКонтрагента", ВыбранноеЗначение.ДоговорКонтрагента);
			
			ВедениеВзаиморасчетовПоДоговору = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(ВыбранноеЗначение.ДоговорКонтрагента, "ВедениеВзаиморасчетов");
			Если ВедениеВзаиморасчетовПоДоговору = ПредопределенноеЗначение("Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам")
				ИЛИ ВедениеВзаиморасчетовПоДоговору = ПредопределенноеЗначение("Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоНакладным")
				ИЛИ ВедениеВзаиморасчетовПоДоговору = ПредопределенноеЗначение("Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказамНаТС") Тогда
				СтруктураОтбора.Вставить("Сделка", ВыбранноеЗначение.Сделка);
			КонецЕсли;
			
			МассивСтрок = Объект.РасшифровкаПлатежа.НайтиСтроки(СтруктураОтбора);
			
			Если Не МассивСтрок = Неопределено Тогда
				Для Каждого Строка Из МассивСтрок Цикл
					Объект.РасшифровкаПлатежа.Удалить(Строка);
				КонецЦикла;
			КонецЕсли;
			
			Если Объект.РасшифровкаПлатежа.Количество() > 0 И НЕ ЗначениеЗаполнено(Объект.РасшифровкаПлатежа[0].ДоговорКонтрагента) Тогда
				Объект.РасшифровкаПлатежа.Удалить(Объект.РасшифровкаПлатежа[0]);
			КонецЕсли;
			
		КонецЕсли;
		
		Если СпособРедактирования = 1 ИЛИ Объект.РасшифровкаПлатежа.Количество() = 0 Тогда
			СтрокаПлатеж = Объект.РасшифровкаПлатежа.Добавить();
		КонецЕсли;
		
		СтрокаПлатеж.ДоговорКонтрагента = ВыбранноеЗначение.ДоговорКонтрагента;
		СтрокаПлатеж.Сделка             = ВыбранноеЗначение.Сделка;
		
		СтрокаПлатеж.СуммаПлатежа            = ВыбранноеЗначение.СуммаПлатежа;
		СтрокаПлатеж.СуммаВзаиморасчетов     = ВыбранноеЗначение.СуммаВзаиморасчетов;
		СтрокаПлатеж.ВалютаВзаиморасчетов    = ВыбранноеЗначение.ВалютаВзаиморасчетов;
		СтрокаПлатеж.КурсВзаиморасчетов      = ВыбранноеЗначение.КурсВзаиморасчетов;
		СтрокаПлатеж.КратностьВзаиморасчетов = ВыбранноеЗначение.КратностьВзаиморасчетов;
				
		Если СтрокаПлатеж.СтавкаНДС.Пустая() Тогда
			СтрокаПлатеж.СтавкаНДС = НДСПоУмолчанию;
		КонецЕсли;
		
		ПересчитатьСуммуНДС(СтрокаПлатеж);
		
	КонецЕсли;
	
	Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	РассчитатьИтоги();
	
	УстановитьФокус();
	УстановитьВидимость();
	УстановитьОграничениеТипаСделка();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если НЕ ОтветПередЗаписью
		И (ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Запись ИЛИ ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение)
		И Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа") <> Объект.СуммаДокумента Тогда
		
		Отказ = Истина;
		
		ТекстНСТР = НСтр("en='Do not match document amount (%1) and its interpretation (%2). Recalculate amount of document?';ru='Не совпадают сумма документа (%1) и ее расшифровка (%2). Пересчитать сумму документа?'");
		ТекстНСТР = СтрШаблон(ТекстНСТР, Объект.СуммаДокумента, Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа"));
		ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗаписьюЗавершение", ЭтотОбъект, Новый Структура("ПараметрыЗаписи", ПараметрыЗаписи)),
			ТекстНСТР, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Да);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписьюЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	
	Если Ответ = КодВозвратаДиалога.Да Тогда
		ОтветПередЗаписью = Истина;
		Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
		Записать(ДополнительныеПараметры.ПараметрыЗаписи);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если флВопросЗакрытиеФормы Тогда
		Отказ = Истина;
		Оповещ = Новый ОписаниеОповещения("ПередЗакрытиемВопрос", ЭтотОбъект);
		ПоказатьВопрос(Оповещ, "При проверке корректности заполнения документа возникли предупреждения!
			|Продолжить закрытие формы?", РежимДиалогаВопрос.ОКОтмена);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	
	УстановитьКурсДокумента();
	
	Для Каждого СтрокаПлатеж Из Объект.РасшифровкаПлатежа Цикл
		ПриИзмененииВалютыВзаиморасчетов(Ложь);
	КонецЦикла;
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	УстановитьФокус();
	ПриИзмененииОрганизацииНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииОрганизацииНаСервере()

	Если НЕ ЗначениеЗаполнено(Объект.БанковскийСчет) 
		ИЛИ (ПолучитьОрганизациюПоСчетуНаСервере(Объект.БанковскийСчет) <> Объект.Организация) Тогда
		
		Объект.БанковскийСчет = ПолучитьСчетПоОрганизацииНаСервере(Объект.Организация);
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПолучитьСчетПоОрганизацииНаСервере(ТекОрганизация)

	Если ЗначениеЗаполнено(ТекОрганизация)
		И ТипЗнч(ТекОрганизация) = Тип("СправочникСсылка.Организации") Тогда
		
		Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитСправочника("ОсновнойБанковскийСчет", "Организации") Тогда
			Возврат ТекОрганизация.ОсновнойБанковскийСчет;
		КонецЕсли;
	Иначе
		Если Метаданные.Справочники.Найти("БанковскиеСчета") <> Неопределено Тогда
			Возврат Справочники.БанковскиеСчета.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;

КонецФункции // ПолучитьСчетПоОрганизацииНаСервере()

&НаСервере
Функция ПолучитьОрганизациюПоСчетуНаСервере(ТекСчет)

	Если ЗначениеЗаполнено(ТекСчет) Тогда
		Возврат ТекСчет.Владелец;
	Иначе 
		Возврат Справочники.Организации.ПустаяСсылка();
	КонецЕсли;

КонецФункции // ПолучитьОрганизациюПоСчетуНаСервере()

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	// проставим основной договор контрагента
	ПриИзмененииКонтрагента();
	УстановитьФокус();
	ПриИзмененииДоговора();
	
КонецПроцедуры

&НаКлиенте
Процедура БанковскийСчетПриИзменении(Элемент)
	
	ПересчитыватьСумму = Истина;
	
	ВалютаСчета = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(Объект.БанковскийСчет, "ВалютаДенежныхСредств"); 
	СтараяВалюта = Объект.ВалютаДокумента;
	НовСумма = уатОбщегоНазначенияТиповые_проф.ПриИзмененииЗначенияКассыБанковскогоСчета(Объект.ВалютаДокумента, 
																			  КурсДокумента, 
																			  КратностьДокумента, 
																			  Объект.Дата, 
																			  Объект.СуммаДокумента, 
																			  ВалютаСчета);
	
	Если Не НовСумма = Неопределено Тогда 
		ТекстНСТР = НСтр("en='Changed document currency. Recalculate amount of document?';ru='Изменилась валюта документа. Пересчитать сумму документа?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("БанковскийСчетПриИзмененииЗавершение", ЭтотОбъект,
			Новый Структура("НовСумма, СтараяВалюта", НовСумма, СтараяВалюта)), ТекстНСТР, 
			РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да);
        Возврат;
	КонецЕсли;
	
	БанковскийСчетПриИзмененииФрагмент(ПересчитыватьСумму, СтараяВалюта);
КонецПроцедуры

&НаКлиенте
Процедура БанковскийСчетПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
	НовСумма = ДополнительныеПараметры.НовСумма;
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Да Тогда
		Объект.СуммаДокумента = НовСумма;
		ПересчитыватьСумму = Истина;
	Иначе 
		ПересчитыватьСумму = Ложь;
	КонецЕсли;
	
	БанковскийСчетПриИзмененииФрагмент(ПересчитыватьСумму, ДополнительныеПараметры.СтараяВалюта);

КонецПроцедуры

&НаКлиенте
Процедура БанковскийСчетПриИзмененииФрагмент(Знач ПересчитыватьСумму, СтараяВалюта)

    Перем ВалютаВзаиморасчетов, Строка;
    
    Если ПересчитыватьСумму Тогда
        Если уатОбщегоНазначения_проф.ЕстьРасчетыСКонтрагентами(Объект.ВидОперации) Тогда
            Для Каждого Строка Из Объект.РасшифровкаПлатежа Цикл
				СтрокаПлатеж = Строка;
				
				Если ЗначениеЗаполнено(Строка.ВалютаВзаиморасчетов) Тогда
					ВалютаВзаиморасчетов = Строка.ВалютаВзаиморасчетов;
				Иначе
					ВалютаВзаиморасчетов = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(СтрокаПлатеж.ДоговорКонтрагента, "ВалютаВзаиморасчетов");
				КонецЕсли;
				
				Если НЕ ЗначениеЗаполнено(ВалютаВзаиморасчетов) Тогда
					ВалютаВзаиморасчетов = СтараяВалюта;
				КонецЕсли;
					
                Если Объект.ВалютаДокумента <> СтараяВалюта Тогда
					Строка.СуммаПлатежа = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(Строка.СуммаПлатежа,
						СтараяВалюта, Объект.ВалютаДокумента, Объект.Дата, Объект.Дата);
                КонецЕсли;
                
                ПересчитатьСуммуНДС(Строка);
                
            КонецЦикла;
        Иначе
            СуммаДокументаПриИзменении(Неопределено);
        КонецЕсли;
        
        Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
    КонецЕсли;
    
    УстановитьФокус();
    УстановитьВидимость();
    
    Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
        Объект.Организация = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(Объект.БанковскийСчет, "Владелец");
    КонецЕсли;
    
    РассчитатьИтоги();

КонецПроцедуры

&НаКлиенте
Процедура СуммаДокументаПриИзменении(Элемент)
	
	Если ИнвертироватьСуммы Тогда
		РассчитатьСуммуПлатежа();
	Иначе
		Если Объект.РасшифровкаПлатежа.Количество()=1 Тогда
			СтрокаПлатеж.СуммаПлатежа = Объект.СуммаДокумента;
			РассчитатьСуммуВзаиморасчетовПоСуммеПлатежа(СтрокаПлатеж);
			ПересчитатьСуммуНДС(СтрокаПлатеж);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура БанковскийСчетНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УстановитьОтборПоВладельцуСчетаОрганизации();
	
КонецПроцедуры

&НаКлиенте
Процедура СчетПолучателяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УстановитьОтборПоВладельцуСчетаПолучателя();
	
КонецПроцедуры

&НаКлиенте
Процедура СчетКонтрагентаПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Объект.Контрагент = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(Объект.СчетКонтрагента, "Владелец");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СчетКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	УстановитьОтборПоВладельцуСчетаКонтрагента();
	
КонецПроцедуры

&НаКлиенте
Процедура СпособРедактированияПриИзменении(Элемент)
	
	Если СпособРедактирования = 0 И Объект.РасшифровкаПлатежа.Количество() > 1 Тогда
		ТекстНСТР = НСтр("en='All lines of payment decryption except the first will be deleted. "
			"Do you want to continue?';ru='Все строки расшифровки платежа, кроме первой, будут удалены. "
			"Продолжить?'");
		
		ПоказатьВопрос(Новый ОписаниеОповещения("СпособРедактированияПриИзмененииЗавершение", ЭтотОбъект),
			ТекстНСТР, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Да,);
        Возврат;
	Иначе
		Элементы.РасшифровкаПлатежа.ТекущаяСтрока = Объект.РасшифровкаПлатежа[0].ПолучитьИдентификатор();
		СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	КонецЕсли;
	
	СпособРедактированияПриИзмененииФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура СпособРедактированияПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    
    Если Ответ <> КодВозвратаДиалога.Да Тогда
        СпособРедактирования = 1;
        Возврат;
    КонецЕсли;
    
    Пока Объект.РасшифровкаПлатежа.Количество() > 1 Цикл
        СтрокаУдаления = Объект.РасшифровкаПлатежа[1];
        Объект.РасшифровкаПлатежа.Удалить(СтрокаУдаления);
    КонецЦикла;
    
    Элементы.РасшифровкаПлатежа.ТекущаяСтрока = Объект.РасшифровкаПлатежа[0].ПолучитьИдентификатор();
    СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
    
	//СтрокаПлатеж.СуммаПлатежа = Объект.СуммаДокумента;
    
    ПересчитатьСуммуНДС(СтрокаПлатеж);
	Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
        
    СпособРедактированияПриИзмененииФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура СпособРедактированияПриИзмененииФрагмент()
	
	УстановитьОграничениеТипаСделка();
    УстановитьВидимость();
    РассчитатьИтоги();

КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаВзаиморасчетов1ПриИзменении(Элемент)
	РассчитатьСуммуПлатежаПоСуммеВзаиморасчетов(СтрокаПлатеж);
	Объект.СуммаДокумента = СтрокаПлатеж.СуммаПлатежа;
	ПересчитатьСуммуНДС(СтрокаПлатеж);
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормы_РасшифровкаПлатежа

&НаКлиенте
Процедура РасшифровкаПлатежаПриАктивизацииСтроки(Элемент)
	
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПередУдалением(Элемент, Отказ)
	
	Если Объект.РасшифровкаПлатежа.Количество()=1 Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПриИзменении(Элемент)
	Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	РассчитатьИтоги();
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьИтоги()
	Элементы.РасшифровкаПлатежаСуммаПлатежа.ТекстПодвала = Формат(Объект.СуммаДокумента,"ЧЦ=12; ЧДЦ=2") + " " + Строка(Объект.ВалютаДокумента);
	
	Если МноговалютныйУчет Тогда
		ИтогНДС = 0;
		СтруктураКурсаДокумента = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
		Для Каждого ТекСтрока Из Объект.РасшифровкаПлатежа Цикл
			Если ТекСтрока.ВалютаВзаиморасчетов = Объект.ВалютаДокумента Тогда
				ИтогНДС = ИтогНДС + ТекСтрока.СуммаНДС;
			Иначе
				ИтогНДС = ИтогНДС + уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаНДС,
					ТекСтрока.ВалютаВзаиморасчетов,    Объект.ВалютаДокумента,
					ТекСтрока.КурсВзаиморасчетов,      СтруктураКурсаДокумента.Курс,
					ТекСтрока.КратностьВзаиморасчетов, СтруктураКурсаДокумента.Кратность);
			КонецЕсли;
		КонецЦикла;
	Иначе
		ИтогНДС = Объект.РасшифровкаПлатежа.Итог("СуммаНДС");
	КонецЕсли;
	Элементы.РасшифровкаПлатежаСуммаНДС.ТекстПодвала = Формат(ИтогНДС, "ЧЦ=12; ЧДЦ=2") + " " + Строка(Объект.ВалютаДокумента);
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаДоговорКонтрагентаПриИзменении(Элемент)
	
	ПриИзмененииДоговора();
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаДоговорКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда 
		СтандартнаяОбработка = Ложь;
		
		Если СпособРедактирования = 0 Тогда 
			ПолеДанных = "Элементы.РасшифровкаПлатежа.ТекущиеДанные.ДоговорКонтрагента";
		Иначе 
			ТекСтрока = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
			Если Не ТекСтрока = Неопределено Тогда 
				ИндексСтроки = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(ТекСтрока.ПолучитьИдентификатор()).НомерСтроки-1;
				ПолеДанных = "Объект.РасшифровкаПлатежа["+Формат(ИндексСтроки,"ЧГ=0")+"].ДоговорКонтрагента";
			Иначе 
				ПолеДанных = "Объект.РасшифровкаПлатежа";
			КонецЕсли;
		КонецЕсли;
		
		ТекстНСТР = НСтр("en='Select a counterparty';ru='Необходимо выбрать контрагента'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР,, ПолеДанных);
		
		Возврат;
	КонецЕсли;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийПлатежноеПоручениеИсходящее.ПрочиеРасчетыСКонтрагентами") Тогда
		мВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.Прочее");
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийПлатежноеПоручениеИсходящее.ОплатаПоставщику") Тогда
		мВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком");
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийПлатежноеПоручениеИсходящее.ВозвратПокупателю") Тогда
		мВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем");
	КонецЕсли;
	
	уатОбщегоНазначенияТиповыеКлиент.уатНачалоВыбораЗначенияДоговораКонтрагента(Объект, ЭтотОбъект, Элемент, Объект.Контрагент,
		Элементы.РасшифровкаПлатежа.ТекущиеДанные.ДоговорКонтрагента, мВидДоговора, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаСоздание(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВидДоговораДоступныеЗначения = Новый Массив;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийПлатежноеПоручениеИсходящее.ПрочиеРасчетыСКонтрагентами") Тогда
		мВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.Прочее");
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийПлатежноеПоручениеИсходящее.ОплатаПоставщику") Тогда
		мВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком");
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийПлатежноеПоручениеИсходящее.ВозвратПокупателю") Тогда
		мВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем");
	КонецЕсли;
	ВидДоговораДоступныеЗначения.Добавить(мВидДоговора);
	
	ПараметрыФормы = Новый Структура();   
	ПараметрыФормы.Вставить("Владелец", Объект.Контрагент);
	ПараметрыФормы.Вставить("ВидДоговораДоступныеЗначения", ВидДоговораДоступныеЗначения);
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСделкаПриИзменении(Элемент)
	
	Если ТипЗнч(СтрокаПлатеж.Сделка) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") ИЛИ НЕ ЗначениеЗаполнено(СтрокаПлатеж.Сделка) Тогда
		Возврат;
	КонецЕсли;
	
	Если МноговалютныйУчет И ТипЗнч(СтрокаПлатеж.Сделка) = Тип("ДокументСсылка.уатПоступлениеТоваровУслуг")
		И ЗначениеЗаполнено(уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(СтрокаПлатеж.Сделка, "ВалютаВзаиморасчетов")) Тогда
		
		ВалютаВзаиморасчетов = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(СтрокаПлатеж.Сделка, "ВалютаВзаиморасчетов");
		СуммаВзаиморасчетов  = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(СтрокаПлатеж.Сделка, "СуммаВзаиморасчетов");
	Иначе
		ВалютаВзаиморасчетов = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(СтрокаПлатеж.Сделка, "ВалютаДокумента");
		СуммаВзаиморасчетов  = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(СтрокаПлатеж.Сделка, "СуммаДокумента");
	КонецЕсли;
		
	Если СтрокаПлатеж.ВалютаВзаиморасчетов <> ВалютаВзаиморасчетов Тогда
		СтрокаПлатеж.ВалютаВзаиморасчетов = ВалютаВзаиморасчетов;
		ПриИзмененииВалютыВзаиморасчетов();
	КонецЕсли;
	
	СтрокаПлатеж.СуммаВзаиморасчетов = СуммаВзаиморасчетов;
	РассчитатьСуммуПлатежаПоСуммеВзаиморасчетов(СтрокаПлатеж);
	ПересчитатьСуммуНДС(СтрокаПлатеж);
	Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСделкаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	НачалоВыбораСделки(Элемент, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСтавкаНДСПриИзменении(Элемент)
	
	ПересчитатьСуммуНДС(СтрокаПлатеж);
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаПлатежаПриИзменении(Элемент)
	
	РассчитатьСуммуВзаиморасчетовПоСуммеПлатежа(СтрокаПлатеж);
	ПересчитатьСуммуНДС(СтрокаПлатеж);
	Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаДокументПланированияПлатежа1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ФормаВыбора = ПолучитьФорму("Документ.уатЗаявкаНаРасходованиеДС.Форма.ФормаВыбора",,Элемент);
		
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийПлатежноеПоручениеИсходящее.ОплатаПоставщику")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийПлатежноеПоручениеИсходящее.ПрочиеРасчетыСКонтрагентами")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийПлатежноеПоручениеИсходящее.ВозвратПокупателю") Тогда
		
		Если Не ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда 
			СтандартнаяОбработка = Ложь;
			
			Если СпособРедактирования = 0 Тогда 
				ПолеДанных = "Элементы.РасшифровкаПлатежа.ТекущиеДанные.ДокументПланированияПлатежа";
			Иначе 
				ТекСтрока = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
				Если Не ТекСтрока = Неопределено Тогда 
					ИндексСтроки = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(ТекСтрока.ПолучитьИдентификатор()).НомерСтроки-1;
					ПолеДанных = "Объект.РасшифровкаПлатежа["+Формат(ИндексСтроки,"ЧГ=0")+"].ДокументПланированияПлатежа";
				Иначе 
					ПолеДанных = "Объект.РасшифровкаПлатежа";
				КонецЕсли;
			КонецЕсли;
			
			ТекстНСТР = НСтр("en='Select contract of counterparty';ru='Необходимо выбрать договор контрагента'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР,, ПолеДанных);
			
			Возврат;
		КонецЕсли;
				
		ЭлементОтбора                  = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("РасшифровкаПлатежа.ДоговорКонтрагента");
		ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение   = СтрокаПлатеж.ДоговорКонтрагента;
		ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		ЭлементОтбора.Использование    = Истина;
		
	КонецЕсли;
	
	ЭлементОтбора                  = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("Проведен");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение   = Истина;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.Использование    = Истина;
	
	ЭлементОтбора                  = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("ПометкаУдаления");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение   = Ложь;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.Использование    = Истина;
	ФормаВыбора.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаСуммаВзаиморасчетовПриИзменении(Элемент)
	
	РассчитатьСуммуПлатежаПоСуммеВзаиморасчетов(Элементы.РасшифровкаПлатежа.ТекущиеДанные);
	ПересчитатьСуммуНДС(СтрокаПлатеж);
	Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаВалютаВзаиморасчетовПриИзменении(Элемент)
	ПриИзмененииВалютыВзаиморасчетов();
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаПлатежаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элементы.РасшифровкаПлатежа.ТекущиеДанные.СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
			ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнаяСтавкаНДС");
	КонецЕсли;
	
	УстановитьОграничениеТипаСделка();
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ОперацияОплатаПоставщику(Команда)
	ВидОперацииПриИзменении(ПредопределенноеЗначение("Перечисление.уатВидыОперацийПлатежноеПоручениеИсходящее.ОплатаПоставщику"));
КонецПроцедуры

&НаКлиенте
Процедура ОперацияПрочиеРасчетыСКонтрагентами(Команда)
	ВидОперацииПриИзменении(ПредопределенноеЗначение("Перечисление.уатВидыОперацийПлатежноеПоручениеИсходящее.ПрочиеРасчетыСКонтрагентами"));
КонецПроцедуры

&НаКлиенте
Процедура ОперацияРасходДенежныхСредствПрочее(Команда)
	ВидОперацииПриИзменении(ПредопределенноеЗначение("Перечисление.уатВидыОперацийПлатежноеПоручениеИсходящее.РасходДенежныхСредствПрочее"));
КонецПроцедуры

&НаКлиенте
Процедура ОперацияВыдачаПодотчетнику(Команда)
	ВидОперацииПриИзменении(ПредопределенноеЗначение("Перечисление.уатВидыОперацийПлатежноеПоручениеИсходящее.ВыдачаПодотчетнику"));
КонецПроцедуры

&НаКлиенте
Процедура ОперацияВозвратПокупателю(Команда)
	ВидОперацииПриИзменении(ПредопределенноеЗначение("Перечисление.уатВидыОперацийПлатежноеПоручениеИсходящее.ВозвратПокупателю"));
КонецПроцедуры

&НаКлиенте
Процедура ОперацияПереводНаДругойСчет(Команда)
	ВидОперацииПриИзменении(ПредопределенноеЗначение("Перечисление.уатВидыОперацийПлатежноеПоручениеИсходящее.ПереводНаДругойСчет"));
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(ВидОперацииЗначение)
	Объект.ВидОперации = ВидОперацииЗначение;
	УстановитьПометкуОперации();
	
	Объект.РасшифровкаПлатежа.Очистить();
	СтрокаПлатеж = Объект.РасшифровкаПлатежа.Добавить();
	СтрокаПлатеж.СуммаПлатежа = Объект.СуммаДокумента;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийПлатежноеПоручениеИсходящее.ОплатаПоставщику")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийПлатежноеПоручениеИсходящее.ПрочиеРасчетыСКонтрагентами")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийПлатежноеПоручениеИсходящее.ВозвратПокупателю") Тогда
		СтрокаПлатеж.СтавкаНДС =  уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнаяСтавкаНДС");
		ПересчитатьСуммуНДС(СтрокаПлатеж);
	КонецЕсли;
	
	СпособРедактирования = 0;
	
	УстановитьФокус();
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНазначенияПлатежа(Команда)
	
	АдресСуммы = Найти(Объект.НазначениеПлатежа, "Сумма");
	
	Если АдресСуммы > 0 Тогда
		ТекстНазначение = Лев(Объект.НазначениеПлатежа, АдресСуммы - 2);
	Иначе
		ТекстНазначение = Объект.НазначениеПлатежа;
	КонецЕсли;
	
	Если ТекстНазначение = "" И ЗначениеЗаполнено(Объект.СчетКонтрагента) Тогда
		ТекстНазначение = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(Объект.СчетКонтрагента, "ТекстНазначения");
	КонецЕсли;
	Если ТекстНазначение = ""
		И Объект.РасшифровкаПлатежа.Количество() = 1
		И ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда
		
		ТекстНазначение = ТекстНазначение
		+ ?(ПустаяСтрока(ТекстНазначение), "По ", " по ")
		+ Строка(СтрокаПлатеж.ДоговорКонтрагента);
	КонецЕсли;
	
	ТекстСумма = "Сумма " + Формат(Объект.СуммаДокумента, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ=");
	
	ТекстНДС = "";
	СформироватьСтрокуНДС(ТекстНДС);
	
	ТекстСумма = ТекстСумма + Символы.ПС + ТекстНДС;
	
	Объект.НазначениеПлатежа = ТекстНазначение + Символы.ПС + ТекстСумма;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьПлатежи(Команда)
	
	Если НЕ ЗначениеЗаполнено(Объект.Организация) Тогда
		ТекстНСТР = НСтр("en='You must specify the company'; ru='Необходимо указать организацию'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР,, "Объект.Организация");
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ТекстНСТР = НСтр("en='You must specify the counterparty'; ru='Необходимо указать контрагента'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР,, "Объект.Контрагент");
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДокументСсылка",              Объект.Ссылка);
	СтруктураПараметров.Вставить("КурсДокумента",               КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента",          КратностьДокумента);
	СтруктураПараметров.Вставить("ТипЗадолженности",            "<0");
	СтруктураПараметров.Вставить("Контрагент",                  Объект.Контрагент);
	СтруктураПараметров.Вставить("БанковскийСчетКасса",         Объект.БанковскийСчет);
	СтруктураПараметров.Вставить("Организация",                 Объект.Организация);
	СтруктураПараметров.Вставить("ВалютаДокумента",             Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("ДатаДок",                     Объект.Дата);
	СтруктураПараметров.Вставить("СуммаДляПодбора",             Объект.СуммаДокумента);
	СтруктураПараметров.Вставить("ПлатежПоСуммеВзаиморасчетов", Истина);
	СтруктураПараметров.Вставить("ЕстьПодбор",                  Ложь);
		
	мсвСтрокРасшифровка = Новый Массив;
	Для Каждого ТекСтрока Из Объект.РасшифровкаПлатежа Цикл
		НовСтрока = Новый Структура("ДоговорКонтрагента, КурсВзаиморасчетов, КратностьВзаиморасчетов, СуммаВзаиморасчетов, СуммаПлатежа, Сделка, СтавкаНДС, СуммаНДС");
		ЗаполнитьЗначенияСвойств(НовСтрока, ТекСтрока);
		НовСтрока.Вставить("Валюта", ТекСтрока.ВалютаВзаиморасчетов);
	КонецЦикла;
	СтруктураПараметров.Вставить("РасшифровкаПлатежа", мсвСтрокРасшифровка);

	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОбработкаСобытияЗаполнениеПлатежей", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.уатПодборПараметровРасшифровкиПлатежа.Форма.ПараметрыЗаполнения", СтруктураПараметров, ЭтотОбъект,,,,ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодборВРасшифровку(Команда)
	ПодборПоЗадолженности(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ПодборВДоговор(Команда)
	ПодборПоЗадолженности(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПодборПоЗадолженности(флБезРазбиения)
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		ТекстНСТР = НСтр("en='You must specify the counterparty'; ru='Необходимо указать контрагента'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР,, "Объект.Контрагент");
		Возврат;
	КонецЕсли;
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДокументСсылка",              Объект.Ссылка);
	СтруктураПараметров.Вставить("КурсДокумента",               КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента",          КратностьДокумента);
	СтруктураПараметров.Вставить("ТипЗадолженности",            "<0");
	СтруктураПараметров.Вставить("Контрагент",                  Объект.Контрагент);
	СтруктураПараметров.Вставить("БанковскийСчетКасса",         Объект.БанковскийСчет);
	СтруктураПараметров.Вставить("Организация",                 Объект.Организация);
	СтруктураПараметров.Вставить("ВалютаДокумента",             Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("ДатаДок",                     Объект.Дата);
	СтруктураПараметров.Вставить("СуммаДляПодбора",             Объект.СуммаДокумента);
	СтруктураПараметров.Вставить("ПлатежПоСуммеВзаиморасчетов", Истина);
	СтруктураПараметров.Вставить("ЕстьПодбор",                  Истина);
	СтруктураПараметров.Вставить("ЗакрыватьПриВыборе",          флБезРазбиения);
	
	мсвСтрокРасшифровка = Новый Массив;
	Для Каждого ТекСтрока Из Объект.РасшифровкаПлатежа Цикл
		НовСтрока = Новый Структура("ДоговорКонтрагента, КурсВзаиморасчетов, КратностьВзаиморасчетов, СуммаВзаиморасчетов, СуммаПлатежа, Сделка, СтавкаНДС, СуммаНДС");
		ЗаполнитьЗначенияСвойств(НовСтрока, ТекСтрока);
		НовСтрока.Вставить("Валюта", ТекСтрока.ВалютаВзаиморасчетов);
	КонецЦикла;
	СтруктураПараметров.Вставить("РасшифровкаПлатежа", мсвСтрокРасшифровка);
	
	ОткрытьФорму("Обработка.уатПодборПараметровРасшифровкиПлатежа.Форма.ФормаПодбораЗадолженностей", СтруктураПараметров, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ПровестиИЗакрыть(Команда)
	ЗаписатьИЗакрыть = Истина;
	Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// Рассчитывает новый курс документа при смене даты
//
&НаКлиенте
Процедура УстановитьКурсДокумента()
	
	СтруктураКурсаВалютаДокумента = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
	КурсДокумента        = СтруктураКурсаВалютаДокумента.Курс;
	КратностьДокумента   = СтруктураКурсаВалютаДокумента.Кратность;
	
КонецПроцедуры // УстановитьКурсДокумента()

// Возвращает фокус на строку ТЧ "Расшифровка платежа" при его потере в режиме редактирования
// одиночного платежа.
&НаКлиенте
Процедура УстановитьФокус()
	
	Если Элементы.РасшифровкаПлатежа.ТекущаяСтрока = Неопределено Тогда
		Элементы.РасшифровкаПлатежа.ТекущаяСтрока = СтрокаПлатеж.ПолучитьИдентификатор();
	КонецЕсли;
	Если СпособРедактирования = 0 Тогда 
		Элементы.РасшифровкаПлатежа.ТекущаяСтрока = СтрокаПлатеж.ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры // УстановитьФокус()

&НаКлиенте
Процедура ПриИзмененииКонтрагента()
	
	ВосстанавливатьРеквизиты = (Объект.РасшифровкаПлатежа.Количество() = 1);
	СтараяСтавкаНДС = СтрокаПлатеж.СтавкаНДС;
	
	Объект.РасшифровкаПлатежа.Очистить();
	СтрокаПлатеж = Объект.РасшифровкаПлатежа.Добавить();
	
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		
		СтрокаПлатеж.ДоговорКонтрагента = Неопределено;
		
		Объект.СчетКонтрагента = Неопределено;
		
	Иначе
		
		СписокДоговоров = Новый СписокЗначений;
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийПлатежноеПоручениеВходящее.ПрочиеРасчетыСКонтрагентами") Тогда
			СписокДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.Прочее"));
		ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийПлатежноеПоручениеВходящее.ОплатаПокупателя") Тогда
			СписокДоговоров.Добавить(ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПокупателем"));
		КонецЕсли;
		СтруктураПараметровДляПолученияДоговора = Новый Структура;
		СтруктураПараметровДляПолученияДоговора.Вставить("СписокДопустимыхВидовДоговоров", СписокДоговоров);
		СтруктураПараметровДляПолученияДоговора.Вставить("ВалютаВзаиморасчетовДоговора",Объект.ВалютаДокумента);

		СтрокаПлатеж.ДоговорКонтрагента = уатОбщегоНазначенияТиповыеСервер.уатПолучитьДоговорПоОрганизацииИКонтрагенту(Объект.Организация, Объект.Контрагент, СтруктураПараметровДляПолученияДоговора);
		
		Объект.СчетКонтрагента = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(Объект.Контрагент, "ОсновнойБанковскийСчет");
		
	КонецЕсли;
		
	СтрокаПлатеж.СуммаПлатежа = Объект.СуммаДокумента;
	
	Если ВосстанавливатьРеквизиты Тогда
		СтрокаПлатеж.СтавкаНДС = СтараяСтавкаНДС;
		ПересчитатьСуммуНДС(СтрокаПлатеж);
	КонецЕсли;
	
	Если ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		КонтрагентНаименованиеПолное = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(Объект.Контрагент, "НаименованиеПолное");
		КонтрагентНаименование       = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(Объект.Контрагент, "Наименование");
		Объект.ПринятоОт = ?(ПустаяСтрока(КонтрагентНаименованиеПолное), КонтрагентНаименование, КонтрагентНаименованиеПолное);
	КонецЕсли;
	
КонецПроцедуры // ПриИзмененииКонтрагента

// Процедура выполняет необходимые действия при изменении договора взаиморасчетов
// с контрагентом.
//
&НаКлиенте
Процедура ПриИзмененииДоговора()
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		Объект.Организация = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(СтрокаПлатеж.ДоговорКонтрагента, "Организация");
	КонецЕсли;
	
	СтрокаПлатеж.Сделка = Неопределено;
	РасшифровкаПлатежаСделкаПриИзменении(Неопределено);
	
	Если уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(СтрокаПлатеж.ДоговорКонтрагента, "ВедениеВзаиморасчетов")
		= ПредопределенноеЗначение("Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом") Тогда
		
		СтрокаПлатеж.ВалютаВзаиморасчетов = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(СтрокаПлатеж.ДоговорКонтрагента, "ВалютаВзаиморасчетов");
		
	КонецЕсли;
	
	ПриИзмененииВалютыВзаиморасчетов();
	
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Объект.Контрагент = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(СтрокаПлатеж.ДоговорКонтрагента, "Владелец");
	КонецЕсли;
	
	УстановитьОграничениеТипаСделка();
	УстановитьВидимость();
		
КонецПроцедуры // ПриИзмененииДоговора()

&НаКлиенте
Процедура ПриИзмененииВалютыВзаиморасчетов(флТолькоИзменение = Истина)
	Если флТолькоИзменение И СтрокаПлатеж.ВалютаВзаиморасчетов = ВалютаВзаиморасчетовСтарая Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураКурсаВалютаСтарая   = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ВалютаВзаиморасчетовСтарая, Объект.Дата);
	СтруктураКурсаВзаиморасчетов = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(СтрокаПлатеж.ВалютаВзаиморасчетов, Объект.Дата);
	
	СтрокаПлатеж.КурсВзаиморасчетов      = СтруктураКурсаВзаиморасчетов.Курс;
	СтрокаПлатеж.КратностьВзаиморасчетов = СтруктураКурсаВзаиморасчетов.Кратность;
	
	СтрокаПлатеж.СуммаВзаиморасчетов     = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(СтрокаПлатеж.СуммаВзаиморасчетов,
		ВалютаВзаиморасчетовСтарая,           СтрокаПлатеж.ВалютаВзаиморасчетов,
		СтруктураКурсаВалютаСтарая.Курс,      СтрокаПлатеж.КурсВзаиморасчетов,
		СтруктураКурсаВалютаСтарая.Кратность, СтрокаПлатеж.КратностьВзаиморасчетов);
		
	РасшифровкаПлатежаСуммаВзаиморасчетов1ПриИзменении(Неопределено);
		
	ВалютаВзаиморасчетовСтарая = СтрокаПлатеж.ВалютаВзаиморасчетов;
КонецПроцедуры

// Проверяет установленные курсы валют документа перед пересчетом сумм
// Нулевые курсы устанавливаются в 1
//
&НаКлиенте
Процедура ПроверкаКурсовВалют(СтрокаПлатеж) 
	
	КурсДокумента      = ?(КурсДокумента=0,1, КурсДокумента);
	КратностьДокумента = ?(КратностьДокумента=0,1, КратностьДокумента);
	
	Если Не СтрокаПлатеж = Неопределено Тогда
		СтрокаПлатеж.КурсВзаиморасчетов      = ?(СтрокаПлатеж.КурсВзаиморасчетов=0,1,СтрокаПлатеж.КурсВзаиморасчетов);
		СтрокаПлатеж.КратностьВзаиморасчетов = ?(СтрокаПлатеж.КратностьВзаиморасчетов=0,1,СтрокаПлатеж.КратностьВзаиморасчетов);
	КонецЕсли;
	
КонецПроцедуры // ПроверкаКурсовВалют()

// Пересчитывает сумму НДС
//
// Параметры:
//  Нет.
//
&НаКлиенте
Процедура ПересчитатьСуммуНДС(СтрокаПлатеж) 
	
	ЗначениеСтавкиНДС = уатОбщегоНазначенияТиповые.уатПолучитьСтавкуНДС(СтрокаПлатеж.СтавкаНДС);
	
	Если МноговалютныйУчет
		И (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийПлатежноеПоручениеИсходящее.ОплатаПоставщику")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийПлатежноеПоручениеИсходящее.ВозвратПокупателю")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийПлатежноеПоручениеИсходящее.ПрочиеРасчетыСКонтрагентами")) Тогда
		
		СтрокаПлатеж.СуммаНДС = СтрокаПлатеж.СуммаВзаиморасчетов * ЗначениеСтавкиНДС / (100 + ЗначениеСтавкиНДС);
	Иначе
		СтрокаПлатеж.СуммаНДС = СтрокаПлатеж.СуммаПлатежа * ЗначениеСтавкиНДС / (100 + ЗначениеСтавкиНДС);
	КонецЕсли;
	
КонецПроцедуры // ПересчитатьСуммуНДС()

&НаКлиенте
Процедура УстановитьВидимость()
	
	Элементы.РасшифровкаПлатежаСтавкаНДС1.Доступность = Истина;
	Элементы.СпособРедактирования.Видимость           = Ложь;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийПлатежноеПоручениеИсходящее.ОплатаПоставщику")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийПлатежноеПоручениеИсходящее.ПрочиеРасчетыСКонтрагентами")
		ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийПлатежноеПоручениеИсходящее.ВозвратПокупателю") Тогда
		
		Элементы.ГруппаСтраницВидОперации.ТекущаяСтраница = Элементы.ГруппаСтраницВидОперации.ПодчиненныеЭлементы.ГруппаРКО;
		Если Булево(СпособРедактирования) Тогда
			Элементы.ГруппаПлатежи.ТекущаяСтраница = Элементы.ГруппаПлатежи.ПодчиненныеЭлементы.ГруппаПлатежиПоНесколькимСделкам;
		Иначе
			Элементы.ГруппаПлатежи.ТекущаяСтраница = Элементы.ГруппаПлатежи.ПодчиненныеЭлементы.ГруппаПлатежПоОднойСделке;
		КонецЕсли;
		
		Элементы.ГруппаРасшифровкаПлатежа.Заголовок = НСтр("en='Decoding of payment';ru='Расшифровка платежа'");
		Элементы.РасшифровкаПлатежаСделка.Видимость = Истина;
		Элементы.РасшифровкаПлатежаСделка1.Доступность = Истина;
		Элементы.РасшифровкаПлатежаСделка1.Видимость   = Истина;
		Элементы.ГруппаДоговор.Видимость = Истина;
		Элементы.РасшифровкаПлатежаДоговорКонтрагента.Видимость = Истина;
		Элементы.ГруппаСуммаВзаиморасчетов.Видимость = Истина;
		Элементы.РасшифровкаПлатежаГруппаСумма.Видимость = Истина;
		Элементы.ДекорацияСтавкаНДС1.Ширина = 10;
		
		Элементы.СпособРедактирования.Видимость = Истина;
		
		Элементы.РасшифровкаПлатежаСделка1.Доступность = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийПлатежноеПоручениеИсходящее.ОплатаПоставщику")
			ИЛИ Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийПлатежноеПоручениеИсходящее.ВозвратПокупателю"));
		Элементы.РасшифровкаПлатежаСделка.Доступность  = Элементы.РасшифровкаПлатежаСделка1.Доступность;
		
		Элементы.ГруппаКонтрагент.Видимость = Истина;
		Элементы.ПодотчетноеЛицо.Видимость = Ложь;
		Элементы.СчетКонтрагента.Видимость = Истина;
		Элементы.СчетПолучателя.Видимость = Ложь;
		Элементы.РасшифровкаПлатежаПодборВРасшифровку.Видимость = Истина;
		Элементы.РасшифровкаПлатежаЗаполнитьПлатежи.Видимость = Истина;
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийПлатежноеПоручениеИсходящее.ВыдачаПодотчетнику") Тогда
		Элементы.ГруппаСтраницВидОперации.ТекущаяСтраница = Элементы.ГруппаСтраницВидОперации.ПодчиненныеЭлементы.ГруппаРКО;
		Если Булево(СпособРедактирования) Тогда
			Элементы.ГруппаПлатежи.ТекущаяСтраница = Элементы.ГруппаПлатежи.ПодчиненныеЭлементы.ГруппаПлатежиПоНесколькимСделкам;
		Иначе
			Элементы.ГруппаПлатежи.ТекущаяСтраница = Элементы.ГруппаПлатежи.ПодчиненныеЭлементы.ГруппаПлатежПоОднойСделке;
		КонецЕсли;
		Элементы.ГруппаРасшифровкаПлатежа.Заголовок = НСтр("en='Issuance detail';ru='Расшифровка выдачи'");
		Элементы.РасшифровкаПлатежаСделка.Видимость = Ложь;
		Элементы.РасшифровкаПлатежаСделка1.Видимость = Ложь;
		Элементы.ГруппаДоговор.Видимость = Ложь;
		Элементы.РасшифровкаПлатежаДоговорКонтрагента.Видимость = Ложь;
		Элементы.ГруппаСуммаВзаиморасчетов.Видимость = Ложь;
		Элементы.РасшифровкаПлатежаГруппаСумма.Видимость = Ложь;
		Элементы.ДекорацияСтавкаНДС1.Ширина = 0;
		
		Элементы.СпособРедактирования.Видимость = Истина;
		Элементы.ГруппаКонтрагент.Видимость = Ложь;
		Элементы.ПодотчетноеЛицо.Видимость = Истина;
		Элементы.СчетКонтрагента.Видимость = Ложь;
		Элементы.СчетПолучателя.Видимость = Ложь;
		
		Элементы.РасшифровкаПлатежаПодборВРасшифровку.Видимость = Ложь;
		Элементы.РасшифровкаПлатежаЗаполнитьПлатежи.Видимость = Ложь;
		
	ИначеЕсли Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийПлатежноеПоручениеИсходящее.ПереводНаДругойСчет") Тогда
		Элементы.ГруппаСтраницВидОперации.ТекущаяСтраница = Элементы.ГруппаСтраницВидОперации.ПодчиненныеЭлементы.ГруппаПрочее;
		Элементы.СпособРедактирования.Видимость = Ложь;
		Элементы.ГруппаКонтрагент.Видимость = Ложь;
		Элементы.ПодотчетноеЛицо.Видимость = Ложь;
		Элементы.СчетКонтрагента.Видимость = Ложь;
		Элементы.СчетПолучателя.Видимость = Истина;
		
	Иначе
		Элементы.ГруппаСтраницВидОперации.ТекущаяСтраница = Элементы.ГруппаСтраницВидОперации.ПодчиненныеЭлементы.ГруппаПрочее;
		Элементы.СпособРедактирования.Видимость = Ложь;
		Элементы.ГруппаКонтрагент.Видимость = Истина;
		Элементы.ПодотчетноеЛицо.Видимость = Ложь;
		Элементы.СчетКонтрагента.Видимость = Истина;
		Элементы.СчетПолучателя.Видимость = Ложь;
		
		Элементы.РасшифровкаПлатежаПодборВРасшифровку.Видимость = Истина;
		Элементы.РасшифровкаПлатежаЗаполнитьПлатежи.Видимость = Истина;
		
		Элементы.ГруппаСуммаВзаиморасчетов.Видимость = Ложь;
		Элементы.РасшифровкаПлатежаГруппаСумма.Видимость = Ложь;
		
	КонецЕсли;
	
	Если СпособРедактирования = 0 Тогда
		Платеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
		Если Платеж <> Неопределено Тогда
			Если ЗначениеЗаполнено(Платеж.ДоговорКонтрагента) И
				(уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(Платеж.ДоговорКонтрагента, "ВедениеВзаиморасчетов") = ПредопределенноеЗначение("Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам")
				ИЛИ уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(Платеж.ДоговорКонтрагента, "ВедениеВзаиморасчетов") = ПредопределенноеЗначение("Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоНакладным")
				ИЛИ уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(Платеж.ДоговорКонтрагента, "ВедениеВзаиморасчетов") = ПредопределенноеЗначение("Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказамНаТС")) Тогда
				
				Элементы.РасшифровкаПлатежаСделка1.АвтоОтметкаНезаполненного = Истина;
			Иначе
				Элементы.РасшифровкаПлатежаСделка1.ОтметкаНезаполненного = Ложь;
				Элементы.РасшифровкаПлатежаСделка1.АвтоОтметкаНезаполненного = Ложь;
			КонецЕсли;
		Иначе
			Элементы.РасшифровкаПлатежаСделка1.ОтметкаНезаполненного = Ложь;
			Элементы.РасшифровкаПлатежаСделка1.АвтоОтметкаНезаполненного = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	//ВалютаДенежныхСредств = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(Объект.БанковскийСчет, "ВалютаДенежныхСредств");
	ВалютаДенежныхСредств = Объект.ВалютаДокумента;
	Элементы.РасшифровкаПлатежаСуммаПлатежа.Заголовок = НСтр("en='Sum';ru='Сумма'") + " (" + ВалютаДенежныхСредств + ")";
	//Элементы.РасшифровкаПлатежаСуммаНДС.Заголовок = "Сумма НДС" + " (" + ВалютаДенежныхСредств + ")";
	//Элементы.РасшифровкаПлатежаСуммаНДС1.Заголовок = "Сумма НДС" + " (" + ВалютаДенежныхСредств + ")";
	
	ИнвертироватьСуммы = (СпособРедактирования = 0 И уатОбщегоНазначения_проф.ЕстьРасчетыСКонтрагентами(Объект.ВидОперации));
	
КонецПроцедуры // УстановитьВидимость()

// Процедура рассчитывает сумму платежа по сумме взаиморасчетов.
//
&НаКлиенте
Процедура РассчитатьСуммуПлатежа()
	
	ПроверкаКурсовВалют(СтрокаПлатеж);
	
	ВалютаВзаиморасчетов = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(СтрокаПлатеж.ДоговорКонтрагента, "ВалютаВзаиморасчетов");
	
	Если ВалютаВзаиморасчетов = Объект.ВалютаДокумента Тогда
	Иначе
		СтрокаПлатеж.СуммаПлатежа = 0;
	КонецЕсли;
	
	Если Объект.РасшифровкаПлатежа.Количество()=1 Тогда
		СтрокаПлатеж.СуммаПлатежа = Объект.СуммаДокумента;
	КонецЕсли;
	
	РассчитатьСуммуВзаиморасчетовПоСуммеПлатежа(СтрокаПлатеж);
	ПересчитатьСуммуНДС(СтрокаПлатеж);
	
КонецПроцедуры // РассчитатьСуммуПлатежа()

&НаСервере
Процедура УстановитьОтборПоВладельцуСчетаОрганизации()
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		СвязьПараметраВыбора = Новый Массив;
		Элементы.БанковскийСчет.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязьПараметраВыбора);
	Иначе
		Связь = Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Организация", РежимИзмененияСвязанногоЗначения.Очищать);
		
		СвязьПараметраВыбора = Новый Массив;
		СвязьПараметраВыбора.Добавить(Связь);
		
		Элементы.БанковскийСчет.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязьПараметраВыбора);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоВладельцуСчетаПолучателя()
	
	Если Не ЗначениеЗаполнено(Объект.Организация) Тогда
		СвязиПараметраВыбора = Новый Массив;
		Элементы.СчетПолучателя.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметраВыбора);
	Иначе
		СвязиПараметраВыбора = Новый Массив;
		Связь = Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Организация", РежимИзмененияСвязанногоЗначения.Очищать);
		СвязиПараметраВыбора.Добавить(Связь);
		
		Элементы.СчетПолучателя.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязиПараметраВыбора);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборПоВладельцуСчетаКонтрагента()
	
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		СвязьПараметраВыбора = Новый Массив;
		Элементы.Контрагент.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязьПараметраВыбора);
	Иначе 
		Связь = Новый СвязьПараметраВыбора("Отбор.Владелец", "Объект.Контрагент", РежимИзмененияСвязанногоЗначения.Очищать);
		
		СвязьПараметраВыбора = Новый Массив;
		СвязьПараметраВыбора.Добавить(Связь);
		
		Элементы.Контрагент.СвязиПараметровВыбора = Новый ФиксированныйМассив(СвязьПараметраВыбора);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоВыбораСделки(Элемент, СтандартнаяОбработка)
	
	Если Не ЗначениеЗаполнено(СтрокаПлатеж.ДоговорКонтрагента) Тогда 
		СтандартнаяОбработка = Ложь;
		
		Если СпособРедактирования = 0 Тогда 
			ПолеДанных = "Элементы.РасшифровкаПлатежа.ТекущиеДанные.Сделка";
		Иначе 
			ТекСтрока = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
			Если Не ТекСтрока = Неопределено Тогда 
				ИндексСтроки = Объект.РасшифровкаПлатежа.НайтиПоИдентификатору(ТекСтрока.ПолучитьИдентификатор()).НомерСтроки-1;
				ПолеДанных = "Объект.РасшифровкаПлатежа["+Формат(ИндексСтроки,"ЧГ=0")+"].Сделка";
			Иначе 
				ПолеДанных = "Объект.РасшифровкаПлатежа";
			КонецЕсли;
		КонецЕсли;
		
		ТекстНСТР = НСтр("en='You must select the contract of counterparty.';ru='Необходимо выбрать договор контрагента.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР,, ПолеДанных);
		
		Возврат;
	КонецЕсли;
	
	// Тип выбираемого значения зависит от договора.
	ВидДоговораКонтрагента = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(СтрокаПлатеж.ДоговорКонтрагента, "ВидДоговора");
	Если ВидДоговораКонтрагента = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.Прочее") Тогда
		СтандартнаяОбработка = Ложь;
		ТекстНСТР = НСтр("en='Under contracts with  type ""other"", there are no payments on deals!';ru='По договорам с видом ""Прочее"" не ведутся взаиморасчеты по сделкам!'");
		ПоказатьПредупреждение(Неопределено, ТекстНСТР);
		Возврат;
	КонецЕсли;
	
	//СтандартнаяОбработка = Ложь;
	//
	//ФормаВыбора = ПолучитьФорму("Документ.уатСчетНаОплатуПоставщика.ФормаВыбора",, Элемент);
	//ЭлементОтбора                  = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	//ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("ДоговорКонтрагента");
	//ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
	//ЭлементОтбора.ПравоеЗначение   = СтрокаПлатеж.ДоговорКонтрагента;
	//ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	//ЭлементОтбора.Использование    = Истина;
	//
	//ФормаВыбора.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОграничениеТипаСделка()
	ВедениеВзаиморасчетов = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(СтрокаПлатеж.ДоговорКонтрагента, "ВедениеВзаиморасчетов");
	Если ВедениеВзаиморасчетов = ПредопределенноеЗначение("Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоНакладным") Тогда
		Элементы.РасшифровкаПлатежаСделка.ОграничениеТипа = Новый ОписаниеТипов("ДокументСсылка.уатПоступлениеТоваровУслуг");
		Элементы.РасшифровкаПлатежаСделка1.ОграничениеТипа = Новый ОписаниеТипов("ДокументСсылка.уатПоступлениеТоваровУслуг");
		
		мсвПараметрыВыбора = Новый Массив;
		мсвПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.ДоговорКонтрагента", СтрокаПлатеж.ДоговорКонтрагента));
		Элементы.РасшифровкаПлатежаСделка.ПараметрыВыбора = Новый ФиксированныйМассив(мсвПараметрыВыбора);
		Элементы.РасшифровкаПлатежаСделка1.ПараметрыВыбора = Новый ФиксированныйМассив(мсвПараметрыВыбора);
		
	ИначеЕсли ВедениеВзаиморасчетов = ПредопределенноеЗначение("Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам") Тогда
		Элементы.РасшифровкаПлатежаСделка.ОграничениеТипа = Новый ОписаниеТипов("ДокументСсылка.уатСчетНаОплатуПоставщика");
		Элементы.РасшифровкаПлатежаСделка1.ОграничениеТипа = Новый ОписаниеТипов("ДокументСсылка.уатСчетНаОплатуПоставщика");
		
		мсвПараметрыВыбора = Новый Массив;
		мсвПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.ДоговорКонтрагента", СтрокаПлатеж.ДоговорКонтрагента));
		Элементы.РасшифровкаПлатежаСделка.ПараметрыВыбора = Новый ФиксированныйМассив(мсвПараметрыВыбора);
		Элементы.РасшифровкаПлатежаСделка1.ПараметрыВыбора = Новый ФиксированныйМассив(мсвПараметрыВыбора);
		
	ИначеЕсли ВедениеВзаиморасчетов = ПредопределенноеЗначение("Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказамНаТС") Тогда
		Элементы.РасшифровкаПлатежаСделка.ОграничениеТипа = Новый ОписаниеТипов("ДокументСсылка.уатЗаказГрузоотправителя");
		Элементы.РасшифровкаПлатежаСделка1.ОграничениеТипа = Новый ОписаниеТипов("ДокументСсылка.уатЗаказГрузоотправителя");
		
		//мсвЗаказыДляОтбора = уатОбщегоНазначения_проф.ПолучитьЗаказыПоДоговору(СтрокаПлатеж.ДоговорКонтрагента, Ложь);
		//мсвПараметрыВыбора = Новый Массив;
		// мсвПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.Ссылка", мсвЗаказыДляОтбора));
		//Элементы.РасшифровкаПлатежаСделка.ПараметрыВыбора = Новый ФиксированныйМассив(мсвПараметрыВыбора);
		//Элементы.РасшифровкаПлатежаСделка1.ПараметрыВыбора = Новый ФиксированныйМассив(мсвПараметрыВыбора);
		мсвПараметрыВыбора = Новый Массив;
		мсвПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.ДоговорКонтрагента", СтрокаПлатеж.ДоговорКонтрагента));
		Элементы.РасшифровкаПлатежаСделка.ПараметрыВыбора = Новый ФиксированныйМассив(мсвПараметрыВыбора);
		Элементы.РасшифровкаПлатежаСделка1.ПараметрыВыбора = Новый ФиксированныйМассив(мсвПараметрыВыбора);
		
	Иначе
		Элементы.РасшифровкаПлатежаСделка.ОграничениеТипа = Новый ОписаниеТипов("Неопределено");
		Элементы.РасшифровкаПлатежаСделка1.ОграничениеТипа = Новый ОписаниеТипов("Неопределено");
		
		мсвПараметрыВыбора = Новый Массив;
		мсвПараметрыВыбора.Добавить(Новый ПараметрВыбора("Отбор.ДоговорКонтрагента", СтрокаПлатеж.ДоговорКонтрагента));
		Элементы.РасшифровкаПлатежаСделка.ПараметрыВыбора = Новый ФиксированныйМассив(мсвПараметрыВыбора);
		Элементы.РасшифровкаПлатежаСделка1.ПараметрыВыбора = Новый ФиксированныйМассив(мсвПараметрыВыбора);
		
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СформироватьСтрокуНДС(ТекстНДС)
	
	ТабНДС = Объект.РасшифровкаПлатежа.Выгрузить();
	ТабНДС.Свернуть("СтавкаНДС","СуммаНДС");
	
	Для Каждого СтрокаНДС Из ТабНДС Цикл
		ТекстНДС = ТекстНДС + ?(ПустаяСтрока(ТекстНДС), "", ", ");
		Если Не ЗначениеЗаполнено(СтрокаНДС.СтавкаНДС) Или СтрокаНДС.СтавкаНДС = Перечисления.СтавкиНДС.БезНДС Тогда
			ТекстНДС = ТекстНДС + "Без налога (НДС)";
		Иначе
			ТекстНДС = ТекстНДС + "НДС(" + СтрокаНДС.СтавкаНДС + ") " + Формат(СтрокаНДС.СуммаНДС, "ЧЦ=15; ЧДЦ=2; ЧРД=-; ЧН=0-00; ЧГ=");
		КонецЕсли;
		
	КонецЦикла;
	
	Если ТабНДС.Итог("СуммаНДС") > 0 Тогда
		ТекстНДС = "В т.ч. " + ТекстНДС;
	КонецЕсли;
	
КонецПроцедуры

// Процедура выполняет заполнение реквизита Контрагент значением по умолчанию.
//
&НаКлиенте
Процедура ЗаполнитьКонтрагента()
	
	Если ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Возврат;
	КонецЕсли;
	СписокЗначений = Новый СписокЗначений;
	ВремКонтрагент = Неопределено;
	
	Если Не ЗначениеЗаполнено(Объект.Контрагент) Тогда
		Объект.Контрагент = ВремКонтрагент;
		
		// проставим основной договор контрагента
		ПриИзмененииКонтрагента();
		ПриИзмененииДоговора();
		УстановитьФокус();
		
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьКонтрагента()

&НаКлиенте
Процедура ОбработкаСобытияЗаполнениеПлатежей(ТаблицаПлатежей, Параметр2) Экспорт 
	
	Объект.РасшифровкаПлатежа.Очистить();
	Если Не ТаблицаПлатежей = Неопределено Тогда 
		Для Каждого ТекСтрока Из ТаблицаПлатежей Цикл 
			НовСтрока = Объект.РасшифровкаПлатежа.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, ТекСтрока);
		КонецЦикла;
	КонецЕсли;
	
	Если Объект.РасшифровкаПлатежа.Количество()=0 Тогда
		НоваяСтрока = Объект.РасшифровкаПлатежа.Добавить();
	КонецЕсли;
	
	Объект.СуммаДокумента = Объект.РасшифровкаПлатежа.Итог("СуммаПлатежа");
	РассчитатьИтоги();
	
	Элементы.РасшифровкаПлатежа.ТекущаяСтрока = Объект.РасшифровкаПлатежа[0].ПолучитьИдентификатор();
	СтрокаПлатеж = Элементы.РасшифровкаПлатежа.ТекущиеДанные;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемВопрос(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.ОК Тогда
		флВопросЗакрытиеФормы = Ложь;
		Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуПлатежаПоСуммеВзаиморасчетов(ТекСтрока)
	Если ТекСтрока.ВалютаВзаиморасчетов = Объект.ВалютаДокумента Тогда
		ТекСтрока.СуммаПлатежа = ТекСтрока.СуммаВзаиморасчетов;
	Иначе
		СтруктураКурсаДокумента = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
		ТекСтрока.СуммаПлатежа = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаВзаиморасчетов,
			ТекСтрока.ВалютаВзаиморасчетов, Объект.ВалютаДокумента,
			ТекСтрока.КурсВзаиморасчетов, СтруктураКурсаДокумента.Курс,
			ТекСтрока.КратностьВзаиморасчетов, СтруктураКурсаДокумента.Кратность);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуВзаиморасчетовПоСуммеПлатежа(ТекСтрока)
	Если ТекСтрока.ВалютаВзаиморасчетов = Объект.ВалютаДокумента Тогда
		 ТекСтрока.СуммаВзаиморасчетов = ТекСтрока.СуммаПлатежа;
	Иначе
		СтруктураКурсаДокумента = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(Объект.ВалютаДокумента, Объект.Дата);
		ТекСтрока.СуммаВзаиморасчетов = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.СуммаПлатежа,
			Объект.ВалютаДокумента, ТекСтрока.ВалютаВзаиморасчетов,
			СтруктураКурсаДокумента.Курс, ТекСтрока.КурсВзаиморасчетов,
			СтруктураКурсаДокумента.Кратность, ТекСтрока.КратностьВзаиморасчетов);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометкуОперации()
	
	Элементы.ФормаОперацияОплатаПоставщику.Пометка            = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийПлатежноеПоручениеИсходящее.ОплатаПоставщику"));
	Элементы.ФормаОперацияПрочиеРасчетыСКонтрагентами.Пометка = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийПлатежноеПоручениеИсходящее.ПрочиеРасчетыСКонтрагентами"));
	Элементы.ФормаОперацияРасходДенежныхСредствПрочее.Пометка = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийПлатежноеПоручениеИсходящее.РасходДенежныхСредствПрочее"));
	Элементы.ФормаОперацияВыдачаПодотчетнику.Пометка          = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийПлатежноеПоручениеИсходящее.ВыдачаПодотчетнику"));
	Элементы.ФормаОперацияВозвратПокупателю.Пометка           = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийПлатежноеПоручениеИсходящее.ВозвратПокупателю"));
	Элементы.ФормаОперацияПереводНаДругойСчет.Пометка         = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийПлатежноеПоручениеИсходящее.ПереводНаДругойСчет"));
	
КонецПроцедуры

#КонецОбласти

#Область ИсполняемаяЧастьМодуля

ОтветПередЗаписью = Ложь;

#КонецОбласти

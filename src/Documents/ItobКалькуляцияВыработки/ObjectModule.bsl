#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ОчиститьДанныеДокумента()

	ПодвижныйОбъект = Неопределено;
	ЕстьДанныеПоТопливу = Ложь;
	Заправлено = 0;    
	Слито = 0;
	ТопливоНачало = 0; 
	ТопливоКонец = 0;
	Израсходовано = 0;
	ИзрасходованоВДвижении = 0;
	ИзрасходованоВПростое = 0;
	Выработка.Очистить();
	ИнтервалыДвижения.Очистить();	
	ЗафиксированныеИнтервалыНарушенийВождения.Очистить();
	ИнтервалыДвиженияНарушенийВождения.Очистить();
	
КонецПроцедуры

Процедура ЗаполнитьДанныеДокумента() Экспорт

	ОчиститьДанныеДокумента();
	
	ПодвижныйОбъект = ItobКалькуляцияПараметровВыработки.ПолучитьПодвижныйОбъект(Терминал,Дата);
	
	Если ЗначениеЗаполнено(ПодвижныйОбъект) Тогда
		// Выработка
		ТаблицаВыработки = ItobКалькуляцияПараметровВыработки.ПолучитьВыработкуПоТерминалу(Терминал, НачалоДня(Дата), КонецДня(Дата)+1);
		Для Каждого СтрокаТабВыработки Из ТаблицаВыработки Цикл
			ЗаполнитьЗначенияСвойств(Выработка.Добавить(), СтрокаТабВыработки);				
		КонецЦикла;			
		
		// Интервалы движения
		ТаблицаИнтервалов = Неопределено;		
		ДанныеПоИнтерваламДвижения = ItobКалькуляцияПараметровВыработки.ПолучитьДанныеПоИнтерваламДвижения(
			Терминал, НачалоДня(Дата), КонецДня(Дата)+1, ТаблицаИнтервалов);
		Для Каждого СтрокаПоИнтерваламДвижения Из ДанныеПоИнтерваламДвижения Цикл
			ЗаполнитьЗначенияСвойств(ИнтервалыДвижения.Добавить(), СтрокаПоИнтерваламДвижения);				
		КонецЦикла;
		
		// Расход топлива
		ИмяСправочникаТС = ItobВызовСервераПовтИсп.ПолучитьИмяОбъекта("ТранспортныеСредства");
		Если Не ПустаяСтрока(ИмяСправочникаТС) И ТипЗнч(ПодвижныйОбъект) = Тип("СправочникСсылка."+ИмяСправочникаТС) Тогда
			ДанныеПоРасходуТоплива = ItobОбработкаДанныхТопливоВызовСервера.ПолучитьДанныеПоРасходуТоплива(ПодвижныйОбъект, Терминал, НачалоДня(Дата), КонецДня(Дата), ТаблицаИнтервалов);
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, ДанныеПоРасходуТоплива);
			Для каждого СтрВыработкиТопливо Из ДанныеПоРасходуТоплива.ДанныеВыработки Цикл
				ЗаполнитьЗначенияСвойств(Выработка.Добавить(), СтрВыработкиТопливо);			
			КонецЦикла;			
		КонецЕсли;
		
		Если ОбщегоНазначения.ПодсистемаСуществует("ItobЦентрСпутниковогоМониторинга.БезопасностьВождения") Тогда
			МодульБезопасностьВождения = ОбщегоНазначения.ОбщийМодуль("ItobБезопасностьВождения");
			МодульБезопасностьВождения.ЗаполнитьНарушения(ЗафиксированныеИнтервалыНарушенийВождения,
														  ИнтервалыДвиженияНарушенийВождения,
														  ПодвижныйОбъект,
														  НачалоДня(Дата), 
														  КонецДня(Дата));		
		КонецЕсли;		
	КонецЕсли;	

КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	
	Перем НеЗаполнитьДанныеДокумента;
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	ДополнительныеСвойства.Вставить("ЭтоНовый",    ЭтоНовый());
	ДополнительныеСвойства.Вставить("РежимЗаписи", РежимЗаписи);
	
	Если РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		Если НЕ ДополнительныеСвойства.Свойство("НеЗаполнитьДанныеДокумента",НеЗаполнитьДанныеДокумента) Тогда
			НеЗаполнитьДанныеДокумента = Ложь;		
		КонецЕсли;
				
		Если НЕ НеЗаполнитьДанныеДокумента Тогда
			ЗаполнитьДанныеДокумента();			
		КонецЕсли;		
		
	ИначеЕсли РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения Тогда
		ОчиститьДанныеДокумента();
	КонецЕсли;
	
КонецПроцедуры

// Процедура - обработчик события ОбработкаПроведения объекта.
//
Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	
	Движения.ItobВыработка.Записывать = Истина;
	Движения.ItobИнтервалыДвижения.Записывать = Истина;
	Движения.ItobДвижениеТоплива.Записывать = Истина;
	Если ОбщегоНазначения.ПодсистемаСуществует("ItobЦентрСпутниковогоМониторинга.БезопасностьВождения") Тогда
		Движения.ItobЗафиксированныеИнтервалыНарушенийВождения.Записывать = Истина;
		Движения.ItobИнтервалыДвиженияНарушенийВождения.Записывать = Истина;
	КонецЕсли;
	ИмяСправочникаТС = ItobВызовСервераПовтИсп.ПолучитьИмяОбъекта("ТранспортныеСредства");
	
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ItobВыработка");
	ЭлементБлокировки.УстановитьЗначение("Объект", ПодвижныйОбъект);
	ЭлементБлокировки.УстановитьЗначение("Терминал", Терминал);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ItobИнтервалыДвижения");
	ЭлементБлокировки.УстановитьЗначение("Объект", ПодвижныйОбъект);
	ЭлементБлокировки.УстановитьЗначение("Терминал", Терминал);
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	
	Если Не ПустаяСтрока(ИмяСправочникаТС) И ТипЗнч(ПодвижныйОбъект) = Тип("СправочникСсылка."+ИмяСправочникаТС) Тогда
		ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.ItobДвижениеТоплива");
		ЭлементБлокировки.УстановитьЗначение("Объект", ПодвижныйОбъект);
		ЭлементБлокировки.УстановитьЗначение("Терминал", Терминал);
		ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;	
	КонецЕсли;	
	
	ЭлементБлокировки = Блокировка.Добавить("РегистрСведений.ItobПериодыРасчетаВыработки");
	
	Блокировка.Заблокировать();
	
	Для каждого СтрокаВыработки Из Выработка Цикл
		Движение  = Движения.ItobВыработка.Добавить();
		Движение.Период            = КонецДня(Дата);
		Движение.Объект            = ПодвижныйОбъект;
		Движение.Терминал          = Терминал;
		Движение.ПараметрВыработки = СтрокаВыработки.ПараметрВыработки;
		Движение.Значение          =  СтрокаВыработки.Значение;	
	КонецЦикла;
	
	Для каждого СтрокаИнтервалыДвижения Из ИнтервалыДвижения Цикл
		Движение  = Движения.ItobИнтервалыДвижения.Добавить();
		ЗаполнитьЗначенияСвойств(Движение, СтрокаИнтервалыДвижения);
		Движение.Период = КонецДня(Дата);			
		Движение.Объект = ПодвижныйОбъект;
		Движение.Терминал  = Терминал;		
	КонецЦикла;
	
	Если Не ПустаяСтрока(ИмяСправочникаТС) И ТипЗнч(ПодвижныйОбъект) = Тип("СправочникСсылка."+ИмяСправочникаТС) Тогда
		Если ЕстьДанныеПоТопливу Тогда
			Движение = Движения.ItobДвижениеТоплива.Добавить();
			Движение.Период 		= КонецДня(Дата);
			Движение.Объект 		= ПодвижныйОбъект;
			Движение.Терминал   	= Терминал;
			Движение.Заправлено 	= Заправлено;
			Движение.Слито      	= Слито;
			Движение.ТопливоНачало 	= ТопливоНачало;
			Движение.ТопливоКонец   = ТопливоКонец;
			Движение.Израсходовано 	= Израсходовано;
			Движение.ИзрасходованоВДвижении = ИзрасходованоВДвижении;
			Движение.ИзрасходованоВПростое 	= ИзрасходованоВПростое;	
		КонецЕсли;
	КонецЕсли;
	
	Если ОбщегоНазначения.ПодсистемаСуществует("ItobЦентрСпутниковогоМониторинга.БезопасностьВождения") Тогда
		ЗаполнитьДвиженияПоНарушениямВождения();
	КонецЕсли;
	
	// Отразим факт проведения в регистре сведений "ItobПериодыРасчетаВыработки"
	НовЗапись = РегистрыСведений.ItobПериодыРасчетаВыработки.СоздатьМенеджерЗаписи();
	НовЗапись.ПериодДата = Дата;
	НовЗапись.Терминал = Терминал;
	НовЗапись.ВыработкаПодсчитана = Истина;
	НовЗапись.Записать();					
	
КонецПроцедуры
	
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

Процедура ЗаполнитьДвиженияПоНарушениямВождения()

	ТранспортноеСредство = Неопределено;
	Водитель = Неопределено;
	ИспользоватьОбработчикЦСМ = Истина;
	МодульБезопасностьВожденияПереопределяемый = ОбщегоНазначения.ОбщийМодуль("ItobБезопасностьВожденияПереопределяемый");
	МодульБезопасностьВожденияПереопределяемый.ЗаполнитьТСИВодителяПоДаннымКалькуляцииВыработки(ЭтотОбъект, 
																								ТранспортноеСредство, 
																								Водитель,
																								ИспользоватьОбработчикЦСМ);																								  
	Если ИспользоватьОбработчикЦСМ Тогда
		ЗаполнитьТСИВодителяПоТиповойЛогике(ПодвижныйОбъект, ТранспортноеСредство, Водитель);	
	КонецЕсли; 
	
	Для каждого СтрокаТаблицы Из ЗафиксированныеИнтервалыНарушенийВождения Цикл
	 	Движение = Движения.ItobЗафиксированныеИнтервалыНарушенийВождения.Добавить();		
		ЗаполнитьЗначенияСвойств(Движение, СтрокаТаблицы);
		
		Движение.Объект = ПодвижныйОбъект;
		Движение.ТранспортноеСредство = ТранспортноеСредство;
		Движение.Водитель = Водитель;
		Движение.Терминал = Терминал;		
	КонецЦикла;
		
	Для каждого СтрокаТаблицы Из ИнтервалыДвиженияНарушенийВождения Цикл
	 	Движение = Движения.ItobИнтервалыДвиженияНарушенийВождения.Добавить();		
		ЗаполнитьЗначенияСвойств(Движение, СтрокаТаблицы);
		
		Движение.Объект = ПодвижныйОбъект;
		Движение.ТранспортноеСредство = ТранспортноеСредство;
		Движение.Водитель = Водитель;
		Движение.Терминал = Терминал;		
	КонецЦикла;
	
КонецПроцедуры

Процедура ЗаполнитьТСИВодителяПоТиповойЛогике(ПодвижныйОбъект, ТранспортноеСредство, Водитель)
	
	ТранспортноеСредство = Неопределено;
	Водитель = Неопределено;
	
	Если ТипЗнч(ПодвижныйОбъект) = ItobВызовСервераПовтИсп.ТипПоИмени("ТранспортныеСредства") Тогда
		ТранспортноеСредство = ПодвижныйОбъект;
		
		Попытка
			Водитель = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ТранспортноеСредство, "Водитель");	
		Исключение
		    ТекстОшибки = "Не удалось получить водителя по ссылке на транспортное средство. 
					 	  | Требуется отразить связь между водителем и ТС в переопределяемом модуле безопасности вождения и отключить использование стандартного обработчика ЦСМ";
			
			ЗаписьЖурналаРегистрации("Безопасность вождения: неверная настройка переопределяемого модуля",
									 УровеньЖурналаРегистрации.Ошибка,,,
									 ТекстОшибки);
			
			ВызватьИсключение ТекстОшибки;
		КонецПопытки; 
	
	ИначеЕсли ТипЗнч(ПодвижныйОбъект) = ItobВызовСервераПовтИсп.ТипПоИмени("Водители") Тогда
		Водитель = ПодвижныйОбъект;
		
		Попытка
			ТранспортноеСредство = ПодобратьПодходящееТСПоВодителю(Водитель);
		Исключение
		    ТекстОшибки = "Не удалось получить транспортное средство по ссылке на водителя. 
					 	  | Требуется отразить связь между водителем и ТС в переопределяемом модуле безопасности вождения и отключить использование стандартного обработчика ЦСМ";
			
			ЗаписьЖурналаРегистрации("Безопасность вождения: неверная настройка переопределяемого модуля",
									 УровеньЖурналаРегистрации.Ошибка,,,
									 ТекстОшибки);
			
			ВызватьИсключение ТекстОшибки;
		КонецПопытки; 
	КонецЕсли;
	
КонецПроцедуры

Функция ПодобратьПодходящееТСПоВодителю(Водитель)
	
	ТранспортноеСредство = Неопределено;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Водитель", Водитель);
	Запрос.Текст = 
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	ItobТранспортныеСредства.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.ItobТранспортныеСредства КАК ItobТранспортныеСредства
	|ГДЕ
	|	ItobТранспортныеСредства.Водитель = &Водитель
	|	И НЕ ItobТранспортныеСредства.ПометкаУдаления
	|
	|УПОРЯДОЧИТЬ ПО
	|	ItobТранспортныеСредства.Наименование";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ТранспортноеСредство = Выборка.Ссылка;	
	КонецЕсли;  
	
	
	Возврат ТранспортноеСредство;
	
КонецФункции
 
#КонецОбласти 

#КонецЕсли

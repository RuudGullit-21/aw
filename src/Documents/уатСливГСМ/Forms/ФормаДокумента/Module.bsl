
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	уатЗащищенныеФункцииСервер.уатДокументФормаЭлементаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, Объект, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// заполнение при вводе из путевого листа
	Если Параметры.Свойство("ДобавлениеСливаИзПЛ") И Параметры.ДобавлениеСливаИзПЛ = Истина Тогда
		ДобавлениеСливаИзПЛ = Истина;
		
		ДокОбъект = РеквизитФормыВЗначение("Объект");
		
		ДокОбъект.Заполнить(Параметры.ПутевойЛист);
		Если Параметры.Свойство("СливКопирование") И ТипЗнч(Параметры.СливКопирование) = Тип("Структура") Тогда
			ЗаполнитьЗначенияСвойств(ДокОбъект, Параметры.СливКопирование);
			ДокОбъект.ПутевойЛист = Параметры.ПутевойЛист;
		КонецЕсли;
		
		ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
	КонецЕсли;
	
	// заполнение при редактировании из путевого листа
	Если Параметры.Свойство("РедактированиеСливаИзПЛ") И Параметры.РедактированиеСливаИзПЛ = Истина Тогда
		РедактированиеСливаИзПЛ = Истина;
	КонецЕсли;
	
	// Установка реквизитов формы.
	ДатаДокумента = Объект.Дата;
	Если НЕ ЗначениеЗаполнено(ДатаДокумента) Тогда
		ДатаДокумента = ТекущаяДата();
	КонецЕсли;
	ДатаДокумента = уатОбщегоНазначения.уатДатаБезСекунд(ДатаДокумента);
	
	// Заполнение реквизитов при создании нового документа
	Если Параметры.Ключ.Пустая() Тогда
		
		// Заполнение АЗС при создании нового документа из формы списка
		Если Параметры.Основание = Неопределено
			И Объект.ВидОперации = Перечисления.уатВидыОперацийСливГСМ.НаСклад
			И НЕ ЗначениеЗаполнено(Объект.АЗС) Тогда
			
			СтруктураОбъектовНастроек = Новый Структура;
			СтруктураОбъектовНастроек.Вставить("Организация", Объект.Организация);
			СтруктураОбъектовНастроек.Вставить("Подразделение", Объект.Подразделение);
			АЗСПоУмолчанию = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек,
				ПланыВидовХарактеристик.уатПраваИНастройки.ОсновнаяАЗС);
			Если ТипЗнч(АЗСПоУмолчанию) = Тип("СправочникСсылка.уатАЗС") И АЗСПоУмолчанию.ЭтоАЗССклад Тогда
				Объект.АЗС = АЗСПоУмолчанию;
			КонецЕсли;
		КонецЕсли;
		
		Если (Параметры.Основание = Неопределено ИЛИ ТипЗнч(Параметры.Основание) <> Тип("ДокументСсылка.уатИнвентаризацияГСМвТС"))
			И НЕ ЗначениеЗаполнено(Объект.АЗС) Тогда
			Объект.АЗС = Справочники.уатАЗС.ПустаяСсылка();
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ТСПриемник.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.уатТС");
	Элементы.ТСПриемник.ДоступныеТипы   = Новый ОписаниеТипов("СправочникСсылка.уатТС");
	Элементы.АЗС.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.уатАЗС");
	Элементы.АЗС.ДоступныеТипы   = Новый ОписаниеТипов("СправочникСсылка.уатАЗС");
	
	ОстатокГСМвТС = ПолучитьОстатокГСМнсТС(Объект.ТС, Объект.ГСМ, Объект.Дата);
	
	Если Объект.ПутевойЛист.Рассчитан Или Объект.ПутевойЛистПриемник.Рассчитан Тогда 
		ТолькоПросмотр = Истина;
	КонецЕсли;
	
	уатОбщегоНазначенияСервер.НастроитьПолеПодразделение(Элементы.Подразделение, "Объект.Организация");
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	уатЗащищенныеФункцииКлиент.уатДокументФормаЭлементаПриОткрытии(Отказ, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	УстановитьВидимостьОрганичениеРеквизитов();
	ОбновитьПредставлениеМоделиТСПриемник();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	// Контроль вызываем здесь, а не в ОбработкаПроверкиЗаполненияНаСервере, поскольку тот не срабатывает
	// при записи. Режим проведения устанавливается программно позже - в модуле объекта в процедуре ПередЗаписью
	Если флПроверкаПередЗакрытием <> Неопределено Тогда
		Отказ = Отказ ИЛИ флПроверкаПередЗакрытием.Отказ;
		Для Каждого ТекСообщение Из флПроверкаПередЗакрытием.Сообщения Цикл
			уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекСообщение);
		КонецЦикла;
		флПроверкаПередЗакрытием = Неопределено;
	ИначеЕсли ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Запись
		ИЛИ ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Проведение Тогда
		
		// Проверим не превышает ли заправка уровень топлива в баке
		мсвСообщениеПревышение = Новый Массив;
		ПроверитьПревышениеУровняТопливаВБаке(Отказ, Ложь, мсвСообщениеПревышение);
		Если мсвСообщениеПревышение.Количество() > 0 И РедактированиеСливаИзПЛ Тогда
			Оповестить("ПревышениеУровняТопливаВБаке", мсвСообщениеПревышение[0]);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	Если ДобавлениеСливаИзПЛ Тогда
		Оповестить("ДобавлениеСливаИзПЛ", Объект.Ссылка);
	КонецЕсли;
	Если РедактированиеСливаИзПЛ Тогда
		Оповестить("РедактированиеСливаИзПЛ", Объект.Ссылка);
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если флВопросЗакрытиеФормы Тогда
		Отказ = Истина;
		Оповещ = Новый ОписаниеОповещения("ПередЗакрытиемВопрос", ЭтотОбъект);
		ПоказатьВопрос(Оповещ, "При проверке корректности заполнения документа возникли предупреждения!
			|Продолжить закрытие формы?", РежимДиалогаВопрос.ОКОтмена);
	ИначеЕсли Модифицированность И НЕ Объект.Ссылка.Пустая() Тогда
		флОтказ = Ложь;
		мсвСообщения = Новый Массив;
		ПроверитьПревышениеУровняТопливаВБаке(флОтказ, Истина, мсвСообщения);
		флПроверкаПередЗакрытием = Новый Структура("Отказ, Сообщения", флОтказ, мсвСообщения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемВопрос(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.ОК Тогда
		флВопросЗакрытиеФормы = Ложь;
		Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийСливГСМ.НаСклад")
			Или Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийСливГСМ.НаАЗС") Тогда 
		Объект.АЗС = ПредопределенноеЗначение("Справочник.уатАЗС.ПустаяСсылка");
		Объект.ПутевойЛистПриемник = Неопределено;
	Иначе 
		Объект.АЗС = ПредопределенноеЗначение("Справочник.уатТС.ПустаяСсылка");
	КонецЕсли;
	
	УстановитьВидимостьОрганичениеРеквизитов();
	
КонецПроцедуры

&НаКлиенте
Процедура ТСПриИзменении(Элемент)
	
	Объект.ГСМ = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.ТС, "Модель"), "ОсновноеТопливо");
	ОстатокГСМвТС = ПолучитьОстатокГСМнсТС(Объект.ТС, Объект.ГСМ, Объект.Дата);
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийСливГСМ.НаСклад") Тогда
		Объект.Плотность = уатОбщегоНазначения.уатПрочитатьРеквизитГСМ(Объект.ГСМ).Плотность;
	КонецЕсли;
	
	ПодобратьПутевойЛистИсточник(Объект.ТС);
	
	Если ЗначениеЗаполнено(Объект.ТС)
		И уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.ТС, "ПринадлежностьТС")
		= ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное") Тогда
		МестонахождениеТС = уатОбщегоНазначения.МестонахождениеТС(Объект.ТС, Объект.Дата);
	КонецЕсли;

	
КонецПроцедуры

&НаКлиенте
Процедура ТСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтруктураОтбор = Новый Структура("Организация", Объект.Организация);
	уатИнтерфейсВводаТС.РеквизитТСНачалоВыбора(Элемент, Объект.ТС, ДанныеВыбора, СтандартнаяОбработка, СтруктураОтбор);
КонецПроцедуры

&НаКлиенте
Процедура ТСАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СтруктураОтбор = Новый Структура("Организация", Объект.Организация);
	уатИнтерфейсВводаТС.РеквизитТСАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка, СтруктураОтбор);
КонецПроцедуры

&НаКлиенте
Процедура ТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтруктураОтбор = Новый Структура("Организация", Объект.Организация);
	уатИнтерфейсВводаТС.РеквизитТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка, СтруктураОтбор);
КонецПроцедуры

&НаКлиенте
Процедура ГСМНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ДополнительныеПараметры = Новый Структура("ЗначениеГСМДоИзменения", Объект.ГСМ);
	ОписаниеОповещенияЗакр  = Новый ОписаниеОповещения("ОписаниеОповещенияВыбораГСМ", ЭтотОбъект, ДополнительныеПараметры);
	уатЗащищенныеФункцииКлиент.СписокГСМдляТС(Объект.Организация, Объект.ТС, ПредопределенноеЗначение("Перечисление.уатГруппыГСМ.Топливо"),,, ОписаниеОповещенияЗакр);
КонецПроцедуры

// Подключаемый динамически обработчик оповещения
&НаКлиенте
Процедура ОписаниеОповещенияВыбораГСМ(Результат, ДопПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		Объект.ГСМ = Результат;
		ГСМПриИзменении(Неопределено);
		Если ДопПараметры.ЗначениеГСМДоИзменения <> Результат Тогда 
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГСМПриИзменении(Элемент)
	ОстатокГСМвТС = ПолучитьОстатокГСМнсТС(Объект.ТС, Объект.ГСМ, Объект.Дата);
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийСливГСМ.НаСклад") Тогда
		Объект.Плотность = уатОбщегоНазначения.уатПрочитатьРеквизитГСМ(Объект.ГСМ).Плотность;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГСМАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	мсвГруппДляОтбора = Новый Массив;
	мсвГруппДляОтбора.Добавить(ПредопределенноеЗначение("Перечисление.уатГруппыГСМ.Топливо"));
	ДопПараметры = Новый Структура("ТС, Организация", Объект.ТС, Объект.Организация);
	ДанныеВыбора = уатГСМ.ПолучитьСписокАвтоподбораПоляГСМ(Текст, мсвГруппДляОтбора, ДопПараметры);
КонецПроцедуры

&НаКлиенте
Процедура ГСМОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	Параметры.СтрокаПоиска = "";
КонецПроцедуры

&НаКлиенте
Процедура ДатаПриИзменении(Элемент)
	ОстатокГСМвТС = ПолучитьОстатокГСМнсТС(Объект.ТС, Объект.ГСМ, Объект.Дата);
КонецПроцедуры

&НаКлиенте
Процедура АЗСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийСливГСМ.НаТС") Тогда 
		ПараметрыФормы = Новый Структура();
		Если ТипЗнч(Объект.АЗС) = Тип("СправочникСсылка.уатТС") Тогда 
			ПараметрыФормы.Вставить("ТекущаяСтрока", Объект.АЗС);
		КонецЕсли;
		//ФормаВыбора = ПолучитьФорму("Справочник.уатТС.ФормаВыбора", ПараметрыФормы, Элемент);
		//ЭлементОтбора                  = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		//ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("Ссылка");
		//ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.НеРавно;
		//ЭлементОтбора.ПравоеЗначение   = Объект.ТС;
		//ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		//ЭлементОтбора.Использование    = Истина;
		//ФормаВыбора.Открыть();
		ОткрытьФорму("Справочник.уатТС.ФормаВыбора", ПараметрыФормы, Элемент);
	Иначе 
		Если Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийСливГСМ.НаСклад") Тогда
			ОтборФормы = Новый Структура("ЭтоАЗССклад", Истина);
		Иначе
			ОтборФормы = Новый Структура("ЭтоАЗССклад", Ложь);
		КонецЕсли;
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("Отбор", ОтборФормы);
		Если ТипЗнч(Объект.АЗС) = Тип("СправочникСсылка.уатАЗС") Тогда 
			ПараметрыФормы.Вставить("ТекущаяСтрока", Объект.АЗС);
		КонецЕсли;
		ФормаВыбора = ОткрытьФорму("Справочник.уатАЗС.ФормаВыбора", ПараметрыФормы, Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТСПриемникПриИзменении(Элемент)
	
	ОбновитьПредставлениеМоделиТСПриемник();
	ПодобратьПутевойЛистПриемник(Объект.АЗС);
	
КонецПроцедуры

&НаКлиенте
Процедура ТСПриемникОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ОбновитьПредставлениеМоделиТСПриемник();
	ПодобратьПутевойЛистПриемник(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПутевойЛистПриИзменении(Элемент)
	
	ПодобратьТСПоПутевомуЛисту(Объект.ПутевойЛист);
	
КонецПроцедуры

&НаКлиенте
Процедура ПутевойЛистОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПодобратьТСПоПутевомуЛисту(ВыбранноеЗначение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПутевойЛистНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("Отбор", Новый Структура("Ссылка", ПолучитьПутевыеЛистыПоТС(Объект.ТС, Объект.Дата)));
	ОткрытьФорму("Документ.уатПутевойЛист.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПутевойЛистАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СписокПЛПодбор = ПолучитьПутевыеЛистыПоТС(Объект.ТС, Объект.Дата, Текст);
	Если СписокПЛПодбор.Количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = СписокПЛПодбор;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПутевойЛистОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ДанныеВыбора = ПолучитьПутевыеЛистыПоТС(Объект.ТС, Объект.Дата, Текст);
	
КонецПроцедуры

&НаКлиенте
Процедура ПутевойЛистПриемникПриИзменении(Элемент)
	
	ПодобратьТСПриемникПоПутевомуЛисту(Объект.ПутевойЛистПриемник);
	ОбновитьПредставлениеМоделиТСПриемник();
	
КонецПроцедуры

&НаКлиенте
Процедура ПутевойЛистПриемникОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ПодобратьТСПриемникПоПутевомуЛисту(ВыбранноеЗначение);
	ОбновитьПредставлениеМоделиТСПриемник();
	
КонецПроцедуры

&НаКлиенте
Процедура ПутевойЛистПриемникНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("Отбор", Новый Структура("Ссылка", ПолучитьПутевыеЛистыПоТС(Объект.АЗС, Объект.Дата)));
	ОткрытьФорму("Документ.уатПутевойЛист.ФормаВыбора", ПараметрыФормы, Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПутевойЛистПриемникАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Ожидание = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СписокПЛПодбор = ПолучитьПутевыеЛистыПоТС(Объект.АЗС, Объект.Дата, Текст);
	Если СписокПЛПодбор.Количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = СписокПЛПодбор;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПутевойЛистПриемникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ДанныеВыбора = ПолучитьПутевыеЛистыПоТС(Объект.АЗС, Объект.Дата, Текст);
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаКлиенте
Процедура ОбновитьОстатокГСМвТС(Команда)
	ОстатокГСМвТС = ПолучитьОстатокГСМнсТС(Объект.ТС, Объект.ГСМ, Объект.Дата);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

&НаСервереБезКонтекста
Функция ПолучитьОстатокГСМнсТС(ТС, ГСМ, ТекДата)
	ОстатокГСМНаТС = уатОбщегоНазначения.уатОстатокГСМнаТС(Новый Граница(ТекДата, ВидГраницы.Исключая), ТС, ГСМ);
	Возврат ОстатокГСМНаТС;
КонецФункции

&НаКлиенте
Процедура УстановитьВидимостьОрганичениеРеквизитов()
	
	Элементы.Склад.Видимость = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийСливГСМ.НаСклад"));
	Элементы.АЗС.Видимость = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийСливГСМ.НаАЗС"));
	Элементы.СтраницаТС.Видимость = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийСливГСМ.НаТС"));
	Элементы.Плотность.Видимость = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийСливГСМ.НаСклад"));
	Элементы.ПутевойЛистПриемник.Видимость = (Объект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийСливГСМ.НаТС"));
	
КонецПроцедуры

&НаСервере
Процедура ПодобратьПутевойЛистИсточник(ТССсылка)
	
	Если ЗначениеЗаполнено(Объект.ПутевойЛист) И ТСПрисутствуетВПутевомЛисте(ТССсылка, Объект.ПутевойЛист) Тогда 
		Возврат;
	КонецЕсли;
	
	СписокЗаправок = ПолучитьПутевыеЛистыПоТС(ТССсылка, Объект.Дата);
	Если СписокЗаправок.Количество() Тогда 
		Объект.ПутевойЛист = СписокЗаправок[0].Значение;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодобратьПутевойЛистПриемник(ТССсылка)
	
	Если Не Объект.ВидОперации = Перечисления.уатВидыОперацийСливГСМ.НаТС Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.ПутевойЛистПриемник) И ТСПрисутствуетВПутевомЛисте(ТССсылка, Объект.ПутевойЛистПриемник) Тогда 
		Возврат;
	КонецЕсли;
	
	СписокЗаправок = ПолучитьПутевыеЛистыПоТС(ТССсылка, Объект.Дата);
	Если СписокЗаправок.Количество() Тогда 
		Объект.ПутевойЛистПриемник = СписокЗаправок[0].Значение;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодобратьТСПоПутевомуЛисту(ПЛСсылка)
	
	Если ЗначениеЗаполнено(Объект.ТС) И ТСПрисутствуетВПутевомЛисте(Объект.ТС, ПЛСсылка) Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПЛСсылка) Тогда
		Объект.ТС = ПЛСсылка.ТранспортноеСредство;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПодобратьТСПриемникПоПутевомуЛисту(ПЛСсылка)
	
	Если Не Объект.ВидОперации = Перечисления.уатВидыОперацийСливГСМ.НаТС Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.АЗС) И ТСПрисутствуетВПутевомЛисте(Объект.АЗС, ПЛСсылка) Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПЛСсылка) Тогда
		Объект.АЗС = ПЛСсылка.ТранспортноеСредство;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ТСПрисутствуетВПутевомЛисте(Знач ТекТС, Знач ТекПутевойЛист)
	
	Если ТекПутевойЛист.ТранспортноеСредство = ТекТС Тогда 
		Возврат Истина;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из ТекПутевойЛист.Прицепы Цикл 
		Если ТекСтрока.ТС = ТекТС Тогда 
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если Метаданные.Документы.уатПутевойЛист.ТабличныеЧасти.Задание.Реквизиты.Найти("Прицеп1") <> Неопределено Тогда 
		Для Каждого ТекСтрока Из ТекПутевойЛист.Задание Цикл 
			Если ТекСтрока.Прицеп1 = ТекТС Тогда 
				Возврат Истина;
			КонецЕсли;
			Если ТекСтрока.Прицеп2 = ТекТС Тогда 
				Возврат Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // ТСПрисутствуетВПутевомЛисте()

&НаСервереБезКонтекста
Функция ПолучитьПутевыеЛистыПоТС(Знач ТС, Знач ДатаСлива, Знач ТекстПодбора="")
	
	ПутевыеЛистыПоТС = Новый СписокЗначений();
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТС",               ТС);
	Запрос.УстановитьПараметр("НачалоПериода",    ДобавитьМесяц(ДатаСлива, -1));
	Запрос.УстановитьПараметр("ОкончаниеПериода", ДобавитьМесяц(ДатаСлива, 1));
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатПутевойЛист.Ссылка КАК Ссылка,
	|	уатПутевойЛист.Номер КАК Номер,
	|	уатПутевойЛист.Дата КАК Дата
	|ИЗ
	|	Документ.уатПутевойЛист КАК уатПутевойЛист
	|ГДЕ
	|	НЕ уатПутевойЛист.ПометкаУдаления
	|	И НЕ уатПутевойЛист.Рассчитан
	|	И уатПутевойЛист.ДатаВыезда >= &НачалоПериода
	|	И уатПутевойЛист.ДатаВыезда <= &ОкончаниеПериода
	|	И уатПутевойЛист.ДатаВозвращения >= &НачалоПериода
	|	И уатПутевойЛист.ДатаВозвращения <= &ОкончаниеПериода";
	
	Если ЗначениеЗаполнено(ТС) Тогда
		Если Метаданные.Документы.уатПутевойЛист.ТабличныеЧасти.Задание.Реквизиты.Найти("Прицеп1") <> Неопределено Тогда 
			Запрос.Текст = Запрос.Текст + "
			|	И (уатПутевойЛист.ТранспортноеСредство = &ТС
			|	ИЛИ уатПутевойЛист.Прицепы.ТС.Модель.НаличиеТопливногоБака И уатПутевойЛист.Прицепы.ТС = &ТС
			|	ИЛИ уатПутевойЛист.Задание.Прицеп1.Модель.НаличиеТопливногоБака И уатПутевойЛист.Задание.Прицеп1 = &ТС
			|	ИЛИ уатПутевойЛист.Задание.Прицеп2.Модель.НаличиеТопливногоБака И уатПутевойЛист.Задание.Прицеп2 = &ТС)";
		Иначе //СТАНДАРТ
			Запрос.Текст = Запрос.Текст + "
			|	И (уатПутевойЛист.ТранспортноеСредство = &ТС
			|	ИЛИ уатПутевойЛист.Прицепы.ТС.Модель.НаличиеТопливногоБака И уатПутевойЛист.Прицепы.ТС = &ТС)";
		КонецЕсли;
	КонецЕсли;
	
	Запрос.Текст = СокрЛП(Запрос.Текст) + "
	|УПОРЯДОЧИТЬ ПО
	|	уатПутевойЛист.ДатаВыезда";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		ПредставлениеДокумента = Выборка.Номер + " (" + Выборка.Дата + ")";
		Если ТекстПодбора = "" Тогда 
			ПутевыеЛистыПоТС.Добавить(Выборка.Ссылка, ПредставлениеДокумента);
		Иначе 
			стрДлинаПодбор = СтрДлина(ТекстПодбора);
			Если Не НРег(Лев(ПредставлениеДокумента, стрДлинаПодбор)) = НРег(ТекстПодбора) Тогда 
				Продолжить;
			КонецЕсли;
			
			тПредставление = Новый ФорматированнаяСтрока(
				Новый ФорматированнаяСтрока(Лев(ПредставлениеДокумента, стрДлинаПодбор),, ЦветаСтиля.уатЦветТекстаПриАвтоподборе), 
				Новый ФорматированнаяСтрока(Прав(ПредставлениеДокумента, СтрДлина(ПредставлениеДокумента)-стрДлинаПодбор)));
			ПутевыеЛистыПоТС.Добавить(Выборка.Ссылка, тПредставление);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ПутевыеЛистыПоТС;
	
КонецФункции // ПолучитьПутевыеЛистыПоТС()

&НаКлиенте
Процедура ОбновитьПредставлениеМоделиТСПриемник()
	
	Если ТипЗнч(Объект.АЗС) = Тип("СправочникСсылка.уатТС") Тогда 
		МодельТСПриемника = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(Объект.АЗС, "Модель");
	Иначе 
		МодельТСПриемника = ПредопределенноеЗначение("Справочник.уатМоделиТС.ПустаяСсылка");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьПревышениеУровняТопливаВБаке(Отказ, ВызовПередЗакрытиемФормы = Ложь, мсвСообщения = Неопределено)
	Если Объект.ВидОперации <> ПредопределенноеЗначение("Перечисление.уатВидыОперацийСливГСМ.НаТС")
		ИЛИ НЕ уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
		"ПредупреждатьПриПревышенииУровняТопливаВБаке") Тогда
		
		Возврат;
	КонецЕсли;
	
	Если мсвСообщения = Неопределено Тогда
		мсвСообщения = Новый Массив;
	КонецЕсли;
	
	СообщениеПревышение = "";
	
	тблСлив = Новый ТаблицаЗначений;
	тблСлив.Колонки.Добавить("Дата");
	тблСлив.Колонки.Добавить("ТС");
	тблСлив.Колонки.Добавить("ГСМ");
	тблСлив.Колонки.Добавить("ПутевойЛист");
	тблСлив.Колонки.Добавить("Количество");
	
	НоваяСтрока             = тблСлив.Добавить();
	НоваяСтрока.Дата        = Объект.Дата;
	НоваяСтрока.ТС          = Объект.АЗС;
	НоваяСтрока.ГСМ         = Объект.ГСМ;
	НоваяСтрока.ПутевойЛист = Объект.ПутевойЛистПриемник;
	НоваяСтрока.Количество  = Объект.Количество;
	
	уатГСМ.ПроверитьПревышениеУровняТопливаВБаке(тблСлив, Объект.Организация, Объект.АЗС, СообщениеПревышение);
	
	Если НЕ ПустаяСтрока(СообщениеПревышение) Тогда
		мсвСообщения.Добавить(СообщениеПревышение);
		Если НЕ ВызовПередЗакрытиемФормы И НЕ РедактированиеСливаИзПЛ Тогда
			флВопросЗакрытиеФормы = Истина;
			уатОбщегоНазначенияТиповые.СообщитьОбОшибке(СообщениеПревышение);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

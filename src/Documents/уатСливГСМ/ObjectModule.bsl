#Область ОписаниеПеременных

Перем ПризнакРедактированияИзПутевогоЛистаСсылка Экспорт; // Если документ вводится/редактируется из путевого листа, ссылка на путевой лист

#КонецОбласти


#Область ОбработчикиСобытий

Процедура ОбработкаПроведения(Отказ, РежимПроведения)
	// Инициализация дополнительных свойств для проведения документа.
	уатПроведение.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Инициализация данных документа.
	Документы.уатСливГСМ.ИнициализироватьДанныеДокумента(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей.
	уатПроведение.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Отражение в разделах учета.
	уатПроведение.ОтразитьОстаткиГСМНаТС(ДополнительныеСвойства, Движения, Отказ);
	Если ВидОперации = Перечисления.уатВидыОперацийСливГСМ.НаСклад Тогда 
		уатПроведение.ОтразитьПартииТоваровНаСкладах(ДополнительныеСвойства, Движения, Отказ);
	КонецЕсли;
	
	// Запись наборов записей.
	уатПроведение.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль возникновения отрицательного остатка.
	Документы.уатСливГСМ.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ);
КонецПроцедуры

Процедура ОбработкаУдаленияПроведения(Отказ)
	// Инициализация дополнительных свойств для проведения документа
	уатПроведение.ИнициализироватьДополнительныеСвойстваДляПроведения(Ссылка, ДополнительныеСвойства);
	
	// Подготовка наборов записей
	уатПроведение.ПодготовитьНаборыЗаписейКРегистрацииДвижений(ЭтотОбъект);
	
	// Запись наборов записей
	уатПроведение.ЗаписатьНаборыЗаписей(ЭтотОбъект);
	
	// Контроль
	Документы.уатСливГСМ.ВыполнитьКонтроль(Ссылка, ДополнительныеСвойства, Отказ, Истина);
КонецПроцедуры

Процедура ОбработкаЗаполнения(ДанныеЗаполнения, СтандартнаяОбработка)
	
	уатОбщегоНазначенияСервер.Заполнить(ЭтотОбъект, ДанныеЗаполнения);
	
	Если ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.уатПутевойЛист") Тогда
		СтандартнаяОбработка = Ложь;
		
		уатОбщегоНазначенияТиповые.ЗаполнитьШапкуДокумента(ЭтотОбъект, ПользователиКлиентСервер.АвторизованныйПользователь());
		
		ДокументОснование = ДанныеЗаполнения;
		Организация       = ДанныеЗаполнения.Организация;
		Подразделение     = ДанныеЗаполнения.Подразделение;
		Ответственный     = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
						  ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнойОтветственный");
		Дата       		  = ?(ДанныеЗаполнения.ДатаЗакрытия < ДанныеЗаполнения.ДатаВыезда, ДанныеЗаполнения.ДатаВыезда, ДанныеЗаполнения.ДатаЗакрытия);
		ВидОперации       = Перечисления.уатВидыОперацийСливГСМ.НаСклад;
		ПутевойЛист 	  = ДанныеЗаполнения.Ссылка;
		ТС         		  = ДанныеЗаполнения.ТранспортноеСредство;
		ГСМ				  = ДанныеЗаполнения.ТранспортноеСредство.Модель.ОсновноеТопливо;
		
		СтруктураОбъектовНастроек = Новый Структура;
		СтруктураОбъектовНастроек.Вставить("Организация", Организация);
		СтруктураОбъектовНастроек.Вставить("Подразделение", Подразделение);
		мАЗС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, ПланыВидовХарактеристик.уатПраваИНастройки.ОсновнаяАЗС);
		Если Не ЗначениеЗаполнено(АЗС) И ТипЗнч(мАЗС) = Тип("СправочникСсылка.уатАЗС") И мАЗС.ЭтоАЗССклад Тогда 
			АЗС = мАЗС;
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ДанныеЗаполнения) = Тип("ДокументСсылка.уатИнвентаризацияГСМвТС") Тогда
		СтандартнаяОбработка = Ложь;
		
		уатОбщегоНазначенияТиповые.ЗаполнитьШапкуДокумента(ЭтотОбъект, ПользователиКлиентСервер.АвторизованныйПользователь());
		
		Запрос = Новый Запрос;
		Запрос.УстановитьПараметр("ДокументСсылка",          Ссылка);
		Запрос.УстановитьПараметр("ДокументОснованиеСсылка", ДанныеЗаполнения);
		
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатИнвентаризацияГСМвТСГСМвТС.ТС,
		|	уатИнвентаризацияГСМвТСГСМвТС.ГСМ,
		|	МАКСИМУМ(уатИнвентаризацияГСМвТСГСМвТС.КоличествоУчет - уатИнвентаризацияГСМвТСГСМвТС.Количество) КАК КоличествоОтклонениеИнвентаризации,
		|	СУММА(ВЫБОР
		|			КОГДА уатСливГСМ.Количество ЕСТЬ NULL 
		|				ТОГДА 0
		|			ИНАЧЕ уатСливГСМ.Количество
		|		КОНЕЦ) КАК КоличествоСписанное
		|ИЗ
		|	Документ.уатИнвентаризацияГСМвТС.ГСМвТС КАК уатИнвентаризацияГСМвТСГСМвТС
		|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатСливГСМ КАК уатСливГСМ
		|		ПО уатИнвентаризацияГСМвТСГСМвТС.ГСМ = уатСливГСМ.ГСМ
		|			И уатИнвентаризацияГСМвТСГСМвТС.ТС = уатСливГСМ.ТС
		|			И (уатСливГСМ.ДокументОснование = &ДокументОснованиеСсылка)
		|			И (уатСливГСМ.Проведен)
		|			И (уатСливГСМ.Ссылка <> &ДокументСсылка)
		|ГДЕ
		|	уатИнвентаризацияГСМвТСГСМвТС.Ссылка = &ДокументОснованиеСсылка
		|	И уатИнвентаризацияГСМвТСГСМвТС.КоличествоУчет - уатИнвентаризацияГСМвТСГСМвТС.Количество > 0
		|
		|СГРУППИРОВАТЬ ПО
		|	уатИнвентаризацияГСМвТСГСМвТС.НомерСтроки,
		|	уатИнвентаризацияГСМвТСГСМвТС.ТС,
		|	уатИнвентаризацияГСМвТСГСМвТС.ГСМ
		|
		|УПОРЯДОЧИТЬ ПО
		|	уатИнвентаризацияГСМвТСГСМвТС.НомерСтроки";
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		флДокументЗаполнен = Ложь;
		
		Пока Выборка.Следующий() Цикл 
			КоличествоСписать = Выборка.КоличествоОтклонениеИнвентаризации - Выборка.КоличествоСписанное;
			
			Если КоличествоСписать <= 0 Тогда
				Продолжить;
			КонецЕсли;
			
			АЗС               = ДанныеЗаполнения.АЗС;
			ВидОперации       = Перечисления.уатВидыОперацийСливГСМ.НаСклад;
			ГСМ               = Выборка.ГСМ;
			ДокументОснование = ДанныеЗаполнения;
			Количество        = КоличествоСписать;
			Организация       = ДанныеЗаполнения.Организация;
			Подразделение     = ДанныеЗаполнения.Подразделение;
			Ответственный     = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
						  ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнойОтветственный");
			ТС                = Выборка.ТС;
			Дата              = ДанныеЗаполнения.Дата;
			
			флДокументЗаполнен = Истина;
			Прервать;
		КонецЦикла;
		
		Если Не флДокументЗаполнен Тогда 
			ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("en='In document ""%1 № %2"" there are no vehicles with fuels, the registration quantity of which exceeds the actual amount.';ru='В документе ""%1 № %2"" отсутствуют ТС с ГСМ, учетное количество которого превышает фактическое.'"), 
					ДанныеЗаполнения.Метаданные().Представление(),
					ДанныеЗаполнения.Номер);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"Объект");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	// Проверим, что сливаемое на ТС топливо (если вид операции - Слив на ТС)
	// является основым или доп. топливом ТС-приемника
	Если ВидОперации = Перечисления.уатВидыОперацийСливГСМ.НаТС Тогда 
		Если ТипЗнч(АЗС) = Тип("СправочникСсылка.уатТС") Тогда
			Если НЕ ДопустимоеТопливоТС(АЗС, ГСМ) Тогда
				ТекстНСТР = НСтр("en='Drained fuel is not valid fuels for vehicle ""%1""';ru='Сливаемое ГСМ не является допустимым ГСМ для ТС ""%1""'");
				ТекстНСТР = СтрШаблон(ТекстНСТР, АЗС);
				уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, Отказ);
			КонецЕсли;
		Иначе 
			ТекстНСТР = НСтр("en='Vehicle (receiver) is not a reference to vehicle catalog.';ru='ТС (приемник) не является ссылкой на справочник ТС.'");
			уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, Отказ);
		КонецЕсли;
		Если АЗС = ТС Тогда 
			ТекстНСТР = НСтр("en='Vehicle (the source) must not equal the vehicle (receiver).';ru='ТС (источник) не должно быть равно ТС (приемник).'");
			уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, Отказ);
		КонецЕсли;
	КонецЕсли;
	
	Заголовок = уатОбщегоНазначенияТиповые.уатПредставлениеДокументаПриПроведении(ЭтотОбъект);
	уатОбщегоНазначения.ПроверкаЗаполненияПодразделения(Организация, Подразделение, Отказ, Заголовок);
	
КонецПроцедуры

Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если (ПометкаУдаления ИЛИ РежимЗаписи = РежимЗаписиДокумента.ОтменаПроведения) И ЕстьПутевыеЛисты() Тогда
		Заголовок = уатОбщегоНазначенияТиповые.уатПредставлениеДокументаПриПроведении(ЭтотОбъект);
		ТекстНСТР = НСтр("en='Failed to delete: there are calculated waybills containing this fuels drain!';ru='Не удалось удалить: существуют рассчитанные путевые листы, содержащие данный слив ГСМ!'");
		уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, Отказ, Заголовок);
	КонецЕсли;
КонецПроцедуры

Процедура ПередУдалением(Отказ)
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	Если ЕстьПутевыеЛисты() Тогда
		Заголовок = уатОбщегоНазначенияТиповые.уатПредставлениеДокументаПриПроведении(ЭтотОбъект);
		ТекстНСТР = НСтр("en='Failed to delete: there are calculated waybills containing this fuels drain!';ru='Не удалось удалить: существуют рассчитанные путевые листы, содержащие данный слив ГСМ!'");
		уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР, Отказ, Заголовок);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Функция ЕстьПутевыеЛисты()
	флЕстьРассчитанныйПутевойЛист = Ложь;
	Если ПутевойЛист.Проведен И ПутевойЛист.Рассчитан И	ПризнакРедактированияИзПутевогоЛистаСсылка <> ПутевойЛист Тогда
		флЕстьРассчитанныйПутевойЛист = Истина;
	КонецЕсли;
	
	Возврат флЕстьРассчитанныйПутевойЛист;
КонецФункции

Функция ДопустимоеТопливоТС(ТСприемник, ГСМ)
	Если ГСМ = ТСприемник.Модель.ОсновноеТопливо
		ИЛИ ГСМ = ТСприемник.Модель.ДополнительноеТопливо Тогда
		
		Возврат Истина;
	КонецЕсли;
	
	// аналоги основного и дополнительного топлива тоже являются допустимым топливом
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	уатАналогиГСМ.Аналог КАК Аналог
	|ИЗ
	|	РегистрСведений.уатАналогиГСМ КАК уатАналогиГСМ
	|ГДЕ
	|	уатАналогиГСМ.ГСМ В (&мсвГСМ)
	|	И уатАналогиГСМ.Аналог = &ГСМ");
	
	мсвГСМ = Новый Массив;
	мсвГСМ.Добавить(ТСприемник.Модель.ОсновноеТопливо);
	Если ЗначениеЗаполнено(ТСприемник.Модель.ДополнительноеТопливо) Тогда
		мсвГСМ.Добавить(ТСприемник.Модель.ДополнительноеТопливо);
	КонецЕсли;
	Запрос.УстановитьПараметр("мсвГСМ", мсвГСМ);
	Запрос.УстановитьПараметр("ГСМ",    ГСМ);
	
	Если Запрос.Выполнить().Пустой() Тогда
		Возврат Ложь;
	Иначе
		Возврат Истина;
	КонецЕсли;
КонецФункции

#КонецОбласти


#Область Инициализация

ПризнакРедактированияИзПутевогоЛистаСсылка = Документы.уатПутевойЛист.ПустаяСсылка();

#КонецОбласти

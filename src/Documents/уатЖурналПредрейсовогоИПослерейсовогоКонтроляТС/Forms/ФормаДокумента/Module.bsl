
#Область ПеременныеФормы

&НаКлиенте
Перем СоответвиеПЛЭД;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	уатЗащищенныеФункцииСервер.уатДокументФормаЭлементаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, Объект, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	флЭЦП               = ПолучитьФункциональнуюОпцию("ИспользоватьЭлектронныеПодписи");
	ИспользоватьОбменЭД = ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭД");
	флПравоПодписи = ПравоДоступа("Изменение",
		Метаданные.Справочники.уатЖурналПредрейсовогоИПослерейсовогоКонтроляТСПрисоединенныеФайлы);
	Элементы.ФормаПодписать.Видимость = флЭЦП И флПравоПодписи;
	
	// Ввод на основании ПЛ
	Если Объект.Ссылка.Пустая() Тогда
		СозданныеДокументы = уатЖурналыТранспортныхДокументов.СозданныеДокументыКонтроляТСПоПЛ(Объект.ПутевойЛист);
			
		Если СозданныеДокументы.Предрейсовый <> Неопределено И СозданныеДокументы.Послерейсовый <> Неопределено Тогда
			ТекстНСТР = "По путевому листу уже введены предрейсовый и послерейсовый контроль ТС";
			уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР,,, СтатусСообщения.Внимание);
			Отказ = Истина;
			Возврат;
		КонецЕсли;
		Если СозданныеДокументы.Предрейсовый <> Неопределено И СозданныеДокументы.Послерейсовый = Неопределено Тогда
			Объект.ВидКонтроля = Перечисления.уатВидыКонтроляТранспортныхДокументов.Послерейсовый;
		КонецЕсли;

		ТекПользователь = ПользователиКлиентСервер.АвторизованныйПользователь();
		
		Если НЕ ЗначениеЗаполнено(Объект.Журнал) Тогда
			СтруктураНастройки = Новый Структура("Организация, Подразделение", Объект.Организация, Объект.Подразделение);
			Объект.Журнал = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураНастройки,
				ПланыВидовХарактеристик.уатПраваИНастройки.ОсновнойЖурналПредрейсовогоИПослерейсовогоКонтроля);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Объект.Журнал) И Объект.РезультатыОсмотра.Количество() = 0 Тогда
			ЗаполнитьРезультатыОсмотраПоШаблонуСервер(Объект.Журнал.ШаблонРезультатовОсмотра);
		КонецЕсли;
	КонецЕсли;
	
	ОтобразитьДанныеПЛ();
	ОбновитьДинамическиеКолонкиТЧСервер();
	УстановитьУсловноеОформлениеПолейСтатусов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	уатЗащищенныеФункцииКлиент.уатДокументФормаЭлементаПриОткрытии(Отказ, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	УстановитьВидимостьДоступность();
	
	Если ИспользоватьОбменЭД
		И Элементы.ФормаПодписать.Видимость Тогда
		Элементы.ФормаПодписать.Видимость = уатОбменСГИСЭПДКлиент.ЕстьВозможностьПодписанияЭПЛ(Объект.ПутевойЛист,
			ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул3"));
	КонецЕсли; 
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства

	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьДинамическиеКолонкиТЧСервер();
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.уатШаблоныТребованийКонтроляТСиВодителей") Тогда
		ЗаполнитьРезультатыОсмотраПоШаблонуСервер(ВыбранноеЗначение);
		Модифицированность = Истина;
		РассчитатьСтатусДокумента();
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.уатСтатусы_уэ") Тогда
		Объект.Статус = ВыбранноеЗначение;
		Для Каждого ТекСтрока Из Объект.РезультатыОсмотра Цикл
			Если НЕ ВыборСтатусаДокументаВШапке ИЛИ НЕ ЗначениеЗаполнено(ТекСтрока.Статус) Тогда
				ТекСтрока.Статус = ВыбранноеЗначение;
				Если ТекСтрока.ТребованиеФлажок Тогда
					ТекСтрока.Результат = (ТекСтрока.Статус = ПредопределенноеЗначение("Справочник.уатСтатусы_уэ.Пройдено"));
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		ОбновитьДинамическиеКолонкиТЧСервер();
		УстановитьУсловноеОформлениеПолейСтатусов();
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
		
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ЗаполнитьПоШаблону(Команда)
	Если Объект.РезультатыОсмотра.Количество() > 0 Тогда
		ОписаниеОповещ = Новый ОписаниеОповещения("ЗаполнитьРезультатыПоШаблонуВопрос", ЭтотОбъект);
		ТекстНСТР = НСтр("en='To fill with cleaning tables?';ru='Заполнить с очисткой таблицы?'");
		ПоказатьВопрос(ОписаниеОповещ, ТекстНСТР, РежимДиалогаВопрос.ДаНетОтмена);
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Справочник.уатШаблоныТребованийКонтроляТСиВодителей.ФормаВыбора",, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьРезультатыПоШаблонуВопрос(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.РезультатыОсмотра.Очистить();
		Модифицированность = Истина;
		РассчитатьСтатусДокумента();
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
	Иначе
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Справочник.уатШаблоныТребованийКонтроляТСиВодителей.ФормаВыбора",, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСтатусДляВсехСтрок(Команда)
	ВыборСтатусаДокументаВШапке = Ложь;
	ПараметрыФормы = Новый Структура("Отбор",
		Новый Структура("ДействуетНаЖурналыТранспортныхДокументов", Истина));
	ОткрытьФорму("Справочник.уатСтатусы_уэ.ФормаВыбора", ПараметрыФормы, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Очистить(Команда)
	Если Объект.РезультатыОсмотра.Количество() Тогда
		ТекстНСТР = НСтр("en='The list of results is not empty! Clear?';ru='Список результатов осмотра не пустой! Очистить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ОчиститьЗавершение", ЭтотОбъект), ТекстНСТР,
			РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет, НСтр("en='Clear the table';ru='Очистка таблицы'"));
        Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
        Объект.РезультатыОсмотра.Очистить();
		Модифицированность = Истина;
		РассчитатьСтатусДокумента();
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВсеФлаги(Команда)
	ИзменитьФлагиТребований(Истина);
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсеФлаги(Команда)
	ИзменитьФлагиТребований(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьФлагиТребований(флУстановить)
	Для Каждого ТекСтрока Из Объект.РезультатыОсмотра Цикл
		Если НЕ ТекСтрока.ТребованиеФлажок Тогда
			Продолжить;
		КонецЕсли;
		
		ТекСтрока.РезультатФлажок = флУстановить;
		ТекСтрока.Результат = ТекСтрока.РезультатФлажок;
		Если ТекСтрока.Результат Тогда
			ТекСтрока.Статус = ПредопределенноеЗначение("Справочник.уатСтатусы_уэ.Пройдено");
		Иначе
			ТекСтрока.Статус = ПредопределенноеЗначение("Справочник.уатСтатусы_уэ.НеПройдено");
		КонецЕсли;
	КонецЦикла;
	
	Модифицированность = Истина;
	РассчитатьСтатусДокумента();
КонецПроцедуры

&НаКлиенте
Процедура Подписать(Команда)

	Если НЕ уатЗащищенныеФункцииКлиент.ИТСОтраслевой_ПроверкаДоступностиСервисов() Тогда
		Возврат;
	КонецЕсли;
	
	ИмяКлючевойОперации = "уатОперации.ПодписаниеЭПЛизЖурналаМеханика";
	ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики(ИмяКлючевойОперации, 1);

	Если НЕ Объект.Ссылка.Пустая() Тогда
		мсвДокументы = Новый Массив;
		мсвДокументы.Добавить(Объект.Ссылка);
		флПодписан = уатЖурналыТранспортныхДокументов.ДокументыПодписаны(мсвДокументы);
		Если флПодписан Тогда
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() ИЛИ Модифицированность Тогда
		Оповещ = Новый ОписаниеОповещения("ПодписатьЗаписатьДокумент", ЭтотОбъект);
		ТекстСообщ = "Перед подписанием документ будет проведен. Продолжить?";
		ПоказатьВопрос(Оповещ, ТекстСообщ, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
	КонецЕсли;
	
	ПодписатьЗавершение();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьЗаписатьДокумент(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		флОК = Записать(Новый Структура("РежимЗаписи", РежимЗаписиДокумента.Проведение));
		Если флОК Тогда
			ПодписатьЗавершение();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодписатьЗавершение()
	
	Если ИспользоватьОбменЭД Тогда
		мсвДокументы = Новый Массив();
		мсвДокументы.Добавить(Объект.ПутевойЛист);
		
		ПараметрыОткрытия = Новый Структура("мсвДокументы", мсвДокументы);
		ПараметрыОткрытия.Вставить("Подпись",       "Контролер");
		ПараметрыОткрытия.Вставить("Представление", "Ответственный за состояние ТС");
		ОткрытьФорму("Документ.уатПутевойЛист.Форма.ФормаПодписейОтвЛица", ПараметрыОткрытия, ЭтотОбъект);
	Иначе
		уатЖурналыТранспортныхДокументовКлиент.Подписать(Объект.Ссылка, УникальныйИдентификатор);
	Конецесли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтчетРезультаты(Команда)
	уатЖурналыТранспортныхДокументовКлиент.ОткрытьОтчетРезультаты(Объект.Ссылка);
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СтатусДокументаНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВыборСтатусаДокументаВШапке = Истина;
	
	ПараметрыФормы = Новый Структура("Отбор",
		Новый Структура("ДействуетНаЖурналыТранспортныхДокументов", Истина));
	ОткрытьФорму("Справочник.уатСтатусы_уэ.ФормаВыбора", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВидКонтроляПриИзменении(Элемент)
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура ПутевойЛистПриИзменении(Элемент)
	ОтобразитьДанныеПЛ(Истина);
	Если ИспользоватьОбменЭД
		И Элементы.ФормаПодписать.Видимость Тогда
		Титул = ?(Объект.ВидКонтроля  = ПредопределенноеЗначение("Перечисление.уатВидыКонтроляТранспортныхДокументов.Предрейсовый"),
		ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул4"),
		ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭПЛ_Титул5"));
		Элементы.ФормаПодписать.Видимость = уатОбменСГИСЭПДКлиент.ЕстьВозможностьПодписанияЭПЛ(Объект.ПутевойЛист, Титул);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормы

&НаКлиенте
Процедура РезультатыОсмотраПриИзменении(Элемент)
	РассчитатьСтатусДокумента();
КонецПроцедуры

&НаКлиенте
Процедура РезультатыОсмотраПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ОбновитьСписокВыбораЗначенийРезультатаОсмотра();
	УстановитьОграничениеТипаЗначенияТребований();
КонецПроцедуры

&НаКлиенте
Процедура РезультатыОсмотраТребованиеПриИзменении(Элемент)
	ОбновитьСписокВыбораЗначенийРезультатаОсмотра();
	ОбновитьДинамическиеКолонкиТЧСервер();
	УстановитьОграничениеТипаЗначенияТребований();
	
	ТекСтрока = Элементы.РезультатыОсмотра.ТекущиеДанные;
	ТекСтрока.Результат = ПустоеЗначениеРезультатаТребования(ТекСтрока.Требование);
КонецПроцедуры

&НаКлиенте
Процедура РезультатыОсмотраРезультатАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Ожидание = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекСтрока = Элементы.РезультатыОсмотра.ТекущиеДанные;
	ЗначенияРезультата = ПодобратьЗначенияРезультата(ТекСтрока.Требование, Текст);
	Если ЗначенияРезультата.Количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ЗначенияРезультата;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РезультатыОсмотраРезультатФлажокПриИзменении(Элемент)
	ТекСтрока = Элементы.РезультатыОсмотра.ТекущиеДанные;
	ТекСтрока.Результат = ТекСтрока.РезультатФлажок;
	Если ТекСтрока.Результат Тогда
		ТекСтрока.Статус = ПредопределенноеЗначение("Справочник.уатСтатусы_уэ.Пройдено");
	Иначе
		ТекСтрока.Статус = ПредопределенноеЗначение("Справочник.уатСтатусы_уэ.НеПройдено");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РезультатыОсмотраСтатусПриИзменении(Элемент)
	ТекСтрока = Элементы.РезультатыОсмотра.ТекущиеДанные;
	Если ТекСтрока.ТребованиеФлажок Тогда
		ТекСтрока.Результат = (ТекСтрока.Статус = ПредопределенноеЗначение("Справочник.уатСтатусы_уэ.Пройдено"));
	КонецЕсли;
	
	ОбновитьДинамическиеКолонкиТЧСервер();
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура УстановитьВидимостьДоступность()
	Элементы.ГруппаПараметрыВозврата.Видимость = (Объект.ВидКонтроля
		= ПредопределенноеЗначение("Перечисление.уатВидыКонтроляТранспортныхДокументов.Послерейсовый"));
КонецПроцедуры

&НаСервере
Процедура ОбновитьДинамическиеКолонкиТЧСервер()
	Для Каждого ТекСтрока Из Объект.РезультатыОсмотра Цикл
		ТекСтрока.ТребованиеФлажок = (ТекСтрока.Требование.ТипЗначенияТребования
			= Перечисления.уатТипыЗначенийТребованийКонтроляТСиВодителей.Булево);
		ТекСтрока.РезультатФлажок = ТекСтрока.Результат;
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПодобратьЗначенияРезультата(Требование, ПодстрокаПоиска, ПриНачалеРедактирования = Ложь)
	Рез = Новый СписокЗначений;
	
	Если ПриНачалеРедактирования Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
		|	ДоступныеЗначения.Значение КАК Значение
		|ИЗ
		|	Справочник.уатТребованияКонтроляТС.ДоступныеЗначения КАК ДоступныеЗначения
		|ГДЕ
		|	ДоступныеЗначения.Ссылка = &Ссылка");
		Запрос.УстановитьПараметр("Ссылка", Требование);
	
		мсвЗначения = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Значение");
		Рез.ЗагрузитьЗначения(мсвЗначения);
		Возврат Рез;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ПодстрокаПоиска) Тогда
		Возврат Рез;
	КонецЕсли;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 51
	|	ДоступныеЗначения.Значение
	|ИЗ
	|	Справочник.уатТребованияКонтроляТС.ДоступныеЗначения КАК ДоступныеЗначения
	|ГДЕ
	|	ДоступныеЗначения.Ссылка = &Ссылка
	|	И ДоступныеЗначения.Значение ПОДОБНО &парамТекст");
	
	// заменим спецсимволы
	Текст = ПодстрокаПоиска;
	Текст = СтрЗаменить(Текст, "~", "~~");
	Текст = СтрЗаменить(Текст, "%", "~%");
	Текст = СтрЗаменить(Текст, "_", "~_");
	Текст = СтрЗаменить(Текст, "[", "~[");
	Текст = СтрЗаменить(Текст, "-", "~-");
	Текст = "%" + сокрЛП(Текст) + "%";
	Запрос.УстановитьПараметр("парамТекст", Текст);
	Запрос.УстановитьПараметр("Ссылка", Требование);
	
	Выборка = Запрос.Выполнить().Выбрать();

	Пока Выборка.Следующий() Цикл
		ПозицияТекст = Найти(ВРег(Выборка.Значение), ВРег(ПодстрокаПоиска));
		тПредставление = Новый ФорматированнаяСтрока(
			Лев(Выборка.Значение, ПозицияТекст-1),
			Новый ФорматированнаяСтрока(Сред(Выборка.Значение, ПозицияТекст, СтрДлина(ПодстрокаПоиска)),, WebЦвета.Красный),
			Сред(Выборка.Значение, ПозицияТекст + СтрДлина(ПодстрокаПоиска)));
		Рез.Добавить(Выборка.Значение, тПредставление);
	КонецЦикла;
	
	Возврат Рез;
КонецФункции

&НаКлиенте
Процедура ОбновитьСписокВыбораЗначенийРезультатаОсмотра()
	ТекСтрока = Элементы.РезультатыОсмотра.ТекущиеДанные;
	
	ЗначенияРезультата = ПодобратьЗначенияРезультата(ТекСтрока.Требование, "", Истина);
	
	Элементы.РезультатыОсмотраРезультат.СписокВыбора.Очистить();
	Для Каждого ТекЗначение Из ЗначенияРезультата Цикл
		Элементы.РезультатыОсмотраРезультат.СписокВыбора.Добавить(ТекЗначение.Значение);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОграничениеТипаЗначенияТребований()
	ТекСтрока = Элементы.РезультатыОсмотра.ТекущиеДанные;
	ТипЗначенияТребования = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрока.Требование, "ТипЗначенияТребования");
	
	Если ТипЗначенияТребования = ПредопределенноеЗначение("Перечисление.уатТипыЗначенийТребованийКонтроляТСиВодителей.Строка") Тогда
		Элементы.РезультатыОсмотраРезультат.ОграничениеТипа = Новый ОписаниеТипов("Строка");
	ИначеЕсли ТипЗначенияТребования = ПредопределенноеЗначение("Перечисление.уатТипыЗначенийТребованийКонтроляТСиВодителей.Число") Тогда
		Элементы.РезультатыОсмотраРезультат.ОграничениеТипа = Новый ОписаниеТипов("Число");
	ИначеЕсли ТипЗначенияТребования = ПредопределенноеЗначение("Перечисление.уатТипыЗначенийТребованийКонтроляТСиВодителей.Булево") Тогда
		Элементы.РезультатыОсмотраРезультат.ОграничениеТипа = Новый ОписаниеТипов("Булево");
	Иначе
		Элементы.РезультатыОсмотраРезультат.ОграничениеТипа = Новый ОписаниеТипов(Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСтатусДокумента()
	Если Объект.РезультатыОсмотра.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	флВсеСтатусыОдинаковые = Истина;
	ТекСтатус = Неопределено;
	Для Каждого ТекСтрока Из Объект.РезультатыОсмотра Цикл
		Если ТекСтатус = Неопределено Тогда
			ТекСтатус = ТекСтрока.Статус;
			Продолжить;
		КонецЕсли;
		Если ТекСтрока.Статус <> ТекСтатус Тогда
			флВсеСтатусыОдинаковые = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если флВсеСтатусыОдинаковые Тогда
		Если ЗначениеЗаполнено(ТекСтатус) Тогда
			Объект.Статус = ТекСтатус;
		Иначе
			Объект.Статус = ПредопределенноеЗначение("Справочник.уатСтатусы_уэ.Новый");
		КонецЕсли;
	Иначе
		Объект.Статус = ПредопределенноеЗначение("Справочник.уатСтатусы_уэ.НеПройдено");
	КонецЕсли;
	
	УстановитьУсловноеОформлениеПолейСтатусов();
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРезультатыОсмотраПоШаблонуСервер(Шаблон)
	Для Каждого ТекСтрока Из Шаблон.ПереченьТребований Цикл
		НоваяСтрока = Объект.РезультатыОсмотра.Добавить();
		НоваяСтрока.Требование = ТекСтрока.Требование;
		НоваяСтрока.ТребованиеФлажок = ТекСтрока.Требование.ТипЗначенияТребования
			= ПредопределенноеЗначение("Перечисление.уатТипыЗначенийТребованийКонтроляТСиВодителей.Булево");
			
		НоваяСтрока.Результат = ПустоеЗначениеРезультатаТребования(НоваяСтрока.Требование);	
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПустоеЗначениеРезультатаТребования(Требование)
	Рез = Неопределено;
	
	Если Требование.ТипЗначенияТребования = Перечисления.уатТипыЗначенийТребованийКонтроляТСиВодителей.Булево Тогда
		Рез = Ложь;
	ИначеЕсли Требование.ТипЗначенияТребования = Перечисления.уатТипыЗначенийТребованийКонтроляТСиВодителей.Число Тогда
		Рез = 0;
	ИначеЕсли Требование.ТипЗначенияТребования = Перечисления.уатТипыЗначенийТребованийКонтроляТСиВодителей.Строка Тогда
		Рез = "";
	КонецЕсли;
	Возврат Рез;
	
КонецФункции
	
&НаСервере
Процедура УстановитьУсловноеОформлениеПолейСтатусов()
	мсвУдаляемыхЭлементов = Новый Массив();
	Для Каждого ЭлементУсловногоОформления Из УсловноеОформление.Элементы Цикл
		Если ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "Предустановленный_ЦветаСтатусов" Тогда
			мсвУдаляемыхЭлементов.Добавить(ЭлементУсловногоОформления);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементУсловногоОформления Из мсвУдаляемыхЭлементов Цикл
		УсловноеОформление.Элементы.Удалить(ЭлементУсловногоОформления);
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатСтатусы_уэ.Ссылка,
	|	уатСтатусы_уэ.Наименование,
	|	уатСтатусы_уэ.ЦветФонаПоУмолчанию,
	|	уатСтатусы_уэ.ЦветТекстаПоУмолчанию
	|ИЗ
	|	Справочник.уатСтатусы_уэ КАК уатСтатусы_уэ
	|ГДЕ
	|	НЕ уатСтатусы_уэ.ПометкаУдаления
	|	И уатСтатусы_уэ.ДействуетНаЖурналыТранспортныхДокументов";
	
	ВыборкаЦвета = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЦвета.Следующий() Цикл 
		ЦветФона   = Неопределено;
		ЦветТекста = Неопределено;
		
		ХранилищеЦветФона = ВыборкаЦвета.ЦветФонаПоУмолчанию;
		Если Не ХранилищеЦветФона = Неопределено Тогда 
			ДанныеЦветФона = ХранилищеЦветФона.Получить();
			Если Не ДанныеЦветФона = Неопределено И ТипЗнч(ДанныеЦветФона) = Тип("Цвет") Тогда
				ЦветФона = ДанныеЦветФона;
			КонецЕсли;
		КонецЕсли;
		
		ХранилищеЦветТекста = ВыборкаЦвета.ЦветТекстаПоУмолчанию;
		Если Не ХранилищеЦветТекста = Неопределено Тогда 
			ДанныеЦветТекста = ХранилищеЦветТекста.Получить();
			Если Не ДанныеЦветТекста = Неопределено И ТипЗнч(ДанныеЦветТекста) = Тип("Цвет") Тогда
				ЦветТекста = ДанныеЦветТекста;
			КонецЕсли;
		КонецЕсли;
		
		Если ЦветТекста = Неопределено И ЦветФона = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		// Установка цвета реквизита шапки
		Если ВыборкаЦвета.Ссылка = Объект.Статус Тогда 
			Если Не ЦветТекста = Неопределено Тогда 
				Элементы.СтатусДокумента.ЦветТекста = ЦветТекста;
			КонецЕсли;
			
			Если Не ЦветФона = Неопределено Тогда 
				Элементы.СтатусДокумента.ЦветФона = ЦветФона;
			КонецЕсли;
		КонецЕсли;
		
		// Установка условного оформления колонки ТЧ Результаты осмотра
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		
		ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Объект.РезультатыОсмотра.Статус");
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = ВыборкаЦвета.Ссылка;
		
		Если Не ЦветТекста = Неопределено Тогда 
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветТекста);
		КонецЕсли;
		
		Если Не ЦветФона = Неопределено Тогда 
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветФона);
		КонецЕсли;
		
		ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "Предустановленный_ЦветаСтатусовШапки";
		ЭлементУсловногоОформления.Представление = НСтр("en='By status color';ru='По цвету статуса '") + ВыборкаЦвета.Наименование;
		
		ПолеОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("РезультатыОсмотраСтатус");
		ПолеОформления.Использование = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОтобразитьДанныеПЛ(ЗаполнитьТСИПрицепы = Ложь)
	
	Для Каждого ТекСтрока Из Объект.ПутевойЛист.РасходГСМ Цикл
		Если Объект.ПутевойЛист.ТранспортноеСредство = ТекСтрока.ТС Тогда
			ОстатокТопливаВыезд = ТекСтрока.ОстатокПриВыезде;
			ОстатокТопливаВозврат = ТекСтрока.ОстатокПриВозвращении;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗаполнитьТСИПрицепы Тогда
		Объект.ТС = Объект.ПутевойЛист.ТранспортноеСредство;
		Объект.Прицепы.Очистить();
		Для Каждого ТекПрицеп Из Объект.ПутевойЛист.Прицепы Цикл
			НоваяСтрока = Объект.Прицепы.Добавить();
			НоваяСтрока.ТС = ТекПрицеп.ТС;
		КонецЦикла;
	КонецЕсли;
	
	//Для Каждого ТекСтрокаЗадания Из Объект.ПутевойЛист.Задание Цикл
	//	Если ЗначениеЗаполнено(ТекСтрокаЗадания.Прицеп1) Тогда
	//		мсвСтрокиПоиска = Прицепы.НайтиСтроки(Новый Структура("ТС", ТекСтрокаЗадания.Прицеп1));
	//		Если мсвСтрокиПоиска.Количество() = 0 Тогда
	//			НоваяСтрока = Прицепы.Добавить();
	//			НоваяСтрока.ТС = ТекСтрокаЗадания.Прицеп1;
	//			НоваяСтрока.СчетчикМЧВыезда = уатОбщегоНазначения.уатТекущийСпидометр(ТекСтрокаЗадания.Прицеп1,
	//				Объект.ПутевойЛист.ДатаВыезда);
	//			НоваяСтрока.СчетчикМЧВозвращения = уатОбщегоНазначения.уатТекущийСпидометр(ТекСтрокаЗадания.Прицеп1,
	//				Объект.ПутевойЛист.ДатаВозвращения);
	//		КонецЕсли;
	//	КонецЕсли;
	//	Если ЗначениеЗаполнено(ТекСтрокаЗадания.Прицеп2) Тогда
	//		мсвСтрокиПоиска = Прицепы.НайтиСтроки(Новый Структура("ТС", ТекСтрокаЗадания.Прицеп2));
	//		Если мсвСтрокиПоиска.Количество() = 0 Тогда
	//			НоваяСтрока = Прицепы.Добавить();
	//			НоваяСтрока.ТС = ТекСтрокаЗадания.Прицеп2;
	//			НоваяСтрока.СчетчикМЧВыезда = уатОбщегоНазначения.уатТекущийСпидометр(ТекСтрокаЗадания.Прицеп2,
	//				Объект.ПутевойЛист.ДатаВыезда);
	//			НоваяСтрока.СчетчикМЧВозвращения = уатОбщегоНазначения.уатТекущийСпидометр(ТекСтрокаЗадания.Прицеп2,
	//				Объект.ПутевойЛист.ДатаВозвращения);
	//		КонецЕсли;
	//	КонецЕсли;
	//КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

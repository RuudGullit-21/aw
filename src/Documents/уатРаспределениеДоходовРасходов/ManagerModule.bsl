#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	Настройки.ПриПолученииСлужебныхРеквизитов = Ложь;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	// необходима для подключения внешних ПФ
	Заглушка = Истина;
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.УправлениеДоступом

// Позволяет переопределить ограничение, указанное в модуле менеджера объекта метаданных.
//
// Параметры:
//  Ограничение - Структура:
//    * Текст                             - Строка - ограничение доступа для пользователей.
//                                          Если пустая строка, значит, доступ разрешен.
//    * ТекстДляВнешнихПользователей      - Строка - ограничение доступа для внешних пользователей.
//                                          Если пустая строка, значит, доступ запрещен.
//    * ПоВладельцуБезЗаписиКлючейДоступа - Неопределено - определить автоматически.
//                                        - Булево - если Ложь, то всегда записывать ключи доступа,
//                                          если Истина, тогда не записывать ключи доступа,
//                                          а использовать ключи доступа владельца (требуется,
//                                          чтобы ограничение было строго по объекту-владельцу).
//   * ПоВладельцуБезЗаписиКлючейДоступаДляВнешнихПользователей - Неопределено, Булево - также
//                                          как у параметра ПоВладельцуБезЗаписиКлючейДоступа.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)";
	
	Ограничение.ТекстДляВнешнихПользователей = Ограничение.Текст;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

#КонецОбласти

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

Процедура ИнициализироватьДанныеДокумента(ДокументСсылка, СтруктураДополнительныеСвойства) Экспорт
	
	// получение таблицы распределения
	Если СтруктураДополнительныеСвойства.Свойство("ТаблицаФинансовыйРезультат") Тогда //таблица распределения уже получена при выполнении фонового задания при интерактивном проведении документа
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаФинансовыйРезультат", СтруктураДополнительныеСвойства.ТаблицаФинансовыйРезультат);
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаДоходы", СтруктураДополнительныеСвойства.ТаблицаДоходы);
		СтруктураДополнительныеСвойства.ТаблицыДляДвижений.Вставить("ТаблицаРасходы", СтруктураДополнительныеСвойства.ТаблицаРасходы);
	Иначе //таблица не получена - если проведение без открытия формы документа
		СтруктураДополнительныеСвойства.Вставить("ИсключатьДвиженияДокумента");
		СтруктураПараметров = Новый Структура("ДокументСсылка, СтруктураДополнительныеСвойства",
			ДокументСсылка, СтруктураДополнительныеСвойства);
		уатПроведение.СформироватьФинансовыйРезультат(СтруктураПараметров);
	КонецЕсли;
	
	// сообщение об ошибках, полученных при распределении
	Если СтруктураДополнительныеСвойства.Свойство("ТекстОшибок") И ЗначениеЗаполнено(СтруктураДополнительныеСвойства.ТекстОшибок) Тогда
		уатОбщегоНазначенияТиповые.СообщитьОбОшибке(СтруктураДополнительныеСвойства.ТекстОшибок);
	КонецЕсли;
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДоходы.Колонки.Добавить("ВидДвижения");
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДоходы.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход, "ВидДвижения");
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДоходы.Колонки.Добавить("Регистратор");
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДоходы.ЗаполнитьЗначения(ДокументСсылка, "Регистратор");
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДоходы.Колонки.Добавить("Период");
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДоходы.ЗаполнитьЗначения(ДокументСсылка.Дата, "Период");
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасходы.Колонки.Добавить("ВидДвижения");
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасходы.ЗаполнитьЗначения(ВидДвиженияНакопления.Расход, "ВидДвижения");
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасходы.Колонки.Добавить("Регистратор");
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасходы.ЗаполнитьЗначения(ДокументСсылка, "Регистратор");
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасходы.Колонки.Добавить("Период");
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасходы.ЗаполнитьЗначения(ДокументСсылка.Дата, "Период");
	
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаФинансовыйРезультат.Колонки.Добавить("Организация");
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаФинансовыйРезультат.ЗаполнитьЗначения(ДокументСсылка.Организация, "Организация");
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаФинансовыйРезультат.Колонки.Добавить("Регистратор");
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаФинансовыйРезультат.ЗаполнитьЗначения(ДокументСсылка, "Регистратор");
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаФинансовыйРезультат.Колонки.Добавить("Период");
	СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаФинансовыйРезультат.ЗаполнитьЗначения(ДокументСсылка.Дата, "Период");
	
	// управляемые блокировки
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.уатДоходы");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаДоходы;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Организация", "Организация");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Подразделение", "Подразделение");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ТС", "ТС");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("СтатьяДоходов", "СтатьяДоходов");
	Блокировка.Заблокировать();
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.уатРасходы");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаРасходы;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Организация", "Организация");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Подразделение", "Подразделение");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ТС", "ТС");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("СтатьяРасходов", "СтатьяРасходов");
	Блокировка.Заблокировать();
	Блокировка = Новый БлокировкаДанных;
	ЭлементБлокировки = Блокировка.Добавить("РегистрНакопления.уатФинансовыеРезультаты");
	ЭлементБлокировки.Режим = РежимБлокировкиДанных.Исключительный;
	ЭлементБлокировки.ИсточникДанных = СтруктураДополнительныеСвойства.ТаблицыДляДвижений.ТаблицаФинансовыйРезультат;
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Организация", "Организация");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("Подразделение", "Подразделение");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("ТС", "ТС");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("СтатьяДоходов", "СтатьяДоходов");
	ЭлементБлокировки.ИспользоватьИзИсточникаДанных("СтатьяРасходов", "СтатьяРасходов");
	Блокировка.Заблокировать();
КонецПроцедуры // ИнициализироватьДанныеДокумента()

Процедура ВыполнитьКонтроль(ДокументСсылка, ДополнительныеСвойства, Отказ, УдалениеПроведения = Ложь) Экспорт
	
	Заглушка = Истина;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли
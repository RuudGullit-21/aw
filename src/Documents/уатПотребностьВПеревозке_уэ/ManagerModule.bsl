#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

#Область ДляВызоваИзДругихПодсистем

// СтандартныеПодсистемы.Печать

// Заполняет список команд печати.
// 
// Параметры:
//   КомандыПечати - ТаблицаЗначений - состав полей см. в функции УправлениеПечатью.СоздатьКоллекциюКомандПечати
//
Процедура ДобавитьКомандыПечати(КомандыПечати) Экспорт
	// Реестр документов
	КомандаПечати = КомандыПечати.Добавить();
	КомандаПечати.Идентификатор  = "Реестр";
	КомандаПечати.Представление  = НСтр("en='Document register';ru='Реестр документов'");
	КомандаПечати.ЗаголовокФормы = НСтр("en='Register of documents ""Need for the carriage""';ru='Реестр документов ""Потребность в перевозке""'");
	КомандаПечати.Обработчик     = "уатОбщегоНазначенияТиповыеКлиент.ВыполнитьКомандуПечатиРеестраДокументов";
	КомандаПечати.СписокФорм     = "ФормаСписка";
	КомандаПечати.Порядок        = 100;
КонецПроцедуры

// Конец СтандартныеПодсистемы.Печать

// СтандартныеПодсистемы.ВерсионированиеОбъектов

// Определяет настройки объекта для подсистемы ВерсионированиеОбъектов.
//
// Параметры:
//  Настройки - Структура - настройки подсистемы.
Процедура ПриОпределенииНастроекВерсионированияОбъектов(Настройки) Экспорт
	
	Настройки.ПриПолученииСлужебныхРеквизитов = Ложь;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов

// СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла

// Устанавливает параметры загрузки.
//
// Параметры:
//  Параметры	 - Структура	 - Структура параметров
//
Процедура УстановитьПараметрыЗагрузкиИзФайлаВТЧ(Параметры) Экспорт
	СпециальнойОбработкиНеТребуется = Истина;
КонецПроцедуры

// Производит сопоставление данных, загружаемых в табличную часть ПолноеИмяТабличнойЧасти,
//  с данными в ИБ, и заполняет параметры АдресТаблицыСопоставления и СписокНеоднозначностей.
//
// Параметры:
//  АдресЗагружаемыхДанных		 - Строка	 - адрес временного хранилища с таблицей значений, в которой
//  	находятся загруженные данные из файла. Состав колонок:
//  	* Идентификатор – Число – порядковый номер строки;
//  	* остальные колонки соответствуют колонкам макета ЗагрузкаИзФайла.
//  АдресТаблицыСопоставления	 - Строка	 - адрес временного хранилища с пустой таблицей значений,
//  	являющейся копией табличной части документа,
//  	которую необходимо заполнить из таблицы АдресЗагружаемыхДанных.
//  СписокНеоднозначностей		 - ТаблицаЗначений	 - список неоднозначных значений,
//  	для которых в ИБ имеется несколько подходящих вариантов.
//  	* Колонка       – Строка – имя колонки, в которой была обнаружена неоднозначность;
//  	* Идентификатор – Число  – идентификатор строки, в которой была обнаружена неоднозначность.
//  ПолноеИмяТабличнойЧасти		 - Строка			 - полное имя табличной части, в которую загружаются данные.
//  ДополнительныеПараметры		 - Структура		 - Любые дополнительные сведения.
//
Процедура СопоставитьЗагружаемыеДанные(АдресЗагружаемыхДанных, АдресТаблицыСопоставления, СписокНеоднозначностей, ПолноеИмяТабличнойЧасти, ДополнительныеПараметры) Экспорт
	
	Если ПолноеИмяТабличнойЧасти = "Документ.уатПотребностьВПеревозке_уэ.ТабличнаяЧасть.ТоварныйСостав" Тогда 
		СопоставитьЗагружаемыеДанныеТоварныйСостав(АдресЗагружаемыхДанных, АдресТаблицыСопоставления, СписокНеоднозначностей, ДополнительныеПараметры);
	ИначеЕсли ПолноеИмяТабличнойЧасти = "Документ.уатПотребностьВПеревозке_уэ.ТабличнаяЧасть.Услуги" Тогда 
		СопоставитьЗагружаемыеДанныеУслуги(АдресЗагружаемыхДанных, АдресТаблицыСопоставления, СписокНеоднозначностей, ДополнительныеПараметры);
	ИначеЕсли ПолноеИмяТабличнойЧасти = "Документ.уатПотребностьВПеревозке_уэ.ТабличнаяЧасть.ГрузовойСостав" Тогда 
		СопоставитьЗагружаемыеДанныеГрузовойСостав(АдресЗагружаемыхДанных, АдресТаблицыСопоставления, СписокНеоднозначностей, ДополнительныеПараметры);
	ИначеЕсли ПолноеИмяТабличнойЧасти = "Документ.уатПотребностьВПеревозке_уэ.ТабличнаяЧасть.Расходы" Тогда 
		СопоставитьЗагружаемыеДанныеЗатраты(АдресЗагружаемыхДанных, АдресТаблицыСопоставления, СписокНеоднозначностей, ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла

// СтандартныеПодсистемы.УправлениеДоступом

// Позволяет переопределить ограничение, указанное в модуле менеджера объекта метаданных.
//
// Параметры:
//  Ограничение - Структура:
//    * Текст                             - Строка - ограничение доступа для пользователей.
//                                          Если пустая строка, значит, доступ разрешен.
//    * ТекстДляВнешнихПользователей      - Строка - ограничение доступа для внешних пользователей.
//                                          Если пустая строка, значит, доступ запрещен.
//    * ПоВладельцуБезЗаписиКлючейДоступа - Неопределено - определить автоматически.
//                                        - Булево - если Ложь, то всегда записывать ключи доступа,
//                                          если Истина, тогда не записывать ключи доступа,
//                                          а использовать ключи доступа владельца (требуется,
//                                          чтобы ограничение было строго по объекту-владельцу).
//   * ПоВладельцуБезЗаписиКлючейДоступаДляВнешнихПользователей - Неопределено, Булево - также
//                                          как у параметра ПоВладельцуБезЗаписиКлючейДоступа.
//
Процедура ПриЗаполненииОграниченияДоступа(Ограничение) Экспорт
	
	Ограничение.Текст =
	"РазрешитьЧтениеИзменение
	|ГДЕ
	|	ЗначениеРазрешено(Организация)
	|	И ЗначениеРазрешено(Контрагент)";
	
	Ограничение.ТекстДляВнешнихПользователей = Ограничение.Текст;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.УправлениеДоступом

// СтандартныеПодсистемы.ШаблоныСообщений

// Вызывается при подготовке шаблонов сообщений и позволяет переопределить список реквизитов и вложений.
//
// Параметры:
//  Реквизиты               - ДеревоЗначений - список реквизитов шаблона.
//         ** Имя            - Строка - Уникальное имя общего реквизита.
//         ** Представление  - Строка - Представление общего реквизита.
//         ** Тип            - Тип    - Тип реквизита. По умолчанию строка.
//         ** Формат         - Строка - Формат вывода значения для чисел, дат, строк и булевых значений.
//  Вложения                - ТаблицаЗначений - печатные формы и вложения
//         ** Имя            - Строка - Уникальное имя вложения.
//         ** Представление  - Строка - Представление варианта.
//         ** ТипФайла       - Строка - Тип вложения, который соответствует расширению файла: "pdf",
//                           "png", "jpg", mxl" и др.
//  ДополнительныеПараметры - Структура - дополнительные сведения о шаблоне сообщений.
//
Процедура ПриПодготовкеШаблонаСообщения(Реквизиты, Вложения, ДополнительныеПараметры) Экспорт
	// Удаление из списка вложений печатной формы "Реестр документов"
	НомСтроки = Вложения.Количество()-1;
	Пока НомСтроки >= 0 Цикл
	    Если Вложения[НомСтроки].Имя = "Реестр" И Вложения[НомСтроки].Статус = "ПечатнаяФорма" Тогда
	        Вложения.Удалить(НомСтроки);
	    КонецЕсли;
    	НомСтроки = НомСтроки - 1;
	КонецЦикла;
КонецПроцедуры

// Вызывается в момент создания сообщений по шаблону для заполнения значений реквизитов и вложений.
//
// Параметры:
//  Сообщение - Структура - структура с ключами:
//    * ЗначенияРеквизитов - Соответствие - список используемых в шаблоне реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * ЗначенияОбщихРеквизитов - Соответствие - список используемых в шаблоне общих реквизитов.
//      ** Ключ     - Строка - имя реквизита в шаблоне;
//      ** Значение - Строка - значение заполнения в шаблоне.
//    * Вложения - Соответствие - значения реквизитов 
//      ** Ключ     - Строка - имя вложения в шаблоне;
//      ** Значение - ДвоичныеДанные, Строка - двоичные данные или адрес во временном хранилище вложения.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//  ДополнительныеПараметры - Структура -  Дополнительная информация о шаблоне сообщения.
//
Процедура ПриФормированииСообщения(Сообщение, ПредметСообщения, ДополнительныеПараметры) Экспорт
	
КонецПроцедуры

// Заполняет список получателей SMS при отправке сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиSMS - ТаблицаЗначений - список получается SMS.
//     * НомерТелефона - Строка - номер телефона, куда будет отправлено сообщение SMS.
//     * Представление - Строка - представление получателя сообщения SMS.
//     * Контакт       - СправочникСсылка - контакт, которому принадлежит номер телефона.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//
Процедура ПриЗаполненииТелефоновПолучателейВСообщении(ПолучателиSMS, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Заполняет список получателей письма при отправки сообщения сформированного по шаблону.
//
// Параметры:
//   ПолучателиПисьма - ТаблицаЗначений - список получается письма.
//     * Адрес           - Строка - адрес электронной почты получателя.
//     * Представление   - Строка - представление получается письма.
//  ПредметСообщения - ЛюбаяСсылка - ссылка на объект являющийся источником данных.
//
Процедура ПриЗаполненииПочтыПолучателейВСообщении(ПолучателиПисьма, ПредметСообщения) Экспорт
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ШаблоныСообщений

// СтандартныеПодсистемы.Взаимодействия

// Возвращает контакты по предмету.
//
// Параметры:
//  Ссылка	 - СправочникСсылка	 - Ссылка на предмет-владелец контактов
// 
// Возвращаемое значение:
//  Массив - массив контактов
//
Функция ПолучитьКонтакты(Ссылка) Экспорт
	
	Если Не ЗначениеЗаполнено(Ссылка) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПоКонтактам();
	Запрос.УстановитьПараметр("Предмет", Ссылка);
	
	НачатьТранзакцию();
	Попытка
		РезультатЗапроса = Запрос.Выполнить();
		
		Если РезультатЗапроса.Пустой() Тогда
			Результат = Неопределено;
		Иначе
			Результат = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Контакт");
		КонецЕсли;
		
		ЗафиксироватьТранзакцию();
	Исключение
		ОтменитьТранзакцию();
		ВызватьИсключение;
	КонецПопытки;
	
	Возврат Результат;
	
КонецФункции

// Возвращает текст запроса по контактам взаимодействий, содержащимся в документе.
//
// Параметры:
//  ЭтоФрагментЗапроса	 - Булево	 - признак, указывающий на необходимость добавления конструкции ОБЪЕДИНИТЬ в запрос.
// 
// Возвращаемое значение:
//  Строка - сформированный текст запроса для получения контактов взаимодействий объекта.
//
Функция ТекстЗапросаПоКонтактам(ЭтоФрагментЗапроса = Ложь) Экспорт
	
	ТекстЗапроса = "
	|%ШаблонВыбрать%
	|	уатПотребностьВПеревозке_уэ.Контрагент КАК Контакт
	|ИЗ
	|	Документ.уатПотребностьВПеревозке_уэ КАК уатПотребностьВПеревозке_уэ
	|ГДЕ
	|	уатПотребностьВПеревозке_уэ.Ссылка = &Предмет
	|	И ТИПЗНАЧЕНИЯ(уатПотребностьВПеревозке_уэ.Контрагент) = ТИП(Справочник.Контрагенты)
	|	И (НЕ уатПотребностьВПеревозке_уэ.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатПотребностьВПеревозке_уэ.Ответственный
	|ИЗ
	|	Документ.уатПотребностьВПеревозке_уэ КАК уатПотребностьВПеревозке_уэ
	|ГДЕ
	|	уатПотребностьВПеревозке_уэ.Ссылка = &Предмет
	|	И (НЕ уатПотребностьВПеревозке_уэ.Ответственный = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))";
	
	ТекстЗапроса = СтрЗаменить(
		ТекстЗапроса, 
		"%ШаблонВыбрать%", 
		?(ЭтоФрагментЗапроса, "ВЫБРАТЬ РАЗЛИЧНЫЕ", "ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ")
	);
	
	Если ЭтоФрагментЗапроса Тогда
		ТекстЗапроса = "
			| ОБЪЕДИНИТЬ ВСЕ
			|" + ТекстЗапроса;
	КонецЕсли;
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Конец СтандартныеПодсистемы.Взаимодействия

#КонецОбласти

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

// СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла

// Возвращает список подходящих объектов ИБ для неоднозначного значения ячейки.
// 
// Параметры:
//   ПолноеИмяТабличнойЧасти  – Строка – Полное имя табличной части, в которую загружаются данные.
//     ИмяКолонки               – Строка – Имя колонки, в который возникла неоднозначность. 
//  СписокНеоднозначностей    – Массив  – Массив для заполнения с неоднозначными данными.
//  ЗагружаемыеЗначенияСтрока – Строка  – Загружаемые данные, на основании которых возникла неоднозначность.
//  ДополнительныеПараметры   – ЛюбойТип – Любые дополнительные сведения
//
Процедура ЗаполнитьСписокНеоднозначностей(ПолноеИмяТабличнойЧасти, СписокНеоднозначностей, ИмяКолонки, ЗагружаемыеЗначенияСтрока, ДополнительныеПараметры) Экспорт
	
	Если ИмяКолонки = "Номенклатура" Тогда
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Наименование", ЗагружаемыеЗначенияСтрока.Номенклатура);
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Номенклатура.Ссылка
		|ИЗ
		|	Справочник.Номенклатура КАК Номенклатура
		|ГДЕ
		|	Номенклатура.Наименование = &Наименование";
		
		ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СписокНеоднозначностей.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
		КонецЦикла;
		
	ИначеЕсли ИмяКолонки = "ГрузовоеМесто" Тогда
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Наименование", ЗагружаемыеЗначенияСтрока.ГрузовоеМесто);
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатГрузовыеМеста_уэ.Ссылка
		|ИЗ
		|	Справочник.уатГрузовыеМеста_уэ КАК уатГрузовыеМеста_уэ
		|ГДЕ
		|	уатГрузовыеМеста_уэ.Наименование = &Наименование";
		
		ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СписокНеоднозначностей.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
		КонецЦикла;
		
	ИначеЕсли ИмяКолонки = "ВидУпаковки" Тогда
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Наименование", ЗагружаемыеЗначенияСтрока.ВидУпаковки);
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатВидыУпаковки_уэ.Ссылка
		|ИЗ
		|	Справочник.уатВидыУпаковки_уэ КАК уатВидыУпаковки_уэ
		|ГДЕ
		|	уатВидыУпаковки_уэ.Наименование = &Наименование";
		
		ВыборкаДетальныеЗаписи = Запрос.Выполнить().Выбрать();
		Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
			СписокНеоднозначностей.Добавить(ВыборкаДетальныеЗаписи.Ссылка);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла

// Получает дополнительные реквизиты для отображения в отчете "Реестр документов"
// 
// Возвращаемое значение:
//  Структура - доп. реквизитов
//
Функция ПолучитьДополнительныеРеквизитыДляРеестра() Экспорт
	
	Результат = Новый Структура("Информация", "Контрагент");
	Возврат Результат;
	
КонецФункции

// Вызывается при переходе на версию конфигурации 2.2.8.2
// Выполняет обновление способа хранения отрезков пути для FTL заказов
//
// Параметры:
//  ДокОбъект			 - 	 -  
Процедура ПерезаполнитьОтрезкиПути(ДокОбъект) Экспорт
	Если ДокОбъект.ДетализацияЗаказов = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам
		Или ДокОбъект.ДетализацияЗаказов = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам Тогда
		ТаблицаГрузов = ДокОбъект.ГрузовойСостав;
	Иначе
		ТаблицаГрузов = ДокОбъект.ТоварныйСостав;
	КонецЕсли;
	
	Отрезки = ТаблицаГрузов.Выгрузить(, "ОтрезокПути, ID");
	Отрезки.Свернуть("ОтрезокПути, ID");
	
	Для Каждого ТекОтрезок Из Отрезки Цикл
		Если ТекОтрезок = "" Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокиГрузов = ТаблицаГрузов.НайтиСтроки(Новый Структура("ОтрезокПути, ID", ТекОтрезок.ОтрезокПути, ТекОтрезок.ID));
		
		ОтрезкиПострочно = СтрЗаменить(ТекОтрезок.ОтрезокПути, " - ", Символы.ПС);
		
		Если СтрокиГрузов.Количество() Тогда 
			НомерПунктПогрузка  = Неопределено;
			НомерПунктРазгрузка = Неопределено;
			
			Для Сч = 0 По ДокОбъект.ПромежуточныеПункты.Количество() - 1 Цикл
				
				Если ДокОбъект.ПромежуточныеПункты[Сч].ID <> ТекОтрезок.ID Тогда
					Продолжить;
				КонецЕсли;
				
				Если Строка(ДокОбъект.ПромежуточныеПункты[Сч].Пункт) = СтрПолучитьСтроку(ОтрезкиПострочно, 1)
						И (ДокОбъект.ПромежуточныеПункты[Сч].ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка
						Или ДокОбъект.ПромежуточныеПункты[Сч].ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяПогрузка) Тогда 
					НомерПунктПогрузка = Сч+1;
					Для Сч2 = (Сч + 1) По ДокОбъект.ПромежуточныеПункты.Количество() - 1 Цикл 
						Если ДокОбъект.ПромежуточныеПункты[Сч2].ID <> ТекОтрезок.ID Тогда
							Продолжить;
						КонецЕсли;
						Если Строка(ДокОбъект.ПромежуточныеПункты[Сч2].Пункт) = СтрПолучитьСтроку(ОтрезкиПострочно, 2)
								И (ДокОбъект.ПромежуточныеПункты[Сч2].ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка
								Или ДокОбъект.ПромежуточныеПункты[Сч2].ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяРазгрузка) Тогда 
							НомерПунктРазгрузка = Сч2+1;
							Прервать;
						КонецЕсли;
					КонецЦикла;
					
					Прервать;
				КонецЕсли;
				
			КонецЦикла;
			
			Если Не НомерПунктПогрузка = Неопределено И Не НомерПунктРазгрузка = Неопределено Тогда 
				Для Каждого ТекСтрока Из СтрокиГрузов Цикл
					Для Сч = НомерПунктПогрузка По НомерПунктРазгрузка-1 Цикл                  
						НоваяСтрока = ДокОбъект.ОтрезкиПути.Добавить();
						НоваяСтрока.Груз = ТекСтрока.НомерСтроки;
						НоваяСтрока.ПунктОтправления = Сч;
						НоваяСтрока.ПунктНазначения = Сч+1;
						НоваяСтрока.ID = ТекОтрезок.ID;
					КонецЦикла;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекСтрока Из ДокОбъект.ТоварныйСостав Цикл
		ТекСтрока.ОтрезокПути = "";
	КонецЦикла;
	Для Каждого ТекСтрока Из ДокОбъект.ГрузовойСостав Цикл
		ТекСтрока.ОтрезокПути = "";
	КонецЦикла;
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Процедура СопоставитьЗагружаемыеДанныеТоварныйСостав(АдресЗагружаемыхДанных, АдресТаблицыСопоставления, СписокНеоднозначностей, ДополнительныеПараметры)
	
	Товары = ПолучитьИзВременногоХранилища(АдресТаблицыСопоставления);
	ЗагружаемыеДанные = ПолучитьИзВременногоХранилища(АдресЗагружаемыхДанных);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДанныеДляСопоставления", ЗагружаемыеДанные);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДанныеДляСопоставления.Номенклатура,
	|	ДанныеДляСопоставления.ГрузовоеМесто,
	|	ДанныеДляСопоставления.Идентификатор
	|ПОМЕСТИТЬ ДанныеДляСопоставления
	|ИЗ
	|	&ДанныеДляСопоставления КАК ДанныеДляСопоставления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(СправочникНоменклатура.Ссылка) КАК Ссылка,
	|	ДанныеДляСопоставления.Идентификатор,
	|	КОЛИЧЕСТВО(ДанныеДляСопоставления.Идентификатор) КАК Количество
	|ИЗ
	|	ДанныеДляСопоставления КАК ДанныеДляСопоставления
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО (СправочникНоменклатура.Наименование ПОДОБНО ДанныеДляСопоставления.Номенклатура)
	|ГДЕ
	|	НЕ СправочникНоменклатура.Ссылка ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДляСопоставления.Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(уатГрузовыеМеста_уэ.Ссылка) КАК Ссылка,
	|	ДанныеДляСопоставления.Идентификатор,
	|	КОЛИЧЕСТВО(ДанныеДляСопоставления.Идентификатор) КАК Количество
	|ИЗ
	|	ДанныеДляСопоставления КАК ДанныеДляСопоставления
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатГрузовыеМеста_уэ КАК уатГрузовыеМеста_уэ
	|		ПО (уатГрузовыеМеста_уэ.Наименование ПОДОБНО ДанныеДляСопоставления.ГрузовоеМесто)
	|ГДЕ
	|	НЕ уатГрузовыеМеста_уэ.Ссылка ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДляСопоставления.Идентификатор";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаНоменклатура = РезультатЗапроса[1].Выгрузить();
	ТаблицаГрузовыхМест = РезультатЗапроса[2].Выгрузить();
	
	МенеджерВременныхТаблиц.Закрыть();
	
	мТекПользователь = ПользователиКлиентСервер.АвторизованныйПользователь();
	мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Для Каждого СтрокаТаблицы Из ЗагружаемыеДанные Цикл
		Товар = Товары.Добавить();
		Товар.Идентификатор  = СтрокаТаблицы.Идентификатор;
		Товар.Количество     = СтрокаТаблицы.Количество;
		Товар.ВесБрутто      = СтрокаТаблицы.ВесБрутто;
		Товар.Объем          = СтрокаТаблицы.Объем;
		Товар.КоличествоМест = СтрокаТаблицы.КоличествоМест;
		Товар.СтавкаНДС      = СтавкаНДСПоПредставлению(СтрокаТаблицы.СтавкаНДС);
		Товар.Количество     = СтрокаТаблицы.Количество;
		Товар.Цена           = СтрокаТаблицы.Цена;
		Товар.Сумма          = Товар.Количество * Товар.Цена;
		
		СтрокаНоменклатура = ТаблицаНоменклатура.Найти(СтрокаТаблицы.Идентификатор, "Идентификатор");
		Если СтрокаНоменклатура = Неопределено И НЕ ПустаяСтрока(СтрокаТаблицы.Номенклатура) Тогда //создание нового элемента
			НовыйЭлемент = Справочники.Номенклатура.СоздатьЭлемент();
			НовыйЭлемент.УстановитьНовыйКод();
			НовыйЭлемент.Наименование = СтрокаТаблицы.Номенклатура;
			НовыйЭлемент.НаименованиеПолное = СтрокаТаблицы.Номенклатура;
			НовыйЭлемент.ВидНоменклатуры = Справочники.ВидыНоменклатуры.Товар;
			НовыйЭлемент.Услуга = Ложь;
			НовыйЭлемент.ЕдиницаИзмерения = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
				мТекПользователь, "ОсновнаяЕдиницаПоКлассификатору");
			НовыйЭлемент.СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
				мТекПользователь, "ОсновнаяСтавкаНДС");
				
			Попытка
				НовыйЭлемент.Записать();
			Исключение
			КонецПопытки;
			
			Если НЕ НовыйЭлемент.Ссылка.Пустая() Тогда
				Товар.Номенклатура = НовыйЭлемент.Ссылка;
				// нужно еще заполнить единицу хранения остатков для подстановки в ТЧ
				Если ЗначениеЗаполнено(НовыйЭлемент.ЕдиницаИзмерения) Тогда
					НоваяЕдиницаОстатков = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
					НоваяЕдиницаОстатков.Владелец = НовыйЭлемент.Ссылка;
					НоваяЕдиницаОстатков.Наименование = Строка(НовыйЭлемент.ЕдиницаИзмерения);
					НоваяЕдиницаОстатков.ЕдиницаПоКлассификатору = НовыйЭлемент.ЕдиницаИзмерения;
					НоваяЕдиницаОстатков.Коэффициент = 1;
					Попытка
						НоваяЕдиницаОстатков.Записать();
					Исключение
					КонецПопытки;
					Если НЕ НоваяЕдиницаОстатков.Ссылка.Пустая() Тогда
						НовыйЭлемент.ЕдиницаХраненияОстатков = НоваяЕдиницаОстатков.Ссылка;
						Попытка
							НовыйЭлемент.Записать();
						Исключение
						КонецПопытки;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли Не СтрокаНоменклатура = Неопределено Тогда 
			Если СтрокаНоменклатура.Количество = 1 Тогда 
				Товар.Номенклатура = СтрокаНоменклатура.Ссылка;
			ИначеЕсли СтрокаНоменклатура.Количество > 1 Тогда
				ЗаписьОНеоднозначности = СписокНеоднозначностей.Добавить();
				ЗаписьОНеоднозначности.Идентификатор = СтрокаТаблицы.Идентификатор; 
				ЗаписьОНеоднозначности.Колонка = "Номенклатура";
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Товар.Номенклатура) Тогда
			Товар.ЕдиницаИзмерения = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Товар.Номенклатура, "ЕдиницаХраненияОстатков");
		КонецЕсли;
		
		СтрокаГрузовоеМесто = ТаблицаГрузовыхМест.Найти(СтрокаТаблицы.Идентификатор, "Идентификатор");
		Если СтрокаГрузовоеМесто = Неопределено И НЕ ПустаяСтрока(СтрокаТаблицы.ГрузовоеМесто) Тогда //создание нового элемента
			НовыйЭлемент = Справочники.уатГрузовыеМеста_уэ.СоздатьЭлемент();
			НовыйЭлемент.УстановитьНовыйКод();
			НовыйЭлемент.Наименование = СтрокаТаблицы.ГрузовоеМесто;
			НовыйЭлемент.Валюта = мВалютаРегламентированногоУчета;
			НовыйЭлемент.ВесБрутто = СтрокаТаблицы.ВесБрутто;
			НовыйЭлемент.Объем = СтрокаТаблицы.Объем;
			НовыйЭлемент.КоличествоМест = СтрокаТаблицы.КоличествоМест;
			//НовыйЭлемент.Высота = СтрокаТаблицы.Высота;
			//НовыйЭлемент.Длина = СтрокаТаблицы.Длина;
			//НовыйЭлемент.Ширина = СтрокаТаблицы.Ширина;
			//НовыйЭлемент.ОписаниеГруза = СтрокаТаблицы.ОписаниеГруза;
			//НовыйЭлемент.Стоимость = СтрокаТаблицы.Стоимость;
			Попытка
				НовыйЭлемент.Записать();
				Товар.ГрузовоеМесто = НовыйЭлемент.Ссылка;
			Исключение
			КонецПопытки;
			
		ИначеЕсли Не СтрокаГрузовоеМесто = Неопределено Тогда 
			Если СтрокаГрузовоеМесто.Количество = 1 Тогда 
				Товар.ГрузовоеМесто = СтрокаГрузовоеМесто.Ссылка;
			ИначеЕсли СтрокаГрузовоеМесто.Количество > 1 Тогда
				ЗаписьОНеоднозначности = СписокНеоднозначностей.Добавить();
				ЗаписьОНеоднозначности.Идентификатор = СтрокаТаблицы.Идентификатор; 
				ЗаписьОНеоднозначности.Колонка = "ГрузовоеМесто";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(Товары, АдресТаблицыСопоставления);
	
КонецПроцедуры

Процедура СопоставитьЗагружаемыеДанныеГрузовойСостав(АдресЗагружаемыхДанных, АдресТаблицыСопоставления, СписокНеоднозначностей, ДополнительныеПараметры)
	
	ГрузовойСостав = ПолучитьИзВременногоХранилища(АдресТаблицыСопоставления);
	ЗагружаемыеДанные = ПолучитьИзВременногоХранилища(АдресЗагружаемыхДанных);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДанныеДляСопоставления", ЗагружаемыеДанные);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДанныеДляСопоставления.ГрузовоеМесто,
	|	ДанныеДляСопоставления.ВидУпаковки,
	|	ДанныеДляСопоставления.Идентификатор
	|ПОМЕСТИТЬ ДанныеДляСопоставления
	|ИЗ
	|	&ДанныеДляСопоставления КАК ДанныеДляСопоставления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(уатГрузовыеМеста_уэ.Ссылка) КАК Ссылка,
	|	ДанныеДляСопоставления.Идентификатор,
	|	КОЛИЧЕСТВО(ДанныеДляСопоставления.Идентификатор) КАК Количество
	|ИЗ
	|	ДанныеДляСопоставления КАК ДанныеДляСопоставления
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатГрузовыеМеста_уэ КАК уатГрузовыеМеста_уэ
	|		ПО (уатГрузовыеМеста_уэ.Наименование ПОДОБНО ДанныеДляСопоставления.ГрузовоеМесто)
	|ГДЕ
	|	НЕ уатГрузовыеМеста_уэ.Ссылка ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДляСопоставления.Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(уатВидыУпаковки_уэ.Ссылка) КАК Ссылка,
	|	ДанныеДляСопоставления.Идентификатор,
	|	КОЛИЧЕСТВО(ДанныеДляСопоставления.Идентификатор) КАК Количество
	|ИЗ
	|	ДанныеДляСопоставления КАК ДанныеДляСопоставления
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатВидыУпаковки_уэ КАК уатВидыУпаковки_уэ
	|		ПО (уатВидыУпаковки_уэ.Наименование ПОДОБНО ДанныеДляСопоставления.ВидУпаковки)
	|ГДЕ
	|	НЕ уатВидыУпаковки_уэ.Ссылка ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДляСопоставления.Идентификатор";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаГрузовыхМест = РезультатЗапроса[1].Выгрузить();
	ТаблицаВидыУпаковки = РезультатЗапроса[2].Выгрузить();
	
	МенеджерВременныхТаблиц.Закрыть();
	
	мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Для Каждого СтрокаТаблицы Из ЗагружаемыеДанные Цикл
		НовыйГруз = ГрузовойСостав.Добавить();
		НовыйГруз.ВесБрутто      = СтрокаТаблицы.ВесБрутто;
		НовыйГруз.Объем          = СтрокаТаблицы.Объем;
		НовыйГруз.КоличествоМест = СтрокаТаблицы.КоличествоМест;
		НовыйГруз.Высота         = СтрокаТаблицы.Высота;
		НовыйГруз.Длина          = СтрокаТаблицы.Длина;
		НовыйГруз.Ширина         = СтрокаТаблицы.Ширина;
		НовыйГруз.Стоимость      = СтрокаТаблицы.Стоимость;
		НовыйГруз.ОписаниеГруза  = СтрокаТаблицы.ОписаниеГруза;
		
		СтрокаВидУпаковки = ТаблицаВидыУпаковки.Найти(СтрокаТаблицы.Идентификатор, "Идентификатор");
		Если СтрокаВидУпаковки = Неопределено И НЕ ПустаяСтрока(СтрокаТаблицы.ВидУпаковки) Тогда 
			НовыйЭлемент = Справочники.уатВидыУпаковки_уэ.СоздатьЭлемент();
			НовыйЭлемент.УстановитьНовыйКод();
			НовыйЭлемент.Наименование = СтрокаТаблицы.ВидУпаковки;
			НовыйЭлемент.Коэффициент = 1;
			Попытка
				НовыйЭлемент.Записать();
				НовыйГруз.ВидУпаковки = НовыйЭлемент.Ссылка;
			Исключение
			КонецПопытки;
			
		ИначеЕсли Не СтрокаВидУпаковки = Неопределено Тогда 
			Если СтрокаВидУпаковки.Количество = 1 Тогда 
				НовыйГруз.ВидУпаковки = СтрокаВидУпаковки.Ссылка;
			ИначеЕсли СтрокаВидУпаковки.Количество > 1 Тогда
				ЗаписьОНеоднозначности = СписокНеоднозначностей.Добавить();
				ЗаписьОНеоднозначности.Идентификатор = СтрокаТаблицы.Идентификатор; 
				ЗаписьОНеоднозначности.Колонка = "ВидУпаковки";
			КонецЕсли;
		КонецЕсли;
		
		СтрокаГрузовоеМесто = ТаблицаГрузовыхМест.Найти(СтрокаТаблицы.Идентификатор, "Идентификатор");
		Если СтрокаГрузовоеМесто = Неопределено И НЕ ПустаяСтрока(СтрокаТаблицы.ГрузовоеМесто) Тогда //создание нового элемента
			НовыйЭлемент = Справочники.уатГрузовыеМеста_уэ.СоздатьЭлемент();
			НовыйЭлемент.УстановитьНовыйКод();
			НовыйЭлемент.Наименование = СтрокаТаблицы.ГрузовоеМесто;
			НовыйЭлемент.Валюта = мВалютаРегламентированногоУчета;
			НовыйЭлемент.ВесБрутто = СтрокаТаблицы.ВесБрутто;
			НовыйЭлемент.ВидУпаковки = НовыйГруз.ВидУпаковки;
			НовыйЭлемент.Высота = СтрокаТаблицы.Высота;
			НовыйЭлемент.Длина = СтрокаТаблицы.Длина;
			НовыйЭлемент.КоличествоМест = СтрокаТаблицы.КоличествоМест;
			НовыйЭлемент.Объем = СтрокаТаблицы.Объем;
			НовыйЭлемент.ОписаниеГруза = СтрокаТаблицы.ОписаниеГруза;
			НовыйЭлемент.Стоимость = СтрокаТаблицы.Стоимость;
			НовыйЭлемент.Ширина = СтрокаТаблицы.Ширина;
			Попытка
				НовыйЭлемент.Записать();
				НовыйГруз.ГрузовоеМесто = НовыйЭлемент.Ссылка;
			Исключение
			КонецПопытки;
			
		ИначеЕсли Не СтрокаГрузовоеМесто = Неопределено Тогда 
			Если СтрокаГрузовоеМесто.Количество = 1 Тогда 
				НовыйГруз.ГрузовоеМесто = СтрокаГрузовоеМесто.Ссылка;
			ИначеЕсли СтрокаГрузовоеМесто.Количество > 1 Тогда
				ЗаписьОНеоднозначности = СписокНеоднозначностей.Добавить();
				ЗаписьОНеоднозначности.Идентификатор = СтрокаТаблицы.Идентификатор; 
				ЗаписьОНеоднозначности.Колонка = "ГрузовоеМесто";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(ГрузовойСостав, АдресТаблицыСопоставления);
	
КонецПроцедуры

Процедура СопоставитьЗагружаемыеДанныеУслуги(АдресЗагружаемыхДанных, АдресТаблицыСопоставления, СписокНеоднозначностей, ДополнительныеПараметры)
	
	Услуги = ПолучитьИзВременногоХранилища(АдресТаблицыСопоставления);
	ЗагружаемыеДанные = ПолучитьИзВременногоХранилища(АдресЗагружаемыхДанных);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДанныеДляСопоставления", ЗагружаемыеДанные);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДанныеДляСопоставления.Номенклатура КАК Номенклатура,
	|	ДанныеДляСопоставления.Валюта КАК Валюта,
	|	ДанныеДляСопоставления.Идентификатор КАК Идентификатор
	|ПОМЕСТИТЬ ДанныеДляСопоставления
	|ИЗ
	|	&ДанныеДляСопоставления КАК ДанныеДляСопоставления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(СправочникНоменклатура.Ссылка) КАК Ссылка,
	|	ДанныеДляСопоставления.Идентификатор КАК Идентификатор,
	|	КОЛИЧЕСТВО(ДанныеДляСопоставления.Идентификатор) КАК Количество
	|ИЗ
	|	ДанныеДляСопоставления КАК ДанныеДляСопоставления
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО (СправочникНоменклатура.Наименование ПОДОБНО ДанныеДляСопоставления.Номенклатура)
	|ГДЕ
	|	НЕ СправочникНоменклатура.Ссылка ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДляСопоставления.Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(СправочникВалюты.Ссылка) КАК Ссылка,
	|	ДанныеДляСопоставления.Идентификатор КАК Идентификатор,
	|	КОЛИЧЕСТВО(ДанныеДляСопоставления.Идентификатор) КАК Количество
	|ИЗ
	|	ДанныеДляСопоставления КАК ДанныеДляСопоставления
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Валюты КАК СправочникВалюты
	|		ПО (СправочникВалюты.Наименование ПОДОБНО ДанныеДляСопоставления.Валюта)
	|ГДЕ
	|	НЕ СправочникВалюты.Ссылка ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДляСопоставления.Идентификатор";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаНоменклатура = РезультатЗапроса[1].Выгрузить();
	ТаблицаВалюта       = РезультатЗапроса[2].Выгрузить();
	
	МенеджерВременныхТаблиц.Закрыть();
	
	мТекПользователь = ПользователиКлиентСервер.АвторизованныйПользователь();
	
	Для Каждого СтрокаТаблицы Из ЗагружаемыеДанные Цикл
		Услуга = Услуги.Добавить();
		Услуга.Идентификатор = СтрокаТаблицы.Идентификатор;
		
		СтрокаНоменклатура = ТаблицаНоменклатура.Найти(СтрокаТаблицы.Идентификатор, "Идентификатор");
		Если СтрокаНоменклатура = Неопределено И НЕ ПустаяСтрока(СтрокаТаблицы.Номенклатура) Тогда //создание нового элемента
			НовыйЭлемент = Справочники.Номенклатура.СоздатьЭлемент();
			НовыйЭлемент.УстановитьНовыйКод();
			НовыйЭлемент.Наименование = СтрокаТаблицы.Номенклатура;
			НовыйЭлемент.НаименованиеПолное = СтрокаТаблицы.Номенклатура;
			НовыйЭлемент.ВидНоменклатуры = Справочники.ВидыНоменклатуры.Услуга;
			НовыйЭлемент.Услуга = Истина;
			НовыйЭлемент.ЕдиницаИзмерения = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
				мТекПользователь, "ОсновнаяЕдиницаПоКлассификатору");
			НовыйЭлемент.СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
				мТекПользователь, "ОсновнаяСтавкаНДС");
			Попытка
				НовыйЭлемент.Записать();
				Услуга.Номенклатура = НовыйЭлемент.Ссылка;
			Исключение
			КонецПопытки;
			
		ИначеЕсли Не СтрокаНоменклатура = Неопределено Тогда 
			Если СтрокаНоменклатура.Количество = 1 Тогда 
				Услуга.Номенклатура = СтрокаНоменклатура.Ссылка;
			ИначеЕсли СтрокаНоменклатура.Количество > 1 Тогда
				ЗаписьОНеоднозначности = СписокНеоднозначностей.Добавить();
				ЗаписьОНеоднозначности.Идентификатор = СтрокаТаблицы.Идентификатор; 
				ЗаписьОНеоднозначности.Колонка = "Номенклатура";
			КонецЕсли;
		КонецЕсли;
		
		СтрокаВалюта = ТаблицаВалюта.Найти(СтрокаТаблицы.Идентификатор, "Идентификатор");
		Если СтрокаВалюта <> Неопределено Тогда 
			Если СтрокаВалюта.Количество = 1 Тогда 
				Услуга.Валюта = СтрокаВалюта.Ссылка;
			ИначеЕсли СтрокаВалюта.Количество > 1 Тогда
				ЗаписьОНеоднозначности = СписокНеоднозначностей.Добавить();
				ЗаписьОНеоднозначности.Идентификатор = СтрокаТаблицы.Идентификатор; 
				ЗаписьОНеоднозначности.Колонка = "Валюта";
			КонецЕсли;
		КонецЕсли;
		
		Услуга.СтавкаНДС = СтавкаНДСПоПредставлению(СтрокаТаблицы.СтавкаНДС);
		
		Услуга.Количество = СтрокаТаблицы.Количество;
		Услуга.Цена       = СтрокаТаблицы.Цена;
		Услуга.Сумма      = Услуга.Количество * Услуга.Цена;
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(Услуги, АдресТаблицыСопоставления);
	
КонецПроцедуры

Процедура СопоставитьЗагружаемыеДанныеЗатраты(АдресЗагружаемыхДанных, АдресТаблицыСопоставления, СписокНеоднозначностей, ДополнительныеПараметры)
	
	Затраты = ПолучитьИзВременногоХранилища(АдресТаблицыСопоставления);
	ЗагружаемыеДанные = ПолучитьИзВременногоХранилища(АдресЗагружаемыхДанных);
	
	МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	
	Запрос = Новый Запрос();
	Запрос.МенеджерВременныхТаблиц = МенеджерВременныхТаблиц;
	Запрос.УстановитьПараметр("ДанныеДляСопоставления", ЗагружаемыеДанные);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДанныеДляСопоставления.Номенклатура,
	|	ДанныеДляСопоставления.Валюта,
	|	ДанныеДляСопоставления.Идентификатор
	|ПОМЕСТИТЬ ДанныеДляСопоставления
	|ИЗ
	|	&ДанныеДляСопоставления КАК ДанныеДляСопоставления
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(СправочникНоменклатура.Ссылка) КАК Ссылка,
	|	ДанныеДляСопоставления.Идентификатор,
	|	КОЛИЧЕСТВО(ДанныеДляСопоставления.Идентификатор) КАК Количество
	|ИЗ
	|	ДанныеДляСопоставления КАК ДанныеДляСопоставления
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Номенклатура КАК СправочникНоменклатура
	|		ПО (СправочникНоменклатура.Наименование ПОДОБНО ДанныеДляСопоставления.Номенклатура)
	|ГДЕ
	|	НЕ СправочникНоменклатура.Ссылка ЕСТЬ NULL 
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДляСопоставления.Идентификатор
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	МАКСИМУМ(СправочникВалюты.Ссылка) КАК Ссылка,
	|	ДанныеДляСопоставления.Идентификатор КАК Идентификатор,
	|	КОЛИЧЕСТВО(ДанныеДляСопоставления.Идентификатор) КАК Количество
	|ИЗ
	|	ДанныеДляСопоставления КАК ДанныеДляСопоставления
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.Валюты КАК СправочникВалюты
	|		ПО (СправочникВалюты.Наименование ПОДОБНО ДанныеДляСопоставления.Валюта)
	|ГДЕ
	|	НЕ СправочникВалюты.Ссылка ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	ДанныеДляСопоставления.Идентификатор";
	
	РезультатЗапроса = Запрос.ВыполнитьПакет();
	
	ТаблицаНоменклатура = РезультатЗапроса[1].Выгрузить();
	ТаблицаВалюта       = РезультатЗапроса[2].Выгрузить();
	
	МенеджерВременныхТаблиц.Закрыть();
	
	мТекПользователь = ПользователиКлиентСервер.АвторизованныйПользователь();
	
	Для Каждого СтрокаТаблицы Из ЗагружаемыеДанные Цикл
		Затрата = Затраты.Добавить();
		
		Затрата.Идентификатор = СтрокаТаблицы.Идентификатор;
		Затрата.Количество    = СтрокаТаблицы.Количество;
		Затрата.Цена          = СтрокаТаблицы.Цена;
		Затрата.Сумма         = Затрата.Количество * Затрата.Цена;
		Затрата.СтавкаНДС     = СтавкаНДСПоПредставлению(СтрокаТаблицы.СтавкаНДС);
		
		СтрокаНоменклатура = ТаблицаНоменклатура.Найти(СтрокаТаблицы.Идентификатор, "Идентификатор");
		Если СтрокаНоменклатура = Неопределено И НЕ ПустаяСтрока(СтрокаТаблицы.Номенклатура) Тогда //создание нового элемента
			НовыйЭлемент = Справочники.Номенклатура.СоздатьЭлемент();
			НовыйЭлемент.УстановитьНовыйКод();
			НовыйЭлемент.Наименование = СтрокаТаблицы.Номенклатура;
			НовыйЭлемент.НаименованиеПолное = СтрокаТаблицы.Номенклатура;
			НовыйЭлемент.ВидНоменклатуры = Справочники.ВидыНоменклатуры.Услуга;
			НовыйЭлемент.Услуга = Истина;
			НовыйЭлемент.ЕдиницаИзмерения = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
				мТекПользователь, "ОсновнаяЕдиницаПоКлассификатору");
			НовыйЭлемент.СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
				мТекПользователь, "ОсновнаяСтавкаНДС");
			Попытка
				НовыйЭлемент.Записать();
				Затрата.Номенклатура = НовыйЭлемент.Ссылка;
			Исключение
			КонецПопытки;
			
		ИначеЕсли СтрокаНоменклатура <> Неопределено Тогда 
			Если СтрокаНоменклатура.Количество = 1 Тогда 
				Затрата.Номенклатура = СтрокаНоменклатура.Ссылка;
			ИначеЕсли СтрокаНоменклатура.Количество > 1 Тогда
				ЗаписьОНеоднозначности = СписокНеоднозначностей.Добавить();
				ЗаписьОНеоднозначности.Идентификатор = СтрокаТаблицы.Идентификатор; 
				ЗаписьОНеоднозначности.Колонка = "Номенклатура";
			КонецЕсли;
		КонецЕсли;
		
		СтрокаВалюта = ТаблицаВалюта.Найти(СтрокаТаблицы.Идентификатор, "Идентификатор");
		Если СтрокаВалюта <> Неопределено Тогда 
			Если СтрокаВалюта.Количество = 1 Тогда 
				Затрата.Валюта = СтрокаВалюта.Ссылка;
			ИначеЕсли СтрокаВалюта.Количество > 1 Тогда
				ЗаписьОНеоднозначности = СписокНеоднозначностей.Добавить();
				ЗаписьОНеоднозначности.Идентификатор = СтрокаТаблицы.Идентификатор; 
				ЗаписьОНеоднозначности.Колонка = "Валюта";
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ПоместитьВоВременноеХранилище(Затраты, АдресТаблицыСопоставления);
	
КонецПроцедуры

Функция СтавкаНДСПоПредставлению(НаименованиеСтавки)
	
	ТабСтавок = Новый ТаблицаЗначений();
	ТабСтавок.Колонки.Добавить("Ссылка",       Новый ОписаниеТипов("ПеречислениеСсылка.СтавкиНДС"));
	ТабСтавок.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
	
	Для Каждого ТекЗначение Из Метаданные.Перечисления.СтавкиНДС.ЗначенияПеречисления Цикл 
		НовСтавка = ТабСтавок.Добавить();
		НовСтавка.Ссылка       = Перечисления.СтавкиНДС[ТекЗначение.Имя];
		НовСтавка.Наименование = ТекЗначение.Синоним;
	КонецЦикла;
	
	НайдСтавка = ТабСтавок.Найти(НаименованиеСтавки, "Наименование");
	
	Если НайдСтавка = Неопределено Тогда 
		Возврат Перечисления.СтавкиНДС.ПустаяСсылка();
	Иначе 
		Возврат НайдСтавка.Ссылка;
	КонецЕсли;
	
КонецФункции // СтавкаНДСПоПредставлению()

#КонецОбласти

#КонецЕсли
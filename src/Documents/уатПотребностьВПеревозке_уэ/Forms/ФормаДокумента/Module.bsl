
#Область Переменные

// Хранит количество грузовых мест для цикла, необходимо для вывода дублирующихся при необходимости.
&НаКлиенте
Перем мКоличествоГрузовыхМестДляЦикла;
&НаКлиенте
Перем мIDстрокиТЧПунктыНазначения; // Временно хранит ID строки ТЧ  пункты назначения.
&НаКлиенте
Перем ДанныеСтрокиПромежуточныхПунктов; // Хранит данные строки ТЧ перед началом редактирования.
&НаКлиенте
Перем ДанныеСтрокиУслуги; // Хранит данные строки ТЧ Доходы/Расходы перед началом редактирования.

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	уатЗащищенныеФункцииСервер.уатДокументФормаЭлементаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, Объект, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ОбновитьАдресаСтрокойСервер();
	
	// СтандартныеПодсистемы.Свойства
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("ИмяЭлементаДляРазмещения", "ГруппаДополнительныеРеквизиты");
	УправлениеСвойствами.ПриСозданииНаСервере(ЭтотОбъект, ДополнительныеПараметры);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ВерсионированиеОбъектов
	ВерсионированиеОбъектов.ПриСозданииНаСервере(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ВерсионированиеОбъектов
	
	Если Параметры.Свойство("ЗначениеКопирования") И ЗначениеЗаполнено(Параметры.ЗначениеКопирования) Тогда
		флЭтоКопия = Истина;
		ЗначениеКопирования = Параметры.ЗначениеКопирования;
	КонецЕсли;
	
	Если флЭтоКопия Тогда
		ЗаполнитьПараметрыСтрокFTLПриКопировании();
		флЭтоКопия = Ложь;
	КонецЕсли;
	
	АвторизованныйПользователь = ПользователиКлиентСервер.АвторизованныйПользователь();
	Если ТипЗнч(АвторизованныйПользователь) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда 
		Если Параметры.Ключ.Пустая() Тогда 
			Объект.Ответственный = АвторизованныйПользователь;
			
			Если ТипЗнч(АвторизованныйПользователь.ОбъектАвторизации) = Тип("СправочникСсылка.КонтактныеЛица") 
				И ТипЗнч(АвторизованныйПользователь.ОбъектАвторизации.ОбъектВладелец) = Тип("СправочникСсылка.Контрагенты") Тогда 
				Объект.Контрагент = АвторизованныйПользователь.ОбъектАвторизации.ОбъектВладелец;
			ИначеЕсли ТипЗнч(АвторизованныйПользователь.ОбъектАвторизации) = Тип("СправочникСсылка.Контрагенты") Тогда 
				Объект.Контрагент = АвторизованныйПользователь.ОбъектАвторизации;
			КонецЕсли;
			
			Запрос = Новый Запрос;
			Запрос.Текст = 
			"ВЫБРАТЬ ПЕРВЫЕ 1
			|	ДоговорыКонтрагентов.Организация КАК Организация,
			|	ДоговорыКонтрагентов.Ссылка КАК Договор
			|ИЗ
			|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
			|ГДЕ
			|	ДоговорыКонтрагентов.Владелец = &Контрагент";
			
			Запрос.УстановитьПараметр("Контрагент", Объект.Контрагент);
			
			РезультатЗапроса = Запрос.Выполнить().Выгрузить();
			
			Если РезультатЗапроса.Количество() <> 0 Тогда
				Объект.Организация = РезультатЗапроса[0].Организация;
				Объект.ДоговорКонтрагента = РезультатЗапроса[0].Договор;
			КонецЕсли;
			
		КонецЕсли;
		
		Если Не ПравоРедактированиеДокумента() Тогда 
			Элементы.СтатусВыполнения.Гиперссылка = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	МноговалютныйУчет = ПолучитьФункциональнуюОпцию("уатМноговалютныйУчет");
	
	РазрешитьДетализациюЗаказовПоТоварам = (уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(
		Объект.Организация, "РазрешитьДетализациюЗаказовПоТоварам") = Истина);
	Если НЕ РазрешитьДетализациюЗаказовПоТоварам Тогда
		ЭлемТовары = Элементы.ДетализацияЗакрытия.СписокВыбора.НайтиПоЗначению(Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам);
		Если ЭлемТовары <> Неопределено Тогда
			Элементы.ДетализацияЗакрытия.СписокВыбора.Удалить(ЭлемТовары);
		КонецЕсли;
	КонецЕсли;
	РазрешитьДетализациюЗаказовПоГрузовымМестам = (уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(
		Объект.Организация, "РазрешитьДетализациюЗаказовПоГрузовымМестам")= Истина);
	Если НЕ РазрешитьДетализациюЗаказовПоГрузовымМестам Тогда
		ЭлемТовары = Элементы.ДетализацияЗакрытия.СписокВыбора.НайтиПоЗначению(Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам);
		Если ЭлемТовары <> Неопределено Тогда
			Элементы.ДетализацияЗакрытия.СписокВыбора.Удалить(ЭлемТовары);
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.Ссылка.Пустая() Тогда
		Если Объект.Контрагент = Неопределено Тогда
			Объект.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
		КонецЕсли;
		
		Если Не (Параметры.Свойство("ЗначениеКопирования") И ЗначениеЗаполнено(Параметры.ЗначениеКопирования)) Тогда 
			ДетализацияНастройка = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(
				Объект.Организация, 
				"ДетализацияЗаказаГрузоотправителя"
			);
			
			Если ЗначениеЗаполнено(ДетализацияНастройка) Тогда
				Объект.ДетализацияЗаказов = ДетализацияНастройка;
			КонецЕсли;
		КонецЕсли;
		
		Если (Не РазрешитьДетализациюЗаказовПоТоварам И Не РазрешитьДетализациюЗаказовПоГрузовымМестам)
				Или (Не РазрешитьДетализациюЗаказовПоТоварам И Объект.ДетализацияЗаказов = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам)
				Или (Не РазрешитьДетализациюЗаказовПоГрузовымМестам И Объект.ДетализацияЗаказов = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам) Тогда
			Объект.ДетализацияЗаказов = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.СтатусВыполнения) Тогда 
			Объект.СтатусВыполнения = ПредопределенноеЗначение("Справочник.уатСтатусы_уэ.Новый");
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Объект.Контрагент) = Тип("СправочникСсылка.Контрагенты") тогда
		флЗаказОтКонтрагента = 1;
		Элементы.Контрагент.ПодсказкаВвода = "Введите ИНН или наименование";
	Иначе
		флЗаказОтКонтрагента = 0;
		Элементы.Контрагент.ПодсказкаВвода = "";
	КонецЕсли;
	
	// Инициализация реквизитов формы.
	мВалютаРегламентированногоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	Если уатРаботаСМетаданными.уатЕстьКонстанта("ВалютаУправленческогоУчета") Тогда
		мВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
	Иначе
		мВалютаУправленческогоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;
	флРасчетТары = Константы.уатИспользоватьРасчетТары_уэ.Получить();
	
	Контрагент = Объект.Контрагент;
	Договор = Объект.ДоговорКонтрагента;
	ВалютаРасчетов = Объект.ДоговорКонтрагента.ВалютаВзаиморасчетов;
	НациональнаяВалюта = мВалютаРегламентированногоУчета;
	СтруктураПоВалюте = РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Объект.Дата, Новый Структура("Валюта", НациональнаяВалюта));
	КурсНациональнаяВалюта = СтруктураПоВалюте.Курс;
	КратностьНациональнаяВалюта = СтруктураПоВалюте.Кратность;
	
	Если Объект.Ссылка.Пустая() И НЕ ЗначениеЗаполнено(Объект.ВалютаТоваров) Тогда
		Объект.ВалютаТоваров = мВалютаУправленческогоУчета;
	КонецЕсли;
	ВалютаТоваровПред = Объект.ВалютаТоваров;
	
	уатОбщегоНазначенияСервер.НастроитьПолеЕдиницыИзмерения(ЭтотОбъект, "ТоварныйСостав");
	уатОбщегоНазначенияСервер.НастроитьПолеКонтактноеЛицо(Элементы.ПунктыНазначенияКонтактноеЛицоГрузоотправителя);
	уатОбщегоНазначенияСервер.НастроитьПолеКонтактноеЛицо(Элементы.ПунктыНазначенияКонтактноеЛицоГрузополучателя);
	
	Если Не ТипЗнч(ПользователиКлиентСервер.АвторизованныйПользователь()) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда 
		уатОбщегоНазначенияСервер.НастроитьПолеПодразделение(Элементы.Контрагент, "Объект.Организация", Объект.Ссылка.Метаданные().Реквизиты.Контрагент.Тип);
	КонецЕсли;
	
	уатОбщегоНазначенияСервер.НастроитьПолеДоговорКонтрагента(Элементы.ДоговорКонтрагента, "Объект.Организация", "Объект.Контрагент", "СПокупателем");
	
	ОтборСтрокПоПунктам = Истина;
	
	ОбновитьПараметрВыработкиВременный();
	ОбновитьВалютуВТЧГрузовТоваровСервер();
	
	УстановитьУсловноеОформлениеПолейСтатусов();
	ЗаполнитьРеквизитыГрузовыхМест();
	
	ОсновнойВидУпаковкиКраткоеНаименование = Справочники.уатВидыУпаковки_уэ.ПолучитьОсновнойВидУпаковки().КраткоеНаименование;
	Элементы.ТоварныйСоставКоличествоМест.Заголовок = ОсновнойВидУпаковкиКраткоеНаименование;
	
	ПредставлениеЕдиницыИзмеренияВеса = уатОбщегоНазначенияПовтИсп.ПолучитьПредставлениеОсновнойЕдиницыИзмеренияВеса();
	Если ЗначениеЗаполнено(ПредставлениеЕдиницыИзмеренияВеса) Тогда
		Элементы.ГрузовойСоставВесБрутто.Заголовок = НСтр("en='Weight';ru='Вес'") + ", " + ПредставлениеЕдиницыИзмеренияВеса;
		Элементы.ТоварныйСоставВесБрутто.Заголовок = НСтр("en='Weight';ru='Вес'") + ", " + ПредставлениеЕдиницыИзмеренияВеса;
	КонецЕсли;
	
	ПредставлениеЕдиницыИзмеренияОбъема = уатОбщегоНазначенияПовтИсп.ПолучитьПредставлениеОсновнойЕдиницыИзмеренияОбъема();
	Если ЗначениеЗаполнено(ПредставлениеЕдиницыИзмеренияОбъема) Тогда
		Элементы.ГрузовойСоставОбъем.Заголовок = НСтр("en='Volume';ru='Объем'") + ", " + ПредставлениеЕдиницыИзмеренияОбъема;
		Элементы.ТоварныйСоставОбъем.Заголовок = НСтр("en='Volume';ru='Объем'") + ", " + ПредставлениеЕдиницыИзмеренияОбъема;
	КонецЕсли;
	
	// установка видимости команд для выполнения операций с грузовыми местами
	Если НЕ ПравоДоступа("Добавление",Метаданные.Справочники.уатГрузовыеМеста_уэ) Тогда
		Элементы.РазбитьНаГрузовыеМеста.Видимость = Ложь;
	КонецЕсли;
	
	ОрганизацияПередИзменением = Объект.Организация;
	УстановитьВозможностьРедактированияДоходовРасходов();
	
	флПересчетИтогов = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ПользователиКлиентСервер.АвторизованныйПользователь(),
		"ЗаказНаТСПерерасчетИтоговПриПроведении");
	
	УстановитьПредставленияОтрезковПути();
	
	// уатУправлениеАвтотранспортом.МодификацияКонфигурации
	уатМодификацияКонфигурацииПереопределяемый.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	// Конец уатУправлениеАвтотранспортом.МодификацияКонфигурации
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// уатУправлениеАвтотранспортом.МодификацияКонфигурации
	уатМодификацияКонфигурацииКлиентПереопределяемый.ПриОткрытии(ЭтотОбъект, Отказ);
	// Конец уатУправлениеАвтотранспортом.МодификацияКонфигурации
	
	уатЗащищенныеФункцииКлиент.уатДокументФормаЭлементаПриОткрытии(Отказ, ЭтотОбъект, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ЗаполнитьСформированныеЗаказы();
		
	Если флЗаказОтКонтрагента тогда
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
	Иначе
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций");
	КонецЕсли;
	
	уатОбщегоНазначенияКлиент.ЗаполнитьСписокВыбораНастройкаНДС(Элементы.РасходыУчитыватьНДСПредставление.СписокВыбора);
	
	// Если строк пунктов больше 0, то процедура вызовется из обработчика ПунктыНазначенияПриАктивизацииСтроки()
	Если Объект.ПунктыНазначения.Количество() = 0 Тогда
		УстановитьСнятьОтборСтрокПоПунктам();
	КонецЕсли; 
	
	УстановитьВидимость();
	ОбновитьВсегоВТЧ();
	ОбновитьПодвалДоходовРасходов();
	ОтобразитьСтатусыАдресов();
	ОбновитьПредставлениеНДСвТЧ();
	
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	
	// СтандартныеПодсистемы.УправлениеДоступом
	Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
		МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
		МодульУправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.УправлениеДоступом
	
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ПрочитатьПромежуточныеПункты(ТекущийОбъект);
	УстановитьПредставленияОтрезковПути();
	
	ОбновитьАдресаСтрокойСервер();
	УстановитьУсловноеОформлениеПолейСтатусов();
	ЗаполнитьРеквизитыГрузовыхМест();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	ОбновитьАдресаСтрокойСервер();
		
	Если Не Объект.ПериодическаяПотребность Тогда
		Объект.ДатыДействия.Очистить();
	КонецЕсли;
	
	ОбновитьПараметрВыработкиВременный();
	ОбновитьВалютуВТЧГрузовТоваровСервер();
	УстановитьУсловноеОформлениеПолейСтатусов();
	УстановитьПредставленияОтрезковПути();
	ЗаполнитьРеквизитыГрузовыхМест();

	флВыполненАвтопересчетУслугПриЗаписи = ТекущийОбъект.ДополнительныеСвойства.Свойство("ВыполненАвтопересчетУслуг");
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
	
	ЗаполнитьСформированныеЗаказы();

	ОбновитьВсегоВТЧ();
	ОбновитьНадписьИтоги();
	ОбновитьПредставлениеНДСвТЧ();
	
	#Если Клиент Тогда
		Оповестить("Изменена потребность в перевозке");
	#КонецЕсли
	
	Если флВыполненАвтопересчетУслугПриЗаписи Тогда
		ЗаголовокНСТР = "";
		ОписаниеНСТР = НСтр("en='Preliminary incomes was calculated automaticaly'; ru='Выполнен автоматический пересчет доходов'");
		ПоказатьОповещениеПользователя(ЗаголовокНСТР,, ОписаниеНСТР);
		флВыполненАвтопересчетУслугПриЗаписи = Ложь;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.ПослеЗаписи(ЭтотОбъект, Объект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	// СтандартныеПодсистемы.Свойства 
	Если УправлениеСвойствамиКлиент.ОбрабатыватьОповещения(ЭтотОбъект, ИмяСобытия, Параметр) Тогда
		ОбновитьЭлементыДополнительныхРеквизитов();
		УправлениеСвойствамиКлиент.ПослеЗагрузкиДополнительныхРеквизитов(ЭтотОбъект);
	КонецЕсли;
	// Конец СтандартныеПодсистемы.Свойства
	
	Если ИмяСобытия = "СозданоГрузовоеМесто" Тогда
		ОбработкаСозданияГрузовогоМеста(Параметр.Ссылка, Параметр.УдалитьСтрокуПосле, Параметр.ТоварныйСостав);
	ИначеЕсли ИмяСобытия = "ЗаписанЭлементСправочникаПунктыНазначения" Тогда
		Для Каждого ТекСтрока Из Объект.ПунктыНазначения Цикл 
			ПересчитатьСтоянкуПоДокументу(ТекСтрока.ID);
		КонецЦикла;
		ПунктыНазначенияПриАктивизацииСтроки(Элементы.ПунктыНазначения);
	ИначеЕсли ИмяСобытия = "Изменен заказ грузоотправителя" Тогда
		ЗаполнитьСформированныеЗаказы();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.уатШаблоныУслуг_уэ") Тогда
		ТекСтрока = Элементы.ПунктыНазначения.ТекущиеДанные;
		Если ТекСтрока <> Неопределено Тогда
			ЗаполнитьУслугиПоШаблонуСервер(ВыбранноеЗначение, ТекСтрока.ID);
			ОбновитьПредставлениеНДСвТЧ();
			Модифицированность = Истина;
			ОбновитьПараметрВыработкиВременный();
		КонецЕсли;
		ОбновитьКоличествоСтрокВШапкахТЧ();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ОбработкаПроверкиЗаполнения(ЭтотОбъект, Отказ, ПроверяемыеРеквизиты);
	// Конец СтандартныеПодсистемы.Свойства
	
	Для Каждого СтрокаПунктов Из Объект.ПунктыНазначения Цикл 
		Если СтрокаПунктов.FTL Тогда 
			мсвПромежуточныеПункты = ПромежуточныеПункты.НайтиСтроки(Новый Структура("ID", СтрокаПунктов.ID));
			
			Если мсвПромежуточныеПункты.Количество() < 2 Тогда 
				ТекстОшибки = НСтр("ru = 'Необходимо заполнить маршрут следования'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
					ТекстОшибки,
					,
					"ПромежуточныеПункты",
					,
					Отказ
				);
			КонецЕсли;
			
			Для СчСтрок = 0 По ПромежуточныеПункты.Количество() - 1 Цикл 
				Если мсвПромежуточныеПункты.Найти(ПромежуточныеПункты[СчСтрок]) = Неопределено Тогда 
					Продолжить;
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(ПромежуточныеПункты[СчСтрок].ПрибытиеПлан) Тогда 
					ТекстОшибки = НСтр("ru = 'Не заполнена дата прибытия план'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстОшибки,
						,
						"ПромежуточныеПункты[" + Формат(СчСтрок, "ЧН=0; ЧГ=0") + "].ПрибытиеПлан",
						,
						Отказ
					);
				КонецЕсли;
				
				Если Не ЗначениеЗаполнено(ПромежуточныеПункты[СчСтрок].УбытиеПлан) Тогда 
					ТекстОшибки = НСтр("ru = 'Не заполнена дата убытия план'");
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(
						ТекстОшибки,
						,
						"ПромежуточныеПункты[" + Формат(СчСтрок, "ЧН=0; ЧГ=0") + "].УбытиеПлан",
						,
						Отказ
					);
				КонецЕсли;
			КонецЦикла;
			
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	ЗаполнитьОписание();
	
	Если ПараметрыЗаписи.РежимЗаписи = РежимЗаписиДокумента.Запись И НЕ ПараметрыЗаписи.Свойство("НеПересчитыватьИтоги") Тогда
		флПересчетИтогов = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(
			ПользователиКлиентСервер.АвторизованныйПользователь(), "ПотребностьВПеревозкеПерерасчетИтоговПриПроведении");
			
		Если флПересчетИтогов Тогда
			РассчитатьОказываемыеУслугиЗавершение(Истина);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	
	// СтандартныеПодсистемы.Свойства
	УправлениеСвойствами.ПередЗаписьюНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.Свойства
	
	ЗаписатьПромежуточныеПункты(ТекущийОбъект);
	
	ТекущийОбъект.ДополнительныеСвойства.Вставить("Интерактивно", Истина);
	Если ПараметрыЗаписи.Свойство("НеПересчитыватьИтоги") Тогда
		ТекущийОбъект.ДополнительныеСвойства.Вставить("НеПересчитыватьИтоги", Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если флВопросЗакрытиеФормы Тогда
		Отказ = Истина;
		Оповещ = Новый ОписаниеОповещения("ПередЗакрытиемВопрос", ЭтотОбъект);
		ПоказатьВопрос(Оповещ, "При проверке корректности заполнения документа возникли предупреждения!
			|Продолжить закрытие формы?", РежимДиалогаВопрос.ОКОтмена);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	Если Объект.Организация = ОрганизацияПередИзменением Тогда
		Возврат;
	КонецЕсли;
	ОрганизацияПередИзменением = Объект.Организация;
	
	ПриИзмененииКонтрагентаИлиОрганизации(Новый ОписаниеОповещения("ОрганизацияПриИзмененииФрагментЗавершение", ЭтотОбъект));
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзмененииФрагментЗавершение(Результат, ДополнительныеПараметры) Экспорт
	УчитыватьНДСПередИзменением = Объект.УчитыватьНДС;
	СуммаВключаетНДСПередИзменением = Объект.СуммаВключаетНДС;
	
	Объект.УчитыватьНДС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.УчитыватьНДС"));
	Объект.СуммаВключаетНДС = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Объект.Организация,
		ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.СуммаВключаетНДС"));
		
	Если Объект.УчитыватьНДС <> УчитыватьНДСПередИзменением ИЛИ Объект.СуммаВключаетНДС <> СуммаВключаетНДСПередИзменением Тогда
		ПересчитатьСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС("Услуги");
		ОбновитьВалютуВТЧГрузовТоваровСервер();
	КонецЕсли;

	ОбновитьВсегоВТЧУслуги();
	ОбновитьПодвалУслуги();
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентПриИзменении(Элемент)
	
	КонтрагентПередИзменением = Контрагент;
	Контрагент = Объект.Контрагент;
	
	Если КонтрагентПередИзменением <> Объект.Контрагент Тогда
		ПриИзмененииКонтрагентаИлиОрганизации(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если флЗаказОтКонтрагента = 1 Тогда 
		уатОбщегоНазначенияКлиент.КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если флЗаказОтКонтрагента = 1 Тогда 
		уатОбщегоНазначенияКлиент.КонтрагентАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если флЗаказОтКонтрагента = 1 Тогда 
		уатОбщегоНазначенияКлиент.КонтрагентОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзменении(Элемент)
	Оповещ = Новый ОписаниеОповещения("ДоговорКонтрагентаПриИзмененииЗавершение", ЭтотОбъект);
	уатОбщегоНазначенияКлиент.ДоговорКонтрагентаПриИзменении(ЭтаФорма, Оповещ);
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаПриИзмененииЗавершение(Результат, ДопПараметры) Экспорт
	уатОбщегоНазначенияКлиент.ПриИзмененииДоговора(ЭтаФорма, Неопределено, Договор);
КонецПроцедуры

// Вызывается из процедуры уатОбщегоНазначенияКлиент.ПриИзмененииДоговора()
//
&НаКлиенте
Процедура ПриИзмененииДоговораЛокальныеОбработчики() Экспорт
	РассчитатьСуммуДокумента();
	ОбновитьВсегоВТЧУслуги();
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ДетализацияЗакрытияПриИзменении(Элемент)
	
	УстановитьВидимость();
	
	ТекСтрокаПункты = Элементы.ПунктыНазначения.ТекущиеДанные;
	Если ТекСтрокаПункты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РассчитатьПоказателиСервер(ТекСтрокаПункты.ID, Ложь);
	УстановитьСнятьОтборСтрокПоПунктам();
	ОбновитьНадписьИтоги();
	ОбновитьВсегоВТЧ();
	ОбновитьВалютуВТЧГрузовТоваровСервер();
	ОбновитьАдресаСтрокойСервер();
	ОбновитьПараметрВыработкиВременный();
	
	Объект.ОтрезкиПути.Очистить();
	
КонецПроцедуры

&НаКлиенте
Процедура флЗаказОтКонтрагентаПриИзменении(Элемент)
	Если флЗаказОтКонтрагента Тогда
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
		Объект.Контрагент = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
		Элементы.Контрагент.ПодсказкаВвода = "Введите ИНН или наименование";
	Иначе
		Элементы.Контрагент.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций");
		Объект.Контрагент = ПредопределенноеЗначение("Справочник.ПодразделенияОрганизаций.ПустаяСсылка");
		Элементы.Контрагент.ПодсказкаВвода = "";
	КонецЕсли;
	Объект.ДоговорКонтрагента = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ПериодическаяПотребностьПриИзменении(Элемент)
	
	// проверяем что уже есть заказы, созданные по этой потребности
	Если НЕ Объект.ПериодическаяПотребность Тогда
		Если Объект.ДатыДействия.НайтиСтроки(Новый Структура("Заказ", ПредопределенноеЗначение("Документ.уатЗаказГрузоотправителя.ПустаяСсылка"))).Количество()
			< Объект.ДатыДействия.Количество() Тогда
			
			ТекстНСТР = НСтр("en='Associated documents ""Order for trucking"" were found. Communication with orders will be lost. Continue deleting?';ru='Обнаружены связанные документы ""Заказ на ТС"". Связь с заказами будет потеряна. Продолжить удаление?'");
			ПоказатьВопрос(Новый ОписаниеОповещения("ПериодическаяПотребностьПриИзмененииВопрос", ЭтотОбъект), ТекстНСТР, РежимДиалогаВопрос.ДаНет);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПериодическаяПотребностьПриИзмененииЗавершение();
КонецПроцедуры

&НаКлиенте
Процедура ПериодическаяПотребностьПриИзмененииВопрос(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПериодическаяПотребностьПриИзмененииЗавершение();
	Иначе
		Объект.ПериодическаяПотребность = НЕ Объект.ПериодическаяПотребность;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПериодическаяПотребностьПриИзмененииЗавершение()
	Если Объект.ПериодическаяПотребность Тогда
		// перенесем Данные о заказах в ТЧ даты действий, если есть
		Для Каждого ТекСтрока Из Объект.ПунктыНазначения Цикл
			Если ЗначениеЗаполнено(ТекСтрока.ДатаОтправления) ИЛИ ЗначениеЗаполнено(ТекСтрока.ДатаПрибытия) Тогда
				НовДатаДействия = Объект.ДатыДействия.Добавить();
				НовДатаДействия.ID = ТекСтрока.ID;
				НовДатаДействия.IDДатыДействия = Новый УникальныйИдентификатор;
				НовДатаДействия.ДатаОтправления = ТекСтрока.ДатаОтправления;
				ТекСтрока.ДатаОтправления = Дата("00010101");
				НовДатаДействия.ДатаПрибытия = ТекСтрока.ДатаПрибытия;
				ТекСтрока.ДатаПрибытия = Дата("00010101");
				ТекСтрока.Заказы = ПредопределенноеЗначение("Документ.уатЗаказГрузоотправителя.ПустаяСсылка");  
			КонецЕсли;
		КонецЦикла;
		ЗаполнитьСформированныеЗаказы();
	Иначе
		// Перенесем в главную таблицу первые строки из ТЧ даты действий, если есть
		Если Объект.ДатыДействия.Количество() > 0 Тогда
			ТекстНСТР = НСтр("en='Table ""Action date"" is not empty! Only first record will transfer to main table."
"Clear the table?';ru='Таблица ""Даты действия"" не пустая! В основную таблицу будут перенесены только первые записи."
"Очистить таблицу?'");
			
			ПоказатьВопрос(Новый ОписаниеОповещения("ПеренестиДатыДействияЗавершение", ЭтотОбъект),
				ТекстНСТР, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
		КонецЕсли;
	КонецЕсли;
	
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиДатыДействияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Объект.ПериодическаяПотребность = Истина;
		УстановитьВидимость();
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из Объект.ПунктыНазначения Цикл		
		НайдДаты = Объект.ДатыДействия.НайтиСтроки(Новый Структура("ID", ТекСтрока.ID));
		Если НайдДаты.Количество()>0 Тогда
			ТекСтрока.ДатаОтправления = НайдДаты[0].ДатаОтправления;
			ТекСтрока.ДатаПрибытия = НайдДаты[0].ДатаПрибытия;
		КонецЕсли;		
	КонецЦикла;
	Объект.ДатыДействия.Очистить();
	ЗаполнитьСформированныеЗаказы();
	
КонецПроцедуры

&НаКлиенте
Процедура КомментарийНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ОбщегоНазначенияКлиент.ПоказатьФормуРедактированияКомментария(Элемент.ТекстРедактирования, ЭтотОбъект, "Объект.Комментарий");
КонецПроцедуры

&НаКлиенте
Процедура СтатусВыполненияНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПараметрыФормы = Новый Структура("Отбор", Новый Структура("ДействуетНаПотребностиВПеревозке", Истина));
	Оповещение = Новый ОписаниеОповещения("СтатусВыполненияПослеВыбораСтатуса", ЭтотОбъект);
	ОткрытьФорму("Справочник.уатСтатусы_уэ.ФормаВыбора", ПараметрыФормы, ЭтотОбъект,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	мВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком");
	
	уатОбщегоНазначенияТиповыеКлиент.уатНачалоВыбораЗначенияДоговораКонтрагента(Объект, ЭтотОбъект, Элемент, Объект.Контрагент, 
	Объект.ДоговорКонтрагента, мВидДоговора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ДоговорКонтрагентаСоздание(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ВидДоговораДоступныеЗначения = Новый Массив;
	
	мВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.СПоставщиком");
	ВидДоговораДоступныеЗначения.Добавить(мВидДоговора);
	
	ПараметрыФормы = Новый Структура();  
	ПараметрыФормы.Вставить("Владелец", Объект.Контрагент);
	ПараметрыФормы.Вставить("ВидДоговораДоступныеЗначения", ВидДоговораДоступныеЗначения);
	ОткрытьФорму("Справочник.ДоговорыКонтрагентов.ФормаОбъекта", ПараметрыФормы, ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_ПунктыНазначения

&НаКлиенте
Процедура СоздатьЗаказГрузоотправителя(Команда)
	
	Если Объект.Ссылка.Пустая() Или Модифицированность Тогда
		Оповещение = Новый ОписаниеОповещения("СоздатьЗаказГрузоотправителяЗаписатьДокумент", ЭтотОбъект);
		ТекстНСТР = НСтр("en='To perform this operation it is necessary to record the document. Continue?';ru='Для выполнения данной операции необходимо записать документ. Продолжить?'");
		ПоказатьВопрос(Оповещение, ТекстНСТР, РежимДиалогаВопрос.ОКОтмена,, КодВозвратаДиалога.ОК);
		Возврат;
	Иначе 
		СоздатьЗаказГрузоотправителяПродолжение();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗаказГрузоотправителяЗаписатьДокумент(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.ОК Тогда 
		Возврат;
	КонецЕсли;
	
	Если Записать() Тогда 
		СоздатьЗаказГрузоотправителяПродолжение();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЗаказГрузоотправителяПродолжение()
	
	ТекСтрока = Элементы.ПунктыНазначения.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		ТекстНСТР  = НСтр("en='In TP ""Destinations"", none of lines are not active!';ru='В ТЧ ""Пункты назначения"", ни одна из строк не активна!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР ,, "Объект.ПунктыНазначения");
		Возврат;
	КонецЕсли;
	
	Если Объект.ПериодическаяПотребность Тогда
		ТекСтрокаДат = Элементы.ДатыДействия.ТекущиеДанные;
		Если ТекСтрокаДат = Неопределено Тогда
			ТекстНСТР  = НСтр("en='None of lines are not active in TP ""Date of action""!';ru='Ни одна из строк не активна в ТЧ ""Даты действия""!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР ,, "Объект.ДатыДействия");
			Возврат;
		КонецЕсли;
		ДатаОтправления = ТекСтрокаДат.ДатаОтправления;
		ДатаПрибытия = ТекСтрокаДат.ДатаПрибытия;
	Иначе
		ДатаОтправления = ТекСтрока.ДатаОтправления;
		ДатаПрибытия = ТекСтрока.ДатаПрибытия;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ДатаОтправления) И ЗначениеЗаполнено(ДатаПрибытия) Тогда
		Если ДатаОтправления > ДатаПрибытия Тогда
			ТекстНСТР  = НСтр("en='Departure date exceeds arrival date.';ru='Дата отправления превышает дату прибытия!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР ,, "Объект.ДатыДействия");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Потребность, IDПотребности, ДатаОтправления, ДатаПрибытия, Организация",
		Объект.Ссылка, ТекСтрока.ID, ДатаОтправления, ДатаПрибытия, Объект.Организация);
	Если Объект.ПериодическаяПотребность Тогда
		ПараметрыФормы.Вставить("IDДатыДействия", ТекСтрокаДат.IDДатыДействия);
	КонецЕсли;
	ОписаниеОповещенияПриЗакрытииЗаказа = Новый ОписаниеОповещения("ОбработкаЗакрытияФормыЗаказа", ЭтотОбъект);
	ОткрытьФорму("Документ.уатЗаказГрузоотправителя.ФормаОбъекта", ПараметрыФормы,,,,, ОписаниеОповещенияПриЗакрытииЗаказа);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗакрытияФормыЗаказа(Результат, ДопПараметры) Экспорт
	ЗаполнитьСформированныеЗаказы();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСформированныеЗаказы()
	
	мсвID = Новый Массив;
	Для Каждого ТекСтрока Из Объект.ПунктыНазначения Цикл
		мсвID.Добавить(ТекСтрока.ID);
	КонецЦикла;
	
	мсвЗаказы = ПолучитьЗаказыСформированныеПоПотребности(мсвID);
	
	Если Объект.ПериодическаяПотребность Тогда
		Для Каждого ТекСтрока Из Объект.ДатыДействия Цикл	
			//НайдЗаказы = Выгрузка.НайтиСтроки(Новый Структура("IDСтрокиПотребности, IDДатыДействияПотребности", ТекСтрока.ID, ТекСтрока.IDДатыДействия));
			ТекСтрока.Заказ = ПредопределенноеЗначение("Документ.уатЗаказГрузоотправителя.ПустаяСсылка");
			Для Каждого ТекЗаказ Из мсвЗаказы Цикл
				Если ТекЗаказ.ID = ТекСтрока.ID И ТекЗаказ.IDДатыДействия = ТекСтрока.IDДатыДействия Тогда
					ТекСтрока.Заказ = ТекЗаказ.Ссылка;		
				КонецЕсли;	
			КонецЦикла;
		КонецЦикла;
	Иначе	
		Для Каждого ТекСтрока Из Объект.ПунктыНазначения Цикл	
			//НайдЗаказы = Выгрузка.НайтиСтроки(Новый Структура("IDСтрокиПотребности, ДатаОтправления", ТекСтрока.ID, ТекСтрока.ДатаОтправления));
			ТекСтрока.Заказы = ПредопределенноеЗначение("Документ.уатЗаказГрузоотправителя.ПустаяСсылка");
			Для Каждого ТекЗаказ Из мсвЗаказы Цикл
				Если ТекЗаказ.ID = ТекСтрока.ID И ТекЗаказ.ДатаОтправления = ТекСтрока.ДатаОтправления Тогда
					ТекСтрока.Заказы = ТекЗаказ.Ссылка;		
				КонецЕсли;	
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗаказыСформированныеПоПотребности(мсвID)
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатЗаказГрузоотправителя.Ссылка,
	|	уатЗаказГрузоотправителя.IDСтрокиПотребности КАК ID,
	|	уатЗаказГрузоотправителя.Номер,
	|	НАЧАЛОПЕРИОДА(уатЗаказГрузоотправителя.ОтправлениеС, ДЕНЬ) КАК ДатаОтправления,
	|	уатЗаказГрузоотправителя.IDДатыДействияПотребности КАК IDДатыДействия
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	|ГДЕ
	|	уатЗаказГрузоотправителя.Проведен
	|	И уатЗаказГрузоотправителя.IDСтрокиПотребности В(&IDСтрокиПотребности)
	|
	|УПОРЯДОЧИТЬ ПО
	|	уатЗаказГрузоотправителя.ДоставкаС УБЫВ,
	|	уатЗаказГрузоотправителя.ДоставкаПо УБЫВ");
	Запрос.УстановитьПараметр("IDСтрокиПотребности", мсвID);
	
	Выгрузка = Запрос.Выполнить().Выгрузить();
	
	мсвВыгрузка = Новый Массив;
	Для Каждого ТекСтрока Из Выгрузка Цикл
		СтруктураСтроки = Новый Структура("ID, IDДатыДействия, ДатаОтправления, Ссылка");
		ЗаполнитьЗначенияСвойств(СтруктураСтроки, ТекСтрока);
		мсвВыгрузка.Добавить(СтруктураСтроки);
	КонецЦикла;
	
	Возврат мсвВыгрузка;
КонецФункции

&НаКлиенте
Процедура ОтборСтрокПоПунктамПриИзменении(Элемент)
	УстановитьСнятьОтборСтрокПоПунктам();
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСнятьОтборСтрокПоПунктам()
	
	ТекСтрокаПункты = Элементы.ПунктыНазначения.ТекущиеДанные;
	Если ОтборСтрокПоПунктам Тогда
		Если ТекСтрокаПункты = Неопределено Тогда
			ОтборСтрок = Новый ФиксированнаяСтруктура();
		Иначе
			ОтборСтрок = Новый ФиксированнаяСтруктура(Новый Структура("ID", Строка(ТекСтрокаПункты.ID)));
		КонецЕсли;
	Иначе
		ОтборСтрок = Новый ФиксированнаяСтруктура();
		Элементы.ГрузовойСоставОтрезокПути.Видимость = 
			(Объект.ДетализацияЗаказов = ПредопределенноеЗначение("Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам")
			Или Объект.ДетализацияЗаказов = ПредопределенноеЗначение("Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам"));
		Элементы.ТоварныйСоставОтрезокПути.Видимость = 
			Объект.ДетализацияЗаказов = ПредопределенноеЗначение("Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам");
	КонецЕсли;
	
	Элементы.ГрузовойСостав.ОтборСтрок = ОтборСтрок;
	Элементы.ТоварныйСостав.ОтборСтрок = ОтборСтрок;
	Элементы.Услуги.ОтборСтрок = ОтборСтрок;
	Элементы.Расходы.ОтборСтрок = ОтборСтрок;
	Элементы.ПромежуточныеПункты.ОтборСтрок = ОтборСтрок;
	Элементы.ОтрезкиПути.ОтборСтрок = ОтборСтрок;
	
	Если ТекСтрокаПункты = Неопределено Тогда
		Элементы.ДатыДействия.ОтборСтрок = Новый ФиксированнаяСтруктура();
		флFTL = Ложь;
	Иначе
		Элементы.ДатыДействия.ОтборСтрок = Новый ФиксированнаяСтруктура(Новый Структура("ID", Строка(ТекСтрокаПункты.ID)));
		флFTL = ТекСтрокаПункты.FTL;
	КонецЕсли;
	
	Элементы.ГрузовойСоставГруппаЗаполнение.Доступность = ОтборСтрокПоПунктам;
	Элементы.ТоварныйСоставГруппаЗаполнить.Доступность = ОтборСтрокПоПунктам;
	
	Если флFTL Тогда
		Элементы.ГруппаМаршрутКолонки.ТекущаяСтраница = Элементы.ГруппаОсновноеМаршрут;
	Иначе
		Элементы.ГруппаМаршрутКолонки.ТекущаяСтраница = Элементы.ГруппаОсновноеКолонки;
	КонецЕсли;
	
	Если ОтборСтрокПоПунктам Тогда
		Элементы.ГрузовойСоставОтрезокПути.Видимость = флFTL
			И (Объект.ДетализацияЗаказов = ПредопределенноеЗначение("Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам")
			Или Объект.ДетализацияЗаказов = ПредопределенноеЗначение("Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам"));
		Элементы.ТоварныйСоставОтрезокПути.Видимость = флFTL
			И Объект.ДетализацияЗаказов = ПредопределенноеЗначение("Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам");
	КонецЕсли;
	
	ОбновитьКоличествоСтрокВШапкахТЧ();
	ОбновитьПодвалУслуги();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьКоличествоСтрокВШапкахТЧ()
	ТекСтрокаПункт = Элементы.ПунктыНазначения.ТекущиеДанные;
	Если ТекСтрокаПункт = Неопределено Тогда
		ГрузовойСоставКоличество = Объект.ГрузовойСостав.Количество();
		ТоварныйСоставКоличество = Объект.ТоварныйСостав.Количество();
		УслугиКоличество         = Объект.Услуги.Количество();
		ЗатратыКоличество        = Объект.Расходы.Количество();
	Иначе
		ГрузовойСоставКоличество = Объект.ГрузовойСостав.НайтиСтроки(Новый Структура("ID", ТекСтрокаПункт.ID)).Количество();
		ТоварныйСоставКоличество = Объект.ТоварныйСостав.НайтиСтроки(Новый Структура("ID", ТекСтрокаПункт.ID)).Количество();
		УслугиКоличество         = Объект.Услуги.НайтиСтроки(Новый Структура("ID", ТекСтрокаПункт.ID)).Количество();
		ЗатратыКоличество        = Объект.Расходы.НайтиСтроки(Новый Структура("ID", ТекСтрокаПункт.ID)).Количество();
	КонецЕсли;
	СоставКоличество = ГрузовойСоставКоличество + ТоварныйСоставКоличество;
КонецПроцедуры

&НаКлиенте
Процедура ПунктыНазначенияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	Если НоваяСтрока Тогда
		Элементы.ПунктыНазначения.ТекущиеДанные.ID = Новый УникальныйИдентификатор();
		
		Если Не Объект.ПериодическаяПотребность Тогда 
			Элементы.ПунктыНазначения.ТекущиеДанные.ДатаОтправления = Объект.Дата;
			Элементы.ПунктыНазначения.ТекущиеДанные.ДатаПрибытия = Объект.Дата;
		КонецЕсли;
		
		СтруктураОбъектовНастроек = Новый Структура;
		СтруктураОбъектовНастроек.Вставить("Организация",  Объект.Организация);
		СтруктураОбъектовНастроек.Вставить("Пользователь", ПользователиКлиентСервер.АвторизованныйПользователь());
		
		Элементы.ПунктыНазначения.ТекущиеДанные.ВидПеревозки = ПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ОсновнойВидПеревозок"));
		//Элементы.ПунктыНазначения.ТекущиеДанные.ВидДоставки = ПредопределенноеЗначение("Перечисление.уатВидыДоставки_уэ.ДверьДверь");
		Элементы.ПунктыНазначения.ТекущиеДанные.ВидДоставки = ПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ОсновнойВидДоставки"));
		Элементы.ПунктыНазначения.ТекущиеДанные.НаправлениеПеревозки = ПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ОсновноеНаправлениеПеревозки"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПунктыНазначенияПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ТекСтрока = Элементы.ПунктыНазначения.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекСтрока.ID) Тогда 
		ТекСтрока.ID = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	Если НЕ ОтменаРедактирования И НоваяСтрока Тогда
		ЗаполнитьДопВыработкуПриСоздании(ТекСтрока.ID);
	КонецЕсли;
	
	ЗаполнитьСформированныеЗаказы();
	
	ПунктыНазначенияПриОкончанииРедактированияСервер(ТекСтрока.ID);
	
	УстановитьСнятьОтборСтрокПоПунктам();
	ОбновитьНадписьИтоги();
	ОбновитьВсегоВТЧ();
	
КонецПроцедуры

&НаСервере
Процедура ПунктыНазначенияПриОкончанииРедактированияСервер(ТекСтрокаID)
	РассчитатьПоказателиСервер(ТекСтрокаID, Ложь);
	ОбновитьВалютуВТЧГрузовТоваровСервер();
	ОбновитьАдресаСтрокойСервер();
	ОбновитьПараметрВыработкиВременный();
КонецПроцедуры

&НаКлиенте
Процедура ПунктыНазначенияПриАктивизацииСтроки(Элемент)
	
	ТекСтрокаПункты = Элементы.ПунктыНазначения.ТекущиеДанные;
	Если ТекСтрокаПункты = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекСтрокаПункты.ID) Тогда 
		ТекСтрокаПункты.ID = Новый УникальныйИдентификатор;
	КонецЕсли;
	
	УстановитьСнятьОтборСтрокПоПунктам(); 
	Элементы.РассчитатьПоказатели1.Доступность = (ТекСтрокаПункты <> Неопределено);
	Элементы.РассчитатьПоказатели2.Доступность = (ТекСтрокаПункты <> Неопределено);
	
	ОбновитьВсегоВТЧ();
	ОбновитьНадписьИтоги();
	УстановитьОграничениеТипаОтправительПолучатель(ТекСтрокаПункты);
	ОтобразитьСтатусыАдресов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПунктыНазначенияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле.Имя = "ПунктыНазначенияЗаказы" Тогда
		СтандартнаяОбработка = Ложь;
		СоздЗаказы = Элементы.ПунктыНазначения.ТекущиеДанные.Заказы;
		ПоказатьЗначение(Неопределено, СоздЗаказы);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПунктыНазначенияПередУдалением(Элемент, Отказ)
	мIDстрокиТЧПунктыНазначения = Элемент.ТекущиеДанные.ID;
КонецПроцедуры

&НаКлиенте
Процедура ПунктыНазначенияПослеУдаления(Элемент)
	
	ПунктыНазначенияПослеУдаленияНаСервере(мIDстрокиТЧПунктыНазначения);
	мIDстрокиТЧПунктыНазначения = "";
	
КонецПроцедуры

&НаСервере
Процедура ПунктыНазначенияПослеУдаленияНаСервере(мIDстроки = "")
	
	Если Не ПустаяСтрока(мIDстроки) Тогда
		НайдСтроки = Объект.ГрузовойСостав.НайтиСтроки(Новый Структура("ID", мIDстроки));
		Для Каждого удСтрока Из НайдСтроки Цикл
			Объект.ГрузовойСостав.Удалить(удСтрока);
		КонецЦикла;
		НайдСтроки = Объект.ТоварныйСостав.НайтиСтроки(Новый Структура("ID", мIDстроки));
		Для Каждого удСтрока Из НайдСтроки Цикл
			Объект.ТоварныйСостав.Удалить(удСтрока);
		КонецЦикла;
		НайдСтроки = Объект.Услуги.НайтиСтроки(Новый Структура("ID", мIDстроки));
		Для Каждого удСтрока Из НайдСтроки Цикл
			Объект.Услуги.Удалить(удСтрока);
		КонецЦикла;
		НайдСтроки = Объект.ДатыДействия.НайтиСтроки(Новый Структура("ID", мIDстроки));
		Для Каждого удСтрока Из НайдСтроки Цикл
			Объект.ДатыДействия.Удалить(удСтрока);
		КонецЦикла;
		НайдСтроки = ПромежуточныеПункты.НайтиСтроки(Новый Структура("ID", мIDстроки));
		Для Каждого удСтрока Из НайдСтроки Цикл
			ПромежуточныеПункты.Удалить(удСтрока);
		КонецЦикла;
		НайдСтроки = Объект.Выработка.НайтиСтроки(Новый Структура("ID", мIDстроки));
		Для Каждого удСтрока Из НайдСтроки Цикл
			Объект.Выработка.Удалить(удСтрока);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПунктыНазначенияКонтактноеЛицоГрузоотправителяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекСтрока = Элементы.ПунктыНазначения.ТекущиеДанные;
	уатОбщегоНазначенияТиповыеКлиент.уатНачалоВыбораКонтактногоЛицаКонтрагента(Элемент, СтандартнаяОбработка,
		?(Не ЗначениеЗаполнено(ТекСтрока.Грузоотправитель), Объект.Контрагент, ТекСтрока.Грузоотправитель));
КонецПроцедуры

&НаКлиенте
Процедура ПунктыНазначенияКонтактноеЛицоГрузополучателяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекСтрока = Элементы.ПунктыНазначения.ТекущиеДанные;
	уатОбщегоНазначенияТиповыеКлиент.уатНачалоВыбораКонтактногоЛицаКонтрагента(Элемент, СтандартнаяОбработка,
		?(Не ЗначениеЗаполнено(ТекСтрока.Грузополучатель), Объект.Контрагент, ТекСтрока.Грузополучатель));
КонецПроцедуры

&НаКлиенте
Процедура ПунктыНазначенияАдресОтправленияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатОбщегоНазначенияКлиент.ПунктНачалоВыбора(Элемент, СтандартнаяОбработка, Элементы.ПунктыНазначения.ТекущиеДанные.АдресОтправления);
КонецПроцедуры

&НаКлиенте
Процедура ПунктыНазначенияАдресОтправленияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекСтрока = Элементы.ПунктыНазначения.ТекущиеДанные;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Строка") тогда
		мВыбЗнач = ВыбранноеЗначение;
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.уатПунктыНазначения") тогда 
		мВыбЗнач = ВыбранноеЗначение;
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СтрокаДереваЗначений") тогда
		мВыбЗнач = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "Значение");
	Иначе
		Возврат;
	КонецЕсли;
	
	уатОбщегоНазначенияКлиент.ПунктОбработкаВыбора(ТекСтрока.АдресОтправления, мВыбЗнач, СтандартнаяОбработка);
	ПунктыНазначенияАдресОтправленияПриИзменении(Элементы.ПунктыНазначенияАдресОтправления);
	
КонецПроцедуры

&НаКлиенте
Процедура ПунктыНазначенияАдресОтправленияАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПунктыНазначения.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда 
		СписокВыбора = Элементы.ПунктыНазначенияАдресОтправления.СписокВыбора;
		СписокВыбора.Очистить();
		АресаКонтрагента = ПолучитьАдреса(?(ЗначениеЗаполнено(ТекущиеДанные.Грузоотправитель), ТекущиеДанные.Грузоотправитель, Объект.Контрагент), Ложь);
		Для Каждого ТекСтрока ИЗ АресаКонтрагента Цикл
			СписокВыбора.Добавить(ТекСтрока);
		КонецЦикла;
		
		Если АресаКонтрагента.Количество() = 0 И ЗначениеЗаполнено(ТекущиеДанные.Грузоотправитель) Тогда
			АресаКонтрагента = ПолучитьАдреса(Объект.Контрагент, Ложь);
			Для Каждого ТекСтрока ИЗ АресаКонтрагента Цикл
				СписокВыбора.Добавить(ТекСтрока);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	СписокАдреса = ПодобратьАдреса(Текст);
	Если СписокАдреса.Количество() = 0 Тогда
	Иначе
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = СписокАдреса;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПунктыНазначенияАдресОтправленияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	СписокАдреса = ПодобратьАдреса(Текст);
	Если СписокАдреса.Количество() = 0 Тогда
		Элементы.ПунктыНазначения.ТекущиеДанные.АдресОтправления = Текст;
		ПунктыНазначенияАдресОтправленияПриИзменении(Неопределено);
	Иначе
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = СписокАдреса;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПунктыНазначенияГрузоотправительПриИзменении(Элемент)
	
	ТекСтрокаПункты = Элементы.ПунктыНазначения.ТекущиеДанные;
	Если ТекСтрокаПункты = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТекСтрокаПункты.ВидДоставки = ПредопределенноеЗначение("Перечисление.уатВидыДоставки_уэ.СкладДверь")
			Или ТекСтрокаПункты.ВидДоставки = ПредопределенноеЗначение("Перечисление.уатВидыДоставки_уэ.СкладСклад") Тогда
		АдресСкладаОтправителя = уатОбщегоНазначения_уэ.АдресСклада(ТекСтрокаПункты.Грузоотправитель);
		
		Если ЗначениеЗаполнено(АдресСкладаОтправителя) И ТекСтрокаПункты.АдресОтправления <> АдресСкладаОтправителя Тогда
			ТекСтрокаПункты.АдресОтправления = АдресСкладаОтправителя;
			РазрешеноИспользоватьРасписание = Ложь;
			ПунктыНазначенияАдресОтправленияПриИзмененииФрагмент(РазрешеноИспользоватьРасписание);
		КонецЕсли;
		
	Иначе
		АдресИзменен = Ложь;
		
		КонтактноеЛицоАдрес = ПолучитьКонтактноеЛицоАдрес(ТекСтрокаПункты.Грузоотправитель);
		
		Если ЗначениеЗаполнено(КонтактноеЛицоАдрес.Адрес) И Не ЗначениеЗаполнено(ТекСтрокаПункты.АдресОтправления) Тогда
			ТекСтрокаПункты.АдресОтправления = КонтактноеЛицоАдрес.Адрес;
			АдресИзменен = Истина;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекСтрокаПункты.КонтактноеЛицоГрузоотправителя) Тогда 
			ТекСтрокаПункты.КонтактноеЛицоГрузоотправителя = КонтактноеЛицоАдрес.КонтактноеЛицо;
		КонецЕсли;
		
		Если АдресИзменен Тогда 
			РазрешеноИспользоватьРасписание = Ложь;
			ПунктыНазначенияАдресОтправленияПриИзмененииФрагмент(РазрешеноИспользоватьРасписание);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПунктыНазначенияГрузоотправительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ТекСтрокаПункты = Элементы.ПунктыНазначения.ТекущиеДанные;
	Если ТекСтрокаПункты = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТекСтрокаПункты.ВидДоставки = ПредопределенноеЗначение("Перечисление.уатВидыДоставки_уэ.СкладДверь")
		ИЛИ ТекСтрокаПункты.ВидДоставки = ПредопределенноеЗначение("Перечисление.уатВидыДоставки_уэ.СкладСклад") Тогда
		Возврат;
	КонецЕсли;
	
	уатОбщегоНазначенияКлиент.КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПунктыНазначенияГрузоотправительАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ТекСтрокаПункты = Элементы.ПунктыНазначения.ТекущиеДанные;
	Если ТекСтрокаПункты = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТекСтрокаПункты.ВидДоставки = ПредопределенноеЗначение("Перечисление.уатВидыДоставки_уэ.СкладДверь")
		ИЛИ ТекСтрокаПункты.ВидДоставки = ПредопределенноеЗначение("Перечисление.уатВидыДоставки_уэ.СкладСклад") Тогда
		Возврат;
	КонецЕсли;
	
	уатОбщегоНазначенияКлиент.КонтрагентАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПунктыНазначенияГрузоотправительОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ТекСтрокаПункты = Элементы.ПунктыНазначения.ТекущиеДанные;
	Если ТекСтрокаПункты = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТекСтрокаПункты.ВидДоставки = ПредопределенноеЗначение("Перечисление.уатВидыДоставки_уэ.СкладДверь")
		ИЛИ ТекСтрокаПункты.ВидДоставки = ПредопределенноеЗначение("Перечисление.уатВидыДоставки_уэ.СкладСклад") Тогда
		Возврат;
	КонецЕсли;
	
	уатОбщегоНазначенияКлиент.КонтрагентОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПунктыНазначенияСтоянкаПунктОтправленияПриИзменении(Элемент)
	
	ТекСтрокаПункты = Элементы.ПунктыНазначения.ТекущиеДанные;
	Если ТекСтрокаПункты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РассчитатьПоказателиСервер(ТекСтрокаПункты.ID, Ложь);
	УстановитьСнятьОтборСтрокПоПунктам();
	ОбновитьНадписьИтоги();
	ОбновитьВсегоВТЧ();
	ОбновитьВалютуВТЧГрузовТоваровСервер();
	ОбновитьАдресаСтрокойСервер();
	ОбновитьПараметрВыработкиВременный();
	
КонецПроцедуры

&НаКлиенте
Процедура ПунктыНазначенияАдресНазначенияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатОбщегоНазначенияКлиент.ПунктНачалоВыбора(Элемент, СтандартнаяОбработка, Элементы.ПунктыНазначения.ТекущиеДанные.АдресНазначения);
КонецПроцедуры

&НаКлиенте
Процедура ПунктыНазначенияАдресНазначенияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекСтрока = Элементы.ПунктыНазначения.ТекущиеДанные;
	
	Если ТипЗнч(ВыбранноеЗначение) = Тип("Строка") тогда
		мВыбЗнач = ВыбранноеЗначение;
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.уатПунктыНазначения") тогда 
		мВыбЗнач = ВыбранноеЗначение;
	ИначеЕсли ТипЗнч(ВыбранноеЗначение) = Тип("СтрокаДереваЗначений") тогда
		мВыбЗнач = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ВыбранноеЗначение, "Значение");
	Иначе
		Возврат;
	КонецЕсли;
	
	уатОбщегоНазначенияКлиент.ПунктОбработкаВыбора(ТекСтрока.АдресНазначения, мВыбЗнач, СтандартнаяОбработка);
	ПунктыНазначенияАдресНазначенияПриИзменении(Элементы.ПунктыНазначенияАдресОтправления);
	
КонецПроцедуры

&НаКлиенте
Процедура ПунктыНазначенияАдресНазначенияАвтоПодбор(Элемент, Текст, ДанныеВыбора, Параметры, Ожидание, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПунктыНазначения.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда 
		СписокВыбора = Элементы.ПунктыНазначенияАдресНазначения.СписокВыбора;
		СписокВыбора.Очистить();
		АресаКонтрагента = ПолучитьАдреса(?(ЗначениеЗаполнено(ТекущиеДанные.Грузополучатель), ТекущиеДанные.Грузополучатель, Объект.Контрагент), Ложь);
		Для Каждого ТекСтрока ИЗ АресаКонтрагента Цикл
			СписокВыбора.Добавить(ТекСтрока);
		КонецЦикла;
		
		Если АресаКонтрагента.Количество() = 0 И ЗначениеЗаполнено(ТекущиеДанные.Грузополучатель) Тогда
			АресаКонтрагента = ПолучитьАдреса(Объект.Контрагент, Ложь);
			Для Каждого ТекСтрока ИЗ АресаКонтрагента Цикл
				СписокВыбора.Добавить(ТекСтрока);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	СписокАдреса = ПодобратьАдреса(Текст);
	Если СписокАдреса.Количество() = 0 Тогда
	Иначе
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = СписокАдреса;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПунктыНазначенияАдресНазначенияОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, Параметры, СтандартнаяОбработка)
	СписокАдреса = ПодобратьАдреса(Текст);
	Если СписокАдреса.Количество() = 0 Тогда
		Элементы.ПунктыНазначения.ТекущиеДанные.АдресНазначения = Текст;
		ПунктыНазначенияАдресНазначенияПриИзменении(Неопределено);
	Иначе
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = СписокАдреса;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПунктыНазначенияГрузополучательПриИзменении(Элемент)
	
	ТекСтрокаПункты = Элементы.ПунктыНазначения.ТекущиеДанные;
	Если ТекСтрокаПункты = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТекСтрокаПункты.ВидДоставки = ПредопределенноеЗначение("Перечисление.уатВидыДоставки_уэ.ДверьСклад")
			Или ТекСтрокаПункты.ВидДоставки = ПредопределенноеЗначение("Перечисление.уатВидыДоставки_уэ.СкладСклад") Тогда
		АдресСкладаПолучателя = уатОбщегоНазначения_уэ.АдресСклада(ТекСтрокаПункты.Грузополучатель);
		
		Если ЗначениеЗаполнено(АдресСкладаПолучателя) И ТекСтрокаПункты.АдресНазначения <> АдресСкладаПолучателя Тогда
			ТекСтрокаПункты.АдресНазначения = АдресСкладаПолучателя;
			РазрешеноИспользоватьРасписание = Ложь;
			ПунктыНазначенияАдресНазначенияПриИзмененииФрагмент(РазрешеноИспользоватьРасписание);
		КонецЕсли;
		
	Иначе
		АдресИзменен = Ложь;
		
		КонтактноеЛицоАдрес = ПолучитьКонтактноеЛицоАдрес(ТекСтрокаПункты.Грузополучатель);
		
		Если ЗначениеЗаполнено(КонтактноеЛицоАдрес.Адрес) И Не ЗначениеЗаполнено(ТекСтрокаПункты.АдресНазначения) Тогда
			ТекСтрокаПункты.АдресНазначения = КонтактноеЛицоАдрес.Адрес;
			АдресИзменен = Истина;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(ТекСтрокаПункты.КонтактноеЛицоГрузополучателя) Тогда 
			ТекСтрокаПункты.КонтактноеЛицоГрузополучателя = КонтактноеЛицоАдрес.КонтактноеЛицо;
		КонецЕсли;
		
		Если АдресИзменен Тогда 
			РазрешеноИспользоватьРасписание = Ложь;
			ПунктыНазначенияАдресНазначенияПриИзмененииФрагмент(РазрешеноИспользоватьРасписание);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПунктыНазначенияГрузополучательОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ТекСтрокаПункты = Элементы.ПунктыНазначения.ТекущиеДанные;
	Если ТекСтрокаПункты = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТекСтрокаПункты.ВидДоставки = ПредопределенноеЗначение("Перечисление.уатВидыДоставки_уэ.ДверьСклад")
		ИЛИ ТекСтрокаПункты.ВидДоставки = ПредопределенноеЗначение("Перечисление.уатВидыДоставки_уэ.СкладСклад") Тогда
		Возврат;
	КонецЕсли;
	
	уатОбщегоНазначенияКлиент.КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ПунктыНазначенияГрузополучательАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ТекСтрокаПункты = Элементы.ПунктыНазначения.ТекущиеДанные;
	Если ТекСтрокаПункты = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТекСтрокаПункты.ВидДоставки = ПредопределенноеЗначение("Перечисление.уатВидыДоставки_уэ.ДверьСклад")
		ИЛИ ТекСтрокаПункты.ВидДоставки = ПредопределенноеЗначение("Перечисление.уатВидыДоставки_уэ.СкладСклад") Тогда
		Возврат;
	КонецЕсли;
	
	уатОбщегоНазначенияКлиент.КонтрагентАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПунктыНазначенияГрузополучательОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ТекСтрокаПункты = Элементы.ПунктыНазначения.ТекущиеДанные;
	Если ТекСтрокаПункты = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТекСтрокаПункты.ВидДоставки = ПредопределенноеЗначение("Перечисление.уатВидыДоставки_уэ.ДверьСклад")
		ИЛИ ТекСтрокаПункты.ВидДоставки = ПредопределенноеЗначение("Перечисление.уатВидыДоставки_уэ.СкладСклад") Тогда
		Возврат;
	КонецЕсли;
	
	уатОбщегоНазначенияКлиент.КонтрагентОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПунктыНазначенияСтоянкаПунктНазначенияПриИзменении(Элемент)
	
	ТекСтрокаПункты = Элементы.ПунктыНазначения.ТекущиеДанные;
	Если ТекСтрокаПункты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РассчитатьПоказателиСервер(ТекСтрокаПункты.ID, Ложь);
	УстановитьСнятьОтборСтрокПоПунктам();
	ОбновитьНадписьИтоги();
	ОбновитьВсегоВТЧ();
	ОбновитьВалютуВТЧГрузовТоваровСервер();
	ОбновитьАдресаСтрокойСервер();
	ОбновитьПараметрВыработкиВременный();
	
КонецПроцедуры

&НаКлиенте
Процедура ПунктыНазначенияДатаОтправленияПриИзменении(Элемент)
	ТекСтрока = Элементы.ПунктыНазначения.ТекущиеДанные;
	Если ТекСтрока <> Неопределено Тогда
		Если Не ЗначениеЗаполнено(ТекСтрока.ДатаПрибытия) Тогда
			ТекСтрока.ДатаПрибытия = ТекСтрока.ДатаОтправления
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПунктыНазначенияДатаПрибытияПриИзменении(Элемент)
	ТекСтрока = Элементы.ПунктыНазначения.ТекущиеДанные;
	Если ТекСтрока <> Неопределено Тогда
		Если Не ЗначениеЗаполнено(ТекСтрока.ДатаОтправления) Тогда
			ТекСтрока.ДатаОтправления = ТекСтрока.ДатаПрибытия;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПунктыНазначенияАдресОтправленияПриИзменении(Элемент)
	
	РазрешеноИспользоватьРасписание = Истина;
	ПунктыНазначенияАдресОтправленияПриИзмененииФрагмент(РазрешеноИспользоватьРасписание)
	
КонецПроцедуры

&НаКлиенте
Процедура ПунктыНазначенияАдресОтправленияПриИзмененииФрагмент(РазрешеноИспользоватьРасписание = Ложь)
	
	ТекСтрока = Элементы.ПунктыНазначения.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекСтрока.АдресОтправленияСтрока = ТекСтрока.АдресОтправления;
	
	// Подбор времени прибытия/убытия по расписанию
	ДанныеРасписания = Неопределено;
	Если РазрешеноИспользоватьРасписание И Не Объект.ПериодическаяПотребность Тогда
		// Подбор времени прибытия/убытия по расписанию
		СтруктураПараметров = Новый Структура("Маршрут, АдресОтправления, АдресНазначения, Грузоотправитель, Грузополучатель");
		СтруктураПараметров.Маршрут = ТекСтрока.Маршрут;
		СтруктураПараметров.АдресОтправления = ТекСтрока.АдресОтправления;
		СтруктураПараметров.АдресНазначения = ТекСтрока.АдресНазначения;
		СтруктураПараметров.Грузоотправитель = ТекСтрока.Грузоотправитель;
		СтруктураПараметров.Грузополучатель = ТекСтрока.Грузополучатель;
		Если ЗначениеЗаполнено(Объект.Дата) Тогда
			НачалоПериода = Объект.Дата;
		Иначе
			НачалоПериода = Неопределено;
		КонецЕсли;
		ДанныеРасписания = уатОбщегоНазначения_уэ.БлижайшийДоступныйРейс(НачалоПериода,, СтруктураПараметров);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекСтрока.АдресОтправления) Тогда
		Если ТипЗнч(ТекСтрока.АдресОтправления) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда
			ТекСтрока.СтоянкаПунктОтправления = ПолучитьВремяСтоянкиПоУмолчанию(ТекСтрока.АдресОтправления);
		Иначе
			ТекСтрока.СтоянкаПунктОтправления = 0;
		КонецЕсли;
		
		Если ДанныеРасписания <> Неопределено Тогда
			ЗаполнитьДатыПоРасписанию(ДанныеРасписания, ТекСтрока);
		ИначеЕсли ТипЗнч(ТекСтрока.АдресОтправления) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда
			ВремяДоступности = уатОбщегоНазначения_проф.ПолучитьВремяДоступностиПункта(ТекСтрока.АдресОтправления, ТекСтрока.Грузоотправитель);
			
			ТекСтрока.ОтправлениеС  = ВремяДоступности.ВремяДоступностиС;
			ВремяДоступностиПо = ВремяДоступности.ВремяДоступностиПо;
			ТекСтрока.ОтправлениеПо = ?(ЗначениеЗаполнено(ВремяДоступностиПо), ВремяДоступностиПо, '00010101235900');
		Иначе 
			ТекСтрока.ОтправлениеС  = 0;
			ТекСтрока.ОтправлениеПо = '00010101235900';
		КонецЕсли;
	КонецЕсли;
	
	ОчиститьВремяРасстояниеМеждуПунктами(ТекСтрока.ID);
	
	ПересчитатьСтоянкуПоДокументу(ТекСтрока.ID);
	
	Если Не ТекСтрока.FTL Тогда 
		РассчитатьПоказателиСервер(ТекСтрока.ID, Истина);
		
		УстановитьСнятьОтборСтрокПоПунктам();
		ОбновитьНадписьИтоги();
		ОбновитьВсегоВТЧ();
		ОбновитьВалютуВТЧГрузовТоваровСервер();
		ОбновитьАдресаСтрокойСервер();
		ОбновитьПараметрВыработкиВременный();
	КонецЕсли;
	
	ПунктыНазначенияПриАктивизацииСтроки(Элементы.ПунктыНазначения);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПунктыНазначенияАдресНазначенияПриИзменении(Элемент)
	
	РазрешеноИспользоватьРасписание = Истина;
	ПунктыНазначенияАдресНазначенияПриИзмененииФрагмент(РазрешеноИспользоватьРасписание)
	
КонецПроцедуры

&НаКлиенте
Процедура ПунктыНазначенияАдресНазначенияПриИзмененииФрагмент(РазрешеноИспользоватьРасписание = Ложь)
	
	ТекСтрока = Элементы.ПунктыНазначения.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекСтрока.АдресНазначенияСтрока = ТекСтрока.АдресНазначения;
	
	// Подбор времени прибытия/убытия по расписанию
	ДанныеРасписания = Неопределено;
	Если РазрешеноИспользоватьРасписание И Не Объект.ПериодическаяПотребность Тогда
		// Подбор времени прибытия/убытия по расписанию
		СтруктураПараметров = Новый Структура("Маршрут, АдресОтправления, АдресНазначения, Грузоотправитель, Грузополучатель");
		СтруктураПараметров.Маршрут = ТекСтрока.Маршрут;
		СтруктураПараметров.АдресОтправления = ТекСтрока.АдресОтправления;
		СтруктураПараметров.АдресНазначения = ТекСтрока.АдресНазначения;
		СтруктураПараметров.Грузоотправитель = ТекСтрока.Грузоотправитель;
		СтруктураПараметров.Грузополучатель = ТекСтрока.Грузополучатель;
		Если ЗначениеЗаполнено(Объект.Дата) Тогда
			НачалоПериода = Объект.Дата;
		Иначе
			НачалоПериода = Неопределено;
		КонецЕсли;
		ДанныеРасписания = уатОбщегоНазначения_уэ.БлижайшийДоступныйРейс(НачалоПериода,, СтруктураПараметров);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекСтрока.АдресНазначения) Тогда
		Если ТипЗнч(ТекСтрока.АдресНазначения) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда
			ТекСтрока.СтоянкаПунктНазначения = ПолучитьВремяСтоянкиПоУмолчанию(ТекСтрока.АдресНазначения);
			Если Не ЗначениеЗаполнено(ТекСтрока.НаправлениеПеревозки) Тогда
				ТекСтрока.НаправлениеПеревозки = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрока.АдресНазначения, "НаправлениеПеревозки");
			КонецЕсли;
		Иначе 
			ТекСтрока.СтоянкаПунктНазначения = 0;
		КонецЕсли;
		
		Если ДанныеРасписания <> Неопределено Тогда
			ЗаполнитьДатыПоРасписанию(ДанныеРасписания, ТекСтрока);
		ИначеЕсли ТипЗнч(ТекСтрока.АдресНазначения) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда
			ВремяДоступности = уатОбщегоНазначения_проф.ПолучитьВремяДоступностиПункта(ТекСтрока.АдресНазначения, ТекСтрока.Грузополучатель);
			ТекСтрока.ПрибытиеС = ВремяДоступности.ВремяДоступностиС;
			ВремяДоступностиПо = ВремяДоступности.ВремяДоступностиПо;
			ТекСтрока.ПрибытиеПо = ?(ЗначениеЗаполнено(ВремяДоступностиПо), ВремяДоступностиПо, '00010101235900');
		Иначе 
			ТекСтрока.ПрибытиеС  = 0;
			ТекСтрока.ПрибытиеПо = '00010101235900';
		КонецЕсли;
	КонецЕсли;
	
	ОчиститьВремяРасстояниеМеждуПунктами(ТекСтрока.ID);
	
	ПересчитатьСтоянкуПоДокументу(ТекСтрока.ID);
	
	Если Не ТекСтрока.FTL Тогда 
		РассчитатьПоказателиСервер(ТекСтрока.ID, Истина);
		
		УстановитьСнятьОтборСтрокПоПунктам();
		ОбновитьНадписьИтоги();
		ОбновитьВсегоВТЧ();
		ОбновитьВалютуВТЧГрузовТоваровСервер();
		ОбновитьАдресаСтрокойСервер();
		ОбновитьПараметрВыработкиВременный();
	КонецЕсли;
	
	ПунктыНазначенияПриАктивизацииСтроки(Элементы.ПунктыНазначения);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПунктыНазначенияТребованиеКТСПриИзменении(Элемент)
	ТекСтрока = Элементы.ПунктыНазначения.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекСтрока.ТребованиеКТС) Тогда
		ТекСтрока.ТребованиеКТСтипТС = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрока.ТребованиеКТС, "ТипТС");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПунктыНазначенияТребованиеКТСТипТСПриИзменении(Элемент)
	ТекСтрока = Элементы.ПунктыНазначения.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекСтрока.ТребованиеКТСтипТС) Тогда
		Модель_ТипТС = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрока.ТребованиеКТС, "ТипТС");
		Если Модель_ТипТС <> ТекСтрока.ТребованиеКТСтипТС Тогда
			ТекСтрока.ТребованиеКТС = Неопределено;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПунктыНазначенияМаршрутПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПунктыНазначения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	УстановитьДанныеПоМаршрутуСервер(ТекущиеДанные.ID);
	
	// Подбор времени прибытия/убытия по расписанию
	СтруктураПараметров = Новый Структура("Маршрут, АдресОтправления, АдресНазначения, Грузоотправитель, Грузополучатель");
	СтруктураПараметров.Маршрут = ТекущиеДанные.Маршрут;
	СтруктураПараметров.АдресОтправления = ТекущиеДанные.АдресОтправления;
	СтруктураПараметров.АдресНазначения = ТекущиеДанные.АдресНазначения;
	СтруктураПараметров.Грузоотправитель = ТекущиеДанные.Грузоотправитель;
	СтруктураПараметров.Грузополучатель = ТекущиеДанные.Грузополучатель;
	Если ЗначениеЗаполнено(Объект.Дата) Тогда
		НачалоПериода = Объект.Дата;
	Иначе
		НачалоПериода = Неопределено;
	КонецЕсли;
	ДанныеРасписания = уатОбщегоНазначения_уэ.БлижайшийДоступныйРейс(НачалоПериода,, СтруктураПараметров);
	Если ДанныеРасписания <> Неопределено Тогда
		ЗаполнитьДатыПоРасписанию(ДанныеРасписания, ТекущиеДанные);
	ИначеЕсли ТекущиеДанные.FTL Тогда 
		ПромежуточныеПунктыПриИзменении(Элементы.ПромежуточныеПункты);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПунктыНазначенияFTLПриИзменении(Элемент) 
	
	ТекущиеДанные = Элементы.ПунктыНазначения.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДатаВыезда   = Неопределено;
	ДатаВозврата = Неопределено;
	
	Для Каждого ТекУдаляемаяСтрока Из ПромежуточныеПункты.НайтиСтроки(Новый Структура("ID", ТекущиеДанные.ID)) Цикл 
		Если ДатаВыезда = Неопределено Тогда 
			ДатаВыезда = ТекУдаляемаяСтрока.ПрибытиеПлан;
		Иначе 
			ДатаВыезда = Мин(ДатаВыезда, ТекУдаляемаяСтрока.ПрибытиеПлан);
		КонецЕсли;
		
		Если ДатаВозврата = Неопределено Тогда 
			ДатаВозврата = ТекУдаляемаяСтрока.УбытиеПлан;
		Иначе 
			ДатаВозврата = Макс(ДатаВозврата, ТекУдаляемаяСтрока.УбытиеПлан);
		КонецЕсли;
		
		ПромежуточныеПункты.Удалить(ТекУдаляемаяСтрока);
	КонецЦикла;
	
	Если ТекущиеДанные.FTL Тогда 
		ДобавитьПунктыШапкиВПромежуточныеПункты(ТекущиеДанные.ID);
		
	Иначе 
		Если Не Объект.ПериодическаяПотребность Тогда 
			ТекущиеДанные.ДатаОтправления = ДатаВыезда;
			ТекущиеДанные.ДатаПрибытия    = ДатаВозврата;
		КонецЕсли;
		
		ТекущиеДанные.Время      = 0;
		ТекущиеДанные.Расстояние = 0;
		ТекущиеДанные.Стоянка    = 0;
	КонецЕсли;
	
	// Очистка отрезков пути
	Если Не ТекущиеДанные.FTL Тогда
		Сч = Объект.ОтрезкиПути.Количество();
		Пока Сч > 0 Цикл
			Сч = Сч-1;
			Если Не Объект.ОтрезкиПути[Сч].ID = ТекущиеДанные.ID Тогда 
				Продолжить;
			КонецЕсли;
			Объект.ОтрезкиПути.Удалить(Сч);
		КонецЦикла;
		
		Для Каждого ТекСтрока Из Объект.ГрузовойСостав Цикл
			Если Не ТекСтрока.ID = ТекущиеДанные.ID Тогда
				Продолжить;
			КонецЕсли;
			ТекСтрока.ОтрезокПути = "";
		КонецЦикла;
		
		Для Каждого ТекСтрока Из Объект.ТоварныйСостав Цикл
			Если Не ТекСтрока.ID = ТекущиеДанные.ID Тогда
				Продолжить;
			КонецЕсли;
			ТекСтрока.ОтрезокПути = "";
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПунктыНазначенияВидДоставкиПриИзменении(Элемент)
	УстановитьОграничениеТипаОтправительПолучатель(Элементы.ПунктыНазначения.ТекущиеДанные);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_ДатыДействия

&НаКлиенте
Процедура ДатыДействияДатаОтправленияПриИзменении(Элемент)
	
	ТекСтрока = Элементы.ДатыДействия.ТекущиеДанные;
	Если ТекСтрока <> Неопределено Тогда
		Если Не ЗначениеЗаполнено(ТекСтрока.ДатаПрибытия) Тогда
			ТекСтрока.ДатаПрибытия = ТекСтрока.ДатаОтправления
		КонецЕсли;
	КонецЕсли;
	ЗаполнитьСформированныеЗаказы();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатыДействияДатаПрибытияПриИзменении(Элемент)
	
	ТекСтрока = Элементы.ДатыДействия.ТекущиеДанные;
	Если ТекСтрока <> Неопределено Тогда
		Если Не ЗначениеЗаполнено(ТекСтрока.ДатаОтправления) Тогда
			ТекСтрока.ДатаОтправления = ТекСтрока.ДатаПрибытия
		КонецЕсли;
	КонецЕсли;
	ЗаполнитьСформированныеЗаказы();
	
КонецПроцедуры

&НаКлиенте
Процедура ДатыДействияПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	ТекСтрокаПункты = Элементы.ПунктыНазначения.ТекущиеДанные;
	Если ТекСтрокаПункты = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДатыДействияПередУдалением(Элемент, Отказ)
	ТекСтрока = Элементы.ДатыДействия.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекСтрока.Заказ) Тогда
		Отказ = Истина;
		ДопПараметры = Новый Структура("ИндексДаты", Объект.ДатыДействия.Индекс(ТекСтрока));
		ТекстНСТР = НСтр("en='Associated order was found on date ""%1"". If you delete line, the connection will be lost! Continue?';ru='На дату ""%1"" обнаружен связанный заказ. При удалении строки связь будет потеряна! Продолжить?'");
		ТекстНСТР = СтрШаблон(ТекстНСТР, Формат(ТекСтрока.ДатаОтправления, "ДФ=dd.MM.yyyy"));
		ПоказатьВопрос(Новый ОписаниеОповещения("ДатыДействияПередУдалениемВопрос", ЭтотОбъект, ДопПараметры),
			ТекстНСТР, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДатыДействияПередУдалениемВопрос(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		Объект.ДатыДействия.Удалить(ДопПараметры.ИндексДаты);
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДатыДействияПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		ТекСтрока = Элементы.ДатыДействия.ТекущиеДанные;
		ТекСтрока.ID = Элементы.ПунктыНазначения.ТекущиеДанные.ID;
		ТекСтрока.IDДатыДействия = Новый УникальныйИдентификатор;
		ТекСтрока.Заказ = Неопределено;
		ТекСтрока.НомерЗаказа = "";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДатыДействияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле.Имя = "ДатыДействияЗаказ" Тогда
		СтандартнаяОбработка = Ложь;
		СоздЗаказы = Элементы.ДатыДействия.ТекущиеДанные.Заказ;
		ПоказатьЗначение(Неопределено, СоздЗаказы);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатыДействия(Команда)
	
	ТекСтрокаПункты = Элементы.ПунктыНазначения.ТекущиеДанные;
	Если ТекСтрокаПункты = Неопределено Тогда
		ТекстНСТР = НСтр("en='Not filled tabular part ""destinations"", or none lines are not active!';ru='Не заполнена табличная часть ""Пункты назначения"", или ни одна из строк не активна!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		Возврат;
	КонецЕсли;
	
	// Проверка на имеющиеся строки с отбором по ИД
	НайденыеСтрокиID = Объект.ДатыДействия.НайтиСтроки(Новый Структура("ID", ТекСтрокаПункты.ID));
	Если НайденыеСтрокиID.Количество() > 0 Тогда
		ТекстВопроса = НСтр("en='Do you want to clear the table before filling?';ru='Очистить таблицу перед заполнением?'");
		Для Каждого ТекСтрока Из НайденыеСтрокиID Цикл
			Если ЗначениеЗаполнено(ТекСтрока.Заказ) Тогда
				ТекстВопроса = ТекстВопроса + НСтр("en=' Associated orders are detected. When clearing the connection will be lost! Continue?';ru=' Обнаружены связанные заказы. При очистке связь будет утеряна! Продолжить?'");
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьДатыДействияЗавершение", ЭтотОбъект, НайденыеСтрокиID), ТекстВопроса,
			РежимДиалогаВопрос.ДаНетОтмена,, КодВозвратаДиалога.Нет);
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДатыДействияФрагмент();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатыДействияЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
		Если ТипЗнч(ДополнительныеПараметры) = Тип("Массив") Тогда
			Для Каждого ТекУдСтрока Из ДополнительныеПараметры Цикл	
				Объект.ДатыДействия.Удалить(ТекУдСтрока);
			КонецЦикла;
		Иначе	
			Возврат;	
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьДатыДействияФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатыДействияФрагмент()
	Параметрыформы = Новый Структура("АдресОтправления, АдресНазначения, Грузоотправитель, Грузополучатель, Маршрут");
	ТекСтрокаПункты = Элементы.ПунктыНазначения.ТекущиеДанные;
	Если ТекСтрокаПункты <> Неопределено Тогда
		ПараметрыФормы.АдресОтправления = ТекСтрокаПункты.АдресОтправления;
		ПараметрыФормы.АдресНазначения = ТекСтрокаПункты.АдресНазначения;
		ПараметрыФормы.Грузоотправитель = ТекСтрокаПункты.Грузоотправитель;
		ПараметрыФормы.Грузополучатель = ТекСтрокаПункты.Грузополучатель;
		ПараметрыФормы.Маршрут = ТекСтрокаПункты.Маршрут;
	КонецЕсли;
    ОписаниеОповещенияПриЗаполненииДатДействия = Новый ОписаниеОповещения("ОбработкаЗаполненияДатДействия", ЭтотОбъект);
    ОткрытьФорму("Документ.уатПотребностьВПеревозке_уэ.Форма.ЗаполнитьДатыДействия",Параметрыформы, ЭтотОбъект,,,, ОписаниеОповещенияПриЗаполненииДатДействия);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаЗаполненияДатДействия(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Массив") И Результат.Количество() > 0 Тогда
		ТекстНСтр = НСтр("ru='В таблицу ""Даты действия"" добавлено строк: %1';en='Added %1 rows to table ""Action dates""'");
		ТекстСообщения = СтрШаблон(ТекстНСтр, Результат.Количество());
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения);
		Для Каждого ТекДата Из Результат Цикл
			НоваяСтрока = Объект.ДатыДействия.Добавить();
			НоваяСтрока.ДатаОтправления = ТекДата.ДатаОтпр;
			НоваяСтрока.ДатаПрибытия = ТекДата.ДатаПриб;
			НоваяСтрока.ID = Элементы.ПунктыНазначения.ТекущиеДанные.ID;
			НоваяСтрока.IDДатыДействия = Новый УникальныйИдентификатор;
		КонецЦикла;
		ЗаполнитьСформированныеЗаказы();
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_ПромежуточныеПункты

&НаКлиенте
Процедура ПромежуточныеПунктыПриИзменении(Элемент)
	
	СтрокаЗаказа = Элементы.ПунктыНазначения.ТекущиеДанные;
	Если СтрокаЗаказа = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ПромежуточныеПункты.ТекущиеДанные;
	Если Не ТекущиеДанные = Неопределено И Не ЗначениеЗаполнено(ТекущиеДанные.ID) Тогда
		ТекущиеДанные.ID = СтрокаЗаказа.ID;
	КонецЕсли;
	
	ЗаписатьПромежуточныеПункты();
	ПрочитатьПромежуточныеПункты();
	
	ПромежуточныеПунктыПоЗаказу = ПромежуточныеПункты.НайтиСтроки(Новый Структура("ID", СтрокаЗаказа.ID));
	
	Если ПромежуточныеПунктыПоЗаказу.Количество() < 2 Тогда 
		СтрокаЗаказа.АдресОтправления               = Неопределено;
		СтрокаЗаказа.СтоянкаПунктОтправления        = Неопределено;
		СтрокаЗаказа.Грузоотправитель               = Неопределено;
		СтрокаЗаказа.КонтактноеЛицоГрузоотправителя = Неопределено;
		СтрокаЗаказа.ОтправлениеС                   = Неопределено;
		СтрокаЗаказа.ОтправлениеПо                  = Неопределено;
		АдресОтправленияСтрока                      = Неопределено;
		
		СтрокаЗаказа.АдресНазначения               = Неопределено;
		СтрокаЗаказа.СтоянкаПунктНазначения        = Неопределено;
		СтрокаЗаказа.Грузополучатель               = Неопределено;
		СтрокаЗаказа.КонтактноеЛицоГрузополучателя = Неопределено;
		СтрокаЗаказа.ПрибытиеС                     = Неопределено;
		СтрокаЗаказа.ПрибытиеПо                    = Неопределено;
		АдресНазначенияСтрока                      = Неопределено;
		
		СтрокаЗаказа.Стоянка = Неопределено;
		
		ОчиститьВремяРасстояниеМеждуПунктами(СтрокаЗаказа.ID);
		
	ИначеЕсли ПромежуточныеПунктыПоЗаказу.Количество() > 1 Тогда 
		Если Не СтрокаЗаказа.АдресОтправления = ПромежуточныеПунктыПоЗаказу[0].Пункт Тогда 
			СтрокаЗаказа.АдресОтправления = ПромежуточныеПунктыПоЗаказу[0].Пункт;
			РазрешеноИспользоватьРасписание = Ложь;
			ПунктыНазначенияАдресОтправленияПриИзмененииФрагмент(РазрешеноИспользоватьРасписание);
		КонецЕсли;
		
		Если Не СтрокаЗаказа.Грузоотправитель = ПромежуточныеПунктыПоЗаказу[0].ОтправительПолучатель Тогда 
			СтрокаЗаказа.Грузоотправитель = ПромежуточныеПунктыПоЗаказу[0].ОтправительПолучатель;
			ПунктыНазначенияГрузоотправительПриИзменении(Элементы.ПунктыНазначенияГрузоотправитель);
		КонецЕсли;
		
		Если Не СтрокаЗаказа.КонтактноеЛицоГрузоотправителя = ПромежуточныеПунктыПоЗаказу[0].КонтактноеЛицо Тогда 
			СтрокаЗаказа.КонтактноеЛицоГрузоотправителя = ПромежуточныеПунктыПоЗаказу[0].КонтактноеЛицо;
		КонецЕсли;
		
		Если Не СтрокаЗаказа.ОтправлениеС = ПромежуточныеПунктыПоЗаказу[0].ПрибытиеПлан Тогда 
			СтрокаЗаказа.ОтправлениеС = ПромежуточныеПунктыПоЗаказу[0].ПрибытиеПлан;
		КонецЕсли;
		
		Если Не СтрокаЗаказа.ОтправлениеПо = ПромежуточныеПунктыПоЗаказу[0].УбытиеПлан Тогда 
			СтрокаЗаказа.ОтправлениеПо = ПромежуточныеПунктыПоЗаказу[0].УбытиеПлан;
		КонецЕсли;
		
		Если Не СтрокаЗаказа.СтоянкаПунктОтправления = ПромежуточныеПунктыПоЗаказу[0].Стоянка Тогда 
			СтрокаЗаказа.СтоянкаПунктОтправления = ПромежуточныеПунктыПоЗаказу[0].Стоянка;
			ПунктыНазначенияСтоянкаПунктОтправленияПриИзменении(Элементы.ПунктыНазначенияСтоянкаПунктОтправления);
		КонецЕсли;
		
		Если Не СтрокаЗаказа.АдресНазначения = ПромежуточныеПунктыПоЗаказу[ПромежуточныеПунктыПоЗаказу.Количество()-1].Пункт Тогда 
			СтрокаЗаказа.АдресНазначения = ПромежуточныеПунктыПоЗаказу[ПромежуточныеПунктыПоЗаказу.Количество()-1].Пункт;
			РазрешеноИспользоватьРасписание = Ложь;
			ПунктыНазначенияАдресНазначенияПриИзмененииФрагмент(РазрешеноИспользоватьРасписание);
		КонецЕсли;
		
		Если Не СтрокаЗаказа.Грузополучатель = ПромежуточныеПунктыПоЗаказу[ПромежуточныеПунктыПоЗаказу.Количество()-1].ОтправительПолучатель Тогда 
			СтрокаЗаказа.Грузополучатель = ПромежуточныеПунктыПоЗаказу[ПромежуточныеПунктыПоЗаказу.Количество()-1].ОтправительПолучатель;
			ПунктыНазначенияГрузополучательПриИзменении(Элементы.ПунктыНазначенияГрузополучатель);
		КонецЕсли;
		
		Если Не СтрокаЗаказа.КонтактноеЛицоГрузополучателя = ПромежуточныеПунктыПоЗаказу[ПромежуточныеПунктыПоЗаказу.Количество()-1].КонтактноеЛицо Тогда 
			СтрокаЗаказа.КонтактноеЛицоГрузополучателя = ПромежуточныеПунктыПоЗаказу[ПромежуточныеПунктыПоЗаказу.Количество()-1].КонтактноеЛицо;
		КонецЕсли;
		
		Если Не СтрокаЗаказа.ПрибытиеС = ПромежуточныеПунктыПоЗаказу[ПромежуточныеПунктыПоЗаказу.Количество()-1].ПрибытиеПлан Тогда 
			СтрокаЗаказа.ПрибытиеС = ПромежуточныеПунктыПоЗаказу[ПромежуточныеПунктыПоЗаказу.Количество()-1].ПрибытиеПлан;
		КонецЕсли;
		
		Если Не СтрокаЗаказа.ПрибытиеПо = ПромежуточныеПунктыПоЗаказу[ПромежуточныеПунктыПоЗаказу.Количество()-1].УбытиеПлан Тогда 
			СтрокаЗаказа.ПрибытиеПо = ПромежуточныеПунктыПоЗаказу[ПромежуточныеПунктыПоЗаказу.Количество()-1].УбытиеПлан;
		КонецЕсли;
		
		Если Не СтрокаЗаказа.СтоянкаПунктНазначения = ПромежуточныеПунктыПоЗаказу[ПромежуточныеПунктыПоЗаказу.Количество()-1].Стоянка Тогда 
			СтрокаЗаказа.СтоянкаПунктНазначения = ПромежуточныеПунктыПоЗаказу[ПромежуточныеПунктыПоЗаказу.Количество()-1].Стоянка;
			ПунктыНазначенияСтоянкаПунктНазначенияПриИзменении(Элементы.ПунктыНазначенияСтоянкаПунктНазначения);
		КонецЕсли;
	КонецЕсли;
	
	ОтобразитьСтатусыАдресов();
	
	РассчитатьПоказателиСервер(СтрокаЗаказа.ID, Истина);
	УстановитьСнятьОтборСтрокПоПунктам();
	ОбновитьНадписьИтоги();
	ОбновитьВсегоВТЧ();
	ОбновитьАдресаСтрокойСервер();
	ОбновитьПараметрВыработкиВременный();
	ОбновитьВалютуВТЧГрузовТоваровСервер();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ПромежуточныеПунктыПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.ТекущийЭлемент = Элементы.ПромежуточныеПунктыПрибытиеПлан
			Или Элемент.ТекущийЭлемент = Элементы.ПромежуточныеПунктыУбытиеПлан Тогда 
		ДанныеСтрокиПромежуточныхПунктов = Новый Структура();
		ДанныеСтрокиПромежуточныхПунктов.Вставить("ПрибытиеПлан", Элемент.ТекущиеДанные.ПрибытиеПлан);
		ДанныеСтрокиПромежуточныхПунктов.Вставить("УбытиеПлан", Элемент.ТекущиеДанные.УбытиеПлан);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПромежуточныеПунктыПрибытиеПланПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПромежуточныеПункты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ДанныеСтрокиПромежуточныхПунктов = Неопределено И Не ПромежуточныеПункты.Индекс(ТекущиеДанные) = 0 Тогда 
		ОжиданиеСек = ТекущиеДанные.ПрибытиеПлан - ДанныеСтрокиПромежуточныхПунктов.ПрибытиеПлан;
		ОжиданиеЧас = Цел(ОжиданиеСек / 3600);
		ОжиданиеСек = ОжиданиеСек - ОжиданиеЧас * 3600;
		ОжиданиеМин = Цел(ОжиданиеСек / 60);
		ОжиданиеСек = ОжиданиеСек - ОжиданиеМин * 60;
		Если ОжиданиеСек > 30 Тогда 
			ОжиданиеМин = ОжиданиеМин + 1;
		КонецЕсли;
		Если ОжиданиеМин > 59 Тогда 
			ОжиданиеМин = 0;
			ОжиданиеЧас = ОжиданиеЧас + 1;
		КонецЕсли;
		
		ТекущиеДанные.Ожидание = уатЗащищенныеФункцииСервер.СложитьВремя(
			ТекущиеДанные.Ожидание, 
			(ОжиданиеЧас + ОжиданиеМин / 100)
		);
	КонецЕсли;
	
	// Обновление временного окна прибытия в пункт. Выполняется только для той строки, в которой изменилось время,
	// в остальных строках будет выполнено в процедуре ПрочитатьПромежуточныеПункты
	Если Не ДанныеСтрокиПромежуточныхПунктов = Неопределено Тогда
		СдвигОкна = НачалоДня(ТекущиеДанные.ПрибытиеПлан) - НачалоДня(ДанныеСтрокиПромежуточныхПунктов.ПрибытиеПлан);
		ТекущиеДанные.ОкноС  = ТекущиеДанные.ОкноС  + СдвигОкна;
		ТекущиеДанные.ОкноПо = ТекущиеДанные.ОкноПо + СдвигОкна;
	КонецЕсли;
	
	ДанныеСтрокиПромежуточныхПунктов = Новый Структура();
	ДанныеСтрокиПромежуточныхПунктов.Вставить("ПрибытиеПлан", ТекущиеДанные.ПрибытиеПлан);
	ДанныеСтрокиПромежуточныхПунктов.Вставить("УбытиеПлан", ТекущиеДанные.УбытиеПлан);
	
КонецПроцедуры

&НаКлиенте
Процедура ПромежуточныеПунктыУбытиеПланПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПромежуточныеПункты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ДанныеСтрокиПромежуточныхПунктов = Неопределено Тогда
		ОжиданиеСек = ТекущиеДанные.УбытиеПлан - ДанныеСтрокиПромежуточныхПунктов.УбытиеПлан;
		
		Если ПромежуточныеПункты.Индекс(ТекущиеДанные) = 0 Тогда 
			ТекущиеДанные.ПрибытиеПлан = ТекущиеДанные.ПрибытиеПлан + ОжиданиеСек;
			
		Иначе 
			ОжиданиеЧас = Цел(ОжиданиеСек / 3600);
			ОжиданиеСек = ОжиданиеСек - ОжиданиеЧас * 3600;
			ОжиданиеМин = Цел(ОжиданиеСек / 60);
			ОжиданиеСек = ОжиданиеСек - ОжиданиеМин * 60;
			Если ОжиданиеСек > 30 Тогда 
				ОжиданиеМин = ОжиданиеМин + 1;
			КонецЕсли;
			Если ОжиданиеМин > 59 Тогда 
				ОжиданиеМин = 0;
				ОжиданиеЧас = ОжиданиеЧас + 1;
			КонецЕсли;
			
			ТекущиеДанные.Ожидание = уатЗащищенныеФункцииСервер.СложитьВремя(
				ТекущиеДанные.Ожидание, 
				(ОжиданиеЧас + ОжиданиеМин / 100)
			);
		КонецЕсли;
		
		// Обновление временного окна прибытия в пункт. Выполняется только для той строки, в которой изменилось время,
		// в остальных строках будет выполнено в процедуре ПрочитатьПромежуточныеПункты
		СдвигОкна = НачалоДня(ТекущиеДанные.УбытиеПлан) - НачалоДня(ДанныеСтрокиПромежуточныхПунктов.УбытиеПлан);
		ТекущиеДанные.ОкноС  = ТекущиеДанные.ОкноС  + СдвигОкна;
		ТекущиеДанные.ОкноПо = ТекущиеДанные.ОкноПо + СдвигОкна;
	КонецЕсли;
	
	ДанныеСтрокиПромежуточныхПунктов = Новый Структура();
	ДанныеСтрокиПромежуточныхПунктов.Вставить("ПрибытиеПлан", ТекущиеДанные.ПрибытиеПлан);
	ДанныеСтрокиПромежуточныхПунктов.Вставить("УбытиеПлан", ТекущиеДанные.УбытиеПлан);
	
КонецПроцедуры

&НаКлиенте
Процедура ПромежуточныеПунктыПунктПриИзменении(Элемент)
	
	СтрокаЗаказа = Элементы.ПунктыНазначения.ТекущиеДанные;
	Если СтрокаЗаказа = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ПромежуточныеПункты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	уатОбщегоНазначенияКлиент.ЗаполнитьВремяДоступностиИСтоянкуВПункте(ТекущиеДанные, Объект.Дата);
	
	ОчиститьВремяРасстояниеМеждуПунктами(СтрокаЗаказа.ID);
	
	ПересчитатьСтоянкуПоДокументу(СтрокаЗаказа.ID);
	ПромежуточныеПунктыПриИзменении(Элементы.ПромежуточныеПункты);
	
КонецПроцедуры

&НаКлиенте
Процедура ПромежуточныеПунктыПунктНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПромежуточныеПункты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	уатОбщегоНазначенияКлиент.ПунктНачалоВыбора(Элемент, СтандартнаяОбработка, ТекущиеДанные.Пункт);
	
КонецПроцедуры

&НаКлиенте
Процедура ПромежуточныеПунктыПунктОчистка(Элемент, СтандартнаяОбработка)
	
	ПромежуточныеПунктыПунктПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПромежуточныеПунктыПунктОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.ПромежуточныеПункты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекущиеДанные.Пункт) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда
		ПоказатьЗначение(Неопределено, ТекущиеДанные.Пункт);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПромежуточныеПунктыПунктОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПромежуточныеПункты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Пункт = ВыбранноеЗначение;
	ПромежуточныеПунктыПунктПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПромежуточныеПунктыПунктАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПромежуточныеПункты.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено Тогда 
		СписокВыбора = Элементы.ПромежуточныеПунктыПункт.СписокВыбора;
		СписокВыбора.Очистить();
		АресаКонтрагента = ПолучитьАдреса(?(ЗначениеЗаполнено(ТекущиеДанные.ОтправительПолучатель), ТекущиеДанные.ОтправительПолучатель, Объект.Контрагент), Ложь);
		Для Каждого ТекСтрока ИЗ АресаКонтрагента Цикл
			СписокВыбора.Добавить(ТекСтрока);
		КонецЦикла;
		
		Если АресаКонтрагента.Количество() = 0 И ЗначениеЗаполнено(ТекущиеДанные.ОтправительПолучатель) Тогда
			АресаКонтрагента = ПолучитьАдреса(Объект.Контрагент, Ложь);
			Для Каждого ТекСтрока ИЗ АресаКонтрагента Цикл
				СписокВыбора.Добавить(ТекСтрока);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Если Ожидание = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СписокАдреса = ПодобратьАдреса(Текст);
	Если СписокАдреса.Количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = СписокАдреса;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПромежуточныеПунктыПунктОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПромежуточныеПункты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Пункт = Текст;
	ПромежуточныеПунктыПунктПриИзменении(Элемент);
	
КонецПроцедуры

&НаКлиенте
Процедура ПромежуточныеПунктыОтправительПолучательПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПромежуточныеПункты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	АдресИзменен = Ложь;
	
	КонтактноеЛицоАдрес = ПолучитьКонтактноеЛицоАдрес(ТекущиеДанные.ОтправительПолучатель);
	
	Если ЗначениеЗаполнено(КонтактноеЛицоАдрес.Адрес) И Не ЗначениеЗаполнено(ТекущиеДанные.Пункт) Тогда
		ТекущиеДанные.Пункт = КонтактноеЛицоАдрес.Адрес;
		АдресИзменен = Истина;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.КонтактноеЛицо) Тогда 
		ТекущиеДанные.КонтактноеЛицо = КонтактноеЛицоАдрес.КонтактноеЛицо;
	КонецЕсли;
	
	Если АдресИзменен Тогда 
		ПромежуточныеПунктыПунктПриИзменении(Элементы.ПромежуточныеПунктыПункт);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПромежуточныеПунктыОтправительПолучательНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаЗаказа = Элементы.ПунктыНазначения.ТекущиеДанные;
	Если СтрокаЗаказа = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ПромежуточныеПункты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ТипТочкиМаршрута = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Погрузка")
			Или ТекущиеДанные.ТипТочкиМаршрута = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.ДополнительнаяПогрузка") Тогда 
		Если СтрокаЗаказа.ВидДоставки = ПредопределенноеЗначение("Перечисление.уатВидыДоставки_уэ.СкладДверь")
				Или СтрокаЗаказа.ВидДоставки = ПредопределенноеЗначение("Перечисление.уатВидыДоставки_уэ.СкладСклад") Тогда
			СтандартнаяОбработка = Ложь;
			ОткрытьФорму("Справочник.Склады.ФормаВыбора",, Элемент);
		Иначе 
			СтандартнаяОбработка = Ложь;
			ОткрытьФорму("Справочник.Контрагенты.ФормаВыбора",, Элемент);
		КонецЕсли;
		
	Иначе 
		Если СтрокаЗаказа.ВидДоставки = ПредопределенноеЗначение("Перечисление.уатВидыДоставки_уэ.ДверьСклад")
				Или СтрокаЗаказа.ВидДоставки = ПредопределенноеЗначение("Перечисление.уатВидыДоставки_уэ.СкладСклад") Тогда
			СтандартнаяОбработка = Ложь;
			ОткрытьФорму("Справочник.Склады.ФормаВыбора",, Элемент);
		Иначе 
			СтандартнаяОбработка = Ложь;
			ОткрытьФорму("Справочник.Контрагенты.ФормаВыбора",, Элемент);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПромежуточныеПунктыОтправительПолучательОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтрокаЗаказа = Элементы.ПунктыНазначения.ТекущиеДанные;
	Если СтрокаЗаказа = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ПромежуточныеПункты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ТипТочкиМаршрута = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Погрузка")
			Или ТекущиеДанные.ТипТочкиМаршрута = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.ДополнительнаяПогрузка") Тогда 
		Если СтрокаЗаказа.ВидДоставки = ПредопределенноеЗначение("Перечисление.уатВидыДоставки_уэ.СкладДверь")
				Или СтрокаЗаказа.ВидДоставки = ПредопределенноеЗначение("Перечисление.уатВидыДоставки_уэ.СкладСклад") Тогда
			Возврат;
		КонецЕсли;
		
		уатОбщегоНазначенияКлиент.КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
		
	Иначе 
		Если СтрокаЗаказа.ВидДоставки = ПредопределенноеЗначение("Перечисление.уатВидыДоставки_уэ.ДверьСклад")
				Или СтрокаЗаказа.ВидДоставки = ПредопределенноеЗначение("Перечисление.уатВидыДоставки_уэ.СкладСклад") Тогда
			Возврат;
		КонецЕсли;
		
		уатОбщегоНазначенияКлиент.КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПромежуточныеПунктыОтправительПолучательАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтрокаЗаказа = Элементы.ПунктыНазначения.ТекущиеДанные;
	Если СтрокаЗаказа = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ПромежуточныеПункты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ТипТочкиМаршрута = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Погрузка")
			Или ТекущиеДанные.ТипТочкиМаршрута = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.ДополнительнаяПогрузка") Тогда 
		Если СтрокаЗаказа.ВидДоставки = ПредопределенноеЗначение("Перечисление.уатВидыДоставки_уэ.СкладДверь")
				Или СтрокаЗаказа.ВидДоставки = ПредопределенноеЗначение("Перечисление.уатВидыДоставки_уэ.СкладСклад") Тогда
			Возврат;
		КонецЕсли;
		
		уатОбщегоНазначенияКлиент.КонтрагентАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
		
	Иначе 
		Если СтрокаЗаказа.ВидДоставки = ПредопределенноеЗначение("Перечисление.уатВидыДоставки_уэ.ДверьСклад")
				Или СтрокаЗаказа.ВидДоставки = ПредопределенноеЗначение("Перечисление.уатВидыДоставки_уэ.СкладСклад") Тогда
			Возврат;
		КонецЕсли;
		
		уатОбщегоНазначенияКлиент.КонтрагентАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПромежуточныеПунктыОтправительПолучательОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	СтрокаЗаказа = Элементы.ПунктыНазначения.ТекущиеДанные;
	Если СтрокаЗаказа = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ПромежуточныеПункты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные.ТипТочкиМаршрута = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Погрузка")
			Или ТекущиеДанные.ТипТочкиМаршрута = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.ДополнительнаяПогрузка") Тогда 
		Если СтрокаЗаказа.ВидДоставки = ПредопределенноеЗначение("Перечисление.уатВидыДоставки_уэ.СкладДверь")
				Или СтрокаЗаказа.ВидДоставки = ПредопределенноеЗначение("Перечисление.уатВидыДоставки_уэ.СкладСклад") Тогда
			Возврат;
		КонецЕсли;
		
		уатОбщегоНазначенияКлиент.КонтрагентОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
		
	Иначе 
		Если СтрокаЗаказа.ВидДоставки = ПредопределенноеЗначение("Перечисление.уатВидыДоставки_уэ.ДверьСклад")
				Или СтрокаЗаказа.ВидДоставки = ПредопределенноеЗначение("Перечисление.уатВидыДоставки_уэ.СкладСклад") Тогда
			Возврат;
		КонецЕсли;
		
		уатОбщегоНазначенияКлиент.КонтрагентОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПромежуточныеПунктыКонтактноеЛицоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.ПромежуточныеПункты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	уатОбщегоНазначенияТиповыеКлиент.уатНачалоВыбораКонтактногоЛицаКонтрагента(
		Элемент, 
		СтандартнаяОбработка,
		?(Не ЗначениеЗаполнено(ТекущиеДанные.ОтправительПолучатель), Объект.Контрагент, ТекущиеДанные.ОтправительПолучатель)
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ПромежуточныеПунктыСтоянкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПромежуточныеПункты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	уатЗащищенныеФункцииСервер.КонтрольВводаВремени(ТекущиеДанные.Стоянка);
	
КонецПроцедуры

&НаКлиенте
Процедура ПромежуточныеПунктыОжиданиеПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПромежуточныеПункты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	уатЗащищенныеФункцииСервер.КонтрольВводаВремени(ТекущиеДанные.Ожидание);
	
КонецПроцедуры

&НаКлиенте
Процедура ПромежуточныеПунктыВремяПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПромежуточныеПункты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	уатЗащищенныеФункцииСервер.КонтрольВводаВремени(ТекущиеДанные.Время);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_ГрузовойСостав

&НаКлиенте
Процедура ЗаполнитьГрузовойСоставПоТоварному(Команда)
	
	АктивнСтрока = Элементы.ПунктыНазначения.ТекущиеДанные;
	Если АктивнСтрока = Неопределено Тогда
		ТекстНСТР = НСтр("en='Not filled tabular part ""destinations"", or none lines are not active!';ru='Не заполнена табличная часть ""Пункты назначения"", или ни одна из строк не активна!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		Возврат;
	КонецЕсли; 
	
	НайдСтокиПоIDТовар = Объект.ТоварныйСостав.НайтиСтроки(Новый Структура("ID",АктивнСтрока.ID));
	
	мКоличТоваров = 0;
	Если НайдСтокиПоIDТовар.Количество() > 0 Тогда
		СтруктураГрузовоеМесто = Новый Структура("ВесБрутто, КоличествоМест, Объем, Стоимость", 0,0,0,0);
		Для Каждого ТекСтрока Из НайдСтокиПоIDТовар Цикл
			Если ЗначениеЗаполнено(ТекСтрока.ГрузовоеМесто) Тогда
				Продолжить;
			КонецЕсли;
			
			СтруктураГрузовоеМесто.ВесБрутто = СтруктураГрузовоеМесто.ВесБрутто + ТекСтрока.ВесБрутто; 
			СтруктураГрузовоеМесто.КоличествоМест = СтруктураГрузовоеМесто.КоличествоМест + ТекСтрока.КоличествоМест;
			СтруктураГрузовоеМесто.Объем = СтруктураГрузовоеМесто.Объем + ТекСтрока.Объем;
			СтруктураГрузовоеМесто.Стоимость = СтруктураГрузовоеМесто.Стоимость + ТекСтрока.Сумма;
			
			мКоличТоваров = мКоличТоваров + 1;
		КонецЦикла;
		
		Если мКоличТоваров > 0 Тогда
			НовыйГруз = Объект.ГрузовойСостав.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйГруз, СтруктураГрузовоеМесто);
			НовыйГруз.ID = АктивнСтрока.ID;
		КонецЕсли;
		
		РассчитатьСуммуДокумента();
		ОбновитьВсегоВТЧТовары();
		ОбновитьКоличествоСтрокВШапкахТЧ();
		РассчитатьПоказатели(Неопределено);
		Модифицированность = Истина;
		
	КонецЕсли;
	
	Если мКоличТоваров = 0 Тогда
		ТекстНСТР = НСтр("en='In TP ""Commodity composition"", no lines with empty cargo place!';ru='В ТЧ ""Товарный состав"", нет строк с незаполненным грузовым местом!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
	КонецЕсли;
	
	РассчитатьПоказателиСервер(АктивнСтрока.ID, Ложь);
	УстановитьСнятьОтборСтрокПоПунктам();
	ОбновитьНадписьИтоги();
	ОбновитьВсегоВТЧ();
	ОбновитьВалютуВТЧГрузовТоваровСервер();
	ОбновитьАдресаСтрокойСервер();
	ОбновитьПараметрВыработкиВременный();
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьГрузовыеПараметры(Команда)
	Для Каждого ТекСтрока Из Объект.ГрузовойСостав Цикл
		ГрузовоеМестоСтруктура = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначенияРеквизитов(ТекСтрока.ГрузовоеМесто,
		"ВидУпаковки, ВесБрутто, КоличествоМест,
		|Объем, Длина, Ширина, Высота, Стоимость,
		|Валюта, СуммаВключаетНДС, УчитыватьНДС,
		|ОписаниеГруза,УникальноеГрузовоеМесто,ТипКонтейнера,Контейнер");
		
		ЗаполнитьЗначенияСвойств(ТекСтрока, ГрузовоеМестоСтруктура,
		"ВесБрутто, КоличествоМест,
		|Объем, Длина, Ширина, Высота, Стоимость,
		|ОписаниеГруза, УникальноеГрузовоеМесто");
		
		Если НЕ ЗначениеЗаполнено(ТекСтрока.ГрузовоеМесто) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ГрузовоеМестоСтруктура.Контейнер Тогда
			ТекСтрока.ВидУпаковки = ГрузовоеМестоСтруктура.ТипКонтейнера;
		Иначе
			ТекСтрока.ВидУпаковки = ГрузовоеМестоСтруктура.ВидУпаковки;
		КонецЕсли;
	КонецЦикла;
	ГрузовойСоставПриИзменении(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ПерезаполнитьГрузовыеПараметрыВСтроке(Команда)
	ТекСтрока = Элементы.ГрузовойСостав.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;

	ГрузовойСоставГрузовоеМестоПриИзменении(Неопределено);
	ГрузовойСоставПриИзменении(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьГрузовойСостав(Команда)
	ТекСтрокаПункт = Элементы.ПунктыНазначения.ТекущиеДанные;
	Если ТекСтрокаПункт = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	мсвСтрок = Объект.ГрузовойСостав.НайтиСтроки(Новый Структура("ID", ТекСтрокаПункт.ID));
	Если мсвСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДопПараметры = Новый Структура("IDстрокиПункта", ТекСтрокаПункт.ID);
	ТекстНСТР = НСтр("en='Clear freight train?';ru='Очистить грузовой состав?'");
	ПоказатьВопрос(Новый ОписаниеОповещения("ОчиститьГрузовойСоставОтвет", ЭтотОбъект, ДопПараметры),
		ТекстНСТР, РежимДиалогаВопрос.ОКОтмена);
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьГрузовойСоставОтвет(Результат, ДопПараметры) Экспорт
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Сч = Объект.ГрузовойСостав.Количество() - 1;
		Пока Сч >= 0 Цикл
			Если Объект.ГрузовойСостав[Сч].ID = ДопПараметры.IDстрокиПункта Тогда
				Объект.ГрузовойСостав.Удалить(Сч);
			КонецЕсли;
			Сч = Сч - 1;
		КонецЦикла;
		ОбновитьКоличествоСтрокВШапкахТЧ();
		
		РассчитатьПоказателиСервер(ДопПараметры.IDстрокиПункта, Ложь);
		УстановитьСнятьОтборСтрокПоПунктам();
		ОбновитьНадписьИтоги();
		ОбновитьВсегоВТЧ();
		ОбновитьВалютуВТЧГрузовТоваровСервер();
		ОбновитьАдресаСтрокойСервер();
		ОбновитьПараметрВыработкиВременный();
		
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РазбитьНаГрузовыеМеста(Команда)
	
	ТекСтрокаПН = Элементы.ПунктыНазначения.ТекущиеДанные;
	Если ТекСтрокаПН = Неопределено Тогда
		ТекстНСТР = НСтр("en='Not filled tabular part ""destinations"", or none lines are not active!';ru='Не заполнена табличная часть ""Пункты назначения"", или ни одна из строк не активна!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		Возврат;
	КонецЕсли;
	
	УдалитьСтрокуПосле = Истина;
	ТекСтрока = Элементы.ГрузовойСостав.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		УдалитьСтрокуПосле = Ложь;
	Иначе	
		Если ЗначениеЗаполнено(ТекСтрока.ГрузовоеМесто) Тогда
			УдалитьСтрокуПосле = Ложь;
		КонецЕсли;
	КонецЕсли;
		
	Если НЕ УдалитьСтрокуПосле Тогда
		ТекСтрока = Новый Структура("ВесБрутто, КоличествоМест, Объем, ВидУпаковки, ОписаниеГруза, Стоимость, Длина, Ширина, Высота",
			0, 0, 0, ПредопределенноеЗначение("Справочник.уатВидыУпаковки_уэ.ПустаяСсылка"), "", 0, 0, 0, 0);
	КонецЕсли;
	
	мсвТоварныйСостав = Новый Массив;
	НайдСтокиПоIDТовар = Объект.ТоварныйСостав.НайтиСтроки(Новый Структура("ID", ТекСтрокаПН.ID));
	
	Для Каждого ТекСтрокаТовар Из НайдСтокиПоIDТовар Цикл
		Если ЗначениеЗаполнено(ТекСтрокаТовар.ГрузовоеМесто) Тогда
			Продолжить;
		КонецЕсли; 
		
		СтруктураСтроки = Новый Структура("Номенклатура, ЕдиницаИзмерения, Количество, Цена, Сумма, СтавкаНДС, СуммаНДС");
		ЗаполнитьЗначенияСвойств(СтруктураСтроки, ТекСтрокаТовар);
		
		мсвТоварныйСостав.Добавить(СтруктураСтроки);
		
	КонецЦикла;
	
	Если мсвТоварныйСостав.Количество() = 0 Тогда
		ТекстНСТР = НСтр("en='Not detected lines with empty cargo space to split the packages!';ru='Не обнаружено строк с незаполненным грузовым местом для разбиения грузовых мест!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		Возврат;
	КонецЕсли;
	
	ОписаниеОповещенияПриЗаполненииДатДействия = Новый ОписаниеОповещения("ОбработкаРазбитьНаГрузовыеМеста", ЭтотОбъект,
		Новый Структура("мсвТоварныйСостав, ТекСтрока, УдалитьСтрокуПосле", мсвТоварныйСостав, ТекСтрока, УдалитьСтрокуПосле));
		
	ТекстНСТР = НСтр("en='Enter number of cargo places';ru='Введите количество грузовых мест'");
	ПоказатьВводЧисла(ОписаниеОповещенияПриЗаполненииДатДействия, 1, ТекстНСТР,, 0);
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаРазбитьНаГрузовыеМеста(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Число") И Результат > 0 Тогда
		
		КоличествоГрузовыхМест = Результат;
		мсвТоварныйСостав = ДополнительныеПараметры.мсвТоварныйСостав;
		ТекСтрока = ДополнительныеПараметры.ТекСтрока;
		УдалитьСтрокуПосле = ДополнительныеПараметры.УдалитьСтрокуПосле;
		
		Если Результат > 1 Тогда
			// Разделим пропорционально необходимые показатели
			
			ТекСтрока.ВесБрутто = ТекСтрока.ВесБрутто 	/ Результат; 
			ТекСтрока.Объем 	= ТекСтрока.Объем 		/ Результат;
			ТекСтрока.Стоимость = ТекСтрока.Стоимость 	/ Результат;
			ТекСтрока.КоличествоМест = Цел(ТекСтрока.КоличествоМест / Результат);
			
			Если ТекСтрока.КоличествоМест = 0 Тогда
				ТекСтрока.КоличествоМест = 1;
			КонецЕсли;
			
			Для Каждого ТекТовар Из мсвТоварныйСостав Цикл
				ТекТовар.Количество = ТекТовар.Количество 	/ Результат; 
				ТекТовар.Сумма 		= ТекТовар.Сумма 		/ Результат; 
				ТекТовар.СуммаНДС 	= ТекТовар.СуммаНДС 	/ Результат;		    
			КонецЦикла;
			
		КонецЕсли;	
		
		мКоличествоГрузовыхМестДляЦикла = КоличествоГрузовыхМест;
		
		ПараметрыФормы = Новый Структура("ТоварныйСостав, ВесБрутто, КоличествоМест, Объем, УчитыватьНДС, СуммаВключаетНДС, Валюта, ВидУпаковки, ОписаниеГруза, Стоимость, Длина, Ширина, Высота",
			мсвТоварныйСостав, ТекСтрока.ВесБрутто, ТекСтрока.КоличествоМест, ТекСтрока.Объем,
			Объект.УчитыватьНДС, Объект.СуммаВключаетНДС, Объект.ВалютаТоваров, ТекСтрока.ВидУпаковки,
			ТекСтрока.ОписаниеГруза, ТекСтрока.Стоимость, ТекСтрока.Длина, ТекСтрока.Ширина, ТекСтрока.Высота);
			
		ПараметрыФормы.Вставить("СозданиеГрузовогоМестаИзЗаказа", Истина);
		ПараметрыФормы.Вставить("УдалитьСтрокуПосле", УдалитьСтрокуПосле);
		
		ОткрытьФорму("Справочник.уатГрузовыеМеста_уэ.ФормаОбъекта", ПараметрыФормы);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработкаСозданияГрузовогоМеста(ГрузМесто, УдалитьСтрокуПосле, ТоварныйСоставДанныеФормы)
	
	ТекСтрокаПН = Элементы.ПунктыНазначения.ТекущиеДанные;
	Если ТекСтрокаПН = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если УдалитьСтрокуПосле Тогда
		ТекСтрока = Элементы.ГрузовойСостав.ТекущиеДанные;
		Если ТекСтрока = Неопределено Тогда
			Возврат;
		КонецЕсли;
		Объект.ГрузовойСостав.Удалить(ТекСтрока);
	КонецЕсли;
	
	Если Не (ТипЗнч(мКоличествоГрузовыхМестДляЦикла) = Тип("Число") И мКоличествоГрузовыхМестДляЦикла > 1) Тогда
		мКоличествоГрузовыхМестДляЦикла = 1;
	КонецЕсли;
	
	мсвДопГрузовыеМеста = СформироватьДополнительныеГрузовыеМеста(ГрузМесто, мКоличествоГрузовыхМестДляЦикла-1);
	
	Сч = 0;
	Пока мКоличествоГрузовыхМестДляЦикла > 0 Цикл
		НовСтрока = Объект.ГрузовойСостав.Добавить();
		
		// Второе и последующие грузовые места создаем программно добавлением к наименованию доп. индекса
		Сч = Сч + 1;
		Если Сч = 1 Тогда
			НовСтрока.ГрузовоеМесто = ГрузМесто;
		Иначе
			НовСтрока.ГрузовоеМесто = мсвДопГрузовыеМеста[Сч-2];
		КонецЕсли;
		
		НовСтрока.ID = ТекСтрокаПН.ID;
		
		ГрузовоеМестоСтруктура = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначенияРеквизитов(НовСтрока.ГрузовоеМесто,
			"ВидУпаковки, ВесБрутто, КоличествоМест, Объем, Длина, Ширина, Высота, Стоимость, Валюта, СуммаВключаетНДС, УчитыватьНДС, ОписаниеГруза");
		
		ЗаполнитьЗначенияСвойств(НовСтрока, ГрузовоеМестоСтруктура, "ВидУпаковки, ВесБрутто, КоличествоМест, Объем, Длина, Ширина, Высота, Стоимость, ОписаниеГруза");
		
		НайдСтокиПоIDТовар = Объект.ТоварныйСостав.НайтиСтроки(Новый Структура("ID", ТекСтрокаПН.ID));
		
		Для Каждого ТекСтрокаТовар Из НайдСтокиПоIDТовар Цикл
			Если ЗначениеЗаполнено(ТекСтрокаТовар.ГрузовоеМесто) Тогда
				Продолжить;
			КонецЕсли;
			Объект.ТоварныйСостав.Удалить(ТекСтрокаТовар);
		КонецЦикла;
		
		Для Каждого ТекСоставГрузМеста Из ТоварныйСоставДанныеФормы Цикл
			НовыйТовар = Объект.ТоварныйСостав.Добавить();
			НовыйТовар.ID = НовСтрока.ID;
			НовыйТовар.ГрузовоеМесто = НовСтрока.ГрузовоеМесто;
			НовыйТовар.Номенклатура = ТекСоставГрузМеста.Номенклатура;
			НовыйТовар.ЕдиницаИзмерения = ТекСоставГрузМеста.ЕдиницаИзмерения;
			НовыйТовар.Количество = ТекСоставГрузМеста.Количество;
			НовыйТовар.Цена = ТекСоставГрузМеста.Цена;
			НовыйТовар.Сумма = ТекСоставГрузМеста.Сумма;
			Если Объект.УчитыватьНДС Тогда
				НовыйТовар.СтавкаНДС = ТекСоставГрузМеста.СтавкаНДС;
				НовыйТовар.СуммаНДС  = ТекСоставГрузМеста.СуммаНДС;
			КонецЕсли;
			НовыйТовар.ЕдиницаИзмерения = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(НовыйТовар.Номенклатура,
				"ЕдиницаХраненияОстатков");
			
			ВесОбъем = уатОбщегоНазначения.ПолучитьВесОбъемНоменклатуры(НовыйТовар.Номенклатура, НовыйТовар.ЕдиницаИзмерения, НовыйТовар.Количество);
			НовыйТовар.ВесБрутто      = ВесОбъем.Вес;
			НовыйТовар.Объем          = ВесОбъем.Объем;
			НовыйТовар.КоличествоМест = ВесОбъем.КоличествоМест;
		КонецЦикла;
		
		мКоличествоГрузовыхМестДляЦикла = мКоличествоГрузовыхМестДляЦикла - 1;
	КонецЦикла;
	
	УстановитьСнятьОтборСтрокПоПунктам();
	
	РассчитатьСуммуДокумента();
	ОбновитьВсегоВТЧТовары();
	ОбновитьВалютуВТЧГрузовТоваровСервер();
	мКоличествоГрузовыхМестДляЦикла = 1;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьДополнительныеГрузовыеМеста(ГрузМесто, КоличДопМест)
	Рез = Новый Массив;
	
	Для Сч = 1 По КоличДопМест Цикл
		НовоеГрузМесто = ГрузМесто.Скопировать();
		НовоеГрузМесто.Наименование = ГрузМесто.Наименование + (Сч + 1);
		НовоеГрузМесто.Записать();
		Рез.Добавить(НовоеГрузМесто.Ссылка);
	КонецЦикла;
	
	Возврат Рез;
КонецФункции

&НаКлиенте
Процедура ГрузовойСоставПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	ТекСтрокаПункты = Элементы.ПунктыНазначения.ТекущиеДанные;
	Если ТекСтрокаПункты = Неопределено Тогда
		ТекстНСТР = НСтр("en='To add goods, you need to position on appropriate line in tabular section Destinations';ru='Для добавления грузов необходимо спозиционироваться на соответствующей строке табличной части Пункты назначения'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР,,,, Отказ);
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГрузовойСоставПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		Элементы.ГрузовойСостав.ТекущиеДанные.ID = Элементы.ПунктыНазначения.ТекущиеДанные.ID;
		
		Элементы.ГрузовойСостав.ТекущиеДанные.ПредставлениеОтрезкаПути = "";
		Сч = Объект.ОтрезкиПути.Количество();
		Пока Сч > 0 Цикл
			Сч = Сч-1;
			Если Объект.ОтрезкиПути[Сч].Груз = Элементы.ГрузовойСостав.ТекущиеДанные.НомерСтроки Тогда
				Объект.ОтрезкиПути.Удалить(Сч);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГрузовойСоставПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	РассчитатьСуммуДокумента();
	ОбновитьКоличествоСтрокВШапкахТЧ();
КонецПроцедуры

&НаКлиенте
Процедура ГрузовойСоставПослеУдаления(Элемент)
	РассчитатьСуммуДокумента();
КонецПроцедуры

&НаКлиенте
Процедура ГрузовойСоставГрузовоеМестоПриИзменении(Элемент)
	
	ТекДанные = Элементы.ГрузовойСостав.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекДанные.ГрузовоеМесто) Тогда
		ГрузовоеМестоСтруктура = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначенияРеквизитов(ТекДанные.ГрузовоеМесто,
		"ВидУпаковки, ВесБрутто, КоличествоМест, Объем, Длина, Ширина, Высота, Стоимость, Валюта, СуммаВключаетНДС,
		|УчитыватьНДС, ОписаниеГруза, Контейнер, УникальноеГрузовоеМесто,ТипКонтейнера");
		
		ЗаполнитьЗначенияСвойств(ТекДанные, ГрузовоеМестоСтруктура,
		"ВесБрутто, КоличествоМест, Объем, Длина, Ширина, Высота, Стоимость, ОписаниеГруза, УникальноеГрузовоеМесто");
		Если ГрузовоеМестоСтруктура.Контейнер Тогда
			ТекДанные.ВидУпаковки = ГрузовоеМестоСтруктура.ТипКонтейнера;
		Иначе
			ТекДанные.ВидУпаковки = ГрузовоеМестоСтруктура.ВидУпаковки;
		КонецЕсли;

	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ГрузовойСоставПриИзменении(Элемент)
	
	ТекСтрокаПункты = Элементы.ПунктыНазначения.ТекущиеДанные;
	Если ТекСтрокаПункты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекСтрока = Элементы.ГрузовойСостав.ТекущиеДанные;
	Если ТекСтрока <> Неопределено
		И ТекСтрока.ВидУпаковки = Неопределено Тогда 
		ТекСтрока.ВидУпаковки = ПредопределенноеЗначение("Справочник.уатВидыУпаковки_уэ.ПустаяСсылка"); 
	КонецЕсли;
	
	ОбновитьКоличествоСтрокВШапкахТЧ();
	ОбновитьВалютуВТЧГрузовТоваровСервер();
	РассчитатьПоказателиСервер(ТекСтрокаПункты.ID, Ложь);
	ЗаполнитьСформированныеЗаказы();
	УстановитьСнятьОтборСтрокПоПунктам();
	ОбновитьНадписьИтоги();
	ОбновитьВсегоВТЧ();
	ОбновитьВалютуВТЧГрузовТоваровСервер();
	ОбновитьАдресаСтрокойСервер();
	ОбновитьПараметрВыработкиВременный();
	ЗаполнитьРеквизитыГрузовыхМест();
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузовойСоставВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Элемент.ТекущиеДанные.УникальноеГрузовоеМесто
		И (Поле = Элементы.ГрузовойСоставКоличествоМест
			ИЛИ Поле = Элементы.ГрузовойСоставШирина
			ИЛИ Поле = Элементы.ГрузовойСоставВысота
			ИЛИ Поле = Элементы.ГрузовойСоставДлина
			ИЛИ Поле = Элементы.ГрузовойСоставОбъем
			ИЛИ Поле = Элементы.ГрузовойСоставВесБрутто) Тогда
		СтандартнаяОбработка = Ложь;
		ТекстНСТР = НСтр("ru = 'Запрещено менять весо-объемные характеристики уникального грузового места/контейнера.
                          |Внесите изменения в грузовое место/контейнер и нажмите кнопку ""Обновить грузовые параметры"".'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГрузовойСоставПередНачаломИзменения(Элемент, Отказ)
	Если Элемент.ТекущиеДанные.УникальноеГрузовоеМесто
		И (Элемент.ТекущийЭлемент = Элементы.ГрузовойСоставКоличествоМест
			ИЛИ Элемент.ТекущийЭлемент = Элементы.ГрузовойСоставШирина
			ИЛИ Элемент.ТекущийЭлемент = Элементы.ГрузовойСоставВысота
			ИЛИ Элемент.ТекущийЭлемент = Элементы.ГрузовойСоставДлина
			ИЛИ Элемент.ТекущийЭлемент = Элементы.ГрузовойСоставОбъем
			ИЛИ Элемент.ТекущийЭлемент = Элементы.ГрузовойСоставВесБрутто) Тогда
		Отказ = Истина;
		ТекстНСТР = НСтр("ru = 'Запрещено менять весо-объемные характеристики уникального грузового места/контейнера.
                          |Внесите изменения в грузовое место/контейнер и нажмите кнопку ""Обновить грузовые параметры"".'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГрузовойСоставКоличествоМестПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ГрузовойСостав.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.ГрузовоеМесто) Тогда 
		ХарактеристикиГрузовогоМеста = ПолучитьХарактеристикиГрузовогоМеста(ТекущиеДанные.ГрузовоеМесто);
		
		КоэфПересчета = ?(ХарактеристикиГрузовогоМеста.КоличествоМест = 0, 0, ТекущиеДанные.КоличествоМест / ХарактеристикиГрузовогоМеста.КоличествоМест);
		ТекущиеДанные.ВесБрутто = ХарактеристикиГрузовогоМеста.ВесБрутто * КоэфПересчета;
		ТекущиеДанные.Объем     = ХарактеристикиГрузовогоМеста.Объем * КоэфПересчета;
		ТекущиеДанные.Стоимость = ХарактеристикиГрузовогоМеста.Стоимость * КоэфПересчета;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузовойСоставОтрезокПутиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаГруза = Элементы.ГрузовойСостав.ТекущиеДанные;
	Если СтрокаГруза = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если ДанныеВыбора = Неопределено Тогда 
		ДанныеВыбора = Новый СписокЗначений();
	КонецЕсли;
	
	ВариантыОтрезков = ПолучитьВариантыОтрезков(СтрокаГруза.ID);
	Если ВариантыОтрезков.Количество() = 0 Тогда
		ТекстНСТР = НСтр("en='No applicable route segments found. Maybe destination points are not added, or operations in them not specified.';
			|ru='Нет подходящих отрезков пути. Возможно, не добавлены пункты назначения или не заполнены операции в пунктах.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекВариант Из ВариантыОтрезков Цикл 
		ДанныеВыбора.Добавить(ТекВариант.Значение, ТекВариант.Представление);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузовойСоставОтрезокПутиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если Объект.ДетализацияЗаказов = ПредопределенноеЗначение("Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам")
		Или Объект.ДетализацияЗаказов = ПредопределенноеЗначение("Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам") Тогда
		СтандартнаяОбработка = Ложь;
		ОбработатьИзменениеОтрезкаПути(Элементы.ГрузовойСостав, ВыбранноеЗначение);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_ТоварныйСостав

&НаКлиенте
Процедура ЗаполнитьТоварныйСоставПоГрузовому(Команда)
	
	ТекСтрока = Элементы.ПунктыНазначения.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		ТекстНСТР = НСтр("en='Not filled tabular part ""destinations"", or none lines are not active!';ru='Не заполнена табличная часть ""Пункты назначения"", или ни одна из строк не активна!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		Возврат;
	КонецЕсли; 
	
	НайдСтрокиПоIDГруз = Объект.ГрузовойСостав.НайтиСтроки(Новый Структура("ID", ТекСтрока.ID));
	
	Если НайдСтрокиПоIDГруз.Количество() = 0 Тогда
		ТекстНСТР = НСтр("en='In TP ""Freight train"" no lines!';ru='В ТЧ ""Грузовой состав"" нет строк!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		Возврат;
	КонецЕсли;
	
	НайдСтокиПоIDТовар = Объект.ТоварныйСостав.НайтиСтроки(Новый Структура("ID", ТекСтрока.ID));
	
	ДополнительныеПараметры = Новый Структура("НайдСтокиПоIDТовар, ТекID", НайдСтокиПоIDТовар, ТекСтрока.ID);
	
	Если НайдСтокиПоIDТовар.Количество() > 0 Тогда
		ОписОповещ = Новый ОписаниеОповещения("ЗаполнитьТоварныйСоставЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ТекстНСТР = НСтр("en='Do you want to clear the table before filling?';ru='Очистить таблицу перед заполнением?'");
		ПоказатьВопрос(ОписОповещ, ТекстНСТР, РежимДиалогаВопрос.ДаНетОтмена,, КодВозвратаДиалога.Нет);
	Иначе
		ЗаполнитьТоварныйСоставОбщиеДействия(ДополнительныеПараметры);
	КонецЕсли;
	
	РассчитатьПоказателиСервер(ТекСтрока.ID, Ложь);
	УстановитьСнятьОтборСтрокПоПунктам();
	ОбновитьНадписьИтоги();
	ОбновитьВсегоВТЧ();
	ОбновитьВалютуВТЧГрузовТоваровСервер();
	ОбновитьАдресаСтрокойСервер();
	ОбновитьПараметрВыработкиВременный();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТоварныйСоставЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
	Если РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Для Каждого ТекУдалить Из ДополнительныеПараметры.НайдСтокиПоIDТовар Цикл
			Объект.ТоварныйСостав.Удалить(ТекУдалить);		
		КонецЦикла;
	КонецЕсли;
	
	ЗаполнитьТоварныйСоставОбщиеДействия(ДополнительныеПараметры);
		
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТоварныйСоставОбщиеДействия(ДополнительныеПараметры)
	ЗаполнитьТоварныйСоставПоГрузовомуСервер(ДополнительныеПараметры.ТекID);
	
	РассчитатьСуммуДокумента();
	ОбновитьВсегоВТЧТовары();
	ОбновитьКоличествоСтрокВШапкахТЧ();
	ОбновитьВалютуВТЧГрузовТоваровСервер();
	Модифицированность = Истина;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТоварныйСоставПоГрузовомуСервер(ТекID)
	
	НайдСтрокиПоIDГруз = Объект.ГрузовойСостав.НайтиСтроки(Новый Структура("ID",ТекID));
	
	мсвДобавленныеГрузМеста = Новый Соответствие;
	Для Каждого ТекСтрока Из НайдСтрокиПоIDГруз Цикл
		Если мсвДобавленныеГрузМеста.Получить(ТекСтрока.ГрузовоеМесто) = Неопределено Тогда
			// Новое грузовое место
			мсвДобавленныеГрузМеста.Вставить(ТекСтрока.ГрузовоеМесто, 1);
		Иначе
			// Прибавим количество
			мсвДобавленныеГрузМеста[ТекСтрока.ГрузовоеМесто] = мсвДобавленныеГрузМеста[ТекСтрока.ГрузовоеМесто] + 1;	
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекСтрока Из мсвДобавленныеГрузМеста Цикл
		ГрМесто = ТекСтрока.Ключ;
		КоличествоДублей = ТекСтрока.Значение;
		
		Для Каждого ТекСоставГрузМеста Из ГрМесто.ТоварныйСостав Цикл
			НовыйТовар = Объект.ТоварныйСостав.Добавить();
			НовыйТовар.ID = ТекID;
			НовыйТовар.ГрузовоеМесто = ГрМесто;
			НовыйТовар.Номенклатура = ТекСоставГрузМеста.Номенклатура;
			НовыйТовар.ЕдиницаИзмерения = ТекСоставГрузМеста.ЕдиницаИзмерения;
			НовыйТовар.Количество = ТекСоставГрузМеста.Количество * КоличествоДублей;
			НовыйТовар.Цена = ТекСоставГрузМеста.Цена;
			НовыйТовар.Сумма = ТекСоставГрузМеста.Сумма * КоличествоДублей;
			НовыйТовар.СтавкаНДС = ТекСоставГрузМеста.СтавкаНДС;
			НовыйТовар.СуммаНДС = ТекСоставГрузМеста.СуммаНДС * КоличествоДублей;
			НовыйТовар.ЕдиницаИзмерения = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(НовыйТовар.Номенклатура,
				"ЕдиницаХраненияОстатков");
			
			ВесОбъем = уатОбщегоНазначения.ПолучитьВесОбъемНоменклатуры(НовыйТовар.Номенклатура, НовыйТовар.ЕдиницаИзмерения, НовыйТовар.Количество);
			НовыйТовар.ВесБрутто      = ВесОбъем.Вес;
			НовыйТовар.Объем          = ВесОбъем.Объем;
			НовыйТовар.КоличествоМест = ВесОбъем.КоличествоМест;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТоварныйСостав(Команда)
	ТекСтрокаПункт = Элементы.ПунктыНазначения.ТекущиеДанные;
	Если ТекСтрокаПункт = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	мсвСтрок = Объект.ТоварныйСостав.НайтиСтроки(Новый Структура("ID", ТекСтрокаПункт.ID));
	Если мсвСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДопПараметры = Новый Структура("IDстрокиПункта", ТекСтрокаПункт.ID);
	ТекстНСТР = НСтр("en='Clear commodity composition?';ru='Очистить товарный состав?'");
	ПоказатьВопрос(Новый ОписаниеОповещения("ОчиститьТоварныйСоставОтвет", ЭтотОбъект, ДопПараметры),
		ТекстНСТР, РежимДиалогаВопрос.ОКОтмена);
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТоварныйСоставОтвет(Результат, ДопПараметры) Экспорт
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Сч = Объект.ТоварныйСостав.Количество() - 1;
		Пока Сч >= 0 Цикл
			Если Объект.ТоварныйСостав[Сч].ID = ДопПараметры.IDстрокиПункта Тогда
				Объект.ТоварныйСостав.Удалить(Сч);
			КонецЕсли;
			Сч = Сч - 1;
		КонецЦикла;
		ОбновитьКоличествоСтрокВШапкахТЧ();
		РассчитатьПоказателиСервер(ДопПараметры.IDстрокиПункта, Ложь);
		УстановитьСнятьОтборСтрокПоПунктам();
		ОбновитьНадписьИтоги();
		ОбновитьВсегоВТЧ();
		ОбновитьВалютуВТЧГрузовТоваровСервер();
		ОбновитьАдресаСтрокойСервер();
		ОбновитьПараметрВыработкиВременный();
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	ТекСтрокаПункты = Элементы.ПунктыНазначения.ТекущиеДанные;
	Если ТекСтрокаПункты = Неопределено Тогда
		ТекстНСТР = НСтр("en='To add goods, it is necessary to positioned on corresponding line of tabular section Destinations';ru='Для добавления товаров необходимо спозиционироваться на соответствующей строке табличной части Пункты назначения'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР,,,, Отказ);
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		ТекСтрока = Элементы.ТоварныйСостав.ТекущиеДанные;
		ТекСтрока.ID = Элементы.ПунктыНазначения.ТекущиеДанные.ID;
		
		Если НЕ Копирование Тогда
			ТекСтрока.КоличествоМест = 1;
			Если Объект.УчитыватьНДС Тогда
				ТекСтрока.СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
					ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнаяСтавкаНДС");
			КонецЕсли;
											
			ТекСтрока.ПредставлениеОтрезкаПути = "";
			Сч = Объект.ОтрезкиПути.Количество();
			Пока Сч > 0 Цикл
				Сч = Сч-1;
				Если Объект.ОтрезкиПути[Сч].Груз = ТекСтрока.НомерСтроки Тогда
					Объект.ОтрезкиПути.Удалить(Сч);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварныйСоставПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	РассчитатьСуммуДокумента();
	ОбновитьВсегоВТЧТовары();
	ОбновитьКоличествоСтрокВШапкахТЧ();
КонецПроцедуры

&НаКлиенте
Процедура ТоварныйСоставПослеУдаления(Элемент)
	РассчитатьСуммуДокумента();
	ОбновитьВсегоВТЧТовары();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекДанные = Элементы.ТоварныйСостав.ТекущиеДанные;
	
	Если ЗначениеЗаполнено(ТекДанные.Номенклатура) тогда
		ТекДанные.ЕдиницаИзмерения = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(
				ТекДанные.Номенклатура,
				"ЕдиницаХраненияОстатков"
			);
		
		ВесОбъем = уатОбщегоНазначения.ПолучитьВесОбъемНоменклатуры(ТекДанные.Номенклатура, ТекДанные.ЕдиницаИзмерения, ТекДанные.Количество);
		ТекДанные.ВесБрутто      = ВесОбъем.Вес;
		ТекДанные.Объем          = ВесОбъем.Объем;
		ТекДанные.КоличествоМест = ВесОбъем.КоличествоМест;
		
		ТекДанные.СтавкаНДС = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(
			ТекДанные.Номенклатура,
			"СтавкаНДС"
		);
		
		СтруктураЦенаВалюта = уатОбщегоНазначения.уатНайтиЦенуНоменклатуры(Объект.Дата, ТекДанные.Номенклатура, Объект.Контрагент, Ложь);
		Если ЗначениеЗаполнено(СтруктураЦенаВалюта.Цена) Тогда
			мЦена = СтруктураЦенаВалюта.Цена;
			ТекДанные.Цена = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(мЦена,
			СтруктураЦенаВалюта.Валюта,
			Объект.ВалютаТоваров,
			Объект.Дата, Объект.Дата);
		КонецЕсли;

		РассчитатьСуммуВСтрокеТабличнойЧасти(ТекДанные);
		РассчитатьСуммуВсегоВстрокеТЧ(ТекДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварныйСоставНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ДиалогВыбораГруза(Элемент, Элементы.ТоварныйСостав.ТекущиеДанные.Номенклатура, Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатОбщегоНазначенияКлиент.ТЧТоварыЕдиницаИзмеренияНачалоВыбора(Элементы.ТоварныйСостав.ТекущиеДанные.Номенклатура, ДанныеВыбора, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	
	ТекДанные = Элементы.ТоварныйСостав.ТекущиеДанные;
	
	ВесОбъем = уатОбщегоНазначения.ПолучитьВесОбъемНоменклатуры(ТекДанные.Номенклатура, ТекДанные.ЕдиницаИзмерения, ТекДанные.Количество);
	ТекДанные.ВесБрутто      = ВесОбъем.Вес;
	ТекДанные.Объем          = ВесОбъем.Объем;
	ТекДанные.КоличествоМест = ВесОбъем.КоличествоМест;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	ТекДанные = Элементы.ТоварныйСостав.ТекущиеДанные;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(ТекДанные);
	
	ВесОбъем = уатОбщегоНазначения.ПолучитьВесОбъемНоменклатуры(ТекДанные.Номенклатура, ТекДанные.ЕдиницаИзмерения, ТекДанные.Количество);
	ТекДанные.ВесБрутто      = ВесОбъем.Вес;
	ТекДанные.Объем          = ВесОбъем.Объем;
	ТекДанные.КоличествоМест = ВесОбъем.КоличествоМест;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварныйСоставЦенаПриИзменении(Элемент)
	РассчитатьСуммуВСтрокеТабличнойЧасти(Элементы.ТоварныйСостав.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ТоварныйСоставСуммаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.ТоварныйСостав.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура ТоварныйСоставСтавкаНДСПриИзменении(Элемент)
	РассчитатьСуммуНДС(Элементы.ТоварныйСостав.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ТоварныйСоставПриИзменении(Элемент)
	
	ТекСтрокаПункты = Элементы.ПунктыНазначения.ТекущиеДанные;
	Если ТекСтрокаПункты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ОбновитьКоличествоСтрокВШапкахТЧ();
	РассчитатьПоказателиСервер(ТекСтрокаПункты.ID, Ложь);
	ЗаполнитьСформированныеЗаказы();
	УстановитьСнятьОтборСтрокПоПунктам();
	ОбновитьНадписьИтоги();
	ОбновитьВсегоВТЧ();
	ОбновитьВалютуВТЧГрузовТоваровСервер();
	ОбновитьАдресаСтрокойСервер();
	ОбновитьПараметрВыработкиВременный();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварныйСоставОтрезокПутиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтрокаГруза = Элементы.ТоварныйСостав.ТекущиеДанные;
	Если СтрокаГруза = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	Если ДанныеВыбора = Неопределено Тогда 
		ДанныеВыбора = Новый СписокЗначений();
	КонецЕсли;
	
	ВариантыОтрезков = ПолучитьВариантыОтрезков(СтрокаГруза.ID);
	Если ВариантыОтрезков.Количество() = 0 Тогда
		ТекстНСТР = НСтр("en='No applicable route segments found. Maybe destination points are not added, or operations in them not specified.';
			|ru='Нет подходящих отрезков пути. Возможно, не добавлены пункты назначения или не заполнены операции в пунктах.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекВариант Из ВариантыОтрезков Цикл 
		ДанныеВыбора.Добавить(ТекВариант.Значение, ТекВариант.Представление);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварныйСоставОтрезокПутиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если Объект.ДетализацияЗаказов = ПредопределенноеЗначение("Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам") Тогда
		ОбработатьИзменениеОтрезкаПути(Элементы.ТоварныйСостав, ВыбранноеЗначение);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормы_Услуги

&НаКлиенте
Процедура УслугиПриИзменении(Элемент)
	ОбновитьПараметрВыработкиВременный();
	ОбновитьКоличествоСтрокВШапкахТЧ();
	ОбновитьПодвалДоходовРасходов("Услуги");
КонецПроцедуры

&НаКлиенте
Процедура УслугиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если уатОбщегоНазначения.ПроверкаВнешнегоПользователя() Тогда
		Возврат;
	КонецЕсли;
	
	ТекСтрока = Элементы.Услуги.ТекущиеДанные;
		
	Если Поле = Элементы.УслугиТариф Тогда
		ПоказатьЗначение(Неопределено, ТекСтрока.Тариф);
		
	ИначеЕсли Поле = Элементы.УслугиТарифПараметрВыработки Тогда
		ПоказатьЗначение(Неопределено, ТекСтрока.ПараметрВыработки);
		
	ИначеЕсли Поле = Элементы.УслугиРучнойВвод Тогда
		ТекСтрока.РучнойВвод = НЕ ТекСтрока.РучнойВвод;
		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УслугиПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	ТекСтрокаПункты = Элементы.ПунктыНазначения.ТекущиеДанные;
	Если ТекСтрокаПункты = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекСтрока = Элементы.Услуги.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		ТекСтрока.РучнойВвод = Истина;
		ТекСтрока.ID = Элементы.ПунктыНазначения.ТекущиеДанные.ID;
		Если Объект.УчитыватьНДС И НЕ Копирование Тогда
			ТекСтрока.СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
				ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнаяСтавкаНДС");
		КонецЕсли;
		ОбновитьПредставлениеНДСвТЧ(ТекСтрока);
	КонецЕсли;
	
	УстановитьФорматРедактированияКоличествоВыработки();
	
	ДанныеСтрокиУслуги = Новый Структура("Валюта", ТекСтрока.Валюта);
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	Если НЕ ОтменаРедактирования Тогда
		ТекСтрока = Элементы.Услуги.ТекущиеДанные;
		ТекСтрока.РучнойВвод = Истина;
	КонецЕсли;
	
	РассчитатьСуммуДокумента();
	ОбновитьВсегоВТЧУслуги();
	ОбновитьПодвалУслуги();
	ОбновитьКоличествоСтрокВШапкахТЧ();
	ОбновитьПредставлениеНДСвТЧ();
КонецПроцедуры

&НаКлиенте
Процедура УслугиПослеУдаления(Элемент)
	РассчитатьСуммуДокумента();
	ОбновитьВсегоВТЧУслуги();
	ОбновитьПодвалУслуги();
КонецПроцедуры

&НаКлиенте
Процедура УслугиНоменклатураПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	
	Если Объект.УчитыватьНДС Тогда
		СтрокаТабличнойЧасти.СтавкаНДС = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(СтрокаТабличнойЧасти.Номенклатура, "СтавкаНДС");
	Иначе
		СтрокаТабличнойЧасти.СтавкаНДС = Неопределено;
	КонецЕсли;
	СтрокаТабличнойЧасти.Тариф = Неопределено;
	СтрокаТабличнойЧасти.Цена = 0;
	СтрокаТабличнойЧасти.Количество = 0;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)
	ТекСтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	
	Если ТекСтрокаТабличнойЧасти.ПараметрВыработкиВременный Тогда 
		уатЗащищенныеФункцииСервер.КонтрольВводаВремени(ТекСтрокаТабличнойЧасти.КоличествоВыработка);
		ТекСтрокаТабличнойЧасти.Количество = уатОбщегоНазначения.уатВремяВСекунды(ТекСтрокаТабличнойЧасти.КоличествоВыработка)/3600;
	Иначе
		ТекСтрокаТабличнойЧасти.Количество = ТекСтрокаТабличнойЧасти.КоличествоВыработка;
	КонецЕсли;
	
	РассчитатьСуммуСкидки(ТекСтрокаТабличнойЧасти);
	РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрокаТабличнойЧасти, Истина);
КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)
	ТекСтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	
	РассчитатьСуммуСкидки(ТекСтрокаТабличнойЧасти);
	РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрокаТабличнойЧасти, Истина);
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаПриИзменении(Элемент)
	ТекСтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	
	Если ТекСтрокаТабличнойЧасти.Количество = 0 Тогда
		ТекСтрокаТабличнойЧасти.Количество = 1;
	КонецЕсли;
	
	Если ТекСтрокаТабличнойЧасти.Цена = 0 Тогда
		ТекСтрокаТабличнойЧасти.Цена = ТекСтрокаТабличнойЧасти.Сумма;
	КонецЕсли;
	
	Если ТекСтрокаТабличнойЧасти.ПроцентСкидки = 100 И ТекСтрокаТабличнойЧасти.Сумма <> 0 Тогда
		ТекСтрокаТабличнойЧасти.СуммаСкидки = ТекСтрокаТабличнойЧасти.Количество * ТекСтрокаТабличнойЧасти.Цена -
			ТекСтрокаТабличнойЧасти.Сумма;
		ТекСтрокаТабличнойЧасти.ПроцентСкидки = ТекСтрокаТабличнойЧасти.СуммаСкидки /
			(ТекСтрокаТабличнойЧасти.Количество * ТекСтрокаТабличнойЧасти.Цена) * 100;
	Иначе
		ТекСтрокаТабличнойЧасти.Цена = ТекСтрокаТабличнойЧасти.Сумма / ТекСтрокаТабличнойЧасти.Количество /
			(1 - ТекСтрокаТабличнойЧасти.ПроцентСкидки/100);
		
		РассчитатьСуммуСкидки(ТекСтрокаТабличнойЧасти);
	КонецЕсли;
	
	РассчитатьСуммуНДС(ТекСтрокаТабличнойЧасти);
	РассчитатьСуммуВсегоВстрокеТЧ(ТекСтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаНДСПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	РассчитатьСуммуВсегоВстрокеТЧ(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура УслугиСтавкаНДСПриИзменении(Элемент)
	РассчитатьСуммуНДС(Элементы.Услуги.ТекущиеДанные);
	РассчитатьСуммуВсегоВстрокеТЧ(Элементы.Услуги.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура УслугиВалютаПриИзменении(Элемент)
	УслугиПриИзмененииВалюты("Услуги");
КонецПроцедуры

&НаКлиенте
Процедура УслугиПроцентСкидкиПриИзменении(Элемент)
	ТекСтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	
	РассчитатьСуммуСкидки(ТекСтрокаТабличнойЧасти);
	РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрокаТабличнойЧасти, Истина);
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаСкидкиПриИзменении(Элемент)
	ТекСтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	
	ЦенаКоличество = ТекСтрокаТабличнойЧасти.Количество * ТекСтрокаТабличнойЧасти.Цена;
	Если ЦенаКоличество = 0 Тогда
		ТекСтрокаТабличнойЧасти.ПроцентСкидки = 0;
	Иначе
		ТекСтрокаТабличнойЧасти.ПроцентСкидки = ТекСтрокаТабличнойЧасти.СуммаСкидки / ЦенаКоличество * 100;
	КонецЕсли;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрокаТабличнойЧасти, Истина);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьУслугиПоШаблону(Команда)
	ТекСтрокаПункт = Элементы.ПунктыНазначения.ТекущиеДанные;
	Если ТекСтрокаПункт = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	мсвУслуги = Объект.Услуги.НайтиСтроки(Новый Структура("ID", ТекСтрокаПункт.ID));
	Если мсвУслуги.Количество() > 0 Тогда
		ДопПараметры = Новый Структура("мсвУслуги", мсвУслуги);
		ОписаниеОповещ = Новый ОписаниеОповещения("ЗаполнитьУслугиПоШаблонуВопрос", ЭтотОбъект, ДопПараметры);
		ТекстНСТР = НСтр("en='To fill with cleaning tables?';ru='Заполнить с очисткой таблицы?'");
		ПоказатьВопрос(ОписаниеОповещ, ТекстНСТР, РежимДиалогаВопрос.ДаНетОтмена);
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Справочник.уатШаблоныУслуг_уэ.ФормаВыбора",, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьУслугиПоШаблонуВопрос(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		Для Каждого ТекСтрокаУдаления Из ДопПараметры.мсвУслуги Цикл
			Объект.Услуги.Удалить(ТекСтрокаУдаления);
		КонецЦикла;
		
		Модифицированность = Истина;
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
	Иначе
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Справочник.уатШаблоныУслуг_уэ.ФормаВыбора",, ЭтотОбъект);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУслугиПоШаблонуСервер(Шаблон, IDстроки)
	ОсновнаяСтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
		ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнаяСтавкаНДС");
	
	Для Каждого ТекСтрока Из Шаблон.Услуги Цикл
		НоваяСтрока = Объект.Услуги.Добавить();
		НоваяСтрока.ID = IDстроки;
		НоваяСтрока.Номенклатура = ТекСтрока.Номенклатура;
		НоваяСтрока.Количество   = ТекСтрока.Количество;
		Если Объект.УчитыватьНДС Тогда
			Если ЗначениеЗаполнено(НоваяСтрока.Номенклатура.СтавкаНДС) Тогда
				НоваяСтрока.СтавкаНДС = НоваяСтрока.Номенклатура.СтавкаНДС;
			Иначе
				НоваяСтрока.СтавкаНДС = ОсновнаяСтавкаНДС;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОказываемыеУслуги(Команда)
	ТекСтрокаПункт = Элементы.ПунктыНазначения.ТекущиеДанные;
	Если ТекСтрокаПункт = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	мсвСтрок = Объект.Услуги.НайтиСтроки(Новый Структура("ID", ТекСтрокаПункт.ID));
	Если мсвСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДопПараметры = Новый Структура("IDстрокиПункта", ТекСтрокаПункт.ID);
	ТекстНСТР = НСтр("en='Clear planning income?';ru='Очистить предварительные доходы?'");
	ПоказатьВопрос(Новый ОписаниеОповещения("ОчиститьОказываемыеУслугиОтвет", ЭтотОбъект, ДопПараметры),
		ТекстНСТР, РежимДиалогаВопрос.ОКОтмена);
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьОказываемыеУслугиОтвет(Результат, ДопПараметры) Экспорт
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Сч = Объект.Услуги.Количество() - 1;
		Пока Сч >= 0 Цикл
			Если Объект.Услуги[Сч].ID = ДопПараметры.IDстрокиПункта Тогда
				Объект.Услуги.Удалить(Сч);
			КонецЕсли;
			Сч = Сч - 1;
		КонецЦикла;
		
		РассчитатьСуммуДокумента();
		ОбновитьВсегоВТЧУслуги();
		ОбновитьПодвалПрибыли(ДопПараметры.IDстрокиПункта);
		
		ОбновитьКоличествоСтрокВШапкахТЧ();
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьОказываемыеУслуги(Команда)
	Если Модифицированность Тогда
		ТекстНСТР = НСтр("en='To perform this operation it is necessary to record the document. Continue?';ru='Для выполнения данной операции необходимо записать документ. Продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("РассчитатьОказываемыеУслугиЗаписать", ЭтотОбъект),
			ТекстНСТР, РежимДиалогаВопрос.ОКОтмена, , КодВозвратаДиалога.ОК);
		Возврат;
	КонецЕсли;
	
	РассчитатьОказываемыеУслугиДействия();
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьОказываемыеУслугиЗаписать(Результат, ДопПараметры) Экспорт
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Попытка
		Записать(Новый Структура("НеПересчитыватьИтоги", Истина));
	Исключение
		Возврат;
	КонецПопытки;
	
	РассчитатьОказываемыеУслугиДействия();
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьОказываемыеУслугиДействия()
	флЕстьУслуги = Ложь;
	ТекСтрока = Элементы.ПунктыНазначения.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		флЕстьУслуги = (Объект.Услуги.Количество() > 0);
	Иначе
		мсвПоискаУслуг = Объект.Услуги.НайтиСтроки(Новый Структура("ID", ТекСтрока.ID));
		флЕстьУслуги = (мсвПоискаУслуг.Количество() > 0);
	КонецЕсли;
	
	АвторизованныйПользователь = ПользователиКлиентСервер.АвторизованныйПользователь();
	
	Если флЕстьУслуги > 0 И ТипЗнч(АвторизованныйПользователь) <> Тип("СправочникСсылка.ВнешниеПользователи") Тогда
		флЕстьРучнойВвод = (Объект.Услуги.НайтиСтроки(Новый Структура("РучнойВвод, ID", Истина, ТекСтрока.ID)).Количество()>0);
		
		ТекстАнгл = "Tabular section will be cleared! Continue?";
		ТекстРус = "Табличная часть будет очищена! Продолжить?";
		
		Если флЕстьРучнойВвод Тогда
			ТекстАнгл = ТекстАнгл + "
				|Yes - save manual input data, No - clear manual input data.";
			ТекстРус = ТекстРус + "
				|Да - сохранить строки с ручным вводом, Нет - удалить строки с ручным вводом.";
			РежимДиалога = РежимДиалогаВопрос.ДаНетОтмена;
		Иначе
			РежимДиалога = РежимДиалогаВопрос.ОКОтмена;
		КонецЕсли;
		
		ТекстНСТР = НСтр("en='" + ТекстАнгл + "'; ru='" + ТекстРус + "'");
		ПоказатьВопрос(Новый ОписаниеОповещения("РассчитатьОказываемыеУслугиОтвет", ЭтотОбъект), ТекстНСТР, РежимДиалога);
	Иначе
		РассчитатьОказываемыеУслугиЗавершение();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьОказываемыеУслугиОтвет(Результат, ДопПараметры) Экспорт
	Если Результат = Неопределено ИЛИ Результат = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	флУдалитьРучнойВвод = (Результат = КодВозвратаДиалога.Нет);
	
	РассчитатьОказываемыеУслугиЗавершение(, флУдалитьРучнойВвод);
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьОказываемыеУслугиЗавершение(флСообщение = Ложь, флУдалитьРучнойВвод = Ложь)
	ТекСтрокаПункт = Элементы.ПунктыНазначения.ТекущиеДанные;
	Если ТекСтрокаПункт = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекСтрока = Элементы.Услуги.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		НомерСтрокиУслуги = Неопределено;
	Иначе
		НомерСтрокиУслуги = ТекСтрока.НомерСтроки-1;
	КонецЕсли;
	
	// СтандартныеПодсистемы.ОценкаПроизводительности
	ОценкаПроизводительностиКлиент.НачатьЗамерВремени(Истина, "ПотребностьВПеревозке.РасчетДоходов");
	// Конец СтандартныеПодсистемы.ОценкаПроизводительности
	
	// очистка строк
	//Если флОчистить Тогда
	//	мсвСтрокиУдалить = Новый Массив;
	//	Для Каждого ТекСтрока Из Объект.Услуги Цикл
	//		Если ТекСтрока.ID <> ТекСтрокаПункт.ID Тогда
	//			Продолжить;
	//		КонецЕсли;
	//		Если НЕ (флДинамическийРасчет И ТекСтрока.РучнойРасчет) Тогда
	//			мсвСтрокиУдалить.Добавить(ТекСтрока);
	//		КонецЕсли;
	//	КонецЦикла;
	//	Для Каждого ТекСтрокаУдалить Из мсвСтрокиУдалить Цикл
	//		Объект.Услуги.Удалить(ТекСтрокаУдалить);
	//	КонецЦикла;
	//КонецЕсли;
	
	Если флУдалитьРучнойВвод Тогда
		мсвСтрокиУдалить = Объект.Услуги.НайтиСтроки(Новый Структура("РучнойВвод, ID", Истина, ТекСтрокаПункт.ID));
		Для Каждого ТекСтрокаУдалить Из мсвСтрокиУдалить Цикл
			Объект.Услуги.Удалить(ТекСтрокаУдалить);
		КонецЦикла;
	КонецЕсли;
	
	ДопПараметры = Новый Структура("ЗаполнятьТЧДоходы, ЗаполнятьТЧРасходы", Ложь, Ложь);
	СтруктураДокумента = уатОбщегоНазначенияКлиентСервер.СтруктураДокумента(Объект, "уатПотребностьВПеревозке_уэ", ДопПараметры);
	РассчитатьУслугиСервер(СтруктураДокумента, "Услуги", ТекСтрокаПункт.ID, НомерСтрокиУслуги);
	уатРасчетыПоТарифамКлиентСервер_уэ.ЗаполнитьДоходыРасходыИзСтруктуры(Объект, СтруктураДокумента,
		"Услуги", "уатПотребностьВПеревозке_уэ",, флСообщение, ТекСтрокаПункт.ID);
	
	Для Каждого ТекСтрока Из Объект.Услуги Цикл
		Если НЕ ЗначениеЗаполнено(ТекСтрока.ID) Тогда
			ТекСтрока.ID = ТекСтрокаПункт.ID;
		КонецЕсли;
	КонецЦикла;
	
	РассчитатьСуммуДокумента();
	ОбновитьВсегоВТЧ();
	ОбновитьПараметрВыработкиВременный();
	ОбновитьАдресаСтрокойСервер();
	ЗаполнитьСформированныеЗаказы();
	ОбновитьКоличествоСтрокВШапкахТЧ();
	
	Модифицированность = Истина;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура РассчитатьУслугиСервер(СтруктураДокумента, ИмяТЧ, IDпункта, НомерСтрокиУслуги)
	уатРасчетыПоТарифам_уэ.РасчитатьТаблицуУслугВДокументе(СтруктураДокумента, ИмяТЧ, НомерСтрокиУслуги, IDпункта);
КонецПроцедуры

&НаСервере
Процедура РассчитатьСтоимостьУслуги(СтруктураСтроки, Знач ДопПараметры)
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	ЗаписатьПромежуточныеПункты(ДокОбъект);
	ДопПараметры.Вставить("ДокументОбъект", ДокОбъект);
	уатРасчетыПоТарифам_уэ.РассчитатьСтоимостьУслуги(СтруктураСтроки, ДопПараметры);
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьОказываемыеУслуги(Команда)
	ТекСтрокаПункта = Элементы.ПунктыНазначения.ТекущиеДанные;
	Если ТекСтрокаПункта = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из Объект.Услуги Цикл
		Если ТекСтрока.ID <> ТекСтрокаПункта.ID Тогда
			Продолжить;
		КонецЕсли;
		
		ПересчитатьОказываемыеУслугиВТекущейСтроке(ТекСтрока);
	КонецЦикла;
	
	РассчитатьСуммуДокумента();
	ОбновитьПодвалДоходовРасходов("Услуги");
	ОбновитьПараметрВыработкиВременный();
	ОбновитьВсегоВТЧУслуги();
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьОказываемыеУслугиВСтроке(Команда)
	ТекСтрока = Элементы.Услуги.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПересчитатьОказываемыеУслугиВТекущейСтроке(ТекСтрока);
	
	РассчитатьСуммуДокумента();
	ОбновитьПодвалДоходовРасходов("Услуги");
	ОбновитьПараметрВыработкиВременный();
	ОбновитьВсегоВТЧУслуги();
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьОказываемыеУслугиВТекущейСтроке(ТекСтрока, флПлан = Ложь)
	мсвСтрокаПункта = Объект.ПунктыНазначения.НайтиСтроки(Новый Структура("ID", ТекСтрока.ID));
	Если мсвСтрокаПункта.Количество() > 0 Тогда
		мРасстояние = мсвСтрокаПункта[0].Расстояние;
		мВремя = мсвСтрокаПункта[0].Время;
		мСтоянка = мсвСтрокаПункта[0].Стоянка;
		мВесГруза = мсвСтрокаПункта[0].ВесБрутто;
		мОбъемГруза = мсвСтрокаПункта[0].Объем;
		мКоличествоМест = мсвСтрокаПункта[0].КоличествоМест;
		мСтоимостьГруза = мсвСтрокаПункта[0].СтоимостьГруза;
	Иначе
		мРасстояние = 0;
		мВремя = '00010101';
		мСтоянка = '00010101';
		мВесГруза = 0;
		мОбъемГруза = 0;
		мКоличествоМест = 0;
		мСтоимостьГруза = 0;
	КонецЕсли;
		
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("Расстояние", мРасстояние);
	ДопПараметры.Вставить("Время", мВремя);
	ДопПараметры.Вставить("Стоянка", мСтоянка);
	ДопПараметры.Вставить("ВесГруза", мВесГруза);
	ДопПараметры.Вставить("ОбъемГруза", мОбъемГруза);
	ДопПараметры.Вставить("КоличествоМест", мКоличествоМест);
	ДопПараметры.Вставить("СтоимостьГруза", мСтоимостьГруза);
	ДопПараметры.Вставить("ВалютаТоваров", Объект.ВалютаТоваров);
	ДопПараметры.Вставить("Грузоподъемность", 0);
	ДопПараметры.Вставить("КлассГруза", 0);
	ДопПараметры.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	ДопПараметры.Вставить("КурсДокумента", Объект.КурсВзаиморасчетов);
	ДопПараметры.Вставить("КратностьДокумента", Объект.КратностьВзаиморасчетов);
	ДопПараметры.Вставить("Дата", Объект.Дата);
	ДопПараметры.Вставить("ИмяТЧ", "Услуги");
	ДопПараметры.Вставить("НомерСтрокиДокумента", ТекСтрока.НомерСтроки-1);
	ДопПараметры.Вставить("Контрагент", Объект.Контрагент);
	ДопПараметры.Вставить("ПересчетКоличества", Истина);
	ДопПараметры.Вставить("IDСтрокиПотребности", ТекСтрока.ID);
	
	СтруктураСтроки = Новый Структура("Тариф, Цена, Количество, Сумма, СтавкаНДС, СуммаНДС, ПроцентСкидки, СуммаСкидки",
		ТекСтрока.Тариф, ТекСтрока.Цена, ТекСтрока.Количество, ТекСтрока.Сумма, ТекСтрока.СтавкаНДС,
		ТекСтрока.СуммаНДС, ТекСтрока.ПроцентСкидки, ТекСтрока.СуммаСкидки);
	
	РассчитатьСтоимостьУслуги(СтруктураСтроки, ДопПараметры);
	ЗаполнитьЗначенияСвойств(ТекСтрока, СтруктураСтроки);
	РассчитатьСуммуНДС(ТекСтрока);
	РассчитатьСуммуВсегоВстрокеТЧ(ТекСтрока);
	
	ТекСтрока.РучнойВвод = Ложь;
	Модифицированность = Истина;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормы_Затраты

&НаКлиенте
Процедура РасходыПриИзменении(Элемент)
	
	ОбновитьПредставлениеНДСвТЧ();
	ОбновитьКоличествоСтрокВШапкахТЧ();
	ОбновитьПодвалДоходовРасходов("Расходы");
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	ТекСтрокаПункты = Элементы.ПунктыНазначения.ТекущиеДанные;
	Если ТекСтрокаПункты = Неопределено Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекСтрока = Элементы.Расходы.ТекущиеДанные;
	
	Если НоваяСтрока Тогда
		ТекСтрока.ID = Элементы.ПунктыНазначения.ТекущиеДанные.ID;
		Если НЕ Копирование Тогда
			Если Объект.УчитыватьНДС Тогда
				ТекСтрока.СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
					ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнаяСтавкаНДС");
			КонецЕсли;
				
			ТекСтрока.УчитыватьНДС     = Объект.УчитыватьНДС;
			ТекСтрока.СуммаВключаетНДС = Объект.СуммаВключаетНДС;
			
			ТекСтрока.Валюта    = Объект.ВалютаДокумента;
		КонецЕсли;
		ОбновитьПредставлениеНДСвТЧ(ТекСтрока);
	КонецЕсли;
	
	ДанныеСтрокиУслуги = Новый Структура("Валюта", ТекСтрока.Валюта);
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ОбновитьВсегоВТЧЗатраты();
	ОбновитьКоличествоСтрокВШапкахТЧ();
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыПослеУдаления(Элемент)
	
	ОбновитьВсегоВТЧЗатраты();
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыНоменклатураПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Расходы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.УчитыватьНДС Тогда
		СтрокаТабличнойЧасти.СтавкаНДС = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(СтрокаТабличнойЧасти.Номенклатура, "СтавкаНДС");
	Иначе
		СтрокаТабличнойЧасти.СтавкаНДС = Неопределено;
	КонецЕсли;
	
	//РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
	РассчитатьСуммуВсегоВстрокеТЧ(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыКоличествоПриИзменении(Элемент)
	
	ТекСтрокаТабличнойЧасти = Элементы.Расходы.ТекущиеДанные;
	Если ТекСтрокаТабличнойЧасти = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрокаТабличнойЧасти);
	РассчитатьСуммуВсегоВстрокеТЧ(ТекСтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыЦенаПриИзменении(Элемент)
	
	ТекСтрокаТабличнойЧасти = Элементы.Расходы.ТекущиеДанные;
	Если ТекСтрокаТабличнойЧасти = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрокаТабличнойЧасти);
	РассчитатьСуммуВсегоВстрокеТЧ(ТекСтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыСуммаПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Расходы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	РассчитатьСуммуВсегоВстрокеТЧ(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыСуммаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Расходы.ТекущиеДанные;
	РассчитатьСуммуВсегоВстрокеТЧ(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыСтавкаНДСПриИзменении(Элемент)
	
	СтрокаТабличнойЧасти = Элементы.Расходы.ТекущиеДанные;
	Если СтрокаТабличнойЧасти = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	РассчитатьСуммуВсегоВстрокеТЧ(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура РасходыВалютаПриИзменении(Элемент)
	УслугиПриИзмененииВалюты("Расходы");
КонецПроцедуры

&НаКлиенте
Процедура РасходыУчитыватьНДСПредставлениеПриИзменении(Элемент)
	ТекСтрока = Элементы.Расходы.ТекущиеДанные;
	
	ПредСуммаВключаетНДС = ТекСтрока.СуммаВключаетНДС;
	ПредУчитыватьНДС     = ТекСтрока.УчитыватьНДС;
	
	Если ТекСтрока.УчитыватьНДСПредставление = "Строка без НДС" Тогда
		ТекСтрока.УчитыватьНДС = Ложь;
		ТекСтрока.СуммаВключаетНДС = Ложь;
		ТекСтрока.СтавкаНДС = Неопределено;
		ТекСтрока.СуммаНДС = 0;
		ТекСтрока.Всего = 0;
	ИначеЕсли ТекСтрока.УчитыватьНДСПредставление = "НДС в сумме" Тогда
		ТекСтрока.УчитыватьНДС = Истина;
		ТекСтрока.СуммаВключаетНДС = Истина;
	Иначе
		ТекСтрока.УчитыватьНДС = Истина;
		ТекСтрока.СуммаВключаетНДС = Ложь;
	КонецЕсли;
	
	Если ТекСтрока.УчитыватьНДС И НЕ ЗначениеЗаполнено(ТекСтрока.СтавкаНДС) Тогда
		ТекСтрока.СтавкаНДС = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрока.Номенклатура, "СтавкаНДС");
	КонецЕсли;
	
	Если ПредСуммаВключаетНДС <> ТекСтрока.СуммаВключаетНДС ИЛИ ПредУчитыватьНДС <> ТекСтрока.УчитыватьНДС Тогда
		СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеСтавкиНДС(ТекСтрока.СтавкаНДС);
		Если ПредУчитыватьНДС Тогда
			Если ТекСтрока.СуммаВключаетНДС Тогда
				ТекСтрока.Цена = (ТекСтрока.Цена * (100 + СтавкаНДС)) / 100;
			Иначе
				ТекСтрока.Цена = (ТекСтрока.Цена * 100) / (100 + СтавкаНДС);
			КонецЕсли;
		КонецЕсли;
		РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрока);
	КонецЕсли;
		
	ОбновитьПредставлениеНДСвТЧ(ТекСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗатратыПоШаблону(Команда)
	ТекСтрокаПункт = Элементы.ПунктыНазначения.ТекущиеДанные;
	Если ТекСтрокаПункт = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	мсвРасходы = Объект.Расходы.НайтиСтроки(Новый Структура("ID", ТекСтрокаПункт.ID));
	Если мсвРасходы.Количество() > 0 Тогда
		ДопПараметры = Новый Структура("мсвРасходы", мсвРасходы);
		ОписаниеОповещ = Новый ОписаниеОповещения("ЗаполнитьЗатратыПоШаблонуВопрос", ЭтотОбъект, ДопПараметры);
		ТекстНСТР = НСтр("en='To fill with cleaning tables?';ru='Заполнить с очисткой таблицы?'");
		ПоказатьВопрос(ОписаниеОповещ, ТекстНСТР, РежимДиалогаВопрос.ДаНетОтмена);
		Возврат;
	КонецЕсли;
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("Затраты_ОбработатьРезультатЗакрытияФормыШаблона", ЭтотОбъект);
	ОткрытьФорму("Справочник.уатШаблоныУслуг_уэ.ФормаВыбора",, Элементы.Расходы,,,, ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьЗатратыПоШаблонуВопрос(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Для Каждого ТекСтрокаУдаления Из ДопПараметры.мсвРасходы Цикл
			Объект.Расходы.Удалить(ТекСтрокаУдаления);
		КонецЦикла;
		Модифицированность = Истина;
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
	Иначе
		Возврат;
	КонецЕсли;
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("Затраты_ОбработатьРезультатЗакрытияФормыШаблона", ЭтотОбъект);
	ОткрытьФорму("Справочник.уатШаблоныУслуг_уэ.ФормаВыбора",, Элементы.Расходы,,,, ОповещениеОЗакрытии);
	
КонецПроцедуры

&НаКлиенте
Процедура Затраты_ОбработатьРезультатЗакрытияФормыШаблона(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("СправочникСсылка.уатШаблоныУслуг_уэ") Тогда
		ТекСтрока = Элементы.ПунктыНазначения.ТекущиеДанные;
		Если ТекСтрока <> Неопределено Тогда
			ЗаполнитьЗатратыПоШаблонуСервер(РезультатЗакрытия, ТекСтрока.ID);
			ОбновитьПредставлениеНДСвТЧ();
			Модифицированность = Истина;
		КонецЕсли;
		ОбновитьКоличествоСтрокВШапкахТЧ();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗатратыПоШаблонуСервер(Шаблон, IDстроки)
	
	ОсновнаяСтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
		ПользователиКлиентСервер.АвторизованныйПользователь(),
		"ОсновнаяСтавкаНДС");
	
	Для Каждого ТекСтрока Из Шаблон.Услуги Цикл
		НоваяСтрока = Объект.Расходы.Добавить();
		НоваяСтрока.ID = IDстроки;
		НоваяСтрока.Номенклатура = ТекСтрока.Номенклатура;
		НоваяСтрока.Количество   = ТекСтрока.Количество;
		НоваяСтрока.УчитыватьНДС     = Объект.УчитыватьНДС;
		НоваяСтрока.СуммаВключаетНДС = Объект.СуммаВключаетНДС;
		Если Объект.УчитыватьНДС Тогда
			НоваяСтрока.СтавкаНДС = ТекСтрока.Номенклатура.СтавкаНДС;
			Если Не ЗначениеЗаполнено(НоваяСтрока.СтавкаНДС) Тогда
				НоваяСтрока.СтавкаНДС = ОсновнаяСтавкаНДС;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТЧЗатрат(Команда)
	
	ТекСтрокаПункт = Элементы.ПунктыНазначения.ТекущиеДанные;
	Если ТекСтрокаПункт = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	мсвСтрок = Объект.Расходы.НайтиСтроки(Новый Структура("ID", ТекСтрокаПункт.ID));
	Если мсвСтрок.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДопПараметры = Новый Структура("IDстрокиПункта", ТекСтрокаПункт.ID);
	ТекстНСТР = НСтр("en='Clear planning expenses?';ru='Очистить предварительные расходы?'");
	ПоказатьВопрос(Новый ОписаниеОповещения("ОчиститьТЧЗатратОтвет", ЭтотОбъект, ДопПараметры),
		ТекстНСТР, РежимДиалогаВопрос.ОКОтмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТЧЗатратОтвет(Результат, ДопПараметры) Экспорт
	
	Если Результат <> КодВозвратаДиалога.ОК Тогда
		Возврат;
	КонецЕсли;
	
	Сч = Объект.Расходы.Количество() - 1;
	Пока Сч >= 0 Цикл
		Если Объект.Расходы[Сч].ID = ДопПараметры.IDстрокиПункта Тогда
			Объект.Расходы.Удалить(Сч);
		КонецЕсли;
		Сч = Сч - 1;
	КонецЦикла;
	
	ОбновитьВсегоВТЧЗатраты();
	ОбновитьПодвалПрибыли(ДопПараметры.IDстрокиПункта);
	ОбновитьКоличествоСтрокВШапкахТЧ();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.Свойства
&НаКлиенте
Процедура Подключаемый_СвойстваВыполнитьКоманду(ЭлементИлиКоманда, НавигационнаяСсылка = Неопределено, СтандартнаяОбработка = Неопределено)
	УправлениеСвойствамиКлиент.ВыполнитьКоманду(ЭтотОбъект, ЭлементИлиКоманда, СтандартнаяОбработка);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// уатУправлениеАвтотранспортом.МодификацияКонфигурации
&НаКлиенте
Процедура Подключаемый_уатВыполнитьКоманду(Команда)
	
	уатМодификацияКонфигурацииКлиентПереопределяемый.ВыполнитьПодключаемуюКоманду(ЭтотОбъект, Команда);
	
КонецПроцедуры
// Конец уатУправлениеАвтотранспортом.МодификацияКонфигурации

// СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла
&НаКлиенте
Процедура ЗагрузитьГрузыИзФайла(Команда)
	
	ТекСтрокаПункты = Элементы.ПунктыНазначения.ТекущиеДанные;
	Если ТекСтрокаПункты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МодульЗагрузкаДанныхИзФайлаКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЗагрузкаДанныхИзФайлаКлиент");
	
	ПараметрыЗагрузки = МодульЗагрузкаДанныхИзФайлаКлиент.ПараметрыЗагрузкиДанных();
	ПараметрыЗагрузки.ПолноеИмяТабличнойЧасти = "уатПотребностьВПеревозке_уэ.ГрузовойСостав";
	ПараметрыЗагрузки.Заголовок = НСтр("en='Download cargo list from a file';ru='Загрузка списка грузов из файла'");
	ПараметрыЗагрузки.Вставить("ИмяМакетаСШаблоном", "ЗагрузкаИзФайлаГрузовойСостав");
	
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьГрузыИзФайлаЗавершение", ЭтотОбъект, Новый Структура("ID", ТекСтрокаПункты.ID));
	
	МодульЗагрузкаДанныхИзФайлаКлиент.ПоказатьФормуЗагрузки(ПараметрыЗагрузки, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьТоварыИзФайла(Команда)
	
	ТекСтрокаПункты = Элементы.ПунктыНазначения.ТекущиеДанные;
	Если ТекСтрокаПункты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МодульЗагрузкаДанныхИзФайлаКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЗагрузкаДанныхИзФайлаКлиент");
	
	ПараметрыЗагрузки = МодульЗагрузкаДанныхИзФайлаКлиент.ПараметрыЗагрузкиДанных();
	ПараметрыЗагрузки.ПолноеИмяТабличнойЧасти = "уатПотребностьВПеревозке_уэ.ТоварныйСостав";
	ПараметрыЗагрузки.Заголовок = НСтр("en='Download goods list from a file';ru='Загрузка списка товаров из файла'");
	ПараметрыЗагрузки.Вставить("ИмяМакетаСШаблоном", "ЗагрузкаИзФайлаТоварныйСостав");
	
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьТоварыИзФайлаЗавершение", ЭтотОбъект, Новый Структура("ID", ТекСтрокаПункты.ID));
	
	МодульЗагрузкаДанныхИзФайлаКлиент.ПоказатьФормуЗагрузки(ПараметрыЗагрузки, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьУслугиИзФайла(Команда)
	
	ТекСтрокаПункты = Элементы.ПунктыНазначения.ТекущиеДанные;
	Если ТекСтрокаПункты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МодульЗагрузкаДанныхИзФайлаКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЗагрузкаДанныхИзФайлаКлиент");
	
	ПараметрыЗагрузки = МодульЗагрузкаДанныхИзФайлаКлиент.ПараметрыЗагрузкиДанных();
	ПараметрыЗагрузки.ПолноеИмяТабличнойЧасти = "уатПотребностьВПеревозке_уэ.Услуги";
	ПараметрыЗагрузки.Заголовок = НСтр("en='Download list of services on the income from a file';ru='Загрузка списка услуг по доходам из файла'");
	ПараметрыЗагрузки.Вставить("ИмяМакетаСШаблоном", "ЗагрузкаИзФайлаУслуги");
	
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьУслугиИзФайлаЗавершение", ЭтотОбъект, Новый Структура("ID", ТекСтрокаПункты.ID));
	
	МодульЗагрузкаДанныхИзФайлаКлиент.ПоказатьФормуЗагрузки(ПараметрыЗагрузки, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьЗатратыИзФайла(Команда)
	
	ТекСтрокаПункты = Элементы.ПунктыНазначения.ТекущиеДанные;
	Если ТекСтрокаПункты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	МодульЗагрузкаДанныхИзФайлаКлиент = ОбщегоНазначенияКлиент.ОбщийМодуль("ЗагрузкаДанныхИзФайлаКлиент");
	
	ПараметрыЗагрузки = МодульЗагрузкаДанныхИзФайлаКлиент.ПараметрыЗагрузкиДанных();
	ПараметрыЗагрузки.ПолноеИмяТабличнойЧасти = "уатПотребностьВПеревозке_уэ.Расходы";
	ПараметрыЗагрузки.Заголовок = НСтр("en='Download list of services expenses from file';ru='Загрузка списка услуг по расходов из файла'");
	ПараметрыЗагрузки.Вставить("ИмяМакетаСШаблоном", "ЗагрузкаИзФайлаРасходы");
	
	Оповещение = Новый ОписаниеОповещения("ЗагрузитьЗатратыИзФайлаЗавершение", ЭтотОбъект, Новый Структура("ID", ТекСтрокаПункты.ID));
	
	МодульЗагрузкаДанныхИзФайлаКлиент.ПоказатьФормуЗагрузки(ПараметрыЗагрузки, Оповещение);
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла

&НаКлиенте
Процедура РассчитатьПоказатели(Команда)
	
	ТекСтрокаПункты = Элементы.ПунктыНазначения.ТекущиеДанные;
	Если ТекСтрокаПункты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	РассчитатьПоказателиСервер(ТекСтрокаПункты.ID, Истина);
	РассчитатьОказываемыеУслугиЗавершение(Истина);
	
	УстановитьСнятьОтборСтрокПоПунктам();
	ОбновитьНадписьИтоги();
	ОбновитьВсегоВТЧ();
	ОбновитьВалютуВТЧГрузовТоваровСервер();
	ОбновитьАдресаСтрокойСервер();
	ОбновитьПараметрВыработкиВременный();
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьПоказателиСервер(IDстроки, ПересчетВремениРасстояния)
	ДокОбъект = РеквизитФормыВЗначение("Объект");
	ЗаписатьПромежуточныеПункты(ДокОбъект);
	ДокОбъект.РассчитатьИтоговыеПоказатели(IDстроки, ПересчетВремениРасстояния, кэшНулевыеРасстоянияМеждуПунктами);
	ЗначениеВРеквизитФормы(ДокОбъект, "Объект");
	ПрочитатьПромежуточныеПункты(ДокОбъект);
КонецПроцедуры

&НаКлиенте
Процедура НадписьВсегоПоДокументуНажатие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = ПолучитьСтруктуруИтоговойНадписи();
	ПараметрыФормы.Вставить("ОтображатьСтоимость", Истина);
	ПараметрыФормы.Вставить("ТолькоПросмотр",      Не ОтборСтрокПоПунктам);
	ПараметрыФормы.Вставить("ВидДокумента",        "уатПотребностьВПеревозке_уэ");
	ПараметрыФормы.Вставить("ВалютаТоваров",       Объект.ВалютаТоваров);
	ПараметрыФормы.Вставить("ОтображатьВалюту",    Истина);
	
	СтрокаПунктов = Элементы.ПунктыНазначения.ТекущиеДанные;
	Если Не СтрокаПунктов = Неопределено Тогда 
		СтрокиПП = ПромежуточныеПункты.НайтиСтроки(Новый Структура("ID", СтрокаПунктов.ID));
		ПараметрыФормы.Вставить("FTL", ?(СтрокаПунктов.FTL И СтрокиПП.Количество() > 2, Истина, Ложь));
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("НадписьВсегоПоДокументуНажатиеЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("ОбщаяФорма.уатРедактированиеМаршрутныхПоказателей", ПараметрыФормы, ЭтотОбъект,,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура НадписьВсегоПоДокументуНажатиеЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДопПараметры = Новый Структура("РезультатЗакрытия", РезультатЗакрытия);
	
	РезультатЗакрытия.Свойство("ВалютаТоваров", Объект.ВалютаТоваров);
	
	// изменилась валюта товаров
	Если Объект.ВалютаТоваров <> ВалютаТоваровПред Тогда
		ОповещениеОтвет = Новый ОписаниеОповещения("НадписьВсегоПоДокументуНажатиеЗавершениеОтвет", ЭтотОбъект, ДопПараметры);
		ТекстНСТР = НСтр("en='Currency of accounting for goods has changed. Recalculate according to new currency?';ru='Изменилась валюта учета товаров. Пересчитать в соответствии с новой валютой?'");
		ПоказатьВопрос(ОповещениеОтвет, ТекстНСТР, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	НадписьВсегоПоДокументуНажатиеЗавершениеФрагмент(ДопПараметры);
КонецПроцедуры

&НаКлиенте
Процедура НадписьВсегоПоДокументуНажатиеЗавершениеОтвет(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да тогда
		Для Каждого ТекСтрока Из Объект.ТоварныйСостав Цикл
			Если НЕ ЗначениеЗаполнено(ТекСтрока.ГрузовоеМесто) Тогда
				ТекСтрока.Цена = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.Цена,
					ВалютаТоваровПред, Объект.ВалютаТоваров, Объект.Дата, Объект.Дата);
				
				// Рассчитать реквизиты табличной части.
				РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрока);
			КонецЕсли;
		КонецЦикла;
		Для Каждого ТекСтрока Из Объект.ГрузовойСостав Цикл
			Если НЕ ЗначениеЗаполнено(ТекСтрока.ГрузовоеМесто) Тогда
				ТекСтрока.Стоимость = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрока.Стоимость,
					ВалютаТоваровПред, Объект.ВалютаТоваров, Объект.Дата, Объект.Дата);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ВалютаТоваровПред = Объект.ВалютаТоваров;
	
	НадписьВсегоПоДокументуНажатиеЗавершениеФрагмент(ДопПараметры);
КонецПроцедуры

&НаКлиенте
Процедура НадписьВсегоПоДокументуНажатиеЗавершениеФрагмент(ДопПараметры)
	
	Если ОтборСтрокПоПунктам Тогда
		ТекСтрока = Элементы.ПунктыНазначения.ТекущиеДанные;
		Если ТекСтрока <> Неопределено Тогда
			ЗаполнитьЗначенияСвойств(ТекСтрока, ДопПараметры.РезультатЗакрытия);
			ТекСтрока.Время = ДопПараметры.РезультатЗакрытия.ВремяВПути;
			ТекСтрока.Стоянка = ДопПараметры.РезультатЗакрытия.ВремяСтоянок;
			
			Если ДопПараметры.РезультатЗакрытия.Свойство("ДопВыработка") Тогда
				мсвСтрокУдалить = Объект.Выработка.НайтиСтроки(Новый Структура("ID", ТекСтрока.ID));
				Для Каждого ТекСтрокаУдалить Из мсвСтрокУдалить цикл
					Объект.Выработка.Удалить(ТекСтрокаУдалить);
				КонецЦикла;
				Для Каждого ТекДопВыработка Из ДопПараметры.РезультатЗакрытия.ДопВыработка Цикл
					НоваяСтрока = Объект.Выработка.Добавить();
					НоваяСтрока.ID = ТекСтрока.ID;
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекДопВыработка);
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	РассчитатьПоказателиСервер(Элементы.ПунктыНазначения.ТекущиеДанные.ID, Ложь);
	РассчитатьОказываемыеУслугиЗавершение(Истина);
	ОбновитьАдресаСтрокойСервер();
	ЗаполнитьСформированныеЗаказы();
	ОбновитьПараметрВыработкиВременный();
	ОбновитьВалютуВТЧГрузовТоваровСервер();
	УстановитьУсловноеОформлениеПолейСтатусов();
	
	ОбновитьВсегоВТЧ();
	ОбновитьВалютуВТЧГрузовТоваровСервер();
	ОбновитьНадписьИтоги();
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура РасшифровкаТары(Команда)
	
	ТекСтрока = Элементы.ПунктыНазначения.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		ТекстНСТР  = НСтр("en='In TP ""Destinations"", none of lines are not active!';ru='В ТЧ ""Пункты назначения"", ни одна из строк не активна!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР ,, "Объект.ПунктыНазначения");
		Возврат;
	КонецЕсли;
	
	ДанныеПоТаре = ПолучитьДанныеПоТаре(ТекСтрока.ID);
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Тара", ДанныеПоТаре);
	
	ОткрытьФорму("ОбщаяФорма.уатРасшифровкаТары", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДоговорКонтрагента(Команда)
	Если ЗначениеЗаполнено(Объект.ДоговорКонтрагента) Тогда
		Оповещ = Новый ОписаниеОповещения("СоздатьДоговорКонтрагентаВопрос", ЭтотОбъект);
		ПоказатьВопрос(Оповещ, "Будет создан и подставлен в документ новый договор. Продолжить?", РежимДиалогаВопрос.ОКОтмена);
	Иначе
		СоздатьДоговорКонтрагентаЗавершение();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДоговорКонтрагентаВопрос(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.ОК Тогда
		СоздатьДоговорКонтрагентаЗавершение();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДоговорКонтрагентаЗавершение()
	ПараметрыЗаполнения = Новый Структура;
	ПараметрыЗаполнения.Вставить("Владелец", Объект.Контрагент);
	ПараметрыЗаполнения.Вставить("Контрагент", Объект.Контрагент);
	ПараметрыЗаполнения.Вставить("Организация", Объект.Организация);
	Объект.ДоговорКонтрагента = уатНастройкиШаблонов.СоздатьДоговорКонтрагентаПоШаблону(ПараметрыЗаполнения, "1", Истина);
	ДоговорКонтрагентаПриИзменении(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура НастроитьШаблонДоговора(Команда)
	ПараметрыФормы = Новый Структура("ОбъектНастройки, ОбъектДоговора", "Справочник_ДоговорыКонтрагентов", "1");
	ОткрытьФорму("ОбщаяФорма.уатНастройкаШаблона", ПараметрыФормы, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОтрезокПутиВГрузах(Команда)
	
	СтрокаЗаказа = Элементы.ПунктыНазначения.ТекущиеДанные;
	Если СтрокаЗаказа = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	флТребуетсяОчистка = Ложь;
	Для Каждого ТекСтрока Из Объект.ОтрезкиПути Цикл 
		Если Не ТекСтрока.ID = СтрокаЗаказа.ID Тогда 
			Продолжить;
		КонецЕсли;
		
		флТребуетсяОчистка = Истина;
		Прервать;

	КонецЦикла;
	
	Если флТребуетсяОчистка Тогда 
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ЗаполнитьОтрезокПутиВГрузахВыборВарианта", ЭтотОбъект, СтрокаЗаказа.ID),
			НСтр("ru = 'Значение во всех строках будет заменено на выбранное. Продолжить?'"),
			РежимДиалогаВопрос.ДаНет,
		);
		
	Иначе 
		ЗаполнитьОтрезокПутиВГрузахВыборВарианта(КодВозвратаДиалога.Да, СтрокаЗаказа.ID);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОтрезокПутиВТоварах(Команда)
	
	СтрокаЗаказа = Элементы.ПунктыНазначения.ТекущиеДанные;
	Если СтрокаЗаказа = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	флТребуетсяОчистка = Ложь;
	Для Каждого ТекСтрока Из Объект.ТоварныйСостав Цикл 
		Если Не ТекСтрока.ID = СтрокаЗаказа.ID Тогда 
			Продолжить;
		КонецЕсли;
		
		флТребуетсяОчистка = Истина;
		Прервать;


	КонецЦикла;
	
	Если флТребуетсяОчистка Тогда 
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ЗаполнитьОтрезокПутиВТоварахВыборВарианта", ЭтотОбъект, СтрокаЗаказа.ID),
			НСтр("ru = 'Значение во всех строках будет заменено на выбранное. Продолжить?'"),
			РежимДиалогаВопрос.ДаНет,
		);
		
	Иначе 
		ЗаполнитьОтрезокПутиВТоварахВыборВарианта(КодВозвратаДиалога.Да, СтрокаЗаказа.ID);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ППОтправительПолучательПоКонтрагенту(Команда)
	
	ТекущиеДанные = Элементы.ПромежуточныеПункты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Контрагент", Объект.Контрагент);
	ПараметрыФормы.Вставить("НачальноеЗначениеВыбора", ТекущиеДанные.ОтправительПолучатель);
	
	Если ТекущиеДанные.ТипТочкиМаршрута = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Погрузка")
			Или ТекущиеДанные.ТипТочкиМаршрута = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.ДополнительнаяПогрузка") Тогда 
		ПараметрыФормы.Вставить("Режим", "Грузоотправитель");
	Иначе 
		ПараметрыФормы.Вставить("Режим", "Грузополучатель");
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("Подключаемый_ППОтправительПолучательПоКонтрагентуЗавершение", ЭтотОбъект, ТекущиеДанные);
	
	ОткрытьФорму("Документ.уатЗаказГрузоотправителя.Форма.ФормаВыбораОтправителяПолучателя", ПараметрыФормы, ЭтотОбъект,,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПППунктИзКИ(Команда)
	
	ТекущиеДанные = Элементы.ПромежуточныеПункты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Контрагент, Режим", ТекущиеДанные.ОтправительПолучатель, "КонтактноеЛицоАдрес");
	Оповещение = Новый ОписаниеОповещения("Подключаемый_ПППунктИзКИЗавершение", ЭтотОбъект, ТекущиеДанные);
	
	ОткрытьФорму("Документ.уатЗаказГрузоотправителя.Форма.ФормаВыбораОтправителяПолучателя", ПараметрыФормы, ЭтотОбъект,,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ППСоздатьПункт(Команда)
	
	ТекущиеДанные = Элементы.ПромежуточныеПункты.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ТипЗнч(ТекущиеДанные.Пункт) = Тип("Строка") Тогда 
		Возврат;
	КонецЕсли;
	
	Если ПустаяСтрока(ТекущиеДанные.Пункт) Тогда
		ТекстНСТР = НСтр("ru='Не заполнен пункт назначения.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР); 
		Возврат;
	КонецЕсли;
	
	ВидКИ = ПредопределенноеЗначение("Справочник.ВидыКонтактнойИнформации.ЮрАдресКонтрагента");
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ППСоздатьПунктЗавершение", ЭтотОбъект, ТекущиеДанные);
	
	ДанныеАдресаJSON = ПолучитьДанныеАдресаJSON(ТекущиеДанные.Пункт, ВидКИ);
	
	ПараметрыОткрытия = Новый Структура;
	ПараметрыОткрытия.Вставить("ВидКонтактнойИнформации", ВидКИ);
	ПараметрыОткрытия.Вставить("Значение",                ДанныеАдресаJSON);
	ПараметрыОткрытия.Вставить("Представление",           ТекущиеДанные.Пункт);
	ПараметрыОткрытия.Вставить("ОткрытаПоСценарию",       Истина);
	
	ФормаАдреса = ОткрытьФорму("Обработка.ВводКонтактнойИнформации.Форма", ПараметрыОткрытия, Неопределено,,,, ОповещениеОЗакрытии);
	ФормаАдреса.Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПодвалПрибыль(Команда)
	ТекСтрока = Элементы.ПунктыНазначения.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		ОбновитьПодвалПрибыли();
	Иначе
		ОбновитьПодвалПрибыли(ТекСтрока.ID);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПолучателейУведомлений(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Документ", Объект);
	ПараметрыФормы.Вставить("ТипДокумента", ПредопределенноеЗначение("Перечисление.уатТипыОбъектовДляУведомлений_уэ.ПотребностьВПеревозке"));
	ОписаниеОповещенияОЗакрытии = Новый ОписаниеОповещения("ПолучателиУведомленийЗакрытиеФормы", ЭтаФорма);
	
	ОткрытьФорму("Документ.уатПотребностьВПеревозке_уэ.Форма.ФормаПолучателейУведомлений",
		ПараметрыФормы,
		ЭтаФорма,,,,
		ОписаниеОповещенияОЗакрытии,
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
КонецПроцедуры

&НаКлиенте
Процедура РежимТехническогоСпециалиста(Команда)
	Элементы.ФормаРежимТехническогоСпециалиста.Пометка = Не Элементы.ФормаРежимТехническогоСпециалиста.Пометка;
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ВыборДатПоРасписанию(Команда)
	
	ТекСтрока = Элементы.ПунктыНазначения.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекСтрока.АдресОтправления) Или Не ЗначениеЗаполнено(ТекСтрока.АдресНазначения) Тогда
		ТекстНСтр = НСтр("ru='Перед выполнением операции необходимо заполнить адреса отправления и прибытия'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСтр);
		Возврат;
	КонецЕсли;
	
	ПараметрыВыбораДат = Новый Структура("АдресОтправления, АдресНазначения, Грузоотправитель, Грузополучатель, Маршрут");
	ЗаполнитьЗначенияСвойств(ПараметрыВыбораДат, ТекСтрока);
	ОповещениеОЗакрытииФормы = Новый ОписаниеОповещения("ВыборДатПоРасписаниюПослеВыбора", ЭтаФорма);
	ОткрытьФорму("Документ.уатЗаказГрузоотправителя.Форма.ФормаВыбораИзРасписания", ПараметрыВыбораДат, ЭтаФорма,,,,
		ОповещениеОЗакрытииФормы, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры
	
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// СтандартныеПодсистемы.Свойства 
&НаСервере
Процедура ОбновитьЭлементыДополнительныхРеквизитов()
	УправлениеСвойствами.ОбновитьЭлементыДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗависимостиДополнительныхРеквизитов()
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииДополнительногоРеквизита(Элемент)
	УправлениеСвойствамиКлиент.ОбновитьЗависимостиДополнительныхРеквизитов(ЭтотОбъект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.Свойства

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
    ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, Объект);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
    ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, Объект);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

// СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла
&НаКлиенте
Процедура ЗагрузитьТоварыИзФайлаЗавершение(АдресЗагруженныхДанных, ДополнительныеПараметры) Экспорт
	
	Если АдресЗагруженныхДанных = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры = Неопределено Или Не ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
			Или Не ДополнительныеПараметры.Свойство("ID") Тогда 
		Возврат;
	КонецЕсли;
	
	ЗагрузитьТоварыИзФайлаНаСервере(АдресЗагруженныхДанных, ДополнительныеПараметры.ID);
	РассчитатьСуммуДокумента();
	РассчитатьПоказателиСервер(ДополнительныеПараметры.ID, Ложь);
	ОбновитьВсегоВТЧТовары();
	ОбновитьКоличествоСтрокВШапкахТЧ();
	ОбновитьВалютуВТЧГрузовТоваровСервер();
	УстановитьСнятьОтборСтрокПоПунктам();
	ОбновитьНадписьИтоги();
	ОбновитьАдресаСтрокойСервер();
	ОбновитьПараметрВыработкиВременный();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьУслугиИзФайлаЗавершение(АдресЗагруженныхДанных, ДополнительныеПараметры) Экспорт
	
	Если АдресЗагруженныхДанных = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры = Неопределено Или Не ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
			Или Не ДополнительныеПараметры.Свойство("ID") Тогда 
		Возврат;
	КонецЕсли;
	
	ЗагрузитьУслугиИзФайлаНаСервере(АдресЗагруженныхДанных, ДополнительныеПараметры.ID);
	РассчитатьСуммуДокумента();
	ОбновитьВсегоВТЧУслуги();
	ОбновитьПодвалДоходовРасходов("Услуги");
	ОбновитьПодвалУслуги();
	ОбновитьКоличествоСтрокВШапкахТЧ();
	ОбновитьПараметрВыработкиВременный();
	ОбновитьВалютуВТЧГрузовТоваровСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьГрузыИзФайлаЗавершение(АдресЗагруженныхДанных, ДополнительныеПараметры) Экспорт
	
	Если АдресЗагруженныхДанных = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры = Неопределено Или Не ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
			Или Не ДополнительныеПараметры.Свойство("ID") Тогда 
		Возврат;
	КонецЕсли;
	
	ЗагрузитьГрузыИзФайлаНаСервере(АдресЗагруженныхДанных, ДополнительныеПараметры.ID);
	РассчитатьПоказатели(Неопределено);
	РассчитатьСуммуДокумента();
	ОбновитьКоличествоСтрокВШапкахТЧ();
	
	РассчитатьПоказателиСервер(ДополнительныеПараметры.ID, Ложь);
	УстановитьСнятьОтборСтрокПоПунктам();
	ОбновитьНадписьИтоги();
	ОбновитьВсегоВТЧ();
	ОбновитьВалютуВТЧГрузовТоваровСервер();
	ОбновитьАдресаСтрокойСервер();
	ОбновитьПараметрВыработкиВременный();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьЗатратыИзФайлаЗавершение(АдресЗагруженныхДанных, ДополнительныеПараметры) Экспорт
	
	Если АдресЗагруженныхДанных = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ДополнительныеПараметры = Неопределено Или Не ТипЗнч(ДополнительныеПараметры) = Тип("Структура")
			Или Не ДополнительныеПараметры.Свойство("ID") Тогда 
		Возврат;
	КонецЕсли;
	
	ЗагрузитьЗатратыИзФайлаНаСервере(АдресЗагруженныхДанных, ДополнительныеПараметры.ID);
	ОбновитьВсегоВТЧЗатраты();
	ОбновитьПодвалДоходовРасходов("Расходы");
	ОбновитьКоличествоСтрокВШапкахТЧ();
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьТоварыИзФайлаНаСервере(АдресЗагруженныхДанных, IDСтрокиПотребности)
	
	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных);
	
	ТоварыДобавлены = Ложь;
	Для Каждого СтрокаТаблицы Из ЗагруженныеДанные Цикл 
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда 
			Продолжить;
		КонецЕсли;
		НоваяСтрокаТовары = Объект.ТоварныйСостав.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаТовары, СтрокаТаблицы);
		НоваяСтрокаТовары.ID = IDСтрокиПотребности;
		
		Если НЕ Объект.УчитыватьНДС Тогда
			НоваяСтрокаТовары.СтавкаНДС = Неопределено;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НоваяСтрокаТовары.СтавкаНДС) Тогда 
			СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеСтавкиНДС(НоваяСтрокаТовары.СтавкаНДС);
			НоваяСтрокаТовары.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
				НоваяСтрокаТовары.Сумма - (НоваяСтрокаТовары.Сумма) / ((СтавкаНДС + 100) / 100),
				НоваяСтрокаТовары.Сумма * СтавкаНДС / 100);
		КонецЕсли;
		
		НоваяСтрокаТовары.Всего = НоваяСтрокаТовары.Сумма
			+ ?(Объект.УчитыватьНДС И НЕ Объект.СуммаВключаетНДС, НоваяСтрокаТовары.СуммаНДС, 0);
		
		ТоварыДобавлены = Истина;
	КонецЦикла;
	
	Если ТоварыДобавлены Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьУслугиИзФайлаНаСервере(АдресЗагруженныхДанных, IDСтрокиПотребности)
	
	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных);
	
	УслугиДобавлены = Ложь;
	Для Каждого СтрокаТаблицы Из ЗагруженныеДанные Цикл 
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда 
			Продолжить;
		КонецЕсли;
		НоваяСтрокаУслуги = Объект.Услуги.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаУслуги, СтрокаТаблицы);
		НоваяСтрокаУслуги.ID = IDСтрокиПотребности;
		
		Если НЕ Объект.УчитыватьНДС Тогда
			НоваяСтрокаУслуги.СтавкаНДС = Неопределено;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НоваяСтрокаУслуги.СтавкаНДС) Тогда 
			СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеСтавкиНДС(НоваяСтрокаУслуги.СтавкаНДС);
			НоваяСтрокаУслуги.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
				НоваяСтрокаУслуги.Сумма - (НоваяСтрокаУслуги.Сумма) / ((СтавкаНДС + 100) / 100),
				НоваяСтрокаУслуги.Сумма * СтавкаНДС / 100);
		КонецЕсли;
		
		НоваяСтрокаУслуги.Всего = НоваяСтрокаУслуги.Сумма
			+ ?(Объект.УчитыватьНДС И НЕ Объект.СуммаВключаетНДС, НоваяСтрокаУслуги.СуммаНДС, 0);
		
		УслугиДобавлены = Истина;
	КонецЦикла;
	
	Если УслугиДобавлены Тогда
		ОбновитьПараметрВыработкиВременный();
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьГрузыИзФайлаНаСервере(АдресЗагруженныхДанных, IDСтрокиПотребности)
	
	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных);
	
	ГрузыДобавлены = Ложь;
	Для Каждого СтрокаТаблицы Из ЗагруженныеДанные Цикл 
		НоваяСтрокаГрузы = Объект.ГрузовойСостав.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаГрузы, СтрокаТаблицы);
		НоваяСтрокаГрузы.ID = IDСтрокиПотребности;
		
		ГрузыДобавлены = Истина;
	КонецЦикла;
	
	Если ГрузыДобавлены Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьЗатратыИзФайлаНаСервере(АдресЗагруженныхДанных, IDСтрокиПотребности)
	
	ЗагруженныеДанные = ПолучитьИзВременногоХранилища(АдресЗагруженныхДанных);
	
	ЗатратыДобавлены = Ложь;
	Для Каждого СтрокаТаблицы Из ЗагруженныеДанные Цикл 
		Если Не ЗначениеЗаполнено(СтрокаТаблицы.Номенклатура) Тогда 
			Продолжить;
		КонецЕсли;
		НоваяСтрокаЗатраты = Объект.Расходы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрокаЗатраты, СтрокаТаблицы);
		НоваяСтрокаЗатраты.ID = IDСтрокиПотребности;
		
		НоваяСтрокаЗатраты.УчитыватьНДС     = Объект.УчитыватьНДС;
		НоваяСтрокаЗатраты.СуммаВключаетНДС = Объект.СуммаВключаетНДС;
		
		Если НЕ НоваяСтрокаЗатраты.УчитыватьНДС Тогда
			НоваяСтрокаЗатраты.СтавкаНДС = Неопределено;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(НоваяСтрокаЗатраты.СтавкаНДС) Тогда 
			СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеСтавкиНДС(НоваяСтрокаЗатраты.СтавкаНДС);
			НоваяСтрокаЗатраты.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
				НоваяСтрокаЗатраты.Сумма - (НоваяСтрокаЗатраты.Сумма) / ((СтавкаНДС + 100) / 100),
				НоваяСтрокаЗатраты.Сумма * СтавкаНДС / 100);
		КонецЕсли;
		
		НоваяСтрокаЗатраты.Всего = НоваяСтрокаЗатраты.Сумма
			+ ?(НоваяСтрокаЗатраты.УчитыватьНДС И НЕ НоваяСтрокаЗатраты.СуммаВключаетНДС, НоваяСтрокаЗатраты.СуммаНДС, 0);
		
		ЗатратыДобавлены = Истина;
	КонецЦикла;
	
	Если ЗатратыДобавлены Тогда
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры
// Конец СтандартныеПодсистемы.ЗагрузкаДанныхИзФайла

// Процедура устанавливает видимость реквизитов формы
//
// Параметры:
//  Нет.
//
&НаКлиенте
Процедура УстановитьВидимость()
	
	// В зависимости от флага "Периодическая", установим видимость табличной части даты действия или полей аналогов в главной таблице
	Элементы.ПунктыНазначенияДатаДействия.Видимость = Не Объект.ПериодическаяПотребность;
	Элементы.ПунктыНазначенияДатаПрибытия.Видимость = Не Объект.ПериодическаяПотребность;
	
	Элементы.ПунктыНазначенияЗаказы.Видимость = Не Объект.ПериодическаяПотребность;
	Элементы.ДатыДействия.Видимость = Объект.ПериодическаяПотребность;
	Элементы.ВыборДатПоРасписанию.Видимость = Не Объект.ПериодическаяПотребность;
	
	// Колонки налога показываем только тогда, когда его учитываем.
	Если Элементы.ТоварныйСоставСтавкаНДС.Видимость <> Объект.УчитыватьНДС Тогда
		Элементы.ТоварныйСоставСтавкаНДС.Видимость = Объект.УчитыватьНДС;
	КонецЕсли;
	Если Элементы.ТоварныйСоставСуммаНДС.Видимость <> Объект.УчитыватьНДС Тогда
		Элементы.ТоварныйСоставСуммаНДС.Видимость = Объект.УчитыватьНДС;
		Элементы.ТоварныйСоставВсего.Видимость = Объект.УчитыватьНДС;
	КонецЕсли;
	
	Если Элементы.УслугиСтавкаНДС.Видимость <> Объект.УчитыватьНДС Тогда
		Элементы.УслугиСтавкаНДС.Видимость = Объект.УчитыватьНДС;
	КонецЕсли;
	Если Элементы.УслугиСуммаНДС.Видимость <> Объект.УчитыватьНДС Тогда
		Элементы.УслугиСуммаНДС.Видимость = Объект.УчитыватьНДС;
		Элементы.УслугиВсего.Видимость = Объект.УчитыватьНДС;
	КонецЕсли;
	Если Элементы.РасходыСтавкаНДС.Видимость <> Объект.УчитыватьНДС Тогда
		Элементы.РасходыСтавкаНДС.Видимость = Объект.УчитыватьНДС;
	КонецЕсли;
	Если Элементы.РасходыСуммаНДС.Видимость <> Объект.УчитыватьНДС Тогда
		Элементы.РасходыСуммаНДС.Видимость = Объект.УчитыватьНДС;
		Элементы.РасходыВсего.Видимость = Объект.УчитыватьНДС;
	КонецЕсли;
	Элементы.НадписьВсегоНДС.Видимость = Объект.УчитыватьНДС;
	Элементы.ВсегоНДС.Видимость = Объект.УчитыватьНДС;
	
	Элементы.Контрагент.Заголовок = ?(флЗаказОтКонтрагента, НСтр("en='Counterpartу';ru='Контрагент'"), НСтр("en='Department';ru='Подразделение'"));
	
	Элементы.ГруппаДоговор.Видимость = флЗаказОтКонтрагента;
	
	Элементы.ГрузовойСоставГрузовоеМесто.Видимость = 
		(Объект.ДетализацияЗаказов = ПредопределенноеЗначение("Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам")
		ИЛИ Объект.ДетализацияЗаказов = ПредопределенноеЗначение("Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам"));
	Элементы.ТоварныйСоставГрузовоеМесто.Видимость = Элементы.ГрузовойСоставГрузовоеМесто.Видимость;
	
	Элементы.ГрузовойСоставГруппаЗаполнение.Доступность = ОтборСтрокПоПунктам;
	Элементы.ТоварныйСоставГруппаЗаполнить.Доступность = ОтборСтрокПоПунктам;
	
	ТолькоПросмотрПоказателейГрузовыхМест = Элементы.ГрузовойСоставГрузовоеМесто.Видимость;
	
	Элементы.УслугиВалюта.ТолькоПросмотр  = НЕ МноговалютныйУчет;
	Элементы.РасходыВалюта.ТолькоПросмотр = НЕ МноговалютныйУчет;
	
	Элементы.ГруппаОтрезкиПути.Видимость = Элементы.ФормаРежимТехническогоСпециалиста.Пометка;
	
	// Внешний пользователь
	Если уатОбщегоНазначения.ПроверкаВнешнегоПользователя() Тогда
		Элементы.ПодменюЗаполнить.Видимость = Ложь;
		Элементы.ПодменюПечать.Видимость = Ложь;
		Элементы.ФормаВзаимодействия.Видимость = Ложь;
		Элементы.ФормаНастроитьШаблонДоговора.Видимость = Ложь;
		Элементы.СоздатьЗаказГрузоотправителя.Видимость = Ложь;
		Элементы.РасшифровкаТары.Видимость = Ложь;
		Элементы.ГруппаКомандыУслуги.Видимость = Ложь;
		Элементы.Услуги.Доступность = Ложь;
		
		Элементы.ГруппаИтогиПрибыльПодвал.Видимость = Ложь;
		Элементы.СоздатьДоговорКонтрагента.Видимость = Ложь;
		Элементы.Организация.Доступность = Ложь;
		
		флЗаказОтКонтрагента = 1;
		Элементы.Ответственный.Доступность = Ложь;
		Элементы.Контрагент.ТолькоПросмотр = Истина;
		Элементы.Контрагент.КнопкаВыбора = Ложь;
		Элементы.Контрагент.КнопкаОткрытия = Истина;
		
		Элементы.ПунктыНазначенияГрузоотправитель.КнопкаОткрытия = Ложь;
		Элементы.ПунктыНазначенияГрузополучатель.КнопкаОткрытия = Ложь;
		
		Элементы.флЗаказОтКонтрагента.Доступность = Ложь;
		Элементы.ГруппаУслуги.Заголовок = НСтр("en='Cost';ru='Стоимость'");
		Элементы.ГруппаЗатраты.Видимость = Ложь;
		
		Если Не ПравоРедактированиеДокумента() Тогда 
			Элементы.ПромежуточныеПункты.КоманднаяПанель.Видимость = Ложь;
			Элементы.ПромежуточныеПункты.ТолькоПросмотр = Истина;
			Элементы.ГруппаКомПанельГрузы.Видимость = Ложь;
			Элементы.ГруппаКомПанельТовары.Видимость = Ложь;
			
			Элементы.НадписьВсегоПоДокументу1.Гиперссылка = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	
	//ГруппаИтогиПрибыльПодвалПоПеревозкеПлан
	
КонецПроцедуры // УстановитьВидимость()

&НаКлиенте
Процедура ПриИзмененииКонтрагентаИлиОрганизации(Знач Оповещение)
	
	ДанныеОбменаССервером = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, Дата");
	ЗаполнитьЗначенияСвойств(ДанныеОбменаССервером, Объект);
	// Получим данные с сервера
	ДанныеОбменаССервером.ДоговорКонтрагента = Объект.ДоговорКонтрагента;
	ЗначенияДляЗаполнения = ИзменениеКонтрагентаСервер(ДанныеОбменаССервером);
	Объект.ДоговорКонтрагента = ЗначенияДляЗаполнения.ДоговорКонтрагента;
	
	ДоговорПередИзменением = Договор;
	//Договор = Объект.ДоговорКонтрагента;
	
	Оповещ = Новый ОписаниеОповещения("ПриИзмененииКонтрагентаИлиОрганизацииЗавершение", ЭтотОбъект, Новый Структура("Оповещение", Оповещение));
	уатОбщегоНазначенияКлиент.ПриИзмененииДоговора(ЭтаФорма, Оповещ, ДоговорПередИзменением)
	
КонецПроцедуры // ПриИзмененииКонтрагентаИлиОрганизации()

&НаКлиенте
Процедура ПриИзмененииКонтрагентаИлиОрганизацииЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Оповещение = ДополнительныеПараметры.Оповещение;
    Если Не Оповещение = Неопределено Тогда 
		ВыполнитьОбработкуОповещения(Оповещение);
	КонецЕсли;

КонецПроцедуры // ПриИзмененииКонтрагентаИлиОрганизации()

&НаСервереБезКонтекста
Функция ИзменениеКонтрагентаСервер(ДанныеДляЗаполнения)
	СтруктураПараметровДляПолученияДоговора =
		уатЗаполнениеДокументов.ПолучитьСтруктуруПараметровДляПолученияДоговораПродажи();
	
	ЗначенияДляЗаполнения = уатОбщегоНазначенияСервер.ПриИзмененииЗначенияКонтрагента(ДанныеДляЗаполнения,
							СтруктураПараметровДляПолученияДоговора);
	Возврат ЗначенияДляЗаполнения;
КонецФункции

&НаКлиенте
Процедура РедактироватьЦеныИВалюту(Команда)
	ОбработатьИзмененияПоКнопкеЦеныИВалюты(Новый ОписаниеОповещения("РедактироватьЦеныИВалютуЗавершение", ЭтотОбъект), Объект.ВалютаДокумента);
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьЦеныИВалютуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	РассчитатьСуммуДокумента();
	ОбновитьВсегоВТЧУслуги();
	Модифицированность = Истина;
КонецПроцедуры

// Процедура выполняет пересчет в табличной части документа после изменений 
// в форме "Цены и валюта".Выполняется пересчет колонок: цена, скидка, сумма,
// сумма НДС, всего.
//
&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалюты(Знач Оповещение, Знач ВалютаРасчетовПередИзменением, ПересчитатьЦены = Ложь)
	
	// 1. Формируем структуру параметров для заполнения формы "Цены и Валюта".
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ВалютаДокумента",		  Объект.ВалютаДокумента);
	СтруктураПараметров.Вставить("Курс",				  Объект.КурсВзаиморасчетов);
	СтруктураПараметров.Вставить("Кратность",			  Объект.КратностьВзаиморасчетов);
	СтруктураПараметров.Вставить("ДатаКурса",             Объект.ДатаКурса);
	СтруктураПараметров.Вставить("Контрагент",			  Объект.Контрагент);
	СтруктураПараметров.Вставить("Договор",				  Объект.ДоговорКонтрагента);
	СтруктураПараметров.Вставить("Организация",			  Объект.Организация);
	СтруктураПараметров.Вставить("ДатаДокумента",		  Объект.Дата);
	СтруктураПараметров.Вставить("ПерезаполнитьЦены",	  Ложь);
	СтруктураПараметров.Вставить("ПересчитатьЦены",		  ПересчитатьЦены);
	СтруктураПараметров.Вставить("БылиВнесеныИзменения",  Ложь);
	СтруктураПараметров.Вставить("СуммаВключаетНДС",      Объект.СуммаВключаетНДС);
	СтруктураПараметров.Вставить("НалогообложениеНДС",	  Объект.УчитыватьНДС);
	// Для объедининенного решения с БП 3
	СтруктураПараметров.Вставить("ДокументБезНДС",        НЕ Объект.УчитыватьНДС);
	// Для объедининенного решения с БП 3

	Если НЕ ПравоРедактированиеДокумента() Тогда
		СтруктураПараметров.Вставить("ТолькоПросмотр", Истина);
	КонецЕсли;
	
	// 2. Открываем форму "Цены и Валюта".
	ОткрытьФорму("ОбщаяФорма.ФормаЦеныИВалюта", СтруктураПараметров,,,,,
		Новый ОписаниеОповещения("ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение", ЭтотОбъект,
		Новый Структура("ВалютаРасчетовПередИзменением, Оповещение", ВалютаРасчетовПередИзменением, Оповещение)),
		РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры // ОбработатьИзмененияПоКнопкеЦеныИВалюты()

&НаКлиенте
Процедура ОбработатьИзмененияПоКнопкеЦеныИВалютыЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено ИЛИ НЕ ПравоРедактированиеДокумента() Тогда
		Возврат;
	КонецЕсли;
	
	ВалютаРасчетовПередИзменением = ДополнительныеПараметры.ВалютаРасчетовПередИзменением;
	Оповещение                    = ДополнительныеПараметры.Оповещение;
	СтруктураЦеныИВалюта          = Результат;
	
	// 3. Перезаполняем табличную часть "Номенклатура", если были внесены изменения в форме "Цены и Валюта".
	Если ТипЗнч(СтруктураЦеныИВалюта) = Тип("Структура")  Тогда
		ДопПараметры = Новый Структура("ПредКурс, ПредКратность, Курс, Кратность",
			Объект.КурсВзаиморасчетов, Объект.КратностьВзаиморасчетов, СтруктураЦеныИВалюта.Курс, СтруктураЦеныИВалюта.Кратность);
			
		Если СтруктураЦеныИВалюта.Свойство("ВалютаДокумента") И СтруктураЦеныИВалюта.Свойство("Курс") И СтруктураЦеныИВалюта.Свойство("Кратность") И
			СтруктураЦеныИВалюта.Свойство("СуммаВключаетНДС") И  СтруктураЦеныИВалюта.Свойство("НалогообложениеНДС") Тогда
			
			Объект.ВалютаДокумента		   = СтруктураЦеныИВалюта.ВалютаДокумента;
			Объект.КурсВзаиморасчетов	   = СтруктураЦеныИВалюта.Курс;
			Объект.КратностьВзаиморасчетов = СтруктураЦеныИВалюта.Кратность;
			Объект.ДатаКурса               = СтруктураЦеныИВалюта.ДатаКурса;
			Объект.СуммаВключаетНДС		   = СтруктураЦеныИВалюта.СуммаВключаетНДС;
			Объект.УчитыватьНДС			   = СтруктураЦеныИВалюта.НалогообложениеНДС;
			
			Если НЕ МноговалютныйУчет Тогда
				Для Каждого ТекСтрока Из Объект.Услуги Цикл
					ТекСтрока.Валюта = Объект.ВалютаДокумента;
				КонецЦикла;
				Для Каждого ТекСтрока Из Объект.Расходы Цикл
					ТекСтрока.Валюта = Объект.ВалютаДокумента;
				КонецЦикла;
			КонецЕсли;
		КонецЕсли;
		
		// Пересчитываем сумму если изменился признак Налогообложение НДС.
		Если СтруктураЦеныИВалюта.Свойство("НалогообложениеНДС") И СтруктураЦеныИВалюта.Свойство("ПредНалогообложениеНДС") Тогда
			Если СтруктураЦеныИВалюта.НалогообложениеНДС <> СтруктураЦеныИВалюта.ПредНалогообложениеНДС Тогда
				ЗаполнитьСтавкуНДСПоНалогообложениеНДС();
			КонецЕсли;
		КонецЕсли;
		
		// Пересчитываем цены по валюте.
		Если НЕ МноговалютныйУчет И СтруктураЦеныИВалюта.ПересчитатьЦены Тогда	
			ПересчитатьЦеныТабличнойЧастиПоВалюте(ВалютаРасчетовПередИзменением, "Услуги");
			ПересчитатьЦеныТабличнойЧастиПоВалюте(ВалютаРасчетовПередИзменением, "Расходы");
		КонецЕсли;
		
		// Пересчитываем сумму если изменился признак "Сумма включает НДС".
		Если СтруктураЦеныИВалюта.Свойство("СуммаВключаетНДС") И СтруктураЦеныИВалюта.Свойство("ПредСуммаВключаетНДС") Тогда
			Если СтруктураЦеныИВалюта.СуммаВключаетНДС <> СтруктураЦеныИВалюта.ПредСуммаВключаетНДС Тогда
				ПересчитатьСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС("Услуги");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	РассчитатьСуммуДокумента();
	ОбновитьВсегоВТЧУслуги();
	УстановитьВидимость();
		
	Если Оповещение <> Неопределено Тогда 
		ВыполнитьОбработкуОповещения(Оповещение);
	КонецЕсли;
КонецПроцедуры // ОбработатьИзмененияПоКнопкеЦеныИВалюты()

// Процедура заполняет Ставку НДС в табличной части по системе налогообложения.
// 
&НаСервере
Процедура ЗаполнитьСтавкуНДСПоНалогообложениеНДС()
	
	СтавкаНДСПоУмолчанию = Перечисления.СтавкиНДС.ПустаяСсылка();
	Для Каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл
		СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
		СтрокаТабличнойЧасти.СуммаНДС = 0;
	КонецЦикла;
	Для Каждого СтрокаТабличнойЧасти Из Объект.Расходы Цикл
		СтрокаТабличнойЧасти.СтавкаНДС = СтавкаНДСПоУмолчанию;
		СтрокаТабличнойЧасти.СуммаНДС = 0;
	КонецЦикла;
	
	Если Объект.УчитыватьНДС Тогда
		Элементы.УслугиСтавкаНДС.Видимость = Истина;
		Элементы.УслугиСуммаНДС.Видимость  = Истина;
		Элементы.УслугиВсего.Видимость     = Истина;
		
		Элементы.РасходыСтавкаНДС.Видимость = Истина;
		Элементы.РасходыСуммаНДС.Видимость  = Истина;
		Элементы.РасходыВсего.Видимость     = Истина;
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС) Тогда
				СтрокаТабличнойЧасти.СтавкаНДС = СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
			КонецЕсли;	
			
			СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
			СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
									  		СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
									  		СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
			
		КонецЦикла;
		
		Для каждого СтрокаТабличнойЧасти Из Объект.Расходы Цикл
			Если ЗначениеЗаполнено(СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС) Тогда
				СтрокаТабличнойЧасти.СтавкаНДС = СтрокаТабличнойЧасти.Номенклатура.СтавкаНДС;
			КонецЕсли;
			
			СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
			СтрокаТабличнойЧасти.СуммаНДС = ?(Объект.СуммаВключаетНДС, 
									  		СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
									  		СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
			
		КонецЦикла;
		
	Иначе
		Элементы.УслугиСтавкаНДС.Видимость = Ложь;
		Элементы.УслугиСуммаНДС.Видимость  = Ложь;
		Элементы.УслугиВсего.Видимость     = Ложь;
		
		Элементы.РасходыСтавкаНДС.Видимость = Ложь;
		Элементы.РасходыСуммаНДС.Видимость  = Ложь;
		Элементы.РасходыВсего.Видимость     = Ложь;
	КонецЕсли;
	
КонецПроцедуры // ЗаполнитьСтавкуНДСПоНалогообложениеНДС()

&НаКлиенте
Процедура РассчитатьСуммуДокумента()
	СтруктураДокумента = уатОбщегоНазначенияКлиентСервер.СтруктураДокумента(Объект, "уатПотребностьВПеревозке_уэ");
	Объект.СуммаДокумента = уатОбщегоНазначенияТиповые.уатПолучитьСуммуДокументаСНДС(СтруктураДокумента, "Услуги");
	ОбновитьПодвалУслуги();
КонецПроцедуры

// Процедура рассчитывает сумму в строке табличной части.
//
&НаКлиенте
Процедура РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти = Неопределено, флЕстьСкидки = Ложь)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
	Если флЕстьСкидки Тогда
		СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Сумма - СтрокаТабличнойЧасти.СуммаСкидки;
	КонецЕсли;
	
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	РассчитатьСуммуВсегоВстрокеТЧ(СтрокаТабличнойЧасти);
	
КонецПроцедуры // РассчитатьСуммуВСтрокеТабличнойЧасти()

// Рассчитывается сумма НДС в строке табличной части.
//
&НаКлиенте
Процедура РассчитатьСуммуНДС(СтрокаТабличнойЧасти)
	
	Попытка
		СуммаВключаетНДС = СтрокаТабличнойЧасти.СуммаВключаетНДС;
	Исключение
		СуммаВключаетНДС = Объект.СуммаВключаетНДС;
	КонецПопытки;
	
	СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	
	СтрокаТабличнойЧасти.СуммаНДС = ?(СуммаВключаетНДС, 
		СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
		СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
	
КонецПроцедуры // РассчитатьСуммуНДС()

&НаКлиенте
Процедура РассчитатьСуммуВсегоВстрокеТЧ(СтрокаТабличнойЧасти)
	Попытка
		СуммаВключаетНДС = СтрокаТабличнойЧасти.СуммаВключаетНДС;
	Исключение
		СуммаВключаетНДС = Объект.СуммаВключаетНДС;
	КонецПопытки;
	Попытка
		УчитыватьНДС = СтрокаТабличнойЧасти.УчитыватьНДС;
	Исключение
		УчитыватьНДС = Объект.УчитыватьНДС;
	КонецПопытки;
	
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма
		+ ?(УчитыватьНДС И НЕ СуммаВключаетНДС, СтрокаТабличнойЧасти.СуммаНДС, 0);
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуСкидки(СтрокаТабличнойЧасти)
	
	СтрокаТабличнойЧасти.СуммаСкидки = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена *
		СтрокаТабличнойЧасти.ПроцентСкидки / 100;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВсегоВТЧТовары()
	Для Каждого СтрокаТабличнойЧасти Из Объект.ТоварныйСостав Цикл
		РассчитатьСуммуВсегоВстрокеТЧ(СтрокаТабличнойЧасти);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВсегоВТЧУслуги()
	ТекСтрока = Элементы.ПунктыНазначения.ТекущиеДанные;
	ТекСтрока_ID = Неопределено;
	Если ТекСтрока <> Неопределено Тогда
		ТекСтрока_ID = ТекСтрока.ID;
	КонецЕсли;
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл
		РассчитатьСуммуВсегоВстрокеТЧ(СтрокаТабличнойЧасти);
	КонецЦикла;
	
	ОбновитьПодвалДоходовРасходов("Услуги");
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВсегоВТЧЗатраты()
	ТекСтрока = Элементы.ПунктыНазначения.ТекущиеДанные;
	ТекСтрока_ID = Неопределено;
	Если ТекСтрока <> Неопределено Тогда
		ТекСтрока_ID = ТекСтрока.ID;
	КонецЕсли;
	
	Для Каждого СтрокаТабличнойЧасти Из Объект.Расходы Цикл
		РассчитатьСуммуВсегоВстрокеТЧ(СтрокаТабличнойЧасти);
	КонецЦикла;
	
	ОбновитьПодвалДоходовРасходов("Расходы");
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВсегоВТЧ()
	ОбновитьВсегоВТЧТовары();
	ОбновитьВсегоВТЧУслуги();
	ОбновитьВсегоВТЧЗатраты();
	ОбновитьПодвалДоходовРасходов();
КонецПроцедуры

&НаСервере
Процедура ОбновитьАдресаСтрокойСервер()
	Для Каждого ТекСтрока Из Объект.ПунктыНазначения Цикл
		ТекСтрока.АдресОтправленияСтрока = ТекСтрока.АдресОтправления;
		ТекСтрока.АдресНазначенияСтрока = ТекСтрока.АдресНазначения;
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПодобратьАдреса(Знач Текст)
	
	Возврат Документы.уатЗаказГрузоотправителя.ПодобратьАдреса(Текст);
	
КонецФункции

&НаКлиенте
Процедура ОбновитьНадписьИтоги()
	
	СтруктураНадписи = ПолучитьСтруктуруИтоговойНадписи();
	
	Если Объект.ДетализацияЗаказов = ПредопределенноеЗначение("Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам") Тогда 
		ПарамКоличествоМест = " " + СтруктураНадписи.КоличествоМест + " " + ОсновнойВидУпаковкиКраткоеНаименование + " /";
		
	ИначеЕсли Объект.ДетализацияЗаказов = ПредопределенноеЗначение("Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам") Тогда 
		ПарамКоличествоМест = " " + Объект.ТоварныйСостав.Итог("КоличествоМест") + " " + ОсновнойВидУпаковкиКраткоеНаименование + " /";
		
	Иначе 
		ПарамКоличествоМест = "";
	КонецЕсли;
	
	ПарамВес = "" + СтруктураНадписи.ВесБрутто + " " + ПредставлениеЕдиницыИзмеренияВеса;
	
	Если флРасчетТары 
		И ЗначениеЗаполнено(СтруктураНадписи.ВесТары) Тогда 
		ПарамВес = ПарамВес + " + " + СтруктураНадписи.ВесТары + " " + ПредставлениеЕдиницыИзмеренияВеса;
	КонецЕсли;
	
	НадписьВсегоПоДокументу = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 км / %2 / %3 / %4 %5 /%6 %7 %8",
		СтруктураНадписи.Расстояние,
		Формат(уатЗащищенныеФункцииСервер.СложитьВремя(СтруктураНадписи.ВремяВПути, СтруктураНадписи.ВремяСтоянок), "ЧДЦ=2; ЧРД=:; ЧН=00:00; ЧГ="),
		ПарамВес,
		СтруктураНадписи.Объем, 
		ПредставлениеЕдиницыИзмеренияОбъема,
		ПарамКоличествоМест, СтруктураНадписи.СтоимостьГруза, Объект.ВалютаТоваров);
	
	ДопВыработка = 0;
	Для Каждого ТекВыработка Из СтруктураНадписи.ДопВыработка Цикл
		ДопВыработка = ДопВыработка + ТекВыработка.Значение;
	КонецЦикла;
	Если ДопВыработка > 0 Тогда
		НадписьВсегоПоДокументу = НадписьВсегоПоДокументу + " + доп. выработка";
	КонецЕсли;
	
	СтрокаЗаказа = Элементы.ПунктыНазначения.ТекущиеДанные;
	Если СтрокаЗаказа = Неопределено Тогда 
		ОбщееВремяСтоянки = ПолучитьОбщееВремяСтоянки(Неопределено, Неопределено, Неопределено, Неопределено);
		
	Иначе 
		ОбщееВремяСтоянки = ПолучитьОбщееВремяСтоянки(
			СтрокаЗаказа.СтоянкаПунктОтправления,
			СтрокаЗаказа.АдресОтправления,
			СтрокаЗаказа.СтоянкаПунктНазначения,
			СтрокаЗаказа.АдресНазначения
		);
	КонецЕсли;
	
	ОбщаяСтоянкаПунктОтправления = ОбщееВремяСтоянки.ОбщаяСтоянкаОтправление;
	ОбщаяСтоянкаПунктНазначения  = ОбщееВремяСтоянки.ОбщаяСтоянкаНазначение;
	
	Если ОбщееВремяСтоянки.ДопСтоянкаОтправление > 0 Тогда 
		Элементы.ОбщаяСтоянкаПунктОтправления.Подсказка = НСтр("ru = 'С учетом доп.стоянки в пункте'")
			+ " " + Формат(ОбщееВремяСтоянки.ДопСтоянкаОтправление, "ЧДЦ=2; ЧРД=:; ЧН=0:00; ЧГ=")
	Иначе 
		Элементы.ОбщаяСтоянкаПунктОтправления.Подсказка = НСтр("ru = 'Доп.стоянка в пункте не указана'");
	КонецЕсли;
	
	Если ОбщееВремяСтоянки.ДопСтоянкаНазначение > 0 Тогда 
		Элементы.ОбщаяСтоянкаПунктНазначения.Подсказка = НСтр("ru = 'С учетом доп.стоянки в пункте'")
			+ " " + Формат(ОбщееВремяСтоянки.ДопСтоянкаНазначение, "ЧДЦ=2; ЧРД=:; ЧН=0:00; ЧГ=")
	Иначе 
		Элементы.ОбщаяСтоянкаПунктНазначения.Подсказка = НСтр("ru = 'Доп.стоянка в пункте не указана'");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтруктуруИтоговойНадписи()
	
	СтруктураНадписи = Новый Структура("Расстояние, ПробегСГрузом, ПробегПорожний, ВремяВПути, ВремяСтоянок, ВесБрутто, Объем, КоличествоМест, СтоимостьГруза, ДопВыработка", 
		0, 0, 0, 0, 0, 0, 0, 0, 0, Новый Массив);
	
	Если ОтборСтрокПоПунктам Тогда  
		
		Если флРасчетТары Тогда 
			СтруктураНадписи.Вставить("ВесТары", 0);
		КонецЕсли;
		
		ТекСтрока = Элементы.ПунктыНазначения.ТекущиеДанные;
		Если ТекСтрока = Неопределено Тогда 
			Возврат СтруктураНадписи;
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(СтруктураНадписи, ТекСтрока);
		СтруктураНадписи.ВремяВПути     = ТекСтрока.Время;
		СтруктураНадписи.ВремяСтоянок   = ТекСтрока.Стоянка;
		
	Иначе
		СтруктураНадписи.Расстояние     = Объект.ПунктыНазначения.Итог("Расстояние");
		СтруктураНадписи.ПробегСГрузом  = Объект.ПунктыНазначения.Итог("ПробегСГрузом");
		СтруктураНадписи.ПробегПорожний = Объект.ПунктыНазначения.Итог("ПробегПорожний");
		СтруктураНадписи.ВесБрутто      = Объект.ПунктыНазначения.Итог("ВесБрутто");
		СтруктураНадписи.Объем          = Объект.ПунктыНазначения.Итог("Объем");
		СтруктураНадписи.КоличествоМест = Объект.ПунктыНазначения.Итог("КоличествоМест");
		СтруктураНадписи.СтоимостьГруза = Объект.ПунктыНазначения.Итог("СтоимостьГруза"); 
		
		Если флРасчетТары Тогда 
			СтруктураНадписи.Вставить("ВесТары", Объект.ПунктыНазначения.Итог("ВесТары"));
		КонецЕсли;
		
		ВремяИтого = 0;
		ВремяСтоянок = 0;
		Для Каждого ТекСтрока Из Объект.ПунктыНазначения Цикл
			ВремяИтого = ВремяИтого + Цел(ТекСтрока.Время) * 3600 + (ТекСтрока.Время - Цел(ТекСтрока.Время))*100*60;
			ВремяСтоянок = ВремяСтоянок + Цел(ТекСтрока.Стоянка) * 3600 + (ТекСтрока.Стоянка - Цел(ТекСтрока.Стоянка))*100*60;
		КонецЦикла;
		СтруктураНадписи.ВремяВПути = Цел(ВремяИтого/3600) + (ВремяИтого - Цел(ВремяИтого/3600)*3600)/60/100;
		СтруктураНадписи.ВремяСтоянок = Цел(ВремяСтоянок/3600) + (ВремяСтоянок - Цел(ВремяСтоянок/3600)*3600)/60/100;
		
	КонецЕсли;
	
	ДопВыработка = Новый Массив;
	Для Каждого ТекСтрока Из Объект.Выработка Цикл
		Если ОтборСтрокПоПунктам И ТекСтрока.ID <> Элементы.ПунктыНазначения.ТекущиеДанные.ID Тогда
			Продолжить;
		КонецЕсли;
		
		ДопВыработка.Добавить(Новый Структура("ПараметрВыработки, Значение", ТекСтрока.ПараметрВыработки, ТекСтрока.Значение));
	КонецЦикла;
	СтруктураНадписи.Вставить("ДопВыработка", ДопВыработка);
	
	Возврат СтруктураНадписи;
	
КонецФункции

&НаСервере
Процедура ОбновитьПараметрВыработкиВременный()
	Для Каждого СтрокаТабличнойЧасти Из Объект.Услуги Цикл
		Если СтрокаТабличнойЧасти.Тариф.МетодРасчета = Перечисления.уатМетодыРасчетаПоТарифам.ПроцентомОтСуммы Тогда
			СтрокаТабличнойЧасти.ПараметрВыработки = Справочники.уатПараметрыВыработки.Наценка;
		Иначе
			СтрокаТабличнойЧасти.ПараметрВыработки = СтрокаТабличнойЧасти.Тариф.ПараметрВыработки;
		КонецЕсли;
		СтрокаТабличнойЧасти.ПараметрВыработкиВременный = СтрокаТабличнойЧасти.ПараметрВыработки.Временный;
		Если СтрокаТабличнойЧасти.ПараметрВыработкиВременный Тогда
			СтрокаТабличнойЧасти.КоличествоВыработка = уатОбщегоНазначения.уатВремяВЧЧ_ММ(СтрокаТабличнойЧасти.Количество*3600);
		Иначе
			СтрокаТабличнойЧасти.КоличествоВыработка = СтрокаТабличнойЧасти.Количество;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФорматРедактированияКоличествоВыработки()
	ТекСтрока = Элементы.Услуги.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекСтрока.ПараметрВыработкиВременный Тогда
		Элементы.УслугиКоличество.ФорматРедактирования = "ЧДЦ=2; ЧРД=:";
	Иначе
		Элементы.УслугиКоличество.ФорматРедактирования = "";
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеПолейСтатусов()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатСтатусы_уэ.Ссылка,
	|	уатСтатусы_уэ.Наименование,
	|	уатСтатусы_уэ.ЦветФонаПоУмолчанию,
	|	уатСтатусы_уэ.ЦветТекстаПоУмолчанию
	|ИЗ
	|	Справочник.уатСтатусы_уэ КАК уатСтатусы_уэ
	|ГДЕ
	|	НЕ уатСтатусы_уэ.ПометкаУдаления
	|	И уатСтатусы_уэ.ДействуетНаПотребностиВПеревозке";
	
	ВыборкаЦвета = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЦвета.Следующий() Цикл 
		ЦветФона   = Неопределено;
		ЦветТекста = Неопределено;
		
		ХранилищеЦветФона = ВыборкаЦвета.ЦветФонаПоУмолчанию;
		Если Не ХранилищеЦветФона = Неопределено Тогда 
			ДанныеЦветФона = ХранилищеЦветФона.Получить();
			Если Не ДанныеЦветФона = Неопределено И ТипЗнч(ДанныеЦветФона) = Тип("Цвет") Тогда
				ЦветФона = ДанныеЦветФона;
			КонецЕсли;
		КонецЕсли;
		
		ХранилищеЦветТекста = ВыборкаЦвета.ЦветТекстаПоУмолчанию;
		Если Не ХранилищеЦветТекста = Неопределено Тогда 
			ДанныеЦветТекста = ХранилищеЦветТекста.Получить();
			Если Не ДанныеЦветТекста = Неопределено И ТипЗнч(ДанныеЦветТекста) = Тип("Цвет") Тогда
				ЦветТекста = ДанныеЦветТекста;
			КонецЕсли;
		КонецЕсли;
		
		Если ЦветТекста = Неопределено И ЦветФона = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		// Установка цвета реквизита шапки
		Если ВыборкаЦвета.Ссылка = Объект.СтатусВыполнения Тогда 
			Если Не ЦветТекста = Неопределено Тогда 
				Элементы.СтатусВыполнения.ЦветТекста = ЦветТекста;
			КонецЕсли;
			
			Если Не ЦветФона = Неопределено Тогда 
				Элементы.СтатусВыполнения.ЦветФона = ЦветФона;
			КонецЕсли;
			
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СтатусВыполненияПослеВыбораСтатуса(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Объект.СтатусВыполнения = РезультатЗакрытия;
	УстановитьУсловноеОформлениеПолейСтатусов();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция МаршрутЗаполненКорректно(МаршрутСсылка)
	
	Если МаршрутСсылка.ПредставлениеМаршрутаОднимПунктом Тогда 
		Возврат Истина;
	КонецЕсли;
	
	флДанныеКорректны = Истина;
	Для Сч = 0 По МаршрутСсылка.Этапы.Количество()-2 Цикл 
		ТекСтрока  = МаршрутСсылка.Этапы[Сч];
		СледСтрока = МаршрутСсылка.Этапы[Сч+1];
		
		Если Не ТекСтрока.ПунктПрибытия = СледСтрока.ПунктОтправления Тогда 
			флДанныеКорректны = Ложь;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат флДанныеКорректны;
	
КонецФункции // МаршрутЗаполненКорректно()

&НаСервере
Процедура УстановитьДанныеПоМаршрутуСервер(Знач IDСтроки)
	
	СтрокаПунктов = Объект.ПунктыНазначения.НайтиСтроки(Новый Структура("ID", IDСтроки));
	
	Если Не ЗначениеЗаполнено(СтрокаПунктов[0].Маршрут) Или СтрокаПунктов[0].Маршрут.Этапы.Количество() = 0 Тогда 
		СтрокаПунктов[0].АдресОтправления        = Неопределено;
		СтрокаПунктов[0].АдресНазначения         = Неопределено;
		СтрокаПунктов[0].АдресОтправленияСтрока  = Неопределено;
		СтрокаПунктов[0].АдресНазначенияСтрока   = Неопределено;
		СтрокаПунктов[0].Время                   = 0;
		СтрокаПунктов[0].Расстояние              = 0;
		СтрокаПунктов[0].СтоянкаПунктОтправления = 0;
		СтрокаПунктов[0].СтоянкаПунктНазначения  = 0;
		СтрокаПунктов[0].Стоянка                 = 0;
		СтрокаПунктов[0].ПробегСГрузом           = 0;
		
		Для Каждого ТекУдаляемаяСтрока Из ПромежуточныеПункты.НайтиСтроки(Новый Структура("ID", IDСтроки)) Цикл 
			ПромежуточныеПункты.Удалить(ТекУдаляемаяСтрока);
		КонецЦикла;
		
		Если СтрокаПунктов[0].FTL Тогда 
			ДобавитьПунктыШапкиВПромежуточныеПункты(IDСтроки);
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекУдаляемаяСтрока Из ПромежуточныеПункты.НайтиСтроки(Новый Структура("ID", IDСтроки)) Цикл 
		ПромежуточныеПункты.Удалить(ТекУдаляемаяСтрока);
	КонецЦикла;
	
	Если СтрокаПунктов[0].FTL И МаршрутЗаполненКорректно(СтрокаПунктов[0].Маршрут) Тогда
		МаршрутЭтапы = СтрокаПунктов[0].Маршрут.Этапы;
		Если СтрокаПунктов[0].Маршрут.ПредставлениеМаршрутаОднимПунктом Тогда
			Если МаршрутЭтапы.Количество() Тогда
				СтрокаПунктов[0].АдресОтправления = МаршрутЭтапы[0].ПунктОтправления;
				Если МаршрутЭтапы.Количество() > 1 Тогда
					СтрокаПунктов[0].АдресНазначения  = МаршрутЭтапы[МаршрутЭтапы.Количество()-1].ПунктОтправления;
				КонецЕсли;
			КонецЕсли;
			Сч = 0;
			Для Каждого ТекСтрока Из МаршрутЭтапы Цикл
				Сч = Сч + 1;
				НовСтрока = ПромежуточныеПункты.Добавить();
				НовСтрока.ID               = IDСтроки;
				НовСтрока.Пункт            = ТекСтрока.ПунктОтправления;
				НовСтрока.ОкноС            = НовСтрока.Пункт.ВремяДоступностиС;
				НовСтрока.ОкноПо           = НовСтрока.Пункт.ВремяДоступностиПо;
				НовСтрока.ТипТочкиМаршрута = ТекСтрока.ТипТочиМаршрута;
				
				Если МаршрутЭтапы.Количество() > 1 И Сч = МаршрутЭтапы.Количество() Тогда
					НовСтрока.Время      = 0;
					НовСтрока.Расстояние = 0;
				Иначе
					НовСтрока.Время      = ТекСтрока.ВремяВПути;
					НовСтрока.Расстояние = ТекСтрока.Расстояние;
				КонецЕсли;
				НовСтрока.Стоянка        = ПолучитьВремяСтоянкиПоУмолчанию(НовСтрока.Пункт);
			КонецЦикла;
		Иначе
			Для Сч = 0 По СтрокаПунктов[0].Маршрут.Этапы.Количество()-1 Цикл 
				Если Сч = 0 Тогда 
					СтрокаПунктов[0].АдресОтправления = СтрокаПунктов[0].Маршрут.Этапы[Сч].ПунктОтправления;
				КонецЕсли;
				Если Сч = СтрокаПунктов[0].Маршрут.Этапы.Количество()-1 И ЗначениеЗаполнено(СтрокаПунктов[0].Маршрут.Этапы[Сч].ПунктПрибытия) Тогда
					СтрокаПунктов[0].АдресНазначения = СтрокаПунктов[0].Маршрут.Этапы[Сч].ПунктПрибытия;
				ИначеЕсли Сч = СтрокаПунктов[0].Маршрут.Этапы.Количество()-1 Тогда
					СтрокаПунктов[0].АдресНазначения = СтрокаПунктов[0].Маршрут.Этапы[Сч].ПунктОтправления;
				КонецЕсли;
				
				НовСтрока = ПромежуточныеПункты.Добавить();
				НовСтрока.ID               = IDСтроки;
				НовСтрока.Пункт            = СтрокаПунктов[0].Маршрут.Этапы[Сч].ПунктОтправления;
				НовСтрока.ОкноС            = НовСтрока.Пункт.ВремяДоступностиС;
				НовСтрока.ОкноПо           = НовСтрока.Пункт.ВремяДоступностиПо;
				НовСтрока.Время            = СтрокаПунктов[0].Маршрут.Этапы[Сч].ВремяВПути;
				НовСтрока.Расстояние       = СтрокаПунктов[0].Маршрут.Этапы[Сч].Расстояние;
				НовСтрока.Стоянка          = ПолучитьВремяСтоянкиПоУмолчанию(НовСтрока.Пункт);
				НовСтрока.ТипТочкиМаршрута = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Погрузка");
				
				НовСтрока = ПромежуточныеПункты.Добавить();
				НовСтрока.ID               = IDСтроки;
				НовСтрока.Пункт            = СтрокаПунктов[0].Маршрут.Этапы[Сч].ПунктПрибытия;
				НовСтрока.ОкноС            = НовСтрока.Пункт.ВремяДоступностиС;
				НовСтрока.ОкноПо           = НовСтрока.Пункт.ВремяДоступностиПо;
				НовСтрока.Стоянка          = ПолучитьВремяСтоянкиПоУмолчанию(НовСтрока.Пункт);
				НовСтрока.ТипТочкиМаршрута = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Разгрузка");

			КонецЦикла;
		КонецЕсли;
		мсвПромежуточныеПункты = ПромежуточныеПункты.НайтиСтроки(Новый Структура("ID", IDСтроки));
		Если мсвПромежуточныеПункты.Количество() И ЗначениеЗаполнено(мсвПромежуточныеПункты[0].Пункт)
				И Не ЗначениеЗаполнено(мсвПромежуточныеПункты[0].ПрибытиеПлан) Тогда 
			мВремяС  = 0; 
			мВремяПо = 0; 
			мСтоянка = 0; 
			
			Если ТипЗнч(мсвПромежуточныеПункты[0].Пункт) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда 
				мВыбЗнач = мсвПромежуточныеПункты[0].Пункт;
				мВремяС  = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(мсвПромежуточныеПункты[0].Пункт, "ВремяДоступностиС");
				мВремяПо = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(мсвПромежуточныеПункты[0].Пункт, "ВремяДоступностиПО");
				мСтоянка = ПолучитьВремяСтоянкиПоУмолчанию(мсвПромежуточныеПункты[0].Пункт);
				
			Иначе 
				мВыбЗнач = мсвПромежуточныеПункты[0].Пункт;
			КонецЕсли;
			
			Если ТипЗнч(мВремяС) = Тип("Дата") Тогда
				мВремяС = мВремяС - Дата('00010101');
			КонецЕсли;
			
			Если ТипЗнч(мВремяПо) = Тип("Дата") Тогда
				мВремяПо = мВремяПо - Дата('00010101');
				мВремяПо = ?(ЗначениеЗаполнено(мВремяПо), мВремяПо, '00010101235900'-Дата('00010101'))
			КонецЕсли;
			
			мсвПромежуточныеПункты[0].ПрибытиеПлан = НачалоДня(Объект.Дата) + мВремяС;
			мсвПромежуточныеПункты[0].ОкноС        = мсвПромежуточныеПункты[0].ПрибытиеПлан;
			мсвПромежуточныеПункты[0].УбытиеПлан   = НачалоДня(Объект.Дата) + мВремяПо;
			мсвПромежуточныеПункты[0].ОкноПо       = мсвПромежуточныеПункты[0].УбытиеПлан;
			мсвПромежуточныеПункты[0].Стоянка      = мСтоянка;
		КонецЕсли;
		
	Иначе 
		мВремяВПути = 0;
		мРасстояние = 0;
		
		Для Сч = 0 По СтрокаПунктов[0].Маршрут.Этапы.Количество()-1 Цикл 
			мВремяВПути = уатЗащищенныеФункцииСервер.СложитьВремя(мВремяВПути, СтрокаПунктов[0].Маршрут.Этапы[Сч].ВремяВПути);
			мРасстояние = мРасстояние + СтрокаПунктов[0].Маршрут.Этапы[Сч].Расстояние;
			
			Если Сч = 0 Тогда 
				СтрокаПунктов[0].АдресОтправления = СтрокаПунктов[0].Маршрут.Этапы[Сч].ПунктОтправления;
			КонецЕсли;
			Если Сч = СтрокаПунктов[0].Маршрут.Этапы.Количество()-1 Тогда 
				Если СтрокаПунктов[0].Маршрут.ПредставлениеМаршрутаОднимПунктом Тогда 
					СтрокаПунктов[0].АдресНазначения = СтрокаПунктов[0].Маршрут.Этапы[Сч].ПунктОтправления;
				Иначе 
					СтрокаПунктов[0].АдресНазначения = СтрокаПунктов[0].Маршрут.Этапы[Сч].ПунктПрибытия;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		// Подбор времени прибытия/убытия по расписанию
		ДанныеРасписания = Неопределено;
		Если Не Объект.ПериодическаяПотребность Тогда
			// Подбор времени прибытия/убытия по расписанию
			ДанныеРасписания = Неопределено;
			Если Не Объект.ПериодическаяПотребность Тогда
				// Подбор времени прибытия/убытия по расписанию
				СтруктураПараметров = Новый Структура("Маршрут, АдресОтправления, АдресНазначения, Грузоотправитель, Грузополучатель");
				СтруктураПараметров.Маршрут = СтрокаПунктов[0].Маршрут;
				СтруктураПараметров.АдресОтправления = СтрокаПунктов[0].АдресОтправления;
				СтруктураПараметров.АдресНазначения = СтрокаПунктов[0].АдресНазначения;
				СтруктураПараметров.Грузоотправитель = СтрокаПунктов[0].Грузоотправитель;
				СтруктураПараметров.Грузополучатель = СтрокаПунктов[0].Грузополучатель;
				Если ЗначениеЗаполнено(Объект.Дата) Тогда
					НачалоПериода = Объект.Дата;
				Иначе
					НачалоПериода = Неопределено;
				КонецЕсли;
				ДанныеРасписания = уатОбщегоНазначения_уэ.БлижайшийДоступныйРейс(НачалоПериода,, СтруктураПараметров);
			КонецЕсли;
			Если ДанныеРасписания <> Неопределено Тогда
				СтрокаПунктов[0].ОтправлениеС    = ДанныеРасписания.ВремяОтправленияС;
				СтрокаПунктов[0].ОтправлениеПо   = ДанныеРасписания.ВремяОтправленияПо;
				СтрокаПунктов[0].ПрибытиеС       = ДанныеРасписания.ВремяПрибытияС;
				СтрокаПунктов[0].ПрибытиеПо      = ДанныеРасписания.ВремяПрибытияПо;
				СтрокаПунктов[0].ДатаОтправления = ДанныеРасписания.ДатаОтправления;
				СтрокаПунктов[0].ДатаПрибытия    = ДанныеРасписания.ДатаПрибытия;
			КонецЕсли;
		КонецЕсли;
		
		Если ТипЗнч(СтрокаПунктов[0].АдресОтправления) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда
			Если ДанныеРасписания = Неопределено Тогда
				СтрокаПунктов[0].ОтправлениеС  = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(
					СтрокаПунктов[0].АдресОтправления,
					"ВремяДоступностиС"
				);
				
				ВремяДоступностиПо = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(
					СтрокаПунктов[0].АдресОтправления,
					"ВремяДоступностиПо"
				);
				
				СтрокаПунктов[0].ОтправлениеПо = ?(ЗначениеЗаполнено(ВремяДоступностиПо), ВремяДоступностиПо, '00010101235900');
			КонецЕсли;
			СтрокаПунктов[0].СтоянкаПунктОтправления = ПолучитьВремяСтоянкиПоУмолчанию(СтрокаПунктов[0].АдресОтправления);
		КонецЕсли;
		
		Если ТипЗнч(СтрокаПунктов[0].АдресНазначения) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда 
			Если ДанныеРасписания = Неопределено Тогда
				СтрокаПунктов[0].ПрибытиеС = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(
					СтрокаПунктов[0].АдресНазначения,
					"ВремяДоступностиС"
				);
				
				ВремяДоступностиПо = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(
					СтрокаПунктов[0].АдресНазначения,
					"ВремяДоступностиПо"
				);
				
				СтрокаПунктов[0].ПрибытиеПо = ?(ЗначениеЗаполнено(ВремяДоступностиПо), ВремяДоступностиПо, '00010101235900');
			КонецЕсли;
			СтрокаПунктов[0].СтоянкаПунктНазначения = ПолучитьВремяСтоянкиПоУмолчанию(СтрокаПунктов[0].АдресНазначения);
			
			Если Не ЗначениеЗаполнено(СтрокаПунктов[0].НаправлениеПеревозки) Тогда
				СтрокаПунктов[0].НаправлениеПеревозки = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(
					СтрокаПунктов[0].АдресНазначения,
					"НаправлениеПеревозки"
				);
			КонецЕсли;
		КонецЕсли;
		
		СтрокаПунктов[0].Время      = мВремяВПути;
		СтрокаПунктов[0].Расстояние = мРасстояние;
		Если СтрокаПунктов[0].FTL Тогда 
			ДобавитьПунктыШапкиВПромежуточныеПункты(IDСтроки);
		КонецЕсли;
	КонецЕсли;
	
	ОбновитьАдресаСтрокойСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьВремяРасстояниеМеждуПунктами(Знач IDСтроки)
	
	СтрокаПунктов = Объект.ПунктыНазначения.НайтиСтроки(Новый Структура("ID", IDСтроки));
	
	СтрокаПунктов[0].Время         = 0;
	СтрокаПунктов[0].Расстояние    = 0;
	СтрокаПунктов[0].ПробегСГрузом = 0;
	
	Для Каждого ТекСтрока Из ПромежуточныеПункты.НайтиСтроки(Новый Структура("ID", IDСтроки)) Цикл 
		ТекСтрока.Время      = 0;
		ТекСтрока.Расстояние = 0;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПравоРедактированиеДокумента()
	Рез = ПравоДоступа("Редактирование", Метаданные.Документы.уатПотребностьВПеревозке_уэ);
	Возврат Рез;
КонецФункции

&НаСервере
Процедура ДобавитьПунктыШапкиВПромежуточныеПункты(Знач IDСтроки)
	
	СтрокиПунктыНазначения = Объект.ПунктыНазначения.НайтиСтроки(Новый Структура("ID", IDСтроки));
	
	Если ЗначениеЗаполнено(СтрокиПунктыНазначения[0].АдресОтправления)
			Или ЗначениеЗаполнено(СтрокиПунктыНазначения[0].СтоянкаПунктОтправления) Тогда 
		НовСтрока = ПромежуточныеПункты.Добавить();
		НовСтрока.ID                    = IDСтроки;
		НовСтрока.Пункт                 = СтрокиПунктыНазначения[0].АдресОтправления;
		НовСтрока.ТипТочкиМаршрута      = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Погрузка");
		НовСтрока.ОтправительПолучатель = СтрокиПунктыНазначения[0].Грузоотправитель;
		НовСтрока.КонтактноеЛицо        = СтрокиПунктыНазначения[0].КонтактноеЛицоГрузоотправителя;
		НовСтрока.Стоянка               = СтрокиПунктыНазначения[0].СтоянкаПунктОтправления;
		НовСтрока.Время                 = ?(ЗначениеЗаполнено(СтрокиПунктыНазначения[0].АдресНазначения), СтрокиПунктыНазначения[0].Время, 0);
		НовСтрока.Расстояние            = ?(ЗначениеЗаполнено(СтрокиПунктыНазначения[0].АдресНазначения), СтрокиПунктыНазначения[0].Расстояние, 0);
		НовСтрока.СтоянкаДоп            = уатОбщегоНазначения.ПолучитьВремяДопСтонки(НовСтрока.Пункт);

		Если Объект.ПериодическаяПотребность Тогда 
			СтрокиДат = Объект.ДатыДействия.НайтиСтроки(Новый Структура("ID", IDСтроки));
			
			Если СтрокиДат.Количество() Тогда 
				НовСтрока.ПрибытиеПлан = СтрокиДат[0].ДатаОтправления + (СтрокиПунктыНазначения[0].ОтправлениеС - '00010101');
			КонецЕсли;
		Иначе 
			НовСтрока.ПрибытиеПлан = СтрокиПунктыНазначения[0].ДатаОтправления + (СтрокиПунктыНазначения[0].ОтправлениеС - '00010101');
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(СтрокиПунктыНазначения[0].АдресНазначения)
			Или ЗначениеЗаполнено(СтрокиПунктыНазначения[0].СтоянкаПунктНазначения) Тогда 
		НовСтрока = ПромежуточныеПункты.Добавить();
		НовСтрока.ID                    = IDСтроки;
		НовСтрока.Пункт                 = СтрокиПунктыНазначения[0].АдресНазначения;
		НовСтрока.ТипТочкиМаршрута      = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Разгрузка");
		НовСтрока.ОтправительПолучатель = СтрокиПунктыНазначения[0].Грузополучатель;
		НовСтрока.КонтактноеЛицо        = СтрокиПунктыНазначения[0].КонтактноеЛицоГрузополучателя;
		НовСтрока.Стоянка               = СтрокиПунктыНазначения[0].СтоянкаПунктНазначения;
		НовСтрока.Время                 = 0;
		НовСтрока.Расстояние            = 0;
		НовСтрока.СтоянкаДоп            = уатОбщегоНазначения.ПолучитьВремяДопСтонки(НовСтрока.Пункт);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОграничениеТипаОтправительПолучатель(ТекСтрокаПункты)
	Если Не ПравоРедактированиеДокумента() Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекСтрокаПункты.ВидДоставки = ПредопределенноеЗначение("Перечисление.уатВидыДоставки_уэ.СкладДверь")
		ИЛИ ТекСтрокаПункты.ВидДоставки = ПредопределенноеЗначение("Перечисление.уатВидыДоставки_уэ.СкладСклад") Тогда
		Элементы.ПунктыНазначенияГрузоотправитель.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Склады");
		Элементы.ПунктыНазначенияГрузоотправитель.ПодсказкаВвода = "Введите наименование склада";
		Элементы.ПунктыНазначенияКонтактноеЛицоГрузоотправителя.Доступность = Ложь;
		ТекСтрокаПункты.КонтактноеЛицоГрузоотправителя = Неопределено;
	Иначе
		Элементы.ПунктыНазначенияГрузоотправитель.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
		Элементы.ПунктыНазначенияГрузоотправитель.ПодсказкаВвода = "Введите ИНН или наименование";
		Элементы.ПунктыНазначенияКонтактноеЛицоГрузоотправителя.Доступность = Истина;
	КонецЕсли;
	Если ТекСтрокаПункты.ВидДоставки = ПредопределенноеЗначение("Перечисление.уатВидыДоставки_уэ.ДверьСклад")
		ИЛИ ТекСтрокаПункты.ВидДоставки = ПредопределенноеЗначение("Перечисление.уатВидыДоставки_уэ.СкладСклад") Тогда
		Элементы.ПунктыНазначенияГрузополучатель.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Склады");
		Элементы.ПунктыНазначенияГрузополучатель.ПодсказкаВвода = "Введите наименование склада";
		Элементы.ПунктыНазначенияКонтактноеЛицоГрузополучателя.Доступность = Ложь;
		ТекСтрокаПункты.КонтактноеЛицоГрузополучателя = Неопределено;
	Иначе
		Элементы.ПунктыНазначенияГрузополучатель.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
		Элементы.ПунктыНазначенияГрузополучатель.ПодсказкаВвода = "Введите ИНН или наименование";
		Элементы.ПунктыНазначенияКонтактноеЛицоГрузополучателя.Доступность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДопВыработкуПриСоздании(IDСтроки)
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатПараметрыВыработки.Ссылка
	|ИЗ
	|	Справочник.уатПараметрыВыработки КАК уатПараметрыВыработки
	|ГДЕ
	|	уатПараметрыВыработки.ИспользоватьВДопВыработкеМЛ
	|	И НЕ уатПараметрыВыработки.Предопределенный
	|	И НЕ уатПараметрыВыработки.ПометкаУдаления
	|	И уатПараметрыВыработки.ИспользоватьДляЗаказовИПотребности");
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Объект.Выработка.Добавить();
		НоваяСтрока.ID = IDСтроки;
		НоваяСтрока.ПараметрВыработки = Выборка.Ссылка;
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьХарактеристикиГрузовогоМеста(ГрузовоеМесто)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", ГрузовоеМесто);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатГрузовыеМеста_уэ.ВесБрутто,
	|	уатГрузовыеМеста_уэ.Объем,
	|	уатГрузовыеМеста_уэ.Стоимость,
	|	уатГрузовыеМеста_уэ.КоличествоМест
	|ИЗ
	|	Справочник.уатГрузовыеМеста_уэ КАК уатГрузовыеМеста_уэ
	|ГДЕ
	|	уатГрузовыеМеста_уэ.Ссылка = &Ссылка";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Результат = Новый Структура("ВесБрутто, Объем, Стоимость, КоличествоМест", 0, 0, 0, 0);
	ЗаполнитьЗначенияСвойств(Результат, Выборка);
	
	Возврат Результат;
	
КонецФункции // ПолучитьХарактеристикиГрузовогоМеста()

&НаСервере
Процедура ОбновитьВалютуВТЧГрузовТоваровСервер()
	Для Каждого ТекСтрока Из Объект.ГрузовойСостав Цикл
		Если ЗначениеЗаполнено(ТекСтрока.ГрузовоеМесто) Тогда
			ТекСтрока.Валюта = ТекСтрока.ГрузовоеМесто.Валюта;
		Иначе
			ТекСтрока.Валюта = Объект.ВалютаТоваров;
		КонецЕсли;
	КонецЦикла;
	Для Каждого ТекСтрока Из Объект.ТоварныйСостав Цикл
		Если ЗначениеЗаполнено(ТекСтрока.ГрузовоеМесто) Тогда
			ТекСтрока.Валюта = ТекСтрока.ГрузовоеМесто.Валюта;
		Иначе
			ТекСтрока.Валюта = Объект.ВалютаТоваров;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКонтактноеЛицоАдрес(ОбъектСсылка)
	
	Результат = Новый Структура("КонтактноеЛицо, Адрес", Справочники.КонтактныеЛица.ПустаяСсылка(), Справочники.уатПунктыНазначения.ПустаяСсылка());
	
	Если ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.Контрагенты") Тогда 
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Ссылка", ОбъектСсылка);
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	КонтрагентыПунктыНазначения.ПунктНазначения КАК ПунктНазначения,
		|	КонтрагентыПунктыНазначения.КонтактноеЛицо КАК КонтактноеЛицо,
		|	1 КАК Порядок
		|ИЗ
		|	Справочник.Контрагенты.ПунктыНазначения КАК КонтрагентыПунктыНазначения
		|ГДЕ
		|	КонтрагентыПунктыНазначения.Ссылка = &Ссылка
		|	И КонтрагентыПунктыНазначения.Основной
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	КонтрагентыПунктыНазначения.ПунктНазначения,
		|	КонтрагентыПунктыНазначения.КонтактноеЛицо,
		|	2
		|ИЗ
		|	Справочник.Контрагенты.ПунктыНазначения КАК КонтрагентыПунктыНазначения
		|ГДЕ
		|	КонтрагентыПунктыНазначения.Ссылка = &Ссылка
		|	И НЕ КонтрагентыПунктыНазначения.Основной
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Если Выборка.Следующий() Тогда 
			Результат.КонтактноеЛицо = Выборка.КонтактноеЛицо;
			Результат.Адрес          = Выборка.ПунктНазначения;
			
			Возврат Результат;
		КонецЕсли;
		
		АдресОбъекта = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
			ОбъектСсылка, 
			Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента
		);
		
		Если Не ЗначениеЗаполнено(АдресОбъекта) Тогда
			АдресОбъекта = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
				ОбъектСсылка, 
				Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента
			);
		КонецЕсли;
		
		Результат.КонтактноеЛицо = ОбъектСсылка.ОсновноеКонтактноеЛицо;
		Результат.Адрес          = АдресОбъекта;
		
		Возврат Результат;
		
	ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.Склады") Тогда
		Результат.КонтактноеЛицо = ОбъектСсылка.КонтактноеЛицо;
		Результат.Адрес          = уатОбщегоНазначения_уэ.АдресСклада(ОбъектСсылка);
		
		Возврат Результат;
		
	Иначе 
		Возврат Результат;
	КонецЕсли;
	
КонецФункции // ПолучитьКонтактноеЛицоАдрес()

&НаСервереБезКонтекста
Функция ПолучитьАдреса(ОбъектСсылка, ФактАдрес = Ложь)
	
	Результат = Новый Массив();
	
	Если ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.Контрагенты") Тогда 
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("Ссылка", ОбъектСсылка);
		
		Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	КонтрагентыПунктыНазначения.ПунктНазначения КАК ПунктНазначения,
		|	КонтрагентыПунктыНазначения.КонтактноеЛицо КАК КонтактноеЛицо,
		|	1 КАК Порядок
		|ИЗ
		|	Справочник.Контрагенты.ПунктыНазначения КАК КонтрагентыПунктыНазначения
		|ГДЕ
		|	КонтрагентыПунктыНазначения.Ссылка = &Ссылка
		|	И КонтрагентыПунктыНазначения.Основной
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	КонтрагентыПунктыНазначения.ПунктНазначения,
		|	КонтрагентыПунктыНазначения.КонтактноеЛицо,
		|	2
		|ИЗ
		|	Справочник.Контрагенты.ПунктыНазначения КАК КонтрагентыПунктыНазначения
		|ГДЕ
		|	КонтрагентыПунктыНазначения.Ссылка = &Ссылка
		|	И НЕ КонтрагентыПунктыНазначения.Основной
		|
		|УПОРЯДОЧИТЬ ПО
		|	Порядок";
		
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл 
			Результат.Добавить(Выборка.ПунктНазначения);
		КонецЦикла;
		
		Если ФактАдрес Тогда
			АдресОбъектаФакт = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
			ОбъектСсылка, 
			Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента
			);
			
			Если ЗначениеЗаполнено(АдресОбъектаФакт) Тогда
				Результат.Добавить(АдресОбъектаФакт);
			КонецЕсли;
			
			АдресОбъекта = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(
			ОбъектСсылка, 
			Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента
			);
			
			Если ЗначениеЗаполнено(АдресОбъекта) И АдресОбъектаФакт <> АдресОбъекта Тогда
				Результат.Добавить(АдресОбъекта);
			КонецЕсли;
		КонецЕсли;

		Возврат Результат;
		
	ИначеЕсли ТипЗнч(ОбъектСсылка) = Тип("СправочникСсылка.Склады") Тогда
		Результат.Добавить(уатОбщегоНазначения_уэ.АдресСклада(ОбъектСсылка));
		Возврат Результат;
	Иначе 
		Возврат Результат;
	КонецЕсли;
	
КонецФункции // ПолучитьКонтактноеЛицоАдрес()

&НаСервере
Функция ПолучитьДанныеПоТаре(IDстроки)
	
	Результат = Новый Массив();
	
	Если Объект.ДетализацияЗаказов = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам
			Или Объект.ДетализацияЗаказов = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам Тогда
		
		Для Каждого ТекСтрокаГруз Из Объект.ГрузовойСостав Цикл
			Если ТекСтрокаГруз.ID <> IDстроки Тогда
				Продолжить;
			КонецЕсли;
			
			ДанныеСтроки = Новый Структура();
			ДанныеСтроки.Вставить("Тара",       ТекСтрокаГруз.ВидУпаковки);
			ДанныеСтроки.Вставить("Количество", ТекСтрокаГруз.КоличествоМест);
			Если ТекСтрокаГруз.ГрузовоеМесто.Контейнер Тогда
				ДанныеСтроки.Вставить("ВесТары", ТекСтрокаГруз.ГрузовоеМесто.ВесТары * ТекСтрокаГруз.КоличествоМест);
			ИначеЕсли ЗначениеЗаполнено(ТекСтрокаГруз.ВидУпаковки) Тогда
				ДанныеСтроки.Вставить("ВесТары", ТекСтрокаГруз.ВидУпаковки.ВесТары * ТекСтрокаГруз.КоличествоМест);
			Иначе
				ДанныеСтроки.Вставить("ВесТары", 0);
			КонецЕсли;
			Результат.Добавить(ДанныеСтроки);
		КонецЦикла;
	КонецЕсли;
	
	Если Объект.ДетализацияЗаказов = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам
			Или Объект.ДетализацияЗаказов = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам Тогда
		
		Для Каждого ТекСтрокаТовар Из Объект.ТоварныйСостав Цикл
			Если ТекСтрокаТовар.ID <> IDстроки Тогда
				Продолжить;
			КонецЕсли;
			
			РаспределениеПоУпаковкам = уатОбщегоНазначения_уэ.УпаковатьНоменклатуру(ТекСтрокаТовар.Номенклатура, ТекСтрокаТовар.Количество);
			
			Для Каждого ТекСтрокаУпаковки Из РаспределениеПоУпаковкам Цикл 
				ДанныеСтроки = Новый Структура();
				ДанныеСтроки.Вставить("Тара",       ТекСтрокаУпаковки.ВидУпаковки);
				ДанныеСтроки.Вставить("Количество", ТекСтрокаУпаковки.Количество);
				ДанныеСтроки.Вставить("ВесТары",    ТекСтрокаУпаковки.ВидУпаковки.ВесТары * ТекСтрокаУпаковки.Количество);
				
				Результат.Добавить(ДанныеСтроки);
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПолучитьДанныеПоТаре()

&НаСервере
Процедура ПересчитатьСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС(ИмяТЧ)
	уатОбщегоНазначенияСервер.ПересчитатьСуммуТабличнойЧастиПоФлагуСуммаВключаетНДС(Объект[ИмяТЧ], Объект.СуммаВключаетНДС);
КонецПроцедуры

&НаСервере
Процедура ПересчитатьЦеныТабличнойЧастиПоВалюте(ВалютаРасчетовПередИзменением, ИмяТЧ)
	уатОбщегоНазначенияСервер.ПересчитатьЦеныТабличнойЧастиПоВалюте(Объект, ВалютаРасчетовПередИзменением, ИмяТЧ);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПраваИНастройкиПользователя(Организация, НастройкаПольз)
	Возврат уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, НастройкаПольз);
КонецФункции

&НаСервере
Процедура УстановитьВозможностьРедактированияДоходовРасходов()
	РазрешитьРедактированиеДоходовРасходов = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(
		ПользователиКлиентСервер.АвторизованныйПользователь(), ПланыВидовХарактеристик.уатПраваИНастройки.РазрешитьРедактированиеДоходовРасходов);
		
	Если НЕ РазрешитьРедактированиеДоходовРасходов Тогда
		Элементы.УслугиРучнойВвод.Доступность = Ложь;
		Элементы.УслугиНоменклатура.Доступность = Ложь;
		Элементы.УслугиСодержание.Доступность = Ложь;
		Элементы.УслугиТариф.ТолькоПросмотр = Истина;
		Элементы.УслугиКоличество.Доступность = Ложь;
		Элементы.УслугиЦена.Доступность = Ложь;
		Элементы.УслугиСумма.Доступность = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьВариантыОтрезков(IDЗаказа)
	
	ВариантыОтрезков = Новый Массив();
	
	Для СчПогрузка = 0 По ПромежуточныеПункты.Количество() - 1 Цикл 
		СтрокаПогрузка = ПромежуточныеПункты[СчПогрузка];
		
		Если Не СтрокаПогрузка.ID = IDЗаказа Тогда 
			Продолжить;
		КонецЕсли;
		
		Если Не (СтрокаПогрузка.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка
				Или СтрокаПогрузка.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяПогрузка) Тогда 
			Продолжить;
		КонецЕсли;
		
		Для СчРазгрузка = (СчПогрузка + 1) По ПромежуточныеПункты.Количество() - 1 Цикл 
			СтрокаРазгрузка = ПромежуточныеПункты[СчРазгрузка];
			
			Если Не СтрокаРазгрузка.ID = IDЗаказа Тогда 
				Продолжить;
			КонецЕсли;
			
			Если Не (СтрокаРазгрузка.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка
					Или СтрокаРазгрузка.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяРазгрузка) Тогда 
				Продолжить;
			КонецЕсли;
			
			ВариантОтрезка = Новый Структура;
			ВариантОтрезка.Вставить("Значение", Строка(СчПогрузка+1) + " - " + Строка(СчРазгрузка+1));
			ПредставлениеОтрезка = уатОбщегоНазначения_проф.ПолучитьПредставлениеОтрезкаПути(
				СтрокаПогрузка.Пункт, СтрокаРазгрузка.Пункт);
			ВариантОтрезка.Вставить("Представление", ПредставлениеОтрезка);
			ВариантыОтрезков.Добавить(ВариантОтрезка);
		КонецЦикла;
	КонецЦикла;
	
	Возврат ВариантыОтрезков;
	
КонецФункции // ПолучитьВариантыОтрезков()

&НаКлиенте
Процедура ЗаполнитьОтрезокПутиВГрузахВыборВарианта(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;
	
	СписокВыбораВарианта = Новый СписокЗначений();
	
	Для Каждого ТекВариант Из ПолучитьВариантыОтрезков(ДополнительныеПараметры) Цикл 
		СписокВыбораВарианта.Добавить(ТекВариант.Значение, ТекВариант.Представление);
	КонецЦикла;
	
	СписокВыбораВарианта.ПоказатьВыборЭлемента(
		Новый ОписаниеОповещения("ЗаполнитьОтрезокПутиВГрузахЗавершение", ЭтотОбъект, ДополнительныеПараметры),
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОтрезокПутиВГрузахЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПоложениеРазделителя = СтрНайти(ВыбранныйЭлемент.Значение, " - ");
	Если ПоложениеРазделителя > 0 Тогда
		От = Число(Лев(ВыбранныйЭлемент.Значение, ПоложениеРазделителя-1));
		До = Число(Сред(ВыбранныйЭлемент.Значение, ПоложениеРазделителя+2));
	Иначе
		Возврат;
	КонецЕсли;
	
	Сч = Объект.ОтрезкиПути.Количество();
	Пока Сч > 0 Цикл
		Сч = Сч-1;
		Если Не Объект.ОтрезкиПути[Сч].ID = ДополнительныеПараметры Тогда 
			Продолжить;
		КонецЕсли;
		Объект.ОтрезкиПути.Удалить(Сч);

	КонецЦикла;
	
	Для Сч = От По До-1 Цикл
		Для Каждого ТекСтрока Из Объект.ГрузовойСостав Цикл 
			НоваяСтрока = Объект.ОтрезкиПути.Добавить();
			НоваяСтрока.ПунктОтправления = Сч;
			НоваяСтрока.ПунктНазначения = Сч+1;
			НоваяСтрока.Груз = ТекСтрока.НомерСтроки;
			НоваяСтрока.ID = ДополнительныеПараметры;
		КонецЦикла;
	КонецЦикла;

	УстановитьПредставленияОтрезковПути();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОтрезокПутиВТоварахВыборВарианта(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;
	
	СписокВыбораВарианта = Новый СписокЗначений();
	
	Для Каждого ТекВариант Из ПолучитьВариантыОтрезков(ДополнительныеПараметры) Цикл 
		СписокВыбораВарианта.Добавить(ТекВариант.Значение, ТекВариант.Представление);
	КонецЦикла;
	
	СписокВыбораВарианта.ПоказатьВыборЭлемента(
		Новый ОписаниеОповещения("ЗаполнитьОтрезокПутиВТоварахЗавершение", ЭтотОбъект, ДополнительныеПараметры),
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьОтрезокПутиВТоварахЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПоложениеРазделителя = СтрНайти(ВыбранныйЭлемент.Значение, " - ");
	Если ПоложениеРазделителя > 0 Тогда
		От = Число(Лев(ВыбранныйЭлемент.Значение, ПоложениеРазделителя-1));
		До = Число(Сред(ВыбранныйЭлемент.Значение, ПоложениеРазделителя+2));
	Иначе
		Возврат;
	КонецЕсли;
	
	Сч = Объект.ОтрезкиПути.Количество();
	Пока Сч > 0 Цикл
		Сч = Сч-1;
		Если Не Объект.ОтрезкиПути[Сч].ID = ДополнительныеПараметры Тогда 
			Продолжить;
		КонецЕсли;
		Объект.ОтрезкиПути.Удалить(Сч);

	КонецЦикла;
	
	Для Сч = От По До-1 Цикл
		Для Каждого ТекСтрока Из Объект.ТоварныйСостав Цикл 
			НоваяСтрока = Объект.ОтрезкиПути.Добавить();
			НоваяСтрока.ПунктОтправления = Сч;
			НоваяСтрока.ПунктНазначения = Сч+1;
			НоваяСтрока.Груз = ТекСтрока.НомерСтроки;
			НоваяСтрока.ID = ДополнительныеПараметры;
		КонецЦикла;
	КонецЦикла;

	УстановитьПредставленияОтрезковПути();
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ППОтправительПолучательПоКонтрагентуЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	СтрокаЗаказа = Элементы.ПунктыНазначения.ТекущиеДанные;
	Если СтрокаЗаказа = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если СтрокаЗаказа.ВидДоставки = ПредопределенноеЗначение("Перечисление.уатВидыДоставки_уэ.ДверьДверь")
			Или СтрокаЗаказа.ВидДоставки = ПредопределенноеЗначение("Перечисление.уатВидыДоставки_уэ.ДверьСклад") Тогда 
		ДополнительныеПараметры.ОтправительПолучатель = РезультатЗакрытия;
		ПромежуточныеПунктыОтправительПолучательПриИзменении(Элементы.ПромежуточныеПунктыОтправительПолучатель);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПППунктИзКИЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры.ОтправительПолучатель = РезультатЗакрытия.ПунктНазначения;
	ПромежуточныеПунктыПунктПриИзменении(Элементы.ПромежуточныеПунктыПункт);
	
	ДополнительныеПараметры.КонтактноеЛицо = РезультатЗакрытия.КонтактноеЛицо;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеАдресаJSON(АдресСтрока, ВидКИ)
	ДанныеАдресаJSON = УправлениеКонтактнойИнформациейСлужебный.КонтактнаяИнформацияПоПредставлению(АдресСтрока, ВидКИ);
	Возврат ДанныеАдресаJSON;
КонецФункции

&НаКлиенте
Функция ПолучитьКоординатыАдреса(АдресПредставление, ЗначениеАдресаJSON)
	СтруктураФорма = Новый Структура;
	СтруктураОбъект = Новый Структура("Лат, Лон, Ссылка", 0, 0, ПредопределенноеЗначение("Справочник.уатПунктыНазначения.ПустаяСсылка"));
	СтруктураОбъект.Вставить("ЗначениеАдреса", ЗначениеАдресаJSON);
	СтруктураФорма.Вставить("Объект", СтруктураОбъект);
	// {Совместимость}
	// Этот код - для совместимости с старым форматом хранения адреса в XML.
	СтруктураФорма.Вставить("ЗначениеПолей", "");
	// {/Совместимость}
	СтруктураФорма.Вставить("Модифицированность", Ложь);
	
	уатЭлектронныеКартыКлиент.ГеокодироватьКоординатыВПунктеНазначения(СтруктураФорма, Ложь);
	
	Рез = Новый Структура("Широта, Долгота", СтруктураФорма.Объект.Лат, СтруктураФорма.Объект.Лон);
	
	Возврат Рез;
КонецФункции

&НаКлиенте
Процедура ППСоздатьПунктЗавершение(РезультатЗакрытия, ДопПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ТекстПредставления = РезультатЗакрытия.Представление;
	Если ПустаяСтрока(ТекстПредставления) Тогда
		Возврат;
	КонецЕсли;
	
	ЗначениеАдресаJSON = РезультатЗакрытия.Значение;
	КоординатыАдреса = ПолучитьКоординатыАдреса(ТекстПредставления, ЗначениеАдресаJSON);
	
	НовыйАдресСсылка = СоздатьАдресСервер(ТекстПредставления, КоординатыАдреса, ЗначениеАдресаJSON);
	
	Если ЗначениеЗаполнено(НовыйАдресСсылка) Тогда
		ДопПараметры.Пункт = НовыйАдресСсылка;
		ПромежуточныеПунктыПунктПриИзменении(Элементы.ПромежуточныеПунктыПункт);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СоздатьАдресСервер(АдресПредставление, КоординатыАдреса, ЗначениеАдреса)
	
	ТипПункта = ПолучитьТипПунктаДляПодстановки();
	
	НовыйАдрес = Справочники.уатПунктыНазначения.СоздатьЭлемент();
	НовыйАдрес.Наименование        = АдресПредставление;
	НовыйАдрес.Адрес               = АдресПредставление;
	НовыйАдрес.ЗначениеАдреса      = ЗначениеАдреса;
	НовыйАдрес.Лат                 = КоординатыАдреса.Широта;
	НовыйАдрес.Лон                 = КоординатыАдреса.Долгота;
	НовыйАдрес.ТипПункта           = ТипПункта;
	
	НовыйАдрес.Записать();
	
	Возврат НовыйАдрес.Ссылка;
	
КонецФункции

&НаСервере
Функция ПолучитьТипПунктаДляПодстановки()
	
	Запрос = Новый Запрос();
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|	уатТипыПунктов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.уатТипыПунктов КАК уатТипыПунктов
	|ГДЕ
	|	НЕ уатТипыПунктов.ПометкаУдаления
	|	И уатТипыПунктов.Наименование = &АдресПредставление";
	Запрос.УстановитьПараметр("АдресПредставление", НСтр("en='Address';ru='Адрес'"));
		
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.Ссылка;
		
	Иначе 
		СпрОб = Справочники.уатТипыПунктов.СоздатьЭлемент();
		СпрОб.Наименование = НСтр("en='Address';ru='Адрес'");
		СпрОб.Записать();
		
		Возврат СпрОб.Ссылка;
	КонецЕсли;
	
КонецФункции // ПолучитьТипПунктаДляПодстановки()

&НаСервере
Процедура ПрочитатьПромежуточныеПункты(ДокОбъект=Неопределено)
	
	Если ДокОбъект = Неопределено Тогда 
		ДокОбъект = Объект;
	КонецЕсли;
	
	ПромежуточныеПункты.Очистить();
	
	Для Каждого ТекСтрока Из ДокОбъект.ПромежуточныеПункты Цикл 
		НовСтрока = ПромежуточныеПункты.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока, ТекСтрока);
		
		Если Не ЗначениеЗаполнено(НовСтрока.Пункт) Тогда
			НовСтрока.ПунктСтатусКартинка = -1;
		ИначеЕсли ТипЗнч(НовСтрока.Пункт) = Тип("СправочникСсылка.уатПунктыНазначения")
				И ПунктНазначенияИмеетКоординаты(НовСтрока.Пункт) Тогда
			НовСтрока.ПунктСтатусКартинка = 0;
		Иначе
			НовСтрока.ПунктСтатусКартинка = 1;
		КонецЕсли;
		НовСтрока.СтоянкаДоп = уатОбщегоНазначения.ПолучитьВремяДопСтонки(НовСтрока.Пункт);

		НовСтрока.Длительность = "";
	КонецЦикла;
	
	СтрокиПоЗаказам = ПромежуточныеПункты.Выгрузить(, "ID");
	СтрокиПоЗаказам.Свернуть("ID");
	
	Для Каждого ТекЗаказ Из СтрокиПоЗаказам Цикл 
		СтрокиПунктов = ПромежуточныеПункты.НайтиСтроки(Новый Структура("ID", ТекЗаказ.ID));
		
		ТекВремя = '00010101';
		ПредПрибытиеПлан = '00010101';
		НакопленноеВремя = 0;
		
		Для СчСтрок = 0 По СтрокиПунктов.Количество() - 1 Цикл 
			Если СчСтрок = 0 Тогда 
				ТекВремя = СтрокиПунктов[СчСтрок].ПрибытиеПлан;
				ПредПрибытиеПлан = СтрокиПунктов[СчСтрок].ПрибытиеПлан;
			Иначе 
				ТекВремя = уатЗащищенныеФункцииСервер.СложитьВремя(ТекВремя, СтрокиПунктов[СчСтрок].Ожидание);
			КонецЕсли;
			
			// Обновление временного окна прибытия в пункт
			СдвигОкна = НачалоДня(ТекВремя) - НачалоДня(СтрокиПунктов[СчСтрок].ПрибытиеПлан);
			СтрокиПунктов[СчСтрок].ОкноС  = СтрокиПунктов[СчСтрок].ОкноС  + СдвигОкна;
			СтрокиПунктов[СчСтрок].ОкноПо = СтрокиПунктов[СчСтрок].ОкноПо + СдвигОкна;
			
			СтрокиПунктов[СчСтрок].ПрибытиеПлан = ТекВремя;
			
			ТекВремя = уатЗащищенныеФункцииСервер.СложитьВремя(ТекВремя, СтрокиПунктов[СчСтрок].Стоянка);
			
			Если ТипЗнч(СтрокиПунктов[СчСтрок].Пункт) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда 
				ТекВремя = уатЗащищенныеФункцииСервер.СложитьВремя(ТекВремя, уатОбщегоНазначения.ПолучитьВремяДопСтонки(СтрокиПунктов[СчСтрок].Пункт));
			КонецЕсли;
			
			СтрокиПунктов[СчСтрок].УбытиеПлан = ТекВремя;
			
			ТекВремя = уатЗащищенныеФункцииСервер.СложитьВремя(ТекВремя, СтрокиПунктов[СчСтрок].Время);
			
			НакопленноеВремя = НакопленноеВремя + (СтрокиПунктов[СчСтрок].ПрибытиеПлан - ПредПрибытиеПлан);
			ПредПрибытиеПлан = СтрокиПунктов[СчСтрок].ПрибытиеПлан;
			ВремяВТекТочке   = НакопленноеВремя;
			
			Если ВремяВТекТочке > 0 Тогда 
				чДней = Цел(ВремяВТекТочке / 86400);
				ВремяВТекТочке = ВремяВТекТочке - чДней * 86400;
				чЧас = Цел(ВремяВТекТочке / 3600);
				ВремяВТекТочке = ВремяВТекТочке - чЧас * 3600;
				чМин = Цел(ВремяВТекТочке / 60);
				ВремяВТекТочке = ВремяВТекТочке - чМин * 60;
				
				Если ВремяВТекТочке > 0 Тогда 
					чМин = чМин + 1;
				КонецЕсли;
				
				Если чМин > 59 Тогда 
					чМин = 0;
					чЧас = чЧас + 1;
				КонецЕсли;
				
				Если чЧас > 23 Тогда 
					чЧас = 0;
					чДней = чДней + 1;
				КонецЕсли;
				
				СтрокиПунктов[СчСтрок].Длительность = "" 
					+ ?(чДней = 0, "", Строка(чДней) + " " + НСтр("ru='дн.';en='days.'") + " ")
					+ Формат(чЧас, "ЧЦ=2; ЧДЦ=; ЧН=00; ЧВН=; ЧГ=0") + ":"
					+ Формат(чМин, "ЧЦ=2; ЧДЦ=; ЧН=00; ЧВН=; ЧГ=0");
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	УстановитьПредставленияОтрезковПути();
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьПромежуточныеПункты(ДокОбъект=Неопределено)
	
	Если ДокОбъект = Неопределено Тогда 
		ДокОбъект = Объект;
	КонецЕсли;
	
	ДокОбъект.ПромежуточныеПункты.Очистить();
	Для Каждого ТекСтрока Из ПромежуточныеПункты Цикл 
		НовСтрока = ДокОбъект.ПромежуточныеПункты.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока, ТекСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПунктНазначенияИмеетКоординаты(Пункт)
	Возврат (ЗначениеЗаполнено(Пункт.Лат) И ЗначениеЗаполнено(Пункт.Лон));
КонецФункции

&НаКлиенте
Процедура ОтобразитьСтатусыАдресов()
	
	Для Каждого ТекСтрока Из ПромежуточныеПункты Цикл 
		Если Не ЗначениеЗаполнено(ТекСтрока.Пункт) Тогда
			ТекСтрока.ПунктСтатусКартинка = -1;
		ИначеЕсли ТипЗнч(ТекСтрока.Пункт) = Тип("СправочникСсылка.уатПунктыНазначения")
				И ПунктНазначенияИмеетКоординаты(ТекСтрока.Пункт) Тогда
			ТекСтрока.ПунктСтатусКартинка = 0;
		Иначе
			ТекСтрока.ПунктСтатусКартинка = 1;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьВремяСтоянкиПоУмолчанию(ПунктСсылка)
	
	Возврат уатОбщегоНазначения.ПолучитьВремяСтоянкиПоУмолчанию(ПунктСсылка);
	
КонецФункции // ПолучитьВремяСтоянкиПоУмолчанию()

&НаСервере
Процедура ПересчитатьСтоянкуПоДокументу(IDстроки)
	
	Для Каждого СтрокаЗаказа Из Объект.ПунктыНазначения Цикл 
		Если СтрокаЗаказа.ID = IDстроки Тогда 
			мСтоянка = 0;
			
			Если СтрокаЗаказа.FTL Тогда 
				Для Каждого СтрокаПП Из ПромежуточныеПункты Цикл 
					Если Не СтрокаПП.ID = IDстроки Тогда 
						Продолжить;
					КонецЕсли;
					
					мСтоянка = уатЗащищенныеФункцииСервер.СложитьВремя(мСтоянка, СтрокаПП.Стоянка);
					
					Если ТипЗнч(СтрокаПП.Пункт) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда 
						мСтоянка = уатЗащищенныеФункцииСервер.СложитьВремя(мСтоянка, уатОбщегоНазначения.ПолучитьВремяДопСтонки(СтрокаПП.Пункт));
					КонецЕсли;
				КонецЦикла;
				
			Иначе 
				мСтоянка = уатЗащищенныеФункцииСервер.СложитьВремя(СтрокаЗаказа.СтоянкаПунктОтправления, СтрокаЗаказа.СтоянкаПунктНазначения);
				Если ТипЗнч(СтрокаЗаказа.АдресОтправления) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда 
					мСтоянка = уатЗащищенныеФункцииСервер.СложитьВремя(мСтоянка, уатОбщегоНазначения.ПолучитьВремяДопСтонки(СтрокаЗаказа.АдресОтправления));
				КонецЕсли;
				Если ТипЗнч(СтрокаЗаказа.АдресНазначения) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда 
					мСтоянка = уатЗащищенныеФункцииСервер.СложитьВремя(мСтоянка, уатОбщегоНазначения.ПолучитьВремяДопСтонки(СтрокаЗаказа.АдресНазначения));
				КонецЕсли;
			КонецЕсли;
			
			СтрокаЗаказа.Стоянка = мСтоянка;
			
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьОбщееВремяСтоянки(СтоянкаПунктОтправления, АдресОтправления, СтоянкаПунктНазначения, АдресНазначения)
	
	Результат = Новый Структура(
		"ОбщаяСтоянкаОтправление, ОбщаяСтоянкаНазначение, ДопСтоянкаОтправление, ДопСтоянкаНазначение",
		0, 0, 0, 0
	);
	
	Если Не СтоянкаПунктОтправления = Неопределено И Не АдресОтправления = Неопределено Тогда 
		Если ТипЗнч(АдресОтправления) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда 
			Результат.ОбщаяСтоянкаОтправление = уатЗащищенныеФункцииСервер.СложитьВремя(
				СтоянкаПунктОтправления,
				уатОбщегоНазначения.ПолучитьВремяДопСтонки(АдресОтправления)
			);
			
			Результат.ДопСтоянкаОтправление = уатОбщегоНазначения.ПолучитьВремяДопСтонки(АдресОтправления);
		КонецЕсли;
	КонецЕсли;
	
	Если Не СтоянкаПунктНазначения = Неопределено И Не АдресНазначения = Неопределено Тогда 
		Если ТипЗнч(АдресНазначения) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда 
			Результат.ОбщаяСтоянкаНазначение = уатЗащищенныеФункцииСервер.СложитьВремя(
				СтоянкаПунктНазначения,
				уатОбщегоНазначения.ПолучитьВремяДопСтонки(АдресНазначения)
			);
			
			Результат.ДопСтоянкаНазначение = уатОбщегоНазначения.ПолучитьВремяДопСтонки(АдресНазначения);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;

КонецФункции // ПолучитьОбщееВремяСтоянки()

&НаКлиенте
Процедура ПередЗакрытиемВопрос(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.ОК Тогда
		флВопросЗакрытиеФормы = Ложь;
		Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПодвалДоходовРасходов(ИмяТЧ = Неопределено, IDСтроки = Неопределено)
	Если ИмяТЧ = Неопределено Тогда
		ОбновитьПодвалДоходовРасходов("Услуги");
		ОбновитьПодвалДоходовРасходов("Расходы");
		Возврат;
	КонецЕсли;
	
	ТекСтрокаПункты = Элементы.ПунктыНазначения.ТекущиеДанные;
	Если ТекСтрокаПункты = Неопределено Тогда
		IDСтрокиПунктов = Неопределено
	Иначе
		IDСтрокиПунктов = ТекСтрокаПункты.ID;
	КонецЕсли;
		
	ИмяЭлементаТЧ = ?(ИмяТЧ = "Услуги", "Услуги", "Расходы");
	
	СтрокаКолонки = "Сумма, СуммаНДС, Всего";                                     
	СтруктураКолонки = Новый Структура(СтрокаКолонки);
	
	соотвИтогиВВалюте = Новый Соответствие;
	ВсегоКолич = 0;
	Для Каждого ТекСтрока Из Объект[ИмяТЧ] Цикл
		Если ОтборСтрокПоПунктам И ТекСтрока.ID <> IDСтрокиПунктов Тогда
			Продолжить;
		КонецЕсли;
		
		ТекЭлем = соотвИтогиВВалюте.Получить(ТекСтрока.Валюта);               
		Если ТекЭлем = Неопределено Тогда
			ТекСтруктураКолонки = Новый Структура(СтрокаКолонки);
			ЗаполнитьЗначенияСвойств(ТекСтруктураКолонки, ТекСтрока);
			соотвИтогиВВалюте.Вставить(ТекСтрока.Валюта, ТекСтруктураКолонки);
		Иначе
			Для Каждого КолонкаИтоги Из СтруктураКолонки Цикл
				ТекЭлем[КолонкаИтоги.Ключ] = ТекЭлем[КолонкаИтоги.Ключ] + ТекСтрока[КолонкаИтоги.Ключ];
			КонецЦикла;
		КонецЕсли;
		
		ВсегоКолич = ВсегоКолич + ТекСтрока.Количество;
	КонецЦикла;
	
	мВысотаПодвала = 1;
	
	Для Каждого КолонкаИтоги Из СтруктураКолонки Цикл
		ТекТекстПодвала = "";
		мКоличВалют = 0;
		
		Для Каждого ТекСтрокаИтогиВВалюте Из соотвИтогиВВалюте Цикл
			ТекИтого = ТекСтрокаИтогиВВалюте.Значение[КолонкаИтоги.Ключ];
			Если ТекИтого = 0 Тогда
				Продолжить;
			КонецЕсли;
			
			ТекТекстПодвала = ТекТекстПодвала + "
				|" + Формат(ТекИтого, "ЧДЦ=2") + " " + ТекСтрокаИтогиВВалюте.Ключ + "";
			
			мКоличВалют = мКоличВалют + 1;
		КонецЦикла;
		
		Элементы[ИмяЭлементаТЧ + КолонкаИтоги.Ключ].ТекстПодвала = Сред(ТекТекстПодвала, 2);
		
		мВысотаПодвала = Макс(мВысотаПодвала, мКоличВалют);
	КонецЦикла;
	
	// Количество
	Элементы[ИмяТЧ + "Количество"].ТекстПодвала = Формат(ВсегоКолич, "ЧДЦ=3");
		
	Элементы[ИмяЭлементаТЧ].ВысотаПодвала = мВысотаПодвала;                                               
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПодвалПрибыли(IDСтрокиПотребности = "")
	
	НадписьИтогиПрибыльДоходыПлан = 0;
	НадписьИтогиПрибыльДоходыФакт = 0;
	НадписьИтогиПрибыльРасходыПлан = 0;
	НадписьИтогиПрибыльРасходыФакт = 0;
	НадписьИтогиПрибыльПрибыльПлан = 0;
	НадписьИтогиПрибыльПрибыльФакт = 0;
	
	Если НЕ ЗначениеЗаполнено(IDСтрокиПотребности) И ОтборСтрокПоПунктам Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураДокумента = Новый Структура;
	СтруктураДокумента.Вставить("Ссылка", Объект.Ссылка);
	СтруктураДокумента.Вставить("Дата", Объект.Дата);
	СтруктураДокумента.Вставить("IDСтрокиПотребности", IDСтрокиПотребности);
	СтруктураДокумента.Вставить("ОтборСтрокПоПунктам", ОтборСтрокПоПунктам);
	СтруктураДокумента.Вставить("ВалютаДокумента", Объект.ВалютаДокумента);
	СтруктураДокумента.Вставить("Курс", Объект.КурсВзаиморасчетов);
	СтруктураДокумента.Вставить("Кратность", Объект.КратностьВзаиморасчетов);
	СтруктураДокумента.Вставить("ДатаКурса", Объект.ДатаКурса);
	СтруктураДокумента.Вставить("ВалютаУпрУчета", мВалютаУправленческогоУчета);
	СтруктураДокумента.Вставить("ВалютаРеглУчета", мВалютаРегламентированногоУчета);
	СтруктураДокумента.Вставить("УчитыватьНДС", Объект.УчитыватьНДС);
	СтруктураДокумента.Вставить("СуммаВключаетНДС", Объект.СуммаВключаетНДС);
	СтруктураДанныеПоПрибыли = ПолучитьДанныеПрибыльНаСервере(СтруктураДокумента);
	
	НадписьИтогиПрибыльДоходыПлан  = СтруктураДанныеПоПрибыли.ДоходыПлан;
	НадписьИтогиПрибыльРасходыПлан = СтруктураДанныеПоПрибыли.РасходыПлан;
	НадписьИтогиПрибыльДоходыФакт  = СтруктураДанныеПоПрибыли.Доходы;
	НадписьИтогиПрибыльРасходыФакт = СтруктураДанныеПоПрибыли.Расходы;
	НадписьИтогиПрибыльПрибыльПлан = СтруктураДанныеПоПрибыли.ПрибыльПлан;
	НадписьИтогиПрибыльПрибыльФакт = СтруктураДанныеПоПрибыли.Прибыль;
	
	НадписьИтогиПрибыльПоПеревозке = НСтр("en='Profit on transportation: ';ru='Прибыль по перевозке: '")
		+ Формат(НадписьИтогиПрибыльПрибыльФакт, "ЧН=0") + " " + Объект.ВалютаДокумента;
		
	Если НадписьИтогиПрибыльПрибыльФакт < 0
		И Элементы.ГруппаИтогиПрибыльПодвалПоПеревозке.ЦветТекстаЗаголовка <> WebЦвета.Красный Тогда
		Элементы.ГруппаИтогиПрибыльПодвалПоПеревозке.ЦветТекстаЗаголовка = WebЦвета.Красный;
	ИначеЕсли НадписьИтогиПрибыльПрибыльФакт >= 0
		И Элементы.ГруппаИтогиПрибыльПодвалПоПеревозке.ЦветТекстаЗаголовка = WebЦвета.Красный Тогда
		Элементы.ГруппаИтогиПрибыльПодвалПоПеревозке.ЦветТекстаЗаголовка = Новый Цвет(0, 150, 70);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеПрибыльНаСервере(СтруктураДокумента)
	ДатаКурса = ?(ЗначениеЗаполнено(СтруктураДокумента.ДатаКурса), СтруктураДокумента.ДатаКурса, СтруктураДокумента.Дата);
	СтруктураВалютаУпр = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(СтруктураДокумента.ВалютаУпрУчета, ДатаКурса);
	
	Рез = Новый Структура("ДоходыПлан, РасходыПлан, ПрибыльПлан, Доходы, Расходы, Прибыль", 0, 0, 0, 0, 0, 0);
	
	// Плановые услуги
	ИспользоватьПлановыеУслуги = ПолучитьФункциональнуюОпцию("уатИспользоватьПлановыеУслуги_уэ");
	Если ИспользоватьПлановыеУслуги Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	уатПотребностьВПеревозке_уэПунктыНазначения.ID КАК ID
		|ПОМЕСТИТЬ ПотребностьПункты
		|ИЗ
		|	Документ.уатПотребностьВПеревозке_уэ.ПунктыНазначения КАК уатПотребностьВПеревозке_уэПунктыНазначения
		|ГДЕ
		|	уатПотребностьВПеревозке_уэПунктыНазначения.Ссылка = &Ссылка
		|	И (НЕ &ОтборСтрокПоПунктам
		|			ИЛИ уатПотребностьВПеревозке_уэПунктыНазначения.ID = &IDСтрокиПотребности)
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатПлановыеУслуги_уэОбороты.СуммаУпрОборот - ВЫБОР
		|		КОГДА &ВычитатьНДС
		|			ТОГДА уатПлановыеУслуги_уэОбороты.СуммаНДСУпрОборот
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ДоходыПлан,
		|	уатПлановыеУслуги_уэОбороты.СуммаРеглОборот - ВЫБОР
		|		КОГДА &ВычитатьНДС
		|			ТОГДА уатПлановыеУслуги_уэОбороты.СуммаНДСОборот
		|		ИНАЧЕ 0
		|	КОНЕЦ КАК ДоходыПланРегл,
		|	0 КАК РасходыПлан,
		|	0 КАК РасходыПланРегл
		|ПОМЕСТИТЬ ПлановыеУслуги
		|ИЗ
		|	РегистрНакопления.уатПлановыеУслуги_уэ.Обороты(
		|			,
		|			,
		|			Регистратор,
		|			ПолучательУслуг = ЗНАЧЕНИЕ(Перечисление.уатПолучателиУслуг.Контрагент)
		|				И (ЗаказНаТС.IDСтрокиПотребности В
		|						(ВЫБРАТЬ
		|							ПотребностьПункты.ID
		|						ИЗ
		|							ПотребностьПункты)
		|					ИЛИ ЗаказНаТС.РодительскийЗаказ.IDСтрокиПотребности В
		|						(ВЫБРАТЬ
		|							ПотребностьПункты.ID
		|						ИЗ
		|							ПотребностьПункты))) КАК уатПлановыеУслуги_уэОбороты
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	0,
		|	0,
		|	уатПлановыеУслуги_уэОбороты.СуммаУпрОборот - ВЫБОР
		|		КОГДА &ВычитатьНДС
		|			ТОГДА уатПлановыеУслуги_уэОбороты.СуммаНДСУпрОборот
		|		ИНАЧЕ 0
		|	КОНЕЦ,
		|	уатПлановыеУслуги_уэОбороты.СуммаРеглОборот - ВЫБОР
		|		КОГДА &ВычитатьНДС
		|			ТОГДА уатПлановыеУслуги_уэОбороты.СуммаНДСОборот
		|		ИНАЧЕ 0
		|	КОНЕЦ
		|ИЗ
		|	РегистрНакопления.уатПлановыеУслуги_уэ.Обороты(
		|			,
		|			,
		|			Регистратор,
		|			ПолучательУслуг = ЗНАЧЕНИЕ(Перечисление.уатПолучателиУслуг.НашаОрганизация)
		|				И (ЗаказНаТС.IDСтрокиПотребности В
		|						(ВЫБРАТЬ
		|							ПотребностьПункты.ID
		|						ИЗ
		|							ПотребностьПункты)
		|					ИЛИ ЗаказНаТС.РодительскийЗаказ.IDСтрокиПотребности В
		|						(ВЫБРАТЬ
		|							ПотребностьПункты.ID
		|						ИЗ
		|							ПотребностьПункты))) КАК уатПлановыеУслуги_уэОбороты
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	ЕСТЬNULL(СУММА(ПлановыеУслуги.ДоходыПлан), 0) КАК ДоходыПлан,
		|	ЕСТЬNULL(СУММА(ПлановыеУслуги.ДоходыПланРегл), 0) КАК ДоходыПланРегл,
		|	ЕСТЬNULL(СУММА(ПлановыеУслуги.РасходыПлан), 0) КАК РасходыПлан,
		|	ЕСТЬNULL(СУММА(ПлановыеУслуги.РасходыПланРегл), 0) КАК РасходыПланРегл
		|ИЗ
		|	ПлановыеУслуги КАК ПлановыеУслуги");
		Запрос.УстановитьПараметр("Ссылка",              СтруктураДокумента.Ссылка);
		Запрос.УстановитьПараметр("ОтборСтрокПоПунктам", СтруктураДокумента.ОтборСтрокПоПунктам);
		Запрос.УстановитьПараметр("IDСтрокиПотребности", СтруктураДокумента.IDСтрокиПотребности);
		Запрос.УстановитьПараметр("ВычитатьНДС", СтруктураДокумента.УчитыватьНДС И НЕ СтруктураДокумента.СуммаВключаетНДС);
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Если Выборка.Следующий() Тогда
			Если СтруктураДокумента.ВалютаДокумента = СтруктураДокумента.ВалютаУпрУчета Тогда
				Рез.ДоходыПлан  = Выборка.ДоходыПлан;
				Рез.РасходыПлан = Выборка.РасходыПлан;
			ИначеЕсли СтруктураДокумента.ВалютаДокумента = СтруктураДокумента.ВалютаРеглУчета Тогда
				Рез.ДоходыПлан  = Выборка.ДоходыПланРегл;
				Рез.РасходыПлан = Выборка.РасходыПланРегл;
			Иначе
				Рез.ДоходыПлан = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(Выборка.ДоходыПлан,
					СтруктураДокумента.ВалютаУпрУчета,  СтруктураДокумента.ВалютаДокумента,
					СтруктураВалютаУпр.Курс,            СтруктураДокумента.Курс,
					СтруктураВалютаУпр.Кратность,       СтруктураДокумента.Кратность);
				Рез.РасходыПлан = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(Выборка.РасходыПлан,
					СтруктураДокумента.ВалютаУпрУчета,  СтруктураДокумента.ВалютаДокумента,
					СтруктураВалютаУпр.Курс,            СтруктураДокумента.Курс,
					СтруктураВалютаУпр.Кратность,       СтруктураДокумента.Кратность);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Фактические услуги
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	уатПотребностьВПеревозке_уэПунктыНазначения.ID КАК ID
	|ПОМЕСТИТЬ ПотребностьПункты
	|ИЗ
	|	Документ.уатПотребностьВПеревозке_уэ.ПунктыНазначения КАК уатПотребностьВПеревозке_уэПунктыНазначения
	|ГДЕ
	|	уатПотребностьВПеревозке_уэПунктыНазначения.Ссылка = &Ссылка
	|	И (НЕ &ОтборСтрокПоПунктам
	|			ИЛИ уатПотребностьВПеревозке_уэПунктыНазначения.ID = &IDСтрокиПотребности)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(уатДоходыОстатки.СуммаУпрПриход) - ВЫБОР
	|		КОГДА &ВычитатьНДС
	|			ТОГДА СУММА(уатДоходыОстатки.СуммаНДСУпрПриход)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Доходы,
	|	СУММА(уатДоходыОстатки.СуммаРеглПриход) - ВЫБОР
	|		КОГДА &ВычитатьНДС
	|			ТОГДА СУММА(уатДоходыОстатки.СуммаНДСПриход)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ДоходыРегл,
	|	0 КАК Расходы,
	|	0 КАК РасходыРегл
	|ПОМЕСТИТЬ ДоходыИРасходы
	|ИЗ
	|	РегистрНакопления.уатДоходы.Обороты(
	|			,,,
	|			Заказ.IDСтрокиПотребности В
	|				(ВЫБРАТЬ
	|					ПотребностьПункты.ID
	|				ИЗ
	|					ПотребностьПункты)) КАК уатДоходыОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	0,
	|	СУММА(уатРасходыОстатки.СуммаУпрПриход) - ВЫБОР
	|		КОГДА &ВычитатьНДС
	|			ТОГДА СУММА(уатРасходыОстатки.СуммаНДСУпрПриход)
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	СУММА(уатРасходыОстатки.СуммаРеглПриход) - ВЫБОР
	|		КОГДА &ВычитатьНДС
	|			ТОГДА СУММА(уатРасходыОстатки.СуммаНДСПриход)
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|ИЗ
	|	РегистрНакопления.уатРасходы.Обороты(
	|			,,,
	|			Заказ.IDСтрокиПотребности В
	|				(ВЫБРАТЬ
	|					ПотребностьПункты.ID
	|				ИЗ
	|					ПотребностьПункты)) КАК уатРасходыОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	СУММА(уатДоходыОстатки.СуммаУпрПриход) - ВЫБОР
	|		КОГДА &ВычитатьНДС
	|			ТОГДА СУММА(уатДоходыОстатки.СуммаНДСУпрПриход)
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	СУММА(уатДоходыОстатки.СуммаРеглПриход) - ВЫБОР
	|		КОГДА &ВычитатьНДС
	|			ТОГДА СУММА(уатДоходыОстатки.СуммаНДСПриход)
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	0,
	|	0
	|ИЗ
	|	РегистрНакопления.уатДоходы.Обороты(
	|			,,,
	|			Заказ.РодительскийЗаказ.IDСтрокиПотребности В
	|				(ВЫБРАТЬ
	|					ПотребностьПункты.ID
	|				ИЗ
	|					ПотребностьПункты)) КАК уатДоходыОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	0,
	|	0,
	|	СУММА(уатРасходыОстатки.СуммаУпрПриход) - ВЫБОР
	|		КОГДА &ВычитатьНДС
	|			ТОГДА СУММА(уатРасходыОстатки.СуммаНДСУпрПриход)
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	СУММА(уатРасходыОстатки.СуммаРеглПриход) - ВЫБОР
	|		КОГДА &ВычитатьНДС
	|			ТОГДА СУММА(уатРасходыОстатки.СуммаНДСПриход)
	|		ИНАЧЕ 0
	|	КОНЕЦ
	|ИЗ
	|	РегистрНакопления.уатРасходы.Обороты(
	|			,,,
	|			Заказ.РодительскийЗаказ.IDСтрокиПотребности В
	|				(ВЫБРАТЬ
	|					ПотребностьПункты.ID
	|				ИЗ
	|					ПотребностьПункты)) КАК уатРасходыОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	СУММА(ДоходыИРасходы.Доходы) КАК Доходы,
	|	СУММА(ДоходыИРасходы.ДоходыРегл) КАК ДоходыРегл,
	|	СУММА(ДоходыИРасходы.Расходы) КАК Расходы,
	|	СУММА(ДоходыИРасходы.РасходыРегл) КАК РасходыРегл
	|ИЗ
	|	ДоходыИРасходы КАК ДоходыИРасходы");
	Запрос.УстановитьПараметр("Ссылка",              СтруктураДокумента.Ссылка);
	Запрос.УстановитьПараметр("ОтборСтрокПоПунктам", СтруктураДокумента.ОтборСтрокПоПунктам);
	Запрос.УстановитьПараметр("IDСтрокиПотребности", СтруктураДокумента.IDСтрокиПотребности);
	Запрос.УстановитьПараметр("ВычитатьНДС", СтруктураДокумента.УчитыватьНДС И НЕ СтруктураДокумента.СуммаВключаетНДС);
			
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда
		Если СтруктураДокумента.ВалютаДокумента = СтруктураДокумента.ВалютаУпрУчета Тогда
			Рез.Доходы  = Выборка.Доходы;
			Рез.Расходы = Выборка.Расходы;
		ИначеЕсли СтруктураДокумента.ВалютаДокумента = СтруктураДокумента.ВалютаРеглУчета Тогда
			Рез.Доходы  = Выборка.ДоходыРегл;
			Рез.Расходы = Выборка.РасходыРегл;
		Иначе
			Рез.Доходы = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(Выборка.Доходы,
				СтруктураДокумента.ВалютаУпрУчета,  СтруктураДокумента.ВалютаДокумента,
				СтруктураВалютаУпр.Курс,            СтруктураДокумента.Курс,
				СтруктураВалютаУпр.Кратность,       СтруктураДокумента.Кратность);
			Рез.Расходы = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(Выборка.Расходы,
				СтруктураДокумента.ВалютаУпрУчета,  СтруктураДокумента.ВалютаДокумента,
				СтруктураВалютаУпр.Курс,            СтруктураДокумента.Курс,
				СтруктураВалютаУпр.Кратность,       СтруктураДокумента.Кратность);
		КонецЕсли;
	КонецЕсли;
	
	Рез.ПрибыльПлан = Рез.ДоходыПлан - Рез.РасходыПлан;
	Рез.Прибыль = Рез.Доходы - Рез.Расходы;
	
	Возврат Рез;
КонецФункции

// Процедура формирует текст в информационной надписи об итогах документа.
//
// Параметры:
//  Нет.
//
&НаКлиенте
Процедура ОбновитьПодвалУслуги()
	IDСтрокиПотребности = "";
	Если ОтборСтрокПоПунктам Тогда
		ТекСтрока = Элементы.ПунктыНазначения.ТекущиеДанные;
		Если ТекСтрока <> Неопределено Тогда
			IDСтрокиПотребности = ТекСтрока.ID;
		КонецЕсли;
	КонецЕсли;
	
	ДопПараметры = Новый Структура("IDСтрокиПотребности", IDСтрокиПотребности);
	СтруктураДокумента = уатОбщегоНазначенияКлиентСервер.СтруктураДокумента(Объект, "уатПотребностьВПеревозке_уэ", ДопПараметры);
	Всего = уатОбщегоНазначенияТиповые.уатПолучитьСуммуДокументаСНДС(СтруктураДокумента, "Услуги");
	ВсегоНДС = уатОбщегоНазначенияТиповые.ПолучитьНДСДокумента(СтруктураДокумента, "Услуги");
	
	Если Объект.УчитыватьНДС Тогда 
		Если Объект.СуммаВключаетНДС Тогда 
			НадписьВсегоНДС = НСтр("en='VAT amount';ru='НДС в сумме'") + ":";
		Иначе 
			НадписьВсегоНДС = НСтр("en='VAT from above';ru='НДС сверху'") + ":";
		КонецЕсли;
		НадписьВсего = НСтр("en='Total including VAT';ru='Всего с НДС'");
		Элементы.СтраницыИтогов.ТекущаяСтраница = Элементы.ИтогоУчетНДС;
	Иначе 
		НадписьВсего = НСтр("en='Total';ru='Всего'");
		Элементы.СтраницыИтогов.ТекущаяСтраница = Элементы.ИтогоБезНДС;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Объект.ВалютаДокумента) Или Объект.ВалютаДокумента = мВалютаРегламентированногоУчета Тогда 
		НадписьКурс = "(1.0000)";
		Элементы.НадписьКурс.Видимость = Ложь;
		Элементы.НадписьКурс2.Видимость = Ложь;
	Иначе 
		НадписьКурс = "(" + Формат(
			?(Объект.КратностьВзаиморасчетов = 0, Объект.КурсВзаиморасчетов, Объект.КурсВзаиморасчетов/Объект.КратностьВзаиморасчетов),
			"ЧДЦ=4; ЧРД=.; ЧН=0.0000; ЧГ=0") + ")";
		Элементы.НадписьКурс.Видимость = Истина;
		Элементы.НадписьКурс2.Видимость = Истина;
	КонецЕсли;
	
	ОбновитьПодвалПрибыли(IDСтрокиПотребности);
КонецПроцедуры // ОбновитьПодвалУслуги()

&НаКлиенте
Процедура ОбновитьПредставлениеНДСвТЧ(ТекСтрокаТЧ = Неопределено)
	Для Каждого ТекСтрока Из Объект.Расходы Цикл 
		Если ТекСтрокаТЧ <> Неопределено И ТекСтрока <> ТекСтрокаТЧ Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекСтрока.УчитыватьНДС Тогда 
			Если ТекСтрока.СуммаВключаетНДС Тогда 
				ТекСтрока.УчитыватьНДСПредставление = НСтр("en='VAT amount';ru='НДС в сумме'");
			Иначе 
				ТекСтрока.УчитыватьНДСПредставление = НСтр("en='VAT from above';ru='НДС сверху'");
			КонецЕсли;
		Иначе 
			ТекСтрока.УчитыватьНДСПредставление = НСтр("en='Document excluding VAT';ru='Строка без НДС'");
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриИзмененииВалюты(ИмяТЧ)
	ТекСтрока = Элементы[ИмяТЧ].ТекущиеДанные;
	
	Если ТекСтрока.Валюта = ДанныеСтрокиУслуги.Валюта Тогда
		Возврат;
	КонецЕсли;
	
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ТекСтрока", ТекСтрока);
	ДопПараметры.Вставить("ИмяТЧ", ИмяТЧ);
	
	Если ТекСтрока.Цена = 0 И ТекСтрока.ЦенаПлан = 0 Тогда
		УслугиПриИзмененииВалютыЗавершение(КодВозвратаДиалога.Нет, ДопПараметры);
	Иначе
		Оповещ = Новый ОписаниеОповещения("УслугиПриИзмененииВалютыЗавершение", ЭтотОбъект, ДопПараметры);
		ПоказатьВопрос(Оповещ, "Изменилась валюта строки. Пересчитать цену и сумму по курсу?", РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриИзмененииВалютыЗавершение(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда //пересчет сумм в строке по курсу
		СтруктураКурсаПред = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ДанныеСтрокиУслуги.Валюта, Объект.ДатаКурса);
		СтруктураКурса = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ДопПараметры.ТекСтрока.Валюта, Объект.ДатаКурса);
				
		ДопПараметры.ТекСтрока.Цена = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ДопПараметры.ТекСтрока.Цена,
			ДанныеСтрокиУслуги.Валюта,
			ДопПараметры.ТекСтрока.Валюта,
			СтруктураКурсаПред.Курс,
			СтруктураКурса.Курс,
			СтруктураКурсаПред.Кратность,
			СтруктураКурса.Кратность);
		РассчитатьСуммуВСтрокеТабличнойЧасти(ДопПараметры.ТекСтрока);
		
		Если ДопПараметры.ИмяТЧ = "ПолучаемыеУслуги" Тогда
			РассчитатьСуммуНДС(ДопПараметры.ТекСтрока);
			РассчитатьСуммуВсегоВстрокеТЧ(ДопПараметры.ТекСтрока);
		Иначе
			РассчитатьСуммуНДС(ДопПараметры.ТекСтрока);
			РассчитатьСуммуВсегоВстрокеТЧ(ДопПараметры.ТекСтрока);
		КонецЕсли;
	КонецЕсли;
	
	Если ДопПараметры.ИмяТЧ = "Расходы" Тогда
		ОбновитьВсегоВТЧЗатраты();
	Иначе
		ОбновитьВсегоВТЧУслуги();
	КонецЕсли;
	
	РассчитатьСуммуДокумента();
	ОбновитьНадписьИтоги();
	
	ДанныеСтрокиУслуги.Валюта = ДопПараметры.ТекСтрока.Валюта;
	
	Если ДопПараметры.ИмяТЧ = "Услуги" Тогда
		ДопПараметры.ТекСтрока.РучнойВвод = Истина;
	КонецЕсли;
	
	Модифицированность = Истина;	
КонецПроцедуры

&НаКлиенте
Процедура ПолучателиУведомленийЗакрытиеФормы(Результат, ДопПараметры) Экспорт
	Если ТипЗнч(Результат) = Тип("ДанныеФормыКоллекция") Тогда
		Объект.ПолучателиУведомлений.Очистить();
		Для Каждого ТекСтрока Из Результат Цикл
			НоваяСтрока = Объект.ПолучателиУведомлений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		КонецЦикла;
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПолучитьПредставленияОтрезковПути()

	Если Объект.ДетализацияЗаказов = ПредопределенноеЗначение("Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам")
		Или Объект.ДетализацияЗаказов = ПредопределенноеЗначение("Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам") Тогда
		КоличествоГрузов = Объект.ГрузовойСостав.Количество();
	Иначе
		КоличествоГрузов = Объект.ТоварныйСостав.Количество();
	КонецЕсли;
	
	МассивОтрезков = уатОбщегоНазначения_проф.ПолучитьНачальныеКонечныеПунктыГрузов(
		Объект.ОтрезкиПути, КоличествоГрузов, ПромежуточныеПункты.Количество());

	Для Каждого ТекПредставление Из МассивОтрезков Цикл
		Если ТекПредставление.От > 0 И ТекПредставление.До > -1 Тогда
			ПредставлениеТекущегоОтрезка = уатОбщегоНазначения_проф.ПолучитьПредставлениеОтрезкаПути( 
				ПромежуточныеПункты[ТекПредставление.От-1].Пункт,
				ПромежуточныеПункты[ТекПредставление.До-1].Пункт
			);
		Иначе
			ПредставлениеТекущегоОтрезка = "";
		КонецЕсли;
		ТекПредставление.Вставить("Представление", ПредставлениеТекущегоОтрезка);
	КонецЦикла;
	
	Возврат МассивОтрезков;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьИзменениеОтрезкаПути(Элемент, ВыбранноеЗначение)
	
	Если Элемент <> Элементы.ТоварныйСостав И Элемент <> Элементы.ГрузовойСостав Тогда
		Возврат;
	КонецЕсли;
	
	// Удаление старых строк, связанных с текущим грузом, из ТЧ ОтрезкиПути
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	НомерСтрокиГруза = ТекущиеДанные.НомерСтроки;
	Сч = Объект.ОтрезкиПути.Количество();
	Пока Сч > 0 Цикл
		Сч = Сч-1;
		Если Объект.ОтрезкиПути[Сч].Груз = НомерСтрокиГруза Тогда
			Объект.ОтрезкиПути.Удалить(Сч);
		КонецЕсли;
	КонецЦикла;
	
	// Добавление новых строк, связанных с текущим грузом, в ТЧ ОтрезкиПути
	ПоложениеРазделителя = СтрНайти(ВыбранноеЗначение, " - ");
	Если ПоложениеРазделителя > 0 Тогда
		От = Число(Лев(ВыбранноеЗначение, ПоложениеРазделителя));
		До = Число(Прав(ВыбранноеЗначение, ПоложениеРазделителя));
		ПредНомерПункта = -1;
		ТекНомерПункта = -1;
		
		Для Сч = От По До Цикл
			Если ПромежуточныеПункты[Сч-1].ID <> ТекущиеДанные.ID Тогда
				Продолжить;
			КонецЕсли;
			
			ПредНомерПункта = ТекНомерПункта;
			ТекНомерПункта = Сч;
			Если ПредНомерПункта > 0 И ТекНомерПункта > 0 Тогда
				НоваяСтрока = Объект.ОтрезкиПути.Добавить();
				НоваяСтрока.ПунктОтправления = ПредНомерПункта;
				НоваяСтрока.ПунктНазначения = ТекНомерПункта;
				НоваяСтрока.Груз = НомерСтрокиГруза;
				НоваяСтрока.ID = Элементы.ПунктыНазначения.ТекущиеДанные.ID;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	УстановитьПредставленияОтрезковПути();

КонецПроцедуры

&НаСервере
Процедура УстановитьПредставленияОтрезковПути()
	
	Если Объект.ДетализацияЗаказов = ПредопределенноеЗначение("Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам")
		Или Объект.ДетализацияЗаказов = ПредопределенноеЗначение("Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам") Тогда
		ТаблицаГрузов = Объект.ГрузовойСостав
	Иначе
		ТаблицаГрузов = Объект.ТоварныйСостав;
	КонецЕсли;
	
	Если Объект.ОтрезкиПути.Количество() > 0 Тогда
		МассивПредставлений = ПолучитьПредставленияОтрезковПути();
		Для Сч = 0 По МассивПредставлений.Количество()-1 Цикл
			ТаблицаГрузов[Сч].ПредставлениеОтрезкаПути = МассивПредставлений[Сч].Представление;
		КонецЦикла;
	Иначе
		// Документ, в котором отрезки пути еще не заполнены, или документ, для которого не выполнены обработчики обновления.
		Для Каждого ТекСтрока Из ТаблицаГрузов Цикл
			ТекСтрока.ПредставлениеОтрезкаПути = ТекСтрока.ОтрезокПути;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьОписание()
	
	Для Каждого Пункт Из Объект.ПунктыНазначения Цикл
		
		Если Не ПустаяСтрока(Пункт.ОписаниеГруза) Тогда
			Продолжить;
		КонецЕсли;
		
		ТаблицаОписаний = Новый ТаблицаЗначений;
		ТаблицаОписаний.Колонки.Добавить("Описание");
		
		Если Объект.ДетализацияЗаказов = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам Тогда
			ТабличнаяЧастьДокумента = Объект.ТоварныйСостав.Выгрузить();
			ГрузовойСостав = Ложь;
		Иначе
			ТабличнаяЧастьДокумента = Объект.ГрузовойСостав.Выгрузить();
			ГрузовойСостав = Истина;
		КонецЕсли;
		
		МассивЗаписей = ТабличнаяЧастьДокумента.НайтиСтроки(Новый Структура("ID", Пункт.ID));
		
		Для Каждого Строка Из МассивЗаписей Цикл
			
			Если ГрузовойСостав Тогда
				ОписаниеСтроки = Строка.ОписаниеГруза;
				
				Если ПустаяСтрока(ОписаниеСтроки) Тогда
					ОписаниеСтроки = Строка.ГрузовоеМесто.Наименование;
				КонецЕсли;
				
			Иначе
				ОписаниеСтроки = Строка.Номенклатура.Наименование;
			КонецЕсли;
			
			Если Не ПустаяСтрока(ОписаниеСтроки) Тогда
				СтрокаОписания = ТаблицаОписаний.Добавить();
				СтрокаОписания.Описание = ОписаниеСтроки;
			КонецЕсли;
			
		КонецЦикла;
		
		ТаблицаОписаний.Свернуть("Описание");
		Описание = "";
		
		Для Каждого Строка Из ТаблицаОписаний Цикл
			
			Если ПустаяСтрока(Описание) Тогда
				Описание = Строка.Описание;
			Иначе
				Описание = Описание + ", " + Строка.Описание;
			КонецЕсли;
			
		КонецЦикла;
		
		Массив = Объект.ПунктыНазначения.НайтиСтроки(Новый Структура("ID", Пункт.ID));
		Массив[0].ОписаниеГруза = Описание;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборДатПоРасписаниюПослеВыбора(Результат, ДопПараметры) Экспорт
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	ТекСтрока = Элементы.ПунктыНазначения.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаполнитьДатыПоРасписанию(Результат, ТекСтрока);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьДатыПоРасписанию(ДанныеРасписания, ТекСтрока)
	ПустаяДата = Дата('00010101');
	// ТекСтрока - из таблицы ПунктыНазначения
	
	// Если данные по времени прибытия по расписанию не заполнены, то берем окно из пункта
	Если ДанныеРасписания.ВремяОтправленияС = ПустаяДата И ДанныеРасписания.ВремяОтправленияПо = ПустаяДата Тогда
		ВремяДоступности = уатОбщегоНазначения_проф.ПолучитьВремяДоступностиПункта(ТекСтрока.АдресОтправления, ТекСтрока.Грузоотправитель);
		ДанныеРасписания.ВремяОтправленияС  = ВремяДоступности.ВремяДоступностиС;
		Если ЗначениеЗаполнено(ВремяДоступности.ВремяДоступностиПо) Тогда
			ДанныеРасписания.ВремяОтправленияПо = ВремяДоступности.ВремяДоступностиПо;
		Иначе
			ДанныеРасписания.ВремяОтправленияПо = '00010101235900';
		КонецЕсли;
	КонецЕсли;
	Если ДанныеРасписания.ВремяПрибытияС = ПустаяДата И ДанныеРасписания.ВремяПрибытияПо = ПустаяДата Тогда
		ВремяДоступности = уатОбщегоНазначения_проф.ПолучитьВремяДоступностиПункта(ТекСтрока.АдресНазначения, ТекСтрока.Грузополучатель);
		ДанныеРасписания.ВремяПрибытияС  = ВремяДоступности.ВремяДоступностиС;
		Если ЗначениеЗаполнено(ВремяДоступности.ВремяДоступностиПо) Тогда
			ДанныеРасписания.ВремяПрибытияПо = ВремяДоступности.ВремяДоступностиПо;
		Иначе
			ДанныеРасписания.ВремяПрибытияПо = '00010101235900';
		КонецЕсли;
	КонецЕсли;
	
	ТекСтрока.ОтправлениеС    = ДанныеРасписания.ВремяОтправленияС;
	ТекСтрока.ОтправлениеПо   = ДанныеРасписания.ВремяОтправленияПо;
	ТекСтрока.ПрибытиеС       = ДанныеРасписания.ВремяПрибытияС;
	ТекСтрока.ПрибытиеПо      = ДанныеРасписания.ВремяПрибытияПо;
	ТекСтрока.ДатаОтправления = ДанныеРасписания.ДатаОтправления;
	ТекСтрока.ДатаПрибытия    = ДанныеРасписания.ДатаПрибытия;
	
	Если ТекСтрока.FTL <> ДанныеРасписания.FTL Тогда
		ТекСтрока.FTL = ДанныеРасписания.FTL;
		ПунктыНазначенияFTLПриИзменении(Неопределено);
		Если ТекСтрока.FTL И ЗначениеЗаполнено(ТекСтрока.Маршрут) Тогда
			// Заполнение таблицы пунктов по маршруту
			УстановитьДанныеПоМаршрутуСервер(ТекСтрока.ID);
			ПромежуточныеПунктыПриИзменении(Элементы.ПромежуточныеПункты);
		КонецЕсли;
	КонецЕсли;
	
	// Перезаполняем плановое время прибытия в таблице "Промежуточные пункты" по данным расписания.
	Если ТекСтрока.FTL И ЗначениеЗаполнено(ТекСтрока.Маршрут) Тогда
		ДанныеРасписания.Вставить("Маршрут", ТекСтрока.Маршрут);
		ТаблицаFTL = уатОбщегоНазначения_уэ.ПолучитьДанныеFTLЗаказаПоРасписанию(ДанныеРасписания);
		НайденныеСтроки = ПромежуточныеПункты.НайтиСтроки(Новый Структура("ID", ТекСтрока.ID));
		Для Сч = 0 По Мин(НайденныеСтроки.Количество(), ТаблицаFTL.Количество()-1) Цикл
			Если НайденныеСтроки[Сч].Пункт = ТаблицаFTL[Сч].Пункт Тогда
				НайденныеСтроки[Сч].ПрибытиеПлан = ТаблицаFTL[Сч].ПрибытиеПлан;
				НайденныеСтроки[Сч].УбытиеПлан = ТаблицаFTL[Сч].УбытиеПлан;
				НайденныеСтроки[Сч].ОкноС = ТаблицаFTL[Сч].ПрибытиеПлан;
				НайденныеСтроки[Сч].ОкноПо = ТаблицаFTL[Сч].УбытиеПлан;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТекСтрока.FTL Тогда
		// Заполнение по пунктам
		НайденныеСтроки = ПромежуточныеПункты.НайтиСтроки(Новый Структура("ID", ТекСтрока.ID));
		Для Сч = 1 По НайденныеСтроки.Количество()-2 Цикл
			НайденныеСтроки[Сч].ПрибытиеПлан = ПустаяДата;
			НайденныеСтроки[Сч].УбытиеПлан = ПустаяДата;
			НайденныеСтроки[Сч].ОкноС = ПустаяДата;
			НайденныеСтроки[Сч].ОкноПо = ПустаяДата;
		КонецЦикла;
		Если НайденныеСтроки.Количество() > 0 Тогда
			НайденныеСтроки[0].ПрибытиеПлан = ТекСтрока.ДатаОтправления + (ТекСтрока.ОтправлениеС - ПустаяДата);
			НайденныеСтроки[0].УбытиеПлан   = ТекСтрока.ДатаОтправления + (ТекСтрока.ОтправлениеПо - ПустаяДата);
			НайденныеСтроки[0].ОкноС        = ТекСтрока.ДатаОтправления + (ТекСтрока.ОтправлениеС - ПустаяДата);
			НайденныеСтроки[0].ОкноПо       = ТекСтрока.ДатаОтправления + (ТекСтрока.ОтправлениеПо - ПустаяДата);
		КонецЕсли;
		Если НайденныеСтроки.Количество() > 1 Тогда
			НайденныеСтроки[НайденныеСтроки.Количество()-1].ПрибытиеПлан = ТекСтрока.ДатаПрибытия + (ТекСтрока.ПрибытиеС - ПустаяДата);
			НайденныеСтроки[НайденныеСтроки.Количество()-1].УбытиеПлан   = ТекСтрока.ДатаПрибытия + (ТекСтрока.ПрибытиеПо - ПустаяДата);
			НайденныеСтроки[НайденныеСтроки.Количество()-1].ОкноС        = ТекСтрока.ДатаПрибытия + (ТекСтрока.ПрибытиеС - ПустаяДата);
			НайденныеСтроки[НайденныеСтроки.Количество()-1].ОкноПо       = ТекСтрока.ДатаПрибытия + (ТекСтрока.ПрибытиеПо - ПустаяДата);
		КонецЕсли;
	КонецЕсли;
	
	УстановитьСнятьОтборСтрокПоПунктам();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыГрузовыхМест()
	
	МассивГрузовыхМест = Новый Массив();
	Для Каждого СтрокаТЧ Из Объект.ГрузовойСостав Цикл 
		МассивГрузовыхМест.Добавить(СтрокаТЧ.ГрузовоеМесто);
	КонецЦикла;
	
	СоответвиеРеквизитов = ОбщегоНазначения.ЗначенияРеквизитовОбъектов(МассивГрузовыхМест,
		"УникальноеГрузовоеМесто");
	Для Каждого СтрокаТЧ Из Объект.ГрузовойСостав Цикл 
		ДанныеГМ = СоответвиеРеквизитов.Получить(СтрокаТЧ.ГрузовоеМесто);
		Если ДанныеГМ = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		СтрокаТЧ.УникальноеГрузовоеМесто = ДанныеГМ.УникальноеГрузовоеМесто;
		Если СтрокаТЧ.КоличествоМест = 0 Тогда
			СтрокаТЧ.КоличествоМест = 1;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПараметрыСтрокFTLПриКопировании()
	
	Для Сч = 0 По ЗначениеКопирования.ПунктыНазначения.Количество() - 1 Цикл
		
		ТекСтрокаПунктыПред = ЗначениеКопирования.ПунктыНазначения[Сч];
		ТекСтрокаПунктыНов  = Объект.ПунктыНазначения[Сч]; 
		
		Если ТекСтрокаПунктыПред.FTL Тогда
			
			СтрокиПромежуточныеПункты = ЗначениеКопирования.ПромежуточныеПункты.НайтиСтроки(Новый Структура("ID", ТекСтрокаПунктыПред.ID));
			
			Для Каждого СтрокаПромежуточныйПункт Из СтрокиПромежуточныеПункты Цикл
				НовСтрока = ПромежуточныеПункты.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрока, СтрокаПромежуточныйПункт);
				НовСтрока.ID = ТекСтрокаПунктыНов.ID;
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

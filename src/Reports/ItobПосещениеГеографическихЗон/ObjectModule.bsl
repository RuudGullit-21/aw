#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс
	 
// Настройки общей формы отчета подсистемы "Варианты отчетов".
//
// Параметры:
//   Форма - УправляемаяФорма - Форма отчета.
//   КлючВарианта - Строка - Имя предопределенного варианта отчета или уникальный идентификатор пользовательского.
//   Настройки - Структура - см. процедуру ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию.
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	
	Настройки.События.ПриСозданииНаСервере = Истина;

КонецПроцедуры

// Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//  
//  См. также:
//  "УправляемаяФорма.ПриСозданииНаСервере" в синтакс-помощнике.
//
// Параметры:
//  Форма				 - УправляемаяФорма	 - Форма отчета.
//  Отказ				 - Булево			 - Передается из параметров обработчика "как есть".
//  СтандартнаяОбработка - Булево			 - Передается из параметров обработчика "как есть".
//
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	// КЭШируем параметры формы.
	ПараметрыФормы = ItobОтчетыКлиентСерверПовтИсп.ПараметрыФормы(Строка(Форма.УникальныйИдентификатор));
	ПараметрыФормы.Очистить();
	Если Форма.Параметры.Свойство("СписокПараметров") Тогда
		ПараметрыФормы.Вставить("СписокПараметров", Форма.Параметры.СписокПараметров);
	КонецЕсли;
КонецПроцедуры

// Вызывается после перезаполнения панели настроек формы отчета.
//
// Параметры:
//  Форма				 - УправляемаяФорма	 - Форма отчета.
//  ПервоеОткрытиеФормы	 - Булево - Признак первого открытия формы
//
Процедура ИзменитьФормуПослеСозданияЭлементовНастроек(Форма, ПервоеОткрытиеФормы) Экспорт
	
	// Проверяем, открывается ли нужная форма.
	Если Не Форма.ТипФормыОтчета = ТипФормыОтчета.Основная Или СтрНайти(Форма.ИмяФормы, "ФормаОтчета") = 0 Тогда // Если используется общая форма из БСП проверяем на имя.
	    Возврат;
	КонецЕсли;
	
	// Обновляем внешний вид элемента "Начало периода".
	ЭлементФормы = ItobОтчетыКлиентСервер.НайтиЭлементФормыПоЗаголовку(Форма, "Начало периода");
	ЭлементФормы.КнопкаРегулирования = Истина;
	ЭлементФормы.УстановитьДействие("Регулирование", "Подключаемый_ПолеВвода_Регулирование");
	
	// Обновляем внешний вид элемента "Конец периода".
	ЭлементФормы = ItobОтчетыКлиентСервер.НайтиЭлементФормыПоЗаголовку(Форма, "Конец периода");
	ЭлементФормы.КнопкаРегулирования = Истина;
	ЭлементФормы.УстановитьДействие("Регулирование", "Подключаемый_ПолеВвода_Регулирование");

	Если НЕ ПервоеОткрытиеФормы Тогда	
		Возврат;
	КонецЕсли;	
	
	// Получаем из КЭШа параметры формы.
	ПараметрыФормы = ItobОтчетыКлиентСерверПовтИсп.ПараметрыФормы(Строка(Форма.УникальныйИдентификатор));
	
	// Форма открыта без параметров.
	Если ПараметрыФормы.Количество() > 0 Тогда
		ПараметрыДанных = ItobОтчетыКлиентСервер.ПолучитьПараметрыДанных(Форма);
		
		// Заполняем передаваемые параметры.
		Для Каждого Параметр Из ПараметрыФормы.СписокПараметров Цикл
		    Если Параметр.Представление = "НачПериода" Тогда
			    ItobОтчетыКлиентСервер.УстановитьЗначениеПараметра(ПараметрыДанных, "НачПериода", Новый СтандартнаяДатаНачала(Параметр.Значение), НСтр("ru = 'Начало периода'; en = 'Beginning of period'"));
		    ИначеЕсли Параметр.Представление = "КонПериода" Тогда
			    ItobОтчетыКлиентСервер.УстановитьЗначениеПараметра(ПараметрыДанных, "КонПериода", Новый СтандартнаяДатаНачала(Параметр.Значение), НСтр("ru = 'Конец периода'; en = 'End of period'"));
		    ИначеЕсли Параметр.Представление = "Объект" Тогда
			    ItobОтчетыКлиентСервер.УстановитьЗначениеПараметра(ПараметрыДанных, "Объект", Параметр.Значение, НСтр("ru = 'Объект'"));
			КонецЕсли; 
		КонецЦикла;
		
	КонецЕсли; 
	
КонецПроцедуры
	
#КонецОбласти

#Область ОбработчикиСобытий

// Процедура обработчик события "ПриКомпоновкеРезультата" объекта
//
Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	// Сбрасываем параметр стандартной обработки.
	СтандартнаяОбработка = Ложь;
	
	КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ОтчетПустой", Истина);
	
	ПараметрыДанных = КомпоновщикНастроек.ПолучитьНастройки().ПараметрыДанных;
	
	// Инициализируем параметры отчета.
	НачПериода = ItobОтчетыКлиентСервер.ПолучитьЗначениеПараметра(ПараметрыДанных, "НачПериода", НСтр("ru = 'Начало периода'; en = 'Beginning of period'")).Дата;
	КонПериода = ItobОтчетыКлиентСервер.ПолучитьЗначениеПараметра(ПараметрыДанных, "КонПериода", НСтр("ru = 'Конец периода'; en = 'End of period'")).Дата;
	Объект = ItobОтчетыКлиентСервер.ПолучитьЗначениеПараметра(ПараметрыДанных, "Объект", НСтр("ru = 'Объект'"));
	ГруппаГеографическихЗон = ItobОтчетыКлиентСервер.ПолучитьЗначениеПараметра(ПараметрыДанных, "ГруппаГеографическихЗон", НСтр("ru = 'Группа географических зон'"));
	
	// Формируем отчет по топливу.
	ТабличныйДокументРезультат = СформироватьОтчетПоПосещениюГеографическихЗон(
		НачПериода,
		КонПериода,
		Объект,
		ГруппаГеографическихЗон);
		
	// Если нужно добавить параметры табличному документу - делаем это здесь.
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ДокументРезультат.АвтоМасштаб = Истина;
	ДокументРезультат.ИмяПараметровПечати = "Отчет_ItobПосещениеГеографическихЗон_ИмяПараметровПечати";
	ДокументРезультат.Вывести(ТабличныйДокументРезультат)
				
КонецПроцедуры // ПриКомпоновкеРезультата()
	
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция выполняет формирование табличного документа отчета по посещению географических зон.
//
Функция СформироватьОтчетПоПосещениюГеографическихЗон(НачПериода, КонПериода, Объект, ГруппаГеографическихЗон)
	
	ТабДокумент = Новый ТабличныйДокумент;
	
	Макет = ПолучитьМакет("Макет");
	
	ТаблицаГеографическихЗон = ItobГеографическиеЗоныВызовСервера.ПолучитьГеографическиеЗоныПоГруппе(ГруппаГеографическихЗон);
	
	ТабИнтервалов = ItobОперативныйМониторинг.ПолучитьИнтервалыДвижения(Объект, НачПериода, КонПериода);
			
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка");
	ОбластьДетали = Макет.ПолучитьОбласть("Детали");
	ОбластьИтоги = Макет.ПолучитьОбласть("Итоги");
	
	ОбластьШапка.Параметры.ЗаголовокОтчета = НСтр("ru = 'Отчет по посещению географических зон за'")+" "+НачПериода+" - "+КонПериода;
	ОбластьШапка.Параметры.Объект = НСтр("ru = 'Объект мониторинга:'")+" "+Объект;
	
	ТабДокумент.Вывести(ОбластьШапка);
	
	// по расходу топлива
	Если ТипЗнч(Объект) = Тип("СправочникСсылка."+ItobВызовСервераПовтИсп.ПолучитьИмяОбъекта("Водители")) Тогда
		ТекКоэффициентРасхода = 1;	
	Иначе
		ТекНормаРег = ItobОбщегоНазначения.НормаРасходаОсновногоТоплива(Объект, КонПериода);
		ТекКоэффициентРасхода = ТекНормаРег.БазоваяНорма;				
	КонецЕсли;
	
	МассивСтрокДвижение = Новый Массив;	
	
	ТабДвиженияИСтоянки = Новый ТаблицаЗначений;
	ТабДвиженияИСтоянки.Колонки.Добавить("Состояние");
	ТабДвиженияИСтоянки.Колонки.Добавить("ВремяНач");
	ТабДвиженияИСтоянки.Колонки.Добавить("ВремяКон");
	ТабДвиженияИСтоянки.Колонки.Добавить("Пробег");
	ТабДвиженияИСтоянки.Колонки.Добавить("ГеографическаяЗона");
	
	Для НомерСтроки = 0 По ТабИнтервалов.Количество()-1 Цикл
	
		НовСтрокаТаб = ТабДвиженияИСтоянки.Добавить();			
		НовСтрокаТаб.Состояние = ТабИнтервалов[НомерСтроки].Состояние;
		НовСтрокаТаб.ВремяНач  = ТабИнтервалов[НомерСтроки].ВремяНач;
		НовСтрокаТаб.ВремяКон  = ТабИнтервалов[НомерСтроки].ВремяКон;
		НовСтрокаТаб.Пробег    = ТабИнтервалов[НомерСтроки].Пробег;
		НовСтрокаТаб.ГеографическаяЗона = ?(ТабИнтервалов[НомерСтроки].Состояние=Перечисления.ItobСостоянияТерминалов.Стоянка,
			НайтиГеографическуюЗону(ТаблицаГеографическихЗон, ТабИнтервалов[НомерСтроки].ДанныеТерминала[0].Широта,
			ТабИнтервалов[НомерСтроки].ДанныеТерминала[0].Долгота), Неопределено);
		
	КонецЦикла;
			
	ВремяВПути = 0;
	ПройденноеРасстояние = 0;
	ВремяСтоянокВПути = 0;
	НомерПП = 1;
	
	ИтогВремяВПути = 0;
	ИтогВремяСтоянкиВГеографическойЗоне = 0;
	ИтогПробег = 0;
	ИтогВремяСтоянокВПути = 0;
	
	Для Каждого СтрТабДС Из ТабДвиженияИСтоянки Цикл
				
		Если ЗначениеЗаполнено(СтрТабДС.ГеографическаяЗона) Тогда
			
			ОбластьДетали.Параметры.НомерПП    = НомерПП;
			ОбластьДетали.Параметры.Водитель   = ?(ТипЗнч(Объект) = 
				Тип("СправочникСсылка."+ItobВызовСервераПовтИсп.ПолучитьИмяОбъекта("ТранспортныеСредства")),
				                               	   Объект.Водитель, Объект);
			ОбластьДетали.Параметры.ГеографическаяЗона   = СтрТабДС.ГеографическаяЗона;
			ОбластьДетали.Параметры.ВремяНач   			 = СтрТабДС.ВремяНач;
			ОбластьДетали.Параметры.ВремяКон   			 = СтрТабДС.ВремяКон;
			ОбластьДетали.Параметры.ВремяВПути 			 = ItobОперативныйМониторингКлиентСервер.ПредставлениеВремени(ВремяВПути);			
			ОбластьДетали.Параметры.ВремяСтоянкиВГеографическойЗоне = ItobОперативныйМониторингКлиентСервер.ПредставлениеВремени
			                                                         (СтрТабДС.ВремяКон-СтрТабДС.ВремяНач);
			ОбластьДетали.Параметры.Пробег     = Окр(ПройденноеРасстояние,2)*1000;
			ОбластьДетали.Параметры.РасходТоплива  = Окр(ПройденноеРасстояние*ТекКоэффициентРасхода/100,2);
			
			ОбластьДетали.Параметры.Расшифровка = 
					Новый Структура("НачПериода,КонПериода,Объект",
						СтрТабДС.ВремяНач-ВремяВПути, СтрТабДС.ВремяКон,Объект);
			
			// РасходТоплива
			ОбластьДетали.Параметры.ВремяСтоянокВПути = ItobОперативныйМониторингКлиентСервер.ПредставлениеВремени(ВремяСтоянокВПути);
			ТабДокумент.Вывести(ОбластьДетали);
			
			ИтогВремяСтоянкиВГеографическойЗоне = ИтогВремяСтоянкиВГеографическойЗоне + (СтрТабДС.ВремяКон-СтрТабДС.ВремяНач);
			ИтогПробег = ИтогПробег + Окр(ПройденноеРасстояние,2)*1000;
			
			ВремяВПути = 0;
			ПройденноеРасстояние = 0;
			ВремяСтоянокВПути = 0;
			НомерПП = НомерПП + 1;			
			
		Иначе
			
			ТекПродолжительность = СтрТабДС.ВремяКон - СтрТабДС.ВремяНач;
			
			ВремяВПути = ВремяВПути + ТекПродолжительность;
			ПройденноеРасстояние = ПройденноеРасстояние + СтрТабДС.Пробег;
			Если СтрТабДС.Состояние = Перечисления.ItobСостоянияТерминалов.Стоянка Тогда
				ВремяСтоянокВПути = ТекПродолжительность;	
				ИтогВремяСтоянокВПути = ИтогВремяСтоянокВПути + ВремяСтоянокВПути;
				
			КонецЕсли;
			
			ИтогВремяВПути = ИтогВремяВПути + ТекПродолжительность;
			
		КонецЕсли;
		
	КонецЦикла;
			
	ОбластьИтоги.Параметры.ВремяВПути           			= ItobОперативныйМониторингКлиентСервер.ПредставлениеВремени(ИтогВремяВПути);
	ОбластьИтоги.Параметры.ВремяСтоянкиВГеографическойЗоне  = ItobОперативныйМониторингКлиентСервер.ПредставлениеВремени(ИтогВремяСтоянкиВГеографическойЗоне);
	ОбластьИтоги.Параметры.Пробег              				= ИтогПробег;
	ОбластьИтоги.Параметры.РасходТоплива        			= Окр(ИтогПробег/1000*ТекКоэффициентРасхода/100,2);
	ОбластьИтоги.Параметры.ВремяСтоянокВПути    			= ItobОперативныйМониторингКлиентСервер.ПредставлениеВремени(ИтогВремяСтоянокВПути);
	ТабДокумент.Вывести(ОбластьИтоги);	


	Возврат ТабДокумент;
	
КонецФункции

// Функция осуществляет поиск географической зоны, которая покрывает точку
//
Функция НайтиГеографическуюЗону(ТаблицаГеографическихЗон, Широта, Долгота)
			
	ТекЗоны = Новый ТаблицаЗначений;
	ТекЗоны.Колонки.Добавить("ГеографическаяЗона");
	ТекЗоны.Колонки.Добавить("Уровень");
	
	Для Каждого СтрЗоны Из ТаблицаГеографическихЗон Цикл
		ПараметрыЗоны = ItobГеографическиеЗоны.ПараметрыПроверяемойЗоны();
		ЗаполнитьЗначенияСвойств(ПараметрыЗоны, СтрЗоны);
		ПараметрыЗоны.ШиротыЗоны = СтрЗоны.МассивУ;
		ПараметрыЗоны.ДолготыЗоны = СтрЗоны.МассивХ; 
		Если ItobГеографическиеЗоны.ТочкаВГеозоне(Широта, Долгота, ПараметрыЗоны) Тогда
			ЗаполнитьЗначенияСвойств(ТекЗоны.Добавить(), СтрЗоны);				
		КонецЕсли;	
	КонецЦикла;
	
	ТекЗоны.Сортировать("Уровень Убыв");	
	Если ТекЗоны.Количество() > 0 Тогда
		Возврат ТекЗоны[0].ГеографическаяЗона;	
	Иначе
		Возврат Неопределено;		
	КонецЕсли;	

КонецФункции

#КонецОбласти 

#КонецЕсли

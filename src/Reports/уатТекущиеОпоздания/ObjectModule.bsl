#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДокументРезультат.Очистить();
	
	СхемаКомпоновкиДанных = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	НастройкиКомпоновщикаНастроек = КомпоновщикНастроек.ПолучитьНастройки();
	
	НастройкаОтображатьМаршрутныеЛистыБезОпозданий = НастройкиКомпоновщикаНастроек.ПараметрыДанных.Элементы.Найти("ОтображатьМаршрутныеЛистыБезОпозданий");
	Если НастройкаОтображатьМаршрутныеЛистыБезОпозданий <> Неопределено И НастройкаОтображатьМаршрутныеЛистыБезОпозданий.Использование Тогда
		ОтображатьМаршрутныеЛистыБезОпозданий = НастройкаОтображатьМаршрутныеЛистыБезОпозданий.Значение;
	Иначе
		ОтображатьМаршрутныеЛистыБезОпозданий = Ложь;
	КонецЕсли;
	
	НастройкаПериод = НастройкиКомпоновщикаНастроек.ПараметрыДанных.Элементы.Найти("Период");
	Если НастройкаПериод <> Неопределено И НастройкаПериод.Использование Тогда
		Период = НастройкаПериод.Значение;
	Иначе
		Период = Неопределено;
	КонецЕсли;
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ДанныеПоОпозданиям", ПолучитьИсториюОпозданий(Период, ОтображатьМаршрутныеЛистыБезОпозданий));
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки   = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновщикаНастроек, ДанныеРасшифровки);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ТекстЗапросаПоМаршрутнымЛистам(Период)
	
	ТекстЗапроса = "ВЫБРАТЬ
	|	уатТекущиеОпоздания.МаршрутныйЛист КАК МаршрутныйЛист,
	|	уатМаршрутныйЛист.ТС КАК ТС,
	|	уатМаршрутныйЛист.Водитель1 КАК Водитель,
	|	уатТекущиеОпоздания.Пункт КАК Пункт,
	|	уатМаршрутныйЛист.Контрагент КАК Перевозчик,
	|	уатТекущиеОпоздания.ПрибытиеПлан КАК ПрибытиеПлан,
	|	уатТекущиеОпоздания.ПрибытиеПрогноз КАК ПрибытиеПрогноз,
	|	ВЫБОР
	|		КОГДА уатТекущиеОпоздания.ПрибытиеПрогноз = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА 0
	|		ИНАЧЕ РАЗНОСТЬДАТ(уатТекущиеОпоздания.ПрибытиеПлан, уатТекущиеОпоздания.ПрибытиеПрогноз, МИНУТА)
	|	КОНЕЦ КАК ОпозданиеМинут,
	|	ВЫБОР
	|		КОГДА уатМаршрутныйЛистЗаказы.Выполнен
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Выполнен,
	|	уатМаршрутныйЛист.Организация КАК Организация,
	|	1 КАК КоличествоСтрок,
	|	0 КАК ОтклонениеОтВременногоОкнаМинут,
	|	ВЫБОР
	|		КОГДА НЕ уатЗаказГрузоотправителя.Ссылка ЕСТЬ NULL
	|				И уатМаршрутныйЛистЗаказы.ТипТочкиМаршрута = ЗНАЧЕНИЕ(Перечисление.уатТипыТочекМаршрута.Разгрузка)
	|			ТОГДА уатЗаказГрузоотправителя.ДоставкаС
	|		КОГДА НЕ уатЗаказГрузоотправителя.Ссылка ЕСТЬ NULL
	|				И уатМаршрутныйЛистЗаказы.ТипТочкиМаршрута = ЗНАЧЕНИЕ(Перечисление.уатТипыТочекМаршрута.Погрузка)
	|			ТОГДА уатЗаказГрузоотправителя.ОтправлениеС
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 1)
	|	КОНЕЦ КАК ОкноС,
	|	ВЫБОР
	|		КОГДА НЕ уатЗаказГрузоотправителя.Ссылка ЕСТЬ NULL
	|				И уатМаршрутныйЛистЗаказы.ТипТочкиМаршрута = ЗНАЧЕНИЕ(Перечисление.уатТипыТочекМаршрута.Разгрузка)
	|			ТОГДА уатЗаказГрузоотправителя.ДоставкаПо
	|		КОГДА НЕ уатЗаказГрузоотправителя.Ссылка ЕСТЬ NULL
	|				И уатМаршрутныйЛистЗаказы.ТипТочкиМаршрута = ЗНАЧЕНИЕ(Перечисление.уатТипыТочекМаршрута.Погрузка)
	|			ТОГДА уатЗаказГрузоотправителя.ОтправлениеПо
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 23, 59, 0)
	|	КОНЕЦ КАК ОкноПо,
	|	ЕСТЬNULL(уатЗаказГрузоотправителя.FTL, ЛОЖЬ) КАК FTL,
	|	уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя,
	|	уатМаршрутныйЛистЗаказы.ПрибытиеПлан КАК ПрибытиеПланМаршрутныйЛист
	|ИЗ
	|	РегистрСведений.уатТекущиеОпоздания КАК уатТекущиеОпоздания
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатМаршрутныйЛист КАК уатМаршрутныйЛист
	|		ПО уатТекущиеОпоздания.МаршрутныйЛист = уатМаршрутныйЛист.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатМаршрутныйЛист.Заказы КАК уатМаршрутныйЛистЗаказы
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	|			ПО уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя = уатЗаказГрузоотправителя.Ссылка
	|		ПО уатТекущиеОпоздания.МаршрутныйЛист = уатМаршрутныйЛистЗаказы.Ссылка
	|ГДЕ";
	Если ЗначениеЗаполнено(Период) Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	уатТекущиеОпоздания.ПрибытиеПлан МЕЖДУ &ДатаНачала И &ДатаОкончания
		|	И (уатТекущиеОпоздания.ВремяОпоздания > &ДопустимоеОпоздание
		|			ИЛИ &ОтображатьМаршрутныеЛистыБезОпозданий)";
	Иначе
		ТекстЗапроса = ТекстЗапроса + "
		|	(уатТекущиеОпоздания.ВремяОпоздания > &ДопустимоеОпоздание
		|			ИЛИ &ОтображатьМаршрутныеЛистыБезОпозданий)";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "
	|
	|СГРУППИРОВАТЬ ПО
	|	уатТекущиеОпоздания.МаршрутныйЛист,
	|	уатМаршрутныйЛист.Организация,
	|	уатМаршрутныйЛист.Водитель1,
	|	уатМаршрутныйЛист.ТС,
	|	уатТекущиеОпоздания.ПрибытиеПлан,
	|	уатТекущиеОпоздания.ПрибытиеПрогноз,
	|	уатТекущиеОпоздания.Пункт,
	|	уатМаршрутныйЛист.Контрагент,
	|	ВЫБОР
	|		КОГДА уатТекущиеОпоздания.ПрибытиеПрогноз = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
	|			ТОГДА 0
	|		ИНАЧЕ РАЗНОСТЬДАТ(уатТекущиеОпоздания.ПрибытиеПлан, уатТекущиеОпоздания.ПрибытиеПрогноз, МИНУТА)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ уатЗаказГрузоотправителя.Ссылка ЕСТЬ NULL
	|				И уатМаршрутныйЛистЗаказы.ТипТочкиМаршрута = ЗНАЧЕНИЕ(Перечисление.уатТипыТочекМаршрута.Разгрузка)
	|			ТОГДА уатЗаказГрузоотправителя.ДоставкаС
	|		КОГДА НЕ уатЗаказГрузоотправителя.Ссылка ЕСТЬ NULL
	|				И уатМаршрутныйЛистЗаказы.ТипТочкиМаршрута = ЗНАЧЕНИЕ(Перечисление.уатТипыТочекМаршрута.Погрузка)
	|			ТОГДА уатЗаказГрузоотправителя.ОтправлениеС
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 1)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ уатЗаказГрузоотправителя.Ссылка ЕСТЬ NULL
	|				И уатМаршрутныйЛистЗаказы.ТипТочкиМаршрута = ЗНАЧЕНИЕ(Перечисление.уатТипыТочекМаршрута.Разгрузка)
	|			ТОГДА уатЗаказГрузоотправителя.ДоставкаПо
	|		КОГДА НЕ уатЗаказГрузоотправителя.Ссылка ЕСТЬ NULL
	|				И уатМаршрутныйЛистЗаказы.ТипТочкиМаршрута = ЗНАЧЕНИЕ(Перечисление.уатТипыТочекМаршрута.Погрузка)
	|			ТОГДА уатЗаказГрузоотправителя.ОтправлениеПо
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 23, 59, 0)
	|	КОНЕЦ,
	|	ЕСТЬNULL(уатЗаказГрузоотправителя.FTL, ЛОЖЬ),
	|	ВЫБОР
	|		КОГДА уатМаршрутныйЛистЗаказы.Выполнен
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя,
	|	уатМаршрутныйЛистЗаказы.ПрибытиеПлан
	|ИТОГИ
	|	МАКСИМУМ(ТС),
	|	МАКСИМУМ(Водитель),
	|	МАКСИМУМ(Пункт),
	|	МАКСИМУМ(Перевозчик),
	|	МАКСИМУМ(ПрибытиеПлан),
	|	МАКСИМУМ(ПрибытиеПрогноз),
	|	МАКСИМУМ(ОпозданиеМинут),
	|	СУММА(Выполнен),
	|	МАКСИМУМ(Организация),
	|	СУММА(КоличествоСтрок),
	|	МАКСИМУМ(FTL)
	|ПО
	|	МаршрутныйЛист";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьИсториюОпозданий(Период, ОтображатьМаршрутныеЛистыБезОпозданий)
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапросаПоМаршрутнымЛистам(Период);
	Если ЗначениеЗаполнено(Период) Тогда
		ДатаНачала = Период.ДатаНачала;
		ДатаОкончания = Период.ДатаОкончания;
		Запрос.Параметры.Вставить("ДатаНачала", ДатаНачала);
		Запрос.Параметры.Вставить("ДатаОкончания", ДатаОкончания);
	КонецЕсли;
	Запрос.Параметры.Вставить("ОтображатьМаршрутныеЛистыБезОпозданий", ОтображатьМаршрутныеЛистыБезОпозданий);
	СекундВМинуте = 60;
	ДопустимоеОпоздание = уатОбщегоНазначения.уатВремяВЧЧ_ММ(Константы.уатДопустимоеОтклонениеОтВремениПрибытия.Получить() * СекундВМинуте);
	Запрос.Параметры.Вставить("ДопустимоеОпоздание", ДопустимоеОпоздание);
	
	ДеревоЗначений = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	Для Каждого ТекСтрокаМЛ Из ДеревоЗначений.Строки Цикл
		Если ТекСтрокаМЛ.FTL Тогда
			ПодставитьВременныеОкнаFTLЗаказов(ТекСтрокаМЛ.Строки);
		КонецЕсли;
		
		ОтклонениеОтВременногоОкнаМинут = 0;
		Для Каждого ТекСтрока Из ТекСтрокаМЛ.Строки Цикл
			Если ТекСтрока.ПрибытиеПлан <> ТекСтрока.ПрибытиеПланМаршрутныйЛист Тогда
				// Для каждого маршрутного листа учитываем только строки, соответствующие прогнозам об опозданиях. 
				// Остальные строки нужны были только для получения корректных временных окон по FTL заказам.
				Продолжить;
			ИначеЕсли ЗначениеЗаполнено(ТекСтрока.ПрибытиеПрогноз) И ТекСтрока.ОкноС > '00010101235959' И ТекСтрока.ОкноПо > '00010101235959' Тогда
				ОтклонениеОтВременногоОкнаМинут = ОтклонениеОтВременногоОкнаМинут 
					+ Макс(0, ТекСтрока.ОкноС - ТекСтрока.ПрибытиеПрогноз, ТекСтрока.ПрибытиеПрогноз - ТекСтрока.ОкноПо)/60;
			КонецЕсли;
		КонецЦикла;
		ТекСтрокаМЛ.ОтклонениеОтВременногоОкнаМинут = ОтклонениеОтВременногоОкнаМинут;
		ТекСтрокаМЛ.Строки.Очистить();
	КонецЦикла;	

	Возврат ДеревоЗначений;
	
КонецФункции

Процедура ПодставитьВременныеОкнаFTLЗаказов(Таблица)
	ЗаказыFTL = Новый Массив;
	Для Каждого ТекСтрока Из Таблица Цикл
		Если ТекСтрока.FTL И ЗаказыFTL.Найти(ТекСтрока.ЗаказГрузоотправителя) = Неопределено Тогда
			ЗаказыFTL.Добавить(ТекСтрока.ЗаказГрузоотправителя);
		КонецЕсли;
	КонецЦикла;
	
	НомераОбработанныхСтрокFTLЗаказов = Новый Соответствие;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	уатЗаказГрузоотправителяПромежуточныеПункты.Ссылка КАК ЗаказГрузоотправителя,
	|	уатЗаказГрузоотправителяПромежуточныеПункты.НомерСтроки КАК НомерСтроки,
	|	уатЗаказГрузоотправителяПромежуточныеПункты.Пункт КАК Пункт,
	|	уатЗаказГрузоотправителяПромежуточныеПункты.ОкноС КАК ОкноС,
	|	уатЗаказГрузоотправителяПромежуточныеПункты.ОкноПо КАК ОкноПо
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя.ПромежуточныеПункты КАК уатЗаказГрузоотправителяПромежуточныеПункты
	|ГДЕ
	|	уатЗаказГрузоотправителяПромежуточныеПункты.Ссылка В(&ЗаказыFTL)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаказГрузоотправителя,
	|	НомерСтроки");
	Запрос.УстановитьПараметр("ЗаказыFTL", ЗаказыFTL);
	ТаблицаЗаказы = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ТекСтрока Из Таблица Цикл
		Если Не ТекСтрока.FTL Тогда
			Продолжить;
		КонецЕсли;
		НомерОбработаннойСтрокиЗаказа = НомераОбработанныхСтрокFTLЗаказов.Получить(ТекСтрока.ЗаказГрузоотправителя);
		Если НомерОбработаннойСтрокиЗаказа = Неопределено Тогда
			НомерТекущейСтрокиЗаказа = 0;
		Иначе
			НомерТекущейСтрокиЗаказа = НомерОбработаннойСтрокиЗаказа + 1;
		КонецЕсли;
		
		Пока НомерТекущейСтрокиЗаказа < ТаблицаЗаказы.Количество() Цикл
			Если ТекСтрока.Пункт = ТаблицаЗаказы[НомерТекущейСтрокиЗаказа].Пункт Тогда
				ТекСтрока.ОкноС  = ТаблицаЗаказы[НомерТекущейСтрокиЗаказа].ОкноС;
				ТекСтрока.ОкноПо = ТаблицаЗаказы[НомерТекущейСтрокиЗаказа].ОкноПо;
				Прервать;
			Иначе
				НомерТекущейСтрокиЗаказа = НомерТекущейСтрокиЗаказа + 1;
			КонецЕсли;
		КонецЦикла;
		
		Если НомерТекущейСтрокиЗаказа <> НомерОбработаннойСтрокиЗаказа Тогда
			НомераОбработанныхСтрокFTLЗаказов.Вставить(ТекСтрока.ЗаказГрузоотправителя, НомерТекущейСтрокиЗаказа);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

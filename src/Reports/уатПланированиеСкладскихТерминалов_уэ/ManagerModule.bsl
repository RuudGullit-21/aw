#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

	
#Область ПрограммныйИнтерфейс

// Задает настройки размещения вариантов отчетов в панели отчетов.
// См. ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов().
//
// Параметры:
//   Настройки - Коллекция - Используется для описания настроек отчетов и вариантов
//       см. описание к ВариантыОтчетов.ДеревоНастроекВариантовОтчетовКонфигурации().
//   НастройкиОтчета - СтрокаДереваЗначений - Настройки размещения всех вариантов отчета.
//       См. ""Реквизиты для изменения"" функции ВариантыОтчетов.ДеревоНастроекВариантовОтчетовКонфигурации().
//
Процедура НастроитьВариантыОтчета(Настройки, НастройкиОтчета) Экспорт
	
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "Планирование складских терминалов");
	НастройкиВарианта.Описание = НСтр("ru='Отчет предназначен для проверки планирования времени операций погрузки и разгрузки на складах и складских терминалах по данным маршрутных листов.'");
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	уатЗащищенныеФункцииСервер.уатОтчетОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

Функция ПолучитьВремяУбытияПланПоСтрокеМЛ(МаршрутныйЛист, НомерСтроки) Экспорт
	
	ДеревоЗаказов = Новый ДеревоЗначений();
	ДеревоЗаказов.Колонки.Добавить("ПунктЗаказНоменклатура", Новый ОписаниеТипов("ДокументСсылка.уатЗаказГрузоотправителя, СправочникСсылка.уатПунктыНазначения, Строка"));
	ДеревоЗаказов.Колонки.Добавить("НомерСтроки",            Новый ОписаниеТипов("Число"));
	ДеревоЗаказов.Колонки.Добавить("ПрибытиеПлан",           Новый ОписаниеТипов("Дата"));
	ДеревоЗаказов.Колонки.Добавить("УбытиеПлан",             Новый ОписаниеТипов("Дата"));
	ДеревоЗаказов.Колонки.Добавить("Время",                  Новый ОписаниеТипов("Число"));
	ДеревоЗаказов.Колонки.Добавить("Стоянка",                Новый ОписаниеТипов("Число"));
	ДеревоЗаказов.Колонки.Добавить("СтоянкаИзПункта",        Новый ОписаниеТипов("Число"));
	
	СменилсяПункт = Ложь;
	ПредЗаказ     = Неопределено;
	ПредСтрока    = Неопределено;
	ПредПункт     = Ложь;
	Для Каждого ТекСтрока Из МаршрутныйЛист.Заказы Цикл
		//пункт
		Если ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка Тогда
			ТекПункт = ?(ЗначениеЗаполнено(ТекСтрока.Пункт), ТекСтрока.Пункт, ТекСтрока.ЗаказГрузоотправителя.АдресОтправления);
		ИначеЕсли ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка Тогда
			ТекПункт = ?(ЗначениеЗаполнено(ТекСтрока.Пункт), ТекСтрока.Пункт, ТекСтрока.ЗаказГрузоотправителя.АдресНазначения);
		Иначе
			ТекПункт = ТекСтрока.Пункт;
		КонецЕсли;
		
		Если ТекСтрока.ЗаказГрузоотправителя.Пустая() Или ТекСтрока.ТипТочкиМаршрута.Пустая() Тогда
			НовСтрокаПункт = ДеревоЗаказов.Строки.Добавить();
			НовСтрокаПункт.ПунктЗаказНоменклатура = ТекПункт;
			НовСтрокаПункт.НомерСтроки            = ТекСтрока.НомерСтроки;
			НовСтрокаПункт.Время                  = ТекСтрока.Время;
			НовСтрокаПункт.ПрибытиеПлан           = ТекСтрока.ПрибытиеПлан;
			
			ПредПункт     = ТекПункт;
			СменилсяПункт = Истина;
			
			Если ДеревоЗаказов.Строки.Индекс(НовСтрокаПункт) = 0 Тогда
				НовСтрокаПункт.УбытиеПлан = МаршрутныйЛист.ДатаИВремяОтправленияПлан;
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
		
		Если Не ТекПункт = ПредПункт Или СменилсяПункт Тогда
			НовСтрокаПункт = ДеревоЗаказов.Строки.Добавить();
			НовСтрокаПункт.ПунктЗаказНоменклатура = ТекПункт;
			НовСтрокаПункт.Время                  = ТекСтрока.Время;
			НовСтрокаПункт.ПрибытиеПлан           = ТекСтрока.ПрибытиеПлан;
			НовСтрокаПункт.СтоянкаИзПункта        = ТекСтрока.СтоянкаИзПункта;
			
			ПредПункт     = ТекПункт;
			СменилсяПункт = Истина;
			
			Если ДеревоЗаказов.Строки.Индекс(НовСтрокаПункт) = 0 Тогда
				НовСтрокаПункт.УбытиеПлан = МаршрутныйЛист.ДатаИВремяОтправленияПлан;
			КонецЕсли;
		КонецЕсли;
		
		//Заказ
		Если Не ТекСтрока.ЗаказГрузоотправителя = ПредЗаказ 
			Или (Не ПредСтрока = Неопределено И Не ТекСтрока.ТипТочкиМаршрута = ПредСтрока.ТипТочкиМаршрута) 
			Или СменилсяПункт Тогда
				НовСтрокаЗаказ = НовСтрокаПункт.Строки.Добавить();
				НовСтрокаЗаказ.ПунктЗаказНоменклатура = ТекСтрока.ЗаказГрузоотправителя;
				НовСтрокаЗаказ.Стоянка                = ТекСтрока.Стоянка;
				НовСтрокаЗаказ.СтоянкаИзПункта        = ТекСтрока.СтоянкаИзПункта;
				
				ПредЗаказ     = ТекСтрока.ЗаказГрузоотправителя;
				СменилсяПункт = Ложь;
		КонецЕсли;
		
		НовСтрока = НовСтрокаЗаказ.Строки.Добавить();
		НовСтрока.НомерСтроки = ТекСтрока.НомерСтроки;
		
		ПредСтрока = ТекСтрока;
	КонецЦикла;
	
	ПредВремяОтпр     = Неопределено;
	ПредПунктСтрока   = Неопределено;
	ОбщееВремяСтоянок = 0;
	Для Каждого ТекСтрокаПункт Из ДеревоЗаказов.Строки Цикл
		СуммарноеВремяСтоянки = 0;
		
		Для Каждого ТекСтрокаЗаказ Из ТекСтрокаПункт.Строки Цикл 
			СуммарноеВремяСтоянки = уатЗащищенныеФункцииСервер.СложитьВремя(СуммарноеВремяСтоянки, ТекСтрокаЗаказ.Стоянка);
		КонецЦикла;
		
		СуммарноеВремяСтоянки = уатЗащищенныеФункцииСервер.СложитьВремя(СуммарноеВремяСтоянки, ТекСтрокаПункт.СтоянкаИзПункта);
		
		ТекСтрокаПункт.Стоянка = СуммарноеВремяСтоянки;
		ОбщееВремяСтоянок      = уатЗащищенныеФункцииСервер.СложитьВремя(ОбщееВремяСтоянок, ТекСтрокаПункт.Стоянка);
		
		Если ДеревоЗаказов.Строки.Индекс(ТекСтрокаПункт) = 0 Тогда
			ТекСтрокаПункт.ПрибытиеПлан = уатЗащищенныеФункцииСервер.СложитьВремя(МаршрутныйЛист.ДатаИВремяОтправленияПлан, -СуммарноеВремяСтоянки);
			ТекСтрокаПункт.УбытиеПлан   = МаршрутныйЛист.ДатаИВремяОтправленияПлан;
			ПредВремяОтпр               = ТекСтрокаПункт.УбытиеПлан;
		Иначе 
			ТекСтрокаПункт.ПрибытиеПлан = уатЗащищенныеФункцииСервер.СложитьВремя(ПредВремяОтпр,               ПредПунктСтрока.Время);
			ТекСтрокаПункт.УбытиеПлан   = уатЗащищенныеФункцииСервер.СложитьВремя(ТекСтрокаПункт.ПрибытиеПлан, СуммарноеВремяСтоянки);
			ПредВремяОтпр               = ТекСтрокаПункт.УбытиеПлан;
		КонецЕсли;
		
		ПредПунктСтрока = ТекСтрокаПункт;
	КонецЦикла;
	
	ТабПлановыеДатыПострочно = Новый ТаблицаЗначений();
	ТабПлановыеДатыПострочно.Колонки.Добавить("НомерСтроки", Новый ОписаниеТипов("Число"));
	ТабПлановыеДатыПострочно.Колонки.Добавить("УбытиеПлан",  Новый ОписаниеТипов("Дата"));
	
	Для Каждого СтрокаПункта Из ДеревоЗаказов.Строки Цикл 
		Если СтрокаПункта.Строки.Количество() = 0 Тогда 
			НовСтрока = ТабПлановыеДатыПострочно.Добавить();
			НовСтрока.НомерСтроки = СтрокаПункта.НомерСтроки;
			НовСтрока.УбытиеПлан  = СтрокаПункта.УбытиеПлан;
			
			Продолжить;
		КонецЕсли;
		
		Для Каждого СтрокаЗаказа Из СтрокаПункта.Строки Цикл 
			Для Каждого СтрокаДетально Из СтрокаЗаказа.Строки Цикл 
				НовСтрока = ТабПлановыеДатыПострочно.Добавить();
				НовСтрока.НомерСтроки = СтрокаДетально.НомерСтроки;
				НовСтрока.УбытиеПлан  = СтрокаПункта.УбытиеПлан;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	НайдСтрока = ТабПлановыеДатыПострочно.Найти(НомерСтроки, "НомерСтроки");
	Если НайдСтрока = Неопределено Тогда 
		Возврат '00010101000000';
	Иначе 
		Возврат НайдСтрока.УбытиеПлан;
	КонецЕсли;
	
КонецФункции // ПолучитьВремяУбытияПланПоСтрокеМЛ()

#КонецОбласти


#КонецЕсли
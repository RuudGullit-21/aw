
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если НЕ Параметры.Свойство("Ключ") Тогда
		СообщениеПользователю = Новый СообщениеПользователю;
		СообщениеПользователю.Текст = НСтр("en='Report ""Register of documents"" can only be called from the form list of documents';ru='Отчет ""Реестр документов"" может быть вызван только из формы списка документов'");
		СообщениеПользователю.Сообщить();
		
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	СКомментарием = ХранилищеНастроекДанныхФорм.Загрузить("уатРеестрДокументов", "СКомментарием", Пользователи.АвторизованныйПользователь());
	УстановитьПривилегированныйРежим(Ложь);
	
	Если ТипЗнч(Параметры.Ключ) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(Список, Параметры.Ключ);
	Иначе
		Список.ОсновнаяТаблица = Параметры.Ключ;
		
		Если Параметры.Свойство("Отборы") Тогда 
			ЗаполнитьОтборыКомпоновщика(
				Список.КомпоновщикНастроек.Настройки.Отбор.Элементы,
				Параметры.Отборы
			);
		КонецЕсли;
	КонецЕсли;
	
	ВыводитьЗаголовок = Истина;
	ВыводитьПодписи = Истина;
	//БухгалтерскиеОтчетыВызовСервера.ПриСозданииНаСервере(ЭтотОбъект, Отказ, СтандартнаяОбработка);
	
	Если Параметры.Свойство("Заголовок") Тогда
		Заголовок = Параметры.Заголовок;
		ИмяСписка = Параметры.Заголовок;
	Иначе
		Заголовок = НСтр("en='Document list';ru='Список документов'");
		ИмяСписка = "Список документов";
	КонецЕсли;
	
	// Определим из отборов в динамическом списке
	ОтборВСписке = Список.КомпоновщикНастроек.ПолучитьНастройки().Отбор;
	
	Если Параметры.Свойство("Организация") Тогда
		Отчет.Организация = Параметры.Организация;
	Иначе
		МассивЭлементовОтбораОрганизация = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(ОтборВСписке, "Организация");
		ЭлементОтбораОрганизация = ?(МассивЭлементовОтбораОрганизация.Количество() > 0, МассивЭлементовОтбораОрганизация[0], Неопределено);
		Если ЭлементОтбораОрганизация <> Неопределено И ЭлементОтбораОрганизация.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
			Если ЭлементОтбораОрганизация.Использование Тогда
				Отчет.Организация = ЭлементОтбораОрганизация.ПравоеЗначение;
			Иначе
				Отчет.Организация = Справочники.Организации.ПустаяСсылка();
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	Если Отчет.Организация.Пустая() Тогда
		Отчет.Организация = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ПользователиКлиентСервер.АвторизованныйПользователь(),
			"ОсновнаяОрганизация");
	КонецЕсли;
	
	МассивЭлементовОтбораПоДате = ОбщегоНазначенияКлиентСервер.НайтиЭлементыИГруппыОтбора(ОтборВСписке, "ДатаОтбора");
	ЭлементОтбораПоДате = ?(МассивЭлементовОтбораПоДате.Количество() > 0, МассивЭлементовОтбораПоДате[0], Неопределено);
	ЕстьОтборПоДате = ЭлементОтбораПоДате <> Неопределено И ЭлементОтбораПоДате.Использование;
	
	Если ЕстьОтборПоДате Тогда
		//ДатаОтчета = ОбщегоНазначенияБП.ПолучитьРабочуюДату();
		ДатаОтчета = ОбщегоНазначения.ТекущаяДатаПользователя();
		Если ТипЗнч(ЭлементОтбораПоДате.ПравоеЗначение) = Тип("СтандартнаяДатаНачала") Тогда
			ДатаОтбора = ЭлементОтбораПоДате.ПравоеЗначение.Дата;
		Иначе
			ДатаОтбора = ЭлементОтбораПоДате.ПравоеЗначение;
		КонецЕсли;
		
		Отчет.НачалоПериода = НачалоДня(ДатаОтбора);
		Отчет.КонецПериода  = КонецДня(ДатаОтбора);
		
		Если ЭлементОтбораПоДате.ВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно Тогда
			Если НачалоДня(ДатаОтбора) < НачалоДня(ДатаОтчета) Тогда
				Отчет.КонецПериода = КонецМесяца(ДатаОтчета);
			Иначе
				Отчет.КонецПериода = КонецМесяца(ДатаОтбора);
			КонецЕсли;
		ИначеЕсли ЭлементОтбораПоДате.ВидСравнения = ВидСравненияКомпоновкиДанных.Больше Тогда
			Отчет.НачалоПериода = Отчет.КонецПериода + 1;
			Если Отчет.НачалоПериода < НачалоДня(ДатаОтчета) Тогда
				Отчет.КонецПериода = КонецМесяца(ДатаОтчета);
			Иначе
				Отчет.КонецПериода = КонецМесяца(Отчет.НачалоПериода);
			КонецЕсли;
		ИначеЕсли ЭлементОтбораПоДате.ВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда
			Если НачалоДня(ДатаОтбора) > НачалоДня(ДатаОтчета) Тогда
				Отчет.НачалоПериода = НачалоМесяца(ДатаОтчета);
			Иначе
				Отчет.НачалоПериода = НачалоМесяца(ДатаОтбора);
			КонецЕсли;
		ИначеЕсли ЭлементОтбораПоДате.ВидСравнения = ВидСравненияКомпоновкиДанных.Меньше Тогда
			Отчет.КонецПериода = Отчет.НачалоПериода - 1;
			Если Отчет.НачалоПериода > НачалоДня(ДатаОтчета) Тогда
				Отчет.НачалоПериода = НачалоМесяца(ДатаОтчета);
			Иначе
				Отчет.НачалоПериода = НачалоМесяца(Отчет.КонецПериода);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли Параметры.Свойство("Период") Тогда
		Отчет.НачалоПериода = Параметры.Период.ДатаНачала;
		Отчет.КонецПериода = Параметры.Период.ДатаОкончания;
		
		Если НЕ ЗначениеЗаполнено(Параметры.Период.ДатаНачала)
			И НЕ ЗначениеЗаполнено(Параметры.Период.ДатаОкончания) Тогда
			
			//Отчет.НачалоПериода = НачалоМесяца(ОбщегоНазначенияБП.ПолучитьРабочуюДату());
			//Отчет.КонецПериода  = КонецМесяца(ОбщегоНазначенияБП.ПолучитьРабочуюДату());
			Отчет.НачалоПериода = НачалоМесяца(ОбщегоНазначения.ТекущаяДатаПользователя());
			Отчет.КонецПериода  = КонецМесяца(ОбщегоНазначения.ТекущаяДатаПользователя());
						
		КонецЕсли;
	ИначеЕсли Параметры.Свойство("Дата") Тогда
		Отчет.НачалоПериода = НачалоДня(Параметры.Дата);
		Отчет.КонецПериода  = КонецДня(Параметры.Дата);
	КонецЕсли;
	
	Если Параметры.Свойство("ОтборПоТоварамУслугам") Тогда
		Элементы.ГруппаТоварыУслуги.Видимость = Истина;
		ЕстьОтборПоПервичнымДокументам = Истина;
		ЭтоРеализация = СтрНайти(Список.ОсновнаяТаблица, "Реализация") > 0;
		Если Не ЭтоРеализация Тогда 
			Элементы.ТоварыУслуги.СписокВыбора[1].Представление = НСтр("en='Only receipt of goods';ru='Только поступления товаров'");
			Элементы.ТоварыУслуги.СписокВыбора[2].Представление = НСтр("en='Only received services';ru='Только полученные услуги'");
		КонецЕсли;
	Иначе
		ЕстьОтборПоПервичнымДокументам = Ложь;
	КонецЕсли;
	
	ОписанияТиповВидовСубконто = Новый Структура;
	ОписанияТиповВидовСубконто.Вставить("Номенклатура", Тип("СправочникСсылка.Номенклатура"));
	ОписанияТиповВидовСубконто.Вставить("Склад", Тип("СправочникСсылка.Склады"));
	ОписанияТиповВидовСубконто.Вставить("Контрагент", Тип("СправочникСсылка.Контрагенты"));
	ОписанияТиповВидовСубконто.Вставить("ДоговорКонтрагента", Тип("СправочникСсылка.ДоговорыКонтрагентов"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ИнициализироватьОтчет();
	ПодключитьОбработчикОжидания("ФормированиеРеестраВФонеПриОткрытии", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Модифицированность = Ложь;
	
	Если Не ЗавершениеРаботы Тогда 
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
	ОчиститьСвязанныеОтборы();
	
КонецПроцедуры

&НаКлиенте
Процедура НачалоПериодаПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонецПериодаПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатПриАктивизацииОбласти(Элемент)
	Если ТипЗнч(Результат.ВыделенныеОбласти) = Тип("ВыделенныеОбластиТабличногоДокумента") Тогда
		ИнтервалОжидания = ?(ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая, 1, 0.2);
		ПодключитьОбработчикОжидания("Подключаемый_РезультатПриАктивизацииОбластиПодключаемый", ИнтервалОжидания, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СКомментариемПриИзменении(Элемент)
	Если НЕ ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	СохранитьНастройки();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыУслугиПриИзменении(Элемент)
	Если НЕ ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастроекНастройкиОтборПриИзменении(Элемент)
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
	//БухгалтерскиеОтчетыКлиент.ОтборыПриИзменении(ЭтотОбъект, Элемент, Ложь);
	ОтборыПриИзменении(Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастроекНастройкиОтборПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	
	//БухгалтерскиеОтчетыКлиент.ОтборыПередНачаломДобавления(ЭтотОбъект, Элемент, Отказ, Копирование, Родитель, Группа);
	Заглушка = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикНастроекНастройкиОтборПередНачаломИзменения(Элемент, Отказ)
	
	//БухгалтерскиеОтчетыКлиент.ОтборыПередНачаломИзменения(ЭтотОбъект, Элемент, Отказ);
	Заглушка = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборыПравоеЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СписокПараметров = Новый Структура;
	СписокПараметров.Вставить("Дата",               Отчет.КонецПериода);
	СписокПараметров.Вставить("Организация",        Отчет.Организация);
	СписокПараметров.Вставить("СчетУчета",          Неопределено);
	СписокПараметров.Вставить("Номенклатура",       Неопределено);
	СписокПараметров.Вставить("Склад",              Неопределено);
	СписокПараметров.Вставить("Контрагент",         Неопределено);
	СписокПараметров.Вставить("ДоговорКонтрагента", Неопределено);
	
	Если Элементы.Отборы.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Значение           = Неопределено;
	Поле               = Элементы.Отборы.ТекущиеДанные.ЛевоеЗначение;
	ВидСравненияСтрока = Элементы.Отборы.ТекущиеДанные.ВидСравнения;
	//ТипПоля            = БухгалтерскиеОтчетыКлиентСервер.ПолучитьСвойствоПоля(
	//	Отчет.КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора, Поле, "Тип");
	ТипПоля            = ПолучитьСвойствоПоля(Отчет.КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора, Поле, "Тип");
	
	Если ТипПоля = Неопределено Тогда
		// Не нашли поле отбора в доступных полях отбора.
		// Эта ситуация возможна, если в Динамическом списке установлена Основая таблица и при этом выставлена галочка Произвольный запрос.
		// При этом в тексте запроса изменен алиас у поля, который участвует в отборе.
		// Для обработки такого несоответствия, в модуле менджера данного списка необходимо создать (или добавить в существующую) экспортную функцию
		// ПолучитьДополнительныеРеквизитыДляРеестра() - из которой возврщать структуру с соответствием Ключ/Значение = Поле/Алиас
		Возврат;
	КонецЕсли;
	
	// Принятая в конфигурации обработка работает только для равенства/неравенства
	Если Строка(ВидСравненияСтрока) = Строка(ВидСравненияКомпоновкиДанных.Равно)
		ИЛИ Строка(ВидСравненияСтрока) = Строка(ВидСравненияКомпоновкиДанных.НеРавно) Тогда
		
		Для каждого СтрокаОтбора Из Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
			Если ТипЗнч(СтрокаОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
				Если ТипЗнч(СтрокаОтбора.ПравоеЗначение) <> Тип("ПолеКомпоновкиДанных") Тогда
					ЗначениеОтбора = ?(ТипЗнч(СтрокаОтбора.ПравоеЗначение) <> Тип("СписокЗначений"),
						СтрокаОтбора.ПравоеЗначение,
						СтрокаОтбора.ПравоеЗначение[0].Значение);
					
					//ОписаниеТиповПоля = БухгалтерскиеОтчетыКлиентСервер.ПолучитьСвойствоПоля(
					//	Отчет.КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора, СтрокаОтбора.ЛевоеЗначение, "Тип");
					ОписаниеТиповПоля = ПолучитьСвойствоПоля(
						Отчет.КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора, СтрокаОтбора.ЛевоеЗначение, "Тип");
					
					Если ОписаниеТиповПоля = Неопределено Тогда
						Возврат;
					КонецЕсли;
					
					ТипыПоля = ОписаниеТиповПоля.Типы();
					Если ТипыПоля.Количество() = 0 Тогда
						Возврат;
					ИначеЕсли ТипыПоля.Количество() > 1 Тогда
						ПолеОтбора      = ВернутьПолеОтбораКомпоновки(ЭтотОбъект, СтрокаОтбора.ЛевоеЗначение);
						ТипЗначенияПоля = ТипЗнч(ПолеОтбора.ПравоеЗначение);
						
						Если ПолеОтбора.ПравоеЗначение = Неопределено ИЛИ ТипЗначенияПоля = Тип("Неопределено") Тогда
							Возврат;
						КонецЕсли;
					Иначе
						ТипЗначенияПоля = ТипыПоля[0];
					КонецЕсли;
					
					Если ТипЗначенияПоля = ОписанияТиповВидовСубконто.Номенклатура Тогда
						СписокПараметров.Вставить("Номенклатура", ЗначениеОтбора);
					ИначеЕсли ТипЗначенияПоля = ОписанияТиповВидовСубконто.Склад Тогда
						СписокПараметров.Вставить("Склад", ЗначениеОтбора);
					ИначеЕсли ТипЗначенияПоля = ОписанияТиповВидовСубконто.Контрагент Тогда
						СписокПараметров.Вставить("Контрагент", ЗначениеОтбора);
					ИначеЕсли ТипЗначенияПоля = ОписанияТиповВидовСубконто.ДоговорКонтрагента Тогда
						СписокПараметров.Вставить("ДоговорКонтрагента", ЗначениеОтбора);
					КонецЕсли;
					
					Если СтрокаОтбора.ЛевоеЗначение = Элементы.Отборы.ТекущиеДанные.ЛевоеЗначение Тогда
						МассивТипов = Новый Массив;
						МассивТипов.Добавить(ТипЗначенияПоля);
						ТипПоля     = Новый ОписаниеТипов(МассивТипов);
						
						Значение    = ЗначениеОтбора;
					КонецЕсли;
					
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		//БухгалтерскиеОтчетыКлиент.ОтборОбработатьВыборЗначения(
		//	ЭтотОбъект, Элемент, СтандартнаяОбработка, Значение, СписокПараметров, ТипПоля);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Печать(Команда)
	
	ПодключитьОбработчикОжидания("ФормированиеРеестраВФонеПриОткрытии", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПечатьСразу(Команда)
	Результат.Напечатать(РежимИспользованияДиалогаПечати.НеИспользовать);
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериод(Команда)
	
	ДиалогРедактированияСтандартногоПериода = Новый ДиалогРедактированияСтандартногоПериода();
	ДиалогРедактированияСтандартногоПериода.Период.ДатаНачала = Отчет.НачалоПериода;
	ДиалогРедактированияСтандартногоПериода.Период.ДатаОкончания = Отчет.КонецПериода;
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект);
	
	ДиалогРедактированияСтандартногоПериода.Показать(ОписаниеОповещения);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьНастройки(Команда)
	Элементы.Сформировать.КнопкаПоУмолчанию = Истина;
	Элементы.РазделыОтчета.ТекущаяСтраница  = Элементы.Отчет;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьНастройки(Команда)
	Элементы.ПрименитьНастройки.КнопкаПоУмолчанию = Истина;
	Элементы.РазделыОтчета.ТекущаяСтраница = Элементы.НастройкиОтчета;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьОтборКомпоновщикаНастройкиДанных(ЭлементыОткуда, ЭлементыКуда, КорневойУровень = Истина)
	Для каждого ЭлементОтбора Из ЭлементыОткуда Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			НовыйЭлементОтбора = ЭлементыКуда.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(НовыйЭлементОтбора, ЭлементОтбора);
			ЗаполнитьОтборКомпоновщикаНастройкиДанных(ЭлементОтбора.Элементы, НовыйЭлементОтбора.Элементы, Ложь);
		ИначеЕсли ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Если КорневойУровень
				И (ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Дата")
				ИЛИ ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ДатаОтбора")
				ИЛИ ЭлементОтбора.ВидСравнения  = ВидСравненияКомпоновкиДанных.Равно
					И ЭлементОтбора.ЛевоеЗначение   = Новый ПолеКомпоновкиДанных("Организация")) Тогда
				
				Продолжить;
				
			КонецЕсли;
			
			НовыйЭлементОтбора = ЭлементыКуда.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(НовыйЭлементОтбора, ЭлементОтбора,, "ИдентификаторПользовательскойНастройки, Представление");
			НовыйЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.БыстрыйДоступ;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДоступныеПоляВыбора(ЭлементыОткуда, ЭлементыКуда)
	Для каждого ЭлементВыбора Из ЭлементыОткуда Цикл
		Если ЭлементВыбора.Папка Тогда
			Если ЕстьОтборПоПервичнымДокументам Тогда
				ЗаполнитьДоступныеПоляВыбора(ЭлементВыбора.Элементы, ЭлементыКуда);
			КонецЕсли;
		Иначе
			НовоеПолеВыбора = ЭлементыКуда.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(НовоеПолеВыбора, ЭлементВыбора);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПолучитьЗаголовокРеестра()
	Если ЗначениеЗаполнено(Отчет.НачалоПериода) Или ЗначениеЗаполнено(Отчет.КонецПериода) Тогда 
		//Возврат ИмяСписка + " " + БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(Отчет.НачалоПериода, Отчет.КонецПериода);
		Возврат ИмяСписка + " " + ПолучитьПредставлениеПериода(Отчет.НачалоПериода, Отчет.КонецПериода);
	Иначе
		Возврат ИмяСписка;
	КонецЕсли;
КонецФункции

&НаСервере
Функция ПолучитьТекстЗапроса(ИмяТаблицы)
	
	РезультатТекст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	Таб.Ссылка КАК Ссылка,
		|	Таб.Дата КАК Дата,
		|	Таб.Номер,
		|	Таб.Проведен КАК Проведен,
		|	Таб.ПометкаУдаления КАК ПометкаУдаления";
	
	ТипМетаданных = Лев(ИмяТаблицы,  СтрНайти(ИмяТаблицы, ".") - 1);
	ИмяОбъекта    = Прав(ИмяТаблицы, СтрДлина(ИмяТаблицы) - СтрНайти(ИмяТаблицы, "."));
	
	Если ТипМетаданных = "Документ" Тогда
		Менеджер = "Документы";
		РеквизитыСписка = Метаданные[Менеджер][ИмяОбъекта].Реквизиты;
		РезультатТекст  = РезультатТекст + ",
			|	Таб.ВерсияДанных";
	Иначе
		Менеджер = "ЖурналыДокументов";
		РеквизитыСписка = Метаданные[Менеджер][ИмяОбъекта].Графы;
		РезультатТекст  = РезультатТекст + ",
			|	Таб.Тип";
	КонецЕсли;
	
	Для каждого Реквизит Из РеквизитыСписка Цикл
		РезультатТекст = РезультатТекст + ",";
		РезультатТекст = РезультатТекст + "
			|	Таб." + Реквизит.Имя;
	КонецЦикла;
	
	Попытка
		ДополнительныеРеквизиты = ОбщегоНазначения.МенеджерОбъектаПоПолномуИмени(ИмяТаблицы).ПолучитьДополнительныеРеквизитыДляРеестра();
	Исключение
		ДополнительныеРеквизиты = Новый Структура;
	КонецПопытки;
	
	РегистрыДополнительныхСведений = Новый Массив;
	
	Для каждого КлючИЗначение Из ДополнительныеРеквизиты Цикл
		
		НазваниеРеквизита = "Таб." + КлючИЗначение.Ключ;
		Если ПустаяСтрока(КлючИЗначение.Значение) Тогда
			НазваниеРеквизита = НазваниеРеквизита + ",";
			ПолеРеквизита = "";
		ИначеЕсли СтрНайти(КлючИЗначение.Значение, "Таб.") > 0 Тогда
			ПолеРеквизита = КлючИЗначение.Значение + " КАК " + КлючИЗначение.Ключ;
		Иначе
			ПозицияТочки = СтрНайти(КлючИЗначение.Значение, ".");
			Если ПозицияТочки > 0 Тогда
				Если КлючИЗначение.Значение = "СтатусыДокументов.Статус" Тогда
					РегистрыДополнительныхСведений.Добавить("СтатусыДокументов");
					Если КлючИЗначение.Ключ = "Подписан" Тогда
						ПолеРеквизита =
						"ВЫБОР
						|		КОГДА СтатусыДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДокументовРеализации.Подписан)
						|			ТОГДА ИСТИНА
						|		ИНАЧЕ ЛОЖЬ
						|	КОНЕЦ КАК Подписан";
					ИначеЕсли КлючИЗначение.Ключ = "Статус" Тогда
						ПолеРеквизита = "ВЫРАЗИТЬ(ЕСТЬNULL(СтатусыДокументов.Статус, ЗНАЧЕНИЕ(Перечисление.СтатусОплатыСчета.НеОплачен)) КАК Перечисление.СтатусОплатыСчета) КАК Статус";
					ИначеЕсли КлючИЗначение.Ключ = "Оригинал" Тогда
						ПолеРеквизита =
						"ВЫБОР
						|		КОГДА СтатусыДокументов.Статус = ЗНАЧЕНИЕ(Перечисление.СтатусыДокументовПоступления.ОригиналПолучен)
						|			ТОГДА ИСТИНА
						|		ИНАЧЕ ЛОЖЬ
						|	КОНЕЦ КАК Оригинал";
					Иначе
						ПолеРеквизита = КлючИЗначение.Значение + " КАК " + КлючИЗначение.Ключ;
					КонецЕсли;
				КонецЕсли;
			Иначе
				ПолеРеквизита = ?(КлючИЗначение.Значение = "Неопределено", "", "Таб.")
					+ КлючИЗначение.Значение + " КАК " + КлючИЗначение.Ключ;
			КонецЕсли;
		КонецЕсли;
		
		Если СтрНайти(РезультатТекст, НазваниеРеквизита) = 0 Тогда
			РезультатТекст = РезультатТекст + ",
				|	" + ПолеРеквизита;
		Иначе
			РезультатТекст = СтрЗаменить(РезультатТекст, НазваниеРеквизита, ПолеРеквизита);
		КонецЕсли;
		
	КонецЦикла;
	
	РезультатТекст = СтрЗаменить(РезультатТекст, "###", "");
	
	РезультатТекст = РезультатТекст + "
		|ИЗ
		|	" + ТипМетаданных + "." + ИмяОбъекта + " КАК Таб";
	
	Если СтрНайти(РезультатТекст, "Таб.Организация") > 0 Тогда
		//РезультатТекст = СтрЗаменить(РезультатТекст, "Таб.НомерВходящегоДокумента",
		//	"ВЫБОР
		//	|		КОГДА ДанныеПервичныхДокументов.Номер ЕСТЬ NULL 
		//	|			ТОГДА """"
		//	|		ИНАЧЕ ДанныеПервичныхДокументов.Номер
		//	|	КОНЕЦ");
		//РезультатТекст = СтрЗаменить(РезультатТекст, "Таб.ДатаВходящегоДокумента",
		//	"ВЫБОР
		//	|		КОГДА ДанныеПервичныхДокументов.Дата ЕСТЬ NULL 
		//	|			ТОГДА """"
		//	|		ИНАЧЕ ДанныеПервичныхДокументов.Дата
		//	|	КОНЕЦ");
		//РезультатТекст = РезультатТекст + "
		//	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.ДанныеПервичныхДокументов КАК ДанныеПервичныхДокументов
		//	|		ПО Таб.Организация = ДанныеПервичныхДокументов.Организация
		//	|			И Таб.Ссылка = ДанныеПервичныхДокументов.Документ";
		Если РеквизитыСписка.Найти("НомерВходящегоДокумента") = Неопределено Тогда
			РезультатТекст = СтрЗаменить(РезультатТекст, "Таб.НомерВходящегоДокумента", """");
		КонецЕсли;
		Если РеквизитыСписка.Найти("НомерПоУчетуЗаказчика") = Неопределено Тогда
			РезультатТекст = СтрЗаменить(РезультатТекст, "Таб.НомерПоУчетуЗаказчика", """");
		Иначе
			РезультатТекст = СтрЗаменить(РезультатТекст, "Таб.НомерПоУчетуЗаказчика",
			"Таб.НомерПоУчетуЗаказчика КАК НомерВходящегоДокумента");
		КонецЕсли;
		
		Если РеквизитыСписка.Найти("ВходящийНомер") = Неопределено Тогда
			РезультатТекст = СтрЗаменить(РезультатТекст, "Таб.ВходящийНомер", """");
		Иначе
			РезультатТекст = СтрЗаменить(РезультатТекст, "Таб.ВходящийНомер",
			"Таб.ВходящийНомер КАК НомерВходящегоДокумента");
		КонецЕсли;

		Если РеквизитыСписка.Найти("ДатаВходящегоДокумента") = Неопределено Тогда
			РезультатТекст = СтрЗаменить(РезультатТекст, "Таб.ДатаВходящегоДокумента", """");
		КонецЕсли;
	КонецЕсли;
	
	//Для Каждого ИмяРегистра Из РегистрыДополнительныхСведений Цикл
	//	РезультатТекст = РезультатТекст + "
	//		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений." + ИмяРегистра + " КАК " + ИмяРегистра + "
	//		|		ПО Таб.Организация = " + ИмяРегистра + ".Организация
	//		|			И Таб.Ссылка = " + ИмяРегистра + ".Документ";
	//КонецЦикла;
	
	РезультатТекст = РезультатТекст + "
		|
		|УПОРЯДОЧИТЬ ПО
		|	Дата,
		|	Таб.Номер";
	
	Возврат РезультатТекст;
	
КонецФункции

&НаСервере
Процедура ИнициализироватьОтчет()
	
	Если ЗначениеЗаполнено(Список.ОсновнаяТаблица) Тогда
		ТекстЗапроса = ПолучитьТекстЗапроса(Список.ОсновнаяТаблица);
	Иначе
		ТекстЗапроса = Список.ТекстЗапроса;
	КонецЕсли;
	
	СКД = Новый СхемаКомпоновкиДанных;
	ИсточникДанных = СКД.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = "ИсточникДанных1";
	ИсточникДанных.ТипИсточникаДанных = "Local";
	
	НаборДанных = СКД.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.Имя = "НаборДанных1";
	НаборДанных.ИсточникДанных = ИсточникДанных.Имя;
	НаборДанных.Запрос = ТекстЗапроса;
	НаборДанных.АвтоЗаполнениеДоступныхПолей = Истина;
	СхемаКомпоновкиДанных = ПоместитьВоВременноеХранилище(СКД, СхемаКомпоновкиДанных);
	
	Отчет.КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	
	ПоляВыбора = Отчет.КомпоновщикНастроек.Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ЗаполнитьДоступныеПоляВыбора(Отчет.КомпоновщикНастроек.Настройки.ДоступныеПоляОтбора.Элементы, ПоляВыбора.Выбор.Элементы);
	
	ВсеНастройкиСписка = Список.КомпоновщикНастроек.ПолучитьНастройки();
	Если ВсеНастройкиСписка.Отбор.Элементы.Количество() > 0 Тогда
		ЗаполнитьОтборКомпоновщикаНастройкиДанных(ВсеНастройкиСписка.Отбор.Элементы, Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы);
	ИначеЕсли Список.Отбор.Элементы.Количество() > 0 Тогда
		ЗаполнитьОтборКомпоновщикаНастройкиДанных(Список.Отбор.Элементы, Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура НапечататьРеестр()
	
	Результат.Очистить();
	Макет = Отчеты.уатРеестрДокументов.ПолучитьМакет("Макет");
	Если СКомментарием Тогда
		ОбластьОбластьЗаголовкаТЧ = Макет.ПолучитьОбласть("ОбластьЗаголовкаТЧСКомментарием");
		ОбластьОбластьСтрокаТЧ    = Макет.ПолучитьОбласть("ОбластьСтрокаТЧСКомментарием");
		ОбластьИтого              = Макет.ПолучитьОбласть("ИтогоСКомментарием");
		ОбластьИтогоПервая        = Макет.ПолучитьОбласть("ИтогоПерваяСтрокаСКомментарием");
		ОбластьИтогоСредняя       = Макет.ПолучитьОбласть("ИтогоСредняяСтрокаСКомментарием");
		ОбластьИтогоПоследняя     = Макет.ПолучитьОбласть("ИтогоПоследняяСтрокаСКомментарием");
		ОбластьИтогоПустая        = Макет.ПолучитьОбласть("ПустаяСтрокаИтогоСКомментарием");
	Иначе
		ОбластьОбластьЗаголовкаТЧ = Макет.ПолучитьОбласть("ОбластьЗаголовкаТЧ");
		ОбластьОбластьСтрокаТЧ    = Макет.ПолучитьОбласть("ОбластьСтрокаТЧ");
		ОбластьИтого              = Макет.ПолучитьОбласть("Итого");
		ОбластьИтогоПервая        = Макет.ПолучитьОбласть("ИтогоПерваяСтрока");
		ОбластьИтогоСредняя       = Макет.ПолучитьОбласть("ИтогоСредняяСтрока");
		ОбластьИтогоПоследняя     = Макет.ПолучитьОбласть("ИтогоПоследняяСтрока");
		ОбластьИтогоПустая        = Макет.ПолучитьОбласть("ПустаяСтрокаИтого");
	КонецЕсли;
	
	ОбластьОтветственный          = Макет.ПолучитьОбласть("Ответственный");
	
	МассивДляПроверкиВывода = Новый Массив;
	МассивДляПроверкиВывода.Добавить(ОбластьОбластьСтрокаТЧ);
	МассивДляПроверкиВывода.Добавить(ОбластьИтого);
	Если ВыводитьПодписи Тогда
		МассивДляПроверкиВывода.Добавить(ОбластьОтветственный);
	КонецЕсли;
	
	Результат.АвтоМасштаб = Истина;
	Результат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	Результат.КлючПараметровПечати = "ПАРАМЕТРЫ_ПЕЧАТИ_РеестрДокументов";
	
	Если ВыводитьЗаголовок Тогда
		ОбластьШапка = Макет.ПолучитьОбласть("ОбластьЗаголовокРеестра");
		ОбластьОтбор = Макет.ПолучитьОбласть("ОписаниеНастроек");
		
		ОбластьШапка.Параметры.РеестрДокументов = ПолучитьЗаголовокРеестра();
		Если ЗначениеЗаполнено(Отчет.Организация) Тогда
			СписокТребуемыхПараметров	= "НаименованиеДляПечатныхФорм";
			СведенияОбОбъекте			= уатОбщегоНазначенияСервер.СведенияОЮрФизЛице(Отчет.Организация);
			ОбластьШапка.Параметры.Организация	= уатОбщегоНазначенияТиповыеСервер.ОписаниеОрганизации(СведенияОбОбъекте, СписокТребуемыхПараметров);
		КонецЕсли;
		Результат.Вывести(ОбластьШапка);
		
		Если ЕстьОтборПоПервичнымДокументам Тогда
			ОбластьОписаниеТоварыУслуги = Макет.ПолучитьОбласть("ОписаниеТоварыУслуги");
			Если ТоварыУслуги = 0 Тогда
				ОбластьОписаниеТоварыУслуги.Параметры.ОписаниеТоварыУслуги     = НСтр("en='All documents';ru='Все документы'");
			ИначеЕсли ТоварыУслуги = 1 Тогда
				Если ЭтоРеализация Тогда
					ОбластьОписаниеТоварыУслуги.Параметры.ОписаниеТоварыУслуги = НСтр("en='Only sale of goods';ru='Только реализации товаров'");
				Иначе
					ОбластьОписаниеТоварыУслуги.Параметры.ОписаниеТоварыУслуги = НСтр("en='Only receipt of goods';ru='Только поступления товаров'");
				КонецЕсли;
			ИначеЕсли ТоварыУслуги = 2 Тогда
				Если ЭтоРеализация Тогда
					ОбластьОписаниеТоварыУслуги.Параметры.ОписаниеТоварыУслуги = НСтр("en='Only services';ru='Только оказания услуг'");
				Иначе
					ОбластьОписаниеТоварыУслуги.Параметры.ОписаниеТоварыУслуги = НСтр("en='Only received services';ru='Только полученные услуги'");
				КонецЕсли;
			КонецЕсли;
			Результат.Вывести(ОбластьОписаниеТоварыУслуги);
		КонецЕсли;
		
		ТекстОтбор = Строка(Отчет.КомпоновщикНастроек.Настройки.Отбор);
		Если НЕ ПустаяСтрока(ТекстОтбор) Тогда
			ОбластьОтбор.Параметры.ИмяНастроекОтчета = НСтр("en='Filter:';ru='Отбор:'");
			ОбластьОтбор.Параметры.ОписаниеНастроекОтчета = ТекстОтбор;
			Результат.Вывести(ОбластьОтбор);
		КонецЕсли;
	КонецЕсли;
	
	Результат.Вывести(ОбластьОбластьЗаголовкаТЧ);
	
	СоответствиеВалют = Новый Соответствие;
	ИтоговаяТаблицаЗначений = ПолучитьИзВременногоХранилища(АдресВоВременномХранилище);
	Если ИтоговаяТаблицаЗначений = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Для каждого ИнформацияДляРеестра Из ИтоговаяТаблицаЗначений Цикл
		СуммаДляДобавки = ИнформацияДляРеестра.СуммаДок;
		Если ЗначениеЗаполнено(СуммаДляДобавки) 
			И СуммаДляДобавки > 0
			И ЗначениеЗаполнено(ИнформацияДляРеестра.Валюта) Тогда
			СтараяСумма = СоответствиеВалют.Получить(ИнформацияДляРеестра.Валюта);
			Если ЗначениеЗаполнено(СтараяСумма) Тогда 
				СоответствиеВалют.Вставить(ИнформацияДляРеестра.Валюта, СуммаДляДобавки + СтараяСумма);
			Иначе
				СоответствиеВалют.Вставить(ИнформацияДляРеестра.Валюта, СуммаДляДобавки);
			КонецЕсли;
		КонецЕсли;
		
		Если МассивДляПроверкиВывода.Количество() - СоответствиеВалют.Количество() < 2 Тогда
			МассивДляПроверкиВывода.Добавить(ОбластьИтого);
		КонецЕсли;
		
		Если НЕ Результат.ПроверитьВывод(МассивДляПроверкиВывода) Тогда
			Результат.Вывести(ОбластьИтогоПустая);
			Результат.ВывестиГоризонтальныйРазделительСтраниц();
			Результат.Вывести(ОбластьОбластьЗаголовкаТЧ);
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(ОбластьОбластьСтрокаТЧ.Параметры, ИнформацияДляРеестра);
		Результат.Вывести(ОбластьОбластьСтрокаТЧ);
		
	КонецЦикла;
	
	КоличествоЭлементовСоответствия = СоответствиеВалют.Количество();
	Если КоличествоЭлементовСоответствия = 0 Тогда 
		Результат.Вывести(ОбластьИтогоПустая);
	Иначе 
		ТекущийНомер = 1;
		Для каждого ЭлементСоответствия Из СоответствиеВалют Цикл
			Если КоличествоЭлементовСоответствия = 1 Тогда
				ОбластьИтого.Параметры.СуммаИтого  = ЭлементСоответствия.Значение;
				ОбластьИтого.Параметры.ВалютаИтого = ЭлементСоответствия.Ключ;
				Результат.Вывести(ОбластьИтого);
				Прервать;
			ИначеЕсли ТекущийНомер = 1 Тогда
				ОбластьИтогоПервая.Параметры.СуммаИтого  = ЭлементСоответствия.Значение;
				ОбластьИтогоПервая.Параметры.ВалютаИтого = ЭлементСоответствия.Ключ;
				Результат.Вывести(ОбластьИтогоПервая);
			ИначеЕсли ТекущийНомер = КоличествоЭлементовСоответствия Тогда
				ОбластьИтогоПоследняя.Параметры.СуммаИтого  = ЭлементСоответствия.Значение;
				ОбластьИтогоПоследняя.Параметры.ВалютаИтого = ЭлементСоответствия.Ключ;
				Результат.Вывести(ОбластьИтогоПоследняя);
			Иначе
				ОбластьИтогоСредняя.Параметры.СуммаИтого  = ЭлементСоответствия.Значение;
				ОбластьИтогоСредняя.Параметры.ВалютаИтого = ЭлементСоответствия.Ключ;
				Результат.Вывести(ОбластьИтогоСредняя);
			КонецЕсли;
			ТекущийНомер = ТекущийНомер + 1;
		КонецЦикла;
	КонецЕсли;
	
	Если ВыводитьПодписи Тогда
		Если ЗначениеЗаполнено(Отчет.Организация) Тогда
			Если ЗначениеЗаполнено(Отчет.КонецПериода) Тогда
				ПериодОтветственных = Отчет.КонецПериода;
			Иначе
				ПериодОтветственных = ТекущаяДата();
			КонецЕсли;
			
			//РеквизитыОтветственныхЛиц = ОтветственныеЛицаБП.ОтветственныеЛица(Отчет.Организация, ПериодОтветственных);
			//ОбластьОтветственный.Параметры.Должность = РеквизитыОтветственныхЛиц["ОтветственныйЗаБухгалтерскиеРегистрыДолжностьПредставление"];
			//ОбластьОтветственный.Параметры.РасшифровкаПодписи = РеквизитыОтветственныхЛиц["ОтветственныйЗаБухгалтерскиеРегистрыПредставление"];
			
			РеквизитыОтветственныхЛиц = уатОбщегоНазначенияТиповые.уатОтветственныеЛицаОрганизаций(Отчет.Организация, ПериодОтветственных);
			ОбластьОтветственный.Параметры.Должность = РеквизитыОтветственныхЛиц["РуководительДолжность"];
			ОбластьОтветственный.Параметры.РасшифровкаПодписи = РеквизитыОтветственныхЛиц["Руководитель"];
		КонецЕсли;
		Результат.Вывести(ОбластьОтветственный);
	КонецЕсли;
	
	Результат.ОбластьПечати = Результат.Область();
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьПараметрыОтчета()
	
	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("НачалоПериода",                  Отчет.НачалоПериода);
	ПараметрыОтчета.Вставить("КонецПериода",                   Отчет.КонецПериода);
	ПараметрыОтчета.Вставить("Организация",                    Отчет.Организация);
	ПараметрыОтчета.Вставить("СхемаКомпоновкиДанных",          ПолучитьИзВременногоХранилища(СхемаКомпоновкиДанных));
	ПараметрыОтчета.Вставить("НастройкиКомпоновкиДанных",      Отчет.КомпоновщикНастроек.ПолучитьНастройки());
	//ПараметрыОтчета.Вставить("ИдентификаторОтчета",            БухгалтерскиеОтчетыКлиентСервер.ПолучитьИдентификаторОбъекта(ЭтотОбъект));
	ПараметрыОтчета.Вставить("ИдентификаторОтчета",            СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ИмяФормы, ".")[1]);
	ПараметрыОтчета.Вставить("ТоварыУслуги",                   ТоварыУслуги);
	ПараметрыОтчета.Вставить("ЕстьОтборПоПервичнымДокументам", ЕстьОтборПоПервичнымДокументам);
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.НачалоПериода) Тогда
		НовыйЭлементОтбора = ПараметрыОтчета.НастройкиКомпоновкиДанных.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
		НовыйЭлементОтбора.Использование  = Истина;
		НовыйЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Дата");
		НовыйЭлементОтбора.ПравоеЗначение = НачалоДня(ПараметрыОтчета.НачалоПериода);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.КонецПериода) Тогда
		НовыйЭлементОтбора = ПараметрыОтчета.НастройкиКомпоновкиДанных.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
		НовыйЭлементОтбора.Использование  = Истина;
		НовыйЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Дата");
		НовыйЭлементОтбора.ПравоеЗначение = КонецДня(ПараметрыОтчета.КонецПериода);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ПараметрыОтчета.Организация) Тогда
		НовыйЭлементОтбора = ПараметрыОтчета.НастройкиКомпоновкиДанных.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		НовыйЭлементОтбора.Использование  = Истина;
		НовыйЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("Организация");
		НовыйЭлементОтбора.ПравоеЗначение = ПараметрыОтчета.Организация;
	КонецЕсли;
	
	Возврат ПараметрыОтчета;
	
КонецФункции

&НаСервере
Функция СформироватьНаСервере()
	
	ИБФайловая = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	ДлительныеОперации.ОтменитьВыполнениеЗадания(УИДЗаданиеФормированиеРеестра);
	УИДЗаданиеФормированиеРеестра = Неопределено;
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
	ПараметрыДлительногоЗадания = ПодготовитьПараметрыОтчета();
	
	Если ИБФайловая Тогда
		ТЗРеестр = Отчеты.уатРеестрДокументов.СформироватьТаблицуДокументов(ПараметрыДлительногоЗадания);
		АдресВоВременномХранилище = ПоместитьВоВременноеХранилище(ТЗРеестр, ЭтотОбъект.УникальныйИдентификатор);
		РезультатВыполнения = Новый Структура("ЗаданиеВыполнено", Истина);
	Иначе
		РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			"Отчеты.уатРеестрДокументов.СформироватьТаблицуДокументовВФоне",
			ПараметрыДлительногоЗадания,
			НСтр("en='Formation of documents registry';ru='Формирование реестра документов'"));
		АдресВоВременномХранилище     = РезультатВыполнения.АдресХранилища;
		УИДЗаданиеФормированиеРеестра = РезультатВыполнения.ИдентификаторЗадания;
	КонецЕсли;
	
	Элементы.Сформировать.КнопкаПоУмолчанию = Истина;
	Элементы.РазделыОтчета.ТекущаяСтраница = Элементы.Отчет;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		НапечататьРеестр();
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаКлиенте
Процедура ФормированиеРеестраВФоне()
	
	РезультатВыполнения = СформироватьНаСервере();
		
	Если НЕ РезультатВыполнения.ЗаданиеВыполнено Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ЗаданиеВыполнено(УИДЗаданиеФормированиеРеестра) Тогда
			НапечататьРеестр();
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания",
				ПараметрыОбработчикаОжидания.ТекущийИнтервал,
				Истина);
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьСвязанныеОтборы()
	
	ЭлементыОтбора = Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы;
	
	Для каждого ЭлементОтбора Из ЭлементыОтбора Цикл 
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			Если ЗначениеЗаполнено(ЭлементОтбора.ПравоеЗначение)
				И Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(ЭлементОтбора.ПравоеЗначение))
				И ТипЗнч(ЭлементОтбора.ПравоеЗначение.Владелец) = Тип("СправочникСсылка.Организации")
				И ЭлементОтбора.ПравоеЗначение.Владелец <> Отчет.Организация
				Тогда
				
				ЭлементОтбора.Использование  = Ложь;
				ЭлементОтбора.ПравоеЗначение = Неопределено;
				
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере()
	
	//ПолеСумма = БухгалтерскиеОтчетыВызовСервера.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
	//	Результат, КэшВыделеннойОбласти);
		
	Сумма = 0;
	Для Каждого КлючИЗначение Из КэшВыделеннойОбласти Цикл
		СтруктураАдресВыделеннойОбласти = КлючИЗначение.Значение;
		Для ИндексСтрока = СтруктураАдресВыделеннойОбласти.Верх По СтруктураАдресВыделеннойОбласти.Низ Цикл
			Для ИндексКолонка = СтруктураАдресВыделеннойОбласти.Лево По СтруктураАдресВыделеннойОбласти.Право Цикл
				Попытка
					Ячейка = Результат.Область(ИндексСтрока, ИндексКолонка, ИндексСтрока, ИндексКолонка);
					Если Ячейка.Видимость = Истина Тогда
						Если Ячейка.СодержитЗначение И ТипЗнч(Ячейка.Значение) = Тип("Число") Тогда
							Сумма = Сумма + Ячейка.Значение;
						ИначеЕсли ЗначениеЗаполнено(Ячейка.Текст) Тогда
							Сумма = Сумма + Число(СтрЗаменить(Ячейка.Текст, " ", ""));
						КонецЕсли;
					КонецЕсли;
				Исключение
				КонецПопытки;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	КэшВыделеннойОбласти.Вставить("Сумма", Сумма);
	
	ПолеСумма = Сумма;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_РезультатПриАктивизацииОбластиПодключаемый()
	
	НеобходимоВычислятьНаСервере = Ложь;
	
	//БухгалтерскиеОтчетыКлиент.ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(
	//	ПолеСумма, Результат, КэшВыделеннойОбласти, НеобходимоВычислятьНаСервере);
		
	ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(ПолеСумма, Результат, КэшВыделеннойОбласти, НеобходимоВычислятьНаСервере);
	
	Если НеобходимоВычислятьНаСервере Тогда
		ВычислитьСуммуВыделенныхЯчеекТабличногоДокументаВКонтекстеНаСервере();
	КонецЕсли;
	
	ОтключитьОбработчикОжидания("Подключаемый_РезультатПриАктивизацииОбластиПодключаемый");
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ВернутьПолеОтбораКомпоновки(Форма, Знач ЛевоеЗначение)
	
	Для каждого ЭлементОтбора Из Форма.Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если ЭлементОтбора.ЛевоеЗначение = ЛевоеЗначение Тогда
			Возврат ЭлементОтбора;
		КонецЕсли;
	КонецЦикла;
	
КонецФункции

&НаКлиенте
Процедура ФормированиеРеестраВФонеПриОткрытии()
	
	Если Год(Отчет.НачалоПериода) > 3999 ИЛИ Год(Отчет.КонецПериода) > 3999 Тогда
		ТекстНСТР = НСтр("en='In the period of report, you cannot use dates more than 3999!';ru='В периоде отчета нельзя использовать даты больше 3999 года!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		Возврат;
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
	ПодключитьОбработчикОжидания("ФормированиеРеестраВФоне", 0.1, Истина);
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()
	УстановитьПривилегированныйРежим(Истина);
	ХранилищеНастроекДанныхФорм.Сохранить("уатРеестрДокументов", "СКомментарием", СКомментарием, Пользователи.АвторизованныйПользователь());
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьИмяФормы(Ссылка)
	Возврат "Документ." + Ссылка.Метаданные().Имя + ".ФормаОбъекта";
КонецФункции

&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)
#Если ВебКлиент Тогда
	ПараметрыОткрытия = Новый Структура("Ключ", Расшифровка);
	ОткрытьФорму(ПолучитьИмяФормы(Расшифровка), ПараметрыОткрытия, ЭтотОбъект);
#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Отчет.НачалоПериода = РезультатВыбора.ДатаНачала;
	Отчет.КонецПериода  = РезультатВыбора.ДатаОкончания;
	
	Если НЕ ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСвойствоПоля(ЭлементСтруктура, Поле, Свойство = "Заголовок")
	
	Если ТипЗнч(ЭлементСтруктура) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
		Коллекция = ЭлементСтруктура.Настройки.ДоступныеПоляВыбора;
	Иначе
		Коллекция = ЭлементСтруктура;
	КонецЕсли;
	
	ПолеСтрокой = Строка(Поле);
	ПозицияКвадратнойСкобки = СтрНайти(ПолеСтрокой, "[");
	Окончание = "";
	Если ПозицияКвадратнойСкобки > 0 Тогда
		Окончание = Сред(ПолеСтрокой, ПозицияКвадратнойСкобки);
		ПолеСтрокой = Лев(ПолеСтрокой, ПозицияКвадратнойСкобки - 2);
	КонецЕсли;
	
	МассивСтрок = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивПодстрок(ПолеСтрокой, ".");
	
	Если Не ПустаяСтрока(Окончание) Тогда
		МассивСтрок.Добавить(Окончание);
	КонецЕсли;
	
	ДоступныеПоля = Коллекция.Элементы;
	ПолеПоиска = "";
	Для Индекс = 0 По МассивСтрок.Количество() - 1 Цикл
		ПолеПоиска = ПолеПоиска + ?(Индекс = 0, "", ".") + МассивСтрок[Индекс];
		ДоступноеПоле = ДоступныеПоля.Найти(ПолеПоиска);
		Если ДоступноеПоле <> Неопределено Тогда
			ДоступныеПоля = ДоступноеПоле.Элементы;
		КонецЕсли;
	КонецЦикла;
	
	Если ДоступноеПоле <> Неопределено Тогда
		Если Свойство = "ДоступноеПоле" Тогда
			Рез = ДоступноеПоле;
		Иначе
			Рез = ДоступноеПоле[Свойство]; 
		КонецЕсли;
	Иначе
		Рез = Неопределено;
	КонецЕсли;
	
	Возврат Рез;
	
КонецФункции

&НаКлиенте
Процедура ОтборыПриИзменении(ЕстьРеквизитПодразделение = Истина)
	
	Для Каждого ЭлементОтбора Из Отчет.КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") И ЭлементОтбора.Использование Тогда
			Если ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Организация") Тогда				
				Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда 
					Отчет.Организация = ЭлементОтбора.ПравоеЗначение;	
				Иначе
					Отчет.Организация = Неопределено;	
				КонецЕсли; 
				
			ИначеЕсли ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Подразделение") И ЕстьРеквизитПодразделение Тогда
				Если ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии Тогда 
					Отчет.Подразделение = ЭлементОтбора.ПравоеЗначение;
				Иначе
					Отчет.Подразделение = Неопределено;
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция НеобходимоОбновитьСумму(Результат, КэшВыделеннойОбласти)
	Перем СтруктураАдресВыделеннойОбласти;
	
	ВыделенныеОбласти    = Результат.ВыделенныеОбласти;
	КоличествоВыделенных = ВыделенныеОбласти.Количество();
	
	Если КоличествоВыделенных = 0 Тогда
		КэшВыделеннойОбласти = Новый Структура();
		Возврат Истина;
	КонецЕсли;
	
	ВозвращаемоеЗначение = Ложь;
	Если ТипЗнч(КэшВыделеннойОбласти) <> Тип("Структура") Тогда
		КэшВыделеннойОбласти = Новый Структура();
		ВозвращаемоеЗначение = Истина;
	ИначеЕсли ВыделенныеОбласти.Количество() <> КэшВыделеннойОбласти.Количество() Тогда
		КэшВыделеннойОбласти = Новый Структура();
		ВозвращаемоеЗначение = Истина;
	Иначе
		Для ИндексОбласти = 0 По КоличествоВыделенных - 1 Цикл
			ВыделеннаяОбласть = ВыделенныеОбласти[ИндексОбласти];
			ИмяОбласти = СтрЗаменить(ВыделеннаяОбласть.Имя, ":", "_");
			КэшВыделеннойОбласти.Свойство(ИмяОбласти, СтруктураАдресВыделеннойОбласти);
			
			// не нашли нужную область в кэше, поэтому переинициализируем кэш
			Если ТипЗнч(СтруктураАдресВыделеннойОбласти) <> Тип("Структура") Тогда
				КэшВыделеннойОбласти = Новый Структура();
				ВозвращаемоеЗначение = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Для ИндексОбласти = 0 По КоличествоВыделенных - 1 Цикл
		ВыделеннаяОбласть = ВыделенныеОбласти[ИндексОбласти];
		ИмяОбласти = СтрЗаменить(ВыделеннаяОбласть.Имя, ":", "_");
		
		Если ТипЗнч(ВыделеннаяОбласть) <> Тип("ОбластьЯчеекТабличногоДокумента") Тогда
			СтруктураАдресВыделеннойОбласти = Новый Структура("Верх, Низ, Лево, Право", 0, 0, 0, 0);
			КэшВыделеннойОбласти.Вставить(ИмяОбласти, СтруктураАдресВыделеннойОбласти);
			ВозвращаемоеЗначение = Истина;
			Продолжить;
		КонецЕсли;
		
		КэшВыделеннойОбласти.Свойство(ИмяОбласти, СтруктураАдресВыделеннойОбласти);
		Если ТипЗнч(СтруктураАдресВыделеннойОбласти) <> Тип("Структура") Тогда
			СтруктураАдресВыделеннойОбласти = Новый Структура("Верх, Низ, Лево, Право", 0, 0, 0, 0);
			КэшВыделеннойОбласти.Вставить(ИмяОбласти, СтруктураАдресВыделеннойОбласти);
			ВозвращаемоеЗначение = Истина;
		КонецЕсли;
		
		Если СтруктураАдресВыделеннойОбласти.Верх <> ВыделеннаяОбласть.Верх
			ИЛИ СтруктураАдресВыделеннойОбласти.Низ <> ВыделеннаяОбласть.Низ
			ИЛИ СтруктураАдресВыделеннойОбласти.Лево <> ВыделеннаяОбласть.Лево
			ИЛИ СтруктураАдресВыделеннойОбласти.Право <> ВыделеннаяОбласть.Право Тогда
				СтруктураАдресВыделеннойОбласти = Новый Структура("Верх, Низ, Лево, Право",
					ВыделеннаяОбласть.Верх, ВыделеннаяОбласть.Низ, ВыделеннаяОбласть.Лево, ВыделеннаяОбласть.Право);
				КэшВыделеннойОбласти.Вставить(ИмяОбласти, СтруктураАдресВыделеннойОбласти);
				ВозвращаемоеЗначение = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ВозвращаемоеЗначение;
	
КонецФункции

&НаКлиенте
Процедура ВычислитьСуммуВыделенныхЯчеекТабличногоДокумента(ПолеСумма, Результат, КэшВыделеннойОбласти, НеобходимоВычислятьНаСервере)
	
	Если НеобходимоОбновитьСумму(Результат, КэшВыделеннойОбласти) Тогда
		ПолеСумма = 0;
		КоличествоВыделенныхОбластей = КэшВыделеннойОбласти.Количество();
		Если КоличествоВыделенныхОбластей = 0      // Ничего не выделено
			ИЛИ КэшВыделеннойОбласти.Свойство("T") // Выделен весь табличный документ (Ctrl+A)
			Тогда
			КэшВыделеннойОбласти.Вставить("Сумма", 0);
		ИначеЕсли КоличествоВыделенныхОбластей = 1 Тогда
			// Если выделено небольшое количество ячеек, то получим сумму на клиенте
			Для каждого КлючИЗначение Из КэшВыделеннойОбласти Цикл
				СтруктураАдресВыделеннойОбласти = КлючИЗначение.Значение;
			КонецЦикла;
			
			РазмерОбластиПоВертикали   = СтруктураАдресВыделеннойОбласти.Низ   - СтруктураАдресВыделеннойОбласти.Верх;
			РазмерОбластиПоГоризонтали = СтруктураАдресВыделеннойОбласти.Право - СтруктураАдресВыделеннойОбласти.Лево;
			
			// В некоторых отчетах показатели (да и аналитика на которую может встать пользователь
			// выводятся в "объединенных" ячейках - не желательно в этом случае делать серверный вызов. 
			// Выделенная область из 10 ячеек закрывает все такие случае и скорее всего всегда будет доступна на клиенте.
			// Максимум, может быть сделан один неявный серверный вызов
			ВычислитьНаКлиенте = (РазмерОбластиПоВертикали + РазмерОбластиПоГоризонтали) < 12;
			Если ВычислитьНаКлиенте Тогда
				СуммаВЯчейках = 0;
				Для ИндексСтрока = СтруктураАдресВыделеннойОбласти.Верх По СтруктураАдресВыделеннойОбласти.Низ Цикл
					Для ИндексКолонка = СтруктураАдресВыделеннойОбласти.Лево По СтруктураАдресВыделеннойОбласти.Право Цикл
						Попытка
							Ячейка = Результат.Область(ИндексСтрока, ИндексКолонка, ИндексСтрока, ИндексКолонка);
							Если Ячейка.Видимость = Истина Тогда
								Если Ячейка.СодержитЗначение И ТипЗнч(Ячейка.Значение) = Тип("Число") Тогда
									СуммаВЯчейках = СуммаВЯчейках + Ячейка.Значение;
								ИначеЕсли ЗначениеЗаполнено(Ячейка.Текст) Тогда
									ЧислоВЯчейке  = Вычислить("Число(СтрЗаменить(Ячейка.Текст, Символ(32), Символ(0)))");
									СуммаВЯчейках = СуммаВЯчейках + ЧислоВЯчейке;
								КонецЕсли;
							КонецЕсли;
						Исключение
						КонецПопытки;
					КонецЦикла;
				КонецЦикла;
				
				ПолеСумма = СуммаВЯчейках;
				КэшВыделеннойОбласти.Вставить("Сумма", ПолеСумма);
			Иначе
				// Если ячеек много, то лучше вычислим сумму ячеек на сервере за один вызов,
				// т.к. неявных серверных вызовов может быть гораздо больше
				НеобходимоВычислятьНаСервере = Истина;
			КонецЕсли;
		Иначе
			// Вычислим сумму ячеек на сервере
			НеобходимоВычислятьНаСервере = Истина;
		КонецЕсли;
	Иначе	
		ПолеСумма = КэшВыделеннойОбласти.Сумма;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПредставлениеПериода(НачалоПериода = '00010101', КонецПериода = '00010101', ТолькоДаты  = Ложь) 
	
	ТекстПериод = "";
	
	Если ЗначениеЗаполнено(КонецПериода) Тогда 
		Если КонецПериода >= НачалоПериода Тогда
			ТекстПериод = ?(ТолькоДаты, "", " " + НСтр("en='for';ru='за'") + " ") + ПредставлениеПериода(НачалоДня(НачалоПериода), КонецДня(КонецПериода), "ФП = Истина");
		Иначе
			ТекстПериод = "";
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(НачалоПериода) И Не ЗначениеЗаполнено(КонецПериода) Тогда
		ТекстПериод = ?(ТолькоДаты, "", " " + НСтр("en='for';ru='за'") + " ") + ПредставлениеПериода(НачалоДня(НачалоПериода), КонецДня(Дата(3999, 11, 11)), "ФП = Истина");
		ТекстПериод = СтрЗаменить(ТекстПериод, Сред(ТекстПериод, СтрНайти(ТекстПериод, " - ")), " - ...");
	КонецЕсли;
	
	Возврат ТекстПериод;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьОтборыКомпоновщика(КоллекцияОтборов, ДобавляемыеОтборы)
	
	Для Каждого ТекОтбор Из ДобавляемыеОтборы Цикл 
		Если ТипЗнч(ТекОтбор) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда 
			ГруппаОтбора = КоллекцияОтборов.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(ГруппаОтбора, ТекОтбор);
			ЗаполнитьОтборыКомпоновщика(ГруппаОтбора.Элементы, ТекОтбор.Элементы);
		Иначе 
			ЭлементОтбора = КоллекцияОтборов.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(ЭлементОтбора, ТекОтбор);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

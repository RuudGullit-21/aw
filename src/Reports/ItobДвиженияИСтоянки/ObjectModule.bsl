#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область Переменные

Перем мТЗ_КэшПараметровВыработки;

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Настройки общей формы отчета подсистемы "Варианты отчетов".
//
// Параметры:
//   Форма - УправляемаяФорма - Форма отчета.
//   КлючВарианта - Строка - Имя предопределенного варианта отчета или уникальный идентификатор пользовательского.
//   Настройки - Структура - см. ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию возвращаемое значение.
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	
	Настройки.События.ПриОпределенииПараметровВыбора = Истина;
	Настройки.Печать.ПолеСверху = 5;
	Настройки.Печать.ПолеСлева = 5;
	Настройки.Печать.ПолеСнизу = 5;
	Настройки.Печать.ПолеСправа = 5;
	Настройки.ФормироватьСразу = Ложь;
	
	Настройки.События.ПриСозданииНаСервере = Истина;

КонецПроцедуры

// Вызывается в форме отчета перед выводом настройки.
//
// Параметры:
//	Форма - УправляемаяФорма, Неопределено - Форма отчета.
//  СвойстваНастройки - Структура - см. ФормаОтчетаПереопределяемый.ПриОпределенииПараметровВыбора().
//
Процедура ПриОпределенииПараметровВыбора(Форма, СвойстваНастройки) Экспорт
	Если СвойстваНастройки.ОписаниеТипов.СодержитТип(Тип("СправочникСсылка.Пользователи")) Тогда
		СвойстваНастройки.ОграничиватьВыборУказаннымиЗначениями = Истина;
		СвойстваНастройки.ЗначенияДляВыбора.Очистить();
		СвойстваНастройки.ЗапросЗначенийВыбора.Текст =
			"ВЫБРАТЬ Ссылка ИЗ Справочник.Пользователи
			|ГДЕ НЕ ПометкаУдаления И НЕ Недействителен И НЕ Служебный";
	КонецЕсли;
КонецПроцедуры

// Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//  
//  См. также:
//  "УправляемаяФорма.ПриСозданииНаСервере" в синтакс-помощнике.
//
// Параметры:
//  Форма				 - УправляемаяФорма	 - Форма отчета.
//  Отказ				 - Булево			 - Передается из параметров обработчика "как есть".
//  СтандартнаяОбработка - Булево			 - Передается из параметров обработчика "как есть".
//
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	// КЭШируем параметры формы.
	ПараметрыФормы = ItobОтчетыКлиентСерверПовтИсп.ПараметрыФормы(Строка(Форма.УникальныйИдентификатор));
	ПараметрыФормы.Очистить();
	Если Форма.Параметры.Свойство("СписокПараметров") Тогда
		ПараметрыФормы.Вставить("Объект", Форма.Параметры.Объект);
		ПараметрыФормы.Вставить("СписокПараметров", Форма.Параметры.СписокПараметров);
	КонецЕсли;
КонецПроцедуры

// Вызывается после перезаполнения панели настроек формы отчета.
//
// Параметры:
//  Форма				 - УправляемаяФорма	 - Форма отчета.
//  ПервоеОткрытиеФормы	 - Булево - Признак первого открытия формы.
//
Процедура ИзменитьФормуПослеСозданияЭлементовНастроек(Форма, ПервоеОткрытиеФормы) Экспорт
	
	// Проверяем, открывается ли нужная форма.
	Если Не Форма.ТипФормыОтчета = ТипФормыОтчета.Основная 
		Или Не СтрНайти(Форма.ИмяФормы, "ФормаНастроек") = 0 Тогда // Если используется общая форма из БСП проверяем на имя.
	    Возврат;
	КонецЕсли;
	
	// Обновляем внешний вид элемента "Начало периода".
	ЭлементФормы = ItobОтчетыКлиентСервер.НайтиЭлементФормыПоЗаголовку(Форма, "Начало периода");
	ЭлементФормы.КнопкаРегулирования = Истина;
	ЭлементФормы.УстановитьДействие("Регулирование", "Подключаемый_ПолеВвода_Регулирование");
	
	// Обновляем внешний вид элемента "Конец периода".
	ЭлементФормы = ItobОтчетыКлиентСервер.НайтиЭлементФормыПоЗаголовку(Форма, "Конец периода");
	ЭлементФормы.КнопкаРегулирования = Истина;
	ЭлементФормы.УстановитьДействие("Регулирование", "Подключаемый_ПолеВвода_Регулирование");
	
	Если НЕ ПервоеОткрытиеФормы Тогда

		
		Возврат;		
	КонецЕсли;
	
	// Получаем из КЭШа параметры формы.
	ПараметрыФормы = ItobОтчетыКлиентСерверПовтИсп.ПараметрыФормы(Строка(Форма.УникальныйИдентификатор));
	
	// Форма открыта без параметров.
	Если ПараметрыФормы.Количество() > 0 Тогда
		ПараметрыДанных = ItobОтчетыКлиентСервер.ПолучитьПараметрыДанных(Форма);
		
		// Заполняем передаваемые параметры.
		ИмяПараметраОбъект = ИмяПараметраОбъектИзПараметровДанныхФормы(ПараметрыДанных);
		Если ЗначениеЗаполнено(ИмяПараметраОбъект) Тогда
			ItobОтчетыКлиентСервер.УстановитьЗначениеПараметра(ПараметрыДанных, ИмяПараметраОбъект, ПараметрыФормы.Объект, НСтр("ru = 'Объект'"));
		КонецЕсли;
		Для Каждого Параметр Из ПараметрыФормы.СписокПараметров Цикл
		    Если Параметр.Представление = "НачПериода" Тогда
			    ItobОтчетыКлиентСервер.УстановитьЗначениеПараметра(ПараметрыДанных, "НачПериода", Новый СтандартнаяДатаНачала(Параметр.Значение), НСтр("ru = 'Начало периода'; en = 'Beginning of period'"));
		    ИначеЕсли Параметр.Представление = "КонПериода" Тогда
			    ItobОтчетыКлиентСервер.УстановитьЗначениеПараметра(ПараметрыДанных, "КонПериода", Новый СтандартнаяДатаНачала(Параметр.Значение), НСтр("ru = 'Конец периода'; en = 'End of period'"));
			КонецЕсли; 
		КонецЦикла;
		
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

// Процедура обработчик события "ПриКомпоновкеРезультата" объекта
//
Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	// Сбрасываем параметр стандартной обработки.
	СтандартнаяОбработка = Ложь;
	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	
	ПараметрыДанных = Настройки.ПараметрыДанных;
	
	// Инициализируем параметры отчета.
	НачПериода = ItobОтчетыКлиентСервер.ПолучитьЗначениеПараметра(ПараметрыДанных, "НачПериода", НСтр("ru = 'Начало периода'; en = 'Beginning of period'")).Дата;
	КонПериода = ItobОтчетыКлиентСервер.ПолучитьЗначениеПараметра(ПараметрыДанных, "КонПериода", НСтр("ru = 'Конец периода'; en = 'End of period'")).Дата;
	ЭтоОдиночныйРежимВыбораОбъектаМониторинга = ItobОтчетыКлиентСервер.
														ПолучитьЗначениеПараметра(ПараметрыДанных, 
																				  "ЭтоОдиночныйРежимВыбораОбъектаМониторинга", 
																				  НСтр("ru = 'Это одиночный режим выбора объекта мониторинга'"));
	Объект = ItobОтчетыКлиентСервер.ПолучитьЗначениеПараметра(ПараметрыДанных, 
															  "Объект", 
															  НСтр("ru = 'Объект'"), 
															  Истина);
	ОбъектОдиночный = ItobОтчетыКлиентСервер.ПолучитьЗначениеПараметра(ПараметрыДанных, 
																	   "ОбъектМониторингаОдиночный", 
																	   НСтр("ru = 'Объект мониторинга'; en = 'Объект мониторинга'"), 
																	   Истина);
	 
	ВыбранЕдинственныйОбъектВоМножественномРежиме = (НЕ ТипЗнч(Объект) = Тип("СписокЗначений"));
 	ЗапрашиваемыеОбъекты = Новый Массив;
	Если ЭтоОдиночныйРежимВыбораОбъектаМониторинга Тогда	 
		ЗапрашиваемыеОбъекты.Добавить(ОбъектОдиночный); 
	ИначеЕсли ВыбранЕдинственныйОбъектВоМножественномРежиме Тогда 
		ЗапрашиваемыеОбъекты.Добавить(Объект);	
	Иначе
		ЗапрашиваемыеОбъекты = Объект.ВыгрузитьЗначения();
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Если ЗапрашиваемыеОбъекты.Количество() = 0 Тогда
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ItobТранспортныеСредства.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ItobТранспортныеСредства КАК ItobТранспортныеСредства
		|ГДЕ
		|	НЕ ItobТранспортныеСредства.ЭтоГруппа
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ItobАЗС.Ссылка
		|ИЗ
		|	Справочник.ItobАЗС КАК ItobАЗС
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ItobВодители.Ссылка
		|ИЗ
		|	Справочник.ItobВодители КАК ItobВодители
		|ГДЕ
		|	НЕ ItobВодители.ЭтоГруппа";	
	Иначе
		Запрос.УстановитьПараметр("ЗапрашиваемыеОбъекты", ЗапрашиваемыеОбъекты);	
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ItobТранспортныеСредства.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.ItobТранспортныеСредства КАК ItobТранспортныеСредства
		|ГДЕ
		|	ItobТранспортныеСредства.Ссылка В ИЕРАРХИИ(&ЗапрашиваемыеОбъекты)
		|	И НЕ ItobТранспортныеСредства.ЭтоГруппа
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ItobАЗС.Ссылка
		|ИЗ
		|	Справочник.ItobАЗС КАК ItobАЗС
		|ГДЕ
		|	ItobАЗС.Ссылка В(&ЗапрашиваемыеОбъекты)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ItobВодители.Ссылка
		|ИЗ
		|	Справочник.ItobВодители КАК ItobВодители
		|ГДЕ
		|	ItobВодители.Ссылка В ИЕРАРХИИ(&ЗапрашиваемыеОбъекты)
		|	И НЕ ItobВодители.ЭтоГруппа";
	КонецЕсли; 	
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ItobТранспортныеСредства", ItobВызовСервераПовтИсп.ПолучитьИмяОбъекта("ТранспортныеСредства"));
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ItobВодители", ItobВызовСервераПовтИсп.ПолучитьИмяОбъекта("Водители"));
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "ItobАЗС", ItobВызовСервераПовтИсп.ПолучитьИмяОбъекта("АЗС"));
	
	МассивОбъектов = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	 		
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Объект");
	ТЗ.Колонки.Добавить("ВремяКон");
	ТЗ.Колонки.Добавить("ВремяНач");
	ТЗ.Колонки.Добавить("Длительность");
	ТЗ.Колонки.Добавить("ДлительностьПредставление");
	ТЗ.Колонки.Добавить("МаксимальнаяСкорость");
	ТЗ.Колонки.Добавить("МестоСтоянки");
	ТЗ.Колонки.Добавить("Пробег");
	ТЗ.Колонки.Добавить("Состояние");
	ТЗ.Колонки.Добавить("СостояниеСтрока");
	ТЗ.Колонки.Добавить("СредняяСкорость");
	ТЗ.Колонки.Добавить("РасходТоплива");
	
	ТЗ.ЗагрузитьКолонку(МассивОбъектов, "Объект");
	
	ПараметрыПолученияИнтерваловДвижения = Новый Структура(
		"ИспользоватьДанныеРегистраИнтервалыДвижения,ИспользоватьПоправочныйКоэффициент,ВключатьДанныеТерминала,РассчитыватьДанныеВыработки");
	ПараметрыПолученияИнтерваловДвижения.ИспользоватьДанныеРегистраИнтервалыДвижения = Истина;
	ПараметрыПолученияИнтерваловДвижения.ИспользоватьПоправочныйКоэффициент = Истина;
	ПараметрыПолученияИнтерваловДвижения.ВключатьДанныеТерминала = Ложь;
	Если ItobВызовСервераПовтИсп.ПолучитьИмяОбъекта("ПараметрыВыработки") = "ItobПараметрыВыработки" Тогда
		ПараметрыПолученияИнтерваловДвижения.РассчитыватьДанныеВыработки = Истина;	
	Иначе	
		ПараметрыПолученияИнтерваловДвижения.РассчитыватьДанныеВыработки = Ложь;	
	КонецЕсли; 
	
	Если МассивОбъектов.Количество() > 0 Тогда
		Для Каждого Элем Из МассивОбъектов Цикл
			Попытка
				Если Элем = Неопределено  Тогда
					Продолжить;				 
				Иначе
					ТекущийОбъект = Элем.Ссылка;
				КонецЕсли;			
			Исключение
				Продолжить;			
			КонецПопытки;
			
			ТекПериодДень = НачалоДня(НачПериода);
			
			Пока ТекПериодДень <= КонПериода Цикл
				ТекНачалоПериода = МАКС(НачалоДня(ТекПериодДень), НачПериода);
				ТекКонецПериода = КонецДня(ТекПериодДень)+1;
				Если ТекКонецПериода > КонПериода Тогда
					Если КонПериода = КонецДня(КонПериода) Тогда
						ТекКонецПериода = КонПериода+1;
					Иначе
						ТекКонецПериода = КонПериода;					
					КонецЕсли;				
				КонецЕсли;
								
				ТаблицаИнтервалов = ItobОперативныйМониторинг.ПолучитьИнтервалыДвижения(ТекущийОбъект, ТекНачалоПериода, 
				                           ТекКонецПериода, Истина, Неопределено, ПараметрыПолученияИнтерваловДвижения);
				ТаблицаИнтервалов = ПреобразоватьТаблицуИнтервалов(ТаблицаИнтервалов, ТЗ, Настройки);
				Если ТаблицаИнтервалов.Количество() > 0 Тогда
					КрайняяСтрокаИнтервалов = ТаблицаИнтервалов[ТаблицаИнтервалов.Количество()-1];
					Если КрайняяСтрокаИнтервалов.ВремяКон = КонецДня(ТекПериодДень)+1 Тогда
						// Для комфортного восприятия информации
						КрайняяСтрокаИнтервалов.ВремяКон = КонецДня(ТекПериодДень);
					КонецЕсли;
				КонецЕсли;
				
				ТаблицаИнтервалов.Колонки.Вставить(0,"Объект",,"Объект");
				
				ТекКоэффициентРасхода = 0;
				Если ItobОбщегоНазначения.ЭтоТС(ТекущийОбъект) Тогда
					ТекНормаРег = ItobОбщегоНазначения.НормаРасходаОсновногоТоплива(ТекущийОбъект, ТекКонецПериода);	
               		ТекКоэффициентРасхода = ТекНормаРег.БазоваяНорма;	
				КонецЕсли; 
				
				
				Для Каждого Строка Из ТаблицаИнтервалов Цикл 	
					Если НЕ Строка.Длительность > 0 Тогда 
						Продолжить;
					КонецЕсли;
					
					Строка.Объект = ТекущийОбъект;
					Строка.Пробег = Окр(Строка.Пробег,2);					
					
					ДобСтрока = ТЗ.Добавить();
					ЗаполнитьЗначенияСвойств(ДобСтрока,Строка);
										
					ДобСтрока.РасходТоплива = Окр(ТекКоэффициентРасхода * Строка.Пробег/100,1);
					ДобСтрока.ДлительностьПредставление = ItobОперативныйМониторингКлиентСервер.ПредставлениеВремени(Строка.Длительность);	
				КонецЦикла;
				
				ТекПериодДень = ТекПериодДень + 24*3600;
			КонецЦикла;				
		КонецЦикла;
	КонецЕсли;
	
	// Создание внешнего набора данных и макета компоновки.
    КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ОтчетПустой", (ТЗ.Количество() = 0));
	ВнешниеНаборыДанных = Новый Структура("ТаблицаИнтервалов", ТЗ);
	
	// Инициализируем процессор и макет компоновки данных
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки, Истина);
	
	// Вывод данных.
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
КонецПроцедуры
	
#КонецОбласти

#Область СлужебныеПроцедурыИФункции
	
////////////////////////////////////////////////////////////////////////////////
// ПРОЦЕДУРЫ
//

Функция ПреобразоватьТаблицуИнтервалов(ТаблицаИнтервалов, ТЗ1, Настройки)
	ИмяСправочникаПараметрыВыработки = ItobВызовСервераПовтИсп.ПолучитьИмяОбъекта("ПараметрыВыработки");
	
	Для Каждого Интервал Из ТаблицаИнтервалов Цикл
		Если Интервал.ДанныеВыработки = "" ИЛИ Интервал.ДанныеВыработки = "00" Тогда
			Продолжить;
		КонецЕсли;
		
		СоотвДанныеВыработки = ItobОбщегоНазначения.ПреобразоватьСтрокуВДанныеДатчиков(Интервал.ДанныеВыработки);
		Для каждого ЭлементСоотвВыработки Из СоотвДанныеВыработки Цикл
			КодПараметраВыработки = ЭлементСоотвВыработки.Ключ;
			
			НайденнаяСтрокаКэша = мТЗ_КэшПараметровВыработки.Найти(КодПараметраВыработки,"Код");
			Если НайденнаяСтрокаКэша = Неопределено Тогда
				ПараметрВыработкиСсылка = Справочники[ИмяСправочникаПараметрыВыработки].НайтиПоКоду(КодПараметраВыработки);
				
				НайденнаяСтрокаКэша = мТЗ_КэшПараметровВыработки.Добавить();
				НайденнаяСтрокаКэша.Код              = КодПараметраВыработки;
				НайденнаяСтрокаКэша.Наименование     = СокрЛП(ПараметрВыработкиСсылка.Наименование);
				НайденнаяСтрокаКэша.Ссылка           = ПараметрВыработкиСсылка;
			    НайденнаяСтрокаКэша.СсылкаПустая     = ПараметрВыработкиСсылка.Пустая();
				НайденнаяСтрокаКэша.ИмяНужнойКолонки = УбратьЛишниеСимволы(НайденнаяСтрокаКэша.Наименование);
				
			КонецЕсли;
								
			Если НайденнаяСтрокаКэша.СсылкаПустая Тогда
				Продолжить;
			КонецЕсли;			
			
			Значение = ЭлементСоотвВыработки.Значение/1000;
						
			ИндексНужнойКолонки = НайтиНужнуюКолонку(ТаблицаИнтервалов, НайденнаяСтрокаКэша.ИмяНужнойКолонки);
			ИндексНужнойКолонкиТЗ1 = НайтиНужнуюКолонку(ТЗ1, НайденнаяСтрокаКэша.ИмяНужнойКолонки);
			Интервал.Установить(ИндексНужнойКолонки,Значение);  
			ДобавитьКолонкиСКД(НайденнаяСтрокаКэша.ИмяНужнойКолонки, НайденнаяСтрокаКэша.Наименование, Настройки);
		
		КонецЦикла;		
	КонецЦикла;
			
	Возврат ТаблицаИнтервалов;
	
КонецФункции

// Функция предназначена для того, чтобы убирать пробелы в строке
//
Функция УбратьЛишниеСимволы(Знач Стр)
		
	ДопустимыеСимволы = "abcdefghijklmnopqrstuvwxyz
	|ABCDEFGHIJKLMNOPQRSTUVWXYZ
	|абвгдеёжзийклмнопрстуфхцчшщъыьэюя
	|АБВГДЕЁЖЗИЙКЛМНОПРСТУФХЦЧШЩЪЫЬЭЮЯ
	|1234567890_";
	
	Рез = ТРег(Стр);
	
	Возврат СтрСоединить(СтрРазделить(Рез, СтрСоединить(СтрРазделить(Рез, ДопустимыеСимволы))));
	
КонецФункции 

Функция НайтиНужнуюКолонку(Таб,ИмяНужнойКолонки)
	
	НужнаяКолонка = Таб.Колонки.Найти(ИмяНужнойКолонки);
	Если НужнаяКолонка = Неопределено Тогда
		НужнаяКолонка = Таб.Колонки.Добавить(ИмяНужнойКолонки);
		ИндексНужнойКолонки = Таб.Колонки.Количество()-1;
	Иначе
		ИндексНужнойКолонки = Таб.Колонки.Индекс(Таб.Колонки.Найти(ИмяНужнойКолонки))
	КонецЕсли; 
	Возврат ИндексНужнойКолонки;
	
КонецФункции
   
Процедура ДобавитьКолонкиСКД(ИмяКолонки, Представление, Настройки)
	
	СКД = ЭтотОбъект.СхемаКомпоновкиДанных;
	
	Поле = СКД.НаборыДанных.ТаблицаИнтервалов.Поля.Найти(ИмяКолонки);	
	Если Поле  = Неопределено Тогда
		НовоеПоле = СКД.НаборыДанных.ТаблицаИнтервалов.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
		НовоеПоле.Поле = ИмяКолонки;
		НовоеПоле.ПутьКДанным = ИмяКолонки;
		НовоеПоле.Заголовок = Представление;
		МассивТипов = Новый Массив;
		МассивТипов.Добавить(Тип("Число"));
		
		ПараметрыЧисла = Новый КвалификаторыЧисла(10,2,ДопустимыйЗнак.Любой);
		НовоеПоле.ТипЗначения = Новый ОписаниеТипов(МассивТипов,ПараметрыЧисла);
		
		ПолеВыбора = Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ПолеВыбора.Поле = Новый ПолеКомпоновкиДанных(ИмяКолонки);
		
		НовоеПолеИтогов = СКД.ПоляИтога.Добавить();
		НовоеПолеИтогов.ПутьКДанным = ИмяКолонки;
		НовоеПолеИтогов.Выражение = "Сумма(" + ИмяКолонки + ")";
		
	КонецЕсли;
   
КонецПроцедуры

Функция ИмяПараметраОбъектИзПараметровДанныхФормы(ПараметрыДанных)
	
	ИмяПараметраЭлементаНастроек = "";
	
	Для Каждого ЭлементНастроек ИЗ ПараметрыДанных.Элементы Цикл
		// Перебираем элементы в поисках нужного параметра.
		Если ТипЗнч(ЭлементНастроек) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных") Тогда
			ИмяПараметраЭлементаНастроек = СокрЛП(ЭлементНастроек.Параметр);
			Если ИмяПараметраЭлементаНастроек = "ОбъектМониторингаОдиночный"
				 ИЛИ ИмяПараметраЭлементаНастроек = "Объект" Тогда
				
				
				Возврат ИмяПараметраЭлементаНастроек;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;

	
	Возврат ИмяПараметраЭлементаНастроек;
	
КонецФункции
 

мТЗ_КэшПараметровВыработки = Новый ТаблицаЗначений;
мТЗ_КэшПараметровВыработки.Колонки.Добавить("Код");
мТЗ_КэшПараметровВыработки.Колонки.Добавить("Наименование");
мТЗ_КэшПараметровВыработки.Колонки.Добавить("Ссылка");
мТЗ_КэшПараметровВыработки.Колонки.Добавить("СсылкаПустая");
мТЗ_КэшПараметровВыработки.Колонки.Добавить("ИмяНужнойКолонки");

#КонецОбласти

#КонецЕсли

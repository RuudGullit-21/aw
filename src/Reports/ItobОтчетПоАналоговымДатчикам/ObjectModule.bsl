#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Настройки общей формы отчета подсистемы "Варианты отчетов".
//
// Параметры:
//   Форма - УправляемаяФорма - Форма отчета.
//   КлючВарианта - Строка - Имя предопределенного варианта отчета или уникальный идентификатор пользовательского.
//   Настройки - Структура - см. процедуру ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию.
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	
	Настройки.События.ПриСозданииНаСервере = Истина;
	
КонецПроцедуры

// Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//  
//  См. также:
//  "УправляемаяФорма.ПриСозданииНаСервере" в синтакс-помощнике.
//
// Параметры:
//  Форма				 - УправляемаяФорма	 - Форма отчета.
//  Отказ				 - Булево			 - Передается из параметров обработчика "как есть".
//  СтандартнаяОбработка - Булево			 - Передается из параметров обработчика "как есть".
//
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	
	// Кешируем параметры формы.
	ПараметрыФормы = ItobОтчетыКлиентСерверПовтИсп.ПараметрыФормы(Строка(Форма.УникальныйИдентификатор));
	ПараметрыФормы.Очистить();
	Если Форма.Параметры.Свойство("СписокПараметров") Тогда
		ПараметрыФормы.Вставить("СписокПараметров", Форма.Параметры.СписокПараметров);
		ПараметрыФормы.Вставить("Объект", Форма.Параметры.Объект);
	КонецЕсли;
	
КонецПроцедуры

// Вызывается после перезаполнения панели настроек формы отчета.
//
// Параметры:
//  Форма				 - УправляемаяФорма	 - Форма отчета.
//  ПервоеОткрытиеФормы	 - Булево - Признак первого открытия формы.
//
Процедура ИзменитьФормуПослеСозданияЭлементовНастроек(Форма, ПервоеОткрытиеФормы) Экспорт
	
	// Проверяем, открывается ли нужная форма.
	Если НЕ Форма.ТипФормыОтчета = ТипФормыОтчета.Основная 
		 ИЛИ НЕ СтрНайти(Форма.ИмяФормы, "ФормаНастроек") = 0 Тогда // Если используется общая форма из БСП - проверяем на имя.
		 
		Возврат;
	КонецЕсли;
	
	// Настраиваем элемент "Объект".
	ЭлементОбъект = ItobОтчетыКлиентСервер.НайтиЭлементФормыПоЗаголовку(Форма, "Объект");
	ЭлементОбъект.КнопкаОткрытия = Истина;
	
	// Обновляем внешний вид элемента "Начало периода".
	ЭлементФормы = ItobОтчетыКлиентСервер.НайтиЭлементФормыПоЗаголовку(Форма, "Начало периода");
	ЭлементФормы.КнопкаРегулирования = Истина;
	ЭлементФормы.УстановитьДействие("Регулирование", "Подключаемый_ПолеВвода_Регулирование");
	
	// Обновляем внешний вид элемента "Конец периода".
	ЭлементФормы = ItobОтчетыКлиентСервер.НайтиЭлементФормыПоЗаголовку(Форма, "Конец периода");
	ЭлементФормы.КнопкаРегулирования = Истина;
	ЭлементФормы.УстановитьДействие("Регулирование", "Подключаемый_ПолеВвода_Регулирование");
	
	// Получаем из КЭШа параметры формы.
	ПараметрыФормы = ItobОтчетыКлиентСерверПовтИсп.ПараметрыФормы(Строка(Форма.УникальныйИдентификатор));
	
	// Заполняем список выбора датчика топлива.
	ОбъектИзВнешнихПараметров = Неопределено;
	Если ПараметрыФормы.Количество() > 0 И ПервоеОткрытиеФормы Тогда
		// Если форма отчета открыта с параметрами (например, через РМД), и это ее первое открытие, то указываем, что объект для построения отчета
		//	нужно взять не из текущих параметров формы отчета, а из внешних параметров.
		ОбъектИзВнешнихПараметров = ПараметрыФормы.Объект;
	КонецЕсли;
	
	ItobОтчеты.ОтчетПоДатчикамУстановитьПараметрыВыбораДатчика(Форма,, ОбъектИзВнешнихПараметров);
	
	// В данный модуль заходим несколько раз. Код, идущий ниже, должен выполняться только 1 раз,
	//	т.к. требуется для загрузки в форму отчета внешних параметров.
	Если НЕ ПервоеОткрытиеФормы Тогда
		Возврат;		
	КонецЕсли;
	
	// Форма открыта без параметров.
	Если ПараметрыФормы.Количество() > 0 Тогда
		// Получаем параметры данных, относительно расшифровки.
		ПараметрыДанных = ItobОтчетыКлиентСервер.ПолучитьПараметрыДанных(Форма);
		
		// Заполняем передаваемые параметры.
		Для Каждого Параметр Из ПараметрыФормы.СписокПараметров Цикл
		    Если Параметр.Представление = "НачПериода" Тогда
			    ItobОтчетыКлиентСервер.УстановитьЗначениеПараметра(ПараметрыДанных, "НачПериода", Новый СтандартнаяДатаНачала(Параметр.Значение), НСтр("ru = 'Начало периода'; en = 'Beginning of period'"));
		    ИначеЕсли Параметр.Представление = "КонПериода" Тогда
			    ItobОтчетыКлиентСервер.УстановитьЗначениеПараметра(ПараметрыДанных, "КонПериода", Новый СтандартнаяДатаНачала(Параметр.Значение), НСтр("ru = 'Конец периода'; en = 'End of period'"));
		    ИначеЕсли Параметр.Представление = "Объект" Тогда
			    ItobОтчетыКлиентСервер.УстановитьЗначениеПараметра(ПараметрыДанных, "Объект", Параметр.Значение, НСтр("ru = 'Объект'"));
		    ИначеЕсли Параметр.Представление = "Датчик" Тогда
			    ItobОтчетыКлиентСервер.УстановитьЗначениеПараметра(ПараметрыДанных, "Датчик", Параметр.Значение, НСтр("ru = 'Датчик'; en = 'Sensor'"));
			КонецЕсли; 
		КонецЦикла;
		
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти  

#Область ОбработчикиСобытий

// Процедура обработчик события "ПриКомпоновкеРезультата" объекта
//
Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	// Сбрасываем параметр стандартной обработки.
	СтандартнаяОбработка = Ложь;
	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	
	КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ОтчетПустой", Истина);
	
	ПараметрыДанных = Настройки.ПараметрыДанных;
	
	// Инициализируем параметры отчета.
	НачПериода = ItobОтчетыКлиентСервер.ПолучитьЗначениеПараметра(ПараметрыДанных, "НачПериода", НСтр("ru = 'Начало периода'; en = 'Beginning of period'")).Дата;
	КонПериода = ItobОтчетыКлиентСервер.ПолучитьЗначениеПараметра(ПараметрыДанных, "КонПериода", НСтр("ru = 'Конец периода'; en = 'End of period'")).Дата;
	Объект = ItobОтчетыКлиентСервер.ПолучитьЗначениеПараметра(ПараметрыДанных, "Объект", НСтр("ru = 'Объект'"));
	Датчик = ItobОтчетыКлиентСервер.ПолучитьЗначениеПараметра(ПараметрыДанных, "Датчик", НСтр("ru = 'Датчик'; en = 'Sensor'"));
	ПреобразовыватьПоКалибровочномуГрафику = ItobОтчетыКлиентСервер.ПолучитьЗначениеПараметра(ПараметрыДанных, 
																							  "ПреобразовыватьПоКалибровочномуГрафику", 
																							  НСтр("ru = 'Преобразовывать по калибровочному графику'"));
	
	Если НЕ ЗначениеЗаполнено(НачПериода)
		 ИЛИ НЕ ЗначениеЗаполнено(КонПериода) 
		 ИЛИ НЕ ЗначениеЗаполнено(Объект) 
		 ИЛИ НЕ ЗначениеЗаполнено(Датчик) 
		 ИЛИ НЕ ЗначениеЗаполнено(ПреобразовыватьПоКалибровочномуГрафику) Тогда
		 
		Возврат;
	КонецЕсли; 
		
	Терминал = Неопределено;
	КалибровочныйГрафик = Неопределено;
	
	СрезНаНачало = РегистрыСведений.ItobПривязкиТрекеров.ПолучитьПоследнее(НачалоДня(КонПериода)-1, Новый Структура("Объект", Объект));
	Если ЗначениеЗаполнено(СрезНаНачало.Терминал) Тогда
		Терминал = СрезНаНачало.Терминал;
		НайденнаяСтрокаДатчиков = Терминал.Датчики.Найти(Датчик,"Датчик");
		Если НайденнаяСтрокаДатчиков <> Неопределено Тогда
			КалибровочныйГрафик = НайденнаяСтрокаДатчиков.КалибровочныйГрафик;
		КонецЕсли;			
	КонецЕсли;
	
	ТабДанныхДатчика = ItobОперативныйМониторинг.ПолучитьДанныеДатчикаОбъекта(Объект,
																			  НачПериода,
																			  КонПериода,
																			  Датчик);
																			  
	Если ПреобразовыватьПоКалибровочномуГрафику Тогда		
		Если ЗначениеЗаполнено(КалибровочныйГрафик) Тогда
			ТабДанныхДатчика = ПреобразоватьДанныеДатчикаПоКалибровочномуГрафику(ТабДанныхДатчика, КалибровочныйГрафик);	
		КонецЕсли;
	КонецЕсли;	
	
	ТабДанныхДатчика.Колонки.Добавить("СекундСНачалаПериода", Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(15, 0)));
	ТабДанныхДатчика.Колонки.Добавить("МинПериод", Новый ОписаниеТипов("Дата"));

	Если ТабДанныхДатчика.Количество() > 0 Тогда
		ТабДанныхДатчика.ЗаполнитьЗначения(ТабДанныхДатчика[0].Период, "МинПериод");	
	КонецЕсли; 	
	Для каждого Стр Из ТабДанныхДатчика Цикл		
		Стр.СекундСНачалаПериода = Стр.Период - Стр.МинПериод;
	КонецЦикла; 
	
	// Создание внешнего объекта для использования в СКД.
	ВнешниеДанные = Новый Структура;
	ВнешниеДанные.Вставить("ТабРезультат", ТабДанныхДатчика);
	
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;	
	
	НастройкаОсиШкалыТочек = ItobОтчеты.НайтиНастройкуОсиШкалыТочек(Настройки);
	Если НЕ НастройкаОсиШкалыТочек = Неопределено Тогда
		НастройкаОсиШкалыТочек.МинимальноеЗначение = НачПериода;
		НастройкаОсиШкалыТочек.МаксимальноеЗначение = КонПериода;	
	КонецЕсли; 
	
	// Компоновка макета.
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеДанные, ДанныеРасшифровки, Истина);
	
	// Вывод данных.
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
КонецПроцедуры
	
#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

// Выполняет преобразование таблицы данных по калибровочному графику
//
Функция ПреобразоватьДанныеДатчикаПоКалибровочномуГрафику(ТабДанных, КалибровочныйГрафик)
	
	Запрос = Новый Запрос;
	Запрос.МенеджерВременныхТаблиц = Новый МенеджерВременныхТаблиц;
	Запрос.Текст = "ВЫБРАТЬ * ПОМЕСТИТЬ ТЗ ИЗ &ТЗ КАК ТЗ";
	Запрос.УстановитьПараметр("ТЗ", ТабДанных);
    Запрос.Выполнить();
	
	Запрос.УстановитьПараметр("КалибровочныйГрафик", КалибровочныйГрафик);
	
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТабДанных.Период КАК Период,
	               |	ТабДанных.Широта,
	               |	ТабДанных.Долгота,
	               |	ВЫРАЗИТЬ((ДанныеКалибровки.Выход1 - ДанныеКалибровки.Выход2) / (ДанныеКалибровки.Вход1 - ДанныеКалибровки.Вход2) * ТабДанных.Значение + (ДанныеКалибровки.Вход1 * ДанныеКалибровки.Выход2 - ДанныеКалибровки.Вход2 * ДанныеКалибровки.Выход1) / (ДанныеКалибровки.Вход1 - ДанныеКалибровки.Вход2) КАК ЧИСЛО(15, 1)) КАК Значение
	               |ИЗ
	               |	ТЗ КАК ТабДанных
	               |		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	               |			НаборДанныхГрафика.Вход1 КАК Вход1,
	               |			НаборДанныхГрафика.Выход1 КАК Выход1,
	               |			НаборДанныхГрафика.Вход2 КАК Вход2,
	               |			ItobКалибровочныеГрафикиПоказатели.Выход КАК Выход2
	               |		ИЗ
	               |			(ВЫБРАТЬ
	               |				ItobКалибровочныеГрафикиПоказатели.Вход КАК Вход1,
	               |				ItobКалибровочныеГрафикиПоказатели.Выход КАК Выход1,
	               |				МИНИМУМ(ItobКалибровочныеГрафикиПоказатели1.Вход) КАК Вход2
	               |			ИЗ
	               |				Справочник.ItobКалибровочныеГрафики.Показатели КАК ItobКалибровочныеГрафикиПоказатели,
	               |				Справочник.ItobКалибровочныеГрафики.Показатели КАК ItobКалибровочныеГрафикиПоказатели1
	               |			ГДЕ
	               |				ItobКалибровочныеГрафикиПоказатели.Ссылка = &КалибровочныйГрафик
	               |				И ItobКалибровочныеГрафикиПоказатели1.Ссылка = &КалибровочныйГрафик
	               |				И ItobКалибровочныеГрафикиПоказатели1.Вход > ItobКалибровочныеГрафикиПоказатели.Вход
	               |			
	               |			СГРУППИРОВАТЬ ПО
	               |				ItobКалибровочныеГрафикиПоказатели.Вход,
	               |				ItobКалибровочныеГрафикиПоказатели.Выход) КАК НаборДанныхГрафика
	               |				ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ItobКалибровочныеГрафики.Показатели КАК ItobКалибровочныеГрафикиПоказатели
	               |				ПО НаборДанныхГрафика.Вход2 = ItobКалибровочныеГрафикиПоказатели.Вход
	               |					И (ItobКалибровочныеГрафикиПоказатели.Ссылка = &КалибровочныйГрафик)) КАК ДанныеКалибровки
	               |		ПО (ТабДанных.Значение МЕЖДУ ДанныеКалибровки.Вход1 И ДанныеКалибровки.Вход2),
	               |	(ВЫБРАТЬ
	               |		ItobКалибровочныеГрафикиПоказатели.Ссылка КАК График,
	               |		МИНИМУМ(ItobКалибровочныеГрафикиПоказатели.Вход) КАК МинВход,
	               |		МАКСИМУМ(ItobКалибровочныеГрафикиПоказатели.Вход) КАК МаксВход
	               |	ИЗ
	               |		Справочник.ItobКалибровочныеГрафики.Показатели КАК ItobКалибровочныеГрафикиПоказатели
	               |	ГДЕ
	               |		ItobКалибровочныеГрафикиПоказатели.Ссылка = &КалибровочныйГрафик
	               |	
	               |	СГРУППИРОВАТЬ ПО
	               |		ItobКалибровочныеГрафикиПоказатели.Ссылка) КАК ДиапазонВходаКалибровки
	               |ГДЕ
	               |	ТабДанных.Широта <> 0
	               |	И ТабДанных.Долгота <> 0
	               |	И ВЫБОР
	               |			КОГДА ДиапазонВходаКалибровки.График.ДопускатьЗначенияВнеВходногоДиапазона
	               |				ТОГДА ИСТИНА
	               |			ИНАЧЕ ТабДанных.Значение МЕЖДУ ДиапазонВходаКалибровки.МинВход И ДиапазонВходаКалибровки.МаксВход
	               |		КОНЕЦ
	               |	И (НЕ ДанныеКалибровки.Вход1 ЕСТЬ NULL )
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Период";	
	
				   
	Возврат Запрос.Выполнить().Выгрузить();	

КонецФункции

#КонецОбласти 

#КонецЕсли


#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	ДокументРезультат.Очистить();

	ДатаНачала                        = ТекущаяДата();
	ДатаОкончания                     = ТекущаяДата();

	ДатаПо                            = ТекущаяДата();
	РежимПланирования                 = Ложь;
	ОтображатьВыбывшиеТС              = Ложь;
	ДетализацияПеречняРаботИЗапчастей = Ложь;
	ПоказыватьВыполненные             = Ложь;
	Склад                             = Справочники.Склады.ПустаяСсылка();
	Для Каждого ПараметрДанных Из КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы Цикл 
		Если ПараметрДанных.Параметр = Новый ПараметрКомпоновкиДанных("РежимПланирования") Тогда 
			РежимПланирования = ПараметрДанных.Значение;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Для Каждого ПользовательскаяНастройка Из КомпоновщикНастроек.ПользовательскиеНастройки.Элементы Цикл 
		Если ТипЗнч(ПользовательскаяНастройка) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных")
			И ПользовательскаяНастройка.Параметр = Новый ПараметрКомпоновкиДанных("ДетализацияПеречняРаботИЗапчастей") Тогда 
			ДетализацияПеречняРаботИЗапчастей = ПользовательскаяНастройка.Значение;
		КонецЕсли;
		Если ТипЗнч(ПользовательскаяНастройка) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных")
			И ПользовательскаяНастройка.Параметр = Новый ПараметрКомпоновкиДанных("ОтображатьВыбывшиеТС") Тогда 
			ОтображатьВыбывшиеТС = ПользовательскаяНастройка.Значение;
		КонецЕсли;
		Если ТипЗнч(ПользовательскаяНастройка) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных")
			И ПользовательскаяНастройка.Параметр = Новый ПараметрКомпоновкиДанных("Склад") Тогда 
			Склад = ?(ПользовательскаяНастройка.Значение = Неопределено, Склад, ПользовательскаяНастройка.Значение);
		КонецЕсли;
		Если ТипЗнч(ПользовательскаяНастройка) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных")
			И ПользовательскаяНастройка.Параметр = Новый ПараметрКомпоновкиДанных("ПоказыватьВыполненные") Тогда 
			ПоказыватьВыполненные = ПользовательскаяНастройка.Значение;
		КонецЕсли;
		Если НЕ РежимПланирования 
			И ТипЗнч(ПользовательскаяНастройка) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных")
			И ПользовательскаяНастройка.Параметр = Новый ПараметрКомпоновкиДанных("Период") Тогда 
			Попытка
				ДатаПо = ПользовательскаяНастройка.Значение.Дата;
			Исключение
				ДатаПо = ПользовательскаяНастройка.Значение;
			КонецПопытки;
		КонецЕсли;
		Если РежимПланирования 
			И ТипЗнч(ПользовательскаяНастройка) = Тип("ЗначениеПараметраНастроекКомпоновкиДанных")
			И ПользовательскаяНастройка.Параметр = Новый ПараметрКомпоновкиДанных("ПериодОтчета") Тогда 
			ДатаПо = ПользовательскаяНастройка.Значение.ДатаНачала;
			
			ДатаНачала    = ПользовательскаяНастройка.Значение.ДатаНачала;
			ДатаОкончания = ПользовательскаяНастройка.Значение.ДатаОкончания;
		КонецЕсли;
	КонецЦикла;
	Если Не ЗначениеЗаполнено(ДатаПо) Тогда
		ДатаПо = ТекущаяДата();
	КонецЕсли;
	
	Идентификатор = Неопределено;
	ТекНастройкиКомпоновщика = КомпоновщикНастроек.ПолучитьНастройки();
	
	Результат = УдалитьГруппировкуПоСкладу(ТекНастройкиКомпоновщика.Структура[0]);

	Если ДетализацияПеречняРаботИЗапчастей Тогда
		ПолучитьПоследнююГруппировку(ТекНастройкиКомпоновщика.Структура[0]);
		ГруппировкаПоСкладу = ПолучитьПоследнююГруппировку(ТекНастройкиКомпоновщика.Структура[0]);
		ГруппировкаПоСкладу.Имя = "Работа";
		ГруппировкаПоСкладу.Использование = Истина;
		
		ПолеГруппировкиСклад = ГруппировкаПоСкладу.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));       
		ПолеГруппировкиСклад.Использование      = Истина;
		ПолеГруппировкиСклад.Поле               = Новый ПолеКомпоновкиДанных("Работа");
		ПолеГруппировкиСклад.ТипГруппировки = ТипГруппировкиКомпоновкиДанных.Элементы;
		ПолеГруппировкиСклад.ТипДополнения      = ТипДополненияПериодаКомпоновкиДанных.БезДополнения;
		
		ПолеГруппировкиСклад = ГруппировкаПоСкладу.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));       
		ПолеГруппировкиСклад.Использование      = Истина;
		ПолеГруппировкиСклад.Поле               = Новый ПолеКомпоновкиДанных("Количество");
		ПолеГруппировкиСклад.ТипГруппировки     = ТипГруппировкиКомпоновкиДанных.Элементы;
		ПолеГруппировкиСклад.ТипДополнения      = ТипДополненияПериодаКомпоновкиДанных.БезДополнения;

		ПолеГруппировкиСклад = ГруппировкаПоСкладу.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));       
		ПолеГруппировкиСклад.Использование      = Истина;
		ПолеГруппировкиСклад.Поле               = Новый ПолеКомпоновкиДанных("КоличествоОстаток");
		ПолеГруппировкиСклад.ТипГруппировки     = ТипГруппировкиКомпоновкиДанных.Элементы;
		ПолеГруппировкиСклад.ТипДополнения      = ТипДополненияПериодаКомпоновкиДанных.БезДополнения;
		
		
		ВыбранноеПоле = ГруппировкаПоСкладу.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
		
	КонецЕсли;

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДатаКон",              КонецДня(ДатаПо));
	Запрос.УстановитьПараметр("Период",               ДатаПо);
	Запрос.УстановитьПараметр("РежимПланирования",    РежимПланирования);
	Запрос.УстановитьПараметр("ОтображатьВыбывшиеТС", ОтображатьВыбывшиеТС);
	Запрос.УстановитьПараметр("ТекущаяДата",          ТекущаяДата());
	Запрос.Текст = уатОбщегоНазначения.ТекстЗапросаСписокТСДляТОПлановыеДаты(,?(ДетализацияПеречняРаботИЗапчастей, Склад, Неопределено));
	Выборка = Запрос.Выполнить().Выгрузить();
	Выборка.Колонки.Добавить("Выполнено", Новый ОписаниеТипов("Булево"));
	
	Если ПоказыватьВыполненные Тогда
		ВыборкаВыполненныеТО = ПолучитьВыполненныеТО(ДатаНачала, ДатаОкончания, ОтображатьВыбывшиеТС);
		Пока ВыборкаВыполненныеТО.Следующий() Цикл 
			НоваяСтрока = Выборка.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ВыборкаВыполненныеТО);
		КонецЦикла;
	КонецЕсли;
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ТабДанных", Выборка);
	СхемаКомпоновкиДанных = ЭтотОбъект.СхемаКомпоновкиДанных;
	
	Если РежимПланирования Тогда
		
		ГруппаЭлементовОтбора = ТекНастройкиКомпоновщика.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаЭлементовОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ;
		
		ЭлементОтбораКомпоновкиДанных = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораКомпоновкиДанных.ЛевоеЗначение    = КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора.Элементы.Найти("Выполнено").Поле;
		ЭлементОтбораКомпоновкиДанных.ПравоеЗначение   = Истина;
		ЭлементОтбораКомпоновкиДанных.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбораКомпоновкиДанных.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;

		
		ГруппаЭлементовОтбора = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаЭлементовОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		
		ЭлементОтбораКомпоновкиДанных = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораКомпоновкиДанных.ЛевоеЗначение    = КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора.Элементы.Найти("ПлановаяДатаТО").Поле;
		ЭлементОтбораКомпоновкиДанных.ПравоеЗначение   = ДатаНачала;
		ЭлементОтбораКомпоновкиДанных.ВидСравнения     = ВидСравненияКомпоновкиДанных.БольшеИлиРавно;
		ЭлементОтбораКомпоновкиДанных.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		
		ЭлементОтбораКомпоновкиДанных = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбораКомпоновкиДанных.ЛевоеЗначение    = КомпоновщикНастроек.Настройки.Отбор.ДоступныеПоляОтбора.Элементы.Найти("ПлановаяДатаТО").Поле;
		ЭлементОтбораКомпоновкиДанных.ПравоеЗначение   = ДатаОкончания;
		ЭлементОтбораКомпоновкиДанных.ВидСравнения     = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно;
		ЭлементОтбораКомпоновкиДанных.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	КонецЕсли;

	КомпоновщикМакета         = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки           = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, ТекНастройкиКомпоновщика, ДанныеРасшифровки);
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных,ДанныеРасшифровки,Истина);
	ПроцессорВывода           = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	//ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	ПолеПоКоторомуНеобходимоПолучитьЗначение = "Работа";
	ПроцессорВывода.НачатьВывод();
	МассивОбластей = Новый Массив();
	Пока истина Цикл
		ЭлементРезультата = ПроцессорКомпоновкиДанных.Следующий();
		
		Если ЭлементРезультата = Неопределено Тогда
			прервать;
		КонецЕсли;	
		ПроцессорВывода.ВывестиЭлемент(ЭлементРезультата);
		Если ЭлементРезультата.ЗначенияПараметров.Количество() > 0 Тогда
			ЗначениеВыводимыхДанных = Неопределено;
			Для каждого ЗначениеПараметра из ЭлементРезультата.ЗначенияПараметров Цикл
				Если ТипЗнч(ЗначениеПараметра.Значение) = Тип("ИдентификаторРасшифровкиКомпоновкиДанных") Тогда
					ПоляРасшифровки = ДанныеРасшифровки.Элементы[ЗначениеПараметра.Значение].ПолучитьПоля();
					Для Каждого ПолеРасшифровки из ПоляРасшифровки Цикл
						Если ПолеРасшифровки.Поле = ПолеПоКоторомуНеобходимоПолучитьЗначение Тогда
							ЗначениеВыводимыхДанных = ПолеРасшифровки.Значение;
							Прервать;
						КонецЕсли;	
					КонецЦикла;	
				КонецЕсли;	
			КонецЦикла;	
			Если ЗначениеЗаполнено(ЗначениеВыводимыхДанных) Тогда

				ОбластьДляКартинки = ДокументРезультат.НайтиТекст(ЗначениеВыводимыхДанных);
				Если ОбластьДляКартинки <> Неопределено Тогда
					Если ТипЗнч(ЗначениеВыводимыхДанных) = Тип("СправочникСсылка.Номенклатура") Тогда
						ОбластьДляКартинки.Картинка = БиблиотекаКартинок.уатЗапчасть;
						ОбластьДляКартинки.РазмерКартинки = РазмерКартинки.РеальныйРазмер;
						ОбластьДляКартинки.ВертикальноеПоложениеКартинки = ВертикальноеПоложение.Верх;
					Иначе
						ОбластьДляКартинки.Картинка= БиблиотекаКартинок.уатРабота;
						ОбластьДляКартинки.РазмерКартинки = РазмерКартинки.РеальныйРазмер;
						ОбластьДляКартинки.ВертикальноеПоложениеКартинки = ВертикальноеПоложение.Верх;

					КонецЕсли;
					МассивОбластей.Добавить(Новый Структура("Область, Текст", ОбластьДляКартинки, ОбластьДляКартинки.Текст));
					ОбластьДляКартинки.Текст = "";
				КонецЕсли;
			КонецЕсли;	
		КонецЕсли;	
	КонецЦикла;
	Для Каждого ТекСтрока Из МассивОбластей Цикл
		Область = ТекСтрока.Область;
		Область.Текст = ТекСтрока.Текст;
	КонецЦикла;
	ПроцессорВывода.ЗакончитьВывод();
	
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Ландшафт;
	ДокументРезультат.АвтоМасштаб = Истина;
	
КонецПроцедуры

Функция ПолучитьВыполненныеТО(ДатаНачала, ДатаОкончания, ОтображатьВыбывшие)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДатаНачала",         ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",      ДатаОкончания);
	Запрос.УстановитьПараметр("ОтображатьВыбывшие", ОтображатьВыбывшие);

	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	уатПрохождениеТО.ТС КАК ТС,
	               |	уатПрохождениеТО.ВидТО КАК ВидТО,
	               |	уатПрохождениеТО.ПараметрВыработки КАК ПараметрВыработки,
	               |	уатПрохождениеТО.Период КАК ДатаПоследнегоТО,
	               |	ИСТИНА КАК Выполнено,
	               |	уатПрохождениеТО.ТС.Модель КАК Модель,
	               |	уатПрохождениеТО.ТС.Организация КАК Организация
	               |ИЗ
	               |	РегистрСведений.уатПрохождениеТО КАК уатПрохождениеТО
	               |ГДЕ
	               |	уатПрохождениеТО.Период МЕЖДУ &ДатаНачала И &ДатаОкончания
	               |	И (&ОтображатьВыбывшие
	               |			ИЛИ уатПрохождениеТО.ТС.ДатаВыбытия = ДАТАВРЕМЯ(1, 1, 1))";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Возврат Выборка;

КонецФункции

Функция ПолучитьПоследнююГруппировку(ТекНастройкиКомпоновщика)
	Если ТекНастройкиКомпоновщика.Структура.Количество() > 0 Тогда
		ГруппировкаПоСкладу = ПолучитьПоследнююГруппировку(ТекНастройкиКомпоновщика.Структура[0]);
	Иначе
		ГруппировкаПоСкладу = ТекНастройкиКомпоновщика.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
		Возврат ГруппировкаПоСкладу;
	КонецЕсли;
	Возврат ГруппировкаПоСкладу;
КонецФункции

Функция УдалитьГруппировкуПоСкладу(ТекНастройкиКомпоновщика)
	Если ТекНастройкиКомпоновщика.Структура.Количество() > 0 Тогда
		ГруппировкуПоСкладу = Неопределено;
		Для Каждого ТекСтрока ИЗ ТекНастройкиКомпоновщика.Структура Цикл
			Если ТекСтрока.Имя = "Работа" Тогда
				ГруппировкуПоСкладу = ТекНастройкиКомпоновщика;
			КонецЕсли;
		КонецЦикла;
		
		Если ГруппировкуПоСкладу <> Неопределено Тогда
			ГруппировкуПоСкладу.Очистить();
		Иначе
			Результат = УдалитьГруппировкуПоСкладу(ТекНастройкиКомпоновщика.Структура[0])
		КонецЕсли;
	Иначе
		Возврат 0;
	КонецЕсли;
	Возврат 0;
КонецФункции

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	
#Область СлужебныйПрограммныйИнтерфейс

// Настройки общей формы отчета подсистемы "Варианты отчетов".
//
// Параметры:
//   Форма - УправляемаяФорма - Форма отчета.
//   КлючВарианта - Строка - Имя предопределенного варианта отчета или уникальный идентификатор пользовательского.
//   Настройки - Структура - см. возвращаемое значение ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию().
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	Настройки.События.ПриСозданииНаСервере = Ложь;	
	
	Настройки.Печать.ПолеСверху = 5;
	Настройки.Печать.ПолеСлева = 5;
	Настройки.Печать.ПолеСнизу = 5;
	Настройки.Печать.ПолеСправа = 5;
	Настройки.ФормироватьСразу = Ложь;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

// Процедура обработчик события "ПриКомпоновкеРезультата" объекта.
//
Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	СхемаКомпоновкиДанных = ПолучитьМакет("СКД");
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	
	// Реквизиту Период присваивается значение, введенное пользователем в форме отчета.
	Период = Настройки.ПараметрыДанных.Элементы.Найти("НаДату").Значение.Дата;			
	НаДатуUTC0 = УниверсальноеВремя(Период);
	МинимальнаяСкоростьДвижения = Константы.ItobМинимальнаяСкоростьДвижения.Получить();	
	ПараметрыСдвигаВремени = ItobОперативныйМониторингКлиентСервер.ПолучитьПараметрыСдвигаВремени();	
	
	РадиусФиксацииПоУмолчанию = ItobВызовСервераПовтИсп.ПолучитьРадиусЗоныПриходаНаТочку(50);
	
	ТаблицаБазовыхДанных = ТаблицаБазовыхДанных(НаДатуUTC0);
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НеобработанныеБазовыеДанные", ТаблицаБазовыхДанных);
	Запрос.УстановитьПараметр("СдвигВремени", ПараметрыСдвигаВремени.СдвигВремени);
	Запрос.УстановитьПараметр("ВариантПереводаНаЛетнееВремя", ПараметрыСдвигаВремени.ВариантПереводаВремени);
	Запрос.УстановитьПараметр("СдвигЛетнееВремя", ПараметрыСдвигаВремени.СдвигЛетнееВремя);	
	Запрос.УстановитьПараметр("НаДату", НаДатуUTC0);
	Запрос.УстановитьПараметр("МинимальнаяСкоростьДвижения", МинимальнаяСкоростьДвижения);

	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ДанныеССД.Период КАК Период,
	|	ДанныеССД.КодТерминала КАК КодТерминала,
	|	ДанныеССД.Широта КАК Широта,
	|	ДанныеССД.Долгота КАК Долгота,
	|	ДанныеССД.Скорость КАК Скорость,
	|	ДанныеССД.Местоположение КАК Местоположение,
	|	ДанныеССД.СерверСбораДанных КАК СерверСбораДанных
	|ПОМЕСТИТЬ втНеобработанныеБазовыеДанные
	|ИЗ
	|	&НеобработанныеБазовыеДанные КАК ДанныеССД
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ItobТерминалы.Ссылка КАК Терминал,
	|	втНеобработанныеБазовыеДанные.КодТерминала КАК КодТерминала,
	|	ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(втНеобработанныеБазовыеДанные.Период, СЕКУНДА, &СдвигВремени), СЕКУНДА, ВЫБОР
	|			КОГДА &ВариантПереводаНаЛетнееВремя = ЗНАЧЕНИЕ(Перечисление.ItobВариантыПереводаВремени.Европейский)
	|				ТОГДА ВЫБОР
	|						КОГДА втНеобработанныеБазовыеДанные.Период МЕЖДУ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(втНеобработанныеБазовыеДанные.Период, ГОД), МЕСЯЦ, 3), НЕДЕЛЯ), НЕДЕЛЯ, -1), ДЕНЬ), ЧАС, 2) И ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(втНеобработанныеБазовыеДанные.Период, ГОД), МЕСЯЦ, 10), НЕДЕЛЯ), НЕДЕЛЯ, -1), ДЕНЬ), ЧАС, 2)
	|							ТОГДА &СдвигЛетнееВремя
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			КОГДА &ВариантПереводаНаЛетнееВремя = ЗНАЧЕНИЕ(Перечисление.ItobВариантыПереводаВремени.Американский)
	|				ТОГДА ВЫБОР
	|						КОГДА втНеобработанныеБазовыеДанные.Период МЕЖДУ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(втНеобработанныеБазовыеДанные.Период, ГОД), МЕСЯЦ, 2), НЕДЕЛЯ), НЕДЕЛЯ, 1), ДЕНЬ), ЧАС, 2) И ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(втНеобработанныеБазовыеДанные.Период, ГОД), МЕСЯЦ, 10), НЕДЕЛЯ), НЕДЕЛЯ, 0), ДЕНЬ), ЧАС, 2)
	|							ТОГДА &СдвигЛетнееВремя
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Период,
	|	втНеобработанныеБазовыеДанные.Широта КАК Широта,
	|	втНеобработанныеБазовыеДанные.Долгота КАК Долгота,
	|	втНеобработанныеБазовыеДанные.Скорость КАК Скорость,
	|	втНеобработанныеБазовыеДанные.Местоположение КАК Местоположение,
	|	втНеобработанныеБазовыеДанные.СерверСбораДанных КАК СерверСбораДанных
	|ПОМЕСТИТЬ втБазовыеДанные
	|ИЗ
	|	Справочник.ItobТерминалы КАК ItobТерминалы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втНеобработанныеБазовыеДанные КАК втНеобработанныеБазовыеДанные
	|		ПО ItobТерминалы.Код = втНеобработанныеБазовыеДанные.КодТерминала
	|			И ItobТерминалы.СерверСбораДанных = втНеобработанныеБазовыеДанные.СерверСбораДанных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|УНИЧТОЖИТЬ втНеобработанныеБазовыеДанные
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ItobПривязкиТрекеровСрезПоследних.Объект КАК Объект,
	|	втБазовыеДанные.КодТерминала КАК КодТерминала,
	|	втБазовыеДанные.Период КАК Период,
	|	втБазовыеДанные.Широта КАК Широта,
	|	втБазовыеДанные.Долгота КАК Долгота,
	|	втБазовыеДанные.Скорость КАК Скорость,
	|	втБазовыеДанные.Местоположение КАК Местоположение,
	|	втБазовыеДанные.СерверСбораДанных КАК СерверСбораДанных,
	|	"""" КАК МестоположениеДляКаждойТочки,
	|	ЕСТЬNULL(ItobТерминалыДатчики.Датчик, ЗНАЧЕНИЕ(Справочник.ItobДатчики.ПустаяСсылка)) КАК Датчик,
	|	ЕСТЬNULL(ItobТерминалыДатчики.Назначение, ЗНАЧЕНИЕ(Справочник.ItobНазначенияДатчиков.ПустаяСсылка)) КАК НазначенияДатчиков,
	|	ЕСТЬNULL(ItobТерминалыДатчики.КалибровочныйГрафик, ЗНАЧЕНИЕ(Справочник.ItobКалибровочныеГрафики.ПустаяСсылка)) КАК КалибровочныйГрафикДатчика,
	|	ЕСТЬNULL(ItobТерминалыДатчики.Датчик.Код, """") КАК КодДатчика
	|ИЗ
	|	втБазовыеДанные КАК втБазовыеДанные
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ItobПривязкиТрекеров.СрезПоследних(&НаДату, ) КАК ItobПривязкиТрекеровСрезПоследних
	|		ПО втБазовыеДанные.Терминал = ItobПривязкиТрекеровСрезПоследних.Терминал
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.ItobТерминалы.Датчики КАК ItobТерминалыДатчики
	|		ПО втБазовыеДанные.Терминал = ItobТерминалыДатчики.Ссылка
	|ГДЕ
	|	НЕ ItobПривязкиТрекеровСрезПоследних.Объект ЕСТЬ NULL
	|	И ItobПривязкиТрекеровСрезПоследних.ТерминалУстановлен";
			   
	// Выгрузка в таблицу значений для последующей загрузки через СКД.			   
	ТабРезультат = Запрос.Выполнить().Выгрузить();
	
	// Заполнение колонок расчетными данными.                   
	ТабРезультат.Колонки.Добавить("Состояние");
	ТабРезультат.Колонки.Добавить("ЗначенияДатчиков");
	
	ПредыдущийОбработанныйКодТерминала = Неопределено;
	ПредыдущийОбработанныйСерверСбораДанных = Неопределено;
	КешДанныеДатчиков = Неопределено;
	КешМестоположение = Неопределено;
	Для каждого ТабСтр Из ТабРезультат Цикл
		ТабСтр.Состояние = ?(ТабСтр.Скорость >= МинимальнаяСкоростьДвижения, "Движение", "Стоянка");				
			
		Если ТабСтр.КодТерминала = ПредыдущийОбработанныйКодТерминала 
			 И ТабСтр.СерверСбораДанных = ПредыдущийОбработанныйСерверСбораДанных Тогда		 
			
			ДанныеДатчиков = КешДанныеДатчиков;
			ТабСтр.Местоположение = КешМестоположение;
		Иначе
			ДанныеДатчиков = ПодобратьЗначенияДатчиковИзБазовыхДанных(ТабСтр.КодТерминала, ТабСтр.СерверСбораДанных, ТаблицаБазовыхДанных); 
			Если НЕ ЗначениеЗаполнено(ТабСтр.Местоположение) Тогда
				ТабСтр.Местоположение = ItobОперативныйМониторинг.НайтиБлижайшийАдрес(ТабСтр.Широта, ТабСтр.Долгота, РадиусФиксацииПоУмолчанию);	
			КонецЕсли; 
			
			КешМестоположение = ТабСтр.Местоположение;
			КешДанныеДатчиков = ДанныеДатчиков;
			ПредыдущийОбработанныйКодТерминала = ТабСтр.КодТерминала;
			ПредыдущийОбработанныйСерверСбораДанных = ТабСтр.СерверСбораДанных;
		КонецЕсли; 
			
		Если ЗначениеЗаполнено(ТабСтр.НазначенияДатчиков) Тогда
			КодДатчикаСтрокой = Формат(ТабСтр.КодДатчика, "ЧН=0; ЧГ=0");
			ЗначениеДатчика = ДанныеДатчиков[КодДатчикаСтрокой];
			Если НЕ ЗначениеДатчика = Неопределено Тогда
				ТабСтр.ЗначенияДатчиков = ПолучитьДанныеДатчикаПоКалибровочномуГрафику(ЗначениеДатчика, ТабСтр.КалибровочныйГрафикДатчика);	
			КонецЕсли; 		
		КонецЕсли;  	
	КонецЦикла;	

	// Создание внешнего объекта для использования в СКД.
	ВнешниеДанные = Новый Структура;
	ВнешниеДанные.Вставить("ТабРезультат", ТабРезультат);
	
	// Компоновка макета.
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, Настройки, ДанныеРасшифровки);
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеДанные, ДанныеРасшифровки);
	
	// Вывод данных.
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
		
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьДанныеДатчикаПоКалибровочномуГрафику(Данные, КалибровочныйГрафик)
	
	Если ЗначениеЗаполнено(КалибровочныйГрафик) Тогда
		Результат = ItobКалькуляцияПараметровВыработки.ПреобразоватьЗначениеПоКалибровочномуГрафику(Данные, КалибровочныйГрафик);
	Иначе
		Результат = Данные;	
	КонецЕсли;
	
	
	Возврат Результат;
	
КонецФункции

Функция ТаблицаБазовыхДанных(ДатаUTC0)
		
	СводныеДанныеССервераСбораДанных = Новый ТаблицаЗначений;
	СводныеДанныеССервераСбораДанных.Колонки.Добавить("КодТерминала", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(5,0)));
	СводныеДанныеССервераСбораДанных.Колонки.Добавить("Период", Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	СводныеДанныеССервераСбораДанных.Колонки.Добавить("Широта", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10,7)));
	СводныеДанныеССервераСбораДанных.Колонки.Добавить("Долгота", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(10,7)));
	СводныеДанныеССервераСбораДанных.Колонки.Добавить("Скорость", Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(3,0)));
	СводныеДанныеССервераСбораДанных.Колонки.Добавить("СерверСбораДанных", Новый ОписаниеТипов("СправочникСсылка.ItobСерверыСбораДанных"));
	СводныеДанныеССервераСбораДанных.Колонки.Добавить("ДанныеДатчиков_Обработанные", Новый ОписаниеТипов("Соответствие"));
	СводныеДанныеССервераСбораДанных.Колонки.Добавить("Местоположение", Новый ОписаниеТипов("Строка",, Новый КвалификаторыСтроки(500)));
	СводныеДанныеССервераСбораДанных.Индексы.Добавить("КодТерминала, СерверСбораДанных");
	
	ЗапросТерминалы = Новый Запрос;
	ЗапросТерминалы.УстановитьПараметр("НаДату", ДатаUTC0);
	ЗапросТерминалы.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ItobТерминалы.Ссылка КАК Терминал,
	|	ItobТерминалы.Код КАК КодТерминала,
	|	ItobТерминалы.СерверСбораДанных КАК СерверСбораДанных
	|ИЗ
	|	Справочник.ItobТерминалы КАК ItobТерминалы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ItobПривязкиТрекеров.СрезПоследних(&НаДату, ) КАК ItobПривязкиТрекеровСрезПоследних
	|		ПО ItobТерминалы.Ссылка = ItobПривязкиТрекеровСрезПоследних.Терминал
	|ГДЕ
	|	ItobПривязкиТрекеровСрезПоследних.ТерминалУстановлен
	|	И НЕ ЕСТЬNULL(ItobТерминалы.СерверСбораДанных.Отключить, ИСТИНА)
	|ИТОГИ ПО
	|	СерверСбораДанных";
	
	ВыборкаСерверыСбораДанных = ЗапросТерминалы.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока ВыборкаСерверыСбораДанных.Следующий() Цикл
		ВыборкаДанныеЗапроса = ВыборкаСерверыСбораДанных.Выбрать();
		КодыТерминалов = Новый Массив;
		Пока ВыборкаДанныеЗапроса.Следующий() Цикл
			КодыТерминалов.Добавить(ВыборкаДанныеЗапроса.КодТерминала);
		КонецЦикла;
		
		ПараметрыЗапроса = ItobРепликация.ПараметрыЗапросаМестоположенияТерминалов();
		ПараметрыЗапроса.ИсточникНастроекСервераСбораДанных = ВыборкаСерверыСбораДанных.СерверСбораДанных;
		ПараметрыЗапроса.НаДату = ДатаUTC0;
		ПараметрыЗапроса.ПреобразоватьПериодКUTC0 = Ложь;
		ПараметрыЗапроса.КодыТерминалов = КодыТерминалов;
		ПараметрыЗапроса.ОпределятьМестоположение = Истина;
		ПараметрыЗапроса.ТребуемыйФорматДанныхДатчиков = Перечисления.ItobВариантыПолученияДанныхДатчиков.ОбработанныеДанные;
		ДанныеССервераСбораДанных = ItobРепликация.МестоположениеТерминалов(ПараметрыЗапроса);
		
		ДанныеССервераСбораДанных.Колонки.Добавить("СерверСбораДанных", Новый ОписаниеТипов("СправочникСсылка.ItobСерверыСбораДанных"));
		ДанныеССервераСбораДанных.ЗаполнитьЗначения(ВыборкаСерверыСбораДанных.СерверСбораДанных, "СерверСбораДанных");
		
		ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ДанныеССервераСбораДанных, СводныеДанныеССервераСбораДанных);
	КонецЦикла;
	
	
	Возврат СводныеДанныеССервераСбораДанных;
	
КонецФункции

Функция ПодобратьЗначенияДатчиковИзБазовыхДанных(КодТерминала, СерверСбораДанных, ТаблицаБазовыхДанных)
	
	ДанныеДатчиков = Новый Соответствие;
	
	Строки = ТаблицаБазовыхДанных.НайтиСтроки(Новый Структура("КодТерминала, СерверСбораДанных", КодТерминала, СерверСбораДанных));
	Если ЗначениеЗаполнено(Строки) Тогда
		ДанныеДатчиков = Строки[0].ДанныеДатчиков_Обработанные;		
	КонецЕсли; 
	
	
	Возврат ДанныеДатчиков;
	
КонецФункции
 
#КонецОбласти

#КонецЕсли
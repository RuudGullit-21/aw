
#Область Переменные

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

#КонецОбласти

#Область ОбработчикиСобытийФормы

// Обработчик события "При создании на сервере" формы
//
&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьСписокВыбораДатчикаТоплива();
	
	СписокПараметров = Неопределено;
	
	ПолеHTML = 
	"<html><head>
	|<meta http-equiv=""content-type"" content=""text/html; charset=UTF-8"">
	|<title>Отчет по топливу</title>
	|<script type=""text/javascript"">
	|var chart1 = null;
	|</script>
	|</head>
	|<body>
	|<div id=""container"" style=""min-width: 310px; height: 400px; margin: 0 auto"" data-highcharts-chart=""0""></div>
	|<div id=""footer"">
	|      <form name=""form"" method=""get"" style=""visibility:hidden; height:0px; background-color:#FF0000;"">
	|        <input name=""result"" type=""hidden"" value="""" />
	|        <input id=""event_to_1c"" name=""event_to_1c""  type=""hidden"" value="""" />
	|      </form>
	|    </div>
	|</body></html>";
	
	Если Параметры.Свойство("СписокПараметров", СписокПараметров) Тогда
		
		Для каждого ЭлСписка Из СписокПараметров Цикл
			
			ЭтотОбъект[ЭлСписка.Представление] = ЭлСписка.Значение; 
			
		КонецЦикла;
		
		ФормироватьПриОткрытии = Истина;
		
	КонецЕсли;
	
КонецПроцедуры // ПриСозданииНаСервере()

// Процедура - обработчик события "ПриОткрытии" формы.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если НЕ ЗначениеЗаполнено(НачПериода) И НЕ ЗначениеЗаполнено(КонПериода) Тогда
		
		НачПериода = НачалоДня(ТекущаяДата());
		КонПериода = ТекущаяДата();
		
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Метод) Тогда
		Метод = "Пробег";
	КонецЕсли;
	
	ЗаполнитьСписокДатчиков();
	ЗаполнитьСписокВыбораДатчикаТоплива();
	
	Если ФормироватьПриОткрытии Тогда
		Сформировать(Неопределено);
	КонецЕсли;
	
КонецПроцедуры // ПриОткрытии()

// Процедура - обработчик события "Регулирование" поля "НачПериода" таблицы.
//
&НаКлиенте
Процедура НачПериодаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	НачПериода = НачПериода + Направление*24*3600;	
	
КонецПроцедуры // НачПериодаРегулирование()

// Процедура - обработчик события "Регулирование" поля "КонПериода" таблицы.
//
&НаКлиенте
Процедура КонПериодаРегулирование(Элемент, Направление, СтандартнаяОбработка)
	
	КонПериода = КонПериода + Направление*24*3600;
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // КонПериодаРегулирование()

// Процедура - обработчик события "ОбработкаВыбора" поля "КонПериода" таблицы.
//
&НаКлиенте
Процедура КонПериодаОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ВыбранноеЗначение = КонецДня(ВыбранноеЗначение);
	КонПериода = ВыбранноеЗначение;
	
	//Элемент.УстановитьГраницыВыделения(1,СтрДлина(Элемент.ТекстРедактирования));
	//Элемент.ВыделенныйТекст = Строка(ВыбранноеЗначение);
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры // КонПериодаОбработкаВыбора()

// Процедура - обработчик события "ПриИзменении" поля "Объект".
//
&НаКлиенте
Процедура ОбъектПриИзменении(Элемент)
	
	ЗаполнитьСписокДатчиков();
	ЗаполнитьСписокВыбораДатчикаТоплива();
	
КонецПроцедуры

&НаКлиенте
Процедура ПолеHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	Если СтрНайти(ДанныеСобытия.Element.id, "p_") > 0 Тогда
		НомерСтроки = Сред(ДанныеСобытия.Element.id, 3, 1);
		elem = ДанныеСобытия.Document.getElementById("p_" + НомерСтроки + "_2");
		СтрокаДаты = Лев(elem.innerText, 10);
		Массив = СтроковыеФункцииКлиентСервер.РазложитьСтрокуВМассивСлов(СтрокаДаты, ".");
		Если Не Массив.Количество() = 3 Тогда
			Возврат;
		КонецЕсли;
		Попытка
			ДатаЗаправкиСлива = Дата(Число(Массив[2]), Число(Массив[1]), Число(Массив[0])); 
		Исключение
			Возврат;
		КонецПопытки;
		
		Расшифровка = Новый Структура("НачПериода, КонПериода, Объект", НачалоДня(ДатаЗаправкиСлива), КонецДня(ДатаЗаправкиСлива), Объект);
		
		ПоказатьОповещениеПользователя("Формирование отображения заправки/слива на карте...");
		Оповестить("РежимЗаправокСливов", Расшифровка);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура - обработчик команды "УстановитьИнтервал".
//
&НаКлиенте
Процедура УстановитьИнтервал(Команда)
	
	Диалог = Новый ДиалогРедактированияСтандартногоПериода();
	
	Диалог.Период.ДатаНачала = НачПериода;
	Диалог.Период.ДатаОкончания = КонПериода;
	
	Диалог.Показать(Новый ОписаниеОповещения("УстановитьИнтервалЗавершение", ЭтотОбъект, Новый Структура("Диалог", Диалог)));
	
КонецПроцедуры

// Процедура - обработчик события СформироватьОтчет
//
&НаКлиенте
Процедура Сформировать(Команда)
	
	Если НачПериода = '00010101' Тогда
		ПоказатьПредупреждение(, "Не указано начало периода", 30);
		Возврат;
		
	ИначеЕсли КонПериода = '00010101' Тогда
		ПоказатьПредупреждение(, "Не указан конец периода", 30);
		Возврат;
		
	ИначеЕсли НЕ ЗначениеЗаполнено(Объект) Тогда
		ПоказатьПредупреждение(, "Не указан объект", 30);
		Возврат;
		
	ИначеЕсли НЕ ЗначениеЗаполнено(ДатчикТоплива) Тогда
		ПоказатьПредупреждение(, "Не указан датчик топлива", 30);
		Возврат;
		
	КонецЕсли;
	
	ОтключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания");
	РезультатВыполнения = ВыполнитьФоновоеЗаданиеНаСервере();
	
	Если РезультатВыполнения.Статус = "Выполнено" Тогда    
		ПолеHTML = ПолучитьИзВременногоХранилища(АдресХранилища);
	ИначеЕсли РезультатВыполнения.Статус = "Ошибка" Тогда    
		ПоказатьПредупреждение(, РезультатВыполнения.ПодробноеПредставлениеОшибки);
		ПолеHTML = "";
	Иначе
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);  
		
		Элементы.ПолеHTML.Видимость = Ложь;
		Элементы.ИндикаторСостояния.Видимость      = Истина;
		ОтображениеСостояния = Элементы.ИндикаторСостояния.ОтображениеСостояния;
		ОтображениеСостояния.Видимость                      = Истина;
		ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность;
		ОтображениеСостояния.Картинка                       = БиблиотекаКартинок.ДлительнаяОперация48;
		ОтображениеСостояния.Текст                          = НСтр("ru = 'Отчет формируется...'; en = 'Generating the report...'");
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура График(Команда)
	
	// Проверяем заполненность параметров отчета.
	Если ЗначениеЗаполнено(Объект) И ЗначениеЗаполнено(ДатчикТоплива) Тогда
		
		// Получаем калибровочный график.
		ПараметрыДатчикаТоплива = ItobОтчетыВызовСервера.ПолучитьПараметрыДатчикаТоплива(Объект, ДатчикТоплива, НачПериода);
		КалибровочныйГрафик = ПараметрыДатчикаТоплива.КалибровочныйГрафик;
		Если ЗначениеЗаполнено(КалибровочныйГрафик) Тогда
			
			// Если калибровочный график в наличии, то открываем его форму.
			ПараметрыОткрытия = Новый Структура("Ключ", КалибровочныйГрафик);
			ОткрытьФорму("Справочник.ItobКалибровочныеГрафики.Форма.ФормаЭлемента", ПараметрыОткрытия, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьСписокДатчиков()
	
	ДатчикЗажиганияНайден = Ложь;
	
	Датчики.Очистить();
	
	Если НЕ ЗначениеЗаполнено(Объект) Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("НачДата", НачПериода);
	Запрос.УстановитьПараметр("Объект", Объект);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ItobТерминалыДатчики.Датчик КАК Датчик,
	|	ItobТерминалыДатчики.Датчик.Код КАК КодДатчика
	|ИЗ
	|	Справочник.ItobТерминалы.Датчики КАК ItobТерминалыДатчики
	|ГДЕ
	|	ItobТерминалыДатчики.Ссылка В
	|			(ВЫБРАТЬ
	|				ItobПривязкиТрекеровСрезПоследних.Терминал
	|			ИЗ
	|				РегистрСведений.ItobПривязкиТрекеров.СрезПоследних(&НачДата, Объект = &Объект) КАК ItobПривязкиТрекеровСрезПоследних
	|			ГДЕ
	|				ItobПривязкиТрекеровСрезПоследних.ТерминалУстановлен)
	|	И ItobТерминалыДатчики.Назначение = ЗНАЧЕНИЕ(Справочник.ItobНазначенияДатчиков.Зажигание)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ДатчикЗажигания = Выборка.Датчик;
		ИмяКолонкиЗначениеДатчикЗажигания = "Значение" + Выборка.КодДатчика;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокВыбораДатчикаТоплива()
	
	Если Не ЗначениеЗаполнено(Объект) Тогда
		Возврат;
	КонецЕсли;
	
	// Получаем элемент формы "Датчик топлива".
	ЭлементДатчикТоплива = Элементы.ДатчикТоплива;
	
	// Отчищаем список выбора элемента формы "Датчик топлива".
	ЭлементДатчикТоплива.СписокВыбора.Очистить();
	
	// Получаем список выбора для датчика топлива.
	СписокВыбора = ItobОтчеты.ОтчетПоТопливуСписокВыбораДатчиков(Объект, НачПериода);
	
	// Заполняем список выбора датчика топлива.
	Для Каждого ЭлементСпискаВыбора Из СписокВыбора Цикл
		ЭлементДатчикТоплива.СписокВыбора.Добавить(ЭлементСпискаВыбора.Значение, ЭлементСпискаВыбора.Представление);
	КонецЦикла; 
	
	// Обновляем значение и список выбора датчика топлива. 
	РазмерСпискаБольше0 = ЭлементДатчикТоплива.СписокВыбора.Количество() > 0;
	Если РазмерСпискаБольше0 Тогда
		Если ЭлементДатчикТоплива.СписокВыбора.Количество() > 1 Тогда
			ЭлементДатчикТоплива.СписокВыбора.Вставить(0, "ПоВсем", НСтр("ru = 'По всем'; en = 'All'"));			
		КонецЕсли;
		ДатчикТоплива = ЭлементДатчикТоплива.СписокВыбора[0].Значение;
	КонецЕсли;
	
	// Обновляем доступность датчика топлива.
	ЭлементДатчикТоплива.Доступность = РазмерСпискаБольше0;
	
КонецПроцедуры	

&НаКлиенте
Процедура УстановитьИнтервалЗавершение(Период, ДополнительныеПараметры) Экспорт
	
	Если Не Период = Неопределено Тогда
		
		НачПериода = Период.ДатаНачала;
		КонПериода = Период.ДатаОкончания;
		
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ВыполнитьФоновоеЗаданиеНаСервере()
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);    
	ИдентификаторЗадания = Неопределено;
	
	ОтчетОбъект = РеквизитФормыВЗначение("Отчет"); 
	
	ТаблицаДатчиков = Новый ТаблицаЗначений;
	ТаблицаДатчиков.Колонки.Добавить("ИмяКолонкиЗначение");
	ТаблицаДатчиков.Колонки.Добавить("КодДатчика");
	ТаблицаДатчиков.Колонки.Добавить("Назначение");
	ТаблицаДатчиков.Колонки.Добавить("КалибровочныйГрафик");
	ТаблицаДатчиков.Колонки.Добавить("Представление");
	
	МассивДатчиков = Новый Массив;
	Если ЗначениеЗаполнено(ДатчикЗажигания) Тогда
		МассивДатчиков.Добавить(ДатчикЗажигания);
	КонецЕсли;
	
	Стр = ТаблицаДатчиков.Добавить();
	Стр.ИмяКолонкиЗначение = "Скорость";
	Стр.Представление = "Скорость";
	
	Стр = ТаблицаДатчиков.Добавить();
	Стр.ИмяКолонкиЗначение = "ЗначениеСглаженное";
	Стр.КодДатчика = ?(ДатчикТоплива = "ПоВсем", "", ДатчикТоплива.Код);
	Стр.Назначение = Справочники.ItobНазначенияДатчиков.Топливо;
	Стр.Представление = "Топливо";
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("АдресРезультата", АдресХранилища);
	СтруктураПараметров.Вставить("НачПериода", НачПериода);
	СтруктураПараметров.Вставить("КонПериода", КонПериода);
	СтруктураПараметров.Вставить("Объект", Объект);
	СтруктураПараметров.Вставить("Метод", Метод);
	СтруктураПараметров.Вставить("МассивДатчиков", МассивДатчиков);    
	СтруктураПараметров.Вставить("ИмяКолонкиЗначениеДатчикЗажигания", ИмяКолонкиЗначениеДатчикЗажигания);
	СтруктураПараметров.Вставить("ДатчикТоплива", ДатчикТоплива);
	СтруктураПараметров.Вставить("ТаблицаДатчиков", ТаблицаДатчиков);
	СтруктураПараметров.Вставить("АдресСервисаCsmSvcКлиент", ItobОперативныйМониторинг.ПолучитьАдресСервисаCsmSvcКлиент());
	СтруктураПараметров.Вставить("НавигационнаяСсылкаИнформационнойБазы", ПолучитьНавигационнуюСсылкуИнформационнойБазы());
	
	ПараметрыВыполнения  = ДлительныеОперации.ПараметрыВыполненияВФоне(ЭтотОбъект.УникальныйИдентификатор);
	РезультатВыполнения  = ДлительныеОперации.ВыполнитьВФоне("Отчеты.ItobОтчетПоТопливуИнтерактивныйВыборИнтервала.СформироватьОтчет", СтруктураПараметров, ПараметрыВыполнения); 
	
	ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
	АдресХранилища       = РезультатВыполнения.АдресРезультата;    
	
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда 
			ПолеHTML = ПолучитьИзВременногоХранилища(АдресХранилища);
			Элементы.ПолеHTML.Видимость = Истина;
			Элементы.ИндикаторСостояния.Видимость = Ложь;
			
			ОтображениеСостояния = Элементы.ИндикаторСостояния.ОтображениеСостояния;
			ОтображениеСостояния.Видимость = Ложь;
			ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;
			
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 
			ПараметрыОбработчикаОжидания.ТекущийИнтервал, Истина);
		КонецЕсли;
	Исключение        
		ВызватьИсключение;
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)    
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);    
КонецФункции

#КонецОбласти

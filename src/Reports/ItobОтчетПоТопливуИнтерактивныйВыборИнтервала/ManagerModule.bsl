#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Настройки размещения в панели отчетов.
//
// Параметры:
//   Настройки - Коллекция - Используется для описания настроек отчетов и вариантов
//       см. описание к ВариантыОтчетов.ДеревоНастроекВариантовОтчетовКонфигурации().
//   НастройкиОтчета - СтрокаДереваЗначений - Настройки размещения всех вариантов отчета.
//       См. "Реквизиты для изменения" функции ВариантыОтчетов.ДеревоНастроекВариантовОтчетовКонфигурации().
//
// Описание:
//   См. ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов().
//
// Вспомогательные методы:
//   НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "<ИмяВарианта>");
//   ВариантыОтчетов.УстановитьРежимВыводаВПанеляхОтчетов(Настройки, НастройкиОтчета, Истина/Ложь); // Отчет
//   поддерживает только этот режим.
//
Процедура НастроитьВариантыОтчета(Настройки, НастройкиОтчета) Экспорт
	
	//НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "ОтчетПоТопливуИнтерактивныйВыборИнтервала");
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "");
	НастройкиВарианта.Описание = НСтр("ru = 'Отчет по топливу (с поддержкой интерактивного выбора интервала)'");
	
КонецПроцедуры

#КонецОбласти

#Область ПрограммныйИнтерфейс

// Процедура формирует отчет
//
// Параметры:
//  СтруктураПараметров	 - Структура - параметры.
//  АдресРезультата		 - Строка	 - адрес во временном хранилище.
//
&НаСервере
Процедура СформироватьОтчет(СтруктураПараметров, АдресРезультата) Экспорт
	
	Перем ТаблицаДанные, ТаблицаЗаправки, ТекстОшибки;
	
	ТекстОшибкиПроверкиHTML = ItobОперативныйМониторинг.ВыполнитьПроверкуCsmSvc();
	Если ЗначениеЗаполнено(ТекстОшибкиПроверкиHTML) Тогда
		ПоместитьВоВременноеХранилище(ТекстОшибкиПроверкиHTML, АдресРезультата);
		Возврат ;		
	КонецЕсли; 
	
	ПараметрыДатчикаТоплива = ItobОтчеты.ПолучитьПараметрыДатчикаТоплива(СтруктураПараметров.Объект, СтруктураПараметров.ДатчикТоплива, СтруктураПараметров.НачПериода);
	Терминал            = ПараметрыДатчикаТоплива.Терминал;
	КалибровочныйГрафик = ПараметрыДатчикаТоплива.КалибровочныйГрафик;
	
	Если НЕ ЗначениеЗаполнено(Терминал) Тогда
		ПоместитьВоВременноеХранилище(ТекстОшибкиHTML(НСтр("ru = 'К объекту не привязан терминал!'")), АдресРезультата);
		Возврат ;
	КонецЕсли;
			
	Если НЕ ЗначениеЗаполнено(КалибровочныйГрафик) И НЕ СтруктураПараметров.ДатчикТоплива = "ПоВсем"  Тогда
		ПоместитьВоВременноеХранилище(ТекстОшибкиHTML(НСтр("ru = 'Для терминала объекта не указан калибровочный график!'")), АдресРезультата);
		Возврат ;
	КонецЕсли;
	
	пПараметры = Новый Структура;
	пПараметры.Вставить("НачПериода", 	СтруктураПараметров.НачПериода);
	пПараметры.Вставить("КонПериода ", 	СтруктураПараметров.КонПериода);
	пПараметры.Вставить("Объект", 		СтруктураПараметров.Объект);
	пПараметры.Вставить("Метод", 		СтруктураПараметров.Метод);
	Если НЕ ItobОбработкаДанныхТопливоВызовСервера.ПолучитьДанныеТопливо(
			пПараметры, ТаблицаДанные, ТаблицаЗаправки, ТекстОшибки, СтруктураПараметров.ДатчикТоплива,, СтруктураПараметров.МассивДатчиков) Тогда
		ПоместитьВоВременноеХранилище(ТекстОшибкиHTML(ТекстОшибки), АдресРезультата);
	 	Возврат ;
	КонецЕсли;
			
	СтрокаДискретныеИнтервалы = "";
	Если НЕ ПустаяСтрока(СтруктураПараметров.ИмяКолонкиЗначениеДатчикЗажигания) Тогда
		
		ТабДискретныхИнтервалов = ПолучитьТабДискретныхИнтервалов(ТаблицаДанные, СтруктураПараметров.ИмяКолонкиЗначениеДатчикЗажигания);
		
		Шаблон = "{
		|	from: Date.UTC(%1),
		|	to: Date.UTC(%2),
		|	color: 'rgba(255,246,0,0.5)'
		|}";
		
		МассивСтрок = Новый Массив;
		
		Для Каждого СтрокаИнтервала Из ТабДискретныхИнтервалов Цикл
			
			Если НЕ СтрокаИнтервала.Значение = 1 Тогда
				Продолжить;					
			КонецЕсли;
			
			МассивСтрок.Добавить( СтрШаблон(Шаблон, ДатаСтрокойДляJS(СтрокаИнтервала.НачДата), ДатаСтрокойДляJS(СтрокаИнтервала.КонДата)) );
			
		КонецЦикла;	
		
		СтрокаДискретныеИнтервалы = СтрСоединить(МассивСтрок, "," + Символы.ПС); 
		
	КонецЕсли;
	
	Если Не ПустаяСтрока(СтрокаДискретныеИнтервалы) Тогда
		СтрокаДискретныеИнтервалы = "plotBands: [" + СтрокаДискретныеИнтервалы + "],";	
	КонецЕсли;
	
	СтрокаДанныеДатчиков = "";
	СтрокаПредставлениеДатчиков = "";
	МассивДанныеДатчиков = Новый Массив;
	
	Для Каждого СтрокаТаблицыДатчиков Из СтруктураПараметров.ТаблицаДатчиков Цикл
		
		ИмяКолонкиЗначение = СтрокаТаблицыДатчиков.ИмяКолонкиЗначение;
		
		ПреобразоватьПоГрафику = Неопределено;
		Если ЗначениеЗаполнено(СтрокаТаблицыДатчиков.КалибровочныйГрафик) Тогда
			ПреобразоватьПоГрафику = СтрокаТаблицыДатчиков.КалибровочныйГрафик;
			ТаблицаДанные.Колонки.Добавить("П_"+ИмяКолонкиЗначение);
		КонецЕсли;
		
		ТекСтрокаДанные = "";
		МассивСтрокДанных = Новый Массив;
		Если СтрокаТаблицыДатчиков.Назначение = Справочники.ItobНазначенияДатчиков.Топливо Тогда
			yAxis = 1;
			valueSuffix = "л";
		Иначе
			yAxis = 0;
			valueSuffix = "км/ч";
		КонецЕсли; 
		Шаблон = "[Date.UTC(%1), %2]";
		Для Каждого СтрДанныхДатчика Из ТаблицаДанные Цикл
			ТекЗначениеДатчика = СтрДанныхДатчика[ИмяКолонкиЗначение];
			Если ТекЗначениеДатчика = Неопределено Тогда
				Продолжить;					
			КонецЕсли;
			Если НЕ ПреобразоватьПоГрафику = Неопределено Тогда
				ТекЗначениеДатчика = Окр(ItobКалькуляцияПараметровВыработки.ПреобразоватьЗначениеПоКалибровочномуГрафику(ТекЗначениеДатчика, ПреобразоватьПоГрафику),2);
				СтрДанныхДатчика["П_"+ИмяКолонкиЗначение] = ТекЗначениеДатчика;
			КонецЕсли;
			
			ДобСтрока = СтрШаблон(Шаблон, ДатаСтрокойДляJS(СтрДанныхДатчика.Период), Формат(ТекЗначениеДатчика,"ЧРД=.; ЧН=0; ЧГ=0")); 
			
			МассивСтрокДанных.Добавить(ДобСтрока);
			
		КонецЦикла;
		
		ТекСтрокаДанные = СтрСоединить(МассивСтрокДанных, "," + Символы.ПС);
		
		Шаблон = "{
		|	name: '%1',
		|   data: [%2],
		|	yAxis: %3,
		|	tooltip: {
      	|		valueSuffix: ' %4'
    	|	}
		|}";
		
		ТекСтрокаДанные = СтрШаблон(Шаблон, СтрокаТаблицыДатчиков.Представление, ТекСтрокаДанные, yAxis, valueSuffix);
		
		МассивДанныеДатчиков.Добавить(ТекСтрокаДанные);
		
		СтрокаПредставлениеДатчиков = ?(СтрокаПредставлениеДатчиков="","",СтрокаПредставлениеДатчиков+", ")+СтрокаТаблицыДатчиков.Представление;
		
	КонецЦикла;	
	
	СтрокаДанныеДатчиков = СтрСоединить(МассивДанныеДатчиков, "," + Символы.ПС);
	
	ТекстСкрипта = 
		"<html><head>
		|<meta http-equiv=""content-type"" content=""text/html; charset=UTF-8"">
		//|<meta http-equiv=""X-UA-Compatible"" content=""IE=10,chrome=1"">
		|<title>Отчет по топливу</title>
		|<script type=""text/javascript"" src=""http://127.0.0.1:8091/charts/prototype.js""></script>
		|<script type=""text/javascript"" src=""http://127.0.0.1:8091/charts/prototype-adapter.js""></script>
		|<script type=""text/javascript"" src=""http://127.0.0.1:8091/charts/highcharts.rus.src.js""></script>
		|<script type=""text/javascript"" src=""http://127.0.0.1:8091/charts/exporting.js""></script>
		|<script type=""text/javascript"">
		|var chart1 = null;
		|document.observe(""dom:loaded"", function() {
		|    chart1 = new Highcharts.Chart({
		|        chart : {
		|		  renderTo : 'container',
		|		  type     : 'line',
		|		  zoomType: 'x'
		|		},
		|		title: {
		|            text: 'Отчет по топливу за "+Строка(ПредставлениеПериода(СтруктураПараметров.НачПериода,СтруктураПараметров.КонПериода))+"',
		|            x: -20, //center
		|            style: {""fontSize"": ""14px""}
		|       },
		|		subtitle: {
		|            text: 'Объект: "+СокрЛП(СтруктураПараметров.Объект)+", датчики: "+СтрокаПредставлениеДатчиков+"',
		|            x: -20
		|       },
		|		exporting: {
		|		     enabled: false
		|		},
		|		tooltip: {
		|            crosshairs: true,
		|            shared: true
		|       },
		|       xAxis: {
		|			type: 'datetime',
		|			"+СтрокаДискретныеИнтервалы+"
		|			title: {
		|				text: 'Период'
		|			}
		|		},
		|		yAxis: [{ // Primary yAxis
		|			labels: {
		|				format: '{value}км/ч'
		|			},
		|			title: {
		|				text: 'Скорость'
		|			},
		|			opposite: true,
		|			min: 0
		|
		|		}, { // Secondary yAxis
		|			gridLineWidth: 0,
		|			title: {
		|				text: 'Топливо'
		|			},
		|			labels: {
		|				format: '{value} л'
		|			},
		|			min: 0
		|
		|		}],
		|		legend: {
		|            layout: 'vertical',
		|            align: 'right',
		|            verticalAlign: 'middle',
		|            borderWidth: 0
		|       },
		|		series: ["+СтрокаДанныеДатчиков+"
		|       ]
		|    });
		|});
		|</script>
		|<style type=""text/css"">
        |	table {
        |    	width: 100%;
        |    	border-collapse: collapse; 
        |	}
		|
        |	th {
        |    	background: #ccc;
        |    	text-align: center; 
       	| 	}
		|
        |	td, th {
        |    	border: 1px solid #800; 
        |    	padding: 4px;
        |	}
    	|</style>
		|</head>
		|<body>
		|<div id=""container"" style=""min-width: 310px; height: 400px; margin: 0 auto"" data-highcharts-chart=""0""></div>
		|<div id=""footer"">
		|      <form name=""form"" method=""get"" style=""visibility:hidden; height:0px; background-color:#FF0000;"">
		|        <input name=""result"" type=""hidden"" value="""" />
		|        <input id=""event_to_1c"" name=""event_to_1c""  type=""hidden"" value="""" />
		|      </form>
		|    </div>
		|ТаблицаЗаправки 
		|</body></html>";
	
	//Если Не ПустаяСтрока(СтруктураПараметров.АдресСервисаCsmSvcКлиент) Тогда
	//	ТекстСкрипта = СтрЗаменить(ТекстСкрипта, "127.0.0.1:8091", СтруктураПараметров.АдресСервисаCsmSvcКлиент);
	//КонецЕсли;
	Если Не ПустаяСтрока(СтруктураПараметров.АдресСервисаCsmSvcКлиент) Тогда		
		АдресСервиса = СокрЛП(СтруктураПараметров.АдресСервисаCsmSvcКлиент);
		Сервер = Лев(АдресСервиса,  Найти(АдресСервиса,":") - 1);
		Порт   = Сред(АдресСервиса, Найти(АдресСервиса,":") + 1);
		Порт   = ?(ПустаяСтрока(Порт),8091,Число(Порт));		
		
		СсылкаБазы = СтруктураПараметров.НавигационнаяСсылкаИнформационнойБазы;
		Если НРег(Лев(СсылкаБазы,5)) = "https" Тогда
			Протокол = "https";
		Иначе
			Протокол = "http";
		КонецЕсли;
		
		АдресСервисаПолный = Протокол + "://" + АдресСервиса;		
		ТекстСкрипта = СтрЗаменить(ТекстСкрипта, "http://127.0.0.1:8091", АдресСервисаПолный);
	КонецЕсли;
	
	ТекстСкрипта = СтрЗаменить(ТекстСкрипта, "ТаблицаЗаправки", СформироватьТаблицуЗаправокHTML(СтруктураПараметров, ТаблицаЗаправки, ТаблицаДанные));	
	
	ПоместитьВоВременноеХранилище(ТекстСкрипта, АдресРезультата);

КонецПроцедуры // СформироватьОтчет()

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ДатаСтрокойДляJS(Дата)
	
	// Месяц в javascript идет с 0 до 11.
	Месяц = Месяц(Дата) - 1;
	МесяцСтрокой = ?(Месяц > 9, Строка(Месяц), "0" + Строка(Месяц));
	
	ДатаСтрокой = Формат(Дата, СтрШаблон("ДФ=yyyy,%1,dd,HH,mm,ss", МесяцСтрокой));
	
	Возврат ДатаСтрокой;
	
КонецФункции

&НаСервере
Функция ПолучитьТабДискретныхИнтервалов(ТабДанныхДатчиков, ИмяКолонкиЗначение)

	ТабДанных = Новый ТаблицаЗначений;
	ТабДанных.Колонки.Добавить("НачДата");
	ТабДанных.Колонки.Добавить("КонДата");	
	ТабДанных.Колонки.Добавить("Значение");
	ТабДанных.Колонки.Добавить("Продолжительность");
	ТабДанных.Колонки.Добавить("Широта");
	ТабДанных.Колонки.Добавить("Долгота");
		
	Если ТабДанныхДатчиков.Количество() > 0 Тогда
						
		СтрокаНачалаДиапазона = ТабДанныхДатчиков[0];
		
		Для Счетчик = 1 По ТабДанныхДатчиков.Количество()-1 Цикл
			
			Если ТабДанныхДатчиков[Счетчик][ИмяКолонкиЗначение] <> СтрокаНачалаДиапазона[ИмяКолонкиЗначение]
				ИЛИ Счетчик = ТабДанныхДатчиков.Количество()-1 Тогда
				
				НовСтрокаДанных = ТабДанных.Добавить();
				НовСтрокаДанных.НачДата  = СтрокаНачалаДиапазона.Период;
				НовСтрокаДанных.КонДата  = ТабДанныхДатчиков[Счетчик].Период-?(Счетчик = ТабДанныхДатчиков.Количество()-1,0,1);				
				НовСтрокаДанных.Значение = СтрокаНачалаДиапазона[ИмяКолонкиЗначение];
				НовСтрокаДанных.Широта   = СтрокаНачалаДиапазона.Широта;
				НовСтрокаДанных.Долгота  = СтрокаНачалаДиапазона.Долгота;
				НовСтрокаДанных.Продолжительность = НовСтрокаДанных.КонДата - НовСтрокаДанных.НачДата + 1;
				
				СтрокаНачалаДиапазона = ТабДанныхДатчиков[Счетчик];
				
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ТабДанных;

КонецФункции // ПолучитьТабДискретныхИнтервалов()

&НаСервере
Функция СформироватьТаблицуЗаправокHTML(СтруктураПараметров, ТаблицаЗаправки, ТаблицаДанные)
	
	РадиусФиксацииПоУмолчанию = ItobВызовСервераПовтИсп.ПолучитьРадиусЗоныПриходаНаТочку(50);
	
	ТекстТаблицы = "";
	ИтогоТопливоПриход = 0;
	ИтогоТопливоРасход = 0;
	МассивСтрокЗаправки = Новый Массив;
	
	ТекстТаблицы = "<table>
	|
	|<th>№ пп</th>
	|<th width=""10%"">Период</th>
	|<th width=""10%"">V начальный</th>
	|<th width=""10%"">Заправка</th>
	|<th width=""10%"">Слив</th>
	|<th width=""10%"">V конечный</th>
	|<th width=""50%"">Место</th>
	|
	|СтрокиТаблицы
	|
	|</table>";
	
	Если ЗначениеЗаполнено(ТаблицаЗаправки) И ТаблицаЗаправки.Количество() > 0 Тогда
		
		Счетчик = 0;
		
		Для Каждого Стр Из ТаблицаЗаправки Цикл
			
			Счетчик = Счетчик + 1;
			
			п1 = Счетчик;
			п2 = Формат(Стр.Период,"ДФ='dd.MM.yyyy HH:mm'");
			п3 = Стр.ТопливоНачало;
			п4 = ?(Стр.ТопливоИзменение >= 0, Стр.ТопливоИзменение, 0);
			п5 = ?(Стр.ТопливоИзменение < 0, -Стр.ТопливоИзменение, 0);
			п6 = Стр.ТопливоКонец;
			п7 = ItobОперативныйМониторинг.НайтиБлижайшийАдрес(Стр.Широта, Стр.Долгота, РадиусФиксацииПоУмолчанию);
			
			СтрокаТаблицыЗаправки = "<tr>
			|<td id = """ + ("p_" + Счетчик + "_1") + """ style=""text-align: center; cursor: pointer"">" + п1 + "</td>
			|<td id = """ + ("p_" + Счетчик + "_2") + """ style=""text-align: center; cursor: pointer"">" + п2 + "</td>
			|<td id = """ + ("p_" + Счетчик + "_3") + """ style=""text-align: right; cursor: pointer"">" + п3 + "</td>
			|<td id = """ + ("p_" + Счетчик + "_4") + """ style=""text-align: right; cursor: pointer"">" + п4 + "</td>
			|<td id = """ + ("p_" + Счетчик + "_5") + """ style=""text-align: right; cursor: pointer"">" + п5 + "</td>
			|<td id = """ + ("p_" + Счетчик + "_6") + """ style=""text-align: right; cursor: pointer"">" + п6 + "</td>
			|<td id = """ + ("p_" + Счетчик + "_7") + """ style=""text-align: left; cursor: pointer"">" + п7 + "</td>
			|</tr>";
			
			МассивСтрокЗаправки.Добавить(СтрокаТаблицыЗаправки);
			
			ИтогоТопливоПриход = ИтогоТопливоПриход + ?(Стр.ТопливоИзменение >= 0, Стр.ТопливоИзменение, 0);
			ИтогоТопливоРасход = ИтогоТопливоРасход + ?(Стр.ТопливоИзменение < 0, -Стр.ТопливоИзменение, 0);
			
		КонецЦикла;
		
	КонецЕсли;
	
	СтрокаИтогов = "<tr>
	|<td colspan=""3"" style=""text-align: left; border: none""><b>ИТОГО</b></td>
	|<td style=""text-align: right; border: none"">" + ИтогоТопливоПриход + "</td>
	|<td style=""text-align: right; border: none"">" + ИтогоТопливоРасход + "</td>
	|</tr>
	|<br>
	|<p>";
	МассивСтрокЗаправки.Добавить(СтрокаИтогов);
	
	МассивДанныхТопливо = ТаблицаДанные.ВыгрузитьКолонку("ЗначениеСглаженное");
	iRes = -1;
	МассивДанныхНач = ItobОбработкаДанныхТопливоВызовСервера.ВыделитьЧастьМассива(МассивДанныхТопливо,3,3,iRes);
	ОбъемНаНачало = ItobОбработкаДанныхТопливоВызовСервера.ПолучитьМедиану(МассивДанныхНач);
	СтрокаОбъемНаНачало = "<tr>
	|<td colspan=""2"" style=""text-align: left; border: none""><b>Объем на начало, л:</b></td>
	|<td style=""text-align: right; border: none"">" + Окр(ОбъемНаНачало,0) + "</td>
	|</tr>";
	МассивСтрокЗаправки.Добавить(СтрокаОбъемНаНачало);
	
	ОбъемНаКонец = ТаблицаДанные[ТаблицаДанные.Количество()-1].ЗначениеСглаженное;
	СтрокаОбъемНаКонец = "<tr>
	|<td colspan=""2"" style=""text-align: left; border: none""><b>Объем на конец, л:</b></td>
	|<td style=""text-align: right; border: none"">" + Окр(ОбъемНаКонец,0) + "</td>
	|</tr>";
	МассивСтрокЗаправки.Добавить(СтрокаОбъемНаКонец);
	
	ОбщийРасходТоплива = ОбъемНаНачало-ОбъемНаКонец+ИтогоТопливоПриход-ИтогоТопливоРасход;
	СтрокаОбщийРасходТоплива = "<tr>
	|<td colspan=""2"" style=""text-align: left; border: none""><b>Израсходовано топлива, л:</b></td>
	|<td style=""text-align: right; border: none"">" + Окр(ОбщийРасходТоплива,0) + "</td>
	|</tr>";
	МассивСтрокЗаправки.Добавить(СтрокаОбщийРасходТоплива);
	
	Если СтруктураПараметров.Метод = "Пробег" Тогда
		ПробегОбщий = ItobОперативныйМониторинг.ПолучитьПробегОбъекта(СтруктураПараметров.Объект, СтруктураПараметров.НачПериода, СтруктураПараметров.КонПериода);		
	Иначе
		ПробегОбщий = ТаблицаДанные[ТаблицаДанные.Количество()-1].Пробег;
	КонецЕсли;
	СтрокаПробегОбщий = "<tr>
	|<td colspan=""2"" style=""text-align: left; border: none""><b>" + ?(СтруктураПараметров.Метод = "Пробег", "Пробег, км:", "Моточасы:") + "</b></td>
	|<td style=""text-align: right; border: none"">" + Окр(ПробегОбщий, 1) + "</td>
	|</tr>";
	МассивСтрокЗаправки.Добавить(СтрокаПробегОбщий);
	
	РасходТекст = ?(СтруктураПараметров.Метод = "Пробег", НСтр("ru = 'Средний расход, л/100км:'"), НСтр("ru = 'Средний расход, л/час:'"));
	СредКоэффициентРасхода = ?(ПробегОбщий < 0.1, "Неопределено", Окр(ОбщийРасходТоплива / (ПробегОбщий / ?(СтруктураПараметров.Метод = "Пробег", 100, 1)), 2));
	СтрокаСредКоэффициентРасхода = "<tr>
	|<td colspan=""2"" style=""text-align: left; border: none""><b>" + РасходТекст + "</b></td>
	|<td style=""text-align: right; border: none"">" + СредКоэффициентРасхода + "</td>
	|</tr>";
	МассивСтрокЗаправки.Добавить(СтрокаСредКоэффициентРасхода);
	
	ТекстТаблицы = СтрЗаменить(ТекстТаблицы, "СтрокиТаблицы", СтрСоединить(МассивСтрокЗаправки, Символы.ПС));
	
	Возврат ТекстТаблицы;
	
КонецФункции

&НаСервере
Функция ТекстОшибкиHTML(ТекстОшибки)
	
	ТекстСкрипта = 
		"<html><head>
		|<meta http-equiv=""content-type"" content=""text/html; charset=UTF-8"">
		|<title>Отчет по топливу</title>
		|<body>
		|<h1>" + ТекстОшибки + "</h1>
 
		|</body></html>";
	
	Возврат ТекстСкрипта;
	
КонецФункции

#КонецОбласти 

#КонецЕсли
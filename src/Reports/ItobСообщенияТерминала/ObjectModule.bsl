#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Настройки общей формы отчета подсистемы "Варианты отчетов".
//
// Параметры:
//   Форма - УправляемаяФорма - Форма отчета.
//   КлючВарианта - Строка - Имя предопределенного варианта отчета или уникальный идентификатор пользовательского.
//   Настройки - Структура - см. процедуру ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию.
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	
	Настройки.События.ПриСозданииНаСервере = Истина;
	
КонецПроцедуры

// Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//  
//  См. также:
//  "УправляемаяФорма.ПриСозданииНаСервере" в синтакс-помощнике.
//
// Параметры:
//  Форма				 - УправляемаяФорма	 - Форма отчета.
//  Отказ				 - Булево			 - Передается из параметров обработчика "как есть".
//  СтандартнаяОбработка - Булево			 - Передается из параметров обработчика "как есть".
//
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	// КЭШируем параметры формы.
	ПараметрыФормы = ItobОтчетыКлиентСерверПовтИсп.ПараметрыФормы(Строка(Форма.УникальныйИдентификатор));
	ПараметрыФормы.Очистить();
	Если Форма.Параметры.Свойство("СписокПараметров") Тогда
		ПараметрыФормы.Вставить("СписокПараметров", Форма.Параметры.СписокПараметров);
	КонецЕсли;
КонецПроцедуры

// Вызывается после перезаполнения панели настроек формы отчета.
//
// Параметры:
//  Форма				 - УправляемаяФорма	 - Форма отчета.
//  ПервоеОткрытиеФормы	 - Булево - Признак первого открытия формы.
//
Процедура ИзменитьФормуПослеСозданияЭлементовНастроек(Форма, ПервоеОткрытиеФормы) Экспорт
	
	// Проверяем, открывается ли нужная форма.
	Если Не Форма.ТипФормыОтчета = ТипФормыОтчета.Основная Или Не СтрНайти(Форма.ИмяФормы, "ФормаНастроек") = 0 Тогда // Если используется общая форма из БСП проверяем на имя.
	    Возврат;
	КонецЕсли;
		
	// Обновляем внешний вид элемента "Начало периода".
	ЭлементФормы = ItobОтчетыКлиентСервер.НайтиЭлементФормыПоЗаголовку(Форма, "Начало периода");
	ЭлементФормы.КнопкаРегулирования = Истина;
	ЭлементФормы.УстановитьДействие("Регулирование", "Подключаемый_ПолеВвода_Регулирование");
	
	// Обновляем внешний вид элемента "Конец периода".
	ЭлементФормы = ItobОтчетыКлиентСервер.НайтиЭлементФормыПоЗаголовку(Форма, "Конец периода");
	ЭлементФормы.КнопкаРегулирования = Истина;
	ЭлементФормы.УстановитьДействие("Регулирование", "Подключаемый_ПолеВвода_Регулирование");
	
	Если НЕ ПервоеОткрытиеФормы Тогда
		
		
		Возврат;
	КонецЕсли;
	
	// Получаем из КЭШа параметры формы.
	ПараметрыФормы = ItobОтчетыКлиентСерверПовтИсп.ПараметрыФормы(Строка(Форма.УникальныйИдентификатор));
	
	// Форма открыта без параметров.
	Если ПараметрыФормы.Количество() > 0 Тогда
		ПараметрыДанных = ItobОтчетыКлиентСервер.ПолучитьПараметрыДанных(Форма);
		
		// Заполняем передаваемые параметры.
		Для Каждого Параметр Из ПараметрыФормы.СписокПараметров Цикл
		    Если Параметр.Представление = "НачПериода" Тогда
			    ItobОтчетыКлиентСервер.УстановитьЗначениеПараметра(ПараметрыДанных, "НачПериода", Новый СтандартнаяДатаНачала(Параметр.Значение), НСтр("ru = 'Начало периода'; en = 'Beginning of period'"));
		    ИначеЕсли Параметр.Представление = "КонПериода" Тогда
			    ItobОтчетыКлиентСервер.УстановитьЗначениеПараметра(ПараметрыДанных, "КонПериода", Новый СтандартнаяДатаНачала(Параметр.Значение), НСтр("ru = 'Конец периода'; en = 'End of period'"));
		    ИначеЕсли Параметр.Представление = "Терминал" Тогда
			    ItobОтчетыКлиентСервер.УстановитьЗначениеПараметра(ПараметрыДанных, "Терминал", Параметр.Значение, НСтр("ru = 'Терминал'; en = 'Terminal'"));
			КонецЕсли; 
		КонецЦикла;	
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти  

	
#Область ОбработчикиСобытий

// Процедура обработчик события "ПриКомпоновкеРезультата" объекта
//
Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	// Сбрасываем параметр стандартной обработки.
	СтандартнаяОбработка = Ложь;
	
	КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ОтчетПустой", Истина);
	
	ПараметрыДанных = КомпоновщикНастроек.ПолучитьНастройки().ПараметрыДанных;
	
	// Инициализируем параметры отчета.
	НачПериода = ItobОтчетыКлиентСервер.ПолучитьЗначениеПараметра(ПараметрыДанных, "НачПериода", НСтр("ru = 'Начало периода'; en = 'Beginning of period'")).Дата;
	КонПериода = ItobОтчетыКлиентСервер.ПолучитьЗначениеПараметра(ПараметрыДанных, "КонПериода", НСтр("ru = 'Конец периода'; en = 'End of period'")).Дата;
	Терминал   = ItobОтчетыКлиентСервер.ПолучитьЗначениеПараметра(ПараметрыДанных, "Терминал", НСтр("ru = 'Терминал'; en = 'Terminal'"));
	
	// Формируем отчет по топливу.
	ТабличныйДокументРезультат = СформироватьОтчетСообщенияОтТерминала(
		НачПериода,
		КонПериода,
		Терминал);
		
	// Если нужно добавить параметры табличному документу - делаем это здесь.
	ДокументРезультат.Вывести(ТабличныйДокументРезультат)
	
КонецПроцедуры // ПриКомпоновкеРезультата()
  
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция выполняет формирование табличного документа отчета.
//
Функция СформироватьОтчетСообщенияОтТерминала(НачПериода, КонПериода, Терминал)
			
	ТабДок = Новый ТабличныйДокумент;
			
	Макет = ПолучитьМакет("Макет");
	
	ОбластьШапка = Макет.ПолучитьОбласть("Шапка|База");
	ОбластьДетали = Макет.ПолучитьОбласть("Детали|База");
	ОбластьШапкаДатчик = Макет.ПолучитьОбласть("Шапка|Датчик");
	ОбластьДеталиДатчик = Макет.ПолучитьОбласть("Детали|Датчик");
		
	ОбластьШапка.Параметры.ЗаголовокОтчета = НСтр("ru = 'Сообщения от терминала за'")+" "+ПредставлениеПериода(НачПериода, КонПериода);
	ОбластьШапка.Параметры.Объект = "Терминал: "+Терминал;	
	ТабДок.Вывести(ОбластьШапка);
	ШиринаТаб0 = ТабДок.ШиринаТаблицы;
	
	ПараметрыСдвигаВремени = ItobОперативныйМониторинг.ПолучитьПараметрыСдвигаВремени();
	
	ТаблицаБазовыхДанных = ItobОперативныйМониторинг.ПолучитьДанныеПоТерминалу(Терминал, НачПериода, КонПериода);
	ТаблицаБазовыхДанных.Сортировать("Период");
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("СдвигВремени", ПараметрыСдвигаВремени.СдвигВремени);
	Запрос.УстановитьПараметр("ВариантПереводаНаЛетнееВремя", ПараметрыСдвигаВремени.ВариантПереводаВремени);
	Запрос.УстановитьПараметр("СдвигЛетнееВремя", ПараметрыСдвигаВремени.СдвигЛетнееВремя);
	Запрос.УстановитьПараметр("ТаблицаБазовыхДанных", ТаблицаБазовыхДанных);
	Запрос.УстановитьПараметр("Терминал", Терминал);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ТаблицаБазовыхДанных.Период КАК ПериодUTC0,
	|	ТаблицаБазовыхДанных.Широта,
	|	ТаблицаБазовыхДанных.Долгота,
	|	ТаблицаБазовыхДанных.Скорость,
	|	ТаблицаБазовыхДанных.Направление,
	|	ТаблицаБазовыхДанных.ЧислоСпутников,
	|	ТаблицаБазовыхДанных.НевалидныеДанные,
	|	ТаблицаБазовыхДанных.ВерсияФормата
	|ПОМЕСТИТЬ ДанныеТерминалов
	|ИЗ
	|	&ТаблицаБазовыхДанных КАК ТаблицаБазовыхДанных
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	ДОБАВИТЬКДАТЕ(ДОБАВИТЬКДАТЕ(ДанныеТерминалов.ПериодUTC0, СЕКУНДА, &СдвигВремени), СЕКУНДА, ВЫБОР
	|			КОГДА &ВариантПереводаНаЛетнееВремя = ЗНАЧЕНИЕ(Перечисление.ItobВариантыПереводаВремени.Европейский)
	|				ТОГДА ВЫБОР
	|						КОГДА ДанныеТерминалов.ПериодUTC0 МЕЖДУ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДанныеТерминалов.ПериодUTC0, ГОД), МЕСЯЦ, 3), НЕДЕЛЯ), НЕДЕЛЯ, -1), ДЕНЬ), ЧАС, 2) И ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДанныеТерминалов.ПериодUTC0, ГОД), МЕСЯЦ, 10), НЕДЕЛЯ), НЕДЕЛЯ, -1), ДЕНЬ), ЧАС, 2)
	|							ТОГДА &СдвигЛетнееВремя
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			КОГДА &ВариантПереводаНаЛетнееВремя = ЗНАЧЕНИЕ(Перечисление.ItobВариантыПереводаВремени.Американский)
	|				ТОГДА ВЫБОР
	|						КОГДА ДанныеТерминалов.ПериодUTC0 МЕЖДУ ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДанныеТерминалов.ПериодUTC0, ГОД), МЕСЯЦ, 2), НЕДЕЛЯ), НЕДЕЛЯ, 1), ДЕНЬ), ЧАС, 2) И ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДОБАВИТЬКДАТЕ(КОНЕЦПЕРИОДА(ДОБАВИТЬКДАТЕ(НАЧАЛОПЕРИОДА(ДанныеТерминалов.ПериодUTC0, ГОД), МЕСЯЦ, 10), НЕДЕЛЯ), НЕДЕЛЯ, 0), ДЕНЬ), ЧАС, 2)
	|							ТОГДА &СдвигЛетнееВремя
	|						ИНАЧЕ 0
	|					КОНЕЦ
	|			ИНАЧЕ 0
	|		КОНЕЦ) КАК Период,
	|	ДанныеТерминалов.Широта КАК Широта,
	|	ДанныеТерминалов.Долгота КАК Долгота,
	|	ДанныеТерминалов.Скорость КАК Скорость,
	|	ДанныеТерминалов.Направление КАК Направление,
	|	ДанныеТерминалов.ЧислоСпутников КАК ЧислоСпутников,
	|	ДанныеТерминалов.НевалидныеДанные КАК НевалидныеДанные,
	|	ДанныеТерминалов.ВерсияФормата,
	|	ДанныеТерминалов.ПериодUTC0 КАК ПериодUTC0
	|ИЗ
	|	ДанныеТерминалов КАК ДанныеТерминалов
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПериодUTC0";	
				   
	ТабДанных = Запрос.Выполнить().Выгрузить();
	
	ТабДатчиков = Новый ТаблицаЗначений;
	ТабДатчиков.Колонки.Добавить("ДатчикПредставление");
	ТабДатчиков.Колонки.Добавить("КодДатчика");
	ТабДатчиков.Колонки.Добавить("ИмяКолонкиТабДанных");
	
	МодельТерминала = ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Терминал, "Модель");
	
	Счетчик = 0;
	Для каждого СтрокаДанных Из ТабДанных Цикл	
		Для каждого элемДанныхДатчиков Из ТаблицаБазовыхДанных[Счетчик].ДанныеДатчиков_Обработанные Цикл
			КодДатчика = элемДанныхДатчиков[0];
			ЗначениеДатчика = элемДанныхДатчиков[1];
			Если КодДатчика <= 0 Тогда
				Продолжить;	
			КонецЕсли;
			
			КодДатчикаСтрока = Формат(КодДатчика, "ЧН=0; ЧГ=0");
			ИмяКолонки = "Датчик" + КодДатчикаСтрока;
			Если ТабДанных.Колонки.Найти(ИмяКолонки) = Неопределено Тогда
				ТабДанных.Колонки.Добавить(ИмяКолонки);
				
				НовСтрокаДатчиков = ТабДатчиков.Добавить();
				НовСтрокаДатчиков.КодДатчика = КодДатчика;
				НовСтрокаДатчиков.ИмяКолонкиТабДанных = ИмяКолонки;
				
				Датчик = Справочники.ItobДатчики.НайтиПоКоду(КодДатчика, Ложь,, МодельТерминала);
				НовСтрокаДатчиков.ДатчикПредставление = ?(ЗначениеЗаполнено(Датчик), СокрЛП(Датчик), КодДатчикаСтрока);	
			КонецЕсли; 
			
			СтрокаДанных[ИмяКолонки] = ЗначениеДатчика;
		КонецЦикла; 
		
		Счетчик = Счетчик + 1;
	КонецЦикла;
	
	ТабДатчиков.Сортировать("КодДатчика");	
	
	Для каждого СтрДатчиков Из ТабДатчиков Цикл
		ОбластьШапкаДатчик.Параметры.Датчик = СтрДатчиков.ДатчикПредставление;
		ТабДок.Присоединить(ОбластьШапкаДатчик);		
	КонецЦикла;
	
	Если ТабДатчиков.Количество() > 0 Тогда	
		ОблЗаголовокДатчики = ТабДок.Область(ТабДок.ВысотаТаблицы-1, ШиринаТаб0+1, ТабДок.ВысотаТаблицы-1, ТабДок.ШиринаТаблицы);
		ОблЗаголовокДатчики.Объединить();
		ОблЗаголовокДатчики.Текст = "Датчики";		
	КонецЕсли;
	
	НомерПП = 1;
	Для каждого СтрокаДанных Из ТабДанных Цикл
		ОбластьДетали.Параметры.Заполнить(СтрокаДанных);	
		ОбластьДетали.Параметры.НомерПП = НомерПП;
		ТабДок.Вывести(ОбластьДетали);	
		
		Для каждого СтрДатчиков Из ТабДатчиков Цикл
			ТекЗначение = СтрокаДанных[СтрДатчиков.ИмяКолонкиТабДанных];
			ОбластьДеталиДатчик.Параметры.Значение = ?(ТекЗначение = Неопределено, "-", ТекЗначение);
			ТабДок.Присоединить(ОбластьДеталиДатчик);				
		КонецЦикла;
		
		НомерПП = НомерПП+1;		
	КонецЦикла;				   
	
	
	Возврат ТабДок;
	
КонецФункции

#КонецОбласти 


#КонецЕсли

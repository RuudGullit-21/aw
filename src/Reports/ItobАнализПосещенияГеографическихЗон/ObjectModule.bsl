#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Настройки общей формы отчета подсистемы "Варианты отчетов".
//
// Параметры:
//   Форма - УправляемаяФорма - Форма отчета.
//   КлючВарианта - Строка - Имя предопределенного варианта отчета или уникальный идентификатор пользовательского.
//   Настройки - Структура - см. возвращаемое значение ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию().
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	Настройки.События.ПриСозданииНаСервере = Истина;
	Настройки.События.ПриОпределенииПараметровВыбора = Истина;
	Настройки.Печать.ПолеСверху = 5;
	Настройки.Печать.ПолеСлева = 5;
	Настройки.Печать.ПолеСнизу = 5;
	Настройки.Печать.ПолеСправа = 5;
	Настройки.ФормироватьСразу = Ложь;
КонецПроцедуры

// Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//  
//  См. также:
//  "УправляемаяФорма.ПриСозданииНаСервере" в синтакс-помощнике.
//
// Параметры:
//  Форма				 - УправляемаяФорма	 - Форма отчета.
//  Отказ				 - Булево			 - Передается из параметров обработчика "как есть".
//  СтандартнаяОбработка - Булево			 - Передается из параметров обработчика "как есть".
//
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	// КЭШируем параметры формы.
	ПараметрыФормы = ItobОтчетыКлиентСерверПовтИсп.ПараметрыФормы(Строка(Форма.УникальныйИдентификатор));
	ПараметрыФормы.Очистить();
	Если Форма.Параметры.Свойство("СписокПараметров") Тогда
		ПараметрыФормы.Вставить("СписокПараметров", Форма.Параметры.СписокПараметров);
	КонецЕсли;
		
КонецПроцедуры

// Вызывается в форме отчета перед выводом настройки.
//   Подробнее - см. ФормаОтчетаПереопределяемый.ПриОпределенииПараметровВыбора().
//
Процедура ПриОпределенииПараметровВыбора(Форма, СвойстваНастройки) Экспорт
	Если СвойстваНастройки.ОписаниеТипов.СодержитТип(Тип("СправочникСсылка.Пользователи")) Тогда
		СвойстваНастройки.ОграничиватьВыборУказаннымиЗначениями = Истина;
		СвойстваНастройки.ЗначенияДляВыбора.Очистить();
		СвойстваНастройки.ЗапросЗначенийВыбора.Текст =
			"ВЫБРАТЬ Ссылка ИЗ Справочник.Пользователи
			|ГДЕ НЕ ПометкаУдаления И НЕ Недействителен И НЕ Служебный";
	КонецЕсли;
КонецПроцедуры

// Вызывается после перезаполнения панели настроек формы отчета.
//
// Параметры:
//  Форма				 - УправляемаяФорма	 - Форма отчета.
//  ПараметрыЗаполнения	 - Структура		 - Параметры, которые будут загружены в отчет.
//
Процедура ИзменитьФормуПослеСозданияЭлементовНастроек(Форма, ПервоеОткрытиеФормы) Экспорт
	
	// Проверяем, открывается ли нужная форма.
	Если Не Форма.ТипФормыОтчета = ТипФормыОтчета.Основная Или СтрНайти(Форма.ИмяФормы, "ФормаОтчета") = 0 Тогда // Если используется общая форма из БСП проверяем на имя.
	    Возврат;
	КонецЕсли;
	
	// Обновляем внешний вид элемента "Начало периода".
	ЭлементФормы = ItobОтчетыКлиентСервер.НайтиЭлементФормыПоЗаголовку(Форма, "Начало периода");
	ЭлементФормы.КнопкаРегулирования = Истина;
	ЭлементФормы.УстановитьДействие("Регулирование", "Подключаемый_ПолеВвода_Регулирование");
	
	// Обновляем внешний вид элемента "Конец периода".
	ЭлементФормы = ItobОтчетыКлиентСервер.НайтиЭлементФормыПоЗаголовку(Форма, "Конец периода");
	ЭлементФормы.КнопкаРегулирования = Истина;
	ЭлементФормы.УстановитьДействие("Регулирование", "Подключаемый_ПолеВвода_Регулирование");
	
	Если НЕ ПервоеОткрытиеФормы Тогда

		
		Возврат;		
	КонецЕсли;
	
	// Получаем из КЭШа параметры формы.
	ПараметрыФормы = ItobОтчетыКлиентСерверПовтИсп.ПараметрыФормы(Строка(Форма.УникальныйИдентификатор));
	
	// Форма открыта без параметров.
	Если ПараметрыФормы.Количество() > 0 Тогда
		ПараметрыДанных = ItobОтчетыКлиентСервер.ПолучитьПараметрыДанных(Форма);
		
		// Заполняем передаваемые параметры.
		Для Каждого Параметр Из ПараметрыФормы.СписокПараметров Цикл
		    Если Параметр.Представление = "НачПериода" Тогда
			    ItobОтчетыКлиентСервер.УстановитьЗначениеПараметра(ПараметрыДанных, "НачПериода", Новый СтандартнаяДатаНачала(Параметр.Значение), НСтр("ru = 'Начало периода'; en = 'Beginning of period'"));
		    ИначеЕсли Параметр.Представление = "КонПериода" Тогда
			    ItobОтчетыКлиентСервер.УстановитьЗначениеПараметра(ПараметрыДанных, "КонПериода", Новый СтандартнаяДатаНачала(Параметр.Значение), НСтр("ru = 'Конец периода'; en = 'End of period'"));
			ИначеЕсли Параметр.Представление = "Объект" Тогда

				Настройки = КомпоновщикНастроек.ПолучитьНастройки();
				Отборы = Настройки.Отбор.Элементы;
				Для Каждого Отбор Из Отборы Цикл
					
					Если Отбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОбъектТС") Тогда
						Отбор.ПравоеЗначение = Параметр.Значение;
						Отбор.Использование = Истина;
					КонецЕсли;
					
				КонецЦикла;
				КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
				
			КонецЕсли; 
		КонецЦикла;
		
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти	
	
#Область ПрограммныйИнтерфейс
	
Функция ПолучитьГеографическиеЗоны(ГруппаГеографическихЗон)
	Возврат ItobГеографическиеЗоныВызовСервера.ПолучитьГеографическиеЗоныПоГруппе(ГруппаГеографическихЗон);
КонецФункции // ПолучитьГеографическиеЗоны()

Функция ОпределитьВхождениеВГеографическуюЗону(Широта, Долгота, ПараметрыСтроки)
	
	Результат = 0;
	ПараметрыГеозоны = ItobГеографическиеЗоны.ПараметрыПроверяемойЗоны();
	ПараметрыГеозоны.ШиротыЗоны = ПараметрыСтроки.МассивУ;
	ПараметрыГеозоны.ДолготыЗоны = ПараметрыСтроки.МассивХ;
	Если ItobГеографическиеЗоны.ТочкаВГеозоне(Широта, Долгота, ПараметрыГеозоны) Тогда
    	Результат = 1;
	КонецЕсли;
	
	
	Возврат Результат;
	
КонецФункции

#КонецОбласти 

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СКД = ЭтотОбъект.СхемаКомпоновкиДанных;
	
	ЗаменитьТекстЗапроса(СКД);
	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	
	НачПериода = '00010101';
	КонПериода = '00010101';
	ГеографическаяЗона = ItobОбщегоНазначения.ПустаяСсылкаОбъекта("ГеографическиеЗоны");
	
	Для каждого ЭлементыПараметрыДанных Из Настройки.ПараметрыДанных.Элементы Цикл
		
		Если Строка(ЭлементыПараметрыДанных.Параметр) = "НачПериода" Тогда
			НачПериода = ЭлементыПараметрыДанных.Значение.Дата;
		ИначеЕсли Строка(ЭлементыПараметрыДанных.Параметр) = "КонПериода" Тогда
			КонПериода = ЭлементыПараметрыДанных.Значение.Дата;
		ИначеЕсли Строка(ЭлементыПараметрыДанных.Параметр) = "ГеографическаяЗона" Тогда
		    ГеографическаяЗона = ЭлементыПараметрыДанных.Значение;
		КонецЕсли;		
	
	КонецЦикла;	
	
	Если НачПериода = '00010101' Тогда
		ItobРаботаС_БСП_КлиентСервер.СообщитьПользователю(НСтр("ru = 'Не указано начало периода отчета'"));
		Возврат;
	
	КонецЕсли;
	
	Если КонПериода = '00010101' Тогда
		ItobРаботаС_БСП_КлиентСервер.СообщитьПользователю(НСтр("ru = 'Не указан конец периода отчета'"));
		Возврат;
		
	КонецЕсли;
	
	ТаблицаГеографическихЗон = ПолучитьГеографическиеЗоны(ГеографическаяЗона);
		
	НастройкиДляВыборкиОбъектов = КомпоновщикНастроек.ПолучитьНастройки();
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	МакетКомпоновки =  КомпоновщикМакета.Выполнить(СКД,НастройкиДляВыборкиОбъектов,,,
	                      Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("День");
	ТЗ.Колонки.Добавить("ГеографическаяЗона");
	ТЗ.Колонки.Добавить("Объект");
	ТЗ.Колонки.Добавить("ИнтервалПребывания");
	ТЗ.Колонки.Добавить("ПродолжительностьПребывания");
	ТЗ.Колонки.Добавить("ПродолжительностьПредставление");
	ТЗ.Колонки.Добавить("НачДата");
	ТЗ.Колонки.Добавить("КонДата");
	ТЗ.Колонки.Добавить("Пробег");
	ТЗ.Колонки.Добавить("РасходТоплива");
			
	ВнешниеНаборыДанных = Новый Структура("ТабДанных",ТЗ);
	
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,ВнешниеНаборыДанных);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ТабОбъектов = ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	СостНетДанных = Перечисления.ItobСостоянияТерминалов.НетДанных;
	
	МассивОбъектов = ТабОбъектов.ВыгрузитьКолонку("ОбъектТС");
	Если МассивОбъектов.Количество() > 0 Тогда
		Для Каждого Элем Из МассивОбъектов Цикл
			
			Расстояние = 0;
			
			Если НЕ ЗначениеЗаполнено(Элем) Тогда
				Продолжить;
			ИначеЕсли Элем.ЭтоГруппа Тогда 			
				Продолжить;
			Иначе
				ОбъектСсылка = Элем.Ссылка;
			КонецЕсли;
			
			ТекПериодДень = НачалоДня(НачПериода);
			
			Пока ТекПериодДень <= КонПериода Цикл
				ТекНачалоПериода = МАКС(НачалоДня(ТекПериодДень), НачПериода);
				ТекКонецПериода = МИН(КонецДня(ТекПериодДень), КонПериода);
								
				Маршрут = ItobОперативныйМониторинг.СформироватьМаршрутОбъектаМониторинга(ОбъектСсылка, ТекНачалоПериода, ТекКонецПериода);
				Если Маршрут.Количество() <= 1 Тогда
					ТекПериодДень = ТекПериодДень + 24*3600;
					Продолжить;
				КонецЕсли;
				
				Для Каждого СтрЗоны Из ТаблицаГеографическихЗон Цикл
					
					ТекСостояние = 0;
					
					Для Счетчик = 0 По Маршрут.Количество()-1 Цикл					
						
						Если Маршрут[Счетчик].Широта=0 ИЛИ Маршрут[Счетчик].Долгота=0
							ИЛИ Маршрут[Счетчик].Состояние = СостНетДанных Тогда
						
							Если ТекСостояние = 1 Тогда
								НовоеСостояние = 0;
							Иначе
								Продолжить;							
							КонецЕсли;
							
						Иначе
							НовоеСостояние = ОпределитьВхождениеВГеографическуюЗону(Маршрут[Счетчик].Широта, Маршрут[Счетчик].Долгота, СтрЗоны);	
																				
						КонецЕсли;						
						
						Если (ТекСостояние = 0 И НовоеСостояние=1)
							ИЛИ (НовоеСостояние=1 И (Счетчик = 0 ИЛИ Маршрут[Счетчик-1].Состояние = СостНетДанных )) Тогда
							// Вход в географическую зону (или первая строка маршрута начинает в этой географической зоне).
							
							НовСтрока = ТЗ.Добавить();
							НовСтрока.День = ТекНачалоПериода;
							НовСтрока.ГеографическаяЗона = СтрЗоны.ГеографическаяЗона;
							НовСтрока.Объект             = ОбъектСсылка;
							НовСтрока.НачДата            = Маршрут[Счетчик].Период;
							НовСтрока.КонДата            = '00010101';
					
						ИначеЕсли (ТекСостояние = 1 И НовоеСостояние=0)
							ИЛИ (НовоеСостояние=1 И ТекСостояние = 1 И Счетчик = Маршрут.Количество()-1) Тогда
							// Выход из географической зоны (или крайняя строка маршрута заканчивает в этой географической зоне).
						
							НовСтрока.КонДата = Маршрут[Счетчик].Период;
							НовСтрока.Пробег = Расстояние;
							
							Расстояние = 0;
						
						КонецЕсли;						
						
						Если НовоеСостояние Тогда
						
							Расстояние = Расстояние+Маршрут[Счетчик].Пробег;
						
						КонецЕсли; 
						
						ТекСостояние = НовоеСостояние;
						
					КонецЦикла;
					
					
				КонецЦикла;	
				
				///
				
				ТекПериодДень = ТекПериодДень + 24*3600;
				
			КонецЦикла;
			
		КонецЦикла;
	КонецЕсли;
	
	
	Для каждого СтрокаТЗ Из ТЗ Цикл
		СтрокаТЗ.ИнтервалПребывания = Формат(СтрокаТЗ.НачДата,"ДФ=HH:mm")+"-"+Формат(СтрокаТЗ.КонДата,"ДФ=HH:mm");	
		
		ТекНормаРег = ItobОбщегоНазначения.НормаРасходаОсновногоТоплива(СтрокаТЗ.Объект, НачПериода);
		
        ТекКоэффициентРасхода = ТекНормаРег.БазоваяНорма;
		Если НЕ (СтрокаТЗ.Пробег = Неопределено) И (ТипЗнч(СтрокаТЗ.Пробег) = Тип("Число")) Тогда
			СтрокаТЗ.Пробег = СтрокаТЗ.Пробег/1000;
		Иначе
			СтрокаТЗ.Пробег = 0;
		КонецЕсли;
		
		СтрокаТЗ.РасходТоплива = Окр(ТекКоэффициентРасхода * СтрокаТЗ.Пробег/100,1);
		Если СтрокаТЗ.КонДата <> '00010101' И СтрокаТЗ.КонДата <> '00010101' Тогда
			СтрокаТЗ.ПродолжительностьПребывания = СтрокаТЗ.КонДата-СтрокаТЗ.НачДата;
			СтрокаТЗ.ПродолжительностьПредставление = ItobОперативныйМониторингКлиентСервер.ПредставлениеВремени(СтрокаТЗ.КонДата-СтрокаТЗ.НачДата);
			
		Иначе
			СтрокаТЗ.ПродолжительностьПребывания = -1;
			СтрокаТЗ.ПродолжительностьПредставление = "";
		
		КонецЕсли;		
		
	КонецЦикла;
	
	
	// Отбор (чтобы не выводил лишние строки)
	НовыйЭлементОтбора = Настройки.Отбор.Элементы.Добавить( Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйЭлементОтбора.Использование = Истина;
	НовыйЭлементОтбора.ЛевоеЗначение = Настройки.Отбор.ДоступныеПоляОтбора.Элементы.Найти
	                                                 ("ПродолжительностьПребывания").Поле;
	НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	НовыйЭлементОтбора.ПравоеЗначение = 0;
	
	ВнешниеНаборыДанных = Новый Структура("ТабДанных",ТЗ);
	МакетКомпоновки =  КомпоновщикМакета.Выполнить(СКД, Настройки, ДанныеРасшифровки,,
	Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,ВнешниеНаборыДанных,ДанныеРасшифровки);	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	
	МакетКомпоновки =  КомпоновщикМакета.Выполнить(СКД,Настройки,ДанныеРасшифровки);
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,ВнешниеНаборыДанных,ДанныеРасшифровки);		
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);

	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

Процедура ЗаменитьТекстЗапроса(СКД)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ItobВодители.Ссылка
	|ПОМЕСТИТЬ ВТОбъекты
	|ИЗ
	|	Справочник.ItobВодители КАК ItobВодители
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	ItobТранспортныеСредства.Ссылка
	|ИЗ
	|	Справочник.ItobТранспортныеСредства КАК ItobТранспортныеСредства
	|	
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ
	|	ItobАЗС.Ссылка
	|ИЗ
	|	Справочник.ItobАЗС КАК ItobАЗС
	|;
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ItobПривязкиТрекеров.Объект КАК ОбъектТС
	|ИЗ
	|	РегистрСведений.ItobПривязкиТрекеров КАК ItobПривязкиТрекеров
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ ВТОбъекты КАК ВТОбъекты
	|		ПО ItobПривязкиТрекеров.Объект = ВТОбъекты.Ссылка";
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ItobВодители", ItobВызовСервераПовтИсп.ПолучитьИмяОбъекта("Водители"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ItobТранспортныеСредства", ItobВызовСервераПовтИсп.ПолучитьИмяОбъекта("ТранспортныеСредства"));
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ItobАЗС", ItobВызовСервераПовтИсп.ПолучитьИмяОбъекта("АЗС"));

	СКД.НаборыДанных.НаборДанныхОбъект.Запрос = ТекстЗапроса;
	
КонецПроцедуры
 	
#КонецОбласти 

#КонецЕсли

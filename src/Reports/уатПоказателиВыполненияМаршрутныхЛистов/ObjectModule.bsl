
#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДокументРезультат.Очистить();
	
	УчетПланФакта = уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД()
		Или Константы.уатУчетПланФактаПоМаршрутуВМаршрутныхЛистах.Получить();
	
	СхемаКомпоновкиДанных = ПолучитьМакет("ОсновнаяСхемаКомпоновкиДанных");
	НастройкиКомпоновщикаНастроек = КомпоновщикНастроек.ПолучитьНастройки();
	
	НастройкаПериод = НастройкиКомпоновщикаНастроек.ПараметрыДанных.Элементы.Найти("Период");
	Если НастройкаПериод <> Неопределено И НастройкаПериод.Использование Тогда
		Период = НастройкаПериод.Значение;
	КонецЕсли;
	НастройкаОрганизация = НастройкиКомпоновщикаНастроек.ПараметрыДанных.Элементы.Найти("Организация");
	Если НастройкаОрганизация <> Неопределено И НастройкаОрганизация.Использование Тогда
		Организация = НастройкаОрганизация.Значение;
	КонецЕсли;
	НастройкаВодитель = НастройкиКомпоновщикаНастроек.ПараметрыДанных.Элементы.Найти("Водитель");
	Если НастройкаВодитель <> Неопределено И НастройкаВодитель.Использование Тогда
		Водитель = НастройкаВодитель.Значение;
	КонецЕсли;
	НастройкаПеревозчик = НастройкиКомпоновщикаНастроек.ПараметрыДанных.Элементы.Найти("Перевозчик");
	Если НастройкаПеревозчик <> Неопределено И НастройкаПеревозчик.Использование Тогда
		Перевозчик = НастройкаПеревозчик.Значение;
	КонецЕсли;
	
	Если Не УчетПланФакта Тогда
		
		ОтключитьИспользованиеПоля(СхемаКомпоновкиДанных.ВычисляемыеПоля, "СтоянкаФактПоПунктам");
		ОтключитьИспользованиеПоля(СхемаКомпоновкиДанных.ВычисляемыеПоля, "ОтклонениеСтоянкиПоПунктам");
		ОтключитьИспользованиеПоля(СхемаКомпоновкиДанных.ВычисляемыеПоля, "ОтклонениеВремениПрибытияПоПунктам");
		ОтключитьИспользованиеПоля(СхемаКомпоновкиДанных.ВычисляемыеПоля, "ОтклонениеВремениУбытияПоПунктам");
		ОтключитьИспользованиеПоля(СхемаКомпоновкиДанных.ВычисляемыеПоля, "СтоянкаФактПоПунктамЧЧММ");
		ОтключитьИспользованиеПоля(СхемаКомпоновкиДанных.ВычисляемыеПоля, "ОтклонениеСтоянкиПоПунктамЧЧММ");
		ОтключитьИспользованиеПоля(СхемаКомпоновкиДанных.ВычисляемыеПоля, "ОтклонениеВремениПрибытияПоПунктамЧЧММ");
		ОтключитьИспользованиеПоля(СхемаКомпоновкиДанных.ВычисляемыеПоля, "ОтклонениеВремениУбытияПоПунктамЧЧММ");
		ОтключитьИспользованиеПоля(СхемаКомпоновкиДанных.ВычисляемыеПоля, "СтоянкаФактЧЧММ");
		ОтключитьИспользованиеПоля(СхемаКомпоновкиДанных.ВычисляемыеПоля, "ОтклонениеВремениПрибытияЧЧММ");
		ОтключитьИспользованиеПоля(СхемаКомпоновкиДанных.ВычисляемыеПоля, "ОтклонениеСтоянкиЧЧММ");
		ОтключитьИспользованиеПоля(СхемаКомпоновкиДанных.ВычисляемыеПоля, "ОтклонениеВремениУбытияЧЧММ");
		ОтключитьИспользованиеПоля(СхемаКомпоновкиДанных.ВычисляемыеПоля, "ОтклонениеОтВременногоОкнаЧЧММ");
		ОтключитьИспользованиеПоля(СхемаКомпоновкиДанных.ВычисляемыеПоля, "ОпозданиеФактЧЧММ");
		ОтключитьИспользованиеПоля(СхемаКомпоновкиДанных.ВычисляемыеПоля, "ПростойФактЧЧММ");
		ОтключитьИспользованиеПоля(СхемаКомпоновкиДанных.ВычисляемыеПоля, "ОпозданиеФактПоПунктам");
		ОтключитьИспользованиеПоля(СхемаКомпоновкиДанных.ВычисляемыеПоля, "ПростойФактПоПунктам");
		ОтключитьИспользованиеПоля(СхемаКомпоновкиДанных.ВычисляемыеПоля, "ОпозданиеФактПоПунктамЧЧММ");
		ОтключитьИспользованиеПоля(СхемаКомпоновкиДанных.ВычисляемыеПоля, "ПростойФактПоПунктамЧЧММ");
		ОтключитьИспользованиеПоля(СхемаКомпоновкиДанных.ВычисляемыеПоля, "ОжиданиеФактЧЧММ");
		
		УстановитьЗаголовокПоля(СхемаКомпоновкиДанных.ВычисляемыеПоля, "СтоянкаПланПоПунктам", НСтр("ru = 'Стоянка (мин.)'"));
		УстановитьЗаголовокПоля(СхемаКомпоновкиДанных.ВычисляемыеПоля, "СтоянкаПланПоПунктамЧЧММ", НСтр("ru = 'Стоянка (чч:мм)'; en = 'Упаковок"
"[ЕдиницаИзмеренияМеста]'"));
		УстановитьЗаголовокПоля(СхемаКомпоновкиДанных.ВычисляемыеПоля, "ОжиданиеПланЧЧММ", НСтр("ru = 'Ожидание (чч:мм)'"));
		УстановитьЗаголовокПоля(СхемаКомпоновкиДанных.ВычисляемыеПоля, "СтоянкаПланЧЧММ", НСтр("ru = 'Стоянка (чч:мм)'; en = 'Упаковок"
"[ЕдиницаИзмеренияМеста]'"));
		
		НаборДанных1 = СхемаКомпоновкиДанных.НаборыДанных.Найти("НаборДанных1");
		Если НаборДанных1 <> Неопределено Тогда
			
			ОтключитьИспользованиеПоля(НаборДанных1.Поля, "ПрибытиеФакт");
			ОтключитьИспользованиеПоля(НаборДанных1.Поля, "УбытиеФакт");
			ОтключитьИспользованиеПоля(НаборДанных1.Поля, "ОтклонениеВремениПрибытия");
			ОтключитьИспользованиеПоля(НаборДанных1.Поля, "ОтклонениеВремениУбытия");
			ОтключитьИспользованиеПоля(НаборДанных1.Поля, "СтоянкаФакт");
			ОтключитьИспользованиеПоля(НаборДанных1.Поля, "ОтклонениеСтоянки");
			ОтключитьИспользованиеПоля(НаборДанных1.Поля, "ОтклонениеОтВременногоОкна");
			ОтключитьИспользованиеПоля(НаборДанных1.Поля, "КоличествоОпозданий");
			ОтключитьИспользованиеПоля(НаборДанных1.Поля, "ПроцентОпозданий");
			ОтключитьИспользованиеПоля(НаборДанных1.Поля, "ОтклонениеОпозданий");
			ОтключитьИспользованиеПоля(НаборДанных1.Поля, "ЦелевойПоказательОпозданий");
			ОтключитьИспользованиеПоля(НаборДанных1.Поля, "ОпозданиеФакт");
			ОтключитьИспользованиеПоля(НаборДанных1.Поля, "ПростойФакт");
			ОтключитьИспользованиеПоля(НаборДанных1.Поля, "ОжиданиеФакт");
			
			УстановитьЗаголовокПоля(НаборДанных1.Поля, "ПрибытиеПлан", НСтр("ru = 'Прибытие'"));
			УстановитьЗаголовокПоля(НаборДанных1.Поля, "УбытиеПлан", НСтр("ru = 'Убытие'"));
			УстановитьЗаголовокПоля(НаборДанных1.Поля, "СтоянкаПлан", НСтр("ru = 'Стоянка (мин.)'"));
			УстановитьЗаголовокПоля(НаборДанных1.Поля, "ОжиданиеПлан", НСтр("ru = 'Ожидание (мин.)'"));
			
		КонецЕсли;
		
	КонецЕсли;
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ТабДанныхПоМЛ", ПолучитьПоказателиВыполненияПоМаршрутнымЛистам(УчетПланФакта));
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки   = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновщикаНастроек, ДанныеРасшифровки);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных, ДанныеРасшифровки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция возвращает текст запровса для вариантов поставки ПРОФ и КОРП
Функция ТекстЗапросаПоМаршрутнымЛистам()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатМаршрутныйЛист.Ссылка КАК МаршрутныйЛист,
	|	уатМаршрутныйЛист.Контрагент КАК Перевозчик,
	|	уатМаршрутныйЛист.Водитель1 КАК Водитель,
	|	ВЫБОР
	|		КОГДА уатМаршрутныйЛистЗаказы.Выполнен
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Выполнен,
	|	ВЫБОР
	|		КОГДА уатМаршрутныйЛистЗаказы.Выполнен
	|			ТОГДА 100
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВыполненПроцент,
	|	уатМаршрутныйЛистЗаказы.Пункт КАК Пункт,
	|	уатМаршрутныйЛистЗаказы.ПрибытиеПлан КАК ПрибытиеПлан,
	|	уатМаршрутныйЛистЗаказы.ПрибытиеФакт КАК ПрибытиеФакт,
	|	уатМаршрутныйЛистЗаказы.УбытиеПлан КАК УбытиеПлан,
	|	уатМаршрутныйЛистЗаказы.УбытиеФакт КАК УбытиеФакт,
	|	уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя,
	|	ВЫБОР
	|		КОГДА уатЗаказГрузоотправителя.Ссылка ЕСТЬ NULL
	|			ТОГДА уатМаршрутныйЛистЗаказы.Контрагент
	|		ИНАЧЕ уатЗаказГрузоотправителя.Контрагент
	|	КОНЕЦ КАК Контрагент,
	|	уатМаршрутныйЛистЗаказы.Стоянка КАК Стоянка,
	|	уатМаршрутныйЛистЗаказы.СтоянкаИзПункта КАК СтоянкаИзПункта,
	|	уатМаршрутныйЛистЗаказы.Ожидание КАК ОжиданиеПлан,
	|	уатМаршрутныйЛистЗаказы.ОжиданиеФакт КАК ОжиданиеФакт,
	|	ЕСТЬNULL(уатЗаказГрузоотправителя.FTL, ЛОЖЬ) КАК FTL,
	|	0 КАК СтоянкаПлан,
	|	ВЫБОР
	|		КОГДА уатМаршрутныйЛистЗаказы.Выполнен
	|			ТОГДА РАЗНОСТЬДАТ(уатМаршрутныйЛистЗаказы.ПрибытиеПлан, уатМаршрутныйЛистЗаказы.ПрибытиеФакт, МИНУТА)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОтклонениеВремениПрибытия,
	|	0 КАК ОпозданиеФакт,
	|	0 КАК ОтклонениеВремениУбытия,
	|	0 КАК ПростойФакт,
	|	ВЫБОР
	|		КОГДА уатМаршрутныйЛистЗаказы.Выполнен
	|			ТОГДА РАЗНОСТЬДАТ(уатМаршрутныйЛистЗаказы.ПрибытиеФакт, уатМаршрутныйЛистЗаказы.УбытиеФакт, МИНУТА)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтоянкаФакт,
	|	0 КАК ОтклонениеСтоянки,
	|	ВЫБОР
	|		КОГДА НЕ уатЗаказГрузоотправителя.Ссылка ЕСТЬ NULL
	|				И уатМаршрутныйЛистЗаказы.ТипТочкиМаршрута = ЗНАЧЕНИЕ(Перечисление.уатТипыТочекМаршрута.Разгрузка)
	|			ТОГДА уатЗаказГрузоотправителя.ДоставкаС
	|		КОГДА НЕ уатЗаказГрузоотправителя.Ссылка ЕСТЬ NULL
	|				И уатМаршрутныйЛистЗаказы.ТипТочкиМаршрута = ЗНАЧЕНИЕ(Перечисление.уатТипыТочекМаршрута.Погрузка)
	|			ТОГДА уатЗаказГрузоотправителя.ОтправлениеС
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 1)
	|	КОНЕЦ КАК ОкноС,
	|	ВЫБОР
	|		КОГДА НЕ уатЗаказГрузоотправителя.Ссылка ЕСТЬ NULL
	|				И уатМаршрутныйЛистЗаказы.ТипТочкиМаршрута = ЗНАЧЕНИЕ(Перечисление.уатТипыТочекМаршрута.Разгрузка)
	|			ТОГДА уатЗаказГрузоотправителя.ДоставкаПо
	|		КОГДА НЕ уатЗаказГрузоотправителя.Ссылка ЕСТЬ NULL
	|				И уатМаршрутныйЛистЗаказы.ТипТочкиМаршрута = ЗНАЧЕНИЕ(Перечисление.уатТипыТочекМаршрута.Погрузка)
	|			ТОГДА уатЗаказГрузоотправителя.ОтправлениеПо
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 23, 59, 0)
	|	КОНЕЦ КАК ОкноПо,
	|	1 КАК ПопаданиеВоВременноеОкно,
	|	100 КАК ПопаданиеВоВременноеОкноПроцент,
	|	0 КАК ОтклонениеОтВременногоОкна,
	|	0 КАК КоличествоОпозданий,
	|	0 КАК ПроцентОпозданий,
	|	МИНИМУМ(ЕСТЬNULL(уатПоказателиОпозданий.ЦелевойПоказатель, 0)) КАК ЦелевойПоказательОпозданий,
	|	ВЫБОР
	|		КОГДА уатПоказателиОпозданий.Организация = уатЗаказГрузоотправителя.Организация
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА уатПоказателиОпозданий.Ответственный = уатЗаказГрузоотправителя.Ответственный
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА уатПоказателиОпозданий.Контрагент = уатЗаказГрузоотправителя.Контрагент
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ПриоритетПоказателяОпозданий,
	|	0 КАК ОтклонениеОпозданий,
	|	уатМаршрутныйЛист.Организация КАК Организация
	|ПОМЕСТИТЬ втДанныеМаршрутныхЛистов
	|ИЗ
	|	Документ.уатМаршрутныйЛист КАК уатМаршрутныйЛист
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатМаршрутныйЛист.Заказы КАК уатМаршрутныйЛистЗаказы
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатПоказателиОпозданий КАК уатПоказателиОпозданий
	|				ПО (уатПоказателиОпозданий.Организация = уатЗаказГрузоотправителя.Организация
	|						ИЛИ уатПоказателиОпозданий.Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка))
	|					И (уатПоказателиОпозданий.Ответственный = уатЗаказГрузоотправителя.Ответственный
	|						ИЛИ уатПоказателиОпозданий.Ответственный = ЗНАЧЕНИЕ(Справочник.Пользователи.ПустаяСсылка))
	|					И (уатПоказателиОпозданий.Контрагент = уатЗаказГрузоотправителя.Контрагент
	|						ИЛИ уатПоказателиОпозданий.Контрагент = ЗНАЧЕНИЕ(Справочник.Контрагенты.ПустаяСсылка)
	|						ИЛИ уатПоказателиОпозданий.Контрагент = ЗНАЧЕНИЕ(Справочник.ПодразделенияОрганизаций.ПустаяСсылка)
	|						ИЛИ уатПоказателиОпозданий.Контрагент = НЕОПРЕДЕЛЕНО)
	|			ПО уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя = уатЗаказГрузоотправителя.Ссылка
	|		ПО уатМаршрутныйЛист.Ссылка = уатМаршрутныйЛистЗаказы.Ссылка
	|ГДЕ
	|	уатМаршрутныйЛист.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И уатМаршрутныйЛист.Проведен
	|	И (&Организация = НЕОПРЕДЕЛЕНО ИЛИ уатМаршрутныйЛист.Организация = &Организация)
	|	И (&Перевозчик = НЕОПРЕДЕЛЕНО ИЛИ уатМаршрутныйЛист.Контрагент = &Перевозчик)
	|	И (&Водитель = НЕОПРЕДЕЛЕНО ИЛИ уатМаршрутныйЛист.Водитель1 = &Водитель)
	|
	|СГРУППИРОВАТЬ ПО
	|	уатМаршрутныйЛистЗаказы.СтоянкаИзПункта,
	|	уатМаршрутныйЛистЗаказы.Ожидание,
	|	уатМаршрутныйЛистЗаказы.ОжиданиеФакт,
	|	ЕСТЬNULL(уатЗаказГрузоотправителя.FTL, ЛОЖЬ),
	|	ВЫБОР
	|		КОГДА уатПоказателиОпозданий.Организация = уатЗаказГрузоотправителя.Организация
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА уатПоказателиОпозданий.Ответственный = уатЗаказГрузоотправителя.Ответственный
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ + ВЫБОР
	|		КОГДА уатПоказателиОпозданий.Контрагент = уатЗаказГрузоотправителя.Контрагент
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ,
	|	уатМаршрутныйЛист.Ссылка,
	|	уатМаршрутныйЛистЗаказы.Выполнен,
	|	уатМаршрутныйЛистЗаказы.ПрибытиеПлан,
	|	уатМаршрутныйЛистЗаказы.ПрибытиеФакт,
	|	уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя,
	|	уатМаршрутныйЛистЗаказы.Пункт,
	|	уатМаршрутныйЛистЗаказы.УбытиеПлан,
	|	уатМаршрутныйЛистЗаказы.УбытиеФакт,
	|	уатМаршрутныйЛист.Контрагент,
	|	уатМаршрутныйЛист.Водитель1,
	|	уатМаршрутныйЛистЗаказы.Стоянка,
	|	ВЫБОР
	|		КОГДА уатЗаказГрузоотправителя.Ссылка ЕСТЬ NULL
	|			ТОГДА уатМаршрутныйЛистЗаказы.Контрагент
	|		ИНАЧЕ уатЗаказГрузоотправителя.Контрагент
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ уатЗаказГрузоотправителя.Ссылка ЕСТЬ NULL
	|				И уатМаршрутныйЛистЗаказы.ТипТочкиМаршрута = ЗНАЧЕНИЕ(Перечисление.уатТипыТочекМаршрута.Разгрузка)
	|			ТОГДА уатЗаказГрузоотправителя.ДоставкаС
	|		КОГДА НЕ уатЗаказГрузоотправителя.Ссылка ЕСТЬ NULL
	|				И уатМаршрутныйЛистЗаказы.ТипТочкиМаршрута = ЗНАЧЕНИЕ(Перечисление.уатТипыТочекМаршрута.Погрузка)
	|			ТОГДА уатЗаказГрузоотправителя.ОтправлениеС
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 1)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ уатЗаказГрузоотправителя.Ссылка ЕСТЬ NULL
	|				И уатМаршрутныйЛистЗаказы.ТипТочкиМаршрута = ЗНАЧЕНИЕ(Перечисление.уатТипыТочекМаршрута.Разгрузка)
	|			ТОГДА уатЗаказГрузоотправителя.ДоставкаПо
	|		КОГДА НЕ уатЗаказГрузоотправителя.Ссылка ЕСТЬ NULL
	|				И уатМаршрутныйЛистЗаказы.ТипТочкиМаршрута = ЗНАЧЕНИЕ(Перечисление.уатТипыТочекМаршрута.Погрузка)
	|			ТОГДА уатЗаказГрузоотправителя.ОтправлениеПо
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 23, 59, 0)
	|	КОНЕЦ,
	|	уатМаршрутныйЛист.Организация
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанныеМаршрутныхЛистов.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя,
	|	МАКСИМУМ(втДанныеМаршрутныхЛистов.ПриоритетПоказателяОпозданий) КАК ПриоритетПоказателяОпозданий
	|ПОМЕСТИТЬ втПриоритетыПоказателейОпозданий
	|ИЗ
	|	втДанныеМаршрутныхЛистов КАК втДанныеМаршрутныхЛистов
	|
	|СГРУППИРОВАТЬ ПО
	|	втДанныеМаршрутныхЛистов.ЗаказГрузоотправителя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втДанныеМаршрутныхЛистов.МаршрутныйЛист КАК МаршрутныйЛист,
	|	втДанныеМаршрутныхЛистов.Перевозчик КАК Перевозчик,
	|	втДанныеМаршрутныхЛистов.Водитель КАК Водитель,
	|	втДанныеМаршрутныхЛистов.Выполнен КАК Выполнен,
	|	втДанныеМаршрутныхЛистов.ВыполненПроцент КАК ВыполненПроцент,
	|	втДанныеМаршрутныхЛистов.Пункт КАК Пункт,
	|	втДанныеМаршрутныхЛистов.ПрибытиеПлан КАК ПрибытиеПлан,
	|	втДанныеМаршрутныхЛистов.ПрибытиеФакт КАК ПрибытиеФакт,
	|	втДанныеМаршрутныхЛистов.УбытиеПлан КАК УбытиеПлан,
	|	втДанныеМаршрутныхЛистов.УбытиеФакт КАК УбытиеФакт,
	|	втДанныеМаршрутныхЛистов.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя,
	|	втДанныеМаршрутныхЛистов.Контрагент КАК Контрагент,
	|	втДанныеМаршрутныхЛистов.Стоянка КАК Стоянка,
	|	втДанныеМаршрутныхЛистов.СтоянкаИзПункта КАК СтоянкаИзПункта,
	|	втДанныеМаршрутныхЛистов.ОжиданиеПлан КАК ОжиданиеПлан,
	|	втДанныеМаршрутныхЛистов.ОжиданиеФакт КАК ОжиданиеФакт,
	|	втДанныеМаршрутныхЛистов.FTL КАК FTL,
	|	втДанныеМаршрутныхЛистов.СтоянкаПлан КАК СтоянкаПлан,
	|	втДанныеМаршрутныхЛистов.ОтклонениеВремениПрибытия КАК ОтклонениеВремениПрибытия,
	|	втДанныеМаршрутныхЛистов.ОпозданиеФакт КАК ОпозданиеФакт,
	|	втДанныеМаршрутныхЛистов.ОтклонениеВремениУбытия КАК ОтклонениеВремениУбытия,
	|	втДанныеМаршрутныхЛистов.ПростойФакт КАК ПростойФакт,
	|	втДанныеМаршрутныхЛистов.СтоянкаФакт КАК СтоянкаФакт,
	|	втДанныеМаршрутныхЛистов.ОтклонениеСтоянки КАК ОтклонениеСтоянки,
	|	втДанныеМаршрутныхЛистов.ОкноС КАК ОкноС,
	|	втДанныеМаршрутныхЛистов.ОкноПо КАК ОкноПо,
	|	втДанныеМаршрутныхЛистов.ПопаданиеВоВременноеОкно КАК ПопаданиеВоВременноеОкно,
	|	втДанныеМаршрутныхЛистов.ПопаданиеВоВременноеОкноПроцент КАК ПопаданиеВоВременноеОкноПроцент,
	|	втДанныеМаршрутныхЛистов.ОтклонениеОтВременногоОкна КАК ОтклонениеОтВременногоОкна,
	|	втДанныеМаршрутныхЛистов.КоличествоОпозданий КАК КоличествоОпозданий,
	|	втДанныеМаршрутныхЛистов.ПроцентОпозданий КАК ПроцентОпозданий,
	|	втДанныеМаршрутныхЛистов.ЦелевойПоказательОпозданий КАК ЦелевойПоказательОпозданий,
	|	втДанныеМаршрутныхЛистов.ПриоритетПоказателяОпозданий КАК ПриоритетПоказателяОпозданий,
	|	втДанныеМаршрутныхЛистов.ОтклонениеОпозданий КАК ОтклонениеОпозданий,
	|	втДанныеМаршрутныхЛистов.Организация КАК Организация
	|ИЗ
	|	втДанныеМаршрутныхЛистов КАК втДанныеМаршрутныхЛистов
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПриоритетыПоказателейОпозданий КАК втПриоритетыПоказателейОпозданий
	|		ПО втДанныеМаршрутныхЛистов.ЗаказГрузоотправителя = втПриоритетыПоказателейОпозданий.ЗаказГрузоотправителя
	|			И втДанныеМаршрутныхЛистов.ПриоритетПоказателяОпозданий = втПриоритетыПоказателейОпозданий.ПриоритетПоказателяОпозданий
	|
	|УПОРЯДОЧИТЬ ПО
	|	МаршрутныйЛист,
	|	ПрибытиеПлан
	|ИТОГИ
	|	МАКСИМУМ(FTL)
	|ПО
	|	МаршрутныйЛист";
	
	Возврат ТекстЗапроса;
	
КонецФункции

// Функция возвращает текст запровса для варианта поставки Стандарт
Функция ТекстЗапросаПоМаршрутнымЛистамСтандарт()
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатМаршрутныйЛист.Ссылка КАК МаршрутныйЛист,
	|	уатМаршрутныйЛист.Контрагент КАК Перевозчик,
	|	уатМаршрутныйЛист.Водитель1 КАК Водитель,
	|	ВЫБОР
	|		КОГДА уатМаршрутныйЛистЗаказы.Выполнен
	|			ТОГДА 1
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК Выполнен,
	|	ВЫБОР
	|		КОГДА уатМаршрутныйЛистЗаказы.Выполнен
	|			ТОГДА 100
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ВыполненПроцент,
	|	уатМаршрутныйЛистЗаказы.Пункт КАК Пункт,
	|	уатМаршрутныйЛистЗаказы.ПрибытиеПлан КАК ПрибытиеПлан,
	|	уатМаршрутныйЛистЗаказы.ПрибытиеФакт КАК ПрибытиеФакт,
	|	ДАТАВРЕМЯ(1,1,1) КАК УбытиеПлан,
	|	уатМаршрутныйЛистЗаказы.УбытиеФакт КАК УбытиеФакт,
	|	уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя,
	|	ВЫБОР
	|		КОГДА уатЗаказГрузоотправителя.Ссылка ЕСТЬ NULL
	|			ТОГДА уатМаршрутныйЛистЗаказы.Контрагент
	|		ИНАЧЕ уатЗаказГрузоотправителя.Контрагент
	|	КОНЕЦ КАК Контрагент,
	|	уатМаршрутныйЛистЗаказы.Стоянка КАК Стоянка,
	|	0 КАК СтоянкаИзПункта,
	|	0 КАК ОжиданиеПлан,
	|	ЛОЖЬ КАК FTL,
	|	0 КАК СтоянкаПлан,
	|	ВЫБОР
	|		КОГДА уатМаршрутныйЛистЗаказы.Выполнен
	|			ТОГДА РАЗНОСТЬДАТ(уатМаршрутныйЛистЗаказы.ПрибытиеПлан, уатМаршрутныйЛистЗаказы.ПрибытиеФакт, МИНУТА)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК ОтклонениеВремениПрибытия,
	|	0 КАК ОпозданиеФакт,
	|	0 КАК ОтклонениеВремениУбытия,
	|	0 КАК ПростойФакт,
	|	ВЫБОР
	|		КОГДА уатМаршрутныйЛистЗаказы.Выполнен
	|			ТОГДА РАЗНОСТЬДАТ(уатМаршрутныйЛистЗаказы.ПрибытиеФакт, уатМаршрутныйЛистЗаказы.УбытиеФакт, МИНУТА)
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтоянкаФакт,
	|	0 КАК ОтклонениеСтоянки,
	|	ВЫБОР
	|		КОГДА НЕ уатЗаказГрузоотправителя.Ссылка ЕСТЬ NULL
	|				И уатМаршрутныйЛистЗаказы.ТипТочкиМаршрута = ЗНАЧЕНИЕ(Перечисление.уатТипыТочекМаршрута.Разгрузка)
	|			ТОГДА уатЗаказГрузоотправителя.ДоставкаС
	|		КОГДА НЕ уатЗаказГрузоотправителя.Ссылка ЕСТЬ NULL
	|				И уатМаршрутныйЛистЗаказы.ТипТочкиМаршрута = ЗНАЧЕНИЕ(Перечисление.уатТипыТочекМаршрута.Погрузка)
	|			ТОГДА уатЗаказГрузоотправителя.ОтправлениеС
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 1)
	|	КОНЕЦ КАК ОкноС,
	|	ВЫБОР
	|		КОГДА НЕ уатЗаказГрузоотправителя.Ссылка ЕСТЬ NULL
	|				И уатМаршрутныйЛистЗаказы.ТипТочкиМаршрута = ЗНАЧЕНИЕ(Перечисление.уатТипыТочекМаршрута.Разгрузка)
	|			ТОГДА уатЗаказГрузоотправителя.ДоставкаПо
	|		КОГДА НЕ уатЗаказГрузоотправителя.Ссылка ЕСТЬ NULL
	|				И уатМаршрутныйЛистЗаказы.ТипТочкиМаршрута = ЗНАЧЕНИЕ(Перечисление.уатТипыТочекМаршрута.Погрузка)
	|			ТОГДА уатЗаказГрузоотправителя.ОтправлениеПо
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 23, 59, 0)
	|	КОНЕЦ КАК ОкноПо,
	|	1 КАК ПопаданиеВоВременноеОкно,
	|	100 КАК ПопаданиеВоВременноеОкноПроцент,
	|	0 КАК ОтклонениеОтВременногоОкна,
	|	0 КАК КоличествоОпозданий,
	|	0 КАК ПроцентОпозданий,
	|	0 КАК ЦелевойПоказательОпозданий,
	|	0 КАК ПриоритетПоказателяОпозданий,
	|	0 КАК ОтклонениеОпозданий,
	|	уатМаршрутныйЛист.Организация КАК Организация
	|ИЗ
	|	Документ.уатМаршрутныйЛист КАК уатМаршрутныйЛист
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатМаршрутныйЛист.Заказы КАК уатМаршрутныйЛистЗаказы
	|			ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	|			ПО уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя = уатЗаказГрузоотправителя.Ссылка
	|		ПО уатМаршрутныйЛист.Ссылка = уатМаршрутныйЛистЗаказы.Ссылка
	|ГДЕ
	|	уатМаршрутныйЛист.Дата МЕЖДУ &ДатаНачала И &ДатаОкончания
	|	И уатМаршрутныйЛист.Проведен";
	Если ЗначениеЗаполнено(Организация) Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	И уатМаршрутныйЛист.Организация = &Организация";
	КонецЕсли;
	Если ЗначениеЗаполнено(Перевозчик) Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	И уатМаршрутныйЛист.Контрагент = &Перевозчик";
	КонецЕсли;
	Если ЗначениеЗаполнено(Водитель) Тогда
		ТекстЗапроса = ТекстЗапроса + "
		|	И уатМаршрутныйЛист.Водитель1 = &Водитель";
	КонецЕсли;
	ТекстЗапроса = ТекстЗапроса + "
	|СГРУППИРОВАТЬ ПО
	|	уатМаршрутныйЛист.Ссылка,
	|	уатМаршрутныйЛистЗаказы.Выполнен,
	|	уатМаршрутныйЛистЗаказы.ПрибытиеПлан,
	|	уатМаршрутныйЛистЗаказы.ПрибытиеФакт,
	|	уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя,
	|	уатМаршрутныйЛистЗаказы.Пункт,
	|	уатМаршрутныйЛистЗаказы.УбытиеФакт,
	|	уатМаршрутныйЛист.Контрагент,
	|	уатМаршрутныйЛист.Водитель1,
	|	уатМаршрутныйЛистЗаказы.Стоянка,
	|	ВЫБОР
	|		КОГДА уатЗаказГрузоотправителя.Ссылка ЕСТЬ NULL
	|			ТОГДА уатМаршрутныйЛистЗаказы.Контрагент
	|		ИНАЧЕ уатЗаказГрузоотправителя.Контрагент
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ уатЗаказГрузоотправителя.Ссылка ЕСТЬ NULL
	|				И уатМаршрутныйЛистЗаказы.ТипТочкиМаршрута = ЗНАЧЕНИЕ(Перечисление.уатТипыТочекМаршрута.Разгрузка)
	|			ТОГДА уатЗаказГрузоотправителя.ДоставкаС
	|		КОГДА НЕ уатЗаказГрузоотправителя.Ссылка ЕСТЬ NULL
	|				И уатМаршрутныйЛистЗаказы.ТипТочкиМаршрута = ЗНАЧЕНИЕ(Перечисление.уатТипыТочекМаршрута.Погрузка)
	|			ТОГДА уатЗаказГрузоотправителя.ОтправлениеС
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 0, 0, 1)
	|	КОНЕЦ,
	|	ВЫБОР
	|		КОГДА НЕ уатЗаказГрузоотправителя.Ссылка ЕСТЬ NULL
	|				И уатМаршрутныйЛистЗаказы.ТипТочкиМаршрута = ЗНАЧЕНИЕ(Перечисление.уатТипыТочекМаршрута.Разгрузка)
	|			ТОГДА уатЗаказГрузоотправителя.ДоставкаПо
	|		КОГДА НЕ уатЗаказГрузоотправителя.Ссылка ЕСТЬ NULL
	|				И уатМаршрутныйЛистЗаказы.ТипТочкиМаршрута = ЗНАЧЕНИЕ(Перечисление.уатТипыТочекМаршрута.Погрузка)
	|			ТОГДА уатЗаказГрузоотправителя.ОтправлениеПо
	|		ИНАЧЕ ДАТАВРЕМЯ(1, 1, 1, 23, 59, 0)
	|	КОНЕЦ
	|УПОРЯДОЧИТЬ ПО
	|	МаршрутныйЛист,
	|	уатМаршрутныйЛистЗаказы.ПрибытиеПлан
	|ИТОГИ 
	|	МАКСИМУМ(FTL)
	|ПО
	|	МаршрутныйЛист";
	
	Возврат ТекстЗапроса;
	
КонецФункции

Функция ПолучитьПоказателиВыполненияПоМаршрутнымЛистам(УчетПланФакта)
	
	ДатаНачала = Период.ДатаНачала;
	ДатаОкончания = Период.ДатаОкончания;
	
	// Допустимое время опоздания измеряется в минутах
	Если уатОбщегоНазначенияПовтИсп.ВариантПоставкиПРОФ() Или уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП() Тогда 
		ДопустимоеОпоздание = Константы.уатДопустимоеОтклонениеОтВремениПрибытия.Получить();
	Иначе
		ДопустимоеОпоздание = 0;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Если уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД() Тогда
		Запрос.Текст = ТекстЗапросаПоМаршрутнымЛистамСтандарт();
	Иначе
		Запрос.Текст = ТекстЗапросаПоМаршрутнымЛистам();
	КонецЕсли;
	Запрос.Параметры.Вставить("ДатаНачала",    ДатаНачала);
	Запрос.Параметры.Вставить("ДатаОкончания", ДатаОкончания);
	Запрос.Параметры.Вставить("Организация",   ?(ЗначениеЗаполнено(Организация), Организация, Неопределено));
	Запрос.Параметры.Вставить("Перевозчик",    ?(ЗначениеЗаполнено(Перевозчик), Перевозчик, Неопределено));
	Запрос.Параметры.Вставить("Водитель",      ?(ЗначениеЗаполнено(Водитель), Водитель, Неопределено));
	
	ДеревоЗначений = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкам);
	Для Каждого ТекСтрокаМЛ Из ДеревоЗначений.Строки Цикл
		Если ТекСтрокаМЛ.FTL Тогда
			ПодставитьВременныеОкнаFTLЗаказов(ТекСтрокаМЛ.Строки);
		КонецЕсли;
		Для Каждого ТекСтрока Из ТекСтрокаМЛ.Строки Цикл
			ТекСтрока.СтоянкаПлан = (ТекСтрока.УбытиеПлан - ТекСтрока.ПрибытиеПлан) / 60;
			ТекСтрока.ОжиданиеПлан = уатОбщегоНазначения.уатВремяВСекунды(ТекСтрока.ОжиданиеПлан) / 60;
			ТекСтрока.ОжиданиеФакт = уатОбщегоНазначения.уатВремяВСекунды(ТекСтрока.ОжиданиеФакт) / 60;
			Если ТекСтрока.Выполнен = 1 Тогда
				ТекСтрока.ОтклонениеВремениУбытия = (ТекСтрока.УбытиеФакт - ТекСтрока.УбытиеПлан) / 60;
				ТекСтрока.ОтклонениеСтоянки = ТекСтрока.СтоянкаФакт - ТекСтрока.СтоянкаПлан;
				Если ТекСтрока.ОтклонениеВремениПрибытия > ДопустимоеОпоздание Тогда
					ТекСтрока.КоличествоОпозданий = 1;
					ТекСтрока.ПроцентОпозданий = 100;
					ТекСтрока.ОпозданиеФакт = ТекСтрока.ОтклонениеВремениПрибытия;
				КонецЕсли;
				Если ТекСтрока.ОтклонениеВремениУбытия > 0 Тогда
					ТекСтрока.ПростойФакт = ТекСтрока.ОтклонениеВремениУбытия;
				КонецЕсли;
			КонецЕсли;
			
			Если ТекСтрока.Выполнен = 1 И ТекСтрока.ОкноС > '00010101235959' И ТекСтрока.ОкноПо > '00010101235959' Тогда
				Если УчетПланФакта Тогда
					ТекСтрока.ОтклонениеОтВременногоОкна = Макс(0, ТекСтрока.ОкноС - ТекСтрока.ПрибытиеФакт, ТекСтрока.ПрибытиеФакт - ТекСтрока.ОкноПо)/60;
				Иначе
					ТекСтрока.ОтклонениеОтВременногоОкна = Макс(0, ТекСтрока.ОкноС - ТекСтрока.ПрибытиеПлан, ТекСтрока.ПрибытиеПлан - ТекСтрока.ОкноПо)/60;
				КонецЕсли;
				Если ТекСтрока.ОтклонениеОтВременногоОкна > 0 Тогда
					ТекСтрока.ПопаданиеВоВременноеОкно = 0;
					ТекСтрока.ПопаданиеВоВременноеОкноПроцент = 0;
				КонецЕсли;
			ИначеЕсли ТекСтрока.Выполнен = 0 Тогда
				ТекСтрока.ПопаданиеВоВременноеОкно = 0;
				ТекСтрока.ПопаданиеВоВременноеОкноПроцент = 0;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат ДеревоЗначений;
	
КонецФункции

Процедура ПодставитьВременныеОкнаFTLЗаказов(Таблица)
	ЗаказыFTL = Новый Массив;
	Для Каждого ТекСтрока Из Таблица Цикл
		Если ТекСтрока.FTL И ЗаказыFTL.Найти(ТекСтрока.ЗаказГрузоотправителя) = Неопределено Тогда
			ЗаказыFTL.Добавить(ТекСтрока.ЗаказГрузоотправителя);
		КонецЕсли;
	КонецЦикла;
	
	НомераОбработанныхСтрокFTLЗаказов = Новый Соответствие;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	уатЗаказГрузоотправителяПромежуточныеПункты.Ссылка КАК ЗаказГрузоотправителя,
	|	уатЗаказГрузоотправителяПромежуточныеПункты.НомерСтроки КАК НомерСтроки,
	|	уатЗаказГрузоотправителяПромежуточныеПункты.Пункт КАК Пункт,
	|	уатЗаказГрузоотправителяПромежуточныеПункты.ОкноС КАК ОкноС,
	|	уатЗаказГрузоотправителяПромежуточныеПункты.ОкноПо КАК ОкноПо
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя.ПромежуточныеПункты КАК уатЗаказГрузоотправителяПромежуточныеПункты
	|ГДЕ
	|	уатЗаказГрузоотправителяПромежуточныеПункты.Ссылка В(&ЗаказыFTL)
	|
	|УПОРЯДОЧИТЬ ПО
	|	ЗаказГрузоотправителя,
	|	НомерСтроки");
	Запрос.УстановитьПараметр("ЗаказыFTL", ЗаказыFTL);
	ТаблицаЗаказы = Запрос.Выполнить().Выгрузить();
	
	Для Каждого ТекСтрока Из Таблица Цикл
		Если Не ТекСтрока.FTL Тогда
			Продолжить;
		КонецЕсли;
		НомерОбработаннойСтрокиЗаказа = НомераОбработанныхСтрокFTLЗаказов.Получить(ТекСтрока.ЗаказГрузоотправителя);
		Если НомерОбработаннойСтрокиЗаказа = Неопределено Тогда
			НомерТекущейСтрокиЗаказа = 0;
		Иначе
			НомерТекущейСтрокиЗаказа = НомерОбработаннойСтрокиЗаказа + 1;
		КонецЕсли;
		
		Пока НомерТекущейСтрокиЗаказа < ТаблицаЗаказы.Количество() Цикл
			Если ТекСтрока.Пункт = ТаблицаЗаказы[НомерТекущейСтрокиЗаказа].Пункт Тогда
				ТекСтрока.ОкноС  = ТаблицаЗаказы[НомерТекущейСтрокиЗаказа].ОкноС;
				ТекСтрока.ОкноПо = ТаблицаЗаказы[НомерТекущейСтрокиЗаказа].ОкноПо;
				Прервать;
			Иначе
				НомерТекущейСтрокиЗаказа = НомерТекущейСтрокиЗаказа + 1;
			КонецЕсли;
		КонецЦикла;
		
		Если НомерТекущейСтрокиЗаказа <> НомерОбработаннойСтрокиЗаказа Тогда
			НомераОбработанныхСтрокFTLЗаказов.Вставить(ТекСтрока.ЗаказГрузоотправителя, НомерТекущейСтрокиЗаказа);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОтключитьИспользованиеПоля(ВсеПоля, ИмяПоля)
	
	НайденноеПоле = ВсеПоля.Найти(ИмяПоля);
	Если НайденноеПоле <> Неопределено Тогда
		НайденноеПоле.ОграничениеИспользования.Поле = Истина;
		НайденноеПоле.ОграничениеИспользования.Группировка = Истина;
	КонецЕсли;
	
КонецПроцедуры

Процедура УстановитьЗаголовокПоля(ВсеПоля, ИмяПоля, НовыйЗаголовок)
	
	НайденноеПоле = ВсеПоля.Найти(ИмяПоля);
	Если НайденноеПоле <> Неопределено Тогда
		НайденноеПоле.Заголовок = НовыйЗаголовок;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти
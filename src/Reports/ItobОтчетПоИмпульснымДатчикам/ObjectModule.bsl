#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Настройки общей формы отчета подсистемы "Варианты отчетов".
//
// Параметры:
//   Форма - УправляемаяФорма - Форма отчета.
//   КлючВарианта - Строка - Имя предопределенного варианта отчета или уникальный идентификатор пользовательского.
//   Настройки - Структура - см. процедуру ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию.
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	
	Настройки.События.ПриСозданииНаСервере = Истина;
	
КонецПроцедуры

// Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//  
//  См. также:
//  "УправляемаяФорма.ПриСозданииНаСервере" в синтакс-помощнике.
//
// Параметры:
//  Форма				 - УправляемаяФорма	 - Форма отчета.
//  Отказ				 - Булево			 - Передается из параметров обработчика "как есть".
//  СтандартнаяОбработка - Булево			 - Передается из параметров обработчика "как есть".
//
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	// КЭШируем параметры формы.
	ПараметрыФормы = ItobОтчетыКлиентСерверПовтИсп.ПараметрыФормы(Строка(Форма.УникальныйИдентификатор));
	ПараметрыФормы.Очистить();
	Если Форма.Параметры.Свойство("СписокПараметров") Тогда
		ПараметрыФормы.Вставить("Объект", Форма.Параметры.Объект);
		ПараметрыФормы.Вставить("СписокПараметров", Форма.Параметры.СписокПараметров);
	КонецЕсли;
КонецПроцедуры

// Вызывается после перезаполнения панели настроек формы отчета.
//
// Параметры:
//  Форма				 - УправляемаяФорма	 - Форма отчета.
//  ПервоеОткрытиеФормы	 - Булево - Признак первого открытия формы.
//
Процедура ИзменитьФормуПослеСозданияЭлементовНастроек(Форма, ПервоеОткрытиеФормы) Экспорт
	
	// Проверяем, открывается ли нужная форма.
	Если Не Форма.ТипФормыОтчета = ТипФормыОтчета.Основная Или Не СтрНайти(Форма.ИмяФормы, "ФормаНастроек") = 0 Тогда // Если используется общая форма из БСП проверяем на имя.
	    Возврат;
	КонецЕсли;
	
	// Устанавливаем действие на обработку выбора элемента "Объект".
	ЭлементОбъект = ItobОтчетыКлиентСервер.НайтиЭлементФормыПоЗаголовку(Форма, "Объект");
	ЭлементОбъект.КнопкаОткрытия = Истина;
	Если ЭлементОбъект <> Неопределено Тогда 
		ЭлементОбъект.УстановитьДействие("ОбработкаВыбора", "ОбработкаВыбора");
	КонецЕсли;
	
	// Обновляем внешний вид элемента "Начало периода".
	ЭлементФормы = ItobОтчетыКлиентСервер.НайтиЭлементФормыПоЗаголовку(Форма, "Начало периода");
	ЭлементФормы.КнопкаРегулирования = Истина;
	ЭлементФормы.УстановитьДействие("Регулирование", "Подключаемый_ПолеВвода_Регулирование");
	
	// Обновляем внешний вид элемента "Конец периода".
	ЭлементФормы = ItobОтчетыКлиентСервер.НайтиЭлементФормыПоЗаголовку(Форма, "Конец периода");
	ЭлементФормы.КнопкаРегулирования = Истина;
	ЭлементФормы.УстановитьДействие("Регулирование", "Подключаемый_ПолеВвода_Регулирование");
	
	Если НЕ ПервоеОткрытиеФормы Тогда
		
		
		Возврат;		
	КонецЕсли;
	
	// Получаем из КЭШа параметры формы.
	ПараметрыФормы = ItobОтчетыКлиентСерверПовтИсп.ПараметрыФормы(Строка(Форма.УникальныйИдентификатор));
	
	// Форма открыта без параметров.
	Если ПараметрыФормы.Количество() > 0 Тогда
		ПараметрыДанных = ItobОтчетыКлиентСервер.ПолучитьПараметрыДанных(Форма);
		
		// Заполняем передаваемые параметры.
		Для Каждого Параметр Из ПараметрыФормы.СписокПараметров Цикл
		    Если Параметр.Представление = "НачПериода" Тогда
			    ItobОтчетыКлиентСервер.УстановитьЗначениеПараметра(ПараметрыДанных, "НачПериода", Новый СтандартнаяДатаНачала(Параметр.Значение), НСтр("ru = 'Начало периода'; en = 'Beginning of period'"));
		    ИначеЕсли Параметр.Представление = "КонПериода" Тогда
			    ItobОтчетыКлиентСервер.УстановитьЗначениеПараметра(ПараметрыДанных, "КонПериода", Новый СтандартнаяДатаНачала(Параметр.Значение), НСтр("ru = 'Конец периода'; en = 'End of period'"));
		    ИначеЕсли Параметр.Представление = "Объект" Тогда
			    ItobОтчетыКлиентСервер.УстановитьЗначениеПараметра(ПараметрыДанных, "Объект", Параметр.Значение, НСтр("ru = 'Объект'"));
		    ИначеЕсли Параметр.Представление = "Назначение" Тогда
			    ItobОтчетыКлиентСервер.УстановитьЗначениеПараметра(ПараметрыДанных, "Назначение", Параметр.Значение, НСтр("ru = 'Назначение'; en = 'Assignment'"));
			КонецЕсли; 
		КонецЦикла;		
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти  

	
#Область ОбработчикиСобытий

// Процедура обработчик события "ПриКомпоновкеРезультата" объекта
//
Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	// Сбрасываем параметр стандартной обработки.
	СтандартнаяОбработка = Ложь;
	
	КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ОтчетПустой", Истина);
	
	ПараметрыДанных = КомпоновщикНастроек.ПолучитьНастройки().ПараметрыДанных;
	
	// Инициализируем параметры отчета.
	НачПериода = ItobОтчетыКлиентСервер.ПолучитьЗначениеПараметра(ПараметрыДанных, "НачПериода", НСтр("ru = 'Начало периода'; en = 'Beginning of period'")).Дата;
	КонПериода = ItobОтчетыКлиентСервер.ПолучитьЗначениеПараметра(ПараметрыДанных, "КонПериода", НСтр("ru = 'Конец периода'; en = 'End of period'")).Дата;
	Объект     = ItobОтчетыКлиентСервер.ПолучитьЗначениеПараметра(ПараметрыДанных, "Объект", НСтр("ru = 'Объект'"));
	Назначение = ItobОтчетыКлиентСервер.ПолучитьЗначениеПараметра(ПараметрыДанных, "Назначение", НСтр("ru = 'Назначение'; en = 'Assignment'"));
	
	// Формируем отчет по импульсным датчикам.
	ТабличныйДокументРезультат = СформироватьОтчетПоИмпульснымДатчикам(
		НачПериода,
		КонПериода,
		Объект,
		Назначение);
		
		
	ДокументРезультат.Вывести(ТабличныйДокументРезультат)
	
КонецПроцедуры
  
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция выполняет формирование табличного документа отчета по импульсным датчикам.
//
Функция СформироватьОтчетПоИмпульснымДатчикам(НачДата, КонДата, Объект, Назначение)
	
	ТабДок = Новый ТабличныйДокумент;
	
	// Данные датчика
	СрезНаНачало = РегистрыСведений.ItobПривязкиТрекеров.ПолучитьПоследнее(НачалоДня(НачДата)-1,
	                                                           Новый Структура("Объект", Объект));
	Если НЕ ЗначениеЗаполнено(СрезНаНачало.Терминал) Тогда
		ItobРаботаС_БСП_КлиентСервер.СообщитьПользователю(НСтр("ru = 'Объект не привязан к терминалу!'"));
		Возврат ТабДок;
	
	КонецЕсли;	
	
	Терминал = СрезНаНачало.Терминал;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Терминал", Терминал);
	Запрос.УстановитьПараметр("Назначение", Назначение);	
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	ItobТерминалыДатчики.Датчик КАК Датчик,
	|	ItobТерминалыДатчики.КалибровочныйГрафик
	|ИЗ
	|	Справочник.ItobТерминалы.Датчики КАК ItobТерминалыДатчики
	|ГДЕ
	|	ItobТерминалыДатчики.Ссылка = &Терминал
	|	И ItobТерминалыДатчики.Назначение = &Назначение
	|
	|УПОРЯДОЧИТЬ ПО
	|	Датчик
	|АВТОУПОРЯДОЧИВАНИЕ";
				   
	ТабДатчики = Запрос.Выполнить().Выгрузить();
	Если ТабДатчики.Количество() = 0 Тогда
		ItobРаботаС_БСП_КлиентСервер.СообщитьПользователю(НСтр("ru = 'Для выбранного назначения не указаны датчики'"));
		Возврат ТабДок;
	КонецЕсли;
	
	ТабДанных = Новый ТаблицаЗначений;
	ТабДанных.Колонки.Добавить("ПериодДень");
	
	СтрКоличество = "";
	МассивИменКолонок = Новый Массив;
	
	ТабДок.Очистить();	
	Макет = ПолучитьМакет("Макет");
	
	ОбластьШапкаЛев         = Макет.ПолучитьОбласть("Шапка|ЛеваяСторона");
	ОбластьШапкаДатчик      = Макет.ПолучитьОбласть("Шапка|Датчик");
	ОбластьШапкаИтог        = Макет.ПолучитьОбласть("Шапка|Итог");
	
	ОбластьШапкаЛев.Параметры.ЗаголовокОтчета = НСтр("ru = 'Отчет по импульсным датчикам за'")+" "+ПредставлениеПериода(НачДата,КонДата);
	ОбластьШапкаЛев.Параметры.Объект = НСтр("ru = 'Объект мониторинга:'")+" "+Объект+", датчик: "+Назначение;	
	ТабДок.Вывести(ОбластьШапкаЛев);
	
	Для каждого СтрДатчики Из ТабДатчики Цикл
		
		ОбластьШапкаДатчик.Параметры.ИмяДатчика = СтрДатчики.Датчик;
		ТабДок.Присоединить(ОбластьШапкаДатчик);
		
		ИмяКолонкиКоличество = "Количество_"+СокрЛП(СтрДатчики.Датчик.Код);
		ТабДанных.Колонки.Добавить(ИмяКолонкиКоличество, Новый ОписаниеТипов("Число",Новый КвалификаторыЧисла(8,3)));
		
		МассивИменКолонок.Добавить(ИмяКолонкиКоличество);
		
		ТабРезультат = ItobОперативныйМониторинг.ПолучитьДанныеДатчикаОбъекта(Объект,НачДата,КонДата,СтрДатчики.Датчик);
		
		СтрКоличество = СтрКоличество + ?(СтрКоличество="","",",")+ИмяКолонкиКоличество;
		
		Если ТабРезультат.Количество() > 0 Тогда
			
			Для Счетчик = 1 По ТабРезультат.Количество()-1 Цикл
				
				НовСтрокаДанных = ТабДанных.Добавить(); 			
				НовСтрокаДанных.ПериодДень = НачалоДня(ТабРезультат[Счетчик].Период);
				НовСтрокаДанных[ИмяКолонкиКоличество] = ?(ТабРезультат[Счетчик].Значение >= ТабРезультат[Счетчик-1].Значение,
					ТабРезультат[Счетчик].Значение-ТабРезультат[Счетчик-1].Значение, ТабРезультат[Счетчик].Значение);			
				
			КонецЦикла;		
			
		КонецЕсли;	
		
	
	КонецЦикла;
	
	ТабДок.Присоединить(ОбластьШапкаИтог);
	
	ТабДанных.Свернуть("ПериодДень", СтрКоличество);
	ТабДанных.Сортировать("ПериодДень Возр");
		
	Для каждого СтрДатчики Из ТабДатчики Цикл			
		
		Если ЗначениеЗаполнено(СтрДатчики.КалибровочныйГрафик) Тогда
			ИмяКолонкиКоличество = "Количество_"+СокрЛП(СтрДатчики.Датчик.Код);
		
			Для каждого СтрТабДанных Из ТабДанных Цикл
				СтрТабДанных[ИмяКолонкиКоличество] = ItobКалькуляцияПараметровВыработки.ПреобразоватьЗначениеПоКалибровочномуГрафику(
					СтрТабДанных[ИмяКолонкиКоличество], СтрДатчики.КалибровочныйГрафик);
				
			КонецЦикла;	
			
		КонецЕсли;		
	КонецЦикла;
			
	ОбластьДеталиЛев    = Макет.ПолучитьОбласть("Детали|ЛеваяСторона");	
	ОбластьДеталиДатчик = Макет.ПолучитьОбласть("Детали|Датчик");
	ОбластьДеталиИтог   = Макет.ПолучитьОбласть("Детали|Итог");
	
	НомерПП = 1;
	
	Для Каждого СтрокаДанных Из ТабДанных Цикл
						
		ОбластьДеталиЛев.Параметры.НомерПП = НомерПП;
		ОбластьДеталиЛев.Параметры.ПериодДень = СтрокаДанных.ПериодДень;		
		ТабДок.Вывести(ОбластьДеталиЛев);
		
		ТекИтог = 0;
		Для каждого ИмяКолонкиДатчики Из МассивИменКолонок Цикл
			ОбластьДеталиДатчик.Параметры.Количество = СтрокаДанных[ИмяКолонкиДатчики]; 				
		    ТекИтог = ТекИтог + СтрокаДанных[ИмяКолонкиДатчики];
			ТабДок.Присоединить(ОбластьДеталиДатчик);
			
		КонецЦикла;
		
		ОбластьДеталиИтог.Параметры.Количество = ТекИтог;
		ТабДок.Присоединить(ОбластьДеталиИтог);
				
		НомерПП = НомерПП + 1;
	
	КонецЦикла;	
	
	ОбластьИтогЛев    = Макет.ПолучитьОбласть("ИтогСтрока|ЛеваяСторона");	
	ОбластьИтогДатчик = Макет.ПолучитьОбласть("ИтогСтрока|Датчик");
	ОбластьИтогИтог   = Макет.ПолучитьОбласть("ИтогСтрока|Итог");
		
	ТабДок.Вывести(ОбластьИтогЛев);
	
	ТекИтог = 0;
	Для каждого ИмяКолонкиДатчики Из МассивИменКолонок Цикл
		ОбластьИтогДатчик.Параметры.Количество = ТабДанных.Итог(ИмяКолонкиДатчики); 				
		ТекИтог = ТекИтог + ТабДанных.Итог(ИмяКолонкиДатчики);
		ТабДок.Присоединить(ОбластьИтогДатчик);
		
	КонецЦикла;
	
	ОбластьИтогИтог.Параметры.Количество = ТекИтог;
	ТабДок.Присоединить(ОбластьИтогИтог);
	
	
	Возврат ТабДок;

	
КонецФункции // СформироватьОтчетПоИмпульснымДатчикам()


#КонецОбласти 


#КонецЕсли


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Организация = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
			ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнаяОрганизация");
	КонецЕсли;
	ВалютаУпрУчета = Константы.ВалютаУправленческогоУчета.Получить();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если НЕ ЗначениеЗаполнено(Периодичность) Тогда
		Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.День");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Валюта) Тогда
		Валюта = ВалютаУпрУчета;
	КонецЕсли;
	Если Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.День") Тогда
		ДатаНач = НачалоНедели(ТекущаяДата());
		ДатаКон = КонецНедели(ТекущаяДата());
	Иначе
		ДатаНач = НачалоПолугодияДоп(ТекущаяДата());
		ДатаКон = КонецПолугодияДоп(ТекущаяДата());
	КонецЕсли;
	
	Если ТребуетсяВыполнитьОтложенноеОбновление_1_1_24_1() Тогда
		Оповещ = Новый ОписаниеОповещения("ТребуетсяВыполнитьОтложенноеОбновление_1_1_24_1_Завершение", ЭтотОбъект);
		ТекстВопроса = "За период текущего года обнаружены данные платежного календаря, для которых рекомендуется выполнить обновление. Открыть обработку обновления?";
		ПоказатьВопрос(Оповещ, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ТребуетсяВыполнитьОтложенноеОбновление_1_1_24_1()
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|	уатПлатежныйКалендарьОбороты.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.уатПлатежныйКалендарь.Обороты(&НачДата, , Регистратор, ) КАК уатПлатежныйКалендарьОбороты
	|ГДЕ
	|	(уатПлатежныйКалендарьОбороты.СуммаПриходОборот < 0
	|			ИЛИ уатПлатежныйКалендарьОбороты.СуммаПриходУпрОборот < 0)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	|	уатЗаказГрузоотправителя.Ссылка
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатТекущееСостояниеОплатыЗаказов КАК уатТекущееСостояниеОплатыЗаказов
	|		ПО уатЗаказГрузоотправителя.Ссылка = уатТекущееСостояниеОплатыЗаказов.ЗаказНаТС
	|ГДЕ
	|	уатТекущееСостояниеОплатыЗаказов.ЗаказНаТС ЕСТЬ NULL
	|	И (уатЗаказГрузоотправителя.Дата >= &НачДата)
	|	И уатЗаказГрузоотправителя.Проведен
	|	И (уатЗаказГрузоотправителя.ДоговорКонтрагента.ВедениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам)
	|	ИЛИ уатЗаказГрузоотправителя.ДоговорКонтрагента.ВедениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоНакладным)
	|	ИЛИ уатЗаказГрузоотправителя.ДоговорКонтрагента.ВедениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказамНаТС))");
	Запрос.УстановитьПараметр("НачДата", НачалоГода(ТекущаяДата()));
	Рез = НЕ Запрос.Выполнить().Пустой();
	
	Возврат Рез;
КонецФункции

&НаКлиенте
Процедура ТребуетсяВыполнитьОтложенноеОбновление_1_1_24_1_Завершение(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.ОК Тогда
		ОткрытьФорму("Обработка.уатОтложенноеОбновлениеИБ.Форма.Форма");
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТабДокОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка, ДополнительныеПараметры)
	Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		СтандартнаяОбработка = Ложь;
		Оповещ = Новый ОписаниеОповещения("ТабДокРасшифровка", ЭтотОбъект);
		списокРасшифровка = Новый СписокЗначений;
		списокРасшифровка.Добавить(Расшифровка, "Открыть документ");
		списокРасшифровка.Добавить(Расшифровка, "Открыть отчет ""Контроль отсрочки платежей""");
		ПоказатьВыборИзМеню(Оповещ, списокРасшифровка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТабДокРасшифровка(Результат, ДопПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат.Представление = "Открыть документ" Тогда
		ПоказатьЗначение(Неопределено, Результат.Значение.Сделка);
	Иначе
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("Отбор",                   Новый Структура("Сделка, ДоговорКонтрагента", Результат.Значение.Сделка, Результат.Значение.Договор));
		ПараметрыФормы.Вставить("СформироватьПриОткрытии", Истина);
		ОткрытьФорму("Отчет.уатКонтрольОтсрочкиПлатежей.Форма", ПараметрыФормы);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДатаНачПриИзменении(Элемент)
	Если Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Месяц") Тогда
		ДатаНач = НачалоМесяца(ДатаНач);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДатаКонПриИзменении(Элемент)
	Если Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Месяц") Тогда
		ДатаКон = КонецМесяца(ДатаКон);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПериодичностьПриИзменении(Элемент)
	//Если Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.День") Тогда
	//	ДатаНач = НачалоНедели(ТекущаяДата());
	//	ДатаКон = КонецНедели(ТекущаяДата());
	//Иначе
	//	ДатаНач = НачалоПолугодияДоп(ТекущаяДата());
	//	ДатаКон = КонецПолугодияДоп(ТекущаяДата());
	//КонецЕсли;
	
	СформироватьОтчетСервер();
КонецПроцедуры

&НаКлиенте
Процедура ВидЗадоженностиПриИзменении(Элемент)
	СформироватьОтчетСервер();
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СформироватьОтчет(Команда)
	// проверка даты начала и окончания периода
	Если ДатаНач = '00010101' ИЛИ ДатаКон = '00010101' ИЛИ ДатаНач > ДатаКон Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Период не указан или указан некорректно");
		Возврат;
	КонецЕсли;
	
	СформироватьОтчетСервер();
КонецПроцедуры

&НаКлиенте
Процедура НастройкаПериода(Команда)
	ДиалогПериода = Новый ДиалогРедактированияСтандартногоПериода();
	ДиалогПериода.Период.ДатаНачала = ДатаНач;
	ДиалогПериода.Период.ДатаОкончания = ДатаКон;
	ДиалогПериода.Показать(Новый ОписаниеОповещения("НастройкаПериодаЗавершение", ЭтотОбъект));
КонецПроцедуры

&НаКлиенте
Процедура НастройкаПериодаЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ДатаНач = Результат.ДатаНачала;
		ДатаКон = Результат.ДатаОкончания;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура СформироватьОтчетСервер()
	ПериодичностьДень = (Периодичность = Перечисления.Периодичность.День);
	// В каждой строке минимум 3 ячейки под документы. Если их меньше 3, то все равно отображается 3.
	// Если больше, то просто не отображаются
	СтрокДокументовЗаДеньМинимум = 3;
	КоличПоГоризонтали = ?(ПериодичностьДень, 7, 6); //7 - для вида "День", 6 - для вида "Месяц"
		
	ТабДок.Очистить();
	
	//Макет = РеквизитФормыВЗначение("Отчет").ПолучитьМакет("Макет");
	Макет = Отчеты.уатПлатежныйКалендарь.ПолучитьМакет("Макет");
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатПлатежныйКалендарьОбороты.Сделка КАК Сделка,
	|	уатПлатежныйКалендарьОбороты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	уатПлатежныйКалендарьОбороты.ПолучательУслуг КАК ПолучательУслуг,
	|	уатПлатежныйКалендарьОбороты.ЭтапОплаты КАК ЭтапОплаты,
	|	уатПлатежныйКалендарьОбороты.ЗаказНаТС КАК ЗаказНаТС,
	|	ВЫБОР
	|		КОГДА &ВВалютеУпр = ИСТИНА
	|			ТОГДА СУММА(уатПлатежныйКалендарьОбороты.СуммаПриходУпрОборот) - СУММА(уатПлатежныйКалендарьОбороты.СуммаРасходУпрОборот)
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ВЫБОР
	|						КОГДА уатПлатежныйКалендарьОбороты.Валюта = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|							ТОГДА уатПлатежныйКалендарьОбороты.ДоговорКонтрагента.ВалютаВзаиморасчетов
	|						ИНАЧЕ уатПлатежныйКалендарьОбороты.Валюта
	|					КОНЕЦ = &Валюта
	|					ТОГДА СУММА(уатПлатежныйКалендарьОбороты.СуммаПриходОборот) - СУММА(уатПлатежныйКалендарьОбороты.СуммаРасходОборот)
	|				ИНАЧЕ (СУММА(уатПлатежныйКалендарьОбороты.СуммаПриходУпрОборот) - СУММА(уатПлатежныйКалендарьОбороты.СуммаРасходУпрОборот)) * &КоэффициентКурсаУпр
	|			КОНЕЦ
	|	КОНЕЦ КАК Осталось
	|ПОМЕСТИТЬ уатПлатежныйКалендарьОбороты
	|ИЗ
	|	РегистрНакопления.уатПлатежныйКалендарь.Обороты(
	|			,
	|			,
	|			,
	|			ПолучательУслуг = &ПолучательУслуг
	|				И (Организация = &Организация
	|					ИЛИ &Организация = НЕОПРЕДЕЛЕНО)
	|				И (Контрагент = &Контрагент
	|					ИЛИ &Контрагент = НЕОПРЕДЕЛЕНО)
	|				И (Сделка = &Сделка
	|					ИЛИ &Сделка = НЕОПРЕДЕЛЕНО)) КАК уатПлатежныйКалендарьОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	уатПлатежныйКалендарьОбороты.Сделка,
	|	уатПлатежныйКалендарьОбороты.ДоговорКонтрагента,
	|	уатПлатежныйКалендарьОбороты.Валюта,
	|	уатПлатежныйКалендарьОбороты.ПолучательУслуг,
	|	уатПлатежныйКалендарьОбороты.ЭтапОплаты,
	|	уатПлатежныйКалендарьОбороты.ЗаказНаТС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатПлатежныйКалендарьОбороты.Сделка КАК Сделка,
	|	уатПлатежныйКалендарьОбороты.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	уатПлатежныйКалендарьОбороты.Сделка.Организация КАК СделкаОрганизация,
	|	уатПлатежныйКалендарьОбороты.Сделка.Номер КАК СделкаНомер,
	|	уатПлатежныйКалендарьОбороты.Сделка.Дата КАК СделкаДата,
	|	СУММА(уатПлатежныйКалендарьОбороты.Осталось) КАК Сумма,
	|	ВЫБОР
	|		КОГДА &ПериодичностьДень
	|			ТОГДА уатДатыПлатежей.ДатаПлатежа
	|		ИНАЧЕ НАЧАЛОПЕРИОДА(уатДатыПлатежей.ДатаПлатежа, МЕСЯЦ)
	|	КОНЕЦ КАК ДатаПлатежа,
	|	ЕСТЬNULL(уатПлатежныйКалендарьОбороты.ЭтапОплаты.ВариантОтсчета = ЗНАЧЕНИЕ(Перечисление.уатВариантыОтсчетаДатыПлатежа.ДоОтправленияПоЗаказу), ЛОЖЬ) КАК Предоплата
	|ИЗ
	|	уатПлатежныйКалендарьОбороты КАК уатПлатежныйКалендарьОбороты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.уатДатыПлатежей КАК уатДатыПлатежей
	|		ПО уатПлатежныйКалендарьОбороты.Сделка = уатДатыПлатежей.Сделка
	|			И уатПлатежныйКалендарьОбороты.ЗаказНаТС = уатДатыПлатежей.ЗаказНаТС
	|			И уатПлатежныйКалендарьОбороты.ПолучательУслуг = уатДатыПлатежей.ПолучательУслуг
	|			И уатПлатежныйКалендарьОбороты.ДоговорКонтрагента = уатДатыПлатежей.ДоговорКонтрагента
	|			И уатПлатежныйКалендарьОбороты.ЭтапОплаты = уатДатыПлатежей.ЭтапОплаты
	|ГДЕ
	|	уатПлатежныйКалендарьОбороты.Осталось > 0
	|
	|СГРУППИРОВАТЬ ПО
	|	уатПлатежныйКалендарьОбороты.Сделка,
	|	уатПлатежныйКалендарьОбороты.ДоговорКонтрагента,
	|	уатПлатежныйКалендарьОбороты.ЭтапОплаты,
	|	уатДатыПлатежей.ДатаПлатежа");
	Запрос.УстановитьПараметр("Организация", ?(ЗначениеЗаполнено(Организация), Организация, Неопределено));
	Запрос.УстановитьПараметр("Контрагент", ?(ЗначениеЗаполнено(Контрагент), Контрагент, Неопределено));
	Запрос.УстановитьПараметр("Сделка", ?(ЗначениеЗаполнено(Сделка), Сделка, Неопределено));
	Запрос.УстановитьПараметр("Валюта", Валюта);
	Запрос.УстановитьПараметр("ВВалютеУпр", Валюта = ВалютаУпрУчета);
	Запрос.УстановитьПараметр("ПериодичностьДень", ПериодичностьДень);
	Если ВидЗадолженности = 0 Тогда
		Запрос.УстановитьПараметр("ПолучательУслуг", Перечисления.уатПолучателиУслуг.Контрагент);
	Иначе
		Запрос.УстановитьПараметр("ПолучательУслуг", Перечисления.уатПолучателиУслуг.НашаОрганизация);
	КонецЕсли;
	
	// получаем множитель для пересчета из валюты упр. в валюту отчета
	СтруктураКурсаОтчета = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(Валюта, ТекущаяДата());
	СтруктураКурсаУпр = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ВалютаУпрУчета, ТекущаяДата());
	КоэффициентКурсаУпр = СтруктураКурсаУпр.Курс / СтруктураКурсаУпр.Кратность * СтруктураКурсаОтчета.Кратность / СтруктураКурсаОтчета.Курс;
	Запрос.УстановитьПараметр("КоэффициентКурсаУпр", КоэффициентКурсаУпр);
	
	ТаблицаДанные = Запрос.Выполнить().Выгрузить();
	
	// Формируем структуру данных в удобном представлении - соответствие массивов строк по датам платежей
	СтрокиПоДатам = Новый Соответствие;
	СуммыПоДатам = Новый Соответствие;
	СтруктураИтоги = Новый Структура("Сумма, ВхДолг, ИсхДолг", 0, 0, 0);
	Для Каждого ТекСтрока Из ТаблицаДанные Цикл
		Если ТекСтрока.ДатаПлатежа < ДатаНач Тогда
			СтруктураИтоги.ВхДолг = СтруктураИтоги.ВхДолг + ТекСтрока.Сумма;
		ИначеЕсли ТекСтрока.ДатаПлатежа > ДатаКон Тогда
			СтруктураИтоги.ИсхДолг = СтруктураИтоги.ИсхДолг + ТекСтрока.Сумма;
		Иначе
			СтруктураИтоги.Сумма = СтруктураИтоги.Сумма + ТекСтрока.Сумма;
		КонецЕсли;
		
		мсвСтрокиДанных = СтрокиПоДатам.Получить(ТекСтрока.ДатаПлатежа);
		Если мсвСтрокиДанных = Неопределено Тогда
			мсвСтрокиДанных = Новый Массив;
		КонецЕсли;
		мсвСтрокиДанных.Добавить(ТекСтрока);
		СтрокиПоДатам.Вставить(ТекСтрока.ДатаПлатежа, мсвСтрокиДанных);
		
		ТекЗнач = СуммыПоДатам.Получить(ТекСтрока.ДатаПлатежа);
		Если ТекЗнач = Неопределено Тогда
			ТекЗнач = 0;
		КонецЕсли;
		СуммыПоДатам.Вставить(ТекСтрока.ДатаПлатежа, ТекЗнач + ТекСтрока.Сумма);
	КонецЦикла;
	
	ОбластьЗаголовок = Макет.ПолучитьОбласть("Заголовок|Колонка");
	ОбластьЗаголовок.Параметры.Заголовок = СтрШаблон("Платежный календарь %1 задолженности с %2 по %3",
		?(ВидЗадолженности = 0, "дебиторской", "кредиторской"),
		Формат(ДатаНач, "ДФ=dd.MM.yyyy"),
		Формат(ДатаКон, "ДФ=dd.MM.yyyy"));
	ТабДок.Вывести(ОбластьЗаголовок);
		
	ОбластьШапкаДата = Макет.ПолучитьОбласть("Шапка|Колонка");
	ОбластьЯчейка = Макет.ПолучитьОбласть("Строка|Колонка");
	ОбластьИтогиДата = Макет.ПолучитьОбласть("ОбщиеИтоги|Колонка");
	ОбластьШапкаДатаВнеПериода = Макет.ПолучитьОбласть("Шапка|КолонкаВнеПериода");
	ОбластьЯчейкаВнеПериода = Макет.ПолучитьОбласть("Строка|КолонкаВнеПериода");
	ОбластьИтогиДатаВнеПериода = Макет.ПолучитьОбласть("ОбщиеИтоги|КолонкаВнеПериода");
	ОбластьШапкаИтогиЗаНеделю = Макет.ПолучитьОбласть("Шапка|ИтогоЗаНеделю");
	ОбластьЯчейкаИтогиЗаНеделю = Макет.ПолучитьОбласть("Строка|ИтогоЗаНеделю");
	ОбластьИтогиДатаИтогиЗаНеделю = Макет.ПолучитьОбласть("ОбщиеИтоги|ИтогоЗаНеделю");
	
	ЦветТекстПоУмолчанию = WebЦвета.Черный;
	
	Если ПериодичностьДень Тогда
		НачалоПериодаОтображения = НачалоНедели(ДатаНач);
		КонецПериодаОтображения = НачалоДня(КонецНедели(ДатаКон));
		КоличПоВертикали = ((КонецПериодаОтображения - НачалоПериодаОтображения)/24/3600 + 1)/7;
	Иначе
		НачалоПериодаОтображения = НачалоПолугодияДоп(ДатаНач);
		КонецПериодаОтображения = КонецПолугодияДоп(ДатаКон);
		КоличПоВертикали = (Месяц(КонецПериодаОтображения) - Месяц(НачалоПериодаОтображения) + 1)/6 + (Год(ДатаКон) - Год(ДатаНач))*2;
		ОбластьШапкаДата.Область().Формат = "ДФ='MMMM yyyy'";
		ОбластьШапкаДатаВнеПериода.Область().Формат = "ДФ='MMMM yyyy'";
	КонецЕсли;
		
	Для НомПоВертикали = 1 По КоличПоВертикали Цикл
		// шапка таблицы
		Для НомКолонки = 1 По КоличПоГоризонтали Цикл
			ТекДата = РассчитатьТекДату(ПериодичностьДень, КоличПоГоризонтали, НачалоПериодаОтображения, НомПоВертикали, НомКолонки);
			
			флТекДатаВПериоде = (ТекДата >= ДатаНач И ТекДата <= ДатаКон);
			
			ТекОбласть = ?(флТекДатаВПериоде, ОбластьШапкаДата, ОбластьШапкаДатаВнеПериода);
			ТекОбласть.Параметры.Дата = ТекДата;
			Если НомКолонки = 1 Тогда
				ТабДок.Вывести(ТекОбласть);
			Иначе
				Если флТекДатаВПериоде Тогда
					ТекОбласть.Область().ГраницаСлева = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
				Иначе
					ТекОбласть.Область().ГраницаСлева = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
				КонецЕсли;
				ТабДок.Присоединить(ТекОбласть);
			КонецЕсли;
		КонецЦикла;
		
		// итоги за неделю
		ТабДок.Присоединить(ОбластьШапкаИтогиЗаНеделю);
		
		// расчет количества выводимых строк документов в день
		СтрокДокументовЗаДень = СтрокДокументовЗаДеньМинимум;
		Для НомКолонки = 1 По КоличПоГоризонтали Цикл
			ТекДата = РассчитатьТекДату(ПериодичностьДень, КоличПоГоризонтали, НачалоПериодаОтображения, НомПоВертикали, НомКолонки);
			
			мсвСтрокиДанные = СтрокиПоДатам.Получить(ТекДата);
			Если мсвСтрокиДанные = Неопределено Тогда
				КоличДокументов = 0;
			Иначе
				КоличДокументов = мсвСтрокиДанные.Количество();
			КонецЕсли;
			СтрокДокументовЗаДень = Макс(КоличДокументов, СтрокДокументовЗаДень);
		КонецЦикла;
		
		// строки документов		
		Для НомСтроки = 1 По СтрокДокументовЗаДень Цикл
			Для НомКолонки = 1 По КоличПоГоризонтали Цикл
				ТекДата = РассчитатьТекДату(ПериодичностьДень, КоличПоГоризонтали, НачалоПериодаОтображения, НомПоВертикали, НомКолонки);
				
				флТекДатаВПериоде = (ТекДата >= ДатаНач И ТекДата <= ДатаКон);
				
				// сброс данных области ячейки
				ТекОбласть = ?(ТекДата >= ДатаНач И ТекДата <= ДатаКон, ОбластьЯчейка, ОбластьЯчейкаВнеПериода);
				ЗаполнитьЗначенияСвойств(ТекОбласть.Параметры, Новый Структура("СделкаПредставление, СделкаРасшифровка, Сумма", "", Неопределено, 0));
				
				мсвСтрокиДанные = СтрокиПоДатам.Получить(ТекДата);
				Если мсвСтрокиДанные <> Неопределено Тогда
					КоличДокументов = мсвСтрокиДанные.Количество();
					Если НомСтроки <= КоличДокументов Тогда
						СтрокаДанные = мсвСтрокиДанные[НомСтроки-1];
						ЗаполнитьЗначенияСвойств(ТекОбласть.Параметры, СтрокаДанные);
						СтруктураСделка = Новый Структура("Номер, Организация", СтрокаДанные.СделкаНомер, СтрокаДанные.СделкаОрганизация);
						СделкаПредставление = СтрокаДанные.СделкаНомер;
						СделкаРасшифровка = Новый Структура("Сделка, Договор", СтрокаДанные.Сделка, СтрокаДанные.ДоговорКонтрагента);
						ЗаполнитьЗначенияСвойств(ТекОбласть.Параметры, Новый Структура("СделкаПредставление, СделкаРасшифровка", СделкаПредставление, СделкаРасшифровка));
						
						Если СтрокаДанные.Предоплата Тогда
							ТекОбласть.Область().ЦветТекста = WebЦвета.Синий; // предоплата синим цветом
						Иначе
							ТекОбласть.Область().ЦветТекста = ЦветТекстПоУмолчанию;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если НомКолонки = 1 Тогда
					ТабДок.Вывести(ТекОбласть);
				Иначе
					Если флТекДатаВПериоде Тогда
						ТекОбласть.Область().ГраницаСлева = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
					Иначе
						ТекОбласть.Область().ГраницаСлева = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
					КонецЕсли;
					ТабДок.Присоединить(ТекОбласть);
				КонецЕсли;
			КонецЦикла;
			
			// итоги за неделю
			ТекОбластьИтоги = ТабДок.Присоединить(ОбластьЯчейкаИтогиЗаНеделю);
		КонецЦикла;
				
		// итоговая строка таблицы
		ИтогоЗаНеделю = 0;
		Для НомКолонки = 1 По КоличПоГоризонтали Цикл
			ТекДата = РассчитатьТекДату(ПериодичностьДень, КоличПоГоризонтали, НачалоПериодаОтображения, НомПоВертикали, НомКолонки);
			
			флТекДатаВПериоде = (ТекДата >= ДатаНач И ТекДата <= ДатаКон);
			
			// сброс данных области ячейки
			ТекОбласть = ?(ТекДата >= ДатаНач И ТекДата <= ДатаКон, ОбластьИтогиДата, ОбластьИтогиДатаВнеПериода);
			ЗаполнитьЗначенияСвойств(ТекОбласть.Параметры,
				Новый Структура("СделкаПредставление, СделкаРасшифровка, Сумма, ТекстИтого", "", Неопределено, 0, ""));
			
			ИтогиПоДате = СуммыПоДатам.Получить(ТекДата);
			Если ИтогиПоДате = Неопределено Тогда
				ИтогиПоДате = 0;
			КонецЕсли;
			
			ТекОбласть.Параметры.Сумма = ИтогиПоДате;
			
			Если НомКолонки = 1 Тогда
				//ТекОбласть.Параметры.ТекстИтого = "ИТОГО";
				ТабДок.Вывести(ТекОбласть);
			Иначе
				Если флТекДатаВПериоде Тогда
					ТекОбласть.Область().ГраницаСлева = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная);
				Иначе
					ТекОбласть.Область().ГраницаСлева = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.НетЛинии);
				КонецЕсли;
				ТабДок.Присоединить(ТекОбласть);
			КонецЕсли;
			
			Если флТекДатаВПериоде Тогда
				ИтогоЗаНеделю = ИтогоЗаНеделю + ИтогиПоДате;
			КонецЕсли;
		КонецЦикла;
		
		// итоги за неделю
		ОбластьИтогиДатаИтогиЗаНеделю.Параметры.Сумма = ИтогоЗаНеделю;
		ТабДок.Присоединить(ОбластьИтогиДатаИтогиЗаНеделю);
		
		// пустой промежуток между днями по вертикали
		ОбластьПустаяСтрока = Макет.ПолучитьОбласть("ПустаяСтрока");
		ТабДок.Вывести(ОбластьПустаяСтрока);
	КонецЦикла;
	
	//подвал
	ТекОбласть = Макет.ПолучитьОбласть("Подвал|ИтогоЗаНеделю");
	ТабДок.Вывести(ТекОбласть);
	Если Периодичность = Перечисления.Периодичность.День Тогда
		ТекОбласть = Макет.ПолучитьОбласть("Подвал|ИтогоЗаНеделю");
		ТабДок.Присоединить(ТекОбласть);
	КонецЕсли;
	
	ТекОбласть = Макет.ПолучитьОбласть("Подвал|КолонкаИтоги");
	ТекОбласть.Параметры.ИтогоПодвалТекст = "Входящий долг:";
	ТекОбласть.Параметры.ИтогоПодвал = СтруктураИтоги.ВхДолг;
	ТабДок.Присоединить(ТекОбласть);
	ТекОбласть = Макет.ПолучитьОбласть("Подвал|КолонкаИтоги");
	ТекОбласть.Параметры.ИтогоПодвалТекст = "Исходящий долг:";
	ТекОбласть.Параметры.ИтогоПодвал = СтруктураИтоги.ИсхДолг;
	ТабДок.Присоединить(ТекОбласть);
	ТекОбласть = Макет.ПолучитьОбласть("Подвал|КолонкаИтоги");
	ТекОбласть.Параметры.ИтогоПодвалТекст = "За период:";
	ТекОбласть.Параметры.ИтогоПодвал = СтруктураИтоги.Сумма;
	ТабДок.Присоединить(ТекОбласть);
	
	//// Зафиксируем заголовок отчета
	//ТабДок.ФиксацияСверху 	= 6;
	//ТабДок.ПолеСлева 		= 0;
	//ТабДок.ПолеСправа 		= 0;

КонецПроцедуры

&НаСервере
Функция НачалоПолугодияДоп(ТекДата)
	Если Месяц(ТекДата) <=6 Тогда
		Возврат НачалоГода(ТекДата);
	Иначе
		Возврат Дата(Год(ТекДата), 7, 1);
	КонецЕсли;
КонецФункции

&НаСервере
Функция КонецПолугодияДоп(ТекДата)
	Если Месяц(ТекДата) >=7 Тогда
		Возврат КонецГода(ТекДата);
	Иначе
		Возврат Дата(Год(ТекДата), 6, 30);
	КонецЕсли;
КонецФункции

&НаСервере
Функция РассчитатьТекДату(ПериодичностьДень, КоличПоГоризонтали, НачалоПериодаОтображения, НомПоВертикали, НомКолонки)
	Если ПериодичностьДень Тогда
		ТекДата = НачалоПериодаОтображения + ((НомПоВертикали-1)*КоличПоГоризонтали + НомКолонки - 1)*24*3600;
	Иначе
		ТекДата = ДобавитьМесяц(НачалоПериодаОтображения, ((НомПоВертикали-1)*КоличПоГоризонтали + НомКолонки - 1));
	КонецЕсли;
	
	Возврат ТекДата;
КонецФункции		
			
#КонецОбласти

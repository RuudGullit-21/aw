&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(Параметры.МодельБюджетирования) Или Не ЗначениеЗаполнено(Параметры.ВидБюджета) Тогда
		
		ТекстНСТР = НСтр("en='Открытие отчета возможно только из "
" - формы справочника ""Вид бюджета"" "
" - рабочего места ""Бюджетные отчеты""';ru='Открытие отчета возможно только из "
" - формы справочника ""Вид бюджета"" "
" - рабочего места ""Бюджетные отчеты""'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
								Отказ = Истина;
								СтандартнаяОбработка = Ложь;
								Возврат;
		
		
		//ВызватьИсключение НСтр("ru = 'Открытие отчета возможно только из 
		//                        | - формы справочника ""Вид бюджета"" 
		//                        | - рабочего места ""Бюджетные отчеты""'");
	КонецЕсли;
	
	МодельБюджетирования = Параметры.МодельБюджетирования;
	ВидБюджета           = Параметры.ВидБюджета;
	
	Если Параметры.Свойство("Период") Тогда
		НачалоПериода = Параметры.Период.ДатаНачала;
		КонецПериода = Параметры.Период.ДатаОкончания;
	КонецЕсли;
	
	Если Параметры.Свойство("СформироватьБюджетныйОтчетПриОткрытии") Тогда
		СформироватьОтчет = Параметры.СформироватьБюджетныйОтчетПриОткрытии;
	КонецЕсли;
	
	Если Параметры.Свойство("Сценарий") Тогда
		Сценарий = Параметры.Сценарий;
	КонецЕсли;
	
	Если Параметры.Свойство("Организации") Тогда
		Организация = Параметры.Организации;
		Если Организация.Количество() > 0 Тогда
			ИспользоватьОтборПоОрганизациям = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если Параметры.Свойство("Подразделения") Тогда
		Подразделение = Параметры.Подразделения;
		Если Подразделение.Количество() > 0 Тогда
			ИспользоватьОтборПоПодразделениям = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ВидыБюджетовАналитикиШапки.НомерСтроки КАК НомерСтроки,
		|	ВидыБюджетовАналитикиШапки.ВидАналитики,
		|	ВидыБюджетовАналитикиШапки.ВидАналитики.ТипЗначения КАК ТипЗначения,
		|	ВидыБюджетовАналитикиШапки.ВидАналитики.Наименование КАК Наименование
		|ИЗ
		|	Справочник.ВидыБюджетов.АналитикиШапки КАК ВидыБюджетовАналитикиШапки
		|ГДЕ
		|	ВидыБюджетовАналитикиШапки.Ссылка = &ВидБюджета";
		
	Запрос.УстановитьПараметр("ВидБюджета", ВидБюджета);
	
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();
	
	ТипБулево = Новый ОписаниеТипов("Булево");
	ТипСписок = Новый ОписаниеТипов("СписокЗначений");
	МассивРеквизитов = Новый Массив;
	
	СписокАналитикШапки.Очистить();
	
	Пока Выборка.Следующий() Цикл
		
		ИмяПоля = БюджетнаяОтчетностьСервер.ИмяПоляБюджетногоОтчета(Выборка.ВидАналитики);
		Реквизит = Новый РеквизитФормы(ИмяПоля, ТипСписок, , Выборка.Наименование);
		МассивРеквизитов.Добавить(Реквизит);
		
		Реквизит = Новый РеквизитФормы("ИспользоватьОтборПо" + ИмяПоля, ТипБулево, , Выборка.Наименование);
		МассивРеквизитов.Добавить(Реквизит);
		
		СписокАналитикШапки.Добавить(Выборка.ВидАналитики);
		
	КонецЦикла;
	
	ЭтаФорма.ИзменитьРеквизиты(МассивРеквизитов);
	
	Выборка.Сбросить();
	Пока Выборка.Следующий() Цикл
		
		ЭтаФорма[ИмяПоля].ТипЗначения = Выборка.ТипЗначения;
		
		ИмяПоля = БюджетнаяОтчетностьСервер.ИмяПоляБюджетногоОтчета(Выборка.ВидАналитики);
		Группа = Элементы.Добавить("Группа" + ИмяПоля, Тип("ГруппаФормы"), Элементы.ОтборДанных);
		Группа.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		Группа.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		Группа.Отображение = ОтображениеОбычнойГруппы.Нет;
		Группа.ОтображатьЗаголовок = Ложь;
		
		Элемент = Элементы.Добавить("ИспользоватьОтборПо" + ИмяПоля, Тип("ПолеФормы"), Группа);
		Элемент.Вид = ВидПоляФормы.ПолеФлажка;
		Элемент.ПутьКДанным = "ИспользоватьОтборПо" + ИмяПоля;
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Право;
		
		Элемент = Элементы.Добавить(ИмяПоля, Тип("ПолеФормы"), Группа);
		Элемент.Вид = ВидПоляФормы.ПолеВвода;
		Элемент.ПутьКДанным = ИмяПоля;
		Элемент.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		Элемент.УстановитьДействие("ПриИзменении", "СписокОтборовПриИзменении");
		
	КонецЦикла;
	
	Если Параметры.Свойство("ДанныеКУтверждению") Тогда
		ДанныеКУтверждению = Параметры.ДанныеКУтверждению;
	КонецЕсли;
	Если Параметры.Свойство("ДанныеВПодготовке") Тогда
		ДанныеВПодготовке = Параметры.ДанныеВПодготовке;
	КонецЕсли;
	
	ПоказыватьПанельНастройки = Истина;
	Если Параметры.Свойство("ПоказыватьПанельНастройки") Тогда
		ПоказыватьПанельНастройки = Параметры.ПоказыватьПанельНастройки;
	КонецЕсли;
	
	ВариантСумм = Перечисления.ВариантыВыводаСуммВБюджетныхОтчетах.ВВалютеУпрУчета;
	
	ДатаАктуальности = ТекущаяДатаСеанса();
	
	ПараметрыВыбора = Отчеты.БюджетныйОтчет.ПараметрыДоступностиОтборов(ВидБюджета);
	ДоступенВыборОрганизации = ПараметрыВыбора.ДоступенВыборОрганизации;
	ДоступенВыборПодразделения = ПараметрыВыбора.ДоступенВыборПодразделения;
	ДоступенВыборСценария = ПараметрыВыбора.ДоступенВыборСценария;
	
	НачалоПериода = ТекущаяДата();
	КонецПериода = ТекущаяДата();
	
	Справочники.ВидыБюджетов.ВыровнятьДатыПоПериодичностиБюджета(ВидБюджета, НачалоПериода, КонецПериода);
	ГраницаФактДанных = Справочники.ВидыБюджетов.ГраницаФактическихДанныхПоВидуБюджета(ВидБюджета, НачалоПериода);
	
	ОтредактироватьСписокВыбораВалюты();
	УправлениеФормой();
	
	Если Метаданные.ОбщиеФормы.Найти("ОтправкаТабличныхДокументовПоПочте") = Неопределено Тогда
		Элементы.ОтправитьПоЭлектроннойПочте.Видимость = Ложь;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	Если СформироватьОтчет Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
		ПодключитьОбработчикОжидания("СформироватьНепосредственно", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриПовторномОткрытии()
	
	СформироватьНепосредственно();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если Не ЗавершениеРаботы Тогда 
		ОтменитьВыполнениеЗадания();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗагрузкойДанныхИзНастроекНаСервере(Настройки)
	
	Если Параметры.НеИспользоватьСохраненныеНастройки Тогда
		Настройки.Очистить();
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпциюФормы("ФормироватьБюджетыПоОрганизациям") Тогда
		Настройки.Удалить("ИспользоватьОтборПоОрганизациям");
		Настройки.Удалить("Организации");
	КонецЕсли;
	
	Если Не ПолучитьФункциональнуюОпциюФормы("ФормироватьБюджетыПоПодразделениям") Тогда
		Настройки.Удалить("ИспользоватьОтборПоПодразделениям");
		Настройки.Удалить("Подразделения");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриСохраненииДанныхВНастройкахНаСервере(Настройки)
	
	Если Параметры.НеИспользоватьСохраненныеНастройки Тогда
		Настройки.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриЗагрузкеДанныхИзНастроекНаСервере(Настройки)
	
	УстановитьВидимостьПанелиНастроек(ЭтаФорма);
	ОтредактироватьСписокВыбораВалюты();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	НепроверяемыеРеквизиты = Новый Массив;
	
	Если Не ДоступенВыборСценария Тогда
		НепроверяемыеРеквизиты.Добавить("Сценарий");
	КонецЕсли;
	
	ОбщегоНазначения.УдалитьНепроверяемыеРеквизитыИзМассива(ПроверяемыеРеквизиты, НепроверяемыеРеквизиты);
	
	// Проверим правильность настройки структуры
	Если Не Справочники.ВидыБюджетов.ВидБюджетаЗаполненПравильно(ВидБюджета) Тогда
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокОтборовПриИзменении(Элемент)
	
	ЭтаФорма["ИспользоватьОтборПо" + Элемент.Имя] = ЭтаФорма[Элемент.Имя].Количество();
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыводитьСуммыПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДатаАктуальностиДанныхПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СУчетомДанныхКУтверждениюПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СУчетомДанныхВПодготовкеПриИзменении(Элемент)
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГраницаФактДанныхНажатие(Элемент)
	
	ПараметрыФормы = Новый Структура("ВидБюджета, НачалоПериода, ГраницаФактДанных", ВидБюджета, НачалоПериода, ГраницаФактДанных);
	ОписаниеОповещения = Новый ОписаниеОповещения("УстановитьГраницуФакта", ЭтаФорма);
	ОткрытьФорму("ОбщаяФорма.НастройкаГраницыФакта", ПараметрыФормы,,,,,
						ОписаниеОповещения,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НачалоПериодаПриИзменении(Элемент)
	
	КонецПериода = ?(НачалоПериода > КонецПериода, НачалоПериода, КонецПериода);
	ВыровнятьПериодыСервер();
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонецПериодаПриИзменении(Элемент)
	
	НачалоПериода = ?(НачалоПериода > КонецПериода, КонецПериода, НачалоПериода);
	ВыровнятьПериодыСервер();
	
	ОбновитьТекстЗаголовка(ЭтаФорма);
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаРасшифровки(Элемент, Расшифровка, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	
	Если ТипЗнч(Расшифровка) = Тип("Структура") Тогда
		Если Расшифровка.Свойство("ИндексСтрокиДанных") И
				Расшифровка.ИндексСтрокиДанных <> Неопределено Тогда
			
			ПараметрыОткрытия = ПараметрыОткрытияОтчетаРасшифровки(Расшифровка);
			БюджетнаяОтчетностьКлиент.ОткрытьФормуОтчета(ПараметрыОткрытия, ЭтаФорма);
			
		ИначеЕсли Расшифровка.Свойство("Значение") И 
				Расшифровка.Значение <> Неопределено Тогда
			
			ПоказатьЗначение(Новый ОписаниеОповещения("РезультатОбработкаРасшифровкиЗавершение", ЭтотОбъект), Расшифровка.Значение);
			
		Иначе
			
			ПоказатьПредупреждение(, НСтр("en='Нет данных для расшифровки';ru='Нет данных для расшифровки'"));
			
		КонецЕсли;
	Иначе
		ПоказатьПредупреждение(, НСтр("en='Нет данных для расшифровки';ru='Нет данных для расшифровки'"));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РезультатОбработкаРасшифровкиЗавершение(ДополнительныеПараметры) Экспорт
	Заглушка = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СценарийПриИзменении(Элемент)
	
	ОтредактироватьСписокВыбораВалюты();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыбратьПериод(Команда)
	
	ПроизвольныйПериод               = Новый СтандартныйПериод;
	ПроизвольныйПериод.Вариант       = ВариантСтандартногоПериода.ПроизвольныйПериод;
	ПроизвольныйПериод.ДатаНачала    = НачалоПериода;
	ПроизвольныйПериод.ДатаОкончания = КонецПериода;

	ДиалогВыбораПериода        = Новый ДиалогРедактированияСтандартногоПериода();
	ДиалогВыбораПериода.Период = ПроизвольныйПериод;
	
	ДиалогВыбораПериода.Показать(Новый ОписаниеОповещения("ВыбратьПериодЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьПериодЗавершение(РезультатВыбора, ДопПараметры) Экспорт
	
	Если РезультатВыбора = Неопределено Тогда
		Возврат;
	КонецЕсли;
	НачалоПериода = РезультатВыбора.ДатаНачала;
	КонецПериода = РезультатВыбора.ДатаОкончания;
	
	ВыровнятьПериодыСервер();
	
	ОбновитьТекстЗаголовка(ЭтаФорма); 
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СформироватьОтчет(Команда)
	
	СформироватьНепосредственно();
	
КонецПроцедуры

&НаКлиенте
Процедура ПанельНастроек(Команда)
	
	ПоказыватьПанельНастройки = Не ПоказыватьПанельНастройки;
	УстановитьВидимостьПанелиНастроек(ЭтаФорма);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПоЭлектроннойПочте(Команда)
	
	НаименованиеВидаОтчета = Строка(ВидБюджета);
	ОтображениеСостояния = Элементы.Результат.ОтображениеСостояния;
	Если ОтображениеСостояния.Видимость = Истина
		И ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.Неактуальность Тогда
		
		ТекстВопроса = НСтр("en='Report is not generated. Generate?';ru='Отчет не сформирован. Сформировать?'");
		Ответ = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("ОтправитьПоЭлектроннойПочтеЗавершение", ЭтотОбъект, Новый Структура("НаименованиеВидаОтчета", НаименованиеВидаОтчета)), ТекстВопроса, РежимДиалогаВопрос.ДаНет, 60, КодВозвратаДиалога.Да);
        Возврат;
	КонецЕсли;
	
	ОтправитьПоЭлектроннойПочтеФрагмент(НаименованиеВидаОтчета);
КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПоЭлектроннойПочтеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    НаименованиеВидаОтчета = ДополнительныеПараметры.НаименованиеВидаОтчета;
    
    
    Ответ = РезультатВопроса;
    Если Ответ <> КодВозвратаДиалога.Да Тогда
        Возврат;
    КонецЕсли;
    
    СформироватьНепосредственно();
    
    ОтправитьПоЭлектроннойПочтеФрагмент(НаименованиеВидаОтчета);

КонецПроцедуры

&НаКлиенте
Процедура ОтправитьПоЭлектроннойПочтеФрагмент(Знач НаименованиеВидаОтчета)
	
	Перем ПараметрыФормы, ТабличныеДокументы;
	
	ТабличныеДокументы = Новый СписокЗначений;
	ТабличныеДокументы.Добавить(ЭтаФорма.Результат, НаименованиеВидаОтчета);
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ТабличныеДокументы", ТабличныеДокументы);
	ПараметрыФормы.Вставить("Тема", НаименованиеВидаОтчета);
	ПараметрыФормы.Вставить("Заголовок", СтрШаблон(
		НСтр("en='Sending a report ""%1"" on email';ru='Отправка отчета ""%1"" по почте'"),
		НаименованиеВидаОтчета));
	
	//ОткрытьФорму("ОбщаяФорма.ОтправкаТабличныхДокументовПоПочте", ПараметрыФормы);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ВыровнятьПериодыСервер()
	
	Справочники.ВидыБюджетов.ВыровнятьДатыПоПериодичностиБюджета(ВидБюджета, НачалоПериода, КонецПериода);
	
КонецПроцедуры

&НаСервере
Функция ПараметрыОткрытияОтчетаРасшифровки(Расшифровка);

	ПараметрыОтчета = ПодготовитьПараметрыОтчета();
	Возврат БюджетнаяОтчетностьВызовСервера.ПараметрыОткрытияОтчетаРасшифровки(ПараметрыОтчета, Расшифровка, АдресДанныхЯчеек);
	
КонецФункции

&НаСервере
Процедура ОтредактироватьСписокВыбораВалюты()
	
	НуженВыборВВалюте = Отчеты.БюджетныйОтчет.ДоступенВыборОценкиВВалюте(ВидБюджета, ДоступенВыборСценария, Сценарий, ВалютаСценария);
	СписокВыбора = Элементы.ВыводитьСуммы.СписокВыбора;
	ВыводВВалюте = Перечисления.ВариантыВыводаСуммВБюджетныхОтчетах.ВВалютеСценария;
	
	Элемент = СписокВыбора.НайтиПоЗначению(ВыводВВалюте);
	Если Элемент <> Неопределено
		И Не НуженВыборВВалюте Тогда
		СписокВыбора.Удалить(Элемент);
		Если ВариантСумм = ВыводВВалюте
			ИЛИ Не ЗначениеЗаполнено(ВариантСумм) Тогда
			ВариантСумм = Перечисления.ВариантыВыводаСуммВБюджетныхОтчетах.ВВалютеУпрУчета;
		КонецЕсли;
	ИначеЕсли Элемент = Неопределено И НуженВыборВВалюте Тогда
		СписокВыбора.Вставить(0, ВыводВВалюте);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьНепосредственно()
	
	РезультатВыполнения = СформироватьОтчетСервер();
	Если Не РезультатВыполнения.ЗаданиеВыполнено Тогда
		ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура УстановитьВидимостьПанелиНастроек(Форма)
	
	Форма.Элементы.ГруппаПанельНастроек.Видимость = Форма.ПоказыватьПанельНастройки;
	Форма.Элементы.ПанельНастроек.Пометка = Форма.ПоказыватьПанельНастройки;
	
КонецПроцедуры

&НаСервере
Функция ПодготовитьПараметрыОтчета()

	ПараметрыОтчета = Новый Структура;
	ПараметрыОтчета.Вставить("ВидБюджета",    ВидБюджета);
	ПараметрыОтчета.Вставить("НачалоПериода", НачалоПериода);
	ПараметрыОтчета.Вставить("КонецПериода",  КонецПериода);
	ПараметрыОтчета.Вставить("ДатаАктуальности", КонецДня(ДатаАктуальности));
	ПараметрыОтчета.Вставить("ГраницаФактДанных", ГраницаФактДанных);
	ПараметрыОтчета.Вставить("Сценарий", Сценарий);
	Если ИспользоватьОтборПоОрганизация Тогда
		ПараметрыОтчета.Вставить("Организация", Организация);
	КонецЕсли;
	Если ИспользоватьОтборПоПодразделение Тогда
		ПараметрыОтчета.Вставить("Подразделение", Подразделение);
	КонецЕсли;
	
	СтатусыДанных = Новый СписокЗначений;
	СтатусыДанных.Добавить(Перечисления.СтатусыПланов.Утвержден);
	Если ПолучитьФункциональнуюОпцию("ИспользоватьУтверждениеБюджетов", 
		Новый Структура("МодельБюджетирования", ВидБюджета.Владелец)) Тогда
		Если ДанныеКУтверждению Тогда
			СтатусыДанных.Добавить(Перечисления.СтатусыПланов.НаУтверждении);
		КонецЕсли;
		Если ДанныеВПодготовке Тогда
			СтатусыДанных.Добавить(Перечисления.СтатусыПланов.ВПодготовке);
		КонецЕсли;
	Иначе
		СтатусыДанных.Добавить(Перечисления.СтатусыПланов.НаУтверждении);
		СтатусыДанных.Добавить(Перечисления.СтатусыПланов.ВПодготовке);
	КонецЕсли;
	ПараметрыОтчета.Вставить("Статус", СтатусыДанных);
	ПараметрыОтчета.Вставить("ВариантСумм", ВариантСумм);
	ПараметрыОтчета.Вставить("ВалютаСценария", ВалютаСценария);
	ПараметрыОтчета.Вставить("РежимФормирования", Перечисления.РежимыФормированияБюджетныхОтчетов.Отчет);
	
	ДополнительныеФильтрыПоАналитикам = Новый Структура;
	Для Каждого ВидАналитики из СписокАналитикШапки Цикл
		ИмяПоля = БюджетнаяОтчетностьСервер.ИмяПоляБюджетногоОтчета(ВидАналитики.Значение);
		ДополнительныеФильтрыПоАналитикам.Вставить(ИмяПоля);
		Если ЭтаФорма["ИспользоватьОтборПо" + ИмяПоля] Тогда
			ПараметрыОтчета.Вставить(ИмяПоля, ЭтаФорма[ИмяПоля]);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыОтчета.Вставить("ДополнительныеФильтрыПоАналитикам", ДополнительныеФильтрыПоАналитикам);
	
	Возврат ПараметрыОтчета;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Процедура ОбновитьТекстЗаголовка(Форма)

	ПериодСтрокой = БухгалтерскиеОтчетыКлиентСервер.ПолучитьПредставлениеПериода(Форма.НачалоПериода, Форма.КонецПериода);
	
	Если ЗначениеЗаполнено(Форма.ВидБюджета) Тогда
		ЗаголовокОтчета = Строка(Форма.ВидБюджета);
	Иначе
		ЗаголовокОтчета = НСтр("en='Отчет по виду бюджета';ru='Отчет по виду бюджета'");
	КонецЕсли;
	
	Форма.Заголовок = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку("%1 %2", ЗаголовокОтчета, ПериодСтрокой);
	
КонецПроцедуры

&НаСервере
Функция СформироватьОтчетСервер()
	
	Если Не ПроверитьЗаполнение() Тогда
		
		ОтображениеСостояния = Элементы.Результат.ОтображениеСостояния;
		Результат.Очистить();
		ОтображениеСостояния.Видимость  = Истина;
		ОтображениеСостояния.ДополнительныйРежимОтображения = ДополнительныйРежимОтображения.НеИспользовать;
		ОтображениеСостояния.Картинка   = Новый Картинка;
		ОтображениеСостояния.Текст  = НСтр("en='Ошибки в виде бюджета';ru='Ошибки в виде бюджета'");
		
		Возврат Новый Структура("ЗаданиеВыполнено", Истина);
	КонецЕсли;
	
	ИБФайловая = ОбщегоНазначения.ИнформационнаяБазаФайловая();
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
	ИдентификаторЗадания = Неопределено;
	
	ПараметрыОтчета = ПодготовитьПараметрыОтчета();
	
	Если ИБФайловая Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		БюджетнаяОтчетностьСервер.ПоместитьДанныеДляБюджетногоОтчетаВХранилище(ПараметрыОтчета, АдресХранилища);
		РезультатВыполнения = Новый Структура("ЗаданиеВыполнено", Истина);
	Иначе
		РезультатВыполнения = ДлительныеОперации.ЗапуститьВыполнениеВФоне(
			УникальныйИдентификатор,
			"БюджетнаяОтчетностьСервер.ПоместитьДанныеДляБюджетногоОтчетаВХранилище",
			ПараметрыОтчета,
			БухгалтерскиеОтчетыКлиентСервер.ПолучитьНаименованиеЗаданияВыполненияОтчета(ЭтаФорма));
			
		АдресХранилища       = РезультатВыполнения.АдресХранилища;
		ИдентификаторЗадания = РезультатВыполнения.ИдентификаторЗадания;
	КонецЕсли;
	
	Если РезультатВыполнения.ЗаданиеВыполнено Тогда
		ЗагрузитьПодготовленныеДанные();
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "ФормированиеОтчета");
	КонецЕсли;
	
	Если СкрыватьНастройкиПриФормированииОтчета Тогда
		ПоказыватьПанельНастройки = Ложь;
		УстановитьВидимостьПанелиНастроек(ЭтаФорма);
	КонецЕсли;
	
	Возврат РезультатВыполнения;
	
КонецФункции

&НаСервере
Процедура УправлениеФормой()
	
	ПараметрыОпций = Новый Структура("МодельБюджетирования", МодельБюджетирования);
	УстановитьПараметрыФункциональныхОпцийФормы(ПараметрыОпций);
	
	Элементы.Сценарий.Видимость = ДоступенВыборСценария;
	Элементы.ГруппаОтборПоОрганизациям.Видимость = ДоступенВыборОрганизации;
	Элементы.ГруппаОтборПоПодразделениям.Видимость = ДоступенВыборПодразделения;
	
	УстановитьВидимостьПанелиНастроек(ЭтаФорма);
	
	Справочники.ВидыБюджетов.НастроитьГруппуЭлементовПериода(ВидБюджета, Элементы, ГраницаФактДанных);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПодготовленныеДанные()

	РезультатВыполнения = ПолучитьИзВременногоХранилища(АдресХранилища);
	Результат           = РезультатВыполнения.Результат;
	ДанныеЯчеек         = РезультатВыполнения.ДанныеЯчеек;
	
	АдресДанныхЯчеек = ПоместитьВоВременноеХранилище(ДанныеЯчеек, УникальныйИдентификатор);
	
	ИдентификаторЗадания = Неопределено;
	
	ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ЗаданиеВыполнено(ИдентификаторЗадания) Тогда
			ЗагрузитьПодготовленныеДанные();
		Иначе
			ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжидания);
			ПодключитьОбработчикОжидания(
				"Подключаемый_ПроверитьВыполнениеЗадания",
				ПараметрыОбработчикаОжидания.ТекущийИнтервал,
				Истина);
		КонецЕсли;
	Исключение
		ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеИспользовать");
		ВызватьИсключение ПодробноеПредставлениеОшибки(ИнформацияОбОшибке());
	КонецПопытки;

КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаданиеВыполнено(ИдентификаторЗадания)
	
	Возврат ДлительныеОперации.ЗаданиеВыполнено(ИдентификаторЗадания);
	
КонецФункции

&НаСервере
Процедура ОтменитьВыполнениеЗадания()
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗадания);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьГраницуФакта(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ГраницаФактДанных = Результат;
		Если Не ЗначениеЗаполнено(ИдентификаторЗадания) Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьСостояниеПоляТабличногоДокумента(Элементы.Результат, "НеАктуальность");
		КонецЕсли;
		УправлениеФормой();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПользовательскиеНастройкиМодифицированы = Ложь;
	
	УстановитьОбязательныеНастройки(ПользовательскиеНастройкиМодифицированы);
	
	ВнешниеНаборы = НаборыДанных();
	
	БюджетированиеСервер.ДополнитьСхемуКомпоновкиДанныхАналитикойПоВиду(СхемаКомпоновкиДанных, "ПоказательБюджетов");
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(
		СхемаКомпоновкиДанных, КомпоновщикНастроек.ПолучитьНастройки(), ДанныеРасшифровки);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборы, ДанныеРасшифровки, Истина);
	
	ПроцессорВыводаВТабличныйДокумент = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВыводаВТабличныйДокумент.УстановитьДокумент(ДокументРезультат);
	ПроцессорВыводаВТабличныйДокумент.Вывести(ПроцессорКомпоновкиДанных);
	
	// Сообщим форме отчета, что настройки модифицированы
	Если ПользовательскиеНастройкиМодифицированы Тогда
		КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПользовательскиеНастройкиМодифицированы", Истина);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработкаПроверкиЗаполнения(Отказ, ПроверяемыеРеквизиты)
	
	НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки(); 
	
	СценарииОтчета = Справочники.Сценарии.СценарииСУчетомОтбора(НастройкиОтчета);
	
	НеобходимПересчетСуммыВВалютуОтчета = Ложь;
	ВалютаОтчета = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(НастройкиОтчета, "Валюта").Значение;
	Период = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(НастройкиОтчета, "Период").Значение;
	Если ВалютаОтчета <> Константы.ВалютаРегламентированногоУчета.Получить() 
		И ВалютаОтчета <> Константы.ВалютаРегламентированногоУчета.Получить() Тогда
		НеобходимПересчетСуммыВВалютуОтчета = Истина;
	КонецЕсли;
	
	Если НеобходимПересчетСуммыВВалютуОтчета Тогда
		
		СценарииДляПроверки = СценарииОтчета.НайтиСтроки(Новый Структура("ТребоватьУказанияКурсовДляКаждогоПериода", Истина));
		Сценарии = Новый Массив;
		Для каждого СтрокаСценарий Из СценарииДляПроверки Цикл
			Сценарии.Добавить(СтрокаСценарий.Сценарий); 
		КонецЦикла;
		
		Валюты = Новый Массив;
		Валюты.Добавить(ВалютаОтчета);
		
		НезаполненныеКурсыСценариев = Справочники.Сценарии.ПроверитьЗаполнениеКурсовСценариев(Сценарии, Валюты, Период.ДатаНачала, Период.ДатаОкончания);
		Если НезаполненныеКурсыСценариев.Количество() > 0 Тогда
			ШаблонСообщения = НСтр("en='Необходимо указать прогнозный курс валюты %1 сценария %2 на %3';ru='Необходимо указать прогнозный курс валюты %1 сценария %2 на %3'");
			Для каждого Строка Из НезаполненныеКурсыСценариев Цикл
				ТекстСообщения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					ШаблонСообщения, 
					Строка.Валюта, 
					Строка.Сценарий, 
					Формат(Строка.Период, "ДЛФ=Д"));
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,,, Отказ);
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ПолучениеДанныхОтчета

Функция НаборыДанных()
	
	НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
	ПараметрыПолученияФакта = ПараметрыПолученияФактаПоНастройкамОтчета(НастройкиОтчета);
	
	Период = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(НастройкиОтчета, "Период").Значение;
	ПериодОстатковНаНачало = Период.ДатаНачала;
	
	ЭлементОтбораПоПерирду = Неопределено;
	Для каждого Периодичность Из Перечисления.Периодичность.УпорядоченныеПериодичности() Цикл
		Период = "Период" + Периодичность;
		ЭлементОтбораПоПериоду = ФинансоваяОтчетностьСервер.НайтиЭлементОтбора(НастройкиОтчета.Отбор, Период);
		Если ЭлементОтбораПоПериоду <> Неопределено Тогда
			ЭлементОтбораПоПериоду.Использование = Ложь; // Отключим, чтобы не мешал получению оборотов
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ОборотыПлан = ОборотыПлан(НастройкиОтчета);
	ОборотыФакт = ОборотыФакт(НастройкиОтчета, ПараметрыПолученияФакта);
	ОстаткиНаНачало = ОстаткиНаНачало(НастройкиОтчета, ПараметрыПолученияФакта);
	
	Если ЭлементОтбораПоПериоду <> Неопределено Тогда
		
		Если ЭлементОтбораПоПериоду.ВидСравнения <> ВидСравненияКомпоновкиДанных.Равно
			И ЭлементОтбораПоПериоду.ВидСравнения <> ВидСравненияКомпоновкиДанных.ВСписке Тогда
			ВызватьИсключение НСтр("en='Не допускается строить отчет c видом сравнения в отборе по периоду отличном от ""Равно"" или ""В списке""';ru='Не допускается строить отчет c видом сравнения в отборе по периоду отличном от ""Равно"" или ""В списке""'");
		КонецЕсли;
		
		Если ЭлементОтбораПоПериоду.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
			ПериодОстатковНаНачало = ЭлементОтбораПоПериоду.ПравоеЗначение[0].Значение;
		Иначе
			ПериодОстатковНаНачало = ЭлементОтбораПоПериоду.ПравоеЗначение;
		КонецЕсли;
		
		// Досчитаем остаки на период отбора от остатков на начала периода оборотами
		СхемаРасчетаОстатков = Отчеты.ОборотноСальдоваяВедомостьБюджетирования.ПолучитьМакет("РасчетНачальныхОстатков");
		
		НастройкиРасчетаОстатков = СхемаРасчетаОстатков.НастройкиПоУмолчанию;
		КомпоновкаДанныхКлиентСервер.ДобавитьОтбор(
			НастройкиРасчетаОстатков, 
			ЭлементОтбораПоПериоду.ЛевоеЗначение,
			ПериодОстатковНаНачало,
			ВидСравненияКомпоновкиДанных.Меньше);
		
		ВнешниеНаборы = Новый Структура;
		ВнешниеНаборы.Вставить("ОборотыПлан", ОборотыПлан);
		ВнешниеНаборы.Вставить("ОборотыФакт", ОборотыФакт);
		ВнешниеНаборы.Вставить("ОстаткиНаНачало", ОстаткиНаНачало);
		
		ОстаткиНаНачало = ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКД(СхемаРасчетаОстатков, НастройкиРасчетаОстатков, ВнешниеНаборы);
		
	КонецЕсли;
	
	КолонкиПериода = "";
	Для каждого Периодичность Из Перечисления.Периодичность.УпорядоченныеПериодичности() Цикл
		Если Не ЗначениеЗаполнено(Периодичность) Тогда
			Продолжить;
		КонецЕсли;
		КолонкаПериод = "Период" + Периодичность;
		ОстаткиНаНачало.Колонки.Добавить(КолонкаПериод);
		КолонкиПериода = КолонкиПериода + ?(ПустаяСтрока(КолонкиПериода), "", ",") + КолонкаПериод;
	КонецЦикла;
	ОстаткиНаНачало.ЗаполнитьЗначения(ПериодОстатковНаНачало, КолонкиПериода);
	
	НаборыДанных = Новый Структура;
	НаборыДанных.Вставить("ОборотыПлан", ОборотыПлан);
	НаборыДанных.Вставить("ОборотыФакт", ОборотыФакт);
	НаборыДанных.Вставить("ОстаткиНаНачало", ОстаткиНаНачало);
	
	Возврат НаборыДанных;
	
КонецФункции

Функция ОборотыПлан(НастройкиОтчета) 
	
	СхемаКомпоновкиПлана = Отчеты.ОборотноСальдоваяВедомостьБюджетирования.ПолучитьМакет("ОборотыПлан");
	Настройки = СхемаКомпоновкиПлана.НастройкиПоУмолчанию;
	
	БюджетированиеСервер.ДополнитьСхемуКомпоновкиДанныхАналитикойПоВиду(СхемаКомпоновкиПлана, "ПоказательБюджетов");
	
	КомпоновкаДанныхКлиентСервер.ЗаполнитьЭлементы(Настройки.ПараметрыДанных, НастройкиОтчета.ПараметрыДанных);
	КомпоновкаДанныхКлиентСервер.СкопироватьОтборКомпоновкиДанных(СхемаКомпоновкиПлана, Настройки, НастройкиОтчета);
	
	Группировка = Настройки.Структура[0];
	
	Если КомпоновкаДанныхКлиентСервер.ПолеИспользуется(НастройкиОтчета, "Регистратор") Тогда
		ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(Группировка, "Регистратор");
	КонецЕсли;
	
	Для каждого Периодичность Из Перечисления.Периодичность.УпорядоченныеПериодичности() Цикл
		Если Не ЗначениеЗаполнено(Периодичность) Тогда
			Продолжить;
		КонецЕсли;
		ПолеПериод = "Период" + Строка(Периодичность);
		ФинансоваяОтчетностьСервер.НовоеПолеГруппировки(Группировка, ПолеПериод);
	КонецЦикла;
	
	ВалютаОтчета = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(НастройкиОтчета, "Валюта").Значение;
	Период = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(НастройкиОтчета, "Период").Значение; 
	
	Если уатОбщегоНазначенияТиповые.уатЕстьКонстанта("ВалютаУправленческогоУчета") Тогда
		ВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
	Иначе
		ВалютаУправленческогоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;
	
	Если ВалютаОтчета = Константы.ВалютаРегламентированногоУчета.Получить() Тогда
		ВыражениеСуммы = "СуммаРегл";
	ИначеЕсли ВалютаОтчета = ВалютаУправленческогоУчета Тогда
		ВыражениеСуммы = "СуммаУпр";
	Иначе
		ВыражениеСуммы = "ВЫБОР КОГДА Валюта = &Валюта ТОГДА СуммаВВалюте ИНАЧЕ СуммаРегл / ЕСТЬNULL(Курс,1) КОНЕЦ";
	КонецЕсли;
	
	Ресурсы = Новый Структура;
	Ресурсы.Вставить("Сумма", ВыражениеСуммы);
	Ресурсы.Вставить("Количество", "Количество");
	ВыражениеПриход = "ВЫБОР КОГДА Расход ТОГДА 0 ИНАЧЕ Коэффициент * %Поле КОНЕЦ";
	ВыражениеРасход = "ВЫБОР КОГДА Расход ТОГДА Коэффициент * %Поле ИНАЧЕ 0 КОНЕЦ";
	Для каждого Ресурс Из Ресурсы Цикл
		РесурсПриход = Ресурс.Ключ + "ПриходПлан";
		ФинансоваяОтчетностьСервер.НовыйВычисляемыйРесурс(
			СхемаКомпоновкиПлана, 
			РесурсПриход, 
			СтрЗаменить(ВыражениеПриход, "%Поле", Ресурс.Значение), 
			"Сумма");
		ФинансоваяОтчетностьСервер.НовоеПолеВыбора(Настройки, РесурсПриход);
		
		РесурсРасход = Ресурс.Ключ + "РасходПлан";
		ФинансоваяОтчетностьСервер.НовыйВычисляемыйРесурс(
			СхемаКомпоновкиПлана, 
			РесурсРасход, 
			СтрЗаменить(ВыражениеРасход, "%Поле", Ресурс.Значение),
			"Сумма");
		ФинансоваяОтчетностьСервер.НовоеПолеВыбора(Настройки, РесурсРасход);
	КонецЦикла;
	
	ОборотыПлан = ФинансоваяОтчетностьСервер.ВыгрузитьРезультатСКД(СхемаКомпоновкиПлана, Настройки);
	
	Возврат ОборотыПлан;
	
КонецФункции

Функция ОборотыФакт(НастройкиОтчета, ПараметрыПолученияФакта)
	
	ФактПоСтатьямБюджетов = БюджетированиеСервер.ФактПоСтатьямВлияющимНаПоказателиБюджетов(
		НастройкиОтчета, ПараметрыПолученияФакта, Истина);
	
	ФактПоСтатьямБюджетов.Колонки.Добавить("Сценарий", Новый ОписаниеТипов("СправочникСсылка.Сценарии"));
	ФактПоСтатьямБюджетов.ЗаполнитьЗначения(Справочники.Сценарии.ФактическиеДанные, "Сценарий");
	
	Возврат ФактПоСтатьямБюджетов;
	
КонецФункции

Функция ОстаткиНаНачало(НастройкиОтчета, ПараметрыПолученияФакта)
	
	ФактПоПоказателямБюджетов = БюджетированиеСервер.ФактПоПоказателямБюджетов(НастройкиОтчета, ПараметрыПолученияФакта);
	ФактПоПоказателямБюджетов.Колонки.Сумма.Имя = "СуммаНачальныйОстатокСценария";
	ФактПоПоказателямБюджетов.Колонки.Количество.Имя = "КоличествоНачальныйОстатокСценария";
	
	ФактПоПоказателямБюджетов.Колонки.Добавить("СуммаНачальныйОстатокФакт");
	ФактПоПоказателямБюджетов.ЗагрузитьКолонку(
		ФактПоПоказателямБюджетов.ВыгрузитьКолонку("СуммаНачальныйОстатокСценария"),
		"СуммаНачальныйОстатокФакт");
	
	ФактПоПоказателямБюджетов.Колонки.Добавить("КоличествоНачальныйОстатокФакт");
	ФактПоПоказателямБюджетов.ЗагрузитьКолонку(
		ФактПоПоказателямБюджетов.ВыгрузитьКолонку("КоличествоНачальныйОстатокСценария"),
		"КоличествоНачальныйОстатокФакт");
	
	Возврат ФактПоПоказателямБюджетов;
	
КонецФункции

#КонецОбласти

#Область Прочее

Функция ПараметрыПолученияФактаПоНастройкамОтчета(НастройкиОтчета)
	
	Параметры = БюджетированиеСервер.ПараметрыПолученияФакта();
	
	Параметры.ВалютаОтчета = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(НастройкиОтчета, "Валюта").Значение;
	Параметры.Период = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(НастройкиОтчета, "Период").Значение; 
	
	Параметры.ОстаткиТолькоНаНачалоПериода = Истина;
	Параметры.ПоОрганизациям = Истина;
	Параметры.ПоПодразделениям = Истина;
	
	Если КомпоновкаДанныхКлиентСервер.ПолеИспользуется(НастройкиОтчета, "Регистратор") Тогда
		Параметры.РазворачиватьПоРегистратору = Истина;
	КонецЕсли;
	
	Для каждого Периодичность Из Перечисления.Периодичность.УпорядоченныеПериодичности() Цикл
		Если КомпоновкаДанныхКлиентСервер.ПолеИспользуется(НастройкиОтчета, "Период" + Строка(Периодичность)) Тогда
			Параметры.Периодичность = Периодичность;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Параметры; 
	
КонецФункции

Процедура УстановитьОбязательныеНастройки(ПользовательскиеНастройкиМодифицированы)
	
	ПараметрВалюта = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "Валюта");
	Если ПараметрВалюта <> Неопределено И Не ЗначениеЗаполнено(ПараметрВалюта.Значение) Тогда
		Если уатОбщегоНазначенияТиповые.уатЕстьКонстанта("ВалютаУправленческогоУчета") Тогда
			ВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
		Иначе
			ВалютаУправленческогоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
		КонецЕсли;
		
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(
			КомпоновщикНастроек, "Валюта", ВалютаУправленческогоУчета);
		ПользовательскиеНастройкиМодифицированы = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли
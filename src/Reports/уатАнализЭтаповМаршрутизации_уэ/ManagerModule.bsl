#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

	
#Область ПрограммныйИнтерфейс

// Задает настройки размещения вариантов отчетов в панели отчетов.
// См. ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов().
//
// Параметры:
//   Настройки - Коллекция - Используется для описания настроек отчетов и вариантов
//       см. описание к ВариантыОтчетов.ДеревоНастроекВариантовОтчетовКонфигурации().
//   НастройкиОтчета - СтрокаДереваЗначений - Настройки размещения всех вариантов отчета.
//       См. ""Реквизиты для изменения"" функции ВариантыОтчетов.ДеревоНастроекВариантовОтчетовКонфигурации().
//
Процедура НастроитьВариантыОтчета(Настройки, НастройкиОтчета) Экспорт
	
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "Основной");
	НастройкиВарианта.Описание = НСтр("en='Анализ этапов маршрутизации (Основной).';ru='Анализ этапов маршрутизации (Основной).'");
	
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "Детальный");
	НастройкиВарианта.ВидимостьПоУмолчанию = Ложь;
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныйПрограммныйИнтерфейс

// Функция - Выход за окна
//
// Параметры:
//  Ссылка					 - 	 - 
//  ДопустимоеОтклонениеОкна - 	 - 
//  ЭтоЭтап					 - 	 - 
//  ПолучитьМинуты			 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция ВыходЗаОкна(Ссылка, ДопустимоеОтклонениеОкна=0, ЭтоЭтап, ПолучитьМинуты = Ложь) Экспорт
	
	Если НЕ ЭтоЭтап Тогда
		Возврат 0;
	КонецЕсли;
	
	ОтклонениеПогрузка  = 0;
	ОтклонениеРазгрузка = 0;
	Для Каждого ТекСтрока Из Ссылка.Заказы Цикл 
		Если Не ЗначениеЗаполнено(ТекСтрока.ЗаказГрузоотправителя) Тогда 
			Продолжить;
		КонецЕсли;
		
		Если ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка Тогда 
			ОкноС  = '00010101' + (ТекСтрока.ЗаказГрузоотправителя.ОтправлениеС - НачалоДня(ТекСтрока.ЗаказГрузоотправителя.ОтправлениеС));
			ОкноПо = '00010101' + (ТекСтрока.ЗаказГрузоотправителя.ОтправлениеПо - НачалоДня(ТекСтрока.ЗаказГрузоотправителя.ОтправлениеПо));
		Иначе 
			ОкноС  = '00010101' + (ТекСтрока.ЗаказГрузоотправителя.ДоставкаС - НачалоДня(ТекСтрока.ЗаказГрузоотправителя.ДоставкаС));
			ОкноПо = '00010101' + (ТекСтрока.ЗаказГрузоотправителя.ДоставкаПо - НачалоДня(ТекСтрока.ЗаказГрузоотправителя.ДоставкаПо));
		КонецЕсли;
		
		ВремяВТочке = '00010101' + (ТекСтрока.ПрибытиеПлан - НачалоДня(ТекСтрока.ПрибытиеПлан));
		
		Если ВремяВТочке < ОкноС Тогда 
			Отклонение = ОкноС - ВремяВТочке;
		ИначеЕсли ВремяВТочке > ОкноПо Тогда 
			Отклонение = ВремяВТочке - ОкноПо;
		Иначе 
			Отклонение = 0;
		КонецЕсли;
		
		Если ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка 
			ИЛИ ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяПогрузка Тогда
			ОтклонениеПогрузка = Макс(ОтклонениеПогрузка, Отклонение);
		ИначеЕсли ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка 
			ИЛИ ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяРазгрузка Тогда
			ОтклонениеРазгрузка = Макс(ОтклонениеРазгрузка, Отклонение);
		КонецЕсли;
		
		Если Отклонение > ДопустимоеОтклонениеОкна * 60 Тогда
			Если НЕ ПолучитьМинуты Тогда
				Возврат 1;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ПолучитьМинуты Тогда
		Возврат (ОтклонениеПогрузка + ОтклонениеРазгрузка) / 60;
	Иначе
		Возврат 0;
	КонецЕсли;
	
КонецФункции

// Функция - Получить грузовые параметры ТСПо МЛ
//
// Параметры:
//  ТС					 - 	 - 
//  Прицеп1				 - 	 - 
//  Прицеп2				 - 	 - 
//  ЭтоЭтап				 - 	 - 
//  ФлагГрузоПодъемность - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция ПолучитьГрузовыеПараметрыТСПоМЛ(ТС, Прицеп1, Прицеп2, ЭтоЭтап, ФлагГрузоПодъемность = Истина) Экспорт
	Если НЕ ЭтоЭтап Тогда
		Возврат 0;
	КонецЕсли;
	
	ГрузовыеПараметрыТС = уатОбщегоНазначения.уатПолучитьГрузоподъемностьИОбъемТС(ТС);
	ГрузоПодъемность    = ГрузовыеПараметрыТС.Грузоподъемность;
	ОбъемКузова         = ГрузовыеПараметрыТС.ОбъемКузова;
	
	ГрузовыеПараметрыПрицеп1 = уатОбщегоНазначения.уатПолучитьГрузоподъемностьИОбъемТС(Прицеп1);
	ГрузоПодъемность         = ГрузоПодъемность + ГрузовыеПараметрыПрицеп1.Грузоподъемность;
	ОбъемКузова              = ОбъемКузова + ГрузовыеПараметрыПрицеп1.ОбъемКузова;
	
	Если Не Прицеп1 = Прицеп2 Тогда 
		ГрузовыеПараметрыПрицеп2 = уатОбщегоНазначения.уатПолучитьГрузоподъемностьИОбъемТС(Прицеп2);
		ГрузоПодъемность         = ГрузоПодъемность + ГрузовыеПараметрыПрицеп2.Грузоподъемность;
		ОбъемКузова              = ОбъемКузова + ГрузовыеПараметрыПрицеп2.ОбъемКузова;
	КонецЕсли;
	
	Если ФлагГрузоПодъемность Тогда
		Возврат ГрузоПодъемность;
	Иначе
		Возврат ОбъемКузова;
	КонецЕсли;

КонецФункции

// Функция - Получить время
//
// Параметры:
//  Время		 - 	 - 
//  ВидВремени	 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция ПолучитьВремя(Время, ВидВремени = "0") Экспорт
	
	Если ВидВремени = "0" Тогда
		мМинуты	 = (Окр(Время - Цел(Время), 2));
		мЧасы	 = Цел(Время);
		Если мМинуты = 0 И мЧасы = 0 Тогда
			Возврат 0;
		Иначе
			мДата   = мЧасы + (мМинуты*100)/60;
			Возврат Окр(мДата, 2);
		КонецЕсли;
	Иначе
		мМинуты = Окр(Окр(Время - Цел(Время), 2)*60);
		мЧасы   = Цел(Время);
		Если мМинуты = 0 И мЧасы = 0 Тогда
			Возврат 0;
		Иначе
			мДата   = мЧасы + (мМинуты/100);
			Возврат Окр(мДата, 2);
		КонецЕсли;
	КонецЕсли;

КонецФункции

#КонецОбласти


#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	уатЗащищенныеФункцииСервер.уатОтчетОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти


#КонецЕсли

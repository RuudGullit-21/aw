
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ДокументРезультат.Очистить();
	
	ПользовательскиеНастройки	 = ЭтотОбъект.КомпоновщикНастроек.ПользовательскиеНастройки.Элементы;
	ОсновнойЭтап				 = Неопределено;
	Этап						 = Неопределено;
	Группа						 = Неопределено;
	Для Каждого ТекСтрока Из ПользовательскиеНастройки Цикл
		Если Строка(ТекСтрока.Параметр) = "ОсновнойЭтап" Тогда
			ОсновнойЭтап				 = ТекСтрока.Значение;
			ОсновнойЭтапИспользование	 = ТекСтрока.Использование;
		ИначеЕсли Строка(ТекСтрока.Параметр) = "Этап" Тогда
			Этап				 = ТекСтрока.Значение;
			ЭтапИспользование	 = ТекСтрока.Использование;
		ИначеЕсли Строка(ТекСтрока.Параметр) = "Группа" Тогда
			Группа				 = ТекСтрока.Значение;
			ГруппаИспользование	 = ТекСтрока.Использование;
		КонецЕсли;
	КонецЦикла;
	
	ДопустимоеОтклонениеОкна	 = ОпределитьДопустимоеОтклонениеОтВремени();
	ОсновнойЭтапМаршрутизации	 = ?(ЗначениеЗаполнено(ОсновнойЭтап) И ОсновнойЭтапИспользование, ОсновнойЭтап, Неопределено);
	ОсновнойЭтапВключен			 = ?(ЗначениеЗаполнено(ОсновнойЭтап) И ОсновнойЭтапИспользование, Истина, Ложь);
	ЭтапМаршрутизации			 = ?(ЗначениеЗаполнено(Этап) И ЭтапИспользование, Этап, Неопределено);
	ЭтапВключен					 = ?(ЗначениеЗаполнено(Этап) И ЭтапИспользование, Истина, Ложь);
	ГруппаЭтапМаршрутизации		 = ?(ЗначениеЗаполнено(Группа) И ГруппаИспользование, Группа, Неопределено);
	ГруппаЭтапВключен			 = ?(ЗначениеЗаполнено(Группа) И ГруппаИспользование, Истина, Ложь);
	
	Для Каждого ТекСтрока Из КомпоновщикНастроек.Настройки.Структура Цикл
		Если ТекСтрока.Имя = "Группы" Тогда
			Для Каждого ТекЭлемент Из ТекСтрока.ПоляГруппировки.Элементы Цикл
				Если Строка(ТекЭлемент.Поле) = "Ссылка" Тогда
					ТекЭлемент.ТипГруппировки = ?(ЗначениеЗаполнено(Этап) И ЭтапИспользование, ТипГруппировкиКомпоновкиДанных.Элементы, ТипГруппировкиКомпоновкиДанных.Иерархия);
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыДанных = ЭтотОбъект.КомпоновщикНастроек.Настройки.ПараметрыДанных;
	ПараметрыДанных.УстановитьЗначениеПараметра("ОсновнойЭтапВключен", ОсновнойЭтапВключен);
	
	Если ЗначениеЗаполнено(ОсновнойЭтап) И ОсновнойЭтапИспользование Тогда
		ХарактеристикиОсновногоЭтапа = ПолучитьХарактеристикиОсновногоЭтапа(ОсновнойЭтап, ДопустимоеОтклонениеОкна);
		ПараметрыДанных.УстановитьЗначениеПараметра("ДоходыОсновнойЭтап",ХарактеристикиОсновногоЭтапа.ДоходыОсновнойЭтап);
		ПараметрыДанных.УстановитьЗначениеПараметра("РасходыОсновнойЭтап",ХарактеристикиОсновногоЭтапа.РасходыОсновнойЭтап);
		ПараметрыДанных.УстановитьЗначениеПараметра("ВремяВПутиОсновнойЭтап",ХарактеристикиОсновногоЭтапа.ВремяВПутиОсновнойЭтап);
		ПараметрыДанных.УстановитьЗначениеПараметра("ВесОсновнойЭтап",ХарактеристикиОсновногоЭтапа.ВесОсновнойЭтап);
		ПараметрыДанных.УстановитьЗначениеПараметра("ОбъемОсновнойЭтап",ХарактеристикиОсновногоЭтапа.ОбъемОсновнойЭтап);
		ПараметрыДанных.УстановитьЗначениеПараметра("КоличествоМестОсновнойЭтап",ХарактеристикиОсновногоЭтапа.КоличествоМестОсновнойЭтап);
		ПараметрыДанных.УстановитьЗначениеПараметра("НарушениеОконВремяОсновнойЭтап",ХарактеристикиОсновногоЭтапа.НарушениеОконВремяОсновнойЭтап);
		ПараметрыДанных.УстановитьЗначениеПараметра("ЗаказГрузоотправителяОсновнойЭтап",ХарактеристикиОсновногоЭтапа.ЗаказГрузоотправителяОсновнойЭтап);
		ПараметрыДанных.УстановитьЗначениеПараметра("ВремяОсновнойЭтап",ХарактеристикиОсновногоЭтапа.ВремяОсновнойЭтап);
		ПараметрыДанных.УстановитьЗначениеПараметра("СтоянкаОсновнойЭтап",ХарактеристикиОсновногоЭтапа.СтоянкаОсновнойЭтап);
		ПараметрыДанных.УстановитьЗначениеПараметра("ОжиданиеОсновнойЭтап",ХарактеристикиОсновногоЭтапа.ОжиданиеОсновнойЭтап);
		ПараметрыДанных.УстановитьЗначениеПараметра("ТСОсновнойЭтап",ХарактеристикиОсновногоЭтапа.ТСОсновнойЭтап);
		ПараметрыДанных.УстановитьЗначениеПараметра("РейсыОсновнойЭтап",ХарактеристикиОсновногоЭтапа.РейсыОсновнойЭтап);
		ПараметрыДанных.УстановитьЗначениеПараметра("ПрибыльОсновнойЭтап",ХарактеристикиОсновногоЭтапа.ПрибыльОсновнойЭтап);
		ПараметрыДанных.УстановитьЗначениеПараметра("ПробегОсновнойЭтап",ХарактеристикиОсновногоЭтапа.ПробегОсновнойЭтап);
		ПараметрыДанных.УстановитьЗначениеПараметра("НарушениеОконОсновнойЭтап",ХарактеристикиОсновногоЭтапа.НарушениеОконОсновнойЭтап);
		ПараметрыДанных.УстановитьЗначениеПараметра("СтоимостьОсновнойЭтап",ХарактеристикиОсновногоЭтапа.СтоимостьОсновнойЭтап);
	КонецЕсли;
	
	Схема = ЭтотОбъект.СхемаКомпоновкиДанных;
	ВнешниеНаборыДанных	 = Новый Структура();
	ТабДанных			 = ПолучитьДанныеЭтаповМаршрутизации(ЭтапВключен, ЭтапМаршрутизации, ГруппаЭтапВключен, ГруппаЭтапМаршрутизации, ДопустимоеОтклонениеОкна);
	ВнешниеНаборыДанных.Вставить("ТабДанных", ТабДанных);
	
	Настройки			 = КомпоновщикНастроек.ПолучитьНастройки();
	ДанныеРасшифровки	 = Новый ДанныеРасшифровкиКомпоновкиДанных;
	
	// Создаем компоновщик макета и получаем макет компоновки.
	КомпоновщикМакета	 = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки		 = КомпоновщикМакета.Выполнить(Схема, Настройки, ДанныеРасшифровки);
	
	// Инициализируем процессор компоновки.
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,ВнешниеНаборыДанных,ДанныеРасшифровки,Истина);
	ДокументРезультат.Очистить();
	
	// Выводим отчет в документ.
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	ДокументРезультат.ФиксацияСлева = ?(Настройки.ДополнительныеСвойства.ВариантНаименование = "Анализ этапов маршрутизации (Детальный)", 2, 1);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ОпределитьДопустимоеОтклонениеОтВремени()
	
	ТекПользователь = ПользователиКлиентСервер.АвторизованныйПользователь();
	ОсновнаяОрганизация              = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ТекПользователь, "ОсновнаяОрганизация");
	ОсновноеПодразделениеОрганизации = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ТекПользователь, "ОсновноеПодразделениеОрганизации");
	
	СтруктураОбъектовНастроек = Новый Структура;
	СтруктураОбъектовНастроек.Вставить("Организация",   ОсновнаяОрганизация);
	СтруктураОбъектовНастроек.Вставить("Подразделение", ОсновноеПодразделениеОрганизации);
	
	ДопустимоеОтклонениеОтВремениПрибытия = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, ПланыВидовХарактеристик.уатПраваИНастройки.ДопустимоеОтклонениеОтВремениПрибытия);
	ДопустимоеОтклонениеОтВремениПрибытия = ?(ДопустимоеОтклонениеОтВремениПрибытия <> Неопределено, ДопустимоеОтклонениеОтВремениПрибытия, 15);
	Возврат ДопустимоеОтклонениеОтВремениПрибытия;
	
КонецФункции

Функция ПолучитьХарактеристикиОсновногоЭтапа(ОсновнойЭтап, ДопустимоеОтклонениеОкна)
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	уатМаршрутныйЛист.СуммаДоходов КАК ДоходыОсновнойЭтап,
	               |	уатМаршрутныйЛист.СуммаЗатрат КАК РасходыОсновнойЭтап,
	               |	уатМаршрутныйЛист.ВремяВПути КАК ВремяВПутиОсновнойЭтап,
	               |	уатМаршрутныйЛист.ВесБрутто КАК ВесОсновнойЭтап,
	               |	уатМаршрутныйЛист.Объем КАК ОбъемОсновнойЭтап,
	               |	уатМаршрутныйЛист.КоличествоМест КАК КоличествоМестОсновнойЭтап,
	               |	уатМаршрутныйЛист.ТС КАК ТС,
	               |	уатМаршрутныйЛист.Ссылка КАК Ссылка,
	               |	уатМаршрутныйЛист.ПробегПорожний КАК ПробегПорожний,
	               |	уатМаршрутныйЛист.ПробегСГрузом КАК ПробегСГрузом,
	               |	ЕСТЬNULL(уатЭтапыМаршрутизацииМетрики.ЗначениеТекущее, 0) КАК Стоимость
	               |ИЗ
	               |	Документ.уатМаршрутныйЛист КАК уатМаршрутныйЛист
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатЭтапыМаршрутизации.Метрики КАК уатЭтапыМаршрутизацииМетрики
	               |		ПО уатМаршрутныйЛист.ЭтапМаршрутизации = уатЭтапыМаршрутизацииМетрики.Ссылка
	               |			И уатМаршрутныйЛист.Ссылка = уатЭтапыМаршрутизацииМетрики.МаршрутныйЛист
	               |			И (уатЭтапыМаршрутизацииМетрики.Свойство = ""total_cost"")
	               |ГДЕ
	               |	уатМаршрутныйЛист.Проведен = ИСТИНА
	               |	И уатМаршрутныйЛист.ЭтапМаршрутизации = &ОсновнойЭтап";
	Запрос.УстановитьПараметр("ОсновнойЭтап", ОсновнойЭтап);
	ХарактеристикиОсновногоЭтапа = Новый Структура("ДоходыОсновнойЭтап, РасходыОсновнойЭтап, ВремяВПутиОсновнойЭтап, ВесОсновнойЭтап,
	|ОбъемОсновнойЭтап, КоличествоМестОсновнойЭтап, НарушениеОконВремяОсновнойЭтап, ЗаказГрузоотправителяОсновнойЭтап, ВремяОсновнойЭтап,
	|ТСОсновнойЭтап, РейсыОсновнойЭтап, СтоянкаОсновнойЭтап, ОжиданиеОсновнойЭтап, РейсыОсновнойЭтап, ПрибыльОсновнойЭтап, ПробегОсновнойЭтап, НарушениеОконОсновнойЭтап, ПунктовПогрузки, ПунктовРазгрузки, СтоимостьОсновнойЭтап");
	ХарактеристикиОсновногоЭтапа.ДоходыОсновнойЭтап                = 0;
	ХарактеристикиОсновногоЭтапа.РасходыОсновнойЭтап               = 0;
	ХарактеристикиОсновногоЭтапа.ВремяВПутиОсновнойЭтап            = 0;
	ХарактеристикиОсновногоЭтапа.ВесОсновнойЭтап                   = 0;
	ХарактеристикиОсновногоЭтапа.КоличествоМестОсновнойЭтап        = 0;
	ХарактеристикиОсновногоЭтапа.ОбъемОсновнойЭтап                 = 0;
	ХарактеристикиОсновногоЭтапа.НарушениеОконВремяОсновнойЭтап    = 0;
	ХарактеристикиОсновногоЭтапа.СтоянкаОсновнойЭтап               = 0;
	ХарактеристикиОсновногоЭтапа.ОжиданиеОсновнойЭтап              = 0;
	ХарактеристикиОсновногоЭтапа.ВремяОсновнойЭтап                 = 0;
	ХарактеристикиОсновногоЭтапа.ЗаказГрузоотправителяОсновнойЭтап = 0;
	ХарактеристикиОсновногоЭтапа.НарушениеОконВремяОсновнойЭтап    = 0;
	ХарактеристикиОсновногоЭтапа.ТСОсновнойЭтап                    = 0;
	ХарактеристикиОсновногоЭтапа.РейсыОсновнойЭтап                 = 0;
	ХарактеристикиОсновногоЭтапа.ПрибыльОсновнойЭтап               = 0;
	ХарактеристикиОсновногоЭтапа.ПробегОсновнойЭтап                = 0;
	ХарактеристикиОсновногоЭтапа.НарушениеОконОсновнойЭтап         = 0;
	ХарактеристикиОсновногоЭтапа.ПунктовПогрузки                   = 0;
	ХарактеристикиОсновногоЭтапа.ПунктовРазгрузки                  = 0;
	ХарактеристикиОсновногоЭтапа.СтоимостьОсновнойЭтап             = 0;
	НарушениеОконВремяОсновнойЭтап                                 = 0;
	
	ЗаказыСоответствие	 = Новый Соответствие();
	ТССоответствие		 = Новый Соответствие();
	Выборка = Запрос.Выполнить().Выбрать();
	Отчет   = Отчеты.уатАнализЭтаповМаршрутизации_уэ;
	
	НарушениеОконОсновнойЭтап = 0;
	Пока Выборка.Следующий() Цикл
		ХарактеристикиОсновногоЭтапа.РейсыОсновнойЭтап          = ХарактеристикиОсновногоЭтапа.РейсыОсновнойЭтап + 1;
		ХарактеристикиОсновногоЭтапа.ДоходыОсновнойЭтап         = ХарактеристикиОсновногоЭтапа.ДоходыОсновнойЭтап + Выборка.ДоходыОсновнойЭтап;
		ХарактеристикиОсновногоЭтапа.РасходыОсновнойЭтап        = ХарактеристикиОсновногоЭтапа.РасходыОсновнойЭтап + Выборка.РасходыОсновнойЭтап;
		ХарактеристикиОсновногоЭтапа.ВремяВПутиОсновнойЭтап     = ХарактеристикиОсновногоЭтапа.ВремяВПутиОсновнойЭтап + Отчет.ПолучитьВремя(Выборка.ВремяВПутиОсновнойЭтап);
		ХарактеристикиОсновногоЭтапа.ВесОсновнойЭтап            = ХарактеристикиОсновногоЭтапа.ВесОсновнойЭтап + Выборка.ВесОсновнойЭтап;
		ХарактеристикиОсновногоЭтапа.КоличествоМестОсновнойЭтап = ХарактеристикиОсновногоЭтапа.КоличествоМестОсновнойЭтап + Выборка.КоличествоМестОсновнойЭтап;
		ХарактеристикиОсновногоЭтапа.ОбъемОсновнойЭтап          = ХарактеристикиОсновногоЭтапа.ОбъемОсновнойЭтап + Выборка.ОбъемОсновнойЭтап;
		ХарактеристикиОсновногоЭтапа.ПробегОсновнойЭтап         = ХарактеристикиОсновногоЭтапа.ПробегОсновнойЭтап + Выборка.ПробегПорожний + Выборка.ПробегСГрузом;
		
		ХарактеристикиОсновногоЭтапа.ПрибыльОсновнойЭтап        = ХарактеристикиОсновногоЭтапа.ПрибыльОсновнойЭтап + (Выборка.ДоходыОсновнойЭтап - Выборка.РасходыОсновнойЭтап);
		НарушениеОконВремяОсновнойЭтап = НарушениеОконВремяОсновнойЭтап + Отчеты.уатАнализЭтаповМаршрутизации_уэ.ВыходЗаОкна(Выборка.Ссылка, ДопустимоеОтклонениеОкна, Истина, Истина);
		ТССоответствие.Вставить(Выборка.ТС, "");

		Если Отчеты.уатАнализЭтаповМаршрутизации_уэ.ВыходЗаОкна(Выборка.Ссылка, ДопустимоеОтклонениеОкна, Истина, Истина) > 0 Тогда
			НарушениеОконОсновнойЭтап = НарушениеОконОсновнойЭтап + 1;
		КонецЕсли;
		
		Для Каждого ТекЗаказ Из Выборка.Ссылка.Заказы Цикл
			Если ЗначениеЗаполнено(ТекЗаказ.ЗаказГрузоотправителя) Тогда
				ЗаказыСоответствие.Вставить(ТекЗаказ.ЗаказГрузоотправителя, "");
			КонецЕсли;
		КонецЦикла;
		
		ИтоговыеПоказателиМЛ = РассчитатьИтоговыеПоказателиМЛ(Выборка.Ссылка);
		ХарактеристикиОсновногоЭтапа.СтоянкаОсновнойЭтап  = ХарактеристикиОсновногоЭтапа.СтоянкаОсновнойЭтап + Отчет.ПолучитьВремя(ИтоговыеПоказателиМЛ.ОбщееВремяСтоянок);
		ХарактеристикиОсновногоЭтапа.ОжиданиеОсновнойЭтап = ХарактеристикиОсновногоЭтапа.ОжиданиеОсновнойЭтап + Отчет.ПолучитьВремя(ИтоговыеПоказателиМЛ.ОбщееВремяОжидания);
		ХарактеристикиОсновногоЭтапа.ВремяОсновнойЭтап    = ХарактеристикиОсновногоЭтапа.ВремяОсновнойЭтап + Отчет.ПолучитьВремя(ИтоговыеПоказателиМЛ.ОбщееВремяСтоянок) + Отчет.ПолучитьВремя(ИтоговыеПоказателиМЛ.ОбщееВремяОжидания);
		ХарактеристикиОсновногоЭтапа.ВремяОсновнойЭтап    = ХарактеристикиОсновногоЭтапа.ВремяОсновнойЭтап + Отчет.ПолучитьВремя(Выборка.ВремяВПутиОсновнойЭтап);
		ХарактеристикиОсновногоЭтапа.ПунктовПогрузки      = ХарактеристикиОсновногоЭтапа.ПунктовПогрузки + ИтоговыеПоказателиМЛ.Погрузка;
		ХарактеристикиОсновногоЭтапа.ПунктовРазгрузки     = ХарактеристикиОсновногоЭтапа.ПунктовПогрузки + ИтоговыеПоказателиМЛ.Разгрузка;
		
		ХарактеристикиОсновногоЭтапа.СтоимостьОсновнойЭтап = ХарактеристикиОсновногоЭтапа.СтоимостьОсновнойЭтап + Выборка.Стоимость;
	КонецЦикла;
	
	ХарактеристикиОсновногоЭтапа.НарушениеОконВремяОсновнойЭтап    = НарушениеОконВремяОсновнойЭтап;
	ХарактеристикиОсновногоЭтапа.НарушениеОконОсновнойЭтап = НарушениеОконОсновнойЭтап;
	
	ХарактеристикиОсновногоЭтапа.ЗаказГрузоотправителяОсновнойЭтап = ЗаказыСоответствие.Количество();
	ХарактеристикиОсновногоЭтапа.ТСОсновнойЭтап                    = ТССоответствие.Количество();
	
	Возврат ХарактеристикиОсновногоЭтапа;

	
КонецФункции

Функция ПолучитьДанныеЭтаповМаршрутизации(ЭтапВключен, ЭтапМаршрутизации, ГруппаЭтапВключен, ГруппаЭтапМаршрутизации, ДопустимоеОтклонениеОкна, ХарактеристикиОсновногоЭтапа = Неопределено)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ЭтапВключен",			 ЭтапВключен);
	Запрос.УстановитьПараметр("ЭтапМаршрутизации",		 ЭтапМаршрутизации);
	Запрос.УстановитьПараметр("ГруппаЭтапВключен",		 ГруппаЭтапВключен);
	Запрос.УстановитьПараметр("ГруппаЭтапМаршрутизации", ГруппаЭтапМаршрутизации);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	уатМаршрутныйЛист.Ссылка КАК Ссылка,
	               |	уатМаршрутныйЛист.АдресНазначения КАК АдресНазначения,
	               |	уатМаршрутныйЛист.АдресОтправления КАК АдресОтправления,
	               |	уатМаршрутныйЛист.ВесБрутто КАК ВесБрутто,
	               |	уатМаршрутныйЛист.ВидОперации КАК ВидОперации,
	               |	уатМаршрутныйЛист.ВидПеревозки КАК ВидПеревозки,
	               |	уатМаршрутныйЛист.НаправлениеПеревозки КАК НаправлениеПеревозки,
	               |	уатМаршрутныйЛист.ВремяВПути КАК ВремяВПути,
	               |	уатМаршрутныйЛист.Выполнен КАК Выполнен,
	               |	уатМаршрутныйЛист.ДатаИВремяОтправленияПлан КАК ДатаИВремяОтправленияПлан,
	               |	уатМаршрутныйЛист.ДатаИВремяВыполненияПлан КАК ДатаИВремяВыполненияПлан,
	               |	уатМаршрутныйЛист.КоличествоМест КАК КоличествоМест,
	               |	уатМаршрутныйЛист.Контрагент КАК Контрагент,
	               |	уатМаршрутныйЛист.Объем КАК Объем,
	               |	уатМаршрутныйЛист.Прицеп1 КАК Прицеп1,
	               |	уатМаршрутныйЛист.Прицеп2 КАК Прицеп2,
	               |	уатМаршрутныйЛист.ПробегПорожний КАК ПробегПорожний,
	               |	уатМаршрутныйЛист.ПробегСГрузом КАК ПробегСГрузом,
	               |	уатМаршрутныйЛист.Расстояние КАК Расстояние,
	               |	уатМаршрутныйЛист.СуммаДоходов КАК СуммаДоходов,
	               |	уатМаршрутныйЛист.СуммаЗатрат КАК СуммаЗатрат,
	               |	уатМаршрутныйЛист.ТС КАК ТС,
	               |	уатМаршрутныйЛист.ЭтапМаршрутизации КАК ЭтапМаршрутизации,
	               |	уатЭтапыМаршрутизации.ВремяВыполненияМаршрутизации КАК ВремяВыполненияМаршрутизации,
	               |	уатЭтапыМаршрутизации.Родитель КАК ЭтапРодитель,
	               |	уатЭтапыМаршрутизации.Наименование КАК ЭтапНаименование,
	               |	ЕСТЬNULL(уатЭтапыМаршрутизацииМетрики.ЗначениеТекущее, 0) КАК ЦелеваяФункция
	               |ПОМЕСТИТЬ втМаршрутныеЛисты
	               |ИЗ
	               |	Документ.уатМаршрутныйЛист КАК уатМаршрутныйЛист
	               |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.уатЭтапыМаршрутизации КАК уатЭтапыМаршрутизации
	               |		ПО уатМаршрутныйЛист.ЭтапМаршрутизации = уатЭтапыМаршрутизации.Ссылка
	               |			И (уатМаршрутныйЛист.Проведен = ИСТИНА)
	               |			И (уатЭтапыМаршрутизации.ПометкаУдаления = ЛОЖЬ)
	               |			И (ВЫБОР
	               |				КОГДА НЕ &ЭтапВключен
	               |					ТОГДА ВЫБОР
	               |							КОГДА НЕ &ГруппаЭтапВключен
	               |								ТОГДА ИСТИНА
	               |							ИНАЧЕ ВЫБОР
	               |									КОГДА уатЭтапыМаршрутизации.Ссылка В ИЕРАРХИИ (&ГруппаЭтапМаршрутизации)
	               |										ТОГДА ИСТИНА
	               |									ИНАЧЕ ЛОЖЬ
	               |								КОНЕЦ
	               |						КОНЕЦ
	               |				ИНАЧЕ ВЫБОР
	               |						КОГДА уатЭтапыМаршрутизации.Ссылка В ИЕРАРХИИ (&ЭтапМаршрутизации)
	               |							ТОГДА ИСТИНА
	               |						ИНАЧЕ ЛОЖЬ
	               |					КОНЕЦ
	               |			КОНЕЦ)
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатЭтапыМаршрутизации.Метрики КАК уатЭтапыМаршрутизацииМетрики
	               |		ПО уатМаршрутныйЛист.ЭтапМаршрутизации = уатЭтапыМаршрутизацииМетрики.Ссылка
	               |			И уатМаршрутныйЛист.Ссылка = уатЭтапыМаршрутизацииМетрики.МаршрутныйЛист
	               |			И (уатЭтапыМаршрутизацииМетрики.Свойство = ""total_cost"")
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	уатМаршрутныйЛист.Ссылка,
	               |	уатЭтапыМаршрутизации.Наименование,
	               |	уатЭтапыМаршрутизации.Родитель,
	               |	уатМаршрутныйЛист.АдресНазначения,
	               |	уатМаршрутныйЛист.АдресОтправления,
	               |	уатМаршрутныйЛист.ВесБрутто,
	               |	уатМаршрутныйЛист.ВидОперации,
	               |	уатМаршрутныйЛист.ВидПеревозки,
	               |	уатМаршрутныйЛист.НаправлениеПеревозки,
	               |	уатМаршрутныйЛист.ВремяВПути,
	               |	уатМаршрутныйЛист.Выполнен,
	               |	уатМаршрутныйЛист.ДатаИВремяОтправленияПлан,
	               |	уатМаршрутныйЛист.ДатаИВремяВыполненияПлан,
	               |	уатМаршрутныйЛист.КоличествоМест,
	               |	уатМаршрутныйЛист.Контрагент,
	               |	уатМаршрутныйЛист.Объем,
	               |	уатМаршрутныйЛист.Прицеп1,
	               |	уатМаршрутныйЛист.Прицеп2,
	               |	уатМаршрутныйЛист.ПробегПорожний,
	               |	уатМаршрутныйЛист.ПробегСГрузом,
	               |	уатМаршрутныйЛист.Расстояние,
	               |	уатМаршрутныйЛист.СуммаДоходов,
	               |	уатМаршрутныйЛист.СуммаЗатрат,
	               |	уатМаршрутныйЛист.ТС,
	               |	уатМаршрутныйЛист.ЭтапМаршрутизации,
	               |	уатЭтапыМаршрутизации.ВремяВыполненияМаршрутизации,
	               |	ЕСТЬNULL(уатЭтапыМаршрутизацииМетрики.ЗначениеТекущее, 0)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втМаршрутныеЛисты.ЭтапМаршрутизации КАК Ссылка,
	               |	ЛОЖЬ КАК ЭтоГруппа,
	               |	втМаршрутныеЛисты.ЭтапНаименование КАК Наименование,
	               |	ЕСТЬNULL(уатМаршрутныйЛистЗаказы.Ссылка, ЗНАЧЕНИЕ(Документ.уатМаршрутныйЛист.ПустаяСсылка)) КАК МаршрутныйЛист,
	               |	ЕСТЬNULL(уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя, ЗНАЧЕНИЕ(Документ.уатЗаказГрузоотправителя.ПустаяСсылка)) КАК ЗаказГрузоотправителя,
	               |	ЛОЖЬ КАК ЭтоЭтап,
	               |	ЛОЖЬ КАК ЭтоЭтапМЛ,
	               |	ИСТИНА КАК ЭтоЗаказ,
	               |	NULL КАК Вес,
	               |	NULL КАК ВесСредний,
	               |	NULL КАК Объем,
	               |	NULL КАК ОбъемСредний,
	               |	NULL КАК КоличествоМест,
	               |	NULL КАК КоличествоМестСредний,
	               |	NULL КАК Пробег,
	               |	NULL КАК ПробегСредний,
	               |	втМаршрутныеЛисты.ТС КАК ТС,
	               |	NULL КАК КолвоРейсов,
	               |	NULL КАК ВремяВПути,
	               |	NULL КАК ВремяВПутиСреднее,
	               |	0 КАК Стоянка,
	               |	0 КАК СтоянкаСредняя,
	               |	0 КАК Ожидание,
	               |	0 КАК ОжиданиеСреднее,
	               |	NULL КАК Время,
	               |	NULL КАК ВремяСреднее,
	               |	втМаршрутныеЛисты.ЭтапРодитель КАК Группа,
	               |	втМаршрутныеЛисты.ТС КАК ТСПредставление,
	               |	NULL КАК ДатаИВремяОтправления,
	               |	NULL КАК ДатаИВремяВыполнения,
	               |	NULL КАК СуммаДоходов,
	               |	NULL КАК СуммаЗатрат,
	               |	втМаршрутныеЛисты.ТС.Модель КАК ТСМодель,
	               |	NULL КАК Прицеп1,
	               |	NULL КАК Прицеп2,
	               |	втМаршрутныеЛисты.ТС.Модель.МаксимальноеКоличествоУпаковок КАК МаксКолвоМест,
	               |	NULL КАК Сальдо,
	               |	NULL КАК ВремяВыполненияМаршрутизации,
	               |	NULL КАК ЦелеваяФункция
	               |ИЗ
	               |	втМаршрутныеЛисты КАК втМаршрутныеЛисты
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатМаршрутныйЛист.Заказы КАК уатМаршрутныйЛистЗаказы
	               |		ПО втМаршрутныеЛисты.Ссылка = уатМаршрутныйЛистЗаказы.Ссылка
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	втМаршрутныеЛисты.ЭтапМаршрутизации,
	               |	ЛОЖЬ,
	               |	втМаршрутныеЛисты.ЭтапНаименование,
	               |	втМаршрутныеЛисты.Ссылка,
	               |	ЗНАЧЕНИЕ(Документ.уатЗаказГрузоотправителя.ПустаяСсылка),
	               |	ЛОЖЬ,
	               |	ИСТИНА,
	               |	ЛОЖЬ,
	               |	втМаршрутныеЛисты.ВесБрутто,
	               |	втМаршрутныеЛисты.ВесБрутто,
	               |	втМаршрутныеЛисты.Объем,
	               |	втМаршрутныеЛисты.Объем,
	               |	втМаршрутныеЛисты.КоличествоМест,
	               |	втМаршрутныеЛисты.КоличествоМест,
	               |	втМаршрутныеЛисты.ПробегПорожний + втМаршрутныеЛисты.ПробегСГрузом,
	               |	втМаршрутныеЛисты.ПробегПорожний + втМаршрутныеЛисты.ПробегСГрузом,
	               |	ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка),
	               |	1,
	               |	втМаршрутныеЛисты.ВремяВПути,
	               |	втМаршрутныеЛисты.ВремяВПути,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	втМаршрутныеЛисты.ЭтапРодитель,
	               |	втМаршрутныеЛисты.ТС,
	               |	втМаршрутныеЛисты.ДатаИВремяОтправленияПлан,
	               |	втМаршрутныеЛисты.ДатаИВремяВыполненияПлан,
	               |	втМаршрутныеЛисты.СуммаДоходов,
	               |	втМаршрутныеЛисты.СуммаЗатрат,
	               |	втМаршрутныеЛисты.ТС.Модель,
	               |	втМаршрутныеЛисты.Прицеп1,
	               |	втМаршрутныеЛисты.Прицеп2,
	               |	NULL,
	               |	втМаршрутныеЛисты.СуммаДоходов - втМаршрутныеЛисты.СуммаЗатрат,
	               |	втМаршрутныеЛисты.ВремяВыполненияМаршрутизации,
	               |	втМаршрутныеЛисты.ЦелеваяФункция
	               |ИЗ
	               |	втМаршрутныеЛисты КАК втМаршрутныеЛисты
	               |
	               |ОБЪЕДИНИТЬ ВСЕ
	               |
	               |ВЫБРАТЬ
	               |	уатЭтапыМаршрутизации.Ссылка,
	               |	уатЭтапыМаршрутизации.ЭтоГруппа,
	               |	уатЭтапыМаршрутизации.Наименование,
	               |	ЗНАЧЕНИЕ(Документ.уатМаршрутныйЛист.ПустаяСсылка),
	               |	ЗНАЧЕНИЕ(Документ.уатЗаказГрузоотправителя.ПустаяСсылка),
	               |	ЛОЖЬ,
	               |	ЛОЖЬ,
	               |	ЛОЖЬ,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка),
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	0,
	               |	0,
	               |	0,
	               |	0,
	               |	NULL,
	               |	NULL,
	               |	уатЭтапыМаршрутизации.Ссылка,
	               |	ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка),
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL,
	               |	NULL
	               |ИЗ
	               |	Справочник.уатЭтапыМаршрутизации КАК уатЭтапыМаршрутизации
	               |ГДЕ
	               |	уатЭтапыМаршрутизации.ЭтоГруппа = ИСТИНА
	               |	И уатЭтапыМаршрутизации.ПометкаУдаления = ЛОЖЬ
	               |	И ВЫБОР
	               |			КОГДА НЕ &ЭтапВключен
	               |				ТОГДА ВЫБОР
	               |						КОГДА НЕ &ГруппаЭтапВключен
	               |							ТОГДА ИСТИНА
	               |						ИНАЧЕ ВЫБОР
	               |								КОГДА уатЭтапыМаршрутизации.Ссылка В ИЕРАРХИИ (&ГруппаЭтапМаршрутизации)
	               |									ТОГДА ИСТИНА
	               |								ИНАЧЕ ЛОЖЬ
	               |							КОНЕЦ
	               |					КОНЕЦ
	               |			ИНАЧЕ ВЫБОР
	               |					КОГДА уатЭтапыМаршрутизации.Ссылка В ИЕРАРХИИ (&ЭтапМаршрутизации)
	               |						ТОГДА ИСТИНА
	               |					ИНАЧЕ ЛОЖЬ
	               |				КОНЕЦ
	               |		КОНЕЦ";
	Выборка = Запрос.Выполнить().Выгрузить();
	Выборка.Колонки.Добавить("НарушениеОкон",		 Новый ОписаниеТипов("Число"));
	Выборка.Колонки.Добавить("НарушениеОконВремя",	 Новый ОписаниеТипов("Число"));
	Выборка.Колонки.Добавить("ГрузоПодъемность",	 Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 3)));
	Выборка.Колонки.Добавить("ОбъемКузова",			 Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10, 3)));
	Выборка.Колонки.Добавить("ПунктовПогрузки",		 Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10)));
	Выборка.Колонки.Добавить("ПунктовРазгрузки",	 Новый ОписаниеТипов("Число", Новый КвалификаторыЧисла(10)));
	Выборка.Колонки.Добавить("ПогрузкаРазгрузкаПредставление", Новый ОписаниеТипов("Строка"));
	Отчет = Отчеты.уатАнализЭтаповМаршрутизации_уэ;
	Для Каждого ТекСтрока Из Выборка Цикл
		Если ТекСтрока.ЭтоЭтапМЛ Тогда
			НарушениеОконСтруктура		 = ВыходЗаОкна(ТекСтрока.МаршрутныйЛист, ДопустимоеОтклонениеОкна);
			ТекСтрока.НарушениеОкон		 = НарушениеОконСтруктура.НарушениеОкон;
			ТекСтрока.НарушениеОконВремя = НарушениеОконСтруктура.НарушениеОконВремя;
			
			ИтоговыеПоказателиМЛ = РассчитатьИтоговыеПоказателиМЛ(ТекСтрока.МаршрутныйЛист);
			ТекСтрока.ВремявПути		 = Отчет.ПолучитьВремя(ТекСтрока.ВремяВПути);
			ТекСтрока.ВремяВПутиСреднее	 = Отчет.ПолучитьВремя(ТекСтрока.ВремяВПутиСреднее);
			ТекСтрока.Стоянка			 = Отчет.ПолучитьВремя(ИтоговыеПоказателиМЛ.ОбщееВремяСтоянок);
			ТекСтрока.СтоянкаСредняя	 = Отчет.ПолучитьВремя(ИтоговыеПоказателиМЛ.ОбщееВремяСтоянок);
			ТекСтрока.Ожидание			 = Отчет.ПолучитьВремя(ИтоговыеПоказателиМЛ.ОбщееВремяОжидания);
			ТекСтрока.ОжиданиеСреднее	 = Отчет.ПолучитьВремя(ИтоговыеПоказателиМЛ.ОбщееВремяОжидания);
			ТекСтрока.ПунктовПогрузки	 = ИтоговыеПоказателиМЛ.Погрузка;
			ТекСтрока.ПунктовРазгрузки	 = ИтоговыеПоказателиМЛ.Разгрузка;
		ИначеЕсли ТекСтрока.ЭтоЗаказ Тогда
			ГрузовыеПараметрыТС = ПолучитьГрузовыеПараметрыТСПоМЛ(ТекСтрока.ТС, ТекСтрока.Прицеп1, ТекСтрока.Прицеп2);
			ТекСтрока.ГрузоПодъемность	 = ГрузовыеПараметрыТС.ГрузоПодъемность;
			ТекСтрока.ОбъемКузова		 = ГрузовыеПараметрыТС.ОбъемКузова;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Выборка;
КонецФункции

Функция ВыходЗаОкна(Ссылка, ДопустимоеОтклонениеОкна=0)
	
	Результат = Новый Структура("НарушениеОкон, НарушениеОконВремя");
	
	ОтклонениеПогрузка  = 0;
	ОтклонениеРазгрузка = 0;
	НарушениеОкон       = 0;
	Для Каждого ТекСтрока Из Ссылка.Заказы Цикл 
		Если Не ЗначениеЗаполнено(ТекСтрока.ЗаказГрузоотправителя) Тогда 
			Продолжить;
		КонецЕсли;
		
		Если ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка Тогда 
			ОкноС  = '00010101' + (ТекСтрока.ЗаказГрузоотправителя.ОтправлениеС - НачалоДня(ТекСтрока.ЗаказГрузоотправителя.ОтправлениеС));
			ОкноПо = '00010101' + (ТекСтрока.ЗаказГрузоотправителя.ОтправлениеПо - НачалоДня(ТекСтрока.ЗаказГрузоотправителя.ОтправлениеПо));
		Иначе 
			ОкноС  = '00010101' + (ТекСтрока.ЗаказГрузоотправителя.ДоставкаС - НачалоДня(ТекСтрока.ЗаказГрузоотправителя.ДоставкаС));
			ОкноПо = '00010101' + (ТекСтрока.ЗаказГрузоотправителя.ДоставкаПо - НачалоДня(ТекСтрока.ЗаказГрузоотправителя.ДоставкаПо));
		КонецЕсли;
		
		ВремяВТочке = '00010101' + (ТекСтрока.ПрибытиеПлан - НачалоДня(ТекСтрока.ПрибытиеПлан));
		
		Если ВремяВТочке < ОкноС Тогда 
			Отклонение = ОкноС - ВремяВТочке;
		ИначеЕсли ВремяВТочке > ОкноПо Тогда 
			Отклонение = ВремяВТочке - ОкноПо;
		Иначе 
			Отклонение = 0;
		КонецЕсли;
		
		Если ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка 
			ИЛИ ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяПогрузка Тогда
			ОтклонениеПогрузка = Макс(ОтклонениеПогрузка, Отклонение);
		ИначеЕсли ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка 
			ИЛИ ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяРазгрузка Тогда
			ОтклонениеРазгрузка = Макс(ОтклонениеРазгрузка, Отклонение);
		КонецЕсли;
		
		Если Отклонение > ДопустимоеОтклонениеОкна * 60 Тогда
			НарушениеОкон = 1;
		КонецЕсли;
	КонецЦикла;
	
	Результат.НарушениеОконВремя = (ОтклонениеПогрузка + ОтклонениеРазгрузка) / 60;
	Результат.НарушениеОкон		 = НарушениеОкон;
	
	Возврат Результат;
	
КонецФункции

Функция ПолучитьГрузовыеПараметрыТСПоМЛ(ТС, Прицеп1, Прицеп2)
	
	Результат = Новый Структура("ГрузоПодъемность, ОбъемКузова");
	
	ГрузовыеПараметрыТС = уатОбщегоНазначения.уатПолучитьГрузоподъемностьИОбъемТС(ТС);
	ГрузоПодъемность    = ГрузовыеПараметрыТС.Грузоподъемность;
	ОбъемКузова         = ГрузовыеПараметрыТС.ОбъемКузова;
	
	ГрузовыеПараметрыПрицеп1 = уатОбщегоНазначения.уатПолучитьГрузоподъемностьИОбъемТС(Прицеп1);
	ГрузоПодъемность         = ГрузоПодъемность + ГрузовыеПараметрыПрицеп1.Грузоподъемность;
	ОбъемКузова              = ОбъемКузова + ГрузовыеПараметрыПрицеп1.ОбъемКузова;
	
	Если Не Прицеп1 = Прицеп2 Тогда 
		ГрузовыеПараметрыПрицеп2 = уатОбщегоНазначения.уатПолучитьГрузоподъемностьИОбъемТС(Прицеп2);
		ГрузоПодъемность         = ГрузоПодъемность + ГрузовыеПараметрыПрицеп2.Грузоподъемность;
		ОбъемКузова              = ОбъемКузова + ГрузовыеПараметрыПрицеп2.ОбъемКузова;
	КонецЕсли;
	
	Результат.ГрузоПодъемность	 = ГрузоПодъемность;
	Результат.ОбъемКузова		 = ОбъемКузова;
	Возврат Результат;

КонецФункции

Функция РассчитатьИтоговыеПоказателиМЛ(МаршрутныйЛист)
	
	Результат = Новый Структура("ОбщееВремяСтоянок, ОбщееВремяОжидания, Погрузка, Разгрузка");
	
	ОбщееВремяСтоянок	 = 0;
	ОбщееВремяОжидания	 = 0;
	
	// Таблица для определения порожнего пробега. Считаем что машина идет порожняком, если таблица пуста.
	тблГрузы = Новый ТаблицаЗначений;
	тблГрузы.Колонки.Добавить("Заказ");
	тблГрузы.Колонки.Добавить("Номенклатура");
	тблГрузы.Колонки.Добавить("ЕдиницаИзмерения");
	тблГрузы.Колонки.Добавить("Количество");
	
	ПредПункт = Неопределено;
	ПредЗаказ = Неопределено;
	флПогрузки  = Ложь;
	флРазгрузки = Ложь;

	мсвЗаказыКРазмещению = Новый Массив();
	
	Заказы = МаршрутныйЛист.Заказы;
	КолВоЗаказов = Заказы.Количество();
	ПунктовПогрузкиПоМЛ  = 0;
	ПунктовРазгрузкиПоМЛ = 0;
	Для Каждого ТекСтрока Из Заказы Цикл
		
		// Время стоянки, указываемое в заказах, прибавляется по каждому заказу.
		Если ПредЗаказ <> ТекСтрока.ЗаказГрузоотправителя Тогда
			ОбщееВремяСтоянок = уатЗащищенныеФункцииСервер.СложитьВремя(ОбщееВремяСтоянок, ТекСтрока.Стоянка);
		КонецЕсли;
		
		// Время в пути, время стоянки.
		Если ПредПункт <> ТекСтрока.Пункт Тогда 
			// Время стоянки, указываемое в пунктах, прибавляется для каждого пункта.
			ОбщееВремяСтоянок  = уатЗащищенныеФункцииСервер.СложитьВремя(ОбщееВремяСтоянок, ТекСтрока.СтоянкаИзПункта);
			ОбщееВремяОжидания = уатЗащищенныеФункцииСервер.СложитьВремя(ОбщееВремяОжидания, ТекСтрока.Ожидание);
			
			ПредПункт  = ТекСтрока.Пункт;
			
			Если ПредПункт <> Неопределено Тогда
				
				Если флПогрузки Тогда
					ПунктовПогрузкиПоМЛ  = ПунктовПогрузкиПоМЛ + 1;
				КонецЕсли;
				
				Если флРазгрузки Тогда
					ПунктовРазгрузкиПоМЛ = ПунктовРазгрузкиПоМЛ + 1;
				КонецЕсли;
				
				флПогрузки  = Ложь;
				флРазгрузки = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если ТекСтрока.ТипТочкиМаршрута = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Погрузка") Тогда
			флПогрузки   = Истина;
		ИначеЕсли ТекСтрока.ТипТочкиМаршрута = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Разгрузка") Тогда
			флРазгрузки  = Истина;
		КонецЕсли;
		
		// Пробег порожний и пробег с грузом.
		СледПункт = ?(ТекСтрока.НомерСтроки < КолВоЗаказов, Заказы[ТекСтрока.НомерСтроки].Пункт, Неопределено);
	КонецЦикла;
	
	Если флПогрузки Тогда
		ПунктовПогрузкиПоМЛ  = ПунктовПогрузкиПоМЛ + 1;
	КонецЕсли;
	
	Если флРазгрузки Тогда
		ПунктовРазгрузкиПоМЛ = ПунктовРазгрузкиПоМЛ + 1;
	КонецЕсли;

	Результат.ОбщееВремяСтоянок  = ОбщееВремяСтоянок;
	Результат.ОбщееВремяОжидания = ОбщееВремяОжидания;
	Результат.Погрузка           = ПунктовПогрузкиПоМЛ;
	Результат.Разгрузка          = ПунктовРазгрузкиПоМЛ;
	Возврат Результат;
	
КонецФункции

#КонецОбласти

#КонецЕсли
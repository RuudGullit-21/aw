#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	ПользовательскиеНастройкиМодифицированы = Ложь;
	
	УстановитьОбязательныеНастройки(ПользовательскиеНастройкиМодифицированы);
	
	НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
	
	КлючТекущегоВарианта = Неопределено;
	КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Свойство("КлючТекущегоВарианта", КлючТекущегоВарианта);
	Если КлючТекущегоВарианта = "РезультатРаботыПравилПоСтатьямБюджетов" 
		Или КлючТекущегоВарианта = "РезультатРаботыПравилПоСтатьеБюджетов" Тогда
		ПолучитьФактПоСтатьямБюджетов = Истина;
		ПолучитьФактПоПоказателямБюджетов = Ложь;
	ИначеЕсли КлючТекущегоВарианта = "РезультатРаботыПравилПоПоказателямБюджетов"
		Или КлючТекущегоВарианта = "РезультатРаботыПравилПоПоказателюБюджетов" Тогда
		ПолучитьФактПоСтатьямБюджетов = Ложь;
		ПолучитьФактПоПоказателямБюджетов = Истина;
	Иначе
		ПолучитьФактПоСтатьямБюджетов = Истина;
		ПолучитьФактПоПоказателямБюджетов = Истина;
	КонецЕсли;
	
	ПараметрыПолученияФакта = ПараметрыПолученияФактаПоНастройкамОтчета(НастройкиОтчета);
	Если ПолучитьФактПоСтатьямБюджетов Тогда
		ФактПоСтатьямБюджетов = БюджетированиеСервер.ФактПоСтатьямБюджетов(НастройкиОтчета, ПараметрыПолученияФакта);
	Иначе
		ФактПоСтатьямБюджетов = Новый ТаблицаЗначений;
	КонецЕсли;
	Если ПолучитьФактПоПоказателямБюджетов Тогда
		ФактПоПоказателямБюджетов = БюджетированиеСервер.ФактПоПоказателямБюджетов(НастройкиОтчета, ПараметрыПолученияФакта);
	Иначе
		ФактПоПоказателямБюджетов = Новый ТаблицаЗначений;
	КонецЕсли;
	
	Аналитика = Новый ТаблицаЗначений;
	Для каждого Поле Из СхемаКомпоновкиДанных.НаборыДанных.Найти("Аналитика").Поля Цикл
		Аналитика.Колонки.Добавить(Поле.Поле, Поле.ТипЗначения);
	КонецЦикла;
	
	НастроитьДополнениеПериода(НастройкиОтчета);
	
	Для каждого ЭлементСтруктуры Из НастройкиОтчета.Структура Цикл
		Если ТипЗнч(ЭлементСтруктуры) = Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
			ФинансоваяОтчетностьСервер.СкопироватьОтбор(НастройкиОтчета.Отбор, ЭлементСтруктуры.Настройки.Отбор, Истина);
			Для каждого Параметр Из НастройкиОтчета.ПараметрыДанных.Элементы Цикл
				ЗначениеПараметра =  ЭлементСтруктуры.Настройки.ПараметрыДанных.НайтиЗначениеПараметра(Параметр.Параметр);
				Если ЗначениеПараметра <> Неопределено Тогда
					ЗаполнитьЗначенияСвойств(ЗначениеПараметра, Параметр);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ВнешниеНаборы = Новый Структура;
	ВнешниеНаборы.Вставить("ФактПоСтатьямБюджетов", ФактПоСтатьямБюджетов);
	ВнешниеНаборы.Вставить("ФактПоПоказателямБюджетов", ФактПоПоказателямБюджетов);
	ВнешниеНаборы.Вставить("Аналитика", Аналитика);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборы, ДанныеРасшифровки, Истина);
	
	ПроцессорВыводаВТабличныйДокумент = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВыводаВТабличныйДокумент.УстановитьДокумент(ДокументРезультат);
	ПроцессорВыводаВТабличныйДокумент.Вывести(ПроцессорКомпоновкиДанных);
	
	// Сообщим форме отчета, что настройки модифицированы
	Если ПользовательскиеНастройкиМодифицированы Тогда
		КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ПользовательскиеНастройкиМодифицированы", Истина);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция ПараметрыПолученияФактаПоНастройкамОтчета(НастройкиОтчета)
	
	Параметры = БюджетированиеСервер.ПараметрыПолученияФакта();
	
	Параметры.ВалютаОтчета = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(НастройкиОтчета, "Валюта").Значение;
	Параметры.Период = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(НастройкиОтчета, "Период").Значение; 
	Параметры.Периодичность = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(НастройкиОтчета, "Периодичность").Значение;
	Параметры.ВозвращатьПравилоПолученияДанных = Истина;
	Параметры.ПоОрганизациям = Истина;
	Параметры.ПоПодразделениям = Истина;
	
	Показатели = Новый Структура;
	Для каждого ЭлементСтруктуры Из НастройкиОтчета.Структура Цикл
		Если ТипЗнч(ЭлементСтруктуры) <> Тип("НастройкиВложенногоОбъектаКомпоновкиДанных") Тогда
			Продолжить;
		КонецЕсли;
		Если КомпоновкаДанныхКлиентСервер.ПолеИспользуется(ЭлементСтруктуры.Настройки, "Регистратор") Тогда
			Параметры.РазворачиватьПоРегистратору = Истина;
		КонецЕсли;
		Если КомпоновкаДанныхКлиентСервер.ПолеИспользуется(ЭлементСтруктуры.Настройки, "Сумма") Тогда
			Показатели.Вставить("Сумма");
		КонецЕсли;
		Если КомпоновкаДанныхКлиентСервер.ПолеИспользуется(ЭлементСтруктуры.Настройки, "Количество") Тогда
			Показатели.Вставить("Количество");
		КонецЕсли;
	КонецЦикла;
	
	Параметры.Показатели = Показатели;
	
	Возврат Параметры; 
	
КонецФункции

Процедура НастроитьДополнениеПериода(НастройкиОтчета) 
	
	Перидичность = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(НастройкиОтчета, "Периодичность").Значение;
	СтрокаПериодичность = ОбщегоНазначения.ИмяЗначенияПеречисления(Перидичность);
	ТипДополнения = ТипДополненияПериодаКомпоновкиДанных[СтрокаПериодичность];
	
	Период = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(НастройкиОтчета, "Период").Значение;
	ПолеПериод = Новый ПолеКомпоновкиДанных("Период");
	
	Для каждого ЭлементСтруктуры Из НастройкиОтчета.Структура Цикл
		Если ТипЗнч(ЭлементСтруктуры) <> Тип("НастройкиВложенногоОбъектаКомпоновкиДанных")  Тогда
			Продолжить;
		КонецЕсли;
		Группировки = КомпоновкаДанныхКлиентСервер.ПолучитьГруппировки(ЭлементСтруктуры.Настройки);
		Для каждого Группировка Из Группировки Цикл
			ЭлементыГруппировки = Группировка.Значение.ПоляГруппировки.Элементы;
			Если ЭлементыГруппировки.Количество() = 1 И ЭлементыГруппировки[0].Поле = ПолеПериод Тогда
				ГруппировкаПериод = ЭлементыГруппировки[0];
				ГруппировкаПериод.ТипДополнения = ТипДополнения;
				ГруппировкаПериод.НачалоПериода = Период.ДатаНачала;
				ГруппировкаПериод.КонецПериода = Период.ДатаОкончания;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура УстановитьОбязательныеНастройки(ПользовательскиеНастройкиМодифицированы)
	
	ПараметрВалюта = КомпоновкаДанныхКлиентСервер.ПолучитьПараметр(КомпоновщикНастроек, "Валюта");
	Если ПараметрВалюта <> Неопределено И Не ЗначениеЗаполнено(ПараметрВалюта.Значение) Тогда
		Если уатОбщегоНазначенияТиповые.уатЕстьКонстанта("ВалютаУправленческогоУчета") Тогда
			ВалютаУправленческогоУчета = Константы.ВалютаУправленческогоУчета.Получить();
		Иначе
			ВалютаУправленческогоУчета = Константы.ВалютаРегламентированногоУчета.Получить();
		КонецЕсли;
		
		КомпоновкаДанныхКлиентСервер.УстановитьПараметр(
			КомпоновщикНастроек, "Валюта", ВалютаУправленческогоУчета);
		ПользовательскиеНастройкиМодифицированы = Истина;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#КонецЕсли




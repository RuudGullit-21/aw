#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс
	 
// Настройки общей формы отчета подсистемы "Варианты отчетов".
//
// Параметры:
//   Форма - УправляемаяФорма - Форма отчета.
//   КлючВарианта - Строка - Имя предопределенного варианта отчета или уникальный идентификатор пользовательского.
//   Настройки - Структура - см. процедуру ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию.
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	
	Настройки.События.ПриСозданииНаСервере = Истина;
	
КонецПроцедуры

// Вызывается в обработчике одноименного события формы отчета после выполнения кода формы.
//  
//  См. также:
//  "УправляемаяФорма.ПриСозданииНаСервере" в синтакс-помощнике.
//
// Параметры:
//  Форма				 - УправляемаяФорма	 - Форма отчета.
//  Отказ				 - Булево			 - Передается из параметров обработчика "как есть".
//  СтандартнаяОбработка - Булево			 - Передается из параметров обработчика "как есть".
//
Процедура ПриСозданииНаСервере(Форма, Отказ, СтандартнаяОбработка) Экспорт
	// КЭШируем параметры формы.
	ПараметрыФормы = ItobОтчетыКлиентСерверПовтИсп.ПараметрыФормы(Строка(Форма.УникальныйИдентификатор));
	ПараметрыФормы.Очистить();
	Если Форма.Параметры.Свойство("СписокПараметров") Тогда
		ПараметрыФормы.Вставить("СписокПараметров", Форма.Параметры.СписокПараметров);
	КонецЕсли;
КонецПроцедуры

// Вызывается после перезаполнения панели настроек формы отчета.
//
// Параметры:
//  Форма				 - УправляемаяФорма	 - Форма отчета.
//  ПервоеОткрытиеФормы	 - Булево - Признак первого открытия формы.
//
Процедура ИзменитьФормуПослеСозданияЭлементовНастроек(Форма, ПервоеОткрытиеФормы) Экспорт
	
	// Проверяем, открывается ли нужная форма.
	Если Не Форма.ТипФормыОтчета = ТипФормыОтчета.Основная Или СтрНайти(Форма.ИмяФормы, "ФормаОтчета") = 0 Тогда // Если используется общая форма из БСП проверяем на имя.
	    Возврат;
	КонецЕсли;
	
	// Обновляем внешний вид элемента "Начало периода".
	ЭлементФормы = ItobОтчетыКлиентСервер.НайтиЭлементФормыПоЗаголовку(Форма, "Начало периода");
	ЭлементФормы.КнопкаРегулирования = Истина;
	ЭлементФормы.УстановитьДействие("Регулирование", "Подключаемый_ПолеВвода_Регулирование");
	
	// Обновляем внешний вид элемента "Конец периода".
	ЭлементФормы = ItobОтчетыКлиентСервер.НайтиЭлементФормыПоЗаголовку(Форма, "Конец периода");
	ЭлементФормы.КнопкаРегулирования = Истина;
	ЭлементФормы.УстановитьДействие("Регулирование", "Подключаемый_ПолеВвода_Регулирование");
	
	Если НЕ ПервоеОткрытиеФормы Тогда
		
		
		Возврат;
	КонецЕсли;
	
	// Получаем из КЭШа параметры формы.
	ПараметрыФормы = ItobОтчетыКлиентСерверПовтИсп.ПараметрыФормы(Строка(Форма.УникальныйИдентификатор));
	
	// Форма открыта без параметров.
	Если ПараметрыФормы.Количество() > 0 Тогда
		ПараметрыДанных = ItobОтчетыКлиентСервер.ПолучитьПараметрыДанных(Форма);
		
		// Заполняем передаваемые параметры.
		Для Каждого Параметр Из ПараметрыФормы.СписокПараметров Цикл
		    Если Параметр.Представление = "НачПериода" Тогда
			    ItobОтчетыКлиентСервер.УстановитьЗначениеПараметра(ПараметрыДанных, "НачПериода", Новый СтандартнаяДатаНачала(Параметр.Значение), НСтр("ru = 'Начало периода'; en = 'Beginning of period'"));
		    ИначеЕсли Параметр.Представление = "КонПериода" Тогда
			    ItobОтчетыКлиентСервер.УстановитьЗначениеПараметра(ПараметрыДанных, "КонПериода", Новый СтандартнаяДатаНачала(Параметр.Значение), НСтр("ru = 'Конец периода'; en = 'End of period'"));
		    ИначеЕсли Параметр.Представление = "Объект" Тогда
			    ItobОтчетыКлиентСервер.УстановитьЗначениеПараметра(ПараметрыДанных, "Объект", Параметр.Значение, НСтр("ru = 'Объект'"));
			КонецЕсли; 
		КонецЦикла;
		
	КонецЕсли; 
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытий

// Процедура обработчик события "ПриКомпоновкеРезультата" объекта
//
Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	// Сбрасываем параметр стандартной обработки.
	СтандартнаяОбработка = Ложь;
	
	КомпоновщикНастроек.ПользовательскиеНастройки.ДополнительныеСвойства.Вставить("ОтчетПустой", Истина);
	
	ПараметрыДанных = КомпоновщикНастроек.ПолучитьНастройки().ПараметрыДанных;
	
	// Инициализируем параметры отчета.
	НачПериода = ItobОтчетыКлиентСервер.ПолучитьЗначениеПараметра(ПараметрыДанных, "НачПериода", НСтр("ru = 'Начало периода'; en = 'Beginning of period'")).Дата;
	КонПериода = ItobОтчетыКлиентСервер.ПолучитьЗначениеПараметра(ПараметрыДанных, "КонПериода", НСтр("ru = 'Конец периода'; en = 'End of period'")).Дата;
	Объект = ItobОтчетыКлиентСервер.ПолучитьЗначениеПараметра(ПараметрыДанных, "Объект", НСтр("ru = 'Объект'"));
	
	// Формируем отчет по топливу.
	ТабличныйДокументРезультат = СформироватьОтчетПоПростоямПриЗаведенномДвигателе(
		НачПериода,
		КонПериода,
		Объект);
		
	// Если нужно добавить параметры табличному документу - делаем это здесь.
	ДокументРезультат.ОриентацияСтраницы = ОриентацияСтраницы.Портрет;
	ДокументРезультат.АвтоМасштаб = Истина;
	ДокументРезультат.ИмяПараметровПечати = "Отчет_ItobОтчетПоПростоямПриЗаведенномДвигателе_ИмяПараметровПечати";
	ДокументРезультат.Вывести(ТабличныйДокументРезультат)
				
КонецПроцедуры
	
#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Функция выполняет формирование табличного документа отчета по простоям.
//
Функция СформироватьОтчетПоПростоямПриЗаведенномДвигателе(НачПериода, КонПериода, Объект)
	
	ТабДокумент = Новый ТабличныйДокумент;	
	Макет = ПолучитьМакет("Макет");
	
	СрезНаНачало = РегистрыСведений.ItobПривязкиТрекеров.ПолучитьПоследнее(НачалоДня(НачПериода)-1, 
	                                                              Новый Структура("Объект", Объект));
	Если НЕ ЗначениеЗаполнено(СрезНаНачало.Терминал) Тогда
		ItobРаботаС_БСП_КлиентСервер.СообщитьПользователю(НСтр("ru = 'Для объекта не привязан терминал!'"));
		Возврат ТабДокумент;
	
	КонецЕсли;
	
	Терминал = СрезНаНачало.Терминал;
	СтрокаДатчики = Терминал.Датчики.Найти(Справочники.ItobНазначенияДатчиков.Зажигание,"Назначение");
	Если СтрокаДатчики = Неопределено Тогда
		ItobРаботаС_БСП_КлиентСервер.СообщитьПользователю(НСтр("ru = 'Для терминала не указан датчик зажигания!'"));
		Возврат ТабДокумент;	
	
	КонецЕсли;
	
	Датчик = СтрокаДатчики.Датчик;
	
	Если Датчик.Пустая() Тогда
		ItobРаботаС_БСП_КлиентСервер.СообщитьПользователю(НСтр("ru = 'Для терминала не указан датчик зажигания!'"));
		Возврат ТабДокумент;	
	
	КонецЕсли;
	
	ОбластьШапка         = Макет.ПолучитьОбласть("Шапка");
	ОбластьДетали        = Макет.ПолучитьОбласть("Детали");
	ОбластьГруппировка   = Макет.ПолучитьОбласть("Группировка");
	
	ОбластьШапка.Параметры.ЗаголовокОтчета = НСтр("ru = 'Отчет по простоям при включенном зажигании за'")+" "
	                                          +ПредставлениеПериода(НачПериода, КонПериода);
	ОбластьШапка.Параметры.Объект = НСтр("ru = 'Объект мониторинга:'")+" "+Объект;
	
	ТабДокумент.Вывести(ОбластьШапка);
	
	ВключатьДанныеДатчиков = Новый Массив;
	ВключатьДанныеДатчиков.Добавить(Датчик);
	
	// Интервалы движения
	ТабИнтервалыДвижения = ItobОперативныйМониторинг.ПолучитьИнтервалыДвижения(Объект, НачПериода,
	                                                  КонПериода, Истина, ВключатьДанныеДатчиков);
	
	ИмяКолонкиЗажигание = "ЗначениеДатчика"+Формат(Датчик.Код, "ЧН=0; ЧГ=0");
	
	ИтогоЗажиганиеВключено = 0;
	ИтогоЗажиганиеВыключено = 0;
	НомерПП = 1;
	
	Для Счетчик = 0 По ТабИнтервалыДвижения.Количество()-1 Цикл
		
		Если ТабИнтервалыДвижения[Счетчик].Состояние = Перечисления.ItobСостоянияТерминалов.Стоянка Тогда
			
			// Вывод стоянки в таблицу
			ОбластьГруппировка.Параметры.НомерПП = НомерПП;
			ОбластьГруппировка.Параметры.Событие = "Стоянка";
			ОбластьГруппировка.Параметры.НачДата = ТабИнтервалыДвижения[Счетчик].ВремяНач;
			ОбластьГруппировка.Параметры.КонДата = ТабИнтервалыДвижения[Счетчик].ВремяКон;
			ОбластьГруппировка.Параметры.Продолжительность = ItobОперативныйМониторингКлиентСервер.ПредставлениеВремени(ТабИнтервалыДвижения[Счетчик].Длительность);		
			ОбластьГруппировка.Параметры.Место = ТабИнтервалыДвижения[Счетчик].МестоСтоянки;
			
			ОбластьГруппировка.Параметры.Расшифровка = Новый Структура("НачПериода,КонПериода,Объект",
				ТабИнтервалыДвижения[Счетчик].ВремяНач, ТабИнтервалыДвижения[Счетчик].ВремяКон, Объект);
			
			ТабДокумент.Вывести(ОбластьГруппировка);
			
			// Анализ зажигания в период стоянки
			
			СтрокаНачалаДиапазона = ТабИнтервалыДвижения[Счетчик].ДанныеТерминала[0];
						
			НомерСостояния = 1;
						
			Для СчетчикДТ=1 По ТабИнтервалыДвижения[Счетчик].ДанныеТерминала.Количество()-1 Цикл
				
				Если ТабИнтервалыДвижения[Счетчик].ДанныеТерминала[СчетчикДТ][ИмяКолонкиЗажигание] <> СтрокаНачалаДиапазона[ИмяКолонкиЗажигание]
					ИЛИ СчетчикДТ = ТабИнтервалыДвижения[Счетчик].ДанныеТерминала.Количество()-1 Тогда
					
					НачалоИнтервала = СтрокаНачалаДиапазона.Период;
					КонецИнтервала = ТабИнтервалыДвижения[Счетчик].ДанныеТерминала[СчетчикДТ].Период
						- ?(СчетчикДТ = ТабИнтервалыДвижения[Счетчик].ДанныеТерминала.Количество()-1,0,1);
						
					Если СчетчикДТ = ТабИнтервалыДвижения[Счетчик].ДанныеТерминала.Количество()-1 Тогда
						КонецИнтервала = ТабИнтервалыДвижения[Счетчик].ВремяКон;								
					
					КонецЕсли;	
					
					ОбластьДетали.Параметры.НомерПП = ""+НомерПП+"."+НомерСостояния;
					ОбластьДетали.Параметры.Событие = ?(СтрокаНачалаДиапазона[ИмяКолонкиЗажигание]=0,
					                                      НСтр("ru = 'Зажигание выключено'"),
														  НСтр("ru = 'Зажигание включено'"));
					ОбластьДетали.Параметры.НачДата = НачалоИнтервала;
					ОбластьДетали.Параметры.КонДата = КонецИнтервала;
					ОбластьДетали.Параметры.Продолжительность = ItobОперативныйМониторингКлиентСервер.ПредставлениеВремени
					                                                        (КонецИнтервала-НачалоИнтервала+1);
										
					ОбластьДетали.Параметры.Расшифровка = Новый Структура("НачПериода,КонПериода,Объект",НачалоИнтервала,КонецИнтервала,Объект);
					
					ТабДокумент.Вывести(ОбластьДетали);
					
					НомерСостояния = НомерСостояния+1;
					
					Если СтрокаНачалаДиапазона[ИмяКолонкиЗажигание] = 0 Тогда
						ИтогоЗажиганиеВыключено = ИтогоЗажиганиеВыключено + (КонецИнтервала-НачалоИнтервала+1);
					Иначе
						ИтогоЗажиганиеВключено = ИтогоЗажиганиеВключено + (КонецИнтервала-НачалоИнтервала+1);
						
						// Подсветка строки таблицы
						ТабДокумент.Область(ТабДокумент.ВысотаТаблицы,2,ТабДокумент.ВысотаТаблицы,
						                ТабДокумент.ШиринаТаблицы).ЦветФона = WebЦвета.Персиковый;
						
					КонецЕсли;
					
					СтрокаНачалаДиапазона = ТабИнтервалыДвижения[Счетчик].ДанныеТерминала[СчетчикДТ];
										
				КонецЕсли;	
			
			КонецЦикла;
			
			НомерПП = НомерПП + 1;
		
		КонецЕсли;
	
	КонецЦикла;
	
	Область = Макет.ПолучитьОбласть("ИтогЗаголовок");
	ТабДокумент.Вывести(Область);
	
	Если ИтогоЗажиганиеВключено+ИтогоЗажиганиеВыключено > 0 Тогда
		
		ОбластьИтогСтрока = Макет.ПолучитьОбласть("ИтогСтрока");
	
		ОбластьИтогСтрока.Параметры.Значение = НСтр("ru = 'Стоянка при включенном зажигании'");
		ОбластьИтогСтрока.Параметры.Продолжительность = ItobОперативныйМониторингКлиентСервер.ПредставлениеВремени(ИтогоЗажиганиеВключено)+" 
		       |("+Формат(ИтогоЗажиганиеВключено/(ИтогоЗажиганиеВключено+ИтогоЗажиганиеВыключено)*100,"ЧЦ=3; ЧДЦ=1; ЧН=0")+"%)";
		ТабДокумент.Вывести(ОбластьИтогСтрока);
		
		ОбластьИтогСтрока.Параметры.Значение = НСтр("ru = 'Стоянка при выключенном зажигании'");
		ОбластьИтогСтрока.Параметры.Продолжительность = ItobОперативныйМониторингКлиентСервер.ПредставлениеВремени(ИтогоЗажиганиеВыключено)+" ("+Формат(ИтогоЗажиганиеВыключено/(ИтогоЗажиганиеВключено+ИтогоЗажиганиеВыключено)*100,"ЧЦ=3; ЧДЦ=1; ЧН=0")+"%)";
		ТабДокумент.Вывести(ОбластьИтогСтрока);		
	
	КонецЕсли;
		
	Возврат ТабДокумент;
	
КонецФункции // СформироватьОтчетПоПростоямПриЗаведенномДвигателе()

#КонецОбласти 

#КонецЕсли

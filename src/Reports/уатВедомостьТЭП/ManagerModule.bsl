#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда


#Область СлужебныйПрограммныйИнтерфейс

// Задает настройки размещения вариантов отчетов в панели отчетов.
// См. ВариантыОтчетовПереопределяемый.НастроитьВариантыОтчетов().
//
// Параметры:
//   Настройки - Коллекция - Используется для описания настроек отчетов и вариантов
//       см. описание к ВариантыОтчетов.ДеревоНастроекВариантовОтчетовКонфигурации().
//   НастройкиОтчета - СтрокаДереваЗначений - Настройки размещения всех вариантов отчета.
//       См. ""Реквизиты для изменения"" функции ВариантыОтчетов.ДеревоНастроекВариантовОтчетовКонфигурации().
//
Процедура НастроитьВариантыОтчета(Настройки, НастройкиОтчета) Экспорт
	
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "Ведомость ТЭП");
	НастройкиВарианта.Описание = НСтр("en='Report provides information on technical and operational indicators.';ru='Отчет позволяет получить информацию о технико-эксплуатационных показателях.'");
	НастройкиВарианта = ВариантыОтчетов.ОписаниеВарианта(Настройки, НастройкиОтчета, "Сводные ТЭП");
	НастройкиВарианта.Описание = НСтр("en='Report shows summary information on technical and operational indicators.';ru='Отчет отображает сводную информацию о технико-эксплуатационных показателях.'");
	
КонецПроцедуры

// Возвращает количество дней в хозяйстве указанного ТС,
//  т.е. количество дней по данным местонахождения ТС в указанной организации и колонне за указанный период
//
// Параметры:
//  ТС			 - 	 - 
//  Организация	 - 	 - 
//  Колонна		 - 	 - 
//  ДатаНач		 - 	 - 
//  ДатаКон		 - 	 - 
// 
// Возвращаемое значение:
//   - 
//
Функция АвтоДнейВХозяйстве(ТС, Организация, Колонна, Знач ДатаНач, Знач ДатаКон) Экспорт
	Рез = 0;
	
	ДатаНач = НачалоДня(ДатаНач);
	ДатаКон = НачалоДня(ДатаКон);
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	НАЧАЛОПЕРИОДА(уатМестонахождениеТС.Период, ДЕНЬ) КАК Начало,
	|	уатМестонахождениеТС.Организация КАК Организация,
	|	уатМестонахождениеТС.Колонна КАК Колонна
	|ИЗ
	|	РегистрСведений.уатМестонахождениеТС КАК уатМестонахождениеТС
	|ГДЕ
	|	уатМестонахождениеТС.ТС = &ТС
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период");
	Запрос.УстановитьПараметр("ТС", ТС);
	тблМестонахождение = Запрос.Выполнить().Выгрузить();
	
	Для Сч = 0 По тблМестонахождение.Количество()-1 Цикл
		ТекСтрока = тблМестонахождение[Сч];
		Если Сч = тблМестонахождение.Количество()-1 Тогда
			ТекСтрока_Конец = ДатаКон;
		Иначе
			ТекСтрока_Конец = НачалоДня(тблМестонахождение[Сч + 1].Начало-1);
		КонецЕсли;
		
		Если ТекСтрока.Организация = Организация И ТекСтрока.Колонна = Колонна
			И ТекСтрока.Начало <= ДатаКон И ТекСтрока_Конец >= ДатаНач Тогда
			Рез = Рез + (Мин(ТекСтрока_Конец, ДатаКон) - Макс(ТекСтрока.Начало, ДатаНач))/3600/24 + 1;
		КонецЕсли;
	КонецЦикла;
		
	Возврат Рез;
КонецФункции

// Возвращает количество дней в работе указанного ТС
//
// Параметры:
//  ТС			 - Справочник.уатТС	 - транспортное средство
//  Организация	 - 					 - 
//  Колонна		 - 					 - 
//  ДатаНач		 - Дата				 - начало периода
//  ДатаКон		 - Дата				 - конец периода
// 
// Возвращаемое значение:
//  Количество - дней в работе - Число
//
Функция АвтоДнейВРаботе(ТС, Организация, Колонна, Знач ДатаНач, Знач ДатаКон) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатПутевойЛист.Ссылка,
	|	уатПутевойЛист.ДатаВыезда,
	|	уатПутевойЛист.ДатаВозвращения
	|ИЗ
	|	Документ.уатПутевойЛист КАК уатПутевойЛист
	|ГДЕ
	|	уатПутевойЛист.Проведен
	|	И уатПутевойЛист.Организация = &Организация
	|	И уатПутевойЛист.ТранспортноеСредство = &ТС
	|	И уатПутевойЛист.ДатаВозвращения >= &ДатаНач
	|	И (&ДатаКон = ДАТАВРЕМЯ(1,1,1) ИЛИ уатПутевойЛист.ДатаВыезда <= КОНЕЦПЕРИОДА(&ДатаКон, ДЕНЬ))");
	Запрос.УстановитьПараметр("ТС",          ТС);
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаНач",     ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон",     ДатаКон);
	
	ВыборкаПЛ = Запрос.Выполнить().Выбрать();
	
	// Дополнительный запрос для получения колонны ТС на момент ПЛ
	// можно было бы обойтись без запроса, если бы в ПЛ был реквизит Колонна
	ЗапросКолонна = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатМестонахождениеТС.Колонна КАК Колонна,
	|	уатМестонахождениеТС.Период КАК Период
	|ИЗ
	|	РегистрСведений.уатМестонахождениеТС КАК уатМестонахождениеТС
	|ГДЕ
	|	уатМестонахождениеТС.ТС = &ТС
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период");
	ЗапросКолонна.УстановитьПараметр("ТС", ТС);
	тблМестонахождение = ЗапросКолонна.Выполнить().Выгрузить();
	
	мсвДат = Новый Массив();
	Пока ВыборкаПЛ.Следующий() Цикл
		// определяем соответствует ли колонна ТС на момент ПЛ колонне из отчета
		КолоннаТС = Неопределено;
		Для Каждого ТекСтрокаКолонна Из тблМестонахождение Цикл
			Если ТекСтрокаКолонна.Период > ВыборкаПЛ.ДатаВозвращения Тогда
				Прервать;
			КонецЕсли;
			КолоннаТС = ТекСтрокаКолонна.Колонна;
		КонецЦикла;
		Если КолоннаТС <> Колонна Тогда
			Продолжить;
		КонецЕсли;
				
		ДатаНач_ = Макс(ДатаНач, ВыборкаПЛ.ДатаВыезда);
		ДатаКон_ = ?(ДатаКон = '00010101', ВыборкаПЛ.ДатаВозвращения, Мин(КонецДня(ДатаКон), ВыборкаПЛ.ДатаВозвращения));
		
		ТекДата_ = НачалоДня(ДатаНач_);
		Пока ТекДата_ <= НачалоДня(ДатаКон_) Цикл
			Если мсвДат.Найти(ТекДата_) = Неопределено Тогда
				мсвДат.Добавить(ТекДата_);
			КонецЕсли;
			
			ТекДата_ = ТекДата_ + 3600*24;
		КонецЦикла;
	КонецЦикла;
	АвтоДни_ = мсвДат.Количество();
	
	Возврат АвтоДни_;
	
КонецФункции

// Возвращает количество дней в ремонте указанного ТС
//
// Параметры:
//  ТС			 - Справочник.уатТС	 - транспортное средство
//  Организация	 - 					 - 
//  Колонна		 - 					 - 
//  ДатаНач		 - Дата				 - начало периода
//  ДатаКон		 - Дата				 - конец периода
// 
// Возвращаемое значение:
//  Количество - дней в ремонте - Число
//
Функция АвтоДнейВРемонте(ТС, Организация, Колонна, Знач ДатаНач, Знач ДатаКон) Экспорт
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатРемонтныйЛист.Ссылка КАК Ссылка,
	|	уатРемонтныйЛист.ДатаНачала КАК ДатаНачала,
	|	ВЫБОР
	|		КОГДА уатРемонтныйЛист.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|			ТОГДА &ДатаКон
	|		ИНАЧЕ уатРемонтныйЛист.ДатаОкончания
	|	КОНЕЦ КАК ДатаОкончания
	|ИЗ
	|	Документ.уатРемонтныйЛист КАК уатРемонтныйЛист
	|ГДЕ
	|	уатРемонтныйЛист.Проведен
	|	И уатРемонтныйЛист.ТС = &ТС
	|	И НАЧАЛОПЕРИОДА(уатРемонтныйЛист.ДатаНачала, ДЕНЬ) <= &ДатаКон
	|	И (уатРемонтныйЛист.ДатаОкончания = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ НАЧАЛОПЕРИОДА(уатРемонтныйЛист.ДатаОкончания, ДЕНЬ) >= &ДатаНач)");
	Запрос.УстановитьПараметр("ТС",          ТС);
	Запрос.УстановитьПараметр("ДатаНач",     ДатаНач);
	Запрос.УстановитьПараметр("ДатаКон",     Мин(ДатаКон, НачалоДня(ТекущаяДата())));
	
	ВыборкаРЛ = Запрос.Выполнить().Выбрать();
	
	// получение ПЛ для исключения РЛ, пересекающихся с ПЛ
	ЗапросПЛ = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатПутевойЛист.Ссылка,
	|	уатПутевойЛист.ДатаВыезда,
	|	уатПутевойЛист.ДатаВозвращения
	|ИЗ
	|	Документ.уатПутевойЛист КАК уатПутевойЛист
	|ГДЕ
	|	уатПутевойЛист.Проведен
	|	И уатПутевойЛист.Организация = &Организация
	|	И уатПутевойЛист.ТранспортноеСредство = &ТС
	|	И уатПутевойЛист.ДатаВозвращения >= &ДатаНач
	|	И (&ДатаКон = ДАТАВРЕМЯ(1,1,1) ИЛИ уатПутевойЛист.ДатаВыезда <= КОНЕЦПЕРИОДА(&ДатаКон, ДЕНЬ))");
	ЗапросПЛ.УстановитьПараметр("ТС",          ТС);
	ЗапросПЛ.УстановитьПараметр("Организация", Организация);
	ЗапросПЛ.УстановитьПараметр("ДатаНач",     ДатаНач);
	ЗапросПЛ.УстановитьПараметр("ДатаКон",     ДатаКон);
	
	тблПЛ = ЗапросПЛ.Выполнить().Выгрузить();
	
	// Дополнительный запрос для получения колонны ТС на начало периода РЛ
	// можно было бы обойтись без запроса, если бы в РЛ был реквизит Колонна
	ЗапросКолонна = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатМестонахождениеТС.Колонна КАК Колонна,
	|	уатМестонахождениеТС.Период КАК Период
	|ИЗ
	|	РегистрСведений.уатМестонахождениеТС КАК уатМестонахождениеТС
	|ГДЕ
	|	уатМестонахождениеТС.ТС = &ТС
	|
	|УПОРЯДОЧИТЬ ПО
	|	Период");
	ЗапросКолонна.УстановитьПараметр("ТС", ТС);
	тблМестонахождение = ЗапросКолонна.Выполнить().Выгрузить();
	
	мсвДат = Новый Массив();
	Пока ВыборкаРЛ.Следующий() Цикл
		// определяем соответствует ли колонна ТС на момент РЛ колонне из отчета
		КолоннаТС = Неопределено;
		Для Каждого ТекСтрокаКолонна Из тблМестонахождение Цикл
			Если ТекСтрокаКолонна.Период > ВыборкаРЛ.ДатаОкончания Тогда
				Прервать;
			КонецЕсли;
			КолоннаТС = ТекСтрокаКолонна.Колонна;
		КонецЦикла;
		Если КолоннаТС <> Колонна Тогда
			Продолжить;
		КонецЕсли;
		
		ДатаНач_ = Макс(ДатаНач, ВыборкаРЛ.ДатаНачала);
		ДатаКон_ = ?(ДатаКон = '00010101', ВыборкаРЛ.ДатаОкончания, Мин(КонецДня(ДатаКон), ВыборкаРЛ.ДатаОкончания));
		
		ТекДата_ = НачалоДня(ДатаНач_) - 3600*24;
		Пока ТекДата_ < НачалоДня(ДатаКон_) Цикл
			ТекДата_ = ТекДата_ + 3600*24;
			
			Если мсвДат.Найти(ТекДата_) <> Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			// Проверка на пересечение с ПЛ
			// если одновременно введены ПЛ и РЛ, то приоритет отдается ПЛ, и РЛ не учитывается
			флПересечениеСПЛ = Ложь;
			Для Каждого ТекПЛ Из тблПЛ Цикл
				Если ТекДата_ >= НачалоДня(ТекПЛ.ДатаВыезда) И ТекДата_ <= НачалоДня(ТекПЛ.ДатаВозвращения) Тогда
					флПересечениеСПЛ = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если флПересечениеСПЛ Тогда
				Продолжить;
			КонецЕсли;
			
			мсвДат.Добавить(ТекДата_);
		КонецЦикла;
	КонецЦикла;
	
	АвтоДни_ = мсвДат.Количество();
	
	Возврат АвтоДни_;
	
КонецФункции

#КонецОбласти


#Область ОбработчикиСобытий

Процедура ОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка)
	
	уатЗащищенныеФункцииСервер.уатОтчетОбработкаПолученияФормы(ВидФормы, Параметры, ВыбраннаяФорма, ДополнительнаяИнформация, СтандартнаяОбработка);
	
КонецПроцедуры

#КонецОбласти


#КонецЕсли
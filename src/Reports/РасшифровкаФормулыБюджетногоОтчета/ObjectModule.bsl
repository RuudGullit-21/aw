#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	Если Не ПроверитьЗаполнение() Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	НастройкиОтчета = КомпоновщикНастроек.ПолучитьНастройки();
	ДополнительныеСвойства = КомпоновщикНастроек.Настройки.ДополнительныеСвойства;
	
	ФинОтчеты = ФинансоваяОтчетностьСервер;
	
	ДанныеОтчета = Новый ТаблицаЗначений;
	ДанныеОтчета.Колонки.Добавить("ИмяОперанда");
	ДанныеОтчета.Колонки.Добавить("ЗначениеОперанда");
	ДанныеОтчета.Колонки.Добавить("ОписаниеОперанда");
	ДанныеОтчета.Колонки.Добавить("ДопИнформация");
	ДанныеОтчета.Колонки.Добавить("АдресПараметровОтчета");
	ДанныеОтчета.Колонки.Добавить("ИндексСтрокиДанных");
	ДанныеОтчета.Колонки.Добавить("ИмяПоказателя");
	ДанныеОтчета.Колонки.Добавить("НомерПервогоСимвола");
	ДанныеОтчета.Колонки.Добавить("ПорядокРасчета");
	
	
	Если НЕ КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Свойство("АдресПараметровОтчета") Тогда
		Возврат;
	КонецЕсли;
	
	АдресПараметровОтчета = КомпоновщикНастроек.Настройки.ДополнительныеСвойства.АдресПараметровОтчета;
	ДополнительныеСвойства = ПолучитьИзВременногоХранилища(АдресПараметровОтчета);
	ДанныеЯчеек = ПолучитьИзВременногоХранилища(ДополнительныеСвойства.АдресДанныхЯчеек);
	СтрокаДанныхЯчеек = ДанныеЯчеек[ДополнительныеСвойства.ИндексСтрокиДанных];
	
	ВидБюджета = ДополнительныеСвойства.ВидБюджета;
	СтруктураКолонокТаблицыДанных = БюджетнаяОтчетностьСервер.ПолучитьСтруктуруКолонокТаблицыДанныхВидаБюджета(ВидБюджета);
	СтруктураОписанияОтчета = БюджетнаяОтчетностьСервер.ПолучитьСтруктуруОписанияВидаБюджета(ВидБюджета,
																СтруктураКолонокТаблицыДанных, Перечисления.РежимыФормированияБюджетныхОтчетов.Отчет);
	
	СтруктураЯчеек = СтруктураОписанияОтчета.СтруктураЯчеек;
	ПараметрыЯчеек = СтруктураОписанияОтчета.ПараметрыЯчеек;
	
	ДополнительныеСвойства.Вставить("СтруктураЯчеек", СтруктураЯчеек);
	ДополнительныеСвойства.Вставить("ПараметрыЯчеек", ПараметрыЯчеек);
	ДополнительныеСвойства.Вставить("АдресПараметровОтчета", АдресПараметровОтчета);
	
	ФинОтчеты.УстановитьПараметрКомпоновки(НастройкиОтчета, "ИмяПроизводногоПоказателя", 	ИмяПроизводногоПоказателя(СтрокаДанныхЯчеек, ПараметрыЯчеек));
	
	ДанныеШапки = Новый ТаблицаЗначений;
	ДанныеШапки.Колонки.Добавить("Группировка");
	ДанныеШапки.Колонки.Добавить("Значение");
	
	НоваяСтрока = ДанныеШапки.Добавить();
	НоваяСтрока.Группировка = НСтр("en='Параметры отчета:';ru='Параметры отчета:'");
	НоваяСтрока.Значение = ПараметрыОтчета(ДополнительныеСвойства);
	
	НоваяСтрока = ДанныеШапки.Добавить();
	НоваяСтрока.Группировка = НСтр("en='Filter:';ru='Отбор:'");
	НоваяСтрока.Значение = ОтборИГруппировки(СтрокаДанныхЯчеек, ДополнительныеСвойства);
	
	Формула = Формула(СтрокаДанныхЯчеек, ПараметрыЯчеек);
	
	НоваяСтрока = ДанныеШапки.Добавить();
	НоваяСтрока.Группировка = НСтр("en='Formula:';ru='Формула:'");
	НоваяСтрока.Значение = Формула;
	
	НоваяСтрока = ДанныеШапки.Добавить();
	НоваяСтрока.Группировка = НСтр("en='Примечание:';ru='Примечание:'");
	НоваяСтрока.Значение = Примечание(СтрокаДанныхЯчеек, ПараметрыЯчеек);
	
	ДеталиФормулы = ДеталиФормулы(СтрокаДанныхЯчеек, ДанныеЯчеек, Формула, ДополнительныеСвойства, ДанныеОтчета, СтруктураКолонокТаблицыДанных);
	
	НоваяСтрока = ДанныеШапки.Добавить();
	НоваяСтрока.Группировка = НСтр("en='Вычисления:';ru='Вычисления:'");
	НоваяСтрока.Значение = ДеталиФормулы.Вычисление;
	
	НоваяСтрока = ДанныеШапки.Добавить();
	НоваяСтрока.Группировка = НСтр("en='Result:';ru='Результат:'");
	НоваяСтрока.Значение = ДеталиФормулы.Результат;
	
	ВнешниеНаборы = Новый Структура;
	ВнешниеНаборы.Вставить("ДанныеОтчета", ДанныеОтчета);
	ВнешниеНаборы.Вставить("ДанныеШапки", ДанныеШапки);
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиОтчета, ДанныеРасшифровки);
	
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборы, ДанныеРасшифровки, Истина);
	
	ПроцессорВыводаВТабличныйДокумент = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВыводаВТабличныйДокумент.УстановитьДокумент(ДокументРезультат);
	ПроцессорВыводаВТабличныйДокумент.Вывести(ПроцессорКомпоновкиДанных);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Функция Примечание(СтрокаДанныхЯчеек, ПараметрыЯчеек)
	
	ПараметрыЯчейки = ПараметрыЯчеек.Найти(СтрокаДанныхЯчеек.ИндексСтроки, "ИндексСтроки");
	
	Примечание = "";
	Макет = Перечисления.ВидыФормулБюджетирования.ПолучитьМакет("ОписаниеФункций");
	Для Каждого Значение из Метаданные.Перечисления.ВидыФормулБюджетирования.ЗначенияПеречисления Цикл
		ЗначениеПеречисления = Перечисления.ВидыФормулБюджетирования[Значение.Имя];
		ИмяФормулы = Перечисления.ВидыФормулБюджетирования.ИмяФункции(ЗначениеПеречисления);
		Если Найти(ПараметрыЯчейки.Формула, ИмяФормулы) Тогда
			Попытка
				Область = Макет.ПолучитьОбласть(ИмяФормулы);
			Исключение
				Продолжить;
			КонецПопытки;
			Примечание = Примечание + Область.Область(1, 1).Текст + Символы.ПС;
		КонецЕсли;
	КонецЦикла;
	
	Примечание = СокрЛП(Примечание);
	Если ПустаяСтрока(Примечание) Тогда
		Примечание = "-";
	КонецЕсли;
	
	Возврат Примечание;
	
КонецФункции

Процедура ДобавитьСтрокуЗначения(ДанныеЯчеек, СтрокаДанныхЯчеек, ДанныеОтчета, СтрокаЛога, ДополнительныеСвойства)
	Перем СтрокаСсылки;
	
	ПараметрыЯчеек = ДополнительныеСвойства.ПараметрыЯчеек;
	ПараметрыЯчейки = ПараметрыЯчеек.Найти(СтрокаДанныхЯчеек.ИндексСтроки, "ИндексСтроки");
	
	ИмяОперанда = СтрокаЛога.ИмяОперанда;
	
	Если СтрокаЛога.СтрокаОснование = -1 Тогда
		
		// ненайденный операнд
		СтруктураПоиска = Новый Структура("Строка, Колонка");
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, СтрокаДанныхЯчеек);
		
		СтрокиОснование = ДополнительныеСвойства.СтруктураЯчеек.НайтиСтроки(СтруктураПоиска);
		Для Каждого СтрокаОснование из СтрокиОснование Цикл
			ПараметрЯчейки = ДополнительныеСвойства.ПараметрыЯчеек.Найти(СтрокаОснование.ИндексСтроки, "ИндексСтроки");
			Если СтрокаЛога.ИмяОперанда = ПараметрЯчейки.ИмяОперанда Тогда
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		ВидЭлемента = СтрокаОснование.ВидОперанда;
		
		// ячейки таблицы отображаем в квадратных скобках
		Если ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ЯчейкаТаблицы Тогда
			ИмяОперанда = "[" + ИмяОперанда + "]";
		КонецЕсли;
		
	Иначе
		
		СтрокаОснование = ДанныеЯчеек[СтрокаЛога.СтрокаОснование];
		ВидЭлемента = СтрокаЛога.ВидЭлемента;
		
	КонецЕсли;
	
	Если ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ЯчейкаТаблицы Тогда //ссылка на ячейку
		ОписаниеОперанда = НСтр("en='Ссылка на ячейку таблицы';ru='Ссылка на ячейку таблицы'");
		ДопИнформация = "[" + 
		СтрокаОснование.ОперандСтрока.НаименованиеДляПечати + 
		?(ЗначениеЗаполнено(СтрокаОснование.ОперандКолонка), "; " + 
		СтрокаОснование.ОперандКолонка.НаименованиеДляПечати, "") + "]";
	Иначе
		ОписаниеОперанда = Строка(ВидЭлемента);
		ОпределяющийЭлемент = ЭлементОпределяющийЗначениеСтроки(СтрокаОснование, ДополнительныеСвойства.ПараметрыЯчеек, ВидЭлемента);
		
		Показатели = Неопределено;
		Если ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ПоказательБюджетов Тогда
			ОписаниеОперанда = ОписаниеОперанда + " """ + СтрокаОснование.ПоказательБюджетов + """";
			Показатели = ФинансоваяОтчетностьВызовСервера.ЗначениеДополнительногоРеквизита(ОпределяющийЭлемент, "ТипЗначенияПоказателя");
		ИначеЕсли ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.СтатьяБюджетов Тогда
			ОписаниеОперанда = ОписаниеОперанда + " """ + СтрокаОснование.СтатьяБюджетов + """";
		Иначе
			ОписаниеОперанда = ОписаниеОперанда + " """ + ОпределяющийЭлемент.НаименованиеДляПечати + """";
		КонецЕсли;
		
		Если ПараметрыЯчейки.ФлагКоличество Тогда
			ИмяПоказателя = "Количество";
		ИначеЕсли ПараметрыЯчейки.ФлагЗначение Тогда
			ИмяПоказателя = "Значение";
		ИначеЕсли ПараметрыЯчейки.ФлагСумма Тогда
			ИмяПоказателя = "Сумма";
		Иначе
			ВызватьИсключение НСтр("en='Не определен показатель расшифровки';ru='Не определен показатель расшифровки'");
		КонецЕсли;
		
		ДопИнформация = ИмяПоказателя + ?(ПараметрыЯчейки.ОбратныйЗнак, ", (-)", "");
		Если Показатели <> Неопределено Тогда
			ДопИнформация = ДопИнформация + ", " + Показатели;
		КонецЕсли;
	КонецЕсли;
	
	НоваяСтрока = ДанныеОтчета.Добавить();
	НоваяСтрока.ИмяОперанда = ИмяОперанда;
	НоваяСтрока.ЗначениеОперанда = СтрокаЛога.Значение;
	НоваяСтрока.ОписаниеОперанда = ОписаниеОперанда;
	НоваяСтрока.ДопИнформация = ДопИнформация;
	
	ИмяОперандаДляПоиска = ИмяОперанда;
	СимволыПеречисления = Найти(ИмяОперандаДляПоиска, " #");
	Если СимволыПеречисления Тогда
		ИмяОперандаДляПоиска = Сред(ИмяОперандаДляПоиска, 1, СимволыПеречисления - 1);
	КонецЕсли;
	
	НоваяСтрока.НомерПервогоСимвола = Найти(ПараметрыЯчейки.Формула, ИмяОперандаДляПоиска);
	НоваяСтрока.ПорядокРасчета = ДанныеОтчета.Количество();
	
	Если СтрокаЛога.СтрокаОснование <> -1 Тогда
		НоваяСтрока.АдресПараметровОтчета = ДополнительныеСвойства.АдресПараметровОтчета;
		НоваяСтрока.ИндексСтрокиДанных = СтрокаЛога.СтрокаОснование;
		НоваяСтрока.ИмяПоказателя = СтрокаЛога.ИмяПоказателя;
	КонецЕсли;
	
КонецПроцедуры

Функция ДеталиФормулы(СтрокаДанныхЯчеек, ДанныеЯчеек, Формула, ДополнительныеСвойства, ДанныеОтчета, СтруктураКолонок)
	
	ЛогРасчета = Новый Массив;
	ЗначениеВычисления = БюджетнаяОтчетностьСервер.РассчитатьЗначениеЯчейки(
									ДанныеЯчеек, ДополнительныеСвойства.ПараметрыЯчеек,
									БюджетнаяОтчетностьСервер.ПреобразоватьПараметрыДанныхВДанныеПериодов(СтруктураКолонок, ДополнительныеСвойства),
									СтрокаДанныхЯчеек, ДополнительныеСвойства.ИмяПоказателя, , ЛогРасчета);
	
	ПараметрыЯчейки = ДополнительныеСвойства.ПараметрыЯчеек.Найти(СтрокаДанныхЯчеек.ИндексСтроки, "ИндексСтроки");
	ВычисленнаяФормула = Формула;
	
	МассивЗначений = Новый Массив;
	Для Каждого СтрокаЛога из ЛогРасчета Цикл
		МассивЗначений.Добавить(СтрокаЛога.Значение);
		Если Не ТипЗнч(СтрокаЛога.Значение) = Тип("Массив") Тогда //значение учтено в других записях
			ДобавитьСтрокуЗначения(ДанныеЯчеек, СтрокаДанныхЯчеек, ДанныеОтчета, СтрокаЛога, ДополнительныеСвойства);
			ЗначениеДляФормулы = СтрокаЛога.Значение;
		Иначе
			ЗначениеДляФормулы = СтрСоединить(СтрокаЛога.Значение, "; ");
		КонецЕсли;
		ИмяОперанда = "[" + СтрокаЛога.ИмяОперанда + "]";
		ВычисленнаяФормула = СтрЗаменить(ВычисленнаяФормула, ИмяОперанда, ЗначениеДляФормулы);
	КонецЦикла;
	
	Если Найти(ВычисленнаяФормула, "МассивЗначений") Тогда
		Представление = СтрСоединить(МассивЗначений, "; ");
		ВычисленнаяФормула = СтрЗаменить(ВычисленнаяФормула, "МассивЗначений", Представление);
	КонецЕсли;
	
	Возврат Новый Структура("Вычисление, Результат", ВычисленнаяФормула, ЗначениеВычисления);
	
КонецФункции

Функция ПараметрыОтчета(ПараметрыОтчета)
	
	Результат = НСтр("en='Начало периода: %1%2Окончание периода: %3%4Дата актуальности: %5';ru='Начало периода: %1%2Окончание периода: %3%4Дата актуальности: %5'");
	Результат = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(Результат, 
			Формат(ПараметрыОтчета.НачалоПериода, "ДЛФ=D"), Символы.ПС, 
			Формат(ПараметрыОтчета.КонецПериода, "ДЛФ=D"), Символы.ПС,
			Формат(ПараметрыОтчета.ДатаАктуальности, "ДЛФ=D"));
		
	Возврат Результат;
		
КонецФункции

Функция Формула(СтрокаДанныхЯчеек, ПараметрыЯчеек)
	
	ПараметрыЯчейки = ПараметрыЯчеек.Найти(СтрокаДанныхЯчеек.ИндексСтроки, "ИндексСтроки");
	Результат = ПараметрыЯчейки.ПредставлениеФормулы;
	Если ПустаяСтрока(Результат) Тогда
		Результат = ПараметрыЯчейки.Формула;
	КонецЕсли;
	Результат = СтрЗаменить(Результат, "МассивЗначений", НСтр("en=' [Ячейки группы] ';ru=' [Ячейки группы] '"));
	
	ПреобразованнаяФормула = "";
	ЗаменитьКвадратныеСкобки = Ложь;
	Для Сч = 1 по СтрДлина(Результат) Цикл
		Если Сред(Результат, Сч - 4, 5) = "ИТОГ(" Тогда
			ЗаменитьКвадратныеСкобки = Истина;
		КонецЕсли;
		Символ = Сред(Результат, Сч, 1);
		Если ЗаменитьКвадратныеСкобки Тогда
			Если Символ = "[" ИЛИ Символ = "]" Тогда
				Символ = """";
			КонецЕсли;
			Если Символ = "," Тогда
				ЗаменитьКвадратныеСкобки = Ложь;
			КонецЕсли;
		КонецЕсли;
		ПреобразованнаяФормула = ПреобразованнаяФормула + Символ;
	КонецЦикла;
	
	Возврат ПреобразованнаяФормула;
	
КонецФункции

Функция ОтборИГруппировки(ДанныеЯчеек, ДополнительныеСвойства)
	
	СтруктураОписанияОтчета = БюджетнаяОтчетностьСервер.ПолучитьСтруктуруКолонокТаблицыДанныхВидаБюджета(
																			ДополнительныеСвойства.ВидБюджета);
																			
	Группировки = "";
	Для Каждого Измерение из СтруктураОписанияОтчета.Измерения Цикл
		Если ЗначениеЗаполнено(ДанныеЯчеек[Измерение]) Тогда
			Группировки = Группировки + Измерение + ": " + ДанныеЯчеек[Измерение] + Символы.ПС;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого Измерение из СтруктураОписанияОтчета.ВидыАналитик Цикл
		ИмяВида = БюджетнаяОтчетностьСервер.ИмяПоляБюджетногоОтчета(Измерение);
		Если ЗначениеЗаполнено(ДанныеЯчеек[ИмяВида]) Тогда
			Группировки = Группировки + Измерение + ": " + ДанныеЯчеек[ИмяВида] + Символы.ПС;
		КонецЕсли;
	КонецЦикла;
	
	УпорядоченныеПериодичности = Перечисления.Периодичность.УпорядоченныеПериодичности();
	Для Каждого Периодичность из УпорядоченныеПериодичности Цикл
		Если СтруктураОписанияОтчета.Периодичности.Найти(Периодичность) <> Неопределено Тогда
			Значение = ДанныеЯчеек["Период" + Периодичность];
			Если ЗначениеЗаполнено(Значение) Тогда
				ПредставлениеПериода = БюджетированиеКлиентСервер.ПредставлениеПериодаПоДате(Значение, Периодичность);
				Группировки = Группировки + "Период: " + ПредставлениеПериода + Символы.ПС;
				Прервать;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Группировки = СокрЛП(Группировки);
	
	Возврат СокрЛП(Группировки);
	
КонецФункции

Функция ЭлементОпределяющийЗначениеСтроки(СтрокаДанныхЯчеек, ПараметрыЯчеек, ВидЭлемента)
	
	ПараметрыЯчейки = ПараметрыЯчеек.Найти(СтрокаДанныхЯчеек.ИндексСтроки, "ИндексСтроки");
	
	Если Не ПараметрыЯчейки.СложнаяТаблица Тогда
		
		Если СтрокаДанныхЯчеек.Строка.ВидЭлемента = ВидЭлемента Тогда
			Возврат СтрокаДанныхЯчеек.Строка;
		Иначе
			Возврат СтрокаДанныхЯчеек.Колонка;
		КонецЕсли;
		
	Иначе
		
		Если СтрокаДанныхЯчеек.Строка.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе Тогда
			Возврат СтрокаДанныхЯчеек.Строка;
		ИначеЕсли СтрокаДанныхЯчеек.Колонка.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.ФормулаПоГруппе Тогда
			Возврат СтрокаДанныхЯчеек.Колонка;
		КонецЕсли;
		
		Если СтрокаДанныхЯчеек.Строка.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Группа Тогда
			Возврат СтрокаДанныхЯчеек.Строка;
		ИначеЕсли СтрокаДанныхЯчеек.Колонка.ВидЭлемента = Перечисления.ВидыЭлементовФинансовогоОтчета.Группа Тогда
			Возврат СтрокаДанныхЯчеек.Колонка;
		КонецЕсли;
		
		Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                      |	ВЫРАЗИТЬ(&Строка КАК Справочник.ЭлементыФинансовыхОтчетов).Владелец КАК ВидБюджета,
		                      |	&Строка КАК Строка,
		                      |	&Колонка КАК Колонка
		                      |ПОМЕСТИТЬ Фильтр
		                      |
		                      |ИНДЕКСИРОВАТЬ ПО
		                      |	ВидБюджета,
		                      |	Строка,
		                      |	Колонка
		                      |;
		                      |
		                      |////////////////////////////////////////////////////////////////////////////////
		                      |ВЫБРАТЬ РАЗРЕШЕННЫЕ
		                      |	ЭлементыФинансовыхОтчетовЭлементыТаблицы.Элемент,
		                      |	ЭлементыФинансовыхОтчетов.НаименованиеДляПечати
		                      |ИЗ
		                      |	Справочник.ЭлементыФинансовыхОтчетов КАК ЭлементыФинансовыхОтчетов
		                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.ЭлементыФинансовыхОтчетов.ЭлементыТаблицы КАК ЭлементыФинансовыхОтчетовЭлементыТаблицы
		                      |		ПО ЭлементыФинансовыхОтчетов.Ссылка = ЭлементыФинансовыхОтчетовЭлементыТаблицы.Ссылка
		                      |		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Фильтр КАК Фильтр
		                      |		ПО ЭлементыФинансовыхОтчетов.Владелец = Фильтр.ВидБюджета
		                      |			И (ЭлементыФинансовыхОтчетовЭлементыТаблицы.Строка = Фильтр.Строка)
		                      |			И (ЭлементыФинансовыхОтчетовЭлементыТаблицы.Колонка = Фильтр.Колонка)");
		
		Запрос.УстановитьПараметр("Строка", СтрокаДанныхЯчеек.Строка);
		Запрос.УстановитьПараметр("Колонка", СтрокаДанныхЯчеек.Колонка);
		Выборка = Запрос.Выполнить().Выбрать();
		Выборка.Следующий();
		
		Возврат Выборка.Элемент;
	КонецЕсли;
	
КонецФункции

Функция ИмяПроизводногоПоказателя(СтрокаДанныхЯчеек, ПараметрыЯчеек)
	
	Элемент = ЭлементОпределяющийЗначениеСтроки(СтрокаДанныхЯчеек, ПараметрыЯчеек, 
									Перечисления.ВидыЭлементовФинансовогоОтчета.ПроизводныйПоказатель);
	Возврат Элемент.НаименованиеДляПечати;
	
КонецФункции

#КонецОбласти

#КонецЕсли


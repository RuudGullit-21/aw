#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныйПрограммныйИнтерфейс

// Настройки общей формы отчета подсистемы "Варианты отчетов".
//
// Параметры:
//   Форма - УправляемаяФорма - Форма отчета.
//   КлючВарианта - Строка - Имя предопределенного варианта отчета или уникальный идентификатор пользовательского.
//   Настройки - Структура - см. возвращаемое значение ОтчетыКлиентСервер.ПолучитьНастройкиОтчетаПоУмолчанию().
//
Процедура ОпределитьНастройкиФормы(Форма, КлючВарианта, Настройки) Экспорт
	Настройки.События.ПриСозданииНаСервере = Ложь;
	Настройки.События.ПриОпределенииПараметровВыбора = Истина;
	Настройки.Печать.ПолеСверху = 5;
	Настройки.Печать.ПолеСлева = 5;
	Настройки.Печать.ПолеСнизу = 5;
	Настройки.Печать.ПолеСправа = 5;
	Настройки.ФормироватьСразу = Ложь;
КонецПроцедуры

// Вызывается в форме отчета перед выводом настройки.
//   Подробнее - см. ФормаОтчетаПереопределяемый.ПриОпределенииПараметровВыбора().
//
Процедура ПриОпределенииПараметровВыбора(Форма, СвойстваНастройки) Экспорт
	Если СвойстваНастройки.ОписаниеТипов.СодержитТип(Тип("СправочникСсылка.Пользователи")) Тогда
		СвойстваНастройки.ОграничиватьВыборУказаннымиЗначениями = Истина;
		СвойстваНастройки.ЗначенияДляВыбора.Очистить();
		СвойстваНастройки.ЗапросЗначенийВыбора.Текст =
			"ВЫБРАТЬ Ссылка ИЗ Справочник.Пользователи
			|ГДЕ НЕ ПометкаУдаления И НЕ Недействителен И НЕ Служебный";
	КонецЕсли;
КонецПроцедуры

#КонецОбласти	
	
#Область ПрограммныйИнтерфейс
	
Функция ПолучитьГеографическиеЗоны(ГруппаГеографическихЗон)
	Возврат ItobГеографическиеЗоныВызовСервера.ПолучитьГеографическиеЗоныПоГруппе(ГруппаГеографическихЗон);
КонецФункции // ПолучитьГеографическиеЗоны()

Функция НайтиГеографическуюЗону(Широта, Долгота, ТаблицаГеографическихЗон, текГеозона)
	
	Если НЕ текГеозона = Неопределено Тогда	
		Для каждого СтрЗоны Из ТаблицаГеографическихЗон.НайтиСтроки(Новый Структура("ГеографическаяЗона", текГеозона)) Цикл
			ПараметрыГеозоны = ItobГеографическиеЗоны.ПараметрыПроверяемойЗоны();
			ПараметрыГеозоны.ШиротыЗоны = СтрЗоны.МассивУ;
			ПараметрыГеозоны.ДолготыЗоны = СтрЗоны.МассивХ;
			Если ItobГеографическиеЗоны.ТочкаВГеозоне(Широта, Долгота, ПараметрыГеозоны) Тогда
				Возврат СтрЗоны.ГеографическаяЗона;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;
	
	Для каждого СтрЗоны Из ТаблицаГеографическихЗон Цикл	
		ПараметрыГеозоны = ItobГеографическиеЗоны.ПараметрыПроверяемойЗоны();
		ПараметрыГеозоны.ШиротыЗоны = СтрЗоны.МассивУ;
		ПараметрыГеозоны.ДолготыЗоны = СтрЗоны.МассивХ;
		Если ItobГеографическиеЗоны.ТочкаВГеозоне(Широта, Долгота, ПараметрыГеозоны) Тогда
			Возврат СтрЗоны.ГеографическаяЗона;
		КонецЕсли;	
	КонецЦикла;
	
	
	Возврат Неопределено;
	
КонецФункции

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

Процедура ПриКомпоновкеРезультата(ДокументРезультат, ДанныеРасшифровки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	СКД = ЭтотОбъект.СхемаКомпоновкиДанных;
	
	ЗаменитьТекстЗапроса(СКД);
	
	Настройки = КомпоновщикНастроек.ПолучитьНастройки();
	
	НачПериода = '00010101';
	КонПериода = '00010101';
	
	Для каждого ЭлементыПараметрыДанных Из Настройки.ПараметрыДанных.Элементы Цикл
		
		Если Строка(ЭлементыПараметрыДанных.Параметр) = "ДатаНачала" Тогда
			НачПериода = ЭлементыПараметрыДанных.Значение.Дата;
		ИначеЕсли Строка(ЭлементыПараметрыДанных.Параметр) = "ДатаОкончания" Тогда
			КонПериода = ЭлементыПараметрыДанных.Значение.Дата;
		КонецЕсли;		
	
	КонецЦикла;	
	
	Если НачПериода = '00010101' Тогда
		ItobРаботаС_БСП_КлиентСервер.СообщитьПользователю(НСтр("ru = 'Не указано начало периода отчета'"));
		Возврат;
	КонецЕсли;
	
	Если КонПериода = '00010101' Тогда
		ItobРаботаС_БСП_КлиентСервер.СообщитьПользователю(НСтр("ru = 'Не указан конец периода отчета'"));
		Возврат;
	КонецЕсли;
	
	ТаблицаГеографическихЗон = ПолучитьГеографическиеЗоны(Неопределено);
	
	НастройкиДляВыборкиОбъектов = КомпоновщикНастроек.ПолучитьНастройки();
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	ДанныеРасшифровки = Новый ДанныеРасшифровкиКомпоновкиДанных;
	МакетКомпоновки =  КомпоновщикМакета.Выполнить(СКД,НастройкиДляВыборкиОбъектов,,,
	                      Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
	
	ТЗ = Новый ТаблицаЗначений;
	ТЗ.Колонки.Добавить("Объект");
	ТЗ.Колонки.Добавить("НомерРейса");
	ТЗ.Колонки.Добавить("ВсегоРейсов");
	ТЗ.Колонки.Добавить("ПродолжительностьПребывания");
	ТЗ.Колонки.Добавить("ПродолжительностьПредставление");
	ТЗ.Колонки.Добавить("НачДата");
	ТЗ.Колонки.Добавить("КонДата");
	ТЗ.Колонки.Добавить("Пробег");
	ТЗ.Колонки.Добавить("ЗонаВъезда");
	ТЗ.Колонки.Добавить("ЗонаВыезда");
			
	ВнешниеНаборыДанных = Новый Структура("ТабДанных", ТЗ);
	
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки, ВнешниеНаборыДанных);
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ТабТСИЗон = ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
	
	СостНетДанных = Перечисления.ItobСостоянияТерминалов.НетДанных;
	
	ТабТС = ТабТСИЗон.Скопировать();
	ТабТС.Свернуть("ОбъектТС");
	МассивОбъектов = ТабТС.ВыгрузитьКолонку("ОбъектТС");
	
	ТабЗоныВъезда = ТабТСИЗон.Скопировать();
	ТабЗоныВъезда.Свернуть("ЗонаВъезда");
	МассивЗонВъезда = ТабЗоныВъезда.ВыгрузитьКолонку("ЗонаВъезда");
	
	ТабЗоныВыезда = ТабТСИЗон.Скопировать();
	ТабЗоныВыезда.Свернуть("ЗонаВыезда");
	МассивЗонВыезда = ТабЗоныВыезда.ВыгрузитьКолонку("ЗонаВыезда");
	
	ТаблицаЗонВъезда = ТаблицаГеографическихЗон.Скопировать();
	МассивУд = Новый Массив;
	Для Каждого Стр Из ТаблицаЗонВъезда Цикл
		
		Если МассивЗонВъезда.Найти(Стр.ГеографическаяЗона) = Неопределено Тогда
			МассивУд.Добавить(Стр);			
		КонецЕсли;
		
	КонецЦикла;
	Для Каждого Эл Из МассивУд Цикл
		
		ТаблицаЗонВъезда.Удалить(Эл);
		
	КонецЦикла;
	
	ТаблицаЗонВыезда = ТаблицаГеографическихЗон.Скопировать();
	МассивУд = Новый Массив;
	Для Каждого Стр Из ТаблицаЗонВыезда Цикл
		
		Если МассивЗонВыезда.Найти(Стр.ГеографическаяЗона) = Неопределено Тогда
			МассивУд.Добавить(Стр);			
		КонецЕсли;
		
	КонецЦикла;
	Для Каждого Эл Из МассивУд Цикл
		
		ТаблицаЗонВыезда.Удалить(Эл);
		
	КонецЦикла;
	
	Для Каждого Элем Из МассивОбъектов Цикл
		
		Расстояние = 0;
		НачДата = Неопределено;
		
		Если НЕ ЗначениеЗаполнено(Элем) Тогда
			Продолжить;
		ИначеЕсли Элем.ЭтоГруппа Тогда 			
			Продолжить;
		Иначе
			ОбъектСсылка = Элем.Ссылка;
		КонецЕсли;
		
		ТекНачалоПериода = НачПериода;
		ТекКонецПериода = КонПериода;
		
		Маршрут = ItobОперативныйМониторинг.СформироватьМаршрутОбъектаМониторинга(ОбъектСсылка, ТекНачалоПериода, ТекКонецПериода);
		
		текГеозона = Неопределено;
		НомерРейса = 1;
		
		Для Счетчик = 0 По Маршрут.Количество() - 1 Цикл					
			
			Если Маршрут[Счетчик].Широта=0 ИЛИ Маршрут[Счетчик].Долгота=0
				ИЛИ Маршрут[Счетчик].Состояние = СостНетДанных Тогда
				Продолжить;							
			КонецЕсли;	
			
			новГеозонаВыезда = НайтиГеографическуюЗону(Маршрут[Счетчик].Широта, Маршрут[Счетчик].Долгота, ТаблицаЗонВыезда, текГеозона);
			
			Если текГеозона = Неопределено Тогда
				Если новГеозонаВыезда <> Неопределено Тогда
					// Первое вхождение в геозону.
					текГеозона = новГеозонаВыезда;
				КонецЕсли;
				Продолжить;
			КонецЕсли;
			
			Если текГеозона = новГеозонаВыезда Тогда
				// Мы все еще в той зоне в которую вошли.
				Продолжить;
			КонецЕсли;
			
			// Если мы тут значит вышли из зоны.
			новГеозонаВъезда = НайтиГеографическуюЗону(Маршрут[Счетчик].Широта, Маршрут[Счетчик].Долгота, ТаблицаЗонВъезда, текГеозона);
			
			Если новГеозонаВъезда = Неопределено Тогда
				// Вышли из одной зоны, а в другую еще не дошли.
				НачДата = ?(НачДата = Неопределено, Маршрут[Счетчик].Период, НачДата);
				Расстояние = Расстояние + Маршрут[Счетчик].Пробег;
			ИначеЕсли текГеозона <> новГеозонаВъезда Тогда
				// Вход в географическую зону
				
				НовСтрока = ТЗ.Добавить();
				НовСтрока.НомерРейса 	= НомерРейса;
				НовСтрока.ЗонаВыезда 	= текГеозона;
				НовСтрока.Объект        = ОбъектСсылка;
				// Если перешли сразу из одной зоны в другую, без точек вне зон, то берем пред. период.
				НовСтрока.НачДата       = ?(НачДата = Неопределено, Маршрут[Счетчик - 1].Период, НачДата);
				НовСтрока.ЗонаВъезда 	= новГеозонаВъезда;
				НовСтрока.КонДата 		= Маршрут[Счетчик].Период;
				НовСтрока.Пробег 		= (Расстояние + Маршрут[Счетчик].Пробег) / 1000;
				
				НомерРейса = НомерРейса + 1;
				
				Расстояние = 0;
				НачДата = Неопределено;
				ТекГеозона = НайтиГеографическуюЗону(Маршрут[Счетчик].Широта, Маршрут[Счетчик].Долгота, ТаблицаЗонВыезда, текГеозона);
			КонецЕсли;
			
		КонецЦикла;
		
		Для Каждого Стр Из ТЗ Цикл
			
			Если Не ЗначениеЗаполнено(Стр.ВсегоРейсов) Тогда
				Стр.ВсегоРейсов = Строка(НомерРейса - 1);
			КонецЕсли;
			
		КонецЦикла;
		
	КонецЦикла;
	
	Для каждого СтрокаТЗ Из ТЗ Цикл
		
		Если СтрокаТЗ.КонДата <> '00010101' И СтрокаТЗ.КонДата <> '00010101' Тогда
			СтрокаТЗ.ПродолжительностьПребывания = СтрокаТЗ.КонДата-СтрокаТЗ.НачДата;
			СтрокаТЗ.ПродолжительностьПредставление = ItobОперативныйМониторингКлиентСервер.ПредставлениеВремени(СтрокаТЗ.КонДата-СтрокаТЗ.НачДата);
			
		Иначе
			СтрокаТЗ.ПродолжительностьПребывания = -1;
			СтрокаТЗ.ПродолжительностьПредставление = "";
		
		КонецЕсли;		
		
	КонецЦикла;
	
	
	// Отбор (чтобы не выводил лишние строки)
	НовыйЭлементОтбора = Настройки.Отбор.Элементы.Добавить( Тип("ЭлементОтбораКомпоновкиДанных"));
	НовыйЭлементОтбора.Использование = Истина;
	НовыйЭлементОтбора.ЛевоеЗначение = Настройки.Отбор.ДоступныеПоляОтбора.Элементы.Найти
	                                                 ("ПродолжительностьПребывания").Поле;
	НовыйЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	НовыйЭлементОтбора.ПравоеЗначение = 0;
	
	ВнешниеНаборыДанных = Новый Структура("ТабДанных",ТЗ);
	МакетКомпоновки =  КомпоновщикМакета.Выполнить(СКД, Настройки, ДанныеРасшифровки,,
	Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,ВнешниеНаборыДанных,ДанныеРасшифровки);	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	
	МакетКомпоновки =  КомпоновщикМакета.Выполнить(СКД,Настройки,ДанныеРасшифровки);
	ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновки,ВнешниеНаборыДанных,ДанныеРасшифровки);		
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВТабличныйДокумент;
	ПроцессорВывода.УстановитьДокумент(ДокументРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);

	
КонецПроцедуры

#КонецОбласти 

#Область СлужебныеПроцедурыИФункции

Процедура ЗаменитьТекстЗапроса(СКД)
	
	ТекстЗапроса = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ItobПривязкиТрекеров.Объект КАК ОбъектТС,
	|	ЗоныВъезда.Ссылка КАК ЗонаВъезда,
	|	ЗоныВыезда.Ссылка КАК ЗонаВыезда
	|ИЗ
	|	РегистрСведений.ItobПривязкиТрекеров КАК ItobПривязкиТрекеров,
	|	Справочник.ItobГеографическиеЗоны КАК ЗоныВъезда,
	|	Справочник.ItobГеографическиеЗоны КАК ЗоныВыезда";	
	
	ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "ItobГеографическиеЗоны", ItobВызовСервераПовтИсп.ПолучитьИмяОбъекта("ГеографическиеЗоны"));	
	
	СКД.НаборыДанных.НаборДанныхОбъект.Запрос = ТекстЗапроса;
	
КонецПроцедуры
 
#КонецОбласти 

#КонецЕсли

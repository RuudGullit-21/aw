
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Автотест = Истина;
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("НачалоПериода") Тогда
		ДатаНач = Параметры.НачалоПериода;
	КонецЕсли;
	Если Параметры.Свойство("КонецПериода") Тогда
		ДатаКон = Параметры.КонецПериода;
	КонецЕсли;
	Если Параметры.Свойство("СсылкаОснование") Тогда
		ДокументОснованиеИмя = Параметры.СсылкаОснование.Метаданные().Имя;
	КонецЕсли;
	
	ВариантПоставкиСТД = уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД();
	ВариантПоставкиКОРП = уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Автотест Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если ВладелецФормы = Неопределено Тогда
		Отказ = Истина;
		Сообщить(НСтр("en='Immediate opening for this object is prohibited!';ru='Непосредственное открытие для данного объекта запрещено!'"));
		Возврат;
	ИначеЕсли НЕ ВладелецФормы.Объект.Свойство("ДоговорКонтрагента")
		ИЛИ НЕ ЗначениеЗаполнено(ВладелецФормы.Объект.ДоговорКонтрагента) Тогда
		Отказ = Истина;
		Сообщить(НСтр("ru='Для заполнения по услугам в документе необходимо указать договор контрагента.'"));
		Возврат;
	КонецЕсли;
	
	Если ДатаНач = '00010101' Тогда
		Попытка
			ДатаНач = ВладелецФормы.Объект.ДатаНач;
		Исключение
			ДатаНач = НачалоМесяца(ВладелецФормы.Объект.Дата);
		КонецПопытки;
	КонецЕсли;
	Если ДатаКон = '00010101' Тогда
		Попытка
			ДатаКон = ВладелецФормы.Объект.ДатаКон;
		Исключение
			ДатаКон = ВладелецФормы.Объект.Дата;
		КонецПопытки;
	КонецЕсли;
	
	ДатаОстаткиНа = ВладелецФормы.Объект.Дата;
	НовыйДокумент = ВладелецФормы.Объект.Ссылка.Пустая();
	
	Если ДокументОснованиеИмя = "уатАктКС3_стм"
		ИЛИ ДокументОснованиеИмя = "уатРеализацияУслуг"
		ИЛИ ДокументОснованиеИмя = "уатСчетНаОплатуПокупателю" Тогда
		ПолучательУслуг = ПредопределенноеЗначение("Перечисление.уатПолучателиУслуг.Контрагент");
	Иначе
		ПолучательУслуг = ПредопределенноеЗначение("Перечисление.уатПолучателиУслуг.НашаОрганизация");
	КонецЕсли;
	
	Если ВладелецФормы.Объект.Свойство("Организация") Тогда 
		ДокументОснование_Организация = ВладелецФормы.Объект.Организация;
	КонецЕсли;
	Если ВладелецФормы.Объект.Свойство("ДоговорКонтрагента") Тогда 
		ДокументОснование_ДоговорКонтрагента = ВладелецФормы.Объект.ДоговорКонтрагента;
	КонецЕсли;
	Если ВладелецФормы.Объект.Свойство("Дата") Тогда 
		ДокументОснование_Дата = ВладелецФормы.Объект.Дата;
	КонецЕсли;
	Если ВладелецФормы.Объект.Свойство("ВалютаДокумента") Тогда 
		ДокументОснование_ВалютаДокумента = ВладелецФормы.Объект.ВалютаДокумента;
	КонецЕсли;
	Если ВладелецФормы.Объект.Свойство("КратностьВзаиморасчетов") Тогда 
		ДокументОснование_КратностьВзаиморасчетов = ВладелецФормы.Объект.КратностьВзаиморасчетов;
	Иначе 
		ДокументОснование_КратностьВзаиморасчетов = 1;
	КонецЕсли;
	Если ВладелецФормы.Объект.Свойство("КурсВзаиморасчетов") Тогда 
		ДокументОснование_КурсВзаиморасчетов = ВладелецФормы.Объект.КурсВзаиморасчетов;
	Иначе 
		ДокументОснование_КурсВзаиморасчетов = 1;
	КонецЕсли;
	Если ВладелецФормы.Объект.Свойство("ОбъектСтроительства") Тогда 
		ДокументОснование_ОбъектСтроительства = ВладелецФормы.Объект.ОбъектСтроительства;
	КонецЕсли;
	Если ВладелецФормы.Объект.Свойство("Контрагент") Тогда 
		ДокументОснование_Контрагент = ВладелецФормы.Объект.Контрагент;
	КонецЕсли;
	Если ВладелецФормы.Объект.Свойство("Перевозчик") Тогда 
		ДокументОснование_Перевозчик = ВладелецФормы.Объект.Перевозчик;
	КонецЕсли;
	
	ВосстановитьНастройки();
	
	НастроитьКомпоновщикОтбора();
	ОтобразитьИнформациюПоНастройкам();
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	СохранитьОтборКомпоновки();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ЗаписьНастроекЗаполненияПоУслугам" Тогда
		СохранитьОтборКомпоновки();
		ВосстановитьНастройки();
		НастроитьКомпоновщикОтбора();
		ОтобразитьИнформациюПоНастройкам();
		УстановитьВидимость();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НастройкаПериода(Команда)
	ДиалогПериода = Новый ДиалогРедактированияСтандартногоПериода();
	ДиалогПериода.Период.ДатаНачала = ДатаНач;
	ДиалогПериода.Период.ДатаОкончания = ДатаКон;
	ДиалогПериода.Показать(Новый ОписаниеОповещения("НастройкаПериодаЗавершение", ЭтотОбъект));
КонецПроцедуры

&НаКлиенте
Процедура НастройкаПериодаЗавершение(Период, ДополнительныеПараметры) Экспорт
	Если Период = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ДатаНач = Период.ДатаНачала;
	ДатаКон = Период.ДатаОкончания;
КонецПроцедуры

&НаКлиенте
Процедура Заполнить(Команда)
	флЗаполнитьНевыставленными = ЗаполнитьНевыставленными(ШаблонЗаполнения);
	
	Если НЕ флЗаполнитьНевыставленными И (ДатаНач = '00010101' Или ДатаКон = '00010101') Тогда
		ПоказатьПредупреждение(Неопределено, "Некорректный период заполнения!");
		Возврат;
	ИначеЕсли флЗаполнитьНевыставленными И ДатаОстаткиНа = '00010101' Тогда
		ПоказатьПредупреждение(Неопределено, "Некорректная дата заполнения!");
		Возврат;
	КонецЕсли;
	
	// установка отчетного периода в документе
	Если НЕ флЗаполнитьНевыставленными Тогда
		Попытка
			ВладелецФормы.Объект.ДатаНач = ДатаНач;
		Исключение
		КонецПопытки;
		Попытка
			ВладелецФормы.Объект.ДатаКон = ДатаКон;
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	Если СсылкаОснованиеЭтоРеализацияУслуг() ИЛИ СсылкаОснованиеЭтоСчетНаОплатуПокупателю()
		ИЛИ СсылкаОснованиеЭтоПоступлениеУслуг() ИЛИ СсылкаОснованиеЭтоСчетНаОплатуПоставщика()
		Или СсылкаОснованиеЭтоРеестрПеревозок() Тогда
		
		мсвУслуги = ЗаполнитьСервер();
		Закрыть(мсвУслуги);
		
	ИначеЕсли СсылкаОснованиеЭтоАктКС3() Тогда 
		
		мсвДанныеАктаКС3 = ПолучитьДанныеДляАктаКС3();
		Закрыть(мсвДанныеАктаКС3);
		
	Иначе
		Закрыть(Неопределено);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьНастройкуПоДоговору(Команда)
	ПараметрыФормы = Новый Структура("ЗначенияЗаполнения",
		Новый Структура("Контрагент, Договор",
		ДокументОснование_Контрагент, ДокументОснование_ДоговорКонтрагента));
	ОткрытьФорму("РегистрСведений.уатНастройкиЗаполненияПоУслугам.Форма.ФормаЗаписи",
		ПараметрыФормы, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ВыбратьНастройкуПоДоговору(Команда)
	ПараметрыФормы = Новый Структура("Ключ",
		КлючЗаписиРегистраНастроек(ДокументОснование_Контрагент, ДокументОснование_ДоговорКонтрагента));
	ОткрытьФорму("РегистрСведений.уатНастройкиЗаполненияПоУслугам.Форма.ФормаЗаписи",
		ПараметрыФормы, ЭтаФорма,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ВсеНастройкиЗаполнения(Команда)
	ОткрытьФорму("РегистрСведений.уатНастройкиЗаполненияПоУслугам.Форма.ФормаСписка");
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура НастроитьКомпоновщикОтбора()
	
	Если ЗаполнитьНевыставленными(ШаблонЗаполнения) Тогда
		Если СсылкаОснованиеЭтоРеестрПеревозок() И ВариантПоставкиКОРП И УчитыватьДанныеРекламаций(ШаблонЗаполнения) Тогда
			// Вариант 3 - аналог варианта 1, но с учетом рекламаций. Не подходит для редакций СТД и ПРОФ
			СхемаКомпоновкиДанных = ПолучитьОбщийМакет("уатКомпоновкаДанныхЗаполнениеСчетовАктов3");
		ИначеЕсли СсылкаОснованиеЭтоРеализацияУслуг() Или СсылкаОснованиеЭтоСчетНаОплатуПокупателю()
				Или СсылкаОснованиеЭтоПоступлениеУслуг() Или СсылкаОснованиеЭтоСчетНаОплатуПоставщика()
				Или СсылкаОснованиеЭтоРеестрПеревозок() Тогда
			СхемаКомпоновкиДанных = ПолучитьОбщийМакет("уатКомпоновкаДанныхЗаполнениеСчетовАктов1");
			
		ИначеЕсли СсылкаОснованиеЭтоАктКС3() Тогда 
			СхемаКомпоновкиДанных = ПолучитьОбщийМакет("уатКомпоновкаДанныхЗаполнениеСчетовАктовКС3_1");
		КонецЕсли;
		
	Иначе
		Если СсылкаОснованиеЭтоРеестрПеревозок() И ВариантПоставкиКОРП И УчитыватьДанныеРекламаций(ШаблонЗаполнения) Тогда
			// Вариант 4 - аналог варианта 2, но с учетом рекламаций. Не подходит для редакций СТД и ПРОФ
			СхемаКомпоновкиДанных = ПолучитьОбщийМакет("уатКомпоновкаДанныхЗаполнениеСчетовАктов4");
		ИначеЕсли СсылкаОснованиеЭтоРеализацияУслуг() Или СсылкаОснованиеЭтоСчетНаОплатуПокупателю()
				Или СсылкаОснованиеЭтоПоступлениеУслуг() Или СсылкаОснованиеЭтоСчетНаОплатуПоставщика()
				Или СсылкаОснованиеЭтоРеестрПеревозок() Тогда
			СхемаКомпоновкиДанных = ПолучитьОбщийМакет("уатКомпоновкаДанныхЗаполнениеСчетовАктов2");
			
		ИначеЕсли СсылкаОснованиеЭтоАктКС3() Тогда
			СхемаКомпоновкиДанных = ПолучитьОбщийМакет("уатКомпоновкаДанныхЗаполнениеСчетовАктовКС3_2");
		КонецЕсли;
	КонецЕсли;
	
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	
	КомпоновщикНастроекОтбора.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных));
	КомпоновщикНастроекОтбора.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	ВосстановитьОтборКомпоновки(СхемаКомпоновкиДанных);
	
	Если ЗначениеЗаполнено(ДокументОснование_ОбъектСтроительства) Тогда
		Если СсылкаОснованиеЭтоАктКС3() Тогда 
			флОтборУстановлен = Ложь;
			Для Каждого ТекНастройкаОтбора Из КомпоновщикНастроекОтбора.Настройки.Отбор.Элементы Цикл 
				Если флОтборУстановлен Тогда
					Прервать;
				КонецЕсли;
				
				Если ТекНастройкаОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОбъектСтроительства") Тогда 
					ТекНастройкаОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
					ТекНастройкаОтбора.ПравоеЗначение = ДокументОснование_ОбъектСтроительства;
					ТекНастройкаОтбора.Использование  = Истина;
					
					флОтборУстановлен = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если Не флОтборУстановлен Тогда 
				элОтбора = КомпоновщикНастроекОтбора.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				элОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
				элОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ОбъектСтроительства");
				элОтбора.ПравоеЗначение = ДокументОснование_ОбъектСтроительства;
				элОтбора.Использование  = Истина;
			КонецЕсли;
		КонецЕсли;
		
		Если СсылкаОснованиеЭтоРеализацияУслуг() Тогда
			флОтборУстановлен = Ложь;
			Для Каждого ТекНастройкаОтбора Из КомпоновщикНастроекОтбора.Настройки.Отбор.Элементы Цикл 
				Если флОтборУстановлен Тогда
					Прервать;
				КонецЕсли;
				
				Если ТекНастройкаОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("ОбъектСтроительства") Тогда 
					ТекНастройкаОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
					ТекНастройкаОтбора.ПравоеЗначение = ДокументОснование_ОбъектСтроительства;
					ТекНастройкаОтбора.Использование  = Истина;
					
					флОтборУстановлен = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьПараметрКомпоновки(МакетКомпоновки, ИмяПараметра, ЗначениеПараметра)
	
	ПараметрКомпоновкиДанных = МакетКомпоновки.ЗначенияПараметров.Добавить();
	ПараметрКомпоновкиДанных.Имя      = ИмяПараметра;
	ПараметрКомпоновкиДанных.Значение = ЗначениеПараметра;
	
КонецПроцедуры

&НаСервере
Функция ЗаполнитьСервер()
	
	ОрганизацияПользователя = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
		ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнаяОрганизация");
		
	Если НЕ ВариантПоставкиСТД Тогда
		флМноговалютныйУчет = ПолучитьФункциональнуюОпцию("уатМноговалютныйУчет");
	КонецЕсли;
		
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	
	Макет = КомпоновщикМакета.Выполнить(
		ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных),
		КомпоновщикНастроекОтбора.ПолучитьНастройки(),
		,
		,
		Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений")
	);
	   
	// установка параметров
	Если ЗаполнитьНевыставленными(ШаблонЗаполнения) Тогда
		Если НовыйДокумент Тогда
			мДатаКон = КонецДня(ДокументОснование_Дата);
		Иначе
			мДатаКон = Новый Граница(ДокументОснование_Дата, ВидГраницы.Исключая);
		КонецЕсли;
	Иначе
		мДатаКон = КонецДня(ДатаКон);
	КонецЕсли;
	
	ДобавитьПараметрКомпоновки(Макет, "НачПериода", ДатаНач);
	ДобавитьПараметрКомпоновки(Макет, "КонПериода", мДатаКон);
	ДобавитьПараметрКомпоновки(Макет, "ПоЗаказамГрузоотправителей", ШаблонЗаполнения.ИспользоватьДанныеЗаказНаТС);
	ДобавитьПараметрКомпоновки(Макет, "ПоТТД", ШаблонЗаполнения.ИспользоватьДанныеТТД);
	ДобавитьПараметрКомпоновки(Макет, "ПоКорректировке", ШаблонЗаполнения.ИспользоватьДанныеКорректировкаЗаписей);
	ДобавитьПараметрКомпоновки(Макет, "Организация", ДокументОснование_Организация);
	ДобавитьПараметрКомпоновки(Макет, "Контрагент", ДокументОснование_ДоговорКонтрагента.Владелец);
	ДобавитьПараметрКомпоновки(Макет, "ДоговорКонтрагента", ДокументОснование_ДоговорКонтрагента);
	ДобавитьПараметрКомпоновки(Макет, "ВидСортировки", ШаблонЗаполнения.СортировкаЗаказов);
	ДобавитьПараметрКомпоновки(Макет, "ПолучательУслуг", ПолучательУслугПоДокументу());
	Если НЕ ВариантПоставкиСТД Тогда
		ДобавитьПараметрКомпоновки(Макет, "ПоМаршрутнымЛистам",   ШаблонЗаполнения.ИспользоватьДанныеМаршрутныйЛист);
		ДобавитьПараметрКомпоновки(Макет, "ПоЗаказамПеревозчику", ШаблонЗаполнения.ИспользоватьДанныеЗаказПеревозчику);
		ДобавитьПараметрКомпоновки(Макет, "ПоРекламациям",        ШаблонЗаполнения.ИспользоватьДанныеРекламаций);
	КонецЕсли;
	Если СсылкаОснованиеЭтоРеестрПеревозок() И ВариантПоставкиКОРП И УчитыватьДанныеРекламаций(ШаблонЗаполнения) Тогда
		ДобавитьПараметрКомпоновки(Макет, "НачПериодаРекламации", ДатаНач);
		ДобавитьПараметрКомпоновки(Макет, "КонПериодаРекламации", ДатаКон);
		ДобавитьПараметрКомпоновки(Макет, "Перевозчик", ДокументОснование_Перевозчик);
	КонецЕсли;
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных();
	ПроцессорКомпоновки.Инициализировать(Макет,,, Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений();
	
	мДата = ?(ЗначениеЗаполнено(ДокументОснование_Дата), ДокументОснование_Дата, ТекущаяДата());
	КурсВалютыВзаиморасчетов = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ДокументОснование_ДоговорКонтрагента.ВалютаВзаиморасчетов, мДата);
	
	ВалютаРегл = Константы.ВалютаРегламентированногоУчета.Получить();
	СтруктураВалютаРегл = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ВалютаРегл, мДата);
	
	тблУслуги = Новый ТаблицаЗначений();
	тблУслуги.Колонки.Добавить("Номенклатура");
	тблУслуги.Колонки.Добавить("Содержание");
	тблУслуги.Колонки.Добавить("СтавкаНДС");
	тблУслуги.Колонки.Добавить("Заказ");
	тблУслуги.Колонки.Добавить("Количество");
	тблУслуги.Колонки.Добавить("Цена");
	тблУслуги.Колонки.Добавить("Сумма");
	тблУслуги.Колонки.Добавить("СуммаНДС");
	Если НЕ ВариантПоставкиСТД Тогда
		тблУслуги.Колонки.Добавить("Валюта");
		тблУслуги.Колонки.Добавить("ЗаказПеревозчику");
	КонецЕсли;
	Если СсылкаОснованиеЭтоРеестрПеревозок() И ВариантПоставкиКОРП И УчитыватьДанныеРекламаций(ШаблонЗаполнения) Тогда
		тблУслуги.Колонки.Добавить("Рекламация");
	КонецЕсли;
	
	ТабУслуг = Новый ТаблицаЗначений();
	ПроцессорВывода.УстановитьОбъект(ТабУслуг);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	// Если отключена функц. опция "Привлеченные перевозчики", то компоновщик режет поле ЗаказПеревозчику
	Если НЕ ВариантПоставкиСТД И ТабУслуг.Колонки.Найти("ЗаказПеревозчику") = Неопределено Тогда
		ТабУслуг.Колонки.Добавить("ЗаказПеревозчику",  Новый ОписаниеТипов("ДокументСсылка.уатЗаказПеревозчику_уэ"));
	КонецЕсли;
	
	// Из-за того, что РН ПУ имеет гораздо больше аналитик, чем РН ВУ, после запроса нужно недостающие аналитики дозаполнить
	// аналитики выгребаются повторно из РН ПУ, выбирается запись с минимальным номером строки документа
	Если ШаблонЗаполнения.РежимЗаполнения = 1 Тогда
		СверткаНевыставленныхУслуг(ТабУслуг);
	КонецЕсли;
	
	// Заполнение дополнительных колонок детализации
	уатОбщегоНазначения.УстановитьДопПоляДетализации(ТабУслуг, ДокументОснование_ДоговорКонтрагента,
		ПолучательУслуг, ШаблонЗаполнения);
	
	Для Каждого ТекСтрокаУслуг Из ТабУслуг Цикл
		Если ТекСтрокаУслуг.Количество <= 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		СтрокаСодержание = уатОбщегоНазначения.ПолучитьСодержание(ТекСтрокаУслуг, ДокументОснование_ДоговорКонтрагента,
			ПолучательУслуг, ШаблонЗаполнения);
		
		Если ШаблонЗаполнения.СворачиватьПоПолямДетализации Тогда
			КлючСтроки = Новый Структура;
			КлючСтроки.Вставить("Номенклатура", ТекСтрокаУслуг.Услуга);
			КлючСтроки.Вставить("СтавкаНДС", ТекСтрокаУслуг.СтавкаНДС);
			КлючСтроки.Вставить("Содержание", СтрокаСодержание);
			Если НЕ ВариантПоставкиСТД Тогда
				КлючСтроки.Вставить("Валюта", ТекСтрокаУслуг.Валюта);
			КонецЕсли;
			
			мсвПоискаСтрок = тблУслуги.НайтиСтроки(КлючСтроки);
			Если мсвПоискаСтрок.Количество() = 0 Тогда
				НоваяСтрока = тблУслуги.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаУслуг);
				Если НЕ ШаблонЗаполнения.ИспользоватьДанныеЗаказНаТС Тогда
					НоваяСтрока.Заказ = Неопределено;
				КонецЕсли;
				Если НЕ ВариантПоставкиСТД И НЕ ШаблонЗаполнения.ИспользоватьДанныеЗаказПеревозчику Тогда
					НоваяСтрока.ЗаказПеревозчику = Неопределено;
				КонецЕсли;
				НоваяСтрока.Номенклатура = ТекСтрокаУслуг.Услуга;
				НоваяСтрока.Содержание = СтрокаСодержание;
				НоваяСтрока.Количество = 0;
				НоваяСтрока.Сумма      = 0;
				НоваяСтрока.СуммаНДС   = 0;
			Иначе
				НоваяСтрока = мсвПоискаСтрок[0];
			КонецЕсли;
		Иначе
			НоваяСтрока = тблУслуги.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаУслуг);
			НоваяСтрока.Номенклатура = ТекСтрокаУслуг.Услуга;
			НоваяСтрока.Содержание = СтрокаСодержание;
			НоваяСтрока.Количество = 0;
			НоваяСтрока.Сумма      = 0;
			НоваяСтрока.СуммаНДС   = 0;
		КонецЕсли;
		
		НоваяСтрока.Количество = НоваяСтрока.Количество + ТекСтрокаУслуг.Количество;
		
		Если ВариантПоставкиСТД Тогда
			НоваяСтрока.Сумма      = НоваяСтрока.Сумма + ТекСтрокаУслуг.Сумма;
			НоваяСтрока.Цена       = ?(НоваяСтрока.Количество = 0, 0, НоваяСтрока.Сумма / НоваяСтрока.Количество);
			НоваяСтрока.СуммаНДС   = НоваяСтрока.СуммаНДС 
				+ уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрокаУслуг.СуммаНДС,
					ВалютаРегл, ДокументОснование_ВалютаДокумента,
					СтруктураВалютаРегл.Курс, ДокументОснование_КурсВзаиморасчетов, 
					СтруктураВалютаРегл.Кратность, ДокументОснование_КратностьВзаиморасчетов);
		Иначе
			СтруктураВалютаСтроки = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ТекСтрокаУслуг.Валюта, мДата);
			Если флМноговалютныйУчет Тогда
				НоваяСтрока.Сумма = НоваяСтрока.Сумма + ТекСтрокаУслуг.Сумма;
				Если ТекСтрокаУслуг.Валюта = ВалютаРегл Тогда
					НоваяСтрока.СуммаНДС = НоваяСтрока.СуммаНДС + ТекСтрокаУслуг.СуммаНДС;
				Иначе
					НоваяСтрока.СуммаНДС = НоваяСтрока.СуммаНДС 
						+ уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрокаУслуг.СуммаНДС,
							ВалютаРегл,                    ТекСтрокаУслуг.Валюта,
							СтруктураВалютаРегл.Курс,      СтруктураВалютаСтроки.Курс, 
							СтруктураВалютаРегл.Кратность, СтруктураВалютаСтроки.Кратность);
				КонецЕсли;
			Иначе
				Если ТекСтрокаУслуг.Валюта = ДокументОснование_ВалютаДокумента Тогда
					НоваяСтрока.Сумма  = НоваяСтрока.Сумма + ТекСтрокаУслуг.Сумма;
				Иначе
					НоваяСтрока.Сумма  = НоваяСтрока.Сумма
						+ уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрокаУслуг.Сумма,
							ТекСтрокаУслуг.Валюта,           ДокументОснование_ВалютаДокумента,
							СтруктураВалютаСтроки.Курс,      ДокументОснование_КурсВзаиморасчетов, 
							СтруктураВалютаСтроки.Кратность, ДокументОснование_КратностьВзаиморасчетов);
				КонецЕсли;
				Если ДокументОснование_ВалютаДокумента = ВалютаРегл Тогда
					НоваяСтрока.СуммаНДС = НоваяСтрока.СуммаНДС + ТекСтрокаУслуг.СуммаНДС;
				Иначе
					НоваяСтрока.СуммаНДС  = НоваяСтрока.СуммаНДС 
						+ уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрокаУслуг.СуммаНДС,
							ВалютаРегл,                    ДокументОснование_ВалютаДокумента,
							СтруктураВалютаРегл.Курс,      ДокументОснование_КурсВзаиморасчетов, 
							СтруктураВалютаРегл.Кратность, ДокументОснование_КратностьВзаиморасчетов);
				КонецЕсли;
			КонецЕсли;
						
			НоваяСтрока.Цена = ?(НоваяСтрока.Количество = 0, 0, НоваяСтрока.Сумма / НоваяСтрока.Количество);
		КонецЕсли;
		
	КонецЦикла;
	
	// преобразование таблицы в массив структур для передачи на клиент
	мсвУслуги = Новый Массив();
	Для Каждого ТекСтрока Из тблУслуги Цикл
		Если ВариантПоставкиСТД Тогда
			СтруктураСтроки = Новый Структура("Номенклатура, Содержание, Количество, Цена, Сумма, СтавкаНДС, СуммаНДС, Заказ");
		ИначеЕсли СсылкаОснованиеЭтоРеестрПеревозок() И ВариантПоставкиКОРП И УчитыватьДанныеРекламаций(ШаблонЗаполнения) Тогда
			СтруктураСтроки = Новый Структура("Номенклатура, Содержание, Количество, Цена, Сумма, СтавкаНДС, СуммаНДС, Заказ, ЗаказПеревозчику, Валюта, Рекламация");
		Иначе
			СтруктураСтроки = Новый Структура("Номенклатура, Содержание, Количество, Цена, Сумма, СтавкаНДС, СуммаНДС, Заказ, ЗаказПеревозчику, Валюта");
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтруктураСтроки, ТекСтрока);
		мсвУслуги.Добавить(СтруктураСтроки);
	КонецЦикла;
	
	Возврат мсвУслуги;
	
КонецФункции

&НаСервере
Функция ПолучитьДанныеДляАктаКС3()
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	
	Макет = КомпоновщикМакета.Выполнить(ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных),
		КомпоновщикНастроекОтбора.ПолучитьНастройки(), , ,
		Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		
	МодульуатОбщегоНазначения_проф = ОбщегоНазначения.ОбщийМодуль("уатОбщегоНазначения_проф");
	мсвДанныеАктаКС3 = МодульуатОбщегоНазначения_проф.ПолучитьДанныеДляАктаКС3(
		ДатаНач, ДатаКон, ДатаОстаткиНа, Макет,
		ДокументОснование_Организация, ДокументОснование_Контрагент, ДокументОснование_ДоговорКонтрагента,
		ШаблонЗаполнения);
		
	Возврат мсвДанныеАктаКС3;
	
КонецФункции
	
&НаКлиенте
Процедура УстановитьВидимость()
	
	флЗаполнитьНевыставленными = ЗаполнитьНевыставленными(ШаблонЗаполнения);
	Элементы.ДатаОстаткиНа.Видимость = флЗаполнитьНевыставленными;
	Элементы.ДатаНач.Видимость = НЕ флЗаполнитьНевыставленными;
	Элементы.ДатаКон.Видимость = НЕ флЗаполнитьНевыставленными;
	Элементы.НастройкаПериода.Видимость = НЕ флЗаполнитьНевыставленными;
	
	Если СсылкаОснованиеЭтоАктКС3() Тогда
		Элементы.ГруппаШаблон.Видимость = Ложь;
		Элементы.Содержание.Видимость   = Ложь;
	Иначе
		Элементы.ГруппаШаблон.Видимость = Истина;
		Элементы.Содержание.Видимость   = Истина;
	КонецЕсли;
	
	Если ШаблонПоУмолчанию Тогда
		Элементы.ДобавитьНастройкуПоДоговору.Видимость  = Истина;
		Элементы.ВыбратьНастройкуПоДоговору.Видимость   = Ложь;
		Элементы.ГруппаСтраницыНастроек.ТекущаяСтраница = Элементы.ГруппаСтраницаСтандартныйШаблон;
	Иначе
		Элементы.ДобавитьНастройкуПоДоговору.Видимость  = Ложь;
		Элементы.ВыбратьНастройкуПоДоговору.Видимость   = Истина;
		Элементы.ГруппаСтраницыНастроек.ТекущаяСтраница = Элементы.ГруппаСтраницаШаблонПоДоговору;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройки()
	
	Если НЕ ЗначениеЗаполнено(ДокументОснование_ДоговорКонтрагента) Тогда
		Возврат;
	КонецЕсли;
	
	ШаблонЗаполнения = уатОбщегоНазначения.ШаблонЗаполненияПоУслугам(
		ДокументОснование_ДоговорКонтрагента, ПолучательУслуг, ШаблонПоУмолчанию);
		
КонецПроцедуры

&НаСервере
Функция СсылкаОснованиеЭтоАктКС3()
	
	Возврат ДокументОснованиеИмя = "уатАктКС3_стм";
	
КонецФункции // СсылкаОснованиеЭтоАктКС3()

&НаСервере
Функция СсылкаОснованиеЭтоРеализацияУслуг()
	
	Возврат ДокументОснованиеИмя = "уатРеализацияУслуг";
	
КонецФункции // СсылкаОснованиеЭтоРеализацияУслуг()

&НаСервере
Функция СсылкаОснованиеЭтоРеестрПеревозок()
	
	Возврат ДокументОснованиеИмя = "уатРеестрПеревозок";
	
КонецФункции // СсылкаОснованиеЭтоРеестрПеревозок()

&НаСервере
Функция СсылкаОснованиеЭтоСчетНаОплатуПокупателю()
	
	Возврат ДокументОснованиеИмя = "уатСчетНаОплатуПокупателю";
	
КонецФункции // СсылкаОснованиеЭтоСчетНаОплатуПокупателю()

&НаСервере
Функция СсылкаОснованиеЭтоСчетНаОплатуПоставщика()
	
	Возврат ДокументОснованиеИмя = "уатСчетНаОплатуПоставщика";
	
КонецФункции // СсылкаОснованиеЭтоСчетНаОплатуПоставщика()

&НаСервере
Функция СсылкаОснованиеЭтоПоступлениеУслуг()
	
	Возврат ДокументОснованиеИмя = "уатПоступлениеТоваровУслуг";
	
КонецФункции // СсылкаОснованиеЭтоПоступлениеУслуг()

&НаСервере
Функция ПолучательУслугПоДокументу()
	
	Если СсылкаОснованиеЭтоПоступлениеУслуг() Или СсылкаОснованиеЭтоСчетНаОплатуПоставщика()
		Или СсылкаОснованиеЭтоРеестрПеревозок() Тогда
		Рез = Перечисления.уатПолучателиУслуг.НашаОрганизация;
	Иначе
		Рез = Перечисления.уатПолучателиУслуг.Контрагент;
	КонецЕсли;
	
	Возврат Рез;
	
КонецФункции

&НаСервере
Процедура СверткаНевыставленныхУслуг(ТабУслуг)
	ТабУслуг.Колонки.Добавить("НулевоеКоличествоСумма", Новый ОписаниеТипов("Булево"));
	Если ВариантПоставкиСТД Тогда
		ТабУслуг.Индексы.Добавить("НулевоеКоличествоСумма, ЭтоВыставленныеУслуги, Услуга, Заказ");
	Иначе
		ТабУслуг.Индексы.Добавить("НулевоеКоличествоСумма, ЭтоВыставленныеУслуги, Услуга, ОбъектСтроительства, Заказ, ЗаказПеревозчику, Валюта");
	КонецЕсли;
	
	мсвСтрокУдалить = Новый Массив;
	Для Каждого ТекСтрока Из ТабУслуг Цикл
		Если ТекСтрока.ЭтоВыставленныеУслуги Тогда //строки выставленных услуг вносим в удаляемые и не рассматриваем
			мсвСтрокУдалить.Добавить(ТекСтрока);
			Продолжить;
		КонецЕсли;
		
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("НулевоеКоличествоСумма", Ложь);
		СтруктураПоиска.Вставить("ЭтоВыставленныеУслуги", Истина);
		СтруктураПоиска.Вставить("Услуга", ТекСтрока.Услуга);
		СтруктураПоиска.Вставить("Заказ", ТекСтрока.Заказ);
		Если НЕ ВариантПоставкиСТД Тогда
			СтруктураПоиска.Вставить("ОбъектСтроительства", ТекСтрока.ОбъектСтроительства);
			СтруктураПоиска.Вставить("ЗаказПеревозчику", ТекСтрока.ЗаказПеревозчику);
			СтруктураПоиска.Вставить("Валюта", ТекСтрока.Валюта);
		КонецЕсли;
		
		мсвСтрокиВыставленные = ТабУслуг.НайтиСтроки(СтруктураПоиска);
			
		Если мсвСтрокиВыставленные.Количество() = 0 Тогда //услуги еще не выставлены - оставляем полностью в исходном виде
			Продолжить;
		КонецЕсли;
		
		// Используем партионное списание услуг, по каждой исходной строчке предоставленных услуг
		Для Каждого ТекСтрокаВыставл Из мсвСтрокиВыставленные Цикл
			КоличПартия = Мин(ТекСтрока.Количество, ТекСтрокаВыставл.Количество);
			ТекСтрока.Количество = ТекСтрока.Количество - КоличПартия;
			ТекСтрокаВыставл.Количество = ТекСтрокаВыставл.Количество - КоличПартия; //уменьшаем выставленные услуги на количество списанных
			
			СуммаПартия = Мин(ТекСтрока.Сумма, ТекСтрокаВыставл.Сумма);
			ТекСтрока.Сумма = ТекСтрока.Сумма - СуммаПартия;
			ТекСтрокаВыставл.Сумма = ТекСтрокаВыставл.Сумма - СуммаПартия; //уменьшаем выставленные услуги на сумму списанных
			
			СуммаНДСПартия = Мин(ТекСтрока.СуммаНДС, ТекСтрокаВыставл.СуммаНДС);
			ТекСтрока.СуммаНДС = ТекСтрока.СуммаНДС - СуммаНДСПартия;
			ТекСтрокаВыставл.СуммаНДС = ТекСтрокаВыставл.СуммаНДС - СуммаНДСПартия; //уменьшаем выставленные услуги на сумму ндс списанных
			
			// отмечаем строки выставленных услуг с нулевым количеством, их будем пропускать
			Если ТекСтрокаВыставл.Количество = 0 И ТекСтрокаВыставл.Сумма = 0 И ТекСтрокаВыставл.СуммаНДС = 0 Тогда
				ТекСтрокаВыставл.НулевоеКоличествоСумма = Истина;
			КонецЕсли;
			
			Если ТекСтрока.Количество = 0 И ТекСтрока.Сумма = 0 И ТекСтрока.СуммаНДС = 0 Тогда //всё списалось - все выставлены - вносим в удаляемые
				мсвСтрокУдалить.Добавить(ТекСтрока);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// удаление лишних строк (выставленных ранее услуг)
	Для Каждого ТекСтрокаУдалить Из мсвСтрокУдалить Цикл
		ТабУслуг.Удалить(ТекСтрокаУдалить);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ВосстановитьОтборКомпоновки(СхемаКомпоновкиДанных)
	
	СтруктураНастроек = ХранилищеНастроекДанныхФорм.Загрузить(
		"ОбщаяФорма.уатЗаполнениеПоУслугам", 
		"уатЗаполнениеПоУслугам_Настройки_" + ДокументОснованиеИмя);
	
	Если СтруктураНастроек = Неопределено Тогда
		СтруктураНастроек = Новый Структура;
	КонецЕсли;
	
	НастройкиОтбора = Неопределено;
	Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
		Если ЗаполнитьНевыставленными(ШаблонЗаполнения) Тогда
			СтруктураНастроек.Свойство("ОтборНевыставленные", НастройкиОтбора);
		Иначе
			СтруктураНастроек.Свойство("ОтборПредоставленные", НастройкиОтбора);
		КонецЕсли;
	Иначе
		Если ЗаполнитьНевыставленными(ШаблонЗаполнения) Тогда
			НастройкиОтбора = СтруктураНастроек.Получить("ОтборНевыставленные");
		Иначе
			НастройкиОтбора = СтруктураНастроек.Получить("ОтборПредоставленные");
		КонецЕсли;
	КонецЕсли;
	Если НастройкиОтбора <> Неопределено Тогда
		КомпоновщикНастроекОтбора.Настройки.Отбор.Элементы.Очистить();
		Для Каждого ЭлементОтбора Из НастройкиОтбора.Отбор.Элементы Цикл
			Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
				ДобавитьВОтборЭлементОтбора(КомпоновщикНастроекОтбора.Настройки.Отбор, ЭлементОтбора);
			Иначе
				ДобавитьВОтборГруппуЭлементовОтбора(КомпоновщикНастроекОтбора.Настройки.Отбор, ЭлементОтбора);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьВОтборЭлементОтбора(ОтборПриемник, ЭлементОтбора)
	НовыйЭлемент = ОтборПриемник.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЗаполнитьЗначенияСвойств(НовыйЭлемент,ЭлементОтбора);
КонецПроцедуры

&НаСервере
Процедура ДобавитьВОтборГруппуЭлементовОтбора(ОтборПриемник, ГруппаЭлементов)
	НоваяГруппа = ОтборПриемник.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ЗаполнитьЗначенияСвойств(НоваяГруппа,ГруппаЭлементов);
	
	Для Каждого ЭлементОтбора из ГруппаЭлементов.Элементы Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ЭлементОтбораКомпоновкиДанных") Тогда
			ДобавитьВОтборЭлементОтбора(НоваяГруппа,ЭлементОтбора);
		Иначе
			ДобавитьВОтборГруппуЭлементовОтбора(НоваяГруппа,ЭлементОтбора);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура СохранитьОтборКомпоновки()
	СтруктураНастроек = ХранилищеНастроекДанныхФорм.Загрузить(
		"ОбщаяФорма.уатЗаполнениеПоУслугам", 
		"уатЗаполнениеПоУслугам_Настройки_" + ДокументОснованиеИмя);
	
	Если СтруктураНастроек = Неопределено Тогда
		СтруктураНастроек = Новый Структура;
	КонецЕсли;
	
	Если ЗаполнитьНевыставленными(ШаблонЗаполнения) = 0 Тогда
		СтруктураНастроек.Вставить("ОтборПредоставленные", КомпоновщикНастроекОтбора.Настройки);
	Иначе
		СтруктураНастроек.Вставить("ОтборНевыставленные", КомпоновщикНастроекОтбора.Настройки);
	КонецЕсли;
		
	ХранилищеНастроекДанныхФорм.Сохранить(
		"ОбщаяФорма.уатЗаполнениеПоУслугам", 
		"уатЗаполнениеПоУслугам_Настройки_" + ДокументОснованиеИмя,
		СтруктураНастроек);
КонецПроцедуры

&НаСервере
Процедура ОтобразитьИнформациюПоНастройкам()
	
	НадписьВидыДокументов = ?(ШаблонЗаполнения.ИспользоватьДанныеТТД, "ТТД, ", "")
		+ ?(ШаблонЗаполнения.ИспользоватьДанныеЗаказНаТС, "Заказ на ТС, ", "")
		+ ?(ШаблонЗаполнения.ИспользоватьДанныеЗаказПеревозчику, "Заказ перевозчику, ", "")
		+ ?(ШаблонЗаполнения.ИспользоватьДанныеМаршрутныйЛист, "Маршрутный лист, ", "")
		+ ?(ШаблонЗаполнения.ИспользоватьДанныеКорректировкаЗаписей, "Корректировка записей регистров, ", "");
	Если ПустаяСтрока(НадписьВидыДокументов) Тогда
		НадписьВидыДокументов = "<не указано>";
	Иначе
		НадписьВидыДокументов = Лев(НадписьВидыДокументов, СтрДлина(НадписьВидыДокументов) - 2);
	КонецЕсли;
	
	НадписьСверткаПоПолямДетализации = ?(ШаблонЗаполнения.СворачиватьПоПолямДетализации, "Используется", "Не используется");
		
	Если ШаблонЗаполнения.СортировкаЗаказов = 0 Тогда
		НадписьСортировкаЗаказов = "По дате документа";
	ИначеЕсли ШаблонЗаполнения.СортировкаЗаказов = 1 Тогда
		НадписьСортировкаЗаказов = "По времени отправления";
	ИначеЕсли ШаблонЗаполнения.СортировкаЗаказов = 2 Тогда
		НадписьСортировкаЗаказов = "По времени прибытия";
	КонецЕсли;
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция КлючЗаписиРегистраНастроек(ДокументОснование_Контрагент, ДокументОснование_ДоговорКонтрагента)
	СтруктураЗаписи = Новый Структура("Контрагент, Договор",
		ДокументОснование_Контрагент, ДокументОснование_ДоговорКонтрагента);
	КлючЗаписи = РегистрыСведений.уатНастройкиЗаполненияПоУслугам.СоздатьКлючЗаписи(СтруктураЗаписи);
	Возврат КлючЗаписи;
КонецФункции

&НаСервереБезКонтекста
Функция ЗаполнитьНевыставленными(Шаблон)
	Возврат (Шаблон.РежимЗаполнения = 1);
КонецФункции

&НаСервереБезКонтекста
Функция УчитыватьДанныеРекламаций(Шаблон)
	Возврат Шаблон.ИспользоватьДанныеРекламаций;
КонецФункции

#КонецОбласти

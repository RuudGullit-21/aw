
#Область ОписаниеПеременных

&НаКлиенте
Перем мсвСопоставленныеТС;

&НаКлиенте
Перем МассивДублей;

#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Автотест = Истина;
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("ТипВнешнейСистемы") Тогда
		ТипВнешнейСистемы = Параметры.ТипВнешнейСистемы;
	Иначе
		ТипВнешнейСистемы = Перечисления.уатТипыВнешнихСистем.СистемаМониторинга;
	КонецЕсли;
	
	ВосстановитьНастройки();
	УстановитьСвязиПараметровВыбора(ТипВнешнейСистемы);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокТС, "ТекСистемаСтрока", ВнешняяСистема.НаименованиеПС);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокТС, "ТекСистема", ВнешняяСистема);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокТС, "СистемаМониторинга", ТипВнешнейСистемы
		= ПредопределенноеЗначение("Перечисление.уатТипыВнешнихСистем.СистемаМониторинга"));
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокТС, "СервисПарковок", 
		ТипВнешнейСистемы = ПредопределенноеЗначение("Перечисление.уатТипыВнешнихСистем.СервисПарковок"));
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокТС, "ТекДата", ТекущаяДата());
	Принадлежность = Перечисления.уатПринадлежностьТС.Собственное;
	
	СформироватьПодменюВнешниеСистемы();
	СформироватьПодменюУчетныеЗаписи();
	
	Если НЕ ЗначениеЗаполнено(ВнешняяСистема) Тогда
		ТекстНСТР = НСтр("ru='Не включена ни одна внешняя система'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		Отказ = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	мсвСопоставленныеТС = Новый Массив();
	МассивДублей        = Новый Массив();
	
	Если ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		ЗаполнитьСписокВнешняяСистемаКлиент(ВнешняяСистема, УчетнаяЗапись);
	КонецЕсли;

	УстановитьВидимость(ТипВнешнейСистемы, ВнешняяСистема, УчетнаяЗапись);
	УстановитьОтборы();

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если ЗавершениеРаботы Тогда 
		Возврат;
	КонецЕсли;
	
	СохранитьНастройки(ТипВнешнейСистемы, ВнешняяСистема, УчетнаяЗапись, ОтображатьСопоставленныеВнешняяСистема, ОтображатьСопоставленныеУАТ);
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура Штрафы_СтатусПриИзменении(Элемент)
	ПрименитьОтборыВнешняяСистема();
КонецПроцедуры

&НаКлиенте
Процедура ТС_АвтопаркПриИзменении(Элемент)
	ЗаполнитьСписокВнешняяСистема(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура СписокТСВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекущиеДанные = Элементы.СписокТС.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ОткрытьФорму("Справочник.уатТС.Форма.ФормаЭлемента", Новый Структура("Ключ", ТекущиеДанные.Ссылка));
КонецПроцедуры

&НаКлиенте
Процедура ПринадлежностьПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Принадлежность) Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокТС.Отбор, "ПринадлежностьТС", Принадлежность,,, Истина);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокТС.Отбор, "ПринадлежностьТС", Принадлежность,,, Ложь);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокТС

&НаКлиенте
Процедура СписокТСПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	СтандартнаяОбработка = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СписокТСПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	ТекДанные = Элементы.СписокВнешняяСистема.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		ТекстНСТР = НСтр("en='Not selected element to drag';ru='Не выбран элемент для перетаскивания'");
		ПоказатьПредупреждение(Неопределено, ТекстНСТР,,"Ошибка");
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(Строка) <> Тип("СправочникСсылка.уатТС") Тогда
		Возврат;
	КонецЕсли;
	
	ИДвСистеме = ТекДанные.ИДвСистеме;
	СопоставитьТС(Строка, ИДвСистеме);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СписокТСПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	Если Настройки.ДополнительныеСвойства.Свойство("мсвСопоставленныеТС") Тогда
		мсвСопоставленныеТС = Настройки.ДополнительныеСвойства.мсвСопоставленныеТС;
	КонецЕсли;
	Если Настройки.ДополнительныеСвойства.Свойство("МассивДублей") Тогда
		МассивДублей = Настройки.ДополнительныеСвойства.МассивДублей;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(мсвСопоставленныеТС) Тогда
		мсвСопоставленныеТС = Новый Массив();
	КонецЕсли;
	Если Не ЗначениеЗаполнено(МассивДублей) Тогда
		МассивДублей = Новый Массив();
	КонецЕсли;
	
	Если Настройки.ДополнительныеСвойства.Свойство("СистемаМониторинга") Тогда 
		СистемаМониторинга = Настройки.ДополнительныеСвойства.СистемаМониторинга;
	Иначе
		СистемаМониторинга = Истина;
	КонецЕсли;
	
	Если Настройки.ДополнительныеСвойства.Свойство("СервисПарковок") Тогда 
		СервисПарковок = Настройки.ДополнительныеСвойства.СервисПарковок;
	Иначе
		СервисПарковок = Истина;
	КонецЕсли;
	
	Если Настройки.ДополнительныеСвойства.Свойство("СписокВнешняяСистема") Тогда
		тзСписокВнешняяСистема = Новый ТаблицаЗначений;
		тзСписокВнешняяСистема.Колонки.Добавить("ТССопоставлена", Новый ОписаниеТипов("Булево"));
		тзСписокВнешняяСистема.Колонки.Добавить("ИДвСистеме", Новый ОписаниеТипов("Строка"));
		тзСписокВнешняяСистема.Колонки.Добавить("Наименование", Новый ОписаниеТипов("Строка"));
		Для Каждого ТекТс Из Настройки.ДополнительныеСвойства.СписокВнешняяСистема Цикл
			НоваяСтрока = тзСписокВнешняяСистема.Добавить();
			НоваяСтрока.ТССопоставлена = Ложь;
			НоваяСтрока.ИДвСистеме = ТекТс.ИДвСистеме;
			НоваяСтрока.Наименование = ТекТс.Наименование;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого Строка Из Строки Цикл
		ДанныеСтроки = Строка.Значение.Данные;
		ДанныеСтроки.ИДвСистемеНадпись = ДанныеСтроки.ИДвСистемеЗаписано;
		
		Если МассивДублей.Найти(ДанныеСтроки.Ссылка) <> Неопределено Тогда
			ДанныеСтроки.Дубль = Истина;
		КонецЕсли;
		Для Каждого ТекСтрока Из мсвСопоставленныеТС Цикл
			Если ТекСтрока.ТекТС <> ДанныеСтроки.Ссылка Тогда
				Продолжить;
			КонецЕсли;
			ДанныеСтроки.ИДвСистеме              = ТекСтрока.ИДвСистеме;
			Если ДанныеСтроки.ИДвСистемеЗаписано <> ТекСтрока.ИДвСистеме Тогда
				ДанныеСтроки.ИДвСистемеНадпись       = ТекСтрока.ИДвСистеме + " " + Нстр("ru = '(не записан)'");
			Иначе
				ДанныеСтроки.ИДвСистемеНадпись       = ТекСтрока.ИДвСистеме;
			КонецЕсли;
			ДанныеСтроки.ВнешняяСистема          = ТекСтрока.ВнешняяСистема;
		КонецЦикла;
		Если НЕ ЗначениеЗаполнено(ДанныеСтроки.ИДвСистеме) Тогда
			ДанныеСтроки.ИДвСистеме = ?(СистемаМониторинга, ДанныеСтроки.Ссылка.ИДвСистемеНавигации, 
			?(СервисПарковок, ДанныеСтроки.Ссылка.ИДвСервисеПарковок, ДанныеСтроки.Ссылка.ИДвСервисеШтрафов));
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ДанныеСтроки.ВнешняяСистема) Тогда
			ДанныеСтроки.ВнешняяСистема = ?(СистемаМониторинга, ДанныеСтроки.Ссылка.ИспользуемаяСистемаGPS,
			?(СервисПарковок, ДанныеСтроки.Ссылка.ИспользуемыйСервисПарковок, ДанныеСтроки.Ссылка.ИспользуемыйСервисШтрафов));
		КонецЕсли;
		Если Настройки.ДополнительныеСвойства.Свойство("СписокВнешняяСистема") Тогда
			мСписокВнешняяСистема = тзСписокВнешняяСистема.НайтиСтроки(Новый Структура("ИДвСистеме", ДанныеСтроки.ИДвСистеме));
			Если мСписокВнешняяСистема.Количество() > 0 Тогда
				ДанныеСтроки.НаименованиеВСистеме = мСписокВнешняяСистема[0].Наименование;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокВнешняяСистема

&НаКлиенте
Процедура СписокВнешняяСистемаНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	СтандартнаяОбработка = Ложь;
	ТекДанные = Элементы.СписокВнешняяСистема.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ЗаполнитьСписокВнешняяСистема(Команда)
	
	мсвСопоставленныеТС = Новый Массив();
	МассивДублей        = Новый Массив();
	ЗаполнитьСписокВнешняяСистемаКлиент(ВнешняяСистема, УчетнаяЗапись);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьВсе(Команда)
	
	Элементы.ОтобразитьПодключенные.Пометка   = Ложь;
	Элементы.ОтобразитьНеподключенные.Пометка = Ложь;
	Элементы.ОтобразитьВсе.Пометка            = Истина;
	
	ОтображатьСопоставленныеВнешняяСистема = "Все";
	Элементы.ОтборыДанныеВнешнейСистемы.Заголовок = Нстр("ru = 'Отображать:'") + " " + ОтображатьСопоставленныеВнешняяСистема;
	Элементы.ОтборыДанныеВнешнейСистемы.Подсказка = Элементы.ОтборыДанныеВнешнейСистемы.Заголовок;
	
	ПрименитьОтборыВнешняяСистема();
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьВсеУАТ(Команда)
	
	Элементы.ОтобразитьПодключенныеУАТ.Пометка   = Ложь;
	Элементы.ОтобразитьНеподключенныеУАТ.Пометка = Ложь;
	Элементы.ОтобразитьВсеУАТ.Пометка            = Истина;
	Элементы.ОтобразитьАвтопаркНеСовпадаетССервисом.Пометка = Ложь;
	
	ОтображатьСопоставленныеУАТ = "Все";
	Элементы.ОтборыДанныеУАТ.Заголовок = Нстр("ru = 'Отображать:'") + " " + ОтображатьСопоставленныеУАТ;
	Элементы.ОтборыДанныеУАТ.Подсказка = Элементы.ОтборыДанныеУАТ.Заголовок;

	ОтображатьСопоставленныеУАТПриИзменении();

КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьНеподключенные(Команда)
	
	Элементы.ОтобразитьПодключенные.Пометка   = Ложь;
	Элементы.ОтобразитьНеподключенные.Пометка = Истина;
	Элементы.ОтобразитьВсе.Пометка            = Ложь;

	ОтображатьСопоставленныеВнешняяСистема = "Неподключенные";
	Элементы.ОтборыДанныеВнешнейСистемы.Заголовок = Нстр("ru = 'Отображать:'") + " " + ОтображатьСопоставленныеВнешняяСистема;
	Элементы.ОтборыДанныеВнешнейСистемы.Подсказка = Элементы.ОтборыДанныеВнешнейСистемы.Заголовок;
	
	ПрименитьОтборыВнешняяСистема();
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьНеподключенныеУАТ(Команда)
	
	Элементы.ОтобразитьПодключенныеУАТ.Пометка   = Ложь;
	Элементы.ОтобразитьНеподключенныеУАТ.Пометка = Истина;
	Элементы.ОтобразитьВсеУАТ.Пометка            = Ложь;
	Элементы.ОтобразитьАвтопаркНеСовпадаетССервисом.Пометка = Ложь;
	
	ОтображатьСопоставленныеУАТ = "Неподключенные";
	Элементы.ОтборыДанныеУАТ.Заголовок = Нстр("ru = 'Отображать:'") + " " + ОтображатьСопоставленныеУАТ;
	Элементы.ОтборыДанныеУАТ.Подсказка = Элементы.ОтборыДанныеУАТ.Заголовок;
	
	ОтображатьСопоставленныеУАТПриИзменении();

КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьПодключенные(Команда)
	
	Элементы.ОтобразитьПодключенные.Пометка   = Истина;
	Элементы.ОтобразитьНеподключенные.Пометка = Ложь;
	Элементы.ОтобразитьВсе.Пометка            = Ложь;

	ОтображатьСопоставленныеВнешняяСистема = "Подключенные";
	Элементы.ОтборыДанныеВнешнейСистемы.Заголовок = Нстр("ru = 'Отображать:'") + " " + ОтображатьСопоставленныеВнешняяСистема;
	Элементы.ОтборыДанныеВнешнейСистемы.Подсказка = Элементы.ОтборыДанныеВнешнейСистемы.Заголовок;
	
	ПрименитьОтборыВнешняяСистема();
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьПодключенныеУАТ(Команда)
	
	Элементы.ОтобразитьПодключенныеУАТ.Пометка   = Истина;
	Элементы.ОтобразитьНеподключенныеУАТ.Пометка = Ложь;
	Элементы.ОтобразитьВсеУАТ.Пометка            = Ложь;
	Элементы.ОтобразитьАвтопаркНеСовпадаетССервисом.Пометка = Ложь;
	
	ОтображатьСопоставленныеУАТ = "Подключенные";
	Элементы.ОтборыДанныеУАТ.Заголовок = Нстр("ru = 'Отображать:'") + " " + ОтображатьСопоставленныеУАТ;
	Элементы.ОтборыДанныеУАТ.Подсказка = Элементы.ОтборыДанныеУАТ.Заголовок;
	
	ОтображатьСопоставленныеУАТПриИзменении();

КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьАвтопаркНеСовпадаетССервисом(Команда)
	
	Элементы.ОтобразитьПодключенныеУАТ.Пометка   = Ложь;
	Элементы.ОтобразитьНеподключенныеУАТ.Пометка = Ложь;
	Элементы.ОтобразитьВсеУАТ.Пометка            = Ложь;
	Элементы.ОтобразитьАвтопаркНеСовпадаетССервисом.Пометка = Истина;
	
	ОтображатьСопоставленныеУАТ = "Автопарк не совпадает с сервисом";
	Элементы.ОтборыДанныеУАТ.Заголовок = Нстр("ru = 'Отображать:'") + " " + "Автопарк ...";
	Элементы.ОтборыДанныеУАТ.Подсказка = Нстр("ru = 'Отображать:'") + " " + "Автопарк не совпадает с сервисом";
	
	ОтображатьСопоставленныеУАТПриИзменении();

КонецПроцедуры

&НаКлиенте
Процедура Сопоставить(Команда)
	
	ТекущиеДанныеВнешняяСистема = Элементы.СписокВнешняяСистема.ТекущиеДанные;
	Если ТекущиеДанныеВнешняяСистема = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекТС = Элементы.СписокТС.ТекущиеДанные;
	Если ТекТС = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ТекТС      = ТекТС.Ссылка;
	ИДвСистеме = ТекущиеДанныеВнешняяСистема.ИДвСистеме;

	СопоставитьТС(ТекТС, ИДвСистеме);
	
КонецПроцедуры

&НаКлиенте
Процедура СопоставитьВсе(Команда)
		
	флагТСНайдены = Ложь;
	
	СопоставитьВсеСервер(мсвСопоставленныеТС, флагТСНайдены);
	Если флагТСНайдены Тогда
		СопоставитьКлиент(мсвСопоставленныеТС);
		Для Каждого ТекТС Из мсвСопоставленныеТС Цикл
			ПрименитьОтборыВнешняяСистема(ТекТС.ИдвСистеме);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Записать(Команда)
	Если мсвСопоставленныеТС <> Неопределено 
		И ТипЗнч(мсвСопоставленныеТС) = Тип("Массив") 
		И мсвСопоставленныеТС.Количество()>0 Тогда
		Для Каждого ТекСтрока Из мсвСопоставленныеТС Цикл
			ЗаписатьСервер(ТипВнешнейСистемы = ПредопределенноеЗначение("Перечисление.уатТипыВнешнихСистем.СистемаМониторинга"), 
			ТекСтрока.ТекТС, ТекСтрока.ИДвСистеме, ТекСтрока.ВнешняяСистема, УчетнаяЗапись, ТипВнешнейСистемы = ПредопределенноеЗначение("Перечисление.уатТипыВнешнихСистем.СервисПарковок"));
		КонецЦикла;
		мсвСопоставленныеТС = Новый Массив();
		ПоказатьПредупреждение(, НСтр("ru = 'Изменения записаны успешно!'"));
		Элементы.СписокТС.Обновить();
	Иначе
		ПоказатьПредупреждение(, НСтр("ru = 'Не выбраны данные для сопоставления!'"));
	КонецЕсли;
	СохранитьНастройки(ТипВнешнейСистемы, ВнешняяСистема, УчетнаяЗапись, ОтображатьСопоставленныеВнешняяСистема, ОтображатьСопоставленныеУАТ);
КонецПроцедуры

&НаКлиенте
Процедура ВнешняяСистемаПриИзменении(Команда)
	
	Для Каждого ТекСтрока Из МассивВнешниеСистемы Цикл
		Элементы[ТекСтрока.Значение.ИмяКнопки].Пометка = Ложь;
		Если Команда.Имя = ТекСтрока.Значение.ИмяКнопки Тогда
			Элементы[ТекСтрока.Значение.ИмяКнопки].Пометка = Истина;
			Элементы.ВнешниеСистемы.Заголовок = Нстр("en = 'System:'; ru = 'Система:'")
				+ " " + ТекСтрока.Значение.Представление;
			ВнешняяСистема = ТекСтрока.Значение.Ссылка;
		КонецЕсли;
	КонецЦикла;
	
	мсвСопоставленныеТС = Новый Массив();
	МассивДублей        = Новый Массив();
	
	ТипВнешнейСистемы   = ПредопределенноеЗначение("Перечисление.уатТипыВнешнихСистем.ПустаяСсылка");
	Если ЗначениеЗаполнено(ВнешняяСистема) Тогда
		ТипВнешнейСистемы = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ВнешняяСистема, "ТипВнешнейСистемы");
	КонецЕсли;
	
	СформироватьПодменюУчетныеЗаписи();
	УстановитьВидимость(ТипВнешнейСистемы, ВнешняяСистема, УчетнаяЗапись);
	ЗаполнитьСписокВнешняяСистемаКлиент(ВнешняяСистема, УчетнаяЗапись);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокТС, "ТекСистемаСтрока", уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ВнешняяСистема, "НаименованиеПС"));
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокТС, "ТекСистема", ВнешняяСистема);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокТС, "СистемаМониторинга", ТипВнешнейСистемы
		= ПредопределенноеЗначение("Перечисление.уатТипыВнешнихСистем.СистемаМониторинга"));
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокТС, "СервисПарковок", ТипВнешнейСистемы
		= ПредопределенноеЗначение("Перечисление.уатТипыВнешнихСистем.СервисПарковок"));
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокТС, "ТекДата", ТекущаяДата());
	
КонецПроцедуры

&НаКлиенте
Процедура УчетнаяЗаписьПриИзменении(Команда)
	
	Для Каждого ТекСтрока Из МассивУчетныеЗаписи Цикл
		Элементы[ТекСтрока.Значение.ИмяКнопки].Пометка = Ложь;
		Если Команда.Имя = ТекСтрока.Значение.ИмяКнопки Тогда
			Элементы[ТекСтрока.Значение.ИмяКнопки].Пометка = Истина;
			Элементы.УчетныеЗаписи.Заголовок = Нстр("en = 'System:'; ru = 'Учетная запись:'")
			+ " " + ТекСтрока.Значение.Представление;
			УчетнаяЗапись = ТекСтрока.Значение.Ссылка;
		КонецЕсли;
	КонецЦикла;

	МассивДублей = Новый Массив();
	
	СписокВнешняяСистема.Очистить();
	СписокВнешняяСистема_кэш.Очистить();
	
	Если НЕ ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		Возврат;
	КонецЕсли;
	
	мсвСопоставленныеТС = Новый Массив();
	ЗаполнитьСписокВнешняяСистемаКлиент(ВнешняяСистема, УчетнаяЗапись);
	
	УстановитьВидимость(ТипВнешнейСистемы, ВнешняяСистема, УчетнаяЗапись);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТС(Команда)
	
	Если НЕ ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		Возврат;
	КонецЕсли;

	ТекСтрока = Элементы.СписокТС.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекстОшибки = "";
	Если ЗначениеЗаполнено(ТекСтрока.ИДвСистеме) Тогда
		ТекстОшибки = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки + Символы.НПП, "") +
			НСтр("ru='У данного ТС уже заполнен ID в сервисе.'");
	КонецЕсли;

	Если ВнешняяСистема = ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.ШтрафовНет")
		И НЕ ЗначениеЗаполнено(ТекСтрока.СТС) Тогда
		ТекстОшибки = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки + Символы.НПП, "") +
		НСтр("ru='Номер свидетельства о регистрации ТС должен быть в формате 11АА123456 или 1122123456.'");
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекСтрока.ГосударственныйНомер) Тогда
		ТекстОшибки = ?(ЗначениеЗаполнено(ТекстОшибки), ТекстОшибки + Символы.НПП, "") +
			НСтр("ru='Государственный номер ТС должен быть в формате А001АА177 или АА00199.'");
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекстОшибки) Тогда
		ПоказатьПредупреждение(Неопределено, ТекстОшибки,,"Ошибка");
		Возврат;
	КонецЕсли;
	
	Текстошибки = "";
	ИДвСистеме  = "";
	Если ВнешняяСистема = ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.ШтрафовНет") Тогда
		ИДвСистеме = уатИнтеграции_проф.ШтрафовНет_НовоеТранспортноеСредство(УчетнаяЗапись, ТекСтрока, Текстошибки);
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ПоказатьПредупреждение(Неопределено, ТекстОшибки);
			Возврат;
		Иначе
			ЗаписатьСервер(ТипВнешнейСистемы = ПредопределенноеЗначение("Перечисление.уатТипыВнешнихСистем.СистемаМониторинга"), 
			ТекСтрока.Ссылка, ИДвСистеме, ВнешняяСистема, УчетнаяЗапись);
			СписокТСОбновить(мсвСопоставленныеТС);
			
			ТекстНСТР = НСтр("ru='Новое транспортное средство добавлено успешно.'");
			ПоказатьПредупреждение(Неопределено, ТекстНСТР);
		КонецЕсли;
	Иначе
		ИДвСистеме = уатИнтеграции_проф.Паркоматика_НовоеТранспортноеСредство(УчетнаяЗапись, ТекСтрока, Текстошибки);
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ПоказатьПредупреждение(Неопределено, ТекстОшибки);
			Возврат;
		Иначе
			ЗаписатьСервер(ТипВнешнейСистемы = ПредопределенноеЗначение("Перечисление.уатТипыВнешнихСистем.СистемаМониторинга"), 
			ТекСтрока.Ссылка, ИДвСистеме, ВнешняяСистема, УчетнаяЗапись, Истина);
			СписокТСОбновить(мсвСопоставленныеТС);
			
			ТекстНСТР = НСтр("ru='Новое транспортное средство добавлено успешно.'");
			ПоказатьПредупреждение(Неопределено, ТекстНСТР);
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьСписокВнешняяСистема(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура МассоваяЗагрузкаТС(Команда)
	
	Если НЕ ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		Возврат;
	КонецЕсли;

	КомпоновщикСписокТС = ПолучитьТекущийКомпоновщик("СписокТС");
	КолВоТС = КомпоновщикСписокТС.Количество();
	
	ТекстПредупреждения = СтрШаблон(НСтр("ru='В сервис будет загружено %1 ТС. Продолжить?'"), КолВоТС);

	ПоказатьВопрос(
		Новый ОписаниеОповещения("МассоваяЗагрузкаТСПродолжение", ЭтотОбъект, КомпоновщикСписокТС),
		ТекстПредупреждения,
		РежимДиалогаВопрос.ОКОтмена
	);

КонецПроцедуры

&НаКлиенте
Процедура МассоваяЗагрузкаТСПродолжение(РезультатВопроса, КомпоновщикСписокТС) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.ОК Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТипВнешнейСистемы = ПредопределенноеЗначение("Перечисление.уатТипыВнешнихСистем.СервисШтрафов") Тогда
		Штрафы_МассоваяЗагрузкаТС(КомпоновщикСписокТС);
	ИначеЕсли ВнешняяСистема = ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.Паркоматика") Тогда
		Паркоматика_МассоваяЗагрузкаТС(КомпоновщикСписокТС)
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура Штрафы_МассоваяЗагрузкаТС(КомпоновщикСписокТС)
	ТекстНСТР = "";
	СопоставитьВсе(Неопределено);
	Для Каждого ТекСтрока Из КомпоновщикСписокТС Цикл	
		
		Если ЗначениеЗаполнено(ТекСтрока.ИДвСистеме) 
			ИЛИ ЗначениеЗаполнено(ТекСтрока.ИДвСистемеЗаписано) Тогда
			Продолжить;
		КонецЕсли;
	
		Если НЕ ЗначениеЗаполнено(ТекСтрока.СТС) Тогда
			ТекстНСТР = ?(ЗначениеЗаполнено(ТекстНСТР), ТекстНСТР + Символы.НПП, "") +
				НСтр("ru='ТС %1 не загружено в сервис. Номер свидетельства о регистрации ТС должен быть в формате 11АА123456 или 1122123456.'");
			ТекстНСТР = СтрШаблон(ТекстНСТР, ТекСтрока.Ссылка);
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ТекСтрока.ГосударственныйНомер) Тогда
			ТекстНСТР = ?(ЗначениеЗаполнено(ТекстНСТР), ТекстНСТР + Символы.НПП, "") +
				НСтр("ru='ТС %1 не загружено в сервис. Государственный номер ТС должен быть в формате А001АА177 или АА00199.'");
			ТекстНСТР = СтрШаблон(ТекстНСТР, ТекСтрока.Ссылка);
			Продолжить;
		КонецЕсли;
		
		Текстошибки = "";
		ИДвСистеме  = "";
		Если ВнешняяСистема = ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.ШтрафовНет") Тогда
			ИДвСистеме = уатИнтеграции_проф.ШтрафовНет_НовоеТранспортноеСредство(УчетнаяЗапись, ТекСтрока);
			Если ЗначениеЗаполнено(Текстошибки) Тогда
				ПоказатьПредупреждение(Неопределено, Текстошибки);
				Прервать;
			Иначе
				ЗаписатьСервер(ТипВнешнейСистемы = ПредопределенноеЗначение("Перечисление.уатТипыВнешнихСистем.СистемаМониторинга"), 
				ТекСтрока.Ссылка, ИДвСистеме, ВнешняяСистема, УчетнаяЗапись);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТекстНСТР) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
	КонецЕсли;
	
	СписокТСОбновить(мсвСопоставленныеТС);
	ЗаполнитьСписокВнешняяСистема(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура Паркоматика_МассоваяЗагрузкаТС(КомпоновщикСписокТС)
	ТекстНСТР = "";
	СопоставитьВсе(Неопределено);
	Для Каждого ТекСтрока Из КомпоновщикСписокТС Цикл	
		
		Если ЗначениеЗаполнено(ТекСтрока.ИДвСистеме) 
			ИЛИ ЗначениеЗаполнено(ТекСтрока.ИДвСистемеЗаписано) Тогда
			Продолжить;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(ТекСтрока.ГосударственныйНомер) Тогда
			Продолжить;
		КонецЕсли;
		
		Текстошибки = "";
		ИДвСистеме  = "";
		Если ВнешняяСистема = ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.Паркоматика") Тогда
			ИДвСистеме = уатИнтеграции_проф.Паркоматика_НовоеТранспортноеСредство(УчетнаяЗапись, ТекСтрока);
			Если ЗначениеЗаполнено(Текстошибки) Тогда
				ПоказатьПредупреждение(Неопределено, Текстошибки);
				Прервать;
			Иначе
				ЗаписатьСервер(ТипВнешнейСистемы = ПредопределенноеЗначение("Перечисление.уатТипыВнешнихСистем.СистемаМониторинга"), 
				ТекСтрока.Ссылка, ИДвСистеме, ВнешняяСистема, УчетнаяЗапись, Истина);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	СписокТСОбновить(мсвСопоставленныеТС);
	ЗаполнитьСписокВнешняяСистема(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьТС(Команда)
	
	Если НЕ ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		Возврат;
	КонецЕсли;

	ТекСтрока = Элементы.СписокТС.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекСтрока.ИДвСистеме) Тогда
		ТекстНСТР = НСтр("ru='У данного ТС не заполнен ID в сервисе'");
		ПоказатьПредупреждение(Неопределено, ТекстНСТР,,"Ошибка");
		Возврат;
	КонецЕсли;
	
	Текстошибки = "";
	Если ВнешняяСистема = ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.ШтрафовНет") Тогда
		уатИнтеграции_проф.ШтрафовНет_УдалениеТранспортногоСредства(УчетнаяЗапись, ТекСтрока.ИДвСистеме, Текстошибки);
		Если ЗначениеЗаполнено(Текстошибки) Тогда
			ПоказатьПредупреждение(Неопределено, Текстошибки);
			Возврат;
		Иначе
			ЗаписатьСервер(ТипВнешнейСистемы = ПредопределенноеЗначение("Перечисление.уатТипыВнешнихСистем.СистемаМониторинга"), 
				ТекСтрока.Ссылка, "", ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.ПустаяСсылка"),
				ПредопределенноеЗначение("Справочник.уатУчетныеЗаписиСервисовШтрафов.ПустаяСсылка"));
				
			Индекс = 0;
			Для Каждого ТекСтрокамсв Из мсвСопоставленныеТС Цикл
				Если ТекСтрокамсв.ТекТС = ТекСтрока.Ссылка Тогда
					мсвСопоставленныеТС.Удалить(Индекс);
					Прервать;
				КонецЕсли;
				Индекс = Индекс + 1;
			КонецЦикла;
			СписокТСОбновить(мсвСопоставленныеТС);
			ТекстНСТР = НСтр("ru='Транспортное средство успешно удалено.'");
			ПоказатьПредупреждение(Неопределено, ТекстНСТР);
		КонецЕсли;
	Иначе
		уатИнтеграции_проф.Паркоматика_УдалениеТранспортногоСредства(УчетнаяЗапись, ТекСтрока.ИДвСистеме, Текстошибки);
		Если ЗначениеЗаполнено(Текстошибки) Тогда
			ПоказатьПредупреждение(Неопределено, Текстошибки);
			Возврат;
		Иначе
			ЗаписатьСервер(ТипВнешнейСистемы = ПредопределенноеЗначение("Перечисление.уатТипыВнешнихСистем.СистемаМониторинга"), 
				ТекСтрока.Ссылка, "", ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.ПустаяСсылка"),
				ПредопределенноеЗначение("Справочник.уатУчетныеЗаписиСервисовШтрафов.ПустаяСсылка"));
				
			Индекс = 0;
			Для Каждого ТекСтрокамсв Из мсвСопоставленныеТС Цикл
				Если ТекСтрокамсв.ТекТС = ТекСтрока.Ссылка Тогда
					мсвСопоставленныеТС.Удалить(Индекс);
					Прервать;
				КонецЕсли;
				Индекс = Индекс + 1;
			КонецЦикла;
			СписокТСОбновить(мсвСопоставленныеТС);
			ТекстНСТР = НСтр("ru='Транспортное средство успешно удалено.'");
			ПоказатьПредупреждение(Неопределено, ТекстНСТР);
		КонецЕсли;
	КонецЕсли;
	
	ЗаполнитьСписокВнешняяСистема(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьУчетнуюЗапись(Команда)
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("НастроитьУчетнуюЗапись", ЭтотОбъект);
	ПараметрыФормы      = Новый Структура("Ключ", УчетнаяЗапись);
	
	Если ТипВнешнейСистемы = ПредопределенноеЗначение("Перечисление.уатТипыВнешнихСистем.СистемаМониторинга") Тогда
		Если НЕ ЗначениеЗаполнено(УчетнаяЗапись) Тогда
			ПараметрыФормы.Вставить("СистемаМониторинга", ВнешняяСистема);
		КонецЕсли;

		ОткрытьФорму("Справочник.уатУчетныеЗаписиСистемыМониторинга.Форма.ФормаЭлемента", ПараметрыФормы,,,,,ОповещениеОЗакрытии);
	ИначеЕсли ТипВнешнейСистемы = ПредопределенноеЗначение("Перечисление.уатТипыВнешнихСистем.СервисШтрафов") Тогда
		ОткрытьФорму("Справочник.уатУчетныеЗаписиСервисовШтрафов.Форма.ФормаЭлемента", ПараметрыФормы,,,,,ОповещениеОЗакрытии);
	ИначеЕсли ТипВнешнейСистемы = ПредопределенноеЗначение("Перечисление.уатТипыВнешнихСистем.СервисПарковок") Тогда
		
		Если НЕ ЗначениеЗаполнено(УчетнаяЗапись) Тогда
			ПараметрыФормы.Вставить("СервисПарковок", ВнешняяСистема);
		КонецЕсли;

		ОткрытьФорму("Справочник.уатУчетныеЗаписиСервисовПарковок.Форма.ФормаЭлемента", ПараметрыФормы,,,,,ОповещениеОЗакрытии);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьУчетнуюЗапичь(Команда)
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("НастроитьУчетнуюЗапись", ЭтотОбъект);
	Если ТипВнешнейСистемы = ПредопределенноеЗначение("Перечисление.уатТипыВнешнихСистем.СистемаМониторинга") Тогда
		ПараметрыФормы = Новый Структура("СистемаМониторинга", ВнешняяСистема);
		ОткрытьФорму("Справочник.уатУчетныеЗаписиСистемыМониторинга.Форма.ФормаЭлемента", ПараметрыФормы,,,,, ОповещениеОЗакрытии);
	ИначеЕсли ТипВнешнейСистемы = ПредопределенноеЗначение("Перечисление.уатТипыВнешнихСистем.СервисШтрафов") Тогда
		ОткрытьФорму("Справочник.уатУчетныеЗаписиСервисовШтрафов.Форма.ФормаЭлемента",,,,,, ОповещениеОЗакрытии);
	ИначеЕсли ТипВнешнейСистемы = ПредопределенноеЗначение("Перечисление.уатТипыВнешнихСистем.СервисПарковок") Тогда
		ПараметрыФормы = Новый Структура("СервисПарковок", ВнешняяСистема);
		ОткрытьФорму("Справочник.уатУчетныеЗаписиСервисовПарковок.Форма.ФормаЭлемента", ПараметрыФормы,,,,, ОповещениеОЗакрытии);
	КонецЕсли;

КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьВидимость(ТипВнешнейСистемы, ВнешняяСистема, УчетнаяЗапись)
	
	Элементы.ГруппаДанныеВнешнейСистемы.Ширина			  = 60;
	Элементы.СтрокаПоиска.Ширина						  = 0;
	Элементы.ГруппаОтборыДанныеУАТСтандартные.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Вертикальная;

	Элементы.УчетныеЗаписи.Видимость = ЗначениеЗаполнено(ВнешняяСистема);
	Элементы.УдалитьТС.Видимость	 = Истина;
	
	Элементы.Автопарк.Видимость                         = Ложь;
	Элементы.СТС.Видимость                              = Ложь;
	Элементы.СписокВнешняяСистемаСТС.Видимость          = Ложь;
	Элементы.СписокВнешняяСистемаVIN.Видимость          = Ложь;
	Элементы.СписокВнешняяСистемаАвтопарк.Видимость     = Ложь;
	Элементы.ОперацииЗагрузки.Видимость                 = Ложь;
	Элементы.ТС_Автопарк.Видимость                      = Ложь;
	Элементы.ТС_СтатусВСервисе.Видимость                = Ложь;
	Элементы.Принадлежность.Видимость                   = Ложь;
	Элементы.СписокВнешняяСистемаНаименование.Видимость = Ложь;
	Элементы.VIN.Видимость                              = Ложь;
	
	Элементы.СписокВнешняяСистемаГосударственныйНомер.Видимость = НЕ ВнешняяСистема = ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.Omnicomm")
	И НЕ ВнешняяСистема = ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.Wialon")
	И НЕ ВнешняяСистема = ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.СКАУТ");
	
	Элементы.СписокВнешняяСистемаГаражныйНомер.Видимость = НЕ ВнешняяСистема = ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.Wialon")
	И НЕ ВнешняяСистема = ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.ШтрафовНет")
	И НЕ ВнешняяСистема = ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.Паркоматика")
	И НЕ ВнешняяСистема = ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.АвтоГРАФ");

	Если ОтображатьСопоставленныеУАТ = "Автопарк не совпадает с сервисом" Тогда
		ОтображатьСопоставленныеУАТ = "Все";
	КонецЕсли;
	
	Элементы.ОтобразитьАвтопаркНеСовпадаетССервисом.Видимость = Ложь;
	Если ТипВнешнейСистемы = ПредопределенноеЗначение("Перечисление.уатТипыВнешнихСистем.СервисШтрафов") Тогда
		Элементы.ОтобразитьАвтопаркНеСовпадаетССервисом.Видимость = Истина;
		
		Элементы.Автопарк.Видимость                         = Истина;
		Элементы.СТС.Видимость                              = Истина;
		Элементы.СписокВнешняяСистемаСТС.Видимость          = Истина;
		Элементы.СписокВнешняяСистемаАвтопарк.Видимость     = Истина;
		Элементы.ОперацииЗагрузки.Видимость                 = Истина;
		Элементы.ТС_Автопарк.Видимость                      = Истина;
		Элементы.ТС_СтатусВСервисе.Видимость                = Истина;
		Элементы.СписокВнешняяСистемаНаименование.Видимость = Истина;
		
		Элементы.ТС_Автопарк.СписокВыбора.Очистить();
		Элементы.ТС_Автопарк.СписокВыбора.Добавить("По текущей учетной записи", "По текущей учетной записи");
		Элементы.ТС_Автопарк.СписокВыбора.Добавить("По всем учетным записям",   "По всем учетным записям");
		Элементы.ТС_Автопарк.СписокВыбора.Добавить("Не входящие в автопарки", 	"Не входящие в автопарки");
		ТС_Автопарк = "По текущей учетной записи";
		
		Элементы.ТС_СтатусВСервисе.СписокВыбора.Очистить();
		Элементы.ТС_СтатусВСервисе.СписокВыбора.Добавить("Новые",      "Новые");
		Элементы.ТС_СтатусВСервисе.СписокВыбора.Добавить("Активные",   "Активные");
		Элементы.ТС_СтатусВСервисе.СписокВыбора.Добавить("Неактивные", "Неактивные");
		Элементы.ТС_СтатусВСервисе.СписокВыбора.Добавить("Архивные",   "Архивные");
		
		
		Элементы.УдалитьТС.Видимость			 = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(УчетнаяЗапись, "Версия") <> 
			ПредопределенноеЗначение("Перечисление.уатВерсииШтрафовНет.ШтрафовНет_3");
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокТС.Отбор, "ПринадлежностьТС", Принадлежность,,, Ложь);
		
	ИначеЕсли ТипВнешнейСистемы = ПредопределенноеЗначение("Перечисление.уатТипыВнешнихСистем.СервисПарковок") Тогда
		Элементы.СТС.Видимость               = Истина;
		Элементы.ОперацииЗагрузки.Видимость  = Истина;
		Элементы.ТС_СтатусВСервисе.Видимость = Истина;
		
		Элементы.ТС_СтатусВСервисе.СписокВыбора.Очистить();
		Элементы.ТС_СтатусВСервисе.СписокВыбора.Добавить("Активные",   "Активные");
		Элементы.ТС_СтатусВСервисе.СписокВыбора.Добавить("Неактивные", "Неактивные");
		
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокТС.Отбор, "ПринадлежностьТС", Принадлежность,,, Ложь);

	ИначеЕсли ТипВнешнейСистемы = ПредопределенноеЗначение("Перечисление.уатТипыВнешнихСистем.СистемаМониторинга") Тогда
		ПринадлежностьПриИзменении(Неопределено);
		
		Элементы.Принадлежность.Видимость                   = Истина;
		Элементы.СписокВнешняяСистемаVIN.Видимость          = Истина;
		Элементы.СписокВнешняяСистемаНаименование.Видимость = Истина;
		Элементы.VIN.Видимость                              = Ложь;
		
		
		ИдентификаторДействия = "ОбщаяФорма.уатФормаСинхронизацииТСмеждуУАТиМониторингом.УстановитьВидимость";
		#Если Не ТолстыйКлиентОбычноеПриложение Тогда
		уатРаботаСРасширениямиКлиент.ПСМ_ВыполнитьДействияВФорме(ИдентификаторДействия,
		уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ВнешняяСистема, "НаименованиеПС"),,ЭтотОбъект);
		#КонецЕсли

	Иначе
		ПринадлежностьПриИзменении(Неопределено);
	КонецЕсли;
	
	Элементы.ГруппаОтборыДанныеМониторинга.Видимость = Элементы.ТС_Автопарк.Видимость
		ИЛИ Элементы.ТС_СтатусВСервисе.Видимость;
		
	Элементы.ГруппаОтборыДанныеУАТ.Видимость = Элементы.Принадлежность.Видимость
		ИЛИ Элементы.ГруппаОтборыДанныеУАТСтандартные.ПодчиненныеЭлементы.Количество() > 0;
		
	Элементы.СписокВнешняяСистемаГосударственныйНомер.Заголовок	 = Нстр("en = 'License plate number'; ru = 'Гос. номер'");
	Элементы.СписокВнешняяСистемаГаражныйНомер.Заголовок		 = Нстр("en = 'Garage number'; ru = 'Гаражный номер'");
	Элементы.СписокВнешняяСистемаНаименование.Заголовок			 = Нстр("en = 'Name'; ru = 'Наименование'");

	Если ЗначениеЗаполнено(ВнешняяСистема) Тогда
		
		Элементы.СписокВнешняяСистемаГосударственныйНомер.Заголовок	 = Нстр("en = 'License plate number in'; ru = 'Гос. номер в'") + " " + ВнешняяСистема;
		Элементы.ГосударственныйНомер.Заголовок						 = Нстр("en = 'License plate number in 1С'; ru = 'Гос. номер в 1С'");
		
		Если НЕ Элементы.СписокВнешняяСистемаГосударственныйНомер.Видимость Тогда
			Элементы.СписокВнешняяСистемаГаражныйНомер.Заголовок	 = Нстр("en = 'Garage number in'; ru = 'Гаражный номер в'") + " " + ВнешняяСистема;
			Если НЕ Элементы.СписокВнешняяСистемаГаражныйНомер.Видимость Тогда
				Элементы.СписокВнешняяСистемаНаименование.Заголовок	 = Нстр("en = 'Name in'; ru = 'Наименование в'") + " " + ВнешняяСистема;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;

	
КонецПроцедуры

&НаКлиенте
Процедура ПрименитьОтборыВнешняяСистема(ИДвСистеме = Неопределено)
	СписокВнешняяСистема.Очистить();
	
	Если ЗначениеЗаполнено(ИДвСистеме) Тогда
		мСписокВнешняяСистема = СписокВнешняяСистема_кэш.НайтиСтроки(Новый Структура("ИДвСистеме", ИДвСистеме));
		Если мСписокВнешняяСистема.Количество() <> 0 Тогда
			мСписокВнешняяСистема[0].ТССопоставлена = Истина;
		КонецЕсли;
	Конецесли;

	Для Каждого ТекСтрока Из СписокВнешняяСистема_кэш Цикл
		Если (ОтображатьСопоставленныеВнешняяСистема = "Неподключенные" 
			И НЕ ТекСтрока.ТССопоставлена)
			ИЛИ (ОтображатьСопоставленныеВнешняяСистема = "Подключенные" 
			И ТекСтрока.ТССопоставлена)
			ИЛИ ОтображатьСопоставленныеВнешняяСистема = "Все"
			ИЛИ ОтображатьСопоставленныеВнешняяСистема = "" Тогда
			
			НоваяСтрока = СписокВнешняяСистема.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТС_СтатусВСервисе) Тогда

		МассивДляУдаления = Новый Массив();
		Для Каждого ТекСтрока Из СписокВнешняяСистема Цикл
			Если ТипВнешнейСистемы = ПредопределенноеЗначение("Перечисление.уатТипыВнешнихСистем.СервисШтрафов") Тогда
			Если ТекСтрока.Статус <> "active" 
				И ТС_СтатусВСервисе = "Активные" Тогда
				МассивДляУдаления.Добавить(ТекСтрока);
			ИначеЕсли ТекСтрока.Статус <> "new" 
				И ТС_СтатусВСервисе = "Новые" Тогда
				МассивДляУдаления.Добавить(ТекСтрока);
			ИначеЕсли ТекСтрока.Статус <> "archived" 
				И ТС_СтатусВСервисе = "Архивные" Тогда
				МассивДляУдаления.Добавить(ТекСтрока);
			ИначеЕсли ТекСтрока.Статус <> "inactive" 
				И ТС_СтатусВСервисе = "Неактивные" Тогда
				МассивДляУдаления.Добавить(ТекСтрока);
			КонецЕсли;
		Иначе
			Если ТекСтрока.Статус <> "1" 
				И ТС_СтатусВСервисе = "Активные" Тогда
				МассивДляУдаления.Добавить(ТекСтрока);
			ИначеЕсли ТекСтрока.Статус <> "0" 
				И ТС_СтатусВСервисе = "Неактивные" Тогда
				МассивДляУдаления.Добавить(ТекСтрока);
			КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ТекСтрока Из МассивДляУдаления Цикл
			СписокВнешняяСистема.Удалить(ТекСтрока);
		КонецЦикла;

	КонецЕсли;
	СписокТСОбновить(мсвСопоставленныеТС);
	СписокВнешняяСистема.Сортировать("ТССопоставлена УБЫВ, Наименование, СТС");
КонецПроцедуры

&НаКлиенте
Процедура СписокТСОбновить(мсвСопоставленныеТС)
	
	мсвСписокВнешняяСистема = Новый Массив();
	Для Каждого ТекСтрока Из СписокВнешняяСистема_кэш Цикл
		мсвСписокВнешняяСистема.Добавить(Новый Структура("ТССопоставлена, ИДвСистеме, Наименование", 
			ТекСтрока.ТССопоставлена,ТекСтрока.ИДвСистеме,ТекСтрока.Наименование));
	КонецЦикла;

	СписокТС.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("СписокВнешняяСистема", мсвСписокВнешняяСистема);
	СписокТС.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("СистемаМониторинга", 
	ТипВнешнейСистемы = ПредопределенноеЗначение("Перечисление.уатТипыВнешнихСистем.СистемаМониторинга"));
	СписокТС.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("СервисПарковок", 
	ТипВнешнейСистемы = ПредопределенноеЗначение("Перечисление.уатТипыВнешнихСистем.СервисПарковок"));
	СписокТС.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("мсвСопоставленныеТС", мсвСопоставленныеТС);
	СписокТС.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("МассивДублей", МассивДублей);
	Элементы.СписокТС.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура СопоставитьТС(ТекТС, ИДвСистеме)

	ФлагТСДобавлена = Ложь;
	Для Каждого ТекСтрока Из мсвСопоставленныеТС Цикл
		Если ТекСтрока.ТекТС = ТекТС Тогда
			ФлагТСДобавлена = Истина;
			ТекСтрока.ИДвСистеме     = ИДвСистеме;
			ТекСтрока.ВнешняяСистема = ВнешняяСистема;
			Прервать;
		КонецЕсли;
	КонецЦикла;

	Если Не ФлагТСДобавлена Тогда
		мсвСопоставленныеТС.Добавить(Новый Структура("ТекТС, ИДвСистеме, ВнешняяСистема", ТекТС, ИДвСистеме, ВнешняяСистема));
	КонецЕСли;
	НайтиДублиИдентификаторовТС(ТекТС, ИДвСистеме, ТипВнешнейСистемы, УчетнаяЗапись, мсвСопоставленныеТС, МассивДублей);
	СопоставитьКлиент(мсвСопоставленныеТС);
	ПрименитьОтборыВнешняяСистема(ИдвСистеме);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура НайтиДублиИдентификаторовТС(ТекТС, ИДвСистеме, ТипВнешнейСистемы, УчетнаяЗапись, мсвСопоставленныеТС, МассивДублей)

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Запрос.УстановитьПараметр("ТекТС",         ТекТС);
	Запрос.УстановитьПараметр("ИДвСистеме",    ИДвСистеме);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	уатТС.Ссылка КАК Ссылка
	               |ИЗ
	               |	Справочник.уатТС КАК уатТС
	               |ГДЕ
	               |	уатТС.Ссылка <> &ТекТС
	               |	И уатТС.УчетнаяЗаписьСистемыМониторинга = &УчетнаяЗапись
	               |	И уатТС.ИДвСистемеНавигации = &ИДвСистеме
	               |	И НЕ уатТС.ПометкаУдаления
	               |	И НЕ уатТС.ЭтоГруппа";
	Если ТипВнешнейСистемы = Перечисления.уатТипыВнешнихСистем.СервисШтрафов Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИДвСистемеНавигации", "ИДвСервисеШтрафов");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "УчетнаяЗаписьСистемыМониторинга", "УчетнаяЗаписьCервисаШтрафов");
	ИначеЕсли ТипВнешнейСистемы = Перечисления.уатТипыВнешнихСистем.СервисПарковок Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ИДвСистемеНавигации", "ИДвСервисеПарковок");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "УчетнаяЗаписьСистемыМониторинга", "УчетнаяЗаписьCервисаПарковок");
	КонецЕсли;
	
	МассивДублей = Новый Массив();
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		МассивДублей.Добавить(Выборка.Ссылка);
	КонецЦикла;
	
	МассивДублейУдалить = Новый Массив();
	Для Каждого ТекСтрока Из мсвСопоставленныеТС Цикл
		Если ТекСтрока.ТекТС = ТекТС Тогда
			Продолжить;
		КонецЕсли;
		ТекДубль = МассивДублей.Найти(ТекСтрока.ТекТС);
		Если ТекДубль <> Неопределено Тогда
			МассивДублей.Удалить(ТекДубль);
		КонецЕсли;
		Если ТекСтрока.ИДвСистеме = ИДвСистеме Тогда
			МассивДублей.Добавить(ТекСтрока.ТекТС);
		КонецЕсли;
	КонецЦикла;
	
	ТекстНСТР = "";
	Если МассивДублей.Количество() <> 0 Тогда
		ТекстНСТР = НСтр("ru='Обнаружены ТС с дублированием значения уникального идентификатора в сервисе: '");
	КонецЕсли;
	
	Для Каждого ТекСтрока Из МассивДублей Цикл
		ТекстНСТР = ТекстНСТР + Символы.ПС + ТекСтрока;
	КонецЦИкла;
	Если ЗначениеЗаполнено(ТекстНСТР) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
	Конецесли;


КонецПроцедуры

&НаКлиенте
Процедура СопоставитьКлиент(мсвСопоставленныеТС)
	СписокТС.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("СписокВнешняяСистема", СписокВнешняяСистема);
	СписокТС.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("СистемаМониторинга", 
		ТипВнешнейСистемы = ПредопределенноеЗначение("Перечисление.уатТипыВнешнихСистем.СистемаМониторинга"));
	СписокТС.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("СервисПарковок", 
		ТипВнешнейСистемы = ПредопределенноеЗначение("Перечисление.уатТипыВнешнихСистем.СервисПарковок"));
	СписокТС.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("мсвСопоставленныеТС", мсвСопоставленныеТС);
	СписокТС.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("МассивДублей", МассивДублей);

	Элементы.СписокТС.Обновить();
	Элементы.СписокВнешняяСистема.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокВнешняяСистемаКлиент(ВнешняяСистема, УчетнаяЗапись)
	
	СписокВнешняяСистема.Очистить();
	СписокВнешняяСистема_кэш.Очистить();
	
	Если НЕ ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		Возврат;
	КонецЕсли;
	
	ДлительнаяОперация = ЗаполнитьСписокВнешняяСистемаДлительнаяОперацияСервер(ВнешняяСистема, УчетнаяЗапись, ТС_Автопарк);
	
	НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	НастройкиОжидания.ВыводитьОкноОжидания = Истина;
	
	Обработчик = Новый ОписаниеОповещения("ЗаполнитьСписокВнешняяСистемаДлительнаяОперацияЗавершениеКлиент", ЭтотОбъект);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, НастройкиОжидания);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСписокВнешняяСистемаДлительнаяОперацияЗавершениеКлиент(Операция, ДополнительныеПараметры) Экспорт
	
	Если Операция = Неопределено Тогда
		
	Иначе
		Если Операция.Статус = "Выполнено" Тогда
			Если ЭтоАдресВременногоХранилища(Операция.АдресРезультата) Тогда
				Данные = ПолучитьИзВременногоХранилища(Операция.АдресРезультата);
				Если ТипЗнч(Данные) = Тип("Структура") Тогда
					Если Данные.Свойство("ТекстОшибки")
						И ЗначениеЗаполнено(Данные.ТекстОшибки) Тогда
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Данные.ТекстОшибки);
						Возврат;
					КонецЕсли;
					Если Данные.Свойство("СписокВнешняяСистема") Тогда
						Для Каждого ТекСтрока Из Данные.СписокВнешняяСистема Цикл
							НоваСтрока = СписокВнешняяСистема_кэш.Добавить();
							ЗаполнитьЗначенияСвойств(НоваСтрока, ТекСтрока);
							
							НоваСтрока = СписокВнешняяСистема.Добавить();
							ЗаполнитьЗначенияСвойств(НоваСтрока, ТекСтрока);
						КонецЦикла;
					КонецЕсли;
					ПрименитьОтборыВнешняяСистема();
				КонецЕсли;
			КонецЕсли;
		Иначе
			ВызватьИсключение Операция.КраткоеПредставлениеОшибки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьСервер(СистемаМониторинга, ТекТС, ИДвСистеме, мВнешняяСистема, мУчетнаяЗапись, Парковки = Ложь)
	
	Объект = ТекТС.Ссылка.ПолучитьОбъект();
	
	ФлагВнешняяСистемаСтрока = Ложь;
	Если мВнешняяСистема.НаименованиеПС = "Спутник-Авто" Тогда
		МассивРасширений = РасширенияКонфигурации.Получить();
		Для Каждого ТекСтрока Из МассивРасширений Цикл
			Если ТекСтрока.Имя = "УАТ_ПодключениеСистемыМониторингаСпутникАвто"
				И ТекСтрока.Версия = "" Тогда
				ФлагВнешняяСистемаСтрока = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если СистемаМониторинга Тогда
		Если Объект.ИсточникФактическихДанныхДляКартографии = Перечисления.уатИсточникФактическихДанныхДляКартографии.ПустаяСсылка() Тогда
			Объект.ИсточникФактическихДанныхДляКартографии = Перечисления.уатИсточникФактическихДанныхДляКартографии.СистемаСпутниковогоМониторинга;
		КонецЕсли;
		Объект.ИспользуемаяСистемаGPS          = ?(ФлагВнешняяСистемаСтрока, мВнешняяСистема.НаименованиеПС, мВнешняяСистема);
		Объект.УчетнаяЗаписьСистемыМониторинга = мУчетнаяЗапись;
		Объект.ИДвСистемеНавигации             = ИДвСистеме;
	ИначеЕсли Парковки Тогда
		Объект.ИспользуемыйСервисПарковок   = мВнешняяСистема;
		Объект.УчетнаяЗаписьCервисаПарковок = мУчетнаяЗапись;
		Объект.ИДвСервисеПарковок           = ИДвСистеме;
	Иначе
		Объект.ИспользуемыйСервисШтрафов   = мВнешняяСистема;
		Объект.УчетнаяЗаписьCервисаШтрафов = мУчетнаяЗапись;
		Объект.ИДвСервисеШтрафов           = ИДвСистеме;
		
		ТекстОшибки = "";
		уатИнтеграции_проф.ОбновитьИнформациюОТСВСервисеШтрафов(мУчетнаяЗапись, Объект.Ссылка, ИДвСистеме, ТекстОшибки);
		Если ЗначениеЗаполнено(ТекстОшибки) Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Попытка
		Объект.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСвязиПараметровВыбора(ТипВнешнейСистемы)
	//
	//НовыйМассив = Новый Массив();
	//Элементы.УчетнаяЗапись.ПараметрыВыбора	 = Новый ФиксированныйМассив(НовыйМассив);
	//Если ВнешняяСистема = Справочники.уатВнешниеСистемы.АвтоГРАФ Тогда
	//	НоваяСвязь = Новый ПараметрВыбора("Отбор.Версия", ПредопределенноеЗначение("Перечисление.уатВерсииАвтоГРАФ.АвтоГРАФ_5"));
	//	НовыйМассив = Новый Массив();
	//	НовыйМассив.Добавить(НоваяСвязь);
	//	Элементы.УчетнаяЗапись.ПараметрыВыбора	 = Новый ФиксированныйМассив(НовыйМассив);
	//КонецЕсли;

	//Если ТипВнешнейСистемы = ПредопределенноеЗначение("Перечисление.уатТипыВнешнихСистем.СистемаМониторинга") Тогда
	//	
	//	НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.СистемаМониторинга", "ВнешняяСистема");
	//	НовыйМассив = Новый Массив();
	//	НовыйМассив.Добавить(НоваяСвязь);
	//	
	//ИначеЕсли ТипВнешнейСистемы = ПредопределенноеЗначение("Перечисление.уатТипыВнешнихСистем.СервисШтрафов") Тогда
	//	
	//	НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.ВнешняяСистема", "ВнешняяСистема");
	//	НовыйМассив = Новый Массив();
	//	НовыйМассив.Добавить(НоваяСвязь);
	//	
	//ИначеЕсли ТипВнешнейСистемы = ПредопределенноеЗначение("Перечисление.уатТипыВнешнихСистем.СервисПарковок") Тогда
	//	
	//	НоваяСвязь = Новый СвязьПараметраВыбора("Отбор.ВнешняяСистема", "ВнешняяСистема");
	//	НовыйМассив = Новый Массив();
	//	НовыйМассив.Добавить(НоваяСвязь);
	//КонецЕсли;
	//Элементы.УчетнаяЗапись.СвязиПараметровВыбора = Новый ФиксированныйМассив(НовыйМассив);
	//
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТекущийКомпоновщик(ИмяСписка)
	
	мЭлементы = Новый Массив();
	
	Схема = Элементы[ИмяСписка].ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	Настройки = Элементы[ИмяСписка].ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	
	Если Настройки.Структура.Количество() = 0 Тогда 
		Возврат Новый Массив();
	КонецЕсли;
		
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	Родитель = "";
	тПроцессорВывода = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	Для Каждого ТекЭлемент Из тПроцессорВывода Цикл
		ДанныеЭлемент = Новый Структура();
		ДанныеЭлемент.Вставить("Ссылка",				 ТекЭлемент.Ссылка);
		ДанныеЭлемент.Вставить("СТС",					 ТекЭлемент.СТС);
		ДанныеЭлемент.Вставить("Наименование",			 ТекЭлемент.Наименование);
		ДанныеЭлемент.Вставить("ГосударственныйНомер",	 ТекЭлемент.ГосударственныйНомер);
		ДанныеЭлемент.Вставить("ИДвСистеме",			 ТекЭлемент.ИДвСистеме);
		ДанныеЭлемент.Вставить("ИДвСистемеЗаписано",	 ТекЭлемент.ИДвСистемеЗаписано);
		мЭлементы.Добавить(ДанныеЭлемент);
	КонецЦикла;
	
	
	Возврат мЭлементы;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаполнитьСписокВнешняяСистемаДлительнаяОперацияСервер(ВнешняяСистема, УчетнаяЗапись, Автопарк)
	
	ПараметрыПроцедуры = Новый Структура;
	ПараметрыПроцедуры.Вставить("ВнешняяСистема",		 ВнешняяСистема);
	ПараметрыПроцедуры.Вставить("УчетнаяЗапись",		 УчетнаяЗапись);
	ПараметрыПроцедуры.Вставить("Автопарк",				 Автопарк);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Заполнение списка ТС внешней системы'");
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;

	Возврат ДлительныеОперации.ВыполнитьВФоне(
	"уатИнтеграции_проф.ПолучитьДанныеВсехТС",
	ПараметрыПроцедуры,
	ПараметрыВыполнения);
	
КонецФункции

&НаСервере
Процедура ВосстановитьНастройки()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ТекВнешняяСистема = Неопределено;
	Если ТипВнешнейСистемы = Перечисления.уатТипыВнешнихСистем.СистемаМониторинга Тогда
		СтруктураНастроек = ХранилищеНастроекДанныхФорм.Загрузить(
		"ОбщаяФорма.уатФормаСинхронизацииТСмеждуУАТиВнешнимиСистемами", 
		"СистемаМониторинга");
	ИначеЕсли ТипВнешнейСистемы = Перечисления.уатТипыВнешнихСистем.СервисШтрафов Тогда
		СтруктураНастроек = ХранилищеНастроекДанныхФорм.Загрузить(
		"ОбщаяФорма.уатФормаСинхронизацииТСмеждуУАТиВнешнимиСистемами", 
		"СервисШтрафов");
		ТекВнешняяСистема = Справочники.уатВнешниеСистемы.ШтрафовНет;
	ИначеЕсли ТипВнешнейСистемы = Перечисления.уатТипыВнешнихСистем.СервисПарковок Тогда
		СтруктураНастроек = ХранилищеНастроекДанныхФорм.Загрузить(
		"ОбщаяФорма.уатФормаСинхронизацииТСмеждуУАТиВнешнимиСистемами", 
		"СервисПарковок");
		ТекВнешняяСистема = Справочники.уатВнешниеСистемы.Паркоматика;
	КонецЕсли;
	
	Если ТипЗнч(СтруктураНастроек) <> Тип("Структура") Тогда
		СтруктураНастроек = Новый Структура("ВнешняяСистема, УчетнаяЗапись,
		|ОтображатьСопоставленныеВнешняяСистема, ОтображатьСопоставленныеУАТ");
		СтруктураНастроек.ОтображатьСопоставленныеВнешняяСистема = "Все";
		СтруктураНастроек.ОтображатьСопоставленныеУАТ			 = "Все";
	КонецЕсли;
	Если ТекВнешняяСистема <> Неопределено Тогда
		СтруктураНастроек.ВнешняяСистема = ТекВнешняяСистема;
	КонецЕсли;
	
	СтруктураНастроек.Свойство("ВнешняяСистема", ВнешняяСистема);
	СтруктураНастроек.Свойство("ОтображатьСопоставленныеВнешняяСистема", ОтображатьСопоставленныеВнешняяСистема);
	СтруктураНастроек.Свойство("ОтображатьСопоставленныеУАТ",			 ОтображатьСопоставленныеУАТ);
	СтруктураНастроек.Свойство("УчетнаяЗапись", УчетнаяЗапись);
	
	Если ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		УчетнаяЗапись = ?(УчетнаяЗапись.ПометкаУдаления, Неопределено, УчетнаяЗапись);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьНастройки(ТипВнешнейСистемы, ВнешняяСистема, УчетнаяЗапись, ОтображатьСопоставленныеВнешняяСистема, ОтображатьСопоставленныеУАТ)

	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ВнешняяСистема",						 ВнешняяСистема);
	СтруктураНастроек.Вставить("УчетнаяЗапись",							 УчетнаяЗапись);
	СтруктураНастроек.Вставить("ОтображатьСопоставленныеВнешняяСистема", ОтображатьСопоставленныеВнешняяСистема);
	СтруктураНастроек.Вставить("ОтображатьСопоставленныеУАТ",			 ОтображатьСопоставленныеУАТ);
	
	Если ТипВнешнейСистемы = Перечисления.уатТипыВнешнихСистем.СистемаМониторинга Тогда 
		ХранилищеНастроекДанныхФорм.Сохранить(
		"ОбщаяФорма.уатФормаСинхронизацииТСмеждуУАТиВнешнимиСистемами", 
		"СистемаМониторинга", СтруктураНастроек);
	ИначеЕсли ТипВнешнейСистемы = Перечисления.уатТипыВнешнихСистем.СервисШтрафов Тогда
		ХранилищеНастроекДанныхФорм.Сохранить(
		"ОбщаяФорма.уатФормаСинхронизацииТСмеждуУАТиВнешнимиСистемами", 
		"СервисШтрафов", СтруктураНастроек);
	ИначеЕсли ТипВнешнейСистемы = Перечисления.уатТипыВнешнихСистем.СервисПарковок Тогда
		ХранилищеНастроекДанныхФорм.Сохранить(
		"ОбщаяФорма.уатФормаСинхронизацииТСмеждуУАТиВнешнимиСистемами", 
		"СервисПарковок", СтруктураНастроек);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПодменюВнешниеСистемы()
	
	мсвВнешниеСистемы = ПолучитьВнешниеСистемы();
	
	Счетчик = 1;
	МассивВнешниеСистемы.Очистить();
	Для Каждого ТекСтрока Из мсвВнешниеСистемы Цикл
		
		Если ТекСтрока.ТипВнешнейСистемы = Перечисления.уатТипыВнешнихСистем.СистемаМониторинга Тогда
			ГруппаРодитель = Элементы.ГруппаСистемаМониторинга;
		ИначеЕсли ТекСтрока.ТипВнешнейСистемы = Перечисления.уатТипыВнешнихСистем.СервисШтрафов Тогда
			ГруппаРодитель = Элементы.ГруппаСервисШтрафов;
		ИначеЕсли ТекСтрока.ТипВнешнейСистемы = Перечисления.уатТипыВнешнихСистем.СервисПарковок Тогда
			ГруппаРодитель = Элементы.ГруппаСервисПарковок;
		Иначе
			Продолжить;
		КонецЕсли;

		ИмяКнопки     = "ВнешняяСистема" + Счетчик;
		Представление = ТекСтрока.Представление;
		МассивВнешниеСистемы.Добавить(Новый Структура("ИмяКнопки, Ссылка, Представление",
			ИмяКнопки, ТекСтрока.Ссылка, Представление));
		ДобавитьКнопкуНаФорму(Элементы, ИмяКнопки, ИмяКнопки, "ВнешняяСистемаПриИзменении", Представление, ГруппаРодитель);
		Счетчик = Счетчик + 1;
	КонецЦикла;
	
	ПерваяСтрока = Истина;
	Для Каждого ТекСтрока Из МассивВнешниеСистемы Цикл
		Элементы[ТекСтрока.Значение.ИмяКнопки].Пометка = Ложь;
		
		Если (ПерваяСтрока
			И НЕ ЗначениеЗаполнено(ВнешняяСистема))
			ИЛИ ВнешняяСистема = ТекСтрока.Значение.Ссылка Тогда
			Элементы[ТекСтрока.Значение.ИмяКнопки].Пометка = Истина;
			Элементы.ВнешниеСистемы.Заголовок = Нстр("en = 'System:'; ru = 'Система:'")
			+ " " + ТекСтрока.Значение.Представление;
			
			ВнешняяСистема = ТекСтрока.Значение.Ссылка;
			ПерваяСтрока = Ложь;
		КонецЕсли;
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура СформироватьПодменюУчетныеЗаписи()
	
	мсвУчетныеЗаписи = ПолучитьУчетныеЗаписи();
	
	КолвоПодчиненныеЭлементы = Элементы.ГруппаУчетныеЗаписи.ПодчиненныеЭлементы.Количество();
	Для Счетчик = 1 По КолвоПодчиненныеЭлементы Цикл
		СущКоманда = Команды.Найти("УчетнаяЗапись" + Счетчик);
		Если СущКоманда <> Неопределено Тогда
			Команды.Удалить(СущКоманда);
		КонецЕсли;
		СущЭл = Элементы.Найти("УчетнаяЗапись" + Счетчик);
		Если СущЭл <> Неопределено Тогда
			Элементы.Удалить(СущЭл);
		КонецЕсли;
	КонецЦикла;

	Счетчик = 1;
	МассивУчетныеЗаписи.Очистить();
	Для Каждого ТекСтрока Из мсвУчетныеЗаписи Цикл
		
		ГруппаРодитель = Элементы.ГруппаУчетныеЗаписи;

		ИмяКнопки     = "УчетнаяЗапись" + Счетчик;
		Представление = ТекСтрока.Представление;
		МассивУчетныеЗаписи.Добавить(Новый Структура("ИмяКнопки, Ссылка, Представление",
			ИмяКнопки, ТекСтрока.Ссылка, Представление));
		ДобавитьКнопкуНаФорму(Элементы, ИмяКнопки, ИмяКнопки, "УчетнаяЗаписьПриИзменении", Представление, ГруппаРодитель);
		Счетчик = Счетчик + 1;
	КонецЦикла;
	
	ПерваяСтрока = Истина;
	Для Каждого ТекСтрока Из МассивУчетныеЗаписи Цикл
		Элементы[ТекСтрока.Значение.ИмяКнопки].Пометка = Ложь;
		Если (ПерваяСтрока
			И НЕ ЗначениеЗаполнено(УчетнаяЗапись))
			ИЛИ УчетнаяЗапись = ТекСтрока.Значение.Ссылка Тогда
			Элементы[ТекСтрока.Значение.ИмяКнопки].Пометка = Истина;
			Элементы.УчетныеЗаписи.Заголовок = Нстр("en = 'System:'; ru = 'Учетная запись:'")
			+ " " + ТекСтрока.Значение.Представление;
			
			УчетнаяЗапись = ТекСтрока.Значение.Ссылка;
			ПерваяСтрока = Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		Элементы.УчетныеЗаписи.Заголовок = Нстр("en = 'System:'; ru = 'Учетная запись: неопределена'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьКнопкуНаФорму(Элементы, ИмяКнопки, ИмяКоманды, ИмяДействия, Синоним, ГруппаРодитель = Неопределено, ТолькоВоВсехДействиях = Ложь, Картинка = Неопределено, Пометка = Ложь)
	
	// Добавляем новую команду обработки выбора вида операции.
	Команда = Команды.Добавить(ИмяКоманды);
	Команда.Действие = ИмяДействия;
	Если Картинка <> Неопределено Тогда
		Команда.Картинка = Картинка;
	КонецЕсли;
	
	Если ГруппаРодитель = Неопределено Тогда
		НоваяКнопка = Элементы.Добавить(ИмяКнопки, Тип("КнопкаФормы"));
	Иначе    
		НоваяКнопка = Элементы.Добавить(ИмяКнопки, Тип("КнопкаФормы"), ГруппаРодитель);
	КонецЕсли;      
	НоваяКнопка.Вид                     = ВидКнопкиФормы.КнопкаКоманднойПанели;
	НоваяКнопка.ИмяКоманды              = ИмяКоманды;
	НоваяКнопка.Заголовок               = Синоним;
	НоваяКнопка.ТолькоВоВсехДействиях   = ТолькоВоВсехДействиях;
	НоваяКнопка.Пометка                 = Пометка;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьВнешниеСистемы()
	
	мсвВнешниеСистемы = Новый Массив();
	
	МассивПСМ = Новый Массив();
	уатРаботаСРасширениями.ПСМ_ЗаполнитьМассивВнешихСистем(МассивПСМ);

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивПСМ", МассивПСМ);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	уатВнешниеСистемы.Ссылка КАК Ссылка,
		|	уатВнешниеСистемы.Представление КАК Представление,
		|	уатВнешниеСистемы.ТипВнешнейСистемы КАК ТипВнешнейСистемы
		|ИЗ
		|	Справочник.уатВнешниеСистемы КАК уатВнешниеСистемы,
		|	Константа.уатИспользоватьСервисШтрафовНет КАК уатИспользоватьСервисШтрафовНет,
		|	Константа.уатИспользоватьИнтеграциюПаркоматика КАК уатИспользоватьИнтеграциюПаркоматика,
		|	Константа.уатИспользоватьOmnicomm КАК уатИспользоватьOmnicomm,
		|	Константа.уатИспользоватьWialon КАК уатИспользоватьWialon,
		|	Константа.уатИспользоватьСКАУТ КАК уатИспользоватьСКАУТ,
		|	Константа.уатИспользоватьАвтоГРАФ КАК уатИспользоватьАвтоГРАФ
		|ГДЕ
		|	уатВнешниеСистемы.ПометкаУдаления = ЛОЖЬ
		|	И ВЫБОР
		|			КОГДА уатВнешниеСистемы.ТипВнешнейСистемы = ЗНАЧЕНИЕ(Перечисление.уатТипыВнешнихСистем.СервисШтрафов)
		|					И уатИспользоватьСервисШтрафовНет.Значение
		|				ТОГДА ИСТИНА
		|			ИНАЧЕ ВЫБОР
		|					КОГДА уатВнешниеСистемы.ТипВнешнейСистемы = ЗНАЧЕНИЕ(Перечисление.уатТипыВнешнихСистем.СервисПарковок)
		|							И уатИспользоватьИнтеграциюПаркоматика.Значение
		|						ТОГДА ИСТИНА
		|					ИНАЧЕ ВЫБОР
		|							КОГДА уатВнешниеСистемы.ТипВнешнейСистемы = ЗНАЧЕНИЕ(Перечисление.уатТипыВнешнихСистем.СистемаМониторинга)
		|								ТОГДА ВЫБОР
		|										КОГДА уатВнешниеСистемы.Ссылка = ЗНАЧЕНИЕ(Справочник.уатВнешниеСистемы.Omnicomm)
		|													И уатИспользоватьOmnicomm.Значение
		|												ИЛИ уатВнешниеСистемы.Ссылка = ЗНАЧЕНИЕ(Справочник.уатВнешниеСистемы.Wialon)
		|													И уатИспользоватьWialon.Значение
		|												ИЛИ уатВнешниеСистемы.Ссылка = ЗНАЧЕНИЕ(Справочник.уатВнешниеСистемы.АвтоГРАФ)
		|													И уатИспользоватьАвтоГРАФ.Значение
		|												ИЛИ уатВнешниеСистемы.Ссылка = ЗНАЧЕНИЕ(Справочник.уатВнешниеСистемы.СКАУТ)
		|													И уатИспользоватьСКАУТ.Значение
		|												ИЛИ уатВнешниеСистемы.Ссылка В (&МассивПСМ)
		|											ТОГДА ИСТИНА
		|									КОНЕЦ
		|						КОНЕЦ
		|				КОНЕЦ
		|		КОНЕЦ
		|
		|УПОРЯДОЧИТЬ ПО
		|	уатВнешниеСистемы.ТипВнешнейСистемы,
		|	уатВнешниеСистемы.Наименование";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ВнешняяСистемаВключена = Ложь;
	Пока Выборка.Следующий() Цикл
		мсвВнешниеСистемы.Добавить(Новый Структура("Ссылка, Представление, ТипВнешнейСистемы",
			Выборка.Ссылка, Выборка.Представление, Выборка.ТипВнешнейСистемы));
			
		Если Выборка.Ссылка = ВнешняяСистема Тогда
			ВнешняяСистемаВключена = Истина;
		КонецЕсли;
	КонецЦикла;

	Если НЕ ВнешняяСистемаВключена Тогда
		ВнешняяСистема = Неопределено;
	КонецЕсли;
	
	Возврат мсвВнешниеСистемы;

КонецФункции

&НаСервере
Функция ПолучитьУчетныеЗаписи()
	
	мсвВнешниеСистемы = Новый Массив();
	
	Если ТипВнешнейСистемы = ПредопределенноеЗначение("Перечисление.уатТипыВнешнихСистем.СистемаМониторинга") Тогда
		Запрос = Новый Запрос();
		Запрос.УстановитьПараметр("СистемаМониторинга", ВнешняяСистема);
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	уатУчетныеЗаписиСистемыМониторинга.Ссылка КАК Ссылка,
		               |	уатУчетныеЗаписиСистемыМониторинга.Представление КАК Представление
		               |ИЗ
		               |	Справочник.уатУчетныеЗаписиСистемыМониторинга КАК уатУчетныеЗаписиСистемыМониторинга
		               |ГДЕ
		               |	НЕ уатУчетныеЗаписиСистемыМониторинга.ПометкаУдаления
		               |	И уатУчетныеЗаписиСистемыМониторинга.СистемаМониторинга = &СистемаМониторинга
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	уатУчетныеЗаписиСистемыМониторинга.Наименование";
		
	ИначеЕсли ТипВнешнейСистемы = ПредопределенноеЗначение("Перечисление.уатТипыВнешнихСистем.СервисШтрафов") Тогда
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	уатУчетныеЗаписиСервисовШтрафов.Ссылка КАК Ссылка,
		               |	уатУчетныеЗаписиСервисовШтрафов.Представление КАК Представление
		               |ИЗ
		               |	Справочник.уатУчетныеЗаписиСервисовШтрафов КАК уатУчетныеЗаписиСервисовШтрафов
		               |ГДЕ
		               |	НЕ уатУчетныеЗаписиСервисовШтрафов.ПометкаУдаления
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	уатУчетныеЗаписиСервисовШтрафов.Наименование";

	ИначеЕсли ТипВнешнейСистемы = ПредопределенноеЗначение("Перечисление.уатТипыВнешнихСистем.СервисПарковок") Тогда
		Запрос = Новый Запрос();
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		               |	уатУчетныеЗаписиСервисовПарковок.Ссылка КАК Ссылка,
		               |	уатУчетныеЗаписиСервисовПарковок.Представление КАК Представление
		               |ИЗ
		               |	Справочник.уатУчетныеЗаписиСервисовПарковок КАК уатУчетныеЗаписиСервисовПарковок
		               |ГДЕ
		               |	НЕ уатУчетныеЗаписиСервисовПарковок.ПометкаУдаления
		               |
		               |УПОРЯДОЧИТЬ ПО
		               |	уатУчетныеЗаписиСервисовПарковок.Наименование";
	Иначе
		Возврат мсвВнешниеСистемы;
	КонецЕсли;

	Выборка = Запрос.Выполнить().Выбрать();
	
	УчетнаяЗаписьВключена = Ложь;
	Пока Выборка.Следующий() Цикл
		мсвВнешниеСистемы.Добавить(Новый Структура("Ссылка, Представление",
			Выборка.Ссылка, Выборка.Представление));
			
		Если Выборка.Ссылка = УчетнаяЗапись Тогда
			УчетнаяЗаписьВключена = Истина;
		КонецЕсли;
	КонецЦикла;

	Если НЕ УчетнаяЗаписьВключена Тогда
		УчетнаяЗапись = Неопределено;
	КонецЕсли;

	Возврат мсвВнешниеСистемы;

КонецФункции

&НаКлиенте
Процедура НастроитьУчетнуюЗапись(Результат, ДополнительныеПараметры) Экспорт
	
	СформироватьПодменюУчетныеЗаписи();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьСопоставленныеУАТПриИзменении()
	
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокТС.Отбор, "IDАвтопарка", "",
			ВидСравненияКомпоновкиДанных.НеРавно,, Ложь);
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокТС.Отбор, "ИДвСистемеЗаписано","",,, Ложь);
	Если ОтображатьСопоставленныеУАТ = "Все" Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокТС.Отбор, "ИДвСистемеЗаписано","",,, Ложь);
	ИначеЕсли ОтображатьСопоставленныеУАТ = "Неподключенные" Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокТС.Отбор, "ИДвСистемеЗаписано","",
		ВидСравненияКомпоновкиДанных.Равно,, Истина);
	ИначеЕсли ОтображатьСопоставленныеУАТ = "Подключенные" Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокТС.Отбор, "ИДвСистемеЗаписано","",
			ВидСравненияКомпоновкиДанных.НеРавно,, Истина);
	ИначеЕсли ОтображатьСопоставленныеУАТ = "Автопарк не совпадает с сервисом" Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокТС.Отбор, "ИДвСистемеЗаписано","",,, Ложь);
		IDАвтопарка = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(УчетнаяЗапись, "IDАвтопарка");
		Если IDАвтопарка <> "" Тогда
			ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокТС.Отбор, "IDАвтопарка", IDАвтопарка,
			ВидСравненияКомпоновкиДанных.НеРавно,, Истина);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СопоставитьВсеСервер(мсвСопоставленныеТС, флагТСНайдены)
	// Получаем схема компановки данных (здесь хранится текст запроса)
	Схема = Элементы.СписокТС.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	
	// Получаем настройки пользователя (отборы, сортировки и т.п.)
	Настройки = Элементы.СписокТС.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	
	СтруктураНастройкиКомпоновки = Настройки.Структура;
	Если СтруктураНастройкиКомпоновки.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	ВыбранныеПоля   = СтруктураНастройкиКомпоновки[0].Выбор.Элементы;
	ПоляГруппировки = СтруктураНастройкиКомпоновки[0].ПоляГруппировки.Элементы;
	Структура       = СтруктураНастройкиКомпоновки[0].Структура;

	Структура.Очистить();
	ВыбранныеПоля.Очистить();
	ПоляГруппировки.Очистить();
	
	ПолеКомпоновки = ВыбранныеПоля.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ПолеКомпоновки.Поле          = Новый ПолеКомпоновкиДанных("Ссылка");
	ПолеКомпоновки.Заголовок     = "Ссылка";
	ПолеКомпоновки.Использование = Истина;
	
	ПолеКомпоновки = ВыбранныеПоля.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ПолеКомпоновки.Поле          = Новый ПолеКомпоновкиДанных("ГаражныйНомер");
	ПолеКомпоновки.Заголовок     = "ГаражныйНомер";
	ПолеКомпоновки.Использование = Истина;

	ПолеКомпоновки = ВыбранныеПоля.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ПолеКомпоновки.Поле          = Новый ПолеКомпоновкиДанных("ГосударственныйНомер");
	ПолеКомпоновки.Заголовок     = "ГосударственныйНомер";
	ПолеКомпоновки.Использование = Истина;
	
	ПолеКомпоновки = ВыбранныеПоля.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ПолеКомпоновки.Поле          = Новый ПолеКомпоновкиДанных("СТС");
	ПолеКомпоновки.Заголовок     = "СТС";
	ПолеКомпоновки.Использование = Истина;
	
	ПолеКомпоновки = ВыбранныеПоля.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ПолеКомпоновки.Поле          = Новый ПолеКомпоновкиДанных("Наименование");
	ПолеКомпоновки.Заголовок     = "Наименование";
	ПолеКомпоновки.Использование = Истина;
	
	ПолеКомпоновки = ВыбранныеПоля.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ПолеКомпоновки.Поле          = Новый ПолеКомпоновкиДанных("VIN");
	ПолеКомпоновки.Заголовок     = "VIN";
	ПолеКомпоновки.Использование = Истина;

	ЭлементОтбора = Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("ИДвСистеме");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение   = "";
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.Использование    = Истина;
	
	// Выводим динамический список в таблицу значений
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки, , ,Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	Результат = ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	ВнешняяТаблицаТС = Новый ТаблицаЗначений;
	ВнешняяТаблицаТС.Колонки.Добавить("ГаражныйНомер");
	ВнешняяТаблицаТС.Колонки.Добавить("ГосударственныйНомер");
	ВнешняяТаблицаТС.Колонки.Добавить("СТС");
	ВнешняяТаблицаТС.Колонки.Добавить("VIN");
	ВнешняяТаблицаТС.Колонки.Добавить("Наименование");
	ВнешняяТаблицаТС.Колонки.Добавить("ИДвСистеме");
	
	Для Каждого ТекСтрока Из СписокВнешняяСистема Цикл
		НоваяСтрока = ВнешняяТаблицаТС.Добавить();
		НоваяСтрока.ГаражныйНомер			 = СтрЗаменить(НРег(ТекСтрока.ГаражныйНомер), " ", "");
		НоваяСтрока.ГосударственныйНомер	 = СтрЗаменить(НРег(ТекСтрока.ГосударственныйНомер), " ", "");
		НоваяСтрока.СТС						 = СтрЗаменить(НРег(ТекСтрока.СТС), " ", "");
		НоваяСтрока.VIN						 = СтрЗаменить(НРег(ТекСтрока.VIN), " ", "");
		НоваяСтрока.Наименование			 = СтрЗаменить(НРег(ТекСтрока.Наименование), " ", "");
		НоваяСтрока.ИДвСистеме  			 = ТекСтрока.ИДвСистеме;
	КонецЦикла;
	
	мсвТекСопоставленныеТС = Новый Массив();
	Для Каждого ТекТС Из Результат Цикл 
		Если Элементы.СписокВнешняяСистемаГаражныйНомер.Видимость
			И ЗначениеЗаполнено(ТекТС.ГаражныйНомер) Тогда
			СтрокиТС = ВнешняяТаблицаТС.НайтиСтроки(Новый Структура("ГаражныйНомер", СтрЗаменить(НРег(ТекТС.ГаражныйНомер), " ", "")));
			
			Если СтрокиТС.Количество() <> 0 Тогда
				СтрокаТС   = СтрокиТС[0]; 
				ИДвСистеме = СтрокаТС.ИДвСистеме;
				
				Если мсвТекСопоставленныеТС.Найти(ИДвСистеме) = Неопределено Тогда
					мсвСопоставленныеТС.Добавить(Новый Структура("ТекТС, ИДвСистеме, ВнешняяСистема",
					ТекТС.Ссылка, ИДвСистеме, ВнешняяСистема));
					мсвТекСопоставленныеТС.Добавить(ИДвСистеме);
					флагТСНайдены = Истина;
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если Элементы.СписокВнешняяСистемаСТС.Видимость
			И ЗначениеЗаполнено(ТекТС.СТС) Тогда
			СтрокиТС = ВнешняяТаблицаТС.НайтиСтроки(Новый Структура("СТС", СтрЗаменить(НРег(ТекТС.СТС), " ", "")));
			
			Если СтрокиТС.Количество() <> 0 Тогда
				СтрокаТС   = СтрокиТС[0]; 
				ИДвСистеме = СтрокаТС.ИДвСистеме;
				
				Если мсвТекСопоставленныеТС.Найти(ИДвСистеме) = Неопределено Тогда
					мсвСопоставленныеТС.Добавить(Новый Структура("ТекТС, ИДвСистеме, ВнешняяСистема",
					ТекТС.Ссылка, ИДвСистеме, ВнешняяСистема));
					мсвТекСопоставленныеТС.Добавить(ИДвСистеме);
					флагТСНайдены = Истина;
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если Элементы.СписокВнешняяСистемаГосударственныйНомер.Видимость
			И ЗначениеЗаполнено(ТекТС.ГосударственныйНомер) Тогда
			СтрокиТС = ВнешняяТаблицаТС.НайтиСтроки(
				Новый Структура("ГосударственныйНомер", СтрЗаменить(НРег(ТекТС.ГосударственныйНомер), " ", "")));
			
			Если СтрокиТС.Количество() <> 0 Тогда
				СтрокаТС   = СтрокиТС[0]; 
				ИДвСистеме = СтрокаТС.ИДвСистеме;
				
				Если мсвТекСопоставленныеТС.Найти(ИДвСистеме) = Неопределено Тогда
					мсвСопоставленныеТС.Добавить(Новый Структура("ТекТС, ИДвСистеме, ВнешняяСистема",
					ТекТС.Ссылка, ИДвСистеме, ВнешняяСистема));
					мсвТекСопоставленныеТС.Добавить(ИДвСистеме);
					флагТСНайдены = Истина;
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если Элементы.СписокВнешняяСистемаVIN.Видимость
			И ЗначениеЗаполнено(ТекТС.VIN) Тогда
			СтрокиТС = ВнешняяТаблицаТС.НайтиСтроки(
				Новый Структура("VIN", СтрЗаменить(НРег(ТекТС.VIN), " ", "")));
			
			Если СтрокиТС.Количество() <> 0 Тогда
				СтрокаТС   = СтрокиТС[0]; 
				ИДвСистеме = СтрокаТС.ИДвСистеме;
				
				Если мсвТекСопоставленныеТС.Найти(ИДвСистеме) = Неопределено Тогда
					мсвСопоставленныеТС.Добавить(Новый Структура("ТекТС, ИДвСистеме, ВнешняяСистема",
					ТекТС.Ссылка, ИДвСистеме, ВнешняяСистема));
					мсвТекСопоставленныеТС.Добавить(ИДвСистеме);
					флагТСНайдены = Истина;
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(ТекТС.Наименование) Тогда
			СтрокиТС = ВнешняяТаблицаТС.НайтиСтроки(
				Новый Структура("Наименование", СтрЗаменить(НРег(ТекТС.Наименование), " ", "")));
			
			Если СтрокиТС.Количество() <> 0 Тогда
				СтрокаТС   = СтрокиТС[0]; 
				ИДвСистеме = СтрокаТС.ИДвСистеме;
				
				Если мсвТекСопоставленныеТС.Найти(ИДвСистеме) = Неопределено Тогда
					мсвСопоставленныеТС.Добавить(Новый Структура("ТекТС, ИДвСистеме, ВнешняяСистема",
					ТекТС.Ссылка, ИДвСистеме, ВнешняяСистема));
					мсвТекСопоставленныеТС.Добавить(ИДвСистеме);
					флагТСНайдены = Истина;
					Продолжить;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборы()
	Если ОтображатьСопоставленныеВнешняяСистема = "Подключенные" Тогда
		ОтобразитьПодключенные(Неопределено);
	ИначеЕсли ОтображатьСопоставленныеВнешняяСистема = "Неподключенные" Тогда
		ОтобразитьНеподключенные(Неопределено);
	Иначе
		ОтобразитьВсе(Неопределено);
	КонецЕсли;
	
	Если ОтображатьСопоставленныеУАТ = "Подключенные" Тогда
		ОтобразитьПодключенныеУАТ(Неопределено);
	ИначеЕсли ОтображатьСопоставленныеУАТ = "Неподключенные" Тогда
		ОтобразитьНеподключенныеУАТ(Неопределено);
	ИначеЕсли ОтображатьСопоставленныеУАТ = "Автопарк не совпадает с сервисом" 
		И Элементы.ОтобразитьАвтопаркНеСовпадаетССервисом.Видимость Тогда
		ОтобразитьАвтопаркНеСовпадаетССервисом(Неопределено);
	Иначе
		ОтобразитьВсеУАТ(Неопределено);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

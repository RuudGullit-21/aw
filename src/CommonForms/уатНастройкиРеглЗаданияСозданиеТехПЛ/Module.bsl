
#Область ОбработчикиСобытийФормы

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	ВосстановитьНастройки();
	УстановитьВидимостьДоступность();
	ОбновитьДанныеРеглЗаданий();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		Отказ = Истина;
		Оповещ = Новый ОписаниеОповещения("ПередЗакрытиемВопрос", ЭтотОбъект);
		ПоказатьВопрос(Оповещ, "Настройки были изменены. Сохранить изменения?", РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемВопрос(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если ПроверитьЗаполнениеНастроек() Тогда
			СохранитьНастройки();
			Закрыть();
		КонецЕсли;
		
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		Модифицированность = Ложь;
		Закрыть();
		
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполнитьРегламентноеЗадание(Команда)
	ВыполнитьРегламентноеЗаданиеСервер();
	ОбновитьДанныеРеглЗаданий();
КонецПроцедуры

&НаСервере
Процедура ВыполнитьРегламентноеЗаданиеСервер()
	РегламентныеЗаданияСлужебный.ВыполнитьРегламентноеЗаданиеВручную(УИНСозданиеТПЛ);
	//ВыполнитьРегламентноеЗаданиеВручную(УИНСозданиеТПЛ, "ЗагрузкаДанныхОтПоставщикаПЦГазпромнефть");
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	Если ПроверитьЗаполнениеНастроек() Тогда
		СохранитьНастройки();
		Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПоУмолчанию(Команда)
	Оповещ = Новый ОписаниеОповещения("УстановитьПоУмолчаниюЗавершение", ЭтотОбъект);
	ПоказатьВопрос(Оповещ, "Настройки будут установлены по умолчанию. Продолжить?", РежимДиалогаВопрос.ОКОтмена);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПоУмолчаниюЗавершение(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Ответственный = ПользователиКлиентСервер.АвторизованныйПользователь();
		
		Организация = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Ответственный, "ОсновнаяОрганизация");
		Если ЗначениеЗаполнено(Организация) Тогда
			РасчетФактРасходаГСМ = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, "РасчетФактРасходаГСМ");
		Иначе
			РасчетФактРасходаГСМ = ПредопределенноеЗначение("Перечисление.уатВидыРасчетаРасходаГСМ.НеРассчитывать");
		КонецЕсли;
		
		СозданиеЗаправокГСМ = 3;
		ПриИзмененииСозданиеЗаправокГСМ();
		
		МаксимальноеОтклонениеДанныхПЦиССМпоВремени = 10;
		МаксимальноеОтклонениеДанныхПЦиССМпоКоличеству = 1;
		ГлубинаПоискаПЛДоВыезда = 0;
		ГлубинаПоискаПЛПослеВозвращения = 0;
		ПроводитьСозданныеЗаправкиГСМ = Истина;
		ПересчитатьПутевыеЛисты = Истина;
		ЗаменятьАналогНаОсновноеТопливо = Истина;
		ТолькоПроверенные = Истина;
		ПроверятьНаличееДублейПоСозданнымРанееДокументам = 1;
		
		Модифицированность = Истина;
		УстановитьВидимостьДоступность();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Обновить(Команда)
	ОбновитьДанныеРеглЗаданий();
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРегламентноеЗадание(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Действие", "Изменить");
	ПараметрыФормы.Вставить("Идентификатор", уатМодификацияКонфигурацииВызовСервера_уэ.ПолучитьИдентификаторРегламентногоЗадания("уатАвтоматическоеСозданиеТехнологическихПЛ"));
	ОткрытьФорму("Обработка.РегламентныеИФоновыеЗадания.Форма.РегламентноеЗадание", ПараметрыФормы,,,,,, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СозданиеЗаправокГСМПриИзменении(Элемент)
	ПриИзмененииСозданиеЗаправокГСМ();
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииСозданиеЗаправокГСМ()
	Если СозданиеЗаправокГСМ = 0 Тогда
		АЗСМониторинг = Неопределено;
		ВидЗаправкиМониторинг = Неопределено;
	Иначе
		Если НЕ ЗначениеЗаполнено(АЗСМониторинг) И ЗначениеЗаполнено(Организация) Тогда
			АЗСМониторинг = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, "ОсновнаяАЗС");
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(ВидЗаправкиМониторинг) И ЗначениеЗаполнено(Организация) Тогда
			ВидЗаправкиМониторинг = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, "ОсновнойВидЗаправки");
		КонецЕсли;
	КонецЕсли;
	Если СозданиеЗаправокГСМ <> 3 Тогда
		МаксимальноеОтклонениеДанныхПЦиССМпоВремени = 0;
		МаксимальноеОтклонениеДанныхПЦиССМпоКоличеству = 0;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтветственныйПриИзменении(Элемент)
	Организация = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Ответственный, "ОсновнаяОрганизация");
	Если ЗначениеЗаполнено(Организация) Тогда
		РасчетФактРасходаГСМ = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, "РасчетФактРасходаГСМ");
	Иначе
		РасчетФактРасходаГСМ = ПредопределенноеЗначение("Перечисление.уатВидыРасчетаРасходаГСМ.НеРассчитывать");
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьВидимостьДоступность()
	Элементы.ГруппаЗначенияЗаполненияГСМ.Доступность  = (СозданиеЗаправокГСМ = 1 ИЛИ СозданиеЗаправокГСМ = 3);
	Элементы.ГруппаОтклонение.Доступность             = (СозданиеЗаправокГСМ = 3);
	Элементы.ГруппаГлубинаПоискаПЛ.Доступность        = (СозданиеЗаправокГСМ <> 0);
	Элементы.ГруппаНастройкиДополнительно.Доступность = (СозданиеЗаправокГСМ <> 0);
	Элементы.ТолькоПроверенные.Доступность            = (СозданиеЗаправокГСМ = 2 ИЛИ СозданиеЗаправокГСМ = 3);
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("РасчетФактРасходаГСМ", РасчетФактРасходаГСМ);
	СтруктураНастроек.Вставить("СозданиеЗаправокГСМ",  СозданиеЗаправокГСМ);
	СтруктураНастроек.Вставить("АЗСМониторинг", АЗСМониторинг);
	СтруктураНастроек.Вставить("ВидЗаправкиМониторинг", ВидЗаправкиМониторинг);
	СтруктураНастроек.Вставить("МаксимальноеОтклонениеДанныхПЦиССМпоВремени",    МаксимальноеОтклонениеДанныхПЦиССМпоВремени);
	СтруктураНастроек.Вставить("МаксимальноеОтклонениеДанныхПЦиССМпоКоличеству", МаксимальноеОтклонениеДанныхПЦиССМпоКоличеству);
	СтруктураНастроек.Вставить("ГлубинаПоискаПЛДоВыезда",  ГлубинаПоискаПЛДоВыезда);
	СтруктураНастроек.Вставить("ГлубинаПоискаПЛПослеВозвращения",  ГлубинаПоискаПЛПослеВозвращения);
	СтруктураНастроек.Вставить("ТолькоПроверенные",  ТолькоПроверенные);
	СтруктураНастроек.Вставить("ПересчитатьПутевыеЛисты",  ПересчитатьПутевыеЛисты);
	СтруктураНастроек.Вставить("РасчетИтогов",  РасчетИтогов);
	СтруктураНастроек.Вставить("ПроводитьСозданныеЗаправкиГСМ",  ПроводитьСозданныеЗаправкиГСМ);
	СтруктураНастроек.Вставить("ЗаменятьАналогНаОсновноеТопливо",  ЗаменятьАналогНаОсновноеТопливо);
	СтруктураНастроек.Вставить("ПроверятьНаличееДублейПоСозданнымРанееДокументам", ПроверятьНаличееДублейПоСозданнымРанееДокументам);
	СтруктураНастроек.Вставить("Ответственный", Ответственный);
	
	Константы.уатПараметрыРеглЗаданияАвтосозданиеТехПЛ.Установить(Новый ХранилищеЗначения(СтруктураНастроек));
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройки()
	СтруктураНастроек = Константы.уатПараметрыРеглЗаданияАвтосозданиеТехПЛ.Получить().Получить();
		
	Если СтруктураНастроек <> Неопределено Тогда
		СтруктураНастроек.Свойство("РасчетФактРасходаГСМ", РасчетФактРасходаГСМ);
		СтруктураНастроек.Свойство("СозданиеЗаправокГСМ",  СозданиеЗаправокГСМ);
		СтруктураНастроек.Свойство("АЗСМониторинг", АЗСМониторинг);
		СтруктураНастроек.Свойство("ВидЗаправкиМониторинг", ВидЗаправкиМониторинг);
		СтруктураНастроек.Свойство("МаксимальноеОтклонениеДанныхПЦиССМпоВремени",    МаксимальноеОтклонениеДанныхПЦиССМпоВремени);
		СтруктураНастроек.Свойство("МаксимальноеОтклонениеДанныхПЦиССМпоКоличеству", МаксимальноеОтклонениеДанныхПЦиССМпоКоличеству);
		СтруктураНастроек.Свойство("ГлубинаПоискаПЛДоВыезда",  ГлубинаПоискаПЛДоВыезда);
		СтруктураНастроек.Свойство("ГлубинаПоискаПЛПослеВозвращения",  ГлубинаПоискаПЛПослеВозвращения);
		СтруктураНастроек.Свойство("ТолькоПроверенные",  ТолькоПроверенные);
		СтруктураНастроек.Свойство("ПересчитатьПутевыеЛисты",  ПересчитатьПутевыеЛисты);
		СтруктураНастроек.Свойство("РасчетИтогов",  РасчетИтогов);
		СтруктураНастроек.Свойство("ПроводитьСозданныеЗаправкиГСМ",  ПроводитьСозданныеЗаправкиГСМ);
		СтруктураНастроек.Свойство("ЗаменятьАналогНаОсновноеТопливо",  ЗаменятьАналогНаОсновноеТопливо);
		СтруктураНастроек.Свойство("ПроверятьНаличееДублейПоСозданнымРанееДокументам", ПроверятьНаличееДублейПоСозданнымРанееДокументам);
		СтруктураНастроек.Свойство("Ответственный", Ответственный);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеРеглЗаданий()
	ОбновитьДанныеРеглЗаданийСервер();
	
	Если ФоновоеЗаданиеВыполняется Тогда
		ПодключитьОбработчикОжидания("ОбновитьДанныеРеглЗаданий", 3, Истина);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеРеглЗаданийСервер()
	ТипФоновоеЗадание		 = Тип("ФоновоеЗадание");
	ТипИнформацияОбОшибке	 = Тип("ИнформацияОбОшибке");

	РеглЗаданиеСозданиеТПЛ = РегламентныеЗаданияСервер.Задание(Метаданные.РегламентныеЗадания.уатАвтоматическоеСозданиеТехнологическихПЛ);
	УИНСозданиеТПЛ = РеглЗаданиеСозданиеТПЛ.УникальныйИдентификатор;
	
	ФоновоеЗаданиеВыполняется = Ложь;
	
	Если РеглЗаданиеСозданиеТПЛ = Неопределено Тогда
		СтатусФоновогоЗадания = НСтр("ru='Никогда не выполнялось';en='Never execute'");
		ПредставлениеРасписания = НСтр("ru='Регламентное задание не найдено';en='Scheduled job is not found'");
		РегламентноеЗадание_Использование = Ложь;
	Иначе
		ПоследнееФоновоеЗадание = РегламентныеЗаданияСлужебный.СвойстваФоновыхЗаданий(
			Новый Структура("ПолучитьПоследнееФоновоеЗаданиеРегламентногоЗадания, ИдентификаторРегламентногоЗадания", Истина, УИНСозданиеТПЛ));
			
		СтатусФоновогоЗадания = ?(РеглЗаданиеСозданиеТПЛ.Использование, НСтр("ru='Используется';en='Used'"), НСтр("ru='Не используется';en='Not used'"));
		Если ПоследнееФоновоеЗадание.Количество() > 0 Тогда
			ФоновоеЗаданиеВыполняется = НЕ Значениезаполнено(ПоследнееФоновоеЗадание[0].Конец);
			СтатусФоновогоЗадания = СтатусФоновогоЗадания + ", " + Строка(ПоследнееФоновоеЗадание[0].Состояние)
				+ " " + Строка(?(Значениезаполнено(ПоследнееФоновоеЗадание[0].Конец), ПоследнееФоновоеЗадание[0].Конец, ""));
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПроверитьЗаполнениеНастроек()
	флОК = Истина;
	Если НЕ ЗначениеЗаполнено(Ответственный) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Поле ""Ответственный"" не заполнено",, "Ответственный");
		флОК = Ложь;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(РасчетФактРасходаГСМ) Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Поле ""Расчет расхода ГСМ"" не заполнено",, "РасчетФактРасходаГСМ");
		флОК = Ложь;
	КонецЕсли;
	
	Возврат флОК;
КонецФункции

#КонецОбласти

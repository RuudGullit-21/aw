
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ИнициализацияКомпоновщика();
	ВосстановитьНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда 
		Возврат;
	КонецЕсли;
	
	СохранитьНастройки();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОК(Команда)
	
	НастройкиКомпоновки = ПолучитьНастройкиКомпоновщикаДанныхЗаказов();
	
	Если ВладелецФормы.ИмяФормы = "Документ.уатРазнарядка.Форма.ФормаДокумента" Тогда
		мсвТС = СформироватьДеревоЗаказовНаСервере(НастройкиКомпоновки, ВладелецФормы.Объект.Дата);
	Иначе
		мсвТС = СформироватьДеревоЗаказовНаСервере(НастройкиКомпоновки, ВладелецФормы.ДатаПланирования);
	КонецЕсли;
	
	Закрыть(мсвТС);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ВосстановитьНастройки()
	
	Если ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда 
		СтруктураНастроек = ХранилищеНастроекДанныхФорм.Загрузить("Обработка.уатАРМЛогиста_уэ.Форма.ФормаЗаполненияТС", "ФормаЗаполненияТС_Настройки");
	Иначе 
		СтруктураНастроек = Неопределено;
	КонецЕсли;
	
	Если Не ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	Если СтруктураНастроек.Свойство("Отбор") Тогда 
		ВосстановитьНастройкиОтбора(СтруктураНастроек.Отбор, КомпоновщикДанныхТС.Настройки.Отбор.Элементы);
	КонецЕсли;
	
	Если СтруктураНастроек.Свойство("Порядок") Тогда 
		Для Каждого ТекПорядок Из СтруктураНастроек.Порядок Цикл 
			Если ТекПорядок = Тип("АвтоЭлементПорядкаКомпоновкиДанных") Тогда
				НовПорядок = КомпоновщикДанныхТС.Настройки.Порядок.Элементы.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
			Иначе
				НовПорядок = КомпоновщикДанныхТС.Настройки.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
				ЗаполнитьЗначенияСвойств(НовПорядок, ТекПорядок);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройкиОтбора(мсвНастроек, ЭлементыОтбора)
	
	Для Каждого ТекОтбор Из мсвНастроек Цикл 
		Если ТекОтбор.Свойство("Элементы") Тогда 
			НовОтбор = ЭлементыОтбора.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(НовОтбор, ТекОтбор, "ТипГруппы, Использование");
			
			ВосстановитьНастройкиОтбора(ТекОтбор.Элементы, НовОтбор.Элементы);
			
		Иначе 
			НовОтбор = ЭлементыОтбора.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(НовОтбор, ТекОтбор);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()
	
	Если Не ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда 
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураНастроек = Новый Структура("Отбор, Порядок", Новый Массив(), Новый Массив());
	
	ПолучитьНастройкиОтбора(СтруктураНастроек.Отбор, КомпоновщикДанныхТС.Настройки.Отбор.Элементы);
	
	Для Каждого ТекПорядок Из КомпоновщикДанныхТС.Настройки.Порядок.Элементы Цикл 
		Если ТипЗнч(ТекПорядок) = Тип("АвтоЭлементПорядкаКомпоновкиДанных") Тогда
			СтруктураНастроек.Порядок.Добавить(Тип("АвтоЭлементПорядкаКомпоновкиДанных"));
		Иначе
			стрПорядок = Новый Структура();
			стрПорядок.Вставить("Поле",              ТекПорядок.Поле);
			стрПорядок.Вставить("ТипУпорядочивания", ТекПорядок.ТипУпорядочивания);
			стрПорядок.Вставить("Использование",     ТекПорядок.Использование);
			
			СтруктураНастроек.Порядок.Добавить(стрПорядок);
		КонецЕсли;
	КонецЦикла;
	
	ХранилищеНастроекДанныхФорм.Сохранить("Обработка.уатАРМЛогиста_уэ.Форма.ФормаЗаполненияТС", "ФормаЗаполненияТС_Настройки", СтруктураНастроек);
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьНастройкиОтбора(мсвНастроек, ЭлементыОтбора)
	
	Для Каждого ТекОтбор Из ЭлементыОтбора Цикл 
		стрОтбор = Новый Структура();
		
		Если ТипЗнч(ТекОтбор) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда 
			стрОтбор.Вставить("ТипГруппы",     ТекОтбор.ТипГруппы);
			стрОтбор.Вставить("Элементы",      Новый Массив());
			стрОтбор.Вставить("Использование", ТекОтбор.Использование);
			
			ПолучитьНастройкиОтбора(стрОтбор.Элементы, ТекОтбор.Элементы);
			
		Иначе 
			стрОтбор.Вставить("ЛевоеЗначение",  ТекОтбор.ЛевоеЗначение);
			стрОтбор.Вставить("ВидСравнения",   ТекОтбор.ВидСравнения);
			стрОтбор.Вставить("ПравоеЗначение", ТекОтбор.ПравоеЗначение);
			стрОтбор.Вставить("Использование",  ТекОтбор.Использование);
		КонецЕсли;
		
		мсвНастроек.Добавить(стрОтбор);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИнициализацияКомпоновщика()
	
	СхемаКомпоновкиДанных = ПолучитьОбщийМакет("уатКомпоновкаДанныхТС");
	
	// установка параметров компоновки данных
	Для Каждого ТекПараметр Из СхемаКомпоновкиДанных.НастройкиПоУмолчанию.ПараметрыДанных.Элементы Цикл 
		Если ТекПараметр.Параметр = Новый ПараметрКомпоновкиДанных("Период") Тогда
			ТекПараметр.Значение = Параметры.ДатаПланирования;
			ТекПараметр.Использование = Истина;
		КонецЕсли;
	КонецЦикла;
	
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	
	КомпоновщикДанныхТС.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных));
	КомпоновщикДанныхТС.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьНастройкиКомпоновщикаДанныхЗаказов()
	
	НастройкиКомпоновщикаДанных = КомпоновщикДанныхТС.ПолучитьНастройки();
	
	Возврат НастройкиКомпоновщикаДанных;
	
КонецФункции 

&НаСервере
Функция СформироватьДеревоЗаказовНаСервере(НастройкиКомпоновки, ДатаПланирования)
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	МакетКомпоновки = КомпоновщикМакета.Выполнить(ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных), НастройкиКомпоновки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,,, Истина);   
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	ТаблицаДанныхТС = Новый ТаблицаЗначений;     
	ПроцессорВывода.УстановитьОбъект(ТаблицаДанныхТС);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	РазрешенныеВидыТС = Новый Массив();
	РазрешенныеВидыТС.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыМоделейТС.АвиационныйТранспорт"));
	РазрешенныеВидыТС.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыМоделейТС.Автотранспорт"));
	РазрешенныеВидыТС.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыМоделейТС.ЖДТранспорт"));
	РазрешенныеВидыТС.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыМоделейТС.МорскойТранспорт"));
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТаблицаДанныхТС",   ТаблицаДанныхТС);
	Запрос.УстановитьПараметр("ДатаПланирования",  ДатаПланирования);
	Запрос.УстановитьПараметр("РазрешенныеВидыТС", РазрешенныеВидыТС);
	
	Если Константы.уатЕдиницаИзмеренияВеса.Получить() = Перечисления.уатЕдиницыИзмеренияВеса.Килограмм Тогда 
		Запрос.УстановитьПараметр("КоэфГрузоподъемности", 1000);
	Иначе 
		Запрос.УстановитьПараметр("КоэфГрузоподъемности", 1);
	КонецЕсли;
	
	Если Константы.уатЕдиницаИзмеренияОбъема.Получить() = Перечисления.уатЕдиницыИзмеренияОбъема.Литр Тогда 
		Запрос.УстановитьПараметр("КоэфОбъемаКузова", 1000);
	Иначе 
		Запрос.УстановитьПараметр("КоэфОбъемаКузова", 1);
	КонецЕсли;
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫРАЗИТЬ(ВТ_ТС.ТС КАК Справочник.уатТС) КАК ТС,
	|	ВЫРАЗИТЬ(ВТ_ТС.Модель КАК Справочник.уатМоделиТС) КАК Модель,
	|	ВТ_ТС.ОбъемКузова КАК ОбъемКузова,
	|	ВТ_ТС.Грузоподъемность КАК Грузоподъемность,
	|	ВТ_ТС.СобственныйВес КАК СобственныйВес,
	|	ВТ_ТС.ИндексКартинки КАК ИндексКартинки,
	|	ВТ_ТС.ВладелецТС КАК ВладелецТС
	|ПОМЕСТИТЬ ВТ_СписокТС
	|ИЗ
	|	&ТаблицаДанныхТС КАК ВТ_ТС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатСостояниеТС.Регистратор КАК Регистратор,
	|	уатСостояниеТС.ТС КАК ТС
	|ПОМЕСТИТЬ ВТ_СрезМаршрутныхЛистов
	|ИЗ
	|	РегистрСведений.уатСостояниеТС КАК уатСостояниеТС
	|ГДЕ
	|	уатСостояниеТС.Период <= КОНЕЦПЕРИОДА(&ДатаПланирования, ДЕНЬ)
	|	И уатСостояниеТС.ДатаОкончания >= НАЧАЛОПЕРИОДА(&ДатаПланирования, ДЕНЬ)
	|	И уатСостояниеТС.Регистратор ССЫЛКА Документ.уатМаршрутныйЛист
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_СписокТС.ТС КАК ТС,
	|	ВТ_СписокТС.Модель КАК Модель,
	|	ВТ_СписокТС.ОбъемКузова * &КоэфОбъемаКузова КАК ОбъемКузова,
	|	ВТ_СписокТС.Грузоподъемность * &КоэфГрузоподъемности КАК Грузоподъемность,
	|	ВТ_СписокТС.СобственныйВес КАК СобственныйВес,
	|	ВТ_СписокТС.ИндексКартинки КАК ИндексКартинки,
	|	ВТ_СписокТС.ВладелецТС КАК ВладелецТС,
	|	ЕСТЬNULL(ВТ_СрезМаршрутныхЛистов.Регистратор, ЗНАЧЕНИЕ(Документ.уатМаршрутныйЛист.ПустаяСсылка)) КАК МаршрутныйЛист,
	|	ВТ_СписокТС.ТС.Наименование КАК ПредставлениеТС,
	|	ВТ_СписокТС.Модель.Наименование КАК НаименованиеМодели,
	|	ВТ_СписокТС.ТС.Организация КАК Организация,
	|	ВТ_СписокТС.Модель.МаксимальноеКоличествоУпаковок КАК МаксимальноеКоличествоУпаковок
	|ПОМЕСТИТЬ ВТ_СписокТСрегистраторМЛ
	|ИЗ
	|	ВТ_СписокТС КАК ВТ_СписокТС
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СрезМаршрутныхЛистов КАК ВТ_СрезМаршрутныхЛистов
	|		ПО ВТ_СписокТС.ТС = ВТ_СрезМаршрутныхЛистов.ТС
	|ГДЕ
	|	ВТ_СписокТС.ТС.ВидМоделиТС В(&РазрешенныеВидыТС)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_СписокТСрегистраторМЛ.ТС КАК ТС,
	|	ВТ_СписокТСрегистраторМЛ.Модель КАК Модель,
	|	ВТ_СписокТСрегистраторМЛ.ОбъемКузова КАК ОбъемКузова,
	|	ВТ_СписокТСрегистраторМЛ.Грузоподъемность КАК Грузоподъемность,
	|	ВТ_СписокТСрегистраторМЛ.СобственныйВес КАК СобственныйВес,
	|	ВТ_СписокТСрегистраторМЛ.ИндексКартинки КАК ИндексКартинки,
	|	ВТ_СписокТСрегистраторМЛ.ВладелецТС КАК ВладелецТС,
	|	ВТ_СписокТСрегистраторМЛ.МаршрутныйЛист КАК МаршрутныйЛист,
	|	уатМаршрутныйЛист.Заказы.(
	|		Ссылка КАК Ссылка,
	|		НомерСтроки КАК НомерСтроки,
	|		GUIDСтроки КАК GUIDСтроки,
	|		ВесБрутто КАК ВесБрутто,
	|		Время КАК Время,
	|		Выполнен КАК Выполнен,
	|		ДатаВыполнения КАК ДатаВыполнения,
	|		ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		ЕдиницаИзмеренияПоЗаказу КАК ЕдиницаИзмеренияПоЗаказу,
	|		ЗаказГрузоотправителя КАК ЗаказГрузоотправителя,
	|		Количество КАК Количество,
	|		КоличествоМест КАК КоличествоМест,
	|		Контрагент КАК Контрагент,
	|		Номенклатура КАК Номенклатура,
	|		Объем КАК Объем,
	|		ПрибытиеПлан КАК ПрибытиеПлан,
	|		ПрибытиеФакт КАК ПрибытиеФакт,
	|		Пункт КАК Пункт,
	|		Расстояние КАК Расстояние,
	|		Стоянка КАК Стоянка,
	|		СтоянкаИзПункта КАК СтоянкаИзПункта,
	|		ТипТочкиМаршрута КАК ТипТочкиМаршрута,
	|		УбытиеФакт КАК УбытиеФакт
	|	) КАК Заказы,
	|	ВТ_СписокТСрегистраторМЛ.ПредставлениеТС КАК ПредставлениеТС,
	|	ВТ_СписокТСрегистраторМЛ.НаименованиеМодели КАК НаименованиеМодели,
	|	ВТ_СписокТСрегистраторМЛ.Организация КАК Организация,
	|	1 КАК КоличествоВиртуальныхТС,
	|	ВТ_СписокТСрегистраторМЛ.МаксимальноеКоличествоУпаковок КАК МаксимальноеКоличествоУпаковок
	|ИЗ
	|	ВТ_СписокТСрегистраторМЛ КАК ВТ_СписокТСрегистраторМЛ
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатМаршрутныйЛист КАК уатМаршрутныйЛист
	|		ПО ВТ_СписокТСрегистраторМЛ.МаршрутныйЛист = уатМаршрутныйЛист.Ссылка";
	
	ВыгрузкаТС = Запрос.Выполнить().Выгрузить();
	
	мсвТС = ПреобразоватьТаблицуВМассивДляПередачиНаКлиент(ВыгрузкаТС);
	
	Для Каждого ТекСтрока Из мсвТС Цикл
		мсвВрем = ПреобразоватьТаблицуВМассивДляПередачиНаКлиент(ТекСтрока.Заказы);
		ТекСтрока.Заказы = мсвВрем;
	КонецЦикла;
	
	Возврат мсвТС;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПреобразоватьТаблицуВМассивДляПередачиНаКлиент(тбл)
	мсв = Новый Массив;
	
	Для Каждого ТекСтрока Из тбл Цикл
		СтруктураСтроки = Новый Структура();
		Для Каждого ТекКолонка Из тбл.Колонки Цикл
			СтруктураСтроки.Вставить(ТекКолонка.Имя, ТекСтрока[ТекКолонка.Имя]);
		КонецЦикла;
		
		мсв.Добавить(СтруктураСтроки);
	КонецЦикла;
	
	Возврат мсв;
КонецФункции

#КонецОбласти

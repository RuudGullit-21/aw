
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("ДокументПодбора",            ДокументПодбора);
	Параметры.Свойство("ТекущийМЛ",                  ТекущийМЛ);
	Параметры.Свойство("ТекущийПЛ",                  ТекущийПЛ);
	Параметры.Свойство("ТекущийАктОтгрузки",         ТекущийАктОтгрузки);
	Параметры.Свойство("ТекущийАктПриемки",          ТекущийАктПриемки);
	Параметры.Свойство("ТекущаяОперацияСГрузом",     ТекущаяОперацияСГрузом);
	Параметры.Свойство("ДатаВыезда",                 ДатаВыезда);
	Параметры.Свойство("СкладДляОтбора",             СкладДляОтбора);
	Параметры.Свойство("МаршрутныйЛистДляОтбора" ,   МаршрутныйЛистДляОтбора);
	Параметры.Свойство("Отбор_Контрагент",           Отбор_Контрагент);
	Параметры.Свойство("Отбор_ДетализацияЗакрытия",  Отбор_ДетализацияЗакрытия);
	Параметры.Свойство("ТолькоУникальныеКонтейнеры", ТолькоУникальныеКонтейнеры);
	Если Не ЗначениеЗаполнено(Отбор_Контрагент) Тогда
		Отбор_Контрагент = Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	Если Не ЗначениеЗаполнено(Отбор_ДетализацияЗакрытия) Тогда
		Отбор_ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПустаяСсылка();
	КонецЕсли;
	
	ПодборВМаршрутныйЛист   = (ДокументПодбора = "уатМаршрутныйЛист");
	ПодборВПутевойЛист      = (ДокументПодбора = "уатПутевойЛист");
	ПодборВАктОтгрузки      = (ДокументПодбора = "уатАктОтгрузки_уэ" И ЗначениеЗаполнено(СкладДляОтбора));
	ПодборВАктПриемки       = (ДокументПодбора = "уатАктПриемки_уэ" И ЗначениеЗаполнено(МаршрутныйЛистДляОтбора));
	ПодборВОперациюСГрузом  = (ДокументПодбора = "уатОперацияСГрузом_уэ" И ЗначениеЗаполнено(СкладДляОтбора));
	ПодборВЗаказПеревозчику = (ДокументПодбора = "уатЗаказПеревозчику_уэ");
	
	ВосстановитьНастройки();
	УстановитьОтборыОформлениеСписка();
	УстановитьЦветаСтатусов();
	
	Если Параметры.Свойство("ПеренесенныеЗаказы") Тогда 
		Для Каждого ТекСтрока Из Параметры.ПеренесенныеЗаказы Цикл 
			СтруктураПоиска = Новый Структура("Заказ, Груз", ТекСтрока.Заказ, ТекСтрока.Груз);
			Если ТекСтрока.Свойство("ЕдиницаИзмерения") Тогда 
				СтруктураПоиска.Вставить("ЕдиницаИзмерения", ТекСтрока.ЕдиницаИзмерения);
			КонецЕсли;
			
			НайдСтроки = РазмещенныеВДокументеГрузы.НайтиСтроки(СтруктураПоиска);
			Если НайдСтроки.Количество() = 0 Тогда 
				НовСтрока = РазмещенныеВДокументеГрузы.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрока, ТекСтрока);
			Иначе 
				НайдСтроки[0].Количество = НайдСтроки[0].Количество + ТекСтрока.Количество;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ЗаказыНаТС.Параметры.УстановитьЗначениеПараметра("ОтборСтатус", Ложь);
	ЗаказыНаТС.Параметры.УстановитьЗначениеПараметра("МассивЗаказовДляСтатусов", Новый Массив);

	ОбновитьДанныеПоЗаказамНаТС();
	УстановитьВидимостьДоступность();
	УстановитьБыстрыйОтборПоСтатусу();
	
	ПредставлениеЕдиницыИзмеренияВеса = уатОбщегоНазначенияПовтИсп.ПолучитьПредставлениеОсновнойЕдиницыИзмеренияВеса();
	Если ЗначениеЗаполнено(ПредставлениеЕдиницыИзмеренияВеса) Тогда
		Элементы.ПодобранныеЗаказыВесБрутто.Заголовок = НСтр("en='Weight';ru='Вес'") + ", " + ПредставлениеЕдиницыИзмеренияВеса;
	КонецЕсли;
	
	ПредставлениеЕдиницыИзмеренияОбъема = уатОбщегоНазначенияПовтИсп.ПолучитьПредставлениеОсновнойЕдиницыИзмеренияОбъема();
	Если ЗначениеЗаполнено(ПредставлениеЕдиницыИзмеренияОбъема) Тогда
		Элементы.ПодобранныеЗаказыОбъем.Заголовок = НСтр("en='Volume';ru='Объем'") + ", " + ПредставлениеЕдиницыИзмеренияОбъема;
	КонецЕсли;
	
	ПредставлениеОсновнойВидУпаковки = Справочники.уатВидыУпаковки_уэ.ПолучитьОсновнойВидУпаковки().КраткоеНаименование;
	Если ЗначениеЗаполнено(ПредставлениеОсновнойВидУпаковки) Тогда 
		Элементы.ПодобранныеЗаказыКоличествоМест.Заголовок = ПредставлениеОсновнойВидУпаковки;
	КонецЕсли;
	
	ЗапрещенныеВОтбореПоля = Новый Массив;
	ЗапрещенныеВОтбореПоля.Добавить("СтатусЗаказа");
	ЗапрещенныеВОтбореПоля.Добавить("СтатусОбработкиСопроводительныхДокументов");
	ЗаказыНаТС.УстановитьОграниченияИспользованияВОтборе(ЗапрещенныеВОтбореПоля);
	ЗаказыНаТС.УстановитьОграниченияИспользованияВПорядке(ЗапрещенныеВОтбореПоля);

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда 
		Возврат;
	КонецЕсли;
	
	СохранитьНастройки();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура Отбор_СтатусДокументаПриИзменении(Элемент)
	
	УстановитьБыстрыйОтборПоСтатусу();
	СохранитьНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура Отбор_КонтрагентПриИзменении(Элемент)
	Если Отбор_Контрагент = Неопределено Тогда
		Отбор_Контрагент = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЗаказыНаТС, "Контрагент", Отбор_Контрагент);
КонецПроцедуры

&НаКлиенте
Процедура ЗакрыватьФормуПриВыбореПриИзменении(Элемент)
	
	СохранитьНастройки();
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоНеРазмещенныеПриИзменении(Элемент)
	
	СохранитьНастройки();
	ОбновитьДанныеПоЗаказамНаТС();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыбиратьГрузыПриИзменении(Элемент)
	
	СохранитьНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура РежимДобавленияЗаказовГруппироватьПриИзменении(Элемент)
	
	СохранитьНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаКоличествоДнейОтДатыВыездаПриИзменении(Элемент)
	Если НастройкаКоличествоДнейОтДатыВыездаОчистка Тогда
		НастройкаКоличествоДнейОтДатыВыездаОчистка	 = Ложь;	
	Иначе
		НастройкаКоличествоДнейОтДатыВыездаИзменена	 = Истина;
		Элементы.НастройкаКоличествоДнейОтДатыВыезда.ФорматРедактирования = "";
	КонецЕсли;
	ОбновитьДанныеПоЗаказамНаТС();

КонецПроцедуры

&НаКлиенте
Процедура НастройкаКоличествоДнейОтДатыВыездаОчистка(Элемент, СтандартнаяОбработка)
	НастройкаКоличествоДнейОтДатыВыездаИзменена = Ложь;
	НастройкаКоличествоДнейОтДатыВыездаОчистка  = Истина;
	Элементы.НастройкаКоличествоДнейОтДатыВыезда.ФорматРедактирования = "ЧН=";
КонецПроцедуры

&НаКлиенте
Процедура ДатаВыездаПриИзменении(Элемент)
	ОбновитьДанныеПоЗаказамНаТС();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_ЗаказыНаТС

&НаКлиенте
Процедура ЗаказыНаТСВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Не ТипЗнч(ВыбраннаяСтрока) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") Тогда 
		Возврат;
	КонецЕсли;
	
	ВыборЗаказаНаТС(ВыбраннаяСтрока);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаказыНаТСПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	КлючиСтрок = Строки.ПолучитьКлючи();
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	уатЗаказГрузоотправителя.Ссылка КАК Ссылка,
	               |	уатЗаказГрузоотправителя.Мультимодальный КАК Мультимодальный,
	               |	уатЗаказГрузоотправителя.ЭтоЭтап КАК ЭтоЭтап,
	               |	уатЗаказГрузоотправителя.Проведен КАК Проведен
	               |ПОМЕСТИТЬ втЗаказы
	               |ИЗ
	               |	Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	               |ГДЕ
	               |	уатЗаказГрузоотправителя.Ссылка В(&мсвЗаказов)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	уатЭтапыМультимодальныхПеревозок_уэ.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя,
	               |	уатЭтапыМультимодальныхПеревозок_уэ.Этап КАК Этап
	               |ПОМЕСТИТЬ втЭтапы
	               |ИЗ
	               |	РегистрСведений.уатЭтапыМультимодальныхПеревозок_уэ КАК уатЭтапыМультимодальныхПеревозок_уэ
	               |ГДЕ
	               |	уатЭтапыМультимодальныхПеревозок_уэ.ЗаказГрузоотправителя В(&мсвЗаказов)
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	втЭтапы.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя,
	               |	втЭтапы.Этап КАК Этап,
	               |	ВЫБОР
	               |		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЕСТЬNULL(уатСтатусыГрузов_уэСрезПоследних.Статус, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый))) > 1
	               |			ТОГДА ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Составной)
	               |		ИНАЧЕ МАКСИМУМ(ЕСТЬNULL(уатСтатусыГрузов_уэСрезПоследних.Статус, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый)))
	               |	КОНЕЦ КАК СтатусЗаказа
	               |ПОМЕСТИТЬ втСтатусыРодительскихЗаказов
	               |ИЗ
	               |	втЭтапы КАК втЭтапы
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатСтатусыГрузов_уэ.СрезПоследних(
	               |				,
	               |				Заказ В
	               |					(ВЫБРАТЬ
	               |						втЭтапы.Этап КАК Заказ
	               |					ИЗ
	               |						втЭтапы КАК втЭтапы)) КАК уатСтатусыГрузов_уэСрезПоследних
	               |		ПО (уатСтатусыГрузов_уэСрезПоследних.Заказ = втЭтапы.Этап)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	втЭтапы.ЗаказГрузоотправителя,
	               |	втЭтапы.Этап
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	втСтатусыРодительскихЗаказов.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя,
	               |	ВЫБОР
	               |		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЕСТЬNULL(втСтатусыРодительскихЗаказов.СтатусЗаказа, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый))) > 1
	               |			ТОГДА ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Составной)
	               |		ИНАЧЕ МАКСИМУМ(ЕСТЬNULL(втСтатусыРодительскихЗаказов.СтатусЗаказа, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый)))
	               |	КОНЕЦ КАК СтатусЗаказа
	               |ПОМЕСТИТЬ ТабСтатусовРодительскихЗаказов
	               |ИЗ
	               |	втСтатусыРодительскихЗаказов КАК втСтатусыРодительскихЗаказов
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	втСтатусыРодительскихЗаказов.ЗаказГрузоотправителя
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	уатСтатусыГрузов_уэСрезПоследних.Заказ КАК Заказ,
	               |	ВЫБОР
	               |		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЕСТЬNULL(уатСтатусыГрузов_уэСрезПоследних.Статус, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый))) > 1
	               |			ТОГДА ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Составной)
	               |		ИНАЧЕ МАКСИМУМ(ЕСТЬNULL(уатСтатусыГрузов_уэСрезПоследних.Статус, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый)))
	               |	КОНЕЦ КАК Статус
	               |ПОМЕСТИТЬ уатСтатусыГрузов_уэСрезПоследних
	               |ИЗ
	               |	РегистрСведений.уатСтатусыГрузов_уэ.СрезПоследних(, Заказ В (&мсвЗаказов)) КАК уатСтатусыГрузов_уэСрезПоследних
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	уатСтатусыГрузов_уэСрезПоследних.Заказ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	уатСтатусыСопроводительныхДокументовСрезПоследних.СопроводительныйДокумент.Основание КАК Основание,
	               |	КОЛИЧЕСТВО(уатСтатусыСопроводительныхДокументовСрезПоследних.СопроводительныйДокумент) КАК Всего,
	               |	СУММА(ВЫБОР
	               |			КОГДА уатСтатусыСопроводительныхДокументовСрезПоследних.Статус = ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.ОбработкаЗавершена)
	               |				ТОГДА 1
	               |			ИНАЧЕ 0
	               |		КОНЕЦ) КАК ОбработкаЗавершена
	               |ПОМЕСТИТЬ втСтатусыСопроводительныхДокументовСрезПоследних
	               |ИЗ
	               |	РегистрСведений.уатСтатусыСопроводительныхДокументов.СрезПоследних(, СопроводительныйДокумент.Основание В (&МсвЗаказов)) КАК уатСтатусыСопроводительныхДокументовСрезПоследних
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	уатСтатусыСопроводительныхДокументовСрезПоследних.СопроводительныйДокумент.Основание
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втЗаказы.Ссылка КАК Ссылка,
	               |	ВЫБОР
	               |		КОГДА втЗаказы.Мультимодальный
	               |				И НЕ втЗаказы.ЭтоЭтап
	               |			ТОГДА ЕСТЬNULL(ТабСтатусовРодительскихЗаказов.СтатусЗаказа, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый))
	               |		ИНАЧЕ ЕСТЬNULL(уатСтатусыГрузов_уэСрезПоследних.Статус, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый))
	               |	КОНЕЦ КАК СтатусЗаказа,
	               |	СУММА(ЕСТЬNULL(втСтатусыСопроводительныхДокументовСрезПоследних.Всего, 0)) <> 0 КАК НаличиеСопроводительныхДокументов,
	               |	ВЫБОР
	               |		КОГДА СУММА(втСтатусыСопроводительныхДокументовСрезПоследних.Всего) = СУММА(втСтатусыСопроводительныхДокументовСрезПоследних.ОбработкаЗавершена)
	               |			ТОГДА 3
	               |		КОГДА СУММА(ЕСТЬNULL(втСтатусыСопроводительныхДокументовСрезПоследних.Всего, 0)) = 0
	               |			ТОГДА 0
	               |		КОГДА СУММА(втСтатусыСопроводительныхДокументовСрезПоследних.ОбработкаЗавершена) = 0
	               |			ТОГДА 1
	               |		ИНАЧЕ 2
	               |	КОНЕЦ КАК СтатусОбработкиСопроводительныхДокументов
	               |ИЗ
	               |	втЗаказы КАК втЗаказы
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТабСтатусовРодительскихЗаказов КАК ТабСтатусовРодительскихЗаказов
	               |		ПО втЗаказы.Ссылка = ТабСтатусовРодительскихЗаказов.ЗаказГрузоотправителя
	               |		ЛЕВОЕ СОЕДИНЕНИЕ уатСтатусыГрузов_уэСрезПоследних КАК уатСтатусыГрузов_уэСрезПоследних
	               |		ПО втЗаказы.Ссылка = уатСтатусыГрузов_уэСрезПоследних.Заказ
	               |		ЛЕВОЕ СОЕДИНЕНИЕ втСтатусыСопроводительныхДокументовСрезПоследних КАК втСтатусыСопроводительныхДокументовСрезПоследних
	               |		ПО втЗаказы.Ссылка = втСтатусыСопроводительныхДокументовСрезПоследних.Основание
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	втЗаказы.Ссылка,
	               |	ВЫБОР
	               |		КОГДА втЗаказы.Мультимодальный
	               |				И НЕ втЗаказы.ЭтоЭтап
	               |			ТОГДА ЕСТЬNULL(ТабСтатусовРодительскихЗаказов.СтатусЗаказа, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый))
	               |		ИНАЧЕ ЕСТЬNULL(уатСтатусыГрузов_уэСрезПоследних.Статус, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый))
	               |	КОНЕЦ";
	Запрос.УстановитьПараметр("мсвЗаказов", КлючиСтрок);

	ВыборкаЗаказ = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЗаказ.Следующий() Цикл
		СтрокаСписка        = Строки[ВыборкаЗаказ.Ссылка];	
		ДанныеСтрокаСписка  = СтрокаСписка.Данные;
		ДанныеСтрокаСписка.СтатусЗаказа = ВыборкаЗаказ.СтатусЗаказа; 
		ДанныеСтрокаСписка.СостояниеВыполненияСтрока = Строка(ДанныеСтрокаСписка.ПроцентВыполнения)
			+ "% " + Нстр("en = 'done'; ru = 'выполнено'");
	КонецЦикла;
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_ПодобранныеЗаказы

&НаКлиенте
Процедура ПодобранныеЗаказыПослеУдаления(Элемент)
	
	ПодобранныеЗаказыОбновитьИтоги();
	ОбновитьДанныеПоЗаказамНаТС();
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобранныеЗаказыПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	ЕстьСтрокиЗаказов = Ложь;
	Для Каждого ТекСтрока Из ПараметрыПеретаскивания.Значение Цикл 
		Если ТипЗнч(ТекСтрока) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") Тогда 
			ЕстьСтрокиЗаказов = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не ЕстьСтрокиЗаказов Тогда 
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		ПараметрыПеретаскивания.ДопустимыеДействия = ДопустимыеДействияПеретаскивания.НеОбрабатывать;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобранныеЗаказыПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	
	Если ПараметрыПеретаскивания.Значение.Количество() = 1 Тогда 
		Если ТипЗнч(ПараметрыПеретаскивания.Значение[0]) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") Тогда 
			ВыборЗаказаНаТС(ПараметрыПеретаскивания.Значение[0]);
		КонецЕсли;
		
	Иначе 
		Для Каждого ТекЗаказ Из ПараметрыПеретаскивания.Значение Цикл 
			Если ТипЗнч(ТекЗаказ) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") Тогда 
				ВыборЗаказаНаТС(ТекЗаказ, Истина);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПеренестиЗаказВВыбранные(Команда)
	
	ТекущаяСтрока = Элементы.ЗаказыНаТС.ТекущаяСтрока;
	
	Если Не ТипЗнч(ТекущаяСтрока) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") Тогда 
		Возврат;
	КонецЕсли;
	
	ВыборЗаказаНаТС(ТекущаяСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиПодобранныеВДокумент(Команда)
	
	ЗакрытьФормуСПодбором();
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ВосстановитьНастройки()
	
	ВыбиратьГрузы       = Истина;
	ТолькоНеРазмещенные = Истина;
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураНастроек = ХранилищеНастроекДанныхФорм.Загрузить(
		"ОбщаяФорма.уатПодборЗаказов", 
		"ОбщиеНастройкиПодбора"
	); 
	
	Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
		СтруктураНастроек.Свойство("ВыбиратьГрузы",                         ВыбиратьГрузы);
		СтруктураНастроек.Свойство("ЗакрыватьФормуПриВыборе",               ЗакрыватьФормуПриВыборе);
		СтруктураНастроек.Свойство("РежимДобавленияЗаказовВМаршрутныйЛист", РежимДобавленияЗаказовВМаршрутныйЛист);
		СтруктураНастроек.Свойство("ТолькоНеРазмещенные",                   ТолькоНеРазмещенные);
		СтруктураНастроек.Свойство("ЗаполнениеПЛ_FTL",                      ЗаполнениеПЛ_FTL);
		СтруктураНастроек.Свойство("ЗаполнениеПЛ_Товары",                   ЗаполнениеПЛ_Товары);
		СтруктураНастроек.Свойство("НастройкаКоличествоДнейОтДатыВыезда",   НастройкаКоличествоДнейОтДатыВыезда);
		СтруктураНастроек.Свойство("НастройкаКоличествоДнейОтДатыВыездаИзменена",   НастройкаКоличествоДнейОтДатыВыездаИзменена);

		Если НастройкаКоличествоДнейОтДатыВыездаИзменена Тогда
			Элементы.НастройкаКоличествоДнейОтДатыВыезда.ФорматРедактирования = "";
		КонецЕсли;

	КонецЕсли;
	
	Отбор_СтатусДокумента = ХранилищеНастроекДанныхФорм.Загрузить(
		"ОбщаяФорма.уатПодборЗаказов", 
		"НастройкиОтбора_"+ДокументПодбора
	); 
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураНастроек = Новый Структура();
	СтруктураНастроек.Вставить("ВыбиратьГрузы",                         ВыбиратьГрузы);
	СтруктураНастроек.Вставить("ЗакрыватьФормуПриВыборе",               ЗакрыватьФормуПриВыборе);
	СтруктураНастроек.Вставить("РежимДобавленияЗаказовВМаршрутныйЛист", РежимДобавленияЗаказовВМаршрутныйЛист);
	СтруктураНастроек.Вставить("ТолькоНеРазмещенные",                   ТолькоНеРазмещенные);
	СтруктураНастроек.Вставить("ЗаполнениеПЛ_FTL",                      ЗаполнениеПЛ_FTL);
	СтруктураНастроек.Вставить("ЗаполнениеПЛ_Товары",                   ЗаполнениеПЛ_Товары);
	СтруктураНастроек.Вставить("НастройкаКоличествоДнейОтДатыВыезда",   НастройкаКоличествоДнейОтДатыВыезда);
	СтруктураНастроек.Вставить("НастройкаКоличествоДнейОтДатыВыездаИзменена",   НастройкаКоличествоДнейОтДатыВыездаИзменена);
	
	ХранилищеНастроекДанныхФорм.Сохранить(
		"ОбщаяФорма.уатПодборЗаказов", 
		"ОбщиеНастройкиПодбора", 
		СтруктураНастроек
	);
	
	ХранилищеНастроекДанныхФорм.Сохранить(
		"ОбщаяФорма.уатПодборЗаказов", 
		"НастройкиОтбора_"+ДокументПодбора, 
		Отбор_СтатусДокумента
	);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступность()
	
	Если ЗакрыватьФормуПриВыборе Тогда 
		Элементы.ПеренестиЗаказВВыбранные.Заголовок      = НСтр("en='Move document';ru='Перенести в документ'");
		Элементы.ПеренестиЗаказВВыбранные.Отображение    = ОтображениеКнопки.Текст;
		Элементы.ПеренестиЗаказВВыбранные.Шрифт          = Новый Шрифт(Элементы.ПеренестиЗаказВВыбранные.Шрифт,,, Истина);
		Элементы.ПеренестиЗаказВВыбранные.ЦветФона       = Новый Цвет(255, 227, 24);
		Элементы.ПодобранныеЗаказы.Видимость             = Ложь;
		Элементы.ПеренестиПодобранныеВДокумент.Видимость = Ложь;
	Иначе 
		Элементы.ПеренестиЗаказВВыбранные.Заголовок      = НСтр("en='Select';ru='Выбрать'");
		Элементы.ПеренестиЗаказВВыбранные.Отображение    = ОтображениеКнопки.КартинкаИТекст;
		Элементы.ПеренестиЗаказВВыбранные.Шрифт          = Новый Шрифт(Элементы.ПеренестиЗаказВВыбранные.Шрифт,,, Ложь);
		Элементы.ПеренестиЗаказВВыбранные.ЦветФона       = Новый Цвет();
		Элементы.ПодобранныеЗаказы.Видимость             = Истина;
		Элементы.ПеренестиПодобранныеВДокумент.Видимость = Истина;
	КонецЕсли;
	
	Элементы.ГруппаДатаВыезда.Видимость = ПодборВМаршрутныйЛист;
	Элементы.РежимДобавления.Видимость 	= ПодборВМаршрутныйЛист;
	
	Если ПодборВМаршрутныйЛист ИЛИ ПодборВПутевойЛист Тогда 
		Элементы.ТолькоНеРазмещенные.Заголовок = НСтр("en='Only not posted';ru='Только не размещенные'");
		Элементы.ТолькоНеРазмещенные.Видимость = Истина;
	ИначеЕсли ПодборВАктОтгрузки Или ПодборВОперациюСГрузом Тогда 
		Элементы.ТолькоНеРазмещенные.Заголовок = НСтр("en='Only having remains at warehouse';ru='Только имеющие остатки на складе'");
		Элементы.ТолькоНеРазмещенные.Видимость = Истина;
	ИначеЕсли ПодборВАктПриемки Тогда
		Элементы.ТолькоНеРазмещенные.Заголовок = НСтр("en='Only having remains en route';ru='Только имеющие остатки в рейсе'");
		Элементы.ТолькоНеРазмещенные.Видимость = Истина;
	Иначе
		Элементы.ТолькоНеРазмещенные.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.Отбор_Контрагент.Видимость = ПодборВПутевойЛист Или ПодборВОперациюСГрузом;
	
	Элементы.ЗаполнениеПЛ_Товары.Видимость = ПодборВПутевойЛист
		И ПолучитьФункциональнуюОпцию("уатУчетЗаказовНаТСвПутевыхЛистах");
	Элементы.ЗаполнениеПЛ_FTL.Видимость = Элементы.ЗаполнениеПЛ_Товары.Видимость
		И ПолучитьФункциональнуюОпцию("уатИспользоватьFTLПеревозки_уэ");
		
КонецПроцедуры

&НаСервере
Процедура УстановитьЦветаСтатусов()
	
	мсвУдаляемыхЭлементов = Новый Массив();
	Для Каждого ЭлементУсловногоОформления Из УсловноеОформление.Элементы Цикл
		Если ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "Предустановленный" Тогда
			мсвУдаляемыхЭлементов.Добавить(ЭлементУсловногоОформления);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементУсловногоОформления Из мсвУдаляемыхЭлементов Цикл
		УсловноеОформление.Элементы.Удалить(ЭлементУсловногоОформления);
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатСтатусы_уэ.Ссылка,
	|	уатСтатусы_уэ.Наименование,
	|	уатСтатусы_уэ.ЦветФонаПоУмолчанию,
	|	уатСтатусы_уэ.ЦветТекстаПоУмолчанию
	|ИЗ
	|	Справочник.уатСтатусы_уэ КАК уатСтатусы_уэ
	|ГДЕ
	|	НЕ уатСтатусы_уэ.ПометкаУдаления
	|	И уатСтатусы_уэ.ДействуетНаЗаказыГрузоотправителей";
	
	ВыборкаЦвета = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЦвета.Следующий() Цикл 
		ЦветФона   = Неопределено;
		ЦветТекста = Неопределено;
		
		ХранилищеЦветФона = ВыборкаЦвета.ЦветФонаПоУмолчанию;
		Если Не ХранилищеЦветФона = Неопределено Тогда 
			ДанныеЦветФона = ХранилищеЦветФона.Получить();
			Если Не ДанныеЦветФона = Неопределено И ТипЗнч(ДанныеЦветФона) = Тип("Цвет") Тогда
				ЦветФона = ДанныеЦветФона;
			КонецЕсли;
		КонецЕсли;
		
		ХранилищеЦветТекста = ВыборкаЦвета.ЦветТекстаПоУмолчанию;
		Если Не ХранилищеЦветТекста = Неопределено Тогда 
			ДанныеЦветТекста = ХранилищеЦветТекста.Получить();
			Если Не ДанныеЦветТекста = Неопределено И ТипЗнч(ДанныеЦветТекста) = Тип("Цвет") Тогда
				ЦветТекста = ДанныеЦветТекста;
			КонецЕсли;
		КонецЕсли;
		
		Если ЦветТекста = Неопределено И ЦветФона = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
		
		ЭлементОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ЗаказыНаТС.СтатусЗаказа");
		ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементОтбора.ПравоеЗначение = ВыборкаЦвета.Ссылка;
		ЭлементОтбора.Использование  = Истина;
		
		Если Не ЦветТекста = Неопределено Тогда 
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветТекста);
		КонецЕсли;
		
		Если Не ЦветФона = Неопределено Тогда 
			ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветФона", ЦветФона);
		КонецЕсли;
		
		ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "Предустановленный";
		ЭлементУсловногоОформления.Представление = НСтр("en='By status color';ru='По цвету статуса'") + " " + ВыборкаЦвета.Наименование;
		ЭлементУсловногоОформления.Использование = Истина;
		
		ПолеОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
		ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("ЗаказыНаТССтатусЗаказа");
		ПолеОформления.Использование = Истина;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПоЗаказамНаТС()
	
	Если ПодборВМаршрутныйЛист Или ПодборВПутевойЛист Или ПодборВАктОтгрузки Или ПодборВАктПриемки Или ПодборВОперациюСГрузом Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЗаказыНаТС, "ТолькоНеРазмещенные", ТолькоНеРазмещенные);
	Иначе 
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЗаказыНаТС, "ТолькоНеРазмещенные", Ложь);
	КонецЕсли;
	
	Если ПодборВАктОтгрузки Или ПодборВОперациюСГрузом Тогда 
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЗаказыНаТС, "мсвЗаказыСОстатками", ПолучитьМассивЗаказовКПередаче());
	ИначеЕсли ПодборВАктПриемки Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЗаказыНаТС, "мсвЗаказыСОстатками", ПолучитьМассивЗаказовКПередачеИзРейса());
	Иначе 
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЗаказыНаТС, "мсвЗаказыСОстатками", ПолучитьМассивЗаказовКРазмещению());
	КонецЕсли;
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЗаказыНаТС, "Контрагент", Отбор_Контрагент);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЗаказыНаТС, "ДетализацияЗакрытия", Отбор_ДетализацияЗакрытия);

	Элементы.ЗаказыНаТС.Обновить();
	
КонецПроцедуры

&НаСервере
Функция ПолучитьМассивЗаказовКРазмещению()
	
	ТабПодобранныхГрузов = Новый ТаблицаЗначений();
	ТабПодобранныхГрузов.Колонки.Добавить("Заказ",      Новый ОписаниеТипов("ДокументСсылка.уатЗаказГрузоотправителя"));
	ТабПодобранныхГрузов.Колонки.Добавить("Груз",
		Новый ОписаниеТипов("СправочникСсылка.Номенклатура, СправочникСсылка.уатГрузовыеМеста_уэ"));
	ТабПодобранныхГрузов.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	
	Для Каждого ТекСтрока Из РазмещенныеВДокументеГрузы Цикл 
		НовСтрока = ТабПодобранныхГрузов.Добавить();
		НовСтрока.Заказ      = ТекСтрока.Заказ;
		НовСтрока.Груз       = ТекСтрока.Груз;
		НовСтрока.Количество = ТекСтрока.Количество;
	КонецЦикла;
	
	Для Каждого ТекСтрока Из ПодобранныеЗаказы Цикл 
		НовСтрока = ТабПодобранныхГрузов.Добавить();
		НовСтрока.Заказ      = ТекСтрока.Заказ;
		НовСтрока.Груз       = ТекСтрока.Груз;
		НовСтрока.Количество = ТекСтрока.Количество;
	КонецЦикла;
	
	ТабПодобранныхГрузов.Свернуть("Заказ, Груз", "Количество");
	
	Если НЕ ЗначениеЗаполнено(ДатаВыезда) Тогда
		ТекДатаВыезда = ТекущаяДатаСеанса();
	Иначе
		ТекДатаВыезда = ДатаВыезда;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Если НастройкаКоличествоДнейОтДатыВыездаИзменена Тогда
		Если НастройкаКоличествоДнейОтДатыВыезда >= 0 Тогда
			ДатаНачала = ?(НачалоДня(ТекДатаВыезда) = '00010101', '00010101', НачалоДня(ТекДатаВыезда));
			ДатаОкончания  = ?(НачалоДня(ТекДатаВыезда) = '00010101', '39991231', КонецДня(НачалоДня(ТекДатаВыезда)
			+ НастройкаКоличествоДнейОтДатыВыезда * 86400));
		Иначе
			ДатаНачала    = ?(НачалоДня(ТекДатаВыезда) = '00010101', '00010101', НачалоДня(ТекДатаВыезда)
			+ НастройкаКоличествоДнейОтДатыВыезда * 86400);
			ДатаОкончания = КонецДня(ТекДатаВыезда);
		КонецЕсли;
		Запрос.УстановитьПараметр("ОтправлениеС",            		     ДатаНачала);
		Запрос.УстановитьПараметр("ОтправлениеПо",            	         ДатаОкончания);
		
	КонецЕсли;

	Запрос.УстановитьПараметр("ТекущийДокумент",                     ?(ПодборВПутевойЛист, ТекущийПЛ, ТекущийМЛ));
	Запрос.УстановитьПараметр("ТабПодобранныхГрузов",                ТабПодобранныхГрузов);
			
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПодобранныеГрузы.Заказ КАК Заказ,
	|	ПодобранныеГрузы.Груз КАК Груз,
	|	ПодобранныеГрузы.Количество КАК Количество
	|ПОМЕСТИТЬ ВТ_ПодобранныеГрузы
	|ИЗ
	|	&ТабПодобранныхГрузов КАК ПодобранныеГрузы
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Заказ,
	|	Груз
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ОстаткиГрузов.ЗаказНаТС КАК ЗаказНаТС,
	|	СУММА(ОстаткиГрузов.КоличествоОстаток) КАК КоличествоОстаток
	|ПОМЕСТИТЬ ВТ_ОбщиеОстатки
	|ИЗ
	|	(ВЫБРАТЬ
	|		уатГрузыКПеревозке_уэОстатки.ЗаказГрузоотправителя КАК ЗаказНаТС,
	|		ВЫБОР
	|			КОГДА уатГрузыКПеревозке_уэОстатки.ГрузовоеМесто = ЗНАЧЕНИЕ(Справочник.уатГрузовыеМеста_уэ.ПустаяСсылка)
	|				ТОГДА уатГрузыКПеревозке_уэОстатки.Номенклатура
	|			ИНАЧЕ уатГрузыКПеревозке_уэОстатки.ГрузовоеМесто
	|		КОНЕЦ КАК Груз,
	|		ЕСТЬNULL(ВЫБОР
	|				КОГДА уатГрузыКПеревозке_уэОстатки.ЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам)
	|					ТОГДА ВЫБОР
	|							КОГДА уатГрузыКПеревозке_уэОстатки.ЕдиницаИзмерения.Коэффициент = 0
	|								ТОГДА уатГрузыКПеревозке_уэОстатки.КоличествоОстаток * уатГрузыКПеревозке_уэОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|							ИНАЧЕ уатГрузыКПеревозке_уэОстатки.КоличествоОстаток / уатГрузыКПеревозке_уэОстатки.ЕдиницаИзмерения.Коэффициент * уатГрузыКПеревозке_уэОстатки.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|						КОНЕЦ
	|				ИНАЧЕ уатГрузыКПеревозке_уэОстатки.КоличествоОстаток
	|			КОНЕЦ, 0) КАК КоличествоОстаток
	|	ИЗ
	|		РегистрНакопления.уатГрузыКПеревозке_уэ.Остатки(
	|				,
	|				ЗаказГрузоотправителя.ОтправлениеС >= &ОтправлениеС
	|					И ЗаказГрузоотправителя.ОтправлениеПо <= &ОтправлениеПо) КАК уатГрузыКПеревозке_уэОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		уатГрузыКПеревозке_уэОбороты.ЗаказГрузоотправителя,
	|		ВЫБОР
	|			КОГДА уатГрузыКПеревозке_уэОбороты.ГрузовоеМесто = ЗНАЧЕНИЕ(Справочник.уатГрузовыеМеста_уэ.ПустаяСсылка)
	|				ТОГДА уатГрузыКПеревозке_уэОбороты.Номенклатура
	|			ИНАЧЕ уатГрузыКПеревозке_уэОбороты.ГрузовоеМесто
	|		КОНЕЦ,
	|		ЕСТЬNULL(ВЫБОР
	|				КОГДА уатГрузыКПеревозке_уэОбороты.ЗаказГрузоотправителя.ДетализацияЗакрытия = ЗНАЧЕНИЕ(Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам)
	|					ТОГДА ВЫБОР
	|							КОГДА уатГрузыКПеревозке_уэОбороты.ЕдиницаИзмерения.Коэффициент = 0
	|								ТОГДА уатГрузыКПеревозке_уэОбороты.КоличествоРасход * уатГрузыКПеревозке_уэОбороты.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|							ИНАЧЕ уатГрузыКПеревозке_уэОбороты.КоличествоРасход / уатГрузыКПеревозке_уэОбороты.ЕдиницаИзмерения.Коэффициент * уатГрузыКПеревозке_уэОбороты.Номенклатура.ЕдиницаХраненияОстатков.Коэффициент
	|						КОНЕЦ
	|				ИНАЧЕ уатГрузыКПеревозке_уэОбороты.КоличествоРасход
	|			КОНЕЦ, 0)
	|	ИЗ
	|		РегистрНакопления.уатГрузыКПеревозке_уэ.Обороты(
	|				,
	|				,
	|				Регистратор,
	|				ЗаказГрузоотправителя.ОтправлениеС >= &ОтправлениеС
	|					И ЗаказГрузоотправителя.ОтправлениеПо <= &ОтправлениеПо) КАК уатГрузыКПеревозке_уэОбороты
	|	ГДЕ
	|		уатГрузыКПеревозке_уэОбороты.Регистратор = &ТекущийДокумент
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВТ_ПодобранныеГрузы.Заказ,
	|		ВТ_ПодобранныеГрузы.Груз,
	|		-ВТ_ПодобранныеГрузы.Количество
	|	ИЗ
	|		ВТ_ПодобранныеГрузы КАК ВТ_ПодобранныеГрузы) КАК ОстаткиГрузов
	|
	|СГРУППИРОВАТЬ ПО
	|	ОстаткиГрузов.ЗаказНаТС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_ОбщиеОстатки.ЗаказНаТС КАК ЗаказНаТС
	|ИЗ
	|	ВТ_ОбщиеОстатки КАК ВТ_ОбщиеОстатки
	|ГДЕ
	|	ВТ_ОбщиеОстатки.КоличествоОстаток > 0";
	
	
	Если НЕ НастройкаКоличествоДнейОтДатыВыездаИзменена Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "ЗаказГрузоотправителя.ОтправлениеС >= &ОтправлениеС", "");
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "И ЗаказГрузоотправителя.ОтправлениеПо <= &ОтправлениеПо", "");
	КонецЕсли;
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ЗаказНаТС");
	
КонецФункции // ПолучитьМассивЗаказовКРазмещению()

&НаСервере
Функция ПолучитьМассивЗаказовКПередаче()
	
	ТабПодобранныхГрузов = Новый ТаблицаЗначений();
	ТабПодобранныхГрузов.Колонки.Добавить("Заказ",            Новый ОписаниеТипов("ДокументСсылка.уатЗаказГрузоотправителя"));
	ТабПодобранныхГрузов.Колонки.Добавить("Груз",             Новый ОписаниеТипов("СправочникСсылка.Номенклатура, СправочникСсылка.уатГрузовыеМеста_уэ"));
	ТабПодобранныхГрузов.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.уатТипыКонтейнеров_уэ, СправочникСсылка.уатВидыУпаковки_уэ, СправочникСсылка.ЕдиницыИзмерения"));
	ТабПодобранныхГрузов.Колонки.Добавить("Количество",       Новый ОписаниеТипов("Число"));
	
	Для Каждого ТекСтрока Из РазмещенныеВДокументеГрузы Цикл 
		НовСтрока = ТабПодобранныхГрузов.Добавить();
		НовСтрока.Заказ            = ТекСтрока.Заказ;
		НовСтрока.Груз             = ТекСтрока.Груз;
		НовСтрока.ЕдиницаИзмерения = ТекСтрока.ЕдиницаИзмерения;
		НовСтрока.Количество       = ТекСтрока.Количество;
	КонецЦикла;
	
	Для Каждого ТекСтрока Из ПодобранныеЗаказы Цикл 
		НовСтрока = ТабПодобранныхГрузов.Добавить();
		НовСтрока.Заказ            = ТекСтрока.Заказ;
		НовСтрока.Груз             = ТекСтрока.Груз;
		НовСтрока.ЕдиницаИзмерения = ТекСтрока.ЕдиницаИзмерения;
		НовСтрока.Количество       = ТекСтрока.Количество;
	КонецЦикла;
	
	ТабПодобранныхГрузов.Свернуть("Заказ, Груз, ЕдиницаИзмерения", "Количество");
	
	Запрос = Новый Запрос();
	Если ПодборВОперациюСГрузом Тогда
		Запрос.УстановитьПараметр("ТекущийАктОтгрузки", ТекущаяОперацияСГрузом);
	Иначе
		Запрос.УстановитьПараметр("ТекущийАктОтгрузки", ТекущийАктОтгрузки);
	КонецЕсли;
	Запрос.УстановитьПараметр("ТабПодобранныхГрузов",    ТабПодобранныхГрузов);
	Запрос.УстановитьПараметр("СкладДляОтбора",          СкладДляОтбора);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПодобранныеГрузы.Заказ КАК Заказ,
	|	ПодобранныеГрузы.Груз КАК Груз,
	|	ПодобранныеГрузы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ПодобранныеГрузы.Количество КАК Количество
	|ПОМЕСТИТЬ ВТ_ПодобранныеГрузы
	|ИЗ
	|	&ТабПодобранныхГрузов КАК ПодобранныеГрузы
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Заказ,
	|	Груз,
	|	ЕдиницаИзмерения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ГрузыКРазмещению.Заказ КАК Заказ,
	|	СУММА(ГрузыКРазмещению.КоличествоОстаток) КАК КоличествоОстаток
	|ПОМЕСТИТЬ ВТ_ГрузыКРазмещению
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВЫБОР
	|			КОГДА уатОстаткиГрузовНаСкладеКомплектации_уэОстатки.ЗаказГрузоотправителя = ЗНАЧЕНИЕ(Документ.уатЗаказГрузоотправителя.ПустаяСсылка)
	|				ТОГДА ЕСТЬNULL(уатСтатусыГрузов_уэСрезПоследних.Заказ, ЗНАЧЕНИЕ(Документ.уатЗаказГрузоотправителя.ПустаяСсылка))
	|			ИНАЧЕ уатОстаткиГрузовНаСкладеКомплектации_уэОстатки.ЗаказГрузоотправителя
	|		КОНЕЦ КАК Заказ,
	|		уатОстаткиГрузовНаСкладеКомплектации_уэОстатки.ГрузовоеМесто КАК ГрузовоеМесто,
	|		уатОстаткиГрузовНаСкладеКомплектации_уэОстатки.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		уатОстаткиГрузовНаСкладеКомплектации_уэОстатки.КоличествоОстаток КАК КоличествоОстаток
	|	ИЗ
	|		РегистрНакопления.уатОстаткиГрузовНаСкладеКомплектации_уэ.Остатки(, Склад = &СкладДляОтбора) КАК уатОстаткиГрузовНаСкладеКомплектации_уэОстатки
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатСтатусыГрузов_уэ.СрезПоследних КАК уатСтатусыГрузов_уэСрезПоследних
	|			ПО (уатОстаткиГрузовНаСкладеКомплектации_уэОстатки.ЗаказГрузоотправителя = ЗНАЧЕНИЕ(Документ.уатЗаказГрузоотправителя.ПустаяСсылка))
	|				И уатОстаткиГрузовНаСкладеКомплектации_уэОстатки.ГрузовоеМесто = уатСтатусыГрузов_уэСрезПоследних.ГрузовоеМесто
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		уатОстаткиГрузовНаСкладеКомплектации_уэОбороты.ЗаказГрузоотправителя,
	|		уатОстаткиГрузовНаСкладеКомплектации_уэОбороты.ГрузовоеМесто,
	|		уатОстаткиГрузовНаСкладеКомплектации_уэОбороты.ЕдиницаИзмерения,
	|		уатОстаткиГрузовНаСкладеКомплектации_уэОбороты.КоличествоРасход
	|	ИЗ
	|		РегистрНакопления.уатОстаткиГрузовНаСкладеКомплектации_уэ.Обороты(, , Регистратор, ) КАК уатОстаткиГрузовНаСкладеКомплектации_уэОбороты
	|	ГДЕ
	|		уатОстаткиГрузовНаСкладеКомплектации_уэОбороты.Регистратор = &ТекущийАктОтгрузки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВТ_ПодобранныеГрузы.Заказ,
	|		ВТ_ПодобранныеГрузы.Груз,
	|		ВТ_ПодобранныеГрузы.ЕдиницаИзмерения,
	|		-ВТ_ПодобранныеГрузы.Количество
	|	ИЗ
	|		ВТ_ПодобранныеГрузы КАК ВТ_ПодобранныеГрузы) КАК ГрузыКРазмещению
	|
	|СГРУППИРОВАТЬ ПО
	|	ГрузыКРазмещению.Заказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_ГрузыКРазмещению.Заказ КАК ЗаказНаТС
	|ИЗ
	|	ВТ_ГрузыКРазмещению КАК ВТ_ГрузыКРазмещению
	|ГДЕ
	|	ВТ_ГрузыКРазмещению.КоличествоОстаток > 0";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ЗаказНаТС");
	
КонецФункции // ПолучитьМассивЗаказовКПередаче()

&НаСервере
Функция ПолучитьМассивЗаказовКПередачеИзРейса()
	
	ТабПодобранныхГрузов = Новый ТаблицаЗначений();
	ТабПодобранныхГрузов.Колонки.Добавить("Заказ",            Новый ОписаниеТипов("ДокументСсылка.уатЗаказГрузоотправителя"));
	ТабПодобранныхГрузов.Колонки.Добавить("Груз",             Новый ОписаниеТипов("СправочникСсылка.Номенклатура, СправочникСсылка.уатГрузовыеМеста_уэ"));
	ТабПодобранныхГрузов.Колонки.Добавить("ЕдиницаИзмерения", Новый ОписаниеТипов("СправочникСсылка.уатТипыКонтейнеров_уэ, СправочникСсылка.уатВидыУпаковки_уэ, СправочникСсылка.ЕдиницыИзмерения"));
	ТабПодобранныхГрузов.Колонки.Добавить("Количество",       Новый ОписаниеТипов("Число"));
	
	Для Каждого ТекСтрока Из РазмещенныеВДокументеГрузы Цикл 
		НовСтрока = ТабПодобранныхГрузов.Добавить();
		НовСтрока.Заказ            = ТекСтрока.Заказ;
		НовСтрока.Груз             = ТекСтрока.Груз;
		НовСтрока.ЕдиницаИзмерения = ТекСтрока.ЕдиницаИзмерения;
		НовСтрока.Количество       = ТекСтрока.Количество;
	КонецЦикла;
	
	Для Каждого ТекСтрока Из ПодобранныеЗаказы Цикл 
		НовСтрока = ТабПодобранныхГрузов.Добавить();
		НовСтрока.Заказ            = ТекСтрока.Заказ;
		НовСтрока.Груз             = ТекСтрока.Груз;
		НовСтрока.ЕдиницаИзмерения = ТекСтрока.ЕдиницаИзмерения;
		НовСтрока.Количество       = ТекСтрока.Количество;
	КонецЦикла;
	
	ТабПодобранныхГрузов.Свернуть("Заказ, Груз, ЕдиницаИзмерения", "Количество");
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТекущийАктПриемки",       ТекущийАктПриемки);
	Запрос.УстановитьПараметр("ТабПодобранныхГрузов",    ТабПодобранныхГрузов);
	Запрос.УстановитьПараметр("МаршрутныйЛистДляОтбора", МаршрутныйЛистДляОтбора);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПодобранныеГрузы.Заказ КАК Заказ,
	|	ПодобранныеГрузы.Груз КАК Груз,
	|	ПодобранныеГрузы.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|	ПодобранныеГрузы.Количество КАК Количество
	|ПОМЕСТИТЬ ВТ_ПодобранныеГрузы
	|ИЗ
	|	&ТабПодобранныхГрузов КАК ПодобранныеГрузы
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Заказ,
	|	Груз,
	|	ЕдиницаИзмерения
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ГрузыКРазмещению.Заказ КАК Заказ,
	|	СУММА(ГрузыКРазмещению.КоличествоОстаток) КАК КоличествоОстаток
	|ПОМЕСТИТЬ ВТ_ГрузыКРазмещению
	|ИЗ
	|	(ВЫБРАТЬ
	|		уатГрузыВРейсах_уэОстатки.ЗаказГрузоотправителя КАК Заказ,
	|		уатГрузыВРейсах_уэОстатки.ГрузовоеМесто КАК ГрузовоеМесто,
	|		уатГрузыВРейсах_уэОстатки.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
	|		уатГрузыВРейсах_уэОстатки.КоличествоОстаток КАК КоличествоОстаток
	|	ИЗ
	|		РегистрНакопления.уатГрузыВРейсах_уэ.Остатки(, МаршрутныйЛист = &МаршрутныйЛистДляОтбора) КАК уатГрузыВРейсах_уэОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		уатГрузыВРейсах_уэОбороты.ЗаказГрузоотправителя,
	|		уатГрузыВРейсах_уэОбороты.ГрузовоеМесто,
	|		уатГрузыВРейсах_уэОбороты.ЕдиницаИзмерения,
	|		уатГрузыВРейсах_уэОбороты.КоличествоРасход
	|	ИЗ
	|		РегистрНакопления.уатГрузыВРейсах_уэ.Обороты(, , Регистратор, ) КАК уатГрузыВРейсах_уэОбороты
	|	ГДЕ
	|		уатГрузыВРейсах_уэОбороты.Регистратор = &ТекущийАктПриемки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВТ_ПодобранныеГрузы.Заказ,
	|		ВТ_ПодобранныеГрузы.Груз,
	|		ВТ_ПодобранныеГрузы.ЕдиницаИзмерения,
	|		-ВТ_ПодобранныеГрузы.Количество
	|	ИЗ
	|		ВТ_ПодобранныеГрузы КАК ВТ_ПодобранныеГрузы) КАК ГрузыКРазмещению
	|
	|СГРУППИРОВАТЬ ПО
	|	ГрузыКРазмещению.Заказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_ГрузыКРазмещению.Заказ КАК ЗаказНаТС
	|ИЗ
	|	ВТ_ГрузыКРазмещению КАК ВТ_ГрузыКРазмещению
	|ГДЕ
	|	ВТ_ГрузыКРазмещению.КоличествоОстаток > 0";
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("ЗаказНаТС");
	
КонецФункции // ПолучитьМассивЗаказовКПередаче()

&НаСервере
Функция ВыборЗаказаСервер(ЗаказГрузоотправителя, РазмещенныеГрузы, БезВыбораГрузов)
	
	РезультатВыбора = Новый Структура("ОткрыватьФормуВыбораГруза, ГрузыДляПереноса", Ложь, Новый Массив());
	
	Если БезВыбораГрузов
		Или Не ВыбиратьГрузы
		Или ЗаказГрузоотправителя.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам
		Или ЗаказГрузоотправителя.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам
		И ПодборВПутевойЛист Тогда
		
		ТабПодобранныхГрузов = Новый ТаблицаЗначений();
		ТабПодобранныхГрузов.Колонки.Добавить("Груз",
			Новый ОписаниеТипов("СправочникСсылка.Номенклатура, СправочникСсылка.уатГрузовыеМеста_уэ"));
		ТабПодобранныхГрузов.Колонки.Добавить("ЕдиницаИзмерения",
			Новый ОписаниеТипов("СправочникСсылка.уатТипыКонтейнеров_уэ, СправочникСсылка.уатВидыУпаковки_уэ,"
			"СправочникСсылка.ЕдиницыИзмерения"));
		ТабПодобранныхГрузов.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
		
		Для Каждого ТекСтрока Из РазмещенныеГрузы Цикл 
			НовСтрока = ТабПодобранныхГрузов.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, ТекСтрока);
		КонецЦикла;
		
		ТабПодобранныхГрузов.Свернуть("Груз, ЕдиницаИзмерения", "Количество");
		
		Если ПодборВАктОтгрузки Тогда 
			ТабГрузов = уатОбщегоНазначенияСервер.ПолучитьСписокГрузовПоОстаткамКРазмещениюДляПодбора(
				ЗаказГрузоотправителя, 
				СкладДляОтбора, 
				ТекущийАктОтгрузки,
				ТабПодобранныхГрузов);
				
		ИначеЕсли ПодборВОперациюСГрузом Тогда
			ТабГрузов = уатОбщегоНазначенияСервер.ПолучитьСписокГрузовПоОстаткамКРазмещениюДляПодбора(
				ЗаказГрузоотправителя, 
				СкладДляОтбора, 
				ТекущаяОперацияСГрузом,
				ТабПодобранныхГрузов);
			
		ИначеЕсли (ПодборВМаршрутныйЛист Или ПодборВЗаказПеревозчику)
			И ЗаказГрузоотправителя.FTL 
			И ЗаказГрузоотправителя.ДетализацияЗакрытия <> Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам Тогда
			ТабГрузов = уатОбщегоНазначения_уэ.ПолучитьСписокГрузовПоFTLЗаказуДляМаршрутногоЛиста(ЗаказГрузоотправителя);
			
		ИначеЕсли ПодборВПутевойЛист Тогда
			ТабГрузов = уатОбщегоНазначенияСервер.ПолучитьСписокГрузовПоОстаткамДляПодбора(
				ЗаказГрузоотправителя, 
				ТекущийПЛ, 
				ТабПодобранныхГрузов,
				ПодборВПутевойЛист);
		Иначе
			ТабГрузов = уатОбщегоНазначенияСервер.ПолучитьСписокГрузовПоОстаткамДляПодбора(
				ЗаказГрузоотправителя, 
				ТекущийМЛ, 
				ТабПодобранныхГрузов,
				ПодборВМаршрутныйЛист);
				
		КонецЕсли;
		
		Для Каждого ТекСтрока Из ТабГрузов Цикл 
			ДанныеСтроки = Новый Структура();
			Если (ПодборВМаршрутныйЛист Или ПодборВЗаказПеревозчику) 
				И ЗаказГрузоотправителя.FTL
				И ЗаказГрузоотправителя.ДетализацияЗакрытия <> Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам Тогда
				ДанныеСтроки.Вставить("Груз",             ТекСтрока.Номенклатура);
				ДанныеСтроки.Вставить("Количество",       ТекСтрока.Количество);
				ДанныеСтроки.Вставить("ЕдиницаИзмерения", ТекСтрока.ЕдиницаИзмерения);
				ДанныеСтроки.Вставить("ВесБрутто",        ТекСтрока.Вес);
				ДанныеСтроки.Вставить("Объем",            ТекСтрока.Объем);
				ДанныеСтроки.Вставить("КоличествоМест",   ТекСтрока.КоличествоМест);
				// Для подбора FTL заказов в МЛ целиком
				ДанныеСтроки.Вставить("НомерСтрокиГруза", ТекСтрока.НомерСтроки);
			Иначе
				ДанныеСтроки.Вставить("Груз",             ТекСтрока.Груз);
				ДанныеСтроки.Вставить("Количество",       ТекСтрока.КоличествоОстаток);
				ДанныеСтроки.Вставить("ЕдиницаИзмерения", ТекСтрока.ЕдиницаИзмерения);
				ДанныеСтроки.Вставить("ВесБрутто",        ТекСтрока.ВесБруттоОстаток);
				ДанныеСтроки.Вставить("Объем",            ТекСтрока.ОбъемОстаток);
				ДанныеСтроки.Вставить("КоличествоМест",   ТекСтрока.КоличествоМестОстаток);
			КонецЕсли;
			
			РезультатВыбора.ГрузыДляПереноса.Добавить(ДанныеСтроки);
		КонецЦикла;
		
	Иначе 
		РезультатВыбора.ОткрыватьФормуВыбораГруза = Истина;
	КонецЕсли;
	
	Возврат РезультатВыбора;
	
КонецФункции // ВыборЗаказаСервер()

&НаКлиенте
Процедура ЗаказыНаТСВыборГрузов(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекГруз Из РезультатЗакрытия Цикл
		
		Если ТекГруз.Свойство("НомерСтрокиГруза") И ТекГруз.НомерСтрокиГруза > 0 Тогда
			// Подбор FTL заказа в Маршрутный лист целиком
			НовСтрока = ПодобранныеЗаказы.Добавить();
			НовСтрока.Заказ = ДополнительныеПараметры;
			НовСтрока.Груз             = ТекГруз.Груз;
			НовСтрока.Количество       = ТекГруз.Количество;
			НовСтрока.ЕдиницаИзмерения = ТекГруз.ЕдиницаИзмерения;
			НовСтрока.ВесБрутто        = ТекГруз.ВесБрутто;
			НовСтрока.Объем            = ТекГруз.Объем;
			НовСтрока.КоличествоМест   = ТекГруз.КоличествоМест;
			НовСтрока.НомерСтрокиГруза = ТекГруз.НомерСтрокиГруза;
		Иначе
			НайдСтроки = ПодобранныеЗаказы.НайтиСтроки(Новый Структура("Заказ, Груз, ЕдиницаИзмерения", ДополнительныеПараметры, ТекГруз.Груз, ТекГруз.ЕдиницаИзмерения));
			
			Если НайдСтроки.Количество() = 0 Тогда 
				НовСтрока = ПодобранныеЗаказы.Добавить();
				НовСтрока.Заказ = ДополнительныеПараметры;
				НовСтрока.Груз             = ТекГруз.Груз;
				НовСтрока.Количество       = ТекГруз.Количество;
				НовСтрока.ЕдиницаИзмерения = ТекГруз.ЕдиницаИзмерения;
				НовСтрока.ВесБрутто        = ТекГруз.ВесБрутто;
				НовСтрока.Объем            = ТекГруз.Объем;
				НовСтрока.КоличествоМест   = ТекГруз.КоличествоМест;
			Иначе 
				НайдСтроки[0].Количество     = НайдСтроки[0].Количество + ТекГруз.Количество;
				НайдСтроки[0].ВесБрутто      = НайдСтроки[0].ВесБрутто + ТекГруз.ВесБрутто;
				НайдСтроки[0].Объем          = НайдСтроки[0].Объем + ТекГруз.Объем;
				НайдСтроки[0].КоличествоМест = НайдСтроки[0].КоличествоМест + ТекГруз.КоличествоМест;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗакрыватьФормуПриВыборе Тогда 
		ЗакрытьФормуСПодбором();
	КонецЕсли;
	
	ПодобранныеЗаказыОбновитьИтоги();
	
	ОбновитьДанныеПоЗаказамНаТС();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборЗаказаНаТС(ВыбранныйЗаказ, БезВыбораГрузов=Ложь)
	
	РазмещенныеГрузы = Новый Массив();
	
	Для Каждого ТекСтрока Из РазмещенныеВДокументеГрузы Цикл 
		Если ТекСтрока.Заказ = ВыбранныйЗаказ Тогда 
			ДанныеГруза = Новый Структура();
			ДанныеГруза.Вставить("Груз",             ТекСтрока.Груз);
			ДанныеГруза.Вставить("ЕдиницаИзмерения", ТекСтрока.ЕдиницаИзмерения);
			ДанныеГруза.Вставить("Количество",       ТекСтрока.Количество);
			
			РазмещенныеГрузы.Добавить(ДанныеГруза);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекСтрока Из ПодобранныеЗаказы Цикл 
		Если ТекСтрока.Заказ = ВыбранныйЗаказ Тогда 
			НайдСтрока = Неопределено;
			Для Каждого СтрокаРазмещения Из РазмещенныеГрузы Цикл 
				Если СтрокаРазмещения.Груз = ТекСтрока.Груз Тогда 
					НайдСтрока = СтрокаРазмещения;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если НайдСтрока = Неопределено Тогда 
				ДанныеГруза = Новый Структура();
				ДанныеГруза.Вставить("Груз",             ТекСтрока.Груз);
				ДанныеГруза.Вставить("ЕдиницаИзмерения", ТекСтрока.ЕдиницаИзмерения);
				ДанныеГруза.Вставить("Количество",       ТекСтрока.Количество);
				
				РазмещенныеГрузы.Добавить(ДанныеГруза);
			Иначе 
				НайдСтрока.Количество = НайдСтрока.Количество + ТекСтрока.Количество;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	РезультатВыбора = ВыборЗаказаСервер(ВыбранныйЗаказ, РазмещенныеГрузы, БезВыбораГрузов);
	
	Если РезультатВыбора.ОткрыватьФормуВыбораГруза Тогда 
		ПараметрыФормы = Новый Структура();
		ПараметрыФормы.Вставить("ЗаказКРазмещению",        ВыбранныйЗаказ);
		ПараметрыФормы.Вставить("ТекущийМЛ",               ТекущийМЛ);
		ПараметрыФормы.Вставить("РазмещенныеГрузы",        РазмещенныеГрузы);
		ПараметрыФормы.Вставить("ПодборВМаршрутныйЛист",   ПодборВМаршрутныйЛист);
		ПараметрыФормы.Вставить("ПодборВАктОтгрузки",      ПодборВАктОтгрузки);
		ПараметрыФормы.Вставить("ПодборВАктПриемки",       ПодборВАктПриемки);
		ПараметрыФормы.Вставить("ПодборВОперациюСГрузом",  ПодборВОперациюСГрузом);
		ПараметрыФормы.Вставить("ПодборВЗаказПеревозчику", ПодборВЗаказПеревозчику);
		ПараметрыФормы.Вставить("МаршрутныйЛистДляОтбора", МаршрутныйЛистДляОтбора);
		ПараметрыФормы.Вставить("СкладДляОтбора",          СкладДляОтбора);
		ПараметрыФормы.Вставить("ТекущийАктОтгрузки",      ТекущийАктОтгрузки);
		ПараметрыФормы.Вставить("ТекущийАктПриемки",       ТекущийАктПриемки);
		ПараметрыФормы.Вставить("ТекущаяОперацияСГрузом",  ТекущаяОперацияСГрузом);
		
		Оповещение = Новый ОписаниеОповещения("ЗаказыНаТСВыборГрузов", ЭтотОбъект, ВыбранныйЗаказ);
		
		ОткрытьФорму("ОбщаяФорма.уатВыборГрузовПоЗаказу", ПараметрыФормы, ЭтотОбъект,,,, Оповещение);
		
	Иначе 
		ЗаказыНаТСВыборГрузов(РезультатВыбора.ГрузыДляПереноса, ВыбранныйЗаказ);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобранныеЗаказыОбновитьИтоги()
	
	ПодобранныеЗаказыВесБруттоИтого      = 0;
	ПодобранныеЗаказыОбъемИтого          = 0;
	ПодобранныеЗаказыКоличествоМестИтого = 0;
	
	Для Каждого ТекСтрока Из ПодобранныеЗаказы Цикл 
		ПодобранныеЗаказыВесБруттоИтого      = ПодобранныеЗаказыВесБруттоИтого + ТекСтрока.ВесБрутто;
		ПодобранныеЗаказыОбъемИтого          = ПодобранныеЗаказыОбъемИтого + ТекСтрока.Объем;
		ПодобранныеЗаказыКоличествоМестИтого = ПодобранныеЗаказыКоличествоМестИтого + ТекСтрока.КоличествоМест;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФормуСПодбором()
	
	РезультатЗакрытия = Новый Структура();
	
	РезультатЗакрытия.Вставить("РежимДобавленияЗаказовВМаршрутныйЛист", РежимДобавленияЗаказовВМаршрутныйЛист);
	РезультатЗакрытия.Вставить("ДатаВыезда",                            ДатаВыезда);
	РезультатЗакрытия.Вставить("ПодобранныеЗаказы",                     Новый Массив());
	РезультатЗакрытия.Вставить("ЗаполнениеПЛ_FTL",                      ЗаполнениеПЛ_FTL);
	РезультатЗакрытия.Вставить("ЗаполнениеПЛ_Товары",                   ЗаполнениеПЛ_Товары);
	
	Для Каждого ТекСтрока Из ПодобранныеЗаказы Цикл 
		ДанныеСтроки = Новый Структура();
		ДанныеСтроки.Вставить("Заказ",            ТекСтрока.Заказ);
		ДанныеСтроки.Вставить("Номенклатура",     ТекСтрока.Груз);
		ДанныеСтроки.Вставить("Количество",       ТекСтрока.Количество);
		ДанныеСтроки.Вставить("ЕдиницаИзмерения", ТекСтрока.ЕдиницаИзмерения);
		ДанныеСтроки.Вставить("Вес",              ТекСтрока.ВесБрутто);
		ДанныеСтроки.Вставить("Объем",            ТекСтрока.Объем);
		ДанныеСтроки.Вставить("КоличествоМест",   ТекСтрока.КоличествоМест);
		
		// Для подбора FTL заказов в МЛ целиком
		ДанныеСтроки.Вставить("НомерСтрокиГруза", ТекСтрока.НомерСтрокиГруза);
		
		РезультатЗакрытия.ПодобранныеЗаказы.Добавить(ДанныеСтроки);
	КонецЦикла;
	
	Закрыть(РезультатЗакрытия);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьБыстрыйОтборПоСтатусу()
	
	Если ЗначениеЗаполнено(Отбор_СтатусДокумента) Тогда
		МассивЗаказовДляСтатусов = ПолучитьМассивЗаказовПоСтатусам(Отбор_СтатусДокумента);
		ЗаказыНаТС.Параметры.УстановитьЗначениеПараметра("ОтборСтатус", Истина);
		ЗаказыНаТС.Параметры.УстановитьЗначениеПараметра("МассивЗаказовДляСтатусов", МассивЗаказовДляСтатусов);
	Иначе
		ЗаказыНаТС.Параметры.УстановитьЗначениеПараметра("ОтборСтатус", Ложь);
		ЗаказыНаТС.Параметры.УстановитьЗначениеПараметра("МассивЗаказовДляСтатусов", Новый Массив);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьМассивЗаказовПоСтатусам(Статус)
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	уатЗаказГрузоотправителя.Ссылка КАК Ссылка,
	               |	уатЗаказГрузоотправителя.Мультимодальный КАК Мультимодальный,
	               |	уатЗаказГрузоотправителя.ЭтоЭтап КАК ЭтоЭтап,
	               |	уатЗаказГрузоотправителя.Проведен КАК Проведен
	               |ПОМЕСТИТЬ втЗаказы
	               |ИЗ
	               |	Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	уатЭтапыМультимодальныхПеревозок_уэ.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя,
	               |	уатЭтапыМультимодальныхПеревозок_уэ.Этап КАК Этап
	               |ПОМЕСТИТЬ втЭтапы
	               |ИЗ
	               |	РегистрСведений.уатЭтапыМультимодальныхПеревозок_уэ КАК уатЭтапыМультимодальныхПеревозок_уэ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	втЭтапы.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя,
	               |	втЭтапы.Этап КАК Этап,
	               |	ВЫБОР
	               |		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЕСТЬNULL(уатСтатусыГрузов_уэСрезПоследних.Статус, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый))) > 1
	               |			ТОГДА ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Составной)
	               |		ИНАЧЕ МАКСИМУМ(ЕСТЬNULL(уатСтатусыГрузов_уэСрезПоследних.Статус, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый)))
	               |	КОНЕЦ КАК СтатусЗаказа
	               |ПОМЕСТИТЬ втСтатусыРодительскихЗаказов
	               |ИЗ
	               |	втЭтапы КАК втЭтапы
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатСтатусыГрузов_уэ.СрезПоследних(
	               |				,
	               |				Заказ В
	               |					(ВЫБРАТЬ
	               |						втЭтапы.Этап КАК Заказ
	               |					ИЗ
	               |						втЭтапы КАК втЭтапы)) КАК уатСтатусыГрузов_уэСрезПоследних
	               |		ПО (уатСтатусыГрузов_уэСрезПоследних.Заказ = втЭтапы.Этап)
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	втЭтапы.ЗаказГрузоотправителя,
	               |	втЭтапы.Этап
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	втСтатусыРодительскихЗаказов.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя,
	               |	ВЫБОР
	               |		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЕСТЬNULL(втСтатусыРодительскихЗаказов.СтатусЗаказа, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый))) > 1
	               |			ТОГДА ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Составной)
	               |		ИНАЧЕ МАКСИМУМ(ЕСТЬNULL(втСтатусыРодительскихЗаказов.СтатусЗаказа, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый)))
	               |	КОНЕЦ КАК СтатусЗаказа
	               |ПОМЕСТИТЬ ТабСтатусовРодительскихЗаказов
	               |ИЗ
	               |	втСтатусыРодительскихЗаказов КАК втСтатусыРодительскихЗаказов
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	втСтатусыРодительскихЗаказов.ЗаказГрузоотправителя
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	уатСтатусыГрузов_уэСрезПоследних.Заказ КАК Заказ,
	               |	ВЫБОР
	               |		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЕСТЬNULL(уатСтатусыГрузов_уэСрезПоследних.Статус, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый))) > 1
	               |			ТОГДА ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Составной)
	               |		ИНАЧЕ МАКСИМУМ(ЕСТЬNULL(уатСтатусыГрузов_уэСрезПоследних.Статус, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый)))
	               |	КОНЕЦ КАК Статус
	               |ПОМЕСТИТЬ уатСтатусыГрузов_уэСрезПоследних
	               |ИЗ
	               |	РегистрСведений.уатСтатусыГрузов_уэ.СрезПоследних(, ) КАК уатСтатусыГрузов_уэСрезПоследних
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	уатСтатусыГрузов_уэСрезПоследних.Заказ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втЗаказы.Ссылка КАК Ссылка,
	               |	ВЫБОР
	               |		КОГДА втЗаказы.Мультимодальный
	               |				И НЕ втЗаказы.ЭтоЭтап
	               |			ТОГДА ЕСТЬNULL(ТабСтатусовРодительскихЗаказов.СтатусЗаказа, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый))
	               |		ИНАЧЕ ЕСТЬNULL(уатСтатусыГрузов_уэСрезПоследних.Статус, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый))
	               |	КОНЕЦ КАК СтатусЗаказа
	               |ПОМЕСТИТЬ втРезультат
	               |ИЗ
	               |	втЗаказы КАК втЗаказы
	               |		ЛЕВОЕ СОЕДИНЕНИЕ ТабСтатусовРодительскихЗаказов КАК ТабСтатусовРодительскихЗаказов
	               |		ПО втЗаказы.Ссылка = ТабСтатусовРодительскихЗаказов.ЗаказГрузоотправителя
	               |		ЛЕВОЕ СОЕДИНЕНИЕ уатСтатусыГрузов_уэСрезПоследних КАК уатСтатусыГрузов_уэСрезПоследних
	               |		ПО втЗаказы.Ссылка = уатСтатусыГрузов_уэСрезПоследних.Заказ
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	втЗаказы.Ссылка,
	               |	ВЫБОР
	               |		КОГДА втЗаказы.Мультимодальный
	               |				И НЕ втЗаказы.ЭтоЭтап
	               |			ТОГДА ЕСТЬNULL(ТабСтатусовРодительскихЗаказов.СтатусЗаказа, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый))
	               |		ИНАЧЕ ЕСТЬNULL(уатСтатусыГрузов_уэСрезПоследних.Статус, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый))
	               |	КОНЕЦ
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втРезультат.Ссылка КАК Ссылка,
	               |	втРезультат.СтатусЗаказа КАК СтатусЗаказа
	               |ИЗ
	               |	втРезультат КАК втРезультат
	               |ГДЕ
	               |	втРезультат.СтатусЗаказа = &Статус";
	Запрос.УстановитьПараметр("Статус", Статус);
	ВыборкаЗаказ = Запрос.Выполнить().Выбрать();
	
	МассивЗаказовДляСтатусов = Новый Массив();
	Пока ВыборкаЗаказ.Следующий() Цикл
		МассивЗаказовДляСтатусов.Добавить(ВыборкаЗаказ.Ссылка);
	КонецЦикла;

	Возврат МассивЗаказовДляСтатусов;
	
КонецФункции

&НаСервере
Процедура УстановитьОтборыОформлениеСписка()
	
	ЗаказыНаТС.ТекстЗапроса = СтрЗаменить(ЗаказыНаТС.ТекстЗапроса, "__СОСТОЯНИЕ_НОВЫЙ__", Нстр("en='New';ru='Новый'"));
	ЗаказыНаТС.ТекстЗапроса = СтрЗаменить(ЗаказыНаТС.ТекстЗапроса, "__СОСТОЯНИЕ_ОТКРЫТ__", Нстр("en='Open';ru='Открыт'"));
	ЗаказыНаТС.ТекстЗапроса = СтрЗаменить(ЗаказыНаТС.ТекстЗапроса, "__СОСТОЯНИЕ_ЧАСТИЧНОВЫПОЛНЕН__", Нстр("en='Partially completed';ru='Частично выполнен'"));
	ЗаказыНаТС.ТекстЗапроса = СтрЗаменить(ЗаказыНаТС.ТекстЗапроса, "__СОСТОЯНИЕ_ВЫПОЛНЕН__", Нстр("en='Completed';ru='Выполнен'"));
	
КонецПроцедуры

#КонецОбласти

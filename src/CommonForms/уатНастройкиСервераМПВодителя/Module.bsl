
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("АдресСервераМП",  АдресСервераМП);
	Параметры.Свойство("ПортСервераМП",   ПортСервераМП);
	Параметры.Свойство("ЛогинСервераМП",  ЛогинСервераМП);
	Параметры.Свойство("ПарольСервераМП", ПарольСервераМП);
	
	Если Не УстановитьТекущиеНастройкиССервера() Тогда 
		ТекстОшибки = НСтр("en='Current server settings were not obtained.';ru='Текущие настройки сервера не были получены.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура SOAPLoginАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = ПолучитьПользователейИБ(Текст);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПроверитьПодключениеСервер1С(Команда)
	
	Если Не Лев(WSDLUrl, 7) = "http://" Тогда 
		ТекстОшибки = НСтр("en='Incorrect address.';ru='Неверно указан адрес.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "SOAPUrl");
		Возврат;
	КонецЕсли;
	
	врSOAP = Прав(WSDLUrl, СтрДлина(WSDLUrl)-7);
	
	ПозРазделителя = СтрНайти(врSOAP, ":");
	Если ПозРазделителя = 0 Тогда 
		ПозРазделителя = СтрНайти(врSOAP, "/");
		Если ПозРазделителя = 0 Тогда 
			ТекстОшибки = НСтр("en='Incorrect address.';ru='Неверно указан адрес.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "SOAPUrl");
			Возврат;
		КонецЕсли;
		врSOAPАдрес  = Лев(врSOAP, ПозРазделителя-1);
		врSOAPРесурс = Прав(врSOAP, СтрДлина(врSOAP)-ПозРазделителя);
		врSOAPПорт   = 80;
	Иначе 
		врSOAPАдрес = Лев(врSOAP, ПозРазделителя-1);
		врSOAP      = Прав(врSOAP, СтрДлина(врSOAP)-ПозРазделителя);
		
		ПозРазделителя = СтрНайти(врSOAP, "/");
		Если ПозРазделителя = 0 Тогда 
			ТекстОшибки = НСтр("en='Incorrect address.';ru='Неверно указан адрес.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "SOAPUrl");
			Возврат;
		КонецЕсли;
		
		Попытка
			врSOAPПорт = Число(Лев(врSOAP, ПозРазделителя-1));
		Исключение
			ТекстОшибки = НСтр("en='Incorrect address.';ru='Неверно указан адрес.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "SOAPUrl");
			Возврат;
		КонецПопытки;
		
		врSOAPРесурс = Прав(врSOAP, СтрДлина(врSOAP)-ПозРазделителя);
	КонецЕсли;
	
	Попытка
		HTTPСоединение = Новый HTTPСоединение(врSOAPАдрес, врSOAPПорт, SOAPLogin, SOAPPassword,, 15);
	Исключение
		ПоказатьПредупреждение(, НСтр("en='Connection is not made.';ru='Подключение не выполнено.'"));
		HTTPСоединение = Неопределено;
		Возврат;
	КонецПопытки;
	
	HTTPЗапрос = Новый HTTPЗапрос(врSOAPРесурс);
	
	Попытка
		HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос);
	Исключение
		ПоказатьПредупреждение(, НСтр("en='Connection is not made.';ru='Подключение не выполнено.'"));
		HTTPСоединение = Неопределено;
		Возврат;
	КонецПопытки;
	
	Если HTTPОтвет.КодСостояния = 200 Тогда 
		ПоказатьПредупреждение(, НСтр("en='Connection is successful.';ru='Подключение выполнено успешно.'"));
	Иначе 
		ПоказатьПредупреждение(, НСтр("en='Connection is not made.';ru='Подключение не выполнено.'"));
	КонецЕсли;
	
	HTTPСоединение = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКСерверуЛицензирования(Команда)
	
	Если Не ЗначениеЗаполнено(LMUrl) Тогда 
		ТекстОшибки = НСтр("en='It is necessary to specify address of license server.';ru='Необходимо указать адрес сервера лицензирования.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "LMUrl");
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения(,,, "ОткрытьСерверЛицензированияПриОбработкеОшибки", ЭтотОбъект);
	НачатьЗапускПриложения(Оповещение, "http://"+LMUrl+":15201/",, Ложь);

КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройки(Команда)
	
	стрПараметрыПодключения = Новый Структура();
	стрПараметрыПодключения.Вставить("АдресСервераМП",  АдресСервераМП);
	стрПараметрыПодключения.Вставить("ПортСервераМП",   ПортСервераМП);
	стрПараметрыПодключения.Вставить("ЛогинСервераМП",  ЛогинСервераМП);
	стрПараметрыПодключения.Вставить("ПарольСервераМП", ПарольСервераМП);
	
	ЗаписьXML = Новый ЗаписьXML();
	ЗаписьXML.УстановитьСтроку("UTF-8");
	ЗаписьXML.ЗаписатьНачалоЭлемента("settings");
	ЗаписьXML.ЗаписатьНачалоЭлемента("currentsetting");
	ЗаписьXML.ЗаписатьНачалоЭлемента("name");
	ЗаписьXML.ЗаписатьТекст("WSDLUrl");
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьНачалоЭлемента("value");
	ЗаписьXML.ЗаписатьТекст(WSDLUrl);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьНачалоЭлемента("currentsetting");
	ЗаписьXML.ЗаписатьНачалоЭлемента("name");
	ЗаписьXML.ЗаписатьТекст("SOAPLogin");
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьНачалоЭлемента("value");
	ЗаписьXML.ЗаписатьТекст(SOAPLogin);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьНачалоЭлемента("currentsetting");
	ЗаписьXML.ЗаписатьНачалоЭлемента("name");
	ЗаписьXML.ЗаписатьТекст("SOAPPassword");
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьНачалоЭлемента("value");
	ЗаписьXML.ЗаписатьТекст(SOAPPassword);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьНачалоЭлемента("currentsetting");
	ЗаписьXML.ЗаписатьНачалоЭлемента("name");
	ЗаписьXML.ЗаписатьТекст("LMUrl");
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьНачалоЭлемента("value");
	ЗаписьXML.ЗаписатьТекст(LMUrl);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьНачалоЭлемента("currentsetting");
	ЗаписьXML.ЗаписатьНачалоЭлемента("name");
	ЗаписьXML.ЗаписатьТекст("AccessCode");
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьНачалоЭлемента("value");
	ЗаписьXML.ЗаписатьТекст(AccessCode);
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьНачалоЭлемента("currentsetting");
	ЗаписьXML.ЗаписатьНачалоЭлемента("name");
	ЗаписьXML.ЗаписатьТекст("workingPort");
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьНачалоЭлемента("value");
	ЗаписьXML.ЗаписатьТекст(Формат(workingPort, "ЧН=0; ЧГ=0"));
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	ЗаписьXML.ЗаписатьКонецЭлемента();
	
	ТекстОшибки = "";
	стрДанныеОтвета = Неопределено;
	Если уатМобильноеПриложениеВодителяСервер.ВыполнитьМетодСервераМП(стрПараметрыПодключения, "setServerSettings", "<![CDATA[" + ЗаписьXML.Закрыть() + "]]>", стрДанныеОтвета, ТекстОшибки) Тогда 
		Если стрДанныеОтвета.Свойство("resultCode") И стрДанныеОтвета.resultCode = "0" Тогда 
			РезультатЗакрытия = Новый Структура();
			РезультатЗакрытия.Вставить("workingPort",  workingPort);
			РезультатЗакрытия.Вставить("SOAPlogin",    SOAPLogin);
			РезультатЗакрытия.Вставить("SOAPpassword", SOAPPassword);
			Закрыть(РезультатЗакрытия);
		ИначеЕсли стрДанныеОтвета.Свойство("resultDescription") Тогда
			ПоказатьПредупреждение(, НСтр("en='Error occurred while sending settings to the server."
"Description of the error:';ru='При отправке настроек на сервер возникла ошибка."
"Описание ошибки:'") + " " + стрДанныеОтвета.resultDescription);
		Иначе 
			ПоказатьПредупреждение(, НСтр("en='Error occurred while sending settings to server.';ru='При отправке настроек на сервер возникла ошибка.'"));
		КонецЕсли;
	Иначе 
		ПоказатьПредупреждение(, ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервереБезКонтекста
Функция ПолучитьПользователейИБ(СтрокаПоиска)
	
	СписокПользователей = Новый СписокЗначений();
	
	Для Каждого ТекПользователь Из ПользователиИнформационнойБазы.ПолучитьПользователей() Цикл 
		Если ЗначениеЗаполнено(СтрокаПоиска) Тогда 
			врПозицияОтсечения = СтрДлина(СтрокаПоиска);
			Если Не НРег(Лев(ТекПользователь.Имя, врПозицияОтсечения)) = НРег(СтрокаПоиска) Тогда
				Продолжить;
			КонецЕсли;
			тПредставление = Новый ФорматированнаяСтрока(
				Новый ФорматированнаяСтрока(Лев(ТекПользователь.Имя, врПозицияОтсечения),, ЦветаСтиля.уатЦветТекстаПриАвтоподборе), 
				Новый ФорматированнаяСтрока(Прав(ТекПользователь.Имя, СтрДлина(ТекПользователь.Имя)-врПозицияОтсечения)));
			СписокПользователей.Добавить(ТекПользователь.Имя, тПредставление);
		Иначе 
			СписокПользователей.Добавить(ТекПользователь.Имя, ТекПользователь.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокПользователей;
	
КонецФункции // ПолучитьПользователейИБ()

&НаСервере
Функция УстановитьТекущиеНастройкиССервера()
	
	стрПараметрыПодключения = Новый Структура();
	стрПараметрыПодключения.Вставить("АдресСервераМП",  АдресСервераМП);
	стрПараметрыПодключения.Вставить("ПортСервераМП",   ПортСервераМП);
	стрПараметрыПодключения.Вставить("ЛогинСервераМП",  ЛогинСервераМП);
	стрПараметрыПодключения.Вставить("ПарольСервераМП", ПарольСервераМП);
	
	ТекстОшибки = "";
	стрДанныеОтвета = Неопределено;
	Если уатМобильноеПриложениеВодителяСервер.ВыполнитьМетодСервераМП(стрПараметрыПодключения, "getServerSettings",, стрДанныеОтвета, ТекстОшибки) Тогда 
		Если стрДанныеОтвета.Свойство("resultCode") И стрДанныеОтвета.resultCode = "0" Тогда 
			ЧтениеXML = Новый ЧтениеXML();
			Попытка
				ЧтениеXML.УстановитьСтроку(стрДанныеОтвета.responseData);
			Исключение
				ЧтениеXML.Закрыть();
				Возврат Ложь;
			КонецПопытки;
			
			Пока ЧтениеXML.Прочитать() Цикл 
				Если ЧтениеXML.ТипУзла = ТипУзлаXML.НачалоЭлемента И НРег(ЧтениеXML.Имя) = НРег("CurrentSetting") Тогда 
					ЧтениеXML.Прочитать();
					ЧтениеXML.Прочитать();
					врИмяНастройки = ЧтениеXML.Значение;
					ЧтениеXML.Прочитать();
					ЧтениеXML.Прочитать();
					ЧтениеXML.Прочитать();
					
					Если НРег(врИмяНастройки) = НРег("workingPort") Тогда 
						Попытка
							workingPort = Число(ЧтениеXML.Значение);
						Исключение
						КонецПопытки;
					ИначеЕсли НРег(врИмяНастройки) = НРег("WSDLUrl") Тогда
						WSDLUrl = ЧтениеXML.Значение;
					ИначеЕсли НРег(врИмяНастройки) = НРег("SOAPLogin") Тогда
						SOAPLogin = ЧтениеXML.Значение;
					ИначеЕсли НРег(врИмяНастройки) = НРег("SOAPPassword") Тогда
						SOAPPassword = ЧтениеXML.Значение;
					ИначеЕсли НРег(врИмяНастройки) = НРег("LMUrl") Тогда
						LMUrl = ЧтениеXML.Значение;
					ИначеЕсли НРег(врИмяНастройки) = НРег("AccessCode") Тогда
						AccessCode = ЧтениеXML.Значение;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			ЧтениеXML.Закрыть();
		Иначе 
			Возврат Ложь;
		КонецЕсли;
	Иначе 
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
	
КонецФункции

// Продолжение процедуры ОбщегоНазначенияКлиент.ОткрытьПроводник.
&НаСервере
Процедура ОткрытьСерверЛицензированияПриОбработкеОшибки(ИнформацияОбОшибке, СтандартнаяОбработка, Контекст) Экспорт 
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Автотест = Истина;
		Возврат;
	КонецЕсли;
	
	ОбновитьДанныеРеглЗаданийСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	УдалитьНезначащиеСимволыВНастройках();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Не ЗначениеЗаполнено(НаборКонстант.уатАдресСервераWMS_уэ) Тогда
		ТекстНСтр = НСтр("ru = 'Не заполнен адрес сервера WMS'; en = 'WMS server address is not specified'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСтр,, "уатАдресСервераWMS_уэ", "НаборКонстант", Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НаборКонстант.уатАдресПубликацииWMS_уэ) Тогда
		ТекстНСтр = НСтр("ru = 'Не заполнено имя публикации'; en = 'Publication name is not specified'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСтр,, "уатАдресПубликацииWMS_уэ", "НаборКонстант", Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НаборКонстант.уатЛогинВСистемеWMS_уэ) Тогда
		ТекстНСтр = НСтр("ru = 'Не заполнен пользователь'; en = 'User is not specified'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСтр,, "уатЛогинВСистемеWMS_уэ", "НаборКонстант", Отказ);
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(НаборКонстант.уатСкладДляОбменаСWMS_уэ) Тогда
		ТекстНСтр = НСтр("ru = 'Не заполнен склад'; en = 'Warehouse is not specified'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСтр,, "уатСкладДляОбменаСWMS_уэ", "НаборКонстант", Отказ);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФорм

&НаКлиенте
Процедура ВыполнитьРегламентноеЗаданиеВручнуюКоманда(Команда)
	ВыполнитьРегламентноеЗаданиеВручную(СинхронизацияДанныхСWMS);
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРегламентноеЗадание(Команда)
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Идентификатор", СинхронизацияДанныхСWMS);
	ПараметрыФормы.Вставить("Действие",      "Изменить");
	ОткрытьФорму("Обработка.РегламентныеИФоновыеЗадания.Форма.РегламентноеЗадание", ПараметрыФормы, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатусРеглЗаданий(Команда)
	ОбновитьДанныеРеглЗаданий();
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключение(Команда)
	
	Если Модифицированность Тогда
		ТекстНСтр = НСтр("ru = 'Перед проверкой подключения необходимо сохранить настройки. Продолжить?'");
		ОповещениеОтветНаВопрос = Новый ОписаниеОповещения("ПроверитьПодключениеЗавершение", ЭтотОбъект);
		ПоказатьВопрос(ОповещениеОтветНаВопрос, ТекстНСТР, РежимДиалогаВопрос.ДаНет);
	ИначеЕсли ПроверитьЗаполнение() Тогда
		ТекстОшибки = "";
		Если уатИнтеграции_уэ.ПроверитьСоединениеСWMS(ТекстОшибки) Тогда
			ПоказатьПредупреждение(, НСтр("en='Connection check is completed successfully.';ru='Проверка подключения успешно завершена.'"));
		Иначе
			ПоказатьПредупреждение(, ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ВыполнитьРегламентноеЗаданиеВручную(РеглЗадание)
	МассивСообщенийОбОшибках = Новый Массив;
	
	ПараметрыВыполнения = ВыполнитьРегламентноеЗаданиеВручнуюНаСервере(РеглЗадание);
	Если ПараметрыВыполнения.ЗапускВыполнен Тогда
		
		ПоказатьОповещениеПользователя(
			НСтр("ru='Запущена процедура регламентного задания';en='Scheduled job is launched'"), ,
			СтрШаблон(НСтр("ru = 'Синхронизация данных с 1С:WMS.
				|Процедура запущена в фоновом задании %1'"),
				Строка(ПараметрыВыполнения.МоментЗапуска)),
			БиблиотекаКартинок.ВыполнитьРегламентноеЗаданиеВручную
		);
		
		ИдентификаторыФоновыхЗаданийПриРучномВыполнении.Добавить(ПараметрыВыполнения.ИдентификаторФоновогоЗадания,
			НСтр("ru = 'Синхронизация данных с 1С:WMS.'"));
		
		ПодключитьОбработчикОжидания("СообщитьОбОкончанииРучногоВыполненияРегламентногоЗадания", 0.1, Истина);
	ИначеЕсли ПараметрыВыполнения.ПроцедураУжеВыполняется Тогда
		МассивСообщенийОбОшибках.Добавить(СтрШаблон(
			НСтр("ru = 'Процедура регламентного задания ""Синхронизация данных с 1С:WMS""
				|уже выполняется в фоновом задании ""%1"", начатом %2.'"),
			ПараметрыВыполнения.ПредставлениеФоновогоЗадания,
			Строка(ПараметрыВыполнения.МоментЗапуска))
		);
	КонецЕсли;
	
	КоличествоОшибок = МассивСообщенийОбОшибках.Количество();
	Если КоличествоОшибок > 0 Тогда
		ЗаголовокТекстаПроОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Задания выполнены с ошибками (%1 из %2)';en='Jobs are completed with errors (%1 out of %2)'"),
		Формат(КоличествоОшибок, "ЧГ="),
		Формат(1, "ЧГ="));
		
		ТекстВсехОшибок = Новый ТекстовыйДокумент;
		ТекстВсехОшибок.ДобавитьСтроку(ЗаголовокТекстаПроОшибки + ":");
		Для Каждого ТекстЭтойОшибки Из МассивСообщенийОбОшибках Цикл
			ТекстВсехОшибок.ДобавитьСтроку("");
			ТекстВсехОшибок.ДобавитьСтроку(ТекстЭтойОшибки);
		КонецЦикла;
		
		Если КоличествоОшибок > 5 Тогда
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить(1, НСтр("ru='Показать ошибки';en='Show errors'"));
			Кнопки.Добавить(КодВозвратаДиалога.Отмена);
			
			ПоказатьВопрос(
			Новый ОписаниеОповещения(
			"ВыполнитьРегламентноеЗаданиеВручнуюЗавершение", ЭтотОбъект, ТекстВсехОшибок),
			ЗаголовокТекстаПроОшибки, Кнопки);
		Иначе
			ПоказатьПредупреждение(, СокрЛП(ТекстВсехОшибок.ПолучитьТекст()));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеРеглЗаданий()
	ОбновитьДанныеРеглЗаданийСервер();
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеРеглЗаданийСервер()
	
	ТипФоновоеЗадание		 = Тип("ФоновоеЗадание");
	ТипИнформацияОбОшибке	 = Тип("ИнформацияОбОшибке");

	РеглЗаданиеСинхронизацияДанныхСWMS = РегламентныеЗаданияСервер.Задание(Метаданные.РегламентныеЗадания.уатСинхронизацияДанныхСWMS_уэ);
	СинхронизацияДанныхСWMS = РеглЗаданиеСинхронизацияДанныхСWMS.УникальныйИдентификатор;
	
	Подсказка =  НСтр("ru='Никогда не выполнялось';en='Never execute'");
	Если РеглЗаданиеСинхронизацияДанныхСWMS = Неопределено Тогда
		ПредставлениеРасписания = НСтр("ru='Регламентное задание не найдено';en='Scheduled job is not found'");
		РегламентноеЗадание_Использование = Ложь;
	Иначе
		ПоследнееФоновоеЗадание = РегламентныеЗаданияСлужебный.СвойстваФоновыхЗаданий(Новый Структура("ПолучитьПоследнееФоновоеЗаданиеРегламентногоЗадания,
			|ИдентификаторРегламентногоЗадания", Истина, СинхронизацияДанныхСWMS));
		Подсказка = ?(РеглЗаданиеСинхронизацияДанныхСWMS.Использование, 
				НСтр("ru='Используется';en='Used'"), НСтр("ru='Не используется';en='Not used'"));
		Если ПоследнееФоновоеЗадание.Количество() > 0 Тогда
			Подсказка = Подсказка + ", " + Строка(ПоследнееФоновоеЗадание[0].Состояние)
			+ " " + Строка(?(Значениезаполнено(ПоследнееФоновоеЗадание[0].Конец), ПоследнееФоновоеЗадание[0].Конец, ""));
		КонецЕсли;
	КонецЕсли;
	
	Если Подсказка <> СтатусФоновогоЗадания Тогда
		СтатусФоновогоЗадания = Подсказка;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьРегламентноеЗаданиеВручнуюНаСервере(Знач ИдентификаторРегламентногоЗадания)
	
	Результат = РегламентныеЗаданияСлужебный.ВыполнитьРегламентноеЗаданиеВручную(ИдентификаторРегламентногоЗадания);
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура СообщитьОбОкончанииРучногоВыполненияРегламентногоЗадания()
	
	ОповещенияОбОкончанииВыполнения = ОповещенияОбОкончанииВыполненияРегламентныхЗаданий();
	Для каждого Оповещение Из ОповещенияОбОкончанииВыполнения Цикл
		
		ПоказатьОповещениеПользователя(
			НСтр("ru='Выполнена процедура регламентного задания';en='Scheduled job procedure is executed'"),
			,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("en = '%1. The procedure is completed in background job %2'; ru = '%1. Процедура завершена в фоновом задании %2'"),
				Оповещение.ПредставлениеРегламентногоЗадания,
				Строка(Оповещение.МоментОкончания)),
			БиблиотекаКартинок.ВыполнитьРегламентноеЗаданиеВручную);
		ОбновитьДанныеРеглЗаданий();
	КонецЦикла;
	
	Если ИдентификаторыФоновыхЗаданийПриРучномВыполнении.Количество() > 0 Тогда
		
		ПодключитьОбработчикОжидания(
			"СообщитьОбОкончанииРучногоВыполненияРегламентногоЗадания", 2, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОповещенияОбОкончанииВыполненияРегламентныхЗаданий()
	
	ОповещенияОбОкончанииВыполнения = Новый Массив;
	
	Если ИдентификаторыФоновыхЗаданийПриРучномВыполнении.Количество() > 0 Тогда
		Индекс = ИдентификаторыФоновыхЗаданийПриРучномВыполнении.Количество() - 1;
		
		УстановитьПривилегированныйРежим(Истина);
		Пока Индекс >= 0 Цикл
			
			НовыйУникальныйИдентификатор = Новый УникальныйИдентификатор(
				ИдентификаторыФоновыхЗаданийПриРучномВыполнении[Индекс].Значение);
			Отбор = Новый Структура;
			Отбор.Вставить("УникальныйИдентификатор", НовыйУникальныйИдентификатор);
			
			МассивФоновыхЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
			
			Если МассивФоновыхЗаданий.Количество() = 1 Тогда
				МоментОкончания = МассивФоновыхЗаданий[0].Конец;
				
				Если ЗначениеЗаполнено(МоментОкончания) Тогда
					
					ОповещенияОбОкончанииВыполнения.Добавить(
						Новый Структура(
							"ПредставлениеРегламентногоЗадания,
							|МоментОкончания",
							ИдентификаторыФоновыхЗаданийПриРучномВыполнении[Индекс].Представление,
							МоментОкончания));
					
					ИдентификаторыФоновыхЗаданийПриРучномВыполнении.Удалить(Индекс);
				КонецЕсли;
			Иначе
				ИдентификаторыФоновыхЗаданийПриРучномВыполнении.Удалить(Индекс);
			КонецЕсли;
			Индекс = Индекс - 1;
		КонецЦикла;
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Возврат ОповещенияОбОкончанииВыполнения;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьРегламентноеЗаданиеВручнуюЗавершение(Ответ, ТекстВсехОшибок) Экспорт
	
	Если Ответ = 1 Тогда
		ТекстВсехОшибок.Показать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьНезначащиеСимволыВНастройках()
	НаборКонстант.уатАдресПубликацииWMS_уэ = СокрЛП(НаборКонстант.уатАдресПубликацииWMS_уэ);
	НаборКонстант.уатАдресСервераWMS_уэ    = СокрЛП(НаборКонстант.уатАдресСервераWMS_уэ);
	НаборКонстант.уатЛогинВСистемеWMS_уэ   = СокрЛП(НаборКонстант.уатЛогинВСистемеWMS_уэ);
	НаборКонстант.уатПарольВСистемеWMS_уэ  = СокрЛП(НаборКонстант.уатПарольВСистемеWMS_уэ);
	НаборКонстант.уатПортСервисаWMS_уэ     = СокрЛП(НаборКонстант.уатПортСервисаWMS_уэ);
	НаборКонстант.уатПротоколСервисаWMS_уэ = СокрЛП(НаборКонстант.уатПротоколСервисаWMS_уэ);
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключениеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		Если ПроверитьЗаполнение() И Записать() Тогда
			ТекстОшибки = "";
			Если уатИнтеграции_уэ.ПроверитьСоединениеСWMS(ТекстОшибки) Тогда
				ПоказатьПредупреждение(, НСтр("en='Connection check is completed successfully.';ru='Проверка подключения успешно завершена.'"));
			Иначе
				ПоказатьПредупреждение(, ТекстОшибки);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	ЗаполнитьДеревоРазделов();

	уатЗащищенныеФункцииСервер.уатСправочникФормаСпискаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	ПроверкаДоступностиВалютыУчета();
	
	ОписаниеУАТ = уатЗащищенныеФункцииСервер.ПолучитьОписаниеПодсистемыУАТ();
	НомерВерсииКонфигурацииУАТ = ОбновлениеИнформационнойБазы.ВерсияИБ(ОписаниеУАТ.Имя);
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Если Метаданные.Обработки.Найти("ОбновлениеВерсииИБ") = Неопределено Тогда 
		Элементы.НомерВерсииКонфигурацииУАТ.КнопкаВыбора = Ложь;
	ИначеЕсли Не (ПравоДоступа("Использование", Метаданные.Обработки.ОбновлениеВерсииИБ) И ПравоДоступа("Просмотр", Метаданные.Обработки.ОбновлениеВерсииИБ)) Тогда 
		Элементы.НомерВерсииКонфигурацииУАТ.КнопкаВыбора = Ложь;
	КонецЕсли;
	
	Если ДоступноИзменениеЕдиницИзмерения() Или РольДоступна(Метаданные.Роли.ПолныеПрава.Имя) Тогда 
		Элементы.уатЕдиницаИзмеренияВеса.Доступность   = Истина;
		Элементы.уатЕдиницаИзмеренияОбъема.Доступность = Истина;
	Иначе 
		Элементы.уатЕдиницаИзмеренияВеса.Доступность   = Ложь;
		Элементы.уатЕдиницаИзмеренияОбъема.Доступность = Ложь;
	КонецЕсли;
	
	ЗаполнитьТаблицуПоиска();
	Если НЕ ПустаяСтрока(ВведеннаяСтрокаПоиска) Тогда
		ВыполнитьПоискСервер();
	Иначе
		УстановитьВидимостьРазделовРекурсивно(ДеревоРазделов.ПолучитьЭлементы());
	КонецЕсли;
	
	Элементы.ФормаПолучитьТокенПроверкиСервиса.Видимость = РольДоступна(Метаданные.Роли.ПолныеПрава);
	
	// {УАТ_ПРОФ}
	ФормаНастроекПриСозданииНаСервере_проф();
	// {/УАТ_ПРОФ}
	
	// {УАТ_УЭ}
	ФормаНастроекПриСозданииНаСервере_уэ();
	// {/УАТ_УЭ}
		
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	уатЗащищенныеФункцииКлиент.уатСправочникФормаСпискаПриОткрытии(Отказ, ДопПараметрыОткрытие);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПроверитьСвязанныеЗначения();
	УстановитьВидимостьДоступность();
	УстановитьВидимостьПрофКорп();
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)
	
	// {УАТ_ПРОФ}
	ФормаНастроекПослеЗаписиНаСервере_проф(ЭтаФорма);
	// {/УАТ_ПРОФ}
	
	// {УАТ_УЭ}
	ФормаНастроекПослеЗаписиНаСервере_уэ(ЭтаФорма);
	// {/УАТ_УЭ}
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗаписи(ПараметрыЗаписи)
		
	ОбновитьИнтерфейс();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	Если НаборКонстант.уатИспользоватьМобильноеПриложениеВодителя
		И НЕ НаборКонстант.уатУчетПланФактаПоМаршрутуВМаршрутныхЛистах Тогда
		ТекстНСТР = НСтр("ru='Для работы с мобильным приложением необходимо включить настройку ""Учет плана и факта по маршруту в Маршрутных листах"".'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийОбщихЭлементовФормы

&НаКлиенте
Процедура ДеревоРазделовПриАктивизацииСтроки(Элемент)
	
	Если Элементы.ДеревоРазделов.ТекущаяСтрока = Неопределено Или Элементы.ДеревоРазделов.ТекущиеДанные.Видимость = Ложь Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.ДеревоРазделов.Развернуть(Элементы.ДеревоРазделов.ТекущаяСтрока);
		
	СоответствующаяРазделуСтраница = Элементы.Найти(Элементы.ДеревоРазделов.ТекущиеДанные.Имя);
		
	Если СоответствующаяРазделуСтраница = Неопределено Тогда
		Возврат;
	Иначе
		Элементы.СтраницыНастроек.ТекущаяСтраница = СоответствующаяРазделуСтраница;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура уатМноговалютныйУчетПриИзменении(Элемент)
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура уатУчетЗаказовНаТСвПутевыхЛистахПриИзменении(Элемент)
	
	Если НЕ НаборКонстант.уатУчетЗаказовНаТСвПутевыхЛистах И НаборКонстант.уатЗакрытиеЗаказовНаТСПутевымиЛистами Тогда
		НаборКонстант.уатЗакрытиеЗаказовНаТСПутевымиЛистами = Ложь;
	КонецЕсли;
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура уатЗакрытиеЗаказовНаТСПутевымиЛистамиПриИзменении(Элемент)
	
	Если НаборКонстант.уатЗакрытиеЗаказовНаТСПутевымиЛистами Тогда
		НаборКонстант.уатИспользоватьЗакреплениеМаршрутныхЛистовЗаПеревозчиками_уэ = Ложь;
	КонецЕсли;
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура уатИспользоватьИнтеграциюАТИ_уэПриИзменении(Элемент)
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура уатУчетПланФактаПоМаршрутуВПутевыхЛистахПриИзменении(Элемент)
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура уатИспользоватьСервисMultiGoПриИзменении(Элемент)
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура уатИспользоватьТендеры_уэПриИзменении(Элемент)
	
	Если Не НаборКонстант.уатИспользоватьТендеры_уэ И НаборКонстант.уатИспользоватьИнтеграциюАТИ_уэ Тогда
		НаборКонстант.уатИспользоватьИнтеграциюАТИ_уэ = Ложь;
	КонецЕсли;
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура уатИспользоватьУведомления_уэПриИзменении(Элемент)
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура уатИспользоватьТехнологическиеПутевыеЛистыПриИзменении(Элемент)
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура уатИспользоватьСкладскиеАкты_уэПриИзменении(Элемент)
	
	Если Не НаборКонстант.уатИспользоватьСкладскиеАкты_уэ И НаборКонстант.уатРазделятьПланФактВСкладскихАктах_уэ Тогда
		НаборКонстант.уатРазделятьПланФактВСкладскихАктах_уэ = Ложь;
	КонецЕсли;
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура уатИспользоватьПривлеченныхПеревозчиковПриИзменении(Элемент)
	
	Если Не НаборКонстант.уатИспользоватьПривлеченныхПеревозчиков
		И НаборКонстант.уатИспользоватьЗакреплениеМаршрутныхЛистовЗаПеревозчиками_уэ Тогда
		НаборКонстант.уатИспользоватьЗакреплениеМаршрутныхЛистовЗаПеревозчиками_уэ = Ложь;
	КонецЕсли;
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьШтрихкодирование_уатЗаказГрузоотправителяПриИзменении(Элемент)
	
	Если НЕ ИспользоватьШтрихкодирование_уатЗаказГрузоотправителя
		И НаборКонстант.уатИспользоватьШтрихкодированиеГрузовЗаказахНаТС_уэ Тогда
		
		НаборКонстант.уатИспользоватьШтрихкодированиеГрузовЗаказахНаТС_уэ = Ложь;
	КонецЕсли;
	
	Если НЕ ИспользоватьШтрихкодирование_уатЗаказГрузоотправителя
		И НаборКонстант.уатИспользоватьШаблонШтрихкода_уэ Тогда
		
		НаборКонстант.уатИспользоватьШаблонШтрихкода_уэ = Ложь;
	КонецЕсли;
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура уатИспользоватьСогласованиеДокументовПриИзменении(Элемент)
	УстановитьВидимостьДоступность()
КонецПроцедуры

&НаКлиенте
Процедура уатИспользоватьШаблонШтрихкода_уэПриИзменении(Элемент)
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура уатТипШтрихкодаДляПечати_уэПриИзменении(Элемент) 
	ЭтоКОРП = уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП(); 
	
	Если ЭтоКОРП Тогда
		Если НаборКонстант.уатТипШтрихкодаДляПечати_уэ = ПредопределенноеЗначение("Перечисление.уатТипыШтрихкодов.EAN13") Тогда
			НаборКонстант.уатИспользоватьШаблонШтрихкода_уэ = Ложь;
			Элементы.уатТипШтрихкодаДляПечати_уэ.Подсказка = "Для типа штрихкода EAN-13 алгоритм формирования штрихкода по шаблону недоступен.";
			Элементы.уатТипШтрихкодаДляПечати_уэ.ОтображениеПодсказки = ОтображениеПодсказки.Кнопка;
		Иначе
			Элементы.уатТипШтрихкодаДляПечати_уэ.ОтображениеПодсказки = ОтображениеПодсказки.Нет;
		КонецЕсли; 
	КонецЕсли;
	
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура уатИспользоватьСервисШтрафовНетПриИзменении(Элемент)
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура уатИспользоватьАвтоматическуюЗагрузкуОтчетовПЦПриИзменении(Элемент)
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура уатИспользоватьУчетДоходовИРасходовПриИзменении(Элемент)
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура уатЕдиницаИзмеренияВесаПриИзменении(Элемент)
	
	Если Не ДоступноИзменениеЕдиницИзмерения() Тогда 
		Если ЗадаватьВопросПриИзмененииЕдиницИзмерения() Тогда 
			ТекстВопроса = НСтр("en='It is not recommended to change the weight unit after you start working with system."
			"Do you want to continue editing?';ru='Изменять единицу измерения веса после начала работы с системой не рекомендуется."
			"Продолжить редактирование?'");
			Оповещение = Новый ОписаниеОповещения(
			"Подключаемый_ПриИзмененииЕИВеса", 
			ЭтотОбъект
			);
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			Возврат;
			
		Иначе 
			НаборКонстант.уатЕдиницаИзмеренияВеса = ПолучитьЕдиницуИзмеренияВеса();
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура уатЕдиницаИзмеренияОбъемаПриИзменении(Элемент)
	
	Если Не ДоступноИзменениеЕдиницИзмерения() Тогда 
		Если ЗадаватьВопросПриИзмененииЕдиницИзмерения() Тогда 
			ТекстВопроса = НСтр("en='It is not recommended to change the unit of volume measurement after working with the system."
			"Do you want to continue editing?';ru='Изменять единицу измерения объема после начала работы с системой не рекомендуется."
			"Продолжить редактирование?'");
			Оповещение = Новый ОписаниеОповещения(
			"Подключаемый_ПриИзмененииЕИОбъема", 
			ЭтотОбъект
			);
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
			Возврат;
			
		Иначе 
			НаборКонстант.уатЕдиницаИзмеренияОбъема = ПолучитьЕдиницуИзмеренияОбъема();
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура уатИспользоватьЗагрузкуОтчетовИзПлатонПриИзменении(Элемент)
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура уатПрогнозированиеОпозданийПоМаршрутнымЛистамПриИзменении(Элемент)
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура уатИспользоватьАвтоматическуюМаршрутизацию_уэПриИзменении(Элемент)
	
	Если Не НаборКонстант.уатИспользоватьАвтоматическуюМаршрутизацию_уэ И НаборКонстант.уатИспользоватьРазмещениеНаПаллетах_уэ Тогда
		НаборКонстант.уатИспользоватьРазмещениеНаПаллетах_уэ = Ложь;
	КонецЕсли;
	
	Если Не НаборКонстант.уатИспользоватьАвтоматическуюМаршрутизацию_уэ И НаборКонстант.уатИспользоватьХарактеристикиЗаказовНаТС_уэ Тогда
		НаборКонстант.уатИспользоватьХарактеристикиЗаказовНаТС_уэ = Ложь;
	КонецЕсли;
	
	Если Не НаборКонстант.уатИспользоватьАвтоматическуюМаршрутизацию_уэ И НаборКонстант.уатИспользоватьГруппыСовместимостиЗаказовНаТС_уэ Тогда
		НаборКонстант.уатИспользоватьГруппыСовместимостиЗаказовНаТС_уэ = Ложь;
	КонецЕсли;
	
	Если Не НаборКонстант.уатИспользоватьАвтоматическуюМаршрутизацию_уэ И НаборКонстант.уатИспользоватьКластеризацию_уэ Тогда
		НаборКонстант.уатИспользоватьКластеризацию_уэ = Ложь;
	КонецЕсли;
	
	Если Не НаборКонстант.уатИспользоватьАвтоматическуюМаршрутизацию_уэ И НаборКонстант.уатОбновлениеРасстоянийВФоновомРежиме_уэ Тогда
		НаборКонстант.уатОбновлениеРасстоянийВФоновомРежиме_уэ = Ложь;
	КонецЕсли;
	
	Если Не НаборКонстант.уатИспользоватьАвтоматическуюМаршрутизацию_уэ И НаборКонстант.уатИспользоватьГруппировкуГрузов_уэ Тогда
		НаборКонстант.уатИспользоватьГруппировкуГрузов_уэ = Ложь;
	КонецЕсли;
	
	Если Не НаборКонстант.уатИспользоватьАвтоматическуюМаршрутизацию_уэ И НаборКонстант.уатИспользоватьГруппыБалансировкиМаршрутов_уэ Тогда
		НаборКонстант.уатИспользоватьГруппыБалансировкиМаршрутов_уэ = Ложь;
	КонецЕсли;

	Если Не НаборКонстант.уатИспользоватьАвтоматическуюМаршрутизацию_уэ И НаборКонстант.уатИспользоватьРазмещениеВСекциях_уэ Тогда
		НаборКонстант.уатИспользоватьРазмещениеВСекциях_уэ = Ложь;
	КонецЕсли;
	
	Если Не НаборКонстант.уатИспользоватьАвтоматическуюМаршрутизацию_уэ И НаборКонстант.уатИспользоватьГруппыБалансировкиМаршрутов_уэ Тогда
		НаборКонстант.уатИспользоватьГруппыБалансировкиМаршрутов_уэ = Ложь;
	КонецЕсли;
	
	Если НЕ НаборКонстант.уатИспользоватьАвтоматическуюМаршрутизацию_уэ И НаборКонстант.уатИспользоватьРасчетТары_уэ Тогда
		НаборКонстант.уатИспользоватьРасчетТары_уэ = Ложь;
	КонецЕсли;

	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура уатИспользоватьРасчетТары_уэПриИзменении(Элемент)
	
	Если Не НаборКонстант.уатИспользоватьРасчетТары_уэ И НаборКонстант.уатИспользоватьГруппировкуГрузов_уэ Тогда
		НаборКонстант.уатИспользоватьГруппировкуГрузов_уэ = Ложь;
	КонецЕсли;
	
	Если Не НаборКонстант.уатИспользоватьРасчетТары_уэ И НаборКонстант.уатИспользоватьРазмещениеНаПаллетах_уэ Тогда
		НаборКонстант.уатИспользоватьРазмещениеНаПаллетах_уэ = Ложь;
	КонецЕсли;
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура уатИспользоватьИнтеграциюПаркоматикаПриИзменении(Элемент)
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура уатИспользоватьМониторингПриИзменении(Элемент)
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура уатИспользоватьЭлектронныеКартыПриИзменении(Элемент)
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура уатИспользоватьИнтеграциюWMS_уэПриИзменении(Элемент)
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьБюджетированиеПриИзменении(Элемент)
	
	Если Не НаборКонстант.ИспользоватьБюджетирование И НаборКонстант.ИспользоватьБюджетныеПроцессы Тогда
		НаборКонстант.ИспользоватьБюджетныеПроцессы = Ложь;
	КонецЕсли;
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура уатИспользоватьМобильноеПриложениеВодителяПриИзменении(Элемент)
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПерейтиЛогистикаОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ПерейтиКСтраницеНастроек(НавигационнаяСсылкаФорматированнойСтроки);

КонецПроцедуры

&НаКлиенте
Процедура НомерВерсииКонфигурацииУАТНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ОткрытьФорму("Обработка.ОбновлениеВерсииИБ.Форма");
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаНастроекПриИзменении(Элемент)
	
	ВосстановитьИсходнуюВидимостьНастроек();
	ВыполнитьПоискСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура СтрокаПоискаНастроекОчистка(Элемент, СтандартнаяОбработка)
	
	ВосстановитьИсходнуюВидимостьНастроек();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьФормуРеглЗаданияСозданияТехПЛ(Команда)
	
	Если Не уатМодификацияКонфигурацииВызовСервера_проф.ПолучитьЗначениеКонстанты("уатИспользоватьТехнологическиеПутевыеЛисты") Тогда 
		ТекстНСТР = НСтр("en='Before open settings form you need to write changes.';ru='Перед открытием формы настроек необходимо записать изменения.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР,,"уатИспользоватьТехнологическиеПутевыеЛисты");
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("ОбщаяФорма.уатНастройкиРеглЗаданияСозданиеТехПЛ",,,,,,, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуПрогнозированияОпозданийТС(Команда)
	
	Если Не уатМодификацияКонфигурацииВызовСервера_проф.ПолучитьЗначениеКонстанты("уатПрогнозированиеОпозданийПоМаршрутнымЛистам") Тогда 
		ТекстНСТР = НСтр("en='Before open settings form you need to write changes.';ru='Перед открытием формы настроек необходимо записать изменения.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР,,"уатПрогнозированиеОпозданийПоМаршрутнымЛистам");
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("ОбщаяФорма.уатНастройкиПрогнозированияОпозданий",,,,,,, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроекИнтеграцииСБиржами(Команда)
	
	Если Не уатМодификацияКонфигурацииВызовСервера_проф.ПолучитьЗначениеКонстанты("уатИспользоватьИнтеграциюАТИ_уэ") Тогда 
		ТекстНСТР = НСтр("en='Before open settings form you need to write changes.';ru='Перед открытием формы настроек необходимо записать изменения.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР,,"уатИспользоватьИнтеграциюАТИ_уэ");
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Обработка.уатПанельНастроекВнешнихСистем.Форма.НастройкиОбменаБирж",,,,,,, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроекИнтеграцииСMultiGo(Команда)
	
	Если Не уатМодификацияКонфигурацииВызовСервера_проф.ПолучитьЗначениеКонстанты("уатИспользоватьСервисMultiGo") Тогда 
		ТекстНСТР = НСтр("en='Before open settings form you need to write changes.';ru='Перед открытием формы настроек необходимо записать изменения.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР,,"уатИспользоватьСервисMultiGo");
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Обработка.уатПанельНастроекВнешнихСистем.Форма.НастройкиMultiGo",,,,,,, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроекУведомленийИКонтактнойИнформации(Команда)
	
	Если Не уатМодификацияКонфигурацииВызовСервера_проф.ПолучитьЗначениеКонстанты("уатИспользоватьУведомления_уэ") Тогда 
		ТекстНСТР = НСтр("en='Before open settings form you need to write changes.';ru='Перед открытием формы настроек необходимо записать изменения.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР,,"уатИспользоватьУведомления_уэ");
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("ОбщаяФорма.уатНастройкиИспользованияУведомлений",,,,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроекОбменаПЦ(Команда)
	
	Если Не уатМодификацияКонфигурацииВызовСервера_проф.ПолучитьЗначениеКонстанты("уатИспользоватьАвтоматическуюЗагрузкуОтчетовПЦ") Тогда 
		ТекстНСТР = НСтр("en='Before open settings form you need to write changes.';ru='Перед открытием формы настроек необходимо записать изменения.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР,,"уатИспользоватьАвтоматическуюЗагрузкуОтчетовПЦ");
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Обработка.уатПанельНастроекВнешнихСистем.Форма.НастройкиОбменаПЦ",,,,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройкиОбменаШтрафовНет(Команда)
	
	Если Не уатМодификацияКонфигурацииВызовСервера_проф.ПолучитьЗначениеКонстанты("уатИспользоватьСервисШтрафовНет") Тогда 
		ТекстНСТР = НСтр("en='Before open settings form you need to write changes.';ru='Перед открытием формы настроек необходимо записать изменения.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР,,"уатИспользоватьСервисШтрафовНет");
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Обработка.уатПанельНастроекВнешнихСистем.Форма.НастройкиОбменаШтрафовНЕТ",,,,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройкиУчетаДоходовРасходов(Команда)
	
	Если Не уатМодификацияКонфигурацииВызовСервера_проф.ПолучитьЗначениеКонстанты("уатИспользоватьУчетДоходовИРасходов") Тогда 
		ТекстНСТР = НСтр("en='Before open settings form you need to write changes.';ru='Перед открытием формы настроек необходимо записать изменения.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР,,"уатИспользоватьУчетДоходовИРасходов");
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Обработка.уатНастройкаУчетаДоходовРасходов.Форма.Форма",,,,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроекСистемВзиманияПлаты(Команда)
	
	Если Не уатМодификацияКонфигурацииВызовСервера_проф.ПолучитьЗначениеКонстанты("уатИспользоватьЗагрузкуОтчетовПлатныхДорог") Тогда 
		ТекстНСТР = НСтр("en='Before open settings form you need to write changes.';ru='Перед открытием формы настроек необходимо записать изменения.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР,,"уатИспользоватьЗагрузкуОтчетовПлатныхДорог");
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("ОбщаяФорма.уатНастройкиУчетаПлатныхДорог",,,,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроекОбменаПаркоматика(Команда)
	
	Если Не уатМодификацияКонфигурацииВызовСервера_проф.ПолучитьЗначениеКонстанты("уатИспользоватьИнтеграциюПаркоматика") Тогда 
		ТекстНСТР = НСтр("en='Before open settings form you need to write changes.';ru='Перед открытием формы настроек необходимо записать изменения.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР,,"уатИспользоватьИнтеграциюПаркоматика");
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Обработка.уатПанельНастроекВнешнихСистем.Форма.НастройкиОбменаПаркоматика",,,,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроекМониторинга(Команда)
	
	Если Не уатМодификацияКонфигурацииВызовСервера_проф.ПолучитьЗначениеКонстанты("уатИспользоватьМониторинг") Тогда 
		ТекстНСТР = НСтр("en='Before open settings form you need to write changes.';ru='Перед открытием формы настроек необходимо записать изменения.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР,,"уатИспользоватьМониторинг");
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Обработка.уатПанельНастроекВнешнихСистем.Форма.НастройкиМониторинга",,,,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроекМПВодителя(Команда)
	
	Если Не уатМодификацияКонфигурацииВызовСервера_проф.ПолучитьЗначениеКонстанты("уатИспользоватьМобильноеПриложениеВодителя") Тогда 
		ТекстНСТР = НСтр("en='Before open settings form you need to write changes.';ru='Перед открытием формы настроек необходимо записать изменения.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР,,"уатИспользоватьМобильноеПриложениеВодителя");
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("ОбщаяФорма.уатНастройкиМПВодителя",,,,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроекЭлектронныхКарт(Команда)
	
	Если Не уатМодификацияКонфигурацииВызовСервера_проф.ПолучитьЗначениеКонстанты("уатИспользоватьЭлектронныеКарты") Тогда 
		ТекстНСТР = НСтр("en='Before open settings form you need to write changes.';ru='Перед открытием формы настроек необходимо записать изменения.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР,,"уатИспользоватьЭлектронныеКарты");
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("ОбщаяФорма.уатНастройкиЭлектронныхКарт",,,,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиИнтеграцииWMS(Команда)
	
	Если Не уатМодификацияКонфигурацииВызовСервера_проф.ПолучитьЗначениеКонстанты("уатИспользоватьИнтеграциюWMS_уэ") Тогда 
		ТекстНСТР = НСтр("en='Before open settings form you need to write changes.';ru='Перед открытием формы настроек необходимо записать изменения.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР,,"уатИспользоватьИнтеграциюWMS_уэ");
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("ОбщаяФорма.уатНастройкиИнтеграцииWMS_уэ",,,,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиЭПД(Команда)
	
	ОткрытьФорму(
		"Обработка.ПанельАдминистрированияБЭД.Форма.ОбщиеНастройки",
		Новый Структура,
		ЭтотОбъект,
		"Обработка.ПанельАдминистрированияБЭД.Форма.ОбщиеНастройки");
КонецПроцедуры
	
&НаКлиенте
Процедура ОткрытьФормуНастроекЖурналовТранспортныхДокументов(Команда)
	Если Не уатМодификацияКонфигурацииВызовСервера_проф.ПолучитьЗначениеКонстанты("уатИспользоватьЖурналыТранспортныхДокументов") Тогда 
		ТекстНСТР = НСтр("en='Before open settings form you need to write changes.';ru='Перед открытием формы настроек необходимо записать изменения.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР,,"уатИспользоватьЖурналыТранспортныхДокументов");
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("ОбщаяФорма.уатНастройкиЖурналовТранспортныхДокументов",,,,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроекШаблонаШтрихкода(Команда)
	Если Не уатМодификацияКонфигурацииВызовСервера_проф.ПолучитьЗначениеКонстанты("уатИспользоватьШаблонШтрихкода_уэ") Тогда 
		ТекстНСТР = НСтр("en='Before open settings form you need to write changes.';ru='Перед открытием формы настроек необходимо записать изменения.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР,,"уатИспользоватьШаблонШтрихкода_уэ");
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("ОбщаяФорма.уатНастройкиШаблонаШтрихкода_уэ",,,,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьВариантПоставки(Команда)
	
	Оповещение = Новый ОписаниеОповещения("Подключаемый_ИзменитьВариантПоставкиЗавершение", ЭтотОбъект);
	ТекстВопроса = НСтр("en='After change the delivery option the settings form will be closed. Continue?';ru='После изменения варианта поставки форма настроек будет закрыта. Продолжить?'");
	ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ИзменитьВариантПоставкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
	
		НовыйВариантПоставки = уатЗащищенныеФункцииСервер.ИзменитьВариантПоставкиНаСервере();
		
		ОбновитьИнтерфейс();
		СтандартныеПодсистемыКлиент.УстановитьРасширенныйЗаголовокПриложения();
		
		ЭтотОбъект.Закрыть();
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастроекСогласований(Команда)
	Если Не уатМодификацияКонфигурацииВызовСервера_проф.ПолучитьЗначениеКонстанты("уатИспользоватьСогласованиеДокументов") Тогда 
		ТекстНСТР = НСтр("en='Before open settings form you need to write changes.';ru='Перед открытием формы настроек необходимо записать изменения.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР,,"уатИспользоватьСогласованиеДокументов");
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("ОбщаяФорма.уатНастройкиСогласований",,,,,,,РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьТокенПроверкиСервиса(Команда)
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю("Вставить в Свойства базы / Дополнительные параметры запуска:");
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон("/C ""ТокенПроверкиСервиса=%1""", уатЗащищенныеФункцииСервер.ПолучитьХешТокенаПроверкиСервиса()));
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область ДеревоРезделов

&НаСервереБезКонтекста
Функция ДеревоРазделов()
	
	ТипСтрока = Новый ОписаниеТипов("Строка");
	ТипБулево = Новый ОписаниеТипов("Булево");
	
	ДеревоРазделов = Новый ДеревоЗначений;
	ДеревоРазделов.Колонки.Добавить("Имя", ТипСтрока);
	ДеревоРазделов.Колонки.Добавить("Представление", ТипСтрока);
	ДеревоРазделов.Колонки.Добавить("Видимость", ТипБулево);
	ДеревоРазделов.Колонки.Добавить("ЭтоГруппа", ТипБулево);
	
	Раздел = ДеревоРазделов.Строки.Добавить();
	Раздел.Имя = "СтраницаПараметрыУчета";
	Раздел.Представление = НСтр("ru='Параметры учета'");
			
	Раздел = ДеревоРазделов.Строки.Добавить();
	Раздел.Имя = "СтраницаЛогистика";
	Раздел.Представление = НСтр("ru = 'Логистика'; en = 'Logistics'");
	
	Если уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП() Тогда
		
		Раздел = ДеревоРазделов.Строки.Добавить();
		Раздел.Имя = "СтраницаМаршрутизация";
		Раздел.Представление = НСтр("ru = 'Маршрутизация'; en = 'Routing'");
		
	КонецЕсли;

	Раздел = ДеревоРазделов.Строки.Добавить();
	Раздел.Имя = "СтраницаCRM";
	Раздел.Представление = НСтр("ru='CRM'");
			
	Раздел = ДеревоРазделов.Строки.Добавить();
	Раздел.Имя = "СтраницаТранспорт";
	Раздел.Представление = НСтр("ru = 'Транспорт'; en = 'Transport'");
	
	Раздел = ДеревоРазделов.Строки.Добавить();
	Раздел.Имя = "СтраницаГСМ";
	Раздел.Представление = НСтр("ru = 'ГСМ'; en = 'Fuels'");
	
	Раздел = ДеревоРазделов.Строки.Добавить();
	Раздел.Имя = "СтраницаБилетыИВыручка";
	Раздел.Представление = НСтр("ru = 'Билеты и выручка'; en = 'Tickets and revenue'");
	
	Раздел = ДеревоРазделов.Строки.Добавить();
	Раздел.Имя = "СтраницаРемонтыИАгрегаты";
	Раздел.Представление = НСтр("ru = 'Ремонты и агрегаты'; en = 'Repairs and car parts'");
	
	Раздел = ДеревоРазделов.Строки.Добавить();
	Раздел.Имя = "СтраницаСклад";
	Раздел.Представление = НСтр("ru = 'Склад'; en = 'Warehouse'");
	
	Раздел = ДеревоРазделов.Строки.Добавить();
	Раздел.Имя = "СтраницаДенежныеСредства";
	Раздел.Представление = НСтр("ru='Денежные средства'");
	
	Раздел = ДеревоРазделов.Строки.Добавить();
	Раздел.Имя = "СтраницаДоходыИРасходы";
	Раздел.Представление = НСтр("ru = 'Доходы и расходы'; en = 'Incomes and expenses'");
	
	Раздел = ДеревоРазделов.Строки.Добавить();
	Раздел.Имя = "СтраницаМониторинг";
	Раздел.Представление = НСтр("ru = 'Мониторинг'; en = 'Monitoring'");
	
	Раздел = ДеревоРазделов.Строки.Добавить();
	Раздел.Имя = "СтраницаМобильноеПриложение";
	Раздел.Представление = НСтр("ru = 'Мобильное приложение'; en = 'Mobile app'");
	
	Раздел = ДеревоРазделов.Строки.Добавить();
	Раздел.Имя = "СтраницаЭлектронныеКарты";
	Раздел.Представление = НСтр("ru = 'Электронные карты'; en = 'Electronic maps'");
	
	Раздел = ДеревоРазделов.Строки.Добавить();
	Раздел.Имя = "СтраницаСогласованиеДокументов";
	Раздел.Представление = НСтр("ru = 'Согласование документов'; en = 'Approval of documents'");
	
	Раздел = ДеревоРазделов.Строки.Добавить();
	Раздел.Имя = "СтраницаПодключаемоеОборудованиеИШтрихкодирование";
	Раздел.Представление = НСтр("ru='Подключаемое оборудование и штрихкодирование'");
	
	Раздел = ДеревоРазделов.Строки.Добавить();
	Раздел.Имя = "СтраницаТерминалПриемаИВыдачиПЛ";
	Раздел.Представление = НСтр("ru='Терминал приема и выдачи путевых листов'");
	
	Раздел = ДеревоРазделов.Строки.Добавить();
	Раздел.Имя = "СтраницаБюджетирование";
	Раздел.Представление = НСтр("ru = 'Бюджетирование'; en = 'Budgeting'");
	
	Если уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП() Тогда
		
		Раздел = ДеревоРазделов.Строки.Добавить();
		Раздел.Имя = "СтраницаОбменДанными";
		Раздел.Представление = НСтр("ru='Обмен данными с 1C:WMS'");
		
	КонецЕсли;
				
	ЗаполнитьПредставлениеРазделов(ДеревоРазделов.Строки);
	
	Возврат ДеревоРазделов;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ЗаполнитьПредставлениеРазделов(Разделы)
	
	Для Каждого Раздел Из Разделы Цикл
		
		Если Раздел.Строки.Количество() <> 0 Тогда
			ЗаполнитьПредставлениеРазделов(Раздел.Строки);
		КонецЕсли;
		
		Раздел.Видимость = Истина;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоРазделов()
	
	ЗначениеВРеквизитФормы(ДеревоРазделов(), "ДеревоРазделов");
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКСтраницеНастроек(СтраницаНастроек)
	
	Элементы.СтраницыНастроек.ТекущаяСтраница = Элементы[СтраницаНастроек];
	
	ИдентификаторСтроки = 0;
	ОбщегоНазначенияКлиентСервер.ПолучитьИдентификаторСтрокиДереваПоЗначениюПоля(
		"Имя",
		ИдентификаторСтроки,
		ДеревоРазделов.ПолучитьЭлементы(),
		СтраницаНастроек,
		Ложь);
	Элементы.ДеревоРазделов.ТекущаяСтрока = ИдентификаторСтроки;
	
КонецПроцедуры

#КонецОбласти

#Область Поиск

&НаСервере
Функция ПолучитьЗаголовкиПодчиненныхЭлементовГруппыРекурсивно(Элемент)
	
	Результат = Новый Соответствие;
	
	Если ТипЗнч(Элемент) = Тип("ГруппаФормы") ИЛИ ТипЗнч(Элемент) = Тип("СтраницаФормы") Тогда
		Для Каждого ЭлементГруппы Из Элемент.ПодчиненныеЭлементы Цикл
			ОбщегоНазначенияКлиентСервер.ДополнитьСоответствие(Результат, ПолучитьЗаголовкиПодчиненныхЭлементовГруппыРекурсивно(ЭлементГруппы));
		КонецЦикла;
	Иначе
		ЗаголовокЭлемента = ЗаголовокЭлемента(Элемент);
		Если ЗначениеЗаполнено(ЗаголовокЭлемента) Тогда
			Результат.Вставить(Элемент.Имя, ЗаголовокЭлемента);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ЗаголовокЭлемента(Элемент)
	
	Если ЗначениеЗаполнено(Элемент.Заголовок) Тогда
		Возврат Элемент.Заголовок;
	КонецЕсли;
	
	Если ОбщегоНазначенияКлиентСервер.ЕстьРеквизитИлиСвойствоОбъекта(Элемент, "ИмяКоманды") И ЗначениеЗаполнено(Элемент.ИмяКоманды) Тогда
		Возврат Команды[Элемент.ИмяКоманды].Заголовок;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТаблицуПоиска()
	
	СтраницыНастроекИсключения = Новый Массив;
	СтраницыНастроекИсключения.Добавить("СтраницаНеНайдено");
	
	Если уатОбщегоНазначенияПовтИсп.ВариантПоставкиПРОФ() Тогда
		СтраницыНастроекИсключения.Добавить("СтраницаМаршрутизация");
		СтраницыНастроекИсключения.Добавить("СтраницаОбменДанными");
	КонецЕсли;
	
	Для Каждого СтраницаНастроек Из Элементы.СтраницыНастроек.ПодчиненныеЭлементы Цикл
		Если СтраницыНастроекИсключения.Найти(СтраницаНастроек.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого Элемент Из СтраницаНастроек.ПодчиненныеЭлементы Цикл
			ЗаголовкиЭлементов = ПолучитьЗаголовкиПодчиненныхЭлементовГруппыРекурсивно(Элемент);
			Для Каждого КлючЗначение Из ЗаголовкиЭлементов Цикл
				ДобавитьСтрокиПоискаВСловарь(КлючЗначение.Ключ, КлючЗначение.Значение);
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	Если уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП() Тогда
		ДополнитьСловарьПоискаСтраницаОбменДанными();
		ДополнитьСловарьПоискаСтраницаМаршрутизация();
	КонецЕсли;
	
	ДополнитьСловарьПоискаСтраницаCRM();
	ДополнитьСловарьПоискаСтраницаПодключаемоеОборудование();
	ДополнитьСловарьПоискаСтраницаТранспорт();
	ДополнитьСловарьПоискаСтраницаПараметрыУчета();
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСтрокиПоискаВСловарь(Элемент, СтрокаПоиска1,
		СтрокаПоиска2 = "", СтрокаПоиска3 = "", СтрокаПоиска4 = "", СтрокаПоиска5 = "", СтрокаПоиска6 = "")
	
	Если ТипЗнч(СтрокаПоиска1) = Тип("Массив") Тогда
		СтрокиПоиска = СтрокаПоиска1;
	Иначе
		СтрокиПоиска = Новый Массив;
		СтрокиПоиска.Добавить(СтрокаПоиска1);
		Если ЗначениеЗаполнено(СтрокаПоиска2) Тогда
			СтрокиПоиска.Добавить(СтрокаПоиска2);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаПоиска3) Тогда
			СтрокиПоиска.Добавить(СтрокаПоиска3);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаПоиска4) Тогда
			СтрокиПоиска.Добавить(СтрокаПоиска4);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаПоиска5) Тогда
			СтрокиПоиска.Добавить(СтрокаПоиска5);
		КонецЕсли;
		Если ЗначениеЗаполнено(СтрокаПоиска6) Тогда
			СтрокиПоиска.Добавить(СтрокаПоиска6);
		КонецЕсли;
	КонецЕсли;
	
	Если ТипЗнч(Элемент) = Тип("Строка") Тогда
		ИмяЭлемента = Элемент;
	Иначе
		ИмяЭлемента = Элемент.Имя;
	КонецЕсли;
	
	Для Каждого СтрокаПоиска Из СтрокиПоиска Цикл
		ПриведеннаяСтрокаПоиска = НРег(СтрокаПоиска);
		ОтборСтрокаПоиска = Новый Структура;
		ОтборСтрокаПоиска.Вставить("ИмяЭлемента", ИмяЭлемента);
		ОтборСтрокаПоиска.Вставить("СтрокаПоиска", ПриведеннаяСтрокаПоиска);
		
		Строки = СловарьПоиска.НайтиСтроки(ОтборСтрокаПоиска);
		Если Строки.Количество() <> 0 Тогда
			Продолжить;
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СловарьПоиска.Добавить(), ОтборСтрокаПоиска);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьПоискСервер()
	
	Если НЕ ЗначениеЗаполнено(ВведеннаяСтрокаПоиска) Тогда
		Возврат;
	КонецЕсли;
	
	Результат = Новый Соответствие;
	
	Для Каждого СтрокаСловаря Из СловарьПоиска Цикл
		ПроцентСхожести = ПроцентСхожестиСтрок(
			ПолучитьНГраммыСтроки(ВведеннаяСтрокаПоиска),
			ПолучитьНГраммыСтроки(СтрокаСловаря.СтрокаПоиска));
		
		СловоПохожее = ПроцентСхожести >= УдовлетворительныйПроцентСхожестиНГрамм();
		
		Если СловоПохожее Тогда
			Результат.Вставить(СтрокаСловаря.ИмяЭлемента);
		КонецЕсли;
	КонецЦикла;
	
	РазделыДерева = ДеревоРазделов.ПолучитьЭлементы();
	
	СкрытьВсеЭлементыСтраницНастроек();
	ПоказатьНайденныеПоискомЭлементы(Результат);
	УстановитьВидимостьРазделовРекурсивно(РазделыДерева);
	
	ВидимыеРазделы = Новый Массив();
	
	Для Каждого Раздел Из РазделыДерева Цикл
		
		Если Раздел.Видимость Тогда
			ВидимыеРазделы.Добавить(Раздел)
		КонецЕсли;
		
	КонецЦикла;
	
	Если ВидимыеРазделы.Количество() <> 0 Тогда
		Элементы.ДеревоРазделов.ТекущаяСтрока = ВидимыеРазделы[0].Представление;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЭтоСтраницаГруппа(Страница)
	
	ЭлементыДерева = ДеревоРазделов.ПолучитьЭлементы();
	Для Каждого ЭлементДерева Из ЭлементыДерева Цикл
		Если ЭлементДерева.Имя = Страница.Имя Тогда
			Возврат ЭлементДерева.ЭтоГруппа;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура УстановитьВидимостьРазделовРекурсивно(ЭлементыДерева)
	
	Для Каждого СтрокаДерева Из ЭлементыДерева Цикл
		
		ПодчиненныеСтроки = СтрокаДерева.ПолучитьЭлементы();
		Если ПодчиненныеСтроки.Количество() > 0 Тогда
			УстановитьВидимостьРазделовРекурсивно(ПодчиненныеСтроки);
			
			ЕстьПодчиненныеВидимыеРазделы = Ложь;
			Для Каждого ПодчиненныйРаздел Из ПодчиненныеСтроки Цикл
				Если ПодчиненныйРаздел.Видимость Тогда
					ЕстьПодчиненныеВидимыеРазделы = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			СтрокаДерева.Видимость = ЕстьПодчиненныеВидимыеРазделы;
		Иначе
			СтраницаФормы = Элементы.Найти(СтрокаДерева.Имя);
			Если СтраницаФормы = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			
			СтрокаДерева.Видимость = ЕстьВидимыеЭлементыВнутриЭлемента(СтраницаФормы);
		КонецЕсли;
		
		//Если СтрокаДерева.Видимость Тогда
		//	Элементы.ДеревоРазделов.ТекущаяСтрока = СтрокаДерева;
		//КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ЕстьВидимыеЭлементыВнутриЭлемента(ПроверяемыйЭлементФормы)
	
	ЭтоГруппа = ТипЗнч(ПроверяемыйЭлементФормы) = Тип("ГруппаФормы");
	
	Если ЭтоГруппа И НЕ ПроверяемыйЭлементФормы.Видимость Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ЭтоГруппа Тогда
		Возврат ПроверяемыйЭлементФормы.Видимость;
	КонецЕсли;
	
	Для Каждого ЭлементФормы Из ПроверяемыйЭлементФормы.ПодчиненныеЭлементы Цикл
		ЕстьВидимыеЭлементыВнутриЭлемента = ЕстьВидимыеЭлементыВнутриЭлемента(ЭлементФормы);
		Если ЕстьВидимыеЭлементыВнутриЭлемента Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Ложь;
	
КонецФункции

&НаСервере
Процедура СкрытьВсеЭлементыСтраницНастроек()
	
	Для Каждого СтраницаНастроек Из Элементы.СтраницыНастроек.ПодчиненныеЭлементы Цикл
		
		Если ЭтоСтраницаГруппа(СтраницаНастроек) Тогда
			Продолжить;
		КонецЕсли;
		
		СкрытьВсеЭлементыСтраницыНастроек(СтраницаНастроек);
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура СкрытьВсеЭлементыСтраницыНастроек(СтраницаНастроек)
	
	Для Каждого Элемент Из СтраницаНастроек.ПодчиненныеЭлементы Цикл
		
		НоваяСтрока = КэшЭлементовНастроек.Добавить();
		НоваяСтрока.ИмяЭлемента = Элемент.Имя;
		НоваяСтрока.Видимость = Элемент.Видимость;
		
		Элемент.Видимость = Ложь;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьИсходнуюВидимостьНастроек()
	
	Для Каждого ДанныеЭлемента Из КэшЭлементовНастроек Цикл
		Элементы[ДанныеЭлемента.ИмяЭлемента].Видимость = ДанныеЭлемента.Видимость;
	КонецЦикла;
	
	УстановитьВидимостьРазделовРекурсивно(ДеревоРазделов.ПолучитьЭлементы());
	
	КэшЭлементовНастроек.Очистить();
	
КонецПроцедуры

&НаСервере
Процедура ЗапомнитьВидимостьЭлементовРекурсивно(ВыбранныеЭлементы)
	
	Для Каждого Элемент Из ВыбранныеЭлементы Цикл
		
		Если Элемент.ПодчиненныеЭлементы.Количество() <> 0 Тогда
			ЗапомнитьВидимостьЭлементовРекурсивно(Элемент.ПодчиненныеЭлементы);
		КонецЕсли;
		
		НоваяСтрока = КэшЭлементовНастроек.Добавить();
		НоваяСтрока.ИмяЭлемента = Элемент.Имя;
		НоваяСтрока.Видимость = Элемент.Видимость;
		
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПоказатьНайденныеПоискомЭлементы(Результат)
	
	СтраницыСНастройками = Новый Массив;
	
	Для Каждого КлючЗначение Из Результат Цикл
		
		ИмяЭлемента = КлючЗначение.Ключ;
		Элемент = Элементы[ИмяЭлемента];
		
		РодительДляОтображения = ВерхнийЭлементРодительНастройки(Элемент);
		ДанныеЭлементов = КэшЭлементовНастроек.НайтиСтроки(Новый Структура("ИмяЭлемента", РодительДляОтображения.Имя));
		
		Если ДанныеЭлементов.Количество() <> 0
			И ДанныеЭлементов[0].Видимость Тогда
			
			РодительДляОтображения.Видимость = Истина;
			СтраницаРодитель = РодительДляОтображения.Родитель;
			
			Если СтраницыСНастройками.Найти(СтраницаРодитель.Имя) = Неопределено Тогда
				СтраницыСНастройками.Добавить(СтраницаРодитель.Имя);
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтраницыСНастройками;
	
КонецФункции

&НаСервере
Функция ВерхнийЭлементРодительНастройки(Элемент)
	
	РодительТекущегоЭлемента = Элемент.Родитель;
	
	Если РодительТекущегоЭлемента.Родитель = Элементы.СтраницыНастроек Тогда
		Возврат Элемент;
	КонецЕсли;
	
	Возврат ВерхнийЭлементРодительНастройки(РодительТекущегоЭлемента);
	
КонецФункции

&НаСервере
Функция СтраницаРодительЭлементаНастройки(Элемент)
	
	РодительТекущегоЭлемента = Элемент.Родитель;
	
	Если РодительТекущегоЭлемента.Родитель = Элементы.СтраницыНастроек Тогда
		Возврат РодительТекущегоЭлемента;
	КонецЕсли;
	
	Возврат СтраницаРодительЭлементаНастройки(РодительТекущегоЭлемента);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция УдовлетворительныйПроцентСхожестиНГрамм()
	
	Возврат 50;
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ДлинаНГраммы()
	
	Возврат 3;
	
КонецФункции

&НаСервере
Функция ПроцентСхожестиСтрок(МассивНГраммПоисковойСтроки, МассивНГраммСловаря)
	
	КоличествоСовпавшихНГрамм = ЭлементыВходногоМассиваПрисутствующиеВИскомом(
		МассивНГраммПоисковойСтроки,
		МассивНГраммСловаря).Количество();
	
	Возврат ПроцентОт(КоличествоСовпавшихНГрамм, МассивНГраммПоисковойСтроки.Количество());
	
КонецФункции

&НаСервереБезКонтекста
Функция ПроцентОт(Значение, ЗначениеОт)
	
	Если Значение = 0 Или ЗначениеОт = 0 Тогда
		Возврат 0
	КонецЕсли;
	
	Возврат Значение * 100 / ЗначениеОт;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЭлементыВходногоМассиваПрисутствующиеВИскомом(ВходнойМассив, ИсковыйМассив)
	
	Результат = Новый Массив;
	
	Для Каждого Значение Из ВходнойМассив Цикл
		Если ИсковыйМассив.Найти(Значение) <> Неопределено Тогда
			Результат.Добавить(Значение);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ПолучитьНГраммыСтроки(Знач ИсходнаяСтрока)
	
	НГраммыСтроки = Новый Массив;
	
	ИсходнаяСтрока = НРег(ИсходнаяСтрока);
	СловаИсходнойСтроки = СтрРазделить(ИсходнаяСтрока, " ", Ложь);
	
	Для Каждого Слово Из СловаИсходнойСтроки Цикл
		ОбщегоНазначенияКлиентСервер.ДополнитьМассив(НГраммыСтроки, НГраммыСлова(Слово));
	КонецЦикла;
	
	Возврат НГраммыСтроки;
	
КонецФункции

&НаСервере
Функция НГраммыСлова(Слово)
	
	НГраммыСлова = Новый Массив;
	
	Для Итератор = 0 По СтрДлина(Слово) - ДлинаНГраммы() Цикл
		НГрамма = "";
		Для ИтераторНГраммы = 0 По ДлинаНГраммы() - 1 Цикл
			НГрамма = НГрамма + Сред(Слово, ИтераторНГраммы + 1 + Итератор, 1);
		КонецЦикла;
		НГраммыСлова.Добавить(НГрамма);
	КонецЦикла;
	
	Возврат НГраммыСлова;
	
КонецФункции

#КонецОбласти

#Область УсловноеОформление

Процедура ДобавитьЭлементОтбораКомпоновкиДанных(ГруппаЭлементовОтбора, ПутьКДаннымПоля, Значение, ВидСравнения = Неопределено)
	
	Если ВидСравнения = Неопределено Тогда
		ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ИначеЕсли ТипЗнч(ВидСравнения)=Тип("Строка") Тогда
		ВидСравнения = ВидСравненияКомпоновкиДанных[ВидСравнения];
	КонецЕсли;
	
	Отбор = ГруппаЭлементовОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	Отбор.ВидСравнения   = ВидСравнения;
	Отбор.Использование  = Истина;
	Отбор.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных(ПутьКДаннымПоля);
	Отбор.ПравоеЗначение = Значение;
	
КонецПроцедуры

Процедура ДобавитьОформляемоеПоле(УсловноеОформление, ПутьКДаннымПоля)
	
	ОформляемоеПоле                = УсловноеОформление.Поля.Элементы.Добавить();
	ОформляемоеПоле.Поле           = Новый ПолеКомпоновкиДанных(ПутьКДаннымПоля);
	ОформляемоеПоле.Использование  = Истина;
	
КонецПроцедуры

Процедура ДобавитьЭлементУсловногоОформления(УсловноеОформление, Идентификатор, Значение)
	
	Оформление = УсловноеОформление.Оформление.Элементы.Найти(Идентификатор);
	Оформление.Значение      = Значение;
	Оформление.Использование = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	НовоеУсловноеОформление = УсловноеОформление.Элементы.Добавить();
	ДобавитьЭлементОтбораКомпоновкиДанных(НовоеУсловноеОформление.Отбор, "ДеревоРазделов.Видимость", Ложь);
	ДобавитьОформляемоеПоле(НовоеУсловноеОформление, Элементы.ДеревоРазделовПредставление.Имя);
	ДобавитьЭлементУсловногоОформления(НовоеУсловноеОформление, "Видимость", Ложь);
	
КонецПроцедуры

#КонецОбласти

#Область ДополнениеСловаряПоиска

Процедура ДополнитьСловарьПоискаСтраницаМаршрутизация()
	
	ДобавитьСтрокиПоискаВСловарь(
	"уатИспользоватьХарактеристикиЗаказовНаТС_уэ",
	НСтр("ru='перечень'"),
	НСтр("ru='перечень характеристик'"),
	НСтр("ru='характеристики'"),
	НСтр("ru='характеристики заказов'"),
	НСтр("ru=''"),
	НСтр("ru=''"));
	
	ДобавитьСтрокиПоискаВСловарь(
	"уатИспользоватьРазмещениеНаПаллетах_уэ",
	НСтр("ru='паллета'"),
	НСтр("ru='размещение'"),
	НСтр("ru='размещение на паллетах'"),
	НСтр("ru='упаковка'"),
	НСтр("ru=''"),
	НСтр("ru=''"));
	
	ДобавитьСтрокиПоискаВСловарь(
	"уатИспользоватьГруппыСовместимостиЗаказовНаТС_уэ",
	НСтр("ru='совместимость'"),
	НСтр("ru = 'группа'; en = 'group'"),
	НСтр("ru='группы совместимости'"),
	НСтр("ru=''"),
	НСтр("ru=''"),
	НСтр("ru=''"));
	
	ДобавитьСтрокиПоискаВСловарь(
	"уатИспользоватьКластеризацию_уэ",
	НСтр("ru='кластер'"),
	НСтр("ru='кластеризация'"),
	НСтр("ru='объединение'"),
	НСтр("ru='объединение пунктов'"),
	НСтр("ru=''"),
	НСтр("ru=''"));
	
	ДобавитьСтрокиПоискаВСловарь(
	"уатОбновлениеРасстоянийВФоновомРежиме_уэ",
	НСтр("ru='обновление'"),
	НСтр("ru = 'время'; en = 'time'"),
	НСтр("ru = 'расстояние'; en = 'distance'"),
	НСтр("ru='фоновый режим'"),
	НСтр("ru=''"),
	НСтр("ru=''"));
	
	ДобавитьСтрокиПоискаВСловарь(
	"уатИспользоватьРазмещениеВСекциях_уэ",
	НСтр("ru='секция'"),
	НСтр("ru='размещение'"),
	НСтр("ru='размещение в секциях'"),
	НСтр("ru='фоновый режим'"),
	НСтр("ru='совокупность секций'"),
	НСтр("ru=''"));
	
	ДобавитьСтрокиПоискаВСловарь(
	"уатИспользоватьРасчетТары_уэ",
	НСтр("ru='тара'"),
	НСтр("ru='расчет тары'"),
	НСтр("ru=''"),
	НСтр("ru=''"),
	НСтр("ru=''"),
	НСтр("ru=''"));
	
	ДобавитьСтрокиПоискаВСловарь(
	"уатИспользоватьАвтоматическуюМаршрутизацию_уэ",
	НСтр("ru='маршрут'"),
	НСтр("ru='автоматически'"),
	НСтр("ru='автоматическая маршрутизация'"),
	НСтр("ru=''"),
	НСтр("ru=''"),
	НСтр("ru=''")); 
	
	ДобавитьСтрокиПоискаВСловарь(
	"уатОсновнойШаблонМаршрутизации",
	НСтр("ru='шаблон'"),
	НСтр("ru='основной шаблон'"),
	НСтр("ru='маршрутизация'"),
	НСтр("ru=''"),
	НСтр("ru=''"),
	НСтр("ru=''"));
	
КонецПроцедуры

Процедура ДополнитьСловарьПоискаСтраницаCRM()
	
	Если уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП() Тогда
		
		ДобавитьСтрокиПоискаВСловарь(
		"уатИспользоватьРассылкуЭлектронныхПисем_уэ",
		НСтр("ru='письмо'"),
		НСтр("ru='электронное письмо'"),
		НСтр("ru='рассылка'"),
		НСтр("ru=''"),
		НСтр("ru=''"),
		НСтр("ru=''"));
		
	КонецЕсли;
	
	ДобавитьСтрокиПоискаВСловарь(
	"уатИспользоватьСофтФон",
	НСтр("ru='СофтФон'"),
	НСтр("ru='использовать СофтФон'"),
	НСтр("ru=''"),
	НСтр("ru=''"),
	НСтр("ru=''"),
	НСтр("ru=''"));
	
КонецПроцедуры

Процедура ДополнитьСловарьПоискаСтраницаПодключаемоеОборудование()
	
	ДобавитьСтрокиПоискаВСловарь(
	"уатТипШтрихкодаДляПечати_уэ",
	НСтр("ru='тип'"),
	НСтр("ru='печать'"),
	НСтр("ru='штрихкод'"),
	НСтр("ru = 'код'; en = 'code'"),
	НСтр("ru=''"),
	НСтр("ru=''"));
	
КонецПроцедуры

Процедура ДополнитьСловарьПоискаСтраницаОбменДанными()
	
	ДобавитьСтрокиПоискаВСловарь(
	"уатИспользоватьИнтеграциюWMS_уэ",
	НСтр("ru='обмен'"),
	НСтр("ru='WMS'"),
	НСтр("ru='интеграция'"),
	НСтр("ru='данные'"),
	НСтр("ru='обмен данными'"),
	НСтр("ru=''"));
	
КонецПроцедуры

Процедура ДополнитьСловарьПоискаСтраницаТранспорт()
	
	ДобавитьСтрокиПоискаВСловарь(
	"уатУчетЗаказовНаТСвПутевыхЛистах",
	НСтр("ru='транспорт'"),
	НСтр("ru = 'заказ'; en = 'заказ'"),
	НСтр("ru='распределение расходов'"),
	НСтр("ru=''"),
	НСтр("ru=''"),
	НСтр("ru=''"));
	
	ДобавитьСтрокиПоискаВСловарь(
	"уатЗакрытиеЗаказовНаТСПутевымиЛистами",
	НСтр("ru='транспорт'"),
	НСтр("ru='статус'"),
	НСтр("ru='статус груза'"),
	НСтр("ru=''"),
	НСтр("ru=''"),
	НСтр("ru=''"));
	
	ДобавитьСтрокиПоискаВСловарь(
	"уатИспользоватьТехнологическиеПутевыеЛисты",
	НСтр("ru='транспорт'"),
	НСтр("ru=''"),
	НСтр("ru=''"),
	НСтр("ru=''"),
	НСтр("ru=''"),
	НСтр("ru=''"));
	
КонецПроцедуры

Процедура ДополнитьСловарьПоискаСтраницаПараметрыУчета()
	
	ДобавитьСтрокиПоискаВСловарь(
	"ВалютаРегламентированногоУчета",
	НСтр("ru='параметр'"),
	НСтр("ru = 'учет'; en = 'accounting'"),
	НСтр("ru='параметр учета'"),
	НСтр("ru='бухгалтерия'"),
	НСтр("ru = 'валюта'; en = 'currency'"),
	НСтр("ru=''"));
	
	ДобавитьСтрокиПоискаВСловарь(
	"ВалютаУправленческогоУчета",
	НСтр("ru='параметр'"),
	НСтр("ru = 'учет'; en = 'accounting'"),
	НСтр("ru='параметр учета'"),
	НСтр("ru='бухгалтерия'"),
	НСтр("ru = 'валюта'; en = 'currency'"),
	НСтр("ru=''"));
	
	ДобавитьСтрокиПоискаВСловарь(
	"уатМноговалютныйУчет",
	НСтр("ru='параметр'"),
	НСтр("ru = 'учет'; en = 'accounting'"),
	НСтр("ru='параметр учета'"),
	НСтр("ru='бухгалтерия'"),
	НСтр("ru = 'валюта'; en = 'currency'"),
	НСтр("ru=''"));
	
	ДобавитьСтрокиПоискаВСловарь(
	"уатЕдиницаИзмеренияВеса",
	НСтр("ru='параметр'"),
	НСтр("ru = 'учет'; en = 'accounting'"),
	НСтр("ru='параметр учета'"),
	НСтр("ru='вес'"),
	НСтр("ru=''"),
	НСтр("ru=''"));
	
	ДобавитьСтрокиПоискаВСловарь(
	"уатЕдиницаИзмеренияОбъема",
	НСтр("ru='параметр'"),
	НСтр("ru = 'учет'; en = 'accounting'"),
	НСтр("ru='параметр учета'"),
	НСтр("ru='вес'"),
	НСтр("ru=''"),
	НСтр("ru=''"));
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура УстановитьВидимостьДоступность()
	
	ПроверкаДоступностиВалютыУчета();
	
	Элементы.ГруппаМноговалютныйУчетПодсказка.Доступность 					  = НаборКонстант.уатМноговалютныйУчет;
	Элементы.уатЗакрытиеЗаказовНаТСПутевымиЛистами.Доступность 				  = НаборКонстант.уатУчетЗаказовНаТСвПутевыхЛистах; 
	Элементы.уатИспользоватьСтандартныеМеханизмыЗаполненияБЭД.Доступность 	  = Константы.ИспользоватьОбменЭД.Получить();
	
	Элементы.ОткрытьФормуСозданияТехнологическогоПЛ.Доступность 			  = НаборКонстант.уатИспользоватьТехнологическиеПутевыеЛисты;
	Элементы.ОткрытьФормуПрогнозированияОпозданийТС.Доступность 		      = НаборКонстант.уатПрогнозированиеОпозданийПоМаршрутнымЛистам;
	Элементы.уатИспользоватьИнтеграциюАТИ_уэ.Доступность 					  = НаборКонстант.уатИспользоватьТендеры_уэ;
	Элементы.ОткрытьФормуНастроекИнтеграцииСБиржами.Доступность 			  = НаборКонстант.уатИспользоватьИнтеграциюАТИ_уэ;
	Элементы.ОткрытьФормуНастроекУведомленийИКонтактнойИнформации.Доступность = НаборКонстант.уатИспользоватьУведомления_уэ;
	Элементы.ГруппаНастройкиМаршрутизации.Доступность 			   			  = НаборКонстант.уатИспользоватьАвтоматическуюМаршрутизацию_уэ;
	Элементы.уатРазделятьПланФактВСкладскихАктах_уэ.Доступность    			  = НаборКонстант.уатИспользоватьСкладскиеАкты_уэ;
	Элементы.уатИспользоватьЗакреплениеМаршрутныхЛистовЗаПеревозчиками_уэ.Доступность = НаборКонстант.уатИспользоватьПривлеченныхПеревозчиков
		И Не НаборКонстант.уатЗакрытиеЗаказовНаТСПутевымиЛистами;
	Элементы.ОткрытьФормуНастроекОбменаПЦ.Доступность 						  = НаборКонстант.уатИспользоватьАвтоматическуюЗагрузкуОтчетовПЦ;
	Элементы.ОткрытьФормуНастройкиОбменаШтрафовНет.Доступность 	  			  = НаборКонстант.уатИспользоватьСервисШтрафовНет;
	Элементы.ОткрытьФормуНастройкиУчетаДоходовРасходов.Доступность			  = НаборКонстант.уатИспользоватьУчетДоходовИРасходов;
	Элементы.ОткрытьФормуНастроекПлатныхДорог.Доступность 					  = НаборКонстант.уатИспользоватьЗагрузкуОтчетовПлатныхДорог;
	Элементы.ОткрытьФормуНастроекОбменаПаркоматика.Доступность 				  = НаборКонстант.уатИспользоватьИнтеграциюПаркоматика;
	Элементы.ОткрытьФормуНастроекМониторинга.Доступность 					  = НаборКонстант.уатИспользоватьМониторинг;
	Элементы.ОткрытьФормуНастроекМПВодителя.Доступность 					  = НаборКонстант.уатИспользоватьМобильноеПриложениеВодителя;
	Элементы.ОткрытьФормуНастроекСогласований.Доступность                     = НаборКонстант.уатИспользоватьСогласованиеДокументов;
	Элементы.ОткрытьФормуНастроекЭлектронныхКарт.Доступность 				  = НаборКонстант.уатИспользоватьЭлектронныеКарты;
	Элементы.ОткрытьФормуНастроекШаблонаШтрихкода.Доступность				  = НаборКонстант.уатИспользоватьШаблонШтрихкода_уэ;
	Элементы.ГруппаШтрихкодированиеПолеВвода.Доступность 					  = ИспользоватьШтрихкодирование_уатЗаказГрузоотправителя;
	Элементы.ГруппаШтрихкодированиеГрузов.Доступность 						  = ИспользоватьШтрихкодирование_уатЗаказГрузоотправителя;
	Элементы.ГруппаШаблонШтрихкода.Доступность								  = ИспользоватьШтрихкодирование_уатЗаказГрузоотправителя 
																					И НаборКонстант.уатТипШтрихкодаДляПечати_уэ <> Перечисления.уатТипыШтрихкодов.EAN13;
	Элементы.ГруппаДействиеПриСчитыванииПолеВвода.Доступность				  = ИспользоватьШтрихкодирование_уатЗаказГрузоотправителя;
	Элементы.ОткрытьНастройкиИнтеграцииWMS.Доступность						  = НаборКонстант.уатИспользоватьИнтеграциюWMS_уэ;
	Элементы.ИспользоватьБюджетныеПроцессы.Доступность 						  = НаборКонстант.ИспользоватьБюджетирование;
	Элементы.ГруппаРазмещениеНаПаллетах.Доступность 						  = НаборКонстант.уатИспользоватьАвтоматическуюМаршрутизацию_уэ;
	Элементы.ГруппаХарактеристикиЗаказовНаТС.Доступность 				      = НаборКонстант.уатИспользоватьАвтоматическуюМаршрутизацию_уэ;
	Элементы.ГруппаГруппыСовместимостиЗаказов.Доступность 					  = НаборКонстант.уатИспользоватьАвтоматическуюМаршрутизацию_уэ;
	Элементы.ГруппаКластеризация.Доступность 						  		  = НаборКонстант.уатИспользоватьАвтоматическуюМаршрутизацию_уэ;
	Элементы.ГруппаОбновлениеРасстоянийВФоновомРежимеКонстанта.Доступность 	  = НаборКонстант.уатИспользоватьАвтоматическуюМаршрутизацию_уэ;
	Элементы.ГруппаГруппировкаГрузов.Доступность 						 	  = НаборКонстант.уатИспользоватьАвтоматическуюМаршрутизацию_уэ;
	Элементы.ГруппаРазмещениеВСекцияхРасчетТары.Доступность 				  = НаборКонстант.уатИспользоватьАвтоматическуюМаршрутизацию_уэ;
	Элементы.ГруппаГруппыБалансировкиМаршрутов.Доступность 					  = НаборКонстант.уатИспользоватьАвтоматическуюМаршрутизацию_уэ;
	Элементы.ГруппаГруппировкаГрузовКонстанта.Доступность 					  = НаборКонстант.уатИспользоватьРасчетТары_уэ;
	Элементы.ГруппаРазмещениеНаПаллетахКонстанта.Доступность 				  = НаборКонстант.уатИспользоватьРасчетТары_уэ;
	
	Элементы.ОткрытьФормуНастроекИнтеграцииСMultiGo.Доступность 			  = НаборКонстант.уатИспользоватьСервисMultiGo;

КонецПроцедуры 

&НаСервере
Процедура УстановитьВидимостьПрофКорп()
	
	ЭтоКОРП = уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП();
	
	Элементы.ГруппаИспользоватьЛогистику.Видимость                      = Не ЭтоКОРП;
	Элементы.ГруппаСклад.Видимость                                      = ЭтоКОРП;
	Элементы.ГруппаМультимодальныеПеревозки.Видимость                   = ЭтоКОРП;
	Элементы.ГруппаFTLПеревозки.Видимость                               = ЭтоКОРП;
	Элементы.ГруппаРекламации.Видимость                                 = ЭтоКОРП;
	Элементы.ГруппаПлановыеУслуги.Видимость                             = ЭтоКОРП;
	Элементы.ГруппаСтрахование.Видимость                                = ЭтоКОРП;
	Элементы.ГруппаТендеры.Видимость                                    = ЭтоКОРП;
	Элементы.ГруппаШаблонШтрихкода.Видимость                            = ЭтоКОРП;
	Элементы.СтраницаCRM_уэ.Видимость                                   = ЭтоКОРП;
	Элементы.ГруппаДействиеПриСчитыванииПолеВвода.Видимость             = ЭтоКОРП;
	Элементы.ГруппаЗакреплениеМаршрутныхЛистовЗаПеревозчиками.Видимость = ЭтоКОРП;

	Если ЭтоКОРП Тогда
		СсылкаСервис = "https://rarus.ru/1c-transport/article-epd-uat-tle/?utm_source=1c.tle&utm_medium=banner&utm_campaign=DOR-OAA-uat-tle-release-1-1-25-to-article-epd-uat-tle-1c-app";	
	Иначе
		СсылкаСервис = "https://rarus.ru/1c-transport/article-epd-uat-tle/?utm_source=1c.uat&utm_medium=banner&utm_campaign=DOR-OAA-uat-uat-release-2-2-25-to-article-epd-uat-tle-1c-app";	
	КонецЕсли;                                      
	ФорматирСсылкаСервис = Новый ФорматированнаяСтрока("Сервис 1С-ЭПД",,,, СсылкаСервис);

	Если ЭтоКОРП Тогда
		СсылкаКПОтр = "https://rarus.ru/1c/its-otraslevoi/?utm_source=1c.tle&utm_medium=banner&utm_campaign=DOR-OAA-uat-tle-release-1-1-25-to-its-otraslevoi-1c-app";	
	Иначе
		СсылкаКПОтр = "https://rarus.ru/1c/its-otraslevoi/?utm_source=1c.uat&utm_medium=banner&utm_campaign=DOR-OAA-uat-uat-release-2-2-25-to-its-otraslevoi-1c-app";	
	КонецЕсли;   
	ФорматирСсылкаКПОтр = Новый ФорматированнаяСтрока("1С:КП Отраслевой",,,, СсылкаКПОтр);
	
	Элементы.ДекорацияЭПДПодсказка.Заголовок = Новый ФорматированнаяСтрока(ФорматирСсылкаСервис,
		" для обмена электронными перевозочными документами: электронные транспортные накладные, "
		+ "электронные путевые листы, электронные заказы (заявки), электронные заказ-наряды, "
		+ "электронные сопроводительные ведомости и электронные договоры фрахтования. "
		+ Символы.ПС + "Функция подписания ЭПЛ в форме Путевого листа и через журналы транспортных "
		+ "документов доступна при наличии активного ",
		ФорматирСсылкаКПОтр,".");
	
КонецПроцедуры

&НаСервере
Процедура ПроверитьСвязанныеЗначения()
	
	Если Не НаборКонстант.ИспользоватьБюджетирование И НаборКонстант.ИспользоватьБюджетныеПроцессы Тогда
		НаборКонстант.ИспользоватьБюджетныеПроцессы = Ложь;
	КонецЕсли;
	
	Если Не НаборКонстант.уатИспользоватьАвтоматическуюМаршрутизацию_уэ И НаборКонстант.уатИспользоватьРазмещениеНаПаллетах_уэ Тогда
		НаборКонстант.уатИспользоватьРазмещениеНаПаллетах_уэ = Ложь;
	КонецЕсли;
	
	Если Не НаборКонстант.уатИспользоватьАвтоматическуюМаршрутизацию_уэ И НаборКонстант.уатИспользоватьХарактеристикиЗаказовНаТС_уэ Тогда
		НаборКонстант.уатИспользоватьХарактеристикиЗаказовНаТС_уэ = Ложь;
	КонецЕсли;
	
	Если Не НаборКонстант.уатИспользоватьАвтоматическуюМаршрутизацию_уэ И НаборКонстант.уатИспользоватьГруппыСовместимостиЗаказовНаТС_уэ Тогда
		НаборКонстант.уатИспользоватьГруппыСовместимостиЗаказовНаТС_уэ = Ложь;
	КонецЕсли;
	
	Если Не НаборКонстант.уатИспользоватьАвтоматическуюМаршрутизацию_уэ И НаборКонстант.уатИспользоватьКластеризацию_уэ Тогда
		НаборКонстант.уатИспользоватьКластеризацию_уэ = Ложь;
	КонецЕсли;
	
	Если Не НаборКонстант.уатИспользоватьАвтоматическуюМаршрутизацию_уэ И НаборКонстант.уатОбновлениеРасстоянийВФоновомРежиме_уэ Тогда
		НаборКонстант.уатОбновлениеРасстоянийВФоновомРежиме_уэ = Ложь;
	КонецЕсли;
	
	Если Не НаборКонстант.уатИспользоватьАвтоматическуюМаршрутизацию_уэ И НаборКонстант.уатИспользоватьГруппировкуГрузов_уэ Тогда
		НаборКонстант.уатИспользоватьГруппировкуГрузов_уэ = Ложь;
	КонецЕсли;
	
	Если Не НаборКонстант.уатИспользоватьАвтоматическуюМаршрутизацию_уэ И НаборКонстант.уатИспользоватьГруппыБалансировкиМаршрутов_уэ Тогда
		НаборКонстант.уатИспользоватьГруппыБалансировкиМаршрутов_уэ = Ложь;
	КонецЕсли;

	Если Не НаборКонстант.уатИспользоватьАвтоматическуюМаршрутизацию_уэ И НаборКонстант.уатИспользоватьРазмещениеВСекциях_уэ Тогда
		НаборКонстант.уатИспользоватьРазмещениеВСекциях_уэ = Ложь;
	КонецЕсли;
	
	Если Не НаборКонстант.уатИспользоватьАвтоматическуюМаршрутизацию_уэ И НаборКонстант.уатИспользоватьГруппыБалансировкиМаршрутов_уэ Тогда
		НаборКонстант.уатИспользоватьГруппыБалансировкиМаршрутов_уэ = Ложь;
	КонецЕсли;
	
	Если Не ИспользоватьШтрихкодирование_уатЗаказГрузоотправителя
		И НаборКонстант.уатИспользоватьШтрихкодированиеГрузовЗаказахНаТС_уэ Тогда
		
		НаборКонстант.уатИспользоватьШтрихкодированиеГрузовЗаказахНаТС_уэ = Ложь;
	КонецЕсли;
	
	Если Не НаборКонстант.уатИспользоватьСкладскиеАкты_уэ И НаборКонстант.уатРазделятьПланФактВСкладскихАктах_уэ Тогда
		НаборКонстант.уатРазделятьПланФактВСкладскихАктах_уэ = Ложь;
	КонецЕсли;
	
	Если Не НаборКонстант.уатИспользоватьПривлеченныхПеревозчиков И НаборКонстант.уатИспользоватьЗакреплениеМаршрутныхЛистовЗаПеревозчиками_уэ Тогда
		НаборКонстант.уатИспользоватьЗакреплениеМаршрутныхЛистовЗаПеревозчиками_уэ = Ложь;
	КонецЕсли;
	
	Если Не НаборКонстант.уатИспользоватьТендеры_уэ И НаборКонстант.уатИспользоватьИнтеграциюАТИ_уэ Тогда
		НаборКонстант.уатИспользоватьИнтеграциюАТИ_уэ = Ложь;
	КонецЕсли;
	
	Если НЕ НаборКонстант.уатУчетЗаказовНаТСвПутевыхЛистах И НаборКонстант.уатЗакрытиеЗаказовНаТСПутевымиЛистами Тогда
		НаборКонстант.уатЗакрытиеЗаказовНаТСПутевымиЛистами = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ФормаНастроекПриСозданииНаСервере_проф()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Если уатОбщегоНазначенияПовтИсп.РазрешеноИзменениеПоставки() Тогда
		КомандаИзменитьВариантПоставки = ЭтаФорма.КоманднаяПанель.ПодчиненныеЭлементы.Найти("ФормаИзменениеВариантаПоставки");
		КомандаИзменитьВариантПоставки.Видимость = Истина;
	КонецЕсли;
	
	флДоступноБюджетирование = (Метаданные.Константы.Найти("ИспользоватьБюджетирование") <> Неопределено);
	Если Метаданные.Константы.Найти("уатКонфигурацияДляРФ") <> Неопределено Тогда
		КонфигурацияДляРФ = уатОбщегоНазначения.КонфигурацияДляРФ();
		флДоступноБюджетирование = КонфигурацияДляРФ И флДоступноБюджетирование;
	КонецЕсли;
	
	#Область Добавление_констант
	
	// Установка значений.
	НаборКонстант.уатИспользоватьЛогистику  				  	   = Константы.уатИспользоватьЛогистику.Получить();
	НаборКонстант.уатИспользоватьПривлеченныхПеревозчиков     	   = Константы.уатИспользоватьПривлеченныхПеревозчиков.Получить();
	НаборКонстант.уатИспользоватьДокументооборот              	   = Константы.уатИспользоватьДокументооборот.Получить();
	НаборКонстант.уатИспользоватьПлатежныйКалендарь                = Константы.уатИспользоватьПлатежныйКалендарь.Получить();
	НаборКонстант.уатИспользоватьУчетДоходовИРасходов         	   = Константы.уатИспользоватьУчетДоходовИРасходов.Получить();
	НаборКонстант.уатИспользоватьЗагрузкуОтчетовПлатныхДорог       = Константы.уатИспользоватьЗагрузкуОтчетовПлатныхДорог.Получить();
	НаборКонстант.уатИспользоватьУчетБилетовИВыручки               = Константы.уатИспользоватьУчетБилетовИВыручки.Получить();
	НаборКонстант.уатИспользоватьМониторинг                        = Константы.уатИспользоватьМониторинг.Получить();
	НаборКонстант.уатИспользоватьМобильноеПриложениеВодителя       = Константы.уатИспользоватьМобильноеПриложениеВодителя.Получить();
	НаборКонстант.уатИспользоватьЭлектронныеКарты                  = Константы.уатИспользоватьЭлектронныеКарты.Получить();
	НаборКонстант.уатИспользоватьСогласованиеДокументов            = Константы.уатИспользоватьСогласованиеДокументов.Получить();
	НаборКонстант.ИспользоватьПодключаемоеОборудование             = Константы.ИспользоватьПодключаемоеОборудование.Получить();
	НаборКонстант.уатИспользоватьШтрихкодированиеГрузовЗаказахНаТС_уэ = Константы.уатИспользоватьШтрихкодированиеГрузовЗаказахНаТС_уэ.Получить();
	НаборКонстант.уатТипШтрихкодаДляПечати_уэ 						  = Константы.уатТипШтрихкодаДляПечати_уэ.Получить();
	НаборКонстант.уатИспользоватьТерминалПриемаВыдачиПутевыхЛистов = Константы.уатИспользоватьТерминалПриемаВыдачиПутевыхЛистов.Получить();
	НаборКонстант.уатИспользоватьАвтоматическуюЗагрузкуОтчетовПЦ   = Константы.уатИспользоватьАвтоматическуюЗагрузкуОтчетовПЦ.Получить();
	НаборКонстант.уатИспользоватьСервисШтрафовНет                  = Константы.уатИспользоватьСервисШтрафовНет.Получить();
	НаборКонстант.уатИспользоватьИнтеграциюПаркоматика             = Константы.уатИспользоватьИнтеграциюПаркоматика.Получить();

	Если флДоступноБюджетирование Тогда
		НаборКонстант.ИспользоватьБюджетирование                   = Константы.ИспользоватьБюджетирование.Получить();
		НаборКонстант.ИспользоватьБюджетныеПроцессы                = Константы.ИспользоватьБюджетныеПроцессы.Получить();
	КонецЕсли;
	
	НаборКонстант.уатМноговалютныйУчет                             = Константы.уатМноговалютныйУчет.Получить();
	НаборКонстант.уатИспользоватьТехнологическиеПутевыеЛисты       = Константы.уатИспользоватьТехнологическиеПутевыеЛисты.Получить();
	НаборКонстант.уатПрогнозированиеОпозданийПоМаршрутнымЛистам    = Константы.уатПрогнозированиеОпозданийПоМаршрутнымЛистам.Получить();
	НаборКонстант.уатИспользоватьСервисMultiGo                     = Константы.уатИспользоватьСервисMultiGo.Получить();
	НаборКонстант.сфпИспользоватьСофтФон                           = Константы.сфпИспользоватьСофтФон.Получить();
	
	//НаборКонстант.уатИспользоватьШтрихкодированиеПутевыхЛистов     = Константы.уатИспользоватьШтрихкодированиеПутевыхЛистов.Получить();
	//НаборКонстант.уатИспользоватьШтрихкодированиеЗаказовНаТС_уэ	   = Константы.уатИспользоватьШтрихкодированиеЗаказовНаТС_уэ.Получить();
	ПрочитатьНастройкиШтрихкодированияОбъектов();
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура ФормаНастроекПриСозданииНаСервере_уэ()
	
	УстановитьПривилегированныйРежим(Истина);
	
	#Область Добавление_констант
	// Установка значений.
	Если уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП() Тогда
		НаборКонстант.уатИспользоватьПлановыеУслуги_уэ              = Константы.уатИспользоватьПлановыеУслуги_уэ.Получить();
		НаборКонстант.уатИспользоватьРекламации_уэ                  = Константы.уатИспользоватьРекламации_уэ.Получить();
		НаборКонстант.уатИспользоватьСкладскиеАкты_уэ               = Константы.уатИспользоватьСкладскиеАкты_уэ.Получить();
		НаборКонстант.уатИспользоватьМультимодальныеПеревозки_уэ    = Константы.уатИспользоватьМультимодальныеПеревозки_уэ.Получить();
		НаборКонстант.уатИспользоватьFTLПеревозки_уэ                = Константы.уатИспользоватьFTLПеревозки_уэ.Получить();
		НаборКонстант.уатИспользоватьТендеры_уэ                     = Константы.уатИспользоватьТендеры_уэ.Получить();
		НаборКонстант.уатИспользоватьИнтеграциюАТИ_уэ               = Константы.уатИспользоватьИнтеграциюАТИ_уэ.Получить();
		НаборКонстант.уатИспользоватьРассылкуЭлектронныхПисем_уэ    = Константы.уатИспользоватьРассылкуЭлектронныхПисем_уэ.Получить();
		НаборКонстант.уатИспользоватьАвтоматическуюМаршрутизацию_уэ = Константы.уатИспользоватьАвтоматическуюМаршрутизацию_уэ.Получить();
		НаборКонстант.уатРазделятьПланФактВСкладскихАктах_уэ        = Константы.уатРазделятьПланФактВСкладскихАктах_уэ.Получить();
		НаборКонстант.уатИспользоватьЗакреплениеМаршрутныхЛистовЗаПеревозчиками_уэ = Константы.уатИспользоватьЗакреплениеМаршрутныхЛистовЗаПеревозчиками_уэ.Получить();
		НаборКонстант.уатИспользоватьУведомления_уэ                 = Константы.уатИспользоватьУведомления_уэ.Получить();
		НаборКонстант.уатИспользоватьСтрахование_уэ                 = Константы.уатИспользоватьСтрахование_уэ.Получить();
		НаборКонстант.уатИспользоватьИнтеграциюWMS_уэ               = Константы.уатИспользоватьИнтеграциюWMS_уэ.Получить();
		НаборКонстант.уатИспользоватьРедакторЦепочкиДокументов_уэ   = Константы.уатИспользоватьРедакторЦепочкиДокументов_уэ.Получить();
		НаборКонстант.уатИспользоватьРасчетТары_уэ                  = Константы.уатИспользоватьРасчетТары_уэ.Получить();
	КонецЕсли;
	#КонецОбласти
	
КонецПроцедуры

&НаСервере
Процедура ФормаНастроекПослеЗаписиНаСервере_проф(Форма)
	
	// Сохранение значений констант.
	
	Если Форма.Элементы.уатИспользоватьЛогистику.Доступность Тогда
		Константы.уатИспользоватьЛогистику.Установить(НаборКонстант.уатИспользоватьЛогистику);
	КонецЕсли;
	
	Если Форма.Элементы.уатИспользоватьПривлеченныхПеревозчиков.Доступность Тогда
		Константы.уатИспользоватьПривлеченныхПеревозчиков.Установить(НаборКонстант.уатИспользоватьПривлеченныхПеревозчиков);
	КонецЕсли;
	
	Если Форма.Элементы.уатИспользоватьДокументооборот.Доступность Тогда
		Константы.уатИспользоватьДокументооборот.Установить(НаборКонстант.уатИспользоватьДокументооборот);
	КонецЕсли;
	
	Если Форма.Элементы.уатИспользоватьАвтоматическуюЗагрузкуОтчетовПЦ.Доступность Тогда 
		Константы.уатИспользоватьАвтоматическуюЗагрузкуОтчетовПЦ.Установить(НаборКонстант.уатИспользоватьАвтоматическуюЗагрузкуОтчетовПЦ);
	КонецЕсли;
	
	Если Форма.Элементы.уатИспользоватьУчетБилетовИВыручки.Доступность Тогда 
		Константы.уатИспользоватьУчетБилетовИВыручки.Установить(НаборКонстант.уатИспользоватьУчетБилетовИВыручки);
	КонецЕсли;
	
	Если Форма.Элементы.уатИспользоватьСервисШтрафовНет.Доступность Тогда
		Константы.уатИспользоватьСервисШтрафовНет.Установить(НаборКонстант.уатИспользоватьСервисШтрафовНет);
	КонецЕсли;
	
	Если Форма.Элементы.уатИспользоватьИнтеграциюПаркоматика.Доступность Тогда
		Константы.уатИспользоватьИнтеграциюПаркоматика.Установить(НаборКонстант.уатИспользоватьИнтеграциюПаркоматика);
	КонецЕсли;
	
	Если Форма.Элементы.уатИспользоватьПлатежныйКалендарь.Доступность Тогда
		Константы.уатИспользоватьПлатежныйКалендарь.Установить(НаборКонстант.уатИспользоватьПлатежныйКалендарь);
	КонецЕсли;
	
	Если Форма.Элементы.уатИспользоватьУчетДоходовИРасходов.Доступность Тогда
		Константы.уатИспользоватьУчетДоходовИРасходов.Установить(НаборКонстант.уатИспользоватьУчетДоходовИРасходов);
	КонецЕсли;
	
	Если Форма.Элементы.уатИспользоватьЗагрузкуОтчетовПлатныхДорог.Доступность Тогда
		Константы.уатИспользоватьЗагрузкуОтчетовПлатныхДорог.Установить(НаборКонстант.уатИспользоватьЗагрузкуОтчетовПлатныхДорог);
	КонецЕсли;
	
	Если Форма.Элементы.уатИспользоватьМониторинг.Доступность Тогда 
		Константы.уатИспользоватьМониторинг.Установить(НаборКонстант.уатИспользоватьМониторинг);
	КонецЕсли;
	
	Если Форма.Элементы.уатИспользоватьМониторинг.Доступность И Не Константы.уатИспользоватьМониторинг.Получить() Тогда 
		Константы.уатИспользоватьOmnicomm.Установить(Ложь);
		Константы.уатИспользоватьЦСМ.Установить(Ложь);
		Константы.уатИспользоватьСКАУТ.Установить(Ложь);
		Константы.уатИспользоватьWialon.Установить(Ложь);
		Константы.уатИспользоватьАвтоГРАФ.Установить(Ложь);
	КонецЕсли;
	
	Если Форма.Элементы.уатИспользоватьМобильноеПриложениеВодителя.Доступность Тогда 
		Константы.уатИспользоватьМобильноеПриложениеВодителя.Установить(НаборКонстант.уатИспользоватьМобильноеПриложениеВодителя);
	КонецЕсли;
	
	Если Форма.Элементы.уатИспользоватьЭлектронныеКарты.Доступность Тогда 
		Константы.уатИспользоватьЭлектронныеКарты.Установить(НаборКонстант.уатИспользоватьЭлектронныеКарты);
	КонецЕсли;
	
	Если Форма.Элементы.уатИспользоватьСогласованиеДокументов.Доступность Тогда 
		Константы.уатИспользоватьСогласованиеДокументов.Установить(
		?(Константы.ИспользоватьБизнесПроцессыИЗадачи.Получить(), НаборКонстант.уатИспользоватьСогласованиеДокументов, Ложь)
		);
	КонецЕсли;
	
	Если Форма.Элементы.ИспользоватьПодключаемоеОборудование.Доступность Тогда 
		Константы.ИспользоватьПодключаемоеОборудование.Установить(НаборКонстант.ИспользоватьПодключаемоеОборудование);
	КонецЕсли;
	
	Если Форма.Элементы.уатИспользоватьШтрихкодированиеГрузовЗаказахНаТС_уэ.Доступность Тогда
		Константы.уатИспользоватьШтрихкодированиеГрузовЗаказахНаТС_уэ.Установить(НаборКонстант.уатИспользоватьШтрихкодированиеГрузовЗаказахНаТС_уэ);
	КонецЕсли;
	
	Если Форма.Элементы.уатТипШтрихкодаДляПечати_уэ.Доступность Тогда
		Константы.уатТипШтрихкодаДляПечати_уэ.Установить(НаборКонстант.уатТипШтрихкодаДляПечати_уэ);
	КонецЕсли;
	
	Если Форма.Элементы.уатИспользоватьТерминалПриемаВыдачиПутевыхЛистов.Доступность Тогда 
		Константы.уатИспользоватьТерминалПриемаВыдачиПутевыхЛистов.Установить(НаборКонстант.уатИспользоватьТерминалПриемаВыдачиПутевыхЛистов);
	КонецЕсли;
	
	флДоступноБюджетирование = (Метаданные.Константы.Найти("ИспользоватьБюджетирование") <> Неопределено);
	Если Метаданные.Константы.Найти("уатКонфигурацияДляРФ") <> Неопределено Тогда
		флДоступноБюджетирование = уатОбщегоНазначения.КонфигурацияДляРФ();
	КонецЕсли;
	
	флДоступноБюджетирование = (Метаданные.Константы.Найти("ИспользоватьБюджетирование") <> Неопределено);
	Если Метаданные.Константы.Найти("уатКонфигурацияДляРФ") <> Неопределено Тогда
		КонфигурацияДляРФ = уатОбщегоНазначения.КонфигурацияДляРФ();
		флДоступноБюджетирование = КонфигурацияДляРФ И флДоступноБюджетирование;
		Если НЕ КонфигурацияДляРФ Тогда
			Константы.ИспользоватьБюджетирование.Установить(КонфигурацияДляРФ);
			Константы.ИспользоватьБюджетныеПроцессы.Установить(КонфигурацияДляРФ);
		КонецЕсли;
	КонецЕсли;
	
	Если флДоступноБюджетирование Тогда
		Если Форма.Элементы.ИспользоватьБюджетирование.Доступность Тогда 
			Константы.ИспользоватьБюджетирование.Установить(НаборКонстант.ИспользоватьБюджетирование);
		КонецЕсли;
		Если Форма.Элементы.ИспользоватьБюджетныеПроцессы.Доступность Тогда 
			Константы.ИспользоватьБюджетныеПроцессы.Установить(НаборКонстант.ИспользоватьБюджетныеПроцессы);
		КонецЕсли;
	КонецЕсли;
	
	Константы.уатМноговалютныйУчет.Установить(НаборКонстант.уатМноговалютныйУчет);
	
	Константы.уатИспользоватьТехнологическиеПутевыеЛисты.Установить(НаборКонстант.уатИспользоватьТехнологическиеПутевыеЛисты);
	
	Если Форма.Элементы.уатПрогнозированиеОпозданийПоМаршрутнымЛистам.Доступность Тогда
		Константы.уатПрогнозированиеОпозданийПоМаршрутнымЛистам.Установить(НаборКонстант.уатПрогнозированиеОпозданийПоМаршрутнымЛистам);
	КонецЕсли;
	
	Если Форма.Элементы.уатИспользоватьСервисMultiGo.Доступность Тогда
		Константы.уатИспользоватьСервисMultiGo.Установить(НаборКонстант.уатИспользоватьСервисMultiGo);
	КонецЕсли;
	
	//Если Форма.Элементы.уатИспользоватьШтрихкодированиеПутевыхЛистов.Доступность Тогда 
	//	Константы.уатИспользоватьШтрихкодированиеПутевыхЛистов.Установить(НаборКонстант.уатИспользоватьШтрихкодированиеПутевыхЛистов);
	//КонецЕсли;
	//Если Форма.Элементы.уатИспользоватьШтрихкодированиеЗаказовНаТС_уэ.Доступность Тогда
	//	Константы.уатИспользоватьШтрихкодированиеЗаказовНаТС_уэ.Установить(НаборКонстант.уатИспользоватьШтрихкодированиеЗаказовНаТС_уэ);
	//КонецЕсли;
	ЗаписатьНастройкиШтрихкодированияОбъектов();
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

&НаСервере
Процедура ФормаНастроекПослеЗаписиНаСервере_уэ(Форма)
	
	// Сохранение значений констант.
	
	Если уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП() Тогда
			
		Если Форма.Элементы.уатИспользоватьСтрахование_уэ.Доступность Тогда 
			Константы.уатИспользоватьСтрахование_уэ.Установить(НаборКонстант.уатИспользоватьСтрахование_уэ);
		КонецЕсли;
		
		Если Форма.Элементы.уатИспользоватьРекламации_уэ.Доступность Тогда 
			Константы.уатИспользоватьРекламации_уэ.Установить(НаборКонстант.уатИспользоватьРекламации_уэ);
		КонецЕсли;
		
		Если Форма.Элементы.уатИспользоватьСкладскиеАкты_уэ.Доступность Тогда 
			Константы.уатИспользоватьСкладскиеАкты_уэ.Установить(НаборКонстант.уатИспользоватьСкладскиеАкты_уэ);
		КонецЕсли;
		
		Если Форма.Элементы.уатИспользоватьПлановыеУслуги_уэ.Доступность Тогда 
			Константы.уатИспользоватьПлановыеУслуги_уэ.Установить(НаборКонстант.уатИспользоватьПлановыеУслуги_уэ);
		КонецЕсли;	
			
		Если Форма.Элементы.уатИспользоватьМультимодальныеПеревозки_уэ.Доступность Тогда 
			Константы.уатИспользоватьМультимодальныеПеревозки_уэ.Установить(НаборКонстант.уатИспользоватьМультимодальныеПеревозки_уэ);
		КонецЕсли;
		
		Если Форма.Элементы.уатИспользоватьFTLПеревозки_уэ.Доступность Тогда 
			Константы.уатИспользоватьFTLПеревозки_уэ.Установить(НаборКонстант.уатИспользоватьFTLПеревозки_уэ);
		КонецЕсли;
		
		Если Форма.Элементы.уатИспользоватьТендеры_уэ.Доступность Тогда 
			Константы.уатИспользоватьТендеры_уэ.Установить(НаборКонстант.уатИспользоватьТендеры_уэ);
		КонецЕсли;
		
		Если Форма.Элементы.уатИспользоватьИнтеграциюАТИ_уэ.Доступность Тогда 
			Константы.уатИспользоватьИнтеграциюАТИ_уэ.Установить(НаборКонстант.уатИспользоватьИнтеграциюАТИ_уэ);
		КонецЕсли;
		
		Если Форма.Элементы.уатИспользоватьРассылкуЭлектронныхПисем_уэ.Доступность Тогда 
			Константы.уатИспользоватьРассылкуЭлектронныхПисем_уэ.Установить(НаборКонстант.уатИспользоватьРассылкуЭлектронныхПисем_уэ);
		КонецЕсли;
		
		Если Форма.Элементы.уатИспользоватьПлановыеУслуги_уэ.Доступность Тогда
			Константы.уатИспользоватьПлановыеУслуги_уэ.Установить(НаборКонстант.уатИспользоватьПлановыеУслуги_уэ);
		КонецЕсли;
		
		Константы.уатИспользоватьАвтоматическуюМаршрутизацию_уэ.Установить(НаборКонстант.уатИспользоватьАвтоматическуюМаршрутизацию_уэ);
		
		Если Форма.Элементы.уатРазделятьПланФактВСкладскихАктах_уэ.Доступность Тогда 
			Константы.уатРазделятьПланФактВСкладскихАктах_уэ.Установить(НаборКонстант.уатРазделятьПланФактВСкладскихАктах_уэ);
		КонецЕсли;
		
		Если Форма.Элементы.уатИспользоватьЗакреплениеМаршрутныхЛистовЗаПеревозчиками_уэ.Доступность Тогда 
			Константы.уатИспользоватьЗакреплениеМаршрутныхЛистовЗаПеревозчиками_уэ.Установить(НаборКонстант.уатИспользоватьЗакреплениеМаршрутныхЛистовЗаПеревозчиками_уэ);
		КонецЕсли;
		
		Если Форма.Элементы.уатИспользоватьУведомления_уэ.Доступность Тогда 
			Константы.уатИспользоватьУведомления_уэ.Установить(НаборКонстант.уатИспользоватьУведомления_уэ);
		КонецЕсли;
		
		Если Форма.Элементы.уатИспользоватьИнтеграциюWMS_уэ.Доступность Тогда 
			Константы.уатИспользоватьИнтеграциюWMS_уэ.Установить(НаборКонстант.уатИспользоватьИнтеграциюWMS_уэ);
		КонецЕсли;
		
		Если Форма.Элементы.уатИспользоватьРедакторЦепочкиДокументов_уэ.Доступность Тогда 
			Константы.уатИспользоватьРедакторЦепочкиДокументов_уэ.Установить(НаборКонстант.уатИспользоватьРедакторЦепочкиДокументов_уэ);
		КонецЕсли;
		
	КонецЕсли;
	
	ОбновитьПовторноИспользуемыеЗначения();
	
КонецПроцедуры

&НаСервере
Процедура ПроверкаДоступностиВалютыУчета()
	
	УстановитьПривилегированныйРежим(Истина);
	
	Запрос = Новый Запрос();
	Запрос.Текст = ""; 
	
	Для каждого Док из Метаданные.Документы Цикл
		
		Запрос.Текст = Запрос.Текст + 
		"ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ ПЕРВЫЕ 1
		|	Документ." + Док.Имя + ".Ссылка
		|
		|";
		
	КонецЦикла;
	
	// Уберем первое "ОБЪЕДИНИТЬ ВСЕ"
	Запрос.Текст  = Сред(Запрос.Текст, СтрДлина("ОБЪЕДИНИТЬ ВСЕ") + 1);
	
	ЕстьДокументы = (Не Запрос.Выполнить().Пустой());
	
	Элементы.ВалютаРегламентированногоУчета.ТолькоПросмотр = ЕстьДокументы;
	
	Если Метаданные.Константы.Найти("ВалютаУправленческогоУчета") = Неопределено Тогда 
		ЕстьВалютаУправленческогоУчета = Ложь;
	Иначе 
		ЕстьВалютаУправленческогоУчета = Истина;
	КонецЕсли;
	
	Если ЕстьВалютаУправленческогоУчета Тогда 
		Элементы.ВалютаУправленческогоУчета.ТолькоПросмотр = ЕстьДокументы;
	Иначе 
		Элементы.ВалютаУправленческогоУчетаПодсказка.Видимость = Ложь;
	КонецЕсли;
		
	Если ЕстьДокументы Тогда
		Элементы.ДекорацияВалютаРегламентированногоУчетаПодсказка.Заголовок = СтрЗаменить(
			Элементы.ДекорацияВалютаРегламентированногоУчетаПодсказка.Заголовок,
			"%ДополнениеПодсказкиВалюты%",
			НСтр("en='After entering documents, the accounting currency can not be changed.';ru='После ввода документов валюты учета изменять нельзя.'")
		);
		Если ЕстьВалютаУправленческогоУчета Тогда 
			Элементы.ДекорацияВалютаУправленчекогоУчетаПодсказка.Заголовок = СтрЗаменить(
				Элементы.ДекорацияВалютаУправленчекогоУчетаПодсказка.Заголовок,
				"%ДополнениеПодсказкиВалюты%",
				НСтр("en='After entering documents, the accounting currency can not be changed.';ru='После ввода документов валюты учета изменять нельзя.'")
			);
		КонецЕсли;
	Иначе
		Элементы.ДекорацияВалютаРегламентированногоУчетаПодсказка.Заголовок = СтрЗаменить(
			Элементы.ДекорацияВалютаРегламентированногоУчетаПодсказка.Заголовок,
			"%ДополнениеПодсказкиВалюты%",
			НСтр("en='Accounting currency can be changed until no entered documents.';ru='Валюты учета можно изменять пока не введены документы.'")
		);
		Если ЕстьВалютаУправленческогоУчета Тогда 
			Элементы.ДекорацияВалютаУправленчекогоУчетаПодсказка.Заголовок = СтрЗаменить(
				Элементы.ДекорацияВалютаУправленчекогоУчетаПодсказка.Заголовок,
				"%ДополнениеПодсказкиВалюты%",
				НСтр("en='Accounting currency can be changed until no entered documents.';ru='Валюты учета можно изменять пока не введены документы.'")
			);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры // ПроверкаДоступностиВалютыУчета()

&НаСервереБезКонтекста
Функция ДоступноИзменениеЕдиницИзмерения()
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	уатНоменклатураГрузов.Вес,
	|	NULL КАК Ссылка
	|ИЗ
	|	РегистрСведений.уатНоменклатураГрузов КАК уатНоменклатураГрузов
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ ПЕРВЫЕ 1
	|	NULL,
	|	уатЗаказГрузоотправителя.Ссылка
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	|ГДЕ
	|	НЕ уатЗаказГрузоотправителя.ПометкаУдаления
	|	И уатЗаказГрузоотправителя.Проведен";
	
	УстановитьПривилегированныйРежим(Истина);
	ДоступноИзменениеЕдиницИзмерения = Запрос.Выполнить().Пустой();
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ДоступноИзменениеЕдиницИзмерения;
	
КонецФункции // ДоступноИзменениеЕдиницИзмерения()

&НаСервереБезКонтекста
Функция ЗадаватьВопросПриИзмененииЕдиницИзмерения()
	
	Возврат РольДоступна(Метаданные.Роли.ПолныеПрава);
	
КонецФункции // ЗадаватьВопросПриИзмененииЕдиницИзмерения()

&НаСервереБезКонтекста
Функция ПолучитьЕдиницуИзмеренияВеса()
	
	Возврат Константы.уатЕдиницаИзмеренияВеса.Получить();
	
КонецФункции // ПолучитьЕдиницуИзмеренияВеса()

&НаСервереБезКонтекста
Функция ПолучитьЕдиницуИзмеренияОбъема()
	
	Возврат Константы.уатЕдиницаИзмеренияОбъема.Получить();
	
КонецФункции // ПолучитьЕдиницуИзмеренияОбъема()

&НаКлиенте
Процедура Подключаемый_ПриИзмененииЕИВеса(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда 
		Модифицированность = Истина;
	Иначе 
		НаборКонстант.уатЕдиницаИзмеренияВеса = ПолучитьЕдиницуИзмеренияВеса();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииЕИОбъема(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда 
		Модифицированность = Истина;
	Иначе 
		НаборКонстант.уатЕдиницаИзмеренияОбъема = ПолучитьЕдиницуИзмеренияОбъема();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьНастройкиШтрихкодированияОбъектов()
	СтруктураНастройки = Константы.уатНастройкиШтрихкодированияОбъектов.Получить().Получить();
	Если СтруктураНастройки <> Неопределено Тогда
		СтруктураНастройки.Свойство("уатВнутреннееПеремещение",     ИспользоватьШтрихкодирование_уатВнутреннееПеремещение);
		СтруктураНастройки.Свойство("уатВозвратТоваров",            ИспользоватьШтрихкодирование_уатВозвратТоваров);
		СтруктураНастройки.Свойство("уатВыдачаРасходныхМатериалов", ИспользоватьШтрихкодирование_уатВыдачаРасходныхМатериалов);
		СтруктураНастройки.Свойство("уатЗаказГрузоотправителя",     ИспользоватьШтрихкодирование_уатЗаказГрузоотправителя);
		СтруктураНастройки.Свойство("уатЗаявкаНаРемонт",            ИспользоватьШтрихкодирование_уатЗаявкаНаРемонт);
		СтруктураНастройки.Свойство("уатИнвентаризацияТоваров",     ИспользоватьШтрихкодирование_уатИнвентаризацияТоваров);
		СтруктураНастройки.Свойство("уатОприходованиеТоваров",      ИспользоватьШтрихкодирование_уатОприходованиеТоваров);
		СтруктураНастройки.Свойство("уатПеремещениеТоваров",        ИспользоватьШтрихкодирование_уатПеремещениеТоваров);
		СтруктураНастройки.Свойство("уатПоступлениеТоваровУслуг",   ИспользоватьШтрихкодирование_уатПоступлениеТоваровУслуг);
		СтруктураНастройки.Свойство("уатПутевойЛист",               ИспользоватьШтрихкодирование_уатПутевойЛист);
		СтруктураНастройки.Свойство("уатРемонтныйЛист",             ИспользоватьШтрихкодирование_уатРемонтныйЛист);
		СтруктураНастройки.Свойство("уатСписаниеТоваров",           ИспользоватьШтрихкодирование_уатСписаниеТоваров);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНастройкиШтрихкодированияОбъектов()
	СтруктураНастройки = Новый Структура;
	СтруктураНастройки.Вставить("уатВнутреннееПеремещение",     ИспользоватьШтрихкодирование_уатВнутреннееПеремещение);
	СтруктураНастройки.Вставить("уатВозвратТоваров",            ИспользоватьШтрихкодирование_уатВозвратТоваров);
	СтруктураНастройки.Вставить("уатВыдачаРасходныхМатериалов", ИспользоватьШтрихкодирование_уатВыдачаРасходныхМатериалов);
	СтруктураНастройки.Вставить("уатЗаказГрузоотправителя",     ИспользоватьШтрихкодирование_уатЗаказГрузоотправителя);
	СтруктураНастройки.Вставить("уатЗаявкаНаРемонт",            ИспользоватьШтрихкодирование_уатЗаявкаНаРемонт);
	СтруктураНастройки.Вставить("уатИнвентаризацияТоваров",     ИспользоватьШтрихкодирование_уатИнвентаризацияТоваров);
	СтруктураНастройки.Вставить("уатОприходованиеТоваров",      ИспользоватьШтрихкодирование_уатОприходованиеТоваров);
	СтруктураНастройки.Вставить("уатПеремещениеТоваров",        ИспользоватьШтрихкодирование_уатПеремещениеТоваров);
	СтруктураНастройки.Вставить("уатПоступлениеТоваровУслуг",   ИспользоватьШтрихкодирование_уатПоступлениеТоваровУслуг);
	СтруктураНастройки.Вставить("уатПутевойЛист",               ИспользоватьШтрихкодирование_уатПутевойЛист);
	СтруктураНастройки.Вставить("уатРемонтныйЛист",             ИспользоватьШтрихкодирование_уатРемонтныйЛист);
	СтруктураНастройки.Вставить("уатСписаниеТоваров",           ИспользоватьШтрихкодирование_уатСписаниеТоваров);
	
	Константы.уатНастройкиШтрихкодированияОбъектов.Установить(Новый ХранилищеЗначения(СтруктураНастройки));
КонецПроцедуры

#КонецОбласти

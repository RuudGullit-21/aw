#Область ОбработчикиСобытийФормы

&НаСервере
// Процедура - обработчик события ПриСозданииНаСервере формы.
// В процедуре осуществляется
// - инициализация параметров формы.
//
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВалютаУчета = Константы.ВалютаРегламентированногоУчета.Получить();
	ЗаполнитьТаблицуКурсовВалют();
	ПолучитьЗначенияПараметровФормы();
	ЗаполнитьИнформациюВалютаУпр();
	
	Если НЕ уатОбщегоНазначенияТиповые.уатЕстьКонстанта("ВалютаУправленческогоУчета") Тогда
		Элементы.ВалютаУпрУчетаКурсКратность.Видимость = Ложь;
	КонецЕсли;
	
	НадписьКратностьРасчетов = "(кратность: " + КратностьРасчетов + ")";
	НадписьКратностьУпр = "(кратность: " + КратностьУпр + ")";
	НадписьКратность = "(кратность: " + Кратность + ")";
	
	Если Параметры.Свойство("ИзменениеВалюты") И Параметры.ИзменениеВалюты = Истина Тогда
		Элементы.ВалютаРасчетов.ТолькоПросмотр = Ложь;
	КонецЕсли;
	Если Параметры.Свойство("ИзменениеВалютыДокумента") И Параметры.ИзменениеВалютыДокумента = ЛОЖЬ Тогда
		Элементы.ВалютаДокумента.ТолькоПросмотр = Истина;
	КонецЕсли;
	Если Параметры.Свойство("РедактированиеСтроки") И Параметры.РедактированиеСтроки = Истина Тогда
		Элементы.ВалютаУпрУчетаКурсКратность.Видимость = Ложь;
	КонецЕсли;
	Если ТолькоПросмотр Тогда
		Элементы.ЦеныИСкидки.ТолькоПросмотр = Истина;
		Элементы.ВалютаКурсКратностьДокумента.ТолькоПросмотр = Истина;
		Элементы.Налоги.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	УстановитьВидимостьКратность();
	УстановитьВидимостьСуммаВключаетНДС();
	
КонецПроцедуры // ПриСозданииНаСервере()

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода ВидЦен.
//
Процедура ВидЦеныПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ВидЦен) Тогда
                        
        Если ВидЦенПриОткрытии <> ВидЦен Тогда
			
			ПерезаполнитьЦены = Истина;

		КонецЕсли;
        
	КонецЕсли;
	
КонецПроцедуры // ВидЦеныПриИзменении()

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода ВидЦенКонтрагента.
//
Процедура ВидЦенКонтрагентаПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ВидЦенКонтрагента) Тогда
                        
        Если ВидЦенКонтрагентаПриОткрытии <> ВидЦенКонтрагента Тогда
			
			ПерезаполнитьЦены = Истина;

		КонецЕсли;
        
	КонецЕсли;
	
КонецПроцедуры // ВидЦеныПриИзменении()

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода ВидСкидки.
//
Процедура ВидСкидкиПриИзменении(Элемент)
	
	Если ЗначениеЗаполнено(ВидСкидки)
		
		И ВидСкидкиПриОткрытии <> ВидСкидки Тогда
		ПерезаполнитьЦены = Истина;
		
	КонецЕсли;
	
КонецПроцедуры // ВидСкидкиПриИзменении()

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода Валюта.
//
Процедура ВалютаПриИзменении(Элемент)
	
	ЗаполнитьКурсКратностьВалютыДокумента();

	Если ЗначениеЗаполнено(ВалютаДокумента)
		И ВалютаДокументаПриОткрытии <> ВалютаДокумента Тогда
		
		ПересчитатьЦены = Истина;
  	КонецЕсли;

КонецПроцедуры // ВалютаПриИзменении()

&НаКлиенте
Процедура КурсПриИзменении(Элемент)
	Если Курс <> КурсПриОткрытии Тогда
		ПересчитатьЦены = Истина;
	КонецЕсли;
	
	РассчитатьКроссКурс();
	РассчитатьСуммуВзаиморасчетов();
	УстановитьВидимостьКратность();
КонецПроцедуры

&НаКлиенте
Процедура КратностьПриИзменении(Элемент)
	Если Кратность <> КратностьПриОткрытии Тогда
		ПересчитатьЦены = Истина;
  	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДатаКурсаДокументаПриИзменении(Элемент)
	ЗаполнитьКурсКратностьВалютыДокумента();
	ЗаполнитьКурсКратностьВалютыРасчетов();
КонецПроцедуры

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода ВалютаРасчетов.
//
Процедура ВалютаРасчетовПриИзменении(Элемент)
	ЗаполнитьКурсКратностьВалютыРасчетов();
КонецПроцедуры // ВалютаРасчетовПриИзменении()

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода КурсРасчетов.
//
Процедура КурсРасчетовПриИзменении(Элемент)
	ЗаполнитьКурсКратностьВалютыРасчетов();
КонецПроцедуры // КурсРасчетовПриИзменении()

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода КратностьРасчетов.
//
Процедура КратностьРасчетовПриИзменении(Элемент)
	ЗаполнитьКурсКратностьВалютыРасчетов();
КонецПроцедуры // КратностьРасчетовПриИзменении()

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода ПерезаполнитьЦены.
//
Процедура ПерезаполнитьЦеныПриИзменении(Элемент)
	
	Если ВидЦенЕстьРеквизит Тогда
		
		Если ПерезаполнитьЦены Тогда
			Элементы.ВидЦен.АвтоОтметкаНезаполненного = Истина;
		Иначе	
			Элементы.ВидЦен.АвтоОтметкаНезаполненного = Ложь;
			ОтключитьОтметкуНезаполненного();
		КонецЕсли;		
	
	ИначеЕсли ВидЦенКонтрагентаЕстьРеквизит Тогда
		
		Если ПерезаполнитьЦены ИЛИ РегистрироватьЦеныПоставщика Тогда
			Элементы.ВидЦенКонтрагента.АвтоОтметкаНезаполненного = Истина;
		Иначе	
			Элементы.ВидЦенКонтрагента.АвтоОтметкаНезаполненного = Ложь;
			ОтключитьОтметкуНезаполненного();
		КонецЕсли;		
	
	КонецЕсли;
	
КонецПроцедуры // ПерезаполнитьЦеныПриИзменении()

&НаКлиенте
// Процедура - обработчик события ПриИзменении поля ввода РегистрироватьЦеныПоставщика.
//
Процедура РегистрироватьЦеныПоставщикаПриИзменении(Элемент)
	
	Если РегистрироватьЦеныПоставщика ИЛИ ПерезаполнитьЦены Тогда
		Элементы.ВидЦенКонтрагента.АвтоОтметкаНезаполненного = Истина;
	Иначе	
		Элементы.ВидЦенКонтрагента.АвтоОтметкаНезаполненного = Ложь;
		ОтключитьОтметкуНезаполненного();
	КонецЕсли;
	
КонецПроцедуры // ПерезаполнитьЦеныПриИзменении()

&НаКлиенте
Процедура НалогообложениеНДСПриИзменении(Элемент)
	Если НЕ НалогообложениеНДС Тогда
		СуммаВключаетНДС = Ложь;
	КонецЕсли;
	
	УстановитьВидимостьСуммаВключаетНДС()
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
// Процедура - обработчик события нажатия кнопки ОК.
//
Процедура КомандаОК(Команда)
	
	Отказ = Ложь;

	ПроверитьЗаполнениеРеквизитовФормы(Отказ);
	ПроверитьМодифицированностьФормы();
    
	Если НЕ Отказ Тогда

		СтруктураРеквизитовФормы = Новый Структура;

        СтруктураРеквизитовФормы.Вставить("БылиВнесеныИзменения", 			БылиВнесеныИзменения);

        СтруктураРеквизитовФормы.Вставить("ВидЦен", 						ВидЦен);
		СтруктураРеквизитовФормы.Вставить("ВидЦенКонтрагента", 				ВидЦенКонтрагента);
		СтруктураРеквизитовФормы.Вставить("РегистрироватьЦеныПоставщика", 	РегистрироватьЦеныПоставщика);
		СтруктураРеквизитовФормы.Вставить("ВидСкидки",  					ВидСкидки);

		СтруктураРеквизитовФормы.Вставить("ВалютаДокумента", 				ВалютаДокумента);
		СтруктураРеквизитовФормы.Вставить("Курс", 							Курс);
		СтруктураРеквизитовФормы.Вставить("Кратность", 						Кратность);
		СтруктураРеквизитовФормы.Вставить("ДатаКурса", 						ДатаКурсаДокумента);
		
		СтруктураРеквизитовФормы.Вставить("ВалютаРасчетов", 				ВалютаРасчетов);
		СтруктураРеквизитовФормы.Вставить("КурсРасчетов", 					КурсРасчетов);
		СтруктураРеквизитовФормы.Вставить("КратностьРасчетов", 				КратностьРасчетов);
		СтруктураРеквизитовФормы.Вставить("КроссКурс",       				КроссКурс);
		СтруктураРеквизитовФормы.Вставить("ПредКроссКурс",       			КроссКурсПриОткрытии);
		
		СтруктураРеквизитовФормы.Вставить("НалогообложениеНДС",				НалогообложениеНДС);
		СтруктураРеквизитовФормы.Вставить("СуммаВключаетНДС", 				СуммаВключаетНДС);
		СтруктураРеквизитовФормы.Вставить("НДСВключатьВСтоимость", 			НДСВключатьВСтоимость);
                 
		СтруктураРеквизитовФормы.Вставить("ПредВалютаДокумента", 			ВалютаДокументаПриОткрытии);
		СтруктураРеквизитовФормы.Вставить("ПредНалогообложениеНДС", 		НалогообложениеНДСПриОткрытии);
		СтруктураРеквизитовФормы.Вставить("ПредСуммаВключаетНДС", 			СуммаВключаетНДСПриОткрытии);

        СтруктураРеквизитовФормы.Вставить("ПерезаполнитьЦены", 				ПерезаполнитьЦены);
        СтруктураРеквизитовФормы.Вставить("ПересчитатьЦены", 				ПересчитатьЦены);

		СтруктураРеквизитовФормы.Вставить("ИмяФормы", 						"ОбщаяФорма.ФормаВалюта");

		Закрыть(СтруктураРеквизитовФормы);

	КонецЕсли;
	
КонецПроцедуры // КомандаОК()

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаСервере
// Процедура заполняет параметры формы.
//
Процедура ПолучитьЗначенияПараметровФормы()
	
	// Вид цены.
	Если Параметры.Свойство("ВидЦен") Тогда
		
		// Вид цены.
		ВидЦен = Параметры.ВидЦен;
		ВидЦенПриОткрытии = Параметры.ВидЦен;
		ВидЦенЕстьРеквизит = Истина;
		
	Иначе
		
		// Доступность вида цены.
		Элементы.ВидЦен.Видимость = Ложь;
		ВидЦенЕстьРеквизит = Ложь;
		
		Элементы.ВидСкидки.Видимость = Ложь;
		ВидСкидкиЕстьРеквизит = Ложь;
		
	КонецЕсли;
	
	Если Параметры.Свойство("ДоступностьВалютыДокумента") Тогда
		
		Элементы.Валюта.Доступность = Параметры.ДоступностьВалютыДокумента;
		Элементы.ПересчитатьЦены.Видимость = Параметры.ДоступностьВалютыДокумента;
		
	КонецЕсли;
	
	// Вид цены контрагента.
	Если Параметры.Свойство("ВидЦенКонтрагента") Тогда
		
		// Вид цены.
		ВидЦенКонтрагента = Параметры.ВидЦенКонтрагента;
		ВидЦенКонтрагентаПриОткрытии = Параметры.ВидЦенКонтрагента;
		Контрагент = Параметры.Контрагент;
		ВидЦенКонтрагентаЕстьРеквизит = Истина;
		
		МассивЗначений = Новый Массив;
		МассивЗначений.Добавить(Контрагент);
		МассивЗначений = Новый ФиксированныйМассив(МассивЗначений);
		НовыйПараметр = Новый ПараметрВыбора("Отбор.Владелец", МассивЗначений);
		НовыйМассив = Новый Массив();
		НовыйМассив.Добавить(НовыйПараметр);
		НовыеПараметры = Новый ФиксированныйМассив(НовыйМассив);
		Элементы.ВидЦенКонтрагента.ПараметрыВыбора = НовыеПараметры;
		
	Иначе
		
		// Доступность вида цены контрагента.
		Элементы.ВидЦенКонтрагента.Видимость = Ложь;
		ВидЦенКонтрагентаЕстьРеквизит = Ложь;
		
	КонецЕсли;
	
	// РегистрироватьЦеныПоставщика.
	Если Параметры.Свойство("РегистрироватьЦеныПоставщика") Тогда
		
		РегистрироватьЦеныПоставщика = Параметры.РегистрироватьЦеныПоставщика;
		РегистрироватьЦеныПоставщикаПриОткрытии = Параметры.РегистрироватьЦеныПоставщика;
		РегистрироватьЦеныПоставщикаЕстьРеквизит = Истина;
		
	Иначе
		
		// Доступность.
		Элементы.РегистрироватьЦеныПоставщика.Видимость = Ложь;
		РегистрироватьЦеныПоставщикаЕстьРеквизит = Ложь;
		
	КонецЕсли;
	
	// Флаг - перезаполнить цены.
	Если НЕ (ВидЦенЕстьРеквизит ИЛИ ВидЦенКонтрагентаЕстьРеквизит) Тогда
		
		Элементы.ПерезаполнитьЦены.Видимость = Ложь;
		
	КонецЕсли; 
	
	// Скидки.
	Если Параметры.Свойство("ВидСкидки") Тогда
		
		ВидСкидки = Параметры.ВидСкидки;
		ВидСкидкиПриОткрытии = Параметры.ВидСкидки;
		ВидСкидкиЕстьРеквизит = Истина;
		
	Иначе
		
		Элементы.ВидСкидки.Видимость = Ложь;
		ВидСкидкиЕстьРеквизит = Ложь;
		
	КонецЕсли;
	
	// Валюта документа.
	Если Параметры.Свойство("ВалютаДокумента") Тогда
		
		ВалютаДокумента = Параметры.ВалютаДокумента;
		ВалютаДокументаПриОткрытии = Параметры.ВалютаДокумента;
		ВалютаДокументаЕстьРеквизит = Истина;
		
		//Если НЕ Параметры.Свойство("Договор") Тогда
		//	Элементы.ВалютаДокумента.Видимость = Истина;
		//КонецЕсли;
		
		Если Параметры.Свойство("Курс") Тогда
			Курс = Параметры.Курс;
			Кратность = Параметры.Кратность;
		Иначе
			ЗаполнитьКурсКратностьВалютыДокумента();
		КонецЕсли;
		КурсПриОткрытии = Курс;
		КратностьПриОткрытии = Кратность;
		
		НадписьКратность = "(кратность: " + Кратность + ")";
		
		Если Параметры.Свойство("ДатаКурса") Тогда
			Если Параметры.ДатаКурса = '00010101' Тогда
				ДатаКурсаДокумента = Параметры.ДатаДокумента;
			Иначе
				ДатаКурсаДокумента = Параметры.ДатаКурса;
			КонецЕсли;
		Иначе
			ДатаКурсаДокумента = Параметры.ДатаДокумента;
			Элементы.ДатаКурсаДокумента.ТолькоПросмотр = Истина;
		КонецЕсли;
				
	Иначе
		//Элементы.ВалютаДокумента.Видимость = Ложь;
		//Элементы.Курс.Видимость = Ложь;
		//Элементы.Кратность.Видимость = Ложь;
		//Элементы.ПересчитатьЦены.Видимость = Ложь;
		ВалютаДокументаЕстьРеквизит = Ложь;
		
	КонецЕсли;
	
	// Налогообложение НДС.
	Если Параметры.Свойство("НалогообложениеНДС") Тогда
		
		НалогообложениеНДС = Параметры.НалогообложениеНДС;
		НалогообложениеНДСПриОткрытии = Параметры.НалогообложениеНДС;
		НалогообложениеНДСЕстьРеквизит = Истина;
		
	Иначе
		
		Элементы.НалогообложениеНДС.Видимость = Ложь;
		НалогообложениеНДСЕстьРеквизит = Ложь;
		
	КонецЕсли;
	
	// Сумма включает НДС.
	Если Параметры.Свойство("СуммаВключаетНДС") Тогда
		
		СуммаВключаетНДС = Параметры.СуммаВключаетНДС;
		СуммаВключаетНДСПриОткрытии = Параметры.СуммаВключаетНДС;
		СуммаВключаетНДСЕстьРеквизит = Истина;
		
	Иначе
		
		Элементы.СуммаВключаетНДС.Видимость = Ложь;
		СуммаВключаетНДСЕстьРеквизит = Ложь;
		
	КонецЕсли;	
	
	// НДС включать в стоимость.
	Если Параметры.Свойство("НДСВключатьВСтоимость") Тогда
		
		НДСВключатьВСтоимость = Параметры.НДСВключатьВСтоимость;
		НДСВключатьВСтоимостьПриОткрытии = Параметры.НДСВключатьВСтоимость;
		НДСВключатьВСтоимостьЕстьРеквизит = Истина;
		
	Иначе
		
		Элементы.НДСВключатьВСтоимость.Видимость = Ложь;
		НДСВключатьВСтоимостьЕстьРеквизит = Ложь;
		
	КонецЕсли;
		
	// Валюта расчетов.
	Если Параметры.Свойство("ВалютаРасчетов") Тогда
		ВалютаРасчетов = Параметры.ВалютаРасчетов;
		Если Параметры.Свойство("КурсРасчетов") И Параметры.Свойство("КратностьРасчетов") Тогда
			КурсРасчетов 	  = Параметры.КурсРасчетов;
			КратностьРасчетов = Параметры.КратностьРасчетов;
		Иначе
			КурсКратностьРасчетов = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ВалютаРасчетов, Параметры.ДатаДокумента);
			КурсРасчетов 	  = КурсКратностьРасчетов.Курс;
			КратностьРасчетов = КурсКратностьРасчетов.Кратность;
		КонецЕсли;
		
		КурсРасчетовПриОткрытии 	 = КурсРасчетов;
		КратностьРасчетовПриОткрытии = КратностьРасчетов;
		
		ВалютаРасчетовЕстьРеквизит = Истина;
		
	//ИначеЕсли Параметры.Свойство("Договор") Тогда
	//	ВалютаРасчетов	  = Параметры.Договор.ВалютаВзаиморасчетов;
	//	КурсКратностьРасчетов = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ВалютаРасчетов, Параметры.ДатаДокумента);
	//	КурсРасчетов 	  = КурсКратностьРасчетов.Курс;
	//	КратностьРасчетов = КурсКратностьРасчетов.Кратность;
	//	
	//	КурсРасчетовПриОткрытии 	 = КурсРасчетов;
	//	КратностьРасчетовПриОткрытии = КратностьРасчетов;
	//	
	//	Элементы.ВалютаРасчетов.ТолькоПросмотр = Истина;
	//	Элементы.КроссКурс.ТолькоПросмотр = Истина;
	//	ВалютаРасчетовЕстьРеквизит = Истина;
				
	Иначе
		Элементы.ВалютаКурсКратностьРасчетов.Видимость = Ложь;
		Элементы.ГруппаКроссКурс.Видимость = Ложь;
		ВалютаРасчетовЕстьРеквизит = Ложь;
		
	КонецЕсли;
	
	// Кросс-курс
	Если Параметры.Свойство("ВалютаДокумента") И Параметры.Свойство("ВалютаРасчетов") Тогда
		Элементы.ГруппаКроссКурс.Видимость = Истина;
		Если Параметры.Свойство("КроссКурс") Тогда
			КроссКурс = Параметры.КроссКурс;
			Элементы.НадписьВалютыКроссКурса.Заголовок = "" + ВалютаДокумента + " / " + ВалютаРасчетов;
		Иначе
			РассчитатьКроссКурс();
		КонецЕсли;
		КроссКурсПриОткрытии = КроссКурс;
	КонецЕсли;
	
	Если Параметры.Свойство("СуммаВзаиморасчетов") Тогда
		Элементы.ГруппаСуммаВзаиморасчетов.Видимость = Истина;
		СуммаВзаиморасчетов = Параметры.СуммаВзаиморасчетов;
		СуммаВзаиморасчетовПриОткрытии = СуммаВзаиморасчетов;
	КонецЕсли;
		
	ПересчитатьЦены = Параметры.ПересчитатьЦены;
		
	Если Параметры.Свойство("ЗаголовокВалютаДокумента") Тогда
		Элементы.Валюта.Заголовок = Параметры.ЗаголовокВалютаДокумента;
	КонецЕсли;
	
КонецПроцедуры // ПолучитьЗначенияПараметровФормы()

&НаСервере
// Процедура заполняет таблицу курсов валют
//
Процедура ЗаполнитьТаблицуКурсовВалют()
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ДатаДокумента", Параметры.ДатаДокумента);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	КурсыВалютСрезПоследних.Валюта,
	|	КурсыВалютСрезПоследних.Курс,
	|	КурсыВалютСрезПоследних.Кратность
	|ИЗ
	|	РегистрСведений.КурсыВалют.СрезПоследних(&ДатаДокумента, ) КАК КурсыВалютСрезПоследних";
	
	ТаблицаРезультатаЗапроса = Запрос.Выполнить().Выгрузить();
	КурсыВалют.Загрузить(ТаблицаРезультатаЗапроса);
	
КонецПроцедуры // ЗаполнитьТаблицуКурсовВалют()

&НаКлиенте
// Процедура проверяет правильность заполнения реквизитов формы.
//
Процедура ПроверитьЗаполнениеРеквизитовФормы(Отказ)
    	
	// Проверка заполненности реквизитов.
	
	// Вид цен.
	Если ПерезаполнитьЦены И ВидЦенЕстьРеквизит Тогда
		Если НЕ ЗначениеЗаполнено(ВидЦен) Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = НСтр("en='Not selected prices type for fill!';ru='Не выбран вид цены для заполнения!'");
			Сообщение.Поле = "ВидЦен";
			Сообщение.Сообщить();
  			Отказ = Истина;
    	КонецЕсли;
	КонецЕсли;
	
	// Вид цен контрагента.
	Если (ПерезаполнитьЦены ИЛИ РегистрироватьЦеныПоставщика) И ВидЦенКонтрагентаЕстьРеквизит Тогда
		Если НЕ ЗначениеЗаполнено(ВидЦенКонтрагента) Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = НСтр("en='Not the selected price type of counterparty to fill!';ru='Не выбран вид цен контрагента для заполнения!'");
			Сообщение.Поле = "ВидЦенКонтрагента";
			Сообщение.Сообщить();
  			Отказ = Истина;
    	КонецЕсли;
	КонецЕсли;
	
	// Валюта документа.
	Если ВалютаДокументаЕстьРеквизит Тогда
		Если НЕ ЗначениеЗаполнено(ВалютаДокумента) Тогда
            Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = НСтр("en='Not filled currency in document!';ru='Не заполнена валюта документа!'");
			Сообщение.Поле = "ВалютаДокумента";
			Сообщение.Сообщить();
			Отказ = Истина;
   		КонецЕсли;
	КонецЕсли;
	
	// Налогообложение НДС.
	Если НалогообложениеНДСЕстьРеквизит Тогда
		Если НЕ ЗначениеЗаполнено(НалогообложениеНДС) Тогда
            Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = НСтр("en='Not filled out taxation!';ru='Не заполнено налогообложение!'");
			Сообщение.Поле = "НалогообложениеНДС";
			Сообщение.Сообщить();
			Отказ = Истина;
   		КонецЕсли;
	КонецЕсли;
	
	// Расчеты.
	Если ВалютаРасчетовЕстьРеквизит Тогда
		Если НЕ ЗначениеЗаполнено(КурсРасчетов) Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = НСтр("en='Detected zero currency of calculations!';ru='Обнаружен нулевой курс валюты расчетов!'");
			Сообщение.Поле = "КурсРасчетов";
			Сообщение.Сообщить();
			Отказ = Истина;
		КонецЕсли;
		Если НЕ ЗначениеЗаполнено(КратностьРасчетов) Тогда
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = НСтр("en='Zero multiplicity of the currency rate of settlements has been detected!';ru='Обнаружена нулевая кратность курса валюты расчетов!'");
			Сообщение.Поле = "КратностьРасчетов";
			Сообщение.Сообщить();
			Отказ = Истина;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры // ПроверитьЗаполнениеРеквизитовФормы()

&НаКлиенте
// Процедура проверяет модифицированность формы.
//
Процедура ПроверитьМодифицированностьФормы()

	БылиВнесеныИзменения = Ложь;
	
	ИзмененияВидЦен 				= ?(ВидЦенЕстьРеквизит, ВидЦенПриОткрытии <> ВидЦен, Ложь);
	ИзмененияВидЦенКонтрагента 		= ?(ВидЦенКонтрагентаЕстьРеквизит, 
		ВидЦенКонтрагентаПриОткрытии <> ВидЦенКонтрагента, Ложь);
	ИзмененияРегистрироватьЦеныПоставщика = ?(РегистрироватьЦеныПоставщикаЕстьРеквизит, 
		РегистрироватьЦеныПоставщикаПриОткрытии <> РегистрироватьЦеныПоставщика, Ложь);
	ИзмененияВидСкидки 				= ?(ВидСкидкиЕстьРеквизит, ВидСкидкиПриОткрытии <> ВидСкидки, Ложь);
	ИзмененияВалютаДокумента 		= ?(ВалютаДокументаЕстьРеквизит, ВалютаДокументаПриОткрытии <> ВалютаДокумента, Ложь);
	ИзмененияНалогообложениеНДС 	= ?(НалогообложениеНДСЕстьРеквизит, 
		НалогообложениеНДСПриОткрытии <> НалогообложениеНДС, Ложь);
	ИзмененияСуммаВключаетНДС 		= ?(СуммаВключаетНДСЕстьРеквизит, СуммаВключаетНДСПриОткрытии <> СуммаВключаетНДС, Ложь);
	ИзмененияНДСВключатьВСтоимость 	= ?(НДСВключатьВСтоимостьЕстьРеквизит, 
		НДСВключатьВСтоимостьПриОткрытии <> НДСВключатьВСтоимость, Ложь);
    ИзмененияКурсРасчетов 			= ?(ВалютаРасчетовЕстьРеквизит, КурсРасчетовПриОткрытии <> КурсРасчетов, Ложь);
    ИзмененияКратностьРасчетов 		= ?(ВалютаРасчетовЕстьРеквизит, КратностьРасчетовПриОткрытии <> КратностьРасчетов, Ложь);
    
	Если ПерезаполнитьЦены
	 ИЛИ ПересчитатьЦены
	 ИЛИ ИзмененияВалютаДокумента
	 ИЛИ ИзмененияНалогообложениеНДС
     ИЛИ ИзмененияСуммаВключаетНДС
	 ИЛИ ИзмененияНДСВключатьВСтоимость
	 ИЛИ ИзмененияКурсРасчетов
	 ИЛИ ИзмененияКратностьРасчетов
	 ИЛИ ИзмененияВидЦен
	 ИЛИ ИзмененияВидЦенКонтрагента
	 ИЛИ ИзмененияРегистрироватьЦеныПоставщика
	 ИЛИ ИзмененияВидСкидки Тогда	

		БылиВнесеныИзменения = Истина;

	КонецЕсли;
	
КонецПроцедуры // ПроверитьМодифицированностьФормы()

&НаСервере
// Процедура заполнения курса и кратности валюты документа.
//
Процедура ЗаполнитьКурсКратностьВалютыДокумента()
	КурсКратностьДокумента = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ВалютаДокумента, ДатаКурсаДокумента);
	Курс 	  = КурсКратностьДокумента.Курс;
	Кратность = КурсКратностьДокумента.Кратность;
	НадписьКратность = "(кратность: " + Кратность + ")";
	
	Если Курс <> КурсПриОткрытии Тогда
		ПересчитатьЦены = Истина;
	КонецЕсли;
	
	РассчитатьКроссКурс();
	РассчитатьСуммуВзаиморасчетов();
	УстановитьВидимостьКратность();
КонецПроцедуры // ЗаполнитьКурсКратностьВалютыДокумента()

&НаСервере
Процедура ЗаполнитьКурсКратностьВалютыРасчетов()
	КурсКратностьРасчетов = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ВалютаРасчетов, ДатаКурсаДокумента);
	КурсРасчетов 	  = КурсКратностьРасчетов.Курс;
	КратностьРасчетов = КурсКратностьРасчетов.Кратность;
	НадписьКратностьРасчетов = "(кратность: " + КратностьРасчетов + ")";
	
	РассчитатьКроссКурс();
	РассчитатьСуммуВзаиморасчетов();
	УстановитьВидимостьКратность();
КонецПроцедуры // ЗаполнитьКурсКратностьВалютыДокумента()

&НаСервере
// Процедура заполнения курса и кратности валюты документа.
//
Процедура УстановитьВидимостьСуммаВключаетНДС()
	Элементы.СуммаВключаетНДС.Видимость = НалогообложениеНДС;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьИнформациюВалютаУпр()
	Если НЕ уатОбщегоНазначенияТиповые.уатЕстьКонстанта("ВалютаУправленческогоУчета") Тогда
		Возврат;
	КонецЕсли;
	
	ВалютаУпрУчета = Константы.ВалютаУправленческогоУчета.Получить();
	Если ЗначениеЗаполнено(ВалютаУпрУчета) Тогда
		КурсКратностьУпр = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ВалютаУпрУчета, Параметры.ДатаДокумента);
		КурсУпр = КурсКратностьУпр.Курс;
		КратностьУпр = КурсКратностьУпр.Кратность;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьКратность()
	Элементы.НадписьКратностьРасчетов.Видимость = (КратностьРасчетов <> 1);
	Элементы.НадписьКратность.Видимость = (Кратность <> 1);
	Элементы.НадписьКратностьУпр.Видимость = (КратностьУпр <> 1);
КонецПроцедуры

&НаСервере
Процедура РассчитатьКроссКурс()
	Если НЕ Элементы.ГруппаКроссКурс.Видимость Тогда
		Возврат;
	КонецЕсли;
	
	Элементы.НадписьВалютыКроссКурса.Заголовок = "" + ВалютаДокумента + " / " + ВалютаРасчетов;
		
	Если КурсРасчетов = 0 ИЛИ Кратность = 0 Тогда
		КроссКурс = 0;
	Иначе
		КроссКурс = Курс/КурсРасчетов * КратностьРасчетов/Кратность;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура РассчитатьСуммуВзаиморасчетов()
	Если уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД()
		ИЛИ НЕ Элементы.ГруппаСуммаВзаиморасчетов.Видимость Тогда
		Возврат;
	КонецЕсли;
	Если ВалютаРасчетов = ВалютаРасчетовПриОткрытии Тогда
		СуммаВзаиморасчетов = СуммаВзаиморасчетовПриОткрытии;
		Возврат;
	КонецЕсли;
	
	СуммаВзаиморасчетов = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(СуммаВзаиморасчетовПриОткрытии,
		ВалютаРасчетовПриОткрытии,    ВалютаРасчетов,
		КурсРасчетовПриОткрытии,      КурсРасчетов,
		КратностьРасчетовПриОткрытии, КратностьРасчетов);
КонецПроцедуры

#КонецОбласти

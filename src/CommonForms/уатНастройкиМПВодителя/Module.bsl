
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ЗаполнитьВариантыИсточниковМестоположения();
	ЗаполнитьВариантыХраненияИсторииМестоположения();
	УстановитьЗначенияНастроек();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	УстановитьВидимостьИДоступность();
	ОбновитьДанныеРеглЗаданий();

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)

	Оповещение = Новый ОписаниеОповещения("ВыбратьИЗакрыть", ЭтотОбъект);
	ОбщегоНазначенияКлиент.ПоказатьПодтверждениеЗакрытияФормы(Оповещение, Отказ, ЗавершениеРаботы);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИспользоватьПутевыеЛистыПриИзменении(Элемент)
	Если ИспользоватьПутевыеЛисты = Ложь
		И ИспользоватьМаршрутныеЛисты = Ложь
		И ИспользоватьЗаявкиНаРемонт = Ложь
		И ИспользоватьЧат = Ложь Тогда
		ИспользоватьПутевыеЛисты = Истина;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЗаявкиНаРемонтПриИзменении(Элемент)
	Если ИспользоватьПутевыеЛисты = Ложь
		И ИспользоватьМаршрутныеЛисты = Ложь
		И ИспользоватьЗаявкиНаРемонт = Ложь
		И ИспользоватьЧат = Ложь Тогда
		ИспользоватьЗаявкиНаРемонт = Истина;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьЧатПриИзменении(Элемент)
	Если ИспользоватьПутевыеЛисты = Ложь
		И ИспользоватьМаршрутныеЛисты = Ложь
		И ИспользоватьЗаявкиНаРемонт = Ложь
		И ИспользоватьЧат = Ложь Тогда
		ИспользоватьЧат = Истина;
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ИспользоватьМаршрутныеЛистыПриИзменении(Элемент)
	Если ИспользоватьПутевыеЛисты = Ложь
		И ИспользоватьМаршрутныеЛисты = Ложь
		И ИспользоватьЗаявкиНаРемонт = Ложь
		И ИспользоватьЧат = Ложь Тогда
		ИспользоватьМаршрутныеЛисты = Истина;
	КонецЕсли;
	УстановитьВидимостьИДоступность();
КонецПроцедуры

&НаКлиенте
Процедура РежимХраненияИсторииМестоположенияПриИзменении(Элемент)
	
	Если НЕ РежимХраненияИсторииМестоположения = 1 Тогда 
		АдресСервераБазыМестоположения       = "";
		ИмяБазыМестоположения                = "";
		ЛогинПользователяБазыМестоположения  = "";
		ПарольПользователяБазыМестоположения = "";
	КонецЕсли;
	
	УстановитьВидимостьИДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура ЛогинСервераМПАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДанныеВыбора = ПолучитьПользователейИБ(Текст);
	
КонецПроцедуры

&НаКлиенте
Процедура АвтоматическоеОпределениеПрибытияВПунктПриИзменении(Элемент)
	
	УстановитьВидимостьИДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаИспользованиеРадиусаПриИзменении(Элемент)
	УстановитьВидимостьИДоступность();
КонецПроцедуры

&НаКлиенте
Процедура ЗапретПосещенияПунктовВнеРадиусаПриИзменении(Элемент)
	УстановитьВидимостьИДоступность();
КонецПроцедуры

&НаКлиенте
Процедура ГруппаДиспетчеровДляИнформированияОСрокеДействияЛицензийПриИзменении(Элемент)
	ГруппаДиспетчеровДляИнформированияОСрокеДействияЛицензийИзменена = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Записать(Команда)
	
	Если Не НастройкиЗаполнены() Тогда 
		Возврат;
	КонецЕсли;
	
	ЗаписатьНастройки();
	ЗаписатьНастройкиСервер();
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьИЗакрыть(Команда)
	
	Если Не НастройкиЗаполнены() Тогда 
		Возврат;
	КонецЕсли;
	
	ЗаписатьНастройки();
	
	Модифицированность = Ложь;
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверитьПодключениеСерверМП(Команда)
	
	ТекстСтатуса = "";
	ПроверитьПодключениеСерверМПСервер(АдресСервераМП, ПортСервераМП, ЛогинСервераМП, ПарольСервераМП, ТекстСтатуса);
	
	ПоказатьПредупреждение(,ТекстСтатуса);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокПользователейМП(Команда)
	
	стрПараметрыПодключения = Новый Структура();
	стрПараметрыПодключения.Вставить("АдресСервераМП",  АдресСервераМП);
	стрПараметрыПодключения.Вставить("ПортСервераМП",   ПортСервераМП);
	стрПараметрыПодключения.Вставить("ЛогинСервераМП",  ЛогинСервераМП);
	стрПараметрыПодключения.Вставить("ПарольСервераМП", ПарольСервераМП);
	
	ТекстОшибки = "";
	стрДанныеОтвета = Неопределено;
	Если уатМобильноеПриложениеВодителяСервер.ВыполнитьМетодСервераМП(стрПараметрыПодключения, "updateUsers",, стрДанныеОтвета, ТекстОшибки) Тогда 
		Если стрДанныеОтвета.Свойство("resultCode") И стрДанныеОтвета.resultCode = "0" Тогда 
			ПоказатьПредупреждение(, НСтр("en='List of users updated successfully.';ru='Список пользователей обновлен успешно.'"));
		ИначеЕсли стрДанныеОтвета.Свойство("resultDescription") Тогда
			ПоказатьПредупреждение(, НСтр("en='When updating the user list the error occurred."
"Description of the error:';ru='При обновлении списка пользователей возникла ошибка."
"Описание ошибки:'") + " " + стрДанныеОтвета.resultDescription);
		Иначе 
			ПоказатьПредупреждение(, НСтр("en='When updating the user list the error occurred.';ru='При обновлении списка пользователей возникла ошибка.'"));
		КонецЕсли;
	Иначе 
		ПоказатьПредупреждение(, ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОсвободитьЛицензииМП(Команда)
	
	стрПараметрыПодключения = Новый Структура();
	стрПараметрыПодключения.Вставить("АдресСервераМП",  АдресСервераМП);
	стрПараметрыПодключения.Вставить("ПортСервераМП",   ПортСервераМП);
	стрПараметрыПодключения.Вставить("ЛогинСервераМП",  ЛогинСервераМП);
	стрПараметрыПодключения.Вставить("ПарольСервераМП", ПарольСервераМП);
	
	ТекстОшибки = "";
	стрДанныеОтвета = Неопределено;
	Если уатМобильноеПриложениеВодителяСервер.ВыполнитьМетодСервераМП(стрПараметрыПодключения, "resetLicences",, стрДанныеОтвета, ТекстОшибки) Тогда 
		Если стрДанныеОтвета.Свойство("resultCode") И стрДанныеОтвета.resultCode = "0" Тогда 
			ПоказатьПредупреждение(, НСтр("en='Licenses released successfully.';ru='Лицензии освобождены успешно.'"));
		ИначеЕсли стрДанныеОтвета.Свойство("resultDescription") Тогда
			ПоказатьПредупреждение(, НСтр("en='Error occurred when releasing licenses."
"Description of error:';ru='При освобождении лицензий возникла ошибка."
"Описание ошибки:'") + " " + стрДанныеОтвета.resultDescription);
		Иначе 
			ПоказатьПредупреждение(, НСтр("en='While release of licenses error occured.';ru='При освобождении лицензий возникла ошибка.'"));
		КонецЕсли;
	Иначе 
		ПоказатьПредупреждение(, ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьНастройкиСервераМП(Команда)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("АдресСервераМП",  АдресСервераМП);
	ПараметрыФормы.Вставить("ПортСервераМП",   ПортСервераМП);
	ПараметрыФормы.Вставить("ЛогинСервераМП",  ЛогинСервераМП);
	ПараметрыФормы.Вставить("ПарольСервераМП", ПарольСервераМП);
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ИзменитьНастройкиСервераМППослеЗакрытияФормы", ЭтотОбъект);
	
	ОткрытьФорму("ОбщаяФорма.уатНастройкиСервераМПВодителя", ПараметрыФормы, ЭтотОбъект,,,, ОповещениеОЗакрытии); 
	
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаПодключенияКБД(Команда)
	
	ТекстОшибки = ПроверкаПодключенияКБДСервер();
	Если ТекстОшибки = "" Тогда 
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("en='Connection is successful.';ru='Подключение выполнено успешно.'"));
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СозданиеТаблицы(Команда)
	
	РезультатПроверкиПодключения = ПроверкаПодключенияКБДСервер();
	Результат = НСтр("en='Connection to the database was successful. The table ""GPSData"" was not found in the database. To create it, use the ""Create Table"" button.';ru='Соединение с базой прошло успешно. В базе не найдена таблица ""GPSData"". Для её создания воспользуейтесь кнопкой ""Создать таблицу"".'");
	Если РезультатПроверкиПодключения = Результат Тогда
		ТекстОшибки = СозданиеТаблицыСервер();
		Если ТекстОшибки = "" Тогда
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("en='Table is created successfully.';ru='Таблица создана успешно.'"));
		Иначе
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		КонецЕсли;
	ИначеЕсли РезультатПроверкиПодключения = "" Тогда
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(НСтр("en='Table has already been created earlier.';ru='Таблица уже была создана ранее.'"));
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(РезультатПроверкиПодключения);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРегламентноеЗадание(Команда)

	ТекущаяСтраница = Элементы.Страницы.ТекущаяСтраница;
	Если ТекущаяСтраница = Элементы.СтраницаСлужебныеНастройки Тогда
		ИдентификаторРеглЗадания = ОбновлениеПользователейМобильногоПриложения;
	Иначе 
		ИдентификаторРеглЗадания = ИнформированиеОСрокеДействияЛицензий;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Идентификатор", ИдентификаторРеглЗадания);
	ПараметрыФормы.Вставить("Действие",      "Изменить");
	
	ОткрытьФорму("Обработка.РегламентныеИФоновыеЗадания.Форма.РегламентноеЗадание", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатусРегламентногоЗадания(Команда)
	
	ОбновитьДанныеРеглЗаданий();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьРегламентноеЗадание(Команда)
	
	Если Модифицированность Тогда 
		ТекстНСТР = НСтр("ru='Необходимо записать изменения.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	ТекущаяСтраница = Элементы.Страницы.ТекущаяСтраница;
	Если ТекущаяСтраница = Элементы.СтраницаСлужебныеНастройки Тогда
		РеглЗадание             = ОбновлениеПользователейМобильногоПриложения;
		РеглЗаданиеНаименование = Нстр("ru = 'Обновление пользователей Мобильного приложения'");
	Иначе
		РеглЗадание             = ИнформированиеОСрокеДействияЛицензий;
		РеглЗаданиеНаименование = Нстр("ru = 'Контроль срока действия лицензий мобильного приложения'");
	КонецЕсли;

	ВыполнитьРегламентноеЗаданиеВручную(РеглЗадание, РеглЗаданиеНаименование);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ВыбратьИЗакрыть(Результат = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	ЗаписатьНастройки();
	Модифицированность = Ложь;
	Закрыть();
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВариантыИсточниковМестоположения()
	
	Элементы.positionSources.СписокВыбора.Добавить("gps", НСтр("en='Sensor data monitoring system';ru='Данные датчиков системы мониторинга'"));
	Элементы.positionSources.СписокВыбора.Добавить("all", НСтр("en='All possible sources';ru='Все возможные источники'"));
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВариантыХраненияИсторииМестоположения()
	
	Элементы.РежимХраненияИсторииМестоположения.СписокВыбора.Добавить(0, НСтр("en='not save';ru='не сохранять'"));
	Элементы.РежимХраненияИсторииМестоположения.СписокВыбора.Добавить(1, НСтр("en='in an external database';ru='во внешней базе данных'"));
	Элементы.РежимХраненияИсторииМестоположения.СписокВыбора.Добавить(2, НСтр("en='in the database';ru='в информационной базе'"));

КонецПроцедуры

&НаСервере
Процедура УстановитьЗначенияНастроек()
	
	стрНастроек = уатМобильноеПриложениеВодителяСерверПовтИсп.ПолучитьНастройкиМобильногоПриложения();
	
	ИспользоватьПутевыеЛисты    = стрНастроек.useWaybills;
	ИспользоватьМаршрутныеЛисты = стрНастроек.useRouteLists;
	ИспользоватьЗаявкиНаРемонт  = стрНастроек.useOrdersForRepair;
	ИспользоватьЧат             = стрНастроек.useChat;

	gpsDataDensity              = стрНастроек.gpsDataDensity;
	gpsDataSendInterval         = стрНастроек.gpsDataSendInterval;
	logging                     = стрНастроек.logging;
	messagesCheckInterval       = стрНастроек.messagesCheckInterval;
	positionSources             = стрНастроек.positionSources;
	routeListsCheckInterval     = стрНастроек.routeListsCheckInterval;
	useBackgroundProcess        = стрНастроек.useBackgroundProcess;
	ОценкаУровняСервиса         = стрНастроек.useMarksAndSignatures;

	SearchRadiusType = стрНастроек.SearchRadiusType;
	Если SearchRadiusType = 1 Тогда
		НастройкаИспользованиеРадиуса = "Радиус из пунктов";
	Иначе
		НастройкаИспользованиеРадиуса = "Единый радиус";
	КонецЕсли;

	НастройкаAutomaticDetectionOfArrival = стрНастроек.AutomaticDetectionOfArrival;
	Если НастройкаAutomaticDetectionOfArrival = 1 Тогда
		AutomaticDetectionOfArrival = 1;
	ИначеЕсли НастройкаAutomaticDetectionOfArrival = 2 Тогда
		AutomaticDetectionOfArrival = 2;
	Иначе
		AutomaticDetectionOfArrival   = 2;
		НастройкаИспользованиеРадиуса = "Радиус из пунктов";
	КонецЕсли;

	ЗапретНарушенияПорядкаПунктов     = стрНастроек.ControlItemsOrder;
	ЗапретЗапускаБезОтправкиГеоданных = стрНастроек.ControlGeodata;
	ЗапретПосещенияПунктовВнеРадиуса  = стрНастроек.ControlRadius;

	SearchRadius                  = стрНастроек.SearchRadius;
		
	АдресСервераМП  = стрНастроек.АдресСервераМП;
	ПортСервераМП   = стрНастроек.ПортСервераМП;
	ЛогинСервераМП  = стрНастроек.ЛогинСервераМП;
	ПарольСервераМП = стрНастроек.ПарольСервераМП;
	
	ГруппаДиспетчеровДляИнформированияОСрокеДействияЛицензий = стрНастроек.ГруппаДиспетчеровДляИнформированияОСрокеДействияЛицензий;
	
	ОграничениеЧислаМЛДнейВперед = стрНастроек.ОграничениеЧислаМЛДнейВперед;
	ОграничениеЧислаМЛДнейНазад  = стрНастроек.ОграничениеЧислаМЛДнейНазад;
	
	СоздаватьАктОтгрузкиВРейсПриПогрузке = стрНастроек.СоздаватьАктОтгрузкиВРейсПриПогрузке;
	СоздаватьАктПриемкиИзРейсаПриРазгрузке = стрНастроек.СоздаватьАктПриемкиИзРейсаПриРазгрузке;
	
	стрПараметров = уатМобильноеПриложениеВодителяСерверПовтИсп.ПолучитьПараметрыДляМобильногоПриложения();
	
	appVer          = стрПараметров.appVer;
	appLink         = стрПараметров.appLink;
	protocolVersion = стрНастроек.protocolVersion;

	уатВестиЛогWSМПВУАТ = уатМобильноеПриложениеВодителяСерверПовтИсп.ВестиЛогWSМПВУАТ();
	
	стрНастройкиХраненияИсторииМестоположения = уатМобильноеПриложениеВодителяСерверПовтИсп.ПолучитьНастройкиХраненияИсторииМестоположения();
	
	РежимХраненияИсторииМестоположения   = стрНастройкиХраненияИсторииМестоположения.РежимСохранения;
	АдресСервераБазыМестоположения       = стрНастройкиХраненияИсторииМестоположения.АдресСервера;
	ИмяБазыМестоположения                = стрНастройкиХраненияИсторииМестоположения.ИмяБазы;
	ЛогинПользователяБазыМестоположения  = стрНастройкиХраненияИсторииМестоположения.Логин;
	ПарольПользователяБазыМестоположения = стрНастройкиХраненияИсторииМестоположения.Пароль;
	
	уатИнтервалНеактивностиДляСнятияСЛинии = Константы.уатИнтервалНеактивностиДляСнятияСЛинии.Получить();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьНастройки()
	
	стрНастройки = Новый Структура();
	
	стрНастройки.Вставить("useRouteLists",           ИспользоватьМаршрутныеЛисты);
	стрНастройки.Вставить("useWaybills",             ИспользоватьПутевыеЛисты);
	стрНастройки.Вставить("useOrdersForRepair",      ИспользоватьЗаявкиНаРемонт);
	стрНастройки.Вставить("useChat",                 ИспользоватьЧат);
	
	стрНастройки.Вставить("gpsDataSendInterval",     gpsDataSendInterval);
	стрНастройки.Вставить("gpsDataDensity",          gpsDataDensity);
	стрНастройки.Вставить("positionSources",         positionSources);
	стрНастройки.Вставить("routeListsCheckInterval", routeListsCheckInterval);
	стрНастройки.Вставить("messagesCheckInterval",   messagesCheckInterval);
	стрНастройки.Вставить("logging",                 logging);
	стрНастройки.Вставить("useBackgroundProcess",    useBackgroundProcess);
	стрНастройки.Вставить("useMarksAndSignatures",   ОценкаУровняСервиса);
	
	стрНастройки.Вставить("AutomaticDetectionOfArrival",  AutomaticDetectionOfArrival);
	
	Если НастройкаИспользованиеРадиуса = "Радиус из пунктов" Тогда
		SearchRadiusType = 1;
	Иначе
		SearchRadiusType = 2;
	КонецЕсли;

	стрНастройки.Вставить("SearchRadiusType",             SearchRadiusType);
	стрНастройки.Вставить("SearchRadius",                 SearchRadius);
	стрНастройки.Вставить("ControlItemsOrder",            ЗапретНарушенияПорядкаПунктов);
	стрНастройки.Вставить("ControlGeodata",               ЗапретЗапускаБезОтправкиГеоданных);
	стрНастройки.Вставить("ControlRadius",                ЗапретПосещенияПунктовВнеРадиуса);
	
	стрНастройки.Вставить("ОграничениеЧислаМЛДнейНазад",  ОграничениеЧислаМЛДнейНазад);
	стрНастройки.Вставить("ОграничениеЧислаМЛДнейВперед", ОграничениеЧислаМЛДнейВперед);

	стрНастройки.Вставить("СоздаватьАктОтгрузкиВРейсПриПогрузке", СоздаватьАктОтгрузкиВРейсПриПогрузке);
	стрНастройки.Вставить("СоздаватьАктПриемкиИзРейсаПриРазгрузке", СоздаватьАктПриемкиИзРейсаПриРазгрузке);
	
	стрНастройки.Вставить("АдресСервераМП",  АдресСервераМП);
	стрНастройки.Вставить("ПортСервераМП",   ПортСервераМП);
	стрНастройки.Вставить("ЛогинСервераМП",  ЛогинСервераМП);
	стрНастройки.Вставить("ПарольСервераМП", ПарольСервераМП);
	стрНастройки.Вставить("ГруппаДиспетчеровДляИнформированияОСрокеДействияЛицензий",
		ГруппаДиспетчеровДляИнформированияОСрокеДействияЛицензий);
		
	стрПараметры = Новый Структура();
	
	стрПараметры.Вставить("appVer",  СокрЛП(appVer));
	стрПараметры.Вставить("appLink", СокрЛП(appLink));
	
	стрНастройкиХраненияИсторииМестоположения = Новый Структура();
	
	стрНастройкиХраненияИсторииМестоположения.Вставить("РежимСохранения", РежимХраненияИсторииМестоположения);
	стрНастройкиХраненияИсторииМестоположения.Вставить("АдресСервера",    АдресСервераБазыМестоположения);
	стрНастройкиХраненияИсторииМестоположения.Вставить("ИмяБазы",         ИмяБазыМестоположения);
	стрНастройкиХраненияИсторииМестоположения.Вставить("Логин",           ЛогинПользователяБазыМестоположения);
	стрНастройкиХраненияИсторииМестоположения.Вставить("Пароль",          ПарольПользователяБазыМестоположения);
	
	уатМобильноеПриложениеВодителяСервер.СохранитьНастройкиМобильногоПриложения(стрНастройки, стрПараметры, уатВестиЛогWSМПВУАТ, стрНастройкиХраненияИсторииМестоположения, уатИнтервалНеактивностиДляСнятияСЛинии);
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьНастройкиСервер()
		
	Если ГруппаДиспетчеровДляИнформированияОСрокеДействияЛицензийИзменена Тогда
		Если НЕ Обсуждения.СистемаВзаимодействийПодключена() Тогда
			ТекстОшибки = НСтр("ru='Система взаимодействия отключена.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,"ГруппаДиспетчеровДляИнформированияОСрокеДействияЛицензий");
		КонецЕсли;
		Если ГруппаДиспетчеровДляИнформированияОСрокеДействияЛицензий.Диспетчеры.Количество() = 0 Тогда
			ТекстОшибки = НСтр("ru='В группе диспетчеров для информирования о сроке действия лицензий нет получателей.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,"ГруппаДиспетчеровДляИнформированияОСрокеДействияЛицензий");
		КонецЕсли;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ГруппаДиспетчеровДляИнформированияОСрокеДействияЛицензий) Тогда
		Попытка
			РеглЗадание_ЗагрузкаДанных = РегламентныеЗаданияСервер.Задание(Метаданные.РегламентныеЗадания.уатКонтрольСрокаДействияЛицензийМобильногоПриложения);
			РеглЗадание_ЗагрузкаДанных.ИмяПользователя = ЛогинСервераМП;
			РеглЗадание_ЗагрузкаДанных.Записать();
		Исключение
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция НастройкиЗаполнены()
	
	ЕстьОшибки = Ложь;
	
	Если РежимХраненияИсторииМестоположения = 1 Тогда 
		Если Не ЗначениеЗаполнено(АдресСервераБазыМестоположения) Тогда 
			ТекстОшибки = НСтр("en='It is necessary to fill in server address.';ru='Необходимо заполнить адрес сервера.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,"АдресСервераБазыМестоположения",,ЕстьОшибки);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ИмяБазыМестоположения) Тогда 
			ТекстОшибки = НСтр("en='It is necessary to fill database name on server.';ru='Необходимо заполнить имя базы данных на сервере.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,"ИмяБазыМестоположения",,ЕстьОшибки);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ЛогинПользователяБазыМестоположения) Тогда 
			ТекстОшибки = НСтр("en='It is necessary to fill user login.';ru='Необходимо заполнить логин пользователя.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,"ЛогинПользователяБазыМестоположения",,ЕстьОшибки);
		КонецЕсли;
		Если Не ЗначениеЗаполнено(ПарольПользователяБазыМестоположения) Тогда 
			ТекстОшибки = НСтр("en=""It is necessary to fill user's password."";ru='Необходимо заполнить пароль пользователя.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,"ПарольПользователяБазыМестоположения",,ЕстьОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Не ЕстьОшибки;
	
КонецФункции

&НаСервере
Функция ПроверкаСуществованияБД(Command)
	
	Command.CommandText = "SELECT name FROM sys.databases WHERE name LIKE '" + ИмяБазыМестоположения + "'";
	Попытка
		Recordset = Command.Execute();
	Исключение
		ТекстОшибки = НСтр("en='System error occurred:';ru='Произошла системная ошибка:'") + Символы.ПС;
		ТекстОшибки = ТекстОшибки + ОписаниеОшибки();
		Возврат ТекстОшибки;
	КонецПопытки;
	
	Если Recordset.BOF И Recordset.EOF Тогда
		ТекстОшибки = СтрШаблон(НСтр("en='Failed to find database with name ""%1"". Check the name of the database.';ru='Не удалось найти БД с именем ""%1"". Проверьте правильность имени БД.'") ,ИмяБазыМестоположения);
		Возврат ТекстОшибки;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

&НаСервере
Функция ПроверкаСуществованияТаблицы(Command)
	
	Command.CommandText = "SELECT table_name FROM " + ИмяБазыМестоположения + ".INFORMATION_SCHEMA.TABLES WHERE table_name LIKE 'GPSData'";
	Попытка
		Recordset = Command.Execute();
	Исключение
		ТекстОшибки = НСтр("en='System error occurred:';ru='Произошла системная ошибка:'") + Символы.ПС;
		ТекстОшибки = ТекстОшибки + ОписаниеОшибки();
		Возврат ТекстОшибки
	КонецПопытки;
	
	Если Recordset.BOF И Recordset.EOF Тогда
		ТекстОшибки = НСтр("en='Could not find table ""GPSData""!';ru='Не удалось найти таблицу ""GPSData""!'");
		Возврат ТекстОшибки;
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

&НаСервере
Функция ПроверкаПодключенияКБДСервер()
	
	Connection = Новый COMОбъект("ADODB.Connection");
	Connection.ConnectionString = "Provider=SQLOLEDB.1;Password=" + ПарольПользователяБазыМестоположения 
		+ ";Persist Security Info=True;User ID=" + ЛогинПользователяБазыМестоположения + ";Data Source=" 
		+ АдресСервераБазыМестоположения;
	Попытка
		Connection.Open();
	Исключение
		ТекстОшибки = НСтр("en='System error occurred:';ru='Произошла системная ошибка:'") + Символы.ПС;
		ТекстОшибки = ТекстОшибки + ОписаниеОшибки();
		Возврат ТекстОшибки;
	КонецПопытки;
	
	Command = Новый COMОбъект("ADODB.Command");
	Command.ActiveConnection = Connection;
	Command.CommandType = 1;
	Command.CommandTimeout = 0;
	
	ТекстОшибки = ПроверкаСуществованияБД(Command);
	Если Не ТекстОшибки = "" Тогда
		Connection.Close();
		Возврат ТекстОшибки;
	КонецЕсли;
	
	ТекстОшибки = ПроверкаСуществованияТаблицы(Command);
	Если Не ТекстОшибки = "" Тогда
		Connection.Close();
		ТекстОшибки = НСтр("en='Connection to the database was successful. The table ""GPSData"" was not found in the database. To create it, use the ""Create Table"" button.';ru='Соединение с базой прошло успешно. В базе не найдена таблица ""GPSData"". Для её создания воспользуейтесь кнопкой ""Создать таблицу"".'");
		Возврат ТекстОшибки;
	КонецЕсли;
	
	Connection.Close();
	
	Возврат "";
	
КонецФункции

&НаСервере
Функция СозданиеТаблицыСервер()
	
	Connection = Новый COMОбъект("ADODB.Connection");
	Connection.ConnectionString = "Provider=SQLOLEDB.1;Password=" + ПарольПользователяБазыМестоположения 
		+ ";Persist Security Info=True;User ID=" + ЛогинПользователяБазыМестоположения + ";Data Source=" 
		+ АдресСервераБазыМестоположения;
	Попытка
		Connection.Open();
	Исключение
		ТекстОшибки = НСтр("en='System error occurred:';ru='Произошла системная ошибка:'") + Символы.ПС;
		ТекстОшибки = ТекстОшибки + ОписаниеОшибки();
		Возврат ТекстОшибки;
	КонецПопытки;
	
	Command = Новый COMОбъект("ADODB.Command");
	Command.ActiveConnection = Connection;
	Command.CommandType = 1;
	Command.CommandTimeout = 0;
	
	Command.CommandText = "CREATE TABLE " + ИмяБазыМестоположения + ".dbo.GPSData (DateTimeCoord datetime, Car nvarchar(100), Lat float, Lon float, Alt float, Speed float, Direction float)";
	Попытка
		Recordset = Command.Execute();
	Исключение
		Connection.Close();
		ТекстОшибки = НСтр("en='System error occurred:';ru='Произошла системная ошибка:'") + Символы.ПС;
		ТекстОшибки = ТекстОшибки + ОписаниеОшибки();
		Возврат ТекстОшибки
	КонецПопытки;
	
	Connection.Close();
	
	Возврат "";
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьПользователейИБ(СтрокаПоиска)
	
	СписокПользователей = Новый СписокЗначений();
	
	Для Каждого ТекПользователь Из ПользователиИнформационнойБазы.ПолучитьПользователей() Цикл 
		Если ЗначениеЗаполнено(СтрокаПоиска) Тогда 
			врПозицияОтсечения = СтрДлина(СтрокаПоиска);
			Если Не НРег(Лев(ТекПользователь.Имя, врПозицияОтсечения)) = НРег(СтрокаПоиска) Тогда
				Продолжить;
			КонецЕсли;
			тПредставление = Новый ФорматированнаяСтрока(
				Новый ФорматированнаяСтрока(Лев(ТекПользователь.Имя, врПозицияОтсечения),, ЦветаСтиля.уатЦветТекстаПриАвтоподборе), 
				Новый ФорматированнаяСтрока(Прав(ТекПользователь.Имя, СтрДлина(ТекПользователь.Имя)-врПозицияОтсечения)));
			СписокПользователей.Добавить(ТекПользователь.Имя, тПредставление);
		Иначе 
			СписокПользователей.Добавить(ТекПользователь.Имя, ТекПользователь.Имя);
		КонецЕсли;
	КонецЦикла;
	
	Возврат СписокПользователей;
	
КонецФункции // ПолучитьПользователейИБ()

&НаКлиенте
Процедура ИзменитьНастройкиСервераМППослеЗакрытияФормы(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	РезультатЗакрытия.Свойство("workingPort",  ПортСервераМП);
	РезультатЗакрытия.Свойство("SOAPlogin",    ЛогинСервераМП);
	РезультатЗакрытия.Свойство("SOAPpassword", ПарольСервераМП);
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиВидовКИ(Команда)
	ОткрытьФорму("ОбщаяФорма.уатНастройкиВидовКонтактнойИнформации");
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеРеглЗаданий()
	
	Попытка
		ОбновитьДанныеРеглЗаданийСервер();
	Исключение
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьИДоступность()
	
	Элементы.ГруппаМаршрутныеЛисты.Видимость = ИспользоватьМаршрутныеЛисты;
	Элементы.ГруппаРежимХраненияИсторииМестоположения.Видимость = РежимХраненияИсторииМестоположения = 1;
	Элементы.НастройкаИспользованиеРадиуса.Доступность = ЗапретПосещенияПунктовВнеРадиуса ИЛИ AutomaticDetectionOfArrival = 2;
	Элементы.ГруппаSearchRadius.Доступность = НастройкаИспользованиеРадиуса = "Единый радиус";

КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеРеглЗаданийСервер()
	
	ОбновитьПользователейМобильногоПриложения    = Ложь;
	ОбновитьИнформированиеОСрокеДействияЛицензий = Ложь;
	
	ТипФоновоеЗадание		 = Тип("ФоновоеЗадание");
	ТипИнформацияОбОшибке	 = Тип("ИнформацияОбОшибке");

	ТекущаяСтраница = Элементы.Страницы.ТекущаяСтраница;
	Если ТекущаяСтраница = Элементы.СтраницаСлужебныеНастройки Тогда
		ОбновитьПользователейМобильногоПриложения = Истина;
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаСервер Тогда
		ОбновитьИнформированиеОСрокеДействияЛицензий = Истина;
	Иначе
		ОбновитьПользователейМобильногоПриложения    = Истина;
		ОбновитьИнформированиеОСрокеДействияЛицензий = Истина;
	КонецЕсли;
	
	Если ОбновитьПользователейМобильногоПриложения Тогда
		РеглЗадание_ЗагрузкаДанных = РегламентныеЗаданияСервер.Задание(Метаданные.РегламентныеЗадания.уатОбновлениеПользователейМобильногоПриложения);
		ОбновлениеПользователейМобильногоПриложения  = РеглЗадание_ЗагрузкаДанных.УникальныйИдентификатор;
		
		Подсказка =  НСтр("ru='Никогда не выполнялось';en='Never execute'");
		Если РеглЗадание_ЗагрузкаДанных = Неопределено Тогда
			ПредставлениеРасписания = НСтр("ru='Регламентное задание не найдено';en='Scheduled job is not found'");
			РегламентноеЗадание_Использование = Ложь;
		Иначе
			ПоследнееФоновоеЗадание = РегламентныеЗаданияСлужебный.СвойстваФоновыхЗаданий(Новый Структура("ПолучитьПоследнееФоновоеЗаданиеРегламентногоЗадания,
			|ИдентификаторРегламентногоЗадания", Истина, ОбновлениеПользователейМобильногоПриложения));
			Подсказка = ?(РеглЗадание_ЗагрузкаДанных.Использование, 
			НСтр("ru='Используется';en='Used'"), НСтр("ru='Не используется';en='Not used'"));
			Если ПоследнееФоновоеЗадание.Количество() > 0 Тогда
				Подсказка = Подсказка + ", " + Строка(ПоследнееФоновоеЗадание[0].Состояние)
				+ " " + Строка(?(Значениезаполнено(ПоследнееФоновоеЗадание[0].Конец), ПоследнееФоновоеЗадание[0].Конец, ""));
			КонецЕсли;
		КонецЕсли;
		
		Если Подсказка <> Элементы.НастроитьРегламентноеЗадание_Статус.Заголовок Тогда
			Элементы.НастроитьРегламентноеЗадание_Статус.Заголовок = Подсказка;
		КонецЕсли;
		
	КонецЕсли;

	Если ОбновитьИнформированиеОСрокеДействияЛицензий Тогда
		РеглЗадание_ЗагрузкаДанных = РегламентныеЗаданияСервер.Задание(Метаданные.РегламентныеЗадания.уатКонтрольСрокаДействияЛицензийМобильногоПриложения);
		ИнформированиеОСрокеДействияЛицензий  = РеглЗадание_ЗагрузкаДанных.УникальныйИдентификатор;
		
		Подсказка =  НСтр("ru='Никогда не выполнялось';en='Never execute'");
		Если РеглЗадание_ЗагрузкаДанных = Неопределено Тогда
			ПредставлениеРасписания = НСтр("ru='Регламентное задание не найдено';en='Scheduled job is not found'");
			РегламентноеЗадание_Использование = Ложь;
		Иначе
			ПоследнееФоновоеЗадание = РегламентныеЗаданияСлужебный.СвойстваФоновыхЗаданий(Новый Структура("ПолучитьПоследнееФоновоеЗаданиеРегламентногоЗадания,
			|ИдентификаторРегламентногоЗадания", Истина, ИнформированиеОСрокеДействияЛицензий));
			Подсказка = ?(РеглЗадание_ЗагрузкаДанных.Использование, 
			НСтр("ru='Используется';en='Used'"), НСтр("ru='Не используется';en='Not used'"));
			Если ПоследнееФоновоеЗадание.Количество() > 0 Тогда
				Подсказка = Подсказка + ", " + Строка(ПоследнееФоновоеЗадание[0].Состояние)
				+ " " + Строка(?(Значениезаполнено(ПоследнееФоновоеЗадание[0].Конец), ПоследнееФоновоеЗадание[0].Конец, ""));
			КонецЕсли;
		КонецЕсли;
		
		Если Подсказка <> Элементы.ИнформированиеОСрокеДействияЛицензий_НастроитьРегламентноеЗадание_Статус.Заголовок Тогда
			Элементы.ИнформированиеОСрокеДействияЛицензий_НастроитьРегламентноеЗадание_Статус.Заголовок = Подсказка;
		КонецЕсли;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьРегламентноеЗаданиеВручную(РеглЗадание, РеглЗаданиеНаименование)
	МассивСообщенийОбОшибках = Новый Массив;
	
	ПараметрыВыполнения = ВыполнитьРегламентноеЗаданиеВручнуюНаСервере(РеглЗадание);
	Если ПараметрыВыполнения.ЗапускВыполнен Тогда
		
		ПоказатьОповещениеПользователя(
		НСтр("ru='Запущена процедура регламентного задания';en='Scheduled job is launched'"), ,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("en = '%1.
                                                                      |The procedure is run in background job%2'; ru = '%1.
                                                                      |Процедура запущена в фоновом задании %2'"),
		РеглЗаданиеНаименование,
		Строка(ПараметрыВыполнения.МоментЗапуска)),
		БиблиотекаКартинок.ВыполнитьРегламентноеЗаданиеВручную);
		
		ИдентификаторыФоновыхЗаданийПриРучномВыполнении.Добавить(
		ПараметрыВыполнения.ИдентификаторФоновогоЗадания,
		РеглЗаданиеНаименование);
		
		ПодключитьОбработчикОжидания(
		"СообщитьОбОкончанииРучногоВыполненияРегламентногоЗадания", 0.1, Истина);
	ИначеЕсли ПараметрыВыполнения.ПроцедураУжеВыполняется Тогда
		МассивСообщенийОбОшибках.Добавить(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("en = 'Procedure of scheduled job ""%1"" is
              |already executed in background job ""%2"" started %3.'; ru = 'Процедура регламентного задания ""%1""
              |  уже выполняется в фоновом задании ""%2"", начатом %3.'"),
		РеглЗаданиеНаименование,
		ПараметрыВыполнения.ПредставлениеФоновогоЗадания,
		Строка(ПараметрыВыполнения.МоментЗапуска)));
	КонецЕсли;
	
	КоличествоОшибок = МассивСообщенийОбОшибках.Количество();
	Если КоличествоОшибок > 0 Тогда
		ЗаголовокТекстаПроОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Задания выполнены с ошибками (%1 из %2)';en='Jobs are completed with errors (%1 out of %2)'"),
		Формат(КоличествоОшибок, "ЧГ="),
		Формат(1, "ЧГ="));
		
		ТекстВсехОшибок = Новый ТекстовыйДокумент;
		ТекстВсехОшибок.ДобавитьСтроку(ЗаголовокТекстаПроОшибки + ":");
		Для Каждого ТекстЭтойОшибки Из МассивСообщенийОбОшибках Цикл
			ТекстВсехОшибок.ДобавитьСтроку("");
			ТекстВсехОшибок.ДобавитьСтроку(ТекстЭтойОшибки);
		КонецЦикла;
		
		Если КоличествоОшибок > 5 Тогда
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить(1, НСтр("ru='Показать ошибки';en='Show errors'"));
			Кнопки.Добавить(КодВозвратаДиалога.Отмена);
			
			ПоказатьВопрос(
			Новый ОписаниеОповещения(
			"ВыполнитьРегламентноеЗаданиеВручнуюЗавершение", ЭтотОбъект, ТекстВсехОшибок),
			ЗаголовокТекстаПроОшибки, Кнопки);
		Иначе
			ПоказатьПредупреждение(, СокрЛП(ТекстВсехОшибок.ПолучитьТекст()));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СообщитьОбОкончанииРучногоВыполненияРегламентногоЗадания()
	
	ОповещенияОбОкончанииВыполнения = ОповещенияОбОкончанииВыполненияРегламентныхЗаданий();
	Для каждого Оповещение Из ОповещенияОбОкончанииВыполнения Цикл
		
		ПоказатьОповещениеПользователя(
			НСтр("ru='Выполнена процедура регламентного задания';en='Scheduled job procedure is executed'"),
			,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("en = '%1. The procedure is completed in background job %2'; ru = '%1. Процедура завершена в фоновом задании %2'"),
				Оповещение.ПредставлениеРегламентногоЗадания,
				Строка(Оповещение.МоментОкончания)),
			БиблиотекаКартинок.ВыполнитьРегламентноеЗаданиеВручную);
		ОбновитьДанныеРеглЗаданий();
	КонецЦикла;
	
	Если ИдентификаторыФоновыхЗаданийПриРучномВыполнении.Количество() > 0 Тогда
		
		ПодключитьОбработчикОжидания(
			"СообщитьОбОкончанииРучногоВыполненияРегламентногоЗадания", 2, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьРегламентноеЗаданиеВручнуюЗавершение(Ответ, ТекстВсехОшибок) Экспорт
	
	Если Ответ = 1 Тогда
		ТекстВсехОшибок.Показать();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ВыполнитьРегламентноеЗаданиеВручнуюНаСервере(Знач ИдентификаторРегламентногоЗадания)
	
	Результат = РегламентныеЗаданияСлужебный.ВыполнитьРегламентноеЗаданиеВручную(ИдентификаторРегламентногоЗадания);
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ОповещенияОбОкончанииВыполненияРегламентныхЗаданий()
	
	ОповещенияОбОкончанииВыполнения = Новый Массив;
	
	Если ИдентификаторыФоновыхЗаданийПриРучномВыполнении.Количество() > 0 Тогда
		Индекс = ИдентификаторыФоновыхЗаданийПриРучномВыполнении.Количество() - 1;
		
		УстановитьПривилегированныйРежим(Истина);
		Пока Индекс >= 0 Цикл
			
			НовыйУникальныйИдентификатор = Новый УникальныйИдентификатор(
				ИдентификаторыФоновыхЗаданийПриРучномВыполнении[Индекс].Значение);
			Отбор = Новый Структура;
			Отбор.Вставить("УникальныйИдентификатор", НовыйУникальныйИдентификатор);
			
			МассивФоновыхЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
			
			Если МассивФоновыхЗаданий.Количество() = 1 Тогда
				МоментОкончания = МассивФоновыхЗаданий[0].Конец;
				
				Если ЗначениеЗаполнено(МоментОкончания) Тогда
					
					ОповещенияОбОкончанииВыполнения.Добавить(
						Новый Структура(
							"ПредставлениеРегламентногоЗадания,
							|МоментОкончания",
							ИдентификаторыФоновыхЗаданийПриРучномВыполнении[Индекс].Представление,
							МоментОкончания));
					
					ИдентификаторыФоновыхЗаданийПриРучномВыполнении.Удалить(Индекс);
				КонецЕсли;
			Иначе
				ИдентификаторыФоновыхЗаданийПриРучномВыполнении.Удалить(Индекс);
			КонецЕсли;
			Индекс = Индекс - 1;
		КонецЦикла;
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Возврат ОповещенияОбОкончанииВыполнения;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ПроверитьПодключениеСерверМПСервер(АдресСервераМП, ПортСервераМП, ЛогинСервераМП, ПарольСервераМП, ТекстСтатуса)
	
	Попытка
		HTTPСоединение = Новый HTTPСоединение(АдресСервераМП, ПортСервераМП, ЛогинСервераМП, ПарольСервераМП,, 15);
	Исключение
		ТекстСтатуса = НСтр("en='Connection is not made.';ru='Подключение не выполнено.'");
		HTTPСоединение = Неопределено;
		Возврат;
	КонецПопытки;
	
	HTTPЗапрос = Новый HTTPЗапрос("/");
	
	Попытка
		HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос);
	Исключение
		ТекстСтатуса = НСтр("en='Connection is not made.';ru='Подключение не выполнено.'");
		HTTPСоединение = Неопределено;
		Возврат;
	КонецПопытки;
	
	Если HTTPОтвет.КодСостояния = 200 Тогда 
		ТекстСтатуса = НСтр("en='Connection is successful.';ru='Подключение выполнено успешно.'");
	Иначе 
		ТекстСтатуса = НСтр("en='Connection is not made.';ru='Подключение не выполнено.'");
	КонецЕсли;
	
	HTTPСоединение = Неопределено;
	
КонецПроцедуры

#КонецОбласти

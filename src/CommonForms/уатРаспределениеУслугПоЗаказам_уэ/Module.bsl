
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если Параметры.Свойство("НередактируемыеРеквизиты") Тогда
		Для Каждого ТекЭлемент Из Параметры.НередактируемыеРеквизиты Цикл
			//Если ТекЭлемент.Ключ = "Грузы" Тогда
			//	Элементы.КоманднаяПанельГрузы.Кнопки.Заполнить.доступность = Ложь;
			//	Для каждого ТекКнопка Из ЭлементыФормы.КоманднаяПанельГрузы.Кнопки.Заполнить.Кнопки Цикл
			//		ТекКнопка.Доступность = Ложь;
			//	КонецЦикла;
			//КонецЕсли;
			
			Если ТекЭлемент.Ключ = "Услуги" Тогда
				Элементы.УслугиЗаполнитьУслугиПоШаблону.Доступность = Ложь;
				Элементы.РассчитатьПоТарифам.Доступность = Ложь;
			Иначе
				Элементы[ТекЭлемент.Ключ].ТолькоПросмотр = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если Параметры.Свойство("ИмяТЧ") Тогда
		ИмяТЧ = Параметры.ИмяТЧ;
	КонецЕсли;
	Если Параметры.Свойство("Организация") Тогда
		Организация = Параметры.Организация;
	КонецЕсли;
	Если Параметры.Свойство("Дата") Тогда
		ТекДата = Параметры.Дата;
	КонецЕсли;
	Если Параметры.Свойство("Грузы") Тогда
		Для Каждого ТекГруз Из Параметры.Грузы Цикл
			Грузы.Добавить(ТекГруз,, Истина);
		КонецЦикла;
	КонецЕсли;
	Если Параметры.Свойство("Услуги") Тогда
		Для Каждого ТекУслуга Из Параметры.Услуги Цикл
			НовыйУслуга = Услуги.Добавить();
			ЗаполнитьЗначенияСвойств(НовыйУслуга, ТекУслуга);
		КонецЦикла;
	КонецЕсли;
	
	ДокументОбъект = Параметры.ДокументОбъект;
	ИмяДокумента   = Параметры.ИмяДокумента;
	
	Если Параметры.Свойство("ИспользоватьПлановыеУслуги") Тогда
		ИспользоватьПлановыеУслуги = Параметры.ИспользоватьПлановыеУслуги;
	КонецЕсли;
			
	Если ИмяТЧ <> "Расходы" Тогда
		Элементы.УслугиСтатьяРасходов.Видимость = Ложь;
		Элементы.РезультатРаспределенияСтатьяРасходов.Видимость = Ложь;
	КонецЕсли;
	Если ИмяТЧ <> "Доходы" Тогда
		Элементы.УслугиСтатьяДоходов.Видимость = Ложь;
		Элементы.РезультатРаспределенияСтатьяДоходов.Видимость = Ложь;
	КонецЕсли;
	
	Если ИмяТЧ = "Расходы" Тогда
		Элементы.ГруппаУслуги.Заголовок = НСТР("en='Expenses';ru='Расходы'");
		Заголовок = НСТР("en='Allocate expenses on orders';ru='Распределение расходов по заказам на ТС'");
	ИначеЕсли ИмяТЧ = "Себестоимость" Тогда
		Элементы.ГруппаУслуги.Заголовок = НСТР("en='Cost';ru='Себестоимость'");
		Заголовок = НСТР("en='Allocate cost on orders';ru='Распределение себестоимости по заказам на ТС'");
	КонецЕсли;
	
	Если НЕ ИспользоватьПлановыеУслуги Тогда
		Элементы.УслугиКоличествоПлан.Видимость = Ложь;
		Элементы.УслугиЦенаПлан.Видимость       = Ложь;
		Элементы.УслугиСуммаПлан.Видимость      = Ложь;
		Элементы.УслугиСуммаНДСПлан.Видимость   = Ложь;
		Элементы.УслугиВсегоПлан.Видимость      = Ложь;
		Элементы.РезультатРаспределенияКоличествоПлан.Видимость = Ложь;
		Элементы.РезультатРаспределенияЦенаПлан.Видимость       = Ложь;
		Элементы.РезультатРаспределенияСуммаПлан.Видимость      = Ложь;
		Элементы.РезультатРаспределенияСуммаНДСПлан.Видимость   = Ложь;
		Элементы.РезультатРаспределенияВсегоПлан.Видимость      = Ложь;
	КонецЕсли;
	
	//Если ИмяДокумента = "уатМаршрутныйЛист" И ДокументОбъект.ПринадлежностьПеревозки = Перечисления.уатПринадлежностьТС.Собственное Тогда
	//	Элементы.УслугиНоменклатура.Видимость     = Ложь;
	//	Элементы.УслугиВалюта.Видимость           = Ложь;
	//	Элементы.УслугиУчитыватьНДС.Видимость     = Ложь;
	//	Элементы.УслугиСуммаВключаетНДС.Видимость = Ложь;
	//	Элементы.УслугиСтавкаНДС.Видимость        = Ложь;
	//	Элементы.УслугиСуммаНДС.Видимость         = Ложь;
	//	Элементы.УслугиСуммаНДСПлан.Видимость     = Ложь;
	//	Элементы.УслугиВсего.Видимость            = Ложь;
	//	Элементы.УслугиВсегоПлан.Видимость        = Ложь;
	//	Элементы.РезультатРаспределенияНоменклатура.Видимость     = Ложь;
	//	Элементы.РезультатРаспределенияВалюта.Видимость           = Ложь;
	//	Элементы.РезультатРаспределенияУчитыватьНДС.Видимость     = Ложь;
	//	Элементы.РезультатРаспределенияСуммаВключаетНДС.Видимость = Ложь;
	//	Элементы.РезультатРаспределенияСтавкаНДС.Видимость        = Ложь;
	//	Элементы.РезультатРаспределенияСуммаНДС.Видимость         = Ложь;
	//	Элементы.РезультатРаспределенияСуммаНДСПлан.Видимость     = Ложь;
	//	Элементы.РезультатРаспределенияВсего.Видимость            = Ложь;
	//	Элементы.РезультатРаспределенияВсегоПлан.Видимость        = Ложь;
	//	
	//Иначе
	//	Элементы.УслугиКонтрагент.Видимость = Истина;
	//	Элементы.УслугиДоговор.Видимость    = Истина;
	//	Элементы.РезультатРаспределенияКонтрагент.Видимость = Истина;
	//	Элементы.РезультатРаспределенияДоговор.Видимость    = Истина;
	//	
	//КонецЕсли;
	
	ПараметрВыработкиРаспределения = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	Если НЕ ЗначениеЗаполнено(ТекДата) тогда
		ТекДата = ТекущаяДата();	
	КонецЕсли;
	
	ОбновитьВсегоВТЧУслуги();
	ОбновитьЗаголовкиГрупп();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("СправочникСсылка.уатШаблоныУслуг_уэ") Тогда
		ЗаполнитьУслугиПоШаблонуСервер(ВыбранноеЗначение);
		ОбновитьЗаголовкиГрупп();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Распределить(Команда)
	ВыполнитьРаспределение();
	ОбновитьВсегоВТЧРезультат();
	ОбновитьЗаголовкиГрупп();
КонецПроцедуры

&НаКлиенте
Процедура ОК(Команда)
	СтруктураРезультата = Новый Структура;
	СтруктураРезультата.Вставить("ИмяТЧ", ИмяТЧ);
	СтруктураРезультата.Вставить("Организация", Организация);
	
	мсвРаспред = Новый Массив;
	Для Каждого ТекСтрока Из РезультатРаспределения Цикл
		СтруктураСтроки = Новый Структура("Контрагент, Договор, ЗаказГрузоотправителя, Номенклатура, СтатьяРасходов, СтатьяДоходов, Тариф, Цена, Количество, Сумма, СтавкаНДС, СуммаНДС, УчитыватьНДС, СуммаВключаетНДС, Валюта, РучнойВвод");
		Если ИспользоватьПлановыеУслуги Тогда
			СтруктураСтроки.Вставить("ЦенаПлан");
			СтруктураСтроки.Вставить("КоличествоПлан");
			СтруктураСтроки.Вставить("СуммаПлан");
			СтруктураСтроки.Вставить("СуммаНДСПлан");
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтруктураСтроки, ТекСтрока);
		мсвРаспред.Добавить(СтруктураСтроки);
	КонецЦикла;
	СтруктураРезультата.Вставить("ТаблицаРаспределения", мсвРаспред);
	
	ОповеститьОВыборе(СтруктураРезультата);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьУслугиПоШаблону(Команда)
	Если Услуги.Количество() > 0 Тогда
		ОписаниеОповещ = Новый ОписаниеОповещения("ЗаполнитьУслугиПоШаблонуВопрос", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещ, НСтр("en='To fill with cleaning tables?';ru='Заполнить с очисткой таблицы?'"), РежимДиалогаВопрос.ДаНетОтмена);
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Справочник.уатШаблоныУслуг_уэ.ФормаВыбора",, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьУслугиПоШаблонуВопрос(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		Услуги.Очистить();
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
	Иначе
		Возврат;
	КонецЕсли;
	
	ОткрытьФорму("Справочник.уатШаблоныУслуг_уэ.ФормаВыбора",, ЭтотОбъект);
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыГрузы

&НаКлиенте
Процедура ГрузыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ПоказатьЗначение(Неопределено, Элементы.Грузы.ТекущиеДанные.Значение);
КонецПроцедуры

&НаКлиенте
Процедура ГрузыПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ГрузыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ГрузыПриИзменении(Элемент)
	ОбновитьЗаголовкиГрупп();
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыУслуги

&НаКлиенте
Процедура УслугиПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОбновитьВсегоВТЧУслуги();
КонецПроцедуры

&НаКлиенте
Процедура УслугиПослеУдаления(Элемент)
	ОбновитьВсегоВТЧУслуги();
КонецПроцедуры

&НаКлиенте
Процедура УслугиНоменклатураПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	СтрокаТабличнойЧасти.СтавкаНДС = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(СтрокаТабличнойЧасти.Номенклатура, "СтавкаНДС");
	РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти);
	СтрокаТабличнойЧасти.СтатьяДоходов = уатОбщегоНазначенияСервер.СтатьяДоходовНоменклатуры(СтрокаТабличнойЧасти.Номенклатура);
	СтрокаТабличнойЧасти.СтатьяРасходов = уатОбщегоНазначенияСервер.СтатьяРасходовНоменклатуры(СтрокаТабличнойЧасти.Номенклатура);
КонецПроцедуры

&НаКлиенте
Процедура УслугиЦенаПриИзменении(Элемент)
	РассчитатьСуммуВСтрокеТабличнойЧасти(Элементы.Услуги.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура УслугиКоличествоПриИзменении(Элемент)
	РассчитатьСуммуВСтрокеТабличнойЧасти(Элементы.Услуги.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	РассчитатьСуммуВсегоВстрокеТЧ(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура УслугиУчитыватьНДСПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.УчитыватьНДС Тогда
		СтрокаТабличнойЧасти.СтавкаНДС = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(СтрокаТабличнойЧасти.Номенклатура, "СтавкаНДС");
	Иначе
		СтрокаТабличнойЧасти.СуммаВключаетНДС = Ложь;
		СтрокаТабличнойЧасти.СтавкаНДС = Неопределено;
	КонецЕсли;
	
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	РассчитатьСуммуВсегоВстрокеТЧ(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура УслугиСуммаВключаетНДСПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	РассчитатьСуммуВсегоВстрокеТЧ(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура УслугиСтавкаНДСПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.Услуги.ТекущиеДанные;
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	РассчитатьСуммуВсегоВстрокеТЧ(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура УслугиПриИзменении(Элемент)
	ОбновитьЗаголовкиГрупп();
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыРезультатРаспределения

&НаКлиенте
Процедура РезультатРаспределенияПриИзменении(Элемент)
	ОбновитьЗаголовкиГрупп();
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ВыполнитьРаспределение()
	Если Грузы.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Если ИмяДокумента = "уатМаршрутныйЛист" Тогда
		РезультатРаспределения.Очистить();
		
		тблУслуги = Услуги.Выгрузить();
		тблУслуги.Колонки.Добавить("Заказ");
		
		мсвЗаказы = Новый Массив;
		Для Каждого ТекЗаказ Из Грузы Цикл
			Если ТекЗаказ.Пометка И мсвЗаказы.Найти(ТекЗаказ.Значение) = Неопределено Тогда
				мсвЗаказы.Добавить(ТекЗаказ.Значение);
			КонецЕсли;
		КонецЦикла;
		
		Отказ = Ложь;
		Документы.уатМаршрутныйЛист.РаспределениеУслугПоЗаказам(тблУслуги, ДокументОбъект, Отказ, мсвЗаказы, ИмяТЧ);
		
		тблУслуги.Колонки.Заказ.Имя = "ЗаказГрузоотправителя";
		Для Каждого ТекУслуга Из тблУслуги Цикл
			НовСтрока = РезультатРаспределения.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, ТекУслуга);
			НовСтрока.Количество = ?(НовСтрока.Цена = 0, 0, НовСтрока.Сумма / НовСтрока.Цена);
		КонецЦикла;
	Иначе
		РаспределениеУслугПоЗаказам_ЗаказПеревозчику();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РаспределениеУслугПоЗаказам_ЗаказПеревозчику()
	РезультатРаспределения.Очистить();
	
	мТабГрузов = Новый ТаблицаЗначений;
	мТабГрузов.Колонки.Добавить("ЗаказГрузоотправителя");
	мТабГрузов.Колонки.Добавить("ЗначениеПараметра");
	Для Каждого ТекГруз Из Грузы Цикл
		Если мТабГрузов.Найти(ТекГруз.Значение, "ЗаказГрузоотправителя") = Неопределено Тогда
			НовыйЗаказ = мТабГрузов.Добавить();
			НовыйЗаказ.ЗаказГрузоотправителя = ТекГруз.Значение;
			НовыйЗаказ.ЗначениеПараметра = 0;
		КонецЕсли;
	КонецЦикла;
	
	ВалютаРегл = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Сч = 0;
	Для Каждого ТекУслуга Из Услуги Цикл
		Сч = Сч + 1;
		
		ТекСтатья = ТекУслуга.СтатьяРасходов;
		Если НЕ ЗначениеЗаполнено(ТекСтатья) Тогда
			ТекстНСТР = СтрШаблон(НСтр("en='In expense line %1 cannot allocate: not specified expenses item';ru='В строке расходов %1 невозможно выполнить распределение: не указана статья расходов'"), ТекУслуга.НомерСтроки);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
			НовСтрока = РезультатРаспределения.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, ТекУслуга);
			Продолжить;
		КонецЕсли;
		
		ПараметрВыработкиРаспределения = Неопределено;
		Если ТекСтатья.ВариантСпособаРаспределенияЗатратМеждуАналитиками = 0 Тогда //в общем
			Если ТекСтатья.ПараметрыВыработкиРаспределенияМеждуАналитиками.Количество() = 0 Тогда
				ТекстНСТР = СтрШаблон(НСтр("en='In the line of expenses %1, it is not allowed to distribute: an expenses item with an incorrect distribution setting between analysts';ru='В строке расходов %1 невозможно выполнить распределение: указана статья расходов с неверной настройкой распределения между аналитиками'"), Сч);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
				НовСтрока = РезультатРаспределения.Добавить();
				ЗаполнитьЗначенияСвойств(НовСтрока, ТекУслуга);
				Продолжить;
			Иначе
				СпособРаспределенияЗатратМеждуАналитиками = ТекСтатья.ПараметрыВыработкиРаспределенияМеждуАналитиками[0].СпособРаспределенияЗатратМеждуАналитиками;
				Если СпособРаспределенияЗатратМеждуАналитиками = Перечисления.уатСпособыРаспределенияДоходовРасходовМеждуАналитиками.НеРаспределять
					ИЛИ (НЕ ЗначениеЗаполнено(СпособРаспределенияЗатратМеждуАналитиками)) Тогда
					НовСтрока = РезультатРаспределения.Добавить();
					ЗаполнитьЗначенияСвойств(НовСтрока, ТекУслуга);
					Продолжить;
				Иначе
					ПараметрВыработкиРаспределения = ТекСтатья.ПараметрыВыработкиРаспределенияМеждуАналитиками[0].ПараметрВыработки;
					Если НЕ ЗначениеЗаполнено(ПараметрВыработкиРаспределения) Тогда
						ТекстНСТР = СтрШаблон(НСтр("en='In the line of expenses %1, it is not allowed to perform the distribution: the expenses item does not specify the output of the distribution parameter between analysts';ru='В строке расходов %1 невозможно выполнить распределение: в статье расходов не указан параметр выработки распределения между аналитиками'"), Сч);
						ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
						НовСтрока = РезультатРаспределения.Добавить();
						ЗаполнитьЗначенияСвойств(НовСтрока, ТекУслуга);
						Продолжить;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
		Иначе //по колоннам
			
			ТекстНСТР = СтрШаблон(НСтр("en='Expense item line %1 can not be distributed: expense item ""%2"" indicates the distribution setting between analysts per vehicle department. For attracted transport, vehicle departments are not used.';ru='В строке расходов %1 невозможно выполнить распределение: в статье расходов ""%2"" указана настройка распределения между аналитиками по колонне. Для привлеченного транспорта не используются колонны.'"), Сч, ТекСтатья);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);

			НовСтрока = РезультатРаспределения.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, ТекУслуга);
			Продолжить;
						
		КонецЕсли;
		
		Для Каждого ТекГруз Из мТабГрузов Цикл
			Если ПараметрВыработкиРаспределения = Справочники.уатПараметрыВыработки.ВесГруза Тогда
				ТекГруз.ЗначениеПараметра = ПолучитьЗначениеПараметраГруза(ТекГруз.ЗаказГрузоотправителя, "ВесБрутто") * ПараметрВыработкиРаспределения.ВесовойКоэффициентДоходовРасходов;
			ИначеЕсли ПараметрВыработкиРаспределения = Справочники.уатПараметрыВыработки.Объем Тогда
				ТекГруз.ЗначениеПараметра = ПолучитьЗначениеПараметраГруза(ТекГруз.ЗаказГрузоотправителя, "Объем") * ПараметрВыработкиРаспределения.ВесовойКоэффициентДоходовРасходов;
			ИначеЕсли ПараметрВыработкиРаспределения = Справочники.уатПараметрыВыработки.ВремяВРаботе Тогда
				ТекГруз.ЗначениеПараметра = уатОбщегоНазначения.уатВремяВСекунды(ПолучитьЗначениеПараметраГруза(ТекГруз.ЗаказГрузоотправителя, "Время")) * ПараметрВыработкиРаспределения.ВесовойКоэффициентДоходовРасходов;
			ИначеЕсли ПараметрВыработкиРаспределения = Справочники.уатПараметрыВыработки.КоличествоЗаказов Тогда
				ТекГруз.ЗначениеПараметра = ПараметрВыработкиРаспределения.ВесовойКоэффициентДоходовРасходов;
			ИначеЕсли ПараметрВыработкиРаспределения = Справочники.уатПараметрыВыработки.ПробегОбщий ИЛИ ПараметрВыработкиРаспределения = Справочники.уатПараметрыВыработки.ПробегСГрузом Тогда
				ТекГруз.ЗначениеПараметра = ПолучитьЗначениеПараметраГруза(ТекГруз.ЗаказГрузоотправителя, "Расстояние") * ПараметрВыработкиРаспределения.ВесовойКоэффициентДоходовРасходов;
			КонецЕсли;
		КонецЦикла;
		
		ЗначПарамСумма = мТабГрузов.Итог("ЗначениеПараметра");
		Если ЗначПарамСумма = 0 Тогда
			ТекстНСТР = СтрШаблон(НСтр("en='In the line of expendses %1, it is impossible to distribute: the total value of the distribution output parameter (%2) for all orders is 0';ru='В строке расходов %1 невозможно выполнить распределение: суммарное значение параметра выработки распределения (%2) по всем заказам равно 0'"), Сч, ПараметрВыработкиРаспределения);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
			НовСтрока = РезультатРаспределения.Добавить();
			ЗаполнитьЗначенияСвойств(НовСтрока, ТекУслуга);
			Продолжить;
		КонецЕсли;
		
		СуммаРаспределенная = 0;
		СуммаРаспределеннаяНДС = 0;
		КоличествоРаспред = 0;
		СуммаРаспределеннаяПлан = 0;
		СуммаРаспределеннаяНДСПлан = 0;
		КоличествоРаспредПлан = 0;
		
		Для Каждого ТекГруз Из мТабГрузов Цикл
			НовСтрока = РезультатРаспределения.Добавить();
			НовСтрока.Контрагент = ТекУслуга.Контрагент;
			НовСтрока.Договор = ТекУслуга.Договор;
			НовСтрока.ЗаказГрузоотправителя = ТекГруз.ЗаказГрузоотправителя;
			НовСтрока.Номенклатура          = ТекУслуга.Номенклатура;
			НовСтрока.Тариф          = ТекУслуга.Тариф;
			НовСтрока.Валюта = ТекУслуга.Валюта;
			НовСтрока.УчитыватьНДС = ТекУслуга.УчитыватьНДС;
			НовСтрока.СуммаВключаетНДС = ТекУслуга.СуммаВключаетНДС;
			НовСтрока.СтатьяРасходов = ТекУслуга.СтатьяРасходов;
			//НовСтрока.РучнойВвод = ТекУслуга.РучнойВвод;
			НовСтрока.РучнойВвод = Истина;
			НовСтрока.СтавкаНДС  = ТекУслуга.СтавкаНДС;
			
			НовСтрока.Цена       = ТекУслуга.Цена;
			НовСтрока.Сумма      = ТекУслуга.Сумма * ТекГруз.ЗначениеПараметра / ЗначПарамСумма;
			Если ТекУслуга.Цена <> 0 Тогда
				НовСтрока.Количество = НовСтрока.Сумма / ТекУслуга.Цена;
			КонецЕсли;
			НовСтрока.СуммаНДС   = уатОбщегоНазначенияТиповые.уатРассчитатьСуммуНДС(НовСтрока.Сумма,
				ТекУслуга.УчитыватьНДС, ТекУслуга.СуммаВключаетНДС,
				уатОбщегоНазначенияТиповые.уатПолучитьСтавкуНДС(НовСтрока.СтавкаНДС));
				
			СуммаРаспределенная    = СуммаРаспределенная    + НовСтрока.Сумма;
			СуммаРаспределеннаяНДС = СуммаРаспределеннаяНДС + НовСтрока.СуммаНДС;
			КоличествоРаспред      = КоличествоРаспред      + НовСтрока.Количество;
			
			Если ИспользоватьПлановыеУслуги Тогда
				НовСтрока.ЦенаПлан       = ТекУслуга.ЦенаПлан;
				НовСтрока.СуммаПлан      = ТекУслуга.СуммаПлан * ТекГруз.ЗначениеПараметра / ЗначПарамСумма;
				Если ТекУслуга.ЦенаПлан <> 0 Тогда
					НовСтрока.КоличествоПлан = НовСтрока.СуммаПлан / ТекУслуга.ЦенаПлан;
				КонецЕсли;
				НовСтрока.СуммаНДСПлан   = уатОбщегоНазначенияТиповые.уатРассчитатьСуммуНДС(НовСтрока.СуммаПлан,
					ТекУслуга.УчитыватьНДС, ТекУслуга.СуммаВключаетНДС,
					уатОбщегоНазначенияТиповые.уатПолучитьСтавкуНДС(НовСтрока.СтавкаНДС));
				
				СуммаРаспределеннаяПлан    = СуммаРаспределеннаяПлан    + НовСтрока.СуммаПлан;
				СуммаРаспределеннаяНДСПлан = СуммаРаспределеннаяНДСПлан + НовСтрока.СуммаНДСПлан;
				КоличествоРаспредПлан      = КоличествоРаспредПлан      + НовСтрока.КоличествоПлан;
			КонецЕсли;
		КонецЦикла;
			
		// учет "последней копейки"
		Если СуммаРаспределенная <> ТекУслуга.Сумма Тогда
			НовСтрока.Сумма = НовСтрока.Сумма + (ТекУслуга.Сумма - СуммаРаспределенная);
		КонецЕсли;
		Если СуммаРаспределенная <> ТекУслуга.Сумма Тогда
			НовСтрока.СуммаНДС = НовСтрока.СуммаНДС + (ТекУслуга.СуммаНДС - СуммаРаспределеннаяНДС);
		КонецЕсли;
		Если КоличествоРаспред <> ТекУслуга.Количество Тогда
			НовСтрока.Количество = НовСтрока.Количество + (ТекУслуга.Количество - КоличествоРаспред);
		КонецЕсли;
		Если ИспользоватьПлановыеУслуги Тогда
			Если СуммаРаспределеннаяПлан <> ТекУслуга.СуммаПлан Тогда
				НовСтрока.СуммаПлан = НовСтрока.СуммаПлан + (ТекУслуга.СуммаПлан - СуммаРаспределеннаяПлан);
			КонецЕсли;
			Если СуммаРаспределеннаяПлан <> ТекУслуга.СуммаПлан Тогда
				НовСтрока.СуммаНДСПлан = НовСтрока.СуммаНДСПлан + (ТекУслуга.СуммаНДСПлан - СуммаРаспределеннаяНДСПлан);
			КонецЕсли;
			Если КоличествоРаспредПлан <> ТекУслуга.КоличествоПлан Тогда
				НовСтрока.КоличествоПлан = НовСтрока.КоличествоПлан + (ТекУслуга.КоличествоПлан - КоличествоРаспредПлан);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ПолучитьЗначениеПараметраГруза(мЗаказГрузоотправителя, ИмяПараметра)
	мЗначениеПараметра = мЗаказГрузоотправителя[ИмяПараметра];
	Возврат мЗначениеПараметра;
КонецФункции

// Процедура рассчитывает сумму в строке табличной части.
//
&НаКлиенте
Процедура РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти = Неопределено)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
	
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	РассчитатьСуммуВсегоВстрокеТЧ(СтрокаТабличнойЧасти);
		
КонецПроцедуры // РассчитатьСуммуВСтрокеТабличнойЧасти()

// Рассчитывается сумма НДС в строке табличной части.
//
&НаКлиенте
Процедура РассчитатьСуммуНДС(СтрокаТабличнойЧасти)
	
	СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	
	СтрокаТабличнойЧасти.СуммаНДС = ?(СтрокаТабличнойЧасти.СуммаВключаетНДС, 
		СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
		СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
	
КонецПроцедуры // РассчитатьСуммуНДС()

&НаКлиенте
Процедура РассчитатьСуммуВсегоВстрокеТЧ(СтрокаТабличнойЧасти)
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(СтрокаТабличнойЧасти.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	СтрокаТабличнойЧасти.ВсегоПлан = СтрокаТабличнойЧасти.СуммаПлан + ?(СтрокаТабличнойЧасти.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДСПлан);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВсегоВТЧУслуги()
	Для Каждого СтрокаТабличнойЧасти Из Услуги Цикл
		РассчитатьСуммуВсегоВстрокеТЧ(СтрокаТабличнойЧасти);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВсегоВТЧРезультат()
	Для Каждого СтрокаТабличнойЧасти Из РезультатРаспределения Цикл
		РассчитатьСуммуВсегоВстрокеТЧ(СтрокаТабличнойЧасти);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьУслугиПоШаблонуСервер(Шаблон)
	ОсновнаяСтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
		ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнаяСтавкаНДС");
	
	Для Каждого ТекСтрока Из Шаблон.Услуги Цикл
		НоваяСтрока = Услуги.Добавить();
		НоваяСтрока.Номенклатура = ТекСтрока.Номенклатура;
		НоваяСтрока.Количество   = ТекСтрока.Количество;
		
		Если ЗначениеЗаполнено(НоваяСтрока.Номенклатура.СтавкаНДС) Тогда
			НоваяСтрока.СтавкаНДС = НоваяСтрока.Номенклатура.СтавкаНДС;
		Иначе
			НоваяСтрока.СтавкаНДС = ОсновнаяСтавкаНДС;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПоТарифам(Команда)
	РассчитатьПоТарифамСервер();
	Для Каждого ТекСтрокаРаспред Из РезультатРаспределения Цикл
		РассчитатьСуммуНДС(ТекСтрокаРаспред);
		РассчитатьСуммуВсегоВстрокеТЧ(ТекСтрокаРаспред);
	КонецЦикла;
	ОбновитьЗаголовкиГрупп();
КонецПроцедуры

&НаСервере
Процедура РассчитатьПоТарифамСервер()
	НомерСтроки = 0;
	Для Каждого ТекСтрокаРаспред Из РезультатРаспределения Цикл
		НомерСтроки = НомерСтроки + 1;
		
		ТекЗаказ = ТекСтрокаРаспред.ЗаказГрузоотправителя;
		Если НЕ ЗначениеЗаполнено(ТекЗаказ) Тогда
			Возврат;
		КонецЕсли;
		
		ДопПараметры = Новый Структура("Расстояние, ПробегСГрузом, ПробегПорожний, Время, ВесГруза, ОбъемГруза, КоличествоМест, СтоимостьГруза", 0, 0, 0, 0, 0, 0, 0, 0);
		//ДопПараметры.Вставить("ИмяДокумента", ИмяДокумента);
		
		Если ИмяДокумента = "уатМаршрутныйЛист" Тогда
			// Доп. таблица для определения порожнего пробега
			// считаем что машина идет порожняком, если таблица пуста
			тблГрузы = Новый ТаблицаЗначений;
			тблГрузы.Колонки.Добавить("Заказ");
			тблГрузы.Колонки.Добавить("Номенклатура");
			тблГрузы.Колонки.Добавить("ЕдиницаИзмерения");
			тблГрузы.Колонки.Добавить("Количество");
			
			Для Каждого ТекСтрока Из ДокументОбъект.Заказы Цикл
				// обновляем доп. таблицу грузов для расчета порожнего пробега
				Если ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка
					ИЛИ ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка Тогда
					// добавляем строку груза
					НоваяСтрока = тблГрузы.Добавить();
					НоваяСтрока.Заказ = ТекСтрока.ЗаказГрузоотправителя;
					НоваяСтрока.Номенклатура = ТекСтрока.Номенклатура;
					НоваяСтрока.ЕдиницаИзмерения = ТекСтрока.ЕдиницаИзмерения;
					НоваяСтрока.Количество = ТекСтрока.Количество * ?(ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка, 1, -1);
					тблГрузы.Свернуть("Заказ, Номенклатура, ЕдиницаИзмерения", "Количество");
					// теперь нужно удалить строки с количеством = 0
					мсвСтрокиУдалить = тблГрузы.НайтиСтроки(Новый Структура("Количество", 0));
					Для Каждого ТекСтрокаГруз Из мсвСтрокиУдалить Цикл
						тблГрузы.Удалить(ТекСтрокаГруз);
					КонецЦикла;
				КонецЕсли;
				
				// обновляем пробег порожний и пробег с грузом
				Если тблГрузы.Количество() = 0 Тогда
					ДопПараметры.ПробегПорожний = ДопПараметры.ПробегПорожний + ТекСтрока.Расстояние;
				Иначе
					ДопПараметры.ПробегСГрузом = ДопПараметры.ПробегСГрузом + ТекСтрока.Расстояние;
				КонецЕсли;
				
				Если ТекСтрока.ЗаказГрузоотправителя = ТекЗаказ И
					ТекСтрока.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка Тогда
					
					ДопПараметры.Расстояние = ДопПараметры.Расстояние + ТекСтрока.Расстояние;
					ДопПараметры.Время = уатЗащищенныеФункцииСервер.СложитьВремя(ДопПараметры.Время, ТекСтрока.Время);
					ДопПараметры.ВесГруза = ДопПараметры.ВесГруза + ТекСтрока.ВесБрутто;
					ДопПараметры.ОбъемГруза = ДопПараметры.ОбъемГруза + ТекСтрока.Объем;
					ДопПараметры.КоличествоМест = ДопПараметры.КоличествоМест + ТекСтрока.КоличествоМест;
					Если ЗначениеЗаполнено(ТекСтрока.Номенклатура)
						И ТипЗнч(ТекСтрока.Номенклатура) = Тип("СправочникСсылка.уатГрузовыеМеста_уэ") Тогда
						ДопПараметры.СтоимостьГруза = ДопПараметры.СтоимостьГруза + ТекСтрока.Номенклатура.Стоимость;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
			
			ДопПараметры.Вставить("ИмяТЧ", ИмяТЧ);
			Если ИмяТЧ = "Расходы" Тогда
				ДопПараметры.Вставить("Контрагент", ТекСтрокаРаспред.Контрагент);
			Иначе
				ДопПараметры.Вставить("Контрагент", ТекСтрокаРаспред.ЗаказГрузоотправителя.Контрагент);
			КонецЕсли;
			
			ДопПараметры.Вставить("Организация", Организация);
			
			ДопПараметры.Вставить("ВалютаДокумента", ТекСтрокаРаспред.Валюта);
			СтруктураВалюта = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ТекСтрокаРаспред.Валюта, ДокументОбъект.Дата);
			ДопПараметры.Вставить("КурсДокумента", СтруктураВалюта.Курс);
			ДопПараметры.Вставить("КратностьДокумента", СтруктураВалюта.Кратность);
			ДопПараметры.Вставить("Дата", ДокументОбъект.Дата);
			
			ДопПараметры.Вставить("НомерСтрокиДокумента", НомерСтроки-1);
			
		Иначе
			ДопПараметры = Новый Структура;
			ДопПараметры.Вставить("Расстояние", ДокументОбъект.Расстояние);
			//ДопПараметры.Вставить("ПробегСГрузом", ДокументОбъект.ПробегСГрузом);
			//ДопПараметры.Вставить("ПробегПорожний", ДокументОбъект.ПробегПорожний);
			ДопПараметры.Вставить("Время", ДокументОбъект.Время);
			ДопПараметры.Вставить("ВесГруза", ДокументОбъект.ВесБрутто);
			ДопПараметры.Вставить("ОбъемГруза", ДокументОбъект.Объем);
			ДопПараметры.Вставить("КоличествоМест", ДокументОбъект.КоличествоМест);
			ДопПараметры.Вставить("СтоимостьГруза", ДокументОбъект.СтоимостьГруза);
			
			ДопПараметры.Вставить("ВалютаДокумента", ДокументОбъект.ВалютаДокумента);
			ДопПараметры.Вставить("КурсДокумента", ДокументОбъект.КурсВзаиморасчетов);
			ДопПараметры.Вставить("КратностьДокумента", ДокументОбъект.КратностьВзаиморасчетов);
			ДопПараметры.Вставить("Дата", ДокументОбъект.Дата);
			
			ДопПараметры.Вставить("ИмяТЧ", "Расходы");
			ДопПараметры.Вставить("НомерСтрокиДокумента", НомерСтроки-1);
			ДопПараметры.Вставить("Контрагент", ДокументОбъект.Контрагент);
			
		КонецЕсли;
		
		ДопПараметры.Вставить("Грузоподъемность", 0);
		ДопПараметры.Вставить("КлассГруза", 0);
			
		ДокументОбъект.Вставить("РезультатРаспределения", ОбщегоНазначения.ТаблицаЗначенийВМассив(РезультатРаспределения.Выгрузить()));
		ДопПараметры.Вставить("ДокументОбъект", ДокументОбъект);
		ДопПараметры.Вставить("ИмяДокумента", ИмяДокумента);
		ДопПараметры.Вставить("РаспределениеПоЗаказам", Истина);
		
		СтруктураСтроки = Новый Структура("Контрагент, Договор, ЗаказГрузоотправителя, Номенклатура, СтатьяРасходов, СтатьяДоходов, Тариф, Цена, Количество, Сумма, СтавкаНДС, СуммаНДС, УчитыватьНДС, СуммаВключаетНДС, Валюта, РучнойВвод");
		Если ИспользоватьПлановыеУслуги Тогда
			СтруктураСтроки.Вставить("ЦенаПлан");
			СтруктураСтроки.Вставить("КоличествоПлан");
			СтруктураСтроки.Вставить("СуммаПлан");
			СтруктураСтроки.Вставить("СуммаНДСПлан");
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(СтруктураСтроки, ТекСтрокаРаспред);
		
		уатРасчетыПоТарифам_уэ.РассчитатьСтоимостьУслуги(СтруктураСтроки, ДопПараметры);
		
		ЗаполнитьЗначенияСвойств(ТекСтрокаРаспред, СтруктураСтроки);
		
		Если ТипЗнч(ТекСтрокаРаспред.Тариф) = Тип("СправочникСсылка.уатТарифыТС") Тогда
			ТекСтрокаРаспред.Номенклатура = ТекСтрокаРаспред.Тариф.НоменклатураУслуги;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЗаголовкиГрупп()
	КоличЗаказов = 0;
	Для Каждого ТекЗаказ Из Грузы Цикл
		Если ТекЗаказ.Пометка Тогда
			КоличЗаказов = КоличЗаказов + 1;
		КонецЕсли;
	КонецЦикла;
	КоличествоСтрокЗаказы = КоличЗаказов;
	КоличествоСтрокУслуги = Услуги.Количество();
	КоличествоСтрокРезультат = РезультатРаспределения.Количество();
КонецПроцедуры

#КонецОбласти

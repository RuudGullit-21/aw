
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	ВосстановитьНастройки();
	
	флПодборПоХарактеристикам = уатОбщегоНазначенияПовтИсп_проф.ИспользоватьХарактеристикиЗаказовНаТС();
	
	Параметры.Свойство("МножественныйПодбор", МножественныйПодбор);
	Параметры.Свойство("АРМДиспетчера",       АРМДиспетчера);
	Параметры.Свойство("ЛатОтправления",      ЛатОтправления);
	Параметры.Свойство("ЛонОтправления",      ЛонОтправления);
	Параметры.Свойство("ОтправлениеПо",       ОтправлениеПо);
	Параметры.Свойство("ТипКартографии",      ТипКартографии);
	Параметры.Свойство("ТекОрганизация",      ТекОрганизация);
	
	Если Параметры.Свойство("ЭтоЯндекс") Тогда
		ЭтоЯндекс = Истина;
	КонецЕсли;
	
	Если флПодборПоХарактеристикам Тогда 
		ЗаполнитьТребуемыеХарактеристики();
	КонецЕсли;
	
	Если Параметры.Свойство("Заказ") Тогда 
		Если Параметры.Свойство("КоличествоЗаказов") И Параметры.КоличествоЗаказов > 1 Тогда 
			ШаблонЗаголовка = НСтр("en='Vehicle selection on order (%1)';ru='Подбор ТС по заказам (%1)'");
			Заголовок = СтрШаблон(ШаблонЗаголовка, Параметры.КоличествоЗаказов);
			ОтборПоОбъему = Ложь;
			ОтборПоВесу   = Ложь;
			КоличествоУпаковокОтбор = Ложь;
			УстановитьХарактеристикиТС(Параметры, Истина);
		Иначе 
			ШаблонЗаголовка = НСтр("en='Selection of vehicle on order ""%1""';ru='Подбор ТС по заказу ""%1""'");
			Заголовок = СтрШаблон(ШаблонЗаголовка, Параметры.Заказ);
			УстановитьХарактеристикиТС(Параметры, Истина);
		КонецЕсли;
		
		Заказ = Параметры.Заказ;
		
		Элементы.ШапкаОтборНаправление.Видимость = Истина;
		
		НаправлениеПеревозкиОтбор = Заказ.НаправлениеПеревозки;
		МаршрутОтбор              = Заказ.Маршрут;
		ТипЗаказаОтбор            = Заказ.ВидПеревозки;
		
		ОтборТСПоТипуЗаказаНаправлениюПеревозки();
		
		Если Параметры.Свойство("КоличествоЗаказов") И Параметры.КоличествоЗаказов > 1 Тогда
			Заказ = Неопределено;
		КонецЕсли;
		
	Иначе 
		ТекстНСТР = НСтр("en='Vehicle selection by routing list ""%1""';ru='Подбор ТС по маршрутному листу ""%1""'");
		ТекстНСТР = СтрШаблон(ТекстНСТР, Параметры.МаршрутныйЛист);
		Заголовок = ТекстНСТР;
		Элементы.ТаблицаПодбораМаршрутныйЛист.Видимость = Ложь;
		Элементы.ТаблицаПодбораЗаказПеревозчику.Видимость = Ложь;
		РежимПодбораПоМаршрутномуЛисту = Истина;
		МаршрутныйЛист = Параметры.МаршрутныйЛист;
		
		Элементы.ШапкаОтборНаправление.Видимость = Ложь;
		УстановитьХарактеристикиТС(Параметры, Истина);
	КонецЕсли;
	
	ТекущееТС = Параметры.ТекущееТС;
	
	АдресПараметрыТС = ПоместитьВоВременноеХранилище(Параметры.ТС, УникальныйИдентификатор);
	
	Элементы.РадиусДоступностиТС.Доступность = УчитыватьДоступностьТСпоРадиусу;

	Если МножественныйПодбор Тогда 
		Элементы.ФормаРассчитатьПрибыль.Доступность         = Ложь;
		Элементы.СоздаватьЗаказПеревозчику.Видимость        = Ложь;
		Элементы.ГруппаОтборов.Доступность                  = Ложь;
		Элементы.ШапкаОтборПоРадиусу.Доступность            = Ложь;
		Элементы.УчитыватьПросроченныеДокументы.Доступность = Ложь;
		Элементы.УчитыватьETA.Доступность                   = Ложь;
	КонецЕсли;
	
	Если АРМДиспетчера Тогда
		ЭтоКОРП = уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП();
		
		Элементы.СоздаватьЗаказПеревозчику.Видимость = Ложь;
		Элементы.ШапкаОтборМаршрут.Видимость         = ЭтоКОРП;
		Элементы.ШапкаОтборПоРадиусу.Видимость       = ЭтоКОРП;
		Элементы.УчитыватьETA.Видимость              = ЭтоКОРП;
		Элементы.ШапкаОтборНаправление.Видимость     = Ложь;
		ОтборПоНаправлению = Ложь; 
		Если НЕ ЭтоКОРП Тогда
			ОтборПоМаршруту = Ложь;
			УчитыватьETA    = Ложь;
			УчитыватьДоступностьТСпоРадиусу = Ложь;
		КонецЕсли;
		Элементы.ТаблицаПодбораМаршрутныйЛист.Видимость   = Ложь;
		Элементы.ТаблицаПодбораЗаказПеревозчику.Видимость = Ложь;
	КонецЕсли;

	СформироватьТаблицуПодбора();
	АдресТаблицаПодбора = ПоместитьВоВременноеХранилище(ТаблицаПодбора.Выгрузить(), Новый УникальныйИдентификатор);
	
	ПредставлениеЕдиницыИзмеренияВеса = уатОбщегоНазначенияПовтИсп.ПолучитьПредставлениеОсновнойЕдиницыИзмеренияВеса();
	Если ЗначениеЗаполнено(ПредставлениеЕдиницыИзмеренияВеса) Тогда
		Элементы.ТаблицаПодбораВесПредставление.Заголовок = НСтр("en='Weight';ru='Вес'") + ", " + ПредставлениеЕдиницыИзмеренияВеса;
	КонецЕсли;
	
	ПредставлениеЕдиницыИзмеренияОбъема = уатОбщегоНазначенияПовтИсп.ПолучитьПредставлениеОсновнойЕдиницыИзмеренияОбъема();
	Если ЗначениеЗаполнено(ПредставлениеЕдиницыИзмеренияОбъема) Тогда
		Элементы.ТаблицаПодбораОбъемПредставление.Заголовок = НСтр("en='Volume';ru='Объем'") + ", "+ ПредставлениеЕдиницыИзмеренияОбъема;
	КонецЕсли;
	
	УстановитьОтборы();
	
	Если НЕ флПодборПоХарактеристикам Тогда 
		Элементы.ШапкаОтборПоХарактеристикам.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если ЗавершениеРаботы Тогда 
		Возврат;
	КонецЕсли;
	
	СохранитьНастройки();
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТаблицаПодбораВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекДанные = Элемент.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Поле = Элементы.ТаблицаПодбораКнопкаПодробно Тогда 
		ПараметрыФормы = Новый Структура();
		Если ТекДанные.ИндексКартинки = 4 Тогда 
			ПараметрыФормы.Вставить("СтороннимПеревозчиком");
		КонецЕсли;
		
		ПараметрыФормы.Вставить("ДоходыПоЗаказу",                 Новый Массив());
		ПараметрыФормы.Вставить("ЗатратыПоЗаказу",                Новый Массив());
		ПараметрыФормы.Вставить("ЗатратыНаПеревозку",             Новый Массив());
		ПараметрыФормы.Вставить("Валюта",                         ВалютаЗаказа);
		ПараметрыФормы.Вставить("ТС",                             ТекДанные.ТС);
		ПараметрыФормы.Вставить("ПредставлениеТС",                ТекДанные.Представление);
		ПараметрыФормы.Вставить("РежимПодбораПоМаршрутномуЛисту", РежимПодбораПоМаршрутномуЛисту);
		
		Для Каждого ТекСтрока Из ТекДанные.ДоходыПоЗаказу Цикл 
			ПараметрыФормы.ДоходыПоЗаказу.Добавить(Новый Структура(
				"Номенклатура,ТарифТС,Всего",
				ТекСтрока.Номенклатура,
				ТекСтрока.ТарифТС,
				ТекСтрока.Всего));
		КонецЦикла;
		
		Для Каждого ТекСтрока Из ТекДанные.ЗатратыПоЗаказу Цикл 
			ПараметрыФормы.ЗатратыПоЗаказу.Добавить(Новый Структура(
				"Номенклатура,ТарифТС,Всего",
				ТекСтрока.Номенклатура,
				ТекСтрока.ТарифТС,
				ТекСтрока.Всего));
		КонецЦикла;
		
		Для Каждого ТекСтрока Из ТекДанные.ЗатратыНаПеревозку Цикл 
			ПараметрыФормы.ЗатратыНаПеревозку.Добавить(Новый Структура(
				"Статья,Тариф,Количество,Цена,Сумма,Номенклатура,СтавкаНДС,СуммаНДС,Всего,ПараметрВыработки",
				ТекСтрока.Статья,
				ТекСтрока.Тариф,
				ТекСтрока.Количество,
				ТекСтрока.ЦенаВал,
				ТекСтрока.СуммаВал,
				ТекСтрока.Номенклатура,
				ТекСтрока.СтавкаНДС,
				ТекСтрока.СуммаНДС,
				ТекСтрока.Всего,
				ТекСтрока.ПараметрВыработки));
		КонецЦикла;
		
		ОткрытьФорму("ОбщаяФорма.уатАРМФормаНазначенияЗаказаНаТС_Расшифровка", ПараметрыФормы, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
	ИначеЕсли Поле = Элементы.ТаблицаПодбораМаршрутныйЛист Тогда 
		Если ЗначениеЗаполнено(ТекДанные.МаршрутныйЛист) Тогда 
			ПоказатьЗначение(, ТекДанные.МаршрутныйЛист);
		КонецЕсли;
		
	ИначеЕсли Поле = Элементы.ТаблицаПодбораЗаказПеревозчику Тогда 
		Если ЗначениеЗаполнено(ТекДанные.ЗаказПеревозчику) Тогда 
			ПоказатьЗначение(, ТекДанные.ЗаказПеревозчику);
		КонецЕсли;
		
	Иначе 
		ЗакрытьФормуСПодбором(ТекДанные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоНаправлениюПриИзменении(Элемент)
	
	УстановитьОтборы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоОбъемуПриИзменении(Элемент)
	
	УстановитьОтборы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоВесуПриИзменении(Элемент)
	
	УстановитьОтборы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоМаршрутуПриИзменении(Элемент)
	
	УстановитьОтборы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоТипуЗаказаПриИзменении(Элемент)
	
	УстановитьОтборы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоКоличествуУпаковокПриИзменении(Элемент)
	
	УстановитьОтборы();
	
КонецПроцедуры

&НаКлиенте
Процедура НаправлениеПеревозкиОтборПриИзменении(Элемент)
	
	Если Не ОтборПоНаправлению Тогда 
		ОтборПоНаправлению = Истина;
	КонецЕсли;
	
	УстановитьОтборы();
	
КонецПроцедуры

&НаКлиенте
Процедура ТипЗаказаОтборПриИзменении(Элемент)
	
	Если Не ОтборПоТипуЗаказа Тогда 
		ОтборПоТипуЗаказа = Истина;
	КонецЕсли;
	
	УстановитьОтборы();
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутОтборПриИзменении(Элемент)
	
	Если Не ОтборПоМаршруту Тогда 
		ОтборПоМаршруту = Истина;
	КонецЕсли;
	
	УстановитьОтборы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъемОтборПриИзменении(Элемент)
	
	Если Не ОтборПоОбъему Тогда 
		ОтборПоОбъему = Истина;
	КонецЕсли;
	
	УстановитьОтборы();
	
КонецПроцедуры

&НаКлиенте
Процедура ВесОтборПриИзменении(Элемент)
	
	Если Не ОтборПоВесу Тогда 
		ОтборПоВесу = Истина;
	КонецЕсли;
	
	УстановитьОтборы();

	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоУпаковокОтборПриИзменении(Элемент)
	
	Если Не ОтборПоКоличествуУпаковок Тогда 
		ОтборПоКоличествуУпаковок = Истина;
	КонецЕсли;
	
	УстановитьОтборы();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтборПоХарактеристикамПриИзменении(Элемент)
	
	УстановитьОтборы();
	
КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикиОтборНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ХарактеристикиЗаказов.ПоказатьОтметкуЭлементов(
		Новый ОписаниеОповещения("ХарактеристикиОтборПослеОтметки", ЭтотОбъект),
		НСтр("ru = 'Выберите требуемые характеристики'")
	);
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КомандаВыбрать(Команда)
	
	ТекСтрока = Элементы.ТаблицаПодбора.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ЗакрытьФормуСПодбором(ТекСтрока);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьПрибыль(Команда)
	
	УстановитьОтборы(?(МножественныйПодбор, Ложь, Истина));
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура СформироватьТаблицуПодбора(РассчитатьПрибыль=Ложь)
	
	Если Не МножественныйПодбор И РассчитатьПрибыль Тогда 
		Если Не Элементы.ТаблицаПодбораПлановыеДоходы.Видимость Тогда 
			Элементы.ТаблицаПодбораПлановыеДоходы.Видимость = Истина;
		КонецЕсли;
		Если Не Элементы.ТаблицаПодбораПлановыеЗатраты.Видимость Тогда 
			Элементы.ТаблицаПодбораПлановыеЗатраты.Видимость = Истина;
		КонецЕсли;
		Если Не Элементы.ТаблицаПодбораПлановаяПрибыль.Видимость Тогда 
			Элементы.ТаблицаПодбораПлановаяПрибыль.Видимость = Истина;
		КонецЕсли;
		Если Не Элементы.ТаблицаПодбораКнопкаПодробно.Видимость Тогда 
			Элементы.ТаблицаПодбораКнопкаПодробно.Видимость = Истина;
		КонецЕсли;
		Если Не Элементы.ВключатьДоходыРасходыЗаказов.Видимость Тогда 
			Элементы.ВключатьДоходыРасходыЗаказов.Видимость = Истина;
		КонецЕсли;
		Если Не Элементы.ВалютаЗаказа.Видимость Тогда 
			Элементы.ВалютаЗаказа.Видимость = Истина;
		КонецЕсли;
		
		ТССОтбором = Новый ТаблицаЗначений;
		ТССОтбором.Колонки.Добавить("ТС");
		ТССОтбором.Колонки.Добавить("Прицеп1");
		ТССОтбором.Колонки.Добавить("Прицеп2");
		
		Для Каждого ТекТС Из ТаблицаПодбора Цикл
			НоваяСтрока = ТССОтбором.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекТС);
		КонецЦикла;
	Иначе 
		Если Элементы.ТаблицаПодбораПлановыеДоходы.Видимость Тогда 
			Элементы.ТаблицаПодбораПлановыеДоходы.Видимость = Ложь;
		КонецЕсли;
		Если Элементы.ТаблицаПодбораПлановыеЗатраты.Видимость Тогда 
			Элементы.ТаблицаПодбораПлановыеЗатраты.Видимость = Ложь;
		КонецЕсли;
		Если Элементы.ТаблицаПодбораПлановаяПрибыль.Видимость Тогда 
			Элементы.ТаблицаПодбораПлановаяПрибыль.Видимость = Ложь;
		КонецЕсли;
		Если Элементы.ТаблицаПодбораКнопкаПодробно.Видимость Тогда 
			Элементы.ТаблицаПодбораКнопкаПодробно.Видимость = Ложь;
		КонецЕсли;
		Если Элементы.ВключатьДоходыРасходыЗаказов.Видимость Тогда 
			Элементы.ВключатьДоходыРасходыЗаказов.Видимость = Ложь;
		КонецЕсли;
		Если Элементы.ВалютаЗаказа.Видимость Тогда 
			Элементы.ВалютаЗаказа.Видимость = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаПодбора.Очистить();
	
	Если РежимПодбораПоМаршрутномуЛисту Тогда
		мсвЗаказы = МаршрутныйЛист.Заказы.ВыгрузитьКолонку("ЗаказГрузоотправителя");
		
		Для Каждого ТекЗаказ Из мсвЗаказы Цикл
			Если ЗначениеЗаполнено(ВалютаЗаказа) Тогда
				Если ВалютаЗаказа <> ТекЗаказ.ВалютаДокумента Тогда
					ВалютаЗаказа = Константы.ВалютаУправленческогоУчета.Получить();
					Прервать;
				КонецЕсли;
			Иначе
				ВалютаЗаказа = ТекЗаказ.ВалютаДокумента;
			КонецЕсли;
		КонецЦикла;
	Иначе
		ВалютаЗаказа = Заказ.ВалютаДокумента;
		
		мсвЗаказы = Новый Массив;
		мсвЗаказы.Добавить(Заказ);
	КонецЕсли;
	
	Если Не МножественныйПодбор И РассчитатьПрибыль Тогда 
		флИспользоватьПлановыеУслуги = ПолучитьФункциональнуюОпцию("уатИспользоватьПлановыеУслуги_уэ");
		Если ВключатьДоходыРасходыЗаказов Тогда
			Если флИспользоватьПлановыеУслуги Тогда
				ЗапросЗаказ = Новый Запрос(
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	уатЗаказГрузоотправителяУслуги.Номенклатура,
				|	уатЗаказГрузоотправителяУслуги.Тариф,
				|	СУММА(ВЫБОР
				|			КОГДА уатЗаказГрузоотправителяУслуги.Ссылка.УчитыватьНДС
				|					И НЕ уатЗаказГрузоотправителяУслуги.Ссылка.СуммаВключаетНДС
				|				ТОГДА уатЗаказГрузоотправителяУслуги.СуммаПлан + уатЗаказГрузоотправителяУслуги.СуммаНДСПлан
				|			ИНАЧЕ уатЗаказГрузоотправителяУслуги.СуммаПлан
				|		КОНЕЦ) КАК Всего,
				|	уатЗаказГрузоотправителяУслуги.Ссылка.ВалютаДокумента КАК Валюта,
				|	уатЗаказГрузоотправителяУслуги.Ссылка.Дата КАК Дата
				|ИЗ
				|	Документ.уатЗаказГрузоотправителя.Услуги КАК уатЗаказГрузоотправителяУслуги
				|ГДЕ
				|	уатЗаказГрузоотправителяУслуги.Ссылка В(&мсвЗаказы)
				|
				|СГРУППИРОВАТЬ ПО
				|	уатЗаказГрузоотправителяУслуги.Номенклатура,
				|	уатЗаказГрузоотправителяУслуги.Тариф,
				|	уатЗаказГрузоотправителяУслуги.Ссылка
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	уатЗаказГрузоотправителяЗатраты.Номенклатура,
				|	уатЗаказГрузоотправителяЗатраты.Тариф,
				|	СУММА(ВЫБОР
				|			КОГДА уатЗаказГрузоотправителяЗатраты.Ссылка.УчитыватьНДС
				|					И НЕ уатЗаказГрузоотправителяЗатраты.Ссылка.СуммаВключаетНДС
				|				ТОГДА уатЗаказГрузоотправителяЗатраты.СуммаПлан + уатЗаказГрузоотправителяЗатраты.СуммаНДСПлан
				|			ИНАЧЕ уатЗаказГрузоотправителяЗатраты.СуммаПлан
				|		КОНЕЦ) КАК Всего,
				|	уатЗаказГрузоотправителяЗатраты.Ссылка.ВалютаДокумента КАК Валюта,
				|	уатЗаказГрузоотправителяЗатраты.Ссылка.Дата КАК Дата
				|ИЗ
				|	Документ.уатЗаказГрузоотправителя.Расходы КАК уатЗаказГрузоотправителяЗатраты
				|ГДЕ
				|	уатЗаказГрузоотправителяЗатраты.Ссылка В(&мсвЗаказы)
				|
				|СГРУППИРОВАТЬ ПО
				|	уатЗаказГрузоотправителяЗатраты.Номенклатура,
				|	уатЗаказГрузоотправителяЗатраты.Тариф,
				|	уатЗаказГрузоотправителяЗатраты.Ссылка");
			Иначе
				ЗапросЗаказ = Новый Запрос(
				"ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	уатЗаказГрузоотправителяУслуги.Номенклатура,
				|	уатЗаказГрузоотправителяУслуги.Тариф,
				|	СУММА(ВЫБОР
				|			КОГДА уатЗаказГрузоотправителяУслуги.Ссылка.УчитыватьНДС
				|					И НЕ уатЗаказГрузоотправителяУслуги.Ссылка.СуммаВключаетНДС
				|				ТОГДА уатЗаказГрузоотправителяУслуги.Сумма + уатЗаказГрузоотправителяУслуги.СуммаНДС
				|			ИНАЧЕ уатЗаказГрузоотправителяУслуги.Сумма
				|		КОНЕЦ) КАК Всего,
				|	уатЗаказГрузоотправителяУслуги.Ссылка.ВалютаДокумента КАК Валюта,
				|	уатЗаказГрузоотправителяУслуги.Ссылка.Дата КАК Дата
				|ИЗ
				|	Документ.уатЗаказГрузоотправителя.Услуги КАК уатЗаказГрузоотправителяУслуги
				|ГДЕ
				|	уатЗаказГрузоотправителяУслуги.Ссылка В(&мсвЗаказы)
				|
				|СГРУППИРОВАТЬ ПО
				|	уатЗаказГрузоотправителяУслуги.Номенклатура,
				|	уатЗаказГрузоотправителяУслуги.Тариф,
				|	уатЗаказГрузоотправителяУслуги.Ссылка
				|;
				|
				|////////////////////////////////////////////////////////////////////////////////
				|ВЫБРАТЬ РАЗРЕШЕННЫЕ
				|	уатЗаказГрузоотправителяЗатраты.Номенклатура,
				|	уатЗаказГрузоотправителяЗатраты.Тариф,
				|	СУММА(ВЫБОР
				|			КОГДА уатЗаказГрузоотправителяЗатраты.Ссылка.УчитыватьНДС
				|					И НЕ уатЗаказГрузоотправителяЗатраты.Ссылка.СуммаВключаетНДС
				|				ТОГДА уатЗаказГрузоотправителяЗатраты.Сумма + уатЗаказГрузоотправителяЗатраты.СуммаНДС
				|			ИНАЧЕ уатЗаказГрузоотправителяЗатраты.Сумма
				|		КОНЕЦ) КАК Всего,
				|	уатЗаказГрузоотправителяЗатраты.Ссылка.ВалютаДокумента КАК Валюта,
				|	уатЗаказГрузоотправителяЗатраты.Ссылка.Дата КАК Дата
				|ИЗ
				|	Документ.уатЗаказГрузоотправителя.Расходы КАК уатЗаказГрузоотправителяЗатраты
				|ГДЕ
				|	уатЗаказГрузоотправителяЗатраты.Ссылка В(&мсвЗаказы)
				|
				|СГРУППИРОВАТЬ ПО
				|	уатЗаказГрузоотправителяЗатраты.Номенклатура,
				|	уатЗаказГрузоотправителяЗатраты.Тариф,
				|	уатЗаказГрузоотправителяЗатраты.Ссылка");
			КонецЕсли;
			
			ЗапросЗаказ.УстановитьПараметр("мсвЗаказы", мсвЗаказы);
			РезультатЗапроса = ЗапросЗаказ.ВыполнитьПакет();
			
			ТабДоходовПоЗаказу = РезультатЗапроса[0].Выгрузить();
			ТабЗатратПоЗаказу  = РезультатЗапроса[1].Выгрузить();
		КонецЕсли;
	КонецЕсли;
	
	Параметры_ТС = ПолучитьИзВременногоХранилища(АдресПараметрыТС);

	Для Каждого ТекСтрока Из Параметры_ТС Цикл
		Если Не МножественныйПодбор И РассчитатьПрибыль Тогда
			мСтроки = ТССОтбором.НайтиСтроки(Новый Структура("ТС, Прицеп1, Прицеп2", ТекСтрока.Ссылка, ТекСтрока.Прицеп1, ТекСтрока.Прицеп2));
			Если мСтроки.Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		Если ТекСтрока.ДанныеМЛ.Группировка = Неопределено 
			Или (Не ТекСтрока.ДанныеМЛ.Группировка = Неопределено
			И (ТекСтрока.ДанныеМЛ.Прицеп1 = ТекСтрока.Прицеп1 Или ТекСтрока.ДанныеМЛ.Прицеп1 = ТекСтрока.Прицеп2)
			И (ТекСтрока.ДанныеМЛ.Прицеп2 = ТекСтрока.Прицеп1 Или ТекСтрока.ДанныеМЛ.Прицеп2 = ТекСтрока.Прицеп2)) Тогда 
			МаксСч = 1;
		Иначе 
			МаксСч = 2;
		КонецЕсли;
		Для Сч = 1 По МаксСч Цикл 
			НовСтрока = ТаблицаПодбора.Добавить();
			НовСтрока.ТС            = ТекСтрока.Ссылка;
			НовСтрока.Представление = ТекСтрока.Представление;
			НовСтрока.Перевозчик    = ?(ТекСтрока.ПринадлежностьТС = Перечисления.уатПринадлежностьТС.Собственное, ТекСтрока.Ссылка.Организация, ТекСтрока.Ссылка.ВладелецТС);
			НовСтрока.ПеревозчикПредставление = ?(ЗначениеЗаполнено(НовСтрока.Перевозчик), НовСтрока.Перевозчик.Наименование, "");
			НовСтрока.Водитель      = ?(ТекСтрока.ПринадлежностьТС = Перечисления.уатПринадлежностьТС.Собственное,ПолучитьВодителяТС(ТекСтрока.Ссылка), ТекСтрока.Ссылка.Водитель);
			НовСтрока.ВодительПредставление = ?(ЗначениеЗаполнено(НовСтрока.Водитель), НовСтрока.Водитель.Наименование, "");
			Если Сч = 1 Тогда 
				НовСтрока.Прицеп1 = ТекСтрока.Прицеп1;
				НовСтрока.Прицеп2 = ТекСтрока.Прицеп2;
			Иначе 
				НовСтрока.Прицеп1 = ТекСтрока.ДанныеМЛ.Прицеп1;
				НовСтрока.Прицеп2 = ТекСтрока.ДанныеМЛ.Прицеп2;
			КонецЕсли;
			
			НовСтрока.ВесПредставление                = ТекСтрока.ВесПредставление;
			НовСтрока.ОбъемПредставление              = ТекСтрока.ОбъемПредставление;
			НовСтрока.КоличествоУпаковокПредставление = ТекСтрока.КоличествоУпаковокПредставление;
			НовСтрока.НаправлениеПеревозки            = ТекСтрока.НаправлениеПеревозки;
			НовСтрока.НаправлениеПеревозкиПредставление = ТекСтрока.НаправлениеПеревозки.Наименование;
			НовСтрока.МаршрутныйЛист                  = ТекСтрока.ДанныеМЛ.Группировка;
			НовСтрока.МаршрутныйЛистПредставление     = НовСтрока.МаршрутныйЛист.Номер;
			НовСтрока.ЗаказПеревозчику                = ПолучитьЗаказПеревозчику(НовСтрока.МаршрутныйЛист, НовСтрока.ТС);
			НовСтрока.ЗаказПеревозчикуПредставление   = НовСтрока.ЗаказПеревозчику.Номер;
			НовСтрока.ОбъемСцепки            = ТекСтрока.ОбъемСцепки;
			НовСтрока.ГрузоподъемностьСцепки = ТекСтрока.ГрузоподъемностьСцепки;
			НовСтрока.МаксимальноеКоличествоУпаковок = ТекСтрока.МаксимальноеКоличествоУпаковок;
			НовСтрока.ТипЗаказа                      = ТекСтрока.ТипЗаказа;
			НовСтрока.Маршрут                        = ТекСтрока.Маршрут;
			НовСтрока.МаршрутыСписок                 = ТекСтрока.МаршрутыСписок;
			
			Если ТекСтрока.ДанныеМЛ.Свойство("ЕстьМаршрутныйЛист") Тогда 
				НовСтрока.ЕстьМаршрутныйЛист = ТекСтрока.ДанныеМЛ.ЕстьМаршрутныйЛист;
			КонецЕсли;
			
			Если РежимПодбораПоМаршрутномуЛисту Тогда 
				НовСтрока.ЭтоТекущееТС = (ТекущееТС = ТекСтрока.Ссылка);
			КонецЕсли;
			
			Если ТекСтрока.ПринадлежностьТС = Перечисления.уатПринадлежностьТС.Привлеченное Тогда 
				НовСтрока.ИндексКартинки = 4;
			ИначеЕсли ТекСтрока.ПринадлежностьТС = Перечисления.уатПринадлежностьТС.Виртуальное Тогда 
				НовСтрока.ИндексКартинки = 6;
			Иначе 
				НовСтрока.ИндексКартинки = 3;
			КонецЕсли;
			
			НовСтрока.ПлановыеДоходы  = 0;
			НовСтрока.ПлановыеЗатраты = 0;
			
			Если Не МножественныйПодбор И РассчитатьПрибыль Тогда 
				Если ВключатьДоходыРасходыЗаказов Тогда
					Для Каждого ТекДоход Из ТабДоходовПоЗаказу Цикл 
						НовСтрокаДоходов = НовСтрока.ДоходыПоЗаказу.Добавить();
						НовСтрокаДоходов.Номенклатура = ТекДоход.Номенклатура;
						НовСтрокаДоходов.ТарифТС = ТекДоход.Тариф;
						Если ВалютаЗаказа = ТекДоход.Валюта Тогда
							НовСтрокаДоходов.Всего = ТекДоход.Всего;
						Иначе
							НовСтрокаДоходов.Всего = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекДоход.Всего,
							ТекДоход.Валюта, ВалютаЗаказа, ТекДоход.Дата, ТекДоход.Дата);
						КонецЕсли;
						
						НовСтрока.ПлановыеДоходы = НовСтрока.ПлановыеДоходы + НовСтрокаДоходов.Всего;
					КонецЦикла;
					Для Каждого ТекРасход Из ТабЗатратПоЗаказу Цикл 
						НовСтрокаРасходов = НовСтрока.ЗатратыПоЗаказу.Добавить();
						НовСтрокаРасходов.Номенклатура = ТекРасход.Номенклатура;
						НовСтрокаРасходов.ТарифТС = ТекРасход.Тариф;
						Если ВалютаЗаказа = ТекРасход.Валюта Тогда
							НовСтрокаРасходов.Всего = ТекРасход.Всего;
						Иначе
							НовСтрокаРасходов.Всего = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекРасход.Всего,
							ТекРасход.Валюта, ВалютаЗаказа, ТекРасход.Дата, ТекРасход.Дата);
						КонецЕсли;
						
						НовСтрока.ПлановыеЗатраты = НовСтрока.ПлановыеЗатраты + НовСтрокаРасходов.Всего;
					КонецЦикла;
				КонецЕсли;
				
				Если РежимПодбораПоМаршрутномуЛисту Тогда 
					ДокМЛОбъект = МаршрутныйЛист.ПолучитьОбъект();
				Иначе
					ДокМЛОбъект = Документы.уатМаршрутныйЛист.СоздатьДокумент();
					ДокМЛОбъект.Заполнить(Заказ);
					ДокМЛОбъект.ОбновитьВремяРасстояниеМеждуПунктами();
					ДокМЛОбъект.РассчитатьИтоговыеПоказатели();
				КонецЕсли;
				
				ДокМЛОбъект.Доходы.Очистить();
				ДокМЛОбъект.Расходы.Очистить();
				
				Если ТекСтрока.ДанныеМЛ.НастройкаОрганизацияМЛИсточник = 0 тогда
					мОрганизацияМЛ = ДокМЛОбъект.Организация;
				ИначеЕсли ТекСтрока.ДанныеМЛ.НастройкаОрганизацияМЛИсточник = 1 Тогда
					мОрганизацияМЛ = уатОбщегоНазначения.МестонахождениеТС(ТекСтрока.Ссылка, ДокМЛОбъект.Дата, Ложь).Организация;
				ИначеЕсли ТекСтрока.ДанныеМЛ.НастройкаОрганизацияМЛИсточник = 2 тогда
					мОрганизацияМЛ = ТекСтрока.ДанныеМЛ.НастройкаОрганизацияМЛ;
				КонецЕсли;
				
				ДокМЛОбъект.ТС      = ТекСтрока.Ссылка;
				ДокМЛОбъект.Прицеп1 = НовСтрока.Прицеп1;
				ДокМЛОбъект.Прицеп2 = НовСтрока.Прицеп2;
				
				ДокМЛОбъект.ПринадлежностьПеревозки = ДокМЛОбъект.ТС.ПринадлежностьТС;
				
				Если ЗначениеЗаполнено(ТекСтрока.Ссылка) Тогда 
					Если ТекСтрока.Ссылка.ПринадлежностьТС = Перечисления.уатПринадлежностьТС.Привлеченное Тогда
						ВладелецТС = ТекСтрока.Ссылка.ВладелецТС;
						СписокДоговоров = Новый СписокЗначений();
						СписокДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
						СтрПараметров = Новый Структура("СписокДопустимыхВидовДоговоров", СписокДоговоров);
						Договор = уатОбщегоНазначенияТиповыеСервер.уатПолучитьДоговорПоОрганизацииИКонтрагенту(мОрганизацияМЛ, ВладелецТС, СтрПараметров);
					ИначеЕсли ТекСтрока.Ссылка.ПринадлежностьТС = Перечисления.уатПринадлежностьТС.Собственное Тогда
						ВладелецТС = уатОбщегоНазначения.МестонахождениеТС(ТекСтрока.Ссылка, ДокМЛОбъект.Дата, Ложь).Организация;
						Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
						Если Не ЗначениеЗаполнено(ВладелецТС) Тогда
							ВладелецТС = ТекСтрока.Ссылка.Организация;
						КонецЕсли;
					Иначе
						ВладелецТС = Неопределено;
						Договор = Неопределено;
					КонецЕсли;
				КонецЕсли;
				ДокМЛОбъект.Контрагент   = ВладелецТС;
				ДокМЛОбъект.ВидПеревозки = Справочники.уатВидыПеревозок.АвтомобильнаяГрузовая;
				ДокМЛОбъект.Организация  = мОрганизацияМЛ;
				
				Если ТекСтрока.Ссылка <> Неопределено 
					И ТекСтрока.Ссылка.ПринадлежностьТС = Перечисления.уатПринадлежностьТС.Собственное Тогда
					
					уатОбщегоНазначения.ЗаполнитьЭкипажТС(ТекСтрока.Ссылка, ДокМЛОбъект.Организация, ДокМЛОбъект.Дата,
						ДокМЛОбъект.Водитель1, ДокМЛОбъект.Водитель2, ДокМЛОбъект.Сотрудник1, ДокМЛОбъект.Сотрудник2,
						Истина, ДокМЛОбъект.Дата + 24*3600, Ложь);
			  	КонецЕсли;
				
				ДопПараметры = Новый Структура("ЗаполнятьТЧДоходы, ЗаполнятьТЧРасходы", Ложь, Ложь);
				СтруктураДокумента = уатОбщегоНазначенияКлиентСервер.СтруктураДокумента(ДокМЛОбъект, "уатМаршрутныйЛист", ДопПараметры);
				СтруктураДокумента.Выполнен = Истина;
				Если СтруктураДокумента.ПринадлежностьПеревозки = Перечисления.уатПринадлежностьТС.Собственное Тогда
					ВладелецТС = уатОбщегоНазначения.МестонахождениеТС(СтруктураДокумента.ТС, СтруктураДокумента.Дата, Ложь).Организация;
					Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
					Если Не ЗначениеЗаполнено(ВладелецТС) Тогда
						ВладелецТС = СтруктураДокумента.ТС.Организация;
					КонецЕсли;
					
				ИначеЕсли СтруктураДокумента.ПринадлежностьПеревозки = Перечисления.уатПринадлежностьТС.Привлеченное Тогда
					ВладелецТС = СтруктураДокумента.ТС.ВладелецТС;
					СписокДоговоров = Новый СписокЗначений;
					СписокДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
					СтрПараметров = Новый Структура("СписокДопустимыхВидовДоговоров", СписокДоговоров);
					Договор = уатОбщегоНазначенияТиповыеСервер.уатПолучитьДоговорПоОрганизацииИКонтрагенту(СтруктураДокумента.Организация, ВладелецТС, СтрПараметров);
					СтруктураДокумента.Водитель1 = СтруктураДокумента.ТС.Водитель;
				Иначе
					ВладелецТС       = Неопределено;
					Договор          = Неопределено;
					СтруктураДокумента.Водитель1 = Неопределено;
				КонецЕсли;

				Если СтруктураДокумента.ПринадлежностьПеревозки = Перечисления.уатПринадлежностьТС.Виртуальное Тогда 
					СтруктураДокумента.Контрагент         = Справочники.Организации.ПустаяСсылка();
					СтруктураДокумента.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
				Иначе 
					СтруктураДокумента.Контрагент         = ВладелецТС;
					СтруктураДокумента.ДоговорКонтрагента = Договор;
				КонецЕсли;

				МинДатаПоЗаказам  = '39991231';
				МаксДатаПоЗаказам = '00010101';
				Для Каждого ТекЗаказ Из СтруктураДокумента.Заказы Цикл
					ТекЗаказ.Выполнен     = Истина;
					ТекЗаказ.ПрибытиеФакт = ТекЗаказ.ПрибытиеПлан;
					ТекЗаказ.УбытиеФакт   = ТекЗаказ.УбытиеПлан;
					
					Если ТекЗаказ.ПрибытиеФакт <> '00010101' И ТекЗаказ.ПрибытиеФакт < МинДатаПоЗаказам Тогда 
						МинДатаПоЗаказам = ТекЗаказ.ПрибытиеФакт;
					КонецЕсли;
					Если ТекЗаказ.УбытиеФакт <> '00010101' И ТекЗаказ.УбытиеФакт < МинДатаПоЗаказам Тогда 
						МинДатаПоЗаказам = ТекЗаказ.УбытиеФакт;
					КонецЕсли;
					Если ТекЗаказ.ПрибытиеФакт <> '00010101' И ТекЗаказ.ПрибытиеФакт > МаксДатаПоЗаказам Тогда 
						МаксДатаПоЗаказам = ТекЗаказ.ПрибытиеФакт;
					КонецЕсли;
					Если ТекЗаказ.УбытиеФакт <> '00010101' И ТекЗаказ.УбытиеФакт > МаксДатаПоЗаказам Тогда 
						МаксДатаПоЗаказам = ТекЗаказ.УбытиеФакт;
					КонецЕсли;
				КонецЦикла;
				СтруктураДокумента.ДатаИВремяОтправления     = ?(МинДатаПоЗаказам = '39991231',
					'00010101', НачалоМинуты(МинДатаПоЗаказам));
				СтруктураДокумента.ДатаИВремяВыполнения      = НачалоМинуты(МаксДатаПоЗаказам);
				СтруктураДокумента.ДатаИВремяОтправленияПлан = СтруктураДокумента.ДатаИВремяОтправления;
				СтруктураДокумента.ДатаИВремяВыполненияПлан  = СтруктураДокумента.ДатаИВремяВыполненияПлан;

				ВыработкаТСиСотрудников = Новый ТаблицаЗначений;
				ВыработкаТСиСотрудников.Колонки.Добавить("ЗаказГрузоотправителя", Новый ОписаниеТипов("ДокументСсылка.уатЗаказГрузоотправителя"));
				ВыработкаТСиСотрудников.Колонки.Добавить("ПараметрВыработки",     Новый ОписаниеТипов("СправочникСсылка.уатПараметрыВыработки"));
				ВыработкаТСиСотрудников.Колонки.Добавить("КоличествоПлан",        Новый ОписаниеТипов("Число"));
				ВыработкаТСиСотрудников.Колонки.Добавить("КоличествоФакт",        Новый ОписаниеТипов("Число"));
				ВыработкаТСиСотрудников.Колонки.Добавить("Контрагент",            Новый ОписаниеТипов("СправочникСсылка.Контрагенты"));
				ВыработкаТСиСотрудников.Колонки.Добавить("Подразделение",         Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций"));
				ВыработкаТСиСотрудников.Колонки.Добавить("Маршрут",               Новый ОписаниеТипов("СправочникСсылка.уатМаршруты"));
				ВыработкаТСиСотрудников.Колонки.Добавить("ОбъектСтроительства",   Новый ОписаниеТипов("СправочникСсылка.уатОбъектыСтроительства"));
				ВыработкаТСиСотрудников.Колонки.Добавить("ВидПеревозки",          Новый ОписаниеТипов("СправочникСсылка.уатВидыПеревозок"));
				ВыработкаТСиСотрудников.Колонки.Добавить("НаправлениеПеревозки",  Новый ОписаниеТипов("СправочникСсылка.уатНаправленияПеревозок"));
				ВыработкаТСиСотрудников.Колонки.Добавить("ДопАналитика",          Новый ОписаниеТипов("ПеречислениеСсылка.уатТипыТочекМаршрута, СправочникСсылка.уатВидыУпаковки_уэ, СправочникСсылка.уатТипыПунктов, СправочникСсылка.уатТипыКонтейнеров_уэ"));
				ВыработкаТСиСотрудников.Колонки.Добавить("РучнойВвод",            Новый ОписаниеТипов("Булево"));
				СтруктураДокумента.ВыработкаТСиСотрудников = ВыработкаТСиСотрудников;
				
				Документы.уатМаршрутныйЛист.РассчитатьВыработкуПоЗаказам(СтруктураДокумента);
				Для Каждого ТекЗаказ Из СтруктураДокумента.ВыработкаТСиСотрудников Цикл
					Если ЗначениеЗаполнено(ТекЗаказ.КоличествоПлан) Тогда
						ТекЗаказ.КоличествоФакт = ТекЗаказ.КоличествоПлан;
					КонецЕсли;
				КонецЦикла;
				
				уатРасчетыПоТарифам_уэ.РассчитатьУслугиПоМаршрутномуЛисту(СтруктураДокумента, "Доходы", СтруктураДокумента.Контрагент);
				уатРасчетыПоТарифам_уэ.РассчитатьУслугиПоМаршрутномуЛисту(СтруктураДокумента, "Расходы", СтруктураДокумента.Контрагент);
				
				Для Каждого ТекДоход Из СтруктураДокумента.Доходы Цикл 
					НовСтрокаДоходов = НовСтрока.ДоходыПоЗаказу.Добавить();
					НовСтрокаДоходов.Номенклатура = ТекДоход.Номенклатура;
					НовСтрокаДоходов.ТарифТС      = ТекДоход.Тариф;
					Если ВалютаЗаказа = ТекДоход.Валюта Тогда
						НовСтрокаДоходов.Всего = ?(ТекДоход.УчитыватьНДС И Не ТекДоход.СуммаВключаетНДС, ТекДоход.Сумма + ТекДоход.СуммаНДС, ТекДоход.Сумма);
					Иначе
						НовСтрокаДоходов.Всего = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(
						?(ТекДоход.УчитыватьНДС И Не ТекДоход.СуммаВключаетНДС, ТекДоход.Сумма + ТекДоход.СуммаНДС, ТекДоход.Сумма),
						ТекДоход.Валюта, ВалютаЗаказа, ДокМЛОбъект.Дата, ДокМЛОбъект.Дата);
					КонецЕсли;
					НовСтрока.ПлановыеДоходы      = НовСтрока.ПлановыеДоходы + НовСтрокаДоходов.Всего;
				КонецЦикла;
				
				Для Каждого ТекРасход Из СтруктураДокумента.Расходы Цикл
					НовСтрокаЗатрат = НовСтрока.ЗатратыНаПеревозку.Добавить();
					НовСтрокаЗатрат.Количество        = ТекРасход.Количество;
					НовСтрокаЗатрат.Номенклатура      = ТекРасход.Номенклатура;
					НовСтрокаЗатрат.СтавкаНДС         = ТекРасход.СтавкаНДС;
					НовСтрокаЗатрат.Статья            = ТекРасход.СтатьяРасходов;
					НовСтрокаЗатрат.Сумма             = ТекРасход.Сумма;
					НовСтрокаЗатрат.СуммаВал          = ТекРасход.Сумма;
					НовСтрокаЗатрат.СуммаНДС          = ТекРасход.СуммаНДС;
					НовСтрокаЗатрат.Тариф             = ТекРасход.Тариф;
					НовСтрокаЗатрат.Цена              = ТекРасход.Цена;
					НовСтрокаЗатрат.ЦенаВал           = ТекРасход.Цена;
					Если ЗначениеЗаполнено(ТекРасход.СуммаПлан) Тогда
						Если ВалютаЗаказа = ТекРасход.Валюта Тогда
							НовСтрокаЗатрат.Всего = ?(ТекРасход.УчитыватьНДС И Не ТекРасход.СуммаВключаетНДС, ТекРасход.СуммаПлан + ТекРасход.СуммаНДСПлан, ТекРасход.СуммаПлан);
						Иначе
							НовСтрокаЗатрат.Всего = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(
							?(ТекРасход.УчитыватьНДС И Не ТекРасход.СуммаВключаетНДС, ТекРасход.СуммаПлан + ТекРасход.СуммаНДСПлан, ТекРасход.СуммаПлан),
							ТекРасход.Валюта, ВалютаЗаказа, ДокМЛОбъект.Дата, ДокМЛОбъект.Дата);
						КонецЕсли;
					Иначе
						Если ВалютаЗаказа = ТекРасход.Валюта Тогда
							НовСтрокаЗатрат.Всего = ?(ТекРасход.УчитыватьНДС И Не ТекРасход.СуммаВключаетНДС, ТекРасход.Сумма + ТекРасход.СуммаНДС, ТекРасход.Сумма);
						Иначе
							НовСтрокаЗатрат.Всего = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(
							?(ТекРасход.УчитыватьНДС И Не ТекРасход.СуммаВключаетНДС, ТекРасход.Сумма + ТекРасход.СуммаНДС, ТекРасход.Сумма),
							ТекРасход.Валюта, ВалютаЗаказа, ДокМЛОбъект.Дата, ДокМЛОбъект.Дата);
						КонецЕсли;
					КонецЕсли;
					НовСтрокаЗатрат.ПараметрВыработки = ?(ЗначениеЗаполнено(ТекРасход.Тариф), ТекРасход.Тариф.ПараметрВыработки, Неопределено);
					НовСтрока.ПлановыеЗатраты         = НовСтрока.ПлановыеЗатраты + НовСтрокаЗатрат.Всего;
				КонецЦикла;
				
				НовСтрока.ПлановаяПрибыль = НовСтрока.ПлановыеДоходы - НовСтрока.ПлановыеЗатраты;
				
				тблДоходы = НовСтрока.ДоходыПоЗаказу.Выгрузить();
				тблДоходы.Свернуть("ТарифТС, Номенклатура", "Всего");
				НовСтрока.ДоходыПоЗаказу.Загрузить(тблДоходы);
				
				тблРасходы = НовСтрока.ЗатратыПоЗаказу.Выгрузить();
				тблРасходы.Свернуть("ТарифТС, Номенклатура", "Всего");
				НовСтрока.ЗатратыПоЗаказу.Загрузить(тблРасходы);
				
				тблЗатратыНаПеревозку = НовСтрока.ЗатратыНаПеревозку.Выгрузить();
				тблЗатратыНаПеревозку.Свернуть("Статья, Тариф, Цена, Номенклатура, СтавкаНДС, ПараметрВыработки, ЦенаВал", "Количество, Сумма, СуммаНДС, СуммаВал, Всего");
				НовСтрока.ЗатратыНаПеревозку.Загрузить(тблЗатратыНаПеревозку);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ТаблицаПодбора.Сортировать("ПлановаяПрибыль Убыв");
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьИсходнуюТаблицуПодбора()
	
	ИсходнаяТЗ = ПолучитьИзВременногоХранилища(АдресТаблицаПодбора);
	ТаблицаПодбора.Очистить();
	Если ИсходнаяТЗ <> Неопределено Тогда
		ТаблицаПодбора.Загрузить(ИсходнаяТЗ);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФормуСПодбором(СтрокаТС)
	
	Результат = Новый Структура();
	Результат.Вставить("ТС", СтрокаТС.ТС);
	
	Если РежимПодбораПоМаршрутномуЛисту Тогда
		МассивПЛ = Новый Массив();
		ОбновитьТСвМЛ(МаршрутныйЛист, СтрокаТС.ТС, СтрокаТС.Прицеп1, СтрокаТС.Прицеп2, МассивПЛ);
		Если МассивПЛ.Количество() <> 0 Тогда
			ТекстВопроса = НСтр("ru = 'Обнаружены связанные документы ""Путевой лист"":'") + Символы.ПС;
			Для Каждого ТекСтрока Из МассивПЛ Цикл
				ТекстВопроса = ТекстВопроса + ТекСтрока + Символы.ПС;
			КонецЦикла;
			ТекстВопроса = ТекстВопроса + НСтр("ru = 'Обновить ТС и водителя в ПЛ?'");
			ПоказатьВопрос(Новый ОписаниеОповещения("ТСВМЛПриИзмененииВопрос", ЭтотОбъект,
				Новый Структура("МассивПЛ, Результат", МассивПЛ, Результат)),
			ТекстВопроса, РежимДиалогаВопрос.ДаНет);
		Иначе
			Закрыть(Результат);
		КонецЕсли;
	Иначе 
		Результат.Вставить("СоздаватьЗаказПеревозчику", СоздаватьЗаказПеревозчику);
		Результат.Вставить("Прицеп1",                   СтрокаТС.Прицеп1);
		Результат.Вставить("Прицеп2",                   СтрокаТС.Прицеп2);
		Результат.Вставить("МЛ",                        СтрокаТС.МаршрутныйЛист);
		Результат.Вставить("ЗатратыНаПеревозку",        Новый Массив());
		
		Для Каждого ТекСтрока Из СтрокаТС.ЗатратыНаПеревозку Цикл 
			стрЗатраты = Новый Структура("Статья,Тариф,Количество,Цена,Сумма,Номенклатура,СтавкаНДС,СуммаНДС");
			ЗаполнитьЗначенияСвойств(стрЗатраты, ТекСтрока);
			Результат.ЗатратыНаПеревозку.Добавить(стрЗатраты);
		КонецЦикла;
		Закрыть(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗаказПеревозчику(МаршрутныйЛист, ТС)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДокументОснование", МаршрутныйЛист);
	Запрос.УстановитьПараметр("ТС", ТС);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
	|	уатЗаказПеревозчику_уэ.Ссылка
	|ИЗ
	|	Документ.уатЗаказПеревозчику_уэ КАК уатЗаказПеревозчику_уэ
	|ГДЕ
	|	уатЗаказПеревозчику_уэ.ТС = &ТС
	|	И уатЗаказПеревозчику_уэ.Проведен
	|	И НЕ уатЗаказПеревозчику_уэ.ПометкаУдаления
	|	И уатЗаказПеревозчику_уэ.ДокументОснование = &ДокументОснование";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.Ссылка;
	Иначе 
		Возврат Документы.уатЗаказПеревозчику_уэ.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

&НаСервереБезКонтекста
Процедура ОбновитьТСвМЛ(МаршрутныйЛистСсылка, ТССсылка, Прицеп1, Прицеп2, МассивПЛ = Неопределено)
	
	ДокМЛОбъект = МаршрутныйЛистСсылка.ПолучитьОбъект();
	
	Если ДокМЛОбъект.ТС = ТССсылка
		И ДокМЛОбъект.Прицеп1 = Прицеп1
		И ДокМЛОбъект.Прицеп2 = Прицеп2 Тогда 
		Возврат;
	КонецЕсли;
	
	ДокМЛОбъект.ТС      = ТССсылка;
	ДокМЛОбъект.ПринадлежностьПеревозки = ТССсылка.ПринадлежностьТС;
	ДокМЛОбъект.Прицеп1 = Прицеп1;
	ДокМЛОбъект.Прицеп2 = Прицеп2;
	
	Если ТССсылка.ПринадлежностьТС = Перечисления.уатПринадлежностьТС.Привлеченное Тогда
		ВладелецТС = ТССсылка.ВладелецТС;
		СписокДоговоров = Новый СписокЗначений();
		СписокДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
		СтрПараметров = Новый Структура("СписокДопустимыхВидовДоговоров", СписокДоговоров);
		Договор = уатОбщегоНазначенияТиповыеСервер.уатПолучитьДоговорПоОрганизацииИКонтрагенту(ДокМЛОбъект.Организация, ВладелецТС, СтрПараметров);
	ИначеЕсли ТССсылка.ПринадлежностьТС = Перечисления.уатПринадлежностьТС.Собственное Тогда
		ВладелецТС = уатОбщегоНазначения.МестонахождениеТС(ТССсылка, ДокМЛОбъект.Дата, Ложь).Организация;
		Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		Если Не ЗначениеЗаполнено(ВладелецТС) Тогда
			ВладелецТС = ТССсылка.Организация;
		КонецЕсли;
	Иначе
		ВладелецТС = Неопределено;
		Договор = Неопределено;
	КонецЕсли;
	
	ДокМЛОбъект.Контрагент = ВладелецТС;
	
	Если ТССсылка.ПринадлежностьТС = Перечисления.уатПринадлежностьТС.Собственное Тогда
		уатОбщегоНазначения.ЗаполнитьЭкипажТС(ТССсылка, ДокМЛОбъект.Организация, ДокМЛОбъект.Дата,
			ДокМЛОбъект.Водитель1, ДокМЛОбъект.Водитель2, ДокМЛОбъект.Сотрудник1, ДокМЛОбъект.Сотрудник2,
			Истина, ДокМЛОбъект.Дата + 24*3600, Ложь);
	КонецЕсли;
	
	ДокМЛОбъект.Доходы.Очистить();
	ДокМЛОбъект.Расходы.Очистить();
	
	ДопПараметры = Новый Структура("ЗаполнятьТЧДоходы, ЗаполнятьТЧРасходы", Ложь, Ложь);
	СтруктураДокумента = уатОбщегоНазначенияКлиентСервер.СтруктураДокумента(ДокМЛОбъект, "уатМаршрутныйЛист", ДопПараметры);
				
	уатРасчетыПоТарифам_уэ.РассчитатьУслугиПоМаршрутномуЛисту(СтруктураДокумента, "Доходы");
	уатРасчетыПоТарифам_уэ.РассчитатьУслугиПоМаршрутномуЛисту(СтруктураДокумента, "Расходы");
	
	Для Каждого ТекСтрока Из СтруктураДокумента.Доходы Цикл
		НоваяСтрока = ДокМЛОбъект.Доходы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
	КонецЦикла;
	Для Каждого ТекСтрока Из СтруктураДокумента.Расходы Цикл
		НоваяСтрока = ДокМЛОбъект.Расходы.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
	КонецЦикла;
	
	ДокМЛОбъект.Записать(РежимЗаписиДокумента.Проведение);
	
	Если НЕ ЗначениеЗаполнено(ДокМЛОбъект.Ссылка) 
		И МассивПЛ <> Неопределено Тогда
		Возврат;
	КонецЕсли;

	уатАРМ.ПолучитьСвязанныеПЛ(ДокМЛОбъект.Ссылка, МассивПЛ);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройки()
	Если ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда 
		СтруктураНастроек = ХранилищеНастроекДанныхФорм.Загрузить("ОбщаяФорма.уатАРМФормаНазначенияЗаказаНаТС", "НастройкиПодборТС");
	Иначе 
		СтруктураНастроек = Неопределено;
	КонецЕсли;
	ВключатьДоходыРасходыЗаказов = Ложь;
	Если ТипЗнч(СтруктураНастроек) = Тип("Структура") Тогда
		Если СтруктураНастроек.Свойство("ВключатьДоходыРасходыЗаказов") Тогда
			ВключатьДоходыРасходыЗаказов = СтруктураНастроек.ВключатьДоходыРасходыЗаказов;
		КонецЕсли;
		СтруктураНастроек.Свойство("ОтборПоВесу",               ОтборПоВесу);
		СтруктураНастроек.Свойство("ОтборПоОбъему",             ОтборПоОбъему);
		СтруктураНастроек.Свойство("ОтборПоКоличествуУпаковок", ОтборПоКоличествуУпаковок);
		СтруктураНастроек.Свойство("ОтборПоНаправлению",        ОтборПоНаправлению);
		СтруктураНастроек.Свойство("ОтборПоМаршруту",           ОтборПоМаршруту);
		СтруктураНастроек.Свойство("ОтборПоТипуЗаказа",         ОтборПоТипуЗаказа);
		СтруктураНастроек.Свойство("ОтборПоХарактеристикам",    ОтборПоХарактеристикам);
		СтруктураНастроек.Свойство("УчитыватьМодельИТипТС",     УчитыватьМодельИТипТС);
		СтруктураНастроек.Свойство("УчитыватьДоступностьТСпоСостоянию", УчитыватьДоступностьТСпоСостоянию);
		СтруктураНастроек.Свойство("УчитыватьПросроченныеДокументы",    УчитыватьПросроченныеДокументы);
		СтруктураНастроек.Свойство("УчитыватьДоступностьТСпоРадиусу",   УчитыватьДоступностьТСпоРадиусу);
		СтруктураНастроек.Свойство("РадиусДоступностиТС",               РадиусДоступностиТС);
		СтруктураНастроек.Свойство("УчитыватьETA",                      УчитыватьETA);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()
	Если Не ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда 
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ВключатьДоходыРасходыЗаказов", ВключатьДоходыРасходыЗаказов);
	СтруктураНастроек.Вставить("ОтборПоВесу",                  ОтборПоВесу);
	СтруктураНастроек.Вставить("ОтборПоОбъему",                ОтборПоОбъему);
	СтруктураНастроек.Вставить("ОтборПоКоличествуУпаковок",    ОтборПоКоличествуУпаковок);
	СтруктураНастроек.Вставить("ОтборПоНаправлению",           ОтборПоНаправлению);
	СтруктураНастроек.Вставить("ОтборПоМаршруту",              ОтборПоМаршруту);
	СтруктураНастроек.Вставить("ОтборПоТипуЗаказа",            ОтборПоТипуЗаказа);
	СтруктураНастроек.Вставить("ОтборПоХарактеристикам",       ОтборПоХарактеристикам);
	СтруктураНастроек.Вставить("УчитыватьМодельИТипТС",        УчитыватьМодельИТипТС);
	СтруктураНастроек.Вставить("УчитыватьДоступностьТСпоСостоянию", УчитыватьДоступностьТСпоСостоянию);
	СтруктураНастроек.Вставить("УчитыватьПросроченныеДокументы",    УчитыватьПросроченныеДокументы);
	СтруктураНастроек.Вставить("УчитыватьДоступностьТСпоРадиусу",   УчитыватьДоступностьТСпоРадиусу);
	СтруктураНастроек.Вставить("РадиусДоступностиТС",               РадиусДоступностиТС);
	СтруктураНастроек.Вставить("УчитыватьETA",                      УчитыватьETA);
	
	
	ХранилищеНастроекДанныхФорм.Сохранить("ОбщаяФорма.уатАРМФормаНазначенияЗаказаНаТС", "НастройкиПодборТС", СтруктураНастроек);
КонецПроцедуры

&НаСервере
Процедура ОтборТСПоТипуЗаказаНаправлениюПеревозки()
	
	СтруктураОтбора = Неопределено;
	
	Если ОтборПоНаправлению 
		ИЛИ ОтборПоТипуЗаказа Тогда 
		
		СтруктураОтбораТС = Новый Структура();
		Если ОтборПоНаправлению Тогда
			СтруктураОтбораТС.Вставить("НаправлениеПеревозки", НаправлениеПеревозкиОтбор);
		КонецЕсли;
		Если ОтборПоТипуЗаказа Тогда
			СтруктураОтбораТС.Вставить("ТипЗаказа", ТипЗаказаОтбор);
		КонецЕсли;
		
		СтруктураОтбора = Новый ФиксированнаяСтруктура(
			СтруктураОтбораТС
		);
	КонецЕсли;
	
	Элементы.ТаблицаПодбора.ОтборСтрок = СтруктураОтбора;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборы(РассчитатьПрибыль = Ложь)
	
	Если РассчитатьПрибыль Тогда
		СформироватьТаблицуПодбора(РассчитатьПрибыль);
	Иначе
		ПолучитьИсходнуюТаблицуПодбора();
	КонецЕсли;
	
	мДляУдаления = Новый Массив();
	Для Каждого ТекСтрока Из ТаблицаПодбора Цикл
		Если ОтборПоОбъему Тогда
			Если ОбъемОтбор > ТекСтрока.ОбъемСцепки Тогда
				мДляУдаления.Добавить(ТекСтрока);
			КонецЕСли;
		КонецЕсли;
		Если ОтборПоВесу Тогда
			Если ВесОтбор > ТекСтрока.ГрузоподъемностьСцепки И мДляУдаления.Найти(ТекСтрока) = Неопределено Тогда
				мДляУдаления.Добавить(ТекСтрока);
			КонецЕСли;
		КонецЕсли;
		Если ОтборПоКоличествуУпаковок Тогда
			Если КоличествоУпаковокОтбор > ТекСтрока.МаксимальноеКоличествоУпаковок И мДляУдаления.Найти(ТекСтрока) = Неопределено Тогда
				мДляУдаления.Добавить(ТекСтрока);
			КонецЕСли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекСтрока Из мДляУдаления Цикл
		ТаблицаПодбора.Удалить(ТекСтрока);
	КонецЦикла;
	
	ОтборТСПоТипуЗаказаНаправлениюПеревозки();
	
	Если флПодборПоХарактеристикам И ОтборПоХарактеристикам Тогда 
		ОтборТСПоХарактеристикамЗаказов();
	КонецЕсли;
	
	Если ОтборПоМаршруту Тогда 
		ОтборТСПоМаршруту();
	КонецЕсли;
	
	Если НЕ МножественныйПодбор Тогда
		ПолучитьМассивТССогласноКритериевПодбора();
	КонецЕсли;
	
	Если ПустаяСтрока(СтрокаПоиска) Тогда
		Возврат;
	КонецЕсли;
	
	ПрименитьПоиск(СтрокаПоиска);
	
	Если ЗначениеЗаполнено(СтрокаПоиска) Тогда
		ТекущийЭлемент = Элементы.СтрокаПоиска;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьХарактеристикиТС(ПараметрыОтбораТС, ПолучитьВесообъемныеХарактеристикиЗаказ = Ложь)
	
	Если ПараметрыОтбораТС.Свойство("Заказы") Тогда
		мДокументы = ПараметрыОтбораТС.Заказы;
	ИначеЕсли ПараметрыОтбораТС.Свойство("Заказ") Тогда
		мДокументы = Новый Массив();
		мДокументы.Добавить(ПараметрыОтбораТС.Заказ);
	КонецЕсли;
		
	Если ПолучитьВесообъемныеХарактеристикиЗаказ Тогда
		мЗапрос = Новый Запрос();
		Если ПараметрыОтбораТС.Свойство("МаршрутныйЛист") И ЗначениеЗаполнено(ПараметрыОтбораТС.МаршрутныйЛист) Тогда
			мЗапрос.УстановитьПараметр("ДокументМЛ", ПараметрыОтбораТС.МаршрутныйЛист);
			мЗапрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	уатМаршрутныйЛист.ВесБрутто КАК ВесПоЗаказу,
			|	уатМаршрутныйЛист.Объем КАК ОбъемПоЗаказу,
			|	уатМаршрутныйЛист.КоличествоМест КАК КоличествоМест
			|ИЗ
			|	Документ.уатМаршрутныйЛист КАК уатМаршрутныйЛист
			|ГДЕ
			|	уатМаршрутныйЛист.Ссылка = &ДокументМЛ";
		ИначеЕсли ПараметрыОтбораТС.Свойство("Заказ") Тогда
			мЗапрос.УстановитьПараметр("ДокументЗаказ", мДокументы);
			мЗапрос.Текст =
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	уатЗаказГрузоотправителя.ВесБрутто КАК ВесПоЗаказу,
			|	уатЗаказГрузоотправителя.Объем КАК ОбъемПоЗаказу,
			|	уатЗаказГрузоотправителя.КоличествоМест КАК КоличествоМест
			|ИЗ
			|	Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
			|ГДЕ
			|	уатЗаказГрузоотправителя.Ссылка В (&ДокументЗаказ)";
		КонецЕсли;
		
		мВыборка = мЗапрос.Выполнить().Выбрать();
		ВесПоЗаказу    = 0;
		ОбъемПоЗаказу  = 0;
		КоличествоМест = 0;
		Пока мВыборка.Следующий() Цикл
			ВесПоЗаказу    = ВесПоЗаказу + мВыборка.ВесПоЗаказу;
			ОбъемПоЗаказу  = ОбъемПоЗаказу + мВыборка.ОбъемПоЗаказу;
			КоличествоМест = КоличествоМест + мВыборка.КоличествоМест;
		КонецЦикла;
		
		ВесОтбор                = ВесПоЗаказу;
		ОбъемОтбор              = ОбъемПоЗаказу;
		КоличествоУпаковокОтбор = КоличествоМест;
	КонецЕсли;

	// Подбор ТС
	МассивТС       = Новый Массив();
	соотПрицепыТС  = Новый Соответствие();
	Для Каждого ТекСтрока Из ПараметрыОтбораТС.ТС Цикл 
		МассивТС.Добавить(ТекСтрока.Ссылка);
		соотПрицепыТС.Вставить(ТекСтрока.Ссылка, Новый Структура("Прицеп1, Прицеп2, Вес, Объем, КоличествоУпаковок", ТекСтрока.Прицеп1, ТекСтрока.Прицеп2, ТекСтрока.Вес, ТекСтрока.Объем, ТекСтрока.КоличествоУпаковок));
	КонецЦикла;

	мЗапрос = Новый Запрос();
	мЗапрос.УстановитьПараметр("мсвВходящихТС", МассивТС);
	мЗапрос.УстановитьПараметр("ЭтоЯндекс", ЭтоЯндекс);
	
	мЗапрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатТС.Ссылка КАК ТС,
	|	уатТС.Модель КАК МодельТС,
	|	уатТС.ТипТС КАК ТипТС,
	|	уатМоделиТС.ТипТС КАК ТипМоделиТС,
	|	ВЫБОР
	|		КОГДА уатТС.Грузоподъемность <> 0
	|				И &ЭтоЯндекс
	|			ТОГДА уатТС.Грузоподъемность
	|		ИНАЧЕ ЕСТЬNULL(уатМоделиТС.Грузоподъемность, 0)
	|	КОНЕЦ КАК ГрузоподъемностьТС,
	|	ВЫБОР
	|		КОГДА уатТС.ОбъемКузова <> 0
	|				И &ЭтоЯндекс
	|			ТОГДА уатТС.ОбъемКузова
	|		ИНАЧЕ ЕСТЬNULL(уатМоделиТС.ОбъемКузова, 0)
	|	КОНЕЦ КАК ОбъемКузоваТС,
	|	ВЫБОР
	|		КОГДА уатТС.МаксимальноеКоличествоУпаковок <> 0
	|				И &ЭтоЯндекс
	|			ТОГДА уатТС.МаксимальноеКоличествоУпаковок
	|		ИНАЧЕ ЕСТЬNULL(уатМоделиТС.МаксимальноеКоличествоУпаковок, 0)
	|	КОНЕЦ КАК МаксимальноеКоличествоУпаковок,
	|	уатТС.ОсновнойВидПеревозки КАК ОсновнойВидПеревозки,
	|	уатТС.ПринадлежностьТС КАК ПринадлежностьТС
	|ПОМЕСТИТЬ ВРТ_ТС
	|ИЗ
	|	Справочник.уатТС КАК уатТС
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатМоделиТС КАК уатМоделиТС
	|		ПО уатТС.Модель = уатМоделиТС.Ссылка
	|ГДЕ
	|	уатТС.Ссылка В(&мсвВходящихТС)
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВРТ_ТС.ТС КАК ТС,
	|	ВРТ_ТС.МодельТС КАК МодельТС,
	|	ВРТ_ТС.ТипТС КАК ТипТС,
	|	ВРТ_ТС.ТипМоделиТС КАК ТипМоделиТС,
	|	ВРТ_ТС.ГрузоподъемностьТС КАК ГрузоподъемностьТС,
	|	ВРТ_ТС.ОбъемКузоваТС КАК ОбъемКузоваТС,
	|	ВРТ_ТС.МаксимальноеКоличествоУпаковок КАК МаксимальноеКоличествоУпаковок,
	|	ВРТ_ТС.ОсновнойВидПеревозки КАК ВидПеревозки,
	|	ВРТ_ТС.ПринадлежностьТС КАК ПринадлежностьТС
	|ИЗ
	|	ВРТ_ТС КАК ВРТ_ТС";

	
	Если Константы.уатЕдиницаИзмеренияВеса.Получить() = Перечисления.уатЕдиницыИзмеренияВеса.Килограмм Тогда 
		КоэфГрузоподъемности = 1000;
	Иначе 
		КоэфГрузоподъемности = 1;
	КонецЕсли;
	
	Если Константы.уатЕдиницаИзмеренияОбъема.Получить() = Перечисления.уатЕдиницыИзмеренияОбъема.Литр Тогда 
		КоэфОбъемаКузова = 1000;
	Иначе 
		КоэфОбъемаКузова = 1;
	КонецЕсли;
	
	тзТС = Новый ТаблицаЗначений();
	тзТС.Колонки.Добавить("ТС");
	тзТС.Колонки.Добавить("Прицеп1");
	тзТС.Колонки.Добавить("Прицеп2");
	тзТС.Колонки.Добавить("ГрузоподъемностьСцепки");
	тзТС.Колонки.Добавить("ОбъемСцепки");
	тзТС.Колонки.Добавить("МаксимальноеКоличествоУпаковок");
	тзТС.Колонки.Добавить("ВидПеревозки");
	тзТС.Колонки.Добавить("Маршрут");
	тзТС.Колонки.Добавить("ПринадлежностьТС");
	тзТС.Колонки.Добавить("МаршрутыСписок");
	
	мВыборка = мЗапрос.Выполнить().Выбрать();
	Пока мВыборка.Следующий() Цикл 
		ПрицепыТС = соотПрицепыТС.Получить(мВыборка.ТС);
		
		ГрузоподъемностьСцепки = мВыборка.ГрузоподъемностьТС * КоэфГрузоподъемности;
		ОбъемСцепки = мВыборка.ОбъемКузоваТС * КоэфОбъемаКузова;
		МаксимальноеКоличествоУпаковок = мВыборка.МаксимальноеКоличествоУпаковок;
		
		ГрузоподъемностьСцепки = ГрузоподъемностьСцепки + ПрицепыТС.Прицеп1.Модель.Грузоподъемность * КоэфГрузоподъемности;
		ОбъемСцепки = ОбъемСцепки + ПрицепыТС.Прицеп1.Модель.ОбъемКузова * КоэфОбъемаКузова;
		МаксимальноеКоличествоУпаковок = МаксимальноеКоличествоУпаковок + ПрицепыТС.Прицеп1.Модель.МаксимальноеКоличествоУпаковок;
		
		Если Не ПрицепыТС.Прицеп1 = ПрицепыТС.Прицеп2 Тогда 
			ГрузоподъемностьСцепки = ГрузоподъемностьСцепки + ПрицепыТС.Прицеп2.Модель.Грузоподъемность * КоэфГрузоподъемности;
			ОбъемСцепки = ОбъемСцепки + ПрицепыТС.Прицеп2.Модель.ОбъемКузова * КоэфОбъемаКузова;
			МаксимальноеКоличествоУпаковок = МаксимальноеКоличествоУпаковок + ПрицепыТС.Прицеп2.Модель.МаксимальноеКоличествоУпаковок;
		КонецЕсли;
		
		НоваяСтрока = тзТС.Добавить();
		НоваяСтрока.ТС = мВыборка.ТС;
		НоваяСтрока.Прицеп1 = ПрицепыТС.Прицеп1;
		НоваяСтрока.Прицеп2 = ПрицепыТС.Прицеп2;
		НоваяСтрока.ГрузоподъемностьСцепки = ГрузоподъемностьСцепки;
		НоваяСтрока.ОбъемСцепки            = ОбъемСцепки;
		НоваяСтрока.МаксимальноеКоличествоУпаковок = МаксимальноеКоличествоУпаковок;
		НоваяСтрока.ВидПеревозки                   = мВыборка.ВидПеревозки;
		НоваяСтрока.ПринадлежностьТС               = мВыборка.ПринадлежностьТС;

	КонецЦикла;
	
	СоответсвиеМаршрутов = уатАРМ.ПривязанныеМаршрутыТС(тзТС);
	
	Для Каждого ТекСтрока Из ПараметрыОтбораТС.ТС Цикл
		ТС = тзТС.НайтиСтроки(Новый Структура("ТС, Прицеп1, Прицеп2", ТекСтрока.Ссылка, ТекСтрока.Прицеп1, ТекСтрока.Прицеп2));
		Если ТС.Количество() Тогда
			ТекСтрока.ГрузоподъемностьСцепки = ТС[0].ГрузоподъемностьСцепки;
			ТекСтрока.ОбъемСцепки            = ТС[0].ОбъемСцепки;
			ТекСтрока.МаксимальноеКоличествоУпаковок = ТС[0].МаксимальноеКоличествоУпаковок;
			Если ТекСтрока.Свойство("ТипЗаказа") Тогда
				ТекСтрока.ТипЗаказа = ТС[0].ВидПеревозки;
			Иначе
				ТекСтрока.Вставить("ТипЗаказа", ТС[0].ВидПеревозки);
			КонецЕсли;
			Если ТекСтрока.Свойство("ПринадлежностьТС") Тогда
				ТекСтрока.ПринадлежностьТС = ТС[0].ПринадлежностьТС;
			Иначе
				ТекСтрока.Вставить("ПринадлежностьТС", ТС[0].ПринадлежностьТС);
			КонецЕсли;
			Если НЕ ТекСтрока.Свойство("Маршрут") Тогда
				ТекСтрока.Вставить("Маршрут");
			КонецЕсли;
			Если НЕ ТекСтрока.Свойство("МаршрутыСписок") Тогда
				ТекСтрока.Вставить("МаршрутыСписок");
			КонецЕсли;
			
			Маршруты = СоответсвиеМаршрутов.Получить(ТекСтрока.Ссылка);
			Если Маршруты <> Неопределено Тогда
				Для Каждого Маршрут Из Маршруты Цикл
					ПривязаныеМаршруты = "";
					ТекСтрока.МаршрутыСписок = Новый СписокЗначений();
					Для Каждого Маршрут Из Маршруты Цикл
						ТекСтрока.МаршрутыСписок.Добавить(Маршрут.Ссылка);
						Если Не ПустаяСтрока(ПривязаныеМаршруты) Тогда
							ПривязаныеМаршруты = ПривязаныеМаршруты + "; " + Маршрут.Наименование;
						Иначе 
							ПривязаныеМаршруты = Маршрут.Наименование;
						КонецЕсли;
					КонецЦикла;
					ТекСтрока.Маршрут = ПривязаныеМаршруты;
				КонецЦикла;
			КонецЕсли;
		Иначе
			ТС = тзТС.НайтиСтроки(Новый Структура("ТС", ТекСтрока.Ссылка));
			Если ТС.Количество() Тогда
				Если ТекСтрока.Свойство("ТипЗаказа") Тогда
					ТекСтрока.ТипЗаказа = ТС[0].ВидПеревозки;
				Иначе
					ТекСтрока.Вставить("ТипЗаказа", ТС[0].ВидПеревозки);
				КонецЕсли;
				Если ТекСтрока.Свойство("ПринадлежностьТС") Тогда
					ТекСтрока.ПринадлежностьТС = ТС[0].ПринадлежностьТС;
				Иначе
					ТекСтрока.Вставить("ПринадлежностьТС", ТС[0].ПринадлежностьТС);
				КонецЕсли;
				Если НЕ ТекСтрока.Свойство("Маршрут") Тогда
					ТекСтрока.Вставить("Маршрут");
				КонецЕсли;
				Если НЕ ТекСтрока.Свойство("МаршрутыСписок") Тогда
					ТекСтрока.Вставить("МаршрутыСписок");
				КонецЕсли;
				
				Маршруты = СоответсвиеМаршрутов.Получить(ТекСтрока.Ссылка);
				Если Маршруты <> Неопределено Тогда
					Для Каждого Маршрут Из Маршруты Цикл
						ПривязаныеМаршруты = "";
						ТекСтрока.МаршрутыСписок = Новый СписокЗначений();
						Для Каждого Маршрут Из Маршруты Цикл
							ТекСтрока.МаршрутыСписок.Добавить(Маршрут.Ссылка);
							Если Не ПустаяСтрока(ПривязаныеМаршруты) Тогда
								ПривязаныеМаршруты = ПривязаныеМаршруты + "; " + Маршрут.Наименование;
							Иначе 
								ПривязаныеМаршруты = Маршрут.Наименование;
							КонецЕсли;
						КонецЦикла;
						ТекСтрока.Маршрут = ПривязаныеМаршруты;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьВодителяТС(ТС)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ ПЕРВЫЕ 1
	                      |	уатЭкипажТС.Сотрудник КАК Сотрудник,
	                      |	уатЭкипажТС.ЧленЭкипажа КАК ЧленЭкипажа,
	                      |	ВЫБОР
	                      |		КОГДА уатЭкипажТС.ЧленЭкипажа = ЗНАЧЕНИЕ(Перечисление.уатЧленыЭкипажа.ОсновнойВодитель)
	                      |			ТОГДА 0
	                      |		ИНАЧЕ 1
	                      |	КОНЕЦ КАК Приоритет
	                      |ИЗ
	                      |	РегистрСведений.уатЭкипажТС КАК уатЭкипажТС
	                      |ГДЕ
	                      |	уатЭкипажТС.ТС = &ТС
	                      |	И (уатЭкипажТС.ЧленЭкипажа = ЗНАЧЕНИЕ(Перечисление.уатЧленыЭкипажа.ОсновнойВодитель)
	                      |			ИЛИ уатЭкипажТС.ЧленЭкипажа = ЗНАЧЕНИЕ(Перечисление.уатЧленыЭкипажа.ВторойВодитель))
	                      |
	                      |УПОРЯДОЧИТЬ ПО
	                      |	Приоритет");
	
	Запрос.УстановитьПараметр("ТС", ТС);
	Водитель         = Запрос.Выполнить().Выбрать();
	Если Водитель.Следующий() Тогда
		Возврат Водитель.Сотрудник;
	Иначе
		Возврат Справочники.Сотрудники.ПустаяСсылка();
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура СтрокаПоискаПриИзменении(Элемент)
	
	УстановитьОтборы();
	
КонецПроцедуры

&НаСервере
Процедура ПрименитьПоиск(СтрокаП)
	
	Если СтрокаП = "" Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("тзТС", ТаблицаПодбора.Выгрузить());
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВЫРАЗИТЬ(ТаблицаПодбора.Представление КАК СТРОКА(150)) КАК Представление,
	|	ВЫРАЗИТЬ(ТаблицаПодбора.ПеревозчикПредставление КАК СТРОКА(150)) КАК Перевозчик,
	|	ТаблицаПодбора.ТС КАК ТС,
	|	ВЫРАЗИТЬ(ТаблицаПодбора.ВодительПредставление КАК СТРОКА(150)) КАК Водитель
	|ПОМЕСТИТЬ втТС
	|ИЗ
	|	&тзТС КАК ТаблицаПодбора
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втТС.Представление КАК Представление,
	|	втТС.Перевозчик КАК Перевозчик,
	|	втТС.ТС КАК ТС,
	|	втТС.Водитель КАК Водитель
	|ИЗ
	|	втТС КАК втТС
	|ГДЕ
	|	НЕ втТС.Представление ПОДОБНО &СтрокаПоиска
	|	И НЕ втТС.Перевозчик ПОДОБНО &СтрокаПоиска
	|	И НЕ втТС.Водитель ПОДОБНО &СтрокаПоиска";

	// заменим спецсимволы
	Строка = СтрокаП;
	Строка = СтрЗаменить(Строка, "~", "~~");
	Строка = СтрЗаменить(Строка, "%", "~%");
	Строка = СтрЗаменить(Строка, "_", "~_");
	Строка = СтрЗаменить(Строка, "[", "~[");
	Строка = СтрЗаменить(Строка, "-", "~-");
	Строка = "%" + сокрЛП(Строка)+"%";
	Запрос.УстановитьПараметр("СтрокаПоиска", Строка);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		мСтроки = ТаблицаПодбора.НайтиСтроки(Новый Структура("ТС", Выборка.ТС));
		Для Каждого ТекСтрока Из мСтроки Цикл
			ТаблицаПодбора.Удалить(ТекСтрока);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТребуемыеХарактеристики()
	
	мсвЗаказы = Новый Массив();
	
	Если Параметры.Свойство("Заказ") Тогда 
		Если Параметры.Свойство("Заказы") Тогда 
			Для Каждого ТекСтрока Из Параметры.Заказы Цикл 
				мсвЗаказы.Добавить(ТекСтрока);
			КонецЦикла;
			
		Иначе 
			мсвЗаказы.Добавить(Параметры.Заказ);
		КонецЕсли;
		
	Иначе 
		Для Каждого ТекСтрока Из Параметры.МаршрутныйЛист.Заказы Цикл 
			Если ЗначениеЗаполнено(ТекСтрока.ЗаказГрузоотправителя) Тогда 
				мсвЗаказы.Добавить(ТекСтрока.ЗаказГрузоотправителя);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	МассивХарКи = Новый Массив();
	Для Каждого ТекЗаказ Из мсвЗаказы Цикл 
		Для Каждого ТекСтрока Из ТекЗаказ.Характеристики Цикл 
			Если ХарактеристикиЗаказов.НайтиПоЗначению(ТекСтрока.Характеристика) = Неопределено Тогда 
				ХарактеристикиЗаказов.Добавить(ТекСтрока.Характеристика, Строка(ТекСтрока.Характеристика), Истина);
				МассивХарКи.Добавить(ТекСтрока.Характеристика);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МассивХарКи", МассивХарКи);
	Запрос.Текст = "ВЫБРАТЬ
	               |	уатХарактеристикиЗаказов_уэ.Ссылка КАК Ссылка,
	               |	уатХарактеристикиЗаказов_уэ.Представление КАК Представление
	               |ИЗ
	               |	Справочник.уатХарактеристикиЗаказов_уэ КАК уатХарактеристикиЗаказов_уэ
	               |ГДЕ
	               |	НЕ уатХарактеристикиЗаказов_уэ.ПометкаУдаления
	               |	И НЕ уатХарактеристикиЗаказов_уэ.Ссылка В (&МассивХарКи)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Представление";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ХарактеристикиЗаказов.Добавить(Выборка.Ссылка, Выборка.Представление, Ложь);
	КонецЦикла;
	
	Если ХарактеристикиЗаказов.Количество() <> 0 Тогда
		ХарактеристикиОтбор.Очистить();
		Для Каждого ТекЭлемент Из ХарактеристикиЗаказов Цикл 
			Если ТекЭлемент.Пометка Тогда 
				ХарактеристикиОтбор.Добавить(ТекЭлемент.Значение, ТекЭлемент.Представление, ТекЭлемент.Пометка);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОтборТСПоХарактеристикамЗаказов()
	
	УдаляемыеСтроки = Новый Массив();
	
	Для Каждого ТекСтрока Из ТаблицаПодбора Цикл
		ХарактеристикиТС = ТекСтрока.ТС.Характеристики.Выгрузить(, "Характеристика").ВыгрузитьКолонку("Характеристика");
		
		Для Каждого ТекЭлемент Из ХарактеристикиОтбор Цикл 
			Если ТекЭлемент.Пометка Тогда 
				Если ХарактеристикиТС.Найти(ТекЭлемент.Значение) = Неопределено Тогда 
					УдаляемыеСтроки.Добавить(ТекСтрока);
					Прервать;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Для Каждого ТекСтрока Из УдаляемыеСтроки Цикл
		ТаблицаПодбора.Удалить(ТекСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОтборТСПоМаршруту()
	
	УдаляемыеСтроки = Новый Массив();
	
	Для Каждого ТекСтрока Из ТаблицаПодбора Цикл
		МаршрутыТС = ТекСтрока.МаршрутыСписок;
		Если МаршрутыТС.НайтиПоЗначению(МаршрутОтбор) = Неопределено Тогда 
			УдаляемыеСтроки.Добавить(ТекСтрока);
			Продолжить;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекСтрока Из УдаляемыеСтроки Цикл
		ТаблицаПодбора.Удалить(ТекСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ХарактеристикиОтборПослеОтметки(Список, ДополнительныеПараметры) Экспорт
	
	Если Список = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ХарактеристикиОтбор.Очистить();
	Для Каждого ТекЭлемент Из Список Цикл 
		Если ТекЭлемент.Пометка Тогда 
			ХарактеристикиОтбор.Добавить(ТекЭлемент.Значение, ТекЭлемент.Представление, ТекЭлемент.Пометка);
		КонецЕсли;
	КонецЦикла;
	
	УстановитьОтборы();
	
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьДоступностьТСпоРадиусуПриИзменении(Элемент)
	Элементы.РадиусДоступностиТС.Доступность = УчитыватьДоступностьТСпоРадиусу;
	УстановитьОтборы();
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьМодельИТипТСПриИзменении(Элемент)
	УстановитьОтборы();
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьДоступностьТСпоСостояниюПриИзменении(Элемент)
	УстановитьОтборы();
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьПросроченныеДокументыПриИзменении(Элемент)
	УстановитьОтборы();
КонецПроцедуры

&НаКлиенте
Процедура РадиусДоступностиТСПриИзменении(Элемент)
	УстановитьОтборы();
КонецПроцедуры

&НаКлиенте
Процедура УчитыватьETAПриИзменении(Элемент)
	УстановитьОтборы();
КонецПроцедуры

&НаСервере
Процедура ПолучитьМассивТССогласноКритериевПодбора()
	
	мсвТСДляПодбора = Новый Массив();
	Для Каждого ТекСтрокаТС Из ТаблицаПодбора Цикл 
		мсвТСДляПодбора.Добавить(
			Новый Структура(
				"ТС, Прицеп1, Прицеп2",
				ТекСтрокаТС.ТС,
				ТекСтрокаТС.Прицеп1,
				ТекСтрокаТС.Прицеп2
			)
		);
	КонецЦикла;
	
	ПараметрыПодбора = Новый Структура();
	ПараметрыПодбора.Вставить("МассивТС",                              мсвТСДляПодбора);
	Если ЗначениеЗаполнено(Заказ) Тогда
		ПараметрыПодбора.Вставить("Заказ",                             Заказ);
	Иначе
		ПараметрыПодбора.Вставить("МаршрутныйЛист",                    МаршрутныйЛист);
	КонецЕсли;

	ПараметрыПодбора.Вставить("ЛатОтправления",                        ЛатОтправления);
	ПараметрыПодбора.Вставить("ЛонОтправления",                        ЛонОтправления);
	ПараметрыПодбора.Вставить("ТекОрганизация",                        ТекОрганизация);
	ПараметрыПодбора.Вставить("УчитыватьМодельИТипТС",                 УчитыватьМодельИТипТС);
	ПараметрыПодбора.Вставить("УчитыватьДоступностьТСпоСостоянию",     УчитыватьДоступностьТСпоСостоянию);
	
	Если УчитыватьДоступностьТСпоРадиусу Тогда 
		ПараметрыПодбора.Вставить("УчитыватьДоступностьТСпоРадиусу", Истина);
		ПараметрыПодбора.Вставить("РадиусПодбораПоЗаказу", РадиусДоступностиТС);
	КонецЕсли;
	
	ПараметрыПодбора.Вставить("УчитыватьПросроченныеДокументы",      УчитыватьПросроченныеДокументы);
	ПараметрыПодбора.Вставить("УчитыватьETA",                        УчитыватьETA);
	ПараметрыПодбора.Вставить("НастройкаВремяАктуальностиКоординат", НастройкаВремяАктуальностиКоординат * 60);
	
	ТабПодходящихТС = уатЗащищенныеФункцииСервер_проф.ПолучитьМассивТССогласноКритериевПодбора(ПараметрыПодбора);
		
	мсвТС = Новый Массив();
	НаложитьОтборНаСписокТСПоETA(ТабПодходящихТС, мсвТС, УчитыватьETA, ЛатОтправления,
		ЛонОтправления,
		ТипКартографии, ОтправлениеПо);
	
	УдаляемыеСтроки = Новый Массив();
	Для Каждого ТекСтрока Из ТаблицаПодбора Цикл
		Если мсвТС.Найти(ТекСтрока.ТС) = Неопределено Тогда 
			УдаляемыеСтроки.Добавить(ТекСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекСтрока Из УдаляемыеСтроки Цикл
		ТаблицаПодбора.Удалить(ТекСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура НаложитьОтборНаСписокТСПоETA(ТабПодходящихТС, мсвТС, УчитыватьETA, ЛатОтпрПоЗаказу, ЛонОтпрПоЗаказу, ТипКартографии, ДатаОтправленияПоЗаказу)
	
	КартографияВключена = ТипКартографии = ПредопределенноеЗначение("Перечисление.уатТипыЭлектронныхКарт.OSM")
		ИЛИ ТипКартографии = ПредопределенноеЗначение("Перечисление.уатТипыЭлектронныхКарт.Яндекс");
	Для Каждого ТекТС Из ТабПодходящихТС Цикл 
		Если КартографияВключена И УчитыватьETA И ТекТС.УчитыватьETA Тогда 
			Если ТекТС.ЛатПунктаДляETA = 0 И ТекТС.ЛонПунктаДляETA = 0 Тогда 
				Продолжить;
			КонецЕсли;
			
			ТекстОшибки = "";
			ПоказательETA = уатЭлектронныеКартыСервер.РасчитатьETA_OSM(
				Новый Структура("Лат, Лон", ТекТС.ЛатПунктаДляETA, ТекТС.ЛонПунктаДляETA),
				Новый Структура("Лат, Лон", ЛатОтпрПоЗаказу, ЛонОтпрПоЗаказу),
				ТекТС.ВремяДляETA,
				Новый Структура("ТипКартографии", ТипКартографии),
				ТекстОшибки);
			
			Если Не ТекстОшибки = "" Тогда 
				Продолжить;
			КонецЕсли;
			
			Если ПоказательETA.ETA > ДатаОтправленияПоЗаказу Тогда 
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		мсвТС.Добавить(ТекТС.ТС);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ТСВМЛПриИзмененииВопрос(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОбновитьТСвПЛсервер(ДопПараметры.МассивПЛ);
		Закрыть(ДопПараметры.Результат);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьТСвПЛсервер(МассивПЛ)
	
	уатАРМ.ОбновитьТСвПЛсервер(МассивПЛ);

КонецПроцедуры

#КонецОбласти

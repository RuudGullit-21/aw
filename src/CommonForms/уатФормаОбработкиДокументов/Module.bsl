#Область ОписаниеПеременных

&НаКлиенте
Перем ФормаДлительнойОперации;
&НаКлиенте
Перем ПараметрыОбработчикаОжидания;
&НаКлиенте
Перем ПараметрыОбработчикаОжиданияОптимизацияМаршрута;
&НаКлиенте
Перем ОповещениеПослеДлительнойОперации;
&НаКлиенте
Перем ОповещениеПослеДлительнойОперацииОптимизацияМаршрута;
&НаКлиенте
Перем IDзадачиВнешнийМаршрутизатор;
&НаКлиенте
Перем IDзадачиВнешнийМаршрутизаторОптимизацияМаршрута;
&НаКлиенте
Перем СводнаяИнформацияМаршрутизации;

#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Элементы.ОбъединитьВЭтапИрассчитатьМетрики.Видимость = уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП();
	Элементы.ОптимизацияМаршрута.Видимость = уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП();
		
	ПроверитьВерсиюИРежимСовместимостиПлатформы();
	
	Параметры.Свойство("ДополнительнаяОбработкаСсылка", ДополнительнаяОбработкаСсылка);
	
	ЗагрузитьНастройкиОбработки();
	МассивДокументов.ЗагрузитьЗначения(Параметры.МассивОбъектов);
	КонтекстныйВызов = ТипЗнч(Параметры.МассивОбъектов) = Тип("Массив");
	
	Если КонтекстныйВызов И Параметры.МассивОбъектов.Количество() <> 0 Тогда
		Элементы.ГруппаМЛ.Видимость = ТипЗнч(Параметры.МассивОбъектов[0]) = Тип("ДокументСсылка.уатМаршрутныйЛист");
	КонецЕсли;
	
	Элементы.ФормаНазад.Видимость = Ложь;
	
	ЗапретРедактированияВстроен = Метаданные.НайтиПоПолномуИмени("ОбщийМодуль.ЗапретРедактированияРеквизитовОбъектовКлиент") <> Неопределено;
	
	Если КонтекстныйВызов Тогда
		ВыполнитьДействияПриКонтекстномОткрытии();
	Иначе
		Заголовок = НСтр("ru='Обработка документов';en='Document handling'");
		ЗаполнитьСписокТиповОбъектов();
	КонецЕсли;
	
	НайтиФормуРазблокированияРеквизитов();
	
	СформироватьПояснениеОНастроенныхИзменениях();
	ОбновитьВидимостьЭлементов();
	
	Если Не КонтекстныйВызов Тогда
		РежимОткрытияОкна = РежимОткрытияОкнаФормы.Независимый;
	КонецЕсли;
	Элементы.РасчетРасходов.Доступность = ПолучитьФункциональнуюОпцию("уатИспользоватьПлановыеУслуги_уэ");
	
	Если уатОбщегоНазначенияПовтИсп.ВариантПоставкиПРОФ() Тогда
		Элементы.КонвертацияВФормат1121.Заголовок = "Конвертация в формат ""Релиз 2.2.21""";
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	
	Если ВРег(ИсточникВыбора.ИмяФормы) = ВРег("Обработка.ГрупповоеИзменениеРеквизитов.Форма.ДополнительныеПараметры") Тогда
		
		ПерезаполнитьСтруктуруРеквизитовОбъекта = Ложь;
		Если ТипЗнч(ВыбранноеЗначение) = Тип("Структура") Тогда
			Объект.РежимРазработчика = ВыбранноеЗначение.РежимРазработчика;
			ОтключитьСвязиПараметровВыбора = ВыбранноеЗначение.ОтключитьСвязиПараметровВыбора;
			Если УчитыватьИерархию И ОбрабатыватьРекурсивно <> ВыбранноеЗначение.ОбрабатыватьРекурсивно Тогда
				ОбрабатыватьРекурсивно = ВыбранноеЗначение.ОбрабатыватьРекурсивно;
				ПерезаполнитьСтруктуруРеквизитовОбъекта = Истина;
				ИнициализироватьКомпоновщикНастроек();
			КонецЕсли;
			Объект.ИзменятьВТранзакции = ВыбранноеЗначение.ИзменятьВТранзакции;
			Объект.ПрерыватьПриОшибке  = ВыбранноеЗначение.ПрерыватьПриОшибке;
			
			Если Объект.ПоказыватьСлужебныеРеквизиты <> ВыбранноеЗначение.ПоказыватьСлужебныеРеквизиты Тогда
				Объект.ПоказыватьСлужебныеРеквизиты = ВыбранноеЗначение.ПоказыватьСлужебныеРеквизиты;
				ПерезаполнитьСтруктуруРеквизитовОбъекта = Истина;
			КонецЕсли;
			
			ТОНастройкаПорции          = ВыбранноеЗначение.НастройкаПорции;
			ТОПроцентОбъектовВПорции   = ВыбранноеЗначение.ПроцентОбъектовВПорции;
			ТОЧислоОбъектовВПорции     = ВыбранноеЗначение.ЧислоОбъектовВПорции;
			
			Если ПерезаполнитьСтруктуруРеквизитовОбъекта И Не ПустаяСтрока(ВидыИзменяемыхОбъектов) Тогда
				СохраненныеНастройки = Неопределено;
				ЗагрузитьМетаданныеОбъекта(Истина, СохраненныеНастройки);
				Если СохраненныеНастройки <> Неопределено И Объект.ТипОперации <> "ВыполнитьАлгоритм" Тогда
					УстановитьНастройкуИзменения(СохраненныеНастройки);
				КонецЕсли;
			КонецЕсли;
			
			ОбновитьВидимостьЭлементов();
			СохранитьНастройки();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ВидИзменяемыхОбъектовНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ОписаниеОповещения = Новый ОписаниеОповещения("ВидИзменяемыхОбъектовВыборСделан", ЭтотОбъект);
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("ВыбранныеТипы", ВидыИзменяемыхОбъектов);
	ПараметрыФормы.Вставить("ПоказыватьСкрытые", Объект.ПоказыватьСлужебныеРеквизиты);
	ОткрытьФорму("Обработка.ГрупповоеИзменениеРеквизитов.Форма.ВыборВидаОбъектов", ПараметрыФормы, , , , , ОписаниеОповещения);
КонецПроцедуры

&НаКлиенте
Процедура ПредставлениеИзменяемыхОбъектовПриИзменении(Элемент)
	ВыбранныйТип = Элементы.ПредставлениеИзменяемыхОбъектов.СписокВыбора.НайтиПоЗначению(ПредставлениеИзменяемыхОбъектов);
	Если ВыбранныйТип = Неопределено Тогда
		Для Каждого Тип Из Элементы.ПредставлениеИзменяемыхОбъектов.СписокВыбора Цикл
			Если СтрНайти(НРег(Тип.Представление), НРег(ПредставлениеИзменяемыхОбъектов)) = 1 Тогда
				ВыбранныйТип = Тип;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ВыбранныйТип = Неопределено Тогда
		ПредставлениеИзменяемыхОбъектов = ПредставлениеИзменяемыхОбъектов();
	Иначе
		ПредставлениеИзменяемыхОбъектов = ВыбранныйТип.Представление;
		ВидыИзменяемыхОбъектов = ВыбранныйТип.Значение;
		ВыбранныеОбъектыВКонтексте.Очистить();
		ПерестроитьИнтерфейсФормыДляВыбранногоВидаОбъектов();
	КонецЕсли;
	
	Алгоритм = ПредставлениеИзменяемыхОбъектов;
КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении(Элемент)
	
	Если Объект.ТипОперации = "ВыполнитьАлгоритм" Тогда
		Элементы.СтраницыВидОперации.ТекущаяСтраница = Элементы.ПроизвольныйАлгоритм;
		Элементы.ФормаИзменить.Заголовок = НСтр("ru='Выполнить';en='Complete'");
		Элементы.РанееИзмененныеРеквизиты.Видимость = Ложь;
		Элементы.Алгоритмы.Видимость = Истина;
	Иначе
		Элементы.СтраницыВидОперации.ТекущаяСтраница = Элементы.ИзменяемыеРеквизиты;
		Элементы.ФормаИзменить.Заголовок = НСтр("ru='Обработать документы';en='Process documents'");
		Элементы.РанееИзмененныеРеквизиты.Видимость = Истина;
		Элементы.Алгоритмы.Видимость = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ФлагЗакрытияПриИзменении(Элемент)
	Элементы.ДекорацияЗакрытие.Видимость = ФлагЗакрытия;
	
	Если ФлагЗакрытия Тогда
		ДопПараметры = Новый Структура("Документ, УстановленФлаг", МассивДокументов[0].Значение, Истина);
		ТекстНСТР = НСтр("en='Enter closing date and time';ru='Введите дату и время закрытия'");
		ПоказатьВводДаты(Новый ОписаниеОповещения("ЗакрытиеВводДатыЗавершение", ЭтотОбъект, ДопПараметры),
			ДатаЗакрытияПоУмолчанию(), ТекстНСТР, ЧастиДаты.ДатаВремя);
	Иначе
		Элементы.ДекорацияЗакрытие.Заголовок = "";
		ДатаЗакрытия = '00010101';
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ДатаЗакрытияПоУмолчанию()
	Если МассивДокументов.Количество() = 1 Тогда
		Возврат Документы.уатМаршрутныйЛист.ДатаЗакрытияПоУмолчанию(МассивДокументов[0].Значение, ТекущаяДата());
	Иначе
		Возврат ТекущаяДата();
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ОбъединитьВЭтапИрассчитатьМетрикиПриИзменении(Элемент)
	
	Элементы.ДекорацияОбъеденитьВЭтап.Видимость = ОбъединитьВЭтапИрассчитатьМетрики;
	Элементы.ДекорацияОбъеденитьВЭтап.Заголовок = ТекущаяДата();
	Если ОбъединитьВЭтапИрассчитатьМетрики Тогда
		ДатаМаршрутизацииЭтапа	 = ТекущаяДата();
		НаименованиеЭтапа		 = ТекущаяДата();
		РодительЭтапа			 = ПредопределенноеЗначение("Справочник.уатЭтапыМаршрутизации.ПустаяСсылка");
		
		ПараметрыОткрытияФормы = Новый Структура();
		ПараметрыОткрытияФормы.Вставить("Маршрутизация", Истина);
		Оповещение = Новый ОписаниеОповещения("МаршрутизацияСохранятьЭтап", ЭтотОбъект);
		
		ОткрытьФорму("Справочник.уатЭтапыМаршрутизации.Форма.ФормаЭлемента",ПараметрыОткрытияФормы, ЭтотОбъект,,,,Оповещение);
	Конецесли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОбъеденитьВЭтапНажатие(Элемент)
	Если ОбъединитьВЭтапИрассчитатьМетрики Тогда
		
		ПараметрыОткрытияФормы = Новый Структура();
		ПараметрыОткрытияФормы.Вставить("Маршрутизация", Истина);
		ПараметрыОткрытияФормы.Вставить("ДатаМаршрутизацииЭтапа",	 ДатаМаршрутизацииЭтапа);
		ПараметрыОткрытияФормы.Вставить("НаименованиеЭтапа",		 НаименованиеЭтапа);
		ПараметрыОткрытияФормы.Вставить("РодительЭтапа",			 РодительЭтапа);
		Оповещение = Новый ОписаниеОповещения("МаршрутизацияСохранятьЭтап", ЭтотОбъект);
		
		ОткрытьФорму("Справочник.уатЭтапыМаршрутизации.Форма.ФормаЭлемента",ПараметрыОткрытияФормы, ЭтотОбъект,,,,Оповещение);
		
	Конецесли;
КонецПроцедуры

&НаКлиенте
Процедура РасчетИтоговПриИзменении(Элемент)
	РасчетДоходов = РасчетИтогов;
	РасчетРасходов = РасчетИтогов;
	РасчетРасходовФакт = РасчетИтогов;
	Элементы.РасчетДоходов.Доступность = НЕ РасчетИтогов;
	Элементы.РасчетРасходов.Доступность = НЕ РасчетИтогов;
	Элементы.РасчетРасходовФакт.Доступность = НЕ РасчетИтогов;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыКомпоновщикНастроекНастройкиОтбор

&НаКлиенте
Процедура ОбновитьНадписи()
	ОбновитьНадписиСервер();
КонецПроцедуры

&НаСервере
Процедура ОбновитьНадписиСервер()
	ОбновитьНадписьКоличествоВыбранных();
	СформироватьПояснениеОНастроенныхИзменениях();
	Алгоритм = ПредставлениеИзменяемыхОбъектов;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыОбъектыКоторыеНеУдалосьИзменить

&НаКлиенте
Процедура ОбъектыКоторыеНеУдалосьИзменитьПередНачаломИзменения(Элемент, Отказ)
	Отказ = Истина;
	Если ТипЗнч(Элемент.ТекущиеДанные.Объект) <> Тип("Строка") Тогда
		ПоказатьЗначение(, Элемент.ТекущиеДанные.Объект);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбъектыКоторыеНеУдалосьИзменитьПриАктивизацииСтроки(Элемент)
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		Причина = Элемент.ТекущиеДанные.Причина;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыРеквизитыОбъекта

&НаКлиенте
Процедура РеквизитыОбъектаПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	Если Поле <> Неопределено И Поле.Имя = Элементы.РеквизитыОбъектаЗначение.Имя 
		И РеквизитыОбъекта.НайтиПоИдентификатору(Строка).ДопустимыеТипы.СодержитТип(Тип("Строка"))
		И Не СтрНачинаетсяС(РеквизитыОбъекта.НайтиПоИдентификатору(Строка).Значение, "'") Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СлужебныеРеквизитыОбъектаПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	Если Поле <> Неопределено И Поле.Имя = Элементы.СлужебныеРеквизитыОбъектаЗначение.Имя 
		И РеквизитыОбъекта.НайтиПоИдентификатору(Строка).ДопустимыеТипы.СодержитТип(Тип("Строка"))
		И Не СтрНачинаетсяС(РеквизитыОбъекта.НайтиПоИдентификатору(Строка).Значение, "'") Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыОбъектаПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	ОписаниеРеквизита = РеквизитыОбъекта.НайтиПоИдентификатору(ПараметрыПеретаскивания.Значение[0]);
	ШаблонВставки = "[%1]";
	
	ТекстДляВставки = ПодставитьПараметрыВСтроку(ШаблонВставки, ОписаниеРеквизита.Представление);
	ТекущиеДанные = РеквизитыОбъекта.НайтиПоИдентификатору(Строка);
	Если Не ПустаяСтрока(ТекущиеДанные.Значение) Тогда
		ТекстДляВставки = "+" + ТекстДляВставки;
	КонецЕсли;
	ТекущиеДанные.Значение = Строка(ТекущиеДанные.Значение) + ТекстДляВставки;
	Если Не СтрНачинаетсяС(СокрЛ(ТекущиеДанные.Значение), "=") Тогда
		ТекущиеДанные.Значение = "=" + ТекущиеДанные.Значение;
	КонецЕсли;
	ТекущиеДанные.Изменять = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СлужебныеРеквизитыОбъектаПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	ОписаниеРеквизита = РеквизитыОбъекта.НайтиПоИдентификатору(ПараметрыПеретаскивания.Значение[0]);
	ШаблонВставки = "[%1]";
	
	ТекстДляВставки = ПодставитьПараметрыВСтроку(ШаблонВставки, ОписаниеРеквизита.Представление);
	ТекущиеДанные = РеквизитыОбъекта.НайтиПоИдентификатору(Строка);
	Если Не ПустаяСтрока(ТекущиеДанные.Значение) Тогда
		ТекстДляВставки = "+" + ТекстДляВставки;
	КонецЕсли;
	ТекущиеДанные.Значение = Строка(ТекущиеДанные.Значение) + ТекстДляВставки;
	Если Не СтрНачинаетсяС(СокрЛ(ТекущиеДанные.Значение), "=") Тогда
		ТекущиеДанные.Значение = "=" + ТекущиеДанные.Значение;
	КонецЕсли;
	ТекущиеДанные.Изменять = Истина;
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыОбъектаЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.РеквизитыОбъекта.ТекущиеДанные;
	Если ТекущиеДанные.ДопустимыеТипы.Типы().Количество() = 1 И ТекущиеДанные.ДопустимыеТипы.СодержитТип(Тип("Строка")) Тогда
		СтандартнаяОбработка = Ложь;
		ОписаниеОповещения = Новый ОписаниеОповещения("РеквизитыОбъектаЗначениеЗавершениеВыбора", ЭтотОбъект, ТекущиеДанные);
		ОткрытьФорму("Обработка.ГрупповоеИзменениеРеквизитов.Форма.РедактированиеФормулы", ПараметрыКонструктора(ТекущиеДанные.Значение), , , , ,
			ОписаниеОповещения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СлужебныеРеквизитыОбъектаЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекущиеДанные = Элементы.СлужебныеРеквизитыОбъекта.ТекущиеДанные;
	Если ТекущиеДанные.ДопустимыеТипы.Типы().Количество() = 1 И ТекущиеДанные.ДопустимыеТипы.СодержитТип(Тип("Строка")) Тогда
		СтандартнаяОбработка = Ложь;
		ОписаниеОповещения = Новый ОписаниеОповещения("РеквизитыОбъектаЗначениеЗавершениеВыбора", ЭтотОбъект, ТекущиеДанные);
		ОткрытьФорму("Обработка.ГрупповоеИзменениеРеквизитов.Форма.РедактированиеФормулы", ПараметрыКонструктора(ТекущиеДанные.Значение), , , , ,
			ОписаниеОповещения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ЕстьОшибкиВВыражениях()
	Результат = Ложь;
	Для Индекс = 0 По РеквизитыОбъекта.Количество() - 1 Цикл
		ОписаниеРеквизита = РеквизитыОбъекта[Индекс];
		Если ОписаниеРеквизита.Изменять И ТипЗнч(ОписаниеРеквизита.Значение) = Тип("Строка") И СтрНачинаетсяС(ОписаниеРеквизита.Значение, "=") Тогда
			ТекстОшибки = "";
			Если ЕстьОшибкаВВыражении(ОписаниеРеквизита.Значение, ТекстОшибки) Тогда
				Результат = Истина;
				Сообщение = Новый СообщениеПользователю;
				Сообщение.Поле = ПодставитьПараметрыВСтроку("РеквизитыОбъекта[%1].Значение", Формат(Индекс, "ЧГ=0"));
				Сообщение.Текст = ТекстОшибки;
				Сообщение.Сообщить();
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Изменить(Команда)
	
	Если Объект.ТипОперации = "ВыполнитьАлгоритм" Тогда
		
		ПраваВыполненияКода = ДоступныеПраваВыполнениеКода();
		
		Если Не ПраваВыполненияКода.ДоступноВыполнениеКода Тогда
			Возврат;
		КонецЕсли;
		
		Если Не ПраваВыполненияКода.ДоступноВыполнениеКодаВНебезопасномРежиме И Объект.РежимВыполнения = 1 Тогда
			Объект.РежимВыполнения = 0; // Переключаем на безопасный режим
		КонецЕсли;
		
	КонецЕсли;
	
	НазначениеКнопки = "Изменить";
	Если ВыполняетсяОбработка Тогда
		НазначениеКнопки = "Прервать";
	ИначеЕсли ОбработкаЗавершена Или Элементы.Страницы.ТекущаяСтраница = Элементы.ИзменениеОбъектов Тогда
		НазначениеКнопки = "Закрыть";
		Если ОбъектыКоторыеНеУдалосьИзменить.Количество() > 0 Тогда
			НазначениеКнопки = "Повторить";
		КонецЕсли;
	КонецЕсли;
	
	Если НазначениеКнопки = "Закрыть" Тогда
		Закрыть();
		Возврат;
	КонецЕсли;
	
	Если НазначениеКнопки = "Прервать" Тогда
		ТекущееСостояниеИзменения.ПрерватьИзменение = Истина;
		Если Не ДлительнаяОперация.Статус = "Выполнено" Тогда
			ЗавершитьИзменениеОбъектов();
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если НазначениеКнопки = "Изменить" Тогда
		Если Не ЕстьВыбранныеОбъекты() Тогда
			ПоказатьПредупреждение(, НСтр("ru='Не указаны элементы для изменения';en='No items specified for change'"));
			Возврат;
		КонецЕсли;
		
		Если ЕстьОшибкиВВыражениях() Тогда
			Возврат;
		КонецЕсли;
		
		ОбработатьДокументы();
		
		Если ОбъединитьВЭтапИрассчитатьМетрики ИЛИ ОптимизацияМаршрута Тогда
			Если ОптимизацияМаршрута Тогда
				ОптимизацияМаршрутаМожноВыполнять = Истина;
				ПодключитьОбработчикОжидания("ОптимизацияМаршрута",1);
			КонецЕсли;
			Если ОбъединитьВЭтапИрассчитатьМетрики Тогда
				ОбъединитьВЭтапИрассчитатьМетрики(МассивДокументов);
			КонецЕсли;
			ПодключитьОбработчикОжидания("ПослеОбработкиДокументов",1);
		Иначе
			ВыполнитьИзменениеПроверкаОтбораВыполнена();
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Если НазначениеКнопки = "Повторить" Тогда
		ВыполнитьИзменениеПроверкиВыполнены();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеОбработкиДокументов()
	
	флагОбработкаДокументовОптимизацияМаршрута = Ложь;
	Если ОптимизацияМаршрута Тогда
		Если ОбработкаДокументовОптимизацияМаршрутаКолВо >= МассивДокументов.Количество() Тогда
			флагОбработкаДокументовОптимизацияМаршрута = Истина;
		КонецЕсли;
	Иначе
		флагОбработкаДокументовОптимизацияМаршрута = Истина;
	КонецЕсли;
	
	флагОбъединитьВЭтапИрассчитатьМетрики = Ложь;
	Если ОбъединитьВЭтапИрассчитатьМетрики Тогда
		Если ОбработкаДокументовВнешняяМаршрутизацияВыполнена Тогда
			флагОбъединитьВЭтапИрассчитатьМетрики = Истина;
		КонецЕсли;
	Иначе
		флагОбъединитьВЭтапИрассчитатьМетрики = Истина;
	КонецЕсли;

	Если флагОбъединитьВЭтапИрассчитатьМетрики 
		И флагОбработкаДокументовОптимизацияМаршрута Тогда
		
		ОбработкаДокументовВнешняяМаршрутизацияВыполнена = Ложь;
		ОбработкаДокументовОптимизацияМаршрутаВыполнена  = 0;
		ВыполнитьИзменениеПроверкаОтбораВыполнена();
		ОтключитьОбработчикОжидания("ПослеОбработкиДокументов");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Назад(Команда)
	
	НазадСервер();
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьПараметрыИзменения(Команда)
	
	ПараметрыФормы = Новый Структура;
	
	ПараметрыФормы.Вставить("ИзменятьВТранзакции",    Объект.ИзменятьВТранзакции);
	ПараметрыФормы.Вставить("ОбрабатыватьРекурсивно", ОбрабатыватьРекурсивно);
	ПараметрыФормы.Вставить("ПрерыватьПриОшибке",     Объект.ПрерыватьПриОшибке);
	ПараметрыФормы.Вставить("НастройкаПорции",        ТОНастройкаПорции);
	ПараметрыФормы.Вставить("ПроцентОбъектовВПорции", ТОПроцентОбъектовВПорции);
	ПараметрыФормы.Вставить("ЧислоОбъектовВПорции",   ТОЧислоОбъектовВПорции);
	ПараметрыФормы.Вставить("УчитыватьИерархию",      УчитыватьИерархию);
	ПараметрыФормы.Вставить("ПоказыватьСлужебныеРеквизиты",     Объект.ПоказыватьСлужебныеРеквизиты);
	ПараметрыФормы.Вставить("КонтекстныйВызов", КонтекстныйВызов);
	ПараметрыФормы.Вставить("РежимРазработчика", Объект.РежимРазработчика);
	ПараметрыФормы.Вставить("ОтключитьСвязиПараметровВыбора", ОтключитьСвязиПараметровВыбора);
	
	
	ОткрытьФорму("Обработка.ГрупповоеИзменениеРеквизитов.Форма.ДополнительныеПараметры", ПараметрыФормы, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияЗакрытиеНажатие(Элемент)
	ДопПараметры = Новый Структура("Документ", МассивДокументов[0].Значение);
		ТекстНСТР = НСтр("en='Enter closing date and time';ru='Введите дату и время закрытия'");
		ПоказатьВводДаты(Новый ОписаниеОповещения("ЗакрытиеВводДатыЗавершение", ЭтотОбъект, ДопПараметры),
			?(ДатаЗакрытия = '00010101', ДатаЗакрытияПоУмолчанию(), ДатаЗакрытия), ТекстНСТР, ЧастиДаты.ДатаВремя);
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// ПОДКЛЮЧАЕМЫЕ ОБРАБОТЧИКИ

&НаКлиенте
Процедура Подключаемый_ЗначениеПриИзменении(ПолеФормы)
	Если ПолеФормы.Имя = "СлужебныеРеквизитыОбъектаЗначение" Тогда
		ТекущиеДанные = ПолеФормы.Родитель.ТекущиеДанные;
		ТекущиеДанные.Изменять = ЗначениеЗаполнено(ТекущиеДанные.Значение);
		ОбновитьСчетчикиИзменяемыхРеквизитов(Элементы.РеквизитыОбъекта);
		ПодключитьОбработчикОжидания("ОбновитьПояснениеОНастроенныхИзменениях", 0.1, Истина);
	Иначе
		ТекущиеДанные = ПолеФормы.Родитель.ТекущиеДанные;
		ТекущиеДанные.Изменять = ЗначениеЗаполнено(ТекущиеДанные.Значение);
		ОбновитьСчетчикиИзменяемыхРеквизитов(ПолеФормы.Родитель);
		ПодключитьОбработчикОжидания("ОбновитьПояснениеОНастроенныхИзменениях", 0.1, Истина);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПриИзмененииФлажка(ПолеФормы)
	Если ПолеФормы.Имя = "СлужебныеРеквизитыОбъектаИзменять" Тогда
		ОбновитьСчетчикиИзменяемыхРеквизитов(Элементы.РеквизитыОбъекта);
	Иначе
		ОбновитьСчетчикиИзменяемыхРеквизитов(ПолеФормы.Родитель);
	КонецЕсли;
	ПодключитьОбработчикОжидания("ОбновитьПояснениеОНастроенныхИзменениях", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_УстановитьНастройку(Команда)
	
	Если СтрНачинаетсяС(Команда.Имя, "Алгоритмы") Тогда
		МестоРазмещенияКоманд = Элементы.Алгоритмы;
		ШаблонИмениКоманды = МестоРазмещенияКоманд.Имя + "НастройкаИзменений";
		ИндексКоманды = Число(Сред(Команда.Имя, СтрДлина(ШаблонИмениКоманды) + 1));
		КодАлгоритма = ИсторияАлгоритмовСписок[ИндексКоманды].Значение;
		Алгоритм = ИсторияАлгоритмовСписок[ИндексКоманды].Представление;
		СформироватьПояснениеОНастроенныхИзменениях();
	Иначе
		МестоРазмещенияКоманд = Элементы.РанееИзмененныеРеквизиты;
		ШаблонИмениКоманды = МестоРазмещенияКоманд.Имя + "НастройкаИзменений";
		ИндексКоманды = Число(Сред(Команда.Имя, СтрДлина(ШаблонИмениКоманды) + 1));
		УстановитьНастройкуИзменения(ИсторияОперацийСписок[ИндексКоманды].Значение);
		СформироватьПояснениеОНастроенныхИзменениях();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПередНачаломИзменения(Элемент, Отказ)
	
	Если Элемент.Имя = "СлужебныеРеквизитыОбъекта" Тогда
		УстановитьОграниченияВыбираемыхТиповИПараметрыВыбораЗначения(Элемент);
		Если (Элемент.ТекущийЭлемент = Элементы.СлужебныеРеквизитыОбъектаЗначение
			Или Элемент.ТекущийЭлемент = Элементы.СлужебныеРеквизитыОбъектаИзменять)
			И Элемент.ТекущиеДанные.ЗаблокированныйРеквизит Тогда
			Отказ = Истина;
			ВопросПерейтиКРазблокированиюРеквизитов(Элемент.ТекущиеДанные);
		КонецЕсли;
	Иначе
		УстановитьОграниченияВыбираемыхТиповИПараметрыВыбораЗначения(Элемент);
		Если (Элемент.ТекущийЭлемент = Элементы.РеквизитыОбъектаЗначение
			Или Элемент.ТекущийЭлемент = Элементы.РеквизитыОбъектаИзменять)
			И Элемент.ТекущиеДанные.ЗаблокированныйРеквизит Тогда
			Отказ = Истина;
			ВопросПерейтиКРазблокированиюРеквизитов(Элемент.ТекущиеДанные);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура ОбновитьПояснениеОНастроенныхИзменениях()
	СформироватьПояснениеОНастроенныхИзменениях();
КонецПроцедуры

&НаКлиенте
Процедура РеквизитыОбъектаЗначениеЗавершениеВыбора(Формула, ТекущиеДанные) Экспорт
	Если Формула = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если Не СтрНачинаетсяС(Формула, "=") Тогда
		Формула = "=" + Формула;
	КонецЕсли;
	ТекущиеДанные.Значение = Формула;
	ТекущиеДанные.Изменять = Истина;
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()

	УсловноеОформление.Элементы.Очистить();

	// Информация об автонумерации. Эта настройка должна быть всегда первой.
	
	Элемент = УсловноеОформление.Элементы.Добавить();
	
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РеквизитыОбъектаЗначение.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РеквизитыОбъекта.Изменять");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РеквизитыОбъекта.ЭтоСтандартныйРеквизит");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РеквизитыОбъекта.Значение");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РеквизитыОбъекта.Имя");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "Код";
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РеквизитыОбъекта.Имя");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "Номер";
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Текст", ПояснениеПоАвтонумерации);
	Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Серый);
	
	// Заблокированный реквизит
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СлужебныеРеквизитыОбъекта.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СлужебныеРеквизитыОбъектаПредставление.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СлужебныеРеквизитыОбъектаИзменять.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.СлужебныеРеквизитыОбъектаЗначение.Имя);
	
	ГруппаОтбора = Элемент.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ;

	ГруппаОтбораИ = ГруппаОтбора.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбораИ.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ОтборЭлемента = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РеквизитыОбъекта.ЭтоСтандартныйРеквизит");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Ложь;
	
	ОтборЭлемента = ГруппаОтбораИ.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РеквизитыОбъекта.Имя");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно;
	ОтборЭлемента.ПравоеЗначение = "СозданАвтоматически";
	
	ОтборЭлемента = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РеквизитыОбъекта.Имя");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = "Ссылка";
	
	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	Элементы.СлужебныеРеквизитыОбъекта.ТекущаяСтрока = 0;
	
	
	Элемент = УсловноеОформление.Элементы.Добавить();

	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РеквизитыОбъекта.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РеквизитыОбъектаПредставление.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РеквизитыОбъектаИзменять.Имя);
	ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
	ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РеквизитыОбъектаЗначение.Имя);
	
	ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РеквизитыОбъекта.ЭтоСтандартныйРеквизит");
	ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
	ОтборЭлемента.ПравоеЗначение = Истина;

	Элемент.Оформление.УстановитьЗначениеПараметра("Видимость", Ложь);
	Элемент.Оформление.УстановитьЗначениеПараметра("Отображать", Ложь);
	
	// Пояснения по связанным реквизитам
	
	Для Каждого Реквизит Из РеквизитыОбъекта Цикл
		Элемент = УсловноеОформление.Элементы.Добавить();
		
		ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
		ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(Элементы.РеквизитыОбъектаЗначение.Имя);

		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РеквизитыОбъекта.Имя");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Реквизит.Имя;
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РеквизитыОбъекта.Значение");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РеквизитыОбъекта.Изменять");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		ОтборЭлемента.ПравоеЗначение = Ложь;
		
		ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("РеквизитыОбъекта.ПредставлениеСвязейПараметровВыбора");
		ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
		
		Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Реквизит.ПредставлениеСвязейПараметровВыбора);
		Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Серый);
	КонецЦикла;
	
	Для Каждого ТабличнаяЧасть Из ТабличныеЧастиОбъекта Цикл
		Для Каждого Реквизит Из ЭтотОбъект[ТабличнаяЧасть.Значение] Цикл
			Элемент = УсловноеОформление.Элементы.Добавить();
			
			ПолеЭлемента = Элемент.Поля.Элементы.Добавить();
			ПолеЭлемента.Поле = Новый ПолеКомпоновкиДанных(ТабличнаяЧасть.Значение + "Значение");

			ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ТабличнаяЧасть.Значение + ".Имя");
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = Реквизит.Имя;
			
			ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ТабличнаяЧасть.Значение + ".Значение");
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.НеЗаполнено;
			
			ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ТабличнаяЧасть.Значение + ".Изменять");
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
			ОтборЭлемента.ПравоеЗначение = Ложь;
			
			ОтборЭлемента = Элемент.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ОтборЭлемента.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ТабличнаяЧасть.Значение + ".ПредставлениеСвязейПараметровВыбора");
			ОтборЭлемента.ВидСравнения = ВидСравненияКомпоновкиДанных.Заполнено;
			
			Элемент.Оформление.УстановитьЗначениеПараметра("Текст", Реквизит.ПредставлениеСвязейПараметровВыбора);
			Элемент.Оформление.УстановитьЗначениеПараметра("ЦветТекста", WebЦвета.Серый);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьИзменениеПроверкаОтбораВыполнена(РезультатВопроса = Неопределено, ДополнительныеПараметры = Неопределено)
	
	Если РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	Если Не ЕстьНастроенныеИзменения() И Объект.ТипОперации = "ВвестиЗначения"
		И НЕ ПересчетИтоговыхХарактеристик И НЕ ЗаполнениеВремениИРасстояния И НЕ РасчетДоходов И НЕ РасчетРасходов И НЕ РасчетРасходовФакт И НЕ ОптимизацияМаршрута 
		И НЕ ФлагОтменаЗакрытия И НЕ ФлагЗакрытия И НЕ ОбъединитьВЭтапИрассчитатьМетрики 
		И НЕ ФлагОтменаВыполнения И НЕ РасчетИтогов Тогда
		ТекстВопроса = НСтр("ru='Изменения не настроены. Выполнить перезапись элементов без изменений?';en='Changes are not set. Rewrite the items without changes?'");
		ОписаниеОповещения = Новый ОписаниеОповещения("ВыполнитьИзменениеПроверкиВыполнены", ЭтотОбъект);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена, , , НСтр("ru='Изменение элементов';en='Change items'"));
	Иначе
		ВыполнитьИзменениеПроверкиВыполнены();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЕстьНастроенныеОтборы()
	Для Каждого ЭлементОтбора Из КомпоновщикНастроек.Настройки.Отбор.Элементы Цикл
		Если ЭлементОтбора.Использование Тогда
			Возврат Истина;
		КонецЕсли;
	КонецЦикла;
	Возврат Ложь;
КонецФункции

&НаСервере
Процедура ВыполнитьДействияПриКонтекстномОткрытии()
	
	ШаблонЗаголовка = НСтр("ru='Обработать выделенные документы ""%1"" (%2)';en='Change selected items ""%1"" (%2)'");
	
	ТипыОбъектов = Новый СписокЗначений;
	Для Каждого ПереданныйОбъект Из Параметры.МассивОбъектов Цикл
		ОбъектМетаданных = ПереданныйОбъект.Метаданные();
		ИмяОбъекта = ОбъектМетаданных.ПолноеИмя();
		Если ТипыОбъектов.НайтиПоЗначению(ИмяОбъекта) = Неопределено Тогда
			ТипыОбъектов.Добавить(ИмяОбъекта, ОбъектМетаданных.Представление());
		КонецЕсли;
	КонецЦикла;
	
	ПредставлениеТипа = Параметры.МассивОбъектов[0].Метаданные().Представление();
	Если ТипыОбъектов.Количество() > 1 Тогда
		ПредставлениеТипа = "";
		ШаблонЗаголовка = НСтр("ru='Обработка выделенных документов (%2)';en='Change selected items (%2)'");
	КонецЕсли;
	
	КоличествоОбъектов = Параметры.МассивОбъектов.Количество();
	Заголовок = ПодставитьПараметрыВСтроку(ШаблонЗаголовка, ПредставлениеТипа, КоличествоОбъектов);
	
	// При отсутствии права сохранения настроек необходимо спрятать весь функционал работы с настройками.
	Элементы.РанееИзмененныеРеквизиты.Видимость = ПравоДоступа("СохранениеДанныхПользователя", Метаданные);
	
	ВидыИзменяемыхОбъектов = СтрСоединить(ТипыОбъектов.ВыгрузитьЗначения(), ",");
	
	// Подгружаем историю операций с данным типом объектов.
	ЗагрузитьИсториюОпераций();
	ЗаполнитьПодменюРанееИзмененныеРеквизиты();
	
	// Объект иерархический
	УчитыватьИерархию = ОбъектМетаданныхИерархический(Параметры.МассивОбъектов[0]);
	ИерархияГрупп = ИерархияГруппИЭлементов(Параметры.МассивОбъектов[0]);
	
	ВыбранныеОбъектыВКонтексте.ЗагрузитьЗначения(Параметры.МассивОбъектов);
	ИнициализироватьКомпоновщикНастроек();
	
	ЗагрузитьМетаданныеОбъекта();
	
	ПредставлениеИзменяемыхОбъектов = ПредставлениеИзменяемыхОбъектов();
	ОбновитьНадписьКоличествоВыбранных();
	
	Элементы.ПредставлениеИзменяемыхОбъектов.ТолькоПросмотр = Истина;
	
	// При контекстном вызове не допускается выполнение произвольного алгоритма.
	Элементы.ТипОперации.Видимость = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьИзменениеПроверкиВыполнены(РезультатВопроса = Неопределено, ДополнительныеПараметры = Неопределено) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Отмена Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьКнопкиНаВремяИзменения(Истина);
	ПерейтиНаСтраницуИзмененияОбъектов();
	ОбъектыКоторыеНеУдалосьИзменить.Очистить();
	
	ПодключитьОбработчикОжидания("ИзменитьОбъекты", 0.1, Истина);
	
КонецПроцедуры

&НаСервере
Функция ЕстьНастроенныеИзменения()
	Возврат ИзменяемыеРеквизиты().Количество() > 0 Или ИзменяемыеТабличныеЧасти().Количество() > 0;
КонецФункции

&НаСервере
Процедура ДобавитьИзменениеВИсторию(СтруктураИзменения, ПредставлениеИзменения)
	
	// Настройки истории изменений это массив структур с ключами:
	// Изменение - массив со структурой изменения.
	// Представление - представление настройки пользователю.
	
	Если Объект.ТипОперации = "ВыполнитьАлгоритм" Тогда
			Настройки = ХранилищеОбщихНастроекЗагрузить(
		"ГрупповоеИзменениеОбъектов", 
		"ИсторияАлгоритмов/" + ВидыИзменяемыхОбъектов);
		
		Если Настройки = Неопределено Тогда
			Настройки = Новый Массив;
		Иначе
			Для Индекс = 0 По Настройки.ВГраница() Цикл
				Если Настройки.Получить(Индекс).Представление = ПредставлениеИзменения Тогда
					Настройки.Удалить(Индекс);
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Настройки.Вставить(0, Новый Структура("Изменение, Представление", СтруктураИзменения, ПредставлениеИзменения));
		
		Если Настройки.Количество() > 20 Тогда
			Настройки.Удалить(19);
		КонецЕсли;
		
		ХранилищеОбщихНастроекСохранить("ГрупповоеИзменениеОбъектов", "ИсторияАлгоритмов/" + ВидыИзменяемыхОбъектов, Настройки);
		
		ЗагрузитьИсториюОпераций();
		ЗаполнитьПодменюРанееИзмененныеРеквизиты();

		Возврат;
	КонецЕсли;
	
	Настройки = ХранилищеОбщихНастроекЗагрузить(
		"ГрупповоеИзменениеОбъектов", 
		"ИсторияИзменений/" + ВидыИзменяемыхОбъектов);
	
	Если Настройки = Неопределено Тогда
		Настройки = Новый Массив;
	Иначе
		Для Индекс = 0 По Настройки.ВГраница() Цикл
			Если Настройки.Получить(Индекс).Представление = ПредставлениеИзменения Тогда
				Настройки.Удалить(Индекс);
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Настройки.Вставить(0, Новый Структура("Изменение, Представление", СтруктураИзменения, ПредставлениеИзменения));
	
	Если Настройки.Количество() > 20 Тогда
		Настройки.Удалить(19);
	КонецЕсли;
	
	ХранилищеОбщихНастроекСохранить("ГрупповоеИзменениеОбъектов", "ИсторияИзменений/" + ВидыИзменяемыхОбъектов, Настройки);
	
	ЗагрузитьИсториюОпераций();
	ЗаполнитьПодменюРанееИзмененныеРеквизиты();
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьИсториюОпераций()
	
	ИсторияОперацийСписок.Очистить();
	
	ИсторияИзменений = ХранилищеОбщихНастроекЗагрузить("ГрупповоеИзменениеОбъектов", "ИсторияИзменений/" + ВидыИзменяемыхОбъектов);
	Если ИсторияИзменений <> Неопределено И ТипЗнч(ИсторияИзменений) = Тип("Массив") Тогда
		Для Каждого Настройка Из ИсторияИзменений Цикл
			ИсторияОперацийСписок.Добавить(Настройка.Изменение, Настройка.Представление);
		КонецЦикла;
	КонецЕсли;
	
	ИсторияАлгоритмовСписок.Очистить();
	
	ИсторияИзменений = ХранилищеОбщихНастроекЗагрузить("ГрупповоеИзменениеОбъектов", "ИсторияАлгоритмов/" + ВидыИзменяемыхОбъектов);
	Если ИсторияИзменений = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого Настройка Из ИсторияИзменений Цикл
		ИсторияАлгоритмовСписок.Добавить(Настройка.Изменение, Настройка.Представление);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПерейтиКРазблокированиюРеквизитов(ВыбранныйРеквизит)
	
	Кнопки = Новый СписокЗначений;
	
	Если КонтекстныйВызов Тогда
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru='Перейти';en='Go'"));
		ТекстВопроса = НСтр("ru='Реквизит заблокирован, перейти к разблокированию реквизитов?';en='The attribute has been locked.  Unlock attributes?'");
	Иначе
		Кнопки.Добавить(КодВозвратаДиалога.Да, НСтр("ru='Разблокировать';en='Unblock'"));
		ТекстВопроса = ПодставитьПараметрыВСтроку(
			НСтр("ru='Для того чтобы не допустить рассогласования данных в программе,"
"реквизит ""%1"" не доступен для редактирования."
""
"Перед тем, как разрешить его редактирование, рекомендуется оценить последствия,"
"проверив все места использования выбранных элементов в программе."
""
"Разблокировать реквизит ""%1"" для изменения?';en='In order to prevent data mismatch in the program,"
"attribute ""%1"" is not editable."
""
"Before permitting its editing, it is recommended to assess the consequences,"
"checking all the places of use of the selected elements in the program."
""
"Unblock attribute ""%1"" for change?'"),
			ВыбранныйРеквизит.Представление);
	КонецЕсли;
	
	Кнопки.Добавить(КодВозвратаДиалога.Отмена, НСтр("ru='Отмена';en='Cancel'"));
	
	ОписаниеОповещения = Новый ОписаниеОповещения("ВопросПерейтиКРазблокированиюРеквизитовЗавершение", ЭтотОбъект, ВыбранныйРеквизит);
	ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , КодВозвратаДиалога.Да, НСтр("ru='Реквизит заблокирован';en='Attribute is locked'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросПерейтиКРазблокированиюРеквизитовЗавершение(РезультатВопроса, ОписаниеРеквизита) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		РазрешитьРедактированиеРеквизитов(ОписаниеРеквизита);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПараметрыВыбораСервер(ПараметрыВыбора, ПараметрыВыбораМассив)
	
	Для Индекс = 1 По СтрЧислоСтрок(ПараметрыВыбора) Цикл
		ПараметрыВыбораСтрока      = СтрПолучитьСтроку(ПараметрыВыбора, Индекс);
		ПараметрыВыбораМассивСтрок = СтрРазделить(ПараметрыВыбораСтрока, ";");
		ИмяПоляОтбора = СокрЛП(ПараметрыВыбораМассивСтрок[0]);
		ИмяТипа       = СокрЛП(ПараметрыВыбораМассивСтрок[1]);
		XMLСтрока     = СокрЛП(ПараметрыВыбораМассивСтрок[2]);
		
		Если Тип(ИмяТипа) = Тип("ФиксированныйМассив") Тогда
			Массив = Новый Массив;
			XMLСтрокаМассив = СтрРазделить(XMLСтрока, "#");
			Для Каждого Элемент Из XMLСтрокаМассив Цикл
				ЭлементМассив = СтрРазделить(Элемент, "*");
				ЗначениеЭлемента = XMLЗначение(Тип(ЭлементМассив[0]), ЭлементМассив[1]);
				Массив.Добавить(ЗначениеЭлемента);
			КонецЦикла;
			Значение = Новый ФиксированныйМассив(Массив);
		Иначе
			Значение = XMLЗначение(Тип(ИмяТипа), XMLСтрока);
		КонецЕсли;
		
		ПараметрыВыбораМассив.Добавить(Новый ПараметрВыбора(ИмяПоляОтбора, Значение));
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьНастройкиОбработки(ПолноеИмя, ИзменятьВТранзакции, ПрерыватьПриОшибке,
			ТОНастройкаПорции, ТОПроцентОбъектовВПорции, ТОЧислоОбъектовВПорции, ОбрабатыватьРекурсивно)
	
	Если Не ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураНастроек = Новый Структура;
	
	СтруктураНастроек.Вставить("ИзменятьВТранзакции",		ИзменятьВТранзакции);
	СтруктураНастроек.Вставить("ПрерыватьПриОшибке",		ПрерыватьПриОшибке);
	СтруктураНастроек.Вставить("ТОНастройкаПорции",			ТОНастройкаПорции);
	СтруктураНастроек.Вставить("ТОПроцентОбъектовВПорции",	ТОПроцентОбъектовВПорции);
	СтруктураНастроек.Вставить("ТОЧислоОбъектовВПорции",	ТОЧислоОбъектовВПорции);
	СтруктураНастроек.Вставить("ОбрабатыватьРекурсивно",	ОбрабатыватьРекурсивно);
	
	ХранилищеОбщихНастроекСохранить("Обработка.ГрупповоеИзменениеОбъектов", ПолноеИмя, СтруктураНастроек);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройкиОбработки()
	
	Объект.ИзменятьВТранзакции          = Истина;
	Объект.ПрерыватьПриОшибке           = Истина;
	Объект.ТипОперации                  = "ВвестиЗначения";
	ТОНастройкаПорции                   = 1;
	ТОПроцентОбъектовВПорции            = 100;
	ТОЧислоОбъектовВПорции              = 1;
	ОбрабатыватьРекурсивно              = Ложь;
	Объект.ПоказыватьСлужебныеРеквизиты = Истина;
	
	СтруктураНастроек = ХранилищеОбщихНастроекЗагрузить(
		"Обработка.ГрупповоеИзменениеОбъектов",
		ВидыИзменяемыхОбъектов);
	
	Если СтруктураНастроек <> Неопределено Тогда
		Объект.ИзменятьВТранзакции = СтруктураНастроек.ИзменятьВТранзакции;
		Объект.ПрерыватьПриОшибке  = СтруктураНастроек.ПрерыватьПриОшибке;
		ОбрабатыватьРекурсивно     = СтруктураНастроек.ОбрабатыватьРекурсивно;
		Объект.ПоказыватьСлужебныеРеквизиты = Истина;
	КонецЕсли;
	
	ДоступноВыполнениеКода                    = ДоступноВыполнениеКода();
	Элементы.ПроизвольныйАлгоритм.Видимость   = ДоступноВыполнениеКода;
	Элементы.ТипОперации.Видимость            = ДоступноВыполнениеКода;

	ДоступноВыполнениеКодаВНебезопасномРежиме = ДоступноВыполнениеКодаВНебезопасномРежиме();
	Элементы.РежимВыполнения.Видимость        = ДоступноВыполнениеКодаВНебезопасномРежиме;
	
КонецПроцедуры

// В модели сервиса, базовой конфигурации или без права АдминистраторСистемы нельзя выполнять произвольный алгоритм.
//
&НаСервереБезКонтекста
Функция ДоступноВыполнениеКодаВНебезопасномРежиме()
	Если ЭтоБазоваяВерсияКонфигурации()
		ИЛИ РазделениеВключено() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если НЕ ПравоДоступа("Администрирование", Метаданные) Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

&НаСервереБезКонтекста
Функция ДоступноВыполнениеКода()
	
	Если РазделениеВключено() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

&НаСервереБезКонтекста
Функция ДоступныеПраваВыполнениеКода()
	
	Результат = Новый Структура();
	Результат.Вставить("ДоступноВыполнениеКодаВНебезопасномРежиме", ДоступноВыполнениеКодаВНебезопасномРежиме());
	Результат.Вставить("ДоступноВыполнениеКода", ДоступноВыполнениеКода());
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура РазрешитьРедактированиеРеквизитов(ВыбранныйРеквизит)
	
	Если Не КонтекстныйВызов Тогда
		ВыбранныйРеквизит.ЗаблокированныйРеквизит = Ложь;
		Возврат;
	КонецЕсли;
	
	ЗаблокированныеРеквизитыСтроки = РеквизитыОбъекта.НайтиСтроки(
		Новый Структура("ЗаблокированныйРеквизит", Истина));
	
	Если ЕстьФормаРазблокированияРеквизитов Тогда
		
		ЗаблокированныеРеквизиты = Новый Массив;
		
		Для Каждого ОписаниеОперацииСтрока Из ЗаблокированныеРеквизитыСтроки Цикл
			ЗаблокированныеРеквизиты.Добавить(ОписаниеОперацииСтрока.Имя);
		КонецЦикла;
		
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("РежимВыбора", Истина);
		ПараметрыФормы.Вставить("ЗаблокированныеРеквизиты", ЗаблокированныеРеквизиты);
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриРазблокированииРеквизитов", ЭтотОбъект);
		ОткрытьФорму(ПолноеИмяФормыРаботыСБлокируемымиРеквизитами, ПараметрыФормы, ЭтотОбъект, , , , ОписаниеОповещения);
		
	Иначе
		МассивСсылок = Новый Массив;
		ЗаполнитьМассивИзменяемыхОбъектов(МассивСсылок);
		
		СинонимыРеквизитов = Новый Массив;
		
		Для Каждого ОписаниеОперацииСтрока Из ЗаблокированныеРеквизитыСтроки Цикл
			СинонимыРеквизитов.Добавить(ОписаниеОперацииСтрока.Представление);
		КонецЦикла;
		
		Если ПодсистемаСуществует("СтандартныеПодсистемы.ЗапретРедактированияРеквизитовОбъектов") Тогда
			ЗапретРедактированияРеквизитовОбъектовКлиентМодуль = ОбщийМодуль("ЗапретРедактированияРеквизитовОбъектовКлиент");
			Если ЗапретРедактированияРеквизитовОбъектовКлиентМодуль <> Неопределено Тогда
				ЗапретРедактированияРеквизитовОбъектовКлиентМодуль.ПроверитьСсылкиНаОбъект(
					Новый ОписаниеОповещения(
						"РазрешитьРедактированиеРеквизитовЗавершение",
						ЭтотОбъект,
						ЗаблокированныеРеквизитыСтроки),
					МассивСсылок,
					СинонимыРеквизитов);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазрешитьРедактированиеРеквизитовЗавершение(Результат, ЗаблокированныеРеквизитыСтроки) Экспорт
	
	Если Результат <> Истина Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ОписаниеОперацииСтрока Из ЗаблокированныеРеквизитыСтроки Цикл
		ОписаниеОперацииСтрока.ЗаблокированныйРеквизит = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиНаСтраницуИзмененияОбъектов()
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.НастройкаИзменений Тогда
		Элементы.Страницы.ТекущаяСтраница = Элементы.ИзменениеОбъектов;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьКнопкиНаВремяИзменения(НачалоИзменения)
	
	ВыполняетсяОбработка = НачалоИзменения;

	Элементы.ФормаИзменить.Доступность = Истина;
	
	Если НачалоИзменения Тогда
		Элементы.ФормаИзменить.Заголовок = НСтр("ru='Прервать';en='Abort'");
	Иначе
		Если ОбъектыКоторыеНеУдалосьИзменить.Количество() > 0 Тогда
			Элементы.ФормаИзменить.Заголовок = НСтр("ru='Повторить изменение';en='Change again'");
		Иначе
			Элементы.ФормаИзменить.Заголовок = НСтр("ru='Закрыть';en='Close'");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОбъекты()
	
	ОчиститьСообщения();
	ТекущееСостояниеИзменения = Новый Структура;
	КоличествоОбъектовДляОбработки = КоличествоВыбранныхОбъектов(Истина, Истина);
	
	Если Объект.ИзменятьВТранзакции Тогда
		
		Если ТОНастройкаПорции = 1 Тогда // обработка одним вызовом
			
			ПоказатьОповещениеПользователя(НСтр("ru='Изменение выделенных элементов';en='Change selected items'"), ,НСтр("ru='Пожалуйста подождите, обработка может занять некоторое время...';en='Please wait. Data processor may take some time...'"));
			ПоказыватьПроцентОбработанных = Ложь;
			
			РазмерПорции = КоличествоОбъектовДляОбработки;
			
		Иначе
			
			ПоказыватьПроцентОбработанных = Истина;
			
			Если ТОНастройкаПорции = 2 Тогда // порциями по числу объектов
				РазмерПорции = ?(ТОЧислоОбъектовВПорции < КоличествоОбъектовДляОбработки, 
									ТОЧислоОбъектовВПорции, КоличествоОбъектовДляОбработки);
			Иначе // Порциями по проценту объектов.
				РазмерПорции = Окр(КоличествоОбъектовДляОбработки * ТОПроцентОбъектовВПорции / 100);
				Если РазмерПорции = 0 Тогда
					РазмерПорции = 1;
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
	Иначе
		
		Если КоличествоОбъектовДляОбработки >= НетранзакционнаяПорцияГраницаПерехода() Тогда
			// Число объектов - постоянная величина.
			РазмерПорции = НетранзакционнаяПорцияПолученияДанныхОбъектов();
		Иначе
			// Число объектов - переменная величина, процент от общего числа.
			РазмерПорции = Окр(КоличествоОбъектовДляОбработки * НетранзакционнаяПорцияПолученияДанныхПроцент() / 100);
			Если РазмерПорции = 0 Тогда
				РазмерПорции = 1;
			КонецЕсли;
		КонецЕсли;
		
		Состояние(НСтр("ru='Обрабатываются элементы...';en='Processing items...'"), 0, НСтр("ru='Изменение выделенных элементов';en='Change selected items'"));
		
		ПоказыватьПроцентОбработанных = Истина;
	КонецЕсли;
	
	ТекущееСостояниеИзменения.Вставить("ЕстьЭлементыДляОбработки", Истина);
	// Позиция последнего обработанного элемента. 1 - первый элемент.
	ТекущееСостояниеИзменения.Вставить("ТекущаяПозиция", 0);
	ТекущееСостояниеИзменения.Вставить("КоличествоОшибок", 0);			// Инициализируем счетчик ошибок.
	ТекущееСостояниеИзменения.Вставить("КоличествоИзмененных", 0);		// Инициализируем счетчик измененных.
	ТекущееСостояниеИзменения.Вставить("ОстанавливатьИзменениеПриОшибке", Объект.ПрерыватьПриОшибке);
	ТекущееСостояниеИзменения.Вставить("КоличествоОбъектовДляОбработки", КоличествоОбъектовДляОбработки);
	ТекущееСостояниеИзменения.Вставить("РазмерПорции", РазмерПорции);
	ТекущееСостояниеИзменения.Вставить("ПоказыватьПроцентОбработанных", ПоказыватьПроцентОбработанных);
	ТекущееСостояниеИзменения.Вставить("ПрерватьИзменение", Ложь);
	
	ПодключитьОбработчикОжидания("ИзменитьПорциюОбъектов", 0.1, Истина);
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.ОжиданиеОбработки;
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПорциюОбъектов()
	
	ИзменитьНаСервере(ТекущееСостояниеИзменения.ОстанавливатьИзменениеПриОшибке);
	
	Если ДлительнаяОперация.Статус = "Выполнено" Тогда
		ОбработатьРезультатИзменения(ПолучитьИзВременногоХранилища(ДлительнаяОперация.АдресРезультата));
	Иначе
		МодульДлительныеОперацииКлиент = ОбщийМодуль("ДлительныеОперацииКлиент");
		ПараметрыОжидания = МодульДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ПараметрыОжидания.ВыводитьОкноОжидания = Ложь;
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриЗавершенииОперацииИзменения", ЭтотОбъект);
		МодульДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОписаниеОповещения, ПараметрыОжидания);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗавершенииОперацииИзменения(Результат, ДополнительныеПараметры) Экспорт
	Если Результат = Неопределено Тогда
		НазадСервер();
		Возврат;
	КонецЕсли;
	
	Если Результат.Статус = "Ошибка" Тогда
		НазадСервер();
		ВызватьИсключение Результат.КраткоеПредставлениеОшибки;
	КонецЕсли;
	
	ОбработатьРезультатИзменения(ПолучитьИзВременногоХранилища(Результат.АдресРезультата));
КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатИзменения(РезультатИзменения = Неопределено, ПродолжитьОбработку = Неопределено)
	Перем КоличествоОшибок, КоличествоИзмененных;
	
	Если ПродолжитьОбработку = Неопределено Тогда
		ПродолжитьОбработку = Истина;
	КонецЕсли;
	
	Пока ПродолжитьОбработку Цикл
		// Переносим информацию по обработанным объектам в таблицу.
		ЗаполнитьСостояниеОбработанных(РезультатИзменения, КоличествоОшибок, КоличествоИзмененных);
		
		ТекущееСостояниеИзменения.КоличествоОшибок = КоличествоОшибок + ТекущееСостояниеИзменения.КоличествоОшибок;
		ТекущееСостояниеИзменения.КоличествоИзмененных = КоличествоИзмененных + ТекущееСостояниеИзменения.КоличествоИзмененных;
		
		Если НЕ (ТекущееСостояниеИзменения.ОстанавливатьИзменениеПриОшибке И РезультатИзменения.ЕстьОшибки) Тогда
			Прервать;
		КонецЕсли;
		
		// При наличии ошибок в транзакции - откатываем всю транзакцию.
		Если Объект.ИзменятьВТранзакции Тогда
			ПодключитьОбработчикОжидания("ЗавершитьИзменениеОбъектов", 0.1, Истина);
			Возврат; // Досрочный выход из цикла и процедуры.
		КонецЕсли;
		
		ТекстВопроса = НСтр("ru='При изменении элементов (группы элементов) возникли ошибки."
"Прервать изменение элементов и перейти к просмотру ошибок?';en='Errors occurred when items (group of items) were changed."
"Abort the change of items and go to browse errors?'");
		Кнопки = Новый СписокЗначений;
		Кнопки.Добавить(КодВозвратаДиалога.Прервать, НСтр("ru='Прервать';en='Abort'"));
		Кнопки.Добавить(КодВозвратаДиалога.Пропустить, НСтр("ru='Продолжить';en='Continue'"));
		Кнопки.Добавить(КодВозвратаДиалога.Нет, НСтр("ru='Больше не спрашивать';en='Do not ask again'"));
		
		ОписаниеОповещения = Новый ОписаниеОповещения("ОбработатьРезультатИзмененияОтветПолучен", ЭтотОбъект, РезультатИзменения);
		ПоказатьВопрос(ОписаниеОповещения, ТекстВопроса, Кнопки, , КодВозвратаДиалога.Прервать, НСтр("ru='Ошибки при изменении элементов';en='Errors occurred when changing items'"));
		Возврат;
	КонецЦикла;
	
	ТекущееСостояниеИзменения.ТекущаяПозиция = ТекущееСостояниеИзменения.ТекущаяПозиция + ТекущееСостояниеИзменения.РазмерПорции;
	
	Если ТекущееСостояниеИзменения.ПоказыватьПроцентОбработанных Тогда
		// Вычисляем текущий процент обработанных объектов.
		ТекущийПроцент = Окр(ТекущееСостояниеИзменения.ТекущаяПозиция / ТекущееСостояниеИзменения.КоличествоОбъектовДляОбработки * 100);
		Состояние(НСтр("ru='Обрабатываются элементы...';en='Processing items...'"), ТекущийПроцент, НСтр("ru='Изменение выделенных элементов';en='Change selected items'"));
	КонецЕсли;
	
	ЕстьЭлементыДляОбработки = ?(ТекущееСостояниеИзменения.ТекущаяПозиция < ТекущееСостояниеИзменения.КоличествоОбъектовДляОбработки, Истина, Ложь);
	
	Если ЕстьЭлементыДляОбработки И НЕ ТекущееСостояниеИзменения.ПрерватьИзменение Тогда
		ПодключитьОбработчикОжидания("ИзменитьПорциюОбъектов", 0.1, Истина);
	Иначе
		ПодключитьОбработчикОжидания("ЗавершитьИзменениеОбъектов", 0.1, Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОбработатьРезультатИзмененияОтветПолучен(РезультатВопроса, РезультатИзменения) Экспорт
	
	Если РезультатВопроса = Неопределено Или РезультатВопроса = КодВозвратаДиалога.Прервать Тогда
		ПодключитьОбработчикОжидания("ЗавершитьИзменениеОбъектов", 0.1, Истина);
		Возврат;
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		ТекущееСостояниеИзменения.ОстанавливатьИзменениеПриОшибке = Ложь;
	КонецЕсли;
	
	ОбработатьРезультатИзменения(РезультатИзменения, Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗавершитьИзменениеОбъектов()
	
	УстановитьКнопкиНаВремяИзменения(Ложь);
	ЗавершающиеДействияПриИзмененииСервер();
	
	Для Каждого Тип Из ТипыИзменяемыхОбъектов() Цикл
		ОповеститьОбИзменении(Тип);
	КонецЦикла;
	
	Оповестить("ЗавершениеГрупповогоИзмененияОбъектов");
	
	ОбработкаЗавершена = ТекущееСостояниеИзменения.КоличествоИзмененных = ТекущееСостояниеИзменения.КоличествоОбъектовДляОбработки;
	Если ОбработкаЗавершена Тогда
		ПоказатьОповещениеПользователя(НСтр("ru='Изменение реквизитов элементов';en='Change item attributes'"), , 
			ПодставитьПараметрыВСтроку(НСтр("ru='Изменены элементы (%1).';en='Items are changed (%1).'"), ТекущееСостояниеИзменения.КоличествоИзмененных));
		ПерейтиНаСтраницуВсеГотово();
		Возврат;
	КонецЕсли;
	
	Элементы.ГруппаОбъектыКоторыеНеУдалосьИзменить.Видимость = ОбъектыКоторыеНеУдалосьИзменить.Количество() > 0;
	
	Если ОбработкаЗавершена Тогда
		ШаблонСообщения = НСтр("ru='Изменения выполнены во всех выбранных элементах (%2).';en='Changes are made in all selected items (%2).'");
	Иначе
		Если Объект.ИзменятьВТранзакции Или ТекущееСостояниеИзменения.КоличествоИзмененных = 0 Тогда
			ШаблонСообщения = НСтр("ru='Изменения не выполнены.';en='Not changed.'");
		Иначе
			ШаблонСообщения = НСтр("ru='Изменения выполнены частично."
"Изменено: %1; Не удалось изменить: %3';en='Not all the changes have been made."
"Changed: %1; Cannot change: %3'");
		КонецЕсли;
	КонецЕсли;
	
	Если Объект.ИзменятьВТранзакции И Не ОбработкаЗавершена Тогда
		КоличествоПропущенных = ТекущееСостояниеИзменения.КоличествоОбъектовДляОбработки - ТекущееСостояниеИзменения.КоличествоОшибок;
		Если КоличествоПропущенных > 0 И Не ТекущееСостояниеИзменения.ПрерватьИзменение Тогда
			СтрокаТаблицы = ОбъектыКоторыеНеУдалосьИзменить.Добавить();
			СтрокаТаблицы.Объект = ПодставитьПараметрыВСтроку(НСтр("ru='... и другие элементы (%1)';en='... and other items (%1)'"), КоличествоПропущенных);
			СтрокаТаблицы.Причина = НСтр("ru='Пропущены, так как не были изменены один или более элементов.';en='Skipped as one or more items were not changed.'");
		КонецЕсли;
	КонецЕсли;
	
	Элементы.НадписьРезультатыОбработки.Заголовок = ПодставитьПараметрыВСтроку(
		ШаблонСообщения,
		ТекущееСостояниеИзменения.КоличествоИзмененных,
		ТекущееСостояниеИзменения.КоличествоОбъектовДляОбработки,
		ТекущееСостояниеИзменения.КоличествоОшибок);
		
	Элементы.ФормаНазад.Видимость = Истина;
	
	ТекущееСостояниеИзменения = Неопределено;
	
КонецПроцедуры

&НаСервере
Процедура ОбработатьДокументы()
	
	Если ПересчетИтоговыхХарактеристик ИЛИ ЗаполнениеВремениИРасстояния ИЛИ РасчетДоходов 
		ИЛИ ФлагОтменаЗакрытия ИЛИ ФлагЗакрытия ИЛИ РасчетРасходовФакт ИЛИ РасчетРасходов ИЛИ РасчетДоходов 
		ИЛИ ОбъединитьВЭтапИрассчитатьМетрики ИЛИ ФлагОтменаВыполнения ИЛИ РасчетИтогов ИЛИ КонвертацияВФормат1121 Тогда
		
		ФлагЭтапЗаписан = Ложь;
		Для Каждого ТекДок Из МассивДокументов Цикл
			ТекДокумент = ТекДок.Значение.Ссылка.ПолучитьОбъект();
			Если КонвертацияВФормат1121 Тогда
				уатОбновлениеИнформационнойБазы.КонвертацияМаршрутногоЛиста_2_2_21(ТекДокумент);
			КонецЕсли;
			Если ПересчетИтоговыхХарактеристик Тогда
				ТекДокумент.РассчитатьИтоговыеПоказатели();
			КонецЕсли;
			Если ЗаполнениеВремениИРасстояния Тогда
				ТекДокумент.ОбновитьВремяРасстояниеМеждуПунктами(Истина);
			КонецЕсли;
			Если РасчетИтогов Тогда
				Документы.уатМаршрутныйЛист.РасчетИтогов(ТекДокумент);
			Иначе
				Если РасчетДоходов Тогда
					РасчетДоходов(ТекДокумент);
				КонецЕсли;
				Если РасчетРасходов Тогда
					РасчетРасходов(ТекДокумент);
				КонецЕсли;
				Если РасчетРасходовФакт Тогда
					РасчетРасходовФакт(ТекДокумент);
				КонецЕсли;
			КонецЕсли;
			Если ФлагОтменаЗакрытия ИЛИ ФлагЗакрытия Тогда
				ТекДатаЗакрытия = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекДокумент.Ссылка, "ДатаЗакрытия");
				Если ФлагОтменаЗакрытия И ТекДатаЗакрытия <> '00010101' Тогда
					ОтменитьЗакрытиеДокумента(ТекДокумент);
				ИначеЕсли ФлагЗакрытия И ТекДатаЗакрытия = '00010101' Тогда
					ЗакрытьДокумент(ТекДокумент, ДатаЗакрытия);
				КонецЕсли;
			КонецЕсли;
			Если ФлагОтменаВыполнения Тогда
				ОтменитьВыполнение(ТекДокумент);
			КонецЕсли;
			
			Если ОбъединитьВЭтапИрассчитатьМетрики Тогда
				Если НЕ ФлагЭтапЗаписан Тогда
					ТекЭтапМаршрутизации = Справочники.уатЭтапыМаршрутизации.СоздатьЭлемент();
					ТекЭтапМаршрутизации.Наименование = НаименованиеЭтапа;
					ТекЭтапМаршрутизации.Записать();
					ЭтапМаршрутизации = ТекЭтапМаршрутизации.Ссылка;
					ФлагЭтапЗаписан = Истина;
				КонецЕсли;
				ТекДокумент.ЭтапМаршрутизации = ЭтапМаршрутизации;
			КонецЕсли;
			
			Попытка
				ТекДокумент.Записать();
			Исключение
			КонецПопытки;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтменитьЗакрытиеДокумента(ТекДок)
	СообщениеОшибки = "";
	Документы.уатМаршрутныйЛист.ЗакрытиеДокумента(ТекДок, Дата(1,1,1), СообщениеОшибки, Истина, Ложь);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗакрытьДокумент(ТекДок, ДатаЗакрытия)
	СообщениеОшибки = "";
	Документы.уатМаршрутныйЛист.ЗакрытиеДокумента(ТекДок, ДатаЗакрытия, СообщениеОшибки, Истина, Ложь);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура РасчетДоходов(ТекДок)
	мсвСтрокиУдалить = ТекДок.Доходы.НайтиСтроки(Новый Структура("РучнойВвод", Истина));
	Для Каждого ТекСтрокаУдалить Из мсвСтрокиУдалить Цикл
		ТекДок.Доходы.Удалить(ТекСтрокаУдалить);
	КонецЦикла;
	
	ДопПараметры = Новый Структура("ЗаполнятьТЧДоходы, ЗаполнятьТЧРасходы", Ложь, Ложь);
	СтруктураДокумента = уатОбщегоНазначенияКлиентСервер.СтруктураДокумента(ТекДок, "уатМаршрутныйЛист", ДопПараметры);
	уатРасчетыПоТарифам_уэ.РассчитатьУслугиПоМаршрутномуЛисту(СтруктураДокумента, "Доходы", СтруктураДокумента.Контрагент,, Ложь);
	уатРасчетыПоТарифамКлиентСервер_уэ.ЗаполнитьДоходыРасходыИзСтруктуры(ТекДок, СтруктураДокумента, "Доходы", "уатМаршрутныйЛист",, Ложь);
КонецПроцедуры

&НаСервере
Процедура РасчетРасходов(ТекДок)
	мсвСтрокиУдалить = ТекДок.Расходы.НайтиСтроки(Новый Структура("РучнойВвод", Истина));
	Для Каждого ТекСтрокаУдалить Из мсвСтрокиУдалить Цикл
		ТекДок.Расходы.Удалить(ТекСтрокаУдалить);
	КонецЦикла;
	
	ДопПараметры = Новый Структура("ЗаполнятьТЧДоходы, ЗаполнятьТЧРасходы", Ложь, Ложь);
	СтруктураДокумента = уатОбщегоНазначенияКлиентСервер.СтруктураДокумента(ТекДок, "уатМаршрутныйЛист", ДопПараметры);
	уатРасчетыПоТарифам_уэ.РассчитатьУслугиПоМаршрутномуЛисту(СтруктураДокумента, "Расходы", СтруктураДокумента.Контрагент,, Истина);
	уатРасчетыПоТарифамКлиентСервер_уэ.ЗаполнитьДоходыРасходыИзСтруктуры(ТекДок, СтруктураДокумента, "Расходы", "уатМаршрутныйЛист",Истина, Ложь);
	Для Каждого ТекСтрока Из ТекДок.Расходы Цикл
		Если НЕ ЗначениеЗаполнено(ТекСтрока.Договор) Тогда
			ПриИзмененииКонтрагента(ТекДок, ТекСтрока, "Расходы");
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура РасчетРасходовФакт(ТекДок)
	мсвСтрокиУдалить = ТекДок.Расходы.НайтиСтроки(Новый Структура("РучнойВвод", Истина));
	Для Каждого ТекСтрокаУдалить Из мсвСтрокиУдалить Цикл
		ТекДок.Расходы.Удалить(ТекСтрокаУдалить);
	КонецЦикла;
	
	ДопПараметры = Новый Структура("ЗаполнятьТЧДоходы, ЗаполнятьТЧРасходы", Ложь, Ложь);
	СтруктураДокумента = уатОбщегоНазначенияКлиентСервер.СтруктураДокумента(ТекДок, "уатМаршрутныйЛист", ДопПараметры);
	уатРасчетыПоТарифам_уэ.РассчитатьУслугиПоМаршрутномуЛисту(СтруктураДокумента, "Расходы", СтруктураДокумента.Контрагент,,Ложь);
	уатРасчетыПоТарифамКлиентСервер_уэ.ЗаполнитьДоходыРасходыИзСтруктуры(ТекДок, СтруктураДокумента, "Расходы", "уатМаршрутныйЛист",Ложь, Ложь);
	Для Каждого ТекСтрока Из ТекДок.Расходы Цикл
		Если НЕ ЗначениеЗаполнено(ТекСтрока.Договор) Тогда
			ПриИзмененииКонтрагента(ТекДок, ТекСтрока, "Расходы");
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ОтменитьВыполнение(ТекДок)
	
	ТекДок.Выполнен = Ложь;
	Для Каждого ТекСтрока Из ТекДок.Заказы Цикл 
		ТекСтрока.Выполнен              = Ложь;
		ТекСтрока.ПрибытиеФакт          = '00010101';
		ТекСтрока.УбытиеФакт            = '00010101';
		ТекСтрока.ПричинаЗакрытияЗаказа = Справочники.уатПричиныЗакрытияЗаказов.ПустаяСсылка();
	КонецЦикла;
	ТекДок.ДатаИВремяОтправления = '00010101';
	ТекДок.ДатаИВремяВыполнения  = '00010101';
	ТекДок.ЗакрытВодителем       = '00010101';
	ТекДок.ДатаЗакрытия          = '00010101';
	ТекДок.ПринятВодителем       = Перечисления.уатСтатусыПринятияМЛВодителем.НеУстановлено;
	ТекДок.ДатаПринятияВодителем = '00010101';
КонецПроцедуры

&НаКлиенте
Процедура ОптимизацияМаршрута()
	Если ОптимизацияМаршрутаМожноВыполнять Тогда
		Если ОбработкаДокументовОптимизацияМаршрутаКолВо + 1 <= МассивДокументов.Количество() Тогда
			ОптимизацияМаршрутаФрагмент(МассивДокументов[ОбработкаДокументовОптимизацияМаршрутаКолВо].Значение);
			ОптимизацияМаршрутаМожноВыполнять = Ложь;
		Иначе
			ОтключитьОбработчикОжидания("ОптимизацияМаршрута");
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОптимизацияМаршрутаФрагмент(ТекДокумент)
	
	ПараметрыОптимизации = ПодготовитьПараметрыОптимизации(ТекДокумент);
	Если ПараметрыОптимизации.Свойство("ОписаниеОшибки") И ЗначениеЗаполнено(ПараметрыОптимизации.ОписаниеОшибки) Тогда
		ОбработкаДокументовОптимизацияМаршрутаКолВо = ОбработкаДокументовОптимизацияМаршрутаКолВо + 1;
		Возврат;
	КонецЕсли;
	флRarusVRP = ПараметрыОптимизации.АлгоритмОптимальногоПерестроения = "RarusVRP";
	
	ПараметрыОптимизации.Вставить("ТекДокумент", ТекДокумент);
	
	Отказ = Ложь;
	ЗаданВопрос = Ложь;
	Оповещение = Новый ОписаниеОповещения("ОптимальноеПерестроениеЗаказовПослеПроверкиЧислаЗаказов", ЭтотОбъект, ПараметрыОптимизации);
	уатОбщегоНазначенияКлиент_уэ.ПредупредитьОБольшомЧислеЗаказов(ПараметрыОптимизации, Оповещение, Отказ, ЗаданВопрос);
	
	Если Отказ Тогда
		ОбработкаДокументовОптимизацияМаршрутаКолВо = ОбработкаДокументовОптимизацияМаршрутаКолВо + 1;
		Возврат;
	ИначеЕсли ЗаданВопрос Тогда
		Возврат;
	КонецЕсли;
	
	ОптимальноеПерестроениеЗаказовПослеПроверкиЧислаЗаказов(КодВозвратаДиалога.Да, ПараметрыОптимизации);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъединитьВЭтапИРассчитатьМетрики(МЛ)
	
	мТСДляМаршрутизации				 = Новый Массив();
	мЗаказов						 = Новый Массив();
	СводнаяИнформацияМаршрутизации	 = Новый Структура("Наименование, Родитель, ДатаМаршрутизации, ВремяВыполненияМаршрутизации, 
	|ИдентификаторЗадачи, ПодобраноТС, КоличествоЗаказовВыделено, ВесЗаказовВыделено,ОбъемЗаказовВыделено,
	|КоличествоМестЗаказовВыделено, ЗадействованоТСВыделено, ЗадействованоТСВсего, МаршрутныхЛистовВыделено, ЗаказовВыделено,
	|ВесВыделено, ВесВсего, ОбъемВыделено, ОбъемВсего, КоличествоМестВыделено, ВремяВПути, ВремяСтоянок, ВремяОжидания,
	|ВремяВсего, РасстояниеВсего, КоличествоПунктовПогрузки, КоличествоПунктовРазгрузки");
	
	СтрукутураНастроекМаршрутизации  = ПолучитьНастройкиМаршрутизации();
	
	Отказ = Ложь;
	ПодготовитьДанныеДляМаршрутизации(МЛ, мТСДляМаршрутизации, мЗаказов, АдресВыездаМаршрутизация, СводнаяИнформацияМаршрутизации, Отказ);
	
	Если НЕ Отказ Тогда
		ВнешняяМаршрутизация(мТСДляМаршрутизации, мЗаказов, СтрукутураНастроекМаршрутизации);
	КонецЕсли;
	
Конецпроцедуры

&НаКлиенте
Процедура ВнешняяМаршрутизация(мТСДляМаршрутизации, мЗаказов, СтрукутураНастроекМаршрутизации)
	
	ТекстОшибки = "";
	
	IDзадачиВнешнийМаршрутизатор = ВнешняяМаршрутизация_ДобавитьЗадачуMVRP(
		СтрукутураНастроекМаршрутизации.ДатаПланирования,
		мТСДляМаршрутизации, 
		мЗаказов,
		СтрукутураНастроекМаршрутизации,
		ТекстОшибки
	);
	
	Если Не ЗначениеЗаполнено(IDзадачиВнешнийМаршрутизатор) Тогда 
		ПоказатьПредупреждение(, ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	УстановитьАдресХранилищаДляРезультатаМаршрутизации();
	
	ДопПараметры = Новый Структура();
	ДопПараметры.Вставить("МассивОшибок",        Новый Массив());
	ДопПараметры.Вставить("ОшибкаМаршрутизации", Ложь);
	ДопПараметры.Вставить("мсвЗаказов",          мЗаказов);
	
	ЗаданиеВыполнено = ВнешняяМаршрутизация_ПолучитьРезультатMVRP(АдресХранилищаДО, IDзадачиВнешнийМаршрутизатор, ТекстОшибки);
	Если ЗаданиеВыполнено Тогда
		Если ТекстОшибки = "" Тогда
			ПолучитьметрикиИзВременногоХранилища();
			СтруктураПолейЭтапаМаршрутизации = Новый Структура("Наименование, Родитель, ДатаМаршрутизации, ИдентификаторЗадачи");
			СтруктураПолейЭтапаМаршрутизации.Наименование                 = НаименованиеЭтапа;
			СтруктураПолейЭтапаМаршрутизации.Родитель                     = РодительЭтапа;
			СтруктураПолейЭтапаМаршрутизации.ДатаМаршрутизации            = ДатаМаршрутизацииЭтапа;
			СтруктураПолейЭтапаМаршрутизации.ИдентификаторЗадачи          = IDзадачиВнешнийМаршрутизатор;
			ВремяНачалаМаршрутизации = ТекущаяДата();
			
			ЗаполнитьЗначенияСвойств(СводнаяИнформацияМаршрутизации, СтруктураПолейЭтапаМаршрутизации);
			ЗаписатьЭтапМаршрутизации(ВремяНачалаМаршрутизации, СводнаяИнформацияМаршрутизации);
		Иначе 
			ПоказатьПредупреждение(, ТекстОшибки);
		КонецЕсли;
		
		ОбработкаДокументовВнешняяМаршрутизацияВыполнена = Истина;
		IDзадачиВнешнийМаршрутизатор = Неопределено;
		
		Возврат;
	КонецЕсли;
	
	// Операция еще не завершена, выполняется с помощью фонового задания (асинхронно).
	ПараметрыОбработчикаОжидания = Новый Структура(
		"МинимальныйИнтервал,
		|МаксимальныйИнтервал,
		|ТекущийИнтервал,
		|КоэффициентУвеличенияИнтервала", 
		1, 15, 1, 1.4);
	
	ПодключитьОбработчикОжидания("Подключаемый_ВнешняяМаршрутизация_ПроверитьВыполнениеЗаданияMVRP", 1, Истина);
	
	ФормаДлительнойОперации = ОткрытьФорму(
		"ОбщаяФорма.уатДлительнаяОперация",
		,
		ЭтотОбъект,
		,
		,
		,
		Новый ОписаниеОповещения("ПриЗакрытииФормыДлительнойОперации", ЭтотОбъект, ДопПараметры)
	);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьметрикиИзВременногоХранилища()
	
	Результат = ПолучитьИзВременногоХранилища(АдресХранилищаДО);
	Если ТипЗнч(Результат) <> Тип("Структура") Тогда
		Возврат Новый Массив();
	КонецЕсли;
	
	Если Результат.Свойство("ВнешняяМаршрутизация") Тогда 
		флВнешняяМаршрутизация = Истина;
	КонецЕсли;
	
	Если Результат.Свойство("Метрики") Тогда
		Если ТипЗнч(Результат.Метрики) = Тип("Массив") Тогда
			МетрикиВнешнейМаршрутизации.ЗагрузитьЗначения(Результат.Метрики);
		КонецЕсли;
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ПриЗакрытииФормыДлительнойОперации(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") И РезультатЗакрытия.Свойство("ОтменитьВыполнение")
			И ТипЗнч(ДополнительныеПараметры) = Тип("Структура") И Объект.АлгоритмМаршрутизации = 3 Тогда 
		Попытка
			ОтключитьОбработчикОжидания("Подключаемый_ВнешняяМаршрутизация_ПроверитьВыполнениеЗадания");
		Исключение
		КонецПопытки;
		
		ОповещениеПослеДлительнойОперации = Неопределено;
		IDзадачиВнешнийМаршрутизатор = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьАдресХранилищаДляРезультатаМаршрутизации()
	
	АдресХранилищаДО = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьАдресХранилищаДляРезультатаМаршрутизацииОптимизацииМаршрута()
	
	АдресХранилищаДООптимизацияМаршрута = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВнешняяМаршрутизация_ПолучитьРезультатMVRP(АдресВрХранилища, IDзадачи, ТекстОшибки)
	
	МодульВнешнейМаршрутизации = ОбщегоНазначения.ОбщийМодуль("уатВнешнийМаршрутизаторСервер_уэ");
	
	Возврат МодульВнешнейМаршрутизации.Маршрутизация_ПолучитьРезультатMVRP(
		АдресВрХранилища,
		IDзадачи,
		ТекстОшибки
	);
	
КонецФункции

&НаКлиенте
Процедура Подключаемый_ВнешняяМаршрутизация_ПроверитьВыполнениеЗаданияMVRP()
	
	ТекстОшибки = "";
	
	ЗаданиеВыполнено = ВнешняяМаршрутизация_ПолучитьРезультатMVRP(АдресХранилищаДО, IDзадачиВнешнийМаршрутизатор, ТекстОшибки);
	
	Если ЗаданиеВыполнено Тогда
		ЗакрытьФормуДлительнойОперации();
		
		Если ТекстОшибки = "" Тогда 
			Если Не ОповещениеПослеДлительнойОперации = Неопределено Тогда 
				ВыполнитьОбработкуОповещения(ОповещениеПослеДлительнойОперации);
				ОповещениеПослеДлительнойОперации = Неопределено;
			КонецЕсли;
			ПолучитьметрикиИзВременногоХранилища();
			СтруктураПолейЭтапаМаршрутизации = Новый Структура("Наименование, Родитель, ДатаМаршрутизации, ИдентификаторЗадачи");
			СтруктураПолейЭтапаМаршрутизации.Наименование                 = НаименованиеЭтапа;
			СтруктураПолейЭтапаМаршрутизации.Родитель                     = РодительЭтапа;
			СтруктураПолейЭтапаМаршрутизации.ДатаМаршрутизации            = ДатаМаршрутизацииЭтапа;
			СтруктураПолейЭтапаМаршрутизации.ИдентификаторЗадачи          = IDзадачиВнешнийМаршрутизатор;
			ВремяНачалаМаршрутизации = ТекущаяДата();
			
			ЗаполнитьЗначенияСвойств(СводнаяИнформацияМаршрутизации, СтруктураПолейЭтапаМаршрутизации);
			ЗаписатьЭтапМаршрутизации(ВремяНачалаМаршрутизации, СводнаяИнформацияМаршрутизации);
		Иначе 
			ПоказатьПредупреждение(, ТекстОшибки);
		КонецЕсли;
		
		
		IDзадачиВнешнийМаршрутизатор					 = Неопределено;
		ОбработкаДокументовВнешняяМаршрутизацияВыполнена = Истина;
		
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.ТекущийИнтервал * ПараметрыОбработчикаОжидания.КоэффициентУвеличенияИнтервала;
	Если ПараметрыОбработчикаОжидания.ТекущийИнтервал > ПараметрыОбработчикаОжидания.МаксимальныйИнтервал Тогда
		ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.МаксимальныйИнтервал;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания(
		"Подключаемый_ВнешняяМаршрутизация_ПроверитьВыполнениеЗаданияMVRP", 
		ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
		Истина
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФормуДлительнойОперации()
	
	Если ТипЗнч(ФормаДлительнойОперации) = Тип("УправляемаяФорма") Тогда
		Если ФормаДлительнойОперации.Открыта() Тогда
			ФормаДлительнойОперации.Закрыть();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВнешняяМаршрутизация_ДобавитьЗадачуMVRP(ДатаВыезда, мсвТС, мсвЗаказы, СтруктураНастроекАРМ, ТекстОшибки)
	
	МодульВнешнейМаршрутизации = ОбщегоНазначения.ОбщийМодуль("уатВнешнийМаршрутизаторСервер_уэ");
	
	Возврат МодульВнешнейМаршрутизации.Маршрутизация_ДобавитьЗадачуMVRP(
	ДатаВыезда,
	мсвТС,
	мсвЗаказы,
	СтруктураНастроекАРМ,
	ТекстОшибки,
	Истина
	);
	
КонецФункции // ВнешняяМаршрутизация_ДобавитьЗадачуMVRP()

&НаСервереБезКонтекста
Процедура ПодготовитьДанныеДляМаршрутизации(мМЛ, мТСДляМаршрутизации, мЗаказов, АдресВыездаМаршрутизация, СводнаяИнформацияМаршрутизации, Отказ)
	
	мМЛДляМаршрутизации	 = ПодготовитьМассивМЛДляМаршрутизации(мМЛ, СводнаяИнформацияМаршрутизации);
	мТСДляМаршрутизации	 = ПодготовитьМассивТСДляМаршрутизации(мМЛДляМаршрутизации);
	мЗаказов			 = ПодготовитьМассивЗаказовДляМаршрутизации(мТСДляМаршрутизации, АдресВыездаМаршрутизация, СводнаяИнформацияМаршрутизации, Отказ);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПодготовитьМассивМЛДляМаршрутизации(мМЛ, СводнаяИнформацияМаршрутизации)
	
	// Найдем все МЛ привязанные к этапу
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("МЛ", мМЛ);
	Запрос.Текст = "ВЫБРАТЬ
	               |	уатМаршрутныйЛист.Ссылка КАК МЛ,
	               |	уатМаршрутныйЛист.ТС КАК ТС,
	               |	уатМаршрутныйЛист.ТС.Представление КАК ТСПредставление,
	               |	уатМаршрутныйЛист.ТС.ПринадлежностьТС КАК ТСПринадлежностьТС,
	               |	уатМаршрутныйЛист.ТС.Модель.СобственныйВес КАК ТСМодельСобственныйВес,
	               |	уатМаршрутныйЛист.ТС.Модель.ОбъемКузова КАК ТСМодельОбъемКузова,
	               |	уатМаршрутныйЛист.ТС.Модель.Грузоподъемность КАК ТСМодельГрузоподъемность,
	               |	уатМаршрутныйЛист.ТС.Модель.МинимальныйВесГруза КАК ТСМодельМинимальныйВесГруза,
	               |	уатМаршрутныйЛист.ТС.Модель.МинимальныйОбъемГруза КАК ТСМодельМинимальныйОбъемГруза,
	               |	уатМаршрутныйЛист.ТС.Модель.МинимальноеКоличествоУпаковок КАК ТСМодельМинимальноеКоличествоУпаковок,
	               |	уатМаршрутныйЛист.ТС.Модель.МаксимальноеКоличествоУпаковок КАК ТСМодельМаксимальноеКоличествоУпаковок,
	               |	уатМаршрутныйЛист.АдресОтправления КАК Гараж,
	               |	уатМаршрутныйЛист.АдресОтправления.Лат КАК ГаражЛат,
	               |	уатМаршрутныйЛист.АдресОтправления.Лон КАК ГаражЛон,
	               |	уатМаршрутныйЛист.КоличествоМест КАК КоличествоМест,
	               |	уатМаршрутныйЛист.Объем КАК Объем,
	               |	уатМаршрутныйЛист.ВесБрутто КАК ВесБрутто,
	               |	уатМаршрутныйЛист.Расстояние КАК Расстояние,
	               |	уатМаршрутныйЛист.ПробегПорожний КАК ПробегПорожний,
	               |	уатМаршрутныйЛист.ПробегСГрузом КАК ПробегСГрузом,
	               |	уатМаршрутныйЛист.ВремяВПути КАК ВремяВПути
	               |ИЗ
	               |	Документ.уатМаршрутныйЛист КАК уатМаршрутныйЛист
	               |ГДЕ
	               |	уатМаршрутныйЛист.Ссылка В(&МЛ)";
	
	Выборка					 = Запрос.Выполнить().Выбрать();
	мсвМЛ					 = Новый Массив();
	СчДобавленныхОбъектов	 = 0;
	
	МаршрутныхЛистовВыделено   = 0;
	РасстояниеВсего            = 0;
	ВремяВПути                 = 0;
	ВесВыделено                = 0;
	ВесВсего                   = 0;
	ОбъемВсего                 = 0;
	ОбъемВыделено              = 0;
	КоличествоМестВыделено     = 0;
	ВремяОжидания              = 0;
	ВремяСтоянок               = 0;
	КоличествоПунктовРазгрузки = 0;
	КоличествоПунктовПогрузки  = 0;
	ПодобраноТС                = 0;

	Пока Выборка.Следующий() Цикл
		СтруктураСтрокиМЛ = Новый Структура("ИндексСтроки, МЛ, ТС, ТСПредставление,ТСПринадлежностьТС,ТСМодельСобственныйВес,
		|ТСМодельОбъемКузова,ТСМодельМинимальныйВесГруза,ТСМодельМинимальныйОбъемГруза,ТСМодельГрузоподъемность, ТСМодельМинимальноеКоличествоУпаковок,
		|ТСМодельМаксимальноеКоличествоУпаковок, Гараж, ГаражЛат, ГаражЛон");
		ЗаполнитьЗначенияСвойств(СтруктураСтрокиМЛ, Выборка);
		СтруктураСтрокиМЛ.ИндексСтроки = СчДобавленныхОбъектов;
		мсвМЛ.Добавить(СтруктураСтрокиМЛ);
		
		СчДобавленныхОбъектов 	 = СчДобавленныхОбъектов + 1;
		
		ИтоговыеПоказателиМЛ		 = РассчитатьИтоговыеПоказателиМЛ(Выборка.МЛ);
		ВремяСтоянок				 = уатЗащищенныеФункцииСервер.СложитьВремя(ВремяСтоянок, ИтоговыеПоказателиМЛ.ОбщееВремяСтоянок);
		ВремяОжидания				 = уатЗащищенныеФункцииСервер.СложитьВремя(ВремяОжидания, ИтоговыеПоказателиМЛ.ОбщееВремяОжидания);
		МаршрутныхЛистовВыделено	 = МаршрутныхЛистовВыделено + 1;
		РасстояниеВсего				 = РасстояниеВсего + Выборка.Расстояние;
		ВремяВПути					 = уатЗащищенныеФункцииСервер.СложитьВремя(ВремяВПути, Выборка.ВремяВПути);
		ВесВыделено					 = ВесВыделено + Выборка.ВесБрутто;
		ВесВсего					 = ВесВсего + Выборка.ВесБрутто;
		ОбъемВсего					 = ОбъемВсего + Выборка.Объем;
		ОбъемВыделено				 = ОбъемВыделено + Выборка.Объем;
		КоличествоМестВыделено		 = КоличествоМестВыделено + Выборка.КоличествоМест;
		КоличествоПунктовПогрузки	 = ИтоговыеПоказателиМЛ.Погрузка + КоличествоПунктовПогрузки;
		КоличествоПунктовРазгрузки	 = ИтоговыеПоказателиМЛ.Разгрузка + КоличествоПунктовРазгрузки;
		
	КонецЦикла;
	
	СводнаяИнформацияМаршрутизации.ПодобраноТС                   = МаршрутныхЛистовВыделено;
	СводнаяИнформацияМаршрутизации.ЗадействованоТСВыделено       = МаршрутныхЛистовВыделено;
	СводнаяИнформацияМаршрутизации.ЗадействованоТСВсего          = МаршрутныхЛистовВыделено;
	СводнаяИнформацияМаршрутизации.МаршрутныхЛистовВыделено      = МаршрутныхЛистовВыделено;
	СводнаяИнформацияМаршрутизации.РасстояниеВсего               = РасстояниеВсего;
	СводнаяИнформацияМаршрутизации.ВремяВПути                    = ВремяВПути;
	СводнаяИнформацияМаршрутизации.ВесВыделено                   = ВесВыделено;
	СводнаяИнформацияМаршрутизации.ВесВсего                      = ВесВсего;
	СводнаяИнформацияМаршрутизации.ОбъемВсего                    = ОбъемВсего;
	СводнаяИнформацияМаршрутизации.ОбъемВыделено                 = ОбъемВыделено;
	СводнаяИнформацияМаршрутизации.КоличествоМестВыделено        = КоличествоМестВыделено;
	СводнаяИнформацияМаршрутизации.ВесЗаказовВыделено            = ВесВыделено;
	СводнаяИнформацияМаршрутизации.ОбъемЗаказовВыделено          = ОбъемВыделено;
	СводнаяИнформацияМаршрутизации.ВесЗаказовВыделено            = ВесВыделено;
	СводнаяИнформацияМаршрутизации.КоличествоМестЗаказовВыделено = КоличествоМестВыделено;
	СводнаяИнформацияМаршрутизации.КоличествоПунктовПогрузки     = КоличествоПунктовПогрузки;
	СводнаяИнформацияМаршрутизации.КоличествоПунктовРазгрузки    = КоличествоПунктовРазгрузки;
	СводнаяИнформацияМаршрутизации.ВремяСтоянок                  = ВремяСтоянок;
	СводнаяИнформацияМаршрутизации.ВремяОжидания                 = ВремяОжидания;
	СводнаяИнформацияМаршрутизации.ВремяСтоянок                  = ВремяСтоянок;
	СводнаяИнформацияМаршрутизации.ВремяВсего                    = уатЗащищенныеФункцииСервер.СложитьВремя(ВремяОжидания, ВремяСтоянок);
	СводнаяИнформацияМаршрутизации.ВремяВсего                    = уатЗащищенныеФункцииСервер.СложитьВремя(СводнаяИнформацияМаршрутизации.ВремяВсего, ВремяВПути);
	
	Возврат мсвМЛ;
	
КонецФункции

&НаСервереБезКонтекста
Функция РассчитатьИтоговыеПоказателиМЛ(МаршрутныйЛист)
	
	Результат = Новый Структура("ОбщееВремяСтоянок, ОбщееВремяОжидания, Погрузка, Разгрузка");
	
	ОбщееВремяСтоянок	 = 0;
	ОбщееВремяОжидания	 = 0;
	
	// Таблица для определения порожнего пробега. Считаем что машина идет порожняком, если таблица пуста.
	тблГрузы = Новый ТаблицаЗначений;
	тблГрузы.Колонки.Добавить("Заказ");
	тблГрузы.Колонки.Добавить("Номенклатура");
	тблГрузы.Колонки.Добавить("ЕдиницаИзмерения");
	тблГрузы.Колонки.Добавить("Количество");
	
	ПредПункт = Неопределено;
	ПредЗаказ = Неопределено;
	флПогрузки  = Ложь;
	флРазгрузки = Ложь;

	мсвЗаказыКРазмещению = Новый Массив();
	
	Заказы = МаршрутныйЛист.Заказы;
	КолВоЗаказов = Заказы.Количество();
	ПунктовПогрузкиПоМЛ  = 0;
	ПунктовРазгрузкиПоМЛ = 0;
	Для Каждого ТекСтрока Из Заказы Цикл
		
		// Время стоянки, указываемое в заказах, прибавляется по каждому заказу.
		Если ПредЗаказ <> ТекСтрока.ЗаказГрузоотправителя Тогда
			ОбщееВремяСтоянок = уатЗащищенныеФункцииСервер.СложитьВремя(ОбщееВремяСтоянок, ТекСтрока.Стоянка);
		КонецЕсли;
		
		// Время в пути, время стоянки.
		Если ПредПункт <> ТекСтрока.Пункт Тогда 
			// Время стоянки, указываемое в пунктах, прибавляется для каждого пункта.
			ОбщееВремяСтоянок  = уатЗащищенныеФункцииСервер.СложитьВремя(ОбщееВремяСтоянок, ТекСтрока.СтоянкаИзПункта);
			ОбщееВремяОжидания = уатЗащищенныеФункцииСервер.СложитьВремя(ОбщееВремяОжидания, ТекСтрока.Ожидание);
			
			ПредПункт  = ТекСтрока.Пункт;
			
			Если ПредПункт <> Неопределено Тогда
				
				Если флПогрузки Тогда
					ПунктовПогрузкиПоМЛ  = ПунктовПогрузкиПоМЛ + 1;
				КонецЕсли;
				
				Если флРазгрузки Тогда
					ПунктовРазгрузкиПоМЛ = ПунктовРазгрузкиПоМЛ + 1;
				КонецЕсли;
				
				флПогрузки  = Ложь;
				флРазгрузки = Ложь;
			КонецЕсли;
		КонецЕсли;
		
		Если ТекСтрока.ТипТочкиМаршрута = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Погрузка") Тогда
			флПогрузки   = Истина;
		ИначеЕсли ТекСтрока.ТипТочкиМаршрута = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Разгрузка") Тогда
			флРазгрузки  = Истина;
		КонецЕсли;
		
		// Пробег порожний и пробег с грузом.
		СледПункт = ?(ТекСтрока.НомерСтроки < КолВоЗаказов, Заказы[ТекСтрока.НомерСтроки].Пункт, Неопределено);
	КонецЦикла;
	
	Если флПогрузки Тогда
		ПунктовПогрузкиПоМЛ  = ПунктовПогрузкиПоМЛ + 1;
	КонецЕсли;
	
	Если флРазгрузки Тогда
		ПунктовРазгрузкиПоМЛ = ПунктовРазгрузкиПоМЛ + 1;
	КонецЕсли;

	Результат.ОбщееВремяСтоянок  = ОбщееВремяСтоянок;
	Результат.ОбщееВремяОжидания = ОбщееВремяОжидания;
	Результат.Погрузка           = ПунктовПогрузкиПоМЛ;
	Результат.Разгрузка          = ПунктовРазгрузкиПоМЛ;
	Возврат Результат;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПодготовитьМассивТСДляМаршрутизации(мМЛДляМаршрутизации)
	
	мТСДляМаршрутизации = Новый Массив();
	
	Если Константы.уатЕдиницаИзмеренияВеса.Получить() = Перечисления.уатЕдиницыИзмеренияВеса.Килограмм Тогда 
		КоэфГрузоподъемности = 1000;
	Иначе 
		КоэфГрузоподъемности = 1;
	КонецЕсли;
	
	Если Константы.уатЕдиницаИзмеренияОбъема.Получить() = Перечисления.уатЕдиницыИзмеренияОбъема.Литр Тогда 
		КоэфОбъемаКузова = 1000;
	Иначе 
		КоэфОбъемаКузова = 1;
	КонецЕсли;
	
	Для Каждого ТекТС Из мМЛДляМаршрутизации Цикл
		СтруктураСтрокиТС = Новый Структура(
		"ТСПредставление,ТС,ИндексСтрокиТС,Гараж,ГаражЛат,ГаражЛон,СобственныйВес,ЭтоВиртуальноеТС,
		|КоличествоВиртуальныхТС,МаксимальноеКоличествоУпаковок,МинимальныйВесГруза,
		|МинимальныйОбъемГруза,МинимальноеКоличествоУпаковок,ОбъемКузова,ДатаВыездаТС,Грузоподъемность,GUID, МЛ"
		);
		
		ЗаполнитьЗначенияСвойств(СтруктураСтрокиТС, ТекТС);

		СтруктураСтрокиТС.Грузоподъемность = ТекТС.ТСМодельГрузоподъемность * КоэфГрузоподъемности;
		СтруктураСтрокиТС.ОбъемКузова      = ТекТС.ТСМодельОбъемКузова * КоэфОбъемаКузова;
		СтруктураСтрокиТС.СобственныйВес   = ТекТС.ТСМодельСобственныйВес * КоэфГрузоподъемности;
		СтруктураСтрокиТС.ИндексСтрокиТС   = ТекТС.ИндексСтроки;
		СтруктураСтрокиТС.ЭтоВиртуальноеТС = ТекТС.ТСПринадлежностьТС = Перечисления.уатПринадлежностьТС.Виртуальное;
		
		СтруктураСтрокиТС.МинимальныйВесГруза            = ТекТС.ТСМодельМинимальныйВесГруза * КоэфГрузоподъемности;
		СтруктураСтрокиТС.МинимальныйОбъемГруза          = ТекТС.ТСМодельМинимальныйОбъемГруза * КоэфОбъемаКузова;
		СтруктураСтрокиТС.МинимальноеКоличествоУпаковок  = ТекТС.ТСМодельМинимальноеКоличествоУпаковок;
		СтруктураСтрокиТС.МаксимальноеКоличествоУпаковок = ТекТС.ТСМодельМаксимальноеКоличествоУпаковок;
		СтруктураСтрокиТС.КоличествоВиртуальныхТС        = 1;
		СтруктураСтрокиТС.GUID                           = Строка(ТекТС.ТС.УникальныйИдентификатор()) + "уатМЛ#" + Строка(ТекТС.МЛ.УникальныйИдентификатор());
		СтруктураСтрокиТС.МЛ                             = ТекТС.МЛ;
		СтруктураСтрокиТС.Вставить("Прицепы", Новый Массив());
		
		СтруктураСтрокиТС.Вставить("Характеристики", Новый Массив());
		
		мТСДляМаршрутизации.Добавить(СтруктураСтрокиТС);
	КонецЦикла;
	
	Возврат мТСДляМаршрутизации;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПодготовитьМассивЗаказовДляМаршрутизации(мТСДляМаршрутизации, АдресВыезда, СводнаяИнформацияМаршрутизации, Отказ)
	
	мЗаказов = Новый Массив();
	СтоянкаПунктОтправления  = 0;
	флагАдресВыезда          = Истина;
	ТекстОшибкиПоКларкуРайту = "";
	
	Заказы    = Новый Соответствие;
	
	Для Каждого ТекСтрокаТС Из мТСДляМаршрутизации Цикл
		флагАдресВыезда = Истина;
		Если Не ЗначениеЗаполнено(АдресВыезда) Тогда
			АдресВыезда = ТекСтрокаТС.МЛ.АдресОтправления;
		ИначеЕсли АдресВыезда <> ТекСтрокаТС.МЛ.АдресОтправления Тогда
			ТекстОшибкиПоКларкуРайту = ТекстОшибкиПоКларкуРайту + ?(ТекстОшибкиПоКларкуРайту="", "", Символы.ПС) + ТекСтрокаТС.МЛ;
			Отказ = Истина;
			Продолжить;
		КонецЕсли;
		Для Каждого ТекСтрокаЗаказ Из ТекСтрокаТС.МЛ.Заказы Цикл
			Заказы.Вставить(ТекСтрокаЗаказ.ЗаказГрузоотправителя, ТекСтрокаЗаказ.ЗаказГрузоотправителя);
			Если флагАдресВыезда И АдресВыезда = ТекСтрокаЗаказ.Пункт Тогда
				СтоянкаПунктОтправления = ТекСтрокаЗаказ.Стоянка;
				ЗаказОтправления        = ТекСтрокаЗаказ.ЗаказГрузоотправителя;
				НоменклатураОтправления = ТекСтрокаЗаказ.Номенклатура;
				Продолжить;
			КонецЕсли;
			
			Если АдресВыезда <> ТекСтрокаЗаказ.Пункт Тогда
				флагАдресВыезда = Ложь;
			КонецЕсли;

			Если ЗаказОтправления = ТекСтрокаЗаказ.ЗаказГрузоотправителя
				И НоменклатураОтправления =  ТекСтрокаЗаказ.Номенклатура Тогда
				СтоянкаПунктОтправленияТекущая = СтоянкаПунктОтправления;
				СтоянкаПунктОтправления        = 0;
			Иначе
				СтоянкаПунктОтправленияТекущая = 0;
			КонецЕсли;
			
			ДанныеГруза = Новый Структура();
			ДанныеГруза.Вставить("МЛ",         ТекСтрокаТС.МЛ);
			ДанныеГруза.Вставить("ТС",         ТекСтрокаТС.ТС);
			ДатаПосещения = ?(ЗначениеЗаполнено(ТекСтрокаЗаказ.ПрибытиеФакт),ТекСтрокаЗаказ.ПрибытиеФакт, ТекСтрокаЗаказ.ПрибытиеПлан);
			ДанныеГруза.Вставить("ДатаПосещения",              ДатаПосещения);
			ДанныеГруза.Вставить("СтрокаПакета",               ТекСтрокаЗаказ.НомерСтроки);
			ДанныеГруза.Вставить("GUID",                       ТекСтрокаЗаказ.GUIDСтроки);
			ДанныеГруза.Вставить("Заказ",                      ТекСтрокаЗаказ.ЗаказГрузоотправителя);
			ДанныеГруза.Вставить("Груз",                       ТекСтрокаЗаказ.Номенклатура);
			ДанныеГруза.Вставить("Количество",                 ТекСтрокаЗаказ.Количество);
			ДанныеГруза.Вставить("ВесБрутто",                  ТекСтрокаЗаказ.ВесБрутто + ТекСтрокаЗаказ.ВесТары);
			ДанныеГруза.Вставить("Объем",                      ТекСтрокаЗаказ.Объем);
			ДанныеГруза.Вставить("КоличествоУпаковок",         ТекСтрокаЗаказ.КоличествоМест);
			ДоставкаС  = Дата('00010101') + (ТекСтрокаЗаказ.ЗаказГрузоотправителя.ДоставкаС - Началодня(ТекСтрокаЗаказ.ЗаказГрузоотправителя.ДоставкаС));
			ДоставкаПо = Дата('00010101') + (ТекСтрокаЗаказ.ЗаказГрузоотправителя.ДоставкаПо - Началодня(ТекСтрокаЗаказ.ЗаказГрузоотправителя.ДоставкаПо));
			
			ОтправлениеС  = Дата('00010101') + (ТекСтрокаЗаказ.ЗаказГрузоотправителя.ОтправлениеС - Началодня(ТекСтрокаЗаказ.ЗаказГрузоотправителя.ОтправлениеС));
			ОтправлениеПо = Дата('00010101') + (ТекСтрокаЗаказ.ЗаказГрузоотправителя.ОтправлениеПо - Началодня(ТекСтрокаЗаказ.ЗаказГрузоотправителя.ОтправлениеПо));

			ДанныеГруза.Вставить("ОтправлениеС",               ОтправлениеС);
			ДанныеГруза.Вставить("ОтправлениеПо",              ОтправлениеПо);
			ДанныеГруза.Вставить("ДоставкаС",                  ДоставкаС);
			ДанныеГруза.Вставить("ДоставкаПо",                 ДоставкаПо);
			ДанныеГруза.Вставить("ДоставкаСДата",              Началодня(ТекСтрокаЗаказ.ЗаказГрузоотправителя.ДоставкаС));
			ДанныеГруза.Вставить("ДоставкаПоДата",             Началодня(ТекСтрокаЗаказ.ЗаказГрузоотправителя.ДоставкаПо));
			ДанныеГруза.Вставить("ОтправлениеСДата",           Началодня(ТекСтрокаЗаказ.ЗаказГрузоотправителя.ОтправлениеС));
			ДанныеГруза.Вставить("ОтправлениеПоДата",          Началодня(ТекСтрокаЗаказ.ЗаказГрузоотправителя.ОтправлениеПо));

			ДанныеГруза.Вставить("СтоянкаПунктНазначения",     ТекСтрокаЗаказ.Стоянка);
			ДанныеГруза.Вставить("СтоянкаПунктОтправления",    СтоянкаПунктОтправленияТекущая);
			ДанныеГруза.Вставить("ДопСтоянкаПунктНазначения",  ТекСтрокаЗаказ.СтоянкаИзПункта);
			ДанныеГруза.Вставить("АдресНазначения",            ТекСтрокаЗаказ.Пункт);
			ДанныеГруза.Вставить("АдресОтправления",           ТекСтрокаЗаказ.ЗаказГрузоотправителя.АдресОтправления);
			ДанныеГруза.Вставить("ЛатНазн",                    ТекСтрокаЗаказ.Пункт.Лат);
			ДанныеГруза.Вставить("ЛонНазн",                    ТекСтрокаЗаказ.Пункт.Лон);
			ДанныеГруза.Вставить("ЛатОтпр",                    ДанныеГруза.АдресОтправления.Лат);
			ДанныеГруза.Вставить("ЛонОтпр",                    ДанныеГруза.АдресОтправления.Лон);
			ДанныеГруза.Вставить("Высота",                     0);
			ДанныеГруза.Вставить("Длина",                      0);
			ДанныеГруза.Вставить("Ширина",                     0);
			ДанныеГруза.Вставить("ДопСтоянкаПунктОтправления", ТекСтрокаЗаказ.СтоянкаИзПункта);
			ДанныеГруза.Вставить("id",                         0);
			мЗаказов.Добавить(ДанныеГруза);
		КонецЦикла;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(ТекстОшибкиПоКларкуРайту) Тогда
		ОписаниеОшибкиРазныйГаражКларкРайт = 
		НСтр("en = 'There are orders for truckings with different'; ru = 'Обнаружены маршрутные листы с различными пунктами отправления.'")
		+ Символы.ПС + НСтр("en = 'The algorithm assumes that all vehicles at the beginning of the shift are at the address,'; ru = 'Алгоритм предполагает, что все транспортные средства в начале смены находятся по адресу,'")
		+ Символы.ПС + НСтр("en = 'coinciding with the point of'; ru = 'совпадающему с пунктом отправления'")
		+ " " + НСтр("en = 'and shall return to this point at the end of the shift.'; ru = 'и возващаются в этот пункт в конце смены.'")
		+ Символы.ПС + НСтр("en = 'It is necessary to select a different routing algorithm or continue routing without taking into account the following orders:'; ru = 'Необходимо продолжить маршрутизацию без учета следующих маршрутных листов:'")
		+ Символы.ПС + ТекстОшибкиПоКларкуРайту;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибкиРазныйГаражКларкРайт);
	КонецЕсли;

	СводнаяИнформацияМаршрутизации.КоличествоЗаказовВыделено = Заказы.Количество();
	СводнаяИнформацияМаршрутизации.ЗаказовВыделено           = Заказы.Количество();
	
	Возврат мЗаказов;
	
КонецФункции

&НаСервере
Процедура ЗаписатьЭтапМаршрутизации(ВремяНачалаМаршрутизации, СтруктураПолейЭтапаМаршрутизации)
	
	ТекЭтапМаршрутизации = ЭтапМаршрутизации.Ссылка.ПолучитьОбъект();
	ЗаполнитьЗначенияСвойств(ТекЭтапМаршрутизации, СтруктураПолейЭтапаМаршрутизации);
	ТекЭтапМаршрутизации.ВремяВыполненияМаршрутизации  = ТекущаяДата()- ВремяНачалаМаршрутизации;
	ТекЭтапМаршрутизации.АлгоритмМаршрутизации         = 3;
	ТекЭтапМаршрутизации.АдресВыезда                   = АдресВыездаМаршрутизация;
	
	ЕстьМетрики = МетрикиВнешнейМаршрутизации.Количество() > 0;
	
	Если ЕстьМетрики Тогда
		Метрики = МетрикиВнешнейМаршрутизации[0];
		Если Метрики.Значение.Свойство("ОбщиеМетрики") Тогда
			Для Каждого ТекСтрока Из Метрики.Значение.ОбщиеМетрики Цикл
				НоваяСтрока = ТекЭтапМаршрутизации.Метрики.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
				НоваяСтрока.ЗначениеТекущее = НоваяСтрока.Значение;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	СтруктураНастроек = Новый Структура(
	"ДатаПланирования,
	|НастройкаКоличествоДнейДоДатыПланирования,
	|НастройкаАдресВыезда,
	|НастройкаКонтрольВременныхОконЗаказов,
	|НастройкаКластеризации,
	|НастройкаАлгоритмМаршрутизации,
	|НастройкаКопийПечатныхФормМЛ,
	|НастройкаАвтоматическоеОбновлениеПриЗаписиДокументов,
	|НастройкаОрганизацияМЛ,
	|НастройкаОрганизацияМЛИсточник,
	|НастройкаОткрыватьФормыДокументов,
	|НастройкаПечататьМаршрутныеЛисты,
	|НастройкаПечататьСразуНаПринтер,
	|НастройкаПечатнаяФормаМЛ,
	|НастройкаПриОткрытииЗаполнятьСпискомТС,
	|НастройкаРежимОптимизации,
	|НастройкаСжиматьЗаказы,
	|НастройкаМаршрутизацияВФоновомРежиме,
	|НастройкаДействиеПриОшибкахМаршрутизации,
	|НастройкаЦветПредупрежденияВремя,
	|НастройкаЦветУровеньЗаказ,
	|НастройкаЦветУровеньНоменклатура,
	|НастройкаЦветУровеньПункт,
	|НастройкаЦветУровеньТС,
	|НастройкаЦветУровеньМЛ,
	|НастройкаЦветУровеньМЛновый,
	|ПериодАвтообновления,
	|НастройкаРежимИзмененияДокументовИзПланировщика,
	|НастройкаВыделятьТекущийЗаказНаПланировщике,
	|НастройкаВремяМеждуПунктамиПоУмолчанию,
	|УчитыватьМодельИТипТС,
	|УчитыватьДоступностьТСпоСостоянию,
	|УчитыватьДоступностьТСпоРадиусу,
	|РадиусДоступностиТС,
	|УчитыватьПросроченныеДокументы,
	|УчитыватьETA,
	|ОтображатьЭлектронныеКартыПриОткрытии,
	|НастройкаПроверятьНахождениеВЗонеПоФактическомуМестоположениюТС,
	|НастройкаВремяАктуальностиКоординат,
	|НастройкаИндивидуальныйГаражТС,
	|НастройкаУчитыватьГаражПриВозвращении,
	|УчитыватьОграниченияПоЗагрузкеТС,
	|НастройкаРежимДобавленияЗаказовВМаршруты,
	|НастройкаМаксимальнаяПродолжительностьМаршрута,
	|НастройкаМаксимальноеРасстояниеМаршрута,
	|НастройкаМаксимальноеЧислоЗаказовМаршрута,
	|НастройкаМаксимальноеЧислоПунктовМаршрута,
	|НастройкаВремяВыездаТранспортныхСредств,
	|НастройкаВремяВозвратаТранспортныхСредств,
	|НастройкаВремяНачалаПланирования,
	|НастройкаВремяОкончанияПланирования,
	|НастройкаУчитыватьОкнаПоЗаказамПриМаршрутизации,
	|НастройкаСжатияМаксВес,
	|НастройкаСжатияМаксВремя,
	|НастройкаСжатияМаксОбъем,
	|НастройкаСжатияМаксРасстояние,
	|НастройкаСжатияМаксУпак,
	|НастройкаУчитыватьРазрешенныеТипыТС,
	|НастройкаУчитыватьОкноПогрузкиТерминалов,
	|НастройкаИспользоватьВПриоритетеСобственныйТранспорт,
	|НастройкаКларкРайтРежимДоставки,
	|НастройкаВремяВыездаИзГаража,
	|НастройкаПараметрРазмераЗаказа,
	|НастройкаПриоритетМаршрутизации,
	|НастройкаПонижающийКоэффициентЗагрузкиКузоваПоОбъему,
	|НастройкаПонижающийКоэффициентЗагрузкиКузоваПоВесу,
	|НастройкаУчитыватьГруппировкуВМаршрутномЛисте,
	|НастройкаВесОтдельнойГруппировки,
	|НастройкаУчитыватьУпаковкуВПаллетыВМЛ,
	|НастройкаПонижающийКоэффициентЗагрузкиПаллетыПоОбъему,
	|РаспределениеПоМаршрутамУчитыватьРазрешенныеТипыТС,
	|РаспределениеПоМаршрутамМаршрутизацияВФоновомРежиме,
	|РаспределениеПоМаршрутамУчитыватьОкнаПоЗаказамПриМаршрутизации,
	|РаспределениеПоМаршрутамУчитыватьОкноПогрузкиТерминалов,
	|РаспределениеПоМаршрутамИспользоватьВПриоритетеСобственныйТранспорт,
	|РаспределениеПоМаршрутамПонижающийКоэффициентЗагрузкиКузоваПоОбъему,
	|РаспределениеПоМаршрутамПонижающийКоэффициентЗагрузкиКузоваПоВесу,
	|НастройкаУчитыватьНаправленияПеревозки,
	|НастройкаВедущаяКолонкаТабЗаказов,
	|НастройкаИспользоватьРасчетТары,
	|НастройкаУчитыватьСекцииТранспортныхСредств,
	|НастройкаСмешиватьГрузыВСекциях,
	|НастройкаИспользоватьМногорейсовыеМаршруты,
	|НастройкаИспользоватьХарактеристикиЗаказовНаТС,
	|НастройкиВнешнийМаршрутизатор,
	|НастройкаЧасовойПояс,
	|НастройкаВозвратВГаражСобственныеТС,
	|НастройкаВозвратВГаражПривлеченныеТС,
	|НастройкаВозвратВГаражВиртуальныеТС,
	|НастройкаУчитыватьГруппыСовместимости,
	|НастройкаСохранятьЭтапыМаршрутизации,
	|НастройкаУстанавливатьФлагСозданАвтоматическиМЛ");
	
	СтруктураНастроекАРМ = ПолучитьНастройкиМаршрутизации();
	ЗаполнитьЗначенияСвойств(СтруктураНастроек, СтруктураНастроекАРМ);
	

	ЗаполнитьЗначенияСвойств(СтруктураНастроек, ЭтотОбъект);
	СтруктураНастроекJSON = СтруктураНастроек;
	ЗаписьJSON = Новый ЗаписьJSON;
	ПарметрыЗаписиJSON = Новый ПараметрыЗаписиJSON(,Символы.Таб);
	ЗаписьJSON.УстановитьСтроку(ПарметрыЗаписиJSON);
	
	стНастройкиВнешнийМаршрутизатор = уатЗащищенныеФункцииСервер_уэ.ПрочитатьНастройкиВнешнийМаршрутизатор(СтруктураНастроек.НастройкиВнешнийМаршрутизатор);
	Если стНастройкиВнешнийМаршрутизатор = Неопределено Тогда
		стНастройкиВнешнийМаршрутизатор = "";
	КонецЕсли;
	
	Для Каждого Элемент из СтруктураНастроек Цикл
		Если Элемент.Ключ = "НастройкиВнешнийМаршрутизатор" Тогда
			СтруктураНастроекJSON[Элемент.Ключ] = уатОбщегоНазначения.АдаптацияПолейДляJSON(стНастройкиВнешнийМаршрутизатор);
		Иначе 
			СтруктураНастроекJSON[Элемент.Ключ] = уатОбщегоНазначения.АдаптацияПолейДляJSON(Элемент.Значение);
		КонецЕсли;
	КонецЦикла;

	ЗаписатьJSON(ЗаписьJSON, СтруктураНастроекJSON);
	СтрокаJSON = ЗаписьJSON.Закрыть();
	
	ТекЭтапМаршрутизации.НастройкиМаршрутизации  = СтрокаJSON;

	МассивМЛ = Новый Массив();
	Если ЕстьМетрики Тогда
		Для Каждого ТекСтрока Из МетрикиВнешнейМаршрутизации Цикл
			Если ТекСтрока.Значение.Свойство("ТС") Тогда
				мИдентификаторов = СтрРазделить(ТекСтрока.Значение.ТС, "уатМЛ#", Ложь);
				стТС = "";
				стМЛ = "";
				Если мИдентификаторов.Количество() = 2 Тогда
					стТС = мИдентификаторов[0];
					стМЛ = мИдентификаторов[1];
				КонецЕсли;
				Для Каждого ТекМетрика Из ТекСтрока.Значение.Метрики Цикл
					НоваяСтрока = ТекЭтапМаршрутизации.Метрики.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекМетрика);
					НоваяСтрока.ЗначениеТекущее = НоваяСтрока.Значение;
					Попытка
						НоваяСтрока.МаршрутныйЛист = Документы.уатМаршрутныйЛист.ПолучитьСсылку(Новый УникальныйИдентификатор(стМЛ));
						НоваяСтрока.ТС             = Справочники.уатТС.ПолучитьСсылку(Новый УникальныйИдентификатор(стТС));
						НоваяСтрока.GUIDТС         = стТС;
						
						Если МассивМЛ.Найти(НоваяСтрока.МаршрутныйЛист) = Неопределено Тогда
							МассивМЛ.Добавить(НоваяСтрока.МаршрутныйЛист);
						Конецесли;
					Исключение
					КонецПопытки;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ТекЭтапМаршрутизации.Метрики.Сортировать("ТС, Свойство");
	
	Попытка
		ТекЭтапМаршрутизации.Записать();
	Исключение
	КонецПопытки;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВнешняяМаршрутизация_ДобавитьЗадачуSVRP(ПараметрыМаршрутизации, ТекстОшибки)
	
	МодульВнешнейМаршрутизации = ОбщегоНазначения.ОбщийМодуль("уатВнешнийМаршрутизаторСервер_уэ");
	
	Возврат МодульВнешнейМаршрутизации.Маршрутизация_ДобавитьЗадачуSVRP(
		ПараметрыМаршрутизации.ДанныеПоЗаказам.ДатаВыезда,
		ПараметрыМаршрутизации.ХарактеристикиСцепки,
		ПараметрыМаршрутизации.ДанныеПоЗаказам,
		ПараметрыМаршрутизации.НастройкиМаршрутизации,
		ТекстОшибки
	);
	
КонецФункции

&НаСервереБезКонтекста
Функция ВнешняяМаршрутизация_ПолучитьРезультатSVRP(АдресВрХранилища, IDзадачи, ТекстОшибки, флRarusVRP)
	
	МодульВнешнейМаршрутизации = ОбщегоНазначения.ОбщийМодуль("уатВнешнийМаршрутизаторСервер_уэ");
	
	Возврат МодульВнешнейМаршрутизации.Маршрутизация_ПолучитьРезультатSVRP(
		АдресВрХранилища,
		IDзадачи,
		ТекстОшибки,
		флRarusVRP
	);
	
КонецФункции

&НаКлиенте
Процедура ОптимальноеПерестроениеЗаказовПослеПроверкиЧислаЗаказов(РезультатВопроса, ПараметрыОптимизации) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		ОбработкаДокументовОптимизацияМаршрутаКолВо = ОбработкаДокументовОптимизацияМаршрутаКолВо + 1;
		Возврат;
	КонецЕсли;
	
	Если ПараметрыОптимизации.АлгоритмОптимальногоПерестроения <> "Яндекс"
		И ПараметрыОптимизации.АлгоритмОптимальногоПерестроения <> "RarusVRP"
		И Не уатЗащищенныеФункцииСервер_уэ.ВремяРасстояниеМеждуПунктамиЗаполнено(ПараметрыОптимизации.мсвДопАдреса) Тогда 
		
		Если ПараметрыОптимизации.НастройкиМаршрутизации.Оптимизация_НастройкаМаршрутизацияВФоновомРежиме Тогда 
			ПараметрыВыполненияФЗ = Новый Массив();
			ПараметрыВыполненияФЗ.Добавить(ПараметрыОптимизации.мсвДопАдреса);
			
			ИмяМетодаФЗ = "уатЗащищенныеФункцииСервер_уэ.ОбновитьВремяРасстояниеМеждуПунктами";
			
			ОповещениеПослеДлительнойОперацииОптимизацияМаршрута = Новый ОписаниеОповещения(
				"ОптимальноеПерестроениеЗаказовПослеОбновленияПунктов", ЭтотОбъект, ПараметрыОптимизации);
			
			ЗаданиеВыполнено = СтартФоновогоЗаданияНаСервере(ПараметрыВыполненияФЗ, ИмяМетодаФЗ);
			Если ЗаданиеВыполнено Тогда
				ОптимальноеПерестроениеЗаказовПослеОбновленияПунктов(Неопределено, ПараметрыОптимизации);
				Возврат;
			КонецЕсли;
			
			// Операция еще не завершена, выполняется с помощью фонового задания (асинхронно).
			ПараметрыОбработчикаОжиданияОптимизацияМаршрута = Новый Структура(
				"МинимальныйИнтервал,
				|МаксимальныйИнтервал,
				|ТекущийИнтервал,
				|КоэффициентУвеличенияИнтервала", 
				1, 15, 1, 1.4);
			
			ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		Иначе 
			уатЗащищенныеФункцииСервер_уэ.ОбновитьВремяРасстояниеМеждуПунктами(, ПараметрыОптимизации.мсвДопАдреса);
			ОптимальноеПерестроениеЗаказовПослеОбновленияПунктов(Неопределено, ПараметрыОптимизации);
		КонецЕсли;
	Иначе 
		ОптимальноеПерестроениеЗаказовПослеОбновленияПунктов(Неопределено, ПараметрыОптимизации);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОптимальноеПерестроениеЗаказовПослеОбновленияПунктов(Результат, ДопПараметры) Экспорт
	
	Если ДопПараметры.АлгоритмОптимальногоПерестроения = "Яндекс"
		Или ДопПараметры.АлгоритмОптимальногоПерестроения = "RarusVRP" Тогда
		ТекстОшибки = "";
		
		IDзадачиВнешнийМаршрутизаторОптимизацияМаршрута = ВнешняяМаршрутизация_ДобавитьЗадачуSVRP(ДопПараметры, ТекстОшибки);
		
		Если Не ЗначениеЗаполнено(IDзадачиВнешнийМаршрутизаторОптимизацияМаршрута) Тогда 
			ПоказатьПредупреждение(, ТекстОшибки);
			ОбработкаДокументовОптимизацияМаршрутаКолВо = ОбработкаДокументовОптимизацияМаршрутаКолВо + 1;
			Возврат;
		КонецЕсли;
		
		УстановитьАдресХранилищаДляРезультатаМаршрутизацииОптимизацииМаршрута();
		
		ЗаданиеВыполнено = ВнешняяМаршрутизация_ПолучитьРезультатSVRP(АдресХранилищаДООптимизацияМаршрута,
			IDзадачиВнешнийМаршрутизаторОптимизацияМаршрута, ТекстОшибки, флRarusVRP);
		Если ЗаданиеВыполнено Тогда
			Если ТекстОшибки = "" Тогда 
				ОптимальноеПерестроениеЗаказовПослеМаршрутизации(Неопределено, ДопПараметры);
			Иначе 
				ПоказатьПредупреждение(, ТекстОшибки);
				ОбработкаДокументовОптимизацияМаршрутаКолВо = ОбработкаДокументовОптимизацияМаршрутаКолВо + 1;
			КонецЕсли;
			
			IDзадачиВнешнийМаршрутизаторОптимизацияМаршрута = Неопределено;
			
			Возврат;
		КонецЕсли;
		
		ОповещениеПослеДлительнойОперацииОптимизацияМаршрута = Новый ОписаниеОповещения("ОптимальноеПерестроениеЗаказовПослеМаршрутизации", ЭтотОбъект, ДопПараметры);
		
		// Операция еще не завершена, выполняется с помощью фонового задания (асинхронно).
		ПараметрыОбработчикаОжиданияОптимизацияМаршрута = Новый Структура(
			"МинимальныйИнтервал,
			|МаксимальныйИнтервал,
			|ТекущийИнтервал,
			|КоэффициентУвеличенияИнтервала", 
			1, 15, 1, 1.4);
		
		ПодключитьОбработчикОжидания("Подключаемый_ВнешняяМаршрутизация_ПроверитьВыполнениеЗадания", 1, Истина);
		
	ИначеЕсли ДопПараметры.НастройкиМаршрутизации.Оптимизация_НастройкаМаршрутизацияВФоновомРежиме Тогда 
		ПараметрыВыполненияФЗ = Новый Массив();
		ПараметрыВыполненияФЗ.Добавить(ДопПараметры.ХарактеристикиСцепки.Грузоподъемность);
		ПараметрыВыполненияФЗ.Добавить(ДопПараметры.ХарактеристикиСцепки.ОбъемКузова);
		ПараметрыВыполненияФЗ.Добавить(ДопПараметры.ХарактеристикиСцепки.МаксимальноеКоличествоУпаковок);
		ПараметрыВыполненияФЗ.Добавить(ДопПараметры.ХарактеристикиСцепки.ТипТС);
		ПараметрыВыполненияФЗ.Добавить(ДопПараметры.ДанныеПоЗаказам.Заказы);
		ПараметрыВыполненияФЗ.Добавить(ДопПараметры.мсвДопАдреса);
		ПараметрыВыполненияФЗ.Добавить(ДопПараметры.ДанныеПоЗаказам.Гараж);
		ПараметрыВыполненияФЗ.Добавить(ДопПараметры.ДанныеПоЗаказам.УчитыватьГаражВозвращения);
		ПараметрыВыполненияФЗ.Добавить(ДопПараметры.ДанныеПоЗаказам.ДатаВыезда);
		ПараметрыВыполненияФЗ.Добавить(ДопПараметры.НастройкиМаршрутизации.Оптимизация_НастройкаРежимОптимизации);
		ПараметрыВыполненияФЗ.Добавить(ДопПараметры.НастройкиМаршрутизации.Оптимизация_НастройкаУчитыватьОкнаПоЗаказам);
		
		ИмяМетодаФЗ = "уатЗащищенныеФункцииСервер_уэ.РаспределитьЗаказыВМаршрутномЛисте";
		
		ОповещениеПослеДлительнойОперацииОптимизацияМаршрута = Новый ОписаниеОповещения("ОптимальноеПерестроениеЗаказовПослеМаршрутизации", ЭтотОбъект, ДопПараметры);
		
		ЗаданиеВыполнено = СтартФоновогоЗаданияНаСервере(ПараметрыВыполненияФЗ, ИмяМетодаФЗ);
		Если ЗаданиеВыполнено Тогда
			ОптимальноеПерестроениеЗаказовПослеМаршрутизации(Неопределено, ДопПараметры);
			Возврат;
		КонецЕсли;
		
		// Операция еще не завершена, выполняется с помощью фонового задания (асинхронно).
		ПараметрыОбработчикаОжиданияОптимизацияМаршрута = Новый Структура(
			"МинимальныйИнтервал,
			|МаксимальныйИнтервал,
			|ТекущийИнтервал,
			|КоэффициентУвеличенияИнтервала", 
			1, 15, 1, 1.4);
		
		ПодключитьОбработчикОжидания("Подключаемый_ПроверитьВыполнениеЗадания", 1, Истина);
		
	Иначе 
		УстановитьАдресХранилищаДляРезультатаМаршрутизацииОптимизацииМаршрута();
		уатЗащищенныеФункцииСервер_уэ.РаспределитьЗаказыВМаршрутномЛисте(
			АдресХранилищаДООптимизацияМаршрута,
			ДопПараметры.ХарактеристикиСцепки.Грузоподъемность,
			ДопПараметры.ХарактеристикиСцепки.ОбъемКузова,
			ДопПараметры.ХарактеристикиСцепки.МаксимальноеКоличествоУпаковок,
			ДопПараметры.ХарактеристикиСцепки.ТипТС,
			ДопПараметры.ДанныеПоЗаказам.Заказы,
			ДопПараметры.мсвДопАдреса,
			ДопПараметры.ДанныеПоЗаказам.Гараж,
			ДопПараметры.ДанныеПоЗаказам.УчитыватьГаражВозвращения,
			ДопПараметры.ДанныеПоЗаказам.ДатаВыезда,
			ДопПараметры.НастройкиМаршрутизации.Оптимизация_НастройкаРежимОптимизации,
			ДопПараметры.НастройкиМаршрутизации.Оптимизация_НастройкаУчитыватьОкнаПоЗаказам
		);
		ОптимальноеПерестроениеЗаказовПослеМаршрутизации(Неопределено, ДопПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВнешняяМаршрутизация_ПроверитьВыполнениеЗадания()
	
	ТекстОшибки = "";
	
	ЗаданиеВыполнено = ВнешняяМаршрутизация_ПолучитьРезультатSVRP(АдресХранилищаДООптимизацияМаршрута,
		IDзадачиВнешнийМаршрутизаторОптимизацияМаршрута, ТекстОшибки, флRarusVRP);
	
	Если ЗаданиеВыполнено Тогда
		
		Если ТекстОшибки = "" Тогда 
			Если Не ОповещениеПослеДлительнойОперацииОптимизацияМаршрута = Неопределено Тогда 
				ВыполнитьОбработкуОповещения(ОповещениеПослеДлительнойОперацииОптимизацияМаршрута);
				ОповещениеПослеДлительнойОперацииОптимизацияМаршрута = Неопределено;
			КонецЕсли;
			
		Иначе 
			ПоказатьПредупреждение(, ТекстОшибки);
		КонецЕсли;
		
		IDзадачиВнешнийМаршрутизаторОптимизацияМаршрута = Неопределено;
		
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.ТекущийИнтервал * ПараметрыОбработчикаОжидания.КоэффициентУвеличенияИнтервала;
	Если ПараметрыОбработчикаОжидания.ТекущийИнтервал > ПараметрыОбработчикаОжидания.МаксимальныйИнтервал Тогда
		ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.МаксимальныйИнтервал;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания(
		"Подключаемый_ВнешняяМаршрутизация_ПроверитьВыполнениеЗадания", 
		ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
		Истина
	);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ПроверитьВыполнениеЗадания()
	
	Попытка
		Если ЗаданиеВыполнено() Тогда 
			ЗакрытьФормуДлительнойОперации();
			Если Не ОповещениеПослеДлительнойОперацииОптимизацияМаршрута = Неопределено Тогда 
				ВыполнитьОбработкуОповещения(ОповещениеПослеДлительнойОперацииОптимизацияМаршрута);
				ОповещениеПослеДлительнойОперацииОптимизацияМаршрута = Неопределено;
			КонецЕсли;
			Возврат;
		КонецЕсли;
	Исключение
		ЗакрытьФормуДлительнойОперации();
		ВызватьИсключение;
	КонецПопытки;
	
	ПараметрыОбработчикаОжиданияОптимизацияМаршрута.ТекущийИнтервал = ПараметрыОбработчикаОжиданияОптимизацияМаршрута.ТекущийИнтервал * ПараметрыОбработчикаОжиданияОптимизацияМаршрута.КоэффициентУвеличенияИнтервала;
	Если ПараметрыОбработчикаОжиданияОптимизацияМаршрута.ТекущийИнтервал > ПараметрыОбработчикаОжиданияОптимизацияМаршрута.МаксимальныйИнтервал Тогда
		ПараметрыОбработчикаОжиданияОптимизацияМаршрута.ТекущийИнтервал = ПараметрыОбработчикаОжиданияОптимизацияМаршрута.МаксимальныйИнтервал;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания(
		"Подключаемый_ПроверитьВыполнениеЗадания", 
		ПараметрыОбработчикаОжиданияОптимизацияМаршрута.ТекущийИнтервал, 
		Истина);
	
КонецПроцедуры

&НаСервере
Процедура ОптимальноеПерестроениеЗаказовПослеМаршрутизации(Результат, ДопПараметры) Экспорт
	
	ТекстПредупреждения = "";
	ВыполнитьРаспределениеСервер(ДопПараметры, ТекстПредупреждения);
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьРаспределениеСервер(ДопПараметры, ТекстПредупреждения)
	
	РаспредЗаказов = ПолучитьИзВременногоХранилища(АдресХранилищаДООптимизацияМаршрута);
	
	Если РаспредЗаказов = Неопределено Или Не ТипЗнч(РаспредЗаказов) = Тип("Структура") Или Не РаспредЗаказов.Свойство("пул") Тогда
		ОбработкаДокументовОптимизацияМаршрутаКолВо = ОбработкаДокументовОптимизацияМаршрутаКолВо + 1;
		ОптимизацияМаршрутаМожноВыполнять = Истина;
		Возврат;
	КонецЕсли;
	
	ДокОбъект = ДопПараметры.ТекДокумент.ПолучитьОбъект();
	уатОбщегоНазначения_уэ.ВыполнитьРаспределениеСервер(ДокОбъект, ДопПараметры.ДанныеПоЗаказам, РаспредЗаказов);
	
	флВнешняяМаршрутизация = РаспредЗаказов.Свойство("ВнешняяМаршрутизация");
	Если Не флВнешняяМаршрутизация Тогда
		ДокОбъект.ОбновитьВремяРасстояниеМеждуПунктами(Истина);
	КонецЕсли;

	Если ДокОбъект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя") Тогда 
		ПересчитатьПлановоеВремя(ДокОбъект);
	КонецЕсли;
	
	Попытка
		ДокОбъект.Записать();
	Исключение
	КонецПопытки;
	
	ОбработкаДокументовОптимизацияМаршрутаКолВо = ОбработкаДокументовОптимизацияМаршрутаКолВо + 1;
	ОптимизацияМаршрутаМожноВыполнять = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьПлановоеВремя(ДокОбъект, ДатаВыездаНаМаршрут=Неопределено)
	
	тблЗаказы = ДокОбъект.Заказы.Выгрузить();
	Документы.уатМаршрутныйЛист.ПересчитатьПлановоеВремя(тблЗаказы, ДокОбъект.ДатаИВремяОтправленияПлан, ДокОбъект.ПересчетВремени);
	ДокОбъект.Заказы.Загрузить(тблЗаказы);
	
КонецПроцедуры

&НаСервере
Функция СтартФоновогоЗаданияНаСервере(ДопПараметрыВыполнения, ИмяМетода)
	
	АдресХранилищаДООптимизацияМаршрута = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	ЗаданиеВыполнено = Ложь; 
	
	НаименованиеЗадания = НСтр("en='Orders routing';ru='Маршрутизация заказов'");
	
	ПараметрыВыполнения = Новый Массив();
	ПараметрыВыполнения.Добавить(АдресХранилищаДООптимизацияМаршрута);
	
	Для Каждого ТекДопПараметр Из ДопПараметрыВыполнения Цикл 
		ПараметрыВыполнения.Добавить(ТекДопПараметр);
	КонецЦикла;
	
	Если ПолучитьСкоростьКлиентскогоСоединения() = СкоростьКлиентскогоСоединения.Низкая Тогда
		ВремяОжидания = 4;
	Иначе
		ВремяОжидания = 2;
	КонецЕсли;
	
	Задание = ФоновыеЗадания.Выполнить(ИмяМетода, ПараметрыВыполнения,, НаименованиеЗадания);
	
	Попытка
		Задание.ОжидатьЗавершения(ВремяОжидания);
	Исключение  
		// Специальная обработка не требуется. Предположительно, исключение вызвано истечением времени ожидания.
	КонецПопытки;
	
	ИдентификаторЗадания = Задание.УникальныйИдентификатор;
	// Если операция уже завершилась, то сразу обрабатываем результат.
	Если ЗаданиеВыполнено() Тогда
		ЗаданиеВыполнено = Истина;
	КонецЕсли; 
	
	Возврат ЗаданиеВыполнено;
	
КонецФункции

&НаСервере
Функция ЗаданиеВыполнено()
	
	Задание = НайтиЗаданиеПоИдентификатору();
	
	Если Задание <> Неопределено И Задание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Задание = Неопределено Тогда
		ТекстКомментария = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
			НСтр("en='The background job (id=%1) is not found';ru='Фоновое задание (id=%1) не найдено'"), ИдентификаторЗадания);
		ЗаписьЖурналаРегистрации(НСтр("en='Long-running operation';ru='Длительная операция'"),
			УровеньЖурналаРегистрации.Ошибка,,, ТекстКомментария);
	ИначеЕсли Задание.Состояние = СостояниеФоновогоЗадания.ЗавершеноАварийно Тогда
		ОшибкаЗадания = Задание.ИнформацияОбОшибке;
		Если ОшибкаЗадания <> Неопределено Тогда
			ЗаписьЖурналаРегистрации(НСтр("en='Long-running operation';ru='Длительная операция'"),
				УровеньЖурналаРегистрации.Ошибка,,,
				ПодробноеПредставлениеОшибки(ОшибкаЗадания));
		Иначе
			ЗаписьЖурналаРегистрации(НСтр("en='Long-running operation';ru='Длительная операция'"),
				УровеньЖурналаРегистрации.Ошибка,,,
				НСтр("en='Task ended with an unknown error.';ru='Задание завершилось с неизвестной ошибкой.'"));
		КонецЕсли;
	ИначеЕсли Задание.Состояние = СостояниеФоновогоЗадания.Отменено Тогда
		ЗаписьЖурналаРегистрации(НСтр("en='Long-running operation';ru='Длительная операция'"),
			УровеньЖурналаРегистрации.Ошибка,,,
			НСтр("en='Background job cancelled by administrator';ru='Фоновое задание отменено администратором'"));
		Возврат Истина;
	Иначе
		Возврат Истина;
	КонецЕсли;
	
	ВызватьИсключение(НСтр("en='Could not perform this operation. For details, see. in the register.';ru='Не удалось выполнить оптиизацию маршрута. Подробности см. в Журнале регистрации.'"));
	
КонецФункции

&НаСервере
Функция НайтиЗаданиеПоИдентификатору()
	
	Задание = ФоновыеЗадания.НайтиПоУникальномуИдентификатору(ИдентификаторЗадания);
	
	Возврат Задание;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПодготовитьПараметрыОптимизации(ТекДокумент)
	
	Возврат уатОбщегоНазначения_уэ.ПодготовитьПараметрыОптимизации(ТекДокумент)
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьНастройкиМаршрутизации()
	
	Возврат Документы.уатМаршрутныйЛист.ПолучитьНастройкиМаршрутизации();
	
КонецФункции // ПолучитьНастройкиМаршрутизации()

&НаСервере
Процедура ПриИзмененииКонтрагента(ТекДокумент, СтрокаТабличнойЧасти, ИмяТабличнойЧасти)
	
	ДанныеОбменаССервером = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, Дата");
	ДанныеОбменаССервером.Организация = ТекДокумент.Организация;
	ДанныеОбменаССервером.Дата = ТекДокумент.Дата;
	ДанныеОбменаССервером.Контрагент = СтрокаТабличнойЧасти.Контрагент;
	ДанныеОбменаССервером.ДоговорКонтрагента = СтрокаТабличнойЧасти.Договор;
	
	// Получим данные с сервера
	ЗначенияДляЗаполнения = ИзменениеКонтрагентаСервер(ДанныеОбменаССервером, ИмяТабличнойЧасти = "Доходы");
	СтрокаТабличнойЧасти.Договор = ЗначенияДляЗаполнения.ДоговорКонтрагента;                           
	ПриИзмененииДоговора(ТекДокумент, СтрокаТабличнойЧасти, ИмяТабличнойЧасти);

КонецПроцедуры

&НаСервере
Функция ИзменениеКонтрагентаСервер(ДанныеДляЗаполнения, флПокупатель = Истина)
	Если флПокупатель = Истина Тогда
		СтруктураПараметровДляПолученияДоговора =
			уатЗаполнениеДокументов.ПолучитьСтруктуруПараметровДляПолученияДоговораПродажи();
	Иначе
		СтруктураПараметровДляПолученияДоговора =
			уатЗаполнениеДокументов.ПолучитьСтруктуруПараметровДляПолученияДоговораПокупки();
	КонецЕсли;
	
	ЗначенияДляЗаполнения = уатОбщегоНазначенияСервер.ПриИзмененииЗначенияКонтрагента(ДанныеДляЗаполнения,
							СтруктураПараметровДляПолученияДоговора);
	Возврат ЗначенияДляЗаполнения;
КонецФункции

&НаСервере
Процедура ПриИзмененииДоговора(ТекДокумент, ТекСтрокаТЧ, ИмяТЧ, ПересчитыватьСуммуПоКурсу = Ложь)
	
	СтруктураДанные = ПолучитьДанныеДоговорПриИзменении(ТекДокумент.Дата, ТекСтрокаТЧ.Договор);
	
	Если ЗначениеЗаполнено(ТекСтрокаТЧ.Договор) Тогда 
		ТекСтрокаТЧ.КурсВзаиморасчетов	    = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Курс = 0, 1,
			СтруктураДанные.ВалютаРасчетовКурсКратность.Курс);
		ТекСтрокаТЧ.КратностьВзаиморасчетов = ?(СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность = 0, 1,
			СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность);
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекСтрокаТЧ.Договор)
		И ТекСтрокаТЧ.Валюта <> СтруктураДанные.ВалютаРасчетов Тогда
		Если ПересчитыватьСуммуПоКурсу Тогда
			СтруктураКурсНач = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ТекСтрокаТЧ.Валюта, ТекДокумент.Дата);
			ТекСтрокаТЧ.Цена = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(ТекСтрокаТЧ.Цена, 
				ТекСтрокаТЧ.Валюта,
				СтруктураДанные.ВалютаРасчетов,
				СтруктураКурсНач.Курс, 
				СтруктураДанные.ВалютаРасчетовКурсКратность.Курс, 
				СтруктураКурсНач.Кратность, 
				СтруктураДанные.ВалютаРасчетовКурсКратность.Кратность);
																	
			РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрокаТЧ,, ?(ИмяТЧ = "Доходы", "Факт", Неопределено));
		КонецЕсли;
		ТекСтрокаТЧ.Валюта = СтруктураДанные.ВалютаРасчетов;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти = Неопределено, РасчетНДС = Истина, ПланФакт = Неопределено)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
		
	Если ПланФакт = Неопределено ИЛИ ПланФакт = "План" Тогда
		СтрокаТабличнойЧасти.СуммаПлан = СтрокаТабличнойЧасти.КоличествоПлан * СтрокаТабличнойЧасти.ЦенаПлан;
	КонецЕсли;
	Если ПланФакт = Неопределено ИЛИ ПланФакт = "Факт" Тогда
		СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
	КонецЕсли;
	
	Если РасчетНДС Тогда
		РассчитатьСуммуНДС(СтрокаТабличнойЧасти, ПланФакт);
	КонецЕсли;
	
	РассчитатьСуммуВсегоВстрокеТЧ(СтрокаТабличнойЧасти, ПланФакт);
		
КонецПроцедуры

&НаСервере
Процедура РассчитатьСуммуВсегоВстрокеТЧ(СтрокаТабличнойЧасти, ПланФакт = Неопределено)
	Если ПланФакт = Неопределено ИЛИ ПланФакт = "План" Тогда
		СтрокаТабличнойЧасти.ВсегоПлан = СтрокаТабличнойЧасти.СуммаПлан + ?(СтрокаТабличнойЧасти.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДСПлан);
	КонецЕсли;
	Если ПланФакт = Неопределено ИЛИ ПланФакт = "Факт" Тогда
		СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма + ?(СтрокаТабличнойЧасти.СуммаВключаетНДС, 0, СтрокаТабличнойЧасти.СуммаНДС);
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура РассчитатьСуммуНДС(СтрокаТабличнойЧасти, ПланФакт = Неопределено)
	
	СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	
	Если ПланФакт = Неопределено ИЛИ ПланФакт = "План" Тогда
		СтрокаТабличнойЧасти.СуммаНДСПлан = ?(СтрокаТабличнойЧасти.СуммаВключаетНДС, 
			СтрокаТабличнойЧасти.СуммаПлан - (СтрокаТабличнойЧасти.СуммаПлан) / ((СтавкаНДС + 100) / 100),
			СтрокаТабличнойЧасти.СуммаПлан * СтавкаНДС / 100);
	КонецЕсли;
	
	Если ПланФакт = Неопределено ИЛИ ПланФакт = "Факт" Тогда
		СтрокаТабличнойЧасти.СуммаНДС = ?(СтрокаТабличнойЧасти.СуммаВключаетНДС, 
			СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
			СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);
	КонецЕсли;
			
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеДоговорПриИзменении(Дата, Договор)
	
	СтруктураДанные = Новый Структура;
	
	СтруктураДанные.Вставить(
	"ВалютаРасчетов", Договор.ВалютаВзаиморасчетов);
	
	СтруктураДанные.Вставить(
	"ВалютаРасчетовКурсКратность",
	РегистрыСведений.КурсыВалют.ПолучитьПоследнее(Дата, Новый Структура("Валюта", Договор.ВалютаВзаиморасчетов)));
	
	Возврат СтруктураДанные;
	
КонецФункции

&НаСервере
Процедура НазадСервер()
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.НастройкаИзменений;
	
	ОбработкаЗавершена = Ложь;
	ОбъектыКоторыеНеУдалосьИзменить.Очистить();
	Элементы.ФормаНазад.Видимость = Ложь;
	Если Объект.ТипОперации = "ВыполнитьАлгоритм" Тогда
		Элементы.ФормаИзменить.Заголовок = НСтр("ru='Выполнить';en='Complete'");
		Элементы.ФормаИзменить.РасширеннаяПодсказка.Заголовок = НСтр("ru='Выполнить алгоритм';en='Execute algorithm'");
	Иначе
		Элементы.ФормаИзменить.Заголовок = НСтр("ru='Обработать документы';en='Process documents'");
	КонецЕсли;
	
	ОбновитьНадписиСервер();
	
КонецПроцедуры

&НаСервере
Процедура ПерейтиНаСтраницуВсеГотово()
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.ВсеГотово;
	Элементы.НадписьУспешноЗавершено.Заголовок = ПодставитьПараметрыВСтроку(
		НСтр("ru='Реквизиты выбранных элементов были изменены."
"Всего изменено элементов: %1';en='Attributes of selected items were changed."
"Total items changed: %1'"), ТекущееСостояниеИзменения.КоличествоИзмененных);
	Элементы.ФормаИзменить.Заголовок = НСтр("ru='Готово';en='Done'");
	Элементы.ФормаНазад.Видимость = Истина;
	
КонецПроцедуры

&НаСервере
Функция ТипыИзменяемыхОбъектов()
	Результат = Новый Массив;
	Для Каждого ВидОбъектов Из СтрРазделить(ВидыИзменяемыхОбъектов, ",", Ложь) Цикл
		МенеджерОбъекта = МенеджерОбъектаПоПолномуИмени(ВидОбъектов);
		Результат.Добавить(ТипЗнч(МенеджерОбъекта.ПустаяСсылка()));
	КонецЦикла;
	Возврат Результат;
КонецФункции

&НаСервере
Процедура ЗавершающиеДействияПриИзмененииСервер()
	Если ДлительнаяОперация.Свойство("ИдентификаторЗадания") Тогда
		МодульДлительныеОперации = ОбщийМодуль("ДлительныеОперации");
		МодульДлительныеОперации.ОтменитьВыполнениеЗадания(ДлительнаяОперация.ИдентификаторЗадания);
	КонецЕсли;
	
	Элементы.Страницы.ТекущаяСтраница = Элементы.ИзменениеОбъектов;
	СохранитьТекущиеНастройкиИзменения();
КонецПроцедуры

&НаСервере
Процедура СохранитьТекущиеНастройкиИзменения()
	
	ТекущиеНастройки = ТекущиеНастройкиИзменения();
	Если ТекущиеНастройки <> Неопределено Тогда
		ДобавитьИзменениеВИсторию(ТекущиеНастройки.ОписаниеИзменения, ТекущиеНастройки.ПредставлениеИзменения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ТекущиеНастройкиИзменения()
	
	Если Объект.ТипОперации = "ВыполнитьАлгоритм" Тогда
		Результат = Новый Структура;
		Результат.Вставить("ОписаниеИзменения", КодАлгоритма);
		Результат.Вставить("ПредставлениеИзменения", Алгоритм);
		Возврат Результат;
	КонецЕсли;
	
	ОписаниеИзменения = Новый Структура;
	КоллекцияОпераций = РеквизитыОбъекта.НайтиСтроки(Новый Структура("Изменять", Истина));
	
	ШаблонПредставления = "[Поле] = <Значение>";
	ПредставлениеИзменения = "";
	
	НастройкаИзмененияРеквизитов = Новый Массив;
	Для Каждого ОписаниеОперации Из КоллекцияОпераций Цикл
		СтруктураИзменения = Новый Структура;
		СтруктураИзменения.Вставить("ВидОперации", ОписаниеОперации.ВидОперации);
		СтруктураИзменения.Вставить("ИмяРеквизита", ОписаниеОперации.Имя);
		СтруктураИзменения.Вставить("Свойство", ОписаниеОперации.Свойство);
		СтруктураИзменения.Вставить("Значение", ОписаниеОперации.Значение);
		НастройкаИзмененияРеквизитов.Добавить(СтруктураИзменения);
		
		ЗначениеСтрокой = СокрЛП(Строка(ОписаниеОперации.Значение));
		Если ПустаяСтрока(ЗначениеСтрокой) Тогда
			ЗначениеСтрокой = """""";
		КонецЕсли;
		Изменение = СтрЗаменить(ШаблонПредставления, "[Поле]", СокрЛП(Строка(ОписаниеОперации.Представление)));
		Изменение = СтрЗаменить(Изменение, "<Значение>", ЗначениеСтрокой);
		
		Если Не ПустаяСтрока(ПредставлениеИзменения) Тогда
			ПредставлениеИзменения = ПредставлениеИзменения + "; ";
		КонецЕсли;
		ПредставлениеИзменения = ПредставлениеИзменения + Изменение;
	КонецЦикла;
	ОписаниеИзменения.Вставить("Реквизиты", НастройкаИзмененияРеквизитов);
	
	НастройкаИзмененияТабличныхЧастей = Новый Структура;
	Для Каждого ТабличнаяЧасть Из ИзменяемыеТабличныеЧасти() Цикл
		Если Не ПустаяСтрока(ПредставлениеИзменения) Тогда
			ПредставлениеИзменения = ПредставлениеИзменения + "; ";
		КонецЕсли;
		ПредставлениеИзменения = ПредставлениеИзменения + ТабличнаяЧасть.Ключ + " (";
		НастройкаИзмененияРеквизитов = Новый Массив;
		СтрокаРеквизитов = "";
		Для Каждого Реквизит Из ТабличнаяЧасть.Значение Цикл
			СтруктураИзменения = Новый Структура("Имя,Значение");
			ЗаполнитьЗначенияСвойств(СтруктураИзменения, Реквизит);
			НастройкаИзмененияРеквизитов.Добавить(СтруктураИзменения);
			
			Изменение = СтрЗаменить(ШаблонПредставления, "[Поле]", СокрЛП(Строка(Реквизит.Представление)));
			Изменение = СтрЗаменить(Изменение, "<Значение>", СокрЛП(Строка(Реквизит.Значение)));
			
			Если Не ПустаяСтрока(СтрокаРеквизитов) Тогда
				СтрокаРеквизитов = СтрокаРеквизитов + "; ";
			КонецЕсли;
			СтрокаРеквизитов = СтрокаРеквизитов + Изменение;
		КонецЦикла;
		ПредставлениеИзменения = ПредставлениеИзменения + СтрокаРеквизитов + ")";
		НастройкаИзмененияТабличныхЧастей.Вставить(ТабличнаяЧасть.Ключ, НастройкаИзмененияРеквизитов);
	КонецЦикла;
	
	ОписаниеИзменения.Вставить("ТабличныеЧасти", НастройкаИзмененияТабличныхЧастей);
	
	Результат = Неопределено;
	Если ЗначениеЗаполнено(ПредставлениеИзменения) Тогда
		Результат = Новый Структура;
		Результат.Вставить("ОписаниеИзменения", ОписаниеИзменения);
		Результат.Вставить("ПредставлениеИзменения", ПредставлениеИзменения);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьСостояниеОбработанных(РезультатИзменения, КоличествоОшибок, КоличествоИзмененных)
	
	КоличествоОшибок = 0;
	КоличествоИзмененных = 0;
	
	Для Каждого СостояниеОбработанногоОбъекта Из РезультатИзменения.СостояниеОбработки Цикл
		Если Не ПустаяСтрока(СостояниеОбработанногоОбъекта.Значение.КодОшибки) Тогда
			КоличествоОшибок = КоличествоОшибок + 1;
			
			ЗаписьОбОшибке = ОбъектыКоторыеНеУдалосьИзменить.Добавить();
			ЗаписьОбОшибке.Объект = СостояниеОбработанногоОбъекта.Ключ;
			ЗаписьОбОшибке.Причина = СостояниеОбработанногоОбъекта.Значение.СообщениеОбОшибке;
		Иначе
			КоличествоИзмененных = КоличествоИзмененных + 1;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция СледующаяПорцияОбъектовДляИзменения()
	
	НачалоВыборки = ТекущееСостояниеИзменения.ТекущаяПозиция;
	КонецВыборки = ТекущееСостояниеИзменения.ТекущаяПозиция + ТекущееСостояниеИзменения.РазмерПорции - 1;
	
	ВыбранныеОбъекты = ВыбранныеОбъекты();
	Если КонецВыборки > ВыбранныеОбъекты.Строки.Количество() - 1 Тогда
		КонецВыборки = ВыбранныеОбъекты.Строки.Количество() - 1;
	КонецЕсли;
	
	Результат = Новый ДеревоЗначений;
	Для Каждого Колонка Из ВыбранныеОбъекты.Колонки Цикл
		Результат.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
	КонецЦикла;
	
	Для Индекс = НачалоВыборки По КонецВыборки Цикл
		ОписаниеОбъекта = Результат.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(ОписаниеОбъекта, ВыбранныеОбъекты.Строки[Индекс]);
		Для Каждого СтрокаОбъекта Из ВыбранныеОбъекты.Строки[Индекс].Строки Цикл
			ЗаполнитьЗначенияСвойств(ОписаниеОбъекта.Строки.Добавить(), СтрокаОбъекта);
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ИзменяемыеРеквизиты(ИмяТабличнойЧасти = "РеквизитыОбъекта")
	ТаблицаРеквизитов = ЭтотОбъект[ИмяТабличнойЧасти];
	Возврат ТаблицаЗначенийВМассив(ТаблицаРеквизитов.Выгрузить(Новый Структура("Изменять", Истина)));
КонецФункции

&НаСервере
Функция ИзменяемыеТабличныеЧасти()
	Результат = Новый Структура;
	Для Каждого ТабличнаяЧасть Из ТабличныеЧастиОбъекта Цикл
		ИзменяемыеРеквизиты = ИзменяемыеРеквизиты(ТабличнаяЧасть.Значение);
		Если ИзменяемыеРеквизиты.Количество() > 0 Тогда
			ИмяТабличнойЧасти = Сред(ТабличнаяЧасть.Значение, СтрДлина("ТабличнаяЧасть") + 1);
			Результат.Вставить(ИмяТабличнойЧасти, ИзменяемыеРеквизиты);
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции

&НаСервере
Процедура ИзменитьНаСервере(Знач ОстанавливатьИзменениеПриОшибке)
	
	ОбъектыДляОбработки = СледующаяПорцияОбъектовДляИзменения();
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	ПараметрыЗадания = Новый Структура;
	ПараметрыЗадания.Вставить("ОбрабатываемыеОбъекты", Новый ХранилищеЗначения(ОбъектыДляОбработки));
	ПараметрыЗадания.Вставить("ОстанавливатьИзменениеПриОшибке", ОстанавливатьИзменениеПриОшибке);
	ПараметрыЗадания.Вставить("ИзменятьВТранзакции", ОбработкаОбъект.ИзменятьВТранзакции);
	ПараметрыЗадания.Вставить("ПрерыватьПриОшибке", ОбработкаОбъект.ПрерыватьПриОшибке);
	ПараметрыЗадания.Вставить("ТипОперации", ОбработкаОбъект.ТипОперации);
	ПараметрыЗадания.Вставить("КодАлгоритма", КодАлгоритма);
	ПараметрыЗадания.Вставить("РежимВыполнения", ОбработкаОбъект.РежимВыполнения);
	ПараметрыЗадания.Вставить("ВариантЗаписиОбъекта", ОбработкаОбъект.ВариантЗаписиОбъекта);
	ПараметрыЗадания.Вставить("ИспользуютсяДопРеквизиты", ОбработкаОбъект.ИспользуютсяДопРеквизиты);
	ПараметрыЗадания.Вставить("ИспользуютсяДопСведения", ОбработкаОбъект.ИспользуютсяДопСведения);
	ПараметрыЗадания.Вставить("ИзменяемыеРеквизиты", ИзменяемыеРеквизиты());
	ПараметрыЗадания.Вставить("ДоступныеРеквизиты", ТаблицаЗначенийВМассив(РеквизитыОбъекта.Выгрузить(, "Имя,Представление,ВидОперации,Свойство")));
	ПараметрыЗадания.Вставить("ИзменяемыеТабличныеЧасти", ИзменяемыеТабличныеЧасти());
	ПараметрыЗадания.Вставить("ОбъектыДляИзменения", Новый ХранилищеЗначения(ВыбранныеОбъекты()));
	ПараметрыЗадания.Вставить("РежимРазработчика", ОбработкаОбъект.РежимРазработчика);
	
	ЭтоВнешняяОбработка = Не Метаданные.Обработки.Содержит(ОбработкаОбъект.Метаданные());
	Если Не Объект.ИзменятьВТранзакции Или Не ПодсистемаСуществует("СтандартныеПодсистемы.БазоваяФункциональность") Тогда
		АдресХранилища = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
		ОбработкаОбъект.ИзменитьОбъекты(ПараметрыЗадания, АдресХранилища);
		ДлительнаяОперация = Новый Структура("Статус, АдресРезультата", "Выполнено", АдресХранилища);
	Иначе
		МодульДлительныеОперации = ОбщийМодуль("ДлительныеОперации");
		ПараметрыВыполнения = МодульДлительныеОперации.ПараметрыВыполненияВФоне(УникальныйИдентификатор);
		ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru='Групповое изменение элементов';en='Bulk edit of items'");
		ИмяПроцедуры = ОбработкаОбъект.Метаданные().ПолноеИмя() + ".МодульОбъекта.ИзменитьОбъекты";
		ДлительнаяОперация = МодульДлительныеОперации.ВыполнитьВФоне(ИмяПроцедуры, ПараметрыЗадания, ПараметрыВыполнения);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьМассивИзменяемыхОбъектов(МассивСсылок)
	
	Для Каждого ВыбранныйОбъект Из ВыбранныеОбъекты().Строки Цикл
		МассивСсылок.Добавить(ВыбранныйОбъект.Ссылка);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбъектМетаданныхИерархический(СсылкаПервого)
	
	ВидОбъектаПоСсылке = ВидОбъектаПоСсылке(СсылкаПервого);
	
	Если ((ВидОбъектаПоСсылке = "Справочник" ИЛИ ВидОбъектаПоСсылке = "ПланВидовХарактеристик") И СсылкаПервого.Метаданные().Иерархический)
	 ИЛИ (ВидОбъектаПоСсылке = "ПланСчетов") Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

&НаСервереБезКонтекста
Функция ИерархияГруппИЭлементов(СсылкаПервого)
	
	ВидОбъектаПоСсылке = ВидОбъектаПоСсылке(СсылкаПервого);
	
	Возврат (ВидОбъектаПоСсылке = "Справочник" И СсылкаПервого.Метаданные().Иерархический
		И СсылкаПервого.Метаданные().ВидИерархии = Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов)
		Или (ВидОбъектаПоСсылке = "ПланВидовХарактеристик" И СсылкаПервого.Метаданные().Иерархический);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НетранзакционнаяПорцияГраницаПерехода()
	
	Возврат 100; // Если в списке изменяемых более 100 объектов
				 // изменение происходит для постоянного количества объектов
				 // см . НетранзакционнаяПорцияПолученияДанныхОбъектов().
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НетранзакционнаяПорцияПолученияДанныхПроцент()
	
	Возврат 10;	// Если в списке изменяемых менее 100 объектов
				// изменение происходит порциями по проценту объектов от общей массы.
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция НетранзакционнаяПорцияПолученияДанныхОбъектов()
	
	Возврат 10;	// Если в списке изменяемых более 100 объектов
				// изменение происходит порциями по постоянному
				// числу объектов.
	
КонецФункции

&НаКлиенте
Процедура СброситьНастройкиИзменения()
	Для Каждого Реквизит Из РеквизитыОбъекта Цикл
		Реквизит.Значение = Неопределено;
		Реквизит.Изменять = Ложь;
	КонецЦикла;
	
	Для Каждого ТабличнаяЧасть Из ТабличныеЧастиОбъекта Цикл
		Для Каждого Реквизит Из ЭтотОбъект[ТабличнаяЧасть.Значение] Цикл
			Реквизит.Значение = Неопределено;
			Реквизит.Изменять = Ложь;
		КонецЦикла;
	КонецЦикла;	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаОтбораНажатие(Элемент)
	ПерейтиКНастройкеОтбора();
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытииФормыВыбранныхОбъектов(Настройки, ДополнительныеПараметры) Экспорт
	Если ТипЗнч(Настройки) = Тип("НастройкиКомпоновкиДанных") Тогда
		КомпоновщикНастроек.ЗагрузитьНастройки(Настройки);
		ОбновитьНадписи();
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция НастройкиОтбора()
	Результат = Новый Структура;
	Результат.Вставить("ОбновитьСписок", Ложь);
	Результат.Вставить("ВключитьТабличныеЧастиВВыборку", Ложь);
	Результат.Вставить("ОграничитьВыборку", Ложь);
	Возврат Результат;
КонецФункции

&НаСервере
Функция ВыбранныеОбъекты(НастройкиОтбора = Неопределено, ТекстСообщенияОбОшибке = "")
	
	Если НастройкиОтбора = Неопределено Тогда
		НастройкиОтбора = НастройкиОтбора();
	КонецЕсли;
	
	ОбновитьСписок = НастройкиОтбора.ОбновитьСписок;
	ВключитьТабличныеЧастиВВыборку = НастройкиОтбора.ВключитьТабличныеЧастиВВыборку;
	ОграничитьВыборку = НастройкиОтбора.ОграничитьВыборку;
	
	Если Не ОбновитьСписок И Не ОграничитьВыборку И Не ПустаяСтрока(АдресСпискаВыбранных) Тогда
		Возврат ПолучитьИзВременногоХранилища(АдресСпискаВыбранных);
	КонецЕсли;
		
	Результат = Новый ДеревоЗначений;
	
	Если Не ПустаяСтрока(ВидыИзменяемыхОбъектов) Тогда
		ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
		ТекстЗапроса = ОбработкаОбъект.ТекстЗапроса(ВидыИзменяемыхОбъектов, ОграничитьВыборку);
		СхемаКомпоновкиДанных = СхемаКомпоновкиДанных(ТекстЗапроса);
		
		КомпоновщикНастроекКомпоновкиДанных = Новый КомпоновщикНастроекКомпоновкиДанных;
		АдресСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
		КомпоновщикНастроекКомпоновкиДанных.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы));
		КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьНастройки(КомпоновщикНастроек.Настройки);
		Если ВключитьТабличныеЧастиВВыборку Тогда
			УстановитьНастройкуСтруктурыВыводаРезультата(КомпоновщикНастроекКомпоновкиДанных.Настройки, ВключитьТабличныеЧастиВВыборку);
		КонецЕсли;
		
		Если ОбъектыКоторыеНеУдалосьИзменить.Количество() > 0 И Не Объект.ИзменятьВТранзакции Тогда // повтор для неизмененных
			ЭлементОтбора = КомпоновщикНастроекКомпоновкиДанных.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
			ЭлементОтбора.ПравоеЗначение = Новый СписокЗначений;
			ЭлементОтбора.ПравоеЗначение.ЗагрузитьЗначения(ОбъектыКоторыеНеУдалосьИзменить.Выгрузить().ВыгрузитьКолонку("Объект"));
		КонецЕсли;
		
		Результат = Новый ДеревоЗначений;
		КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
		Попытка
			МакетКомпоновкиДанных = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных,
				КомпоновщикНастроекКомпоновкиДанных.Настройки, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
		Исключение
			ТекстСообщенияОбОшибке = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			Возврат Результат;
		КонецПопытки;
			
		ПроцессорКомпоновкиДанных = Новый ПроцессорКомпоновкиДанных;
		ПроцессорКомпоновкиДанных.Инициализировать(МакетКомпоновкиДанных);

		ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
		ПроцессорВывода.УстановитьОбъект(Результат);
		ПроцессорВывода.Вывести(ПроцессорКомпоновкиДанных);
		Если Не ОграничитьВыборку Тогда
			АдресСпискаВыбранных = ПоместитьВоВременноеХранилище(Результат, УникальныйИдентификатор);
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура УстановитьНастройкуСтруктурыВыводаРезультата(Настройки, ДляИзменения = Ложь)
	
	Настройки.Структура.Очистить();
	Настройки.Выбор.Элементы.Очистить();
	
	ГруппировкаКомпоновкиДанных = Настройки.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
	ГруппировкаКомпоновкиДанных.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
	ГруппировкаКомпоновкиДанных.Использование = Истина;
	
	ПолеГруппировки = ГруппировкаКомпоновкиДанных.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
	ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных("Ссылка");
	ПолеГруппировки.Использование = Истина;
	
	ПолеВыбора = Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ПолеВыбора.Поле = Новый ПолеКомпоновкиДанных("Ссылка");
	ПолеВыбора.Использование = Истина;
	
	Если ДляИзменения Тогда
		ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
		ОбщиеРеквизитыОбъектов = ОбработкаОбъект.ОбщиеРеквизитыОбъектов(ВидыИзменяемыхОбъектов);
		Для Каждого ТабличнаяЧасть Из ОбщиеРеквизитыОбъектов.ТабличныеЧасти Цикл
			ИмяТабличнойЧасти = ТабличнаяЧасть.Ключ;
			
			ГруппировкаТаблицы = ГруппировкаКомпоновкиДанных.Структура.Добавить(Тип("ГруппировкаКомпоновкиДанных"));
			ГруппировкаТаблицы.Выбор.Элементы.Добавить(Тип("АвтоВыбранноеПолеКомпоновкиДанных"));
			ГруппировкаТаблицы.Использование = Истина;
			
			ПолеГруппировки = ГруппировкаТаблицы.ПоляГруппировки.Элементы.Добавить(Тип("ПолеГруппировкиКомпоновкиДанных"));
			ПолеГруппировки.Поле = Новый ПолеКомпоновкиДанных(ИмяТабличнойЧасти + ".НомерСтроки");
			ПолеГруппировки.Использование = Истина;
			
			ПолеВыбора = Настройки.Выбор.Элементы.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
			ПолеВыбора.Поле = Новый ПолеКомпоновкиДанных(ИмяТабличнойЧасти + ".НомерСтроки");
			ПолеВыбора.Использование = Истина;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция КоличествоВыбранныхОбъектов(Пересчитать = Ложь, ДляИзменения = Ложь, ТекстСообщенияОбОшибке = "")
	НастройкиОтбора = НастройкиОтбора();
	НастройкиОтбора.ОбновитьСписок = Пересчитать;
	НастройкиОтбора.ВключитьТабличныеЧастиВВыборку = ДляИзменения;
	
	Возврат ВыбранныеОбъекты(НастройкиОтбора, ТекстСообщенияОбОшибке).Строки.Количество();
КонецФункции

&НаСервере
Функция СхемаКомпоновкиДанных(ТекстЗапроса)
	
	СхемаКомпоновкиДанных = Новый СхемаКомпоновкиДанных;
	
	ИсточникДанных = СхемаКомпоновкиДанных.ИсточникиДанных.Добавить();
	ИсточникДанных.Имя = "ИсточникДанных1";
	ИсточникДанных.ТипИсточникаДанных = "local";
	
	НаборДанных = СхемаКомпоновкиДанных.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
	НаборДанных.ИсточникДанных = "ИсточникДанных1";
	НаборДанных.АвтоЗаполнениеДоступныхПолей = Истина;
	НаборДанных.Запрос = ТекстЗапроса;
	НаборДанных.Имя = "НаборДанных1";
	
	Возврат СхемаКомпоновкиДанных;
	
КонецФункции

&НаКлиенте
Процедура ВидИзменяемыхОбъектовВыборСделан(Знач ВыбранныеОбъекты, ДополнительныеПараметры) Экспорт
	Если ВыбранныеОбъекты <> Неопределено И ВидыИзменяемыхОбъектов <> ВыбранныеОбъекты Тогда
		ВидыИзменяемыхОбъектов = СтрСоединить(ВыбранныеОбъекты, ",");
		ВыбранныеОбъектыВКонтексте.Очистить();
		ПерестроитьИнтерфейсФормыДляВыбранногоВидаОбъектов();
		Элементы.РеквизитыОбъектаАлгоритм.ОтборСтрок = Новый ФиксированнаяСтруктура(Новый Структура("ВидОперации", "1"));
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПерестроитьИнтерфейсФормыДляВыбранногоВидаОбъектов()
	ИнициализироватьНастройкиФормы();
	ОбновитьВидимостьЭлементов();
	СформироватьПояснениеОНастроенныхИзменениях();
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьНастройкиФормы()
	ИнициализироватьКомпоновщикНастроек();
	ЗагрузитьМетаданныеОбъекта();
	НайтиФормуРазблокированияРеквизитов();
	ЗагрузитьИсториюОпераций();
	ЗаполнитьПодменюРанееИзмененныеРеквизиты();
	ПредставлениеИзменяемыхОбъектов = ПредставлениеИзменяемыхОбъектов();
	ОбновитьНадписиСервер();
КонецПроцедуры

&НаСервере
Функция ПредставлениеИзменяемыхОбъектов()
	ПредставленияТипов = Новый Массив;
	Для Каждого ИмяОбъектаМетаданных Из СтрРазделить(ВидыИзменяемыхОбъектов, ",", Ложь) Цикл
		ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИмяОбъектаМетаданных);
		ПредставленияТипов.Добавить(ОбъектМетаданных.Представление());
	КонецЦикла;
		
	Результат = СтрСоединить(ПредставленияТипов, ", ");
	Возврат Результат;
КонецФункции

&НаСервере
Процедура ИнициализироватьКомпоновщикНастроек()
	ОбъектОбработка = РеквизитФормыВЗначение("Объект");
	ТекстЗапроса = ОбъектОбработка.ТекстЗапроса(ВидыИзменяемыхОбъектов);
	СхемаКомпоновкиДанных = СхемаКомпоновкиДанных(ТекстЗапроса);
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор)));
	КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	Если ВыбранныеОбъектыВКонтексте.Количество() > 0 Тогда
		Если Параметры.Свойство("КомпоновщикНастроек") И ТипЗнч(Параметры.КомпоновщикНастроек) = Тип("КомпоновщикНастроекКомпоновкиДанных") Тогда
			НастройкиКомпоновщика = Параметры.КомпоновщикНастроек.ПолучитьНастройки();
			КомпоновщикНастроек.ЗагрузитьНастройки(НастройкиКомпоновщика);
			КомпоновщикНастроек.Настройки.УсловноеОформление.Элементы.Очистить();
			
			КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
			Попытка
				КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, КомпоновщикНастроек.Настройки,,, 
					Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
			Исключение
				КомпоновщикНастроек.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
			КонецПопытки;
		КонецЕсли;
		
		ЭлементОтбора = КомпоновщикНастроек.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Ссылка");
		Если УчитыватьИерархию И ОбрабатыватьРекурсивно Тогда
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии;
		Иначе
			ЭлементОтбора.ВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке;
		КонецЕсли;
		ЭлементОтбора.ПравоеЗначение = Новый СписокЗначений;
		ЭлементОтбора.ПравоеЗначение.ЗагрузитьЗначения(ВыбранныеОбъектыВКонтексте.ВыгрузитьЗначения());
	
	КонецЕсли;
	
	УстановитьНастройкуСтруктурыВыводаРезультата(КомпоновщикНастроек.Настройки);
	
КонецПроцедуры

&НаСервере
Процедура ОчиститьСведенияОбОбъекте()
	УдаляемыеРеквизитыФормы = Новый Массив;
	Для Каждого ТабличнаяЧасть Из ТабличныеЧастиОбъекта Цикл
		УдаляемыеРеквизитыФормы.Добавить(ТабличнаяЧасть.Значение);
		Элементы.Удалить(Элементы.Найти("Страница" + ТабличнаяЧасть.Значение));
	КонецЦикла;
	ИзменитьРеквизиты(, УдаляемыеРеквизитыФормы);
	ТабличныеЧастиОбъекта.Очистить();
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьМетаданныеОбъекта(СохранитьТекущиеНастройкиИзменения = Ложь, СохраненныеНастройки = Неопределено)
	
	Если СохранитьТекущиеНастройкиИзменения Тогда
		ТекущиеНастройки =  ТекущиеНастройкиИзменения();
		Если ТекущиеНастройки <> Неопределено Тогда
			СохраненныеНастройки = ТекущиеНастройки.ОписаниеИзменения;
		КонецЕсли;
	КонецЕсли;
	
	ОчиститьСведенияОбОбъекте();
	
	ЗаблокированныеРеквизиты = ЗаблокированныеРеквизиты();
	НередактируемыеРеквизиты = НередактируемыеРеквизиты();
	ФильтруемыеРеквизиты = ФильтруемыеРеквизиты();
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбщиеРеквизитыОбъектов = ОбработкаОбъект.ОбщиеРеквизитыОбъектов(ВидыИзменяемыхОбъектов);
	
	ЗаполнитьРеквизитыОбъекта(ЗаблокированныеРеквизиты, НередактируемыеРеквизиты, ФильтруемыеРеквизиты, ОбщиеРеквизитыОбъектов.Реквизиты);
	ЗаполнитьТабличныеЧастиОбъектов(ЗаблокированныеРеквизиты, НередактируемыеРеквизиты, ФильтруемыеРеквизиты, ОбщиеРеквизитыОбъектов.ТабличныеЧасти);
	
	СформироватьПояснениеПоАвтонумерации();
	УстановитьУсловноеОформление();
КонецПроцедуры

&НаСервере
Процедура СформироватьПояснениеПоАвтонумерации()
	
	Автонумерация = Неопределено;
	Для Каждого ИмяТипа Из СтрРазделить(ВидыИзменяемыхОбъектов, ",", Ложь) Цикл
		ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИмяТипа);
		
		Если Метаданные.ПланыОбмена.Содержит(ОбъектМетаданных) 
			Или Метаданные.ПланыВидовРасчета.Содержит(ОбъектМетаданных)
			Или Метаданные.ПланыСчетов.Содержит(ОбъектМетаданных) Тогда
				Автонумерация = Неопределено;
				Прервать;
		КонецЕсли;
		
		Если Автонумерация = Неопределено Тогда
			Автонумерация = ОбъектМетаданных.Автонумерация;
			Продолжить;
		КонецЕсли;
		
		Если Автонумерация И Не ОбъектМетаданных.Автонумерация Тогда
			Автонумерация = Неопределено;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Автонумерация = Неопределено Тогда
		ПояснениеПоАвтонумерации = "";
	ИначеЕсли Автонумерация Тогда
		ПояснениеПоАвтонумерации = НСтр("ru='<Установить автоматически>';en='<Set automatically>'");
	Иначе
		ПояснениеПоАвтонумерации = НСтр("ru='<Очистить>';en='<Clear>'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция БлокируемыеРеквизитыОбъекта(ИмяОбъекта)
	
	Возврат ЗапретРедактированияРеквизитовОбъектов.БлокируемыеРеквизитыОбъекта(ИмяОбъекта);
	
КонецФункции

&НаСервере
Функция ЗаблокированныеРеквизиты()
	Результат = Новый Массив;
	
	Для Каждого ВидОбъектов Из СтрРазделить(ВидыИзменяемыхОбъектов, ",", Ложь) Цикл
		Если ВерсияБСПСоответствуетТребованиям() Тогда
			Для Каждого Реквизит Из БлокируемыеРеквизитыОбъекта(ВидОбъектов) Цикл
				Если Результат.Найти(Реквизит) = Неопределено Тогда
					Результат.Добавить(Реквизит);
				КонецЕсли;
			КонецЦикла;
			Продолжить;
		КонецЕсли;
		
		// В конфигурациях без БСП или на старых версиях БСП, пытаемся определить, 
		// есть ли у объекта блокируемые реквизиты (подсистема "Запрет редактирования реквизитов объектов").
		МенеджерОбъекта = МенеджерОбъектаПоПолномуИмени(ВидОбъектов);
		Попытка
			БлокируемыеРеквизитыОписание = МенеджерОбъекта.ПолучитьБлокируемыеРеквизитыОбъекта();
		Исключение
			// метод не найден
			БлокируемыеРеквизитыОписание = Неопределено;
		КонецПопытки;
	
		Если БлокируемыеРеквизитыОписание <> Неопределено Тогда
			Для Каждого БлокируемыйРеквизитОписание Из БлокируемыеРеквизитыОписание Цикл
				ИмяРеквизита = СокрЛП(СтрРазделить(БлокируемыйРеквизитОписание, ";")[0]);
				Если Результат.Найти(ИмяРеквизита) = Неопределено Тогда
					Результат.Добавить(ИмяРеквизита);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаСервереБезКонтекста
Функция МетодыМенеджераОбъектаДляРедактированияРеквизитов(ИмяОбъекта)
	
	МодульИнтеграцияПодсистемБСП = ОбщийМодуль("ИнтеграцияПодсистемБСП");
	МодульГрупповоеИзменениеОбъектовПереопределяемый = ОбщийМодуль("ГрупповоеИзменениеОбъектовПереопределяемый");
	Если МодульИнтеграцияПодсистемБСП = Неопределено Или МодульГрупповоеИзменениеОбъектовПереопределяемый = Неопределено Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	ОбъектыСЗаблокированнымиРеквизитами = Новый Соответствие;
	МодульИнтеграцияПодсистемБСП.ПриОпределенииОбъектовСРедактируемымиРеквизитами(ОбъектыСЗаблокированнымиРеквизитами);
	МодульГрупповоеИзменениеОбъектовПереопределяемый.ПриОпределенииОбъектовСРедактируемымиРеквизитами(ОбъектыСЗаблокированнымиРеквизитами);
	
	СведенияОМенеджереОбъекта = ОбъектыСЗаблокированнымиРеквизитами[ИмяОбъекта];
	Если СведенияОМенеджереОбъекта = Неопределено Тогда
		Возврат "НеПоддерживается";
	КонецЕсли;
	ДоступныеМетоды = СтрРазделить(СведенияОМенеджереОбъекта, Символы.ПС, Ложь);
	Возврат ДоступныеМетоды;
	
КонецФункции

&НаСервере
Функция НередактируемыеРеквизиты()
	
	Если Объект.ПоказыватьСлужебныеРеквизиты Тогда
		Возврат Новый Массив;
	КонецЕсли;
	
	Результат = Новый Массив;
	Для Каждого ВидИзменяемыхОбъектов Из СтрРазделить(ВидыИзменяемыхОбъектов, ",", Ложь) Цикл
	
		ВерсияБСПСоответствуетТребованиям = ВерсияБСПСоответствуетТребованиям();
		Если ВерсияБСПСоответствуетТребованиям Тогда
			ДоступныеМетоды = МетодыМенеджераОбъектаДляРедактированияРеквизитов(ВидИзменяемыхОбъектов);
			Если ТипЗнч(ДоступныеМетоды) = Тип("Массив") И (ДоступныеМетоды.Количество() = 0
				Или ДоступныеМетоды.Найти("РеквизитыНеРедактируемыеВГрупповойОбработке") <> Неопределено) Тогда
					МенеджерОбъекта = МенеджерОбъектаПоПолномуИмени(ВидИзменяемыхОбъектов);
					НеРедактируемые = МенеджерОбъекта.РеквизитыНеРедактируемыеВГрупповойОбработке();
			Иначе 
				НеРедактируемые = Новый Массив;
			КонецЕсли;
		Иначе
			// В конфигурациях без БСП или на старых версиях БСП, пытаемся определить, 
			// есть ли у объекта нередактируемые реквизиты.
			МенеджерОбъекта = МенеджерОбъектаПоПолномуИмени(ВидИзменяемыхОбъектов);
			Попытка
				НеРедактируемые = МенеджерОбъекта.РеквизитыНеРедактируемыеВГрупповойОбработке();
			Исключение
				// метод не найден
				НеРедактируемые = Новый Массив;
			КонецПопытки;
		КонецЕсли;
			
		Если НеРедактируемые.Количество() > 0 Тогда
			Возврат НеРедактируемые;
		КонецЕсли;
		
		Если ВерсияБСПСоответствуетТребованиям Тогда
			Если ТипЗнч(ДоступныеМетоды) = Тип("Массив") И (ДоступныеМетоды.Количество() = 0
				Или ДоступныеМетоды.Найти("РеквизитыРедактируемыеВГрупповойОбработке") <> Неопределено) Тогда 
					Если МенеджерОбъекта = Неопределено Тогда
						МенеджерОбъекта = МенеджерОбъектаПоПолномуИмени(ВидИзменяемыхОбъектов);
					КонецЕсли;
					Редактируемые = МенеджерОбъекта.РеквизитыРедактируемыеВГрупповойОбработке();
			Иначе
				Редактируемые = Неопределено;
			КонецЕсли;
		Иначе
			// В конфигурациях без БСП или на старых версиях БСП, пытаемся определить, 
			// есть ли у объекта редактируемые реквизиты.
			Попытка
				Редактируемые = МенеджерОбъекта.РеквизитыРедактируемыеВГрупповойОбработке();
			Исключение
				Редактируемые = Неопределено;
			КонецПопытки;
		КонецЕсли;

		Если Редактируемые = Неопределено Или Редактируемые.Найти("*") <> Неопределено Тогда
			Возврат НеРедактируемые;
		КонецЕсли;
		
		ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ВидИзменяемыхОбъектов);
		Для Каждого ОписаниеРеквизита Из ОбъектМетаданных.СтандартныеРеквизиты Цикл
			НеРедактируемые.Добавить(ОписаниеРеквизита.Имя);
		КонецЦикла;
		
		Для Каждого ОписаниеРеквизита Из ОбъектМетаданных.Реквизиты Цикл
			НеРедактируемые.Добавить(ОписаниеРеквизита.Имя);
		КонецЦикла;
		
		Для Каждого ТабличнаяЧасть Из ОбъектМетаданных.ТабличныеЧасти Цикл
			Если Редактируемые.Найти(ТабличнаяЧасть.Имя + ".*") <> Неопределено Тогда
				Прервать;
			КонецЕсли;
			Для Каждого Реквизит Из ТабличнаяЧасть.Реквизиты Цикл
				НеРедактируемые.Добавить(ТабличнаяЧасть.Имя + "." + Реквизит.Имя);
			КонецЦикла;
		КонецЦикла;
		
		Для Каждого ИмяРедактируемого Из Редактируемые Цикл
			Индекс = НеРедактируемые.Найти(ИмяРедактируемого);
			Если Индекс = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			НеРедактируемые.Удалить(Индекс);
		КонецЦикла;
		
		Для Каждого Реквизит Из НеРедактируемые Цикл
			Если Результат.Найти(Реквизит) = Неопределено Тогда
				Результат.Добавить(Реквизит);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ФильтруемыеРеквизиты()
	Результат = Новый Массив;
	Если Объект.ПоказыватьСлужебныеРеквизиты Тогда
		Возврат Результат;
	КонецЕсли;
	
	Для Каждого ИмяТипа Из СтрРазделить(ВидыИзменяемыхОбъектов, ",", Ложь) Цикл
		ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИмяТипа);
		ФильтруемыеРеквизиты = ПолучитьФильтрРедактированияПоТипу(ОбъектМетаданных);
		
		ЗакрытыеФункциональнымиОпциями = Новый ТаблицаЗначений;
		ЗакрытыеФункциональнымиОпциями.Колонки.Добавить("ИмяРеквизита",  Новый ОписаниеТипов("Строка"));
		
		Для Каждого ОписаниеФО Из Метаданные.ФункциональныеОпции Цикл
			Если СтрРазделить(ОписаниеФО.Хранение.ПолноеИмя(), ".")[0] = "Константа" Тогда
				ЗначениеФО = ПолучитьФункциональнуюОпцию(ОписаниеФО.Имя);
				Если ТипЗнч(ЗначениеФО) = Тип("Булево") И ЗначениеФО = Истина Тогда
					Продолжить;
				КонецЕсли;
			Иначе
				// Не фильтруем реквизиты, которые входят в параметризуемые функциональные опции.
				Продолжить;
			КонецЕсли;
			
			Для Каждого РеквизитОМ Из ОбъектМетаданных.Реквизиты Цикл
				Если ОписаниеФО.Состав.Содержит(РеквизитОМ) Тогда
					НоваяСтрока = ЗакрытыеФункциональнымиОпциями.Добавить();
					НоваяСтрока.ИмяРеквизита = РеквизитОМ.Имя;
				КонецЕсли;
			КонецЦикла;
			
			Для Каждого ТабличнаяЧасть Из ОбъектМетаданных.ТабличныеЧасти Цикл
				Если ОписаниеФО.Состав.Содержит(ТабличнаяЧасть) Тогда
					НоваяСтрока = ЗакрытыеФункциональнымиОпциями.Добавить();
					НоваяСтрока.ИмяРеквизита = ТабличнаяЧасть.Имя + ".*";
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		ЗакрытыеФункциональнымиОпциями.Свернуть("ИмяРеквизита");
		
		Для Каждого ЗакрытыйФО Из ЗакрытыеФункциональнымиОпциями Цикл
			ФильтруемыеРеквизиты.Добавить(ЗакрытыйФО.ИмяРеквизита);
		КонецЦикла;
		
		Для Каждого Реквизит Из ФильтруемыеРеквизиты Цикл
			Если Результат.Найти(Реквизит) = Неопределено Тогда
				Результат.Добавить(Реквизит);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
		
	Возврат Результат;
КонецФункции

&НаСервере
Процедура ЗаполнитьТабличныеЧастиОбъектов(ЗаблокированныеРеквизиты, НередактируемыеРеквизиты, ФильтруемыеРеквизиты, ДоступныеТабличныеЧасти)
	
	СписокВидовИзменяемыхОбъектов = СтрРазделить(ВидыИзменяемыхОбъектов, ",", Ложь);
	ИмяОбъекта = СписокВидовИзменяемыхОбъектов[0];
	
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИмяОбъекта);
	
	// Создание реквизитов для табличных частей.
	НовыеРеквизитыФормы = Новый Массив;
	
	КолонкиТаблиц = ОписанияКолонокТаблицыРеквизитов();
	
	ТаблицыОбъекта = Новый Структура;
	ТабличныеЧастиОбъекта.Очистить();
	Для Каждого ОписаниеТабличнойЧасти Из ОбъектМетаданных.ТабличныеЧасти Цикл
		Если Не ДоступныеТабличныеЧасти.Свойство(ОписаниеТабличнойЧасти.Имя) Тогда
			Продолжить;
		КонецЕсли;
			
		Если Не ПравоДоступа("Редактирование", ОписаниеТабличнойЧасти) Тогда
			Продолжить;
		КонецЕсли;
		// фильтры табличных частей
		Если НередактируемыеРеквизиты.Найти(ОписаниеТабличнойЧасти.Имя + ".*") <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ФильтруемыеРеквизиты.Найти(ОписаниеТабличнойЧасти.Имя + ".*") <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ДоступныеДляИзмененияРеквизиты = ДоступныеДляИзмененияРеквизиты(ОписаниеТабличнойЧасти, НередактируемыеРеквизиты,
			ФильтруемыеРеквизиты, ДоступныеТабличныеЧасти[ОписаниеТабличнойЧасти.Имя]);
			
		Если ДоступныеДляИзмененияРеквизиты.Количество() = 0 Тогда
			Продолжить;
		КонецЕсли;
		
		ИмяРеквизита = "ТабличнаяЧасть" + ОписаниеТабличнойЧасти.Имя;
		ТаблицаЗначений = Новый РеквизитФормы(ИмяРеквизита, Новый ОписаниеТипов("ТаблицаЗначений"), , ОписаниеТабличнойЧасти.Представление());
		НовыеРеквизитыФормы.Добавить(ТаблицаЗначений);
		
		Для Каждого ОписаниеКолонки Из КолонкиТаблиц Цикл 
			РеквизитТаблицы = Новый РеквизитФормы(ОписаниеКолонки.Имя, ОписаниеКолонки.Тип, ТаблицаЗначений.Имя, ОписаниеКолонки.Представление);
			НовыеРеквизитыФормы.Добавить(РеквизитТаблицы);
		КонецЦикла;
		
		ТаблицыОбъекта.Вставить(ИмяРеквизита, ОписаниеТабличнойЧасти);
		ТабличныеЧастиОбъекта.Добавить(ИмяРеквизита, ОписаниеТабличнойЧасти.Представление());
	КонецЦикла;
	ИзменитьРеквизиты(НовыеРеквизитыФормы);
	
	Для Каждого ТаблицаОбъекта Из ТаблицыОбъекта Цикл
		ИмяРеквизита = ТаблицаОбъекта.Ключ;
		ИмяСтраницы = "Страница" + ИмяРеквизита;
		Страница = Элементы.Добавить(ИмяСтраницы, Тип("ГруппаФормы"), Элементы.СоставОбъекта);
		Страница.Вид = ВидГруппыФормы.Страница;
		ОписаниеТабличнойЧасти = ТаблицаОбъекта.Значение;
		Страница.Заголовок = ОписаниеТабличнойЧасти.Представление();
		
		// Создание элементов для табличных частей.
		ТаблицаФормы = Элементы.Добавить(ИмяРеквизита, Тип("ТаблицаФормы"), Страница);
		ТаблицаФормы.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
		ТаблицаФормы.ПутьКДанным = ИмяРеквизита;
		ТаблицаФормы.ПоложениеКоманднойПанели = ПоложениеКоманднойПанелиЭлементаФормы.Нет;
		ТаблицаФормы.Заголовок = ОписаниеТабличнойЧасти.Представление();
		ТаблицаФормы.УстановитьДействие("ПередНачаломИзменения", "Подключаемый_ПередНачаломИзменения");
		ТаблицаФормы.ИзменятьПорядокСтрок = Ложь;
		ТаблицаФормы.ИзменятьСоставСтрок = Ложь;
		ТаблицаФормы.КартинкаСтрок = КартинкаВидыОпераций();
		ТаблицаФормы.ПутьКДаннымКартинкиСтроки = ИмяРеквизита + ".ВидОперации";
		ТаблицаФормы.Высота = 5;
		
		Для Каждого ОписаниеКолонки Из КолонкиТаблиц Цикл 
			Если ОписаниеКолонки.ВидПоля = Неопределено Тогда
				Продолжить;
			КонецЕсли;
			ИмяРеквизита = ОписаниеКолонки.Имя;
			ИмяЭлемента = ТаблицаФормы.Имя + ИмяРеквизита;
			КолонкаТаблицы = Элементы.Добавить(ИмяЭлемента, Тип("ПолеФормы"), ТаблицаФормы);
			Если ОписаниеКолонки.Картинка <> Неопределено Тогда
				КолонкаТаблицы.ПоложениеЗаголовка = ПоложениеЗаголовкаЭлементаФормы.Нет;
				КолонкаТаблицы.КартинкаШапки = ОписаниеКолонки.Картинка;
			КонецЕсли;
			КолонкаТаблицы.ПутьКДанным = ТаблицаОбъекта.Ключ + "." + ИмяРеквизита;
			КолонкаТаблицы.Вид = ОписаниеКолонки.ВидПоля;
			КолонкаТаблицы.РежимРедактирования = РежимРедактированияКолонки.ВходПриВводе;
			КолонкаТаблицы.ТолькоПросмотр = ОписаниеКолонки.ТолькоПросмотр;
			Если ОписаниеКолонки.Действия <> Неопределено Тогда
				Для Каждого Действие Из ОписаниеКолонки.Действия Цикл
					КолонкаТаблицы.УстановитьДействие(Действие.Ключ, Действие.Значение);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		
		ДоступныеДляИзмененияРеквизиты = ДоступныеДляИзмененияРеквизиты(ОписаниеТабличнойЧасти, НередактируемыеРеквизиты,
			ФильтруемыеРеквизиты, ДоступныеТабличныеЧасти[ОписаниеТабличнойЧасти.Имя]);
			
		Для Каждого ОписаниеРеквизита Из ДоступныеДляИзмененияРеквизиты Цикл
			Реквизит = ЭтотОбъект[ТаблицаОбъекта.Ключ].Добавить();
			Реквизит.Имя = ОписаниеРеквизита.Имя;
			Реквизит.Представление = ?(ПустаяСтрока(ОписаниеРеквизита.Представление()), ОписаниеРеквизита.Имя, ОписаниеРеквизита.Представление());
			Реквизит.ДопустимыеТипы = ОписаниеРеквизита.Тип;
			Реквизит.СвязиПараметровВыбора = СвязиПараметровВыбораСтрокой(ОписаниеРеквизита.СвязиПараметровВыбора);
			Реквизит.ПараметрыВыбора = ПараметрыВыбораСтрокой(ОписаниеРеквизита.ПараметрыВыбора);
			Реквизит.ВидОперации = 1;
			Реквизит.ПредставлениеСвязейПараметровВыбора = ПредставлениеСвязейПараметровВыбора(ОписаниеРеквизита.СвязиПараметровВыбора, ОбъектМетаданных);
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ДоступныеДляИзмененияРеквизиты(ОписаниеТабличнойЧасти, НередактируемыеРеквизиты, ФильтруемыеРеквизиты, ДоступныеРеквизиты)
	
	Результат = Новый Массив;
	
	Для Каждого ОписаниеРеквизита Из ОписаниеТабличнойЧасти.Реквизиты Цикл
		Если ДоступныеРеквизиты.Найти(ОписаниеРеквизита.Имя) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если Не ПравоДоступа("Редактирование", ОписаниеРеквизита) Тогда
			Продолжить;
		КонецЕсли;
		// Фильтры реквизитов табличных частей.
		Если НередактируемыеРеквизиты.Найти(ОписаниеТабличнойЧасти.Имя + "." + ОписаниеРеквизита.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		Если ФильтруемыеРеквизиты.Найти(ОписаниеТабличнойЧасти.Имя + "." + ОписаниеРеквизита.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Результат.Добавить(ОписаниеРеквизита);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Функция ОписанияКолонокТаблицыРеквизитов()
	
	КолонкиТаблиц = Новый ТаблицаЗначений;
	КолонкиТаблиц.Колонки.Добавить("Имя");
	КолонкиТаблиц.Колонки.Добавить("Тип");
	КолонкиТаблиц.Колонки.Добавить("Представление");
	КолонкиТаблиц.Колонки.Добавить("ВидПоля");
	КолонкиТаблиц.Колонки.Добавить("Действия");
	КолонкиТаблиц.Колонки.Добавить("ТолькоПросмотр", Новый ОписаниеТипов("Булево"));
	КолонкиТаблиц.Колонки.Добавить("Картинка");
	
	ОписаниеКолонки = КолонкиТаблиц.Добавить();
	ОписаниеКолонки.Имя = "Имя";
	ОписаниеКолонки.Тип = Новый ОписаниеТипов("Строка");
	
	ОписаниеКолонки = КолонкиТаблиц.Добавить();
	ОписаниеКолонки.Имя = "Представление";
	ОписаниеКолонки.Тип = Новый ОписаниеТипов("Строка");
	ОписаниеКолонки.Представление = НСтр("ru='Реквизит';en='Property'");
	ОписаниеКолонки.ВидПоля = ВидПоляФормы.ПолеВвода;
	ОписаниеКолонки.ТолькоПросмотр = Истина;
	
	ОписаниеКолонки = КолонкиТаблиц.Добавить();
	ОписаниеКолонки.Имя = "Изменять";
	ОписаниеКолонки.Тип = Новый ОписаниеТипов("Булево");
	ОписаниеКолонки.ВидПоля = ВидПоляФормы.ПолеФлажка;
	ОписаниеКолонки.Картинка = БиблиотекаКартинок.Изменить;
	ОписаниеКолонки.Действия = Новый Структура("ПриИзменении", "Подключаемый_ПриИзмененииФлажка");
	
	ОписаниеКолонки = КолонкиТаблиц.Добавить();
	ОписаниеКолонки.Имя = "Значение";
	ОписаниеКолонки.Тип = ВсеТипы();
	ОписаниеКолонки.Представление = НСтр("ru='Новое значение';en='New value'");
	ОписаниеКолонки.ВидПоля = ВидПоляФормы.ПолеВвода;
	ОписаниеКолонки.Действия = Новый Структура("ПриИзменении", "Подключаемый_ЗначениеПриИзменении");
	
	ОписаниеКолонки = КолонкиТаблиц.Добавить();
	ОписаниеКолонки.Имя = "ДопустимыеТипы";
	ОписаниеКолонки.Тип = Новый ОписаниеТипов("ОписаниеТипов");
	
	ОписаниеКолонки = КолонкиТаблиц.Добавить();
	ОписаниеКолонки.Имя = "СвязиПараметровВыбора";
	ОписаниеКолонки.Тип = Новый ОписаниеТипов("Строка");
	
	ОписаниеКолонки = КолонкиТаблиц.Добавить();
	ОписаниеКолонки.Имя = "ПараметрыВыбора";
	ОписаниеКолонки.Тип = Новый ОписаниеТипов("Строка");
	
	ОписаниеКолонки = КолонкиТаблиц.Добавить();
	ОписаниеКолонки.Имя = "ВидОперации";
	ОписаниеКолонки.Тип = Новый ОписаниеТипов("Число");
	
	ОписаниеКолонки = КолонкиТаблиц.Добавить();
	ОписаниеКолонки.Имя = "Свойство";
	ОписаниеКолонки.Тип = Новый ОписаниеТипов("Строка");
	
	ОписаниеКолонки = КолонкиТаблиц.Добавить();
	ОписаниеКолонки.Имя = "ВыборГруппИЭлементов";
	ОписаниеКолонки.Тип = Новый ОписаниеТипов("Строка");
	
	ОписаниеКолонки = КолонкиТаблиц.Добавить();
	ОписаниеКолонки.Имя = "ПредставлениеСвязейПараметровВыбора";
	ОписаниеКолонки.Тип = Новый ОписаниеТипов("Строка");
	
	Возврат КолонкиТаблиц;
	
КонецФункции

&НаСервере
Функция ВсеТипы()
	Результат = Неопределено;
	Реквизиты = ПолучитьРеквизиты("РеквизитыОбъекта");
	Для Каждого Реквизит Из Реквизиты Цикл
		Если Реквизит.Имя = "Значение" Тогда
			Результат = Реквизит.ТипЗначения;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура УстановитьОграниченияВыбираемыхТиповИПараметрыВыбораЗначения(ТабличноеПоле)
	Если ТабличноеПоле.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПолеВвода = ТабличноеПоле.ПодчиненныеЭлементы[ТабличноеПоле.Имя + "Значение"];
	ПолеВвода.ОграничениеТипа = ТабличноеПоле.ТекущиеДанные.ДопустимыеТипы;
	
	Если ПолеВвода.ОграничениеТипа.Типы().Количество() = 1 И ПолеВвода.ОграничениеТипа.СодержитТип(Тип("Строка")) Тогда
		ПолеВвода.КнопкаВыбора = Истина;
	КонецЕсли;
	
	ПараметрыВыбораМассив = Новый Массив;
	
	Если НЕ ПустаяСтрока(ТабличноеПоле.ТекущиеДанные.ПараметрыВыбора) Тогда
		УстановитьПараметрыВыбораСервер(ТабличноеПоле.ТекущиеДанные.ПараметрыВыбора, ПараметрыВыбораМассив)
	КонецЕсли;
	
	Если Не ПустаяСтрока(ТабличноеПоле.ТекущиеДанные.СвязиПараметровВыбора) Тогда
		Для Индекс = 1 По СтрЧислоСтрок(ТабличноеПоле.ТекущиеДанные.СвязиПараметровВыбора) Цикл
			СвязьПараметровВыбораСтрока = СтрПолучитьСтроку(ТабличноеПоле.ТекущиеДанные.СвязиПараметровВыбора, Индекс);
			РазложенныеСтроки = СтрРазделить(СвязьПараметровВыбораСтрока, ";");
			ИмяПараметра = СокрЛП(РазложенныеСтроки[0]);
			
			ИмяРеквизита = СокрЛП(РазложенныеСтроки[1]);
			ЧастиИмениРеквизита = СтрРазделить(ИмяРеквизита, ".", Ложь);
			ИмяТабличнойЧасти = "";
			Если ЧастиИмениРеквизита.Количество() > 1 Тогда
				ИмяТабличнойЧасти = ЧастиИмениРеквизита[0];
			КонецЕсли;
			ИмяРеквизита = ЧастиИмениРеквизита[ЧастиИмениРеквизита.Количество() - 1];
			
			ТаблицаРеквизитов = РеквизитыОбъекта;
			Если Не ПустаяСтрока(ИмяТабличнойЧасти) Тогда
				ТаблицаРеквизитов = ЭтотОбъект["ТабличнаяЧасть" + ИмяТабличнойЧасти];
			КонецЕсли;
			
			НайденныеСтроки = ТаблицаРеквизитов.НайтиСтроки(Новый Структура("ВидОперации,Имя", 1, ИмяРеквизита));
			Если НайденныеСтроки.Количество() = 1 Тогда
				Значение = НайденныеСтроки[0].Значение;
				Если ЗначениеЗаполнено(Значение) Тогда
					ПараметрыВыбораМассив.Добавить(Новый ПараметрВыбора(ИмяПараметра, Значение));
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТабличноеПоле.ТекущиеДанные.Свойство) Тогда
		ПараметрыВыбораМассив.Добавить(Новый ПараметрВыбора("Отбор.Владелец", ТабличноеПоле.ТекущиеДанные.Свойство));
	КонецЕсли;
	
	Если ОтключитьСвязиПараметровВыбора Тогда
		ПолеВвода.ПараметрыВыбора = Новый ФиксированныйМассив(Новый Массив);
	Иначе
		ПолеВвода.ПараметрыВыбора = Новый ФиксированныйМассив(ПараметрыВыбораМассив);
	КонецЕсли;
	
	ВыборГруппИЭлементов = ТабличноеПоле.ТекущиеДанные.ВыборГруппИЭлементов;
	
	Если ВыборГруппИЭлементов <> "" Тогда
		Если ВыборГруппИЭлементов = "Группы" Тогда
			ПолеВвода.ВыборГруппИЭлементов = ГруппыИЭлементы.Группы;
		ИначеЕсли ВыборГруппИЭлементов = "ГруппыИЭлементы" Тогда
			ПолеВвода.ВыборГруппИЭлементов = ГруппыИЭлементы.ГруппыИЭлементы;
		ИначеЕсли ВыборГруппИЭлементов = "Элементы" Тогда
			ПолеВвода.ВыборГруппИЭлементов = ГруппыИЭлементы.Элементы;
		Иначе
			ПолеВвода.ВыборГруппИЭлементов = ГруппыИЭлементы.Авто;
		КонецЕсли;
	Иначе
		ПолеВвода.ВыборГруппИЭлементов = ГруппыИЭлементы.Авто;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСчетчикиИзменяемыхРеквизитов(Знач ТаблицаФормы = Неопределено)
	
	СписокТаблиц = Новый Массив;
	Если ТаблицаФормы <> Неопределено Тогда
		СписокТаблиц.Добавить(ТаблицаФормы);
	Иначе
		СписокТаблиц.Добавить(Элементы.РеквизитыОбъекта);
		Для Каждого ТабличнаяЧасть Из ТабличныеЧастиОбъекта Цикл
			СписокТаблиц.Добавить(Элементы[ТабличнаяЧасть.Значение]);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого ТаблицаФормы Из СписокТаблиц Цикл
		ТабличнаяЧасть = ЭтотОбъект[ТаблицаФормы.Имя];
		КоличествоИзменяемых = 0;
		КоличествоИзменяемыхСтандартных = 0;
		Для Каждого Реквизит Из ТабличнаяЧасть Цикл
			Если ТаблицаФормы.Имя = "РеквизитыОбъекта" И Реквизит.Изменять И (Реквизит.ЭтоСтандартныйРеквизит ИЛИ Реквизит.Имя = "СозданАвтоматически") Тогда
				КоличествоИзменяемыхСтандартных = КоличествоИзменяемыхСтандартных + 1;
			ИначеЕсли Реквизит.Изменять Тогда
				КоличествоИзменяемых = КоличествоИзменяемых + 1;
			КонецЕсли;
		КонецЦикла;
	
		Страница = ТаблицаФормы.Родитель;
		Страница.Заголовок = ТаблицаФормы.Заголовок + ?(КоличествоИзменяемых = 0, "", " (" + КоличествоИзменяемых+ ")");
		Элементы.СлужебныеРеквизиты.Заголовок = Нстр("en = 'Service atributes'; ru = 'Служебные реквизиты'") + ?(КоличествоИзменяемыхСтандартных = 0, "", " (" + КоличествоИзменяемыхСтандартных+ ")");
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьВидимостьЭлементов()
	Если ТабличныеЧастиОбъекта.Количество() = 0 Тогда
		Элементы.СоставОбъекта.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	Иначе
		Элементы.СоставОбъекта.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
	КонецЕсли;
	
	Если Не ПустаяСтрока(ВидыИзменяемыхОбъектов) Тогда
		ЕстьОбщиеРеквизиты = РеквизитыОбъекта.Количество() > 0;
		Элементы.ГруппаНетРеквизитов.Видимость = Не ЕстьОбщиеРеквизиты;
		Если Объект.ТипОперации = "ВыполнитьАлгоритм" Тогда
			Элементы.Алгоритмы.Видимость = Истина;
		Иначе
			Элементы.РанееИзмененныеРеквизиты.Видимость = ЕстьОбщиеРеквизиты Или ТабличныеЧастиОбъекта.Количество() > 0;
		КонецЕсли;
		Элементы.РеквизитыОбъекта.Видимость = ЕстьОбщиеРеквизиты;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРеквизитыОбъекта(БлокируемыеРеквизиты, НеРедактируемые, ФильтруемыеРеквизиты, ДоступныеРеквизиты)
	
	НаборыРеквизитов = Новый Структура;
	НаборыРеквизитов.Вставить("НеРедактируемые", НеРедактируемые);
	НаборыРеквизитов.Вставить("Фильтруемые", ФильтруемыеРеквизиты);
	НаборыРеквизитов.Вставить("Блокируемые", БлокируемыеРеквизиты);
	НаборыРеквизитов.Вставить("Доступные", ДоступныеРеквизиты);
	
	СписокВидовИзменяемыхОбъектов = СтрРазделить(ВидыИзменяемыхОбъектов, ",", Ложь);
	ИмяОбъекта = СписокВидовИзменяемыхОбъектов[0];
	
	ОбъектМетаданных = Метаданные.НайтиПоПолномуИмени(ИмяОбъекта);
	РеквизитыОбъекта.Очистить();
	
	НаборыРеквизитов.Вставить("ОписанияРеквизитов", ОбъектМетаданных.СтандартныеРеквизиты);
	ДобавитьРеквизитыВНабор(НаборыРеквизитов, ОбъектМетаданных);
	
	НаборыРеквизитов.Вставить("ОписанияРеквизитов", ОбъектМетаданных.Реквизиты);
	ДобавитьРеквизитыВНабор(НаборыРеквизитов, ОбъектМетаданных);
	
	РеквизитыОбъекта.Сортировать("Представление Возр");
	
	Если ПодсистемаСуществует("СтандартныеПодсистемы.Свойства") Тогда
		МодульУправлениеСвойствами = ОбщийМодуль("УправлениеСвойствами");
		Если МодульУправлениеСвойствами <> Неопределено Тогда
			ИспользуютсяДопРеквизиты = Истина;
			ИспользуютсяДопСведения = Истина;
			Для Каждого ВидОбъекта Из СписокВидовИзменяемыхОбъектов Цикл
				МенеджерОбъекта = МенеджерОбъектаПоПолномуИмени(ВидОбъекта);
				ИспользуютсяДопРеквизиты = ИспользуютсяДопРеквизиты И МодульУправлениеСвойствами.ИспользоватьДопРеквизиты(МенеджерОбъекта.ПустаяСсылка());
				ИспользуютсяДопСведения  = ИспользуютсяДопСведения И МодульУправлениеСвойствами.ИспользоватьДопСведения (МенеджерОбъекта.ПустаяСсылка());
			КонецЦикла;
			Если ИспользуютсяДопРеквизиты Или ИспользуютсяДопСведения Тогда
				ДобавитьДополнительныеРеквизитыИСведенияВНабор();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьДополнительныеРеквизитыИСведенияВНабор()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	СписокВидовИзменяемыхОбъектов = СтрРазделить(ВидыИзменяемыхОбъектов, ",", Ложь);
	ОбщийСписокРеквизитов = СписокСвойствДляВидаОбъектов(СписокВидовИзменяемыхОбъектов[0]);
	Для Индекс = 1 По СписокВидовИзменяемыхОбъектов.Количество() - 1 Цикл
		ОбщийСписокРеквизитов = ОбработкаОбъект.ПересечениеМножеств(ОбщийСписокРеквизитов, СписокСвойствДляВидаОбъектов(СписокВидовИзменяемыхОбъектов[Индекс]));
	КонецЦикла;
	
	Если КонтекстныйВызов Тогда
		НастройкиОтбора = НастройкиОтбора();
		НастройкиОтбора.ОбновитьСписок = Истина;
		Для Каждого ДанныеОбъекта Из ВыбранныеОбъекты(НастройкиОтбора).Строки Цикл
			ОбъектДляИзменения = ДанныеОбъекта.Ссылка;
			
			ВидОбъектаПоСсылке = ВидОбъектаПоСсылке(ОбъектДляИзменения);
			Если (ВидОбъектаПоСсылке = "Справочник" ИЛИ ВидОбъектаПоСсылке = "ПланВидовХарактеристик") И ОбъектЯвляетсяГруппой(ОбъектДляИзменения) Тогда
				Продолжить;
			КонецЕсли;
			
			МодульУправлениеСвойствами = ОбщийМодуль("УправлениеСвойствами");
			СписокСвойств = МодульУправлениеСвойствами.СвойстваОбъекта(ОбъектДляИзменения);
			Для Каждого Свойство Из СписокСвойств Цикл
				Если ОбщийСписокРеквизитов.Найти(Свойство) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				
				Если РеквизитыОбъекта.НайтиСтроки(Новый Структура("Свойство", Свойство)).Количество() > 0 Тогда
					Продолжить;
				КонецЕсли;
				
				ДобавитьСвойствоВСписокРеквизитов(Свойство);
			КонецЦикла;
		КонецЦикла;
	Иначе
		Для Каждого Реквизит Из ОбщийСписокРеквизитов Цикл
			ДобавитьСвойствоВСписокРеквизитов(Реквизит);
		КонецЦикла;
	КонецЕсли;
	
	РеквизитыОбъекта.Сортировать("Представление");
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьСвойствоВСписокРеквизитов(Свойство)
	ОписаниеСвойства = ЗначенияРеквизитовОбъекта(Свойство, "Ссылка,Наименование,ТипЗначения,ЭтоДополнительноеСведение");
	ОписаниеРеквизита = РеквизитыОбъекта.Добавить();
	ОписаниеРеквизита.ВидОперации = ?(ОписаниеСвойства.ЭтоДополнительноеСведение, 3, 2);
	ОписаниеРеквизита.Свойство = ОписаниеСвойства.Ссылка;
	ОписаниеРеквизита.Представление = ОписаниеСвойства.Наименование;
	ОписаниеРеквизита.ДопустимыеТипы = ОписаниеСвойства.ТипЗначения;
КонецПроцедуры

&НаСервере
Функция СписокСвойствДляВидаОбъектов(ВидОбъектов)
	Результат = Новый Массив;
	
	ВидыСвойств = Новый Массив;
	ВидыСвойств.Добавить("ДополнительныеРеквизиты");
	ВидыСвойств.Добавить("ДополнительныеСведения");
	
	МодульУправлениеСвойствамиСлужебный = ОбщийМодуль("УправлениеСвойствамиСлужебный");
	Если МодульУправлениеСвойствамиСлужебный <> Неопределено Тогда
		Для Каждого ВидСвойства Из ВидыСвойств Цикл
			СписокСвойств = МодульУправлениеСвойствамиСлужебный.СписокСвойствДляВидаОбъектов(ВидОбъектов, ВидСвойства);
			Если СписокСвойств <> Неопределено Тогда
				Для Каждого Элемент Из СписокСвойств Цикл
					Результат.Добавить(Элемент.Свойство);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаСервере
Процедура ДобавитьРеквизитыВНабор(НаборыРеквизитов, ОбъектМетаданных)
	
	Реквизиты = НаборыРеквизитов.ОписанияРеквизитов;
	НеРедактируемые = НаборыРеквизитов.НеРедактируемые;
	ФильтруемыеРеквизиты = НаборыРеквизитов.Фильтруемые;
	БлокируемыеРеквизиты = НаборыРеквизитов.Блокируемые;
	СписокДоступныхРеквизитов = НаборыРеквизитов.Доступные;
	
	Для Каждого ОписаниеРеквизита Из Реквизиты Цикл
		Если СписокДоступныхРеквизитов.Найти(ОписаниеРеквизита.Имя) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(ОписаниеРеквизита) = Тип("ОписаниеСтандартногоРеквизита") Тогда
			Если НЕ ПравоДоступа("Редактирование", ОбъектМетаданных, , ОписаниеРеквизита.Имя) Тогда
				Продолжить;
			КонецЕсли;
		Иначе
			Если НЕ ПравоДоступа("Редактирование", ОписаниеРеквизита) Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Если НеРедактируемые.Найти(ОписаниеРеквизита.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ФильтруемыеРеквизиты.Найти(ОписаниеРеквизита.Имя) <> Неопределено Тогда
			Продолжить;
		КонецЕсли;
		
		ВыборГруппИЭлементов = "";
		Если ТипЗнч(ОписаниеРеквизита) = Тип("ОписаниеСтандартногоРеквизита") Тогда
			Если ОписаниеРеквизита.Имя = "Родитель" Или ОписаниеРеквизита.Имя = "Parent" Тогда
				ВыборГруппИЭлементов = "Группы";
			ИначеЕсли ОписаниеРеквизита.Имя = "Владелец" Или ОписаниеРеквизита.Имя = "Owner" Тогда
				Если ОбъектМетаданных.ИспользованиеПодчинения = Метаданные.СвойстваОбъектов.ИспользованиеПодчинения.Элементам Тогда
					ВыборГруппИЭлементов = "Элементы";
				ИначеЕсли ОбъектМетаданных.ИспользованиеПодчинения = Метаданные.СвойстваОбъектов.ИспользованиеПодчинения.ГруппамИЭлементам Тогда
					ВыборГруппИЭлементов = "ГруппыИЭлементы";
				ИначеЕсли ОбъектМетаданных.ИспользованиеПодчинения = Метаданные.СвойстваОбъектов.ИспользованиеПодчинения.Группам Тогда
					ВыборГруппИЭлементов = "Группы";
				КонецЕсли;
			КонецЕсли;
		Иначе
			ЭтоСсылка = Ложь;
			
			Для Каждого Тип Из ОписаниеРеквизита.Тип.Типы() Цикл
				Если ЭтоСсылка(Тип) Тогда
					ЭтоСсылка = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если ЭтоСсылка Тогда
				Если ОписаниеРеквизита.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Группы Тогда
					ВыборГруппИЭлементов = "Группы";
				ИначеЕсли ОписаниеРеквизита.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.ГруппыИЭлементы Тогда
					ВыборГруппИЭлементов = "ГруппыИЭлементы";
				ИначеЕсли ОписаниеРеквизита.ВыборГруппИЭлементов = ИспользованиеГруппИЭлементов.Элементы Тогда
					ВыборГруппИЭлементов = "Элементы";
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		СписокВидовИзменяемыхОбъектов = СтрРазделить(ВидыИзменяемыхОбъектов, ",", Ложь);
		ПредставлениеСвязейПараметровВыбора = "";
		Если СписокВидовИзменяемыхОбъектов.Количество() = 1 Тогда
			ПараметрыВыбораСтрока = ПараметрыВыбораСтрокой(ОписаниеРеквизита.ПараметрыВыбора);
			СвязиПараметровВыбораСтрока = СвязиПараметровВыбораСтрокой(ОписаниеРеквизита.СвязиПараметровВыбора);
			ПредставлениеСвязейПараметровВыбора = ПредставлениеСвязейПараметровВыбора(ОписаниеРеквизита.СвязиПараметровВыбора, ОбъектМетаданных);
		Иначе
			ПараметрыВыбораСтрока = ПараметрыВыбораСтрокой(Новый Массив);
			СвязиПараметровВыбораСтрока = СвязиПараметровВыбораСтрокой(Новый Массив);
		КонецЕсли;
		
		РеквизитОбъекта = РеквизитыОбъекта.Добавить();
		РеквизитОбъекта.Имя = ОписаниеРеквизита.Имя;
		РеквизитОбъекта.Представление = ОписаниеРеквизита.Представление();
		
		РеквизитОбъекта.ДопустимыеТипы = ОписаниеРеквизита.Тип;
		РеквизитОбъекта.ПараметрыВыбора = ПараметрыВыбораСтрока;
		РеквизитОбъекта.СвязиПараметровВыбора = СвязиПараметровВыбораСтрока;
		РеквизитОбъекта.ПредставлениеСвязейПараметровВыбора = ПредставлениеСвязейПараметровВыбора;
		РеквизитОбъекта.ВыборГруппИЭлементов = ВыборГруппИЭлементов;
		РеквизитОбъекта.ВидОперации = 1;
		
		Если БлокируемыеРеквизиты.Найти(ОписаниеРеквизита.Имя) <> Неопределено Тогда
			РеквизитОбъекта.ЗаблокированныйРеквизит = Истина;
		КонецЕсли;
		
		РеквизитОбъекта.ЭтоСтандартныйРеквизит = ТипЗнч(ОписаниеРеквизита) = Тип("ОписаниеСтандартногоРеквизита");
		
	КонецЦикла;
	
КонецПроцедуры

// Получает массив реквизитов, редактирование которых не предусмотрено
// на уровне конфигурации.
//
&НаСервере
Функция ПолучитьФильтрРедактированияПоТипу(ОбъектМетаданных)
	
	ФильтрТаблица = ФильтрРеквизитов();
	
	// Реквизиты, блокируемые для любого типа объектов метаданных.
	ОбщийФильтр = ФильтрТаблица.НайтиСтроки(Новый Структура("ТипОбъекта", "*"));
	
	// Реквизиты, блокируемые для указанного типа объектов метаданных.
	ФильтрПоТипуОбъекта = ФильтрТаблица.НайтиСтроки(Новый Структура("ТипОбъекта", 
		ИмяБазовогоТипаПоОбъектуМетаданных(ОбъектМетаданных)));
	
	ФильтруемыеРеквизиты = Новый Соответствие;
	
	Для Каждого СтрокаОписание Из ОбщийФильтр Цикл
		ФильтруемыеРеквизиты[СтрокаОписание.Реквизит] = Истина;
	КонецЦикла;
	
	Для Каждого СтрокаОписание Из ФильтрПоТипуОбъекта Цикл
		ФильтруемыеРеквизиты[СтрокаОписание.Реквизит] = Истина;
	КонецЦикла;
	
	ПрефиксУдаляемыхРеквизитов = "Удалить";
	ОписаниеРеквизитов = ОбъектМетаданных.Реквизиты; // Массив из ОбъектМетаданныхРеквизит
	Для Каждого Реквизит Из ОписаниеРеквизитов Цикл
		Если НРег(Лев(Реквизит.Имя, СтрДлина(ПрефиксУдаляемыхРеквизитов))) = НРег(ПрефиксУдаляемыхРеквизитов) Тогда
			ФильтруемыеРеквизиты[Реквизит.Имя] = Истина;
		КонецЕсли;
	КонецЦикла;
	Для Каждого ТабличнаяЧасть Из ОбъектМетаданных.ТабличныеЧасти Цикл
		Если НРег(Лев(ТабличнаяЧасть.Имя, СтрДлина(ПрефиксУдаляемыхРеквизитов))) = НРег(ПрефиксУдаляемыхРеквизитов) Тогда
			ФильтруемыеРеквизиты[ТабличнаяЧасть.Имя + ".*"] = Истина;
		Иначе
			ОписаниеРеквизитовТабличнойЧасти = ТабличнаяЧасть.Реквизиты; // Массив из ОбъектМетаданныхРеквизит
			Для Каждого Реквизит Из ОписаниеРеквизитовТабличнойЧасти Цикл
				Если НРег(Лев(Реквизит.Имя, СтрДлина(ПрефиксУдаляемыхРеквизитов))) = НРег(ПрефиксУдаляемыхРеквизитов) Тогда
					ФильтруемыеРеквизиты[ТабличнаяЧасть.Имя + "." + Реквизит.Имя] = Истина;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ФильтруемыеРеквизиты;
	
КонецФункции  

&НаСервере
Функция ФильтрРеквизитов()

	Результат = Новый ТаблицаЗначений;
	Результат.Колонки.Добавить("ТипОбъекта", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(80)));
	Результат.Колонки.Добавить("Реквизит", Новый ОписаниеТипов("Строка", Новый КвалификаторыСтроки(80)));
	
	// Все объекты.
	Фильтр = Результат.Добавить();
	Фильтр.ТипОбъекта = "*";
	Фильтр.Реквизит = "Наименование";

	Фильтр = Результат.Добавить();
	Фильтр.ТипОбъекта = "*";
	Фильтр.Реквизит = "ПометкаУдаления";

	Фильтр = Результат.Добавить();
	Фильтр.ТипОбъекта = "*";
	Фильтр.Реквизит = "Ссылка";

	Фильтр = Результат.Добавить();
	Фильтр.ТипОбъекта = "*";
	Фильтр.Реквизит = "ДополнительныеРеквизиты.*";

	Фильтр = Результат.Добавить();
	Фильтр.ТипОбъекта = "*";
	Фильтр.Реквизит = "КонтактнаяИнформация.*";

	// Справочники.
	Фильтр = Результат.Добавить();
	Фильтр.ТипОбъекта = "Справочники";
	Фильтр.Реквизит = "ИмяПредопределенныхДанных";

	Фильтр = Результат.Добавить();
	Фильтр.ТипОбъекта = "Справочники";
	Фильтр.Реквизит = "Код";

	Фильтр = Результат.Добавить();
	Фильтр.ТипОбъекта = "Справочники";
	Фильтр.Реквизит = "Предопределенный";

	Фильтр = Результат.Добавить();
	Фильтр.ТипОбъекта = "Справочники";
	Фильтр.Реквизит = "ЭтоГруппа";

	Фильтр = Результат.Добавить();
	Фильтр.ТипОбъекта = "Справочники";
	Фильтр.Реквизит = "РеквизитДопУпорядочивания";
	
	// Документы.
	Фильтр = Результат.Добавить();
	Фильтр.ТипОбъекта = "Документы";
	Фильтр.Реквизит = "Номер";

	Фильтр = Результат.Добавить();
	Фильтр.ТипОбъекта = "Документы";
	Фильтр.Реквизит = "Проведен";
	
	// Планы видов характеристик.
	Фильтр = Результат.Добавить();
	Фильтр.ТипОбъекта = "ПланыВидовХарактеристик";
	Фильтр.Реквизит = "ИмяПредопределенныхДанных";
	
	Фильтр = Результат.Добавить();
	Фильтр.ТипОбъекта = "ПланыВидовХарактеристик";
	Фильтр.Реквизит = "Код";
	
	Фильтр = Результат.Добавить();
	Фильтр.ТипОбъекта = "ПланыВидовХарактеристик";
	Фильтр.Реквизит = "Предопределенный";
	
	Фильтр = Результат.Добавить();
	Фильтр.ТипОбъекта = "ПланыВидовХарактеристик";
	Фильтр.Реквизит = "ЭтоГруппа";
	
	Фильтр = Результат.Добавить();
	Фильтр.ТипОбъекта = "ПланыВидовХарактеристик";
	Фильтр.Реквизит = "ТипЗначения";
	
	// Планы счетов.
	Фильтр = Результат.Добавить();
	Фильтр.ТипОбъекта = "ПланыСчетов";
	Фильтр.Реквизит = "ИмяПредопределенныхДанных";

	Фильтр = Результат.Добавить();
	Фильтр.ТипОбъекта = "ПланыСчетов";
	Фильтр.Реквизит = "Код";

	Фильтр = Результат.Добавить();
	Фильтр.ТипОбъекта = "ПланыСчетов";
	Фильтр.Реквизит = "Предопределенный";

	Фильтр = Результат.Добавить();
	Фильтр.ТипОбъекта = "ПланыСчетов";
	Фильтр.Реквизит = "Порядок";

	// Планы видов расчета.
	Фильтр = Результат.Добавить();
	Фильтр.ТипОбъекта = "ПланыВидовРасчета";
	Фильтр.Реквизит = "ИмяПредопределенныхДанных";
	
	Фильтр = Результат.Добавить();
	Фильтр.ТипОбъекта = "ПланыВидовРасчета";
	Фильтр.Реквизит = "Код";
	
	Фильтр = Результат.Добавить();
	Фильтр.ТипОбъекта = "ПланыВидовРасчета";
	Фильтр.Реквизит = "Предопределенный";
	
	Фильтр = Результат.Добавить();
	Фильтр.ТипОбъекта = "ПланыВидовРасчета";
	Фильтр.Реквизит = "ПериодДействияБазовый";
	
	// Задачи.
	Фильтр = Результат.Добавить();
	Фильтр.ТипОбъекта = "Задачи";
	Фильтр.Реквизит = "Номер";
	
	// Бизнес-процессы.
	Фильтр = Результат.Добавить();
	Фильтр.ТипОбъекта = "БизнесПроцессы";
	Фильтр.Реквизит = "Номер";

	Фильтр = Результат.Добавить();
	Фильтр.ТипОбъекта = "БизнесПроцессы";
	Фильтр.Реквизит = "Дата";
	
	// Планы обмена.
	Фильтр = Результат.Добавить();
	Фильтр.ТипОбъекта = "ПланыОбмена";
	Фильтр.Реквизит = "Код";
	
	Фильтр = Результат.Добавить();
	Фильтр.ТипОбъекта = "ПланыОбмена";
	Фильтр.Реквизит = "НомерОтправленного";
	
	Фильтр = Результат.Добавить();
	Фильтр.ТипОбъекта = "ПланыОбмена";
	Фильтр.Реквизит = "НомерПринятого";
	
	Результат.Индексы.Добавить("ТипОбъекта");
	
	Возврат Результат;
КонецФункции

&НаСервере
Функция ЭлементыОтбораБезИерархии(Знач ЭлементыОтбора)
	Результат = Новый Массив;
	Для Каждого ЭлементОтбора Из ЭлементыОтбора Цикл
		Если ТипЗнч(ЭлементОтбора) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			ПодчиненныеОтборы = ЭлементыОтбораБезИерархии(ЭлементОтбора.Элементы);
			Для Каждого ПодчиненныйОтбор Из ПодчиненныеОтборы Цикл
				Результат.Добавить(ПодчиненныйОтбор);
			КонецЦикла;
		Иначе
			Результат.Добавить(ЭлементОтбора);
		КонецЕсли;
	КонецЦикла;
	Возврат Результат;
КонецФункции

&НаСервере
Процедура СформироватьПояснениеОНастроенныхИзменениях()
	
	ЕстьОтборПоСтрокам = Ложь;
	Для Каждого ЭлементОтбора Из ЭлементыОтбораБезИерархии(КомпоновщикНастроек.Настройки.Отбор.Элементы) Цикл
		Если Не ЭлементОтбора.Использование Тогда
			Продолжить;
		КонецЕсли;
		Для Каждого ТабличнаяЧасть Из ТабличныеЧастиОбъекта Цикл
			ИмяТабличнойЧасти = Сред(ТабличнаяЧасть.Значение, СтрДлина("ТабличнаяЧасть") + 1);
			Если СтрНачинаетсяС(ЭлементОтбора.ЛевоеЗначение, ИмяТабличнойЧасти) Тогда
				ЕстьОтборПоСтрокам = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ИзменяемыеТабличныеЧасти = Новый Соответствие;
	Для Каждого ТабличнаяЧасть Из ТабличныеЧастиОбъекта Цикл
		ИзменяемыеРеквизиты = Новый Массив;
		Для Каждого Реквизит Из ЭтотОбъект[ТабличнаяЧасть.Значение] Цикл
			Если Реквизит.Изменять Тогда
				ИзменяемыеРеквизиты.Добавить(Реквизит.Представление);
			КонецЕсли;
		КонецЦикла;
		Если ИзменяемыеРеквизиты.Количество() > 0 Тогда 
			ИзменяемыеТабличныеЧасти.Вставить(ТабличнаяЧасть.Представление, ИзменяемыеРеквизиты);
		КонецЕсли;
	КонецЦикла;
	
	ИзменяемыеРеквизиты = Новый Массив;
	Для Каждого Реквизит Из РеквизитыОбъекта Цикл
		Если Реквизит.Изменять Тогда
			ИзменяемыеРеквизиты.Добавить(Реквизит.Представление);
		КонецЕсли;
	КонецЦикла;
	
	Пояснение = "";
	Если ИзменяемыеРеквизиты.Количество() > 3 Тогда
		Пояснение = "(" + ИзменяемыеРеквизиты.Количество() +")";
	Иначе
		Для Каждого Реквизит Из ИзменяемыеРеквизиты Цикл
			Если Не ПустаяСтрока(Пояснение) Тогда
				Пояснение = Пояснение + ", ";
			КонецЕсли;
			Пояснение = Пояснение + """" + Реквизит + """";
		КонецЦикла;
	КонецЕсли;
	
	Если ИзменяемыеРеквизиты.Количество() = 1 Тогда
		Пояснение = НСтр("ru='реквизит';en='attribute'") + " " + Пояснение;
	ИначеЕсли ИзменяемыеРеквизиты.Количество() > 1 Тогда
		Пояснение = НСтр("ru='реквизиты';en='attributes'") + " " + Пояснение;
	КонецЕсли;
	
	Если Не ПустаяСтрока(Пояснение) Тогда
		Пояснение = Пояснение + " " + НСтр("ru='в выбранных элементах';en='in the selected items'");
	КонецЕсли;
	
	Для Каждого ТабличнаяЧасть Из ИзменяемыеТабличныеЧасти Цикл
		ИзменяемыеРеквизиты = ТабличнаяЧасть.Значение;
		Если ИзменяемыеРеквизиты.Количество() > 3 Тогда
			Если Не ПустаяСтрока(Пояснение) Тогда
				Пояснение = Пояснение + ", ";
			КонецЕсли;
			Пояснение = Пояснение + ПодставитьПараметрыВСтроку(НСтр("ru='реквизиты (%1)';en='attributes (%1)'"), ИзменяемыеРеквизиты.Количество());
		Иначе
			Для Каждого Реквизит Из ИзменяемыеРеквизиты Цикл
				Если Не ПустаяСтрока(Пояснение) Тогда
					Пояснение = Пояснение + ", ";
				КонецЕсли;
				Если ИзменяемыеРеквизиты.Найти(Реквизит) = 0 Тогда
					Если ИзменяемыеРеквизиты.Количество() = 1 Тогда
						Пояснение = Пояснение + НСтр("ru='реквизит';en='attribute'") + " ";
					ИначеЕсли ИзменяемыеРеквизиты.Количество() > 1 Тогда
						Пояснение =  Пояснение + НСтр("ru='реквизиты';en='attributes'") + " ";
					КонецЕсли;
				КонецЕсли;
				Пояснение = Пояснение + """" + Реквизит + """";
			КонецЦикла;
		КонецЕсли;
		Пояснение = Пояснение + " " 
			+ ПодставитьПараметрыВСтроку(НСтр("ru='в табличной части ""%1""';en='in the ""%1"" tabular section'"), ТабличнаяЧасть.Ключ);
	КонецЦикла;
	
	Если Не ПустаяСтрока(Пояснение) Тогда
		Если ИзменяемыеТабличныеЧасти.Количество() > 0 Тогда
			Если ЕстьОтборПоСтрокам Тогда 
				Пояснение = Пояснение + " " + НСтр("ru='в тех строках выбранных элементов, которые удовлетворяют условиям отбора';en='in the lines of the selected items that satisfy the filter conditions'")
			Иначе
				Пояснение = Пояснение + " " + НСтр("ru='<b>во всех строках</b> выбранных элементов';en='<b>in all lines</b> of the selected items'")
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьВыбранныеОбъекты() Тогда
		Если Не ПустаяСтрока(Пояснение) Тогда
			Пояснение = НСтр("ru = 'Изменить'") + " " + Пояснение + ".";
		Иначе
			Пояснение = НСтр("ru='Выполнить <b>перезапись</b> выбранных элементов.';en='<b>Rewrite</b> the selected items.'");
		КонецЕсли;
	Иначе
		Пояснение = НСтр("ru='Не выбраны элементы, реквизиты которых необходимо изменить.';en='Items which attributes shall be changed are not selected.'");
	КонецЕсли;
	
	Элементы.ПояснениеОНастроенныхИзменениях.Заголовок = ФорматированнаяСтрока(Пояснение);
	
	Если ПустаяСтрока(КодАлгоритма) Тогда
		КодАлгоритма = "// Доступные переменные:
		|// Объект - обрабатываемый объект" + Символы.ПС;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ЕстьВыбранныеОбъекты()
	НастройкиОтбора = НастройкиОтбора();
	НастройкиОтбора.ОграничитьВыборку = Истина;
	Возврат ВыбранныеОбъекты(НастройкиОтбора).Строки.Количество() > 0;
КонецФункции

&НаСервере
Процедура ОбновитьНадписьКоличествоВыбранных()
	
	Если ЕстьНастроенныеОтборы() Тогда
		ТекстСообщенияОбОшибке = "";
		КоличествоВыбранныхОбъектов = КоличествоВыбранныхОбъектов(Истина, , ТекстСообщенияОбОшибке);
		ТекстНадписи = СтрокаСЧисломДляЛюбогоЯзыка(НСтр("ru = ';%1 элемент;;%1 элемента;%1 элементов;%1 элемента'"),
			КоличествоВыбранныхОбъектов);
	Иначе
		ТекстНадписи = НСтр("ru='Все элементы';en='All items'");
	КонецЕсли;
	
	Элементы.НастройкаОтбора.Заголовок = ТекстНадписи;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПодменюРанееИзмененныеРеквизиты()
	
	МестоРазмещенияКоманд = Элементы.РанееИзмененныеРеквизиты;
	
	УдаляемыеЭлементы = Новый Массив;
	Для Каждого Настройка Из МестоРазмещенияКоманд.ПодчиненныеЭлементы Цикл
		Если Настройка.Имя = "Заглушка" Тогда
			Продолжить;
		КонецЕсли;
		УдаляемыеЭлементы.Добавить(Настройка);
	КонецЦикла;
	
	Для Каждого Настройка Из УдаляемыеЭлементы Цикл
		Команды.Удалить(Команды[Настройка.Имя]);
		Элементы.Удалить(Настройка);
	КонецЦикла;
	
	Для Каждого Настройка Из ИсторияОперацийСписок Цикл
		НомерКоманды = ИсторияОперацийСписок.Индекс(Настройка);
		ИмяКоманды = МестоРазмещенияКоманд.Имя + "НастройкаИзменений" + НомерКоманды;
		
		КомандаФормы = Команды.Добавить(ИмяКоманды);
		КомандаФормы.Действие = "Подключаемый_УстановитьНастройку";
		КомандаФормы.Заголовок = Настройка.Представление;
		КомандаФормы.ИзменяетСохраняемыеДанные = Ложь;
		
		НовыйЭлемент = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), МестоРазмещенияКоманд);
		НовыйЭлемент.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
		НовыйЭлемент.ИмяКоманды = ИмяКоманды;
	КонецЦикла;
	
	Элементы.Заглушка.Видимость = ИсторияОперацийСписок.Количество() = 0;
	
	Если Не КонтекстныйВызов Тогда
		ЗаполнитьПодменюСоСпискомАлгоритмов();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьПодменюСоСпискомАлгоритмов()
	МестоРазмещенияКоманд = Элементы.Алгоритмы;
	
	УдаляемыеЭлементы = Новый Массив;
	Для Каждого Настройка Из МестоРазмещенияКоманд.ПодчиненныеЭлементы Цикл
		Если Настройка.Имя = "ЗаглушкаАлгоритмы" Тогда
			Продолжить;
		КонецЕсли;
		УдаляемыеЭлементы.Добавить(Настройка);
	КонецЦикла;
	
	Для Каждого Настройка Из УдаляемыеЭлементы Цикл
		Команды.Удалить(Команды[Настройка.Имя]);
		Элементы.Удалить(Настройка);
	КонецЦикла;
	
	Для Каждого Настройка Из ИсторияАлгоритмовСписок Цикл
		НомерКоманды = ИсторияАлгоритмовСписок.Индекс(Настройка);
		ИмяКоманды = МестоРазмещенияКоманд.Имя + "НастройкаИзменений" + НомерКоманды;
		
		КомандаФормы = Команды.Добавить(ИмяКоманды);
		КомандаФормы.Действие = "Подключаемый_УстановитьНастройку";
		КомандаФормы.Заголовок = Настройка.Представление;
		КомандаФормы.ИзменяетСохраняемыеДанные = Ложь;
		
		НовыйЭлемент = Элементы.Добавить(ИмяКоманды, Тип("КнопкаФормы"), МестоРазмещенияКоманд);
		НовыйЭлемент.Вид = ВидКнопкиФормы.КнопкаКоманднойПанели;
		НовыйЭлемент.ИмяКоманды = ИмяКоманды;
	КонецЦикла;
	
	Элементы.ЗаглушкаАлгоритмы.Видимость = ИсторияАлгоритмовСписок.Количество() = 0;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьНастройкуИзменения(Знач Настройка)
	
	СброситьНастройкиИзменения();
	
	ЕстьЗаблокированные = Ложь;
	
	// Для обеспечения обратной совместимости с настройками, сохраненными в БСП 2.1.
	Если ТипЗнч(Настройка) <> Тип("Структура") Тогда
		Настройка = Новый Структура("Реквизиты,ТабличныеЧасти", Настройка, Новый Структура);
	КонецЕсли;
	
	Для Каждого ИзменяемыйРеквизит Из Настройка.Реквизиты Цикл
		СтруктураПоиска = Новый Структура;
		СтруктураПоиска.Вставить("ВидОперации", ИзменяемыйРеквизит.ВидОперации);
		Если ИзменяемыйРеквизит.ВидОперации = 1 Тогда // реквизит объекта
			СтруктураПоиска.Вставить("Имя", ИзменяемыйРеквизит.ИмяРеквизита);
		Иначе
			СтруктураПоиска.Вставить("Свойство", ИзменяемыйРеквизит.Свойство);
		КонецЕсли;
		
		НайденныеСтроки = РеквизитыОбъекта.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			Если НайденныеСтроки[0].ЗаблокированныйРеквизит  Тогда
				ЕстьЗаблокированные = Истина;
				Продолжить;
			КонецЕсли;
			НайденныеСтроки[0].Значение = ИзменяемыйРеквизит.Значение;
			НайденныеСтроки[0].Изменять = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТабличнаяЧасть Из Настройка.ТабличныеЧасти Цикл
		Для Каждого ИзменяемыйРеквизит Из ТабличнаяЧасть.Значение Цикл
			СтруктураПоиска = Новый Структура;
			СтруктураПоиска.Вставить("Имя", ИзменяемыйРеквизит.Имя);
			Если Элементы.Найти("ТабличнаяЧасть" + ТабличнаяЧасть.Ключ) <> Неопределено Тогда
				НайденныеСтроки = ЭтотОбъект["ТабличнаяЧасть" + ТабличнаяЧасть.Ключ].НайтиСтроки(СтруктураПоиска);
				Если НайденныеСтроки.Количество() > 0 Тогда
					НайденныеСтроки[0].Значение = ИзменяемыйРеквизит.Значение;
					НайденныеСтроки[0].Изменять = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если ЕстьЗаблокированные Тогда
		ПоказатьПредупреждение(, НСтр("ru='Некоторые реквизиты заблокированы для изменения, изменения не установлены.';en='Some details locked for editing, the changes are not installed.'"));
	КонецЕсли;
	
	ОбновитьСчетчикиИзменяемыхРеквизитов();
КонецПроцедуры

&НаСервере
Функция ПараметрыВыбораСтрокой(ПараметрыВыбора)
	Результат = "";
	
	Для Каждого ОписаниеПараметраВыбора Из ПараметрыВыбора Цикл
		ТекущийПВСтрока = "[ПолеОтбора];[ТипСтрока];[ЗначениеСтрока]";
		ТипЗначения = ТипЗнч(ОписаниеПараметраВыбора.Значение);
		
		Если ТипЗначения = Тип("ФиксированныйМассив") Тогда
			СтроковоеПредставлениеТипа = "ФиксированныйМассив";
			ЗначениеСтрока = "";
			
			Для Каждого Элемент Из ОписаниеПараметраВыбора.Значение Цикл
				ЗначениеСтрокаШаблон = "[Тип]*[Значение]";
				ЗначениеСтрокаШаблон = СтрЗаменить(ЗначениеСтрокаШаблон, "[Тип]", СтроковоеПредставлениеТипа(ТипЗнч(Элемент)));
				ЗначениеСтрокаШаблон = СтрЗаменить(ЗначениеСтрокаШаблон, "[Значение]", XMLСтрока(Элемент));
				ЗначениеСтрока = ЗначениеСтрока + ?(ПустаяСтрока(ЗначениеСтрока), "", "#") + ЗначениеСтрокаШаблон;
			КонецЦикла;
		Иначе
			СтроковоеПредставлениеТипа = СтроковоеПредставлениеТипа(ТипЗначения);
			ЗначениеСтрока = XMLСтрока(ОписаниеПараметраВыбора.Значение);
		КонецЕсли;
		
		Если Не ПустаяСтрока(ЗначениеСтрока) Тогда
			ТекущийПВСтрока = СтрЗаменить(ТекущийПВСтрока, "[ПолеОтбора]", ОписаниеПараметраВыбора.Имя);
			ТекущийПВСтрока = СтрЗаменить(ТекущийПВСтрока, "[ТипСтрока]", СтроковоеПредставлениеТипа);
			ТекущийПВСтрока = СтрЗаменить(ТекущийПВСтрока, "[ЗначениеСтрока]", ЗначениеСтрока);
			
			Результат = Результат + ТекущийПВСтрока + Символы.ПС;
		КонецЕсли;
	КонецЦикла;
	
	Результат = Лев(Результат, СтрДлина(Результат)-1);
	Возврат Результат;
КонецФункции

&НаСервере
Функция СвязиПараметровВыбораСтрокой(СвязиПараметровВыбора)
	Результат = "";
	
	Для Каждого ОписаниеСвязиПараметровВыбора Из СвязиПараметровВыбора Цикл
		ТекущаяСПВСтрока = "[ИмяПараметра];[ИмяРеквизита]";
		ТекущаяСПВСтрока = СтрЗаменить(ТекущаяСПВСтрока, "[ИмяПараметра]", ОписаниеСвязиПараметровВыбора.Имя);
		ТекущаяСПВСтрока = СтрЗаменить(ТекущаяСПВСтрока, "[ИмяРеквизита]", ОписаниеСвязиПараметровВыбора.ПутьКДанным);
		Результат = Результат + ТекущаяСПВСтрока + Символы.ПС;
	КонецЦикла;
	
	Результат = Лев(Результат, СтрДлина(Результат)-1);
	Возврат Результат;
КонецФункции

&НаСервере
Функция ПредставлениеСвязейПараметровВыбора(СвязиПараметровВыбора, ОбъектМетаданных)
	Результат = "";
	
	СвязанныеРеквизиты = Новый Массив;
	Для Каждого ОписаниеСвязиПараметровВыбора Из СвязиПараметровВыбора Цикл
		ИмяРеквизита = ОписаниеСвязиПараметровВыбора.ПутьКДанным;
		ПредставлениеТабличнойЧасти = "";
		ВладелецРеквизитов = ОбъектМетаданных;
		ЧастиИмени = СтрРазделить(ИмяРеквизита, ".", Истина);
		Если ЧастиИмени.Количество() = 2 Тогда
			ИмяРеквизита = ЧастиИмени[1];
			ИмяТабличнойЧасти = ЧастиИмени[0];
			ВладелецРеквизитов = ОбъектМетаданных.ТабличныеЧасти.Найти(ИмяТабличнойЧасти);
			Если ВладелецРеквизитов <> Неопределено Тогда
				ПредставлениеТабличнойЧасти = ВладелецРеквизитов.Представление();
			КонецЕсли;
		КонецЕсли;
		Если ВладелецРеквизитов <> Неопределено Тогда
			Реквизит = ВладелецРеквизитов.Реквизиты.Найти(ИмяРеквизита);
			Если Реквизит <> Неопределено Тогда
				ПредставлениеРеквизита = Реквизит.Представление();
				Если Не ПустаяСтрока(ПредставлениеТабличнойЧасти) Тогда
					ПредставлениеРеквизита = ПредставлениеРеквизита + " (" + НСтр("ru='таблица';en='table'") + " " 
						+ ПредставлениеТабличнойЧасти + ")";
				КонецЕсли;
				СвязанныеРеквизиты.Добавить(ПредставлениеРеквизита);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Если СвязанныеРеквизиты.Количество() > 0 Тогда
		ШаблонПредставленияСвязей = НСтр("ru='Зависит от реквизитов: %1.';en='Depends on attributes: %1.'");
		Если СвязанныеРеквизиты.Количество() = 1 Тогда
			ШаблонПредставленияСвязей = НСтр("ru='Зависит от реквизита %1.';en='Depends on attribute %1.'");
		КонецЕсли;
		Результат = ПодставитьПараметрыВСтроку(ШаблонПредставленияСвязей, СтрСоединить(СвязанныеРеквизиты, ", "));
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокТиповОбъектов()
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.ЗаполнитьКоллекциюДоступныхДляИзмененияОбъектов(
		Элементы.ПредставлениеИзменяемыхОбъектов.СписокВыбора, Объект.ПоказыватьСлужебныеРеквизиты);
КонецПроцедуры

&НаКлиенте
Процедура ПояснениеОНастроенныхИзмененияхОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	Если НавигационнаяСсылкаФорматированнойСтроки = "ПерейтиКНастройкеОтбора" Тогда
		СтандартнаяОбработка = Ложь;
		ПерейтиКНастройкеОтбора();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКНастройкеОтбора()
	Если Не ПустаяСтрока(ВидыИзменяемыхОбъектов) Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ПриЗакрытииФормыВыбранныхОбъектов", ЭтотОбъект);
		ОткрытьФорму("Обработка.ГрупповоеИзменениеРеквизитов.Форма.ВыбранныеЭлементы", 
		Новый Структура("ВыбранныеТипы, Настройки", ВидыИзменяемыхОбъектов, КомпоновщикНастроек.Настройки), , , , , ОписаниеОповещения);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Функция ПараметрыКонструктора(Формула)
	Результат = Новый Структура;
	Результат.Вставить("Формула", Формула);
	Результат.Вставить("ОперандыЗаголовок", НСтр("ru='Доступные реквизиты';en='Available attributes'"));
	Результат.Вставить("Операнды", Операнды());
	Результат.Вставить("Расширенный", Ложь);
	Возврат Результат;
КонецФункции

&НаСервере
Функция Операнды()
	ТаблицаОперандов = Новый ТаблицаЗначений;
	ТаблицаОперандов.Колонки.Добавить("Идентификатор");
	ТаблицаОперандов.Колонки.Добавить("Представление");
	
	Для Каждого ОписаниеРеквизита Из РеквизитыОбъекта Цикл
		Операнд = ТаблицаОперандов.Добавить();
		Операнд.Идентификатор = ОписаниеРеквизита.Представление;
	КонецЦикла;
	
	Возврат ПоместитьВоВременноеХранилище(ТаблицаОперандов, УникальныйИдентификатор);
КонецФункции

&НаКлиенте
Функция ЕстьОшибкаВВыражении(Знач Выражение, ТекстОшибки = "")
	
	Выражение = Сред(Выражение, 2);
	
	Для Каждого ОписаниеРеквизита Из РеквизитыОбъекта Цикл
		Выражение = СтрЗаменить(Выражение, "[" + ОписаниеРеквизита.Представление + "]", """1""");
	КонецЦикла;
	
	Попытка
		Возврат Вычислить(Выражение) = Неопределено;
	Исключение
		ТекстОшибки = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
		Возврат Истина;
	КонецПопытки;
	
КонецФункции

&НаСервере
Процедура НайтиФормуРазблокированияРеквизитов()
	ЕстьФормаРазблокированияРеквизитов = Ложь;
	ПолноеИмяФормыРаботыСБлокируемымиРеквизитами = "";
	СписокВидовИзменяемыхОбъектов = СтрРазделить(ВидыИзменяемыхОбъектов, ",", Ложь);
	Если СписокВидовИзменяемыхОбъектов.Количество() = 1 Тогда
		МетаданныеОбъекта = Метаданные.НайтиПоПолномуИмени(СписокВидовИзменяемыхОбъектов[0]);
		Если ЗапретРедактированияВстроен И РеквизитыОбъекта.НайтиСтроки(Новый Структура("ЗаблокированныйРеквизит", Истина)).Количество() > 0 Тогда
			ОбъектМетаданныхФорма = МетаданныеОбъекта.Формы.Найти("РазблокированиеРеквизитов");
			Если ОбъектМетаданныхФорма <> Неопределено Тогда
				ЕстьФормаРазблокированияРеквизитов = Истина;
				ПолноеИмяФормыРаботыСБлокируемымиРеквизитами = ОбъектМетаданныхФорма.ПолноеИмя();
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриРазблокированииРеквизитов(РазблокированныеРеквизиты, ДополнительныеПараметры) Экспорт
	Если РазблокированныеРеквизиты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(РазблокированныеРеквизиты) = Тип("Массив") И РазблокированныеРеквизиты.Количество() > 0 Тогда
		ЗаблокированныеРеквизитыСтроки = РеквизитыОбъекта.НайтиСтроки(Новый Структура("ЗаблокированныйРеквизит", Истина));
		Для Каждого ОписаниеОперацииСтрока Из ЗаблокированныеРеквизитыСтроки Цикл
			Если ОписаниеОперацииСтрока.ЗаблокированныйРеквизит И РазблокированныеРеквизиты.Найти(ОписаниеОперацииСтрока.Имя) <> Неопределено Тогда
				ОписаниеОперацииСтрока.ЗаблокированныйРеквизит = Ложь;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройки()
	СохранитьНастройкиОбработки(
			"",
			Объект.ИзменятьВТранзакции,
			Объект.ПрерыватьПриОшибке,
			ТОНастройкаПорции,
			ТОПроцентОбъектовВПорции,
			ТОЧислоОбъектовВПорции,
			ОбрабатыватьРекурсивно);
КонецПроцедуры


////////////////////////////////////////////////////////////////////////////////
// Процедуры и функции из базовой функциональности для обеспечения автономности.

// Сохраняет настройку в хранилище общих настроек.
// 
// Параметры:
//   Соответствуют методу ХранилищеОбщихНастроекСохранить.Сохранить, 
//   подробнее - см. параметры процедуры ХранилищеСохранить().
// 
&НаСервереБезКонтекста
Процедура ХранилищеОбщихНастроекСохранить(КлючОбъекта, КлючНастроек, Значение,
	ОписаниеНастроек = Неопределено, ИмяПользователя = Неопределено, 
	НужноОбновитьПовторноИспользуемыеЗначения = Ложь)
	
	ХранилищеСохранить(
		ХранилищеОбщихНастроек,
		КлючОбъекта,
		КлючНастроек,
		Значение,
		ОписаниеНастроек,
		ИмяПользователя,
		НужноОбновитьПовторноИспользуемыеЗначения);
	
КонецПроцедуры

// Загружает настройку из хранилища общих настроек.
//
// Параметры:
//   Соответствуют методу ХранилищеОбщихНастроек.Загрузить,
//   подробнее - см. параметры функции ХранилищеЗагрузить().
//
&НаСервереБезКонтекста
Функция ХранилищеОбщихНастроекЗагрузить(КлючОбъекта, КлючНастроек, ЗначениеПоУмолчанию = Неопределено, 
	ОписаниеНастроек = Неопределено, ИмяПользователя = Неопределено)
	
	Возврат ХранилищеЗагрузить(
		ХранилищеОбщихНастроек,
		КлючОбъекта,
		КлючНастроек,
		ЗначениеПоУмолчанию,
		ОписаниеНастроек,
		ИмяПользователя);
	
КонецФункции

&НаСервереБезКонтекста
Процедура ХранилищеСохранить(МенеджерХранилища, КлючОбъекта, КлючНастроек, Значение,
	ОписаниеНастроек, ИмяПользователя, НужноОбновитьПовторноИспользуемыеЗначения)
	
	Если НЕ ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		Возврат;
	КонецЕсли;
	
	МенеджерХранилища.Сохранить(КлючОбъекта, КлючНастроек(КлючНастроек), Значение, ОписаниеНастроек, ИмяПользователя);
	
	Если НужноОбновитьПовторноИспользуемыеЗначения Тогда
		ОбновитьПовторноИспользуемыеЗначения();
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ХранилищеЗагрузить(МенеджерХранилища, КлючОбъекта, КлючНастроек, ЗначениеПоУмолчанию,
	ОписаниеНастроек, ИмяПользователя)
	
	Результат = Неопределено;
	
	Если ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда
		Результат = МенеджерХранилища.Загрузить(КлючОбъекта, КлючНастроек(КлючНастроек), ОписаниеНастроек, ИмяПользователя);
	КонецЕсли;
	
	Если (Результат = Неопределено) И (ЗначениеПоУмолчанию <> Неопределено) Тогда
		Результат = ЗначениеПоУмолчанию;
	КонецЕсли;

	Возврат Результат;
	
КонецФункции

// Возвращает строку ключа настроек, не превышающую допустимую длину.
// Проверяет длину строки на входе и, в случае превышения 128, преобразует ее конец по алгоритму MD5 в короткий
// вариант, в результате чего строка становится длиной 128 символов.
// Если исходная строка менее 128 символов, она возвращается в неизменном виде.
//
// Параметры:
//  Строка - Строка - строка произвольной длины.
//
&НаСервереБезКонтекста
Функция КлючНастроек(Знач Строка)
	Результат = Строка;
	Если СтрДлина(Строка) > 128 Тогда // Ключ более 128 символов вызовет исключение при обращении к хранилищу настроек.
		Результат = Лев(Строка, 96);
		ХешированиеДанных = Новый ХешированиеДанных(ХешФункция.MD5);
		ХешированиеДанных.Добавить(Сред(Строка, 97));
		Результат = Результат + СтрЗаменить(ХешированиеДанных.ХешСумма, " ", "");
	КонецЕсли;
	Возврат Результат;
КонецФункции

// Возвращает менеджер объекта по полному имени объекта метаданных.
//
// Не обрабатываются точки маршрутов бизнес-процессов.
//
// Параметры:
//  ПолноеИмя    - Строка, полное имя объекта метаданных,
//                 например, "Справочник.Организации".
//
// Возвращаемое значение:
//  СправочникМенеджер, ДокументМенеджер, ...
// 
&НаСервереБезКонтекста
Функция МенеджерОбъектаПоПолномуИмени(ПолноеИмя)
	Перем КлассОМ, ИмяОМ, Менеджер;
	
	ЧастиИмени = СтрРазделить(ПолноеИмя, ".");
	
	Если ЧастиИмени.Количество() = 2 Тогда
		КлассОМ = ЧастиИмени[0];
		ИмяОМ  = ЧастиИмени[1];
	КонецЕсли;
	
	Если      ВРег(КлассОМ) = "ПЛАНОБМЕНА" Тогда
		Менеджер = ПланыОбмена;
		
	ИначеЕсли ВРег(КлассОМ) = "СПРАВОЧНИК" Тогда
		Менеджер = Справочники;
		
	ИначеЕсли ВРег(КлассОМ) = "ДОКУМЕНТ" Тогда
		Менеджер = Документы;
		
	ИначеЕсли ВРег(КлассОМ) = "ЖУРНАЛДОКУМЕНТОВ" Тогда
		Менеджер = ЖурналыДокументов;
		
	ИначеЕсли ВРег(КлассОМ) = "ПЕРЕЧИСЛЕНИЕ" Тогда
		Менеджер = Перечисления;
		
	ИначеЕсли ВРег(КлассОМ) = "ОТЧЕТ" Тогда
		Менеджер = Отчеты;
		
	ИначеЕсли ВРег(КлассОМ) = "ОБРАБОТКА" Тогда
		Менеджер = Обработки;
		
	ИначеЕсли ВРег(КлассОМ) = "ПЛАНВИДОВХАРАКТЕРИСТИК" Тогда
		Менеджер = ПланыВидовХарактеристик;
		
	ИначеЕсли ВРег(КлассОМ) = "ПЛАНСЧЕТОВ" Тогда
		Менеджер = ПланыСчетов;
		
	ИначеЕсли ВРег(КлассОМ) = "ПЛАНВИДОВРАСЧЕТА" Тогда
		Менеджер = ПланыВидовРасчета;
		
	ИначеЕсли ВРег(КлассОМ) = "РЕГИСТРСВЕДЕНИЙ" Тогда
		Менеджер = РегистрыСведений;
		
	ИначеЕсли ВРег(КлассОМ) = "РЕГИСТРНАКОПЛЕНИЯ" Тогда
		Менеджер = РегистрыНакопления;
		
	ИначеЕсли ВРег(КлассОМ) = "РЕГИСТРБУХГАЛТЕРИИ" Тогда
		Менеджер = РегистрыБухгалтерии;
		
	ИначеЕсли ВРег(КлассОМ) = "РЕГИСТРРАСЧЕТА" Тогда
		Если ЧастиИмени.Количество() = 2 Тогда
			// Регистр расчета
			Менеджер = РегистрыРасчета;
		Иначе
			КлассПодчиненногоОМ = ЧастиИмени[2];
			Если ВРег(КлассПодчиненногоОМ) = "ПЕРЕРАСЧЕТ" Тогда
				// Перерасчет
				Менеджер = РегистрыРасчета[ИмяОМ].Перерасчеты;
			Иначе
				ВызватьИсключение ПодставитьПараметрыВСтроку(НСтр("ru='Неизвестный тип объекта метаданных ""%1""';en='Unknown metadata object type ""%1""'"), ПолноеИмя);
			КонецЕсли;
		КонецЕсли;
		
	ИначеЕсли ВРег(КлассОМ) = "БИЗНЕСПРОЦЕСС" Тогда
		Менеджер = БизнесПроцессы;
		
	ИначеЕсли ВРег(КлассОМ) = "ЗАДАЧА" Тогда
		Менеджер = Задачи;
		
	ИначеЕсли ВРег(КлассОМ) = "КОНСТАНТА" Тогда
		Менеджер = Константы;
		
	ИначеЕсли ВРег(КлассОМ) = "ПОСЛЕДОВАТЕЛЬНОСТЬ" Тогда
		Менеджер = Последовательности;
	КонецЕсли;
	
	Если Менеджер <> Неопределено Тогда
		Попытка
			Возврат Менеджер[ИмяОМ];
		Исключение
			Менеджер = Неопределено;
		КонецПопытки;
	КонецЕсли;
	
	ВызватьИсключение ПодставитьПараметрыВСтроку(НСтр("ru='Неизвестный тип объекта метаданных ""%1""';en='Unknown metadata object type ""%1""'"), ПолноеИмя);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция ПодставитьПараметрыВСтроку(Знач СтрокаПодстановки,
	Знач Параметр1, Знач Параметр2 = Неопределено, Знач Параметр3 = Неопределено)
	
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%1", Параметр1);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%2", Параметр2);
	СтрокаПодстановки = СтрЗаменить(СтрокаПодстановки, "%3", Параметр3);
	
	Возврат СтрокаПодстановки;
КонецФункции

// Функция ВидОбъектаПоСсылке возвращает имя вида объектов метаданных
// по ссылке на объект.
//
// Не обрабатываются точки маршрутов бизнес-процессов.
//
// Параметры:
//  Ссылка       - ссылка на объект, - элемент справочника, документ, ...
//
// Возвращаемое значение:
//  Строка       - имя вида объектов метаданных, например, "Справочник", "Документ" ...
// 
&НаСервереБезКонтекста
Функция ВидОбъектаПоСсылке(Ссылка)
	
	Возврат ВидОбъектаПоТипу(ТипЗнч(Ссылка));
	
КонецФункции 

// Функция возвращает имя вида объектов метаданных по типу объекта.
//
// Не обрабатываются точки маршрутов бизнес-процессов.
//
// Параметры:
//  Тип       - Тип прикладного объекта, определенный в конфигурации.
//
// Возвращаемое значение:
//  Строка       - имя вида объектов метаданных, например, "Справочник", "Документ" ...
// 
&НаСервереБезКонтекста
Функция ВидОбъектаПоТипу(Тип)
	
	Если Справочники.ТипВсеСсылки().СодержитТип(Тип) Тогда
		Возврат "Справочник";
	
	ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(Тип) Тогда
		Возврат "Документ";
	
	ИначеЕсли БизнесПроцессы.ТипВсеСсылки().СодержитТип(Тип) Тогда
		Возврат "БизнесПроцесс";
	
	ИначеЕсли ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(Тип) Тогда
		Возврат "ПланВидовХарактеристик";
	
	ИначеЕсли ПланыСчетов.ТипВсеСсылки().СодержитТип(Тип) Тогда
		Возврат "ПланСчетов";
	
	ИначеЕсли ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(Тип) Тогда
		Возврат "ПланВидовРасчета";
	
	ИначеЕсли Задачи.ТипВсеСсылки().СодержитТип(Тип) Тогда
		Возврат "Задача";
	
	ИначеЕсли ПланыОбмена.ТипВсеСсылки().СодержитТип(Тип) Тогда
		Возврат "ПланОбмена";
	
	ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(Тип) Тогда
		Возврат "Перечисление";
	
	Иначе
		ВызватьИсключение ПодставитьПараметрыВСтроку(НСтр("ru='Неверный тип значения параметра (%1)';en='Incorrect type of parameter value (%1)'"), Строка(Тип));
	
	КонецЕсли;
	
КонецФункции 

// Проверяет является ли объект группой элементов.
//
// Параметры:
//  Объект       - Объект, Ссылка, ДанныеФормыСтруктура по типу Объект.
//
// Возвращаемое значение:
//  Булево.
//
&НаСервереБезКонтекста
Функция ОбъектЯвляетсяГруппой(Объект)
	
	Если ЗначениеСсылочногоТипа(Объект) Тогда
		Ссылка = Объект;
	Иначе
		Ссылка = Объект.Ссылка;
	КонецЕсли;
	
	МетаданныеОбъекта = Ссылка.Метаданные();
	
	Если ЭтоСправочник(МетаданныеОбъекта) Тогда
		
		Если НЕ МетаданныеОбъекта.Иерархический
		 ИЛИ МетаданныеОбъекта.ВидИерархии
		     <> Метаданные.СвойстваОбъектов.ВидИерархии.ИерархияГруппИЭлементов Тогда
			
			Возврат Ложь;
		КонецЕсли;
		
	ИначеЕсли НЕ ЭтоПланВидовХарактеристик(МетаданныеОбъекта) Тогда
		Возврат Ложь;
		
	ИначеЕсли НЕ МетаданныеОбъекта.Иерархический Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Ссылка <> Объект Тогда
		Возврат Объект.ЭтоГруппа;
	КонецЕсли;
	
	Возврат ЗначениеРеквизитаОбъекта(Ссылка, "ЭтоГруппа");
	
КонецФункции

// Определяет принадлежность объекта метаданных к общему типу "Справочник".
//
// Параметры:
//  ОбъектМетаданных - объект метаданных, для которого необходимо определить принадлежность к заданному типу.
// 
//  Возвращаемое значение:
//   Булево.
//
&НаСервереБезКонтекста
Функция ЭтоСправочник(ОбъектМетаданных)
	
	Возврат ИмяБазовогоТипаПоОбъектуМетаданных(ОбъектМетаданных) = ИмяТипаСправочники();
	
КонецФункции

// Проверка того, что тип имеет ссылочный тип данных.
//
&НаСервереБезКонтекста
Функция ЭтоСсылка(Тип)
	
	Возврат Тип <> Тип("Неопределено") 
		И (Справочники.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ Документы.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ Перечисления.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ ПланыСчетов.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ БизнесПроцессы.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ БизнесПроцессы.ТипВсеСсылкиТочекМаршрутаБизнесПроцессов().СодержитТип(Тип)
		ИЛИ Задачи.ТипВсеСсылки().СодержитТип(Тип)
		ИЛИ ПланыОбмена.ТипВсеСсылки().СодержитТип(Тип));
	
КонецФункции

// Проверить, что значение имеет ссылочный тип данных.
//
// Параметры:
//  Значение       - ссылка на объект, - элемент справочника, документ, ...
//
// Возвращаемое значение:
//  Булево       - Истина, если тип значения ссылочный.
//
&НаСервереБезКонтекста
Функция ЗначениеСсылочногоТипа(Значение)
	
	Если Значение = Неопределено Тогда
		Возврат Ложь;
	КонецЕсли;
	
	Если Справочники.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Документы.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Перечисления.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ПланыСчетов.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если БизнесПроцессы.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если БизнесПроцессы.ТипВсеСсылкиТочекМаршрутаБизнесПроцессов().СодержитТип(ТипЗнч(Значение)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если Задачи.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Если ПланыОбмена.ТипВсеСсылки().СодержитТип(ТипЗнч(Значение)) Тогда
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Определяет принадлежность объекта метаданных к общему типу "План видов характеристик".
//
// Параметры:
//  ОбъектМетаданных - объект метаданных, для которого необходимо определить принадлежность к заданному типу.
// 
//  Возвращаемое значение:
//   Булево.
//
&НаСервереБезКонтекста
Функция ЭтоПланВидовХарактеристик(ОбъектМетаданных)
	
	Возврат ИмяБазовогоТипаПоОбъектуМетаданных(ОбъектМетаданных) = ИмяТипаПланыВидовХарактеристик();
	
КонецФункции

// Возвращает имя базового типа по переданному значению объекта метаданных.
//
// Параметры:
//  ОбъектМетаданных - объект метаданных, по которому необходимо определить базовый тип.
// 
// Возвращаемое значение:
//  Строка - имя базового типа по переданному значению объекта метаданных.
//
&НаСервереБезКонтекста
Функция ИмяБазовогоТипаПоОбъектуМетаданных(ОбъектМетаданных)
	
	Если Метаданные.Документы.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаДокументы();
		
	ИначеЕсли Метаданные.Справочники.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаСправочники();
		
	ИначеЕсли Метаданные.Перечисления.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаПеречисления();
		
	ИначеЕсли Метаданные.РегистрыСведений.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаРегистрыСведений();
		
	ИначеЕсли Метаданные.РегистрыНакопления.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаРегистрыНакопления();
		
	ИначеЕсли Метаданные.РегистрыБухгалтерии.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаРегистрыБухгалтерии();
		
	ИначеЕсли Метаданные.РегистрыРасчета.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаРегистрыРасчета();
		
	ИначеЕсли Метаданные.ПланыОбмена.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаПланыОбмена();
		
	ИначеЕсли Метаданные.ПланыВидовХарактеристик.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаПланыВидовХарактеристик();
		
	ИначеЕсли Метаданные.БизнесПроцессы.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаБизнесПроцессы();
		
	ИначеЕсли Метаданные.Задачи.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаЗадачи();
		
	ИначеЕсли Метаданные.ПланыСчетов.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаПланыСчетов();
		
	ИначеЕсли Метаданные.ПланыВидовРасчета.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаПланыВидовРасчета();
		
	ИначеЕсли Метаданные.Константы.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаКонстанты();
		
	ИначеЕсли Метаданные.ЖурналыДокументов.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаЖурналыДокументов();
		
	ИначеЕсли Метаданные.Последовательности.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаПоследовательности();
		
	ИначеЕсли Метаданные.РегламентныеЗадания.Содержит(ОбъектМетаданных) Тогда
		Возврат ИмяТипаРегламентныеЗадания();
		
	Иначе
		
		Возврат "";
		
	КонецЕсли;
	
КонецФункции

// Возвращает значение для идентификации общего типа "Регистры сведений".
//
// Возвращаемое значение:
//  Строка.
//
&НаСервереБезКонтекста
Функция ИмяТипаРегистрыСведений()
	
	Возврат "РегистрыСведений";
	
КонецФункции

// Возвращает значение для идентификации общего типа "Регистры накопления".
//
// Возвращаемое значение:
//  Строка.
//
&НаСервереБезКонтекста
Функция ИмяТипаРегистрыНакопления()
	
	Возврат "РегистрыНакопления";
	
КонецФункции

// Возвращает значение для идентификации общего типа "Регистры бухгалтерии".
//
// Возвращаемое значение:
//  Строка.
//
&НаСервереБезКонтекста
Функция ИмяТипаРегистрыБухгалтерии()
	
	Возврат "РегистрыБухгалтерии";
	
КонецФункции

// Возвращает значение для идентификации общего типа "Регистры расчета".
//
// Возвращаемое значение:
//  Строка.
//
&НаСервереБезКонтекста
Функция ИмяТипаРегистрыРасчета()
	
	Возврат "РегистрыРасчета";
	
КонецФункции

// Возвращает значение для идентификации общего типа "Документы".
//
// Возвращаемое значение:
//  Строка.
//
&НаСервереБезКонтекста
Функция ИмяТипаДокументы()
	
	Возврат "Документы";
	
КонецФункции

// Возвращает значение для идентификации общего типа "Справочники".
//
// Возвращаемое значение:
//  Строка.
//
&НаСервереБезКонтекста
Функция ИмяТипаСправочники()
	
	Возврат "Справочники";
	
КонецФункции

// Возвращает значение для идентификации общего типа "Перечисления".
//
// Возвращаемое значение:
//  Строка.
//
&НаСервереБезКонтекста
Функция ИмяТипаПеречисления()
	
	Возврат "Перечисления";
	
КонецФункции

// Возвращает значение для идентификации общего типа "ПланыОбмена".
//
// Возвращаемое значение:
//  Строка.
//
&НаСервереБезКонтекста
Функция ИмяТипаПланыОбмена()
	
	Возврат "ПланыОбмена";
	
КонецФункции

// Возвращает значение для идентификации общего типа "Планы видов характеристик".
//
// Возвращаемое значение:
//  Строка.
//
&НаСервереБезКонтекста
Функция ИмяТипаПланыВидовХарактеристик()
	
	Возврат "ПланыВидовХарактеристик";
	
КонецФункции

// Возвращает значение для идентификации общего типа "Бизнес-процессы".
//
// Возвращаемое значение:
//  Строка.
//
&НаСервереБезКонтекста
Функция ИмяТипаБизнесПроцессы()
	
	Возврат "БизнесПроцессы";
	
КонецФункции

// Возвращает значение для идентификации общего типа "Задачи".
//
// Возвращаемое значение:
//  Строка.
//
&НаСервереБезКонтекста
Функция ИмяТипаЗадачи()
	
	Возврат "Задачи";
	
КонецФункции

// Возвращает значение для идентификации общего типа "Планы счетов".
//
// Возвращаемое значение:
//  Строка.
//
&НаСервереБезКонтекста
Функция ИмяТипаПланыСчетов()
	
	Возврат "ПланыСчетов";
	
КонецФункции

// Возвращает значение для идентификации общего типа "Планы видов расчета".
//
// Возвращаемое значение:
//  Строка.
//
&НаСервереБезКонтекста
Функция ИмяТипаПланыВидовРасчета()
	
	Возврат "ПланыВидовРасчета";
	
КонецФункции

// Возвращает значение для идентификации общего типа "Константы".
//
// Возвращаемое значение:
//  Строка.
//
&НаСервереБезКонтекста
Функция ИмяТипаКонстанты()
	
	Возврат "Константы";
	
КонецФункции

// Возвращает значение для идентификации общего типа "Журналы документов".
//
// Возвращаемое значение:
//  Строка.
//
&НаСервереБезКонтекста
Функция ИмяТипаЖурналыДокументов()
	
	Возврат "ЖурналыДокументов";
	
КонецФункции

// Возвращает значение для идентификации общего типа "Последовательности".
//
// Возвращаемое значение:
//  Строка.
//
&НаСервереБезКонтекста
Функция ИмяТипаПоследовательности()
	
	Возврат "Последовательности";
	
КонецФункции

// Возвращает значение для идентификации общего типа "РегламентныеЗадания".
//
// Возвращаемое значение:
//  Строка.
//
&НаСервереБезКонтекста
Функция ИмяТипаРегламентныеЗадания()
	
	Возврат "РегламентныеЗадания";
	
КонецФункции

// Возвращает структуру, содержащую значения реквизитов прочитанные из информационной базы
// по ссылке на объект.
// 
//  Если доступа к одному из реквизитов нет, возникнет исключение прав доступа.
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
// 
// Параметры:
//  Ссылка    - Ссылка на объект - элемент справочника, документ, ...
//
//  Реквизиты - Строка - имена реквизитов, перечисленные через запятую, в формате
//              требований к свойствам структуры.
//              Например, "Код, Наименование, Родитель".
//            - Структура, ФиксированнаяСтруктура - в качестве ключа передается
//              псевдоним поля для возвращаемой структуры с результатом, а в качестве
//              значения (опционально) фактическое имя поля в таблице.
//              Если значение не определено, то имя поля берется из ключа.
//            - Массив, ФиксированныйМассив - имена реквизитов в формате требований
//              к свойствам структуры.
//
// Возвращаемое значение:
//  Структура - содержит имена (ключи) и значения затребованных реквизитов.
//              Если строка затребованных реквизитов пуста, то возвращается пустая структура.
//
&НаСервереБезКонтекста
Функция ЗначенияРеквизитовОбъекта(Ссылка, Знач Реквизиты)
	
	Если ТипЗнч(Реквизиты) = Тип("Строка") Тогда
		Если ПустаяСтрока(Реквизиты) Тогда
			Возврат Новый Структура;
		КонецЕсли;
		Реквизиты = СтрРазделить(Реквизиты, ",", Ложь);
	КонецЕсли;
	
	СтруктураРеквизитов = Новый Структура;
	Если ТипЗнч(Реквизиты) = Тип("Структура") Или ТипЗнч(Реквизиты) = Тип("ФиксированнаяСтруктура") Тогда
		СтруктураРеквизитов = Реквизиты;
	ИначеЕсли ТипЗнч(Реквизиты) = Тип("Массив") Или ТипЗнч(Реквизиты) = Тип("ФиксированныйМассив") Тогда
		Для Каждого Реквизит Из Реквизиты Цикл
			СтруктураРеквизитов.Вставить(СтрЗаменить(Реквизит, ".", ""), Реквизит);
		КонецЦикла;
	Иначе
		ВызватьИсключение ПодставитьПараметрыВСтроку(НСтр("ru='Неверный тип второго параметра Реквизиты: %1';en='Incorrect type of the second parameter Attributes: %1'"), Строка(ТипЗнч(Реквизиты)));
	КонецЕсли;
	
	ТекстПолей = "";
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		ИмяПоля   = ?(ЗначениеЗаполнено(КлючИЗначение.Значение),
		              СокрЛП(КлючИЗначение.Значение),
		              СокрЛП(КлючИЗначение.Ключ));
		
		Псевдоним = СокрЛП(КлючИЗначение.Ключ);
		
		ТекстПолей  = ТекстПолей + ?(ПустаяСтрока(ТекстПолей), "", ",") + "
		|	" + ИмяПоля + " КАК " + Псевдоним;
	КонецЦикла;
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Запрос.Текст =
	"ВЫБРАТЬ
	|" + ТекстПолей + "
	|ИЗ
	|	" + Ссылка.Метаданные().ПолноеИмя() + " КАК ПсевдонимЗаданнойТаблицы
	|ГДЕ
	|	ПсевдонимЗаданнойТаблицы.Ссылка = &Ссылка
	|";
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Результат = Новый Структура;
	Для Каждого КлючИЗначение Из СтруктураРеквизитов Цикл
		Результат.Вставить(КлючИЗначение.Ключ);
	КонецЦикла;
	ЗаполнитьЗначенияСвойств(Результат, Выборка);
	
	Возврат Результат;
	
КонецФункции

// Возвращает значение реквизита, прочитанного из информационной базы по ссылке на объект.
// 
//  Если доступа к реквизиту нет, возникнет исключение прав доступа.
//  Если необходимо зачитать реквизит независимо от прав текущего пользователя,
//  то следует использовать предварительный переход в привилегированный режим.
// 
// Параметры:
//  Ссылка       - ссылка на объект, - элемент справочника, документ, ...
//  ИмяРеквизита - Строка, например, "Код".
// 
// Возвращаемое значение:
//  Произвольный    - зависит от типа значения прочитанного реквизита.
// 
&НаСервереБезКонтекста
Функция ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита)
	
	Результат = ЗначенияРеквизитовОбъекта(Ссылка, ИмяРеквизита);
	Возврат Результат[СтрЗаменить(ИмяРеквизита, ".", "")];
	
КонецФункции 

// Возвращает ссылку на общий модуль по имени.
//
// Параметры:
//  Имя          - Строка - имя общего модуля, например:
//                 "ОбщегоНазначения",
//                 "ОбщегоНазначенияКлиент".
//
// Возвращаемое значение:
//  ОбщийМодуль.
//
&НаКлиентеНаСервереБезКонтекста
Функция ОбщийМодуль(Имя)
	
#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда
	Если Метаданные.ОбщиеМодули.Найти(Имя) <> Неопределено Тогда
		Модуль = Вычислить(Имя);
	Иначе
		Модуль = Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(Модуль) <> Тип("ОбщийМодуль") Тогда
		ВызватьИсключение ПодставитьПараметрыВСтроку(НСтр("ru='Общий модуль ""%1"" не найден.';en='Common module ""%1"" was not found.'"), Имя);
	КонецЕсли;
#Иначе
	Модуль = Вычислить(Имя);
	Если ТипЗнч(Модуль) <> Тип("ОбщийМодуль") Тогда
		ВызватьИсключение ПодставитьПараметрыВСтроку(НСтр("ru='Общий модуль ""%1"" не найден.';en='Common module ""%1"" was not found.'"), Имя);
	КонецЕсли;
#КонецЕсли
	
	Возврат Модуль;
	
КонецФункции

// Возвращает Истина, если подсистема существует.
//
// Параметры:
//  ПолноеИмяПодсистемы - Строка. Полное имя объекта метаданных подсистема без слов "Подсистема.".
//                        Например: "СтандартныеПодсистемы.БазоваяФункциональность".
//
// Пример вызова необязательной подсистемы:
//
//  Если ОбщегоНазначения.ПодсистемаСуществует("СтандартныеПодсистемы.УправлениеДоступом") Тогда
//  	МодульУправлениеДоступом = ОбщегоНазначения.ОбщийМодуль("УправлениеДоступом");
//  	МодульУправлениеДоступом.<Имя метода>();
//  КонецЕсли;
//
// Возвращаемое значение:
//  Булево.
//
&НаСервере
Функция ПодсистемаСуществует(ПолноеИмяПодсистемы)
	
	Если Не ВерсияБСПСоответствуетТребованиям() Тогда
		Возврат Ложь;
	КонецЕсли;
	
	ИменаПодсистем = ИменаПодсистем();
	Возврат ИменаПодсистем.Получить(ПолноеИмяПодсистемы) <> Неопределено;
	
КонецФункции

// Возвращает соответствие имен подсистем и значения Истина;
&НаСервереБезКонтекста
Функция ИменаПодсистем()
	
	Возврат Новый ФиксированноеСоответствие(ИменаПодчиненныхПодсистем(Метаданные));
	
КонецФункции

&НаСервереБезКонтекста
Функция ИменаПодчиненныхПодсистем(РодительскаяПодсистема)
	
	Имена = Новый Соответствие;
	
	Для Каждого ТекущаяПодсистема Из РодительскаяПодсистема.Подсистемы Цикл
		
		Имена.Вставить(ТекущаяПодсистема.Имя, Истина);
		ИменаПодчиненных = ИменаПодчиненныхПодсистем(ТекущаяПодсистема);
		
		Для каждого ИмяПодчиненной Из ИменаПодчиненных Цикл
			Имена.Вставить(ТекущаяПодсистема.Имя + "." + ИмяПодчиненной.Ключ, Истина);
		КонецЦикла;
	КонецЦикла;
	
	Возврат Имена;
	
КонецФункции

// Возвращает строковое представление типа. 
// Для ссылочных типов возвращает в формате "СправочникСсылка.ИмяОбъекта" или "ДокументСсылка.ИмяОбъекта".
// Для остальных типов приводит тип к строке, например "Число".
//
&НаСервереБезКонтекста
Функция СтроковоеПредставлениеТипа(Тип)
	
	Представление = "";
	
	Если ЭтоСсылка(Тип) Тогда
	
		ПолноеИмя = Метаданные.НайтиПоТипу(Тип).ПолноеИмя();
		ИмяОбъекта = СтрРазделить(ПолноеИмя, ".")[1];
		
		Если Справочники.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Представление = "СправочникСсылка";
		
		ИначеЕсли Документы.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Представление = "ДокументСсылка";
		
		ИначеЕсли БизнесПроцессы.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Представление = "БизнесПроцессСсылка";
		
		ИначеЕсли ПланыВидовХарактеристик.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Представление = "ПланВидовХарактеристикСсылка";
		
		ИначеЕсли ПланыСчетов.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Представление = "ПланСчетовСсылка";
		
		ИначеЕсли ПланыВидовРасчета.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Представление = "ПланВидовРасчетаСсылка";
		
		ИначеЕсли Задачи.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Представление = "ЗадачаСсылка";
		
		ИначеЕсли ПланыОбмена.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Представление = "ПланОбменаСсылка";
		
		ИначеЕсли Перечисления.ТипВсеСсылки().СодержитТип(Тип) Тогда
			Представление = "ПеречислениеСсылка";
		
		КонецЕсли;
		
		Результат = ?(Представление = "", Представление, Представление + "." + ИмяОбъекта);
		
	ИначеЕсли Тип = Тип("Неопределено") Тогда
		
		Результат = "Неопределено";
		
	Иначе
		
		Результат = Строка(Тип);
		
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

//	Преобразует таблицу значений в массив.
//	Может использоваться для передачи на клиента данных, полученных
//	на сервере в виде таблицы значений в том случае, если таблица
//	значений содержит только такие значения, которые могут
//  быть переданы на клиента.
//
//	Полученный массив содержит структуры, каждая из которых повторяет
//	структуру колонок таблицы значений.
//
//	Не рекомендуется использовать для преобразования таблиц значений
//	с большим количеством строк.
//
//	Параметры: ТаблицаЗначений
//	Возвращаемое значение: Массив.
//
&НаСервереБезКонтекста
Функция ТаблицаЗначенийВМассив(ТаблицаЗначений)
	
	Массив = Новый Массив();
	СтруктураСтрокой = "";
	НужнаЗапятая = Ложь;
	Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
		Если НужнаЗапятая Тогда
			СтруктураСтрокой = СтруктураСтрокой + ",";
		КонецЕсли;
		СтруктураСтрокой = СтруктураСтрокой + Колонка.Имя;
		НужнаЗапятая = Истина;
	КонецЦикла;
	Для Каждого Строка Из ТаблицаЗначений Цикл
		НоваяСтрока = Новый Структура(СтруктураСтрокой);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Строка);
		Массив.Добавить(НоваяСтрока);
	КонецЦикла;
	Возврат Массив;

КонецФункции

// Форматирует строку в соответствии с заданным шаблоном.
// Возможные значения тегов выделения:
//	<b> Строка </b> - выделяет строку жирным шрифтом.
//	<a href = "Ссылка"> Строка </a>
//
// Пример:
//	Минимальная версия программы <b>1.1</b>. <a href = "Обновление">Обновите</a> программу.
//
// Возвращаемое значение:
//	ФорматированнаяСтрока
&НаСервереБезКонтекста
Функция ФорматированнаяСтрока(Знач Строка)
	
	СтрокиСВыделением = Новый СписокЗначений;
	Пока СтрНайти(Строка, "<b>") <> 0 Цикл
		НачалоВыделения = СтрНайти(Строка, "<b>");
		СтрокаДоОткрывающегоТега = Лев(Строка, НачалоВыделения - 1);
		СтрокиСВыделением.Добавить(СтрокаДоОткрывающегоТега);
		СтрокаПослеОткрывающегоТега = Сред(Строка, НачалоВыделения + 3);
		КонецВыделения = СтрНайти(СтрокаПослеОткрывающегоТега, "</b>");
		ВыделенныйФрагмент = Лев(СтрокаПослеОткрывающегоТега, КонецВыделения - 1);
		СтрокиСВыделением.Добавить(ВыделенныйФрагмент,, Истина);
		СтрокаПослеВыделения = Сред(СтрокаПослеОткрывающегоТега, КонецВыделения + 4);
		Строка = СтрокаПослеВыделения;
	КонецЦикла;
	СтрокиСВыделением.Добавить(Строка);
	
	СтрокиСоСсылками = Новый СписокЗначений;
	Для Каждого ЧастьСтроки Из СтрокиСВыделением Цикл
		
		Строка = ЧастьСтроки.Значение;
		
		Если ЧастьСтроки.Пометка Тогда
			СтрокиСоСсылками.Добавить(Строка,, Истина);
			Продолжить;
		КонецЕсли;
		
		НачалоВыделения = СтрНайти(Строка, "<a href = ");
		Пока НачалоВыделения <> 0 Цикл
			СтрокаДоОткрывающегоТега = Лев(Строка, НачалоВыделения - 1);
			СтрокиСоСсылками.Добавить(СтрокаДоОткрывающегоТега, );
			
			СтрокаПослеОткрывающегоТега = Сред(Строка, НачалоВыделения + 9);
			ЗакрывающийТег = СтрНайти(СтрокаПослеОткрывающегоТега, ">");
			
			Ссылка = СокрЛП(Лев(СтрокаПослеОткрывающегоТега, ЗакрывающийТег - 2));
			Если СтрНачинаетсяС(Ссылка, """") Тогда
				Ссылка = Сред(Ссылка, 2, СтрДлина(Ссылка) - 1);
			КонецЕсли;
			Если СтрЗаканчиваетсяНа(Ссылка, """") Тогда
				Ссылка = Сред(Ссылка, 1, СтрДлина(Ссылка) - 1);
			КонецЕсли;
			
			СтрокаПослеСсылки = Сред(СтрокаПослеОткрывающегоТега, ЗакрывающийТег + 1);
			КонецВыделения = СтрНайти(СтрокаПослеСсылки, "</a>");
			ТекстСсылки = Лев(СтрокаПослеСсылки, КонецВыделения - 1);
			СтрокиСоСсылками.Добавить(ТекстСсылки, Ссылка);
			
			СтрокаПослеВыделения = Сред(СтрокаПослеСсылки, КонецВыделения + 4);
			Строка = СтрокаПослеВыделения;
			
			НачалоВыделения = СтрНайти(Строка, "<a href = ");
		КонецЦикла;
		СтрокиСоСсылками.Добавить(Строка);
		
	КонецЦикла;
	
	МассивСтроки = Новый Массив;
	Для Каждого ЧастьСтроки Из СтрокиСоСсылками Цикл
		
		Если ЧастьСтроки.Пометка Тогда
			МассивСтроки.Добавить(Новый ФорматированнаяСтрока(ЧастьСтроки.Значение, Новый Шрифт(,,Истина)));
		ИначеЕсли Не ПустаяСтрока(ЧастьСтроки.Представление) Тогда
			МассивСтроки.Добавить(Новый ФорматированнаяСтрока(ЧастьСтроки.Значение,,,, ЧастьСтроки.Представление));
		Иначе
			МассивСтроки.Добавить(ЧастьСтроки.Значение);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Новый ФорматированнаяСтрока(МассивСтроки);
	
КонецФункции

// Формирует представление числа для определенного языка и параметров числа.
//
// Параметры:
//  Шаблон          - Строка - Строка, содержит перечисленные через точку с запятой 6 форм строки
//                             для каждой категории числительного: 
//                             - %1 обозначает позицию числа;
//  Число           - Число - Число, которое будет подставлено в строку вместо параметра "%1".
//  Вид             - ВидЧисловогоЗначения - Определяет вид числового значения, для которого формируется представление. 
//                             - Количественное (по умолчанию) или Порядковое.
//  ФорматнаяСтрока - Строка - Строка параметров форматирования. См. аналогичный параметр в СтрокаСЧислом. 
//
// Возвращаемое значение:
//  Строка - Представление строки числа в требуемой форме.
//
// Пример:
//  
//  Строка = СтроковыеФункцииКлиентСервер.СтрокаСЧисломДляЛюбогоЯзыка(
//		НСтр("ru=';остался %1 день;;осталось %1 дня;осталось %1 дней;осталось %1 дня';
//		     |en=';left %1 day;;;;left %1 days'"), 
//		0.05,, "ЧДЦ=1");
// 
&НаСервереБезКонтекста
Функция СтрокаСЧисломДляЛюбогоЯзыка(Шаблон, Число, Вид = Неопределено, ФорматнаяСтрока = Неопределено)

	Если ПустаяСтрока(Шаблон) Тогда
		Возврат Формат(Число, ФорматнаяСтрока); 
	КонецЕсли;

	Если Вид = Неопределено Тогда
		Вид = ВидЧисловогоЗначения.Количественное;
	КонецЕсли;

	Возврат СтрокаСЧислом(Шаблон, Число, Вид, ФорматнаяСтрока);

КонецФункции

// Возвращает признак, является ли конфигурация базовой.
//
// Возвращаемое значение:
//   Булево   - Истина, если конфигурация - базовая.
//
&НаСервереБезКонтекста
Функция ЭтоБазоваяВерсияКонфигурации()
	
	Возврат СтрНайти(ВРег(Метаданные.Имя), "БАЗОВАЯ") > 0;
	
КонецФункции

// Возвращает признак включения условного разделения.
// В случае вызова в неразделенной конфигурации возвращает Ложь.
//
&НаСервереБезКонтекста
Функция РазделениеВключено()
	
	ДоступнаРаботаВМоделиСервиса = Метаданные.ФункциональныеОпции.Найти("РаботаВМоделиСервиса");
	Если ДоступнаРаботаВМоделиСервиса <> Неопределено Тогда
		ИмяОпции = "РаботаВМоделиСервиса";
		Возврат ЭтоРазделеннаяКонфигурация() И ПолучитьФункциональнуюОпцию(ИмяОпции);
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции

// Возвращает признак наличия в конфигурации общих реквизитов-разделителей.
//
// Возвращаемое значение:
// Булево.
//
&НаСервереБезКонтекста
Функция ЭтоРазделеннаяКонфигурация()
	
	ЕстьРазделители = Ложь;
	Для каждого ОбщийРеквизит Из Метаданные.ОбщиеРеквизиты Цикл
		Если ОбщийРеквизит.РазделениеДанных = Метаданные.СвойстваОбъектов.РазделениеДанныхОбщегоРеквизита.Разделять Тогда
			ЕстьРазделители = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Возврат ЕстьРазделители;
	
КонецФункции

&НаСервере
Функция ВерсияБСПСоответствуетТребованиям()
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Возврат ОбработкаОбъект.ВерсияБСПСоответствуетТребованиям();
КонецФункции

&НаСервере
Процедура ПроверитьВерсиюИРежимСовместимостиПлатформы()
	
	Информация = Новый СистемнаяИнформация;
	Если Не (Лев(Информация.ВерсияПриложения, 3) = "8.3"
		И (Метаданные.РежимСовместимости = Метаданные.СвойстваОбъектов.РежимСовместимости.НеИспользовать
		Или (Метаданные.РежимСовместимости <> Метаданные.СвойстваОбъектов.РежимСовместимости.Версия8_1
		И Метаданные.РежимСовместимости <> Метаданные.СвойстваОбъектов.РежимСовместимости.Версия8_2_13
		И Метаданные.РежимСовместимости <> Метаданные.СвойстваОбъектов.РежимСовместимости["Версия8_2_16"]
		И Метаданные.РежимСовместимости <> Метаданные.СвойстваОбъектов.РежимСовместимости["Версия8_3_1"]
		И Метаданные.РежимСовместимости <> Метаданные.СвойстваОбъектов.РежимСовместимости["Версия8_3_2"]))) Тогда
		
		ВызватьИсключение НСтр("ru='Обработка предназначена для запуска на версии платформы"
"1С:Предприятие 8.3 с отключенным режимом совместимости или выше';en='Data processor is designed to run on platform version"
"1C:Enterprise 8.3 or higher with disabled compatibility mode'");
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция КартинкаВидыОпераций()
	Если ВерсияБСПСоответствуетТребованиям() Тогда
		Возврат БиблиотекаКартинок["ВидыОпераций"];
	Иначе
		Возврат Новый Картинка;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура РеквизитыОбъекта1НачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	ПараметрыПеретаскивания.Значение = "Объект." + Элемент.ТекущиеДанные.Имя;
	// Вставить содержимое обработчика.
КонецПроцедуры

&НаКлиенте
Процедура ОформлениеДокументов(Команда)
	ОткрытьФорму("ОбщаяФорма.уатФормаОформленияДокументов_уэ",Новый Структура("МассивДокументов", МассивДокументов), ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытиеВводДатыЗавершение(Результат, ДопПараметры) Экспорт
	Если Результат = Неопределено Тогда // отказ от ввода даты закрытия
		Если ДопПараметры.Свойство("УстановленФлаг") Тогда
			ФлагЗакрытия = Ложь;
			Элементы.ДекорацияЗакрытие.Видимость = Ложь;
		КонецЕсли;
		
		Возврат;
	КонецЕсли;
	
	Элементы.ДекорацияЗакрытие.Заголовок = Результат;
	ДатаЗакрытия = Результат;
КонецПроцедуры

&НаКлиенте
Процедура МаршрутизацияСохранятьЭтап(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(РезультатЗакрытия) = Тип("Структура") Тогда
		НаименованиеЭтапа      = РезультатЗакрытия.Наименование;
		РодительЭтапа          = РезультатЗакрытия.Родитель;
		ДатаМаршрутизацииЭтапа = РезультатЗакрытия.ДатаМаршрутизации;
		
		Элементы.ДекорацияОбъеденитьВЭтап.Заголовок = НаименованиеЭтапа;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

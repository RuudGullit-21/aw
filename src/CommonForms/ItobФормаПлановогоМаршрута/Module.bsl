
#Область ПеременныеМодуля
	
&НаКлиенте
Перем мСчетчикДокументСформирован;

// Текст кода, который выполняется
&НаКлиенте
Перем мТекстОтложеннойКоманды;

#КонецОбласти

#Область ОбработчикиСобытийФормы

// Процедура - обработчик события "ПриОткрытии" формы.
//
&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	мСчетчикДокументСформирован = 0;
		
	Если РеперыМаршрута.Количество() > 0 Тогда
		ВыполнитьОтложеннуюКоманду("ItobОперативныйМониторингКлиент.ВыполнитьСкриптНаПолеHTML("
									+ "Элементы.ПолеHTML, ""m_map.zoomToExtent(path_control.handler.line.geometry.getBounds());"")");
	
	КонецЕсли;			
		
КонецПроцедуры // ПриОткрытии()

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
			
	Если ЭтаФорма.Параметры.Свойство("РеперыМаршрута") Тогда
		Для Каждого Репер Из ЭтаФорма.Параметры.РеперыМаршрута Цикл
			ЗаполнитьЗначенияСвойств(РеперыМаршрута.Добавить(), Репер);	
		КонецЦикла;
	КонецЕсли;
	
	Если ЭтаФорма.Параметры.Свойство("ТочкиМаршрута") Тогда
		РассчитанныйМаршрут.ЗагрузитьЗначения(ЭтаФорма.Параметры.ТочкиМаршрута);
		
		ТекПробег = 0;
		Для Каждого СтрТочки Из ЭтаФорма.Параметры.ТочкиМаршрута Цикл
			ТекПробег = ТекПробег + СтрТочки.Length/1000;
		КонецЦикла;
		ОбщийПробег = ТекПробег;
	КонецЕсли; 
	
	ЦветМаршрута = 255;
	
	Запрос = Новый Запрос;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 10
	               |	ItobМестоположенияПоУмолчанию.Ссылка КАК Ссылка,
	               |	ItobМестоположенияПоУмолчанию.Код,
	               |	ItobМестоположенияПоУмолчанию.Представление КАК Представление,
	               |	ItobМестоположенияПоУмолчанию.Наименование КАК Наименование,
	               |	ItobМестоположенияПоУмолчанию.Масштаб,
	               |	ItobМестоположенияПоУмолчанию.Широта,
	               |	ItobМестоположенияПоУмолчанию.Долгота
	               |ИЗ
	               |	Справочник.ItobМестоположенияПоУмолчанию КАК ItobМестоположенияПоУмолчанию
	               |ГДЕ
	               |	ItobМестоположенияПоУмолчанию.Широта <> 0
	               |	И ItobМестоположенияПоУмолчанию.Долгота <> 0
	               |	И ItobМестоположенияПоУмолчанию.Масштаб <> 0
	               |	И (НЕ ItobМестоположенияПоУмолчанию.ПометкаУдаления)
	               |
	               |УПОРЯДОЧИТЬ ПО
	               |	Наименование";
				   
	Счетчик = 1;
	
	СохраненноеМестоположение = ПрочитатьНастройкуПользователя("НастройкиКарты", "МестоположениеПоУмолчанию");
	ТекущееМестоположение = Неопределено;
	Если ЗначениеЗаполнено(СохраненноеМестоположение) Тогда
		ТекущееМестоположение = СохраненноеМестоположение;
				
	КонецЕсли;
				   
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		
		НовКоманда = ЭтаФорма.Команды.Добавить("НажатиеНаКнопку"+Счетчик+"ВыбораКарты");
		НовКоманда.Действие = "Подключаемый_НажатиеНаКнопкуВыбораКарты";
		НовКоманда.Заголовок = Выборка.Представление;
		НовКоманда.Подсказка = НСтр("ru = 'Выбрать местоположение'")+" """+Выборка.Представление+"""";
		
		НовКнопка = ЭтаФорма.Элементы.Добавить(
			"к_"+Выборка.Код, Тип("КнопкаФормы"), ЭтаФорма.Элементы.ПодменюВыборКарты);
		НовКнопка.ИмяКоманды = НовКоманда.Имя;
		НовКнопка.Заголовок = Выборка.Представление;
		
		Счетчик = Счетчик + 1;
		
		Если НЕ ЗначениеЗаполнено(ТекущееМестоположение) Тогда
			ТекущееМестоположение = Выборка.Ссылка;
		
		КонецЕсли;
		
		Если ТекущееМестоположение = Выборка.Ссылка Тогда
			НовКнопка.Пометка = Истина;
			
			МестоположениеМасштаб = Выборка.Масштаб;
			МестоположениеШирота = Выборка.Широта;
			МестоположениеДолгота = Выборка.Долгота;			
		
		КонецЕсли;
	
	КонецЦикла;
	
	ВебСсылкаСервер = "http://"+Константы.ItobАдресСервисаCsmSvc.Получить()+"/map/";
			
	АтрибутыКарты = "";
	Если РеперыМаршрута.Количество() > 0 ИЛИ РассчитанныйМаршрут.Количество() > 0 Тогда
		АтрибутыКарты = ПолучитьСкриптОтображенияОбъектов();
		
		Если РассчитанныйМаршрут.Количество() > 0 Тогда
			АтрибутыКарты = АтрибутыКарты + "
				|"+ПолучитьСкриптОтображенияТрека();
		
		КонецЕсли;
	
	Иначе	
		
		Если МестоположениеМасштаб <> 0 И МестоположениеШирота <> 0 И МестоположениеДолгота <> 0 Тогда
			
			АтрибутыКарты = 
				"firstZoom = "+Формат(МестоположениеМасштаб,"ЧГ=0")+";
				|firstLat = "+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(МестоположениеШирота)+";
				|firstLon = "+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(МестоположениеДолгота)+";";
				
		КонецЕсли;
			
		АтрибутыКарты = АтрибутыКарты+"
			|create_path_control();";			
		
	КонецЕсли;
		
	АтрибутыКарты = АтрибутыКарты+"
		|disable_double_click=true;";	
		
	ПолеHTML = ItobОперативныйМониторинг.ПолучитьАдресКарты(АтрибутыКарты);	
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, СтандартнаяОбработка)
	
	ТекстСкрипта = "destroy_path_control();";
	ItobОперативныйМониторингКлиент.ВыполнитьСкриптНаПолеHTML(Элементы.ПолеHTML, ТекстСкрипта);		
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

// Процедура - обработчик события "ДокументСформирован" поля HTML "ПолеHTML".
//
&НаКлиенте
Процедура ПолеHTMLДокументСформирован(Элемент)
	
	СисИнфо = Новый СистемнаяИнформация;
	
	Если мСчетчикДокументСформирован = 0
		И Найти(СисИнфо.ИнформацияПрограммыПросмотра, "Firefox") <> 0 Тогда
		
		ПодключитьОбработчикОжидания("ОбновитьПолеHTML", 0.1, Истина);
		
	КонецЕсли;
	
	мСчетчикДокументСформирован = мСчетчикДокументСформирован + 1;
		
КонецПроцедуры // ПолеHTMLДокументСформирован()

#КонецОбласти

#Область ОбработчикиКомандФормы

// Процедура - обработчик команды "УвеличитьКарту".
//
&НаКлиенте
Процедура УвеличитьКарту(Команда)
	
	ТекстСкрипта = "m_map.zoomIn();";
	ItobОперативныйМониторингКлиент.ВыполнитьСкриптНаПолеHTML(Элементы.ПолеHTML, ТекстСкрипта);	
	
КонецПроцедуры // УвеличитьКарту()

// Процедура - обработчик команды "УменьшитьКарту".
//
&НаКлиенте
Процедура УменьшитьКарту(Команда)
	
	ТекстСкрипта = "m_map.zoomOut();";
	ItobОперативныйМониторингКлиент.ВыполнитьСкриптНаПолеHTML(Элементы.ПолеHTML, ТекстСкрипта);	
	
КонецПроцедуры // УменьшитьКарту()

// Процедура - обработчик команды "КомандаОК".
//
&НаКлиенте
Процедура КомандаОК(Команда)
	
	Результат = Новый Структура("Результат,РеперыМаршрута,ТочкиМаршрута", Истина, ПолучитьРеперыМаршрута(),РассчитанныйМаршрут.ВыгрузитьЗначения());
	Оповестить("ОбновитьДанныеФормы", Результат);
	Закрыть();		
	
КонецПроцедуры // КомандаОК()

// Процедура - обработчик команды "НажатиеНаКнопку10ВыбораКарты".
//
&НаКлиенте
Процедура Подключаемый_НажатиеНаКнопкуВыбораКарты(Команда)	
		
	ИмяКоманды = СтрЗаменить(Команда.Имя,"НажатиеНаКнопку","");
	ИмяКоманды = СтрЗаменить(ИмяКоманды,"ВыбораКарты","");
	
	ИзменитьПодменюВыбораМестоположенияНаСервере(Число(ИмяКоманды));
		
	АвтоматическиМасштабироватьКарту();	
	
КонецПроцедуры // НажатиеНаКнопку10ВыбораКарты()

&НаКлиенте
Процедура АвтомасштабКарты(Команда)
	
	АвтоматическиМасштабироватьКарту();
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьМаршрут(Команда)
	МассивТочекМаршрута = ПолучитьАктуальныеТочкиМаршрута();
	ТекстСкрипта = КомандаРассчитатьМаршрутНаСервере(МассивТочекМаршрута);
	ItobОперативныйМониторингКлиент.ВыполнитьСкриптНаПолеHTML(Элементы.ПолеHTML, ТекстСкрипта);	
КонецПроцедуры

&НаКлиенте
Процедура Печать(Команда)
	Элементы.ПолеHTML.Документ.execCommand("Print");
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Процедура обновляет содержимое поля HTML
//
&НаКлиенте
Процедура ОбновитьПолеHTML()

	ТекстСкрипта = "location.reload(true);";
	ItobОперативныйМониторингКлиент.ВыполнитьСкриптНаПолеHTML(Элементы.ПолеHTML, ТекстСкрипта);	

КонецПроцедуры

// Возвращает точки маршрута, беря информацию с карты
//
&НаКлиенте
Функция ПолучитьАктуальныеТочкиМаршрута()

	Результат = Новый Массив;
	
	// узнаем количество точек
	ТекстСкрипта = "document.form.result.value = path_control.handler.getPoints().length;"; 
	ItobОперативныйМониторингКлиент.ВыполнитьСкриптНаПолеHTML(Элементы.ПолеHTML, ТекстСкрипта);
	
	СтрЗначение = СокрЛП(Элементы.ПолеHTML.Документ.form.result.value);
	КоличествоТочек = ?(СтрЗначение="", 0, Число(СтрЗначение));
	ИдентификаторПункта = Неопределено;
	Для СчетчикТочек = 0 По КоличествоТочек-1 Цикл
		ТекстСкрипта = 
			"var pt = path_control.handler.getPoints()["+СчетчикТочек+"];
			|var vertice = path_control.handler.vertices["+СчетчикТочек+"];
			|pt.transform(m_map.getProjectionObject(), m_map.displayProjection);
			|document.form.result.value = ((vertice.isFixPoint)?'1':'0') + ',' + vertice.pointId + ',' + pt.toShortString();";
		ItobОперативныйМониторингКлиент.ВыполнитьСкриптНаПолеHTML(Элементы.ПолеHTML, ТекстСкрипта);	
		СтрокаКоординат = Элементы.ПолеHTML.Документ.form.result.value;
		СтрокаКоординат = СтрЗаменить(СтрокаКоординат,",",Символы.ПС);
		ЭтоПунктНазначения = Число(СокрЛП(СтрПолучитьСтроку(СтрокаКоординат,1))) = 1;
		ИдентификаторПункта = ?(ЭтоПунктНазначения, СокрЛП(СтрПолучитьСтроку(СтрокаКоординат,2)), "");
		Результат.Добавить( Новый Структура("ИдентификаторПункта,Широта,Долгота",
			ИдентификаторПункта,
			Число(СокрЛП(СтрПолучитьСтроку(СтрокаКоординат,4))),
			Число(СокрЛП(СтрПолучитьСтроку(СтрокаКоординат,3))) ));
				
	КонецЦикла;
	
	Возврат Результат;	

КонецФункции // ПолучитьАктуальныеТочкиМаршрута()

&НаСервере
Функция ПолучитьРеперыМаршрута()
	РеперыМассив = Новый Массив;
	Для Каждого РеперыМаршрутаСтрока Из РеперыМаршрута Цикл
		СтрокаТаблицыЗначений = Новый Структура("Долгота,ПрибытиеПланСек,Пункт,Широта");
		ЗаполнитьЗначенияСвойств(СтрокаТаблицыЗначений,РеперыМаршрутаСтрока);
		РеперыМассив.Добавить(СтрокаТаблицыЗначений);
	КонецЦикла; 
	Возврат РеперыМассив;
КонецФункции

// Чтение настроек пользователя
//
&НаСервере
Функция ПрочитатьНастройкуПользователя(Раздел, Настройка)

	Возврат ХранилищеОбщихНастроек.Загрузить(Раздел, Настройка);	

КонецФункции // ПрочитатьНастройкуПользователя()

// Процедура изменяет подменю местоположения.
//
&НаСервере
Процедура ИзменитьПодменюВыбораМестоположенияНаСервере(НомерВыбраннойКарты)

	ВыбраннаяКнопка = Неопределено;
	Счетчик = 1;
	Для каждого ТекущаяКнопка Из Элементы.ПодменюВыборКарты.ПодчиненныеЭлементы Цикл
		
		Если Счетчик = НомерВыбраннойКарты Тогда
		
			ВыбраннаяКнопка = ТекущаяКнопка;
			ТекущаяКнопка.Пометка = Истина;
			
		Иначе
			ТекущаяКнопка.Пометка = Ложь;
		
		КонецЕсли;
				
		Счетчик = Счетчик+1;
	
	КонецЦикла;
		
	ТекущееМестоположение = Справочники.ItobМестоположенияПоУмолчанию.НайтиПоКоду(Сред(ВыбраннаяКнопка.Имя, 3));
	МестоположениеМасштаб = ТекущееМестоположение.Масштаб;
	МестоположениеШирота = ТекущееМестоположение.Широта;
	МестоположениеДолгота = ТекущееМестоположение.Долгота;
	
КонецПроцедуры // ИзменитьПодменюВыбораМестоположенияНаСервере()

// Процедура обрабатывает масштабирование карты.
//
&НаКлиенте
Процедура АвтоматическиМасштабироватьКарту()
    	
	ТекстСкрипта = "";
	Если МестоположениеМасштаб <> 0 И МестоположениеШирота <> 0 И МестоположениеДолгота <> 0 Тогда
			
		ТекстСкрипта = 
			"var pt = new OpenLayers.LonLat("+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(МестоположениеДолгота)
				+", "+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(МестоположениеШирота)+");
			|pt.transform(m_map.displayProjection, m_map.getProjectionObject());
			|m_map.setCenter(pt, "+Формат(МестоположениеМасштаб,"ЧГ=0")+");
			|pt = null;";
	
	КонецЕсли;	
	
	Если ТекстСкрипта <> "" Тогда
		ItobОперативныйМониторингКлиент.ВыполнитьСкриптНаПолеHTML(Элементы.ПолеHTML, ТекстСкрипта);	
	
	КонецЕсли;

КонецПроцедуры // АвтоматическиМасштабироватьКарту()

&НаСервере
Функция ПолучитьСкриптОтображенияОбъектов()
			
	ТекстСкрипта = 
		"var pointList = [];
		|var pt = null;
		|destroy_path_control();
		|create_path_control();
		|path_control.handler.allowAddPoints = false;
		|var find_layers = m_map.getLayersByName(""Markers"");
		|var markers = null;
		|if (find_layers.length == 0) {
		|	markers = new OpenLayers.Layer.Markers( ""Markers"" , {displayInLayerSwitcher: false});			
		|	m_map.addLayer(markers);
		|}
		|else {markers = find_layers[0];}
		|markers.clearMarkers();
		|path_control.handler.fixVertexStyle = {
		|			fillColor: ""#0000ff"",
		|	        fillOpacity: 0.8,
		|	        strokeColor: ""#0000ff"",
		|	        strokeOpacity: 0.5,
		|	        strokeWidth: 1,
		|	        strokeLinecap: ""round"",			        
		|	        pointRadius: 6,
		|	        hoverPointRadius: 1,
		|	        hoverPointUnit: ""%"",
		|	        pointerEvents: ""visiblePainted""
		|	    };";		

	Для СчетчикРеперовМаршрута = 0 По РеперыМаршрута.Количество()-1 Цикл		
		ТекстСкрипта = ТекстСкрипта+"
			|pt = new OpenLayers.LonLat("+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(РеперыМаршрута[СчетчикРеперовМаршрута].Долгота)
				+", "+ItobОбщегоНазначенияКлиентСервер.ФорматироватьКоординаты(РеперыМаршрута[СчетчикРеперовМаршрута].Широта)+");
			|pt.transform(m_map.displayProjection, m_map.getProjectionObject());
			|pointList.push(new OpenLayers.Geometry.Point(pt.lon, pt.lat));";
	
	КонецЦикла;
		
	ТекстСкрипта = ТекстСкрипта + "
		|path_control.handler.setPoints(pointList);";
		
	Для СчетчикРеперовМаршрута = 0 По РеперыМаршрута.Количество()-1 Цикл
		Если НЕ РеперыМаршрута[СчетчикРеперовМаршрута].Пункт.Пустая() Тогда
			ТекстСкрипта = ТекстСкрипта + "
				|path_control.handler.setPointParams("+Формат(СчетчикРеперовМаршрута,"ЧН=0; ЧГ=0")+", true, '"+ РеперыМаршрута[СчетчикРеперовМаршрута].Пункт.УникальныйИдентификатор() +"');";				
		
		КонецЕсли;	
	КонецЦикла;
		
	
	// Цвет маршрута
	ВебЦветМаршрута = ItobОбщегоНазначенияКлиентСервер.ДесятичныйЦветВШестнадцатеричный(ЦветМаршрута);
	
	ТекстСкрипта = ТекстСкрипта + "
		|path_control.handler.style.strokeColor = ""#"+ВебЦветМаршрута+""";
		|path_control.handlerOptions.style.strokeColor = ""#"+ВебЦветМаршрута+"""
		|path_control.handler.style.fillOpacity = 0.8;
		|path_control.handlerOptions.style.fillOpacity = 0.8;
		|path_control.handler.style.fillColor = ""#"+ВебЦветМаршрута+""";
		|path_control.handlerOptions.style.fillColor = ""#"+ВебЦветМаршрута+""";
		|path_control.handler.style.strokeOpacity = 0.3;
		|path_control.handlerOptions.style.strokeOpacity = 0.3;";		
		
	
	// Автомасштаб
	Если РеперыМаршрута.Количество() > 0 Тогда
		ТекстСкрипта = ТекстСкрипта + "
			|m_map.zoomToExtent(path_control.handler.line.geometry.getBounds());";
	
	КонецЕсли;
		
	Возврат ТекстСкрипта;	

КонецФункции // ПолучитьСкриптОтображенияОбъектов()

&НаКлиенте
Процедура ВыполнитьОтложеннуюКоманду(ТекстКоманды, Таймаут=0.5)
	
	мТекстОтложеннойКоманды = ТекстКоманды;
	ЭтаФорма.ПодключитьОбработчикОжидания("ОбработчикВыполненияОтложеннойКоманды",Таймаут,Истина);	

КонецПроцедуры

&НаКлиенте
Процедура ОбработчикВыполненияОтложеннойКоманды()
 
	Если ПустаяСтрока(мТекстОтложеннойКоманды) Тогда		
		Возврат;
	
	КонецЕсли;
	
	Если ItobОбщегоНазначенияКлиент.КартаЗагружена(Элементы.ПолеHTML) Тогда
		#Если НЕ ВебКлиент Тогда
			// Команда Выполнить() на веб-клиенте не работает
			ВЫПОЛНИТЬ(мТекстОтложеннойКоманды);
		#КонецЕсли 
		мТекстОтложеннойКоманды = "";
		
	Иначе
		ЭтаФорма.ПодключитьОбработчикОжидания("ОбработчикВыполненияОтложеннойКоманды",0.5,Истина);
	
	КонецЕсли;	

КонецПроцедуры

&НаСервере
Функция ПолучитьСкриптОтображенияТрека()
    		
	ТочкиМаршрута = ItobРаботаСРендеромCSM.ПолучитьШаблонТаблицыТочек();
	
	Для НомерУчастка = 0 По РассчитанныйМаршрут.Количество()-1  Цикл
		ТекущийУчасток = РассчитанныйМаршрут[НомерУчастка].Значение;
		
		Для СчетчикТекущегоУчастка = 0 По ТекущийУчасток.Path.Количество()-1 Цикл			
			НовТочка = ТочкиМаршрута.Добавить();
			НовТочка.Широта  = ТекущийУчасток.Path[СчетчикТекущегоУчастка].Lat;
			НовТочка.Долгота = ТекущийУчасток.Path[СчетчикТекущегоУчастка].Lon;
		
		КонецЦикла;			
	КонецЦикла;
		
	ТекстСкрипта = "";
	ТекущееИмяСлоя = "rendering_routes_layer";
	НомерПрофиля = "";
	Если НЕ ItobРаботаСРендеромCSM.ВыполнитьРендерингМаршрута(ТочкиМаршрута, Неопределено, ТекстСкрипта, ТекущееИмяСлоя, НомерПрофиля) Тогда
		Возврат Ложь;
	
	КонецЕсли;
		
	Возврат ТекстСкрипта;

КонецФункции // ПолучитьСкриптОтображенияТрека()

Функция НовыйТаблицаТочекМаршрута()
	
	ТаблицаТочекМаршрута = Новый ТаблицаЗначений();
	ТаблицаТочекМаршрута.Колонки.Добавить("ИдентификаторПункта");
	ТаблицаТочекМаршрута.Колонки.Добавить("Широта");
	ТаблицаТочекМаршрута.Колонки.Добавить("Долгота");
	ТаблицаТочекМаршрута.Колонки.Добавить("Расстояние", Новый ОписаниеТипов("Число"));
	ТаблицаТочекМаршрута.Колонки.Добавить("Время", Новый ОписаниеТипов("Число"));
	
	
	Возврат ТаблицаТочекМаршрута;
	
КонецФункции

&НаСервере
Функция КомандаРассчитатьМаршрутНаСервере(МассивТочекМаршрута)
	ОшибкаРасчета = "";
	
	// Преобразовываем массив в таблицу.
	ТаблицаТочекМаршрута = НовыйТаблицаТочекМаршрута();
	Для Каждого ТочкаМаршрута Из МассивТочекМаршрута Цикл
	    ЗаполнитьЗначенияСвойств(ТаблицаТочекМаршрута.Добавить(), ТочкаМаршрута);
	КонецЦикла; 
	
	РассчитатьМаршрутНаСервере(ТаблицаТочекМаршрута, ОшибкаРасчета);
	// Покажем на карте
	Возврат ПолучитьСкриптОтображенияТрека();
КонецФункции

&НаСервере
Функция РассчитатьМаршрутНаСервере(ТаблицаТочекМаршрута, ОшибкаРасчета)
	
	РассчитанныйМаршрут.Очистить();
	РеперыМаршрута.Очистить();
	Если ТаблицаТочекМаршрута.Количество()=0 Тогда
		Возврат Ложь;
		
	КонецЕсли;
	
	ТекущийУчастокМаршрута = НовыйТаблицаТочекМаршрута();
	ЗаполнитьЗначенияСвойств(ТекущийУчастокМаршрута.Добавить(), ТаблицаТочекМаршрута[0]);
	
	ОшибкаРасчета = "";	
	ОбщийПробег = 0;
	ОбщееВремя = 0;
	НоваяСтрокаРеперы = РеперыМаршрута.Добавить();
	НоваяСтрокаРеперы.Широта = ТаблицаТочекМаршрута[0].Широта;
	НоваяСтрокаРеперы.Долгота = ТаблицаТочекМаршрута[0].Долгота;
	
	ИмяСправочникаПункты = ItobВызовСервераПовтИсп.ПолучитьИмяОбъекта("ПунктыНазначения");
	
	Если Не ТаблицаТочекМаршрута[0].ИдентификаторПункта  = "" Тогда
		НоваяСтрокаРеперы.Пункт = Справочники[ИмяСправочникаПункты].ПолучитьСсылку(Новый УникальныйИдентификатор(ТаблицаТочекМаршрута[0].ИдентификаторПункта));
	КонецЕсли; 
	
	Для СчетчикТочки = 1 По ТаблицаТочекМаршрута.Количество()-1 Цикл
		ЗаполнитьЗначенияСвойств(ТекущийУчастокМаршрута.Добавить(), ТаблицаТочекМаршрута[СчетчикТочки]);
		
		ИдентификаторПункта = ТаблицаТочекМаршрута[СчетчикТочки].ИдентификаторПункта;
		
		ТабМаршрута = ItobГеографическиеСервисы.РасчетМаршрута(ТекущийУчастокМаршрута, ОшибкаРасчета);
		Если ЗначениеЗаполнено(ОшибкаРасчета) Тогда
			ОшибкаРасчета = НСтр("ru = 'Ошибка расчета маршрута:'") + " " + ОшибкаРасчета;
			Возврат Ложь;	
		КонецЕсли;
		
		Если ТабМаршрута = Неопределено ИЛИ ТабМаршрута.Количество() = 0 Тогда	 
			ОшибкаРасчета = НСтр("ru = 'Ошибка расчета маршрута'");
			Возврат Ложь;
		КонецЕсли;
		
		ОбщийПробег = ОбщийПробег + Окр(ТабМаршрута[1].Расстояние/1000,1);
		ОбщееВремя = ОбщееВремя + ТабМаршрута[1].Время;
		ДанныеМаршрута = Новый Структура();
		ДанныеМаршрута.Вставить("Id", ИдентификаторПункта);
		ДанныеМаршрута.Вставить("Lat", ТабМаршрута[1].Широта);
		ДанныеМаршрута.Вставить("Lon", ТабМаршрута[1].Долгота);
		ДанныеМаршрута.Вставить("Index", ТабМаршрута[1].Index);
		ДанныеМаршрута.Вставить("Length", ТабМаршрута[1].Расстояние);
		ДанныеМаршрута.Вставить("Duration", ТабМаршрута[1].Время);
		ДанныеМаршрута.Вставить("Path", Новый Массив);		
		Для каждого СтрPath Из ТабМаршрута[1].Путь Цикл
			ДанныеМаршрута.Path.Добавить(Новый Структура("Lat,Lon",СтрPath.Широта,СтрPath.Долгота));			
		КонецЦикла;		
		РассчитанныйМаршрут.Добавить(ДанныеМаршрута);
		
		НоваяСтрокаРеперы = РеперыМаршрута.Добавить();
		НоваяСтрокаРеперы.Широта = ТаблицаТочекМаршрута[СчетчикТочки].Широта;
		НоваяСтрокаРеперы.Долгота = ТаблицаТочекМаршрута[СчетчикТочки].Долгота;
		Если Не ТаблицаТочекМаршрута[СчетчикТочки].ИдентификаторПункта  = "" Тогда
			НоваяСтрокаРеперы.Пункт = Справочники[ИмяСправочникаПункты].ПолучитьСсылку(Новый УникальныйИдентификатор(ТаблицаТочекМаршрута[СчетчикТочки].ИдентификаторПункта));
		КонецЕсли; 
		НоваяСтрокаРеперы.ПрибытиеПланСек = ОбщееВремя;
		
		ТекущийУчастокМаршрута.Очистить();
		ЗаполнитьЗначенияСвойств(ТекущийУчастокМаршрута.Добавить(), ТаблицаТочекМаршрута[СчетчикТочки]);		
	КонецЦикла;
	
	
	Возврат Истина;
	
КонецФункции

#КонецОбласти

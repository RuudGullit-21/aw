
#Область ПеременныеФормы

&НаКлиенте
Перем КонтрагентыПеревозчика;
&НаКлиенте
Перем КонтрагентыЗаказчика;
&НаКлиенте
Перем ДокументОбъект;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Автотест = Истина;
		Возврат;
	КонецЕсли;
	
	Если НЕ уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП() Тогда
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("МассивДокументов") Тогда
		Для Каждого ТекСтрока Из Параметры.МассивДокументов Цикл
			НоваяСтрока = МассивДокументов.Добавить();
			НоваяСтрока.Ссылка = ТекСтрока.Значение;
		КонецЦикла; 
		ФлагЭтоМассивДокументов = Истина;
		Элементы.КонтрагентыДокументовЗаказчика.Видимость   = Ложь;
		Элементы.КонтрагентыДокументовПеревозчика.Видимость = Ложь;
	ИначеЕсли Параметры.Свойство("НастройкаКомплектовДокументов") Тогда  
		ФлагЭтоРедактирование = Истина;
		ЭтотОбъект.НастройкаКомплектовДокументов = Параметры.НастройкаКомплектовДокументов;
		Элементы.НастройкаКомплектовДокументов.Видимость   = Ложь;
		Элементы.ПолучателиУведомленийЭлектронноеПисьмо.Видимость = Ложь; 
		Элементы.ПолучателиУведомленийОтправлено.Видимость = Ложь; 
		Элементы.ПолучателиУведомленийВыбрать.Видимость = Ложь;
		Элементы.КнопкиОтправки.Видимость = Ложь; 
		Элементы.Выполнить.Видимость = Ложь;
		Элементы.ОтправитьПисьмо.Видимость = Ложь;
		Элементы.СохранитьНастройкиКомплектаДокументов.Видимость = Истина;
		Элементы.СохранитьИЗакрытьНастройкиКомплектаДокументов.Видимость = Истина;
		Элементы.ФлагОтправлятьДокументы.Видимость = Истина;
		УстановитьВидимостьВкладкиОтправка();
		Элементы.КонтрагентыДокументовЗаказчика.Видимость   = Ложь;
		Элементы.КонтрагентыДокументовПеревозчика.Видимость = Ложь;
		Элементы.МассивДокументов.Видимость = Ложь;
		Элементы.МассивДокументов1Ссылка.Видимость = Ложь;
		Элементы.МассивДокументов1ФлагВыбора.Видимость = Ложь;
		Элементы.МассивДокументов1ОтметитьВсеСтрокиВкладкаПисьмо.Видимость = Ложь;
		Элементы.МассивДокументов1СнятьОтметкиВоВсехСтрокахВкладкаПисьмо.Видимость = Ложь;
		Элементы.МассивДокументов1ОбновитьМассивДокументов.Видимость = Ложь;
	Иначе 
		ФлагЭтоДокумент		 = Истина;
	КонецЕсли;
	
	УстановитьДоступность();
	Если ФлагЭтоРедактирование Тогда
		ЗаполнитьПоНастройкеКомплектов();
		УстановитьВидимостьВкладкиОтправка();
	Иначе
		ВосстановитьНастройки();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Автотест Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если ВладелецФормы = Неопределено Тогда
		Отказ = Истина;
		ПоказатьПредупреждение(Неопределено, НСтр("en='Immediate opening for this object is prohibited!';ru='Непосредственное открытие для данного объекта запрещено!'"));
		Возврат;
	КонецЕсли;
	
	Если НЕ уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП() Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;

	Если ФлагЭтоДокумент Тогда
		ДокументОснование  = ВладелецФормы.Объект.Ссылка;
		ДокументОбъект     = ВладелецФормы.Объект;
		
		НоваяСтрока        = МассивДокументов.Добавить();
		НоваяСтрока.Ссылка = ДокументОснование;
		
		КонтрагентыПеревозчика = Новый Структура("мсвКонтрагенты, ТаблицаУслуги, СохраненныеКонтрагенты",
		Новый СписокЗначений(), Новый СписокЗначений(), Новый Массив());
		КонтрагентыЗаказчика   = Новый Структура("мсвКонтрагенты, ТаблицаУслуги, СохраненныеКонтрагенты",
		Новый СписокЗначений(), Новый СписокЗначений(), Новый Массив());
	Иначе
		Если МассивДокументов.Количество() <> 0 Тогда
			ДокументОснование = МассивДокументов[0].Ссылка;
		КонецЕсли;
	КонецЕсли;

	УстановитьВидимость();
	
	Если ФлагЭтоДокумент И Элементы.КонтрагентыДокументовЗаказчика.Видимость Тогда
		Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") Тогда
			ЗаполнитьЗначенияСвойств(КонтрагентыЗаказчика, КонтрагентыДокументов("Услуги", ВладелецФормы.Объект.Услуги));
		Иначе
			ЗаполнитьЗначенияСвойств(КонтрагентыЗаказчика, КонтрагентыДокументов("Доходы", ВладелецФормы.Объект.Доходы));
		КонецЕсли;
		ПолучитьСтрокиДокументов(КонтрагентыЗаказчика.мсвКонтрагенты, КонтрагентыЗаказчика.ТаблицаУслуги, СтрокиДокументовЗаказчика,
			КонтрагентыЗаказчика.СохраненныеКонтрагенты, 0);
	КонецЕсли;
	Если ФлагЭтоДокумент И Элементы.КонтрагентыДокументовПеревозчика.Видимость Тогда
		ЗаполнитьЗначенияСвойств(КонтрагентыПеревозчика, КонтрагентыДокументов("Расходы", ВладелецФормы.Объект.Расходы));
		ПолучитьСтрокиДокументов(КонтрагентыПеревозчика.мсвКонтрагенты, КонтрагентыПеревозчика.ТаблицаУслуги, СтрокиДокументовПеревозчика,
			КонтрагентыПеревозчика.СохраненныеКонтрагенты, 1);
	КонецЕсли;
	
	Если НЕ ФлагЭтоРедактирование Тогда  
		Если ЗначениеЗаполнено(КонтрагентыПеревозчика) Тогда
			Элементы.КонтрагентыДокументовПеревозчика.Видимость = КонтрагентыПеревозчика.мсвКонтрагенты.Количество() > 1;  
		КонецЕсли;
		Если ЗначениеЗаполнено(КонтрагентыЗаказчика) Тогда
			Элементы.КонтрагентыДокументовЗаказчика.Видимость = КонтрагентыЗаказчика.мсвКонтрагенты.Количество() > 1;
		КонецЕсли;
		
		СчетчикДокументов = 1;
		ЗаполнитьСписокПодчиненныхОбъектов(ДокументОснование);
	КонецЕсли;
	
	УстановитьСписокТиповПолучателей();
	УстановитьДоступныеТипыИндивидуальныхПолучателей();
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	Если не ФлагЭтоРедактирование Тогда
		СохранитьНастройки();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ФлагРеализацияУслугПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ФлагПоступлениеМатериаловУслугПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ФлагСчетНаОплатуПоставщикаПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентыДокументовЗаказчикаНажатие(Элемент)
	
	Если КонтрагентыЗаказчика.мсвКонтрагенты.Количество() > 1 Тогда
		ПараметрыФормы = Новый Структура("ВидОперации,ДокументОснование,Контрагенты,Услуги,СохраненныеКонтрагенты, ДокументИмя",
		1, ДокументОснование, КонтрагентыЗаказчика.мсвКонтрагенты, КонтрагентыЗаказчика.ТаблицаУслуги,
		КонтрагентыЗаказчика.СохраненныеКонтрагенты, "уатСчетНаОплатуПокупателю");
		
		ОповещениеОЗакрытие = Новый ОписаниеОповещения("ПослеЗакрытияФормыВыбораКонтрагентовЗаказчика", ЭтотОбъект);
		ОткрытьФорму("Документ.уатПоступлениеТоваровУслуг.Форма.ФормаВыборКонтрагента", ПараметрыФормы, ЭтотОбъект,,,,ОповещениеОЗакрытие);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура КонтрагентыДокументовПеревозчикаНажатие(Элемент)
	
	Если КонтрагентыПеревозчика.мсвКонтрагенты.Количество() > 1 Тогда
		ПараметрыФормы = Новый Структура("ВидОперации,ДокументОснование,Контрагенты,Услуги,СохраненныеКонтрагенты",
			1, ДокументОснование, КонтрагентыПеревозчика.мсвКонтрагенты, КонтрагентыПеревозчика.ТаблицаУслуги,
			КонтрагентыПеревозчика.СохраненныеКонтрагенты);
		
		ОповещениеОЗакрытие = Новый ОписаниеОповещения("ПослеЗакрытияФормыВыбораКонтрагентовПеревозчика", ЭтотОбъект);
		ОткрытьФорму("Документ.уатПоступлениеТоваровУслуг.Форма.ФормаВыборКонтрагента", ПараметрыФормы, ЭтотОбъект,,,,ОповещениеОЗакрытие);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДокументНажатие(Элемент)
	Группа = Элемент.Имя;
	мМассивДокументов = МассивДокументов.НайтиСтроки(Новый Структура("Группа", Группа));
	Если мМассивДокументов.Количество() <> 0 Тогда
		ПоказатьЗначение(Неопределено, мМассивДокументов[0].Ссылка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.Оформление Тогда
		Элементы.Выполнить.Заголовок = Нстр("ru='Оформить';en='Complete'");
	ИначеЕсли   Элементы.Страницы.ТекущаяСтраница = Элементы.Печать Тогда
		Элементы.Выполнить.Заголовок = Нстр("ru='Печать';en='Print'");
	Иначе
		Элементы.Выполнить.Заголовок = Нстр("ru='Сформировать письма';en='Create email messages'");
	КонецЕсли;
	Элементы.ОтправитьПисьмо.Видимость = (Элементы.Страницы.ТекущаяСтраница = Элементы.ОтправкаПисем и не ФлагЭтоРедактирование);
	
КонецПроцедуры

&НаКлиенте
Процедура ФлагОтправлятьДокументыПриИзменении(Элемент)
	УстановитьВидимостьВкладкиОтправка()
КонецПроцедуры


&НаКлиенте
Процедура ПолучателиУведомленийПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока И Не Копирование Тогда
        Элемент.ТекущиеДанные.Получатель = "";
	КонецЕсли;
	
	Если Копирование Тогда
		Элемент.ТекущиеДанные.ЭлектронноеПисьмо = Неопределено;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НастройкаКомплектовДокументовПриИзменении(Элемент)
	Если ЗначениеЗаполнено(НастройкаКомплектовДокументов) Тогда		
		ЗаполнитьПоНастройкеКомплектов();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполнитьСоздание(Команда)
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.Оформление Тогда
		Объекты = ВыполнитьСозданиеДокументов();
		ЗаполнитьСписокПодчиненныхОбъектов(ДокументОснование);
		
		Элементы.Страницы.ТекущаяСтраница = Элементы.Печать;
		Элементы.Выполнить.Заголовок = 
			?(Элементы.Страницы.ТекущаяСтраница = Элементы.Оформление, Нстр("ru='Оформить';en='Complete'"), Нстр("ru='Печать';en='Print'"));
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.Печать Тогда
		СразуНаПринтер = ПолучитьНастройкуПечати();
		Если СразуНаПринтер <> Неопределено Тогда
			ПечатьСразуНаПринтер = СразуНаПринтер;
		Иначе
			ПечатьСразуНаПринтер = Ложь;
		КонецЕсли;
		
		МассивТипов = Новый Массив();
		Сообщение = "";
		
		Для Каждого ТекДокумент Из МассивДокументов Цикл
			Если НЕ ТекДокумент.ФлагВыбора Тогда
				Продолжить;
			КонецЕсли;
			
			ИмяСправочника = ПолучитьМенеджерПечати(ТекДокумент.Ссылка); 
			
			ИменаМакетов = ПодготовитьНастройкиДляПечати("Документ." + ИмяСправочника, НастройкаКомплектовДокументов);
			ИменаМакетов = Сред(ИменаМакетов, 2);
			Если ЗначениеЗаполнено(ИменаМакетов) Тогда
				мДокумент = Новый Массив();
				мДокумент.Добавить(ТекДокумент.Ссылка);
				Печать(мДокумент, ИменаМакетов, ПечатьСразуНаПринтер);
			Иначе
				Если ТипЗнч(ТекДокумент.Ссылка) = Тип("ДокументСсылка.уатЗаказПеревозчику_уэ") Тогда
					Продолжить;
				ИначеЕсли МассивТипов.Найти(ТипЗнч(ТекДокумент.Ссылка)) = Неопределено Тогда
					МассивТипов.Добавить(ТипЗнч(ТекДокумент.Ссылка));
				КонецЕсли;	 
			КонецЕсли;

		КонецЦикла;
		
		Если МассивТипов.Количество() <> 0 Тогда
			Для Каждого Элемент Из МассивТипов Цикл
				Сообщение = Сообщение + Элемент + Символы.ПС;
			КонецЦикла;
			
			Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияВопроса",ЭтотОбъект);
						
			Сообщение = "Не выбраны макеты печатных форм для документов:" + Символы.ПС + Символы.ПС + Сообщение;
			ТекстВопроса = Новый ФорматированнаяСтрока(Сообщение);
			ЗаголовокВопроса = "Не выбраны макеты печатных форм! Перейти к настройкам печати?";
			ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ДаНет,,,ЗаголовокВопроса);
		КонецЕсли;
		
	Иначе
		ВсеНевыбранныеСтроки = ПолучателиУведомлений.НайтиСтроки(Новый Структура("Выбрать", Ложь));
		Если ВсеНевыбранныеСтроки.Количество() = ПолучателиУведомлений.Количество() Тогда
			ОбъектСообщения = Новый СообщениеПользователю();
			ОбъектСообщения.Текст = НСтр("ru = 'Письма для формирования не выбраны!'"); 
			ОбъектСообщения.Сообщить();
			Возврат;
		КонецЕсли;
		
		Для каждого ТекСтрока из ПолучателиУведомлений Цикл
			Если не ТекСтрока.Выбрать Тогда
				Продолжить;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекСтрока.ЭлектронноеПисьмо) Тогда
				Продолжить;
			КонецЕсли;
			
			ТекСтрока.ЭлектронноеПисьмо = СформироватьЭлектронноеПисьмо(ТекСтрока.ТипПолучателя, ТекСтрока.Получатель, ТекСтрока.ШаблонЭлектронногоПисьма);
				 
	КонецЦикла;

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияВопроса(Результат, Параметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ПечатьКомплектаДокументов(Результат);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьВсеСтроки(Команда)
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.Печать Тогда
		Для Каждого ТекСтрока Из МассивДокументов Цикл
			ТекСтрока.ФлагВыбора = 1;
		КонецЦикла;
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.ОтправкаПисем Тогда
		Для Каждого ТекСтрока Из ПолучателиУведомлений Цикл
			ТекСтрока.Выбрать = Истина;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьВсеСтрокиВкладкаПисьмо(Команда)
	Для Каждого ТекСтрока Из МассивДокументов Цикл
		ТекСтрока.ФлагВыбора = 1;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметкиВоВсехСтроках(Команда)
	
	Если Элементы.Страницы.ТекущаяСтраница = Элементы.Печать Тогда
		Для Каждого ТекСтрока Из МассивДокументов Цикл
			ТекСтрока.ФлагВыбора = 0;
		КонецЦикла;
	ИначеЕсли Элементы.Страницы.ТекущаяСтраница = Элементы.ОтправкаПисем Тогда
		Для Каждого ТекСтрока Из ПолучателиУведомлений Цикл
			ТекСтрока.Выбрать = Ложь;
		КонецЦикла;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметкиВоВсехСтрокахВкладкаПисьмо(Команда)
	Для Каждого ТекСтрока Из МассивДокументов Цикл
		ТекСтрока.ФлагВыбора = 0;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьМассивДокументов(Команда)
	ЗаполнитьСписокПодчиненныхОбъектов(ДокументОснование);
КонецПроцедуры

&НаКлиенте
Процедура ПечатьКомплектаДокументов(Команда)
	ОбъектыПечати = Новый Массив();
	ОбъектыПечати.Добавить(ПредопределенноеЗначение("Документ.уатСчетНаОплатуПокупателю.ПустаяСсылка"));
	
	МенеджерПечати  = "ОбщаяФорма.уатФормаОформленияДокументов_уэ";
	ИмяФормыОбъекта = Новый Массив();
	ИмяФормыОбъекта.Добавить(Новый Структура("ИмяФормы, Документ", "Документ.уатСчетНаОплатуПокупателю.Форма.ФормаДокумента",Нстр("en = 'Invoice to buyer'; ru = 'Счет на оплату покупателю'")));
	ИмяФормыОбъекта.Добавить(Новый Структура("ИмяФормы, Документ", "Документ.уатРеализацияУслуг.Форма.ФормаДокумента",Нстр("en = 'Selling of services '; ru = 'Реализация услуг '")));
	ИмяФормыОбъекта.Добавить(Новый Структура("ИмяФормы, Документ", "Документ.уатПлатежноеПоручениеВходящее.Форма.ФормаДокумента",Нстр("en = 'Incoming payment order'; ru = 'Платежное поручение входящее'")));
	ИмяФормыОбъекта.Добавить(Новый Структура("ИмяФормы, Документ", "Документ.уатПриходныйКассовыйОрдер.Форма.ФормаДокумента",Нстр("en = 'Cash receipt voucher'; ru = 'Приходный кассовый ордер'")));
	ИмяФормыОбъекта.Добавить(Новый Структура("ИмяФормы, Документ", "Документ.уатСчетНаОплатуПоставщика.Форма.ФормаДокумента",Нстр("en = 'Invoice for supplier'; ru = 'Счет на оплату поставщика'")));
	ИмяФормыОбъекта.Добавить(Новый Структура("ИмяФормы, Документ", "Документ.уатПоступлениеТоваровУслуг.Форма.ФормаДокумента",Нстр("en = 'Receipt of materials and services'; ru = 'Поступление материалов и услуг'")));
	ИмяФормыОбъекта.Добавить(Новый Структура("ИмяФормы, Документ", "Документ.уатПлатежноеПоручениеИсходящее.Форма.ФормаДокумента",Нстр("en = 'Outgoing payment order'; ru = 'Платежное поручение исходящее'")));
	ИмяФормыОбъекта.Добавить(Новый Структура("ИмяФормы, Документ", "Документ.уатРасходныйКассовыйОрдер.Форма.ФормаДокумента",Нстр("en = 'Cash payment voucher'; ru = 'Расходный кассовый ордер'")));
	ИмяФормыОбъекта.Добавить(Новый Структура("ИмяФормы, Документ", "Документ.уатЗаявкаНаРасходованиеДС.Форма.ФормаДокумента",Нстр("en = 'Expenditure request'; ru = 'Заявка на расходование денежных средств'")));
	ИмяФормыОбъекта.Добавить(Новый Структура("ИмяФормы, Документ", "Документ.уатТТД.Форма.ФормаДокумента",Нстр("en = 'Shipping document'; ru = 'Товарно-транспортный документ'")));
	ИмяФормыОбъекта.Добавить(Новый Структура("ИмяФормы, Документ", "Документ.уатДоверенность.Форма.ФормаДокумента",Нстр("en = 'Power of attorney'; ru = 'Доверенность'")));

	ОткрытьФорму("ОбщаяФорма.уатНастройкаПечатиКомплекта", Новый Структура("Объекты, МенеджерПечати, ИмяФормы, Дерево, Основание, НастройкаКомплектовДокументов",
		ОбъектыПечати, МенеджерПечати, ИмяФормыОбъекта, Истина, ЭтотОбъект.ИмяФормы, НастройкаКомплектовДокументов));
КонецПроцедуры        

&НаКлиенте
Процедура СформироватьПисьма(Команда)
	
	Для каждого ТекСтрока из ПолучателиУведомлений Цикл
		
		Если не ТекСтрока.Выбрать Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекСтрока.ЭлектронноеПисьмо) Тогда
			 Продолжить;
		 КонецЕсли;
		 
		 ТекСтрока.ЭлектронноеПисьмо = СформироватьЭлектронноеПисьмо(ТекСтрока.ТипПолучателя, ТекСтрока.Получатель, ТекСтрока.ШаблонЭлектронногоПисьма);
		
	 КонецЦикла;
	 
КонецПроцедуры

&НаСервере
Функция СформироватьЭлектронноеПисьмо(ТипПолучателя, Получатель, ШаблонПисьма);
	
	Получатель = уатРаботаСУведомлениями_уэ.ПолучитьПолучателяПоНастройкеКомплектов(ТипПолучателя, ДокументОснование, Получатель, Новый Структура);
	
	Если Получатель = Неопределено или типзнч(Получатель) = тип("Null") или Получатель = "" Тогда
		ОбъектСообщения = Новый СообщениеПользователю();
		ОбъектСообщения.Текст = НСтр("ru = 'Не удалось определить получателя письма '") + ТипПолучателя; 
		ОбъектСообщения.Сообщить();
		Возврат Документы.ЭлектронноеПисьмоИсходящее.ПустаяСсылка();
	КонецЕсли;
	
	НовоеЭлектронноеПисьмо = Документы.ЭлектронноеПисьмоИсходящее.СоздатьДокумент();
	
	Сообщение = ШаблоныСообщений.СформироватьСообщение(ШаблонПисьма, ДокументОснование, Новый УникальныйИдентификатор);
	Сообщение.Вложения.Очистить();
	
	ЗаполнитьЗначенияСвойств(НовоеЭлектронноеПисьмо, Сообщение.ДополнительныеПараметры);
	
	НовоеЭлектронноеПисьмо.Дата = ТекущаяДата();
	НовоеЭлектронноеПисьмо.Ответственный = Пользователи.ТекущийПользователь();
	НовоеЭлектронноеПисьмо.УчетнаяЗапись = УправлениеЭлектроннойПочтой.ПолучитьУчетнуюЗаписьДляОтправкиПоУмолчанию();
	НовоеЭлектронноеПисьмо.ОтправительПредставление = ПолучитьПредставлениеДляУчетнойЗаписи(НовоеЭлектронноеПисьмо.УчетнаяЗапись);
	НовоеЭлектронноеПисьмо.СтатусПисьма = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Черновик;
	НовоеЭлектронноеПисьмо.Кодировка				= "utf-8";
	НовоеЭлектронноеПисьмо.Важность 				= Перечисления.ВариантыВажностиВзаимодействия.Обычная;
	НовоеЭлектронноеПисьмо.Тема = Сообщение.Тема;
	
	Если не ТипЗнч(Получатель) = Тип("Строка") Тогда
		стрНастройкиВидовКонтактнойИнформации = уатОбщегоНазначенияПовтИсп_проф.ПолучитьНастройкиВидовКонтактнойИнформации();
		Если ТипЗнч(Получатель) = Тип("СправочникСсылка.Пользователи") Тогда
			ВидКонтактнойИнформации = стрНастройкиВидовКонтактнойИнформации.видКонтактнойИнформацииEmailПользователя;
		ИначеЕсли ТипЗнч(Получатель) = Тип("СправочникСсылка.КонтактныеЛица") Тогда
			ВидКонтактнойИнформации = стрНастройкиВидовКонтактнойИнформации.видКонтактнойИнформацииEmailКонтактногоЛица;
		ИначеЕсли ТипЗнч(Получатель) = Тип("СправочникСсылка.Контрагенты") Тогда
			ВидКонтактнойИнформации = стрНастройкиВидовКонтактнойИнформации.видКонтактнойИнформацииEmailКонтрагента;
		ИначеЕсли ТипЗнч(Получатель) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
			ВидКонтактнойИнформации = стрНастройкиВидовКонтактнойИнформации.видКонтактнойИнформацииEmailФизическогоЛица;
		КонецЕсли;
		КонтактнаяИнформация = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(Получатель, ВидКонтактнойИнформации);
		НоваяСтрокаПолучателей = НовоеЭлектронноеПисьмо.ПолучателиПисьма.Добавить();
		НоваяСтрокаПолучателей.Адрес = КонтактнаяИнформация;
		НоваяСтрокаПолучателей.Представление = Строка(Получатель) + "<" + КонтактнаяИнформация + ">";
		НоваяСтрокаПолучателей.Контакт = Получатель;
	Иначе
		НоваяСтрокаПолучателей = НовоеЭлектронноеПисьмо.ПолучателиПисьма.Добавить();
		НоваяСтрокаПолучателей.Адрес = Получатель;
	КонецЕсли;
			
	Если ТипЗнч(Сообщение.Текст) = Тип("Структура") Тогда		
		РезультатТекст = Сообщение.Текст.ТекстHTML;
		СтруктураВложений = Сообщение.Текст.СтруктураВложений;
		ПисьмоHTML             = Истина;
	Иначе		
		СтруктураВложений = Новый Структура();
		РезультатТекст = Сообщение.Текст;
		ПисьмоHTML = СтрНачинаетсяС(РезультатТекст, "<!DOCTYPE html") ИЛИ СтрНачинаетсяС(РезультатТекст, "<html");		
	КонецЕсли;
	
	Если ПисьмоHTML Тогда
		Если СтруктураВложений.Количество() > 0 Тогда
			ТелоПисьма = Новый Структура();
			ТелоПисьма.Вставить("ТекстHTML",         РезультатТекст);
			ТелоПисьма.Вставить("СтруктураВложений", СтруктураВложений);
			НовоеЭлектронноеПисьмо.ТекстHTML = ПоместитьВоВременноеХранилище(ТелоПисьма);
		Иначе
			НовоеЭлектронноеПисьмо.ТекстHTML = РезультатТекст;
		КонецЕсли;
		НовоеЭлектронноеПисьмо.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.HTML;
	Иначе
		НовоеЭлектронноеПисьмо.Текст     = РезультатТекст;
		НовоеЭлектронноеПисьмо.ТипТекста = Перечисления.ТипыТекстовЭлектронныхПисем.ПростойТекст;
	КонецЕсли;
	
	НовоеЭлектронноеПисьмо.Записать();
	уатРаботаСУведомлениями_уэ.СформироватьВложенияПоНастройкеКомплектов(НастройкаКомплектовДокументов, МассивДокументов, НовоеЭлектронноеПисьмо, ДокументОснование, ШаблонПисьма, Истина);
	
	НовоеЭлектронноеПисьмо.Записать();
	
	// Регистрация предмета взаимодействия
	МенеджерЗаписиПредмет = РегистрыСведений.ПредметыПапкиВзаимодействий.СоздатьМенеджерЗаписи();
	МенеджерЗаписиПредмет.Взаимодействие = НовоеЭлектронноеПисьмо.Ссылка;
	МенеджерЗаписиПредмет.Предмет = ДокументОснование;
	МенеджерЗаписиПредмет.Записать();
	
	Возврат НовоеЭлектронноеПисьмо.Ссылка;
	
КонецФункции

&НаКлиенте
Процедура ОтправитьПисьма(Команда)
	
	ОтправитьПисьмаНаСервере();
		
КонецПроцедуры

&НаСервере
Процедура ОтправитьПисьмаНаСервере()
	
	ВсеПустыеСтроки = ПолучателиУведомлений.НайтиСтроки(Новый Структура("ЭлектронноеПисьмо", Документы.ЭлектронноеПисьмоИсходящее.ПустаяСсылка()));
	Если ВсеПустыеСтроки.Количество() = ПолучателиУведомлений.Количество() Тогда
		ОбъектСообщения = Новый СообщениеПользователю();
		ОбъектСообщения.Текст = НСтр("ru = 'Письма не сформированы!'"); 
		ОбъектСообщения.Сообщить();
		Возврат;
	КонецЕсли;
	
	ВсеНевыбранныеСтроки = ПолучателиУведомлений.НайтиСтроки(Новый Структура("Выбрать", Ложь));
	Если ВсеНевыбранныеСтроки.Количество() = ПолучателиУведомлений.Количество() Тогда
		ОбъектСообщения = Новый СообщениеПользователю();
		ОбъектСообщения.Текст = НСтр("ru = 'Письма для отправки не выбраны!'"); 
		ОбъектСообщения.Сообщить();
		Возврат;
	КонецЕсли;
	 
	Для каждого ТекСтрока из ПолучателиУведомлений Цикл
		
		Если не ТекСтрока.Выбрать Тогда
			Продолжить;
		КонецЕсли;
		
		Если не ЗначениеЗаполнено(ТекСтрока.ЭлектронноеПисьмо) Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекСтрока.Отправлено Тогда
			Продолжить;
		КонецЕсли;
		
		ПисьмоОбъект = ТекСтрока.ЭлектронноеПисьмо.ПолучитьОбъект();
		Результат = Новый Структура;
		Результат.Вставить("ТекстСообщения", "");
		Результат.Вставить("ПисьмоОтправлено", Ложь);
		Результат.Вставить("ОшибкаПодключения", Ложь);
		
		ПараметрыПисьма = Взаимодействия.ПараметрыПисьмаДляОтправки(ПисьмоОбъект);
		Письмо = РаботаСПочтовымиСообщениями.ПодготовитьПисьмо(ПисьмоОбъект.УчетнаяЗапись, ПараметрыПисьма);
		Попытка
			РезультатОтправки = РаботаСПочтовымиСообщениями.ОтправитьПисьмо(ПисьмоОбъект.УчетнаяЗапись, Письмо);
		Исключение
			ТекстОшибки = РаботаСПочтовымиСообщениями.РасширенноеПредставлениеОшибки(
			ИнформацияОбОшибке(), ОбщегоНазначения.КодОсновногоЯзыка());
			
			ЗаписьЖурналаРегистрации(УправлениеЭлектроннойПочтой.СобытиеЖурналаРегистрации(),
			УровеньЖурналаРегистрации.Ошибка, , ПисьмоОбъект.Ссылка, ТекстОшибки);
			
			Результат.ТекстСообщения = КраткоеПредставлениеОшибки(ИнформацияОбОшибке());
			Результат.ОшибкаПодключения = Истина;
			Продолжить; 
		КонецПопытки;
		
		ПараметрыОбработкиОшибки = УправлениеЭлектроннойПочтой.ПараметрыОбработкиОшибкиОтправки();
		ПараметрыОбработкиОшибки.ПисьмоОбъект                      = ПисьмоОбъект;
		ПараметрыОбработкиОшибки.Ссылка                            = ПисьмоОбъект.Ссылка;
		ПараметрыОбработкиОшибки.ПредставлениеПисьма               = Взаимодействия.ПредставлениеПисьма(ПисьмоОбъект.Тема, ПисьмоОбъект.Дата);
		ПараметрыОбработкиОшибки.КоличествоПопыток                 = 0;
		ПараметрыОбработкиОшибки.ИнкрементироватьКоличествоПопыток = Ложь;
		ПараметрыОбработкиОшибки.СообщатьПользователю              = Истина;
		
		Если ЗначениеЗаполнено(РезультатОтправки.ОшибочныеПолучатели) Тогда
			Результат = УправлениеЭлектроннойПочтой.ОбработатьОшибкуОтправкиПисьма(ПараметрыОбработкиОшибки, РезультатОтправки.ОшибочныеПолучатели);
			Если Не Результат.ПисьмоОтправлено Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		Результат.ПисьмоОтправлено = Истина;
		
		НачатьТранзакцию();
		Попытка
			Если НЕ ПисьмоОбъект.УдалятьПослеОтправки Тогда
				ПисьмоОбъект.СтатусПисьма    = Перечисления.СтатусыИсходящегоЭлектронногоПисьма.Отправлено;
				ПисьмоОбъект.ДатаОтправления = ТекущаяДатаСеанса();
				ПисьмоОбъект.Записать(РежимЗаписиДокумента.Запись);
				
				//Взаимодействия.УстановитьПапкуЭлектронногоПисьма(Письмо, Взаимодействия.ОпределитьПапкуДляПисьма(Письмо));
			Иначе
				ПисьмоОбъект.Прочитать();
				ПисьмоОбъект.Удалить();
			КонецЕсли;
			ЗафиксироватьТранзакцию();
		Исключение
			ОтменитьТранзакцию();
			ВызватьИсключение;
		КонецПопытки;	
		
		ТекСтрока.Отправлено = Результат.ПисьмоОтправлено;	
		
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкиКомплектаДокументов(Команда)
	СохранитьНастройкиСервер(НастройкаКомплектовДокументов);
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиСервер(ВариантНастройки)
	
	Если не ПроверитьЗаполнениеПолучателей() Тогда
		 Возврат;
	КонецЕсли; 
	СтруктураНастроек = ПолучитьСтруктуруНастроек();
	Настройки = ВариантНастройки.Ссылка.ПолучитьОбъект();
	Настройки.НастройкиХранилище = Новый ХранилищеЗначения(СтруктураНастроек, Новый СжатиеДанных(9));
	Попытка
		Настройки.Записать();
	Исключение
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИЗакрытьНастройкиКомплектаДокументов(Команда)
	СохранитьНастройкиСервер(НастройкаКомплектовДокументов);
	ЭтаФорма.Закрыть();
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ПолучитьМенеджерПечати(Ссылка)
	ОбъектОписания = Метаданные.НайтиПоТипу(ТипЗнч(Ссылка));
	Возврат ОбъектОписания.Имя;
КонецФункции

&НаСервере
Процедура УстановитьДоступность()
	Элементы.ФлагСчетНаОплатуПокупателю.Доступность		 = ПравоДоступа("Редактирование", Метаданные.Документы.уатСчетНаОплатуПокупателю);
	Элементы.ФлагСчетНаОплатуПоставщика.Доступность		 = ПравоДоступа("Редактирование", Метаданные.Документы.уатСчетНаОплатуПоставщика);
	Элементы.ФлагРеализацияУслуг.Доступность			 = ПравоДоступа("Редактирование", Метаданные.Документы.уатРеализацияУслуг);
	Элементы.ФлагПоступлениеМатериаловУслуг.Доступность	 = ПравоДоступа("Редактирование", Метаданные.Документы.уатПоступлениеТоваровУслуг);
	
	Элементы.ФлагПлатежноеПоручениеВходящее.Доступность	 = ПравоДоступа("Редактирование", Метаданные.Документы.уатПлатежноеПоручениеВходящее);
	Элементы.ФлагПриходныйКассовыйОрдер.Доступность		 = ПравоДоступа("Редактирование", Метаданные.Документы.уатПриходныйКассовыйОрдер);
	Элементы.ФлагЗаявкаНаРасходованиеДС.Доступность		 = ПравоДоступа("Редактирование", Метаданные.Документы.уатЗаявкаНаРасходованиеДС);
	Элементы.ФлагПлатежноеПоручениеИсходящее.Доступность = ПравоДоступа("Редактирование", Метаданные.Документы.уатПлатежноеПоручениеИсходящее);
	Элементы.ФлагРасходныйКассовыйОрдер.Доступность		 = ПравоДоступа("Редактирование", Метаданные.Документы.уатРасходныйКассовыйОрдер);
	Элементы.ФлагТТД.Доступность		 				 = ПравоДоступа("Редактирование", Метаданные.Документы.уатТТД);
	Элементы.ФлагДоверенность.Доступность		 		 = ПравоДоступа("Редактирование", Метаданные.Документы.уатДоверенность);
	
	ФлагРедактированиеРеализацияУслуг				 = Элементы.ФлагРеализацияУслуг.Доступность;
	ФлагРедактированиеПоступлениеМатериаловУслуг	 = Элементы.ФлагПоступлениеМатериаловУслуг.Доступность;
	ФлагРедактированиеПлатежноеПоручениеВходящее	 = Элементы.ФлагПлатежноеПоручениеВходящее.Доступность;
	ФлагРедактированиеПриходныйКассовыйОрдер		 = Элементы.ФлагПриходныйКассовыйОрдер.Доступность;
	ФлагРедактированиеЗаявкаНаРасходованиеДС		 = Элементы.ФлагЗаявкаНаРасходованиеДС.Доступность;
	ФлагРедактированиеПлатежноеПоручениеИсходящее	 = Элементы.ФлагПлатежноеПоручениеИсходящее.Доступность;
	ФлагРедактированиеРасходныйКассовыйОрдер		 = Элементы.ФлагРасходныйКассовыйОрдер.Доступность;
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройки()
	
	УстановитьПривилегированныйРежим(Истина);
	СтруктураНастроек = ХранилищеНастроекДанныхФорм.Загрузить(
		"ОбщаяФорма.уатФормаОформленияДокументов_уэ", 
		"уатФормаОформленияДокументов_уэ",,Пользователи.АвторизованныйПользователь());
	
	Если ТипЗнч(СтруктураНастроек) <> Тип("Структура") Тогда
		СтруктураНастроек = Новый Структура();
		СтруктураНастроек.Свойство("НастройкаКомплектовДокументов", Справочники.уатНастройкиКомплектовДокументов_уэ.ПустаяСсылка());
	КонецЕсли;
	
	СтруктураНастроек.Свойство("НастройкаКомплектовДокументов", НастройкаКомплектовДокументов);
	ЗаполнитьПоНастройкеКомплектов();
КонецПроцедуры  

&НаСервере
Процедура СохранитьНастройки()
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураНастроек = Новый Структура();
	СтруктураНастроек.Вставить("НастройкаКомплектовДокументов",      НастройкаКомплектовДокументов);
	
	ХранилищеНастроекДанныхФорм.Сохранить(
		"ОбщаяФорма.уатФормаОформленияДокументов_уэ", 
		"уатФормаОформленияДокументов_уэ",
		СтруктураНастроек,,Пользователи.АвторизованныйПользователь());
		
КонецПроцедуры

&НаСервере
Функция ВыполнитьСозданиеДокументов()
	
	СоздатьСчетНаОплатуПокупателю      = ФлагСчетНаОплатуПокупателю И НЕ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.уатЗаказПеревозчику_уэ") И Элементы.ФлагСчетНаОплатуПокупателю.Доступность;
	СоздатьРеализацияУслуг             = ФлагРеализацияУслуг И НЕ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.уатЗаказПеревозчику_уэ") И Элементы.ФлагРеализацияУслуг.Доступность;
	СоздатьПлатежноеПоручениеВходящее  = ФлагПлатежноеПоручениеВходящее И ФлагРеализацияУслуг И НЕ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.уатЗаказПеревозчику_уэ") И Элементы.ФлагПлатежноеПоручениеВходящее.Доступность;
	СоздатьПриходныйКассовыйОрдер      = ФлагПриходныйКассовыйОрдер И ФлагРеализацияУслуг И НЕ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.уатЗаказПеревозчику_уэ") И Элементы.ФлагПриходныйКассовыйОрдер.Доступность;
	СоздатьСчетНаОплатуПоставщика      = ФлагСчетНаОплатуПоставщика И Элементы.ФлагСчетНаОплатуПоставщика.Доступность;
	СоздатьПоступлениеМатериаловУслуг  = ФлагПоступлениеМатериаловУслуг И Элементы.ФлагПоступлениеМатериаловУслуг.Доступность;
	СоздатьПлатежноеПоручениеИсходящее = ФлагПлатежноеПоручениеИсходящее И СоздатьПоступлениеМатериаловУслуг И Элементы.ФлагПлатежноеПоручениеИсходящее.Доступность;
	СоздатьРасходныйКассовыйОрдер      = ФлагРасходныйКассовыйОрдер И СоздатьПоступлениеМатериаловУслуг И Элементы.ФлагРасходныйКассовыйОрдер.Доступность;
	СоздатьЗаявкаНаРасходованиеДС      = ФлагЗаявкаНаРасходованиеДС И (СоздатьПоступлениеМатериаловУслуг ИЛИ СоздатьСчетНаОплатуПоставщика) И Элементы.ФлагЗаявкаНаРасходованиеДС.Доступность;
	СоздатьТТД						   = ФлагТТД И НЕ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.уатЗаказПеревозчику_уэ") И Элементы.ФлагТТД.Доступность;
	СоздатьДоверенность  			   = ФлагДоверенность И НЕ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.уатЗаказПеревозчику_уэ") И Элементы.ФлагДоверенность.Доступность;
	
	РежимЗаписи = ?(ФлагПровестиДокументы, РежимЗаписиДокумента.Проведение, РежимЗаписиДокумента.Запись);
	
	Объекты     = Новый Массив();
	Перевозчики = Неопределено;
		
	Для Каждого ТекДокумент Из МассивДокументов Цикл
		
		Если ТекДокумент.ДокСоздан Тогда
			Продолжить;
		КонецЕсли;
		
		ТекДокументСсылка = ТекДокумент.Ссылка;
		
		Если СоздатьСчетНаОплатуПокупателю Тогда
			уатРаботаСУведомлениями_уэ.ВыполнитьСозданиеСчетНаОплатуПокупателю(ТекДокументСсылка, Объекты, РежимЗаписи, СтрокиДокументовЗаказчика);
		КонецЕсли;
		
		Если СоздатьРеализацияУслуг Тогда
			уатРаботаСУведомлениями_уэ.ВыполнитьСозданиеРеализацияУслуг(ТекДокументСсылка, Объекты, РежимЗаписи, СтрокиДокументовЗаказчика);
		КонецЕсли;
		
		Если СоздатьПлатежноеПоручениеВходящее Тогда
			уатРаботаСУведомлениями_уэ.ВыполнитьСозданиеПлатежноеПоручениеВходящее(ТекДокументСсылка, Объекты, РежимЗаписи);
		КонецЕсли;
		
		Если СоздатьПриходныйКассовыйОрдер Тогда
			уатРаботаСУведомлениями_уэ.ВыполнитьСозданиеПриходныйКассовыйОрдер(ТекДокументСсылка, Объекты, РежимЗаписи);
		КонецЕсли;
		
		// Комплект документов перевозчика
		Если Элементы.ГруппаКомплектДокументовПеревозчика.Доступность Тогда
			Если НЕ (ТипЗнч(ТекДокументСсылка) = Тип("ДокументСсылка.уатМаршрутныйЛист") И уатРаботаСУведомлениями_уэ.ПроверитьТС(ТекДокументСсылка)) Тогда
				
				Если СоздатьСчетНаОплатуПоставщика Тогда
					уатРаботаСУведомлениями_уэ.ВыполнитьСозданиеСчетНаОплатуПоставщика(ТекДокументСсылка, Объекты, РежимЗаписи, СтрокиДокументовПеревозчика);
				КонецЕсли;
				
				Если СоздатьПоступлениеМатериаловУслуг Тогда
					уатРаботаСУведомлениями_уэ.ВыполнитьСозданиеПоступлениеТоваровУслуг(ТекДокументСсылка, Объекты, РежимЗаписи, СтрокиДокументовПеревозчика);
				КонецЕсли;
				
				Если СоздатьПлатежноеПоручениеИсходящее Тогда
					уатРаботаСУведомлениями_уэ.ВыполнитьСозданиеПлатежноеПоручениеИсходящее(ТекДокументСсылка, Объекты, РежимЗаписи);
				КонецЕсли;
				
				Если СоздатьРасходныйКассовыйОрдер Тогда
					уатРаботаСУведомлениями_уэ.ВыполнитьСозданиеРасходныйКассовыйОрдер(ТекДокументСсылка, Объекты, РежимЗаписи);
				КонецЕсли;
				
				Если СоздатьЗаявкаНаРасходованиеДС Тогда
					уатРаботаСУведомлениями_уэ.ВыполнитьСозданиеЗаявкаНаРасходованиеДС(ТекДокументСсылка, Объекты, РежимЗаписи, СоздатьПоступлениеМатериаловУслуг);
				КонецЕсли;
				
			КонецЕсли;
		КонецЕсли;
		
		Если СоздатьТТД Тогда
			уатРаботаСУведомлениями_уэ.ВыполнитьСозданиеТТД(ТекДокументСсылка, Объекты, РежимЗаписи);
		КонецЕсли;
		
		Если СоздатьДоверенность Тогда
			уатРаботаСУведомлениями_уэ.ВыполнитьСозданиеДоверенность(ТекДокументСсылка, Объекты, РежимЗаписи);
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат Объекты;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьНастройкуПечати()
	СразуНаПринтер = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("ОбщиеНастройкиПользователя", "ПечатьКомплектаСразуНаПринтер",Ложь);
	Возврат СразуНаПринтер;
КонецФункции

&НаСервереБезКонтекста
Функция ПодготовитьНастройкиДляПечати(МенеджерПечати, НастройкаКомплектовДокументов)
	
	ТипОбъекта = "ОбщаяФорма.уатФормаОформленияДокументов_уэ";
	//СохраненныеНастройкиПечатныхФорм = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиПечатныхФормКомплект", ТипОбъекта, Новый Массив);
	
	СохраненныеНастройкиПечатныхФорм = НастройкаКомплектовДокументов.НастройкиПечатиХранилище.Получить();      
	ИменаМакетов = "";
	
	Если СохраненныеНастройкиПечатныхФорм = Неопределено Тогда
		СохраненныеНастройкиПечатныхФорм = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("НастройкиПечатныхФормКомплект", ТипОбъекта, Новый Массив);
	КонецЕсли;
	
	Если ТипЗнч(СохраненныеНастройкиПечатныхФорм) = Тип("Массив") Тогда 
		Для Каждого ПечатнаяФорма Из СохраненныеНастройкиПечатныхФорм Цикл
			Если ПечатнаяФорма.Печатать И ПечатнаяФорма.МенеджерПечати = МенеджерПечати Тогда
				Если ПечатнаяФорма.Копий = 0 Тогда
					ПечатнаяФорма.Копий = 1;
				КонецЕсли;
				Если ПечатнаяФорма.МенеджерПечати <> ТипОбъекта Тогда
					Если ПечатнаяФорма.МенеджерПечати = "СтандартныеПодсистемы.ДополнительныеОтчетыИОбработки" Тогда
						ИмяМакета = "ВнешняяПечатнаяФорма." + ПечатнаяФорма.Имя;
					Иначе
						ИмяМакета = ПечатнаяФорма.МенеджерПечати + "." + ПечатнаяФорма.Имя;
					КонецЕсли;
				Иначе
					ИмяМакета = ПечатнаяФорма.Имя;
				КонецЕсли;
				
				// Для печати сразу на принтер строка с именами макетов
				// должна содержать столько имен макетов, сколько копий требуется напечатать.
				КоличествоМакетовДляПечати = ПечатнаяФорма.Копий;
				Для Сч =1 по КоличествоМакетовДляПечати Цикл
					ИменаМакетов = ИменаМакетов +"," + ИмяМакета;
				КонецЦикла;
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Возврат ИменаМакетов;
КонецФункции

&НаКлиенте
Процедура Печать(Объекты, ИменаМакетов, ПечатьСразуНаПринтер)

	Если ПечатьСразуНаПринтер Тогда
		
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечатиНаПринтер(
		"Документ.уатСчетНаОплатуПокупателю",
		ИменаМакетов,
		Объекты,
		Новый Структура("ФиксированныйКомплект", Истина));
		
	Иначе
		
		УправлениеПечатьюКлиент.ВыполнитьКомандуПечати(
		"Документ.уатСчетНаОплатуПокупателю",
		ИменаМакетов,
		Объекты,
		Неопределено,
		Новый Структура("ФиксированныйКомплект", Истина));
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимость()
	
	Если Не ФлагЭтоРедактирование И Не ФлагЭтоМассивДокументов Тогда
		Элементы.КонтрагентыДокументовЗаказчика.Видимость = НЕ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.уатЗаказПеревозчику_уэ");
	КонецЕсли;
	Элементы.ГруппаКомплектДокументовЗаказчика.Доступность = НЕ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.уатЗаказПеревозчику_уэ");
	Если ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.уатМаршрутныйЛист") И МассивДокументов.Количество() = 1 Тогда
		Элементы.ГруппаКомплектДокументовПеревозчика.Доступность = НЕ ПроверитьТС(ДокументОснование);
	КонецЕсли;
	Элементы.ФлагПлатежноеПоручениеВходящее.Доступность = ФлагРеализацияУслуг И ФлагРедактированиеРеализацияУслуг И ФлагРедактированиеПлатежноеПоручениеВходящее;
	Элементы.ФлагПриходныйКассовыйОрдер.Доступность     = ФлагРеализацияУслуг И ФлагРедактированиеРеализацияУслуг И ФлагРедактированиеПриходныйКассовыйОрдер;

	Элементы.ФлагПлатежноеПоручениеИсходящее.Доступность = ФлагПоступлениеМатериаловУслуг И ФлагРедактированиеПоступлениеМатериаловУслуг И ФлагРедактированиеПлатежноеПоручениеИсходящее;
	Элементы.ФлагРасходныйКассовыйОрдер.Доступность      = ФлагПоступлениеМатериаловУслуг И ФлагРедактированиеПоступлениеМатериаловУслуг И ФлагРедактированиеРасходныйКассовыйОрдер;
	Элементы.ФлагЗаявкаНаРасходованиеДС.Доступность      = ((ФлагПоступлениеМатериаловУслуг И ФлагРедактированиеПоступлениеМатериаловУслуг)
		ИЛИ (ФлагСчетНаОплатуПоставщика И Элементы.ФлагСчетНаОплатуПоставщика.Доступность)) И ФлагРедактированиеЗаявкаНаРасходованиеДС;

	Элементы.ФлагТТД.Доступность = НЕ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.уатЗаказПеревозчику_уэ");
	Элементы.ФлагДоверенность.Доступность = НЕ ТипЗнч(ДокументОснование) = Тип("ДокументСсылка.уатЗаказПеревозчику_уэ");
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПроверитьТС(ТекДокумент)
	Возврат ТекДокумент.ТС.ПринадлежностьТС = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное");
КонецФункции

&НаСервере
Функция КонтрагентыДокументов(НаименованиеТч, Знач таблЧасть)
	ДанныеЗаполнения = Новый Структура();
	ДанныеЗаполнения.Вставить("флВыбратьКонтрагента", Истина);
	ДанныеЗаполнения.Вставить("Основание", ДокументОснование);
	ДанныеЗаполнения.Вставить(НаименованиеТч, таблЧасть);
	
	ДополнительныеСвойства = Новый Структура();
	уатОбщегоНазначения.ОбработкаЗаполненияФормаВыборКонтрагента(ДанныеЗаполнения, ДополнительныеСвойства);
	
	СтруктураРезультата = Новый Структура("мсвКонтрагенты, ТаблицаУслуги");
	СтруктураРезультата.мсвКонтрагенты = Новый СписокЗначений();
	СтруктураРезультата.ТаблицаУслуги  = Новый СписокЗначений();
	Если ДополнительныеСвойства.Свойство("мсвКонтрагенты") Тогда
		тзКонтрагенты = ДополнительныеСвойства.мсвКонтрагенты;
		СтруктураРезультата.мсвКонтрагенты.ЗагрузитьЗначения(уатОбщегоНазначенияСервер.ПреобразоватьТаблицувМассивСтрок(тзКонтрагенты));
		
		тзТаблицаУслуги = ДополнительныеСвойства.ТаблицаУслуги;
		СтруктураРезультата.ТаблицаУслуги.ЗагрузитьЗначения(уатОбщегоНазначенияСервер.ПреобразоватьТаблицувМассивСтрок(тзТаблицаУслуги));
	ИначеЕсли ДополнительныеСвойства.Свойство("мсвТаблицаУслуги") Тогда
		тзКонтрагенты = ДополнительныеСвойства.мсвКонтрагент;
		СтруктураРезультата.мсвКонтрагенты.ЗагрузитьЗначения(уатОбщегоНазначенияСервер.ПреобразоватьТаблицувМассивСтрок(тзКонтрагенты));
		
		тзТаблицаУслуги = ДополнительныеСвойства.мсвТаблицаУслуги;
		СтруктураРезультата.ТаблицаУслуги.ЗагрузитьЗначения(уатОбщегоНазначенияСервер.ПреобразоватьТаблицувМассивСтрок(тзТаблицаУслуги));
	КонецЕсли;
	
	Возврат СтруктураРезультата;
КонецФункции

&НаКлиенте
Процедура ПослеЗакрытияФормыВыбораКонтрагентовЗаказчика(ОписаниеПараметра, ДополнительныеПараметры) Экспорт
	СтрокиДокументовЗаказчика.Очистить();
	Если ТипЗнч(ОписаниеПараметра) = Тип("Структура") Тогда
		СтрокиДокументовЗаказчика.ЗагрузитьЗначения(ОписаниеПараметра.МассивПараметров);
		КонтрагентыЗаказчика.СохраненныеКонтрагенты = ОписаниеПараметра.Контрагенты;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыВыбораКонтрагентовПеревозчика(ОписаниеПараметра, ДополнительныеПараметры) Экспорт
	СтрокиДокументовПеревозчика.Очистить();
	Если ТипЗнч(ОписаниеПараметра) = Тип("Структура") Тогда
		СтрокиДокументовПеревозчика.ЗагрузитьЗначения(ОписаниеПараметра.МассивПараметров);
		КонтрагентыПеревозчика.СохраненныеКонтрагенты = ОписаниеПараметра.Контрагенты;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПолучитьСтрокиДокументов(КонтрагентыДокумента, Услуги, СтрокиДокументов, СохраненныеКонтрагенты, ВидОперации = 0)
	
	Контрагенты = Новый ТаблицаЗначений();
	Контрагенты.Колонки.Добавить("ФлагВыбора",		 Новый ОписаниеТипов("Булево"));
	Контрагенты.Колонки.Добавить("НомерКомплекта",	 Новый ОписаниеТипов("Число"));
	Контрагенты.Колонки.Добавить("Заказ",			 Новый ОписаниеТипов("ДокументСсылка.уатЗаказГрузоотправителя"));
	Контрагенты.Колонки.Добавить("Контрагент",		 Новый ОписаниеТипов("СправочникСсылка.ПодразделенияОрганизаций, СправочникСсылка.Контрагенты"));
	Контрагенты.Колонки.Добавить("Договор",			 Новый ОписаниеТипов("СправочникСсылка.ДоговорыКонтрагентов"));
	Контрагенты.Колонки.Добавить("Услуга",			 Новый ОписаниеТипов("СправочникСсылка.Номенклатура"));

	Для Каждого ТекКонтрагент Из КонтрагентыДокумента Цикл
		НоваяСтрока = Контрагенты.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекКонтрагент.Значение);
		НоваяСтрока.ФлагВыбора = Истина;
	КонецЦикла;

	тзКонтрагенты = Контрагенты.Скопировать();
	тзКонтрагенты.Свернуть("ФлагВыбора, НомерКомплекта, Заказ, Контрагент, Договор");
	тзКонтрагенты.Сортировать("ФлагВыбора, НомерКомплекта");
	
	мсвКонтрагенты	 = Новый Массив();
	МассивПараметров = Новый Массив();
	
	Для Каждого текСтрока Из тзКонтрагенты Цикл
		Если НЕ текСтрока.ФлагВыбора Тогда
			Продолжить;
		КонецЕсли;
		
		Комплект   = Контрагенты.НайтиСтроки(Новый Структура("ФлагВыбора, НомерКомплекта, Заказ, Контрагент, Договор",
			Истина, текСтрока.НомерКомплекта, текСтрока.Заказ, текСтрока.Контрагент, текСтрока.Договор));
		Контрагент = текСтрока.Контрагент;
		Договор    = текСтрока.Договор;
		Заказ      = текСтрока.Заказ;
		мсвУслуги  = Новый Массив();
		Для Каждого текСтрокаКомплект Из Комплект Цикл
			
			Для Каждого Услуга Из Услуги Цикл
				ТекУслуга = Услуга.Значение;
				Если НЕ ТекУслуга.Свойство("НоменклатураУслуги")
					И ТекУслуга.Номенклатура <> текСтрокаКомплект.Услуга Тогда
					Продолжить;
				ИначеЕсли ТекУслуга.Свойство("НоменклатураУслуги")
						И ТекУслуга.НоменклатураУслуги <> текСтрокаКомплект.Услуга Тогда
					Продолжить;
				КонецЕсли;
				
				Если ВидОперации = 0 Тогда
					Если ТекУслуга.Свойство("ЗаказНаТС") Тогда
						СтруктураЗаказ = уатРаботаСУведомлениями_уэ.ПолучитьКонтрагентаиДоговор(ТекУслуга.ЗаказНаТС);
						мДоговор       = СтруктураЗаказ.ДоговорКонтрагента;
						мКонтрагент    = СтруктураЗаказ.Контрагент;
					Иначе
						мДоговор    = Договор;
						мКонтрагент = Контрагент;
					Конецесли;
				Иначе
					Если ТекУслуга.Свойство("Договор") Тогда
						мДоговор = ТекУслуга.Договор;
					Иначе
						мДоговор = Договор;
					КонецЕсли;
					Если ТекУслуга.Свойство("Контрагент") Тогда
						мКонтрагент = ТекУслуга.Контрагент;
					Иначе
						мКонтрагент = Контрагент;
					КонецЕсли;
				КонецЕсли;
				Если мКонтрагент = Контрагент
					И мДоговор = Договор Тогда
					мсвУслуги.Добавить(ТекУслуга);
				КонецЕсли;
			КонецЦикла;
			мсвКонтрагенты.Добавить(Новый Структура("НомерКомплекта, Заказ, Контрагент, Договор, Услуга",
				текСтрокаКомплект.НомерКомплекта, текСтрокаКомплект.Заказ, текСтрокаКомплект.Контрагент, текСтрокаКомплект.Договор, текСтрокаКомплект.Услуга));
		КонецЦикла;
		
		ПараметрыФормы = Новый Структура("ДокументОснование, Услуги, Контрагент, Договор, ЗаказГрузоотправителя",
		ДокументОснование, мсвУслуги, Контрагент, Договор, Заказ);
		МассивПараметров.Добавить(ПараметрыФормы);
	КонецЦикла;
	
	СтрокиДокументов.ЗагрузитьЗначения(МассивПараметров);
	СохраненныеКонтрагенты = мсвКонтрагенты;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСписокПодчиненныхОбъектов(ДокументОснование)
	
	Если Не ЗначениеЗаполнено(ДокументОснование) Тогда
		Возврат;
	КонецЕсли;
	
	РезультатЗапроса = уатРаботаСУведомлениями_уэ.ОбъектыПоКритериюОтбора(ДокументОснование);
	Если РезультатЗапроса = Неопределено ИЛИ РезультатЗапроса.Пустой() Тогда
		Возврат;
	КонецЕсли;
	
	Выборка = РезультатЗапроса.Выбрать();
	
	ТипСчетНаОплатуПокупателю      = Тип("ДокументСсылка.уатСчетНаОплатуПокупателю");
	ТипРеализацияУслуг             = Тип("ДокументСсылка.уатРеализацияУслуг");
	ТипПлатежноеПоручениеВходящее  = Тип("ДокументСсылка.уатПлатежноеПоручениеВходящее");
	ТипПриходныйКассовыйОрдер      = Тип("ДокументСсылка.уатПриходныйКассовыйОрдер");
	ТипСчетНаОплатуПоставщика      = Тип("ДокументСсылка.уатСчетНаОплатуПоставщика");
	ТипПоступлениеТоваровУслуг     = Тип("ДокументСсылка.уатПоступлениеТоваровУслуг");
	ТипЗаявкаНаРасходованиеДС      = Тип("ДокументСсылка.уатЗаявкаНаРасходованиеДС");
	ТипПлатежноеПоручениеИсходящее = Тип("ДокументСсылка.уатПлатежноеПоручениеИсходящее");
	ТипРасходныйКассовыйОрдер      = Тип("ДокументСсылка.уатРасходныйКассовыйОрдер");
	ТипТТД                         = Тип("ДокументСсылка.уатТТД");
	ТипДоверенность                = Тип("ДокументСсылка.уатДоверенность");
	
	СоответсвиеДокументов = Новый Соответствие();
	СоответсвиеДокументов.Вставить(ТипСчетНаОплатуПокупателю,      Элементы.ГруппаСчетНаОплатуПокупателюДокументы);
	СоответсвиеДокументов.Вставить(ТипРеализацияУслуг,             Элементы.ГруппаРеализацияУслугДокументы);
	СоответсвиеДокументов.Вставить(ТипПлатежноеПоручениеВходящее,  Элементы.ГруппаПлатежноеПоручениеВходящееДокументы);
	СоответсвиеДокументов.Вставить(ТипПриходныйКассовыйОрдер,      Элементы.ГруппаПриходныйКассовыйОрдерДокументы);
	СоответсвиеДокументов.Вставить(ТипСчетНаОплатуПоставщика,      Элементы.ГруппаСчетНаОплатуПоставщикаДокументы);
	СоответсвиеДокументов.Вставить(ТипПоступлениеТоваровУслуг,     Элементы.ГруппаПоступлениеТоваровУслугДокументы);
	СоответсвиеДокументов.Вставить(ТипЗаявкаНаРасходованиеДС,      Элементы.ГруппаЗаявкаНаРасходованиеДСДокументы);
	СоответсвиеДокументов.Вставить(ТипПлатежноеПоручениеИсходящее, Элементы.ГруппаПлатежноеПоручениеИсходящееДокументы);
	СоответсвиеДокументов.Вставить(ТипРасходныйКассовыйОрдер,      Элементы.ГруппаРасходныйКассовыйОрдерДокументы);
	СоответсвиеДокументов.Вставить(ТипТТД,                         Элементы.ГруппаТТДДокументы);
	СоответсвиеДокументов.Вставить(ТипДоверенность,                Элементы.ГруппаДоверенностьДокументы);

	Пока Выборка.Следующий() Цикл
		
		Группа = СоответсвиеДокументов.Получить(ТипЗнч(Выборка.Ссылка)); 
		Если Группа <> Неопределено Тогда
			ЗаполнитьСписокПодчиненныхОбъектов(Выборка.Ссылка);
		Иначе
			Продолжить;
		КонецЕсли;
		
		мМассивДокументов = МассивДокументов.НайтиСтроки(Новый Структура("Ссылка", Выборка.Ссылка));
		Если мМассивДокументов.Количество() = 0 Тогда
			НоваяСтрока = МассивДокументов.Добавить();
			НоваяСтрока.Ссылка = Выборка.Ссылка;
			НоваяСтрока.Группа = "Документ" + СчетчикДокументов;
			НоваяСтрока.ДокСоздан = Истина;
			ДобавитьЭлементДекорациюДокумента(Выборка.Ссылка, Выборка.Представление, СчетчикДокументов, Группа);
		КонецЕсли;
		
		СчетчикДокументов = СчетчикДокументов + 1;
		
	КонецЦикла;
	
	МассивДокументов.Сортировать("Ссылка");
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьЭлементДекорациюДокумента(Ссылка, Представление, Счетчик, Группа)
	
	Элемент = Элементы.Добавить("Документ" + Счетчик, Тип("ДекорацияФормы"), Группа);
	Элемент.Вид         = ВидДекорацииФормы.Надпись;
	Элемент.Заголовок   = Представление;
	Элемент.Гиперссылка = Истина;
	
	Элемент.УстановитьДействие("Нажатие", "ДокументНажатие");
КонецПроцедуры

&НаКлиенте
Процедура МассивДокументовВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущийЭлемент.Имя = "МассивДокументовФлагВыбора" Тогда
		СтандартнаяОбработка = Ложь;
		Если Элемент.ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		Элемент.ТекущиеДанные.ФлагВыбора = НЕ Элемент.ТекущиеДанные.ФлагВыбора;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруНастроек()
	      
	СтруктураНастроек = Новый Структура(
		ПолучитьНастройкиФормыКомплектов());
	
	ЗаполнитьЗначенияСвойств(СтруктураНастроек, ЭтотОбъект);	
	СтруктураПолучатели = ТаблицаВМассивСтруктур(ПолучателиУведомлений.Выгрузить());
	СтруктураНастроек.Вставить("СтруктураПолучатели", СтруктураПолучатели);
	
	Возврат СтруктураНастроек;
	
КонецФункции

&НаСервере
Функция ТаблицаВМассивСтруктур(Знач ТаблицаЗначений)
	Результат = Новый Массив;
	
	ИменаКолонок = "";
	Для Каждого Колонка Из ТаблицаЗначений.Колонки Цикл
		ИменаКолонок = ИменаКолонок + "," + Колонка.Имя;
	КонецЦикла;
	ИменаКолонок = Сред(ИменаКолонок, 2);
	
	Для Каждого Строка Из ТаблицаЗначений Цикл
		СтруктураСтроки = Новый Структура(ИменаКолонок);
		ЗаполнитьЗначенияСвойств(СтруктураСтроки, Строка);
		Результат.Добавить(СтруктураСтроки);
	КонецЦикла;
	
	Возврат Результат;
КонецФункции

&НаСервере
Функция ПроверитьЗаполнениеПолучателей()
	
	Для каждого Строка из ПолучателиУведомлений Цикл
		Если НЕ ЗначениеЗаполнено(Строка.ТипПолучателя) Тогда
			ОбъектСообщения = Новый СообщениеПользователю();
			ОбъектСообщения.Текст = НСтр("ru = 'Заполните тип получателя в строке '") +  (ПолучателиУведомлений.Индекс(Строка)+1); 
			ОбъектСообщения.Сообщить();
			Возврат Ложь;
		КонецЕсли;
		
		Если Строка.ТипПолучателя = Перечисления.уатТипыПолучателейУведомлений_уэ.ИндивидуальныйПолучатель И НЕ ЗначениеЗаполнено(Строка.Получатель) Тогда
			ОбъектСообщения = Новый СообщениеПользователю();
			ОбъектСообщения.Текст = НСтр("ru = 'Заполните получателя в строке '") + (ПолучателиУведомлений.Индекс(Строка)+1); 
			ОбъектСообщения.Сообщить();
			Возврат Ложь;
		КонецЕсли;
		
		Если НЕ ЗначениеЗаполнено(Строка.ШаблонЭлектронногоПисьма) Тогда
			ОбъектСообщения = Новый СообщениеПользователю();
			ОбъектСообщения.Текст = НСтр("ru = 'Заполните шаблон в строке '") + (ПолучателиУведомлений.Индекс(Строка)+1); 
			ОбъектСообщения.Сообщить();
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
КонецФункции

&НаСервере
Функция ПолучитьНастройкиФормыКомплектов() 
	
	НастройкиФормыКомплектов = "ФлагПровестиДокументы,
		|ФлагСчетНаОплатуПокупателю,
		|ФлагРеализацияУслуг,
		|ФлагПлатежноеПоручениеВходящее,
		|ФлагПриходныйКассовыйОрдер,
		|ФлагСчетНаОплатуПоставщика,
		|ФлагПоступлениеМатериаловУслуг,
		|ФлагПлатежноеПоручениеИсходящее,
		|ФлагРасходныйКассовыйОрдер,
		|ФлагЗаявкаНаРасходованиеДС,
		|ФлагТТД,
		|ФлагДоверенность,
		|ФлагОтправлятьДокументы";
	
		Возврат НастройкиФормыКомплектов;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПоНастройкеКомплектов()
	
	ПолучателиУведомлений.Очистить();
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураНастроек = ЭтотОбъект.НастройкаКомплектовДокументов.НастройкиХранилище.Получить();

	Если ТипЗнч(СтруктураНастроек) <> Тип("Структура") Тогда
		СтруктураНастроек = Новый Структура();
		СтруктураНастроек.Вставить("ФлагПровестиДокументы",           Ложь);
		СтруктураНастроек.Вставить("ФлагСчетНаОплатуПокупателю",      Истина);
		СтруктураНастроек.Вставить("ФлагРеализацияУслуг",             Истина);
		СтруктураНастроек.Вставить("ФлагПлатежноеПоручениеВходящее",  Истина);
		СтруктураНастроек.Вставить("ФлагПриходныйКассовыйОрдер",      Истина);
		СтруктураНастроек.Вставить("ФлагСчетНаОплатуПоставщика",      Истина);
		СтруктураНастроек.Вставить("ФлагПоступлениеМатериаловУслуг",  Истина);
		СтруктураНастроек.Вставить("ФлагПлатежноеПоручениеИсходящее", Истина);
		СтруктураНастроек.Вставить("ФлагРасходныйКассовыйОрдер",      Истина);
		СтруктураНастроек.Вставить("ФлагЗаявкаНаРасходованиеДС",      Истина);
		СтруктураНастроек.Вставить("ФлагТТД",      					  Истина);
		СтруктураНастроек.Вставить("ФлагДоверенность",  			  Истина);
		СтруктураНастроек.Вставить("ФлагОтправлятьДокументы",  		  Ложь);
	КонецЕсли;
	
	СтруктураНастроек.Свойство("ФлагСчетНаОплатуПокупателю",      ФлагСчетНаОплатуПокупателю);
	СтруктураНастроек.Свойство("ФлагРеализацияУслуг",             ФлагРеализацияУслуг);
	СтруктураНастроек.Свойство("ФлагПлатежноеПоручениеВходящее",  ФлагПлатежноеПоручениеВходящее);
	СтруктураНастроек.Свойство("ФлагПриходныйКассовыйОрдер",      ФлагПриходныйКассовыйОрдер);
	СтруктураНастроек.Свойство("ФлагСчетНаОплатуПоставщика",      ФлагСчетНаОплатуПоставщика);
	СтруктураНастроек.Свойство("ФлагПоступлениеМатериаловУслуг",  ФлагПоступлениеМатериаловУслуг);
	СтруктураНастроек.Свойство("ФлагПлатежноеПоручениеИсходящее", ФлагПлатежноеПоручениеИсходящее);
	СтруктураНастроек.Свойство("ФлагРасходныйКассовыйОрдер",      ФлагРасходныйКассовыйОрдер);
	СтруктураНастроек.Свойство("ФлагЗаявкаНаРасходованиеДС",      ФлагЗаявкаНаРасходованиеДС);
	СтруктураНастроек.Свойство("ФлагПровестиДокументы",           ФлагПровестиДокументы);
	СтруктураНастроек.Свойство("ФлагТТД",           			  ФлагТТД);
	СтруктураНастроек.Свойство("ФлагДоверенность",           	  ФлагДоверенность);
	СтруктураНастроек.Свойство("ФлагОтправлятьДокументы",  		  ФлагОтправлятьДокументы);
	
	Если СтруктураНастроек.Свойство("СтруктураПолучатели") Тогда
		Для каждого ТекСтрока из СтруктураНастроек.СтруктураПолучатели Цикл
			НоваяСтрока = ПолучателиУведомлений.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры  
 
&НаСервере
Процедура УстановитьВидимостьВкладкиОтправка()
	Элементы.ОтправкаПисем.Видимость = ФлагОтправлятьДокументы; 
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСписокТиповПолучателей()
	
	Элементы.ПолучателиУведомленийТипПолучателя.СписокВыбора.Очистить();
	
	Если ТипЗнч(ДокументОснование) = тип("ДокументСсылка.уатЗаказГрузоотправителя") Тогда
		Элементы.ПолучателиУведомленийТипПолучателя.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыПолучателейУведомлений_уэ.Грузоотправитель"));
		Элементы.ПолучателиУведомленийТипПолучателя.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыПолучателейУведомлений_уэ.КонтактноеЛицоГрузоотправителя"));
		Элементы.ПолучателиУведомленийТипПолучателя.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыПолучателейУведомлений_уэ.ОтветственныйМенеджерГрузоотправителя"));
		Элементы.ПолучателиУведомленийТипПолучателя.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыПолучателейУведомлений_уэ.Грузополучатель"));
		Элементы.ПолучателиУведомленийТипПолучателя.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыПолучателейУведомлений_уэ.КонтактноеЛицоГрузополучателя"));
		Элементы.ПолучателиУведомленийТипПолучателя.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыПолучателейУведомлений_уэ.ОтветственныйМенеджерГрузополучателя"));
		Элементы.ПолучателиУведомленийТипПолучателя.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыПолучателейУведомлений_уэ.Контрагент"));
		Элементы.ПолучателиУведомленийТипПолучателя.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыПолучателейУведомлений_уэ.ОтветственныйМенеджерКонтрагента"));
	ИначеЕсли ТипЗнч(ДокументОснование) = тип("ДокументСсылка.уатЗаказПеревозчику_уэ") Тогда
		Элементы.ПолучателиУведомленийТипПолучателя.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыПолучателейУведомлений_уэ.Перевозчик"));
		Элементы.ПолучателиУведомленийТипПолучателя.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыПолучателейУведомлений_уэ.КонтактноеЛицоПеревозчика"));
	ИначеЕсли ТипЗнч(ДокументОснование) = тип("ДокументСсылка.уатМаршрутныйЛист") Тогда
		Элементы.ПолучателиУведомленийТипПолучателя.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыПолучателейУведомлений_уэ.Водитель"));
		Элементы.ПолучателиУведомленийТипПолучателя.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыПолучателейУведомлений_уэ.Перевозчик"));
		Элементы.ПолучателиУведомленийТипПолучателя.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыПолучателейУведомлений_уэ.КонтактноеЛицоПеревозчика"));
	ИначеЕсли ТипЗнч(ДокументОснование) = тип("ДокументСсылка.уатПотребностьВПеревозке_уэ") Тогда
		Элементы.ПолучателиУведомленийТипПолучателя.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыПолучателейУведомлений_уэ.Контрагент"));
		Элементы.ПолучателиУведомленийТипПолучателя.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыПолучателейУведомлений_уэ.КонтактноеЛицоКонтрагента"));
	ИначеЕсли ТипЗнч(ДокументОснование) = тип("ДокументСсылка.уатСтраховойСертификат_уэ") Тогда
		Элементы.ПолучателиУведомленийТипПолучателя.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыПолучателейУведомлений_уэ.Страховщик"));
		Элементы.ПолучателиУведомленийТипПолучателя.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыПолучателейУведомлений_уэ.КонтактноеЛицоСтраховщика"));
		Элементы.ПолучателиУведомленийТипПолучателя.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыПолучателейУведомлений_уэ.ОтветственныйМенеджерСтраховщика"));
	ИначеЕсли ТипЗнч(ДокументОснование) = тип("СправочникСсылка.уатСопроводительныеДокументы") Тогда
		Элементы.ПолучателиУведомленийТипПолучателя.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыПолучателейУведомлений_уэ.Контрагент"));
		Элементы.ПолучателиУведомленийТипПолучателя.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыПолучателейУведомлений_уэ.КонтактноеЛицоКонтрагента"));
	ИначеЕсли ТипЗнч(ДокументОснование) = тип("ДокументСсылка.уатПакетСопроводительныхДокументов") Тогда
		Элементы.ПолучателиУведомленийТипПолучателя.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыПолучателейУведомлений_уэ.Отправитель"));
		Элементы.ПолучателиУведомленийТипПолучателя.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыПолучателейУведомлений_уэ.Получатель"));
	КонецЕсли;

	Если ТипЗнч(ДокументОснование) = тип("ДокументСсылка.уатМаршрутныйЛист")
		Или ТипЗнч(ДокументОснование) = тип("ДокументСсылка.уатАктОтгрузки_уэ")
		Или ТипЗнч(ДокументОснование) = тип("ДокументСсылка.уатАктПриемки_уэ") 
		Или ТипЗнч(ДокументОснование) = тип("ДокументСсылка.уатЗаказПеревозчику_уэ")
		Или  ТипЗнч(ДокументОснование) = тип("ДокументСсылка.уатСтраховойСертификат_уэ") Тогда
		Элементы.ПолучателиУведомленийТипПолучателя.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыПолучателейУведомлений_уэ.Грузоотправитель"),
			НСтр("ru = 'Грузоотправитель (из Заказа на ТС)'; en = 'Consignor (from trucking order)'"));
		Элементы.ПолучателиУведомленийТипПолучателя.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыПолучателейУведомлений_уэ.КонтактноеЛицоГрузоотправителя"),
			НСтр("ru = 'Контактное лицо грузоотправителя (из Заказа на ТС)'; en = 'Consignor contacts (from trucking order)'"));
		Элементы.ПолучателиУведомленийТипПолучателя.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыПолучателейУведомлений_уэ.ОтветственныйМенеджерГрузоотправителя"),
			НСтр("ru = 'Отв. менеджер грузоотправителя (из Заказа на ТС)'; en = 'Consignor''s main manager (from trucking order)'"));
		Элементы.ПолучателиУведомленийТипПолучателя.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыПолучателейУведомлений_уэ.Грузополучатель"),
			НСтр("ru = 'Грузополучатель (из Заказа на ТС)'; en = 'Consignee (from trucking order)'"));
		Элементы.ПолучателиУведомленийТипПолучателя.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыПолучателейУведомлений_уэ.КонтактноеЛицоГрузополучателя"),
			НСтр("ru = 'Контактное лицо грузополучателя (из Заказа на ТС)'; en = 'Consignee contacts (from trucking order)'"));
		Элементы.ПолучателиУведомленийТипПолучателя.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыПолучателейУведомлений_уэ.ОтветственныйМенеджерГрузополучателя"),
			НСтр("ru = 'Отв. менеджер грузополучателя (из Заказа на ТС)'; en = 'Consignee''s main manager (from trucking order)'"));
		Элементы.ПолучателиУведомленийТипПолучателя.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыПолучателейУведомлений_уэ.Контрагент"),
			НСтр("ru = 'Контрагент (из Заказа на ТС)'; en = 'Counterparty (from trucking order)'"));
		Элементы.ПолучателиУведомленийТипПолучателя.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыПолучателейУведомлений_уэ.ОтветственныйМенеджерКонтрагента"),
			НСтр("ru = 'Отв. менеджер контрагента (из Заказа на ТС)'; en = 'Counterparty''s main manager (from trucking order)'"));
	КонецЕсли;
		
	Если ФлагЭтоРедактирование Тогда
		Элементы.ПолучателиУведомленийТипПолучателя.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыПолучателейУведомлений_уэ.Грузоотправитель"));
		Элементы.ПолучателиУведомленийТипПолучателя.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыПолучателейУведомлений_уэ.КонтактноеЛицоГрузоотправителя"));
		Элементы.ПолучателиУведомленийТипПолучателя.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыПолучателейУведомлений_уэ.ОтветственныйМенеджерГрузоотправителя"));
		Элементы.ПолучателиУведомленийТипПолучателя.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыПолучателейУведомлений_уэ.Грузополучатель"));
		Элементы.ПолучателиУведомленийТипПолучателя.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыПолучателейУведомлений_уэ.КонтактноеЛицоГрузополучателя"));
		Элементы.ПолучателиУведомленийТипПолучателя.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыПолучателейУведомлений_уэ.ОтветственныйМенеджерГрузополучателя"));
		Элементы.ПолучателиУведомленийТипПолучателя.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыПолучателейУведомлений_уэ.Контрагент"));
		Элементы.ПолучателиУведомленийТипПолучателя.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыПолучателейУведомлений_уэ.ОтветственныйМенеджерКонтрагента"));
		Элементы.ПолучателиУведомленийТипПолучателя.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыПолучателейУведомлений_уэ.Ответственный"));
		Элементы.ПолучателиУведомленийТипПолучателя.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыПолучателейУведомлений_уэ.Перевозчик"));
		Элементы.ПолучателиУведомленийТипПолучателя.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыПолучателейУведомлений_уэ.КонтактноеЛицоПеревозчика"));
		Элементы.ПолучателиУведомленийТипПолучателя.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыПолучателейУведомлений_уэ.КонтактноеЛицоКонтрагента"));
		//Элементы.ПолучателиУведомленийТипПолучателя.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыПолучателейУведомлений_уэ.Отправитель"));
		//Элементы.ПолучателиУведомленийТипПолучателя.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыПолучателейУведомлений_уэ.Получатель"));
		Элементы.ПолучателиУведомленийТипПолучателя.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыПолучателейУведомлений_уэ.Водитель"));
		Элементы.ПолучателиУведомленийТипПолучателя.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыПолучателейУведомлений_уэ.Перевозчик"));
		Элементы.ПолучателиУведомленийТипПолучателя.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыПолучателейУведомлений_уэ.КонтактноеЛицоПеревозчика"));
		Элементы.ПолучателиУведомленийТипПолучателя.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыПолучателейУведомлений_уэ.Страховщик"));
		Элементы.ПолучателиУведомленийТипПолучателя.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыПолучателейУведомлений_уэ.КонтактноеЛицоСтраховщика"));
		Элементы.ПолучателиУведомленийТипПолучателя.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыПолучателейУведомлений_уэ.ОтветственныйМенеджерСтраховщика"));		
	КонецЕсли;
	
	Элементы.ПолучателиУведомленийТипПолучателя.СписокВыбора.Добавить(ПредопределенноеЗначение("Перечисление.уатТипыПолучателейУведомлений_уэ.ИндивидуальныйПолучатель"));
		
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступныеТипыИндивидуальныхПолучателей()
	
	ТекОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.КонтактныеЛица,
	| СправочникСсылка.Пользователи, СправочникСсылка.Контрагенты, Строка, СправочникСсылка.ФизическиеЛица");

	Элементы.ПолучателиУведомленийПолучатель.ОграничениеТипа = ТекОграничениеТипа;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПредставлениеДляУчетнойЗаписи(УчетнаяЗапись)

	Если Не ЗначениеЗаполнено(УчетнаяЗапись) Тогда
		Возврат "";
	КонецЕсли;

	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ
	|	УчетныеЗаписиЭлектроннойПочты.ИмяПользователя,
	|	УчетныеЗаписиЭлектроннойПочты.АдресЭлектроннойПочты
	|ИЗ
	|	Справочник.УчетныеЗаписиЭлектроннойПочты КАК УчетныеЗаписиЭлектроннойПочты
	|ГДЕ
	|	УчетныеЗаписиЭлектроннойПочты.Ссылка = &УчетнаяЗапись";
	Запрос.УстановитьПараметр("УчетнаяЗапись", УчетнаяЗапись);
	Выборка = Запрос.Выполнить().Выбрать();
	Выборка.Следующий();
	
	Представление = Выборка.ИмяПользователя;
	Если ПустаяСтрока(Представление) Тогда
		Возврат Выборка.АдресЭлектроннойПочты;
	Иначе
		Возврат Представление + " <" + Выборка.АдресЭлектроннойПочты + ">";
	КонецЕсли;

КонецФункции

#КонецОбласти
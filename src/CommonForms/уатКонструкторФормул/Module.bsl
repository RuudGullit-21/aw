
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если НЕ Параметры.Свойство("ЗначениеИсточника") Тогда
		Отказ = Истина;
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	ЗначениеИсточника = Параметры.ЗначениеИсточника;
	ПараметрВыработкиФормулы = Параметры.ПараметрВыработки;
	Заголовок = Заголовок + Параметры.ЗначениеИсточника;
	СпособРасчетаПараметровВыработки = Параметры.СпособРасчетаПараметровВыработки;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если ЗначениеЗаполнено(ЗначениеИсточника) Тогда
		ВставитьТекстВФормулу(ЗначениеИсточника);
	КонецЕсли;
	
	ИнициализацияФормы();
	УстановитьВидимость();
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыОператоры

&НаКлиенте
Процедура ОператорыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВставитьОператорВФормулу();
	
КонецПроцедуры

&НаКлиенте
Процедура ОператорыНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	Если ЗначениеЗаполнено(Элементы.Операторы.ТекущиеДанные.Оператор) Тогда
		ПараметрыПеретаскивания.Значение = Элементы.Операторы.ТекущиеДанные.Оператор;
	Иначе
		Выполнение = Ложь;
	КонецЕсли;         
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыОперанды

&НаКлиенте
Процедура ОперандыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВставитьОперандВФормулу(Элементы.Операнды.ТекущиеДанные.Значение, "[");
	
КонецПроцедуры

&НаКлиенте
Процедура ОперандыНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ПараметрыПеретаскивания.Значение = уатРаботаСФормулами.ПолучитьТекстОперандаДляВставки(Элементы.Операнды.ТекущиеДанные.Значение, "[");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПараметрыВыработки

&НаКлиенте
Процедура ПараметрыВыработкиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ВставитьОперандВФормулу(Элементы.ПараметрыВыработки.ТекущиеДанные.Значение, "{");
	
КонецПроцедуры

&НаКлиенте
Процедура ПараметрыВыработкиНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ПараметрыПеретаскивания.Значение = уатРаботаСФормулами.ПолучитьТекстОперандаДляВставки(Элементы.ПараметрыВыработки.ТекущиеДанные.Значение, "{");
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПроверитьФормулу(Команда)
	
	Если уатРаботаСФормулами.ПроверитьФормулу(Формула.ПолучитьТекст(), Операнды, ПараметрыВыработки, "Формула") Тогда
		ПоказатьПредупреждение(, НСтр("en='In formula not found errors.';ru='В формуле не обнаружено ошибок.'"),2);
	Иначе
		ПоказатьПредупреждение(, НСтр("en='There are errors in formula.';ru='В формуле обнаружены ошибки.'"),2);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьИЗакрыть(Команда)
	
	Если уатРаботаСФормулами.ПроверитьФормулу(Формула.ПолучитьТекст(), Операнды, ПараметрыВыработки, "Формула") Тогда
		Закрыть(Формула.ПолучитьТекст());
	Иначе
		ПоказатьПредупреждение(, НСтр("en='There are errors in formula.';ru='В формуле обнаружены ошибки.'"),2);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ИнициализацияФормы()
	
	ЗначениеВДанныеФормы(уатРаботаСФормулами.ПостроитьДеревоОператоров(), Операторы);
	
	Если СпособРасчетаПараметровВыработки = Перечисления.уатСпособРасчетаПараметровВыработки.ПоЗаказамИМаршрутнымЛистам Тогда
		Запрос = Новый Запрос(
		"ВЫБРАТЬ
		|	уатПараметрыВыработки.Ссылка КАК Ссылка,
		|	уатПараметрыВыработки.Наименование КАК Наименование
		|ИЗ
		|	Справочник.уатПараметрыВыработки КАК уатПараметрыВыработки
		|ГДЕ
		|	НЕ уатПараметрыВыработки.ПометкаУдаления
		|	И уатПараметрыВыработки.ДействуетНаТСМЛ
		|	И уатПараметрыВыработки.Ссылка <> &ПараметрВыработкиФормулы
		|	И уатПараметрыВыработки.СпособРасчетаПараметровВыработки <> ЗНАЧЕНИЕ(Перечисление.уатСпособРасчетаПараметровВыработки.ПоЗаказамИМаршрутнымЛистам)
		|	И уатПараметрыВыработки.СпособРасчетаПараметровВыработки <> ЗНАЧЕНИЕ(Перечисление.уатСпособРасчетаПараметровВыработки.ПоШапке)
		|	И уатПараметрыВыработки.СпособРасчетаПараметровВыработки <> ЗНАЧЕНИЕ(Перечисление.уатСпособРасчетаПараметровВыработки.ПоЗаданию)
		|	И уатПараметрыВыработки.СпособРасчетаПараметровВыработки <> ЗНАЧЕНИЕ(Перечисление.уатСпособРасчетаПараметровВыработки.ПоТТД)
		|	И уатПараметрыВыработки.Ссылка <> ЗНАЧЕНИЕ(Справочник.уатПараметрыВыработки.СкладскаяОбработка)");
		Запрос.УстановитьПараметр("ПараметрВыработкиФормулы", ПараметрВыработкиФормулы);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ПараметрыВыработки.Добавить(Выборка.Наименование);
		КонецЦикла;
	Иначе
		Операнды.ЗагрузитьЗначения(уатРаботаСФормулами.ПостроитьСписокОперандов(СпособРасчетаПараметровВыработки));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимость()
	Если СпособРасчетаПараметровВыработки = ПредопределенноеЗначение("Перечисление.уатСпособРасчетаПараметровВыработки.ПоЗаказамИМаршрутнымЛистам") Тогда
		Элементы.ГруппаПараметрыВыработки.Видимость = Истина;
		Элементы.ГруппаОперанды.Видимость = Ложь;
	Иначе
		Элементы.ГруппаПараметрыВыработки.Видимость = Ложь;
		Элементы.ГруппаОперанды.Видимость = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВставитьОператорВФормулу()
	
	ВставитьТекстВФормулу(Элементы.Операторы.ТекущиеДанные.Оператор, Элементы.Операторы.ТекущиеДанные.Сдвиг);
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьТекстВФормулу(ТекстДляВставки, Сдвиг = 0)
	
	СтрокаНач  = 0;
	СтрокаКон  = 0;
	КолонкаНач = 0;
	КолонкаКон = 0;
	
	Элементы.Формула.ПолучитьГраницыВыделения(СтрокаНач, КолонкаНач, СтрокаКон, КолонкаКон);
	
	Если (КолонкаКон = КолонкаНач) И (КолонкаКон + СтрДлина(ТекстДляВставки)) > Элементы.Формула.Ширина / 8 Тогда
		Элементы.Формула.ВыделенныйТекст = "";
	КонецЕсли;
	
	Элементы.Формула.ВыделенныйТекст = ТекстДляВставки;
	
	Если Не Сдвиг = 0 Тогда
		Элементы.Формула.ПолучитьГраницыВыделения(СтрокаНач, КолонкаНач, СтрокаКон, КолонкаКон);
		Элементы.Формула.УстановитьГраницыВыделения(СтрокаНач, КолонкаНач - Сдвиг, СтрокаКон, КолонкаКон - Сдвиг);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВставитьОперандВФормулу(ТекстОперанда, ТипСкобок)
	
	ВставитьТекстВФормулу(уатРаботаСФормулами.ПолучитьТекстОперандаДляВставки(ТекстОперанда, ТипСкобок));
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Параметры.Свойство("ОбъектНастройки", ОбъектНастройки);
	Параметры.Свойство("ТипАгрегата",     Справочник_уатСерииНоменклатуры_ТипАгрегата);
	
	// Объект договора - это место (форма) вызова настроек шаблона
	// "0" - сам справочник Договоры
	// "1" - документы "Заказ на ТС" и "Потребность в перевозке
	// "2" - документы "Маршрутный лист" и "Заказ перевозчику"
	Параметры.Свойство("ОбъектДоговора",  Справочник_ДоговорыКонтрагентов_Объект);
	Если Справочник_ДоговорыКонтрагентов_Объект = "" Тогда
		Справочник_ДоговорыКонтрагентов_Объект = "0";
	КонецЕсли;
		
	Если Не ПравоДоступа("Изменение", Метаданные.Константы.уатНастройкиШаблонов) Тогда 
		ТолькоПросмотр = Истина;
		Элементы.ФормаСохранитьШаблоны.Видимость                                        = Ложь;
		Элементы.Справочник_уатТС_ТекстШаблона.Доступность                              = Ложь;
		Элементы.Справочник_уатТС_ДоступныеПараметры.Доступность                        = Ложь;
		Элементы.Справочник_ДоговорыКонтрагентов_ТекстШаблона.Доступность               = Ложь;
		Элементы.Справочник_ДоговорыКонтрагентов_ДоступныеПараметры.Доступность         = Ложь;
		Элементы.Справочник_уатПунктыНазначения_ТекстШаблона.Доступность                = Ложь;
		Элементы.Справочник_уатПунктыНазначения_ДоступныеПараметры.Доступность          = Ложь;
		Элементы.Справочник_уатСерииНоменклатуры_ТипАгрегата.Доступность                = Ложь;
		Элементы.Справочник_уатСерииНоменклатуры_ТекстШаблона.Доступность               = Ложь;
		Элементы.Справочник_уатСерииНоменклатуры_ДоступныеПараметры.Доступность         = Ложь;
		Элементы.Справочник_уатРегистрационныеДокументы_ТекстШаблона.Доступность        = Ложь;
		Элементы.Справочник_уатРегистрационныеДокументы_ДоступныеПараметры.Доступность  = Ложь;
		Элементы.Справочник_уатСопроводительныеДокументы_ТекстШаблона.Доступность       = Ложь;
		Элементы.Справочник_уатСопроводительныеДокументы_ДоступныеПараметры.Доступность = Ложь;
		Элементы.Справочник_уатСкладскиеЯчейки_ТекстШаблона.Доступность                 = Ложь;
		Элементы.Справочник_уатСкладскиеЯчейки_ДоступныеПараметры.Доступность           = Ложь;
	КонецЕсли;
	
	уатНастройкиШаблонов.ФормаНастройкиШаблонов_ЗаполнитьДоступныеПараметры(ЭтотОбъект);
	уатНастройкиШаблонов.ФормаНастройкиШаблонов_ЗаполнитьТекстШаблонов(ЭтотОбъект);
	
	УстановитьВидимость();
	ПрочитатьШаблонПоТипуСерииНоменклатуры();
	ПрочитатьШаблонДоговораПоОбъекту();
	СформироватьПримерыНаименований();
	
	ЗаполнитьСписокФормОбъектаДоговоров();
	Элементы.Справочник_ДоговорыКонтрагентов_ВедениеВзаиморасчетов.Видимость = НЕ уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД();
	
	Если ОбъектНастройки = "Справочник_ДоговорыКонтрагентов" Тогда
		АвтоЗаголовок = Ложь;
		Заголовок = "Настройка создания договоров";
	ИначеЕсли ОбъектНастройки = "Справочник_уатПунктыНазначения_ПунктОтправленияПоЗаказу" Тогда
		Справочник_уатПунктыНазначения_ТекстШаблонаКопия = Справочник_уатПунктыНазначения_ТекстШаблона;
		Справочник_уатПунктыНазначения_ТекстШаблона      = Справочник_уатПН_ПунктОтправленияПоЗаказу_ТекстШаблона;
		АвтоЗаголовок = Ложь;
		Заголовок = "Настройка представления адреса отправления";
	ИначеЕсли ОбъектНастройки = "Справочник_уатПунктыНазначения_ПунктПрибытияПоЗаказу" Тогда
		Справочник_уатПунктыНазначения_ТекстШаблонаКопия = Справочник_уатПунктыНазначения_ТекстШаблона;
		Справочник_уатПунктыНазначения_ТекстШаблона      = Справочник_уатПН_ПунктПрибытияПоЗаказу_ТекстШаблона;
		АвтоЗаголовок = Ложь;
		Заголовок = "Настройка представления адреса прибытия (доставки)";
	КонецЕсли;
		
КонецПроцедуры

Процедура ЗаполнитьСписокФормОбъектаДоговоров()
	Элементы.Справочник_ДоговорыКонтрагентов_Объект.СписокВыбора.Добавить("0", "Справочник ""Договоры контрагентов""");
	Если уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД() Тогда
		Элементы.Справочник_ДоговорыКонтрагентов_Объект.СписокВыбора.Добавить("1", "Документы ""Заказ на ТС""");
	Иначе
		Элементы.Справочник_ДоговорыКонтрагентов_Объект.СписокВыбора.Добавить("1", "Документы ""Заказ на ТС"", ""Потребность в перевозке""");
		Элементы.Справочник_ДоговорыКонтрагентов_Объект.СписокВыбора.Добавить("2", "Документы ""Маршрутный лист"", ""Заказ перевозчику""");
	КонецЕсли;
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура Справочник_уатТС_ТекстШаблонаПриИзменении(Элемент)
	
	СформироватьПримерыНаименований();
	
КонецПроцедуры

&НаКлиенте
Процедура Справочник_ДоговорыКонтрагентов_ТекстШаблонаПриИзменении(Элемент)
	
	ДоговорыКонтрагентов_ЗаписатьТекстШаблонаПоОбъекту();
	СформироватьПримерыНаименований();
	
КонецПроцедуры

&НаКлиенте
Процедура Справочник_уатПунктыНазначения_ТекстШаблонаПриИзменении(Элемент)
	
	СформироватьПримерыНаименований();
	
КонецПроцедуры

&НаКлиенте
Процедура Справочник_уатРегистрационныеДокументы_ТекстШаблонаПриИзменении(Элемент)
	
	СформироватьПримерыНаименований();
	
КонецПроцедуры

&НаКлиенте
Процедура Справочник_уатСерииНоменклатуры_ТипАгрегатаПриИзменении(Элемент)
	
	Справочник_уатСерииНоменклатуры_ТипАгрегатаПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура Справочник_уатСерииНоменклатуры_ТипАгрегатаПриИзмененииСервер()
	
	уатНастройкиШаблонов.ФормаНастройкиШаблонов_ЗаполнитьДоступныеПараметры(ЭтотОбъект);
	ПрочитатьШаблонПоТипуСерииНоменклатуры();
	СформироватьПримерыНаименований();
	
КонецПроцедуры

&НаКлиенте
Процедура Справочник_уатСерииНоменклатуры_ТекстШаблонаПриИзменении(Элемент)
	
	СерииНоменклатуры_ЗаписатьТекстШаблонаПоТипу();
	СформироватьПримерыНаименований();
	
КонецПроцедуры

&НаКлиенте
Процедура Справочник_уатТС_ПримерОбновитьНажатие(Элемент)
	
	СформироватьПримерыНаименований();
	
КонецПроцедуры

&НаКлиенте
Процедура Справочник_ДоговорыКонтрагентов_ПримерОбновитьНажатие(Элемент)
	
	СформироватьПримерыНаименований();
	
КонецПроцедуры

&НаКлиенте
Процедура Справочник_уатПунктыНазначения_ПримерОбновитьНажатие(Элемент)
	
	СформироватьПримерыНаименований();
	
КонецПроцедуры

&НаКлиенте
Процедура Справочник_уатСерииНоменклатуры_ПримерОбновитьНажатие(Элемент)
	
	СформироватьПримерыНаименований();
	
КонецПроцедуры

&НаКлиенте
Процедура Справочник_уатРегистрационныеДокументы_ПримерОбновитьНажатие(Элемент)
	
	СформироватьПримерыНаименований();
	
КонецПроцедуры

&НаКлиенте
Процедура Справочник_уатСопроводительныеДокументы_ПримерОбновитьНажатие(Элемент)
	
	СформироватьПримерыНаименований();
	
КонецПроцедуры

&НаКлиенте
Процедура Справочник_уатСкладскиеЯчейки_ПримерОбновитьНажатие(Элемент)
	
	СформироватьПримерыНаименований();
	
КонецПроцедуры

&НаКлиенте
Процедура Справочник_ДоговорыКонтрагентов_ОбъектПриИзменении(Элемент)
	
	Справочник_ДоговорыКонтрагентов_ОбъектПриИзмененииСервер();
	
КонецПроцедуры

&НаСервере
Процедура Справочник_ДоговорыКонтрагентов_ОбъектПриИзмененииСервер()
	
	уатНастройкиШаблонов.ФормаНастройкиШаблонов_ЗаполнитьДоступныеПараметры(ЭтотОбъект);
	ПрочитатьШаблонДоговораПоОбъекту();
	СформироватьПримерыНаименований();
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьШаблонДоговораПоОбъекту()
	
	НайдСтроки = Справочник_ДоговорыКонтрагентов_ЗначенияРеквизитов.НайтиСтроки(
		Новый Структура("Объект", Справочник_ДоговорыКонтрагентов_Объект));
	
	Если НайдСтроки.Количество() Тогда 
		Справочник_ДоговорыКонтрагентов_ТекстШаблона = НайдСтроки[0].ТекстШаблона;
		Справочник_ДоговорыКонтрагентов_Валюта = НайдСтроки[0].Валюта;
		Справочник_ДоговорыКонтрагентов_ВидДоговора = НайдСтроки[0].ВидДоговора;
		Если НЕ уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД() Тогда
			Справочник_ДоговорыКонтрагентов_ВедениеВзаиморасчетов = НайдСтроки[0].ВедениеВзаиморасчетов;
		КонецЕсли;
		
	Иначе 
		Справочник_ДоговорыКонтрагентов_ТекстШаблона = "";
		Справочник_ДоговорыКонтрагентов_Валюта = Неопределено;
		Справочник_ДоговорыКонтрагентов_ВидДоговора = Неопределено;
		Если НЕ уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД() Тогда
			Справочник_ДоговорыКонтрагентов_ВедениеВзаиморасчетов = Неопределено;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Справочник_ДоговорыКонтрагентов_ВалютаПриИзменении(Элемент)
	Модифицированность = Истина;
	ДоговорыКонтрагентов_ЗаписатьТекстШаблонаПоОбъекту();
КонецПроцедуры

&НаКлиенте
Процедура Справочник_ДоговорыКонтрагентов_ВидДоговораПриИзменении(Элемент)
	Модифицированность = Истина;
	ДоговорыКонтрагентов_ЗаписатьТекстШаблонаПоОбъекту();
КонецПроцедуры

&НаКлиенте
Процедура Справочник_ДоговорыКонтрагентов_ВедениеВзаиморасчетовПриИзменении(Элемент)
	Модифицированность = Истина;
	ДоговорыКонтрагентов_ЗаписатьТекстШаблонаПоОбъекту();
КонецПроцедуры

&НаКлиенте
Процедура Справочник_уатСопроводительныеДокументы_ТекстШаблонаПриИзменении(Элемент)
	
	СформироватьПримерыНаименований();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_Справочник_уатТС_ДоступныеПараметры

&НаКлиенте
Процедура Справочник_уатТС_ДоступныеПараметрыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Справочник_уатТС_ТекстШаблона = Справочник_уатТС_ТекстШаблона + Элемент.ТекущиеДанные.КлючПараметра;
	
	Модифицированность = Истина;
	
	СформироватьПримерыНаименований();
	
КонецПроцедуры

&НаКлиенте
Процедура Справочник_уатТС_ДоступныеПараметрыНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ПараметрыПеретаскивания.Значение = Элемент.ТекущиеДанные.КлючПараметра;
	
КонецПроцедуры

&НаКлиенте
Процедура Справочник_уатТС_ДоступныеПараметрыОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	Модифицированность = Истина;
	
	СформироватьПримерыНаименований();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_Справочник_ДоговорыКонтрагентов_ДоступныеПараметры

&НаКлиенте
Процедура Справочник_ДоговорыКонтрагентов_ДоступныеПараметрыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Справочник_ДоговорыКонтрагентов_ТекстШаблона = Справочник_ДоговорыКонтрагентов_ТекстШаблона + Элемент.ТекущиеДанные.КлючПараметра;
	
	ДоговорыКонтрагентов_ЗаписатьТекстШаблонаПоОбъекту();
	
	Модифицированность = Истина;
	
	СформироватьПримерыНаименований();
	
КонецПроцедуры

&НаКлиенте
Процедура Справочник_ДоговорыКонтрагентов_ДоступныеПараметрыНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ПараметрыПеретаскивания.Значение = Элемент.ТекущиеДанные.КлючПараметра;
	
КонецПроцедуры

&НаКлиенте
Процедура Справочник_ДоговорыКонтрагентов_ДоступныеПараметрыОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	Модифицированность = Истина;
	
	ДоговорыКонтрагентов_ЗаписатьТекстШаблонаПоОбъекту();
	
	СформироватьПримерыНаименований();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_Справочник_уатПунктыНазначения_ДоступныеПараметры

&НаКлиенте
Процедура Справочник_уатПунктыНазначения_ДоступныеПараметрыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Справочник_уатПунктыНазначения_ТекстШаблона = Справочник_уатПунктыНазначения_ТекстШаблона + Элемент.ТекущиеДанные.КлючПараметра;
	
	Модифицированность = Истина;
	
	СформироватьПримерыНаименований();
	
КонецПроцедуры

&НаКлиенте
Процедура Справочник_уатПунктыНазначения_ДоступныеПараметрыНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ПараметрыПеретаскивания.Значение = Элемент.ТекущиеДанные.КлючПараметра;
	
КонецПроцедуры

&НаКлиенте
Процедура Справочник_уатПунктыНазначения_ДоступныеПараметрыОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	Модифицированность = Истина;
	
	СформироватьПримерыНаименований();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_Справочник_уатРегистрационныеДокументы_ДоступныеПараметры

&НаКлиенте
Процедура Справочник_уатРегистрационныеДокументы_ДоступныеПараметрыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Справочник_уатРегистрационныеДокументы_ТекстШаблона = Справочник_уатРегистрационныеДокументы_ТекстШаблона + Элемент.ТекущиеДанные.КлючПараметра;
	
	Модифицированность = Истина;
	
	СформироватьПримерыНаименований();
	
КонецПроцедуры

&НаКлиенте
Процедура Справочник_уатРегистрационныеДокументы_ДоступныеПараметрыНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ПараметрыПеретаскивания.Значение = Элемент.ТекущиеДанные.КлючПараметра;
	
КонецПроцедуры

&НаКлиенте
Процедура Справочник_уатРегистрационныеДокументы_ДоступныеПараметрыОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	Модифицированность = Истина;
	
	СформироватьПримерыНаименований();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_Справочник_уатСерииНоменклатуры_ДоступныеПараметры

&НаКлиенте
Процедура Справочник_уатСерииНоменклатуры_ДоступныеПараметрыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Справочник_уатСерииНоменклатуры_ТекстШаблона = Справочник_уатСерииНоменклатуры_ТекстШаблона + Элемент.ТекущиеДанные.КлючПараметра;
	
	СерииНоменклатуры_ЗаписатьТекстШаблонаПоТипу();
	
	Модифицированность = Истина;
	
	СформироватьПримерыНаименований();
	
КонецПроцедуры

&НаКлиенте
Процедура Справочник_уатСерииНоменклатуры_ДоступныеПараметрыНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ПараметрыПеретаскивания.Значение = Элемент.ТекущиеДанные.КлючПараметра;
	
КонецПроцедуры

&НаКлиенте
Процедура Справочник_уатСерииНоменклатуры_ДоступныеПараметрыОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	СерииНоменклатуры_ЗаписатьТекстШаблонаПоТипу();
	
	Модифицированность = Истина;
	
	СформироватьПримерыНаименований();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_Справочник_уатСопроводительныеДокументы_ДоступныеПараметры

&НаКлиенте
Процедура Справочник_уатСопроводительныеДокументы_ДоступныеПараметрыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Справочник_уатСопроводительныеДокументы_ТекстШаблона = Справочник_уатСопроводительныеДокументы_ТекстШаблона + Элемент.ТекущиеДанные.КлючПараметра;
	Модифицированность = Истина;
	СформироватьПримерыНаименований();
	
КонецПроцедуры

&НаКлиенте
Процедура Справочник_уатСопроводительныеДокументы_ДоступныеПараметрыНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	ПараметрыПеретаскивания.Значение = Элемент.ТекущиеДанные.КлючПараметра;
	
КонецПроцедуры

&НаКлиенте
Процедура Справочник_уатСопроводительныеДокументы_ДоступныеПараметрыОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	
	Модифицированность = Истина;
	СформироватьПримерыНаименований();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_Справочник_уатСкладскиеЯчейки_ДоступныеПараметры

&НаКлиенте
Процедура Справочник_уатСкладскиеЯчейки_ДоступныеПараметрыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	Справочник_уатСкладскиеЯчейки_ТекстШаблона = Справочник_уатСкладскиеЯчейки_ТекстШаблона + Элемент.ТекущиеДанные.КлючПараметра;
	Модифицированность = Истина;
	СформироватьПримерыНаименований();
КонецПроцедуры

&НаКлиенте
Процедура Справочник_уатСкладскиеЯчейки_ДоступныеПараметрыНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	ПараметрыПеретаскивания.Значение = Элемент.ТекущиеДанные.КлючПараметра;
КонецПроцедуры

&НаКлиенте
Процедура Справочник_уатСкладскиеЯчейки_ДоступныеПараметрыОкончаниеПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка)
	Модифицированность = Истина;
	СформироватьПримерыНаименований();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СохранитьШаблоны(Команда)
	
	Если Модифицированность Тогда 
		ДанныеШаблоновСерииНоменклатуры = Новый Соответствие();
		Для Каждого ТекСтрока Из Справочник_уатСерииНоменклатуры_ТекстыШаблонов Цикл 
			ДанныеШаблоновСерииНоменклатуры.Вставить(ТекСтрока.ТипАгрегата, ТекСтрока.ТекстШаблона);
		КонецЦикла;
		
		НастройкиДоговоровКонтрагентов = Новый Соответствие();
		Для Каждого ТекСтрока Из Справочник_ДоговорыКонтрагентов_ЗначенияРеквизитов Цикл 
			СтруктураНастроек = Новый Структура;
			СтруктураНастроек.Вставить("ТекстШаблона", ТекСтрока.ТекстШаблона);
			СтруктураНастроек.Вставить("Валюта", ТекСтрока.Валюта);
			СтруктураНастроек.Вставить("ВидДоговора", ТекСтрока.ВидДоговора);
			Если НЕ уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД() Тогда
				СтруктураНастроек.Вставить("ВедениеВзаиморасчетов", ТекСтрока.ВедениеВзаиморасчетов);
			КонецЕсли;
			НастройкиДоговоровКонтрагентов.Вставить(ТекСтрока.Объект, СтруктураНастроек);
		КонецЦикла;
		
		НастройкиШаблонов = Новый Структура();
		НастройкиШаблонов.Вставить("Справочник_уатТС",                        Справочник_уатТС_ТекстШаблона);
		НастройкиШаблонов.Вставить("Справочник_ДоговорыКонтрагентов",         НастройкиДоговоровКонтрагентов);
		НастройкиШаблонов.Вставить("Справочник_уатРегистрационныеДокументы",  Справочник_уатРегистрационныеДокументы_ТекстШаблона);
		НастройкиШаблонов.Вставить("Справочник_уатСопроводительныеДокументы", Справочник_уатСопроводительныеДокументы_ТекстШаблона);
		НастройкиШаблонов.Вставить("Справочник_уатСерииНоменклатуры",         ДанныеШаблоновСерииНоменклатуры);
		
		НастройкиШаблонов.Вставить("Справочник_уатПунктыНазначения",                  Справочник_уатПунктыНазначения_ТекстШаблона);
		НастройкиШаблонов.Вставить("Справочник_ПунктыНазначения_ВыводитьОбозначения", Справочник_ПунктыНазначения_ВыводитьОбозначения);
		Если ОбъектНастройки = "Справочник_уатПунктыНазначения_ПунктОтправленияПоЗаказу" Тогда 
			НастройкиШаблонов.Вставить("Справочник_уатПунктыНазначения_ПунктОтправленияПоЗаказу", Справочник_уатПунктыНазначения_ТекстШаблона);
			НастройкиШаблонов.Вставить("Справочник_уатПунктыНазначения_ПунктПрибытияПоЗаказу",    Справочник_уатПН_ПунктПрибытияПоЗаказу_ТекстШаблона);
			НастройкиШаблонов.Вставить("Справочник_уатПунктыНазначения",                          Справочник_уатПунктыНазначения_ТекстШаблонаКопия);
		ИначеЕсли ОбъектНастройки = "Справочник_уатПунктыНазначения_ПунктПрибытияПоЗаказу" Тогда
			НастройкиШаблонов.Вставить("Справочник_уатПунктыНазначения_ПунктОтправленияПоЗаказу", Справочник_уатПН_ПунктОтправленияПоЗаказу_ТекстШаблона);
			НастройкиШаблонов.Вставить("Справочник_уатПунктыНазначения_ПунктПрибытияПоЗаказу",    Справочник_уатПунктыНазначения_ТекстШаблона);
			НастройкиШаблонов.Вставить("Справочник_уатПунктыНазначения",                          Справочник_уатПунктыНазначения_ТекстШаблонаКопия);
		Иначе
			НастройкиШаблонов.Вставить("Справочник_уатПунктыНазначения",                          Справочник_уатПунктыНазначения_ТекстШаблона);
			НастройкиШаблонов.Вставить("Справочник_уатПунктыНазначения_ПунктОтправленияПоЗаказу", Справочник_уатПН_ПунктОтправленияПоЗаказу_ТекстШаблона);
			НастройкиШаблонов.Вставить("Справочник_уатПунктыНазначения_ПунктПрибытияПоЗаказу",    Справочник_уатПН_ПунктПрибытияПоЗаказу_ТекстШаблона);
		КонецЕсли;
		
		НастройкиШаблонов.Вставить("Справочник_уатСкладскиеЯчейки", Справочник_уатСкладскиеЯчейки_ТекстШаблона);
		
		уатНастройкиШаблонов.ЗаписатьТекстыШаблонов(НастройкиШаблонов);
		Модифицированность = Ложь;
	КонецЕсли;
	
	Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура Справочник_уатСерииНоменклатуры_СкопироватьИзДругогоТипа(Команда)
	
	СписокВыбораТипов = Новый СписокЗначений();
	Для Каждого ТекСтрока Из Справочник_уатСерииНоменклатуры_ТекстыШаблонов Цикл 
		Если ТекСтрока.ТипАгрегата = Справочник_уатСерииНоменклатуры_ТипАгрегата Тогда 
			Продолжить;
		КонецЕсли;
		
		СписокВыбораТипов.Добавить(
			Новый Структура("ТипАгрегата, ТекстШаблона", ТекСтрока.ТипАгрегата, ТекСтрока.ТекстШаблона),
			?(ЗначениеЗаполнено(ТекСтрока.ТипАгрегата), 
				Строка(ТекСтрока.ТипАгрегата), 
				НСтр("en='<All types of car parts>';ru='<Все типы агрегатов>'")
			)
		);
	КонецЦикла;
	
	Если СписокВыбораТипов.Количество() Тогда 
		СписокВыбораТипов.ПоказатьВыборЭлемента(
			Новый ОписаниеОповещения("Справочник_уатСерииНоменклатуры_СкопироватьИзДругогоТипаЗавершение", ЭтотОбъект)
		);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Справочник_уатСерииНоменклатуры_СкопироватьИзДругогоТипаЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт 
	
	Если ВыбранныйЭлемент = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйЭлемент.Значение.ТипАгрегата = ПредопределенноеЗначение("Справочник.уатТипыАгрегатов.Шина") 
			И Не Справочник_уатСерииНоменклатуры_ТипАгрегата = ПредопределенноеЗначение("Справочник.уатТипыАгрегатов.Шина") Тогда 
		Справочник_уатСерииНоменклатуры_ТекстШаблона = СтрЗаменить(
			ВыбранныйЭлемент.Значение.ТекстШаблона,
			НСтр("en = '[TireEndurance]'; ru = '[СрокСлужбыШины]'"),
			НСтр("en = '[ExpirationDate]'; ru = '[ГоденДо]'")
		);
		
	ИначеЕсли Не ВыбранныйЭлемент.Значение.ТипАгрегата = ПредопределенноеЗначение("Справочник.уатТипыАгрегатов.Шина")
			И Справочник_уатСерииНоменклатуры_ТипАгрегата = ПредопределенноеЗначение("Справочник.уатТипыАгрегатов.Шина") Тогда 
		Справочник_уатСерииНоменклатуры_ТекстШаблона = СтрЗаменить(
			ВыбранныйЭлемент.Значение.ТекстШаблона,
			НСтр("en = '[ExpirationDate]'; ru = '[ГоденДо]'"),
			НСтр("en = '[TireEndurance]'; ru = '[СрокСлужбыШины]'")
		);
		
	Иначе 
		Справочник_уатСерииНоменклатуры_ТекстШаблона = ВыбранныйЭлемент.Значение.ТекстШаблона;
	КонецЕсли;
	
	СерииНоменклатуры_ЗаписатьТекстШаблонаПоТипу();
	
	Модифицированность = Истина;
	
	СформироватьПримерыНаименований();
	
КонецПроцедуры

&НаКлиенте
Процедура Справочник_уатТС_ВосстановитьПоУмолчанию(Команда)
	
	Справочник_уатТС_ТекстШаблона = уатНастройкиШаблонов.ПолучитьТекстШаблонаПоУмолчанию("Справочник_уатТС");
	СформироватьПримерыНаименований();
	
КонецПроцедуры

&НаКлиенте
Процедура Справочник_ДоговорыКонтрагентов_ВосстановитьПоУмолчанию(Команда)
	
	ТекстыШаблонов = уатНастройкиШаблонов.ПолучитьТекстШаблонаПоУмолчанию("Справочник_ДоговорыКонтрагентов");
	
	ТекстШаблонаПоТипу = ТекстыШаблонов.Получить(Справочник_ДоговорыКонтрагентов_Объект);
	ТекстШаблонаОбщий  = ТекстыШаблонов.Получить("");
	
	Если ТекстШаблонаПоТипу = Неопределено Тогда 
		Справочник_ДоговорыКонтрагентов_ТекстШаблона = ТекстШаблонаОбщий;
	Иначе 
		Справочник_ДоговорыКонтрагентов_ТекстШаблона = ТекстШаблонаПоТипу;
	КонецЕсли;
	
	ДоговорыКонтрагентов_ЗаписатьТекстШаблонаПоОбъекту();
	
	СформироватьПримерыНаименований();
	
КонецПроцедуры

&НаКлиенте
Процедура Справочник_уатПунктыНазначения_ВосстановитьПоУмолчанию(Команда)
	
	Справочник_уатПунктыНазначения_ТекстШаблона = уатНастройкиШаблонов.ПолучитьТекстШаблонаПоУмолчанию("Справочник_уатПунктыНазначения");
	СформироватьПримерыНаименований();
	
КонецПроцедуры

&НаКлиенте
Процедура Справочник_уатРегистрационныеДокументы_ВосстановитьПоУмолчанию(Команда)
	
	Справочник_уатРегистрационныеДокументы_ТекстШаблона = уатНастройкиШаблонов.ПолучитьТекстШаблонаПоУмолчанию("Справочник_уатРегистрационныеДокументы");
	СформироватьПримерыНаименований();
	
КонецПроцедуры

&НаКлиенте
Процедура Справочник_уатСерииНоменклатуры_ВосстановитьПоУмолчанию(Команда)
	
	ТекстыШаблонов = уатНастройкиШаблонов.ПолучитьТекстШаблонаПоУмолчанию("Справочник_уатСерииНоменклатуры");
	
	ТекстШаблонаПоТипу = ТекстыШаблонов.Получить(Справочник_уатСерииНоменклатуры_ТипАгрегата);
	ТекстШаблонаОбщий  = ТекстыШаблонов.Получить(ПредопределенноеЗначение("Справочник.уатТипыАгрегатов.ПустаяСсылка"));
	
	Если ТекстШаблонаПоТипу = Неопределено Тогда 
		Справочник_уатСерииНоменклатуры_ТекстШаблона = ТекстШаблонаОбщий;
	Иначе 
		Справочник_уатСерииНоменклатуры_ТекстШаблона = ТекстШаблонаПоТипу;
	КонецЕсли;
	
	СерииНоменклатуры_ЗаписатьТекстШаблонаПоТипу();
	
	СформироватьПримерыНаименований();
	
КонецПроцедуры

&НаКлиенте
Процедура Справочник_ДоговорыКонтрагентов_СкопироватьИзДругогоОбъекта(Команда)
	СписокВыбораТипов = Новый СписокЗначений();
	Для Каждого ТекСтрока Из Справочник_ДоговорыКонтрагентов_ЗначенияРеквизитов Цикл 
		Если ТекСтрока.Объект = Справочник_ДоговорыКонтрагентов_Объект Тогда 
			Продолжить;
		КонецЕсли;
		
		ТекПредставление = Элементы.Справочник_ДоговорыКонтрагентов_Объект.СписокВыбора.НайтиПоЗначению(ТекСтрока.Объект).Представление;
		
		СтруктураЗначения = Новый Структура;
		СтруктураЗначения.Вставить("Объект", ТекСтрока.Объект);
		СтруктураЗначения.Вставить("ТекстШаблона", ТекСтрока.ТекстШаблона);
		СтруктураЗначения.Вставить("Валюта", ТекСтрока.Валюта);
		СтруктураЗначения.Вставить("ВидДоговора", ТекСтрока.ВидДоговора);
		Если НЕ уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД() Тогда
			СтруктураЗначения.Вставить("ВедениеВзаиморасчетов", ТекСтрока.ВедениеВзаиморасчетов);
		КонецЕсли;
				
		СписокВыбораТипов.Добавить(СтруктураЗначения,
			?(ЗначениеЗаполнено(ТекПредставление), 
				ТекПредставление, 
				НСтр("en='<All types of objects>';ru='<Все типы объектов>'")
			)
		);
	КонецЦикла;
	
	Если СписокВыбораТипов.Количество() Тогда 
		СписокВыбораТипов.ПоказатьВыборЭлемента(
			Новый ОписаниеОповещения("Справочник_ДоговорыКонтрагентов_СкопироватьИзДругогоОбъектаЗавершение", ЭтотОбъект),
			"Выберите источник копирования настроек"
		);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Справочник_ДоговорыКонтрагентов_СкопироватьИзДругогоОбъектаЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт 
	
	Если ВыбранныйЭлемент = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйЭлемент.Значение.Объект = Справочник_ДоговорыКонтрагентов_Объект Тогда 
		Возврат;
	КонецЕсли;
	
	Справочник_ДоговорыКонтрагентов_ТекстШаблона = ВыбранныйЭлемент.Значение.ТекстШаблона;
	Справочник_ДоговорыКонтрагентов_Валюта = ВыбранныйЭлемент.Значение.Валюта;
	Справочник_ДоговорыКонтрагентов_ВидДоговора = ВыбранныйЭлемент.Значение.ВидДоговора;
	Если НЕ уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД() Тогда
		Справочник_ДоговорыКонтрагентов_ВедениеВзаиморасчетов = ВыбранныйЭлемент.Значение.ВедениеВзаиморасчетов;
	КонецЕсли;
		
	ДоговорыКонтрагентов_ЗаписатьТекстШаблонаПоОбъекту();
	
	Модифицированность = Истина;
	
	СформироватьПримерыНаименований();
	
КонецПроцедуры

&НаКлиенте
Процедура Справочник_уатСопроводительныеДокументы_ВосстановитьПоУмолчанию(Команда)
	
	Справочник_уатСопроводительныеДокументы_ТекстШаблона = уатНастройкиШаблонов.ПолучитьТекстШаблонаПоУмолчанию("Справочник_уатСопроводительныеДокументы");
	СформироватьПримерыНаименований();
	
КонецПроцедуры

&НаКлиенте
Процедура Справочник_уатСкладскиеЯчейки_ВосстановитьПоУмолчанию(Команда)
	
	Справочник_уатСкладскиеЯчейки_ТекстШаблона = уатНастройкиШаблонов.ПолучитьТекстШаблонаПоУмолчанию("Справочник_уатСкладскиеЯчейки");
	СформироватьПримерыНаименований();
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьВидимость()
	
	Если ОбъектНастройки = "Справочник_уатТС" Или ОбъектНастройки = "" Тогда 
		Элементы.СтраницаСправочник_уатТС.Видимость = Истина;
	Иначе 
		Элементы.СтраницаСправочник_уатТС.Видимость = Ложь;
	КонецЕсли;
	
	Если ОбъектНастройки = "Справочник_ДоговорыКонтрагентов" Или ОбъектНастройки = "" Тогда 
		Элементы.СтраницаСправочник_ДоговорыКонтрагентов.Видимость = Истина;
	Иначе 
		Элементы.СтраницаСправочник_ДоговорыКонтрагентов.Видимость = Ложь;
	КонецЕсли;
	
	Если ОбъектНастройки = "Справочник_уатПунктыНазначения" Или ОбъектНастройки = "" Тогда 
		Элементы.СтраницаСправочник_уатПунктыНазначения.Видимость = Истина;
	Иначе 
		Элементы.СтраницаСправочник_уатПунктыНазначения.Видимость = Ложь;
	КонецЕсли;
	
	Если ОбъектНастройки = "Справочник_уатПунктыНазначения_ПунктПрибытияПоЗаказу" Или ОбъектНастройки = "" Тогда 
		Элементы.СтраницаСправочник_уатПунктыНазначения.Видимость = Истина;
	КонецЕсли;

	Если ОбъектНастройки = "Справочник_уатПунктыНазначения_ПунктОтправленияПоЗаказу" Или ОбъектНастройки = "" Тогда 
		Элементы.СтраницаСправочник_уатПунктыНазначения.Видимость = Истина;
	КонецЕсли;
	
	Если ОбъектНастройки = "Справочник_уатРегистрационныеДокументы" Или ОбъектНастройки = "" Тогда 
		Элементы.СтраницаСправочник_уатРегистрационныеДокументы.Видимость = Истина;
	Иначе 
		Элементы.СтраницаСправочник_уатРегистрационныеДокументы.Видимость = Ложь;
	КонецЕсли;
	
	Если ОбъектНастройки = "Справочник_уатСерииНоменклатуры" Или ОбъектНастройки = "" Тогда 
		Элементы.СтраницаСправочник_уатСерииНоменклатуры.Видимость = Истина;
	Иначе 
		Элементы.СтраницаСправочник_уатСерииНоменклатуры.Видимость = Ложь;
	КонецЕсли;
	
	Если уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД() Тогда
		Элементы.СтраницаСправочник_уатСопроводительныеДокументы.Видимость = Ложь;
	ИначеЕсли ОбъектНастройки = "Справочник_уатСопроводительныеДокументы" Или ОбъектНастройки = "" Тогда 
		Элементы.СтраницаСправочник_уатСопроводительныеДокументы.Видимость = Истина;
	Иначе 
		Элементы.СтраницаСправочник_уатСопроводительныеДокументы.Видимость = Ложь;
	КонецЕсли;
	
	Если уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД() Тогда
		Элементы.СтраницаСправочник_уатСкладскиеЯчейки.Видимость = Ложь;
	ИначеЕсли ОбъектНастройки = "Справочник_уатСкладскиеЯчейки" Или ОбъектНастройки = "" Тогда 
		Элементы.СтраницаСправочник_уатСкладскиеЯчейки.Видимость = Истина;
	Иначе 
		Элементы.СтраницаСправочник_уатСкладскиеЯчейки.Видимость = Ложь;
	КонецЕсли;
	
	Если ОбъектНастройки = "" Тогда 
		Элементы.СтраницыОбъектов.ОтображениеСтраниц = ОтображениеСтраницФормы.ЗакладкиСверху;
	Иначе 
		Элементы.СтраницыОбъектов.ОтображениеСтраниц = ОтображениеСтраницФормы.Нет;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СерииНоменклатуры_ЗаписатьТекстШаблонаПоТипу()
	
	НайдСтроки = Справочник_уатСерииНоменклатуры_ТекстыШаблонов.НайтиСтроки(
		Новый Структура("ТипАгрегата", Справочник_уатСерииНоменклатуры_ТипАгрегата)
	);
	
	Если НайдСтроки.Количество() Тогда 
		НайдСтроки[0].ТекстШаблона = Справочник_уатСерииНоменклатуры_ТекстШаблона;
	Иначе 
		НовСтрока = Справочник_уатСерииНоменклатуры_ТекстыШаблонов.Добавить();
		НовСтрока.ТипАгрегата  = Справочник_уатСерииНоменклатуры_ТипАгрегата;
		НовСтрока.ТекстШаблона = Справочник_уатСерииНоменклатуры_ТекстШаблона;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПрочитатьШаблонПоТипуСерииНоменклатуры()
	
	НайдСтроки = Справочник_уатСерииНоменклатуры_ТекстыШаблонов.НайтиСтроки(
		Новый Структура("ТипАгрегата", Справочник_уатСерииНоменклатуры_ТипАгрегата)
	);
	
	Если НайдСтроки.Количество() Тогда 
		Справочник_уатСерииНоменклатуры_ТекстШаблона = НайдСтроки[0].ТекстШаблона;
	Иначе 
		Справочник_уатСерииНоменклатуры_ТекстШаблона = "";
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПримерыНаименований()
	
	Справочник_уатТС_Пример = уатНастройкиШаблонов.СформироватьНаименованиеПоШаблону(
		"Справочник_уатТС",
		ПолучитьДемоОбъект_Справочник_уатТС(), 
		Справочник_уатТС_ТекстШаблона
	);
	
	ДанныеШаблоновДоговоры = Новый Соответствие();
	ДанныеШаблоновДоговоры.Вставить(
		Справочник_ДоговорыКонтрагентов_Объект, 
		Новый Структура("ТекстШаблона", Справочник_ДоговорыКонтрагентов_ТекстШаблона)
	);
	
	Справочник_ДоговорыКонтрагентов_Пример = уатНастройкиШаблонов.СформироватьНаименованиеПоШаблону(
		"Справочник_ДоговорыКонтрагентов",
		ПолучитьДемоОбъект_Справочник_ДоговорыКонтрагентов(), 
		ДанныеШаблоновДоговоры,	Справочник_ДоговорыКонтрагентов_Объект);
	
	Справочник_уатПунктыНазначения_Пример = уатНастройкиШаблонов.СформироватьНаименованиеПоШаблону(
		"Справочник_уатПунктыНазначения",
		ПолучитьДемоОбъект_Справочник_уатПунктыНазначения(), 
		Справочник_уатПунктыНазначения_ТекстШаблона,
		,
		Справочник_ПунктыНазначения_ВыводитьОбозначения
	);
	
	Справочник_уатРегистрационныеДокументы_Пример = уатНастройкиШаблонов.СформироватьНаименованиеПоШаблону(
		"Справочник_уатРегистрационныеДокументы",
		ПолучитьДемоОбъект_Справочник_уатРегистрационныеДокументы(), 
		Справочник_уатРегистрационныеДокументы_ТекстШаблона
	);
       
	ДанныеШаблоновСерииНоменклатуры = Новый Соответствие();
	ДанныеШаблоновСерииНоменклатуры.Вставить(
		Справочник_уатСерииНоменклатуры_ТипАгрегата, 
		Справочник_уатСерииНоменклатуры_ТекстШаблона
	);
	
	Справочник_уатСерииНоменклатуры_Пример = уатНастройкиШаблонов.СформироватьНаименованиеПоШаблону(
		"Справочник_уатСерииНоменклатуры",
		ПолучитьДемоОбъект_Справочник_уатСерииНоменклатуры(), 
		ДанныеШаблоновСерииНоменклатуры
	);
	
	Справочник_уатСопроводительныеДокументы_Пример = уатНастройкиШаблонов.СформироватьНаименованиеПоШаблону(
		"Справочник_уатСопроводительныеДокументы",
		ПолучитьДемоОбъект_Справочник_уатСопроводительныеДокументы(), 
		Справочник_уатСопроводительныеДокументы_ТекстШаблона
	);
	
	Справочник_уатСкладскиеЯчейки_Пример = уатНастройкиШаблонов.СформироватьНаименованиеПоШаблону(
		"Справочник_уатСкладскиеЯчейки",
		ПолучитьДемоОбъект_Справочник_уатСкладскиеЯчейки(), 
		Справочник_уатСкладскиеЯчейки_ТекстШаблона
	);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДемоОбъект_Справочник_уатТС()
	
	ДемоОбъект = Новый Структура();
	ДемоОбъект.Вставить("ГосударственныйНомер", НСтр("ru = 'А 000 АА 77'"));
	ДемоОбъект.Вставить("ГаражныйНомер",        "0000000101");
	ДемоОбъект.Вставить("Модель",               НСтр("ru = 'КамАЗ 54101'"));
	ДемоОбъект.Вставить("ТипТС",                НСтр("en='Грузовые бортовые';ru='Грузовые бортовые'"));
	ДемоОбъект.Вставить("Гараж",                НСтр("ru = 'Гараж на Таганском'"));
	ДемоОбъект.Вставить("Организация",          НСтр("ru = 'ООО ""Мегатранс""'"));
	ДемоОбъект.Вставить("Подразделение",        НСтр("ru = 'Транспортный отдел'"));
	ДемоОбъект.Вставить("Колонна",              НСтр("ru = 'Колонна бортовых'"));
	
	Возврат ДемоОбъект;
	
КонецФункции // ПолучитьДемоОбъект_Справочник_уатТС()

&НаСервере
Функция ПолучитьДемоОбъект_Справочник_ДоговорыКонтрагентов()
	
	ДемоОбъект = Новый Структура();
	ДемоОбъект.Вставить("ВидДоговора",          Перечисления.ВидыДоговоровКонтрагентов.СПокупателем);
	ДемоОбъект.Вставить("Номер",                "10005421");
	ДемоОбъект.Вставить("Дата",                 '20180221');
	ДемоОбъект.Вставить("Владелец",             НСтр("ru = 'ООО ""Ласточка""'"));
	ДемоОбъект.Вставить("Организация",          НСтр("ru = 'ООО ""Мегатранс""'"));
	ДемоОбъект.Вставить("ВалютаВзаиморасчетов", "RUB");
	ДемоОбъект.Вставить("ТипЦен",               НСтр("ru = 'Оптовая'"));
	
	Возврат ДемоОбъект;
	
КонецФункции // ПолучитьДемоОбъект_Справочник_ДоговорыКонтрагентов()

&НаСервере
Функция ПолучитьДемоОбъект_Справочник_уатПунктыНазначения()
	
	ПоляАдреса = "{
	|""value"": ""124460, Москва г, Зеленоград г, 4801-й проезд, дом № 3, строение 2"",
	|""comment"": """",
	|""type"": ""Адрес"",
	|""Country"": ""РОССИЯ"",
	|""addressType"": ""Административно-территориальный"",
	|""CountryCode"": ""643"",
	|""ZIPcode"": ""124460"",
	|""area"": ""Москва"",
	|""areaType"": ""г"",
	|""city"": ""Зеленоград"",
	|""cityType"": ""г"",
	|""street"": ""4801-й"",
	|""streetType"": ""проезд"",
	|""id"": ""28bff7af-d11b-49d5-97cd-b2508ce76f6f"",
	|""areaCode"": """",
	|""areaId"": ""0c5b2444-70a0-4932-980c-b4dc0d3f02b5"",
	|""district"": """",
	|""districtType"": """",
	|""districtId"": """",
	|""munDistrict"": """",
	|""munDistrictType"": """",
	|""munDistrictId"": """",
	|""cityId"": ""ec44c0ee-bf24-41c8-9e1c-76136ab05cbf"",
	|""settlement"": """",
	|""settlementType"": """",
	|""settlementId"": """",
	|""cityDistrict"": """",
	|""cityDistrictType"": """",
	|""cityDistrictId"": """",
	|""territory"": """",
	|""territoryType"": """",
	|""territoryId"": """",
	|""locality"": """",
	|""localityType"": """",
	|""localityId"": """",
	|""streetId"": ""28bff7af-d11b-49d5-97cd-b2508ce76f6f"",
	|""houseType"": ""Дом"",
	|""houseNumber"": ""3"",
	|""houseId"": ""6908c11b-c7e7-4950-8b6d-b5e27c7cb99f"",
	|""buildings"": [
	|{
	|""Type"": ""Строение"",
	|""Number"": ""2""
	|}
	|],
	|""apartments"": [],
	|""codeKLADR"": """",
	|""oktmo"": ""45331000"",
	|""okato"": """",
	|""asInDocument"": """",
	|""ifnsFLCode"": """",
	|""ifnsULCode"": """",
	|""ifnsFLAreaCode"": """",
	|""ifnsULAreaCode"": """"
	|}";
		
	ДемоОбъект = Новый Структура();
	ДемоОбъект.Вставить("Наименование",      НСтр("ru = 'Пример адреса'"));
	ДемоОбъект.Вставить("ШифрПункта",        НСтр("ru = 'Пример адреса'"));
	ДемоОбъект.Вставить("Адрес",             НСтр("ru = '124460, Зеленоград г, 4801-й проезд, дом № 3'"));

	ДемоОбъект.Вставить("ТипПункта",      НСтр("ru = 'Городские адреса'"));
	ДемоОбъект.Вставить("Страна",         НСтр("en = 'Russian Federation'; ru = 'Российская Федерация'"));
	ДемоОбъект.Вставить("ЗначениеАдреса", ПоляАдреса);
	
	Возврат ДемоОбъект;
	
КонецФункции // ПолучитьДемоОбъект_Справочник_уатПунктыНазначения()

&НаСервере
Функция ПолучитьДемоОбъект_Справочник_уатРегистрационныеДокументы()
		
	ДемоОбъект = Новый Структура();
	ДемоОбъект.Вставить("ВидДокумента",       НСтр("ru='Водительское удостоверение';en='Водительское удостоверение'"));
	ДемоОбъект.Вставить("Серия",              НСтр("en = 'ЕЕ'; ru = 'ЕЕ'"));
	ДемоОбъект.Вставить("Номер",              НСтр("ru = '01258754'"));
	ДемоОбъект.Вставить("ВладелецДокументов", НСтр("ru = 'Денисов Кузьма Федорович'"));
	ДемоОбъект.Вставить("КемВыдан",           НСтр("ru = 'ГАИ г. Москвы № 26'"));
	ДемоОбъект.Вставить("ОткрытыеКатегории",  НСтр("ru = 'A, B, C'"));
	ДемоОбъект.Вставить("ДатаВыдачи",         НСтр("ru = '17.01.2018'"));
	ДемоОбъект.Вставить("ДатаОкончания",      НСтр("ru = ''"));
	ДемоОбъект.Вставить("Организация",        НСтр("ru = 'ООО ""Мегатранс""'"));
	ДемоОбъект.Вставить("Подразделение",      НСтр("ru = 'Транспортный отдел'"));

	Возврат ДемоОбъект;
	
КонецФункции // ПолучитьДемоОбъект_Справочник_уатПунктыНазначения()

&НаСервере
Функция ПолучитьДемоОбъект_Справочник_уатСерииНоменклатуры()
	
	ДемоОбъект = Новый Структура();
	
	Если Справочник_уатСерииНоменклатуры_ТипАгрегата = Справочники.уатТипыАгрегатов.Аптечка Тогда 
		ДемоОбъект.Вставить("Модель",        "Mechanical Brothers Авто АА-01");
		ДемоОбъект.Вставить("СерийныйНомер", "002341");
		ДемоОбъект.Вставить("ТипАгрегата",   Справочник_уатСерииНоменклатуры_ТипАгрегата);
		ДемоОбъект.Вставить("Номенклатура",  "Mechanical Brothers Авто АА-01");
		ДемоОбъект.Вставить("ГоденДо",       '20190501');
		
	ИначеЕсли Справочник_уатСерииНоменклатуры_ТипАгрегата = Справочники.уатТипыАгрегатов.Шина Тогда 
		ДемоОбъект.Вставить("Модель",         "Michelin Energy");
		ДемоОбъект.Вставить("СерийныйНомер",  "002341");
		ДемоОбъект.Вставить("ТипАгрегата",    Справочник_уатСерииНоменклатуры_ТипАгрегата);
		ДемоОбъект.Вставить("Номенклатура",   НСтр("ru = 'Шина летняя Michelin Energy'"));
		ДемоОбъект.Вставить("СрокСлужбыШины", 60);
		
	Иначе 
		ДемоОбъект.Вставить("Модель",        "BOSCH S3");
		ДемоОбъект.Вставить("СерийныйНомер", "002341");
		ДемоОбъект.Вставить("ТипАгрегата",   Справочник_уатСерииНоменклатуры_ТипАгрегата);
		ДемоОбъект.Вставить("Номенклатура",  НСтр("ru = 'Аккумулятор BOSCH S3'"));
		ДемоОбъект.Вставить("ГоденДо",       '20200201');
	КонецЕсли;
	
	Возврат ДемоОбъект;
	
КонецФункции // ПолучитьДемоОбъект_Справочник_уатСерииНоменклатуры()

&НаСервере
Функция ПолучитьДемоОбъект_Справочник_уатСопроводительныеДокументы()
		
	ДемоОбъект = Новый Структура();
	ДемоОбъект.Вставить("ВидДокумента",      НСтр("ru='ТТН';en='ТТН'"));
	ДемоОбъект.Вставить("НомерДокумента",    НСтр("ru = '01258754'"));
	ДемоОбъект.Вставить("ДатаДокумента",     НСтр("ru = '17.01.2018'"));
	ДемоОбъект.Вставить("ВладелецДокумента", НСтр("ru = 'ООО Транс-Авто'"));
	ДемоОбъект.Вставить("ПунктНазначения",   НСтр("ru = 'ул. Ленина 5'"));
	
	Возврат ДемоОбъект;
	
КонецФункции // ПолучитьДемоОбъект_Справочник_уатПунктыНазначения()

&НаСервере
Функция ПолучитьДемоОбъект_Справочник_уатСкладскиеЯчейки()
		
	ДемоОбъект = Новый Структура;
	ДемоОбъект.Вставить("Помещение",   НСтр("ru='М';en='M'"));
	ДемоОбъект.Вставить("Ряд",         НСтр("ru='07';en='07'"));
	ДемоОбъект.Вставить("Стеллаж",     НСтр("ru='2';en='2'"));
	ДемоОбъект.Вставить("Ярус",        НСтр("ru='1';en='1'"));
	ДемоОбъект.Вставить("Ячейка",      НСтр("ru='5';en='5'"));
	//ДемоОбъект.Вставить("Разделитель", НСтр("ru='-';en='-'"));
	ДемоОбъект.Вставить("Владелец", Новый Структура("РазделительНаименованияЯчеек", НСтр("ru='-';en='-'")));
	
	Возврат ДемоОбъект;
	
КонецФункции

&НаКлиенте
Процедура ДоговорыКонтрагентов_ЗаписатьТекстШаблонаПоОбъекту()
	
	НайдСтроки = Справочник_ДоговорыКонтрагентов_ЗначенияРеквизитов.НайтиСтроки(
		Новый Структура("Объект", Справочник_ДоговорыКонтрагентов_Объект));
	
	Если НайдСтроки.Количество() Тогда 
		НовСтрока = НайдСтроки[0];
	Иначе 
		НовСтрока = Справочник_ДоговорыКонтрагентов_ЗначенияРеквизитов.Добавить();
	КонецЕсли;
	
	НовСтрока.Объект  = Справочник_ДоговорыКонтрагентов_Объект;
	НовСтрока.ТекстШаблона = Справочник_ДоговорыКонтрагентов_ТекстШаблона;
	НовСтрока.Валюта = Справочник_ДоговорыКонтрагентов_Валюта;
	НовСтрока.ВидДоговора = Справочник_ДоговорыКонтрагентов_ВидДоговора;
	Если НЕ уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД() Тогда
		НовСтрока.ВедениеВзаиморасчетов = Справочник_ДоговорыКонтрагентов_ВедениеВзаиморасчетов;
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти

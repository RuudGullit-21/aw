#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	Если НЕ Параметры.Свойство("АлгоритмРасчета") Тогда
		Отказ = Истина;
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	ЗаполнитьВсеВидыНорм();
	
	АлгоритмРасчета = Параметры.АлгоритмРасчета;
	Заголовок = "Формула расчета для """ + Параметры.МодельТС + """";
		
	Если ЗначениеЗаполнено(АлгоритмРасчета) Тогда
		ЗагрузитьФормулыИзСтруктуры(АлгоритмРасчета);
	КонецЕсли;
	
	// Видимость норм линейной или на моточасы в зависимости от наличия спидометра или счетчика м/ч
	Если ТипЗнч(Параметры.МодельТС) = Тип("СправочникСсылка.уатТС") Тогда
		МодельТС = Параметры.МодельТС.Модель;
	Иначе
		МодельТС = Параметры.МодельТС;
	КонецЕсли;
	НаличиеСпидометра = МодельТС.НаличиеСпидометра;
	
	Элементы.ГруппаЛинейнаяНорма.Видимость = НаличиеСпидометра;
	Элементы.ГруппаКоэффициент1.Видимость = НаличиеСпидометра;
	Элементы.ГруппаНормаСпециальнаяНаМоточас.Видимость = НЕ НаличиеСпидометра;
	Элементы.ГруппаКоэффициент2.Видимость = НЕ НаличиеСпидометра;
	
	флДоступностьФормулы = РольДоступна("ПолныеПрава") ИЛИ РольДоступна("уатНастройкаФормулРасходаГСМ");
	Элементы.ГруппаФормулыСтраницы.ТолькоПросмотр = НЕ флДоступностьФормулы;
	Элементы.ФормаСохранитьИЗакрыть.Доступность = флДоступностьФормулы;
	Элементы.ФормаПодобратьИзШаблона.Доступность = флДоступностьФормулы;
	Элементы.ФормаОчиститьФормулу.Доступность = флДоступностьФормулы;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НормаИспользованиеПриИзменении(Элемент)
	ИмяВидаНормы = Лев(Элемент.Имя, СтрДлина(Элемент.Имя) - СтрДлина("Использование"));
	Если ЭтаФорма[Элемент.Имя] = Истина Тогда
		ЗаполнитьФормулуВидаНормыПоУмолчанию(ИмяВидаНормы);
	Иначе
		ЭтаФорма[ИмяВидаНормы] = "";
		ЭтаФорма[ИмяВидаНормы + "Коэффициент"] = "";
	КонецЕсли;
		
	СформироватьОбщуюФормулуПоФлажкам();
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура НормаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ПредставлениеНормы = ВсеВидыНорм.НайтиПоЗначению(Элемент.Имя).Представление;
	ПараметрыФормы = Новый Структура("ВидНормы, Формула, Коэффициент, НаличиеСпидометра", ПредставлениеНормы, ЭтаФорма[Элемент.Имя], Ложь, НаличиеСпидометра);
	
	ДопПараметры = Новый Структура("ЭлементИмя", Элемент.Имя);
	Оповещ = Новый ОписаниеОповещения("НормаВыборЗначения", ЭтотОбъект, ДопПараметры);
	ОткрытьФорму("РегистрСведений.уатНормыРасходаГСМ.Форма.КонструкторФормулы", ПараметрыФормы, ЭтаФорма,,,, Оповещ, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура НормаВыборЗначения(Результат, ДопПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЭтаФорма[ДопПараметры.ЭлементИмя] = Результат;
КонецПроцедуры

&НаКлиенте
Процедура КоэффициентНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ПредставлениеНормы = ВсеВидыНорм.НайтиПоЗначению(Лев(Элемент.Имя, СтрДлина(Элемент.Имя)-11)).Представление;
	ПараметрыФормы = Новый Структура("ВидНормы, Формула, Коэффициент, НаличиеСпидометра", ПредставлениеНормы, ЭтаФорма[Элемент.Имя], Истина, НаличиеСпидометра);
	
	ДопПараметры = Новый Структура("ЭлементИмя", Элемент.Имя);
	Оповещ = Новый ОписаниеОповещения("НормаВыборЗначения", ЭтотОбъект, ДопПараметры);
	ОткрытьФорму("РегистрСведений.уатНормыРасходаГСМ.Форма.КонструкторФормулы", ПараметрыФормы, ЭтаФорма,,,, Оповещ, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СохранитьИЗакрыть(Команда)
	Закрыть(ПолучитьСтруктуруФормулы());
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьФормулу(Команда)
	Если ЗначениеЗаполнено(ОбщаяФормула) Тогда
		Оповещ = Новый ОписаниеОповещения("ОчиститьФормулуЗавершение", ЭтотОбъект);
		ПоказатьВопрос(Оповещ, "Очистить формулу?", РежимДиалогаВопрос.ОКОтмена);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьФормулуЗавершение(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.ОК Тогда
		ОбщаяФормула = "";
		Для Каждого ТекВидНормы Из ВсеВидыНорм Цикл
			ЭтаФорма[ТекВидНормы.Значение] = "";
			ЭтаФорма[ТекВидНормы.Значение + "Коэффициент"] = "";
			ЭтаФорма[ТекВидНормы.Значение + "Использование"] = Ложь;
		КонецЦикла;
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьИзШаблона(Команда)
	Оповещ = Новый ОписаниеОповещения("ПодобратьИзШаблонаЗавершение", ЭтотОбъект);
	ОткрытьФорму("РегистрСведений.уатНормыРасходаГСМ.Форма.ШаблоныФормул",
		Новый Структура("НаличиеСпидометра", НаличиеСпидометра)
		,,,,, Оповещ, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьИзШаблонаЗавершение(Результат, ДопПараметры) Экспорт 
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗагрузитьФормулыИзСтруктуры(Результат);
	Модифицированность = Истина;
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьВсеВидыНорм()
	ВсеВидыНорм.Очистить();
	ВсеВидыНорм.Добавить("ЛинейнаяНорма", "На пробег (линейная)");
	ВсеВидыНорм.Добавить("НормаСпециальнаяНаМоточас", "Спец. на моточас");
	ВсеВидыНорм.Добавить("НормаНаТранспортнуюРаботу", "На трансп. работу");
	ВсеВидыНорм.Добавить("НормаНаИзменениеСобственногоВеса", "На изм. собств. веса");
	ВсеВидыНорм.Добавить("НормаНаОтопитель", "На отопитель");
	ВсеВидыНорм.Добавить("НормаНаПростойСВклДвигателем", "На простой с вкл.двиг.");
	ВсеВидыНорм.Добавить("НормаНаЕздку", "На ездки");
	ВсеВидыНорм.Добавить("НормаНаОперацию", "На операции");
	ВсеВидыНорм.Добавить("НормаНаЗапуск", "На запуск");
	ВсеВидыНорм.Добавить("НормаНаСпециальнуюРаботу1", "На спец. работу 1");
	ВсеВидыНорм.Добавить("НормаНаСпециальнуюРаботу2", "На спец. работу 2");
	ВсеВидыНорм.Добавить("НормаНаСпециальнуюРаботу3", "На спец. работу 3");
	ВсеВидыНорм.Добавить("НормаНаСпециальнуюРаботу4", "На спец. работу 4");
	ВсеВидыНорм.Добавить("НормаНаСпециальнуюРаботу5", "На спец. работу 5");
	ВсеВидыНорм.Добавить("НормаНаСпециальнуюРаботу6", "На спец. работу 6");
	ВсеВидыНорм.Добавить("НормаНаСпециальнуюРаботу7", "На спец. работу 7");
	ВсеВидыНорм.Добавить("НормаНаСпециальнуюРаботу8", "На спец. работу 8");
	ВсеВидыНорм.Добавить("НормаНаСпециальнуюРаботу9", "На спец. работу 9");
	ВсеВидыНорм.Добавить("НормаНаСпециальнуюРаботу10", "На спец. работу 10");
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьФормулыИзСтруктуры(СтруктурыФормулы)
	ОбщаяФормула = СтруктурыФормулы.ОбщаяФормула;
	Для Каждого ТекВидНормы Из ВсеВидыНорм Цикл
		Если СтруктурыФормулы.Свойство(ТекВидНормы.Значение) Тогда
			ЭтаФорма[ТекВидНормы.Значение] = СтруктурыФормулы[ТекВидНормы.Значение];
			ЭтаФорма[ТекВидНормы.Значение + "Использование"] = ЗначениеЗаполнено(СтруктурыФормулы[ТекВидНормы.Значение]);
			Если СтруктурыФормулы.Свойство(ТекВидНормы.Значение + "Коэффициент") Тогда
				ЭтаФорма[ТекВидНормы.Значение + "Коэффициент"] = СтруктурыФормулы[ТекВидНормы.Значение + "Коэффициент"];
			Иначе
				ЭтаФорма[ТекВидНормы.Значение + "Коэффициент"] = "";
			КонецЕсли;
		Иначе
			ЭтаФорма[ТекВидНормы.Значение] = "";
			ЭтаФорма[ТекВидНормы.Значение + "Использование"] = Ложь;
			ЭтаФорма[ТекВидНормы.Значение + "Коэффициент"] = "";
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруФормулы()
	Рез = Новый Структура;
	Рез.Вставить("ОбщаяФормула", ОбщаяФормула);
	Для Каждого ТекВидНормы Из ВсеВидыНорм Цикл
		флТекНорма = ЭтаФорма["" + ТекВидНормы.Значение + "Использование"];
		Если флТекНорма Тогда
			Рез.Вставить(ТекВидНормы.Значение, ЭтаФорма[ТекВидНормы.Значение]);
			Рез.Вставить(ТекВидНормы.Значение + "Коэффициент", ЭтаФорма[ТекВидНормы.Значение + "Коэффициент"]);
		КонецЕсли;
	КонецЦикла;
	
	Возврат Рез;
КонецФункции

&НаКлиенте
Процедура СформироватьОбщуюФормулуПоФлажкам()
	ОбщаяФормула = "";
	Для Каждого ТекНорма Из ВсеВидыНорм Цикл
		флТекНорма = ЭтаФорма["" + ТекНорма.Значение + "Использование"];
		Если флТекНорма Тогда
			ОбщаяФормула = ОбщаяФормула + ТекНорма.Представление + " + ";
		КонецЕсли;
	КонецЦикла;
	ОбщаяФормула = Лев(ОбщаяФормула, СтрДлина(ОбщаяФормула) - 3);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьФормулуВидаНормыПоУмолчанию(ИмяВидаНормы)
	ФормулыВидовНорм = Новый Структура;
	Если НаличиеСпидометра Тогда
		ФормулыВидовНорм.Вставить("ЛинейнаяНорма", "0.01*[Hs]*[S]*[HL]");
		ФормулыВидовНорм.Вставить("ЛинейнаяНормаКоэффициент", "[Kсн]+[Kтм]+[Kтс]+[Kур]+[Kнк]");
	Иначе
		ФормулыВидовНорм.Вставить("НормаСпециальнаяНаМоточас", "[Ht]*[T]");
		ФормулыВидовНорм.Вставить("НормаСпециальнаяНаМоточасКоэффициент", "[Kсн]+[Kтм]+[Kтс]+[Kур]+[Kнк]");
	КонецЕсли;
	ФормулыВидовНорм.Вставить("НормаНаПростойСВклДвигателем", "[Hdt]*[DT]");
	ФормулыВидовНорм.Вставить("НормаНаПростойСВклДвигателемКоэффициент", "[Kтм]+[Kтс]");
	ФормулыВидовНорм.Вставить("НормаНаЕздку", "[Hhl]*[HL]");
	ФормулыВидовНорм.Вставить("НормаНаЕздкуКоэффициент", "");
	ФормулыВидовНорм.Вставить("НормаНаЗапуск", "[Hst]*[ST]");
	ФормулыВидовНорм.Вставить("НормаНаЗапускКоэффициент", "[Kсн]+[Kтм]");
	ФормулыВидовНорм.Вставить("НормаНаОтопитель", "[Hht]*[Tht]");
	ФормулыВидовНорм.Вставить("НормаНаОтопительКоэффициент", "");
	ФормулыВидовНорм.Вставить("НормаНаОперацию", "[Hop]*[OP]");
	ФормулыВидовНорм.Вставить("НормаНаОперациюКоэффициент", "[Kсн]+[Kтм]");
	ФормулыВидовНорм.Вставить("НормаНаИзменениеСобственногоВеса", "0.01*[Hg]*[S]*[Gив]*[HL]");
	ФормулыВидовНорм.Вставить("НормаНаИзменениеСобственногоВесаКоэффициент", "[Kсн]+[Kтм]+[Kтс]+[Kур]");
	Если МодельТС.ТипТС.Самосвал Тогда
		ФормулыВидовНорм.Вставить("НормаНаТранспортнуюРаботу", "0.01*[Hw]*[S]*[GP]*[Q]*[HL]");
		ФормулыВидовНорм.Вставить("НормаНаТранспортнуюРаботуКоэффициент", "[Kсн]+[Kтм]+[Kтс]+[Kур]");
	Иначе
		ФормулыВидовНорм.Вставить("НормаНаТранспортнуюРаботу", "0.01*[Hw]*[Sгр]*[Gгр]*[HL]");
		ФормулыВидовНорм.Вставить("НормаНаТранспортнуюРаботуКоэффициент", "[Kсн]+[Kтм]+[Kтс]+[Kур]");
	КонецЕсли;
	Для Сч = 1 По 10 Цикл
		ФормулыВидовНорм.Вставить("НормаНаСпециальнуюРаботу" + Сч, "0.01*[Hсп" + Сч + "]*[Сп" + Сч + "]");
		ФормулыВидовНорм.Вставить("НормаНаСпециальнуюРаботу" + Сч + "Коэффициент", "[Kсн]+[Kтм]+[Kтс]+[Kур]");
	КонецЦикла;
	
	ЭтаФорма[ИмяВидаНормы] = ФормулыВидовНорм[ИмяВидаНормы];
	ЭтаФорма[ИмяВидаНормы + "Коэффициент"] = ФормулыВидовНорм[ИмяВидаНормы + "Коэффициент"];
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	уатЗащищенныеФункцииСервер.уатРегистрФормаСпискаПриСозданииНаСервере(Отказ, СтандартнаяОбработка,ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	Если ТолькоПросмотр Тогда
		Элементы.ГруппаПростои.ТолькоПросмотр = Истина;
		Элементы.ГруппаФормула.ТолькоПросмотр = Истина;
		//Элементы.РедактироватьФормулу.Доступность = Ложь;
	КонецЕсли;
	
	Если Параметры.Свойство("ТолькоПросмотрМодели") И Параметры.ТолькоПросмотрМодели Тогда
		Элементы.МодельТС.ТолькоПросмотр = Истина;
	КонецЕсли;
	
	Если Не ПравоДоступа("Редактирование", Метаданные.РегистрыСведений.уатНормыРасходаГСМ) Тогда 
		Элементы.ВидНормыНаПростой.Доступность = Ложь;
	КонецЕсли;
	
	// Элементы.ГСМ.СписокВыбора.Очистить();
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	уатНоменклатураГСМ.Номенклатура
	|ИЗ
	|	РегистрСведений.уатНоменклатураГСМ КАК уатНоменклатураГСМ
	|ГДЕ
	|	уатНоменклатураГСМ.ГруппаГСМ = ЗНАЧЕНИЕ(Перечисление.уатГруппыГСМ.Топливо)");
	ВыборкаНом = Запрос.Выполнить().Выбрать();
	Пока ВыборкаНом.Следующий() Цикл
		Элементы.ГСМ.СписокВыбора.Добавить(ВыборкаНом.Номенклатура);
	КонецЦикла;
	
	// Если норма копируется - установим дату текущим числом
	Если НЕ Параметры.ЗначениеКопирования.Пустой() Тогда 
		Запись.Период = НачалоДня(ТекущаяДата());
	КонецЕсли;
	
	Если Запись.НормаНаПростойСВклДвигателемЛитры <> 0 Тогда
		ВидНормыНаПростой = 2;
	ИначеЕсли Запись.НормаНаПростойСВклДвигателемПроцентомОтБазовой <> 0 Тогда
		ВидНормыНаПростой = 1;
	КонецЕсли;
	
	// Чтение структуры формулы расчета
	Если Параметры.ЗначениеКопирования.Пустой() Тогда
		ОбъектЗапись = РеквизитФормыВЗначение("Запись");
		АлгоритмРасчета = ОбъектЗапись.АлгоритмРасчета.Получить();
	Иначе // Чтение хранилища значений из объекта копирования, в объекте его нет при копировании
		МенЗаписи = РегистрыСведений.уатНормыРасходаГСМ.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенЗаписи, Параметры.ЗначениеКопирования);
		АлгоритмРасчета = Неопределено;
		МенЗаписи.Прочитать();
		Если МенЗаписи.Выбран() Тогда
			АлгоритмРасчета = МенЗаписи.АлгоритмРасчета.Получить();
		КонецЕсли;
	КонецЕсли;
	
	РасчетПоФормуле = (АлгоритмРасчета <> Неопределено);
	
	ПереключательДваВидаТоплива = ?(Запись.РаботаНаДвухВидахТопливаОдновременно, "Одновременно", "Поочередно");
		
	УстановитьВидимостьДоступностьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	ОтобразитьФормулуРасчета();
КонецПроцедуры

&НаКлиенте
Процедура ПередЗаписью(Отказ, ПараметрыЗаписи)
	
	Если ЗначениеЗаполнено(Запись.МодельТС) Тогда 
		Если ТипЗнч(Запись.МодельТС) = Тип("СправочникСсылка.уатТС") Тогда
			ОснТопливоПоМодели = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Запись.МодельТС, "Модель"), "ОсновноеТопливо");
			ДопТопливоПоМодели = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Запись.МодельТС, "Модель"), "ДополнительноеТопливо");
		Иначе
			ОснТопливоПоМодели = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Запись.МодельТС, "ОсновноеТопливо");
			ДопТопливоПоМодели = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Запись.МодельТС, "ДополнительноеТопливо");
		КонецЕсли;
		Если Запись.ГСМ <> ОснТопливоПоМодели И Запись.ГСМ <> ДопТопливоПоМодели Тогда 
			ТекстСообщения = НСтр("en='Specified fuel does not correspond to bas. or extra fuel specified in vehicle model.';ru='Указанное топливо не соответствует осн. или доп. топливу, указанному в модели ТС.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстСообщения,,"Запись.ГСМ",,Отказ);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПередЗаписьюНаСервере(Отказ, ТекущийОбъект, ПараметрыЗаписи)
	Если ТекущийОбъект.РаботаНаДвухВидахТопливаОдновременно
		И НЕ ЕстьПоочереднаяНорма(ТекущийОбъект.МодельТС, ТекущийОбъект.ГСМ, ТекущийОбъект.Организация,
		Запись.ИсходныйКлючЗаписи) Тогда
		
		ТекстСообщения = "Перед вводом нормы для одновременной работы на двух видах топлива следует сначала ввести норму для поочередной работы.";
		уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстСообщения, Отказ,, СтатусСообщения.Внимание);
	КонецЕсли;
	
	Если НЕ Отказ Тогда
		Если ТипЗнч(АлгоритмРасчета) = Тип("Структура") Тогда
			ТекущийОбъект.АлгоритмРасчета = Новый ХранилищеЗначения(АлгоритмРасчета);
		Иначе
			ТекущийОбъект.АлгоритмРасчета = Неопределено;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)
	// СтандартныеПодсистемы.ДатыЗапретаИзменения
	ДатыЗапретаИзменения.ОбъектПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.ДатыЗапретаИзменения
	
	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	УстановитьВидимостьДоступностьНаСервере();
	
КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

	УстановитьВидимостьДоступностьНаСервере();
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ГСМНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ТекОрганизация = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
		ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнаяОрганизация");
	ДополнительныеПараметры	 = Новый Структура("ЗначениеГСМДоИзменения", Запись.ГСМ);
	ОписаниеОповещенияЗакр	 = Новый ОписаниеОповещения("ОписаниеОповещенияВыбораГСМ", ЭтотОбъект, ДополнительныеПараметры);

	уатЗащищенныеФункцииКлиент.СписокГСМдляТС(ТекОрганизация, Запись.МодельТС,
		ПредопределенноеЗначение("Перечисление.уатГруппыГСМ.Топливо"),,,ОписаниеОповещенияЗакр);
КонецПроцедуры

// Подключаемый динамически обработчик выбора топлива с отбором.
&НаКлиенте
Процедура ОписаниеОповещенияВыбораГСМ(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если ЗначениеЗаполнено(РезультатЗакрытия) И РезультатЗакрытия <> ДополнительныеПараметры.ЗначениеГСМДоИзменения Тогда
		Запись.ГСМ = РезультатЗакрытия;
		Модифицированность = Истина;
		УстановитьВидимостьДоступностьНаСервере();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГСМПриИзменении(Элемент)
	УстановитьВидимостьДоступностьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура ГСМАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	мсвГруппДляОтбора = Новый Массив;
	мсвГруппДляОтбора.Добавить(ПредопределенноеЗначение("Перечисление.уатГруппыГСМ.Топливо"));
	ДопПараметры = Новый Структура("ТС", Запись.МодельТС);
	ДанныеВыбора = уатГСМ.ПолучитьСписокАвтоподбораПоляГСМ(Текст, мсвГруппДляОтбора, ДопПараметры);
КонецПроцедуры

&НаКлиенте
Процедура ГСМОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ПараметрыПолученияДанных.СтрокаПоиска = "";
КонецПроцедуры

&НаКлиенте
Процедура НормаНаПростойСВклДвигателемПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Запись.НормаНаПростойСВклДвигателем) Тогда
		Запись.НормаНаПростойСВклДвигателемПроцентомОтБазовой = 0;
		Запись.НормаНаПростойСВклДвигателемЛитры = 0;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НормаНаПростойСВклДвигателемПроцентомОтБазовойПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Запись.НормаНаПростойСВклДвигателемПроцентомОтБазовой) Тогда
		Запись.НормаНаПростойСВклДвигателем = 0;
		Запись.НормаНаПростойСВклДвигателемЛитры = 0;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НормаНаПростойСВклДвигателемЛитрыПриИзменении(Элемент)
	Если ЗначениеЗаполнено(Запись.НормаНаПростойСВклДвигателемЛитры) Тогда
		Запись.НормаНаПростойСВклДвигателем = 0;
		Запись.НормаНаПростойСВклДвигателемПроцентомОтБазовой = 0;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура МодельТСПриИзменении(Элемент)
	МодельТСПриИзмененииСервер();
	УстановитьВидимостьДоступностьНаСервере();	
КонецПроцедуры

&НаСервере
Процедура МодельТСПриИзмененииСервер()
	Если ТипЗнч(Запись.МодельТС) = Тип("СправочникСсылка.уатМоделиТС") Тогда
		Запись.ГСМ = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Запись.МодельТС, "ОсновноеТопливо");
	ИначеЕсли ТипЗнч(Запись.МодельТС) = Тип("СправочникСсылка.уатТС") Тогда
		Запись.ГСМ = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Запись.МодельТС.Модель, "ОсновноеТопливо");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВидНормыНаПростойПриИзменении(Элемент)
	Запись.НормаНаПростойСВклДвигателем = 0;
	Запись.НормаНаПростойСВклДвигателемЛитры = 0;
	Запись.НормаНаПростойСВклДвигателемПроцентомОтБазовой = 0;
	УстановитьВидимостьДоступностьНаСервере();	
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура СпециальнаяРабота1ПриИзменении(Элемент)
	
	УстановитьВидимостьДоступностьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СпециальнаяРабота2ПриИзменении(Элемент)
	
	УстановитьВидимостьДоступностьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СпециальнаяРабота3ПриИзменении(Элемент)
	
	УстановитьВидимостьДоступностьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СпециальнаяРабота4ПриИзменении(Элемент)
	
	УстановитьВидимостьДоступностьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СпециальнаяРабота5ПриИзменении(Элемент)
	
	УстановитьВидимостьДоступностьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СпециальнаяРабота6ПриИзменении(Элемент)
	
	УстановитьВидимостьДоступностьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СпециальнаяРабота7ПриИзменении(Элемент)
	
	УстановитьВидимостьДоступностьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СпециальнаяРабота8ПриИзменении(Элемент)
	
	УстановитьВидимостьДоступностьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СпециальнаяРабота9ПриИзменении(Элемент)
	
	УстановитьВидимостьДоступностьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура СпециальнаяРабота10ПриИзменении(Элемент)
	
	УстановитьВидимостьДоступностьНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура РасчетПоФормулеПриИзменении(Элемент)
	Если НЕ РасчетПоФормуле Тогда
		АлгоритмРасчета = Неопределено;
	КонецЕсли;
	
	ОтобразитьФормулуРасчета();
	УстановитьВидимостьДоступностьНаСервере();
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьФормулуНажатие(Элемент)
	СтандартнаяОбработка = Ложь;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("МодельТС", Запись.МодельТС);
	ПараметрыФормы.Вставить("АлгоритмРасчета", АлгоритмРасчета);
	ОповещениеЗакрытие = Новый ОписаниеОповещения("РедактироватьФормулуЗакрытиеФормы", ЭтотОбъект);
	ОткрытьФорму("РегистрСведений.уатНормыРасходаГСМ.Форма.КонструкторФормул", ПараметрыФормы, ЭтаФорма,,,, ОповещениеЗакрытие, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура РедактироватьФормулуЗакрытиеФормы(Результат, ДопПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		АлгоритмРасчета = Результат;
		ОтобразитьФормулуРасчета();
		Модифицированность = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РежимРаботыНаДвухВидахТопливаПриИзменении(Элемент)
	Запись.РаботаНаДвухВидахТопливаОдновременно = (ПереключательДваВидаТоплива = "Одновременно");
	Модифицированность = Истина;
	УстановитьВидимостьДоступностьНаСервере();
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УстановитьВидимостьДоступностьНаСервере()
	
	Если ТипЗнч(Запись.МодельТС) = Тип("СправочникСсылка.уатМоделиТС") Тогда
		НаличиеСпидометра = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Запись.МодельТС, "НаличиеСпидометра");
	ИначеЕсли ТипЗнч(Запись.МодельТС) = Тип("СправочникСсылка.уатТС") Тогда
		НаличиеСпидометра = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Запись.МодельТС, "Модель"), "НаличиеСпидометра");
	Иначе
		НаличиеСпидометра = Истина;
	КонецЕсли;
	
	Элементы.ГруппаЛинейнаяНорма.Видимость = НаличиеСпидометра;
	Элементы.ГруппаНормаНаИзменениеСобственногоВеса.Видимость = НаличиеСпидометра;
	Элементы.ГруппаНормаНаТранспортнуюРаботу.Видимость = НаличиеСпидометра;
	Элементы.ГруппаНормаСпециальнаяНаМоточас.Видимость = НЕ НаличиеСпидометра;
	
	Элементы.ВидНормыНаПростой.СписокВыбора.Очистить();
	Если НаличиеСпидометра Тогда
		Элементы.ВидНормыНаПростой.СписокВыбора.Добавить(0, НСтр("en='km/1 hour of downtime';ru='км/1 час простоя'"));
		Элементы.ВидНормыНаПростой.СписокВыбора.Добавить(1, НСтр("en='% of basic';ru='% от базовой'"));
		Элементы.ВидНормыНаПростой.СписокВыбора.Добавить(2, НСтр("en='l/1 hour of downtime';ru='л/1 час простоя'"));
	Иначе
		Элементы.ВидНормыНаПростой.СписокВыбора.Добавить(0, НСтр("en='l/1 hour of downtime';ru='л/1 час простоя'"));
		Элементы.ВидНормыНаПростой.СписокВыбора.Добавить(1, НСтр("en='% of spec. on moto hour';ru='% от спец. на моточас'"));
		Если ВидНормыНаПростой = 2 Тогда
			ВидНормыНаПростой = 0;
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ВидНормыНаПростой = 0 Тогда
		Элементы.ГруппаСтраницыВидПростоя.ТекущаяСтраница = Элементы.ГруппаСтраницаПростойКм;
	ИначеЕсли ВидНормыНаПростой = 1 Тогда
		Элементы.ГруппаСтраницыВидПростоя.ТекущаяСтраница = Элементы.ГруппаСтраницаПростойПроцент;
	ИначеЕсли ВидНормыНаПростой = 2 Тогда
		Элементы.ГруппаСтраницыВидПростоя.ТекущаяСтраница = Элементы.ГруппаСтраницаПростойЛ;
	КонецЕсли;
	
	Для Сч = 1 По 10 Цикл 
		СпецРабота = Запись["СпециальнаяРабота" + Формат(Сч, "ЧГ=0")];
		Элементы["НормаНаСпециальнуюРаботу" + Формат(Сч, "ЧГ=0")].Заголовок = НСтр("en='Norm';ru='Норма'") + " " + Формат(Сч, "ЧГ=0") + ", " + НСтр("en='l';ru='л'")
		+ ?(ЗначениеЗаполнено(СпецРабота), "/" + ?(СпецРабота.Временный, " ", " 100 ") + СпецРабота.ЕдиницаИзмерения, "");
	КонецЦикла;
	
	Элементы.РедактироватьФормулу.Доступность = НЕ ТолькоПросмотр И РасчетПоФормуле;
	
	Элементы.ДекорацияНетПоочереднойНормы.Видимость = Запись.РаботаНаДвухВидахТопливаОдновременно
		И НЕ ЕстьПоочереднаяНорма(Запись.МодельТС, Запись.ГСМ, Запись.Организация, Запись.ИсходныйКлючЗаписи);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьФормулуРасчета()
	Если ТипЗнч(АлгоритмРасчета) <> Тип("Структура")
		ИЛИ НЕ АлгоритмРасчета.Свойство("ОбщаяФормула")
		ИЛИ НЕ ЗначениеЗаполнено(АлгоритмРасчета.ОбщаяФормула) Тогда
		Элементы.РедактироватьФормулу.Заголовок = "Формула не указана";
	Иначе
		Элементы.РедактироватьФормулу.Заголовок = АлгоритмРасчета.ОбщаяФормула;
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЕстьПоочереднаяНорма(МодельТС, ГСМ, Организация, ИсходныйКлючЗаписи)
	Запрос = Новый Запрос(
	"ВЫБРАТЬ ПЕРВЫЕ 1
	|	уатНормыРасходаГСМСрезПоследних.ЛинейнаяНорма КАК ЛинейнаяНорма
	|ИЗ
	|	РегистрСведений.уатНормыРасходаГСМ.СрезПоследних(
	|			,
	|			НЕ РаботаНаДвухВидахТопливаОдновременно
	|				И МодельТС = &МодельТС
	|				И ГСМ = &ГСМ
	|				И Организация = &Организация) КАК уатНормыРасходаГСМСрезПоследних");
	Запрос.УстановитьПараметр("МодельТС", МодельТС);
	Запрос.УстановитьПараметр("ГСМ", ГСМ);
	Запрос.УстановитьПараметр("Организация", Организация);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Количество() = 0 Тогда
		Возврат Ложь; // нет записей с поочередной нормой
	ИначеЕсли ЗначениеЗаполнено(ИсходныйКлючЗаписи.Период)
		И НЕ ИсходныйКлючЗаписи.РаботаНаДвухВидахТопливаОдновременно Тогда
		Возврат Ложь; // запись с поочередной нормой есть, но это измененная текущая запись - считаем что нет
	Иначе
		Возврат Истина; // есть запись с поочередной нормой
	КонецЕсли;
КонецФункции

#КонецОбласти

#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ПрограммныйИнтерфейс

// Возвращает максимальную скорость, которая может быть учтена подсистемой динамического трека.
// 
// Возвращаемое значение:
//  Число - Максимально допустимая скорость для подсистемы динамического трека.
//
Функция МаксимальнаяСкорость() Экспорт
	
	Возврат 200;
	
КонецФункции
 
// Инициализирует пустую таблицу значений, соответствующую полной шкале (и с верхней, и с нижней границей).
// 
// Возвращаемое значение:
//	ТаблицаЗначений:
//		*СкоростьВерхняяГраница - Число - Конец интервала шкалы.
//		*СкоростьНижняяГраница - Число - Начало интервала шкалы.
//		*ВыбранныйЦвет - Число - Значение шкалы.
//
Функция ШаблонШкалы() Экспорт
	
	ШаблонШкалыОтображенияТрека = Новый ТаблицаЗначений;
	ШаблонШкалыОтображенияТрека.Колонки.Добавить("СкоростьВерхняяГраница");
	ШаблонШкалыОтображенияТрека.Колонки.Добавить("СкоростьНижняяГраница");
	ШаблонШкалыОтображенияТрека.Колонки.Добавить("ВыбранныйЦвет");
	
	
	Возврат ШаблонШкалыОтображенияТрека;
	
КонецФункции

// Получает полные шкалы для каждого из переданных вариантов отображения трека.
//
// Параметры:
//  ВариантыОтображенияТрека - Массив - Массив из СправочникСсылка.ItobВариантыОтображенияТрека - 
//											Варианты отображения трека для отбора. 
// 
// Возвращаемое значение:
//  ТаблицаЗначений:
//		*ВариантОтображенияТрека - СправочникСсылка.ItobВариантыОтображенияТрека - Текущий вариант отображения трека.
//		*СкоростьВерхняяГраница - Число - Конец интервала шкалы.
//		*СкоростьНижняяГраница - Число - Начало интервала шкалы.
//		*ВыбранныйЦвет - Число - Значение шкалы.
//
Функция ПолнаяШкалаВариантовОтображенияТрека(ВариантыОтображенияТрека) Экспорт
	
	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("ВариантыОтображенияТрека", ВариантыОтображенияТрека);
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ItobШкалаДинамическогоТрека.СкоростьВерхняяГраница КАК СкоростьГраница,
	|	ItobШкалаДинамическогоТрека.ВыбранныйЦвет КАК ВыбранныйЦвет,
	|	ItobШкалаДинамическогоТрека.ВариантОтображенияТрека КАК ВариантОтображенияТрека
	|ПОМЕСТИТЬ втСокращеннаяШкала
	|ИЗ
	|	РегистрСведений.ItobШкалаДинамическогоТрека КАК ItobШкалаДинамическогоТрека
	|ГДЕ
	|	ItobШкалаДинамическогоТрека.ВариантОтображенияТрека В(&ВариантыОтображенияТрека)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСокращеннаяШкала_ВерхняяГраница.СкоростьГраница КАК СкоростьВерхняяГраница,
	|	втСокращеннаяШкала_ВерхняяГраница.ВыбранныйЦвет КАК ВыбранныйЦвет,
	|	ЕСТЬNULL(МАКСИМУМ(втСокращеннаяШкала_НижняяГраница.СкоростьГраница), 0) КАК СкоростьНижняяГраница,
	|	втСокращеннаяШкала_ВерхняяГраница.ВариантОтображенияТрека КАК ВариантОтображенияТрека
	|ИЗ
	|	втСокращеннаяШкала КАК втСокращеннаяШкала_ВерхняяГраница
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСокращеннаяШкала КАК втСокращеннаяШкала_НижняяГраница
	|		ПО втСокращеннаяШкала_ВерхняяГраница.СкоростьГраница > втСокращеннаяШкала_НижняяГраница.СкоростьГраница
	|
	|СГРУППИРОВАТЬ ПО
	|	втСокращеннаяШкала_ВерхняяГраница.ВыбранныйЦвет,
	|	втСокращеннаяШкала_ВерхняяГраница.ВариантОтображенияТрека,
	|	втСокращеннаяШкала_ВерхняяГраница.СкоростьГраница
	|
	|УПОРЯДОЧИТЬ ПО
	|	ВариантОтображенияТрека,
	|	СкоростьВерхняяГраница";
	
		
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции

// Получает градуированную (от 0 до МаксимальнаяСкорость()) по скорости шкалу
//
// Не следует напрямую работать с полученным соответствием, вместо этого нужно использовать ЗначениеЦветаДляСкоростиПоГрадуированнойШкале().
//
// Параметры:
//  ПолнаяШкала - ТаблицаЗначений - см. ШаблонШкалы().
// 
// Возвращаемое значение:
//  Соответствие - Градуированная шкала: на входе - скорость (целое число в км/ч), на выходе - цвет (согласно полной шкале).
//
Функция ГрадуироватьШкалуПоСкорости(ПолнаяШкала) Экспорт
	
	ГрадуированнаяШкала = Неопределено;
	Если ПолнаяШкала.Количество() = 0 Тогда
		Возврат ГрадуированнаяШкала;	
	КонецЕсли; 
	
	ГрадуированнаяШкала = Новый Соответствие;
	
	Для ТекущаяСкорость = 0 По МаксимальнаяСкорость() Цикл
		ГрадуированнаяШкала.Вставить(ТекущаяСкорость, ЗначениеЦветаДляСкоростиПоШкале(ПолнаяШкала, ТекущаяСкорость));	
	КонецЦикла; 
	
	
	Возврат ГрадуированнаяШкала;
	
КонецФункции
 
// Подбирает подходящее значение цвета на основании шкалы и значения скорости.
//
// Параметры:
//  ПолнаяШкала - ТаблицаЗначений - см. ШаблонШкалы(). 
//  Скорость - Число - Значение скорости, для которого надо получить значение цвета. 
// 
// Возвращаемое значение:
//  Число - Десятичное число, соответствующее цвету в модели BGR.
//
Функция ЗначениеЦветаДляСкоростиПоШкале(ПолнаяШкала, Скорость) Экспорт
	
	Цвет = 0;
	
	Если ПолнаяШкала.Количество() = 0 Тогда
		Возврат Цвет;	
	КонецЕсли; 
	
	Если Скорость = 0 Тогда
		Возврат ПолнаяШкала[0].ВыбранныйЦвет;
	ИначеЕсли Скорость >= МаксимальнаяСкорость() Тогда 	
		Возврат ПолнаяШкала[ПолнаяШкала.Количество() - 1].ВыбранныйЦвет;	
	КонецЕсли;
	
	Для каждого СтрокаШкалы Из ПолнаяШкала Цикл
		Если Скорость >= СтрокаШкалы.СкоростьНижняяГраница
			 И Скорость < СтрокаШкалы.СкоростьВерхняяГраница Тогда
			 
			Цвет = СтрокаШкалы.ВыбранныйЦвет;
			
			Прервать;
		КонецЕсли; 	
	КонецЦикла; 
	
	
	Возврат Цвет;
	
КонецФункции

// Обертка над градуированной шкалой (учитывает возможный выход значения за максимальную скорость.
//
// Параметры:
//  ГрадуированнаяШкала	- Соответствие - См. ГрадуироватьШкалуПоСкорости(). 
//  Скорость - Число - Значение скорости.
// 
// Возвращаемое значение:
//  Число - Полученный цвет.
//
Функция ЗначениеЦветаДляСкоростиПоГрадуированнойШкале(ГрадуированнаяШкала, Скорость) Экспорт
	
	Если Скорость >= МаксимальнаяСкорость() Тогда
		Возврат ГрадуированнаяШкала[МаксимальнаяСкорость()]; 	
	КонецЕсли; 
	
	
	Возврат ГрадуированнаяШкала[Скорость];
	
КонецФункции
 
#КонецОбласти

#КонецЕсли

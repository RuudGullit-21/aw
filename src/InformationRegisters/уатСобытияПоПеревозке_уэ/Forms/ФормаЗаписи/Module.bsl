#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	уатЗащищенныеФункцииСервер.уатРегистрФормаСпискаПриСозданииНаСервере(Отказ, СтандартнаяОбработка,ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	
	Параметры.Свойство("ЭтоШаблонПеревозки", ЭтоШаблонПеревозки);
	Параметры.Свойство("ОткрытИзДокумента",  ОткрытИзДокумента);
	
	Если НЕ ЗначениеЗаполнено(Запись.ДокументПеревозки) Тогда
		Параметры.Свойство("ДокументПеревозки", Запись.ДокументПеревозки);
	Иначе
		Если ТипЗнч(Запись.ДокументПеревозки) = Тип("ДокументСсылка.уатЗаказГрузоотправителя")
			И Запись.ДокументПеревозки.ЭтоШаблонПеревозки Тогда
			ЭтоШаблонПеревозки = истина;
		КонецЕсли;
	КонецЕсли;

	ВидДокумента = ?(ТипЗнч(Запись.ДокументПеревозки) = Тип("ДокументСсылка.уатМаршрутныйЛист"),
		ПредопределенноеЗначение("Перечисление.уатВидыДокументовСобытийПоПеревозке_уэ.МаршрутныйЛист"),
		ПредопределенноеЗначение("Перечисление.уатВидыДокументовСобытийПоПеревозке_уэ.ЗаказГрузоотправителя"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	уатЗащищенныеФункцииКлиент.уатРегистрФормаСпискаПриОткрытии(Отказ, ДопПараметрыОткрытие);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	УстановитьВидимость();

КонецПроцедуры

&НаСервере
Процедура ПриЧтенииНаСервере(ТекущийОбъект)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПриЧтенииНаСервере(ЭтотОбъект, ТекущийОбъект);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

&НаСервере
Процедура ПослеЗаписиНаСервере(ТекущийОбъект, ПараметрыЗаписи)

	// СтандартныеПодсистемы.УправлениеДоступом
	УправлениеДоступом.ПослеЗаписиНаСервере(ЭтотОбъект, ТекущийОбъект, ПараметрыЗаписи);
	// Конец СтандартныеПодсистемы.УправлениеДоступом

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТипДнейОтДатыНачалаПеревозкиПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если Запись.ТипДнейОтДатыНачалаПеревозки = "рабочие" Тогда
		НайденныйРеквизит = ПроверяемыеРеквизиты.Найти("ТипДнейОтДатыНачалаПеревозки");
		Если НЕ ЗначениеЗаполнено(НайденныйРеквизит) Тогда
			ПроверяемыеРеквизиты.Добавить("ТипДнейОтДатыНачалаПеревозки");
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПрикрепитьСобытие(Команда)
	
	СписокТипов = Новый СписокЗначений;
	СписокТипов.Добавить(Тип("ДокументСсылка.СообщениеSMS"));
	СписокТипов.Добавить(Тип("БизнесПроцессСсылка.Задание"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ЗапланированноеВзаимодействие"));
	СписокТипов.Добавить(Тип("ДокументСсылка.ТелефонныйЗвонок"));
	СписокТипов.Добавить(Тип("ДокументСсылка.Встреча"));
	Оповещение = Новый ОписаниеОповещения("ОбработкаВыбораТипаДанных", ЭтотОбъект);
	СписокТипов.ПоказатьВыборЭлемента(Оповещение, "Выбор типа данных");
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьВидимость()
	
	Элементы.ГруппаШаблон.Видимость   = ЭтоШаблонПеревозки;
	Элементы.ВидДокумента.Видимость   = ЭтоШаблонПеревозки;
	Элементы.Документ.Видимость       = НЕ ОткрытИзДокумента;
	
	Элементы.Событие.Видимость       = НЕ ЭтоШаблонПеревозки И ЗначениеЗаполнено(Запись.Событие);
	Элементы.ГруппаСобытие.Видимость = НЕ ЭтоШаблонПеревозки И НЕ ЗначениеЗаполнено(Запись.Событие);
	Элементы.ГруппаФакт.Видимость    = НЕ ЭтоШаблонПеревозки;
	Элементы.ГруппаПлан.Видимость    = НЕ ЭтоШаблонПеревозки;
	
	Элементы.ПроизводственныйКалендарь.Видимость = Запись.ТипДнейОтДатыНачалаПеревозки = "рабочие";
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбораТипаДанных(ВыбранныйЭлемент, СписокПараметров) Экспорт
	
	Если ВыбранныйЭлемент <> Неопределено Тогда
		
		ИмяОткрываемойФормы = "";
		
		Если ВыбранныйЭлемент.Значение = Тип("ДокументСсылка.СообщениеSMS") Тогда
			ИмяОткрываемойФормы = "Документ.СообщениеSMS.ФормаВыбора";
		ИначеЕсли ВыбранныйЭлемент.Значение = Тип("ДокументСсылка.ЭлектронноеПисьмоИсходящее") Тогда
			ИмяОткрываемойФормы = "Документ.ЭлектронноеПисьмоИсходящее.ФормаВыбора";
		ИначеЕсли ВыбранныйЭлемент.Значение = Тип("ДокументСсылка.ЗапланированноеВзаимодействие") Тогда
			ИмяОткрываемойФормы = "Документ.ЗапланированноеВзаимодействие.ФормаВыбора";
		ИначеЕсли ВыбранныйЭлемент.Значение = Тип("ДокументСсылка.ТелефонныйЗвонок") Тогда
			ИмяОткрываемойФормы = "Документ.ТелефонныйЗвонок.ФормаВыбора";
		ИначеЕсли ВыбранныйЭлемент.Значение = Тип("ДокументСсылка.Встреча") Тогда
			ИмяОткрываемойФормы = "Документ.Встреча.ФормаВыбора";
		ИначеЕсли ВыбранныйЭлемент.Значение = Тип("БизнесПроцессСсылка.Задание") Тогда
			ИмяОткрываемойФормы = "БизнесПроцесс.Задание.ФормаВыбора";
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("ОписаниеЗакрытияФормыВыбора", ЭтотОбъект);
		
		ОткрытьФорму(ИмяОткрываемойФормы, , ЭтаФорма, , , , Оповещение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеЗакрытияФормыВыбора(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда
		ВводНаОсновании = Ложь;
	КонецЕсли;	
	
	Запись.Событие = РезультатЗакрытия;
	УстановитьВидимость();
КонецПроцедуры

#КонецОбласти
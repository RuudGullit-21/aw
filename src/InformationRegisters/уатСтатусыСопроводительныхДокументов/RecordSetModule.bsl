
#Область ОбработчикиСобытий

Процедура ПередЗаписью(Отказ, Замещение)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Уведомления
	Если Не Отказ И ПолучитьФункциональнуюОпцию("уатИспользоватьУведомления_уэ") Тогда
		Если ЭтотОбъект.Количество() = 0 Тогда
			// Удаление записей регистра.
			// Запоминаются старые значения записей регистра перед их удалением.
			ЭтотОбъект.Прочитать();
			ТаблицаСтатусов = ЭтотОбъект.Выгрузить();
			ЭтотОбъект.Очистить();
			
			ДополнительныеСвойства.Вставить("ПредыдущиеЗаписи", ТаблицаСтатусов);
			
		ИначеЕсли ДополнительныеСвойства.Свойство("ПредыдущиеЗаписи") Тогда
			// Создание новых записей регистра после удаления старых.
			СформироватьУведомленияПоТекущимЗаписям(ДополнительныеСвойства.ПредыдущиеЗаписи);
			
		Иначе
			// Создание новых записей регистра без удаления старых.
			ПредыдущиеЗаписи = ЭтотОбъект.ВыгрузитьКолонки();
			СформироватьУведомленияПоТекущимЗаписям(ПредыдущиеЗаписи);
			
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

Процедура ПриЗаписи(Отказ, Замещение)
	
	Если ОбменДанными.Загрузка Тогда
		Возврат;
	КонецЕсли;
	
	// Уведомления
	Если НЕ Отказ И ДополнительныеСвойства.Свойство("НовыеЗаписи") Тогда
		// Проверка наличия правил формирования уведомлений по событию "Изменение статуса".
		Запрос = Новый Запрос(
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ ПЕРВЫЕ 1
		|	уатПравилаФормированияУведомлений_уэ.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.уатПравилаФормированияУведомлений_уэ КАК уатПравилаФормированияУведомлений_уэ
		|ГДЕ
		|	уатПравилаФормированияУведомлений_уэ.ТипСобытия = ЗНАЧЕНИЕ(Перечисление.уатТипыСобытийДляУведомления_уэ.ИзменениеСтатуса)
		|	И уатПравилаФормированияУведомлений_уэ.ТипОбъекта = ЗНАЧЕНИЕ(Перечисление.уатТипыОбъектовДляУведомлений_уэ.СопроводительныйДокумент)");
		РезультатЗапроса = Запрос.Выполнить();
		Если Не РезультатЗапроса.Пустой() Тогда
			Для Каждого ТекСтрока Из ДополнительныеСвойства.НовыеЗаписи Цикл
				ДополнительныеПараметры = Новый Структура("Статус, ДатаУстановкиСтатуса", ТекСтрока.Статус, ТекСтрока.Период);
				уатОбщегоНазначения_уэ.СформироватьУведомление(
					ТекСтрока.СопроводительныйДокумент,
					Перечисления.уатТипыСобытийДляУведомления_уэ.ИзменениеСтатуса,
					ДополнительныеПараметры
				);
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
		
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

Процедура СформироватьУведомленияПоТекущимЗаписям(ПредыдущиеЗаписи)
	// Старые записи сравниваются с новыми, находятся записи, которых раньше не было, для них формируются уведомления.
	ТекущиеЗаписи = ЭтотОбъект.Выгрузить();
	НовыеЗаписи = ТекущиеЗаписи.СкопироватьКолонки();
	
	// Не отслеживается изменение времени установки уже установленного статуса - колонки Период
	СтруктураПоиска = Новый Структура("СопроводительныйДокумент, Статус");
	Для Каждого ТекСтрока Из ТекущиеЗаписи Цикл
		ЗаполнитьЗначенияСвойств(СтруктураПоиска, ТекСтрока);
		Если ПредыдущиеЗаписи.НайтиСтроки(СтруктураПоиска).Количество() = 0 Тогда
			НоваяСтрока = НовыеЗаписи.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		КонецЕсли;
	КонецЦикла;
	Если НовыеЗаписи.Количество() > 0 Тогда
		ДополнительныеСвойства.Вставить("НовыеЗаписи", НовыеЗаписи);
	КонецЕсли;
	
	Для Каждого ТекСтрока Из НовыеЗаписи Цикл
		СформироватьУведомлениеПоЗаписи(ТекСтрока);
	КонецЦикла;
КонецПроцедуры
	
Процедура СформироватьУведомлениеПоЗаписи(ТекЗапись)
	ДополнительныеПараметры = Новый Структура;
	ДополнительныеПараметры.Вставить("Статус", ТекЗапись.Статус);
	ДополнительныеПараметры.Вставить("ДатаУстановкиСтатуса", ТекЗапись.Период);
	//Если ТипЗнч(ТекЗапись.Регистратор) = Тип("ДокументСсылка.уатМаршрутныйЛист") Тогда
	//	ДополнительныеПараметры.Вставить("ДополнительныйДокумент", ТекЗапись.Регистратор);
	//КонецЕсли;
		
	уатОбщегоНазначения_уэ.СформироватьУведомление(
		ТекЗапись.СопроводительныйДокумент,
		Перечисления.уатТипыСобытийДляУведомления_уэ.ИзменениеСтатуса,
		ДополнительныеПараметры
	);
КонецПроцедуры

#КонецОбласти
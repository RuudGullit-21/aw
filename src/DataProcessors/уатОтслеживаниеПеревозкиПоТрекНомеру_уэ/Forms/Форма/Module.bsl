
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	АдресСервиса = "/hs/tracking_api/v1/tracking/";
КонецПроцедуры 

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура НайтиЭтапыПеревозки(Команда)
	Если Не ЗначениеЗаполнено(ТрекНомер) Тогда 
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("ru='Не заполнен трек-номер';en=''");
		Сообщение.Сообщить(); 
		Возврат;
	КонецЕсли;
	
	ТаблицаСтатусов.Очистить();
	
	ДанныеОтвета = ПоискЭтаповПеревозкиНаСервере(ТрекНомер); 
	
	Если ДанныеОтвета["code"] = 200 Тогда
		 
		МассивСтатусовПоЗаказу = ДанныеОтвета["statusarray"];
		Для Каждого ТекСтатус Из МассивСтатусовПоЗаказу Цикл
			
			ДатаИзмененияСтатуса = ТекСтатус["Date"];
			ДатаИзмененияСтатуса = СтрЗаменить(ДатаИзмененияСтатуса, "T", "");
			ДатаИзмененияСтатуса = СтрЗаменить(ДатаИзмененияСтатуса, ":", "");
			ДатаИзмененияСтатуса = СтрЗаменить(ДатаИзмененияСтатуса, "-", "");
			ДатаИзмененияСтатуса = Дата(ДатаИзмененияСтатуса);
			
			НоваяСтрока     		   = ТаблицаСтатусов.Добавить(); 
			НоваяСтрока.Дата 		   = ДатаИзмененияСтатуса;
			НоваяСтрока.Статус 		   = ТекСтатус["Status"];
			НоваяСтрока.Местоположение = ТекСтатус["Location"];
			
		КонецЦикла; 
		НайденныйОбъект = ДанныеОтвета["object"];
		ПоказатьПредупреждение(, ДанныеОтвета["message"]);
	ИначеЕсли ДанныеОтвета["code"] = 410 Тогда 
		НайденныйОбъект = ДанныеОтвета["object"]; 
		ПоказатьПредупреждение(, ДанныеОтвета["message"]);
	Иначе
		ПоказатьПредупреждение(, ДанныеОтвета["message"]);
	КонецЕсли;
	
КонецПроцедуры 

&НаКлиенте
Процедура ПроверитьПодключение(Команда)   
	
	Если Не ПодключениеДоступно() Тогда 
		Возврат;
	КонецЕсли;
	
	ПоказатьПредупреждение(, НСтр("en='Connection check is completed successfully.';ru='Проверка подключения успешно завершена.'"));
	 
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ПоискЭтаповПеревозкиНаСервере(НомерОтслеживания) 
	
	ТекстОшибки = "";
	КодКорректногоЗавершения = 200;
	ДанныеЗапроса = Новый Соответствие(); 
	
	Заголовки = Новый Соответствие();
	Заголовки.Вставить("Authorization", "Basic " + СоздатьСтрокуBase64(Логин + ":" + Пароль));
	
	ТекстЗапроса = АдресПубликации + АдресСервиса + НомерОтслеживания;
	HTTPОтвет = ВыполнитьHTTPЗапрос(ТекстЗапроса, "Api.Tracking", ТекстОшибки,,, Заголовки);
	
	Если ЗначениеЗаполнено(ТекстОшибки) 
		ИЛИ HTTPОтвет = Неопределено Тогда
		Возврат ДанныеЗапроса;
	КонецЕсли;
	
	КодСостояния = HTTPОтвет.КодСостояния;
	ResponseText = HTTPОтвет.ПолучитьТелоКакСтроку();
	
	Если КодСостояния = КодКорректногоЗавершения Тогда
		Если ЗначениеЗаполнено(ResponseText) Тогда
			ЧтениеJSON = Новый ЧтениеJSON();
			ЧтениеJSON.УстановитьСтроку(ResponseText);
			Response = ПрочитатьJSON(ЧтениеJSON, Истина);
			ЧтениеJSON.Закрыть();
			
			ДанныеЗапроса = Response;
		КонецЕсли;
	Иначе 
		СтрокаТекстаОшибки = НСтр("en='Error occurred while searching for transportation stages.';ru='Возникла ошибка при поиске этапов перевозки.'");
		ТекстОшибки = СтрокаТекстаОшибки + " " + НСтр("ru='(Подробности см. в журнале регистрации).'");
		ЗаписьЖурналаРегистрации(
		"Api.Tracking",
		УровеньЖурналаРегистрации.Ошибка,
		Метаданные.ОбщиеМодули.уатЗащищенныеФункцииСервер_проф,
		,
		СтрокаТекстаОшибки + Символы.ПС + ResponseText + Символы.ПС + ТекстЗапроса
		);
		Если ЗначениеЗаполнено(ResponseText) Тогда
			ЧтениеJSON = Новый ЧтениеJSON();
			ЧтениеJSON.УстановитьСтроку(ResponseText);
			Response = ПрочитатьJSON(ЧтениеJSON, Истина);
			ЧтениеJSON.Закрыть();
			
			ДанныеЗапроса = Response; 
		КонецЕсли;
	КонецЕсли;
	
	Возврат ДанныеЗапроса;
	
КонецФункции   

&НаСервереБезКонтекста
Функция СоздатьСтрокуBase64(Строка)
	
	ВременныйФайл = ПолучитьИмяВременногоФайла();
	
	ЗаписьТекста = Новый ЗаписьТекста(ВременныйФайл, "CESU-8");
	ЗаписьТекста.Записать(Строка);
	ЗаписьТекста.Закрыть();
	
	ДД_Файла = Новый ДвоичныеДанные(ВременныйФайл);
	СтрокаBase64 = Base64Строка(ДД_Файла);
	
	УдалитьФайлы(ВременныйФайл);
	
	Возврат СтрокаBase64;
	
КонецФункции  

&НаСервере
Функция ПодключениеДоступно()
	
	ДанныеОтвета = ПоискЭтаповПеревозкиНаСервере("0123456789123");
	
	Если ДанныеОтвета.Количество() > 0 Тогда
		Возврат Истина;
	Иначе
		ТекстОшибки = НСтр("ru='По указанному адресу отсутствует возможность подключения к функциям API.'"); 
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = ТекстОшибки;
		Сообщение.Сообщить();
		Возврат Ложь;
	КонецЕсли;
			
КонецФункции

&НаСервере
Функция ВыполнитьHTTPЗапрос(ПолныйАдресРесурса, Система, ТекстОшибки, стрЗапрос = Неопределено, ТелоPOST="",
	Заголовки = Неопределено, HTTPМетод = "", УчитыватьПорт = Истина, УчитыватьПрокси = Истина)
	
	Попытка
		Если НРег(Лев(ПолныйАдресРесурса, 8)) = НРег("https://") Тогда 
			ИспользоватьЗащищенноеСоединение = Истина;
		Иначе 
			ИспользоватьЗащищенноеСоединение = Ложь;
		КонецЕсли;
		
		Если ИспользоватьЗащищенноеСоединение Тогда 
			ЗащищенноеСоединениеOpenSSL = Новый ЗащищенноеСоединениеOpenSSL();   
		Иначе 
			ЗащищенноеСоединениеOpenSSL = Неопределено;
		КонецЕсли;
		
		СтруктураURI   = ОбщегоНазначенияКлиентСервер.СтруктураURI(ПолныйАдресРесурса); 
		ИнтернетПрокси = ?(УчитыватьПрокси, ПолучениеФайловИзИнтернета.ПолучитьПрокси(СтруктураURI.Схема),
			Неопределено);
		
		HTTPСоединение = Новый HTTPСоединение(СтруктураURI.Хост, ?(УчитыватьПорт, СтруктураURI.Порт, Неопределено),
		, , ИнтернетПрокси, 600, ЗащищенноеСоединениеOpenSSL); 
		
		Если стрЗапрос <> Неопределено Тогда
			HTTPЗапрос = Новый HTTPЗапрос(стрЗапрос);
		Иначе
			Если Заголовки <> Неопределено Тогда
				HTTPЗапрос = Новый HTTPЗапрос(СтруктураURI.ПутьНаСервере, Заголовки);
			Иначе
				HTTPЗапрос = Новый HTTPЗапрос(СтруктураURI.ПутьНаСервере);
			КонецЕсли;
		КонецЕсли;
		
		Если HTTPМетод = "DELETE" Тогда
			Если ЗначениеЗаполнено(ТелоPOST) Тогда
				HTTPЗапрос.УстановитьТелоИзСтроки(ТелоPOST,, ИспользованиеByteOrderMark.НеИспользовать);
			КонецЕсли;

			HTTPОтвет = HTTPСоединение.ВызватьHTTPМетод("DELETE",HTTPЗапрос);
		ИначеЕсли HTTPМетод = "PATCH" Тогда
			Если ЗначениеЗаполнено(ТелоPOST) Тогда
				HTTPЗапрос.УстановитьТелоИзСтроки(ТелоPOST,, ИспользованиеByteOrderMark.НеИспользовать);
			КонецЕсли;

			HTTPОтвет = HTTPСоединение.Изменить(HTTPЗапрос);
		ИначеЕсли HTTPМетод = "POST" Тогда
			HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
		ИначеЕсли HTTPМетод = "PUT" Тогда 
			HTTPОтвет = HTTPСоединение.ВызватьHTTPМетод(HTTPМетод, HTTPЗапрос);
		ИначеЕсли ТелоPOST = "" 
			И НЕ HTTPМетод = "GET" Тогда 
			HTTPОтвет = HTTPСоединение.Получить(HTTPЗапрос);
		Иначе
			HTTPЗапрос.УстановитьТелоИзСтроки(ТелоPOST,, ИспользованиеByteOrderMark.НеИспользовать);
			
			HTTPОтвет = HTTPСоединение.ОтправитьДляОбработки(HTTPЗапрос);
		КонецЕсли;
		
	Исключение
		ТекстОшибки = НСтр("en='Error when connecting to the server. (For details, see event log)';ru='Ошибка при установке соединения с сервером. (Подробности см. в журнале регистрации)'");
		ЗаписьЖурналаРегистрации(Система,
		УровеньЖурналаРегистрации.Ошибка,
		Метаданные.ОбщиеМодули.уатЗащищенныеФункцииСервер_проф,
		,
		НСтр("en='Error when connecting to the server. Error description: ';ru='Ошибка при установке соединения с сервером.. Описание ошибки: '") 
		+ Символы.ПС + ОписаниеОшибки());
		Возврат 1;
	КонецПопытки;
	
	Возврат HTTPОтвет;
	
КонецФункции

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// начало блока стандартных операций
	//ДопПараметрыОткрытие = Новый Структура("ИмяФормы", ИмяФормы);
	уатЗащищенныеФункцииСервер.уатОбработкаФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	// конец блока стандартных операций
	
	Если НЕ ЗначениеЗаполнено(ДатаФормирования) Тогда
		ДатаФормирования = ТекущаяДата();
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		Организация = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнаяОрганизация");
	КонецЕсли;
	
	Если НЕ уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП() Тогда
		Элементы.ГруппаВидОперации.Видимость = Ложь;
		ВидОперации = 1;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// начало блока стандартных операций
	уатЗащищенныеФункцииКлиент.уатОбработкаФормаПриОткрытии(Отказ, ДопПараметрыОткрытие);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	// конец блока стандартных операций
	
	Если ВладелецФормы <> Неопределено И ВладелецФормы.ИмяФормы = "Обработка.уатАРМЛогиста_уэ.Форма.Форма" Тогда
		ДатаФормирования = ВладелецФормы.ДатаПланирования;	
	КонецЕсли;
	
	ВидОперацииПриИзменении();

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаФормированияПриИзменении(Элемент)
	Заполнить(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	Заполнить(Неопределено);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_Потребности

&НаКлиенте
Процедура ПотребностиВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекСтрока = Элементы.Потребности.ТекущиеДанные;
	Если (Поле.Имя = "ЗаказыДокументПотребностьНомер"
		ИЛИ Поле.Имя = "ЗаказыДокументПотребностьДата"
		ИЛИ Поле.Имя = "ЗаказыДокументПотребностьНомерСтроки")
		И ЗначениеЗаполнено(ТекСтрока.ДокументПотребность) Тогда
		ПоказатьЗначение(Неопределено,ТекСтрока.ДокументПотребность);
	ИначеЕсли (Поле.Имя = "ПотребностиДокументЗаказНомер"
		ИЛИ Поле.Имя = "ПотребностиДокументЗаказДата")
		И ЗначениеЗаполнено(ТекСтрока.ДокументЗаказ) Тогда
		ПоказатьЗначение(Неопределено,ТекСтрока.ДокументЗаказ);
	ИначеЕсли Поле.Имя = "ПотребностиКонтрагент"
		И ЗначениеЗаполнено(ТекСтрока.Контрагент) Тогда
		ПоказатьЗначение(Неопределено,ТекСтрока.Контрагент);
	ИначеЕсли Поле.Имя = "ПотребностиДоговорКонтрагента"
		И ЗначениеЗаполнено(ТекСтрока.ДоговорКонтрагента) Тогда
		ПоказатьЗначение(Неопределено,ТекСтрока.ДоговорКонтрагента);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыТребованиеКТСПриИзменении(Элемент)
	ТекСтрока = Элементы.Потребности.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекСтрока.ТребованиеКТС) Тогда
		ТекСтрока.ТребованиеКТСТипТС = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрока.ТребованиеКТС, "ТипТС");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПотребностиТребованиеКТСТипТСПриИзменении(Элемент)
	ТекСтрока = Элементы.Потребности.ТекущиеДанные;
	Если ЗначениеЗаполнено(ТекСтрока.ТребованиеКТСТипТС) Тогда
		Модель_ТипТС = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрока.ТребованиеКТС, "ТипТС");
		Если Модель_ТипТС <> ТекСтрока.ТребованиеКТСТипТС Тогда
			ТекСтрока.ТребованиеКТС = Неопределено;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыГрузоотправительПриИзменении(Элемент)
	ТекСтрока = Элементы.Потребности.ТекущиеДанные;
	СтруктураСтроки = Новый Структура("Грузоотправитель, КонтактноеЛицоГрузоотправителя, ВидДоставки, АдресОтправления",
		ТекСтрока.Грузоотправитель, ТекСтрока.КонтактноеЛицоГрузоотправителя, ТекСтрока.ВидДоставки, ТекСтрока.АдресОтправления);
		
	АдресИзменен = Ложь;
	ГрузоотправительПриИзмененииСервер(СтруктураСтроки, АдресИзменен);
	Если АдресИзменен Тогда 
		ТекСтрока.АдресОтправления = СтруктураСтроки.АдресОтправления;		
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыГрузоотправительОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ТекСтрока = Элементы.Потребности.ТекущиеДанные;
	
	Если ТекСтрока.ВидДоставки = ПредопределенноеЗначение("Перечисление.уатВидыДоставки_уэ.СкладДверь")
		ИЛИ ТекСтрока.ВидДоставки = ПредопределенноеЗначение("Перечисление.уатВидыДоставки_уэ.СкладСклад") Тогда
		Возврат;
	КонецЕсли;
	
	уатОбщегоНазначенияКлиент.КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыГрузоотправительАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ТекСтрока = Элементы.Потребности.ТекущиеДанные;
	
	Если ТекСтрока.ВидДоставки = ПредопределенноеЗначение("Перечисление.уатВидыДоставки_уэ.СкладДверь")
		ИЛИ ТекСтрока.ВидДоставки = ПредопределенноеЗначение("Перечисление.уатВидыДоставки_уэ.СкладСклад") Тогда
		Возврат;
	КонецЕсли;
	
	уатОбщегоНазначенияКлиент.КонтрагентАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыГрузоотправительОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ТекСтрока = Элементы.Потребности.ТекущиеДанные;
	
	Если ТекСтрока.ВидДоставки = ПредопределенноеЗначение("Перечисление.уатВидыДоставки_уэ.СкладДверь")
		ИЛИ ТекСтрока.ВидДоставки = ПредопределенноеЗначение("Перечисление.уатВидыДоставки_уэ.СкладСклад") Тогда
		Возврат;
	КонецЕсли;
	
	уатОбщегоНазначенияКлиент.КонтрагентОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыКонтактноеЛицоГрузоотправителяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекСтрока = Элементы.Потребности.ТекущиеДанные;
	
	уатОбщегоНазначенияТиповыеКлиент.уатНачалоВыбораКонтактногоЛицаКонтрагента(Элемент, СтандартнаяОбработка,
		?(Не ЗначениеЗаполнено(ТекСтрока.Грузоотправитель), ТекСтрока.Контрагент, ТекСтрока.Грузоотправитель));
	КонецПроцедуры

&НаКлиенте
Процедура ЗаказыГрузополучательПриИзменении(Элемент)
	ТекСтрока = Элементы.Потребности.ТекущиеДанные;
	СтруктураСтроки = Новый Структура("Грузополучатель, КонтактноеЛицоГрузополучателя, ВидДоставки, АдресНазначения",
		ТекСтрока.Грузополучатель, ТекСтрока.КонтактноеЛицоГрузополучателя, ТекСтрока.ВидДоставки, ТекСтрока.АдресНазначения);
	
	АдресИзменен = Ложь;
	ГрузополучательПриИзмененииСервер(СтруктураСтроки, АдресИзменен);
	Если АдресИзменен Тогда 
		ТекСтрока.АдресНазначения = СтруктураСтроки.АдресНазначения;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыГрузополучательОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ТекСтрока = Элементы.Потребности.ТекущиеДанные;
	
	Если ТекСтрока.ВидДоставки = ПредопределенноеЗначение("Перечисление.уатВидыДоставки_уэ.ДверьСклад")
		ИЛИ ТекСтрока.ВидДоставки = ПредопределенноеЗначение("Перечисление.уатВидыДоставки_уэ.СкладСклад") Тогда
		Возврат;
	КонецЕсли;
	
	уатОбщегоНазначенияКлиент.КонтрагентОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыГрузополучательАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ТекСтрока = Элементы.Потребности.ТекущиеДанные;
	
	Если ТекСтрока.ВидДоставки = ПредопределенноеЗначение("Перечисление.уатВидыДоставки_уэ.ДверьСклад")
		ИЛИ ТекСтрока.ВидДоставки = ПредопределенноеЗначение("Перечисление.уатВидыДоставки_уэ.СкладСклад") Тогда
		Возврат;
	КонецЕсли;
	
	уатОбщегоНазначенияКлиент.КонтрагентАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыГрузополучательОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ТекСтрока = Элементы.Потребности.ТекущиеДанные;
	
	Если ТекСтрока.ВидДоставки = ПредопределенноеЗначение("Перечисление.уатВидыДоставки_уэ.ДверьСклад")
		ИЛИ ТекСтрока.ВидДоставки = ПредопределенноеЗначение("Перечисление.уатВидыДоставки_уэ.СкладСклад") Тогда
		Возврат;
	КонецЕсли;
	
	уатОбщегоНазначенияКлиент.КонтрагентОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыКонтактноеЛицоГрузополучателяНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекСтрока = Элементы.Потребности.ТекущиеДанные;
	
	уатОбщегоНазначенияТиповыеКлиент.уатНачалоВыбораКонтактногоЛицаКонтрагента(Элемент, СтандартнаяОбработка,
		?(Не ЗначениеЗаполнено(ТекСтрока.Грузополучатель), ТекСтрока.Контрагент, ТекСтрока.Грузополучатель));
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Заполнить(Команда)
	Если НЕ ЗначениеЗаполнено(ДатаФормирования)
		ИЛИ НЕ ЗначениеЗаполнено(Организация) Тогда
		ТекстНСТР = НСтр("en='Not specified all fields to update the data!';ru='Указаны не все поля для обновления данных!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		Возврат;
	КонецЕсли;
		
	Если Потребности.Количество() > 0 Тогда
		ТекстНСТР = НСтр("en='Table will be cleared before filling! Continue?';ru='Перед заполнением таблица будет очищена! Продолжить?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработкаОтветаЗаполнить", ЭтотОбъект), ТекстНСТР, РежимДиалогаВопрос.ОКОтмена);
		Возврат;
	КонецЕсли;
	
	Если ВидОперации = 0 Тогда
		ЗаполнитьТаблицуСервер();
	Иначе
		ЗаполнитьТаблицуПланСервер();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СформироватьЗаказы(Команда)
	
	Количество = 0;
	Для Каждого ТекСтрока Из Потребности Цикл
		Если ТекСтрока.Пометка И НЕ ЗначениеЗаполнено(ТекСтрока.ДокументЗаказ) Тогда
			Количество = Количество + 1;	
		КонецЕсли;
	КонецЦикла;
	
	Если Количество = 0 Тогда
		ТекстНСТР = НСтр("en='No lines have been selected to form orders or orders have already been formed!';ru='Не выбраны строки для формирования заказов или заказы уже сформированы!'");
		ПоказатьПредупреждение(Неопределено, ТекстНСТР);	
	Иначе
		ТекстНСТР = НСтр("en='Orders will be created: %1. Continue?';ru='Будет сформировано заказов: %1. Продолжить?'");
		ТекстНСТР = СтрШаблон(ТекстНСТР, Количество);
		ПоказатьВопрос(Новый ОписаниеОповещения("ОбработкаОтветаСформировать", ЭтотОбъект), ТекстНСТР, РежимДиалогаВопрос.ОКОтмена);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьВсе(Команда)
	Для Каждого ТекСтрока Из Потребности Цикл
		Если ЗначениеЗаполнено(ТекСтрока.ДокументЗаказ) Тогда 
			Продолжить;
		КонецЕсли;
		ТекСтрока.Пометка = Истина;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсе(Команда)
	Для Каждого ТекСтрока Из Потребности Цикл
		ТекСтрока.Пометка = Ложь;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьТаблицуСервер()
	Потребности.Очистить();
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатПотребностьВПеревозке_уэПунктыНазначения.НомерСтроки КАК ДокументПотребностьНомерСтроки,
	|	уатПотребностьВПеревозке_уэПунктыНазначения.ID КАК IDСтроки,
	|	уатПотребностьВПеревозке_уэПунктыНазначения.Ссылка КАК ДокументПотребность,
	|	уатПотребностьВПеревозке_уэПунктыНазначения.Грузоотправитель,
	|	уатПотребностьВПеревозке_уэПунктыНазначения.Грузополучатель,
	|	уатПотребностьВПеревозке_уэПунктыНазначения.АдресОтправления,
	|	уатПотребностьВПеревозке_уэПунктыНазначения.АдресНазначения,
	|	уатПотребностьВПеревозке_уэПунктыНазначения.КонтактноеЛицоГрузоотправителя,
	|	уатПотребностьВПеревозке_уэПунктыНазначения.КонтактноеЛицоГрузополучателя,
	|	уатПотребностьВПеревозке_уэПунктыНазначения.ОтправлениеС,
	|	уатПотребностьВПеревозке_уэПунктыНазначения.ОтправлениеПо,
	|	уатПотребностьВПеревозке_уэПунктыНазначения.ПрибытиеС,
	|	уатПотребностьВПеревозке_уэПунктыНазначения.ПрибытиеПо,
	|	уатПотребностьВПеревозке_уэПунктыНазначения.ОбъектСтроительства,
	|	уатПотребностьВПеревозке_уэПунктыНазначения.ТребованиеКТС,
	|	уатПотребностьВПеревозке_уэПунктыНазначения.ТребованиеКТСТипТС,
	|	уатПотребностьВПеревозке_уэПунктыНазначения.ОписаниеГруза,
	|	уатПотребностьВПеревозке_уэПунктыНазначения.Ссылка.Контрагент КАК Контрагент,
	|	уатПотребностьВПеревозке_уэПунктыНазначения.Ссылка.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	уатЗаказГрузоотправителя.Ссылка КАК ДокументЗаказ,
	|	уатПотребностьВПеревозке_уэПунктыНазначения.Ссылка.ДетализацияЗаказов КАК ДетализацияЗакрытия,
	|	уатПотребностьВПеревозке_уэПунктыНазначения.ДатаОтправления,
	|	уатПотребностьВПеревозке_уэПунктыНазначения.ДатаПрибытия,
	|	уатПотребностьВПеревозке_уэПунктыНазначения.ВидПеревозки,
	|	уатПотребностьВПеревозке_уэПунктыНазначения.НаправлениеПеревозки,
	|	уатПотребностьВПеревозке_уэПунктыНазначения.ВидДоставки
	|ПОМЕСТИТЬ ВТ_БезПериодичности
	|ИЗ
	|	Документ.уатПотребностьВПеревозке_уэ.ПунктыНазначения КАК уатПотребностьВПеревозке_уэПунктыНазначения
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	|		ПО уатПотребностьВПеревозке_уэПунктыНазначения.ID = уатЗаказГрузоотправителя.IDСтрокиПотребности
	|			И (НАЧАЛОПЕРИОДА(уатЗаказГрузоотправителя.ОтправлениеС, ДЕНЬ) = &ДатаЗаказа)
	|			И (НЕ уатЗаказГрузоотправителя.ПометкаУдаления)
	|ГДЕ
	|	уатПотребностьВПеревозке_уэПунктыНазначения.Ссылка.Организация = &Организация
	|	И НЕ уатПотребностьВПеревозке_уэПунктыНазначения.Ссылка.ПометкаУдаления
	|	И НЕ уатПотребностьВПеревозке_уэПунктыНазначения.Ссылка.ПериодическаяПотребность
	|	И НАЧАЛОПЕРИОДА(уатПотребностьВПеревозке_уэПунктыНазначения.ДатаОтправления, ДЕНЬ) = &ДатаЗаказа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатПотребностьВПеревозке_уэПунктыНазначения.НомерСтроки КАК ДокументПотребностьНомерСтроки,
	|	уатПотребностьВПеревозке_уэПунктыНазначения.ID КАК IDСтроки,
	|	уатПотребностьВПеревозке_уэПунктыНазначения.Ссылка КАК ДокументПотребность,
	|	уатПотребностьВПеревозке_уэПунктыНазначения.Грузоотправитель,
	|	уатПотребностьВПеревозке_уэПунктыНазначения.Грузополучатель,
	|	уатПотребностьВПеревозке_уэПунктыНазначения.АдресОтправления,
	|	уатПотребностьВПеревозке_уэПунктыНазначения.АдресНазначения,
	|	уатПотребностьВПеревозке_уэПунктыНазначения.КонтактноеЛицоГрузоотправителя,
	|	уатПотребностьВПеревозке_уэПунктыНазначения.КонтактноеЛицоГрузополучателя,
	|	уатПотребностьВПеревозке_уэПунктыНазначения.ОтправлениеС,
	|	уатПотребностьВПеревозке_уэПунктыНазначения.ОтправлениеПо,
	|	уатПотребностьВПеревозке_уэПунктыНазначения.ПрибытиеС,
	|	уатПотребностьВПеревозке_уэПунктыНазначения.ПрибытиеПо,
	|	уатПотребностьВПеревозке_уэПунктыНазначения.ОбъектСтроительства,
	|	уатПотребностьВПеревозке_уэПунктыНазначения.ТребованиеКТС,
	|	уатПотребностьВПеревозке_уэПунктыНазначения.ТребованиеКТСТипТС,
	|	уатПотребностьВПеревозке_уэПунктыНазначения.ОписаниеГруза,
	|	уатПотребностьВПеревозке_уэПунктыНазначения.Ссылка.Контрагент КАК Контрагент,
	|	уатПотребностьВПеревозке_уэПунктыНазначения.Ссылка.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	уатЗаказГрузоотправителя.Ссылка КАК ДокументЗаказ,
	|	уатПотребностьВПеревозке_уэПунктыНазначения.Ссылка.ДетализацияЗаказов КАК ДетализацияЗакрытия,
	|	уатПотребностьВПеревозке_уэДатыДействия.ДатаОтправления,
	|	уатПотребностьВПеревозке_уэДатыДействия.ДатаПрибытия,
	|	уатПотребностьВПеревозке_уэПунктыНазначения.ВидПеревозки,
	|	уатПотребностьВПеревозке_уэПунктыНазначения.НаправлениеПеревозки,
	|	уатПотребностьВПеревозке_уэПунктыНазначения.ВидДоставки,
	|	уатПотребностьВПеревозке_уэДатыДействия.IDДатыДействия
	|ПОМЕСТИТЬ ВТ_ПериодическаяПотребность
	|ИЗ
	|	Документ.уатПотребностьВПеревозке_уэ.ДатыДействия КАК уатПотребностьВПеревозке_уэДатыДействия
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатПотребностьВПеревозке_уэ.ПунктыНазначения КАК уатПотребностьВПеревозке_уэПунктыНазначения
	|		ПО уатПотребностьВПеревозке_уэДатыДействия.ID = уатПотребностьВПеревозке_уэПунктыНазначения.ID
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	|		ПО уатПотребностьВПеревозке_уэДатыДействия.ID = уатЗаказГрузоотправителя.IDСтрокиПотребности
	|			И (НАЧАЛОПЕРИОДА(уатЗаказГрузоотправителя.ОтправлениеС, ДЕНЬ) = &ДатаЗаказа)
	|			И (НЕ уатЗаказГрузоотправителя.ПометкаУдаления)
	|ГДЕ
	|	уатПотребностьВПеревозке_уэПунктыНазначения.Ссылка.Организация = &Организация
	|	И НЕ уатПотребностьВПеревозке_уэПунктыНазначения.Ссылка.ПометкаУдаления
	|	И уатПотребностьВПеревозке_уэПунктыНазначения.Ссылка.ПериодическаяПотребность
	|	И НАЧАЛОПЕРИОДА(уатПотребностьВПеревозке_уэДатыДействия.ДатаОтправления, ДЕНЬ) = &ДатаЗаказа
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВТ_БезПериодичности.ДокументПотребностьНомерСтроки,
	|	ВТ_БезПериодичности.IDСтроки,
	|	"""" КАК IDДатыДействия,
	|	ВТ_БезПериодичности.ДокументПотребность,
	|	ВТ_БезПериодичности.Грузоотправитель,
	|	ВТ_БезПериодичности.Грузополучатель,
	|	ВТ_БезПериодичности.АдресОтправления,
	|	ВТ_БезПериодичности.АдресНазначения,
	|	ВТ_БезПериодичности.КонтактноеЛицоГрузоотправителя,
	|	ВТ_БезПериодичности.КонтактноеЛицоГрузополучателя,
	|	ВТ_БезПериодичности.ОтправлениеС,
	|	ВТ_БезПериодичности.ОтправлениеПо,
	|	ВТ_БезПериодичности.ПрибытиеС,
	|	ВТ_БезПериодичности.ПрибытиеПо,
	|	ВТ_БезПериодичности.ОбъектСтроительства,
	|	ВТ_БезПериодичности.ТребованиеКТС,
	|	ВТ_БезПериодичности.ОписаниеГруза,
	|	ВТ_БезПериодичности.Контрагент,
	|	ВТ_БезПериодичности.ДоговорКонтрагента,
	|	ВТ_БезПериодичности.ДокументЗаказ,
	|	ВТ_БезПериодичности.ДетализацияЗакрытия,
	|	ВТ_БезПериодичности.ДатаОтправления,
	|	ВТ_БезПериодичности.ДатаПрибытия,
	|	ВТ_БезПериодичности.ВидПеревозки,
	|	ВТ_БезПериодичности.НаправлениеПеревозки,
	|	ВТ_БезПериодичности.ВидДоставки,
	|	ВТ_БезПериодичности.ТребованиеКТСТипТС
	|ИЗ
	|	ВТ_БезПериодичности КАК ВТ_БезПериодичности
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВТ_ПериодическаяПотребность.ДокументПотребностьНомерСтроки,
	|	ВТ_ПериодическаяПотребность.IDСтроки,
	|	ВТ_ПериодическаяПотребность.IDДатыДействия,
	|	ВТ_ПериодическаяПотребность.ДокументПотребность,
	|	ВТ_ПериодическаяПотребность.Грузоотправитель,
	|	ВТ_ПериодическаяПотребность.Грузополучатель,
	|	ВТ_ПериодическаяПотребность.АдресОтправления,
	|	ВТ_ПериодическаяПотребность.АдресНазначения,
	|	ВТ_ПериодическаяПотребность.КонтактноеЛицоГрузоотправителя,
	|	ВТ_ПериодическаяПотребность.КонтактноеЛицоГрузополучателя,
	|	ВТ_ПериодическаяПотребность.ОтправлениеС,
	|	ВТ_ПериодическаяПотребность.ОтправлениеПо,
	|	ВТ_ПериодическаяПотребность.ПрибытиеС,
	|	ВТ_ПериодическаяПотребность.ПрибытиеПо,
	|	ВТ_ПериодическаяПотребность.ОбъектСтроительства,
	|	ВТ_ПериодическаяПотребность.ТребованиеКТС,
	|	ВТ_ПериодическаяПотребность.ОписаниеГруза,
	|	ВТ_ПериодическаяПотребность.Контрагент,
	|	ВТ_ПериодическаяПотребность.ДоговорКонтрагента,
	|	ВТ_ПериодическаяПотребность.ДокументЗаказ,
	|	ВТ_ПериодическаяПотребность.ДетализацияЗакрытия,
	|	ВТ_ПериодическаяПотребность.ДатаОтправления,
	|	ВТ_ПериодическаяПотребность.ДатаПрибытия,
	|	ВТ_ПериодическаяПотребность.ВидПеревозки,
	|	ВТ_ПериодическаяПотребность.НаправлениеПеревозки,
	|	ВТ_ПериодическаяПотребность.ВидДоставки,
	|	ВТ_ПериодическаяПотребность.ТребованиеКТСТипТС
	|ИЗ
	|	ВТ_ПериодическаяПотребность КАК ВТ_ПериодическаяПотребность");
	Запрос.УстановитьПараметр("Организация", Организация);
	Запрос.УстановитьПараметр("ДатаЗаказа", НачалоДня(ДатаФормирования));
	Выборка = Запрос.Выполнить().Выбрать();
	
	Сч = 1;
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = Потребности.Добавить();
		НоваяСтрока.НомерСтроки = Сч;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
		Сч = Сч + 1;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицуПланСервер()
	
	Потребности.Очистить();
	
	ХарактеристикиСценария = уатОбщегоНазначения_проф.ЗаполнитьХарактеристикиСценария(Сценарий);
	
	ЕдиницаИзмеренияВеса    = Константы.уатЕдиницаИзмеренияВеса.Получить();
	ЕдиницаИзмеренияВесаКг  = ЕдиницаИзмеренияВеса = Перечисления.уатЕдиницыИзмеренияВеса.Килограмм;
	
	ЕдиницаИзмеренияОбъема  = Константы.уатЕдиницаИзмеренияОбъема.Получить();
	ЕдиницаИзмеренияОбъемаЛ = ЕдиницаИзмеренияОбъема = Перечисления.уатЕдиницыИзмеренияОбъема.Литр;
	
	ИспользоватьКраткосрочноеПланирование   = ХарактеристикиСценария.ИспользоватьКраткосрочноеПланирование;
	ПериодичностьКраткосрочногоПланирования = ХарактеристикиСценария.ПериодичностьКраткосрочногоПланирования;
	Периодичность                           = ХарактеристикиСценария.Периодичность;
	АвтоматическийРежимРаспределения        = ХарактеристикиСценария.РежимЗаполненияВесаОбъемаГруза = 1;
	ПериодичностьФормирования = ?(ИспользоватьКраткосрочноеПланирование, ПериодичностьКраткосрочногоПланирования, Периодичность);

	НачДата = ДатаФормирования;
	КонДата = ДатаФормирования;
	уатОбщегоНазначенияТиповые.уатВыровнятьПериод(НачДата, КонДата, ПериодичностьФормирования);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Сценарий",      Сценарий);
	Запрос.УстановитьПараметр("Организация",   Организация);
	Запрос.УстановитьПараметр("НачДата",       НачДата);
	Запрос.УстановитьПараметр("КонДата",       КонДата);
	Запрос.УстановитьПараметр("ИспользоватьКраткосрочноеПланирование", ИспользоватьКраткосрочноеПланирование);
	Запрос.Текст = "ВЫБРАТЬ
	               |	уатПланРаботыТСОбороты.Регистратор КАК Ссылка,
	               |	уатПланРаботыТСОбороты.Колонна КАК Колонна,
	               |	уатПланРаботыТСОбороты.ДетализацияПланирования КАК ТС,
	               |	уатПланРаботыТСОбороты.ВидПеревозки КАК ВидПеревозки,
	               |	уатПланРаботыТСОбороты.Контрагент КАК ВариантАналитикиКонтрагент,
	               |	уатПланРаботыТСОбороты.Договор КАК ВариантАналитикиДоговор,
	               |	уатПланРаботыТСОбороты.Маршрут КАК ВариантАналитикиМаршрут,
	               |	уатПланРаботыТСОбороты.ОбъектСтроительства КАК ОбъектСтроительства,
	               |	уатПланРаботыТСОбороты.НаправлениеПеревозки КАК НаправлениеПеревозки,
	               |	ВЫБОР
	               |		КОГДА уатПланРаботыТСОбороты.Номенклатура = ЗНАЧЕНИЕ(Справочник.Номенклатура.ПустаяСсылка)
	               |			ТОГДА уатПланРаботыТСОбороты.Сценарий.Номенклатура
	               |		ИНАЧЕ уатПланРаботыТСОбороты.Номенклатура
	               |	КОНЕЦ КАК Номенклатура,
	               |	уатПланРаботыТСОбороты.ПараметрВыработки КАК ПараметрВыработки,
	               |	уатПланРаботыТСОбороты.КоличествоОборот КАК Количество,
	               |	уатПланРаботыТСОбороты.Период КАК Дата
	               |ИЗ
	               |	РегистрНакопления.уатПланРаботыТС.Обороты(
	               |			&НачДата,
	               |			&КонДата,
	               |			Регистратор,
	               |			Сценарий = &Сценарий
	               |				И Организация = &Организация
	               |				И ВЫБОР
	               |					КОГДА Сценарий.ИспользоватьКраткосрочноеПланирование
	               |						ТОГДА Периодичность = Сценарий.ПериодичностьКраткосрочногоПланирования
	               |					ИНАЧЕ ИСТИНА
	               |				КОНЕЦ) КАК уатПланРаботыТСОбороты";
	Выборка = Запрос.Выполнить().Выбрать();
	
	ПланЗаказ = Потребности.Выгрузить();
	ПланЗаказ.Очистить();
	
	Пока Выборка.Следующий() Цикл
		
		НачДата = Выборка.Дата;
		КонДата = Выборка.Дата;
		ПериодичностьФормирования = ?(ИспользоватьКраткосрочноеПланирование, ПериодичностьКраткосрочногоПланирования, Периодичность);
		
		уатОбщегоНазначенияТиповые.уатВыровнятьПериод(НачДата, КонДата, ПериодичностьФормирования);
		Если КонецДня(ДатаФормирования) > КонДата
			ИЛИ НачалоДня(ДатаФормирования) < НачДата Тогда
			Продолжить;
		КонецЕсли;
		
		ХарактеристикиСтроки = Новый Структура("ТС, ОбъектСтроительства, НаправлениеПеревозки, 
		|ВариантАналитикиМаршрут, ВариантАналитикиКонтрагент, ВариантАналитикиДоговор, ВидПеревозки, Колонна");
		ЗаполнитьЗначенияСвойств(ХарактеристикиСтроки, Выборка);
		
		НужнаяСтрока = Потребности.НайтиСтроки(ХарактеристикиСтроки);
		Если НужнаяСтрока.Количество() <> 0 Тогда
			НоваяСтрока = НужнаяСтрока[0];
		Иначе
			НоваяСтрока = Потребности.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
			
			Элементы.ПотребностиТС.Заголовок = ХарактеристикиСценария.ВариантАналитикиТС;
			Если ХарактеристикиСценария.ВариантАналитикиТС = Перечисления.уатВариантыАналитик.МодельТС Тогда
				НоваяСтрока.ТребованиеКТС = Выборка.ТС;
			ИначеЕсли ХарактеристикиСценария.ВариантАналитикиТС = Перечисления.уатВариантыАналитик.ТипТС Тогда
				НоваяСтрока.ТребованиеКТСТипТС  = Выборка.ТС;
			КонецЕсли;
			
			ДокументПланированияПериод = Новый СтандартныйПериод();
			ДокументПланированияПериод.ДатаНачала    = НачДата;
			ДокументПланированияПериод.ДатаОкончания = КонДата;
			
			НоваяСтрока.ДокументПланированияПериод = ДокументПланированияПериод;
			НоваяСтрока.ДокументПланирования       = Выборка.Ссылка;
			
			НоваяСтрока.ДатаОтправления            = ДатаФормирования;
			НоваяСтрока.ДатаПрибытия               = КонецДня(ДатаФормирования);
			
			Если ТипЗнч(Выборка.ВариантАналитикиМаршрут) = Тип("СправочникСсылка.уатМаршруты") Тогда
				Этапы = Выборка.ВариантАналитикиМаршрут.Этапы;
				Для Сч = 0 По Этапы.Количество()-1 Цикл 			
					Если Сч = 0 Тогда 
						НоваяСтрока.АдресОтправления = Этапы[Сч].ПунктОтправления;
					КонецЕсли;
					Если Сч = Этапы.Количество()-1 Тогда 
						Если  Выборка.ВариантАналитикиМаршрут.ПредставлениеМаршрутаОднимПунктом Тогда 
							НоваяСтрока.АдресНазначения = Этапы[Сч].ПунктОтправления;
						Иначе 
							НоваяСтрока.АдресНазначения = Этапы[Сч].ПунктПрибытия;
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			ИначеЕсли ХарактеристикиСценария.ВариантАналитикиМаршрут = Перечисления.уатВариантыАналитик.ПунктНазначения Тогда
				НоваяСтрока.АдресНазначения = Выборка.ВариантАналитикиМаршрут;
			Иначе
				НоваяСтрока.АдресОтправления = Выборка.ВариантАналитикиМаршрут;
			КонецЕсли;
			
			НоваяСтрока.ДоговорКонтрагента = Выборка.ВариантАналитикиДоговор; 

			Если ХарактеристикиСценария.ВариантАналитикиКонтрагент = Перечисления.уатВариантыАналитик.Заказчик Тогда
				НоваяСтрока.Контрагент = Выборка.ВариантАналитикиКонтрагент;
				Если НЕ ЗначениеЗаполнено(НоваяСтрока.ДоговорКонтрагента) Тогда
					
					ДанныеОбменаССервером = Новый Структура("Организация, Контрагент, ДоговорКонтрагента, Дата, Приоритет");
					ЗаполнитьЗначенияСвойств(ДанныеОбменаССервером, НоваяСтрока);
					// Получим данные с сервера
					ДанныеОбменаССервером.Организация = Организация;
					ДанныеОбменаССервером.Дата        = ДатаФормирования;
					ДанныеОбменаССервером.Приоритет   = 0;
					ЗначенияДляЗаполнения             = ИзменениеКонтрагентаСервер(ДанныеОбменаССервером);
					НоваяСтрока.ДоговорКонтрагента    = ЗначенияДляЗаполнения.ДоговорКонтрагента;
				КонецЕсли;
			ИначеЕсли  ХарактеристикиСценария.ВариантАналитикиКонтрагент = Перечисления.уатВариантыАналитик.Грузоотправитель Тогда
				НоваяСтрока.Грузоотправитель = Выборка.ВариантАналитикиКонтрагент;
			Иначе
				НоваяСтрока.Грузополучатель = Выборка.ВариантАналитикиКонтрагент;
			КонецЕсли;
			
			ВремяДоступности = уатОбщегоНазначения_проф.ПолучитьВремяДоступностиПункта(НоваяСтрока.АдресНазначения,
				?(ЗначениеЗаполнено(НоваяСтрока.Грузополучатель), НоваяСтрока.Грузополучатель, Неопределено));
			
			НоваяСтрока.ПрибытиеС  = ВремяДоступности.ВремяДоступностиС;
			НоваяСтрока.ПрибытиеПо = ВремяДоступности.ВремяДоступностиПо;
			
			ВремяДоступности = уатОбщегоНазначения_проф.ПолучитьВремяДоступностиПункта(НоваяСтрока.АдресОтправления,
				?(ЗначениеЗаполнено(НоваяСтрока.Грузоотправитель), НоваяСтрока.Грузоотправитель, Неопределено));
			
			НоваяСтрока.ОтправлениеС  = ВремяДоступности.ВремяДоступностиС;
			НоваяСтрока.ОтправлениеПо = ВремяДоступности.ВремяДоступностиПо;
			
			НоваяСтрока.КоличествоГруза = 1;
		КонецЕсли;
		
		НоваяСтрока.ВесГрузаЕдиницаИзмерения     = ЕдиницаИзмеренияВеса;
		НоваяСтрока.ОбъемГрузаЕдиницаИзмерения   = ЕдиницаИзмеренияОбъема;

		Если Выборка.ПараметрВыработки = Справочники.уатПараметрыВыработки.ВесГруза Тогда
			
			Если АвтоматическийРежимРаспределения Тогда
				
				КоличествоДней = (НачалоДня(КонДата) - НачалоДня(НачДата)) / 60 / 60 / 24;
				НоваяСтрока.ВесГруза       = Выборка.Количество / (КоличествоДней + 1);
				
			Иначе
				НоваяСтрока.ВесГруза       = Выборка.Количество;
			КонецЕсли;
			
			Если ЕдиницаИзмеренияВесаКг Тогда
				НоваяСтрока.ВесГруза = НоваяСтрока.ВесГруза * 1000;
			КонецЕсли;
			
			НоваяСтрока.ВесГрузаПланЕдиницаИзмерения = Выборка.ПараметрВыработки.ЕдиницаИзмерения;
			НоваяСтрока.ВесГрузаПлан                 = Выборка.Количество;
		ИначеЕсли Выборка.ПараметрВыработки = Справочники.уатПараметрыВыработки.Объем Тогда
			
			Если АвтоматическийРежимРаспределения Тогда
				
				КоличествоДней = (НачалоДня(КонДата) - НачалоДня(НачДата)) / 60 / 60 / 24;
				НоваяСтрока.ОбъемГруза       = Выборка.Количество / (КоличествоДней + 1);
				
			Иначе
				НоваяСтрока.ОбъемГруза       =  Выборка.Количество;
			КонецЕсли;
			
			Если ЕдиницаИзмеренияОбъемаЛ Тогда
				НоваяСтрока.ОбъемГруза = НоваяСтрока.ОбъемГруза * 1000;
			КонецЕсли;
			
			НоваяСтрока.ОбъемГрузаПланЕдиницаИзмерения = Выборка.ПараметрВыработки.ЕдиницаИзмерения;
			НоваяСтрока.ОбъемГрузаПлан                 = Выборка.Количество;
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИзменениеКонтрагентаСервер(ДанныеДляЗаполнения)
	
	СтруктураПараметровДляПолученияДоговора =
		уатЗаполнениеДокументов.ПолучитьСтруктуруПараметровДляПолученияДоговораПродажи();
	
	ЗначенияДляЗаполнения = уатОбщегоНазначенияСервер.ПриИзмененииЗначенияКонтрагента(
		ДанныеДляЗаполнения,
		СтруктураПараметровДляПолученияДоговора
	);
	
	Если ДанныеДляЗаполнения.Свойство("Контрагент") И ДанныеДляЗаполнения.Свойство("Приоритет") Тогда 
		Если ТипЗнч(ДанныеДляЗаполнения.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда 
			ЗначенияДляЗаполнения.Вставить("Приоритет", ДанныеДляЗаполнения.Контрагент.Приоритет);
		КонецЕсли;
	КонецЕсли;
	
	Возврат ЗначенияДляЗаполнения;
	
КонецФункции

&НаСервере
Процедура СформироватьЗаказыСервер()
	
	Для Каждого ТекСтрока Из Потребности Цикл
		Если Не ТекСтрока.Пометка Тогда
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекСтрока.ДокументЗаказ) Тогда
			ТекстОшибки = НСтр("en='For Need for the carriage in line №';ru='Для потребности в строке №'") + Строка(ТекСтрока.НомерСтроки) + " " + НСтр("en='order already created.';ru='уже создан заказ.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			Продолжить;
		КонецЕсли;
		
		ЗаказОбъект = Документы.уатЗаказГрузоотправителя.СоздатьДокумент();          
		ЗаказОбъект.Дата = ТекущаяДата();
		ЗаказОбъект.ДетализацияЗакрытия = ТекСтрока.ДетализацияЗакрытия;
		ЗаказОбъект.Организация   = Организация;
		ЗаказОбъект.Подразделение = Справочники.ПодразделенияОрганизаций.ПустаяСсылка();
		Пользователь = ПользователиКлиентСервер.АвторизованныйПользователь();
		ЗаказОбъект.Ответственный = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(Пользователь,
				"ОсновнойОтветственный");
		
		Если ВидОперации = 1 Тогда
			ЗаказОбъект.Комментарий = Нстр("ru = 'Сформирован автоматически обработкой ""Пакетная выписка заказов""'");
			Если ТипЗнч(ТекСтрока.ТС) = Тип("СправочникСсылка.уатТС") Тогда 
				ЗаказОбъект.Комментарий = ЗаказОбъект.Комментарий + " " + СтрШаблон(Нстр("ru = 'для ТС ""%1""'"), ТекСтрока.ТС);
			КонецЕсли;
		КонецЕсли;

		ЗаказОбъект.Заполнить(Неопределено);
		
		ЗаполнитьЗаказПоПодготовке(ЗаказОбъект, ТекСтрока);
		
		ЗаказОбъект.РассчитатьИтоговыеПоказатели();
		ЗаказОбъект.АвтоматическийПересчетДоходовИРасходов();
		
		Если Не ЗаказОбъект.ПроверитьЗаполнение() Тогда
			ТекстОшибки = НСтр("en='Order record';ru='Запись заказа'") + " " + ЗаказОбъект + " " + НСтр("en='cancelled: incorrect filling of document.';ru='отменена: некорректное заполнение документа.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			Продолжить;
		КонецЕсли;
		
		Попытка
			ЗаказОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ТекстОшибки = НСтр("en='While recording order';ru='При записи заказа'") + " " + ЗаказОбъект + " " + НСтр("en='Error occurred:';ru='возникла ошибка:'") + Символы.ПС + ОписаниеОшибки();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			Продолжить;
		КонецПопытки;
		
		ТекСтрока.ДокументЗаказ = ЗаказОбъект.Ссылка;
		ТекСтрока.Пометка = Ложь;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьЗаказПоПодготовке(ЗаказОбъект, ТекСтрока)
	ЗаказОбъект.ДокументОснование   = ТекСтрока.ДокументПотребность;
	ЗаказОбъект.IDСтрокиПотребности = ТекСтрока.IDСтроки;
	ЗаказОбъект.IDДатыДействияПотребности = ТекСтрока.IDДатыДействия;
	
	Если ВидОперации = 0 Тогда
		СтрокаПотребности = ТекСтрока.ДокументПотребность.ПунктыНазначения.Найти(ТекСтрока.IDСтроки, "ID");
		Если СтрокаПотребности = Неопределено Тогда
			Возврат;
		КонецЕсли;
	Иначе
		СтрокаПотребности = Новый Структура("FTL, Маршрут, СтоянкаПунктОтправления, СтоянкаПунктНазначения,
		|ВесБрутто, Объем, КоличествоМест",
		Ложь, ТекСтрока.ВариантАналитикиМаршрут, 0, 0, ТекСтрока.ВесГруза, ТекСтрока.ОбъемГруза, ТекСтрока.КоличествоГруза);
	КонецЕсли;
	
	Если ВидОперации = 0 Тогда
		ЗаказОбъект.Контрагент                     = ТекСтрока.ДокументПотребность.Контрагент;
		ЗаказОбъект.ДоговорКонтрагента             = ТекСтрока.ДокументПотребность.ДоговорКонтрагента;
		ЗаказОбъект.ВалютаТоваров                  = ТекСтрока.ДокументПотребность.ВалютаТоваров;
		ЗаказОбъект.ВалютаДокумента                = ТекСтрока.ДокументПотребность.ВалютаДокумента;
		ЗаказОбъект.КурсВзаиморасчетов             = ТекСтрока.ДокументПотребность.КурсВзаиморасчетов;
		ЗаказОбъект.КратностьВзаиморасчетов        = ТекСтрока.ДокументПотребность.КратностьВзаиморасчетов;
		ЗаказОбъект.СуммаВключаетНДС               = ТекСтрока.ДокументПотребность.СуммаВключаетНДС;
		ЗаказОбъект.УчитыватьНДС                   = ТекСтрока.ДокументПотребность.УчитыватьНДС;
		ЗаказОбъект.СуммаДокумента                 = ТекСтрока.ДокументПотребность.СуммаДокумента;
		ЗаказОбъект.ДетализацияЗакрытия            = ТекСтрока.ДокументПотребность.ДетализацияЗаказов;
	Иначе
		ЗаказОбъект.Контрагент                     = ТекСтрока.Контрагент;
		ЗаказОбъект.ДоговорКонтрагента             = ТекСтрока.ДоговорКонтрагента;
		ЗаказОбъект.ДетализацияЗакрытия            = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам;
	КонецЕсли;
	
	ЗаказОбъект.АдресОтправления               = ТекСтрока.АдресОтправления;
	ЗаказОбъект.АдресНазначения                = ТекСтрока.АдресНазначения;
	ЗаказОбъект.ТребованиеКТС                  = ТекСтрока.ТребованиеКТС;
	ЗаказОбъект.ТребованиеКТСТипТС             = ТекСтрока.ТребованиеКТСТипТС;

	ЗаказОбъект.Грузоотправитель               = ТекСтрока.Грузоотправитель;
	ЗаказОбъект.Грузополучатель                = ТекСтрока.Грузополучатель;
	ЗаказОбъект.КонтактноеЛицоГрузоотправителя = ТекСтрока.КонтактноеЛицоГрузоотправителя;
	ЗаказОбъект.КонтактноеЛицоГрузополучателя  = ТекСтрока.КонтактноеЛицоГрузополучателя;
	ЗаказОбъект.ВидПеревозки                   = ТекСтрока.ВидПеревозки;
	ЗаказОбъект.НаправлениеПеревозки           = ТекСтрока.НаправлениеПеревозки;
	ЗаказОбъект.ВидДоставки                    = ТекСтрока.ВидДоставки;
	ЗаказОбъект.ОбъектСтроительства            = ТекСтрока.ОбъектСтроительства;
	ЗаказОбъект.FTL                            = СтрокаПотребности.FTL;
	ЗаказОбъект.Маршрут                        = СтрокаПотребности.Маршрут;
	ЗаказОбъект.СтоянкаПунктОтправления        = СтрокаПотребности.СтоянкаПунктОтправления;
	ЗаказОбъект.СтоянкаПунктНазначения         = СтрокаПотребности.СтоянкаПунктНазначения;
	
	ЗаказОбъект.ОтправлениеС                   = ТекСтрока.ДатаОтправления + (ТекСтрока.ОтправлениеС - '00010101');
	ЗаказОбъект.ОтправлениеПо                  = ТекСтрока.ДатаОтправления + (ТекСтрока.ОтправлениеПо - '00010101');
	
	// Перенос даты на следующий день
	Если ЗначениеЗаполнено(ТекСтрока.ОтправлениеС) И ЗначениеЗаполнено(ТекСтрока.ОтправлениеПо) И 
		ТекСтрока.ОтправлениеС > ТекСтрока.ОтправлениеПо Тогда
		
		ЗаказОбъект.ОтправлениеПо = ЗаказОбъект.ОтправлениеПо + 86400;
	КонецЕсли;
	
	ЗаказОбъект.ДоставкаС                      = ТекСтрока.ДатаПрибытия + (ТекСтрока.ПрибытиеС - '00010101');
	ЗаказОбъект.ДоставкаПо                     = ТекСтрока.ДатаПрибытия + (ТекСтрока.ПрибытиеПо - '00010101');
	
	// Перенос даты на следующий день
	Если ЗначениеЗаполнено(ТекСтрока.ПрибытиеС) И ЗначениеЗаполнено(ТекСтрока.ПрибытиеПо) И 
		ТекСтрока.ПрибытиеС > ТекСтрока.ПрибытиеПо Тогда
		
		ЗаказОбъект.ДоставкаПо = ЗаказОбъект.ДоставкаПо + 86400;
	КонецЕсли;
	
	ЗаказОбъект.ВесБрутто                      = СтрокаПотребности.ВесБрутто;
	ЗаказОбъект.Объем                          = СтрокаПотребности.Объем;
	ЗаказОбъект.КоличествоМест                 = СтрокаПотребности.КоличествоМест;
	
	Если ВидОперации = 0 Тогда
		ЗаказОбъект.Расстояние                     = СтрокаПотребности.Расстояние;
		ЗаказОбъект.ПробегСГрузом                  = СтрокаПотребности.ПробегСГрузом;
		ЗаказОбъект.Время                          = СтрокаПотребности.Время;
		ЗаказОбъект.Стоянка                        = СтрокаПотребности.Стоянка;
		ЗаказОбъект.СтоимостьГруза                 = СтрокаПотребности.СтоимостьГруза;
		ЗаказОбъект.НазваниеГруза                  = ТекСтрока.ОписаниеГруза;
		
		СоответствиеГрузов = Новый Соответствие;
		СоответствиеПунктов = Новый Соответствие;
		
		Для Каждого ТекСтрокаГрузМесто Из ТекСтрока.ДокументПотребность.ГрузовойСостав Цикл
			Если ТекСтрокаГрузМесто.ID = ТекСтрока.IDСтроки Тогда
				НоваяСтрока = ЗаказОбъект.ГрузовойСостав.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаГрузМесто);
				Если ЗаказОбъект.FTL 
					И (ЗаказОбъект.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам
					Или ЗаказОбъект.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам) Тогда
					СоответствиеГрузов.Вставить(ТекСтрокаГрузМесто.НомерСтроки, НоваяСтрока.НомерСтроки);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ТекСтрокаТовар Из ТекСтрока.ДокументПотребность.ТоварныйСостав Цикл
			Если ТекСтрокаТовар.ID = ТекСтрока.IDСтроки Тогда
				НоваяСтрока = ЗаказОбъект.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаТовар);
				Если ЗаказОбъект.FTL 
					И ЗаказОбъект.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам Тогда
					СоответствиеГрузов.Вставить(ТекСтрокаТовар.НомерСтроки, НоваяСтрока.НомерСтроки);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ТекСтрокаУслуга Из ТекСтрока.ДокументПотребность.Услуги Цикл
			Если ТекСтрокаУслуга.ID = ТекСтрока.IDСтроки Тогда
				НоваяСтрока = ЗаказОбъект.Услуги.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаУслуга);
				НоваяСтрока.Содержание = НоваяСтрока.Номенклатура;
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ТекСтрокаЗатрата Из ТекСтрока.ДокументПотребность.Расходы Цикл
			Если ТекСтрокаЗатрата.ID = ТекСтрока.IDСтроки Тогда
				НоваяСтрока = ЗаказОбъект.Расходы.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаЗатрата);
				НоваяСтрока.Содержание = НоваяСтрока.Номенклатура;
			КонецЕсли;
		КонецЦикла;
		
		КолДнейДобавить = Неопределено;
		Для Каждого ТекСтрокаПП Из ТекСтрока.ДокументПотребность.ПромежуточныеПункты Цикл
			Если ТекСтрокаПП.ID = ТекСтрока.IDСтроки Тогда
				НоваяСтрока = ЗаказОбъект.ПромежуточныеПункты.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаПП);
				Если КолДнейДобавить = Неопределено Тогда
					// Все даты и временные окна в таблице промежуточных пунктов сдвигаются на это количество дней
					РазницаВДнях    = (НачалоДня(ТекСтрока.ДатаОтправления) - НачалоДня(НоваяСтрока.ПрибытиеПлан)) / (60 * 60 * 24);
					КолДнейДобавить = РазницаВДнях*24*60*60;
				КонецЕсли;
				НоваяСтрока.ПрибытиеПлан = НоваяСтрока.ПрибытиеПлан + КолДнейДобавить;
				НоваяСтрока.УбытиеПлан   = НоваяСтрока.УбытиеПлан   + КолДнейДобавить;
				НоваяСтрока.ОкноС        = НоваяСтрока.ОкноС        + КолДнейДобавить;
				НоваяСтрока.ОкноПо       = НоваяСтрока.ОкноПо       + КолДнейДобавить;
				
				Если ЗаказОбъект.FTL Тогда
					СоответствиеПунктов.Вставить(ТекСтрокаПП.НомерСтроки, НоваяСтрока.НомерСтроки);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	Иначе
		СтруктураОбъектовНастроек = Новый Структура;
		СтруктураОбъектовНастроек.Вставить("Организация", ЗаказОбъект.Организация);
		СтруктураОбъектовНастроек.Вставить("Подразделение", ЗаказОбъект.Подразделение);
		СтруктураОбъектовНастроек.Вставить("Пользователь", ПользователиКлиентСервер.АвторизованныйПользователь());

		ЗаказОбъект.ВидПеревозки = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, ПланыВидовХарактеристик.уатПраваИНастройки.ОсновнойВидПеревозок);
		ЗаказОбъект.ВидДоставки  = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, ПланыВидовХарактеристик.уатПраваИНастройки.ОсновнойВидДоставки);

		Если ЗначениеЗаполнено(ТекСтрока.Номенклатура) Тогда
			НоваяСтрока            = ЗаказОбъект.Товары.Добавить();
			НоваяСтрока.Количество = ТекСтрока.КоличествоГруза;
			НоваяСтрока.ВесБрутто  = ТекСтрока.ВесГруза;
			НоваяСтрока.Объем      = ТекСтрока.ОбъемГруза;
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			
			НоваяСтрока.ЕдиницаИзмерения = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(
				НоваяСтрока.Номенклатура,
				"ЕдиницаХраненияОстатков"
				);

		КонецЕсли;
		
	КонецЕсли;

	Если ЗаказОбъект.FTL Тогда
		Для Каждого ТекСтрокаОтрезокПути Из ТекСтрока.ДокументПотребность.ОтрезкиПути Цикл
			Если ТекСтрокаОтрезокПути.ID = ТекСтрока.IDСтроки Тогда
				НоваяСтрока = ЗаказОбъект.ОтрезкиПути.Добавить();
				НоваяСтрока.ПунктОтправления = СоответствиеПунктов.Получить(ТекСтрокаОтрезокПути.ПунктОтправления);
				НоваяСтрока.ПунктНазначения = СоответствиеПунктов.Получить(ТекСтрокаОтрезокПути.ПунктНазначения);
				НоваяСтрока.Груз = СоответствиеГрузов.Получить(ТекСтрокаОтрезокПути.Груз);
			КонецЕсли;
		КонецЦикла;
		
		// Обновление id отрезков пути
		Для Каждого ТекСтрокаОтрезокПути Из ЗаказОбъект.ОтрезкиПути Цикл
			Если ТекСтрокаОтрезокПути.id <> "" Тогда 
				Продолжить;
			КонецЕсли;
			ТекСтрокаОтрезокПути.id = Строка(Новый УникальныйИдентификатор);
			Для Сч = ТекСтрокаОтрезокПути.НомерСтроки По ЗаказОбъект.ОтрезкиПути.Количество()-1 Цикл
				Если ТекСтрокаОтрезокПути.ПунктНазначения = ЗаказОбъект.ОтрезкиПути[Сч].ПунктНазначения
					И ТекСтрокаОтрезокПути.ПунктОтправления = ЗаказОбъект.ОтрезкиПути[Сч].ПунктОтправления Тогда
					ЗаказОбъект.ОтрезкиПути[Сч].id = ТекСтрокаОтрезокПути.id;
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОтветаЗаполнить(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.ОК Тогда
		Если ВидОперации = 0 Тогда
			ЗаполнитьТаблицуСервер();
		Иначе
			ЗаполнитьТаблицуПланСервер();
		КонецЕсли;

	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОтветаСформировать(Результат, Параметры) Экспорт
	Если Результат = КодВозвратаДиалога.ОК Тогда
		СформироватьЗаказыСервер();
    КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ГрузоотправительПриИзмененииСервер(СтруктураСтроки, АдресИзменен=Ложь)
	Если ЗначениеЗаполнено(СтруктураСтроки.Грузоотправитель) Тогда
		Если СтруктураСтроки.ВидДоставки = ПредопределенноеЗначение("Перечисление.уатВидыДоставки_уэ.СкладДверь")
			ИЛИ СтруктураСтроки.ВидДоставки = ПредопределенноеЗначение("Перечисление.уатВидыДоставки_уэ.СкладСклад")
			ИЛИ ТипЗнч(СтруктураСтроки.Грузоотправитель) = Тип("СправочникСсылка.Склады") Тогда
			АдресОтправления = уатОбщегоНазначения_уэ.АдресСклада(СтруктураСтроки.Грузоотправитель);
		Иначе
			АдресОтправления = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(СтруктураСтроки.Грузоотправитель, Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
			Если Не ЗначениеЗаполнено(АдресОтправления) Тогда
				АдресОтправления = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(СтруктураСтроки.Грузоотправитель, Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(АдресОтправления) И СтруктураСтроки.АдресОтправления <> АдресОтправления Тогда
			СтруктураСтроки.АдресОтправления = АдресОтправления;
			АдресИзменен = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитСправочника("ОсновноеКонтактноеЛицо", СтруктураСтроки.Грузоотправитель) Тогда
		СтруктураСтроки.КонтактноеЛицоГрузоотправителя = СтруктураСтроки.Грузоотправитель.ОсновноеКонтактноеЛицо;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ГрузополучательПриИзмененииСервер(СтруктураСтроки, АдресИзменен=Ложь)
	Если ЗначениеЗаполнено(СтруктураСтроки.Грузополучатель) Тогда 
		Если СтруктураСтроки.ВидДоставки = Перечисления.уатВидыДоставки_уэ.ДверьСклад
			ИЛИ СтруктураСтроки.ВидДоставки = Перечисления.уатВидыДоставки_уэ.СкладСклад
			ИЛИ ТипЗнч(СтруктураСтроки.Грузополучатель) = Тип("СправочникСсылка.Склады") Тогда
			АдресНазначения = уатОбщегоНазначения_уэ.АдресСклада(СтруктураСтроки.Грузополучатель);
		Иначе
			АдресНазначения = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(СтруктураСтроки.Грузополучатель,
				Справочники.ВидыКонтактнойИнформации.ФактАдресКонтрагента);
			Если Не ЗначениеЗаполнено(АдресНазначения) Тогда
				АдресНазначения = УправлениеКонтактнойИнформацией.КонтактнаяИнформацияОбъекта(СтруктураСтроки.Грузополучатель,
					Справочники.ВидыКонтактнойИнформации.ЮрАдресКонтрагента);
			КонецЕсли;
		КонецЕсли;
		Если ЗначениеЗаполнено(АдресНазначения) И Не СтруктураСтроки.АдресНазначения = АдресНазначения Тогда 
			СтруктураСтроки.АдресНазначения = АдресНазначения;
			АдресИзменен = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитСправочника("ОсновноеКонтактноеЛицо", СтруктураСтроки.Грузополучатель) Тогда
		СтруктураСтроки.КонтактноеЛицоГрузополучателя = СтруктураСтроки.Грузополучатель.ОсновноеКонтактноеЛицо;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеПоПотребностьВПеревозке(Команда)
	Если Элементы.ФормаОперацияЗаполнениеПоПотребностьВПеревозке.Пометка Тогда 
		Возврат;
	КонецЕсли;
	
	ВидОперации = 0;
	ВидОперацииПриИзменении();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнениеПоПланированиюРаботыТС(Команда)
	Если Элементы.ФормаОперацияЗаполнениеПоПланированиюРаботыТС.Пометка Тогда 
		Возврат;
	КонецЕсли;
	
	ВидОперации = 1;
	ВидОперацииПриИзменении();

КонецПроцедуры

&НаКлиенте
Процедура ВидОперацииПриИзменении()
	
	Если ВидОперации = 0 Тогда
		Элементы.ФормаОперацияЗаполнениеПоПотребностьВПеревозке.Пометка   = Истина;
		Элементы.ФормаОперацияЗаполнениеПоПланированиюРаботыТС.Пометка    = Ложь;
		
		Элементы.ПотребностиНомерСтроки.Видимость = Истина;
		Элементы.ПотребностиТС.Видимость          = Ложь;

		Элементы.ЗаказыГруппаДокПотребность.Видимость     = Истина;
		Элементы.ПотребностиГруппаПланнирование.Видимость = Ложь;
		Элементы.Сценарий.Видимость                       = Ложь;
		Элементы.ЗаказыОписаниеГруза.Видимость            = Истина;
	Иначе
		Элементы.ФормаОперацияЗаполнениеПоПотребностьВПеревозке.Пометка   = Ложь;
		Элементы.ФормаОперацияЗаполнениеПоПланированиюРаботыТС.Пометка    = Истина;
		
		Элементы.Сценарий.Видимость               = Истина;
		Элементы.ПотребностиНомерСтроки.Видимость = Ложь;
		Элементы.ПотребностиТС.Видимость          = Истина;
		Элементы.ЗаказыОписаниеГруза.Видимость    = Ложь;
		
		Элементы.ЗаказыГруппаДокПотребность.Видимость          = Ложь;
		Элементы.ПотребностиГруппаПланнирование.Видимость      = Истина;
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

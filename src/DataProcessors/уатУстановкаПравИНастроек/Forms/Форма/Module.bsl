
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	// начало блока стандартных операций
	ДопПараметрыОткрытие = Новый Структура("ИмяФормы", ИмяФормы);
	уатЗащищенныеФункцииСервер.уатОбработкаФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	// конец блока стандартных операций
	
	// уровень доступа
	Если РольДоступна("уатНастройкаУАТ") тогда
		ДостПрава     = Истина;
		ДостНастройки = Истина;
	Иначе
		ДостПрава = уатПраваИНастройки.уатПраво("РазрешитьИзменениеПравДоступа");
		ДостНастройки = уатПраваИНастройки.уатПраво("РазрешитьИзменениеЛичныхНастроек");
		Если НЕ (ДостПрава ИЛИ ДостНастройки) Тогда
			ТекстНСТР = НСтр("en='No rights to edit rights and settings !';ru='Нет прав на редактирование прав и настроек !'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР,,,, Отказ);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	мДлинаПрефиксаПрава = СтрДлина(НСтр("en='Access right';ru='Право доступа'") + " ")+1;
	ТекущийПользователь = ПользователиКлиентСервер.АвторизованныйПользователь();
	
	// Создадим структуру описаний (такого типа реквизитов нет, используем произвольный)
	СтруктураОписаний = Новый Структура();
	
	уатОбщегоНазначенияСервер.НастроитьПолеПодразделение(Элементы.ОбъектНастройкиПрав,,
		Метаданные.Обработки.уатУстановкаПравИНастроек.Реквизиты.ОбъектНастройкиПрав.Тип);
КонецПроцедуры

&НаКлиенте
Процедура ПриПовторномОткрытии()
	// Сохраняем внесенные изменения
	ЗапросСохраненияИзменений(Новый ОписаниеОповещения("ПриПовторномОткрытииЗавершение", ЭтотОбъект)); 
КонецПроцедуры

&НаКлиенте
Процедура ПриПовторномОткрытииЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Если Результат = Ложь Тогда
        Возврат;
    КонецЕсли;
    
    // повторим все действия как при открытии
    Отказ_ = Ложь;
    ПриОткрытии(Отказ_);

КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// начало блока стандартных операций
	уатЗащищенныеФункцииКлиент.уатОбработкаФормаПриОткрытии(Отказ, ДопПараметрыОткрытие);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	// конец блока стандартных операций
	
	// сначала заполним все таблицы данных для дальнейшей обработки
	ТекстНСТР = НСтр("en='Getting tree of rights and settings ...';ru='Получение дерева прав и настроек ...'");
	Состояние(ТекстНСТР);
	ПолучитьИерархиюПрав();
	ТекстНСТР = НСтр("en='Receiving of structure of description of rights and settings ...';ru='Получение структуры описания прав и настроек ...'");
	Состояние(ТекстНСТР);
	ПолучитьСтруктуруОписаний();
	ТекстНСТР = НСтр("en='Additional rights of access to catalogs and documents ...';ru='Получение дополнительных прав доступа справочников и документов ...'");
	Состояние(ТекстНСТР);
	ПолучитьДоступностьСправочников();
	ПолучитьДоступностьДокументов();

	//// Установка объекта по начальному объекту выбора
	//Если НачальноеЗначениеВыбора <> Неопределено Тогда
	//	ОбъектНастройкиПрав = НачальноеЗначениеВыбора;
	//КонецЕсли;
	
	// Установка типа в случае передачи объекта
	Если ТипЗнч(ОбъектНастройкиПрав) = Тип("СправочникСсылка.Организации") Тогда
		ТипОбъектаНастройки = ПредопределенноеЗначение("Перечисление.уатНазначениеПравИНастроек.Организация");
	ИначеЕсли ТипЗнч(ОбъектНастройкиПрав) = Тип("СправочникСсылка.Пользователи") Или ТипЗнч(ОбъектНастройкиПрав) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда
		ТипОбъектаНастройки = ПредопределенноеЗначение("Перечисление.уатНазначениеПравИНастроек.Пользователь");
	Иначе
		ТипОбъектаНастройки = ПредопределенноеЗначение("Перечисление.уатНазначениеПравИНастроек.Пользователь");
		ОбъектНастройкиПрав = ТекущийПользователь;	// по умолчанию выведем себя.
	КонецЕсли;
	
	// Установка доступности в соответствии с правами доступа
	ОтображатьНастройки = ДостНастройки;
	Если НЕ ДостПрава Тогда
		ОтображатьПрава = Ложь;
		ТипОбъектаНастройки = ПредопределенноеЗначение("Перечисление.уатНазначениеПравИНастроек.Пользователь");
		ОбъектНастройкиПрав = ТекущийПользователь;
		Элементы.ОтображатьПрава.Доступность = Ложь;
		Элементы.ОтображатьНастройки.Доступность = Ложь;
		Элементы.ТипОбъектаНастройки.Доступность = Ложь;
		Элементы.ФормаУстановитьПраваПоУмолчанию.Доступность = Ложь;
		Элементы.ФормаСкопироватьПрофиль.Доступность = Ложь;
	КонецЕсли; 
	
	ВосстановитьНастройки();
	// Формирование дерева прав для заданного объекта
	ТипОбъектаНастройкиПриИзменении(Неопределено);	// Перенесено
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда 
		Возврат;
	КонецЕсли;
	
	ЗапросСохраненияИзменений(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ВыполненоКопированиеПравИНастроек" Тогда
		ФормированиеДереваПравОбъекта();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти



#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ТипОбъектаНастройкиПриИзменении(Элемент)
	// Произведем типизацию и определим доступность объекта
	ДоступностьОбъекта = Истина;
	Если ТипОбъектаНастройки = ПредопределенноеЗначение("Перечисление.уатНазначениеПравИНастроек.Компания") Тогда
		ДоступностьОбъекта = Ложь;
		Пустышка = Неопределено;
		
	ИначеЕсли ТипОбъектаНастройки = ПредопределенноеЗначение("Перечисление.уатНазначениеПравИНастроек.Организация") Тогда
		ОрганизацияПоУмолчанию = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ТекущийПользователь, "ОсновнаяОрганизация");
		Если ЗначениеЗаполнено(ОрганизацияПоУмолчанию) Тогда
			Пустышка = ОрганизацияПоУмолчанию;
		Иначе
			Пустышка = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");
		КонецЕсли;
		
	ИначеЕсли ТипОбъектаНастройки = ПредопределенноеЗначение("Перечисление.уатНазначениеПравИНастроек.Подразделение") Тогда
		ПодразделениеПоУмолчанию = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ТекущийПользователь, "ОсновноеПодразделениеОрганизации");
		Если ЗначениеЗаполнено(ПодразделениеПоУмолчанию) Тогда
			Пустышка = ПодразделениеПоУмолчанию;
		Иначе
			Пустышка = ПредопределенноеЗначение("Справочник.ПодразделенияОрганизаций.ПустаяСсылка");
		КонецЕсли;
		
	ИначеЕсли ТипОбъектаНастройки = ПредопределенноеЗначение("Перечисление.уатНазначениеПравИНастроек.Пользователь") Тогда
		Если ЗначениеЗаполнено(ТекущийПользователь) Тогда
			Пустышка = ТекущийПользователь;
		Иначе
			Пустышка = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
		КонецЕсли;
		
	Иначе
		ТипОбъектаНастройки = ПредопределенноеЗначение("Перечисление.уатНазначениеПравИНастроек.Пользователь");
		Пустышка = ПредопределенноеЗначение("Справочник.Пользователи.ПустаяСсылка");
		
	КонецЕсли;
	
	Элементы.ОбъектНастройкиПрав.Доступность = ДоступностьОбъекта;
	
	// Если тип значения поменялся, произведем типизацию присвоением пустышки
	Если ТипЗнч(Пустышка) <> ТипЗнч(ОбъектНастройкиПрав) Тогда
		ОбъектНастройкиПрав = Пустышка;
	КонецЕсли;
	
	// Формирование дерева прав для заданного объекта
	ОбъектНастройкиПравПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ОбъектНастройкиПравПриИзменении(Элемент)
	ПраваИНастройки = Неопределено;
	Если Элементы.ДеревоПрав.ТекущиеДанные <> Неопределено Тогда
		ПраваИНастройки = Элементы.ДеревоПрав.ТекущиеДанные.ПравоНастройка;
	КонецЕсли;
	ФормированиеДереваПравОбъекта();
	
	НайденнаяСтрокаЗначение = НайтиОтмеченноеЗначениеВДеревеЗначений(ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ВестиСкладскойУчетУАТ"));
	Если НайденнаяСтрокаЗначение <> Неопределено Тогда
		мВестиСкладскойУчетУАТ = НайденнаяСтрокаЗначение;
	Иначе
		мВестиСкладскойУчетУАТ = Ложь;
	КонецЕсли;
	
	ИспользуетсяШаблон = Ложь;
	
	// доступность кнопки "Права по умолчанию"
	Элементы.ДеревоПравКонтекстноеМенюУстановитьТекущееПравоПоУмолчанию.Доступность =
		(ЗначениеЗаполнено(ОбъектНастройкиПрав) И ТипОбъектаНастройки = ПредопределенноеЗначение("Перечисление.уатНазначениеПравИНастроек.Пользователь"));
	
	// доступность кнопки "СкопироватьПрофиль"
	Элементы.ФормаСкопироватьПрофиль.Доступность = ЗначениеЗаполнено(ОбъектНастройкиПрав);
	
	// Для пользователей, у которых установлен шаблон прав - ничего не редактируем
	Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(ОбъектНастройкиПрав) И НЕ ТипОбъектаНастройки = ПредопределенноеЗначение("Перечисление.уатНазначениеПравИНастроек.Компания") Тогда
		Элементы.ДеревоПрав.ТолькоПросмотр = Истина;
	Иначе
		Если ТипЗнч(ОбъектНастройкиПрав) = Тип("СправочникСсылка.Пользователи") Или ТипЗнч(ОбъектНастройкиПрав) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда
			Элементы.ДеревоПрав.ТолькоПросмотр = Ложь;
		Иначе
			Элементы.ДеревоПрав.ТолькоПросмотр = Ложь;
		КонецЕсли;
	КонецЕсли; 
	
	// Обработка текущей страницы при несовпадении ее с основной 
	Если ПраваИНастройки = Неопределено Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаДеревоПравИНастроек;
	Иначе
		//ТекущаяСтрока = ДеревоПрав.Строки.Найти(ПраваИНастройки, "ПравоНастройка", Истина);
		ТекущаяСтрока = ПолучитьСтрокуДереваПравПоНастройке(ПраваИНастройки);
		Если ТекущаяСтрока <> Неопределено Тогда
			Элементы.ДеревоПрав.ТекущаяСтрока = ТекущаяСтрока;
		КонецЕсли;
	КонецЕсли;
	Если Элементы.НастройкаДополнительныхПравСправочниковИДокументов.Видимость Тогда
		Если ВидОбъектаНастройкиПрав = "Справочники" Тогда
			ЗаполнитьТаблицуДоступностейОбъектов(ТекущаяСтрока);
		ИначеЕсли ВидОбъектаНастройкиПрав = "Документы" Тогда
			ЗаполнитьТаблицуДоступностейОбъектов(ТекущаяСтрока);
		Иначе
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаДеревоПравИНастроек;
		КонецЕсли;
	Иначе
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаДеревоПравИНастроек;
	КонецЕсли;
	
	// заголовок формы
	Если Элементы.ДеревоПрав.ТолькоПросмотр Тогда
		Заголовок = НСтр("en='Set rights and settings (read-only)';ru='Установка прав и настроек (только чтение)'");
	Иначе
		Заголовок = НСтр("en='Installation of rights and settings';ru='Установка прав и настроек'");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьПраваПриИзменении(Элемент)
	СохранитьНастройки();
	// При изменении фильтра прав надо произвести запись внесенных изменений
	ЗапросСохраненияИзменений(Новый ОписаниеОповещения("ОтображатьПраваПриИзмененииЗавершение", ЭтотОбъект));
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьПраваПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Если Результат = Ложь Тогда
        ОтображатьПрава = НЕ ОтображатьПрава;
        Возврат;
    КонецЕсли;
    
    ОбъектНастройкиПравПриИзменении(Неопределено);

КонецПроцедуры

&НаКлиенте
Процедура ОтображатьНастройкиПриИзменении(Элемент)
	СохранитьНастройки();
	// При изменении фильтра прав надо произвести запись внесенных изменений
	ЗапросСохраненияИзменений(Новый ОписаниеОповещения("ОтображатьНастройкиПриИзмененииЗавершение", ЭтотОбъект));
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьНастройкиПриИзмененииЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Если Результат = Ложь Тогда
        ОтображатьПрава = НЕ ОтображатьПрава;
        Возврат;
    КонецЕсли;
    
    ОбъектНастройкиПравПриИзменении(Неопределено);

КонецПроцедуры

&НаКлиенте
Процедура ОсновнойВидЗаправкиВыборЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекСтрокаДерева = ДополнительныеПараметры.ТекСтрокаДерева;
	ТекСтрокаДерева.Значение = ВыбранныйЭлемент.Значение;
	ТекСтрокаДерева.Изменено = Истина;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОсновнойВидПЛВыборЗавершение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекСтрокаДерева = ДополнительныеПараметры.ТекСтрокаДерева;
	ТекСтрокаДерева.Значение = ВыбранныйЭлемент.Значение;
	ТекСтрокаДерева.Изменено = Истина;
	
	Модифицированность = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаСтраницыПриСменеСтраницы(Элемент, ТекущаяСтраница)
	ТекСтрокаДерева = ДеревоПрав.НайтиПоИдентификатору(Элементы.ДеревоПрав.ТекущаяСтрока);
	
	Попытка
		Если ТекущаяСтраница = Элементы.НастройкаДополнительныхПравСправочниковИДокументов Тогда 
			ВидОбъекта = Сред(ТекСтрокаДерева.ПравоНастройка, мДлинаПрефиксаПрава);
			Если ТекСтрокаДерева.Значение = ПредопределенноеЗначение("Перечисление.уатВидыПравДляСправочников.РедактированиеПоГруппам") Тогда
				ВидОбъектаНастройкиПрав = "Справочники";
				Элементы.ПраваДоступаПодборПоГруппам.Доступность = Истина;
				Элементы.ТаблицаДоступностиОбъектовОбъект.Заголовок = НСтр("en='Group catalog:';ru='Группы справочника:'") + " " + ПредставлениеВидаСправочника(ВидОбъекта);
				ЗаполнитьТаблицуДоступностейОбъектов(ТекСтрокаДерева);
				
			ИначеЕсли ТекСтрокаДерева.Значение = ПредопределенноеЗначение("Перечисление.уатВидыПравДляДокументов.РедактированиеПоПользователям") Тогда 
				ВидОбъектаНастройкиПрав = "Документы";
				Элементы.ПраваДоступаПодборПоГруппам.Доступность = Ложь;
				Элементы.ТаблицаДоступностиОбъектовОбъект.Заголовок = НСтр("en='Document type authors:';ru='Авторы документов вида:'") + " " + ПредставлениеВидаДокумента(ВидОбъекта);
				ЗаполнитьТаблицуДоступностейОбъектов(ТекСтрокаДерева);
				
			КонецЕсли;
			ДоступностьНастроекИПараметров(Ложь);
			
		Иначе
			Если ВидОбъектаНастройкиПрав = "Справочники" Тогда
				ПереписатьТабДоступностиСправочников();
				
			ИначеЕсли ВидОбъектаНастройкиПрав = "Документы" Тогда
				ПереписатьТабДоступностиДокументов();
				
			КонецЕсли;
			ВидОбъектаНастройкиПрав = "Обычный";
			ДоступностьНастроекИПараметров(Истина);
			
		КонецЕсли;
	Исключение
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ОбъектНастройкиПравНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ИспользоватьВнешнихПользователей() 
			И ТипОбъектаНастройки = ПредопределенноеЗначение("Перечисление.уатНазначениеПравИНастроек.Пользователь") Тогда 
		СтандартнаяОбработка = Ложь;
		СписокВыбора = Новый СписокЗначений();
		СписокВыбора.Добавить("Пользователи", НСтр("en='Users';ru='Пользователи'"));
		СписокВыбора.Добавить("ВнешниеПользователи", НСтр("en='External users';ru='Внешние пользователи'"));
		Оповещение = Новый ОписаниеОповещения("ОбъектНастройкиПравНачалоВыбораПослеВыбораТипа", ЭтотОбъект, ДанныеВыбора);
		ПоказатьВыборИзМеню(Оповещение, СписокВыбора, Элементы.ОбъектНастройкиПрав);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектНастройкиПравНачалоВыбораПослеВыбораТипа(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("РежимВыбора", Истина);
	Если ВыбранныйЭлемент.Значение = "ВнешниеПользователи" Тогда 
		ОткрытьФорму("Справочник.ВнешниеПользователи.ФормаВыбора", ПараметрыФормы, Элементы.ОбъектНастройкиПрав);
	Иначе 
		ОткрытьФорму("Справочник.Пользователи.ФормаВыбора", ПараметрыФормы, Элементы.ОбъектНастройкиПрав);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбъектНастройкиПравАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если ИспользоватьВнешнихПользователей() 
			И ТипОбъектаНастройки = ПредопределенноеЗначение("Перечисление.уатНазначениеПравИНастроек.Пользователь") Тогда 
		СтандартнаяОбработка = Ложь;
		ПолучитьСписокПользователейИВнешнихПользователей(Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыДеревоПрав

&НаКлиенте
Процедура ДеревоПравЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	ТекСтрокаДерева = Элементы.ДеревоПрав.ТекущиеДанные;
	СтароеЗначениеПравНастроек = ТекСтрокаДерева.Значение;
	
	//Если ТекСтрокаДерева.ПравоНастройка.Ссылка = ПланыВидовХарактеристик.уатПраваИНастройки.ФорматВыводаКоличества
	//ИЛИ ТекСтрокаДерева.ПравоНастройка.Ссылка = ПланыВидовХарактеристик.уатПраваИНастройки.ФорматВыводаСуммы Тогда
	//	КонструкторФорматнойСтроки = Новый КонструкторФорматнойСтроки(Элемент.Значение);
	//	КонструкторФорматнойСтроки.ОткрытьМодально();
	//	Если Элемент.Значение <> КонструкторФорматнойСтроки.Текст Тогда
	//		Элемент.Значение			= КонструкторФорматнойСтроки.Текст;
	//		ТекСтрокаДерева.Изменено	= Истина;
	//		ЭтотОбъект.Модифицированность	= Истина;
	//	КонецЕсли;
	//КонецЕсли;
	
	// Проверка является ли строка дерева прав типом перечисления ВидыПравДляСправочников
	// и если справочник иерархический то отменяем стандартную обработку и создаем список значений для выбора
	Если ТипЗнч(ТекСтрокаДерева.Значение) = Тип("ПеречислениеСсылка.уатВидыПравДляСправочников") Тогда
		Если СправочникНеиерархическийИЛИсИерархиейЭлементов(Сред(ТекСтрокаДерева.ПравоНастройка, мДлинаПрефиксаПрава)) Тогда
			СтандартнаяОбработка = Ложь;
			
			спДоступностиДляНеиерархии = Новый СписокЗначений;
			спДоступностиДляНеиерархии.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыПравДляСправочников.Редактирование"), НСтр("en='Edit';ru='Редактирование'"));
			спДоступностиДляНеиерархии.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыПравДляСправочников.Чтение")        , НСтр("en='Read';ru='Чтение'"));
			спДоступностиДляНеиерархии.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыПравДляСправочников.НетДоступа")    , НСтр("en='No access';ru='Нет доступа'"));
			ВыбранныйЭлемент = Неопределено;

			ПоказатьВыборИзСписка(Новый ОписаниеОповещения("ДеревоПравЗначениеНачалоВыбораЗавершение", ЭтотОбъект, Новый Структура("ТекСтрокаДерева", ТекСтрокаДерева)), спДоступностиДляНеиерархии, Элемент);
		КонецЕсли;
		
	ИначеЕсли ТекСтрокаДерева.ПравоНастройка = ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ОсновнойВидЗаправки") Тогда
		СтандартнаяОбработка = Ложь;
		
		спСписокВидовЗаправок = уатОбщегоНазначения.СписокВидовЗаправок();
		ПоказатьВыборИзСписка(Новый ОписаниеОповещения("ОсновнойВидЗаправкиВыборЗавершение", ЭтотОбъект, Новый Структура("ТекСтрокаДерева", ТекСтрокаДерева)), спСписокВидовЗаправок, Элемент);
		
	ИначеЕсли ТекСтрокаДерева.ПравоНастройка = ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ОсновнойВидПЛ") Тогда
		СтандартнаяОбработка = Ложь;
		
		спСписокВидовПЛ = уатПутевыеЛисты.уатВидыПЛ();
		ПоказатьВыборИзСписка(Новый ОписаниеОповещения("ОсновнойВидПЛВыборЗавершение", ЭтотОбъект, Новый Структура("ТекСтрокаДерева", ТекСтрокаДерева)), спСписокВидовПЛ, Элемент);
		
	ИначеЕсли ТекСтрокаДерева.ПравоНастройка = ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ОсновнаяАЗС") Тогда
		НайденнаяСтрокаЗначение = НайтиОтмеченноеЗначениеВДеревеЗначений(ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ОсновнойВидЗаправки"));
		Если НайденнаяСтрокаЗначение <> Неопределено И ЗначениеЗаполнено(НайденнаяСтрокаЗначение) Тогда
			ОсновнойВидЗаправки = НайденнаяСтрокаЗначение;
		Иначе
			Возврат;
		КонецЕсли;
		
		ПараметрыОткрытия = Новый Структура("Отбор", Новый Структура("ЭтоАЗССклад",
			ОсновнойВидЗаправки = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаСклад")
			ИЛИ ОсновнойВидЗаправки = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаТалоны")
			ИЛИ ОсновнойВидЗаправки = ПредопределенноеЗначение("Перечисление.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад")));
		
		ОткрытьФорму("Справочник.уатАЗС.ФормаВыбора", ПараметрыОткрытия, Элемент);
		СтандартнаяОбработка = Ложь;		
		
	ИначеЕсли ТекСтрокаДерева.ПравоНастройка = ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.МедработникВыезд")
		ИЛИ ТекСтрокаДерева.ПравоНастройка = ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.МедработникВозврат")
		ИЛИ ТекСтрокаДерева.ПравоНастройка = ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ВыдалДиспетчер")
		ИЛИ ТекСтрокаДерева.ПравоНастройка = ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ПринялДиспетчер")
		ИЛИ ТекСтрокаДерева.ПравоНастройка = ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ВыпустилМеханик")
		ИЛИ ТекСтрокаДерева.ПравоНастройка = ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ПринялМеханик")
		ИЛИ ТекСтрокаДерева.ПравоНастройка = ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.УполномоченныйНаПроставлениеОдометраПриВыезде")
		ИЛИ ТекСтрокаДерева.ПравоНастройка = ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.УполномоченныйНаПроставлениеОдометраПриВозврате") Тогда
		
		Если ТекСтрокаДерева.ПравоНастройка = ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.МедработникВыезд")
			ИЛИ ТекСтрокаДерева.ПравоНастройка = ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.МедработникВозврат") Тогда  
			ТекСтрокиУровня = ТекСтрокаДерева.ПолучитьРодителя().ПолучитьЭлементы();   
			Медорганизация = Неопределено;
			Для Каждого ТекСтрокаУровня Из ТекСтрокиУровня Цикл
				Если ТекСтрокаУровня.Код = "77020" Тогда
					Медорганизация = ТекСтрокаУровня.Значение;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если ЗначениеЗаполнено(Медорганизация) Тогда
				СтандартнаяОбработка = Ложь;
				ПараметрФормы = Новый Структура("РежимВыбора, Отборы", Истина, Новый Структура("Контрагент", Медорганизация));
				ОткрытьФорму("Справочник.ФизическиеЛица.ФормаВыбора", ПараметрФормы, Элемент);
			Иначе
				уатЗащищенныеФункцииКлиент.ДиалогВыбораСотрудника(Элемент, ТекСтрокаДерева.Значение, Неопределено, СтандартнаяОбработка);
			КонецЕсли;
		ИначеЕсли ТекСтрокаДерева.ПравоНастройка = ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ВыпустилМеханик")
			ИЛИ ТекСтрокаДерева.ПравоНастройка = ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ПринялМеханик") Тогда  
			ТекСтрокиУровня = ТекСтрокаДерева.ПолучитьРодителя().ПолучитьЭлементы();   
			КонтрольТранспорта = Неопределено;
			Для Каждого ТекСтрокаУровня Из ТекСтрокиУровня Цикл
				Если ТекСтрокаУровня.Код = "77030" Тогда
					КонтрольТранспорта = ТекСтрокаУровня.Значение;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если ЗначениеЗаполнено(КонтрольТранспорта) Тогда 
				СтандартнаяОбработка = Ложь;
				ПараметрФормы = Новый Структура("РежимВыбора, Отборы", Истина, Новый Структура("Контрагент", КонтрольТранспорта));
				ОткрытьФорму("Справочник.ФизическиеЛица.ФормаВыбора", ПараметрФормы, Элемент);
			Иначе
				уатЗащищенныеФункцииКлиент.ДиалогВыбораСотрудника(Элемент, ТекСтрокаДерева.Значение, Неопределено, СтандартнаяОбработка);
			КонецЕсли;
		ИначеЕсли ТекСтрокаДерева.ПравоНастройка = ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.УполномоченныйНаПроставлениеОдометраПриВыезде")
			ИЛИ ТекСтрокаДерева.ПравоНастройка = ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.УполномоченныйНаПроставлениеОдометраПриВозврате") Тогда  
			ТекСтрокиУровня = ТекСтрокаДерева.ПолучитьРодителя().ПолучитьЭлементы();   
			ПоказанияОдометра = Неопределено;
			Для Каждого ТекСтрокаУровня Из ТекСтрокиУровня Цикл
				Если ТекСтрокаУровня.Код = "77040" Тогда
					ПоказанияОдометра = ТекСтрокаУровня.Значение;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если ЗначениеЗаполнено(ПоказанияОдометра) Тогда
				СтандартнаяОбработка = Ложь;
				ПараметрФормы = Новый Структура("РежимВыбора, Отборы", Истина, Новый Структура("Контрагент", ПоказанияОдометра));
				ОткрытьФорму("Справочник.ФизическиеЛица.ФормаВыбора", ПараметрФормы, Элемент);
			Иначе
				уатЗащищенныеФункцииКлиент.ДиалогВыбораСотрудника(Элемент, ТекСтрокаДерева.Значение, Неопределено, СтандартнаяОбработка);
			КонецЕсли;
		Иначе
			уатЗащищенныеФункцииКлиент.ДиалогВыбораСотрудника(Элемент, ТекСтрокаДерева.Значение, Неопределено, СтандартнаяОбработка);
		КонецЕсли;
		
	ИначеЕсли ТекСтрокаДерева.ПравоНастройка = ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.Медорганизация") Тогда
		ТекСтрокиУровня = ТекСтрокаДерева.ПолучитьРодителя().ПолучитьЭлементы();   
		ПоказанияОдометра = Неопределено;
		Для Каждого ТекСтрокаУровня Из ТекСтрокиУровня Цикл
			Если ТекСтрокаУровня.Код = "77021"
				ИЛИ ТекСтрокаУровня.Код = "77022" Тогда
				Если (ЗначениеЗаполнено(ТекСтрокаДерева.Значение)
					И ТипЗнч(ТекСтрокаУровня.Значение) = Тип("СправочникСсылка.Сотрудники")) 
					ИЛИ (НЕ ЗначениеЗаполнено(ТекСтрокаДерева.Значение)
					И ТипЗнч(ТекСтрокаУровня.Значение) = Тип("СправочникСсылка.ФизическиеЛица")) Тогда
					ТекСтрокаУровня.Значение = Неопределено; 
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТекСтрокаДерева.ПравоНастройка = ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.КонтрольТранспорта") Тогда
		ТекСтрокиУровня = ТекСтрокаДерева.ПолучитьРодителя().ПолучитьЭлементы();   
		ПоказанияОдометра = Неопределено;
		Для Каждого ТекСтрокаУровня Из ТекСтрокиУровня Цикл
			Если ТекСтрокаУровня.Код = "77031"
				ИЛИ ТекСтрокаУровня.Код = "77032" Тогда
				Если (ЗначениеЗаполнено(ТекСтрокаДерева.Значение)
					И ТипЗнч(ТекСтрокаУровня.Значение) = Тип("СправочникСсылка.Сотрудники")) 
					ИЛИ (НЕ ЗначениеЗаполнено(ТекСтрокаДерева.Значение)
					И ТипЗнч(ТекСтрокаУровня.Значение) = Тип("СправочникСсылка.ФизическиеЛица")) Тогда
					ТекСтрокаУровня.Значение = Неопределено; 
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ТекСтрокаДерева.ПравоНастройка = ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ПоказанияОдометра") Тогда
		ТекСтрокиУровня = ТекСтрокаДерева.ПолучитьРодителя().ПолучитьЭлементы();   
		ПоказанияОдометра = Неопределено;
		Для Каждого ТекСтрокаУровня Из ТекСтрокиУровня Цикл
			Если ТекСтрокаУровня.Код = "77041"
				ИЛИ ТекСтрокаУровня.Код = "77042" Тогда
				Если (ЗначениеЗаполнено(ТекСтрокаДерева.Значение)
					И ТипЗнч(ТекСтрокаУровня.Значение) = Тип("СправочникСсылка.Сотрудники")) 
					ИЛИ (НЕ ЗначениеЗаполнено(ТекСтрокаДерева.Значение)
					И ТипЗнч(ТекСтрокаУровня.Значение) = Тип("СправочникСсылка.ФизическиеЛица")) Тогда
					ТекСтрокаУровня.Значение = Неопределено; 
				КонецЕсли;
			КонецЕсли;
		КонецЦикла; 
		
	ИначеЕсли ТекСтрокаДерева.ПравоНастройка = ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ГруппаНоменклатурыДляРаботПоРемонтуТС") Тогда
		
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("Справочник.Номенклатура.ФормаВыбораГруппы",, Элемент);
		
	ИначеЕсли ТекСтрокаДерева.ПравоНастройка = ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ОбщаяНоменклатураДляЗаполненияРаботПоРемонтуТС") Тогда
		
		СтандартнаяОбработка = Ложь; 
		ПараметрыФормы = Новый Структура("Отбор", Новый Структура("ВидНоменклатуры", ПредопределенноеЗначение("Справочник.ВидыНоменклатуры.Услуга")));
		ОткрытьФорму("Справочник.Номенклатура.ФормаВыбора", ПараметрыФормы, Элемент);
	
	ИначеЕсли (уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП()
		ИЛИ уатОбщегоНазначенияПовтИсп.ВариантПоставкиПРОФ()) И ТекСтрокаДерева.ПравоНастройка = ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ЧасовойПоясДляВзаимодействияСКАУТ") Тогда 
		
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура("НачальноеЗначениеВыбора", ТекСтрокаДерева.Значение);
		ОткрытьФорму("Обработка.уатПанельНастроекВнешнихСистем.Форма.ВыборЧасовогоПоясаСКАУТ", ПараметрыФормы, Элемент);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПравЗначениеАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	ТекСтрокаДерева = Элементы.ДеревоПрав.ТекущиеДанные;
	Если ТекСтрокаДерева.ПравоНастройка = ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ГруппаНоменклатурыДляРаботПоРемонтуТС") Тогда
		СтандартнаяОбработка = Ложь;	
	ИначеЕсли ТекСтрокаДерева.ПравоНастройка = ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ОбщаяНоменклатураДляЗаполненияРаботПоРемонтуТС") Тогда
		СтандартнаяОбработка = Ложь;	
	КонецЕсли;
КонецПроцедуры


&НаКлиенте
Процедура ДеревоПравЗначениеНачалоВыбораЗавершение(ВыбранныйЭлемент1, ДополнительныеПараметры) Экспорт
    
    ТекСтрокаДерева = ДополнительныеПараметры.ТекСтрокаДерева;
    
    
    ВыбранныйЭлемент = ВыбранныйЭлемент1;
    Если ВыбранныйЭлемент = Неопределено Тогда
        ТекСтрокаДерева.Значение = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрокаДерева.ПравоНастройка, "ЗначениеПоУмолчанию");
    Иначе
        ТекСтрокаДерева.Значение = ВыбранныйЭлемент.Значение;
    КонецЕсли;
    ТекСтрокаДерева.Изменено = Истина;
    Модифицированность = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ДеревоПравЗначениеОткрытие(Элемент, СтандартнаяОбработка)
	ТекСтрокаДерева = Элементы.ДеревоПрав.ТекущиеДанные;
	Если ТипЗнч(ТекСтрокаДерева.Значение) = Тип("СправочникСсылка.Сотрудники") Тогда
		уатЗащищенныеФункцииКлиент.ОткрытьФормуСотрудника(ТекСтрокаДерева.Значение, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПравЗначениеПриИзменении(Элемент)
	Стр = Элементы.ДеревоПрав.ТекущиеДанные;
	Стр.Изменено = Истина;
	Если Стр.Тип = Тип("Булево") Тогда
		Стр.ЗначениеБулево = Стр.Значение;
	КонецЕсли; 
	
	Если Стр.ПравоНастройка = ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ВестиСкладскойУчетУАТ") Тогда
		мВестиСкладскойУчетУАТ = Стр.Значение;
	КонецЕсли;
	
	Модифицированность = Истина;
	
	Стр.ПравоДоступаРедактированиеПоПользователям = Ложь;
	
	// Обработка доступности станиц 
	Если Стр.Значение = ПредопределенноеЗначение("Перечисление.уатВидыПравДляСправочников.РедактированиеПоГруппам") Тогда
		Элементы.НастройкаДополнительныхПравСправочниковИДокументов.Видимость = Истина;
		Стр.ПравоДоступаРедактированиеПоПользователям = Истина;
		
	ИначеЕсли Стр.Значение = ПредопределенноеЗначение("Перечисление.уатВидыПравДляДокументов.РедактированиеПоПользователям") Тогда
		Элементы.НастройкаДополнительныхПравСправочниковИДокументов.Видимость = Истина;
		ВидДокумента = Сред(Стр.ПравоНастройка, мДлинаПрефиксаПрава);
		ЗаголовокДополнительныеПраваСправочниковИДокументов = НСтр("en='Access on document type authors:';ru='Доступ по авторам документов вида:'") + " " + ПредставлениеВидаДокумента(ВидДокумента);
		Стр.ПравоДоступаРедактированиеПоПользователям = Истина;
		
	ИначеЕсли Стр.ПравоНастройка = ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ТочностьОстатковТоплива") Тогда
		Если Стр.Значение < 0 ИЛИ Стр.Значение > 3 Тогда 
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = НСтр("en='Accuracy should be in range from 0 to 3!';ru='Точность должна быть в пределах от 0 до 3!'");
			Сообщение.Сообщить();
			Стр.Значение = 0;
			Возврат;
		КонецЕсли;
	ИначеЕсли уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП() И Стр.ПравоНастройка = ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ДопустимоеОтклонениеОтВремениПрибытия") Тогда
		Если Стр.Значение < 0 ИЛИ Стр.Значение > 9999 Тогда 
			Сообщение = Новый СообщениеПользователю();
			Сообщение.Текст = НСтр("en='Maximum value of permissible deviation from arrival time: 9999 minutes!';ru='Максимальное значение допустимого отклонения от времени прибытия: 9999 минут!'");
			Сообщение.Сообщить();
			Стр.Значение = мДлинаПрефиксаПрава;
			Возврат;
		КонецЕсли;
	Иначе
		Элементы.НастройкаДополнительныхПравСправочниковИДокументов.Видимость = Ложь;
		
	КонецЕсли;	
	
	Если Стр.ПравоНастройка = ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.Медорганизация") Тогда
		ТекСтрокиУровня = Стр.ПолучитьРодителя().ПолучитьЭлементы();   
		ПоказанияОдометра = Неопределено;
		Для Каждого ТекСтрокаУровня Из ТекСтрокиУровня Цикл
			Если ТекСтрокаУровня.Код = "77021"
				ИЛИ ТекСтрокаУровня.Код = "77022" Тогда
				Если (ЗначениеЗаполнено(Стр.Значение)
					И ТипЗнч(ТекСтрокаУровня.Значение) = Тип("СправочникСсылка.Сотрудники")) 
					ИЛИ (НЕ ЗначениеЗаполнено(Стр.Значение)
					И ТипЗнч(ТекСтрокаУровня.Значение) = Тип("СправочникСсылка.ФизическиеЛица")) Тогда
					ТекСтрокаУровня.Значение = Неопределено; 
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли Стр.ПравоНастройка = ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.КонтрольТранспорта") Тогда
		ТекСтрокиУровня = Стр.ПолучитьРодителя().ПолучитьЭлементы();   
		ПоказанияОдометра = Неопределено;
		Для Каждого ТекСтрокаУровня Из ТекСтрокиУровня Цикл
			Если ТекСтрокаУровня.Код = "77031"
				ИЛИ ТекСтрокаУровня.Код = "77032" Тогда
				Если (ЗначениеЗаполнено(Стр.Значение)
					И ТипЗнч(ТекСтрокаУровня.Значение) = Тип("СправочникСсылка.Сотрудники")) 
					ИЛИ (НЕ ЗначениеЗаполнено(Стр.Значение)
					И ТипЗнч(ТекСтрокаУровня.Значение) = Тип("СправочникСсылка.ФизическиеЛица")) Тогда
					ТекСтрокаУровня.Значение = Неопределено; 
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли Стр.ПравоНастройка = ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ПоказанияОдометра") Тогда
		ТекСтрокиУровня = Стр.ПолучитьРодителя().ПолучитьЭлементы();   
		ПоказанияОдометра = Неопределено;
		Для Каждого ТекСтрокаУровня Из ТекСтрокиУровня Цикл
			Если ТекСтрокаУровня.Код = "77041"
				ИЛИ ТекСтрокаУровня.Код = "77042" Тогда
				Если (ЗначениеЗаполнено(Стр.Значение)
					И ТипЗнч(ТекСтрокаУровня.Значение) = Тип("СправочникСсылка.Сотрудники")) 
					ИЛИ (НЕ ЗначениеЗаполнено(Стр.Значение)
					И ТипЗнч(ТекСтрокаУровня.Значение) = Тип("СправочникСсылка.ФизическиеЛица")) Тогда
					ТекСтрокаУровня.Значение = Неопределено; 
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ((ТипЗнч(Стр.Значение) = Тип("ПеречислениеСсылка.уатВидыПравДляСправочников")) ИЛИ
		(ТипЗнч(Стр.Значение) = Тип("ПеречислениеСсылка.уатВидыПравДляДокументов"))) И
		(СтароеЗначениеПравНастроек <> Стр.Значение) Тогда
		УдалитьТекущиеДоступности();	
	КонецЕсли;
	
	ПроставитьПризнакЗначениеРавноДефолтному(ДеревоПрав);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПравЗначениеБулевоПриИзменении(Элемент)
	Стр = Элементы.ДеревоПрав.ТекущиеДанные;
	Стр.Значение = Стр.ЗначениеБулево;
	ДеревоПравЗначениеПриИзменении(Элемент);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПравПриАктивизацииСтроки(Элемент)
	ТекСтрока = Элементы.ДеревоПрав.ТекущиеДанные;
	
	Попытка
		СтруктураОписаний.Свойство("_" + СокрЛП(ТекСтрока.Код), Комментарий);
		ОписаниеПрава = ТипОбъектаНастройки;
	Исключение
		Комментарий = "";
		ОписаниеПрава = "";
	КонецПопытки;
	
	Если ТекСтрока = Неопределено Тогда
		Разрешено = Ложь;
		Элементы.НастройкаДополнительныхПравСправочниковИДокументов.Видимость = Ложь;
	Иначе
		// Обработка доступности станиц 
		Если ТипЗнч(ТекСтрока.Значение) = Тип("ПеречислениеСсылка.уатВидыПравДляСправочников") Тогда
			Элементы.ДеревоПрав.ТолькоПросмотр = Ложь;
			ВидСправочника = Сред(ТекСтрока.ПравоНастройка, мДлинаПрефиксаПрава);
			ЗаголовокДополнительныеПраваСправочниковИДокументов = НСтр("en='Access for groups of catalogs:';ru='Доступ по группам справочников:'") + " " + ПредставлениеВидаСправочника(ВидСправочника);
			Если ТекСтрока.Значение = ПредопределенноеЗначение("Перечисление.уатВидыПравДляСправочников.РедактированиеПоГруппам") Тогда
				Элементы.НастройкаДополнительныхПравСправочниковИДокументов.Видимость = Истина;
			Иначе
				Элементы.НастройкаДополнительныхПравСправочниковИДокументов.Видимость = Ложь;
			КонецЕсли;
			
		ИначеЕсли ТипЗнч(ТекСтрока.Значение) = Тип("ПеречислениеСсылка.уатВидыПравДляДокументов") Тогда
			Элементы.ДеревоПрав.ТолькоПросмотр = Ложь;
			ВидДокумента = Сред(ТекСтрока.ПравоНастройка, мДлинаПрефиксаПрава);
			ЗаголовокДополнительныеПраваСправочниковИДокументов = НСтр("en='Access all authors of documents of type:';ru='Доступ по всем авторам документов вида:'") + " " + ПредставлениеВидаДокумента(ВидДокумента);
			
		Иначе
			Элементы.НастройкаДополнительныхПравСправочниковИДокументов.Видимость = Ложь;
			ЗаголовокДополнительныеПраваСправочниковИДокументов = НСтр("en='Additional rights of catalogs and documents';ru='Дополнительные права справочников и документов'");	
			
		КонецЕсли;
		
		Если ТекСтрока.Группа Тогда
			Разрешено = Истина;
		Иначе
			Разрешено = (ТекСтрока.ЭтоНастройка И ДостНастройки) ИЛИ (НЕ ТекСтрока.ЭтоНастройка И ДостПрава);
			//Разрешено = Разрешено И Не ЭлементыФормы.ДеревоПрав.ОформлениеСтроки(ТекСтрока).Ячейки.Значение.ТолькоПросмотр;
			Разрешено = Разрешено ИЛИ ТекСтрока.Группа;
			Элементы.ДеревоПрав.ТолькоПросмотр = НЕ Разрешено;
			Элементы.ТаблицаДоступностиОбъектов.ТолькоПросмотр = НЕ Разрешено;
		КонецЕсли;
		
		Если ТекСтрока.ПравоНастройка = ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.РазрешитьИзменениеЛичныхНастроек")
			И ТекущийПользователь = ОбъектНастройкиПрав Тогда
			Разрешено = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	// доступность кнопки УстановитьТекущееПравоПоУмолчанию (в контекстном меню)
	Элементы.ДеревоПравКонтекстноеМенюУстановитьТекущееПравоПоУмолчанию.Доступность = Разрешено;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПравПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	// Запретить пользователю добавлять новые строки
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПравВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле.Имя = "ДеревоПравПравоНастройка" Тогда
		Если ТипОбъектаНастройки <> ПредопределенноеЗначение("Перечисление.уатНазначениеПравИНастроек.Пользователь") Тогда
			Возврат;
		КонецЕсли;
		Если Элементы.ДеревоПрав.ТекущиеДанные.ПравоДоступаРедактированиеПоПользователям Тогда 
			Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.НастройкаДополнительныхПравСправочниковИДокументов;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПравПередНачаломИзменения(Элемент, Отказ)
	ТекСтрока = Элементы.ДеревоПрав.ТекущиеДанные;
	Если НЕ мВестиСкладскойУчетУАТ И ТекСтрока.ПравоНастройка = ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.СпособОценкиМПЗ") Тогда
		Отказ = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПравПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекСтрока = Элементы.ДеревоПрав.ТекущиеДанные;
	Если ТекСтрока.ТипВремя Тогда
		Элементы.ДеревоПравЗначение.ФорматРедактирования = "ДФ=HH:mm";
		Элементы.ДеревоПравЗначение.КнопкаВыбора = Ложь;
	Иначе
		Элементы.ДеревоПравЗначение.ФорматРедактирования = "";
		Элементы.ДеревоПравЗначение.КнопкаВыбора = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДеревоПравПередУдалением(Элемент, Отказ)
	Отказ = Истина;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаДоступностиОбъектов

&НаКлиенте
Процедура ТаблицаДоступностиОбъектовПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)
	Отказ = Истина;
	ДобавитьПользователяИлиГруппу("Добавить", Нстр("en='Select catalog group';ru='Выбор группы справочника'"));
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДоступностиОбъектовПередУдалением(Элемент, Отказ)
	ТекСтрокаПрава = ДеревоПрав.НайтиПоИдентификатору(Элементы.ДеревоПрав.ТекущаяСтрока);
	ТекСтрока = Элементы.ТаблицаДоступностиОбъектов.ТекущиеДанные;
	Если НЕ ЗначениеЗаполнено(ТекСтрока.Объект) Тогда
		Возврат;
	КонецЕсли;
	
	Отбор = Новый Структура;
	Отбор.Вставить("Пользователь", ТекСтрока.Пользователь);
	Отбор.Вставить("Право", ТекСтрока.Право);
	Отбор.Вставить("Объект", ТекСтрока.Объект);
	
	Если ТипЗнч(ТекСтрокаПрава.Значение) = Тип("ПеречислениеСсылка.уатВидыПравДляСправочников") Тогда
		СтрокиПоиска = ТабДоступностиСправочников.НайтиСтроки(Отбор);
		Если СтрокиПоиска.Количество()=0 Тогда
			Возврат;
		КонецЕсли;
		ТабДоступностиСправочников.Удалить(СтрокиПоиска[0]);
		ТекРег = "уатДоступКСправочникам";
		
	ИначеЕсли ТипЗнч(ТекСтрокаПрава.Значение) = Тип("ПеречислениеСсылка.уатВидыПравДляДокументов") Тогда
		СтрокиПоиска = ТабДоступностиДокументов.НайтиСтроки(Отбор);
		Если СтрокиПоиска.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		ТабДоступностиДокументов.Удалить(СтрокиПоиска[0]);
		ТекРег = "уатДоступКДокументам";
		
	Иначе
		Возврат;
		
	КонецЕсли;
	
	УдалитьЗаписьПравоДоступа(Отбор, ТекРег);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДоступностиОбъектовДоступностьПриИзменении(Элемент)
	Стр = Элементы.ТаблицаДоступностиОбъектов.ТекущиеДанные;
	Стр.Изменено = Истина;
	Модифицированность = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаДоступностиОбъектовОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекущаяСтрока = ДеревоПрав.НайтиПоИдентификатору(Элементы.ДеревоПрав.ТекущаяСтрока);
	Если ТипЗнч(ТекущаяСтрока.Значение) = Тип("ПеречислениеСсылка.уатВидыПравДляСправочников") Тогда
		Модифицированность = Истина;
		
		// проверка подбора (просто подбор или подбор со всеми вложенными группами)
		Если ОдиночноеДобавление Тогда
			// Если Текущая строка уже есть то просто меняем значение ее доступности
			мсвСтрокПоиска = ТаблицаДоступностиОбъектов.НайтиСтроки(Новый Структура("Объект", ВыбранноеЗначение.Значение));
			Если мсвСтрокПоиска.Количество() > 0 Тогда
				ТекСтрока = мсвСтрокПоиска[0];
				Если ТекСтрока.Доступность <> ВыбранноеЗначение.УстанавливатьПометку Тогда 
					ТекСтрока.Изменено = Истина;
					ТекСтрока.Доступность = ВыбранноеЗначение.УстанавливатьПометку;
				КонецЕсли;
				Возврат;
			КонецЕсли;
			НоваяСтрока = ТаблицаДоступностиОбъектов.Добавить();
			НоваяСтрока.Объект = ВыбранноеЗначение.Значение;
			НоваяСтрока.Пользователь = ОбъектНастройкиПрав;
			НоваяСтрока.Право = ТекущаяСтрока.ПравоНастройка;
			НоваяСтрока.Доступность = ВыбранноеЗначение.УстанавливатьПометку;
			НоваяСтрока.Инд = ТабДоступностиСправочников.Количество();
			НоваяСтрока.Изменено = Истина;
			
		Иначе
			ВидСправочника = Сред(ТекущаяСтрока.ПравоНастройка, мДлинаПрефиксаПрава);
			
			мсвЭлементовГруппы = ОбработкаВыбораПолучитьОбъектыГруппы(ВидСправочника, ВыбранноеЗначение.Значение);
			
			Для Каждого ТекЭлемСпр Из мсвЭлементовГруппы Цикл
				// Если Текущая строка уже есть то просто меняем значение ее доступности
				мсвСтрокПоиска = ТаблицаДоступностиОбъектов.НайтиСтроки(Новый Структура("Объект", ТекЭлемСпр));
				Если мсвСтрокПоиска.Количество() > 0 Тогда
					ТекСтрока = мсвСтрокПоиска[0];
					Если ТекСтрока.Доступность <> ВыбранноеЗначение.УстанавливатьПометку Тогда 
						ТекСтрока.Доступность = ВыбранноеЗначение.УстанавливатьПометку;
						ТекСтрока.Изменено = Истина;
					КонецЕсли;
					Продолжить;
				КонецЕсли;
				
				НоваяСтрока = ТаблицаДоступностиОбъектов.Добавить();
				НоваяСтрока.Объект = ТекЭлемСпр;
				НоваяСтрока.Пользователь = ОбъектНастройкиПрав;
				НоваяСтрока.Право = ТекущаяСтрока.ПравоНастройка;
				НоваяСтрока.Доступность = ВыбранноеЗначение.УстанавливатьПометку;
				НоваяСтрока.Инд = ТабДоступностиСправочников.Количество();
				НоваяСтрока.Изменено = Истина;
			КонецЦикла;
			
		КонецЕсли;
		
	ИначеЕсли ТипЗнч(ТекущаяСтрока.Значение) = Тип("ПеречислениеСсылка.уатВидыПравДляДокументов") Тогда
		Если НЕ ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
			Возврат;
		КонецЕсли;
		
		// Если Текущая строка уже есть то просто меняем значение ее доступности
		мсвСтрокПоиска = ТаблицаДоступностиОбъектов.НайтиСтроки(Новый Структура("Объект", ВыбранноеЗначение));
		Если мсвСтрокПоиска.Количество() > 0 Тогда
			ТекСтрока = мсвСтрокПоиска[0];
			ТекСтрока.Изменено = Истина;
			ТекСтрока.Доступность = Истина;
			Возврат;
		КонецЕсли;
		
		НовыйДокумент = ТаблицаДоступностиОбъектов.Добавить();
		НовыйДокумент.Объект = ВыбранноеЗначение;
		НовыйДокумент.Пользователь = ОбъектНастройкиПрав;
		НовыйДокумент.Право = ТекущаяСтрока.ПравоНастройка;
		НовыйДокумент.Доступность = Истина;
		НовыйДокумент.Инд = ТабДоступностиДокументов.Количество();
		НовыйДокумент.Изменено = Истина;
		
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УстановитьТекущееПравоПоУмолчанию(Команда)
	ТекущаяСтрока = Элементы.ДеревоПрав.ТекущиеДанные;
	Если ТекущаяСтрока = Неопределено Тогда
		Возврат;
	КонецЕсли;
	Если ТекущаяСтрока.Группа Тогда
		Ответ = Неопределено;

		ТекстНСТР = НСтр("en='Set values in group by default';ru='Установить значения по умолчанию в группе'") + " " + ТекущаяСтрока.ПравоНастройка;
		ПоказатьВопрос(Новый ОписаниеОповещения("УстановитьТекущееПравоПоУмолчаниюЗавершение", ЭтотОбъект, Новый Структура("ТекущаяСтрока", ТекущаяСтрока)), ТекстНСТР, РежимДиалогаВопрос.ДаНет);
        Возврат;
	КонецЕсли;
	
	УстановитьТекущееПравоПоУмолчаниюФрагмент(ТекущаяСтрока);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущееПравоПоУмолчаниюЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ТекущаяСтрока = ДополнительныеПараметры.ТекущаяСтрока;
    
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;
    
    УстановитьТекущееПравоПоУмолчаниюФрагмент(ТекущаяСтрока);

КонецПроцедуры

&НаКлиенте
Процедура УстановитьТекущееПравоПоУмолчаниюФрагмент(Знач ТекущаяСтрока)
    
    УстановитьПравоНастройкуПоУмолчанию(ТекущаяСтрока);
    ПроставитьПризнакЗначениеРавноДефолтному(ДеревоПрав);

КонецПроцедуры

&НаКлиенте
Процедура СохранитьИЗакрыть(Команда)
	ПерезаписатьСтраницы();
	Рез = ЗаписатьПраваИНастройки();
	Если Рез Тогда
		Модифицированность = Ложь;
		Закрыть();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Сохранить(Команда)
	ПерезаписатьСтраницы();
	Если НЕ ЗаписатьПраваИНастройки() Тогда
		Возврат;
	КонецЕсли;
	ЗаполнитьТаблицуДоступностейОбъектов(ДеревоПрав.НайтиПоИдентификатору(Элементы.ДеревоПрав.ТекущаяСтрока));
	Модифицированность = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура СвернутьДерево(Команда)
	СвернутьСтрокиДерева(ДеревоПрав);
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДерево(Команда)
	Для Каждого ТекСтрока Из ДеревоПрав.ПолучитьЭлементы() Цикл
		Элементы.ДеревоПрав.Развернуть(ТекСтрока.ПолучитьИдентификатор(), Истина);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПеречитатьПрава(Команда)
	ОбъектНастройкиПравПриИзменении(Неопределено);
	Модифицированность = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПраваПоУмолчанию(Команда)
	Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(ОбъектНастройкиПрав)
		И ТипОбъектаНастройки <> ПредопределенноеЗначение("Перечисление.уатНазначениеПравИНастроек.Компания") Тогда
		ТекстНСТР = НСтр("en='""Object"" field is not filled!';ru='Поле ""Объект"" не заполнено!'");
		ПоказатьПредупреждение(Неопределено, ТекстНСТР);
		Возврат;
	КонецЕсли;
	ТекстНСТР = НСтр("en='User will be set right by default !"
"Continue ?';ru='Пользователю будут установлены права по умолчанию !"
"Продолжить ?'");
	ПоказатьВопрос(Новый ОписаниеОповещения("УстановитьПраваПоУмолчаниюЗавершение", ЭтотОбъект), ТекстНСТР, РежимДиалогаВопрос.ДаНет, ,КодВозвратаДиалога.Нет);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПраваПоУмолчаниюЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
    ФормированиеДереваПравОбъекта();
    УстановитьЗначенияПоУмолчанию(ДеревоПрав);

КонецПроцедуры

&НаКлиенте
Процедура СкопироватьПрофиль(Команда)
	Если ТипОбъектаНастройки = ПредопределенноеЗначение("Перечисление.уатНазначениеПравИНастроек.Компания") Тогда
		ТекстНСТР = НСтр("en='For an object of type ""Company"" set of rights cannot be copied.';ru='Для объекта типа ""Компания"" набор прав скопировать нельзя.'");
		ПоказатьПредупреждение(Неопределено, ТекстНСТР);
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ОбъектНастройкиПрав) Тогда
		ТекстНСТР = НСтр("en='""Object"" field is not filled!';ru='Поле ""Объект"" не заполнено!'");
		ПоказатьПредупреждение(Неопределено, ТекстНСТР);
		Возврат;
	КонецЕсли;
	Если Не ДостПрава Тогда
		ТекстНСТР = НСтр("en='Insufficient rights!';ru='Недостаточно прав!'");
		ПоказатьПредупреждение(Неопределено, ТекстНСТР);
		Возврат;
	КонецЕсли;
	
	Если Модифицированность Тогда
		Ответ = Неопределено;

		ТекстНСТР = НСтр("en='Settings data is changed!"
"Save changes?';ru='Данные настроек изменены!"
"Сохранить изменения?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("СкопироватьПрофильЗавершение", ЭтотОбъект), ТекстНСТР, РежимДиалогаВопрос.ДаНет);
		Возврат;
	КонецЕсли;
	
	СкопироватьПрофильФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура СкопироватьПрофильЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Да Тогда
        ПерезаписатьСтраницы();
        ЗаписатьПраваИНастройки();
        ЗаполнитьТаблицуДоступностейОбъектов(ДеревоПрав.НайтиПоИдентификатору(Элементы.ДеревоПрав.ТекущаяСтрока));
        Модифицированность = Ложь;
    Иначе
        Возврат;
    КонецЕсли;		
    
    СкопироватьПрофильФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура СкопироватьПрофильФрагмент()
    
    Перем ПараметрыФормы;
    
    Если НЕ Модифицированность Тогда
        ПараметрыФормы = Новый Структура("ТипОбъекта, ОбъектНастройкиПрав", ТипОбъектаНастройки, ОбъектНастройкиПрав);
        ОткрытьФорму("Обработка.уатУстановкаПравИНастроек.Форма.ФормаКопированиеПрав", ПараметрыФормы, ЭтотОбъект,,,, Неопределено, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
        
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайла(Команда)
	Обработчик = Новый ОписаниеОповещения("ПоказатьДиалогВыбораФайла", ЭтотОбъект);
	НачатьПодключениеРасширенияРаботыСФайлами(Обработчик);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаПодтверждение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда 
		Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
		Диалог.МножественныйВыбор = Ложь;
		Диалог.Фильтр = НСтр("en='XML files';ru='Файлы XML'") + " (*.xml)|*.xml";
		
		Диалог.Показать(Новый ОписаниеОповещения("ЗагрузитьИзФайлаВыборФайла", ЭтотОбъект, Новый Структура("Диалог", Диалог)));
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзФайлаВыборФайла(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Диалог = ДополнительныеПараметры.Диалог;
	
	Если (ВыбранныеФайлы <> Неопределено) Тогда
		ПолноеИмяФайла = Диалог.ПолноеИмяФайла; 
		
		#Если МобильныйКлиент ИЛИ МобильноеПриложениеКлиент Тогда
			ДвоичныеДанные = Новый ДвоичныеДанные(ПолноеИмяФайла); 
			ПослеСозданияДвоичныхДанных(ДвоичныеДанные, Неопределено);
		#Иначе
			Оповещение = Новый ОписаниеОповещения("ВыполнитьЗагрузкуДанныхЗавершение", ЭтотОбъект);
			НачатьСозданиеДвоичныхДанныхИзФайла(Оповещение, ПолноеИмяФайла);
		#КонецЕсли
	Иначе
		ТекстНСТР = НСтр("en='Not specified download file name!';ru='Не указано имя файла загрузки!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузкуДанныхЗавершение(ДвоичныеДанные, ДопПараметры) Экспорт
	
	Если ДвоичныеДанные <> Неопределено Тогда
		Адрес = ПоместитьВоВременноеХранилище(ДвоичныеДанные, Новый УникальныйИдентификатор);
		ЗагрузитьНастройкиИзФайлаСервер(Адрес);
		ТипОбъектаНастройкиПриИзменении(Неопределено);
		
		ОбновитьПовторноИспользуемыеЗначения();
		ПеречитатьПрава(Неопределено);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьВФайл(Команда)
	СохранитьНастройкиВФайл();
КонецПроцедуры

&НаКлиенте
Процедура ПраваДоступаОчистить(Команда)
	ТаблицаДоступностиОбъектов.Очистить();
	УдалитьТекущиеДоступности();
КонецПроцедуры

&НаКлиенте
Процедура ПраваДоступаЗаполнить(Команда)
	Стр = ДеревоПрав.НайтиПоИдентификатору(Элементы.ДеревоПрав.ТекущаяСтрока);
	Если Стр = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПраваДоступаЗаполнитьВсе(Стр.ПравоНастройка, Стр.Значение);
КонецПроцедуры

&НаСервере
Процедура ПраваДоступаЗаполнитьВсе(ПравоНастройка, Значение)
	ТаблицаДоступностиОбъектов_ = РеквизитФормыВЗначение("ТаблицаДоступностиОбъектов");
	
	Если ВидОбъектаНастройкиПрав = "Справочники" Тогда 
		ВидОбъекта = Сред(ПравоНастройка, мДлинаПрефиксаПрава);
		
	ИначеЕсли Значение = Перечисления.уатВидыПравДляДокументов.РедактированиеПоПользователям Тогда
		ВидОбъекта = "Пользователи";
		
	КонецЕсли;
	
	Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВидОбъекта.Ссылка КАК Объект
	|ИЗ
	|	Справочник." + ВидОбъекта + " КАК ВидОбъекта
	|ГДЕ
	|	(НЕ ВидОбъекта.Ссылка В (&СписокОбъектов))";
	Если ВидОбъектаНастройкиПрав = "Справочники" Тогда 
		Текст = Текст + "
		|	И ВидОбъекта.ЭтоГруппа = Истина";
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст = Текст;
	Запрос.УстановитьПараметр("СписокОбъектов", ТаблицаДоступностиОбъектов_.ВыгрузитьКолонку("Объект"));
	Результат = Запрос.Выполнить().Выбрать();
	
	Если Булево(Результат.Количество()) Тогда
		Модифицированность = Истина;
	КонецЕсли;
	Если ВидОбъектаНастройкиПрав = "Справочники" Тогда
		КоличествоВБазовойТаблице = ТабДоступностиСправочников.Количество();
		
	ИначеЕсли ВидОбъектаНастройкиПрав = "Документы" Тогда 
		КоличествоВБазовойТаблице = ТабДоступностиДокументов.Количество();
		
	КонецЕсли;
	Пока Результат.Следующий() Цикл
		НоваяСтрока = ТаблицаДоступностиОбъектов_.Добавить();
		НоваяСтрока.Объект = Результат.Объект;
		НоваяСтрока.Пользователь = ОбъектНастройкиПрав;
		НоваяСтрока.Право = ПравоНастройка;
		НоваяСтрока.Доступность = Истина;
		НоваяСтрока.Инд = КоличествоВБазовойТаблице;
		НоваяСтрока.Изменено = Истина;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ТаблицаДоступностиОбъектов_, "ТаблицаДоступностиОбъектов");
КонецПроцедуры

&НаКлиенте
Процедура ПраваДоступаПодбор(Команда)
	ДобавитьПользователяИлиГруппу("ЗаполнитьПоВыбранным", "Подбор");
КонецПроцедуры

&НаКлиенте
Процедура ПраваДоступаПодборПоГруппам(Команда)
	ДобавитьПользователяИлиГруппу("ЗаполнитьВыбранныеСВложенными", "Подбор по группам (включение вложенных)");
КонецПроцедуры

&НаКлиенте
Процедура ПраваДоступаОтметитьВсе(Команда)
	УстановкаФлаговДоступностиОбъектов(Истина);
КонецПроцедуры

&НаКлиенте
Процедура ПраваДоступаСнятьВсе(Команда)
	УстановкаФлаговДоступностиОбъектов(Ложь);
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// Эта функция осуществляет поиск строки
// Если строка найдена, возвращает найденною строку дерева
// Если строка не найдена, возвращает неопределено
&НаСервере
Функция НайтиОтмеченноеЗначениеВДеревеЗначений(ПравоНастройка)
	ТекДеревоПрав = РеквизитФормыВЗначение("ДеревоПрав");
	
	СтрокаПоиска = ТекДеревоПрав.Строки.Найти(ПравоНастройка, "ПравоНастройка", Истина);
	Если СтрокаПоиска = Неопределено Тогда
		Рез = Неопределено;
	Иначе
		Рез = СтрокаПоиска.Значение;
	КонецЕсли;
	
	Возврат Рез;
КонецФункции
	
// выгружает текущие настройки во внешний файл
&НаКлиенте
Процедура СохранитьНастройкиВФайл()
	Обработчик = Новый ОписаниеОповещения("ПоказатьДиалогВыбораФайлаСохранение", ЭтотОбъект);
	НачатьПодключениеРасширенияРаботыСФайлами(Обработчик);
КонецПроцедуры

&НаКлиенте
Процедура СохранитьНастройкиВФайлЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
    
    Диалог = ДополнительныеПараметры.Диалог;
    
    
    Если (ВыбранныеФайлы <> Неопределено) Тогда
        СохранитьНастройкиВФайлСервер(Диалог.ПолноеИмяФайла);
    Иначе
        Возврат; 					
    КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиВФайлСервер(ПолноеИмяФайла)
	ФайлВыгрузки = Новый ЗаписьXML();
	ФайлВыгрузки.ОткрытьФайл(ПолноеИмяФайла);
	ФайлВыгрузки.ЗаписатьОбъявлениеXML();
	ФайлВыгрузки.ЗаписатьНачалоЭлемента("ОбъектНастройки");
	ФайлВыгрузки.ЗаписатьАтрибут("ТипОбъектаНастройки", ЗначениеВСтрокуВнутр(ТипОбъектаНастройки));
	
	// выборка и выгрузка прав и настроек пользователя
	ФайлВыгрузки.ЗаписатьНачалоЭлемента("ПраваИНастройки");
	Запрос = Новый Запрос();
	Запрос.Текст = "
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПраваИНастройки.Объект КАК Объект,
	|	ПраваИНастройки.ПравоНастройка КАК ПравоНастройка,
	|	ПраваИНастройки.Значение КАК Значение
	|ИЗ
	|	РегистрСведений.уатПраваИНастройки КАК ПраваИНастройки
	|ГДЕ
	|	ПраваИНастройки.Объект = &Объект
	|";
	Запрос.УстановитьПараметр("Объект", ОбъектНастройкиПрав);
	РезультатЗапроса = Запрос.Выполнить().Выгрузить();
	Для каждого СтрокаТЗ Из РезультатЗапроса Цикл
		ФайлВыгрузки.ЗаписатьНачалоЭлемента("ЗаписьРегистра"); 
		ФайлВыгрузки.ЗаписатьАтрибут("ПравоНастройка", ЗначениеВСтрокуВнутр(СтрокаТЗ.ПравоНастройка));
		ФайлВыгрузки.ЗаписатьАтрибут("Значение", ЗначениеВСтрокуВнутр(СтрокаТЗ.Значение));
		ФайлВыгрузки.ЗаписатьКонецЭлемента();
	КонецЦикла; 
	ФайлВыгрузки.ЗаписатьКонецЭлемента();
	
	// Если объект настройки пользователь, то так же выгрузим права доступа к документам и справочникам
	Если ТипОбъектаНастройки = Перечисления.уатНазначениеПравИНастроек.Пользователь Тогда
		
		// выборка и выгрузка прав доступа к документам
		ФайлВыгрузки.ЗаписатьНачалоЭлемента("ДоступКДокументам");
		Запрос = Новый Запрос();
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДоступКДокументам.Пользователь КАК Пользователь,
		|	ДоступКДокументам.Право КАК Право,
		|	ДоступКДокументам.Объект КАК Объект,
		|	ДоступКДокументам.ДоступЕсть КАК ДоступЕсть
		|ИЗ
		|	РегистрСведений.уатДоступКДокументам КАК ДоступКДокументам
		|ГДЕ
		|	ДоступКДокументам.Пользователь = &Пользователь
		|";
		Запрос.УстановитьПараметр("Пользователь", ОбъектНастройкиПрав);
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		Для каждого СтрокаТЗ Из РезультатЗапроса Цикл
			ФайлВыгрузки.ЗаписатьНачалоЭлемента("ЗаписьРегистра"); 
			ФайлВыгрузки.ЗаписатьАтрибут("Право", ЗначениеВСтрокуВнутр(СтрокаТЗ.Право));
			ФайлВыгрузки.ЗаписатьАтрибут("Объект", ЗначениеВСтрокуВнутр(СтрокаТЗ.Объект));				
			ФайлВыгрузки.ЗаписатьАтрибут("ДоступЕсть", ЗначениеВСтрокуВнутр(СтрокаТЗ.ДоступЕсть));
			ФайлВыгрузки.ЗаписатьКонецЭлемента();
		КонецЦикла; 
		ФайлВыгрузки.ЗаписатьКонецЭлемента();
		
		// выборка и выгрузка прав доступа к справочникам
		ФайлВыгрузки.ЗаписатьНачалоЭлемента("ДоступКСправочникам");
		Запрос = Новый Запрос();
		Запрос.Текст = "
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ДоступКСправочникам.Пользователь КАК Пользователь,
		|	ДоступКСправочникам.Право КАК Право,
		|	ДоступКСправочникам.Объект КАК Объект,
		|	ДоступКСправочникам.ДоступЕсть КАК ДоступЕсть
		|ИЗ
		|	РегистрСведений.уатДоступКСправочникам КАК ДоступКСправочникам
		|ГДЕ
		|	ДоступКСправочникам.Пользователь = &Пользователь
		|";
		Запрос.УстановитьПараметр("Пользователь", ОбъектНастройкиПрав);
		РезультатЗапроса = Запрос.Выполнить().Выгрузить();
		Для каждого СтрокаТЗ Из РезультатЗапроса Цикл
			ФайлВыгрузки.ЗаписатьНачалоЭлемента("ЗаписьРегистра"); 
			ФайлВыгрузки.ЗаписатьАтрибут("Право", ЗначениеВСтрокуВнутр(СтрокаТЗ.Право));
			ФайлВыгрузки.ЗаписатьАтрибут("Объект", ЗначениеВСтрокуВнутр(СтрокаТЗ.Объект));				
			ФайлВыгрузки.ЗаписатьАтрибут("ДоступЕсть", ЗначениеВСтрокуВнутр(СтрокаТЗ.ДоступЕсть));
			ФайлВыгрузки.ЗаписатьКонецЭлемента();
		КонецЦикла; 
		ФайлВыгрузки.ЗаписатьКонецЭлемента();
		
	КонецЕсли; 	
	ФайлВыгрузки.ЗаписатьКонецЭлемента();		
	ФайлВыгрузки.Закрыть();
КонецПроцедуры
	
&НаСервере
Процедура ЗагрузитьНастройкиИзФайлаСервер(Адрес)
	ПотокДляЧтения = ПолучитьИзВременногоХранилища(Адрес).ОткрытьПотокДляЧтения();
	ФайлЗагрузки = Новый ЧтениеXML();
	ФайлЗагрузки.ОткрытьПоток(ПотокДляЧтения);
	ФайлЗагрузки.Прочитать();
	
	Если ЗначениеИзСтрокиВнутр(ФайлЗагрузки.ПолучитьАтрибут("ТипОбъектаНастройки")) <> ТипОбъектаНастройки Тогда 
		ТекстНСТР = НСтр("en='Object type of setting is different from downloading!';ru='Тип объекта настройки отличается от загружаемого!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		Возврат;
	КонецЕсли;
	
	НастройкиДляПользователя = ТипОбъектаНастройки = Перечисления.уатНазначениеПравИНастроек.Пользователь;
	
	// Временная таблица для хранеия восстановленных значений регистра "ПраваИНастройки"
	ТаблицаПравИНастроек = Новый ТаблицаЗначений;
	ТаблицаПравИНастроек.Колонки.Добавить("ПравоНастройка");
	ТаблицаПравИНастроек.Колонки.Добавить("Значение");
	
	// Если объект настройки пользователь, то так же загрузим права доступа к документам и справочникам
	Если НастройкиДляПользователя Тогда 
		// Временная таблица для хранеия восстановленных значений регистра "ДоступКДокументам"
		ТаблицаДоступаКДокументам = Новый ТаблицаЗначений;
		ТаблицаДоступаКДокументам.Колонки.Добавить("Право");
		ТаблицаДоступаКДокументам.Колонки.Добавить("Объект");
		ТаблицаДоступаКДокументам.Колонки.Добавить("ДоступЕсть");
		
		// Временная таблица для хранеия восстановленных значений регистра "ДоступКСправочникам"
		ТаблицаДоступаКСправочникам = Новый ТаблицаЗначений;
		ТаблицаДоступаКСправочникам.Колонки.Добавить("Право");
		ТаблицаДоступаКСправочникам.Колонки.Добавить("Объект");
		ТаблицаДоступаКСправочникам.Колонки.Добавить("ДоступЕсть");
	КонецЕсли;
	
	Пока ФайлЗагрузки.Прочитать() Цикл
		
		Если (ФайлЗагрузки.ТипУзла = ТипУзлаXML.НачалоЭлемента) И ФайлЗагрузки.Имя = "ПраваИНастройки" Тогда
			ЗагрузкаПравИНастроек = Истина;
			Продолжить;
		КонецЕсли; 
		
		Если (ФайлЗагрузки.ТипУзла = ТипУзлаXML.КонецЭлемента) И ФайлЗагрузки.Имя = "ПраваИНастройки" Тогда
			ЗагрузкаПравИНастроек = Ложь;
			Продолжить;
		КонецЕсли; 
		
		Если НастройкиДляПользователя Тогда
			Если (ФайлЗагрузки.ТипУзла = ТипУзлаXML.НачалоЭлемента) И ФайлЗагрузки.Имя = "ДоступКДокументам" Тогда
				ЗагрузкаДоступаКДокументам = Истина;
				Продолжить;
			КонецЕсли; 
			
			Если (ФайлЗагрузки.ТипУзла = ТипУзлаXML.КонецЭлемента) И ФайлЗагрузки.Имя = "ДоступКДокументам" Тогда
				ЗагрузкаДоступаКДокументам = Ложь;
				Продолжить;
			КонецЕсли; 
			
			Если (ФайлЗагрузки.ТипУзла = ТипУзлаXML.НачалоЭлемента) И ФайлЗагрузки.Имя = "ДоступКСправочникам" Тогда
				ЗагрузкаДоступаКСправочникам = Истина;
				Продолжить;
			КонецЕсли; 
			
			Если (ФайлЗагрузки.ТипУзла = ТипУзлаXML.КонецЭлемента) И ФайлЗагрузки.Имя = "ДоступКСправочникам" Тогда
				ЗагрузкаДоступаКСправочникам = Ложь;
				Продолжить;
			КонецЕсли; 
		КонецЕсли; 
		
		
		Если ФайлЗагрузки.ТипУзла = ТипУзлаXML.КонецЭлемента Тогда Продолжить; КонецЕсли; 
		
		Если ЗагрузкаПравИНастроек Тогда
			НоваяСтрока = ТаблицаПравИНастроек.Добавить();
			НоваяСтрока.ПравоНастройка = ЗначениеИзСтрокиВнутр(ФайлЗагрузки.ПолучитьАтрибут("ПравоНастройка"));
			НоваяСтрока.Значение = ЗначениеИзСтрокиВнутр(ФайлЗагрузки.ПолучитьАтрибут("Значение"));
			Продолжить;
		КонецЕсли;
		
		Если НастройкиДляПользователя Тогда
			Если ЗагрузкаДоступаКДокументам Тогда
				НоваяСтрока = ТаблицаДоступаКДокументам.Добавить();
				НоваяСтрока.Право = ЗначениеИзСтрокиВнутр(ФайлЗагрузки.ПолучитьАтрибут("Право"));
				НоваяСтрока.Объект = ЗначениеИзСтрокиВнутр(ФайлЗагрузки.ПолучитьАтрибут("Объект"));
				НоваяСтрока.ДоступЕсть = ЗначениеИзСтрокиВнутр(ФайлЗагрузки.ПолучитьАтрибут("ДоступЕсть"));
				Продолжить;
			КонецЕсли; 
			
			Если ЗагрузкаДоступаКСправочникам Тогда
				НоваяСтрока = ТаблицаДоступаКСправочникам.Добавить();
				НоваяСтрока.Право = ЗначениеИзСтрокиВнутр(ФайлЗагрузки.ПолучитьАтрибут("Право"));
				НоваяСтрока.Объект = ЗначениеИзСтрокиВнутр(ФайлЗагрузки.ПолучитьАтрибут("Объект"));
				НоваяСтрока.ДоступЕсть = ЗначениеИзСтрокиВнутр(ФайлЗагрузки.ПолучитьАтрибут("ДоступЕсть"));
				Продолжить;
			КонецЕсли; 
		КонецЕсли; 
	КонецЦикла;
	
	// запишем все данные в регистр "ПраваИНастройки"
	НаборЗаписей = РегистрыСведений.уатПраваИНастройки.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Объект.Установить(ОбъектНастройкиПрав);
	Для каждого СтрокаТЗ Из ТаблицаПравИНастроек Цикл
		НоваяЗапись = НаборЗаписей.Добавить();
		НоваяЗапись.Объект = ОбъектНастройкиПрав;
		НоваяЗапись.ПравоНастройка = СтрокаТЗ.ПравоНастройка;
		НоваяЗапись.Значение = СтрокаТЗ.Значение;
	КонецЦикла;  	
	НаборЗаписей.Записать();
	
	Если НастройкиДляПользователя Тогда	
		// запишем все данные в регистр "ДоступКДокументам"
		НаборЗаписей = РегистрыСведений.уатДоступКДокументам.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Пользователь.Установить(ОбъектНастройкиПрав);
		Для каждого СтрокаТЗ Из ТаблицаДоступаКДокументам Цикл
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Пользователь = ОбъектНастройкиПрав;
			НоваяЗапись.Право = СтрокаТЗ.Право;		
			НоваяЗапись.Объект = СтрокаТЗ.Объект;		
			НоваяЗапись.ДоступЕсть = СтрокаТЗ.ДоступЕсть;
		КонецЦикла;  	
		НаборЗаписей.Записать();
		
		// запишем все данные в регистр "ДоступКСправочникам"
		НаборЗаписей = РегистрыСведений.уатДоступКСправочникам.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Пользователь.Установить(ОбъектНастройкиПрав);
		Для каждого СтрокаТЗ Из ТаблицаДоступаКСправочникам Цикл
			НоваяЗапись = НаборЗаписей.Добавить();
			НоваяЗапись.Пользователь = ОбъектНастройкиПрав;
			НоваяЗапись.Право = СтрокаТЗ.Право;		
			НоваяЗапись.Объект = СтрокаТЗ.Объект;		
			НоваяЗапись.ДоступЕсть = СтрокаТЗ.ДоступЕсть;
		КонецЦикла;  	
		НаборЗаписей.Записать();
	КонецЕсли;
КонецПроцедуры

// Заполняет реквизит "СтруктураОписаний" из макета "НастройкиПоУмолчанию"
// В дальнейшем эта структура может использоваться для вывода описаний в форме
&НаСервере
Процедура ПолучитьСтруктуруОписаний()
	Макет = ПланыВидовХарактеристик.уатПраваИНастройки.ПолучитьМакет("НастройкиПоУмолчанию");	
	Для Номер = 1 По 10000 Цикл	// Заведомо больше, чем есть в макете
		Код = СокрЛП(Макет.ПолучитьОбласть("R" + Строка(Номер) + "C3").ТекущаяОбласть.Текст);
		Наименование = СокрЛП(Макет.ПолучитьОбласть("R" + Строка(Номер) + "C1").ТекущаяОбласть.Текст);
		Описание=СокрЛП(Макет.ПолучитьОбласть("R" + Строка(Номер) + "C8").ТекущаяОбласть.Текст);
		
		Если Наименование = "ИмяПраво_КорректировкаВремениДляЗагрузкиПСМ" Тогда
			МассивПСМ = Новый Массив();
			уатРаботаСРасширениями.ПСМ_ЗаполнитьМассивПСМ(МассивПСМ);
			Если МассивПСМ.Количество() > 0 Тогда
				Описание = СтрЗаменить(Описание, "ПСМ", МассивПСМ[0]);
			КонецЕсли;
		КонецЕсли;
		
		Если Код = "" Тогда Прервать;
		ИначеЕсли Описание = "" Тогда Продолжить;
		КонецЕсли;
		СтруктураОписаний.Вставить("_" + Код, Описание);
	КонецЦикла;
КонецПроцедуры

// Сохранение прав объекта в регистр сведений.
// Функция осуществляет рекурсивный обход дерева прав с поиском и сохранением изменений.
// Если ОбъектНастройкиПрав соответствует текущему пользователю,
// его подразделению или организации, а так же компании в целом, производится
// обновление кэша прав (только для клиента).
&НаКлиенте
Функция ЗаписатьПраваИНастройки()
	флИзмененыПраваНастройки = Ложь;
	Рез = ЗаписатьПраваИНастройкиСервер(,, флИзмененыПраваНастройки);
	
	// Если все корректно записалось, то для корневого вызова проверим
	// необходимость обновления собственных прав (только на клиенте)
	Если Рез И флИзмененыПраваНастройки Тогда
		ОбновитьПовторноИспользуемыеЗначения();
		
		Если (ТипЗнч(ОбъектНастройкиПрав) = Тип("СправочникСсылка.Пользователи") Или ТипЗнч(ОбъектНастройкиПрав) = Тип("СправочникСсылка.ВнешниеПользователи")) И ОбъектНастройкиПрав <> ТекущийПользователь Тогда
			ТекстНСТР = НСтр("en='Rights of user ""%1"" changed! Changes will take effect when the system is restarted by the user.';ru='Права пользователя ""%1"" изменены! Изменения вступят в силу при перезапуске системы пользователем.'");
			ТекстНСТР = СтрШаблон(ТекстНСТР, ОбъектНастройкиПрав);
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		КонецЕсли;
	КонецЕсли;
	
	СнятьПризнакМодификацииСтрок(ДеревоПрав);
	
	Возврат рез;
КонецФункции // ЗаписатьПраваИНастройки

&НаКлиенте
Процедура СнятьПризнакМодификацииСтрок(ВеткаДерева)
	Для Каждого ТекСтрока Из ВеткаДерева.ПолучитьЭлементы() Цикл
		Если ТекСтрока.Изменено Тогда
			ТекСтрока.Изменено = Ложь;
		КонецЕсли;
		СнятьПризнакМодификацииСтрок(ТекСтрока);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция ЗаписатьПраваИНастройкиСервер(ВеткаДерева = Неопределено, ТекДеревоПрав = Неопределено, флИзмененыПраваИНастройки = Неопределено)
	// При неопределенном входном параметре берем корень дерева
	Если ВеткаДерева = Неопределено Тогда
		ВеткаДерева = РеквизитФормыВЗначение("ДеревоПрав");
	КонецЕсли;
	
	Если ТекДеревоПрав = Неопределено Тогда
		ТекДеревоПрав = РеквизитФормыВЗначение("ДеревоПрав");
	КонецЕсли;
	
	// проверим правильность выбора основной АЗС типа склад
	нсАЗСЗначение = НайтиОтмеченноеЗначениеВДеревеЗначений(ПланыВидовХарактеристик.уатПраваИНастройки.ОсновнаяАЗС);	
	Если ЗначениеЗаполнено(нсАЗСЗначение) Тогда
		Если ТипЗнч(нсАЗСЗначение.Контрагент_Склад) <> Тип("СправочникСсылка.Склады") Тогда
			нсВидЗаправкиЗначение = НайтиОтмеченноеЗначениеВДеревеЗначений(ПланыВидовХарактеристик.уатПраваИНастройки.ОсновнойВидЗаправки);
			Если нсВидЗаправкиЗначение <> Неопределено И (нсВидЗаправкиЗначение = Перечисления.уатВидыДвиженияГСМ.ЗаправкаСклад
				ИЛИ нсВидЗаправкиЗначение = Перечисления.уатВидыДвиженияГСМ.ЗаправкаТалоны
				ИЛИ нсВидЗаправкиЗначение = Перечисления.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКартаСклад) Тогда
				
				ТекстНСТР = НСтр("en='You shoul select main gas station - warehouse!';ru='Должна быть выбрана основная АЗС - склад!'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
				Если ТипЗнч(ВеткаДерева) = Тип("ДеревоЗначений") Тогда
					ВеткаДерева = Неопределено;
					ТекДеревоПрав = Неопределено;
				КонецЕсли;
				Возврат Ложь;
			КонецЕсли;			
		ИначеЕсли ТипЗнч(нсАЗСЗначение.Контрагент_Склад) <> Тип("СправочникСсылка.Контрагенты") Тогда
			нсВидЗаправкиЗначение = НайтиОтмеченноеЗначениеВДеревеЗначений(ПланыВидовХарактеристик.уатПраваИНастройки.ОсновнойВидЗаправки);
			Если нсВидЗаправкиЗначение <> Неопределено И (нсВидЗаправкиЗначение = Перечисления.уатВидыДвиженияГСМ.ЗаправкаПоставщик
				ИЛИ нсВидЗаправкиЗначение = Перечисления.уатВидыДвиженияГСМ.ЗаправкаПластиковаяКарта
				ИЛИ нсВидЗаправкиЗначение = Перечисления.уатВидыДвиженияГСМ.ЗаправкаНаличные) Тогда
				
				ТекстНСТР = НСтр("en='You should select main gas station - counterparty!';ru='Должна быть выбрана основная АЗС - контрагент!'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
				Если ТипЗнч(ВеткаДерева) = Тип("ДеревоЗначений") Тогда
					ВеткаДерева = Неопределено;
					ТекДеревоПрав = Неопределено;
				КонецЕсли;
				Возврат Ложь;
			КонецЕсли;						
		КонецЕсли;
	КонецЕсли; 
	
	// проверим что настройка СкладДляПеремещенияГСМ это не группа справочника
	нсСкладЗначение = НайтиОтмеченноеЗначениеВДеревеЗначений(ПланыВидовХарактеристик.уатПраваИНастройки.СкладДляПеремещенияГСМ);	
	Если ЗначениеЗаполнено(нсСкладЗначение) И нсСкладЗначение.ЭтоГруппа Тогда
		ТекстНСТР = НСтр("en='In setting ""SYSTEM SETTINGS / Fuels / Warehouse for movement of fuels"" must be specified element of catalog!';ru='В настройке ""ПАРАМЕТРЫ СИСТЕМЫ / ГСМ / Склад для перемещения ГСМ"" должен быть указан элемент справочника!'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		Если ТипЗнч(ВеткаДерева) = Тип("ДеревоЗначений") Тогда
			ВеткаДерева = Неопределено;
			ТекДеревоПрав = Неопределено;
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли; 
	
	// Проверим, что если при заполнении номенклатуры при создании работы по ремонту ТС выбран вариант "Заполнять общую",
	// то обязательно заполнена сама общая номенклатура и это обязательно должна быть услуга, а не товар. 
	ТекРежимЗаполненияНоменклатуры = НайтиОтмеченноеЗначениеВДеревеЗначений(ПланыВидовХарактеристик.уатПраваИНастройки.ЗаполнениеНоменклатурыПриСозданииРаботПоРемонтуТС);
	Если ТекРежимЗаполненияНоменклатуры = Перечисления.уатЗаполнениеНоменклатурыПриСозданииРаботПоРемонту.ЗаполнятьОбщую Тогда
		ОбщаяНоменклатураЗначение = НайтиОтмеченноеЗначениеВДеревеЗначений(ПланыВидовХарактеристик.уатПраваИНастройки.ОбщаяНоменклатураДляЗаполненияРаботПоРемонтуТС);
		Если Не ЗначениеЗаполнено(ОбщаяНоменклатураЗначение) Или ОбщаяНоменклатураЗначение.ВидНоменклатуры <> Справочники.ВидыНоменклатуры.Услуга Тогда
			ТекстНСТР = НСтр("en='In setting ""SYSTEM SETTINGS / Repairs / General nomenclature for completing vehicle repair works"" an item with the type of service must be selected!';ru='В настройке ""ПАРАМЕТРЫ СИСТЕМЫ / РЕМОНТЫ / Общая номенклатура для заполнения работ по ремонту ТС"" должен быть указан элемент справочника с видом номенклатуры ""Услуга""!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
			Если ТипЗнч(ВеткаДерева) = Тип("ДеревоЗначений") Тогда
				ВеткаДерева = Неопределено;
				ТекДеревоПрав = Неопределено;
			КонецЕсли;
			Возврат Ложь;	
		КонецЕсли;
	КонецЕсли;
	
	// Проверим, что если при заполнении номенклатуры при создании работы по ремонту ТС выбран вариант "Создавать",
	// то обязательно заполнена сама группа справочника "Номенклатура", в которой будем создавать новый элемент 
	// и это обязательно должна быть группа справочника, а не элемент.
	Если ТекРежимЗаполненияНоменклатуры = Перечисления.уатЗаполнениеНоменклатурыПриСозданииРаботПоРемонту.Создавать Тогда
		ГруппаНоменклатурыЗначение = НайтиОтмеченноеЗначениеВДеревеЗначений(ПланыВидовХарактеристик.уатПраваИНастройки.ГруппаНоменклатурыДляРаботПоРемонтуТС);
		Если Не ЗначениеЗаполнено(ГруппаНоменклатурыЗначение) Или Не ГруппаНоменклатурыЗначение.ЭтоГруппа Тогда
			ТекстНСТР = НСтр("en='In setting ""SYSTEM SETTINGS / Repairs / Item group for vehicle repair work"" directory group must be selected!';ru='В настройке ""ПАРАМЕТРЫ СИСТЕМЫ / РЕМОНТЫ / Группа номенклатуры для работ по ремонту ТС"" должна быть выбрана группа справочника ""Номенклатура""!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
			Если ТипЗнч(ВеткаДерева) = Тип("ДеревоЗначений") Тогда
				ВеткаДерева = Неопределено;
				ТекДеревоПрав = Неопределено;
			КонецЕсли;
			Возврат Ложь;	
		КонецЕсли;
	КонецЕсли;
		
	// каждую ветку будем обходить в попытке, по причине возможного отказа записи
	Попытка
		Для каждого Строка Из ВеткаДерева.Строки Цикл
			Если Строка.Группа Тогда
				Если НЕ ЗаписатьПраваИНастройкиСервер(Строка, ТекДеревоПрав, флИзмененыПраваИНастройки) Тогда
					Возврат Ложь;
				КонецЕсли;
			ИначеЕсли Строка.Изменено Тогда
				Рег=РегистрыСведений.уатПраваИНастройки.СоздатьМенеджерЗаписи();
				Если ТипЗнч(ОбъектНастройкиПрав) = Тип("СправочникСсылка.Пользователи") Или ТипЗнч(ОбъектНастройкиПрав) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда
					Рег.Объект = ОбъектНастройкиПрав;
				Иначе
					Рег.Объект = ОбъектНастройкиПрав;
				КонецЕсли;
				Рег.ПравоНастройка = Строка.ПравоНастройка;
				Рег.Значение = Строка.Значение;
				Рег.Записать();
				Строка.Изменено = Ложь;
				флИзмененыПраваИНастройки = Истина;
			КонецЕсли; 
		КонецЦикла; 
		
		// В случае исключения вернем Ложь - запись не удалась
	Исключение
		Если ТипЗнч(ВеткаДерева) = Тип("ДеревоЗначений") Тогда
			ВеткаДерева = Неопределено;
			ТекДеревоПрав = Неопределено;
		КонецЕсли;
		
		Возврат Ложь;
	КонецПопытки;
	
	Если ТипЗнч(ВеткаДерева) = Тип("ДеревоЗначений") Тогда  // необходимо ввиду рекурсивности вызова
		// Сохранение настройки доступности документов и справочников в регистр сведений.
		Попытка
			Отбор = Новый Структура;
			Отбор.Вставить("Пользователь", ОбъектНастройкиПрав);
			
			ТабДоступностиСправочников_ = РеквизитФормыВЗначение("ТабДоступностиСправочников");
			
			ТекСтроки = ТабДоступностиСправочников_.НайтиСтроки(Отбор);
			Для Каждого ТекСтрока из ТекСтроки Цикл    
				Если ТекСтрока.Изменено Тогда
					Рег = РегистрыСведений.уатДоступКСправочникам.СоздатьМенеджерЗаписи();
					Рег.Пользователь = ОбъектНастройкиПрав;
					Рег.Право = ТекСтрока.Право;
					Рег.Объект = ТекСтрока.Объект;
					Рег.ДоступЕсть = ТекСтрока.Доступность;
					Рег.Записать();
					ТекСтрока.Изменено = Ложь;	
					флИзмененыПраваИНастройки = Истина;
				КонецЕсли;
			КонецЦикла;
			ЗначениеВРеквизитФормы(ТабДоступностиСправочников_, "ТабДоступностиСправочников");
			
			ТабДоступностиДокументов_ = РеквизитФормыВЗначение("ТабДоступностиДокументов");
			
			ТекСтроки = ТабДоступностиДокументов_.НайтиСтроки(Отбор);
			Для Каждого ТекСтрока из ТекСтроки Цикл
				Если ТекСтрока.Изменено Тогда
					Рег = РегистрыСведений.уатДоступКДокументам.СоздатьМенеджерЗаписи();
					Рег.Пользователь = ОбъектНастройкиПрав;
					Рег.Право = ТекСтрока.Право;
					Рег.Объект = ТекСтрока.Объект;
					Рег.ДоступЕсть = ТекСтрока.Доступность;
					Рег.Записать();
					ТекСтрока.Изменено = Ложь;	
					флИзмененыПраваИНастройки = Истина;
				КонецЕсли;
			КонецЦикла;
			
			ЗначениеВРеквизитФормы(ТабДоступностиДокументов_, "ТабДоступностиДокументов");
		Исключение Возврат Ложь;
		КонецПопытки;
		
		ВеткаДерева = Неопределено;
		ТекДеревоПрав = Неопределено;
	КонецЕсли;
	
	Возврат Истина;
КонецФункции

// Получение иерархической структуры ПВХ Права и настройки в результат запроса
&НаСервере
Процедура ПолучитьИерархиюПрав()
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ПланВидовХарактеристикПраваИНастройки.Ссылка,
	|	ПланВидовХарактеристикПраваИНастройки.Код КАК Код,
	|	ПланВидовХарактеристикПраваИНастройки.Наименование,
	|	ПланВидовХарактеристикПраваИНастройки.ЭтоГруппа,
	|	ПланВидовХарактеристикПраваИНастройки.ТипЗначения,
	|	ПланВидовХарактеристикПраваИНастройки.Назначение,
	|	ПланВидовХарактеристикПраваИНастройки.ЭтоНастройка,
	|	ПланВидовХарактеристикПраваИНастройки.Родитель,
	|	ПланВидовХарактеристикПраваИНастройки.ЗначениеПоУмолчанию,
	|	ПланВидовХарактеристикПраваИНастройки.НастройкаОрганизации,
	|	ПланВидовХарактеристикПраваИНастройки.НастройкаКомпании,
	|	ПланВидовХарактеристикПраваИНастройки.НастройкаПодразделения,
	|	ПланВидовХарактеристикПраваИНастройки.НастройкаПользователя
	|ИЗ
	|	ПланВидовХарактеристик.уатПраваИНастройки КАК ПланВидовХарактеристикПраваИНастройки
	|ГДЕ
	|	(НЕ ПланВидовХарактеристикПраваИНастройки.ПометкаУдаления)
	|	И (НЕ ПланВидовХарактеристикПраваИНастройки.Наименование ПОДОБНО ""%(не используется)%"")
	|
	|УПОРЯДОЧИТЬ ПО
	|	Код ИЕРАРХИЯ";
	
	Запрос = Новый Запрос;
	Запрос.Текст = ТекстЗапроса;
	Рез = Запрос.Выполнить().Выгрузить(ОбходРезультатаЗапроса.ПоГруппировкамСИерархией);
	
	// удалим из дерева права доступа для несуществующих спр. и док.
	ПраваДоступаСправочников = Рез.Строки.Найти(ПланыВидовХарактеристик.уатПраваИНастройки.ПраваДоступаСправочников, "Ссылка", Истина);
	Если ПраваДоступаСправочников <> Неопределено Тогда
		мсвСтрокДляУдаления = Новый Массив;
		Для Каждого ТекСтрока Из ПраваДоступаСправочников.Строки Цикл
			Если Найти(ТекСтрока.Наименование, НСтр("en='Access right';ru='Право доступа'")) <> 0 Тогда
				Если Метаданные.Справочники.Найти(СокрЛП(Сред(ТекСтрока.Наименование, мДлинаПрефиксаПрава))) = Неопределено Тогда
					мсвСтрокДляУдаления.Добавить(ТекСтрока);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Для Каждого ТекСтрокаУдаления Из мсвСтрокДляУдаления Цикл
			ПраваДоступаСправочников.Строки.Удалить(ТекСтрокаУдаления);
		КонецЦикла;
	КонецЕсли;
	ПраваДоступаДокументов = Рез.Строки.Найти(ПланыВидовХарактеристик.уатПраваИНастройки.ПраваДоступаДокументов, "Ссылка", Истина);
	Если ПраваДоступаДокументов <> Неопределено Тогда
		мсвСтрокДляУдаления = Новый Массив;
		Для Каждого ТекСтрока Из ПраваДоступаДокументов.Строки Цикл
			Если Найти(ТекСтрока.Наименование,НСтр("en='Access right';ru='Право доступа'")) <> 0 Тогда
				Если Метаданные.Документы.Найти(СокрЛП(Сред(ТекСтрока.Наименование, мДлинаПрефиксаПрава))) = Неопределено Тогда
					мсвСтрокДляУдаления.Добавить(ТекСтрока);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		Для Каждого ТекСтрокаУдаления Из мсвСтрокДляУдаления Цикл
			ПраваДоступаДокументов.Строки.Удалить(ТекСтрокаУдаления);
		КонецЦикла;
	КонецЕсли;
	
	ЗначениеВРеквизитФормы(Рез, "ЗапросПравИНастроек")
КонецПроцедуры

// Получение настройки доступности справочников из результат запроса
&НаСервере
Процедура ПолучитьДоступностьСправочников()
	Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоступКСправочникам.Пользователь,
	|	ДоступКСправочникам.Объект,
	|	ДоступКСправочникам.Право,
	|	ДоступКСправочникам.ДоступЕсть КАК Доступность,
	|	ЛОЖЬ КАК Изменено
	|ИЗ
	|	РегистрСведений.уатДоступКСправочникам КАК ДоступКСправочникам";
	Запрос = Новый Запрос;
	Запрос.Текст = Текст;
	Рез = Запрос.Выполнить().Выгрузить();
	
	ЗначениеВРеквизитФормы(Рез, "ТабДоступностиСправочников");
КонецПроцедуры

// Получение настройки доступности документов из результат запроса
&НаСервере
Процедура ПолучитьДоступностьДокументов()
	Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ДоступКДокументам.Пользователь,
	|	ДоступКДокументам.Объект,
	|	ДоступКДокументам.Право,
	|	ДоступКДокументам.ДоступЕсть КАК Доступность,
	|	ВЫБОР
	|		КОГДА ДоступКДокументам.Объект ССЫЛКА Справочник.Пользователи
	|			ТОГДА ""Пользователи""
	|	КОНЕЦ КАК ВидОбъекта,
	|	ЛОЖЬ КАК Изменено
	|ИЗ
	|	РегистрСведений.уатДоступКДокументам КАК ДоступКДокументам";
	Запрос = Новый Запрос;
	Запрос.Текст = Текст;
	Рез = Запрос.Выполнить().Выгрузить();
	
	ЗначениеВРеквизитФормы(Рез, "ТабДоступностиДокументов");
КонецПроцедуры

// Формирование иерархии
&НаСервере
Процедура ПостроениеВеткиДереваПрав(ВыборкаРодитель, СтрокиРодитель, Уровень = 0, СтруктураТекущихПрав)
	Для Каждого Выборка Из ВыборкаРодитель.Строки Цикл
		// Проверим, надо ли выводить эту строчку выборки
		Если Выборка.Уровень() <> Уровень 
			ИЛИ НЕ Выборка.ЭтоГруппа И ((Выборка.ЭтоНастройка И НЕ ОтображатьНастройки)
			ИЛИ (НЕ Выборка.ЭтоНастройка И НЕ ОтображатьПрава)
			ИЛИ (ТипОбъектаНастройки = Перечисления.уатНазначениеПравИНастроек.Компания      И НЕ Выборка.НастройкаКомпании)
			ИЛИ (ТипОбъектаНастройки = Перечисления.уатНазначениеПравИНастроек.Организация   И НЕ Выборка.НастройкаОрганизации)
			ИЛИ (ТипОбъектаНастройки = Перечисления.уатНазначениеПравИНастроек.Подразделение И НЕ Выборка.НастройкаПодразделения)
			ИЛИ (ТипОбъектаНастройки = Перечисления.уатНазначениеПравИНастроек.Пользователь  И НЕ Выборка.НастройкаПользователя)
			ИЛИ (Выборка.Ссылка = ПланыВидовХарактеристик.уатПраваИНастройки.КонтрольЗакрепленияОбъемовЗаПеревозчиками 
			И (уатОбщегоНазначенияПовтИсп.ВариантПоставкиПРОФ() Или Не ПолучитьФункциональнуюОпцию("уатИспользоватьЗакреплениеМаршрутныхЛистовЗаПеревозчиками_уэ")))) Тогда
			Продолжить;
		КонецЕсли;
		
		// Удалим неиспользуемые настройки
		Если уатПраваИНастройки.НеОтображатьПравоНастройку(Выборка) Тогда
			Продолжить;
		КонецЕсли;
		
		// Добавим строку и заполним её параметры
		Строка = СтрокиРодитель.Добавить();
		Строка.ПравоНастройка = Выборка.Ссылка;
		Строка.Код = Выборка.Код;
		Строка.Назначение = Выборка.Назначение;
		Строка.ЭтоНастройка = Выборка.ЭтоНастройка;
		Строка.Группа = Выборка.ЭтоГруппа;
		Строка.Изменено = Ложь;
		Строка.ПоУмолчанию = Выборка.ЗначениеПоУмолчанию;
		Строка.НастройкаКомпании = Выборка.НастройкаКомпании;
		Строка.НастройкаОрганизации = Выборка.НастройкаОрганизации;
		Строка.НастройкаПодразделения = Выборка.НастройкаПодразделения;
		Строка.НастройкаПользователя = Выборка.НастройкаПользователя;
		
		// Проверим, если это группа, пойдем на следующий уровень рекурсией
		Если Строка.Группа Тогда
			Строка.КартинкаЭлемента = 1;
			ПостроениеВеткиДереваПрав(Выборка, Строка.Строки, 1 + Выборка.Уровень(), СтруктураТекущихПрав);
			// Для группы ни значения ни типа не бывает
		Иначе 
			// Сначала проверим число типов, так как поддерживается строго только один
			МассивТипов = Выборка.ТипЗначения.Типы();
			Если МассивТипов.Количество() = 1 Тогда
				// Определимся с типом значения
				Строка.Тип = МассивТипов[0]; // Тут только один, составные не поддерживаем
				Если Строка.Тип = Тип("Булево") Тогда
					Строка.ЗначениеБулево = уатПраваИНастройки.уатПраво(Строка.ПравоНастройка, СтруктураТекущихПрав);
					Строка.Значение = Строка.ЗначениеБулево;
				Иначе
					Строка.ЗначениеБулево = 2;
					Строка.Значение = уатПраваИНастройки.уатПраво(Строка.ПравоНастройка, СтруктураТекущихПрав);
				КонецЕсли; 
				
			Иначе // Умудрились создать элемент с несколькими типами или вовсе без них
				// Проверка на составной тип сотрудников
				Если Строка.ПравоНастройка = ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.МедработникВыезд")
					ИЛИ Строка.ПравоНастройка = ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.МедработникВозврат")
					ИЛИ Строка.ПравоНастройка = ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ВыдалДиспетчер")
					ИЛИ Строка.ПравоНастройка = ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ПринялДиспетчер")
					ИЛИ Строка.ПравоНастройка = ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ВыпустилМеханик")
					ИЛИ Строка.ПравоНастройка = ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ПринялМеханик")
					ИЛИ Строка.ПравоНастройка = ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.УполномоченныйНаПроставлениеОдометраПриВыезде")
					ИЛИ Строка.ПравоНастройка = ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.УполномоченныйНаПроставлениеОдометраПриВозврате") Тогда
					
					Если Строка.ПравоНастройка = ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ВыдалДиспетчер")
						ИЛИ Строка.ПравоНастройка = ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ПринялДиспетчер") Тогда
						Строка.Тип = Тип("СправочникСсылка.Сотрудники");
					КонецЕсли;  
					
					Строка.ЗначениеБулево = 2;
					Строка.Значение       = уатПраваИНастройки.уатПраво(Строка.ПравоНастройка, СтруктураТекущихПрав);
				Иначе
					Строка.ЗначениеБулево = 2;
					Строка.Значение = НСтр("en='Error in specified types - must be one type!';ru='Ошибка в заданных типах - должен быть один тип!'");
				КонецЕсли;
			КонецЕсли;
			// Теперь определим доступность и картинку
			Если (ТипОбъектаНастройки = Перечисления.уатНазначениеПравИНастроек.Компания И  НЕ Строка.НастройкаКомпании) 
				ИЛИ (ТипОбъектаНастройки = Перечисления.уатНазначениеПравИНастроек.Организация И  НЕ Строка.НастройкаОрганизации) 
				ИЛИ (ТипОбъектаНастройки = Перечисления.уатНазначениеПравИНастроек.Подразделение И  НЕ Строка.НастройкаПодразделения) 
				ИЛИ (ТипОбъектаНастройки = Перечисления.уатНазначениеПравИНастроек.Пользователь  И  НЕ Строка.НастройкаПользователя) Тогда
				
				Строка.КартинкаЭлемента = 0;
			ИначеЕсли Строка.ЭтоНастройка Тогда
				Строка.КартинкаЭлемента = 2;
			Иначе
				Строка.КартинкаЭлемента = 0;
			КонецЕсли; 
		КонецЕсли;
		
		Если Строка.Группа И Строка.Строки.Количество() = 0 Тогда
			СтрокиРодитель.Удалить(Строка);
			Продолжить;
		КонецЕсли;
		
		Строка.ТипБулево = (Строка.Тип = Тип("Булево"));
		Строка.ТипВремя = (Выборка.ТипЗначения = Новый ОписаниеТипов("Дата",,,Новый КвалификаторыДаты(ЧастиДаты.Время)));
		
		Если (Строка.Значение = Перечисления.уатВидыПравДляДокументов.РедактированиеПоПользователям
			ИЛИ Строка.Значение = Перечисления.уатВидыПравДляСправочников.РедактированиеПоГруппам) Тогда
			
			Строка.ПравоДоступаРедактированиеПоПользователям = Истина;
		КонецЕсли;
		
		Если (ТипОбъектаНастройки = ПредопределенноеЗначение("Перечисление.уатНазначениеПравИНастроек.Компания") И НЕ Строка.НастройкаКомпании = NULL И НЕ Строка.НастройкаКомпании)
			ИЛИ (ТипОбъектаНастройки = ПредопределенноеЗначение("Перечисление.уатНазначениеПравИНастроек.Организация") И уатОбщегоНазначения.уатЗначениеНеЗаполнено(ОбъектНастройкиПрав) И НЕ Строка.НастройкаОрганизации = NULL И Строка.НастройкаОрганизации)
			ИЛИ (ТипОбъектаНастройки = ПредопределенноеЗначение("Перечисление.уатНазначениеПравИНастроек.Подразделение") И уатОбщегоНазначения.уатЗначениеНеЗаполнено(ОбъектНастройкиПрав) И НЕ Строка.НастройкаПодразделения = NULL И Строка.НастройкаПодразделения)
			ИЛИ (ТипОбъектаНастройки = ПредопределенноеЗначение("Перечисление.уатНазначениеПравИНастроек.Пользователь") И уатОбщегоНазначения.уатЗначениеНеЗаполнено(ОбъектНастройкиПрав) И НЕ Строка.НастройкаПользователя = NULL И Строка.НастройкаПользователя)
			Тогда
			
			Строка.ТолькоПросмотр = Истина;
			
		ИначеЕсли Строка.ПравоНастройка = ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.РазрешитьИзменениеЛичныхНастроек") И ТекущийПользователь = ОбъектНастройкиПрав Тогда
			Строка.ТолькоПросмотр = Истина;
		ИначеЕсли Строка.Правонастройка = ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ПодсказкаСогласованиеДокументов") Тогда
			// Данная настройка служит в качестве подсказеи, установка значений по ней не предполагается
			Строка.ТолькоПросмотр = Истина;
		КонецЕсли;
		
	КонецЦикла; 
КонецПроцедуры

// Процедура формирует структуру прав объекта в виде дерева
//
&НаКлиенте
Процедура ФормированиеДереваПравОбъекта()
	ТекстНСТР = НСтр("en='Formation of tree of rights and settings ... ';ru='Формирование дерева прав и настроек ... '");
	Состояние(ТекстНСТР);
	ФормированиеДереваПравОбъектаСервер();
	РазвернутьДеревоПравПоУмолчанию(ДеревоПрав);
	ПроставитьПризнакЗначениеРавноДефолтному(ДеревоПрав);
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьДеревоПравПоУмолчанию(ВеткаДерева)
	Для Каждого ТекСтрока Из ВеткаДерева.ПолучитьЭлементы() Цикл
		Если НЕ ТекСтрока.Группа
			ИЛИ ТекСтрока.ПравоНастройка = ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ПраваДоступаСправочников")
			ИЛИ ТекСтрока.ПравоНастройка = ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.ПраваДоступаДокументов") Тогда
			
			Продолжить;
		КонецЕсли;
		
		Элементы.ДеревоПрав.Развернуть(ТекСтрока.ПолучитьИдентификатор());
		РазвернутьДеревоПравПоУмолчанию(ТекСтрока);
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ФормированиеДереваПравОбъектаСервер()
	// Получим соответствие прав и настроек выбранного объекта в реквизит СтруктураТекущихПрав
	СтруктураТекущихПрав = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ОбъектНастройкиПрав);
	
	// Все запросы к БД сделаны, далее просто отобразим данные в соответствии с фильтрами
	ДеревоПравСервер = РеквизитФормыВЗначение("ДеревоПрав");
	
	ДеревоПравСервер.Строки.Очистить();
	Если НЕ (ОтображатьПрава ИЛИ ОтображатьНастройки) Тогда
		// Хотя бы один флаг должен быть включен.
		ОтображатьНастройки = Истина;
	КонецЕсли;
	
	ЗапросПравИНастроекСервер = РеквизитФормыВЗначение("ЗапросПравИНастроек");
	ПостроениеВеткиДереваПрав(ЗапросПравИНастроекСервер, ДеревоПравСервер.Строки, 0, СтруктураТекущихПрав);
	
	ЗначениеВРеквизитФормы(ДеревоПравСервер, "ДеревоПрав");
КонецПроцедуры

&НаКлиенте
Процедура ПроставитьПризнакЗначениеРавноДефолтному(ВеткаДерева);
	Для Каждого Текстрока Из ВеткаДерева.ПолучитьЭлементы() Цикл
		флРавно = (Текстрока.Значение = Текстрока.ПоУмолчанию);
		Если ТекСтрока.ЗначениеРавноДефолтному <> флРавно Тогда
			ТекСтрока.ЗначениеРавноДефолтному = флРавно;
		КонецЕсли;
		ПроставитьПризнакЗначениеРавноДефолтному(Текстрока);
	КонецЦикла;
КонецПроцедуры

// Рекурсивная функция для сворачивания групп включая вложенные
&НаКлиенте
Процедура СвернутьСтрокиДерева(ТекСтрокаДерева)
	Для каждого ТекСтрока из ТекСтрокаДерева.ПолучитьЭлементы() Цикл
		Элементы.ДеревоПрав.Свернуть(ТекСтрока.ПолучитьИдентификатор())
	КонецЦикла;
КонецПроцедуры

// Удаляет все записи из регистра ДоступКСправочникам или ДоступКДокументам
// и из таблиц ТабДоступностиСправочников или ТабДоступностиДокументов
// по реквизиту ОбъектНастройкиПрав и текущему значению ПравоНастройка  
&НаКлиенте
Процедура УдалитьТекущиеДоступности()
	ТекущаяСтрока = ДеревоПрав.НайтиПоИдентификатору(Элементы.ДеревоПрав.ТекущаяСтрока);
	УдалитьТекущиеДоступностиСервер(ТекущаяСтрока.ПравоНастройка, ТекущаяСтрока.Значение);
КонецПроцедуры

&НаСервере
Процедура УдалитьТекущиеДоступностиСервер(ПравоНастройка, ЗначениеПрава)
	Отбор = Новый Структура;
	Отбор.Вставить("Пользователь", ОбъектНастройкиПрав);
	Отбор.Вставить("Право", ПравоНастройка);
	
	Если ТипЗнч(ЗначениеПрава) = Тип("ПеречислениеСсылка.уатВидыПравДляСправочников") Тогда	
		СтрокиПоиска = ТабДоступностиСправочников.НайтиСтроки(Отбор);
		Для Каждого ТекСтрока из СтрокиПоиска Цикл
			ТабДоступностиСправочников.Удалить(ТекСтрока);
		КонецЦикла;
		Рег = РегистрыСведений.уатДоступКСправочникам.СоздатьНаборЗаписей();
		
	ИначеЕсли ТипЗнч(ЗначениеПрава) = Тип("ПеречислениеСсылка.уатВидыПравДляДокументов") Тогда	
		СтрокиПоиска = ТабДоступностиДокументов.НайтиСтроки(Отбор);
		Для Каждого ТекСтрока из СтрокиПоиска Цикл
			ТабДоступностиДокументов.Удалить(ТекСтрока);
		КонецЦикла;
		Рег = РегистрыСведений.уатДоступКДокументам.СоздатьНаборЗаписей();
		
	КонецЕсли;	
	
	Рег.Отбор.Пользователь.Значение = ОбъектНастройкиПрав;
	Рег.Отбор.Пользователь.Использование = Истина;
	Рег.Отбор.Право.Значение = ПравоНастройка;
	Рег.Отбор.Право.Использование = Истина;
	//Рег.Прочитать();
	//Рег.Очистить();
	Рег.Записать();
КонецПроцедуры

// Устанавливает или убирает значение Истина в колонке доступность для всех
// строк таблицы ДоступностиОбъектов
&НаКлиенте
Процедура УстановкаФлаговДоступностиОбъектов(ЗначениеДоступности)
	Для Каждого Стр из ТаблицаДоступностиОбъектов Цикл
		Если Стр.Доступность <> ЗначениеДоступности Тогда
			Стр.Доступность = ЗначениеДоступности;
			Стр.Изменено = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Модифицированность = Истина;
КонецПроцедуры	

// При активных страничках "Справочники" или "Документы" панели1 
// будут переписаны отображаемые записи в ТабДоступностиСправочников или 
// ТабДоступностиДокументов
&НаКлиенте
Процедура ПерезаписатьСтраницы()
	Если ВидОбъектаНастройкиПрав = "Справочники" Тогда
		ПереписатьТабДоступностиСправочников();
	ИначеЕсли ВидОбъектаНастройкиПрав ="Документы" Тогда
		ПереписатьТабДоступностиДокументов();
	КонецЕсли;
КонецПроцедуры

// При смене страничек изменяет доступности элементов формы
&НаКлиенте
Процедура ДоступностьНастроекИПараметров(Доступность)
	Доступность = ?(ДостПрава, Доступность, Ложь);
	Элементы.ТипОбъектаНастройки.Доступность = Доступность;
	Элементы.ОтображатьНастройки.Доступность = Доступность;
	Элементы.ОтображатьПрава.Доступность = Доступность;
КонецПроцедуры

// Заполняет строки таблицы доступности справочников из таблицы ТабДоступностиСправочников
&НаКлиенте
Процедура ЗаполнитьТаблицуДоступностейОбъектов(ВыбраннаяСтрока)
	
	ТаблицаДоступностиОбъектов.Очистить();	
	Отбор = Новый Структура;
	Отбор.Вставить("Пользователь", ОбъектНастройкиПрав);
	Отбор.Вставить("Право", ВыбраннаяСтрока.ПравоНастройка);
	Если ВидОбъектаНастройкиПрав = "Справочники" Тогда
		СтрокиПоиска = ТабДоступностиСправочников.НайтиСтроки(Отбор);
		
		Для Каждого ТекСтрока из СтрокиПоиска Цикл
			НоваяСтрока = ТаблицаДоступностиОбъектов.Добавить();
			НоваяСтрока.Пользователь = ТекСтрока.Пользователь;
			НоваяСтрока.Право = ТекСтрока.Право;
			НоваяСтрока.Изменено = ТекСтрока.Изменено;
			НоваяСтрока.Объект = ТекСтрока.Объект;
			НоваяСтрока.Доступность = ТекСтрока.Доступность;
			НоваяСтрока.Инд = ТабДоступностиСправочников.Индекс(ТекСтрока);
		КонецЦикла;
		
	ИначеЕсли ВидОбъектаНастройкиПрав = "Документы" Тогда
		Если ВыбраннаяСтрока.Значение = ПредопределенноеЗначение("Перечисление.уатВидыПравДляДокументов.РедактированиеПоПользователям") Тогда
			Отбор.Вставить("ВидОбъекта", "Пользователи");
		КонецЕсли;
		
		СтрокиПоиска = ТабДоступностиДокументов.НайтиСтроки(Отбор);
		Для Каждого ТекСтрока из СтрокиПоиска Цикл
			НоваяСтрока = ТаблицаДоступностиОбъектов.Добавить();
			НоваяСтрока.Объект = ТекСтрока.Объект;
			НоваяСтрока.Право = ТекСтрока.Право;
			НоваяСтрока.Пользователь = ТекСтрока.Пользователь;
			НоваяСтрока.Изменено = ТекСтрока.Изменено;
			НоваяСтрока.Доступность = ТекСтрока.Доступность;
			НоваяСтрока.Инд = ТабДоступностиДокументов.Индекс(ТекСтрока);
		КонецЦикла;	
	КонецЕсли;
КонецПроцедуры

// Заполняет строки таблицы ТабДоступностиСправочников из таблицы доступности справочников
&НаКлиенте
Процедура ПереписатьТабДоступностиСправочников()
	КоличествоСтрок = ТабДоступностиСправочников.Количество();
	Для каждого ТекСтрока Из ТаблицаДоступностиОбъектов Цикл
		Если не ТекСтрока.Изменено Тогда
			Продолжить;
		КонецЕсли;
		// проверка переписываемой строки имеется ли она в ТабДоступностиСправочников
		Если ТекСтрока.Инд < КоличествоСтрок Тогда
			ТабДоступностиСправочников[ТекСтрока.Инд].Пользователь  =ТекСтрока.Пользователь;
			ТабДоступностиСправочников[ТекСтрока.Инд].Право = ТекСтрока.Право;
			ТабДоступностиСправочников[ТекСтрока.Инд].Объект = ТекСтрока.Объект;
			ТабДоступностиСправочников[ТекСтрока.Инд].Доступность = ТекСтрока.Доступность;
			ТабДоступностиСправочников[ТекСтрока.Инд].Изменено = Истина;
			ТекСтрока.Изменено=Ложь;
		Иначе
			НоваяСтрока = ТабДоступностиСправочников.Добавить();
			НоваяСтрока.Пользователь = ТекСтрока.Пользователь;
			НоваяСтрока.Право = ТекСтрока.Право;
			НоваяСтрока.Объект = ТекСтрока.Объект;
			НоваяСтрока.Доступность = ТекСтрока.Доступность;
			НоваяСтрока.Изменено = Истина;
			ТекСтрока.Изменено = Ложь;
		КонецЕсли;              
	КонецЦикла; 
КонецПроцедуры

// Заполняет строки таблицы ТабДоступностиДокументов из таблицы доступности документов
&НаКлиенте
Процедура ПереписатьТабДоступностиДокументов()
	КоличествоСтрок = ТабДоступностиДокументов.Количество();
	
	Для Каждого ТекСтрока Из ТаблицаДоступностиОбъектов Цикл
		Если Не ТекСтрока.Изменено Тогда
			Продолжить;
		КонецЕсли;
		
		Если ТекСтрока.Инд < КоличествоСтрок Тогда
			ТабДоступностиДокументов[ТекСтрока.Инд].Пользователь = ТекСтрока.Пользователь;
			ТабДоступностиДокументов[ТекСтрока.Инд].Право = ТекСтрока.Право;
			ТабДоступностиДокументов[ТекСтрока.Инд].Объект = ТекСтрока.Объект;
			ТабДоступностиДокументов[ТекСтрока.Инд].Изменено = Истина;
			ТабДоступностиДокументов[ТекСтрока.Инд].Доступность = ТекСтрока.Доступность;
			Если ТипЗнч(ТекСтрока.Объект) = Тип("СправочникСсылка.Пользователи") Или ТипЗнч(ТекСтрока.Объект) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда
				ТабДоступностиДокументов[ТекСтрока.Инд].ВидОбъекта = "Пользователи";
			КонецЕсли;                                              
			ТекСтрока.Изменено = Ложь;
		Иначе
			НоваяСтрока = ТабДоступностиДокументов.Добавить();
			НоваяСтрока.Пользователь=ТекСтрока.Пользователь;
			НоваяСтрока.Право = ТекСтрока.Право;
			НоваяСтрока.Объект = ТекСтрока.Объект;
			НоваяСтрока.Изменено = Истина;
			НоваяСтрока.Доступность = ТекСтрока.Доступность;
			Если ТипЗнч(ТекСтрока.Объект) = Тип("СправочникСсылка.Пользователи") Или ТипЗнч(ТекСтрока.Объект) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда
				НоваяСтрока.ВидОбъекта = "Пользователи";
			КонецЕсли;
			ТекСтрока.Изменено = Ложь;
		КонецЕсли;
	КонецЦикла; 
КонецПроцедуры

// Запрос пользователя о сохранении изменений
&НаКлиенте
Процедура ЗапросСохраненияИзменений(Знач Оповещение)
	// При изменении выбранного объекта надо произвести запись внесенных изменений
	Если Модифицированность Тогда
		Результат = Неопределено;

		ПоказатьВопрос(Новый ОписаниеОповещения("ЗапросСохраненияИзмененийЗавершение", ЭтотОбъект, Новый Структура("Оповещение", Оповещение)), "Данные были изменены. Произвести запись?", РежимДиалогаВопрос.ДаНетОтмена);
        Возврат; 
	КонецЕсли; 
	ЗапросСохраненияИзмененийФрагмент(Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ЗапросСохраненияИзмененийЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Оповещение = ДополнительныеПараметры.Оповещение;
    
    
    Результат = РезультатВопроса;
    Если Результат = КодВозвратаДиалога.Да Тогда
        ПерезаписатьСтраницы();
        Если НЕ ЗаписатьПраваИНастройки() Тогда
            ВыполнитьОбработкуОповещения(Оповещение, Ложь);
            Возврат;
        КонецЕсли;
        ЗаполнитьТаблицуДоступностейОбъектов(ДеревоПрав.НайтиПоИдентификатору(Элементы.ДеревоПрав.ТекущаяСтрока));
        Модифицированность = Ложь;
    ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
        Модифицированность = Ложь;
    Иначе ВыполнитьОбработкуОповещения(Оповещение, Ложь);
        Возврат;
    КонецЕсли; 
    
    ЗапросСохраненияИзмененийФрагмент(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура ЗапросСохраненияИзмененийФрагмент(Знач Оповещение)
    
    ВыполнитьОбработкуОповещения(Оповещение, Истина);
    Возврат;

КонецПроцедуры

// Устанавливает значение по умолчанию для выбранной строки дерева прав
&НаКлиенте
Процедура УстановитьПравоНастройкуПоУмолчанию(ТекущаяСтрока)
	Если ТекущаяСтрока.Группа Тогда
		Для Каждого Строка Из ТекущаяСтрока.ПолучитьЭлементы() Цикл
			УстановитьПравоНастройкуПоУмолчанию(Строка);
		КонецЦикла;
	КонецЕсли;
	Если ТекущаяСтрока.ТолькоПросмотр ИЛИ ТекущаяСтрока.Группа Тогда
		Возврат;
	КонецЕсли;
	Если  (Не ТекущаяСтрока.Группа) И (Не ТекущаяСтрока.Значение = ТекущаяСтрока.ПоУмолчанию) Тогда
		Разрешено = (ТекущаяСтрока.ЭтоНастройка И ДостНастройки) ИЛИ (НЕ ТекущаяСтрока.ЭтоНастройка И ДостПрава);
		Если Разрешено Тогда
			ТекущаяСтрока.Значение = ТекущаяСтрока.ПоУмолчанию;
			Если ТекущаяСтрока.Тип = Тип("Булево") Тогда
				ТекущаяСтрока.ЗначениеБулево = ТекущаяСтрока.Значение;
			КонецЕсли;
			ТекущаяСтрока.Изменено = Истина;
			Модифицированность = Истина;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

// Установка настроек по умолчанию для выбранного объекта
&НаКлиенте
Процедура УстановитьЗначенияПоУмолчанию(ВеткаДерева)
	Для Каждого Стр Из ВеткаДерева.ПолучитьЭлементы() Цикл
		Если Стр.Группа Тогда
			УстановитьЗначенияПоУмолчанию(Стр);
		Иначе
			Если Стр.Значение <> Стр.ПоУмолчанию Тогда
				Стр.Значение = Стр.ПоУмолчанию;
				Если Стр.Тип = Тип("Булево") Тогда
					Стр.ЗначениеБулево = Стр.Значение;
				КонецЕсли;
				Стр.Изменено = Истина;
				Модифицированность = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтрокуДереваПравПоНастройке(ПравоНастройка, СтрокаДерева = Неопределено)
	Если СтрокаДерева = Неопределено Тогда
		СтрокаДерева = ДеревоПрав;
	КонецЕсли;
	
	Рез = Неопределено;
	
	Для Каждого ТекСтрока Из СтрокаДерева.ПолучитьЭлементы() Цикл
		Если ТекСтрока.ПравоНастройка = ПравоНастройка Тогда
			Рез = ТекСтрока.ПолучитьИдентификатор();
			Прервать;
		КонецЕсли;
		
		Рез = ПолучитьСтрокуДереваПравПоНастройке(ПравоНастройка, ТекСтрока);
	КонецЦикла;
	
	Возврат Рез;
КонецФункции

&НаСервере
Процедура СохранитьНастройки()
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ОтображатьПрава", ОтображатьПрава);
	СтруктураНастроек.Вставить("ОтображатьНастройки", ОтображатьНастройки);
	
	ХранилищеНастроекДанныхФорм.Сохранить(
		"Обработка.уатУстановкаПравИНастроек.Форма", 
		"уатУстановкаПравИНастроек_ПараметрыОтображенияСписка",
		СтруктураНастроек);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройки()
	
	УстановитьПривилегированныйРежим(Истина);
	СтруктураНастроек = ХранилищеНастроекДанныхФорм.Загрузить(
		"Обработка.уатУстановкаПравИНастроек.Форма", 
		"уатУстановкаПравИНастроек_ПараметрыОтображенияСписка");
	
	Если ТипЗнч(СтруктураНастроек) <> Тип("Структура") Тогда
		Возврат;
	КонецЕсли;
	
	СтруктураНастроек.Свойство("ОтображатьПрава", ОтображатьПрава);
	СтруктураНастроек.Свойство("ОтображатьНастройки", ОтображатьНастройки);
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПредставлениеВидаСправочника(ВидСпр)
	Возврат Метаданные.Справочники[ВидСпр].Представление();
КонецФункции

&НаСервереБезКонтекста
Функция ПредставлениеВидаДокумента(ВидДокумента)
	Возврат Метаданные.Документы[ВидДокумента].Представление();
КонецФункции

&НаСервереБезКонтекста
Функция СправочникНеиерархическийИЛИсИерархиейЭлементов(ВидСправочника)
	Рез = (НЕ Метаданные.Справочники[ВидСправочника].Иерархический) ИЛИ (Строка(Метаданные.Справочники[ВидСправочника].ВидИерархии) = "ИерархияЭлементов");
	Возврат Рез;
КонецФункции

&НаКлиенте
Процедура ДобавитьПользователяИлиГруппу(КнопкаИмя, ЗаголовокФормыПодбора)
	Стр = ДеревоПрав.НайтиПоИдентификатору(Элементы.ДеревоПрав.ТекущаяСтрока);
	
	ВидОбъекта = Сред(Стр.ПравоНастройка, мДлинаПрефиксаПрава);
	
	// заполнение флага для подбора без вложенных групп
	ОдиночноеДобавление = Истина;                                      
	
	ПараметрыОткрытия = Новый Структура;
	
	// проверка подбор или обычное добавление
	Если КнопкаИмя = "Добавить" Тогда
		ПараметрыОткрытия.Вставить("ЗакрыватьПриВыборе", Истина);
	Иначе
		Если КнопкаИмя = "ЗаполнитьВыбранныеСВложенными" Тогда
			// заполнение флага для подбора со вложенными группами
			ОдиночноеДобавление = Ложь;
		КонецЕсли;
		ПараметрыОткрытия.Вставить("ЗакрыватьПриВыборе", Ложь);
	КонецЕсли;
	
	// проверка документ или справочник	
	Если Стр.Значение = ПредопределенноеЗначение("Перечисление.уатВидыПравДляСправочников.РедактированиеПоГруппам") Тогда
		ПараметрыОткрытия.Вставить("ВидСправочника", ВидОбъекта);
		ПараметрыОткрытия.Вставить("Заголовок", ЗаголовокФормыПодбора);
		
		ФормаПодбора = ПолучитьФорму("Обработка.уатУстановкаПравИНастроек.Форма.ФормаДереваГруппСправочников", ПараметрыОткрытия, Элементы.ТаблицаДоступностиОбъектов);
		
	ИначеЕсли ВидОбъектаНастройкиПрав = "Документы" Тогда 
		Если Стр.Значение = ПредопределенноеЗначение("Перечисление.уатВидыПравДляДокументов.РедактированиеПоПользователям") Тогда
			Если ТипЗнч(ОбъектНастройкиПрав) = Тип("СправочникСсылка.ВнешниеПользователи") Тогда 
				ФормаПодбора = ПолучитьФорму("Справочник.ВнешниеПользователи.ФормаВыбора", ПараметрыОткрытия, Элементы.ТаблицаДоступностиОбъектов);
			Иначе
				ПараметрыОткрытия.Вставить("РежимВыбора", Истина);
				ПараметрыОткрытия.Вставить("МножественныйВыбор", Ложь);
				ФормаПодбора = ПолучитьФорму("Справочник.Пользователи.ФормаВыбора", ПараметрыОткрытия, Элементы.ТаблицаДоступностиОбъектов);
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
	ФормаПодбора.Открыть();
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УдалитьЗаписьПравоДоступа(Отбор, ТекРег)
	Рег = РегистрыСведений[ТекРег].СоздатьМенеджерЗаписи();
	Рег.Пользователь = Отбор.Пользователь;
	Рег.Право = Отбор.Право;
	Рег.Объект = Отбор.Объект;
	Рег.Удалить();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ОбработкаВыбораПолучитьОбъектыГруппы(ВидСправочника, ВыбГруппа)
	Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	" + ВидСправочника + ".Ссылка КАК Объект
	|ИЗ
	|	Справочник." + ВидСправочника + " КАК " + ВидСправочника + "
	|ГДЕ
	|	" + ВидСправочника + ".ЭтоГруппа = Истина
	| И " + ВидСправочника + ".Ссылка В ИЕРАРХИИ (&ВыбГруппа)";
	
	Запрос = Новый Запрос;
	Запрос.Текст = Текст;
	Запрос.УстановитьПараметр("ВыбГруппа", ВыбГруппа);
	
	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Объект");
КонецФункции

&НаСервереБезКонтекста
Функция ИспользоватьВнешнихПользователей()
	
	УстановитьПривилегированныйРежим(Истина);
	
	ИспользоватьВнешнихПользователей = Константы.ИспользоватьВнешнихПользователей.Получить();
	
	УстановитьПривилегированныйРежим(Ложь);
	
	Возврат ИспользоватьВнешнихПользователей;
	
КонецФункции // ИспользоватьВнешнихПользователей()

&НаСервереБезКонтекста
Процедура ПолучитьСписокПользователейИВнешнихПользователей(Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("СтрокаПодбора", "" + ?(Ожидание=0, "", Текст) + "%");
	
	ТекстЗапроса =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Пользователи.Ссылка КАК Ссылка,
	|	Пользователи.Наименование КАК Наименование
	|ИЗ
	|	Справочник.Пользователи КАК Пользователи
	|ГДЕ
	|	Пользователи.Наименование ПОДОБНО &СтрокаПодбора
	|	И %__ДопПараметрыП__%
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	ВнешниеПользователи.Ссылка,
	|	ВнешниеПользователи.Наименование
	|ИЗ
	|	Справочник.ВнешниеПользователи КАК ВнешниеПользователи
	|ГДЕ
	|	ВнешниеПользователи.Наименование ПОДОБНО &СтрокаПодбора
	|	И %__ДопПараметрыВ__%";
	
	ДопОтборыП = "";
	ДопОтборыВ = "";
	Если ПараметрыПолученияДанных.Свойство("Отбор") И Не ПараметрыПолученияДанных.Отбор = Неопределено Тогда  
		Сч = 1;
		Для Каждого ТекОтбор Из ПараметрыПолученияДанных.Отбор Цикл 
			ДопОтборыП = ДопОтборыП + ?(ДопОтборыП="",""," И ") + "Пользователи." + ТекОтбор.Ключ 
				+ " = &ПарамП" + Формат(Сч, "ЧН=0; ЧГ=0");
			Запрос.УстановитьПараметр("ПарамП" + Формат(Сч, "ЧН=0; ЧГ=0"), ТекОтбор.Значение);
			
			ДопОтборыВ = ДопОтборыВ + ?(ДопОтборыВ="",""," И ") + "ВнешниеПользователи." + ТекОтбор.Ключ 
				+ " = &ПарамВ" + Формат(Сч, "ЧН=0; ЧГ=0");
			Запрос.УстановитьПараметр("ПарамВ" + Формат(Сч, "ЧН=0; ЧГ=0"), ТекОтбор.Значение);
			
			Сч = Сч + 1;
		КонецЦикла;
	КонецЕсли;
	
	Если ДопОтборыП = "" Тогда 
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%__ДопПараметрыП__%", "ИСТИНА");
	Иначе 
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%__ДопПараметрыП__%", ДопОтборыП);
	КонецЕсли;
	
	Если ДопОтборыВ = "" Тогда 
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%__ДопПараметрыВ__%", "ИСТИНА");
	Иначе 
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, "%__ДопПараметрыВ__%", ДопОтборыВ);
	КонецЕсли;
	
	Запрос.Текст = ТекстЗапроса;
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ДанныеВыбора = Новый СписокЗначений();
	
	Пока Выборка.Следующий() Цикл 
		врПозицияОтсечения = СтрДлина(Текст);
		тПредставление = Новый ФорматированнаяСтрока(
			Новый ФорматированнаяСтрока(Лев(Выборка.Наименование, врПозицияОтсечения),, ЦветаСтиля.уатЦветТекстаПриАвтоподборе), 
			Новый ФорматированнаяСтрока(Прав(Выборка.Наименование, СтрДлина(Выборка.Наименование)-врПозицияОтсечения)));
		ДанныеВыбора.Добавить(Выборка.Ссылка, тПредставление);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДиалогВыбораФайла(Подключено, ДополнительныеПараметры) Экспорт
	
	Если НЕ Подключено Тогда
		
		Оповещение = Новый ОписаниеОповещения("НачатьУстановкуРасширенияРаботыСФайламиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ТекстСообщения = НСтр("ru = 'Для продолжении работы необходимо установить расширение для веб-клиента ""1С:Предприятие"". Установить?'");
		ПоказатьВопрос(Оповещение, ТекстСообщения, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЗагрузитьИзФайлаПодтверждение", ЭтотОбъект);
	ТекстНСТР = НСтр("en='All current rights will be replaced to downloadable!"
"Continue ?';ru='Все текущие права будут заменены на загружаемые!"
"Продолжить ?'");
	ПоказатьВопрос(ОповещениеОЗакрытии, ТекстНСТР, РежимДиалогаВопрос.ДаНет, , КодВозвратаДиалога.Нет);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДиалогВыбораФайлаСохранение(Подключено, ДополнительныеПараметры) Экспорт
	
	Если НЕ Подключено Тогда
		
		Оповещение = Новый ОписаниеОповещения("НачатьУстановкуРасширенияРаботыСФайламиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ТекстСообщения = НСтр("ru = 'Для продолжении работы необходимо установить расширение для веб-клиента ""1С:Предприятие"". Установить?'");
		ПоказатьВопрос(Оповещение, ТекстСообщения, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	Диалог = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	Диалог.МножественныйВыбор = Ложь;
	Диалог.ПолноеИмяФайла = "ПраваИНастройки" + ТипОбъектаНастройки;
	Диалог.Расширение = "xml";
	Диалог.Фильтр = НСтр("en='XML files';ru='Файлы XML'") + " (*.xml)|*.xml";
	Диалог.Показать(Новый ОписаниеОповещения("СохранитьНастройкиВФайлЗавершение", ЭтотОбъект, Новый Структура("Диалог", Диалог))); 
	
КонецПроцедуры


&НаКлиенте
Процедура НачатьУстановкуРасширенияРаботыСФайламиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		НачатьУстановкуРасширенияРаботыСФайлами();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

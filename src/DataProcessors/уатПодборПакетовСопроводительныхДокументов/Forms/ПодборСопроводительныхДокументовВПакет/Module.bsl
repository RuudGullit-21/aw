
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("ОтборДокументов") Тогда
		мсвОтборДокументов = Параметры.ОтборДокументов;
	Иначе
		мсвОтборДокументов = Новый Массив;
	КонецЕсли;
	
	Ответственный = ПользователиКлиентСервер.АвторизованныйПользователь();
	Организация = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
		Ответственный, "ОсновнаяОрганизация");
	СтруктураОбъектовНастроек = Новый Структура("Организация", Организация);
	ОтборМестоположение = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(
		СтруктураОбъектовНастроек, "ОсновнойПунктОтправления");
		
	мсвОтборДокументов.Добавить(Новый Структура("Поле, Значение, ВидСравнения", "Местоположение", ОтборМестоположение, "Равно"));
	мсвОтборДокументов.Добавить(Новый Структура("Поле, Значение, ВидСравнения", "Статус", Справочники.уатСтатусы_уэ.ОбработкаЗавершена, "НеРавно"));
	
	НастроитьКомпоновщикОтбора(мсвОтборДокументов);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПодобратьСД(Команда)
	ПодобратьДокументыСервер()
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиПодобранныеВДокумент(Команда)
	мсвСД = Новый Массив;
	Для Каждого ТекСтрока Из СопроводительныеДокументы Цикл
		Если ТекСтрока.Пометка Тогда
			мсвСД.Добавить(ТекСтрока.СопроводительныйДокумент);
		КонецЕсли;
	КонецЦикла;
	
	Закрыть(мсвСД);
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВсе(Команда)
	Для Каждого ТекСтрока Из СопроводительныеДокументы Цикл
		ТекСтрока.Пометка = Истина;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СнятьВсе(Команда)
	Для Каждого ТекСтрока Из СопроводительныеДокументы Цикл
		ТекСтрока.Пометка = Ложь;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура НастроитьКомпоновщикОтбора(мсвОтборДокументов)
	СхемаКомпоновкиДанных = РеквизитФормыВЗначение("Объект").ПолучитьМакет("СхемаКомпоновки");
	АдресСхемыКомпоновкиДанных = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	КомпоновщикНастроекОтбора.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанных));
	КомпоновщикНастроекОтбора.ЗагрузитьНастройки(СхемаКомпоновкиДанных.НастройкиПоУмолчанию);
	
	Для Каждого ТекОтбор Из КомпоновщикНастроекОтбора.Настройки.Отбор.Элементы Цикл
		Для Каждого ТекВхОтбор Из мсвОтборДокументов Цикл
			Если ТекОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных(ТекВхОтбор.Поле)
				И ЗначениеЗаполнено(ТекВхОтбор.Значение) Тогда
				
				ТекОтбор.ВидСравнения   = ВидСравненияКомпоновкиДанных[ТекВхОтбор.ВидСравнения];
				ТекОтбор.ПравоеЗначение = ТекВхОтбор.Значение;
				ТекОтбор.Использование  = Истина;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Процедура ПодобратьДокументыСервер()
	СопроводительныеДокументы.Очистить();
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	Макет = КомпоновщикМакета.Выполнить(ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных),
		КомпоновщикНастроекОтбора.ПолучитьНастройки(),,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных();
	ПроцессорКомпоновки.Инициализировать(Макет,,, Истина);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений();
	
	тблСД = РеквизитФормыВЗначение("СопроводительныеДокументы");
	ПроцессорВывода.УстановитьОбъект(тблСД);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	ЗначениеВРеквизитФормы(тблСД, "СопроводительныеДокументы");
КонецПроцедуры

#КонецОбласти
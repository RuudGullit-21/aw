
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	УстановитьУсловноеОформление();
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	Если Параметры.Свойство("ОтборДокументОснование") Тогда // Форма открыта в режиме просмотра по документу основания
		ИзменитьЗапросНаОтборПоДокументуОснования(Параметры);
	КонецЕсли;
	
	Если Не Параметры.Свойство("КлючНазначенияФормы")
		Или ПустаяСтрока(Параметры.КлючНазначенияФормы) Тогда
		КлючНазначенияИспользования = КлючНазначенияФормыПоУмолчанию();
		КлючНастроек = "";
	Иначе
		КлючНазначенияИспользования = Параметры.КлючНазначенияФормы;
		КлючНастроек = Параметры.КлючНазначенияФормы;
	КонецЕсли;
	
	ВосстановитьНастройки();
	
	ЗаполнитьРеквизитыФормыПриСоздании();
	НастроитьЭлементыФормыПриСоздании();
	
	ИспользуемыеТипыДокументов = Новый Массив;
	Для каждого ОписаниеОперации Из ХозяйственныеОперацииИДокументы Цикл
		ИспользуемыеТипыДокументов.Добавить(Тип("ДокументСсылка." + СтрРазделить(ОписаниеОперации.ПолноеИмяДокумента, ".")[1]));
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ИмяСобытия = "Запись_Файл" Тогда
		
		Элементы.Список.Обновить();
		
	ИначеЕсли ИмяСобытия = "Запись_ДокументыЭПД" Тогда
	
		Элементы.Список.Обновить();
		
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ОтборОрганизацияПриИзменении(Элемент)
	ПриИзмененииОтбора();
КонецПроцедуры

&НаКлиенте
Процедура ОтборГрузоотправительПриИзменении(Элемент)
	ПриИзмененииОтбора();
КонецПроцедуры

&НаКлиенте
Процедура ОтборПеревозчикПриИзменении(Элемент)
	ПриИзмененииОтбора();
КонецПроцедуры

&НаКлиенте
Процедура ОтборГрузополучательПриИзменении(Элемент)
	ПриИзмененииОтбора();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыСписок

&НаСервереБезКонтекста
Процедура СписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, СтрокиСписка)
	
	Ключи = СтрокиСписка.ПолучитьКлючи();
	СтрокаСписка = СтрокиСписка.Получить(Ключи[0]);
	Если Не СтрокаСписка.Данные.Свойство("ДокументОснование") Тогда
		Возврат;
	КонецЕсли;
	
	Запрос = Новый Запрос;
	Запрос.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ЭлектроннаяТранспортнаяНакладнаяДокументыОснования.Ссылка,
		|	ЭлектроннаяТранспортнаяНакладнаяДокументыОснования.ДокументОснование.Представление КАК ДокументОснованиеПредставление
		|ИЗ
		|	Документ.ЭлектроннаяТранспортнаяНакладная.ДокументыОснования КАК ЭлектроннаяТранспортнаяНакладнаяДокументыОснования
		|ГДЕ
		|	ЭлектроннаяТранспортнаяНакладнаяДокументыОснования.Ссылка В (&Документы)
		|
		|ОБЪЕДИНИТЬ ВСЕ
		|
		|ВЫБРАТЬ
		|	ЭлектронныйЗаказНарядДокументыОснования.Ссылка,
		|	ЭлектронныйЗаказНарядДокументыОснования.ДокументОснование.Представление КАК ДокументОснованиеПредставление
		|ИЗ
		|	Документ.ЭлектронныйЗаказНаряд.ДокументыОснования КАК ЭлектронныйЗаказНарядДокументыОснования
		|ГДЕ
		|	ЭлектронныйЗаказНарядДокументыОснования.Ссылка В (&Документы)";
		
	Ссылки = Новый Массив;
	Для Каждого Ключ Из Ключи Цикл //РегистрСведенийКлючЗаписи
		Ссылки.Добавить(Ключ.Ссылка);
	КонецЦикла;
		
	Запрос.УстановитьПараметр("Документы", Ссылки);
	
	Выборка = Запрос.Выполнить().Выбрать();
	Для Каждого Строка Из СтрокиСписка Цикл
		Строка = СтрокиСписка[Строка.Ключ];
		Выборка.Сбросить();
		СтрокиДокументОснование = Новый Массив();
		Пока Выборка.НайтиСледующий(Строка.Данные["Ссылка"], "Ссылка") Цикл 
			СтрокиДокументОснование.Добавить(Выборка.ДокументОснованиеПредставление);
		КонецЦикла;
		Если СтрокиДокументОснование.Количество() Тогда
			Строка.Данные["ДокументОснование"] = СтрСоединить(СтрокиДокументОснование, ", " + Символы.ПС);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Если Поле = Элементы.ПредставлениеСостояния Тогда
		ДанныеСтроки = Элементы.Список.ДанныеСтроки(ВыбраннаяСтрока);
		// ЭлектронноеВзаимодействие.ОбменСКонтрагентами
		ОбменСКонтрагентамиКлиент.СостояниеЭДОНажатие_ФормаСписка(ДанныеСтроки.Ссылка, СтандартнаяОбработка);
		// Конец ЭлектронноеВзаимодействие.ОбменСКонтрагентами
	Иначе
		ОбменСГИСЭПДКлиентПереопределяемый.ИзменитьЭлемент(Элемент);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	ОбменСГИСЭПДКлиентПереопределяемый.УстановитьПометкуУдаления(Элемент, Заголовок);
	
КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа, Параметр)
	
	Если Копирование = Истина Тогда
		Отказ = Истина;
		СписокСкопировать();	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СписокПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	
	ОбменСГИСЭПДКлиентПереопределяемый.ИзменитьЭлемент(Элемент);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

#Область ПодключаемыеКоманды

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	ПодключаемыеКомандыКлиент.ВыполнитьКоманду(ЭтотОбъект, Команда, ТекущийСписок(ЭтотОбъект));
КонецПроцедуры

&НаСервере
Процедура Подключаемый_ВыполнитьКомандуНаСервере(Контекст, Результат) Экспорт
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, Контекст, ТекущийСписок(ЭтотОбъект), Результат);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, ТекущийСписок(ЭтотОбъект));
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

#КонецОбласти

&НаКлиенте
Процедура НастроитьОтбор(Команда)
	
	ВидыДокументов = ПолучитьВидыДокументов();
	
	ОповещениеПослеВыбора = Новый ОписаниеОповещения("ЗакончитьВыборТиповЭПД", ЭтотОбъект);
	
	ВидыДокументов.ПоказатьОтметкуЭлементов(ОповещениеПослеВыбора, НСтр("ru = 'Типы документов'"));
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЭЗН(Команда)
	ОткрытьФорму("Документ.ЭлектронныйЗаказНаряд.ФормаОбъекта");
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЭСВ(Команда)
	ОткрытьФорму("Документ.ЭлектроннаяСопроводительнаяВедомость.ФормаОбъекта");
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЭТН(Команда)
	ОткрытьФорму("Документ.ЭлектроннаяТранспортнаяНакладная.ФормаОбъекта");
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЭЗЗ(Команда)
	ОткрытьФорму("Документ.ЭлектронныйЗаказЗаявка.ФормаОбъекта");
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЭДФ(Команда)
	ОткрытьФорму("Документ.ЭлектронныйДоговорФрахтования.ФормаОбъекта");
КонецПроцедуры

&НаКлиенте
Процедура СоздатьЭПЛ(Команда)
	ОткрытьФорму("Документ.ЭлектронныйПутевойЛист.ФормаОбъекта");
КонецПроцедуры

&НаКлиенте
Процедура СписокУстановитьИнтервал(Команда)
	
	Оповещение = Новый ОписаниеОповещения("УстановитьИнтервалЗавершение", ЭтотОбъект);
	
	ОбменСГИСЭПДКлиентПереопределяемый.РедактироватьПериод(СписокИнтервал,, Оповещение);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьИнтервалЗавершение(ВыбранноеЗначение, ДополнительныеПараметры) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПриИзмененииОтбора();
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройки()
	
	Если Параметры.Свойство("ОтборыФормыСписка") Тогда
		
		ОтборТипыДокументов.ЗагрузитьЗначения(Параметры.ОтборыФормыСписка.ОтборТипыДокументов.ВыгрузитьЗначения());
		
	ИначеЕсли Параметры.Свойство("ТипЭПД") Тогда
		 
		ОтборТипыДокументов.Добавить(Справочники.ИдентификаторыОбъектовМетаданных.НайтиПоРеквизиту("Имя", Метаданные.НайтиПоТипу(Параметры.ТипЭПД).Имя));
		
	Иначе
	
		Настройки = ОбщегоНазначения.ХранилищеОбщихНастроекЗагрузить("Обработка.ЭлектронныеПеревозочныеДокументы.Форма.ФормаСпискаЭПД", КлючНазначенияИспользования);
		
		Если ТипЗнч(Настройки) = Тип("Структура") Тогда
		
			ОтборОрганизация = Настройки.ОтборОрганизация;
			ОтборГрузоотправитель = Настройки.ОтборГрузоотправитель;
			ОтборПеревозчик = Настройки.ОтборПеревозчик;
			ОтборГрузополучатель = Настройки.ОтборГрузополучатель;
			
			Если Настройки.Свойство("ОтборТипыДокументов") Тогда
				ОтборТипыДокументов.ЗагрузитьЗначения(Настройки.ОтборТипыДокументов.ВыгрузитьЗначения());
			КонецЕсли;
			
			Если Настройки.Свойство("ОтборХозяйственныеОперации") Тогда
				ОтборХозяйственныеОперации.ЗагрузитьЗначения(Настройки.ОтборХозяйственныеОперации.ВыгрузитьЗначения());
			КонецЕсли;
			
		КонецЕсли;
	
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформление()
	
	УсловноеОформление.Элементы.Очистить();
	
	СтандартныеПодсистемыСервер.УстановитьУсловноеОформлениеПоляДата(ЭтотОбъект, "Список.Дата", "Дата");
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьЗапросНаОтборПоДокументуОснования(Параметры)

	СвойстваСписка = ОбщегоНазначения.СтруктураСвойствДинамическогоСписка();
	ЗаполнитьЗначенияСвойств(СвойстваСписка, Список);
	СвойстваСписка.ТекстЗапроса = Обработки.ЭлектронныеПеревозочныеДокументы.ЗапросПоДокументуОснования();
	ОбщегоНазначения.УстановитьСвойстваДинамическогоСписка(Элементы.Список, СвойстваСписка);
	
	Список.Параметры.УстановитьЗначениеПараметра("ДокументОснование", Параметры.ОтборДокументОснование);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция КлючНазначенияФормыПоУмолчанию()
	
	Возврат "ФормаСпискаЭПД";
	
КонецФункции

&НаСервере
Процедура ЗаполнитьРеквизитыФормыПриСоздании()
	
	ИнициализироватьХозяйственныеОперацииИДокументы(ХозяйственныеОперацииИДокументы, КлючНазначенияИспользования);
	
	// ОтборТипыДокументов
	Если ОтборТипыДокументов.Количество() = 0 Тогда
		Для Каждого Стр Из ХозяйственныеОперацииИДокументы Цикл
			
			ОтборТипыДокументов.Добавить(Стр.ИдентификаторОбъектаМетаданных,,Истина);
			
		КонецЦикла;
	КонецЕсли;
	
	УстановитьОтборыДинамическогоСписка();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакончитьВыборТиповЭПД(Элементы, Параметры) Экспорт
	
	Если Элементы <> Неопределено Тогда
		ОтборТипыДокументов.Очистить();
		
		ОтборПоОперациям = Новый Структура;
		
		Для Каждого СтрокаТипДокумента Из Элементы Цикл
			Если СтрокаТипДокумента.Пометка Тогда
				
				ОтборТипыДокументов.Добавить(СтрокаТипДокумента.Значение);
				ОтборПоОперациям.Вставить("ИдентификаторОбъектаМетаданных", СтрокаТипДокумента.Значение);
				
				РезультатПоиска = ХозяйственныеОперацииИДокументы.НайтиСтроки(ОтборПоОперациям);
				Для Каждого СтрокаХозОперации Из РезультатПоиска Цикл
					
					СтрокаХозОперации.Отбор = Истина;
					
				КонецЦикла;
				
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ПриИзмененииОтбора();
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ИнициализироватьХозяйственныеОперацииИДокументы(ХозяйственныеОперацииИДокументы, КлючНазначенияИспользования)
	
	// Электронный заказ-наряд
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ПолноеИмяДокумента             = Метаданные.Документы.ЭлектронныйЗаказНаряд.ПолноеИмя();
	Строка.ИдентификаторОбъектаМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Документы.ЭлектронныйЗаказНаряд);
	Строка.КлючНазначенияИспользования    = КлючНазначенияИспользования;
	Строка.ЗаголовокРабочегоМеста         = НСтр("ru = 'Электронный заказ-наряд'");
	Строка.ДобавитьКнопкуСоздать          = Истина;
	Строка.ПравоДоступаДобавление         = Истина;
	Строка.Отбор                          = Истина;
	Строка.ПравоДоступаИзменение          = Истина;
	Строка.Порядок                        = 1;
	Строка.ГруппаКнопок                   = "ЭПД";
	
	// Электронная сопроводительная ведомость
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ПолноеИмяДокумента             = Метаданные.Документы.ЭлектроннаяСопроводительнаяВедомость.ПолноеИмя();
	Строка.ИдентификаторОбъектаМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Документы.ЭлектроннаяСопроводительнаяВедомость);
	Строка.КлючНазначенияИспользования    = КлючНазначенияИспользования;
	Строка.ЗаголовокРабочегоМеста         = НСтр("ru = 'Электронная сопроводительная ведомость'");
	Строка.ДобавитьКнопкуСоздать          = Истина;
	Строка.ПравоДоступаДобавление         = Истина;
	Строка.Отбор                          = Истина;
	Строка.ПравоДоступаИзменение          = Истина;
	Строка.Порядок                        = 2;
	Строка.ГруппаКнопок                   = "ЭПД";
	
	// Электронная транспортная накладная
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ПолноеИмяДокумента             = Метаданные.Документы.ЭлектроннаяТранспортнаяНакладная.ПолноеИмя();
	Строка.ИдентификаторОбъектаМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Документы.ЭлектроннаяТранспортнаяНакладная);
	Строка.КлючНазначенияИспользования    = КлючНазначенияИспользования;
	Строка.ЗаголовокРабочегоМеста         = НСтр("ru = 'Электронная транспортная накладная'");
	Строка.ДобавитьКнопкуСоздать          = Истина;
	Строка.ПравоДоступаДобавление         = Истина;
	Строка.Отбор                          = Истина;
	Строка.ПравоДоступаИзменение          = Истина;
	Строка.Порядок                        = 3;
	Строка.ГруппаКнопок                   = "ЭПД";
	
	// Электронный заказ (заявка)
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ПолноеИмяДокумента             = Метаданные.Документы.ЭлектронныйЗаказЗаявка.ПолноеИмя();
	Строка.ИдентификаторОбъектаМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Документы.ЭлектронныйЗаказЗаявка);
	Строка.КлючНазначенияИспользования    = КлючНазначенияИспользования;
	Строка.ЗаголовокРабочегоМеста         = НСтр("ru = 'Электронный заказ (заявка)'");
	Строка.ДобавитьКнопкуСоздать          = Истина;
	Строка.ПравоДоступаДобавление         = Истина;
	Строка.Отбор                          = Истина;
	Строка.ПравоДоступаИзменение          = Истина;
	Строка.Порядок                        = 3;
	Строка.ГруппаКнопок                   = "ЭПД";
	
	// Электронный договор фрахтования
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ПолноеИмяДокумента             = Метаданные.Документы.ЭлектронныйДоговорФрахтования.ПолноеИмя();
	Строка.ИдентификаторОбъектаМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Документы.ЭлектронныйДоговорФрахтования);
	Строка.КлючНазначенияИспользования    = КлючНазначенияИспользования;
	Строка.ЗаголовокРабочегоМеста         = НСтр("ru = 'Электронный договор фрахтования'");
	Строка.ДобавитьКнопкуСоздать          = Истина;
	Строка.ПравоДоступаДобавление         = Истина;
	Строка.Отбор                          = Истина;
	Строка.ПравоДоступаИзменение          = Истина;
	Строка.Порядок                        = 3;
	Строка.ГруппаКнопок                   = "ЭПД";
	
	// Электронный путевой лист
	Строка = ХозяйственныеОперацииИДокументы.Добавить();
	Строка.ПолноеИмяДокумента             = Метаданные.Документы.ЭлектронныйПутевойЛист.ПолноеИмя();
	Строка.ИдентификаторОбъектаМетаданных = ОбщегоНазначения.ИдентификаторОбъектаМетаданных(Метаданные.Документы.ЭлектронныйПутевойЛист);
	Строка.КлючНазначенияИспользования    = КлючНазначенияИспользования;
	Строка.ЗаголовокРабочегоМеста         = НСтр("ru = 'Электронный путевой лист'");
	Строка.ДобавитьКнопкуСоздать          = Истина;
	Строка.ПравоДоступаДобавление         = Истина;
	Строка.Отбор                          = Истина;
	Строка.ПравоДоступаИзменение          = Истина;
	Строка.Порядок                        = 3;
	Строка.ГруппаКнопок                   = "ЭПД";
	
КонецПроцедуры

&НаСервере
Функция ПолучитьВидыДокументов()

	ВидыДокументов = Новый СписокЗначений; 
	
	Для Каждого ЭлементОтбора Из ХозяйственныеОперацииИДокументы Цикл
		
		Отбор = ОтборТипыДокументов.НайтиПоЗначению(ЭлементОтбора.ИдентификаторОбъектаМетаданных) <> Неопределено;
		ВидыДокументов.Добавить(ЭлементОтбора.ИдентификаторОбъектаМетаданных, ЭлементОтбора.ЗаголовокРабочегоМеста, Отбор);
		
	КонецЦикла;
	
	Возврат ВидыДокументов;
	
КонецФункции

&НаСервере
Процедура НастроитьЭлементыФормыПриСоздании()
	
	Если Параметры.Свойство("СтруктураБыстрогоОтбора") Тогда
		Если Параметры.СтруктураБыстрогоОтбора.Свойство("ПолноеИмяДокумента") Тогда
						
			Отбор = Новый Структура();
			Отбор.Вставить("ПолноеИмяДокумента", Параметры.СтруктураБыстрогоОтбора.ПолноеИмяДокумента);
			
			НайденныеСтроки = ХозяйственныеОперацииИДокументы.НайтиСтроки(Отбор);
			
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				НайденнаяСтрока.Отбор = Истина;
			КонецЦикла;
			
		КонецЕсли;
	КонецЕсли;
	
	НастроитьФормуПоНастройкамХозяйственныхОперацийИДокументов();
	
КонецПроцедуры

&НаСервере
Процедура НастроитьФормуПоНастройкамХозяйственныхОперацийИДокументов()
	
	ДанныеРабочегоМеста = ДанныеРабочегоМеста(
		ХозяйственныеОперацииИДокументы.Выгрузить(), 
		КлючНазначенияФормыПоУмолчанию(), 
		НСтр("ru = 'Электронные перевозочные документы'"));
	
	Заголовок = ДанныеРабочегоМеста.ЗаголовокРабочегоМеста;
	
КонецПроцедуры

&НаСервере
Функция ДанныеРабочегоМеста(ТаблицаХозОперацииИТипыДокументов, КлючНазначенияФормыПоУмолчанию, ЗаголовокФормыПоУмолчанию)
	
	ОтобранныеХозОперацииИТипыДокументов = ТаблицаХозОперацииИТипыДокументов.Скопировать(Новый Структура("Отбор",Истина),
		"КлючНазначенияИспользования,ЗаголовокРабочегоМеста");
	ОтобранныеХозОперацииИТипыДокументов.Свернуть("КлючНазначенияИспользования,ЗаголовокРабочегоМеста");
	
	ДанныеРабочегоМеста = Новый Структура("КлючНазначенияИспользования,ЗаголовокРабочегоМеста",
		КлючНазначенияФормыПоУмолчанию, ЗаголовокФормыПоУмолчанию);
		
	Если ОтобранныеХозОперацииИТипыДокументов.Количество() = 1 Тогда
		Если ЗначениеЗаполнено(ОтобранныеХозОперацииИТипыДокументов[0].КлючНазначенияИспользования) Тогда
			ДанныеРабочегоМеста.КлючНазначенияИспользования = ОтобранныеХозОперацииИТипыДокументов[0].КлючНазначенияИспользования;	
		КонецЕсли;
		Если ЗначениеЗаполнено(ОтобранныеХозОперацииИТипыДокументов[0].ЗаголовокРабочегоМеста) Тогда
			ДанныеРабочегоМеста.ЗаголовокРабочегоМеста = ОтобранныеХозОперацииИТипыДокументов[0].ЗаголовокРабочегоМеста;	
		КонецЕсли;			
	КонецЕсли;
	
	Возврат ДанныеРабочегоМеста;
	
КонецФункции

&НаСервере
Процедура ПриИзмененииОтбора()
	
	СохранитьНастройки();
	УстановитьОтборыДинамическогоСписка();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()
	
	Если ФормыОткрытаПоГиперссылке Тогда
		Возврат;
	КонецЕсли;
	
	ИменаСохраняемыхРеквизитов =
		"ОтборОрганизация,ОтборГрузоотправитель,
		|ОтборПеревозчик,ОтборГрузополучатель,
		|ОтборХозяйственныеОперации,
		|ОтборТипыДокументов";
	
	Настройки = Новый Структура(ИменаСохраняемыхРеквизитов);
	ЗаполнитьЗначенияСвойств(Настройки, ЭтотОбъект);
	
	ОбщегоНазначения.ХранилищеОбщихНастроекСохранить("Обработка.ЭлектронныеПеревозочныеДокументы.Форма.ФормаСпискаЭПД", КлючНазначенияИспользования, Настройки);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОтборыДинамическогоСписка()

	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"ТипСсылки",
		ОтборТипыДокументов,
		ВидСравненияКомпоновкиДанных.ВСписке,
		,
		Истина);
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Организация",
		ОтборОрганизация,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(ОтборОрганизация));
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Грузоотправитель",
		ОтборГрузоотправитель,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(ОтборГрузоотправитель));
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Перевозчик",
		ОтборПеревозчик,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(ОтборПеревозчик));
		
	ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбораДинамическогоСписка(
		Список,
		"Грузополучатель",
		ОтборГрузополучатель,
		ВидСравненияКомпоновкиДанных.Равно,
		,
		ЗначениеЗаполнено(ОтборГрузополучатель));
		
	Список.Параметры.УстановитьЗначениеПараметра("НачалоПериода", СписокИнтервал.ДатаНачала);
	
	Список.Параметры.УстановитьЗначениеПараметра("КонецПериода", 
		?(ЗначениеЗаполнено(СписокИнтервал.ДатаОкончания),
			КонецДня(СписокИнтервал.ДатаОкончания),
			СписокИнтервал.ДатаОкончания));
			
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Функция ТекущийСписок(Форма)

	Возврат Форма.Элементы.Список;

КонецФункции

&НаКлиенте
Процедура СписокСкопировать()
	
	ОбменСГИСЭПДКлиентПереопределяемый.СкопироватьЭлемент(Элементы.Список);
	
КонецПроцедуры

#КонецОбласти

#Область Переменные_Формы

&НаКлиенте
Перем ДокументОснование;
&НаКлиенте
Перем ТекЭлементПланировщикСсылка;
&НаКлиенте
Перем ТекЭлементПланировщикНач;
&НаКлиенте
Перем ТекЭлементПланировщикКон;
&НаКлиенте
Перем ТекЭлементПланировщикТС;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если НЕ Параметры.Свойство("НачальнаяДатаПланирования") Тогда
		Возврат;
	Иначе
		ДатаПланирования = Параметры.НачальнаяДатаПланирования;
	Конецесли;
	
	ДетализацияВЧасах = 4;
	ДнейПланировщика  = 1;
	
	ОбновитьКэшСредняяСкоростьДвижения();
	НачальнаяДатаПланирования = ДатаПланирования;
	Планировщик.ШкалаВремени.Элементы[1].Кратность = ДетализацияВЧасах;

	СистемнаяИнформация = Новый СистемнаяИнформация;
	Если ОбщегоНазначенияКлиентСервер.СравнитьВерсии("8.3.17.0", СистемнаяИнформация.ВерсияПриложения) >= 0 Тогда
		ПланировщикГруппировка = "Не использовать";
		Элементы.ПланировщикГруппировка.Видимость = Ложь;
	ИначеЕсли ПланировщикГруппировка = "" Тогда
		ПланировщикГруппировка = "Не использовать";
	КонецЕсли;
	ВосстановитьНастройки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	
	ПланировщикОткрыт = Истина;
	ОбновитьНадписьКоличествоОтображаемыеДокументы();
	Элементы.ГруппаПодвал.Видимость = Ложь;
	
	ПодключитьОбработчикОжидания("ОбновитьПланировщик", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	ПланировщикОткрыт = Ложь;
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	Если ИмяСобытия = "ВыделитьТСНаПланировщике" Тогда
		ВыделитьТСНаПланировщике(Параметр);
	КонецЕсли;
	Если ИмяСобытия = "ОбновитьДанныеПланировщика" Тогда
		ОбновитьДанныеПланировщика(Параметр);
		ОбновитьПланировщик();
	КонецЕсли;
	Если ИмяСобытия = "ОбновитьДатуПланирования" Тогда
		ОбновитьДатуПланирования(Параметр);
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДатаПланированияВперед(Команда)
	НачальнаяДатаПланирования = НачальнаяДатаПланирования + 24*3600;
	Если Элементы.ГруппаПланировщикОбщая.Видимость Тогда 
		ОбновитьПланировщик();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДатаПланированияНазад(Команда)
	НачальнаяДатаПланирования = НачальнаяДатаПланирования - 24*3600;           
	Если Элементы.ГруппаПланировщикОбщая.Видимость Тогда 
		ОбновитьПланировщик();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДатаПланированияТекущая(Команда)
	НачальнаяДатаПланирования = ДатаПланирования;
	Если Элементы.ГруппаПланировщикОбщая.Видимость Тогда 
		ОбновитьПланировщик();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройки(Команда)
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ОткрытьНастройкиЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.уатАРМДиспетчера.Форма.ФормаНастроекПланировщика",,
		ЭтотОбъект,,,,ОповещениеОЗакрытии);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НастройкаОтбораНажатие(Элемент)
	ОткрытьФорму(
	"ОбщаяФорма.уатФормаПодбораТС", 
	Новый Структура("ИсточникПодбора, мсвТС", "ФормаПланировщика", МассивТС), 
	ЭтотОбъект,
	,
	,
	,
	Новый ОписаниеОповещения("ФормаЗаполненияТСЗавершение", ЭтотОбъект),
	РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
КонецПроцедуры

&НаКлиенте
Процедура ДнейПланировщикаПриИзменении(Элемент)
	Если ДнейПланировщика < 1 Тогда
		ДнейПланировщика = 1;
	КонецЕсли;
	Планировщик.ШкалаВремени.Элементы[0].Кратность = 1;
	ОбновитьПланировщик();
КонецПроцедуры

&НаКлиенте
Процедура ДетализацияВЧасахПриИзменении(Элемент)
	Если НЕ Планировщик.ШкалаВремени.Элементы[1].Кратность = ДетализацияВЧасах Тогда
		Планировщик.ШкалаВремени.Элементы[1].Кратность = ДетализацияВЧасах;
	КонецЕсли;
	ОбновитьПланировщик();
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикГруппировкаПриИзменении(Элемент)
	ОбновитьПланировщик();
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередНачаломБыстрогоРедактирования(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПередУдалением(Элемент, Отказ)
	
	Если Элемент.ВыделенныеЭлементы.Количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
		Отказ = Истина;
		Соответствие = Элемент.ВыделенныеЭлементы[0].ЗначенияИзмерений;
		Основание    = Соответствие.Получить("Основание");
		Если Основание = Неопределено Тогда
			Если Лев(Элемент.ВыделенныеЭлементы[0].Текст, 5) = "Новый" Тогда 
				ТСпланировщик = Соответствие.Получить("ТС");
				
				ТребСтрокаТС = Неопределено;
			КонецЕсли;
		КонецЕсли;
		СтруктураОснования = ПолучитьСтруктуруОснования(Основание);
		ТекстНСТР = НСтр("en='Cancel of posting document <%1 № %2>?';ru='Отменить проведение документа <%1 №  %2>?'");
		ТекстСообщения = СтрШаблон(ТекстНСТР, СтруктураОснования.Представление, СтруктураОснования.Номер);
		ПоказатьВопрос(Новый ОписаниеОповещения("УдалитьОснованиеЗавершение", ЭтотОбъект, Основание), ТекстСообщения, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);

		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикВыбор(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Элемент.ВыделенныеЭлементы.Количество() > 0 Тогда
		Соответствие = Элемент.ВыделенныеЭлементы[0].ЗначенияИзмерений;
		Основание = Соответствие.Получить("Основание");
		Если Основание.Пустая() Или Основание = Неопределено Тогда
			Если Лев(Элемент.ВыделенныеЭлементы[0].Текст, 5) = "Новый" Тогда 
				ТекстНСТР = НСтр("en='To edit the form of routing list, you need to record it!';ru='Для редактирования формы маршрутного листа необходимо его записать!'");
				ПоказатьПредупреждение(, ТекстНСТР);
			КонецЕсли;
			Возврат;
		Конецесли;
		ПоказатьЗначение(, Основание);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПриАктивизации(Элемент, СтандартнаяОбработка)
	
	ТекЭлементПланировщикСсылка = Неопределено;
	ТекЭлементПланировщикНач = Дата("00010101");
	ТекЭлементПланировщикКон = Дата("00010101");
	ТекЭлементПланировщикТС = ПредопределенноеЗначение("Справочник.уатТС.ПустаяСсылка");
	
	Если Элемент.ВыделенныеЭлементы.Количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
		Соответствие = Элемент.ВыделенныеЭлементы[0].ЗначенияИзмерений;
		Основание  = Соответствие.Получить("Основание");
		ТекТС  = Соответствие.Получить("ТС"); 
		СформироватьТекстПодвалаДляВыделенногоЭлемента(Основание, Элемент.ВыделенныеЭлементы[0]);
		
		Если ТекТС <> Неопределено Тогда
			ТекЭлементПланировщикСсылка = Основание;
			ТекЭлементПланировщикНач    = Элемент.ВыделенныеЭлементы[0].Начало;
			ТекЭлементПланировщикКон    = Элемент.ВыделенныеЭлементы[0].Конец;
			ТекЭлементПланировщикТС     = ТекТС;
		КонецЕсли;
		
		Если Основание <> Неопределено Тогда
			ДокументОснование = Основание;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПланировщикПриОкончанииРедактирования(Элемент, НовыйЭлемент, ОтменаРедактирования)
	
	Если Элемент.ВыделенныеЭлементы.Количество() > 0 Тогда
		СтандартнаяОбработка = Ложь;
		ВыделенныеЭлементы = Элемент.ВыделенныеЭлементы[0];
		Соответствие = ВыделенныеЭлементы.ЗначенияИзмерений;
		ТСПерем = Соответствие.Получить("ТС");
		
		Если Не ЗначениеЗаполнено(ТСПерем) Тогда 
			Возврат;
		КонецЕсли;
		
		Если НовыйЭлемент Тогда
			
			Для Каждого ТекСтрокаТС Из МаршрутыДерево.ПолучитьЭлементы() Цикл 
				Если (ТипЗнч(ТСПерем) = Тип("СправочникСсылка.уатТС") И ТекСтрокаТС.ТС = ТСПерем) Или ТекСтрокаТС.GUID = ТСПерем Тогда 
					СтрокаТС = ТекСтрокаТС.ТС;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			Если СтрокаТС = Неопределено Тогда 
				Возврат;
			КонецЕсли;
						
			// создадим новую диспозицию ТС
			Форма = ОткрытьФорму("Документ.уатДиспозицияТС.ФормаОбъекта",
			,ЭтотОбъект,,,,Новый ОписаниеОповещения("СоздатьДиспозициюЗавершение", ЭтотОбъект) , РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
			Форма.Объект.ТС = СтрокаТС;
			
			мсвЗапрос = Новый Массив();
			мсвЗапрос.Добавить(Новый Структура("ТС, Количество", СтрокаТС, 0));
			соотПредставлений = ПредставлениеТС(мсвЗапрос);
			СтруктураТС = соотПредставлений.Получить(СтрокаТС);
			
			Форма.Объект.Организация = СтруктураТС.Организация;
			Форма.Объект.ДатаНачала = ВыделенныеЭлементы.Начало;
			Форма.Объект.ДатаОкончания = ВыделенныеЭлементы.Конец;
			Форма.Объект.Состояние = ПредопределенноеЗначение("Справочник.уатСостояниеТС.Заблокирован");
			Форма.Объект.Комментарий = ВыделенныеЭлементы.Текст;
			Возврат;
		КонецЕсли;
		
		Основание = Соответствие.Получить("Основание");
		Если Основание = Неопределено Тогда
			Основание = ДокументОснование;
		Конецесли;
		
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.уатКорректировкаЗаписейРегистров") Тогда
			ТекстНСТР = НСтр("en='For document ""Adjustment of registers records"" operation forbidden!';ru='Для документа ""Корректировка записей регистров"" операция запрещена!'");
			ПоказатьПредупреждение(, ТекстНСТР);
			ОтменаРедактирования = Истина;
			Возврат;
		КонецЕсли;
		
		Если ТекЭлементПланировщикСсылка = Основание Тогда
			
			ИзменениеПериода = Ложь;
			ИзменениеДатыИлиТС = Ложь;
			
			// Проверим изменился ли интервал, что допустимо только для Диспозиции
			Если (ТекЭлементПланировщикКон - ТекЭлементПланировщикНач)<>(ВыделенныеЭлементы.Конец - ВыделенныеЭлементы.Начало) Тогда
				Если ТипЗнч(Основание) = Тип("ДокументСсылка.уатДиспозицияТС") Тогда
					ИзменениеПериода = Истина;
				Иначе
					ТекстНСТР = НСтр("en='Period change is only allowed for document ""Disposition of vehicle""!';ru='Изменение периода разрешено только для документа ""Диспозиция ТС""!'");
					ПоказатьПредупреждение(,ТекстНСТР);
					ОтменаРедактирования = Истина;
					
					Если Элементы.ГруппаПланировщикОбщая.Видимость Тогда 
						ОбновитьПланировщик();
					КонецЕсли;
					
					Возврат;
				КонецЕсли; 
			КонецЕсли;
			
			
			ИзменениеДаты = ТекЭлементПланировщикНач <> ВыделенныеЭлементы.Начало;
			ИзменениеТС = ТекЭлементПланировщикТС <> ТСПерем;
			Если ИзменениеДаты ИЛИ ИзменениеТС Тогда
				ИзменениеДатыИлиТС = Истина;
			КонецЕсли;
			
			Если ИзменениеПериода ИЛИ ИзменениеДатыИлиТС Тогда
				Если НЕ ПроверитьИзменениеДокументаНаПланировщике(Основание) Тогда
					ОтменаРедактирования = Истина;
					Возврат;
				КонецЕсли;
				
				Если ИзменениеТС И (Основание = Неопределено Или Основание = ПредопределенноеЗначение("Документ.уатМаршрутныйЛист.ПустаяСсылка")) Тогда 
					ОтменаРедактирования = Истина;
					Возврат;
				КонецЕсли;
				
				НачалоИнтервала = ВыделенныеЭлементы.Начало;
				КонецИнтервала = ВыделенныеЭлементы.Конец;
				
				Если ИзменениеДаты ИЛИ ИзменениеПериода Тогда
					
					СекундВсего = НачалоИнтервала - Дата('00010101');
					МинутВсего = Цел(СекундВсего/300);
					РазницаСекунд = СекундВсего - МинутВсего*300;
					Если РазницаСекунд >= 150 Тогда
						МинутВсего = МинутВсего + 1;
					КонецЕсли;
					НачалоИнтервала = Дата('00010101') + МинутВсего*300;
					
					СекундВсего = КонецИнтервала - Дата('00010101');
					МинутВсего = Цел(СекундВсего/300);
					РазницаСекунд = СекундВсего - МинутВсего*300;
					Если РазницаСекунд >= 150 Тогда
						МинутВсего = МинутВсего + 1;
					КонецЕсли;
					КонецИнтервала = Дата('00010101') + МинутВсего*300;
					
				КонецЕсли;
				
				Если НастройкаРежимИзмененияДокументовИзПланировщика Тогда
					СтруктураПараметров = Новый Структура("Основание, ТСПерем, ДатаНачала, ДатаОкончания", Основание, ТСПерем, НачалоИнтервала, КонецИнтервала);
					ТекстНСТР = НСтр("en='Save changes in document <%1>?';ru='Сохранить изменения в документе <%1>?'");
					ТекстВопроса = СтрШаблон(ТекстНСТР, Строка(?(ЗначениеЗаполнено(Основание), Основание, НСтр("en='New';ru='Новый'"))));
					ПоказатьВопрос(Новый ОписаниеОповещения("ПерезаписатьДокументЗавершение", ЭтотОбъект, СтруктураПараметров), ТекстВопроса, РежимДиалогаВопрос.ДаНет,, КодВозвратаДиалога.Нет);
				Иначе
					Если Не ЗначениеЗаполнено(Основание) Тогда 
						
						Для Каждого ТекСтрокаТС Из МаршрутыДерево.ПолучитьЭлементы() Цикл 
							Если (ТипЗнч(ТСПерем) = Тип("СправочникСсылка.уатТС") И ТекСтрокаТС.ТС = ТСПерем) Или ТекСтрокаТС.GUID = ТСПерем Тогда 
								СтрокаТС = ТекСтрокаТС;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						Если СтрокаТС = Неопределено Тогда 
							Возврат;
						КонецЕсли;
						
						Оповестить("Изменен маршрутный лист из планировщика",
						Новый Структура("СтрокаТС, GUID, ДатаНачала", ТСПерем,
						СтрокаТС.GUID, НачалоИнтервала), ЭтотОбъект);
						
					Иначе
						
						Для Каждого ТекСтрокаТС Из МаршрутыДерево.ПолучитьЭлементы() Цикл 
							Если (ТипЗнч(ТСПерем) = Тип("СправочникСсылка.уатТС") И ТекСтрокаТС.ТС = ТСПерем) Или ТекСтрокаТС.GUID = ТСПерем Тогда 
								СтрокаТС     = ТекСтрокаТС.ТС;
								СтрокаТСGUID = ТекСтрокаТС.GUID;
								Прицеп1      = ТекСтрокаТС.Прицеп1;
								Прицеп2      = ТекСтрокаТС.Прицеп2;
								Прервать;
							КонецЕсли;
						КонецЦикла;
						
						ТСОсновное = Неопределено;
						МассивПЛ   = Новый Массив();
						ПрезаписатьДокумент(Основание, СтрокаТС, НачалоИнтервала,
							КонецИнтервала, ТСОсновное, Прицеп1, Прицеп2, МассивПЛ);
						ПараметрыПереноса = Новый Структура("МЛ, ТС, ТСОсновное, НачалоИнтервала", Основание, СтрокаТСGUID, ТСОсновное, НачалоИнтервала); 
						ДокументОснование = Неопределено;
						
						Если МассивПЛ.Количество() <> 0 Тогда
							ТекстВопроса = НСтр("ru = 'Обнаружены связанные документы ""Путевой лист"":'") + Символы.ПС;
							Для Каждого ТекСтрока Из МассивПЛ Цикл
								ТекстВопроса = ТекстВопроса + ТекСтрока + Символы.ПС;
							КонецЦикла;
							ТекстВопроса = ТекстВопроса + НСтр("ru = 'Обновить ТС и водителя в ПЛ?'");
							ПоказатьВопрос(Новый ОписаниеОповещения("ТСВМЛПриИзмененииВопрос", ЭтотОбъект,
								Новый Структура("ПараметрыПереноса, МассивПЛ", ПараметрыПереноса, МассивПЛ)),
							ТекстВопроса, РежимДиалогаВопрос.ДаНет);
						Иначе
							Оповестить("Обновить маршрутные листы АРМ", ПараметрыПереноса, ЭтотОбъект);
						КонецЕсли;

					КонецЕсли;
				КонецЕсли;
			Иначе
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриИзмененииФлагаОтображаемогоДокумента(Элемент)
	ОбновитьНадписьКоличествоОтображаемыеДокументы();
	ОбновитьПланировщик();
КонецПроцедуры

&НаКлиенте
Процедура ДатаПланированияПриИзменении(Элемент)  
	ОбновитьПланировщик();
КонецПроцедуры

&НаКлиенте
Процедура ПланФактПриИзменении(Элемент)
	ПланировщикОтображатьФактДаты = Не ПланФакт = 0;
		
	Если Элементы.ГруппаПланировщикОбщая.Видимость Тогда 
		ОбновитьПланировщик();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияДокументРегистраторНажатие(Элемент)
	ИмяОбъекта = ИмяОбъектаМетаданныхВыбранногоДокумента(ВыбранныйДокумент);
	СтруктураПараметров = Новый Структура("Ключ", ВыбранныйДокумент);
	ИмяФормыДляОткрытия = "Документ." + ИмяОбъекта + ".ФормаОбъекта";
	ОткрытьФорму(ИмяФормыДляОткрытия, СтруктураПараметров, ЭтотОбъект,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);	
КонецПроцедуры 

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура СохранитьНастройки()
	
	Если Не ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда 
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураНастроекАРМ = Новый Структура();
	
	СтруктураНастроекАРМ.Вставить("НастройкаРежимИзмененияДокументовИзПланировщика",                     НастройкаРежимИзмененияДокументовИзПланировщика);
	СтруктураНастроекАРМ.Вставить("НастройкаВыделятьТекущийЗаказНаПланировщике",                         НастройкаВыделятьТекущийЗаказНаПланировщике);
	СтруктураНастроекАРМ.Вставить("НастройкаВремяМеждуПунктамиПоУмолчанию",                              НастройкаВремяМеждуПунктамиПоУмолчанию);
	СтруктураНастроекАРМ.Вставить("НастройкаВремяНачалаПланирования",                                    НастройкаВремяНачалаПланирования);
	СтруктураНастроекАРМ.Вставить("НастройкаВремяОкончанияПланирования",                                 НастройкаВремяОкончанияПланирования);
	СтруктураНастроекАРМ.Вставить("НастройкаРазличныеЦветаСтатусовМЛ",                                   НастройкаРазличныеЦветаСтатусовМЛ);
	
	ХранилищеНастроекДанныхФорм.Сохранить(
		"Обработка.уатАРМЛогиста_уэ.Форма.ОсновнаяФорма", 
		"Планировщик", 
		СтруктураНастроекАРМ
	);  
	
	СтруктураОтображаемыхДокументов = Новый Структура();
	СтруктураОтображаемыхДокументов.Вставить("ОтображатьПЛ", ОтображатьПЛ);
	СтруктураОтображаемыхДокументов.Вставить("ОтображатьМЛ", ОтображатьМЛ);
	СтруктураОтображаемыхДокументов.Вставить("ОтображатьРЛ", ОтображатьРЛ);
	СтруктураОтображаемыхДокументов.Вставить("ОтображатьРазнарядки", ОтображатьРазнарядки);
	СтруктураОтображаемыхДокументов.Вставить("ОтображатьЗаявкиНаРемонт", ОтображатьЗаявкиНаРемонт);
	СтруктураОтображаемыхДокументов.Вставить("ОтображатьДиспозицииТС", ОтображатьДиспозицииТС);
	СтруктураОтображаемыхДокументов.Вставить("ОтображатьТПЛ", ОтображатьТПЛ);
	
	ХранилищеНастроекДанныхФорм.Сохранить(
		"Обработка.уатАРМДиспетчера.Формы.ФормаПланировщика", 
		"НастройкиФормыПланировщика", СтруктураОтображаемыхДокументов,,
		Пользователи.АвторизованныйПользователь());
	
КонецПроцедуры

&НаСервере
Функция ВосстановитьНастройки()
	
	Если ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда 
		СтруктураНастройки = ХранилищеНастроекДанныхФорм.Загрузить(
			"Обработка.уатАРМЛогиста_уэ.Форма.ОсновнаяФорма",
			"Планировщик"
		);
		
		Если ТипЗнч(СтруктураНастройки) = Тип("Структура") Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураНастройки);
		КонецЕсли; 
		
		СтруктураОтображаемыхДокументов = ХранилищеНастроекДанныхФорм.Загрузить(
			"Обработка.уатАРМДиспетчера.Формы.ФормаПланировщика",
			"НастройкиФормыПланировщика"); 
		
		Если ТипЗнч(СтруктураОтображаемыхДокументов) = Тип("Структура") Тогда
			ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураОтображаемыхДокументов); 
		Иначе
			ОтображатьДиспозицииТС   = Истина;
			ОтображатьЗаявкиНаРемонт = Истина;
			ОтображатьМЛ 			 = Истина;
			ОтображатьПЛ 			 = Истина;
			ОтображатьРазнарядки 	 = Истина;
			ОтображатьРЛ 			 = Истина;
			ОтображатьТПЛ 			 = Истина;
		КонецЕсли;
		
	КонецЕсли;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьДанныеПланировщика(Знач Маршруты = Неопределено)
	
	МассивТС.Очистить();
	
	МаршрутыДерево.ПолучитьЭлементы().Очистить();
	Если Маршруты = Неопределено Тогда
		
		
	ИначеЕсли ТипЗнч(Маршруты) = Тип("ДанныеФормыДерево") Тогда
		Для Каждого ТекСтрока Из Маршруты.ПолучитьЭлементы() Цикл
			НоваяСтрока = МаршрутыДерево.ПолучитьЭлементы().Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			МассивТС.Добавить(ТекСтрока.ТС);
			Для Каждого ТекСтрокаМЛ Из ТекСтрока.ПолучитьЭлементы() Цикл
				НоваяСтрокаМЛ = НоваяСтрока.ПолучитьЭлементы().Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаМЛ, ТекСтрокаМЛ);
				Для Каждого ТекСтрокаПункт Из ТекСтрокаМЛ.ПолучитьЭлементы() Цикл
					НоваяСтрокаПункт = НоваяСтрокаМЛ.ПолучитьЭлементы().Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаПункт, ТекСтрокаПункт);
				КонецЦикла;
			КонецЦикла;
		КонецЦикла;
	Иначе
		Для Каждого ТекСтрока Из Маршруты Цикл
			НоваяСтрока = МаршрутыДерево.ПолучитьЭлементы().Добавить();
			МассивТС.Добавить(ТекСтрока.ТС);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
			Если ТекСтрока.МассивМЛ.Количество() <> 0 Тогда
				НоваяСтрокаМЛ = НоваяСтрока.ПолучитьЭлементы().Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрокаМЛ, ТекСтрока);
				НоваяСтрокаМЛ.Группировка = ТекСтрока.МЛ;
				Для Каждого ТекСтрокаПункт Из ТекСтрока.МассивМЛ Цикл
					НоваяСтрокаПункт = НоваяСтрокаМЛ.ПолучитьЭлементы().Добавить();
					НоваяСтрокаПункт.Группировка = ТекСтрока.МЛ;
					ЗаполнитьЗначенияСвойств(НоваяСтрокаПункт, ТекСтрокаПункт);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ОбновитьНадписьКоличествоВыбранных();
КонецПроцедуры

&НаКлиенте
Процедура ВыделитьТСНаПланировщике(ЗначИзмерениеТС)
		
	Если Планировщик.Измерения.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	мсвИзмерениеТС = Новый Массив;
	Для Каждого ТекИзмерение Из Планировщик.Измерения[0].Элементы Цикл 
		Если ПланировщикГруппировка = "Принадлежность ТС" ИЛИ ПланировщикГруппировка = "Тип ТС" Тогда
			Для Каждого ТекИзмерениеТС Из ТекИзмерение.Элементы Цикл
				мсвИзмерениеТС.Добавить(ТекИзмерениеТС);
			КонецЦикла;
		Иначе
			мсвИзмерениеТС.Добавить(ТекИзмерение);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекИзмерениеТС Из мсвИзмерениеТС Цикл
		Если ТекИзмерениеТС.Значение = ЗначИзмерениеТС Тогда 
			ТекИзмерениеТС.Шрифт      = Новый Шрифт(,, Истина);
			ТекИзмерениеТС.ЦветТекста = Новый Цвет(0, 0, 255);
		Иначе 
			ТекИзмерениеТС.Шрифт      = Новый Шрифт();
			ТекИзмерениеТС.ЦветТекста = Новый Цвет();
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДатуПланирования(ТекДатаПланирования)
		
	НачальнаяДатаПланирования = ТекДатаПланирования;
	ОбновитьПланировщик();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПланировщик()
	
	ДатаНачалаПланирования = НачалоДня(НачальнаяДатаПланирования);
	ДатаКонцаПланирования  = НачальнаяДатаПланирования + ДнейПланировщика *24 * 3600;
	
	Если Планировщик.ТекущиеПериодыОтображения.Количество() Тогда 
		Планировщик.ТекущиеПериодыОтображения[0].Начало = ДатаНачалаПланирования;
		Планировщик.ТекущиеПериодыОтображения[0].Конец  = ДатаКонцаПланирования;
	Иначе 
		Планировщик.ТекущиеПериодыОтображения.Добавить(ДатаНачалаПланирования, ДатаКонцаПланирования);
	КонецЕсли;
	
	Планировщик.НачалоПериодаОтображения = ДатаНачалаПланирования;
	Планировщик.КонецПериодаОтображения  = ДатаКонцаПланирования;
	
	Планировщик.Измерения.Очистить();
	Если ПланировщикГруппировка = "Принадлежность ТС" Тогда
		ЗаголовокГруппировки = "Принадлежность ТС / ТС"
	ИначеЕсли ПланировщикГруппировка = "Тип ТС" Тогда
		ЗаголовокГруппировки = "Тип ТС / ТС"
	Иначе
		ЗаголовокГруппировки = "ТС"
	КонецЕсли;
	ИзмерениеТС = Планировщик.Измерения.Добавить(НСтр("en='Vehicle';ru='ТС'"));
	ИзмерениеТС.Текст = ЗаголовокГруппировки;
	
	ЭлементыПланировщика = Планировщик.Элементы;
	ЭлементыПланировщика.Очистить();
	
	Планировщик.ИнтервалыФона.Очистить();
	
	Если НЕ Планировщик.ШкалаВремени.Элементы[1].Кратность = ДетализацияВЧасах Тогда
		Планировщик.ШкалаВремени.Элементы[1].Кратность = ДетализацияВЧасах;
	КонецЕсли;
	
	Планировщик.ШкалаВремени.Элементы[1].Видимость = (ДетализацияВЧасах <> 24);
	
	мсвТС      = Новый Массив();
	мсвНовыеМЛ = Новый Массив();
	
	Для Каждого ТекСтрокаТС Из МаршрутыДерево.ПолучитьЭлементы() Цикл
		Если ТекСтрокаТС.СобственноеТС = 6 И ТекСтрокаТС.КоличествоВиртуальныхТС > 0 Тогда // Это виртуальное ТС без маршрутов.
			Продолжить;
			
		ИначеЕсли ЗначениеЗаполнено(ТекСтрокаТС.Группировка) Тогда 
			ДанныеТС = Новый Структура();
			ДанныеТС.Вставить("ТС",               ТекСтрокаТС.Группировка);
			ДанныеТС.Вставить("GUID",             ТекСтрокаТС.GUID);
			ДанныеТС.Вставить("ПринадлежностьТС", ТекСтрокаТС.ПринадлежностьТС);
			Если ЗначениеЗаполнено(ТекСтрокаТС.Прицеп1)
				ИЛИ ЗначениеЗаполнено(ТекСтрокаТС.Прицеп2) Тогда 
				ДанныеТС.Вставить("ЕстьПрицепы", Истина);
			Иначе 
				ДанныеТС.Вставить("ЕстьПрицепы", Ложь);
			КонецЕсли;
			
			мсвТС.Добавить(ДанныеТС);
			
			Для Каждого ТекМЛ Из ТекСтрокаТС.ПолучитьЭлементы() Цикл 
				НовыйМЛ = Не ЗначениеЗаполнено(ТекМЛ.Группировка) Или ТекМЛ.Модифицированность;
				Если НЕ НовыйМЛ Тогда
					Продолжить;
				КонецЕсли;
				
				КоличествоСтрокМЛ = ТекМЛ.ПолучитьЭлементы().Количество();
				
				Если КоличествоСтрокМЛ = 0 Тогда 
					Продолжить;
				КонецЕсли;
				
				ОбщийВесМЛ   = 0;
				ОбщийОбъемМЛ = 0;
				Для Каждого ТекСтрокаПункт Из ТекМЛ.ПолучитьЭлементы() Цикл
					Если ТекСтрокаПункт.ВесБрутто > ОбщийВесМЛ Тогда
						ОбщийВесМЛ = ТекСтрокаПункт.ВесБрутто;
					КонецЕсли;
					Если ТекСтрокаПункт.Объем > ОбщийОбъемМЛ Тогда
						ОбщийОбъемМЛ = ТекСтрокаПункт.Объем;
					КонецЕсли;
				КонецЦикла; 
				
				ДанныеМЛ = Новый Структура();
				ДанныеМЛ.Вставить("ТС",               ТекСтрокаТС.Группировка);
				ДанныеМЛ.Вставить("GUID",             ТекСтрокаТС.GUID);
				ДанныеМЛ.Вставить("МаршрутныйЛист",   ТекМЛ.Группировка);
				ДанныеМЛ.Вставить("ДатаНачала",       ТекМЛ.ПолучитьЭлементы()[0].ВремяПрибытияВПункт);
				ДанныеМЛ.Вставить("ДатаОкончания",    ТекМЛ.ПолучитьЭлементы()[КоличествоСтрокМЛ-1].УбытиеПлан);
				ДанныеМЛ.Вставить("АдресОтправления", ТекМЛ.ПолучитьЭлементы()[0].Группировка);
				ДанныеМЛ.Вставить("АдресНазначения",  ТекМЛ.ПолучитьЭлементы()[КоличествоСтрокМЛ-1].Группировка);
				ДанныеМЛ.Вставить("ВесБрутто",        ОбщийВесМЛ);
				ДанныеМЛ.Вставить("Объем",            ОбщийОбъемМЛ);
				ДанныеМЛ.Вставить("НовыйМЛ",          НовыйМЛ);
				мсвНовыеМЛ.Добавить(ДанныеМЛ);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	мсвСредняяСкоростьДвижения = Новый Массив();
	Для Каждого ТекСтрока Из кэшСредняяСкоростьДвижения Цикл 
		мсвСредняяСкоростьДвижения.Добавить(
			Новый Структура(
				"НачалоПериода, КонецПериода, Скорость",
				ТекСтрока.НачалоПериода,
				ТекСтрока.КонецПериода,
				ТекСтрока.Скорость
			)
		);
	КонецЦикла;
	
	
	НастройкиОтображенияДокументов = Новый Структура();
	НастройкиОтображенияДокументов.Вставить("ОтображатьПЛ", ОтображатьПЛ);
	НастройкиОтображенияДокументов.Вставить("ОтображатьМЛ", ОтображатьМЛ);
	НастройкиОтображенияДокументов.Вставить("ОтображатьРЛ", ОтображатьРЛ);
	НастройкиОтображенияДокументов.Вставить("ОтображатьРазнарядки", ОтображатьРазнарядки);
	НастройкиОтображенияДокументов.Вставить("ОтображатьЗаявкиНаРемонт", ОтображатьЗаявкиНаРемонт);
	НастройкиОтображенияДокументов.Вставить("ОтображатьДиспозицииТС", ОтображатьДиспозицииТС); 
	НастройкиОтображенияДокументов.Вставить("ОтображатьТПЛ", ОтображатьТПЛ);
	
	ДанныеДляПланировщика = СформироватьДанныеДляПланировщика(
		?(НастройкаВыделятьТекущийЗаказНаПланировщике, ЗаказДляПланирования, Неопределено), 
		мсвТС, 
		мсвНовыеМЛ, 
		ДатаНачалаПланирования, 
		ДатаКонцаПланирования,
		ПланировщикОтображатьФактДаты,
		НастройкаВремяМеждуПунктамиПоУмолчанию,
		НастройкаВремяНачалаПланирования,
		НастройкаВремяОкончанияПланирования,
		ДнейПланировщика,
		Новый Цвет(153, 204, 255),
		мсвСредняяСкоростьДвижения, 
		НастройкиОтображенияДокументов,
		НастройкаРазличныеЦветаСтатусовМЛ
	);
	
	Если ДанныеДляПланировщика.Свойство("ЗаказДляПланирования") Тогда 
		Если ДанныеДляПланировщика.ДатаОкончанияПланированияПоЗаказу >= ДатаНачалаПланирования 
			И ДанныеДляПланировщика.ДатаНачалаПланированияПоЗаказу <= ДатаКонцаПланирования Тогда 
			
			НовыйСтрокаИзм = ИзмерениеТС.Элементы.Добавить(ДанныеДляПланировщика.ЗаказДляПланирования.Ссылка);
			НовыйСтрокаИзм.Текст = ДанныеДляПланировщика.ЗаказДляПланирования.Номер;
			НовыйСтрокаИзм.ЦветФона = Новый Цвет(250, 250, 225);
			
			ЗначенияИзмерений = Новый Соответствие();
			ЗначенияИзмерений.Вставить("ТС",        ДанныеДляПланировщика.ЗаказДляПланирования.Ссылка);
			ЗначенияИзмерений.Вставить("Основание", ДанныеДляПланировщика.ЗаказДляПланирования.Ссылка);
			
			НовыйЭлемент = ЭлементыПланировщика.Добавить(
				ДанныеДляПланировщика.ДатаНачалаПланированияПоЗаказу, 
				ДанныеДляПланировщика.ДатаОкончанияПланированияПоЗаказу
			);
			
			НовыйЭлемент.Значение          = ДанныеДляПланировщика.ЗаказДляПланирования.Ссылка;
			НовыйЭлемент.ЗначенияИзмерений = Новый ФиксированноеСоответствие(ЗначенияИзмерений);
			НовыйЭлемент.Текст             = "Заказ №" + ДанныеДляПланировщика.ЗаказДляПланирования.Номер;
			НовыйЭлемент.Подсказка         = Строка(ДанныеДляПланировщика.ЗаказДляПланирования.Ссылка);
			НовыйЭлемент.ЦветФона          = ДанныеДляПланировщика.ЗаказДляПланирования.ЦветНаПланировщике;
		КонецЕсли;
	Иначе
		НовыйСтрокаИзм = ИзмерениеТС.Элементы.Добавить("");
		НовыйСтрокаИзм.Текст = "";
		НовыйСтрокаИзм.ЦветФона = Новый Цвет(250, 250, 225);
		
		ЗначенияИзмерений = Новый Соответствие();
		ЗначенияИзмерений.Вставить("ТС",        "");
		ЗначенияИзмерений.Вставить("Основание", "");
		
		НовыйЭлемент = ЭлементыПланировщика.Добавить(
		ДатаНачалаПланирования, 
		ДатаНачалаПланирования
		);
		
		НовыйЭлемент.Значение          = "";
		НовыйЭлемент.ЗначенияИзмерений = Новый ФиксированноеСоответствие(ЗначенияИзмерений);
		НовыйЭлемент.Текст             = "";
		НовыйЭлемент.ЦветФона          = Новый Цвет(255,255,255);
	КонецЕсли;
	
	ТекущиеДанныеСтрокаТС = Неопределено;
	ТекАктивноеТС = Неопределено;
	Если Не ТекущиеДанныеСтрокаТС = Неопределено Тогда 
		Если ТекущиеДанныеСтрокаТС.СобственноеТС = 6 Тогда 
			ТекАктивноеТС = ТекущиеДанныеСтрокаТС.GUID;
		Иначе 
			ТекАктивноеТС = ТекущиеДанныеСтрокаТС.Группировка;
		КонецЕсли;
	КонецЕсли;
	
	флИспользоватьГруппировку = (ПланировщикГруппировка = "Принадлежность ТС"
		ИЛИ ПланировщикГруппировка = "Тип ТС");
		
	Если флИспользоватьГруппировку Тогда
		списГруппыТС = Новый СписокЗначений;
		Для Каждого ТекСтрока Из мсвТС Цикл
			Если ПланировщикГруппировка = "Принадлежность ТС" Тогда
				ТекГруппа = ТекСтрока.ПринадлежностьТС;
				Если НЕ ЗначениеЗаполнено(ТекГруппа) Тогда
					ТекГруппа = "<Принадлежность не указана>";
				КонецЕсли;
			Иначе                 
				ТекГруппа = ЗначениеРеквизитаОбъекта(ТекСтрока.ТС, "ТипТС");
				Если НЕ ЗначениеЗаполнено(ТекГруппа) Тогда
					ТекГруппа = "<Тип не указан>";
				КонецЕсли;
			КонецЕсли;
			Если списГруппыТС.НайтиПоЗначению(ТекГруппа) = Неопределено Тогда
				списГруппыТС.Добавить(ТекГруппа);
			КонецЕсли;
		КонецЦикла;
		списГруппыТС.СортироватьПоЗначению();
		Для Каждого ТекГруппа Из списГруппыТС Цикл
			ИзмерениеТС.Элементы.Добавить(ТекГруппа.Значение);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из мсвТС Цикл
		ЗначИзмерениеТС = ?(ТекСтрока.GUID = "", ТекСтрока.ТС, ТекСтрока.GUID);
		ТСПерем = ИзмерениеТС.Элементы.Найти(ЗначИзмерениеТС);
		Если ТСПерем = Неопределено Тогда
			Если флИспользоватьГруппировку Тогда
				Если ПланировщикГруппировка = "Принадлежность ТС" Тогда
					ТекГруппа = ТекСтрока.ПринадлежностьТС;
					Если НЕ ЗначениеЗаполнено(ТекГруппа) Тогда
						ТекГруппа = "<Принадлежность не указана>";
					КонецЕсли;
				Иначе
					ТекГруппа = ЗначениеРеквизитаОбъекта(ТекСтрока.ТС, "ТипТС");
					Если НЕ ЗначениеЗаполнено(ТекГруппа) Тогда
						ТекГруппа = "<Тип не указан>";
					КонецЕсли;
				КонецЕсли;
				ГруппаТС = ИзмерениеТС.Элементы.Найти(ТекГруппа);
				Если ГруппаТС.Элементы.Найти(ЗначИзмерениеТС) <> Неопределено Тогда
					Продолжить;
				КонецЕсли;
				НовыйТС = ГруппаТС.Элементы.Добавить(ЗначИзмерениеТС);
				
			Иначе
				НовыйТС = ИзмерениеТС.Элементы.Добавить(ЗначИзмерениеТС);
				
			КонецЕсли;
							
			НовыйТС.Текст = ТекСтрока.Представление;
			
			Если ЗначИзмерениеТС = ТекАктивноеТС Тогда 
				НовыйТС.Шрифт      = Новый Шрифт(,, Истина);
				НовыйТС.ЦветТекста = Новый Цвет(0, 0, 255);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ЭлементПланирования Из ДанныеДляПланировщика.ЭлементыПланирования Цикл 
		СоответствиеЗначений = Новый Соответствие();
		СоответствиеЗначений.Вставить("ТС", ЭлементПланирования.ТС);
		Если ЭлементПланирования.Свойство("Основание") Тогда 
			СоответствиеЗначений.Вставить("Основание", ЭлементПланирования.Основание);
		КонецЕсли;
		
		ТекДатаНачала    = ТекущаяДата();
		ТекДатаОкончания = ТекущаяДата();
		Если ЗначениеЗаполнено(ЭлементПланирования.ДатаНачала) Тогда
			ТекДатаНачала = ЭлементПланирования.ДатаНачала;
		КонецЕсли;
		Если ЗначениеЗаполнено(ЭлементПланирования.ДатаОкончания) Тогда
			ТекДатаОкончания = ЭлементПланирования.ДатаОкончания;
		КонецЕсли;
		
		Попытка
			НовыйЭлемент = ЭлементыПланировщика.Добавить(ТекДатаНачала, ТекДатаОкончания);
			НовыйЭлемент.ЗначенияИзмерений = Новый ФиксированноеСоответствие(СоответствиеЗначений);
		Исключение
			НовыйЭлемент = ЭлементыПланировщика.Добавить(ТекущаяДата(), ТекущаяДата());
			НовыйЭлемент.ЗначенияИзмерений = Новый ФиксированноеСоответствие(СоответствиеЗначений);
		КонецПопытки;
		
		Если ЭлементПланирования.Свойство("Текст") Тогда
			НовыйЭлемент.Текст = ЭлементПланирования.Текст;
		КонецЕсли;
		
		Если ЭлементПланирования.Свойство("Картинка") Тогда
			НовыйЭлемент.Картинка = ЭлементПланирования.Картинка;
		КонецЕсли;
		
		Если ЭлементПланирования.Свойство("Подсказка") Тогда
			НовыйЭлемент.Подсказка = ЭлементПланирования.Подсказка;
		КонецЕсли;
		
		Если ЭлементПланирования.Свойство("ЦветФона") Тогда
			НовыйЭлемент.ЦветФона = ЭлементПланирования.ЦветФона;
		КонецЕсли;
	КонецЦикла;

	Для Каждого ИнтервалФона Из ДанныеДляПланировщика.ИнтервалыФона Цикл 
		НовИнтервал = Планировщик.ИнтервалыФона.Добавить(ИнтервалФона.ДатаНачала, ИнтервалФона.ДатаОкончания);
		НовИнтервал.Цвет = ИнтервалФона.ЦветФона; 
	КонецЦикла;
	
	// Разворачиваем все группы.
	Если флИспользоватьГруппировку Тогда
		Для Каждого ТекГруппа Из списГруппыТС Цикл
			СоответствиеЗначений = Новый Соответствие;
			СоответствиеЗначений.Вставить("ТС", ТекГруппа.Значение);
			Элементы.Планировщик.РазвернутьЭлементИзмерения(Новый ФиксированноеСоответствие(СоответствиеЗначений));
		КонецЦикла;
	КонецЕсли;
	
	ВыделитьТСНаПланировщике(ТекТС);
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьОснованиеЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	Иначе
		Основание = ДополнительныеПараметры;
		ТекстОшибкиПриОтмене = "";
		ОтменитьПроведениеОснования(Основание, ТекстОшибкиПриОтмене);
		Если Не ТекстОшибкиПриОтмене = "" Тогда 
			ПоказатьПредупреждение(, ТекстОшибкиПриОтмене);
		Иначе 
			ОбновитьПланировщик();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Результат.СтруктураНастроек);
		СохранитьНастройки();
		ПодключитьОбработчикОжидания("ОбновитьПланировщик", 0.1, Истина);
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ПерезаписатьДокументЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	Если Ответ = КодВозвратаДиалога.Нет Тогда
		Возврат;
	Иначе
		Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
			Если Не ЗначениеЗаполнено(ДополнительныеПараметры.Основание) Тогда 
				
				ТСПерем = ДополнительныеПараметры.ТСПерем;
				Для Каждого ТекСтрокаТС Из МаршрутыДерево.ПолучитьЭлементы() Цикл 
					Если (ТипЗнч(ТСПерем) = Тип("СправочникСсылка.уатТС") И ТекСтрокаТС.ТС = ТСПерем) Или ТекСтрокаТС.GUID = ТСПерем Тогда 
						СтрокаТС = ТекСтрокаТС;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Если СтрокаТС = Неопределено Тогда 
					Возврат;
				КонецЕсли;
				
				Оповестить("Изменен маршрутный лист из планировщика",
				Новый Структура("СтрокаТС, GUID, ДатаНачала", ТСПерем,
				СтрокаТС.GUID, ДополнительныеПараметры.ДатаНачала) , ЭтотОбъект);
				
			Иначе
				ТСПерем = ДополнительныеПараметры.ТСПерем;
				Для Каждого ТекСтрокаТС Из МаршрутыДерево.ПолучитьЭлементы() Цикл 
					Если (ТипЗнч(ТСПерем) = Тип("СправочникСсылка.уатТС") И ТекСтрокаТС.ТС = ТСПерем) Или ТекСтрокаТС.GUID = ТСПерем Тогда 
						СтрокаТС = ТекСтрокаТС.ТС;
						СтрокаТСGUID = ТекСтрокаТС.GUID;
						Прицеп1      = ТекСтрокаТС.Прицеп1;
						Прицеп2      = ТекСтрокаТС.Прицеп2;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				ТСОсновное = Неопределено;
				МассивПЛ   = Новый Массив();
				ПрезаписатьДокумент(ДополнительныеПараметры.Основание, СтрокаТС,
					ДополнительныеПараметры.ДатаНачала, ДополнительныеПараметры.ДатаОкончания, ТСОсновное,
					Прицеп1, Прицеп2, МассивПЛ);
				ПараметрыПереноса = Новый Структура("МЛ, ТС, ТСОсновное, НачалоИнтервала",
					ДополнительныеПараметры.Основание, СтрокаТСGUID, ТСОсновное, ДополнительныеПараметры.ДатаНачала); 
				ДокументОснование = Неопределено;
				
				Если МассивПЛ.Количество() <> 0 Тогда
					ТекстВопроса = НСтр("ru = 'Обнаружены связанные документы ""Путевой лист"":'") + Символы.ПС;
					Для Каждого ТекСтрока Из МассивПЛ Цикл
						ТекстВопроса = ТекстВопроса + ТекСтрока + Символы.ПС;
					КонецЦикла;
					ТекстВопроса = ТекстВопроса + НСтр("ru = 'Обновить ТС и водителя в ПЛ?'");
					ПоказатьВопрос(Новый ОписаниеОповещения("ТСВМЛПриИзмененииВопрос", ЭтотОбъект,
					Новый Структура("ПараметрыПереноса, МассивПЛ", ПараметрыПереноса, МассивПЛ)),
					ТекстВопроса, РежимДиалогаВопрос.ДаНет);
				Иначе
					Оповестить("Обновить маршрутные листы АРМ", ПараметрыПереноса, ЭтотОбъект);
				КонецЕсли;

			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьДиспозициюЗавершение(Результат, ДополнительныеПараметры) Экспорт
	ОбновитьПланировщик();
КонецПроцедуры

&НаСервере
Процедура ОтменитьПроведениеОснования(Основание, ТекстОшибкиПриОтмене)
	
	ДокументОснование = Основание.ПолучитьОбъект();
	Попытка
		ДокументОснование.Записать(РежимЗаписиДокумента.ОтменаПроведения);
	Исключение
		ТекстОшибкиПриОтмене = НСтр("en='Failed to cancel posting of document!';ru='Не удалось отменить проведение документа!'") + Символы.ПС + ОписаниеОшибки();
	КонецПопытки;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруОснования(Основание, Падежь = 0)
	СтруктураОснование = Новый Структура("Представление, Номер, Дата, ДатаПредставление", "", "", Дата("00010101"), "");
	Если ЗначениеЗаполнено(Основание) Тогда
		СтруктураОснование.Номер = Основание.Номер;
		СтруктураОснование.Дата  = Основание.Дата;
		СтруктураОснование.ДатаПредставление = Формат(Основание.Дата, "ДЛФ=Д");
		Если ТипЗнч(Основание) = Тип("ДокументСсылка.уатДиспозицияТС") Тогда
			Если Падежь = 1 Тогда
				СтруктураОснование.Представление = НСтр("en='Disposition of vehicle';ru='Диспозицию ТС'");
			Иначе
				СтруктураОснование.Представление = НСтр("en='Vehicle disposition';ru='Диспозиция ТС'");
			КонецЕсли;
		ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.уатМаршрутныйЛист") Тогда
			Если Падежь = 1 Тогда
				СтруктураОснование.Представление = НСтр("en='Routing list';ru='Маршрутный Лист'");	
			Иначе
				СтруктураОснование.Представление = НСтр("en='Routing list';ru='Маршрутный Лист'");
			КонецЕсли;
		ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.уатПутевойЛист") Тогда
			Если Падежь = 1 Тогда
				СтруктураОснование.Представление = НСтр("en='Waybill';ru='Путевой Лист'");
			Иначе
				СтруктураОснование.Представление = НСтр("en='Waybill';ru='Путевой Лист'");
			КонецЕсли;
		ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.уатРазнарядка") Тогда
			Если Падежь = 1 Тогда
				СтруктураОснование.Представление = НСтр("en='Daily vehicles plan';ru='Разнарядку'");	
			Иначе
				СтруктураОснование.Представление = НСтр("en='Daily vehicles plan';ru='Разнарядка'");
			КонецЕсли;
		ИначеЕсли ТипЗнч(Основание) = Тип("ДокументСсылка.уатРемонтныйЛист") Тогда
			Если Падежь = 1 Тогда
				СтруктураОснование.Представление = НСтр("en='Repair List';ru='Ремонтный Лист'");
			Иначе
				СтруктураОснование.Представление = НСтр("en='Repair List';ru='Ремонтный Лист'");
			КонецЕсли;
		Иначе
			СтруктураОснование.Представление = НСтр("en='Document';ru='Документ'");
		КонецЕсли;
		
	КонецЕсли;
	Возврат СтруктураОснование;	
КонецФункции

&НаСервереБезКонтекста
Функция ЗначениеРеквизитаОбъекта(ОбъектСсылка, ИмяРеквизита)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектСсылка, ИмяРеквизита)
КонецФункции

&НаСервереБезКонтекста
Функция СформироватьДанныеДляПланировщика(ЗаказДляПланирования, мсвТС, мсвНовыеМЛ, ДатаНачалаПланирования, 
		ДатаКонцаПланирования, ПланировщикОтображатьФактДаты, ВремяМеждуПунктамиПоУмолчанию, 
		НастройкаВремяНачалаПланирования, НастройкаВремяОкончанияПланирования, ДнейПланировщика, 
		ЦветОконЗаказаНаПланировщике, кэшСредняяСкоростьДвижения, НастройкиОтображенияДокументов, РазличныеЦветаСтатусовМЛ)
	
	ДанныеДляПланировщика = Новый Структура();
	
	// Если выбран заказ для планирования - формирование данных для отображения.
	Если ЗначениеЗаполнено(ЗаказДляПланирования) Тогда 
		ДатаНачалаПланированияПоЗаказу    = Неопределено;
		ДатаОкончанияПланированияПоЗаказу = Неопределено;
		
		ЗапросПлановыхДатЗаказа = Новый Запрос();
		ЗапросПлановыхДатЗаказа.УстановитьПараметр("Этап", ЗаказДляПланирования);
		ЗапросПлановыхДатЗаказа.Текст =
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатЭтапыМультимодальныхПеревозок_уэ.ДатаОтправленияПлан,
		|	уатЭтапыМультимодальныхПеревозок_уэ.ДатаПрибытияПлан
		|ИЗ
		|	РегистрСведений.уатЭтапыМультимодальныхПеревозок_уэ КАК уатЭтапыМультимодальныхПеревозок_уэ
		|ГДЕ
		|	уатЭтапыМультимодальныхПеревозок_уэ.Этап = &Этап
		|	И НЕ уатЭтапыМультимодальныхПеревозок_уэ.ДатаОтправленияПлан = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)
		|	И НЕ уатЭтапыМультимодальныхПеревозок_уэ.ДатаПрибытияПлан = ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)";
		
		ВыборкаПлановыхДатЗаказа = ЗапросПлановыхДатЗаказа.Выполнить().Выбрать();
		
		Если ВыборкаПлановыхДатЗаказа.Следующий() Тогда 
			ДатаНачалаПланированияПоЗаказу    = ВыборкаПлановыхДатЗаказа.ДатаОтправленияПлан;
			ДатаОкончанияПланированияПоЗаказу = ВыборкаПлановыхДатЗаказа.ДатаПрибытияПлан;
		Иначе 
			ДатаНачалаПланированияПоЗаказу = ЗаказДляПланирования.ОтправлениеС;
			мсвПунктыЗаказа = Новый Массив();
			
			мсвПунктыЗаказа.Добавить(Новый Структура("Пункт1, Лат1, Лон1, Пункт2, Лат2, Лон2, ИдентификаторСтрокиПункта, ВремяВыезда", 
				ЗаказДляПланирования.АдресОтправления, ?(ТипЗнч(ЗаказДляПланирования.АдресОтправления)=Тип("СправочникСсылка.уатПунктыНазначения"), ЗаказДляПланирования.АдресОтправления.Лат, 0), ?(ТипЗнч(ЗаказДляПланирования.АдресОтправления)=Тип("СправочникСсылка.уатПунктыНазначения"), ЗаказДляПланирования.АдресОтправления.Лон, 0),
				ЗаказДляПланирования.АдресНазначения, ?(ТипЗнч(ЗаказДляПланирования.АдресНазначения)=Тип("СправочникСсылка.уатПунктыНазначения"), ЗаказДляПланирования.АдресНазначения.Лат, 0), ?(ТипЗнч(ЗаказДляПланирования.АдресНазначения)=Тип("СправочникСсылка.уатПунктыНазначения"), ЗаказДляПланирования.АдресНазначения.Лон, 0),
				,
				'00010101' + (ЗаказДляПланирования.ОтправлениеС - НачалоДня(ЗаказДляПланирования.ОтправлениеС)))
			);
			
			ПолучитьТаблицуРасстоянийМеждуПунктами(мсвПунктыЗаказа);
			
			Если мсвПунктыЗаказа.Количество() Тогда 
				ТекВремяВПути = ПолучитьВремяВПутиСУчетомСреднейСкорости(
					мсвПунктыЗаказа[0].Расстояние,
					мсвПунктыЗаказа[0].Время,
					'00010101' + (ЗаказДляПланирования.ОтправлениеС - НачалоДня(ЗаказДляПланирования.ОтправлениеС)),
					кэшСредняяСкоростьДвижения
				);
				
				ПлановаяДлительностьЧас = Цел(ТекВремяВПути);
				ПлановаяДлительностьМин = (ТекВремяВПути - ПлановаяДлительностьЧас)*100;
				ПлановаяДлительностьСек = ПлановаяДлительностьЧас*3600 + ПлановаяДлительностьМин*60;
				
				ДатаОкончанияПланированияПоЗаказу = ДатаНачалаПланированияПоЗаказу + ПлановаяДлительностьСек;
			КонецЕсли;
		КонецЕсли;
		
		Если Не ДатаНачалаПланированияПоЗаказу = Неопределено И Не ДатаОкончанияПланированияПоЗаказу = Неопределено Тогда 
			ДанныеДляПланировщика.Вставить("ДатаНачалаПланированияПоЗаказу",    ДатаНачалаПланированияПоЗаказу);
			ДанныеДляПланировщика.Вставить("ДатаОкончанияПланированияПоЗаказу", ДатаОкончанияПланированияПоЗаказу);
			ДанныеДляПланировщика.Вставить("ЗаказДляПланирования",              Новый Структура());
			
			ДанныеДляПланировщика.ЗаказДляПланирования.Вставить("Ссылка", ЗаказДляПланирования.Ссылка);
			ДанныеДляПланировщика.ЗаказДляПланирования.Вставить("Номер",  ЗаказДляПланирования.Номер);
			
			ЦветНаПланировщике = уатЭлектронныеКартыСервер.ПолучитьЦветДокументаПоКоллекции(ЗаказДляПланирования.ЦветДокумента);
			
			ДанныеДляПланировщика.ЗаказДляПланирования.Вставить("ЦветНаПланировщике", ЦветНаПланировщике);
		КонецЕсли;
	КонецЕсли;
	
	тблТС = Новый ТаблицаЗначений();
	тблТС.Колонки.Добавить("ТС",   Новый ОписаниеТипов("СправочникСсылка.уатТС"));
	тблТС.Колонки.Добавить("GUID", Новый ОписаниеТипов("Строка"));

	мТС = Новый Массив();
	Для Каждого ТекСтрока Из мсвТС Цикл
		мТС.Добавить(ТекСтрока.ТС);
	КонецЦикла;
	
	СоответствиеТС = Новый Соответствие();
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("мТС", мТС);
	Запрос.Текст = "ВЫБРАТЬ
	               |	уатТС.Ссылка КАК Ссылка,
	               |	уатТС.Наименование КАК Наименование
	               |ИЗ
	               |	Справочник.уатТС КАК уатТС
	               |ГДЕ
	               |	уатТС.Ссылка В(&мТС)";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СоответствиеТС.Вставить(Выборка.Ссылка, Выборка.Наименование);
	КонецЦикла;
	
	Для Каждого ТекСтрока Из мсвТС Цикл
		НаименованиеТС = СоответствиеТС.Получить(ТекСтрока.ТС);
		НаименованиеТС = ?(НаименованиеТС = Неопределено, "", НаименованиеТС);
		ТекСтрока.Вставить("Представление", СоответствиеТС.Получить(ТекСтрока.ТС) + ?(ТекСтрока.ЕстьПрицепы, " + П", ""));
		
		НовСтрокаТабТС = тблТС.Добавить();
		НовСтрокаТабТС.ТС   = ТекСтрока.ТС;
		НовСтрокаТабТС.GUID = ТекСтрока.GUID;
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДатаНач", ДатаНачалаПланирования);
	Запрос.УстановитьПараметр("ДатаКон", ДатаКонцаПланирования);
	Запрос.УстановитьПараметр("тблТС",   тблТС);
	
	Если Константы.уатЕдиницаИзмеренияВеса.Получить() = Перечисления.уатЕдиницыИзмеренияВеса.Килограмм Тогда 
		Запрос.УстановитьПараметр("КоэфГрузоподъемности", 1000);
	Иначе 
		Запрос.УстановитьПараметр("КоэфГрузоподъемности", 1);
	КонецЕсли;
	
	Если Константы.уатЕдиницаИзмеренияОбъема.Получить() = Перечисления.уатЕдиницыИзмеренияОбъема.Литр Тогда 
		Запрос.УстановитьПараметр("КоэфОбъемаКузова", 1000);
	Иначе 
		Запрос.УстановитьПараметр("КоэфОбъемаКузова", 1);
	КонецЕсли;
	
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	тблТС.ТС КАК ТС,
	|	тблТС.GUID КАК GUID
	|ПОМЕСТИТЬ ВТ_ТС
	|ИЗ
	|	&тблТС КАК тблТС
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	ТС
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатСостояниеТС.Регистратор КАК Основание,
	|	уатСостояниеТС.ТС КАК ТС,
	|	уатСостояниеТС.Период КАК ДатаНачала,
	|	уатСостояниеТС.ДатаОкончания КАК ДатаОкончания,
	|	уатСостояниеТС.ЗагрузкаПоВесу КАК ЗагрузкаПоВесу,
	|	уатСостояниеТС.ЗагрузкаПоОбъему КАК ЗагрузкаПоОбъему,
	|	уатСостояниеТС.Состояние.Представление КАК Представление,
	|	уатСостояниеТС.Состояние.ЦветСостояния КАК ЦветСостояния,
	|	уатСостояниеТС.ТС.Модель.Грузоподъемность * &КоэфГрузоподъемности КАК Грузоподъемность,
	|	уатСостояниеТС.ТС.Модель.ОбъемКузова * &КоэфОбъемаКузова КАК ОбъемКузова,
	|	ВТ_ТС.GUID КАК GUID
	|ИЗ
	|	ВТ_ТС КАК ВТ_ТС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.уатСостояниеТС КАК уатСостояниеТС
	|		ПО ВТ_ТС.ТС = уатСостояниеТС.ТС
	|ГДЕ
	|	уатСостояниеТС.Период <= &ДатаКон
	|	И уатСостояниеТС.ДатаОкончания >= &ДатаНач";
	
	мсвМодифицированныеМЛ = Новый Массив();
	Для Каждого ТекНовыйМЛ Из мсвНовыеМЛ Цикл 
		Если Не ЗначениеЗаполнено(ТекНовыйМЛ.МаршрутныйЛист) Тогда 
			Продолжить;
		КонецЕсли;
		
		мсвМодифицированныеМЛ.Добавить(ТекНовыйМЛ.МаршрутныйЛист);
	КонецЦикла;
	
	мсвЭлементыПланирования = Новый Массив();
	
	СоответствиеЦетовЗаказа = Новый Соответствие;
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		ДанныеЭлемента = Новый Структура();
		ДанныеЭлемента.Вставить("ТС",        ?(Выборка.GUID="", Выборка.ТС, Выборка.GUID));
		ДанныеЭлемента.Вставить("Основание", Выборка.Основание);
		
		Если ТипЗнч(Выборка.Основание) = Тип("ДокументСсылка.уатРемонтныйЛист") И НастройкиОтображенияДокументов.ОтображатьРЛ Тогда
			ДанныеЭлемента.Вставить("ДатаНачала",    Выборка.ДатаНачала);
			ДанныеЭлемента.Вставить("ДатаОкончания", Выборка.ДатаОкончания);
			ДанныеЭлемента.Вставить("Текст",         Выборка.Представление);
			ДанныеЭлемента.Вставить("Картинка",      БиблиотекаКартинок.уатСостояниеТСРемонтныеЛисты);			
		ИначеЕсли ТипЗнч(Выборка.Основание) = Тип("ДокументСсылка.уатДиспозицияТС") И НастройкиОтображенияДокументов.ОтображатьДиспозицииТС Тогда
			ДанныеЭлемента.Вставить("ДатаНачала",    Выборка.ДатаНачала);
			ДанныеЭлемента.Вставить("ДатаОкончания", Выборка.ДатаОкончания); 
			ДанныеЭлемента.Вставить("Текст",         Выборка.Представление);
			ДанныеЭлемента.Вставить("Картинка",      БиблиотекаКартинок.уатСостояниеТСДиспозиция);
			ДанныеЭлемента.Вставить("Подсказка",     Строка(Выборка.Основание.Состояние) + ". Диспозиция ТС № "+ Строка(Выборка.Основание.Номер));
			
		ИначеЕсли ТипЗнч(Выборка.Основание) = Тип("ДокументСсылка.уатМаршрутныйЛист") И НастройкиОтображенияДокументов.ОтображатьМЛ Тогда
			Если Не мсвМодифицированныеМЛ.Найти(Выборка.Основание) = Неопределено Тогда 
				
				Если РазличныеЦветаСтатусовМЛ Тогда 
					ТекушийЦвет = ЦветСостоянияМЛ(Выборка.Основание.Статус);
				ИначеЕсли Выборка.Основание.Ссылка.Пустая() Тогда
					ТекущийЦвет = WebЦвета.Желтый;
				Иначе
					ТекущийЦвет = Выборка.ЦветСостояния.Получить();
				КонецЕсли;
			
				Если ТипЗнч(ТекущийЦвет) = Тип("Цвет") Тогда
					Если ТекущийЦвет.Вид <> ВидЦвета.WebЦвет Тогда
						ТекущийЦвет = WebЦвета.Черный;
					КонецЕсли;
				Иначе
					ТекущийЦвет = WebЦвета.Черный;
				КонецЕсли;
				Цветфона = ТекущийЦвет;

				СоответствиеЦетовЗаказа.Вставить(Выборка.Основание, Цветфона); 
				Продолжить;
			КонецЕсли;
			
			Если ПланировщикОтображатьФактДаты Тогда 
				ДанныеФактДат = Документы.уатМаршрутныйЛист.ПолучитьФактическийПериодМаршрутногоЛиста(Выборка.Основание);
				Если ДанныеФактДат.ЕстьФакт Тогда 
					ДанныеЭлемента.Вставить("ДатаНачала",    ДанныеФактДат.ДатаНачала);
					ДанныеЭлемента.Вставить("ДатаОкончания", ДанныеФактДат.ДатаОкончания);
				Иначе 
					Продолжить;
				КонецЕсли;
			Иначе 
				ДанныеЭлемента.Вставить("ДатаНачала",    Выборка.ДатаНачала);
				ДанныеЭлемента.Вставить("ДатаОкончания", Выборка.ДатаОкончания);
			КонецЕсли;
			
			НомерДокумента = НСтр("en='IL №';ru='МЛ №'") + Строка(Выборка.Основание.Номер);
			ТекстЗагрузкиМЛ = СформироватьТекстЗагрузкиМЛ(НомерДокумента, 
				Выборка.Грузоподъемность, Выборка.Основание.ВесБрутто, Выборка.ЗагрузкаПоВесу, 
				Выборка.ОбъемКузова, Выборка.Основание.Объем, Выборка.ЗагрузкаПоОбъему);
			
			Подсказка = ТекстЗагрузкиМЛ;
			Если ЗначениеЗаполнено(Выборка.Основание.АдресОтправления) Тогда
				Подсказка = Подсказка + "; " + НСтр("en='route:';ru='маршрут:'") + " " + Выборка.Основание.АдресОтправления;
			КонецЕсли;
			Если ЗначениеЗаполнено(Выборка.Основание.АдресНазначения) Тогда
				Подсказка = Подсказка + " - " + Выборка.Основание.АдресНазначения;
			КонецЕсли;
			 
			ДанныеЭлемента.Вставить("Текст",     Выборка.Представление);
			ДанныеЭлемента.Вставить("Картинка",  БиблиотекаКартинок.уатСостояниеТСМаршрутныйЛист); 
			ДанныеЭлемента.Вставить("Подсказка", Подсказка);
			
		ИначеЕсли ТипЗнч(Выборка.Основание) = Тип("ДокументСсылка.уатЗаявкаНаРемонт") И НастройкиОтображенияДокументов.ОтображатьЗаявкиНаРемонт Тогда  
			ДанныеЭлемента.Вставить("ДатаНачала",    Выборка.ДатаНачала);
			ДанныеЭлемента.Вставить("ДатаОкончания", Выборка.ДатаОкончания);
			ДанныеЭлемента.Вставить("Текст",         Выборка.Представление); 
			ДанныеЭлемента.Вставить("Картинка", 	 БиблиотекаКартинок.уатСостояниеТСЗаявкаНаРемонт);
		ИначеЕсли ТипЗнч(Выборка.Основание) = Тип("ДокументСсылка.уатРазнарядка") И НастройкиОтображенияДокументов.ОтображатьРазнарядки Тогда
			ДанныеЭлемента.Вставить("ДатаНачала",    Выборка.ДатаНачала);
			ДанныеЭлемента.Вставить("ДатаОкончания", Выборка.ДатаОкончания);
			ДанныеЭлемента.Вставить("Текст",         Выборка.Представление);
			ДанныеЭлемента.Вставить("Картинка",      БиблиотекаКартинок.уатСостояниеТСРазнарядкаНаВыпуск);
		ИначеЕсли ТипЗнч(Выборка.Основание) = Тип("ДокументСсылка.уатПутевойЛист") И НастройкиОтображенияДокументов.ОтображатьПЛ Тогда
			ДанныеЭлемента.Вставить("ДатаНачала",    Выборка.ДатаНачала);
			ДанныеЭлемента.Вставить("ДатаОкончания", Выборка.ДатаОкончания);
			ДанныеЭлемента.Вставить("Текст",         Выборка.Представление); 
			ДанныеЭлемента.Вставить("Картинка",      БиблиотекаКартинок.уатСостояниеТСПутевойЛист);
		ИначеЕсли ТипЗнч(Выборка.Основание) = Тип("ДокументСсылка.уатТехнологическийПутевойЛист") И НастройкиОтображенияДокументов.ОтображатьТПЛ Тогда	
			ДанныеЭлемента.Вставить("ДатаНачала",    Выборка.ДатаНачала);
			ДанныеЭлемента.Вставить("ДатаОкончания", Выборка.ДатаОкончания);
			ДанныеЭлемента.Вставить("Текст",         Выборка.Представление);
			ДанныеЭлемента.Вставить("Картинка",      БиблиотекаКартинок.уатСостояниеТСПутевойЛист);	
		Иначе
			Продолжить;
		КонецЕсли;
		
		Если ТипЗнч(Выборка.Основание) = Тип("ДокументСсылка.уатМаршрутныйЛист") И РазличныеЦветаСтатусовМЛ Тогда
			ТекущийЦвет = ЦветСостоянияМЛ(Выборка.Основание.Статус);
		ИначеЕсли ТипЗнч(Выборка.Основание) = Тип("ДокументСсылка.уатМаршрутныйЛист") И Выборка.Основание.Ссылка.Пустая() Тогда
			ТекущийЦвет = WebЦвета.Желтый;
		Иначе 
			ТекущийЦвет = Выборка.ЦветСостояния.Получить(); 
		КонецЕсли;
		Если ТипЗнч(ТекущийЦвет) = Тип("Цвет") Тогда
			Если ТекущийЦвет.Вид <> ВидЦвета.WebЦвет Тогда
				ТекущийЦвет = WebЦвета.СветлоЗеленый;
			КонецЕсли;
		Иначе
			ТекущийЦвет = WebЦвета.СветлоЗеленый;
		КонецЕсли;
		ДанныеЭлемента.Вставить("Цветфона", ТекущийЦвет);
		
		мсвЭлементыПланирования.Добавить(ДанныеЭлемента);
	КонецЦикла;
	
	Для Каждого ТекНовыйМЛ Из мсвНовыеМЛ Цикл 
		ГрузоподъемностьИОбъемТС = уатОбщегоНазначения.уатПолучитьГрузоподъемностьИОбъемТС(ТекНовыйМЛ.ТС);
		Грузоподъемность = ГрузоподъемностьИОбъемТС.Грузоподъемность; 
		ОбъемКузова      = ГрузоподъемностьИОбъемТС.ОбъемКузова;
		
		ЗагрузкаПоВесу   = ?(Грузоподъемность = 0, 0, ТекНовыйМЛ.ВесБрутто / Грузоподъемность * 100);
		ЗагрузкаПоОбъему = ?(ОбъемКузова = 0, 0, ТекНовыйМЛ.Объем / ОбъемКузова * 100);
		
		ТекНовыйМЛ.Вставить("Грузоподъемность", Грузоподъемность);
		ТекНовыйМЛ.Вставить("ОбъемКузова",      ОбъемКузова);
		ТекНовыйМЛ.Вставить("ЗагрузкаПоВесу",   ЗагрузкаПоВесу);
		ТекНовыйМЛ.Вставить("ЗагрузкаПоОбъему", ЗагрузкаПоОбъему);
		
		Если Не ПланировщикОтображатьФактДаты Тогда 
			Если ЗначениеЗаполнено(ТекНовыйМЛ.МаршрутныйЛист) Тогда 
				НомерДокумента = НСтр("en='IL №';ru='МЛ №'") + Строка(ЗначениеРеквизитаОбъекта(ТекНовыйМЛ.МаршрутныйЛист, "Номер"));
			Иначе 
				НомерДокумента = НСтр("en='New';ru='Новый'");
			КонецЕсли;
			
			ТекстЭлемента = СформироватьТекстЗагрузкиМЛ(НомерДокумента, 
				ТекНовыйМЛ.Грузоподъемность, ТекНовыйМЛ.ВесБрутто, ТекНовыйМЛ.ЗагрузкаПоВесу, 
				ТекНовыйМЛ.ОбъемКузова, ТекНовыйМЛ.Объем, ТекНовыйМЛ.ЗагрузкаПоОбъему);
			
			Подсказка = ТекстЭлемента;
			Если ЗначениеЗаполнено(ТекНовыйМЛ.АдресОтправления) Тогда
				Подсказка = Подсказка + "; " + НСтр("en='route:';ru='маршрут:'") + " " + ТекНовыйМЛ.АдресОтправления;
			КонецЕсли;
			Если ЗначениеЗаполнено(ТекНовыйМЛ.АдресНазначения) Тогда
				Подсказка = Подсказка + " - " + ТекНовыйМЛ.АдресНазначения;
			КонецЕсли;
			
			ДатаНачалаДляПланирования    = ТекНовыйМЛ.ДатаНачала;
			ДатаОкончанияДляПланирования = ТекНовыйМЛ.ДатаОкончания;
			
			Если (ДатаОкончанияДляПланирования - ДатаНачалаДляПланирования) = 0 Тогда 
				ДатаОкончанияДляПланирования = ДатаНачалаДляПланирования + ВремяМеждуПунктамиПоУмолчанию*3600;
				КартинкаДляОтображенияМЛ     = БиблиотекаКартинок.уатВремяНеУказано;
			Иначе 
				КартинкаДляОтображенияМЛ = БиблиотекаКартинок.уатМаршрутныйЛист;
			КонецЕсли;
			
			Если ТекНовыйМЛ.НовыйМЛ Тогда
				Цвет = WebЦвета.Золотой;
			Иначе
				Цвет = СоответствиеЦетовЗаказа.Получить(ТекНовыйМЛ.МаршрутныйЛист);
				Если Цвет = Неопределено Тогда
					Цвет = WebЦвета.Золотой;
				КонецЕсли;
			КонецЕсли;
				
			ДанныеЭлемента = Новый Структура();
			ДанныеЭлемента.Вставить("ТС",            ?(ТекНовыйМЛ.GUID="", ТекНовыйМЛ.ТС, ТекНовыйМЛ.GUID));
			ДанныеЭлемента.Вставить("Основание",     ТекНовыйМЛ.МаршрутныйЛист);
			ДанныеЭлемента.Вставить("ДатаНачала",    ДатаНачалаДляПланирования);
			ДанныеЭлемента.Вставить("ДатаОкончания", ДатаОкончанияДляПланирования);
			ДанныеЭлемента.Вставить("Текст",         ТекстЭлемента);
			ДанныеЭлемента.Вставить("Картинка",      КартинкаДляОтображенияМЛ);
			ДанныеЭлемента.Вставить("Подсказка",     Подсказка);
			ДанныеЭлемента.Вставить("Цветфона",      Цвет);
			мсвЭлементыПланирования.Добавить(ДанныеЭлемента);
		КонецЕсли;
	КонецЦикла;
	
	ДанныеДляПланировщика.Вставить("ЭлементыПланирования", мсвЭлементыПланирования);
	
	мсвИнтервалыФона = Новый Массив();
	
	ТекСекундДоНачалаРаботы = НастройкаВремяНачалаПланирования - '00010101';
	Если НастройкаВремяОкончанияПланирования = '00010101000000' Тогда 
		ТекСекундДоОкончанияРаботы = '00010101235959' - '00010101000000';
	Иначе 
		ТекСекундДоОкончанияРаботы = НастройкаВремяОкончанияПланирования - '00010101';
	КонецЕсли;
	
	врТекДата = ДатаНачалаПланирования;
	врДнейПланировщика = ДнейПланировщика;
	
	Если НастройкаВремяНачалаПланирования <> НастройкаВремяОкончанияПланирования Тогда 
		Пока врДнейПланировщика > 0 Цикл
			ТекВремяНачалаРаботы = врТекДата + ТекСекундДоНачалаРаботы; 
			ТекВремяОкончанияРаботы = врТекДата + ТекСекундДоОкончанияРаботы;
			
			ОптИнтервал = уатОбщегоНазначения_уэ.ПолучитьПериодФонаДляПланировщика(ТекВремяНачалаРаботы, ТекВремяОкончанияРаботы, ДнейПланировщика);
			
			ИнтервалФона = Новый Структура();
			ИнтервалФона.Вставить("ДатаНачала",    ОптИнтервал.ДатаНачала);
			ИнтервалФона.Вставить("ДатаОкончания", ОптИнтервал.ДатаОкончания);
			ИнтервалФона.Вставить("ЦветФона",      Новый Цвет(152, 251, 152));
			мсвИнтервалыФона.Добавить(ИнтервалФона);
			
			врТекДата = врТекДата + 24*3600;
			врДнейПланировщика = врДнейПланировщика - 1;
		КонецЦикла;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗаказДляПланирования) Тогда
		ОптИнтервал = уатОбщегоНазначения_уэ.ПолучитьПериодФонаДляПланировщика(
			ЗаказДляПланирования.ОтправлениеС, 
			ЗаказДляПланирования.ОтправлениеПо, 
			ДнейПланировщика);
		
		ИнтервалФона = Новый Структура();
		ИнтервалФона.Вставить("ДатаНачала",    ОптИнтервал.ДатаНачала);
		ИнтервалФона.Вставить("ДатаОкончания", ОптИнтервал.ДатаОкончания);
		ИнтервалФона.Вставить("ЦветФона",      ЦветОконЗаказаНаПланировщике);
		мсвИнтервалыФона.Добавить(ИнтервалФона);
		
		ОптИнтервал = уатОбщегоНазначения_уэ.ПолучитьПериодФонаДляПланировщика(
			ЗаказДляПланирования.ДоставкаС, 
			ЗаказДляПланирования.ДоставкаПо, 
			ДнейПланировщика
		);
		
		ИнтервалФона = Новый Структура();
		ИнтервалФона.Вставить("ДатаНачала",    ОптИнтервал.ДатаНачала);
		ИнтервалФона.Вставить("ДатаОкончания", ОптИнтервал.ДатаОкончания);
		ИнтервалФона.Вставить("ЦветФона",      ЦветОконЗаказаНаПланировщике);
		мсвИнтервалыФона.Добавить(ИнтервалФона);
	КонецЕсли;
	
	ДанныеДляПланировщика.Вставить("ИнтервалыФона", мсвИнтервалыФона);
	
	Возврат ДанныеДляПланировщика;
	
КонецФункции // СформироватьДанныеДляПланировщика()

&НаКлиентеНаСервереБезКонтекста
Функция ПолучитьВремяВПутиСУчетомСреднейСкорости(Расстояние, ВремяВПути, ВремяВыезда, ТабСкоростей)
	
	ТекВремяВыезда = '00010101000000' + (ВремяВыезда - НачалоДня(ВремяВыезда));
	
	СредняяСкорость = 0;
	Для Каждого ТекСтрока Из ТабСкоростей Цикл 
		Если (ТекСтрока.НачалоПериода > ТекСтрока.КонецПериода
					И (ТекВремяВыезда >= ТекСтрока.НачалоПериода
					Или ТекВремяВыезда <= ТекСтрока.КонецПериода))
				Или (ТекВремяВыезда >= ТекСтрока.НачалоПериода И ТекВремяВыезда <= ТекСтрока.КонецПериода) Тогда 
			СредняяСкорость = ТекСтрока.Скорость;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если СредняяСкорость = 0 Тогда 
		Возврат ВремяВПути;
	КонецЕсли;
	
	мВремяСек = (Расстояние / СредняяСкорость) * 3600;
	мВремяЧЧ  = Цел(мВремяСек / 3600);
	мВремяММ  = Цел((мВремяСек - (мВремяЧЧ * 3600)) / 60);
	
	Возврат мВремяЧЧ + (мВремяММ / 100);
	
КонецФункции

&НаСервереБезКонтекста
Функция СформироватьТекстЗагрузкиМЛ(СтрНомер, Грузоподъемность, ВесБрутто, ЗагрузкаПоВесу,
		ОбъемКузова, Объем, ЗагрузкаПоОбъему)
	
	СтрГрузоподъемность = Строка(Окр(Грузоподъемность, 3));
	СтрВесБрутто        = Строка(Окр(ВесБрутто, 3));
	СтрЗагрузкаПоВесу   = Строка(Окр(ЗагрузкаПоВесу, 0));
	СтрОбъемКузова      = Строка(Окр(ОбъемКузова, 3));
	СтрОбъем            = Строка(Окр(Объем, 3));
	СтрЗагрузкаПоОбъему = Строка(Окр(ЗагрузкаПоОбъему, 0));
	
	ЕИВеса   = Константы.уатЕдиницаИзмеренияВеса.Получить();
	ЕИОбъема = Константы.уатЕдиницаИзмеренияОбъема.Получить();
	
	Возврат СтрНомер + " - "
		+ СтрВесБрутто + "/" + СтрГрузоподъемность + " " + ЕИВеса + " (" + СтрЗагрузкаПоВесу + "%); "
		+ СтрОбъем + "/" + СтрОбъемКузова + " " + ЕИОбъема + " (" + СтрЗагрузкаПоОбъему + "%)";
	
КонецФункции

&НаСервереБезКонтекста
Процедура ПолучитьТаблицуРасстоянийМеждуПунктами(МассивПунктов, Знач МаршрутыДерево = Неопределено)
	
	ТипИспользуемыхЭлектронныхКарт = Неопределено;
	Если Константы.уатИспользоватьЭлектронныеКарты.Получить() Тогда 
		ТипИспользуемыхЭлектронныхКарт = уатЭлектронныеКартыСервер.ПолучитьТипИспользуемыхЭлектронныхКарт();
	КонецЕсли;
	
	Если ТипИспользуемыхЭлектронныхКарт = Перечисления.уатТипыЭлектронныхКарт.Яндекс Тогда
		уатЗащищенныеФункцииСервер.РассчитатьТаблицуРасстояниеВремяМеждуПунктами(МассивПунктов, Ложь, ТипИспользуемыхЭлектронныхКарт);
	ИначеЕсли МаршрутыДерево = Неопределено Тогда
		уатЗащищенныеФункцииСервер.РассчитатьТаблицуРасстояниеВремяМеждуПунктами(МассивПунктов, Ложь);
	Иначе
		Если МассивПунктов.Количество() = 0 Тогда
			Возврат;
		КонецЕсли;
		
		ТипИспользуемыхЭлектронныхКарт = Неопределено;
		Если МассивПунктов[0].Свойство("ИдентификаторСтрокиПункта") Тогда
			МЛ = МаршрутыДерево.НайтиПоИдентификатору(МассивПунктов[0].ИдентификаторСтрокиПункта);
			
			Если (ЗначениеЗаполнено(МЛ.ЭтапМаршрутизации)
				И МЛ.ЭтапМаршрутизации.АлгоритмМаршрутизации = 3)
				ИЛИ (ЗначениеЗаполнено(МЛ.Группировка) И ТипЗнч(МЛ.Группировка) = Тип("ДокументСсылка.уатМаршрутныйЛист")
				И МЛ.Группировка.ЭтапМаршрутизации.АлгоритмМаршрутизации = 3) Тогда
				ТипИспользуемыхЭлектронныхКарт = Перечисления.уатТипыЭлектронныхКарт.Яндекс;
			КонецЕсли;
		КонецЕсли;
		
		уатЗащищенныеФункцииСервер.РассчитатьТаблицуРасстояниеВремяМеждуПунктами(МассивПунктов, Ложь, ТипИспользуемыхЭлектронныхКарт);
	КонецЕсли;
КонецПроцедуры // ПолучитьТаблицуРасстоянийМеждуПунктами()

&НаСервере
Процедура ОбновитьКэшСредняяСкоростьДвижения()
	
	кэшСредняяСкоростьДвижения.Очистить();
	
	НаборЗаписей = РегистрыСведений.уатСредняяСкоростьДвижения.СоздатьНаборЗаписей();
	НаборЗаписей.Прочитать();
	
	Для Каждого Запись Из НаборЗаписей Цикл 
		НовСтрока = кэшСредняяСкоростьДвижения.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока, Запись);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ПрезаписатьДокумент(СсылкаДок, ТСПерем, ДатаНачала, ДатаКонец,
	ТСОсновное = Неопределено, Прицеп1 = Неопределено, Прицеп2 = Неопределено, МассивПЛ = Неопределено)
	
	Если ТипЗнч(СсылкаДок) = Тип("ДокументСсылка.уатРемонтныйЛист") Тогда 
	
		ДокОбъект  = СсылкаДок.ПолучитьОбъект();
		ТСОсновное = ДокОбъект.ТС;
		
		ДокОбъект.ТС = ТСПерем;
		ДокОбъект.ДатаНачала = ДатаНачала;
		ДокОбъект.ДатаОкончания = ДатаКонец;
		Попытка 
			ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
		КонецПопытки;
		
	ИначеЕсли ТипЗнч(СсылкаДок) = Тип("ДокументСсылка.уатДиспозицияТС") Тогда
		
		ДокОбъект  = СсылкаДок.ПолучитьОбъект();
		ТСОсновное = ДокОбъект.ТС;
		
		ДокОбъект.ТС = ТСПерем;
		
		ДокОбъект.ДатаНачала = ДатаНачала;
		ДокОбъект.ДатаОкончания = ДатаКонец;
		Попытка 
			ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
		КонецПопытки;
		
	ИначеЕсли ТипЗнч(СсылкаДок) = Тип("ДокументСсылка.уатПутевойЛист") Тогда
		
		ДокОбъект = СсылкаДок.ПолучитьОбъект();
		ТСОсновное = ДокОбъект.ТранспортноеСредство;
		ДокОбъект.ТранспортноеСредство = ТСПерем;
		ДокОбъект.ДатаВыезда = ДатаНачала;
		ДокОбъект.ДатаВозвращения = ДатаКонец;
		Попытка 
			ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
		КонецПопытки;
		
	ИначеЕсли ТипЗнч(СсылкаДок) = Тип("ДокументСсылка.уатМаршрутныйЛист") И ЗначениеЗаполнено(СсылкаДок) Тогда
		ДокОбъект = СсылкаДок.ПолучитьОбъект();
		
		ТСОсновное = ДокОбъект.ТС;
		Если ТипЗнч(ТСПерем) = Тип("СправочникСсылка.уатТС") Тогда 
			ДокОбъект.ТС = ТСПерем;
			ДокОбъект.ПринадлежностьПеревозки = ТСПерем.ПринадлежностьТС;
			ДокОбъект.Прицеп1 = Прицеп1;
			ДокОбъект.Прицеп2 = Прицеп2;
		Иначе 
			СтрокаТС = Неопределено;
			Для Каждого ТекСтрокаДерева Из МаршрутыДерево.ПолучитьЭлементы() Цикл 
				Если ТекСтрокаДерева.GUID = ТСПерем Тогда 
					ДокОбъект.ТС = ТекСтрокаДерева.ТС;
					ДокОбъект.ПринадлежностьПеревозки = ТекСтрокаДерева.ТС.ПринадлежностьТС;
					ДокОбъект.Прицеп1 = ТекСтрокаДерева.Прицеп1;
					ДокОбъект.Прицеп2 = ТекСтрокаДерева.Прицеп2;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ДокОбъект.ТС) Тогда 
			Если ДокОбъект.ПринадлежностьПеревозки = Перечисления.уатПринадлежностьТС.Собственное Тогда
				ВладелецТС = уатОбщегоНазначения.МестонахождениеТС(ДокОбъект.ТС, ДокОбъект.Дата, Ложь).Организация;
				Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
				Если Не ЗначениеЗаполнено(ВладелецТС) Тогда
					ВладелецТС = ДокОбъект.ТС.Организация;
				КонецЕсли;
				
				СтруктураЭкипаж = уатЗащищенныеФункцииСервер.ЭкипажТСсУчетомГрафика(ДокОбъект.ТС, ДокОбъект.Дата, ДокОбъект.Организация);
				ДокОбъект.Водитель1 = СтруктураЭкипаж.Водитель;
				Если ЗначениеЗаполнено(ДокОбъект.Водитель1) Тогда
					ДокОбъект.Водитель2  = СтруктураЭкипаж.Водитель2;
				Иначе
					ДокОбъект.Водитель1  = СтруктураЭкипаж.Водитель2;
				КонецЕсли;
				
			ИначеЕсли ДокОбъект.ПринадлежностьПеревозки = Перечисления.уатПринадлежностьТС.Привлеченное Тогда
				ВладелецТС = ДокОбъект.ТС.ВладелецТС;
				СписокДоговоров = Новый СписокЗначений;
				СписокДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
				СтрПараметров = Новый Структура("СписокДопустимыхВидовДоговоров", СписокДоговоров);
				Договор = уатОбщегоНазначенияТиповыеСервер.уатПолучитьДоговорПоОрганизацииИКонтрагенту(ДокОбъект.Организация, ВладелецТС, СтрПараметров);
				ДокОбъект.Водитель1 = ДокОбъект.ТС.Водитель;
			Иначе
				ВладелецТС          = Неопределено;
				Договор             = Неопределено;
				ДокОбъект.Водитель1 = Неопределено;
			КонецЕсли;
		КонецЕсли;
		
		Если ДокОбъект.ПринадлежностьПеревозки = Перечисления.уатПринадлежностьТС.Виртуальное Тогда 
			ДокОбъект.Контрагент         = Справочники.Организации.ПустаяСсылка();
			ДокОбъект.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		Иначе 
			ДокОбъект.Контрагент         = ВладелецТС;
			ДокОбъект.ДоговорКонтрагента = Договор;
		КонецЕсли;

		Если ДокОбъект.Заказы.Количество() Тогда
			РазницаВремени = ДатаНачала - ДокОбъект.Заказы[0].ПрибытиеПлан;  
			ДокОбъект.ДатаИВремяОтправленияПлан = ДокОбъект.ДатаИВремяОтправленияПлан + РазницаВремени;
			Для Каждого ТекЗаказ Из ДокОбъект.Заказы Цикл
				ТекЗаказ.ПрибытиеПлан = ТекЗаказ.ПрибытиеПлан + РазницаВремени;
			КонецЦикла;
		КонецЕсли;
		Попытка 
			ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
		КонецПопытки;
		
		МассивПЛ = Новый Массив();
		уатАРМ.ПолучитьСвязанныеПЛ(ДокОбъект.Ссылка, МассивПЛ);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьИзменениеДокументаНаПланировщике(СсылкаДок)
	
	Если ТипЗнч(СсылкаДок) = Тип("ДокументСсылка.уатРемонтныйЛист") Тогда 
		Если РемонтныйЛистВыполнен(СсылкаДок) Тогда
			ТекстНСТР = НСтр("en='Repair list is made. Operation is prohibited!';ru='Ремонтный лист выполнен. Операция запрещена!'");
			ПоказатьПредупреждение(,ТекстНСТР);
		    Возврат Ложь;
		КонецЕсли;
	ИначеЕсли ТипЗнч(СсылкаДок) = Тип("ДокументСсылка.уатПутевойЛист") Тогда
		Если ПутевойЛистРассчитан(СсылкаДок) Тогда
			ТекстНСТР = НСтр("en='Waybill is calculated. Operation is prohibited!';ru='Путевой лист рассчитан. Операция запрещена!'");
			ПоказатьПредупреждение(,ТекстНСТР);
		    Возврат Ложь;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Истина;

КонецФункции

&НаСервере
Функция РемонтныйЛистВыполнен(СсылкаДок)
	
	Возврат СсылкаДок.Выполнен;
	
КонецФункции

&НаСервере
Функция ПутевойЛистРассчитан(СсылкаДок)
	
	Возврат СсылкаДок.Рассчитан;
	
КонецФункции

&НаСервере
Функция ПредставлениеТС(ДанныеПоТС) 
	
	ВесоОбъемныеХарактеристики  = уатОбщегоНазначенияСервер.ПолучитьСтруктуруВесоОбъемныхХарактеристик();
	КоэффициентОбъемаКузова     = ВесоОбъемныеХарактеристики.КоэффициентОбъемаКузова;
	КоэффициентГрузоподъемности = ВесоОбъемныеХарактеристики.КоэффициентГрузоподъемности;

	Результат = Новый Соответствие();
	
	ТабДляЗапроса = Новый ТаблицаЗначений();
	ТабДляЗапроса.Колонки.Добавить("ТС",         Новый ОписаниеТипов("СправочникСсылка.уатТС"));
	ТабДляЗапроса.Колонки.Добавить("ID",         Новый ОписаниеТипов("Число"));
	ТабДляЗапроса.Колонки.Добавить("Количество", Новый ОписаниеТипов("Число"));
	ТабДляЗапроса.Колонки.Добавить("Прицеп1",    Новый ОписаниеТипов("СправочникСсылка.уатТС"));
	ТабДляЗапроса.Колонки.Добавить("Прицеп2",    Новый ОписаниеТипов("СправочникСсылка.уатТС"));
	
	Для Каждого ТекСтрока Из ДанныеПоТС Цикл 
		Если Не ЗначениеЗаполнено(ТекСтрока.ТС) Тогда 
			Продолжить;
		КонецЕсли;
		
		НовСтрока = ТабДляЗапроса.Добавить();
		НовСтрока.ТС = ТекСтрока.ТС;
		
		Если ТекСтрока.Свойство("ID") Тогда 
			НовСтрока.ID = ТекСтрока.ID;
		Иначе 
			НовСтрока.ID = -1;
		КонецЕсли;
		
		Если ТекСтрока.Свойство("Количество") Тогда 
			НовСтрока.Количество = ТекСтрока.Количество;
		Иначе 
			НовСтрока.Количество = 1;
		КонецЕсли;
		
		Если ТекСтрока.Свойство("Прицеп1") Тогда 
			НовСтрока.Прицеп1 = ТекСтрока.Прицеп1;
		КонецЕсли;
		
		Если ТекСтрока.Свойство("Прицеп2") И Не (ТекСтрока.Свойство("Прицеп1") И ТекСтрока.Прицеп1 = ТекСтрока.Прицеп2) Тогда
			НовСтрока.Прицеп2 = ТекСтрока.Прицеп2;
		КонецЕсли;
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТабДляЗапроса", ТабДляЗапроса);
	Запрос.УстановитьПараметр("КоэфГП",        КоэффициентГрузоподъемности);
	Запрос.УстановитьПараметр("КоэфОбъем",     КоэффициентОбъемаКузова);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТабДляЗапроса.ТС КАК ТС,
	|	ТабДляЗапроса.ID КАК ID,
	|	ТабДляЗапроса.Количество КАК Количество,
	|	ТабДляЗапроса.Прицеп1 КАК Прицеп1,
	|	ТабДляЗапроса.Прицеп2 КАК Прицеп2
	|ПОМЕСТИТЬ ВТ_ТС
	|ИЗ
	|	&ТабДляЗапроса КАК ТабДляЗапроса
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТабТС.ТС КАК ТС,
	|	ТабТС.ID КАК ID,
	|	ТабТС.Количество КАК Количество,
	|	уатТС.Наименование КАК НаименованиеТС,
	|	уатТС.Организация КАК Организация,
	|	ЕСТЬNULL(уатТС.Модель, ЗНАЧЕНИЕ(Справочник.уатМоделиТС.ПустаяСсылка)) КАК Модель,
	|	ЕСТЬNULL(уатТС.Модель.Наименование, """") КАК НаименованиеМодели,
	|	ВЫБОР
	|		КОГДА уатТС.ВидМоделиТС = ЗНАЧЕНИЕ(Перечисление.уатВидыМоделейТС.АвиационныйТранспорт)
	|			ТОГДА 5
	|		КОГДА уатТС.ВидМоделиТС = ЗНАЧЕНИЕ(Перечисление.уатВидыМоделейТС.МорскойТранспорт)
	|			ТОГДА 9
	|		КОГДА уатТС.ВидМоделиТС = ЗНАЧЕНИЕ(Перечисление.уатВидыМоделейТС.ЖДТранспорт)
	|			ТОГДА 8
	|		ИНАЧЕ ВЫБОР
	|				КОГДА уатТС.ПринадлежностьТС = ЗНАЧЕНИЕ(Перечисление.уатПринадлежностьТС.Привлеченное)
	|					ТОГДА 4
	|				КОГДА уатТС.ПринадлежностьТС = ЗНАЧЕНИЕ(Перечисление.уатПринадлежностьТС.Виртуальное)
	|					ТОГДА 6
	|				ИНАЧЕ 3
	|			КОНЕЦ
	|	КОНЕЦ КАК ИндексКартинки,
	|	ЕСТЬNULL(уатМоделиТС.Грузоподъемность, 0) * &КоэфГП + ЕСТЬNULL(МоделиПрицеп1.Грузоподъемность, 0) * &КоэфГП + ЕСТЬNULL(МоделиПрицеп2.Грузоподъемность, 0) * &КоэфГП КАК Грузоподъемность,
	|	ЕСТЬNULL(ОбъемСекцииТС.Объем, ЕСТЬNULL(уатМоделиТС.ОбъемКузова, 0)) * &КоэфОбъем + ЕСТЬNULL(ОбъемСекцииПрицеп1.Объем, ЕСТЬNULL(МоделиПрицеп1.ОбъемКузова, 0)) * &КоэфОбъем + ЕСТЬNULL(ОбъемСекцииПрицеп2.Объем, ЕСТЬNULL(МоделиПрицеп2.ОбъемКузова, 0)) * &КоэфОбъем КАК ОбъемКузова,
	|	ЕСТЬNULL(уатМоделиТС.МаксимальноеКоличествоУпаковок, 0) + ЕСТЬNULL(МоделиПрицеп1.МаксимальноеКоличествоУпаковок, 0) + ЕСТЬNULL(МоделиПрицеп2.МаксимальноеКоличествоУпаковок, 0) КАК МаксимальноеКоличествоУпаковок
	|ИЗ
	|	ВТ_ТС КАК ТабТС
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.уатТС КАК уатТС
	|			ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатМоделиТС КАК уатМоделиТС
	|			ПО уатТС.Модель = уатМоделиТС.Ссылка
	|		ПО ТабТС.ТС = уатТС.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатТС КАК СправочникПрицеп1
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.уатМоделиТС КАК МоделиПрицеп1
	|			ПО СправочникПрицеп1.Модель = МоделиПрицеп1.Ссылка
	|		ПО ТабТС.Прицеп1 = СправочникПрицеп1.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатТС КАК СправочникПрицеп2
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Справочник.уатМоделиТС КАК МоделиПрицеп2
	|			ПО СправочникПрицеп2.Модель = МоделиПрицеп2.Ссылка
	|		ПО ТабТС.Прицеп2 = СправочникПрицеп2.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			уатСекцииТС.Владелец КАК Владелец,
	|			СУММА(уатСекцииТС.Объем) КАК Объем
	|		ИЗ
	|			Справочник.уатСекцииТС КАК уатСекцииТС
	|		ГДЕ
	|			НЕ уатСекцииТС.ПометкаУдаления
	|		
	|		СГРУППИРОВАТЬ ПО
	|			уатСекцииТС.Владелец) КАК ОбъемСекцииТС
	|		ПО ТабТС.ТС = ОбъемСекцииТС.Владелец
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			уатСекцииТС.Владелец КАК Владелец,
	|			СУММА(уатСекцииТС.Объем) КАК Объем
	|		ИЗ
	|			Справочник.уатСекцииТС КАК уатСекцииТС
	|		ГДЕ
	|			НЕ уатСекцииТС.ПометкаУдаления
	|		
	|		СГРУППИРОВАТЬ ПО
	|			уатСекцииТС.Владелец) КАК ОбъемСекцииПрицеп1
	|		ПО ТабТС.Прицеп1 = ОбъемСекцииПрицеп1.Владелец
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			уатСекцииТС.Владелец КАК Владелец,
	|			СУММА(уатСекцииТС.Объем) КАК Объем
	|		ИЗ
	|			Справочник.уатСекцииТС КАК уатСекцииТС
	|		ГДЕ
	|			НЕ уатСекцииТС.ПометкаУдаления
	|		
	|		СГРУППИРОВАТЬ ПО
	|			уатСекцииТС.Владелец) КАК ОбъемСекцииПрицеп2
	|		ПО ТабТС.Прицеп2 = ОбъемСекцииПрицеп2.Владелец";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		СтруктураТС = Новый Структура();
		СтруктураТС.Вставить("ИндексКартинки",                 Выборка.ИндексКартинки);
		СтруктураТС.Вставить("Грузоподъемность",               Выборка.Грузоподъемность);
		СтруктураТС.Вставить("ОбъемКузова",                    Выборка.ОбъемКузова);
		СтруктураТС.Вставить("МаксимальноеКоличествоУпаковок", Выборка.МаксимальноеКоличествоУпаковок);
		СтруктураТС.Вставить("Организация",                    Выборка.Организация);
		СтруктураТС.Вставить("Модель",                         Выборка.Модель);
		
		Если Выборка.ИндексКартинки = 6 И Не Выборка.Количество = 0 Тогда 
			СтруктураТС.Вставить("ТСПредставление", "(" + Строка(Выборка.Количество) + ") " + Выборка.НаименованиеТС);
		Иначе 
			СтруктураТС.Вставить("ТСПредставление", Выборка.НаименованиеТС);
		КонецЕсли;
		
		Результат.Вставить(?(Выборка.ID = -1, Выборка.ТС, Выборка.ID), СтруктураТС);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура ФормаЗаполненияТСЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Массив") Тогда
		ТекМассивТС = Новый Массив();
		ПредТС   = Неопределено;
		СтруктураПолей = "УровеньДерева, Группировка, МЛ, ПринадлежностьТС,
		|ВесБрутто,Объем,Этап,ВремяПрибытияВПункт,УбытиеПлан,
		|GUID,СобственноеТС,КоличествоВиртуальныхТС,ТС,Прицеп1,Прицеп2,
		|Модифицированность,ЭтапМаршрутизации,ВремяПрибытияВПункт,МассивМЛ";
		Для Каждого ТекТС Из Результат Цикл
			СтруктураТС = Новый Структура(СтруктураПолей);
			СтруктураТС.ТС            = ТекТС;
			СтруктураТС.УровеньДерева = "ТС";
			СтруктураТС.Группировка   = ТекТС;
			СтруктураТС.МассивМЛ      = Новый Массив();
			ТекМассивТС.Добавить(СтруктураТС);
		КонецЦикла;
		ОбновитьДанныеПланировщика(ТекМассивТС);
		ОбновитьПланировщик();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНадписьКоличествоВыбранных()
	
	ТекстСообщенияОбОшибке = "";
	КоличествоВыбранныхОбъектов = МассивТС.Количество();
	ТекстНадписи = СтрШаблон(НСтр("ru = 'Отбор по %1 ТС'"), КоличествоВыбранныхОбъектов);
	
	Элементы.НастройкаОтбора.Заголовок = ТекстНадписи;
	
КонецПроцедуры

&НаКлиенте
Процедура ТСВМЛПриИзмененииВопрос(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОбновитьТСвПЛсервер(ДопПараметры.МассивПЛ);
		ОбновитьПланировщик();
		Оповестить("Обновить маршрутные листы АРМ", ДопПараметры.ПараметрыПереноса, ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьТСвПЛсервер(МассивПЛ)
	
	уатАРМ.ОбновитьТСвПЛсервер(МассивПЛ);

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если ЗавершениеРаботы Тогда 
		Возврат;
	КонецЕсли;
	
	СохранитьНастройки();
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЦветСостоянияМЛ(СостояниеМЛ) 
	
	Если СостояниеМЛ = "Новый" Тогда
		Цвет = WebЦвета.СветлоЗолотистый;
	ИначеЕсли СостояниеМЛ = "Отправлен" Тогда
		Цвет = WebЦвета.СветлоЗеленый;
	ИначеЕсли СостояниеМЛ = "Частично выполнен" Или СостояниеМЛ = "Выполнен" Тогда
		Цвет = WebЦвета.ВесеннеЗеленый;
	ИначеЕсли СостояниеМЛ = "Рассчитан" Тогда 
		Цвет = WebЦвета.СветлоНебесноГолубой;
	КонецЕсли;
	
	Возврат Цвет;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьНадписьКоличествоОтображаемыеДокументы()
	
	МассивОтображаемыеДокументы = Новый Массив();
	
	МассивОтображаемыеДокументы.Добавить(ОтображатьДиспозицииТС); 
	МассивОтображаемыеДокументы.Добавить(ОтображатьЗаявкиНаРемонт);
	МассивОтображаемыеДокументы.Добавить(ОтображатьМЛ);
	МассивОтображаемыеДокументы.Добавить(ОтображатьПЛ);
	МассивОтображаемыеДокументы.Добавить(ОтображатьРазнарядки);
	МассивОтображаемыеДокументы.Добавить(ОтображатьРЛ);
	МассивОтображаемыеДокументы.Добавить(ОтображатьТПЛ);
	
	ДокументовВсего = МассивОтображаемыеДокументы.Количество();
	ДокументовОтображается = 0;
	
	Для Каждого Элемент Из МассивОтображаемыеДокументы Цикл 
		Если Элемент Тогда
			ДокументовОтображается = ДокументовОтображается + 1;
		КонецЕсли;
	КонецЦикла; 
	СтрокаЗаголовка = "Отображаемые документы (%1/%2)";
	СтрокаЗаголовка = СтрШаблон(СтрокаЗаголовка, ДокументовОтображается, ДокументовВсего);
	Элементы.ГруппаОтображаемыеДокументы.Заголовок = СтрокаЗаголовка;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьТекстПодвалаДляВыделенногоЭлемента(ДокументСсылка, ВыделенныйЭлементПланировщика)  
	
	ВыбранныйДокумент = ДокументСсылка;
	
	Элементы.ГруппаПодвал.Видимость 				  		 = Истина;
	Элементы.ГруппаКолонкаСредняя.Видимость					 = Истина;
	Элементы.ГруппаДокументРегистратор.Видимость 			 = Истина;
	
	Элементы.ДекорацияСостояниеТСРасшифровка.Заголовок 		 = ВыделенныйЭлементПланировщика.Текст;
	Элементы.ДекорацияДокументРегистратор.Заголовок    		 = Строка(ДокументСсылка);
	Элементы.ДекорацияКартинкаДокументаРегистратора.Картинка = ВыделенныйЭлементПланировщика.Картинка; 
	
	ФорматВремени 		  = "ДЛФ=T";
	ФорматДаты 			  = "ДФ=dd.MM.yyyy"; 
	НачалоПериодаДействия = Строка(Формат(ВыделенныйЭлементПланировщика.Начало, ФорматВремени)) + ", " + Строка(Формат(ВыделенныйЭлементПланировщика.Начало, ФорматДаты));
	КонецПериодаДействия  = Строка(Формат(ВыделенныйЭлементПланировщика.Конец, ФорматВремени)) + ", " + Строка(Формат(ВыделенныйЭлементПланировщика.Конец, ФорматДаты));
	СтрокаПериодаДействия = НачалоПериодаДействия + " - " + КонецПериодаДействия;
	Элементы.ДекорацияПериодРасшифровка.Заголовок = СтрокаПериодаДействия;
	
	Если ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.уатРемонтныйЛист") 
		Или ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.уатЗаявкаНаРемонт")Тогда
		
		ТекСпособРемонта = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ДокументСсылка, "СпособРемонта"); 
		ТекВидРемонта    = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ДокументСсылка, "ВидОбслуживания");
		
		Если ТекСпособРемонта = ПредопределенноеЗначение("Перечисление.уатСпособыРемонта.РемЗона") Тогда
			Элементы.ДекорацияМестоРемонтаЗагрузкаРасшифровка.Заголовок = НСтр("en='';ru='Собственная ремонтная зона'"); 
		Иначе  
			Контрагент = ТекСпособРемонта = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ДокументСсылка, "Контрагент");
			Элементы.ДекорацияМестоРемонтаЗагрузкаРасшифровка.Заголовок = Строка(Контрагент);
		КонецЕсли;
		
		Элементы.ДекорацияМестоРемонтаЗагрузкаКартинка.Картинка   = БиблиотекаКартинок.уатМестоРемонта;
		Элементы.ДекорацияМестоРемонтаЗагрузкаЗаголовок.Заголовок = НСтр("en='';ru='Место ремонта:'"); 
		
		Элементы.ДекорацияВидРемонтаМаршрутКартинка.Картинка     = ВыделенныйЭлементПланировщика.Картинка;
		Элементы.ДекорацияВидРемонтаМаршрутЗаголовок.Заголовок   = НСтр("en='';ru='Вид ремонта:'"); 
		Элементы.ДекорацияВидРемонтаМаршрутРасшифровка.Заголовок = Строка(ТекВидРемонта);
			
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.уатМаршрутныйЛист") Тогда  
		Если ДокументСсылка.Пустая() Тогда
			Элементы.ГруппаДокументРегистратор.Видимость = Ложь;
		КонецЕсли;
		ТекстЗагрузкиМЛ  = ВыделенныйЭлементПланировщика.Подсказка;
		Позиция 		 = СтрНайти(ТекстЗагрузкиМЛ, "-");
		ТекстЗагрузкиМЛ  = Сред(ТекстЗагрузкиМЛ, Позиция + 2);
		ТекстЗагрузкиМЛ  = СтрРазделить(ТекстЗагрузкиМЛ, ";");
		ЗагрузкаПоВесу   = ТекстЗагрузкиМЛ[0];
		ЗагрузкаПоОбъему = ТекстЗагрузкиМЛ[1];
		
		Элементы.ДекорацияМестоРемонтаЗагрузкаКартинка.Картинка     = БиблиотекаКартинок.уатЗагрузкаПоВесуОбъему;
		Элементы.ДекорацияМестоРемонтаЗагрузкаЗаголовок.Заголовок   = НСтр("en='';ru='Загрузка по весу | объему:'");
		Элементы.ДекорацияМестоРемонтаЗагрузкаРасшифровка.Заголовок = ЗагрузкаПоВесу + " | " + ЗагрузкаПоОбъему;  
		
		АдресОтправления  = Строка(уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ДокументСсылка, "АдресОтправления"));
		АдресНазначения   = Строка(уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ДокументСсылка, "АдресНазначения"));
		Маршрут 		  = "";
		
		Если ЗначениеЗаполнено(АдресОтправления) Тогда
			Маршрут = АдресОтправления;
		КонецЕсли;
		Если ЗначениеЗаполнено(АдресНазначения) Тогда
			Маршрут = Маршрут + " - " + АдресНазначения;
		КонецЕсли;
		
		Элементы.ДекорацияВидРемонтаМаршрутКартинка.Картинка     = БиблиотекаКартинок.уатСостояниеТСМаршрутныйЛист;
		Элементы.ДекорацияВидРемонтаМаршрутЗаголовок.Заголовок   = НСтр("en='';ru='Пункт отправления - прибытия:'");
		Элементы.ДекорацияВидРемонтаМаршрутРасшифровка.Заголовок = Маршрут;
			
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.уатРазнарядка") 
				Или ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.уатДиспозицияТС")
				Или ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.уатПутевойЛист") 
				Или ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.уатТехнологическийПутевойЛист") Тогда
		Элементы.ГруппаКолонкаСредняя.Видимость = Ложь; 
	Иначе
		Элементы.ГруппаПодвал.Видимость = Ложь;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИмяОбъектаМетаданныхВыбранногоДокумента(Документ)
	ТипВыбранногоДокумента = ТипЗнч(Документ);
	МетаданныеДокумента = Метаданные.НайтиПоТипу(ТипВыбранногоДокумента); 
	Возврат МетаданныеДокумента.Имя;	
КонецФункции

#КонецОбласти

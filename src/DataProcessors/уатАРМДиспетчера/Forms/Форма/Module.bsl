
#Область Переменные_Формы

&НаКлиенте
Перем ИмяИсточникаПеретаскиванияВМаршруты;
&НаКлиенте
Перем МассивСозданныхМЛ;
&НаКлиенте
Перем МассивСозданныхПЛ;
&НаКлиенте
Перем ФормаКарты;
&НаКлиенте
Перем ФормаПланировщика;
&НаКлиенте
Перем СоответсвиеПрицепов;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// Начало блока стандартных операций
	ДопПараметрыОткрытие = Новый Структура("ИмяФормы", ИмяФормы);
	уатЗащищенныеФункцииСервер.уатОбработкаФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	// Конец блока стандартных операций

	УстановитьПервоначальныеЗначенияПеременныхСервер();
	уатАРМ.УстановитьОграниченияИспользованияВОтбореЗаказыСписок(ЭтотОбъект);
	
	ПараметрыРазмещения = ПодключаемыеКоманды.ПараметрыРазмещения();
	ПараметрыРазмещения.Источники = Новый ОписаниеТипов("ДокументСсылка.уатМаршрутныйЛист");
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаКомандыСписокМЛ;
	ПараметрыРазмещения.ПрефиксГрупп = "МЛ";
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды
	
	ПараметрыРазмещения.Источники = Новый ОписаниеТипов("ДокументСсылка.уатПутевойЛист");
	ПараметрыРазмещения.КоманднаяПанель = Элементы.ГруппаКомандыСписокПЛ;
	ПараметрыРазмещения.ПрефиксГрупп = "ПЛ";
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКоманды.ПриСозданииНаСервере(ЭтотОбъект, ПараметрыРазмещения);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	ЗаполнитьСписокТСПриСозданииНаСервере();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// Начало блока стандартных операций
	уатЗащищенныеФункцииКлиент.уатОбработкаФормаПриОткрытии(Отказ, ДопПараметрыОткрытие);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	// Конец блока стандартных операций
	
	// СтандартныеПодсистемы.ПодключаемыеКоманды
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
	// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

	УстановитьПервоначальныеЗначенияПеременныхКлиент();
	УстановитьИконкиОтбораИСортировки();
	
	ТолькоСозданныеМЛОтбор();
	ТолькоСозданныеПЛОтбор();
	
	ТолькоВыполненныеМЛОтбор();
	ТолькоВыполненныеПЛОтбор();
	
	Если ОтображатьЭлектронныеКартыПриОткрытии Тогда 
		ИнициализацияКарты();
		ПодключитьОбработчикОжидания("ОбновитьКартуПослеОткрытияАРМДиспетчера", 1, Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если ЗавершениеРаботы Тогда 
		Возврат;
	КонецЕсли;
	СохранитьНастройки();
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	ЕстьИзменения = Ложь;
	Если ИмяСобытия = "Изменен маршрутный лист" Тогда 
		МЛ = Параметр;
		ТС = ЗначениеРеквизитаОбъекта(МЛ, "ТС");
		
		МассивТС = Новый Массив();
		СтрокаМЛ = МаршрутыСписок.НайтиСтроки(Новый Структура("ТС", ТС));
		Если СтрокаМЛ.Количество() <> 0 Тогда
			МассивТС.Добавить(СтрокаМЛ[0].ТС);
			ОчиститьПараметрыСтрокиТС(СтрокаМЛ[0]);
			
			ОбновитьСписокТССервер(МассивТС, МассивСозданныхМЛ);
			Элементы.МаршрутыСписокМЛ.Обновить();
			
			ЕстьИзменения = Истина;
		КонецЕсли;

	КонецЕсли;

	Если ИмяСобытия = "ЭлектронныеКарты_ОбработчикАвтообновления" Тогда
		ОтобразитьДанныеНаКарте();
	КонецЕсли;
	Если ИмяСобытия = "ЭлектронныеКарты_ПодборЗаказовАРМДиспетчера" Тогда
		ПодборЗаказовВАРМИзКарты(Параметр);
	КонецЕсли;
	
	Если ИмяСобытия = "Обновить маршрутные листы АРМ" 
		ИЛИ ИмяСобытия = "Изменен маршрутный лист из планировщика" Тогда
		МЛ              = Параметр.МЛ;
		ТС              = Параметр.ТС;
		ТСОсновное      = Параметр.ТСОсновное;
		
		МассивТС = Новый Массив();
		СтрокаМЛ = МаршрутыСписок.НайтиСтроки(Новый Структура("GUID", ТС));
		Если СтрокаМЛ.Количество() <> 0 Тогда
			МассивТС.Добавить(СтрокаМЛ[0].ТС);
			ОчиститьПараметрыСтрокиТС(СтрокаМЛ[0]);
			
			ОбновитьСписокТССервер(МассивТС, МассивСозданныхМЛ);
			
		КонецЕсли;
		
		МассивТС = Новый Массив();
		СтрокаМЛ = МаршрутыСписок.НайтиСтроки(Новый Структура("ТС", ТСОсновное));
		Если СтрокаМЛ.Количество() <> 0 Тогда
			МассивТС.Добавить(СтрокаМЛ[0].ТС);
			ОчиститьПараметрыСтрокиТС(СтрокаМЛ[0]);
			
			ОбновитьСписокТССервер(МассивТС, МассивСозданныхМЛ);
			Элементы.МаршрутыСписокМЛ.Обновить();
		КонецЕсли;
		ЕстьИзменения = Истина;
	КонецЕсли;
	
	Если ИмяСобытия = "Запись_уатЗаказГрузоотправителя" Тогда
		Если НастройкаАвтоматическоеОбновлениеПриЗаписиДокументов Тогда
			ОбновитьСписокЗаказов();
			ЕстьИзменения = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьИзменения Тогда
		ОбновитьПланировщик();
		ПодключитьОбработчикОжидания("Подключаемый_ОтобразитьДанныеНаКарте", 0.1, Истина);
	КонецЕсли;
		
	Если ИмяСобытия = "ЭлектронныеКарты_Закрытие"
		И Параметр = "РежимКарты_АРМДиспетчера" Тогда
		ФормаКарты = Неопределено;
	КонецЕсли; 
	
	//Если Источник = ФормаПланировщика И ИмяСобытия = "ИзменитьРабочуюДатуАРМ" Тогда	  
	//	ДатаПланирования   = Параметр;
	//	ДатаПланированияС  = НачалоДня(КонецДня(Параметр) - (НастройкаКоличествоДнейДоДатыПланирования * 86400) + 1);
	//	ДатаПланированияПо = КонецДня(Параметр);
	//	ОбновитьАдресНастройкиКомпоновкиДанных();
	//	
	//	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(МаршрутыСписокМЛ, "ДатаНач", НачалоДня(Параметр));
	//	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(МаршрутыСписокМЛ, "ДатаКон", КонецДня(Параметр));
	//	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокМЛ, "ДатаНач", ДатаПланированияС);
	//	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокМЛ, "ДатаКон", ДатаПланированияПо);
	//	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокПЛ, "ДатаНач", ДатаПланированияС);
	//	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокПЛ, "ДатаКон", ДатаПланированияПо);
	//	
	//	ОбновитьСписокТС(Неопределено);
	//	ОбновитьСписокЗаказов();
	//КонецЕсли;

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДатаПланированияПриИзменении(Элемент)
	
	ОбновитьДатуПланирования();
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(МаршрутыСписокМЛ, "ДатаНач", НачалоДня(ДатаПланирования));
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(МаршрутыСписокМЛ, "ДатаКон", КонецДня(ДатаПланирования));
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокМЛ, "ДатаНач", ДатаПланированияС);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокМЛ, "ДатаКон", ДатаПланированияПо);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокПЛ, "ДатаНач", ДатаПланированияС);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокПЛ, "ДатаКон", ДатаПланированияПо);
	
	ОбновитьСписокТС(Неопределено);
	ОбновитьСписокЗаказов();
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаКоличествоДнейДоДатыПланированияПриИзменении(Элемент)
	
	СохранитьНастройки();
	
	ДатаПланированияПриИзменении(Неопределено);

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_ЗаказыСписок

&НаСервереБезКонтекста
Процедура ЗаказыСписокПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
		
	КлючиСтрок     = Строки.ПолучитьКлючи();
	
	ТаблицаЗаказов = Новый ТаблицаЗначений();
	ТаблицаЗаказов.Колонки.Добавить("Ссылка",				 Новый ОписаниеТипов("ДокументСсылка.уатЗаказГрузоотправителя"));
	
	Для Каждого ТекСтрока Из КлючиСтрок Цикл
		НоваяСтрока = ТаблицаЗаказов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
	КонецЦикла;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	ТаблицаЗаказов.Ссылка КАК Ссылка
				   |ПОМЕСТИТЬ втЗаказыНаТС
	               |ИЗ
	               |	&ТаблицаЗаказов КАК ТаблицаЗаказов
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втЗаказыНаТС.Ссылка КАК Ссылка,
	               |	ВЫБОР
	               |		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЕСТЬNULL(уатСтатусыГрузов_уэСрезПоследних.Статус, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый))) > 1
	               |			ТОГДА ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Составной)
	               |		ИНАЧЕ МАКСИМУМ(ЕСТЬNULL(уатСтатусыГрузов_уэСрезПоследних.Статус, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый)))
	               |	КОНЕЦ КАК Статус
	               |ПОМЕСТИТЬ втСтрокиЗаказов
	               |ИЗ
	               |	втЗаказыНаТС КАК втЗаказыНаТС
	               |		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатСтатусыГрузов_уэ.СрезПоследних(
	               |				,
	               |				Заказ В
	               |					(ВЫБРАТЬ
	               |						втЗаказыНаТС.Ссылка КАК Ссылка
	               |					ИЗ
	               |						втЗаказыНаТС КАК втЗаказыНаТС)) КАК уатСтатусыГрузов_уэСрезПоследних
	               |		ПО втЗаказыНаТС.Ссылка = уатСтатусыГрузов_уэСрезПоследних.Заказ
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	втЗаказыНаТС.Ссылка
	               |;
	               |
	               |////////////////////////////////////////////////////////////////////////////////
	               |ВЫБРАТЬ
	               |	втСтрокиЗаказов.Статус КАК Статус,
	               |	уатСтатусы_уэ.ЦветТекстаПоУмолчанию КАК ЦветТекстаПоУмолчанию,
	               |	уатСтатусы_уэ.ЦветФонаПоУмолчанию КАК ЦветФонаПоУмолчанию,
	               |	уатСтатусы_уэ.Наименование КАК НаименованиеСтатуса,
	               |	втСтрокиЗаказов.Ссылка КАК Ссылка
	               |ИЗ
	               |	втСтрокиЗаказов КАК втСтрокиЗаказов
	               |		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатСтатусы_уэ КАК уатСтатусы_уэ
	               |		ПО втСтрокиЗаказов.Статус = уатСтатусы_уэ.Ссылка";
	Запрос.УстановитьПараметр("ТаблицаЗаказов", ТаблицаЗаказов);
	ВыборкаЗаказ = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЗаказ.Следующий() Цикл
		СтрокаСписка        = Строки[ВыборкаЗаказ.Ссылка];
		ДанныеСтрокаСписка  = СтрокаСписка.Данные;
		
		ЦветФона   = Неопределено;
		ЦветТекста = Неопределено;
		
		ХранилищеЦветФона = ВыборкаЗаказ.ЦветФонаПоУмолчанию;
		Если Не ХранилищеЦветФона = Неопределено Тогда 
			ДанныеЦветФона = ХранилищеЦветФона.Получить();
			Если Не ДанныеЦветФона = Неопределено И ТипЗнч(ДанныеЦветФона) = Тип("Цвет") Тогда
				ЦветФона = ДанныеЦветФона;
			КонецЕсли;
		КонецЕсли;
		
		ХранилищеЦветТекста = ВыборкаЗаказ.ЦветТекстаПоУмолчанию;
		Если Не ХранилищеЦветТекста = Неопределено Тогда 
			ДанныеЦветТекста = ХранилищеЦветТекста.Получить();
			Если Не ДанныеЦветТекста = Неопределено И ТипЗнч(ДанныеЦветТекста) = Тип("Цвет") Тогда
				ЦветТекста = ДанныеЦветТекста;
			КонецЕсли;
		КонецЕсли;
		ДанныеСтрокаСписка.СостояниеВыполненияСтрока = Строка(ДанныеСтрокаСписка.ПроцентВыполнения)
			+ "% " + Нстр("en = 'done'; ru = 'выполнено'");
		ДанныеСтрокаСписка.Статус = ВыборкаЗаказ.Статус;
		
		Попытка
			Если НЕ ЦветТекста = Неопределено Тогда 
				СтрокаСписка.Оформление["Статус"].УстановитьЗначениеПараметра("ЦветТекста", ЦветТекста);
			КонецЕсли;
			Если НЕ ЦветФона = Неопределено Тогда 
				СтрокаСписка.Оформление["Статус"].УстановитьЗначениеПараметра("ЦветФона", ЦветФона);
			КонецЕсли;
		Исключение
		КонецПопытки;
		
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыСписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
		
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено 
		ИЛИ ТипЗнч(Элемент.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Возврат;
	КонецЕсли;
		
	Если Поле = Элементы.ЗаказыСписокАдресНазначения Тогда
		ЗначениеПоля = ТекущиеДанные.АдресНазначения;
	ИначеЕсли Поле = Элементы.ЗаказыСписокАдресОтправления Тогда
		ЗначениеПоля = ТекущиеДанные.АдресОтправления;
	ИначеЕсли Поле = Элементы.ЗаказыСписокМаршрут Тогда
		ЗначениеПоля = ТекущиеДанные.Маршрут;
	ИначеЕсли Поле = Элементы.ЗаказыСписокНаправлениеПеревозки Тогда
		ЗначениеПоля = ТекущиеДанные.НаправлениеПеревозки;
	ИначеЕсли Поле = Элементы.ЗаказыСписокКонтрагент Тогда
		ЗначениеПоля = ТекущиеДанные.Контрагент;
	ИначеЕсли Поле = Элементы.ЗаказыСписокГрузоотправитель Тогда
		ЗначениеПоля = ТекущиеДанные.Грузоотправитель;
	ИначеЕсли Поле = Элементы.ЗаказыСписокГрузополучатель Тогда
		ЗначениеПоля = ТекущиеДанные.Грузополучатель;
	Иначе
		ЗначениеПоля = ТекущиеДанные.Ссылка;
	КонецЕсли;
	
	ПоказатьЗначение(Неопределено, ?(ЗначениеЗаполнено(ЗначениеПоля), ЗначениеПоля, ВыбраннаяСтрока.Ссылка));	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыСписокПриАктивизацииСтроки(Элемент)
	
	ТекСтрока = Элементы.ЗаказыСписок.ТекущиеДанные;
	Если ТекСтрока = Неопределено 
		ИЛИ ТипЗнч(Элемент.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Возврат;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_ОтобразитьДанныеНаКарте", 0.1, Истина);
	
	Если ФормаПланировщика = Неопределено 
		ИЛИ НЕ ФормаПланировщика.ПланировщикОткрыт Тогда
		Возврат;
	КонецЕсли;
	Если НЕ ФормаПланировщика.НастройкаВыделятьТекущийЗаказНаПланировщике Тогда
		ФормаПланировщика.ЗаказДляПланирования  = Неопределено;
	Иначе
		ФормаПланировщика.ЗаказДляПланирования  = ТекСтрока.Ссылка;
	КонецЕсли;

	ОбновитьПланировщик();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыСписокНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	ИмяИсточникаПеретаскиванияВМаршруты = "ЗаказыСписок";
	
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если Элемент.ТекущиеДанные = Неопределено 
		ИЛИ ТипЗнч(Элемент.ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		ИмяИсточникаПеретаскиванияВМаршруты = "";
		Выполнение = Ложь;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_МаршрутыСписок

&НаСервереБезКонтекста
Процедура МаршрутыСписокМЛПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	Для Каждого ТекСтрока Из Строки Цикл
		ТекСтрокаДанные = ТекСтрока.Значение.Данные;
		
		ТекСтрокаДанные.ВесПредставление   = Строка(ТекСтрокаДанные.ВесБрутто) + " / " + Строка(ТекСтрокаДанные.ТСГрузоподъемность);
		ТекСтрокаДанные.ОбъемПредставление = Строка(ТекСтрокаДанные.Объем) + " / " + Строка(ТекСтрокаДанные.ТСОбъемКузова);
		ТекСтрокаДанные.КоличествоУпаковокПредставление = Строка(ТекСтрокаДанные.КоличествоМест) + " / " + Строка(ТекСтрокаДанные.ТСМаксимальноеКоличествоУпаковок);
		
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыСписокПриАктивизацииСтроки(Элемент)
	
	ТекущиеДанные = Элементы.МаршрутыСписок.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(МаршрутыСписокМЛ, "ТС", Неопределено);
		Возврат;
	КонецЕсли;
		
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(МаршрутыСписокМЛ, "ТС", ТекущиеДанные.ТС);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(МаршрутыСписокМЛ, "ДатаНач", НачалоДня(ДатаПланирования));
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(МаршрутыСписокМЛ, "ДатаКон", КонецДня(ДатаПланирования));
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(МаршрутыСписокМЛ, "МассивСозданныхМЛ", МассивСозданныхМЛ);
	
	ВыделитьТСНаПланировщике(ТекущиеДанные.GUID);
	ПодключитьОбработчикОжидания("Подключаемый_ОтобразитьДанныеНаКарте", 0.1, Истина);
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыСписокПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, СтрокаИдентификатор, Поле)
	
	СтрокаИсточник = ПараметрыПеретаскивания.Значение;
	Если ТипЗнч(СтрокаИсточник) = Тип("Массив") 
		И СтрокаИсточник.Количество() > 0 Тогда
		СтрокаИсточник = СтрокаИсточник[0];
	КонецЕсли;
	
	Если СтрокаИдентификатор = Неопределено Тогда 
		СтрокаТС = Элементы.МаршрутыСписок.ТекущаяСтрока;
	ИначеЕсли ТипЗнч(СтрокаИдентификатор) = Тип("ДокументСсылка.уатМаршрутныйЛист") Тогда
		СтрокаТС = Неопределено;
	Иначе 
		СтрокаТС = МаршрутыСписок.НайтиПоИдентификатору(СтрокаИдентификатор);
	КонецЕсли;
	
 	Если СтрокаТС = Неопределено 
		ИЛИ СтрокаИсточник = Неопределено Тогда
		СтандартнаяОбработка             = Ложь;
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Возврат;   
	ИначеЕсли ИмяИсточникаПеретаскиванияВМаршруты = "ЗаказыСписок" 
		ИЛИ ИмяИсточникаПеретаскиванияВМаршруты = "МаршрутыСписокМЛ" Тогда
		СтандартнаяОбработка             = Ложь;
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Копирование;

	Иначе
		СтандартнаяОбработка             = Ложь;
		ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена;
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыСписокПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	Если ПараметрыПеретаскивания.Действие = ДействиеПеретаскивания.Отмена тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТС = Строка;
	Если Строка = Неопределено Тогда
		СтрокаТС = Элементы.МаршрутыСписок.ТекущиеДанные;
		Если СтрокаТС = Неопределено Тогда
			Возврат;
		КонецЕсли;
		СтрокаТС = СтрокаТС.ПолучитьИдентификатор();
	КонецЕсли;
	
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Массив")
		И ПараметрыПеретаскивания.Значение.Количество() > 0 Тогда
		СтрокаИсточник = ПараметрыПеретаскивания.Значение[0];
	Иначе
		СтрокаИсточник = ПараметрыПеретаскивания.Значение;
	КонецЕсли;
	
	ТекСтрока = МаршрутыСписок.НайтиПоИдентификатору(СтрокаТС);
	
	Если ИмяИсточникаПеретаскиванияВМаршруты = "МаршрутыСписокМЛ" Тогда
		ОбновитьТСвМЛ(СтрокаИсточник, СтрокаТС);
	Иначе
		СоздатьМЛ(СтрокаИсточник, СтрокаТС); 
	КонецЕсли;

	СтрокиТС = МаршрутыСписок.НайтиСтроки(Новый Структура("ТС", ТекСтрока.ТС));
	Если СтрокиТС.Количество() <> 0 Тогда
		Элементы.МаршрутыСписок.ТекущаяСтрока = СтрокиТС[0].ПолучитьИдентификатор();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура МаршрутыСписокВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Элемент.ТекущиеДанные = Неопределено 
		ИЛИ ТипЗнч(ВыбраннаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	Если Поле = Элементы.МаршрутыСписокПрицеп1
		ИЛИ Поле = Элементы.МаршрутыСписокПрицеп2 Тогда
		СтандартнаяОбработка = Истина;
	ИначеЕсли Поле = Элементы.МаршрутыСписокТС Тогда
		
		ТС = Элемент.ТекущиеДанные.ТС;
		Если ЗначениеЗаполнено(ТС)
			И ТипЗнч(ТС) = Тип("СправочникСсылка.уатТС") Тогда
			ПоказатьЗначение(Неопределено, ТС);
		КонецЕсли;
	ИначеЕсли Поле = Элементы.МаршрутыСписокТекущееСостояниеТС Тогда
		
		ТекущееСостояниеТСРегистратор = Элемент.ТекущиеДанные.ТекущееСостояниеТСРегистратор;
		Если ЗначениеЗаполнено(ТекущееСостояниеТСРегистратор) Тогда
			ПоказатьЗначение(Неопределено, ТекущееСостояниеТСРегистратор);
		КонецЕсли;
			
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыСписокПослеУдаления(Элемент)
	ОбновитьСписокТС(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыСписокПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыСписокНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	ИмяИсточникаПеретаскиванияВМаршруты = "МаршрутыСписок";
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыСписокМЛПриАктивизацииСтроки(Элемент)
	ТекущиеДанные = Элементы.МаршрутыСписок.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	МассивТС = Новый Массив();
	МассивТС.Добавить(ТекущиеДанные.ТС);
	ОчиститьПараметрыСтрокиТС(ТекущиеДанные);
	
	ОбновитьСписокТССервер(МассивТС, МассивСозданныхМЛ);
	
	ПодключитьОбработчикОжидания("Подключаемый_ОтобразитьДанныеНаКарте", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыСписокПрицеп1ПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.МаршрутыСписок.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктурыПрицепа = ПредставлениеПрицепа(ТекущиеДанные.Прицеп1, КоэффициентГрузоподъемности, КоэффициентОбъемаКузова);
	ТекущиеДанные.Прицеп1Грузоподъемность = СтруктурыПрицепа.Грузоподъемность;
	ТекущиеДанные.Прицеп1ОбъемКузова      = СтруктурыПрицепа.ОбъемКузова;
	ТекущиеДанные.Прицеп1МаксимальноеКоличествоУпаковок = СтруктурыПрицепа.МаксимальноеКоличествоУпаковок;

	СтруктураПрицепов = Новый Структура("Прицеп1,Прицеп1Грузоподъемность,Прицеп1ОбъемКузова,
	|Прицеп1МаксимальноеКоличествоУпаковок,Прицеп2,Прицеп2Грузоподъемность,Прицеп2ОбъемКузова,
	|Прицеп2МаксимальноеКоличествоУпаковок");
	ЗаполнитьЗначенияСвойств(СтруктураПрицепов, ТекущиеДанные);
	
	СоответсвиеПрицепов.Вставить(ТекущиеДанные.ТС, СтруктураПрицепов);
	
	МассивТС = Новый Массив();
	МассивТС.Добавить(ТекущиеДанные.ТС);
	ОчиститьПараметрыСтрокиТС(ТекущиеДанные);
	ОбновитьСписокТССервер(МассивТС, МассивСозданныхМЛ, СоответсвиеПрицепов);
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыСписокПрицеп2ПриИзменении(Элемент)
	ТекущиеДанные = Элементы.МаршрутыСписок.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтруктурыПрицепа = ПредставлениеПрицепа(ТекущиеДанные.Прицеп2, КоэффициентГрузоподъемности, КоэффициентОбъемаКузова);
	ТекущиеДанные.Прицеп2Грузоподъемность = СтруктурыПрицепа.Грузоподъемность;
	ТекущиеДанные.Прицеп2ОбъемКузова      = СтруктурыПрицепа.ОбъемКузова;
	ТекущиеДанные.Прицеп2МаксимальноеКоличествоУпаковок = СтруктурыПрицепа.МаксимальноеКоличествоУпаковок;

	СтруктураПрицепов = Новый Структура("Прицеп1,Прицеп1Грузоподъемность,Прицеп1ОбъемКузова,
	|Прицеп1МаксимальноеКоличествоУпаковок,Прицеп2,Прицеп2Грузоподъемность,Прицеп2ОбъемКузова,
	|Прицеп2МаксимальноеКоличествоУпаковок");
	ЗаполнитьЗначенияСвойств(СтруктураПрицепов, ТекущиеДанные);
	
	СоответсвиеПрицепов.Вставить(ТекущиеДанные.ТС, СтруктураПрицепов);

	МассивТС = Новый Массив();
	МассивТС.Добавить(ТекущиеДанные.ТС);
	ОчиститьПараметрыСтрокиТС(ТекущиеДанные);
	ОбновитьСписокТССервер(МассивТС, МассивСозданныхМЛ, СоответсвиеПрицепов);

КонецПроцедуры

&НаКлиенте
Процедура МаршрутыСписокПрицеп1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.МаршрутыСписок.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	ПараметрыФормы = Новый Структура("ТекущаяСтрока", ТекущиеДанные.Прицеп1);
	ФормаВыбора = ПолучитьФорму("Справочник.уатТС.ФормаВыбора", ПараметрыФормы, Элемент);
	
	ЭлементОтбора = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("Ссылка");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.НеРавно;
	ЭлементОтбора.ПравоеЗначение   = ТекущиеДанные.Прицеп2;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.Использование    = Истина;
	
	ЭлементОтбора = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("ЭтоГруппа");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение   = Ложь;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.Использование    = Истина;
	
	ЭлементОтбора = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("ПометкаУдаления");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение   = Ложь;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.Использование    = Истина;
	
	ГруппаОтбора = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы        = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	ГруппаОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ГруппаОтбора.Использование    = Истина;
	
	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("ВидМоделиТС");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение   = ПредопределенноеЗначение("Перечисление.уатВидыМоделейТС.Прицеп");
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.Использование    = Истина;
	
	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("ВидМоделиТС");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение   = ПредопределенноеЗначение("Перечисление.уатВидыМоделейТС.Оборудование");
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.Использование    = Истина;
	
	ФормаВыбора.Открыть();

КонецПроцедуры

&НаКлиенте
Процедура МаршрутыСписокПрицеп2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.МаршрутыСписок.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;	
	
	ПараметрыФормы = Новый Структура("ТекущаяСтрока", ТекущиеДанные.Прицеп2);
	ФормаВыбора = ПолучитьФорму("Справочник.уатТС.ФормаВыбора", ПараметрыФормы, Элемент);
	
	ЭлементОтбора = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("Ссылка");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.НеРавно;
	ЭлементОтбора.ПравоеЗначение   = ТекущиеДанные.Прицеп1;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.Использование    = Истина;
	
	ЭлементОтбора = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("ЭтоГруппа");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение   = Ложь;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.Использование    = Истина;
	
	ЭлементОтбора = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("ПометкаУдаления");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение   = Ложь;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.Использование    = Истина;
	
	ГруппаОтбора = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы        = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	ГруппаОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ГруппаОтбора.Использование    = Истина;
	
	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("ВидМоделиТС");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение   = ПредопределенноеЗначение("Перечисление.уатВидыМоделейТС.Прицеп");
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.Использование    = Истина;
	
	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("ВидМоделиТС");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение   = ПредопределенноеЗначение("Перечисление.уатВидыМоделейТС.Оборудование");
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.Использование    = Истина;
	
	ФормаВыбора.Открыть();

КонецПроцедуры

&НаКлиенте
Процедура МаршрутыСписокПрицеп2АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.МаршрутыСписок.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	УстановитьСписокПрицеповДляПодбора(
		?(Ожидание = 0, "", Текст),
		ТекущиеДанные.Прицеп1,
		ДанныеВыбора
	);
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыСписокПрицеп1АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.МаршрутыСписок.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	УстановитьСписокПрицеповДляПодбора(
		?(Ожидание = 0, "", Текст),
		ТекущиеДанные.Прицеп2,
		ДанныеВыбора
	);
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыСписокПрицеп1ОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если Текст = "" Тогда 
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.МаршрутыСписок.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	УстановитьСписокПрицеповДляПодбора(
		Текст,
		ТекущиеДанные.Прицеп2,
		ДанныеВыбора
	);
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыСписокПрицеп2ОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	
	Если Текст = "" Тогда 
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	
	ТекущиеДанные = Элементы.МаршрутыСписок.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	УстановитьСписокПрицеповДляПодбора(
		Текст,
		ТекущиеДанные.Прицеп1,
		ДанныеВыбора
	);
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыСписокМЛНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	ИмяИсточникаПеретаскиванияВМаршруты = "МаршрутыСписокМЛ";
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_СписокМЛ

&НаКлиенте
Процедура СписокМЛПриАктивизацииСтроки(Элемент)
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура НастройкаОтображатьТолькоНЕВыполненныеМЛПриИзмененииИзменении(Элемент)
	ТолькоВыполненныеМЛОтбор();
КонецПроцедуры

&НаКлиенте
Процедура НастройкаОтображатьТолькоНЕВыполненныеПЛПриИзменении(Элемент)
	ТолькоВыполненныеПЛОтбор();
КонецПроцедуры

&НаКлиенте
Процедура НастройкаТолькоСозданныеПЛПриИзменении(Элемент)
	ТолькоСозданныеПЛОтбор();
КонецПроцедуры

&НаКлиенте
Процедура НастройкаТолькоСозданныеМЛПриИзменении(Элемент)
	ТолькоСозданныеМЛОтбор();
КонецПроцедуры

&НаКлиенте
Процедура НастройкаТолькоВыбранныеТСМЛПриИзменении(Элемент)
	НастройкаТолькоВыбранныеТСМЛОтбор();
КонецПроцедуры

&НаКлиенте
Процедура НастройкаТолькоВыбранныеТСПЛПриИзменении(Элемент)
	НастройкаТолькоВыбранныеТСПЛОтбор();
КонецПроцедуры

#Область ОбработчикиСобытийЭлементовТаблицыФормы_СписокПЛ

&НаКлиенте
Процедура СписокПЛПриАктивизацииСтроки(Элемент)
	ПодключаемыеКомандыКлиент.НачатьОбновлениеКоманд(ЭтотОбъект);
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ВыполнитьКоманду(Команда)
	Если ПереключательРежимаОтображения = "МаршрутныеЛисты" Тогда
		ЭлементыСписок = Элементы.СписокМЛ;
	Иначе
		ЭлементыСписок = Элементы.СписокПЛ;
	КонецЕсли;
	
	ПодключаемыеКомандыКлиент.НачатьВыполнениеКоманды(ЭтотОбъект, Команда, ЭлементыСписок);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ОткрытьНастройки(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ОткрытьНастройкиЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.уатАРМДиспетчера.Форма.ФормаНастроек",, ЭтотОбъект,,,, Оповещение);
	
КонецПроцедуры

#Область ЗаказыСписок

&НаКлиенте
Процедура РежимОтображенияЗаказыНаТС(Команда)
	
	ПереключательРежимаОтображения = "ЗаказыНаТС";
	ПереключательРежимаОтображенияПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура РежимОтображенияМЛ(Команда)
	
	ПереключательРежимаОтображения = "МаршрутныеЛисты";
	ПереключательРежимаОтображенияПриИзменении();

КонецПроцедуры

&НаКлиенте
Процедура РежимОтображенияПЛ(Команда)
	
	ПереключательРежимаОтображения = "ПутевыеЛисты";
	ПереключательРежимаОтображенияПриИзменении();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписок(Команда)
	
	Если ПереключательРежимаОтображения = "ЗаказыНаТС" Тогда
		ОбновитьСписокЗаказов();
	ИначеЕсли ПереключательРежимаОтображения = "МаршрутныеЛисты" Тогда
		Элементы.СписокМЛ.Обновить();
	Иначе
		Элементы.СписокПЛ.Обновить();
	КонецЕсли;
	
	ПодключитьОбработчикОжидания("Подключаемый_ОтобразитьДанныеНаКарте", 0.1, Истина);
	ОбновитьПланировщик();

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьПланировщик(Команда)
	
	ИмяКлючевойОперации = "уатОперации.Планировщик.АРМДиспетчера";
	ЗаписатьОперациюБизнесСтатистики(ИмяКлючевойОперации, 1);

	ПараметрыПланировщика = Новый Структура("НачальнаяДатаПланирования, НастройкаРежимОтображенияМЛ",
	ДатаПланирования, 3);
	Если НастройкаРежимОткрытияПланировщика = 1 Тогда
		ТекстПредупреждения = НСтр("ru='Открытие планировщика...'");
		ПоказатьПредупреждение(Неопределено, ТекстПредупреждения, 1);
	КонецЕсли;
	ФормаПланировщика = ОткрытьФорму("Обработка.уатАРМДиспетчера.Форма.ФормаПланировщика", ПараметрыПланировщика);
	
	ТекущиеДанные = Элементы.ЗаказыСписок.ТекущиеДанные;
	ТекСтрока     = Элементы.ЗаказыСписок.ТекущаяСтрока;
	Если НЕ ФормаПланировщика.НастройкаВыделятьТекущийЗаказНаПланировщике Тогда
		ФормаПланировщика.ЗаказДляПланирования  = Неопределено;
	ИначеЕсли ТекущиеДанные <> Неопределено 
		И НЕ ТипЗнч(ТекСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		ФормаПланировщика.ЗаказДляПланирования  = ТекущиеДанные.Ссылка;
	Иначе
		ФормаПланировщика.ЗаказДляПланирования  = Неопределено;
	КонецЕсли;
	
	ОбновитьПланировщик();
	
	ТекущиеДанные = Элементы.МаршрутыСписок.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ВыделитьТСНаПланировщике(ТекущиеДанные.GUID);

КонецПроцедуры

&НаКлиенте
Процедура ПодобратьТСпоЗаказу(Команда)
	
	ИмяКлючевойОперации = "уатОперации.НазначениеТСнаЗаказ.АРМДиспетчера";
	ЗаписатьОперациюБизнесСтатистики(ИмяКлючевойОперации, 1);

	ТекущиеДанные = Элементы.ЗаказыСписок.ТекущиеДанные;
	ТекущаяСтрока = Элементы.ЗаказыСписок.ТекущаяСтрока;
	Если ТекущиеДанные = Неопределено 
		ИЛИ ТипЗнч(ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		Возврат;
	КонецЕсли;
		
	ВыполнитьПодборТСпоЗаказу(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьТС(Команда)
	
	ИмяКлючевойОперации = "уатОперации.НазначениеТСнаМЛ.АРМДиспетчера";
	ЗаписатьОперациюБизнесСтатистики(ИмяКлючевойОперации, 1);

	ТекСтрокаМЛ = Элементы.МаршрутыСписокМЛ.ТекущиеДанные;
	
	Если ТекСтрокаМЛ = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если НЕ ЗначениеЗаполнено(ТекСтрокаМЛ.Ссылка) Тогда
		ТекстНСТР = НСтр("en='It is nessecary to select routing list';ru='Необходимо выбрать маршрутный лист'");
		ПоказатьПредупреждение(Неопределено, ТекстНСТР);
		Возврат;
	КонецЕсли;
	
	ПодобратьТСпоМаршрутномуЛистуЗаписьДокументаСписок(КодВозвратаДиалога.Да, Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаПериода(Команда)
	
	ДиалогПериода = Новый ДиалогРедактированияСтандартногоПериода();
	Период        = ДиалогПериода.Период;
	
	ОтправлениеС = КонецДня(ДатаПланирования) - (НастройкаКоличествоДнейДоДатыПланирования * 86400) + 1;
	
	Период.ДатаНачала    = ?(НачалоДня(ДатаПланирования) = '00010101', '00010101',
		ОтправлениеС);
	Период.ДатаОкончания = ?(НачалоДня(ДатаПланирования) = '00010101', '39991231', КонецДня(ДатаПланирования));
	ДиалогПериода.Показать(Новый ОписаниеОповещения("НастройкаПериодаЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОтбор(Команда)
	
	ПараметрыПередачи = Новый Структура();
	ПараметрыПередачи.Вставить("АдресВрХранилища",	 ПолучитьСтруктуруПараметровОтборовАдрес());
	ПараметрыПередачи.Вставить("ЭтоАРМДиспетчера",	 Истина);
	
	ОписаниеОповещенияОЗакрытииФормаОтбора = Новый ОписаниеОповещения("СоздатьОтборЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.уатАРМФормаОтбора",ПараметрыПередачи, ЭтотОбъект,,,,
		ОписаниеОповещенияОЗакрытииФормаОтбора, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьКарту(Команда)
	ИнициализацияКарты();
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСортировку(Команда)
	
	ПараметрыПередачи = Новый Структура();
	ПараметрыПередачи.Вставить("ЭтоАРМДиспетчера",	 Истина);

	ОписаниеОповещенияОЗакрытииФормаОтбора = Новый ОписаниеОповещения("СоздатьСортировкуЗавершение", ЭтотОбъект);
	ОткрытьФорму("ОбщаяФорма.уатАРМФормаСортировки", ПараметрыПередачи, ЭтотОбъект,,,,
		ОписаниеОповещенияОЗакрытииФормаОтбора, РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
КонецПроцедуры

&НаКлиенте
Процедура ГруппироватьЗаказыПоЗаказам(Команда)
	
	Если ГруппировкаЗаказовПредставление = "БезГруппировки" Тогда 
		Возврат;
	КонецЕсли;
	
	ГруппировкаЗаказовПредставление = "БезГруппировки";
	УстановитьПометкуКнопкиГруппировки(1);
	
	ДобавитьГруппировкуСпискуЗаказов();
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппироватьЗаказыПоКонтрагенту(Команда)
	
	Если ГруппировкаЗаказовПредставление = "ПоКонтрагенту" Тогда 
		Возврат;
	КонецЕсли;
	
	ГруппировкаЗаказовПредставление = "ПоКонтрагенту";
	УстановитьПометкуКнопкиГруппировки(2);
	
	ДобавитьГруппировкуСпискуЗаказов("Контрагент");

КонецПроцедуры

&НаКлиенте
Процедура ГруппироватьЗаказыПоАдресуОтправления(Команда)
	
	Если ГруппировкаЗаказовПредставление = "ПоАдресуОтправления" Тогда 
		Возврат;
	КонецЕсли;
	
	ГруппировкаЗаказовПредставление = "ПоАдресуОтправления";
	УстановитьПометкуКнопкиГруппировки(3);
	
	ДобавитьГруппировкуСпискуЗаказов("АдресОтправления");
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппироватьЗаказыПоАдресуНазначения(Команда)
	
	Если ГруппировкаЗаказовПредставление = "ПоАдресуНазначения" Тогда 
		Возврат;
	КонецЕсли;
	
	ГруппировкаЗаказовПредставление = "ПоАдресуНазначения";
	УстановитьПометкуКнопкиГруппировки(4);
	
	ДобавитьГруппировкуСпискуЗаказов("АдресНазначения");
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппироватьЗаказыПоДатеОтправления(Команда)
	
	Если ГруппировкаЗаказовПредставление = "ПоДатеОтправления" Тогда 
		Возврат;
	КонецЕсли;
	
	ГруппировкаЗаказовПредставление = "ПоДатеОтправления";
	УстановитьПометкуКнопкиГруппировки(5);
	
	ДобавитьГруппировкуСпискуЗаказов("ОтправлениеС");
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппироватьЗаказыПоДатеПрибытия(Команда)
	
	Если ГруппировкаЗаказовПредставление = "ПоДатеПрибытия" Тогда 
		Возврат;
	КонецЕсли;
	
	ГруппировкаЗаказовПредставление = "ПоДатеПрибытия";
	УстановитьПометкуКнопкиГруппировки(6);
	
	ДобавитьГруппировкуСпискуЗаказов("ДоставкаС");
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппироватьЗаказыПоГрузоотправителю(Команда)
	
	Если ГруппировкаЗаказовПредставление = "ПоГрузоотправителю" Тогда 
		Возврат;
	КонецЕсли;
	
	ГруппировкаЗаказовПредставление = "ПоГрузоотправителю";
	УстановитьПометкуКнопкиГруппировки(7);
	
	ДобавитьГруппировкуСпискуЗаказов("Грузоотправитель");
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппироватьЗаказыПоГрузополучателю(Команда)
	
	Если ГруппировкаЗаказовПредставление = "ПоГрузополучателю" Тогда 
		Возврат;
	КонецЕсли;
	
	ГруппировкаЗаказовПредставление = "ПоГрузополучателю";
	УстановитьПометкуКнопкиГруппировки(8);
	
	ДобавитьГруппировкуСпискуЗаказов("Грузополучатель");
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппироватьЗаказыПоНаправлениямПеревозки(Команда)
	
	Если ГруппировкаЗаказовПредставление = "ПоНаправлениямПеревозки" Тогда 
		Возврат;
	КонецЕсли;
	
	ГруппировкаЗаказовПредставление = "ПоНаправлениямПеревозки";
	УстановитьПометкуКнопкиГруппировки(9);
	
	ДобавитьГруппировкуСпискуЗаказов("НаправлениеПеревозки");
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппироватьЗаказыПоМаршруту(Команда)
	
	Если ГруппировкаЗаказовПредставление = "ПоМаршрутам" Тогда 
		Возврат;
	КонецЕсли;
	
	ГруппировкаЗаказовПредставление = "ПоМаршрутам";
	УстановитьПометкуКнопкиГруппировки(10);
	
	ДобавитьГруппировкуСпискуЗаказов("Маршрут");
	
КонецПроцедуры

#КонецОбласти

#Область ТССписок

&НаКлиенте
Процедура ОбновитьСписокТС(Команда)
	
	ТекущиеДанные = Элементы.МаршрутыСписок.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(МаршрутыСписокМЛ, "ТС", Неопределено);
	КонецЕсли;
	
	СоответсвиеПрицепов = Новый Соответствие();
	МассивТС = Новый Массив();
	Для Каждого ТекСтрока Из МаршрутыСписок Цикл 
		МассивТС.Добавить(ТекСтрока.ТС);
		ОчиститьПараметрыСтрокиТС(ТекСтрока);
		СтруктураПрицепов = Новый Структура("Прицеп1,Прицеп1Грузоподъемность,Прицеп1ОбъемКузова,
		|Прицеп1МаксимальноеКоличествоУпаковок,Прицеп2,Прицеп2Грузоподъемность,Прицеп2ОбъемКузова,
		|Прицеп2МаксимальноеКоличествоУпаковок");
		ЗаполнитьЗначенияСвойств(СтруктураПрицепов, ТекСтрока);
		СоответсвиеПрицепов.Вставить(ТекСтрока.ТС, СтруктураПрицепов);
	КонецЦикла;
	
	ОбновитьСписокТССервер(МассивТС, МассивСозданныхМЛ, СоответсвиеПрицепов);
	
	ПодключитьОбработчикОжидания("Подключаемый_ОтобразитьДанныеНаКарте", 0.1, Истина);
	ОбновитьПланировщик();

КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТС(Команда)
	
	РазрешенныеВидыТС = Новый Массив();
	РазрешенныеВидыТС.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыМоделейТС.АвиационныйТранспорт"));
	РазрешенныеВидыТС.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыМоделейТС.Автотранспорт"));
	РазрешенныеВидыТС.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыМоделейТС.ЖДТранспорт"));
	РазрешенныеВидыТС.Добавить(ПредопределенноеЗначение("Перечисление.уатВидыМоделейТС.МорскойТранспорт"));
	
	ПараметрыВыбора = Новый Структура("Отбор", Новый Структура("ВидМоделиТС", РазрешенныеВидыТС));
	
	ОткрытьФорму("Справочник.уатТС.ФормаВыбора", ПараметрыВыбора, ЭтотОбъект,,,, Новый ОписаниеОповещения("ДобавитьТСЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыЗаполнитьТСпоЗонеОтбора(Команда)
	Если ПравоОграничениеЗонПоСотруднику Тогда
		ПараметрыФормы = Новый Структура("Отбор", Новый Структура("Ссылка", мсвДоступныхЗон(ТекПользователь)));
	Иначе
		ПараметрыФормы = Неопределено;
	КонецЕсли;
	ОткрытьФорму("Справочник.уатГеозоны_уэ.ФормаВыбора", ПараметрыФормы,,,,, Новый ОписаниеОповещения("ТСпоЗонеОтбораЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
КонецПроцедуры

&НаСервереБезКонтекста
Функция мсвДоступныхЗон(ТекПользователь)
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	уатГеозоны_уэ.Ссылка
	|ИЗ
	|	Справочник.уатГеозоны_уэ КАК уатГеозоны_уэ
	|ГДЕ
	|	НЕ уатГеозоны_уэ.ПометкаУдаления
	|	И НЕ уатГеозоны_уэ.ЭтоГруппа
	|
	|СГРУППИРОВАТЬ ПО
	|	уатГеозоны_уэ.Ссылка
	|
	|ИМЕЮЩИЕ
	|	КОЛИЧЕСТВО(уатГеозоны_уэ.Сотрудники.Сотрудник) = 0
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	уатГеозоны_уэ.Ссылка
	|ИЗ
	|	Справочник.уатГеозоны_уэ КАК уатГеозоны_уэ
	|ГДЕ
	|	НЕ уатГеозоны_уэ.ПометкаУдаления
	|	И НЕ уатГеозоны_уэ.ЭтоГруппа
	|	И уатГеозоны_уэ.Сотрудники.Сотрудник = &Сотрудник");
	Запрос.УстановитьПараметр("Сотрудник", ТекПользователь);
	мсвРез = Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат мсвРез;
КонецФункции

&НаСервере
Процедура ОбновитьСписокЗон()
	ЗоныДерево = РеквизитФормыВЗначение("ОтборЗоны");
	КопияЗонДерево = ЗоныДерево.Скопировать();
	
	ЗоныДерево.Строки.Очистить();
	
	Выборка1 = Справочники.уатГеозоны_уэ.Выбрать(Справочники.уатГеозоны_уэ.ПустаяСсылка());
	
	ПравоОграничениеЗонПоСотруднику = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(ПользователиКлиентСервер.АвторизованныйПользователь(),ПланыВидовХарактеристик.уатПраваИНастройки.РазрешитьВыборТолькоЗакрепленныхЗон);
	
	Пока Выборка1.Следующий() Цикл
		Если НЕ Выборка1.ЭтоГруппа И ПравоОграничениеЗонПоСотруднику Тогда
			тблСотрудникиЗоны = Выборка1.Сотрудники;
			Если тблСотрудникиЗоны.Количество() > 0
				И тблСотрудникиЗоны.НайтиСтроки(Новый Структура("Сотрудник", ТекПользователь)).Количество() = 0 Тогда
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		НовСтрока1 = ЗоныДерево.Строки.Добавить();
		НовСтрока1.Зона = Выборка1.Ссылка;
		НовСтрока1.ЭтоГруппа = Выборка1.ЭтоГруппа;
		НайдСтрока = КопияЗонДерево.Строки.Найти(Выборка1.Ссылка, "Зона", Истина);
		Если НайдСтрока <> Неопределено И (НЕ НайдСтрока.Зона.ЭтоГруппа) И НайдСтрока.Использование тогда
			НовСтрока1.Использование = 1;
		КонецЕсли;
		
		Если Выборка1.Ссылка.ЭтоГруппа Тогда
			Выборка2 = Справочники.уатГеозоны_уэ.ВыбратьИерархически(Выборка1.Ссылка);
			КолИспользуемыхНиже = 0;
			Пока Выборка2.Следующий() Цикл
				НовСтрока2 = НовСтрока1.Строки.Добавить();
				НовСтрока2.Зона = Выборка2.Ссылка;
				НовСтрока2.ЭтоГруппа = НовСтрока2.ЭтоГруппа;
				НайдСтрока = КопияЗонДерево.Строки.Найти(Выборка2.Ссылка,"Зона",Истина);
				Если НайдСтрока <> Неопределено И НЕ НайдСтрока.Зона.ЭтоГруппа И НайдСтрока.Использование Тогда
					НовСтрока2.Использование = 1;
					КолИспользуемыхНиже = КолИспользуемыхНиже + 1;
				КонецЕсли;
				НовСтрока2.Картинка = ?(Выборка2.ЭтоГруппа, 0, 1);
			КонецЦикла;
			Если НовСтрока1.Строки.Количество() = КолИспользуемыхНиже И КолИспользуемыхНиже <> 0 Тогда
				НовСтрока1.Использование = 1;
			ИначеЕсли КолИспользуемыхНиже > 0 Тогда
				НовСтрока1.Использование = 2;
			КонецЕсли;
		КонецЕсли;
		
		НовСтрока1.Картинка = ?(Выборка1.ЭтоГруппа, 0, 1);
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ЗоныДерево, "ОтборЗоны");
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыЗаполнитьВсемиТС(Команда)
	
	МаршрутыЗаполнитьСписокТС(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыЗаполнитьСобственнымиТС(Команда)
	
	МаршрутыЗаполнитьСписокТС(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыЗаполнитьСобственнымиТССЭкипажем(Команда)
	
	МаршрутыЗаполнитьСписокТС(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыЗаполнитьПривлеченнымиТС(Команда)
	
	МаршрутыЗаполнитьСписокТС(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыЗаполнитьТСпоЗонамОтбора(Команда)
	
	МаршрутыЗаполнитьСписокТС(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыРасширеннаяФормаЗаполнения(Команда)
	ОткрытьФорму("ОбщаяФорма.уатАРМФормаЗаполненияТС",
		Новый Структура("ДатаПланирования, НастройкаАлгоритмМаршрутизации", ДатаПланирования, 0),ЭтотОбъект,,,,
		Новый ОписаниеОповещения("ФормаЗаполненияТСЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыЗаполнитьУдалитьТсбезМаршрутов(Команда)
	
	МассивДляУдаления = Новый Массив();
	Для Каждого ТекСтрока Из МаршрутыСписок Цикл
		Если ЗначениеЗаполнено(ТекСтрока.КоличествоРейсов) Тогда
			Продолжить;
		КонецЕсли;
		МассивДляУдаления.Добавить(ТекСтрока);
	КонецЦикла;
	Для Каждого ТекСтрока Из МассивДляУдаления Цикл
		МаршрутыСписок.Удалить(ТекСтрока);
	КонецЦикла;
	ОбновитьСписокТС(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыОчистить(Команда)
	
	МаршрутыСписок.Очистить();
	СоответсвиеПрицепов = Новый Соответствие;
	ОбновитьСписокТС(Неопределено);
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыЗаполнитьВсеТСсМаршрутами(Команда)
	
	МаршрутыЗаполнитьСписокТС(Команда.Имя);
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыЗаполнитьПоРазнарядке(Команда)
	МаршрутыСписок.Очистить();
	СоответсвиеПрицепов = Новый Соответствие;

	ДатаНачала    = ?(НачалоДня(ДатаПланирования) = '00010101', '00010101', НачалоДня(ДатаПланирования));
	ДатаОкончания = ?(НачалоДня(ДатаПланирования) = '00010101', '39991231', КонецДня(ДатаПланирования));
	
	ПараметрыФормы = Новый Структура("РежимВыбора, Отбор, ДатаНачала, ДатаОкончания", Истина,
	Новый Структура("ВидОперации, ПометкаНаУдаление",
	ПредопределенноеЗначение("Перечисление.уатВидыОперацияРазнарядка.ВыпискаМаршрутныхЛистов"), Ложь),ДатаНачала, ДатаОкончания);
	ОткрытьФорму("Документ.уатРазнарядка.Форма.ФормаВыбора",ПараметрыФормы,ЭтотОбъект,,,, Новый ОписаниеОповещения("ФормаЗаполненияТСПоРазнарядкеЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Общее

// СтандартныеПодсистемы.ПодключаемыеКоманды
&НаКлиенте
Процедура Подключаемый_ПродолжитьВыполнениеКомандыНаСервере(ПараметрыВыполнения, ДополнительныеПараметры) Экспорт
    ВыполнитьКомандуНаСервере(ПараметрыВыполнения);
КонецПроцедуры

&НаСервере
Процедура ВыполнитьКомандуНаСервере(ПараметрыВыполнения)
	Если ПереключательРежимаОтображения = "МаршрутныеЛисты" Тогда
		ЭлементыСписок = Элементы.СписокМЛ;
	Иначе
		ЭлементыСписок = Элементы.СписокПЛ;
	КонецЕсли;
	
	ПодключаемыеКоманды.ВыполнитьКоманду(ЭтотОбъект, ПараметрыВыполнения, ЭлементыСписок);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОбновитьКоманды()
	Если ПереключательРежимаОтображения = "МаршрутныеЛисты" Тогда
		ЭлементыСписок = Элементы.СписокМЛ;
	Иначе
		ЭлементыСписок = Элементы.СписокПЛ;
	КонецЕсли;
	ПодключаемыеКомандыКлиентСервер.ОбновитьКоманды(ЭтотОбъект, ЭлементыСписок);
КонецПроцедуры
// Конец СтандартныеПодсистемы.ПодключаемыеКоманды

&НаКлиенте
Процедура ОткрытьНастройкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Результат);
		ОбновитьАдресНастройкиКомпоновкиДанных();
		ОбновитьСписокЗаказов();
	КонецЕсли;
	
	СохранитьНастройки();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()
	
	Если Не ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда 
		Возврат;
	КонецЕсли;
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураНастроекАРМ = Новый Структура();
	СтруктураНастроекАРМ.Вставить("НастройкаРежимОткрытияКарты",                                     НастройкаРежимОткрытияКарты);
	СтруктураНастроекАРМ.Вставить("НастройкаКоличествоДнейДоДатыПланирования",                       НастройкаКоличествоДнейДоДатыПланирования);
	СтруктураНастроекАРМ.Вставить("НастройкаРежимОткрытияПланировщика",                              НастройкаРежимОткрытияПланировщика);
	СтруктураНастроекАРМ.Вставить("НастройкаТолькоАктуальныеЗаказы",                                 НастройкаТолькоАктуальныеЗаказы);
	СтруктураНастроекАРМ.Вставить("НастройкаПриОткрытииЗаполнятьСпискомТС",                          НастройкаПриОткрытииЗаполнятьСпискомТС);
	СтруктураНастроекАРМ.Вставить("ОтображатьЭлектронныеКартыПриОткрытии",                           ОтображатьЭлектронныеКартыПриОткрытии);
	СтруктураНастроекАРМ.Вставить("НастройкаАвтоматическоеОбновлениеПриЗаписиДокументов",            НастройкаАвтоматическоеОбновлениеПриЗаписиДокументов); 
	СтруктураНастроекАРМ.Вставить("НастройкаПроверятьНахождениеВЗонеПоФактическомуМестоположениюТС", НастройкаПроверятьНахождениеВЗонеПоФактическомуМестоположениюТС);
	СтруктураНастроекАРМ.Вставить("НастройкаВремяАктуальностиКоординат",                             НастройкаВремяАктуальностиКоординат);
	СтруктураНастроекАРМ.Вставить("НастройкаОрганизацияМЛИсточник",                                  НастройкаОрганизацияМЛИсточник);
	СтруктураНастроекАРМ.Вставить("НастройкаОрганизацияМЛ",                                          НастройкаОрганизацияМЛ);
	СтруктураНастроекАРМ.Вставить("НастройкаПечататьМаршрутныеЛисты",                                НастройкаПечататьМаршрутныеЛисты);
	СтруктураНастроекАРМ.Вставить("НастройкаКопийПечатныхФормМЛ",                                    НастройкаКопийПечатныхФормМЛ);
	СтруктураНастроекАРМ.Вставить("НастройкаПечатнаяФормаМЛ",                                        НастройкаПечатнаяФормаМЛ);
	СтруктураНастроекАРМ.Вставить("НастройкаСоздаватьПЛ",                                            НастройкаСоздаватьПЛ);
	СтруктураНастроекАРМ.Вставить("НастройкаПечататьПЛ",                                             НастройкаПечататьПЛ);
	СтруктураНастроекАРМ.Вставить("НастройкаНеРассчитыватьВыработку",                                НастройкаНеРассчитыватьВыработку);
	СтруктураНастроекАРМ.Вставить("НастройкаОткрыватьФормыДокументов",                               НастройкаОткрыватьФормыДокументов);
	СтруктураНастроекАРМ.Вставить("НастройкаПечататьСразуНаПринтер",                                 НастройкаПечататьСразуНаПринтер);
	СтруктураНастроекАРМ.Вставить("НастройкаТолькоСозданныеМЛ",                                      НастройкаТолькоСозданныеМЛ);
	СтруктураНастроекАРМ.Вставить("НастройкаТолькоСозданныеПЛ",                                      НастройкаТолькоСозданныеПЛ);
	СтруктураНастроекАРМ.Вставить("НастройкаОтображатьТолькоНЕВыполненныеМЛ",                        НастройкаОтображатьТолькоНЕВыполненныеМЛ);
	СтруктураНастроекАРМ.Вставить("НастройкаОтображатьТолькоНЕВыполненныеПЛ",                        НастройкаОтображатьТолькоНЕВыполненныеПЛ);
	СтруктураНастроекАРМ.Вставить("ОтборПоЗонамХранилище",                                           Новый ХранилищеЗначения(РеквизитФормыВЗначение("ОтборЗоны")));
	СтруктураНастроекАРМ.Вставить("ПроверкаПунктаОтправленияВЗоне",                                  ПроверкаПунктаОтправленияВЗоне);
	СтруктураНастроекАРМ.Вставить("ПроверкаПунктаНазначенияВЗоне",                                   ПроверкаПунктаНазначенияВЗоне);
	
	ХранилищеНастроекДанныхФорм.Сохранить(
		"Обработка.уатАРМДиспетчера.Форма.ОсновнаяФорма", 
		"уатАРМДиспетчера_Настройки", 
		СтруктураНастроекАРМ
	);
	
	ХранилищеНастроекДанныхФорм.Сохранить(
		"Обработка.уатАРМДиспетчера.Форма.ОсновнаяФорма",
		"уатАРМДиспетчера_НастройкиКомпоновщика_Отбор",
		Новый ХранилищеЗначения(ЗаказыСписок.Отбор)
	);
	
	ХранилищеНастроекДанныхФорм.Сохранить(
		"Обработка.уатАРМДиспетчера.Форма.ОсновнаяФорма",
		"уатАРМДиспетчера_НастройкиКомпоновщика_Порядок",
		Новый ХранилищеЗначения(ЗаказыСписок.Порядок)
	);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройки()
	
	СтруктураНастроекАРМ = Неопределено;
	Если ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда 
		
		СтруктураНастроекАРМ = ХранилищеНастроекДанныхФорм.Загрузить(
			"Обработка.уатАРМДиспетчера.Форма.ОсновнаяФорма",
			"уатАРМДиспетчера_Настройки"
		);
		
	КонецЕсли;
	
	Если СтруктураНастроекАРМ = Неопределено Тогда
		СтруктураНастроекАРМ = Новый Структура;
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураНастроекАРМ);
	
	Если СтруктураНастроекАРМ.Свойство("ОтборПоЗонамХранилище") Тогда 
		ВосстановитьНастройкиОтборовЗон(СтруктураНастроекАРМ.ОтборПоЗонамХранилище.Получить().Строки,
			ОтборЗоны.ПолучитьЭлементы());
	КонецЕсли;
		
	Если НЕ ЗначениеЗАполнено(НастройкаКоличествоДнейДоДатыПланирования) Тогда
		НастройкаКоличествоДнейДоДатыПланирования = 1;
	КонецЕсли;
	
	Если НЕ ЗначениеЗАполнено(НастройкаКопийПечатныхФормПЛ) Тогда
		НастройкаКопийПечатныхФормПЛ = 1;
	КонецЕсли;
	
	Если НЕ ЗначениеЗАполнено(НастройкаКопийПечатныхФормМЛ) Тогда
		НастройкаКопийПечатныхФормМЛ = 1;
	КонецЕсли;
	
	Если ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда 
		НастройкиПорядкаДереваЗаказов = ХранилищеНастроекДанныхФорм.Загрузить(
			"Обработка.уатАРМДиспетчера.Форма.ОсновнаяФорма", "уатАРМДиспетчера_НастройкиКомпоновщика_Порядок");
	Иначе 
		НастройкиПорядкаДереваЗаказов = Неопределено;
	КонецЕсли;
	
	Если ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда 
		НастройкиОтбораДереваЗаказов = ХранилищеНастроекДанныхФорм.Загрузить(
			"Обработка.уатАРМДиспетчера.Форма.ОсновнаяФорма", "уатАРМДиспетчера_НастройкиКомпоновщика_Отбор");
	Иначе 
		НастройкиОтбораДереваЗаказов = Неопределено;
	КонецЕсли;
	
	ИспользуютсяНесуществующиеПоля = Ложь;
	Если НЕ (НастройкиПорядкаДереваЗаказов = Неопределено 
			ИЛИ НЕ ТипЗнч(НастройкиПорядкаДереваЗаказов) = Тип("ХранилищеЗначения") 
			ИЛИ НастройкиПорядкаДереваЗаказов.Получить() = Неопределено) Тогда 
			Для Каждого ТекПорядок Из НастройкиПорядкаДереваЗаказов.Получить().Элементы Цикл 
				ДоступнаяНастройка = ЗаказыСписок.Порядок.ДоступныеПоляПорядка.НайтиПоле(ТекПорядок.Поле);
				
				Если ДоступнаяНастройка <> Неопределено
					И ДоступнаяНастройка.Заголовок = "Дата" Тогда
					Продолжить;
				КонецЕсли;
				
				НовыйПорядок = ЗаказыСписок.Порядок.Элементы.Добавить(Тип("ЭлементПорядкаКомпоновкиДанных"));
				ЗаполнитьЗначенияСвойств(НовыйПорядок, ТекПорядок);
				Если ДоступнаяНастройка = Неопределено Тогда
					НовыйПорядок.Использование = Ложь;
				КонецЕсли;
			КонецЦикла;
	КонецЕсли;
	
	Если НЕ (НастройкиОтбораДереваЗаказов = Неопределено 
		ИЛИ НЕ ТипЗнч(НастройкиОтбораДереваЗаказов) = Тип("ХранилищеЗначения") 
		ИЛИ НастройкиОтбораДереваЗаказов.Получить() = Неопределено) Тогда
		Для Каждого ТекОтбор Из НастройкиОтбораДереваЗаказов.Получить().Элементы Цикл
			
			Если ТипЗнч(ТекОтбор) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				НовыйОтбор = ЗаказыСписок.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
				ЗаполнитьЗначенияСвойств(НовыйОтбор, ТекОтбор);
				СоздатьОтборыСервер(НовыйОтбор, ТекОтбор.Элементы);
			Иначе
				ДоступнаяНастройка = ЗаказыСписок.Отбор.ДоступныеПоляОтбора.НайтиПоле(ТекОтбор.ЛевоеЗначение);

				Если ТекОтбор.РежимОтображения 
					= РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный 
					И НЕ ДоступнаяНастройка = Неопределено
					И ДоступнаяНастройка.Заголовок = "Ссылка" Тогда
					Продолжить;
				КонецЕсли;
				
				НовыйОтбор = ЗаказыСписок.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЗаполнитьЗначенияСвойств(НовыйОтбор, ТекОтбор);
				Если ДоступнаяНастройка = Неопределено Тогда
					НовыйОтбор.Использование = Ложь;
					
					ИспользуютсяНесуществующиеПоля = Истина;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если ИспользуютсяНесуществующиеПоля Тогда
		ТекстНСТР = НСтр("ru = 'В настройках отбора списка заказов используются несуществующие поля.
		|Рекомендуется удалить несуществующие поля из настроек или заменить их на существующие. 
		|Для этого нажмите кнопку ""Отбор"" на основной панели АРМ.'");
		уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстНСТР,,, СтатусСообщения.Внимание);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДатуПланирования()
	
	ДатаПланированияС  = НачалоДня(КонецДня(ДатаПланирования) - (НастройкаКоличествоДнейДоДатыПланирования * 86400) + 1);
	ДатаПланированияПо = КонецДня(ДатаПланирования);
	ОбновитьАдресНастройкиКомпоновкиДанных();
	
	Если ФормаПланировщика = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ФормаПланировщика.ПланировщикОткрыт Тогда
		Оповестить("ОбновитьДатуПланирования", ДатаПланирования, ЭтотОбъект);
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура ПереместитьОсновнуюГруппы(Родитель)
	Элементы.Переместить(Элементы.ГруппаОсновная, Элементы[Родитель]);
КонецПроцедуры

&НаСервере
Процедура ПереместитьНастройки(Родитель)
	Элементы.Переместить(Элементы.ГруппаКоманднаяПанельФормы, Элементы[Родитель]);
КонецПроцедуры

&НаКлиенте
Процедура НастройкаПериодаЗавершение(Период, ДополнительныеПараметры) Экспорт
	
	Если Период <> Неопределено Тогда
		РазницаДней = (НачалоДня(Период.ДатаОкончания) - НачалоДня(Период.ДатаНачала));
		НастройкаКоличествоДнейДоДатыПланирования = РазницаДней /(60*60*24) + 1;
		НастройкаКоличествоДнейДоДатыПланирования = ?(ЗначениеЗаполнено(НастройкаКоличествоДнейДоДатыПланирования),
			НастройкаКоличествоДнейДоДатыПланирования, 1);
		ДатаПланирования = ?(ЗначениеЗаполнено(Период.ДатаОкончания), Период.ДатаОкончания, ДатаПланирования);
	КонецЕсли;
	
	СохранитьНастройки();
	
	ДатаПланированияПриИзменении(Неопределено);
	
КонецПроцедуры

&НаСервере
Процедура СоздатьОтборыСервер(ЗаказыСписокОтбор, КомпоновщикДанныхЗаказов)
	
	Для Каждого ТекЭлемент Из КомпоновщикДанныхЗаказов Цикл
		Если ТипЗнч(ТекЭлемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			ТекНастройка = ЗаказыСписокОтбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(ТекНастройка, ТекЭлемент);
			СоздатьОтборыСервер(ТекНастройка, ТекЭлемент.Элементы);
		Иначе
			Если НЕ ЗначениеЗаполнено(ТекЭлемент.ЛевоеЗначение) Тогда
				Продолжить;
			КонецЕсли;
			ТекНастройка = ЗаказыСписокОтбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЗаполнитьЗначенияСвойств(ТекНастройка, ТекЭлемент);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПервоначальныеЗначенияПеременныхСервер()
	
	ДатаПланирования = ТекущаяДатаСеанса();
	
	ПереключательРежимаОтображения = "ЗаказыНаТС";
	
	ВосстановитьНастройки();

	ДатаПланированияС  = НачалоДня(КонецДня(ДатаПланирования) - (НастройкаКоличествоДнейДоДатыПланирования * 86400) + 1);
	ДатаПланированияПо = КонецДня(ДатаПланирования);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ЗаказыСписок, "Приход", ВидДвиженияНакопления.Приход);
	
	ЗаказыСписок.Параметры.УстановитьЗначениеПараметра("ОтправлениеС", 	 ДатаПланированияС);
	ЗаказыСписок.Параметры.УстановитьЗначениеПараметра("ОтправлениеПо",	 ДатаПланированияПо);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(МаршрутыСписокМЛ, "ДатаНач", НачалоДня(ДатаПланирования));
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(МаршрутыСписокМЛ, "ДатаКон", КонецДня(ДатаПланирования));
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(МаршрутыСписокМЛ, "МассивСозданныхМЛ", Новый Массив());
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокМЛ, "ДатаНач", ДатаПланированияС);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокМЛ, "ДатаКон", ДатаПланированияПо);

	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(МаршрутыСписокМЛ, "ТС",
		ПредопределенноеЗначение("Справочник.уатТС.ПустаяСсылка"));
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокМЛ, "МассивСозданныхМЛ",			 Новый Массив());
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокМЛ, "НастройкаТолькоСозданныеМЛ",	 НастройкаТолькоСозданныеМЛ);
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокПЛ, "МассивСозданныхПЛ",			 Новый Массив());
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокПЛ, "НастройкаТолькоСозданныеПЛ",	 НастройкаТолькоСозданныеПЛ);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокПЛ, "ДатаНач", ДатаПланированияС);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокПЛ, "ДатаКон", ДатаПланированияПо);

	уатАРМ.УстановитьПервоначальныеЗначенияПеременныхСервер(ЭтотОбъект);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(МаршрутыСписокМЛ, "КоэфГрузоподъемности", КоэффициентГрузоподъемности);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(МаршрутыСписокМЛ, "КоэфОбъемаКузова",     КоэффициентОбъемаКузова);
	
	ОбновитьСписокЗон();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПервоначальныеЗначенияПеременныхКлиент()
	
	МассивСозданныхМЛ = Новый Массив();
	МассивСозданныхПЛ = Новый Массив();
	СоответсвиеПрицепов = Новый Соответствие();
	
	ОбновитьСписокЗаказов();
	
	ПереключательРежимаОтображения = "ЗаказыНаТС";
	ПереключательРежимаОтображенияПриИзменении();
	
	ЭтоКОРП = уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП();
	
	Элементы.МаршрутыЗаполнитьТСпоЗонеОтбора.Видимость  = ЭтоКОРП;
	Элементы.МаршрутыЗаполнитьТСпоЗонамОтбора.Видимость = ЭтоКОРП;
	Элементы.МаршрутыЗаполнитьПоРазнарядке.Видимость    = ЭтоКОРП;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗначениеРеквизитаОбъекта(ОбъектСсылка, ИмяРеквизита)
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(ОбъектСсылка, ИмяРеквизита)
КонецФункции

#КонецОбласти

#Область Картография

&НаКлиенте
Процедура ОбновитьКартуПослеОткрытияАРМДиспетчера()
	
	ПодключитьОбработчикОжидания("Подключаемый_ОтобразитьДанныеНаКарте", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ИнициализацияКарты()
	
	Если ПереключательРежимаОтображения = "ЗаказыНаТС" Тогда
		ПараметрыФормы = Новый Структура("РежимОткрытия", "РежимКарты_АРМДиспетчера");
	Иначе
		Если ПереключательРежимаОтображения = "МаршрутныеЛисты" Тогда
			ТекущиеДанные = Элементы.СписокМЛ.ТекущиеДанные;
			РежимОткрытия = "РежимКарты_МаршрутныйЛист";
		Иначе
			ТекущиеДанные = Элементы.СписокПЛ.ТекущиеДанные;
			РежимОткрытия = "РежимКарты_ПутевойЛист";
		КонецЕсли;
		
		Если ТекущиеДанные = Неопределено Тогда
			Возврат;
		КонецЕсли;
		
		ПараметрыФормы = Новый Структура("РежимОткрытия, ОбъектОснование", РежимОткрытия, ТекущиеДанные.Ссылка);
	КонецЕсли;
	
	Если ТипКартографии = ПредопределенноеЗначение("Перечисление.уатТипыЭлектронныхКарт.OSM")
			Или ТипКартографии = ПредопределенноеЗначение("Перечисление.уатТипыЭлектронныхКарт.Яндекс") Тогда 
		ФормаКарты = ПолучитьФорму("Обработка.уатЭлектронныеКарты.Форма.ФормаКарты", ПараметрыФормы, ЭтотОбъект);
		Если НЕ ЗначениеЗаполнено(ФормаКарты.ТипЭлектронныхКарт) Тогда
			ТекстОшибки = НСтр("ru='Включите использование электронных карт в настроках программы.'");
			ПоказатьПредупреждение(, ТекстОшибки);
			Возврат;
		КонецЕсли;
		
		Если ФормаКарты.КартаЗагружена Тогда 
			ФормаКарты.Активизировать();
		Иначе 
			Если НастройкаРежимОткрытияКарты = 0 Тогда
				ФормаКарты = ОткрытьФорму("Обработка.уатЭлектронныеКарты.Форма.ФормаКарты", ПараметрыФормы, ЭтотОбъект,,  ВариантОткрытияОкна.ОтдельноеОкно);
				Оповестить("СкрытьРазвернутьПанельПодбора",, ЭтотОбъект);
			Иначе
				ТекстПредупреждения = НСтр("ru='Открытие карты...'");
				ПоказатьПредупреждение(Неопределено, ТекстПредупреждения, 1);
				ФормаКарты = ОткрытьФорму("Обработка.уатЭлектронныеКарты.Форма.ФормаКарты", ПараметрыФормы, ЭтотОбъект,,  ВариантОткрытияОкна.ОтдельноеОкно);
				Оповестить("СкрытьРазвернутьПанельПодбора",, ЭтотОбъект);
			КонецЕсли;
			Оповестить("УстановитьРежимРаботы", ПараметрыФормы, ЭтотОбъект);
			Возврат;
		КонецЕсли;
		
		ТекстОшибки = "";
		уатЭлектронныеКартыКлиент.ПроверитьКартыOSMВПодчиненнойФорме(ФормаКарты, ТекстОшибки);
		Если Не ТекстОшибки = "" Тогда 
			ПоказатьПредупреждение(, ТекстОшибки);
			Возврат;
		КонецЕсли;
		Оповестить("УстановитьРежимРаботы", ПараметрыФормы, ЭтотОбъект);
	Иначе
		ТекстОшибки = Нстр("ru = 'Для использования электронных карт необходимо включить сервис ""Картография""
		|в панели ""Администрирование"", раздел ""Настройки функциональности"", ""Электронные карты"".'");
		ПоказатьПредупреждение(, ТекстОшибки);
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОтобразитьДанныеНаКарте()
	
	Если ФормаКарты = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТипКартографии = ПредопределенноеЗначение("Перечисление.уатТипыЭлектронныхКарт.OSM")
			Или ТипКартографии = ПредопределенноеЗначение("Перечисление.уатТипыЭлектронныхКарт.Яндекс") Тогда 
		Оповестить("ОстановитьПроигрываниеТрека",, ЭтотОбъект);
		ОтобразитьДанныеНаКарте();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьДанныеНаКарте(СтрокаДляФокусировки = Неопределено)

	Если ФормаКарты = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекстОшибки = "";
	уатЭлектронныеКартыКлиент.ПроверитьКартыOSMВПодчиненнойФорме(ФормаКарты, ТекстОшибки);
	Если НЕ ТекстОшибки = "" Тогда 
		Возврат;
	КонецЕсли;
	
	Если НЕ ФормаКарты.РежимОткрытия = "РежимКарты_АРМДиспетчера" Тогда
		ПараметрыФормы = Новый Структура("РежимОткрытия", "РежимКарты_АРМДиспетчера");
		Оповестить("УстановитьРежимРаботы", ПараметрыФормы, ЭтотОбъект);
	КонецЕсли;
	
	СтруктураПараметров = СформироватьДанныеДляОтображенияНаКарте();
	СтруктураПараметров.Вставить("ОбновитьТС",      Истина); 
	СтруктураПараметров.Вставить("ОбновлятьМЛ",     Истина);
	СтруктураПараметров.Вставить("ОбновлятьЗаказы", Истина);

	Оповестить("АРМЛогиста_ОтобразитьДанныеНаКарте", СтруктураПараметров, ЭтотОбъект);

	ИсточникВыделенияНаКарте = 0;
		
КонецПроцедуры

&НаКлиенте
Функция СформироватьДанныеДляОтображенияНаКарте();
	
	СтрокаДляФокусировкиМЛ = Элементы.МаршрутыСписокМЛ.ТекущиеДанные;
	Если СтрокаДляФокусировкиМЛ <> Неопределено Тогда
		СтрокаДляФокусировкиМЛ = СтрокаДляФокусировкиМЛ.Ссылка;
	КонецЕсли;
	СтрокаДляФокусировкиЗаказ  = Элементы.ЗаказыСписок.ТекущиеДанные;

	Если ИсточникВыделенияНаКарте = 2 Тогда
		СтрокаДляФокусировкиЗаказ  = Неопределено;
	ИначеЕсли ИсточникВыделенияНаКарте = 1 Тогда
		СтрокаДляФокусировкиМЛ     = Неопределено;
	КонецЕсли;
	
	мсвМаршрутов = ЗаполнитьТаблицуМаршрутовДляКарты(СтрокаДляФокусировкиМЛ);	
	мсвАдресов   = ЗаполнитьМассивЗаказовДляКарты(СтрокаДляФокусировкиЗаказ);
		
	ГруппаКомандОтображения = ФормаКарты.Элементы.ГруппаОтображениеАРМ.ПодчиненныеЭлементы;
	
	ТекТаблицаМаршрутов     = ?(ГруппаКомандОтображения.ОтображатьМЛ.Пометка,
		мсвМаршрутов, 
		Новый Массив());
	ТекМсвАдреса          = ?(ГруппаКомандОтображения.ОтображатьПунктыПогрузкиЗаказов.Пометка 
			ИЛИ ГруппаКомандОтображения.ОтображатьПунктыРазгрузкиЗаказов.Пометка 
			ИЛИ ГруппаКомандОтображения.ОтображатьНаправленияЗаказов.Пометка, 
		мсвАдресов, 
		Новый Массив());

	АвтоМаштабировать   = ИсточникВыделенияНаКарте <> 0;
	
	СтруктураПараметров = Новый Структура("ТаблицаМаршрутов, мсвАдреса, АвтоМаштабировать",
	ТекТаблицаМаршрутов, ТекМсвАдреса, АвтоМаштабировать);

	Возврат СтруктураПараметров;
	
КонецФункции

&НаКлиенте
Функция ЗаполнитьМассивЗаказовДляКарты(СтрокаДляФокусировкиЗаказ)
	
	мсвАдресов = Новый Массив();
	
	СоответсвиеЗаказов = Новый Соответствие();
	МассивЗаказов = Новый Массив();
	ТекущиеДанныеЗаказов = Элементы.ЗаказыСписок.ТекущиеДанные;
	Если ТекущиеДанныеЗаказов <> Неопределено Тогда
		МассивЗаказов.Добавить(ТекущиеДанныеЗаказов.Ссылка);
	КонецЕсли;
	
	КомпоновщикСпискаЗаказов = ПолучитьКомпоновщикСпискаЗаказовСервер(АдресСхемыКомпоновкиДанных, АдресНастройкиКомпоновкиДанных, "",,
		МассивЗаказов, Истина);

	ИндексАдреса           = 0;
	флагМодификацииЗаказов = Ложь;
	Для Каждого ТекСтрЗаказ Из КомпоновщикСпискаЗаказов Цикл 
		
		Если ТекСтрЗаказ.Свойство("ГруппировкаСтроки") 
			ИЛИ МассивЗаказов.Найти(ТекСтрЗаказ.Ссылка) = Неопределено Тогда
			Продолжить;
		КонецЕсли;
	
		ПредставлениеГиперссылкиРучнойМаршрутизации = ТекСтрЗаказ.ПредставлениеГиперссылкиРучнойМаршрутизации;
		
		АдресОтправленияНадпись = уатЭлектронныеКартыКлиент.СформироватьПредставлениеЗаказаДляКарты(ТекСтрЗаказ.ПредставлениеЗаказаДляКартыOSM[0], "");
		АдресОтправления = Новый Структура("Лат, Лон, Представление",
		ТекСтрЗаказ.ЛатОтправления,
		ТекСтрЗаказ.ЛонОтправления,
		АдресОтправленияНадпись);
		
		АдресНазначенияНадпись = уатЭлектронныеКартыКлиент.СформироватьПредставлениеЗаказаДляКарты(ТекСтрЗаказ.ПредставлениеЗаказаДляКартыOSM[1], "");
		АдресНазначения = Новый Структура("Лат, Лон, Представление",
		ТекСтрЗаказ.ЛатНазначения,
		ТекСтрЗаказ.ЛонНазначения,
		АдресНазначенияНадпись);
		
		ДанныеЗаказа = Новый Структура();
		ДанныеЗаказа.Вставить("Ссылка",        ТекСтрЗаказ.Ссылка);
		ДанныеЗаказа.Вставить("Представление", ТекСтрЗаказ.Ссылка);
		ДанныеЗаказа.Вставить("ВесБрутто",     ТекСтрЗаказ.ВесБрутто);
		ДанныеЗаказа.Вставить("Объем",         ТекСтрЗаказ.Объем);
		ДанныеЗаказа.Вставить("КолМест",       ТекСтрЗаказ.КоличествоМест);
		
		Фокус = ?(СтрокаДляФокусировкиЗаказ <> Неопределено
		И ТипЗнч(СтрокаДляФокусировкиЗаказ) = Тип("ДанныеФормыСтруктура"), ТекСтрЗаказ.Ссылка = СтрокаДляФокусировкиЗаказ.Ссылка, Ложь);
		
		мсвАдресов.Добавить(Новый Структура("АдресОтправления, АдресНазначения, ЦветЛинии,
		|Фокус, ДанныеЗаказа",
		АдресОтправления,
		АдресНазначения,
		уатЭлектронныеКартыКлиент.ПолучитьЦветДокументаПоКоллекции(ТекСтрЗаказ.ЦветДокумента),
		Фокус,
		ДанныеЗаказа));
	КонецЦикла;
	
	Возврат мсвАдресов;
КонецФункции

&НаСервере
Функция ЗаполнитьТаблицуМаршрутовДляКарты(СтрокаДляФокусировки)
	
	ТаблМаршрутов = Новый Массив();
	
	СхемаКД     = Элементы.МаршрутыСписокМЛ.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	НастройкиКД = Элементы.МаршрутыСписокМЛ.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	
	СтруктураНастройкиКомпоновки = НастройкиКД.Структура;
	Если СтруктураНастройкиКомпоновки.Количество() = 0 Тогда 
		Возврат Новый Массив();
	КонецЕсли;	
	
	ВыбранныеПоля   = СтруктураНастройкиКомпоновки[0].Выбор.Элементы;
	ПоляГруппировки = СтруктураНастройкиКомпоновки[0].ПоляГруппировки.Элементы;
	
	ВыбранныеПоля.Очистить();
	ПоляГруппировки.Очистить();
	
	ДанныеСтрокиСтруктура = Новый Структура("Ссылка,ЦветДокумента,Номер,Дата,ТС");
	Для Каждого ТекСтрока Из ДанныеСтрокиСтруктура Цикл
		ПолеКомпоновки = ВыбранныеПоля.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
		ПолеКомпоновки.Заголовок     = ТекСтрока.Ключ;
		ПолеКомпоновки.Использование = Истина;
		ПолеКомпоновки.Поле          = Новый ПолеКомпоновкиДанных(ТекСтрока.Ключ);
	КонецЦикла;
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	МакетКомпоновки   = КомпоновщикМакета.Выполнить(СхемаКД, НастройкиКД,
		,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных();
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	Результат       = ПроцессорВывода.Вывести(ПроцессорКомпоновки);

	Для Каждого ТекСтрМЛ Из Результат Цикл 

		стрМаршрут = Новый Структура("Координаты, Цвет, Фокус, GUIDТС, GUIDМЛ");
		УникальныйИдентификаторМЛ = Строка(ТекСтрМЛ.Ссылка.УникальныйИдентификатор());
		стрМаршрут.GUIDТС     = УникальныйИдентификаторМЛ;
		стрМаршрут.GUIDМЛ     = УникальныйИдентификаторМЛ;
		стрМаршрут.Цвет       = ПолучитьЦветДокументаПоКоллекции(ТекСтрМЛ.ЦветДокумента);
		стрМаршрут.Координаты = Новый Массив();
		
		мсвПунктыСледования = уатЗащищенныеФункцииСервер_проф.ПолучитьПунктыСледования(ТекСтрМЛ.Ссылка);
		
		Для Каждого ТекПункт Из мсвПунктыСледования Цикл 
			стрКоординаты = Новый Структура("lat, lon, Представление, НомерИконки");
			стрКоординаты.lat         = ТекПункт.Лат;
			стрКоординаты.lon         = ТекПункт.Лон;
			стрКоординаты.НомерИконки = 9;
			
			стрКоординаты.Представление = ТекПункт.ТекстНадписи;
			
			стрМаршрут.Координаты.Добавить(стрКоординаты);
		КонецЦикла;
		
		Если ТекСтрМЛ.Ссылка = СтрокаДляФокусировки 
			ИЛИ СтрокаДляФокусировки = Неопределено Тогда 
			стрМаршрут.Фокус = Истина;
		Иначе 
			стрМаршрут.Фокус = Ложь;
		КонецЕсли;
			
		ТаблМаршрутов.Добавить(стрМаршрут);
	КонецЦикла;
	
	Возврат ТаблМаршрутов;
КонецФункции

&НаКлиенте
Процедура ПодборЗаказовВАРМИзКарты(ДанныеПодбора) 
	
	СтрокиТС = МаршрутыСписок.НайтиСтроки(Новый Структура("ТС", ДанныеПодбора.ТС));
	Если СтрокиТС.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТС = СтрокиТС[0].ПолучитьИдентификатор();
	
	МассивОшибокСозданияМЛ = Новый Массив();
	мсвМаршрутныеЛисты     = Новый Массив();
	Для Каждого ТекЗаказ Из ДанныеПодбора.Заказы Цикл 
		СоздатьМЛ(ТекЗаказ, СтрокаТС);
	КонецЦикла;
	
	Элементы.МаршрутыСписок.ТекущаяСтрока = СтрокаТС;
	
КонецПроцедуры

#КонецОбласти

#Область ЗаказыСписок

&НаКлиенте
Процедура СоздатьОтборЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		ЗаказыСписокОтбор = ЗаказыСписок.Отбор.Элементы;
		ЗаказыСписокОтбор.Очистить();
		
		Для Каждого ТекЭлемент Из Результат.КомпоновщикДанныхЗаказов Цикл
			Если ТипЗнч(ТекЭлемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
				ТекНастройка = ЗаказыСписокОтбор.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
				ЗаполнитьЗначенияСвойств(ТекНастройка, ТекЭлемент);
				СоздатьОтборы(ТекНастройка, ТекЭлемент.Элементы);
			Иначе
				Если НЕ ЗначениеЗаполнено(ТекЭлемент.ЛевоеЗначение) Тогда
					Продолжить;
				КонецЕсли;
				ТекНастройка = ЗаказыСписокОтбор.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
				ЗаполнитьЗначенияСвойств(ТекНастройка, ТекЭлемент);
			КонецЕсли;
		КонецЦикла;
		
		АдресВрХранилища = Результат.АдресВрХранилища;
		
		ЗаполнитьТаблицыОтборов();
		Если ПроверкаПунктаОтправленияВЗоне
			ИЛИ ПроверкаПунктаНазначенияВЗоне Тогда
			ПолучитьПунктыВЗонахОтбораКлиент();
		Иначе
			ОбновитьАдресНастройкиКомпоновкиДанных();
		КонецЕсли;
		
		УстановитьОтборГрМестаЗаказыПоДопХарактеристикам = Истина;
		
		ОбновитьСписокЗаказов();
		УстановитьИконкиОтбораИСортировки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьСортировкуЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("КоллекцияЭлементовПорядкаКомпоновкиДанных") Тогда
		ЗаказыСписокОбновитьПорядок();
		ОбновитьСписокЗаказов();
		УстановитьИконкиОтбораИСортировки();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруПараметровОтборовАдрес()
	
	врОтборПоСвойствамГруза  = РеквизитФормыВЗначение("ОтборПоСвойствамГруза");
	врОтборПоСвойствамЗаказа = РеквизитФормыВЗначение("ОтборПоСвойствамЗаказа");
	врОтборЗоны				 = РеквизитФормыВЗначение("ОтборЗоны");
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("врПроверкаПунктаОтправленияВЗоне", ПроверкаПунктаОтправленияВЗоне);
	СтруктураПараметров.Вставить("врПроверкаПунктаНазначенияВЗоне",	 ПроверкаПунктаНазначенияВЗоне);
	СтруктураПараметров.Вставить("врОтборПоСвойствамГруза",			 врОтборПоСвойствамГруза);
	СтруктураПараметров.Вставить("врОтборПоСвойствамЗаказа",		 врОтборПоСвойствамЗаказа);
	СтруктураПараметров.Вставить("врОтборЗоны",						 врОтборЗоны);
	
	
	Возврат ПоместитьВоВременноеХранилище(СтруктураПараметров, Новый УникальныйИдентификатор);
	
КонецФункции

&НаКлиенте
Процедура УстановитьПометкуКнопкиГруппировки(Знач НомерКнопки)
	
	уатАРМКлиент.УстановитьПометкуКнопкиГруппировки(Элементы, НомерКнопки);
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьГруппировкуСпискуЗаказов(ПолеГруппировка = "")
	
	уатАРМКлиент.ДобавитьГруппировкуСпискуЗаказов(ЗаказыСписок, ПолеГруппировка);
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьОтборы(ЗаказыСписокОтбор, КомпоновщикДанныхЗаказов)
	
	уатАРМКлиент.СоздатьОтборы(ЗаказыСписокОтбор, КомпоновщикДанныхЗаказов);
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицыОтборов()
	
	СтруктураПараметров            = ПолучитьИзВременногоХранилища(АдресВрХранилища);
	ПроверкаПунктаОтправленияВЗоне = СтруктураПараметров.врПроверкаПунктаОтправленияВЗоне;
	ПроверкаПунктаНазначенияВЗоне  = СтруктураПараметров.врПроверкаПунктаНазначенияВЗоне;
	
	врОтборПоСвойствамГруза  = РеквизитФормыВЗначение("ОтборПоСвойствамГруза");
	врОтборПоСвойствамЗаказа = РеквизитФормыВЗначение("ОтборПоСвойствамЗаказа");
	врОтборЗоны = РеквизитФормыВЗначение("ОтборЗоны");
	
	врОтборПоСвойствамГруза  = СтруктураПараметров.врОтборПоСвойствамГруза;
	врОтборПоСвойствамЗаказа = СтруктураПараметров.врОтборПоСвойствамЗаказа;
	врОтборЗоны = СтруктураПараметров.врОтборЗоны;
	
	ЗначениеВРеквизитФормы(врОтборПоСвойствамГруза,"ОтборПоСвойствамГруза");
	ЗначениеВРеквизитФормы(врОтборПоСвойствамЗаказа,"ОтборПоСвойствамЗаказа");
	ЗначениеВРеквизитФормы(врОтборЗоны,"ОтборЗоны");
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьИконкиОтбораИСортировки()
	
	уатАРМКлиент.УстановитьИконкиОтбораИСортировки(ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаказыСписокОбновитьПорядок() 
	
	уатАРМКлиент.ЗаказыСписокОбновитьПорядок(ЗаказыСписок);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСписокЗаказов()
	
	СоответсвиеЗаказов = Новый Соответствие();
	мОтмеченныеЗаказы  = Новый Массив();
	
	МассивЗаказовСОтборомПоДопХарактеристикам = Новый Массив();
	МассивГрузовСОтборомПоДопХарактеристикам  = Новый Массив();
	
	ИтогоЗаказов           = 0;
	ИтогоВесВсего          = 0;
	ИтогоОбъемВсего        = 0;
	ИтогоКолМестВсего      = 0;
	
	МассивРаспределенныхЗаказов = Новый Массив();
	Если УстановитьОтборГрМестаЗаказыПоДопХарактеристикам Тогда
		КомпоновщикСпискаЗаказов = ПолучитьКомпоновщикСпискаЗаказов(АдресСхемыКомпоновкиДанных, АдресНастройкиКомпоновкиДанных, "",
		МассивРаспределенныхЗаказов,
		МассивЗаказовСОтборомПоДопХарактеристикам, МассивГрузовСОтборомПоДопХарактеристикам, ОтборПоСвойствамЗаказа,
		ОтборПоСвойствамГруза);
	Иначе
		КомпоновщикСпискаЗаказов = ПолучитьКомпоновщикСпискаЗаказовСервер(АдресСхемыКомпоновкиДанных, АдресНастройкиКомпоновкиДанных, "",
			МассивРаспределенныхЗаказов);
	КонецЕсли;
	
	Для Каждого ТекСтрока Из КомпоновщикСпискаЗаказов Цикл 
		
		ИтогоВесВсего     = ИтогоВесВсего     + ТекСтрока.ВесБрутто;
		ИтогоОбъемВсего   = ИтогоОбъемВсего   + ТекСтрока.Объем;
		ИтогоКолМестВсего = ИтогоКолМестВсего + ТекСтрока.КоличествоМест;
		ИтогоЗаказов      = ИтогоЗаказов + 1;
		
	КонецЦикла;
	
	Если УстановитьОтборГрМестаЗаказыПоДопХарактеристикам Тогда
		УстановитьОтборГрМестаЗаказыПоДопХарактеристикам(МассивЗаказовСОтборомПоДопХарактеристикам, МассивГрузовСОтборомПоДопХарактеристикам);
	КонецЕсли;

	СводнаяИнформацияКоличествоЗаказов = "";
	СводнаяИнформацияВесЗаказов        = "";
	СводнаяИнформацияОбъемЗаказов      = "";
	СводнаяИнформацияКоличествоМест    = "";

	Если ИтогоЗаказов = 0 Тогда
		Возврат;
	КонецЕсли;
	
	СводнаяИнформацияКоличествоЗаказов = СтрШаблон(Нстр("ru = 'Заказов: %1'"), ИтогоЗаказов);
	СводнаяИнформацияВесЗаказов        = Строка(ИтогоВесВсего);
	СводнаяИнформацияОбъемЗаказов      = Строка(ИтогоОбъемВсего);
	СводнаяИнформацияКоличествоМест    = Строка(ИтогоКолМестВсего);
	
	УстановитьОтборГрМестаЗаказыПоДопХарактеристикам = Ложь;
	Элементы.ЗаказыСписок.Обновить();
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборГрМестаЗаказыПоДопХарактеристикам(МассивЗаказовСОтборомПоДопХарактеристикам,
	МассивГрузовСОтборомПоДопХарактеристикам)
	
	ОтборСписка = ЗаказыСписок.Отбор.Элементы;

	флЕстьИзменения = Ложь;
	Если ОтборПоСвойствамЗаказа.НайтиСтроки(Новый Структура("Пометка", Истина)).Количество() Тогда
		ЭлементОтбора = ОтборСписка.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение      = Новый ПолеКомпоновкиДанных("Ссылка");
		ЭлементОтбора.ВидСравнения       = ВидСравненияКомпоновкиДанных.ВСписке;
		ЭлементОтбора.ПравоеЗначение     = МассивЗаказовСОтборомПоДопХарактеристикам;
		ЭлементОтбора.РежимОтображения   = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		
		флЕстьИзменения = Истина;
	КонецЕсли;
	
	Если ОтборПоСвойствамГруза.НайтиСтроки(Новый Структура("Пометка", Истина)).Количество() Тогда
		
		ГруппаЭлементовОтбора = ОтборСписка.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаЭлементовОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИЛИ;
		ГруппаЭлементовОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		
		ОтборСписка = ГруппаЭлементовОтбора.Элементы;

		ЭлементОтбора = ОтборСписка.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение      = Новый ПолеКомпоновкиДанных("ДетализацияЗакрытия");
		ЭлементОтбора.ВидСравнения       = ВидСравненияКомпоновкиДанных.НеРавно;
		ЭлементОтбора.ПравоеЗначение     =
			ПредопределенноеЗначение("Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам");
		ЭлементОтбора.РежимОтображения   = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		
		ЭлементОтбора = ОтборСписка.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение      = Новый ПолеКомпоновкиДанных("Груз");
		ЭлементОтбора.ВидСравнения       = ВидСравненияКомпоновкиДанных.ВСписке;
		ЭлементОтбора.ПравоеЗначение     = МассивГрузовСОтборомПоДопХарактеристикам;
		ЭлементОтбора.РежимОтображения   = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;

		флЕстьИзменения = Истина;
	КонецЕсли;
	
	Если флЕстьИзменения Тогда
		ОбновитьАдресНастройкиКомпоновкиДанных();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьАдресНастройкиКомпоновкиДанных() 
	
	ЗаказыСписок.Параметры.УстановитьЗначениеПараметра("ОтправлениеС", 	 ДатаПланированияС);
	ЗаказыСписок.Параметры.УстановитьЗначениеПараметра("ОтправлениеПо",	 ДатаПланированияПо);

	НастройкиКомпоновкиДанных      = Элементы.ЗаказыСписок.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	АдресНастройкиКомпоновкиДанных = ПоместитьВоВременноеХранилище(НастройкиКомпоновкиДанных, Новый УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьКомпоновщикСпискаЗаказов(АдресСхемыКомпоновкиДанных, АдресНастройкиКомпоновкиДанных, АдресМассиваЗаказов, МассивРаспределенныхЗаказов,
	МассивЗаказовСОтборомПоДопХарактеристикам = Неопределено,
	МассивГрузовСОтборомПоДопХарактеристикам = Неопределено,
	Знач ОтборПоСвойствамЗаказа = Неопределено,
	Знач ОтборПоСвойствамГруза = Неопределено,
	МассивЗаказов = Неопределено)

	Возврат уатАРМ.ПолучитьКомпоновщикСпискаЗаказов(АдресСхемыКомпоновкиДанных, АдресНастройкиКомпоновкиДанных, АдресМассиваЗаказов, МассивРаспределенныхЗаказов,
	МассивЗаказовСОтборомПоДопХарактеристикам,
	МассивГрузовСОтборомПоДопХарактеристикам,
	ОтборПоСвойствамЗаказа,
	ОтборПоСвойствамГруза,
	МассивЗаказов, Истина);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКомпоновщикСпискаЗаказовСервер(АдресСхемыКомпоновкиДанных, АдресНастройкиКомпоновкиДанных, АдресМассиваЗаказов = "",
	МассивРаспределенныхЗаказов = Неопределено,
	МассивЗаказов = Неопределено, ПредставлениеЗаказаДляКартыOSM = Ложь)

	Возврат уатАРМ.ПолучитьКомпоновщикСпискаЗаказовСервер(АдресСхемыКомпоновкиДанных, АдресНастройкиКомпоновкиДанных, АдресМассиваЗаказов,
		МассивРаспределенныхЗаказов,
		МассивЗаказов, ПредставлениеЗаказаДляКартыOSM, Истина);
	
КонецФункции

#КонецОбласти

#Область ТССписок

&НаКлиенте
Процедура ФормаЗаполненияТСПоРазнарядкеЗавершение(Результат, ДополнительныеПараметры) Экспорт

	Если ТипЗнч(Результат) = Тип("ДокументСсылка.уатРазнарядка") Тогда
		
		МаршрутыТСПоРазнарядкеЗавершениеСервер(Результат, МассивСозданныхМЛ);
		
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ФормаЗаполненияТСЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	МаршрутыСписок.Очистить();
	СоответсвиеПрицепов = Новый Соответствие;

	Если ТипЗнч(Результат) = Тип("Массив") Тогда
		ФормаЗаполненияТСЗаполнениеСписок(Результат, МассивСозданныхМЛ);
		НастройкаТолькоВыбранныеТСМЛОтбор();
		НастройкаТолькоВыбранныеТСПЛОтбор();
		ТолькоСозданныеМЛОтбор();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокТССервер(МассивТС, МассивСозданныхМЛ, СоответсвиеПрицепов = Неопределено, ЗаполнятьПрицепы = Ложь)
	
	Если СоответсвиеПрицепов = Неопределено 
		И НЕ ЗаполнятьПрицепы Тогда
		СоответсвиеПрицепов = Новый Соответствие;
	КонецЕсли;
	
	ПараметрыЗапросаТС = СтруктураПараметровДляПолученияТаблицыТС(КоэффициентГрузоподъемности, КоэффициентОбъемаКузова);
	мсвТС = ПолучитьТаблицуТС(ПараметрыЗапросаТС, ДатаПланирования, МассивТС);
	МаршрутыЗаполнитьСписокТСЗавершениеСервер_Список(мсвТС, МассивСозданныхМЛ, СоответсвиеПрицепов);
	Элементы.ЗаказыСписок.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура МаршрутыТСПоРазнарядкеЗавершениеСервер(Разнарядка, МассивСозданныхМЛ)
	
	мсвТС = ПолучитьСтрокиРазнарядки(Разнарядка);

	МассивТС = Новый Массив();
	СоответствиеТС = Новый Соответствие;
	Для Каждого ТекСтрока Из мсвТС Цикл 
		Если МассивТС.Найти(ТекСтрока.ТС) = Неопределено Тогда 
			МассивТС.Добавить(ТекСтрока.ТС);
			СоответствиеТС.Вставить(ТекСтрока.ТС, Новый Структура("Прицеп1, Прицеп2", ТекСтрока.Прицеп1, ТекСтрока.Прицеп2));
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыЗапросаТС = СтруктураПараметровДляПолученияТаблицыТС(КоэффициентГрузоподъемности, КоэффициентОбъемаКузова);

	мсвТС = ПолучитьТаблицуТС(ПараметрыЗапросаТС, ДатаПланирования, МассивТС);
	МаршрутыЗаполнитьСписокТСЗавершениеСервер_Список(мсвТС, МассивСозданныхМЛ);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСтрокиРазнарядки(Разнарядка)
	
	Возврат уатАРМ.ПолучитьСтрокиРазнарядки(Разнарядка);
	
КонецФункции

&НаСервере
Процедура ФормаЗаполненияТСЗаполнениеСписок(Результат, МассивСозданныхМЛ)
	
	МаршрутыЗаполнитьСписокТСЗавершениеСервер_Список(Результат, МассивСозданныхМЛ);
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыЗаполнитьСписокТС(ВидОперации = "МаршрутыЗаполнитьВсемиТС")
	
	МаршрутыСписок.Очистить();
	СоответсвиеПрицепов = Новый Соответствие;
	МаршрутыЗаполнитьСписокТСЗавершение(ВидОперации);
	
КонецПроцедуры

&НаКлиенте
Процедура МаршрутыЗаполнитьСписокТСЗавершение(ВидОперации)
	
	ПараметрыЗапросаТС = СтруктураПараметровДляПолученияТаблицыТС(КоэффициентГрузоподъемности, КоэффициентОбъемаКузова);
	
	ВызовСторФормы = Ложь;
	Если ВидОперации = "МаршрутыЗаполнитьВсемиТС" Тогда
		МаршрутыЗаполнитьСписокТСЗавершениеСервер(ПараметрыЗапросаТС, МассивСозданныхМЛ);
	ИначеЕсли ВидОперации = "МаршрутыЗаполнитьСобственнымиТС" Тогда
		ПараметрыЗапросаТС.ПривлеченныеТС        = Ложь;
		МаршрутыЗаполнитьСписокТСЗавершениеСервер(ПараметрыЗапросаТС, МассивСозданныхМЛ);
	ИначеЕсли ВидОперации = "МаршрутыЗаполнитьСобственнымиТССЭкипажем" Тогда
		ПараметрыЗапросаТС.ПривлеченныеТС        = Ложь;
		ПараметрыЗапросаТС.ТСсЭкипажем           = Истина;
		МаршрутыЗаполнитьСписокТСЗавершениеСервер(ПараметрыЗапросаТС, МассивСозданныхМЛ);
	ИначеЕсли ВидОперации = "МаршрутыЗаполнитьПривлеченнымиТС" Тогда
		ПараметрыЗапросаТС.СобственныеТС         = Ложь;
		МаршрутыЗаполнитьСписокТСЗавершениеСервер(ПараметрыЗапросаТС, МассивСозданныхМЛ);
	ИначеЕсли ВидОперации = "МаршрутыЗаполнитьВсеТСсМаршрутами" Тогда
		ПараметрыЗапросаТС.ТСсМЛ                 = Истина;
		МаршрутыЗаполнитьСписокТСЗавершениеСервер(ПараметрыЗапросаТС, МассивСозданныхМЛ);
	ИначеЕсли ВидОперации = "МаршрутыЗаполнитьТСпоЗонамОтбора" Тогда
		ПараметрыЗапросаТС.ТСЗакрепленыеЗаЗонами = Истина;
		МаршрутыЗаполнитьСписокТСЗавершениеСервер(ПараметрыЗапросаТС, МассивСозданныхМЛ);
	КонецЕсли;
	
	НастройкаТолькоВыбранныеТСМЛОтбор();
	НастройкаТолькоВыбранныеТСПЛОтбор();
	ТолькоСозданныеМЛОтбор();
	ТолькоСозданныеПЛОтбор();
	
	Если НЕ ВызовСторФормы Тогда
		ОбновитьПланировщик();
		ПодключитьОбработчикОжидания("Подключаемый_ОтобразитьДанныеНаКарте", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

// Возвращает шаблон структуры параметров для получения таблицы ТС в тч "МаршрутыДерево".
//
// Возвращаемое значение:
//  Структура - Структура - Коллекция параметров.
//       
//       * СобственныеТС           - Булево - Признак выборки собственных ТС
//       * ПривлеченныеТС          - Булево - Признак выборки привлеченных ТС
//       * ЗаполнениеТСПриОткрытии - Булево - Признак выборки ТС при открытии формы.
//                                            Возврат пустого массива при наличии более 300 единиц ТС.
//
&НаКлиентеНаСервереБезКонтекста
Функция СтруктураПараметровДляПолученияТаблицыТС(КоэффициентГрузоподъемности, КоэффициентОбъемаКузова)
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("СобственныеТС",               Истина);
	СтруктураПараметров.Вставить("ПривлеченныеТС",              Истина);
	СтруктураПараметров.Вставить("ТСсМЛ",                       Ложь);
	СтруктураПараметров.Вставить("ТСсЭкипажем",                 Ложь);
	СтруктураПараметров.Вставить("ЗаполнениеТСПриОткрытии",     Ложь);
	СтруктураПараметров.Вставить("ТСЗакрепленыеЗаЗонами",       Ложь);
	СтруктураПараметров.Вставить("КоэффициентГрузоподъемности", КоэффициентГрузоподъемности);
	СтруктураПараметров.Вставить("КоэффициентОбъемаКузова",     КоэффициентОбъемаКузова);
	СтруктураПараметров.Вставить("НастройкаАлгоритмМаршрутизации", 0);

	Возврат СтруктураПараметров;
	
КонецФункции

&НаСервере
Процедура МаршрутыЗаполнитьСписокТСЗавершениеСервер(ПараметрыЗапросаТС, МассивСозданныхМЛ, МассивТС = Неопределено)
	
	Если НЕ ПараметрыЗапросаТС.ТСЗакрепленыеЗаЗонами Тогда
		мсвТС = ПолучитьТаблицуТС(ПараметрыЗапросаТС, ДатаПланирования, МассивТС);
	ИначеЕсли НастройкаПроверятьНахождениеВЗонеПоФактическомуМестоположениюТС Тогда
		мсвТС = ПолучитьТаблицуТСЗакрепленыхЗаЗонами(ПолучитьСписокЗонОтбора(), ДатаПланирования, ПараметрыЗапросаТС, НастройкаВремяАктуальностиКоординат);
	Иначе
		мсвТС = ПолучитьТаблицуТСЗакрепленыхЗаЗонами(ПолучитьСписокЗонОтбора(), ДатаПланирования, ПараметрыЗапросаТС);
	КонецЕсли;
	
	МаршрутыЗаполнитьСписокТСЗавершениеСервер_Список(мсвТС, МассивСозданныхМЛ);
		
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТаблицуТС(Параметры, ДатаПланирования, МассивТС = Неопределено)
	
	Возврат уатАРМ.ПолучитьТаблицуТС(Параметры, ДатаПланирования,, МассивТС);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьТаблицуТСЗакрепленыхЗаЗонами(СписокЗон, ДатаПланирования, ПараметрыЗапросаТС, НастройкаВремяАктуальностиКоординат = 0) 
	
	Возврат уатАРМ.ПолучитьТаблицуТСЗакрепленыхЗаЗонами(СписокЗон, ДатаПланирования, ПараметрыЗапросаТС, НастройкаВремяАктуальностиКоординат);
	
КонецФункции

&НаСервере
Функция ПолучитьСписокЗонОтбора()
	
	Возврат уатАРМ.ПолучитьСписокЗонОтбора(ОтборЗоны);
	
КонецФункции

&НаСервере
Функция МаршрутыЗаполнитьСписокТСЗавершениеСервер_Список(мсвТС, МассивСозданныхМЛ = Неопределено, СоответсвиеПрицепов = Неопределено)
	
	МассивТС = Новый Массив();
	
	НастройкаМаксимальноеЧислоЗаказовМаршрутаМЛ		 = НастройкаМаксимальноеЧислоЗаказовМаршрута;
	НастройкаМаксимальнаяПродолжительностьМаршрутаМЛ = НастройкаМаксимальнаяПродолжительностьМаршрута;
	НастройкаМаксимальноеРасстояниеМаршрутаМЛ		 = НастройкаМаксимальноеРасстояниеМаршрута;

	мсвТСВСписке = Новый Массив();
	МассивСопоставленныхМЛ = Новый Массив();

	ВесБрутто  = 0;
	Объем      = 0;
	КолМест    = 0;
	ВремяВПути = 0;
	Расстояние = 0;
	
	Для Каждого ТекТС Из мсвТС Цикл
		мсвТСВСписке.Добавить(ТекТС.ТС);
		
		СтрокиТС = МаршрутыСписок.НайтиСтроки(Новый Структура("ТС", ТекТС.ТС));
		Если СтрокиТС.Количество() = 0 Тогда
			ВеткаТС = МаршрутыСписок.Добавить();
		Иначе
			ВеткаТС = СтрокиТС[0];
		КонецЕсли;
		ЗаполнитьСтрокуТСВМаршрутах(ВеткаТС, ТекТС, СоответсвиеПрицепов = Неопределено);
		
		Если СоответсвиеПрицепов <> Неопределено Тогда
			СтруктураПрицепов = СоответсвиеПрицепов.Получить(ВеткаТС.ТС);
			Если СтруктураПрицепов <> Неопределено Тогда
				ЗаполнитьЗначенияСвойств(ВеткаТС, СтруктураПрицепов);
				
				ВеткаТС.Грузоподъемность = ВеткаТС.Грузоподъемность + ВеткаТС.Прицеп1Грузоподъемность + ВеткаТС.Прицеп2Грузоподъемность;
				ВеткаТС.ОбъемКузова      = ВеткаТС.ОбъемКузова + ВеткаТС.Прицеп1ОбъемКузова + ВеткаТС.Прицеп2ОбъемКузова;
				ВеткаТС.МаксимальноеКоличествоУпаковок = ВеткаТС.МаксимальноеКоличествоУпаковок
				+ ВеткаТС.Прицеп1МаксимальноеКоличествоУпаковок + ВеткаТС.Прицеп2МаксимальноеКоличествоУпаковок;
			КонецЕсли;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекТС.МаршрутныйЛист) Тогда
			МассивСопоставленныхМЛ.Добавить(ТекТС.МаршрутныйЛист);
			
			ВеткаТС.КоличествоРейсов = ВеткаТС.КоличествоРейсов + 1;
			
			ВесБрутто	 = ТекТС.МаршрутныйЛистВесБрутто;
			Объем		 = ТекТС.МаршрутныйЛистОбъем;
			КолМест		 = ТекТС.МаршрутныйЛистКоличествоМест;
			ВремяВПути	 = ТекТС.МаршрутныйЛистВремяВПути;
			Расстояние	 = ТекТС.МаршрутныйЛистРасстояние;
			
			ВеткаТС.ВесБрутто  = ВеткаТС.ВесБрутто + ВесБрутто;
			ВеткаТС.Объем      = ВеткаТС.Объем + Объем;
			ВеткаТС.КолМест    = ВеткаТС.КолМест + КолМест;
			ВеткаТС.ВремяВПути = СложитьВремя(ВеткаТС.ВремяВПути, ВремяВПути);
			ВеткаТС.Расстояние = ВеткаТС.Расстояние + Расстояние;
			
			ПроцентЗагрузкиВес     = ?(ВеткаТС.Грузоподъемность = 0, 0, Окр((ВесБрутто / ВеткаТС.Грузоподъемность) * 100, 0, РежимОкругления.Окр15как20));
			ПроцентЗагрузкиОбъем   = ?(ВеткаТС.ОбъемКузова = 0, 0, Окр((Объем / ВеткаТС.ОбъемКузова) * 100, 0, РежимОкругления.Окр15как20));
			ПроцентПротяженность   = ?(НастройкаМаксимальноеРасстояниеМаршрутаМЛ = 0, 0, Окр((Расстояние / НастройкаМаксимальноеРасстояниеМаршрутаМЛ) * 100, 0, РежимОкругления.Окр15как20));
			ПроцентВремяВРаботе    = ?(НастройкаМаксимальнаяПродолжительностьМаршрутаМЛ = 0, 0, Окр((ВремяВПути / НастройкаМаксимальнаяПродолжительностьМаршрутаМЛ) * 100, 0, РежимОкругления.Окр15как20));
			ПроцентЗагрузкиКолМест = ?(ВеткаТС.МаксимальноеКоличествоУпаковок = 0, 0, Окр((КолМест / ВеткаТС.МаксимальноеКоличествоУпаковок) * 100, 0, РежимОкругления.Окр15как20));
			
			ВеткаТС.ПроцентЗагрузкиВес     = Макс(ВеткаТС.ПроцентЗагрузкиВес, ПроцентЗагрузкиВес);
			ВеткаТС.ПроцентЗагрузкиОбъем   = Макс(ВеткаТС.ПроцентЗагрузкиОбъем, ПроцентЗагрузкиОбъем);
			ВеткаТС.ПроцентПротяженность   = Макс(ВеткаТС.ПроцентПротяженность, ПроцентПротяженность);
			ВеткаТС.ПроцентВремяВРаботе    = Макс(ВеткаТС.ПроцентВремяВРаботе, ПроцентВремяВРаботе);
			ВеткаТС.ПроцентЗагрузкиКолМест = Макс(ВеткаТС.ПроцентЗагрузкиКолМест, ПроцентЗагрузкиКолМест);
		КонецЕсли;
		
		ВеткаТС.ПроцентКоличЗаказов    = ?(НастройкаМаксимальноеЧислоЗаказовМаршрутаМЛ = 0, 0, Окр((1 / НастройкаМаксимальноеЧислоЗаказовМаршрутаМЛ) * 100, 0, РежимОкругления.Окр15как20));
		
		ВеткаТС.ВесПредставление   = Строка(ВеткаТС.ВесБрутто) + " / " + Строка(ВеткаТС.Грузоподъемность);
		ВеткаТС.ОбъемПредставление = Строка(ВеткаТС.Объем) + " / " + Строка(ВеткаТС.ОбъемКузова);
		ВеткаТС.КоличествоУпаковокПредставление = Строка(ВеткаТС.КолМест) + " / " + Строка(ВеткаТС.МаксимальноеКоличествоУпаковок);
		МассивТС.Добавить(ТекТС.ТС);

	КонецЦикла;
	
	ОбновитьПодвалСписокаТС();
	ЗаполнитьТекущиеСостояниеТС(мсвТСВСписке);
	
	Возврат МассивТС;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТекущиеСостояниеТС(мсвТСВСписке)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("мсвТС", мсвТСВСписке);
	Запрос.УстановитьПараметр("ДатаПланирования", КонецДня(ДатаПланирования));
	Запрос.УстановитьПараметр("ДатаНач", НачалоДня(ДатаПланирования));
	Запрос.Текст = "ВЫБРАТЬ
	               |	уатСостояниеТССрезПоследних.ТС КАК ТС,
	               |	уатСостояниеТССрезПоследних.Состояние КАК Состояние,
	               |	уатСостояниеТССрезПоследних.Состояние.ЦветСостояния КАК СостояниеЦветСостояния,
	               |	уатСостояниеТССрезПоследних.Регистратор КАК Регистратор
	               |ИЗ
	               |	РегистрСведений.уатСостояниеТС.СрезПоследних(
	               |			&ДатаПланирования,
	               |			ТС В (&мсвТС)
	               |				И Период <= &ДатаПланирования
	               |				И ДатаОкончания >= &ДатаНач) КАК уатСостояниеТССрезПоследних";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		СтрокиТС = МаршрутыСписок.НайтиСтроки(Новый Структура("ТС", Выборка.ТС));
		Если СтрокиТС.Количество() = 0 Тогда
			Продолжить;
		Иначе
			ВеткаТС = СтрокиТС[0];
		КонецЕсли;
		ВеткаТС.ТекущееСостояниеТС = Выборка.Состояние;
		ВеткаТС.ТекущееСостояниеТСРегистратор = Выборка.Регистратор;
		
		ЦветФона = Неопределено;
		ХранилищеЦветФона = Выборка.СостояниеЦветСостояния;
		Если НЕ ХранилищеЦветФона = Неопределено Тогда 
			ДанныеЦветФона = ХранилищеЦветФона.Получить();
			Если Не ДанныеЦветФона = Неопределено И ТипЗнч(ДанныеЦветФона) = Тип("Цвет") Тогда
				ЦветФона = ДанныеЦветФона;
			КонецЕсли;
		КонецЕсли;
		
		ЭлементОформленияСостояние = УсловноеОформление.Элементы.Добавить();
		ЭлементОформленияСостояние.Использование = Истина;
		ЭлементОформленияСостояние.Оформление.УстановитьЗначениеПараметра("ЦветФона",  ЦветФона);
		
		ЭлементУсловия                = ЭлементОформленияСостояние.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементУсловия.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("МаршрутыСписок.ТекущееСостояниеТС");
		ЭлементУсловия.ПравоеЗначение = Выборка.Состояние; 
		ЭлементУсловия.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
		ЭлементУсловия.Использование  = Истина;
		
		ОформляемоеПоле      = ЭлементОформленияСостояние.Поля.Элементы.Добавить();
		ОформляемоеПоле.Поле = Новый ПолеКомпоновкиДанных("МаршрутыСписокТекущееСостояниеТС");
		
	КонецЦикла;

КонецПроцедуры

&НаСервере
Процедура ОбновитьПодвалСписокаТС()
	
	СводнаяИнформацияКоличествоТС     = "";
	СводнаяИнформацияКоличествоМЛ     = "";
	СводнаяИнформацияВесМЛ            = "";
	СводнаяИнформацияОбьемМЛ          = "";
	СводнаяИнформацияКоличествоМестМЛ = "";
	СводнаяИнформацияВремяВПути       = "";
	СводнаяИнформацияРасстояние       = "";
	
	ИтогоМаршрутыЗадействованоТС = 0;
	ИтогоМаршрутыМЛ              = 0;
	ИтогоМаршрутыВес             = 0;
	ИтогоМаршрутыВесВсего        = 0;
	ИтогоМаршрутыВсегоТС         = 0;
	ИтогоМаршрутыОбъем           = 0;
	ИтогоМаршрутыОбъемВсего      = 0;
	ИтогоМаршрутыКолМест         = 0;
	ИтогоМаршрутыВремяВПути      = 0;
	ИтогоМаршрутыРасстояние      = 0;
	
	Для Каждого ТекСтрока Из МаршрутыСписок Цикл
		ИтогоМаршрутыВсегоТС  = ИтогоМаршрутыВсегоТС + 1;
		Если ЗначениеЗаполнено(ТекСтрока.КоличествоРейсов) Тогда
			ИтогоМаршрутыЗадействованоТС = ИтогоМаршрутыЗадействованоТС + 1;
		КонецЕсли;
		
		ИтогоМаршрутыМЛ         = ИтогоМаршрутыМЛ + ТекСтрока.КоличествоРейсов;
		ИтогоМаршрутыВес        = ИтогоМаршрутыВес + ТекСтрока.ВесБрутто;
		ИтогоМаршрутыВесВсего   = ИтогоМаршрутыВесВсего     + ТекСтрока.Грузоподъемность;
		ИтогоМаршрутыОбъем      = ИтогоМаршрутыОбъем + ТекСтрока.Объем;
		ИтогоМаршрутыОбъемВсего = ИтогоМаршрутыОбъемВсего     + ТекСтрока.ОбъемКузова;
		ИтогоМаршрутыКолМест    = ИтогоМаршрутыКолМест + ТекСтрока.КолМест;
		ИтогоМаршрутыВремяВПути    = СложитьВремя(ИтогоМаршрутыВремяВПути, ТекСтрока.ВремяВПути);
		ИтогоМаршрутыРасстояние    = ИтогоМаршрутыРасстояние + ТекСтрока.Расстояние;
		
	КонецЦикла;
	
	СводнаяИнформацияКоличествоТС     = СтрШаблон(НСтр("ru = 'Задействовано ТС: %1 / %2'"),
	ИтогоМаршрутыЗадействованоТС, ИтогоМаршрутыВсегоТС);
	СводнаяИнформацияКоличествоМЛ     = Строка(ИтогоМаршрутыМЛ);
	СводнаяИнформацияВесМЛ            = Строка(ИтогоМаршрутыВес) + " / " + ИтогоМаршрутыВесВсего;
	СводнаяИнформацияОбьемМЛ          = Строка(ИтогоМаршрутыОбъем) + " / " + ИтогоМаршрутыОбъемВсего;
	СводнаяИнформацияКоличествоМестМЛ = Строка(ИтогоМаршрутыКолМест);
	СводнаяИнформацияВремяВПути       = Формат(ИтогоМаршрутыВремяВПути, "ЧДЦ=2; ЧРД=:");
	СводнаяИнформацияРасстояние       = Строка(ИтогоМаршрутыРасстояние);

КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ОчиститьПараметрыСтрокиТС(ВеткаТС)
	
	ВеткаТС.Грузоподъемность               = 0;
	ВеткаТС.ОбъемКузова                    = 0;
	ВеткаТС.МаксимальноеКоличествоУпаковок = 0;
	ВеткаТС.КоличествоРейсов = 0;
	ВеткаТС.ВесБрутто	 = 0;
	ВеткаТС.Объем		 = 0;
	ВеткаТС.КолМест		 = 0;
	ВеткаТС.ВремяВПути	 = 0;
	ВеткаТС.Расстояние	 = 0;
	
	ВеткаТС.ПроцентЗагрузкиВес     = 0;
	ВеткаТС.ПроцентЗагрузкиОбъем   = 0;
	ВеткаТС.ПроцентКоличЗаказов    = 0;
	ВеткаТС.ПроцентПротяженность   = 0;
	ВеткаТС.ПроцентВремяВРаботе    = 0;
	ВеткаТС.ПроцентЗагрузкиКолМест = 0;
	
	ВеткаТС.ВесПредставление   = Строка(ВеткаТС.ВесБрутто) + " / " + Строка(ВеткаТС.Грузоподъемность);
	ВеткаТС.ОбъемПредставление = Строка(ВеткаТС.Объем) + " / " + Строка(ВеткаТС.ОбъемКузова);
	ВеткаТС.КоличествоУпаковокПредставление = Строка(ВеткаТС.КолМест) + " / " + Строка(ВеткаТС.МаксимальноеКоличествоУпаковок);
	ВеткаТС.ТекущееСостояниеТС            = Неопределено;
	ВеткаТС.ТекущееСостояниеТСРегистратор = Неопределено;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСтрокуТСВМаршрутах(НовСтрокаТС, СтрокаТабТС, ЗаполнитьПрицепы = Ложь)
	
	ЗаполнитьСтрокуТСВМаршрутахСервер(НовСтрокаТС, СтрокаТабТС, ЗаполнитьПрицепы);
	
КонецПроцедуры

&НаКлиентеНаСервереБезКонтекста
Процедура ЗаполнитьСтрокуТСВМаршрутахСервер(НовСтрокаТС, СтрокаТабТС, ЗаполнитьПрицепы = Ложь)
	
	НовСтрокаТС.ТС                             = СтрокаТабТС.ТС;
	НовСтрокаТС.МодельТС                       = СтрокаТабТС.МодельТС;
	НовСтрокаТС.ГаражТС                        = СтрокаТабТС.ГаражТС;
	НовСтрокаТС.ГаражТСЛат                     = СтрокаТабТС.ГаражТСЛат;
	НовСтрокаТС.ГаражТСЛон                     = СтрокаТабТС.ГаражТСЛон;
	НовСтрокаТС.Грузоподъемность               = СтрокаТабТС.Грузоподъемность;
	НовСтрокаТС.ОбъемКузова                    = СтрокаТабТС.ОбъемКузова;
	НовСтрокаТС.МаксимальноеКоличествоУпаковок = СтрокаТабТС.МаксимальноеКоличествоУпаковок;
	НовСтрокаТС.СобственныйВесТС               = СтрокаТабТС.СобственныйВес;
	НовСтрокаТС.МинимальноеКоличествоУпаковок  = СтрокаТабТС.МинимальноеКоличествоУпаковок;
	НовСтрокаТС.МинимальныйВесГруза            = СтрокаТабТС.МинимальныйВесГруза;
	НовСтрокаТС.МинимальныйОбъемГруза          = СтрокаТабТС.МинимальныйОбъемГруза;
	НовСтрокаТС.ТСПредставление                = СтрокаТабТС.ПредставлениеТС;
	НовСтрокаТС.ПредставлениеМЛ                = СтрокаТабТС.ПредставлениеМЛ;
	НовСтрокаТС.ПринадлежностьТС               = СтрокаТабТС.ПринадлежностьТС;
	НовСтрокаТС.КартинкаПринадлежность         = СтрокаТабТС.ИндексКартинки;
	НовСтрокаТС.GUID                           = Строка(Новый УникальныйИдентификатор);
	
	Для Каждого ТекСтрока ИЗ СтрокаТабТС.ХарактеристикиТС Цикл
		НовСтрокаТС.ХарактеристикиТС.Добавить(ТекСтрока.ТСХарактеристика);
	КонецЦикла;
	
	Если ЗаполнитьПрицепы Тогда
		СтруктураПрицепов = ЗаполнитьПрицепы(СтрокаТабТС.ТС);
		ЗаполнитьЗначенияСвойств(НовСтрокаТС, СтруктураПрицепов);
		
		НовСтрокаТС.Грузоподъемность = НовСтрокаТС.Грузоподъемность + НовСтрокаТС.Прицеп1Грузоподъемность + НовСтрокаТС.Прицеп2Грузоподъемность;
		НовСтрокаТС.ОбъемКузова      = НовСтрокаТС.ОбъемКузова + НовСтрокаТС.Прицеп1ОбъемКузова + НовСтрокаТС.Прицеп2ОбъемКузова;
		НовСтрокаТС.МаксимальноеКоличествоУпаковок = НовСтрокаТС.МаксимальноеКоличествоУпаковок
		+ НовСтрокаТС.Прицеп1МаксимальноеКоличествоУпаковок + НовСтрокаТС.Прицеп2МаксимальноеКоличествоУпаковок;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ЗаполнитьПрицепы(ВСоставе)
	
	Возврат уатАРМ.ЗаполнитьПрицепы(ВСоставе);
	
КонецФункции

&НаКлиентеНаСервереБезКонтекста
Функция СложитьВремя(Время1,Время2)
	Если ТипЗнч(Время1) = Тип("Число") И ТипЗнч(Время2) = Тип("Число") тогда
		час1 = Цел(Время1);
		час2 = Цел(время2);
		мЧас = Час1 + Час2;
		мин = ((Время1 - час1) + (Время2 - час2)) * 100;
		допЧас = Цел(мин / 60);
		мЧас = мЧас + допЧас;
		мин = (мин - ДопЧас*60) / 100;
		Возврат мЧас + Мин;
	ИначеЕсли ТипЗнч(Время1) = Тип("Дата") И ТипЗнч(Время2) = Тип("Дата") тогда
		Возврат Время1 + Час(Время2) * 60 * 60 + Минута(Время2) * 60 + Секунда(Время2); 	
	Иначе
		Если ТипЗнч(Время1) = Тип("Число") тогда
			мВремя1 = Время2;
			мВремя2 = Время1;
		Иначе
			мВремя1 = Время1;
			мВремя2 = Время2;
		КонецЕсли;
		мВремя = дата('00010101010101');
		МВремя = мВремя1 + Цел(мВремя2) * 60 * 60 + (мВремя2 - Цел(мВремя2)) * 100 * 60;
		Если ТипЗнч(мВремя1) = Тип("Число") тогда
			Возврат Час(мВремя) + Минута(мВремя) / 100;	
		Иначе
			Возврат мВремя;	
		КОнецЕсли;
	КонецЕсли;
КонецФункции

&НаСервере
Процедура СоздатьМЛсервер(СтрокаЗаказ, СтрокаТС, МассивСозданныхМЛ, МассивСозданныхПЛ,
	МассивОшибокСозданияМЛ, мсвМаршрутныеЛисты, мсвПутевыеЛисты)
	
	Если ТипЗнч(СтрокаТС) = Тип("Число") Тогда
		ТекСтрокаТС = МаршрутыСписок.НайтиПоИдентификатору(СтрокаТС);
	ИначеЕсли ТипЗнч(СтрокаТС) = Тип("ДокументСсылка.уатМаршрутныйЛист") Тогда
		ТекСтрокаТС = Элементы.МаршрутыСписок.ТекущаяСтрока;
		ТекСтрокаТС = МаршрутыСписок.НайтиПоИдентификатору(ТекСтрокаТС);
	Иначе
		ТекСтрокаТС = СтрокаТС;
	КонецЕсли;
	
	НовДок = Документы.уатМаршрутныйЛист.СоздатьДокумент();
	НовДок.Заполнить(СтрокаЗаказ.Ссылка);
	
	ВремяОтправленияПлан = НовДок.ДатаИВремяОтправленияПлан - НачалоДня(НовДок.ДатаИВремяОтправленияПлан);
	РазницаВремени = НачалоДня(ДатаПланирования) - НачалоДня(НовДок.ДатаИВремяОтправленияПлан);
	НовДок.ДатаИВремяОтправленияПлан = НачалоДня(ДатаПланирования) + ВремяОтправленияПлан;
	Для Каждого ТекСтрока Из НовДок.Заказы Цикл
		ВремяПрибытиеПлан = ТекСтрока.ПрибытиеПлан - НачалоДня(ТекСтрока.ПрибытиеПлан);
		ТекСтрока.ПрибытиеПлан = НачалоДня(ТекСтрока.ПрибытиеПлан) + РазницаВремени;
		ТекСтрока.ПрибытиеПлан = ТекСтрока.ПрибытиеПлан + ВремяОтправленияПлан;
	КонецЦикла;
	НовДок.ОбновитьВремяРасстояниеМеждуПунктами();
	Если НовДок.Заказы.Количество() <> 0 Тогда
		НовДок.ДатаИВремяВыполненияПлан = уатЗащищенныеФункцииСервер.СложитьВремя(ТекСтрока.ПрибытиеПлан, ТекСтрока.СтоянкаИзПункта);
		НовДок.ДатаИВремяВыполненияПлан = уатЗащищенныеФункцииСервер.СложитьВремя(НовДок.ДатаИВремяВыполненияПлан, ТекСтрока.Стоянка);
	КонецЕсли;
	
	Если НачалоДня(ДатаПланирования) < НачалоДня(ТекущаяДатаСеанса()) Тогда 
		НовДок.Дата = КонецДня(ДатаПланирования);
	ИначеЕсли НачалоДня(ДатаПланирования) > НачалоДня(ТекущаяДатаСеанса()) Тогда
		НовДок.Дата = НачалоДня(ДатаПланирования);
	Иначе 
		НовДок.Дата = ТекущаяДата();
	КонецЕсли;
	
	НовДок.ВидОперации  = Перечисления.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя;
	НовДок.ВидПеревозки = Справочники.уатВидыПеревозок.АвтомобильнаяГрузовая;
	
	уатЗащищенныеФункцииСервер.уатДокументФормаЭлементаПриСозданииНаСервере(Ложь, Истина, НовДок);
	НовДок.Ответственный = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнойОтветственный");
	
	Если НастройкаОрганизацияМЛИсточник = 0 Тогда
		НовДок.Организация = НовДок.Организация;
	ИначеЕсли НастройкаОрганизацияМЛИсточник = 1 Тогда
		НовДок.Организация = уатОбщегоНазначения.МестонахождениеТС(ТекСтрокаТС.ТС, НовДок.Дата, Ложь).Организация;
	ИначеЕсли НастройкаОрганизацияМЛИсточник = 2 Тогда
		НовДок.Организация = НастройкаОрганизацияМЛ;
	КонецЕсли;
	
	НовДок.ПринадлежностьПеревозки = ТекСтрокаТС.ПринадлежностьТС;
	
	Если ЗначениеЗаполнено(СтрокаЗаказ.ОбъектСтроительства) Тогда
		НовДок.ОбъектСтроительства = СтрокаЗаказ.ОбъектСтроительства;
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаЗаказ.Маршрут) Тогда
		НовДок.Маршрут = СтрокаЗаказ.Маршрут;
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаЗаказ.ВидПеревозки) Тогда
		НовДок.ВидПеревозки = СтрокаЗаказ.ВидПеревозки;
	КонецЕсли;
	Если ЗначениеЗаполнено(СтрокаЗаказ.НаправлениеПеревозки) Тогда
		НовДок.НаправлениеПеревозки = СтрокаЗаказ.НаправлениеПеревозки;
	КонецЕсли;
	
	НовДок.ТС = ТекСтрокаТС.ТС;
	
	Если ЗначениеЗаполнено(ТекСтрокаТС.ТС) Тогда 
		Если ТекСтрокаТС.ПринадлежностьТС = Перечисления.уатПринадлежностьТС.Собственное Тогда
			ВладелецТС = уатОбщегоНазначения.МестонахождениеТС(ТекСтрокаТС.ТС, НовДок.Дата, Ложь).Организация;
			Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
			Если Не ЗначениеЗаполнено(ВладелецТС) Тогда
				ВладелецТС = ТекСтрокаТС.ТС.Организация;
			КонецЕсли;
			
		ИначеЕсли ТекСтрокаТС.ПринадлежностьТС = Перечисления.уатПринадлежностьТС.Привлеченное Тогда
			ВладелецТС = ТекСтрокаТС.ТС.ВладелецТС;
			СписокДоговоров = Новый СписокЗначений;
			СписокДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
			СтрПараметров = Новый Структура("СписокДопустимыхВидовДоговоров", СписокДоговоров);
			Договор = уатОбщегоНазначенияТиповыеСервер.уатПолучитьДоговорПоОрганизацииИКонтрагенту(НовДок.Организация, ВладелецТС, СтрПараметров);
			
		Иначе
			ВладелецТС       = Неопределено;
			Договор          = Неопределено;
			
		КонецЕсли;
	КонецЕсли;
	
	// заполняем водителей
	Если ТекСтрокаТС.ПринадлежностьТС = Перечисления.уатПринадлежностьТС.Собственное тогда
		ТекДата = ?(НовДок.Заказы.Количество() > 0, НовДок.ДатаИВремяОтправленияПлан, НовДок.Дата);
		уатОбщегоНазначения.ЗаполнитьЭкипажТС(НовДок.ТС, НовДок.Организация, ТекДата,
			НовДок.Водитель1, НовДок.Водитель2, НовДок.Сотрудник1, НовДок.Сотрудник2,
			Ложь, ТекДата + 24*3600, Истина);
	Иначе
		НовДок.Водитель1 = НовДок.ТС.Водитель;
	КонецЕсли;
	
	Если ТекСтрокаТС.ПринадлежностьТС = Перечисления.уатПринадлежностьТС.Виртуальное Тогда 
		НовДок.Контрагент         = Справочники.Организации.ПустаяСсылка();
		НовДок.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	Иначе 
		НовДок.Контрагент         = ВладелецТС;
		НовДок.ДоговорКонтрагента = Договор;
	КонецЕсли;
	
	НовДок.Прицеп1 = ТекСтрокаТС.Прицеп1;
	НовДок.Прицеп2 = ТекСтрокаТС.Прицеп2;
	
	Документы.уатМаршрутныйЛист.УстановитьФлагФормироватьУведомленияОбОпозданияхВРейсе(НовДок);
	Документы.уатМаршрутныйЛист.УстановитьФлагРазрешенаВыгрузкаВWMS(НовДок);
	НовДок.РассчитатьИтоговыеПоказатели();
	НовДок.АвтоматическийРасчетИтогов();
	
	ЕстьОшибкиЗаполнения = Не НовДок.ПроверитьЗаполнение();
	
	ТекстОшибкиЗаполнения = "";
	Если ЕстьОшибкиЗаполнения Тогда 
		МассивОшибок = ПолучитьСообщенияПользователю(Истина);
		Для Каждого ТекОшибка Из МассивОшибок Цикл 
			ТекстОшибкиЗаполнения = ТекстОшибкиЗаполнения + ?(ТекстОшибкиЗаполнения="","","; ") + ТекОшибка.Текст;
		КонецЦикла;
	КонецЕсли;
	
	Если ЕстьОшибкиЗаполнения Тогда 
		РежимЗаписиМЛ = РежимЗаписиДокумента.Запись;
	Иначе 
		РежимЗаписиМЛ = РежимЗаписиДокумента.Проведение;
	КонецЕсли;
	
	ТекстОшибкиЗаписи = "";
	
	Попытка 
		НовДок.ДополнительныеСвойства.Вставить("НастройкаНеРассчитыватьВыработку", НастройкаНеРассчитыватьВыработку);
		НовДок.Записать(РежимЗаписиМЛ);
	Исключение
		ТекстОшибкиЗаписи = ОписаниеОшибки();
		НовДок.Записать(РежимЗаписиДокумента.Запись);
	КонецПопытки;
	мсвМаршрутныеЛисты.Добавить(НовДок.Ссылка);
	
	Если НЕ ТекстОшибкиЗаполнения = "" 
		ИЛИ НЕ ТекстОшибкиЗаписи = "" Тогда 
		РезТекстОшибки = НСтр("en='While creating routing list';ru='При создании маршрутного листа'") + " " 
		+ НСтр("en='errors occured:';ru='возникли ошибки:'") + " "
		+ ТекстОшибкиЗаполнения + ?(Не ТекстОшибкиЗаполнения = "" И Не ТекстОшибкиЗаписи = "","; ","")
		+ ТекстОшибкиЗаписи + Символы.ПС 
		+ НСтр("en='Document recorded without posting.';ru='Документ записан без проведения.'");
		ПараметрыТекстОшибки = Новый Массив();
		ПараметрыТекстОшибки.Добавить(РезТекстОшибки);
		МассивОшибокСозданияМЛ.Добавить(
		Новый Структура(
		"Группа, Критичность, КодОшибки, Объект, Параметры",
		"Маршрутные листы",
		?(ТекстОшибкиЗаписи = "", "Предупреждение", "Ошибка"),
		"Ошибка_32",
		НовДок.Ссылка, ПараметрыТекстОшибки)
		);
	КонецЕсли;

	МассивСозданныхМЛ.Добавить(НовДок.Ссылка);
	
	ТекстОшибкиЗаписи = "";
	ТекстОшибкиЗаписи = "";
	Если НастройкаСоздаватьПЛ 
		И ЗначениеЗаполнено(НовДок.Ссылка) 
		И НовДок.Проведен 
		И ТекСтрокаТС.ПринадлежностьТС = Перечисления.уатПринадлежностьТС.Собственное Тогда
		
		НовДокПЛ = Документы.уатПутевойЛист.СоздатьДокумент();
		НовДокПЛ.Заполнить(НовДок.Ссылка);
		
		СтруктураОбъектовНастроек = Новый Структура;
		СтруктураОбъектовНастроек.Вставить("Организация",   НовДокПЛ.Организация);
		СтруктураОбъектовНастроек.Вставить("Подразделение", уатОбщегоНазначения.МестонахождениеТС(НовДокПЛ.ТранспортноеСредство).Подразделение);
		СтруктураОбъектовНастроек.Вставить("Пользователь",  ПользователиКлиентСервер.АвторизованныйПользователь());

		НовДокПЛ.ВидСообщения          = НовДокПЛ.ТранспортноеСредство.ОсновнойВидСообщения;
		НовДокПЛ.ВидПеревозки          = НовДокПЛ.ТранспортноеСредство.ОсновнойВидПеревозки;
		
		ОснВидПЛпоТС = НовДокПЛ.ТранспортноеСредство.ОсновнойВидПЛ;
		Если ЗначениеЗаполнено(ОснВидПЛпоТС) Тогда
			НовДокПЛ.ВидПЛ = ОснВидПЛпоТС;
		Иначе
			НовДокПЛ.ВидПЛ             = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, "ОсновнойВидПЛ");
		КонецЕсли;
		НовДокПЛ.РежимРасчетаВыработки = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, "ОсновнойРежимРасчетаВыработкиПЛ");
		
		ОтветствЛица = уатПутевыеЛисты.ОтветственныеЛицаПоУмолчанию(СтруктураОбъектовНастроек, ДатаПланирования);
		ЗаполнитьЗначенияСвойств(НовДокПЛ, ОтветствЛица);
		
		НовДокПЛ.РасчетФактРасходаГСМ  = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, "РасчетФактРасходаГСМ");
		НовДокПЛ.Ответственный         = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(СтруктураОбъектовНастроек.Пользователь,
				"ОсновнойОтветственный");
		Если ПолучитьФункциональнуюОпцию("уатИспользоватьУчетДоходовИРасходов") Тогда
			Если Не уатОбщегоНазначения.уатНайтиПланЗатрат(НовДокПЛ.ПланЗатрат, НовДокПЛ.Организация, НовДокПЛ.ТранспортноеСредство,
				НовДокПЛ.ТранспортноеСредство.Колонна) Тогда
			КонецЕсли;
		КонецЕсли;
		
		НовДокПЛ.Смена                 = 1;
		
		мОстатокТопливаВыезд = 0;
		мСоставТС = уатОбщегоНазначения.уатСоставТС(НовДокПЛ.ТранспортноеСредство);
		флЗаполнитьВодителейПоУмолчанию = Ложь;
		НовДокПЛ.ИнициализацияДанныхАвтомобиля(мОстатокТопливаВыезд, мСоставТС, флЗаполнитьВодителейПоУмолчанию);
		
		мСрокДействияПутевогоЛиста = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, ПредопределенноеЗначение("ПланВидовХарактеристик.уатПраваИНастройки.СрокДействияПутевогоЛиста"));
		мСрокДействияПутевогоЛиста = ?(мСрокДействияПутевогоЛиста <> Неопределено, мСрокДействияПутевогоЛиста, 0);
		
		НовДокПЛ.ДействителенДо = КонецДня(НовДокПЛ.Дата + мСрокДействияПутевогоЛиста * 3600 * 24 + 1);
		
		// сброс начальных показаний спидометра, если предыдущий ПЛ не рассчитан
		ПредПЛ_номер = Неопределено;
		ПредПЛ_дата = Неопределено;
		Если уатОбщегоНазначения.ПредыдущийПЛНеРассчитан(НовДокПЛ.ТранспортноеСредство, НовДокПЛ.ДатаВыезда, ПредПЛ_номер, ПредПЛ_дата, НовДокПЛ.Ссылка) Тогда
			НовДокПЛ.СпидометрВыезда = 0;
			Для Каждого ТекСтрокаРасходГСМ Из НовДокПЛ.РасходГСМ Цикл
				Если ТекСтрокаРасходГСМ.ТС = НовДокПЛ.ТранспортноеСредство Тогда
					ТекСтрокаРасходГСМ.ОстатокПриВыезде = 0;
					ТекСтрокаРасходГСМ.РасходПоФакту = ТекСтрокаРасходГСМ.ОстатокПриВыезде - ТекСтрокаРасходГСМ.ОстатокПриВозвращении
					+ ТекСтрокаРасходГСМ.Выдано - ТекСтрокаРасходГСМ.Сдано;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
		ОснРежРаботыТС = НовДокПЛ.ТранспортноеСредство.ОсновнойРежимРаботы;
		Если ЗначениеЗаполнено(ОснРежРаботыТС) Тогда
			НовДокПЛ.РежимРаботыТС = ОснРежРаботыТС;
		КонецЕсли;
		ПодразделениеТС = НовДокПЛ.ТранспортноеСредство.Подразделение;
		Если НовДокПЛ.Подразделение <> ПодразделениеТС Тогда
			НовДокПЛ.Подразделение = ПодразделениеТС;
		КонецЕсли;

		Если ПолучитьФункциональнуюОпцию("уатИспользоватьЖурналыТранспортныхДокументов") Тогда
			НовДокПЛ.Журнал = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек,
				ПланыВидовХарактеристик.уатПраваИНастройки.ОсновнойЖурналУчетаДвиженияПутевыхЛистов);
		КонецЕсли;
		
		ЕстьОшибкиЗаполнения = Не НовДокПЛ.ПроверитьЗаполнение();
		
		ТекстОшибкиЗаполнения = "";
		Если ЕстьОшибкиЗаполнения Тогда 
			МассивОшибок = ПолучитьСообщенияПользователю(Истина);
			Для Каждого ТекОшибка Из МассивОшибок Цикл 
				ТекстОшибкиЗаполнения = ТекстОшибкиЗаполнения + ?(ТекстОшибкиЗаполнения="","","; ") + ТекОшибка.Текст;
			КонецЦикла;
		КонецЕсли;
		
		Если ЕстьОшибкиЗаполнения Тогда 
			РежимЗаписиПЛ = РежимЗаписиДокумента.Запись;
		Иначе 
			РежимЗаписиПЛ = РежимЗаписиДокумента.Проведение;
		КонецЕсли;

		уатПутевыеЛисты.ЗаполнитьЗаданиеПоДаннымМЛ(НовДокПЛ, НовДок.Ссылка);
		Попытка 
			НовДокПЛ.Записать(РежимЗаписиПЛ);
		Исключение
			ТекстОшибкиЗаписи = ОписаниеОшибки();
			Попытка
				НовДокПЛ.Записать(РежимЗаписиДокумента.Запись);
			Исключение
			КонецПопытки;
		КонецПопытки;
		МассивСозданныхПЛ.Добавить(НовДокПЛ.Ссылка);
		мсвПутевыеЛисты.Добавить(НовДокПЛ.Ссылка);
	КонецЕсли;
	
	МассивТС = Новый Массив();
	МассивТС.Добавить(НовДок.ТС);
	ОчиститьПараметрыСтрокиТС(ТекСтрокаТС);
	ОбновитьСписокТССервер(МассивТС, МассивСозданныхМЛ);
	
	Если НЕ ТекстОшибкиЗаполнения = "" 
		ИЛИ НЕ ТекстОшибкиЗаписи = "" Тогда 
		РезТекстОшибки = НСтр("en='While creating routing list';ru='При создании маршрутного листа'") + " " 
		+ НСтр("en='errors occured:';ru='возникли ошибки:'") + " "
		+ ТекстОшибкиЗаполнения + ?(Не ТекстОшибкиЗаполнения = "" И Не ТекстОшибкиЗаписи = "","; ","")
		+ ТекстОшибкиЗаписи + Символы.ПС 
		+ НСтр("en='Document recorded without posting.';ru='Документ записан без проведения.'");
		ПараметрыТекстОшибки = Новый Массив();
		ПараметрыТекстОшибки.Добавить(РезТекстОшибки);
		МассивОшибокСозданияМЛ.Добавить(
		Новый Структура(
		"Группа, Критичность, КодОшибки, Объект, Параметры",
		"Маршрутные листы",
		?(ТекстОшибкиЗаписи = "", "Предупреждение", "Ошибка"),
		"Ошибка_32",
		НовДок.Ссылка, ПараметрыТекстОшибки)
		);
	КонецЕсли;
		
	Элементы.МаршрутыСписокМЛ.Обновить();
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьТСвМЛсервер(СтрокаЗаказ, СтрокаТС, МассивОшибокСозданияМЛ, МассивПЛ = Неопределено)
	
	Если ТипЗнч(СтрокаТС) = Тип("Число") Тогда
		ТекСтрокаТС = МаршрутыСписок.НайтиПоИдентификатору(СтрокаТС);
	ИначеЕсли ТипЗнч(СтрокаТС) = Тип("ДокументСсылка.уатМаршрутныйЛист") Тогда
		ТекСтрокаТС = Элементы.МаршрутыСписок.ТекущаяСтрока;
		ТекСтрокаТС = МаршрутыСписок.НайтиПоИдентификатору(ТекСтрокаТС);
	Иначе
		ТекСтрокаТС = СтрокаТС;
	КонецЕсли;
	
	Если ТипЗнч(СтрокаЗаказ) <> Тип("ДокументСсылка.уатМаршрутныйЛист") Тогда
		Возврат;
	КонецЕсли;
	
	НовДок = СтрокаЗаказ.ПолучитьОбъект();
	Если НовДок.ТС = ТекСтрокаТС.ТС
		И НовДок.Прицеп1 = ТекСтрокаТС.Прицеп1
		И НовДок.Прицеп2 = ТекСтрокаТС.Прицеп2 Тогда 
		Возврат;
	КонецЕсли;

	НовДок.ТС      = ТекСтрокаТС.ТС;
	НовДок.ПринадлежностьПеревозки = ТекСтрокаТС.ПринадлежностьТС;
	НовДок.Прицеп1 = ТекСтрокаТС.Прицеп1;
	НовДок.Прицеп2 = ТекСтрокаТС.Прицеп2;
		
	Если ЗначениеЗаполнено(ТекСтрокаТС.ТС) Тогда 
		Если ТекСтрокаТС.ПринадлежностьТС = Перечисления.уатПринадлежностьТС.Собственное Тогда
			ВладелецТС = уатОбщегоНазначения.МестонахождениеТС(ТекСтрокаТС.ТС, НовДок.Дата, Ложь).Организация;
			Договор = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
			Если Не ЗначениеЗаполнено(ВладелецТС) Тогда
				ВладелецТС = ТекСтрокаТС.ТС.Организация;
			КонецЕсли;
			
			СтруктураЭкипаж = уатЗащищенныеФункцииСервер.ЭкипажТСсУчетомГрафика(ТекСтрокаТС.ТС, НовДок.Дата, НовДок.Организация);
			НовДок.Водитель1 = СтруктураЭкипаж.Водитель;
			Если ЗначениеЗаполнено(НовДок.Водитель1) Тогда
				НовДок.Водитель2  = СтруктураЭкипаж.Водитель2;
			Иначе
				НовДок.Водитель1  = СтруктураЭкипаж.Водитель2;
			КонецЕсли;
			
		ИначеЕсли ТекСтрокаТС.ПринадлежностьТС = Перечисления.уатПринадлежностьТС.Привлеченное Тогда
			ВладелецТС = ТекСтрокаТС.ТС.ВладелецТС;
			СписокДоговоров = Новый СписокЗначений;
			СписокДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
			СтрПараметров = Новый Структура("СписокДопустимыхВидовДоговоров", СписокДоговоров);
			Договор = уатОбщегоНазначенияТиповыеСервер.уатПолучитьДоговорПоОрганизацииИКонтрагенту(НовДок.Организация, ВладелецТС, СтрПараметров);
			НовДок.Водитель1 = ТекСтрокаТС.ТС.Водитель;
		Иначе
			ВладелецТС       = Неопределено;
			Договор          = Неопределено;
			НовДок.Водитель1 = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	Если ТекСтрокаТС.ПринадлежностьТС = Перечисления.уатПринадлежностьТС.Виртуальное Тогда 
		НовДок.Контрагент         = Справочники.Организации.ПустаяСсылка();
		НовДок.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
	Иначе 
		НовДок.Контрагент         = ВладелецТС;
		НовДок.ДоговорКонтрагента = Договор;
	КонецЕсли;
	
	НовДок.Прицеп1 = ТекСтрокаТС.Прицеп1;
	НовДок.Прицеп2 = ТекСтрокаТС.Прицеп2;
	
	Документы.уатМаршрутныйЛист.УстановитьФлагФормироватьУведомленияОбОпозданияхВРейсе(НовДок);
	Документы.уатМаршрутныйЛист.УстановитьФлагРазрешенаВыгрузкаВWMS(НовДок);
	НовДок.РассчитатьИтоговыеПоказатели();
	НовДок.АвтоматическийРасчетИтогов();
	ЕстьОшибкиЗаполнения = Не НовДок.ПроверитьЗаполнение();
	
	ТекстОшибкиЗаполнения = "";
	Если ЕстьОшибкиЗаполнения Тогда 
		МассивОшибок = ПолучитьСообщенияПользователю(Истина);
		Для Каждого ТекОшибка Из МассивОшибок Цикл 
			ТекстОшибкиЗаполнения = ТекстОшибкиЗаполнения + ?(ТекстОшибкиЗаполнения="","","; ") + ТекОшибка.Текст;
		КонецЦикла;
	КонецЕсли;
	
	Если ЕстьОшибкиЗаполнения Тогда 
		РежимЗаписиМЛ = РежимЗаписиДокумента.Запись;
	Иначе 
		РежимЗаписиМЛ = РежимЗаписиДокумента.Проведение;
	КонецЕсли;
	
	ТекстОшибкиЗаписи = "";
	
	Попытка
		НовДок.ДополнительныеСвойства.Вставить("НастройкаНеРассчитыватьВыработку", НастройкаНеРассчитыватьВыработку);
		НовДок.Записать(РежимЗаписиМЛ);
	Исключение
		ТекстОшибкиЗаписи = ОписаниеОшибки();
		НовДок.Записать(РежимЗаписиДокумента.Запись);
	КонецПопытки;
	
	Если НЕ ТекстОшибкиЗаполнения = "" 
		ИЛИ НЕ ТекстОшибкиЗаписи = "" Тогда 
		РезТекстОшибки = НСтр("en='While creating routing list';ru='При создании маршрутного листа'") + " " 
		+ НСтр("en='errors occured:';ru='возникли ошибки:'") + " "
		+ ТекстОшибкиЗаполнения + ?(Не ТекстОшибкиЗаполнения = "" И Не ТекстОшибкиЗаписи = "","; ","")
		+ ТекстОшибкиЗаписи + Символы.ПС 
		+ НСтр("en='Document recorded without posting.';ru='Документ записан без проведения.'");
		ПараметрыТекстОшибки = Новый Массив();
		ПараметрыТекстОшибки.Добавить(РезТекстОшибки);
		МассивОшибокСозданияМЛ.Добавить(
		Новый Структура(
		"Группа, Критичность, КодОшибки, Объект, Параметры",
		"Маршрутные листы",
		?(ТекстОшибкиЗаписи = "", "Предупреждение", "Ошибка"),
		"Ошибка_32",
		НовДок.Ссылка, ПараметрыТекстОшибки)
		);
	КонецЕсли;
	Элементы.МаршрутыСписокМЛ.Обновить();
	
	Если НЕ ЗначениеЗаполнено(НовДок.Ссылка) 
		И МассивПЛ <> Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	уатАРМ.ПолучитьСвязанныеПЛ(НовДок.Ссылка, МассивПЛ);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьТСвМЛ(СтрокаЗаказ, СтрокаТС)
	
	МассивОшибокСозданияМЛ = Новый Массив();
	МассивПЛ               = Новый Массив();
	
	ОбновитьТСвМЛсервер(СтрокаЗаказ, СтрокаТС, МассивОшибокСозданияМЛ, МассивПЛ); 
	Если МассивОшибокСозданияМЛ.Количество() Тогда 
		ПараметрыОткрытия = Новый Структура();
		ПараметрыОткрытия.Вставить("МассивОшибок", МассивОшибокСозданияМЛ);
		ПараметрыОткрытия.Вставить("Пояснение",    НСтр("en='Errors occured while creating of routing lists:';ru='При создании маршрутных листов возникли ошибки:'"));
		ПараметрыОткрытия.Вставить("Режим",        "Ошибка");
		ОткрытьФорму("ОбщаяФорма.уатАРМФормаОшибок", ПараметрыОткрытия, ЭтотОбъект);
	КонецЕсли;
	
	Если МассивПЛ.Количество() <> 0 Тогда
		ТекстВопроса = НСтр("ru = 'Обнаружены связанные документы ""Путевой лист"":'") + Символы.ПС;
		Для Каждого ТекСтрока Из МассивПЛ Цикл
			ТекстВопроса = ТекстВопроса + ТекСтрока + Символы.ПС;
		КонецЦикла;
		ТекстВопроса = ТекстВопроса + НСтр("ru = 'Обновить ТС и водителя в ПЛ?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ТСВМЛПриИзмененииВопрос", ЭтотОбъект, МассивПЛ),
			ТекстВопроса, РежимДиалогаВопрос.ДаНет)
	Иначе
		ОбновитьСписокТС(Неопределено);
		ОбновитьСписокЗаказов();
		ОбновитьПланировщик();
		ПодключитьОбработчикОжидания("Подключаемый_ОтобразитьДанныеНаКарте", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТСВМЛПриИзмененииВопрос(Результат, МассивПЛ) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОбновитьТСвПЛсервер(МассивПЛ);
	КонецЕсли;
	
	ОбновитьСписокТС(Неопределено);
	ОбновитьСписокЗаказов();
	ОбновитьПланировщик();
	ПодключитьОбработчикОжидания("Подключаемый_ОтобразитьДанныеНаКарте", 0.1, Истина);

КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОбновитьТСвПЛсервер(МассивПЛ)
	
	уатАРМ.ОбновитьТСвПЛсервер(МассивПЛ);

КонецПроцедуры

&НаКлиенте
Процедура СоздатьМЛ(СтрокаЗаказ, СтрокаТС)
	
	МассивОшибокСозданияМЛ = Новый Массив();
	мсвМаршрутныеЛисты     = Новый Массив();
	мсвПутевыеЛисты        = Новый Массив();
	
	СоздатьМЛсервер(СтрокаЗаказ, СтрокаТС, МассивСозданныхМЛ, МассивСозданныхПЛ,
		МассивОшибокСозданияМЛ, мсвМаршрутныеЛисты, мсвПутевыеЛисты); 
	Если МассивОшибокСозданияМЛ.Количество() Тогда 
		ПараметрыОткрытия = Новый Структура();
		ПараметрыОткрытия.Вставить("МассивОшибок", МассивОшибокСозданияМЛ);
		ПараметрыОткрытия.Вставить("Пояснение",    НСтр("en='Errors occured while creating of routing lists:';ru='При создании маршрутных листов возникли ошибки:'"));
		ПараметрыОткрытия.Вставить("Режим",        "Ошибка");
		ОткрытьФорму("ОбщаяФорма.уатАРМФормаОшибок", ПараметрыОткрытия, ЭтотОбъект);
	КонецЕсли;
	ОбновитьСписокЗаказов();
	
	мсвДокументыДляПечати = Новый Массив;
	Для Каждого ТекМЛ Из мсвМаршрутныеЛисты Цикл
		Если НастройкаОткрыватьФормыДокументов Тогда
			ПоказатьЗначение(, ТекМЛ);
		КонецЕсли;
		
		Для Сч = 1 По НастройкаКопийПечатныхФормМЛ Цикл
			мсвДокументыДляПечати.Добавить(ТекМЛ)
		КонецЦикла;
	КонецЦикла;
	
	Если НастройкаПечататьМаршрутныеЛисты 
		И НастройкаКопийПечатныхФормМЛ > 0 И ЗначениеЗаполнено(НастройкаПечатнаяФормаМЛ) Тогда
		Если НастройкаПечатнаяФормаМЛ = "Маршрутный лист" Тогда
			ИмяПечФормы = "МаршрутныйЛист";
		Иначе
			ИмяПечФормы = "МаршрутныйЛистСЗаказами";
		КонецЕсли;
		Если НастройкаПечататьСразуНаПринтер Тогда
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечатиНаПринтер("Документ.уатМаршрутныйЛист", ИмяПечФормы, мсвДокументыДляПечати, Неопределено);
		Иначе
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.уатМаршрутныйЛист", ИмяПечФормы, мсвДокументыДляПечати, Неопределено);
		КонецЕсли;
	КонецЕсли;
	
	мсвДокументыДляПечати = Новый Массив;
	Для Каждого ТекПЛ Из мсвПутевыеЛисты Цикл
		Если НастройкаОткрыватьФормыДокументов Тогда
			ПоказатьЗначение(, ТекПЛ);
		КонецЕсли;
		
		Для Сч = 1 По НастройкаКопийПечатныхФормПЛ Цикл
			мсвДокументыДляПечати.Добавить(ТекПЛ)
		КонецЦикла;
	КонецЦикла;

	Если НастройкаПечататьПЛ 
		И НастройкаКопийПечатныхФормПЛ > 0 И ЗначениеЗаполнено(НастройкаПечатнаяФормаПЛ) Тогда
		ИмяПечФормы = НастройкаПечатнаяФормаПЛ;
		Если НастройкаПечататьСразуНаПринтер Тогда
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечатиНаПринтер("Документ.уатПутевойЛист", ИмяПечФормы, мсвДокументыДляПечати, Неопределено);
		Иначе
			УправлениеПечатьюКлиент.ВыполнитьКомандуПечати("Документ.уатПутевойЛист", ИмяПечФормы, мсвДокументыДляПечати, Неопределено);
		КонецЕсли;
	КонецЕсли;
	
	ТолькоСозданныеМЛОтбор();
	ТолькоСозданныеПЛОтбор();
	ОбновитьПланировщик();
	ПодключитьОбработчикОжидания("Подключаемый_ОтобразитьДанныеНаКарте", 0.1, Истина);

КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЦветДокументаПоКоллекции(Знач ИндексЦвета)
	
	Возврат уатАРМ.ПолучитьЦветДокументаПоКоллекции(ИндексЦвета);
	
КонецФункции

&НаКлиенте
Процедура ОбновитьПланировщик()
	
	Если ФормаПланировщика = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ФормаПланировщика.ПланировщикОткрыт Тогда
		
		МассивТС = Новый Массив();
		ПредТС   = Неопределено;
		СтруктураПолей = "УровеньДерева, Группировка, МЛ, ПринадлежностьТС,
				|ВесБрутто,Объем,Этап,ВремяПрибытияВПункт,УбытиеПлан,
				|GUID,СобственноеТС,КоличествоВиртуальныхТС,ТС,Прицеп1,Прицеп2,
				|Модифицированность,ЭтапМаршрутизации,ВремяПрибытияВПункт,МассивМЛ";
		Для Каждого ТекСтрока Из МаршрутыСписок Цикл
			СтруктураТС = Новый Структура(СтруктураПолей);
			ЗаполнитьЗначенияСвойств(СтруктураТС, ТекСтрока);
			СтруктураТС.УровеньДерева = "ТС";
			СтруктураТС.Группировка   = ТекСтрока.ТС;
			СтруктураТС.МассивМЛ      = Новый Массив();
			МассивТС.Добавить(СтруктураТС);
		КонецЦикла;
		
		Оповестить("ОбновитьДанныеПланировщика", МассивТС, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВыделитьТСНаПланировщике(ТекТС)
	
	Если ФормаПланировщика = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекТС = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ТипЗнч(ТекТС) = Тип("Строка") Тогда
		Если ФормаПланировщика.ПланировщикОткрыт Тогда
			ФормаПланировщика.ТекТС = ТекТС;
			Оповестить("ВыделитьТСНаПланировщике", ТекТС, ЭтотОбъект);
		КонецЕсли;
		Возврат;
	КонецЕсли;
	
	Если ФормаПланировщика.ПланировщикОткрыт Тогда
		ФормаПланировщика.ТекТС = ТекТС;
		Оповестить("ВыделитьТСНаПланировщике", ТекТС, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТолькоВыполненныеМЛОтбор()
	Если НастройкаОтображатьТолькоНЕВыполненныеМЛ Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокМЛ.Отбор, "Выполнен", Ложь,,, Истина);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокМЛ.Отбор, "Выполнен", Ложь,,, Ложь);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТолькоВыполненныеПЛОтбор()
	Если НастройкаОтображатьТолькоНЕВыполненныеПЛ Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокПЛ.Отбор, "Рассчитан", Ложь,,, Истина);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокПЛ.Отбор, "Рассчитан", Ложь,,, Ложь);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТолькоСозданныеМЛОтбор()
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокМЛ, "МассивСозданныхМЛ",	         МассивСозданныхМЛ);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокМЛ, "НастройкаТолькоСозданныеМЛ",	 НастройкаТолькоСозданныеМЛ);
КонецПроцедуры

&НаКлиенте
Процедура НастройкаТолькоВыбранныеТСМЛОтбор()
	МассивТС = Новый Массив();
	Для Каждого ТекСтрока Из МаршрутыСписок Цикл
		МассивТС.Добавить(ТекСтрока.ТС);
	КонецЦикла;
	
	Если НастройкаТолькоВыбранныеТСМЛ Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокМЛ.Отбор, "ТС", МассивТС, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокМЛ.Отбор, "ТС", МассивТС, ВидСравненияКомпоновкиДанных.ВСписке,, Ложь);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НастройкаТолькоВыбранныеТСПЛОтбор()
	МассивТС = Новый Массив();
	Для Каждого ТекСтрока Из МаршрутыСписок Цикл
		МассивТС.Добавить(ТекСтрока.ТС);
	КонецЦикла;
	
	Если НастройкаТолькоВыбранныеТСПЛ Тогда
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокПЛ.Отбор, "ТранспортноеСредство", МассивТС, ВидСравненияКомпоновкиДанных.ВСписке,, Истина);
	Иначе
		ОбщегоНазначенияКлиентСервер.УстановитьЭлементОтбора(СписокПЛ.Отбор, "ТранспортноеСредство", МассивТС, ВидСравненияКомпоновкиДанных.ВСписке,, Ложь);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТолькоСозданныеПЛОтбор()
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокПЛ, "МассивСозданныхПЛ",	         МассивСозданныхПЛ);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(СписокПЛ, "НастройкаТолькоСозданныеПЛ",	 НастройкаТолькоСозданныеПЛ);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПодборТСпоЗаказу(ТекСтрокаЗаказа)
	
	СтрокиДляПодбора = Новый Массив();
	
	МассивЗаказов = Новый Массив();
	МассивЗаказов.Добавить(ТекСтрокаЗаказа.Ссылка);
	
	СтрокиДляПодбора.Добавить(ТекСтрокаЗаказа);
	
	Если СтрокиДляПодбора.Количество() = 0 Тогда 
		Возврат;
	КонецЕсли;
	
	МаршрутыТаблица = МаршрутыСписок;
	ЗаказыСписокСтрокаДляПодбора = СтрокиДляПодбора[0];
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("Заказ",               ЗаказыСписокСтрокаДляПодбора.Ссылка);
	ПараметрыФормы.Вставить("КоличествоЗаказов",   СтрокиДляПодбора.Количество());
	ПараметрыФормы.Вставить("МножественныйПодбор", Ложь);
	ПараметрыФормы.Вставить("АРМДиспетчера",       Истина);
	ПараметрыФормы.Вставить("ТС",                  Новый Массив());
	ПараметрыФормы.Вставить("ТекущееТС",           Неопределено);
	ПараметрыФормы.Вставить("ЛатОтправления",      ЗаказыСписокСтрокаДляПодбора.ЛатОтправления);
	ПараметрыФормы.Вставить("ЛонОтправления",      ЗаказыСписокСтрокаДляПодбора.ЛонОтправления);
	ПараметрыФормы.Вставить("ОтправлениеПо",       ЗаказыСписокСтрокаДляПодбора.ОтправлениеПо);
	ПараметрыФормы.Вставить("ТипКартографии",      ТипКартографии);
	ПараметрыФормы.Вставить("ТекОрганизация",      ТекОрганизация);
	ПараметрыФормы.Вставить("НастройкаВремяАктуальностиКоординат", НастройкаВремяАктуальностиКоординат);
	
	Для Каждого ТекСтрокаТС Из МаршрутыТаблица Цикл 
		
		стрУзелТС = Новый Структура();
		стрУзелТС.Вставить("Ссылка",                          ТекСтрокаТС.ТС);
		стрУзелТС.Вставить("Представление",                   ТекСтрокаТС.ТСПредставление);
		стрУзелТС.Вставить("Прицеп1",                         ТекСтрокаТС.Прицеп1);
		стрУзелТС.Вставить("Прицеп2",                         ТекСтрокаТС.Прицеп2);
		стрУзелТС.Вставить("ВесПредставление",                ТекСтрокаТС.ВесПредставление);
		стрУзелТС.Вставить("ОбъемПредставление",              ТекСтрокаТС.ОбъемПредставление);
		стрУзелТС.Вставить("КоличествоУпаковокПредставление", ТекСтрокаТС.КоличествоУпаковокПредставление);
		стрУзелТС.Вставить("НаправлениеПеревозки",            ТекСтрокаТС.НаправлениеПеревозки);
		стрУзелТС.Вставить("ГрузоподъемностьСцепки",          0);
		стрУзелТС.Вставить("Вес",                             ТекСтрокаТС.ВесБрутто);
		стрУзелТС.Вставить("ОбъемСцепки",                     0);
		стрУзелТС.Вставить("Объем",                           ТекСтрокаТС.Объем);
		стрУзелТС.Вставить("МаксимальноеКоличествоУпаковок",  0);
		стрУзелТС.Вставить("КоличествоУпаковок",              ТекСтрокаТС.КолМест);
		стрУзелТС.Вставить("КоличествоУпаковок",              ТекСтрокаТС.ВидПеревозки);
		
		ДанныеМЛ = Новый Структура();
		ДанныеМЛ.Вставить("Группировка",                    Неопределено);
		ДанныеМЛ.Вставить("Прицеп1",                        Неопределено);
		ДанныеМЛ.Вставить("Прицеп2",                        Неопределено);
		ДанныеМЛ.Вставить("ДатаПланирования",               ДатаПланирования);
		ДанныеМЛ.Вставить("НастройкаОрганизацияМЛИсточник", НастройкаОрганизацияМЛИсточник);
		ДанныеМЛ.Вставить("НастройкаОрганизацияМЛ",         НастройкаОрганизацияМЛ);
		ДанныеМЛ.Вставить("ДатаИВремяПрибытияВПункт",       '00010101');
		ДанныеМЛ.Вставить("Строки",                         Новый Массив());
		ДанныеМЛ.Вставить("ЕстьМаршрутныйЛист",             Ложь);
		
		стрУзелТС.Вставить("ДанныеМЛ", ДанныеМЛ);
		
		ПараметрыФормы.ТС.Добавить(стрУзелТС);
	КонецЦикла;
	
	ДопПараметры = Новый Структура("СтрокаЗаказа", ЗаказыСписокСтрокаДляПодбора);
	Оповещение = Новый ОписаниеОповещения("ВыполнитьПодборТСпоЗаказуПослеЗакрытияФормыНазначения", ЭтотОбъект, ДопПараметры);
	ОткрытьФорму("ОбщаяФорма.уатАРМФормаНазначенияЗаказаНаТС", ПараметрыФормы, ЭтотОбъект,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПодборТСпоЗаказуПослеЗакрытияФормыНазначения(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда 
		Возврат;
	КонецЕсли;

	СтрокаТС = Неопределено;
	
	Для Каждого ТекСтрокаТС Из МаршрутыСписок Цикл 
		Если ТекСтрокаТС.ТС = РезультатЗакрытия.ТС Тогда 
			СтрокаТС = ТекСтрокаТС;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если СтрокаТС = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Элементы.МаршрутыСписок.ТекущаяСтрока = СтрокаТС.ПолучитьИдентификатор();
	
	СтрокаЗаказа = ДополнительныеПараметры.СтрокаЗаказа;
	МассивОшибокСозданияМЛ = Новый Массив();
	
	СоздатьМЛ(СтрокаЗаказа.Ссылка, СтрокаТС.ПолучитьИдентификатор());

КонецПроцедуры

&НаКлиенте
Процедура ПодобратьТСпоМаршрутномуЛистуЗаписьДокументаСписок(РезультатВопроса, ДополнительныеПараметры)
	
	Если Не РезультатВопроса = КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;
	
	ТекСтрокаМЛ = Элементы.МаршрутыСписокМЛ.ТекущиеДанные;
	
	ДопПараметры = Новый Структура("МЛ, ТС", ТекСтрокаМЛ.Ссылка, ТекСтрокаМЛ.ТС);
	ВыполнитьПодборТСпоМаршрутномуЛисту(ДопПараметры);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПодборТСпоМаршрутномуЛисту(ДопПараметры)
	
	ТекСтрокаТС = Элементы.МаршрутыСписок.ТекущиеДанные;
		
	ТекТС = ДопПараметры.ТС;
	ТекМЛ = ДопПараметры.МЛ;
	
	МЛАдресОтправления = ЗначениеРеквизитаОбъекта(ТекМЛ, "АдресОтправления");
	Если ТипЗнч(МЛАдресОтправления) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда
		ЛатОтправления = ЗначениеРеквизитаОбъекта(МЛАдресОтправления, "Лат");
	Иначе
		ЛатОтправления = 0;
	КонецЕсли;
	Если ТипЗнч(МЛАдресОтправления) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда
		ЛонОтправления = ЗначениеРеквизитаОбъекта(МЛАдресОтправления, "Лон");
	Иначе
		ЛонОтправления = 0;
	КонецЕсли;
	
	МЛОтправлениеПо = ЗначениеРеквизитаОбъекта(ТекМЛ, "ДатаИВремяОтправления");
	Если МЛОтправлениеПо = '00010101' Тогда
		МЛОтправлениеПо = ЗначениеРеквизитаОбъекта(ТекМЛ, "ДатаИВремяОтправленияПлан");
	КонецЕсли;
	 
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("МаршрутныйЛист", ТекМЛ);
	ПараметрыФормы.Вставить("ТС",             Новый Массив());
	ПараметрыФормы.Вставить("ТекущееТС",      ТекТС);
	ПараметрыФормы.Вставить("ЛатОтправления", ЛатОтправления);
	ПараметрыФормы.Вставить("ЛонОтправления", ЛонОтправления);
	ПараметрыФормы.Вставить("ОтправлениеПо",  МЛОтправлениеПо);
	ПараметрыФормы.Вставить("ТипКартографии", ТипКартографии);
	ПараметрыФормы.Вставить("ТекОрганизация", ТекОрганизация);
	ПараметрыФормы.Вставить("НастройкаВремяАктуальностиКоординат", НастройкаВремяАктуальностиКоординат);
	ПараметрыФормы.Вставить("АРМДиспетчера",  Истина);
	Для Каждого ТекСтрокаДерева Из МаршрутыСписок Цикл 
		стрУзелТС = Новый Структура();
		стрУзелТС.Вставить("Ссылка",                          ТекСтрокаДерева.ТС);
		стрУзелТС.Вставить("Представление",                   ТекСтрокаДерева.ТСПредставление);
		стрУзелТС.Вставить("Прицеп1",                         ТекСтрокаДерева.Прицеп1);
		стрУзелТС.Вставить("Прицеп2",                         ТекСтрокаДерева.Прицеп2);
		стрУзелТС.Вставить("ВесПредставление",                ТекСтрокаДерева.ВесПредставление);
		стрУзелТС.Вставить("ОбъемПредставление",              ТекСтрокаДерева.ОбъемПредставление);
		стрУзелТС.Вставить("КоличествоУпаковокПредставление", ТекСтрокаДерева.КоличествоУпаковокПредставление);
		стрУзелТС.Вставить("НаправлениеПеревозки",            ТекСтрокаДерева.НаправлениеПеревозки);
		стрУзелТС.Вставить("ГрузоподъемностьСцепки",          0);
		стрУзелТС.Вставить("Вес",                             ТекСтрокаТС.ВесБрутто);
		стрУзелТС.Вставить("ОбъемСцепки",                     0);
		стрУзелТС.Вставить("Объем",                           ТекСтрокаТС.Объем);
		стрУзелТС.Вставить("МаксимальноеКоличествоУпаковок",  0);
		стрУзелТС.Вставить("КоличествоУпаковок",              ТекСтрокаТС.КолМест);
		
		ДанныеМЛ = Новый Структура("Группировка,Прицеп1,Прицеп2,ДатаПланирования,НастройкаОрганизацияМЛИсточник,НастройкаОрганизацияМЛ,ДатаИВремяПрибытияВПункт,Строки",
		Неопределено,
		Неопределено,
		Неопределено,
		ДатаПланирования,
		НастройкаОрганизацияМЛИсточник,
		НастройкаОрганизацияМЛ,
		'00010101',
		Новый Массив());
		
		стрУзелТС.Вставить("ДанныеМЛ", ДанныеМЛ);
		
		ПараметрыФормы.ТС.Добавить(стрУзелТС);
	КонецЦикла;
	
	Оповещение = Новый ОписаниеОповещения("ВыполнитьПодборТСпоМаршрутномуЛистуПослеЗакрытияФормыНазначения", ЭтотОбъект, Новый Структура("СтрокаЗаказа", ТекСтрокаТС));
	ОткрытьФорму("ОбщаяФорма.уатАРМФормаНазначенияЗаказаНаТС", ПараметрыФормы, ЭтотОбъект,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьПодборТСпоМаршрутномуЛистуПослеЗакрытияФормыНазначения(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ОбновитьСписокТС(Неопределено);
	
	СтрокиТС = МаршрутыСписок.НайтиСтроки(Новый Структура("ТС", РезультатЗакрытия.ТС));
	Если СтрокиТС.Количество() <> 0 Тогда
		Элементы.МаршрутыСписок.ТекущаяСтрока = СтрокиТС[0].ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьТСЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("СправочникСсылка.уатТС") Тогда
		МассивТС = Новый Массив();
		
		СтрокаМЛ = МаршрутыСписок.НайтиСтроки(Новый Структура("ТС", Результат));
		Если СтрокаМЛ.Количество() <> 0 Тогда
			МассивТС.Добавить(СтрокаМЛ[0].ТС);
			ОчиститьПараметрыСтрокиТС(СтрокаМЛ[0]);
		Иначе
			МассивТС.Добавить(Результат);
		КонецЕсли;
		
		ОбновитьСписокТССервер(МассивТС, МассивСозданныхМЛ,, Истина);
		
		ОбновитьПланировщик();
		ПодключитьОбработчикОжидания("Подключаемый_ОтобразитьДанныеНаКарте", 0.1, Истина);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТСпоЗонеОтбораЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = Неопределено тогда
		Возврат;
	КонецЕсли;
	
	МаршрутыСписок.Очистить();
	СоответсвиеПрицепов = Новый Соответствие;

	ТСпоЗонеОтбораЗаполнениеСервер(Результат, МассивСозданныхМЛ);
	ПодключитьОбработчикОжидания("Подключаемый_ОтобразитьДанныеНаКарте", 0.1, Истина);
	ОбновитьПланировщик();

КонецПроцедуры

&НаСервере
Процедура ТСпоЗонеОтбораЗаполнениеСервер(Результат, МассивСозданныхМЛ)
	
	списЗоны = Новый СписокЗначений();
	списЗоны.Добавить(Результат);
	
	ПараметрыЗапросаТС = СтруктураПараметровДляПолученияТаблицыТС(КоэффициентГрузоподъемности, КоэффициентОбъемаКузова);
	
	Если НастройкаПроверятьНахождениеВЗонеПоФактическомуМестоположениюТС Тогда
		мсвТС = ПолучитьТаблицуТСЗакрепленыхЗаЗонами(списЗоны, ДатаПланирования, ПараметрыЗапросаТС, НастройкаВремяАктуальностиКоординат);
	Иначе
		мсвТС = ПолучитьТаблицуТСЗакрепленыхЗаЗонами(списЗоны, ДатаПланирования, ПараметрыЗапросаТС);
	КонецЕсли;
	
	МаршрутыЗаполнитьСписокТСЗавершениеСервер_Список(мсвТС, МассивСозданныхМЛ);
	
КонецПроцедуры

&НаКлиенте
Процедура ПолучитьПунктыВЗонахОтбораКлиент()
		
	// Получение параметров отбора по зонам
	ПолучитьПунктыВЗонахОтбораСервер();
	
КонецПроцедуры

&НаСервере
Процедура ПолучитьПунктыВЗонахОтбораСервер()
	
	// получение параметров отбора по зонам
	СписокАдресовВЗонах = Новый Массив;
	ФлагИспользования   = Ложь;
	
	ОтборЗоныЭлементы = ОтборЗоны.ПолучитьЭлементы();
	Для Каждого ТекСтрока Из ОтборЗоныЭлементы Цикл
		Если ТекСтрока.Использование <> 0 Тогда 
			ОбновитьАдресНастройкиКомпоновкиДанных();
			СписокАдресовВЗонах = ПолучитьПунктыВЗонахОтбора(ОтборЗоны, АдресСхемыКомпоновкиДанных,
				АдресНастройкиКомпоновкиДанных);
			ФлагИспользования = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	ОтборСписка = ЗаказыСписок.Отбор.Элементы;
	
	Если ПроверкаПунктаОтправленияВЗоне
		И ПроверкаПунктаНазначенияВЗоне 
		И ФлагИспользования Тогда
		ГруппаЭлементовОтбора = ОтборСписка.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
		ГруппаЭлементовОтбора.ТипГруппы        = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
		ГруппаЭлементовОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		ОтборСписка = ГруппаЭлементовОтбора.Элементы;
	КонецЕсли;
		
	Если ПроверкаПунктаОтправленияВЗоне 
		И ФлагИспользования Тогда
		
		ЭлементОтбора = ОтборСписка.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение      = Новый ПолеКомпоновкиДанных("АдресОтправления");
		ЭлементОтбора.ВидСравнения       = ВидСравненияКомпоновкиДанных.ВСписке;
		ЭлементОтбора.ПравоеЗначение     = СписокАдресовВЗонах;
		ЭлементОтбора.РежимОтображения   = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		
	КонецЕсли;
	
	Если ПроверкаПунктаНазначенияВЗоне 
		И ФлагИспользования Тогда
		
		ЭлементОтбора = ОтборСписка.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение      = Новый ПолеКомпоновкиДанных("АдресНазначения");
		ЭлементОтбора.ВидСравнения       = ВидСравненияКомпоновкиДанных.ВСписке;
		ЭлементОтбора.ПравоеЗначение     = СписокАдресовВЗонах;
		ЭлементОтбора.РежимОтображения   = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;

	КонецЕсли;
	
	НастройкиКомпоновкиДанных      = Элементы.ЗаказыСписок.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	АдресНастройкиКомпоновкиДанных = ПоместитьВоВременноеХранилище(НастройкиКомпоновкиДанных, Новый УникальныйИдентификатор);

КонецПроцедуры

// Процедура получает выборку пунктов назначения, входящих в указанные зоны
// 
// Параметры:
//  ТаблицаЗонДляОтбора - таблица зон для отбора
//
&НаСервереБезКонтекста
Функция ПолучитьПунктыВЗонахОтбора(ОтборЗоны, АдресСхемыКомпоновкиДанных, АдресНастройкиКомпоновкиДанных)
	
	мсвЗонДляОтбора = Новый Массив();
	
	Для Каждого ТекСтрока1 Из ОтборЗоны.ПолучитьЭлементы() Цикл
		Если Не ТекСтрока1.ЭтоГруппа И ТекСтрока1.Использование Тогда
			мсвЗонДляОтбора.Добавить(ТекСтрока1.Зона);
		КонецЕсли;
		Для Каждого ТекСтрока2 Из ТекСтрока1.ПолучитьЭлементы() Цикл
			Если Не ТекСтрока2.ЭтоГруппа И ТекСтрока2.Использование Тогда
				мсвЗонДляОтбора.Добавить(ТекСтрока2.Зона);
			КонецЕсли;
			Для Каждого ТекСтрока3 Из ТекСтрока2.ПолучитьЭлементы() Цикл
				Если Не ТекСтрока3.ЭтоГруппа И ТекСтрока3.Использование Тогда
					мсвЗонДляОтбора.Добавить(ТекСтрока3.Зона);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
	мсвТочекПринадлежащихЗонамОтбора = Новый Массив();
	
	Если мсвЗонДляОтбора.Количество() > 0 Тогда
		
		ПроцессорВывода = ПолучитьКомпоновщикСпискаЗаказовСервер(АдресСхемыКомпоновкиДанных,
		АдресНастройкиКомпоновкиДанных);
		
		мсвЗаказов = Новый Массив();
		Для Каждого ТекСтрока Из ПроцессорВывода  Цикл
			мсвЗаказов.Добавить(ТекСтрока.Ссылка);
		КонецЦИкла;
		
		мсвПунктов                       = ПолучитьКоординатыАдресовПоЗаказамГрузоотправителей(мсвЗаказов);
		мсвТочекПринадлежащихЗонамОтбора = уатОбщегоНазначения_уэ.ПолучитьПунктыВЗонахОтбора(мсвЗонДляОтбора, мсвПунктов);
		Если мсвПунктов.Количество() <> 0 Тогда
			Лат = 0; Лон = 0;
			
			Для Каждого ТекЗона Из мсвЗонДляОтбора Цикл
				мМассивХ = Новый Массив();
				мМассивУ = Новый Массив();
				
				СтруктураРеквизитовЗоны = СтруктураРеквизитовЗоны(ТекЗона);
				
				Для Каждого ТекКоордината Из СтруктураРеквизитовЗоны.Координаты Цикл
					мМассивХ.Добавить(ТекКоордината.Лат);
					мМассивУ.Добавить(ТекКоордината.Лон);
				КонецЦикла;
				
				Для Каждого ТекСтрока Из мсвПунктов Цикл
					ТекстСообщения = "";
					Лат = 0;
					Лон = 0;
					Если Не ТекСтрока.Лат = 0 И Не ТекСтрока.Лон = 0 Тогда
						Лат = ТекСтрока.Лат;
						Лон = ТекСтрока.Лон;
					КонецЕсли;
					Если Не Лат = 0 И Не Лон = 0 Тогда
						Если уатЗащищенныеФункцииСервер_уэ.уэТочкаВПолигоне(мМассивХ, мМассивУ, Лат, Лон) Тогда
							мсвТочекПринадлежащихЗонамОтбора.Добавить(ТекСтрока.Адрес);
						КонецЕсли;
					КонецЕсли;
				КонецЦикла;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат мсвТочекПринадлежащихЗонамОтбора;

	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКоординатыАдресовПоЗаказамГрузоотправителей(МассивЗаказов = Неопределено)
	
	ЗапросТочек = Новый Запрос();
	Если МассивЗаказов <> Неопределено Тогда
		ЗапросТочек.УстановитьПараметр("МассивЗаказов", МассивЗаказов);
	КонецЕсли;
	
	ЗапросТочек.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТабЗаказов.ЗаказГрузоотправителя.АдресОтправления КАК АдресОтправления,
	|	ЕСТЬNULL(ТабЗаказов.ЗаказГрузоотправителя.АдресОтправления.Лат, 0) КАК ЛатОтпр,
	|	ЕСТЬNULL(ТабЗаказов.ЗаказГрузоотправителя.АдресОтправления.Лон, 0) КАК ЛонОтпр,
	|	ТабЗаказов.ЗаказГрузоотправителя.АдресНазначения КАК АдресНазначения,
	|	ЕСТЬNULL(ТабЗаказов.ЗаказГрузоотправителя.АдресНазначения.Лат, 0) КАК ЛатНазн,
	|	ЕСТЬNULL(ТабЗаказов.ЗаказГрузоотправителя.АдресНазначения.Лон, 0) КАК ЛонНазн,
	|	ТабЗаказов.ЗаказГрузоотправителя.СтоянкаПунктОтправления КАК СтоянкаПунктОтправления,
	|	ТабЗаказов.ЗаказГрузоотправителя.СтоянкаПунктНазначения КАК СтоянкаПунктНазначения,
	|	ТабЗаказов.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя
	|ПОМЕСТИТЬ ТаблицаАдресовСКоординатами
	|ИЗ
	|	РегистрНакопления.уатЗаказыГрузоотправителей.Остатки" + ?(МассивЗаказов = Неопределено, "", "(, ЗаказГрузоотправителя В(&МассивЗаказов))") + " КАК ТабЗаказов
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ВложенныйЗапрос.Адрес КАК Адрес,
	|	ВложенныйЗапрос.Лат КАК Лат,
	|	ВложенныйЗапрос.Лон КАК Лон,
	|	ВложенныйЗапрос.Стоянка КАК Стоянка
	|ИЗ
	|	(ВЫБРАТЬ
	|		ТаблицаАдресовСКоординатами.АдресОтправления КАК Адрес,
	|		ТаблицаАдресовСКоординатами.ЛатОтпр КАК Лат,
	|		ТаблицаАдресовСКоординатами.ЛонОтпр КАК Лон,
	|		ТаблицаАдресовСКоординатами.СтоянкаПунктОтправления КАК Стоянка,
	|		ТаблицаАдресовСКоординатами.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя
	|	ИЗ
	|		ТаблицаАдресовСКоординатами КАК ТаблицаАдресовСКоординатами
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ТаблицаАдресовСКоординатами.АдресНазначения,
	|		ТаблицаАдресовСКоординатами.ЛатНазн,
	|		ТаблицаАдресовСКоординатами.ЛонНазн,
	|		ТаблицаАдресовСКоординатами.СтоянкаПунктНазначения,
	|		ТаблицаАдресовСКоординатами.ЗаказГрузоотправителя
	|	ИЗ
	|		ТаблицаАдресовСКоординатами КАК ТаблицаАдресовСКоординатами) КАК ВложенныйЗапрос
	|ГДЕ
	|	НЕ ВложенныйЗапрос.Адрес ЕСТЬ NULL";
	
	Выборка = ЗапросТочек.Выполнить().Выбрать();
	
	мсвРезультат = Новый Массив();
	
	Пока Выборка.Следующий() Цикл
		мсвРезультат.Добавить(Выборка.Адрес);
	КонецЦикла;
	
	Возврат мсвРезультат;
	
КонецФункции // ПолучитьПунктыВЗонахОтбора()

&НаСервереБезКонтекста
Функция СтруктураРеквизитовЗоны(Зона)
	
	Рез = Новый Структура("Координаты, Цвет, УникальныйИдентификатор, ЭтоГруппа");
	
	Если Зона.ЭтоГруппа Тогда 
		Рез.ЭтоГруппа = Истина;
		Возврат Рез;
	Иначе 
		Рез.ЭтоГруппа = Ложь;
	КонецЕсли;
	
	мсвКоординаты = Новый Массив;
	Для Каждого ТекКоорд Из Зона.Координаты Цикл
		мсвКоординаты.Добавить(Новый Структура("Лат, Лон", ТекКоорд.Лат, ТекКоорд.Лон));
	КонецЦикла;
	Рез.Координаты = мсвКоординаты;
	Рез.Цвет = уатЗащищенныеФункцииСервер_уэ.ПолучитьЦветЗоны(Зона);
	Рез.УникальныйИдентификатор = Зона.УникальныйИдентификатор();
	
	Возврат Рез;
	
КонецФункции

&НаКлиенте
Процедура ПереключательРежимаОтображенияПриИзменении()
	Элементы.РежимОтображенияЗаказыНаТС.Пометка = ПереключательРежимаОтображения = "ЗаказыНаТС";
	Элементы.РежимОтображенияМЛ.Пометка = ПереключательРежимаОтображения = "МаршрутныеЛисты";
	Элементы.РежимОтображенияПЛ.Пометка = ПереключательРежимаОтображения = "ПутевыеЛисты";

	Если ПереключательРежимаОтображения = "ЗаказыНаТС" Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ЗаказыНаТС;
		ПереместитьОсновнуюГруппы("ГруппаОсновнаяЗаказыНаТС");
		ПереместитьНастройки("ГруппаПанельЗаказов");
	ИначеЕсли ПереключательРежимаОтображения = "МаршрутныеЛисты" Тогда
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.МаршрутныеЛисты;
		ПереместитьОсновнуюГруппы("ГруппаОсновнаяМЛ");
		ПереместитьНастройки("ГруппаПанельМЛ");
	Иначе
		Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ПутевыеЛисты;
		ПереместитьОсновнуюГруппы("ГруппаОсновнаяПЛ");
		ПереместитьНастройки("ГруппаПанельПЛ");
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьСписокПрицеповДляПодбора(ТекстПодбора, ИсключитьТС, ДанныеВыбора)
	
	Если ДанныеВыбора = Неопределено Тогда 
		ДанныеВыбора = Новый СписокЗначений();
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ИсключитьТС",   ИсключитьТС);
	Запрос.УстановитьПараметр("СтрокаПодбора", "" + ТекстПодбора + "%");
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатТС.Ссылка КАК Ссылка,
	|	уатТС.Наименование КАК Наименование
	|ИЗ
	|	Справочник.уатТС КАК уатТС
	|ГДЕ
	|	НЕ уатТС.ЭтоГруппа
	|	И НЕ уатТС.ПометкаУдаления
	|	И НЕ уатТС.Ссылка = &ИсключитьТС
	|	И (уатТС.ВидМоделиТС = ЗНАЧЕНИЕ(Перечисление.уатВидыМоделейТС.Прицеп)
	|			ИЛИ уатТС.ВидМоделиТС = ЗНАЧЕНИЕ(Перечисление.уатВидыМоделейТС.Оборудование))
	|	И уатТС.Наименование ПОДОБНО &СтрокаПодбора";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл 
		врПозицияОтсечения = СтрДлина(ТекстПодбора);
		тПредставление = Новый ФорматированнаяСтрока(
			Новый ФорматированнаяСтрока(Лев(Выборка.Наименование, врПозицияОтсечения),, ЦветаСтиля.уатЦветТекстаПриАвтоподборе), 
			Новый ФорматированнаяСтрока(Прав(Выборка.Наименование, СтрДлина(Выборка.Наименование)-врПозицияОтсечения)));
		ДанныеВыбора.Добавить(Выборка.Ссылка, тПредставление);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПредставлениеПрицепа(Прицеп, КоэффициентГрузоподъемности, КоэффициентОбъемаКузова)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Прицеп", Прицеп);
	Запрос.УстановитьПараметр("КоэфГрузоподъемности", КоэффициентГрузоподъемности);
	Запрос.УстановитьПараметр("КоэфОбъемаКузова",     КоэффициентОбъемаКузова);
	
	СтруктураТС = Новый Структура("Грузоподъемность,ОбъемКузова,МаксимальноеКоличествоУпаковок");
	Запрос.Текст = "ВЫБРАТЬ
	               |	уатТС.Ссылка КАК Ссылка,
	               |	уатТС.Модель.ОбъемКузова * &КоэфОбъемаКузова КАК ОбъемКузова,
	               |	уатТС.Модель.МаксимальноеКоличествоУпаковок КАК МаксимальноеКоличествоУпаковок,
	               |	уатТС.Модель.Грузоподъемность * &КоэфГрузоподъемности КАК Грузоподъемность
	               |ИЗ
	               |	Справочник.уатТС КАК уатТС
	               |ГДЕ
	               |	уатТС.Ссылка = &Прицеп";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		ЗаполнитьЗначенияСвойств(СтруктураТС, Выборка);
	КонецЕсли;	
	Возврат СтруктураТС;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьСписокТСПриСозданииНаСервере()
	Если НЕ НастройкаПриОткрытииЗаполнятьСпискомТС Тогда
		Возврат;
	КонецЕсли;
	
	ПараметрыЗапросаТС = СтруктураПараметровДляПолученияТаблицыТС(КоэффициентГрузоподъемности, КоэффициентОбъемаКузова);
	ПараметрыЗапросаТС.ЗаполнениеТСПриОткрытии     = Истина;
	
	СоответсвиеМаршрутов = Новый Соответствие;
	мсвТС = ПолучитьТаблицуТС(ПараметрыЗапросаТС, ДатаПланирования);
	
	МаршрутыЗаполнитьСписокТСЗавершениеСервер_Список(мсвТС);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройкиОтборовЗон(КоллекцияХранимыхОтборов, КоллекцияНовыхОтборов)
	
	Для Каждого ТекУзел Из КоллекцияХранимыхОтборов Цикл 
		НовУзел = КоллекцияНовыхОтборов.Добавить();
		ЗаполнитьЗначенияСвойств(НовУзел, ТекУзел);
		ВосстановитьНастройкиОтборовЗон(ТекУзел.Строки, НовУзел.ПолучитьЭлементы());
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаписатьОперациюБизнесСтатистики(ИмяКлючевойОперации, Значение)
	// Фиксация операции для статистики
	ЦентрМониторинга.ЗаписатьОперациюБизнесСтатистики(ИмяКлючевойОперации, Значение);
КонецПроцедуры

#КонецОбласти

#КонецОбласти
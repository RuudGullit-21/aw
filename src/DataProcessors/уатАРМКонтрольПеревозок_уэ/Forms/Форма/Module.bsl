
#Область ОписаниеПеременных

&НаКлиенте
Перем HTMLobj Экспорт; // Объект HTML для картографии
&НаКлиенте
Перем ТекСтрокаДанныеПоПунктам;
&НаКлиенте
Перем мсвОтмеченныеТС;
&НаКлиенте
Перем АвтоМасштабироватьПриОткрытии;
&НаКлиенте
Перем ТСДляФокусировки;
&НаКлиенте
Перем ПараметрыОбработчикаОжиданияПостроенияОтчетаПанель1;
&НаКлиенте
Перем ПараметрыОбработчикаОжиданияПостроенияОтчетаПанель2;
&НаКлиенте
Перем ПараметрыОбработчикаОжиданияПостроенияОтчетаПанель3;
&НаКлиенте
Перем ПараметрыОбработчикаОжиданияПостроенияОтчетаПанель4;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	// начало блока стандартных операций
	ДопПараметрыОткрытие = Новый Структура("ИмяФормы", ИмяФормы);
	уатЗащищенныеФункцииСервер.уатОбработкаФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	// конец блока стандартных операций
	
	ТипЭлектронныхКарт   = уатЭлектронныеКартыСервер.ПолучитьТипИспользуемыхЭлектронныхКарт();
	ТипЭлектронныхКартПостроениеМаршрутов = 
			уатЭлектронныеКартыСервер.ПолучитьТипИспользуемыхЭлектронныхКарт("ПостроениеМаршрутов");
	
	ЯндексКарты = ТипЭлектронныхКарт = Перечисления.уатТипыЭлектронныхКарт.Яндекс;
	РабочаяДата = НачалоДня(ТекущаяДата());
	
	ВосстановитьНастройки();
	УстановитьВозможностьРедактированияФакта();
	
	ОпределитьДопустимоеОтклонениеОтВремени();
	УстановитьВидимостьДоступность();
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ДанныеПоТранспорту, "ФлагТСНаЛинии", ФлагТСНаЛинии);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ДанныеПоТранспорту, "ТекущаяДата", КонецДня(РабочаяДата));
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ДанныеПоТранспорту, "ТекущаяДатаВремя", ТекущаяДата());
	СекундВМинуте = 60;
	ДопустимоеОпоздание = уатОбщегоНазначения.уатВремяВЧЧ_ММ(Константы.уатДопустимоеОтклонениеОтВремениПрибытия.Получить() * СекундВМинуте);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ДанныеПоТранспорту, "ДопустимоеОпоздание", ДопустимоеОпоздание);
	
	ДатаОповещенияОСобытиях = ТекущаяДата();
		
	ЗагрузитьНастройкиПанелейАРМ();
	СформироватьПодменюПанелиАРМ();

	УстановитьОграниченияИспользованияВОтбореДанныеПоТранспорту();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// начало блока стандартных операций
	уатЗащищенныеФункцииКлиент.уатОбработкаФормаПриОткрытии(Отказ, ДопПараметрыОткрытие);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	// конец блока стандартных операций
		
	Если Не уатЭлектронныеКартыКлиент.ИнтернетСоедниениеДоступно() Тогда 
		ТекстОшибки = НСтр("en='Internet connectivity is absent. Treatment work is impossible.';ru='Подключение к сети Internet отсутствует. Работа обработки невозможна.'");
		ПоказатьПредупреждение(, ТекстОшибки);
		ЗакрытьФорму = Истина;
		Закрыть();
		Возврат;
	КонецЕсли;
	
	НаличиеСпидометра = Истина;
	мсвОтмеченныеТС   = Новый Массив();
	// Получаем скрипт карты
	mapHTML = ПолучитьСкрипт();
	ФактическоеРасстояние    = "0 км";
	ПлановоеРасстояние       = "0 км";

	СформироватьОтчеты(Истина);
	АвтоМасштабироватьПриОткрытии = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ВнешнееСобытие(Источник, Событие, Данные)
	
	Если НРег(Источник) = НРег("ChromiumAxNative") И НРег(Событие) = НРег("OnConsoleMessage") Тогда 
		OnConsoleMessage(Данные);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаОповещения(ИмяСобытия, Параметр, Источник)
	
	Если ВидМаршрутныхДокументов = 0
		И ИмяСобытия = "Изменен маршрутный лист" Тогда
		ОбновитьДанныеПоПунктамКлиент();
		
	ИначеЕсли ВидМаршрутныхДокументов = 1
		И ИмяСобытия = "Изменен путевой лист" Тогда
		ОбновитьДанныеПоПунктамКлиент();
	ИначеЕсли ИмяСобытия = "РабочиеСтолы_Запись" Тогда
		СформироватьПодменюПанелиАРМ();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СкоростьПроигрыванияПланМаршрутаПриИзменении(Элемент)
	
	СохранитьНастройки();
	
	Если Трек_ПроигратьФактическийМаршрутПометка Тогда
		Трек_СкоростьПроигрыванияФактМаршрутаПриИзменении();
	Иначе
		Трек_СкоростьПроигрыванияПланМаршрутаПриИзменении();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РабочаяДатаПриИзменении(Элемент)
	
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ДанныеПоТранспорту, "ТекущаяДата", КонецДня(РабочаяДата));
	Элементы.ДанныеПоТранспорту.Обновить();
	
	АвтоМасштабироватьПриОткрытии = Истина;
	
	УстановитьПериодФактическогоТрека();
	
	ОбработчикАвтообновленияСобытий();
	ОбновитьДанныеПоПунктамКлиент();
	ОбработчикАвтообновленияКарты();
	СформироватьОтчеты();
	
КонецПроцедуры

&НаКлиенте
Процедура КоличествоДнейПриИзменении(Элемент)
	
	СохранитьНастройки();
	
	АвтоМасштабироватьПриОткрытии = Истина;
	
	УстановитьПериодФактическогоТрека();
	
	ОбработчикАвтообновленияСобытий();
	ОбновитьДанныеПоПунктамКлиент();
	ОбработчикАвтообновленияКарты();
	СформироватьОтчеты();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьПлановыйМаршрутПриИзменении(Элемент)
	
	АвтоМасштабироватьПриОткрытии = Истина;
	
	СохранитьНастройки();
	ОбработчикАвтообновленияКарты();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьФактическийМаршрутПриИзменении(Элемент)
	
	АвтоМасштабироватьПриОткрытии = Истина;
	
	СохранитьНастройки();
	ОбработчикАвтообновленияКарты();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодМаршрутаСПриИзменении(Элемент)
	
	АвтоМасштабироватьПриОткрытии = Истина;
	
	ОбработчикАвтообновленияКарты();
	
КонецПроцедуры

&НаКлиенте
Процедура ПериодМаршрутаПоПриИзменении(Элемент)
	
	АвтоМасштабироватьПриОткрытии = Истина;
	
	ОбработчикАвтообновленияКарты();
	
КонецПроцедуры

&НаКлиенте
Процедура ДопИнфоПоТСПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	
	ТекущаяСтрока = Элементы.ДанныеПоТранспорту.ТекущаяСтрока;
	Если ТекущаяСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	уатОбщегоНазначенияКлиент.ПанельДопИнформацииПоТСПриНажатии(
		ЭтотОбъект, 
		Элемент, 
		ДанныеСобытия, 
		СтандартнаяОбработка,
		ТекущаяСтрока
	);
	
КонецПроцедуры

&НаКлиенте
Процедура mapHTMLДокументСформирован(Элемент)
	 
	HTMLobj = Элементы.mapHTML.Документ.defaultView;
	
	Если НЕ ЯндексКарты Тогда
		
		КартаЗагружена = Истина;
		HTMLobj = Элементы.mapHTML.Документ.defaultView;
		HTMLobj.evalJSFunc(ПолучитьСтрокуИнициализации(ПунктФокусировкиПриОткрытии, НачальныйМасштаб, ЯндексКарты));
		
		Если НЕ ЯндексКарты Тогда
			КомандаСкрипта = ПолучитьСтрокуКомандуКарты("hideDrawingPanel",,ЯндексКарты);
			HTMLobj.evalJSFunc(КомандаСкрипта);
		КонецЕсли;
		
		ОбновитьСобытия();
		
		Попытка
			ОтключитьОбработчикОжидания("ОбновитьДанныеПоПунктамКлиент");
		Исключение
		КонецПопытки;
		
		ОбновитьДанныеПоПунктамКлиент();
		
		Если Не ПериодАвтоматическогоОбновленияКарты = 0 Тогда 
			ПодключитьОбработчикОжидания("ОбновитьДанныеПоПунктамКлиент", ПериодАвтоматическогоОбновленияКарты, Ложь);
		КонецЕсли;
		
		Попытка
			ОтключитьОбработчикОжидания("ОбработчикАвтообновленияКарты");
		Исключение
		КонецПопытки;
		
		Если НЕ ПериодАвтоматическогоОбновленияКарты = 0 Тогда 
			ПодключитьОбработчикОжидания("ОбработчикАвтообновленияКарты", ПериодАвтоматическогоОбновленияКарты, Ложь);
		Иначе
			ОбработчикАвтообновленияКарты();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура mapHTMLПриНажатии(Элемент, ДанныеСобытия, СтандартнаяОбработка)
	Попытка
		Если ДанныеСобытия.Element.id = "messageButton" Тогда 
			#Если ВебКлиент Тогда
				OnConsoleMessage(ДанныеСобытия.Element.value);
				ДанныеСобытия.Element.value = "";
			#Иначе
				OnConsoleMessage(ДанныеСобытия.Event.currentTarget.consoleMessage);
				ДанныеСобытия.Event.currentTarget.consoleMessage = "";
			#КонецЕсли
		КонецЕсли;
	Исключение
	КонецПопытки;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_ДанныеПоТранспорту

&НаКлиенте
Процедура ДанныеПоТранспортуВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.ДанныеПоТранспортуОтображатьНаКарте Тогда
		ОтключитьОбработчикОжидания("Подключаемый_ДанныеПоТранспортуПриАктивизацииЯчейки");
		Если Элемент.ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		СтандартнаяОбработка = Ложь;
		
		Если Элемент.ТекущиеДанные.ЭтоГруппа Тогда 
			Возврат;
		КонецЕсли;
		
		Если мсвОтмеченныеТС.Найти(Элемент.ТекущаяСтрока) = Неопределено Тогда 
			мсвОтмеченныеТС.Добавить(Элемент.ТекущаяСтрока);
		Иначе 
			мсвОтмеченныеТС.Удалить(мсвОтмеченныеТС.Найти(Элемент.ТекущаяСтрока));
		КонецЕсли;
		
		ДанныеПоТранспорту.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("мсвОтмеченныеТС", мсвОтмеченныеТС);
		ДанныеПоТранспорту.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("РабочаяДата", РабочаяДата);
		Элементы.ДанныеПоТранспорту.Обновить();
		
		ТСДляФокусировки = "*";
		
		Подключаемый_ДанныеПоТранспортуПриАктивизацииЯчейки();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоТранспортуПриАктивизацииЯчейки(Элемент)

	ПодключитьОбработчикОжидания("Подключаемый_ДанныеПоТранспортуПриАктивизацииЯчейки", 0.5, Истина);
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ДанныеПоТранспортуПриПолученииДанныхНаСервере(ИмяЭлемента, Настройки, Строки)
	
	// Заполнение координат по ТС	
	Если Настройки.ДополнительныеСвойства.Свойство("РабочаяДата") Тогда 
		РабочаяДатаАРМ = Настройки.ДополнительныеСвойства.РабочаяДата;
	Иначе 
		РабочаяДатаАРМ = ТекущаяДата();
	КонецЕсли;
	
	табКоординат = уатЗащищенныеФункцииСервер_проф.ПолучитьТекущиеКоординатыТС(
		Строки.ПолучитьКлючи(), 
		?(НачалоДня(РабочаяДатаАРМ) = '00010101', '00010101', НачалоДня(РабочаяДатаАРМ)-86400),
		?(НачалоДня(РабочаяДатаАРМ) = '00010101', '39991231', КонецДня(РабочаяДатаАРМ))
	);
		
	Для Каждого СтрокаКоординат Из табКоординат Цикл 
		СтрокаСписка = Строки.Получить(СтрокаКоординат.ТС);
		Если СтрокаСписка = Неопределено Тогда 
			Продолжить;
		КонецЕсли;
		
		СтрокаСписка.Данные.Лат = СтрокаКоординат.Лат;
		СтрокаСписка.Данные.Лон = СтрокаКоординат.Лон;
	КонецЦикла;
	
	Если Настройки.ДополнительныеСвойства.Свойство("мсвОтмеченныеТС") Тогда
		мсвОтмеченныеТС = Настройки.ДополнительныеСвойства.мсвОтмеченныеТС;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(мсвОтмеченныеТС) Тогда
		мсвОтмеченныеТС = Новый Массив();
	КонецЕсли;
	
	// Предупреждения по прохождению ТО и сроку действия документов.
	Для Каждого ТекСтрока Из Строки Цикл 
		Если мсвОтмеченныеТС.Найти(ТекСтрока.Ключ) <> Неопределено Тогда 
			ТекСтрока.Значение.Данные.ОтображатьНаКарте = 1;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_ДанныеПоПунктам

&НаКлиенте
Процедура ДанныеПоПунктамПоискОчистка(Элемент, СтандартнаяОбработка)
	
	ДанныеПоПунктамПоиск = "";
	ОбновитьДанныеПоПунктамКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоПунктамПоискАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	ДанныеПоПунктамПоиск = Текст;
	ОбновитьДанныеПоПунктамКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоПунктамПриИзменении(Элемент)
	
	АвтоМасштабироватьПриОткрытии = Истина;
	
	УстановитьПериодФактическогоТрека();
	ОбработчикАвтообновленияКарты();
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоПунктамВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Если Поле = Элементы.ДанныеПоПунктамНомерДокумента 
			Или Поле = Элементы.ДанныеПоПунктамНомерПункта
			Или Поле = Элементы.ДанныеПоПунктамПрибытиеПлан
			Или Поле = Элементы.ДанныеПоПунктамУбытиеПлан
			Или Поле = Элементы.ДанныеПоПунктамПрицепы Тогда 
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, Элемент.ТекущиеДанные.МаршрутныйДокумент);
		
	ИначеЕсли Поле = Элементы.ДанныеПоПунктамПункт Тогда 
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, Элемент.ТекущиеДанные.Пункт);
		
	ИначеЕсли Поле = Элементы.ДанныеПоПунктамАдресУбытия Тогда 
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, Элемент.ТекущиеДанные.АдресУбытия);
		
	ИначеЕсли Поле = Элементы.ДанныеПоПунктамТС Тогда 
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, Элемент.ТекущиеДанные.ТС);
		
	ИначеЕсли Поле = Элементы.ДанныеПоПунктамВодитель Тогда 
		СтандартнаяОбработка = Ложь;
		ПоказатьЗначение(, Элемент.ТекущиеДанные.Водитель);
		
	ИначеЕсли Поле = Элементы.ДанныеПоПунктамЗаказы Или Поле = Элементы.ДанныеПоПунктамКонтрагент Тогда 
		СтандартнаяОбработка = Ложь;
		Если Элемент.ТекущиеДанные.ЗаказыКонтрагенты.Количество() = 0 Тогда 
			Возврат;
		КонецЕсли;
		
		Если Элемент.ТекущиеДанные.ЗаказыКонтрагенты.Количество() = 1 Тогда 
			ПоказатьЗначение(, Элемент.ТекущиеДанные.ЗаказыКонтрагенты[0].Значение);
			Возврат;
		КонецЕсли;
		
		Оповещение = Новый ОписаниеОповещения("ДанныеПоПунктамВыборЗаказа", ЭтотОбъект);
		Элемент.ТекущиеДанные.ЗаказыКонтрагенты.ПоказатьВыборЭлемента(Оповещение);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоПунктамПриАктивизацииСтроки(Элемент)
	
	Если ТекСтрокаДанныеПоПунктам = Элемент.ТекущаяСтрока Тогда 
		Возврат;
	КонецЕсли;
	
	ТекСтрокаДанныеПоПунктам = Элемент.ТекущаяСтрока;
	
	УстановитьПериодФактическогоТрека();
	
	АвтоМасштабироватьПриОткрытии = Истина;
	
	Попытка
		ОтключитьОбработчикОжидания("ОбработчикАвтообновленияКарты");
	Исключение
	КонецПопытки;
	
	ПодключитьОбработчикОжидания("ОбработчикАвтообновленияКарты", 0.5, Истина);
	
	Если Не ПериодАвтоматическогоОбновленияКарты = 0 Тогда 
		ПодключитьОбработчикОжидания("ОбработчикАвтообновленияКарты", ПериодАвтоматическогоОбновленияКарты, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоПунктамПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоПунктамПередУдалением(Элемент, Отказ)
	
	Отказ = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоПунктамВыполненПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДанныеПоПунктам.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.ПрибытиеФакт) И ТекущиеДанные.Выполнен Тогда 
		ТекущиеДанные.ПрибытиеФакт = НачалоМинуты(ТекущаяДата());
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекущиеДанные.УбытиеФакт) И ТекущиеДанные.Выполнен Тогда 
		ТекущиеДанные.УбытиеФакт = НачалоМинуты(ТекущаяДата());
	КонецЕсли;
	
	ДанныеДляИзменения = Новый Структура();
	ДанныеДляИзменения.Вставить("НомерСтроки",  ТекущиеДанные.НомерСтроки);
	ДанныеДляИзменения.Вставить("Выполнен",     ТекущиеДанные.Выполнен);
	ДанныеДляИзменения.Вставить("ПрибытиеФакт", ТекущиеДанные.ПрибытиеФакт);
	ДанныеДляИзменения.Вставить("УбытиеФакт",   ТекущиеДанные.УбытиеФакт);
	
	СохранитьИзмененияВДокументе(ТекущиеДанные.МаршрутныйДокумент, ДанныеДляИзменения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоПунктамПрибытиеФактПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДанныеПоПунктам.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеДляИзменения = Новый Структура();
	ДанныеДляИзменения.Вставить("НомерСтроки",  ТекущиеДанные.НомерСтроки);
	ДанныеДляИзменения.Вставить("ПрибытиеФакт", ТекущиеДанные.ПрибытиеФакт);
	СохранитьИзмененияВДокументе(ТекущиеДанные.МаршрутныйДокумент, ДанныеДляИзменения);
	
	ТекущиеДанные.НомерЦветаТекстаСтроки = ПолучитьНомерЦветаТекстаСтроки(
		ТекущиеДанные.МаршрутныйДокумент,
		ТекущиеДанные.ПрибытиеФакт,
		ТекущиеДанные.ПрибытиеПлан,
		ТекущиеДанные.НомерСтроки
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоПунктамУбытиеФактПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДанныеПоПунктам.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеДляИзменения = Новый Структура();
	ДанныеДляИзменения.Вставить("НомерСтроки", ТекущиеДанные.НомерСтроки);
	ДанныеДляИзменения.Вставить("УбытиеФакт",  ТекущиеДанные.УбытиеФакт);
	СохранитьИзмененияВДокументе(ТекущиеДанные.МаршрутныйДокумент, ДанныеДляИзменения);
	
КонецПроцедуры

&НаКлиенте
Процедура ДанныеПоПунктамФормироватьУведомленияОбОпозданияхПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ДанныеПоПунктам.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДанныеДляИзменения = Новый Структура();
	ДанныеДляИзменения.Вставить("ФормироватьУведомленияОбОпозданияхВРейсе", ТекущиеДанные.ФормироватьУведомленияОбОпозданияхВРейсе);
	СохранитьИзмененияВДокументе(ТекущиеДанные.МаршрутныйДокумент, ДанныеДляИзменения);
	
	ПараметрыПоиска = Новый Структура("МаршрутныйДокумент", ТекущиеДанные.МаршрутныйДокумент);
	НайденныеСтроки = ДанныеПоПунктам.НайтиСтроки(ПараметрыПоиска);
	Для Каждого ТекСтрока Из НайденныеСтроки Цикл 
		ТекСтрока.ФормироватьУведомленияОбОпозданияхВРейсе = ТекущиеДанные.ФормироватьУведомленияОбОпозданияхВРейсе;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОткрытьНастройки(Команда)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ВидМаршрутныхДокументов",                ВидМаршрутныхДокументов);
	ПараметрыФормы.Вставить("ПериодАвтоматическогоОбновленияКарты",   ПериодАвтоматическогоОбновленияКарты);
	ПараметрыФормы.Вставить("ИнформироватьОНовыхСобытиях",            ИнформироватьОНовыхСобытиях);
	ПараметрыФормы.Вставить("ПериодАвтоматическогоОбновленияСобытий", ПериодАвтоматическогоОбновленияСобытий);
	ПараметрыФормы.Вставить("КластеризацияМаркеровНаКарте",           КластеризацияМаркеровНаКарте);
	
	ПараметрыФормы.Вставить("ДопустимоеОтклонениеОтВремениПрибытия",  ДопустимоеОтклонениеОтВремениПрибытия);
	
	ПараметрыФормы.Вставить("ПунктФокусировкиПриОткрытии",            ПунктФокусировкиПриОткрытии);
	ПараметрыФормы.Вставить("НачальныйМасштаб",                       НачальныйМасштаб);
	ПараметрыФормы.Вставить("ИспользоватьАвтомасштабирование",        ИспользоватьАвтомасштабирование);
	ПараметрыФормы.Вставить("ОтображатьДопИнформациюПоТС",            ОтображатьДопИнформациюПоТС);
	
	Оповещение = Новый ОписаниеОповещения("ПослеСохраненияНастроек", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.уатАРМКонтрольПеревозок_уэ.Форма.ФормаНастроек", ПараметрыФормы, ЭтотОбъект,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанные(Команда)
	
	АвтоМасштабироватьПриОткрытии = Истина;
	
	ТекущиеДанные = Элементы.ДанныеПоТранспорту.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	УстановитьНаличиеСпидометра(ТекущиеДанные.Ссылка, мсвОтмеченныеТС);
	УстановитьДанныеТрека();
	
	ОбработчикАвтообновленияСобытий();
	ОбновитьДанныеПоПунктамКлиент();
	Элементы.ДанныеПоТранспорту.Обновить();
	ОбработчикАвтообновленияКарты();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьПанельТрека(Команда)
	
	Элементы.ПанельТрекаОтображение.Видимость    = Истина;
	Элементы.ПанельТрекаОсновная.Видимость       = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияТрекНажатие(Элемент)

	
	Элементы.ПанельТрекаОтображение.Видимость = Ложь;
	Элементы.ПанельТрекаОсновная.Видимость    = Истина;

	Если Элементы.ПанельТрекаОсновная.Видимость Тогда
		РасчитатьФактРасстояние();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьВсеПункты(Команда)
	
	РежимОтображенияВыполненныхПунктов = 0;
	УстановитьВидимостьДоступность();
	ОбновитьДанныеПоПунктамКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьНеотмеченныеПункты(Команда)
	
	РежимОтображенияВыполненныхПунктов = 1;
	УстановитьВидимостьДоступность();
	ОбновитьДанныеПоПунктамКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьОтмеченныеПункты(Команда)
	
	РежимОтображенияВыполненныхПунктов = 2;
	УстановитьВидимостьДоступность();
	ОбновитьДанныеПоПунктамКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьПунктыПоВсемТС(Команда)
	
	РежимОтображенияПунктов = 1;
	УстановитьВидимостьДоступность();
	ОбновитьДанныеПоПунктамКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьПунктыПоТекущемуТС(Команда)
	
	РежимОтображенияПунктов = 0;
	УстановитьВидимостьДоступность();
	ОбновитьДанныеПоПунктамКлиент();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьСобытияПоТекущейСтроке(Команда)
	
	РежимОтображенияСобытий = 0;
	УстановитьВидимостьДоступность();
	ОбработчикАвтообновленияСобытий();
	
КонецПроцедуры

&НаКлиенте
Процедура ОтображатьСобытияПоВсемСтрокам(Команда)
	
	РежимОтображенияСобытий = 1;
	УстановитьВидимостьДоступность();
	ОбработчикАвтообновленияСобытий();
	
КонецПроцедуры

&НаКлиенте
Процедура ПроигратьПлановыйМаршрут(Команда)
	
	Если Не ОтображатьПлановыйМаршрут Тогда 
		Возврат;
	КонецЕсли;
	
	Если КартыНеДоступны() Тогда 
		Возврат;
	КонецЕсли;
	
	Если Трек_ПроигратьФактическийМаршрутПометка Тогда 
		Трек_ПроигратьФактическийМаршрутПометка = Ложь;
	КонецЕсли;
	
	Трек_ПроигратьПлановыйМаршрутПометка = НЕ Трек_ПроигратьПлановыйМаршрутПометка;

	ОбновитьКнопкиПроигрывания();
	
	СкоростьПроигрыванияПланМаршрутаМиллиСек = (60 - Трек_СкоростьПроигрывания) * 1000;
	
	Если ПлановыйМаршрут = "" Тогда
		ПлановыйМаршрут = "[]";
	КонецЕсли;

	ПараметрыКоманды = Новый Структура("Проигрывать,СкоростьПроигрывания,ПроигратьФактМаршрут,МассивТочек",
	?(Трек_ПроигратьПлановыйМаршрутПометка, "true", "false"),
	Формат(СкоростьПроигрыванияПланМаршрутаМиллиСек, "ЧН=0; ЧГ=0"), "false", ПлановыйМаршрут);
	КомандаСкрипта   = ПолучитьСтрокуКомандуКарты("playRoute", ПараметрыКоманды, ЯндексКарты);
	HTMLobj.evalJSFunc(КомандаСкрипта);

	мсвКоординатыДляФокусировки = Новый Массив();
	УстановитьФокусНаОбъектахКарты(мсвКоординатыДляФокусировки, ПлановыйМаршрут);

КонецПроцедуры

&НаКлиенте
Процедура ПроигратьФактическийМаршрут(Команда)
	
	Если Не ОтображатьФактическийМаршрут Тогда 
		Возврат;
	КонецЕсли;
	
	Если КартыНеДоступны() Тогда 
		Возврат;
	КонецЕсли;
	
	Если Трек_ПроигратьПлановыйМаршрутПометка Тогда 
		Трек_ПроигратьПлановыйМаршрутПометка = Ложь;
	КонецЕсли;
	
	Трек_ПроигратьФактическийМаршрутПометка = Не Трек_ПроигратьФактическийМаршрутПометка;
	ОбновитьКнопкиПроигрывания();
	
	СкоростьПроигрыванияФактМаршрутаМиллиСек = (60 - Трек_СкоростьПроигрывания) * 1000;
	
	Если ФактическийМаршрут = "" Тогда
		ФактическийМаршрут = "[]";
	КонецЕсли;
	
	ПараметрыКоманды = Новый Структура("Проигрывать,СкоростьПроигрывания,ПроигратьФактМаршрут,МассивТочек",
	?(Трек_ПроигратьФактическийМаршрутПометка, "true", "false"),
	Формат(СкоростьПроигрыванияФактМаршрутаМиллиСек, "ЧН=0; ЧГ=0"), "true", ФактическийМаршрут);
	КомандаСкрипта   = ПолучитьСтрокуКомандуКарты("playRoute", ПараметрыКоманды, ЯндексКарты);
	HTMLobj.evalJSFunc(КомандаСкрипта);

	
	мсвКоординатыДляФокусировки = Новый Массив();
	УстановитьФокусНаОбъектахКарты(мсвКоординатыДляФокусировки, ФактическийМаршрут);

КонецПроцедуры

&НаКлиенте
Процедура ОбновитьФактическоеРасстояние(Команда)
	РасчитатьФактРасстояние();
КонецПроцедуры

#Область Контакты

&НаКлиенте
Процедура ВзаимодействияТС(Команда)
	
	
	ТекТС = Элементы.ДанныеПоТранспорту.ТекущиеДанные;
	
	Если ТекТС = Неопределено Тогда
		ТекстНСТР = НСтр("en='To open form it is necessary to select document.';ru='Для открытия формы требуется выделить документ.'");
		ПоказатьПредупреждение(, ТекстНСТР);
		Возврат;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекТС.Водитель) Тогда
		ТекстНСТР = НСтр("en='For this vehicle there is no contact information.';ru='Для данного ТС отсутствует контактная информация.'");
		ПоказатьПредупреждение(, ТекстНСТР);
		Возврат;
	КонецЕсли;
	
	Регистратор = ПолучитьРегистраторТС(ТекТС.Ссылка);
	
	ПараметрыФормы = Новый Структура();
	Если Регистратор = "" Тогда
		ПараметрыФормы.Вставить("ДокументИсточник", ТекТС.Ссылка);
		ОткрытьФорму("ОбщаяФорма.уатФормаКонтактов",ПараметрыФормы,ЭтотОбъект);
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы.Вставить("ДокументИсточник", Регистратор);
	ОткрытьФорму("ОбщаяФорма.уатФормаКонтактов",ПараметрыФормы,ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ВзаимодействияМЛ(Команда)
	
	ТекДокумент = Элементы.ДанныеПоПунктам.ТекущиеДанные;
	
	Если ТекДокумент = Неопределено Тогда
		ТекстНСТР = НСтр("en='To open form it is necessary to select document.';ru='Для открытия формы требуется выделить документ.'");
		ПоказатьПредупреждение(, ТекстНСТР);
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("ДокументИсточник", ТекДокумент.МаршрутныйДокумент);
	
	ОткрытьФорму("ОбщаяФорма.уатФормаКонтактов",ПараметрыФормы,ЭтотОбъект);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьРегистраторТС(ТС)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", ТС);
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатСостояниеТССрезПоследних.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрСведений.уатСостояниеТС.СрезПоследних(
	|			,
	|			ТС = &Ссылка
	|				И ТИПЗНАЧЕНИЯ(Регистратор) = ТИП(Документ.уатМаршрутныйЛист)) КАК уатСостояниеТССрезПоследних";
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		
		Возврат Выборка.Регистратор;
		
	КонецЕсли;
	
	Возврат "";
	
КонецФункции

#КонецОбласти

&НаКлиенте
Процедура ОтобразитьВсеТСНаКарте(Команда)
	
	мсвОтмеченныеТС.Очистить();
	
	Для Каждого ТекТС Из ПолучитьТекущиеТСКомпоновщик() Цикл 
		мсвОтмеченныеТС.Добавить(ТекТС.Ссылка);
	КонецЦикла;
	
	ДанныеПоТранспорту.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("мсвОтмеченныеТС", мсвОтмеченныеТС);
	ДанныеПоТранспорту.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("РабочаяДата", РабочаяДата);
	Элементы.ДанныеПоТранспорту.Обновить();
	
	АвтоМасштабироватьПриОткрытии = Истина;
	
	ОбработчикАвтообновленияКарты();
	
КонецПроцедуры

&НаКлиенте
Процедура НеОтображатьВсеТСНаКарте(Команда)
	
	мсвОтмеченныеТС.Очистить();
	ДанныеПоТранспорту.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("мсвОтмеченныеТС", мсвОтмеченныеТС);
	ДанныеПоТранспорту.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("РабочаяДата", РабочаяДата);
	Элементы.ДанныеПоТранспорту.Обновить();
	
	АвтоМасштабироватьПриОткрытии = Истина;
	
	ОбработчикАвтообновленияКарты();
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьФактПосещение(Команда)
	
	ТекущиеДанные = Элементы.ДанныеПоПунктам.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Если ДанныеПоПунктам.Количество() Тогда
			ТекущиеДанные = ДанныеПоПунктам[0];
		Иначе
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	МаршрутныйДокумент = ТекущиеДанные.МаршрутныйДокумент;
	Данные = ДанныеПоПунктам.НайтиСтроки(Новый Структура("МаршрутныйДокумент", МаршрутныйДокумент));
	
	УстановитьАдресХранилищаДляРезультатаЗаполненияФактПосещения();
	
	Если ТипЗнч(МаршрутныйДокумент) = Тип("ДокументСсылка.уатПутевойЛист") Тогда
		СтруктураМаршрутныйДокумент = уатОбщегоНазначенияТиповые.ПолучитьЗначенияРеквизитов(МаршрутныйДокумент, "Ссылка,ТранспортноеСредство,ДатаВыезда, ДатаВозвращения");
	ИначеЕсли ТипЗнч(МаршрутныйДокумент) = Тип("ДокументСсылка.уатМаршрутныйЛист") Тогда
		СтруктураМаршрутныйДокумент = уатОбщегоНазначенияТиповые.ПолучитьЗначенияРеквизитов(МаршрутныйДокумент, "Ссылка,ТС");
	КонецЕсли;
	
	уатОбщегоНазначенияКлиент_проф.ФактическоеПосещениеПунктовПоДаннымССМ(СтруктураМаршрутныйДокумент, Данные, АдресХранилищаФактПосещения, Истина);
	
	ПодключитьОбработчикОжидания("ФактическоеПосещениеПунктовПоДаннымМониторингаЗавершение", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ФактическоеПосещениеПунктовПоДаннымМониторингаЗавершение()
	
	НайденныйРезультат = ПолучитьИзВременногоХранилища(АдресХранилищаФактПосещения);
	Если ТипЗнч(НайденныйРезультат) = Тип("Массив") Тогда
		ОтключитьОбработчикОжидания("ФактическоеПосещениеПунктовПоДаннымМониторингаЗавершение");
		
		МассивДанныхДляИзменения = Новый Массив();
		Для Каждого ТекСтрока Из НайденныйРезультат Цикл
			МаршрутныйДокумент	 = ТекСтрока.МаршрутныйДокумент;
			НайдСтроки			 = ДанныеПоПунктам.НайтиСтроки(Новый Структура("МаршрутныйДокумент, НомерСтроки", ТекСтрока.МаршрутныйДокумент, ТекСтрока.НомерСтроки));
			Для Каждого Строка Из НайдСтроки Цикл
				ЗаполнитьЗначенияСвойств(Строка, ТекСтрока);
				Строка.НомерЦветаТекстаСтроки = ПолучитьНомерЦветаТекстаСтроки(
					Строка.МаршрутныйДокумент,
					Строка.ПрибытиеФакт,
					Строка.ПрибытиеПлан,
					Строка.НомерСтроки);
				МассивДанныхДляИзменения.Добавить(ТекСтрока);
			КонецЦикла;
		КонецЦикла;
		
		ДанныеДляИзменения = Новый Структура();
		ДанныеДляИзменения.Вставить("МассивДанныхДляИзменения", МассивДанныхДляИзменения);
		СохранитьИзмененияВДокументе(МаршрутныйДокумент, ДанныеДляИзменения);
	Иначе
		ПодключитьОбработчикОжидания("ФактическоеПосещениеПунктовПоДаннымМониторингаЗавершение", 0.1, Истина);
	КонецЕсли;
	
КонецПроцедуры


&НаКлиенте
Процедура ТолькоНаЛинии(Команда)
	Элементы.ДанныеПоТранспортуТолькоНаЛинии.Пометка = НЕ Элементы.ДанныеПоТранспортуТолькоНаЛинии.Пометка;
	ФлагТСНаЛинии = Элементы.ДанныеПоТранспортуТолькоНаЛинии.Пометка;
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ДанныеПоТранспорту, "ФлагТСНаЛинии", ФлагТСНаЛинии);
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ДанныеПоТранспорту, "ТекущаяДата", КонецДня(РабочаяДата));
	Элементы.ДанныеПоТранспорту.Обновить();
КонецПроцедуры

&НаКлиенте
Процедура НастройкаПериода(Команда)
	
	ДиалогПериода = Новый ДиалогРедактированияСтандартногоПериода();
	ДиалогПериода.Период.ДатаНачала    = ?(НачалоДня(РабочаяДата) = '00010101', '00010101', НачалоДня(РабочаяДата) - (КоличествоДней-1) * 86400);
	ДиалогПериода.Период.ДатаОкончания = ?(НачалоДня(РабочаяДата) = '00010101', '39991231', КонецДня(РабочаяДата));
	ДиалогПериода.Показать(Новый ОписаниеОповещения("НастройкаПериодаЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаПериодаЗавершение(Период, ДополнительныеПараметры) Экспорт
	Если Период <> Неопределено Тогда
		КоличествоДней = ((НачалоДня(Период.ДатаОкончания) - НачалоДня(Период.ДатаНачала))/(60*60*24)) + 1;
		КоличествоДней = ?(ЗначениеЗаполнено(КоличествоДней), КоличествоДней, 1);
		РабочаяДата    = ?(ЗначениеЗаполнено(Период.ДатаОкончания), Период.ДатаОкончания, РабочаяДата);
	КонецЕсли;
	СформироватьОтчеты();
	СохранитьНастройки();
КонецПроцедуры

&НаКлиенте
Процедура ВсеНастройки(Команда)
	Возврат;
КонецПроцедуры

&НаКлиенте
Процедура НастройкиОнлайнОтчет(Команда)
	Если Отчет1 = "Статистика" Тогда
		ОткрытьФорму("Отчет.уатСтатистикаOmnicomm.Форма.ФормаНастроекОтчета",,ЭтотОбъект);
	ИначеЕсли Отчет1 = "Сводный отчет" Тогда
		ОткрытьФорму("Отчет.уатСводныйОтчетOmnicomm.Форма.ФормаНастроекОтчета",,ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НастройкиОнлайнОтчет2(Команда)
	Если Отчет3 = "Статистика" Тогда
		ОткрытьФорму("Отчет.уатСтатистикаOmnicomm.Форма.ФормаНастроекОтчета",,ЭтотОбъект);
	ИначеЕсли Отчет3 = "Сводный отчет" Тогда
		ОткрытьФорму("Отчет.уатСводныйОтчетOmnicomm.Форма.ФормаНастроекОтчета",,ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НастройкиОнлайнОтчет3(Команда)
	Если Отчет4 = "Статистика" Тогда
		ОткрытьФорму("Отчет.уатСтатистикаOmnicomm.Форма.ФормаНастроекОтчета",,ЭтотОбъект);
	ИначеЕсли Отчет4 = "Сводный отчет" Тогда
		ОткрытьФорму("Отчет.уатСводныйОтчетOmnicomm.Форма.ФормаНастроекОтчета",,ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура НастройкиОнлайнОтчет1(Команда)
	Если Отчет2 = "Статистика" Тогда
		ОткрытьФорму("Отчет.уатСтатистикаOmnicomm.Форма.ФормаНастроекОтчета",,ЭтотОбъект);
	ИначеЕсли Отчет2 = "Сводный отчет" Тогда
		ОткрытьФорму("Отчет.уатСводныйОтчетOmnicomm.Форма.ФормаНастроекОтчета",,ЭтотОбъект);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Картография

&НаСервереБезКонтекста
Функция ПолучитьСкрипт()
	
	mapHTML = уатЗащищенныеФункцииСервер_проф.ПолучитьСкрипт();
	Возврат mapHTML;
	
КонецФункции

&НаКлиенте
Процедура OnConsoleMessage(Message)
	
	Если уатЭлектронныеКартыКлиент.ЭтоОтветChromium(Message) Тогда 
		флОшибка = Ложь;
		стрОтвет = уатЭлектронныеКартыКлиент.ДесериализоватьОтветChromium(Message, флОшибка);
		Если флОшибка Тогда 
			ТекстОшибки = НСтр("en='Failed to get a response from the map.';ru='Неудалось получить ответ от карты.'") + Символы.ПС +
			НСтр("en='Further work with this map is impossible.';ru='Дальнейшая работа с картой невозможна.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			КартаЗагружена = Ложь;
			ЭтотОбъект.ТолькоПросмотр = Истина;
			Возврат;
		КонецЕсли;
		
		OnConsoleMessageОсновнойСкрипт(стрОтвет);
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура OnConsoleMessageОсновнойСкрипт(стрОтвет)
	
	Если ЯндексКарты
		И НРег(стрОтвет.command) = НРег("scriptLoad")
		И Строка(стрОтвет.code) = "0" Тогда
		
		КартаЗагружена = Истина;
		HTMLobj = Элементы.mapHTML.Документ.defaultView;
		HTMLobj.evalJSFunc(ПолучитьСтрокуИнициализации(ПунктФокусировкиПриОткрытии, НачальныйМасштаб, ЯндексКарты));
		
		Если НЕ ЯндексКарты Тогда
			КомандаСкрипта = ПолучитьСтрокуКомандуКарты("hideDrawingPanel",,ЯндексКарты);
			HTMLobj.evalJSFunc(КомандаСкрипта);
		КонецЕсли;
		
		ОбновитьСобытия();
		
		Попытка
			ОтключитьОбработчикОжидания("ОбновитьДанныеПоПунктамКлиент");
		Исключение
		КонецПопытки;
		
		ОбновитьДанныеПоПунктамКлиент();
		
		Если Не ПериодАвтоматическогоОбновленияКарты = 0 Тогда 
			ПодключитьОбработчикОжидания("ОбновитьДанныеПоПунктамКлиент", ПериодАвтоматическогоОбновленияКарты, Ложь);
		КонецЕсли;
		
		Попытка
			ОтключитьОбработчикОжидания("ОбработчикАвтообновленияКарты");
		Исключение
		КонецПопытки;
		
		Если НЕ ПериодАвтоматическогоОбновленияКарты = 0 Тогда 
			ПодключитьОбработчикОжидания("ОбработчикАвтообновленияКарты", ПериодАвтоматическогоОбновленияКарты, Ложь);
		Иначе
			ОбработчикАвтообновленияКарты();
		КонецЕсли;
	ИначеЕсли НРег(стрОтвет.command) = НРег("href") Тогда
		СсылкаНаОбъект = СформироватьСсылкуОбъекта(стрОтвет.data.type, стрОтвет.data.object, стрОтвет.data.guid);
		Если Не СсылкаНаОбъект = Неопределено Тогда 
			ПоказатьЗначение(, СсылкаНаОбъект);
		КонецЕсли;
	ИначеЕсли НРег(стрОтвет.command) = НРег("playStop") Тогда
		Трек_ПроигратьПлановыйМаршрутПометка    = Ложь;
		Трек_ПроигратьФактическийМаршрутПометка = Ложь;
		ОбновитьКнопкиПроигрывания();
	ИначеЕсли НРег(стрОтвет.command) = НРег("traceRoute") Тогда
		Если Строка(стрОтвет.code) = "0" И стрОтвет.data.Свойство("totalDistance") И стрОтвет.data.Свойство("totalTime")
			И (стрОтвет.data.Свойство("plan") ИЛИ ЯндексКарты) Тогда 
			Попытка
				РасстояниеМаршрута = Число(стрОтвет.data.totalDistance);
				ВремяМаршрута      = Число(стрОтвет.data.totalTime);
				
				РасчетныеДанные = Новый Структура("Дней, Часов, Минут, Секунд, Расстояние", 0, 0, 0, 0, РасстояниеМаршрута);
				уатЭлектронныеКартыКлиент.СекВДату(ВремяМаршрута,РасчетныеДанные.Дней,РасчетныеДанные.Часов,РасчетныеДанные.Минут,РасчетныеДанные.Секунд);
				
				НадписьРасстояние   = "" + Окр(РасчетныеДанные.Расстояние / 1000, 2) + " км";
				НадписьДлительность = ""+РасчетныеДанные.Дней+"д "+РасчетныеДанные.Часов+"ч "+РасчетныеДанные.Минут+"м "+Цел(РасчетныеДанные.Секунд)+"с ";
				
			Исключение
				ТекстНСТР = НСтр("en='Error getting OSM data.';ru='Ошибка при получении данных OSM.'");
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
				НадписьРасстояние   = "0" + " км";
				НадписьДлительность = "0д 0ч 0м 0с";
			КонецПопытки;
			
		Иначе 
			ТекстНСТР = НСтр("en='Failed to map a route';ru='Не удалось проложить маршрут'");
			Состояние(ТекстНСТР,,, БиблиотекаКартинок.Ошибка32);
			НадписьРасстояние   = "0" + " км";
			НадписьДлительность = "0д 0ч 0м 0с";
		КонецЕсли;
			
		ТекМаршрут = "";
		Если стрОтвет.data.Свойство("waypoints") Тогда
			МассивТочек = СтрРазделить(стрОтвет.data.waypoints, ",");
			Итератор    = 1;
			
			ТекМаршрут = "";
			
			ИтераторСтрок   = 1;
			ПоследняяСтрока = МассивТочек.Количество();
			#Если ВебКлиент Тогда
				Для Каждого ТекСтрока Из МассивТочек Цикл
					Если Итератор = 1 Тогда
						ТекМаршрут = ТекМаршрут + "[" + ТекСтрока + ",";
						Итератор  = 2;
					ИначеЕсли ИтераторСтрок = ПоследняяСтрока Тогда
						Итератор = 1;
						ТекМаршрут = ТекМаршрут + ТекСтрока + "]";
					ИначеЕсли Итератор = 2 Тогда	
						Итератор = 1;
						ТекМаршрут = ТекМаршрут + ТекСтрока + "],";
					КонецЕсли;
					ИтераторСтрок = ИтераторСтрок + 1;
				КонецЦикла;
				ТекМаршрут = "[" + ТекМаршрут + "]";
			#Иначе
				
				ТекстПостроитель = Новый ЗаписьXML;
				ТекстПостроитель.УстановитьСтроку();
				ТекстПостроитель.ЗаписатьБезОбработки("[");
				Для Каждого ТекСтрока Из МассивТочек Цикл
					Если Итератор = 1 Тогда
						ТекстПостроитель.ЗаписатьБезОбработки("[");
						ТекстПостроитель.ЗаписатьБезОбработки(ТекСтрока);
						ТекстПостроитель.ЗаписатьБезОбработки(",");
						Итератор  = 2;
					ИначеЕсли ИтераторСтрок = ПоследняяСтрока Тогда
						Итератор = 1;
						ТекстПостроитель.ЗаписатьБезОбработки(ТекСтрока);
						ТекстПостроитель.ЗаписатьБезОбработки("]");
					ИначеЕсли Итератор = 2 Тогда	
						Итератор = 1;
						ТекстПостроитель.ЗаписатьБезОбработки(ТекСтрока);
						ТекстПостроитель.ЗаписатьБезОбработки("],");
					КонецЕсли;
					ИтераторСтрок = ИтераторСтрок + 1;
				КонецЦикла;
				ТекстПостроитель.ЗаписатьБезОбработки("]");
				
				ТекМаршрут = ТекстПостроитель.Закрыть();
				
			#КонецЕсли

		КонецЕсли;
	
		Если стрОтвет.data.Свойство("fact") Тогда
			ФактическийМаршрут = ТекМаршрут;
			
			ФактическоеРасстояние   = НадписьРасстояние;
			ФактическаяДлительность = НадписьДлительность;

		Иначе
			ПлановыйМаршрут    = ТекМаршрут;
			
			ПлановоеРасстояние   = НадписьРасстояние;
			ПлановаяДлительность = НадписьДлительность;
		КонецЕсли;
		
	КонецЕсли;
	УстановитьДанныеТрека();
	
КонецПроцедуры

&НаКлиенте
Функция КартыНеДоступны()
	
	Если HTMLobj = Неопределено Тогда 
		Возврат Истина;
	КонецЕсли;
	
	Если Не КартаЗагружена Тогда 
		Возврат Истина;
	КонецЕсли;
	
	Возврат Ложь;
	
КонецФункции // КартыНеДоступны()

&НаКлиенте
Процедура УстановитьФокусНаОбъектахКарты(мсвКоординатыДляФокусировки, мсвКоординат = "")
	
	Если КартыНеДоступны() Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не АвтоМасштабироватьПриОткрытии 
		И Не ИспользоватьАвтомасштабирование 
		И мсвКоординат = "" Тогда 
		Возврат;
	КонецЕсли;
	
	Если мсвКоординат = "" Тогда
		
		Для Каждого ТекКоордината Из мсвКоординатыДляФокусировки Цикл
			Если ТекКоордината.Лат = 0 И ТекКоордината.Лон = 0 Тогда 
				Продолжить;
			КонецЕсли;
			стрТекКоордината = "["+Формат(ТекКоордината.Лат, "ЧРД=.; ЧН=0.0000; ЧГ=0")+","+Формат(ТекКоордината.Лон, "ЧРД=.; ЧН=0.0000; ЧГ=0")+"]";
			мсвКоординат = мсвКоординат + ?(мсвКоординат="", стрТекКоордината, ","+стрТекКоордината);
		КонецЦикла;
	КонецЕсли;
	
	Если Не мсвКоординат = "" Тогда 
		ПараметрыКоманды = Новый Структура("Координаты", мсвКоординат);
		КомандаСкрипта   = ПолучитьСтрокуКомандуКарты("setBoundsToWay", ПараметрыКоманды, ЯндексКарты);
		Попытка
			HTMLobj.evalJSFunc(КомандаСкрипта);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьФокусНаТС(Знач Лат, Знач Лон)
	
	Если КартыНеДоступны() Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыКоманды = Новый Структура("Широта, Долгота", Формат(Лат, "ЧРД=.; ЧН=0.0000; ЧГ=0"), Формат(Лон, "ЧРД=.; ЧН=0.0000; ЧГ=0"));
	КомандаСкрипта   = ПолучитьСтрокуКомандуКарты("setFocusWOZoom", ПараметрыКоманды, ЯндексКарты);
	HTMLobj.evalJSFunc(КомандаСкрипта);
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьТСНаКарте()
	
	мсвКоординатыДляФокусировки = Новый Массив();
	мсвДляУдаления = Новый Массив();
	
	мсвТС = уатЭлектронныеКартыСервер.ПолучитьДанныеТС(мсвОтмеченныеТС);
	Для Каждого ДанныеТС Из мсвТС Цикл 
		Если Не ДанныеТС.Геокодирован Тогда 
			Продолжить;
		КонецЕсли;
		
		ТекстНадписи = ДанныеТС.ТекстНадписи;
		
		Картинка = "";
		Если ДанныеТС.ТСЗанято Тогда 
			НомерИконки = 2;
			ЦветСостояния = ДанныеТС.ЦветСостояния;
			Картинка = уатЭлектронныеКартыКлиент.ПолучитьМаркерТС(2,
			ЦветСостояния, ДанныеТС.ИспользуетсяМП, ДанныеТС.ТСНеНаЛинии);
			
		Иначе 
			НомерИконки = 1;
			Картинка = уатЭлектронныеКартыКлиент.ПолучитьМаркерТС(1,,
			ДанныеТС.ИспользуетсяМП, ДанныеТС.ТСНеНаЛинии);
		КонецЕсли;
		
		ПараметрыКоманды = уатЭлектронныеКартыКлиент.ПолучитьСтруктуруПараметровAddPointIcon(ДанныеТС.Лат,
		ДанныеТС.Лон, ТекстНадписи, КластеризацияМаркеровНаКарте, НомерИконки, Картинка);
		
		ОбработатьКомандуКарты("addPointIcon", ПараметрыКоманды);
		
		Если ТСДляФокусировки = ДанныеТС.Ссылка
			ИЛИ ТСДляФокусировки = "*" Тогда 
			мсвКоординатыДляФокусировки.Добавить(Новый Структура("Лат, Лон", ДанныеТС.Лат, ДанныеТС.Лон));
		КонецЕсли;

	КонецЦикла;

	
	Для Каждого ТекСтрока Из мсвДляУдаления Цикл
		УдалТС = мсвОтмеченныеТС.Найти(ТекСтрока);
		Если УдалТС <> Неопределено Тогда
			мсвОтмеченныеТС.Удалить(УдалТС);
		КонецЕсли;
	КонецЦикла;
	
	Если мсвКоординатыДляФокусировки.Количество() = 1 Тогда 
		УстановитьФокусНаТС(мсвКоординатыДляФокусировки[0].Лат, мсвКоординатыДляФокусировки[0].Лон);
		
	ИначеЕсли мсвКоординатыДляФокусировки.Количество() Тогда 
		УстановитьФокусНаОбъектахКарты(мсвКоординатыДляФокусировки);
	КонецЕсли;
	
	ТСДляФокусировки = Неопределено;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьОтображениеМаршрутовНаКарте(флФокусироваться=Истина)
	
	мсвКоординатыДляФокусировки = Новый Массив();
	
	// Эта таблица содержит точки, отображаемые для фактического маршрута, 
	// которые не требуется отображать для планового
	ОтображаемыеТочки.Очистить();
	
	Если ОтображатьФактическийМаршрут Тогда 
		ОтобразитьФактическиеМаршрутыНаКарте(мсвКоординатыДляФокусировки);
	КонецЕсли;
	
	Если ОтображатьПлановыйМаршрут Тогда 
		ОтобразитьПлановыеМаршрутыНаКарте(мсвКоординатыДляФокусировки);
	КонецЕсли;
	
	Если флФокусироваться И (ОтображатьПлановыйМаршрут Или ОтображатьФактическийМаршрут) Тогда 
		УстановитьФокусНаОбъектахКарты(мсвКоординатыДляФокусировки);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьПлановыеМаршрутыНаКарте(мсвКоординатыДляФокусировки)
	
	Если КартыНеДоступны() Тогда 
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ДанныеПоПунктам.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	ОбъектТрекинга = ТекущиеДанные.МаршрутныйДокумент;
	ВидПеревозки = Неопределено;
	Если ЗначениеЗаполнено(ОбъектТрекинга) Тогда
		ВидПеревозки = ПолучитьЗначениеРеквизита(ОбъектТрекинга, "ВидПеревозки");
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(ВидПеревозки) Тогда
		ВидПеревозки = ПредопределенноеЗначение("Справочник.уатВидыПеревозок.АвтомобильнаяГрузовая");
	КонецЕсли;

	ПунктыСледованияПоМаршруту = ПолучитьПунктыСледованияПоМаршруту(ОбъектТрекинга);
	
	ПараметрыТрассировки = "";
	
	ТочкиМаршрута = Новый Массив();
	мсвКоординат   = "";
	мсвПунктыСледования = Новый Массив();
	Для Сч = 0 По ПунктыСледованияПоМаршруту.Количество() - 1 Цикл 
		ТекПунктСтарт = ПунктыСледованияПоМаршруту[Сч];
		
		Если ТекПунктСтарт.Лат = 0 И ТекПунктСтарт.Лон = 0 Тогда
			Если ЗначениеЗаполнено(ТекПунктСтарт.Пункт) Тогда
				ТекстНСТР = НСтр("en='For ""%1"" could not determine the coordinates.';ru='Для пункта ""%1"" не заполнены координаты.'");
				ТекстОшибки = СтрШаблон(ТекстНСТР, ТекПунктСтарт.Пункт);
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			КонецЕсли;
			Продолжить;
		КонецЕсли;
			
		мсвКоординат = мсвКоординат + ?(мсвКоординат = "", "", ",") + 
			"[" + Формат(ТекПунктСтарт.Лат, "ЧРД=.; ЧН=0.0000; ЧГ=0") + "," +
			Формат(ТекПунктСтарт.Лон, "ЧРД=.; ЧН=0.0000; ЧГ=0")+"]";				
	
		ТочкиМаршрута.Добавить(Новый Структура("Лат, Лон", ТекПунктСтарт.Лат, ТекПунктСтарт.Лон));
        мсвПунктыСледования.Добавить(ТекПунктСтарт.Пункт);
	КонецЦикла;
	
	ЦветЛинии = уатЭлектронныеКартыКлиент.ПолучитьЦветLeaflet(135, 34, 221);
	ЖДМаршрутНеРассчитан = Ложь;
	Расстояние           = 0; 
	Время                = 0;
	Если ВидПеревозки = ПредопределенноеЗначение("Справочник.уатВидыПеревозок.Морская") Тогда
		ПараметрыКоманды = Новый Структура("Координаты, Цвет, Толщина, Направление, ВидЛинии",
		мсвКоординат, """" + ЦветЛинии + """", "5",  "true", ?(ЯндексКарты, "'dashdot'", "'7, 2, 7'"));
		ОбработатьКомандуКарты("showPolyline", ПараметрыКоманды);
		
	ИначеЕсли ВидПеревозки = ПредопределенноеЗначение("Справочник.уатВидыПеревозок.Авиационная") Тогда
		ПараметрыКоманды = Новый Структура("Координаты, Цвет, Толщина, Направление, ВидЛинии",
		мсвКоординат, """" + ЦветЛинии + """", "5",  "true", ?(ЯндексКарты, "'dash'", "'8, 8'"));
		ОбработатьКомандуКарты("showPolyline", ПараметрыКоманды);
		
	ИначеЕсли ВидПеревозки = ПредопределенноеЗначение("Справочник.уатВидыПеревозок.Железнодорожная") Тогда
		РезультатOSM = Неопределено;
		ТекстОшибки  = "";
		Если уатЗащищенныеФункцииСервер.РассчитатьЖДМаршрут(ТочкиМаршрута, РезультатOSM, ТекстОшибки) Тогда 
			мсвКоординат = РезультатOSM.Координаты; 
			Расстояние   = РезультатOSM.Расстояние;
			Время        = РезультатOSM.Время;
		Иначе
			ЖДМаршрутНеРассчитан = Истина;
		КонецЕсли;
		
		ПараметрыКоманды = Новый Структура("Координаты, Цвет, Толщина, Направление, ВидЛинии",
		мсвКоординат, """" + ЦветЛинии + """", "7",  "false", ?(ЯндексКарты, "'solid'", "''"));
		ОбработатьКомандуКарты("showPolyline", ПараметрыКоманды);
		
		ПараметрыКоманды = Новый Структура("Координаты, Цвет, Толщина, Направление, ВидЛинии",
		мсвКоординат, """#ffffff""", "5",  "false", ?(ЯндексКарты, "'solid'", "''"));
		ОбработатьКомандуКарты("showPolyline", ПараметрыКоманды);
		
		ПараметрыКоманды = Новый Структура("Координаты, Цвет, Толщина, Направление, ВидЛинии",
		мсвКоординат, """" + ЦветЛинии + """", "5",  "true", ?(ЯндексКарты, "'dash'", "'8, 8'"));
		ОбработатьКомандуКарты("showPolyline", ПараметрыКоманды);			
		
	Иначе
		
		ПараметрыКоманды = Новый Структура("Координаты, ТочкиМаршрута, Цвет, Толщина, Факт, ПлановыйМаршрут",
		мсвКоординат, ТочкиМаршрута, 
		ЦветЛинии, 
		"''",  "false");
		ОбработатьКомандуКарты("traceRoute", ПараметрыКоманды);
	КонецЕсли;
	
	Если ВидПеревозки = ПредопределенноеЗначение("Справочник.уатВидыПеревозок.Морская")
		ИЛИ ВидПеревозки = ПредопределенноеЗначение("Справочник.уатВидыПеревозок.Авиационная")
		ИЛИ ЖДМаршрутНеРассчитан Тогда
		ПредПункт = Неопределено; 
		мсвПункты = Новый Массив;
		
		Для Каждого ТекПункт Из мсвПунктыСледования Цикл 
			Если ПредПункт = Неопределено Тогда
				ПредПункт = ТекПункт;
			Иначе
				мсвПункты.Добавить(Новый Структура("Пункт1, Пункт2", 
				ПредПункт, 
				ТекПункт));
			КонецЕсли;
		КонецЦикла;
		уатЗащищенныеФункцииСервер.РассчитатьТаблицуРасстояниеВремяМеждуПунктами(мсвПункты,,,,Ложь); 
		Расстояние   = 0; 
		Время        = 0;
		Для Каждого ТекПункт Из мсвПункты Цикл
			Расстояние = Расстояние + ТекПункт.Расстояние;
			Время      = уатАРМКлиент.СложитьВремя(ТекПункт.Время, Время);
		КонецЦикла; 
		
		Попытка 
			РасчетныеДанные = Новый Структура("Дней, Часов, Минут, Секунд, Расстояние", 0, 0, 0, 0, Расстояние);
			уатЭлектронныеКартыКлиент.СекВДату(Время * 3600,РасчетныеДанные.Дней,РасчетныеДанные.Часов,РасчетныеДанные.Минут,РасчетныеДанные.Секунд);
			
			НадписьРасстояние   = "" + Окр(РасчетныеДанные.Расстояние, 2) + " км";
			НадписьДлительность = ""+Формат(?(РасчетныеДанные.Дней < 9, " " + РасчетныеДанные.Дней, РасчетныеДанные.Дней), "ЧЦ=2; ЧН=;")+" дн. "
			+ Формат(РасчетныеДанные.Часов, "ЧЦ=2; ЧВН=; ЧН=")
			+ ":" + Формат(РасчетныеДанные.Минут, "ЧЦ=2; ЧВН=; ЧН=");
		Исключение
			НадписьРасстояние   = "0" + " км";
			НадписьДлительность = " 0 дн. 00:00";
		КонецПопытки; 
		ПлановоеРасстояние  = НадписьРасстояние;
		ПлановыйМаршрут     = "[" + мсвКоординат + "]";
	ИначеЕсли ВидПеревозки = ПредопределенноеЗначение("Справочник.уатВидыПеревозок.Железнодорожная") Тогда
		Попытка 
			РасчетныеДанные = Новый Структура("Дней, Часов, Минут, Секунд, Расстояние", 0, 0, 0, 0, Расстояние);
			уатЭлектронныеКартыКлиент.СекВДату(Время,РасчетныеДанные.Дней,РасчетныеДанные.Часов,РасчетныеДанные.Минут,РасчетныеДанные.Секунд);
			
			НадписьРасстояние   = "" + Окр(РасчетныеДанные.Расстояние / 1000, 2) + " км";
			НадписьДлительность = ""+Формат(?(РасчетныеДанные.Дней < 9, " " + РасчетныеДанные.Дней, РасчетныеДанные.Дней), "ЧЦ=2; ЧН=;")+" дн. "
			+ Формат(РасчетныеДанные.Часов, "ЧЦ=2; ЧВН=; ЧН=")
			+ ":" + Формат(РасчетныеДанные.Минут, "ЧЦ=2; ЧВН=; ЧН=");
		Исключение
			НадписьРасстояние   = "0" + " км";
			НадписьДлительность = " 0 дн. 00:00";
		КонецПопытки; 
		ПлановоеРасстояние  = НадписьРасстояние;
		ПлановыйМаршрут     = "[" + мсвКоординат + "]";
	КонецЕсли;
	
	Для СчТочки = 1 По ПунктыСледованияПоМаршруту.Количество() Цикл 
		ТекПункт = ПунктыСледованияПоМаршруту[СчТочки-1];
		Если ТекПункт.Лат = 0 И ТекПункт.Лон = 0 Тогда 
			Продолжить;
		КонецЕсли;
		
		Если ОтображаемыеТочки.Количество() >= СчТочки 
			И ОтображаемыеТочки[СчТочки-1].Лат = ТекПункт.Лат
			И ОтображаемыеТочки[СчТочки-1].Лон = ТекПункт.Лон Тогда
			// Точка уже показана на карте как точка фактического маршрута, нет смысла показывать ее еще раз
			Продолжить;
		КонецЕсли;
		
		мсвКоординатыДляФокусировки.Добавить(Новый Структура("Лат, Лон", ТекПункт.Лат, ТекПункт.Лон));
		
		ПараметрыКоманды = уатЭлектронныеКартыКлиент.ПолучитьСтруктуруПараметровAddPointIcon(ТекПункт.Лат,
		ТекПункт.Лон, ТекПункт.ТекстНадписи, КластеризацияМаркеровНаКарте, "9",
		?(ТекПункт.Выполнен, уатЭлектронныеКартыКлиент.ПолучитьЧисловойМаркер(СчТочки, 0, 0, 255, ТекПункт.ЦветФона), уатЭлектронныеКартыКлиент.ПолучитьЧисловойМаркер(СчТочки, 135, 34, 221, ТекПункт.ЦветФона)));
		ОбработатьКомандуКарты("addPointIcon", ПараметрыКоманды);

	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОтобразитьФактическиеМаршрутыНаКарте(мсвКоординатыДляФокусировки)
	
	Если КартыНеДоступны() Тогда 
		Возврат;
	КонецЕсли;
	
	Если ДанныеПоПунктам.Количество() = 0 Тогда 
		ОбъектТрекинга = Элементы.ДанныеПоТранспорту.ТекущаяСтрока;
	Иначе 
		Если Элементы.ДанныеПоПунктам.ТекущиеДанные = Неопределено Тогда 
			Возврат;
		КонецЕсли;
		
		ОбъектТрекинга = Элементы.ДанныеПоПунктам.ТекущиеДанные.МаршрутныйДокумент;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ОбъектТрекинга) Тогда 
		Возврат;
	КонецЕсли;
		
	КоординатыФактическогоМаршрута = ПолучитьКоординатыФактическогоМаршрута(
		ОбъектТрекинга,
		ПериодМаршрутаС,
		ПериодМаршрутаПо
	);
	
	мсвКоординат = "";
	мсвСтрокКоординат = Новый Массив;
	ПредыдущаяШирота = 0;
	ПредыдущаяДолгота = 0;
	
	МассивТочек = Новый Массив();
	Для Каждого ТекКоордината Из КоординатыФактическогоМаршрута.КоординатыТрека Цикл
		Если (ТекКоордината.Лат = 0 И ТекКоордината.Лон = 0)
			Или (ПредыдущаяШирота = ТекКоордината.Лат И ПредыдущаяДолгота = ТекКоордината.Лон) Тогда 
			Продолжить;
		КонецЕсли;
		мсвКоординатыДляФокусировки.Добавить(Новый Структура("Лат, Лон", ТекКоордината.Лат, ТекКоордината.Лон));
		ПредыдущаяШирота = ТекКоордината.Лат;
		ПредыдущаяДолгота = ТекКоордината.Лон;
		стрТекКоордината = "["+Формат(ТекКоордината.Лат, "ЧРД=.; ЧН=0.0000; ЧГ=0")+","+Формат(ТекКоордината.Лон, "ЧРД=.; ЧН=0.0000; ЧГ=0")+"]";
		мсвСтрокКоординат.Добавить(стрТекКоордината);
		МассивТочек.Добавить(Формат(ТекКоордината.Лат, "ЧРД=.; ЧН=0.0000; ЧГ=0"));
		МассивТочек.Добавить(Формат(ТекКоордината.Лон, "ЧРД=.; ЧН=0.0000; ЧГ=0"));
	КонецЦикла;
	мсвКоординат = СтрСоединить(мсвСтрокКоординат, ",");
	
	Итератор   = 1;
	ТекМаршрут = "";
	
	ИтераторСтрок   = 1;
	ПоследняяСтрока = МассивТочек.Количество();
	Для Каждого ТекСтрока Из МассивТочек Цикл
		Если Итератор = 1 Тогда
			ТекМаршрут = ТекМаршрут + "[" + ТекСтрока + ",";
			Итератор  = 2;
		ИначеЕсли ИтераторСтрок = ПоследняяСтрока Тогда
			Итератор = 1;
			ТекМаршрут = ТекМаршрут + ТекСтрока + "]";
		ИначеЕсли Итератор = 2 Тогда	
			Итератор = 1;
			ТекМаршрут = ТекМаршрут + ТекСтрока + "],";
		КонецЕсли;
		ИтераторСтрок = ИтераторСтрок + 1;
	КонецЦикла;
	ТекМаршрут = "[" + ТекМаршрут + "]";
	ФактическийМаршрут = ТекМаршрут;
			
	Если Не мсвКоординат = "" Тогда
		ПараметрыКоманды = Новый Структура("Координаты, Цвет, Толщина, Направление",
		мсвКоординат, "'#000000'", "5",  "true");
		ОбработатьКомандуКарты("showPolyline", ПараметрыКоманды);
		ПараметрыКоманды = Новый Структура("Координаты", мсвКоординат);
	КонецЕсли;
	
	Для СчТочки = 1 По КоординатыФактическогоМаршрута.ДанныеПунктов.Количество() Цикл 
		ТекПункт = КоординатыФактическогоМаршрута.ДанныеПунктов[СчТочки-1];
		
		мсвКоординатыДляФокусировки.Добавить(Новый Структура("Лат, Лон", ТекПункт.Лат, ТекПункт.Лон));
		НоваяСтрока = ОтображаемыеТочки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекПункт);
		
		ПараметрыКоманды = уатЭлектронныеКартыКлиент.ПолучитьСтруктуруПараметровAddPointIcon(ТекПункт.Лат,
			ТекПункт.Лон, ТекПункт.ТекстНадписи, КластеризацияМаркеровНаКарте, "9",
			уатЭлектронныеКартыКлиент.ПолучитьЧисловойМаркер(СчТочки, 0, 0, 0, ТекПункт.ЦветФона));
		ОбработатьКомандуКарты("addPointIcon", ПараметрыКоманды);
	КонецЦикла;
	
	РасчитатьФактРасстояние();
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработчикАвтообновленияКарты()
	
	Если КартыНеДоступны() Тогда 
		Возврат;
	КонецЕсли;
	
	Если АвтоМасштабироватьПриОткрытии И Элементы.ДанныеПоПунктам.ТекущиеДанные = Неопределено И ТСДляФокусировки = Неопределено Тогда 
		ТСДляФокусировки = "*";
	КонецЕсли;
	
	флФокусНаМаршрутах = (ТСДляФокусировки = Неопределено);
	
	ОтобразитьТСНаКарте();
	ОбновитьОтображениеМаршрутовНаКарте(флФокусНаМаршрутах);
	УдалитьНеактуальныеДанныеКарты();
	
	АвтоМасштабироватьПриОткрытии = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчитатьФактРасстояние()
	
	Если ЗначениеЗаполнено(ИдентификаторЗаданияРасчитатьФактРасстояние) Тогда
		ОтменитьВыполнениеЗаданияРасчитатьФактРасстояние(ИдентификаторЗаданияРасчитатьФактРасстояние);
	КонецЕсли;
	
	Если Элементы.ПанельТрекаОсновная.Видимость
		И ИсточникФактическихДанныхДляКартографии <> "" Тогда
		
		Элементы.ОбновитьФактическоеРасстояние.Картинка = БиблиотекаКартинок.ДлительнаяОперация16;
		
		ДлительнаяОперация = РасчитатьФактРасстояниеПараметрыВыполненияВФоне();
		ИдентификаторЗаданияРасчитатьФактРасстояние = ДлительнаяОперация.ИдентификаторЗадания;
		
		НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		НастройкиОжидания.ВыводитьОкноОжидания = Ложь;
		
		Обработчик = Новый ОписаниеОповещения("РасчитатьФактРасстояниеДлительнаяОперацияЗавершение", ЭтотОбъект);
		
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, НастройкиОжидания);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасчитатьФактРасстояниеДлительнаяОперацияЗавершение(Операция, ДополнительныеПараметры) Экспорт
	
	Если Операция = Неопределено Тогда
		
	Иначе
		Если Операция.Статус = "Выполнено" Тогда
			Если ЭтоАдресВременногоХранилища(Операция.АдресРезультата) Тогда
				Данные = ПолучитьИзВременногоХранилища(Операция.АдресРезультата);
				Если ТипЗнч(Данные) = Тип("Строка") Тогда
					ФактическоеРасстояние = Данные;
				КонецЕсли;
			КонецЕсли; 
			УстановитьДанныеТрека();
			Элементы.ОбновитьФактическоеРасстояние.Картинка = БиблиотекаКартинок.Обновить;
			ИдентификаторЗаданияРасчитатьФактРасстояние     = "";
		Иначе
			ИдентификаторЗаданияРасчитатьФактРасстояние     = "";

			ВызватьИсключение Операция.КраткоеПредставлениеОшибки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ОтменитьВыполнениеЗаданияРасчитатьФактРасстояние(ИдентификаторЗаданияРасчитатьФактРасстояние)
	
	ДлительныеОперации.ОтменитьВыполнениеЗадания(ИдентификаторЗаданияРасчитатьФактРасстояние);
	
КонецПроцедуры

&НаСервере
Функция РасчитатьФактРасстояниеПараметрыВыполненияВФоне()
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Расчет фактических данных маршрута'");
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;

	ОбъектСтруктура = Новый Структура;
	ОбъектСтруктура.Вставить("ТранспортноеСредство",  Трек_ТекущееТранспортноеСредство);
	ОбъектСтруктура.Вставить("ДатаВыезда",            ПериодМаршрутаС);
	ОбъектСтруктура.Вставить("ДатаВозвращения",       ПериодМаршрутаПо);
	ОбъектСтруктура.Вставить("СпидометрВыезда",       0);
	ОбъектСтруктура.Вставить("СпидометрВозвращения",  0);
	ОбъектСтруктура.Вставить("Прицепы",               Новый Массив());
	
	Возврат ДлительныеОперации.ВыполнитьВФоне(
	"уатЭлектронныеКартыСервер.РасчитатьФактРасстояниеДлительнаяОперация",
	ОбъектСтруктура,
	ПараметрыВыполнения);
	
КонецФункции

&НаКлиенте
Процедура ОбработатьКомандуКарты(Знач КомандаКарты, ПараметрыКоманды = Неопределено)
	
	Если ПараметрыКоманды = Неопределено Тогда
		ПараметрыКоманды  = Новый Структура();
	КонецЕсли;
	Идентификатор      = Строка(Новый УникальныйИдентификатор());
	ПараметрыКоманды.Вставить("Идентификатор", Идентификатор);
	
	СтрокаКомандыКарты = ПолучитьСтрокуКомандуКарты(КомандаКарты, ПараметрыКоманды, ЯндексКарты);
	
	НайдСтрока = Неопределено;
	Для Каждого ТекСтрока Из кэшОбъектыКарты Цикл 
		Если ТекСтрока.КомандаКарты = СтрокаКомандыКарты Тогда 
			НайдСтрока = ТекСтрока;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НайдСтрока = Неопределено Тогда 
		НовСтрока = кэшОбъектыКарты.Добавить();
		НовСтрока.id             = Идентификатор;
		НовСтрока.КомандаКарты   = КомандаКарты;
		НовСтрока.ВыведенНаКарту = Истина;
		
		HTMLobj.evalJSFunc(СтрокаКомандыКарты);
		
	Иначе 
		НайдСтрока.ВыведенНаКарту = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтрокуКомандуКарты(Знач КомандаКарты, ПараметрыКоманды = Неопределено, ЯндексКарты = Ложь)
	
	Возврат уатЭлектронныеКартыКлиент.ПолучитьСтрокуКомандуКарты(КомандаКарты, ПараметрыКоманды,
		ЯндексКарты, HTMLobj,,ТипЭлектронныхКартПостроениеМаршрутов);
	
КонецФункции

&НаКлиенте
Процедура УдалитьНеактуальныеДанныеКарты()
	
	Если КартыНеДоступны() Тогда 
		Возврат;
	КонецЕсли;
	
	мсвУдаляемыеСтроки = Новый Массив();
	
	Для Каждого ТекСтрока Из кэшОбъектыКарты Цикл 
		Если Не ТекСтрока.ВыведенНаКарту Тогда 
			мсвУдаляемыеСтроки.Добавить(ТекСтрока);
		КонецЕсли;
		ТекСтрока.ВыведенНаКарту = Ложь;
	КонецЦикла;
	
	Для Каждого УдаляемаяСтрока Из мсвУдаляемыеСтроки Цикл 
		ПараметрыКоманды = Новый Структура("id", УдаляемаяСтрока.id);
		КомандаСкрипта = ПолучитьСтрокуКомандуКарты("deleteObject", ПараметрыКоманды, ЯндексКарты);	
		HTMLobj.evalJSFunc(КомандаСкрипта);
		
		кэшОбъектыКарты.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция ВосстановитьНастройки()
	
	Если ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда 
		СтруктураНастроекФормы = ХранилищеНастроекДанныхФорм.Загрузить("Обработка.уатАРМКонтрольПеревозок_уэ.Форма", "уатАРМКонтрольПеревозок_уэ_Настройки");
	Иначе 
		СтруктураНастроекФормы = Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(СтруктураНастроекФормы) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураНастроекФормы);
		
		Если Не СтруктураНастроекФормы.Свойство("КластеризацияМаркеровНаКарте") Тогда 
			КластеризацияМаркеровНаКарте = Истина;
		КонецЕсли;
		
		Если Не СтруктураНастроекФормы.Свойство("КоличествоДней") Тогда 
			КоличествоДней = 1;
		КонецЕсли;
		
		Если СтруктураНастроекФормы.Свойство("СкоростьПроигрыванияМаршрута") Тогда 
			Трек_СкоростьПроигрывания = СтруктураНастроекФормы.СкоростьПроигрыванияМаршрута;
		Иначе 
			Трек_СкоростьПроигрывания = 30; // Время проигрывания 5 сек (60-5).
		КонецЕсли;
		
	Иначе 
		ОтображатьФактическийМаршрут           = Истина;
		ОтображатьПлановыйМаршрут              = Истина;
		ИнформироватьОНовыхСобытиях            = Истина;
		ПериодАвтоматическогоОбновленияСобытий = 10;
		КластеризацияМаркеровНаКарте           = Истина;
		КоличествоДней                         = 1;
		Трек_СкоростьПроигрывания              = 30; // Время проигрывания 5 сек (60-5).
	КонецЕсли;
	
	Если ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда 
		СтруктураНастроекКарты = ХранилищеНастроекДанныхФорм.Загрузить("Обработка.уатЭлектронныеКарты.Форма.ФормаOSM", "уатЭлектронныеКарты_НастройкиКартыOSM");
	Иначе 
		СтруктураНастроекКарты = Неопределено;
	КонецЕсли;
	
	Если Не ТипЗнч(СтруктураНастроекКарты) = Тип("Структура") Тогда 
		СтруктураНастроекКарты = Новый Структура();
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, СтруктураНастроекКарты);
	
	Если НачальныйМасштаб = 0 Тогда 
		НачальныйМасштаб = 10;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура СохранитьНастройки()
	
	Если Не ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда 
		Возврат;
	КонецЕсли;
	
	СтруктураНастроекФормы = Новый Структура();
	
	СтруктураНастроекФормы.Вставить("ОтображатьПлановыйМаршрут",              ОтображатьПлановыйМаршрут);
	СтруктураНастроекФормы.Вставить("ОтображатьФактическийМаршрут",           ОтображатьФактическийМаршрут);
	СтруктураНастроекФормы.Вставить("ПериодАвтоматическогоОбновленияКарты",   ПериодАвтоматическогоОбновленияКарты);
	СтруктураНастроекФормы.Вставить("ВидМаршрутныхДокументов",                ВидМаршрутныхДокументов);
	СтруктураНастроекФормы.Вставить("ИнформироватьОНовыхСобытиях",            ИнформироватьОНовыхСобытиях);
	СтруктураНастроекФормы.Вставить("ПериодАвтоматическогоОбновленияСобытий", ПериодАвтоматическогоОбновленияСобытий);
	СтруктураНастроекФормы.Вставить("КластеризацияМаркеровНаКарте",           КластеризацияМаркеровНаКарте);
	СтруктураНастроекФормы.Вставить("КоличествоДней",                         КоличествоДней);
	СтруктураНастроекФормы.Вставить("ОтображатьДопИнформациюПоТС",            ОтображатьДопИнформациюПоТС);
	
	СтруктураНастроекФормы.Вставить("СкоростьПроигрыванияМаршрута", Трек_СкоростьПроигрывания);
	
	ХранилищеНастроекДанныхФорм.Сохранить("Обработка.уатАРМКонтрольПеревозок_уэ.Форма", "уатАРМКонтрольПеревозок_уэ_Настройки", СтруктураНастроекФормы);
	
	СтруктураНастроекКарты = Новый Структура();
	СтруктураНастроекКарты.Вставить("ПунктФокусировкиПриОткрытии",     ПунктФокусировкиПриОткрытии);
	СтруктураНастроекКарты.Вставить("НачальныйМасштаб",                НачальныйМасштаб);
	СтруктураНастроекКарты.Вставить("ИспользоватьАвтомасштабирование", ИспользоватьАвтомасштабирование);
	ХранилищеНастроекДанныхФорм.Сохранить("Обработка.уатЭлектронныеКарты.Форма.ФормаOSM", "уатЭлектронныеКарты_НастройкиКартыOSM", СтруктураНастроекКарты);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьВидимостьДоступность()
	
	Элементы.ДанныеПоПунктамОтображатьВсеПункты.Пометка          = РежимОтображенияВыполненныхПунктов = 0;
	Элементы.ДанныеПоПунктамОтображатьНеотмеченныеПункты.Пометка = РежимОтображенияВыполненныхПунктов = 1;
	Элементы.ДанныеПоПунктамОтображатьОтмеченныеПункты.Пометка   = РежимОтображенияВыполненныхПунктов = 2;
	
	Элементы.ДанныеПоПунктамОтображатьПунктыПоТекущемуТС.Пометка = РежимОтображенияПунктов = 0;
	Элементы.ДанныеПоПунктамОтображатьПунктыПоВсемТС.Пометка     = РежимОтображенияПунктов = 1;
	
	Элементы.ДанныеПоПеревозкамСобытияОтображатьСобытияПоТекущейСтроке.Пометка = РежимОтображенияСобытий = 0;
	Элементы.ДанныеПоПеревозкамСобытияОтображатьСобытияПоВсемСтрокам.Пометка   = РежимОтображенияСобытий = 1;
	
	Элементы.ДанныеПоПеревозкамСобытияТС.Видимость       = РежимОтображенияСобытий = 1;
	Элементы.ДанныеПоПеревозкамСобытияВодитель.Видимость = РежимОтображенияСобытий = 1;
	
	Элементы.ДанныеПоПунктамТС.Видимость       = РежимОтображенияПунктов = 1;
	Элементы.ДанныеПоПунктамВодитель.Видимость = РежимОтображенияПунктов = 1;
	
	ИспользоватьОпоздания = ПолучитьФункциональнуюОпцию("уатПрогнозированиеОпозданийПоМаршрутнымЛистам");
	Элементы.ДанныеПоТранспортуВремяОпоздания.Видимость = ИспользоватьОпоздания;
	
	Если ВидМаршрутныхДокументов = 1 Тогда
		флИспользоватьПланФактВремени = Константы.уатУчетПланФактаПоМаршрутуВПутевыхЛистах.Получить();
		
		Элементы.ДанныеПоПунктамПрибытиеПлан.Видимость = флИспользоватьПланФактВремени;
		Элементы.ДанныеПоПунктамУбытиеПлан.Видимость   = флИспользоватьПланФактВремени;
		Элементы.ДанныеПоПунктамПрибытиеФакт.Видимость = Истина;
		Элементы.ДанныеПоПунктамУбытиеФакт.Видимость   = Истина;
		
		Элементы.ДанныеПоПунктамЗаказы.Видимость       = Ложь;
		Элементы.ДанныеПоПунктамАдресУбытия.Видимость  = Истина;
		Элементы.ДанныеПоПунктамФормироватьУведомленияОбОпозданиях.Видимость = Ложь;
		
		Элементы.ДанныеПоПунктамПункт.Заголовок        = НСтр("en='Arrival address';ru='Адрес прибытия'");
	Иначе
		флИспользоватьПланФактВремени = Константы.уатУчетПланФактаПоМаршрутуВМаршрутныхЛистах.Получить();
		
		Элементы.ДанныеПоПунктамПрибытиеПлан.Видимость = Истина;
		Элементы.ДанныеПоПунктамУбытиеПлан.Видимость   = Истина;
		Элементы.ДанныеПоПунктамПрибытиеФакт.Видимость = флИспользоватьПланФактВремени;
		Элементы.ДанныеПоПунктамУбытиеФакт.Видимость   = флИспользоватьПланФактВремени;
		
		Элементы.ДанныеПоПунктамЗаказы.Видимость       = Истина;
		Элементы.ДанныеПоПунктамАдресУбытия.Видимость  = Ложь;
		Элементы.ДанныеПоПунктамФормироватьУведомленияОбОпозданиях.Видимость = ИспользоватьОпоздания
			И ПолучитьФункциональнуюОпцию("уатИспользоватьУведомления_уэ");
		
		Элементы.ДанныеПоПунктамПункт.Заголовок        = НСтр("en='Point';ru='Пункт'");
	КонецЕсли;
	
	Если флИспользоватьПланФактВремени Тогда
		Элементы.ДанныеПоПунктамПрибытиеПлан.Заголовок = НСтр("en='Arrival plan';ru='Прибытие план'");
		Элементы.ДанныеПоПунктамУбытиеПлан.Заголовок   = НСтр("en='Departure plan';ru='Убытие план'");
	Иначе
		Элементы.ДанныеПоПунктамПрибытиеПлан.Заголовок = НСтр("en='Arrival';ru='Прибытие'");
		Элементы.ДанныеПоПунктамУбытиеПлан.Заголовок   = НСтр("en='Departure';ru='Убытие'");
	КонецЕсли;
	
	Элементы.Трек_ПроигратьПлановыйМаршрут.Видимость    = НЕ ТипЭлектронныхКарт = Перечисления.уатТипыЭлектронныхКарт.Яндекс;
	Элементы.Трек_ПроигратьФактическийМаршрут.Видимость = НЕ ТипЭлектронныхКарт = Перечисления.уатТипыЭлектронныхКарт.Яндекс;
	Элементы.Трек_СкоростьПроигрывания.Видимость        = НЕ ТипЭлектронныхКарт = Перечисления.уатТипыЭлектронныхКарт.Яндекс;

КонецПроцедуры

&НаСервереБезКонтекста
Процедура СохранитьИзмененияВДокументе(Знач ДокументСсылка, Знач ДанныеДляИзменения)
	
	уатОбщегоНазначения_проф.СохранитьИзмененияВДокументе(ДокументСсылка, ДанныеДляИзменения);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ДанныеПоТранспортуПриАктивизацииЯчейки()
	
	ТекущееТС     = Элементы.ДанныеПоТранспорту.ТекущаяСтрока;
	ТекущиеДанные = Элементы.ДанныеПоТранспорту.ДанныеСтроки(ТекущееТС);

	ТекущееТС     = Элементы.ДанныеПоТранспорту.ТекущаяСтрока;
	ТекущиеДанные = Элементы.ДанныеПоТранспорту.ДанныеСтроки(ТекущееТС);
	
	Если ТекущееТС = СтрокаТС Тогда
		Возврат;
	КонецЕсли;
	
	Если ТекущиеДанные = Неопределено
		ИЛИ ТипЗнч(ТекущееТС) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		ДанныеПоПунктам.Очистить();
		Возврат;
	КонецЕсли;
	
	СтрокаТС = ТекущееТС;
	
	ПлановыйМаршрут = "[]";
	ФактическоеРасстояние    = "- км";
	ПлановоеРасстояние       = "- км"; 
	
	ТекущееПоле = Элементы.ДанныеПоТранспорту.ТекущийЭлемент;

	Если ТекущееПоле = Элементы.ДанныеПоТранспортуНаименование
		И НЕ ТекущиеДанные.ЭтоГруппа Тогда 
		Если мсвОтмеченныеТС.Найти(ТекущееТС) = Неопределено Тогда 
			мсвОтмеченныеТС.Добавить(ТекущееТС);
			ДанныеПоТранспорту.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("мсвОтмеченныеТС", мсвОтмеченныеТС);
			ДанныеПоТранспорту.КомпоновщикНастроек.Настройки.ДополнительныеСвойства.Вставить("РабочаяДата", РабочаяДата);
			Элементы.ДанныеПоТранспорту.Обновить();
		КонецЕсли;
		
		ТСДляФокусировки = ТекущееТС;
	КонецЕсли;
	
	АвтоМасштабироватьПриОткрытии = Истина;
	
	УстановитьПериодФактическогоТрека();
	
	ОбработчикАвтообновленияСобытий();
	ОбновитьДанныеПоПунктамКлиент();

		
	УстановитьНаличиеСпидометра(ТекущиеДанные.Ссылка, мсвОтмеченныеТС);
	УстановитьДанныеТрека();

	ОтключитьОбработчикОжидания("ОбработчикАвтообновленияКарты");
	ПодключитьОбработчикОжидания("ОбработчикАвтообновленияКарты", 0.5, Истина);
	
	СформироватьОтчеты();
	
	Если ОтображатьДопИнформациюПоТС Тогда
		ДопИнфоПоТС = ПолучитьТекстДопИнфоПоТС(ТекущееТС, ТекущиеДанные.Организация, ТекущиеДанные.Водитель);
	Иначе
		ДопИнфоПоТС = "";
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСобытияПоДаннымПеревозок(ОписанияОповещений=Неопределено, ТекТС=Неопределено, ТекВодитель=Неопределено)
	
	Если ОписанияОповещений = Неопределено Тогда 
		ОписанияОповещений = Новый Массив();
	КонецЕсли;
	
	ТабСобытий = ПолучитьСобытияПоДаннымПеревозок(РабочаяДата, КоличествоДней, ТекТС, ТекВодитель);
	
	мсвУдаляемыеСобытия = Новый Массив();
	Для Каждого СтароеСобытие Из ДанныеПоСобытиям Цикл 
		Фильтр = Новый Структура();
		Фильтр.Вставить("Дата",              СтароеСобытие.Дата);
		Фильтр.Вставить("ВидСобытия",        СтароеСобытие.ВидСобытия);
		Фильтр.Вставить("СодержаниеСобытия", СтароеСобытие.СодержаниеСобытия);
		Фильтр.Вставить("ТС",                СтароеСобытие.ТС);
		Фильтр.Вставить("Водитель",          СтароеСобытие.Водитель);
		
		НайдСтроки = Ложь;
		Для Каждого ТекСтрока Из ТабСобытий Цикл
			Если ТекСтрока.Дата = СтароеСобытие.Дата 
				И ТекСтрока.ВидСобытия = СтароеСобытие.ВидСобытия 
				И ТекСтрока.СодержаниеСобытия = СтароеСобытие.СодержаниеСобытия 
				И ТекСтрока.ТС = СтароеСобытие.ТС
				И ТекСтрока.Водитель = СтароеСобытие.Водитель Тогда
				НайдСтроки = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если НЕ НайдСтроки Тогда
			мсвУдаляемыеСобытия.Добавить(СтароеСобытие);
		КонецЕсли;
		
	КонецЦикла;
	
	Для Каждого УдаляемаяСтрока Из мсвУдаляемыеСобытия Цикл 
		ДанныеПоСобытиям.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
	Для Каждого НовоеСобытие Из ТабСобытий Цикл
		
		Фильтр = Новый Структура();
		Фильтр.Вставить("Дата",              НовоеСобытие.Дата);
		Фильтр.Вставить("ВидСобытия",        НовоеСобытие.ВидСобытия);
		Фильтр.Вставить("СодержаниеСобытия", НовоеСобытие.СодержаниеСобытия);
		Фильтр.Вставить("ТС",                НовоеСобытие.ТС);
		Фильтр.Вставить("Водитель",          НовоеСобытие.Водитель);
		НайдСтроки = ДанныеПоСобытиям.НайтиСтроки(Фильтр);
		
		Если НайдСтроки.Количество() = 0 Тогда 
			НоваяСтрока = ДанныеПоСобытиям.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, НовоеСобытие);
			
			Если НовоеСобытие.Дата >= ДатаОповещенияОСобытиях Тогда 
				ОписаниеОповещения = Новый Структура();
				ОписаниеОповещения.Вставить("Дата",              НовоеСобытие.Дата);
				ОписаниеОповещения.Вставить("ВидСобытия",        НовоеСобытие.ВидСобытия);
				ОписаниеОповещения.Вставить("СодержаниеСобытия", НовоеСобытие.СодержаниеСобытия);
				ОписаниеОповещения.Вставить("ТС",                НовоеСобытие.ТС);
				ОписаниеОповещения.Вставить("Водитель",          НовоеСобытие.Водитель);
				ОписанияОповещений.Добавить(ОписаниеОповещения);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	ДатаОповещенияОСобытиях = ТекущаяДата();
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьСобытияПоДаннымПеревозок(РабочаяДата, КоличествоДней, ТекТС=Неопределено, ТекВодитель=Неопределено)
	
	Запрос = Новый Запрос(); 
	Запрос.УстановитьПараметр("Пользователь",  Пользователи.АвторизованныйПользователь());
	Запрос.УстановитьПараметр("ТекТС",         ТекТС);
	Запрос.УстановитьПараметр("ТекВодитель",   ?(ТипЗнч(ТекВодитель) = Тип("СправочникСсылка.Сотрудники"), ТекВодитель.ФизическоеЛицо, ТекВодитель));
	Запрос.УстановитьПараметр("НачалоПериода", ?(НачалоДня(РабочаяДата) = '00010101', '00010101', НачалоДня(РабочаяДата) - КоличествоДней * 86400));
	Запрос.УстановитьПараметр("КонецПериода",  ?(НачалоДня(РабочаяДата) = '00010101', '39991231', КонецДня(РабочаяДата)));
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатДополнительныеСведенияПоGPS.Период КАК Дата,
	|	ПРЕДСТАВЛЕНИЕССЫЛКИ(уатДополнительныеСведенияПоGPS.ТипСобытия) КАК ВидСобытия,
	|	ПРЕДСТАВЛЕНИЕ(уатДополнительныеСведенияПоGPS.Значение) КАК СодержаниеСобытия,
	|	уатДополнительныеСведенияПоGPS.ТС КАК ТС,
	|	ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка) КАК Водитель
	|ИЗ
	|	РегистрСведений.уатДополнительныеСведенияПоGPS КАК уатДополнительныеСведенияПоGPS
	|ГДЕ
	|	уатДополнительныеСведенияПоGPS.Период МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ВЫБОР
	|			КОГДА &ТекТС = НЕОПРЕДЕЛЕНО
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ уатДополнительныеСведенияПоGPS.ТС = &ТекТС
	|		КОНЕЦ
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	уатСообщенияОтВодителей.Дата,
	|	""Сообщение от водителя"",
	|	ВЫРАЗИТЬ(уатСообщенияОтВодителей.ТекстСообщения КАК СТРОКА(1024)),
	|	ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка),
	|	уатСообщенияОтВодителей.Отправитель
	|ИЗ
	|	РегистрСведений.уатЧатыСВодителями КАК уатСообщенияОтВодителей
	|ГДЕ
	|	уатСообщенияОтВодителей.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ВЫБОР
	|			КОГДА &ТекВодитель = НЕОПРЕДЕЛЕНО
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ уатСообщенияОтВодителей.Отправитель = &ТекВодитель
	|		КОНЕЦ
	|   И уатСообщенияОтВодителей.ВидСообщения <> ЗНАЧЕНИЕ(Перечисление.уатВидыСообщенийМобильногоПриложения.Исходящее)
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	уатСообщенияВодителям.Дата,
	|	""Сообщение водителю"",
	|	ВЫРАЗИТЬ(уатСообщенияВодителям.ТекстСообщения КАК СТРОКА(1024)),
	|	ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка),
	|	уатСтатусыСообщенийМобильногоПриложения.Получатель
	|ИЗ
	|	РегистрСведений.уатЧатыСВодителями КАК уатСообщенияВодителям
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатСтатусыСообщенийМобильногоПриложения КАК уатСтатусыСообщенийМобильногоПриложения
	|		ПО уатСообщенияВодителям.Идентификатор = уатСтатусыСообщенийМобильногоПриложения.Идентификатор
	|ГДЕ
	|	уатСообщенияВодителям.Дата МЕЖДУ &НачалоПериода И &КонецПериода
	|	И ВЫБОР
	|			КОГДА &ТекВодитель = НЕОПРЕДЕЛЕНО
	|				ТОГДА ИСТИНА
	|			ИНАЧЕ уатСтатусыСообщенийМобильногоПриложения.Получатель = &ТекВодитель
	|		КОНЕЦ
	|	И уатСообщенияВодителям.ВидСообщения = ЗНАЧЕНИЕ(Перечисление.уатВидыСообщенийМобильногоПриложения.Исходящее)
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	НапоминанияПользователя.СрокНапоминания,
	|	""Напоминание"",
	|	ВЫРАЗИТЬ(НапоминанияПользователя.Описание КАК СТРОКА(1024)),
	|	ЗНАЧЕНИЕ(Справочник.уатТС.ПустаяСсылка),
	|	ЗНАЧЕНИЕ(Справочник.ФизическиеЛица.ПустаяСсылка)
	|ИЗ
	|	РегистрСведений.НапоминанияПользователя КАК НапоминанияПользователя
	|ГДЕ
	|	НапоминанияПользователя.СрокНапоминания МЕЖДУ &НачалоПериода И &КонецПериода
	|	И НапоминанияПользователя.Пользователь = &Пользователь";
	
	Выборка  = Запрос.Выполнить().Выбрать();
	мСобытий = Новый Массив();
	Пока Выборка.Следующий() Цикл
		СтруктураПолей = Новый Структура("Дата, ВидСобытия, СодержаниеСобытия, ТС, Водитель");
		ЗаполнитьЗначенияСвойств(СтруктураПолей, Выборка);
		мСобытий.Добавить(СтруктураПолей);
	КонецЦикла;
	Возврат мСобытий;
КонецФункции

&НаКлиенте
Процедура ОбработчикАвтообновленияСобытий()
	
	Если НЕ ФлагВидимостьГруппыСобытия Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.ДанныеПоТранспорту.ТекущиеДанные;
	
	Если РежимОтображенияСобытий = 1 Тогда 
		ТекТС       = Неопределено;
		ТекВодитель = Неопределено;
	ИначеЕсли ТекущиеДанные = Неопределено 
		ИЛИ ТекущиеДанные.Свойство("ГруппировкаСтроки") Тогда 
		ТекТС       = ПредопределенноеЗначение("Справочник.уатТС.ПустаяСсылка");
		ТекВодитель = ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");
	Иначе
		ТекТС       = ТекущиеДанные.Ссылка;
		ТекВодитель = ТекущиеДанные.Водитель;
	КонецЕсли;
	
	ОписанияОповещений = Новый Массив();
	ОбновитьСобытияПоДаннымПеревозок(ОписанияОповещений, ТекТС, ТекВодитель);
	ОповеститьОНовыхСобытиях(ОписанияОповещений);
	
КонецПроцедуры

&НаКлиенте
Процедура ОповеститьОНовыхСобытиях(ОписанияОповещений)
	
	Если Не ИнформироватьОНовыхСобытиях Тогда 
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекСобытие Из ОписанияОповещений Цикл 
		ПоказатьОповещениеПользователя(
			"" + ТекСобытие.ВидСобытия + " " + НСтр("en='from';ru='от'") + " " + ТекСобытие.Дата,
			,
			ТекСобытие.СодержаниеСобытия, 
			БиблиотекаКартинок.Информация32
		);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ОпределитьДопустимоеОтклонениеОтВремени()
	
	ТекПользователь = ПользователиКлиентСервер.АвторизованныйПользователь();
	ОсновнаяОрганизация              = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ТекПользователь, "ОсновнаяОрганизация");
	ОсновноеПодразделениеОрганизации = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ТекПользователь, "ОсновноеПодразделениеОрганизации");
	
	СтруктураОбъектовНастроек = Новый Структура;
	СтруктураОбъектовНастроек.Вставить("Организация",   ОсновнаяОрганизация);
	СтруктураОбъектовНастроек.Вставить("Подразделение", ОсновноеПодразделениеОрганизации);
	
	ДопустимоеОтклонениеОтВремениПрибытия = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(СтруктураОбъектовНастроек, ПланыВидовХарактеристик.уатПраваИНастройки.ДопустимоеОтклонениеОтВремениПрибытия);
	ДопустимоеОтклонениеОтВремениПрибытия = ?(ДопустимоеОтклонениеОтВремениПрибытия <> Неопределено, ДопустимоеОтклонениеОтВремениПрибытия, 15);
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСохраненияНастроек(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ВидМаршрутныхДокументов                = РезультатЗакрытия.ВидМаршрутныхДокументов;
	ПериодАвтоматическогоОбновленияКарты   = РезультатЗакрытия.ПериодАвтоматическогоОбновленияКарты;
	ИнформироватьОНовыхСобытиях            = РезультатЗакрытия.ИнформироватьОНовыхСобытиях;
	ПериодАвтоматическогоОбновленияСобытий = РезультатЗакрытия.ПериодАвтоматическогоОбновленияСобытий;
	КластеризацияМаркеровНаКарте           = РезультатЗакрытия.КластеризацияМаркеровНаКарте;
	ПунктФокусировкиПриОткрытии            = РезультатЗакрытия.ПунктФокусировкиПриОткрытии;
	НачальныйМасштаб                       = РезультатЗакрытия.НачальныйМасштаб;
	ИспользоватьАвтомасштабирование        = РезультатЗакрытия.ИспользоватьАвтомасштабирование;
	ОтображатьДопИнформациюПоТС            = РезультатЗакрытия.ОтображатьДопИнформациюПоТС;
	
	СохранитьНастройки();
	УстановитьВозможностьРедактированияФакта();
	УстановитьВидимостьДоступность();
	
	ОбновитьСобытия();
	
	Попытка
		ОтключитьОбработчикОжидания("ОбновитьДанныеПоПунктамКлиент");
	Исключение
	КонецПопытки;
	
	ОбновитьДанныеПоПунктамКлиент();
	
	Если Не ПериодАвтоматическогоОбновленияКарты = 0 Тогда 
		ПодключитьОбработчикОжидания("ОбновитьДанныеПоПунктамКлиент", ПериодАвтоматическогоОбновленияКарты, Ложь);
	КонецЕсли;
	
	АвтоМасштабироватьПриОткрытии = Истина;
	
	Попытка
		ОтключитьОбработчикОжидания("ОбработчикАвтообновленияКарты");
	Исключение
	КонецПопытки;
	
	ОбработчикАвтообновленияКарты();
	
	Если Не ПериодАвтоматическогоОбновленияКарты = 0 Тогда 
		ПодключитьОбработчикОжидания("ОбработчикАвтообновленияКарты", ПериодАвтоматическогоОбновленияКарты, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПунктыСледованияПоМаршруту(ВыбранныйДокумент)
	
	Возврат уатЗащищенныеФункцииСервер_проф.ПолучитьПунктыСледования(ВыбранныйДокумент);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьКоординатыФактическогоМаршрута(Знач ВыбранныйДокумент, Знач ПериодМаршрутаС, Знач ПериодМаршрутаПо)
	
	Если ТипЗнч(ВыбранныйДокумент) = Тип("ДокументСсылка.уатПутевойЛист") Тогда 
		тТипДокумента = 1;
	Иначе 
		тТипДокумента = 0;
	КонецЕсли;
	
	Возврат уатЗащищенныеФункцииСервер_проф.ПолучитьКоординатыФактическогоМаршрута(
		ВыбранныйДокумент, 
		ПериодМаршрутаС, 
		ПериодМаршрутаПо,
		тТипДокумента
	);
	
КонецФункции // ПолучитьКоординатыФактическогоМаршрута()

&НаСервере
Функция ПолучитьТекущиеТСКомпоновщик()
	
	мсвТС = Новый Массив();
	
	Схема = Элементы.ДанныеПоТранспорту.ПолучитьИсполняемуюСхемуКомпоновкиДанных();
	Настройки = Элементы.ДанныеПоТранспорту.ПолучитьИсполняемыеНастройкиКомпоновкиДанных();
	
	Если Настройки.Структура.Количество() = 0 Тогда 
		Возврат Новый Массив();
	КонецЕсли;
	
	ВыбранныеПоля   = Настройки.Структура[0].Выбор.Элементы;
	ПоляГруппировки = Настройки.Структура[0].ПоляГруппировки.Элементы;
	
	ВыбранныеПоля.Очистить();
	ПоляГруппировки.Очистить();
	
	ПолеКомпоновки = ВыбранныеПоля.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ПолеКомпоновки.Заголовок     = "Ссылка";
	ПолеКомпоновки.Использование = Истина;
	ПолеКомпоновки.Поле          = Новый ПолеКомпоновкиДанных("Ссылка");
	
	ПолеКомпоновки = ВыбранныеПоля.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ПолеКомпоновки.Заголовок     = "Наименование";
	ПолеКомпоновки.Использование = Истина;
	ПолеКомпоновки.Поле          = Новый ПолеКомпоновкиДанных("Наименование");
	
	ПолеКомпоновки = ВыбранныеПоля.Добавить(Тип("ВыбранноеПолеКомпоновкиДанных"));
	ПолеКомпоновки.Заголовок     = "КартинкаПринадлежность";
	ПолеКомпоновки.Использование = Истина;
	ПолеКомпоновки.Поле          = Новый ПолеКомпоновкиДанных("КартинкаПринадлежность");
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных();
	МакетКомпоновки = КомпоновщикМакета.Выполнить(Схема, Настройки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(МакетКомпоновки);
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	
	МассивТСЗапрос = Новый Массив();
	
	Для Каждого ТекТС Из ПроцессорВывода.Вывести(ПроцессорКомпоновки) Цикл 
		Если ТекТС.Ссылка.ЭтоГруппа Тогда 
			Продолжить;
		КонецЕсли;
		
		МассивТСЗапрос.Добавить(ТекТС.Ссылка);
		
		ДанныеТС = Новый Структура();
		ДанныеТС.Вставить("Ссылка",                 ТекТС.Ссылка);
		ДанныеТС.Вставить("Лат",                    0);
		ДанныеТС.Вставить("Лон",                    0);
		ДанныеТС.Вставить("Наименование",           ТекТС.Наименование);
		ДанныеТС.Вставить("КартинкаПринадлежность", ТекТС.КартинкаПринадлежность);
		
		мсвТС.Добавить(ДанныеТС);
	КонецЦикла;
	
	табКоординат = уатЗащищенныеФункцииСервер_проф.ПолучитьТекущиеКоординатыТС(
		МассивТСЗапрос, 
		?(НачалоДня(РабочаяДата) = '00010101', '00010101', НачалоДня(РабочаяДата)-86400),
		?(НачалоДня(РабочаяДата) = '00010101', '39991231', КонецДня(РабочаяДата))
	);
	
	Для Каждого ТекТС Из мсвТС Цикл 
		СтрокаКоординат = табКоординат.Найти(ТекТС.Ссылка, "ТС");
		
		Если Не СтрокаКоординат = Неопределено Тогда 
			ТекТС.Лат = СтрокаКоординат.Лат;
			ТекТС.Лон = СтрокаКоординат.Лон;
		КонецЕсли;
	КонецЦикла;
	
	Возврат мсвТС;
	
КонецФункции // ПолучитьТекущиеТСКомпоновщик()

&НаКлиенте
Процедура ОбновитьДанныеПоПунктамКлиент()
	
	Если РежимОтображенияПунктов = 0 Тогда 
		ТекущаяСтрока = Элементы.ДанныеПоТранспорту.ТекущаяСтрока;
		Если ТекущаяСтрока = Неопределено Тогда 
			Возврат;
		КонецЕсли;
	Иначе 
		ТекущаяСтрока = Неопределено;
	КонецЕсли;
	
	Если ТипЗнч(ТекущаяСтрока) = Тип("СтрокаГруппировкиДинамическогоСписка") Тогда
		ТекущаяСтрока = ПредопределенноеЗначение("Справочник.уатТС.ПустаяСсылка");
	КонецЕсли;
	
	Если ВидМаршрутныхДокументов = 1 Тогда 
		ОбновитьДанныеПунктовПоПутевымЛистам(ТекущаяСтрока);
	Иначе 
		ОбновитьДанныеПунктовПоМаршрутнымЛистам(ТекущаяСтрока);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПунктовПоПутевымЛистам(Знач ТранспортноеСредство=Неопределено)
	
	НовДанныеПоПунктам = РеквизитФормыВЗначение("ДанныеПоПунктам");
	НовДанныеПоПунктам.Очистить();
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТранспортноеСредство", ТранспортноеСредство);
	Запрос.УстановитьПараметр("НачалоПериода",        ?(НачалоДня(РабочаяДата) = '00010101', '00010101', НачалоДня(РабочаяДата) - (КоличествоДней - 1) * 86400));
	Запрос.УстановитьПараметр("КонецПериода",         ?(НачалоДня(РабочаяДата) = '00010101', '39991231', КонецДня(РабочаяДата)));
	Запрос.УстановитьПараметр("ИспользоватьПланФакт", Константы.уатУчетПланФактаПоМаршрутуВПутевыхЛистах.Получить());
	Запрос.УстановитьПараметр("ПустаяДата",           '00010101');
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	уатПутевойЛист.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА уатПутевойЛист.Проведен
	|			ТОГДА 1
	|		КОГДА уатПутевойЛист.ПометкаУдаления
	|			ТОГДА 2
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтатусДокумента,
	|	уатПутевойЛист.Номер КАК НомерДокумента,
	|	уатПутевойЛист.ТранспортноеСредство КАК ТС,
	|	уатПутевойЛист.Водитель1 КАК Водитель,
	|	уатПутевойЛист.ОборудованиеПрицеп1 КАК Прицеп1,
	|	уатПутевойЛист.ОборудованиеПрицеп2 КАК Прицеп2,
	|	уатПутевойЛистЗадание.Выполнено КАК Выполнен,
	|	уатПутевойЛистЗадание.АдресПрибытия КАК АдресПрибытия,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПланФакт
	|			ТОГДА уатПутевойЛистЗадание.ВремяПрибытияФакт
	|		ИНАЧЕ уатПутевойЛистЗадание.ВремяПрибытия
	|	КОНЕЦ КАК ПрибытиеФакт,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПланФакт
	|			ТОГДА уатПутевойЛистЗадание.ВремяУбытияФакт
	|		ИНАЧЕ уатПутевойЛистЗадание.ВремяУбытия
	|	КОНЕЦ КАК УбытиеФакт,
	|	уатПутевойЛистЗадание.Контрагент КАК Контрагент,
	|	уатПутевойЛистЗадание.АдресУбытия КАК АдресУбытия,
	|	уатПутевойЛистЗадание.НомерСтроки КАК НомерСтроки,
	|	уатПутевойЛистЗадание.НомерЕздки КАК НомерЕздки,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПланФакт
	|			ТОГДА уатПутевойЛистЗадание.ВремяПрибытия
	|		ИНАЧЕ &ПустаяДата
	|	КОНЕЦ КАК ПрибытиеПлан,
	|	ВЫБОР
	|		КОГДА &ИспользоватьПланФакт
	|			ТОГДА уатПутевойЛистЗадание.ВремяУбытия
	|		ИНАЧЕ &ПустаяДата
	|	КОНЕЦ КАК УбытиеПлан
	|ПОМЕСТИТЬ ВТ_Документы
	|ИЗ
	|	Документ.уатПутевойЛист.Задание КАК уатПутевойЛистЗадание
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатПутевойЛист КАК уатПутевойЛист
	|		ПО уатПутевойЛистЗадание.Ссылка = уатПутевойЛист.Ссылка
	|			И (уатПутевойЛист.Проведен)
	|			И (НЕ уатПутевойЛист.ПометкаУдаления)
	|			И (ВЫБОР
	|				КОГДА &ТранспортноеСредство = НЕОПРЕДЕЛЕНО
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ уатПутевойЛист.ТранспортноеСредство = &ТранспортноеСредство
	|			КОНЕЦ)
	|ГДЕ
	|	ВЫБОР
	|			КОГДА уатПутевойЛистЗадание.ВремяПрибытия = ДАТАВРЕМЯ(1, 1, 1)
	|					И уатПутевойЛистЗадание.ВремяУбытия = ДАТАВРЕМЯ(1, 1, 1)
	|				ТОГДА уатПутевойЛист.ДатаВыезда <= &КонецПериода
	|						И уатПутевойЛист.ДатаВозвращения >= &НачалоПериода
	|			ИНАЧЕ уатПутевойЛистЗадание.ВремяПрибытия <= &КонецПериода
	|					И уатПутевойЛистЗадание.ВремяУбытия >= &НачалоПериода
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатПутевойЛистЗадание.Ссылка КАК МаршрутныйДокумент,
	|	уатПутевойЛистЗадание.Выполнен КАК Выполнен,
	|	уатПутевойЛистЗадание.СтатусДокумента КАК СтатусДокумента,
	|	уатПутевойЛистЗадание.НомерДокумента КАК НомерДокумента,
	|	уатПутевойЛистЗадание.АдресПрибытия КАК Пункт,
	|	уатПутевойЛистЗадание.ПрибытиеФакт КАК ПрибытиеФакт,
	|	уатПутевойЛистЗадание.УбытиеФакт КАК УбытиеФакт,
	|	уатПутевойЛистЗадание.ТС КАК ТС,
	|	уатПутевойЛистЗадание.Водитель КАК Водитель,
	|	уатПутевойЛистЗадание.Контрагент КАК Контрагент,
	|	уатПутевойЛистЗадание.АдресУбытия КАК АдресУбытия,
	|	уатПутевойЛистЗадание.НомерСтроки КАК НомерСтроки,
	|	уатПутевойЛистЗадание.Прицеп1 КАК Прицеп1,
	|	уатПутевойЛистЗадание.Прицеп2 КАК Прицеп2,
	|	уатПутевойЛистЗадание.НомерЕздки КАК НомерЕздки,
	|	уатПутевойЛистЗадание.ПрибытиеПлан КАК ПрибытиеПлан,
	|	уатПутевойЛистЗадание.УбытиеПлан КАК УбытиеПлан
	|ИЗ
	|	ВТ_Документы КАК уатПутевойЛистЗадание
	|
	|УПОРЯДОЧИТЬ ПО
	|	МаршрутныйДокумент,
	|	НомерСтроки";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		Если (РежимОтображенияВыполненныхПунктов = 1 И Выборка.Выполнен)
				Или (РежимОтображенияВыполненныхПунктов = 2 И Не Выборка.Выполнен) Тогда 
			Продолжить;
		КонецЕсли;
		
		Если Не ПустаяСтрока(ДанныеПоПунктамПоиск) Тогда 
			флСоответствуетОтбору = Ложь;
			
			Если Не СтрНайти(Выборка.МаршрутныйДокумент.Номер, ДанныеПоПунктамПоиск) = 0 Тогда 
				флСоответствуетОтбору = Истина;
			КонецЕсли;
			
			Если Не СтрНайти(Выборка.Контрагент.Наименование, ДанныеПоПунктамПоиск) = 0 Тогда 
				флСоответствуетОтбору = Истина;
			КонецЕсли;
			
			Если Не флСоответствуетОтбору Тогда 
				Если ТипЗнч(Выборка.Пункт) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда 
					Если Не СтрНайти(Выборка.Пункт.Наименование, ДанныеПоПунктамПоиск) = 0 Тогда 
						флСоответствуетОтбору = Истина;
					КонецЕсли;
				Иначе 
					Если Не СтрНайти(Выборка.Пункт, ДанныеПоПунктамПоиск) = 0 Тогда 
						флСоответствуетОтбору = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если Не флСоответствуетОтбору Тогда 
				Если ТипЗнч(Выборка.АдресУбытия) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда 
					Если Не СтрНайти(Выборка.АдресУбытия.Наименование, ДанныеПоПунктамПоиск) = 0 Тогда 
						флСоответствуетОтбору = Истина;
					КонецЕсли;
				Иначе 
					Если Не СтрНайти(Выборка.АдресУбытия, ДанныеПоПунктамПоиск) = 0 Тогда 
						флСоответствуетОтбору = Истина;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			Если Не СтрНайти(Выборка.ТС.Наименование, ДанныеПоПунктамПоиск) = 0 Тогда 
				флСоответствуетОтбору = Истина;
			КонецЕсли;
			
			Если Не СтрНайти(Выборка.Водитель.Наименование, ДанныеПоПунктамПоиск) = 0 Тогда 
				флСоответствуетОтбору = Истина;
			КонецЕсли;
			
			Если Не СтрНайти(Выборка.Прицеп1.Наименование, ДанныеПоПунктамПоиск) = 0 Тогда 
				флСоответствуетОтбору = Истина;
			КонецЕсли;
			
			Если Не СтрНайти(Выборка.Прицеп2.Наименование, ДанныеПоПунктамПоиск) = 0 Тогда 
				флСоответствуетОтбору = Истина;
			КонецЕсли;
			
			Если Не флСоответствуетОтбору Тогда 
				Продолжить;
			КонецЕсли;
		КонецЕсли;
		
		НовСтрока = НовДанныеПоПунктам.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока, Выборка,, "НомерСтроки");
		НовСтрока.НомерПункта = Выборка.НомерСтроки;
		НовСтрока.НомерСтроки = Формат(Выборка.НомерСтроки, "ЧН=0; ЧГ=0");
		
		Если ЗначениеЗаполнено(Выборка.Контрагент) Тогда 
			НовСтрока.ЗаказыКонтрагенты.Добавить(Выборка.Контрагент);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Выборка.Прицеп1) Тогда 
			НовСтрока.Прицепы = Выборка.Прицеп1;
		КонецЕсли;
		Если ЗначениеЗаполнено(Выборка.Прицеп2) Тогда 
			НовСтрока.Прицепы = НовСтрока.Прицепы + ?(НовСтрока.Прицепы="", "", ", ") + Выборка.Прицеп2;
		КонецЕсли;
	КонецЦикла;
	
	КолонкиСопоставления = Новый Массив();
	КолонкиСопоставления.Добавить("МаршрутныйДокумент");
	КолонкиСопоставления.Добавить("Выполнен");
	КолонкиСопоставления.Добавить("СтатусДокумента");
	КолонкиСопоставления.Добавить("НомерДокумента");
	КолонкиСопоставления.Добавить("НомерПункта");
	КолонкиСопоставления.Добавить("Пункт");
	КолонкиСопоставления.Добавить("ПрибытиеПлан");
	КолонкиСопоставления.Добавить("УбытиеПлан");
	КолонкиСопоставления.Добавить("ПрибытиеФакт");
	КолонкиСопоставления.Добавить("УбытиеФакт");
	КолонкиСопоставления.Добавить("ТС");
	КолонкиСопоставления.Добавить("Заказы");
	КолонкиСопоставления.Добавить("Водитель");
	КолонкиСопоставления.Добавить("Контрагент");
	КолонкиСопоставления.Добавить("АдресУбытия");
	КолонкиСопоставления.Добавить("НомерСтроки");
	КолонкиСопоставления.Добавить("НомерЦветаТекстаСтроки");
	
	мсвУдаляемыеСтроки = Новый Массив();
	Для Каждого СтараяСтрока Из ДанныеПоПунктам Цикл 
		СтрокаПроверена = Ложь;
		
		Для Каждого НоваяСтрока Из НовДанныеПоПунктам Цикл 
			СтрокаИдентична = Истина;
			
			Для Каждого ИмяКлюча Из КолонкиСопоставления Цикл 
				Если Не СтараяСтрока[ИмяКлюча] = НоваяСтрока[ИмяКлюча] Тогда 
					СтрокаИдентична = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если СтрокаИдентична Тогда 
				СтрокаПроверена = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не СтрокаПроверена Тогда 
			мсвУдаляемыеСтроки.Добавить(СтараяСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого УдаляемаяСтрока Из мсвУдаляемыеСтроки Цикл 
		ДанныеПоПунктам.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
	Для Каждого НоваяСтрока Из НовДанныеПоПунктам Цикл 
		СтрокаНайдена = Ложь;
		
		Для Каждого СтараяСтрока Из ДанныеПоПунктам Цикл 
			СтрокаИдентична = Истина;
			
			Для Каждого ИмяКлюча Из КолонкиСопоставления Цикл 
				Если Не СтараяСтрока[ИмяКлюча] = НоваяСтрока[ИмяКлюча] Тогда 
					СтрокаИдентична = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если СтрокаИдентична Тогда 
				СтрокаНайдена = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не СтрокаНайдена Тогда 
			ДобСтрока = ДанныеПоПунктам.Добавить();
			ЗаполнитьЗначенияСвойств(ДобСтрока, НоваяСтрока);
		КонецЕсли;
	КонецЦикла;
	
	ДанныеПоПунктам.Сортировать("ПрибытиеПлан");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеПунктовПоМаршрутнымЛистам(Знач ТранспортноеСредство=Неопределено)
	
	НовДанныеПоПунктам = РеквизитФормыВЗначение("ДанныеПоПунктам");
	НовДанныеПоПунктам.Очистить();
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТранспортноеСредство", ТранспортноеСредство);
	Запрос.УстановитьПараметр("НачалоПериода",        ?(НачалоДня(РабочаяДата) = '00010101', '00010101', НачалоДня(РабочаяДата) - (КоличествоДней - 1) * 86400));
	Запрос.УстановитьПараметр("КонецПериода",         ?(НачалоДня(РабочаяДата) = '00010101', '39991231', КонецДня(РабочаяДата)));
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	уатМаршрутныйЛист.Ссылка КАК Ссылка,
	|	ВЫБОР
	|		КОГДА уатМаршрутныйЛист.Проведен
	|			ТОГДА 1
	|		КОГДА уатМаршрутныйЛист.ПометкаУдаления
	|			ТОГДА 2
	|		ИНАЧЕ 0
	|	КОНЕЦ КАК СтатусДокумента,
	|	уатМаршрутныйЛист.Номер КАК Номер,
	|	уатМаршрутныйЛист.ТС КАК ТС,
	|	уатМаршрутныйЛист.Водитель1 КАК Водитель1,
	|	уатМаршрутныйЛистЗаказы.ТипТочкиМаршрута КАК ТипТочкиМаршрута,
	|	уатМаршрутныйЛистЗаказы.Пункт КАК Пункт,
	|	уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя,
	|	уатМаршрутныйЛистЗаказы.Время КАК Время,
	|	уатМаршрутныйЛистЗаказы.ПрибытиеПлан КАК ПрибытиеПлан,
	|	уатМаршрутныйЛистЗаказы.ПрибытиеФакт КАК ПрибытиеФакт,
	|	уатМаршрутныйЛистЗаказы.УбытиеПлан КАК УбытиеПлан,
	|	уатМаршрутныйЛистЗаказы.УбытиеФакт КАК УбытиеФакт,
	|	уатМаршрутныйЛистЗаказы.Выполнен КАК Выполнен,
	|	уатМаршрутныйЛистЗаказы.Ожидание КАК Ожидание,
	|	уатМаршрутныйЛистЗаказы.Стоянка КАК Стоянка,
	|	уатМаршрутныйЛистЗаказы.СтоянкаИзПункта КАК СтоянкаИзПункта,
	|	уатМаршрутныйЛистЗаказы.НомерСтроки КАК НомерСтроки,
	|	уатМаршрутныйЛист.Прицеп1 КАК Прицеп1,
	|	уатМаршрутныйЛист.Прицеп2 КАК Прицеп2,
	|	уатМаршрутныйЛист.ФормироватьУведомленияОбОпозданияхВРейсе КАК ФормироватьУведомленияОбОпозданияхВРейсе
	|ПОМЕСТИТЬ ВТ_Документы
	|ИЗ
	|	Документ.уатМаршрутныйЛист.Заказы КАК уатМаршрутныйЛистЗаказы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатМаршрутныйЛист КАК уатМаршрутныйЛист
	|		ПО уатМаршрутныйЛистЗаказы.Ссылка = уатМаршрутныйЛист.Ссылка
	|			И (уатМаршрутныйЛист.Проведен)
	|			И (НЕ уатМаршрутныйЛист.ПометкаУдаления)
	|			И (ВЫБОР
	|				КОГДА &ТранспортноеСредство = НЕОПРЕДЕЛЕНО
	|					ТОГДА ИСТИНА
	|				ИНАЧЕ уатМаршрутныйЛист.ТС = &ТранспортноеСредство
	|			КОНЕЦ)
	|ГДЕ
	|	ВЫБОР
	|			КОГДА уатМаршрутныйЛистЗаказы.Выполнен
	|				ТОГДА уатМаршрутныйЛистЗаказы.ПрибытиеФакт <= &КонецПериода
	|						И уатМаршрутныйЛистЗаказы.УбытиеФакт >= &НачалоПериода
	|			ИНАЧЕ уатМаршрутныйЛистЗаказы.ПрибытиеПлан <= &КонецПериода
	|					И уатМаршрутныйЛистЗаказы.ПрибытиеПлан >= &НачалоПериода
	|		КОНЕЦ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатМаршрутныйЛистЗаказы.Ссылка КАК МаршрутныйДокумент,
	|	уатМаршрутныйЛистЗаказы.СтатусДокумента КАК СтатусДокумента,
	|	уатМаршрутныйЛистЗаказы.Номер КАК НомерДокумента,
	|	уатМаршрутныйЛистЗаказы.ТС КАК ТС,
	|	уатМаршрутныйЛистЗаказы.Водитель1 КАК Водитель,
	|	уатМаршрутныйЛистЗаказы.ТипТочкиМаршрута КАК ТипТочкиМаршрута,
	|	уатМаршрутныйЛистЗаказы.Пункт КАК Пункт,
	|	уатМаршрутныйЛистЗаказы.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя,
	|	уатМаршрутныйЛистЗаказы.Время КАК Время,
	|	уатМаршрутныйЛистЗаказы.ПрибытиеПлан КАК ПрибытиеПлан,
	|	уатМаршрутныйЛистЗаказы.ПрибытиеФакт КАК ПрибытиеФакт,
	|	уатМаршрутныйЛистЗаказы.УбытиеПлан КАК УбытиеПлан,
	|	уатМаршрутныйЛистЗаказы.УбытиеФакт КАК УбытиеФакт,
	|	уатМаршрутныйЛистЗаказы.Выполнен КАК Выполнен,
	|	уатМаршрутныйЛистЗаказы.Ожидание КАК Ожидание,
	|	уатМаршрутныйЛистЗаказы.Стоянка КАК Стоянка,
	|	уатМаршрутныйЛистЗаказы.СтоянкаИзПункта КАК СтоянкаИзПункта,
	|	уатМаршрутныйЛистЗаказы.НомерСтроки КАК НомерСтроки,
	|	уатМаршрутныйЛистЗаказы.Прицеп1 КАК Прицеп1,
	|	уатМаршрутныйЛистЗаказы.Прицеп2 КАК Прицеп2,
	|	уатМаршрутныйЛистЗаказы.ФормироватьУведомленияОбОпозданияхВРейсе КАК ФормироватьУведомленияОбОпозданияхВРейсе
	|ИЗ
	|	ВТ_Документы КАК уатМаршрутныйЛистЗаказы
	|
	|УПОРЯДОЧИТЬ ПО
	|	МаршрутныйДокумент,
	|	НомерСтроки
	|ИТОГИ
	|	МАКСИМУМ(СтатусДокумента),
	|	МАКСИМУМ(НомерДокумента),
	|	МАКСИМУМ(ТС),
	|	МАКСИМУМ(Водитель),
	|	МАКСИМУМ(Прицеп1),
	|	МАКСИМУМ(Прицеп2),
	|	МАКСИМУМ(ФормироватьУведомленияОбОпозданияхВРейсе)
	|ПО
	|	МаршрутныйДокумент";
	
	ВыборкаМЛ = Запрос.Выполнить().Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	
	ЗаполнитьКэшДанныеЗаказов(ВыборкаМЛ);
	
	Пока ВыборкаМЛ.Следующий() Цикл 
		СчПунктов = 0;
		ТаблицаПунктов = ПолучитьДанныеПоПунктамМЛ(ВыборкаМЛ.Выбрать(), ВыборкаМЛ.МаршрутныйДокумент);
		
		Для Каждого ТекСтрока Из ТаблицаПунктов Цикл 
			СчПунктов = СчПунктов + 1;
			Если (РежимОтображенияВыполненныхПунктов = 1 И ТекСтрока.Выполнен)
					Или (РежимОтображенияВыполненныхПунктов = 2 И Не ТекСтрока.Выполнен) Тогда 
				Продолжить;
			КонецЕсли;
			
			Если Не ПустаяСтрока(ДанныеПоПунктамПоиск) Тогда 
				флСоответствуетОтбору = Ложь;
				
				Если Не СтрНайти(ВыборкаМЛ.МаршрутныйДокумент.Номер, ДанныеПоПунктамПоиск) = 0 Тогда 
					флСоответствуетОтбору = Истина;
				КонецЕсли;
				
				Если Не СтрНайти(ТекСтрока.Заказы, ДанныеПоПунктамПоиск) = 0 Тогда 
					флСоответствуетОтбору = Истина;
				КонецЕсли;
				
				Если Не флСоответствуетОтбору И Не СтрНайти(ТекСтрока.Контрагент, ДанныеПоПунктамПоиск) = 0 Тогда 
					флСоответствуетОтбору = Истина;
				КонецЕсли;
				
				Если Не флСоответствуетОтбору Тогда 
					Если ТипЗнч(ТекСтрока.Пункт) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда 
						Если Не СтрНайти(ТекСтрока.Пункт.Наименование, ДанныеПоПунктамПоиск) = 0 Тогда 
							флСоответствуетОтбору = Истина;
						КонецЕсли;
					Иначе 
						Если Не СтрНайти(ТекСтрока.Пункт, ДанныеПоПунктамПоиск) = 0 Тогда 
							флСоответствуетОтбору = Истина;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				
				Если Не СтрНайти(ВыборкаМЛ.ТС.Наименование, ДанныеПоПунктамПоиск) = 0 Тогда 
					флСоответствуетОтбору = Истина;
				КонецЕсли;
				
				// Проверка отличается от остальных, т.к. возможно, что Водитель равен Неопределено
				Если ЗначениеЗаполнено(ВыборкаМЛ.Водитель) 
					И Не СтрНайти(ВыборкаМЛ.Водитель.Наименование, ДанныеПоПунктамПоиск) = 0 Тогда 
					флСоответствуетОтбору = Истина;
				КонецЕсли;
				
				Если Не СтрНайти(ВыборкаМЛ.Прицеп1.Наименование, ДанныеПоПунктамПоиск) = 0 Тогда 
					флСоответствуетОтбору = Истина;
				КонецЕсли;
				
				Если Не СтрНайти(ВыборкаМЛ.Прицеп2.Наименование, ДанныеПоПунктамПоиск) = 0 Тогда 
					флСоответствуетОтбору = Истина;
				КонецЕсли;
				
				Если Не флСоответствуетОтбору Тогда 
					Продолжить;
				КонецЕсли;
			КонецЕсли;
			
			НовСтрока = НовДанныеПоПунктам.Добавить();
			НовСтрока.МаршрутныйДокумент = ВыборкаМЛ.МаршрутныйДокумент;
			НовСтрока.Выполнен           = ТекСтрока.Выполнен;
			НовСтрока.СтатусДокумента    = ВыборкаМЛ.СтатусДокумента;
			НовСтрока.НомерДокумента     = ВыборкаМЛ.НомерДокумента;
			НовСтрока.НомерПункта        = СчПунктов;
			НовСтрока.Пункт              = ТекСтрока.Пункт;
			НовСтрока.ПрибытиеПлан       = ТекСтрока.ПрибытиеПлан;
			НовСтрока.УбытиеПлан         = ТекСтрока.УбытиеПлан;
			НовСтрока.ПрибытиеФакт       = ТекСтрока.ПрибытиеФакт;
			НовСтрока.УбытиеФакт         = ТекСтрока.УбытиеФакт;
			НовСтрока.ТС                 = ВыборкаМЛ.ТС;
			НовСтрока.Водитель           = ?(ЗначениеЗаполнено(ВыборкаМЛ.Водитель), ВыборкаМЛ.Водитель, Справочники.Сотрудники.ПустаяСсылка());
			НовСтрока.Заказы             = ТекСтрока.Заказы;
			НовСтрока.Контрагент         = ТекСтрока.Контрагент;
			НовСтрока.НомерСтроки        = ТекСтрока.НомерСтроки;
			НовСтрока.ФормироватьУведомленияОбОпозданияхВРейсе = ВыборкаМЛ.ФормироватьУведомленияОбОпозданияхВРейсе;
			
			Для Каждого ТекЗаказ Из ТекСтрока.ЗаказыКонтрагенты Цикл 
				НовСтрока.ЗаказыКонтрагенты.Добавить(ТекЗаказ.Значение, ТекЗаказ.Представление);
			КонецЦикла;
			
			НовСтрока.НомерЦветаТекстаСтроки = ПолучитьНомерЦветаТекстаСтроки(
				НовСтрока.МаршрутныйДокумент,
				НовСтрока.ПрибытиеФакт,
				НовСтрока.ПрибытиеПлан,
				НовСтрока.НомерСтроки
			);
			
			Если ЗначениеЗаполнено(ВыборкаМЛ.Прицеп1) Тогда 
				НовСтрока.Прицепы = ВыборкаМЛ.Прицеп1;
			КонецЕсли;
			Если ЗначениеЗаполнено(ВыборкаМЛ.Прицеп2) Тогда 
				НовСтрока.Прицепы = НовСтрока.Прицепы + ?(НовСтрока.Прицепы="", "", ", ") + ВыборкаМЛ.Прицеп2;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	КолонкиСопоставления = Новый Массив();
	КолонкиСопоставления.Добавить("МаршрутныйДокумент");
	КолонкиСопоставления.Добавить("Выполнен");
	КолонкиСопоставления.Добавить("СтатусДокумента");
	КолонкиСопоставления.Добавить("НомерДокумента");
	КолонкиСопоставления.Добавить("НомерПункта");
	КолонкиСопоставления.Добавить("Пункт");
	КолонкиСопоставления.Добавить("ПрибытиеПлан");
	КолонкиСопоставления.Добавить("УбытиеПлан");
	КолонкиСопоставления.Добавить("ПрибытиеФакт");
	КолонкиСопоставления.Добавить("УбытиеФакт");
	КолонкиСопоставления.Добавить("ТС");
	КолонкиСопоставления.Добавить("Заказы");
	КолонкиСопоставления.Добавить("Водитель");
	КолонкиСопоставления.Добавить("Контрагент");
	КолонкиСопоставления.Добавить("АдресУбытия");
	КолонкиСопоставления.Добавить("НомерСтроки");
	КолонкиСопоставления.Добавить("НомерЦветаТекстаСтроки");
	
	мсвУдаляемыеСтроки = Новый Массив();
	Для Каждого СтараяСтрока Из ДанныеПоПунктам Цикл 
		СтрокаПроверена = Ложь;
		
		Для Каждого НоваяСтрока Из НовДанныеПоПунктам Цикл 
			СтрокаИдентична = Истина;
			
			Для Каждого ИмяКлюча Из КолонкиСопоставления Цикл 
				Если Не СтараяСтрока[ИмяКлюча] = НоваяСтрока[ИмяКлюча] Тогда 
					СтрокаИдентична = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если СтрокаИдентична Тогда 
				СтрокаПроверена = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не СтрокаПроверена Тогда 
			мсвУдаляемыеСтроки.Добавить(СтараяСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого УдаляемаяСтрока Из мсвУдаляемыеСтроки Цикл 
		ДанныеПоПунктам.Удалить(УдаляемаяСтрока);
	КонецЦикла;
	
	Для Каждого НоваяСтрока Из НовДанныеПоПунктам Цикл 
		СтрокаНайдена = Ложь;
		
		Для Каждого СтараяСтрока Из ДанныеПоПунктам Цикл 
			СтрокаИдентична = Истина;
			
			Для Каждого ИмяКлюча Из КолонкиСопоставления Цикл 
				Если Не СтараяСтрока[ИмяКлюча] = НоваяСтрока[ИмяКлюча] Тогда 
					СтрокаИдентична = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			Если СтрокаИдентична Тогда 
				СтрокаНайдена = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не СтрокаНайдена Тогда 
			ДобСтрока = ДанныеПоПунктам.Добавить();
			ЗаполнитьЗначенияСвойств(ДобСтрока, НоваяСтрока);
		КонецЕсли;
	КонецЦикла;
	
	ДанныеПоПунктам.Сортировать("ПрибытиеПлан");
	
КонецПроцедуры

&НаСервере
Функция ПолучитьДанныеПоПунктамМЛ(ВыборкаСтрок, МаршрутныйЛист)
	
	ТаблицаПунктов = Новый ТаблицаЗначений();
	ТаблицаПунктов.Колонки.Добавить("Пункт",             Новый ОписаниеТипов("СправочникСсылка.уатПунктыНазначения, Строка"));
	ТаблицаПунктов.Колонки.Добавить("ПрибытиеПлан",      Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаПунктов.Колонки.Добавить("УбытиеПлан",        Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаПунктов.Колонки.Добавить("ПрибытиеФакт",      Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаПунктов.Колонки.Добавить("УбытиеФакт",        Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ТаблицаПунктов.Колонки.Добавить("Выполнен",          Новый ОписаниеТипов("Булево"));
	ТаблицаПунктов.Колонки.Добавить("Заказы",            Новый ОписаниеТипов("Строка"));
	ТаблицаПунктов.Колонки.Добавить("Контрагент",        Новый ОписаниеТипов("Строка"));
	ТаблицаПунктов.Колонки.Добавить("НомерСтроки",       Новый ОписаниеТипов("Строка"));
	ТаблицаПунктов.Колонки.Добавить("ЗаказыКонтрагенты", Новый ОписаниеТипов("СписокЗначений"));
	
	ДеревоЗаказов = Новый ДеревоЗначений();
	ДеревоЗаказов.Колонки.Добавить("ПунктЗаказНоменклатура", Новый ОписаниеТипов("ДокументСсылка.уатЗаказГрузоотправителя, СправочникСсылка.уатПунктыНазначения, Строка"));
	ДеревоЗаказов.Колонки.Добавить("ПрибытиеПлан",           Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ДеревоЗаказов.Колонки.Добавить("УбытиеПлан",             Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ДеревоЗаказов.Колонки.Добавить("ПрибытиеФакт",           Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ДеревоЗаказов.Колонки.Добавить("УбытиеФакт",             Новый ОписаниеТипов("Дата",,, Новый КвалификаторыДаты(ЧастиДаты.ДатаВремя)));
	ДеревоЗаказов.Колонки.Добавить("Время",                  Новый ОписаниеТипов("Число"));
	ДеревоЗаказов.Колонки.Добавить("Ожидание",               Новый ОписаниеТипов("Число"));
	ДеревоЗаказов.Колонки.Добавить("Стоянка",                Новый ОписаниеТипов("Число"));
	ДеревоЗаказов.Колонки.Добавить("СтоянкаИзПункта",        Новый ОписаниеТипов("Число"));
	ДеревоЗаказов.Колонки.Добавить("Выполнен",               Новый ОписаниеТипов("Булево"));
	ДеревоЗаказов.Колонки.Добавить("НомерСтроки",            Новый ОписаниеТипов("Строка"));
	ДеревоЗаказов.Колонки.Добавить("ИспользоватьУбытиеПлан", Новый ОписаниеТипов("Булево"));
	СменилсяПункт = Ложь;
	ПредЗаказ     = Неопределено;
	ПредСтрока    = Неопределено;
	ПредПункт     = Ложь;
	Пока ВыборкаСтрок.Следующий() Цикл
		//пункт
		Если ВыборкаСтрок.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка Тогда
			ТекПункт = ?(ЗначениеЗаполнено(ВыборкаСтрок.Пункт), ВыборкаСтрок.Пункт, ВыборкаСтрок.ЗаказГрузоотправителя.АдресОтправления);
		ИначеЕсли ВыборкаСтрок.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка Тогда
			ТекПункт = ?(ЗначениеЗаполнено(ВыборкаСтрок.Пункт), ВыборкаСтрок.Пункт, ВыборкаСтрок.ЗаказГрузоотправителя.АдресНазначения);
		Иначе
			ТекПункт = ВыборкаСтрок.Пункт;
		КонецЕсли;
		
		Если ВыборкаСтрок.ЗаказГрузоотправителя.Пустая() Или ВыборкаСтрок.ТипТочкиМаршрута.Пустая() Тогда
			НовСтрокаПункт = ДеревоЗаказов.Строки.Добавить();
			НовСтрокаПункт.ПунктЗаказНоменклатура = ТекПункт;
			НовСтрокаПункт.Время                  = ВыборкаСтрок.Время;
			НовСтрокаПункт.ПрибытиеПлан           = ВыборкаСтрок.ПрибытиеПлан;
			НовСтрокаПункт.ПрибытиеФакт           = ВыборкаСтрок.ПрибытиеФакт;
			НовСтрокаПункт.УбытиеФакт             = ВыборкаСтрок.УбытиеФакт;
			НовСтрокаПункт.Выполнен               = ВыборкаСтрок.Выполнен;
			НовСтрокаПункт.НомерСтроки            = НовСтрокаПункт.НомерСтроки + ?(НовСтрокаПункт.НомерСтроки="","",",") + Формат(ВыборкаСтрок.НомерСтроки, "ЧН=0; ЧГ=0");
			НовСтрокаПункт.Ожидание               = ВыборкаСтрок.Ожидание;
			НовСтрокаПункт.Стоянка                = ВыборкаСтрок.Стоянка;
			НовСтрокаПункт.СтоянкаИзПункта        = ВыборкаСтрок.СтоянкаИзПункта;
			
			ПредПункт     = ТекПункт;
			СменилсяПункт = Истина;
			
			Если ЗначениеЗаполнено(ВыборкаСтрок.УбытиеПлан) Тогда
				НовСтрокаПункт.УбытиеПлан = ВыборкаСтрок.УбытиеПлан;
				НовСтрокаПункт.ИспользоватьУбытиеПлан = Истина;
			ИначеЕсли ДеревоЗаказов.Строки.Индекс(НовСтрокаПункт) = 0 Тогда
				НовСтрокаПункт.УбытиеПлан = МаршрутныйЛист.ДатаИВремяОтправленияПлан;
			КонецЕсли;
			
			Продолжить;
		КонецЕсли;
		
		Если Не ТекПункт = ПредПункт Или СменилсяПункт Тогда
			НовСтрокаПункт = ДеревоЗаказов.Строки.Добавить();
			НовСтрокаПункт.ПунктЗаказНоменклатура = ТекПункт;
			НовСтрокаПункт.Время                  = ВыборкаСтрок.Время;
			новСтрокаПункт.ПрибытиеПлан           = ВыборкаСтрок.ПрибытиеПлан;
			НовСтрокаПункт.ПрибытиеФакт           = ВыборкаСтрок.ПрибытиеФакт;
			НовСтрокаПункт.УбытиеФакт             = ВыборкаСтрок.УбытиеФакт;
			НовСтрокаПункт.Выполнен               = ВыборкаСтрок.Выполнен;
			НовСтрокаПункт.Ожидание               = ВыборкаСтрок.Ожидание;
			НовСтрокаПункт.СтоянкаИзПункта        = ВыборкаСтрок.СтоянкаИзПункта;
			
			ПредПункт     = ТекПункт;
			СменилсяПункт = Истина;
			
			Если ЗначениеЗаполнено(ВыборкаСтрок.УбытиеПлан) Тогда
				НовСтрокаПункт.УбытиеПлан = ВыборкаСтрок.УбытиеПлан;
				НовСтрокаПункт.ИспользоватьУбытиеПлан = Истина;

			ИначеЕсли ДеревоЗаказов.Строки.Индекс(НовСтрокаПункт) = 0 Тогда
				НовСтрокаПункт.УбытиеПлан = МаршрутныйЛист.ДатаИВремяОтправленияПлан;
			КонецЕсли;
		КонецЕсли;
		
		//Заказ
		Если Не ВыборкаСтрок.ЗаказГрузоотправителя = ПредЗаказ 
			Или (Не ПредСтрока = Неопределено И Не ВыборкаСтрок.ТипТочкиМаршрута = ПредСтрока.ТипТочкиМаршрута) 
			Или СменилсяПункт Тогда
				НовСтрокаЗаказ = НовСтрокаПункт.Строки.Добавить();
				НовСтрокаЗаказ.ПунктЗаказНоменклатура = ВыборкаСтрок.ЗаказГрузоотправителя;
				НовСтрокаЗаказ.Стоянка                = ВыборкаСтрок.Стоянка;
				НовСтрокаЗаказ.СтоянкаИзПункта        = ВыборкаСтрок.СтоянкаИзПункта;
				НовСтрокаЗаказ.НомерСтроки            = НовСтрокаЗаказ.НомерСтроки + ?(НовСтрокаЗаказ.НомерСтроки="","",",") + Формат(ВыборкаСтрок.НомерСтроки, "ЧН=0; ЧГ=0");
				
				ПредЗаказ     = ВыборкаСтрок.ЗаказГрузоотправителя;
				СменилсяПункт = Ложь;
		Иначе 
			НовСтрокаЗаказ.НомерСтроки = НовСтрокаЗаказ.НомерСтроки + ?(НовСтрокаЗаказ.НомерСтроки="","",",") + Формат(ВыборкаСтрок.НомерСтроки, "ЧН=0; ЧГ=0");
		КонецЕсли;
		
		ПредСтрока = ВыборкаСтрок;
	КонецЦикла;
	
	ПредВремяОтпр     = Неопределено;
	ПредПунктСтрока   = Неопределено;
	ОбщееВремяСтоянок = 0;
	
	Для Каждого ТекСтрокаПункт Из ДеревоЗаказов.Строки Цикл
		Если ТекСтрокаПункт.ИспользоватьУбытиеПлан Тогда
			Продолжить;
		КонецЕсли;
		
		СуммарноеВремяСтоянки = 0;
		
		ЭлементыПункта = ТекСтрокаПункт.Строки;
		Если ЭлементыПункта.Количество() = 0 Тогда
			СуммарноеВремяСтоянки = уатЗащищенныеФункцииСервер.СложитьВремя(СуммарноеВремяСтоянки, ТекСтрокаПункт.Стоянка);
		Конецесли;

		Для Каждого ТекСтрокаЗаказ Из ЭлементыПункта Цикл 
			СуммарноеВремяСтоянки = уатЗащищенныеФункцииСервер.СложитьВремя(СуммарноеВремяСтоянки, ТекСтрокаЗаказ.Стоянка);
		КонецЦикла;
		
		СуммарноеВремяСтоянки = уатЗащищенныеФункцииСервер.СложитьВремя(СуммарноеВремяСтоянки, ТекСтрокаПункт.СтоянкаИзПункта);
		
		ТекСтрокаПункт.Стоянка = СуммарноеВремяСтоянки;
		ОбщееВремяСтоянок      = уатЗащищенныеФункцииСервер.СложитьВремя(ОбщееВремяСтоянок, ТекСтрокаПункт.Стоянка);
		
		Если ДеревоЗаказов.Строки.Индекс(ТекСтрокаПункт) = 0 Тогда
			ТекСтрокаПункт.ПрибытиеПлан = уатЗащищенныеФункцииСервер.СложитьВремя(МаршрутныйЛист.ДатаИВремяОтправленияПлан, -СуммарноеВремяСтоянки);
			ТекСтрокаПункт.УбытиеПлан   = МаршрутныйЛист.ДатаИВремяОтправленияПлан;
			ПредВремяОтпр               = ТекСтрокаПункт.УбытиеПлан;
		Иначе 
			ТекПрибытиеПлан             = уатЗащищенныеФункцииСервер.СложитьВремя(ПредВремяОтпр, ПредПунктСтрока.Время);
			ТекСтрокаПункт.ПрибытиеПлан = уатЗащищенныеФункцииСервер.СложитьВремя(ТекПрибытиеПлан, ТекСтрокаПункт.Ожидание);
			ТекСтрокаПункт.УбытиеПлан   = уатЗащищенныеФункцииСервер.СложитьВремя(ТекСтрокаПункт.ПрибытиеПлан, СуммарноеВремяСтоянки);
			ПредВремяОтпр               = ТекСтрокаПункт.УбытиеПлан;
		КонецЕсли;
		
		ПредПунктСтрока = ТекСтрокаПункт;
	КонецЦикла;
	
	Для Каждого ТекПункт Из ДеревоЗаказов.Строки Цикл 
		НовСтрока = ТаблицаПунктов.Добавить();
		НовСтрока.Пункт        = ТекПункт.ПунктЗаказНоменклатура;
		НовСтрока.ПрибытиеПлан = ТекПункт.ПрибытиеПлан;
		НовСтрока.УбытиеПлан   = ТекПункт.УбытиеПлан;
		НовСтрока.ПрибытиеФакт = ТекПункт.ПрибытиеФакт;
		НовСтрока.УбытиеФакт   = ТекПункт.УбытиеФакт;
		НовСтрока.Выполнен     = ТекПункт.Выполнен;
		
		мсвЗаказы = Новый Массив();
		Если ТекПункт.Строки.Количество() Тогда 
			Для Каждого ТекЗаказ Из ТекПункт.Строки Цикл 
				Если ЗначениеЗаполнено(ТекЗаказ.ПунктЗаказНоменклатура) И мсвЗаказы.Найти(ТекЗаказ.ПунктЗаказНоменклатура) = Неопределено Тогда 
					мсвЗаказы.Добавить(ТекЗаказ.ПунктЗаказНоменклатура);
				КонецЕсли;
				
				НовСтрока.НомерСтроки = НовСтрока.НомерСтроки + ?(НовСтрока.НомерСтроки="","",",") + Строка(ТекЗаказ.НомерСтроки);
			КонецЦикла;
		Иначе 
			НовСтрока.НомерСтроки = НовСтрока.НомерСтроки + ?(НовСтрока.НомерСтроки="","",",") + Строка(ТекПункт.НомерСтроки);
		КонецЕсли;
		
		мсвКонтрагенты = Новый Массив();
		Для Каждого ТекЗаказ Из мсвЗаказы Цикл
			ТекЗаказНомер = ЗначениеРеквизитаЗаказа(ТекЗаказ, "Номер");
			ТекЗаказДата  = ЗначениеРеквизитаЗаказа(ТекЗаказ, "Дата");
			ТекЗаказКонтрагент  = ЗначениеРеквизитаЗаказа(ТекЗаказ, "Контрагент");
			ТекЗаказГрузоотправитель  = ЗначениеРеквизитаЗаказа(ТекЗаказ, "Грузоотправитель");
			ТекЗаказГрузополучатель  = ЗначениеРеквизитаЗаказа(ТекЗаказ, "Грузополучатель");
			
			НовСтрока.Заказы = НовСтрока.Заказы + ?(НовСтрока.Заказы="","",", ") + Строка(ТекЗаказНомер) + " от " + Формат(ТекЗаказДата, "ДФ=dd.MM.yy");
			
			мсвКонтрагентыЗаказа = Новый ТаблицаЗначений();
			мсвКонтрагентыЗаказа.Колонки.Добавить("Контрагент");
			
			Если ЗначениеЗаполнено(ТекЗаказКонтрагент) Тогда 
				Если мсвКонтрагенты.Найти(ТекЗаказКонтрагент) = Неопределено Тогда 
					мсвКонтрагенты.Добавить(ТекЗаказКонтрагент);
				КонецЕсли;
				
				НовСтрокаКонтрагент = мсвКонтрагентыЗаказа.Добавить();
				НовСтрокаКонтрагент.Контрагент = ТекЗаказКонтрагент;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекЗаказГрузоотправитель) Тогда 
				Если мсвКонтрагенты.Найти(ТекЗаказГрузоотправитель) = Неопределено Тогда 
					мсвКонтрагенты.Добавить(ТекЗаказГрузоотправитель);
				КонецЕсли;
				
				НовСтрокаКонтрагент = мсвКонтрагентыЗаказа.Добавить();
				НовСтрокаКонтрагент.Контрагент = ТекЗаказГрузоотправитель;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекЗаказГрузополучатель) Тогда 
				Если мсвКонтрагенты.Найти(ТекЗаказГрузополучатель) = Неопределено Тогда 
					мсвКонтрагенты.Добавить(ТекЗаказГрузополучатель);
				КонецЕсли;
				
				НовСтрокаКонтрагент = мсвКонтрагентыЗаказа.Добавить();
				НовСтрокаКонтрагент.Контрагент = ТекЗаказГрузополучатель;
			КонецЕсли;
			
			мсвКонтрагентыЗаказа.Свернуть("Контрагент");
			СтрокаКонтрагента = "";
			Для Каждого ТекКонтрагентСтрока Из мсвКонтрагентыЗаказа Цикл 
				СтрокаКонтрагента = СтрокаКонтрагента + ?(СтрокаКонтрагента="","", ", ") + ТекКонтрагентСтрока.Контрагент;
			КонецЦикла;
			
			ПредставлениеЗаказа = Строка(ТекЗаказНомер) + " (" + СтрокаКонтрагента + ")";
			НовСтрока.ЗаказыКонтрагенты.Добавить(ТекЗаказ, ПредставлениеЗаказа);
		КонецЦикла;
		
		Для Каждого ТекКонтрагент Из мсвКонтрагенты Цикл 
			НовСтрока.Контрагент = НовСтрока.Контрагент + ?(НовСтрока.Контрагент="","",", ") + Строка(ТекКонтрагент);
		КонецЦикла;
	КонецЦикла;
	
	Возврат ТаблицаПунктов;
	
КонецФункции // ПолучитьДанныеПоПунктамМЛ()

&НаСервереБезКонтекста
Функция ПолучитьПробегПоДаннымССМ(Знач ТранспортноеСредство)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ТС", ТранспортноеСредство);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(уатПробегРасходПоМониторингу.Пробег) КАК Пробег
	|ИЗ
	|	РегистрСведений.уатПробегРасходПоМониторингу КАК уатПробегРасходПоМониторингу
	|ГДЕ
	|	уатПробегРасходПоМониторингу.ТС = &ТС";
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Если Выборка.Следующий() Тогда 
		Возврат Выборка.Пробег;
	Иначе 
		Возврат 0;
	КонецЕсли;
	
КонецФункции // ПолучитьПробегПоДаннымССМ()

&НаСервереБезКонтекста
Функция ПолучитьТекстДопИнфоПоТС(Знач ТранспортноеСредство, Знач ТекОрганизация, Знач ТекВодитель)
	
	СтрокаИнфоПоТС = "";
	
	Если Не ТранспортноеСредство.ЭтоГруппа Тогда 
		ОсновныеДанныеТС = "";
		
		ОсновныеДанныеТС = ОсновныеДанныеТС + ?(ОсновныеДанныеТС="", "", "; ") 
			+ НСтр("en='State. number:';ru='Гос. номер:'") + " " 
			+ ?(ЗначениеЗаполнено(ТранспортноеСредство.ГосударственныйНомер), Строка(ТранспортноеСредство.ГосударственныйНомер), НСтр("en='<no>';ru='<нет>'"));
		
		ОсновныеДанныеТС = ОсновныеДанныеТС + ?(ОсновныеДанныеТС="", "", "; ") 
			+ НСтр("en='Garage number:';ru='Гаражный номер:'") + " " 
			+ ?(ЗначениеЗаполнено(ТранспортноеСредство.ГаражныйНомер), Строка(ТранспортноеСредство.ГаражныйНомер), НСтр("en='<no>';ru='<нет>'"));
		
		ОсновныеДанныеТС = ОсновныеДанныеТС + ?(ОсновныеДанныеТС="", "", "; ") 
			+ НСтр("en='Model:';ru='Модель:'") + " " 
			+ ?(ЗначениеЗаполнено(ТранспортноеСредство.Модель), Строка(ТранспортноеСредство.Модель), НСтр("en='<no>';ru='<нет>'"));
		
		ДопПараметры = Новый Структура("ОсновныеДанныеТС", ОсновныеДанныеТС);
		
		Если ЗначениеЗаполнено(ТранспортноеСредство.ИспользуемаяСистемаGPS) Тогда
			ПробегССМ = ПолучитьПробегПоДаннымССМ(ТранспортноеСредство);
			ДопПараметры.Вставить("ПробегССМ", НСтр("en='Mileage according to monitoring data:';ru='Пробег по данным мониторинга:'") + " " + Формат(ПробегССМ, "ЧДЦ=1; ЧРД=.; ЧН=0.0") + " " + НСтр("en='km';ru='км'"));
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекВодитель) Тогда
			ДопПараметры.Вставить("Водитель", ТекВодитель);
		КонецЕсли;
		
		СтрокаИнфоПоТС = уатОбщегоНазначения.СформироватьТекстДопИнформацииПоТС(ТранспортноеСредство, ДопПараметры);
	КонецЕсли;
	
	Возврат СтрокаИнфоПоТС;
	
КонецФункции // ПолучитьТекстДопИнфоПоТС()

&НаКлиенте
Процедура ДанныеПоПунктамВыборЗаказа(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПоказатьЗначение(, ВыбранныйЭлемент.Значение);
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПериодФактическогоТрека()
	
	ПериодМаршрутаС  = ?(НачалоДня(РабочаяДата) = '00010101', '00010101', НачалоДня(РабочаяДата) - КоличествоДней * 86400);
	ПериодМаршрутаПо = ?(НачалоДня(РабочаяДата) = '00010101', '39991231', КонецДня(РабочаяДата));
	
	ТекущиеДанные = Элементы.ДанныеПоПунктам.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПериодФактическогоТрека = ПолучитьПериодФактическогоТрека(ТекущиеДанные.МаршрутныйДокумент);
	Если ЗначениеЗаполнено(ПериодФактическогоТрека.ПериодМаршрутаПо) Тогда 
		ПериодМаршрутаС  = ПериодФактическогоТрека.ПериодМаршрутаС;
		ПериодМаршрутаПо = ПериодФактическогоТрека.ПериодМаршрутаПо;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПериодФактическогоТрека(Знач ТекМаршДок)
	
	Результат = Новый Структура("ПериодМаршрутаС, ПериодМаршрутаПо", Неопределено, Неопределено);
	
	Если ТипЗнч(ТекМаршДок) = Тип("ДокументСсылка.уатМаршрутныйЛист") Тогда 
		ДанныеПунктов = Документы.уатМаршрутныйЛист.ПолучитьПлановыеФактическиеДатыПосещенияПунктов(ТекМаршДок);
		
		Для Каждого ТекПункт Из ДанныеПунктов Цикл 
			Если ЗначениеЗаполнено(ТекПункт.ПрибытиеПлан) Тогда 
				Если Результат.ПериодМаршрутаС = Неопределено Тогда 
					Результат.ПериодМаршрутаС = ТекПункт.ПрибытиеПлан;
				Иначе 
					Результат.ПериодМаршрутаС = Мин(Результат.ПериодМаршрутаС, ТекПункт.ПрибытиеПлан);
				КонецЕсли;
				Если Результат.ПериодМаршрутаПо = Неопределено Тогда 
					Результат.ПериодМаршрутаПо = ТекПункт.ПрибытиеПлан;
				Иначе 
					Результат.ПериодМаршрутаПо = Макс(Результат.ПериодМаршрутаПо, ТекПункт.ПрибытиеПлан);
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекПункт.УбытиеПлан) Тогда 
				Если Результат.ПериодМаршрутаС = Неопределено Тогда 
					Результат.ПериодМаршрутаС = ТекПункт.УбытиеПлан;
				Иначе 
					Результат.ПериодМаршрутаС = Мин(Результат.ПериодМаршрутаС, ТекПункт.УбытиеПлан);
				КонецЕсли;
				Если Результат.ПериодМаршрутаПо = Неопределено Тогда 
					Результат.ПериодМаршрутаПо = ТекПункт.УбытиеПлан;
				Иначе 
					Результат.ПериодМаршрутаПо = Макс(Результат.ПериодМаршрутаПо, ТекПункт.УбытиеПлан);
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекПункт.ПрибытиеФакт) Тогда 
				Если Результат.ПериодМаршрутаС = Неопределено Тогда 
					Результат.ПериодМаршрутаС = ТекПункт.ПрибытиеФакт;
				Иначе 
					Результат.ПериодМаршрутаС = Мин(Результат.ПериодМаршрутаС, ТекПункт.ПрибытиеФакт);
				КонецЕсли;
				Если Результат.ПериодМаршрутаПо = Неопределено Тогда 
					Результат.ПериодМаршрутаПо = ТекПункт.ПрибытиеФакт;
				Иначе 
					Результат.ПериодМаршрутаПо = Макс(Результат.ПериодМаршрутаПо, ТекПункт.ПрибытиеФакт);
				КонецЕсли;
			КонецЕсли;
			
			Если ЗначениеЗаполнено(ТекПункт.УбытиеФакт) Тогда 
				Если Результат.ПериодМаршрутаС = Неопределено Тогда 
					Результат.ПериодМаршрутаС = ТекПункт.УбытиеФакт;
				Иначе 
					Результат.ПериодМаршрутаС = Мин(Результат.ПериодМаршрутаС, ТекПункт.УбытиеФакт);
				КонецЕсли;
				Если Результат.ПериодМаршрутаПо = Неопределено Тогда 
					Результат.ПериодМаршрутаПо = ТекПункт.УбытиеФакт;
				Иначе 
					Результат.ПериодМаршрутаПо = Макс(Результат.ПериодМаршрутаПо, ТекПункт.УбытиеФакт);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ТипЗнч(ТекМаршДок) = Тип("ДокументСсылка.уатПутевойЛист") Тогда 
		Если ТекМаршДок.Задание.Количество() = 0 Тогда 
			Результат.ПериодМаршрутаС  = ТекМаршДок.ДатаВыезда;
			Результат.ПериодМаршрутаПо = ТекМаршДок.ДатаВозвращения;
		Иначе 
			Для Каждого ТекСтрока Из ТекМаршДок.Задание Цикл 
				Если ЗначениеЗаполнено(ТекСтрока.ВремяПрибытия) Тогда 
					Если Результат.ПериодМаршрутаС = Неопределено Тогда 
						Результат.ПериодМаршрутаС = ТекСтрока.ВремяПрибытия;
					Иначе 
						Результат.ПериодМаршрутаС = Мин(Результат.ПериодМаршрутаС, ТекСтрока.ВремяПрибытия);
					КонецЕсли;
					Если Результат.ПериодМаршрутаПо = Неопределено Тогда 
						Результат.ПериодМаршрутаПо = ТекСтрока.ВремяПрибытия;
					Иначе 
						Результат.ПериодМаршрутаПо = Макс(Результат.ПериодМаршрутаПо, ТекСтрока.ВремяПрибытия);
					КонецЕсли;
				КонецЕсли;
				
				Если ЗначениеЗаполнено(ТекСтрока.ВремяУбытия) Тогда 
					Если Результат.ПериодМаршрутаС = Неопределено Тогда 
						Результат.ПериодМаршрутаС = ТекСтрока.ВремяУбытия;
					Иначе 
						Результат.ПериодМаршрутаС = Мин(Результат.ПериодМаршрутаС, ТекСтрока.ВремяУбытия);
					КонецЕсли;
					Если Результат.ПериодМаршрутаПо = Неопределено Тогда 
						Результат.ПериодМаршрутаПо = ТекСтрока.ВремяУбытия;
					Иначе 
						Результат.ПериодМаршрутаПо = Макс(Результат.ПериодМаршрутаПо, ТекСтрока.ВремяУбытия);
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции // ПолучитьПериодФактическогоТрека()

&НаСервереБезКонтекста
Функция ПолучитьСтрокуИнициализации(ПунктНазначения, МасштабОтображения, ЯндексКарты = Ложь)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("Ссылка", ПунктНазначения);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатПунктыНазначения.Лат КАК Лат,
	|	уатПунктыНазначения.Лон КАК Лон
	|ИЗ
	|	Справочник.уатПунктыНазначения КАК уатПунктыНазначения
	|ГДЕ
	|	НЕ уатПунктыНазначения.ПометкаУдаления
	|	И уатПунктыНазначения.Ссылка = &Ссылка
	|	И НЕ(уатПунктыНазначения.Лат = 0
	|				И уатПунктыНазначения.Лон = 0)";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда 
		Широта  = Выборка.Лат;
		Долгота = Выборка.Лон;
	Иначе 
		Широта  = 55.753318;
		Долгота = 37.620736;
	КонецЕсли;
	
	Если МасштабОтображения < 1 Или МасштабОтображения > 18 Тогда 
		МасштабКарты = 10;
	Иначе
		МасштабКарты = МасштабОтображения;
	КонецЕсли;
	
	Если НЕ ЯндексКарты Тогда
		// Function launchMap(className, editable, zoomControl, zoom, center, scaleMetric)
		// className   - Имя класса который инициализируем;
		// editable    - Включает редактирование геозон;
		// zoomControl - Отобразить шкалу для масштабирования;
		// zoom        - Уровень зума при инициализации карты;
		// center      - Центр карты по заданам координатам;
		// scaleMetric  - Отображение метрической шкалы на карте.
		//
		
		АдресКартографии = уатЭлектронныеКартыСервер.ПолучитьНастройкуСервераКартографииМаршрутизации("Картография_Сервер");
		ТипПоставщика_ПостроениеМаршрутов = уатЭлектронныеКартыСервер.ПолучитьТипИспользуемыхЭлектронныхКарт("ПостроениеМаршрутов");
		
		Если ТипПоставщика_ПостроениеМаршрутов = Перечисления.уатТипыЭлектронныхКарт.OSM Тогда
			АдресOSRM = уатЭлектронныеКартыСервер.ПолучитьНастройкуСервераКартографииМаршрутизации("ПостроениеМаршрутов_Сервер");
		Иначе
			АдресOSRM = "";
		КонецЕсли;
		
		Возврат "launchMap(""Depict"", true, true" + ", " + Формат(МасштабКарты, "ЧН=0; ЧГ=0") + ", ["
		+ Формат(Широта, "ЧРД=.; ЧН=0; ЧГ=0") + ", " + Формат(Долгота, "ЧРД=.; ЧН=0; ЧГ=0") 
		+ "], true, """ + АдресКартографии + """, """ + АдресOSRM + """)";
	Иначе
		Возврат "Initialize(" + Формат(Широта, "ЧРД=.; ЧН=0; ЧГ=0") + ", " + Формат(Долгота, "ЧРД=.; ЧН=0; ЧГ=0") 
		+ ", " + Формат(МасштабКарты, "ЧН=0; ЧГ=0") + ")";
	КонецЕсли;

	
КонецФункции // ПолучитьСтрокуИнициализации()

&НаСервере
Функция ПолучитьНомерЦветаТекстаСтроки(МаршрутныйДокумент, ПрибытиеФакт, ПрибытиеПлан, НомерСтрокиМЛ)
	
	Если ТипЗнч(МаршрутныйДокумент) <> Тип("ДокументСсылка.уатМаршрутныйЛист") Тогда 
		Возврат 0;
	КонецЕсли;
	
	ЕстьОтклонениеПрибытие = Ложь;
	ЕстьОпозданиеПрибытие = Ложь;
	ОтклонениеПрибытиеЗаПределамиОкна = Ложь;
	
	Если ЗначениеЗаполнено(ПрибытиеФакт) Тогда 
		ОтклонениеПрибытие = (ПрибытиеФакт - ПрибытиеПлан)/60;
		ОтклонениеПрибытие = ?(ОтклонениеПрибытие < 0, -ОтклонениеПрибытие, ОтклонениеПрибытие);
		Если ОтклонениеПрибытие > ДопустимоеОтклонениеОтВремениПрибытия Тогда 
			ЕстьОтклонениеПрибытие = Истина;
			
			НомераСтрок = СтрЗаменить(НомерСтрокиМЛ, ",", Символы.ПС);
			Для Сч = 1 По СтрЧислоСтрок(НомераСтрок) Цикл 
				Попытка
					НомерСтроки = Число(СокрЛП(СтрПолучитьСтроку(НомераСтрок, Сч)));
				Исключение
					Прервать;
				КонецПопытки;
				
				СтрокаМЛ = МаршрутныйДокумент.Заказы.Найти(НомерСтроки, "НомерСтроки");
				Если СтрокаМЛ <> Неопределено Тогда 
					ТекЗаказОтправлениеС  = ЗначениеРеквизитаЗаказа(СтрокаМЛ.ЗаказГрузоотправителя, "ОтправлениеС");
					ТекЗаказОтправлениеПо = ЗначениеРеквизитаЗаказа(СтрокаМЛ.ЗаказГрузоотправителя, "ОтправлениеПо");
					ТекЗаказДоставкаС     = ЗначениеРеквизитаЗаказа(СтрокаМЛ.ЗаказГрузоотправителя, "ДоставкаС");
					ТекЗаказДоставкаПо    = ЗначениеРеквизитаЗаказа(СтрокаМЛ.ЗаказГрузоотправителя, "ДоставкаПо");
					
					Если СтрокаМЛ.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка Тогда 
						ТекОкноС  = '00010101000000' + (ТекЗаказОтправлениеС  - НачалоДня(ТекЗаказОтправлениеС));
						ТекОкноПо = '00010101000000' + (ТекЗаказОтправлениеПо - НачалоДня(ТекЗаказОтправлениеПо));
						
					Иначе 
						ТекОкноС  = '00010101000000' + (ТекЗаказДоставкаС  - НачалоДня(ТекЗаказДоставкаС));
						ТекОкноПо = '00010101000000' + (ТекЗаказДоставкаПо - НачалоДня(ТекЗаказДоставкаПо));
					КонецЕсли;
					
					Если Не уатОбщегоНазначения_проф.ВремяПосещенияВПределахОкна(ПрибытиеФакт, ТекОкноС, ТекОкноПо) Тогда 
						ОтклонениеПрибытиеЗаПределамиОкна = Истина;
						Прервать;
					КонецЕсли;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	Иначе 
		ОпозданиеПрибытие = (ТекущаяДата() - ПрибытиеПлан)/60;
		ОпозданиеПрибытие = ?(ОпозданиеПрибытие < 0, 0, ОпозданиеПрибытие);
		Если ОпозданиеПрибытие > ДопустимоеОтклонениеОтВремениПрибытия Тогда 
			ЕстьОпозданиеПрибытие = Истина;
		КонецЕсли;
	КонецЕсли;
	
	Если ЕстьОтклонениеПрибытие Тогда 
		Если ОтклонениеПрибытиеЗаПределамиОкна Тогда 
			// Красный цвет.
			Возврат 1;
			
		Иначе 
			// Синий цвет.
			Возврат 2;
		КонецЕсли;
		
	ИначеЕсли ЕстьОпозданиеПрибытие Тогда
		// Оранжевый цвет.
		Возврат 3;
		
	Иначе 
		// Зеленый цвет.
		Возврат 4;
	КонецЕсли;
	
КонецФункции // ПолучитьНомерЦветаТекстаСтроки()

&НаСервере
Процедура ЗаполнитьКэшДанныеЗаказов(ВыборкаМЛ)
	мсвЗаказы = Новый Массив;
	Пока ВыборкаМЛ.Следующий() Цикл
		ВыборкаЗаказы = ВыборкаМЛ.Выбрать();
		Пока ВыборкаЗаказы.Следующий() Цикл
			мсвЗаказы.Добавить(ВыборкаЗаказы.ЗаказГрузоотправителя);
		КонецЦикла;
	КонецЦикла;
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ
	|	уатЗаказГрузоотправителя.Ссылка КАК Ссылка,
	|	уатЗаказГрузоотправителя.Номер КАК Номер,
	|	уатЗаказГрузоотправителя.Дата КАК Дата,
	|	уатЗаказГрузоотправителя.АдресОтправления КАК АдресОтправления,
	|	уатЗаказГрузоотправителя.АдресНазначения КАК АдресНазначения,
	|	уатЗаказГрузоотправителя.Грузоотправитель КАК Грузоотправитель,
	|	уатЗаказГрузоотправителя.Грузополучатель КАК Грузополучатель,
	|	уатЗаказГрузоотправителя.Контрагент КАК Контрагент,
	|	уатЗаказГрузоотправителя.ДоставкаС КАК ДоставкаС,
	|	уатЗаказГрузоотправителя.ДоставкаПо КАК ДоставкаПо,
	|	уатЗаказГрузоотправителя.ОтправлениеС КАК ОтправлениеС,
	|	уатЗаказГрузоотправителя.ОтправлениеПо КАК ОтправлениеПо
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	|ГДЕ
	|	уатЗаказГрузоотправителя.Ссылка В(&мсвЗаказы)");
	Запрос.УстановитьПараметр("мсвЗаказы", мсвЗаказы);
	Выборка = Запрос.Выполнить().Выбрать();
	
	КэшДанныеЗаказов.Очистить();
	Пока Выборка.Следующий() Цикл
		ДанныеЗаказа = КэшДанныеЗаказов.Добавить();
		ЗаполнитьЗначенияСвойств(ДанныеЗаказа, Выборка);
	КонецЦикла;
		
	ВыборкаМЛ.Сбросить();
КонецПроцедуры

&НаСервере
Функция ЗначениеРеквизитаЗаказа(Заказ, ИмяРеквизита)
	ДанныеЗаказов = КэшДанныеЗаказов.НайтиСтроки(Новый Структура("Ссылка", Заказ));
	Если ДанныеЗаказов.Количество() = 0 Тогда
		Возврат Заказ[ИмяРеквизита];
	Иначе
		Возврат ДанныеЗаказов[0][ИмяРеквизита];
	КонецЕсли;
КонецФункции

#Область ПанелиАРМ

&НаСервере
Процедура ЗагрузитьНастройкиПанелейАРМ()
	
	УстановитьПривилегированныйРежим(Истина);
	СтруктураНастроек = ХранилищеНастроекДанныхФорм.Загрузить(
		"Обработки.уатАРМКонтрольПеревозок_уэ", 
		"ФормаНастроекПанелей");
	
	Если ТипЗнч(СтруктураНастроек) <> Тип("Структура") Тогда
		РабочийСтол        = Справочники.уатРабочиеСтолы.КартаПункты;
		тзНастройкиПанелей.Загрузить(РабочийСтол.НастройкиПанелей.Выгрузить());
		ВывестиПанелиАРМ();
		Возврат;
	КонецЕсли;
	
	СтруктураНастроек.Свойство("РабочийСтол", РабочийСтол);
	тзНастройкиПанелей.Загрузить(РабочийСтол.НастройкиПанелей.Выгрузить());
	
	ВывестиПанелиАРМ();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройкиПанелей()
	
	тзНастройкиПанелей.Загрузить(РабочийСтол.НастройкиПанелей.Выгрузить());
	
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураНастроек = Новый Структура();
	СтруктураНастроек.Вставить("РабочийСтол", РабочийСтол);
	
	ХранилищеНастроекДанныхФорм.Сохранить(
		"Обработки.уатАРМКонтрольПеревозок_уэ", 
		"ФормаНастроекПанелей",
		СтруктураНастроек);
	
КонецПроцедуры
	
&НаСервере
Процедура ВывестиПанелиАРМ()
	
	мКарта = тзНастройкиПанелей.НайтиСтроки(Новый Структура("Значение", "Карта"));
	Элементы.ПанельТрека.Видимость = мКарта.Количество() > 0;
	
	Для Каждого ТекСтрока Из тзНастройкиПанелей Цикл
		Если ТекСтрока.Панель = "Панель1" Тогда
			Панель1 = ТекСтрока;
		ИначеЕсли ТекСтрока.Панель = "Панель2" Тогда
			Панель2 = ТекСтрока;
		ИначеЕсли ТекСтрока.Панель = "Панель3" Тогда
			Панель3 = ТекСтрока;
		ИначеЕсли ТекСтрока.Панель = "Панель4" Тогда
			Панель4 = ТекСтрока;
		КонецЕсли;
	КонецЦикла;
	
	ПорядокКарты = 0;
	Если Панель1.Значение = "Карта" Тогда
		Элементы.Переместить(Элементы.ГруппаПанельСтраницыКарта, Элементы.ГруппаПанельФормыКолонкаПраво, Элементы.ГруппаПанель);
		Элементы.ГруппаПанельСтраницыКарта.ТекущаяСтраница = Элементы.СтраницаКарта;
		ПорядокКарты = 1;
	ИначеЕсли Панель2.Значение = "Карта" Тогда
		Элементы.Переместить(Элементы.ГруппаПанельСтраницыКарта, Элементы.ГруппаПанельФормыКолонкаПраво, Элементы.ГруппаПанель);
		Элементы.ГруппаПанельСтраницыКарта.ТекущаяСтраница = Элементы.СтраницаКарта;
		ПорядокКарты = 2;
	ИначеЕсли Панель3.Значение = "Карта" Тогда
		Элементы.Переместить(Элементы.ГруппаПанельСтраницыКарта, Элементы.ГруппаПанельФормыКолонкаПраво);
		Элементы.ГруппаПанельСтраницыКарта.ТекущаяСтраница = Элементы.СтраницаКарта;
		ПорядокКарты = 3;
	ИначеЕсли Панель4.Значение = "Карта" Тогда
		Элементы.Переместить(Элементы.ГруппаПанельСтраницыКарта, Элементы.ГруппаПанельФормыКолонкаПраво);
		Элементы.ГруппаПанельСтраницыКарта.ТекущаяСтраница = Элементы.СтраницаКарта;
		ПорядокКарты = 4;
	Иначе
		Элементы.ГруппаПанельСтраницыКарта.ТекущаяСтраница = Элементы.СтраницаПанель;
		ПорядокКарты = 0;
	КонецЕсли;
	
	Панели = Новый Структура("Панель1, Панель2, Панель3, Панель4, ПорядокКарты", Панель1, Панель2, Панель3, Панель4, ПорядокКарты);
	ВывестиПанельАРМ(Панели, "Пункты", Элементы.ГруппаПункты);
	ВывестиПанельАРМ(Панели, "События", Элементы.ГруппаСобытия);
	ВывестиПанелиОтчетов(Панели);
	
	ФлагВидимостьГруппыСобытия = Элементы.ГруппаСобытия.Видимость;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиПанельАРМ(Панели, НаименованиеПанели, ГруппаПанели)
	
	Панель1      = Панели.Панель1;
	Панель2      = Панели.Панель2;
	Панель3      = Панели.Панель3;
	Панель4      = Панели.Панель4;
	ПорядокКарты = Панели.ПорядокКарты;
	
	Если Панель1.Значение = НаименованиеПанели Тогда
		Если Панель2.Значение = "Карта" Тогда
			Элементы.Переместить(ГруппаПанели, Элементы.СтраницаКарта, Элементы.ГруппаКарта);
		ИначеЕсли ПорядокКарты = 0 Тогда
			Элементы.Переместить(ГруппаПанели, Элементы.СтраницаПанельЛево);
		Иначе
			Элементы.Переместить(ГруппаПанели, Элементы.ГруппаПанельЛево);
		КонецЕсли;
		ГруппаПанели.Видимость = Истина;
	ИначеЕсли Панель2.Значение = НаименованиеПанели Тогда
		Если Панель1.Значение = "Карта" Тогда
			Элементы.Переместить(ГруппаПанели, Элементы.СтраницаКарта);
		ИначеЕсли ПорядокКарты = 0 Тогда
			Элементы.Переместить(ГруппаПанели, Элементы.СтраницаПанельПраво);
		Иначе
			Элементы.Переместить(ГруппаПанели, Элементы.ГруппаПанельПраво);
		КонецЕсли;
		ГруппаПанели.Видимость = Истина;
	ИначеЕсли Панель3.Значение = НаименованиеПанели Тогда
		Если Панель4.Значение = "Карта" Тогда
			Элементы.Переместить(ГруппаПанели, Элементы.СтраницаКарта, Элементы.ГруппаКарта);
		Иначе 
			Элементы.Переместить(ГруппаПанели, Элементы.ГруппаПанельЛево);
		КонецЕсли;
		ГруппаПанели.Видимость = Истина;
	ИначеЕсли Панель4.Значение = НаименованиеПанели Тогда
		Если Панель3.Значение = "Карта" Тогда
			Элементы.Переместить(ГруппаПанели, Элементы.СтраницаКарта);
		Иначе
			Элементы.Переместить(ГруппаПанели, Элементы.ГруппаПанельПраво);
		КонецЕсли;
		ГруппаПанели.Видимость = Истина;
	Иначе
		ГруппаПанели.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВывестиПанелиОтчетов(Панели)
	
	Панель1      = Панели.Панель1;
	Панель2      = Панели.Панель2;
	Панель3      = Панели.Панель3;
	Панель4      = Панели.Панель4;
	ПорядокКарты = Панели.ПорядокКарты;
	
	Элементы.ГруппаОтчет.Видимость  = Ложь;
	Элементы.ГруппаОтчет1.Видимость = Ложь;
	Элементы.ГруппаОтчет2.Видимость = Ложь;
	Элементы.ГруппаОтчет3.Видимость = Ложь;
	Отчет1  = Неопределено;
	Отчет2 = Неопределено;
	Отчет3 = Неопределено;
	Отчет4 = Неопределено;
	
	Если Панель1.Значение = "Отчет"И ЗначениеЗаполнено(Панель1.СсылкаНаОтчет) Тогда
		Если НЕ ТипЗнч(Панель1.СсылкаНаОтчет) = Тип("Строка") Тогда
			Если Панель2.Значение = "Карта" Тогда
				Элементы.Переместить(Элементы.ГруппаОтчет, Элементы.СтраницаКарта, Элементы.ГруппаКарта);
			ИначеЕсли ПорядокКарты = 0 Тогда
				Элементы.Переместить(Элементы.ГруппаОтчет, Элементы.СтраницаПанельЛево);
			Иначе
				Элементы.Переместить(Элементы.ГруппаОтчет, Элементы.ГруппаПанельЛево);
			КонецЕсли;
			Элементы.СформироватьОтчет.Видимость = Истина;
			Элементы.ГруппаРаботаСГруппами.Видимость = Истина;
			Элементы.СформироватьОтчетОнлайнОтчет.Видимость = Ложь;
			Элементы.ОнлайнОтчетНастройки.Видимость = Ложь;
			
			Элементы.ГруппаОтчет.Видимость = Истина;
			Отчет1 = Панель1.СсылкаНаОтчет;
		Иначе
			Если Панель2.Значение = "Карта" Тогда
				Элементы.Переместить(Элементы.ГруппаОтчет, Элементы.СтраницаКарта, Элементы.ГруппаКарта);
			ИначеЕсли ПорядокКарты = 0 Тогда
				Элементы.Переместить(Элементы.ГруппаОтчет, Элементы.СтраницаПанельЛево);
			Иначе
				Элементы.Переместить(Элементы.ГруппаОтчет, Элементы.ГруппаПанельЛево);
			КонецЕсли;
			Элементы.ГруппаОтчет.Видимость = Истина;
			Элементы.СформироватьОтчет.Видимость = Ложь;
			Элементы.СформироватьОтчетОнлайнОтчет.Видимость = Истина;
			Элементы.ОнлайнОтчетНастройки.Видимость = Истина;
			Элементы.ГруппаРаботаСГруппами.Видимость = Ложь;
			Отчет1 = Панель1.СсылкаНаОтчет;
		КонецЕсли;
	КонецЕсли;
	Если Панель2.Значение = "Отчет" И ЗначениеЗаполнено(Панель2.СсылкаНаОтчет) Тогда
		Если НЕ ТипЗнч(Панель2.СсылкаНаОтчет) = Тип("Строка") Тогда
			Если Панель1.Значение = "Карта" Тогда
				Элементы.Переместить(Элементы.ГруппаОтчет1, Элементы.СтраницаКарта);
			ИначеЕсли ПорядокКарты = 0 Тогда
				Элементы.Переместить(Элементы.ГруппаОтчет1, Элементы.СтраницаПанельПраво);
			Иначе
				Элементы.Переместить(Элементы.ГруппаОтчет1, Элементы.ГруппаПанельПраво);
			КонецЕсли;
			Элементы.СформироватьОтчет1.Видимость = Истина;
			Элементы.СформироватьОтчетОнлайнОтчет1.Видимость = Ложь;
			Элементы.ОнлайнОтчетНастройки1.Видимость = Ложь;
			Элементы.ГруппаРаботаСГруппами1.Видимость = Истина;
			
			Элементы.ГруппаОтчет1.Видимость = Истина;
			Отчет2 = Панель2.СсылкаНаОтчет;
		Иначе
			Если Панель1.Значение = "Карта" Тогда
				Элементы.Переместить(Элементы.ГруппаОтчет1, Элементы.СтраницаКарта);
			ИначеЕсли ПорядокКарты = 0 Тогда
				Элементы.Переместить(Элементы.ГруппаОтчет1, Элементы.СтраницаПанельПраво);
			Иначе
				Элементы.Переместить(Элементы.ГруппаОтчет1, Элементы.ГруппаПанельПраво);
			КонецЕсли;
			Элементы.ГруппаОтчет1.Видимость = Истина;
			Элементы.СформироватьОтчет1.Видимость = Ложь;
			Элементы.СформироватьОтчетОнлайнОтчет1.Видимость = Истина;
			Элементы.ОнлайнОтчетНастройки1.Видимость = Истина;
			Элементы.ГруппаРаботаСГруппами1.Видимость = Ложь;
			Отчет2 = Панель2.СсылкаНаОтчет;
		КонецЕсли;
	КонецЕсли;
	Если Панель3.Значение = "Отчет" И ЗначениеЗаполнено(Панель3.СсылкаНаОтчет) Тогда
		Если НЕ ТипЗнч(Панель3.СсылкаНаОтчет) = Тип("Строка") Тогда
			Если Панель4.Значение = "Карта" Тогда
				Элементы.Переместить(Элементы.ГруппаОтчет2, Элементы.СтраницаКарта, Элементы.ГруппаКарта);
			Иначе
				Элементы.Переместить(Элементы.ГруппаОтчет2, Элементы.ГруппаПанельЛево);
			КонецЕсли;
			Элементы.СформироватьОтчет2.Видимость = Истина;
			Элементы.СформироватьОтчетОнлайнОтчет2.Видимость = Ложь;
			Элементы.ОнлайнОтчетНастройки2.Видимость = Ложь;
			Элементы.ГруппаОтчет2.Видимость = Истина;
			Элементы.ГруппаРаботаСГруппами2.Видимость = Истина;
			Отчет3 = Панель3.СсылкаНаОтчет;
		Иначе
			Если Панель4.Значение = "Карта" Тогда
				Элементы.Переместить(Элементы.ГруппаОтчет2, Элементы.СтраницаКарта, Элементы.ГруппаКарта);
			Иначе
				Элементы.Переместить(Элементы.ГруппаОтчет2, Элементы.ГруппаПанельЛево);
			КонецЕсли;
			Элементы.ГруппаОтчет2.Видимость = Истина;
			Элементы.СформироватьОтчет2.Видимость = Ложь;
			Элементы.СформироватьОтчетОнлайнОтчет2.Видимость = Истина;
			Элементы.ОнлайнОтчетНастройки2.Видимость = Истина;
			Элементы.ГруппаРаботаСГруппами2.Видимость = Ложь;
			Отчет3 = Панель3.СсылкаНаОтчет;
		КонецЕсли;
	КонецЕсли;
	Если Панель4.Значение = "Отчет" И ЗначениеЗаполнено(Панель4.СсылкаНаОтчет) Тогда
		Если НЕ ТипЗнч(Панель4.СсылкаНаОтчет) = Тип("Строка") Тогда
			Если Панель3.Значение = "Карта" Тогда
				Элементы.Переместить(Элементы.ГруппаОтчет3, Элементы.СтраницаКарта);
			Иначе
				Элементы.Переместить(Элементы.ГруппаОтчет3, Элементы.ГруппаПанельПраво);
			КонецЕсли;
			Элементы.СформироватьОтчет3.Видимость = Истина;
			Элементы.СформироватьОтчетОнлайнОтчет3.Видимость = Ложь;
			Элементы.ОнлайнОтчетНастройки3.Видимость = Ложь;
			Элементы.ГруппаРаботаСГруппами3.Видимость = Истина;
			Элементы.ГруппаОтчет3.Видимость = Истина;
			Отчет4 = Панель4.СсылкаНаОтчет;
		Иначе
			Если Панель3.Значение = "Карта" Тогда
				Элементы.Переместить(Элементы.ГруппаОтчет3, Элементы.СтраницаКарта);
			Иначе
				Элементы.Переместить(Элементы.ГруппаОтчет3, Элементы.ГруппаПанельПраво);
			КонецЕсли;
			Элементы.ГруппаОтчет3.Видимость = Истина;
			Элементы.СформироватьОтчет3.Видимость = Ложь;
			Элементы.СформироватьОтчетОнлайнОтчет3.Видимость = Истина;
			Элементы.ОнлайнОтчетНастройки3.Видимость = Истина;
			Элементы.ГруппаРаботаСГруппами3.Видимость = Ложь;
			Отчет4 = Панель4.СсылкаНаОтчет;
		КонецЕсли;
	КонецЕсли;

Конецпроцедуры

&НаКлиенте
Процедура СформироватьОтчеты(ФормироватьОнлайнОтчеты = Ложь)
	
	ДатаНачОтчет = НачалоДня(РабочаяДата) - КоличествоДней * 86400;
	ДатаКонОтчет = КонецДня(РабочаяДата);
	
	Если ТипЗнч(Отчет1) = Тип("Строка") Тогда
		Если ФормироватьОнлайнОтчеты Тогда
			Если Отчет1 = "Статистика" Тогда
				ИмяОтчета = "уатСводныйОтчетOmnicomm";
			ИначеЕсли Отчет1 = "Сводный отчет" Тогда
				ИмяОтчета = "уатСтатистикаOmnicomm";
			Иначе
				Возврат;
			КонецЕсли;
			Макет = уатОбщегоНазначения_проф.Omnicom_ПолучитьМакетОтчета(ИмяОтчета);
			ТабДок1 = уатОбщегоНазначения_проф.Omnicom_ВывестиСообщениеОтчет(Макет, Нстр("ru = 'Для отображения данных нажмите ""Сформировать""'"));
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(Отчет1) Тогда
		ТабДок1 = СформироватьОффлайнОтчет(Отчет1, АдресСхемы, мсвОтмеченныеТС, ДатаНачОтчет, ДатаКонОтчет);
	КонецЕсли;
	
	Если ТипЗнч(Отчет2) = Тип("Строка") Тогда
		Если ФормироватьОнлайнОтчеты Тогда
			Если Отчет2 = "Статистика" Тогда
				ИмяОтчета = "уатСводныйОтчетOmnicomm";
			ИначеЕсли Отчет2 = "Сводный отчет" Тогда
				ИмяОтчета = "уатСтатистикаOmnicomm";
			Иначе
				Возврат;
			КонецЕсли;
			Макет = уатОбщегоНазначения_проф.Omnicom_ПолучитьМакетОтчета(ИмяОтчета);
			ТабДок2 = уатОбщегоНазначения_проф.Omnicom_ВывестиСообщениеОтчет(Макет, Нстр("ru = 'Для отображения данных нажмите ""Сформировать""'"));
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(Отчет2) Тогда
		ТабДок2 = СформироватьОффлайнОтчет(Отчет2, АдресСхемы1, мсвОтмеченныеТС, ДатаНачОтчет, ДатаКонОтчет);
	КонецЕсли;
	
	Если ТипЗнч(Отчет3) = Тип("Строка")  Тогда
		Если ФормироватьОнлайнОтчеты Тогда
			Если Отчет3 = "Статистика" Тогда
				ИмяОтчета = "уатСводныйОтчетOmnicomm";
			ИначеЕсли Отчет3 = "Сводный отчет" Тогда
				ИмяОтчета = "уатСтатистикаOmnicomm";
			Иначе
				Возврат;
			КонецЕсли;
			Макет = уатОбщегоНазначения_проф.Omnicom_ПолучитьМакетОтчета(ИмяОтчета);
			ТабДок3 = уатОбщегоНазначения_проф.Omnicom_ВывестиСообщениеОтчет(Макет, Нстр("ru = 'Для отображения данных нажмите ""Сформировать""'"));
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(Отчет3) Тогда
		ТабДок3 = СформироватьОффлайнОтчет(Отчет3, АдресСхемы2, мсвОтмеченныеТС, ДатаНачОтчет, ДатаКонОтчет);
	КонецЕсли;
	
	Если ТипЗнч(Отчет4) = Тип("Строка") Тогда
		Если ФормироватьОнлайнОтчеты Тогда
			Если Отчет4 = "Статистика" Тогда
				ИмяОтчета = "уатСводныйОтчетOmnicomm";
			ИначеЕсли Отчет4 = "Сводный отчет" Тогда
				ИмяОтчета = "уатСтатистикаOmnicomm";
			Иначе
				Возврат;
			КонецЕсли;
			Макет = уатОбщегоНазначения_проф.Omnicom_ПолучитьМакетОтчета(ИмяОтчета);
			ТабДок4 = уатОбщегоНазначения_проф.Omnicom_ВывестиСообщениеОтчет(Макет, Нстр("ru = 'Для отображения данных нажмите ""Сформировать""'"));
		КонецЕсли;
	ИначеЕсли ЗначениеЗаполнено(Отчет4) Тогда
		ТабДок4 = СформироватьОффлайнОтчет(Отчет4, АдресСхемы3, мсвОтмеченныеТС, ДатаНачОтчет, ДатаКонОтчет);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция СформироватьОффлайнОтчет(Отчет, АдресСхемы, мсвОтмеченныеТС, ДатаНачОтчет, ДатаКонОтчет)
	
	Если ТипЗнч(Отчет.Отчет.Ссылка) = Тип("СправочникСсылка.ДополнительныеОтчетыИОбработки") Тогда
		Попытка
			ВнешнийОбъект         = ДополнительныеОтчетыИОбработки.ОбъектВнешнейОбработки(Отчет.Отчет.Ссылка);
			ОтчетМетаданные       = ВнешнийОбъект.Метаданные();
			СхемаКДМетаданные     = ОтчетМетаданные.ОсновнаяСхемаКомпоновкиДанных;
			СхемаКомпоновкиДанных = ВнешнийОбъект.ПолучитьМакет(СхемаКДМетаданные.Имя);
		Исключение
			Возврат Новый ТабличныйДокумент;
		КонецПопытки;
	Иначе
		ИмяОтчета = ДополнительныеОтчетыИОбработкиВызовСервера.ПодключитьВнешнююОбработку(Отчет.Отчет.Ссылка);
		Макеты = Метаданные.НайтиПоПолномуИмени(Отчет.Отчет.ПолноеИмя).Макеты;
		Если Макеты.Количество() Тогда
			МакетИмя = Макеты[0].Имя;
		Иначе
			Возврат Новый ТабличныйДокумент;
		КонецЕсли;
		
		СхемаКомпоновкиДанных = Отчеты[Отчет.Отчет.Имя].ПолучитьМакет(МакетИмя);
	КонецЕсли;
	КомпоновщикНастроекКомпоновкиДанных = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроекКомпоновкиДанных.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	
	НастройкиКомпоновки = Отчет.Настройки.Получить();
	Если НастройкиКомпоновки = Неопределено Тогда
		НастройкиКомпоновки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	КонецЕсли;
	
	ПараметрыВывода = НастройкиКомпоновки.ПараметрыВывода;
	ВыводитьЗаголовок = "";
	ВыводитьПараметры = "";
	ВыводитьОтбор     = "";
	Для Каждого ТекСтрока Из ПараметрыВывода.ДоступныеПараметры.Элементы Цикл
		Если ТекСтрока.Заголовок = "Выводить заголовок" Тогда
			ВыводитьЗаголовок = ТекСтрока.Параметр;
		КонецЕсли;
		Если ТекСтрока.Заголовок = "Выводить параметры" Тогда
			ВыводитьПараметры = ТекСтрока.Параметр;
		КонецЕсли;
		Если ТекСтрока.Заголовок = "Выводить отбор" Тогда
			ВыводитьОтбор = ТекСтрока.Параметр;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекСтрока Из ПараметрыВывода.Элементы Цикл
		Если ТекСтрока.Параметр = ВыводитьЗаголовок Тогда
			ТекСтрока.Использование = Истина;
			ТекСтрока.Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
		КонецЕсли;
		Если ТекСтрока.Параметр = ВыводитьПараметры Тогда
			ТекСтрока.Использование = Истина;
			ТекСтрока.Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
		КонецЕсли;
		Если ТекСтрока.Параметр = ВыводитьОтбор Тогда
			ТекСтрока.Использование = Истина;
			ТекСтрока.Значение = ТипВыводаТекстаКомпоновкиДанных.НеВыводить;
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыДанных = НастройкиКомпоновки.ПараметрыДанных;

	СтПериод = Новый СтандартныйПериод();
	СтПериод.ДатаНачала    = ДатаНачОтчет;
	СтПериод.ДатаОкончания = ДатаКонОтчет;
	Для Каждого ТекСтрока Из ПараметрыДанных.Элементы Цикл
		Если Строка(ТекСтрока.Параметр) = "ПериодОтчета" Тогда
			ТекСтрока.Значение      = СтПериод;
			ТекСтрока.Использование = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекСтрока Из СхемаКомпоновкиДанных.Параметры Цикл
		Если Строка(ТекСтрока.Имя) = "ПериодОтчета" Тогда
			ТекСтрока.Значение      = СтПериод;
		КонецЕсли;
	КонецЦикла;
	
	Отборы = НастройкиКомпоновки.Отбор;
	
	ОтборТСНайден = Ложь;
	Для Каждого ТекСтрока Из Отборы.Элементы Цикл
		Если мсвОтмеченныеТС.Количество() И (Строка(ТекСтрока.ЛевоеЗначение) = "ТС") Тогда
			ТекСтрока.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
			ТекСтрока.ПравоеЗначение = мсвОтмеченныеТС;
			ТекСтрока.Использование  = Истина;
			ОтборТСНайден = Истина;
		КонецЕсли;
	КонецЦикла;
	
	ЕстьПоле = Ложь;
	ДоступныеЭл = НастройкиКомпоновки.Выбор.Элементы;
	Для Каждого ТекСтрока Из ДоступныеЭл Цикл
		Если ТекСтрока.Поле = "ТС" Тогда
			ЕстьПоле = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если НЕ ОтборТСНайден И ЕстьПоле И мсвОтмеченныеТС.Количество() <> 0 Тогда
		НовыйОтбор = Отборы.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйОтбор.ВидСравнения   = ВидСравненияКомпоновкиДанных.ВСписке;
		НовыйОтбор.ПравоеЗначение = мсвОтмеченныеТС;
		НовыйОтбор.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("ТС");
		НовыйОтбор.Использование  = Истина;
	КонецЕсли;
	
	АдресСхемы = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, Новый УникальныйИдентификатор);
	КомпоновщикНастроекКомпоновкиДанных = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроекКомпоновкиДанных.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемы));
	ФиксированныеНастройки    = КомпоновщикНастроекКомпоновкиДанных.ФиксированныеНастройки;
	ПользовательскиеНастройки = КомпоновщикНастроекКомпоновкиДанных.ПользовательскиеНастройки;
	
	ПараметрыФормирования = Новый Структура();
	ПараметрыФормирования.Вставить("СсылкаВарианта", Отчет);
	ПараметрыФормирования.Вставить("АдресСхемы", АдресСхемы);
	ПараметрыФормирования.Вставить("НастройкиКД",НастройкиКомпоновки);
	ПараметрыФормирования.Вставить("ПользовательскиеНастройкиКД", ПользовательскиеНастройки);
	Попытка
		ФормаОтчета = ВариантыОтчетов.СформироватьОтчет(ПараметрыФормирования, Ложь, Ложь);
		Возврат ФормаОтчета.ТабличныйДокумент;
	Исключение
		ФормаОтчета = Новый ТабличныйДокумент;
		Возврат ФормаОтчета;
	КонецПопытки;
	
КонецФункции

&НаКлиенте
Процедура СформироватьОнлайнОтчет(Панель = 1)
	
	ДатаНач = НачалоДня(РабочаяДата) - (КоличествоДней - 1) * 86400;
	ДатаКон = КонецДня(РабочаяДата);
	
	Если ДатаНач - ДатаКон > 2592000 Тогда
		ДатаНач = НачалоМесяца(ДатаКон);
	КонецЕсли;
	
	ПараметрыВыполненияФЗ = Новый Структура;
	ПараметрыВыполненияФЗ.Вставить("ДатаНачОтчет", ДатаНач);
	ПараметрыВыполненияФЗ.Вставить("ДатаКонОтчет", ДатаКон);
	ПараметрыВыполненияФЗ.Вставить("мсвОтмеченныеТС", мсвОтмеченныеТС);
	
	ЭтотОбъект["ОтчетСформированПанель" + Панель] = Ложь;
	ИмяПроцедурыОбработчикаОжидания	 = "ФоновоеЗаданиеПроверитьНаКлиенте" + Панель;
	ИмяОтчета = ЭтотОбъект["Отчет" + Панель];
	
	Если ИмяОтчета = "Статистика" Тогда
		ИмяМетодаФЗ = "уатОбщегоНазначения_проф.Omnicomm_СформироватьОтчетСтатистикаВФоне";
	ИначеЕсли ИмяОтчета = "Сводный отчет" Тогда
		ИмяМетодаФЗ = "уатОбщегоНазначения_проф.Omnicomm_СформироватьСводныйОтчетВФоне";
	Иначе
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(Нстр("ru = 'Возможно требуется перевыбрать отчет в справочнике ""Рабочие столы""'"));
		Возврат;
	КонецЕсли;
	
	ТребуетсяОбработчик = уатОбщегоНазначения_проф.СтартФоновогоЗаданияНаСервере(ПараметрыВыполненияФЗ, ИмяМетодаФЗ, ЭтотОбъект["ФоновоеЗаданиеАдресХранилищаОнлайнОтчетПанель" + Панель], ЭтотОбъект["ФоновоеЗаданиеИдентификаторОнлайнОтчетПанель" + Панель], УникальныйИдентификатор);
	Если ТребуетсяОбработчик Тогда
		Если Панель = 1 Тогда
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжиданияПостроенияОтчетаПанель1);
		ИначеЕсли Панель = 2 Тогда
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжиданияПостроенияОтчетаПанель2);
		ИначеЕсли Панель = 3 Тогда
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжиданияПостроенияОтчетаПанель3);
		ИначеЕсли Панель = 4 Тогда
			ДлительныеОперацииКлиент.ИнициализироватьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжиданияПостроенияОтчетаПанель4);
		КонецЕСли;
		ПодключитьОбработчикОжидания(ИмяПроцедурыОбработчикаОжидания, 1, Истина);
	Иначе
		ОтключитьОбработчикОжидания(ИмяПроцедурыОбработчикаОжидания);
		Попытка
			ЭтотОбъект["ТабДок" + Панель] = ПолучитьИзВременногоХранилища(ЭтотОбъект["ФоновоеЗаданиеАдресХранилищаОнлайнОтчетПанель" + Панель]).ТабличныйДокумент;
		Исключение
		КонецПопытки;
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ФоновоеЗаданиеПроверитьНаКлиенте1()
	Задание = уатОбщегоНазначения_проф.ФоновоеЗаданиеПроверитьНаСервере(ТабДок1, ОтчетСформированПанель1, ФоновоеЗаданиеИдентификаторОнлайнОтчетПанель1, ФоновоеЗаданиеАдресХранилищаОнлайнОтчетПанель1);
	Если Задание.Выполняется Тогда
		Макет       = уатОбщегоНазначения_проф.Omnicom_ПолучитьМакетОтчета("уатСводныйОтчетOmnicomm");
		тдРезультат = уатОбщегоНазначения_проф.Omnicom_ВывестиСообщениеОтчет(Макет, Нстр("ru = 'Идет построение отчета...'"));
		ТабДок1     = тдРезультат;
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжиданияПостроенияОтчетаПанель1);
		ПодключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте1", ПараметрыОбработчикаОжиданияПостроенияОтчетаПанель1.ТекущийИнтервал, Истина);
	Иначе
		Если ОтчетСформированПанель1 Тогда
			ПоказатьОповещениеПользователя(НСтр("ru='Отчет сформирован';en='Report is generated'"), , Заголовок);
		Иначе
			ПоказатьОповещениеПользователя(НСтр("ru='Отчет не сформирован';en='Report is not generated'"), , Заголовок);
		КонецЕсли;
		ОтключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте1");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ФоновоеЗаданиеПроверитьНаКлиенте2()
	Задание = уатОбщегоНазначения_проф.ФоновоеЗаданиеПроверитьНаСервере(ТабДок2, ОтчетСформированПанель2, ФоновоеЗаданиеИдентификаторОнлайнОтчетПанель2, ФоновоеЗаданиеАдресХранилищаОнлайнОтчетПанель2);
	Если Задание.Выполняется Тогда
		Макет       = уатОбщегоНазначения_проф.Omnicom_ПолучитьМакетОтчета("уатСводныйОтчетOmnicomm");
		тдРезультат = уатОбщегоНазначения_проф.Omnicom_ВывестиСообщениеОтчет(Макет, Нстр("ru = 'Идет построение отчета...'"));
		ТабДок2     = тдРезультат;
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжиданияПостроенияОтчетаПанель2);
		ПодключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте2", ПараметрыОбработчикаОжиданияПостроенияОтчетаПанель2.ТекущийИнтервал, Истина);
	Иначе
		Если ОтчетСформированПанель2 Тогда
			ПоказатьОповещениеПользователя(НСтр("ru='Отчет сформирован';en='Report is generated'"), , Заголовок);
		Иначе
			ПоказатьОповещениеПользователя(НСтр("ru='Отчет не сформирован';en='Report is not generated'"), , Заголовок);
		КонецЕсли;
		ОтключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте2");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ФоновоеЗаданиеПроверитьНаКлиенте3()
	Задание = уатОбщегоНазначения_проф.ФоновоеЗаданиеПроверитьНаСервере(ТабДок3, ОтчетСформированПанель3, ФоновоеЗаданиеИдентификаторОнлайнОтчетПанель3, ФоновоеЗаданиеАдресХранилищаОнлайнОтчетПанель3);
	Если Задание.Выполняется Тогда
		Макет       = уатОбщегоНазначения_проф.Omnicom_ПолучитьМакетОтчета("уатСводныйОтчетOmnicomm");
		тдРезультат = уатОбщегоНазначения_проф.Omnicom_ВывестиСообщениеОтчет(Макет, Нстр("ru = 'Идет построение отчета...'"));
		ТабДок3     = тдРезультат;
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжиданияПостроенияОтчетаПанель3);
		ПодключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте3", ПараметрыОбработчикаОжиданияПостроенияОтчетаПанель3.ТекущийИнтервал, Истина);
	Иначе
		Если ОтчетСформированПанель3 Тогда
			ПоказатьОповещениеПользователя(НСтр("ru='Отчет сформирован';en='Report is generated'"), , Заголовок);
		Иначе
			ПоказатьОповещениеПользователя(НСтр("ru='Отчет не сформирован';en='Report is not generated'"), , Заголовок);
		КонецЕсли;
		ОтключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте3");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ФоновоеЗаданиеПроверитьНаКлиенте4()
	Задание = уатОбщегоНазначения_проф.ФоновоеЗаданиеПроверитьНаСервере(ТабДок4, ОтчетСформированПанель4, ФоновоеЗаданиеИдентификаторОнлайнОтчетПанель4, ФоновоеЗаданиеАдресХранилищаОнлайнОтчетПанель4);
	Если Задание.Выполняется Тогда
		Макет       = уатОбщегоНазначения_проф.Omnicom_ПолучитьМакетОтчета("уатСводныйОтчетOmnicomm");
		тдРезультат = уатОбщегоНазначения_проф.Omnicom_ВывестиСообщениеОтчет(Макет, Нстр("ru = 'Идет построение отчета...'"));
		ТабДок4     = тдРезультат;
		ДлительныеОперацииКлиент.ОбновитьПараметрыОбработчикаОжидания(ПараметрыОбработчикаОжиданияПостроенияОтчетаПанель4);
		ПодключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте4", ПараметрыОбработчикаОжиданияПостроенияОтчетаПанель4.ТекущийИнтервал, Истина);
	Иначе
		Если ОтчетСформированПанель4 Тогда
			ПоказатьОповещениеПользователя(НСтр("ru='Отчет сформирован';en='Report is generated'"), , Заголовок);
		Иначе
			ПоказатьОповещениеПользователя(НСтр("ru='Отчет не сформирован';en='Report is not generated'"), , Заголовок);
		КонецЕсли;
		ОтключитьОбработчикОжидания("ФоновоеЗаданиеПроверитьНаКлиенте4");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтчетСкомпоноватьРезультат(Команда)
	ДатаНачОтчет = НачалоДня(РабочаяДата) - (КоличествоДней - 1) * 86400;
	ДатаКонОтчет = КонецДня(РабочаяДата);
	ТабДок1 = СформироватьОффлайнОтчет(Отчет1, АдресСхемы, мсвОтмеченныеТС, ДатаНачОтчет, ДатаКонОтчет);
КонецПроцедуры

&НаКлиенте
Процедура ОтчетСкомпоноватьРезультат1(Команда)
	ДатаНачОтчет = НачалоДня(РабочаяДата) - (КоличествоДней - 1) * 86400;
	ДатаКонОтчет = КонецДня(РабочаяДата);
	ТабДок2 = СформироватьОффлайнОтчет(Отчет2, АдресСхемы1, мсвОтмеченныеТС, ДатаНачОтчет, ДатаКонОтчет);
КонецПроцедуры

&НаКлиенте
Процедура ОтчетСкомпоноватьРезультат2(Команда)
	ДатаНачОтчет = НачалоДня(РабочаяДата) - (КоличествоДней - 1) * 86400;
	ДатаКонОтчет = КонецДня(РабочаяДата);
	ТабДок3 = СформироватьОффлайнОтчет(Отчет3, АдресСхемы2, мсвОтмеченныеТС, ДатаНачОтчет, ДатаКонОтчет);
КонецПроцедуры

&НаКлиенте
Процедура ОтчетСкомпоноватьРезультат3(Команда)
	ДатаНачОтчет = НачалоДня(РабочаяДата) - (КоличествоДней - 1) * 86400;
	ДатаКонОтчет = КонецДня(РабочаяДата);
	ТабДок4 = СформироватьОффлайнОтчет(Отчет4, АдресСхемы3, мсвОтмеченныеТС, ДатаНачОтчет, ДатаКонОтчет);
КонецПроцедуры

&НаКлиенте
Процедура ОтчетОнлайнСкомпоноватьРезультат(Команда)
	СформироватьОнлайнОтчет();
КонецПроцедуры

&НаКлиенте
Процедура ОтчетОнлайнСкомпоноватьРезультат1(Команда)
	СформироватьОнлайнОтчет(2);
КонецПроцедуры

&НаКлиенте
Процедура ОтчетОнлайнСкомпоноватьРезультат2(Команда)
	СформироватьОнлайнОтчет(3);
КонецПроцедуры

&НаКлиенте
Процедура ОтчетОнлайнСкомпоноватьРезультат3(Команда)
	СформироватьОнлайнОтчет(4);
КонецПроцедуры

&НаСервере
Процедура ДобавитьКнопкуНаФорму(Элементы, ИмяКнопки, ИмяКоманды, ИмяДействия, Синоним, ГруппаРодитель = Неопределено, ТолькоВоВсехДействиях = Ложь, Картинка = Неопределено, Пометка = Ложь)
	
	// Добавляем новую команду обработки выбора вида операции.
	Команда = Команды.Добавить(ИмяКоманды);
	Команда.Действие = ИмяДействия;
	Если Картинка <> Неопределено Тогда
		Команда.Картинка = Картинка;
	КонецЕсли;
	
	Если ГруппаРодитель = Неопределено Тогда
		НоваяКнопка = Элементы.Добавить(ИмяКнопки, Тип("КнопкаФормы"));
	Иначе    
		НоваяКнопка = Элементы.Добавить(ИмяКнопки, Тип("КнопкаФормы"), ГруппаРодитель);
	КонецЕсли;      
	НоваяКнопка.Вид                           = ВидКнопкиФормы.КнопкаКоманднойПанели;
	НоваяКнопка.ИмяКоманды                 = ИмяКоманды;
	НоваяКнопка.Заголовок                  = Синоним;
	НоваяКнопка.ТолькоВоВсехДействиях     = ТолькоВоВсехДействиях;
	НоваяКнопка.Пометка                 = Пометка;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьРабочиеСтолы()
	
	мРабочиеСтролы = Новый Массив();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	уатРабочиеСтолы.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.уатРабочиеСтолы КАК уатРабочиеСтолы
		|ГДЕ
		|	уатРабочиеСтолы.ПометкаУдаления = ЛОЖЬ
		|	И (уатРабочиеСтолы.Назначение = ""АРМ Контроль перевозок""
		|			ИЛИ уатРабочиеСтолы.Назначение = ""AWP Transportation control"")
		|
		|УПОРЯДОЧИТЬ ПО
		|	уатРабочиеСтолы.Наименование";
	
	РезультатЗапроса = Запрос.Выполнить();
	
	мРабочиеСтролы = РезультатЗапроса.Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	Возврат мРабочиеСтролы;

КонецФункции

&НаКлиенте
Процедура РабочийСтолПриИзменении(Команда)
	
	ПредЗначениеФлагВидимостьГруппыСобытия = ФлагВидимостьГруппыСобытия;
	
	Для Каждого ТекСтрока Из мРабочиеСтолы Цикл
		Элементы[ТекСтрока.Значение.ИмяКнопки].Пометка = Ложь;
		Если Команда.Имя = ТекСтрока.Значение.ИмяКнопки Тогда
			Элементы[ТекСтрока.Значение.ИмяКнопки].Пометка = Истина;
			РабочийСтол= ТекСтрока.Значение.Ссылка;
			СохранитьНастройкиПанелей();
			ВывестиПанелиАРМ();
			СформироватьОтчеты(Истина);
		КонецЕсли;
	КонецЦикла;
	
	Если ПредЗначениеФлагВидимостьГруппыСобытия <> ФлагВидимостьГруппыСобытия Тогда
		ОбновитьСобытия();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьСписокРабочихСтолов(Команда)
	
	ОткрытьФорму("Справочник.уатРабочиеСтолы.ФормаСписка");
	
КонецПроцедуры

&НаСервере
Процедура СформироватьПодменюПанелиАРМ()
	
	МассивРабочиеСтолы = ПолучитьРабочиеСтолы();

	КолвоПодчиненныеЭлементы = Элементы.ПанелиАРМ.ПодчиненныеЭлементы.Количество();
	Для Счетчик = 1 По КолвоПодчиненныеЭлементы Цикл
		СущКоманда = Команды.Найти("РабочийСтол" + Счетчик);
		Если СущКоманда <> Неопределено Тогда
			Команды.Удалить(СущКоманда);
		КонецЕсли;
		СущЭл = Элементы.Найти("РабочийСтол" + Счетчик);
		Если СущЭл <> Неопределено Тогда
			Элементы.Удалить(СущЭл);
		КонецЕсли;
	КонецЦикла;
	СущКоманда = Команды.Найти("СписокРабочиеСтолы");
	Если СущКоманда <> Неопределено Тогда
		Команды.Удалить(СущКоманда);
	КонецЕсли;
	СущЭл = Элементы.Найти("СписокРабочиеСтолы");
	Если СущЭл <> Неопределено Тогда
		Элементы.Удалить(СущЭл);
	КонецЕсли;
	
	Сч = 1;
	Пометка = Ложь;
	мРабочиеСтолы.Очистить();
	Для Каждого ТекСтрока Из МассивРабочиеСтолы Цикл
		ИмяКнопки = "РабочийСтол" + Сч;
		Если ТекСтрока = ПредопределенноеЗначение("Справочник.уатРабочиеСтолы.КартаПункты") Тогда
			СтандартныйРабочийстол = ИмяКнопки;
		КонецЕсли;
		мРабочиеСтолы.Добавить(Новый Структура("ИмяКнопки, Ссылка", ИмяКнопки, ТекСтрока));
		ДобавитьКнопкуНаФорму(Элементы, ИмяКнопки, ИмяКнопки, "РабочийСтолПриИзменении", Строка(ТекСтрока),Элементы.ПанелиАРМ,,,ТекСтрока = РабочийСтол);
		Если НЕ Пометка Тогда
			Пометка = ТекСтрока = РабочийСтол;
		КонецЕсли;
		Сч = Сч + 1;
	КонецЦикла;
	
	Если НЕ Пометка Тогда
		РабочийСтол = ПредопределенноеЗначение("Справочник.уатРабочиеСтолы.КартаПункты");
		СущЭл = Элементы.Найти(СтандартныйРабочийстол);
		Если СущЭл <> Неопределено Тогда
			СущЭл.Пометка = Истина;
			СохранитьНастройкиПанелей();
			ВывестиПанелиАРМ();
		КонецЕсли;
	КонецЕсли;
	
	ИмяКнопки = "СписокРабочиеСтолы";
	мРабочиеСтолы.Добавить(Новый Структура("ИмяКнопки, Ссылка", ИмяКнопки, ТекСтрока));
	ДобавитьКнопкуНаФорму(Элементы, ИмяКнопки, ИмяКнопки, "ОткрытьСписокРабочихСтолов", Нстр("en = 'Desktop'; ru = 'Рабочие столы'"),Элементы.ПанелиАРМ,,БиблиотекаКартинок.Справочник,Ложь);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСобытия()
	
	Попытка
		ОтключитьОбработчикОжидания("ОбработчикАвтообновленияСобытий");
	Исключение
	КонецПопытки;
	
	Если НЕ ФлагВидимостьГруппыСобытия Тогда
		Возврат;
	КонецЕсли;
	
	ОбработчикАвтообновленияСобытий();
	
	Если Не ПериодАвтоматическогоОбновленияСобытий = 0 Тогда 
		ПодключитьОбработчикОжидания("ОбработчикАвтообновленияСобытий", ПериодАвтоматическогоОбновленияСобытий, Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьАдресХранилищаДляРезультатаЗаполненияФактПосещения()
	
	АдресХранилищаФактПосещения = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначениеРеквизитов(Объект, ИмяРеквизитов)
	Возврат уатОбщегоНазначенияТиповые.ПолучитьЗначенияРеквизитов(Объект, ИмяРеквизитов);
КонецФункции

&НаСервере
Процедура УстановитьОграниченияИспользованияВОтбореДанныеПоТранспорту()
	
	ЗапрещенныеВОтбореПоля = Новый Массив;
	ЗапрещенныеВОтбореПоля.Добавить("ТС");
	ЗапрещенныеВОтбореПоля.Добавить("ШтрафЗаНевыполнениеЗаказа");
	ЗапрещенныеВОтбореПоля.Добавить("ШтрафЗаНевыполнениеЗаказаФиксир");
	ЗапрещенныеВОтбореПоля.Добавить("ШтрафЗаОкноМинута");
	ЗапрещенныеВОтбореПоля.Добавить("ШтрафЗаОкноМинутаПозднее");
	ЗапрещенныеВОтбореПоля.Добавить("ШтрафЗаОкноМинутаРанее");
	ЗапрещенныеВОтбореПоля.Добавить("ШтрафЗаОкноФиксир");
	ЗапрещенныеВОтбореПоля.Добавить("ШтрафЗаОкноФиксирПозднее");
	ЗапрещенныеВОтбореПоля.Добавить("ШтрафЗаОкноФиксирРанее");
	ЗапрещенныеВОтбореПоля.Добавить("ШтрафЗаПревышениеМаксимальногоПробегаЗаСмену");
	ЗапрещенныеВОтбореПоля.Добавить("ШтрафЗаПревышениеМаксимальногоПробегаЗаСменуФиксир");
	ЗапрещенныеВОтбореПоля.Добавить("ШтрафЗаПревышениеМаксимумаЗаказов");
	ЗапрещенныеВОтбореПоля.Добавить("ШтрафЗаПревышениеМаксимумаЗаказовФиксир");
	ЗапрещенныеВОтбореПоля.Добавить("УдалитьШтрафЗаНарушениеМинимальногоКоличестваПунктов");
	ЗапрещенныеВОтбореПоля.Добавить("УдалитьШтрафЗаНарушениеМинимальногоКоличестваПунктовПункт");	

	ДанныеПоТранспорту.УстановитьОграниченияИспользованияВОтборе(ЗапрещенныеВОтбореПоля);
	ДанныеПоТранспорту.УстановитьОграниченияИспользованияВПорядке(ЗапрещенныеВОтбореПоля);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СформироватьСсылкуОбъекта(Знач ТипМетаданных, Знач ИмяОбъекта, Знач Guid)
	
	Если НРег(ТипМетаданных) = НРег("Справочники") Тогда 
		СсылкаОбъекта = Справочники[ИмяОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(Guid));
	ИначеЕсли НРег(ТипМетаданных) = НРег("Документы") Тогда 
		СсылкаОбъекта = Документы[ИмяОбъекта].ПолучитьСсылку(Новый УникальныйИдентификатор(Guid));
	Иначе 
		СсылкаОбъекта = Неопределено;
	КонецЕсли;
	
	Если СсылкаОбъекта = Неопределено Или СсылкаОбъекта.ПолучитьОбъект() = Неопределено Тогда 
		Возврат Неопределено;
	Иначе 
		Возврат СсылкаОбъекта;
	КонецЕсли;
	
КонецФункции

&НаСервере
Процедура УстановитьНаличиеСпидометра(ТС, мсвОтмеченныеТС)
	
	Если ЗначениеЗаполнено(ИдентификаторЗаданияРасчитатьФактРасстояние) Тогда
		Элементы.ОбновитьФактическоеРасстояние.Картинка = БиблиотекаКартинок.Обновить;
		ОтменитьВыполнениеЗаданияРасчитатьФактРасстояние(ИдентификаторЗаданияРасчитатьФактРасстояние);
	КонецЕсли;
	
	Если ТС.ЭтоГруппа Тогда 
		НаличиеСпидометра = Истина;
		ИсточникФактическихДанныхДляКартографии = "";
		Возврат;
	КонецЕсли;
	
	Трек_ТекущееТранспортноеСредство = ТС;
	Если НЕ ЗначениеЗаполнено(ТС) Тогда
		Возврат;
	КонецЕсли;
	ДанныеТС = ПолучитьЗначениеРеквизитов(ТС, "Модель, ИспользуемаяСистемаGPS, ИсточникФактическихДанныхДляКартографии");
	МодельТС           = ДанныеТС.Модель; 
	НаличиеСпидометра  = ПолучитьЗначениеРеквизита(МодельТС, "НаличиеСпидометра");
	Если ДанныеТС.ИсточникФактическихДанныхДляКартографии = ПредопределенноеЗначение("Перечисление.уатИсточникФактическихДанныхДляКартографии.МобильноеПриложение") Тогда
		ИсточникФактическихДанныхДляКартографии = "МобильноеПриложение";
	ИначеЕсли ЗначениеЗаполнено(ДанныеТС.ИспользуемаяСистемаGPS) Тогда
		ИсточникФактическихДанныхДляКартографии = "Мониторинг";
	Иначе 
		ИсточникФактическихДанныхДляКартографии = "";
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДанныеТрека()
	Если НаличиеСпидометра Тогда
		Элементы.ДекорацияОтображатьФактическийМаршрут.Заголовок = Нстр("ru = 'Фактический маршрут:'");
		ФактическоеРасстояние = СтрЗаменить(ФактическоеРасстояние, "м/ч", "км");
	Иначе
		Элементы.ДекорацияОтображатьФактическийМаршрут.Заголовок = Нстр("ru = 'Факт. время работы:'");
		ФактическоеРасстояние = СтрЗаменить(ФактическоеРасстояние, "км", "м/ч");
		ПлановоеРасстояние = "- км"; 
	КонецЕсли; 
КонецПроцедуры

&НаСервере
Процедура ОбновитьКнопкиПроигрывания()
	
	Если Трек_ПроигратьПлановыйМаршрутПометка Тогда 
		Элементы.Трек_ПроигратьПлановыйМаршрут.Картинка  = БиблиотекаКартинок.уатИконкаПаузаПроигрыванияМаршрута;
		Элементы.Трек_ПроигратьПлановыйМаршрут.Заголовок = Нстр("ru = 'Остановить'");
	Иначе 
		Элементы.Трек_ПроигратьПлановыйМаршрут.Картинка  = БиблиотекаКартинок.уатИконкаПроигратьМаршрут;
		Элементы.Трек_ПроигратьПлановыйМаршрут.Заголовок = Нстр("ru = 'Воспроизвести'");
	КонецЕсли;
	
	Если Трек_ПроигратьФактическийМаршрутПометка Тогда 
		Элементы.Трек_ПроигратьФактическийМаршрут.Картинка  = БиблиотекаКартинок.уатИконкаПаузаПроигрыванияМаршрута;
		Элементы.Трек_ПроигратьФактическийМаршрут.Заголовок = Нстр("ru = 'Остановить'");
	Иначе 
		Элементы.Трек_ПроигратьФактическийМаршрут.Картинка = БиблиотекаКартинок.уатИконкаПроигратьМаршрут;
		Элементы.Трек_ПроигратьФактическийМаршрут.Заголовок = Нстр("ru = 'Воспроизвести'");
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура Трек_СкоростьПроигрыванияПланМаршрутаПриИзменении()
	
	Если ПлановыйМаршрут = "" Тогда
		ПлановыйМаршрут = "[]";
	КонецЕсли;
	
	ПараметрыКоманды = Новый Структура("Проигрывать,СкоростьПроигрывания,ПроигратьФактМаршрут,МассивТочек",
	"false", 0, "false", ПлановыйМаршрут);
	КомандаСкрипта   = ПолучитьСтрокуКомандуКарты("playRoute", ПараметрыКоманды, ЯндексКарты);
	HTMLobj.evalJSFunc(КомандаСкрипта);
	
КонецПроцедуры

&НаКлиенте
Процедура Трек_СкоростьПроигрыванияФактМаршрутаПриИзменении()
	
	Если ФактическийМаршрут = "" Тогда
		ФактическийМаршрут = "[]";
	КонецЕсли;

	ПараметрыКоманды = Новый Структура("Проигрывать,СкоростьПроигрывания,ПроигратьФактМаршрут,МассивТочек",
		"false", 0, "false", ФактическийМаршрут);
	КомандаСкрипта   = ПолучитьСтрокуКомандуКарты("playRoute", ПараметрыКоманды, ЯндексКарты);
	HTMLobj.evalJSFunc(КомандаСкрипта);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПраваИНастройкиПользователя(Организация, НастройкаПольз)
	Возврат уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация, НастройкаПольз);
КонецФункции

&НаСервере
Процедура УстановитьВозможностьРедактированияФакта()
	РазрешитьРедактированиеФактаВМЛ = ПолучитьПраваИНастройкиПользователя(
		ПользователиКлиентСервер.АвторизованныйПользователь(), ПланыВидовХарактеристик.уатПраваИНастройки.РазрешитьРедактированиеФактаВМЛ);
		
	РазрешеноРедактирование = НЕ (НЕ РазрешитьРедактированиеФактаВМЛ 
			И ВидМаршрутныхДокументов = 0);
	
	Элементы.ДанныеПоПунктамПрибытиеФакт.Доступность = РазрешеноРедактирование;
	Элементы.ДанныеПоПунктамУбытиеФакт.Доступность   = РазрешеноРедактирование;
	Элементы.ДанныеПоПунктамВыполнен.Доступность     = РазрешеноРедактирование;
		
	Элементы.ДанныеПоПунктамЗаполнитьФактПосещениеПоGPS.Доступность  = РазрешеноРедактирование; 
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЗначениеРеквизита(Знач Ссылка, Знач ИмяРеквизита)
	
	Возврат ОбщегоНазначения.ЗначениеРеквизитаОбъекта(Ссылка, ИмяРеквизита);
	
КонецФункции

#КонецОбласти

#КонецОбласти

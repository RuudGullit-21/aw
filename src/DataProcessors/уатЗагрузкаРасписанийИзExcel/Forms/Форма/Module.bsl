
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// начало блока стандартных операций
	ДопПараметрыОткрытие = Новый Структура("ИмяФормы", ИмяФормы);
	уатЗащищенныеФункцииСервер.уатОбработкаФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	// конец блока стандартных операций
	
	ИспользоватьВыходы = ПолучитьФункциональнуюОпцию("уатИспользоватьУчетБилетовИВыручки");
	ЗаполнитьРасписаниеРейсов();
	
	ИнициализироватьСоответствиеЗаголовковФайлов();
	НомерПервойСтрокиДанных = 3;
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	УстановитьВидимость();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РежимРаботыПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеМаршрутовПунктовПриИзменении(Элемент)
	ЗаполнитьРасписаниеРейсов();
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;  
	
	Обработчик = Новый ОписаниеОповещения("ПоказатьДиалогВыбораФайла", ЭтотОбъект);
	НачатьПодключениеРасширенияРаботыСФайлами(Обработчик);
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуОткрытие(Элемент, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	Если Не ЗначениеЗаполнено(ПутьКФайлу) Тогда 
		СообщениеПользователю(НСтр("en='You must select a file';ru='Необходимо выбрать файл'"), "ПутьКФайлу");
		Возврат;
	КонецЕсли;
	
	Оповещение = Новый ОписаниеОповещения("ПутьКФайлуПослеОткрытия", ЭтотОбъект);
	НачатьЗапускПриложения(Оповещение, ПутьКФайлу);
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура СохранитьШаблон(Команда)
	РежимРаботыПоМаршрутам = 0;
	флРежимРаботыПоМаршрутам = РасписаниеМаршрутовПунктов = РежимРаботыПоМаршрутам;
	ПолноеИмяФайла = НСтр("en = 'Trip schedule'; ru = 'Расписание рейсов'") + ".xlsx";
	Если флРежимРаботыПоМаршрутам И уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП() Тогда
		КлючШаблона = "ШаблонТаблицыРасписанияРейсовПоМаршрутам";
	ИначеЕсли флРежимРаботыПоМаршрутам Тогда
		КлючШаблона = "ШаблонТаблицыРасписанияРейсовПоМаршрутам_проф";
	Иначе
		КлючШаблона = "ШаблонТаблицыРасписанияРейсовПоПунктам";
	КонецЕсли;
	ПараметрыОткрытия = Новый Структура("ПолноеИмяФайла, КлючШаблона", ПолноеИмяФайла, КлючШаблона);
	Обработчик        = Новый ОписаниеОповещения("ПоказатьДиалогВыбораФайлаШаблона", ЭтотОбъект, ПараметрыОткрытия);
	НачатьПодключениеРасширенияРаботыСФайлами(Обработчик);
	
КонецПроцедуры

&НаКлиенте
Процедура Записать(Команда)
	Если ДанныеРасписанияРейсов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ЗаписатьСервер();
КонецПроцедуры

&НаСервере
Процедура ЗаписатьСервер()	
	НаборЗаписей = РегистрыСведений.уатРасписаниеРейсов.СоздатьНаборЗаписей();
	// Загрузка
	Если РежимЗагрузки = 0 Тогда
		// В этом случае новые записи добавляются к старым, иначе они удаляются
		НаборЗаписей.Прочитать();
	КонецЕсли;
	ТаблицаРегистра = НаборЗаписей.Выгрузить();
	
	СчСоздано = 0;
	СчПропущено = 0;
	ДатаУстановкиРасписания = ТекущаяДатаСеанса();
		
	// Расшифровка входных данных - получение ссылочных реквизитов по их представлениям
	Для Каждого ТекСтрока Из ДанныеРасписанияРейсов Цикл
		СтруктураПоиска = Новый Структура("Маршрут, Выход, Рейс, УИДПункта, ПунктОтправления, ПунктНазначения, 
			|Грузоотправитель, Грузополучатель, ДатаУстановки, ДействуетС, ДействуетПо");
		СтруктураПоиска.УИДПункта        = ТекСтрока.УИДПункта;
		СтруктураПоиска.ДатаУстановки    = ТекСтрока.ДатаУстановки;
		СтруктураПоиска.ДействуетС       = ТекСтрока.ДействуетС;
		СтруктураПоиска.ДействуетПо      = ТекСтрока.ДействуетПо;
		
		СтруктураПоиска.Грузоотправитель = НайтиКонтрагента(ТекСтрока.Грузоотправитель);
		СтруктураПоиска.Грузополучатель  = НайтиКонтрагента(ТекСтрока.Грузополучатель);
		СтруктураПоиска.Маршрут          = НайтиМаршрут(ТекСтрока.Маршрут);
		СтруктураПоиска.ПунктОтправления = НайтиПункт(ТекСтрока.ПунктОтправления);
		СтруктураПоиска.ПунктНазначения  = НайтиПункт(ТекСтрока.ПунктНазначения);
		СтруктураПоиска.Выход            = НайтиВыход(ТекСтрока.Выход, СтруктураПоиска.Маршрут);
		Если ЗначениеЗаполнено(СтруктураПоиска.Маршрут) Тогда
			СтруктураПоиска.Рейс = НайтиРейсПоМаршруту(ТекСтрока.Рейс, СтруктураПоиска.Маршрут);
		Иначе
			СтруктураПоиска.Рейс = НайтиРейсПоПунктам(ТекСтрока.Рейс, СтруктураПоиска.ПунктОтправления, СтруктураПоиска.ПунктНазначения);
		КонецЕсли;
		
		НайденныеСтроки = ТаблицаРегистра.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() = 0 Тогда
			// Конфликтов нет
			СчСоздано = СчСоздано + 1;
			НоваяСтрока = ТаблицаРегистра.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтруктураПоиска);
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока, 
				"Пн, Вт, Ср, Чт, Пт, Сб, Вс, ДнейДоОтправления, ДнейВПути, FTL, ВремяПрибытия, ВремяУбытия");
		Иначе
			// Пока что игнорируем все конфликтующие записи
			СчПропущено = СчПропущено + 1;
		КонецЕсли;
	КонецЦикла;
	
	// Запись в регистр
	НаборЗаписей.Загрузить(ТаблицаРегистра);
	НаборЗаписей.Записать();
	
	ДанныеРасписанияРейсов.Очистить();
	
	ШаблонСообщения = НСтр(
		"en = 'Created roes: %1
		|Skipped rows: %2'; 
		|ru = 'Создано строк расписаний: %1
		|Пропущено строк: %2'"
	);
	
	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрШаблон(ШаблонСообщения, СчСоздано, СчПропущено));
КонецПроцедуры

&НаКлиенте
Процедура Выгрузить(Команда)
	
	РежимРаботыПоМаршрутам = 0;
	флРежимРаботыПоМаршрутам = РасписаниеМаршрутовПунктов = РежимРаботыПоМаршрутам;
	ПолноеИмяФайла = НСтр("en = 'Trip schedule'; ru = 'Расписание рейсов'") + ".xlsx";
	Если флРежимРаботыПоМаршрутам И уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП() Тогда
		КлючШаблона = "ШаблонТаблицыРасписанияРейсовПоМаршрутам";
	ИначеЕсли флРежимРаботыПоМаршрутам Тогда
		КлючШаблона = "ШаблонТаблицыРасписанияРейсовПоМаршрутам_проф";
	Иначе
		КлючШаблона = "ШаблонТаблицыРасписанияРейсовПоПунктам";
	КонецЕсли;
	ПараметрыОткрытия = Новый Структура("ПолноеИмяФайла, КлючШаблона", ПолноеИмяФайла, КлючШаблона);
	Обработчик = Новый ОписаниеОповещения("ПоказатьДиалогВыбораФайлаВыгрузить", ЭтотОбъект, ПараметрыОткрытия);
	НачатьПодключениеРасширенияРаботыСФайлами(Обработчик);

КонецПроцедуры

&НаКлиенте
Процедура РасписаниеРейсовОбновить(Команда)
	ЗаполнитьРасписаниеРейсов();
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьВсеСтроки(Команда)
	Для Каждого ТекСтрока Из ТаблицаРасписанияРейсов Цикл
		ТекСтрока.ФлагВыбора = Истина;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметкиВоВсехСтроках(Команда)
	Для Каждого ТекСтрока Из ТаблицаРасписанияРейсов Цикл
		ТекСтрока.ФлагВыбора = Ложь;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура Прочитать(Команда)
	Если Не ЗначениеЗаполнено(ПутьКФайлу) Тогда 
		СообщениеПользователю(НСтр("en='You must select a file';ru='Необходимо выбрать файл'"), "ПутьКФайлу");
		Возврат;
	КонецЕсли;
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("ИмяТаблицы",              "ТаблицаДанныхКлиенты");
	ДополнительныеПараметры.Вставить("ПутьКФайлу",              ПутьКФайлу);
	ДополнительныеПараметры.Вставить("НомерПервойСтрокиДанных", НомерПервойСтрокиДанных);
	
	Если ДанныеРасписанияРейсов.Количество() Тогда 
		ТекстВопроса = НСтр("en='The ""Schedule"" table will be cleared. Continue?';ru='Таблица расписаний будет очищена. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ОчиститьТаблицуДанных", ЭтотОбъект, ДополнительныеПараметры);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	Иначе 
		ПрочитатьДанныеИзФайла(ДополнительныеПараметры);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьВидимость()
	Элементы.ГруппаВыгрузка.Видимость = РежимРаботы = 0;
	Элементы.ГруппаЗагрузка.Видимость = РежимРаботы = 1;
	
	РежимРаботыПоМаршрутам = 0;
	флРежимРаботыПоМаршрутам = РасписаниеМаршрутовПунктов = РежимРаботыПоМаршрутам;
	Элементы.ТаблицаРасписанияРейсовМаршрут.Видимость = флРежимРаботыПоМаршрутам;
	Элементы.ТаблицаРасписанияРейсовВыход.Видимость = флРежимРаботыПоМаршрутам И ИспользоватьВыходы;
	Элементы.ТаблицаРасписанияРейсовУИДПункта.Видимость = флРежимРаботыПоМаршрутам;
	Элементы.ТаблицаРасписанияРейсовПунктОтправления.Видимость = Не флРежимРаботыПоМаршрутам;
	Элементы.ТаблицаРасписанияРейсовПунктНазначения.Видимость = Не флРежимРаботыПоМаршрутам;
	Элементы.ТаблицаРасписанияРейсовГрузоотправитель.Видимость = Не флРежимРаботыПоМаршрутам;
	Элементы.ТаблицаРасписанияРейсовГрузополучатель.Видимость = Не флРежимРаботыПоМаршрутам;
	Элементы.ТаблицаРасписанияРейсовДнейВПути.Видимость = Не флРежимРаботыПоМаршрутам;
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьРасписаниеРейсов()
	ТаблицаРасписанияРейсов.Очистить();
	Запрос = Новый Запрос;
	РежимРаботыПоМаршрутам = 0;
	флРежимРаботыПоМаршрутам = РасписаниеМаршрутовПунктов = РежимРаботыПоМаршрутам;
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатРасписаниеРейсов.Маршрут КАК Маршрут,
	|	уатРасписаниеРейсов.Выход КАК Выход,
	|	уатРасписаниеРейсов.Рейс КАК Рейс,
	|	уатРасписаниеРейсов.УИДПункта КАК УИДПункта,
	|	уатРасписаниеРейсов.ПунктОтправления КАК ПунктОтправления,
	|	уатРасписаниеРейсов.ПунктНазначения КАК ПунктНазначения,
	|	уатРасписаниеРейсов.Грузоотправитель КАК Грузоотправитель,
	|	уатРасписаниеРейсов.Грузополучатель КАК Грузополучатель,
	|	уатРасписаниеРейсов.ДатаУстановки КАК ДатаУстановки,
	|	уатРасписаниеРейсов.ДействуетС КАК ДействуетС,
	|	уатРасписаниеРейсов.ДействуетПо КАК ДействуетПо,
	|	уатРасписаниеРейсов.Пн КАК Пн,
	|	уатРасписаниеРейсов.Вт КАК Вт,
	|	уатРасписаниеРейсов.Ср КАК Ср,
	|	уатРасписаниеРейсов.Чт КАК Чт,
	|	уатРасписаниеРейсов.Пт КАК Пт,
	|	уатРасписаниеРейсов.Сб КАК Сб,
	|	уатРасписаниеРейсов.Вс КАК Вс,
	|	уатРасписаниеРейсов.ДнейДоОтправления КАК ДнейДоОтправления,
	|	уатРасписаниеРейсов.ДнейВПути КАК ДнейВПути,
	|	уатРасписаниеРейсов.FTL КАК FTL,
	|	уатРасписаниеРейсов.ВремяПрибытия КАК ВремяПрибытия,
	|	уатРасписаниеРейсов.ВремяУбытия КАК ВремяУбытия,
	|	ЛОЖЬ КАК ФлагВыбора
	|ИЗ
	|	РегистрСведений.уатРасписаниеРейсов КАК уатРасписаниеРейсов";
	Если флРежимРаботыПоМаршрутам Тогда
		Запрос.Текст = Запрос.Текст + "
		|ГДЕ
		|	уатРасписаниеРейсов.Маршрут <> &ПустойМаршрут";
		Запрос.УстановитьПараметр("ПустойМаршрут", Справочники.уатМаршруты.ПустаяСсылка());
	Иначе
		Запрос.Текст = Запрос.Текст + "
		|ГДЕ
		|	уатРасписаниеРейсов.ПунктОтправления <> &ПустойПункт
		|	И уатРасписаниеРейсов.ПунктНазначения <> &ПустойПункт";
		Запрос.УстановитьПараметр("ПустойПункт", Справочники.уатПунктыНазначения.ПустаяСсылка());
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|УПОРЯДОЧИТЬ ПО
	|	уатРасписаниеРейсов.Рейс,
	|	уатРасписаниеРейсов.ДатаУстановки,
	|	уатРасписаниеРейсов.ДействуетС,
	|	уатРасписаниеРейсов.ДействуетПо";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТаблицаРасписанияРейсов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура СохранитьШаблонФайлаПослеВыбораФайла(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТабДокШаблона = ПолучитьТабДокШаблонаДляСохранения(ДополнительныеПараметры.КлючШаблона);
	ТабДокШаблона.НачатьЗапись(, ВыбранныеФайлы[0], ТипФайлаТабличногоДокумента.XLSX);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьПослеВыбораФайла(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТабДокШаблона = ПолучитьТабДокДляСохранения(ДополнительныеПараметры.КлючШаблона);
	ТабДокШаблона.НачатьЗапись(, ВыбранныеФайлы[0], ТипФайлаТабличногоДокумента.XLSX);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьТабДокШаблонаДляСохранения(КлючШаблона)
	
	Возврат РеквизитФормыВЗначение("Объект").ПолучитьМакет(КлючШаблона);
	
КонецФункции

&НаСервере
Функция ПолучитьТабДокДляСохранения(КлючШаблона)
	
	Макет = ПолучитьТабДокШаблонаДляСохранения(КлючШаблона);
	
	ОбластьМакетаШапка  = Макет.ПолучитьОбласть("ШапкаТаблицы");
	ОбластьМакетаСтрока = Макет.ПолучитьОбласть("СтрокаТаблицы");

	ТабличныйДокумент = Новый ТабличныйДокумент;
	ТабличныйДокумент.Вывести(ОбластьМакетаШапка);
	Для Каждого ТекСтрока Из ТаблицаРасписанияРейсов Цикл
		Если Не ТекСтрока.ФлагВыбора Тогда
			Продолжить;
		КонецЕсли;
		
		Для Каждого ТекОбласть Из ОбластьМакетаСтрока.Области Цикл
			Попытка
				Если ТекОбласть.Имя = "СтрокаТаблицы" Тогда
					Продолжить;
				КонецЕсли;
				
				ТекЭлемент = ТекСтрока[ТекОбласть.Имя];
				Если ТипЗнч(ТекЭлемент) = Тип("Булево") Тогда
					ТекОбласть.Текст = Формат(ТекЭлемент, "БЛ=; БИ=+");
				ИначеЕсли ТекОбласть.Имя = "ДействуетС" Или ТекОбласть.Имя = "ДействуетПо" Тогда
					ТекОбласть.Текст = Формат(ТекЭлемент, "ДФ=dd.MM.yyyy");
				ИначеЕсли ТекОбласть.Имя = "ВремяПрибытия" Или ТекОбласть.Имя = "ВремяУбытия" Тогда
					ТекОбласть.Текст = Формат(ТекЭлемент, "ДФ=HH:mm:ss");
				Иначе
					ТекОбласть.Текст = ТекЭлемент;
				КонецЕсли;
			Исключение
			КонецПопытки;
		КонецЦикла;
		ТабличныйДокумент.Вывести(ОбластьМакетаСтрока);
	КонецЦикла;
	
	Возврат ТабличныйДокумент;
	
КонецФункции

&НаКлиенте
Процедура ПоказатьДиалогВыбораФайлаПродолжение(ИмяРеквизитаПутьКФайлу, ЗаголовокДиалога)
	
	ОповещениеВыбора = Новый ОписаниеОповещения("ПутьКФайлуЗавершениеВыбора", ЭтотОбъект, ИмяРеквизитаПутьКФайлу);
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.ПолноеИмяФайла     = ЭтотОбъект[ИмяРеквизитаПутьКФайлу];
	ДиалогВыбораФайла.Фильтр             = НСтр("en='Excel file';ru='Файлы Excel'") + "(*.xls; *.xlsx)|*.xls;*.xlsx";
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	ДиалогВыбораФайла.Заголовок          = ЗаголовокДиалога;
	
	ДиалогВыбораФайла.Показать(ОповещениеВыбора);
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуЗавершениеВыбора(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ЭтотОбъект[ДополнительныеПараметры] = ВыбранныеФайлы[0];
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуПослеОткрытия(КодВозврата, ДополнительныеПараметры) Экспорт 
	
	ДополнительнаяОбработкаНеТребуется = Истина;
	
КонецПроцедуры                 

&НаКлиенте
Процедура ОчиститьТаблицуДанных(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда 
		ДанныеРасписанияРейсов.Очистить();
		ПрочитатьДанныеИзФайла(ДополнительныеПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтруктуруШапки()
	
	СтруктураШапки = Новый Структура();
	
	Для Каждого ТекСтрока Из СоответствиеЗаголовковФайлов Цикл 
		
		ДанныеКлюча = Новый Структура();
		ДанныеКлюча.Вставить("НомерКолонки",        0);
		ДанныеКлюча.Вставить("ЗаголовокВФайле",     ТекСтрока.ЗаголовокВФайле);
		ДанныеКлюча.Вставить("ЗначениеПоУмолчанию", ТекСтрока.ЗначениеПоУмолчанию);
		СтруктураШапки.Вставить(ТекСтрока.ИмяКолонки, ДанныеКлюча);
		
	КонецЦикла;
	
	Возврат СтруктураШапки;
	
КонецФункции

&НаКлиенте
Процедура ПрочитатьДанныеИзФайла(ДополнительныеПараметры)
	
	Обработчик = Новый ОписаниеОповещения("ПрочитатьДанныеИзФайлаПослеПодключения", ЭтотОбъект, ДополнительныеПараметры);
	НачатьПодключениеРасширенияРаботыСФайлами(Обработчик);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализироватьСоответствиеЗаголовковФайлов()
	
	Если Метаданные.Языки.Найти("Русский") <> Неопределено И ТекущийЯзык() = Метаданные.Языки.Русский Тогда 
		СуффиксЛокализации = "C3";
	ИначеЕсли Метаданные.Языки.Найти("Английский") <> Неопределено И ТекущийЯзык() = Метаданные.Языки.Английский Тогда 
		СуффиксЛокализации = "C4";
	Иначе 
		СуффиксЛокализации = "C3";
	КонецЕсли;
	
	МакетСоответствий = РеквизитФормыВЗначение("Объект").ПолучитьМакет("СоответствиеЗаголовковФайлов");
	
	Для СчСтрок = 1 По МакетСоответствий.ВысотаТаблицы Цикл 
		СчСтрокой = Формат(СчСтрок, "ЧН=0; ЧГ=0");
		
		СтрокаСоответствия = СоответствиеЗаголовковФайлов.Добавить();
		СтрокаСоответствия.ИмяТаблицы          = МакетСоответствий.Область("R"+СчСтрокой+"C1").Текст;
		СтрокаСоответствия.ИмяКолонки          = МакетСоответствий.Область("R"+СчСтрокой+"C2").Текст;
		СтрокаСоответствия.ЗаголовокВФайле     = НРег(МакетСоответствий.Область("R"+СчСтрокой+СуффиксЛокализации).Текст);
		СтрокаСоответствия.ПроверкаЗаполнения  = НРег(МакетСоответствий.Область("R"+СчСтрокой+"C5").Текст) = "да";
		СтрокаСоответствия.ЗначениеПоУмолчанию = МакетСоответствий.Область("R"+СчСтрокой+"C6").Текст;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура СообщениеПользователю(ТекстСообщения, Поле="", Отказ=Ложь)
	
	ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстСообщения, ,Поле, , Отказ);
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьЗначениеЯчейки(ЯчейкаФайла, ТипЗначения)
	
	Попытка
		Если ТипЗнч(ЯчейкаФайла) = Тип("COMОбъект") Тогда 
			ТекстЯчейки = ЯчейкаФайла.Text;
		Иначе 
			ТекстЯчейки = ЯчейкаФайла;
		КонецЕсли;
		
	Исключение
		ТекстЯчейки = "";
	КонецПопытки;
	
	Попытка
		Если ТипЗнч(ЯчейкаФайла) = Тип("COMОбъект") Тогда 
			ЗначениеЯчейки = ЯчейкаФайла.Value;
		Иначе 
			ЗначениеЯчейки = ЯчейкаФайла;
		КонецЕсли;
		
	Исключение
		ЗначениеЯчейки = Неопределено;
	КонецПопытки;
	
	Если ТипЗначения = Тип("Число") Тогда 
		Попытка
			Возврат ЗначениеЯчейки;
		Исключение
		КонецПопытки;
		
		Попытка
			Возврат Число(ТекстЯчейки);
		Исключение
		КонецПопытки;
		
		ВызватьИсключение НСтр("en='Invalid cell value';ru='Некорректное значение в ячейке'");
		
	ИначеЕсли ТипЗначения = Тип("Дата") Тогда 
		Попытка
			Если ТипЗнч(ЗначениеЯчейки) = Тип("Строка") Тогда 
				Возврат ПреобразоватьСтрокуВДату(ЗначениеЯчейки);
			ИначеЕсли ТипЗнч(ЗначениеЯчейки) = Тип("Число") Тогда 
				Возврат ПреобрабоватьЧислоВДату(ЗначениеЯчейки);
			Иначе 
				Возврат ЗначениеЯчейки;
			КонецЕсли;
		Исключение
		КонецПопытки;
		
		Попытка
			Возврат Дата(ТекстЯчейки);
		Исключение
		КонецПопытки;
		
		ВызватьИсключение НСтр("en='Invalid cell value';ru='Некорректное значение в ячейке'");
		
	ИначеЕсли ТипЗначения = Тип("Строка") Тогда 
		Возврат СокрЛП(ТекстЯчейки);
		
	ИначеЕсли ТипЗначения = Тип("Булево") Тогда 
		Возврат ЗначениеЗаполнено(СокрЛП(ТекстЯчейки));
		
	Иначе 
		ВызватьИсключение НСтр("en='Unsupported data type specified';ru='Указан неподдерживаемый тип данных'");
	КонецЕсли;
	
КонецФункции // ПолучитьЗначениеЯчейки()

&НаКлиенте
Функция ПреобразоватьСтрокуВДату(Знач ДатаСтрокой)
	
	РазделительДаты = ".";
	флЕстьДата = Не СтрНайти(ДатаСтрокой, РазделительДаты) = 0;
	
	Если Не флЕстьДата Тогда 
		РазделительДаты = "/";
		флЕстьДата = Не СтрНайти(ДатаСтрокой, РазделительДаты) = 0;
	КонецЕсли;
	
	флЕстьВремя   = Не СтрНайти(ДатаСтрокой, ":") = 0;
	флЕстьСекунды = СтрЧислоВхождений(ДатаСтрокой, ":") = 2;
	
	Если Не флЕстьДата И Не флЕстьВремя Тогда 
		Возврат '00010101';
	КонецЕсли;
	
	ДатаСтрокой = СтрЗаменить(ДатаСтрокой, ".", Символы.ПС);
	ДатаСтрокой = СтрЗаменить(ДатаСтрокой, "/", Символы.ПС);
	ДатаСтрокой = СтрЗаменить(ДатаСтрокой, ":", Символы.ПС);
	Пока Найти(ДатаСтрокой, "  ") > 0 Цикл
		ДатаСтрокой = СтрЗаменить(ДатаСтрокой, "  ", " ");
	конеццикла;
	ДатаСтрокой = СтрЗаменить(ДатаСтрокой, " ", Символы.ПС);
	
	НомерГод = ?(флЕстьДата, ?(РазделительДаты = "/", 3, 3), 0);
	НомерМес = ?(флЕстьДата, ?(РазделительДаты = "/", 1, 2), 0);
	НомерДен = ?(флЕстьДата, ?(РазделительДаты = "/", 2, 1), 0);
	НомерЧас = ?(флЕстьВремя, ?(флЕстьДата, 4, 1), 0);
	НомерМин = ?(флЕстьВремя, ?(флЕстьДата, 5, 2), 0);
	НомерСек = ?(флЕстьВремя, ?(флЕстьДата, ?(флЕстьСекунды, 6, 0), ?(флЕстьСекунды, 3, 0)), 0);
	
	Попытка
		Дата1С = Дата(
			?(НомерГод = 0, 1, Число(СтрПолучитьСтроку(ДатаСтрокой, НомерГод))),
			?(НомерМес = 0, 1, Число(СтрПолучитьСтроку(ДатаСтрокой, НомерМес))), 
			?(НомерДен = 0, 1, Число(СтрПолучитьСтроку(ДатаСтрокой, НомерДен))), 
			?(НомерЧас = 0, 0, Число(СтрПолучитьСтроку(ДатаСтрокой, НомерЧас))), 
			?(НомерМин = 0, 0, Число(СтрПолучитьСтроку(ДатаСтрокой, НомерМин))), 
			?(НомерСек = 0, 0, Число(СтрПолучитьСтроку(ДатаСтрокой, НомерСек)))
		);
		
	Исключение
		Дата1С = '00010101';
	КонецПопытки;
	
	Возврат Дата1С;
	
КонецФункции // ПреобразоватьСтрокуВДату()

&НаКлиенте
Функция ПреобрабоватьЧислоВДату(Знач КоличествоДней)
	
	Попытка
		КоличествоЧасов = КоличествоДней * 24;
		
		Часов = Цел(КоличествоЧасов);
		Минут = Окр((КоличествоЧасов - Часов) * 60, 2);
		
		КоличествоСекунд = (Часов * 3600) + (Минут * 60);
		
		Дата1С = '00010101' + КоличествоСекунд;
		
	Исключение
		Дата1С = '00010101';
	КонецПопытки;
	
	Возврат Дата1С;
	
КонецФункции // ПреобрабоватьЧислоВДату()

&НаСервереБезКонтекста
Функция НайтиКонтрагента(Наименование)
	Если Не ЗначениеЗаполнено(Наименование) Тогда
		Возврат Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	Контрагенты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.Контрагенты КАК Контрагенты
	|ГДЕ
	|	Контрагенты.Наименование = &Наименование
	|	И НЕ Контрагенты.ПометкаУдаления
	|	И НЕ Контрагенты.ЭтоГруппа");
	Запрос.УстановитьПараметр("Наименование", Наименование);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Справочники.Контрагенты.ПустаяСсылка();
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Функция НайтиМаршрут(Наименование)
	Если Не ЗначениеЗаполнено(Наименование) Тогда
		Возврат Справочники.уатМаршруты.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	уатМаршруты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.уатМаршруты КАК уатМаршруты
	|ГДЕ
	|	уатМаршруты.Наименование = &Наименование
	|	И НЕ уатМаршруты.ПометкаУдаления
	|	И НЕ уатМаршруты.ЭтоГруппа");
	Запрос.УстановитьПараметр("Наименование", Наименование);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Справочники.уатМаршруты.ПустаяСсылка();
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Функция НайтиПункт(Наименование)
	Если Не ЗначениеЗаполнено(Наименование) Тогда
		Возврат Справочники.уатПунктыНазначения.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	уатПунктыНазначения.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.уатПунктыНазначения КАК уатПунктыНазначения
	|ГДЕ
	|	уатПунктыНазначения.Наименование = &Наименование
	|	И НЕ уатПунктыНазначения.ПометкаУдаления
	|	И НЕ уатПунктыНазначения.ЭтоГруппа");
	Запрос.УстановитьПараметр("Наименование", Наименование);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Справочники.уатПунктыНазначения.ПустаяСсылка();
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Функция НайтиВыход(Код, МаршрутСсылка)
	Если Не ЗначениеЗаполнено(Код) Или Не ЗначениеЗаполнено(МаршрутСсылка) Тогда
		Возврат Справочники.уатВыходыМаршрутов.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	уатВыходыМаршрутов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.уатВыходыМаршрутов КАК уатВыходыМаршрутов
	|ГДЕ
	|	уатВыходыМаршрутов.Код = &Код
	|	И НЕ уатВыходыМаршрутов.ПометкаУдаления
	|	И уатВыходыМаршрутов.Владелец = &Владелец");
	Запрос.УстановитьПараметр("Код", Код);
	Запрос.УстановитьПараметр("Владелец", МаршрутСсылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Справочники.уатВыходыМаршрутов.ПустаяСсылка();
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Функция НайтиРейсПоМаршруту(Код, МаршрутСсылка)
	Если Не ЗначениеЗаполнено(Код) Или Не ЗначениеЗаполнено(МаршрутСсылка) Тогда
		Возврат Справочники.уатРейсыМаршрутов.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	уатРейсыМаршрутов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.уатРейсыМаршрутов КАК уатРейсыМаршрутов
	|ГДЕ
	|	уатРейсыМаршрутов.Код = &Код
	|	И НЕ уатРейсыМаршрутов.ПометкаУдаления
	|	И уатРейсыМаршрутов.Владелец = &Владелец");
	Запрос.УстановитьПараметр("Код", Код);
	Запрос.УстановитьПараметр("Владелец", МаршрутСсылка);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Справочники.уатРейсыМаршрутов.ПустаяСсылка();
	КонецЕсли;
КонецФункции

&НаСервереБезКонтекста
Функция НайтиРейсПоПунктам(Код, ПунктОтправления, ПунктНазначения)
	Если Не ЗначениеЗаполнено(Код) Или Не ЗначениеЗаполнено(ПунктОтправления) Или Не ЗначениеЗаполнено(ПунктНазначения) Тогда
		Возврат Справочники.уатРейсыМаршрутов.ПустаяСсылка();
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	уатРейсыМаршрутов.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.уатРейсыМаршрутов КАК уатРейсыМаршрутов
	|ГДЕ
	|	уатРейсыМаршрутов.Код = &Код
	|	И НЕ уатРейсыМаршрутов.ПометкаУдаления
	|	И уатРейсыМаршрутов.Владелец = &Владелец
	|	И уатРейсыМаршрутов.ПунктОтправления = &ПунктОтправления");
	Запрос.УстановитьПараметр("Код", Код);
	Запрос.УстановитьПараметр("Владелец", ПунктНазначения);
	Запрос.УстановитьПараметр("ПунктОтправления", ПунктОтправления);
	Выборка = Запрос.Выполнить().Выбрать();
	Если Выборка.Следующий() Тогда
		Возврат Выборка.Ссылка;
	Иначе
		Возврат Справочники.уатРейсыМаршрутов.ПустаяСсылка();
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ПоказатьДиалогВыбораФайла(Подключено, ДополнительныеПараметры) Экспорт
	
	Если НЕ Подключено Тогда
		
		Оповещение = Новый ОписаниеОповещения("НачатьУстановкуРасширенияРаботыСФайламиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ТекстСообщения = НСтр("ru = 'Для продолжении работы необходимо установить расширение для веб-клиента ""1С:Предприятие"". Установить?'");
		ПоказатьВопрос(Оповещение, ТекстСообщения, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	ПоказатьДиалогВыбораФайлаПродолжение("ПутьКФайлу", НСтр("en='Select the file ""Trip schedule""';ru='Выберите файл ""Расписание рейсов""'"));
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДиалогВыбораФайлаВыгрузить(Подключено, ДополнительныеПараметры) Экспорт
	
	Если НЕ Подключено Тогда
		
		Оповещение = Новый ОписаниеОповещения("НачатьУстановкуРасширенияРаботыСФайламиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ТекстСообщения = НСтр("ru = 'Для продолжении работы необходимо установить расширение для веб-клиента ""1С:Предприятие"". Установить?'");
		ПоказатьВопрос(Оповещение, ТекстСообщения, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбораФайла.ПолноеИмяФайла = ДополнительныеПараметры.ПолноеИмяФайла;
	ДиалогВыбораФайла.Фильтр = НСтр("en = 'Excel book'; ru = 'Книга Excel'") + " (*.xlsx)|*.xlsx";
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	ДиалогВыбораФайла.Заголовок = "Выберите файл";
	
	ДопПараметры = Новый Структура();
	ДопПараметры.Вставить("КлючШаблона", ДополнительныеПараметры.КлючШаблона);
	
	Оповещение = Новый ОписаниеОповещения("ВыгрузитьПослеВыбораФайла", ЭтотОбъект, ДопПараметры);
	
	ДиалогВыбораФайла.Показать(Оповещение);

КонецПроцедуры

&НаКлиенте
Процедура НачатьУстановкуРасширенияРаботыСФайламиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		НачатьУстановкуРасширенияРаботыСФайлами();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДиалогВыбораФайлаШаблона(Подключено, ДополнительныеПараметры) Экспорт
	
	Если НЕ Подключено Тогда
		
		Оповещение = Новый ОписаниеОповещения("НачатьУстановкуРасширенияРаботыСФайламиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ТекстСообщения = НСтр("ru = 'Для продолжении работы необходимо установить расширение для веб-клиента ""1С:Предприятие"". Установить?'");
		ПоказатьВопрос(Оповещение, ТекстСообщения, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбораФайла.ПолноеИмяФайла = ДополнительныеПараметры.ПолноеИмяФайла;
	ДиалогВыбораФайла.Фильтр = НСтр("en = 'Excel book'; ru = 'Книга Excel'") + " (*.xlsx)|*.xlsx";
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	ДиалогВыбораФайла.Заголовок = "Выберите файл";
	
	ДопПараметры = Новый Структура();
	ДопПараметры.Вставить("КлючШаблона", ДополнительныеПараметры.КлючШаблона);
	
	Оповещение = Новый ОписаниеОповещения("СохранитьШаблонФайлаПослеВыбораФайла", ЭтотОбъект, ДопПараметры);
	
	ДиалогВыбораФайла.Показать(Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьДанныеИзФайлаПослеПодключения(Подключено, ДополнительныеПараметры) Экспорт
	
	Если НЕ Подключено Тогда
		
		Оповещение = Новый ОписаниеОповещения("НачатьУстановкуРасширенияРаботыСФайламиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ТекстСообщения = НСтр("ru = 'Для продолжении работы необходимо установить расширение для веб-клиента ""1С:Предприятие"". Установить?'");
		ПоказатьВопрос(Оповещение, ТекстСообщения, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	Состояние(НСтр("en='Opening a file';ru='Открытие файла'") + " ...");
	
	Попытка
		ДокументДанных = ПолучитьCOMОбъект(ПутьКФайлу);
	Исключение
		ДокументДанных = Неопределено;
		СообщениеПользователю(НСтр("en='An error occurred while retrieving the COM object.';ru='Ошибка при получении COM объекта.'"));
		Возврат;
	КонецПопытки;
	
	Попытка
		ТекущийЛист = ДокументДанных.WorkSheets(1);
		ВсегоСтрок = ТекущийЛист.Cells(1,1).SpecialCells(11).Row;
		ВсегоКолонок = ТекущийЛист.Cells(1,1).SpecialCells(11).Column;
	Исключение
		ДокументДанных = Неопределено;
		СообщениеПользователю(НСтр("en='Error while working with COM object.';ru='Ошибка при работе с COM объектом.'"));
		Возврат;
	КонецПопытки;
	
	СтруктураШапки = ПолучитьСтруктуруШапки();
	
	НомерСтрокиШапки = Неопределено;
	
	Для НомерСтроки = 1 По ВсегоСтрок Цикл 
		Если Не НомерСтрокиШапки = Неопределено Тогда 
			Прервать;
		КонецЕсли;
		
		Для НомерКолонки = 1 По ВсегоКолонок Цикл 
			ТекущееЗначение = НРег(СокрЛП(ТекущийЛист.Cells(НомерСтроки, НомерКолонки).text));
			
			НомерУстановлен = Ложь;
			Для Каждого ТекКлюч Из СтруктураШапки Цикл 
				Если ТекКлюч.Значение.НомерКолонки <> 0 Тогда 
					Продолжить;
				КонецЕсли;
				
				Если ТекущееЗначение = ТекКлюч.Значение.ЗаголовокВФайле Тогда 
					ТекКлюч.Значение.НомерКолонки = НомерКолонки;
					НомерСтрокиШапки = НомерСтроки;
					НомерУстановлен = Истина;
				КонецЕсли;
			КонецЦикла;
			
			Если Не НомерУстановлен Тогда 
				Для Каждого ТекКлюч Из СтруктураШапки Цикл 
					Если ТекКлюч.Значение.НомерКолонки <> 0 Тогда 
						Продолжить;
					КонецЕсли;
					
					Если Лев(ТекущееЗначение, СтрДлина(ТекКлюч.Значение.ЗаголовокВФайле)) = ТекКлюч.Значение.ЗаголовокВФайле Тогда 
						ТекКлюч.Значение.НомерКолонки = НомерКолонки;
						НомерСтрокиШапки = НомерСтроки;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	Если НомерСтрокиШапки = Неопределено Тогда 
		ДокументДанных = Неопределено;
		СообщениеПользователю(НСтр("en='Invalid file format';ru='Неверный формат файла'"));
		Возврат;
	КонецЕсли;
	
	флНомераКолонокЗаполнены = Ложь;
	Для Каждого ТекКлюч Из СтруктураШапки Цикл 
		Если ЗначениеЗаполнено(ТекКлюч.Значение.НомерКолонки) Тогда 
			флНомераКолонокЗаполнены = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если Не флНомераКолонокЗаполнены Тогда 
		ДокументДанных = Неопределено;
		СообщениеПользователю(НСтр("en='Invalid file format';ru='Неверный формат файла'"));
		Возврат;
	КонецЕсли;
	
	ПерваяСтрокаДанных = ДополнительныеПараметры.НомерПервойСтрокиДанных;
	Если (НомерСтрокиШапки + 1) > ПерваяСтрокаДанных Тогда 
		ПерваяСтрокаДанных = НомерСтрокиШапки + 1;
	КонецЕсли;
	
	Для НомерСтроки = ПерваяСтрокаДанных По ВсегоСтрок Цикл 
		ОбработкаПрерыванияПользователя();
		ПрогрессЗагрузки = Окр((НомерСтроки / ВсегоСтрок) * 100, 0);
		Состояние(НСтр("en='Reading a file';ru='Чтение файла'") + " ...", ПрогрессЗагрузки);
		
		НоваяСтрока = ДанныеРасписанияРейсов.Добавить();
		Для Каждого ТекКлюч Из СтруктураШапки Цикл 
			
			НоваяСтрокаКлюч = ТекКлюч.Ключ;
			мНоваяСтрока    = НоваяСтрока[НоваяСтрокаКлюч];
			
			ТекТипЯчейки = ТипЗнч(мНоваяСтрока);
			
			Если ТекКлюч.Значение.НомерКолонки = 0 Тогда 
				Если ЗначениеЗаполнено(ТекКлюч.Значение.ЗначениеПоУмолчанию) Тогда 
					ТекЗначение = ПолучитьЗначениеЯчейки(
					ТекКлюч.Значение.ЗначениеПоУмолчанию,
					ТекТипЯчейки
					);
				Иначе 
					Продолжить;
				КонецЕсли;
				
			Иначе 
				ТекЗначение = ПолучитьЗначениеЯчейки(
				ТекущийЛист.Cells(НомерСтроки, ТекКлюч.Значение.НомерКолонки),
				ТекТипЯчейки
				);
			КонецЕсли;
			
			НоваяСтрока[НоваяСтрокаКлюч] = ТекЗначение;
			
		КонецЦикла;
		
		флПустаяСтрока = Истина;
		Для Каждого ТекКлюч Из СтруктураШапки Цикл
			НоваяСтрокаКлюч = НоваяСтрока[ТекКлюч.Ключ];
			
			Если ЗначениеЗаполнено(НоваяСтрокаКлюч) Тогда 
				флПустаяСтрока = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если флПустаяСтрока Тогда 
			ДанныеРасписанияРейсов.Удалить(НоваяСтрока);
		КонецЕсли;
	КонецЦикла;
	
	ПоказатьПредупреждение(, НСтр("en='Read file successfully completed';ru='Чтение файла завершено успешно'"));
	
КонецПроцедуры

#КонецОбласти



#Область СлужебныйПрограммныйИнтерфейс

// Процедура заполняет переданную диаграмму ганта
//  шагами бюджетного процесса на основании переданной модели бюджетирования
//
// Параметры:
//  МодельБюджетирования - Справочник.МоделиБюджетирования	 - Модель, для которой будет выведен бюджетный процесс
//  Результат			 - ДиаграммаГанта					 - диаграмма ганта, куда будет выведен результат
//  НачалоПериода		 - Дата								 - начало периода диаграммы ганта
//  КонецПериода		 - Дата								 - конец периода диаграммы ганта
//  ТипОтчета			 - Число							 - 0-план, 1-факт, 2-план и факт
//  Группировки			 - Строка							 - имя варианта компоновки данных
//  ДопПараметры		 - Структура						 - структура с дополнительными фильтрами
//
Процедура ЗаполнитьДиаграмму(МодельБюджетирования, Результат, НачалоПериода, КонецПериода, 
													ТипОтчета, Группировки, ДопПараметры = Неопределено) Экспорт
	
	Результат.Очистить();
	
	// Подготовка дерева для вывода в диаграмму
	#Область ПодготовкаДерева
	
	ТаблицаЗадач = Справочники.МоделиБюджетирования.ПолучитьБюджетныеЗадачи(МодельБюджетирования, КонецПериода, ТипОтчета > 0);
	
	Если Не ТаблицаЗадач.Количество() Тогда
		Возврат;
	КонецЕсли;
	
	ТаблицаЗадач.Колонки.Добавить("ШагПроцессаВПериоде");
	
	Для Каждого СтрокаЗадачи из ТаблицаЗадач Цикл
		СтрокаЗадачи.ДатаНачалаФакт 		= НачалоДня(СтрокаЗадачи.ДатаНачалаФакт);
		СтрокаЗадачи.ДатаОкончанияФакт 		= КонецДня(СтрокаЗадачи.ДатаОкончанияФакт);
	КонецЦикла;
	
	Компоновка = Обработки.УправлениеБюджетнымПроцессом.ПолучитьМакет("СхемаКомпоновкиДанных");
	
	ИмяВарианта = ?(Группировки = "Вариант1", "РежимОбзор", "ПроцессПоЗадачам");
	Вариант = Компоновка.ВариантыНастроек.Найти(ИмяВарианта);
	
	КомпоновщикНастроек = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроек.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(Компоновка));
	КомпоновщикНастроек.ЗагрузитьНастройки(Вариант.Настройки);
	
	Параметр = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("НачалоПериода");
	Параметр.Значение = НачалоПериода;
	Параметр.Использование = Истина;
	Параметр = КомпоновщикНастроек.Настройки.ПараметрыДанных.Элементы.Найти("КонецПериода");
	Параметр.Значение = КонецПериода;
	Параметр.Использование = Истина;
	
	ПоказатьПланВыполнения = ДопПараметры.Свойство("ПланВыполнения") И ДопПараметры.ПланВыполнения;
	
	Отбор = КомпоновщикНастроек.Настройки.Отбор;
	Если ИмяВарианта = "РежимОбзор" Тогда
		Если ТипОтчета = 0 Тогда // план
			НовыйОтбор = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйОтбор.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("ШагПроцесса");
			НовыйОтбор.ВидСравнения 	= ВидСравненияКомпоновкиДанных.Заполнено;
			НовыйОтбор.Использование 	= Истина;
		ИначеЕсли ТипОтчета = 1 и Не ПоказатьПланВыполнения Тогда // факт
			НовыйОтбор = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			НовыйОтбор.ЛевоеЗначение 	= Новый ПолеКомпоновкиДанных("Задача");
			НовыйОтбор.ВидСравнения 	= ВидСравненияКомпоновкиДанных.Заполнено;
			НовыйОтбор.Использование 	= Истина;
		КонецЕсли;
	Иначе
		Если ТипОтчета = 0 Тогда // план
			НастроитьОтбор(Отбор, "ГруппаФакт");
		ИначеЕсли ТипОтчета = 1 Тогда // факт
			НастроитьОтбор(Отбор, "ГруппаПлан");
			Если ПоказатьПланВыполнения Тогда
				НастроитьОтбор(Отбор, "Задача");
			КонецЕсли;
		Иначе
			Если ПоказатьПланВыполнения Тогда
				НастроитьОтбор(Отбор, "ШагПроцесса");
				НастроитьОтбор(Отбор, "Задача");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ДопПараметры <> Неопределено и ДопПараметры.Свойство("ФлагИсполнитель") Тогда
		НовыйОтбор = Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		НовыйОтбор.ЛевоеЗначение = Новый ПолеКомпоновкиДанных("Исполнитель");
		НовыйОтбор.ВидСравнения = ВидСравненияКомпоновкиДанных.Равно;
		НовыйОтбор.ПравоеЗначение = ДопПараметры.ЗначениеИсполнитель;
		НовыйОтбор.Использование = ДопПараметры.ФлагИсполнитель;
	КонецЕсли;
	
	НастройкиКомпоновкиДанных = КомпоновщикНастроек.ПолучитьНастройки();
	
	КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
	Макет = КомпоновщикМакета.Выполнить(Компоновка, НастройкиКомпоновкиДанных, , , Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
	
	ВнешниеНаборыДанных = Новый Структура;
	ВнешниеНаборыДанных.Вставить("ТаблицаЗадач", ТаблицаЗадач);
	
	ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
	ПроцессорКомпоновки.Инициализировать(Макет, ВнешниеНаборыДанных);
	ПроцессорКомпоновки.Сбросить();
	
	ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
	Если Группировки = "Вариант1" Тогда
		ДеревоРезультат = Новый ДеревоЗначений;
	Иначе
		ДеревоРезультат = Новый ТаблицаЗначений;
	КонецЕсли;
	ПроцессорВывода.УстановитьОбъект(ДеревоРезультат);
	ПроцессорВывода.Вывести(ПроцессорКомпоновки);
	
	#КонецОбласти
	
	// Дополнительная обработка области для вариантов "Процесс по задачам" и "Процесс по исполнителям"
	#Область ОбработкаДерева
	Если Группировки <> "Вариант1" Тогда
		ПоИсполнителям = Группировки = "Вариант3";
		ТаблицаПериодов = РазбитьТаблицуШаговПоПериодам(ДеревоРезультат, МодельБюджетирования, ПоИсполнителям);
		ДеревоРезультат = СформироватьДеревоСГруппировкамиДляВыводаИзТаблицыДанных(ДеревоРезультат, ТаблицаПериодов, ТипОтчета, ПоИсполнителям);
		Если ПоИсполнителям Тогда
			ДеревоРезультат.Строки.Сортировать("Исполнитель, ДатаНачала" + ?(ТипОтчета = 1, "Факт", ""), Истина);
		Иначе
			ДеревоРезультат.Строки.Сортировать("ДатаНачала" + ?(ТипОтчета = 1, "Факт", ""), Истина);
		КонецЕсли;
	КонецЕсли;
	
	#КонецОбласти
	
	Если ТипОтчета <> 1 Тогда
		Серия = Результат.Серии.Добавить();
		Серия.Значение = "План";
		Серия.Текст = "План";
	КонецЕсли;
	
	Если ТипОтчета > 0 Тогда
		СерияФакт = Результат.Серии.Добавить();
		СерияФакт.Значение = "Факт";
		СерияФакт.Текст = "Факт";
	КонецЕсли;
	
	СтруктураСерий = Новый Структура("План, Факт", Серия, СерияФакт);
	
	ВывестиДеревоВДиаграммуГанта(Результат, ДеревоРезультат, СтруктураСерий, ТипОтчета, Группировки, ПоказатьПланВыполнения);
	
	ОформитьДиаграммуПослеВывода(Результат, ТипОтчета, Группировки, НачалоПериода, КонецПериода);
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

#Область ПодготовкаДереваЗначенийДляВыводаВДиаграмму

Процедура НастроитьОтбор(Отбор, ЧтоОтчключить)
	
	Для Каждого Элемент из Отбор.Элементы Цикл
		Если Элемент.Представление = ЧтоОтчключить Тогда
			Отбор.Элементы.Удалить(Элемент);
			Возврат;
		КонецЕсли;
		Если ТипЗнч(Элемент) = Тип("ГруппаЭлементовОтбораКомпоновкиДанных") Тогда
			НастроитьОтбор(Элемент, ЧтоОтчключить);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

Функция РазбитьТаблицуШаговПоПериодам(ДеревоРезультат, МодельБюджетирования, ПоИсполнителям = Ложь)
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	ПеречислениеПериодичность.Ссылка КАК Периодичность
		|ИЗ
		|	Перечисление.Периодичность КАК ПеречислениеПериодичность
		|ГДЕ
		|	ПеречислениеПериодичность.Ссылка В
		|			(ВЫБРАТЬ РАЗЛИЧНЫЕ
		|				ШагиБюджетныхПроцессов.Периодичность
		|			ИЗ
		|				Справочник.ШагиБюджетныхПроцессов КАК ШагиБюджетныхПроцессов
		|			ГДЕ
		|				ШагиБюджетныхПроцессов.Владелец = &МодельБюджетирования)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ПеречислениеПериодичность.Порядок УБЫВ";

	Запрос.УстановитьПараметр("МодельБюджетирования", МодельБюджетирования);
		
	РезультатЗапроса = Запрос.Выполнить();
	ПорядкиПериодичности = РезультатЗапроса.Выгрузить();
	
	ДеревоПериодов = Новый ДеревоЗначений;
	ДеревоПериодов.Колонки.Добавить("Период");
	ДеревоПериодов.Колонки.Добавить("Периодичность");
	Если ПоИсполнителям Тогда
		ДеревоПериодов.Колонки.Добавить("Исполнитель");
	КонецЕсли;
	
	ДатаНачалаДействияМодели = МодельБюджетирования.НачалоДействия;
	
	Для Каждого СтрокаРезультата из ДеревоРезультат Цикл
		
		Если ПоИсполнителям Тогда
			СтрокаПоиска = ДеревоПериодов.Строки.Найти(СтрокаРезультата.Исполнитель);
			Если СтрокаПоиска = Неопределено Тогда
				СтрокаПоиска = ДеревоПериодов.Строки.Добавить();
				СтрокаПоиска.Исполнитель = СтрокаРезультата.Исполнитель;
			КонецЕсли;
		Иначе
			СтрокаПоиска = ДеревоПериодов;
		КонецЕсли;
		
		НайденнаяСтрокаДереваПериодов = ПорядкиПериодичности.Найти(СтрокаРезультата.Периодичность);
		Для Сч = 0 По ПорядкиПериодичности.Индекс(НайденнаяСтрокаДереваПериодов) Цикл
			СтрокаПериода = ПорядкиПериодичности[Сч];
			Период = БюджетированиеКлиентСервер.ДатаНачалаПериода(СтрокаРезультата.Период, СтрокаПериода.Периодичность);
			Период = Макс(ДатаНачалаДействияМодели, Период); // поправка на начало действия модели
			НайденнаяСтрока = СтрокаПоиска.Строки.Найти(Период);
			Если НайденнаяСтрока = Неопределено Тогда
				НайденнаяСтрока = СтрокаПоиска.Строки.Добавить();
				НайденнаяСтрока.Период = Период;
				НайденнаяСтрока.Периодичность = СтрокаПериода.Периодичность;
				Если ПоИсполнителям Тогда
					НайденнаяСтрока.Исполнитель = СтрокаРезультата.Исполнитель;
				КонецЕсли;
			КонецЕсли;
			СтрокаПоиска = НайденнаяСтрока;
		КонецЦикла;
		
	КонецЦикла;
	
	Возврат ДеревоПериодов;
	
КонецФункции

Функция СформироватьДеревоСГруппировкамиДляВыводаИзТаблицыДанных(ДеревоРезультат, ДеревоПериодов, ТипОтчета, ПоИсполнителям, СтрокиРезультат = Неопределено)
	
	Если СтрокиРезультат = Неопределено Тогда
		СтрокиРезультат = Новый ДеревоЗначений;
		Для Каждого Колонка из ДеревоРезультат.Колонки Цикл
			СтрокиРезультат.Колонки.Добавить(Колонка.Имя, Колонка.ТипЗначения);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого СтрокаПериода из ДеревоПериодов.Строки Цикл
		
		// добавляем период
		НоваяСтрока = СтрокиРезультат.Строки.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаПериода);
		Если Не ПоИсполнителям ИЛИ ЗначениеЗаполнено(СтрокаПериода.Родитель) Тогда
			// добавляем все задачи периода в подчиненные строки
			СтруктураПоиска = Новый Структура("Период, Периодичность", СтрокаПериода.Период, СтрокаПериода.Периодичность);
			Если ПоИсполнителям Тогда
				СтруктураПоиска.Вставить("Исполнитель", СтрокаПериода.Исполнитель);
			КонецЕсли;
			НайденныеСтроки = ДеревоРезультат.НайтиСтроки(СтруктураПоиска);
			Для Каждого НайденнаяСтрока из НайденныеСтроки Цикл
				ЗаполнитьЗначенияСвойств(НоваяСтрока.Строки.Добавить(), НайденнаяСтрока);
			КонецЦикла;
		КонецЕсли;
		// добавляем подчиненные строки
		СформироватьДеревоСГруппировкамиДляВыводаИзТаблицыДанных(ДеревоРезультат, СтрокаПериода, ТипОтчета, ПоИсполнителям, НоваяСтрока);
		
		Если Не ПоИсполнителям ИЛИ ЗначениеЗаполнено(СтрокаПериода.Родитель) Тогда
			ИмяПоля = "ДатаНачала" + ?(ТипОтчета = 1, "Факт", "");
			Для Каждого ПодчиненнаяСтрока из НоваяСтрока.Строки Цикл
				Если Не ЗначениеЗаполнено(НоваяСтрока[ИмяПоля]) Тогда
					НоваяСтрока[ИмяПоля] = ПодчиненнаяСтрока.Период;
				Иначе
					НоваяСтрока[ИмяПоля] = Мин(НоваяСтрока[ИмяПоля], ПодчиненнаяСтрока.Период);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат СтрокиРезультат;
	
КонецФункции

#КонецОбласти

#Область ВыводДереваЗначенийВДиаграммуГантаСлужебные

Функция ПолучитьЗначениеДерева(СтрокаДерева)
	
	Колонки = СтрокаДерева.Владелец().Колонки;
	Если ЗначениеЗаполнено(СтрокаДерева.ШагПроцесса)
		ИЛИ СтрокаДерева.ШагПроцесса = Справочники.ШагиБюджетныхПроцессов.ПустаяСсылка() Тогда
		Возврат СтрокаДерева.ШагПроцесса;
	ИначеЕсли Колонки.Найти("Период") <> Неопределено
		И ЗначениеЗаполнено(СтрокаДерева.Период) Тогда
		Возврат СтрокаДерева.Период;
	ИначеЕсли Колонки.Найти("Исполнитель") <> Неопределено
		И ЗначениеЗаполнено(СтрокаДерева.Исполнитель) Тогда
		Возврат СтрокаДерева.Исполнитель;
	Иначе
		ВызватьИсключение НСтр("en='Неизвестная группировка диаграммы ганта бюджетного процесса!';ru='Неизвестная группировка диаграммы ганта бюджетного процесса!'");
	КонецЕсли;
	
КонецФункции

Функция ПолучитьТаблицуИнтервалов()
	
	ТаблицаИнтервалов = Новый ТаблицаЗначений;
	ТаблицаИнтервалов.Колонки.Добавить("ДатаНачала");
	ТаблицаИнтервалов.Колонки.Добавить("ДатаОкончания");
	ТаблицаИнтервалов.Колонки.Добавить("ДатаНачалаФакт");
	ТаблицаИнтервалов.Колонки.Добавить("ДатаОкончанияФакт");
	ТаблицаИнтервалов.Колонки.Добавить("Задача");
	ТаблицаИнтервалов.Колонки.Добавить("ЗадачаНаименование");
	ТаблицаИнтервалов.Колонки.Добавить("ЗадачаДата");
	ТаблицаИнтервалов.Колонки.Добавить("ЗадачаНомер");
	ТаблицаИнтервалов.Колонки.Добавить("ЗадачаВыполнена");
	ТаблицаИнтервалов.Колонки.Добавить("ЗадачаСрокИсполнения");
	ТаблицаИнтервалов.Колонки.Добавить("ШагПроцесса");
	ТаблицаИнтервалов.Колонки.Добавить("ШагПроцессаНаименование");
	ТаблицаИнтервалов.Колонки.Добавить("Периодичность");
	ТаблицаИнтервалов.Колонки.Добавить("Период");
	
	Возврат ТаблицаИнтервалов;
	
КонецФункции

#КонецОбласти

#Область ПодготовкаТаблицыЗначенийСНеперескающимисяИнтервалами

Функция ПересечениеИнтервалов(Начало1, Конец1, Начало2, Конец2)
	
	// Начало2 лежит на отрезке 1
	ПересечениеИнтервалов 	= Начало1 <= Начало2 И Начало2 <= Конец1;
	// Конец2 лежит на отрезке 1
	ПересечениеИнтервалов 	= ПересечениеИнтервалов ИЛИ (Начало1 <= Конец2 И Конец2 <= Конец1);
	// Конец2 лежит на отрезке 1
	ПересечениеИнтервалов 	= ПересечениеИнтервалов ИЛИ (Начало2 <= Начало1 И Конец1 <= Конец2);
	
	Возврат ПересечениеИнтервалов;
	
КонецФункции

Процедура ВырезатьИнтервалИзПересекающихся(ТаблицаРезультат, ЧтоВырезать, ОткудаВырезать)
	
	СтрокиТаблицыЧтоВырезать = ТаблицаРезультат.НайтиСтроки(Новый Структура("Тип", ЧтоВырезать));
	
	Для Каждого КлючИЗначение из ОткудаВырезать Цикл
		Для Каждого СтрокаТаблицыЧтоВырезать из СтрокиТаблицыЧтоВырезать Цикл
			СтрокиТаблицыОткудаВырезать = ТаблицаРезультат.НайтиСтроки(Новый Структура("Тип", КлючИЗначение.Ключ));
			Для Каждого СтрокаТаблицыОткудаВырезать из СтрокиТаблицыОткудаВырезать Цикл
				ПересечениеИнтервалов 	= ПересечениеИнтервалов(СтрокаТаблицыЧтоВырезать.ДатаНачала, 
																СтрокаТаблицыЧтоВырезать.ДатаОкончания, 
																СтрокаТаблицыОткудаВырезать.ДатаНачала, 
																СтрокаТаблицыОткудаВырезать.ДатаОкончания);
				Если ПересечениеИнтервалов Тогда
					
					// для рассшифровки скопируем строки исходной таблицы
					Для Каждого СтрокаРезультата из СтрокаТаблицыОткудаВырезать.Строки Цикл
						СтрокаТаблицыЧтоВырезать.Строки.Добавить(СтрокаРезультата);
					КонецЦикла;
					
					// Интервал "откуда" слева от интервала, который хотим вырезать
					Если СтрокаТаблицыОткудаВырезать.ДатаНачала < СтрокаТаблицыЧтоВырезать.ДатаНачала
						И СтрокаТаблицыОткудаВырезать.ДатаОкончания <= СтрокаТаблицыЧтоВырезать.ДатаОкончания Тогда
						СтрокаТаблицыОткудаВырезать.ДатаОкончания = СтрокаТаблицыЧтоВырезать.ДатаНачала - 1;
					// Интервал "откуда" справа от интервала, который хотим вырезать
					ИначеЕсли СтрокаТаблицыОткудаВырезать.ДатаНачала >= СтрокаТаблицыЧтоВырезать.ДатаНачала
						И СтрокаТаблицыОткудаВырезать.ДатаОкончания > СтрокаТаблицыЧтоВырезать.ДатаОкончания Тогда
						СтрокаТаблицыОткудаВырезать.ДатаНачала = СтрокаТаблицыЧтоВырезать.ДатаОкончания + 1;
					// Интервал "откуда" больше от интервала, который хотим вырезать
					ИначеЕсли СтрокаТаблицыОткудаВырезать.ДатаНачала < СтрокаТаблицыЧтоВырезать.ДатаНачала
						И СтрокаТаблицыОткудаВырезать.ДатаОкончания > СтрокаТаблицыЧтоВырезать.ДатаОкончания Тогда
						НоваяСтрока = ТаблицаРезультат.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаТаблицыОткудаВырезать);
						СтрокаТаблицыОткудаВырезать.ДатаНачала = СтрокаТаблицыЧтоВырезать.ДатаОкончания + 1;
						НоваяСтрока.ДатаОкончания = СтрокаТаблицыЧтоВырезать.ДатаНачала - 1;
					// Интервал "откуда" входит в интервал, который хотим вырезать
					Иначе
						ТаблицаРезультат.Удалить(СтрокаТаблицыОткудаВырезать);
					КонецЕсли;
					
				КонецЕсли;
				
			КонецЦикла;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

Процедура ОбработатьПересеченияИнтерваловПослеИзменений(СтрокаРезультат, НайденныеСтроки)
	
	ДатаНачалаИнт1 			= СтрокаРезультат.ДатаНачала;
	ДатаОкончанияИнт1 		= СтрокаРезультат.ДатаОкончания;
	БылиПересечения			= Ложь;
	Для Каждого СтрокаТаблицыОткудаВырезать из НайденныеСтроки Цикл
		Если СтрокаТаблицыОткудаВырезать = СтрокаРезультат Тогда
			Продолжить;
		КонецЕсли;
		ДатаНачалаИнт2 			= СтрокаТаблицыОткудаВырезать.ДатаНачала;
		ДатаОкончанияИнт2 		= СтрокаТаблицыОткудаВырезать.ДатаОкончания;
		ПересечениеИнтервалов 	= ПересечениеИнтервалов(ДатаНачалаИнт1, ДатаОкончанияИнт1, ДатаНачалаИнт2, ДатаОкончанияИнт2);
		Если ПересечениеИнтервалов Тогда
			СтрокаРезультат.ДатаНачала			= Мин(ДатаНачалаИнт1, ДатаНачалаИнт2);
			СтрокаРезультат.ДатаОкончания		= Макс(ДатаОкончанияИнт1, ДатаОкончанияИнт2);
			Для Каждого ИсходнаяСтрока из СтрокаТаблицыОткудаВырезать.Строки Цикл
				СтрокаРезультат.Строки.Добавить(ИсходнаяСтрока);
			КонецЦикла;
			СтрокаРезультат.Владелец().Удалить(СтрокаТаблицыОткудаВырезать);
			БылиПересечения = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если БылиПересечения Тогда
		НайденныеСтроки = СтрокаРезультат.Владелец().НайтиСтроки(Новый Структура("Тип", СтрокаРезультат.Тип));
		ОбработатьПересеченияИнтерваловПослеИзменений(СтрокаРезультат, НайденныеСтроки);
	КонецЕсли;
	
КонецПроцедуры

Процедура ОбработатьСтрокуИнтервала(Тип, НайденнаяСтрока, ТаблицаРезультат, ПоказатьПланВыполнения, ТекДата)
	
	Если Тип <> "План" Тогда
		
		Если Не ПоказатьПланВыполнения Тогда
			Если Не ЗначениеЗаполнено(НайденнаяСтрока.Задача) Тогда
				НайденнаяСтрока[Тип + "Обработан"] = Истина;
				Возврат;
			КонецЕсли;
		КонецЕсли;
		
		Подходит = Ложь;
		ЗадачаВыполнена = Ложь;
		Если ТипЗнч(НайденнаяСтрока.ЗадачаВыполнена) = Тип("Булево") Тогда
			ЗадачаВыполнена = НайденнаяСтрока.ЗадачаВыполнена;
		КонецЕсли;
		СрокИсполнения = НайденнаяСтрока.ДатаОкончанияФакт;
		Если ТипЗнч(НайденнаяСтрока.ЗадачаСрокИсполнения) = Тип("Дата") Тогда
			СрокИсполнения = НайденнаяСтрока.ЗадачаСрокИсполнения;
		КонецЕсли;
		Если Не ЗначениеЗаполнено(СрокИсполнения) Тогда
			СрокИсполнения = Дата(1, 1, 1);
		КонецЕсли;
		
		Если Тип = "Факт" И ЗадачаВыполнена = Истина Тогда
			Подходит = Истина;
		ИначеЕсли Тип = "Просрочена" И ЗадачаВыполнена = Ложь
			И СрокИсполнения <= ТекДата Тогда
			Подходит = Истина;
		ИначеЕсли Тип = "Сформирована" И ЗадачаВыполнена = Ложь
			И СрокИсполнения > ТекДата Тогда
			Подходит = Истина;
		КонецЕсли;
		
		Если Не Подходит Тогда
			НайденнаяСтрока[Тип + "Обработан"] = Истина;
			Возврат
		КонецЕсли;
		
	Иначе
		
		Если Не ЗначениеЗаполнено(НайденнаяСтрока.ШагПроцесса) Тогда
			НайденнаяСтрока[Тип + "Обработан"] = Истина;
			Возврат
		КонецЕсли;
		
	КонецЕсли;
	
	НайденныеСтроки = ТаблицаРезультат.НайтиСтроки(Новый Структура("Тип", Тип));
	
	Для Каждого СтрокаРезультат из НайденныеСтроки Цикл
		ДатаНачалаИнт1 			= СтрокаРезультат.ДатаНачала;
		ДатаОкончанияИнт1 		= СтрокаРезультат.ДатаОкончания;
		ДатаНачалаИнт2 			= НайденнаяСтрока["ДатаНачала" 		+ ?(Тип = "План", "", "Факт")];
		ДатаОкончанияИнт2 		= НайденнаяСтрока["ДатаОкончания" 	+ ?(Тип = "План", "", "Факт")];
		ПересечениеИнтервалов 	= ПересечениеИнтервалов(ДатаНачалаИнт1, ДатаОкончанияИнт1, ДатаНачалаИнт2, ДатаОкончанияИнт2);
		Если ПересечениеИнтервалов Тогда
			СтрокаРезультат.ДатаНачала			= Мин(ДатаНачалаИнт1, ДатаНачалаИнт2);
			СтрокаРезультат.ДатаОкончания		= Макс(ДатаОкончанияИнт1, ДатаОкончанияИнт2);
			ОбработатьПересеченияИнтерваловПослеИзменений(СтрокаРезультат, НайденныеСтроки);
			НайденнаяСтрока[Тип + "Обработан"]	= Истина;
			СтрокаРезультат.Строки.Добавить(НайденнаяСтрока);
			Возврат
		КонецЕсли;
	КонецЦикла;
	
	СтрокаРезультат 					= ТаблицаРезультат.Добавить();
	СтрокаРезультат.Тип 				= Тип;
	СтрокаРезультат.ДатаНачала 			= НайденнаяСтрока["ДатаНачала" 		+ ?(Тип = "План", "", "Факт")];
	СтрокаРезультат.ДатаОкончания 		= НайденнаяСтрока["ДатаОкончания" 	+ ?(Тип = "План", "", "Факт")];
	НайденнаяСтрока[Тип + "Обработан"] 	= Истина;
	СтрокаРезультат.Строки 				= Новый Массив;
	СтрокаРезультат.Строки.Добавить(НайденнаяСтрока);
	
КонецПроцедуры

Функция ПреобразоватьТаблицуИнтервалов(ТаблицаИнтервалов, ПоказатьПланВыполнения)
	
	ТаблицаРезультат = ТаблицаИнтервалов.СкопироватьКолонки("ДатаНачала, ДатаОкончания");
	ТаблицаРезультат.Колонки.Добавить("Тип");
	ТаблицаРезультат.Колонки.Добавить("Строки");
	
	ТаблицаРезультат.Индексы.Добавить("Тип");
	
	ТекДата = ТекущаяДата();
	
	СтруктураТипов = Новый Структура("План, Факт, Просрочена, Сформирована");
	Для Каждого КлючИЗначение Из СтруктураТипов Цикл
		
		Тип = КлючИЗначение.Ключ;
		ТаблицаИнтервалов.Колонки.Добавить(Тип + "Обработан", Новый ОписаниеТипов("Булево"));
		
		НайденнаяСтрока = ТаблицаИнтервалов.Найти(Ложь, Тип + "Обработан");
		Пока НайденнаяСтрока <> Неопределено Цикл
			ОбработатьСтрокуИнтервала(Тип, НайденнаяСтрока, ТаблицаРезультат, ПоказатьПланВыполнения, ТекДата);
			НайденнаяСтрока = ТаблицаИнтервалов.Найти(Ложь, Тип + "Обработан");
		КонецЦикла;
		
	КонецЦикла;
	
	ВырезатьИнтервалИзПересекающихся(ТаблицаРезультат, "Просрочена", Новый Структура("Сформирована, Факт"));
	ВырезатьИнтервалИзПересекающихся(ТаблицаРезультат, "Сформирована", Новый Структура("Факт"));
	
	Возврат ТаблицаРезультат;
	
КонецФункции

#КонецОбласти

#Область ВыводДереваЗначенийВДиаграммуГанта

Процедура ДобавитьИнтервалДиаграммы(Интервал, СтрокаДерева, Тип, УровеньЗадачи = Ложь)
	
	Подинтервал = Интервал.Добавить();
	Подинтервал.Начало 	= СтрокаДерева.ДатаНачала;
	Подинтервал.Конец 	= СтрокаДерева.ДатаОкончания;
	Если СтрокаДерева.Тип = "План" Тогда
		Подинтервал.Цвет 	= ЦветаСтиля.РезультатОжидаетсяЦвет;
	ИначеЕсли СтрокаДерева.Тип = "Факт" Тогда
		Подинтервал.Цвет 	= ЦветаСтиля.РезультатУспехЦвет;
	ИначеЕсли СтрокаДерева.Тип = "Просрочена" Тогда
		Подинтервал.Цвет 	= WebЦвета.Красный;
	ИначеЕсли СтрокаДерева.Тип = "Сформирована" Тогда
		Подинтервал.Цвет 	= WebЦвета.Оранжевый;
	Иначе
		Подинтервал.Цвет 	= WebЦвета.Черный;
	КонецЕсли;
	
	МассивРасшифровки = Новый СписокЗначений;
	Для Каждого СтрокаЗадачи из СтрокаДерева.Строки Цикл
		ПредставлениеПериода = БюджетированиеКлиентСервер.ПредставлениеПериодаПоДате(СтрокаЗадачи.Период, СтрокаЗадачи.Периодичность);
		Если Тип = "Факт" И ЗначениеЗаполнено(СтрокаЗадачи.Задача) Тогда
			ПредставлениеЗначения = НСтр("en='%1 №%2 от %3 (%4)';ru='%1 №%2 от %3 (%4)'");
			ПредставлениеЗначения = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
												ПредставлениеЗначения, 
												СтрокаЗадачи.ЗадачаНаименование,
												СтрокаЗадачи.ЗадачаНомер,
												Формат(СтрокаЗадачи.ЗадачаДата, "ДЛФ=Д"),
												ПредставлениеПериода);
			Значение = СтрокаЗадачи.Задача;
		Иначе
			ПредставлениеЗначения = СтрокаЗадачи.ШагПроцессаНаименование + " (" + ПредставлениеПериода + ")";
			Значение = СтрокаЗадачи.ШагПроцесса;
		КонецЕсли;
		Если УровеньЗадачи Тогда
			ДополнениеПредставления = НСтр("en=' с %1 по %2';ru=' с %1 по %2'");
			ДополнениеПредставления = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
													ДополнениеПредставления,
													Формат(СтрокаДерева.ДатаНачала, "ДФ=dd.MM.yy"),
													Формат(СтрокаДерева.ДатаОкончания, "ДФ=dd.MM.yy"));
			ПредставлениеЗначения = ПредставлениеЗначения + ДополнениеПредставления;
		КонецЕсли;
		МассивРасшифровки.Добавить(Значение, ПредставлениеЗначения);
	КонецЦикла;
	Подинтервал.Расшифровка = МассивРасшифровки;
	Если МассивРасшифровки.Количество() = 1 Тогда
		Подинтервал.Текст = МассивРасшифровки[0].Представление;
	КонецЕсли;
	
КонецПроцедуры

Процедура ВывестиТаблицуВывода(ТаблицаВывода, Результат, Точка, ТипОтчета, СтруктураСерий)
	
	Для Каждого СтрокаТаблицыВывода из ТаблицаВывода Цикл
		
		УровеньЗадачи = Не Точка.Точки.Количество();
		
		Если ТипОтчета <> 1 И СтрокаТаблицыВывода.Тип = "План" Тогда
			// отображение задач
			Интервал = Результат.ПолучитьЗначение(Точка, СтруктураСерий.План);
			ДобавитьИнтервалДиаграммы(Интервал, СтрокаТаблицыВывода, "План", УровеньЗадачи);
		КонецЕсли;
		
		Если ТипОтчета > 0 И СтрокаТаблицыВывода.Тип <> "План" Тогда
			// отображение задач
			Интервал = Результат.ПолучитьЗначение(Точка, СтруктураСерий.Факт);
			ДобавитьИнтервалДиаграммы(Интервал, СтрокаТаблицыВывода, "Факт", УровеньЗадачи);
		КонецЕсли;
		
	КонецЦикла;
	
КонецПроцедуры

Функция ВывестиДеревоВДиаграммуГанта(Результат, СтрокиДерева, СтруктураСерий, ТипОтчета, Группировки, ПоказатьПланВыполнения, ТочкаРодитель = Неопределено)
	Перем ТаблицаИнтервалов;
	
	Если ТочкаРодитель = Неопределено Тогда
		ТочкаРодитель = Результат;
	КонецЕсли;
	
	Для Каждого СтрокаДерева из СтрокиДерева.Строки Цикл
		
		Если СтрокаДерева.Строки.Количество() Тогда
			
			#Область ВыводИерархии
			
			// оформление точки: установка текста, значения, картинки
			Точка = ТочкаРодитель.Точки.Добавить();
			Точка.Значение = ПолучитьЗначениеДерева(СтрокаДерева);
			Если Точка.Значение = Справочники.ШагиБюджетныхПроцессов.ПустаяСсылка() Тогда
				Точка.Текст = НСтр("en='<Вне бюджетного процесса>';ru='<Вне бюджетного процесса>'");
			Иначе
				Если Группировки = "Вариант1" Тогда
					Точка.Текст = СтрокаДерева.ШагПроцессаНаименование;
					Если ЗначениеЗаполнено(СтрокаДерева.ШагПроцесса) Тогда
						Если СтрокаДерева.ШагПроцессаЭтоГруппа Тогда
							Точка.Картинка = БиблиотекаКартинок.Папка;
						Иначе
							Точка.Картинка = БиблиотекаКартинок.Элемент;
							Точка.Текст = Точка.Текст + ", " + СтрокаДерева.ШагПроцессаОтветственный;
						КонецЕсли;
					КонецЕсли;
					Точка.Расшифровка = Точка.Значение;
				Иначе
					Если ТипЗнч(Точка.Значение) = Тип("СправочникСсылка.Пользователи") Тогда
						Точка.Текст = Строка(Точка.Значение);
						Точка.Картинка = БиблиотекаКартинок.Пользователь;
						Точка.Расшифровка = Точка.Значение;
					Иначе
						ПредставлениеПериода = БюджетированиеКлиентСервер.ПредставлениеПериодаПоДате(СтрокаДерева.Период, СтрокаДерева.Периодичность);
						Точка.Текст = ПредставлениеПериода;
						РасшифровкаПериода = НСтр("en='Период планирования: %1';ru='Период планирования: %1'");
						Точка.Расшифровка = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(РасшифровкаПериода, ПредставлениеПериода);
						Если СтрокаДерева.Периодичность <> ПредопределенноеЗначение("Перечисление.Периодичность.День") Тогда
							Точка.Расшифровка 	= Точка.Расшифровка + Символы.ПС;
							ДатаПланирования 	= БюджетированиеКлиентСервер.ДатаНачалаПериода(
															СтрокаДерева.Период, 
															СтрокаДерева.Периодичность);
							ДатаПланирования 	= Формат(ДатаПланирования, "ДЛФ=D");
							Точка.Расшифровка 	= Точка.Расшифровка + ДатаПланирования;
							Точка.Расшифровка 	= Точка.Расшифровка + " - ";
							ДатаПланирования 	= БюджетированиеКлиентСервер.ДатаКонцаПериода(
															СтрокаДерева.Период, 
															СтрокаДерева.Периодичность);
							ДатаПланирования 	= Формат(ДатаПланирования, "ДЛФ=D");
							Точка.Расшифровка 	= Точка.Расшифровка + ДатаПланирования;
						КонецЕсли;
						Если СтрокаДерева.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.День") Тогда
							Точка.Картинка = БиблиотекаКартинок.Период_День;
						ИначеЕсли СтрокаДерева.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Неделя") Тогда
							Точка.Картинка = БиблиотекаКартинок.Период_Неделя;
						ИначеЕсли СтрокаДерева.Периодичность = ПредопределенноеЗначение("Перечисление.Периодичность.Месяц") Тогда
							Точка.Картинка = БиблиотекаКартинок.Период_Месяц;
						Иначе
							Точка.Картинка = БиблиотекаКартинок.Периоды;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
			КонецЕсли;
			
			// вывод задач
			ПодчиненнаяТаблицаИнтервалов = ВывестиДеревоВДиаграммуГанта(Результат, 
																	СтрокаДерева, 
																	СтруктураСерий, 
																	ТипОтчета, 
																	Группировки, 
																	ПоказатьПланВыполнения, 
																	Точка);
			
			// Для вариантов отчета, отображающих процесс по задачам - 
			// - выводим интервалы на всех уровнях иерархии
			Если Группировки <> "Вариант1" Тогда
				Если ТаблицаИнтервалов = Неопределено Тогда
					ТаблицаИнтервалов = ПодчиненнаяТаблицаИнтервалов.Скопировать();
				Иначе
					ОбщегоНазначенияКлиентСервер.ДополнитьТаблицу(ПодчиненнаяТаблицаИнтервалов, ТаблицаИнтервалов);
				КонецЕсли;
			КонецЕсли;
			
			Если ПодчиненнаяТаблицаИнтервалов <> Неопределено Тогда
				
				ТаблицаВывода = ПреобразоватьТаблицуИнтервалов(ПодчиненнаяТаблицаИнтервалов, ПоказатьПланВыполнения);
				ВывестиТаблицуВывода(ТаблицаВывода, Результат, Точка, ТипОтчета, СтруктураСерий);
			
			КонецЕсли;
			
			#КонецОбласти
			
		Иначе
			
			#Область ВыводЗадачи
			
			Если ТаблицаИнтервалов = Неопределено Тогда
				ТаблицаИнтервалов = ПолучитьТаблицуИнтервалов();
			КонецЕсли;
			ЗаполнитьЗначенияСвойств(ТаблицаИнтервалов.Добавить(), СтрокаДерева);
			
			ТаблицаТекущейЗадачи = ПолучитьТаблицуИнтервалов();
			ЗаполнитьЗначенияСвойств(ТаблицаТекущейЗадачи.Добавить(), СтрокаДерева);
			ТаблицаВывода = ПреобразоватьТаблицуИнтервалов(ТаблицаТекущейЗадачи, ПоказатьПланВыполнения);
			
			ТочкаЗадачи = ТочкаРодитель.Точки.Добавить();
			
			Если Группировки = "Вариант1" Тогда
				ТочкаЗадачи.Значение = СтрокаДерева.Период;
			Иначе
				ТочкаЗадачи.Значение = СтрокаДерева.ШагПроцесса;
			КонецЕсли;
			
			Если Не ЗначениеЗаполнено(ТочкаЗадачи.Значение) ИЛИ Группировки <> "Вариант1" Тогда
				ТочкаЗадачи.Текст = СтрокаДерева.ШагПроцессаНаименование;
				ТочкаЗадачи.Текст = ТочкаЗадачи.Текст;
				Если Группировки = "Вариант2" Тогда
					ТочкаЗадачи.Текст = ТочкаЗадачи.Текст + ", " + Строка(СтрокаДерева.Исполнитель);
				КонецЕсли;
			Иначе
				ПредставлениеПериода = БюджетированиеКлиентСервер.ПредставлениеПериодаПоДате(СтрокаДерева.Период, СтрокаДерева.Периодичность);
				ТочкаЗадачи.Текст = ПредставлениеПериода;
				Если СтрокаДерева.Исполнитель <> СтрокаДерева.Родитель.ШагПроцессаОтветственный Тогда
					ТочкаЗадачи.Текст = ТочкаЗадачи.Текст + ", " + Строка(СтрокаДерева.Исполнитель);
				КонецЕсли;
			КонецЕсли;
			
			ТочкаЗадачи.Расшифровка = СтрокаДерева.ШагПроцесса;
			ТочкаЗадачи.Картинка = БиблиотекаКартинок.Задача;
			
			ВывестиТаблицуВывода(ТаблицаВывода, Результат, ТочкаЗадачи, ТипОтчета, СтруктураСерий);
			
			#КонецОбласти
			
		КонецЕсли;
		
	КонецЦикла;
	
	Возврат ТаблицаИнтервалов;
	
КонецФункции

#КонецОбласти

#Область ОформлениеДиаграммыПослеВывода

Функция ОбработатьРазвернутьТочки(Результат, Точки, СворачиваемыйТип)
	
	БылиТочкиСПодчиненнымиНаУровне = Ложь;
	ВстретилсяСворачиваемыйТип = Ложь;
	Для Каждого Точка из Точки Цикл
		
		Разворачивать = ОбработатьРазвернутьТочки(Результат, Точка.Точки, СворачиваемыйТип);
		
		Если Разворачивать Тогда
			Результат.РазвернутьТочку(Точка, Ложь);
		Иначе
			Результат.СвернутьТочку(Точка, Ложь);
		КонецЕсли;
		
		Если Точка.Точки.Количество() Тогда
			БылиТочкиСПодчиненнымиНаУровне = Истина;
		КонецЕсли;
		
		Если ТипЗнч(Точка.Значение) = СворачиваемыйТип Тогда
			ВстретилсяСворачиваемыйТип = Истина;
		КонецЕсли;
		
	КонецЦикла;
	
	Разворачивать = БылиТочкиСПодчиненнымиНаУровне;
	Разворачивать = Разворачивать ИЛИ Не ВстретилсяСворачиваемыйТип;
	
	Возврат Разворачивать;
			
КонецФункции

Процедура ОформитьДиаграммуПослеВывода(Результат, ТипОтчета, Группировки, Знач НачалоПериода, Знач КонецПериода)
	
	Результат.ОтображениеИнтервала = ОтображениеИнтервалаДиаграммыГанта.Плоский;
	
	ЭлементыШкалы = Результат.ОбластьПостроения.ШкалаВремени.Элементы;
	
	Пока ЭлементыШкалы.Количество() > 1 Цикл
		ЭлементыШкалы.Удалить(ЭлементыШкалы[1]);
	КонецЦикла;
	
	ЭлементыШкалы[0].Единица = ТипЕдиницыШкалыВремени.День;
	
	Если Группировки = "Вариант1" Тогда
		ОбработатьРазвернутьТочки(Результат, Результат.Точки, Тип("Дата"));
	Иначе
		ОбработатьРазвернутьТочки(Результат, Результат.Точки, Тип("СправочникСсылка.ШагиБюджетныхПроцессов"));
	КонецЕсли;
	
	Если Группировки = "Вариант1" Тогда
		Результат.АвтоОпределениеПолногоИнтервала = Истина;
		НачалоАвтоИнтервала = Результат.НачалоПолногоИнтервала;
		КонецАвтоИнтервала = Результат.КонецПолногоИнтервала;
		Результат.АвтоОпределениеПолногоИнтервала = Ложь;
		Результат.УстановитьПолныйИнтервал(
							Мин(НачалоАвтоИнтервала, НачалоПериода),
							Макс(КонецАвтоИнтервала, КонецДня(КонецПериода)));
	Иначе
		Результат.АвтоОпределениеПолногоИнтервала = Ложь;
		Результат.УстановитьПолныйИнтервал(НачалоПериода, КонецДня(КонецПериода));
	КонецЕсли;
	
	НачалоПериода = Результат.НачалоПолногоИнтервала;
	КонецПериода = Результат.КонецПолногоИнтервала;
	
	Добавлено = 0; 
	ДополнитьМесяцГодом = Истина;
	Если Год(НачалоПериода) <> Год(КонецПериода) Тогда
		ДополнитьМесяцГодом = Ложь;
		НоваяШкала = ЭлементыШкалы.Вставить(Добавлено);
		НоваяШкала.Единица = ТипЕдиницыШкалыВремени.Год;
		НоваяШкала.Формат = "ДФ='yyyy'";
		Добавлено = Добавлено + 1;
	КонецЕсли;
	Если НачалоКвартала(НачалоПериода) <> НачалоКвартала(КонецПериода) Тогда
		ДополнитьМесяцГодом = Ложь;
		НоваяШкала = ЭлементыШкалы.Вставить(Добавлено);
		НоваяШкала.Единица = ТипЕдиницыШкалыВремени.Квартал;
		НоваяШкала.Формат = "ДФ='к """ + НСтр("en='kw.';ru='кв.'") + """ yyyy'";
		Добавлено = Добавлено + 1;
	КонецЕсли;
	Если НачалоМесяца(НачалоПериода) <> НачалоМесяца(КонецПериода) Тогда
		НоваяШкала = ЭлементыШкалы.Вставить(Добавлено);
		НоваяШкала.Единица = ТипЕдиницыШкалыВремени.Месяц;
		Если ДополнитьМесяцГодом Тогда
			НоваяШкала.Формат = "ДФ='MMMM гггг'";
		Иначе
			НоваяШкала.Формат = "ДФ=MMM";
		КонецЕсли;
		Добавлено = Добавлено + 1;
	КонецЕсли;
	Если НачалоМесяца(КонецПериода) <= КонецМесяца(НачалоПериода) + 1 Тогда
		// если 2 месяца - то добавляем день
		НоваяШкала = ЭлементыШкалы.Вставить(Добавлено);
		НоваяШкала.Единица = ТипЕдиницыШкалыВремени.День;
		НоваяШкала.Формат = "ДФ=dd";
		Добавлено = Добавлено + 1;
	КонецЕсли;
	
	Пока ЭлементыШкалы.Количество() > Добавлено Цикл
		ЭлементыШкалы.Удалить(ЭлементыШкалы[Добавлено]);
	КонецЦикла;
	
	Если Группировки = "Вариант1" Тогда
		Заголовок = НСтр("en='Этап процесса /%Период планирования';ru='Этап процесса /%Период планирования'");
	ИначеЕсли Группировки = "Вариант2" Тогда
		Заголовок = НСтр("en='Период планирования /%Задача';ru='Период планирования /%Задача'");
	ИначеЕсли Группировки = "Вариант3" Тогда
		Заголовок = НСтр("en='Исполнитель /%Период планирования /%Задача';ru='Исполнитель /%Период планирования /%Задача'");
	КонецЕсли;
	
	Результат.ОбластьПостроения.Заголовок = СтрЗаменить(Заголовок, "%", Символы.ПС);
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

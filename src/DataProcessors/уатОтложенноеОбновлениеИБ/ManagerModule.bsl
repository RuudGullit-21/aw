#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область СлужебныеПроцедурыИФункции

#Область ОбновлениеВерсия1091

Процедура ОбработатьРемЛисты1091Сервер(СтруктураПараметров, АдресХранилища) Экспорт
	
	Если уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП() Тогда
		ВерсияКонфигурации = "1.0.9.1";
	Иначе
		ВерсияКонфигурации = "2.1.5.1";
	КонецЕсли;
	
	НачДата = СтруктураПараметров.Период.ДатаНачала;
	КонДата = КонецДня(СтруктураПараметров.Период.ДатаОкончания);
			
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатРемонтныйЛист.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.уатРемонтныйЛист КАК уатРемонтныйЛист
	|ГДЕ
	|	НЕ уатРемонтныйЛист.ПометкаУдаления
	|	И уатРемонтныйЛист.СуммаДокумента = 0
	|	И уатРемонтныйЛист.Дата МЕЖДУ &НачДата И &КонДата";
	Запрос.УстановитьПараметр("НачДата", НачДата);
	Запрос.УстановитьПараметр("КонДата", КонДата);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ВсегоДокументов = Выборка.Количество();
	ШагВыводаПрогресса = Макс(Окр(ВсегоДокументов/10), 1);
	
	Сч = 0;
	Пока Выборка.Следующий() Цикл
		Сч = Сч + 1;
		ДокОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Если ДокОбъект.СпособРемонта = Перечисления.уатСпособыРемонта.Автосервис Тогда
			// сумма документа здесь в валюте документа
			СуммаДокумента = ДокОбъект.Материалы.Итог("Сумма");
			СуммаДокумента = СуммаДокумента + ДокОбъект.Работы.Итог("Сумма");
			Если ДокОбъект.УчитыватьНДС И НЕ ДокОбъект.СуммаВключаетНДС Тогда
				СуммаДокумента = СуммаДокумента + ДокОбъект.Материалы.Итог("СуммаНДС");
				СуммаДокумента = СуммаДокумента + ДокОбъект.Работы.Итог("СуммаНДС");
			КонецЕсли;
		Иначе
			// валюты документа нет, используем валюту регл. учета
			НЗПартии = ДокОбъект.Движения.уатПартииТоваровНаСкладах;
			НЗПартии.Прочитать();
			тблСписания = НЗПартии.Выгрузить();
			СуммаДокумента = тблСписания.Итог("Стоимость") + тблСписания.Итог("СуммаНДС");
		КонецЕсли;
		
		Если СуммаДокумента > 0 Тогда
			ДокОбъект.СуммаДокумента = СуммаДокумента;
			ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецЕсли;
		
		Если ШагВыводаПрогресса > 0 И Сч%ШагВыводаПрогресса=0 Тогда
			ПроцентВыполнения = Окр(Сч/ВсегоДокументов*100);
			ТекстНСТР = "Выполняется отложенное обновление ремонтных листов (" + ВерсияКонфигурации + ")";
			ДлительныеОперации.СообщитьПрогресс(ПроцентВыполнения, ТекстНСТР);
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеВерсия1121

Процедура ОбработатьЗаказыНаТС1121Сервер(СтруктураПараметров, АдресХранилища) Экспорт
	
	Если уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП() Тогда
		ВерсияКонфигурации = "1.1.2.1";
	Иначе
		ВерсияКонфигурации = "2.2.2.1";
	КонецЕсли;
	
	НачДата = СтруктураПараметров.Период.ДатаНачала;
	КонДата = КонецДня(СтруктураПараметров.Период.ДатаОкончания);
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатЗаказГрузоотправителя.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	|ГДЕ
	|	НЕ уатЗаказГрузоотправителя.ПометкаУдаления
	|	И уатЗаказГрузоотправителя.Дата МЕЖДУ &НачДата И &КонДата
	|	И уатЗаказГрузоотправителя.ЦветДокумента = 0";
	Запрос.УстановитьПараметр("НачДата", НачДата);
	Запрос.УстановитьПараметр("КонДата", КонДата);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ВсегоДокументов = Выборка.Количество();
	ШагВыводаПрогресса = Макс(Окр(ВсегоДокументов/10), 1);
	
	Сч = 0;
	Пока Выборка.Следующий() Цикл
		Сч = Сч + 1;
		
		ДокОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		ДокОбъект.ЦветДокумента = (Сч % 16);
		
		Если ДокОбъект.ЦветДокумента = 0 Тогда 
			ДокОбъект.ЦветДокумента = 16;
		КонецЕсли;
		
		ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
		
		Если ШагВыводаПрогресса > 0 И Сч%ШагВыводаПрогресса=0 Тогда
			ПроцентВыполнения = Окр(Сч/ВсегоДокументов*100);
			ТекстНСТР = "Выполняется отложенное обновление заказов на ТС (" + ВерсияКонфигурации + ")";
			ДлительныеОперации.СообщитьПрогресс(ПроцентВыполнения, ТекстНСТР);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеВерсия1131

Процедура ОбработатьПланированиеРаботыТС1131Сервер(СтруктураПараметров, АдресХранилища) Экспорт
	Если уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП() Тогда
		ВерсияКонфигурации = "1.1.2.3";
	Иначе
		ВерсияКонфигурации = "2.2.2.3";
	КонецЕсли;
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатПланированиеРаботыТС.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.уатПланированиеРаботыТС КАК уатПланированиеРаботыТС
	|ГДЕ
	|	уатПланированиеРаботыТС.Проведен
	|	И уатПланированиеРаботыТС.Дата >= НАЧАЛОПЕРИОДА(&НачДата, ДЕНЬ)
	|	И (&КонДата = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ уатПланированиеРаботыТС.Дата <= КОНЕЦПЕРИОДА(&КонДата, ДЕНЬ))";
	Запрос.УстановитьПараметр("НачДата", СтруктураПараметров.Период.ДатаНачала);
	Запрос.УстановитьПараметр("КонДата", СтруктураПараметров.Период.ДатаОкончания);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ВсегоДокументов = Выборка.Количество();
	ШагВыводаПрогресса = Макс(Окр(ВсегоДокументов/10), 1);
	
	Сч = 0;
	Пока Выборка.Следующий() Цикл
		Сч = Сч + 1;
		
		ДокОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		
		Если ШагВыводаПрогресса > 0 И Сч%ШагВыводаПрогресса=0 Тогда
			ПроцентВыполнения = Окр(Сч/ВсегоДокументов*100);
			ТекстНСТР = "Выполняется отложенное обновление планов работы ТС (" + ВерсияКонфигурации + ")";
			ДлительныеОперации.СообщитьПрогресс(ПроцентВыполнения, ТекстНСТР);
		КонецЕсли;
		
	КонецЦикла;
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеВерсия1171

Процедура ОбработатьЗаполнениеВалюты_1_1_7_1Сервер(СтруктураПараметров, АдресХранилища) Экспорт
	Если уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП() Тогда
		ВерсияКонфигурации = "1.1.7.1";
	Иначе
		ВерсияКонфигурации = "2.2.7.1";
	КонецЕсли;
	ВалютаРегл = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	""уатПотребностьВПеревозке_уэ"" КАК ВидДокумента,
	|	уатПотребностьВПеревозке_уэ.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.уатПотребностьВПеревозке_уэ КАК уатПотребностьВПеревозке_уэ
	|ГДЕ
	|	&ЗаполнениеВалюты_1_1_7_1_Потребность
	|	И НЕ уатПотребностьВПеревозке_уэ.ПометкаУдаления
	|	И НЕ уатПотребностьВПеревозке_уэ.Служебный_ВыполненоОтложенноеОбновление_1_1_7_1
	|	И уатПотребностьВПеревозке_уэ.Дата >= НАЧАЛОПЕРИОДА(&НачДата, ДЕНЬ)
	|	И (&КонДата = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ уатПотребностьВПеревозке_уэ.Дата <= КОНЕЦПЕРИОДА(&КонДата, ДЕНЬ))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""уатЗаказГрузоотправителя"",
	|	уатЗаказГрузоотправителя.Ссылка
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	|ГДЕ
	|	&ЗаполнениеВалюты_1_1_7_1_ЗаказНаТС
	|	И НЕ уатЗаказГрузоотправителя.ПометкаУдаления
	|	И НЕ уатЗаказГрузоотправителя.Служебный_ВыполненоОтложенноеОбновление_1_1_7_1
	|	И уатЗаказГрузоотправителя.Дата >= НАЧАЛОПЕРИОДА(&НачДата, ДЕНЬ)
	|	И (&КонДата = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ уатЗаказГрузоотправителя.Дата <= КОНЕЦПЕРИОДА(&КонДата, ДЕНЬ))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""уатЗаказПеревозчику_уэ"",
	|	уатЗаказПеревозчику_уэ.Ссылка
	|ИЗ
	|	Документ.уатЗаказПеревозчику_уэ КАК уатЗаказПеревозчику_уэ
	|ГДЕ
	|	&ЗаполнениеВалюты_1_1_7_1_ЗаказПеревозчику
	|	И НЕ уатЗаказПеревозчику_уэ.ПометкаУдаления
	|	И уатЗаказПеревозчику_уэ.Дата >= НАЧАЛОПЕРИОДА(&НачДата, ДЕНЬ)
	|	И (&КонДата = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ уатЗаказПеревозчику_уэ.Дата <= КОНЕЦПЕРИОДА(&КонДата, ДЕНЬ))
	|	И (уатЗаказПеревозчику_уэ.ДатаКурса = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ уатЗаказПеревозчику_уэ.Расходы.Валюта = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""уатМаршрутныйЛист"",
	|	уатМаршрутныйЛист.Ссылка
	|ИЗ
	|	Документ.уатМаршрутныйЛист КАК уатМаршрутныйЛист
	|ГДЕ
	|	&ЗаполнениеВалюты_1_1_7_1_МаршрутныйЛист
	|	И НЕ уатМаршрутныйЛист.ПометкаУдаления
	|	И уатМаршрутныйЛист.ВалютаДокумента = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|	И уатМаршрутныйЛист.Дата >= НАЧАЛОПЕРИОДА(&НачДата, ДЕНЬ)
	|	И (&КонДата = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ уатМаршрутныйЛист.Дата <= КОНЕЦПЕРИОДА(&КонДата, ДЕНЬ))";
	Запрос.УстановитьПараметр("НачДата",                                   СтруктураПараметров.Период.ДатаНачала);
	Запрос.УстановитьПараметр("КонДата",                                   СтруктураПараметров.Период.ДатаОкончания);
	Запрос.УстановитьПараметр("ЗаполнениеВалюты_1_1_7_1_Потребность",      СтруктураПараметров.ЗаполнениеВалюты_1_1_7_1_Потребность);
	Запрос.УстановитьПараметр("ЗаполнениеВалюты_1_1_7_1_ЗаказНаТС",        СтруктураПараметров.ЗаполнениеВалюты_1_1_7_1_ЗаказНаТС);
	Запрос.УстановитьПараметр("ЗаполнениеВалюты_1_1_7_1_ЗаказПеревозчику", СтруктураПараметров.ЗаполнениеВалюты_1_1_7_1_ЗаказПеревозчику);
	Запрос.УстановитьПараметр("ЗаполнениеВалюты_1_1_7_1_МаршрутныйЛист",   СтруктураПараметров.ЗаполнениеВалюты_1_1_7_1_МаршрутныйЛист);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ВсегоДокументов = Выборка.Количество();
	ШагВыводаПрогресса = Макс(Окр(ВсегоДокументов/10), 1);
	
	Сч = 0;
	Пока Выборка.Следующий() Цикл
		Сч = Сч + 1;
		
		ДокОбъект = Выборка.Ссылка.ПолучитьОбъект();
		ЗаполнитьРеквизитыДокументаМноговалютныйУчет_1_1_7_1(ДокОбъект, Выборка.ВидДокумента);
		ДокОбъект.ОбменДанными.Загрузка = Истина;
		ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
		
		Если ШагВыводаПрогресса > 0 И Сч%ШагВыводаПрогресса=0 Тогда
			ПроцентВыполнения = Окр(Сч/ВсегоДокументов*100);
			ТекстНСТР = "Выполняется заполнение валюты (" + ВерсияКонфигурации + ") в документах";
			ДлительныеОперации.СообщитьПрогресс(ПроцентВыполнения, ТекстНСТР);
		КонецЕсли;
	КонецЦикла;
	
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""уатВзаиморасчетыСКонтрагентами"" КАК ВидРегистра,
	|	уатВзаиморасчетыСКонтрагентами.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.уатВзаиморасчетыСКонтрагентами КАК уатВзаиморасчетыСКонтрагентами
	|ГДЕ
	|	&ЗаполнениеВалюты_1_1_7_1_Взаиморасчеты
	|	И уатВзаиморасчетыСКонтрагентами.Валюта = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|	И уатВзаиморасчетыСКонтрагентами.Период >= НАЧАЛОПЕРИОДА(&НачДата, ДЕНЬ)
	|	И (&КонДата = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ уатВзаиморасчетыСКонтрагентами.Период <= КОНЕЦПЕРИОДА(&КонДата, ДЕНЬ))
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""уатПредоставленныеУслуги"",
	|	уатПредоставленныеУслуги.Регистратор
	|ИЗ
	|	РегистрНакопления.уатПредоставленныеУслуги КАК уатПредоставленныеУслуги
	|ГДЕ
	|	&ЗаполнениеВалюты_1_1_7_1_ПредоставленныеУслуги
	|	И уатПредоставленныеУслуги.Валюта = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|	И уатПредоставленныеУслуги.Период >= НАЧАЛОПЕРИОДА(&НачДата, ДЕНЬ)
	|	И (&КонДата = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ уатПредоставленныеУслуги.Период <= КОНЕЦПЕРИОДА(&КонДата, ДЕНЬ))
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""уатВыставленныеУслуги"",
	|	уатВыставленныеУслуги.Регистратор
	|ИЗ
	|	РегистрНакопления.уатВыставленныеУслуги КАК уатВыставленныеУслуги
	|ГДЕ
	|	&ЗаполнениеВалюты_1_1_7_1_ВыставленныеУслуги
	|	И уатВыставленныеУслуги.Валюта = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|	И уатВыставленныеУслуги.Период >= НАЧАЛОПЕРИОДА(&НачДата, ДЕНЬ)
	|	И (&КонДата = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ уатВыставленныеУслуги.Период <= КОНЕЦПЕРИОДА(&КонДата, ДЕНЬ))
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""уатПлановыеУслуги_уэ"",
	|	уатПлановыеУслуги_уэ.Регистратор
	|ИЗ
	|	РегистрНакопления.уатПлановыеУслуги_уэ КАК уатПлановыеУслуги_уэ
	|ГДЕ
	|	&ЗаполнениеВалюты_1_1_7_1_ПлановыеУслуги
	|	И уатПлановыеУслуги_уэ.Валюта = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|	И уатПлановыеУслуги_уэ.Период >= НАЧАЛОПЕРИОДА(&НачДата, ДЕНЬ)
	|	И (&КонДата = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ уатПлановыеУслуги_уэ.Период <= КОНЕЦПЕРИОДА(&КонДата, ДЕНЬ))
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""уатПлатежныйКалендарь"",
	|	уатПлатежныйКалендарь.Регистратор
	|ИЗ
	|	РегистрНакопления.уатПлатежныйКалендарь КАК уатПлатежныйКалендарь
	|ГДЕ
	|	&ЗаполнениеВалюты_1_1_7_1_ПлатежныйКалендарь
	|	И уатПлатежныйКалендарь.Валюта = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|	И уатПлатежныйКалендарь.Период >= НАЧАЛОПЕРИОДА(&НачДата, ДЕНЬ)
	|	И (&КонДата = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ уатПлатежныйКалендарь.Период <= КОНЕЦПЕРИОДА(&КонДата, ДЕНЬ))
	|ОБЪЕДИНИТЬ ВСЕ
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	""уатДатыПлатежей"",
	|	уатДатыПлатежей.Регистратор
	|ИЗ
	|	РегистрСведений.уатДатыПлатежей КАК уатДатыПлатежей
	|ГДЕ
	|	&ЗаполнениеВалюты_1_1_7_1_ДатыПлатежей
	|	И уатДатыПлатежей.Валюта = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|	И уатДатыПлатежей.Регистратор.Дата >= НАЧАЛОПЕРИОДА(&НачДата, ДЕНЬ)
	|	И (&КонДата = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ уатДатыПлатежей.Регистратор.Дата <= КОНЕЦПЕРИОДА(&КонДата, ДЕНЬ))");
	Запрос.УстановитьПараметр("НачДата",                                        СтруктураПараметров.Период.ДатаНачала);
	Запрос.УстановитьПараметр("КонДата",                                        СтруктураПараметров.Период.ДатаОкончания);
	Запрос.УстановитьПараметр("ЗаполнениеВалюты_1_1_7_1_Взаиморасчеты",         СтруктураПараметров.ЗаполнениеВалюты_1_1_7_1_Взаиморасчеты);
	Запрос.УстановитьПараметр("ЗаполнениеВалюты_1_1_7_1_ПредоставленныеУслуги", СтруктураПараметров.ЗаполнениеВалюты_1_1_7_1_ПредоставленныеУслуги);
	Запрос.УстановитьПараметр("ЗаполнениеВалюты_1_1_7_1_ВыставленныеУслуги",    СтруктураПараметров.ЗаполнениеВалюты_1_1_7_1_ВыставленныеУслуги);
	Запрос.УстановитьПараметр("ЗаполнениеВалюты_1_1_7_1_ПлановыеУслуги",        СтруктураПараметров.ЗаполнениеВалюты_1_1_7_1_ПлановыеУслуги);
	Запрос.УстановитьПараметр("ЗаполнениеВалюты_1_1_7_1_ПлатежныйКалендарь",    СтруктураПараметров.ЗаполнениеВалюты_1_1_7_1_ПлатежныйКалендарь);
	Запрос.УстановитьПараметр("ЗаполнениеВалюты_1_1_7_1_ДатыПлатежей",          СтруктураПараметров.ЗаполнениеВалюты_1_1_7_1_ДатыПлатежей);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ВсегоДокументов = Выборка.Количество();
	ШагВыводаПрогресса = Макс(Окр(ВсегоДокументов/10), 1);
	
	Сч = 0;
	Пока Выборка.Следующий() Цикл
		Сч = Сч + 1;
		
		Если Выборка.ВидРегистра = "уатДатыПлатежей" Тогда
			НЗ = РегистрыСведений.уатДатыПлатежей.СоздатьНаборЗаписей();
		Иначе
			НЗ = РегистрыНакопления[Выборка.ВидРегистра].СоздатьНаборЗаписей();
		КонецЕсли;
		
		НЗ.Отбор.Регистратор.Установить(Выборка.Регистратор);
		НЗ.Прочитать();
		Для Каждого ТекЗапись Из НЗ Цикл
			ТекЗапись.Валюта = ТекЗапись.ДоговорКонтрагента.ВалютаВзаиморасчетов;
		КонецЦикла;
		
		НЗ.ОбменДанными.Загрузка = Истина;
		НЗ.Записать();
		
		Если ШагВыводаПрогресса > 0 И Сч%ШагВыводаПрогресса=0 Тогда
			ПроцентВыполнения = Окр(Сч/ВсегоДокументов*100);
			ТекстНСТР = "Выполняется заполнение валюты (" + ВерсияКонфигурации + ") в регистрах";
			ДлительныеОперации.СообщитьПрогресс(ПроцентВыполнения, ТекстНСТР);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

// Процедура заполнения реквизитов, связанных с добавлением валюты. Вызывается как локально из этого модуля, так и при
// записи документов
//
Процедура ЗаполнитьРеквизитыДокументаМноговалютныйУчет_1_1_7_1(ДокОбъект, ВидДокумента = Неопределено, ВалютаРегл = Неопределено) Экспорт
	Если ВидДокумента = Неопределено Тогда
		ВидДокумента = ДокОбъект.Метаданные().Имя;
	КонецЕсли;
	Если ВалютаРегл = Неопределено Тогда
		ВалютаРегл = Константы.ВалютаРегламентированногоУчета.Получить();
	КонецЕсли;
		
	ДокОбъект.ДатаКурса = ДокОбъект.Дата;
		
	Если ВидДокумента = "уатПотребностьВПеревозке_уэ"
		ИЛИ ВидДокумента = "уатЗаказГрузоотправителя" Тогда
		Для Каждого ТекСтрока Из ДокОбъект.Услуги Цикл
			ТекСтрока.Валюта = ДокОбъект.ВалютаДокумента;
		КонецЦикла;
		Для Каждого ТекСтрока Из ДокОбъект.Расходы Цикл
			ТекСтрока.Валюта           = ДокОбъект.ВалютаДокумента;
			ТекСтрока.УчитыватьНДС     = ДокОбъект.УчитыватьНДС;
			ТекСтрока.СуммаВключаетНДС = ДокОбъект.СуммаВключаетНДС;
		КонецЦикла;
		ДокОбъект.Служебный_ВыполненоОтложенноеОбновление_1_1_7_1 = Истина;
		
	ИначеЕсли ВидДокумента = "уатЗаказПеревозчику_уэ" Тогда
		Для Каждого ТекСтрока Из ДокОбъект.Расходы Цикл
			Если НЕ ЗначениеЗаполнено(ТекСтрока.Валюта) Тогда
				ТекСтрока.Валюта = ДокОбъект.ВалютаДокумента;
			КонецЕсли;
		КонецЦикла;
		
	ИначеЕсли ВидДокумента = "уатМаршрутныйЛист" Тогда
		Если НЕ ЗначениеЗаполнено(ДокОбъект.ВалютаДокумента) Тогда
			ДокОбъект.ВалютаДокумента = ВалютаРегл;
		КонецЕсли;
		Если ДокОбъект.Курс = 0 Тогда
			ДокОбъект.Курс = 1;
		КонецЕсли;
		Если ДокОбъект.Кратность = 0 Тогда
			ДокОбъект.Кратность = 1;
		КонецЕсли;
		
	КонецЕсли;
КонецПроцедуры

Процедура ОбработатьМноговалютныйУчет_1_1_7_1Сервер(СтруктураПараметров, АдресХранилища) Экспорт
	Если уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП() Тогда
		ВерсияКонфигурации = "1.1.7.1";
	Иначе
		ВерсияКонфигурации = "2.2.7.1";
	КонецЕсли;
	ВалютаРегл = Константы.ВалютаРегламентированногоУчета.Получить();
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	""уатРеализацияУслуг"" КАК ВидДокумента,
	|	уатРеализацияУслуг.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.уатРеализацияУслуг КАК уатРеализацияУслуг
	|ГДЕ
	|	&МноговалютныйУчет_1_1_7_1_РеализацияУслуг
	|	И уатРеализацияУслуг.ВалютаВзаиморасчетов = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|	И НЕ уатРеализацияУслуг.ПометкаУдаления
	|	И уатРеализацияУслуг.Дата >= НАЧАЛОПЕРИОДА(&НачДата, ДЕНЬ)
	|	И (&КонДата = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ уатРеализацияУслуг.Дата <= КОНЕЦПЕРИОДА(&КонДата, ДЕНЬ))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""уатПоступлениеТоваровУслуг"",
	|	уатПоступлениеТоваровУслуг.Ссылка
	|ИЗ
	|	Документ.уатПоступлениеТоваровУслуг КАК уатПоступлениеТоваровУслуг
	|ГДЕ
	|	&МноговалютныйУчет_1_1_7_1_ПоступлениеТоваровУслуг
	|	И уатПоступлениеТоваровУслуг.ВалютаВзаиморасчетов = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|	И НЕ уатПоступлениеТоваровУслуг.ПометкаУдаления
	|	И уатПоступлениеТоваровУслуг.Дата >= НАЧАЛОПЕРИОДА(&НачДата, ДЕНЬ)
	|	И (&КонДата = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ уатПоступлениеТоваровУслуг.Дата <= КОНЕЦПЕРИОДА(&КонДата, ДЕНЬ))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""уатСчетНаОплатуПокупателю"",
	|	уатСчетНаОплатуПокупателю.Ссылка
	|ИЗ
	|	Документ.уатСчетНаОплатуПокупателю КАК уатСчетНаОплатуПокупателю
	|ГДЕ
	|	&МноговалютныйУчет_1_1_7_1_СчетНаОплатуПокупателю
	|	И уатСчетНаОплатуПокупателю.Услуги.Валюта = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|	И НЕ уатСчетНаОплатуПокупателю.ПометкаУдаления
	|	И уатСчетНаОплатуПокупателю.Дата >= НАЧАЛОПЕРИОДА(&НачДата, ДЕНЬ)
	|	И (&КонДата = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ уатСчетНаОплатуПокупателю.Дата <= КОНЕЦПЕРИОДА(&КонДата, ДЕНЬ))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""уатСчетНаОплатуПоставщика"",
	|	уатСчетНаОплатуПоставщика.Ссылка
	|ИЗ
	|	Документ.уатСчетНаОплатуПоставщика КАК уатСчетНаОплатуПоставщика
	|ГДЕ
	|	&МноговалютныйУчет_1_1_7_1_СчетНаОплатуПоставщика
	|	И уатСчетНаОплатуПоставщика.Услуги.Валюта = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|	И НЕ уатСчетНаОплатуПоставщика.ПометкаУдаления
	|	И уатСчетНаОплатуПоставщика.Дата >= НАЧАЛОПЕРИОДА(&НачДата, ДЕНЬ)
	|	И (&КонДата = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ уатСчетНаОплатуПоставщика.Дата <= КОНЕЦПЕРИОДА(&КонДата, ДЕНЬ))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""уатПлатежноеПоручениеВходящее"",
	|	уатПлатежноеПоручениеВходящее.Ссылка
	|ИЗ
	|	Документ.уатПлатежноеПоручениеВходящее КАК уатПлатежноеПоручениеВходящее
	|ГДЕ
	|	&МноговалютныйУчет_1_1_7_1_ППВ
	|	И уатПлатежноеПоручениеВходящее.РасшифровкаПлатежа.ВалютаВзаиморасчетов = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|	И НЕ уатПлатежноеПоручениеВходящее.ПометкаУдаления
	|	И уатПлатежноеПоручениеВходящее.Дата >= НАЧАЛОПЕРИОДА(&НачДата, ДЕНЬ)
	|	И (&КонДата = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ уатПлатежноеПоручениеВходящее.Дата <= КОНЕЦПЕРИОДА(&КонДата, ДЕНЬ))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""уатПлатежноеПоручениеИсходящее"",
	|	уатПлатежноеПоручениеИсходящее.Ссылка
	|ИЗ
	|	Документ.уатПлатежноеПоручениеИсходящее КАК уатПлатежноеПоручениеИсходящее
	|ГДЕ
	|	&МноговалютныйУчет_1_1_7_1_ППИ
	|	И уатПлатежноеПоручениеИсходящее.РасшифровкаПлатежа.ВалютаВзаиморасчетов = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|	И НЕ уатПлатежноеПоручениеИсходящее.ПометкаУдаления
	|	И уатПлатежноеПоручениеИсходящее.Дата >= НАЧАЛОПЕРИОДА(&НачДата, ДЕНЬ)
	|	И (&КонДата = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ уатПлатежноеПоручениеИсходящее.Дата <= КОНЕЦПЕРИОДА(&КонДата, ДЕНЬ))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""уатПриходныйКассовыйОрдер"",
	|	уатПриходныйКассовыйОрдер.Ссылка
	|ИЗ
	|	Документ.уатПриходныйКассовыйОрдер КАК уатПриходныйКассовыйОрдер
	|ГДЕ
	|	&МноговалютныйУчет_1_1_7_1_ПКО
	|	И уатПриходныйКассовыйОрдер.РасшифровкаПлатежа.ВалютаВзаиморасчетов = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|	И НЕ уатПриходныйКассовыйОрдер.ПометкаУдаления
	|	И уатПриходныйКассовыйОрдер.Дата >= НАЧАЛОПЕРИОДА(&НачДата, ДЕНЬ)
	|	И (&КонДата = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ уатПриходныйКассовыйОрдер.Дата <= КОНЕЦПЕРИОДА(&КонДата, ДЕНЬ))
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	""уатРасходныйКассовыйОрдер"",
	|	уатРасходныйКассовыйОрдер.Ссылка
	|ИЗ
	|	Документ.уатРасходныйКассовыйОрдер КАК уатРасходныйКассовыйОрдер
	|ГДЕ
	|	&МноговалютныйУчет_1_1_7_1_РКО
	|	И уатРасходныйКассовыйОрдер.РасшифровкаПлатежа.ВалютаВзаиморасчетов = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|	И НЕ уатРасходныйКассовыйОрдер.ПометкаУдаления
	|	И уатРасходныйКассовыйОрдер.Дата >= НАЧАЛОПЕРИОДА(&НачДата, ДЕНЬ)
	|	И (&КонДата = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ уатРасходныйКассовыйОрдер.Дата <= КОНЕЦПЕРИОДА(&КонДата, ДЕНЬ))";
	Запрос.УстановитьПараметр("НачДата",                                           СтруктураПараметров.Период.ДатаНачала);
	Запрос.УстановитьПараметр("КонДата",                                           СтруктураПараметров.Период.ДатаОкончания);
	Запрос.УстановитьПараметр("МноговалютныйУчет_1_1_7_1_ПКО",                     СтруктураПараметров.МноговалютныйУчет_1_1_7_1_ПКО);
	Запрос.УстановитьПараметр("МноговалютныйУчет_1_1_7_1_ПоступлениеТоваровУслуг", СтруктураПараметров.МноговалютныйУчет_1_1_7_1_ПоступлениеТоваровУслуг);
	Запрос.УстановитьПараметр("МноговалютныйУчет_1_1_7_1_ППВ",                     СтруктураПараметров.МноговалютныйУчет_1_1_7_1_ППВ);
	Запрос.УстановитьПараметр("МноговалютныйУчет_1_1_7_1_ППИ",                     СтруктураПараметров.МноговалютныйУчет_1_1_7_1_ППИ);
	Запрос.УстановитьПараметр("МноговалютныйУчет_1_1_7_1_РеализацияУслуг",         СтруктураПараметров.МноговалютныйУчет_1_1_7_1_РеализацияУслуг);
	Запрос.УстановитьПараметр("МноговалютныйУчет_1_1_7_1_РКО",                     СтруктураПараметров.МноговалютныйУчет_1_1_7_1_РКО);
	Запрос.УстановитьПараметр("МноговалютныйУчет_1_1_7_1_СчетНаОплатуПокупателю",  СтруктураПараметров.МноговалютныйУчет_1_1_7_1_СчетНаОплатуПокупателю);
	Запрос.УстановитьПараметр("МноговалютныйУчет_1_1_7_1_СчетНаОплатуПоставщика",  СтруктураПараметров.МноговалютныйУчет_1_1_7_1_СчетНаОплатуПоставщика);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ВсегоДокументов = Выборка.Количество();
	ШагВыводаПрогресса = Макс(Окр(ВсегоДокументов/10), 1);
	
	Сч = 0;
	Пока Выборка.Следующий() Цикл
		Сч = Сч + 1;
		
		ДокОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Если Выборка.ВидДокумента = "уатРеализацияУслуг"
			ИЛИ Выборка.ВидДокумента = "уатПоступлениеТоваровУслуг" Тогда
			
			ДокОбъект.ДатаКурса            = ДокОбъект.Дата;
			ДокОбъект.ВалютаВзаиморасчетов = ДокОбъект.ВалютаДокумента;
			ДокОбъект.СуммаВзаиморасчетов  = ДокОбъект.СуммаДокумента;
			ДокОбъект.КроссКурс            = 1;
			
			Для Каждого ТекСтрока Из ДокОбъект.Услуги Цикл
				ТекСтрока.Валюта           = ДокОбъект.ВалютаДокумента;
				ТекСтрока.КроссКурс        = 1;
				ТекСтрока.ЦенаВалютная     = ТекСтрока.Цена;
				ТекСтрока.СуммаВалютная    = ТекСтрока.Сумма;
				ТекСтрока.СуммаНДСвалютная = ТекСтрока.СуммаНДС;
			КонецЦикла;
						
		ИначеЕсли Выборка.ВидДокумента = "уатСчетНаОплатуПокупателю"
			ИЛИ Выборка.ВидДокумента = "уатСчетНаОплатуПоставщика" Тогда
			
			ДокОбъект.ДатаКурса            = ДокОбъект.Дата;
			
			Для Каждого ТекСтрока Из ДокОбъект.Услуги Цикл
				ТекСтрока.Валюта           = ДокОбъект.ВалютаДокумента;
				ТекСтрока.КроссКурс        = 1;
				ТекСтрока.ЦенаВалютная     = ТекСтрока.Цена;
				ТекСтрока.СуммаВалютная    = ТекСтрока.Сумма;
				ТекСтрока.СуммаНДСвалютная = ТекСтрока.СуммаНДС;
			КонецЦикла;
			
		Иначе
			Для Каждого ТекСтрока Из ДокОбъект.РасшифровкаПлатежа Цикл
				ТекСтрока.ВалютаВзаиморасчетов = ДокОбъект.ВалютаДокумента;
				ТекСтрока.СуммаВзаиморасчетов  = ТекСтрока.СуммаПлатежа;
			КонецЦикла;
			
		КонецЕсли;
					
		ДокОбъект.ОбменДанными.Загрузка = Истина;
		ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
		
		Если ШагВыводаПрогресса > 0 И Сч%ШагВыводаПрогресса=0 Тогда
			ПроцентВыполнения = Окр(Сч/ВсегоДокументов*100);
			ТекстНСТР = "Выполняется переход на многовалютный учет (" + ВерсияКонфигурации + ") в документах";
			ДлительныеОперации.СообщитьПрогресс(ПроцентВыполнения, ТекстНСТР);
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеВерсия1191

Процедура ОбработатьОтрезкиПути_1_1_9_1Сервер(СтруктураПараметров, АдресХранилища) Экспорт
	
	Если уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП() Тогда
		ВерсияКонфигурации = "1.1.8.1";
	Иначе
		ВерсияКонфигурации = "2.2.8.1";
	КонецЕсли;
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	уатЗаказГрузоотправителя.Ссылка КАК Ссылка,
	|	""уатЗаказГрузоотправителя"" КАК ВидДокумента
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя.ГрузовойСостав КАК уатЗаказГрузоотправителяГрузовойСостав
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	|		ПО уатЗаказГрузоотправителяГрузовойСостав.Ссылка = уатЗаказГрузоотправителя.Ссылка
	|			И (уатЗаказГрузоотправителяГрузовойСостав.ОтрезокПути <> """")
	|ГДЕ
	|	уатЗаказГрузоотправителя.FTL = ИСТИНА
	|	И уатЗаказГрузоотправителя.ПометкаУдаления = ЛОЖЬ
	|	И уатЗаказГрузоотправителя.Дата МЕЖДУ &НачДата И &КонДата
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатЗаказГрузоотправителя.Ссылка,
	|	""уатЗаказГрузоотправителя""
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя.Товары КАК уатЗаказГрузоотправителяТовары
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	|		ПО уатЗаказГрузоотправителяТовары.Ссылка = уатЗаказГрузоотправителя.Ссылка
	|			И (уатЗаказГрузоотправителяТовары.ОтрезокПути <> """")
	|ГДЕ
	|	уатЗаказГрузоотправителя.FTL = ИСТИНА
	|	И уатЗаказГрузоотправителя.ПометкаУдаления = ЛОЖЬ
	|	И уатЗаказГрузоотправителя.Дата МЕЖДУ &НачДата И &КонДата
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатПотребностьВПеревозке_уэ.Ссылка,
	|	""уатПотребностьВПеревозке_уэ""
	|ИЗ
	|	Документ.уатПотребностьВПеревозке_уэ КАК уатПотребностьВПеревозке_уэ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатПотребностьВПеревозке_уэ.ПунктыНазначения КАК уатПотребностьВПеревозке_уэПунктыНазначения
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатПотребностьВПеревозке_уэ.ГрузовойСостав КАК уатПотребностьВПеревозке_уэГрузовойСостав
	|			ПО уатПотребностьВПеревозке_уэПунктыНазначения.ID = уатПотребностьВПеревозке_уэГрузовойСостав.ID
	|				И уатПотребностьВПеревозке_уэПунктыНазначения.Ссылка = уатПотребностьВПеревозке_уэГрузовойСостав.Ссылка
	|		ПО уатПотребностьВПеревозке_уэ.Ссылка = уатПотребностьВПеревозке_уэПунктыНазначения.Ссылка
	|ГДЕ
	|	уатПотребностьВПеревозке_уэ.ПометкаУдаления = ЛОЖЬ
	|	И уатПотребностьВПеревозке_уэПунктыНазначения.FTL = ИСТИНА
	|	И уатПотребностьВПеревозке_уэ.Дата МЕЖДУ &НачДата И &КонДата
	|	И уатПотребностьВПеревозке_уэГрузовойСостав.ОтрезокПути <> """"
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатПотребностьВПеревозке_уэ.Ссылка,
	|	""уатПотребностьВПеревозке_уэ""
	|ИЗ
	|	Документ.уатПотребностьВПеревозке_уэ КАК уатПотребностьВПеревозке_уэ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатПотребностьВПеревозке_уэ.ПунктыНазначения КАК уатПотребностьВПеревозке_уэПунктыНазначения
	|			ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатПотребностьВПеревозке_уэ.ТоварныйСостав КАК уатПотребностьВПеревозке_уэТоварныйСостав
	|			ПО уатПотребностьВПеревозке_уэПунктыНазначения.ID = уатПотребностьВПеревозке_уэТоварныйСостав.ID
	|				И уатПотребностьВПеревозке_уэПунктыНазначения.Ссылка = уатПотребностьВПеревозке_уэТоварныйСостав.Ссылка
	|		ПО уатПотребностьВПеревозке_уэ.Ссылка = уатПотребностьВПеревозке_уэПунктыНазначения.Ссылка
	|ГДЕ
	|	уатПотребностьВПеревозке_уэ.ПометкаУдаления = ЛОЖЬ
	|	И уатПотребностьВПеревозке_уэПунктыНазначения.FTL = ИСТИНА
	|	И уатПотребностьВПеревозке_уэ.Дата МЕЖДУ &НачДата И &КонДата
	|	И уатПотребностьВПеревозке_уэТоварныйСостав.ОтрезокПути <> """"");
	Запрос.УстановитьПараметр("НачДата", СтруктураПараметров.Период.ДатаНачала);
	Запрос.УстановитьПараметр("КонДата", СтруктураПараметров.Период.ДатаОкончания);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ВсегоДокументов = Выборка.Количество();
	ШагВыводаПрогресса = Макс(Окр(ВсегоДокументов/10), 1);
	
	Сч = 0;
	Пока Выборка.Следующий() Цикл
		Сч = Сч + 1;
		
		ДокОбъект = Выборка.Ссылка.ПолучитьОбъект();
		
		Если Выборка.ВидДокумента = "уатЗаказГрузоотправителя" Тогда
			Документы.уатЗаказГрузоотправителя.ПерезаполнитьОтрезкиПути(ДокОбъект);
		ИначеЕсли Выборка.ВидДокумента = "уатПотребностьВПеревозке_уэ" Тогда
			Документы.уатПотребностьВПеревозке_уэ.ПерезаполнитьОтрезкиПути(ДокОбъект);
		КонецЕсли;
		
		ДокОбъект.ОбменДанными.Загрузка = Истина;
		ДокОбъект.Записать(РежимЗаписиДокумента.Запись);
		
		Если ШагВыводаПрогресса > 0 И Сч%ШагВыводаПрогресса=0 Тогда
			ПроцентВыполнения = Окр(Сч/ВсегоДокументов*100);
			ТекстНСТР = "Выполняется обновление отрезков пути (" + ВерсияКонфигурации + ") в документах";
			ДлительныеОперации.СообщитьПрогресс(ПроцентВыполнения, ТекстНСТР);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеВерсия11121

Процедура ПривязкаПунктовКГеозонам_1_1_12_1Сервер(СтруктураПараметров, АдресХранилища) Экспорт
	
	Если уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП() Тогда
		ВерсияКонфигурации = "1.1.8.1";
	Иначе
		ВерсияКонфигурации = "2.2.8.1";
	КонецЕсли;
	
	уатОбщегоНазначения_уэ.уатПривязкаПунктовНазначенияКГеозонам(,, АдресХранилища);
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеВерсия11121

Процедура ОбработатьПлатежныйКалендарь_1_1_16_1Сервер(СтруктураПараметров, АдресХранилища) Экспорт
	
	Если уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП() Тогда
		ВерсияКонфигурации = "1.1.16.1";
	Иначе
		ВерсияКонфигурации = "2.2.16.1";
	КонецЕсли;
	
	// выбор записей РС уатДатыПлатежей
	ЗапросДаты = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатДатыПлатежей.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрСведений.уатДатыПлатежей КАК уатДатыПлатежей
	|ГДЕ
	|	уатДатыПлатежей.ДоговорКонтрагента.ВедениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказамНаТС)
	|	И уатДатыПлатежей.ЗаказНаТС <> ЗНАЧЕНИЕ(Документ.уатЗаказГрузоотправителя.ПустаяСсылка)
	|	И (уатДатыПлатежей.Сделка = НЕОПРЕДЕЛЕНО
	|			ИЛИ уатДатыПлатежей.Сделка = ЗНАЧЕНИЕ(Документ.уатЗаказГрузоотправителя.ПустаяСсылка)
	|			ИЛИ уатДатыПлатежей.Сделка = ЗНАЧЕНИЕ(Документ.уатПоступлениеТоваровУслуг.ПустаяСсылка)
	|			ИЛИ уатДатыПлатежей.Сделка = ЗНАЧЕНИЕ(Документ.уатРеализацияУслуг.ПустаяСсылка)
	|			ИЛИ уатДатыПлатежей.Сделка = ЗНАЧЕНИЕ(Документ.уатСчетНаОплатуПокупателю.ПустаяСсылка)
	|			ИЛИ уатДатыПлатежей.Сделка = ЗНАЧЕНИЕ(Документ.уатСчетНаОплатуПоставщика.ПустаяСсылка))
	|	И Регистратор.Дата МЕЖДУ &НачДата И &КонДата");
	ЗапросДаты.УстановитьПараметр("НачДата", СтруктураПараметров.Период.ДатаНачала);
	ЗапросДаты.УстановитьПараметр("КонДата", СтруктураПараметров.Период.ДатаОкончания);
	ВыборкаРегистраторыДаты = ЗапросДаты.Выполнить().Выбрать();
	
	// выбор записей РН уатПлатежныйКалендарь
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатПлатежныйКалендарьОбороты.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.уатПлатежныйКалендарь.Обороты(
	|			&НачДата,
	|			&КонДата,
	|			Регистратор,
	|			ДоговорКонтрагента.ВедениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказамНаТС)
	|				И ЗаказНаТС <> ЗНАЧЕНИЕ(Документ.уатЗаказГрузоотправителя.ПустаяСсылка)
	|				И (Сделка = НЕОПРЕДЕЛЕНО
	|					ИЛИ Сделка = ЗНАЧЕНИЕ(Документ.уатЗаказГрузоотправителя.ПустаяСсылка)
	|					ИЛИ Сделка = ЗНАЧЕНИЕ(Документ.уатПоступлениеТоваровУслуг.ПустаяСсылка)
	|					ИЛИ Сделка = ЗНАЧЕНИЕ(Документ.уатРеализацияУслуг.ПустаяСсылка)
	|					ИЛИ Сделка = ЗНАЧЕНИЕ(Документ.уатСчетНаОплатуПокупателю.ПустаяСсылка)
	|					ИЛИ Сделка = ЗНАЧЕНИЕ(Документ.уатСчетНаОплатуПоставщика.ПустаяСсылка))) КАК уатПлатежныйКалендарьОбороты");
	Запрос.УстановитьПараметр("НачДата", СтруктураПараметров.Период.ДатаНачала);
	Запрос.УстановитьПараметр("КонДата", СтруктураПараметров.Период.ДатаОкончания);
	ВыборкаРегистраторы = Запрос.Выполнить().Выбрать();
	
	// расчет общего количества регистраторов для вывода прогресса
	ВсегоДокументов = ВыборкаРегистраторыДаты.Количество() + ВыборкаРегистраторы.Количество();
	ШагВыводаПрогресса = Макс(Окр(ВсегоДокументов/10), 1);
	Сч = 0;
	
	// заполнение Сделки в РС уатДатыПлатежей
	НЗДатыПлатежей = РегистрыСведений.уатДатыПлатежей.СоздатьНаборЗаписей();
	Пока ВыборкаРегистраторыДаты.Следующий() Цикл
		Сч = Сч + 1;
		
		НЗДатыПлатежей.Отбор.Регистратор.Установить(ВыборкаРегистраторыДаты.Регистратор);
		НЗДатыПлатежей.Прочитать();
		Для Каждого ТекЗапись Из НЗДатыПлатежей Цикл
			Если НЕ ЗначениеЗаполнено(ТекЗапись.Сделка) Тогда
				ТекЗапись.Сделка = ТекЗапись.ЗаказНаТС;
			КонецЕсли;
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НЗДатыПлатежей);
		
		Если ШагВыводаПрогресса > 0 И Сч%ШагВыводаПрогресса=0 Тогда
			ПроцентВыполнения = Окр(Сч/ВсегоДокументов*100);
			ТекстНСТР = "Выполняется отложенное обновление Платежного календаря (" + ВерсияКонфигурации + ")";
			ДлительныеОперации.СообщитьПрогресс(ПроцентВыполнения, ТекстНСТР);
		КонецЕсли;
	КонецЦикла;
	
	// заполнение Сделки в РН уатПлатежныйКалендарь
	НЗПлатежныйКалендарь = РегистрыНакопления.уатПлатежныйКалендарь.СоздатьНаборЗаписей();
	Пока ВыборкаРегистраторы.Следующий() Цикл
		Сч = Сч + 1;
		
		НЗПлатежныйКалендарь.Отбор.Регистратор.Установить(ВыборкаРегистраторы.Регистратор);
		НЗПлатежныйКалендарь.Прочитать();
		Для Каждого ТекЗапись Из НЗПлатежныйКалендарь Цикл
			Если НЕ ЗначениеЗаполнено(ТекЗапись.Сделка) Тогда
				ТекЗапись.Сделка = ТекЗапись.ЗаказНаТС;
			КонецЕсли;
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НЗПлатежныйКалендарь);
		
		Если ШагВыводаПрогресса > 0 И Сч%ШагВыводаПрогресса=0 Тогда
			ПроцентВыполнения = Окр(Сч/ВсегоДокументов*100);
			ТекстНСТР = "Выполняется отложенное обновление Платежного календаря (" + ВерсияКонфигурации + ")";
			ДлительныеОперации.СообщитьПрогресс(ПроцентВыполнения, ТекстНСТР);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеВерсия1123

Процедура ОбработатьЗаказыНаТС_1_1_23_1Сервер(СтруктураПараметров, АдресХранилища) Экспорт
	
	Если уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП() Тогда
		ВерсияКонфигурации = "1.1.23.1";
	Иначе
		ВерсияКонфигурации = "2.2.23.1";
	КонецЕсли;
	
	НачДата = СтруктураПараметров.Период.ДатаНачала;
	КонДата = КонецДня(СтруктураПараметров.Период.ДатаОкончания);
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатЗаказГрузоотправителя.Ссылка КАК Ссылка,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА уатОтклонениеГрузаЗаказы.Ссылка ЕСТЬ NULL
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ) КАК Отклонен
	|ПОМЕСТИТЬ втЗаказы
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатОтклонениеГруза.Заказы КАК уатОтклонениеГрузаЗаказы
	|		ПО уатЗаказГрузоотправителя.Ссылка = уатОтклонениеГрузаЗаказы.ЗаказГрузоотправителя
	|			И (уатОтклонениеГрузаЗаказы.Ссылка.Проведен)
	|			И (НЕ уатОтклонениеГрузаЗаказы.ПричинаОтклонения.ЗакрытУспешно)
	|ГДЕ
	|	НЕ уатЗаказГрузоотправителя.ПометкаУдаления
	|	И уатЗаказГрузоотправителя.Дата МЕЖДУ &НачДата И &КонДата
	|	И уатЗаказГрузоотправителя.Проведен
	|
	|СГРУППИРОВАТЬ ПО
	|	уатЗаказГрузоотправителя.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	уатЭтапыМультимодальныхПеревозок_уэ.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА уатОтклонениеГрузаЗаказы.Ссылка ЕСТЬ NULL
	|				ТОГДА ЛОЖЬ
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ) КАК Отклонен
	|ИЗ
	|	втЗаказы КАК втЗаказы
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.уатЭтапыМультимодальныхПеревозок_уэ КАК уатЭтапыМультимодальныхПеревозок_уэ
	|		ПО втЗаказы.Ссылка = уатЭтапыМультимодальныхПеревозок_уэ.Этап
	|		ЛЕВОЕ СОЕДИНЕНИЕ Документ.уатОтклонениеГруза.Заказы КАК уатОтклонениеГрузаЗаказы
	|		ПО втЗаказы.Ссылка = уатОтклонениеГрузаЗаказы.ЗаказГрузоотправителя
	|			И (уатОтклонениеГрузаЗаказы.Ссылка.Проведен)
	|
	|СГРУППИРОВАТЬ ПО
	|	уатЭтапыМультимодальныхПеревозок_уэ.ЗаказГрузоотправителя
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	втЗаказы.Ссылка,
	|	втЗаказы.Отклонен
	|ИЗ
	|	втЗаказы КАК втЗаказы";
	Запрос.УстановитьПараметр("НачДата", НачДата);
	Запрос.УстановитьПараметр("КонДата", КонДата);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	ВсегоДокументов    = Выборка.Количество();
	ШагВыводаПрогресса = Макс(Окр(ВсегоДокументов/10), 1);
 
	мсвЗаказов        = Новый Массив(); 
	ОтклоненныеЗаказы = Новый Массив();
	Пока Выборка.Следующий() Цикл
		мсвЗаказов.Добавить(Выборка.ЗаказГрузоотправителя);
		Если Выборка.Отклонен Тогда
			ОтклоненныеЗаказы.Добавить(Выборка.ЗаказГрузоотправителя);
		КонецЕсли;
	КонецЦикла;

	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ЗаказыВНаборе",		 мсвЗаказов);
	Запрос.УстановитьПараметр("ОтклоненныеЗаказы",	 ОтклоненныеЗаказы);

	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатЗаказГрузоотправителя.Ссылка КАК Ссылка,
	|	уатЗаказГрузоотправителя.Мультимодальный КАК Мультимодальный,
	|	уатЗаказГрузоотправителя.ЭтоЭтап КАК ЭтоЭтап,
	|	уатЗаказГрузоотправителя.Проведен КАК Проведен
	|ПОМЕСТИТЬ втЗаказы
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	|ГДЕ
	|	уатЗаказГрузоотправителя.Ссылка В(&ЗаказыВНаборе)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатЭтапыМультимодальныхПеревозок_уэ.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя,
	|	уатЭтапыМультимодальныхПеревозок_уэ.Этап КАК Этап
	|ПОМЕСТИТЬ втЭтапы
	|ИЗ
	|	РегистрСведений.уатЭтапыМультимодальныхПеревозок_уэ КАК уатЭтапыМультимодальныхПеревозок_уэ
	|ГДЕ
	|	уатЭтапыМультимодальныхПеревозок_уэ.ЗаказГрузоотправителя В(&ЗаказыВНаборе)
	|	И НЕ уатЭтапыМультимодальныхПеревозок_уэ.Этап В (&ОтклоненныеЗаказы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатЗаказыГрузоотправителейОстаткиИОбороты.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя,
	|	СУММА(уатЗаказыГрузоотправителейОстаткиИОбороты.КоличествоРасход) КАК Количество
	|ПОМЕСТИТЬ втКолВоРасход
	|ИЗ
	|	РегистрНакопления.уатЗаказыГрузоотправителей.ОстаткиИОбороты(
	|			,
	|			,
	|			,
	|			,
	|			ЗаказГрузоотправителя В
	|				(ВЫБРАТЬ
	|					втЭтапы.Этап КАК ЗаказГрузоотправителя
	|				ИЗ
	|					втЭтапы КАК втЭтапы)) КАК уатЗаказыГрузоотправителейОстаткиИОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	уатЗаказыГрузоотправителейОстаткиИОбороты.ЗаказГрузоотправителя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатЗаказыГрузоотправителейОстатки.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя,
	|	уатЗаказыГрузоотправителейОстатки.КоличествоОстаток КАК ЕстьОстаток,
	|	NULL КАК ЕстьРасход
	|ПОМЕСТИТЬ втТабСтатусов
	|ИЗ
	|	РегистрНакопления.уатЗаказыГрузоотправителей.Остатки(
	|			,
	|			ЗаказГрузоотправителя В
	|				(ВЫБРАТЬ
	|					втЭтапы.Этап КАК ЗаказГрузоотправителя
	|				ИЗ
	|					втЭтапы КАК втЭтапы)) КАК уатЗаказыГрузоотправителейОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втКолВоРасход.ЗаказГрузоотправителя,
	|	NULL,
	|	втКолВоРасход.Количество
	|ИЗ
	|	втКолВоРасход КАК втКолВоРасход
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втТабСтатусов.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя,
	|	МАКСИМУМ(втТабСтатусов.ЕстьОстаток) КАК ЕстьОстаток,
	|	МАКСИМУМ(втТабСтатусов.ЕстьРасход) КАК ЕстьРасход
	|ПОМЕСТИТЬ втСостояния
	|ИЗ
	|	втТабСтатусов КАК втТабСтатусов
	|
	|СГРУППИРОВАТЬ ПО
	|	втТабСтатусов.ЗаказГрузоотправителя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втЭтапы.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя,
	|	втЭтапы.Этап КАК Этап,
	|	ВЫБОР
	|		КОГДА втЭтапы.Этап.Проведен
	|				И ЕСТЬNULL(втСостояния.ЕстьРасход, 0) > 0
	|				И ЕСТЬNULL(втСостояния.ЕстьОстаток, 0) > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.уатСостоянияВыполненияЗаказов.ЧастичноВыполнен)
	|		КОГДА втЭтапы.Этап.Проведен
	|					И ЕСТЬNULL(втСостояния.ЕстьРасход, 0) > 0
	|					И втСостояния.ЕстьОстаток ЕСТЬ NULL
	|				ИЛИ втСостояния.ЕстьОстаток = 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.уатСостоянияВыполненияЗаказов.Выполнен)
	|		КОГДА втЭтапы.Этап.Проведен
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.уатСостоянияВыполненияЗаказов.Открыт)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.уатСостоянияВыполненияЗаказов.Новый)
	|	КОНЕЦ КАК СостояниеВыполнения,
	|	втСостояния.ЕстьОстаток КАК ЕстьОстаток,
	|	втСостояния.ЕстьРасход КАК ЕстьРасход
	|ПОМЕСТИТЬ втСтатусыРодительскихЗаказов
	|ИЗ
	|	втЭтапы КАК втЭтапы
	|		ЛЕВОЕ СОЕДИНЕНИЕ втСостояния КАК втСостояния
	|		ПО втЭтапы.Этап = втСостояния.ЗаказГрузоотправителя
	|
	|СГРУППИРОВАТЬ ПО
	|	втЭтапы.ЗаказГрузоотправителя,
	|	втЭтапы.Этап,
	|	ВЫБОР
	|		КОГДА втЭтапы.Этап.Проведен
	|				И ЕСТЬNULL(втСостояния.ЕстьРасход, 0) > 0
	|				И ЕСТЬNULL(втСостояния.ЕстьОстаток, 0) > 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.уатСостоянияВыполненияЗаказов.ЧастичноВыполнен)
	|		КОГДА втЭтапы.Этап.Проведен
	|					И ЕСТЬNULL(втСостояния.ЕстьРасход, 0) > 0
	|					И втСостояния.ЕстьОстаток ЕСТЬ NULL
	|				ИЛИ втСостояния.ЕстьОстаток = 0
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.уатСостоянияВыполненияЗаказов.Выполнен)
	|		КОГДА втЭтапы.Этап.Проведен
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.уатСостоянияВыполненияЗаказов.Открыт)
	|		ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.уатСостоянияВыполненияЗаказов.Новый)
	|	КОНЕЦ,
	|	втСостояния.ЕстьОстаток,
	|	втСостояния.ЕстьРасход
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	втСтатусыРодительскихЗаказов.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЕСТЬNULL(втСтатусыРодительскихЗаказов.СостояниеВыполнения, ЗНАЧЕНИЕ(Перечисление.уатСостоянияВыполненияЗаказов.Новый))) > 1
	|			ТОГДА ЗНАЧЕНИЕ(Перечисление.уатСостоянияВыполненияЗаказов.ЧастичноВыполнен)
	|		ИНАЧЕ МАКСИМУМ(ЕСТЬNULL(втСтатусыРодительскихЗаказов.СостояниеВыполнения, ЗНАЧЕНИЕ(Перечисление.уатСостоянияВыполненияЗаказов.Новый)))
	|	КОНЕЦ КАК СостояниеВыполнения,
	|	СУММА(втСтатусыРодительскихЗаказов.ЕстьОстаток) КАК ЕстьОстаток,
	|	СУММА(втСтатусыРодительскихЗаказов.ЕстьРасход) КАК ЕстьРасход
	|ПОМЕСТИТЬ ТабСтатусовРодительскихЗаказов
	|ИЗ
	|	втСтатусыРодительскихЗаказов КАК втСтатусыРодительскихЗаказов
	|
	|СГРУППИРОВАТЬ ПО
	|	втСтатусыРодительскихЗаказов.ЗаказГрузоотправителя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатЗаказыГрузоотправителейОстаткиИОбороты.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя,
	|	СУММА(уатЗаказыГрузоотправителейОстаткиИОбороты.КоличествоРасход) КАК Количество
	|ПОМЕСТИТЬ втКолВоРасходОсновныеЗаказы
	|ИЗ
	|	РегистрНакопления.уатЗаказыГрузоотправителей.ОстаткиИОбороты(, , , , ЗаказГрузоотправителя В (&ЗаказыВНаборе)) КАК уатЗаказыГрузоотправителейОстаткиИОбороты
	|
	|СГРУППИРОВАТЬ ПО
	|	уатЗаказыГрузоотправителейОстаткиИОбороты.ЗаказГрузоотправителя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатЗаказыГрузоотправителейОстатки.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя,
	|	уатЗаказыГрузоотправителейОстатки.КоличествоОстаток КАК ЕстьОстаток,
	|	NULL КАК ЕстьРасход
	|ПОМЕСТИТЬ втТабСтатусовОсновныеЗаказы
	|ИЗ
	|	РегистрНакопления.уатЗаказыГрузоотправителей.Остатки(, ЗаказГрузоотправителя В (&ЗаказыВНаборе)) КАК уатЗаказыГрузоотправителейОстатки
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	втКолВоРасходОсновныеЗаказы.ЗаказГрузоотправителя,
	|	NULL,
	|	втКолВоРасходОсновныеЗаказы.Количество
	|ИЗ
	|	втКолВоРасходОсновныеЗаказы КАК втКолВоРасходОсновныеЗаказы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втТабСтатусовОсновныеЗаказы.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя,
	|	МАКСИМУМ(втТабСтатусовОсновныеЗаказы.ЕстьОстаток) КАК ЕстьОстаток,
	|	МАКСИМУМ(втТабСтатусовОсновныеЗаказы.ЕстьРасход) КАК ЕстьРасход
	|ПОМЕСТИТЬ Состояния
	|ИЗ
	|	втТабСтатусовОсновныеЗаказы КАК втТабСтатусовОсновныеЗаказы
	|
	|СГРУППИРОВАТЬ ПО
	|	втТабСтатусовОсновныеЗаказы.ЗаказГрузоотправителя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втЗаказы.Ссылка КАК Заказ,
	|	МАКСИМУМ(ВЫБОР
	|			КОГДА втЗаказы.Мультимодальный
	|					И НЕ втЗаказы.ЭтоЭтап
	|				ТОГДА ЕСТЬNULL(ТабСтатусовРодительскихЗаказов.СостояниеВыполнения, ЗНАЧЕНИЕ(Перечисление.уатСостоянияВыполненияЗаказов.Новый))
	|			ИНАЧЕ ВЫБОР
	|					КОГДА втЗаказы.Проведен
	|							И ЕСТЬNULL(Состояния.ЕстьРасход, 0) > 0
	|							И ЕСТЬNULL(Состояния.ЕстьОстаток, 0) > 0
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.уатСостоянияВыполненияЗаказов.ЧастичноВыполнен)
	|					КОГДА втЗаказы.Проведен
	|								И ЕСТЬNULL(Состояния.ЕстьРасход, 0) > 0
	|								И Состояния.ЕстьОстаток ЕСТЬ NULL
	|							ИЛИ Состояния.ЕстьОстаток = 0
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.уатСостоянияВыполненияЗаказов.Выполнен)
	|					КОГДА втЗаказы.Проведен
	|						ТОГДА ЗНАЧЕНИЕ(Перечисление.уатСостоянияВыполненияЗаказов.Открыт)
	|					ИНАЧЕ ЗНАЧЕНИЕ(Перечисление.уатСостоянияВыполненияЗаказов.Новый)
	|				КОНЕЦ
	|		КОНЕЦ) КАК Состояние,
	|	СУММА(ВЫБОР
	|			КОГДА втЗаказы.Мультимодальный
	|					И НЕ втЗаказы.ЭтоЭтап
	|				ТОГДА ЕСТЬNULL(ТабСтатусовРодительскихЗаказов.ЕстьРасход, 0)
	|			ИНАЧЕ ЕСТЬNULL(Состояния.ЕстьРасход, 0)
	|		КОНЕЦ) КАК КоличествоВыполнено,
	|	СУММА(ВЫБОР
	|			КОГДА втЗаказы.Мультимодальный
	|					И НЕ втЗаказы.ЭтоЭтап
	|				ТОГДА ЕСТЬNULL(ТабСтатусовРодительскихЗаказов.ЕстьОстаток, 0) + ЕСТЬNULL(ТабСтатусовРодительскихЗаказов.ЕстьРасход, 0)
	|			ИНАЧЕ ЕСТЬNULL(Состояния.ЕстьОстаток, 0) + ЕСТЬNULL(Состояния.ЕстьРасход, 0)
	|		КОНЕЦ) КАК КоличествоВсего
	|ПОМЕСТИТЬ втРезультат
	|ИЗ
	|	втЗаказы КАК втЗаказы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ТабСтатусовРодительскихЗаказов КАК ТабСтатусовРодительскихЗаказов
	|		ПО втЗаказы.Ссылка = ТабСтатусовРодительскихЗаказов.ЗаказГрузоотправителя
	|		ЛЕВОЕ СОЕДИНЕНИЕ Состояния КАК Состояния
	|		ПО втЗаказы.Ссылка = Состояния.ЗаказГрузоотправителя
	|
	|СГРУППИРОВАТЬ ПО
	|	втЗаказы.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втРезультат.Заказ КАК Заказ,
	|	втРезультат.Состояние КАК Состояние,
	|	втРезультат.КоличествоВыполнено КАК КоличествоВыполнено,
	|	втРезультат.КоличествоВсего КАК КоличествоВсего,
	|	ВЫБОР
	|		КОГДА втРезультат.КоличествоВсего = 0
	|			ТОГДА 0
	|		ИНАЧЕ втРезультат.КоличествоВыполнено / втРезультат.КоличествоВсего * 100
	|	КОНЕЦ КАК ПроцентВыполнения
	|ИЗ
	|	втРезультат КАК втРезультат";
	
	Попытка
		
		Выборка = Запрос.Выполнить().Выбрать();
		
		Сч = 0;
		Пока Выборка.Следующий() Цикл 
			Сч = Сч + 1;
			
			НаборЗаписей = РегистрыСведений.уатТекущееСостояниеВыполненияЗаказов.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.Заказ.Установить(Выборка.Заказ); 
			НаборЗаписей.Прочитать(); 
			
			Если НаборЗаписей.Количество() > 0 Тогда 
				Запись = НаборЗаписей[0];
			Иначе
				Запись = НаборЗаписей.Добавить();
			КонецЕсли;
			
			Если ОтклоненныеЗаказы.Найти(Запись.Заказ) <> Неопределено Тогда
				Запись.Состояние = Перечисления.уатСостоянияВыполненияЗаказов.Отклонен;
			Иначе
				ЗаполнитьЗначенияСвойств(Запись, Выборка);
			КонецЕсли;
			НаборЗаписей.Записать();
			
			Если ШагВыводаПрогресса > 0 И Сч % ШагВыводаПрогресса = 0 Тогда
				ПроцентВыполнения = Окр(Сч / ВсегоДокументов * 100);
				ТекстНСТР = "Выполняется отложенное обновление состояний заказов на ТС (" + ВерсияКонфигурации + ")";
				ДлительныеОперации.СообщитьПрогресс(ПроцентВыполнения, ТекстНСТР);
			КонецЕсли;
		КонецЦикла;
	Исключение
		Информация = ИнформацияОбОшибке();
	КонецПопытки;
	
КонецПроцедуры

#КонецОбласти

#Область ОбновлениеВерсия_1_1_24_1

Процедура ОбработатьЗаполнениеНДСУпр_1_1_24_1Сервер(СтруктураПараметров, АдресХранилища) Экспорт
	Если уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП() Тогда
		ВерсияКонфигурации = "1.1.24.1";
	Иначе
		ВерсияКонфигурации = "2.2.24.1";
	КонецЕсли;
	
	ШаблонЗапрос = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	тблДокумента.Ссылка,
	|	тблДокумента.Дата
	|ИЗ
	|	Документ.%ИмяДокумента% КАК тблДокумента
	|ГДЕ
	|	тблДокумента.Проведен
	|	И НЕ тблДокумента.ПометкаУдаления
	|	И тблДокумента.Дата >= НАЧАЛОПЕРИОДА(&НачДата, ДЕНЬ)
	|	И (&КонДата = ДАТАВРЕМЯ(1, 1, 1)
	|			ИЛИ тблДокумента.Дата <= КОНЕЦПЕРИОДА(&КонДата, ДЕНЬ))";
	
	ТекстЗапроса = "";
	Для Сч = 0 По СтруктураПараметров.Документы.Количество()-1 Цикл
		ТекЗапрос = СтрЗаменить(ШаблонЗапрос, "%ИмяДокумента%", СтруктураПараметров.Документы[Сч]);
		
		Если Сч > 0 Тогда
			ТекЗапрос = СтрЗаменить(ТекЗапрос, "РАЗРЕШЕННЫЕ", "");
			ТекстЗапроса = ТекстЗапроса + "
				|ОБЪЕДИНИТЬ ВСЕ
				|";
		КонецЕсли;
		
		ТекстЗапроса = ТекстЗапроса + ТекЗапрос;
	КонецЦикла;
	
	Запрос = Новый Запрос(ТекстЗапроса);
	Запрос.УстановитьПараметр("НачДата", СтруктураПараметров.Период.ДатаНачала);
	Запрос.УстановитьПараметр("КонДата", СтруктураПараметров.Период.ДатаОкончания);
	
	тблДокументы = Запрос.Выполнить().Выгрузить();
	тблДокументы.Сортировать("Дата");
	
	ВсегоДокументов = тблДокументы.Количество();
	ШагВыводаПрогресса = Макс(Окр(ВсегоДокументов/10), 1);
	
	Для Сч = 0 По тблДокументы.Количество()-1 Цикл
		
		ДокОбъект = тблДокументы[Сч].Ссылка.ПолучитьОбъект();
		
		Попытка
			ДокОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
		КонецПопытки;
		
		Если ШагВыводаПрогресса > 0 И Сч%ШагВыводаПрогресса=0 Тогда
			ПроцентВыполнения = Окр(Сч/ВсегоДокументов*100);
			ТекстНСТР = "Выполняется перепроведение документов (" + ВерсияКонфигурации + ")";
			ДлительныеОперации.СообщитьПрогресс(ПроцентВыполнения, ТекстНСТР);
		КонецЕсли;
	КонецЦикла;
		
КонецПроцедуры

Процедура ОбработатьПлатежныйКалендарь_1_1_24_1Сервер(СтруктураПараметров, АдресХранилища) Экспорт
	
	Если уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП() Тогда
		ВерсияКонфигурации = "1.1.24.1";
	Иначе
		ВерсияКонфигурации = "2.2.24.1";
	КонецЕсли;
	
	// выбор записей РН уатПлатежныйКалендарь
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатПлатежныйКалендарьОбороты.Регистратор КАК Регистратор
	|ИЗ
	|	РегистрНакопления.уатПлатежныйКалендарь.Обороты(&НачДата, &КонДата, Регистратор, ) КАК уатПлатежныйКалендарьОбороты
	|ГДЕ
	|	(уатПлатежныйКалендарьОбороты.СуммаПриходОборот < 0
	|			ИЛИ уатПлатежныйКалендарьОбороты.СуммаПриходУпрОборот < 0)");
	Запрос.УстановитьПараметр("НачДата", СтруктураПараметров.Период.ДатаНачала);
	Запрос.УстановитьПараметр("КонДата", СтруктураПараметров.Период.ДатаОкончания);
	ВыборкаРегистраторы = Запрос.Выполнить().Выбрать();
	
	// выбор Заказов, по которым нет записей в РС уатТекущееСостояниеОплатыЗаказов
	ЗапросЗаказы = Новый Запрос(
	"ВЫБРАТЬ РАЗЛИЧНЫЕ
	|	уатЗаказГрузоотправителя.Ссылка КАК Ссылка
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	|ГДЕ
	|	уатЗаказГрузоотправителя.Проведен
	|	И (уатЗаказГрузоотправителя.Дата МЕЖДУ &НачДата И &КонДата)
	|	И (уатЗаказГрузоотправителя.ДоговорКонтрагента.ВедениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоСчетам)
	|	ИЛИ уатЗаказГрузоотправителя.ДоговорКонтрагента.ВедениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоНакладным)
	|	ИЛИ уатЗаказГрузоотправителя.ДоговорКонтрагента.ВедениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоЗаказамНаТС))");
	ЗапросЗаказы.УстановитьПараметр("НачДата", СтруктураПараметров.Период.ДатаНачала);
	ЗапросЗаказы.УстановитьПараметр("КонДата", КонецДня(СтруктураПараметров.Период.ДатаОкончания));
	мсвЗаказы = ЗапросЗаказы.Выполнить().Выгрузить().ВыгрузитьКолонку("Ссылка");
	
	// расчет общего количества регистраторов для вывода прогресса
	ВсегоДокументов = ВыборкаРегистраторы.Количество() + мсвЗаказы.Количество();
	ШагВыводаПрогресса = Макс(Окр(ВсегоДокументов/10), 1);
	Сч = 0;
	
	// заполнение СуммаРасход и СуммаРасходУпр в РН уатПлатежныйКалендарь
	НЗПлатежныйКалендарь = РегистрыНакопления.уатПлатежныйКалендарь.СоздатьНаборЗаписей();
	Пока ВыборкаРегистраторы.Следующий() Цикл
		Сч = Сч + 1;
		
		НЗПлатежныйКалендарь.Отбор.Регистратор.Установить(ВыборкаРегистраторы.Регистратор);
		НЗПлатежныйКалендарь.Прочитать();
		Для Каждого ТекЗапись Из НЗПлатежныйКалендарь Цикл
			Если ТекЗапись.СуммаПриход < 0 Тогда
				ТекЗапись.СуммаРасход = -ТекЗапись.СуммаПриход;
				ТекЗапись.СуммаПриход = 0;
			КонецЕсли;
			Если ТекЗапись.СуммаПриходУпр < 0 Тогда
				ТекЗапись.СуммаРасходУпр = -ТекЗапись.СуммаПриходУпр;
				ТекЗапись.СуммаПриходУпр = 0;
			КонецЕсли;
		КонецЦикла;
		
		ОбновлениеИнформационнойБазы.ЗаписатьНаборЗаписей(НЗПлатежныйКалендарь);
		
		Если ШагВыводаПрогресса > 0 И Сч%ШагВыводаПрогресса=0 Тогда
			ПроцентВыполнения = Окр(Сч/ВсегоДокументов*100);
			ТекстНСТР = "Выполняется отложенное обновление Платежного календаря (" + ВерсияКонфигурации + ")";
			ДлительныеОперации.СообщитьПрогресс(ПроцентВыполнения, ТекстНСТР);
		КонецЕсли;
	КонецЦикла;
	
	мсвСостояниеОплатыПоЗаказам = уатОбщегоНазначения_проф.СостояниеОплатыПоЗаказам(мсвЗаказы);
	Для Каждого СостояниеОплатыПоЗаказу Из мсвСостояниеОплатыПоЗаказам Цикл
		Сч = Сч + 1;
		
		НоваяЗапись = РегистрыСведений.уатТекущееСостояниеОплатыЗаказов.СоздатьМенеджерЗаписи();
		НоваяЗапись.ЗаказНаТС     = СостояниеОплатыПоЗаказу.ЗаказНаТС;
		НоваяЗапись.СуммаВсего    = СостояниеОплатыПоЗаказу.Сумма;
		НоваяЗапись.Оплачено      = СостояниеОплатыПоЗаказу.СуммаОплатыФакт;
		НоваяЗапись.ПроцентОплаты = СостояниеОплатыПоЗаказу.ПроцентОплатыФакт;
		Если СостояниеОплатыПоЗаказу.ПроцентОплатыФакт = 0 Тогда
			НоваяЗапись.Состояние = Перечисления.уатСостоянияВыполненияЗаказов.Новый;
		ИначеЕсли Окр(СостояниеОплатыПоЗаказу.ПроцентОплатыФакт) >= 100 Тогда
			НоваяЗапись.Состояние = Перечисления.уатСостоянияВыполненияЗаказов.Выполнен;
		Иначе
			НоваяЗапись.Состояние = Перечисления.уатСостоянияВыполненияЗаказов.ЧастичноВыполнен;
		КонецЕсли;
		НоваяЗапись.ПредоплатыНедостаточно = (СостояниеОплатыПоЗаказу.СуммаОплатыФакт < СостояниеОплатыПоЗаказу.СуммаПредоплаты);
		НоваяЗапись.ОплаченоПредставление = СтрШаблон("%1 (%2)",
			Формат(СостояниеОплатыПоЗаказу.СуммаОплатыФакт, "ЧДЦ=2; ЧН=0"),
			Формат(СостояниеОплатыПоЗаказу.ПроцентОплатыФакт, "ЧДЦ=0; ЧН=0") + "%");
		НоваяЗапись.Записать();
		
		Если ШагВыводаПрогресса > 0 И Сч%ШагВыводаПрогресса=0 Тогда
			ПроцентВыполнения = Окр(Сч/ВсегоДокументов*100);
			ТекстНСТР = "Выполняется отложенное обновление Платежного календаря (" + ВерсияКонфигурации + ")";
			ДлительныеОперации.СообщитьПрогресс(ПроцентВыполнения, ТекстНСТР);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#КонецЕсли

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// начало блока стандартных операций
	ДопПараметрыОткрытие = Новый Структура("ИмяФормы", ИмяФормы);
	уатЗащищенныеФункцииСервер.уатОбработкаФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	// конец блока стандартных операций	
	
	// Проверка физического лица
	Если уатОбщегоНазначения.ПроверкаВнешнегоПользователя() И ТипЗнч(ПользователиКлиентСервер.АвторизованныйПользователь().ОбъектАвторизации) = Тип("СправочникСсылка.ФизическиеЛица") Тогда
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	ВнешнийПеревозчик = РольДоступна("уатВнешнийПользовательПеревозчик");
	ВнешнийЗаказчик = РольДоступна("уатВнешнийПользовательЗаказчик");
	Если уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП() Тогда
		ВнешнийЗаказчикПотребность = РольДоступна("уатВнешнийПользовательПотребностьВПеревозке");
	Иначе
		ВнешнийЗаказчикПотребность = Ложь;
	КонецЕсли;
	ВнешнийЗаказчикЗаказНаТС = РольДоступна("уатВнешнийПользовательЗаказНаТС");
	ВнешнийРеспондент = РольДоступна("ДобавлениеИзменениеОтветовНаВопросыАнкет");
	
	Если ВнешнийЗаказчикПотребность И ВнешнийЗаказчикЗаказНаТС Тогда
		ВнешнийЗаказчик = Истина;
		ВнешнийЗаказчикПотребность = Ложь;
		ВнешнийЗаказчикЗаказНаТС = Ложь;
	КонецЕсли;
	
	Если ВнешнийЗаказчик Тогда
		ВнешнийЗаказчикПотребность = Ложь;
		ВнешнийЗаказчикЗаказНаТС = Ложь;
	КонецЕсли;
	
	Элементы.ГрафСхемаПеревозчикКОРП.Видимость = ВнешнийПеревозчик И уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП();
	Элементы.ГрафСхемаПеревозчикПРОФ.Видимость = ВнешнийПеревозчик И уатОбщегоНазначенияПовтИсп.ВариантПоставкиПРОФ();
	Элементы.ГрафСхемаСправочники.Видимость = ВнешнийПеревозчик;
	Элементы.ГрафСхемаЗакзчик.Видимость = ВнешнийЗаказчик;
	Элементы.ГрафСхемаЗакзчикЗаказНаТС.Видимость = ВнешнийЗаказчикЗаказНаТС;
	Элементы.ГрафСхемаЗакзчикПотребностьВПеревозке.Видимость = ВнешнийЗаказчикПотребность;
	Элементы.ГрафСхемаАнкетирование.Видимость = ВнешнийРеспондент;
	
	Если ВнешнийПеревозчик Тогда
		ИмяКлючевойОперации = "уатОперации.АвторизацияВнешнегоПеревозчика";
		ЦентрМониторинга.ЗаписатьОперациюБизнесСтатистики(ИмяКлючевойОперации, 1);
	КонецЕсли;
	
	Если ВнешнийЗаказчик Или ВнешнийЗаказчикПотребность Или ВнешнийЗаказчикЗаказНаТС Тогда
		ИмяКлючевойОперации = "уатОперации.АвторизацияВнешнегоЗаказчика";
		ЦентрМониторинга.ЗаписатьОперациюБизнесСтатистики(ИмяКлючевойОперации, 1);
	КонецЕсли;
	
	АвторизованныйКонтрагент = уатЗащищенныеФункцииСервер_проф.АвторизованныйКонтрагент();
	Если ЗначениеЗаполнено(АвторизованныйКонтрагент) Тогда
		ЭтотОбъект.Заголовок = СтрШаблон(НСтр("ru = 'Личный кабинет %1'"), АвторизованныйКонтрагент.Наименование);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// начало блока стандартных операций
	уатЗащищенныеФункцииКлиент.уатОбработкаФормаПриОткрытии(Отказ, ДопПараметрыОткрытие);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	// конец блока стандартных операций
	
	#Если ВебКлиент Тогда
		ЗаполнитьНаименованияГрафСхемыВебКлиент(ГрафСхемаЗакзчик);
		ЗаполнитьНаименованияГрафСхемыВебКлиент(ГрафСхемаПеревозчикКОРП);
		ЗаполнитьНаименованияГрафСхемыВебКлиент(ГрафСхемаПеревозчикПРОФ);
		ЗаполнитьНаименованияГрафСхемыВебКлиент(ГрафСхемаЗакзчикЗаказНаТС);
		ЗаполнитьНаименованияГрафСхемыВебКлиент(ГрафСхемаЗакзчикПотребностьВПеревозке);
		ЗаполнитьНаименованияГрафСхемыВебКлиент(ГрафСхемаОтчеты);
	#КонецЕсли
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ГрафическаяСхемаВыбор(Элемент)
	
	ТекЭлемент = Элемент.ТекущийЭлемент;
	Если ТекЭлемент = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекИмяФормы = ПроверитьСуществованиеЭлемента(ТекЭлемент.Имя);
	Если ТипЗнч(ТекИмяФормы) = Тип("Строка") И СтрНайти(ТекИмяФормы, "Отчет.") = 1 Тогда
		ИмяОтчета = СтрЗаменить(ТекЭлемент.Имя, "Отчет_", "");
		
		Период               = Новый СтандартныйПериод();
		Период.ДатаНачала    = НачалоГода(ТекущаяДата());
		Период.ДатаОкончания = КонецГода(ТекущаяДата());
		
		Если ИмяОтчета = "уатВедомостьВзаиморасчетыСКонтрагентами" Тогда
			ИмяСхемы = "СхемаКомпоновкиДанных";
			КлючВариантаОтчета = "Ведомость для внешнего пользователя";
		Иначе
			ИмяСхемы = "ОсновнаяСхемаКомпоновкиДанных";
			КлючВариантаОтчета = "Услуги для внешнего пользователя";
		КонецЕсли;
		
		ПараметрыОткрытия = ПолучитьПараметрыОткрытияОтчета(ИмяОтчета, ИмяСхемы, КлючВариантаОтчета, , , Период);
		
		Форма = ПолучитьФорму(ТекИмяФормы, ПараметрыОткрытия, ЭтотОбъект);
		
		// Ограничения доступа к отбору и настройкам отчета.
		//Форма.Элементы.КомпоновщикНастроекПользовательскиеНастройкиСтрока1Колонка2.Видимость = Ложь;
		//Форма.Элементы.КомпоновщикНастроекПользовательскиеНастройкиЭлемент2Значение.Видимость = Ложь;
		//Форма.Элементы.КомпоновщикНастроекПользовательскиеНастройкиЭлемент2Использование.Видимость = Ложь;
		//Если ИмяОтчета = "уатПредоставленныеИВыставленныеУслуги" Тогда
		//	Форма.Элементы.КомпоновщикНастроекПользовательскиеНастройкиЭлемент3Значение.Видимость = Ложь;
		//	Форма.Элементы.КомпоновщикНастроекПользовательскиеНастройкиЭлемент3Использование.Видимость = Ложь;
		//КонецЕсли;
		
		Форма.Элементы.ВсеНастройки.Видимость = Ложь;
		Форма.Элементы.ГруппаНастройкиОтчетаЕще.Видимость = Ложь;
		
		Форма.Открыть();
		
	ИначеЕсли ТипЗнч(ТекИмяФормы) = Тип("Строка") Тогда
		ОткрытьФорму(ТекИмяФормы,, ЭтотОбъект);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаСервере
Функция ПолучитьПараметрыОткрытияОтчета(Отчет, Схема, КлючВариантаОтчета, Контрагент = Неопределено, Организация = Неопределено, Период = Неопределено)
	
	СтруктураОтбора = Новый Структура;
	СхемаКомпоновкиДанных = Отчеты[Отчет].ПолучитьМакет(Схема);
	Контрагент = уатЗащищенныеФункцииСервер_проф.АвторизованныйКонтрагент();
	
	КомпоновщикНастроекКомпоновкиДанных = Новый КомпоновщикНастроекКомпоновкиДанных;
	КомпоновщикНастроекКомпоновкиДанных.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(СхемаКомпоновкиДанных));
	НастройкиКомпоновки = СхемаКомпоновкиДанных.НастройкиПоУмолчанию;
	Для Каждого ТекЭлем Из НастройкиКомпоновки.ПараметрыДанных.Элементы Цикл
		Если ЗначениеЗаполнено(Период) И Строка(ТекЭлем.Параметр) = "ПериодОтчета" Тогда
			ТекЭлем.Значение      = Период;
			ТекЭлем.Использование = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Если ЗначениеЗаполнено(Контрагент) Тогда
		СтруктураОтбора.Вставить("Контрагент", Контрагент);
	КонецЕсли;
	Если ЗначениеЗаполнено(Организация) Тогда
		СтруктураОтбора.Вставить("Организация", Организация);
	КонецЕсли;
	
	КомпоновщикНастроекКомпоновкиДанных.ЗагрузитьНастройки(НастройкиКомпоновки);
	
	сткПараметры = Новый Структура("СформироватьПриОткрытии, ВидимостьКомандВариантовОтчетов, КлючВарианта, ПользовательскиеНастройки, Отбор",
		Истина, Ложь, КлючВариантаОтчета, КомпоновщикНастроекКомпоновкиДанных.ПользовательскиеНастройки, СтруктураОтбора);
	
	Возврат сткПараметры;
КонецФункции

&НаСервере
Функция ПроверитьСуществованиеЭлемента(ИмяЭлем)
	Если СтрНайти(ИмяЭлем, "Отчет_") <> 0 Тогда
		мИмяЭлем = СтрЗаменить(ИмяЭлем, "Отчет_", "");
		Если Метаданные.Отчеты.Найти(мИмяЭлем) <> Неопределено Тогда
			Возврат "Отчет." +мИмяЭлем + ".Форма";
		КонецЕсли;
	ИначеЕсли Метаданные.Документы.Найти(ИмяЭлем) <> Неопределено Тогда
		Возврат "Документ." + ИмяЭлем + ".ФормаСписка";
	ИначеЕсли Метаданные.Справочники.Найти(ИмяЭлем) <> Неопределено Тогда
		Возврат "Справочник." + ИмяЭлем + ".ФормаСписка";
	ИначеЕсли Метаданные.Обработки.Найти(ИмяЭлем) <> Неопределено Тогда
		Возврат "Обработка." + ИмяЭлем + ".Форма";
	Иначе
		Число = Прав(ИмяЭлем, 1);
		Если КодСимвола(Число) >= 48 И КодСимвола(Число) <= 57 Тогда 
			ТекИмяФормы = ПроверитьСуществованиеЭлемента(Сред(ИмяЭлем,0,СтрДлина(ИмяЭлем) - 1));
			Возврат ТекИмяФормы;
		КонецЕсли;
		Возврат Ложь;
	КонецЕсли;
КонецФункции

&НаСервере
Процедура ЗаполнитьНаименованияГрафСхемыВебКлиент(Граф)
	СписокXDTO = СериализаторXDTO.ЗаписатьXDTO(Граф).ПолучитьСписок("item");
	Для Каждого ТекЭлемент Из СписокXDTO Цикл
		мЭлемент = Граф.ЭлементыГрафическойСхемы.Найти(ТекЭлемент.itemCode);
		Если мЭлемент <> Неопределено Тогда
			мНаименование = ТекЭлемент.itemTitle.item;
			enНаименование = "";
			ruНаименование = "";
			Наименование   = "";
			флагЯзык       = Ложь;
			Для Каждого ТекНаименование Из мНаименование Цикл
				Если ТекНаименование.lang = "en" Тогда
					enНаименование = ТекНаименование.content;
					lang = ТекНаименование.lang;
				ИначеЕсли ТекНаименование.lang = "ru" Тогда
					ruНаименование = ТекНаименование.content;
					lang = ТекНаименование.lang;
				ИначеЕсли ТекНаименование.lang = "#" Тогда
					Наименование = ТекНаименование.content;
					флагЯзык     = Истина;
				КонецЕсли;
			КонецЦикла;
			Если lang = "en" И флагЯзык Тогда
				ruНаименование = Наименование;
			ИначеЕсли lang = "ru" И флагЯзык Тогда
				enНаименование = Наименование;
			КонецЕсли;
			
			Если СтрНайти(ruНаименование, "'") <> 0 Тогда
				ruНаименование = СтрЗаменить(ruНаименование, "'", "''");
			КонецЕсли;
			
			Если СтрНайти(enНаименование, "'") <> 0 Тогда
				enНаименование = СтрЗаменить(enНаименование, "'", "''");
			КонецЕсли;
				
			мЭлемент.Наименование = Нстр(СтрШаблон("en = '%1'; ru = '%2'", enНаименование, ruНаименование));
			enПодсказка = "";
			ruПодсказка = "";
			Подсказка   = "";
			флагЯзык    = Ложь;
			мПодсказка = ТекЭлемент.tipText.item;
			Для Каждого ТекПодсказка Из мПодсказка Цикл
				Если ТекПодсказка.lang = "en" Тогда
					enПодсказка = ТекПодсказка.content;
					lang = ТекНаименование.lang;
				ИначеЕсли ТекПодсказка.lang = "ru" Тогда
					ruПодсказка = ТекПодсказка.content;
					lang = ТекНаименование.lang;
				ИначеЕсли ТекПодсказка.lang = "#" Тогда
					Подсказка = ТекПодсказка.content;
					флагЯзык  = Истина;
				КонецЕсли;
			КонецЦикла;
			Если lang = "en" И флагЯзык Тогда
				ruПодсказка = Подсказка;
			ИначеЕсли lang = "ru" И флагЯзык Тогда
				enПодсказка = Подсказка;
			КонецЕсли;

			Если СтрНайти(ruПодсказка, "'") <> 0 Тогда
				ruПодсказка = СтрЗаменить(ruПодсказка, "'", "''");
			КонецЕсли;
			
			Если СтрНайти(enПодсказка, "'") <> 0 Тогда
				enПодсказка = СтрЗаменить(enПодсказка, "'", "''");
			КонецЕсли;
			
			мЭлемент.Подсказка = Нстр(СтрШаблон("en = '%1'; ru = '%2'", enПодсказка, ruПодсказка));
		КонецЕсли;
	КонецЦикла;	
КонецПроцедуры

#КонецОбласти

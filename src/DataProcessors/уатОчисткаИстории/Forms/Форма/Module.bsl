
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// начало блока стандартных операций
	ДопПараметрыОткрытие = Новый Структура("ИмяФормы", ИмяФормы);
	уатЗащищенныеФункцииСервер.уатОбработкаФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	// конец блока стандартных операций
	
	Параметры.Свойство("флДополнительныеСведенияПоGPS", флДополнительныеСведенияПоGPS);
	Параметры.Свойство("флИсторияМестоположенияПоGPS",  флИсторияМестоположенияПоGPS);
	Параметры.Свойство("флКоординатыПоМониторингу",     флКоординатыПоМониторингу);
	Параметры.Свойство("флПробегРасходПоМониторингу",   флПробегРасходПоМониторингу);
	Параметры.Свойство("флИсторияОпозданий",            флИсторияОпозданий);
	
	Если Константы.уатИспользоватьМобильноеПриложениеВодителя.Получить() Тогда 
		ЗаполнитьНастройкиСохраненияИсторииМестоположения();
		
		Если РежимХраненияИсторииМестоположения = 0 Тогда 
			флИсторияМестоположенияПоGPS = Ложь;
			Элементы.флИсторияМестоположенияПоGPS.Видимость = Ложь;
		КонецЕсли;
	Иначе 
		флИсторияМестоположенияПоGPS = Ложь;
		Элементы.флИсторияМестоположенияПоGPS.Видимость = Ложь;
	КонецЕсли;
	
	Если Не Константы.уатИспользоватьМониторинг.Получить() Тогда 
		флДополнительныеСведенияПоGPS = Ложь;
		флКоординатыПоМониторингу = Ложь;
		флПробегРасходПоМониторингу = Ложь;
		
		Элементы.флДополнительныеСведенияПоGPS.Видимость = Ложь;
		Элементы.флКоординатыПоМониторингу.Видимость = Ложь;
		Элементы.флПробегРасходПоМониторингу.Видимость = Ложь;
	КонецЕсли;
	
	Если Не Константы.уатПрогнозированиеОпозданийПоМаршрутнымЛистам.Получить() Тогда
		флИсторияОпозданий = Ложь;
		Элементы.флИсторияОпозданий.Видимость = Ложь;
	КонецЕсли;
	
	Если Не ПравоДоступа("Изменение", Метаданные.РегистрыСведений.уатИсторияКоординатМП) Тогда 
		флИсторияМестоположенияПоGPS = Ложь;
		Элементы.флИсторияМестоположенияПоGPS.Видимость = Ложь;
	КонецЕсли;
	
	Если Не ПравоДоступа("Изменение", Метаданные.РегистрыСведений.уатДополнительныеСведенияПоGPS) Тогда 
		флДополнительныеСведенияПоGPS = Ложь;
		Элементы.флДополнительныеСведенияПоGPS.Видимость = Ложь;
	КонецЕсли;
	
	Если Не ПравоДоступа("Изменение", Метаданные.РегистрыСведений.уатКоординатыПоМониторингу) Тогда 
		флКоординатыПоМониторингу = Ложь;
		Элементы.флКоординатыПоМониторингу.Видимость = Ложь;
	КонецЕсли;
	
	Если Не ПравоДоступа("Изменение", Метаданные.РегистрыСведений.уатПробегРасходПоМониторингу) Тогда 
		флПробегРасходПоМониторингу = Ложь;
		Элементы.флПробегРасходПоМониторингу.Видимость = Ложь;
	КонецЕсли;
	
	Если Не ПравоДоступа("Изменение", Метаданные.РегистрыСведений.уатИсторияОпозданий) Тогда
		флИсторияОпозданий = Ложь;
		Элементы.флИсторияОпозданий.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// начало блока стандартных операций
	уатЗащищенныеФункцииКлиент.уатОбработкаФормаПриОткрытии(Отказ, ДопПараметрыОткрытие);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	// конец блока стандартных операций
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_ТаблТС

&НаКлиенте
Процедура ТаблТСОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Состояние(НСтр("ru = 'Добавлено ТС'") + " <" + Строка(ВыбранноеЗначение) + ">",,, БиблиотекаКартинок.Информация32);
	
	НайдСтроки = ТаблТС.НайтиСтроки(Новый Структура("Ссылка", ВыбранноеЗначение));
	Если НайдСтроки.Количество() = 0 Тогда 
		НовСтрока = ТаблТС.Добавить();
		НовСтрока.Ссылка = ВыбранноеЗначение;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ОчиститьИсторию(Команда)
	
	Если Не ЗначениеЗаполнено(ПериодПо) Тогда 
		ТекстОшибки = НСтр("en='It is necessary to specify expiry date of cleaning period.';ru='Необходимо указать дату окончания периода очистки.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "ПериодПо");
		Возврат;
	КонецЕсли;
	
	Если ПериодС > ПериодПо Тогда 
		ТекстОшибки = НСтр("en='Begin date of clean period cannot be greater than end date.';ru='Дата начала периода очистки не может быть больше даты окончания.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "ПериодС");
		Возврат;
	КонецЕсли;
	
	Если Не флДополнительныеСведенияПоGPS 
		И Не флИсторияМестоположенияПоGPS 
		И Не флКоординатыПоМониторингу 
		И Не флПробегРасходПоМониторингу 
		И Не флИсторияОпозданий Тогда 
		ТекстОшибки = НСтр("ru = 'Необходимо выбрать регистры для очистки'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	Если ТаблТС.Количество() Тогда 
		ТекстВопроса = НСтр("ru = 'Будут удалены данные по указанным ТС в выбранных регистрах за период. Операция может занять длительное время. Продолжить?'");
	Иначе 
		ТекстВопроса = НСтр("ru = 'Будут удалены все данные в выбранных регистрах за период. Операция может занять длительное время. Продолжить?'");
	КонецЕсли;
	
	ПоказатьВопрос(
		Новый ОписаниеОповещения("ОчиститьИсториюПослеОтвета", ЭтотОбъект),
		ТекстВопроса,
		РежимДиалогаВопрос.ДаНет,
		,
		,
		НСтр("ru='Очистка данных'")
	);
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаПериода(Команда)
	
	ДиалогПериода = Новый ДиалогРедактированияСтандартногоПериода();
	ДиалогПериода.Период.ДатаНачала = ПериодС;
	ДиалогПериода.Период.ДатаОкончания = ПериодПо;
	ДиалогПериода.Показать(Новый ОписаниеОповещения("НастройкаПериодаЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьТС(Команда)
	
	ПараметрыФормы = Новый Структура("ЗакрыватьПриВыборе", Ложь);
	
	ОткрытьФорму("Справочник.уатТС.ФормаВыбора", ПараметрыФормы, Элементы.ТаблТС,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВсемиТС(Команда)
	
	Если ТаблТС.Количество() Тогда 
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ЗаполнитьВсемиТСОчистка", ЭтотОбъект),
			НСтр("en='You want to clear the table before filling?';ru='Очистить таблицу перед заполнением?'"),
			РежимДиалогаВопрос.ДаНетОтмена
		);
		
	Иначе 
		ЗаполнитьВсемиТСЗавершение();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасширенноеЗаполнение(Команда)
	
	Если ТаблТС.Количество() Тогда 
		ПоказатьВопрос(
			Новый ОписаниеОповещения("РасширенноеЗаполнениеОчистка", ЭтотОбъект),
			НСтр("en='You want to clear the table before filling?';ru='Очистить таблицу перед заполнением?'"),
			РежимДиалогаВопрос.ДаНетОтмена
		);
		
	Иначе 
		РасширенноеЗаполнениеУстановитьОтбор();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТаблицуТС(Команда)
	
	Если ТаблТС.Количество() Тогда 
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ОчиститьТаблицуТСОчистка", ЭтотОбъект),
			НСтр("en='You want to clear the table?';ru='Очистить таблицу?'"),
			РежимДиалогаВопрос.ДаНет
		);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьНастройкиСохраненияИсторииМестоположения()
	
	стрНастройкиХраненияИсторииМестоположения = уатМобильноеПриложениеВодителяСерверПовтИсп.ПолучитьНастройкиХраненияИсторииМестоположения();
	
	РежимХраненияИсторииМестоположения   = стрНастройкиХраненияИсторииМестоположения.РежимСохранения;
	АдресСервераБазыМестоположения       = стрНастройкиХраненияИсторииМестоположения.АдресСервера;
	ИмяБазыМестоположения                = стрНастройкиХраненияИсторииМестоположения.ИмяБазы;
	ЛогинПользователяБазыМестоположения  = стрНастройкиХраненияИсторииМестоположения.Логин;
	ПарольПользователяБазыМестоположения = стрНастройкиХраненияИсторииМестоположения.Пароль;
	
КонецПроцедуры

&НаКлиенте
Процедура НастройкаПериодаЗавершение(Период, ДополнительныеПараметры) Экспорт
	
	Если Период = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ПериодС  = Период.ДатаНачала;
	ПериодПо = Период.ДатаОкончания;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьИсториюПослеОтвета(Результат, ДопПараметры) Экспорт
	
	Если Не Результат = КодВозвратаДиалога.Да Тогда 
		Возврат;
	КонецЕсли;
	
	Состояние(НСтр("ru='Очистка данных ...'"));
	
	мсвТС = Новый Массив();
	Для Каждого ТекСтрока Из ТаблТС Цикл 
		мсвТС.Добавить(ТекСтрока.Ссылка);
	КонецЦикла;
	
	РезультатУспешно = Истина;
	
	Если РезультатУспешно И флДополнительныеСведенияПоGPS Тогда 
		РезультатУспешно = ОчисткаДополнительныхСведенийПоGPS(ПериодС, ПериодПо, мсвТС);
	КонецЕсли;
	
	Если РезультатУспешно И флИсторияМестоположенияПоGPS Тогда 
		Если РежимХраненияИсторииМестоположения = 1 Тогда 
			РезультатУспешно = ОчисткаИсторииМестоположенияВоВнешнейБД(ПериодС, ПериодПо, мсвТС);
		Иначе 
			РезультатУспешно = ОчисткаИсторииМестоположенияВРегистре(ПериодС, ПериодПо, мсвТС);
		КонецЕсли;
	КонецЕсли;
	
	Если РезультатУспешно И флКоординатыПоМониторингу Тогда 
		РезультатУспешно = ОчисткаКоординатПоМониторингу(ПериодС, ПериодПо, мсвТС);
	КонецЕсли;
	
	Если РезультатУспешно И флПробегРасходПоМониторингу Тогда 
		РезультатУспешно = ОчисткаПробегаРасходаПоМониторингу(ПериодС, ПериодПо, мсвТС);
	КонецЕсли;
	
	Если РезультатУспешно И флИсторияОпозданий Тогда
		РезультатУспешно = ОчисткаИсторииОпозданий(ПериодС, ПериодПо, мсвТС);
	КонецЕсли;
	
	Если РезультатУспешно Тогда 
		ПоказатьПредупреждение(, НСтр("ru='Очистка данных выполнена успешно.'"));
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОчисткаИсторииМестоположенияВоВнешнейБД(Знач ДатаС, Знач ДатаПо, Знач МассивТС)
	
	ЗаписатьЛогВЖурналРегистрации(
		НСтр("ru = 'истории местоположения во внешней БД'"),
		ДатаС, 
		ДатаПо,
		МассивТС
	);
	
	Connection = Новый COMОбъект("ADODB.Connection");
	
	СтрокаПодключения = "Provider=SQLOLEDB.1;Password=" + ПарольПользователяБазыМестоположения 
		+ ";Persist Security Info=True;User ID=" + ЛогинПользователяБазыМестоположения 
		+ ";Initial Catalog=" + ИмяБазыМестоположения 
		+ ";Data Source=" + АдресСервераБазыМестоположения;
	
	Connection.ConnectionString = СтрокаПодключения;
	
	Попытка
		Connection.Open();
	Исключение
		ТекстОшибки = НСтр("en = 'Error opening connection to the external DB. ""Connection string:'; ru = 'Ошибка открытия подключения к внешней БД. ""Строка подключения:'") + " " + СтрокаПодключения + "." + Символы.ПС + 
		              НСтр("en = 'Error description:'; ru = 'Описание ошибки:'") + " " + ОписаниеОшибки();
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Возврат Ложь;
	КонецПопытки;
	
	Command = Новый COMОбъект("ADODB.Command");
	Command.ActiveConnection = Connection;
	Command.CommandType      = 1;
	Command.CommandTimeout   = 0;
	
	Если МассивТС.Количество() Тогда 
		Для Каждого ТекТС Из МассивТС Цикл 
			ТекстКоманды = "DELETE FROM dbo.GPSData WHERE Car = '" + ТекТС + "' AND DateTimeCoord BETWEEN '"
			               + Формат(ДатаС, "ДФ=yyyy-MM-ddTHH:mm:ss")+"' AND '"+Формат(ДатаПо, "ДФ='yyyy-MM-ddTHH:mm:ss'")+"'";
			
			Command.CommandText = ТекстКоманды;
			
			Попытка
				RecordSet = Command.Execute();
			Исключение
				Connection.Close();
				ТекстОшибки = НСтр("en = 'Error executing a query on an external database of the history of the location.""Command text:'; ru = 'Ошибка при выполнении запроса к внешней БД истории местоположения.""Текст команды:'") + " " + ТекстКоманды + "." + Символы.ПС +
				              НСтр("en = 'Error description:'; ru = 'Описание ошибки:'") + " " + ОписаниеОшибки();
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
				Возврат Ложь;
			КонецПопытки;
		КонецЦикла;
		
	Иначе 
		ТекстКоманды = "DELETE FROM dbo.GPSData WHERE DateTimeCoord BETWEEN '"
		               + Формат(ДатаС, "ДФ=yyyy-MM-ddTHH:mm:ss")+"' AND '"+Формат(ДатаПо, "ДФ='yyyy-MM-ddTHH:mm:ss'")+"'";
		
		Command.CommandText = ТекстКоманды;
		
		Попытка
			RecordSet = Command.Execute();
		Исключение
			Connection.Close();
			ТекстОшибки = НСтр("en = 'Error executing a query on an external database of the history of the location.""Command text:'; ru = 'Ошибка при выполнении запроса к внешней БД истории местоположения.""Текст команды:'") + " " + ТекстКоманды + "." + Символы.ПС +
			              НСтр("en = 'Error description:'; ru = 'Описание ошибки:'") + " " + ОписаниеОшибки();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			Возврат Ложь;
		КонецПопытки;
	КонецЕсли;
	
	Connection.Close();
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ОчисткаИсторииМестоположенияВРегистре(Знач ДатаС, Знач ДатаПо, Знач МассивТС)
	
	ЗаписатьЛогВЖурналРегистрации(
		НСтр("ru = 'истории местоположения в регистре'"),
		ДатаС, 
		ДатаПо,
		МассивТС
	);
	
	мЗапрос = Новый Запрос;
	мЗапрос.УстановитьПараметр("мсвТС",     МассивТС);
	мЗапрос.УстановитьПараметр("ОтборПоТС", МассивТС.Количество() <> 0);
	мЗапрос.УстановитьПараметр("ДатаС",     ДатаС);
	мЗапрос.УстановитьПараметр("ДатаПо",    ДатаПо);
	
	мЗапрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатИсторияКоординатМП.Дата КАК Дата,
	|	уатИсторияКоординатМП.Время КАК Время,
	|	уатИсторияКоординатМП.ТС КАК ТС
	|ИЗ
	|	РегистрСведений.уатИсторияКоординатМП КАК уатИсторияКоординатМП
	|ГДЕ
	|	ВЫБОР
	|			КОГДА &ОтборПоТС
	|				ТОГДА уатИсторияКоординатМП.ТС В (&мсвТС)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И уатИсторияКоординатМП.Дата МЕЖДУ &ДатаС И &ДатаПо";
	
	мВыборка = мЗапрос.Выполнить().Выбрать();
	
	ДатаНачалаОчистки  = Дата(Год(ДатаС), Месяц(ДатаС), День(ДатаС), 0, 0, 0);
	ВремяНачалаОчистки = Дата(1, 1, 1, Час(ДатаС), Минута(ДатаС), Секунда(ДатаС));
	
	ДатаОкончанияОчистки  = Дата(Год(ДатаПо), Месяц(ДатаПо), День(ДатаПо), 0, 0, 0);
	ВремяОкончанияОчистки = Дата(1, 1, 1, Час(ДатаПо), Минута(ДатаПо), Секунда(ДатаПо));
	
	Пока мВыборка.Следующий() Цикл 
		Если (мВыборка.Дата = ДатаНачалаОчистки И мВыборка.Время < ВремяНачалаОчистки)
				Или (мВыборка.Дата = ДатаОкончанияОчистки И мВыборка.Время > ВремяОкончанияОчистки) Тогда 
			Продолжить;
		КонецЕсли;
		
		НаборЗаписей = РегистрыСведений.уатИсторияКоординатМП.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Дата.Установить(мВыборка.Дата);
		НаборЗаписей.Отбор.Время.Установить(мВыборка.Время);
		НаборЗаписей.Отбор.ТС.Установить(мВыборка.ТС);
		
		Попытка
			НаборЗаписей.Записать(Истина);
		Исключение
			ТекстОшибки = НСтр("en='Error occurred while deleting vehicle location history.';ru='Возникла ошибка при удалении истории местоположения ТС.'") + Символы.ПС
				+ НСтр("en='Error description:';ru='Описание ошибки:'") + " " + ОписаниеОшибки();
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			Возврат Ложь;
		КонецПопытки;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаСервере
Функция ОчисткаПробегаРасходаПоМониторингу(Знач ДатаС, Знач ДатаПо, Знач МассивТС)
	
	ЗаписатьЛогВЖурналРегистрации(
		НСтр("ru = 'пробега и расхода по мониторингу'"),
		ДатаС, 
		ДатаПо,
		МассивТС
	);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДатаС",     ДатаС);
	Запрос.УстановитьПараметр("ДатаПо",    ДатаПо);
	Запрос.УстановитьПараметр("МассивТС",  МассивТС);
	Запрос.УстановитьПараметр("ОтборПоТС", МассивТС.Количество() <> 0);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатПробегРасходПоМониторингу.Период КАК Период,
	|	уатПробегРасходПоМониторингу.ТС КАК ТС
	|ИЗ
	|	РегистрСведений.уатПробегРасходПоМониторингу КАК уатПробегРасходПоМониторингу
	|ГДЕ
	|	уатПробегРасходПоМониторингу.Период МЕЖДУ &ДатаС И &ДатаПо
	|	И ВЫБОР
	|			КОГДА &ОтборПоТС
	|				ТОГДА уатПробегРасходПоМониторингу.ТС В (&МассивТС)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		НаборЗаписей = РегистрыСведений.уатПробегРасходПоМониторингу.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(Выборка.Период);
		НаборЗаписей.Отбор.ТС.Установить(Выборка.ТС);
		
		Попытка
			НаборЗаписей.Записать(Истина);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции // ОчисткаПробегаРасходаПоМониторингу()

&НаСервере
Функция ОчисткаДополнительныхСведенийПоGPS(Знач ДатаС, Знач ДатаПо, Знач МассивТС)
	
	ЗаписатьЛогВЖурналРегистрации(
		НСтр("ru='дополнительных сведений ТС по данным мониторинга'"),
		ДатаС, 
		ДатаПо,
		МассивТС
	);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДатаС",     ДатаС);
	Запрос.УстановитьПараметр("ДатаПо",    ДатаПо);
	Запрос.УстановитьПараметр("МассивТС",  МассивТС);
	Запрос.УстановитьПараметр("ОтборПоТС", МассивТС.Количество() <> 0);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатДополнительныеСведенияПоGPS.Период КАК Период,
	|	уатДополнительныеСведенияПоGPS.ТС КАК ТС,
	|	уатДополнительныеСведенияПоGPS.ТипСобытия КАК ТипСобытия
	|ИЗ
	|	РегистрСведений.уатДополнительныеСведенияПоGPS КАК уатДополнительныеСведенияПоGPS
	|ГДЕ
	|	уатДополнительныеСведенияПоGPS.Период МЕЖДУ &ДатаС И &ДатаПо
	|	И ВЫБОР
	|			КОГДА &ОтборПоТС
	|				ТОГДА уатДополнительныеСведенияПоGPS.ТС В (&МассивТС)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		НаборЗаписей = РегистрыСведений.уатДополнительныеСведенияПоGPS.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(Выборка.Период);
		НаборЗаписей.Отбор.ТС.Установить(Выборка.ТС);
		НаборЗаписей.Отбор.ТипСобытия.Установить(Выборка.ТипСобытия);
		
		Попытка
			НаборЗаписей.Записать(Истина);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции // ОчисткаДополнительныхСведенийПоGPS()

&НаСервере
Функция ОчисткаКоординатПоМониторингу(Знач ДатаС, Знач ДатаПо, Знач МассивТС)
	
	ЗаписатьЛогВЖурналРегистрации(
		НСтр("ru = 'координат по мониторингу'"),
		ДатаС, 
		ДатаПо,
		МассивТС
	);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДатаС",     ДатаС);
	Запрос.УстановитьПараметр("ДатаПо",    ДатаПо);
	Запрос.УстановитьПараметр("МассивТС",  МассивТС);
	Запрос.УстановитьПараметр("ОтборПоТС", МассивТС.Количество() <> 0);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатКоординатыПоМониторингу.Период КАК Период,
	|	уатКоординатыПоМониторингу.ТС КАК ТС
	|ИЗ
	|	РегистрСведений.уатКоординатыПоМониторингу КАК уатКоординатыПоМониторингу
	|ГДЕ
	|	уатКоординатыПоМониторингу.Период МЕЖДУ &ДатаС И &ДатаПо
	|	И ВЫБОР
	|			КОГДА &ОтборПоТС
	|				ТОГДА уатКоординатыПоМониторингу.ТС В (&МассивТС)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		НаборЗаписей = РегистрыСведений.уатКоординатыПоМониторингу.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(Выборка.Период);
		НаборЗаписей.Отбор.ТС.Установить(Выборка.ТС);
		
		Попытка
			НаборЗаписей.Записать(Истина);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции // ОчисткаКоординатПоМониторингу()

&НаСервере
Функция ОчисткаИсторииОпозданий(Знач ДатаС, Знач ДатаПо, Знач МассивТС)
	
	ЗаписатьЛогВЖурналРегистрации(
		НСтр("ru = 'истории прогнозов опозданий'"),
		ДатаС, 
		ДатаПо,
		МассивТС
	);
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("ДатаС",     ДатаС);
	Запрос.УстановитьПараметр("ДатаПо",    ДатаПо);
	Запрос.УстановитьПараметр("МассивТС",  МассивТС);
	Запрос.УстановитьПараметр("ОтборПоТС", МассивТС.Количество() <> 0);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатИсторияОпозданий.Период КАК Период,
	|	уатИсторияОпозданий.ТС КАК ТС
	|ИЗ
	|	РегистрСведений.уатИсторияОпозданий КАК уатИсторияОпозданий
	|ГДЕ
	|	уатИсторияОпозданий.Период МЕЖДУ &ДатаС И &ДатаПо
	|	И ВЫБОР
	|			КОГДА &ОтборПоТС
	|				ТОГДА уатИсторияОпозданий.ТС В (&МассивТС)
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		НаборЗаписей = РегистрыСведений.уатИсторияОпозданий.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Период.Установить(Выборка.Период);
		НаборЗаписей.Отбор.ТС.Установить(Выборка.ТС);
		
		Попытка
			НаборЗаписей.Записать(Истина);
		Исключение
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ОписаниеОшибки());
			Возврат Ложь;
		КонецПопытки;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

&НаКлиенте
Процедура ЗаполнитьВсемиТСОчистка(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда 
		ТаблТС.Очистить();
		ЗаполнитьВсемиТСЗавершение();
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда 
		ЗаполнитьВсемиТСЗавершение();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьВсемиТСЗавершение()
	
	Запрос = Новый Запрос();
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатТС.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.уатТС КАК уатТС
	|ГДЕ
	|	НЕ уатТС.ПометкаУдаления
	|	И НЕ уатТС.ЭтоГруппа";
	
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл 
		НовСтрока = ТаблТС.Добавить();
		НовСтрока.Ссылка = Выборка.Ссылка;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РасширенноеЗаполнениеОчистка(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда 
		ТаблТС.Очистить();
		РасширенноеЗаполнениеУстановитьОтбор();
	ИначеЕсли РезультатВопроса = КодВозвратаДиалога.Нет Тогда 
		РасширенноеЗаполнениеУстановитьОтбор();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РасширенноеЗаполнениеУстановитьОтбор()
	
	ОткрытьФорму(
		"ОбщаяФорма.уатФормаПодбораТС", 
		Новый Структура("ИсточникПодбора", "Обработка_уатОчисткаИстории"), 
		ЭтотОбъект,
		,
		,
		,
		Новый ОписаниеОповещения("РасширенноеЗаполнениеЗавершение", ЭтотОбъект),
		РежимОткрытияОкнаФормы.БлокироватьОкноВладельца
	);
	
КонецПроцедуры

&НаКлиенте
Процедура РасширенноеЗаполнениеЗавершение(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекТС Из РезультатЗакрытия Цикл 
		НовСтрока = ТаблТС.Добавить();
		НовСтрока.Ссылка = ТекТС;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьТаблицуТСОчистка(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда 
		ТаблТС.Очистить();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьЛогВЖурналРегистрации(Знач ИмяИсточникаДанных, Знач ДатаС, Знач ДатаПо, Знач МассивТС)
	
	Если МассивТС.Количество() = 0 Тогда 
		ПредставлениеТС = НСтр("ru = 'всем ТС'");
	Иначе 
		СтрокаТС = "";
		Для Каждого ТекТС Из МассивТС Цикл 
			СтрокаТС = СтрокаТС + ?(СтрокаТС = "", "", ", ") + Строка(ТекТС);
		КонецЦикла;
		ПредставлениеТС = НСтр("ru='ТС:';en='Vehicle:'") + " " + СтрокаТС;
	КонецЕсли;
	
	ТекстШаблона = НСтр("ru = 'Выполнена очистка'") + " %1 " + НСтр("ru = 'по'")
		+ " %2 " + НСтр("ru='за период с';en='for the period from'") + " %3 " + НСтр("ru = 'по'") + " %4";
	
	ТекстЛога = СтрШаблон(ТекстШаблона, ИмяИсточникаДанных, ПредставлениеТС, Строка(ДатаС), Строка(ДатаПо));
	
	ЗаписьЖурналаРегистрации(
		"Очистка истории",
		УровеньЖурналаРегистрации.Информация,
		Метаданные.Обработки.уатОчисткаИстории,
		,
		ТекстЛога
	);
	
КонецПроцедуры

#КонецОбласти

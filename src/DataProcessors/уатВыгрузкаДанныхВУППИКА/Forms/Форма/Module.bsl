#Область ОписаниеПеременных

&НаКлиенте
Перем мФормаВыбораФильтров;
&НаКлиенте
Перем мФормаПодбораЗначенийФильтра;
&НаКлиенте
Перем мТаблицаФильтры;
&НаКлиенте
Перем мСтруктураТиповФильтров;
&НаКлиенте
Перем мТипФильтраПоУмолчанию;

#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// начало блока стандартных операций
	ДопПараметрыОткрытие = Новый Структура("ИмяФормы", ИмяФормы);
	уатЗащищенныеФункцииСервер.уатОбработкаФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	// конец блока стандартных операций
	
	Если НЕ уатОбщегоНазначения.КонфигурацияДляРФ() Тогда
		ТекстСообщения = НСтр("en='Открытие возможно только тогда, когда включен признак использования конфигурации в РФ.';ru='Открытие возможно только тогда, когда включен признак использования конфигурации в РФ.'");
		уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстСообщения, Отказ);
	КонецЕсли;

	ЗагрузитьСтандартныеПравилаОбмена();
	ЗагрузитьПостроительОтборов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// начало блока стандартных операций
	уатЗащищенныеФункцииКлиент.уатОбработкаФормаПриОткрытии(Отказ, ДопПараметрыОткрытие);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	// конец блока стандартных операций
	
	#Если ВебКлиент Тогда
		Элементы.ФайлВыгрузки.Видимость = Ложь;
		Элементы.ЗагрузитьПравилаИзФайла.Видимость = Истина;
		Элементы.ПутьКФайлуПравил.Видимость = Ложь;
	#КонецЕсли
	
	ИнициироватьФлагиИнтерфейса();
	УстановитьДоступность();
	СформироватьСписокОрганизаций();
	УстановитьВидимостьРеквизитовВыбораПравил();
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ИспользуемыеПравилаПриИзменении(Элемент)
	
	УстановитьВидимостьРеквизитовВыбораПравил();
	
	Если ИспользуемыеПравила = 0 Тогда // стандартные
		ПутьКФайлуПравил = "";
		ЗагрузитьСтандартныеПравилаОбмена();
	Иначе // ИспользуемыеПравила = 1 - пользовательские
		ЗагрузитьПользовательскиеПравилаОбмена(Ложь);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуПравилНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	ДиалогВыбораФайла                = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Фильтр         = НСтр("en='Data file';ru='Файл данных'") + " (*.xml)|*.xml";
	ДиалогВыбораФайла.Заголовок      = НСтр("en='Выберите файл правил выгрузки';ru='Выберите файл правил выгрузки'");
	ДиалогВыбораФайла.Расширение     = "xml";
	ДиалогВыбораФайла.ПолноеИмяФайла = ПутьКФайлуПравил;
	
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("ПутьКФайлуПравилНачалоВыбораЗавершение", ЭтотОбъект, Новый Структура("ДиалогВыбораФайла", ДиалогВыбораФайла)));
	
КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуПравилНачалоВыбораЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
    
    ДиалогВыбораФайла = ДополнительныеПараметры.ДиалогВыбораФайла;
    
    
    Если (ВыбранныеФайлы <> Неопределено) Тогда
        ПутьКФайлуПравил = ДиалогВыбораФайла.ПолноеИмяФайла;
    КонецЕсли;
    
    ЗагрузитьПользовательскиеПравилаОбмена(Истина);

КонецПроцедуры

&НаКлиенте
Процедура ПутьКФайлуПравилОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	Если Не ПутьКФайлуПравил = "" Тогда 
		ЗапуститьПриложение(ПутьКФайлуПравил);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СелекторВыгрузкиЗаправокПриИзменении(Элемент)
	
	Если СелекторВыгрузкиЗаправок = 1 Тогда 
		Объект.ВыгружатьЗаправкиГСМВоВнутренниеПеремещения = Истина;
	Иначе 
		Объект.ВыгружатьЗаправкиГСМВоВнутренниеПеремещения = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СелекторВыгрузкиРасходаГСМПриИзменении(Элемент)
	
	Если СелекторВыгрузкиРасходаГСМ = 1 Тогда 
		флВыгружатьФактРасходГСМ = Истина;
	Иначе 
		флВыгружатьФактРасходГСМ = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СелекторВыгружатьФактРасходПоПЛПриИзменении(Элемент)
	
	Если СелекторВыгружатьФактРасходПоПЛ = 1 Тогда 
		флВыгружатьФактРасходПоПЛ = 1;
		флДетализироватьПоТСРасходГСМ = Ложь;
	Иначе 
		флВыгружатьФактРасходПоПЛ = 0;
	КонецЕсли;
	
	УстановитьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура СелекторВыгружатьФактРасходВСписаниеПриИзменении(Элемент)
	
	Если СелекторВыгружатьФактРасходВСписание = 1 Тогда 
		флВыгружатьФактРасходВСписание = 1;
	Иначе 
		флВыгружатьФактРасходВСписание = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СелекторВыгружатьРасходГСМНаДатуВыпискиПриИзменении(Элемент)
	
	Если СелекторВыгружатьРасходГСМНаДатуВыписки = 1 Тогда 
		флВыгружатьРасходГСМНаДатуВыписки = Истина;
	Иначе 
		флВыгружатьРасходГСМНаДатуВыписки = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПометкаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаПравилВыгрузки.ТекущиеДанные;
	ТекущиеДанные.Включить = ТекущиеДанные.Включить % 2;
	ПроставитьПометкиВниз(ТекущиеДанные);
	ПроставитьПометкиВверх(ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыТаблицаПравилВыгрузки

&НаКлиенте
Процедура ТаблицаПравилВыгрузкиПриАктивизацииСтроки(Элемент)
	
	ПодключитьОбработчикОжидания("ЗагрузитьУстановленныйОтборОбработчикОжидания", 0.1, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьУстановленныйОтборОбработчикОжидания()
	
	Если Элементы.ТаблицаПравилВыгрузки.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	ИДТекУзлаПВД = Элементы.ТаблицаПравилВыгрузки.ТекущиеДанные.ПолучитьИдентификатор();
	ЗагрузитьУстановленныйОтбор(ИДТекУзлаПВД);
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыКомпоновщикОтборов

&НаКлиенте
Процедура КомпоновщикОтборовНастройкиОтборПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	
	ИДТекУзлаПВД = Элементы.ТаблицаПравилВыгрузки.ТекущиеДанные.ПолучитьИдентификатор();
	СохранитьУстановленныйОтбор(ИДТекУзлаПВД);
	
КонецПроцедуры

&НаКлиенте
Процедура КомпоновщикОтборовНастройкиОтборПослеУдаления(Элемент)
	
	ИДТекУзлаПВД = Элементы.ТаблицаПравилВыгрузки.ТекущиеДанные.ПолучитьИдентификатор();
	СохранитьУстановленныйОтбор(ИДТекУзлаПВД);
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КнопкаНастройкаПериода(Команда)
	
	ПроизвольныйПериод               = Новый СтандартныйПериод;
	ПроизвольныйПериод.Вариант       = ВариантСтандартногоПериода.ПроизвольныйПериод;
	ПроизвольныйПериод.ДатаНачала    = Объект.ДатаНач;
	ПроизвольныйПериод.ДатаОкончания = Объект.ДатаКон;
	
	ДиалогВыбораПериода        = Новый ДиалогРедактированияСтандартногоПериода();
	ДиалогВыбораПериода.Период = ПроизвольныйПериод;
	
	ДиалогВыбораПериода.Показать(Новый ОписаниеОповещения("КнопкаНастройкаПериодаЗавершение", ЭтотОбъект));
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаНастройкаПериодаЗавершение(Период, ДополнительныеПараметры) Экспорт
	
	Если Не Период = Неопределено Тогда
		Объект.ДатаНач = Период.ДатаНачала;
		Объект.ДатаКон = Период.ДатаОкончания;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлВыгрузкиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ВыборФайла(Объект.ФайлВыгрузки);
	
КонецПроцедуры

&НаКлиенте
Процедура ФайлВыгрузкиОткрытие(Элемент, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ЗапуститьПриложение(Объект.ФайлВыгрузки);
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьВыгрузкуНаСервере()
	
	УникальныйИД                   = Новый УникальныйИдентификатор;
	ИмяВременногоФайлаПравилОбмена = КаталогВременныхФайлов() + УникальныйИД + ".xml";
	ИмяВременногоФайлаОбмена       = КаталогВременныхФайлов() + УникальныйИД + "_data.xml";
	
	Если ПустаяСтрока(АдресХранилищаФайлов) Тогда
		ИмяВременногоФайлаОбменаВеб = ПолучитьИмяВременногоФайла("xml");
		
		Попытка
			ФайлОбмена = Новый ТекстовыйДокумент;
			ФайлОбмена.Записать(ИмяВременногоФайлаОбменаВеб);
		Исключение
			ТекстНСТР = НСтр("en='Не удалось создать файл обмена в операционной системе';ru='Не удалось создать файл обмена в операционной системе'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
			Возврат;
		КонецПопытки;
		
		стрФайлы = Новый Структура();
		стрФайлы.Вставить("ФайлВыгрузки", Новый ДвоичныеДанные(ИмяВременногоФайлаОбменаВеб));
		//Если ИспользуемыеПравила = 1 Тогда 
		//	стрФайлы.Вставить("ФайлПравил", Новый ДвоичныеДанные(ПутьКФайлуПравил));
		//КонецЕсли;
		
		АдресХранилищаФайлов = ПоместитьВоВременноеХранилище(стрФайлы, УникальныйИдентификатор);
	КонецЕсли;
	
	ДанныеХранилища = ПолучитьИзВременногоХранилища(АдресХранилищаФайлов);
	ДанныеХранилища.ФайлВыгрузки.Записать(ИмяВременногоФайлаОбмена);
	
	Если ИспользуемыеПравила = 0 Тогда 
		ОбработкаОбъект   = РеквизитФормыВЗначение("Объект");
		МакетПравилОбмена = ОбработкаОбъект.ПолучитьМакет("ПравилаОбменаТекст");
		
		МакетПравилОбмена.Записать(ИмяВременногоФайлаПравилОбмена);
		
		ТекстПравилОбмена = МакетПравилОбмена.ПолучитьТекст();
		
	Иначе 
		Если ПустаяСтрока(АдресХранилищаФайлаПравил) Тогда
			ДанныеХранилища.ФайлПравил.Записать(ИмяВременногоФайлаПравилОбмена);
			ЧтениеТекста = Новый ЧтениеТекста(ИмяВременногоФайлаПравилОбмена);
			ТекстПравилОбмена = ЧтениеТекста.Прочитать();
			ЧтениеТекста.Закрыть();
		Иначе
			ДанныеФайлаПравил = ПолучитьИзВременногоХранилища(АдресХранилищаФайлаПравил);
			ВремФайлПравил = ПолучитьИмяВременногоФайла("xml");
			ДанныеФайлаПравил.Записать(ВремФайлПравил);
			ТекстДок = Новый ТекстовыйДокумент;
			ТекстДок.Прочитать(ВремФайлПравил);
			ТекстПравилОбмена = ТекстДок.ПолучитьТекст();
			УдалитьФайлы(ВремФайлПравил);
		КонецЕсли;
	КонецЕсли;
	
	УниверсальнаяВыгрузка = Обработки.УниверсальныйОбменДаннымиXML.Создать();
	УниверсальнаяВыгрузка.ЗагрузитьПравилаОбмена(ТекстПравилОбмена, "Строка");
	УниверсальнаяВыгрузка.ИмяФайлаПравилОбмена = ИмяВременногоФайлаПравилОбмена;
	УниверсальнаяВыгрузка.ИмяФайлаОбмена = ИмяВременногоФайлаОбмена;
	
	УниверсальнаяВыгрузка.ДатаНачала    = НачалоДня(Объект.ДатаНач);
	УниверсальнаяВыгрузка.ДатаОкончания = ?(уатОбщегоНазначения.уатЗначениеНеЗаполнено(Объект.ДатаКон),
	                                        Объект.ДатаКон, КонецДня(Объект.ДатаКон));
	УниверсальнаяВыгрузка.РежимОбмена = "Выгрузка";
	УниверсальнаяВыгрузка.ВыводВОкноСообщенийИнформационныхСообщений = Объект.ФлагКомментироватьОбработкуОбъектов;
	
	СписокОрганизаций = Новый СписокЗначений;
	Для Каждого ТекОрганизация Из ОтборОрганизации Цикл 
		Если ТекОрганизация.Пометка Тогда 
			СписокОрганизаций.Добавить(ТекОрганизация.Значение);
		КонецЕсли;
	КонецЦикла;
	
	УниверсальнаяВыгрузка.Параметры.Вставить("НеЗамещатьДокументыПриЗагрузке", 
	                                         Объект.НеЗамещатьДокументыПриЗагрузке);
	УниверсальнаяВыгрузка.Параметры.Вставить("НеЗамещатьСправочникиПриЗагрузке", 
	                                         Объект.НеЗамещатьСправочникиПриЗагрузке);
	УниверсальнаяВыгрузка.Параметры.Вставить("ВыгружатьЗаправкиГСМВоВнутренниеПеремещения", 
	                                         Объект.ВыгружатьЗаправкиГСМВоВнутренниеПеремещения);
	УниверсальнаяВыгрузка.Параметры.Вставить("ПриВыгрузкеТТДВыводитьПЛ", 
	                                         флПриВыгрузкеТТДДобавлятьДанныеПЛ);
	УниверсальнаяВыгрузка.Параметры.Вставить("ВыгружатьПомеченныеНаУдалениеДокументы", 
	                                         Объект.ВыгружатьПомеченныеНаУдалениеДокументы);
	УниверсальнаяВыгрузка.Параметры.Вставить("ВыгружатьФактРасходВСписание", 
	                                         Булево(флВыгружатьФактРасходВСписание));
	УниверсальнаяВыгрузка.Параметры.Вставить("ВыгружатьФактРасходПоПЛ", 
	                                         Булево(флВыгружатьФактРасходПоПЛ));
	УниверсальнаяВыгрузка.Параметры.Вставить("СкладДляФактРасхода", 
	                                         СкладДляФактРасходаГСМ);
	УниверсальнаяВыгрузка.Параметры.Вставить("ПриВыгрузкеРасходаГСМПоПЛВыгружатьНаДатуВыписки", 
	                                         флВыгружатьРасходГСМНаДатуВыписки);
	УниверсальнаяВыгрузка.Параметры.Вставить("ПриВыгрузкеРасходаГСМЗаПериодДетализироватьПоТС", 
	                                         флДетализироватьПоТСРасходГСМ);
	УниверсальнаяВыгрузка.Параметры.Вставить("ВыгружатьФактическийРасходГСМ", 
	                                         флВыгружатьФактРасходГСМ);
	УниверсальнаяВыгрузка.Параметры.Вставить("СписокОрганизацийДляОтбора", 
	                                         СписокОрганизаций); 
	УниверсальнаяВыгрузка.Параметры.Вставить("АгрегацияПриВыгрузкеВыработкиОС", 
	                                         ?(флВыгрузкаВыработкиОС=1, Истина, Ложь)); 
	УниверсальнаяВыгрузка.Параметры.Вставить("ОтборПоПараметрамВыработки", 
	                                         ?(флОтборПоПараметрамВыработки=1, Истина, Ложь)); 
	УниверсальнаяВыгрузка.Параметры.Вставить("СписокПараметровВыработкиДляОтбора", 
	                                         СписокПараметровВыработки.ВыгрузитьЗначения()); 
	
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		УниверсальнаяВыгрузка.Параметры.Вставить("Склад", Объект.Склад); 
	КонецЕсли;
	 
	НайдСтрока = УниверсальнаяВыгрузка.ТаблицаНастройкиПараметров.Найти("НеЗамещатьДокументыПриЗагрузке","Имя");
	Если Не НайдСтрока = Неопределено Тогда 
		НайдСтрока.Значение = Объект.НеЗамещатьДокументыПриЗагрузке;
	КонецЕсли;
	НайдСтрока = УниверсальнаяВыгрузка.ТаблицаНастройкиПараметров.Найти("НеЗамещатьСправочникиПриЗагрузке","Имя");
	Если Не НайдСтрока = Неопределено Тогда 
		НайдСтрока.Значение = Объект.НеЗамещатьСправочникиПриЗагрузке;
	КонецЕсли;
	НайдСтрока = УниверсальнаяВыгрузка.ТаблицаНастройкиПараметров.Найти("ВыгружатьЗаправкиГСМВоВнутренниеПеремещения","Имя");
	Если Не НайдСтрока = Неопределено Тогда 
		НайдСтрока.Значение = Объект.ВыгружатьЗаправкиГСМВоВнутренниеПеремещения;
	КонецЕсли;
	НайдСтрока = УниверсальнаяВыгрузка.ТаблицаНастройкиПараметров.Найти("ПриВыгрузкеТТДВыводитьПЛ","Имя");
	Если Не НайдСтрока = Неопределено Тогда 
		НайдСтрока.Значение = флПриВыгрузкеТТДДобавлятьДанныеПЛ;
	КонецЕсли;
	НайдСтрока = УниверсальнаяВыгрузка.ТаблицаНастройкиПараметров.Найти("ВыгружатьПомеченныеНаУдалениеДокументы","Имя");
	Если Не НайдСтрока = Неопределено Тогда 
		НайдСтрока.Значение = Объект.ВыгружатьПомеченныеНаУдалениеДокументы;
	КонецЕсли;
	НайдСтрока = УниверсальнаяВыгрузка.ТаблицаНастройкиПараметров.Найти("ВыгружатьФактРасходВСписание","Имя");
	Если Не НайдСтрока = Неопределено Тогда 
		НайдСтрока.Значение = Булево(флВыгружатьФактРасходВСписание);
	КонецЕсли;
	НайдСтрока = УниверсальнаяВыгрузка.ТаблицаНастройкиПараметров.Найти("ВыгружатьФактРасходПоПЛ","Имя");
	Если Не НайдСтрока = Неопределено Тогда 
		НайдСтрока.Значение = Булево(флВыгружатьФактРасходПоПЛ);
	КонецЕсли;
	НайдСтрока = УниверсальнаяВыгрузка.ТаблицаНастройкиПараметров.Найти("СкладДляФактРасхода","Имя");
	Если Не НайдСтрока = Неопределено Тогда 
		НайдСтрока.Значение = СкладДляФактРасходаГСМ;
	КонецЕсли;
	НайдСтрока = УниверсальнаяВыгрузка.ТаблицаНастройкиПараметров.Найти("ПриВыгрузкеРасходаГСМПоПЛВыгружатьНаДатуВыписки","Имя");
	Если Не НайдСтрока = Неопределено Тогда 
		НайдСтрока.Значение = флВыгружатьРасходГСМНаДатуВыписки;
	КонецЕсли;
	НайдСтрока = УниверсальнаяВыгрузка.ТаблицаНастройкиПараметров.Найти("ПриВыгрузкеРасходаГСМЗаПериодДетализироватьПоТС","Имя");
	Если Не НайдСтрока = Неопределено Тогда 
		НайдСтрока.Значение = флДетализироватьПоТСРасходГСМ;
	КонецЕсли;
	НайдСтрока = УниверсальнаяВыгрузка.ТаблицаНастройкиПараметров.Найти("ВыгружатьФактическийРасходГСМ","Имя");
	Если Не НайдСтрока = Неопределено Тогда 
		НайдСтрока.Значение = флВыгружатьФактРасходГСМ;
	КонецЕсли;
	НайдСтрока = УниверсальнаяВыгрузка.ТаблицаНастройкиПараметров.Найти("СписокОрганизацийДляОтбора","Имя");
	Если Не НайдСтрока = Неопределено Тогда 
		НайдСтрока.Значение = СписокОрганизаций;
	КонецЕсли;
	
	НайдСтрока = УниверсальнаяВыгрузка.ТаблицаНастройкиПараметров.Найти("АгрегацияПриВыгрузкеВыработкиОС","Имя");
	Если Не НайдСтрока = Неопределено Тогда 
		НайдСтрока.Значение = ?(флВыгрузкаВыработкиОС=1, Истина, Ложь);
	КонецЕсли;
	НайдСтрока = УниверсальнаяВыгрузка.ТаблицаНастройкиПараметров.Найти("ОтборПоПараметрамВыработки","Имя");
	Если Не НайдСтрока = Неопределено Тогда 
		НайдСтрока.Значение = ?(флОтборПоПараметрамВыработки=1, Истина, Ложь);
	КонецЕсли;
	НайдСтрока = УниверсальнаяВыгрузка.ТаблицаНастройкиПараметров.Найти("СписокПараметровВыработкиДляОтбора","Имя");
	Если Не НайдСтрока = Неопределено Тогда 
		НайдСтрока.Значение = СписокПараметровВыработки.ВыгрузитьЗначения();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Объект.Склад) Тогда
		НайдСтрока = УниверсальнаяВыгрузка.ТаблицаНастройкиПараметров.Найти("Склад","Имя");
		Если Не НайдСтрока = Неопределено Тогда 
			НайдСтрока.Значение = Объект.Склад;
		КонецЕсли;
	КонецЕсли;
	
	ТаблицаПравил = ДанныеФормыВЗначение(Объект.ТаблицаПравилВыгрузки, Тип("ДеревоЗначений"));
	
	ТаблицаПравилВыгрузкиКлиент = ТаблицаПравил;
	ТаблицаПравилВыгрузкиСервер = УниверсальнаяВыгрузка.ТаблицаПравилВыгрузки;
	
	УстановитьЗначениеСтрокиДереваПравил(ТаблицаПравилВыгрузкиКлиент.Строки, ТаблицаПравилВыгрузкиСервер);
	
	// Выгружаем данные
	УниверсальнаяВыгрузка.ВыполнитьВыгрузку();
	
	АдресХранилищаФайлов = ПоместитьВоВременноеХранилище(Новый Структура("ФайлВыгрузки", 
		Новый ДвоичныеДанные(ИмяВременногоФайлаОбмена)), УникальныйИдентификатор);
		
	АдресХранилищаФайлаВыгрузки = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяВременногоФайлаОбмена), УникальныйИдентификатор);
		
	Попытка
		УдалитьФайлы(ИмяВременногоФайлаОбмена);  // Удаляем временный файл обмена
	Исключение КонецПопытки;
	
	Попытка
		УдалитьФайлы(ИмяВременногоФайлаПравилОбмена);  // Удаляем временный файл обмена
	Исключение КонецПопытки;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьЗначениеСтрокиДереваПравил(СтрокиДерева, ТаблицаПравилВыгрузки, Включить = Неопределено)
	
	Для Каждого СтрокаДерева ИЗ СтрокиДерева Цикл
		ИмяПравила = СтрокаДерева.Имя;
		Если ЗначениеЗаполнено(ИмяПравила) Тогда
			ПараметрыОтбора = Новый Структура("Имя", ИмяПравила);
			РедактируемыеСтроки = ТаблицаПравилВыгрузки.Строки.НайтиСтроки(ПараметрыОтбора, Истина);
			Для Каждого РедактируемаяСтрока ИЗ РедактируемыеСтроки Цикл
				Если РедактируемаяСтрока <> Неопределено Тогда
					РедактируемаяСтрока.Включить = ?(Включить = Неопределено, СтрокаДерева.Включить, Включить);
					ЗаполнитьОтборПостроителяПриВыгрузке(СтрокаДерева, РедактируемаяСтрока);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если СтрокаДерева.Строки.Количество() <> 0 Тогда
			УстановитьЗначениеСтрокиДереваПравил(СтрокаДерева.Строки, ТаблицаПравилВыгрузки, Включить);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура флОтборПоПараметрамВыработкиПриИзменении(Элемент)
	
	Если флОтборПоПараметрамВыработки = 1 Тогда 
		УстановитьДоступность();
	Иначе 
		СписокПараметровВыработки.Очистить();
		УстановитьДоступность();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПравилаИзФайла(Команда)
	ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьПравилаИзФайлаЗавершение", ЭтотОбъект);
	НачатьПомещениеФайла(ОписаниеОповещения, АдресХранилищаФайлаПравил, НСтр("en='Exchange rule file';ru='Файл правил обмена'"),, УникальныйИдентификатор);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПравилаИзФайлаЗавершение(Результат, Адрес, ВыбранноеИмяФайла, ДополнительныеПараметры) Экспорт
	Если Результат Тогда
		АдресХранилищаФайлаПравил = Адрес;
		ЗагрузитьПользовательскиеПравилаОбменаНаСервере("");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьВыгрузку(Команда)
	
	#Если НЕ ВебКлиент Тогда
		Если ПустаяСтрока(Объект.ФайлВыгрузки) Тогда
			ТекстНСТР = НСтр("en='Не указано имя файла данных.';ru='Не указано имя файла данных.'");
			ПоказатьПредупреждение(Неопределено, ТекстНСТР);
			Возврат;
		КонецЕсли;
		
		ФайлОбмена = Новый Файл(Объект.ФайлВыгрузки);
		ФайлОбмена.НачатьПроверкуСуществования(Новый ОписаниеОповещения("ВыполнитьВыгрузкуЗавершение", ЭтотОбъект, Новый Структура("ФайлОбмена", ФайлОбмена)));
	#Иначе
		ВыполнитьВыгрузкуЗавершениеФрагмент();
	#КонецЕсли
	
	ИмяКлючевойОперации = "уатОперации.ВыгрузкаДанныхКД2";
	ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики(ИмяКлючевойОперации, 1);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьВыгрузкуЗавершение(Существует, ДополнительныеПараметры) Экспорт
	
	ФайлОбмена = ДополнительныеПараметры.ФайлОбмена;
	
	
	Если Не Существует Тогда 
		ФайлОбмена = Новый ТекстовыйДокумент;
		Попытка
			ФайлОбмена.Записать(Объект.ФайлВыгрузки);
		Исключение
			ТекстНСТР = НСтр("en='Не удалось создать файл обмена в операционной системе';ru='Не удалось создать файл обмена в операционной системе'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
			Возврат;
		КонецПопытки;
	КонецЕсли;
	
	Если ИспользуемыеПравила = 1 Тогда 
		Если ПустаяСтрока(ПутьКФайлуПравил) Тогда
			ТекстОшибки = НСтр("en='Необходимо указать файл пользовательских правил выгрузки.';ru='Необходимо указать файл пользовательских правил выгрузки.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,"ПутьКФайлуПравил");
			Возврат;
		КонецЕсли;
		
		ФайлПравил = Новый Файл(ПутьКФайлуПравил);
		ФайлПравил.НачатьПроверкуСуществования(Новый ОписаниеОповещения("ВыполнитьВыгрузкуЗавершениеСуществуютПравила", ЭтотОбъект));
		Возврат;
	КонецЕсли;
	
	ВыполнитьВыгрузкуЗавершениеФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьВыгрузкуЗавершениеСуществуютПравила(Существует1, ДополнительныеПараметры1) Экспорт
	
	Если Не Существует1 Тогда 
		ТекстОшибки = НСтр("en='The specified file does not exist.';ru='Указанный файл не существует.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,"ПутьКФайлуПравил");
		Возврат;
	КонецЕсли;
	
	ВыполнитьВыгрузкуЗавершениеФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьВыгрузкуЗавершениеФрагмент()
    
	Перем ДанныеХранилища, стрФайлы;
	
	#Если НЕ ВебКлиент Тогда
		стрФайлы = Новый Структура();
		стрФайлы.Вставить("ФайлВыгрузки", Новый ДвоичныеДанные(Объект.ФайлВыгрузки));
		Если ИспользуемыеПравила = 1 Тогда 
			стрФайлы.Вставить("ФайлПравил", Новый ДвоичныеДанные(ПутьКФайлуПравил));
		КонецЕсли;
		
		АдресХранилищаФайлов = ПоместитьВоВременноеХранилище(стрФайлы, УникальныйИдентификатор);
	#КонецЕсли
	
	ВыполнитьВыгрузкуНаСервере();
	
	#Если НЕ ВебКлиент Тогда 
		ДанныеХранилища = ПолучитьИзВременногоХранилища(АдресХранилищаФайлов);
		ДанныеХранилища.ФайлВыгрузки.Записать(Объект.ФайлВыгрузки);
		УдалитьИзВременногоХранилища(АдресХранилищаФайлов);
	#Иначе
		ТекстНСТР = НСтр("en='Выгрузка УАТ в УПП(КА)';ru='Выгрузка УАТ в УПП(КА)'") + ".xml";
		ПолучитьФайл(АдресХранилищаФайлаВыгрузки, ТекстНСТР);
		//УдалитьИзВременногоХранилища(АдресХранилищаФайлаВыгрузки);
	#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура КнопкаУстановитьФлажки(Команда)
	
	СнятьУстановитьВсеФлажки(1);
	Коллекция = Объект.ТаблицаПравилВыгрузки.ПолучитьЭлементы();
	РазвернутьСвернутьВетки(Коллекция, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура КнопкаСнятьФлажки(Команда)
	
	СнятьУстановитьВсеФлажки(0);
	Коллекция = Объект.ТаблицаПравилВыгрузки.ПолучитьЭлементы();
	РазвернутьСвернутьВетки(Коллекция, Истина);
	
КонецПроцедуры

&НаКлиенте
Процедура ПроставитьПометкиВниз(ТекущиеДанные)
	Потомки = ТекущиеДанные.ПолучитьЭлементы();
	Значение = ТекущиеДанные.Включить;
	Для Каждого Потомок Из Потомки Цикл
		Потомок.Включить = Значение;
		ПроставитьПометкиВниз(Потомок);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПроставитьПометкиВверх(ТекущиеДанные)
	Родитель = ТекущиеДанные.ПолучитьРодителя();
	Если Родитель <> Неопределено Тогда
		ВсеИстина = Истина;
		НеВсеЛожь = Ложь;
		Потомки = Родитель.ПолучитьЭлементы();
		Для Каждого Потомок Из Потомки Цикл
			ВсеИстина = ВсеИстина И (Потомок.Включить = 1);
			НеВсеЛожь = НеВсеЛожь Или Булево(Потомок.Включить);
		КонецЦикла;
		Если ВсеИстина Тогда
			Родитель.Включить = 1;
		ИначеЕсли НеВсеЛожь Тогда
			Родитель.Включить = 2;
		Иначе
			Родитель.Включить = 0;
		КонецЕсли;
		ПроставитьПометкиВверх(Родитель);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОтметитьВсеОрганизации(Команда)
	Для Каждого ТекЭлемент Из ОтборОрганизации Цикл 
		ТекЭлемент.Пометка = Истина;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СнятьОтметкуВсеОрганизации(Команда)
	Для Каждого ТекЭлемент Из ОтборОрганизации Цикл 
		ТекЭлемент.Пометка = Ложь;
	КонецЦикла;
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

// Вызывает диалог выбора файла для выбора файла данных
//
&НаКлиенте
Процедура ВыборФайла(Элемент, ПроверятьСуществование=Ложь)
	
	ДиалогВыбораФайла                               =   Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	
	ДиалогВыбораФайла.Фильтр                        =    НСтр("en='Data file';ru='Файл данных'") + " (*.xml)|*.xml";
	ДиалогВыбораФайла.Заголовок                     =   НСтр("en='Select file';ru='Выберите файл'");
	ДиалогВыбораФайла.ПредварительныйПросмотр       =   Ложь;
	ДиалогВыбораФайла.Расширение                    =   "xml";
	ДиалогВыбораФайла.ИндексФильтра                 =   0;
	ДиалогВыбораФайла.ПолноеИмяФайла                =   Элемент;
	ДиалогВыбораФайла.ПроверятьСуществованиеФайла   =   ПроверятьСуществование;
	
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("ВыборФайлаЗавершение", ЭтотОбъект, Новый Структура("ДиалогВыбораФайла", ДиалогВыбораФайла)));
	
КонецПроцедуры

&НаКлиенте
Процедура ВыборФайлаЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
    
    ДиалогВыбораФайла = ДополнительныеПараметры.ДиалогВыбораФайла;
    
    
    Если (ВыбранныеФайлы <> Неопределено) Тогда
        Объект.ФайлВыгрузки = ДиалогВыбораФайла.ПолноеИмяФайла;
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ИнициироватьФлагиИнтерфейса()

	Если флВыгружатьРасходГСМНаДатуВыписки Тогда 
		СелекторВыгружатьРасходГСМНаДатуВыписки = 1;
	Иначе 
		СелекторВыгружатьРасходГСМНаДатуВыписки = 2;
	КонецЕсли;
	
	Если флВыгружатьФактРасходВСписание = 1 Тогда 
		СелекторВыгружатьФактРасходВСписание = 1;
	Иначе 
		СелекторВыгружатьФактРасходВСписание = 2;
	КонецЕсли;
	
	Если флВыгружатьФактРасходПоПЛ = 1 Тогда 
		СелекторВыгружатьФактРасходПоПЛ = 1;
		флДетализироватьПоТСРасходГСМ = Ложь;
	Иначе 
		СелекторВыгружатьФактРасходПоПЛ = 2;
	КонецЕсли;
	
	Если Объект.ВыгружатьЗаправкиГСМВоВнутренниеПеремещения Тогда 
		СелекторВыгрузкиЗаправок = 1;
	Иначе 
		СелекторВыгрузкиЗаправок = 2;
	КонецЕсли;
	
	Если флВыгружатьФактРасходГСМ Тогда 
		СелекторВыгрузкиРасходаГСМ = 1;
	Иначе 
		СелекторВыгрузкиРасходаГСМ = 2;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Процедура УстановитьЗначениеСтрокиДерева(СтрокиДерева, ТаблицаПравилВыгрузки, Включить = Неопределено)
	
	Для Каждого СтрокаДерева ИЗ СтрокиДерева Цикл
		ИмяПравила = СтрокаДерева.Имя;
		Если ЗначениеЗаполнено(ИмяПравила) Тогда
			ПараметрыОтбора = Новый Структура("Имя", ИмяПравила);
			РедактируемыеСтроки = ТаблицаПравилВыгрузки.Строки.НайтиСтроки(ПараметрыОтбора, Истина);
			Для Каждого РедактируемаяСтрока ИЗ РедактируемыеСтроки Цикл
				Если РедактируемаяСтрока <> Неопределено Тогда
					РедактируемаяСтрока.Включить = ?(Включить = Неопределено, СтрокаДерева.Включить, Включить);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
		Если СтрокаДерева.Строки.Количество() <> 0 Тогда
			УстановитьЗначениеСтрокиДерева(СтрокаДерева.Строки, ТаблицаПравилВыгрузки, Включить);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьСвернутьВетки(Коллекция, УстановитьПоУмолчанию = Ложь)
	
	Если НЕ УстановитьПоУмолчанию Тогда
		Для Каждого Строка ИЗ Коллекция Цикл
			Если Строка.ВеткаРазвернута Тогда
				Элементы.ТаблицаПравилВыгрузки.Развернуть(Строка.ПолучитьИдентификатор());
				ПодКоллекция = Строка.ПолучитьЭлементы();
				РазвернутьСвернутьВетки(ПодКоллекция);
			КонецЕсли;
		КонецЦикла;
	Иначе
		Для Каждого Строка ИЗ Коллекция Цикл
			Строка.ВеткаРазвернута = Ложь;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура УстановитьЗначениеСтрокиРодителя(ВеткаРодителя, ТаблицаПравилВыгрузки)
	
	Если ВеткаРодителя.Родитель <> Неопределено Тогда
		УстановитьЗначениеСтрокиРодителя(ВеткаРодителя.Родитель, ТаблицаПравилВыгрузки);
	КонецЕсли;

	НайденыВключенные  = Ложь;
	НайденыВыключенные = Ложь;

	Для Каждого СтрокаДерева ИЗ ВеткаРодителя.Строки Цикл
		
		Если СтрокаДерева.Включить = 0 Тогда
			НайденыВыключенные = Истина;
		ИначеЕсли СтрокаДерева.Включить = 1 Тогда
			НайденыВключенные  = Истина;
		ИначеЕсли СтрокаДерева.Включить = 2 Тогда
			НайденыВыключенные = Истина;
			НайденыВключенные  = Истина;
		КонецЕсли; 
		
		Если НайденыВключенные И НайденыВыключенные Тогда
			Прервать;
		КонецЕсли;
	КонецЦикла;
	
	Если НайденыВключенные И НайденыВыключенные Тогда
		Включить = 2;
	ИначеЕсли НайденыВключенные И (Не НайденыВыключенные) Тогда
		Включить = 1;
	ИначеЕсли (Не НайденыВключенные) И НайденыВыключенные Тогда
		Включить = 0;
	ИначеЕсли (Не НайденыВключенные) И (Не НайденыВыключенные) Тогда
		Включить = 2;
	КонецЕсли;
	
	ВеткаРодителя.Включить = Включить;
	
КонецПроцедуры

&НаСервере
Процедура СнятьУстановитьВсеФлажки(Включить)
    
	ТаблицаПравилВыгрузки = ДанныеФормыВЗначение(Объект.ТаблицаПравилВыгрузки, Тип("ДеревоЗначений"));
	
	Для Каждого РедактируемаяСтрока ИЗ ТаблицаПравилВыгрузки.Строки Цикл
		РедактируемаяСтрока.Включить = Включить;
		УстановитьЗначениеСтрокиДерева(РедактируемаяСтрока.Строки, ТаблицаПравилВыгрузки, Включить);
	КонецЦикла;
	
	ЗначениеВДанныеФормы(ТаблицаПравилВыгрузки, Объект.ТаблицаПравилВыгрузки);

КонецПроцедуры

&НаСервере
Функция ПолучитьСписокОрганизацийНаСервере()
	
	Запрос = Новый Запрос;
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	Организации.Ссылка КАК Организации
	|ИЗ
	|	Справочник.Организации КАК Организации
	|ГДЕ
	|	НЕ Организации.ПометкаУдаления";
	
	Выгрузка = Запрос.Выполнить().Выгрузить();
	
	Результат = Выгрузка.ВыгрузитьКолонку("Организации");
	
	Возврат Результат;
	
КонецФункции // ПолучитьСписокОрганизацийНаСервере()

&НаКлиенте
Процедура СформироватьСписокОрганизаций()
	
	Список = ПолучитьСписокОрганизацийНаСервере();
	
	Для Каждого ТекОрг Из Список Цикл 
		ОтборОрганизации.Добавить(ТекОрг,,Истина);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСоответствиеСравнений(ПоКомпоновщику=Истина)
	
	СоответствиеВидовСравнения = Новый Соответствие;
	
	Если ПоКомпоновщику Тогда 
		СоответствиеВидовСравнения.Вставить(ВидСравненияКомпоновкиДанных.Больше,              ВидСравнения.Больше);
		СоответствиеВидовСравнения.Вставить(ВидСравненияКомпоновкиДанных.БольшеИлиРавно,      ВидСравнения.БольшеИлиРавно);
		СоответствиеВидовСравнения.Вставить(ВидСравненияКомпоновкиДанных.ВИерархии,           ВидСравнения.ВИерархии);
		СоответствиеВидовСравнения.Вставить(ВидСравненияКомпоновкиДанных.ВСписке,             ВидСравнения.ВСписке);
		СоответствиеВидовСравнения.Вставить(ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии,   ВидСравнения.ВСпискеПоИерархии);
		СоответствиеВидовСравнения.Вставить(ВидСравненияКомпоновкиДанных.Заполнено,           ВидСравнения.Содержит);
		СоответствиеВидовСравнения.Вставить(ВидСравненияКомпоновкиДанных.Меньше,              ВидСравнения.Меньше);
		СоответствиеВидовСравнения.Вставить(ВидСравненияКомпоновкиДанных.МеньшеИлиРавно,      ВидСравнения.МеньшеИлиРавно);
		СоответствиеВидовСравнения.Вставить(ВидСравненияКомпоновкиДанных.НеВИерархии,         ВидСравнения.НеВИерархии);
		СоответствиеВидовСравнения.Вставить(ВидСравненияКомпоновкиДанных.НеВСписке,           ВидСравнения.НеВСписке);
		СоответствиеВидовСравнения.Вставить(ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии, ВидСравнения.НеВСпискеПоИерархии);
		СоответствиеВидовСравнения.Вставить(ВидСравненияКомпоновкиДанных.НеЗаполнено,         ВидСравнения.НеСодержит);
		СоответствиеВидовСравнения.Вставить(ВидСравненияКомпоновкиДанных.НеРавно,             ВидСравнения.НеРавно);
		СоответствиеВидовСравнения.Вставить(ВидСравненияКомпоновкиДанных.НеСодержит,          ВидСравнения.НеСодержит);
		СоответствиеВидовСравнения.Вставить(ВидСравненияКомпоновкиДанных.Равно,               ВидСравнения.Равно);
		СоответствиеВидовСравнения.Вставить(ВидСравненияКомпоновкиДанных.Содержит,            ВидСравнения.Содержит);
	Иначе 
		СоответствиеВидовСравнения.Вставить(ВидСравнения.Больше,              ВидСравненияКомпоновкиДанных.Больше);
		СоответствиеВидовСравнения.Вставить(ВидСравнения.БольшеИлиРавно,      ВидСравненияКомпоновкиДанных.БольшеИлиРавно);
		СоответствиеВидовСравнения.Вставить(ВидСравнения.ВИерархии,           ВидСравненияКомпоновкиДанных.ВИерархии);
		СоответствиеВидовСравнения.Вставить(ВидСравнения.ВСписке,             ВидСравненияКомпоновкиДанных.ВСписке);
		СоответствиеВидовСравнения.Вставить(ВидСравнения.ВСпискеПоИерархии,   ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии);
		СоответствиеВидовСравнения.Вставить(ВидСравнения.Содержит,            ВидСравненияКомпоновкиДанных.Заполнено);
		СоответствиеВидовСравнения.Вставить(ВидСравнения.Меньше,              ВидСравненияКомпоновкиДанных.Меньше);
		СоответствиеВидовСравнения.Вставить(ВидСравнения.МеньшеИлиРавно,      ВидСравненияКомпоновкиДанных.МеньшеИлиРавно);
		СоответствиеВидовСравнения.Вставить(ВидСравнения.НеВИерархии,         ВидСравненияКомпоновкиДанных.НеВИерархии);
		СоответствиеВидовСравнения.Вставить(ВидСравнения.НеВСписке,           ВидСравненияКомпоновкиДанных.НеВСписке);
		СоответствиеВидовСравнения.Вставить(ВидСравнения.НеВСпискеПоИерархии, ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии);
		СоответствиеВидовСравнения.Вставить(ВидСравнения.НеСодержит,          ВидСравненияКомпоновкиДанных.НеЗаполнено);
		СоответствиеВидовСравнения.Вставить(ВидСравнения.НеРавно,             ВидСравненияКомпоновкиДанных.НеРавно);
		СоответствиеВидовСравнения.Вставить(ВидСравнения.НеСодержит,          ВидСравненияКомпоновкиДанных.НеСодержит);
		СоответствиеВидовСравнения.Вставить(ВидСравнения.Равно,               ВидСравненияКомпоновкиДанных.Равно);
		СоответствиеВидовСравнения.Вставить(ВидСравнения.Содержит,            ВидСравненияКомпоновкиДанных.Содержит);
	КонецЕсли;
	
	Возврат СоответствиеВидовСравнения;
	
КонецФункции // ПолучитьСоответствиеСравнений()

&НаСервере
Процедура ЗагрузитьПостроительОтборов(ТекПВД=Неопределено)
	
	Если ТекПВД = Неопределено Тогда 
		ИмяОбъектаДляЗапроса = Неопределено;
		ИспользоватьОтбор    = Ложь;
		НаименованиеПравилаДляЗапроса = Неопределено;
	Иначе 
		ИмяОбъектаДляЗапроса = ТекПВД.ИмяОбъектаДляЗапроса;
		ИспользоватьОтбор    = ТекПВД.ИспользоватьОтбор;
		НаименованиеПравилаДляЗапроса = ТекПВД.Наименование;
	КонецЕсли;
	
	//Если ТекущееИмяОбъектаДляЗапроса = ИмяОбъектаДляЗапроса Тогда 
	//	Возврат;
	//КонецЕсли;
	
	Если ТекущееНаименованиеПравилаДляЗапроса = НаименованиеПравилаДляЗапроса Тогда 
		Возврат;
	КонецЕсли;
	
	//ТекущееИмяОбъектаДляЗапроса = "";
	ТекущееНаименованиеПравилаДляЗапроса = "";
	
	СхемаКомпоновкиОтборов = Новый СхемаКомпоновкиДанных;
	Элементы.КомпоновщикОтборовНастройкиОтбор.Доступность = Ложь;
	
	флПустойКомпоновщик = Истина;
	
	Если Не ТекПВД = Неопределено И ТекПВД.ЭтоГруппа = Ложь И ТекПВД.СпособОтбораДанных = "СтандартнаяВыборка"
		И Не ИмяОбъектаДляЗапроса = Неопределено Тогда 
			ИсточникДанных = СхемаКомпоновкиОтборов.ИсточникиДанных.Добавить();
			ИсточникДанных.Имя                = "Local";
			ИсточникДанных.ТипИсточникаДанных = "Local";
			
			НаборДанных = СхемаКомпоновкиОтборов.НаборыДанных.Добавить(Тип("НаборДанныхЗапросСхемыКомпоновкиДанных"));
			НаборДанных.Имя            = "ОсновнойНаборДанных";
			НаборДанных.ИсточникДанных = "Local";
			
			НаборДанных.Запрос = 
			"ВЫБРАТЬ РАЗРЕШЕННЫЕ
			|	_.Ссылка КАК " + СокрЛП(СтрЗаменить(ИмяОбъектаДляЗапроса, ".", "_")) + "
			|ИЗ
			|	" + СокрЛП(ИмяОбъектаДляЗапроса) + " КАК _";
			
			ПолеНабораДанных = СхемаКомпоновкиОтборов.НаборыДанных.ОсновнойНаборДанных.Поля.Добавить(Тип("ПолеНабораДанныхСхемыКомпоновкиДанных"));
			ПолеНабораДанных.Поле        = СокрЛП(СтрЗаменить(ИмяОбъектаДляЗапроса, ".", "_"));
			ПолеНабораДанных.ПутьКДанным = СокрЛП(СтрЗаменить(ИмяОбъектаДляЗапроса, ".", "_"));
			ПолеНабораДанных.Заголовок   = СокрЛП(СтрЗаменить(ИмяОбъектаДляЗапроса, ".", "_"));
			
			Элементы.КомпоновщикОтборовНастройкиОтбор.Доступность = Истина;
			флПустойКомпоновщик = Ложь;
			//ТекущееИмяОбъектаДляЗапроса = ИмяОбъектаДляЗапроса;
			ТекущееНаименованиеПравилаДляЗапроса = НаименованиеПравилаДляЗапроса;
	КонецЕсли;
	
	Если Не URLСхемыОтборов = "" Тогда 
		Попытка
			УдалитьИзВременногоХранилища(URLСхемыОтборов);
		Исключение
		КонецПопытки;
	КонецЕсли;
	
	URLСхемыОтборов = ПоместитьВоВременноеХранилище(СхемаКомпоновкиОтборов, УникальныйИдентификатор);
	КомпоновщикОтборов.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(URLСхемыОтборов));
	КомпоновщикОтборов.ЗагрузитьНастройки(СхемаКомпоновкиОтборов.НастройкиПоУмолчанию);
	КомпоновщикОтборов.Настройки.Отбор.Элементы.Очистить();
	
	Если Не флПустойКомпоновщик И Не ТекПВД.НастройкиОтборов.Количество() = 0 И ИспользоватьОтбор Тогда 
		Для Каждого ТекОтбор Из ТекПВД.НастройкиОтборов Цикл 
			Если Не ТекОтбор.Значение.Использование Тогда 
				Прервать;
			КонецЕсли;
			ЭлементОтбора = КомпоновщикОтборов.Настройки.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
			ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных(Строка(ТекОтбор.Значение.ЛевоеЗначение));
			ЭлементОтбора.ВидСравнения     = ТекОтбор.Значение.ВидСравнения;
			ЭлементОтбора.ПравоеЗначение   = ТекОтбор.Значение.ПравоеЗначение;
			ЭлементОтбора.РежимОтображения = ТекОтбор.Значение.РежимОтображения;
			ЭлементОтбора.Использование    = ТекОтбор.Значение.Использование;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьЗапросПостроителя(ИмяОбъектаДляЗапроса)
	
	ТекстЗапросаПостроителя = "ВЫБРАТЬ РАЗРЕШЕННЫЕ _.Ссылка КАК Ссылка ИЗ " + ИмяОбъектаДляЗапроса + " КАК _ "
		+ "{ГДЕ _.Ссылка.* КАК " + СтрЗаменить(ИмяОбъектаДляЗапроса, ".", "_") + "}";
	
	Возврат ТекстЗапросаПостроителя;
	
КонецФункции // ПолучитьЗапросПостроителя()

&НаСервере
Процедура ЗаполнитьОтборПостроителяПриВыгрузке(Источник, Приемник)
	
	Если Источник.ЭтоГруппа = Истина Или Не Источник.СпособОтбораДанных = "СтандартнаяВыборка"
		Или Источник.ИмяОбъектаДляЗапроса = Неопределено Или Не ЗначениеЗаполнено(Источник.ИмяОбъектаДляЗапроса) Тогда 
			Приемник.ИспользоватьОтбор    = Ложь;
			Приемник.НастройкиПостроителя = Неопределено;
			Возврат;
	КонецЕсли;
	
	Построитель = Новый ПостроительОтчета;
	Построитель.Текст = ПолучитьЗапросПостроителя(Источник.ИмяОбъектаДляЗапроса);
	Построитель.ЗаполнитьНастройки();
	
	СоответствиеСравнений = ПолучитьСоответствиеСравнений(Истина);
	
	Для Каждого ТекСтрокаОтбора Из Источник.НастройкиОтборов Цикл 
		Если ТекСтрокаОтбора.Значение.Использование = Ложь Тогда 
			Прервать;
		КонецЕсли;
		НовыйОтбор = Построитель.Отбор.Добавить(Строка(ТекСтрокаОтбора.Значение.ЛевоеЗначение),
												Строка(ТекСтрокаОтбора.Значение.ЛевоеЗначение),
												Строка(ТекСтрокаОтбора.Значение.ЛевоеЗначение));
		НовыйОтбор.ВидСравнения  = СоответствиеСравнений.Получить(ТекСтрокаОтбора.Значение.ВидСравнения);
		НовыйОтбор.Значение      = ТекСтрокаОтбора.Значение.ПравоеЗначение;
		НовыйОтбор.Использование = ТекСтрокаОтбора.Значение.Использование;
	КонецЦикла;
	
	Если Построитель.Отбор.Количество() Тогда 
		Приемник.ИспользоватьОтбор    = Истина;
		Приемник.НастройкиПостроителя = Построитель.ПолучитьНастройки();
	Иначе 
		Приемник.ИспользоватьОтбор    = Ложь;
		Приемник.НастройкиПостроителя = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьУстановленныйОтбор(ИДТекУзлаПВД)
	
	Если ИДТекУзлаПВД = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекЭлементПВД = Объект.ТаблицаПравилВыгрузки.НайтиПоИдентификатору(ИДТекУзлаПВД);
	
	Если КомпоновщикОтборов.Настройки.Отбор.Элементы.Количество() = 0 Тогда 
		ТекЭлементПВД.ИспользоватьОтбор = Ложь;
		ТекЭлементПВД.НастройкиОтборов.Очистить();
	Иначе 
		ТекЭлементПВД.НастройкиОтборов.Очистить();
		Для Каждого ТекОтбор Из КомпоновщикОтборов.Настройки.Отбор.Элементы Цикл 
			Если Не ТекОтбор.Использование Тогда 
				Прервать;
			КонецЕсли;
			ТекЭлементПВД.НастройкиОтборов.Добавить(ТекОтбор);
		КонецЦикла;
		Если ТекЭлементПВД.НастройкиОтборов.Количество() = 0 Тогда 
			ТекЭлементПВД.ИспользоватьОтбор = Ложь;
		Иначе 
			ТекЭлементПВД.ИспользоватьОтбор = Истина;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьУстановленныйОтбор(ИДТекУзлаПВД)
	
	Если ИДТекУзлаПВД = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ТекЭлементПВД = Объект.ТаблицаПравилВыгрузки.НайтиПоИдентификатору(ИДТекУзлаПВД);
	ЗагрузитьПостроительОтборов(ТекЭлементПВД);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьСтандартныеПравилаОбмена()
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	
	ТекстПравил = ОбработкаОбъект.ПолучитьМакет("ПравилаОбменаТекст");
	
	УниверсальнаяВыгрузкаДанных = Обработки.УниверсальныйОбменДаннымиXML.Создать();
	УниверсальнаяВыгрузкаДанных.ЗагрузитьПравилаОбмена(ТекстПравил.ПолучитьТекст(), "Строка");
	ЗначениеВДанныеФормы(УниверсальнаяВыгрузкаДанных.ТаблицаПравилВыгрузки, Объект.ТаблицаПравилВыгрузки);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПользовательскиеПравилаОбмена(Знач ВыполнитьПроверки)
	
	ТекстПравилОбмена = "";
	флОшибка = Ложь;
	
	Если ВыполнитьПроверки Тогда 
		Если ПустаяСтрока(ПутьКФайлуПравил) Тогда
			ТекстОшибки = НСтр("en='Необходимо указать файл пользовательских правил выгрузки.';ru='Необходимо указать файл пользовательских правил выгрузки.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,"ПутьКФайлуПравил",,флОшибка);
		КонецЕсли;
		
		Если Не флОшибка Тогда 
			ФайлПравил = Новый Файл(ПутьКФайлуПравил);
			ФайлПравил.НачатьПроверкуСуществования(Новый ОписаниеОповещения("ЗагрузитьПользовательскиеПравилаОбменаЗавершение",
			ЭтотОбъект, Новый Структура("флОшибка", флОшибка)));
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ЗагрузитьПользовательскиеПравилаОбменаНаСервере(ТекстПравилОбмена);
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьПользовательскиеПравилаОбменаЗавершение(Существует, ДополнительныеПараметры) Экспорт
	
	Если Не Существует Тогда 
		ТекстОшибки = НСтр("en='The specified file does not exist.';ru='Указанный файл не существует.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,,"ПутьКФайлуПравил",,ДополнительныеПараметры.флОшибка);
	КонецЕсли;
	
	ЧтениеТекста = Новый ЧтениеТекста(ПутьКФайлуПравил);
	ТекстПравилОбмена = ЧтениеТекста.Прочитать();
	ЧтениеТекста.Закрыть();
	
	ЗагрузитьПользовательскиеПравилаОбменаНаСервере(ТекстПравилОбмена);

КонецПроцедуры

&НаСервере
Процедура ЗагрузитьПользовательскиеПравилаОбменаНаСервере(Знач ТекстПравилОбмена)
	
	Если НЕ ПустаяСтрока(АдресХранилищаФайлаПравил) И ТекстПравилОбмена = "" Тогда
		ДанныеФайлаПравил = ПолучитьИзВременногоХранилища(АдресХранилищаФайлаПравил);
		ВремФайлПравил = ПолучитьИмяВременногоФайла("xml");
		ДанныеФайлаПравил.Записать(ВремФайлПравил);
		ТекстДок = Новый ТекстовыйДокумент;
		ТекстДок.Прочитать(ВремФайлПравил);
		ТекстПравилОбмена = ТекстДок.ПолучитьТекст();
		УдалитьФайлы(ВремФайлПравил);
	КонецЕсли;
	
	УниверсальнаяВыгрузкаДанных = Обработки.УниверсальныйОбменДаннымиXML.Создать();
	Если Не ТекстПравилОбмена = "" Тогда
		Объект.ТаблицаПравилВыгрузки.ПолучитьЭлементы().Очистить();
		УниверсальнаяВыгрузкаДанных.ЗагрузитьПравилаОбмена(ТекстПравилОбмена, "Строка");
	КонецЕсли;
	
	ЗаполнитьДеревоПравилВыгрузки(УниверсальнаяВыгрузкаДанных.ТаблицаПравилВыгрузки, Объект.ТаблицаПравилВыгрузки);
	//ЗначениеВРеквизитФормы(УниверсальнаяВыгрузкаДанных.ТаблицаПравилВыгрузки, "Объект.ТаблицаПравилВыгрузки");
	//ЗначениеВДанныеФормы(УниверсальнаяВыгрузкаДанных.ТаблицаПравилВыгрузки, Объект.ТаблицаПравилВыгрузки);
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьДеревоПравилВыгрузки(ДеревоИсходное, ДеревоРезультат)
	Для Каждого ТекСтрока Из ДеревоИсходное.Строки Цикл
		НоваяСтрока = ДеревоРезультат.ПолучитьЭлементы().Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		ЗаполнитьДеревоПравилВыгрузки(ТекСтрока, НоваяСтрока);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьРеквизитовВыбораПравил()
	
	Если ИспользуемыеПравила = 0 Тогда 
		Элементы.ГруппаВыборПравил.ТекущаяСтраница = Элементы.ГруппаВыборПредопределенных;
	Иначе 
		Элементы.ГруппаВыборПравил.ТекущаяСтраница = Элементы.ГруппаВыборПользовательских;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступность()
	Элементы.флДетализироватьПоТСРасходГСМ.Доступность = ?(флВыгружатьФактРасходПоПЛ=1, Ложь, Истина);
	Элементы.СписокПараметровВыработки.Доступность = ?(флОтборПоПараметрамВыработки=1,Истина,Ложь);
	ОбновитьПредставлениеСелектораПЛВыгружатьНа();
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПредставлениеСелектораПЛВыгружатьНа()
	Если СелекторВыгружатьФактРасходПоПЛ = 1 Тогда // по документам
		Элементы.СелекторВыгружатьРасходГСМНаДатуВыписки.Заголовок = "Выгружать на";
		Элементы.СелекторВыгружатьРасходГСМНаДатуВыписки.СписокВыбора[0].Представление = "Дату выписки";
		Элементы.СелекторВыгружатьРасходГСМНаДатуВыписки.СписокВыбора[1].Представление = "Дату закрытия";
	Иначе // за период
		Элементы.СелекторВыгружатьРасходГСМНаДатуВыписки.Заголовок = "Выбирать по";
		Элементы.СелекторВыгружатьРасходГСМНаДатуВыписки.СписокВыбора[0].Представление = "Дате выписки";
		Элементы.СелекторВыгружатьРасходГСМНаДатуВыписки.СписокВыбора[1].Представление = "Дате закрытия";
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

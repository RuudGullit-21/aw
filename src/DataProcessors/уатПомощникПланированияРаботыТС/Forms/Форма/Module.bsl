
#Область ОписаниеПеременных

&НаКлиенте
Перем ХарактеристикиСценария; // Хранит характеристики сценария планирования.

#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;

	// начало блока стандартных операций
	ДопПараметрыОткрытие = Новый Структура("ИмяФормы", ИмяФормы);
	уатЗащищенныеФункцииСервер.уатОбработкаФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	// конец блока стандартных операций
	
	Если Параметры.Свойство("Сценарий") Тогда
		Сценарий    = Параметры.Сценарий;
		ТекСценарий = Сценарий;
	КонецЕсли;
	Если Параметры.Свойство("Организация") Тогда
		Организация = Параметры.Организация;
	КонецЕсли;
	Если Параметры.Свойство("Подразделение") Тогда
		Подразделение = Параметры.Подразделение;
	КонецЕсли;
	Если Параметры.Свойство("ДатаНач") Тогда
		ДатаПланирования = Параметры.ДатаНач;
		
		НачалоПериода    = Параметры.ДатаНач;
		уатОбщегоНазначенияТиповые.уатВыровнятьДатуПоНачалуПериода(НачалоПериода, Сценарий.Периодичность);
		НачалоПериода = НачалоПериода - 1;
		уатОбщегоНазначенияТиповые.уатВыровнятьДатуПоНачалуПериода(НачалоПериода, Сценарий.Периодичность);
	КонецЕсли;
	Если Параметры.Свойство("ДатаКон") Тогда
		КонецПериода = Параметры.ДатаКон;
		уатОбщегоНазначенияТиповые.уатВыровнятьДатуПоНачалуПериода(КонецПериода, Сценарий.Периодичность);
		КонецПериода = КонецПериода - 1;
	КонецЕсли;
	Если Параметры.Свойство("СуммаВключаетНДС") Тогда
		СуммаВключаетНДС = Параметры.СуммаВключаетНДС;
	КонецЕсли;
	Если Параметры.Свойство("УчитыватьНДС") Тогда
		УчитыватьНДС = Параметры.УчитыватьНДС;
	КонецЕсли;
	
	ОбновитьНадписьПериодПланирования();
	СкорректироватьПериодЗаполнения();
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// начало блока стандартных операций
	уатЗащищенныеФункцииКлиент.уатОбработкаФормаПриОткрытии(Отказ, ДопПараметрыОткрытие);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	// конец блока стандартных операций
	
	Если ВладелецФормы = Неопределено Тогда
		Отказ = Истина;
		ТекстНСТР = НСтр("en='This data processor is only called from the document ""Planning of vehicle work""';ru='Данная обработка вызывается только из документа ""Планирование работы ТС""'");
		ПоказатьПредупреждение(Неопределено, ТекстНСТР, 10);
		Возврат;
	КонецЕсли;
	
	ХарактеристикиСценария = ЗаполнитьХарактеристикиСценария(Сценарий);
	ИспользоватьКраткосрочноеПланирование = ХарактеристикиСценария.ИспользоватьКраткосрочноеПланирование;
	
	Сценарий = ТекСценарий;
	Если ВариантЗаполнения = 2 Тогда
		ЗаполнитьАналитики(ХарактеристикиСценария);
	ИначеЕсли ВариантЗаполнения = 1
		И ХарактеристикиСценария.ВидПланирования = ПредопределенноеЗначение("Перечисление.уатВидыПланирования.Краткосрочный") Тогда
		Сценарий = ХарактеристикиСценария.ВедущийСценарий; 
	КонецЕсли;
	
	ИнициализацияКомпоновщика();
	
	ФорматироватьКолонкиДетализации();
	ЗаполнитьСоставПланаПериод(ХарактеристикиСценария);
	
	УстановитьВидимостьДоступность();
	ОбновитьПараметрВыработкиВременный();
	
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	Если ЗавершениеРаботы Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ПеренестиВДокумент И СоставПлана.Количество() > 0 Тогда
		Отказ = Истина;
		ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект), "Таблица плана содержит строки. Перенести в документ?", РежимДиалогаВопрос.ДаНетОтмена);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(Результат, ДополнительныеПараметры) Экспорт
    
    Если Результат = КодВозвратаДиалога.Нет Тогда
		СоставПлана.Очистить();
		Закрыть();
		
	ИначеЕсли Результат = КодВозвратаДиалога.Да Тогда
		ПеренестиВДокументИЗакрыть();
		
	КонецЕсли;

КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполнитьОбработку(Команда)
	ПеренестиВДокументИЗакрыть();
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСоставПлана(Команда)
	Если НЕ ЗначениеЗаполнено(Сценарий) Тогда
		ПоказатьПредупреждение(Неопределено, "Не указан сценарий!");
		Возврат;
	КонецЕсли;
	Если НЕ ЗначениеЗаполнено(Организация) Тогда
		ПоказатьПредупреждение(Неопределено, "Не указана организация!");
		Возврат;
	КонецЕсли;
	
	флОчищать = Ложь;
	Если СоставПлана.Количество() > 0 Тогда
		ТекстНСТР = НСтр("en='Tabular section is not empty! Clear?';ru='Таблица содержит строки! Продолжить с очисткой?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗаполнитьСоставПланаЗавершение", ЭтотОбъект),
			ТекстНСТР, РежимДиалогаВопрос.ДаНетОтмена);
        Возврат;
	КонецЕсли;
	
	ЗаполнитьСоставПланаФрагмент(флОчищать);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСоставПланаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	флОчищать = Ложь;
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.Отмена Тогда
        Возврат;
    ИначеЕсли Ответ = КодВозвратаДиалога.Да Тогда
        флОчищать = Истина;
    КонецЕсли;
    
    ЗаполнитьСоставПланаФрагмент(флОчищать);

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьСоставПланаФрагмент(Знач флОчищать)
	
	ЗаполнитьСоставПланаСервер(флОчищать, ХарактеристикиСценария);
	ОбновитьВсегоВТЧ();
	ОбновитьПараметрВыработкиВременный();

КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСоставПлана(Команда)
	Если СоставПлана.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ТекстНСТР = НСтр("en='Structure of plan will be cleared! Continue?';ru='Таблица будет очищена! Продолжить?'");
	ПоказатьВопрос(Новый ОписаниеОповещения("ОчиститьСоставПланаЗавершение", ЭтотОбъект),
		ТекстНСТР, РежимДиалогаВопрос.ОКОтмена);
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСоставПланаЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    Ответ = РезультатВопроса;
    Если Ответ = КодВозвратаДиалога.ОК Тогда
        СоставПлана.Очистить();
    КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПериод(Команда)
	ПроизвольныйПериод               = Новый СтандартныйПериод;
	ПроизвольныйПериод.Вариант       = ВариантСтандартногоПериода.ПроизвольныйПериод;
	ПроизвольныйПериод.ДатаНачала    = НачалоПериода;
	ПроизвольныйПериод.ДатаОкончания = КонецПериода;

	ДиалогВыбораПериода        = Новый ДиалогРедактированияСтандартногоПериода();
	ДиалогВыбораПериода.Период = ПроизвольныйПериод;
	
	ДиалогВыбораПериода.Показать(Новый ОписаниеОповещения("УстановитьПериодЗавершение", ЭтотОбъект));
КонецПроцедуры

&НаКлиенте
Процедура УстановитьПериодЗавершение(Период, ДополнительныеПараметры) Экспорт
	
	Если Период <> Неопределено Тогда
		НачалоПериода = Период.ДатаНачала;
		уатОбщегоНазначенияТиповые.уатВыровнятьДатуПоНачалуПериода(НачалоПериода, уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСценарий, "Периодичность"),,Истина);
		КонецПериода = Период.ДатаОкончания;
		уатОбщегоНазначенияТиповые.уатВыровнятьДатуПоКонцуПериода(КонецПериода, уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСценарий, "Периодичность"),,Истина);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура УстановитьПредыдущийПериод(Команда)
	НачалоПериода = НачалоПериода - 1;
	КонецПериода = НачалоПериода;
	уатОбщегоНазначенияТиповые.уатВыровнятьПериод(НачалоПериода, КонецПериода, уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Сценарий, "Периодичность"));
КонецПроцедуры

&НаКлиенте
Процедура УстановитьСледующийПериод(Команда)
	КонецПериода = КонецДня(КонецПериода) + 1;
	НачалоПериода = КонецПериода;
	уатОбщегоНазначенияТиповые.уатВыровнятьПериод(НачалоПериода, КонецПериода, уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Сценарий, "Периодичность"));
КонецПроцедуры

&НаКлиенте
Процедура ВыгрузитьВExcel(Команда)
	#Если ВебКлиент Тогда
		ТекстНСТР = НСтр("en='Export to Excel is not available in the Web client.';ru='Выгрузка в Excel недоступна в Web-клиенте.'");
		ПоказатьПредупреждение(Неопределено, ТекстНСТР);
		Возврат;
	#ИначеЕсли МобильныйКлиент ИЛИ МобильноеПриложениеКлиент Тогда 
		ТекстНСТР = НСтр("ru='Выгрузка в Excel недоступна в мобильном клиенте.'");
		ПоказатьПредупреждение(Неопределено, ТекстНСТР);
		Возврат;
	#КонецЕсли
	
	ДиалогВыбораФайла                             = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбораФайла.Фильтр                      = НСтр("en='Data file';ru='Файл данных'") + " (*.xls)|*.xls";
	ДиалогВыбораФайла.Заголовок                   = НСтр("en='Select file';ru='Выберите файл'");
	ДиалогВыбораФайла.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбораФайла.Расширение                  = "xls";
	ДиалогВыбораФайла.ИндексФильтра               = 0;
	ДиалогВыбораФайла.МножественныйВыбор          = Ложь;
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("ВыполнитьВыгрузкуЗавершение", ЭтотОбъект, Новый Структура("ДиалогВыбораФайла", ДиалогВыбораФайла)));
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьВыгрузкуЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
    Если ВыбранныеФайлы = Неопределено Тогда 
        Возврат;
    КонецЕсли;
	
	ФайлВыгрузки = ВыбранныеФайлы[0];
    
	Если ПустаяСтрока(ФайлВыгрузки) Тогда
		ТекстОшибки = НСтр("en='It is necessary to specify the upload file.';ru='Необходимо указать файл выгрузки.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ВыполнитьВыгрузкуЗавершениеФрагмент();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьВыгрузкуЗавершениеФрагмент()
    
    Перем ДанныеХранилища;
	
	ВыполнитьВыгрузкуExcelНаСервере(ХарактеристикиСценария);
	ДанныеХранилища = ПолучитьИзВременногоХранилища(АдресХранилищаФайлВыгрузки);
		
	#Если НЕ ВебКлиент И НЕ МобильныйКлиент И НЕ МобильноеПриложениеКлиент Тогда
		ДанныеХранилища.Записать(ФайлВыгрузки);
		НачатьЗапускПриложения(Новый ОписаниеОповещения("Подключаемый_ОписаниеОповещенияЗапускExcel", ЭтотОбъект), ФайлВыгрузки);
	#Иначе
		ПолучитьФайл(АдресХранилищаФайлВыгрузки, "План работы ТС.xls");
	#КонецЕсли

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ОписаниеОповещенияЗапускExcel(Рез, ДопПараметры) Экспорт
	ПочемуНекорректноеОписаниеМетодаНачатьЗапускПриложения = Истина;
КонецПроцедуры

&НаСервере
Процедура ВыполнитьВыгрузкуExcelНаСервере(ХарактеристикиСценария)
	УникальныйИД                   = Новый УникальныйИдентификатор;
	ИмяВременногоФайлаОбмена       = КаталогВременныхФайлов() + УникальныйИД + "_VehicleWorkPlan.xls";
	
	// сформировать табл. документ
	ТабДок = Новый ТабличныйДокумент;
	Макет  = РеквизитФормыВЗначение("Объект").ПолучитьМакет("ФайлВыгрузкиExcel");
	
	ОбластьШапки = Макет.ПолучитьОбласть("Шапка|ДетализацияПланирования");
	ТабДок.Присоединить(ОбластьШапки);
	
	ОбластьШапки = Макет.ПолучитьОбласть("Шапка|Колонна");
	ТабДок.Присоединить(ОбластьШапки);
	
	Если ХарактеристикиСценария.флПараметрВыработки Тогда
		ОбластьШапки = Макет.ПолучитьОбласть("Шапка|ПараметрВыработки");
		ТабДок.Присоединить(ОбластьШапки);
	КонецЕсли;
	
	Если ХарактеристикиСценария.флВидПеревозки Тогда
		ОбластьШапки = Макет.ПолучитьОбласть("Шапка|ВидПеревозки");
		ТабДок.Присоединить(ОбластьШапки);
	КонецЕсли;
	
	Если ХарактеристикиСценария.флКонтрагент Тогда
		ОбластьШапки = Макет.ПолучитьОбласть("Шапка|Контрагент");
		ТабДок.Присоединить(ОбластьШапки);
	КонецЕсли;
	
	Если ХарактеристикиСценария.флДоговор Тогда
		ОбластьШапки = Макет.ПолучитьОбласть("Шапка|Договор");
		ТабДок.Присоединить(ОбластьШапки);
	КонецЕсли;
	
	Если ХарактеристикиСценария.флМаршрут Тогда
		ОбластьШапки = Макет.ПолучитьОбласть("Шапка|Маршрут");
		ТабДок.Присоединить(ОбластьШапки);
	КонецЕсли;
	
	Если ХарактеристикиСценария.флОбъектСтроительства Тогда
		ОбластьШапки = Макет.ПолучитьОбласть("Шапка|ОбъектСтроительства");
		ТабДок.Присоединить(ОбластьШапки);
	КонецЕсли;
	
	Если ХарактеристикиСценария.флНаправлениеПеревозки Тогда
		ОбластьШапки = Макет.ПолучитьОбласть("Шапка|НаправлениеПеревозки");
		ТабДок.Присоединить(ОбластьШапки);
	КонецЕсли;
	
	Если ХарактеристикиСценария.флНоменклатураГруза Тогда
		ОбластьШапки = Макет.ПолучитьОбласть("Шапка|Номенклатура");
		ТабДок.Присоединить(ОбластьШапки);
	КонецЕсли;
	
	Если ХарактеристикиСценария.флУслуга Тогда
		ОбластьШапки = Макет.ПолучитьОбласть("Шапка|Услуга");
		ТабДок.Присоединить(ОбластьШапки);
	КонецЕсли;
	
	Если ХарактеристикиСценария.флСтатья Тогда
		ОбластьШапки = Макет.ПолучитьОбласть("Шапка|Статья");
		ТабДок.Присоединить(ОбластьШапки);
	КонецЕсли;
	
	флКоличествоПериод = НЕ Элементы["СоставПланаЦена_Всего"].Видимость;
	Если ХарактеристикиСценария.ИспользоватьКраткосрочноеПланирование Тогда
		Если флКоличествоПериод Тогда
			ЗаголовокКолонки = "КоличествоПериод";
		ИначеЕсли УчитыватьНДС Тогда
			ЗаголовокКолонки = "КоличествоЦенаСуммаСуммаНДС";
		Иначе
			ЗаголовокКолонки = "КоличествоЦенаСумма";
		КонецЕсли;
		
		ОбластьШапки = Макет.ПолучитьОбласть("Шапка|" + ЗаголовокКолонки);
		ОбластьШапки.Параметры.ЗаголовокПериода = Элементы["СоставПланаГруппаВсего"].Заголовок;
		ТабДок.Присоединить(ОбластьШапки);
		
		Для Сч = 0 По КоличествоИнтервалов Цикл
			ОбластьШапки = Макет.ПолучитьОбласть("Шапка|" + ЗаголовокКолонки);
			ОбластьШапки.Параметры.ЗаголовокПериода = Элементы["СоставПланаГруппаВсего" + Сч].Заголовок;
			ТабДок.Присоединить(ОбластьШапки);
		КонецЦикла;
	Иначе
		ОбластьШапки = Макет.ПолучитьОбласть("Шапка|Количество");
		ТабДок.Присоединить(ОбластьШапки);
		
		Если НЕ флКоличествоПериод Тогда
			ОбластьШапки = Макет.ПолучитьОбласть("Шапка|Цена");
			ТабДок.Присоединить(ОбластьШапки);
			ОбластьШапки = Макет.ПолучитьОбласть("Шапка|Сумма");
			ТабДок.Присоединить(ОбластьШапки);
			
			Если УчитыватьНДС Тогда
				ОбластьШапки = Макет.ПолучитьОбласть("Шапка|СтавкаНДС");
				ТабДок.Присоединить(ОбластьШапки);
				
				ОбластьШапки = Макет.ПолучитьОбласть("Шапка|СуммаНДС");
				ТабДок.Присоединить(ОбластьШапки);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	
	Для Каждого ТекСтрока Из СоставПлана Цикл
		
		ОбластьСтроки = Макет.ПолучитьОбласть("Строка|ДетализацияПланирования");
		ОбластьСтроки.Параметры.ДетализацияПланирования = ТекСтрока.ДетализацияПланирования;
		ТабДок.Вывести(ОбластьСтроки);
		
		ОбластьСтроки = Макет.ПолучитьОбласть("Строка|Колонна");
		ОбластьСтроки.Параметры.Колонна = ТекСтрока.Колонна;
		ТабДок.Присоединить(ОбластьСтроки);
		
		Если ХарактеристикиСценария.флПараметрВыработки Тогда
			ОбластьСтроки = Макет.ПолучитьОбласть("Строка|ПараметрВыработки");
			ОбластьСтроки.Параметры.ПараметрВыработки = ТекСтрока.ПараметрВыработки;
			ТабДок.Присоединить(ОбластьСтроки);
		КонецЕсли;
		
		Если ХарактеристикиСценария.флВидПеревозки Тогда
			ОбластьСтроки = Макет.ПолучитьОбласть("Строка|ВидПеревозки");
			ОбластьСтроки.Параметры.ВидПеревозки = ТекСтрока.ВидПеревозки;
			ТабДок.Присоединить(ОбластьСтроки);
		КонецЕсли;
		
		Если ХарактеристикиСценария.флКонтрагент Тогда
			ОбластьСтроки = Макет.ПолучитьОбласть("Строка|Контрагент");
			ОбластьСтроки.Параметры.Контрагент = ТекСтрока.Контрагент;
			ТабДок.Присоединить(ОбластьСтроки);
		КонецЕсли;
		
		Если ХарактеристикиСценария.флДоговор Тогда
			ОбластьСтроки = Макет.ПолучитьОбласть("Строка|Договор");
			ОбластьСтроки.Параметры.Договор = ТекСтрока.Договор;
			ТабДок.Присоединить(ОбластьСтроки);
		КонецЕсли;
		
		Если ХарактеристикиСценария.флМаршрут Тогда
			ОбластьСтроки = Макет.ПолучитьОбласть("Строка|Маршрут");
			ОбластьСтроки.Параметры.Маршрут = ТекСтрока.Маршрут;
			ТабДок.Присоединить(ОбластьСтроки);
		КонецЕсли;
		
		Если ХарактеристикиСценария.флОбъектСтроительства Тогда
			ОбластьСтроки = Макет.ПолучитьОбласть("Строка|ОбъектСтроительства");
			ОбластьСтроки.Параметры.ОбъектСтроительства = ТекСтрока.ОбъектСтроительства;
			ТабДок.Присоединить(ОбластьСтроки);
		КонецЕсли;
		
		Если ХарактеристикиСценария.флНаправлениеПеревозки Тогда
			ОбластьСтроки = Макет.ПолучитьОбласть("Строка|НаправлениеПеревозки");
			ОбластьСтроки.Параметры.НаправлениеПеревозки = ТекСтрока.НаправлениеПеревозки;
			ТабДок.Присоединить(ОбластьСтроки);
		КонецЕсли;
		
		Если ХарактеристикиСценария.флНоменклатураГруза Тогда
			ОбластьСтроки = Макет.ПолучитьОбласть("Строка|Номенклатура");
			ОбластьСтроки.Параметры.Номенклатура = ТекСтрока.Номенклатура;
			ТабДок.Присоединить(ОбластьСтроки);
		КонецЕсли;
		
		Если ХарактеристикиСценария.флУслуга Тогда
			ОбластьСтроки = Макет.ПолучитьОбласть("Строка|Услуга");
			ОбластьСтроки.Параметры.Услуга = ТекСтрока.Услуга;
			ТабДок.Присоединить(ОбластьСтроки);
		КонецЕсли;
		
		Если ХарактеристикиСценария.флСтатья Тогда
			ОбластьСтроки = Макет.ПолучитьОбласть("Строка|Статья");
			ОбластьСтроки.Параметры.Статья = ТекСтрока.Статья;
			ТабДок.Присоединить(ОбластьСтроки);
		КонецЕсли;
		
		Если ХарактеристикиСценария.ИспользоватьКраткосрочноеПланирование Тогда
			Если флКоличествоПериод Тогда
				ЗаголовокКолонки = "КоличествоПериод";
			ИначеЕсли УчитыватьНДС Тогда
				ЗаголовокКолонки = "КоличествоЦенаСуммаСуммаНДС";
			Иначе
				ЗаголовокКолонки = "КоличествоЦенаСумма";
			КонецЕсли;
			
			ОбластьСтроки = Макет.ПолучитьОбласть("Строка|" + ЗаголовокКолонки);
			ОбластьСтроки.Параметры.Количество = ТекСтрока["СоставПланаКоличество_Всего"];
			
			Если НЕ флКоличествоПериод Тогда
				ОбластьСтроки.Параметры.Цена       = ТекСтрока["СоставПланаЦена_Всего"];
				ОбластьСтроки.Параметры.Сумма      = ТекСтрока["СоставПланаСумма_Всего"];
				
				Если УчитыватьНДС Тогда
					ОбластьСтроки.Параметры.СтавкаНДС  = ТекСтрока["СоставПланаСтавкаНДС_Всего"];
					ОбластьСтроки.Параметры.СуммаНДС   = ТекСтрока["СоставПланаСуммаНДС_Всего"];
				КонецЕсли;
			КонецЕсли;
			ТабДок.Присоединить(ОбластьСтроки);
			
			Для Сч = 0 По КоличествоИнтервалов Цикл
				ОбластьСтроки = Макет.ПолучитьОбласть("Строка|" + ЗаголовокКолонки);
				ОбластьСтроки.Параметры.Количество = ТекСтрока["СоставПланаКоличество_" + Сч];
				Если НЕ флКоличествоПериод Тогда
					ОбластьСтроки.Параметры.Цена       = ТекСтрока["СоставПланаЦена_" + Сч];
					ОбластьСтроки.Параметры.Сумма      = ТекСтрока["СоставПланаСумма_" + Сч];
					
					Если УчитыватьНДС Тогда
						ОбластьСтроки.Параметры.СтавкаНДС  = ТекСтрока["СоставПланаСтавкаНДС_" + Сч];
						ОбластьСтроки.Параметры.СуммаНДС   = ТекСтрока["СоставПланаСуммаНДС_" + Сч];
					КонецЕсли;
				Конецесли;
				ТабДок.Присоединить(ОбластьСтроки);
			КонецЦикла;
		Иначе
			ОбластьСтроки = Макет.ПолучитьОбласть("Строка|Количество");
			ОбластьСтроки.Параметры.Количество = ТекСтрока["СоставПланаКоличество_Всего"];
			ТабДок.Присоединить(ОбластьСтроки);
			
			Если НЕ флКоличествоПериод Тогда
				ОбластьСтроки = Макет.ПолучитьОбласть("Строка|Цена");
				ОбластьСтроки.Параметры.Цена       = ТекСтрока["СоставПланаЦена_Всего"];
				ТабДок.Присоединить(ОбластьСтроки);
				ОбластьСтроки = Макет.ПолучитьОбласть("Строка|Сумма");
				ОбластьСтроки.Параметры.Сумма      = ТекСтрока["СоставПланаСумма_Всего"];
				ТабДок.Присоединить(ОбластьСтроки);
				
				Если УчитыватьНДС Тогда
					ОбластьСтроки = Макет.ПолучитьОбласть("Строка|СтавкаНДС");
					ОбластьСтроки.Параметры.СтавкаНДС = ТекСтрока["СоставПланаСтавкаНДС_Всего"];
					ТабДок.Присоединить(ОбластьСтроки);
					
					ОбластьСтроки = Макет.ПолучитьОбласть("Строка|СуммаНДС");
					ОбластьСтроки.Параметры.СуммаНДС = ТекСтрока["СоставПланаСуммаНДС_Всего"];
					ТабДок.Присоединить(ОбластьСтроки);
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
	КонецЦикла;
	
	ТабДок.Записать(ИмяВременногоФайлаОбмена, ТипФайлаТабличногоДокумента.XLS);
	
	АдресХранилищаФайлВыгрузки = ПоместитьВоВременноеХранилище(Новый ДвоичныеДанные(ИмяВременногоФайлаОбмена), УникальныйИдентификатор);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзExcel(Команда)
	#Если ВебКлиент Тогда
		ТекстНСТР = НСтр("en='Import from Excel is not available in Web client.';ru='Загрузка из Excel недоступна в Web-клиенте.'");
		ПоказатьПредупреждение(Неопределено, ТекстНСТР);
		Возврат;
	#ИначеЕсли МобильныйКлиент ИЛИ МобильноеПриложениеКлиент Тогда 
		ТекстНСТР = НСтр("ru='Загрузка из Excel недоступна в мобильном клиенте.'");
		ПоказатьПредупреждение(Неопределено, ТекстНСТР);
		Возврат;
	#КонецЕсли
	
	Если Сценарий.Пустая() Тогда
		ПоказатьПредупреждение(Неопределено, "Для загрузки из файла EXCEL необходимо указать сценарий!");
		Возврат;
	КонецЕсли;
		
	флОчищать = Ложь;
	Если СоставПлана.Количество() > 0 Тогда
		ТекстНСТР = НСтр("en='Tabular section is not empty! Clear?';ru='Таблица содержит строки! Продолжить с очисткой?'");
		ПоказатьВопрос(Новый ОписаниеОповещения("ЗагрузитьИзExcelВопрос", ЭтотОбъект),
			ТекстНСТР, РежимДиалогаВопрос.ДаНетОтмена);
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзExcelВыборФайла();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзExcelВопрос(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		СоставПлана.Очистить();
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
	Иначе
		Возврат;
	КонецЕсли;
	
	ЗагрузитьИзExcelВыборФайла();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзExcelВыборФайла()
	ДиалогВыбораФайла                             = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбораФайла.Фильтр                      = НСтр("en='Data file';ru='Файл данных'") + " (*.xls)|*.xls";
	ДиалогВыбораФайла.Заголовок                   = НСтр("en='Select file';ru='Выберите файл'");
	ДиалогВыбораФайла.ПредварительныйПросмотр     = Ложь;
	ДиалогВыбораФайла.Расширение                  = "xls";
	ДиалогВыбораФайла.ИндексФильтра               = 0;
	ДиалогВыбораФайла.МножественныйВыбор          = Ложь;
	ДиалогВыбораФайла.Показать(Новый ОписаниеОповещения("ВыполнитьЗагрузкуЗавершение", ЭтотОбъект, Новый Структура("ДиалогВыбораФайла", ДиалогВыбораФайла)));
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузкуЗавершение(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
    Если ВыбранныеФайлы = Неопределено Тогда 
        Возврат;
    КонецЕсли;
	
	ФайлВыгрузки = ВыбранныеФайлы[0];
    
	Если ПустаяСтрока(ФайлВыгрузки) Тогда
		ТекстОшибки = НСтр("en='It is necessary to specify the download file.';ru='Необходимо указать файл загрузки.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Возврат;
	КонецЕсли;
	
	ВыполнитьЗагрузкуExcelНаКлиенте();
	ОбновитьВсегоВТЧ();
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьЗагрузкуExcelНаКлиенте()
	Попытка
		НашФайл = ПолучитьCOMОбъект(ФайлВыгрузки);
	Исключение
		СтрокаОшибки = ИнформацияОбОшибке().Описание + ?(ИнформацияОбОшибке().Причина = Неопределено, "", " " + НСтр("en='by reason:';ru='по причине:'") + " "
			+ ИнформацияОбОшибке().Причина.Описание + " (" + НСтр("en='perhaps MS Excel not installed!';ru='возможно, не установлен MS Excel!'") +")");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(СтрокаОшибки);
		Возврат;
	КонецПопытки;
	
	Если ХарактеристикиСценария.флТС Тогда
		ВариантАналитики = ХарактеристикиСценария.ВариантАналитикиТС;
		Если ВариантАналитики = ПредопределенноеЗначение("Перечисление.уатВариантыАналитик.ТС") Тогда
			ТипДетализации = Тип("СправочникСсылка.уатТС");
		ИначеЕсли ВариантАналитики = ПредопределенноеЗначение("Перечисление.уатВариантыАналитик.МодельТС") Тогда
			ТипДетализации = Тип("СправочникСсылка.уатМоделиТС");
		ИначеЕсли ВариантАналитики = ПредопределенноеЗначение("Перечисление.уатВариантыАналитик.ТипТС") Тогда
			ТипДетализации = Тип("СправочникСсылка.уатТипыТС");
		ИначеЕсли ВариантАналитики = ПредопределенноеЗначение("Перечисление.уатВариантыАналитик.ПринадлежностьТС") Тогда
			ТипДетализации = Тип("ПеречислениеСсылка.уатПринадлежностьТС");
		КонецЕсли;
	Иначе
		ТипДетализации = Тип("СправочникСсылка.уатТС");
	КонецЕсли;
	
	Если ХарактеристикиСценария.флСтатья Тогда
		ВариантАналитики = ХарактеристикиСценария.ВариантАналитикиСтатья;
		Если ВариантАналитики = ПредопределенноеЗначение("Перечисление.уатВариантыАналитик.СтатьяДоходов") Тогда
			ТипСтатьи = Тип("СправочникСсылка.уатСтатьиДоходов");
		Иначе
			ТипСтатьи = Тип("СправочникСсылка.уатСтатьиРасходов");
		КонецЕсли;
	Иначе
		ТипСтатьи = Тип("СправочникСсылка.уатСтатьиДоходов");
	КонецЕсли;
	
	Если ХарактеристикиСценария.флМаршрут Тогда
		ВариантАналитики = ХарактеристикиСценария.ВариантАналитикиМаршрут;
		Если ВариантАналитики = ПредопределенноеЗначение("Перечисление.уатВариантыАналитик.Маршрут") Тогда
			ТипМаршрута = Тип("СправочникСсылка.уатМаршруты");
		Иначе
			ТипМаршрута = Тип("СправочникСсылка.уатПунктыНазначения");
		КонецЕсли;
	Иначе
		ТипМаршрута = Тип("СправочникСсылка.уатМаршруты");
	КонецЕсли;
			
	флПланированиеУслуг = (уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Сценарий, "Раздел") = ПредопределенноеЗначение("Перечисление.уатРазделыПланирования.ПредоставленныеУслуги"));
	флДоходыРасходы     = (уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Сценарий, "Раздел") = ПредопределенноеЗначение("Перечисление.уатРазделыПланирования.ДоходыРасходы"));
			
	НашЛист = НашФайл.WorkSheets.Item(1);
	ПослСтр = НашЛист.Cells(1,1).SpecialCells(11).Row;
	
	СоответствиеКолонок = Новый Соответствие();
	СоответствиеКолонок.Вставить("Детализация планирования",  "ДетализацияПланирования");
	СоответствиеКолонок.Вставить("Колонна",                   "Колонна");
	СоответствиеКолонок.Вставить("Параметр выработки",        "ПараметрВыработки");
	СоответствиеКолонок.Вставить("Контрагент",                "Контрагент");
	СоответствиеКолонок.Вставить("Маршрут",                   "Маршрут");
	СоответствиеКолонок.Вставить("Объект строительства",      "ОбъектСтроительства");
	СоответствиеКолонок.Вставить("Вид перевозки",             "ВидПеревозки");
	СоответствиеКолонок.Вставить("Направление перевозки",     "НаправлениеПеревозки");
	СоответствиеКолонок.Вставить("Услуга",                    "Услуга");
	СоответствиеКолонок.Вставить("Номенклатура груза",        "Номенклатура");
	СоответствиеКолонок.Вставить("Статья",                    "Статья");
	СоответствиеКолонок.Вставить("Всего",                     "Всего");
	СоответствиеКолонок.Вставить("Количество",                "Количество");
	СоответствиеКолонок.Вставить("Договор",                   "Договор");

	СоответствиеКолонокНомер = Новый Соответствие();
	Для НомКолонки = 1 По НашЛист.Columns.Count Цикл
		ИмяКолонки = СокрЛП(НашЛист.Cells(1, НомКолонки).Value);
		Для Каждого ТекСоотв Из СоответствиеКолонок Цикл
			Если ТекСоотв.Ключ = ИмяКолонки Тогда
				Значение = СоответствиеКолонокНомер.Получить(ТекСоотв.Значение);
				Если Значение = Неопределено Тогда
					СоответствиеКолонокНомер.Вставить(ТекСоотв.Значение, НомКолонки);
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;

	Для Сч = 3 По ПослСтр Цикл
		НоваяСтрока = СоставПлана.Добавить();
		
		НомерКолонки = СоответствиеКолонокНомер.Получить("ДетализацияПланирования");
		Если НомерКолонки <> Неопределено Тогда
			Если ТипДетализации = Тип("ПеречислениеСсылка.уатПринадлежностьТС") Тогда
				ПринадлежностьТС = НашЛист.Cells(Сч, НомерКолонки).Value;
				Попытка
					НоваяСтрока.ДетализацияПланирования	= ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС." + ПринадлежностьТС);
				Исключение
				КонецПопытки;
			Иначе
				НоваяСтрока.ДетализацияПланирования	= НайтиСсылкуПоПредставлению(НашЛист.Cells(Сч, НомерКолонки).Value, ТипДетализации);
			КонецЕсли;
		КонецЕсли;
		НомерКолонки = СоответствиеКолонокНомер.Получить("Колонна");
		Если НомерКолонки <> Неопределено Тогда
			НоваяСтрока.Колонна	= НайтиСсылкуПоПредставлению(НашЛист.Cells(Сч, НомерКолонки).Value, Тип("СправочникСсылка.уатКолонны"));
		КонецЕсли;
		НомерКолонки = СоответствиеКолонокНомер.Получить("ПараметрВыработки");
		Если НомерКолонки <> Неопределено Тогда
			НоваяСтрока.ПараметрВыработки	= НайтиСсылкуПоПредставлению(НашЛист.Cells(Сч, НомерКолонки).Value, Тип("СправочникСсылка.уатПараметрыВыработки"));
		КонецЕсли;
		НомерКолонки = СоответствиеКолонокНомер.Получить("Контрагент");
		Если НомерКолонки <> Неопределено Тогда
			НоваяСтрока.Контрагент	= НайтиСсылкуПоПредставлению(НашЛист.Cells(Сч, НомерКолонки).Value, Тип("СправочникСсылка.Контрагенты"));
		КонецЕсли;
		НомерКолонки = СоответствиеКолонокНомер.Получить("Маршрут");
		Если НомерКолонки <> Неопределено Тогда
			НоваяСтрока.Маршрут	= НайтиСсылкуПоПредставлению(НашЛист.Cells(Сч, НомерКолонки).Value, ТипМаршрута);
		КонецЕсли;
		НомерКолонки = СоответствиеКолонокНомер.Получить("ОбъектСтроительства");
		Если НомерКолонки <> Неопределено Тогда
			НоваяСтрока.ОбъектСтроительства	= НайтиСсылкуПоПредставлению(НашЛист.Cells(Сч, НомерКолонки).Value, Тип("СправочникСсылка.уатОбъектыСтроительства"));
		КонецЕсли;
		НомерКолонки = СоответствиеКолонокНомер.Получить("ВидПеревозки");
		Если НомерКолонки <> Неопределено Тогда
			НоваяСтрока.ВидПеревозки	= НайтиСсылкуПоПредставлению(НашЛист.Cells(Сч, НомерКолонки).Value, Тип("СправочникСсылка.уатВидыПеревозок"));
		КонецЕсли;
		НомерКолонки = СоответствиеКолонокНомер.Получить("НаправлениеПеревозки");
		Если НомерКолонки <> Неопределено Тогда
			НоваяСтрока.НаправлениеПеревозки	= НайтиСсылкуПоПредставлению(НашЛист.Cells(Сч, НомерКолонки).Value, Тип("СправочникСсылка.уатНаправленияПеревозок"));
		КонецЕсли;
		НомерКолонки = СоответствиеКолонокНомер.Получить("Услуга");
		Если НомерКолонки <> Неопределено Тогда
			НоваяСтрока.Услуга	= НайтиСсылкуПоПредставлению(НашЛист.Cells(Сч, НомерКолонки).Value, Тип("СправочникСсылка.Номенклатура"));
		КонецЕсли;
		НомерКолонки = СоответствиеКолонокНомер.Получить("Номенклатура");
		Если НомерКолонки <> Неопределено Тогда
			НоваяСтрока.Номенклатура	= НайтиСсылкуПоПредставлению(НашЛист.Cells(Сч, НомерКолонки).Value, Тип("СправочникСсылка.Номенклатура"));
		КонецЕсли;
		НомерКолонки = СоответствиеКолонокНомер.Получить("Договор");
		Если НомерКолонки <> Неопределено Тогда
			НоваяСтрока.Договор	= НайтиСсылкуПоПредставлению(НашЛист.Cells(Сч, НомерКолонки).Value, Тип("СправочникСсылка.ДоговорыКонтрагентов"));
		КонецЕсли;
		НомерКолонки = СоответствиеКолонокНомер.Получить("Статья");
		Если НомерКолонки <> Неопределено Тогда
			НоваяСтрока.Статья	= НайтиСсылкуПоПредставлению(НашЛист.Cells(Сч, НомерКолонки).Value, ТипСтатьи);
		КонецЕсли;
		
		НомерКолонкиВсего = СоответствиеКолонокНомер.Получить("Всего");
		НомерКолонки      = НомерКолонкиВсего;
		Если НомерКолонки <> Неопределено Тогда
			КоличествоФайл = НашЛист.Cells(Сч, НомерКолонки).Value;
			НоваяСтрока.СоставПланаКоличество_Всего	= ?(КоличествоФайл = Неопределено, 0, Число(КоличествоФайл));
			
			ИмяКолонки = СокрЛП(НашЛист.Cells(2, НомерКолонки + 1).Value);
			Если ИмяКолонки = "Цена" Тогда
				НомерКолонки = НомерКолонки + 1;
				КоличествоФайл = НашЛист.Cells(Сч, НомерКолонки).Value;
				НоваяСтрока.СоставПланаЦена_Всего	= ?(КоличествоФайл = Неопределено, 0, Число(КоличествоФайл));
			КонецЕсли;
			
			ИмяКолонки = СокрЛП(НашЛист.Cells(2, НомерКолонки + 1).Value);
			Если ИмяКолонки = "Сумма" Тогда
				НомерКолонки = НомерКолонки + 1;
				КоличествоФайл = НашЛист.Cells(Сч, НомерКолонки).Value;
				НоваяСтрока.СоставПланаСумма_Всего	= ?(КоличествоФайл = Неопределено, 0, Число(КоличествоФайл));
			КонецЕсли;
			ИмяКолонки = СокрЛП(НашЛист.Cells(2, НомерКолонки + 1).Value);
			Если ИмяКолонки = "Ставка НДС" Тогда
				НомерКолонки = НомерКолонки + 1;
				СтавкаНДС = НайтиСсылкуПоПредставлению(НашЛист.Cells(Сч, НомерКолонки).Value, Тип("ПеречислениеСсылка.СтавкиНДС"));
				НоваяСтрока.СоставПланаСтавкаНДС_Всего	= СтавкаНДС;
			КонецЕсли;
			ИмяКолонки = СокрЛП(НашЛист.Cells(2, НомерКолонки + 1).Value);
			Если ИмяКолонки = "Сумма НДС" Тогда
				НомерКолонки = НомерКолонки + 1;
				КоличествоФайл = НашЛист.Cells(Сч, НомерКолонки).Value;
				НоваяСтрока.СоставПланаСуммаНДС_Всего	= ?(КоличествоФайл = Неопределено, 0, Число(КоличествоФайл));
			КонецЕсли;
		Иначе
			НомерКолонки = СоответствиеКолонокНомер.Получить("Количество");
			Если НомерКолонки <> Неопределено Тогда
				КоличествоФайл = НашЛист.Cells(Сч, НомерКолонки).Value;
				НоваяСтрока.СоставПланаКоличество_Всего	= ?(КоличествоФайл = Неопределено, 0, Число(КоличествоФайл));
				
				ИмяКолонки = СокрЛП(НашЛист.Cells(2, НомерКолонки + 1).Value);
				Если ИмяКолонки = "Цена" Тогда
					НомерКолонки = НомерКолонки + 1;
					КоличествоФайл = НашЛист.Cells(Сч, НомерКолонки).Value;
					НоваяСтрока.СоставПланаЦена_Всего	= ?(КоличествоФайл = Неопределено, 0, Число(КоличествоФайл));
				КонецЕсли;
				
				ИмяКолонки = СокрЛП(НашЛист.Cells(2, НомерКолонки + 1).Value);
				Если ИмяКолонки = "Сумма" Тогда
					НомерКолонки = НомерКолонки + 1;
					КоличествоФайл = НашЛист.Cells(Сч, НомерКолонки).Value;
					НоваяСтрока.СоставПланаСумма_Всего	= ?(КоличествоФайл = Неопределено, 0, Число(КоличествоФайл));
				КонецЕсли;
				ИмяКолонки = СокрЛП(НашЛист.Cells(2, НомерКолонки + 1).Value);
				Если ИмяКолонки = "Ставка НДС" Тогда
					НомерКолонки = НомерКолонки + 1;
					СтавкаНДС = НайтиСсылкуПоПредставлению(НашЛист.Cells(Сч, НомерКолонки).Value, Тип("ПеречислениеСсылка.СтавкиНДС"));
					НоваяСтрока.СоставПланаСтавкаНДС_Всего	= СтавкаНДС;
				КонецЕсли;
				ИмяКолонки = СокрЛП(НашЛист.Cells(2, НомерКолонки + 1).Value);
				Если ИмяКолонки = "Сумма НДС" Тогда
					НомерКолонки = НомерКолонки + 1;
					КоличествоФайл = НашЛист.Cells(Сч, НомерКолонки).Value;
					НоваяСтрока.СоставПланаСуммаНДС_Всего	= ?(КоличествоФайл = Неопределено, 0, Число(КоличествоФайл));
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
		
		Если ХарактеристикиСценария.ИспользоватьКраткосрочноеПланирование 
			И НомерКолонкиВсего <> Неопределено Тогда
			Для СчИнт = 0 По КоличествоИнтервалов Цикл
				
				НомерКолонки   = НомерКолонки + 1;
				
				КоличествоФайл = НашЛист.Cells(Сч, НомерКолонки).Value;
				НоваяСтрока["СоставПланаКоличество_" + СчИнт]	= ?(КоличествоФайл = Неопределено, 0, Число(КоличествоФайл));
				
				ИмяКолонки = СокрЛП(НашЛист.Cells(2, НомерКолонки + 1).Value);
				Если ИмяКолонки = "Цена" Тогда
					НомерКолонки = НомерКолонки + 1;
					КоличествоФайл = НашЛист.Cells(Сч, НомерКолонки).Value;
					НоваяСтрока["СоставПланаЦена_" + СчИнт]	= ?(КоличествоФайл = Неопределено, 0, Число(КоличествоФайл));
				КонецЕсли;
				
				ИмяКолонки = СокрЛП(НашЛист.Cells(2, НомерКолонки + 1).Value);
				Если ИмяКолонки = "Сумма" Тогда
					НомерКолонки = НомерКолонки + 1;
					КоличествоФайл = НашЛист.Cells(Сч, НомерКолонки).Value;
					НоваяСтрока["СоставПланаСумма_" + СчИнт]	= ?(КоличествоФайл = Неопределено, 0, Число(КоличествоФайл));
				КонецЕсли;
				ИмяКолонки = СокрЛП(НашЛист.Cells(2, НомерКолонки + 1).Value);
				Если ИмяКолонки = "Ставка НДС" Тогда
					НомерКолонки = НомерКолонки + 1;
					СтавкаНДС = НайтиСсылкуПоПредставлению(НашЛист.Cells(Сч, НомерКолонки).Value, Тип("ПеречислениеСсылка.СтавкиНДС"));
					НоваяСтрока["СоставПланаСтавкаНДС_" + СчИнт]	= СтавкаНДС;
				КонецЕсли;
				ИмяКолонки = СокрЛП(НашЛист.Cells(2, НомерКолонки + 1).Value);
				Если ИмяКолонки = "Сумма НДС" Тогда
					НомерКолонки = НомерКолонки + 1;
					КоличествоФайл = НашЛист.Cells(Сч, НомерКолонки).Value;
					НоваяСтрока["СоставПланаСуммаНДС_" + СчИнт]	= ?(КоличествоФайл = Неопределено, 0, Число(КоличествоФайл));
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;

	КонецЦикла;
	
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаСервереБезКонтекста
Функция НайтиСсылкуПоПредставлению(Представление, ТипОбъекта)
	Если НЕ ЗначениеЗаполнено(Представление) Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	ОбъектМет = Метаданные.НайтиПоТипу(ТипОбъекта);
	Если Метаданные.Справочники.Найти(ОбъектМет.Имя) <> Неопределено Тогда //справочник
		Возврат Справочники[ОбъектМет.Имя].НайтиПоНаименованию(Представление);
	Иначе //перечисление
		Для Каждого ТекЗначениеПеречисления Из Метаданные.Перечисления[ОбъектМет.Имя].ЗначенияПеречисления Цикл
			Возврат Перечисления[ОбъектМет.Имя][ТекЗначениеПеречисления.Имя]
		КонецЦикла;
	КонецЕсли;
КонецФункции

&НаКлиенте
Процедура ОкруглитьЦены(Команда)
	ПараметрыОткрытия = Новый Структура("ТолькоОкругление, СтарыеЦены", Истина, Ложь);
	
	ОткрытьФорму("Обработка.уатРедактированиеТарифов_уэ.Форма.ПараметрыОкругления", ПараметрыОткрытия, ЭтотОбъект,,,,
		Новый ОписаниеОповещения("ИзменитьОкруглитьНаПроцентЗавершение", ЭтотОбъект, ПараметрыОткрытия), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьНаПроцент(Команда)
	ПараметрыОткрытия = Новый Структура("ТолькоОкругление, СтарыеЦены", Ложь, Ложь);
	
	ОткрытьФорму("Обработка.уатРедактированиеТарифов_уэ.Форма.ПараметрыИзмененияОкругления", ПараметрыОткрытия, ЭтотОбъект,,,,
		Новый ОписаниеОповещения("ИзменитьОкруглитьНаПроцентЗавершение", ЭтотОбъект, ПараметрыОткрытия), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьОкруглитьНаПроцентЗавершение(ПараметрыРасчета, ДополнительныеПараметры) Экспорт
	Если ПараметрыРасчета = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	флИзменение = (НЕ ДополнительныеПараметры.ТолькоОкругление И ПараметрыРасчета.ПроцентИзменения <> 0);
	флОкругление = (ДополнительныеПараметры.ТолькоОкругление ИЛИ ПараметрыРасчета.Округлять);
	
	Для Каждого ТекСтрока Из СоставПлана Цикл
		Если флИзменение Тогда
			ТекСтрока["СоставПланаЦена_Всего"] = ТекСтрока["СоставПланаЦена_Всего"] * (1 + ПараметрыРасчета.ПроцентИзменения / 100);
		КонецЕсли;
		Если флОкругление Тогда
			ТекСтрока["СоставПланаЦена_Всего"] = ОкруглитьЦену(ТекСтрока["СоставПланаЦена_Всего"], ПараметрыРасчета.ТочностьОкругления, ПараметрыРасчета.РежимОкругления);
		КонецЕсли;
		Если флИзменение ИЛИ флОкругление Тогда
			РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрока, "Всего");
		КонецЕсли;
		Если ИспользоватьКраткосрочноеПланирование Тогда
			Для Сч = 0 По КоличествоИнтервалов Цикл
				Если флИзменение Тогда
					ТекСтрока["СоставПланаЦена_" + Сч] = ТекСтрока["СоставПланаЦена_" + Сч] * (1 + ПараметрыРасчета.ПроцентИзменения / 100);
				КонецЕсли;
				Если флОкругление Тогда
					ТекСтрока["СоставПланаЦена_" + Сч] = ОкруглитьЦену(ТекСтрока["СоставПланаЦена_" + Сч], ПараметрыРасчета.ТочностьОкругления, ПараметрыРасчета.РежимОкругления);
				КонецЕсли;
				Если флИзменение ИЛИ флОкругление Тогда
					РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрока, Сч);
				КонецЕсли;
			КонецЦикла;	
		КонецЕсли;

	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция ОкруглитьЦену(Число, ТочностьОкругления, РежимОкругленияТарифа)
	Перем Результат;
		
	// вычислим количество интервалов, входящих в число
	Если ТочностьОкругления <> 0 Тогда
		КоличествоИнтерваловОкр = Число / ТочностьОкругления;
	Иначе
		КоличествоИнтерваловОкр = 0;
	КонецЕсли;
		
	// вычислим целое количество интервалов.
	КоличествоЦелыхИнтервалов = Цел(КоличествоИнтерваловОкр);
		
	Если КоличествоИнтерваловОкр = КоличествоЦелыхИнтервалов Тогда
		// Числа поделились нацело. Округлять не нужно.
		Результат = Число;
	Иначе
		Если РежимОкругленияТарифа = 0 Тогда
			// По арифметическим правилам
			// При точности округления "0.1" 0.35 должно округлится до 0.4,
			// а 0.34 до 0.3
			Результат = ТочностьОкругления * Окр(КоличествоИнтерваловОкр, 0, РежимОкругления.Окр15как20);
			
		ИначеЕсли РежимОкругленияТарифа = 1 Тогда
			// В большую сторону
			// При точности округления "0.1" 0.35 должно округлится до 0.4, а -0.35 до -0.3
			Если КоличествоЦелыхИнтервалов > 0 Тогда
				Результат = ТочностьОкругления * (КоличествоЦелыхИнтервалов + 1);
			Иначе
				Результат = ТочностьОкругления * КоличествоЦелыхИнтервалов;
			КонецЕсли;
		Иначе
			// В меньшую сторону
			// При точности округления "0.1" 0.35 должно округлится до 0.3, а -0.35 до -0.4
			Если КоличествоЦелыхИнтервалов > 0 Тогда
				Результат = ТочностьОкругления * КоличествоЦелыхИнтервалов;
			Иначе
				Результат = ТочностьОкругления * (КоличествоЦелыхИнтервалов - 1);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Результат;
КонецФункции // ОкруглитьЦену()

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура СценарийПриИзменении(Элемент)
	
	СкорректироватьПериодЗаполнения();
	ИнициализацияКомпоновщика();
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

&НаКлиенте
Процедура РазрезыПланированияРазрезПланированияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.РазрезыПланирования.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ВариантАналитики              = "";
			
	Если ТекущиеДанные.РазрезПланирования = ПредопределенноеЗначение("Перечисление.уатРазрезыПланирования.ТС") Тогда
		ТекущиеДанные.ВариантАналитики   = ХарактеристикиСценария.ВариантАналитикиТС;
	ИначеЕсли ТекущиеДанные.РазрезПланирования = ПредопределенноеЗначение("Перечисление.уатРазрезыПланирования.Статья") Тогда
		ТекущиеДанные.ВариантАналитики   = ХарактеристикиСценария.ВариантАналитикиСтатья;
	ИначеЕсли ТекущиеДанные.РазрезПланирования = ПредопределенноеЗначение("Перечисление.уатРазрезыПланирования.Маршрут") Тогда
		ТекущиеДанные.ВариантАналитики   = ХарактеристикиСценария.ВариантАналитикиМаршрут;
	ИначеЕсли ТекущиеДанные.РазрезПланирования = ПредопределенноеЗначение("Перечисление.уатРазрезыПланирования.Контрагент") Тогда
		ТекущиеДанные.ВариантАналитики   = ХарактеристикиСценария.ВариантАналитикиКонтрагент;
	КонецЕсли;
	
	ТекущиеДанные.Представление = ?(ЗначениеЗаполнено(ТекущиеДанные.ВариантАналитики), 
		ТекущиеДанные.ВариантАналитики, ТекущиеДанные.РазрезПланирования);

КонецПроцедуры

&НаКлиенте
Процедура РазрезыПланированияРазрезПланированияНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Элементы.РазрезыПланированияРазрезПланирования.СписокВыбора.Очистить();
	ДанныеВыбора = ПолучитьСписокВыбораРазрезПланирования(ХарактеристикиСценария.Раздел);

КонецПроцедуры

&НаКлиенте
Процедура РазрезыПланированияРазрезПланированияОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	Конецесли;
	
	Элементы.РазрезыПланированияРазрезПланирования.СписокВыбора.Очистить();
	Элементы.РазрезыПланированияРазрезПланирования.СписокВыбора.Добавить(ВыбранноеЗначение);
	
	ТекущиеДанные = Элементы.РазрезыПланирования.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.РазрезПланирования = ВыбранноеЗначение;
	
КонецПроцедуры

&НаКлиенте
Процедура ВариантЗаполненияПриИзменении(Элемент)
	
	Сценарий = ТекСценарий;
	Если ВариантЗаполнения = 2 Тогда
		ЗаполнитьАналитики(ХарактеристикиСценария);
	ИначеЕсли ВариантЗаполнения = 1
		И ХарактеристикиСценария.ВидПланирования = ПредопределенноеЗначение("Перечисление.уатВидыПланирования.Краткосрочный") Тогда
		Сценарий = ХарактеристикиСценария.ВедущийСценарий; 
	КонецЕсли;
	
	ИнициализацияКомпоновщика();
	УстановитьВидимостьДоступность();

КонецПроцедуры

&НаСервере
Процедура ЗаполнитьАналитики(ХарактеристикиСценария)
	РазрезыПланирования.Очистить();
	
	мРазрезыПланирования = Сценарий.РазрезыПланирования;
	Для Каждого ТекСтрока Из мРазрезыПланирования Цикл
		НоваяСтрока = РазрезыПланирования.Добавить();
		НоваяСтрока.Представление = ?(ЗначениеЗаполнено(ТекСтрока.ВариантАналитики), 
			ТекСтрока.ВариантАналитики, ТекСтрока.РазрезПланирования);
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
	КонецЦикла;
	
	НужныеСтроки = РазрезыПланирования.НайтиСтроки(
		Новый Структура("РазрезПланирования", Перечисления.уатРазрезыПланирования.ТС));
	Если НужныеСтроки.Количество() = 0 Тогда
		НоваяСтрока = РазрезыПланирования.Добавить();
		НоваяСтрока.ВариантАналитики   = Перечисления.уатВариантыАналитик.ТС;
		НоваяСтрока.РазрезПланирования = Перечисления.уатРазрезыПланирования.ТС;
	КонецЕсли;
	
	НужныеСтроки = РазрезыПланирования.НайтиСтроки(
		Новый Структура("РазрезПланирования", Перечисления.уатРазрезыПланирования.Колонна));
	Если НужныеСтроки.Количество() = 0 Тогда
		НоваяСтрока = РазрезыПланирования.Добавить();
		НоваяСтрока.РазрезПланирования = Перечисления.уатРазрезыПланирования.Колонна;
	КонецЕсли;
		
	НужныеСтроки = РазрезыПланирования.НайтиСтроки(
		Новый Структура("РазрезПланирования", Перечисления.уатРазрезыПланирования.ПараметрВыработки));
	Если НужныеСтроки.Количество() <> 0 Тогда
		СписокПараметров = Новый СписокЗначений();
		СписокПараметров.ЗагрузитьЗначения(ХарактеристикиСценария.МассивПараметровВыработки);
		
		НужныеСтроки[0].Значение = СписокПараметров;
	КонецЕсли;
	
	Если ХарактеристикиСценария.флВыработка Тогда
		НужныеСтроки = РазрезыПланирования.НайтиСтроки(
		Новый Структура("РазрезПланирования", Перечисления.уатРазрезыПланирования.ПараметрВыработки));
		Если НужныеСтроки.Количество() = 0 Тогда
			НоваяСтрока = РазрезыПланирования.Добавить();
			НоваяСтрока.РазрезПланирования = Перечисления.уатРазрезыПланирования.ПараметрВыработки;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоставПланаПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекСтрока = Элементы.СоставПлана.ТекущиеДанные;
		
	Если ТекСтрока.ПараметрВыработкиВременный Тогда
		ФорматРедактирования = "ЧДЦ=2; ЧРД=:";
	Иначе
		ФорматРедактирования = "";
	КонецЕсли;
	
	ПодставлятьСтавку = НоваяСтрока И НЕ Копирование И УчитыватьНДС
			И (ХарактеристикиСценария.Раздел
				= ПредопределенноеЗначение("Перечисление.уатРазделыПланирования.ПредоставленныеУслуги") 
			ИЛИ ХарактеристикиСценария.Раздел
				= ПредопределенноеЗначение("Перечисление.уатРазделыПланирования.ДоходыРасходы"));
	
	ОсновнаяСтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(ПользователиКлиентСервер.АвторизованныйПользователь(), "ОсновнаяСтавкаНДС");
	Элементы["СоставПланаКоличество_Всего"].ФорматРедактирования = ФорматРедактирования;
	Если ПодставлятьСтавку Тогда
		ТекСтрока["СоставПланаСтавкаНДС_Всего"] = ОсновнаяСтавкаНДС;
	КонецЕсли;
	
	Если ИспользоватьКраткосрочноеПланирование Тогда
		Для Сч = 0 По КоличествоИнтервалов Цикл
			Элементы["СоставПланаКоличество_" + Сч].ФорматРедактирования = ФорматРедактирования;
			Если ПодставлятьСтавку Тогда
				ТекСтрока["СоставПланаСтавкаНДС_" + Сч] = ОсновнаяСтавкаНДС;
			КонецЕсли;
		КонецЦикла;	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СоставПланаПриОкончанииРедактирования(Элемент, НоваяСтрока, ОтменаРедактирования)
	ОбновитьВсегоВТЧ();
КонецПроцедуры

&НаКлиенте
Процедура СоставПланаПараметрВыработкиПриИзменении(Элемент)
	СтрокаТабличнойЧасти = Элементы.СоставПлана.ТекущиеДанные;
		
	ОбновитьПараметрВыработкиВременный();
	
	Если СтрокаТабличнойЧасти.ПараметрВыработкиВременный Тогда
		ФорматРедактирования = "ЧДЦ=2; ЧРД=:";
	Иначе
		ФорматРедактирования = "";
	КонецЕсли;
	
	Элементы["СоставПланаКоличество_Всего"].ФорматРедактирования = ФорматРедактирования;
	
	Если ИспользоватьКраткосрочноеПланирование Тогда
		Для Сч = 0 По КоличествоИнтервалов Цикл
			Элементы["СоставПланаКоличество_" + Сч].ФорматРедактирования = ФорматРедактирования;
		КонецЦикла;	
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СоставПланаНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	уатЗащищенныеФункцииКлиент.ДиалогВыбораГруза(Элемент, Элементы.СоставПлана.ТекущиеДанные.Номенклатура, Элемент, СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СоставПланаКоличествоПриИзменении(Элемент)
	ТекСтрока = Элементы.СоставПлана.ТекущиеДанные;
	Если ТекСтрока.ПараметрВыработкиВременный Тогда
		уатЗащищенныеФункцииСервер.КонтрольВводаВремени(ТекСтрока[Элемент.Имя]);
	КонецЕсли;
	
	Если СтрНайти(Элемент.Имя, "Всего") <> 0 Тогда
		Индекс = "Всего";
	Иначе
		Индекс = Сред(Элемент.Имя, СтрНайти(Элемент.Имя, "_") + 1, СтрДлина(Элемент.Имя));
	КонецЕсли;
	
	РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрока, Индекс);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СоставПланаЦенаПриИзменении(Элемент)
	
	ТекСтрока = Элементы.СоставПлана.ТекущиеДанные;
	Если ТекСтрока.ПараметрВыработкиВременный Тогда
		уатЗащищенныеФункцииСервер.КонтрольВводаВремени(ТекСтрока[Элемент.Имя]);
	КонецЕсли;
	
	Если СтрНайти(Элемент.Имя, "Всего") <> 0 Тогда
		Индекс = "Всего";
	Иначе
		Индекс = Сред(Элемент.Имя, СтрНайти(Элемент.Имя, "_") + 1, СтрДлина(Элемент.Имя));
	КонецЕсли;

	РассчитатьСуммуВСтрокеТабличнойЧасти(ТекСтрока, Индекс);

КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СоставПланаСуммаПриИзменении(Элемент)
	ТекСтрока = Элементы.СоставПлана.ТекущиеДанные;
	Если ТекСтрока.ПараметрВыработкиВременный Тогда
		уатЗащищенныеФункцииСервер.КонтрольВводаВремени(ТекСтрока[Элемент.Имя]);
	КонецЕсли;
	
	Если СтрНайти(Элемент.Имя, "Всего") <> 0 Тогда
		Индекс = "Всего";
	Иначе
		Индекс = Сред(Элемент.Имя, СтрНайти(Элемент.Имя, "_") + 1, СтрДлина(Элемент.Имя));
	КонецЕсли;

	Количество = ТекСтрока["СоставПланаКоличество_" + Индекс];
	Если Количество <> 0 Тогда
		ТекСтрока["СоставПланаЦена_" + Индекс]
			= ТекСтрока["СоставПланаСумма_" + Индекс] / Количество;
	КонецЕсли;
	
	РассчитатьСуммуНДС(ТекСтрока);
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_СоставПланаСтавкаНДСПриИзменении(Элемент)
	ТекСтрока = Элементы.СоставПлана.ТекущиеДанные;
	Если ТекСтрока.ПараметрВыработкиВременный Тогда
		уатЗащищенныеФункцииСервер.КонтрольВводаВремени(ТекСтрока[Элемент.Имя]);
	КонецЕсли;
	
	Если СтрНайти(Элемент.Имя, "Всего") <> 0 Тогда
		Индекс = "Всего";
	Иначе
		Индекс = Сред(Элемент.Имя, СтрНайти(Элемент.Имя, "_") + 1, СтрДлина(Элемент.Имя));
	КонецЕсли;
	
	РассчитатьСуммуНДС(ТекСтрока, Индекс);

КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьВсемиВозможнымиКомбинациями(Массив, СтруктураСтроки, Уровень, УровеньКонец)
	
	Если ТипЗнч(РазрезыПланирования[Уровень].Значение) = Тип("СписокЗначений") Тогда
		Для Сч = 0 По РазрезыПланирования[Уровень].Значение.Количество() - 1 Цикл
			ТекСтрока = РазрезыПланирования[Уровень].Значение[Сч];
			Если РазрезыПланирования[Уровень].РазрезПланирования = Перечисления.уатРазрезыПланирования.ТС Тогда
				СтруктураСтроки.ДетализацияПланирования = ТекСтрока.Значение;
			ИначеЕсли РазрезыПланирования[Уровень].РазрезПланирования = Перечисления.уатРазрезыПланирования.Контрагент Тогда
				СтруктураСтроки.Контрагент = ТекСтрока.Значение;
			ИначеЕсли РазрезыПланирования[Уровень].РазрезПланирования = Перечисления.уатРазрезыПланирования.Колонна Тогда
				СтруктураСтроки.Колонна = ТекСтрока.Значение;
			ИначеЕсли РазрезыПланирования[Уровень].РазрезПланирования = Перечисления.уатРазрезыПланирования.ПараметрВыработки Тогда
				СтруктураСтроки.ПараметрВыработки = ТекСтрока.Значение;
			ИначеЕсли РазрезыПланирования[Уровень].РазрезПланирования = Перечисления.уатРазрезыПланирования.ВидПеревозки Тогда
				СтруктураСтроки.ВидПеревозки = ТекСтрока.Значение;
			ИначеЕсли РазрезыПланирования[Уровень].РазрезПланирования = Перечисления.уатРазрезыПланирования.Договор Тогда
				СтруктураСтроки.Договор = ТекСтрока.Значение;
			ИначеЕсли РазрезыПланирования[Уровень].РазрезПланирования = Перечисления.уатРазрезыПланирования.Маршрут Тогда
				СтруктураСтроки.Маршрут = ТекСтрока.Значение;
			ИначеЕсли РазрезыПланирования[Уровень].РазрезПланирования = Перечисления.уатРазрезыПланирования.ОбъектСтроительства Тогда
				СтруктураСтроки.ОбъектСтроительства = ТекСтрока.Значение;
			ИначеЕсли РазрезыПланирования[Уровень].РазрезПланирования = Перечисления.уатРазрезыПланирования.НоменклатураГруза Тогда
				СтруктураСтроки.Номенклатура = ТекСтрока.Значение;
			ИначеЕсли РазрезыПланирования[Уровень].РазрезПланирования = Перечисления.уатРазрезыПланирования.НаправлениеПеревозки Тогда
				СтруктураСтроки.НаправлениеПеревозки = ТекСтрока.Значение;
			ИначеЕсли РазрезыПланирования[Уровень].РазрезПланирования = Перечисления.уатРазрезыПланирования.Услуга Тогда
				СтруктураСтроки.Услуга = ТекСтрока.Значение;
			ИначеЕсли РазрезыПланирования[Уровень].РазрезПланирования = Перечисления.уатРазрезыПланирования.Статья Тогда
				СтруктураСтроки.Статья = ТекСтрока.Значение;
			КонецЕсли;
			
			Если Уровень = УровеньКонец Тогда
				ТекСтруктураСтроки = Новый Структура("ДетализацияПланирования, Контрагент, Колонна, ПараметрВыработки, ВидПеревозки,
					|Договор, Маршрут, ОбъектСтроительства, НаправлениеПеревозки, Номенклатура, Услуга, Статья");
				ЗаполнитьЗначенияСвойств(ТекСтруктураСтроки, СтруктураСтроки);
				Массив.Добавить(ТекСтруктураСтроки);
			Иначе
				ЗаполнитьВсемиВозможнымиКомбинациями(Массив, СтруктураСтроки, Уровень + 1, УровеньКонец)
			КонецЕсли;
		КонецЦикла;
	Иначе
		ТекСтрока = РазрезыПланирования[Уровень].Значение;
		Если РазрезыПланирования[Уровень].РазрезПланирования = Перечисления.уатРазрезыПланирования.ТС Тогда
			СтруктураСтроки.ДетализацияПланирования = ТекСтрока;
		ИначеЕсли РазрезыПланирования[Уровень].РазрезПланирования = Перечисления.уатРазрезыПланирования.Контрагент Тогда
			СтруктураСтроки.Контрагент = ТекСтрока;
		ИначеЕсли РазрезыПланирования[Уровень].РазрезПланирования = Перечисления.уатРазрезыПланирования.Колонна Тогда
			СтруктураСтроки.Колонна = ТекСтрока;
		ИначеЕсли РазрезыПланирования[Уровень].РазрезПланирования = Перечисления.уатРазрезыПланирования.ПараметрВыработки Тогда
			СтруктураСтроки.ПараметрВыработки = ТекСтрока;
		ИначеЕсли РазрезыПланирования[Уровень].РазрезПланирования = Перечисления.уатРазрезыПланирования.ВидПеревозки Тогда
			СтруктураСтроки.ВидПеревозки = ТекСтрока;
		ИначеЕсли РазрезыПланирования[Уровень].РазрезПланирования = Перечисления.уатРазрезыПланирования.Договор Тогда
			СтруктураСтроки.Договор = ТекСтрока;
		ИначеЕсли РазрезыПланирования[Уровень].РазрезПланирования = Перечисления.уатРазрезыПланирования.Маршрут Тогда
			СтруктураСтроки.Маршрут = ТекСтрока;
		ИначеЕсли РазрезыПланирования[Уровень].РазрезПланирования = Перечисления.уатРазрезыПланирования.ОбъектСтроительства Тогда
			СтруктураСтроки.ОбъектСтроительства = ТекСтрока;
		ИначеЕсли РазрезыПланирования[Уровень].РазрезПланирования = Перечисления.уатРазрезыПланирования.НоменклатураГруза Тогда
			СтруктураСтроки.Номенклатура = ТекСтрока;
		ИначеЕсли РазрезыПланирования[Уровень].РазрезПланирования = Перечисления.уатРазрезыПланирования.НаправлениеПеревозки Тогда
			СтруктураСтроки.НаправлениеПеревозки = ТекСтрока;
		ИначеЕсли РазрезыПланирования[Уровень].РазрезПланирования = Перечисления.уатРазрезыПланирования.Услуга Тогда
			СтруктураСтроки.Услуга = ТекСтрока;
		ИначеЕсли РазрезыПланирования[Уровень].РазрезПланирования = Перечисления.уатРазрезыПланирования.Статья Тогда
			СтруктураСтроки.Статья = ТекСтрока;
		КонецЕсли;
		
		Если Уровень = УровеньКонец Тогда
			ТекСтруктураСтроки = Новый Структура("ДетализацияПланирования, Контрагент, Колонна, ПараметрВыработки, ВидПеревозки,
			|Договор, Маршрут, ОбъектСтроительства, НаправлениеПеревозки, Номенклатура, Услуга, Статья");
			ЗаполнитьЗначенияСвойств(ТекСтруктураСтроки, СтруктураСтроки);
			Массив.Добавить(ТекСтруктураСтроки);
		Иначе
			ЗаполнитьВсемиВозможнымиКомбинациями(Массив, СтруктураСтроки, Уровень + 1, УровеньКонец)
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьСоставПланаСервер(флОчищать, ХарактеристикиСценария)
	
	Если флОчищать Тогда
		СоставПлана.Очистить();
	КонецЕсли;
	
	флТС                      = ХарактеристикиСценария.флТС;
	флКолонна                 = Истина;
	флПараметрВыработки       = ХарактеристикиСценария.флПараметрВыработки ИЛИ ХарактеристикиСценария.флВыработка;
	флВидПеревозки            = ХарактеристикиСценария.флВидПеревозки;
	флКонтрагент              = ХарактеристикиСценария.флКонтрагент;
	флДоговор                 = ХарактеристикиСценария.флДоговор;
	флМаршрут                 = ХарактеристикиСценария.флМаршрут;
	флОбъектСтроительства     = ХарактеристикиСценария.флОбъектСтроительства;
	флНаправлениеПеревозки    = ХарактеристикиСценария.флНаправлениеПеревозки;
	флНоменклатураГруза       = ХарактеристикиСценария.флНоменклатураГруза;
	флУслуга                  = ХарактеристикиСценария.флУслуга;
	флСтатья                  = ХарактеристикиСценария.флСтатья;
					
	Если ВариантЗаполнения = 2 Тогда
		СтруктураСтроки = Новый Структура("ДетализацияПланирования, Контрагент, Колонна, ПараметрВыработки, ВидПеревозки,
			|Договор, Маршрут, ОбъектСтроительства, НаправлениеПеревозки, Номенклатура, Услуга, Статья");
		МассивСтрок = Новый Массив();
		ЗаполнитьВсемиВозможнымиКомбинациями(МассивСтрок, СтруктураСтроки, 0, РазрезыПланирования.Количество() - 1);
		
		Для Каждого ТекСтрока Из МассивСтрок Цикл
			НоваяСтрока = СоставПлана.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		КонецЦикла;
	Иначе

		ПоляСвертки    = ?(флПараметрВыработки, "ПараметрВыработки", "");
		ПоляСвертки    = ПоляСвертки + ?(флВидПеревозки, ?(ЗначениеЗаполнено(ПоляСвертки), ", ", "") + "ВидПеревозки", "");
		ПоляСвертки    = ПоляСвертки + ?(флКонтрагент, ?(ЗначениеЗаполнено(ПоляСвертки),   ", ", "") + "Контрагент", "");
		ПоляСвертки    = ПоляСвертки + ?(флДоговор, ?(ЗначениеЗаполнено(ПоляСвертки),  ", ", "") + "Договор", "");
		ПоляСвертки    = ПоляСвертки + ?(флМаршрут, ?(ЗначениеЗаполнено(ПоляСвертки),  ", ", "") + "Маршрут", "");
		ПоляСвертки    = ПоляСвертки + ?(флОбъектСтроительства, ?(ЗначениеЗаполнено(ПоляСвертки), ", ", "") + "ОбъектСтроительства", "");
		ПоляСвертки    = ПоляСвертки + ?(флНаправлениеПеревозки, ?(ЗначениеЗаполнено(ПоляСвертки), ", ", "") + "НаправлениеПеревозки", "");
		ПоляСвертки    = ПоляСвертки + ?(флНоменклатураГруза, ?(ЗначениеЗаполнено(ПоляСвертки), ", ", "") + "Номенклатура", "");
		ПоляСвертки    = ПоляСвертки + ?(флУслуга, ?(ЗначениеЗаполнено(ПоляСвертки), ", ", "") + "Услуга", "");
		ПоляСвертки    = ПоляСвертки + ?(флСтатья, ?(ЗначениеЗаполнено(ПоляСвертки), ", ", "") + "Статья", "");
		ПоляСвертки    = ПоляСвертки + ?(ЗначениеЗаполнено(ПоляСвертки), ", ", "") + "Подразделение";

		ТекХарактеристикиСценария = ЗаполнитьХарактеристикиСценария(Сценарий);
		
		СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);
		СхемаКомпоновкиДанных.Параметры.ДетализацияТС.Значение   = ТекХарактеристикиСценария.ВариантАналитикиТС;
		
		Если Сценарий.Периодичность = ТекСценарий.Периодичность Тогда
			СхемаКомпоновкиДанных.Параметры.Организация.Значение   = Организация;
			СхемаКомпоновкиДанных.Параметры.ДатаНач.Значение       = НачалоДня(НачалоПериода);
			СхемаКомпоновкиДанных.Параметры.ДатаКон.Значение       = КонецДня(КонецПериода);
			
			Если ВариантЗаполнения = 1 Тогда
				СхемаКомпоновкиДанных.Параметры.Периодичность.Значение = Сценарий.Периодичность;
			КонецЕсли;
			
			СхемаКомпоновкиДанных.Параметры.Сценарий.Значение = Сценарий;
			
			КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
			НастройкиКомпоновки = КомпоновщикОтбор.ПолучитьНастройки();
			МакетКомпоновки     = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
			
			ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
			ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,,, Истина);
			
			ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
			тблЗапросДанные = Новый ТаблицаЗначений;
			ПроцессорВывода.УстановитьОбъект(тблЗапросДанные);
			ПроцессорВывода.Вывести(ПроцессорКомпоновки);
			
			тблЗапросДанные.Свернуть("ДетализацияПланирования, " + ПоляСвертки, "Количество, Сумма, СуммаНДС");
			Для Каждого ТекСтрока Из тблЗапросДанные Цикл
				Если флПараметрВыработки
					И ХарактеристикиСценария.МассивПараметровВыработки.Найти(ТекСтрока.ПараметрВыработки) = Неопределено Тогда
					Продолжить;
				КонецЕсли;
				НоваяСтрока = СоставПлана.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
				НоваяСтрока["СоставПланаКоличество_Всего"] = ТекСтрока.Количество;
				НоваяСтрока["СоставПланаСумма_Всего"]      = ТекСтрока.Сумма;
				НоваяСтрока["СоставПланаСуммаНДС_Всего"]   = ТекСтрока.СуммаНДС;
				Если флПараметрВыработки И ТекСтрока.ПараметрВыработки.Временный Тогда
					НоваяСтрока["СоставПланаКоличество_Всего"] = НоваяСтрока["СоставПланаКоличество_Всего"] / 3600;
				КонецЕсли;
				Если НоваяСтрока["СоставПланаКоличество_Всего"] > 0 Тогда
					НоваяСтрока["СоставПланаЦена_Всего"] = НоваяСтрока["СоставПланаСумма_Всего"] / НоваяСтрока["СоставПланаКоличество_Всего"]
				КонецЕсли;
			КонецЦикла;
			
			Если ИспользоватьКраткосрочноеПланирование Тогда
				Если Сценарий.ПериодичностьКраткосрочногоПланирования = ТекСценарий.ПериодичностьКраткосрочногоПланирования Тогда
					
					ДобавлениеДатаНачала    = ПланированиеКлиентСервер.РассчитатьДатуНачалаПериода(НачалоДня(НачалоПериода),Сценарий.ПериодичностьКраткосрочногоПланирования);
					ДобавлениеДатаОкончания = ПланированиеКлиентСервер.РассчитатьДатуОкончанияПериода(ДобавлениеДатаНачала, Сценарий.ПериодичностьКраткосрочногоПланирования);
					
					Сч = 0;
					Пока ДобавлениеДатаНачала < КонецДня(КонецПериода) Цикл
						
						СхемаКомпоновкиДанных = ПолучитьИзВременногоХранилища(АдресСхемыКомпоновкиДанных);
						СхемаКомпоновкиДанных.Параметры.Организация.Значение   = Организация;
						СхемаКомпоновкиДанных.Параметры.ДатаНач.Значение       = НачалоДня(ДобавлениеДатаНачала);
						СхемаКомпоновкиДанных.Параметры.ДатаКон.Значение       = КонецДня(ДобавлениеДатаОкончания);
						
						Если ВариантЗаполнения = 1 Тогда
							СхемаКомпоновкиДанных.Параметры.Периодичность.Значение = Сценарий.ПериодичностьКраткосрочногоПланирования;
						КонецЕсли;
						
						СхемаКомпоновкиДанных.Параметры.Сценарий.Значение = Сценарий;
						
						КомпоновщикМакета = Новый КомпоновщикМакетаКомпоновкиДанных;
						НастройкиКомпоновки = КомпоновщикОтбор.ПолучитьНастройки();
						МакетКомпоновки     = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
						
						ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
						ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,,, Истина);
						
						ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
						тблЗапросДанные = Новый ТаблицаЗначений;
						ПроцессорВывода.УстановитьОбъект(тблЗапросДанные);
						ПроцессорВывода.Вывести(ПроцессорКомпоновки);
						тблЗапросДанные.Свернуть("ДетализацияПланирования, " + ПоляСвертки, "Количество, Сумма, СуммаНДС");
						
						
						Для Каждого ТекСтрока Из тблЗапросДанные Цикл
		
							мПоляСвертки   = СтрЗаменить(ПоляСвертки, ", Подразделение", "");
							Характеристики = Новый Структура("ДетализацияПланирования, " + мПоляСвертки);
							ЗаполнитьЗначенияСвойств(Характеристики, ТекСтрока);
							
							НужнаяСтрока = СоставПлана.НайтиСтроки(Характеристики);
							Если НужнаяСтрока.Количество() <> 0 Тогда
								НужнаяСтрока[0]["СоставПланаКоличество_" + Сч] = ТекСтрока.Количество;
								НужнаяСтрока[0]["СоставПланаСумма_" + Сч]      = ТекСтрока.Сумма;
								НужнаяСтрока[0]["СоставПланаСуммаНДС_" + Сч]   = ТекСтрока.СуммаНДС;
								Если флПараметрВыработки И ТекСтрока.ПараметрВыработки.Временный Тогда
									НужнаяСтрока[0]["СоставПланаКоличество_" + Сч] = НужнаяСтрока[0]["СоставПланаКоличество_" + Сч] / 3600;
								КонецЕсли;
								Если НужнаяСтрока[0]["СоставПланаКоличество_"+ Сч] > 0 Тогда
									НужнаяСтрока[0]["СоставПланаЦена_" + Сч] = НужнаяСтрока[0]["СоставПланаСумма_Всего"] / НужнаяСтрока[0]["СоставПланаКоличество_" + Сч];
								КонецЕсли;
							КонецЕсли;
						КонецЦикла;
						
						ДобавлениеДатаНачала    = ПланированиеКлиентСервер.РассчитатьДатуНачалаПериода(ДобавлениеДатаОкончания + 1 ,   Сценарий.ПериодичностьКраткосрочногоПланирования);
						ДобавлениеДатаОкончания = ПланированиеКлиентСервер.РассчитатьДатуОкончанияПериода(ДобавлениеДатаОкончания + 1, Сценарий.ПериодичностьКраткосрочногоПланирования);
						Сч = Сч + 1;
					КонецЦикла;
				КонецЕсли;
			КонецЕсли;
			
		ИначеЕсли ПервыйПериодБольше(Сценарий.Периодичность, ТекСценарий.Периодичность) Тогда
			Если Сценарий.ИспользоватьКраткосрочноеПланирование 
				И (Сценарий.ПериодичностьКраткосрочногоПланирования = ТекСценарий.Периодичность
				ИЛИ ПервыйПериодБольше(Сценарий.ПериодичностьКраткосрочногоПланирования, ТекСценарий.Периодичность)) Тогда
				
				ДобавлениеДатаНачала    = ПланированиеКлиентСервер.РассчитатьДатуНачалаПериода(НачалоДня(НачалоПериода),Сценарий.ПериодичностьКраткосрочногоПланирования);
				ДобавлениеДатаОкончания = ПланированиеКлиентСервер.РассчитатьДатуОкончанияПериода(ДобавлениеДатаНачала, Сценарий.ПериодичностьКраткосрочногоПланирования);

				СхемаКомпоновкиДанных.Параметры.Организация.Значение   = Организация;
				СхемаКомпоновкиДанных.Параметры.ДатаНач.Значение       = НачалоДня(ДобавлениеДатаНачала);
				СхемаКомпоновкиДанных.Параметры.ДатаКон.Значение       = КонецДня(ДобавлениеДатаОкончания);
				
				Если ВариантЗаполнения = 1 Тогда
					СхемаКомпоновкиДанных.Параметры.Периодичность.Значение = Сценарий.ПериодичностьКраткосрочногоПланирования;
				КонецЕсли;
				
				СхемаКомпоновкиДанных.Параметры.Сценарий.Значение = Сценарий;
				
				КомпоновщикМакета   = Новый КомпоновщикМакетаКомпоновкиДанных;
				НастройкиКомпоновки = КомпоновщикОтбор.ПолучитьНастройки();
				МакетКомпоновки     = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
				
				ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
				ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,,, Истина);
				
				ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
				тблЗапросДанные = Новый ТаблицаЗначений;
				ПроцессорВывода.УстановитьОбъект(тблЗапросДанные);
				ПроцессорВывода.Вывести(ПроцессорКомпоновки);
				
				тблЗапросДанные.Свернуть("ДетализацияПланирования, " + ПоляСвертки, "Количество, Сумма, СуммаНДС");
				
				Если Сценарий.ПериодичностьКраткосрочногоПланирования = ТекСценарий.Периодичность Тогда
					
					Для Каждого ТекСтрока Из тблЗапросДанные Цикл
						Если флПараметрВыработки
							И ХарактеристикиСценария.МассивПараметровВыработки.Найти(ТекСтрока.ПараметрВыработки) = Неопределено Тогда
							Продолжить;
						КонецЕсли;
						НоваяСтрока = СоставПлана.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
						СкорректироватьЗначениеКолонок(НоваяСтрока, ТекСтрока, ХарактеристикиСценария);
						
						НоваяСтрока["СоставПланаКоличество_Всего"] = ТекСтрока.Количество;
						НоваяСтрока["СоставПланаСумма_Всего"]      = ТекСтрока.Сумма;
						НоваяСтрока["СоставПланаСуммаНДС_Всего"]   = ТекСтрока.СуммаНДС;
						Если флПараметрВыработки И ТекСтрока.ПараметрВыработки.Временный Тогда
							НоваяСтрока["СоставПланаКоличество_Всего"] = НоваяСтрока["СоставПланаКоличество_Всего"] / 3600;
						КонецЕсли;
						Если НоваяСтрока["СоставПланаКоличество_Всего"] > 0 Тогда
							НоваяСтрока["СоставПланаЦена_Всего"] = НоваяСтрока["СоставПланаСумма_Всего"] / НоваяСтрока["СоставПланаКоличество_Всего"]
						КонецЕсли;
					КонецЦикла;
					
				ИначеЕсли ПервыйПериодБольше(Сценарий.ПериодичностьКраткосрочногоПланирования, ТекСценарий.Периодичность) Тогда
					
					НачДата = НачалоПериода;
					КонДата = НачалоПериода;
					уатОбщегоНазначенияТиповые.уатВыровнятьПериод(НачДата, КонДата, Сценарий.ПериодичностьКраткосрочногоПланирования);
					КоличествоДней = ((НачалоДня(КонДата) - НачалоДня(НачДата)) / 60 / 60 / 24) + 1;
					
					НачДата = НачалоПериода;
					КонДата = НачалоПериода;
					уатОбщегоНазначенияТиповые.уатВыровнятьПериод(НачДата, КонДата, ТекСценарий.Периодичность);
					ТекКоличествоДней = ((НачалоДня(КонДата) - НачалоДня(НачДата)) / 60 / 60 / 24) + 1;
					
					Для Каждого ТекСтрока Из тблЗапросДанные Цикл
						Если флПараметрВыработки
							И ХарактеристикиСценария.МассивПараметровВыработки.Найти(ТекСтрока.ПараметрВыработки) = Неопределено Тогда
							Продолжить;
						КонецЕсли;
						НоваяСтрока = СоставПлана.Добавить();
						ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
						
						СкорректироватьЗначениеКолонок(НоваяСтрока, ТекСтрока, ХарактеристикиСценария);
						
						НоваяСтрока["СоставПланаКоличество_Всего"] = (ТекСтрока.Количество / КоличествоДней) * ТекКоличествоДней;
						НоваяСтрока["СоставПланаСумма_Всего"]      = (ТекСтрока.Сумма / КоличествоДней) * ТекКоличествоДней;
						НоваяСтрока["СоставПланаСуммаНДС_Всего"]   = (ТекСтрока.СуммаНДС  / КоличествоДней) * ТекКоличествоДней;
						Если флПараметрВыработки И ТекСтрока.ПараметрВыработки.Временный Тогда
							НоваяСтрока["СоставПланаКоличество_Всего"] = НоваяСтрока["СоставПланаКоличество_Всего"] / 3600;
						КонецЕсли;
						Если НоваяСтрока["СоставПланаКоличество_Всего"] > 0 Тогда
							НоваяСтрока["СоставПланаЦена_Всего"] = НоваяСтрока["СоставПланаСумма_Всего"] / НоваяСтрока["СоставПланаКоличество_Всего"]
						КонецЕсли;
					КонецЦикла;
					
				КонецЕсли;
			Иначе
				
				ДобавлениеДатаНачала    = ПланированиеКлиентСервер.РассчитатьДатуНачалаПериода(НачалоДня(НачалоПериода),Сценарий.Периодичность);
				ДобавлениеДатаОкончания = ПланированиеКлиентСервер.РассчитатьДатуОкончанияПериода(ДобавлениеДатаНачала, Сценарий.Периодичность);
				
				СхемаКомпоновкиДанных.Параметры.Организация.Значение   = Организация;
				СхемаКомпоновкиДанных.Параметры.ДатаНач.Значение       = НачалоДня(ДобавлениеДатаНачала);
				СхемаКомпоновкиДанных.Параметры.ДатаКон.Значение       = КонецДня(ДобавлениеДатаОкончания);
				
				Если ВариантЗаполнения = 1 Тогда
					СхемаКомпоновкиДанных.Параметры.Периодичность.Значение = Сценарий.Периодичность;
				КонецЕсли;
				
				СхемаКомпоновкиДанных.Параметры.Сценарий.Значение = Сценарий;
				
				КомпоновщикМакета   = Новый КомпоновщикМакетаКомпоновкиДанных;
				НастройкиКомпоновки = КомпоновщикОтбор.ПолучитьНастройки();
				МакетКомпоновки     = КомпоновщикМакета.Выполнить(СхемаКомпоновкиДанных, НастройкиКомпоновки,,, Тип("ГенераторМакетаКомпоновкиДанныхДляКоллекцииЗначений"));
				
				ПроцессорКомпоновки = Новый ПроцессорКомпоновкиДанных;
				ПроцессорКомпоновки.Инициализировать(МакетКомпоновки,,, Истина);
				
				ПроцессорВывода = Новый ПроцессорВыводаРезультатаКомпоновкиДанныхВКоллекциюЗначений;
				тблЗапросДанные = Новый ТаблицаЗначений;
				ПроцессорВывода.УстановитьОбъект(тблЗапросДанные);
				ПроцессорВывода.Вывести(ПроцессорКомпоновки);
				
				тблЗапросДанные.Свернуть("ДетализацияПланирования, " + ПоляСвертки, "Количество, Сумма, СуммаНДС");

				НачДата = НачалоПериода;
				КонДата = НачалоПериода;
				уатОбщегоНазначенияТиповые.уатВыровнятьПериод(НачДата, КонДата, Сценарий.Периодичность);
				КоличествоДней = ((НачалоДня(КонДата) - НачалоДня(НачДата)) / 60 / 60 / 24) + 1;
				
				НачДата = НачалоПериода;
				КонДата = НачалоПериода;
				уатОбщегоНазначенияТиповые.уатВыровнятьПериод(НачДата, КонДата, ТекСценарий.Периодичность);
				ТекКоличествоДней = ((НачалоДня(КонДата) - НачалоДня(НачДата)) / 60 / 60 / 24) + 1;
				
				Для Каждого ТекСтрока Из тблЗапросДанные Цикл
					Если флПараметрВыработки
						И ХарактеристикиСценария.МассивПараметровВыработки.Найти(ТекСтрока.ПараметрВыработки) = Неопределено Тогда
						Продолжить;
					КонецЕсли;
					НоваяСтрока = СоставПлана.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
					
					СкорректироватьЗначениеКолонок(НоваяСтрока, ТекСтрока, ХарактеристикиСценария);

					НоваяСтрока["СоставПланаКоличество_Всего"] = (ТекСтрока.Количество / КоличествоДней) * ТекКоличествоДней;
					НоваяСтрока["СоставПланаСумма_Всего"]      = (ТекСтрока.Сумма / КоличествоДней) * ТекКоличествоДней;
					НоваяСтрока["СоставПланаСуммаНДС_Всего"]   = (ТекСтрока.СуммаНДС  / КоличествоДней) * ТекКоличествоДней;
					Если флПараметрВыработки И ТекСтрока.ПараметрВыработки.Временный Тогда
						НоваяСтрока["СоставПланаКоличество_Всего"] = НоваяСтрока["СоставПланаКоличество_Всего"] / 3600;
					КонецЕсли;
					Если НоваяСтрока["СоставПланаКоличество_Всего"] > 0 Тогда
						НоваяСтрока["СоставПланаЦена_Всего"] = НоваяСтрока["СоставПланаСумма_Всего"] / НоваяСтрока["СоставПланаКоличество_Всего"]
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
				
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция ПервыйПериодБольше(Значение1, Значение2)
	
	СоответствиеПериодов = Новый Соответствие;
	СоответствиеПериодов.Вставить(Перечисления.Периодичность.Год,       6);
	СоответствиеПериодов.Вставить(Перечисления.Периодичность.Полугодие, 5);
	СоответствиеПериодов.Вставить(Перечисления.Периодичность.Квартал,   4); 
	СоответствиеПериодов.Вставить(Перечисления.Периодичность.Месяц,     3);
	СоответствиеПериодов.Вставить(Перечисления.Периодичность.Декада,    2);
	СоответствиеПериодов.Вставить(Перечисления.Периодичность.Неделя,    1);
	СоответствиеПериодов.Вставить(Перечисления.Периодичность.День,      0);
	
	Возврат СоответствиеПериодов.Получить(Значение1) > СоответствиеПериодов.Получить(Значение2);
	
КонецФункции

&НаСервере
Процедура СкорректироватьЗначениеКолонок(НоваяСтрока, ТекСтрока, ХарактеристикиСценария)
	
	Если (ХарактеристикиСценария.ВариантАналитикиТС = Перечисления.уатВариантыАналитик.ТС 
		И ТипЗнч(ТекСтрока.ДетализацияПланирования) <> Тип("СправочникСсылка.уатТС"))
		ИЛИ (ХарактеристикиСценария.ВариантАналитикиТС = Перечисления.уатВариантыАналитик.МодельТС 
		И ТипЗнч(ТекСтрока.ДетализацияПланирования) <> Тип("СправочникСсылка.уатМоделиТС"))
		ИЛИ (ХарактеристикиСценария.ВариантАналитикиТС = Перечисления.уатВариантыАналитик.ТипТС 
		И ТипЗнч(ТекСтрока.ДетализацияПланирования) <> Тип("СправочникСсылка.уатТипыТС"))
		ИЛИ (ХарактеристикиСценария.ВариантАналитикиТС = Перечисления.уатВариантыАналитик.ПринадлежностьТС 
		И ТипЗнч(ТекСтрока.ДетализацияПланирования) <> Тип("ПеречислениеСсылка.уатПринадлежностьТС")) Тогда
		НоваяСтрока.ДетализацияПланирования = Неопределено;
	КонецЕсли;
	
	Если ХарактеристикиСценария.флМаршрут И (ХарактеристикиСценария.ВариантАналитикиМаршрут = Перечисления.уатВариантыАналитик.Маршрут 
		И ТипЗнч(ТекСтрока.Маршрут) <> Тип("СправочникСсылка.уатМаршруты"))
		ИЛИ (ХарактеристикиСценария.ВариантАналитикиМаршрут = Перечисления.уатВариантыАналитик.ПунктНазначения 
		И ТипЗнч(ТекСтрока.Маршрут) <> Тип("СправочникСсылка.уатПунктыНазначения"))
		ИЛИ (ХарактеристикиСценария.ВариантАналитикиМаршрут = Перечисления.уатВариантыАналитик.ПунктОтправления 
		И ТипЗнч(ТекСтрока.Маршрут) <> Тип("СправочникСсылка.уатПунктыНазначения")) Тогда
		НоваяСтрока.Маршрут = Неопределено;
	КонецЕсли;
	
	Если ХарактеристикиСценария.флСтатья 
		И (ХарактеристикиСценария.ВариантАналитикиСтатья = Перечисления.уатВариантыАналитик.СтатьяДоходов 
		И ТипЗнч(ТекСтрока.Статья) <> Тип("СправочникСсылка.уатСтатьиДоходов"))
		ИЛИ (ХарактеристикиСценария.ВариантАналитикиСтатья = Перечисления.уатВариантыАналитик.СтатьяРасходов 
		И ТипЗнч(ТекСтрока.Статья) <> Тип("СправочникСсылка.уатСтатьиРасходов")) Тогда
		НоваяСтрока.Статья = Неопределено;
	КонецЕсли;
	
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьДоступность()
	РазделСценария = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Сценарий, "Раздел");
	
	флПланированиеУслуг = ХарактеристикиСценария.флПланированиеУслуг;
	флДоходыРасходы     = ХарактеристикиСценария.флДоходыРасходы;
	флОбъемыПеревозок   = ХарактеристикиСценария.флОбъемыПеревозок;
	флСумма             = (флПланированиеУслуг ИЛИ флДоходыРасходы);
	
	Элементы.СоставПланаЦена_Всего.Видимость        = флСумма;
	Элементы.СоставПланаСумма_Всего.Видимость       = флСумма;
	Элементы.СоставПланаСтавкаНДС_Всего.Видимость   = флСумма И УчитыватьНДС;
	Элементы.СоставПланаСуммаНДС_Всего.Видимость    = флСумма И УчитыватьНДС;
	Элементы.СоставПлана_Всего.Видимость            = флСумма И УчитыватьНДС;

	Если ИспользоватьКраткосрочноеПланирование Тогда
		Для Сч = 0 По КоличествоИнтервалов Цикл
			Элементы["СоставПланаЦена_" + Сч].Видимость             = флСумма;
			Элементы["СоставПланаСумма_" + Сч].Видимость            = флСумма;
			Элементы["СоставПланаСтавкаНДС_" + Сч].Видимость        = флСумма И УчитыватьНДС;
			Элементы["СоставПланаСуммаНДС_" + Сч].Видимость         = флСумма И УчитыватьНДС;
			Элементы["СоставПланаВсего_" + Сч].Видимость            = флСумма И УчитыватьНДС;
		КонецЦикла;
	КонецЕсли;
	
	Элементы.Подразделение.Видимость = НЕ флСумма;
	
	Если ХарактеристикиСценария.флПланированиеУслуг Тогда
		Элементы.ГруппаСоставПлана.Заголовок = НСтр("ru='Услуги'");
	ИначеЕсли ХарактеристикиСценария.флДоходыРасходы Тогда
		Если ХарактеристикиСценария.флСтатья
			И ХарактеристикиСценария.ВариантАналитикиСтатья = ПредопределенноеЗначение("Перечисление.уатВариантыАналитик.СтатьяРасходов") Тогда
			Элементы.ГруппаСоставПлана.Заголовок = НСтр("ru='Расходы'");
		Иначе
			Элементы.ГруппаСоставПлана.Заголовок = НСтр("ru='Доходы'");
		КонецЕсли;
	Иначе
		Элементы.ГруппаСоставПлана.Заголовок = НСтр("ru = 'Выработка'; en = 'Output'");
	КонецЕсли;
	
	Элементы.ГруппаИзменитьЦены.Видимость = флСумма;
	
	Элементы.ГруппаСценарий.Видимость = Истина;
	Элементы.ГруппаРазрезыПланирования.Видимость = Ложь;
	
	Элементы.ГруппаОтбор.Видимость      = НЕ ВариантЗаполнения = 2;
	Элементы.ГруппаПериодВлож.Видимость = НЕ ВариантЗаполнения = 2;

	Если ВариантЗаполнения = 2 Тогда
		Элементы.ГруппаСценарий.Доступность          = Ложь;
		Элементы.Организация.Доступность             = Ложь;
		Элементы.ГруппаРазрезыПланирования.Видимость = Истина;
	Иначе
		Элементы.Организация.Доступность             = Истина;
		Элементы.ГруппаСценарий.Доступность          = Истина;
	КонецЕсли;
	
	Если ВариантЗаполнения = 1 Тогда
		НадписьИсточникДанных = НСтр("ru='Регистр накопления ""План работы ТС""'");
	ИначеЕсли ВариантЗаполнения = 2 Тогда
		НадписьИсточникДанных = "";
	ИначеЕсли флПланированиеУслуг Тогда
		НадписьИсточникДанных = НСтр("ru='Регистр накопления ""Факт работы ТС""'");
	ИначеЕсли флДоходыРасходы Тогда
		Если ХарактеристикиСценария.флСтатья
			И ХарактеристикиСценария.ВариантАналитикиСтатья = ПредопределенноеЗначение("Перечисление.уатВариантыАналитик.СтатьяРасходов") Тогда
			НадписьИсточникДанных = НСтр("ru='Регистр накопления ""Факт работы ТС""'");
		Иначе
			НадписьИсточникДанных = НСтр("ru='Регистр накопления ""Факт работы ТС""'");
		КонецЕсли;
	ИначеЕсли ХарактеристикиСценария.флВыработка Тогда
		НадписьИсточникДанных = НСтр("ru='Регистр накопления ""Факт работы ТС""'");
	ИначеЕсли ХарактеристикиСценария.флОбъемыПеревозок Тогда
		НадписьИсточникДанных = НСтр("ru='Регистр накопления ""Объемы перевозок""'");
	Иначе
		НадписьИсточникДанных = НСтр("ru='Регистр накопления ""Выработка по маршрутным листам""'");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПараметрВыработкиВременный()
	Для Каждого ТекСтрокаТЧ Из СоставПлана Цикл
		ТекСтрокаТЧ.ПараметрВыработкиВременный = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекСтрокаТЧ.ПараметрВыработки, "Временный");
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВсегоВТЧ()
	Для Каждого СтрокаТабличнойЧасти Из СоставПлана Цикл
		РассчитатьСуммуВсегоВстрокеТЧ(СтрокаТабличнойЧасти);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуВсегоВстрокеТЧ(ТекСтрока)
	
	ТекСтрока["СоставПлана_Всего"]       = ТекСтрока["СоставПланаСумма_Всего"]
	+ ?(УчитыватьНДС И НЕ СуммаВключаетНДС, ТекСтрока["СоставПланаСуммаНДС_Всего"], 0);
	
	Если НЕ ИспользоватьКраткосрочноеПланирование Тогда
		Возврат;
	КонецЕсли;
	
	Для Сч = 0 По КоличествоИнтервалов Цикл
		ТекСтрока["СоставПланаВсего_" + Сч]       = ТекСтрока["СоставПланаСумма_" + Сч]
			+ ?(УчитыватьНДС И НЕ СуммаВключаетНДС, ТекСтрока["СоставПланаСуммаНДС_" + Сч], 0);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Процедура ФорматироватьКолонкиДетализации()
	
	Элементы.СоставПланаПараметрВыработки.Видимость    = ХарактеристикиСценария.флВыработка
		ИЛИ ХарактеристикиСценария.флПараметрВыработки;
	Элементы.СоставПланаВидПеревозки.Видимость         = ХарактеристикиСценария.флВидПеревозки;
	Элементы.СоставПланаКонтрагент.Видимость           = ХарактеристикиСценария.флКонтрагент;
	Элементы.СоставПланаДоговор.Видимость              = ХарактеристикиСценария.флДоговор;
	Элементы.СоставПланаМаршрут.Видимость              = ХарактеристикиСценария.флМаршрут;
	Элементы.СоставПланаОбъектСтроительства.Видимость  = ХарактеристикиСценария.флОбъектСтроительства;
	Элементы.СоставПланаНаправлениеПеревозки.Видимость = ХарактеристикиСценария.флНаправлениеПеревозки;
	Элементы.СоставПланаНоменклатура.Видимость         = ХарактеристикиСценария.флНоменклатураГруза;
	Элементы.СоставПланаУслуга.Видимость               = ХарактеристикиСценария.флУслуга;
	Элементы.СоставПланаСтатья.Видимость               = ХарактеристикиСценария.флСтатья;
	
	Если ХарактеристикиСценария.флОбъемыПеревозок Тогда
		Элементы.СоставПланаДетализацияПланирования.Видимость = ХарактеристикиСценария.флТС;
		Элементы.СоставПланаКолонна.Видимость                 = Ложь;
	Иначе
		Элементы.СоставПланаДетализацияПланирования.Видимость = Истина;
		Элементы.СоставПланаКолонна.Видимость                 = Истина;
	КонецЕсли;
	
	Элементы.СоставПланаДетализацияПланирования.ВыборГруппИЭлементов =
		?(ХарактеристикиСценария.флТСГруппы, ГруппыИЭлементы.Группы, ГруппыИЭлементы.Элементы);
	Элементы.СоставПланаКолонна.ВыборГруппИЭлементов                 =
		?(ХарактеристикиСценария.флКолоннаГруппы, ГруппыИЭлементы.Группы, ГруппыИЭлементы.Элементы);
	Элементы.СоставПланаВидПеревозки.ВыборГруппИЭлементов            =
		?(ХарактеристикиСценария.флВидПеревозкиГруппы, ГруппыИЭлементы.Группы, ГруппыИЭлементы.Элементы);
	Элементы.СоставПланаКонтрагент.ВыборГруппИЭлементов              =
		?(ХарактеристикиСценария.флКонтрагентГруппы, ГруппыИЭлементы.Группы, ГруппыИЭлементы.Элементы);
	Элементы.СоставПланаМаршрут.ВыборГруппИЭлементов                 =
		?(ХарактеристикиСценария.флМаршрутГруппы, ГруппыИЭлементы.Группы, ГруппыИЭлементы.Элементы);
	Элементы.СоставПланаНаправлениеПеревозки.ВыборГруппИЭлементов    =
		?(ХарактеристикиСценария.флНаправлениеПеревозкиГруппы, ГруппыИЭлементы.Группы, ГруппыИЭлементы.Элементы);
	Элементы.СоставПланаОбъектСтроительства.ВыборГруппИЭлементов     =
		?(ХарактеристикиСценария.флОбъектСтроительстваГруппы, ГруппыИЭлементы.Группы, ГруппыИЭлементы.Элементы);
	Элементы.СоставПланаНоменклатура.ВыборГруппИЭлементов            =
		?(ХарактеристикиСценария.флНоменклатураГрузаГруппы, ГруппыИЭлементы.Группы, ГруппыИЭлементы.Элементы);
	Элементы.СоставПланаУслуга.ВыборГруппИЭлементов                  =
		?(ХарактеристикиСценария.флУслугаГруппы, ГруппыИЭлементы.Группы, ГруппыИЭлементы.Элементы);

	Если ХарактеристикиСценария.флТС Тогда
		ВариантАналитики = ХарактеристикиСценария.ВариантАналитикиТС;
		Если ВариантАналитики = ПредопределенноеЗначение("Перечисление.уатВариантыАналитик.ТС") Тогда
			Элементы.СоставПланаДетализацияПланирования.Заголовок       = НСтр("en='Vehicle';ru='ТС'");
			Элементы.СоставПланаДетализацияПланирования.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.уатТС");
		ИначеЕсли ВариантАналитики = ПредопределенноеЗначение("Перечисление.уатВариантыАналитик.МодельТС") Тогда
			Элементы.СоставПланаДетализацияПланирования.Заголовок       = НСтр("en='Vehicle';ru='Модель ТС'");
			Элементы.СоставПланаДетализацияПланирования.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.уатМоделиТС");
		ИначеЕсли ВариантАналитики = ПредопределенноеЗначение("Перечисление.уатВариантыАналитик.ТипТС") Тогда
			Элементы.СоставПланаДетализацияПланирования.Заголовок       = НСтр("en='Vehicle';ru='Тип ТС'");
			Элементы.СоставПланаДетализацияПланирования.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.уатТипыТС");
		ИначеЕсли ВариантАналитики = ПредопределенноеЗначение("Перечисление.уатВариантыАналитик.ПринадлежностьТС") Тогда
			Элементы.СоставПланаДетализацияПланирования.Заголовок       = НСтр("en='Vehicle';ru='Принадлежность ТС'");
			Элементы.СоставПланаДетализацияПланирования.ОграничениеТипа = Новый ОписаниеТипов("ПеречислениеСсылка.уатПринадлежностьТС");
		КонецЕсли;
	Иначе
		Элементы.СоставПланаДетализацияПланирования.Заголовок       = НСтр("en='Vehicle';ru='ТС'");
		Элементы.СоставПланаДетализацияПланирования.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.уатТС");
	КонецЕсли;
	
	Если ХарактеристикиСценария.флКонтрагент Тогда
		Элементы.СоставПланаКонтрагент.Заголовок = ХарактеристикиСценария.ВариантАналитикиКонтрагент;
	КонецЕсли;
	
	Если ХарактеристикиСценария.флМаршрут Тогда
		ВариантАналитики = ХарактеристикиСценария.ВариантАналитикиМаршрут;
		Если ВариантАналитики = ПредопределенноеЗначение("Перечисление.уатВариантыАналитик.Маршрут") Тогда
			Элементы.СоставПланаМаршрут.Заголовок       = ВариантАналитики;
			Элементы.СоставПланаМаршрут.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.уатМаршруты");
		Иначе
			Элементы.СоставПланаМаршрут.Заголовок       = ВариантАналитики;
			Элементы.СоставПланаМаршрут.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.уатПунктыНазначения");
		КонецЕсли;
	КонецЕсли;
	
	Если ХарактеристикиСценария.флСтатья Тогда
		ВариантАналитики = ХарактеристикиСценария.ВариантАналитикиСтатья;
		Если ВариантАналитики = ПредопределенноеЗначение("Перечисление.уатВариантыАналитик.СтатьяДоходов") Тогда
			Элементы.СоставПланаСтатья.Заголовок       = ВариантАналитики;
			Элементы.СоставПланаСтатья.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.уатСтатьиДоходов");
		Иначе
			Элементы.СоставПланаСтатья.Заголовок       = ВариантАналитики;
			Элементы.СоставПланаСтатья.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.уатСтатьиРасходов");
		КонецЕсли;
	КонецЕсли;
	
	Если ХарактеристикиСценария.флПланированиеУслуг Тогда
		Элементы.ГруппаСоставПлана.Заголовок = НСтр("ru='Услуги'");
	ИначеЕсли ХарактеристикиСценария.флДоходыРасходы Тогда
		Элементы.ГруппаСоставПлана.Заголовок = НСтр("ru = 'Доходы и расходы'; en = 'Incomes and expenses'");
	Иначе
		Элементы.ГруппаСоставПлана.Заголовок = НСтр("ru = 'Выработка'; en = 'Output'");
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти = Неопределено, Индекс = "Всего")
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Количество = СтрокаТабличнойЧасти["СоставПланаКоличество_" + Индекс];
	Если СтрокаТабличнойЧасти.ПараметрВыработкиВременный Тогда
		Количество = Цел(Количество) + (Количество - Цел(Количество) / 60 * 100);
	КонецЕсли;
	
	СтрокаТабличнойЧасти["СоставПланаСумма_" + Индекс] = Количество * СтрокаТабличнойЧасти["СоставПланаЦена_" + Индекс];
	
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти, Индекс);
	
КонецПроцедуры // РассчитатьСуммуВСтрокеТабличнойЧасти()

&НаКлиенте
Процедура РассчитатьСуммуНДС(СтрокаТабличнойЧасти, Индекс = "Всего")
	
	СтавкаНДС = СтрокаТабличнойЧасти["СоставПланаСтавкаНДС_" + Индекс];
	СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеСтавкиНДС(СтавкаНДС);
	
	Сумма     = СтрокаТабличнойЧасти["СоставПланаСумма_" + Индекс];
	
	СтрокаТабличнойЧасти["СоставПланаСуммаНДС_" + Индекс] = 
		?(СуммаВключаетНДС, Сумма - (Сумма) / ((СтавкаНДС + 100) / 100),
		Сумма * СтавкаНДС / 100);
	
КонецПроцедуры // РассчитатьСуммуНДС()

&НаСервере
Процедура СкорректироватьПериодЗаполнения()
	
	уатОбщегоНазначенияТиповые.уатВыровнятьПериод(НачалоПериода, КонецПериода, ТекСценарий.Периодичность);
	
КонецПроцедуры

&НаСервере
Процедура ИнициализацияКомпоновщика()
	
	Если ВариантЗаполнения = 1 Тогда
		СхемаКомпоновкиДанных = РеквизитФормыВЗначение("Объект").ПолучитьМакет("КомпоновкаДанныхПлан");
		СхемаКомпоновкиДанныхОтбор = РеквизитФормыВЗначение("Объект").ПолучитьМакет("КомпоновкаДанныхОтборПлан");
	Иначе
		СхемаКомпоновкиДанных      = РеквизитФормыВЗначение("Объект").ПолучитьМакет("КомпоновкаДанныхФакт");
		СхемаКомпоновкиДанныхОтбор = РеквизитФормыВЗначение("Объект").ПолучитьМакет("КомпоновкаДанныхОтборФакт");
	КонецЕсли;
	
	АдресСхемыКомпоновкиДанных      = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанных, УникальныйИдентификатор);
	АдресСхемыКомпоновкиДанныхОтбор = ПоместитьВоВременноеХранилище(СхемаКомпоновкиДанныхОтбор, УникальныйИдентификатор);
	
	КомпоновщикОтбор.Инициализировать(Новый ИсточникДоступныхНастроекКомпоновкиДанных(АдресСхемыКомпоновкиДанныхОтбор));
	КомпоновщикОтбор.ЗагрузитьНастройки(СхемаКомпоновкиДанныхОтбор.НастройкиПоУмолчанию);
КонецПроцедуры

&НаКлиенте
Процедура ПеренестиВДокументИЗакрыть()
	мсвСтрок = Новый Массив;
	
	ПеренестиВДокументИЗакрытьСервер(мсвСтрок);
	
	ИмяКлючевойОперации = "уатОперации.ПланированиеРаботыТС.ПомощникПланирования";
	ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики(ИмяКлючевойОперации, 1);
	
	ПеренестиВДокумент = Истина;
	Закрыть(мсвСтрок);
КонецПроцедуры

&НаСервере
Процедура ПеренестиВДокументИЗакрытьСервер(мсвСтрок)
	мсвСтрок = Новый Массив;
	
	мСоставПлана = СоставПлана.Выгрузить();
	СостаПолей   = "";
	Для Каждого ТекПоле Из мСоставПлана.Колонки Цикл
		СостаПолей = ?(ЗначениеЗаполнено(СостаПолей), СостаПолей + ",", "") + ТекПоле.Имя;
	КонецЦикла;
	
	Для Каждого ТекСтрока Из мСоставПлана Цикл
		СтруктураСтроки = Новый Структура(СостаПолей);
		ЗаполнитьЗначенияСвойств(СтруктураСтроки, ТекСтрока);
		мсвСтрок.Добавить(СтруктураСтроки);
	КонецЦикла;

КонецПроцедуры

&НаКлиенте
Функция ЗаполнитьСтруктуруРазреза(Массив, ТекущиеДанные, НаименованиеСправочника, Группа = Ложь, Справочник = Истина)
	
	Если ТекущиеДанные.РазрезПланирования = ПредопределенноеЗначение("Перечисление.уатРазрезыПланирования.ТС") Тогда
		Если ТекущиеДанные.ВариантАналитики = ПредопределенноеЗначение("Перечисление.уатВариантыАналитик.ТС") Тогда
			НаименованиеСправочника = "уатТС";
			Массив.Добавить(Тип("СправочникСсылка.уатТС"));
		ИначеЕсли ТекущиеДанные.ВариантАналитики = ПредопределенноеЗначение("Перечисление.уатВариантыАналитик.МодельТС") Тогда
			НаименованиеСправочника = "уатМоделиТС";
			Массив.Добавить(Тип("СправочникСсылка.уатМоделиТС"));
		ИначеЕсли ТекущиеДанные.ВариантАналитики = ПредопределенноеЗначение("Перечисление.уатВариантыАналитик.ТипТС") Тогда
			НаименованиеСправочника = "уатТипыТС";
			Массив.Добавить(Тип("СправочникСсылка.уатТипыТС"));
		ИначеЕсли ТекущиеДанные.ВариантАналитики = ПредопределенноеЗначение("Перечисление.уатВариантыАналитик.ПринадлежностьТС") Тогда
			НаименованиеСправочника = "уатПринадлежностьТС";
			Справочник              = Ложь;
			Массив.Добавить(Тип("ПеречислениеСсылка.уатПринадлежностьТС"));
		КонецЕсли;
		
		Группа = ?(ХарактеристикиСценария.флТСГруппы, Истина, Ложь);
	ИначеЕсли ТекущиеДанные.РазрезПланирования = ПредопределенноеЗначение("Перечисление.уатРазрезыПланирования.ВидПеревозки") Тогда
		НаименованиеСправочника = "уатВидыПеревозок";
		Массив.Добавить(Тип("СправочникСсылка.уатВидыПеревозок"));
		Группа = ?(ХарактеристикиСценария.флВидПеревозкиГруппы, Истина, Ложь);
	ИначеЕсли ТекущиеДанные.РазрезПланирования = ПредопределенноеЗначение("Перечисление.уатРазрезыПланирования.Договор") Тогда
		НаименованиеСправочника = "ДоговорыКонтрагентов";
		Массив.Добавить(Тип("СправочникСсылка.ДоговорыКонтрагентов"));
	ИначеЕсли ТекущиеДанные.РазрезПланирования = ПредопределенноеЗначение("Перечисление.уатРазрезыПланирования.ПараметрВыработки") Тогда
		НаименованиеСправочника = "уатПараметрыВыработки";
		Массив.Добавить(Тип("СправочникСсылка.уатПараметрыВыработки"));
	ИначеЕсли ТекущиеДанные.РазрезПланирования = ПредопределенноеЗначение("Перечисление.уатРазрезыПланирования.Услуга") Тогда
		НаименованиеСправочника = "Номенклатура";
		Массив.Добавить(Тип("СправочникСсылка.Номенклатура"));
		Группа = ?(ХарактеристикиСценария.флУслугаГруппы, Истина, Ложь);
	ИначеЕсли ТекущиеДанные.РазрезПланирования = ПредопределенноеЗначение("Перечисление.уатРазрезыПланирования.Контрагент") Тогда
		НаименованиеСправочника = "Контрагенты";
		Массив.Добавить(Тип("СправочникСсылка.Контрагенты"));
		Группа = ?(ХарактеристикиСценария.флКонтрагентГруппы, Истина, Ложь);
	ИначеЕсли ТекущиеДанные.РазрезПланирования = ПредопределенноеЗначение("Перечисление.уатРазрезыПланирования.Подразделение") Тогда
		НаименованиеСправочника = "ПодразделенияОрганизаций";
		Массив.Добавить(Тип("СправочникСсылка.ПодразделенияОрганизаций"));
	ИначеЕсли ТекущиеДанные.РазрезПланирования = ПредопределенноеЗначение("Перечисление.уатРазрезыПланирования.Колонна") Тогда
		НаименованиеСправочника = "уатКолонны";
		Массив.Добавить(Тип("СправочникСсылка.уатКолонны"));
		Группа = ?(ХарактеристикиСценария.флКолоннаГруппы, Истина, Ложь);
	ИначеЕсли ТекущиеДанные.РазрезПланирования = ПредопределенноеЗначение("Перечисление.уатРазрезыПланирования.ОбъектСтроительства") Тогда
		НаименованиеСправочника = "уатОбъектыСтроительства";
		Массив.Добавить(Тип("СправочникСсылка.уатОбъектыСтроительства"));
		Группа = ?(ХарактеристикиСценария.флОбъектСтроительстваГруппы, Истина, Ложь);
	ИначеЕсли ТекущиеДанные.РазрезПланирования = ПредопределенноеЗначение("Перечисление.уатРазрезыПланирования.НаправлениеПеревозки") Тогда
		НаименованиеСправочника = "уатНаправленияПеревозок";
		Массив.Добавить(Тип("СправочникСсылка.уатНаправленияПеревозок"));
		Группа = ?(ХарактеристикиСценария.флНаправлениеПеревозкиГруппы, Истина, Ложь);
	ИначеЕсли ТекущиеДанные.РазрезПланирования = ПредопределенноеЗначение("Перечисление.уатРазрезыПланирования.НоменклатураГруза") Тогда
		НаименованиеСправочника = "Номенклатура";
		Массив.Добавить(Тип("СправочникСсылка.Номенклатура"));
		Группа = ?(ХарактеристикиСценария.флНоменклатураГрузаГруппы, Истина, Ложь);
	ИначеЕсли ТекущиеДанные.РазрезПланирования = ПредопределенноеЗначение("Перечисление.уатРазрезыПланирования.Статья") Тогда
		Если ТекущиеДанные.ВариантАналитики = ПредопределенноеЗначение("Перечисление.уатВариантыАналитик.СтатьяДоходов") Тогда
			НаименованиеСправочника = "уатСтатьиДоходов";
			Массив.Добавить(Тип("СправочникСсылка.уатСтатьиДоходов"));
		Иначе
			НаименованиеСправочника = "уатСтатьиРасходов";
			Массив.Добавить(Тип("СправочникСсылка.уатСтатьиРасходов"));
		КонецЕсли;
	ИначеЕсли ТекущиеДанные.РазрезПланирования = ПредопределенноеЗначение("Перечисление.уатРазрезыПланирования.Маршрут") Тогда
		Если ТекущиеДанные.ВариантАналитики = ПредопределенноеЗначение("Перечисление.уатВариантыАналитик.Маршрут") Тогда
			НаименованиеСправочника = "уатМаршруты";
			Массив.Добавить(Тип("СправочникСсылка.уатМаршруты"));
		Иначе
			НаименованиеСправочника = "уатПунктыНазначения";
			Массив.Добавить(Тип("СправочникСсылка.уатПунктыНазначения"));
		КонецЕсли;
		Группа = ?(ХарактеристикиСценария.флМаршрутГруппы, Истина, Ложь);
	КонецЕсли;

КонецФункции

&НаКлиенте
Процедура РазрезыПланированияЗначениеНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.РазрезыПланирования.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	МассивТипов = Новый Массив();
	Если СтандартнаяОбработка Тогда
		СтандартнаяОбработка = Истина;
		МассивТипов.Добавить(Тип("СписокЗначений"));
	КонецЕсли;
	
	НаименованиеСправочника = "";
	Справочник              = Истина;
	Группа                  = Ложь;
	ЗаполнитьСтруктуруРазреза(МассивТипов, ТекущиеДанные, НаименованиеСправочника, Группа, Справочник);
	
	Элементы.РазрезыПланированияЗначение.ОграничениеТипа = Новый ОписаниеТипов(МассивТипов);
	Элементы.РазрезыПланированияЗначение.ВыборГруппИЭлементов =
		?(Группа, ГруппыИЭлементы.Группы, ГруппыИЭлементы.Элементы);

	Если ТипЗнч(ТекущиеДанные.Значение) = Тип("СписокЗначений") Тогда
		СтандартнаяОбработка = Ложь;

		ПараметрыФормы = Новый Структура("Список, НаименованиеСправочника, Справочник",
			ТекущиеДанные.Значение, НаименованиеСправочника, Справочник, Группа);

		ОповещЗакрытие = Новый ОписаниеОповещения("ФормаПодбораРазрезовВыбор", ЭтотОбъект);
		ОткрытьФорму("Обработка.уатПомощникПланированияРаботыТС.Форма.ФормаПодбораРазрезов", ПараметрыФормы, Элемент,,,, ОповещЗакрытие);
		
	ИначеЕсли ТекущиеДанные.Значение = Неопределено Тогда
		СтандартнаяОбработка = Ложь;
		
		ПараметрыФормы = Новый Структура("МассивТипов", МассивТипов);
		ОповещЗакрытие = Новый ОписаниеОповещения("ФормаВыборТипаВыбор", ЭтотОбъект);
		ОткрытьФорму("Обработка.уатПомощникПланированияРаботыТС.Форма.ФормаВыборТипа", ПараметрыФормы, Элемент,,,, ОповещЗакрытие);

	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура РазрезыПланированияЗначениеОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	
	ТекущиеДанные = Элементы.РазрезыПланирования.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Массив = Новый Массив(); 
	
	НаименованиеСправочника = "";
	Справочник              = Истина;
	Группа                  = Ложь;
	ЗаполнитьСтруктуруРазреза(Массив, ТекущиеДанные, НаименованиеСправочника, Группа, Справочник);
	
	Если ТипЗнч(ТекущиеДанные.Значение) = Тип("СписокЗначений") 
		ИЛИ ВыбранноеЗначение = Тип("СписокЗначений") Тогда
		СтандартнаяОбработка = Ложь;

		ПараметрыФормы = Новый Структура("Список, НаименованиеСправочника, Справочник, Группа",
			ТекущиеДанные.Значение, НаименованиеСправочника, Справочник, Группа);

		ОповещЗакрытие = Новый ОписаниеОповещения("ФормаПодбораРазрезовВыбор", ЭтотОбъект);
		ОткрытьФорму("Обработка.уатПомощникПланированияРаботыТС.Форма.ФормаПодбораРазрезов", ПараметрыФормы, Элемент,,,, ОповещЗакрытие);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ФормаПодбораРазрезовВыбор(ВыбранноеЗначение, СтандартнаяОбработка) Экспорт
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.РазрезыПланирования.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.Значение = ВыбранноеЗначение;
КонецПроцедуры

&НаКлиенте
Процедура ФормаВыборТипаВыбор(ВыбранноеЗначение, СтандартнаяОбработка) Экспорт
	
	Если ВыбранноеЗначение = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные = Элементы.РазрезыПланирования.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ВыбранноеЗначение = Тип("СписокЗначений") Тогда
		РазрезыПланированияЗначениеОбработкаВыбора(Элементы.РазрезыПланированияЗначение, ВыбранноеЗначение, Истина);
	Иначе
		Справочник = Истина;
		ИмяТипа    = "";

		ТекущиеДанные.Значение = ПолучитьПустуюСсылку(ВыбранноеЗначение, ИмяТипа, Справочник);
		
		Массив = Новый Массив();
		НаименованиеСправочника = "";
		Справочник              = Истина;
		Группа                  = Ложь;
		ЗаполнитьСтруктуруРазреза(Массив, ТекущиеДанные, НаименованиеСправочника, Группа, Справочник);

		Если Справочник Тогда
			ПараметрыОтбора = Новый Структура();
			Если ИмяТипа = "уатПараметрыВыработки" Тогда
				ПараметрыОтбора.Вставить("Отбор", Новый Структура("ИспользоватьПриПланировании", Истина));
			КонецЕсли;
			ОткрытьФорму("Справочник." + ИмяТипа + ?(Группа, ".ФормаВыбораГруппы", ".ФормаВыбора"), ПараметрыОтбора, Элементы.РазрезыПланированияЗначение);
		Иначе
			ОткрытьФорму("Перечисление." + ИмяТипа + ".ФормаВыбора",, Элементы.РазрезыПланированияЗначение);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьПустуюСсылку(ВыбранноеЗначение, ИмяТипа, Справочник = Истина)
	
	ИмяТипа = Метаданные.НайтиПоТипу(ВыбранноеЗначение).Имя;
	
	Попытка
		Возврат Справочники[ИмяТипа].ПустаяСсылка();
	Исключение
		Справочник = Ложь;
		Возврат Перечисления[ИмяТипа].ПустаяСсылка();
	КонецПопытки;
	
КонецФункции

&НаСервереБезКонтекста
Функция ЗаполнитьХарактеристикиСценария(Сценарий)
	
	ХарактеристикиСценария = уатОбщегоНазначения_проф.ЗаполнитьХарактеристикиСценария(Сценарий);
	Возврат ХарактеристикиСценария;

КонецФункции

&НаСервере
Процедура ЗаполнитьСоставПланаПериод(ХарактеристикиСценария)
	
	уатОбщегоНазначения_проф.ЗаполнитьСоставПланаПериод(ЭтотОбъект, ДатаПланирования,
		ХарактеристикиСценария, КоличествоИнтервалов, "СоставПлана");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьНадписьПериодПланирования()
	Если ДатаПланирования = '00010101' Тогда
		НадписьПериод = "<не указан>";
		Возврат;
	КонецЕсли;
	
	НачДата = ДатаПланирования;
	КонДата = ДатаПланирования;
	уатОбщегоНазначенияТиповые.уатВыровнятьПериод(НачДата, КонДата, ТекСценарий.Периодичность);
	НадписьПериод = Формат(НачДата, "ДФ = дд.ММ.гггг") + " - " + Формат(КонДата, "ДФ = дд.ММ.гггг");
КонецПроцедуры

&НаСервере
Функция ПолучитьСписокВыбораРазрезПланирования(Раздел)
	
	СписокВыбораРазрезПланирования = Новый СписокЗначений;
	
	ДобавитьВСписокВыбораРазрезаПланирования(СписокВыбораРазрезПланирования,
		ПредопределенноеЗначение("Перечисление.уатРазрезыПланирования.Подразделение"));
	ДобавитьВСписокВыбораРазрезаПланирования(СписокВыбораРазрезПланирования,
		ПредопределенноеЗначение("Перечисление.уатРазрезыПланирования.Колонна"));
	ДобавитьВСписокВыбораРазрезаПланирования(СписокВыбораРазрезПланирования,
		ПредопределенноеЗначение("Перечисление.уатРазрезыПланирования.ТС"));
	ДобавитьВСписокВыбораРазрезаПланирования(СписокВыбораРазрезПланирования,
		ПредопределенноеЗначение("Перечисление.уатРазрезыПланирования.ПараметрВыработки"));
	ДобавитьВСписокВыбораРазрезаПланирования(СписокВыбораРазрезПланирования,
		ПредопределенноеЗначение("Перечисление.уатРазрезыПланирования.ВидПеревозки"));
	ДобавитьВСписокВыбораРазрезаПланирования(СписокВыбораРазрезПланирования,
		ПредопределенноеЗначение("Перечисление.уатРазрезыПланирования.Контрагент"));
	ДобавитьВСписокВыбораРазрезаПланирования(СписокВыбораРазрезПланирования,
		ПредопределенноеЗначение("Перечисление.уатРазрезыПланирования.Маршрут"));
	ДобавитьВСписокВыбораРазрезаПланирования(СписокВыбораРазрезПланирования,
		ПредопределенноеЗначение("Перечисление.уатРазрезыПланирования.ОбъектСтроительства"));
	ДобавитьВСписокВыбораРазрезаПланирования(СписокВыбораРазрезПланирования,
		ПредопределенноеЗначение("Перечисление.уатРазрезыПланирования.НаправлениеПеревозки"));

	
	Если Раздел = ПредопределенноеЗначение("Перечисление.уатРазделыПланирования.ПредоставленныеУслуги") Тогда
		
		ДобавитьВСписокВыбораРазрезаПланирования(СписокВыбораРазрезПланирования,
			ПредопределенноеЗначение("Перечисление.уатРазрезыПланирования.Договор"));
		ДобавитьВСписокВыбораРазрезаПланирования(СписокВыбораРазрезПланирования,
			ПредопределенноеЗначение("Перечисление.уатРазрезыПланирования.Услуга"));
		
	ИначеЕсли Раздел = ПредопределенноеЗначение("Перечисление.уатРазделыПланирования.ДоходыРасходы") Тогда
		
		ДобавитьВСписокВыбораРазрезаПланирования(СписокВыбораРазрезПланирования,
			ПредопределенноеЗначение("Перечисление.уатРазрезыПланирования.НоменклатураГруза"));
		ДобавитьВСписокВыбораРазрезаПланирования(СписокВыбораРазрезПланирования,
			ПредопределенноеЗначение("Перечисление.уатРазрезыПланирования.Статья"));
		
	КонецЕсли;
	
	Возврат СписокВыбораРазрезПланирования;
	
КонецФункции

&НаСервере
Процедура ДобавитьВСписокВыбораРазрезаПланирования(СписокВыбораРазрезПланирования, Раздел)
	
	СтрокиРазделов = РазрезыПланирования.НайтиСтроки(Новый Структура("РазрезПланирования", Раздел));
	Если СтрокиРазделов.Количество() = 0 Тогда
		СписокВыбораРазрезПланирования.Добавить(Раздел);
	КонецЕсли;
	
КонецПроцедуры


#КонецОбласти

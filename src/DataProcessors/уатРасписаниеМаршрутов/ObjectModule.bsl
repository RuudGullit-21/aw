#Область СлужебныйПрограммныйИнтерфейс

// Процедура заполняет рейсы в табличном документе по заданным маршруту и выходу,
// или по заданным пунктам отправления/прибытия и грузоотправителю/грузополучателю,
// и другим параметрам, содержащимся в реквизитах объекта обработки
// Параметры:
//	ТабДокумент - табличный документ, куда будут выведены рейсы
//
Функция ЗаполнитьРейсыМаршрута(ТабДокумент, ПоказыватьИнформациюПарныеМаршруты = Ложь)	Экспорт
	
	флЗаполнятьПоМаршруту = ЗначениеЗаполнено(ЭтотОбъект.Маршрут);
	флМаршрутОднимПунктом = ЭтотОбъект.Маршрут.ПредставлениеМаршрутаОднимПунктом;
	Если флЗаполнятьПоМаршруту И флМаршрутОднимПунктом Тогда
		Макет = ПолучитьМакет("МакетЗаполнениеПоМаршрутам");
	ИначеЕсли флЗаполнятьПоМаршруту И Не флМаршрутОднимПунктом Тогда
		Макет = ПолучитьМакет("МакетЗаполнениеПоМаршрутамПарнымиПунктами");
	Иначе
		Макет = ПолучитьМакет("МакетЗаполнениеПоПунктам");
	КонецЕсли;
	
	ОбластьШапкаПункт = Макет.ПолучитьОбласть("Шапка|Пункт");
	ОбластьШапкаРейс = Макет.ПолучитьОбласть("Шапка|Рейс");
	ЭтотОбъект.ШиринаКолонкиПункты = ОбластьШапкаПункт.ШиринаТаблицы;
	
	Запрос = Новый Запрос;
	Если флЗаполнятьПоМаршруту Тогда
		Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	МАКСИМУМ(уатМаршрутыЭтапы.НомерСтроки) КАК НомерПоследнейСтроки,
		|	уатМаршрутыЭтапы.Ссылка КАК Ссылка
		|ПОМЕСТИТЬ втМаршрут
		|ИЗ
		|	Справочник.уатМаршруты.Этапы КАК уатМаршрутыЭтапы
		|ГДЕ
		|	уатМаршрутыЭтапы.Ссылка = &Маршрут
		|
		|СГРУППИРОВАТЬ ПО
		|	уатМаршрутыЭтапы.Ссылка
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатМаршрутыЭтапы.НомерСтроки КАК НомерСтроки,
		|	втМаршрут.НомерПоследнейСтроки КАК НомерПоследнейСтроки,
		|	уатМаршрутыЭтапы.ПунктОтправления КАК Пункт,
		|	уатМаршрутыЭтапы.УИД КАК УИД,
		|	уатМаршрутыЭтапы.ПунктОтправления.Наименование КАК ПунктНаименование,
		|	ЕСТЬNULL(уатРейсыМаршрутов.Ссылка, ЗНАЧЕНИЕ(Справочник.уатРейсыМаршрутов.ПустаяСсылка)) КАК Рейс,
		|	ЕСТЬNULL(уатРейсыМаршрутов.НомерРейса, """") КАК НомерРейса,
		|	уатМаршрутыЭтапы.ПунктПрибытия КАК ПунктПрибытия,
		|	уатМаршрутыЭтапы.ПунктПрибытия.Наименование КАК ПунктПрибытияНаименование
		|ПОМЕСТИТЬ втРейсы
		|ИЗ
		|	Справочник.уатМаршруты.Этапы КАК уатМаршрутыЭтапы
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатРейсыМаршрутов КАК уатРейсыМаршрутов
		|		ПО уатМаршрутыЭтапы.Ссылка = уатРейсыМаршрутов.Владелец
		|			И (уатРейсыМаршрутов.ПометкаУдаления = ЛОЖЬ)
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втМаршрут КАК втМаршрут
		|		ПО уатМаршрутыЭтапы.Ссылка = втМаршрут.Ссылка
		|ГДЕ
		|	уатМаршрутыЭтапы.Ссылка = &Маршрут
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	втРейсы.НомерСтроки КАК НомерСтроки,
		|	втРейсы.НомерПоследнейСтроки КАК НомерПоследнейСтроки,
		|	втРейсы.Пункт КАК Пункт,
		|	втРейсы.УИД КАК УИД,
		|	втРейсы.ПунктНаименование КАК ПунктНаименование,
		|	втРейсы.Рейс КАК Рейс,
		|	втРейсы.НомерРейса КАК НомерРейса,
		|	втРейсы.ПунктПрибытия КАК ПунктПрибытия,
		|	втРейсы.ПунктПрибытияНаименование КАК ПунктПрибытияНаименование,
		|	ЕСТЬNULL(уатРасписаниеРейсов.ДатаУстановки, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаУстановки,
		|	ЕСТЬNULL(уатРасписаниеРейсов.ДействуетС, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДействуетС,
		|	ЕСТЬNULL(уатРасписаниеРейсов.ДействуетПо, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДействуетПо
		|ПОМЕСТИТЬ втРейсСДатойУстановки
		|ИЗ
		|	втРейсы КАК втРейсы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатРасписаниеРейсов КАК уатРасписаниеРейсов
		|		ПО втРейсы.Рейс = уатРасписаниеРейсов.Рейс
		|			И (уатРасписаниеРейсов.Маршрут = &Маршрут)
		|			И (уатРасписаниеРейсов.Выход = &Выход
		|				ИЛИ &Выход = ЗНАЧЕНИЕ(Справочник.уатВыходыМаршрутов.ПустаяСсылка))
		|
		|СГРУППИРОВАТЬ ПО
		|	втРейсы.Пункт,
		|	втРейсы.НомерРейса,
		|	втРейсы.ПунктПрибытия,
		|	втРейсы.ПунктПрибытияНаименование,
		|	втРейсы.ПунктНаименование,
		|	втРейсы.Рейс,
		|	втРейсы.НомерСтроки,
		|	втРейсы.НомерПоследнейСтроки,
		|	втРейсы.УИД,
		|	ЕСТЬNULL(уатРасписаниеРейсов.ДатаУстановки, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)),
		|	ЕСТЬNULL(уатРасписаниеРейсов.ДействуетС, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)),
		|	ЕСТЬNULL(уатРасписаниеРейсов.ДействуетПо, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втРейсы.Рейс КАК Рейс,
		|	втРейсы.НомерРейса КАК НомерРейса
		|ИЗ
		|	втРейсы КАК втРейсы
		|
		|СГРУППИРОВАТЬ ПО
		|	втРейсы.Рейс,
		|	втРейсы.НомерРейса
		|
		|УПОРЯДОЧИТЬ ПО
		|	Рейс
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	втРейсСДатойУстановки.ДатаУстановки КАК ДатаУстановки,
		|	втРейсСДатойУстановки.ДействуетС КАК ДействуетС,
		|	втРейсСДатойУстановки.ДействуетПо КАК ДействуетПо,
		|	уатРасписаниеРейсов.Пн КАК Пн,
		|	уатРасписаниеРейсов.Вт КАК Вт,
		|	уатРасписаниеРейсов.Ср КАК Ср,
		|	уатРасписаниеРейсов.Чт КАК Чт,
		|	уатРасписаниеРейсов.Пт КАК Пт,
		|	уатРасписаниеРейсов.Сб КАК Сб,
		|	уатРасписаниеРейсов.Вс КАК Вс,
		|	уатРасписаниеРейсов.ВремяПрибытия КАК ВремяПрибытия,
		|	уатРасписаниеРейсов.ВремяУбытия КАК ВремяУбытия,
		|	втРейсСДатойУстановки.НомерСтроки КАК НомерСтроки,
		|	втРейсСДатойУстановки.Пункт КАК Пункт,
		|	втРейсСДатойУстановки.УИД КАК УИДПункта,
		|	втРейсСДатойУстановки.ПунктНаименование КАК ПунктНаименование,
		|	втРейсСДатойУстановки.Рейс КАК Рейс,
		|	втРейсСДатойУстановки.НомерРейса КАК НомерРейса,
		|	ВЫБОР
		|		КОГДА уатРасписаниеРейсов.Пн ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьРасписание,
		|	уатРасписаниеРейсов.ДнейДоОтправления КАК ДнейДоОтправления,
		|	уатРасписаниеРейсов.FTL КАК FTL,
		|	втРейсСДатойУстановки.ПунктПрибытия КАК ПунктПрибытия,
		|	втРейсСДатойУстановки.ПунктПрибытияНаименование КАК ПунктПрибытияНаименование,
		|	втРейсСДатойУстановки.НомерСтроки = втРейсСДатойУстановки.НомерПоследнейСтроки КАК ЭтоПоследняяСтрокаМаршрута
		|ИЗ
		|	втРейсСДатойУстановки КАК втРейсСДатойУстановки
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатРасписаниеРейсов КАК уатРасписаниеРейсов
		|		ПО втРейсСДатойУстановки.Рейс = уатРасписаниеРейсов.Рейс
		|			И втРейсСДатойУстановки.УИД = уатРасписаниеРейсов.УИДПункта
		|			И (уатРасписаниеРейсов.Маршрут = &Маршрут)
		|			И (уатРасписаниеРейсов.Выход = &Выход
		|				ИЛИ &Выход = ЗНАЧЕНИЕ(Справочник.уатВыходыМаршрутов.ПустаяСсылка))
		|			И втРейсСДатойУстановки.ДатаУстановки = уатРасписаниеРейсов.ДатаУстановки
		|
		|УПОРЯДОЧИТЬ ПО
		|	ДатаУстановки,
		|	ДействуетС,
		|	ДействуетПо,
		|	НомерСтроки";
		Запрос.УстановитьПараметр("Маршрут", ЭтотОбъект.Маршрут);
		Запрос.УстановитьПараметр("Выход", ЭтотОбъект.Выход);
	Иначе
		Запрос.Текст = "ВЫБРАТЬ
		|	уатРейсыМаршрутов.Ссылка КАК Рейс,
		|	уатРейсыМаршрутов.НомерРейса КАК НомерРейса
		|ПОМЕСТИТЬ втРейсы
		|ИЗ
		|	Справочник.уатРейсыМаршрутов КАК уатРейсыМаршрутов
		|ГДЕ
		|	уатРейсыМаршрутов.Владелец = &ПунктНазначения
		|	И уатРейсыМаршрутов.ПометкаУдаления = ЛОЖЬ
		|	И уатРейсыМаршрутов.ПунктОтправления = &ПунктОтправления
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втРейсы.Рейс КАК Рейс,
		|	втРейсы.НомерРейса КАК НомерРейса
		|ИЗ
		|	втРейсы КАК втРейсы
		|
		|СГРУППИРОВАТЬ ПО
		|	втРейсы.Рейс,
		|	втРейсы.НомерРейса
		|
		|УПОРЯДОЧИТЬ ПО
		|	Рейс
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втРейсы.Рейс КАК Рейс,
		|	ЕСТЬNULL(уатРасписаниеРейсов.ДатаУстановки, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДатаУстановки,
		|	ЕСТЬNULL(уатРасписаниеРейсов.ДействуетС, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДействуетС,
		|	ЕСТЬNULL(уатРасписаниеРейсов.ДействуетПо, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)) КАК ДействуетПо,
		|	уатРасписаниеРейсов.Пн КАК Пн,
		|	уатРасписаниеРейсов.Вт КАК Вт,
		|	уатРасписаниеРейсов.Ср КАК Ср,
		|	уатРасписаниеРейсов.Чт КАК Чт,
		|	уатРасписаниеРейсов.Пт КАК Пт,
		|	уатРасписаниеРейсов.Сб КАК Сб,
		|	уатРасписаниеРейсов.Вс КАК Вс,
		|	уатРасписаниеРейсов.ВремяПрибытия КАК ВремяПрибытия,
		|	уатРасписаниеРейсов.ВремяУбытия КАК ВремяУбытия,
		|	ВЫБОР
		|		КОГДА уатРасписаниеРейсов.Пн ЕСТЬ NULL
		|			ТОГДА ЛОЖЬ
		|		ИНАЧЕ ИСТИНА
		|	КОНЕЦ КАК ЕстьРасписание,
		|	уатРасписаниеРейсов.ПунктНазначения КАК Пункт,
		|	ИСТИНА КАК ЭтоПоследняяСтрокаМаршрута
		|ИЗ
		|	втРейсы КАК втРейсы
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатРасписаниеРейсов КАК уатРасписаниеРейсов
		|		ПО втРейсы.Рейс = уатРасписаниеРейсов.Рейс
		|			И (уатРасписаниеРейсов.ДнейДоОтправления = &ДнейДоОтправления)
		|			И (уатРасписаниеРейсов.ДнейВПути = &ДнейВПути)
		|			И (уатРасписаниеРейсов.FTL = &FTL)
		|			И (уатРасписаниеРейсов.ПунктОтправления = &ПунктОтправления)
		|			И (уатРасписаниеРейсов.ПунктНазначения = &ПунктНазначения)
		|			И (уатРасписаниеРейсов.Грузоотправитель = &Грузоотправитель)
		|			И (уатРасписаниеРейсов.Грузополучатель = &Грузополучатель)
		|
		|УПОРЯДОЧИТЬ ПО
		|	ЕСТЬNULL(уатРасписаниеРейсов.ДатаУстановки, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)),
		|	ЕСТЬNULL(уатРасписаниеРейсов.ДействуетС, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0)),
		|	ЕСТЬNULL(уатРасписаниеРейсов.ДействуетПо, ДАТАВРЕМЯ(1, 1, 1, 0, 0, 0))";
		Запрос.УстановитьПараметр("ПунктОтправления", ЭтотОбъект.ПунктОтправления);
		Запрос.УстановитьПараметр("ПунктНазначения", ЭтотОбъект.ПунктНазначения);
		Запрос.УстановитьПараметр("Грузоотправитель", ЭтотОбъект.Грузоотправитель);
		Запрос.УстановитьПараметр("Грузополучатель", ЭтотОбъект.Грузополучатель);
		Запрос.УстановитьПараметр("ДнейДоОтправления", ЭтотОбъект.ДнейДоОтправления);
		Запрос.УстановитьПараметр("ДнейВПути", ЭтотОбъект.ДнейВПути);
		Запрос.УстановитьПараметр("FTL", ЭтотОбъект.FTL);
	КонецЕсли;
	
	ПакетЗапросов = Запрос.ВыполнитьПакет();
	
	КоличествоСтрокПунктов = 0;
	Если флЗаполнятьПоМаршруту Тогда
		ТаблицаРасписание = ПакетЗапросов[4].Выгрузить();
		Выборка = ПакетЗапросов[3].Выбрать();
	Иначе
		ТаблицаРасписание = ПакетЗапросов[2].Выгрузить();
		Выборка = ПакетЗапросов[1].Выбрать();
	КонецЕсли;
	КолонкиРейсов = Новый ТабличныйДокумент;
	КолонкаПунктов = Новый ТабличныйДокумент;
	КолонкаПунктов.Вывести(ОбластьШапкаПункт);
	мНомерРейса = 0;
	
	// Обновление параметров расписания, которые отображаются на форме в отдельных ячейках
	Если флЗаполнятьПоМаршруту И ТаблицаРасписание.Количество() > 0 Тогда
		// Считаем, что для расписания по маршруту эти параметры одинаковые для всех рейсов в пределах одного выхода, поэтому
		// берем их из произвольной строки
		ЗначенияЗаполнены = Ложь;
		Для Каждого ТекСтрока Из ТаблицаРасписание Цикл
			Если ТекСтрока.ЕстьРасписание Тогда
				ЭтотОбъект.ДнейДоОтправления = ТекСтрока.ДнейДоОтправления;
				ЭтотОбъект.FTL = ТекСтрока.FTL;
				ЗначенияЗаполнены = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		Если Не ЗначенияЗаполнены Тогда
			ЭтотОбъект.ДнейДоОтправления = 0;
			ЭтотОбъект.FTL = Ложь;
		КонецЕсли;
	КонецЕсли;
	
	СинийЦвет = Новый Цвет(152, 230, 255);
	ЗеленыйЦвет = Новый Цвет(200, 219, 173);
	ГолубойЦвет = Новый Цвет(226, 248, 255);
	СветлоЗеленыйЦвет = Новый Цвет(236, 245, 223);
	
	КоличествоРейсов = 0;
	ОбластьРейса = Новый ТабличныйДокумент;
	Пока Выборка.Следующий() Цикл
		КолонкаРейса = Новый ТабличныйДокумент;
		ОбластьШапкаРейс.Параметры.Рейс = "Рейс " + Выборка.НомерРейса;
		ОбластьШапкаРейс.Параметры.РейсСсылка = Выборка.Рейс;
		КолонкаРейса.Вывести(ОбластьШапкаРейс);
						
		мНомерПункта = 0;
		ПредПункт = Неопределено;
		НайденныеСтроки = ТаблицаРасписание.НайтиСтроки(Новый Структура("Рейс", Выборка.Рейс));
		Для Каждого ТекСтрока Из НайденныеСтроки Цикл
			Если мНомерПункта >= КоличествоСтрокПунктов Тогда
				ОбластьСтрокаПункт = Макет.ПолучитьОбласть("Строка|Пункт");
				Если флЗаполнятьПоМаршруту И флМаршрутОднимПунктом Тогда
					ОбластьСтрокаПункт.Параметры.Номер = ТекСтрока.НомерСтроки;
					ОбластьСтрокаПункт.Параметры.УИДПункта = ТекСтрока.УИДПункта;
					ОбластьСтрокаПункт.Параметры.Наименование = ТекСтрока.ПунктНаименование;
					ОбластьСтрокаПункт.Параметры.Пункт = ТекСтрока.Пункт;
				ИначеЕсли флЗаполнятьПоМаршруту И Не флМаршрутОднимПунктом Тогда
					ОбластьСтрокаПункт.Параметры.Номер = ТекСтрока.НомерСтроки;
					ОбластьСтрокаПункт.Параметры.УИДПункта = ТекСтрока.УИДПункта;
					ОбластьСтрокаПункт.Параметры.ПунктОтправленияНаименование = ТекСтрока.ПунктНаименование;
					ОбластьСтрокаПункт.Параметры.ПунктОтправления = ТекСтрока.Пункт;
					ОбластьСтрокаПункт.Параметры.ПунктПрибытияНаименование = ТекСтрока.ПунктПрибытияНаименование;
					ОбластьСтрокаПункт.Параметры.ПунктПрибытия = ТекСтрока.ПунктПрибытия;
				Иначе
					ОбластьСтрокаПункт.Параметры.ПунктОтправления = ЭтотОбъект.ПунктОтправления;
					ОбластьСтрокаПункт.Параметры.ПунктПрибытия = ЭтотОбъект.ПунктНазначения;
				КонецЕсли;
				КолонкаПунктов.Вывести(ОбластьСтрокаПункт);
			КонецЕсли;
			мНомерПункта = мНомерПункта + 1;
			
			ОбластьСтрокаРейс = Макет.ПолучитьОбласть("Строка|Рейс");
			ОбластьСтрокаРейс.Параметры.ДатаУстановки = ТекСтрока.ДатаУстановки;
			ОбластьСтрокаРейс.Параметры.ДействуетС    = ТекСтрока.ДействуетС;
			ОбластьСтрокаРейс.Параметры.ДействуетПо   = ТекСтрока.ДействуетПо;
			Если ТекСтрока.ЕстьРасписание Тогда
				ОбластьСтрокаРейс.Параметры.ВремяПрибытия = ТекСтрока.ВремяПрибытия;
				ОбластьСтрокаРейс.Параметры.ВремяУбытия   = ТекСтрока.ВремяУбытия;
				ОбластьСтрокаРейс.Параметры.Пн  = ТекСтрока.Пн;
				ОбластьСтрокаРейс.Параметры.Вт  = ТекСтрока.Вт;
				ОбластьСтрокаРейс.Параметры.Ср  = ТекСтрока.Ср;
				ОбластьСтрокаРейс.Параметры.Чт  = ТекСтрока.Чт;
				ОбластьСтрокаРейс.Параметры.Пт  = ТекСтрока.Пт;
				ОбластьСтрокаРейс.Параметры.Сб  = ТекСтрока.Сб;
				ОбластьСтрокаРейс.Параметры.Вс  = ТекСтрока.Вс;
			Иначе
				//ОбластьСтрокаРейс.Параметры.ДатаУстановки = "";
				ОбластьСтрокаРейс.Параметры.ВремяПрибытия = "";
				ОбластьСтрокаРейс.Параметры.ВремяУбытия   = "";
				//ОбластьСтрокаРейс.Параметры.ДействуетС    = "";
				//ОбластьСтрокаРейс.Параметры.ДействуетПо   = "";
				ОбластьСтрокаРейс.Параметры.Пн  = Ложь;
				ОбластьСтрокаРейс.Параметры.Вт  = Ложь;
				ОбластьСтрокаРейс.Параметры.Ср  = Ложь;
				ОбластьСтрокаРейс.Параметры.Чт  = Ложь;
				ОбластьСтрокаРейс.Параметры.Пт  = Ложь;
				ОбластьСтрокаРейс.Параметры.Сб  = Ложь;
				ОбластьСтрокаРейс.Параметры.Вс  = Ложь;
			КонецЕсли;
			
			ОбластьСтрокаРейс.Область().ЦветФона = ?(мНомерРейса % 2 = 0, ГолубойЦвет, СветлоЗеленыйЦвет);
			Если ОбластьСтрокаРейс.Параметры.Пн Тогда
				ОбластьСтрокаРейс.Область(1, 6, 1, 6).ЦветФона = ?(мНомерРейса % 2 = 0, СинийЦвет, ЗеленыйЦвет);
			КонецЕсли;
			Если ОбластьСтрокаРейс.Параметры.Вт Тогда
				ОбластьСтрокаРейс.Область(1, 7, 1, 7).ЦветФона = ?(мНомерРейса % 2 = 0, СинийЦвет, ЗеленыйЦвет);
			КонецЕсли;
			Если ОбластьСтрокаРейс.Параметры.Ср Тогда
				ОбластьСтрокаРейс.Область(1, 8, 1, 8).ЦветФона = ?(мНомерРейса % 2 = 0, СинийЦвет, ЗеленыйЦвет);
			КонецЕсли;
			Если ОбластьСтрокаРейс.Параметры.Чт Тогда
				ОбластьСтрокаРейс.Область(1, 9, 1, 9).ЦветФона = ?(мНомерРейса % 2 = 0, СинийЦвет, ЗеленыйЦвет);
			КонецЕсли;
			Если ОбластьСтрокаРейс.Параметры.Пт Тогда
				ОбластьСтрокаРейс.Область(1, 10, 1, 10).ЦветФона = ?(мНомерРейса % 2 = 0, СинийЦвет, ЗеленыйЦвет);
			КонецЕсли;
			Если ОбластьСтрокаРейс.Параметры.Сб Тогда
				ОбластьСтрокаРейс.Область(1, 11, 1, 11).ЦветФона = ?(мНомерРейса % 2 = 0, СинийЦвет, ЗеленыйЦвет);
			КонецЕсли;
			Если ОбластьСтрокаРейс.Параметры.Вс Тогда
				ОбластьСтрокаРейс.Область(1, 12, 1, 12).ЦветФона = ?(мНомерРейса % 2 = 0, СинийЦвет, ЗеленыйЦвет);
			КонецЕсли;
			
			ОбластьРейса.Вывести(ОбластьСтрокаРейс);
			
			Если ТекСтрока.ЭтоПоследняяСтрокаМаршрута Тогда 
				// Объединение ячеек с датами действия расписания
				Если флЗаполнятьПоМаршруту Тогда
					ОбластьРейса.Область(1, 2, ТекСтрока.НомерСтроки, 2).Объединить();
					ОбластьРейса.Область(1, 3, ТекСтрока.НомерСтроки, 3).Объединить();
				КонецЕсли;
				
				мОбласть = КолонкаРейса.Вывести(ОбластьРейса);
				//Если мНомерРейса % 2 = 0 Тогда
				//	мОбласть.ЦветФона = Новый Цвет(226, 248, 255);
				//Иначе
				//	мОбласть.ЦветФона = Новый Цвет(236, 245, 223);
				//КонецЕсли;
				ЛинияГраницыРейса = Новый Линия(ТипЛинииЯчейкиТабличногоДокумента.Сплошная, 2);
				мОбласть.Обвести(ЛинияГраницыРейса, ЛинияГраницыРейса, ЛинияГраницыРейса, ЛинияГраницыРейса);
				ОбластьРейса = Новый ТабличныйДокумент;
			КонецЕсли;
			
			ПредПункт = ТекСтрока.Пункт;
		КонецЦикла;
		КоличествоСтрокПунктов = Макс(КоличествоСтрокПунктов, мНомерПункта);
		мНомерРейса = мНомерРейса + 1;
		
		ОбластьПодвалРейс = Макет.ПолучитьОбласть("Подвал|Рейс");
		КолонкаРейса.Вывести(ОбластьПодвалРейс);
		Если ЗначениеЗаполнено(Выборка.Рейс) Тогда
	    	КолонкиРейсов.Присоединить(КолонкаРейса);
			КоличествоРейсов = КоличествоРейсов + 1;
		КонецЕсли;
	КонецЦикла;
	
	ОбластьПодвалПункт = Макет.ПолучитьОбласть("Подвал|Пункт");
	КолонкаПунктов.Вывести(ОбластьПодвалПункт);
	ТабДокумент.Присоединить(КолонкаПунктов);
	ТабДокумент.Присоединить(КолонкиРейсов);
	
	// Скрываем служебные колонки с датами установки расписания
	Для Сч = 0 По мНомерРейса-1 Цикл
		ТабДокумент.Область(, ЭтотОбъект.ШиринаКолонкиПункты + 1 + Сч*12, , ЭтотОбъект.ШиринаКолонкиПункты + 1 + Сч*12).Видимость = Ложь;
	КонецЦикла;
		
	Если ПоказыватьИнформациюПарныеМаршруты И флЗаполнятьПоМаршруту И Не флМаршрутОднимПунктом Тогда
		ОбластьПодсказка = Макет.ПолучитьОбласть("Подсказка");
		ТабДокумент.Вывести(ОбластьПодсказка);
	КонецЕсли;
	
	ТабДокумент.ФиксацияСверху = 2;
	ТабДокумент.ФиксацияСлева = ЭтотОбъект.ШиринаКолонкиПункты;
	
	Результат = Новый Структура("КоличествоРейсов", КоличествоРейсов);
	Возврат Результат;
	
КонецФункции

// Процедура копирует рейс для указанного выхода
// Копируется всё расписание рейса
Процедура СкопироватьРейс(мРейс, НомерНовогоРейса, мВремя=Неопределено) Экспорт
	Если Не ЗначениеЗаполнено(мВремя) Тогда Возврат; КонецЕсли;
	
	мНовыйРейс	= мРейс.ПолучитьОбъект().Скопировать();
	мНовыйРейс.НомерРейса = НомерНовогоРейса;
	мНовыйРейс.УстановитьНовыйКод();
	мНовыйРейс.Записать();
	
	Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатРасписаниеРейсов.Маршрут КАК Маршрут,
	|	уатРасписаниеРейсов.Выход КАК Выход,
	|	уатРасписаниеРейсов.Рейс КАК Рейс,
	|	уатРасписаниеРейсов.УИДПункта КАК УИДПункта,
	|	уатРасписаниеРейсов.ПунктОтправления КАК ПунктОтправления,
	|	уатРасписаниеРейсов.ПунктНазначения КАК ПунктНазначения,
	|	уатРасписаниеРейсов.Грузоотправитель КАК Грузоотправитель,
	|	уатРасписаниеРейсов.Грузополучатель КАК Грузополучатель,
	|	уатРасписаниеРейсов.ДатаУстановки КАК ДатаУстановки,
	|	уатРасписаниеРейсов.ДействуетС КАК ДействуетС,
	|	уатРасписаниеРейсов.ДействуетПо КАК ДействуетПо,
	|	уатРасписаниеРейсов.Пн КАК Пн,
	|	уатРасписаниеРейсов.Вт КАК Вт,
	|	уатРасписаниеРейсов.Ср КАК Ср,
	|	уатРасписаниеРейсов.Чт КАК Чт,
	|	уатРасписаниеРейсов.Пт КАК Пт,
	|	уатРасписаниеРейсов.Сб КАК Сб,
	|	уатРасписаниеРейсов.Вс КАК Вс,
	|	уатРасписаниеРейсов.ДнейДоОтправления КАК ДнейДоОтправления,
	|	уатРасписаниеРейсов.ДнейВПути КАК ДнейВПути,
	|	уатРасписаниеРейсов.FTL КАК FTL,
	|	уатРасписаниеРейсов.ВремяПрибытия КАК ВремяПрибытия,
	|	уатРасписаниеРейсов.ВремяУбытия КАК ВремяУбытия
	|ИЗ
	|	РегистрСведений.уатРасписаниеРейсов КАК уатРасписаниеРейсов
	|ГДЕ
	|	(уатРасписаниеРейсов.Выход = &Выход
	|			ИЛИ &Выход = ЗНАЧЕНИЕ(Справочник.уатВыходыМаршрутов.ПустаяСсылка))
	|	И уатРасписаниеРейсов.Рейс = &Рейс";
	
	Запрос.УстановитьПараметр("Выход", ЭтотОбъект.Выход);
	Запрос.УстановитьПараметр("Рейс", мРейс);
	ВыборкаЗаписей = Запрос.Выполнить().Выбрать();
	
	Пока ВыборкаЗаписей.Следующий() Цикл
		мЗапись = РегистрыСведений.уатРасписаниеРейсов.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(мЗапись, ВыборкаЗаписей);
		мЗапись.ВремяПрибытия	= ВыборкаЗаписей.ВремяПрибытия + 3600*Час(мВремя) + 60*Минута(мВремя) + Секунда(мВремя);
		мЗапись.ВремяУбытия		= ВыборкаЗаписей.ВремяУбытия + 3600*Час(мВремя) + 60*Минута(мВремя) + Секунда(мВремя);
		мЗапись.Рейс			= мНовыйРейс.Ссылка;
		мЗапись.Записать();
	КонецЦикла;
КонецПроцедуры
	
// Функция пересчитывает время отправления
// по указанным Маршруту, Выходу и Рейсу
// Время убытия рассчитывается, как время прибытия + введенное время
Функция ПересчитатьВремяОтправления(мРейс, мВремя=Неопределено) Экспорт
	
	Если НЕ ЗначениеЗаполнено(мВремя) тогда
		Возврат Ложь;
	КонецЕсли;
	
	флЗаполнятьПоМаршруту = ЗначениеЗаполнено(ЭтотОбъект.Маршрут);
	флМаршрутОднимПунктом = ЭтотОбъект.Маршрут.ПредставлениеМаршрутаОднимПунктом;
	Если флЗаполнятьПоМаршруту Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	уатМаршрутыЭтапы.ПунктОтправления КАК Пункт,
		|	уатМаршрутыЭтапы.ВремяВПути КАК ВремяВПути,
		|	уатМаршрутыЭтапы.УИД КАК УИДПункта
		|ИЗ
		|	Справочник.уатМаршруты.Этапы КАК уатМаршрутыЭтапы
		|ГДЕ
		|	уатМаршрутыЭтапы.Ссылка = &Маршрут
		|
		|УПОРЯДОЧИТЬ ПО
		|	уатМаршрутыЭтапы.НомерСтроки");
		Запрос.УстановитьПараметр("Маршрут", ЭтотОбъект.Маршрут);
		Запрос.УстановитьПараметр("Выход", ЭтотОбъект.Выход);
		Запрос.УстановитьПараметр("Рейс", мРейс);
		Выборка = Запрос.Выполнить().Выбрать();
		
		НаборЗаписей = РегистрыСведений.уатРасписаниеРейсов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Маршрут.Значение 		= ЭтотОбъект.Маршрут;
		НаборЗаписей.Отбор.Маршрут.Использование 	= Истина;
		НаборЗаписей.Отбор.Рейс.Значение 			= мРейс;
		НаборЗаписей.Отбор.Рейс.Использование 		= Истина;
		Если ЗначениеЗаполнено(ЭтотОбъект.Выход) Тогда
			НаборЗаписей.Отбор.Выход.Значение 			= ЭтотОбъект.Выход;
			НаборЗаписей.Отбор.Выход.Использование 		= Истина;
		КонецЕсли;
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		
		ПредВремя = мВремя;
		Если флМаршрутОднимПунктом Тогда
			ПредВремяВПути = 0;
			Пока Выборка.Следующий() Цикл
				ВремяПрибытияЭтапа = ПредВремя + уатОбщегоНазначения.уатВремяВСекунды(ПредВремяВПути);
				ВремяУбытияЭтапа = ВремяПрибытияЭтапа
					+ уатОбщегоНазначения.уатВремяВСекунды(уатОбщегоНазначения.ПолучитьВремяСтоянкиПоУмолчанию(Выборка.Пункт))
					+ уатОбщегоНазначения.уатВремяВСекунды(уатОбщегоНазначения.ПолучитьВремяДопСтонки(Выборка.Пункт));
				Для Каждого ТекЗапись Из НаборЗаписей Цикл
					Если ТекЗапись.УИДПункта = Выборка.УИДПункта Тогда
						ТекЗапись.ВремяПрибытия = ВремяПрибытияЭтапа;
						ТекЗапись.ВремяУбытия = ВремяУбытияЭтапа;
					КонецЕсли;
				КонецЦикла;
				
				ПредВремя = ВремяУбытияЭтапа;
				ПредВремяВПути = Выборка.ВремяВПути;
				
			КонецЦикла;
		Иначе
			Пока Выборка.Следующий() Цикл
				ВремяПрибытияЭтапа = ПредВремя;
				ВремяУбытияЭтапа = ВремяПрибытияЭтапа + уатОбщегоНазначения.уатВремяВСекунды(Выборка.ВремяВПути);
				Для Каждого ТекЗапись Из НаборЗаписей Цикл
					Если ТекЗапись.УИДПункта = Выборка.УИДПункта Тогда
						ТекЗапись.ВремяПрибытия = ВремяПрибытияЭтапа;
						ТекЗапись.ВремяУбытия = ВремяУбытияЭтапа;
					КонецЕсли;
				КонецЦикла;
				ПредВремя = ВремяУбытияЭтапа;
			КонецЦикла;
		КонецЕсли;
	Иначе
		НаборЗаписей = РегистрыСведений.уатРасписаниеРейсов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ПунктНазначения.Установить(ЭтотОбъект.ПунктНазначения);
		НаборЗаписей.Отбор.ПунктОтправления.Установить(ЭтотОбъект.ПунктОтправления);
		НаборЗаписей.Отбор.Грузоотправитель.Установить(ЭтотОбъект.Грузоотправитель);
		НаборЗаписей.Отбор.Грузополучатель.Установить(ЭтотОбъект.Грузополучатель);
		НаборЗаписей.Отбор.Рейс.Установить(мРейс);
		НаборЗаписей.Прочитать();
		
		Если НаборЗаписей.Количество() = 0 Тогда
			Возврат Ложь;
		КонецЕсли;
		
		мсвПункты = Новый Массив();
		мсвПункты.Добавить(Новый Структура("Пункт1, Лат1, Лон1, Пункт2, Лат2, Лон2, ИдентификаторСтрокиПункта, ВремяВыезда, Маршрут", 
			ЭтотОбъект.ПунктОтправления,,, ЭтотОбъект.ПунктНазначения,,,, '00010101' + (мВремя - НачалоДня(мВремя)), Маршрут));
		
		уатЗащищенныеФункцииСервер.РассчитатьТаблицуРасстояниеВремяМеждуПунктами(мсвПункты);
		
		Если мсвПункты.Количество() Тогда 
			ВремяВПути = мсвПункты[0].Время;
		Иначе
			Возврат Ложь;
		КонецЕсли;
		
		Для Каждого ТекЗапись Из НаборЗаписей Цикл
			ТекЗапись.ВремяУбытия = мВремя;
			ТекЗапись.ВремяПрибытия = мВремя + уатОбщегоНазначения.уатВремяВСекунды(ВремяВПути);
		КонецЦикла;
	КонецЕсли;
	
	Попытка
		НаборЗаписей.Записать();
	Исключение
		Возврат Ложь;
	КонецПопытки;
	
	Возврат Истина;
КонецФункции

// Печать маршрута.
// Вывод производится в новый табличный документ, которые далее можно вывести на печать
//
Функция ПечатьМаршрута() Экспорт
	
	ТабДокПеч = Новый ТабличныйДокумент;
	
	ЗаполнитьРейсыМаршрута(ТабДокПеч);
	
	ТабДокПеч.ОтображатьЗаголовки 	= Ложь;
	ТабДокПеч.ОтображатьСетку 		= Ложь;
	ТабДокПеч.ОриентацияСтраницы 	= ОриентацияСтраницы.Ландшафт;
	ТабДокПеч.ЧерноБелаяПечать 		= Истина;
	
	// Корректировка ширины колонок
	// при выводе более одного рейса колонки дней недели, начиная со второго рейса, становятся автошириной
		
	Возврат ТабДокПеч;
	
КонецФункции

#КонецОбласти

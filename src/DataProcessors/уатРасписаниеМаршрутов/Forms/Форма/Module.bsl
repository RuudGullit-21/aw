
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		АвтоТест = Истина;
	КонецЕсли;
	
	// начало блока стандартных операций
	ДопПараметрыОткрытие = Новый Структура("ИмяФормы", ИмяФормы);
	уатЗащищенныеФункцииСервер.уатОбработкаФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	// конец блока стандартных операций
	
	// начало блока стандартных операций
	ДопПараметрыОткрытие = Новый Структура("ИмяФормы", ИмяФормы);
	уатЗащищенныеФункцииСервер.уатОбработкаФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	// конец блока стандартных операций
	
	Если Параметры.Свойство("Маршрут") Тогда
		Объект.Маршрут = Параметры.Маршрут;
		Элементы.ТабличноеПолеМаршруты.ТекущаяСтрока = Параметры.Маршрут;
		Если Параметры.Свойство("Выход") Тогда
			Элементы.ТабличноеПолеВыходы.ТекущаяСтрока = Параметры.Выход;
		КонецЕсли;
	ИначеЕсли Параметры.Свойство("ПунктНазначения") Тогда
		РежимРедактированияПунктов = 1;
		РежимРедактирования = РежимРедактированияПунктов;
		Объект.ПунктНазначения = Параметры.ПунктНазначения;
		Элементы.ТаблицаПунктыПрибытия.ТекущаяСтрока = Параметры.ПунктНазначения;
	КонецЕсли;
	
	ИспользоватьВыходы = ПолучитьФункциональнуюОпцию("уатИспользоватьУчетБилетовИВыручки");
	ТабличноеПолеМаршруты.ТекстЗапроса 
		= СтрЗаменить(ТабличноеПолеМаршруты.ТекстЗапроса, "__СОСТОЯНИЕ_НЕДЕЙСТВУЕТ_", НСтр("ru=' (не действует)'"));
	ОбщегоНазначенияКлиентСервер.УстановитьПараметрДинамическогоСписка(ТабличноеПолеМаршруты, "ИспользоватьВыходы", ИспользоватьВыходы);
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// начало блока стандартных операций
	уатЗащищенныеФункцииКлиент.уатОбработкаФормаПриОткрытии(Отказ, ДопПараметрыОткрытие);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	// конец блока стандартных операций
	
	УстановитьВидимость();
	
	ОбновитьВыходы();
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура РасписаниеРейсовВыбор(Элемент, Область, СтандартнаяОбработка)
	мсвИзменитьЗаписиРегистра = Новый Массив;
	
	Для СчСтрока = Область.Верх По Область.Низ Цикл
		Для СчСтолбец = Область.Лево По Область.Право Цикл
			ТекОбласть = РасписаниеРейсов.Область(СчСтрока, СчСтолбец, СчСтрока, СчСтолбец);
			
			// проверяем вхождение области в границы таблицы
			Если ТекОбласть.Лево <= Объект.ШиринаКолонкиПункты
				ИЛИ ТекОбласть.Верх = 1
				ИЛИ ТекОбласть.Лево > РасписаниеРейсов.ШиринаТаблицы
				ИЛИ ТекОбласть.Низ > РасписаниеРейсов.ВысотаТаблицы-1 Тогда
				Продолжить;
			КонецЕсли;
			
			// Документ состоит из групп по 12 колонок, в которых колонки с 5-12 содержат дни недели
			НомерДняНедели = (ТекОбласть.Лево - Объект.ШиринаКолонкиПункты)%12;
			флДеньНедели = Ложь;
			Если НомерДняНедели = 6 ИЛИ НомерДняНедели = 7 ИЛИ НомерДняНедели = 8 ИЛИ НомерДняНедели = 9
				ИЛИ НомерДняНедели = 10 ИЛИ НомерДняНедели = 11 ИЛИ НомерДняНедели = 0 Тогда 
				флДеньНедели = Истина;
			КонецЕсли;
			
			Если НЕ флДеньНедели Тогда
				Продолжить;
			КонецЕсли;
			
			Если ТекОбласть.Верх > 2 И ТекОбласть.СодержитЗначение Тогда //меняем флажок текущей ячейки
				ТекОбласть.Значение = НЕ ТекОбласть.Значение;
				мсвИзменитьЗаписиРегистра.Добавить(Новый Структура("Лево, Низ", ТекОбласть.Лево, ТекОбласть.Низ));
				
			ИначеЕсли ТекОбласть.Верх = 2 Тогда //ставим флажок всего столбца
				флУстановить = Ложь;
				Для НомТекСтроки = 3 По РасписаниеРейсов.ВысотаТаблицы-1 Цикл
					Если Не РасписаниеРейсов.Область(НомТекСтроки, ТекОбласть.Лево, НомТекСтроки, ТекОбласть.Лево).СодержитЗначение Тогда
						Прервать;
					ИначеЕсли НЕ РасписаниеРейсов.Область(НомТекСтроки, ТекОбласть.Лево, НомТекСтроки, ТекОбласть.Лево).Значение Тогда
						флУстановить = Истина;
						Прервать;
					КонецЕсли;
				КонецЦикла;
				Для НомТекСтроки = 3 По РасписаниеРейсов.ВысотаТаблицы-1 Цикл
					ТекОбласть2 = РасписаниеРейсов.Область(НомТекСтроки, ТекОбласть.Лево, НомТекСтроки, ТекОбласть.Лево);
					Если ТекОбласть2.СодержитЗначение И ТекОбласть2.Значение <> флУстановить Тогда
						ТекОбласть2.Значение = флУстановить;
						мсвИзменитьЗаписиРегистра.Добавить(Новый Структура("Лево, Низ", ТекОбласть2.Лево, ТекОбласть2.Низ));
					КонецЕсли;
				КонецЦикла;
				
			КонецЕсли;
			
			СтандартнаяОбработка = Ложь;
		КонецЦикла;
	КонецЦикла;
	
	Если ТипЗнч(Область.Расшифровка) = Тип("СправочникСсылка.уатРейсыМаршрутов")
		И ЗначениеЗаполнено(Область.Расшифровка) Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыФормы = Новый Структура("Ключ, ИзменениеНомераРейса", Область.Расшифровка, Истина);
		ОповещениеЗакрытиеФормы = Новый ОписаниеОповещения("ИзменитьРейсЗакрытиеФормы", ЭтотОбъект);
		ОткрытьФорму("Справочник.уатРейсыМаршрутов.Форма.ФормаЭлемента", ПараметрыФормы, ЭтотОбъект,,,,ОповещениеЗакрытиеФормы, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
	ИзменитьЗаписиРегистра(мсвИзменитьЗаписиРегистра);
	
	ЗаполнитьРейсы();
	
КонецПроцедуры

&НаКлиенте
Процедура РасписаниеРейсовПриИзмененииСодержимогоОбласти(Элемент, Область)
	Если Область.СодержитЗначение И ТипЗнч(Область.Значение) = Тип("Дата") Тогда //время выезда/возвращения
		мсвИзменитьЗаписиРегистра = Новый Массив;
		мсвИзменитьЗаписиРегистра.Добавить(Новый Структура("Лево, Низ", Область.Лево, Область.Низ));
		ИзменитьЗаписиРегистра(мсвИзменитьЗаписиРегистра);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура РежимРедактированияПриИзменении(Элемент)
	// Очистка параметров, чтобы они не попали в регистр в том случае, когда они не должны.
	Объект.Выход = Неопределено;
	Объект.Маршрут = Неопределено;
	Объект.ПунктОтправления = Неопределено;
	Объект.ПунктНазначения = Неопределено;
	Объект.Грузоотправитель = Неопределено;
	Объект.Грузополучатель = Неопределено;
	Объект.ДнейВПути = 0;
	Объект.ДнейДоОтправления = 0;
	Объект.FTL = Неопределено;
	
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ДнейДоОтправленияПриИзменении(Элемент)
	ТекстНСтр = НСтр("ru='Количество дней до отправления будет изменено для всех отображаемых расписаний. Продолжить?';
		|en='Changes will be applied for all shown trips. Continue?'");
	// Маршрут и выход запоминаются, чтобы переключение тек. строки маршрутов или выходов не сломало логику работы
	ПараметрыВопроса = Новый Структура("Маршрут, Выход, FTL, ДнейДоОтправления", 
		Объект.Маршрут, Объект.Выход, Объект.FTL, Объект.ДнейДоОтправления);
	ПоказатьВопрос(Новый ОписаниеОповещения("ДнейДоОтправленияПриИзмененииЗавершение", ЭтотОбъект, ПараметрыВопроса),
		ТекстНСТР, РежимДиалогаВопрос.ОКОтмена);
КонецПроцедуры

&НаКлиенте
Процедура ДнейДоОтправленияПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		УстановитьПрочиеПараметрыРасписания(ДополнительныеПараметры);
	КонецЕсли;
	ЗаполнитьРейсы();
	УстановитьДоступностьКомандРасписания();

КонецПроцедуры

&НаКлиенте
Процедура FTLПриИзменении(Элемент)
	ТекстНСтр = НСтр("ru='Признак ""FTL"" будет изменен для всех отображаемых расписаний. Продолжить?';
		|en='Changes will be applied for all shown trips. Continue?'");
	// Маршрут и выход запоминаются, чтобы переключение тек. строки маршрутов или выходов не сломало логику работы
	ПараметрыВопроса = Новый Структура("Маршрут, Выход, FTL, ДнейДоОтправления", 
		Объект.Маршрут, Объект.Выход, Объект.FTL, Объект.ДнейДоОтправления);
	ПоказатьВопрос(Новый ОписаниеОповещения("FTLПриИзмененииЗавершение", ЭтотОбъект, ПараметрыВопроса),
		ТекстНСТР, РежимДиалогаВопрос.ОКОтмена);
КонецПроцедуры

&НаКлиенте
Процедура FTLПриИзмененииЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		УстановитьПрочиеПараметрыРасписания(ДополнительныеПараметры);
	КонецЕсли;
	ЗаполнитьРейсы();
	УстановитьДоступностьКомандРасписания();

КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормы

&НаКлиенте
Процедура ТабличноеПолеМаршрутыПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Объект.Маршрут = Неопределено;
	ИначеЕсли Элемент.ТекущиеДанные.ЭтоГруппа
		Или Элемент.ТекущиеДанные.Статус = ПредопределенноеЗначение("Перечисление.уатСтатусыДействия.НеДействует") Тогда
		Объект.Маршрут = Неопределено;
	ИначеЕсли Не ИспользоватьВыходы И Не Элемент.ТекущиеДанные.ПредставлениеМаршрутаОднимПунктом Тогда
		// При отключенной подсистеме "Учет билетов и выручки" маршруты, представляемые в виде парных пунктов,
		// не поддерживаются.
		Объект.Маршрут = Неопределено;
	Иначе
		Объект.Маршрут = Элемент.ТекущиеДанные.Ссылка;
	КонецЕсли;
	
	ОбновитьВыходы();
	Если Элементы.ТабличноеПолеВыходы.ТекущиеДанные <> Неопределено Тогда
		// В этом случае таблица с расписанием уже обновлена, т.к. была изменена активная строка выхода
		Объект.Выход = Элементы.ТабличноеПолеВыходы.ТекущиеДанные.Ссылка;
	Иначе
		Объект.Выход = Неопределено;
		ЗаполнитьРейсы();
		УстановитьДоступностьКомандРасписания();
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличноеПолеВыходыПриАктивизацииСтроки(Элемент)
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		Объект.Выход = Элемент.ТекущиеДанные.Ссылка;
		ЗаполнитьРейсы();
		УстановитьДоступностьКомандРасписания();
	Иначе
		Объект.Выход = Неопределено;
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ТабличноеПолеВыходыПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, ЭтоГруппа)
	Если Копирование Тогда
		Отказ = Истина;
		КоманднаяПанельВыходыСкопировать(Неопределено);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПунктыПрибытияПриАктивизацииСтроки(Элемент)
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Объект.ПунктНазначения = Неопределено;
	ИначеЕсли Элемент.ТекущиеДанные.ЭтоГруппа Тогда
		Объект.ПунктНазначения = Неопределено;
	Иначе
		Объект.ПунктНазначения = Элемент.ТекущиеДанные.Ссылка;
	КонецЕсли;
	
	ОбновитьПунктыОтправления();
	Если Элементы.ТаблицаПунктыОтправления.ТекущиеДанные <> Неопределено Тогда
		// В этом случае таблица с расписанием уже обновлена, т.к. была изменена активная строка пункта отправления
		Объект.ПунктОтправления  = Элементы.ТаблицаПунктыОтправления.ТекущиеДанные.ПунктОтправления;
		Объект.Грузоотправитель  = Элементы.ТаблицаПунктыОтправления.ТекущиеДанные.Грузоотправитель;
		Объект.Грузополучатель   = Элементы.ТаблицаПунктыОтправления.ТекущиеДанные.Грузополучатель;
		Объект.ДнейВПути         = Элементы.ТаблицаПунктыОтправления.ТекущиеДанные.ДнейВПути;
		Объект.ДнейДоОтправления = Элементы.ТаблицаПунктыОтправления.ТекущиеДанные.ДнейДоОтправления;
		Объект.FTL               = Элементы.ТаблицаПунктыОтправления.ТекущиеДанные.FTL;
	Иначе
		Объект.ПунктОтправления = Неопределено;
		Объект.Грузоотправитель = Неопределено;
		Объект.Грузополучатель  = Неопределено;
		Объект.ДнейВПути = 0;
		Объект.ДнейДоОтправления = 0;
		Объект.FTL = Ложь;
		ЗаполнитьРейсы();
		УстановитьДоступностьКомандРасписания();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПунктыОтправленияПриАктивизацииСтроки(Элемент)
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		Объект.ПунктОтправления  = Элемент.ТекущиеДанные.ПунктОтправления;
		Объект.Грузоотправитель  = Элемент.ТекущиеДанные.Грузоотправитель;
		Объект.Грузополучатель   = Элемент.ТекущиеДанные.Грузополучатель;
		Объект.ДнейВПути         = Элемент.ТекущиеДанные.ДнейВПути;
		Объект.ДнейДоОтправления = Элемент.ТекущиеДанные.ДнейДоОтправления;
		Объект.FTL               = Элемент.ТекущиеДанные.FTL;
		ЗаполнитьРейсы();
		УстановитьДоступностьКомандРасписания();
	Иначе
		Объект.ПунктОтправления = Неопределено;
		Объект.Грузоотправитель = Неопределено;
		Объект.Грузополучатель  = Неопределено;
		Объект.ДнейВПути = 0;
		Объект.ДнейДоОтправления = 0;
		Объект.FTL = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПунктыОтправленияВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ПунктыОтправленияИзменить(Элементы.ТаблицаПунктыОтправленияПунктыОтправленияИзменить);
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура КоманднаяПанельПунктыУстановитьФлажки(Команда)
	
	РежимРедактированияМаршрутов = 0;
	Если РежимРедактирования = РежимРедактированияМаршрутов Тогда
		Если ЗначениеЗаполнено(Объект.Маршрут) И ЗначениеЗаполнено(Объект.Выход) Тогда
			ТекстНСТР = НСтр("en='All days of the week will be marked for all trips"
				"Route ""%1"", exit ""%2"""
				"Continue?';ru='Будут отмечены все дни недели по всем рейсам"
				"Маршрут ""%1"", выход ""%2"""
				"Продолжить?'");
			ТекстНСТР = СтрШаблон(ТекстНСТР, Объект.Маршрут, Объект.Выход);
			ПоказатьВопрос(Новый ОписаниеОповещения("КоманднаяПанельПунктыУстановитьФлажкиЗавершение", ЭтотОбъект),
				ТекстНСТР, РежимДиалогаВопрос.ОКОтмена);
		ИначеЕсли ЗначениеЗаполнено(Объект.Маршрут) И Не ИспользоватьВыходы Тогда
			ТекстНСТР = НСтр("en='All days of the week will be marked for all trips"
				"Route ""%1"""
				"Continue?';ru='Будут отмечены все дни недели по всем рейсам"
				"Маршрут ""%1"""
				"Продолжить?'");
			ТекстНСТР = СтрШаблон(ТекстНСТР, Объект.Маршрут);
			ПоказатьВопрос(Новый ОписаниеОповещения("КоманднаяПанельПунктыУстановитьФлажкиЗавершение", ЭтотОбъект),
				ТекстНСТР, РежимДиалогаВопрос.ОКОтмена);
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(Объект.ПунктОтправления) И ЗначениеЗаполнено(Объект.ПунктНазначения) Тогда
			ТекстНСТР = НСтр("en='All days of the week will be marked for all trips
				|Route from ""%1"" to ""%2""';
				|ru='Будут отмечены все дни недели по всем рейсам
				|Пункт отправления ""%1"", пункт назначения ""%2""'");
			ТекстНСТР = СтрШаблон(ТекстНСТР, Объект.ПунктОтправления, Объект.ПунктНазначения);
			Если ЗначениеЗаполнено(Объект.Грузоотправитель) Тогда
				ТекстНСтр = ТекстНСТР + Символы.ПС + СтрШаблон(НСтр("ru='Грузоотправитель ""%1""';
					|en='Consignor ""%1""'"), Объект.Грузоотправитель);
			КонецЕсли;
			Если ЗначениеЗаполнено(Объект.Грузополучатель) Тогда
				ТекстНСтр = ТекстНСТР + Символы.ПС + СтрШаблон(НСтр("ru='Грузополучатель ""%1""';
					|en='Consignee ""%1""'"), Объект.Грузополучатель);
			КонецЕсли;
			ТекстНСтр = ТекстНСТР + Символы.ПС + НСтр("ru='Продолжить?'; en='Continue?'");
			ПоказатьВопрос(Новый ОписаниеОповещения("КоманднаяПанельПунктыУстановитьФлажкиЗавершение", ЭтотОбъект),
				ТекстНСТР, РежимДиалогаВопрос.ОКОтмена);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельПунктыУстановитьФлажкиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	
	Если Ответ = КодВозвратаДиалога.ОК Тогда
		КоманднаяПанельПунктыУстановитьФлажки_Сервер();
		ЗаполнитьРейсы();
		УстановитьДоступностьКомандРасписания();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельПунктыСнятьФлажки(Команда)
	РежимРедактированияМаршрутов = 0;
	Если РежимРедактирования = РежимРедактированияМаршрутов Тогда
		Если ЗначениеЗаполнено(Объект.Маршрут) И ЗначениеЗаполнено(Объект.Выход) Тогда
			ТекстНСТР = НСтр("en='All days of the week will be marked for all trips"
				"Route ""%1"", exit ""%2"""
				"Continue?';ru='Будут сняты отметки со всех дней недели по всем рейсам"
				"Маршрут ""%1"", выход ""%2"""
				"Продолжить?'");
			ТекстНСТР = СтрШаблон(ТекстНСТР, Объект.Маршрут, Объект.Выход);
			ПоказатьВопрос(Новый ОписаниеОповещения("КоманднаяПанельПунктыСнятьФлажкиЗавершение", ЭтотОбъект),
				ТекстНСТР, РежимДиалогаВопрос.ОКОтмена);
		ИначеЕсли ЗначениеЗаполнено(Объект.Маршрут) И Не ИспользоватьВыходы Тогда
			ТекстНСТР = НСтр("en='All days of the week will be marked for all trips"
				"Route ""%1"""
				"Continue?';ru='Будут сняты отметки со всех дней недели по всем рейсам"
				"Маршрут ""%1"""
				"Продолжить?'");
			ТекстНСТР = СтрШаблон(ТекстНСТР, Объект.Маршрут);
			ПоказатьВопрос(Новый ОписаниеОповещения("КоманднаяПанельПунктыСнятьФлажкиЗавершение", ЭтотОбъект),
				ТекстНСТР, РежимДиалогаВопрос.ОКОтмена);
		КонецЕсли;
	Иначе
		Если ЗначениеЗаполнено(Объект.ПунктОтправления) И ЗначениеЗаполнено(Объект.ПунктНазначения) Тогда
			ТекстНСТР = НСтр("en='All days of the week will be marked for all trips
				|Route from ""%1"" to ""%2""';
				|ru='Будут сняты отметки со всех дней недели по всем рейсам
				|Пункт отправления ""%1"", пункт назначения ""%2""'");
			ТекстНСТР = СтрШаблон(ТекстНСТР, Объект.ПунктОтправления, Объект.ПунктНазначения);
			Если ЗначениеЗаполнено(Объект.Грузоотправитель) Тогда
				ТекстНСтр = ТекстНСТР + Символы.ПС + СтрШаблон(НСТР("ru='Грузоотправитель ""%1""';
					|en='Consignor ""%1""'"), Объект.Грузоотправитель);
			КонецЕсли;
			Если ЗначениеЗаполнено(Объект.Грузополучатель) Тогда
				ТекстНСтр = ТекстНСТР + Символы.ПС + СтрШаблон(НСТР("ru='Грузополучатель ""%1""';
					|en='Consignee ""%1""'"), Объект.Грузополучатель);
			КонецЕсли;
			ТекстНСтр = ТекстНСТР + Символы.ПС + НСтр("ru='Продолжить?'; en='Continue?'");
			ПоказатьВопрос(Новый ОписаниеОповещения("КоманднаяПанельПунктыСнятьФлажкиЗавершение", ЭтотОбъект),
				ТекстНСТР, РежимДиалогаВопрос.ОКОтмена);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельПунктыСнятьФлажкиЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Ответ = РезультатВопроса;
    
    Если Ответ = КодВозвратаДиалога.ОК Тогда
        КоманднаяПанельПунктыСнятьФлажки_Сервер();
        ЗаполнитьРейсы();
		УстановитьДоступностьКомандРасписания();
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПеречитатьРасписание(Команда)
	ЗаполнитьРейсы();
	УстановитьДоступностьКомандРасписания();
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельМаршрутыПечатьМаршрута(Команда)
	
	ТабличныйДокументМаршруты = ПечатьМаршрута_Вызов_Функции();
	ТабличныйДокументМаршруты.Показать();
	
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельРасписаниеРейсовДобавитьРейс(Команда)
	РежимРедактированияМаршрутов = 0;
	Если РежимРедактирования = РежимРедактированияМаршрутов Тогда
		Если Не ЗначениеЗаполнено(Объект.Маршрут) Тогда
			ТекстНСТР = НСтр("en='Route not selected';ru='Не выбран маршрут'");
			ПоказатьПредупреждение(, ТекстНСТР);
			Возврат;
		КонецЕсли;
		
		Если ИспользоватьВыходы И Не ЗначениеЗаполнено(Объект.Выход) Тогда
			ТекстНСТР = НСтр("en='Output is not selected';ru='Не выбран выход'");
			ПоказатьПредупреждение(, ТекстНСТР);
			Возврат;
		КонецЕсли;
	Иначе
		Если Не ЗначениеЗаполнено(Объект.ПунктНазначения) Тогда
			ТекстНСТР = НСтр("en='Arrival point is not selected';ru='Не выбран пункт прибытия'");
			ПоказатьПредупреждение(, ТекстНСТР);
			Возврат;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.ПунктОтправления) Тогда
			ТекстНСТР = НСтр("en='Departure point is not selected';ru='Не выбран пункт отправления'");
			ПоказатьПредупреждение(, ТекстНСТР);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Маршрут, Выход, ПунктОтправления, ПунктНазначения, 
		|Грузоотправитель, Грузополучатель, ДействуетС, ДействуетПо, ДнейДоОтправления, ДнейВПути, FTL");
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, Объект);
	ПараметрыФормы.Вставить("Рейс", Неопределено);
	ПараметрыФормы.Вставить("ЭтоНовый", Истина);
	ОповещениеЗакрытиеФормы = Новый ОписаниеОповещения("ДобавитьРейсЗакрытиеФормы", ЭтотОбъект);
	ОткрытьФорму("Обработка.уатРасписаниеМаршрутов.Форма.ФормаРейса", ПараметрыФормы, ЭтотОбъект,,,,ОповещениеЗакрытиеФормы, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ДобавитьРейсЗакрытиеФормы(Результат, ДопПараметры) Экспорт
	Если Результат <> Неопределено Тогда
		ЗаполнитьРейсы();
		УстановитьДоступностьКомандРасписания();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельРасписаниеРейсовИзменитьРейс(Команда)
	мОбласти = РасписаниеРейсов.ВыделенныеОбласти;
	Если мОбласти.Количество() > 0 Тогда 
		мРейс = мОбласти[0].Расшифровка;
		Если ТипЗнч(мРейс) = Тип("СправочникСсылка.уатРейсыМаршрутов") Тогда
			ПараметрыФормы = Новый Структура("Ключ, ИзменениеНомераРейса", мРейс, Истина);
			ОповещениеЗакрытиеФормы = Новый ОписаниеОповещения("ИзменитьРейсЗакрытиеФормы", ЭтотОбъект);
			ОткрытьФорму("Справочник.уатРейсыМаршрутов.Форма.ФормаЭлемента", ПараметрыФормы, ЭтотОбъект,,,,ОповещениеЗакрытиеФормы, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе
			ТекстНСТР = НСтр("en='Trip not selected';ru='Не выбран рейс'");
			ПоказатьПредупреждение(, ТекстНСТР)
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРейсЗакрытиеФормы(Результат, ДопПараметры) Экспорт
	ЗаполнитьРейсы();
	УстановитьДоступностьКомандРасписания();
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельРасписаниеРейсовУдалитьРейс(Команда)
	мОбласти = РасписаниеРейсов.ВыделенныеОбласти;
	Если мОбласти.Количество() > 0 Тогда 
		мРейс = мОбласти[0].Расшифровка;
		Если Тип("СправочникСсылка.уатРейсыМаршрутов") = ТипЗнч(мРейс) Тогда
			ТекстНСТР = НСтр("en='Delete trip?';ru='Удалить рейс?'");
			ПоказатьВопрос(Новый ОписаниеОповещения("КоманднаяПанельРасписаниеРейсовУдалитьРейсЗавершение", ЭтотОбъект, Новый Структура("мРейс", мРейс)), ТекстНСТР, РежимДиалогаВопрос.ОКОтмена);
		Иначе
			ТекстНСТР = НСтр("en='Trip not selected';ru='Не выбран рейс'");
			ПоказатьПредупреждение(, ТекстНСТР, 5)
		КонецЕсли;	
	КонецЕсли;	
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельРасписаниеРейсовУдалитьРейсЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    мРейс = ДополнительныеПараметры.мРейс;
    
    Если РезультатВопроса = КодВозвратаДиалога.ОК Тогда
        РейсУдалить(мРейс);
        ЗаполнитьРейсы();
		УстановитьДоступностьКомандРасписания();
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельРасписаниеРейсовСкопироватьРейс(Команда)
	
	Перем мВремя;
	
	мОбласти = РасписаниеРейсов.ВыделенныеОбласти;
	Если мОбласти.Количество() > 0 Тогда 
		мРейс = мОбласти[0].Расшифровка;
		Если Тип("СправочникСсылка.уатРейсыМаршрутов") = ТипЗнч(мРейс) Тогда
			ОповещениеЗакрытиеФормы = Новый ОписаниеОповещения("КоманднаяПанельРасписаниеРейсовСкопироватьРейсЗавершение", ЭтотОбъект);
			ОткрытьФорму("Обработка.уатРасписаниеМаршрутов.Форма.ФормаКопирования", Новый Структура("Рейс", мРейс),
				ЭтаФорма,,,, ОповещениеЗакрытиеФормы, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе
			ТекстНСТР = НСтр("en='Trip not selected';ru='Не выбран рейс'");
			ПоказатьПредупреждение(, ТекстНСТР)
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельРасписаниеРейсовСкопироватьРейсЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) <> Тип("Структура")
		Или Не Результат.Свойство("Рейс") Или Не Результат.Свойство("Смещение") Тогда
		Возврат;
	КонецЕсли;
	
	мРейс = Результат.Рейс;
    мВремя = Результат.Смещение;
	НомерНовогоРейса = Результат.НомерНовогоРейса;
	
	СкопироватьРейс_Вызов_Функции(мРейс, НомерНовогоРейса, мВремя);
	ЗаполнитьРейсы();
	УстановитьДоступностьКомандРасписания();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВремя(Команда)
	Перем мВремя;
	
	РежимРедактированияМаршрутов = 0;
	Если РежимРедактирования = РежимРедактированияМаршрутов Тогда
		Если Не ЗначениеЗаполнено(Объект.Маршрут) Тогда
			ТекстНСТР = НСтр("en='Route not selected';ru='Не выбран маршрут'");
			ПоказатьПредупреждение(, ТекстНСТР);
			Возврат;
		КонецЕсли;
	Иначе
	    Если Не ЗначениеЗаполнено(Объект.ПунктНазначения) Тогда
			ТекстНСТР = НСтр("en='Arrival point is not selected';ru='Не выбран пункт прибытия'");
			ПоказатьПредупреждение(, ТекстНСТР);
			Возврат;
		КонецЕсли;
		
		Если Не ЗначениеЗаполнено(Объект.ПунктОтправления) Тогда
			ТекстНСТР = НСтр("en='Departure point is not selected';ru='Не выбран пункт отправления'");
			ПоказатьПредупреждение(, ТекстНСТР);
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	мОбласти = РасписаниеРейсов.ВыделенныеОбласти;
	Если мОбласти.Количество() > 0 Тогда 
		мРейс = мОбласти[0].Расшифровка;
		Если Тип("СправочникСсылка.уатРейсыМаршрутов") = ТипЗнч(мРейс) Тогда
			ТекстНСТР = НСтр("en='Specify time of arrival at first point';ru='Укажите время прибытия в первый пункт'");
			ПоказатьВводДаты(Новый ОписаниеОповещения("ЗаполнитьВремяЗавершение", ЭтотОбъект, Новый Структура("мРейс, мВремя", мРейс, мВремя)), мВремя, ТекстНСТР, ЧастиДаты.Время);
		Иначе
			ТекстНСТР = НСтр("en='Trip not selected';ru='Не выбран рейс'");
			ПоказатьПредупреждение(, ТекстНСТР)
		КонецЕсли;	
	КонецЕсли;	
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьВремяЗавершение(Дата, ДополнительныеПараметры) Экспорт
    
    мРейс = ДополнительныеПараметры.мРейс;
    мВремя = ?(Дата = Неопределено, ДополнительныеПараметры.мВремя, Дата);
    
    Если ПересчитатьВремяОтправления_Вызов_Функции(мРейс, мВремя) Тогда
        ЗаполнитьРейсы();
		УстановитьДоступностьКомандРасписания();
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура КоманднаяПанельВыходыСкопировать(Команда)
	
	Перем мВремя;
	
	Если Не ЗначениеЗаполнено(Объект.Выход) Тогда
		ТекстНСТР = НСтр("en='Output is not selected!';ru='Не выбран выход!'");
		ПоказатьПредупреждение(, ТекстНСТР);
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("Выход", Объект.Выход);
	ОписаниеОповещения = Новый ОписаниеОповещения("ВыходыСкопироватьЗакрытиеФормы", ЭтотОбъект);
	ОткрытьФорму("Обработка.уатРасписаниеМаршрутов.Форма.ФормаКопирования", ПараметрыФормы, ЭтотОбъект,,,,
		ОписаниеОповещения, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыходыСкопироватьЗакрытиеФормы(Результат, ДопПараметры) Экспорт
	Если ТипЗнч(Результат) = Тип("Структура") И Результат.Свойство("Смещение") Тогда
		КоманднаяПанельВыходыСкопировать_Сервер(Результат.Смещение);
		Элементы.ТабличноеПолеВыходы.Обновить();
		УстановитьДоступностьКомандРасписания();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПунктыОтправленияДобавить(Команда)
	Если Не ЗначениеЗаполнено(Объект.ПунктНазначения) Тогда
		ТекстНСТР = НСтр("en='Arrival point not selected';ru='Не выбран пункт прибытия'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСтр);
		Возврат;
	КонецЕсли;
	ОповещениеЗакрытиеФормы = Новый ОписаниеОповещения("ПунктыОтправленияДобавитьЗакрытиеФормы", ЭтотОбъект);
	ОткрытьФорму("Обработка.уатРасписаниеМаршрутов.Форма.ФормаПунктаОтправления",, ЭтотОбъект,,,,ОповещениеЗакрытиеФормы, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ПунктыОтправленияДобавитьЗакрытиеФормы(Результат, ДопПараметры) Экспорт
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ПунктыОтправленияДобавитьЗакрытиеФормыСервер(Результат);
	КонецЕсли;
КонецПроцедуры

&НаСервере 
Процедура ПунктыОтправленияДобавитьЗакрытиеФормыСервер(Результат)
	
	НайденныеСтроки = ТаблицаПунктыОтправления.НайтиСтроки(Результат);
	Если НайденныеСтроки.Количество() > 0 Тогда
		ТекстНСтр = НСтр("ru='Строка с выбранными значениями параметров уже существует'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСтр);
		Элементы.ТаблицаПунктыОтправления.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
	Иначе
		НоваяСтрока = ТаблицаПунктыОтправления.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Результат);
		Элементы.ТаблицаПунктыОтправления.ТекущаяСтрока = НоваяСтрока.ПолучитьИдентификатор();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПунктыОтправленияИзменить(Команда)
	ТекущиеДанные = Элементы.ТаблицаПунктыОтправления.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ТекстНСТР = НСтр("en='Table row not selected';ru='Не выбрана строка таблицы пунктов отправления'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСтр);
		Возврат;
	КонецЕсли;
	ПараметрыФормы = Новый Структура("ПунктОтправления, Грузоотправитель, Грузополучатель, ДнейДоОтправления, ДнейВПути, FTL");
	ЗаполнитьЗначенияСвойств(ПараметрыФормы, ТекущиеДанные);
	ПараметрыФормы.Вставить("ИзменениеСвойств", Истина);
	ОповещениеЗакрытиеФормы = Новый ОписаниеОповещения("ПунктыОтправленияИзменитьЗакрытиеФормы", ЭтотОбъект);
	ОткрытьФорму("Обработка.уатРасписаниеМаршрутов.Форма.ФормаПунктаОтправления", ПараметрыФормы, ЭтотОбъект,,,,ОповещениеЗакрытиеФормы, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ПунктыОтправленияИзменитьЗакрытиеФормы(Результат, ДопПараметры) Экспорт
	ТекущиеДанные = Элементы.ТаблицаПунктыОтправления.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ТекстНСТР = НСтр("en='Table row not selected';ru='Не выбрана строка таблицы пунктов отправления'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСтр);
		Возврат;
	КонецЕсли;
	СтарыеДанные = Новый Структура("ПунктОтправления, Грузоотправитель, Грузополучатель, ДнейДоОтправления, ДнейВПути, FTL");
	ЗаполнитьЗначенияСвойств(СтарыеДанные, ТекущиеДанные);
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ПунктыОтправленияИзменитьЗакрытиеФормыСервер(СтарыеДанные, Результат);
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, Результат);
		ЗаполнитьЗначенияСвойств(Объект, Результат);
		ЗаполнитьРейсы();
		УстановитьДоступностьКомандРасписания();
	КонецЕсли;
КонецПроцедуры

&НаСервере 
Процедура ПунктыОтправленияИзменитьЗакрытиеФормыСервер(СтарыеДанные, НовыеДанные);
	// Обновляем данные расписаний
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	уатРасписаниеРейсов.Рейс КАК Рейс,
	|	уатРасписаниеРейсов.ПунктОтправления КАК ПунктОтправления,
	|	уатРасписаниеРейсов.ПунктНазначения КАК ПунктНазначения,
	|	уатРасписаниеРейсов.Грузоотправитель КАК Грузоотправитель,
	|	уатРасписаниеРейсов.Грузополучатель КАК Грузополучатель,
	|	уатРасписаниеРейсов.ДатаУстановки КАК ДатаУстановки,
	|	уатРасписаниеРейсов.ДействуетС КАК ДействуетС,
	|	уатРасписаниеРейсов.ДействуетПо КАК ДействуетПо,
	|	уатРасписаниеРейсов.Пн КАК Пн,
	|	уатРасписаниеРейсов.Вт КАК Вт,
	|	уатРасписаниеРейсов.Ср КАК Ср,
	|	уатРасписаниеРейсов.Чт КАК Чт,
	|	уатРасписаниеРейсов.Пт КАК Пт,
	|	уатРасписаниеРейсов.Сб КАК Сб,
	|	уатРасписаниеРейсов.Вс КАК Вс,
	|	уатРасписаниеРейсов.ДнейДоОтправления КАК ДнейДоОтправления,
	|	уатРасписаниеРейсов.ДнейВПути КАК ДнейВПути,
	|	уатРасписаниеРейсов.FTL КАК FTL,
	|	уатРасписаниеРейсов.ВремяПрибытия КАК ВремяПрибытия,
	|	уатРасписаниеРейсов.ВремяУбытия КАК ВремяУбытия
	|ИЗ
	|	РегистрСведений.уатРасписаниеРейсов КАК уатРасписаниеРейсов
	|ГДЕ
	|	уатРасписаниеРейсов.ПунктОтправления = &ПунктОтправления
	|	И уатРасписаниеРейсов.ПунктНазначения = &ПунктНазначения
	|	И уатРасписаниеРейсов.Грузоотправитель = &Грузоотправитель
	|	И уатРасписаниеРейсов.Грузополучатель = &Грузополучатель
	|	И уатРасписаниеРейсов.ДнейДоОтправления = &ДнейДоОтправления
	|	И уатРасписаниеРейсов.ДнейВПути = &ДнейВПути
	|	И уатРасписаниеРейсов.FTL = &FTL");
	Запрос.УстановитьПараметр("ПунктНазначения", Объект.ПунктНазначения);
	Запрос.УстановитьПараметр("ПунктОтправления", СтарыеДанные.ПунктОтправления);
	Запрос.УстановитьПараметр("Грузоотправитель", СтарыеДанные.Грузоотправитель);
	Запрос.УстановитьПараметр("Грузополучатель", СтарыеДанные.Грузополучатель);
	Запрос.УстановитьПараметр("ДнейДоОтправления", СтарыеДанные.ДнейДоОтправления);
	Запрос.УстановитьПараметр("ДнейВПути", СтарыеДанные.ДнейВПути);
	Запрос.УстановитьПараметр("FTL", СтарыеДанные.FTL);
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		// Старые данные заменяются новыми. При этом содержимое записи стирается и перезаписывается.
		МенеджерЗаписиРейсы = РегистрыСведений.уатРасписаниеРейсов.СоздатьМенеджерЗаписи();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписиРейсы, Выборка);
		МенеджерЗаписиРейсы.Прочитать();
		ЗаполнитьЗначенияСвойств(МенеджерЗаписиРейсы, НовыеДанные);
		МенеджерЗаписиРейсы.Записать();
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРасписание(Команда)
	мОбласти = РасписаниеРейсов.ВыделенныеОбласти;
	Если мОбласти.Количество() > 0 Тогда 
		мРейс = мОбласти[0].Расшифровка;
		Если Тип("СправочникСсылка.уатРейсыМаршрутов") = ТипЗнч(мРейс) Тогда
			ПараметрыФормы = Новый Структура("FTL, Выход, Грузоотправитель, Грузополучатель, ДнейВПути, ДнейДоОтправления, Маршрут, ПунктНазначения, ПунктОтправления, Рейс");
			ЗаполнитьЗначенияСвойств(ПараметрыФормы, Объект);
			ПараметрыФормы.Вставить("Рейс", мРейс);
			ОповещениеЗакрытиеФормы = Новый ОписаниеОповещения("ИзменитьРасписаниеЗакрытиеФормы", ЭтотОбъект);
			ОткрытьФорму("Обработка.уатРасписаниеМаршрутов.Форма.ФормаИзмененияРасписания", ПараметрыФормы, ЭтотОбъект,,,,ОповещениеЗакрытиеФормы, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Иначе
			ТекстНСТР = НСтр("en='Trip not selected';ru='Не выбран рейс'");
			ПоказатьПредупреждение(, ТекстНСТР)
		КонецЕсли;	
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьРасписаниеЗакрытиеФормы(Результат, ДопПараметры) Экспорт
	ЗаполнитьРейсы();
	УстановитьДоступностьКомандРасписания();
КонецПроцедуры

&НаКлиенте
Процедура СвернутьМаршруты(Команда)
	МаршрутыСвернуты = Истина;
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура РазвернутьМаршруты(Команда)
	МаршрутыСвернуты = Ложь;
	УстановитьВидимость();
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьВидимость()
	
	РежимРедактированияМаршрутов = 0;
	флРежимРедактированияМаршрутов = РежимРедактирования = РежимРедактированияМаршрутов;
	ЭтоКОРП = уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП();
	
	Элементы.ГруппаРасписаниеМаршрутов.Видимость = флРежимРедактированияМаршрутов И Не МаршрутыСвернуты;
	Элементы.РазвернутьМаршруты.Видимость = флРежимРедактированияМаршрутов И МаршрутыСвернуты;
	Элементы.ГруппаПараметрыРасписания.Видимость = флРежимРедактированияМаршрутов И ЭтоКОРП;
	Элементы.ГруппаРасписаниеПунктов.Видимость = Не флРежимРедактированияМаршрутов;
	
	Элементы.ТабличноеПолеВыходы.Видимость = ИспользоватьВыходы;
	
	Элементы.РежимРедактирования.Видимость = ЭтоКОРП;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьДоступностьКомандРасписания()
	Элементы.ИзменитьРейс.Доступность = РейсыСуществуют;
	Элементы.СкопироватьРейс.Доступность = РейсыСуществуют;
	Элементы.УдалитьРейс.Доступность = РейсыСуществуют;
	Элементы.ДобавитьРейс.Доступность = РейсыМогутБытьСозданы;
	Элементы.РасписаниеРейсовКонтекстноеМенюИзменитьРейс.Доступность = РейсыСуществуют;
	Элементы.РасписаниеРейсовКонтекстноеМенюСкопироватьРейс.Доступность = РейсыСуществуют;
	Элементы.РасписаниеРейсовКонтекстноеМенюУдалитьРейс.Доступность = РейсыСуществуют;
	Элементы.РасписаниеРейсовКонтекстноеМенюДобавитьРейс.Доступность = РейсыМогутБытьСозданы;
	
	Элементы.ГруппаФлажки.Доступность = РейсыСуществуют;
	Элементы.ИзменитьРасписание.Доступность = РейсыСуществуют;
	Элементы.РасписаниеРейсовКонтекстноеМенюИзменитьРасписание.Доступность = РейсыСуществуют;
	Элементы.ЗаполнитьВремя.Доступность = РейсыСуществуют;
	Элементы.РасписаниеРейсовКонтекстноеМенюЗаполнитьВремя.Доступность = РейсыСуществуют;
	Элементы.ПечатьМаршрута.Доступность = РейсыСуществуют;
	
	Элементы.ГруппаПараметрыРасписания.Доступность = РейсыМогутБытьСозданы;
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьРейсы()
	
	РежимРедактированияМаршрутов = 0;
	Если РежимРедактирования = РежимРедактированияМаршрутов 
		И ЗначениеЗаполнено(Объект.Маршрут) 
		И (ЗначениеЗаполнено(Объект.Выход) Или Не ИспользоватьВыходы) Тогда
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ИмяПараметровПечати = "Расписание_Маршрутов";
	
		ЗаполнитьРейсыМаршрута_Вызов_Функции(ТабДокумент);
		РасписаниеРейсов = ТабДокумент;
	ИначеЕсли РежимРедактирования <> РежимРедактированияМаршрутов 
		И ЗначениеЗаполнено(Объект.ПунктОтправления)
		И ЗначениеЗаполнено(Объект.ПунктНазначения) Тогда
		ТабДокумент = Новый ТабличныйДокумент;
		ТабДокумент.ИмяПараметровПечати = "Расписание_Маршрутов";
	
		ЗаполнитьРейсыМаршрута_Вызов_Функции(ТабДокумент);
		РасписаниеРейсов = ТабДокумент;
	Иначе
		РасписаниеРейсов.Очистить();
		РасписаниеРейсов.ФиксацияСверху = 0;
		РасписаниеРейсов.ФиксацияСлева = 0;
		РейсыСуществуют = Ложь;
		РейсыМогутБытьСозданы = Ложь;
		
		Объект.FTL = Ложь;
		Объект.ДнейДоОтправления = 0;
		Объект.ДнейВПути = 0;
	КонецЕсли;
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура РейсУдалить(мРейс)
	мОбъектРейс	= мРейс.ПолучитьОбъект();
	мОбъектРейс.УстановитьПометкуУдаления(Истина);
	
	// Удаляем связанные с рейсом элементы расписания
	НаборЗаписей = РегистрыСведений.уатРасписаниеРейсов.СоздатьНаборЗаписей();
	НаборЗаписей.Отбор.Рейс.Значение = мРейс;
	НаборЗаписей.Отбор.Рейс.Использование = Истина;
	НаборЗаписей.Прочитать();
	НаборЗаписей.Очистить();
	НаборЗаписей.Записать();
КонецПроцедуры

&НаСервере
Процедура ИзменитьЗаписиРегистра(мсвЗаписиРегистра)
	Для Каждого ТекЗапись Из мсвЗаписиРегистра Цикл
		ТекОбластьЛево = ТекЗапись.Лево;
		ТекОбластьНиз = ТекЗапись.Низ;
		
		Отступ = Объект.ШиринаКолонкиПункты + 1;
		НомерРейса = Цел((ТекОбластьЛево - Отступ) / 12); // Первый рейс будет иметь номер 0
		мРейс = РасписаниеРейсов.Область(1, Отступ + 1 + 12*НомерРейса, 1, Отступ + 1 + 12*НомерРейса).Расшифровка;
		
		МенеджерЗаписиРейсы = РегистрыСведений.уатРасписаниеРейсов.СоздатьМенеджерЗаписи();
		МенеджерЗаписиРейсы.Маршрут = Объект.Маршрут;
		МенеджерЗаписиРейсы.Выход = Объект.Выход;
		МенеджерЗаписиРейсы.Рейс = мРейс;
		
		МенеджерЗаписиРейсы.ПунктОтправления = Объект.ПунктОтправления;
		МенеджерЗаписиРейсы.ПунктНазначения = Объект.ПунктНазначения;
		МенеджерЗаписиРейсы.Грузоотправитель = Объект.Грузоотправитель;
		МенеджерЗаписиРейсы.Грузополучатель = Объект.Грузополучатель;
		
		МенеджерЗаписиРейсы.ДнейДоОтправления = Объект.ДнейДоОтправления;
		МенеджерЗаписиРейсы.ДнейВПути = Объект.ДнейВПути;
		МенеджерЗаписиРейсы.FTL = Объект.FTL;
		
		МенеджерЗаписиРейсы.ДатаУстановки = РасписаниеРейсов.Область(ТекОбластьНиз, Отступ + 12*НомерРейса, ТекОбластьНиз, Отступ + 12*НомерРейса).Значение;
		
		Если РежимРедактирования = 0 Тогда
			УИДПункта = РасписаниеРейсов.Область(ТекОбластьНиз, 1, ТекОбластьНиз, 1).Расшифровка;
			МенеджерЗаписиРейсы.УИДПункта = УИДПункта;
						
			// В режиме "Расписание маршрутов" ячейки "Действует с" и "Действует по" объединены, 
			// поэтому данные надо брать из строки первого пункта
			НомерПункта = РасписаниеРейсов.Область(ТекОбластьНиз, 1, ТекОбластьНиз, 1).Значение;
			НомерСтрокиПервогоПункта = ТекОбластьНиз - НомерПункта + 1;
			МенеджерЗаписиРейсы.ДействуетС = РасписаниеРейсов.Область(НомерСтрокиПервогоПункта, Отступ + 1 + 12*НомерРейса, НомерСтрокиПервогоПункта, Отступ + 1 + 12*НомерРейса).Значение;
			МенеджерЗаписиРейсы.ДействуетПо = РасписаниеРейсов.Область(НомерСтрокиПервогоПункта, Отступ + 2 + 12*НомерРейса, НомерСтрокиПервогоПункта, Отступ + 2 + 12*НомерРейса).Значение;
		Иначе
			// В режиме "Расписание пунктов" ячейки не объединяются
			МенеджерЗаписиРейсы.ДействуетС = РасписаниеРейсов.Область(ТекОбластьНиз, Отступ + 1 + 12*НомерРейса, ТекОбластьНиз, Отступ + 1 + 12*НомерРейса).Значение;
			МенеджерЗаписиРейсы.ДействуетПо = РасписаниеРейсов.Область(ТекОбластьНиз, Отступ + 2 + 12*НомерРейса, ТекОбластьНиз, Отступ + 2 + 12*НомерРейса).Значение;
		КонецЕсли;
		// Порядок колонок со временем прибытия / убытия зависит от режима редактирования
		Если РежимРедактирования = 0 Тогда
			МенеджерЗаписиРейсы.ВремяПрибытия = РасписаниеРейсов.Область(ТекОбластьНиз, Отступ + 3 + 12*НомерРейса, ТекОбластьНиз, Отступ + 3 + 12*НомерРейса).Значение;
			МенеджерЗаписиРейсы.ВремяУбытия = РасписаниеРейсов.Область(ТекОбластьНиз, Отступ + 4 + 12*НомерРейса, ТекОбластьНиз, Отступ + 4 + 12*НомерРейса).Значение;
		Иначе
			МенеджерЗаписиРейсы.ВремяУбытия = РасписаниеРейсов.Область(ТекОбластьНиз, Отступ + 3 + 12*НомерРейса, ТекОбластьНиз, Отступ + 3 + 12*НомерРейса).Значение;
			МенеджерЗаписиРейсы.ВремяПрибытия = РасписаниеРейсов.Область(ТекОбластьНиз, Отступ + 4 + 12*НомерРейса, ТекОбластьНиз, Отступ + 4 + 12*НомерРейса).Значение;
		КонецЕсли;
		
		МенеджерЗаписиРейсы.Пн = РасписаниеРейсов.Область(ТекОбластьНиз, Отступ + 5  + 12*НомерРейса, ТекОбластьНиз, Отступ + 5  + 12*НомерРейса).Значение;
		МенеджерЗаписиРейсы.Вт = РасписаниеРейсов.Область(ТекОбластьНиз, Отступ + 6  + 12*НомерРейса, ТекОбластьНиз, Отступ + 6  + 12*НомерРейса).Значение;
		МенеджерЗаписиРейсы.Ср = РасписаниеРейсов.Область(ТекОбластьНиз, Отступ + 7  + 12*НомерРейса, ТекОбластьНиз, Отступ + 7  + 12*НомерРейса).Значение;
		МенеджерЗаписиРейсы.Чт = РасписаниеРейсов.Область(ТекОбластьНиз, Отступ + 8  + 12*НомерРейса, ТекОбластьНиз, Отступ + 8  + 12*НомерРейса).Значение;
		МенеджерЗаписиРейсы.Пт = РасписаниеРейсов.Область(ТекОбластьНиз, Отступ + 9  + 12*НомерРейса, ТекОбластьНиз, Отступ + 9  + 12*НомерРейса).Значение;
		МенеджерЗаписиРейсы.Сб = РасписаниеРейсов.Область(ТекОбластьНиз, Отступ + 10 + 12*НомерРейса, ТекОбластьНиз, Отступ + 10 + 12*НомерРейса).Значение;
		МенеджерЗаписиРейсы.Вс = РасписаниеРейсов.Область(ТекОбластьНиз, Отступ + 11 + 12*НомерРейса, ТекОбластьНиз, Отступ + 11 + 12*НомерРейса).Значение;
		
		Попытка
			МенеджерЗаписиРейсы.Записать();
		Исключение
		КонецПопытки;
	КонецЦикла;
КонецПроцедуры

&НаСервере
Функция КоманднаяПанельПунктыУстановитьФлажки_Сервер()
	
	ДатаУстановкиРасписания = ТекущаяДатаСеанса();
	
	// прочитаем регистр с отбором по маршруту и выходу
	НЗ = РегистрыСведений.уатРасписаниеРейсов.СоздатьНаборЗаписей();
	Если ЗначениеЗаполнено(Объект.Маршрут) Тогда
		НЗ.Отбор.Маршрут.Установить(Объект.Маршрут);
		Если ИспользоватьВыходы Тогда
			НЗ.Отбор.Выход.Установить(Объект.Выход);
		КонецЕсли;
	Иначе
		НЗ.Отбор.ПунктОтправления.Установить(Объект.ПунктОтправления);
		НЗ.Отбор.ПунктНазначения.Установить(Объект.ПунктНазначения);
		НЗ.Отбор.Грузоотправитель.Установить(Объект.Грузоотправитель);
		НЗ.Отбор.Грузополучатель.Установить(Объект.Грузополучатель);
	КонецЕсли;
	НЗ.Прочитать();
	тблРасписаниеРегистр = НЗ.Выгрузить();
	
	// добавляем в таблицу регистра недостающие пункты из ТЧ Этапы спр. Маршруты
	Если ЗначениеЗаполнено(Объект.Маршрут) Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	уатРейсыМаршрутов.Ссылка КАК Ссылка
		|ИЗ
		|	Справочник.уатРейсыМаршрутов КАК уатРейсыМаршрутов
		|ГДЕ
		|	уатРейсыМаршрутов.ПометкаУдаления = ЛОЖЬ
		|	И уатРейсыМаршрутов.Владелец = &Владелец");
		Запрос.УстановитьПараметр("Владелец", Объект.Маршрут);
		ВыборкаРейсы = Запрос.Выполнить().Выбрать();
		Пока ВыборкаРейсы.Следующий() Цикл
			Для Каждого ТекЭтап Из Объект.Маршрут.Этапы Цикл
				Если НЕ ЗначениеЗаполнено(ТекЭтап.УИД) Тогда
					Продолжить;
				КонецЕсли;
				
				СтруктураПоиска = Новый Структура("Маршрут, Выход, Рейс, УИДПункта", Объект.Маршрут, Объект.Выход, ВыборкаРейсы.Ссылка, ТекЭтап.УИД);
				мсвЗаписи = тблРасписаниеРегистр.НайтиСтроки(СтруктураПоиска);
				Если мсвЗаписи.Количество() = 0 Тогда
					НоваяЗапись = тблРасписаниеРегистр.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяЗапись, СтруктураПоиска);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
	КонецЕсли;
	
	// отмечаем все дни недели по всем записям
	Для Каждого ТекСтрока Из тблРасписаниеРегистр Цикл
		ТекСтрока.Пн = Истина;
		ТекСтрока.Вт = Истина;
		ТекСтрока.Ср = Истина;
		ТекСтрока.Чт = Истина;
		ТекСтрока.Пт = Истина;
		ТекСтрока.Сб = Истина;
		ТекСтрока.Вс = Истина;
		ТекСтрока.ДатаУстановки = ДатаУстановкиРасписания;
	КонецЦикла;
	НЗ.Загрузить(тблРасписаниеРегистр);
	
	НЗ.Записать();
КонецФункции

&НаСервере
Функция КоманднаяПанельПунктыСнятьФлажки_Сервер()
	НЗ = РегистрыСведений.уатРасписаниеРейсов.СоздатьНаборЗаписей();
	Если ЗначениеЗаполнено(Объект.Маршрут) Тогда
		НЗ.Отбор.Маршрут.Установить(Объект.Маршрут);
		Если ИспользоватьВыходы Тогда
			НЗ.Отбор.Выход.Установить(Объект.Выход);
		КонецЕсли;
	Иначе
		НЗ.Отбор.Маршрут.Установить(Объект.ПунктОтправления);
		НЗ.Отбор.Маршрут.Установить(Объект.ПунктНазначения);
		НЗ.Отбор.Маршрут.Установить(Объект.Грузоотправитель);
		НЗ.Отбор.Маршрут.Установить(Объект.Грузополучатель);
	КонецЕсли;
	НЗ.Прочитать();
	Для Каждого ТекСтрока Из НЗ Цикл
		ТекСтрока.Пн = Ложь;
		ТекСтрока.Вт = Ложь;
		ТекСтрока.Ср = Ложь;
		ТекСтрока.Чт = Ложь;
		ТекСтрока.Пт = Ложь;
		ТекСтрока.Сб = Ложь;
		ТекСтрока.Вс = Ложь;
	КонецЦикла;
	НЗ.Записать();
КонецФункции

&НаСервере
Функция ЗаполнитьРейсыМаршрута_Вызов_Функции(ТабДокумент)
	ОбработкаОбъект=РеквизитФормыВЗначение("Объект");
	ПоказыватьИнформациюПарныеМаршруты = уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП();
	Результат = ОбработкаОбъект.ЗаполнитьРейсыМаршрута(ТабДокумент, ПоказыватьИнформациюПарныеМаршруты);
	РейсыСуществуют = Результат.КоличествоРейсов;
	РейсыМогутБытьСозданы = Истина;
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
КонецФункции

&НаСервере
Функция СкопироватьРейс_Вызов_Функции(СтарыйРейс, НомерНовогоРейса, Смещение)
	ОбработкаОбъект=РеквизитФормыВЗначение("Объект");
	ОбработкаОбъект.СкопироватьРейс(СтарыйРейс, НомерНовогоРейса, Смещение);
КонецФункции

&НаСервере
Функция ПересчитатьВремяОтправления_Вызов_Функции(мРейс, мВремя)
	ОбработкаОбъект=РеквизитФормыВЗначение("Объект");
	Результат = ОбработкаОбъект.ПересчитатьВремяОтправления(мРейс, мВремя);
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	Возврат результат;
КонецФункции

&НаСервере
Функция ПечатьМаршрута_Вызов_Функции()
	ОбработкаОбъект=РеквизитФормыВЗначение("Объект");
	ТабличныйДокументМаршруты=ОбработкаОбъект.ПечатьМаршрута();
	Возврат ТабличныйДокументМаршруты;
КонецФункции

&НаКлиенте
Процедура ОбновитьВыходы()
	Если Не ИспользоватьВыходы Тогда
		Возврат;
	КонецЕсли;
	уатОбщегоНазначенияКлиент.УстановитьОтборУСписка(ТабличноеПолеВыходы.Отбор, "Владелец", Объект.Маршрут);
	Элементы.ТабличноеПолеВыходы.Обновить();
КонецПроцедуры

&НаСервере
Процедура ОбновитьПунктыОтправления()
	ТаблицаПунктыОтправления.Очистить();
	Если Не ЗначениеЗаполнено(Объект.ПунктНазначения) Тогда
		Возврат;
	КонецЕсли;
	Запрос = Новый Запрос("ВЫБРАТЬ
	|	уатРасписаниеРейсов.ПунктОтправления КАК ПунктОтправления,
	|	уатРасписаниеРейсов.Грузоотправитель КАК Грузоотправитель,
	|	уатРасписаниеРейсов.Грузополучатель КАК Грузополучатель,
	|	уатРасписаниеРейсов.ДнейДоОтправления КАК ДнейДоОтправления,
	|	уатРасписаниеРейсов.ДнейВПути КАК ДнейВПути,
	|	уатРасписаниеРейсов.FTL КАК FTL
	|ИЗ
	|	РегистрСведений.уатРасписаниеРейсов КАК уатРасписаниеРейсов
	|ГДЕ
	|	уатРасписаниеРейсов.ПунктНазначения = &ПунктНазначения
	|
	|СГРУППИРОВАТЬ ПО
	|	уатРасписаниеРейсов.ПунктОтправления,
	|	уатРасписаниеРейсов.Грузоотправитель,
	|	уатРасписаниеРейсов.Грузополучатель,
	|	уатРасписаниеРейсов.ДнейДоОтправления,
	|	уатРасписаниеРейсов.ДнейВПути,
	|	уатРасписаниеРейсов.FTL
	|
	|УПОРЯДОЧИТЬ ПО
	|	ПунктОтправления,
	|	Грузоотправитель,
	|	Грузополучатель");
	Запрос.УстановитьПараметр("ПунктНазначения", Объект.ПунктНазначения);
	Выборка = Запрос.Выполнить().Выбрать();                             
	Пока Выборка.Следующий() Цикл
		НоваяСтрока = ТаблицаПунктыОтправления.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
	Если ТаблицаПунктыОтправления.Количество() > 0 Тогда
		Элементы.ТаблицаПунктыОтправления.ТекущаяСтрока = ТаблицаПунктыОтправления[0].ПолучитьИдентификатор();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Функция КоманднаяПанельВыходыСкопировать_Сервер(мВремя)
	Если ЗначениеЗаполнено(мВремя) Тогда
		мНовыйВыход	= Объект.Выход.ПолучитьОбъект().Скопировать();
		мНовыйВыход.УстановитьНовыйКод();
		мНовыйВыход.ВыездИзГаража = Объект.Выход.ВыездИзГаража + (мВремя - '00010101');
		мНовыйВыход.ПрибытиеНаНачальныйПункт = Объект.Выход.ПрибытиеНаНачальныйПункт + (мВремя - '00010101');
		мНовыйВыход.ВыездИзКонечногоПункта = Объект.Выход.ВыездИзКонечногоПункта + (мВремя - '00010101');
		мНовыйВыход.ВозвращениеВГараж = Объект.Выход.ВозвращениеВГараж + (мВремя - '00010101');
		мНовыйВыход.Записать();
		
		Запрос = Новый Запрос;
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатРасписаниеРейсов.Маршрут КАК Маршрут,
		|	уатРасписаниеРейсов.Выход КАК Выход,
		|	уатРасписаниеРейсов.Рейс КАК Рейс,
		|	уатРасписаниеРейсов.УИДПункта КАК УИДПункта,
		|	уатРасписаниеРейсов.ВремяПрибытия КАК ВремяПрибытия,
		|	уатРасписаниеРейсов.ВремяУбытия КАК ВремяУбытия,
		|	уатРасписаниеРейсов.Пн КАК Пн,
		|	уатРасписаниеРейсов.Вт КАК Вт,
		|	уатРасписаниеРейсов.Ср КАК Ср,
		|	уатРасписаниеРейсов.Чт КАК Чт,
		|	уатРасписаниеРейсов.Пт КАК Пт,
		|	уатРасписаниеРейсов.Сб КАК Сб,
		|	уатРасписаниеРейсов.Вс КАК Вс,
		|	уатРасписаниеРейсов.ДействуетС КАК ДействуетС,
		|	уатРасписаниеРейсов.ДействуетПо КАК ДействуетПо,
		|	уатРасписаниеРейсов.ДнейДоОтправления КАК ДнейДоОтправления,
		|	уатРасписаниеРейсов.FTL КАК FTL,
		|	уатРасписаниеРейсов.ДатаУстановки КАК ДатаУстановки
		|ИЗ
		|	РегистрСведений.уатРасписаниеРейсов КАК уатРасписаниеРейсов
		|ГДЕ
		|	уатРасписаниеРейсов.Выход = &Выход";
		
		Запрос.УстановитьПараметр("Выход", Объект.Выход);
		ВыборкаЗаписей = Запрос.Выполнить().Выбрать();
		
		Пока ВыборкаЗаписей.Следующий() Цикл
			
			мЗапись = РегистрыСведений.уатРасписаниеРейсов.СоздатьМенеджерЗаписи();
			мЗапись.ВремяПрибытия	= ВыборкаЗаписей.ВремяПрибытия + (мВремя - '00010101');
			мЗапись.ВремяУбытия		= ВыборкаЗаписей.ВремяУбытия + (мВремя - '00010101');
			мЗапись.Маршрут			= ВыборкаЗаписей.Маршрут;
			мЗапись.Рейс			= ВыборкаЗаписей.Рейс;
			мЗапись.Выход			= мНовыйВыход.Ссылка;
			мЗапись.УИДПункта		= ВыборкаЗаписей.УИДПункта;
			мЗапись.Пн = ВыборкаЗаписей.Пн;
			мЗапись.Вт = ВыборкаЗаписей.Вт;
			мЗапись.Ср = ВыборкаЗаписей.Ср;
			мЗапись.Чт = ВыборкаЗаписей.Чт;
			мЗапись.Пт = ВыборкаЗаписей.Пт;
			мЗапись.Сб = ВыборкаЗаписей.Сб;
			мЗапись.Вс = ВыборкаЗаписей.Вс;
			мЗапись.ДатаУстановки = ВыборкаЗаписей.ДатаУстановки;
			мЗапись.ДействуетС = ВыборкаЗаписей.ДействуетС;
			мЗапись.ДействуетПо = ВыборкаЗаписей.ДействуетПо;
			мЗапись.ДнейДоОтправления = ВыборкаЗаписей.ДнейДоОтправления;
			мЗапись.FTL = ВыборкаЗаписей.FTL;
			мЗапись.Записать();
			
		КонецЦикла;
		
		ЗаполнитьРейсы();
	КонецЕсли;
КонецФункции

&НаСервере
Процедура УстановитьПрочиеПараметрыРасписания(ДополнительныеПараметры)
	Если ТипЗнч(ДополнительныеПараметры) = Тип("Структура") Тогда
		
		НаборЗаписей = РегистрыСведений.уатРасписаниеРейсов.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.Маршрут.Установить(ДополнительныеПараметры.Маршрут);
		НаборЗаписей.Отбор.Выход.Установить(ДополнительныеПараметры.Выход);
		НаборЗаписей.Прочитать();
		
		Для Каждого ТекЗапись Из НаборЗаписей Цикл
			ТекЗапись.FTL = ДополнительныеПараметры.FTL;
			ТекЗапись.ДнейДоОтправления = ДополнительныеПараметры.ДнейДоОтправления;
		КонецЦикла;
		
		НаборЗаписей.Записать();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

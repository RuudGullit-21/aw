
#Область ОписаниеПеременных

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;
&НаКлиенте
Перем ОповещениеПослеДлительнойОперацииОптимизацияМаршрута;
&НаКлиенте
Перем IDзадачиВнешнийМаршрутизаторОптимизацияМаршрута;

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// начало блока стандартных операций
	ДопПараметрыОткрытие = Новый Структура("ИмяФормы", ИмяФормы);
	уатЗащищенныеФункцииСервер.уатОбработкаФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	// конец блока стандартных операций
	
	ЗапрещенныеДляИзмененияСтатусы.Очистить();
	ЗапрещенныеДляИзмененияСтатусы.Добавить("Выполнен");
	ЗапрещенныеДляИзмененияСтатусы.Добавить("Рассчитан");
	ЗапрещенныеДляИзмененияСтатусы.Добавить(Справочники.уатСтатусы_уэ.Выполнен);
	ЗапрещенныеДляИзмененияСтатусы.Добавить(Справочники.уатСтатусы_уэ.Закрыт);

	ИспользоватьОбменЭД = ПолучитьФункциональнуюОпцию("ИспользоватьОбменЭД");
	
	Если Параметры.Свойство("СтруктураДокументаНовая") И ТипЗнч(Параметры.СтруктураДокументаНовая) = Тип("Структура")
		И Параметры.Свойство("СтруктураДокументаСтарая") И ТипЗнч(Параметры.СтруктураДокументаСтарая) = Тип("Структура") Тогда
		Объект.СтруктураДокументаНовая = Параметры.СтруктураДокументаНовая;
		Объект.СтруктураДокументаСтарая = Параметры.СтруктураДокументаСтарая;
	ИначеЕсли Параметры.Свойство("ЗаказНаТС") И ТипЗнч(Параметры.ЗаказНаТС) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") Тогда
		ЗаказОбъект = Параметры.ЗаказНаТС.ПолучитьОбъект();
		// Параметры, необходимые для работы редактора цепочки документов
		ДопПараметры = Новый Структура;
		ДопПараметры.Вставить("ЗаполнятьТЧОтрезкиПути", Истина);
		ДопПараметры.Вставить("ЗаполнятьВсеКолонкиТЧТовары", Истина);
		ДопПараметры.Вставить("ЗаполнятьВсеКолонкиТЧГрузовойСостав", Истина);
		Объект.СтруктураДокументаНовая = уатОбщегоНазначенияКлиентСервер.СтруктураДокумента(ЗаказОбъект, "уатЗаказГрузоотправителя", ДопПараметры);
		Объект.СтруктураДокументаСтарая = уатОбщегоНазначенияКлиентСервер.СтруктураДокумента(ЗаказОбъект, "уатЗаказГрузоотправителя", ДопПараметры);
	Иначе
		Отказ = Истина;
		ТекстНСтр = НСтр("en='Immediate opening for this object is prohibited!';ru='Непосредственное открытие для данного объекта запрещено!'");
		ОбщегоНазначения.СообщитьПользователю(ТекстНСтр);
		Возврат;
	КонецЕсли;
	ДетализацияЗаказа = Объект.СтруктураДокументаНовая.ДетализацияЗакрытия;
	ЗаказСсылка = Объект.СтруктураДокументаНовая.Ссылка;
	
	ЭтаФорма.Заголовок = СтрШаблон(НСтр("ru = 'Редактор цепочки документов (%1)'"), Строка(ЗаказСсылка));
	ЦветНедоступнойГруппы = ЦветаСтиля.уатЦветФонаРекламыДополнительный;
	ЭтоКОРП = уатОбщегоНазначенияПовтИсп.ВариантПоставкиКОРП();
	
	ЗаказНаТСДляПереносаГрузовНовый = Ложь;
	МаршрутныйЛистДляПереносаГрузовНовый = Ложь;
	ПозицияНовогоПункта = НСтр("ru = 'В начало'");
	
	СформироватьТаблицуИзмененийВЗаказе();
	УстановитьФлагиИзмененийВДокументах();
	ЗаполнитьТаблицыГрузов();
	УстановитьПредставленияОтрезковПути();
	УстановитьСпискиВыбораОтрезковПути();
	ОбновитьСвязанныеДокументыНаСервере();
	ОбновитьДокументыГрузовСервер();
	Если ОперацияЗаменитьПеревозчика Тогда
		ЗаполнитьПеревозчикаПоСвязаннымДокументам();
	КонецЕсли;
	
	ВосстановитьНастройки();
	
	УстановитьУсловноеОформлениеСвязанныхДокументов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// начало блока стандартных операций
	уатЗащищенныеФункцииКлиент.уатОбработкаФормаПриОткрытии(Отказ, ДопПараметрыОткрытие);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	// конец блока стандартных операций
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда 
		Возврат;
	КонецЕсли;
	
	СохранитьНастройки();
	
КонецПроцедуры

&НаСервере
Процедура ОбработкаПроверкиЗаполненияНаСервере(Отказ, ПроверяемыеРеквизиты)
	
	Если ДетализацияЗаказа = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам Тогда
		Для Каждого ТекСтрока Из Объект.Товары Цикл
			Если уатОбщегоНазначения.ВидНоменклатурыУслуга(ТекСтрока.Номенклатура) Тогда
				ТекстОшибки = НСтр("ru = 'Некорректно заполнена таблица ""Товары"". В строке %1 содержится услуга.'");
				ТекстОшибки = СтрШаблон(ТекстОшибки, ТекСтрока.НомерСтроки);
				ОбщегоНазначения.СообщитьПользователю(ТекстОшибки,,,, Отказ);
			КонецЕсли;
		КонецЦикла;
	ИначеЕсли ДетализацияЗаказа = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам Тогда
		ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
		ЗаголовокПроведения = уатОбщегоНазначенияТиповые.уатПредставлениеДокументаПриПроведении(ЗаказСсылка);
		уатОбщегоНазначенияТиповые.ПроверитьЧтоНетДублейУникальныхГМ(ОбработкаОбъект, "ГрузовойСостав", Отказ, ЗаголовокПроведения);
	КонецЕсли;
	
	Если ОперацияПеренестиВСвязанныеДокументы Тогда
		Если ИзмененПунктПогрузки Тогда
			ПроверяемыеРеквизиты.Добавить("ПунктПогрузки");
		КонецЕсли;
		Если ИзмененПунктРазгрузки Тогда
			ПроверяемыеРеквизиты.Добавить("ПунктРазгрузки");
		КонецЕсли;
	КонецЕсли;
	
	Если ОперацияЗаменитьПеревозчика Тогда
		ПроверяемыеРеквизиты.Добавить("ПринадлежностьПеревозки");
		ПроверяемыеРеквизиты.Добавить("ТС");
		Если ПринадлежностьПеревозки = Перечисления.уатПринадлежностьТС.Привлеченное Тогда
			ПроверяемыеРеквизиты.Добавить("ДоговорКонтрагента");
		КонецЕсли;
		Если ПринадлежностьПеревозки = Перечисления.уатПринадлежностьТС.Собственное
			Или ПринадлежностьПеревозки = Перечисления.уатПринадлежностьТС.Привлеченное Тогда
			ПроверяемыеРеквизиты.Добавить("Перевозчик");
			ПроверяемыеРеквизиты.Добавить("Водитель1");
		КонецЕсли;
	КонецЕсли;
	
	Если ОперацияРазместитьГрузыВМаршрутномЛисте И МаршрутныйЛистДляПереносаГрузовНовый Тогда
		ПроверяемыеРеквизиты.Добавить("ПринадлежностьПеревозки1");
		ПроверяемыеРеквизиты.Добавить("ТС1");
		Если ПринадлежностьПеревозки1 = Перечисления.уатПринадлежностьТС.Привлеченное Тогда
			ПроверяемыеРеквизиты.Добавить("ДоговорКонтрагента1");
		КонецЕсли;
		Если ПринадлежностьПеревозки = Перечисления.уатПринадлежностьТС.Собственное
			Или ПринадлежностьПеревозки = Перечисления.уатПринадлежностьТС.Привлеченное Тогда
			ПроверяемыеРеквизиты.Добавить("Перевозчик1");
			ПроверяемыеРеквизиты.Добавить("ВодительНовогоМЛ1");
		КонецЕсли;
	КонецЕсли;
	
	Если ОперацияСоздатьЗаказНаВозврат И ЗаказНаВозвратВключитьВМЛ И МаршрутныйЛистДляЗаказаНаВозвратНовый Тогда
		ПроверяемыеРеквизиты.Добавить("ПринадлежностьПеревозки2");
		ПроверяемыеРеквизиты.Добавить("ТС2");
		Если ПринадлежностьПеревозки2 = Перечисления.уатПринадлежностьТС.Привлеченное Тогда
			ПроверяемыеРеквизиты.Добавить("ДоговорКонтрагента2");
		КонецЕсли;
		Если ПринадлежностьПеревозки = Перечисления.уатПринадлежностьТС.Собственное
			Или ПринадлежностьПеревозки = Перечисления.уатПринадлежностьТС.Привлеченное Тогда
			ПроверяемыеРеквизиты.Добавить("Перевозчик2");
			ПроверяемыеРеквизиты.Добавить("ВодительНовогоМЛ2");
		КонецЕсли;
	КонецЕсли;
	
	Если ОперацияСоздатьЗаказНаВозврат
		Или ОперацияПеренестиВДругойЗаказ
		Или ОперацияРазместитьГрузыВМаршрутномЛисте
		Или ОперацияОтменитьГрузыВЗаказеНаТС
		Или ОперацияОтменитьГрузыВМаршрутныхЛистах
		Или ОперацияУдалитьГрузыВМаршрутныхЛистах Тогда
		КоличествоОтмеченныхГрузов = ПолучитьОтмеченныеСтрокиГрузов().Количество();
		Если ДетализацияЗаказа = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам
			И КоличествоОтмеченныхГрузов = 0 Тогда
			Отказ = Истина;
			ТекстНСтр = НСтр("ru = 'Для выбранных операций требуется отметить используемые строки грузов'");
			ОбщегоНазначения.СообщитьПользователю(ТекстНСтр);
		ИначеЕсли  ДетализацияЗаказа = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам
			И КоличествоОтмеченныхГрузов = 0 Тогда
			Отказ = Истина;
			ТекстНСтр = НСтр("ru = 'Для выбранных операций требуется отметить используемые строки товаров'");
			ОбщегоНазначения.СообщитьПользователю(ТекстНСтр);
		КонецЕсли;
	КонецЕсли;
	
	Если ОперацияПеренестиВДругойЗаказ И Не ЗаказНаТСДляПереносаГрузовНовый
		И Объект.СтруктураДокументаНовая.ДетализацияЗакрытия <> ЗаказНаТСДляПереносаГрузов.ДетализацияЗакрытия Тогда
		Отказ = Истина;
		ТекстНСтр = НСтр("ru = 'Переноса грузов по данному заказу разрешен только в заказ с детализацией %1'");
		ТекстНСтр = СтрШаблон(ТекстНСтр, Объект.СтруктураДокументаНовая.ДетализацияЗакрытия);
		ОбщегоНазначения.СообщитьПользователю(ТекстНСтр);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область ЗаменитьПеревозчика

&НаКлиенте
Процедура ПринадлежностьПеревозкиПриИзменении(Элемент)
	
	УстановитьОграниченияТиповПеревозки(ПринадлежностьПеревозки, Элементы.Перевозчик.Имя, Элементы.Водитель1.Имя);
	Если ПринадлежностьПеревозки = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное") Тогда
		Перевозчик     = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");
		ТС             = ПредопределенноеЗначение("Справочник.уатТС.ПустаяСсылка");
		Водитель1      = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
	ИначеЕсли ПринадлежностьПеревозки = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Привлеченное") Тогда
		Перевозчик     = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
		ТС             = ПредопределенноеЗначение("Справочник.уатТС.ПустаяСсылка");
		Водитель1      = ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");
	Иначе
		Перевозчик     = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");
		ТС             = ПредопределенноеЗначение("Справочник.уатТС.ПустаяСсылка");
		Водитель1      = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
	КонецЕсли;
	ДоговорКонтрагента = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ПеревозчикПриИзменении(Элемент)
	Если ПринадлежностьПеревозки = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Привлеченное") Тогда
		ТСпред = ТС;
		ПриИзмененииКонтрагентаНаСервере(Организация, Перевозчик, ТС, ДоговорКонтрагента);
		Если ТС <> ТСпред Тогда
			ТСПриИзменении(Элемент);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПеревозчикНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ПринадлежностьПеревозки = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Привлеченное") Тогда 
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("РегистрСведений.уатСведенияОКонтрагентах_уэ.Форма.ФормаВыбораПеревозчика",,
			Элемент,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТСПриИзменении(Элемент)
	флВопросПереадресовкаТСЭПД = Истина;
	ЗаполнитьПустогоПеревозчикаПоТС(Перевозчик, ТС, ПринадлежностьПеревозки, Элементы.Перевозчик.Имя, Элементы.Водитель1.Имя);
	ОбновитьСписокВыбораЭкипажа(ПринадлежностьПеревозки, ТС, Элементы.Водитель1.Имя);
КонецПроцедуры

&НаКлиенте
Процедура Водитель1ПриИзменении(Элемент)
	флВопросПереадресовкаТСЭПД = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПунктРазгрузкиПриИзменении(Элемент)
	флВопросПереадресовкаЭПД = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ПунктПогрузкиПриИзменении(Элемент)
	флВопросПереадресовкаЭПД = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТСНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтруктураОтбора = ПолучитьСтруктуруОтбораТС(ПринадлежностьПеревозки, Перевозчик);
	уатИнтерфейсВводаТС.РеквизитТСНачалоВыбора(Элемент, ТС, ДанныеВыбора, СтандартнаяОбработка, СтруктураОтбора);
КонецПроцедуры

&НаКлиенте
Процедура ТСАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СтруктураОтбора = ПолучитьСтруктуруОтбораТС(ПринадлежностьПеревозки, Перевозчик);
	уатИнтерфейсВводаТС.РеквизитТСАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка, СтруктураОтбора);
КонецПроцедуры

&НаКлиенте
Процедура ТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтруктураОтбора = ПолучитьСтруктуруОтбораТС(ПринадлежностьПеревозки, Перевозчик);
	уатИнтерфейсВводаТС.РеквизитТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка, СтруктураОтбора);
КонецПроцедуры

&НаКлиенте
Процедура Водитель1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ПринадлежностьПеревозки = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное") Тогда
		уатЗащищенныеФункцииКлиент.ДиалогВыбораСотрудника(Элемент, Водитель1, Новый Структура("Организация", Перевозчик), СтандартнаяОбработка);
	Иначе
		СтандартнаяОбработка = Ложь;
		
		Если ПринадлежностьПеревозки = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Привлеченное") Тогда
			ПараметрФормы = Новый Структура("РежимВыбора, Отбор", Истина, Новый Структура("Контрагент", Перевозчик));
			ОткрытьФорму("РегистрСведений.уатСотрудникиКонтрагентов.ФормаСписка", ПараметрФормы, Элемент);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура Водитель1ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("РегистрСведенийКлючЗаписи.уатСотрудникиКонтрагентов") тогда
		СтандартнаяОбработка = Ложь;
		Водитель1 = ФизЛицоВодителяКонтрагента(ВыбранноеЗначение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Водитель1Открытие(Элемент, СтандартнаяОбработка)
	Если ПринадлежностьПеревозки = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное") Тогда
		уатЗащищенныеФункцииКлиент.ОткрытьФормуСотрудника(Водитель1, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Водитель1АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Ожидание = 0 Тогда //выбор из списка
		Возврат;
	КонецЕсли;
	
	Если ПринадлежностьПеревозки = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное") Тогда
		СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Перевозчик, ТекущаяДата());
		уатИнтерфейсВводаСотрудников.СотрудникАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Водитель1ОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	Если ПринадлежностьПеревозки = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное") Тогда
		СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Перевозчик, ТекущаяДата());
		уатИнтерфейсВводаСотрудников.СотрудникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ПеревозчикНовогоМаршрутногоЛиста

&НаКлиенте
Процедура ПринадлежностьПеревозки1ПриИзменении(Элемент)
	
	УстановитьОграниченияТиповПеревозки(ПринадлежностьПеревозки1, Элементы.Перевозчик1.Имя, Элементы.ВодительНовогоМЛ1.Имя);
	Если ПринадлежностьПеревозки1 = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное") Тогда
		Перевозчик1       = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");
		ТС1               = ПредопределенноеЗначение("Справочник.уатТС.ПустаяСсылка");
		ВодительНовогоМЛ1 = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
	ИначеЕсли ПринадлежностьПеревозки1 = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Привлеченное") Тогда
		Перевозчик1       = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
		ТС1               = ПредопределенноеЗначение("Справочник.уатТС.ПустаяСсылка");
		ВодительНовогоМЛ1 = ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");
	Иначе
		Перевозчик1       = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");
		ТС1               = ПредопределенноеЗначение("Справочник.уатТС.ПустаяСсылка");
		ВодительНовогоМЛ1 = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
	КонецЕсли;
	ДоговорКонтрагента1   = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура Перевозчик1ПриИзменении(Элемент)
	Если ПринадлежностьПеревозки1 = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Привлеченное") Тогда
		ТСпред = ТС1;
		ПриИзмененииКонтрагентаНаСервере(Организация, Перевозчик1, ТС1, ДоговорКонтрагента1);
		Если ТС1 <> ТСпред Тогда
			ТС1ПриИзменении(Элемент);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Перевозчик1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ПринадлежностьПеревозки1 = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Привлеченное") Тогда 
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("РегистрСведений.уатСведенияОКонтрагентах_уэ.Форма.ФормаВыбораПеревозчика",,
			Элемент,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТС1ПриИзменении(Элемент)
	ЗаполнитьПустогоПеревозчикаПоТС(Перевозчик1, ТС1, ПринадлежностьПеревозки1, Элементы.Перевозчик1.Имя, Элементы.ВодительНовогоМЛ1.Имя);
	ОбновитьСписокВыбораЭкипажа(ПринадлежностьПеревозки1, ТС1, Элементы.ВодительНовогоМЛ1.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ТС1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтруктураОтбора = ПолучитьСтруктуруОтбораТС(ПринадлежностьПеревозки1, Перевозчик1);
	уатИнтерфейсВводаТС.РеквизитТСНачалоВыбора(Элемент, ТС1, ДанныеВыбора, СтандартнаяОбработка, СтруктураОтбора);
КонецПроцедуры

&НаКлиенте
Процедура ТС1АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СтруктураОтбора = ПолучитьСтруктуруОтбораТС(ПринадлежностьПеревозки1, Перевозчик1);
	уатИнтерфейсВводаТС.РеквизитТСАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка, СтруктураОтбора);
КонецПроцедуры

&НаКлиенте
Процедура ТС1ОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтруктураОтбора = ПолучитьСтруктуруОтбораТС(ПринадлежностьПеревозки1, Перевозчик1);
	уатИнтерфейсВводаТС.РеквизитТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка, СтруктураОтбора);
КонецПроцедуры

&НаКлиенте
Процедура ВодительНовогоМЛ1НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ПринадлежностьПеревозки1 = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное") Тогда
		уатЗащищенныеФункцииКлиент.ДиалогВыбораСотрудника(Элемент, ВодительНовогоМЛ1, Новый Структура("Организация", Перевозчик1), СтандартнаяОбработка);
	Иначе
		СтандартнаяОбработка = Ложь;
		
		Если ПринадлежностьПеревозки1 = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Привлеченное") Тогда
			ПараметрФормы = Новый Структура("РежимВыбора, Отбор", Истина, Новый Структура("Контрагент", Перевозчик1));
			ОткрытьФорму("РегистрСведений.уатСотрудникиКонтрагентов.ФормаСписка", ПараметрФормы, Элемент);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВодительНовогоМЛ1ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("РегистрСведенийКлючЗаписи.уатСотрудникиКонтрагентов") тогда
		СтандартнаяОбработка = Ложь;
		ВодительНовогоМЛ1 = ФизЛицоВодителяКонтрагента(ВыбранноеЗначение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВодительНовогоМЛ1Открытие(Элемент, СтандартнаяОбработка)
	Если ПринадлежностьПеревозки1 = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное") Тогда
		уатЗащищенныеФункцииКлиент.ОткрытьФормуСотрудника(ВодительНовогоМЛ1, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВодительНовогоМЛ1АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Ожидание = 0 Тогда //выбор из списка
		Возврат;
	КонецЕсли;
	
	Если ПринадлежностьПеревозки1 = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное") Тогда
		СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Перевозчик1, ТекущаяДата());
		уатИнтерфейсВводаСотрудников.СотрудникАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВодительНовогоМЛ1ОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	Если ПринадлежностьПеревозки1 = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное") Тогда
		СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Перевозчик1, ТекущаяДата());
		уатИнтерфейсВводаСотрудников.СотрудникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура МаршрутныйЛистДляЗаказаНаВозвратНовыйПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

#Область ПеревозчикНовогоМаршрутногоЛистаЗаказаНаВозврат

&НаКлиенте
Процедура ПринадлежностьПеревозки2ПриИзменении(Элемент)
	
	УстановитьОграниченияТиповПеревозки(ПринадлежностьПеревозки2, Элементы.Перевозчик2.Имя, Элементы.ВодительНовогоМЛ2.Имя);
	Если ПринадлежностьПеревозки2 = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное") Тогда
		Перевозчик2       = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");
		ТС2               = ПредопределенноеЗначение("Справочник.уатТС.ПустаяСсылка");
		ВодительНовогоМЛ2 = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
	ИначеЕсли ПринадлежностьПеревозки2 = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Привлеченное") Тогда
		Перевозчик2       = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
		ТС2               = ПредопределенноеЗначение("Справочник.уатТС.ПустаяСсылка");
		ВодительНовогоМЛ2 = ПредопределенноеЗначение("Справочник.ФизическиеЛица.ПустаяСсылка");
	Иначе
		Перевозчик2       = ПредопределенноеЗначение("Справочник.Организации.ПустаяСсылка");
		ТС2               = ПредопределенноеЗначение("Справочник.уатТС.ПустаяСсылка");
		ВодительНовогоМЛ2 = ПредопределенноеЗначение("Справочник.Сотрудники.ПустаяСсылка");
	КонецЕсли;
	ДоговорКонтрагента2   = ПредопределенноеЗначение("Справочник.ДоговорыКонтрагентов.ПустаяСсылка");
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура Перевозчик2ПриИзменении(Элемент)
	Если ПринадлежностьПеревозки2 = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Привлеченное") Тогда
		ТСпред = ТС2;
		ПриИзмененииКонтрагентаНаСервере(Организация, Перевозчик2, ТС2, ДоговорКонтрагента2);
		Если ТС2 <> ТСпред Тогда
			ТС2ПриИзменении(Элемент);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура Перевозчик2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ПринадлежностьПеревозки2 = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Привлеченное") Тогда 
		СтандартнаяОбработка = Ложь;
		ОткрытьФорму("РегистрСведений.уатСведенияОКонтрагентах_уэ.Форма.ФормаВыбораПеревозчика",,
			Элемент,,,,, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТС2ПриИзменении(Элемент)
	ЗаполнитьПустогоПеревозчикаПоТС(Перевозчик2, ТС2, ПринадлежностьПеревозки2, Элементы.Перевозчик2.Имя, Элементы.ВодительНовогоМЛ2.Имя);
	ОбновитьСписокВыбораЭкипажа(ПринадлежностьПеревозки2, ТС2, Элементы.ВодительНовогоМЛ2.Имя);
КонецПроцедуры

&НаКлиенте
Процедура ТС2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтруктураОтбора = ПолучитьСтруктуруОтбораТС(ПринадлежностьПеревозки2, Перевозчик2);
	уатИнтерфейсВводаТС.РеквизитТСНачалоВыбора(Элемент, ТС2, ДанныеВыбора, СтандартнаяОбработка, СтруктураОтбора);
КонецПроцедуры

&НаКлиенте
Процедура ТС2АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СтруктураОтбора = ПолучитьСтруктуруОтбораТС(ПринадлежностьПеревозки2, Перевозчик2);
	уатИнтерфейсВводаТС.РеквизитТСАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка, СтруктураОтбора);
КонецПроцедуры

&НаКлиенте
Процедура ТС2ОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	СтруктураОтбора = ПолучитьСтруктуруОтбораТС(ПринадлежностьПеревозки2, Перевозчик2);
	уатИнтерфейсВводаТС.РеквизитТСОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка, СтруктураОтбора);
КонецПроцедуры

&НаКлиенте
Процедура ВодительНовогоМЛ2НачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	Если ПринадлежностьПеревозки2 = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное") Тогда
		уатЗащищенныеФункцииКлиент.ДиалогВыбораСотрудника(Элемент, ВодительНовогоМЛ2, Новый Структура("Организация", Перевозчик2), СтандартнаяОбработка);
	Иначе
		СтандартнаяОбработка = Ложь;
		
		Если ПринадлежностьПеревозки2 = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Привлеченное") Тогда
			ПараметрФормы = Новый Структура("РежимВыбора, Отбор", Истина, Новый Структура("Контрагент", Перевозчик2));
			ОткрытьФорму("РегистрСведений.уатСотрудникиКонтрагентов.ФормаСписка", ПараметрФормы, Элемент);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВодительНовогоМЛ2ОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("РегистрСведенийКлючЗаписи.уатСотрудникиКонтрагентов") тогда
		СтандартнаяОбработка = Ложь;
		ВодительНовогоМЛ2 = ФизЛицоВодителяКонтрагента(ВыбранноеЗначение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВодительНовогоМЛ2Открытие(Элемент, СтандартнаяОбработка)
	Если ПринадлежностьПеревозки2 = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное") Тогда
		уатЗащищенныеФункцииКлиент.ОткрытьФормуСотрудника(ВодительНовогоМЛ2, СтандартнаяОбработка);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВодительНовогоМЛ2АвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Ожидание = 0 Тогда //выбор из списка
		Возврат;
	КонецЕсли;
	
	Если ПринадлежностьПеревозки2 = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное") Тогда
		СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Перевозчик2, ТекущаяДата());
		уатИнтерфейсВводаСотрудников.СотрудникАвтоПодборТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ВодительНовогоМЛ2ОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	Если ПринадлежностьПеревозки2 = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное") Тогда
		СтруктураПараметров = Новый Структура("Организация, ДатаСреза", Перевозчик2, ТекущаяДата());
		уатИнтерфейсВводаСотрудников.СотрудникОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, СтандартнаяОбработка, СтруктураПараметров);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ОперацияПеренестиВСвязанныеДокументыПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ИзмененПунктПогрузкиПриИзменении(Элемент)
	УстановитьВидимость();
	Если ИзмененПунктПогрузки Тогда
		ПунктПогрузки = Объект.СтруктураДокументаНовая.АдресОтправления;
	Иначе
		ПунктПогрузки = ПредопределенноеЗначение("Справочник.уатПунктыНазначения.ПустаяСсылка");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ИзмененПунктРазгрузкиПриИзменении(Элемент)
	УстановитьВидимость();
	Если ИзмененПунктРазгрузки Тогда
		ПунктРазгрузки = Объект.СтруктураДокументаНовая.АдресНазначения;
	Иначе
		ПунктРазгрузки = ПредопределенноеЗначение("Справочник.уатПунктыНазначения.ПустаяСсылка");
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОперацияРазбитьНаЭтапыПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ОперацияЗаменитьПеревозчикаПриИзменении(Элемент)
	Если ОперацияЗаменитьПеревозчика Тогда
		ЗаполнитьПеревозчикаПоСвязаннымДокументам();
	КонецЕсли;
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ОперацияСоздатьЗаказНаВозвратПриИзменении(Элемент)
	МаршрутныйЛистДляЗаказаНаВозврат = ПредопределенноеЗначение("Документ.уатМаршрутныйЛист.ПустаяСсылка");
	МаршрутныйЛистДляЗаказаНаВозвратНовый = Истина;
	ПринадлежностьПеревозки2 = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное");
	ПринадлежностьПеревозки2ПриИзменении(Элементы.ПринадлежностьПеревозки2);
	
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ЗаказНаВозвратВключитьВМЛПриИзменении(Элемент)
	МаршрутныйЛистДляЗаказаНаВозврат = ПредопределенноеЗначение("Документ.уатМаршрутныйЛист.ПустаяСсылка");
	МаршрутныйЛистДляЗаказаНаВозвратНовый = Истина;
	ПринадлежностьПеревозки2 = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное");
	ПринадлежностьПеревозки2ПриИзменении(Элементы.ПринадлежностьПеревозки2);
	
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ОперацияРазместитьГрузыВМаршрутномЛистеПриИзменении(Элемент)
	МаршрутныйЛистДляПереносаГрузов = ПредопределенноеЗначение("Документ.уатМаршрутныйЛист.ПустаяСсылка");
	МаршрутныйЛистДляПереносаГрузовНовый = Истина;
	ПринадлежностьПеревозки1 = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное");
	ПринадлежностьПеревозки1ПриИзменении(Элементы.ПринадлежностьПеревозки1);
КонецПроцедуры

&НаКлиенте
Процедура МаршрутныйЛистДляПереносаГрузовНовыйПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ОперацияПеренестиВДругойЗаказПриИзменении(Элемент)
	ЗаказНаТСДляПереносаГрузов = ПредопределенноеЗначение("Документ.уатЗаказГрузоотправителя.ПустаяСсылка");
	ЗаказНаТСДляПереносаГрузовНовый = Истина;
	УстановитьВидимость();
	Если ОперацияПеренестиВДругойЗаказ Тогда
		ПроверитьОбновлениеГрузовВДокументах();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗаказНаТСДляПереносаГрузовНовыйПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ОперацияОтменитьГрузыВЗаказеНаТСПриИзменении(Элемент)
	Если ОперацияОтменитьГрузыВЗаказеНаТС Тогда
		ПроверитьОбновлениеГрузовВДокументах();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОперацияОтменитьГрузыВМаршрутныхЛистахПриИзменении(Элемент)
	Если ОперацияОтменитьГрузыВМаршрутныхЛистах Тогда
		ОперацияУдалитьГрузыВМаршрутныхЛистах = Ложь;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОперацияУдалитьГрузыВМаршрутныхЛистахПриИзменении(Элемент)
	Если ОперацияУдалитьГрузыВМаршрутныхЛистах Тогда
		ОперацияОтменитьГрузыВМаршрутныхЛистах = Ложь;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_ГрузовойСостав

&НаКлиенте
Процедура ГрузовойСоставВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекСтрокаТаблицы = Элементы.ГрузовойСостав.ТекущиеДанные;
	Если ТекСтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле = Элементы.ГрузовойСоставМаршрутныеЛисты Тогда
		ДокументыГруза = ПолучитьДокументыГруза(ТекСтрокаТаблицы.ГрузовоеМесто);
		ПоказатьМассивДокументов(ДокументыГруза);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ГрузовойСоставПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если Копирование Тогда
		ЗаказИзменен = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГрузовойСоставПриИзменении(Элемент)
	УстановитьПредставленияОтрезковПути();
КонецПроцедуры

&НаКлиенте
Процедура ГрузовойСоставОтрезокПутиПриИзменении(Элемент)
	ЗаказИзменен = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ГрузовойСоставОтрезокПутиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Не ЗначениеЗаполнено(Элементы.ГрузовойСоставОтрезокПути.СписокВыбора) Тогда
		ТекстНСТР = НСтр("en='No applicable route segments found.'; ru='Нет подходящих отрезков пути.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГрузовойСоставОтрезокПутиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ОбработатьИзменениеОтрезкаПути(Элементы.ГрузовойСостав, ВыбранноеЗначение);
КонецПроцедуры

&НаКлиенте
Процедура ГрузовойСоставГрузовоеМестоПриИзменении(Элемент)
	ТекДанные = Элементы.ГрузовойСостав.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаказИзменен = Истина;
	
	Если ЗначениеЗаполнено(ТекДанные.ГрузовоеМесто) Тогда
		ГрузовоеМестоСтруктура = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначенияРеквизитов(ТекДанные.ГрузовоеМесто,
		"ВидУпаковки, ВесБрутто, КоличествоМест,
		|Объем, Длина, Ширина, Высота, Стоимость,
		|Валюта, СуммаВключаетНДС, УчитыватьНДС,
		|ОписаниеГруза,УникальноеГрузовоеМесто,ТипКонтейнера,Контейнер");
		
		ЗаполнитьЗначенияСвойств(ТекДанные, ГрузовоеМестоСтруктура,
		"ВесБрутто, КоличествоМест,
		|Объем, Длина, Ширина, Высота, Стоимость,
		|ОписаниеГруза");
		Если ГрузовоеМестоСтруктура.Контейнер Тогда
			ТекДанные.ВидУпаковки = ГрузовоеМестоСтруктура.ТипКонтейнера;
		Иначе
			ТекДанные.ВидУпаковки = ГрузовоеМестоСтруктура.ВидУпаковки;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГрузовойСоставГрузовоеМестоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	
	ТекДанные = Элементы.ГрузовойСостав.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("РежимВыбора, НачальноеЗначениеВыбора", Истина, ТекДанные.ГрузовоеМесто);
	
	Если Объект.СтруктураДокументаНовая.Мультимодальный
		И Объект.СтруктураДокументаНовая.ЭтоЭтап
		И ЗначениеЗаполнено(Объект.СтруктураДокументаНовая.РодительскийЗаказ) Тогда
		ПараметрыФормы.Вставить("СписокГрузовыхМест", ПолучитьСписокГрузовыхМестРодительскогоЗаказа(
			Объект.СтруктураДокументаНовая.РодительскийЗаказ, "ГрузовойСостав"));
	КонецЕсли;
	
	ФормаВыбора = ПолучитьФорму("Справочник.уатГрузовыеМеста_уэ.ФормаВыбора", ПараметрыФормы, Элемент);
	ФормаВыбора.Открыть();
КонецПроцедуры

&НаКлиенте
Процедура ГрузовойСоставГрузовоеМестоАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	Если Объект.СтруктураДокументаНовая.Мультимодальный
		И Объект.СтруктураДокументаНовая.ЭтоЭтап
		И ЗначениеЗаполнено(Объект.СтруктураДокументаНовая.РодительскийЗаказ) Тогда
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ПолучитьСписокГрузовыхМестРодительскогоЗаказаДляАвтоподбора(
			Объект.СтруктураДокументаНовая.РодительскийЗаказ, "ГрузовойСостав", Текст);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ГрузовойСоставКоличествоМестПриИзменении(Элемент)
	ТекДанные = Элементы.ГрузовойСостав.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ЗаказИзменен = Истина;
	
	Если Не ЗначениеЗаполнено(ТекДанные.ГрузовоеМесто) Тогда 
		Возврат;
	КонецЕсли;
	
	ХарактеристикиГрузовогоМеста = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначенияРеквизитов(ТекДанные.ГрузовоеМесто,
		"ВесБрутто, КоличествоМест, Объем, Стоимость");
	
	Если ХарактеристикиГрузовогоМеста.КоличествоМест = 0 Тогда
		КоэфПересчета = 0;
	Иначе
		КоэфПересчета = ТекДанные.КоличествоМест / ХарактеристикиГрузовогоМеста.КоличествоМест;
	КонецЕсли;
	ТекДанные.ВесБрутто = ХарактеристикиГрузовогоМеста.ВесБрутто * КоэфПересчета;
	ТекДанные.Объем     = ХарактеристикиГрузовогоМеста.Объем * КоэфПересчета;
	ТекДанные.Стоимость = ХарактеристикиГрузовогоМеста.Стоимость * КоэфПересчета;
КонецПроцедуры

&НаКлиенте
Процедура ГрузовойСоставВидУпаковкиПриИзменении(Элемент)
	ЗаказИзменен = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ГрузовойСоставВесБруттоПриИзменении(Элемент)
	ЗаказИзменен = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ГрузовойСоставОбъемПриИзменении(Элемент)
	ЗаказИзменен = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ГрузовойСоставВысотаПриИзменении(Элемент)
	ЗаказИзменен = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ГрузовойСоставДлинаПриИзменении(Элемент)
	ЗаказИзменен = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ГрузовойСоставШиринаПриИзменении(Элемент)
	ЗаказИзменен = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ГрузовойСоставСтоимостьПриИзменении(Элемент)
	ЗаказИзменен = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ГрузовойСоставОписаниеГрузаПриИзменении(Элемент)
	ЗаказИзменен = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ГрузовойСоставПричинаЗакрытияПриИзменении(Элемент)
	ЗаказИзменен = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ГрузовойСоставВесТарыПриИзменении(Элемент)
	ЗаказИзменен = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_Товары

&НаКлиенте
Процедура ТоварыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	ТекСтрокаТаблицы = Элемент.ТекущиеДанные;
	Если ТекСтрокаТаблицы = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Поле = Элементы.ТоварыРазмещено Тогда
		ДокументыГруза = ПолучитьДокументыГруза(ТекСтрокаТаблицы.Номенклатура);
		ПоказатьМассивДокументов(ДокументыГруза);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриИзменении(Элемент)
	УстановитьПредставленияОтрезковПути();
КонецПроцедуры

&НаКлиенте
Процедура ТоварыОтрезокПутиПриИзменении(Элемент)
	ЗаказИзменен = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыОтрезокПутиНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	Если Не ЗначениеЗаполнено(Элементы.ГрузовойСоставОтрезокПути.СписокВыбора) Тогда
		ТекстНСТР = НСтр("en='No applicable route segments found.'; ru='Нет подходящих отрезков пути.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		Возврат;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыОтрезокПутиОбработкаВыбора(Элемент, ВыбранноеЗначение, СтандартнаяОбработка)
	ОбработатьИзменениеОтрезкаПути(Элементы.Товары, ВыбранноеЗначение);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если Копирование Тогда
		ЗаказИзменен = Истина;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураПриИзменении(Элемент)
	
	ТекДанные = Элементы.Товары.ТекущиеДанные;
	ЗаказИзменен = Истина;
	
	Если ЗначениеЗаполнено(ТекДанные.Номенклатура) тогда
		
		ТекДанные.ЕдиницаИзмерения = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(
			ТекДанные.Номенклатура, "ЕдиницаХраненияОстатков");
	
		ВесОбъем = уатОбщегоНазначения.ПолучитьВесОбъемНоменклатуры(ТекДанные.Номенклатура, ТекДанные.ЕдиницаИзмерения, ТекДанные.Количество);
		ТекДанные.ВесБрутто      = ВесОбъем.Вес;
		ТекДанные.Объем          = ВесОбъем.Объем;
		ТекДанные.КоличествоМест = ВесОбъем.КоличествоМест;
		
		Если Объект.СтруктураДокументаНовая.УчитыватьНДС Тогда
			ТекДанные.СтавкаНДС = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекДанные.Номенклатура, "СтавкаНДС");
		Иначе 
			ТекДанные.СтавкаНДС = Неопределено;
		КонецЕсли;
		
		СтруктураЦенаВалюта = уатОбщегоНазначения.уатНайтиЦенуНоменклатуры(
			Объект.СтруктураДокументаНовая.Дата, ТекДанные.Номенклатура, Объект.СтруктураДокументаНовая.Контрагент, Ложь);
		Если ЗначениеЗаполнено(СтруктураЦенаВалюта.Цена) Тогда
			мЦена = СтруктураЦенаВалюта.Цена;
			ТекДанные.Цена = уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(мЦена,
				СтруктураЦенаВалюта.Валюта, Объект.СтруктураДокументаНовая.ВалютаТоваров,
				Объект.СтруктураДокументаНовая.Дата, Объект.СтруктураДокументаНовая.Дата);
			ТоварыЦенаПриИзменении(Неопределено);
		КонецЕсли;
		
	КонецЕсли;
		
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекСтрока = Элементы.Товары.ТекущиеДанные;
	Если ТекСтрока = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("РежимВыбора, НачальноеЗначениеВыбора", Истина, ТекСтрока.Номенклатура);
	
	ФормаВыбора = ПолучитьФорму("РегистрСведений.уатНоменклатураГрузов.Форма.ФормаВыбора", ПараметрыФормы, Элемент);
	
	Если Объект.СтруктураДокументаНовая.Мультимодальный
		И Объект.СтруктураДокументаНовая.ЭтоЭтап
		И ЗначениеЗаполнено(Объект.СтруктураДокументаНовая.РодительскийЗаказ) Тогда 
		ЭлементОтбора = ФормаВыбора.Номенклатура.Отбор.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
		ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("Ссылка");
		ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.ВСписке;
		ЭлементОтбора.ПравоеЗначение   = ПолучитьСписокТоваровРодительскогоЗаказа(Объект.СтруктураДокументаНовая.РодительскийЗаказ);
		ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
		ЭлементОтбора.Использование    = Истина;
	КонецЕсли;
	
	ФормаВыбора.Открыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыНоменклатураАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	
	Если Объект.СтруктураДокументаНовая.Мультимодальный
		И Объект.СтруктураДокументаНовая.ЭтоЭтап
		И ЗначениеЗаполнено(Объект.СтруктураДокументаНовая.РодительскийЗаказ) Тогда 
		СтандартнаяОбработка = Ложь;
		ДанныеВыбора = ПолучитьСписокТоваровРодительскогоЗаказаДляАвтоподбора(Объект.СтруктураДокументаНовая.РодительскийЗаказ, Текст);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоПриИзменении(Элемент)
	
	ЗаказИзменен = Истина;
	
	ТекДанные = Элементы.Товары.ТекущиеДанные;
	РассчитатьСуммуВСтрокеТабличнойЧасти(ТекДанные);
	
	ВесОбъем = уатОбщегоНазначения.ПолучитьВесОбъемНоменклатуры(ТекДанные.Номенклатура, ТекДанные.ЕдиницаИзмерения, ТекДанные.Количество);
	ТекДанные.ВесБрутто      = ВесОбъем.Вес;
	ТекДанные.Объем          = ВесОбъем.Объем;
	ТекДанные.КоличествоМест = ВесОбъем.КоличествоМест;
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЦенаПриИзменении(Элемент)
	ЗаказИзменен = Истина;
	ТекДанные = Элементы.Товары.ТекущиеДанные;
	РассчитатьСуммуВСтрокеТабличнойЧасти(ТекДанные);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаПриИзменении(Элемент)
	ЗаказИзменен = Истина;
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	
	Если СтрокаТабличнойЧасти.Количество <> 0 Тогда
		СтрокаТабличнойЧасти.Цена = СтрокаТабличнойЧасти.Сумма / СтрокаТабличнойЧасти.Количество;
	КонецЕсли;
	
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	РассчитатьСуммуВсегоВСтрокеТЧ(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСуммаНДСПриИзменении(Элемент)
	ЗаказИзменен = Истина;
	СтрокаТабличнойЧасти = Элементы.Товары.ТекущиеДанные;
	РассчитатьСуммуВсегоВСтрокеТЧ(СтрокаТабличнойЧасти);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСтавкаНДСПриИзменении(Элемент)
	ЗаказИзменен = Истина;
	РассчитатьСуммуНДС(Элементы.Товары.ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ТоварыЕдиницаИзмеренияПриИзменении(Элемент)
	ЗаказИзменен = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВесБруттоПриИзменении(Элемент)
	ЗаказИзменен = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыОбъемПриИзменении(Элемент)
	ЗаказИзменен = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКоличествоМестПриИзменении(Элемент)
	ЗаказИзменен = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВсегоПриИзменении(Элемент)
	ЗаказИзменен = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыВесТарыПриИзменении(Элемент)
	ЗаказИзменен = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыГрузовоеМестоПриИзменении(Элемент)
	ЗаказИзменен = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыПричинаЗакрытияПриИзменении(Элемент)
	ЗаказИзменен = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыКомментарийПриИзменении(Элемент)
	ЗаказИзменен = Истина;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_ДеревоСвязанныеДокументы

&НаКлиенте
Процедура СвязанныеДокументыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ТипЗнч(ТекущиеДанные.Документ) <> Тип("Тип") Тогда
		ПоказатьЗначение(, ТекущиеДанные.Документ);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СвязанныеДокументыВыбранПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.СвязанныеДокументы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	// Значение "Выбран частично" может быть установлено только программно
	ТекущиеДанные.Выбран = ТекущиеДанные.Выбран % 2;
	
	ПроставитьПометкиВниз(ТекущиеДанные);
	ПроставитьПометкиВверх(ТекущиеДанные);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ИзменитьДокументы(Команда)
	
	ИзмененныеДокументы = Новый Массив;
	СозданныеДокументы = Новый Массив;
	ДокументыСОшибками = Новый Массив;
	Если ПроверитьЗаполнение() Тогда
		
		Если Не ОперацияПеренестиВСвязанныеДокументы Тогда
			// Устанавливаем значения для подчиненных операций
			ИзмененПунктПогрузки         = Ложь;
			ПунктПогрузки                = ПредопределенноеЗначение("Справочник.уатПунктыНазначения.ПустаяСсылка");
			ИзмененПунктРазгрузки        = Ложь;
			ПунктРазгрузки               = ПредопределенноеЗначение("Справочник.уатПунктыНазначения.ПустаяСсылка");
			ИзмененыПунктыFTLЗаказа      = Ложь;
			ИзмененаОрганизация          = Ложь;
			ИзмененоПодразделение        = Ложь;
			ИзмененыГрузыПоЗаказу        = Ложь;
			ИзмененыУслуги               = Ложь;
			ИзмененМаршрут               = Ложь;
			ИзмененВидПеревозки          = Ложь;
			ИзмененоНаправлениеПеревозки = Ложь;
			ИзмененОбъектСтроительства   = Ложь;
			ИзмененКонтрагент            = Ложь;
			ИзмененДоговор               = Ложь;
		КонецЕсли;
		
		ИзменитьДокументыНаСервере(ИзмененныеДокументы, СозданныеДокументы, ДокументыСОшибками);
		
		Если флВопросПереадресовкаТСЭПД
			И ИспользоватьОбменЭД Тогда 
			Для Каждого ТекСтрока Из МЛЭПД Цикл
				МассивЭПД = ПолучитьЭПДДляЗаменыТСВодителя(ТекСтрока.Значение);
				Если МассивЭПД.Количество() = 0 Тогда
					флВопросПереадресовкаТСЭПД = Ложь;
				Иначе
					Режим = РежимДиалогаВопрос.ДаНет;
					ТекстНСТР = НСтр("ru = 'В документе изменилось ТС/Водитель.
					|Открыть ""Электронную транспортную накладную""?'");
					ПоказатьВопрос(Новый ОписаниеОповещения("ВопросПереадресовкаТСЭПДЗавершение", ЭтотОбъект, МассивЭПД), ТекстНСТР, Режим);
				КонецЕсли;  
			КонецЦикла;
		КонецЕсли;
		
		Если флВопросПереадресовкаЭПД
			И ИспользоватьОбменЭД Тогда 
			Для Каждого ТекСтрока Из ЗаказыЭПД Цикл
				МассивЭПД = ПолучитьЭПДДляПереадресовки(ТекСтрока.Значение);
				Если МассивЭПД.Количество() = 0 Тогда
					флВопросПереадресовкаЭПД = Ложь;
				Иначе
					Режим = РежимДиалогаВопрос.ДаНет;
					ТекстНСТР = НСтр("ru = 'В документе изменился адрес.
					|Открыть ""Электронную транспортную накладную""?'");
					ПоказатьВопрос(Новый ОписаниеОповещения("ВопросПереадресовкаЗавершение", ЭтотОбъект, МассивЭПД), ТекстНСТР, Режим);
				КонецЕсли;  
			КонецЦикла;
		КонецЕсли;
		
		ТекстНСтр = СтрШаблон(НСтр("ru = 'Изменено документов: %1. Создано документов: %2. Ошибки при проведении документов: %3.'"),
			ИзмененныеДокументы.Количество(), СозданныеДокументы.Количество(), ДокументыСОшибками.Количество());
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстНСтр);
		
		Если ОткрыватьФормыДокументов Тогда
			Для Каждого ТекДокумент Из СозданныеДокументы Цикл
				ПоказатьЗначение(, ТекДокумент);
			КонецЦикла;
			Для Каждого ТекДокумент Из ИзмененныеДокументы Цикл
				ПоказатьЗначение(, ТекДокумент);
			КонецЦикла;
			Для Каждого ТекДокумент Из ДокументыСОшибками Цикл
				ПоказатьЗначение(, ТекДокумент);
			КонецЦикла;
		КонецЕсли;
		
		ОперацияВыполнена = Истина;
		УстановитьВидимость();
		
	КонецЕсли;
	
	Если МаршрутныеЛистыТребующиеОптимизации.Количество() > 0 Тогда
		ОптимизацияМаршрутаМожноВыполнять = Истина;
		ПодключитьОбработчикОжидания("ОптимизацияМаршрута",1);
		ПодключитьОбработчикОжидания("ПослеОбработкиДокументов",1);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСвязанныеДокументы(Команда)
	
	РазвернутыеТипыДокументов = Новый Массив;
	ОтмеченныеДокументы = Новый Массив;
	Для Каждого ТекТипДокумента Из СвязанныеДокументы.ПолучитьЭлементы() Цикл
		Если Элементы.СвязанныеДокументы.Развернут(ТекТипДокумента.ПолучитьИдентификатор()) = Истина Тогда
			РазвернутыеТипыДокументов.Добавить(ТекТипДокумента.Документ);
		КонецЕсли;
		Для Каждого ТекДокумент Из ТекТипДокумента.ПолучитьЭлементы() Цикл
			Если ТекДокумент.Выбран Тогда
				ОтмеченныеДокументы.Добавить(ТекДокумент.Документ);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	ОбновитьСвязанныеДокументыНаСервере();
	
	Для Каждого ТекТипДокумента Из СвязанныеДокументы.ПолучитьЭлементы() Цикл
		Если РазвернутыеТипыДокументов.Найти(ТекТипДокумента.Документ) <> Неопределено Тогда
			Элементы.СвязанныеДокументы.Развернуть(ТекТипДокумента.ПолучитьИдентификатор());
		КонецЕсли;
		Для Каждого ТекДокумент Из ТекТипДокумента.ПолучитьЭлементы() Цикл
			Если ОтмеченныеДокументы.Найти(ТекДокумент.Документ) <> Неопределено Тогда
				ТекДокумент.Выбран = 1;
				ПроставитьПометкиВверх(ТекДокумент);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройки(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ОткрытьНастройкиЗавершение", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.уатРедакторЦепочкиДокументов_уэ.Форма.ФормаНастроек",, ЭтотОбъект,,,, Оповещение);
	
КонецПроцедуры

&НаКлиенте
Процедура СвязанныеДокументыОтметитьВсе(Команда)
	Для Каждого ТекСтрока Из СвязанныеДокументы.ПолучитьЭлементы() Цикл
		ТекСтрока.Выбран = Истина;
		ПроставитьПометкиВниз(ТекСтрока);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СвязанныеДокументыСнятьВсеОтметки(Команда)
	Для Каждого ТекСтрока Из СвязанныеДокументы.ПолучитьЭлементы() Цикл
		ТекСтрока.Выбран = Ложь;
		ПроставитьПометкиВниз(ТекСтрока);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СвязанныеДокументыСвернуть(Команда)
	Для Каждого ТекСтрока Из СвязанныеДокументы.ПолучитьЭлементы() Цикл
		Элементы.СвязанныеДокументы.Свернуть(ТекСтрока.ПолучитьИдентификатор());
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура СвязанныеДокументыРазвернуть(Команда)
	РазворачиватьПодчиненныеЭлементы = Истина;
	Для Каждого ТекСтрока Из СвязанныеДокументы.ПолучитьЭлементы() Цикл
		Элементы.СвязанныеДокументы.Развернуть(ТекСтрока.ПолучитьИдентификатор(), РазворачиватьПодчиненныеЭлементы);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ГрузыОтметитьВсе(Команда)
	Для Каждого ТекСтрока Из Объект.ГрузовойСостав Цикл
		ТекСтрока.Выбран = Истина;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ГрузыСнятьВсеОтметки(Команда)
	Для Каждого ТекСтрока Из Объект.ГрузовойСостав Цикл
		ТекСтрока.Выбран = Ложь;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыОтметитьВсе(Команда)
	Для Каждого ТекСтрока Из Объект.Товары Цикл
		ТекСтрока.Выбран = Истина;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ТоварыСнятьВсеОтметки(Команда)
	Для Каждого ТекСтрока Из Объект.Товары Цикл
		ТекСтрока.Выбран = Ложь;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДокументыГрузов(Команда)
	ОбновитьДокументыГрузовСервер();
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьВидимость()
	
	Элементы.ГруппаСтраницы.Видимость = Не ОперацияВыполнена;
	Элементы.ИзменитьДокументы.Видимость = Не ОперацияВыполнена;
	Элементы.ИзменитьДокументы.КнопкаПоУмолчанию = Не ОперацияВыполнена;
	Элементы.ГруппаВнесенныеИзменения.Видимость = ОперацияВыполнена;
	Элементы.Закрыть.Видимость = ОперацияВыполнена;
	Элементы.Закрыть.КнопкаПоУмолчанию = ОперацияВыполнена;
	
	Элементы.ГруппаОперацииКОРП.Доступность = ЭтоКОРП;
	Элементы.ГруппаПодсказкаОперацииКОРП.Видимость = Не ЭтоКОРП;
	Элементы.ДекорацияВертикальныйИнтервал.Видимость = Не ЭтоКОРП;
	Если Не ЭтоКОРП Тогда
		Элементы.ГруппаОперацииКОРП.ЦветФона = ЦветНедоступнойГруппы;
	КонецЕсли;
	
	Если ДетализацияЗаказа = ПредопределенноеЗначение("Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам") Тогда
		Элементы.СтраницаГрузовойСостав.Видимость = Истина;
		Элементы.СтраницаТовары.Видимость = Ложь;
		Элементы.ИзмененыГрузыПоЗаказу.Заголовок = НСтр("ru = 'Грузовой состав'");
		Элементы.ОперацияСоздатьЗаказНаВозврат.Заголовок = НСтр("ru = 'Создать Заказ на возврат грузов'");
		Элементы.ОперацияСоздатьЗаказНаВозврат.Подсказка = НСтр("ru = 
			|'Создать новый Заказ на ТС для отмеченных грузов, в котором адреса отправления и назначения поменяны местами'");
		Элементы.ОперацияПеренестиВДругойЗаказ.Видимость = Истина;
		Элементы.ОперацияПеренестиВДругойЗаказ.Заголовок = НСтр("ru = 'Перенести грузы в другой Заказ на ТС'");
		Элементы.ОперацияПеренестиВДругойЗаказ.Подсказка = НСтр("ru = 
			|'Удалить отмеченные грузы из Заказа на ТС, или установить для них причину закрытия ""Отклонен"",
			|в зависимости от флага ""Отменить грузы в Заказе на ТС"", а затем разместить эти грузы в другом Заказе на ТС.
			|Рекомендуется использовать вместе с операцией ""Перенести в связанные документы - Грузовой состав"" для синхронизации данных Заказов на ТС с Маршрутными и Путевыми листами'");
		Элементы.ОперацияОтменитьГрузыВЗаказеНаТС.Заголовок = НСтр("ru = 'Отменить грузы в Заказе на ТС'");
		Элементы.ОперацияОтменитьГрузыВЗаказеНаТС.Подсказка = НСтр("ru = 
			|'Установить причину закрытия ""Отклонен"" для отмеченных грузов в Заказе на ТС.
			|Рекомендуется использовать вместе с операцией ""Перенести в связанные документы - Грузовой состав"" для синхронизации данных Заказов на ТС с Маршрутными и Путевыми листами'");
		Элементы.ОперацияРазместитьГрузыВМаршрутномЛисте.Заголовок = НСтр("ru = 'Разместить грузы в Маршрутном листе'");
		Элементы.ОперацияРазместитьГрузыВМаршрутномЛисте.Подсказка = НСтр("ru = 
			|'Добавить отмеченные грузы в выбранный Маршрутный лист.
			|Если грузы уже размещены в другом Маршрутном листе, рекомендуется также использовать операции отмены или удаления грузов из Маршрутных листов'");
		Элементы.ОперацияОтменитьГрузыВМаршрутныхЛистах.Заголовок = НСтр("ru = 'Отменить грузы в Маршрутных листах'");
		Элементы.ОперацияОтменитьГрузыВМаршрутныхЛистах.Подсказка = НСтр("ru = 
			|'Установить причину закрытия ""Отклонен"" для отмеченных грузов в Маршрутных листах'");
		Элементы.ОперацияУдалитьГрузыВМаршрутныхЛистах.Заголовок = НСтр("ru = 'Удалить грузы в Маршрутных листах'");
		Элементы.ОперацияУдалитьГрузыВМаршрутныхЛистах.Подсказка = НСтр("ru = 
			|'Удалить строки, связанные с отмеченными грузами, из Маршрутных листов'");
	ИначеЕсли ДетализацияЗаказа = ПредопределенноеЗначение("Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам") Тогда
		Элементы.СтраницаГрузовойСостав.Видимость = Ложь;
		Элементы.СтраницаТовары.Видимость = Истина;
		Элементы.ИзмененыГрузыПоЗаказу.Заголовок = НСтр("ru = 'Товары'");
		Элементы.ОперацияСоздатьЗаказНаВозврат.Заголовок = НСтр("ru = 'Создать Заказ на возврат товаров'");
		Элементы.ОперацияСоздатьЗаказНаВозврат.Подсказка = НСтр("ru = 
			|'Создать новый Заказ на ТС для отмеченных товаров, в котором адреса отправления и назначения поменяны местами'");
		Элементы.ОперацияПеренестиВДругойЗаказ.Видимость = Истина;
		Элементы.ОперацияПеренестиВДругойЗаказ.Заголовок = НСтр("ru = 'Перенести товары в другой Заказ на ТС'");
		Элементы.ОперацияПеренестиВДругойЗаказ.Подсказка = НСтр("ru = 
			|'Удалить отмеченные товары из Заказа на ТС, или установить для них причину закрытия ""Отклонен"",
			|в зависимости от флага ""Отменить товары в Заказе на ТС"", а затем разместить эти товары в другом Заказе на ТС.
			|Рекомендуется использовать вместе с операцией ""Перенести в связанные документы - Товары"" для синхронизации данных Заказов на ТС с Маршрутными и Путевыми листами'");
		Элементы.ОперацияОтменитьГрузыВЗаказеНаТС.Заголовок = НСтр("ru = 'Отменить товары в Заказе на ТС'");
		Элементы.ОперацияОтменитьГрузыВЗаказеНаТС.Подсказка = НСтр("ru = 
			|'Установить причину закрытия ""Отклонен"" для отмеченных товаров в Заказе на ТС.
			|Рекомендуется использовать вместе с операцией ""Перенести в связанные документы - Товары"" для синхронизации данных Заказов на ТС с Маршрутными и Путевыми листами'");
		Элементы.ОперацияРазместитьГрузыВМаршрутномЛисте.Заголовок = НСтр("ru = 'Разместить товары в Маршрутном листе'");
		Элементы.ОперацияРазместитьГрузыВМаршрутномЛисте.Подсказка = НСтр("ru = 
			|'Добавить отмеченные товары в выбранный Маршрутный лист.
			|Если товары уже размещены в другом Маршрутном листе, рекомендуется также использовать операции отмены или удаления товаров из Маршрутных листов'");
		Элементы.ОперацияОтменитьГрузыВМаршрутныхЛистах.Заголовок = НСтр("ru = 'Отменить товары в Маршрутных листах'");
		Элементы.ОперацияОтменитьГрузыВМаршрутныхЛистах.Подсказка = НСтр("ru = 
			|'Установить причину закрытия ""Отклонен"" для отмеченных товаров в Маршрутных листах'");
		Элементы.ОперацияУдалитьГрузыВМаршрутныхЛистах.Заголовок = НСтр("ru = 'Удалить товары в Маршрутных листах'");
		Элементы.ОперацияУдалитьГрузыВМаршрутныхЛистах.Подсказка = НСтр("ru = 
			|'Удалить строки, связанные с отмеченными товарами, из Маршрутных листов'");
	Иначе
		Элементы.СтраницаГрузовойСостав.Видимость = Ложь;
		Элементы.СтраницаТовары.Видимость = Ложь;
		Элементы.ИзмененыГрузыПоЗаказу.Заголовок = НСтр("ru = 'Весо-объемные характеристики'");
		Элементы.ОперацияСоздатьЗаказНаВозврат.Заголовок = НСтр("ru = 'Создать Заказ на возврат'");
		Элементы.ОперацияСоздатьЗаказНаВозврат.Подсказка = НСтр("ru = 
			|'Создать новый Заказ на ТС, в котором адреса отправления и назначения поменяны местами'");
		Элементы.ОперацияПеренестиВДругойЗаказ.Видимость = Ложь;
		Элементы.ОперацияОтменитьГрузыВЗаказеНаТС.Видимость = Ложь;
		Элементы.ОперацияРазместитьГрузыВМаршрутномЛисте.Заголовок = НСтр("ru = 'Разместить Заказ на ТС в Маршрутном листе'");
		Элементы.ОперацияРазместитьГрузыВМаршрутномЛисте.Подсказка = НСтр("ru = 
			|'Добавить Заказ на ТС в выбранный Маршрутный лист.
			|Если Заказ на ТС уже размещен в другом Маршрутном листе, рекомендуется также использовать операции отмены или удаления Заказа на ТС из Маршрутных листов'");
		Элементы.ОперацияОтменитьГрузыВМаршрутныхЛистах.Заголовок = НСтр("ru = 'Отменить Заказ на ТС в Маршрутных листах'");
		Элементы.ОперацияОтменитьГрузыВМаршрутныхЛистах.Подсказка = НСтр("ru = 
			|'Установить причину закрытия ""Отклонен"" для Заказа на ТС в Маршрутных листах'");
		Элементы.ОперацияУдалитьГрузыВМаршрутныхЛистах.Заголовок = НСтр("ru = 'Удалить Заказ на ТС в Маршрутных листах'");
		Элементы.ОперацияУдалитьГрузыВМаршрутныхЛистах.Подсказка = НСтр("ru = 
			|'Удалить строки, связанные с Заказом на ТС, из Маршрутных листов'");
	КонецЕсли;
	
	Элементы.СтраницаИзмененияВЗаказе.Видимость = Не ИзмененияВЗаказеПустые;
	// Страница "Операции"
	Элементы.ГруппаПеренестиВСвязанныеДокументы.Видимость = ОперацияПеренестиВСвязанныеДокументы;
	Элементы.ДекорацияПунктПогрузки.Заголовок  = ?(ИзмененПунктПогрузки, НСтр("ru='Пункт погрузки:'"), НСтр("ru='Пункт погрузки'"));
	Элементы.ПунктПогрузки.Видимость           = ИзмененПунктПогрузки;
	Элементы.ДекорацияПунктРазгрузки.Заголовок = ?(ИзмененПунктРазгрузки, НСтр("ru='Пункт разгрузки:'"), НСтр("ru='Пункт разгрузки'"));
	Элементы.ПунктРазгрузки.Видимость          = ИзмененПунктРазгрузки;
	Если Объект.СтруктураДокументаНовая.FTL Или Объект.СтруктураДокументаСтарая.FTL Тогда
		Элементы.ИзмененыПунктыFTLЗаказа.Видимость = ЭтоКОРП;
	Иначе
		Элементы.ИзмененыПунктыFTLЗаказа.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ОперацияРазбитьНаЭтапы.Видимость = Не Объект.СтруктураДокументаНовая.FTL;
	Элементы.ГруппаРазбитьНаЭтапы.Видимость = Элементы.ОперацияРазбитьНаЭтапы.Видимость И ОперацияРазбитьНаЭтапы;
	
	Элементы.ГрузовойСоставОтрезокПути.Видимость = Объект.СтруктураДокументаНовая.FTL;
	Элементы.ТоварыОтрезокПути.Видимость = Объект.СтруктураДокументаНовая.FTL;
	
	Элементы.ГруппаЗаменитьПеревозчика.Видимость = ОперацияЗаменитьПеревозчика;
	Если ПринадлежностьПеревозки = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное") Тогда
		Элементы.ГруппаПеревозчик.Доступность = Истина;
		Элементы.ГруппаВодитель1.Доступность = Истина;
		Элементы.ГруппаДоговор.Видимость = Ложь;
	ИначеЕсли ПринадлежностьПеревозки = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Привлеченное") Тогда
		Элементы.ГруппаПеревозчик.Доступность = Истина;
		Элементы.ГруппаВодитель1.Доступность = Истина;
		Элементы.ГруппаДоговор.Видимость = Истина;
	Иначе
		Элементы.ГруппаПеревозчик.Доступность = Ложь;
		Элементы.ГруппаВодитель1.Доступность = Ложь;
		Элементы.ГруппаДоговор.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ГруппаПеренестиВДругойЗаказ.Видимость = ОперацияПеренестиВДругойЗаказ;
	Элементы.ЗаказНаТСДляПереносаГрузов.Видимость = Не ЗаказНаТСДляПереносаГрузовНовый;
	
	Элементы.ГруппаРазместитьВМаршрутномЛисте.Видимость = ОперацияРазместитьГрузыВМаршрутномЛисте;
	Элементы.МаршрутныйЛистДляПереносаГрузов.Видимость = Не МаршрутныйЛистДляПереносаГрузовНовый;
	Элементы.ГруппаПеревозка1.Видимость = МаршрутныйЛистДляПереносаГрузовНовый;
	Если ПринадлежностьПеревозки1 = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное") Тогда
		Элементы.ГруппаПеревозчик1.Доступность = Истина;
		Элементы.ГруппаВодительНовогоМЛ1.Доступность = Истина;
		Элементы.ГруппаДоговор1.Видимость = Ложь;
	ИначеЕсли ПринадлежностьПеревозки1 = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Привлеченное") Тогда
		Элементы.ГруппаПеревозчик1.Доступность = Истина;
		Элементы.ГруппаВодительНовогоМЛ1.Доступность = Истина;
		Элементы.ГруппаДоговор1.Видимость = Истина;
	Иначе
		Элементы.ГруппаПеревозчик1.Доступность = Ложь;
		Элементы.ГруппаВодительНовогоМЛ1.Доступность = Ложь;
		Элементы.ГруппаДоговор1.Видимость = Ложь;
	КонецЕсли;
	
	Элементы.ОперацияСоздатьЗаказНаВозврат.Видимость      = Не Объект.СтруктураДокументаНовая.FTL;
	Элементы.ГруппаЗаказНаВозврат.Видимость               = Не Объект.СтруктураДокументаНовая.FTL И ОперацияСоздатьЗаказНаВозврат;
	Элементы.ГруппаЗаказНаВозвратМаршрутныйЛист.Видимость = ЗаказНаВозвратВключитьВМЛ;
	Элементы.МаршрутныйЛистДляЗаказаНаВозврат.Видимость   = Не МаршрутныйЛистДляЗаказаНаВозвратНовый;
	Элементы.ГруппаПеревозка2.Видимость                   = МаршрутныйЛистДляЗаказаНаВозвратНовый;
	Если ПринадлежностьПеревозки2 = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное") Тогда
		Элементы.ГруппаПеревозчик2.Доступность = Истина;
		Элементы.ГруппаВодительНовогоМЛ2.Доступность = Истина;
		Элементы.ГруппаДоговор2.Видимость = Ложь;
	ИначеЕсли ПринадлежностьПеревозки2 = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Привлеченное") Тогда
		Элементы.ГруппаПеревозчик2.Доступность = Истина;
		Элементы.ГруппаВодительНовогоМЛ2.Доступность = Истина;
		Элементы.ГруппаДоговор2.Видимость = Истина;
	Иначе
		Элементы.ГруппаПеревозчик2.Доступность = Ложь;
		Элементы.ГруппаВодительНовогоМЛ2.Доступность = Ложь;
		Элементы.ГруппаДоговор2.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		ЗаполнитьЗначенияСвойств(ЭтотОбъект, Результат);
	КонецЕсли;
	
	СохранитьНастройки();
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()
	
	Если Не ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда 
		Возврат;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Истина);
	
	ХранилищеНастроекДанныхФорм.Сохранить(
		"Обработка.уатРедакторЦепочкиДокументов_уэ.Форма.Форма",
		"уатРедакторЦепочкиДокументов_уэ_Настройки", 
		ПолучитьСтруктуруНастроек()
	);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройки()
	
	Если ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда 
		СтруктураНастроек = ХранилищеНастроекДанныхФорм.Загрузить(
			"Обработка.уатРедакторЦепочкиДокументов_уэ.Форма.Форма",
			"уатРедакторЦепочкиДокументов_уэ_Настройки"
		);
	Иначе 
		СтруктураНастроек = Неопределено;
	КонецЕсли;
	
	СтруктураНастроекПоУмолчанию = Обработки.уатРедакторЦепочкиДокументов_уэ.СтруктураНастроекПоУмолчанию();
	Если ТипЗнч(СтруктураНастроек) <> Тип("Структура") Тогда
		СтруктураНастроек = СтруктураНастроекПоУмолчанию;
	Иначе
		Для Каждого КлючИЗначение Из СтруктураНастроекПоУмолчанию Цикл
			Если Не СтруктураНастроек.Свойство(КлючИЗначение.Ключ) Тогда
				СтруктураНастроек.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	ЗаполнитьЗначенияСвойств(ЭтаФорма, СтруктураНастроек);
	
КонецПроцедуры

&НаСервере
Функция ПолучитьСтруктуруНастроек()
	
	СтруктураНастроек = Обработки.уатРедакторЦепочкиДокументов_уэ.СтруктураНастроекПоУмолчанию();
	
	ЗаполнитьЗначенияСвойств(СтруктураНастроек, ЭтаФорма);
	Возврат СтруктураНастроек;
	
КонецФункции

#Область ИзменениеДокументов

&НаСервере
Процедура ЗаписатьИзмененияДокумента(ДокументОбъект, ИзмененныеДокументы, СозданныеДокументы, ДокументыСОшибками)
	
	ЭтоНовыйДокумент = ДокументОбъект.Ссылка.Пустая();
	ОшибкаПроведения = Ложь;
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.уатМаршрутныйЛист")
		И ДокументОбъект.Заказы.Количество() = 0 Тогда
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		МЛЭПД.Добавить(ДокументОбъект.Ссылка);
		ДокументОбъект.УстановитьПометкуУдаления(Истина);
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.уатЗаказГрузоотправителя")
		И ДокументОбъект.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам
		И ДокументОбъект.ГрузовойСостав.Количество() = 0 Тогда
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		ДокументОбъект.УстановитьПометкуУдаления(Истина);
		ЗаказыЭПД.Добавить(ДокументОбъект.Ссылка);
	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.уатЗаказГрузоотправителя")
		И ДокументОбъект.ДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам
		И ДокументОбъект.Товары.Количество() = 0 Тогда
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		ДокументОбъект.УстановитьПометкуУдаления(Истина);
		ЗаказыЭПД.Добавить(ДокументОбъект.Ссылка);

	ИначеЕсли ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.уатДоверенность")
		Или ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.уатСчетНаОплатуПокупателю")
		Или ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.уатСчетНаОплатуПоставщика") Тогда
		// Запись документов, для которых отключено проведение
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	ИначеЕсли ЭтоКОРП И ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.уатТендер_уэ") Тогда
		// Запись документов, для которых отключено проведение
		ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
	Иначе 
		Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.уатЗаказГрузоотправителя") Тогда 
			ЗаказыЭПД.Добавить(ДокументОбъект.Ссылка);
		Иначе
			МЛЭПД.Добавить(ДокументОбъект.Ссылка);
		КонецЕсли;
		// Снимается пометка удаления.
		// Она могла быть установлена редактором, например, если один Маршрутный лист модифицировался несколько раз.
		ДокументОбъект.ПометкаУдаления = Ложь;
		Попытка
			ДокументОбъект.Записать(РежимЗаписиДокумента.Проведение);
		Исключение
			ОшибкаПроведения = Истина;
			ДокументОбъект.Проведен = Ложь;
			ДокументОбъект.Записать(РежимЗаписиДокумента.Запись);
		КонецПопытки;
	КонецЕсли;
	
	Если ОшибкаПроведения Тогда
		ДокументыСОшибками.Добавить(ДокументОбъект.Ссылка);
	ИначеЕсли ЭтоНовыйДокумент Тогда
		СозданныеДокументы.Добавить(ДокументОбъект.Ссылка);
	ИначеЕсли ИзмененныеДокументы.Найти(ДокументОбъект.Ссылка) = Неопределено
		И СозданныеДокументы.Найти(ДокументОбъект.Ссылка) = Неопределено Тогда
		ИзмененныеДокументы.Добавить(ДокументОбъект.Ссылка);
	КонецЕсли;
	
	Если ТипЗнч(ДокументОбъект) = Тип("ДокументОбъект.уатМаршрутныйЛист")
		И ЭтоКОРП И ОптимизироватьМаршрутВМаршрутномЛисте Тогда
		
		// Запрещено оптимизировать маршрутный лист, часть которого уже выполнена и соответственно не может быть изменена.
		МаршрутныйЛистОтправлен = Ложь;
		Для Каждого ТекСтрока Из ДокументОбъект.Заказы Цикл
			Если ТекСтрока.Выполнен Тогда
				МаршрутныйЛистОтправлен = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не МаршрутныйЛистОтправлен Тогда
			МаршрутныеЛистыТребующиеОптимизации.Добавить(ДокументОбъект.Ссылка);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗаписатьЗаказ(ИзмененныеДокументы, СозданныеДокументы, ДокументыСОшибками)
	
	Если Не ЗаказИзменен И Не ОперацияОтменитьГрузыВЗаказеНаТС Тогда
		// Заказ не был модифицирован
		Возврат;
	КонецЕсли;
	
	ЗаказСсылка = Объект.СтруктураДокументаНовая.Ссылка;
	ЗаказОбъект = ЗаказСсылка.ПолучитьОбъект();
	
	// Обновляются только ТЧ товаров и грузовых мест, т.к. только их можно изменить в обработке
	УдаляемыеСтроки = Новый Массив;
	ЗаказОбъект.ОтрезкиПути.Очистить();
	Если ДетализацияЗаказа = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам Тогда
		ЗаказОбъект.ГрузовойСостав.Очистить();
		Для Каждого ТекСтрока Из Объект.ГрузовойСостав Цикл
			Если ОперацияОтменитьГрузыВЗаказеНаТС И ТекСтрока.Выбран Тогда
				ТекСтрока.ПричинаЗакрытия = Справочники.уатПричиныЗакрытияЗаказов.Отклонен;
			КонецЕсли;
			
			Если ОперацияПеренестиВДругойЗаказ И Не ОперацияОтменитьГрузыВЗаказеНаТС И ТекСтрока.Выбран Тогда
				УдаляемыеСтроки.Добавить(ТекСтрока);
			Иначе
				НоваяСтрока = ЗаказОбъект.ГрузовойСостав.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
				СтрокиОтрезковПути = Объект.ОтрезкиПути.НайтиСтроки(Новый Структура("Груз", ТекСтрока.НомерСтроки));
				Для Каждого ТекСтрока Из Объект.ОтрезкиПути Цикл
					НоваяСтрока = ЗаказОбъект.ОтрезкиПути.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		Для Каждого ТекСтрока Из УдаляемыеСтроки Цикл
			Объект.ГрузовойСостав.Удалить(ТекСтрока);
		КонецЦикла;
	ИначеЕсли ДетализацияЗаказа = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам Тогда
		ЗаказОбъект.Товары.Очистить();
		Для Каждого ТекСтрока Из Объект.Товары Цикл
			Если ОперацияОтменитьГрузыВЗаказеНаТС И ТекСтрока.Выбран Тогда
				ТекСтрока.ПричинаЗакрытия = Справочники.уатПричиныЗакрытияЗаказов.Отклонен;
			КонецЕсли;
			
			Если ОперацияПеренестиВДругойЗаказ И Не ОперацияОтменитьГрузыВЗаказеНаТС И ТекСтрока.Выбран Тогда
				УдаляемыеСтроки.Добавить(ТекСтрока);
			Иначе
				НоваяСтрока = ЗаказОбъект.Товары.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
				СтрокиОтрезковПути = Объект.ОтрезкиПути.НайтиСтроки(Новый Структура("Груз", ТекСтрока.НомерСтроки));
				Для Каждого ТекСтрока Из Объект.ОтрезкиПути Цикл
					НоваяСтрока = ЗаказОбъект.ОтрезкиПути.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		Для Каждого ТекСтрока Из УдаляемыеСтроки Цикл
			Объект.Товары.Удалить(ТекСтрока);
		КонецЦикла;
	КонецЕсли;
	
	ЗаполнитьЗначенияСвойств(ЗаказОбъект, Объект.СтруктураДокументаНовая);
	
	ЗаписатьИзмененияДокумента(ЗаказОбъект, ИзмененныеДокументы, СозданныеДокументы, ДокументыСОшибками);
	ЗаказИзменен = Ложь;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьДокументыНаСервере(ИзмененныеДокументы, СозданныеДокументы, ДокументыСОшибками)

	МЛЭПД.Очистить();
	ЗаказыЭПД.Очистить();
	ИзмененныеДокументы = Новый Массив;
	ОтмеченныеСтроки = ПолучитьОтмеченныеСтрокиГрузов();
	
	// Создание Заказа на возврат
	Если ОперацияСоздатьЗаказНаВозврат Тогда
		ЗаказНаВозвратОбъект = Документы.уатЗаказГрузоотправителя.СоздатьДокумент();
		ЗаказНаВозвратОбъект.Дата = ТекущаяДата();
		// Заполнение Заказа на ТС по другому Заказу на ТС - это заказ на возврат
		ЗаказНаВозвратОбъект.ДополнительныеСвойства.Вставить("ОтмеченныеСтрокиГрузов", ОтмеченныеСтроки);
		ЗаказНаВозвратОбъект.Заполнить(Объект.СтруктураДокументаНовая.Ссылка);
		ЗаписатьИзмененияДокумента(ЗаказНаВозвратОбъект, ИзмененныеДокументы, СозданныеДокументы, ДокументыСОшибками);
		ЗаказНаВозврат = ЗаказНаВозвратОбъект.Ссылка;
	КонецЕсли;
	
	// Изменение самого Заказа на ТС
	Если ИзмененПунктПогрузки
		И Объект.СтруктураДокументаНовая.АдресОтправления <> ПунктПогрузки Тогда
		ЗаказИзменен = Истина;
		Объект.СтруктураДокументаНовая.АдресОтправления = ПунктПогрузки;
	КонецЕсли;
	Если ИзмененПунктРазгрузки
		И Объект.СтруктураДокументаНовая.АдресНазначения <> ПунктРазгрузки Тогда
		ЗаказИзменен = Истина;
		Объект.СтруктураДокументаНовая.АдресНазначения = ПунктРазгрузки;
	КонецЕсли;
	
	Если ОперацияПеренестиВДругойЗаказ Тогда
		Если ЗаказНаТСДляПереносаГрузовНовый Тогда
			ЗаказНаТСДляПереносаГрузов = Неопределено;
		КонецЕсли;
		ОбщийМодульЗащищенныеФункции = ОбщегоНазначения.ОбщийМодуль("уатЗащищенныеФункцииСервер_уэ");
		Если ОбщийМодульЗащищенныеФункции <> Неопределено Тогда
			ЗаказОбъект = ОбщийМодульЗащищенныеФункции.ПеренестиГрузыВДругойЗаказ(
				ЗаказНаТСДляПереносаГрузов, ЗаказСсылка, ОтмеченныеСтроки);
			Если ЗаказОбъект <> Неопределено Тогда
				ЗаписатьИзмененияДокумента(ЗаказОбъект, ИзмененныеДокументы, СозданныеДокументы, ДокументыСОшибками);
				ЗаказНаТСДляПереносаГрузов = ЗаказОбъект.Ссылка;
				
				// Для обновления грузов в заказе в процедуре ЗаписатьЗаказ
				ЗаказИзменен = Истина;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ИзмененУстановленФлагМультимодальный
		Или ОперацияРазбитьНаЭтапы Тогда
		ЗаказРазмещенВМаршрутныхЛистах = Ложь;
		ТипыДокументов = СвязанныеДокументы.ПолучитьЭлементы();
		Для Каждого СтрокаТипДокумента Из ТипыДокументов Цикл
			Если СтрокаТипДокумента.Документ = Тип("ДокументСсылка.уатМаршрутныйЛист") Тогда
				ЗаказРазмещенВМаршрутныхЛистах = Истина;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		Если Не ОперацияРазбитьНаЭтапы 
			И ЗаказРазмещенВМаршрутныхЛистах Тогда
			// Создается Мультимодальный родительский заказ
			РодительскийЗаказОбъект      = Объект.СтруктураДокументаНовая.Ссылка.Скопировать();
			РодительскийЗаказОбъект.Дата = Объект.СтруктураДокументаНовая.Дата - 1;
			РодительскийЗаказОбъект.Мультимодальный   = Истина;
			РодительскийЗаказОбъект.ЭтоЭтап           = Ложь;
			РодительскийЗаказОбъект.РодительскийЗаказ = Неопределено;
			ЗаписатьИзмененияДокумента(РодительскийЗаказОбъект, ИзмененныеДокументы, СозданныеДокументы, ДокументыСОшибками);
			РодительскийЗаказСсылка = РодительскийЗаказОбъект.Ссылка;
			
			НаборЗаписей = РегистрыСведений.уатЭтапыМультимодальныхПеревозок_уэ.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ЗаказГрузоотправителя.Установить(РодительскийЗаказСсылка);
			НаборЗаписей.Прочитать();
			
			// Текущий заказ трансформируется в этап.
			ЗаказИзменен = Истина;
			Объект.СтруктураДокументаНовая.Мультимодальный   = Истина;
			Объект.СтруктураДокументаНовая.ЭтоЭтап           = Истина;
			Объект.СтруктураДокументаНовая.РодительскийЗаказ = РодительскийЗаказСсылка;
			
			НовыйЭтап = НаборЗаписей.Добавить();
			НовыйЭтап.НомерЭтапа = НаборЗаписей.Количество() + 1;
			НовыйЭтап.ЗаказГрузоотправителя = РодительскийЗаказСсылка;
			НовыйЭтап.Этап = Объект.СтруктураДокументаНовая.Ссылка;
			
			НаборЗаписей.Записать(Истина);
		ИначеЕсли ОперацияРазбитьНаЭтапы Тогда
			ПунктДобавленВНачало   = ПозицияНовогоПункта = НСтр("ru = 'В начало'");
			ПунктДобавленВСередину = ПозицияНовогоПункта = НСтр("ru = 'В середину'");
			ПунктДобавленВКонец    = ПозицияНовогоПункта = НСтр("ru = 'В конец'");
			
			Если Объект.СтруктураДокументаНовая.ЭтоЭтап Тогда
				РодительскийЗаказСсылка = Объект.СтруктураДокументаНовая.РодительскийЗаказ;
			Иначе
				// Создается Мультимодальный родительский заказ
				РодительскийЗаказОбъект      = Объект.СтруктураДокументаНовая.Ссылка.Скопировать();
				РодительскийЗаказОбъект.Дата = Объект.СтруктураДокументаНовая.Дата - 1;
				РодительскийЗаказОбъект.Мультимодальный   = Истина;
				РодительскийЗаказОбъект.ЭтоЭтап           = Ложь;
				РодительскийЗаказОбъект.РодительскийЗаказ = Неопределено;
				ЗаписатьИзмененияДокумента(РодительскийЗаказОбъект, ИзмененныеДокументы, СозданныеДокументы, ДокументыСОшибками);
				РодительскийЗаказСсылка = РодительскийЗаказОбъект.Ссылка;
			КонецЕсли;
			
			НаборЗаписей = РегистрыСведений.уатЭтапыМультимодальныхПеревозок_уэ.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ЗаказГрузоотправителя.Установить(РодительскийЗаказСсылка);
			НаборЗаписей.Прочитать();
			
			// Создается новый этап
			НовыйЗаказЭтап = Объект.СтруктураДокументаНовая.Ссылка.Скопировать();
			НовыйЗаказЭтап.Дата = ТекущаяДата();
			НовыйЗаказЭтап.Мультимодальный   = Истина;
			НовыйЗаказЭтап.ЭтоЭтап           = Истина;
			НовыйЗаказЭтап.РодительскийЗаказ = РодительскийЗаказСсылка;
			Если ПунктДобавленВНачало Тогда
				НовыйЗаказЭтап.АдресОтправления = НовыйПункт;
				НовыйЗаказЭтап.АдресНазначения = Объект.СтруктураДокументаНовая.АдресОтправления;
				// Здесь надо заполнить стоянку в пункте из пункта и возможно, сбросить грузоотправителя
				// Также может быть нужно изменить перевозку на "Дверь-Х"
				// Или нужно дать возможность выбрать не пункт, а склад?
			ИначеЕсли ПунктДобавленВСередину Тогда
				НовыйЗаказЭтап.АдресОтправления = НовыйПункт;
				Объект.СтруктураДокументаНовая.АдресНазначения = НовыйПункт;
			Иначе
				НовыйЗаказЭтап.АдресОтправления = Объект.СтруктураДокументаНовая.АдресНазначения;
				НовыйЗаказЭтап.АдресНазначения = НовыйПункт;
			КонецЕсли;
			ЗаписатьИзмененияДокумента(НовыйЗаказЭтап, ИзмененныеДокументы, СозданныеДокументы, ДокументыСОшибками);
			
			ЗаказИзменен = Истина;
			Если Не Объект.СтруктураДокументаНовая.ЭтоЭтап Тогда
				// Текущий заказ трансформируется в этап.
				Объект.СтруктураДокументаНовая.Мультимодальный   = Истина;
				Объект.СтруктураДокументаНовая.ЭтоЭтап           = Истина;
				Объект.СтруктураДокументаНовая.РодительскийЗаказ = РодительскийЗаказСсылка;
				
				НовыйЭтап = НаборЗаписей.Добавить();
				НовыйЭтап.НомерЭтапа = НаборЗаписей.Количество() + 1;
				НовыйЭтап.ЗаказГрузоотправителя = РодительскийЗаказСсылка;
				НовыйЭтап.Этап = Объект.СтруктураДокументаНовая.Ссылка;
				
				НомерСтарогоЭтапа = НовыйЭтап.НомерЭтапа;
			Иначе
				НомерСтарогоЭтапа = 1;
				Для Каждого ТекЭтап Из НаборЗаписей Цикл
					Если ТекЭтап.Этап = Объект.СтруктураДокументаНовая.Ссылка Тогда
						НомерСтарогоЭтапа = ТекЭтап.НомерЭтапа;
						Прервать;
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
			
			Если ПунктДобавленВНачало Тогда
				// Новый этап - перед старым
				НомерНовогоЭтапа = НомерСтарогоЭтапа;
			Иначе
				// Новый этап - после старого
				НомерНовогоЭтапа = НомерСтарогоЭтапа + 1;
			КонецЕсли;
			
			НовыйЭтап = НаборЗаписей.Добавить();
			Для Каждого ТекЭтап Из НаборЗаписей Цикл
				// Сдвигаем номера существующих этапов, чтобы новый этап поместился между существующими
				Если ТекЭтап.НомерЭтапа >= НомерНовогоЭтапа Тогда
					ТекЭтап.НомерЭтапа = ТекЭтап.НомерЭтапа + 1;
				КонецЕсли;
			КонецЦикла;
			НовыйЭтап.НомерЭтапа = НомерНовогоЭтапа;
			НовыйЭтап.ЗаказГрузоотправителя = РодительскийЗаказСсылка;
			НовыйЭтап.Этап = НовыйЗаказЭтап.Ссылка;
			
			НаборЗаписей.Записать(Истина);
			
		КонецЕсли;
	КонецЕсли;
	ЗаписатьЗаказ(ИзмененныеДокументы, СозданныеДокументы, ДокументыСОшибками);
	
	// Для изменения некоторых других документов, например, ТТД, требуется сначала обновить Маршрутные листы.
	ИзменитьМаршрутныеЛисты(ИзмененныеДокументы, СозданныеДокументы, ДокументыСОшибками);
	
	// Изменение прочих документов
	Для Каждого ТекСтрокаТипДокумента Из СвязанныеДокументы.ПолучитьЭлементы() Цикл
		СтрокиДокументов = ТекСтрокаТипДокумента.ПолучитьЭлементы();
		Для Каждого ТекущаяСтрока Из СтрокиДокументов Цикл
			Если ТекущаяСтрока.Выбран Тогда
				ИзменитьДокумент(ТекущаяСтрока.Документ, ИзмененныеДокументы, СозданныеДокументы, ДокументыСОшибками);
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Очистка страницы "Внесенные изменения"
	УдаляемыеЭлементы = Новый Массив;
	Для Каждого ТекГруппа Из Элементы.ГруппаИзмененныеДокументы.ПодчиненныеЭлементы Цикл
		Для Каждого ТекЭлемент Из ТекГруппа.ПодчиненныеЭлементы Цикл
			УдаляемыеЭлементы.Добавить(ТекЭлемент);
		КонецЦикла;
		УдаляемыеЭлементы.Добавить(ТекГруппа);
	КонецЦикла;
	Для Каждого ТекГруппа Из Элементы.ГруппаСозданныеДокументы.ПодчиненныеЭлементы Цикл
		Для Каждого ТекЭлемент Из ТекГруппа.ПодчиненныеЭлементы Цикл
			УдаляемыеЭлементы.Добавить(ТекЭлемент);
		КонецЦикла;
		УдаляемыеЭлементы.Добавить(ТекГруппа);
	КонецЦикла;
	Для Каждого ТекЭлемент Из УдаляемыеЭлементы Цикл
		Элементы.Удалить(ТекЭлемент);
	КонецЦикла;
	
	// Заполнение страницы "Внесенные изменения"
	Сч = 0;
	Для Каждого ТекДокумент Из ИзмененныеДокументы Цикл
		Сч = Сч + 1;
		ДобавитьГиперссылкуДокумента(ТекДокумент, Сч, Элементы.ГруппаИзмененныеДокументы);
	КонецЦикла;
	
	Для Каждого ТекДокумент Из СозданныеДокументы Цикл
		Сч = Сч + 1;
		ДобавитьГиперссылкуДокумента(ТекДокумент, Сч, Элементы.ГруппаСозданныеДокументы);
	КонецЦикла;
	
	Для Каждого ТекДокумент Из ДокументыСОшибками Цикл
		Сч = Сч + 1;
		ДобавитьГиперссылкуДокумента(ТекДокумент, Сч, Элементы.ГруппаДокументыСОшибками);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьМаршрутныеЛисты(ИзмененныеДокументы, СозданныеДокументы, ДокументыСОшибками)
	
	Для Каждого ТекСтрокаТипДокумента Из СвязанныеДокументы.ПолучитьЭлементы() Цикл
		СтрокиДокументов = ТекСтрокаТипДокумента.ПолучитьЭлементы();
		Для Каждого ТекущаяСтрока Из СтрокиДокументов Цикл
			Если ТекущаяСтрока.Выбран И ТипЗнч(ТекущаяСтрока.Документ) = Тип("ДокументСсылка.уатМаршрутныйЛист") Тогда
				
				ДокументИзменен = Ложь;
				ДокументОбъект = ТекущаяСтрока.Документ.ПолучитьОбъект();
				ИзменитьМаршрутныйЛист(ДокументОбъект, ИзмененныеДокументы, СозданныеДокументы, ДокументыСОшибками, ДокументИзменен);
				
				Если ДокументИзменен Тогда
					ЗаписатьИзмененияДокумента(ДокументОбъект, ИзмененныеДокументы, СозданныеДокументы, ДокументыСОшибками);
				КонецЕсли;
				
			КонецЕсли;
		КонецЦикла;
	КонецЦикла;
	
	// Размещение отмеченных грузов в Маршрутном листе
	Если ОперацияРазместитьГрузыВМаршрутномЛисте Тогда
		Если МаршрутныйЛистДляПереносаГрузовНовый Тогда
			МаршрутныйЛистДляПереносаГрузов = Неопределено;
		КонецЕсли;
		ОбщийМодульЗащищенныеФункции = ОбщегоНазначения.ОбщийМодуль("уатЗащищенныеФункцииСервер_уэ");
		Если ОбщийМодульЗащищенныеФункции <> Неопределено Тогда
			ПараметрыПеревозчика = Новый Структура("ПринадлежностьПеревозки, Перевозчик, ДоговорКонтрагента, ТС, Водитель1",
				ПринадлежностьПеревозки1, Перевозчик1, ДоговорКонтрагента1, ТС1, ВодительНовогоМЛ1);
			МаршрутныйЛистДляПереносаГрузовОбъект = ОбщийМодульЗащищенныеФункции.РазместитьГрузыВМаршрутномЛисте(
				МаршрутныйЛистДляПереносаГрузов, ЗаказНаТСДляПереносаГрузов, ЗаказСсылка, Объект,
				ОперацияПеренестиВДругойЗаказ, ПараметрыПеревозчика);
			Если МаршрутныйЛистДляПереносаГрузовОбъект <> Неопределено Тогда
				ЗаписатьИзмененияДокумента(МаршрутныйЛистДляПереносаГрузовОбъект, ИзмененныеДокументы, СозданныеДокументы, ДокументыСОшибками);
				МаршрутныйЛистДляПереносаГрузов = МаршрутныйЛистДляПереносаГрузовОбъект.Ссылка;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	// Размещение Заказа на возврат в Маршрутном листе
	Если ОперацияСоздатьЗаказНаВозврат И ЗаказНаВозвратВключитьВМЛ Тогда
		Если МаршрутныйЛистДляЗаказаНаВозвратНовый Тогда
			МаршрутныйЛистОбъект = Документы.уатМаршрутныйЛист.СоздатьДокумент();
			МаршрутныйЛистОбъект.Заполнить(ЗаказНаВозврат);
			МаршрутныйЛистОбъект.ПринадлежностьПеревозки = ПринадлежностьПеревозки2;
			МаршрутныйЛистОбъект.Контрагент              = Перевозчик2;
			МаршрутныйЛистОбъект.ДоговорКонтрагента      = ДоговорКонтрагента2;
			МаршрутныйЛистОбъект.ТС                      = ТС2;
			МаршрутныйЛистОбъект.Водитель1               = ВодительНовогоМЛ2;
		Иначе
			МаршрутныйЛистОбъект = МаршрутныйЛистДляЗаказаНаВозврат.ПолучитьОбъект();
			Документы.уатМаршрутныйЛист.ЗаполнитьТаблицуЗаказовПоЗаказуНаТС(МаршрутныйЛистОбъект, ЗаказНаВозврат);
			
			// Переносим погрузку по заказу на возврат в точку разгрузки по основному заказу
			СтруктураОтбора = Новый Структура("ЗаказГрузоотправителя, Пункт", ЗаказСсылка, ЗаказНаВозврат.АдресОтправления);
			СтрокиМаршрута = МаршрутныйЛистОбъект.Заказы.НайтиСтроки(СтруктураОтбора);
			НомерСтрокиПунктаПогрузки = 0;
			Для Каждого ТекСтрокаМаршрута Из СтрокиМаршрута Цикл
				НомерСтрокиПунктаПогрузки = Макс(НомерСтрокиПунктаПогрузки, ТекСтрокаМаршрута.НомерСтроки);
			КонецЦикла;
			СтруктураОтбора = Новый Структура("ЗаказГрузоотправителя, ТипТочкиМаршрута", ЗаказНаВозврат, Перечисления.уатТипыТочекМаршрута.Погрузка);
			СтрокиМаршрута = МаршрутныйЛистОбъект.Заказы.НайтиСтроки(СтруктураОтбора);
			НовыйНомерСтрокиПунктаПогрузки = МаршрутныйЛистОбъект.Заказы.Количество();
			Для Каждого ТекСтрокаМаршрута Из СтрокиМаршрута Цикл
				НовыйНомерСтрокиПунктаПогрузки = Мин(НовыйНомерСтрокиПунктаПогрузки, ТекСтрокаМаршрута.НомерСтроки);
			КонецЦикла;
			Для Каждого ТекСтрокаМаршрута Из СтрокиМаршрута Цикл
				МаршрутныйЛистОбъект.Заказы.Сдвинуть(ТекСтрокаМаршрута, НомерСтрокиПунктаПогрузки + 1 - НовыйНомерСтрокиПунктаПогрузки);
			КонецЦикла;
		КонецЕсли;
		
		ЗаписатьИзмененияДокумента(МаршрутныйЛистОбъект, ИзмененныеДокументы, СозданныеДокументы, ДокументыСОшибками);
		МаршрутныйЛистДляЗаказаНаВозврат = МаршрутныйЛистОбъект.Ссылка;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьДокумент(ДокументСсылка, ИзмененныеДокументы, СозданныеДокументы, ДокументыСОшибками)
	
	ДокументИзменен = Ложь;
	ДокументОбъект = ДокументСсылка.ПолучитьОбъект();
	
	// Маршрутные листы, а также сам Заказ на ТС изменяется отдельно
	Если ЭтоКОРП И ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.уатАктОтгрузки_уэ") Тогда
		ИзменитьАктОтгрузки(ДокументОбъект, ИзмененныеДокументы, СозданныеДокументы, ДокументИзменен);
	ИначеЕсли ЭтоКОРП И ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.уатАктПриемки_уэ") Тогда
		ИзменитьАктПриемки(ДокументОбъект, ИзмененныеДокументы, СозданныеДокументы, ДокументИзменен);
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.уатДоверенность") Тогда
		ИзменитьДоверенность(ДокументОбъект, ИзмененныеДокументы, СозданныеДокументы, ДокументИзменен);
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") Тогда
		ИзменитьСвязанныйЗаказНаТС(ДокументОбъект, ИзмененныеДокументы, СозданныеДокументы, ДокументИзменен);
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.уатЗаказПеревозчику_уэ") Тогда
		ИзменитьЗаказПеревозчику(ДокументОбъект, ИзмененныеДокументы, СозданныеДокументы, ДокументИзменен);
	ИначеЕсли ЭтоКОРП И ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.уатОперацияСГрузом_уэ") Тогда
		ИзменитьОперациюСГрузом(ДокументОбъект, ИзмененныеДокументы, СозданныеДокументы, ДокументыСОшибками, ДокументИзменен);
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.уатПоступлениеТоваровУслуг") Тогда
		ИзменитьПоступлениеТоваровУслуг(ДокументОбъект, ИзмененныеДокументы, СозданныеДокументы, ДокументИзменен);
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.уатПутевойЛист") Тогда
		ИзменитьПутевойЛист(ДокументОбъект, ИзмененныеДокументы, СозданныеДокументы, ДокументИзменен);
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.уатРеализацияУслуг") Тогда
		ИзменитьРеализациюУслуг(ДокументОбъект, ИзмененныеДокументы, СозданныеДокументы, ДокументИзменен);
	ИначеЕсли ЭтоКОРП И ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.уатРекламация_уэ") Тогда
		ИзменитьРекламацию(ДокументОбъект, ИзмененныеДокументы, СозданныеДокументы, ДокументИзменен);
	ИначеЕсли ЭтоКОРП И ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.уатСтраховойСертификат_уэ") Тогда
		ИзменитьСтраховойСертификат(ДокументОбъект, ИзмененныеДокументы, СозданныеДокументы, ДокументИзменен);
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.уатСчетНаОплатуПокупателю") Тогда
		ИзменитьСчетНаОплатуПокупателю(ДокументОбъект, ИзмененныеДокументы, СозданныеДокументы, ДокументИзменен);
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.уатСчетНаОплатуПоставщика") Тогда
		ИзменитьСчетНаОплатуПоставщика(ДокументОбъект, ИзмененныеДокументы, СозданныеДокументы, ДокументИзменен);
	ИначеЕсли ЭтоКОРП И ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.уатТендер_уэ") Тогда
		ИзменитьТендер(ДокументОбъект, ИзмененныеДокументы, СозданныеДокументы, ДокументИзменен);
	ИначеЕсли ТипЗнч(ДокументСсылка) = Тип("ДокументСсылка.уатТТД") Тогда
		ИзменитьТТД(ДокументОбъект, ИзмененныеДокументы, СозданныеДокументы, ДокументИзменен);
	КонецЕсли;
	
	Если ДокументИзменен Тогда
		ЗаписатьИзмененияДокумента(ДокументОбъект, ИзмененныеДокументы, СозданныеДокументы, ДокументыСОшибками);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьАктОтгрузки(АктОтгрузкиОбъект, ИзмененныеДокументы, СозданныеДокументы, ДокументИзменен)
	
	Если ИзмененаОрганизация
		И АктОтгрузкиОбъект.Организация <> Объект.СтруктураДокументаНовая.Организация Тогда
		ДокументИзменен = Истина;
		АктОтгрузкиОбъект.Организация = Объект.СтруктураДокументаНовая.Организация;
	КонецЕсли;
	
	Если ИзмененыГрузыПоЗаказу Тогда
		ДокументИзменен = Истина;
		
		СтруктураОтбора = Новый Структура("Заказ", ЗаказСсылка);
		НайденныеСтроки = АктОтгрузкиОбъект.Грузы.НайтиСтроки(СтруктураОтбора);
		Для Каждого ТекСтрока Из НайденныеСтроки Цикл
			АктОтгрузкиОбъект.Грузы.Удалить(ТекСтрока);
		КонецЦикла;
		
		Документы.уатАктОтгрузки_уэ.ЗаполнитьТаблицуГрузовПоЗаказуНаТС(АктОтгрузкиОбъект, ЗаказСсылка); 
	КонецЕсли;
	
	Если ОперацияЗаменитьПеревозчика
		И (АктОтгрузкиОбъект.ВидОперации = Перечисления.уатВидыОперацийАктОтгрузки_уэ.ВРейс
		Или АктОтгрузкиОбъект.ВидОперации = Перечисления.уатВидыОперацийАктОтгрузки_уэ.ВРейсВПункте) Тогда
		
		ДокументИзменен = Истина;
		АктОтгрузкиОбъект.Водитель1 = Водитель1;
		АктОтгрузкиОбъект.ПринадлежностьПеревозки = ПринадлежностьПеревозки;
		АктОтгрузкиОбъект.Перевозчик = Перевозчик;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьАктПриемки(АктПриемкиОбъект, ИзмененныеДокументы, СозданныеДокументы, ДокументИзменен)
	
	Если ИзмененаОрганизация
		И АктПриемкиОбъект.Организация <> Объект.СтруктураДокументаНовая.Организация Тогда
		ДокументИзменен = Истина;
		АктПриемкиОбъект.Организация = Объект.СтруктураДокументаНовая.Организация;
	КонецЕсли;
	
	Если ИзмененыГрузыПоЗаказу Тогда
		ДокументИзменен = Истина;
		
		СтруктураОтбора = Новый Структура("Заказ", ЗаказСсылка);
		НайденныеСтроки = АктПриемкиОбъект.Грузы.НайтиСтроки(СтруктураОтбора);
		Для Каждого ТекСтрока Из НайденныеСтроки Цикл
			АктПриемкиОбъект.Грузы.Удалить(ТекСтрока);
		КонецЦикла;
		
		Документы.уатАктПриемки_уэ.ЗаполнитьТаблицуГрузовПоЗаказуНаТС(АктПриемкиОбъект, ЗаказСсылка); 
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьДоверенность(ДокументОбъект, ИзмененныеДокументы, СозданныеДокументы, ДокументИзменен)
	
	Если ИзмененаОрганизация
		И ДокументОбъект.Организация <> Объект.СтруктураДокументаНовая.Организация Тогда
		ДокументИзменен = Истина;
		ДокументОбъект.Организация = Объект.СтруктураДокументаНовая.Организация;
		ДокументОбъект.БанковскийСчетОрганизации = ДокументОбъект.Организация.ОсновнойБанковскийСчет;
	КонецЕсли;
	
	Если ИзмененКонтрагент
		И ТипЗнч(ДокументОбъект.Контрагент) = Тип("СправочникСсылка.Контрагенты") Тогда
		ДокументИзменен = Истина;
		ДокументОбъект.Контрагент = Объект.СтруктураДокументаНовая.Контрагент;
		ДокументОбъект.НаПолучениеОт = Документы.уатДоверенность.ПолучитьПолноеНаименованиеКонтрагента(ДокументОбъект.Контрагент);
	КонецЕсли;
	
	Если ИзмененДоговор Тогда
		ДокументИзменен = Истина;
		ДокументОбъект.ДоговорКонтрагента = Объект.СтруктураДокументаНовая.ДоговорКонтрагента;
	КонецЕсли;
	
	Если ОперацияЗаменитьПеревозчика
		И ДокументОбъект.ДоверенноеЛицо <> Водитель1
		И (ПринадлежностьПеревозки = Перечисления.уатПринадлежностьТС.Собственное
		Или ПринадлежностьПеревозки = Перечисления.уатПринадлежностьТС.Привлеченное) Тогда
		
		ДокументИзменен = Истина;
		ДокументОбъект.ДоверенноеЛицо = Водитель1;
		ДокументОбъект.ТипДоверенногоЛица = ?(ТипЗнч(ДокументОбъект.ДоверенноеЛицо) = Тип("СправочникСсылка.Сотрудники"),0,1);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьСвязанныйЗаказНаТС(ДокументОбъект, ИзмененныеДокументы, СозданныеДокументы, ДокументИзменен)
	
	Если ИзмененаОрганизация
		И ДокументОбъект.Организация <> Объект.СтруктураДокументаНовая.Организация Тогда
		ДокументИзменен = Истина;
		ДокументОбъект.Организация = Объект.СтруктураДокументаНовая.Организация;
	КонецЕсли;
	
	Если ИзмененВидПеревозки
		И ДокументОбъект.ВидПеревозки <> Объект.СтруктураДокументаНовая.ВидПеревозки Тогда
		ДокументИзменен = Истина;
		ДокументОбъект.ВидПеревозки = Объект.СтруктураДокументаНовая.ВидПеревозки;
	КонецЕсли;
	
	Если ИзмененДоговор
		И ДокументОбъект.ДоговорКонтрагента <> Объект.СтруктураДокументаНовая.ДоговорКонтрагента Тогда
		ДокументИзменен = Истина;
		ДокументОбъект.ДоговорКонтрагента = Объект.СтруктураДокументаНовая.ДоговорКонтрагента;
	КонецЕсли;
	
	Если ИзмененКонтрагент
		И ДокументОбъект.Контрагент <> Объект.СтруктураДокументаНовая.Контрагент Тогда
		ДокументИзменен = Истина;
		ДокументОбъект.Контрагент = Объект.СтруктураДокументаНовая.Контрагент;
	КонецЕсли;
	
	Если ИзмененМаршрут
		И ДокументОбъект.Маршрут <> Объект.СтруктураДокументаНовая.Маршрут Тогда
		ДокументИзменен = Истина;
		ДокументОбъект.Маршрут = Объект.СтруктураДокументаНовая.Маршрут;
	КонецЕсли;
	
	Если ИзмененОбъектСтроительства
		И ДокументОбъект.ОбъектСтроительства <> Объект.СтруктураДокументаНовая.ОбъектСтроительства Тогда
		ДокументИзменен = Истина;
		ДокументОбъект.ОбъектСтроительства = Объект.СтруктураДокументаНовая.ОбъектСтроительства;
	КонецЕсли;
	
	Если ИзмененОбъектСтроительства
		И ДокументОбъект.ОбъектСтроительства <> Объект.СтруктураДокументаНовая.ОбъектСтроительства Тогда
		ДокументИзменен = Истина;
		ДокументОбъект.ОбъектСтроительства = Объект.СтруктураДокументаНовая.ОбъектСтроительства;
	КонецЕсли;
	
	Если ИзмененоНаправлениеПеревозки
		И ДокументОбъект.НаправлениеПеревозки <> Объект.СтруктураДокументаНовая.НаправлениеПеревозки Тогда
		ДокументИзменен = Истина;
		ДокументОбъект.НаправлениеПеревозки = Объект.СтруктураДокументаНовая.НаправлениеПеревозки;
	КонецЕсли;
	
	Если ИзмененоПодразделение
		И ДокументОбъект.Подразделение <> Объект.СтруктураДокументаНовая.Подразделение Тогда
		ДокументИзменен = Истина;
		ДокументОбъект.Подразделение = Объект.СтруктураДокументаНовая.Подразделение;
	КонецЕсли;
	
	Если ИзмененыГрузыПоЗаказу Тогда
		ДокументИзменен = Истина;
		
		ДокументОбъект.ГрузовойСостав.Очистить();
		Для Каждого ТекГруз Из Объект.ГрузовойСостав Цикл 
			НовГруз = ДокументОбъект.ГрузовойСостав.Добавить();
			ЗаполнитьЗначенияСвойств(НовГруз, ТекГруз);
		КонецЦикла;
		
		ДокументОбъект.Товары.Очистить();
		Для Каждого ТекТовар Из Объект.Товары Цикл 
			НовТовар = ДокументОбъект.Товары.Добавить();
			ЗаполнитьЗначенияСвойств(НовТовар, ТекТовар);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьЗаказПеревозчику(ДокументОбъект, ИзмененныеДокументы, СозданныеДокументы, ДокументИзменен)
	
	Если ИзмененаОрганизация
		И ДокументОбъект.Организация <> Объект.СтруктураДокументаНовая.Организация Тогда
		ДокументИзменен = Истина;
		ДокументОбъект.Организация = Объект.СтруктураДокументаНовая.Организация;
	КонецЕсли;
	
	Если ИзмененВидПеревозки
		И ДокументОбъект.ВидПеревозки <> Объект.СтруктураДокументаНовая.ВидПеревозки Тогда
		ДокументИзменен = Истина;
		ДокументОбъект.ВидПеревозки = Объект.СтруктураДокументаНовая.ВидПеревозки;
	КонецЕсли;
	
	Если ИзмененыГрузыПоЗаказу Тогда
		ДокументИзменен = Истина;
		НайденныеСтроки = ДокументОбъект.Грузы.НайтиСтроки(Новый Структура("Заказ", ЗаказСсылка));
		Для Каждого ТекСтрока Из НайденныеСтроки Цикл
			ДокументОбъект.Грузы.Удалить(ТекСтрока);
		КонецЦикла;
		ДокументОбъект.ЗаполнитьГрузыПоЗаказуНаТС(ЗаказСсылка);
	КонецЕсли;
	
	Если ОперацияЗаменитьПеревозчика
		И ПринадлежностьПеревозки = Перечисления.уатПринадлежностьТС.Привлеченное Тогда
		ДокументИзменен = Истина;
		ДокументОбъект.Контрагент = Перевозчик;
		ДокументОбъект.ДоговорКонтрагента = ДоговорКонтрагента;
		Если ДокументОбъект.ТС <> ТС Тогда
			ДокументОбъект.ТС = ТС;
			ДокументОбъект.Прицеп1 = Справочники.уатТС.ПустаяСсылка();
			ДокументОбъект.Прицеп2 = Справочники.уатТС.ПустаяСсылка();
		КонецЕсли;
		ДокументОбъект.Водитель = Водитель1;
	КонецЕсли;
	
	Если ИзмененПунктПогрузки Или ИзмененПунктРазгрузки Или ИзмененыПунктыFTLЗаказа Или ИзмененМаршрут
		Или ИзмененыГрузыПоЗаказу Тогда
		ДокументИзменен = Истина;
		ДокументОбъект.РассчитатьИтоговыеПоказатели();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьМаршрутныйЛист(МаршрутныйЛистОбъект, ИзмененныеДокументы, СозданныеДокументы, ДокументыСОшибками, ДокументИзменен)
	
	ОбновитьГрузыПоЗаказу = ИзмененыГрузыПоЗаказу
		Или Объект.СтруктураДокументаСтарая.СтоянкаПунктНазначения <> Объект.СтруктураДокументаНовая.СтоянкаПунктНазначения
		Или Объект.СтруктураДокументаСтарая.СтоянкаПунктОтправления <> Объект.СтруктураДокументаНовая.СтоянкаПунктОтправления;
	
	// Обновление реквизитов шапки Маршрутного листа
	Если ИзмененВидПеревозки
		И МаршрутныйЛистОбъект.ВидПеревозки <> Объект.СтруктураДокументаНовая.ВидПеревозки Тогда
		ДокументИзменен = Истина;
		МаршрутныйЛистОбъект.ВидПеревозки = Объект.СтруктураДокументаНовая.ВидПеревозки;
	КонецЕсли;
	Если ИзмененМаршрут 
		И МаршрутныйЛистОбъект.Маршрут <> Объект.СтруктураДокументаНовая.Маршрут Тогда
		ДокументИзменен = Истина;
		МаршрутныйЛистОбъект.Маршрут = Объект.СтруктураДокументаНовая.Маршрут;
	КонецЕсли;
	Если ИзмененоНаправлениеПеревозки
		И МаршрутныйЛистОбъект.НаправлениеПеревозки <> Объект.СтруктураДокументаНовая.НаправлениеПеревозки Тогда
		ДокументИзменен = Истина;
		МаршрутныйЛистОбъект.НаправлениеПеревозки = Объект.СтруктураДокументаНовая.НаправлениеПеревозки;
	КонецЕсли;
	Если ИзмененОбъектСтроительства
		И МаршрутныйЛистОбъект.ОбъектСтроительства <> Объект.СтруктураДокументаНовая.ОбъектСтроительства Тогда
		ДокументИзменен = Истина;
		МаршрутныйЛистОбъект.ОбъектСтроительства = Объект.СтруктураДокументаНовая.ОбъектСтроительства;
	КонецЕсли;
	Если ИзмененаОрганизация
		И МаршрутныйЛистОбъект.Организация <> Объект.СтруктураДокументаНовая.Организация Тогда
		ДокументИзменен = Истина;
		МаршрутныйЛистОбъект.Организация = Объект.СтруктураДокументаНовая.Организация;
	КонецЕсли;
	Если ИзмененоПодразделение
		И МаршрутныйЛистОбъект.Подразделение <> Объект.СтруктураДокументаНовая.Подразделение Тогда
		ДокументИзменен = Истина;
		МаршрутныйЛистОбъект.Подразделение = Объект.СтруктураДокументаНовая.Подразделение;
	КонецЕсли;
	
	Если ОперацияЗаменитьПеревозчика Тогда
		ДокументИзменен = Истина;
		МаршрутныйЛистОбъект.ПринадлежностьПеревозки = ПринадлежностьПеревозки;
		МаршрутныйЛистОбъект.Контрагент = Перевозчик;
		МаршрутныйЛистОбъект.ДоговорКонтрагента = ДоговорКонтрагента;
		Если МаршрутныйЛистОбъект.ТС <> ТС Тогда
			МаршрутныйЛистОбъект.ТС = ТС;
			МаршрутныйЛистОбъект.Прицеп1 = Справочники.уатТС.ПустаяСсылка();
			МаршрутныйЛистОбъект.Прицеп2 = Справочники.уатТС.ПустаяСсылка();
		КонецЕсли;
		Если МаршрутныйЛистОбъект.Водитель1 <> Водитель1 Тогда
			МаршрутныйЛистОбъект.Водитель1 = Водитель1;
			МаршрутныйЛистОбъект.Водитель2 = Неопределено;
			МаршрутныйЛистОбъект.Сотрудник1 = Неопределено;
			МаршрутныйЛистОбъект.Сотрудник2 = Неопределено;
		КонецЕсли;
	КонецЕсли;
	
	// Обновление вкладки "Маршрут"
	ПараметрыОбновления = Новый Структура("ОбновитьГрузы", ОбновитьГрузыПоЗаказу);
	Если ИзмененФлагFTL Тогда
		
		СтруктураОтбора = Новый Структура("ЗаказГрузоотправителя", ЗаказСсылка);
		СтрокиМаршрута = МаршрутныйЛистОбъект.Заказы.НайтиСтроки(СтруктураОтбора);
		Если СтрокиМаршрута.Количество() = МаршрутныйЛистОбъект.Заказы.Количество() Тогда
			// Обновляются данные по Заказу на ТС в Маршрутном листе
			ДокументИзменен = Истина;
			ПараметрыОбновления.Вставить("флНетИзмененийПунктов", Ложь);
			ПараметрыОбновления.Вставить("флИзмененТолькоПунктРазгрузки", Ложь);
			МаршрутныйЛистОбъект.ОбновитьДанныеПоЗаказуНаТС(ЗаказСсылка, ПараметрыОбновления);
		Иначе
			// Заказ на ТС удаляется из старого Маршрутного листа, создается новый Маршрутный лист для этого заказа
			// Флаг ДокументИзменен не устанавливается, т.к. Маршрутный лист требуется записать сразу
			Для Каждого ТекСтрокаМаршрута Из СтрокиМаршрута Цикл
				МаршрутныйЛистОбъект.Заказы.Удалить(ТекСтрокаМаршрута);
			КонецЦикла;
			ЗаписатьИзмененияДокумента(МаршрутныйЛистОбъект, ИзмененныеДокументы, СозданныеДокументы, ДокументыСОшибками);
			ДокументИзменен = Ложь;
			
			НовыйМаршрутныйЛист = Документы.уатМаршрутныйЛист.СоздатьДокумент();
			НовыйМаршрутныйЛист.Заполнить(ЗаказСсылка);
			ЗаписатьИзмененияДокумента(НовыйМаршрутныйЛист, ИзмененныеДокументы, СозданныеДокументы, ДокументыСОшибками);
			
			ТекстНСтр = СтрШаблон(НСтр("ru='Создан %1. Перевозчика, ТС и водителя требуется заполнить вручную.'"), НовыйМаршрутныйЛист.Ссылка);
			ОбщегоНазначения.СообщитьПользователю(ТекстНСтр);
		КонецЕсли;
		
	ИначеЕсли ИзмененПунктПогрузки Тогда
		// При изменении пункта погрузки для обычного заказа
		// происходит удаление всех пунктов по данному заказу из Маршрутного листа
		// и повторное размещение в конце Маршрутного листа.
		ДокументИзменен = Истина;
		ПараметрыОбновления.Вставить("флНетИзмененийПунктов", Ложь);
		ПараметрыОбновления.Вставить("флИзмененТолькоПунктРазгрузки", Ложь);
		МаршрутныйЛистОбъект.ОбновитьДанныеПоЗаказуНаТС(ЗаказСсылка, ПараметрыОбновления);
	ИначеЕсли ИзмененыПунктыFTLЗаказа Тогда
		// Строки, связанные с FTL заказом, удаляются из Маршрутного листа, и добавляются заново, в конец документа
		ДокументИзменен = Истина;
		ПараметрыОбновления.Вставить("флНетИзмененийПунктов", Ложь);
		ПараметрыОбновления.Вставить("флИзмененТолькоПунктРазгрузки", Ложь);
		МаршрутныйЛистОбъект.ОбновитьДанныеПоЗаказуНаТС(ЗаказСсылка, ПараметрыОбновления);
	ИначеЕсли ИзмененПунктРазгрузки
		И Не ИзмененПунктПогрузки Тогда
		// При изменении пункта разгрузки для обычного заказа
		// пункт погрузки остаётся на месте, а пункт разгрузки удаляется и повторно размещается в конце Маршрутного листа.
		ДокументИзменен = Истина;
		ПараметрыОбновления.Вставить("флНетИзмененийПунктов", Ложь);
		ПараметрыОбновления.Вставить("флИзмененТолькоПунктРазгрузки", Истина);
		МаршрутныйЛистОбъект.ОбновитьДанныеПоЗаказуНаТС(ЗаказСсылка, ПараметрыОбновления);
	ИначеЕсли ОбновитьГрузыПоЗаказу Тогда
		ДокументИзменен = Истина;
		ПараметрыОбновления.Вставить("флНетИзмененийПунктов", Истина);
		ПараметрыОбновления.Вставить("флИзмененТолькоПунктРазгрузки", Истина);
		МаршрутныйЛистОбъект.ОбновитьДанныеПоЗаказуНаТС(ЗаказСсылка, ПараметрыОбновления);
	КонецЕсли;
	
	Если ПараметрыОбновления.Свойство("флНетИзмененийПунктов") И ПараметрыОбновления.флНетИзмененийПунктов = Ложь Тогда
		МаршрутныйЛистОбъект.ОбновитьВремяРасстояниеМеждуПунктами(Истина);
		Если МаршрутныйЛистОбъект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя") Тогда 
			ПересчитатьПлановоеВремя(МаршрутныйЛистОбъект);
		КонецЕсли;
	КонецЕсли;
	
	Если ОперацияОтменитьГрузыВМаршрутныхЛистах
		Или ОперацияУдалитьГрузыВМаршрутныхЛистах Тогда
		
		// Удаление отмеченных грузов из старого Маршрутного листа
		СтруктураОтбора = Новый Структура("ЗаказГрузоотправителя", ЗаказСсылка);
		СтрокиМаршрута = МаршрутныйЛистОбъект.Заказы.НайтиСтроки(СтруктураОтбора);
		УдаляемыеСтроки = Новый Массив;
		Для Каждого ТекСтрокаМаршрута Из СтрокиМаршрута Цикл
			Если ДетализацияЗаказа = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам Тогда
				СтруктураОтбораГрузов = Новый Структура("Выбран, ГрузовоеМесто", Истина, ТекСтрокаМаршрута.Номенклатура);
				НайденныеСтроки = Объект.ГрузовойСостав.НайтиСтроки(СтруктураОтбораГрузов);
				Если НайденныеСтроки.Количество() > 0 Тогда
					УдаляемыеСтроки.Добавить(ТекСтрокаМаршрута);
				КонецЕсли;
			ИначеЕсли ДетализацияЗаказа = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам Тогда
				СтруктураОтбораГрузов = Новый Структура("Выбран, Номенклатура", Истина, ТекСтрокаМаршрута.Номенклатура);
				НайденныеСтроки = Объект.Товары.НайтиСтроки(СтруктураОтбораГрузов);
				Если НайденныеСтроки.Количество() > 0 Тогда
					УдаляемыеСтроки.Добавить(ТекСтрокаМаршрута);
				КонецЕсли;
			Иначе
				УдаляемыеСтроки.Добавить(ТекСтрокаМаршрута);
			КонецЕсли;
		КонецЦикла;
		Если УдаляемыеСтроки.Количество() > 0 Тогда
			Для Каждого ТекСтрокаМаршрута Из УдаляемыеСтроки Цикл
				Если ОперацияОтменитьГрузыВМаршрутныхЛистах Тогда
					ТекСтрокаМаршрута.ПричинаЗакрытияЗаказа = Справочники.уатПричиныЗакрытияЗаказов.Отклонен;
				Иначе
					МаршрутныйЛистОбъект.Заказы.Удалить(ТекСтрокаМаршрута);
				КонецЕсли;
			КонецЦикла;
			ЗаписатьИзмененияДокумента(МаршрутныйЛистОбъект, ИзмененныеДокументы, СозданныеДокументы, ДокументыСОшибками);
			ДокументИзменен = Ложь;
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьОперациюСГрузом(ДокументОбъект, ИзмененныеДокументы, СозданныеДокументы, ДокументыСОшибками, ДокументИзменен)
	
	Если ИзмененаОрганизация
		И ДокументОбъект.Организация <> Объект.СтруктураДокументаНовая.Организация Тогда
		ДокументИзменен = Истина;
		ДокументОбъект.Организация = Объект.СтруктураДокументаНовая.Организация;
	КонецЕсли;
	
	Если ИзмененКонтрагент Тогда
		ДокументИзменен = Истина;
		ДокументОбъект.Контрагент = Объект.СтруктураДокументаНовая.Контрагент;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьПоступлениеТоваровУслуг(ДокументОбъект, ИзмененныеДокументы, СозданныеДокументы, ДокументИзменен)
	
	Если ИзмененаОрганизация Тогда
		ДокументИзменен = Истина;
		ДокументОбъект.Организация = Объект.СтруктураДокументаНовая.Организация;
	КонецЕсли;
	Если ИзмененоПодразделение Тогда
		ДокументИзменен = Истина;
		ДокументОбъект.Подразделение = Объект.СтруктураДокументаНовая.Подразделение;
	КонецЕсли;
	
	Если ИзмененыУслуги И ДокументОбъект.ДокументОснование = ЗаказСсылка Тогда
		
		ДокументИзменен = Истина;
		
		ДанныеЗаполнения = Новый Структура();
		ДанныеЗаполнения.Вставить("флВыбратьКонтрагента", Истина);
		ДанныеЗаполнения.Вставить("Основание", ЗаказСсылка);
		ДанныеЗаполнения.Вставить("Расходы", ЗаказСсылка.Расходы);
		
		уатОбщегоНазначения.ОбработкаЗаполненияФормаВыборКонтрагента(ДанныеЗаполнения, ДокументОбъект.ДополнительныеСвойства);
		НайденныеСтроки = ДокументОбъект.Услуги.НайтиСтроки(Новый Структура("ЗаказНаТС", ЗаказСсылка));
		Для Каждого ТекСтрока Из НайденныеСтроки Цикл
			ДокументОбъект.Услуги.Удалить(ТекСтрока);
		КонецЦикла;
		
		Если ДокументОбъект.ДополнительныеСвойства.Свойство("мсвТаблицаУслуги") Тогда
			ТаблицаУслуги = ДокументОбъект.ДополнительныеСвойства.мсвТаблицаУслуги;
		Иначе
			ТаблицаУслуги = ДокументОбъект.ДополнительныеСвойства.ТаблицаУслуги;
		КонецЕсли;
		ПараметрыОтбора = Новый Структура("Контрагент, Договор", ДокументОбъект.Контрагент, ДокументОбъект.ДоговорКонтрагента);
		ТаблицаУслугиСОтбором = ТаблицаУслуги.Скопировать(ПараметрыОтбора);
		
		ДокументОбъект.ОбработкаЗаполненияМЛЗГДобавитьСтрокиУслуг(ТаблицаУслугиСОтбором);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьПутевойЛист(ПутевойЛистОбъект, ИзмененныеДокументы, СозданныеДокументы, ДокументИзменен)
	
	Если ОперацияЗаменитьПеревозчика И ПринадлежностьПеревозки = Перечисления.уатПринадлежностьТС.Собственное Тогда
		Если ПутевойЛистОбъект.ТранспортноеСредство <> ТС Тогда
			ДокументИзменен = Истина;
			ПутевойЛистОбъект.ТранспортноеСредство = ТС;
			Гараж = ТС.Гараж;
			ВидСообщения = ТС.ОсновнойВидСообщения;
			ПутевойЛистОбъект.Прицепы.Очистить();
			Если ЗначениеЗаполнено(ТС.Подразделение) Тогда
				ПутевойЛистОбъект.Подразделение = ТС.Подразделение;
			КонецЕсли;
		КонецЕсли;
		Если ПутевойЛистОбъект.Водитель1 <> Водитель1 Тогда
			ДокументИзменен = Истина;
			ПутевойЛистОбъект.Водитель1 = Водитель1;
			ПутевойЛистОбъект.Водитель2 = Неопределено;
			ПутевойЛистОбъект.Водитель2Стажер = Ложь;
			ПутевойЛистОбъект.Сотрудник1 = Неопределено;
			ПутевойЛистОбъект.Сотрудник1Стажер = Ложь;
			ПутевойЛистОбъект.Сотрудник2 = Неопределено;
			ПутевойЛистОбъект.Сотрудник2Стажер = Ложь;
		КонецЕсли;
		Если ПутевойЛистОбъект.Организация <> Перевозчик Тогда
			ДокументИзменен = Истина;
			ПутевойЛистОбъект.Организация = Перевозчик;
		КонецЕсли;
	КонецЕсли;
	
	// Изменение реквизитов шапки Путевого листа
	Если ИзмененВидПеревозки Тогда
		ДокументИзменен = Истина;
		ПутевойЛистОбъект.ВидПеревозки = Объект.СтруктураДокументаНовая.ВидПеревозки;
	КонецЕсли;
	
	Если ИзмененОбъектСтроительства Тогда
		ДокументИзменен = Истина;
		ПутевойЛистОбъект.ОбъектСтроительства = Объект.СтруктураДокументаНовая.ОбъектСтроительства;
	КонецЕсли;
	
	// Изменение ТЧ "Задание"
	НайденныеСтроки = ПутевойЛистОбъект.Задание.НайтиСтроки(Новый Структура("ЗаказНаТС", ЗаказСсылка));
	Если НайденныеСтроки.Количество() > 0 Тогда
		// Заказ на ТС используется в строках Задания Путевого листа
		СтрокиЗаданияПоЗаказу = НайденныеСтроки;
	Иначе
		// Путевой лист создан на основании Заказа на ТС. Считаем, что все строки связаны с Заказом на ТС.
		СтрокиЗаданияПоЗаказу = ПутевойЛистОбъект.Задание;
	КонецЕсли;
	Если ИзмененыГрузыПоЗаказу Тогда
		
		// Перезаполнение ТЧ "Задание"
		ДокументИзменен = Истина;
		
		// Заполнение Задания по МЛ или Заказу
		Если ЗначениеЗаполнено(ПутевойЛистОбъект.ДокументОснование)
			И ТипЗнч(ПутевойЛистОбъект.ДокументОснование) = Тип("ДокументСсылка.уатМаршрутныйЛист") Тогда
			// Удаление всех строк ПЛ, т.к. они все связаны с Маршрутным листом
			Для Каждого ТекСтрока Из ПутевойЛистОбъект.Задание Цикл
				ПутевойЛистОбъект.Задание.Удалить(ТекСтрока);
			КонецЦикла;
			уатПутевыеЛисты.ЗаполнитьЗаданиеПоДаннымМЛ(ПутевойЛистОбъект, ПутевойЛистОбъект.ДокументОснование);
		Иначе
			// Удаление старых строк, связанных с Заказом на ТС
			Для Каждого ТекСтрока Из СтрокиЗаданияПоЗаказу Цикл
				ПутевойЛистОбъект.Задание.Удалить(ТекСтрока);
			КонецЦикла;
			Если Не ЗаказСсылка.ПометкаУдаления Тогда
				уатПутевыеЛисты.ЗаполнитьЗаданиеПоЗаказам(ЗаказСсылка, ПутевойЛистОбъект);
			КонецЕсли;
		КонецЕсли;
		
	Иначе
		
		// Точечное изменение ТЧ "Задание"
		Если ИзмененВидПеревозки Тогда
			ДокументИзменен = Истина;
			Для Каждого ТекСтрока Из СтрокиЗаданияПоЗаказу Цикл
				ТекСтрока.ВидПеревозки = Объект.СтруктураДокументаНовая.ВидПеревозки;
			КонецЦикла;
		КонецЕсли;
			
		Если ИзмененОбъектСтроительства Тогда
			ДокументИзменен = Истина;
			Для Каждого ТекСтрока Из СтрокиЗаданияПоЗаказу Цикл
				ТекСтрока.ОбъектСтроительства = Объект.СтруктураДокументаНовая.ОбъектСтроительства;
			КонецЦикла;
		КонецЕсли;
		
		Если ИзмененоНаправлениеПеревозки Тогда
			ДокументИзменен = Истина;
			Для Каждого ТекСтрока Из СтрокиЗаданияПоЗаказу Цикл
				ТекСтрока.НаправлениеПеревозки = Объект.СтруктураДокументаНовая.НаправлениеПеревозки;
			КонецЦикла;
		КонецЕсли;
		
		Если ИзмененМаршрут Тогда
			ДокументИзменен = Истина;
			Для Каждого ТекСтрока Из СтрокиЗаданияПоЗаказу Цикл
				ТекСтрока.Маршрут = Объект.СтруктураДокументаНовая.Маршрут;
			КонецЦикла;
		КонецЕсли;
		
		Если ИзмененоПодразделение Тогда
			ДокументИзменен = Истина;
			Для Каждого ТекСтрока Из СтрокиЗаданияПоЗаказу Цикл
				ТекСтрока.Подразделение = Объект.СтруктураДокументаНовая.Подразделение;
			КонецЦикла;
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьРеализациюУслуг(ДокументОбъект, ИзмененныеДокументы, СозданныеДокументы, ДокументИзменен)
	Если ИзмененаОрганизация Тогда
		ДокументИзменен = Истина;
		ДокументОбъект.Организация = Объект.СтруктураДокументаНовая.Организация;
	КонецЕсли;
	Если ИзмененоПодразделение Тогда
		ДокументИзменен = Истина;
		ДокументОбъект.Подразделение = Объект.СтруктураДокументаНовая.Подразделение;
	КонецЕсли;
	Если ИзмененКонтрагент Тогда
		ДокументИзменен = Истина;
		ДокументОбъект.Контрагент = Объект.СтруктураДокументаНовая.Контрагент;
	КонецЕсли;
	Если ИзмененДоговор Тогда
		ДокументИзменен = Истина;
		ДокументОбъект.ДоговорКонтрагента = Объект.СтруктураДокументаНовая.ДоговорКонтрагента;
	КонецЕсли;
	
	Если ИзмененыУслуги И ДокументОбъект.ДокументОснование = ЗаказСсылка Тогда
		
		ДокументИзменен = Истина;
		
		НайденныеСтроки = ДокументОбъект.Услуги.НайтиСтроки(Новый Структура("Заказ", ЗаказСсылка));
		Для Каждого ТекСтрока Из НайденныеСтроки Цикл
			ДокументОбъект.Услуги.Удалить(ТекСтрока);
		КонецЦикла;
		
		ТаблицаУслуги = ЗаказСсылка.Услуги.Выгрузить();
		ДокументОбъект.ОбработкаЗаполненияЗГДобавитьСтрокиУслуг(ТаблицаУслуги);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьРекламацию(ДокументОбъект, ИзмененныеДокументы, СозданныеДокументы, ДокументИзменен)
	
	Если ИзмененаОрганизация
		И ДокументОбъект.Организация <> Объект.СтруктураДокументаНовая.Организация Тогда
		ДокументИзменен = Истина;
		ДокументОбъект.Организация = Объект.СтруктураДокументаНовая.Организация;
	КонецЕсли;
	
	Если ИзмененоПодразделение
		И ДокументОбъект.Подразделение <> Объект.СтруктураДокументаНовая.Подразделение Тогда
		ДокументИзменен = Истина;
		ДокументОбъект.Подразделение = Объект.СтруктураДокументаНовая.Подразделение;
	КонецЕсли;
	
	Если ИзмененКонтрагент Тогда
		ДокументИзменен = Истина;
		ДокументОбъект.Контрагент = Объект.СтруктураДокументаНовая.Контрагент;
		Если ТипЗнч(ДокументОбъект.Контрагент) = Тип("СправочникСсылка.ПодразделенияОрганизаций") Тогда
			ДокументОбъект.ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
	Если ИзмененДоговор Тогда
		ДокументИзменен = Истина;
		ДокументОбъект.ДоговорКонтрагента = Объект.СтруктураДокументаНовая.ДоговорКонтрагента;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьСтраховойСертификат(ДокументОбъект, ИзмененныеДокументы, СозданныеДокументы, ДокументИзменен)
	
	Если ИзмененаОрганизация
		И ДокументОбъект.Организация <> Объект.СтруктураДокументаНовая.Организация Тогда
		ДокументИзменен = Истина;
		ДокументОбъект.Организация = Объект.СтруктураДокументаНовая.Организация;
	КонецЕсли;
	
	Если ИзмененоПодразделение
		И ДокументОбъект.Подразделение <> Объект.СтруктураДокументаНовая.Подразделение Тогда
		ДокументИзменен = Истина;
		ДокументОбъект.Подразделение = Объект.СтруктураДокументаНовая.Подразделение;
	КонецЕсли;
	
	Если ИзмененыГрузыПоЗаказу Тогда
		ДокументИзменен = Истина;
		НайденныеСтроки = ДокументОбъект.Грузы.НайтиСтроки(Новый Структура("ЗаказНаТС", ЗаказСсылка));
		Для Каждого ТекСтрока Из НайденныеСтроки Цикл
			ДокументОбъект.Грузы.Удалить(ТекСтрока);
		КонецЦикла;
		ДокументОбъект.ЗаполнитьГрузыПоЗаказуНаТС(ЗаказСсылка);
	КонецЕсли;
	
	Если ИзмененыГрузыПоЗаказу Тогда
		ДокументИзменен = Истина;
		ДокументОбъект.РассчитатьИтоговыеПоказатели();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьСчетНаОплатуПокупателю(ДокументОбъект, ИзмененныеДокументы, СозданныеДокументы, ДокументИзменен)
	
	Если ИзмененаОрганизация Тогда
		ДокументИзменен = Истина;
		ДокументОбъект.Организация = Объект.СтруктураДокументаНовая.Организация;
	КонецЕсли;
	Если ИзмененКонтрагент Тогда
		ДокументИзменен = Истина;
		ДокументОбъект.Контрагент = Объект.СтруктураДокументаНовая.Контрагент;
	КонецЕсли;
	Если ИзмененДоговор Тогда
		ДокументИзменен = Истина;
		ДокументОбъект.ДоговорКонтрагента = Объект.СтруктураДокументаНовая.ДоговорКонтрагента;
	КонецЕсли;
	
	Если ИзмененыУслуги И ДокументОбъект.ДокументОснование = ЗаказСсылка Тогда
		
		ДокументИзменен = Истина;
		
		НайденныеСтроки = ДокументОбъект.Услуги.НайтиСтроки(Новый Структура("Заказ", ЗаказСсылка));
		Для Каждого ТекСтрока Из НайденныеСтроки Цикл
			ДокументОбъект.Услуги.Удалить(ТекСтрока);
		КонецЦикла;
		
		ТаблицаУслуги = ЗаказСсылка.Услуги.Выгрузить();
		ДокументОбъект.ОбработкаЗаполненияЗГДобавитьСтрокиУслуг(ТаблицаУслуги);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьСчетНаОплатуПоставщика(ДокументОбъект, ИзмененныеДокументы, СозданныеДокументы, ДокументИзменен)
	
	Если ИзмененаОрганизация Тогда
		ДокументИзменен = Истина;
		ДокументОбъект.Организация = Объект.СтруктураДокументаНовая.Организация;
	КонецЕсли;
	
	Если ИзмененыУслуги И ДокументОбъект.ДокументОснование = ЗаказСсылка Тогда
		
		ДокументИзменен = Истина;
		
		ДанныеЗаполнения = Новый Структура();
		ДанныеЗаполнения.Вставить("флВыбратьКонтрагента", Истина);
		ДанныеЗаполнения.Вставить("Основание", ЗаказСсылка);
		ДанныеЗаполнения.Вставить("Расходы", ЗаказСсылка.Расходы);
		
		уатОбщегоНазначения.ОбработкаЗаполненияФормаВыборКонтрагента(ДанныеЗаполнения, ДокументОбъект.ДополнительныеСвойства);
		НайденныеСтроки = ДокументОбъект.Услуги.НайтиСтроки(Новый Структура("ЗаказНаТС", ЗаказСсылка));
		Для Каждого ТекСтрока Из НайденныеСтроки Цикл
			ДокументОбъект.Услуги.Удалить(ТекСтрока);
		КонецЦикла;
		
		Если ДокументОбъект.ДополнительныеСвойства.Свойство("мсвТаблицаУслуги") Тогда
			ТаблицаУслуги = ДокументОбъект.ДополнительныеСвойства.мсвТаблицаУслуги;
		Иначе
			ТаблицаУслуги = ДокументОбъект.ДополнительныеСвойства.ТаблицаУслуги;
		КонецЕсли;
		ПараметрыОтбора = Новый Структура("Контрагент, Договор", ДокументОбъект.Контрагент, ДокументОбъект.ДоговорКонтрагента);
		ТаблицаУслугиСОтбором = ТаблицаУслуги.Скопировать(ПараметрыОтбора);
		
		ДокументОбъект.ОбработкаЗаполненияМЛЗГДобавитьСтрокиУслуг(ТаблицаУслугиСОтбором);
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьТендер(ДокументОбъект, ИзмененныеДокументы, СозданныеДокументы, ДокументИзменен)
	
	Если ИзмененаОрганизация
		И ДокументОбъект.Организация <> Объект.СтруктураДокументаНовая.Организация Тогда
		ДокументИзменен = Истина;
		ДокументОбъект.Организация = Объект.СтруктураДокументаНовая.Организация;
	КонецЕсли;
	
	Если ИзмененоПодразделение
		И ДокументОбъект.Подразделение <> Объект.СтруктураДокументаНовая.Подразделение Тогда
		ДокументИзменен = Истина;
		ДокументОбъект.Подразделение = Объект.СтруктураДокументаНовая.Подразделение;
	КонецЕсли;
	
	Если ИзмененыГрузыПоЗаказу Тогда
		ДокументИзменен = Истина;
		НайденныеСтроки = ДокументОбъект.Грузы.НайтиСтроки(Новый Структура("Заказ", ЗаказСсылка));
		Для Каждого ТекСтрока Из НайденныеСтроки Цикл
			ДокументОбъект.Грузы.Удалить(ТекСтрока);
		КонецЦикла;
		ДокументОбъект.ЗаполнитьГрузыПоЗаказуНаТС(ЗаказСсылка);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ИзменитьТТД(ТТДОбъект, ИзмененныеДокументы, СозданныеДокументы, ДокументИзменен)
	
	Если ОперацияЗаменитьПеревозчика Тогда
		Если ТТДОбъект.Водитель <> Водитель1 Тогда
			ДокументИзменен = Истина;
			ТТДОбъект.Водитель = Водитель1;
		КонецЕсли;
		Если ТТДОбъект.Организация <> Перевозчик Тогда
			ДокументИзменен = Истина;
			ТТДОбъект.Организация = Перевозчик;
		КонецЕсли;
		Если ЗначениеЗаполнено(ТС.Подразделение) И ТТДОбъект.Подразделение <> ТС.Подразделение Тогда
			ТТДОбъект.Подразделение = ТС.Подразделение;
		КонецЕсли;
	КонецЕсли;
	
	Если ИзмененКонтрагент Тогда
		ДокументИзменен = Истина;
		ТТДОбъект.Контрагент = Объект.СтруктураДокументаНовая.Контрагент;
	КонецЕсли;
	Если ИзмененДоговор Тогда
		ДокументИзменен = Истина;
		ТТДОбъект.ДоговорКонтрагента = Объект.СтруктураДокументаНовая.ДоговорКонтрагента;
	КонецЕсли;
	
	Если ТТДОбъект.ВидОперации = Перечисления.уатВидыОперацийТТД.ПоМаршрутномуЛистуИЗаказу Тогда
		// Заказ указывается в шапке документа, поэтому строки, связанные с заказом - это все строки ТЧ Выработка
		
		Если ИзмененыГрузыПоЗаказу Тогда
			
			ДокументИзменен = Истина;
			
			// Изменение грузов для пары Заказ-МЛ вызывает перезаполнение ТЧ "Выработка" и "Грузы"
			ТТДОбъект.ЗаполнениеВыработкиЗаказМЛ(ЗаказСсылка, ТТДОбъект.МаршрутныйЛист);
			ТТДОбъект.ЗаполнениеТоваровЗаказМЛ(ЗаказСсылка, ТТДОбъект.МаршрутныйЛист);
			
		Иначе
			
			// Точечное изменение ТЧ "Выработка"
			Если ИзмененМаршрут Тогда
				ДокументИзменен = Истина;
				Для Каждого ТекСтрока Из ТТДОбъект.Выработка Цикл
					ТекСтрока.Маршрут = Объект.СтруктураДокументаНовая.Маршрут;
				КонецЦикла;
			КонецЕсли;
			
			Если ИзмененоНаправлениеПеревозки Тогда
				ДокументИзменен = Истина;
				Для Каждого ТекСтрока Из ТТДОбъект.Выработка Цикл
					ТекСтрока.НаправлениеПеревозки = Объект.СтруктураДокументаНовая.НаправлениеПеревозки;
				КонецЦикла;
			КонецЕсли;
			
			Если ИзмененОбъектСтроительства Тогда
				ДокументИзменен = Истина;
				Для Каждого ТекСтрока Из ТТДОбъект.Выработка Цикл
					ТекСтрока.ОбъектСтроительства = Объект.СтруктураДокументаНовая.ОбъектСтроительства;
				КонецЦикла;
			КонецЕсли;
			
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

&НаСервере
Процедура ОбновитьСвязанныеДокументыНаСервере()
	
	ИзменяемыеРедакторомТипыДокументов = Новый Массив();
	
	// Основные типы документов
	ИзменяемыеРедакторомТипыДокументов.Добавить(Тип("ДокументСсылка.уатЗаказГрузоотправителя"));
	ИзменяемыеРедакторомТипыДокументов.Добавить(Тип("ДокументСсылка.уатМаршрутныйЛист"));
	ИзменяемыеРедакторомТипыДокументов.Добавить(Тип("ДокументСсылка.уатПутевойЛист"));
	ИзменяемыеРедакторомТипыДокументов.Добавить(Тип("ДокументСсылка.уатТТД"));
	
	// Логистические документы
	ИзменяемыеРедакторомТипыДокументов.Добавить(Тип("ДокументСсылка.уатЗаказПеревозчику_уэ"));
	ИзменяемыеРедакторомТипыДокументов.Добавить(Тип("ДокументСсылка.уатДоверенность"));
	Если ЭтоКОРП Тогда
		ИзменяемыеРедакторомТипыДокументов.Добавить(Тип("ДокументСсылка.уатАктОтгрузки_уэ"));
		ИзменяемыеРедакторомТипыДокументов.Добавить(Тип("ДокументСсылка.уатАктПриемки_уэ"));
		ИзменяемыеРедакторомТипыДокументов.Добавить(Тип("ДокументСсылка.уатОперацияСГрузом_уэ"));
		ИзменяемыеРедакторомТипыДокументов.Добавить(Тип("ДокументСсылка.уатРекламация_уэ"));
		ИзменяемыеРедакторомТипыДокументов.Добавить(Тип("ДокументСсылка.уатСтраховойСертификат_уэ"));
		ИзменяемыеРедакторомТипыДокументов.Добавить(Тип("ДокументСсылка.уатТендер_уэ"));
	КонецЕсли;
	
	// Документы по взаиморасчетам
	ИзменяемыеРедакторомТипыДокументов.Добавить(Тип("ДокументСсылка.уатПоступлениеТоваровУслуг"));
	ИзменяемыеРедакторомТипыДокументов.Добавить(Тип("ДокументСсылка.уатРеализацияУслуг"));
	ИзменяемыеРедакторомТипыДокументов.Добавить(Тип("ДокументСсылка.уатСчетНаОплатуПокупателю"));
	ИзменяемыеРедакторомТипыДокументов.Добавить(Тип("ДокументСсылка.уатСчетНаОплатуПоставщика"));
	
	СвязанныеДокументы.ПолучитьЭлементы().Очистить();
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СвязанныеДокументы.Ссылка КАК СвязанныйДокумент,
	|	ТИПЗНАЧЕНИЯ(СвязанныеДокументы.Ссылка) КАК ТипДокумента,
	|	ВЫБОР
	|		%1
	|		КОГДА СвязанныеДокументы.Ссылка ССЫЛКА Документ.уатЗаказПеревозчику_уэ
	|			ТОГДА ВЫРАЗИТЬ(СвязанныеДокументы.Ссылка КАК Документ.уатЗаказПеревозчику_уэ).СтатусВыполнения
	|		КОГДА СвязанныеДокументы.Ссылка ССЫЛКА Документ.уатМаршрутныйЛист
	|			ТОГДА ВЫРАЗИТЬ(СвязанныеДокументы.Ссылка КАК Документ.уатМаршрутныйЛист).Статус
	|		КОГДА СвязанныеДокументы.Ссылка ССЫЛКА Документ.уатПутевойЛист
	|			ТОГДА ВЫБОР
	|					КОГДА ВЫРАЗИТЬ(СвязанныеДокументы.Ссылка КАК Документ.уатПутевойЛист).Рассчитан
	|						ТОГДА ""Рассчитан""
	|					ИНАЧЕ ""Не рассчитан""
	|				КОНЕЦ
	|		ИНАЧЕ """"
	|	КОНЕЦ КАК Статус,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЕСТЬNULL(уатСтатусыГрузов_уэСрезПоследних.Статус, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый))) > 1
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Составной)
	|		ИНАЧЕ МАКСИМУМ(ЕСТЬNULL(уатСтатусыГрузов_уэСрезПоследних.Статус, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый)))
	|	КОНЕЦ КАК СтатусЗаказа
	|ПОМЕСТИТЬ втСвязанныеДокументы
	|ИЗ
	|	КритерийОтбора.СвязанныеДокументы(&Ссылка) КАК СвязанныеДокументы
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатСтатусыГрузов_уэ.СрезПоследних КАК уатСтатусыГрузов_уэСрезПоследних
	|		ПО ((ВЫРАЗИТЬ(СвязанныеДокументы.Ссылка КАК Документ.уатЗаказГрузоотправителя)) = уатСтатусыГрузов_уэСрезПоследних.Заказ)
	|ГДЕ
	|	СвязанныеДокументы.Ссылка.ПометкаУдаления = ЛОЖЬ
	|	И НЕ СвязанныеДокументы.Ссылка.Проведен ЕСТЬ NULL
	|
	|СГРУППИРОВАТЬ ПО
	|	СвязанныеДокументы.Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСвязанныеДокументы.СвязанныйДокумент КАК СвязанныйДокумент,
	|	втСвязанныеДокументы.ТипДокумента КАК ТипДокумента,
	|	ВЫБОР
	|		КОГДА ТИПЗНАЧЕНИЯ(втСвязанныеДокументы.СвязанныйДокумент) = ТИП(Документ.уатЗаказГрузоотправителя)
	|			ТОГДА втСвязанныеДокументы.СтатусЗаказа
	|		ИНАЧЕ втСвязанныеДокументы.Статус
	|	КОНЕЦ КАК Статус
	|ПОМЕСТИТЬ втСвязанныеДокументыСоСтатусами
	|ИЗ
	|	втСвязанныеДокументы КАК втСвязанныеДокументы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втСвязанныеДокументыСоСтатусами.СвязанныйДокумент КАК Документ,
	|	втСвязанныеДокументыСоСтатусами.ТипДокумента КАК ТипДокумента,
	|	втСвязанныеДокументыСоСтатусами.Статус КАК Статус
	|ИЗ
	|	втСвязанныеДокументыСоСтатусами КАК втСвязанныеДокументыСоСтатусами
	|
	|УПОРЯДОЧИТЬ ПО
	|	ТипДокумента,
	|	Документ
	|ИТОГИ ПО
	|	ТипДокумента";
	Если ЭтоКОРП Тогда
		Запрос.Текст = СтрШаблон(Запрос.Текст, "КОГДА СвязанныеДокументы.Ссылка ССЫЛКА Документ.уатАктОтгрузки_уэ
		|			ТОГДА ВЫРАЗИТЬ(СвязанныеДокументы.Ссылка КАК Документ.уатАктОтгрузки_уэ).СтатусВыполнения
		|		КОГДА СвязанныеДокументы.Ссылка ССЫЛКА Документ.уатАктПриемки_уэ
		|			ТОГДА ВЫРАЗИТЬ(СвязанныеДокументы.Ссылка КАК Документ.уатАктПриемки_уэ).СтатусВыполнения
		|		КОГДА СвязанныеДокументы.Ссылка ССЫЛКА Документ.уатОперацияСГрузом_уэ
		|			ТОГДА ВЫРАЗИТЬ(СвязанныеДокументы.Ссылка КАК Документ.уатОперацияСГрузом_уэ).СтатусВыполнения
		|		КОГДА СвязанныеДокументы.Ссылка ССЫЛКА Документ.уатСтраховойСертификат_уэ
		|			ТОГДА ВЫРАЗИТЬ(СвязанныеДокументы.Ссылка КАК Документ.уатСтраховойСертификат_уэ).Статус
		|		КОГДА СвязанныеДокументы.Ссылка ССЫЛКА Документ.уатТендер_уэ
		|			ТОГДА ВЫРАЗИТЬ(СвязанныеДокументы.Ссылка КАК Документ.уатТендер_уэ).СтатусТендера")
	Иначе
		Запрос.Текст = СтрШаблон(Запрос.Текст, "");
	КонецЕсли;
	Запрос.УстановитьПараметр("Ссылка", ЗаказСсылка);
	РезультатЗапроса = Запрос.Выполнить();
	Выборка = РезультатЗапроса.Выбрать(ОбходРезультатаЗапроса.ПоГруппировкам);
	Пока Выборка.Следующий() Цикл
		ЕстьПраваНаИзменение = ПравоДоступа("Изменение", Метаданные.НайтиПоТипу(Выборка.ТипДокумента));
		РазрешеноИзменениеРедактором = ИзменяемыеРедакторомТипыДокументов.Найти(Выборка.ТипДокумента) <> Неопределено;
		СтрокаТипДокумента = СвязанныеДокументы.ПолучитьЭлементы().Добавить();
		СтрокаТипДокумента.Документ = Выборка.ТипДокумента;
		СтрокаТипДокумента.НетПравНаИзменение = Не ЕстьПраваНаИзменение;
		СтрокаТипДокумента.РазрешеноИзменениеРедактором = РазрешеноИзменениеРедактором;
		СтрокаТипДокумента.РазрешеноИзменениеПоСтатусу = Истина;
		ВыборкаДетали = Выборка.Выбрать();
		Пока ВыборкаДетали.Следующий() Цикл
			Если Выборка.ТипДокумента = Тип("ДокументСсылка.уатЗаказГрузоотправителя") Тогда
				РазрешеноИзменениеПоСтатусу = ВыборкаДетали.Статус = Справочники.уатСтатусы_уэ.Открыт
					Или ВыборкаДетали.Статус = Справочники.уатСтатусы_уэ.Новый;
			Иначе
				РазрешеноИзменениеПоСтатусу = ЗапрещенныеДляИзмененияСтатусы.НайтиПоЗначению(ВыборкаДетали.Статус) = Неопределено;
			КонецЕсли;
			НоваяСтрока = СтрокаТипДокумента.ПолучитьЭлементы().Добавить();
			НоваяСтрока.Документ = ВыборкаДетали.Документ;
			НоваяСтрока.Статус = ВыборкаДетали.Статус;
			НоваяСтрока.НетПравНаИзменение = Не ЕстьПраваНаИзменение;
			НоваяСтрока.РазрешеноИзменениеРедактором = РазрешеноИзменениеРедактором;
			НоваяСтрока.РазрешеноИзменениеПоСтатусу = РазрешеноИзменениеПоСтатусу;
		КонецЦикла;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура ЗаполнитьТаблицыГрузов()
	
	Объект.Товары.Очистить();
	Объект.ГрузовойСостав.Очистить();
	
	Для Каждого ТекСтрока Из Объект.СтруктураДокументаНовая.ГрузовойСостав Цикл
		НоваяСтрока = Объект.ГрузовойСостав.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		НоваяСтрока.Выбран = Истина;
	КонецЦикла;
	
	Для Каждого ТекСтрока Из Объект.СтруктураДокументаНовая.Товары Цикл
		НоваяСтрока = Объект.Товары.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		НоваяСтрока.Выбран = Истина;
	КонецЦикла;
	
	Если Объект.СтруктураДокументаНовая.FTL Тогда
		Для Каждого ТекСтрока Из Объект.СтруктураДокументаНовая.ОтрезкиПути Цикл
			НоваяСтрока = Объект.ОтрезкиПути.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроставитьПометкиВниз(ТекРодитель)
	
	Если ТекРодитель.ПолучитьЭлементы().Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Для Каждого ТекУзел Из ТекРодитель.ПолучитьЭлементы() Цикл
		Если Не ТекУзел.НетПравНаИзменение
			И ТекУзел.РазрешеноИзменениеРедактором
			И ТекУзел.РазрешеноИзменениеПоСтатусу Тогда
			ТекУзел.Выбран = ТекРодитель.Выбран;
			ПроставитьПометкиВниз(ТекУзел);
		КонецЕсли;
	КонецЦикла;
	
	// Изменение пометки для родительского узла, у которого заблокирована часть потомков
	ВсеИстина = Истина;
	НеВсеЛожь = Ложь;
	Для Каждого ТекУзел Из ТекРодитель.ПолучитьЭлементы() Цикл
		ВсеИстина = ВсеИстина И (ТекУзел.Выбран = 1);
		НеВсеЛожь = НеВсеЛожь Или Булево(ТекУзел.Выбран);
	КонецЦикла;
	
	Если ВсеИстина Тогда
		ТекРодитель.Выбран = 1;
	ИначеЕсли НеВсеЛожь Тогда
		ТекРодитель.Выбран = 2;
	Иначе
		ТекРодитель.Выбран = 0;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПроставитьПометкиВверх(ТекЭлемент)
	
	ТекРодитель = ТекЭлемент.ПолучитьРодителя();
	Если ТекРодитель = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	// Возможные значения флага "Выбран":
	// 0 - не выбран
	// 1 - выбран
	// 2 - выбран частично (устанавливается для родительского узла программно в зависимости от значений потомков)
	
	ВсеИстина = Истина;
	НеВсеЛожь = Ложь;
	Для Каждого ТекУзел Из ТекРодитель.ПолучитьЭлементы() Цикл
		ВсеИстина = ВсеИстина И (ТекУзел.Выбран = 1);
		НеВсеЛожь = НеВсеЛожь Или Булево(ТекУзел.Выбран);
	КонецЦикла;
	
	Если ВсеИстина Тогда
		ТекРодитель.Выбран = 1;
	ИначеЕсли НеВсеЛожь Тогда
		ТекРодитель.Выбран = 2;
	Иначе
		ТекРодитель.Выбран = 0;
	КонецЕсли;
	
	ПроставитьПометкиВверх(ТекРодитель);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьУсловноеОформлениеСвязанныхДокументов()
	
	// Доступность флага "Выбран" по статусу документа
	ЭлементУсловногоОформления = ИнициализироватьЭлементУсловногоОформления();
	
	ЭлементУсловногоОформления.Представление = НСтр("ru='Доступность флага по статусу'");
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("Доступность", Ложь);
	
	ПолеОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("СвязанныеДокументыВыбран");
	ПолеОформления.Использование = Истина;
	
	// Цвет текста документа и статуса по статусу документа
	ЭлементУсловногоОформления = ИнициализироватьЭлементУсловногоОформления();
	
	ЭлементУсловногоОформления.Представление = НСтр("ru='Цвет текста документа по статусу'");
	ЭлементУсловногоОформления.Оформление.УстановитьЗначениеПараметра("ЦветТекста", ЦветаСтиля.ТекстЗапрещеннойЯчейкиЦвет);
	
	ПолеОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("СвязанныеДокументыДокумент");
	ПолеОформления.Использование = Истина;
	ПолеОформления = ЭлементУсловногоОформления.Поля.Элементы.Добавить();
	ПолеОформления.Поле = Новый ПолеКомпоновкиДанных("СвязанныеДокументыСтатус");
	ПолеОформления.Использование = Истина;
	
КонецПроцедуры

&НаСервере
Функция ИнициализироватьЭлементУсловногоОформления()
	
	ЭлементУсловногоОформления = УсловноеОформление.Элементы.Добавить();
	ЭлементУсловногоОформления.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементУсловногоОформления.ИдентификаторПользовательскойНастройки = "Предустановленный";
	ЭлементУсловногоОформления.Использование = Истина;
	
	ГруппаОтбора = ЭлементУсловногоОформления.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных"));
	ГруппаОтбора.ТипГруппы = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	ГруппаОтбора.Использование  = Истина;
	
	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("СвязанныеДокументы.РазрешеноИзменениеПоСтатусу");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Ложь;
	ЭлементОтбора.Использование  = Истина;
	
	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("СвязанныеДокументы.НетПравНаИзменение");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Истина;
	ЭлементОтбора.Использование  = Истина;
	
	ЭлементОтбора = ГруппаОтбора.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение  = Новый ПолеКомпоновкиДанных("СвязанныеДокументы.РазрешеноИзменениеРедактором");
	ЭлементОтбора.ВидСравнения   = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение = Ложь;
	ЭлементОтбора.Использование  = Истина;
	
	Возврат ЭлементУсловногоОформления;
	
КонецФункции

&НаСервере
Процедура СформироватьТаблицуИзмененийВЗаказе()
	
	ТабДокумент = Новый ТабличныйДокумент;
	Макет = Обработки.уатРедакторЦепочкиДокументов_уэ.ПолучитьМакет("ИзмененияВЗаказе");
	ОбластьШапка                              = "Шапка";
	ОбластьШапкаРеквизиты                     = "ШапкаРеквизиты";
	ОбластьШапкаРеквизитыВыведена             = Ложь;
	ОбластьСтрокаРеквизита                    = "ИзмененныйРеквизит";
	ОбластьСтрокаРеквизитаВремя               = "ИзмененныйРеквизитВремя";
	ОбластьШапкаТабличныеЧасти                = "ШапкаТабличныеЧасти";
	ОбластьШапкаТабличныеЧастиВыведена        = Ложь;
	ОбластьШапкаТабличныеЧастиПункты          = "ШапкаТабличныеЧастиПункты";
	ОбластьТабличныеЧастиНомерСтрокиИзменена  = "ТабличныеЧастиНомерСтрокиИзменена";
	ОбластьТабличныеЧастиНомерСтрокиДобавлена = "ТабличныеЧастиНомерСтрокиДобавлена";
	ОбластьТабличныеЧастиНомерСтрокиУдалена   = "ТабличныеЧастиНомерСтрокиУдалена";
	ОбластьТабличныеЧастиИзмененнаяСтрока     = "ТабличныеЧастиИзмененнаяСтрока";
	ОбластьТабличныеЧастиНеИзмененнаяСтрока   = "ТабличныеЧастиНеИзмененнаяСтрока";
	ОбластьТабличныеЧастиНоваяСтрока          = "ТабличныеЧастиНоваяСтрока";
	ОбластьТабличныеЧастиУдаленнаяСтрока      = "ТабличныеЧастиУдаленнаяСтрока";
	ОбластьТабличныеЧастиИзмененныйПункт      = "ТабличныеЧастиИзмененныйПункт";
	ОбластьИзмененийНет                       = "ИзмененийНет";
	
	ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапка);
	ОбластьМакета.Параметры.ТекстЗаголовка = Документы.уатЗаказГрузоотправителя.СформироватьНазваниеДокументаДляПечати(
		Объект.СтруктураДокументаНовая.Ссылка);
	ТабДокумент.Вывести(ОбластьМакета);
	
	// Измененные реквизиты
	Для Каждого КлючИЗначение Из Объект.СтруктураДокументаНовая Цикл
		Если ТипЗнч(КлючИЗначение.Значение) <> Тип("Массив")
			И ТипЗнч(КлючИЗначение.Значение) <> Тип("Структура") Тогда
			// Реквизит документа
			Реквизит = КлючИЗначение.Ключ;
			СтароеЗначениеРеквизита = Неопределено;
			Объект.СтруктураДокументаСтарая.Свойство(Реквизит, СтароеЗначениеРеквизита);
			НовоеЗначениеРеквизита = КлючИЗначение.Значение;
			
			Если НовоеЗначениеРеквизита <> СтароеЗначениеРеквизита
				И (ЗначениеЗаполнено(НовоеЗначениеРеквизита) Или ЗначениеЗаполнено(СтароеЗначениеРеквизита)) Тогда
				
				Если Не ОбластьШапкаРеквизитыВыведена Тогда
					ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапкаРеквизиты);
					ТабДокумент.Вывести(ОбластьМакета);
					ОбластьШапкаРеквизитыВыведена = Истина;
				КонецЕсли;
				
				Если Реквизит = "Время" Или Реквизит = "Стоянка"
					Или Реквизит = "СтоянкаПунктНазначения" Или Реквизит = "СтоянкаПунктОтправления" Тогда
					ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтрокаРеквизитаВремя);
				Иначе
					ОбластьМакета = Макет.ПолучитьОбласть(ОбластьСтрокаРеквизита);
				КонецЕсли;
				Попытка
					ПредставлениеРеквизита = Метаданные.Документы.уатЗаказГрузоотправителя.Реквизиты[Реквизит].Представление();
				Исключение
					ПредставлениеРеквизита = Реквизит;
				КонецПопытки;
				ОбластьМакета.Параметры.ПредставлениеРеквизита = ПредставлениеРеквизита;
				ОбластьМакета.Параметры.СтароеЗначение = СтароеЗначениеРеквизита;
				ОбластьМакета.Параметры.НовоеЗначение = НовоеЗначениеРеквизита;
				ТабДокумент.Вывести(ОбластьМакета);
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;
	
	// Измененные табличные части
	ОбязательныеКолонки = Новый Массив;
	Если ДетализацияЗаказа = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам Тогда
		МетаданныеТабличнойЧасти = Метаданные.Документы.уатЗаказГрузоотправителя.ТабличныеЧасти.ГрузовойСостав;
		ИмяТабличнойЧасти = МетаданныеТабличнойЧасти.Имя;
		ПредставлениеТабличнойЧасти = МетаданныеТабличнойЧасти.Представление();
		ОбязательныеКолонки.Добавить(МетаданныеТабличнойЧасти.Реквизиты.ГрузовоеМесто.Имя);
		ОбязательныеКолонки.Добавить(МетаданныеТабличнойЧасти.Реквизиты.ВидУпаковки.Имя);
		ОбязательныеКолонки.Добавить(МетаданныеТабличнойЧасти.Реквизиты.КоличествоМест.Имя);
	ИначеЕсли ДетализацияЗаказа = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам Тогда
		МетаданныеТабличнойЧасти = Метаданные.Документы.уатЗаказГрузоотправителя.ТабличныеЧасти.Товары;
		ИмяТабличнойЧасти = МетаданныеТабличнойЧасти.Имя;
		ПредставлениеТабличнойЧасти = МетаданныеТабличнойЧасти.Представление();
		ОбязательныеКолонки.Добавить(МетаданныеТабличнойЧасти.Реквизиты.Номенклатура.Имя);
		ОбязательныеКолонки.Добавить(МетаданныеТабличнойЧасти.Реквизиты.ЕдиницаИзмерения.Имя);
		ОбязательныеКолонки.Добавить(МетаданныеТабличнойЧасти.Реквизиты.Количество.Имя);
	Иначе
		МетаданныеТабличнойЧасти = Неопределено;
		ИмяТабличнойЧасти = "";
		ПредставлениеТабличнойЧасти = "";
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ИмяТабличнойЧасти)
		И Объект.СтруктураДокументаНовая.Свойство(ИмяТабличнойЧасти)
		И ТипЗнч(Объект.СтруктураДокументаНовая[ИмяТабличнойЧасти]) = Тип("Массив") Тогда
		
		НовыеСтроки = Объект.СтруктураДокументаНовая[ИмяТабличнойЧасти];
		Если Объект.СтруктураДокументаСтарая.Свойство(ИмяТабличнойЧасти) Тогда
			СтарыеСтроки = Объект.СтруктураДокументаСтарая[ИмяТабличнойЧасти];
		Иначе
			СтарыеСтроки = Новый Массив;
		КонецЕсли;
		
		// Измененные строки
		Для НомерСтроки = 1 По Мин(СтарыеСтроки.Количество(), НовыеСтроки.Количество()) Цикл
			СтрокаИзменена = Ложь;
			
			// Проверка необходимости вывода строки
			Для Каждого РеквизитИЗначение Из СтарыеСтроки[НомерСтроки-1] Цикл
				Реквизит = РеквизитИЗначение.Ключ;
				СтароеЗначениеРеквизита = РеквизитИЗначение.Значение;
				НовоеЗначениеРеквизита = НовыеСтроки[НомерСтроки-1][Реквизит];
				Если НовоеЗначениеРеквизита <> СтароеЗначениеРеквизита
					И (ЗначениеЗаполнено(НовоеЗначениеРеквизита) Или ЗначениеЗаполнено(СтароеЗначениеРеквизита)) Тогда
					СтрокаИзменена = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			// Вывод строки
			Если СтрокаИзменена Тогда
				
				Если Не ОбластьШапкаТабличныеЧастиВыведена Тогда
					ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапкаТабличныеЧасти);
					ОбластьМакета.Параметры.ПредставлениеТабличнойЧасти = ПредставлениеТабличнойЧасти;
					ТабДокумент.Вывести(ОбластьМакета);
					ОбластьШапкаТабличныеЧастиВыведена = Истина;
				КонецЕсли;
				
				ОбластьМакета = Макет.ПолучитьОбласть(ОбластьТабличныеЧастиНомерСтрокиИзменена);
				ОбластьМакета.Параметры.НомерСтроки = НомерСтроки;
				ТабДокумент.Вывести(ОбластьМакета);
				
				Для Каждого РеквизитИЗначение Из СтарыеСтроки[НомерСтроки-1] Цикл
					Реквизит = РеквизитИЗначение.Ключ;
					СтароеЗначениеРеквизита = РеквизитИЗначение.Значение;
					НовоеЗначениеРеквизита = НовыеСтроки[НомерСтроки-1][Реквизит];
					Если НовоеЗначениеРеквизита <> СтароеЗначениеРеквизита
						И (ЗначениеЗаполнено(НовоеЗначениеРеквизита) Или ЗначениеЗаполнено(СтароеЗначениеРеквизита)) Тогда
						ОбластьМакета = Макет.ПолучитьОбласть(ОбластьТабличныеЧастиИзмененнаяСтрока);
					ИначеЕсли ОбязательныеКолонки.Найти(Реквизит) <> Неопределено Тогда
						ОбластьМакета = Макет.ПолучитьОбласть(ОбластьТабличныеЧастиНеИзмененнаяСтрока);
					Иначе
						ОбластьМакета = Неопределено;
					КонецЕсли;
					Если ОбластьМакета <> Неопределено Тогда
						Попытка
							ПредставлениеРеквизита = МетаданныеТабличнойЧасти.Реквизиты[Реквизит].Представление();
						Исключение
							ПредставлениеРеквизита = Реквизит;
						КонецПопытки;
						ОбластьМакета.Параметры.ПредставлениеРеквизита = ПредставлениеРеквизита;
						ОбластьМакета.Параметры.СтароеЗначение = СтароеЗначениеРеквизита;
						ОбластьМакета.Параметры.НовоеЗначение = НовоеЗначениеРеквизита;
						ТабДокумент.Вывести(ОбластьМакета);
					КонецЕсли;
				КонецЦикла;
			
			КонецЕсли;
			
		КонецЦикла;
		
		// Добавленные строки
		Для НомерСтроки = СтарыеСтроки.Количество() + 1 По НовыеСтроки.Количество() Цикл
			
			Если Не ОбластьШапкаТабличныеЧастиВыведена Тогда
				ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапкаТабличныеЧасти);
				ОбластьМакета.Параметры.ПредставлениеТабличнойЧасти = ПредставлениеТабличнойЧасти;
				ТабДокумент.Вывести(ОбластьМакета);
				ОбластьШапкаТабличныеЧастиВыведена = Истина;
			КонецЕсли;
			
			ОбластьМакета = Макет.ПолучитьОбласть(ОбластьТабличныеЧастиНомерСтрокиДобавлена);
			ОбластьМакета.Параметры.НомерСтроки = НомерСтроки;
			ТабДокумент.Вывести(ОбластьМакета);
			
			Для Каждого РеквизитИЗначение Из НовыеСтроки[НомерСтроки-1] Цикл
				Реквизит = РеквизитИЗначение.Ключ;
				НовоеЗначениеРеквизита = РеквизитИЗначение.Значение;
				Если ЗначениеЗаполнено(НовоеЗначениеРеквизита) Тогда
					ОбластьМакета = Макет.ПолучитьОбласть(ОбластьТабличныеЧастиНоваяСтрока);
					Попытка
						ПредставлениеРеквизита = МетаданныеТабличнойЧасти.Реквизиты[Реквизит].Представление();
					Исключение
						ПредставлениеРеквизита = Реквизит;
					КонецПопытки;
					ОбластьМакета.Параметры.ПредставлениеРеквизита = ПредставлениеРеквизита;
					ОбластьМакета.Параметры.НовоеЗначение = НовоеЗначениеРеквизита;
					ТабДокумент.Вывести(ОбластьМакета);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
		// Удаленные строки
		Для НомерСтроки = НовыеСтроки.Количество() + 1 По СтарыеСтроки.Количество() Цикл
			
			Если Не ОбластьШапкаТабличныеЧастиВыведена Тогда
				ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапкаТабличныеЧасти);
				ОбластьМакета.Параметры.ПредставлениеТабличнойЧасти = ПредставлениеТабличнойЧасти;
				ТабДокумент.Вывести(ОбластьМакета);
				ОбластьШапкаТабличныеЧастиВыведена = Истина;
			КонецЕсли;
			
			ОбластьМакета = Макет.ПолучитьОбласть(ОбластьТабличныеЧастиНомерСтрокиУдалена);
			ОбластьМакета.Параметры.НомерСтроки = НомерСтроки;
			ТабДокумент.Вывести(ОбластьМакета);
			
			Для Каждого РеквизитИЗначение Из СтарыеСтроки[НомерСтроки-1] Цикл
				Реквизит = РеквизитИЗначение.Ключ;
				СтароеЗначениеРеквизита = РеквизитИЗначение.Значение;
				Если ЗначениеЗаполнено(СтароеЗначениеРеквизита) Тогда
					ОбластьМакета = Макет.ПолучитьОбласть(ОбластьТабличныеЧастиУдаленнаяСтрока);
					Попытка
						ПредставлениеРеквизита = МетаданныеТабличнойЧасти.Реквизиты[Реквизит].Представление();
					Исключение
						ПредставлениеРеквизита = Реквизит;
					КонецПопытки;
					ОбластьМакета.Параметры.ПредставлениеРеквизита = ПредставлениеРеквизита;
					ОбластьМакета.Параметры.СтароеЗначение = СтароеЗначениеРеквизита;
					ТабДокумент.Вывести(ОбластьМакета);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
			
	КонецЕсли;
	
	// Изменение пунктов по заказу для FTL заказа.
	Если Объект.СтруктураДокументаНовая.FTL
		Или Объект.СтруктураДокументаСтарая.FTL Тогда
		
		ПунктыЗаказаСтарые = ПолучитьПунктыМаршрута(Объект.СтруктураДокументаСтарая);
		ПунктыЗаказаНовые = ПолучитьПунктыМаршрута(Объект.СтруктураДокументаНовая);
		ПунктыИзменились = Ложь;
		
		// Сравнение пунктов
		Если ПунктыЗаказаСтарые.Количество() = ПунктыЗаказаНовые.Количество() Тогда
			Для Сч = 1 По ПунктыЗаказаСтарые.Количество() Цикл
				Если ПунктыЗаказаСтарые[Сч-1] <> ПунктыЗаказаНовые[Сч-1] Тогда
					ПунктыИзменились = Истина;
					Прервать;
				КонецЕсли;
			КонецЦикла;
		Иначе
			ПунктыИзменились = Истина;
		КонецЕсли;
		
		// Вывод пунктов
		Если ПунктыИзменились Тогда
			ОбластьМакета = Макет.ПолучитьОбласть(ОбластьШапкаТабличныеЧастиПункты);
			ТабДокумент.Вывести(ОбластьМакета);
			ОбластьШапкаТабличныеЧастиВыведена = Истина;
			Для Сч = 1 По Макс(ПунктыЗаказаСтарые.Количество(), ПунктыЗаказаНовые.Количество()) Цикл
				ОбластьМакета = Макет.ПолучитьОбласть(ОбластьТабличныеЧастиИзмененныйПункт);
				Если Сч <= ПунктыЗаказаСтарые.Количество() Тогда
					ОбластьМакета.Параметры.СтароеЗначение =  ПунктыЗаказаСтарые[Сч-1];
				Иначе
					ОбластьМакета.Параметры.СтароеЗначение = "-";
				КонецЕсли;
				Если Сч <= ПунктыЗаказаНовые.Количество() Тогда
					ОбластьМакета.Параметры.НовоеЗначение =  ПунктыЗаказаНовые[Сч-1];
				Иначе
					ОбластьМакета.Параметры.НовоеЗначение = "-";
				КонецЕсли;
				ТабДокумент.Вывести(ОбластьМакета);
			КонецЦикла;
			
		КонецЕсли;
		
	КонецЕсли;
	
	Если Не (ОбластьШапкаРеквизитыВыведена Или ОбластьШапкаТабличныеЧастиВыведена) Тогда
		ОбластьМакета = Макет.ПолучитьОбласть(ОбластьИзмененийНет);
		ИзмененияВЗаказеПустые = Истина;
		ТабДокумент.Вывести(ОбластьМакета);
	КонецЕсли;
	
	ИзмененияВЗаказе = ТабДокумент;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьФлагиИзмененийВДокументах()
	
	ИзмененПунктПогрузки = Объект.СтруктураДокументаСтарая.АдресОтправления <> Объект.СтруктураДокументаНовая.АдресОтправления;
	ПунктПогрузки = Объект.СтруктураДокументаНовая.АдресОтправления;
	ИзмененПунктРазгрузки = Объект.СтруктураДокументаСтарая.АдресНазначения <> Объект.СтруктураДокументаНовая.АдресНазначения;
	ПунктРазгрузки = Объект.СтруктураДокументаНовая.АдресНазначения;
	
	ИзмененыПунктыFTLЗаказа = уатОбщегоНазначения_уэ.ИзмененыПунктыFTLЗаказа(Объект.СтруктураДокументаНовая, Объект.СтруктураДокументаСтарая);
	
	ИзмененаОрганизация = Объект.СтруктураДокументаСтарая.Организация <> Объект.СтруктураДокументаНовая.Организация;
	Организация = Объект.СтруктураДокументаНовая.Организация;
	ИзмененоПодразделение = Объект.СтруктураДокументаСтарая.Подразделение <> Объект.СтруктураДокументаНовая.Подразделение;
	ИзмененКонтрагент = Объект.СтруктураДокументаСтарая.Контрагент <> Объект.СтруктураДокументаНовая.Контрагент;
	ИзмененДоговор = Объект.СтруктураДокументаСтарая.ДоговорКонтрагента <> Объект.СтруктураДокументаНовая.ДоговорКонтрагента;
	
	ИзмененФлагFTL = Объект.СтруктураДокументаСтарая.FTL <> Объект.СтруктураДокументаНовая.FTL;
	
	ИзмененыГрузыПоЗаказу = Объект.СтруктураДокументаСтарая.ДетализацияЗакрытия <> Объект.СтруктураДокументаНовая.ДетализацияЗакрытия
		Или уатОбщегоНазначения_уэ.ИзмененыГрузыПоЗаказу(Объект.СтруктураДокументаНовая, Объект.СтруктураДокументаСтарая);
	
	// Реквизиты шапки
	ИзмененВидПеревозки = Объект.СтруктураДокументаСтарая.ВидПеревозки <> Объект.СтруктураДокументаНовая.ВидПеревозки;
	ИзмененМаршрут = Объект.СтруктураДокументаСтарая.Маршрут <> Объект.СтруктураДокументаНовая.Маршрут;
	ИзмененоНаправлениеПеревозки = Объект.СтруктураДокументаСтарая.НаправлениеПеревозки <> Объект.СтруктураДокументаНовая.НаправлениеПеревозки;
	ИзмененОбъектСтроительства = Объект.СтруктураДокументаСтарая.ОбъектСтроительства <> Объект.СтруктураДокументаНовая.ОбъектСтроительства;
	
	// Перевод заказа в этап Мультимодального заказа
	//ИзмененУстановленФлагМультимодальный = Объект.СтруктураДокументаНовая.Мультимодальный
	//	И Не Объект.СтруктураДокументаСтарая.ЭтоЭтап
	//	И Не Объект.СтруктураДокументаСтарая.Мультимодальный;
	
	Если ЭтоКОРП Тогда
		ОперацияПеренестиВСвязанныеДокументы = ИзмененПунктПогрузки Или ИзмененПунктРазгрузки Или ИзмененыПунктыFTLЗаказа
			Или ИзмененыГрузыПоЗаказу
			Или ИзмененМаршрут Или ИзмененОбъектСтроительства Или ИзмененоНаправлениеПеревозки Или ИзмененВидПеревозки
			Или ИзмененФлагFTL
			Или ИзмененУстановленФлагМультимодальный
			Или ИзмененаОрганизация Или ИзмененоПодразделение Или ИзмененКонтрагент Или ИзмененДоговор;
	Иначе
		ОперацияПеренестиВСвязанныеДокументы = Истина;
	КонецЕсли;
	
КонецПроцедуры

#Область ИзменениеПеревозчика

&НаКлиенте
Функция ПолучитьСтруктуруОтбораТС(ПринадлежностьТС, ВладелецТС)
	
	СтруктураОтбора = Новый Структура();
	
	Если ПринадлежностьТС = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное") Тогда 
		СтруктураОтбора.Вставить("ПринадлежностьТС", ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное"));
		Если ЗначениеЗаполнено(ВладелецТС) Тогда
			СтруктураОтбора.Вставить("Организация", ВладелецТС);
		КонецЕсли;
		
	ИначеЕсли ПринадлежностьТС = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Привлеченное") Тогда 
		СтруктураОтбора.Вставить("ПринадлежностьТС", ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Привлеченное"));
		Если ЗначениеЗаполнено(ВладелецТС) Тогда
			СтруктураОтбора.Вставить("ВладелецТС", ВладелецТС);
		КонецЕсли;
		
	Иначе 
		СтруктураОтбора.Вставить("ПринадлежностьТС", ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Виртуальное"));
	КонецЕсли;
	
	Возврат СтруктураОтбора;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьПустогоПеревозчикаПоТС(РеквизитПеревозчик, ТранспортноеСредство, ПринадлежностьТС, ИмяЭлементаПеревозчик, ИмяЭлементаВодитель)
	
	Если ЗначениеЗаполнено(ТранспортноеСредство) И НЕ ЗначениеЗаполнено(РеквизитПеревозчик) Тогда
		УстановитьОграниченияТиповПеревозки(ПринадлежностьТС, ИмяЭлементаПеревозчик, ИмяЭлементаВодитель);
		Если ПринадлежностьТС = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное") Тогда
			РеквизитПеревозчик = ТранспортноеСредство.Организация;
		ИначеЕсли ПринадлежностьТС = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Привлеченное") Тогда 
			РеквизитПеревозчик = ТранспортноеСредство.ВладелецТС;
		Иначе 
			РеквизитПеревозчик = Справочники.Организации.ПустаяСсылка();
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПриИзмененииКонтрагентаНаСервере(Организация, Контрагент, ТранспортноеСредство, Договор)
	
	СписокДоговоров = Новый СписокЗначений;
	СписокДоговоров.Добавить(Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком);
	СтруктураПараметровДляПолученияДоговора = Новый Структура("СписокДопустимыхВидовДоговоров", СписокДоговоров);
	Договор = уатОбщегоНазначенияТиповыеСервер.уатПолучитьДоговорПоОрганизацииИКонтрагенту(Организация, Контрагент, СтруктураПараметровДляПолученияДоговора);
	
	Если ТранспортноеСредство.ВладелецТС <> Контрагент Тогда
		ТранспортноеСредство = Неопределено;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьСписокВыбораЭкипажа(ПринадлежностьТС, ТранспортноеСредство, ИмяЭлементаВодитель)
	
	ЭлементВодитель = Элементы[ИмяЭлементаВодитель];
	ЭлементВодитель.СписокВыбора.Очистить();
	
	Попытка
		Если ПринадлежностьТС = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное") Тогда
			ЭкипажТССписок = уатЗащищенныеФункцииСервер.ЭкипажТССписок(ТранспортноеСредство);
		ИначеЕсли ПринадлежностьТС = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Привлеченное") Тогда 
			ЭкипажТССписок = уатОбщегоНазначения_уэ.ВодителиКонтрагента(уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(ТранспортноеСредство, "ВладелецТС"));
		Иначе 
			ЭкипажТССписок = Новый СписокЗначений();
		КонецЕсли;
	Исключение
		ЭкипажТССписок = Новый СписокЗначений();
	КонецПопытки;
	
	ЭкипажТССписок_Количество = ЭкипажТССписок.Количество();
	ЭлементВодитель.КнопкаВыпадающегоСписка = (ЭкипажТССписок_Количество > 0);
	
	Для Каждого ТекСотр Из ЭкипажТССписок Цикл
		ЭлементВодитель.СписокВыбора.Добавить(ТекСотр.Значение);
	КонецЦикла;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ФизЛицоВодителяКонтрагента(КлючЗаписи)
	Возврат КлючЗаписи.ФизЛицо;
КонецФункции

&НаСервере
Процедура ЗаполнитьПеревозчикаПоСвязаннымДокументам()
	
	ТаблицаДокументов = Новый ТаблицаЗначений;
	ТаблицаДокументов.Колонки.Добавить("Документ");
	ТаблицаДокументов.Колонки.Добавить("Приоритет", Новый ОписаниеТипов("Число"));
	
	ПриоритетОтмеченногоМаршрутногоЛиста = 12;
	ПриоритетОтмеченногоПутевогоЛиста = 11;
	ПриоритетНеОтмеченногоМаршрутногоЛиста = 2;
	ПриоритетНеОтмеченногоПутевогоЛиста = 1;
	
	ТипыДокументов = СвязанныеДокументы.ПолучитьЭлементы();
	Для Каждого СтрокаТипДокумента Из ТипыДокументов Цикл
		Если СтрокаТипДокумента.Документ = Тип("ДокументСсылка.уатМаршрутныйЛист") Тогда
			Для Каждого ТекСтрокаДокумент Из СтрокаТипДокумента.ПолучитьЭлементы() Цикл
				НоваяСтрока = ТаблицаДокументов.Добавить();
				НоваяСтрока.Документ = ТекСтрокаДокумент.Документ;
				Если ТекСтрокаДокумент.Выбран Тогда
					НоваяСтрока.Приоритет = ПриоритетОтмеченногоМаршрутногоЛиста;
				Иначе
					НоваяСтрока.Приоритет = ПриоритетНеОтмеченногоМаршрутногоЛиста;
				КонецЕсли;
			КонецЦикла;
		ИначеЕсли СтрокаТипДокумента.Документ = Тип("ДокументСсылка.уатПутевойЛист") Тогда
			Для Каждого ТекСтрокаДокумент Из СтрокаТипДокумента.ПолучитьЭлементы() Цикл
				НоваяСтрока = ТаблицаДокументов.Добавить();
				НоваяСтрока.Документ = ТекСтрокаДокумент.Документ;
				Если ТекСтрокаДокумент.Выбран Тогда
					НоваяСтрока.Приоритет = ПриоритетОтмеченногоПутевогоЛиста;
				Иначе
					НоваяСтрока.Приоритет = ПриоритетНеОтмеченногоПутевогоЛиста;
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	ВыбранныйДокумент = Неопределено;
	Если ТаблицаДокументов.Количество() Тогда
		ТаблицаДокументов.Сортировать("Приоритет Убыв");
		ВыбранныйДокумент = ТаблицаДокументов[0].Документ;
	КонецЕсли;
	
	Если ТипЗнч(ВыбранныйДокумент) = Тип("ДокументСсылка.уатМаршрутныйЛист") Тогда
		ПринадлежностьПеревозки = ВыбранныйДокумент.ПринадлежностьПеревозки;
		Перевозчик = ВыбранныйДокумент.Контрагент;
		ДоговорКонтрагента = ВыбранныйДокумент.ДоговорКонтрагента;
		ТС = ВыбранныйДокумент.ТС;
		Водитель1 = ВыбранныйДокумент.Водитель1;
	ИначеЕсли ТипЗнч(ВыбранныйДокумент) = Тип("ДокументСсылка.уатПутевойЛист") Тогда
		ПринадлежностьПеревозки = Перечисления.уатПринадлежностьТС.Собственное;
		Перевозчик = ВыбранныйДокумент.Организация;
		ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		ТС = ВыбранныйДокумент.ТранспортноеСредство;
		Водитель1 = ВыбранныйДокумент.Водитель1;
	Иначе
		ПринадлежностьПеревозки = Перечисления.уатПринадлежностьТС.Собственное;
		Перевозчик = Справочники.Организации.ПустаяСсылка();
		ДоговорКонтрагента = Справочники.ДоговорыКонтрагентов.ПустаяСсылка();
		ТС = Справочники.уатТС.ПустаяСсылка();
		Водитель1 = Справочники.Сотрудники.ПустаяСсылка();
	КонецЕсли;
	УстановитьОграниченияТиповПеревозки(ПринадлежностьПеревозки, Элементы.Перевозчик.Имя, Элементы.Водитель1.Имя);
	
КонецПроцедуры

&НаСервере
Процедура УстановитьОграниченияТиповПеревозки(ПринадлежностьТС, ИмяЭлементаПеревозчик, ИмяЭлементаВодитель)
	
	ЭлементПеревозчик = Элементы[ИмяЭлементаПеревозчик];
	ЭлементВодитель = Элементы[ИмяЭлементаВодитель];
	
	Если ПринадлежностьТС = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Собственное") Тогда
		ЭлементПеревозчик.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Организации");
		ЭлементВодитель.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Сотрудники");
	ИначеЕсли ПринадлежностьТС = ПредопределенноеЗначение("Перечисление.уатПринадлежностьТС.Привлеченное") Тогда
		ЭлементПеревозчик.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Контрагенты");
		ЭлементВодитель.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.ФизическиеЛица");
	Иначе
		ЭлементПеревозчик.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Организации");
		ЭлементВодитель.ОграничениеТипа = Новый ОписаниеТипов("СправочникСсылка.Сотрудники");
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

&НаСервере
Функция ПолучитьОтмеченныеСтрокиГрузов()
	
	СтруктураОтбора = Новый Структура("Выбран", Истина);
	Если ДетализацияЗаказа = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам Тогда
		ОтмеченныеСтроки = Объект.ГрузовойСостав.НайтиСтроки(СтруктураОтбора);
	ИначеЕсли ДетализацияЗаказа = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам Тогда
		ОтмеченныеСтроки = Объект.Товары.НайтиСтроки(СтруктураОтбора);
	Иначе
		ОтмеченныеСтроки = Новый Массив;
	КонецЕсли;
	
	Возврат ОтмеченныеСтроки;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокГрузовыхМестРодительскогоЗаказа(Знач РодительскийЗаказ, Знач ИмяТЧ)
	
	Возврат Документы.уатЗаказГрузоотправителя.ПолучитьСписокГрузовыхМестРодительскогоЗаказа(РодительскийЗаказ, ИмяТЧ);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокГрузовыхМестРодительскогоЗаказаДляАвтоподбора(Знач РодительскийЗаказ, Знач ИмяТЧ, Знач СтрокаПодбора)
	
	Возврат Документы.уатЗаказГрузоотправителя.ПолучитьСписокГрузовыхМестРодительскогоЗаказаДляАвтоподбора(РодительскийЗаказ, ИмяТЧ, СтрокаПодбора);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокТоваровРодительскогоЗаказа(Знач РодительскийЗаказ)
	
	Возврат Документы.уатЗаказГрузоотправителя.ПолучитьСписокТоваровРодительскогоЗаказа(РодительскийЗаказ);
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьСписокТоваровРодительскогоЗаказаДляАвтоподбора(Знач РодительскийЗаказ, Знач СтрокаПодбора)
	
	Возврат Документы.уатЗаказГрузоотправителя.ПолучитьСписокТоваровРодительскогоЗаказаДляАвтоподбора(РодительскийЗаказ, СтрокаПодбора);
	
КонецФункции

&НаКлиенте
Процедура РассчитатьСуммуВСтрокеТабличнойЧасти(СтрокаТабличнойЧасти = Неопределено)
	
	Если СтрокаТабличнойЧасти = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтрокаТабличнойЧасти.Сумма = СтрокаТабличнойЧасти.Количество * СтрокаТабличнойЧасти.Цена;
	
	РассчитатьСуммуНДС(СтрокаТабличнойЧасти);
	РассчитатьСуммуВсегоВстрокеТЧ(СтрокаТабличнойЧасти);
	
КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуНДС(СтрокаТабличнойЧасти)
	
	СтавкаНДС = уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеСтавкиНДС(СтрокаТабличнойЧасти.СтавкаНДС);
	СуммаВключаетНДС = Объект.СтруктураДокументаНовая.СуммаВключаетНДС;
	
	СтрокаТабличнойЧасти.СуммаНДС = ?(СуммаВключаетНДС, 
		СтрокаТабличнойЧасти.Сумма - (СтрокаТабличнойЧасти.Сумма) / ((СтавкаНДС + 100) / 100),
		СтрокаТабличнойЧасти.Сумма * СтавкаНДС / 100);

КонецПроцедуры

&НаКлиенте
Процедура РассчитатьСуммуВсегоВстрокеТЧ(СтрокаТабличнойЧасти, ПланФакт = Неопределено)
	
	СуммаВключаетНДС = Объект.СтруктураДокументаНовая.СуммаВключаетНДС;
	УчитыватьНДС = Объект.СтруктураДокументаНовая.УчитыватьНДС;
	СтрокаТабличнойЧасти.Всего = СтрокаТабличнойЧасти.Сумма
		+ ?(УчитыватьНДС И НЕ СуммаВключаетНДС, СтрокаТабличнойЧасти.СуммаНДС, 0);
	
КонецПроцедуры

&НаСервере
Процедура ДобавитьГиперссылкуДокумента(ДокументСсылка, Сч, Группа)
	
	ГруппаГиперссылка = Элементы.Добавить(СтрШаблон("ГруппаИзмененныйДокумент%1", Сч), Тип("ГруппаФормы"), Группа);
	ГруппаГиперссылка.Вид = ВидГруппыФормы.ОбычнаяГруппа;
	ГруппаГиперссылка.ОтображатьЗаголовок = Ложь;
	ГруппаГиперссылка.ГоризонтальныйИнтервал = ИнтервалМеждуЭлементамиФормы.Половинный;
	
	// Картинка маркированного списка
	ТекКартинка = Элементы.Добавить(СтрШаблон("ДекорацияСписок%1", Сч), Тип("ДекорацияФормы"), ГруппаГиперссылка);
	ТекКартинка.Ширина = 2;
	ТекКартинка.РастягиватьПоГоризонтали = Ложь;
	ТекКартинка.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Право;
	ТекКартинка.Заголовок = Новый ФорматированнаяСтрока("  •",, ЦветаСтиля.ГиперссылкаЦвет);
	
	// Гиперссылка документа
	ТекГиперссылка = Элементы.Добавить(СтрШаблон("ИзмененныйДокумент%1", Сч), Тип("ДекорацияФормы"), ГруппаГиперссылка);
	ТекГиперссылка.Заголовок = Новый ФорматированнаяСтрока(Строка(ДокументСсылка),, ЦветаСтиля.ГиперссылкаЦвет,, ПолучитьНавигационнуюСсылку(ДокументСсылка));
	ТекГиперссылка.Ширина = 50;
	
КонецПроцедуры

Функция ПолучитьПунктыМаршрута(СтруктураЗаказа)
	
	МассивПунктов = Новый Массив;
	
	Если СтруктураЗаказа.FTL Тогда
		Для Каждого ТекСтрока Из СтруктураЗаказа.ПромежуточныеПункты Цикл
			МассивПунктов.Добавить(Строка(ТекСтрока.Пункт));
		КонецЦикла;
	ИначеЕсли СтруктураЗаказа.Мультимодальный И Не СтруктураЗаказа.ЭтоЭтап Тогда
		Запрос = Новый Запрос("ВЫБРАТЬ
		|	уатЭтапыМультимодальныхПеревозок_уэ.НомерЭтапа КАК НомерЭтапа,
		|	уатЭтапыМультимодальныхПеревозок_уэ.Этап КАК Этап,
		|	уатЗаказГрузоотправителя.АдресОтправления КАК АдресОтправления,
		|	уатЗаказГрузоотправителя.АдресНазначения КАК АдресНазначения
		|ИЗ
		|	РегистрСведений.уатЭтапыМультимодальныхПеревозок_уэ КАК уатЭтапыМультимодальныхПеревозок_уэ
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
		|		ПО уатЭтапыМультимодальныхПеревозок_уэ.Этап = уатЗаказГрузоотправителя.Ссылка
		|			И (уатЭтапыМультимодальныхПеревозок_уэ.ЗаказГрузоотправителя = &Заказ)
		|
		|УПОРЯДОЧИТЬ ПО
		|	НомерЭтапа");
		Запрос.УстановитьПараметр("Заказ", ЗаказСсылка);
		Выборка = Запрос.Выполнить().Выбрать();
		Пока Выборка.Следующий() Цикл
			ПредставлениеЭтапа = СтрШаблон("%1 – %2", Выборка.АдресОтправления, Выборка.АдресНазначения);
			МассивПунктов.Добавить(ПредставлениеЭтапа);
		КонецЦикла;
	Иначе
		МассивПунктов.Добавить(Строка(СтруктураЗаказа.АдресОтправления));
		МассивПунктов.Добавить(Строка(СтруктураЗаказа.АдресНазначения));
	КонецЕсли;
	
	Возврат МассивПунктов;
	
КонецФункции

#Область ОтображениеМаршрутныхПутевыхЛистовГрузов

&НаСервере
Функция ПолучитьДокументыГруза(Груз)
	
	ДокументыГруза = Новый Массив;
	
	Грузы = Новый Массив;
	Грузы.Добавить(Груз);
	ВсеМаршрутныеПутевыеЛисты = ПолучитьВсеМаршрутныеПутевыеЛисты();
	
	ТаблицаНоменклатура = ПолучитьДокументыГрузов(Грузы, ВсеМаршрутныеПутевыеЛисты);
	Для Каждого ТекСтрока Из ТаблицаНоменклатура Цикл
		Если ТекСтрока.Номенклатура = Груз Тогда
			ДокументыГруза.Добавить(ТекСтрока.Документ);
		КонецЕсли;
	КонецЦикла;
	
	Возврат ДокументыГруза;
	
КонецФункции

&НаСервере
Функция ПолучитьВсеМаршрутныеПутевыеЛисты()
	ВсеМаршрутныеЛисты = Новый Массив;
	Для Каждого ТекТипДокумента Из СвязанныеДокументы.ПолучитьЭлементы() Цикл
		Если ТекТипДокумента.Документ = Тип("ДокументСсылка.уатМаршрутныйЛист")
			Или ТекТипДокумента.Документ = Тип("ДокументСсылка.уатПутевойЛист") Тогда
			Для Каждого ТекДокумент Из ТекТипДокумента.ПолучитьЭлементы() Цикл
				ВсеМаршрутныеЛисты.Добавить(ТекДокумент.Документ);
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	Возврат ВсеМаршрутныеЛисты;
КонецФункции

&НаСервере
Процедура ОбновитьДокументыГрузовСервер()
	
	Если ДетализацияЗаказа = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам Тогда
		Возврат;
	КонецЕсли;
	
	ВсеМаршрутныеПутевыеЛисты = ПолучитьВсеМаршрутныеПутевыеЛисты();
	Грузы = Новый Массив;
	Если ДетализацияЗаказа = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам Тогда
		
		Для Каждого ТекСтрока Из Объект.Товары Цикл
			Грузы.Добавить(ТекСтрока.Номенклатура);
			ТекСтрока.Размещено = "";
		КонецЦикла;
		
		ТаблицаНоменклатура = ПолучитьДокументыГрузов(Грузы, ВсеМаршрутныеПутевыеЛисты);
		Для Каждого ТекСтрока Из Объект.Товары Цикл
			НайденныеСтроки = ТаблицаНоменклатура.НайтиСтроки(Новый Структура("Номенклатура", ТекСтрока.Номенклатура));
			Для Каждого ТекСтрокаДокумента Из НайденныеСтроки Цикл
				Если Не ЗначениеЗаполнено(ТекСтрока.Размещено) Тогда
					ТекСтрока.Размещено = ТекСтрокаДокумента.Документ;
				Иначе
					ТекСтрока.Размещено = СтрШаблон("%1; %2", ТекСтрока.Размещено, ТекСтрокаДокумента.Документ);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	ИначеЕсли ДетализацияЗаказа = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам Тогда
		
		Для Каждого ТекСтрока Из Объект.ГрузовойСостав Цикл
			Грузы.Добавить(ТекСтрока.ГрузовоеМесто);
			ТекСтрока.Размещено = "";
		КонецЦикла;
		
		ТаблицаНоменклатура = ПолучитьДокументыГрузов(Грузы, ВсеМаршрутныеПутевыеЛисты);
		Для Каждого ТекСтрока Из Объект.ГрузовойСостав Цикл
			НайденныеСтроки = ТаблицаНоменклатура.НайтиСтроки(Новый Структура("Номенклатура", ТекСтрока.ГрузовоеМесто));
			Для Каждого ТекСтрокаДокумента Из НайденныеСтроки Цикл
				Если Не ЗначениеЗаполнено(ТекСтрока.Размещено) Тогда
					ТекСтрока.Размещено = ТекСтрокаДокумента.Документ;
				Иначе
					ТекСтрока.Размещено = СтрШаблон("%1; %2", ТекСтрока.Размещено, ТекСтрокаДокумента.Документ);
				КонецЕсли;
			КонецЦикла;
		КонецЦикла;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьМассивДокументов(МассивДокументов)
	
	Если Не ЗначениеЗаполнено(МассивДокументов) Тогда
		Возврат;
	ИначеЕсли МассивДокументов.Количество() = 1 Тогда
		ПоказатьЗначение(, МассивДокументов[0]);
	Иначе
		ПараметрыФормы = Новый Структура("МассивДокументов", МассивДокументов);
		ОткрытьФорму("Обработка.уатРедакторЦепочкиДокументов_уэ.Форма.ФормаМассивДокументов", ПараметрыФормы,,,,,,
			РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДокументыГрузов(Грузы, ВсеМаршрутныеПутевыеЛисты)
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатМаршрутныйЛист.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ втМаршрутныеЛисты
	|ИЗ
	|	Документ.уатМаршрутныйЛист КАК уатМаршрутныйЛист
	|ГДЕ
	|	уатМаршрутныйЛист.Ссылка В(&Документы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатПутевойЛист.Ссылка КАК Ссылка
	|ПОМЕСТИТЬ втПутевыеЛисты
	|ИЗ
	|	Документ.уатПутевойЛист КАК уатПутевойЛист
	|ГДЕ
	|	уатПутевойЛист.Ссылка В(&Документы)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ
	|	втМаршрутныеЛисты.Ссылка КАК Документ,
	|	уатМаршрутныйЛистЗаказы.Номенклатура КАК Номенклатура
	|ИЗ
	|	втМаршрутныеЛисты КАК втМаршрутныеЛисты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатМаршрутныйЛист.Заказы КАК уатМаршрутныйЛистЗаказы
	|		ПО втМаршрутныеЛисты.Ссылка = уатМаршрутныйЛистЗаказы.Ссылка
	|ГДЕ
	|	уатМаршрутныйЛистЗаказы.Номенклатура В(&Грузы)
	|
	|СГРУППИРОВАТЬ ПО
	|	втМаршрутныеЛисты.Ссылка,
	|	уатМаршрутныйЛистЗаказы.Номенклатура
	|
	|ОБЪЕДИНИТЬ
	|
	|ВЫБРАТЬ
	|	втПутевыеЛисты.Ссылка,
	|	уатПутевойЛистЗадание.Номенклатура
	|ИЗ
	|	втПутевыеЛисты КАК втПутевыеЛисты
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатПутевойЛист.Задание КАК уатПутевойЛистЗадание
	|		ПО втПутевыеЛисты.Ссылка = уатПутевойЛистЗадание.Ссылка
	|ГДЕ
	|	уатПутевойЛистЗадание.Номенклатура В(&Грузы)
	|
	|СГРУППИРОВАТЬ ПО
	|	втПутевыеЛисты.Ссылка,
	|	уатПутевойЛистЗадание.Номенклатура");
	Запрос.УстановитьПараметр("Документы", ВсеМаршрутныеПутевыеЛисты);
	Запрос.УстановитьПараметр("Грузы", Грузы);
	ТаблицаНоменклатура = Запрос.Выполнить().Выгрузить();
	
	Возврат ТаблицаНоменклатура;
	
КонецФункции

#КонецОбласти

#Область ОптимизацияМаршрута

&НаСервереБезКонтекста
Функция ПодготовитьПараметрыОптимизации(ТекДокумент)
	
	Возврат уатОбщегоНазначения_уэ.ПодготовитьПараметрыОптимизации(ТекДокумент)
	
КонецФункции

&НаКлиенте
Процедура ПослеОбработкиДокументов()
	
	флагОбработкаДокументовОптимизацияМаршрута = Ложь;
	Если КоличествоОптимизированныхМаршрутныхЛистов >= МаршрутныеЛистыТребующиеОптимизации.Количество() Тогда
		флагОбработкаДокументовОптимизацияМаршрута = Истина;
	КонецЕсли;
	
	Если флагОбработкаДокументовОптимизацияМаршрута Тогда
		ОтключитьОбработчикОжидания("ПослеОбработкиДокументов");
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОптимизацияМаршрута()
	Если ОптимизацияМаршрутаМожноВыполнять Тогда
		Если КоличествоОптимизированныхМаршрутныхЛистов >= МаршрутныеЛистыТребующиеОптимизации.Количество() Тогда
			ОтключитьОбработчикОжидания("ОптимизацияМаршрута");
		Иначе
			ОптимизацияМаршрутаФрагмент(МаршрутныеЛистыТребующиеОптимизации[КоличествоОптимизированныхМаршрутныхЛистов].Значение);
			ОптимизацияМаршрутаМожноВыполнять = Ложь;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОптимизацияМаршрутаФрагмент(ТекДокумент)
	
	ПараметрыОптимизации = ПодготовитьПараметрыОптимизации(ТекДокумент);
	Если ПараметрыОптимизации.Свойство("ОписаниеОшибки") И ЗначениеЗаполнено(ПараметрыОптимизации.ОписаниеОшибки) Тогда
		КоличествоОптимизированныхМаршрутныхЛистов = КоличествоОптимизированныхМаршрутныхЛистов + 1;
		ТекстНСтр = НСтр("Оптимизация маршрута в документе ""%1"" отменена из-за возникших ошибок:");
		ОбщегоНазначенияКлиент.СообщитьПользователю(ТекстНСтр);
		ОбщегоНазначенияКлиент.СообщитьПользователю(ПараметрыОптимизации.ОписаниеОшибки);
		Возврат;
	КонецЕсли;
	флRarusVRP = ПараметрыОптимизации.АлгоритмОптимальногоПерестроения = "RarusVRP";
	
	ПараметрыОптимизации.Вставить("ТекДокумент", ТекДокумент);
	
	Отказ = Ложь;
	ЗаданВопрос = Ложь;
	Оповещение = Новый ОписаниеОповещения("ОптимальноеПерестроениеЗаказовПослеПроверкиЧислаЗаказов", ЭтотОбъект, ПараметрыОптимизации);
	уатОбщегоНазначенияКлиент_уэ.ПредупредитьОБольшомЧислеЗаказов(ПараметрыОптимизации, Оповещение, Отказ, ЗаданВопрос);
	
	Если Не Отказ И Не ЗаданВопрос Тогда
		ОптимальноеПерестроениеЗаказовПослеПроверкиЧислаЗаказов(КодВозвратаДиалога.Да, ПараметрыОптимизации);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОптимальноеПерестроениеЗаказовПослеПроверкиЧислаЗаказов(РезультатВопроса, ПараметрыОптимизации) Экспорт
	
	Если РезультатВопроса <> КодВозвратаДиалога.Да Тогда
		Возврат;
	КонецЕсли;
	
	Если ПараметрыОптимизации.АлгоритмОптимальногоПерестроения <> "Яндекс"
		И ПараметрыОптимизации.АлгоритмОптимальногоПерестроения <> "RarusVRP"
		И Не уатЗащищенныеФункцииСервер_уэ.ВремяРасстояниеМеждуПунктамиЗаполнено(ПараметрыОптимизации.мсвДопАдреса) Тогда 
		
		Если ПараметрыОптимизации.НастройкиМаршрутизации.Оптимизация_НастройкаМаршрутизацияВФоновомРежиме Тогда
			ДлительнаяОперация = НачатьОбновлениеРасстоянийМеждуПунктамиНаСервере(ПараметрыОптимизации.мсвДопАдреса);
			ОповещениеОЗавершении = Новый ОписаниеОповещения(
				"ОптимальноеПерестроениеЗаказовПослеОбновленияПунктов", ЭтотОбъект, ПараметрыОптимизации);
			ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
			ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
		Иначе
			уатЗащищенныеФункцииСервер_уэ.ОбновитьВремяРасстояниеМеждуПунктами(, ПараметрыОптимизации.мсвДопАдреса);
			ОптимальноеПерестроениеЗаказовПослеОбновленияПунктов(Неопределено, ПараметрыОптимизации);
		КонецЕсли;
	Иначе
		ОптимальноеПерестроениеЗаказовПослеОбновленияПунктов(Неопределено, ПараметрыОптимизации);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция НачатьОбновлениеРасстоянийМеждуПунктамиНаСервере(мсвДопАдреса)
	Возврат ДлительныеОперации.ВыполнитьПроцедуру(, "уатЗащищенныеФункцииСервер_уэ.ОбновитьВремяРасстояниеМеждуПунктами",
		Неопределено, мсвДопАдреса);
КонецФункции

&НаКлиенте
Процедура ОптимальноеПерестроениеЗаказовПослеОбновленияПунктов(Результат, ДопПараметры) Экспорт
	
	Если ДопПараметры.АлгоритмОптимальногоПерестроения = "Яндекс"
		Или ДопПараметры.АлгоритмОптимальногоПерестроения = "RarusVRP" Тогда
		ТекстОшибки = "";
		
		IDзадачиВнешнийМаршрутизаторОптимизацияМаршрута = ВнешняяМаршрутизация_ДобавитьЗадачуSVRP(ДопПараметры, ТекстОшибки);
		
		Если Не ЗначениеЗаполнено(IDзадачиВнешнийМаршрутизаторОптимизацияМаршрута) Тогда 
			ПоказатьПредупреждение(, ТекстОшибки);
			КоличествоОптимизированныхМаршрутныхЛистов = КоличествоОптимизированныхМаршрутныхЛистов + 1;
			Возврат;
		КонецЕсли;
		
		УстановитьАдресХранилищаДляРезультатаМаршрутизацииОптимизацииМаршрута();
		
		ЗаданиеВыполнено = ВнешняяМаршрутизация_ПолучитьРезультатSVRP(АдресХранилищаДООптимизацияМаршрута,
			IDзадачиВнешнийМаршрутизаторОптимизацияМаршрута, ТекстОшибки, флRarusVRP);
		Если ЗаданиеВыполнено Тогда
			Если ТекстОшибки = "" Тогда 
				ОптимальноеПерестроениеЗаказовПослеМаршрутизации(Неопределено, ДопПараметры);
			Иначе 
				ПоказатьПредупреждение(, ТекстОшибки);
				КоличествоОптимизированныхМаршрутныхЛистов = КоличествоОптимизированныхМаршрутныхЛистов + 1;
			КонецЕсли;
			
			IDзадачиВнешнийМаршрутизаторОптимизацияМаршрута = Неопределено;
			
			Возврат;
		КонецЕсли;
		
		ОповещениеПослеДлительнойОперацииОптимизацияМаршрута = Новый ОписаниеОповещения("ОптимальноеПерестроениеЗаказовПослеМаршрутизации", ЭтотОбъект, ДопПараметры);
		
		// Операция еще не завершена, выполняется с помощью фонового задания (асинхронно).
		ПараметрыОбработчикаОжидания = Новый Структура(
			"МинимальныйИнтервал,
			|МаксимальныйИнтервал,
			|ТекущийИнтервал,
			|КоэффициентУвеличенияИнтервала", 
			1, 15, 1, 1.4);
		
		ПодключитьОбработчикОжидания("Подключаемый_ВнешняяМаршрутизация_ПроверитьВыполнениеЗадания", 1, Истина);
		
	ИначеЕсли ДопПараметры.НастройкиМаршрутизации.Оптимизация_НастройкаМаршрутизацияВФоновомРежиме Тогда 
		
		ДлительнаяОперация = НачатьОбновлениеОптимизациюМаршрутаНаСервере(ДопПараметры);
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ОптимальноеПерестроениеЗаказовПослеМаршрутизации", ЭтотОбъект, ДопПараметры);
		ПараметрыОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
		ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, ОповещениеОЗавершении, ПараметрыОжидания);
		
	Иначе 
		УстановитьАдресХранилищаДляРезультатаМаршрутизацииОптимизацииМаршрута();
		РаспределитьЗаказыВМаршрутномЛисте(АдресХранилищаДООптимизацияМаршрута, ДопПараметры);
		ОптимальноеПерестроениеЗаказовПослеМаршрутизации(Неопределено, ДопПараметры);
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Процедура РаспределитьЗаказыВМаршрутномЛисте(АдресВременногоХранилища, ПараметрыОптимизации)
	Обработки.уатРедакторЦепочкиДокументов_уэ.РаспределитьЗаказыВМаршрутномЛисте(АдресВременногоХранилища, ПараметрыОптимизации);
КонецПроцедуры

&НаСервере
Функция НачатьОбновлениеОптимизациюМаршрутаНаСервере(ПараметрыОптимизации)
	УстановитьАдресХранилищаДляРезультатаМаршрутизацииОптимизацииМаршрута();
	Возврат ДлительныеОперации.ВыполнитьПроцедуру(, "Обработки.уатРедакторЦепочкиДокументов_уэ.РаспределитьЗаказыВМаршрутномЛисте",
		АдресХранилищаДООптимизацияМаршрута, ПараметрыОптимизации);
КонецФункции

&НаСервереБезКонтекста
Функция ВнешняяМаршрутизация_ДобавитьЗадачуSVRP(ПараметрыМаршрутизации, ТекстОшибки)
	
	МодульВнешнейМаршрутизации = ОбщегоНазначения.ОбщийМодуль("уатВнешнийМаршрутизаторСервер_уэ");
	
	Возврат МодульВнешнейМаршрутизации.Маршрутизация_ДобавитьЗадачуSVRP(
		ПараметрыМаршрутизации.ДанныеПоЗаказам.ДатаВыезда,
		ПараметрыМаршрутизации.ХарактеристикиСцепки,
		ПараметрыМаршрутизации.ДанныеПоЗаказам,   
		ПараметрыМаршрутизации.НастройкиМаршрутизации,
		ТекстОшибки
	);
	
КонецФункции

&НаСервере
Процедура УстановитьАдресХранилищаДляРезультатаМаршрутизацииОптимизацииМаршрута()
	
	АдресХранилищаДООптимизацияМаршрута = ПоместитьВоВременноеХранилище(Неопределено, УникальныйИдентификатор);
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_ВнешняяМаршрутизация_ПроверитьВыполнениеЗадания()
	
	ТекстОшибки = "";
	
	ЗаданиеВыполнено = ВнешняяМаршрутизация_ПолучитьРезультатSVRP(АдресХранилищаДООптимизацияМаршрута,
		IDзадачиВнешнийМаршрутизаторОптимизацияМаршрута, ТекстОшибки, флRarusVRP);
	
	Если ЗаданиеВыполнено Тогда
		
		Если ТекстОшибки = "" Тогда 
			Если Не ОповещениеПослеДлительнойОперацииОптимизацияМаршрута = Неопределено Тогда 
				ВыполнитьОбработкуОповещения(ОповещениеПослеДлительнойОперацииОптимизацияМаршрута);
				ОповещениеПослеДлительнойОперацииОптимизацияМаршрута = Неопределено;
			КонецЕсли;
			
		Иначе 
			ПоказатьПредупреждение(, ТекстОшибки);
		КонецЕсли;
		
		IDзадачиВнешнийМаршрутизаторОптимизацияМаршрута = Неопределено;
		
		Возврат;
	КонецЕсли;
	
	ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.ТекущийИнтервал * ПараметрыОбработчикаОжидания.КоэффициентУвеличенияИнтервала;
	Если ПараметрыОбработчикаОжидания.ТекущийИнтервал > ПараметрыОбработчикаОжидания.МаксимальныйИнтервал Тогда
		ПараметрыОбработчикаОжидания.ТекущийИнтервал = ПараметрыОбработчикаОжидания.МаксимальныйИнтервал;
	КонецЕсли;
	
	ПодключитьОбработчикОжидания(
		"Подключаемый_ВнешняяМаршрутизация_ПроверитьВыполнениеЗадания", 
		ПараметрыОбработчикаОжидания.ТекущийИнтервал, 
		Истина
	);
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ВнешняяМаршрутизация_ПолучитьРезультатSVRP(АдресВрХранилища, IDзадачи, ТекстОшибки, флRarusVRP)
	
	МодульВнешнейМаршрутизации = ОбщегоНазначения.ОбщийМодуль("уатВнешнийМаршрутизаторСервер_уэ");
	
	Возврат МодульВнешнейМаршрутизации.Маршрутизация_ПолучитьРезультатSVRP(
		АдресВрХранилища, IDзадачи, ТекстОшибки, флRarusVRP);
	
КонецФункции

&НаСервере
Процедура ОптимальноеПерестроениеЗаказовПослеМаршрутизации(Результат, ДопПараметры) Экспорт
	
	ТекстПредупреждения = "";
	ВыполнитьРаспределениеСервер(ДопПараметры, ТекстПредупреждения);
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьРаспределениеСервер(ДопПараметры, ТекстПредупреждения)
	
	РаспредЗаказов = ПолучитьИзВременногоХранилища(АдресХранилищаДООптимизацияМаршрута);
	
	Если РаспредЗаказов = Неопределено Или Не ТипЗнч(РаспредЗаказов) = Тип("Структура") Или Не РаспредЗаказов.Свойство("пул") Тогда
		КоличествоОптимизированныхМаршрутныхЛистов = КоличествоОптимизированныхМаршрутныхЛистов + 1;
		ОптимизацияМаршрутаМожноВыполнять = Истина;
		Возврат;
	КонецЕсли;
	
	ДокОбъект = ДопПараметры.ТекДокумент.ПолучитьОбъект();
	уатОбщегоНазначения_уэ.ВыполнитьРаспределениеСервер(ДокОбъект, ДопПараметры.ДанныеПоЗаказам, РаспредЗаказов);
	
	флВнешняяМаршрутизация = РаспредЗаказов.Свойство("ВнешняяМаршрутизация");
	Если Не флВнешняяМаршрутизация Тогда
		ДокОбъект.ОбновитьВремяРасстояниеМеждуПунктами(Истина);
	КонецЕсли;

	Если ДокОбъект.ВидОперации = ПредопределенноеЗначение("Перечисление.уатВидыОперацийМаршрутныйЛист.ПоЗаказуГрузоотправителя") Тогда 
		ПересчитатьПлановоеВремя(ДокОбъект);
	КонецЕсли;
	
	Попытка
		ДокОбъект.Записать();
	Исключение
	КонецПопытки;
	
	КоличествоОптимизированныхМаршрутныхЛистов = КоличествоОптимизированныхМаршрутныхЛистов + 1;
	ОптимизацияМаршрутаМожноВыполнять = Истина;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьПлановоеВремя(ДокОбъект, ДатаВыездаНаМаршрут=Неопределено)
	
	тблЗаказы = ДокОбъект.Заказы.Выгрузить();
	Документы.уатМаршрутныйЛист.ПересчитатьПлановоеВремя(тблЗаказы, ДокОбъект.ДатаИВремяОтправленияПлан, ДокОбъект.ПересчетВремени);
	ДокОбъект.Заказы.Загрузить(тблЗаказы);
	
КонецПроцедуры

#КонецОбласти

&НаКлиенте
Процедура ПроверитьОбновлениеГрузовВДокументах()
	
	НеотмеченныеДокументыГрузов = ПолучитьНеотмеченныеДокументыГрузов();
	
	ТекстВопроса = НСтр("ru = 'Для синхронизации данных Заказов на ТС с Маршрутными и Путевыми листами рекомендуется %1.
		|Выполнить действия?'");
	ТекстВключитьОперацию = НСтр("ru = 'включить операцию
		|""Перенести в связанные документы - %1""'");
	Если ДетализацияЗаказа = ПредопределенноеЗначение("Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам") Тогда
		ТекстВключитьОперацию = СтрШаблон(ТекстВключитьОперацию, НСтр("ru = 'Грузовой состав'"));
	Иначе
		ТекстВключитьОперацию = СтрШаблон(ТекстВключитьОперацию, НСтр("ru = 'Товары'"));
	КонецЕсли;
	ТекстОтметитьДокументы = НСтр("ru = 'отметить для изменения следующие связанные документы:'");
	Для Каждого ТекДокумент Из НеотмеченныеДокументыГрузов Цикл
		ТекстОтметитьДокументы = ТекстОтметитьДокументы + Символы.ПС + Строка(ТекДокумент);
	КонецЦикла;
	
	ТребуютсяДополнительныеДействия = Истина;
	Если НеотмеченныеДокументыГрузов.Количество() > 0
		И (Не ОперацияПеренестиВСвязанныеДокументы Или Не ИзмененыГрузыПоЗаказу) Тогда
		РекомендуемыеДействия = СтрШаблон(НСтр("ru = '%1
			|а также %2'"), ТекстОтметитьДокументы, ТекстВключитьОперацию);
		ТекстВопроса = СтрШаблон(ТекстВопроса, РекомендуемыеДействия);
	ИначеЕсли НеотмеченныеДокументыГрузов.Количество() > 0 Тогда
		ТекстВопроса = СтрШаблон(ТекстВопроса, ТекстОтметитьДокументы);
	ИначеЕсли Не ОперацияПеренестиВСвязанныеДокументы Или Не ИзмененыГрузыПоЗаказу Тогда
		ТекстВопроса = СтрШаблон(ТекстВопроса, ТекстВключитьОперацию);
	Иначе
		ТребуютсяДополнительныеДействия = Ложь;
	КонецЕсли;
	
	Если ТребуютсяДополнительныеДействия Тогда
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ПроверитьОбновлениеГрузовВДокументахОтвет", ЭтаФорма,
			Новый Структура("НеотмеченныеДокументыГрузов", НеотмеченныеДокументыГрузов));
		ПоказатьВопрос(ОповещениеОЗавершении, ТекстВопроса, РежимДиалогаВопрос.ДаНет);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьНеотмеченныеДокументыГрузов()
	
	НеотмеченныеДокументыГрузов = Новый Массив;
	ОтмеченныеГрузы = Новый Массив;
	СтруктураОтбора = Новый Структура("Выбран", Истина);
	Если ДетализацияЗаказа = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам Тогда
		ОтмеченныеСтроки = Объект.ГрузовойСостав.НайтиСтроки(СтруктураОтбора);
		Для Каждого ТекСтрока Из ОтмеченныеСтроки Цикл
			ОтмеченныеГрузы.Добавить(ТекСтрока.ГрузовоеМесто);
		КонецЦикла;
	ИначеЕсли ДетализацияЗаказа = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам Тогда
		ОтмеченныеСтроки = Объект.Товары.НайтиСтроки(СтруктураОтбора);
		Для Каждого ТекСтрока Из ОтмеченныеСтроки Цикл
			ОтмеченныеГрузы.Добавить(ТекСтрока.Номенклатура);
		КонецЦикла;
	Иначе
		// Операции, для которых выполняется эта проверка, недоступны при детализации по заказу в целом
		Возврат НеотмеченныеДокументыГрузов;
	КонецЕсли;
	
	ВсеМаршрутныеПутевыеЛисты = ПолучитьВсеМаршрутныеПутевыеЛисты();
	ТаблицаНоменклатура = ПолучитьДокументыГрузов(ОтмеченныеГрузы, ВсеМаршрутныеПутевыеЛисты);
	ТаблицаНоменклатура.Свернуть("Документ");
	ДокументыГрузов = ТаблицаНоменклатура.ВыгрузитьКолонку("Документ");
	
	Для Каждого ТекТипДокумента Из СвязанныеДокументы.ПолучитьЭлементы() Цикл
		Если ТекТипДокумента.Документ = Тип("ДокументСсылка.уатМаршрутныйЛист")
			Или ТекТипДокумента.Документ = Тип("ДокументСсылка.уатПутевойЛист") Тогда
			Для Каждого ТекДокумент Из ТекТипДокумента.ПолучитьЭлементы() Цикл
				Если Не ТекДокумент.Выбран
					И ДокументыГрузов.Найти(ТекДокумент.Документ) <> Неопределено
					И ТекДокумент.РазрешеноИзменениеРедактором
					И ТекДокумент.РазрешеноИзменениеПоСтатусу
					И Не ТекДокумент.НетПравНаИзменение Тогда
					НеотмеченныеДокументыГрузов.Добавить(ТекДокумент.Документ);
				КонецЕсли;
			КонецЦикла;
		КонецЕсли;
	КонецЦикла;
	
	Возврат НеотмеченныеДокументыГрузов;
	
КонецФункции

&НаКлиенте
Процедура ПроверитьОбновлениеГрузовВДокументахОтвет(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ОперацияПеренестиВСвязанныеДокументы = Истина;
		ИзмененыГрузыПоЗаказу = Истина;
		Для Каждого ТекТипДокумента Из СвязанныеДокументы.ПолучитьЭлементы() Цикл
			Если ТекТипДокумента.Документ = Тип("ДокументСсылка.уатМаршрутныйЛист")
				Или ТекТипДокумента.Документ = Тип("ДокументСсылка.уатПутевойЛист") Тогда
				Для Каждого ТекДокумент Из ТекТипДокумента.ПолучитьЭлементы() Цикл
					Если ДопПараметры.НеотмеченныеДокументыГрузов.Найти(ТекДокумент.Документ) <> Неопределено Тогда
						ТекДокумент.Выбран = Истина;
						ПроставитьПометкиВверх(ТекДокумент);
					КонецЕсли;
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		УстановитьВидимость();
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПредставленияОтрезковПути()
	
	Если ДетализацияЗаказа = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам Тогда
		ТаблицаГрузов = Объект.ГрузовойСостав;
	ИначеЕсли ДетализацияЗаказа = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам Тогда
		ТаблицаГрузов = Объект.Товары;
	Иначе
		Возврат;
	КонецЕсли;
	
	Если Объект.ОтрезкиПути.Количество() > 0 Тогда
		МассивПредставлений = ПолучитьПредставленияОтрезковПути();
		Для Сч = 0 По МассивПредставлений.Количество()-1 Цикл
			ТаблицаГрузов[Сч].ПредставлениеОтрезкаПути = МассивПредставлений[Сч].Представление;
		КонецЦикла;
	Иначе
		// Документ, в котором отрезки пути еще не заполнены, или документ, для которого не выполнены обработчики обновления.
		Для Каждого ТекСтрока Из ТаблицаГрузов Цикл
			ТекСтрока.ПредставлениеОтрезкаПути = ТекСтрока.ОтрезокПути;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьПредставленияОтрезковПути()

	Если ДетализацияЗаказа = ПредопределенноеЗначение("Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам")
		Или ДетализацияЗаказа = ПредопределенноеЗначение("Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам") Тогда
		КоличествоГрузов = Объект.ГрузовойСостав.Количество();
	Иначе
		КоличествоГрузов = Объект.Товары.Количество();
	КонецЕсли;
	
	МассивОтрезков = уатОбщегоНазначения_проф.ПолучитьНачальныеКонечныеПунктыГрузов(
		Объект.ОтрезкиПути, КоличествоГрузов, Объект.СтруктураДокументаНовая.ПромежуточныеПункты.Количество());
	
	Для Каждого ТекПредставление Из МассивОтрезков Цикл
		Если ТекПредставление.От > 0 И ТекПредставление.До > -1 Тогда
			ПредставлениеТекущегоОтрезка = уатОбщегоНазначения_проф.ПолучитьПредставлениеОтрезкаПути( 
				Объект.СтруктураДокументаНовая.ПромежуточныеПункты[ТекПредставление.От-1].Пункт,
				Объект.СтруктураДокументаНовая.ПромежуточныеПункты[ТекПредставление.До-1].Пункт,
				ТекПредставление.От,
				ТекПредставление.До
			);
		Иначе
			ПредставлениеТекущегоОтрезка = "";
		КонецЕсли;
		ТекПредставление.Вставить("Представление", ПредставлениеТекущегоОтрезка);
	КонецЦикла;
	
	Возврат МассивОтрезков;
	
КонецФункции

&НаКлиенте
Процедура ОбработатьИзменениеОтрезкаПути(Элемент, ВыбранноеЗначение)
	
	Если Элемент <> Элементы.Товары И Элемент <> Элементы.ГрузовойСостав Тогда
		Возврат;
	КонецЕсли;
	
	// Удаление старых строк, связанных с текущим грузом, из ТЧ ОтрезкиПути
	ТекущиеДанные = Элемент.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	НомерСтрокиГруза = ТекущиеДанные.НомерСтроки;
	Сч = Объект.ОтрезкиПути.Количество();
	Пока Сч > 0 Цикл
		Сч = Сч-1;
		Если Объект.ОтрезкиПути[Сч].Груз = НомерСтрокиГруза Тогда
			Объект.ОтрезкиПути.Удалить(Сч);
		КонецЕсли;
	КонецЦикла;
	
	// Добавление новых строк, связанных с текущим грузом, в ТЧ ОтрезкиПути
	ПоложениеРазделителя = СтрНайти(ВыбранноеЗначение, " - ");
	Если ПоложениеРазделителя > 0 Тогда
		От = Число(Лев(ВыбранноеЗначение, ПоложениеРазделителя));
		До = Число(Прав(ВыбранноеЗначение, ПоложениеРазделителя));
		
		Для Сч = От По До-1 Цикл
			НайденныеСтроки = Объект.ОтрезкиПути.НайтиСтроки(Новый Структура("ПунктОтправления, ПунктНазначения", Сч, Сч+1));
			Если НайденныеСтроки.Количество() > 0 Тогда
				id = НайденныеСтроки[0].id;
			Иначе
				id = Строка(Новый УникальныйИдентификатор);
			КонецЕсли;
			
			НоваяСтрока = Объект.ОтрезкиПути.Добавить();
			НоваяСтрока.ПунктОтправления = Сч;
			НоваяСтрока.ПунктНазначения = Сч+1;
			НоваяСтрока.Груз = НомерСтрокиГруза;
			НоваяСтрока.id = id;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСпискиВыбораОтрезковПути()
	
	Элементы.ГрузовойСоставОтрезокПути.СписокВыбора.Очистить();
	Элементы.ТоварыОтрезокПути.СписокВыбора.Очистить();
	
	Для Каждого ТекВариант Из ПолучитьВариантыОтрезков() Цикл 
		Элементы.ГрузовойСоставОтрезокПути.СписокВыбора.Добавить(ТекВариант.Значение, ТекВариант.Представление);
		Элементы.ТоварыОтрезокПути.СписокВыбора.Добавить(ТекВариант.Значение, ТекВариант.Представление);
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Функция ПолучитьВариантыОтрезков()
	
	ВариантыОтрезков = Новый Массив();
	Если Не Объект.СтруктураДокументаНовая.FTL
		Или Не Объект.СтруктураДокументаНовая.Свойство("ПромежуточныеПункты") Тогда
		Возврат ВариантыОтрезков;
	КонецЕсли;
	
	Для СчПогрузка = 0 По Объект.СтруктураДокументаНовая.ПромежуточныеПункты.Количество() - 1 Цикл 
		СтрокаПогрузка = Объект.СтруктураДокументаНовая.ПромежуточныеПункты[СчПогрузка];
		
		Если Не (СтрокаПогрузка.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Погрузка
				Или СтрокаПогрузка.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяПогрузка) Тогда 
			Продолжить;
		КонецЕсли;
		
		Для СчРазгрузка = (СчПогрузка + 1) По Объект.СтруктураДокументаНовая.ПромежуточныеПункты.Количество() - 1 Цикл 
			СтрокаРазгрузка = Объект.СтруктураДокументаНовая.ПромежуточныеПункты[СчРазгрузка];
			
			Если Не (СтрокаРазгрузка.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.Разгрузка
					Или СтрокаРазгрузка.ТипТочкиМаршрута = Перечисления.уатТипыТочекМаршрута.ДополнительнаяРазгрузка) Тогда 
				Продолжить;
			КонецЕсли;
			
			ВариантОтрезка = Новый Структура;
			ВариантОтрезка.Вставить("Значение", Строка(СчПогрузка+1) + " - " + Строка(СчРазгрузка+1));
			ПредставлениеОтрезка = уатОбщегоНазначения_проф.ПолучитьПредставлениеОтрезкаПути(
				СтрокаПогрузка.Пункт, СтрокаРазгрузка.Пункт, СчПогрузка+1, СчРазгрузка+1);
			ВариантОтрезка.Вставить("Представление", ПредставлениеОтрезка);
			ВариантыОтрезков.Добавить(ВариантОтрезка);
		КонецЦикла;
	КонецЦикла;
	
	Возврат ВариантыОтрезков;
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЭПДДляЗаменыТСВодителя(Рейс)
	
	Запрос = Новый Запрос(); 
	Запрос.УстановитьПараметр("Рейс", Рейс);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатСвязанныеДокументыЭПД.ЭПД КАК ЭПД
	|ИЗ
	|	РегистрСведений.уатСвязанныеДокументыЭПД КАК уатСвязанныеДокументыЭПД
	|ГДЕ
	|	уатСвязанныеДокументыЭПД.Рейс = &Рейс
	|
	|СГРУППИРОВАТЬ ПО
	|	уатСвязанныеДокументыЭПД.ЭПД";
	Выборка   = Запрос.Выполнить().Выбрать();
	
	ЗаменятьТСВодителя = Ложь;
	
	МассивЭПД = Новый Массив();
	Пока Выборка.Следующий() Цикл
		ДанныеСостоянияЭДО = ИнтеграцияЭДОВызовСервера.ДанныеСостоянияЭДОДляФормыОбъектаУчета(Выборка.ЭПД);
		ТитулыПоДокументу = ОбменСГИСЭПДВызовСервера.ПолучитьТитулыПоДокументу(Выборка.ЭПД, Истина);
		
		Если ДанныеСостоянияЭДО.ПредставлениеСостояния <> "Закрыт с отклонением" Тогда
			Если ТитулыПоДокументу.Получить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул1")) <> Неопределено
				И ТитулыПоДокументу.Получить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул2")) <> Неопределено
				И ДанныеСостоянияЭДО.ПредставлениеСостояния <> "Требуется повторная отправка" Тогда
				
				Если ТитулыПоДокументу.Получить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул3")) = Неопределено
					И ТитулыПоДокументу.Получить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул4")) = Неопределено Тогда
					ЗаменятьТСВодителя = Истина;
					МассивЭПД.Добавить(Выборка.ЭПД);
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;  
	
	Возврат МассивЭПД;
	
КонецФункции

&НаКлиенте
Процедура ВопросПереадресовкаТСЭПДЗавершение(РезультатВопроса, МассивЭПД) Экспорт

	ВопросПереадресовкаТСЭПД  = Истина;
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Для Каждого ТекЭПД Из МассивЭПД Цикл
			ПараметрыФормы = Новый Структура();
			ПараметрыФормы.Вставить("Ключ", ТекЭПД);
			ПараметрыФормы.Вставить("СоздатьЭстафету", Истина);
			
			ОткрытьФорму("Документ.ЭлектроннаяТранспортнаяНакладная.Форма.ОсновнаяФорма", ПараметрыФормы,ЭтотОбъект);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЭПДДляПереадресовки(ЗаказНаТС)
	
	Запрос = Новый Запрос(); 
	Запрос.УстановитьПараметр("ЗаказНаТС", ЗаказНаТС);
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	               |	уатСвязанныеДокументыЭПД.ЭПД КАК ЭПД
	               |ИЗ
	               |	РегистрСведений.уатСвязанныеДокументыЭПД КАК уатСвязанныеДокументыЭПД
	               |ГДЕ
	               |	уатСвязанныеДокументыЭПД.ЗаказНаТС = &ЗаказНаТС
	               |
	               |СГРУППИРОВАТЬ ПО
	               |	уатСвязанныеДокументыЭПД.ЭПД";
	Выборка   = Запрос.Выполнить().Выбрать();
	
	МассивЭПД = Новый Массив();
	Пока Выборка.Следующий() Цикл
		ДанныеСостоянияЭДО = ИнтеграцияЭДОВызовСервера.ДанныеСостоянияЭДОДляФормыОбъектаУчета(Выборка.ЭПД);
		ТитулыПоДокументу = ОбменСГИСЭПДВызовСервера.ПолучитьТитулыПоДокументу(Выборка.ЭПД, Истина);
		
		Если ДанныеСостоянияЭДО.ПредставлениеСостояния <> "Закрыт с отклонением" Тогда
			Если ТитулыПоДокументу.Получить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул1")) <> Неопределено
				И ТитулыПоДокументу.Получить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул2")) <> Неопределено
				И ДанныеСостоянияЭДО.ПредставлениеСостояния <> "Требуется повторная отправка" Тогда
				
				Если ТитулыПоДокументу.Получить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул2")) <> Неопределено
					И ТитулыПоДокументу.Получить(ПредопределенноеЗначение("Перечисление.ТипыЭлементовРегламентаЭДО.ЭТрН_Титул3")) = Неопределено Тогда
					МассивЭПД.Добавить(Выборка.ЭПД);
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли;
	КонецЦикла;  
	
	Возврат МассивЭПД;
	
КонецФункции

&НаКлиенте
Процедура ВопросПереадресовкаЗавершение(РезультатВопроса, МассивЭПД) Экспорт

	ВопросПереадресовкаЭПД  = Истина;
	Если РезультатВопроса = КодВозвратаДиалога.Да Тогда
		Для Каждого ТекЭПД Из МассивЭПД Цикл
			ПараметрыФормы = Новый Структура();
			ПараметрыФормы.Вставить("Ключ", ТекЭПД);
			ПараметрыФормы.Вставить("СоздатьПереадресовку", Истина);
			
			ОткрытьФорму("Документ.ЭлектроннаяТранспортнаяНакладная.Форма.ОсновнаяФорма", ПараметрыФормы,ЭтотОбъект);
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

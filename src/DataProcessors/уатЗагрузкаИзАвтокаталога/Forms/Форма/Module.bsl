
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// начало блока стандартных операций
	ДопПараметрыОткрытие = Новый Структура("ИмяФормы", ИмяФормы);
	уатЗащищенныеФункцииСервер.уатОбработкаФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	// конец блока стандартных операций
	
	НастроитьПолеКодировкаФайла();
	
	Элементы.СтранаПроисхождения.Видимость = уатОбщегоНазначенияТиповые.уатЕстьРеквизитСправочника("СтранаПроисхождения", "Номенклатура");
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// начало блока стандартных операций
	уатЗащищенныеФункцииКлиент.уатОбработкаФормаПриОткрытии(Отказ, ДопПараметрыОткрытие);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	// конец блока стандартных операций
	
	ЗагрузитьНастройки();
	
	Если Разделитель = Символы.Таб Тогда 
		ДействиеТабулятор(Элементы.РазделительКонтекстноеМеню.ПодчиненныеЭлементы.РазделительКонтекстноеМенюТабулятор);
	Иначе
		ДействиеСимвол(Элементы.РазделительКонтекстноеМеню.ПодчиненныеЭлементы.РазделительКонтекстноеМенюСимвол);
	КонецЕсли; 
	
	ФорматФайлаОбмена = "Автомобиль Группа Раздел Иллюстрация Наименование_ Номер OLE1 OLE2 OLE3 OLE4";
	
	ОбновитьОтображениеДанных();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ДублированиеДеталейСОдинаковымиКаталоговымиНомерамиПриИзменении(Элемент)
	СохранитьНастройки();
КонецПроцедуры

&НаКлиенте
Процедура РазделительПриИзменении(Элемент)
	СохранитьНастройки();
КонецПроцедуры

&НаКлиенте
Процедура ЕдиницаИзмеренияПриИзменении(Элемент)
	СохранитьНастройки();
КонецПроцедуры

&НаКлиенте
Процедура СтавкаНДСПриИзменении(Элемент)
	СохранитьНастройки();
КонецПроцедуры

&НаКлиенте
Процедура СтранаПроисхожденияПриИзменении(Элемент)
	СохранитьНастройки();
КонецПроцедуры

&НаКлиенте
Процедура ФайлОбменаНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	
	Обработчик = Новый ОписаниеОповещения("ПоказатьДиалогВыбораФайла", ЭтотОбъект);
	НачатьПодключениеРасширенияРаботыСФайлами(Обработчик);

КонецПроцедуры

&НаКлиенте
Процедура ФайлОбменаОткрытие(Элемент, СтандартнаяОбработка)
	Если ЗначениеЗаполнено(ФайлОбмена) Тогда
		Попытка
			НачатьЗапускПриложения(Новый ОписаниеОповещения("НачатьЗапускПриложенияЗавершение", ЭтотОбъект),ФайлОбмена);
		Исключение
		КонецПопытки;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ДействиеТабулятор(Команда)
	
	Разделитель                                    = Символы.Таб;
	Элементы.Разделитель.ТолькоПросмотр            = Истина;
	Элементы.Разделитель.АвтоОтметкаНезаполненного = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ДействиеСимвол(Команда)
	
	Если Разделитель = Символы.Таб Или ПустаяСтрока(СокрЛП(Разделитель))Тогда
		Разделитель = ";";
	КонецЕсли; 
	
	Элементы.Разделитель.ТолькоПросмотр            = Ложь;
	Элементы.Разделитель.АвтоОтметкаНезаполненного = Истина;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФайл(Команда)
	
	Обработчик = Новый ОписаниеОповещения("ПрочитатьДанныеИзФайлаПослеПодключения", ЭтотОбъект);
	НачатьПодключениеРасширенияРаботыСФайлами(Обработчик);
	
КонецПроцедуры

&НаКлиенте
Процедура ОК(Команда)
	
	ТекстСообщения = НСтр("en='Started download of products and services list to catallog.';ru='Начата загрузка списка номенклатуры в справочник.'") + Символы.ПС
		+ НСтр("en='Operation can take a long time...';ru='Операция может занять длительное время...'");
	ПоказатьОповещениеПользователя(ТекстСообщения);
	ВыполнитьЗагрузкуНаСервере();
	УстановитьИндексКартинкиНомерЦвета();
	ТекстНСТР = НСтр("en='Download the catalog is completed.';ru='Загрузка в справочник завершена.'");
	ПоказатьОповещениеПользователя(ТекстНСТР);
	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьШаблон(Команда)
	ПолноеИмяФайла = НСтр("en = 'Autocatalogue template'; ru = 'Шаблон автокаталога'") + ".txt";
	
	ДиалогВыбораФайла = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Сохранение);
	ДиалогВыбораФайла.ПолноеИмяФайла = ПолноеИмяФайла;
	ДиалогВыбораФайла.Фильтр = НСтр("en = 'Text document'; ru = 'Tекстовый документ'") + " (*.txt)|*.txt";
	ДиалогВыбораФайла.МножественныйВыбор = Ложь;
	ДиалогВыбораФайла.Заголовок = "Выберите файл";
	
	ДополнительныеПараметры = Новый Структура();
	ДополнительныеПараметры.Вставить("КлючШаблона", "ШаблонЗагрузкиДанных");
	
	Оповещение = Новый ОписаниеОповещения("СохранитьШаблонФайлаПослеВыбораФайла", ЭтотОбъект, ДополнительныеПараметры);
	
	ДиалогВыбораФайла.Показать(Оповещение);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции  

&НаКлиенте
Процедура НачатьЗапускПриложенияЗавершение(КодВозврата, ДопПараметры) Экспорт	
	ДопОбработкаНеТребуется = Истина;	
КонецПроцедуры

&НаКлиенте
Процедура СохранитьШаблонФайлаПослеВыбораФайла(ВыбранныеФайлы, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ДокШаблона = Новый ТекстовыйДокумент;
	ДокШаблона = ПолучитьДокШаблонаДляСохранения(ДополнительныеПараметры.КлючШаблона);
	ДокШаблона.НачатьЗапись(, ВыбранныеФайлы[0]);
		
КонецПроцедуры

&НаСервере
Функция ПолучитьДокШаблонаДляСохранения(Знач КлючШаблона)
	
	Возврат РеквизитФормыВЗначение("Объект").ПолучитьМакет(КлючШаблона);
	
КонецФункции // ПолучитьТабДокШаблонаДляСохранения()

&НаКлиенте
Процедура ВыбратьФайлАвтокаталогаЗавершение(ВыбранныеФайлы, ДопПараметры) Экспорт
	
	Если ВыбранныеФайлы = Неопределено Тогда 
		Сообщение = Новый СообщениеПользователю();
		Сообщение.Текст = НСтр("en='You must select a file';ru='Необходимо выбрать файл'");
		Сообщение.Сообщить();
		Возврат;
	КонецЕсли;
	
	ФайлОбмена = ВыбранныеФайлы[0];
	
КонецПроцедуры

&НаСервере
Процедура НастроитьПолеКодировкаФайла()
	
	Элементы.КодировкаФайла.СписокВыбора.Добавить("UTF-8",  "UTF-8");
	Элементы.КодировкаФайла.СписокВыбора.Добавить("UTF-16", "UTF-16");
	Элементы.КодировкаФайла.СписокВыбора.Добавить("ANSI",   "ANSI");
	Элементы.КодировкаФайла.СписокВыбора.Добавить("OEM",    "OEM");
	
	КодировкаФайла = "UTF-8";
	
КонецПроцедуры

&НаСервере
Функция ОпределитьИндексыКартинкиЦвета(Узел)
	
	Результат = Новый Структура("Цвет, Картинка");
	
	ВремЦвет     = 0;
	ВремКартинка = 0;
	
	Если Узел.СсылкаНаСправочник=Справочники.Номенклатура.ПустаяСсылка() Тогда
		// Данного элемента нет в справочнике
		ВремЦвет = 1;
		Если Узел.Строки.Количество()>0 Тогда
			// Выводится группа, которой нет в справочнике
			ВремКартинка=6;
		Иначе
			// Выводится элемент, которого нет в справочнике
			ВремКартинка=7;
		КонецЕсли;
	Иначе
		// Элемент есть в справочнике
		ВремЦвет = 2;
		Если Узел.СсылкаНаСправочник.ЭтоГруппа Тогда
			// Элемент является группой
			Если Узел.СсылкаНаСправочник.Предопределенный Тогда
				// Это предопределенная группа
				ВремКартинка=10;
			Иначе
				Если Узел.СсылкаНаСправочник.ПометкаУдаления Тогда
					// Это группа помеченная на удаление
					ВремЦвет = 3;
					ВремКартинка=8;
				Иначе
					ВремКартинка=6;
				КонецЕсли; 
			КонецЕсли; 
		Иначе
			// Это элемент справочника
			Если Узел.ЕстьВСправочнике Тогда
				// Это именно тот элемент, согласно иерархии
				ВремЦвет = 2;
				Если Узел.СсылкаНаСправочник.Предопределенный Тогда
					// Это предопределенный элемент
					ВремКартинка=11;
				Иначе
					Если Узел.СсылкаНаСправочник.ПометкаУдаления Тогда
						// Этот элемент помечен на удаление
						ВремЦвет = 3;
						ВремКартинка=9;
					Иначе
						ВремКартинка=7;
					КонецЕсли; 
				КонецЕсли; 
			Иначе
				// Это элемент с необходимым каталоговым номером,
				// но находящийся в другой группе
				Если ДублированиеДеталейСОдинаковымиКаталоговымиНомерами Тогда
					// Так как дублирование разрешено - считаем что этого элемента нет
					ВремЦвет = 1;
					ВремКартинка=7;
				Иначе
					// Так как дублирование запрещено - считаем что этот элемент есть
					ВремЦвет = 2;
					Если Узел.СсылкаНаСправочник.Предопределенный Тогда
						// Это предопределенный элемент
						ВремКартинка=11;
					Иначе
						Если Узел.СсылкаНаСправочник.ПометкаУдаления Тогда
							// Этот элемент помечен на удаление
							ВремЦвет = 3;
							ВремКартинка=9;
						Иначе
							ВремКартинка=7;
						КонецЕсли; 
					КонецЕсли; 
				КонецЕсли;
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Результат.Цвет     = ВремЦвет;
	Результат.Картинка = ВремКартинка;
	
	Возврат Результат;
	
КонецФункции

&НаСервере
Процедура ПеребратьУзлыДерева(ГоловнойУзел)
	
	Для Каждого ТекУзел Из ГоловнойУзел Цикл 
		Индексы = ОпределитьИндексыКартинкиЦвета(ТекУзел);
		ТекУзел.НомерЦвета     = Индексы.Цвет;
		ТекУзел.ИндексКартинки = Индексы.Картинка;
		
		Если ТекУзел.Строки.Количество() Тогда 
			ПеребратьУзлыДерева(ТекУзел.Строки);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьИндексКартинкиНомерЦвета()
	
	ДеревоНоменклатуры = ДанныеФормыВЗначение(СписокНоменклатур, Тип("ДеревоЗначений"));
	
	ПеребратьУзлыДерева(ДеревоНоменклатуры.Строки);
	
	ЗначениеВДанныеФормы(ДеревоНоменклатуры, СписокНоменклатур);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройки()
	
	СтруктураНастроек    = ХранилищеНастроекДанныхФорм.Загрузить("Обработка.уатЗагрузкаИзАвтокаталога.Форма.ОсновнаяФорма", "уатЗагрузкаИзАвтокаталога_ОбщиеНастройки");
	НастройкиНекорректны = (СтруктураНастроек = Неопределено Или ТипЗнч(СтруктураНастроек) <> Тип("Структура"));
		
	Если НастройкиНекорректны Или (Не СтруктураНастроек.Свойство("ДублированиеДеталей")) Тогда
		ДублированиеДеталейСОдинаковымиКаталоговымиНомерами                      = Ложь;
	Иначе
		ДублированиеДеталейСОдинаковымиКаталоговымиНомерами = СтруктураНастроек.ДублированиеДеталей;
	КонецЕсли;
	
	Если НастройкиНекорректны Или (Не СтруктураНастроек.Свойство("Разделитель")) Тогда
		Разделитель = ";";
	Иначе
		ТекРазделитель = СтруктураНастроек.Разделитель;
		Если ТекРазделитель=Неопределено Или ПустаяСтрока(СокрЛП(ТекРазделитель)) Тогда
			Разделитель = ";";
		Иначе 
			Разделитель = ТекРазделитель;
		КонецЕсли;
	КонецЕсли;
		
	Если НастройкиНекорректны Или (Не СтруктураНастроек.Свойство("ЕдиницаИзмерения")) Тогда
		ЕдиницаИзмерения = Справочники.КлассификаторЕдиницИзмерения.ПустаяСсылка();
	Иначе
		ЕдиницаИзмерения = СтруктураНастроек.ЕдиницаИзмерения;
	КонецЕсли;
	
	Если НастройкиНекорректны Или (Не СтруктураНастроек.Свойство("СтавкаНДС")) Тогда
		СтавкаНДС = Перечисления.СтавкиНДС.ПустаяСсылка();
	Иначе
		СтавкаНДС = СтруктураНастроек.СтавкаНДС;
	КонецЕсли;
	
	Если НастройкиНекорректны Или (Не СтруктураНастроек.Свойство("СтранаПроисхождения")) Тогда
		СтранаПроисхождения = Справочники.СтраныМира.ПустаяСсылка();
	Иначе
		СтранаПроисхождения = СтруктураНастроек.СтранаПроисхождения;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ДублированиеДеталей", ДублированиеДеталейСОдинаковымиКаталоговымиНомерами);
	СтруктураНастроек.Вставить("Разделитель",         Разделитель);
	СтруктураНастроек.Вставить("ЕдиницаИзмерения",    ЕдиницаИзмерения);
	СтруктураНастроек.Вставить("СтавкаНДС",           СтавкаНДС);
	СтруктураНастроек.Вставить("СтранаПроисхождения", СтранаПроисхождения);
	
	ХранилищеНастроекДанныхФорм.Сохранить("Обработка.уатЗагрузкаИзАвтокаталога.Форма.ОсновнаяФорма", "уатЗагрузкаИзАвтокаталога_ОбщиеНастройки", СтруктураНастроек);
КонецПроцедуры

// Формирует таблицу с колонками: "Поле", "Номер по порядку поля", "Номер по порядку фактический"
&НаСервере
Процедура СформироватьСтруктуруФайла(ФорматФайлаОбмена)
	
	ПоляФайлаОбмена.Очистить();
	//ПоляФайлаОбмена = Новый ТаблицаЗначений;
	//ПоляФайлаОбмена.Колонки.Добавить("Поле");
	//ПоляФайлаОбмена.Колонки.Добавить("Номер");
	//ПоляФайлаОбмена.Колонки.Добавить("Обязательное");
	СтрокаФормата = СокрЛП(ФорматФайлаОбмена) + " ";
	Пока Истина Цикл
		НомРазделителя = Найти(СтрокаФормата, " ");
		Если НомРазделителя = 0 Тогда
			Прервать;
		КонецЕсли;
		НоваяСтрока = ПоляФайлаОбмена.Добавить();
		ТекПоле = Лев(СтрокаФормата, НомРазделителя - 1);
		Если Прав(ТекПоле, 1) = "_" Тогда
			НоваяСтрока.Обязательное = Истина;
			НоваяСтрока.Поле = ВРег(Лев(ТекПоле, СтрДлина(ТекПоле) - 1));
		Иначе
			НоваяСтрока.Обязательное = Ложь;
			НоваяСтрока.Поле = ВРег(ТекПоле);
		КонецЕсли;
		СтрокаФормата = Сред(СтрокаФормата, НомРазделителя + 1);
	КонецЦикла;
	
КонецПроцедуры

// считывает структуру (колонки) файла
&НаСервере
Функция ПрочитатьСтруктуруФайлаОбмена(ФайлОбменаОбъект)
	
	Строка = СокрЛП(ФайлОбменаОбъект.ПрочитатьСтроку());
	//проверки
	Если СтрДлина(Строка) < СтрДлина("Наименование") Тогда
		// нету даже наименования
		Возврат Ложь;
	КонецЕсли;
	// массив полей
	ПоляФайлаОбменаФакт = Новый СписокЗначений;
	// обрезаем кавычки
	Строка = Строка + Разделитель;
	// получаем поля
	Пока Истина Цикл
		НомРазделителя = Найти(Строка, Разделитель);
		Если НомРазделителя = 0 Тогда
			Прервать;
		КонецЕсли;
		Мнемоника = Врег(Лев(Строка, НомРазделителя - 1));
		Мнемоника = ?(Лев(Мнемоника,1) = """", Прав(Мнемоника,СтрДлина(Мнемоника)-1),Мнемоника);
		Мнемоника = ?(Прав(Мнемоника,1) = """", Лев(Мнемоника,СтрДлина(Мнемоника)-1),Мнемоника);
		ПоляФайлаОбменаФакт.Добавить(Мнемоника);
		Строка = Сред(Строка, НомРазделителя + 1);
	КонецЦикла;                                  
	// забиваем порядковые номера в табличку
	Для Каждого ТекПоле Из ПоляФайлаОбменаФакт Цикл
		СтруктураОтбора = Новый Структура;
		СтруктураОтбора.Вставить("Поле",ТекПоле.Значение); 
		СтрокаТабл = ПоляФайлаОбмена.НайтиСтроки(СтруктураОтбора);
		Если СтрокаТабл = Неопределено Или СтрокаТабл.Количество()=0 Тогда
		Иначе
			ПоляФайлаОбмена[ПоляФайлаОбмена.Индекс(СтрокаТабл[0])].Номер = ПоляФайлаОбменаФакт.Индекс(ТекПоле);
		КонецЕсли;
	КонецЦикла;
	
	ТЗПоляФайлаОбмена = ПоляФайлаОбмена.Выгрузить();
	ТЗПоляФайлаОбмена.Свернуть("Номер");
	Если ТЗПоляФайлаОбмена.Количество() <= 1 Тогда
		Возврат Ложь;
	КонецЕсли;
	
	// просматриваем заполнение обязательных полей
	Для Каждого ТекСтрока Из ПоляФайлаОбмена Цикл
		Если ТекСтрока.Обязательное И ТекСтрока.Номер = Неопределено Тогда
			Возврат Ложь;
		КонецЕсли;
	КонецЦикла;
	
	Возврат Истина;
	
КонецФункции

// Считывает одну строку файла обмена и добавляет позицию номенклатуры в дерево
&НаСервере
Функция ДобавитьНоменклатуруВТаблицу(СтрокаОбмена, ДеревоНоменклатуры)
	
	СсылкаНаНоменклатуру = Справочники.Номенклатура.ПустаяСсылка();
	
	Если ПустаяСтрока(СтрокаОбмена) Тогда 
		Возврат СсылкаНаНоменклатуру;
	КонецЕсли; 
	
	// Формат строки:
	// Автомобиль	Группа	Раздел	Иллюстрация	Наименование	Номер	OLE1	OLE2	OLE3	OLE4
		
	//проверки
	Если СтрДлина(СтрокаОбмена) < 10 Тогда
		ТекстНСТР = НСтр("en='Error on exchange line ""%1"". Number of parameters is not enough.';ru='Ошибка в строке обмена ""%1"". Количества параметров недостаточно.'");
		ТекстНСТР = СтрШаблон(ТекстНСТР, СтрокаОбмена);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		Возврат СсылкаНаНоменклатуру;
	КонецЕсли;
	// обрезаем кавычки и добавляем справа доп. разделитель
	ОригинальнаяСтрокаОбмена = СтрокаОбмена;
	СтрокаОбмена = СтрокаОбмена + Разделитель;//Символы.Таб;
	
	МассивПараметров  = Новый Массив;          //забиваются группы, подгруппы и сами элементы дерева
	ТаблицаПараметров = Новый ТаблицаЗначений; //вспомог. табл. для построения массива параметров
	ТаблицаOLE        = Новый ТаблицаЗначений; //вспомог. табл. для построения идентификатора картинки
	ТаблицаПараметров.Колонки.Добавить("Параметр");
	ТаблицаПараметров.Колонки.Добавить("Номер");
	ТаблицаOLE.Колонки.Добавить("OLE");
	ТаблицаOLE.Колонки.Добавить("Номер");
	
	// считаем поля из строки
	МассивПараметровФактич = Новый СписокЗначений; //массив полей, выделенных из строки
	Пока Истина Цикл
		НомРазделителя = Найти(СтрокаОбмена, Разделитель);//Символы.Таб);
		Если НомРазделителя = 0 Тогда
			Прервать;
		КонецЕсли;
		Мнемоника = Лев(СтрокаОбмена, НомРазделителя - 1);
		Мнемоника = ?(Лев(Мнемоника,1) = """", Прав(Мнемоника,СтрДлина(Мнемоника)-1),Мнемоника);
		Мнемоника = ?(Прав(Мнемоника,1) = """", Лев(Мнемоника,СтрДлина(Мнемоника)-1),Мнемоника);
		МассивПараметровФактич.Добавить(Мнемоника);
		СтрокаОбмена = Сред(СтрокаОбмена, НомРазделителя + 1);
	КонецЦикла;
	
	Применяемость   = "";
	Картинка        = "";
	НомерПоКаталогу = "";
	
	// ищем поля
	Для каждого ТекПолеФакт Из МассивПараметровФактич Цикл
		ПараметрыОтбор = Новый Структура;
		ПараметрыОтбор.Вставить("Номер",МассивПараметровФактич.Индекс(ТекПолеФакт)); 
		СтрокаТаблПолей = ПоляФайлаОбмена.НайтиСтроки(ПараметрыОтбор);
		Если СтрокаТаблПолей = Неопределено Или СтрокаТаблПолей.Количество()=0 Тогда
			Продолжить;
		Иначе 
			СтрокаТаблПолей = СтрокаТаблПолей[0];
		КонецЕсли;
		ИмяТекПоля   = СтрокаТаблПолей.Поле;
		ТекПолеФакт_ = ТекПолеФакт.Значение;
		
		// case на поля
		Если ИмяТекПоля = "АВТОМОБИЛЬ" Тогда
			НоваяСтрока = ТаблицаПараметров.Добавить();
			// посмотрим разделитель корневой группы
			ПозицияРазделителя = Найти(ТекПолеФакт_, " ");
			Применяемость = ТекПолеФакт_;
			НоваяСтрока.Параметр = ?(ПозицияРазделителя = 0, ТекПолеФакт_, Лев(ТекПолеФакт_,ПозицияРазделителя - 1));
			НоваяСтрока.Номер = 0;
			
		ИначеЕсли ИмяТекПоля = "ГРУППА" Тогда
			НоваяСтрока = ТаблицаПараметров.Добавить();
			НоваяСтрока.Параметр = ТекПолеФакт_;
			НоваяСтрока.Номер = 1;
			
		ИначеЕсли ИмяТекПоля = "РАЗДЕЛ" Тогда
			НоваяСтрока = ТаблицаПараметров.Добавить();
			НоваяСтрока.Параметр = ТекПолеФакт_;
			НоваяСтрока.Номер = 2;
			
		//ИначеЕсли ВРег(ИмяТекПоля) = "ИЛЛЮСТРАЦИЯ" Тогда
		//	НоваяСтрока = ТаблицаПараметров.Добавить();
		//	НоваяСтрока.Параметр = ТекПолеФакт_;
		//	НоваяСтрока.Номер = 3;
			
		ИначеЕсли ИмяТекПоля = "НАИМЕНОВАНИЕ" Тогда
			НоваяСтрока = ТаблицаПараметров.Добавить();
			НоваяСтрока.Параметр = ТекПолеФакт_;
			НоваяСтрока.Номер = 3;
			
		ИначеЕсли ИмяТекПоля = "НОМЕР" Тогда
			НомерПоКаталогу = ТекПолеФакт_;
			
		ИначеЕсли Лев(ИмяТекПоля, 3) = "OLE" Тогда
			НоваяСтрока = ТаблицаOLE.Добавить();
			НоваяСтрока.OLE = ТекПолеФакт_;
			НоваяСтрока.Номер = Число(Прав(ИмяТекПоля, 1));
		КонецЕсли;
	КонецЦикла;
	
	// упорядочим группы (по кр. мере наименование) и OLE
	ТаблицаПараметров.Сортировать("Номер");
	ТаблицаOLE.Сортировать("Номер");
	
	// Сформируем искомые параметры:
	// 1)массив элементов дерева
	МассивПараметров = ТаблицаПараметров.ВыгрузитьКолонку("Параметр");
	// 2)картинка
	ПараметрыОтбор = Новый Структура;
	ПараметрыОтбор.Вставить("Поле", "OLE4");
	НайдСтроки = ПоляФайлаОбмена.НайтиСтроки(ПараметрыОтбор);
	Если НайдСтроки <> Неопределено Или НайдСтроки.Количество()>0 Тогда 
		ЕстьOLE4 = Истина;
	Иначе 
		ЕстьOLE4 = Ложь;
	КонецЕсли;
	Для каждого ТекOLE Из ТаблицаOLE Цикл
		ПлюсКавычки = ЕстьOLE4 И ТекOLE.Номер = 4;
		//Картинка = Картинка + ?(ПлюсКавычки, """", "") + Строка(ТекOLE.OLE) + ?(ПлюсКавычки, """", "") + ",";
		Картинка = Картинка + Строка(ТекOLE.OLE) + ",";
	КонецЦикла;
	Картинка = ?(Картинка = "", "", Лев(Картинка, СтрДлина(Картинка)-1));
		
	// В строке должен быть минимум 1 параметр: наименование
	Если МассивПараметров.Количество()=0 Тогда
		ТекстНСТР = НСтр("en='Error on exchange line ""%1"". Number of parameters is not enough.';ru='Ошибка в строке обмена ""%1"". Количества параметров недостаточно.'");
		ТекстНСТР = СтрШаблон(ТекстНСТР, ОригинальнаяСтрокаОбмена);
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		Возврат СсылкаНаНоменклатуру;
	КонецЕсли; 
	
	// Сформируем дерево номенклатуры
	// Отсчет всегда начинается от корня иерархии
	
	ТекущийУровеньДерева=ДеревоНоменклатуры.Строки;
	Для Сч=0 По МассивПараметров.Количество()-1 Цикл
		// Найдем данный элемент в дереве
		Если Сч=(МассивПараметров.Количество()-1) Тогда
			СтрокаДерева=ТекущийУровеньДерева.НайтиСтроки(Новый Структура("Наименование,НомерПоКаталогу",МассивПараметров[Сч],НомерПоКаталогу));
			Если СтрокаДерева.Количество()=0 Тогда
				СтрокаДерева=Неопределено;
			Иначе
				СтрокаДерева=СтрокаДерева[0];
			КонецЕсли; 
		Иначе
			СтрокаДерева=ТекущийУровеньДерева.Найти(МассивПараметров[Сч],"Наименование");
		КонецЕсли; 
		Если СтрокаДерева=Неопределено Тогда
			// Это новый элемент дерева
			СтрокаДерева=ТекущийУровеньДерева.Добавить();
			СтрокаДерева.Наименование=МассивПараметров[Сч];
			Если Сч=(МассивПараметров.Количество()-1) Тогда
				КоличествоЭлементовДерева=КоличествоЭлементовДерева+1;
				// Если это последний параметр - это есть элемент справочника номенклатуры
				СтрокаДерева.НомерПоКаталогу=НомерПоКаталогу;
				СтрокаДерева.Применяемость=Применяемость;
				СтрокаДерева.Картинка=Картинка;
				Если СтрокаДерева.Родитель=Неопределено Тогда
					// Если это элемент верхнего уровня поищем его в корне справочника
					// Поиск по артикулу (каталоговому номеру)
					НайденныйЭлемент=Справочники.Номенклатура.НайтиПоРеквизиту("Артикул",СтрокаДерева.НомерПоКаталогу,Справочники.Номенклатура.ПустаяСсылка());
					Если НайденныйЭлемент=Справочники.Номенклатура.ПустаяСсылка() Тогда
						// Элемента с таким артикулом в корне нет
						СтрокаДерева.ЕстьВСправочнике=Ложь;
						// Попробуем найти его во всем справочнике
						НайденныйЭлемент=Справочники.Номенклатура.НайтиПоРеквизиту("Артикул",СтрокаДерева.НомерПоКаталогу);
						Если НайденныйЭлемент=Справочники.Номенклатура.ПустаяСсылка() Тогда
							// Во всем справочнике нет элемента с таким артикулом
							СтрокаДерева.СсылкаНаСправочник=Справочники.Номенклатура.ПустаяСсылка();
						Иначе
							// В справочнике есть элемент с таким артикулом
							СтрокаДерева.СсылкаНаСправочник=НайденныйЭлемент;
						КонецЕсли;
					Иначе
						// Есть элемент с таким артикулом в корне
						СтрокаДерева.ЕстьВСправочнике=Истина;
						СтрокаДерева.СсылкаНаСправочник=НайденныйЭлемент;
					КонецЕсли;
				Иначе
					// Будем искать вложенный элемент
					Если СтрокаДерева.Родитель.СсылкаНаСправочник=Справочники.Номенклатура.ПустаяСсылка() Тогда
						// Родительская группа отсутствует в справочнике, значит и нет элемента в иерархии
						СтрокаДерева.ЕстьВСправочнике=Ложь;
						// Попробуем найти его во всем справочнике
						НайденныйЭлемент=Справочники.Номенклатура.НайтиПоРеквизиту("Артикул",СтрокаДерева.НомерПоКаталогу);
						Если НайденныйЭлемент=Справочники.Номенклатура.ПустаяСсылка() Тогда
							// Во всем справочнике нет элемента с таким артикулом
							СтрокаДерева.СсылкаНаСправочник=Справочники.Номенклатура.ПустаяСсылка();
						Иначе
							// В справочнике есть элемент с таким артикулом
							СтрокаДерева.СсылкаНаСправочник=НайденныйЭлемент;
						КонецЕсли;
					Иначе
						// Поищем элемент в иерархии
						НайденныйЭлемент=Справочники.Номенклатура.НайтиПоРеквизиту("Артикул",СтрокаДерева.НомерПоКаталогу,СтрокаДерева.Родитель.СсылкаНаСправочник);
						Если НайденныйЭлемент=Справочники.Номенклатура.ПустаяСсылка() Тогда
							// Элемента с таким артикулом в иерархии нет
							СтрокаДерева.ЕстьВСправочнике=Ложь;
							// Попробуем найти его во всем справочнике
							НайденныйЭлемент=Справочники.Номенклатура.НайтиПоРеквизиту("Артикул",СтрокаДерева.НомерПоКаталогу);
							Если НайденныйЭлемент=Справочники.Номенклатура.ПустаяСсылка() Тогда
								// Во всем справочнике нет элемента с таким артикулом
								СтрокаДерева.СсылкаНаСправочник=Справочники.Номенклатура.ПустаяСсылка();
							Иначе
								// В справочнике есть элемент с таким артикулом
								СтрокаДерева.СсылкаНаСправочник=НайденныйЭлемент;
							КонецЕсли;
						Иначе
							// Есть элемент с таким артикулом в иерархии
							СтрокаДерева.ЕстьВСправочнике=Истина;
							СтрокаДерева.СсылкаНаСправочник=НайденныйЭлемент;
						КонецЕсли;
					КонецЕсли;
				КонецЕсли;
				СсылкаНаНоменклатуру=СтрокаДерева.СсылкаНаСправочник;
			Иначе
				// Иначе это группа справочника
				Если СтрокаДерева.Родитель=Неопределено Тогда
					// Если это элемент верхнего уровня поищем его в корне справочника
					НайденнаяГруппа=Справочники.Номенклатура.НайтиПоНаименованию(СтрокаДерева.Наименование,Истина,Справочники.Номенклатура.ПустаяСсылка());
					Если НайденнаяГруппа=Справочники.Номенклатура.ПустаяСсылка() Тогда
						// Группы с таким именем нет
						СтрокаДерева.ЕстьВСправочнике=Ложь;
						СтрокаДерева.СсылкаНаСправочник=Справочники.Номенклатура.ПустаяСсылка();
					Иначе
						// Есть группа с таким именем
						СтрокаДерева.ЕстьВСправочнике=Истина;
						СтрокаДерева.СсылкаНаСправочник=НайденнаяГруппа;
					КонецЕсли;
				Иначе
					Если СтрокаДерева.Родитель.СсылкаНаСправочник=Справочники.Номенклатура.ПустаяСсылка() Тогда
						// Если нет группы более высокого уровня, то нет и вложенной
						СтрокаДерева.ЕстьВСправочнике=Ложь;
						СтрокаДерева.СсылкаНаСправочник=Справочники.Номенклатура.ПустаяСсылка();
					Иначе
						// Поищем группу в иерархии
						НайденнаяГруппа=Справочники.Номенклатура.НайтиПоНаименованию(СтрокаДерева.Наименование,Истина,СтрокаДерева.Родитель.СсылкаНаСправочник);
						Если НайденнаяГруппа=Справочники.Номенклатура.ПустаяСсылка() Тогда
							// Группы с таким именем в иерархии нет
							СтрокаДерева.ЕстьВСправочнике=Ложь;
							СтрокаДерева.СсылкаНаСправочник=Справочники.Номенклатура.ПустаяСсылка();
						Иначе
							// Есть группа с таким именем
							СтрокаДерева.ЕстьВСправочнике=Истина;
							СтрокаДерева.СсылкаНаСправочник=НайденнаяГруппа;
						КонецЕсли;
					КонецЕсли; 
				КонецЕсли; 
			КонецЕсли;
		КонецЕсли;
		// Переходим на следующий уровень вложенности дерева
		ТекущийУровеньДерева=СтрокаДерева.Строки;
	КонецЦикла; 
	
	Возврат СсылкаНаНоменклатуру;
	
КонецФункции

&НаСервере
Функция ПолучитьКодировкуТекста()
	
	Если КодировкаФайла = "UTF-8" Тогда 
		Возврат КодировкаТекста.UTF8;
	ИначеЕсли КодировкаФайла = "UTF-16" Тогда 
		Возврат КодировкаТекста.UTF16;
	ИначеЕсли КодировкаФайла = "ANSI" Тогда 
		Возврат КодировкаТекста.ANSI;
	ИначеЕсли КодировкаФайла = "OEM" Тогда 
		Возврат КодировкаТекста.OEM;
	Иначе 
		Возврат Неопределено;
	КонецЕсли;
	
КонецФункции // ПолучитьКодировкуТекста()

&НаСервере
Процедура ЗагрузитьФайлОбменаНаСервере()
	
	// Получим файл
	УникальныйИД       = Новый УникальныйИдентификатор;
	ИмяВременногоФайла = КаталогВременныхФайлов() + УникальныйИД + "_data.xml";
	ДанныеХранилища    = ПолучитьИзВременногоХранилища(АдресХранилищаФайла);
	ДанныеХранилища.Записать(ИмяВременногоФайла);
	
	ДеревоНоменклатуры = ДанныеФормыВЗначение(СписокНоменклатур, Тип("ДеревоЗначений"));
	
	ДеревоНоменклатуры.Строки.Очистить();
	
	МассивНоменклатуры = Новый Массив;
	
	СформироватьСтруктуруФайла(ФорматФайлаОбмена);
	
	// Считаем файл
	ФайлОбменаОбъект = Новый ЧтениеТекста(ИмяВременногоФайла, ПолучитьКодировкуТекста());
	Если Не ПрочитатьСтруктуруФайлаОбмена(ФайлОбменаОбъект) Тогда
		ТекстНСТР = НСтр("en='Incorrect file format';ru='Неверный формат файла'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		Возврат;
	КонецЕсли;
	
	СтрокаФайлаОбмена = "";
	Пока СтрокаФайлаОбмена<>Неопределено Цикл
		СтрокаФайлаОбмена = ФайлОбменаОбъект.ПрочитатьСтроку();
		
		Если (СтрокаФайлаОбмена<>Неопределено) И (Не ПустаяСтрока(СокрЛП(СтрокаФайлаОбмена))) Тогда
			// Для каждой строки файла обмена сформируем ветку дерева
			СтрокаФайлаОбмена = СокрЛП(СтрокаФайлаОбмена);
			СсылкаНаНоменклатуру = ДобавитьНоменклатуруВТаблицу(СтрокаФайлаОбмена, ДеревоНоменклатуры);
			Если (СсылкаНаНоменклатуру<>Неопределено) И (Не уатОбщегоНазначения.уатЗначениеНеЗаполнено(СсылкаНаНоменклатуру)) Тогда
				МассивНоменклатуры.Добавить(СсылкаНаНоменклатуру);
			КонецЕсли; 
		КонецЕсли;
	КонецЦикла; 
	ФайлОбменаОбъект.Закрыть();
	
	ЗначениеВДанныеФормы(ДеревоНоменклатуры, СписокНоменклатур);
	
КонецПроцедуры

// Загружает файл обмена в дерево
&НаКлиенте
Процедура ЗагрузитьФайлОбмена(Знач Оповещение)
	
	Если ПустаяСтрока(Разделитель) И Разделитель<>Символы.Таб Тогда
		ТекстОшибки = НСтр("en='Set delimiter character';ru='Задайте символ-разделитель'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "Разделитель");
		Если Не Оповещение = Неопределено Тогда 
			ВыполнитьОбработкуОповещения(Оповещение);
		КонецЕсли;
		Возврат;
	КонецЕсли; 
	
	Если ПустаяСтрока(ФайлОбмена) Тогда
		ТекстОшибки = НСтр("en='File is not selected';ru='Файл не выбран'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки,, "ФайлОбмена");
		Возврат;
	КонецЕсли;
	
	#Если МобильныйКлиент ИЛИ МобильноеПриложениеКлиент Тогда
		ДвоичныеДанные = Новый ДвоичныеДанные(ФайлОбмена); 
		ПослеСозданияДвоичныхДанных(ДвоичныеДанные, Оповещение);
	#Иначе
		ОповещениеПрочитатьФО = Новый ОписаниеОповещения("ПослеСозданияДвоичныхДанных", ЭтотОбъект, Оповещение);
		НачатьСозданиеДвоичныхДанныхИзФайла(ОповещениеПрочитатьФО, ФайлОбмена);
	#КонецЕсли
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеСозданияДвоичныхДанных(ДвоичныеДанные, ДополнительныеПараметры) Экспорт
	
	Если ДвоичныеДанные <> Неопределено Тогда
		
		Адрес = ПоместитьВоВременноеХранилище(ДвоичныеДанные, УникальныйИдентификатор);
		
		АдресХранилищаФайла = Адрес;
		
		ЗагрузитьФайлОбменаНаСервере();
		
		УдалитьИзВременногоХранилища(АдресХранилищаФайла);
		
		СохранитьНастройки();
		
		Если Не ДополнительныеПараметры = Неопределено Тогда 
			ВыполнитьОбработкуОповещения(ДополнительныеПараметры);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ВыполнитьЗагрузкуНаСервере()
	
	ЭлементДерева = ДанныеФормыВЗначение(СписокНоменклатур, Тип("ДеревоЗначений"));
	ЗагрузкаСправочникаНоменклатуры(ЭлементДерева);
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузкаСправочникаНоменклатуры(ЭлементДерева)
	
	Для каждого ЭлементНоменклатуры Из ЭлементДерева.Строки Цикл
		// Если у элемента есть дочерние элементы - это группа
		ЭтоГруппа=(ЭлементНоменклатуры.Строки.Количество()>0);
		
		// Получим родителя в справочнике для данного элемента
		Если ЭлементНоменклатуры.Родитель=Неопределено Тогда
			РодительЭлемента=Справочники.Номенклатура.ПустаяСсылка();
		Иначе
			РодительЭлемента=ЭлементНоменклатуры.Родитель.СсылкаНаСправочник;
		КонецЕсли; 
		
		Если ЭтоГруппа Тогда
			// Для групп необходимо сохранить иерархию
			// Поиск такой группы производим по имени
			// Найдем группу с таким именем в родительской группе
			НайденнаяГруппа=Справочники.Номенклатура.НайтиПоНаименованию(ЭлементНоменклатуры.Наименование,Истина,РодительЭлемента);
			Если НайденнаяГруппа=Справочники.Номенклатура.ПустаяСсылка() Тогда
				// Группы нет в справочнике - создадим новую группу
				НайденнаяГруппа=Справочники.Номенклатура.СоздатьГруппу();
				НайденнаяГруппа.Родитель=РодительЭлемента;
				НайденнаяГруппа.УстановитьНовыйКод();
				НайденнаяГруппа.Наименование=ЭлементНоменклатуры.Наименование;
				//НайденнаяГруппа.СтавкаНДС=СтавкаНДС;
				//НайденнаяГруппа.ТипНоменклатуры=ТипНоменклатуры;
				//НайденнаяГруппа.ВидНоменклатуры=ВидНоменклатуры;
				Попытка
					НайденнаяГруппа.Записать();
				Исключение
					ТекстНСТР = НСтр("en='Error record of item catalog group ""%1"".';ru='Ошибка записи группы справочника номенклатуры ""%1"".'");
					ТекстНСТР = СтрШаблон(ТекстНСТР, ЭлементНоменклатуры.Наименование);
					ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
				КонецПопытки;
			Иначе
				// Такая группа в справочнике уже есть
				Если НайденнаяГруппа.ПометкаУдаления Тогда
					// Если она помечена на удаление - снимем пометку
					НайденнаяГруппа=НайденнаяГруппа.ПолучитьОбъект();
					НайденнаяГруппа.УстановитьПометкуУдаления(Ложь,Ложь);
				КонецЕсли; 
			КонецЕсли;
			// Сохраним новые значения с дереве номенклатуры
			ЭлементНоменклатуры.ЕстьВСправочнике=Истина;
			ЭлементНоменклатуры.СсылкаНаСправочник=НайденнаяГруппа.Ссылка;
			// Загрузим дочерние элементы
			ЗагрузкаСправочникаНоменклатуры(ЭлементНоменклатуры);
		Иначе
			//ЭлементыФормы.Индикатор.Значение=ЭлементыФормы.Индикатор.Значение+1;
			// Загружается элемент справочника
			Если ДублированиеДеталейСОдинаковымиКаталоговымиНомерами Тогда
				// Разрешается дублирование номенклатуры с одинаковыми каталоговыми номерами
				// Поэтому ищем элемент в иерархии
				НайденныйЭлемент=Справочники.Номенклатура.НайтиПоРеквизиту("Артикул",ЭлементНоменклатуры.НомерПоКаталогу,РодительЭлемента);
				Если НайденныйЭлемент=Справочники.Номенклатура.ПустаяСсылка() Тогда
					// Элемент с таким каталоговым номером отсутствует в выбранной группе
					// Добавляем элемент в группу, согласно текущей иерархии
					НайденныйЭлемент=СоздатьЭлементСправочникаНоменклатуры(ЭлементНоменклатуры.Наименование,ЭлементНоменклатуры.НомерПоКаталогу,ЭлементНоменклатуры.Картинка,РодительЭлемента);
					ЭлементНоменклатуры.ЕстьВСправочнике=Истина;
				Иначе
					// Элемент с таким каталоговым номером уже есть в справочнике
					Если НайденныйЭлемент.ПометкаУдаления Тогда
						// Если он помечен на удаление - снимем пометку
						НайденныйЭлемент=НайденныйЭлемент.ПолучитьОбъект();
						НайденныйЭлемент.УстановитьПометкуУдаления(Ложь,Ложь);
					КонецЕсли; 
				КонецЕсли;
			Иначе
				// Дублирование номенклатуры с одинаковыми каталоговыми номерами запрещено
				// Сначала попробуем найти элемент с таким кодом в текущей группе
				НайденныйЭлемент=Справочники.Номенклатура.НайтиПоРеквизиту("Артикул",ЭлементНоменклатуры.НомерПоКаталогу,РодительЭлемента);
				Если НайденныйЭлемент=Справочники.Номенклатура.ПустаяСсылка() Тогда
					// В текущей группе такого элемента нет
					// Поэтому ищем элемент во всем справочнике
					НайденныйЭлемент=Справочники.Номенклатура.НайтиПоРеквизиту("Артикул",ЭлементНоменклатуры.НомерПоКаталогу);
					Если НайденныйЭлемент=Справочники.Номенклатура.ПустаяСсылка() Тогда
						// Элемент с таким каталоговым номером отсутствует во всем справочнике
						// Добавляем элемент в группу, согласно текущей иерархии
						НайденныйЭлемент=СоздатьЭлементСправочникаНоменклатуры(ЭлементНоменклатуры.Наименование,ЭлементНоменклатуры.НомерПоКаталогу,ЭлементНоменклатуры.Картинка,РодительЭлемента);
						ЭлементНоменклатуры.ЕстьВСправочнике=Истина;
					Иначе
						// Элемент с таким каталоговым номером уже есть в справочнике
						Если НайденныйЭлемент.ПометкаУдаления Тогда
							// Если он помечен на удаление - снимем пометку
							НайденныйЭлемент=НайденныйЭлемент.ПолучитьОбъект();
							НайденныйЭлемент.УстановитьПометкуУдаления(Ложь,Ложь);
						КонецЕсли; 
					КонецЕсли;
				Иначе
					// Есть такой элемент в текущей группе - работаем с ним
					Если НайденныйЭлемент.ПометкаУдаления Тогда
						// Если он помечен на удаление - снимем пометку
						НайденныйЭлемент=НайденныйЭлемент.ПолучитьОбъект();
						НайденныйЭлемент.УстановитьПометкуУдаления(Ложь,Ложь);
					КонецЕсли; 
					ЭлементНоменклатуры.ЕстьВСправочнике=Истина;
				КонецЕсли;
			КонецЕсли;
			// Если картинка автокаталога у найденного элемента отличается от текущей - поправим ее
			//Если НайденныйЭлемент.КартинкаАвтокаталога<>ЭлементНоменклатуры.Картинка Тогда
			//	//Попытка
			//	НайденныйЭлемент=НайденныйЭлемент.ПолучитьОбъект();
			//	НайденныйЭлемент.КартинкаАвтокаталога=ЭлементНоменклатуры.Картинка;
			//	НайденныйЭлемент.Записать();
			//	//Исключение
			//	//	Сообщить("Обнаружена ошибка: запись элемента <" + Строка(НайденныйЭлемент) + ">. Описание ошибки: " +
			//	//		ОписаниеОшибки());
			//	//КонецПопытки;
			//КонецЕсли; 
			// Запомним новую номенклатуру в дереве
			ЭлементНоменклатуры.СсылкаНаСправочник=НайденныйЭлемент.Ссылка;
			// Получим группу модели
			ГруппаМодели=""; ТекЭлемент=ЭлементНоменклатуры.Родитель;
			Пока ТекЭлемент<>Неопределено Цикл
				ГруппаМодели=ТекЭлемент.Наименование;
				ТекЭлемент=ТекЭлемент.Родитель;
			КонецЦикла; 
			Модель=ЭлементНоменклатуры.Применяемость;
			// Установим применяемость номенклатуры для данной модели
			//УстановитьПрименяемостьДляДетали(НайденныйЭлемент.Ссылка,ГруппаМодели,Модель);
		КонецЕсли;
		//ОбработкаПрерыванияПользователя();
	КонецЦикла; 
	
КонецПроцедуры

&НаСервере
Функция СоздатьЭлементСправочникаНоменклатуры(Наименование,Артикул,Картинка,Родитель)
	НовыйЭлемент = Справочники.Номенклатура.СоздатьЭлемент();
	НовыйЭлемент.Родитель = Родитель;
	НовыйЭлемент.УстановитьНовыйКод();
	НовыйЭлемент.Наименование = Наименование;
	НовыйЭлемент.НаименованиеПолное = Наименование;
	НовыйЭлемент.Артикул = Артикул;
	НовыйЭлемент.ЕдиницаИзмерения = ЕдиницаИзмерения;
	НовыйЭлемент.СтавкаНДС = СтавкаНДС;
	НовыйЭлемент.ВидНоменклатуры = Справочники.ВидыНоменклатуры.Товар;
	Если уатОбщегоНазначенияТиповые.уатЕстьРеквизитСправочника("СтранаПроисхождения", НовыйЭлемент) Тогда
		НовыйЭлемент.СтранаПроисхождения = СтранаПроисхождения;
	КонецЕсли;
	
	//НовыйЭлемент.КартинкаАвтокаталога=Картинка;
	Попытка
		НовыйЭлемент.Записать();
	Исключение
		ТекстОшибки = НСтр("en='Error of record element of products and services catalog.';ru='Ошибка записи элемента справочника номенклатуры.'");
		уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстОшибки + ОписаниеОшибки());
		Возврат Справочники.Номенклатура.ПустаяСсылка();
	КонецПопытки;
	
	НовыйЭлемент.ЕдиницаХраненияОстатков = СоздатьЕдиницуХраненияОстатков(НовыйЭлемент.Ссылка);
	
	Попытка
		НовыйЭлемент.Записать();	
	Исключение
		ТекстОшибки = НСтр("en='Error of record element of products and services catalog.';ru='Ошибка записи элемента справочника номенклатуры.'");
		уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстОшибки + ОписаниеОшибки());
		Возврат Справочники.Номенклатура.ПустаяСсылка();
	КонецПопытки; 
	
	Возврат НовыйЭлемент;
	
КонецФункции

// Процедура записывает единицу хранения остатков номенклатуры.
//
&НаСервере
Функция СоздатьЕдиницуХраненияОстатков(НоменклатураСсылка)

	НайденнаяЕдиницаОбъект = Справочники.ЕдиницыИзмерения.СоздатьЭлемент();
	НайденнаяЕдиницаОбъект.Наименование            = НоменклатураСсылка.ЕдиницаИзмерения.Наименование;
	НайденнаяЕдиницаОбъект.ЕдиницаПоКлассификатору = НоменклатураСсылка.ЕдиницаИзмерения;
	НайденнаяЕдиницаОбъект.Владелец                = НоменклатураСсылка;
	НайденнаяЕдиницаОбъект.Коэффициент             = 1;

	Попытка
		НайденнаяЕдиницаОбъект.Записать();
		Возврат НайденнаяЕдиницаОбъект.Ссылка;
	Исключение
		ТекстОшибки = НСтр("en='Failed to record a unit of storage of remains: ';ru='Не удалось записать единицу хранения остатков: '");
		уатОбщегоНазначенияТиповые.СообщитьОбОшибке(ТекстОшибки + ОписаниеОшибки());
		Возврат Неопределено;
	КонецПопытки;

КонецФункции // СоздатьЕдиницуХраненияОстатков()

&НаКлиенте
Процедура СчитатьЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	УстановитьИндексКартинкиНомерЦвета();
	ТекстНСТР = НСтр("en='Download is complete.';ru='Загрузка завершена.'");
	ПоказатьОповещениеПользователя(ТекстНСТР);
	
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДиалогВыбораФайла(Подключено, ДополнительныеПараметры) Экспорт
	
	Если НЕ Подключено Тогда
		
		Оповещение = Новый ОписаниеОповещения("НачатьУстановкуРасширенияРаботыСФайламиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ТекстСообщения = НСтр("ru = 'Для продолжении работы необходимо установить расширение для веб-клиента ""1С:Предприятие"". Установить?'");
		ПоказатьВопрос(Оповещение, ТекстСообщения, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	ДиалогВыбора = Новый ДиалогВыбораФайла(РежимДиалогаВыбораФайла.Открытие);
	ДиалогВыбора.Заголовок = "Выберите файл автокаталога";
	ДиалогВыбора.МножественныйВыбор = Ложь;
	ДиалогВыбора.ПроверятьСуществованиеФайла = Истина;
	ДиалогВыбора.Фильтр = "Файл txt (*.txt)|*.txt";
	
	ВыборФайла = Новый ОписаниеОповещения("ВыбратьФайлАвтокаталогаЗавершение", ЭтотОбъект);
	
	ДиалогВыбора.Показать(ВыборФайла);
	
КонецПроцедуры

&НаКлиенте
Процедура ПрочитатьДанныеИзФайлаПослеПодключения(Подключено, ДополнительныеПараметры) Экспорт
	
	Если НЕ Подключено Тогда
		
		Оповещение = Новый ОписаниеОповещения("НачатьУстановкуРасширенияРаботыСФайламиЗавершение", ЭтотОбъект, ДополнительныеПараметры);
		ТекстСообщения = НСтр("ru = 'Для продолжении работы необходимо установить расширение для веб-клиента ""1С:Предприятие"". Установить?'");
		ПоказатьВопрос(Оповещение, ТекстСообщения, РежимДиалогаВопрос.ДаНет);
		Возврат;
		
	КонецЕсли;
	
	ТекстСообщения = СтрШаблон(НСтр("en='List of products and services from the autocatalogue file is loaded.%1 Operation may take a long time ...';ru='Начата загрузка списка номенклатуры из файла автокаталога.%1 Операция может занять длительное время...'"), Символы.ПС);
	ПоказатьОповещениеПользователя(ТекстСообщения);
	ЗагрузитьФайлОбмена(Новый ОписаниеОповещения("СчитатьЗавершение", ЭтотОбъект));

КонецПроцедуры

&НаКлиенте
Процедура НачатьУстановкуРасширенияРаботыСФайламиЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		НачатьУстановкуРасширенияРаботыСФайлами();
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// начало блока стандартных операций
	ДопПараметрыОткрытие = Новый Структура("ИмяФормы", ИмяФормы);
	уатЗащищенныеФункцииСервер.уатОбработкаФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	// конец блока стандартных операций
	
	ДатаИзменения = ТекущаяДата();
	
	флИзменятьНормуОснТоплива = Истина;
	
	Если Метаданные.РегистрыСведений.уатНормыРасходаГСМ.Измерения.Найти("Организация") = Неопределено Тогда 
		флЕстьОрганизация = Ложь;
	Иначе 
		флЕстьОрганизация = Истина;
	КонецЕсли;
	
	Если Не флЕстьОрганизация Тогда 
		Элементы.Организация.Видимость = Ложь;
	КонецЕсли;
	
	ПереключательРежимаРаботы = "0";
	Элементы.ТС.Видимость = ?(ПереключательРежимаРаботы = "1", Истина, Ложь);
	Если уатЗащищенныеФункцииСервер.ВариантПоставкиСТД() Тогда
		Элементы.ГруппаПереключательРежима.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// начало блока стандартных операций
	уатЗащищенныеФункцииКлиент.уатОбработкаФормаПриОткрытии(Отказ, ДопПараметрыОткрытие);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	// конец блока стандартных операций
	
	УстановитьВидимостьДоступность();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ФлажокЛинейныеНормыПриИзменении(Элемент)
	УстановитьВидимостьДоступность();
КонецПроцедуры

&НаКлиенте
Процедура ПереключательПроцентПриИзменении(Элемент)
	Если ПереключательПроцент = 0 Тогда
		Элементы.ЗначениеНормыПроцента.ФорматРедактирования = "ЧЦ=4; ЧДЦ=2";
	Иначе 
		Элементы.ЗначениеНормыПроцента.ФорматРедактирования = "ЧЦ=10; ЧДЦ=2";
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ФлажокСезонныеНадбавкиПриИзменении(Элемент)
	УстановитьВидимостьДоступность();	
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНастроекВключатьПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ДеревоНастроек.ТекущиеДанные;
	ТекущиеДанные.Включать = ТекущиеДанные.Включать % 2;
	ПроставитьПометкиВниз(ТекущиеДанные);
	ПроставитьПометкиВверх(ТекущиеДанные);
КонецПроцедуры

&НаКлиенте
Процедура ДеревоНастроекВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	Если Поле = Элементы.ДеревоНастроекНастройка Тогда
		ТекущиеДанные = Элементы.ДеревоНастроек.ТекущиеДанные;
		Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.Значение) Тогда
			ПоказатьЗначение(, ТекущиеДанные.Значение);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТопливоНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ДополнительныеПараметры = Новый Структура("ЗначениеГСМДоИзменения", Топливо);
	ОписаниеОповещенияЗакр  = Новый ОписаниеОповещения("ОписаниеОповещенияВыбораГСМ", ЭтотОбъект, ДополнительныеПараметры);
	
	уатЗащищенныеФункцииКлиент.ВыбратьГСМ(ПредопределенноеЗначение("Перечисление.уатГруппыГСМ.Топливо"),ДополнительныеПараметры,ОписаниеОповещенияЗакр);
КонецПроцедуры

&НаКлиенте
Процедура ТопливоАвтоПодбор(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, Ожидание, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	мсвГруппДляОтбора = Новый Массив;
	мсвГруппДляОтбора.Добавить(ПредопределенноеЗначение("Перечисление.уатГруппыГСМ.Топливо"));
	ДанныеВыбора = уатГСМ.ПолучитьСписокАвтоподбораПоляГСМ(Текст, мсвГруппДляОтбора);
КонецПроцедуры

&НаКлиенте
Процедура ТопливоОкончаниеВводаТекста(Элемент, Текст, ДанныеВыбора, ПараметрыПолученияДанных, СтандартнаяОбработка)
	ПараметрыПолученияДанных.СтрокаПоиска = "";
КонецПроцедуры

&НаКлиенте
Процедура ПереключательРежимаРаботыПриИзменении(Элемент)
	ТекстНСТР = ?(ПереключательРежимаРаботы = "0", Нстр("en = 'Group / Model'; ru = 'Группа / Модель'"),
	Нстр("en = 'Group / Vehicle'; ru = 'Группа / ТС'"));
	Элементы.ДеревоНастроекНастройка.Заголовок = ТекстНСТР;
	Элементы.ТС.Видимость = ?(ПереключательРежимаРаботы = "1", Истина, Ложь);
	ЗаполнитьТабЧасть();
	УстановитьВидимостьДоступность();
КонецПроцедуры
#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура УстановитьФлажки(Команда)
	УстановитьПометки(1);
КонецПроцедуры

&НаКлиенте
Процедура СнятьФлажки(Команда)
	УстановитьПометки(0);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьНастройки(Команда)
	ЗаполнитьТабЧасть();
КонецПроцедуры

&НаКлиенте
Процедура ДействиеВыполнить(Команда)
	Если ДеревоНастроек.ПолучитьЭлементы().Количество() = 0 Тогда
		ТекстНСТР = ?(ПереключательРежимаРаботы = "0", НСтр("en='Not completed list of models!';ru='Не заполнен список моделей!'"),
		НСтр("en='Not completed list of vehicles!';ru='Не заполнен список ТС!'"));
		ПоказатьПредупреждение(Неопределено, ТекстНСТР);
		Возврат;
	КонецЕсли;
	
	Если Не ФлажокЛинейныеНормы И Не ФлажокСезонныеНадбавки Тогда
		ТекстНСТР = НСтр("en='At least one of the flags must be enabled"
"""Change the linear fuel consumption rate"" or"
"""Change season surcharges""!';ru='Должен быть включен хотя бы один из флажков "
"""Изменить линейные нормы расхода топлива"" или"
"""Изменить сезонные надбавки"" !'");
		ПоказатьПредупреждение(Неопределено, ТекстНСТР);
		Возврат;
	КонецЕсли;
	
	Если Не флИзменятьНормуОснТоплива И Не флИзменятьНормуДопТоплива Тогда 
		ТекстНСТР = НСтр("en='At least one of the flags must be enabled"
"""Change the rate of the main fuel"" or"
"""Change the rate of additional fuel""!';ru='Должен быть включен хотя бы один из флажков "
"""Изменять норму основного топлива"" или"
"""Изменять норму дополнительного топлива"" !'");
		ПоказатьПредупреждение(Неопределено, ТекстНСТР);
		Возврат;
	КонецЕсли;
	
	Если ФлажокЛинейныеНормы Тогда
		Если ПереключательПроцент = 0 Тогда
			Если ЗначениеНормыПроцента = 0 Тогда
				ТекстНСТР = НСтр("en='Not specified percent of change!';ru='Не указан процент изменения!'");
				ПоказатьПредупреждение(Неопределено, ТекстНСТР);
				Возврат;
			КонецЕсли;	
		Иначе
			//Если ЭлементыФормы.ЗначениеНормы.Значение = 0 Тогда
			//	Предупреждение("Не указана величина изменения!");
			//	Возврат;
			//КонецЕсли;	
		КонецЕсли;
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(МодельТС) И Не ЗначениеЗаполнено(Топливо)
		И Не ЗначениеЗаполнено(ТС) И Не ЗначениеЗаполнено(ТипДвигателя) И Не ЗначениеЗаполнено(ТипТС)
		И (флЕстьОрганизация И Не ЗначениеЗаполнено(Организация)) Тогда
		ТекстНСТР = СтрШаблон(НСтр("en='Selection is not installed. The list will be filled with all %1 for which fuel consumption rates were previously established.';ru='Отбор не установлен. Список будет заполнен всеми %1, для которых ранее были установлены нормы расхода ГСМ.'"),
		?(ПереключательРежимаРаботы = "0", НСтр("en = 'models'; ru = 'моделями'"), НСтр("en = 'vehicles'; ru = 'ТС'")))+ Символы.ПС + 
		НСтр("en='Do you want to continue?';ru='Продолжить?'");
		ПоказатьВопрос(
		Новый ОписаниеОповещения("ДействиеВыполнитьЗавершение", ЭтотОбъект), 
		ТекстНСТР,
		РежимДиалогаВопрос.ДаНет,
		,
		КодВозвратаДиалога.Нет
		);
	Иначе 
		Для Каждого СтрокаГруппы Из ДеревоНастроек.ПолучитьЭлементы() Цикл
			Если СтрокаГруппы.ЭтоГруппа Тогда
				Для Каждого Строка Из СтрокаГруппы.ПолучитьЭлементы() Цикл
					РассчитатьИзменениеНормыРасходаТоплива(Строка);
				КонецЦикла;	
			Иначе
				РассчитатьИзменениеНормыРасходаТоплива(СтрокаГруппы);
			КонецЕсли;	
		КонецЦикла;
		
		ЗаполнитьТабЧастьСервер();
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьОбъект(Команда)
	ТекущиеДанные = Элементы.ДеревоНастроек.ТекущиеДанные;
	Если ТекущиеДанные <> Неопределено И ЗначениеЗаполнено(ТекущиеДанные.Значение) Тогда
		ПоказатьЗначение(, ТекущиеДанные.Значение);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура ЗаполнитьТабЧастьСервер()
	
	ДеревоНастроек_ = РеквизитФормыВЗначение("ДеревоНастроек");
	ДеревоНастроек_.Строки.Очистить();
	
	Если ПереключательРежимаРаботы = "0" Тогда
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВЫБОР
		|		КОГДА уатМоделиТС.Родитель.Наименование = """"
		|			ТОГДА """"
		|		ИНАЧЕ уатМоделиТС.Родитель.Наименование
		|	КОНЕЦ КАК Группа,
		|	уатМоделиТС.Ссылка
		|ИЗ
		|	РегистрСведений.уатНормыРасходаГСМ.СрезПоследних КАК уатНормыРасходаГСМСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатМоделиТС КАК уатМоделиТС
		|		ПО уатНормыРасходаГСМСрезПоследних.МодельТС = уатМоделиТС.Ссылка
		|ГДЕ
		|	НЕ уатМоделиТС.ПометкаУдаления";
		
		Если флЕстьОрганизация И ЗначениеЗаполнено(Организация) Тогда
			Запрос.Текст = Запрос.Текст + "
			|	И уатНормыРасходаГСМСрезПоследних.Организация = &Организация";
			Запрос.УстановитьПараметр("Организация", Организация);
		КонецЕсли;   
		
		Если ЗначениеЗаполнено(МодельТС) Тогда
			Запрос.Текст = Запрос.Текст + "
			|	И уатМоделиТС.Ссылка В Иерархии (&МодельТС)";
			Запрос.УстановитьПараметр("МодельТС", МодельТС);
		КонецЕсли;   
		
		Если Не ТипДвигателя.Пустая() Тогда
			Запрос.Текст = Запрос.Текст + "
			|	И уатМоделиТС.ТипДвигателя В Иерархии (&ТипДвигателя)";
			Запрос.УстановитьПараметр("ТипДвигателя", ТипДвигателя);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТипТС) Тогда
			Запрос.Текст = Запрос.Текст + "
			|	И уатМоделиТС.ТипТС В Иерархии (&ТипТС)";
			Запрос.УстановитьПараметр("ТипТС", ТипТС);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Топливо) Тогда
			Запрос.Текст = Запрос.Текст + "
			|	И (уатМоделиТС.ОсновноеТопливо = &Топливо ИЛИ уатМоделиТС.ДополнительноеТопливо = &Топливо)";
			Запрос.УстановитьПараметр("Топливо", Топливо);
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "                  
		|УПОРЯДОЧИТЬ ПО
		|	Группа,
		|	Ссылка";
	Иначе
		Запрос = Новый Запрос();
		Запрос.Текст = 
		"ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
		|	ВЫБОР
		|		КОГДА уатТС.Родитель.Наименование = """"
		|			ТОГДА """"
		|		ИНАЧЕ уатТС.Родитель.Наименование
		|	КОНЕЦ КАК Группа,
		|	уатТС.Ссылка КАК Ссылка
		|ИЗ
		|	РегистрСведений.уатНормыРасходаГСМ.СрезПоследних КАК уатНормыРасходаГСМСрезПоследних
		|		ЛЕВОЕ СОЕДИНЕНИЕ Справочник.уатТС КАК уатТС
		|		ПО уатНормыРасходаГСМСрезПоследних.МодельТС = уатТС.Ссылка
		|ГДЕ
		|	НЕ уатТС.ПометкаУдаления";
		
		Если флЕстьОрганизация И ЗначениеЗаполнено(Организация) Тогда
			Запрос.Текст = Запрос.Текст + "
			|	И уатНормыРасходаГСМСрезПоследних.Организация = &Организация";
			Запрос.УстановитьПараметр("Организация", Организация);
		КонецЕсли;   
		
		Если ЗначениеЗаполнено(МодельТС) Тогда
			Запрос.Текст = Запрос.Текст + "
			|	И уатТС.Модель В Иерархии (&МодельТС)";
			Запрос.УстановитьПараметр("МодельТС", МодельТС);
		КонецЕсли;   
		
		Если Не ТипДвигателя.Пустая() Тогда
			Запрос.Текст = Запрос.Текст + "
			|	И уатТС.Модель.ТипДвигателя В Иерархии (&ТипДвигателя)";
			Запрос.УстановитьПараметр("ТипДвигателя", ТипДвигателя);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТипТС) Тогда
			Запрос.Текст = Запрос.Текст + "
			|	И уатТС.ТипТС В Иерархии (&ТипТС)";
			Запрос.УстановитьПараметр("ТипТС", ТипТС);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Топливо) Тогда
			Запрос.Текст = Запрос.Текст + "
			|	И (уатТС.Модель.ОсновноеТопливо = &Топливо ИЛИ уатТС.Модель.ДополнительноеТопливо = &Топливо)";
			Запрос.УстановитьПараметр("Топливо", Топливо);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТС) Тогда
			Запрос.Текст = Запрос.Текст + "
			|	И уатТС.Ссылка = &ТС";
			Запрос.УстановитьПараметр("ТС", ТС);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Подразделение) Тогда
			Запрос.Текст = Запрос.Текст + "
			|	И уатТС.Подразделение = &Подразделение";
			Запрос.УстановитьПараметр("Подразделение", Подразделение);
		КонецЕсли;
		
		Если ЗначениеЗаполнено(Колонна) Тогда
			Запрос.Текст = Запрос.Текст + "
			|	И уатТС.Колонна = &Колонна";
			Запрос.УстановитьПараметр("Колонна", Колонна);
		КонецЕсли;
		
		Если ИспользоватьТолькоНевыбывшиеТС Тогда
			Запрос.Текст = Запрос.Текст + "
			|	И (уатТС.ДатаВыбытия = ДатаВремя(1,1,1) Или уатТС.ДатаВыбытия > &РабочаяДата)";
			Запрос.УстановитьПараметр("РабочаяДата", ДатаИзменения);
		КонецЕсли;
		
		Запрос.Текст = Запрос.Текст + "                  
		|УПОРЯДОЧИТЬ ПО
		|	Группа,
		|	Ссылка";
	КонецЕсли;
	
	Результат = Запрос.Выполнить().Выбрать();
	Родитель = "";
	Пока Результат.Следующий() Цикл
		спр = Результат.Ссылка;
		Если Не спр.ЭтоГруппа Тогда
			Если спр.Родитель <> Родитель И Не спр.Родитель.Пустая() Тогда
				СтрокаГруппы = ДеревоНастроек_.Строки.Добавить();
				СтрокаГруппы.Настройка = спр.Родитель.Наименование;
				СтрокаГруппы.Включать  = Ложь;
				СтрокаГруппы.ЭтоГруппа = спр.Родитель.ЭтоГруппа;
				Родитель = спр.Родитель;
			КонецЕсли;
			
			Если Не спр.Родитель.Пустая() Тогда
				СтрокаНастройки = СтрокаГруппы.Строки.Добавить();
			Иначе
				СтрокаНастройки = ДеревоНастроек_.Строки.Добавить();
			КонецЕсли;
			СтрокаНастройки.Настройка = спр.Наименование;
			СтрокаНастройки.Включать  = Ложь;
			СтрокаНастройки.ЭтоГруппа = спр.ЭтоГруппа;
			СтрокаНастройки.Значение  = спр;
		КонецЕсли;
	КонецЦикла;
	
	ЗначениеВРеквизитФормы(ДеревоНастроек_, "ДеревоНастроек");
	
	Если ДеревоНастроек.ПолучитьЭлементы().Количество() = 0 Тогда
		ТекстНСТР = НСтр("en = 'Could not pick items. Perhaps the fuel consumption rates have not yet been established, or no element corresponds to the selection. For the initial installation of fuel consumption rates, use the form of the element of the directory.'; ru = 'Не удалось подобрать элементы. Возможно, нормы расхода ГСМ еще не были установлены или ни один элемент не соответствует отборам. Для первоначальной установки норм расхода ГСМ используйте форму элемента справочника.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТабЧасть()
	
	Если Не ЗначениеЗаполнено(МодельТС) И Не ЗначениеЗаполнено(Топливо)
		И Не ЗначениеЗаполнено(ТС) И Не ЗначениеЗаполнено(ТипДвигателя) И Не ЗначениеЗаполнено(ТипТС)
			И (флЕстьОрганизация И Не ЗначениеЗаполнено(Организация)) 
				И Не ЗначениеЗаполнено(Подразделение) И Не ЗначениеЗаполнено(Колонна) Тогда
		ТекстНСТР = СтрШаблон(НСтр("en='Selection is not installed. The list will be filled with all %1 for which fuel consumption rates were previously established.';ru='Отбор не установлен. Список будет заполнен всеми %1, для которых ранее были установлены нормы расхода ГСМ.'"),
		?(ПереключательРежимаРаботы = "0", НСтр("en = 'models'; ru = 'моделями'"), НСтр("en = 'vehicles'; ru = 'ТС'")))+ Символы.ПС + 
					НСтр("en='Do you want to continue?';ru='Продолжить?'");
		ПоказатьВопрос(
			Новый ОписаниеОповещения("ЗаполнитьТабЧастьЗавершение", ЭтотОбъект), 
			ТекстНСТР,
			РежимДиалогаВопрос.ДаНет,
			,
			КодВозвратаДиалога.Нет
		);
	Иначе 
		ЗаполнитьТабЧастьФрагмент();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТабЧастьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
        Возврат;
    КонецЕсли;	
    
    ЗаполнитьТабЧастьФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ДействиеВыполнитьЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если РезультатВопроса = КодВозвратаДиалога.Нет Тогда
		Возврат;
	КонецЕсли;	
	
	Для Каждого СтрокаГруппы Из ДеревоНастроек.ПолучитьЭлементы() Цикл
		Если СтрокаГруппы.ЭтоГруппа Тогда
			Для Каждого Строка Из СтрокаГруппы.ПолучитьЭлементы() Цикл
				РассчитатьИзменениеНормыРасходаТоплива(Строка);
			КонецЦикла;	
		Иначе
			РассчитатьИзменениеНормыРасходаТоплива(СтрокаГруппы);
		КонецЕсли;	
	КонецЦикла;
	
	ЗаполнитьТабЧастьФрагмент();

КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТабЧастьФрагмент()
    
    ЗаполнитьТабЧастьСервер();

КонецПроцедуры

&НаКлиенте
Процедура УстановитьПометки(флПометка)
	СтрокиДерева = ДеревоНастроек.ПолучитьЭлементы();
	Для Каждого ТекСтрока Из СтрокиДерева Цикл
		ТекСтрока.Включать = флПометка;
		ПроставитьПометкиВниз(ТекСтрока);
		ПроставитьПометкиВверх(ТекСтрока);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПроставитьПометкиВниз(ТекущиеДанные)
	Потомки = ТекущиеДанные.ПолучитьЭлементы();
	Значение = ТекущиеДанные.Включать;
	Для каждого Потомок из Потомки Цикл
		Потомок.Включать = Значение;
		ПроставитьПометкиВниз(Потомок);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПроставитьПометкиВверх(ТекущиеДанные)
	Родитель = ТекущиеДанные.ПолучитьРодителя();
	Если Родитель <> Неопределено Тогда
		ВсеИстина = Истина;
		НеВсеЛожь = Ложь;
		Потомки = Родитель.ПолучитьЭлементы();
		Для каждого Потомок из Потомки Цикл
			ВсеИстина = ВсеИстина И (Потомок.Включать = 1);
			НеВсеЛожь = НеВсеЛожь ИЛИ Булево(Потомок.Включать);
		КонецЦикла;
		Если ВсеИстина Тогда
			Родитель.Включать = 1;
		ИначеЕсли НеВсеЛожь Тогда
			Родитель.Включать = 2;
		Иначе
			Родитель.Включать = 0;
		КонецЕсли;
		ПроставитьПометкиВверх(Родитель);
	КонецЕсли;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ИзменитьНормуТоплива(СписокНорм, ДатаИзменения, ФлажокЛинейныеНормы, ПереключательПроцент, ЗначениеНормыПроцента, ФлажокСезонныеНадбавки, СезоннаяНадбавка, флЕстьОрганизация, ПереключательРежимаРаботы)
	
	Для Каждого Норма Из СписокНорм Цикл 
		НаличиеСпидометра = ?(ПереключательРежимаРаботы = "0", Норма.МодельТС.НаличиеСпидометра, Норма.МодельТС.Модель.НаличиеСпидометра);
		
		ЛинейнаяНорма = 0;
		НормаСпециальнаяНаМоточас = 0;
		Если ФлажокЛинейныеНормы Тогда
			Если НаличиеСпидометра Тогда
				Если ПереключательПроцент = 0 Тогда
					Если ЗначениеНормыПроцента > 0 Тогда
						ЛинейнаяНорма = Норма.ЛинейнаяНорма + Норма.ЛинейнаяНорма * ЗначениеНормыПроцента / 100;
					Иначе
						Процент = -ЗначениеНормыПроцента;
						ЛинейнаяНорма = Норма.ЛинейнаяНорма - Норма.ЛинейнаяНорма * Процент /(100+Процент);
					КонецЕсли;
				Иначе
					ЛинейнаяНорма = ЗначениеНормыПроцента;
				КонецЕсли;
			Иначе
				Если ПереключательПроцент = 0 Тогда
					Если ЗначениеНормыПроцента > 0 Тогда
						НормаСпециальнаяНаМоточас = Норма.НормаСпециальнаяНаМоточас + Норма.НормаСпециальнаяНаМоточас * ЗначениеНормыПроцента / 100;
					Иначе
						Процент = -ЗначениеНормыПроцента;
						НормаСпециальнаяНаМоточас = Норма.НормаСпециальнаяНаМоточас - Норма.НормаСпециальнаяНаМоточас * Процент /(100+Процент);
					КонецЕсли;
				Иначе
					НормаСпециальнаяНаМоточас = ЗначениеНормыПроцента;
				КонецЕсли;
			КонецЕсли;
		Иначе
			ЛинейнаяНорма             = Норма.ЛинейнаяНорма;
			НормаСпециальнаяНаМоточас = Норма.НормаСпециальнаяНаМоточас;
		КонецЕсли;
		
		Если ФлажокСезонныеНадбавки Тогда
			НормаСезоннаяНадбавка = СезоннаяНадбавка;
		Иначе
			НормаСезоннаяНадбавка = Норма.СезоннаяНадбавка;
		КонецЕсли;
		
		рсНаборЗаписей = РегистрыСведений.уатНормыРасходаГСМ.СоздатьНаборЗаписей();
		рсНаборЗаписей.Отбор.МодельТС.Установить(Норма.МодельТС);
		рсНаборЗаписей.Отбор.ГСМ.Установить(Норма.ГСМ);
		Если флЕстьОрганизация Тогда 
			рсНаборЗаписей.Отбор.Организация.Установить(Норма.Организация);
		КонецЕсли;
		рсНаборЗаписей.Отбор.Период.Установить(НачалоДня(ДатаИзменения));
		рсНаборЗаписей.Прочитать();
		
		Если рсНаборЗаписей.Количество() Тогда
			НоваяНорма = рсНаборЗаписей[0];
		Иначе
			НоваяНорма = рсНаборЗаписей.Добавить();
		КонецЕсли;
		
		ЗаполнитьЗначенияСвойств(НоваяНорма, Норма);
		
		НоваяНорма.Период                    = ДатаИзменения;
		НоваяНорма.ЛинейнаяНорма             = ЛинейнаяНорма;
		НоваяНорма.НормаСпециальнаяНаМоточас = НормаСпециальнаяНаМоточас;
		НоваяНорма.СезоннаяНадбавка          = НормаСезоннаяНадбавка;
		
		Попытка
			рсНаборЗаписей.Записать();
		Исключение
			ТекстОшибки = НСтр("en='Failed to write the changes.';ru='Не удалось записать изменения.'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
			Возврат ТекстОшибки;
		КонецПопытки;
	КонецЦикла;
	
	Возврат "";
	
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьНормуТоплива(Мод, Топл, ДатаИзменения, Организация, флЕстьОрганизация)
	
	РСМетаданные = Метаданные.РегистрыСведений.уатНормыРасходаГСМ;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	*
	|ИЗ
	|	РегистрСведений.уатНормыРасходаГСМ.СрезПоследних(
	|			&Дата,
	|			МодельТС = &Модель
	|				И ГСМ = &Топливо";
	Если флЕстьОрганизация Тогда
		Запрос.Текст = Запрос.Текст + "
		|				И (&Организация = НЕОПРЕДЕЛЕНО
		|				ИЛИ &Организация = ЗНАЧЕНИЕ(Справочник.Организации.ПустаяСсылка)
		|				ИЛИ Организация = &Организация)";
		Запрос.УстановитьПараметр("Организация", Организация);
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|				) КАК уатНормыРасходаГСМСрезПоследних";
	Запрос.УстановитьПараметр("Дата",    НачалоДня(ДатаИзменения));
	Запрос.УстановитьПараметр("Модель",  Мод);
	Запрос.УстановитьПараметр("Топливо", Топл);
	
	Выборка = Запрос.Выполнить().Выбрать();
	
	Результат = Новый Массив();
	Пока Выборка.Следующий() Цикл 
		ДанныеНормы = Новый Структура;
		
		Для Каждого ТекИзм Из РСМетаданные.Измерения Цикл
			ДанныеНормы.Вставить(ТекИзм.Имя, Выборка[ТекИзм.Имя]);
		КонецЦикла;
		Для Каждого ТекРес Из РСМетаданные.Ресурсы Цикл
			ДанныеНормы.Вставить(ТекРес.Имя, Выборка[ТекРес.Имя]);
		КонецЦикла;
		
		Результат.Добавить(ДанныеНормы);
	КонецЦикла;
	
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура РассчитатьИзменениеНормыРасходаТоплива(Строка1)
	
	Если Строка1.Включать = 0 Тогда
		Возврат;
	КонецЕсли;
	
	Модель = Строка1.Значение;
	мМодель = ?(ПереключательРежимаРаботы = "0", Модель, уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(Модель, "Модель"));
	ОснТопливо = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(мМодель, "ОсновноеТопливо");
	ДопТопливо = уатОбщегоНазначенияТиповыеСервер.ПолучитьЗначениеРеквизита(мМодель, "ДополнительноеТопливо");
	
	Если Не ЗначениеЗаполнено(Топливо) Тогда
		Если флИзменятьНормуОснТоплива И Не уатОбщегоНазначения.уатЗначениеНеЗаполнено(ОснТопливо) Тогда
			СписокНорм = ПолучитьНормуТоплива(Модель, ОснТопливо, ДатаИзменения, Организация, флЕстьОрганизация);
			ТекстОшибки = ИзменитьНормуТоплива(СписокНорм, ДатаИзменения, ФлажокЛинейныеНормы, ПереключательПроцент, ЗначениеНормыПроцента, ФлажокСезонныеНадбавки, СезоннаяНадбавка, флЕстьОрганизация, ПереключательРежимаРаботы);
		КонецЕсли;
		
		Если флИзменятьНормуДопТоплива И Не уатОбщегоНазначения.уатЗначениеНеЗаполнено(ДопТопливо) Тогда
			СписокНорм = ПолучитьНормуТоплива(Модель, ДопТопливо, ДатаИзменения, Организация, флЕстьОрганизация);
			ТекстОшибки = ИзменитьНормуТоплива(СписокНорм, ДатаИзменения, ФлажокЛинейныеНормы, ПереключательПроцент, ЗначениеНормыПроцента, ФлажокСезонныеНадбавки, СезоннаяНадбавка, флЕстьОрганизация, ПереключательРежимаРаботы);
		КонецЕсли;
		
	Иначе
		Если (ОснТопливо = Топливо И флИзменятьНормуОснТоплива) Или (ДопТопливо = Топливо И флИзменятьНормуДопТоплива) Тогда 
			СписокНорм = ПолучитьНормуТоплива(Модель, Топливо, ДатаИзменения, Организация, флЕстьОрганизация);
			ТекстОшибки = ИзменитьНормуТоплива(СписокНорм, ДатаИзменения, ФлажокЛинейныеНормы, ПереключательПроцент, ЗначениеНормыПроцента, ФлажокСезонныеНадбавки, СезоннаяНадбавка, флЕстьОрганизация, ПереключательРежимаРаботы);
		Иначе 
			ТекстОшибки = НСтр("en='Type of fuel in the selection does not match the type of fuel for change!';ru='Вид топлива в отборе не соответствует виду топлива для изменения!'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		КонецЕсли;
	КонецЕсли;
	
	Если ТекстОшибки = "" Тогда
		ТекстОповещения = НСтр("en='Change of fuel consumption norms successfully completed.';ru='Изменение норм расхода топлива успешно завершено.'");
		ПоказатьОповещениеПользователя(
			ТекстОповещения,
			,
			ТекстОповещения,
			БиблиотекаКартинок.Успешно32
		);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОписаниеОповещенияВыбораГСМ(Результат, ДопПараметры) Экспорт
	Если Результат = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Топливо = Результат;
КонецПроцедуры

&НаКлиенте
Процедура УстановитьВидимостьДоступность()
	
	Если ПереключательРежимаРаботы = "0" Тогда
		Элементы.Подразделение.Видимость = Ложь;
		Элементы.Колона.Видимость = Ложь;
		Элементы.ТС.Видимость = Ложь;
		Элементы.ИспользоватьТолькоНевыбывшиеТС.Видимость = Ложь;
	Иначе
		Элементы.Подразделение.Видимость = Истина;
		Элементы.Колона.Видимость = Истина;
		Элементы.ТС.Видимость = Истина;
		Элементы.ИспользоватьТолькоНевыбывшиеТС.Видимость = Истина;
	КонецЕсли;
	
	Элементы.Группа3.Доступность 			   = ФлажокСезонныеНадбавки;  
	Элементы.ЗначениеНормыПроцента.Доступность = ФлажокЛинейныеНормы;
	Элементы.ПереключательПроцент.Доступность  = ФлажокЛинейныеНормы;
	
КонецПроцедуры

#КонецОбласти

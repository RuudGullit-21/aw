
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)

	// начало блока стандартных операций
	ДопПараметрыОткрытие = Новый Структура("ИмяФормы", ИмяФормы);
	уатЗащищенныеФункцииСервер.уатОбработкаФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	// конец блока стандартных операций
	
	ПоказыватьЦены      = Истина;
	ПоказыватьОстатки   = Истина;
	ПоказыватьСчетУчета = Истина;
	ЕстьКоличество      = Истина;
	ПоказыватьДополнительнуюИнформацию = Ложь;
	ПоказыватьПодобранныеТовары = Истина;
	
	СписокСвойств = "ЕстьЦена, Валюта, ДатаРасчетов, ДоговорКонтрагента, Заголовок, ИмяТаблицы, Контрагент, Организация,
		|Подразделение, ПоказыватьОстатки, ПоказыватьЦены, Склад, ПоказыватьСчетУчета, ТипЦен, Услуги, ВидПодбора";
		
	СписокСвойств = СписокСвойств + ?(Параметры.Свойство("ЕстьКоличество"),", ЕстьКоличество","");
	
	ЗаполнитьЗначенияСвойств(ЭтотОбъект, Параметры, СписокСвойств);
	
	Если ЗначениеЗаполнено(ТипЦен) Тогда
		ВалютаЦены = ТипЦен.ВалютаЦены;
	КонецЕсли;
	
	//// Определим настройку учета по складам и по подразделениям.
	//СчетТоварыНаСкладах  = ПланыСчетов.Хозрасчетный.ТоварыНаСкладах;
	Если ЗначениеЗаполнено(Организация) Тогда
		ВедетсяУчетПоСкладам = уатПраваИНастройки.уатПолучитьПраваИНастройкиПользователя(Организация,
		ПланыВидовХарактеристик.уатПраваИНастройки.ВестиСкладскойУчетУАТ)
	Иначе
		ВедетсяУчетПоСкладам = Ложь;//БухгалтерскийУчетВызовСервераПовтИсп.ВедетсяУчетПоСкладам(СчетТоварыНаСкладах);
	КонецЕсли;
	
	Настройки = ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекЗагрузить("уатПодборНоменклатуры",);
	Если Настройки <> Неопределено Тогда
		Если Настройки.Свойство("ЗапрашиватьКоличество") Тогда
			ЗапрашиватьКоличество = Настройки.ЗапрашиватьКоличество;
		КонецЕсли;
		Если Настройки.Свойство("ЗапрашиватьЦену") Тогда
			ЗапрашиватьЦену = Настройки.ЗапрашиватьЦену;
		КонецЕсли;
		Если Настройки.Свойство("РежимПолученияОстатков") Тогда
			РежимПолученияОстатков = Настройки.РежимПолученияОстатков;
		КонецЕсли;
	КонецЕсли;
	Если Не ЗначениеЗаполнено(ДатаРасчетов) Тогда
		Элементы.РежимПолученияОстатков.Доступность = Ложь;
		РежимПолученияОстатковПред = ?(ЗначениеЗаполнено(РежимПолученияОстатков), РежимПолученияОстатков, Перечисления.уатРежимПолученияОстатков.НаТекущуюДату);
		РежимПолученияОстатков = Перечисления.уатРежимПолученияОстатков.НаТекущуюДату;
		Элементы.РежимПолученияОстатков.СписокВыбора.Очистить();
		Элементы.РежимПолученияОстатков.СписокВыбора.Добавить(Перечисления.уатРежимПолученияОстатков.НаТекущуюДату, "на текущую дату", Истина);
		Элементы.РежимПолученияОстатков.СписокВыбора.Добавить(Перечисления.уатРежимПолученияОстатков.НаДатуДокумента, "на дату документа", Ложь);
	Иначе
		Элементы.РежимПолученияОстатков.СписокВыбора.Очистить();
		Элементы.РежимПолученияОстатков.СписокВыбора.Добавить(Перечисления.уатРежимПолученияОстатков.НаТекущуюДату, "на текущую дату");
		Элементы.РежимПолученияОстатков.СписокВыбора.Добавить(Перечисления.уатРежимПолученияОстатков.НаДатуДокумента, "на дату документа (" + Строка(ДатаРасчетов) + ")");
		Если Не ЗначениеЗаполнено(РежимПолученияОстатков) Тогда
			РежимПолученияОстатков = Перечисления.уатРежимПолученияОстатков.НаТекущуюДату;
		КонецЕсли;
	КонецЕсли;

	Если ЗначениеЗаполнено(Параметры.Заголовок) Тогда
		Заголовок = Параметры.Заголовок;
		АвтоЗаголовок = Ложь;
	КонецЕсли;
	
	// Если в заявке на ремонт или ремонтном листе была указана собственная ремонтная зона и склад, то выводим только
	// остатки на нем
	Если ЗначениеЗаполнено(Параметры.Склад) Тогда
		СписокНоменклатуры.Параметры.УстановитьЗначениеПараметра("Склад", Параметры.Склад);
		ПоказыватьТолькоОстатки = Истина;
	КонецЕсли;
	
	// Колонки надо "отключить" ДО выполнения запроса в СписокНоменклатуры, в противном случае
	//  в запросе произойдёт левое соединение с таблицей цен и строки задвоятся.
	// Если указывать условия только в условном оформлении, то они не успеют сработать до выполнения запроса.
	Если НЕ ПоказыватьЦены Тогда
		Элементы.СписокНоменклатурыЦена.Видимость   = Ложь;
		Элементы.СписокНоменклатурыВалюта.Видимость = Ложь;
	КонецЕсли;
	//Если НЕ ЭтотОбъект.ПоказыватьСчетУчета Тогда
	//	Элементы.СписокНоменклатурыСчетУчета.Видимость = Ложь;
	//КонецЕсли;
	Если НЕ ПоказыватьОстатки Тогда
		Элементы.СписокНоменклатурыКоличествоОстаток.Видимость = Ложь;
	КонецЕсли;
	Элементы.ГруппаПоказыватьТолькоОстатки.Видимость = ПоказыватьОстатки;
	
	Если НЕ уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД() Тогда
		СкладСнабжения = Склад.СкладСнабжения;
	КонецЕсли;
	Элементы.СкладСнабжения.Видимость = ЗначениеЗаполнено(СкладСнабжения);
	Элементы.СписокНоменклатурыКоличествоОстатокСнабжение.Видимость = ЗначениеЗаполнено(СкладСнабжения);
		
	УправлениеСписком();

	Элементы.ПоказыватьТолькоОстатки.Заголовок = "Только в наличии" +
		?(ЗначениеЗаполнено(Параметры.Склад), " на складе """ + Параметры.Склад + """", " на всех складах");
		
	ТекущийЭлемент = Элементы.СтрокаПоиска;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// начало блока стандартных операций
	уатЗащищенныеФункцииКлиент.уатОбработкаФормаПриОткрытии(Отказ, ДопПараметрыОткрытие);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	// конец блока стандартных операций
	
	УстановитьВидимость();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Тогда 
		Возврат;
		
	Иначе 
		Если Не ПеренестиВДокумент И Объект.ПодобраннаяНоменклатура.Количество() > 0 Тогда
			Отказ = Истина;
			ТекстНСТР = НСтр("en='Selected goods are not transferred to document."
""
"Transfer?';ru='Подобранные товары не перенесены в документ."
""
"Перенести?'");
			ПоказатьВопрос(Новый ОписаниеОповещения("ПередЗакрытиемЗавершение", ЭтотОбъект), ТекстНСТР, РежимДиалогаВопрос.ДаНетОтмена);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
    
    ОтветНаВопрос = РезультатВопроса;
    
	Если ОтветНаВопрос = КодВозвратаДиалога.Нет Тогда
		Объект.ПодобраннаяНоменклатура.Очистить();
		Закрыть();   
    ИначеЕсли ОтветНаВопрос = КодВозвратаДиалога.Да Тогда
        ПеренестиВДокумент = Истина;
		Закрыть();
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	
	Если ЗавершениеРаботы Тогда 
		Возврат;
	КонецЕсли;
	
	СтруктураВозврата = ПриЗакрытииНаСервере();
		
	Если ПеренестиВДокумент Тогда
		ОповеститьОВыборе(СтруктураВозврата);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура ПоказыватьТолькоОстаткиПриИзменении(Элемент)
	
	УстановитьЗначениеПараметраПоказыватьТолькоОстаткиСпискаНоменклатуры();
	
КонецПроцедуры

&НаКлиенте
Процедура РежимПолученияОстатковПриИзменении(Элемент)
	Если Не ЗначениеЗаполнено(ДатаРасчетов)
		Или РежимПолученияОстатков = ПредопределенноеЗначение("Перечисление.уатРежимПолученияОстатков.НаТекущуюДату") Тогда
		ДатаОстатки = Неопределено;
	Иначе
		ДатаОстатки = ДатаРасчетов;
	КонецЕсли;
	СписокНоменклатуры.Параметры.УстановитьЗначениеПараметра("ДатаОстатки", ДатаОстатки);
КонецПроцедуры

&НаКлиенте
Процедура СкрытьПодобранныеТоварыНажатие(Элемент)
	ПоказыватьПодобранныеТовары = Ложь;
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьПодобранныеТоварыНажатие(Элемент)
	ПоказыватьПодобранныеТовары = Истина;
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура СкрытьДополнительнуюИнформациюНажатие(Элемент)
	ПоказыватьДополнительнуюИнформацию = Ложь;
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьДополнительнуюИнформациюНажатие(Элемент)
	ПоказыватьДополнительнуюИнформацию = Истина;
	УстановитьВидимость();
КонецПроцедуры

&НаКлиенте
Процедура СкладСнабженияПриИзменении(Элемент)
	УправлениеСписком();
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыИерархияНоменклатуры

&НаКлиенте
Процедура ИерархияНоменклатурыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	УстановитьОтборПоИерархииНоменклатуры(ВыбраннаяСтрока);

КонецПроцедуры

&НаКлиенте
Процедура ИерархияНоменклатурыПриАктивизацииСтроки(Элемент)

	УстановитьОтборПоИерархииНоменклатуры(Элементы.ИерархияНоменклатуры.ТекущаяСтрока);

КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыСписокНоменклатуры

&НаКлиенте
Процедура СписокНоменклатурыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	СтруктураПараметрыНоменклатуры = ПолучитьСтруктуруПараметрыНоменклатуры(Элемент, "НоменклатураСсылка");
	Если СтруктураПараметрыНоменклатуры <> Неопределено Тогда
		ПодобратьНоменклатуру(СтруктураПараметрыНоменклатуры);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатурыВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	СписокНоменклатурыВыбор(Элемент, Значение, , СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатурыПриАктивизацииСтроки(Элемент)
	ТекущиеДанные = Элементы.СписокНоменклатуры.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		АналогиНоменклатуры.Очистить();
		Возврат;
	КонецЕсли;
	
	Если ПоказыватьДополнительнуюИнформацию Тогда
		ПараметрыПолученияАналогов = Новый Структура;
		ПараметрыПолученияАналогов.Вставить("Номенклатура", ТекущиеДанные.НоменклатураСсылка);
		Если ПоказыватьОстатки Тогда
			ПараметрыПолученияАналогов.Вставить("ПолучатьОстатки", Истина);
			ПараметрыПолученияАналогов.Вставить("ДатаРасчетов", ДатаРасчетов);
			Если Не ЗначениеЗаполнено(ДатаРасчетов)
				Или РежимПолученияОстатков = ПредопределенноеЗначение("Перечисление.уатРежимПолученияОстатков.НаТекущуюДату") Тогда
				ДатаОстатки = Неопределено;
			Иначе
				ДатаОстатки = ДатаРасчетов;
			КонецЕсли;
			ПараметрыПолученияАналогов.Вставить("ДатаОстатки", ДатаОстатки);
			ПараметрыПолученияАналогов.Вставить("Склад", Склад);
		КонецЕсли;
		Если ПоказыватьЦены И ЕстьЦена Тогда
			ПараметрыПолученияАналогов.Вставить("ПолучатьЦены", Истина);
			ПараметрыПолученияАналогов.Вставить("Контрагент", Контрагент);
		КонецЕсли;
		мсвАналоги = ПолучитьАналогиНоменклатуры(ПараметрыПолученияАналогов);
		АналогиНоменклатуры.Очистить();
		Для Каждого СтрокаАналог Из мсвАналоги Цикл
			НоваяСтрока = АналогиНоменклатуры.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, СтрокаАналог);
		КонецЦикла;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СписокНоменклатурыНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	СтруктураПараметрыНоменклатуры = Новый Структура();
	СтруктураПараметрыНоменклатуры.Вставить("Номенклатура", Элемент.ТекущиеДанные.НоменклатураСсылка);
	Если ЕстьЦена И ПоказыватьЦены Тогда
		СтруктураПараметрыНоменклатуры.Вставить("Цена", Элемент.ТекущиеДанные.Цена);
		СтруктураПараметрыНоменклатуры.Вставить("Валюта", Элемент.ТекущиеДанные.Валюта);
	КонецЕсли;
	
	ПараметрыПеретаскивания.Значение = СтруктураПараметрыНоменклатуры;		
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыАналогиНоменклатуры

&НаКлиенте
Процедура АналогиНоменклатурыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)

	СтандартнаяОбработка = Ложь;
	СтруктураПараметрыНоменклатуры = ПолучитьСтруктуруПараметрыНоменклатуры(Элемент, "Аналог");
	Если СтруктураПараметрыНоменклатуры <> Неопределено Тогда
		ПодобратьНоменклатуру(СтруктураПараметрыНоменклатуры);
	КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура АналогиНоменклатурыВыборЗначения(Элемент, Значение, СтандартнаяОбработка)
	АналогиНоменклатурыВыбор(Элемент, Значение, , СтандартнаяОбработка);
КонецПроцедуры

&НаКлиенте
Процедура АналогиНоменклатурыНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	Если Элемент.ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	СтандартнаяОбработка = Ложь;
	СтруктураПараметрыНоменклатуры = Новый Структура();
	СтруктураПараметрыНоменклатуры.Вставить("Номенклатура", Элемент.ТекущиеДанные.Аналог);
	Если ЕстьЦена И ПоказыватьЦены Тогда
		СтруктураПараметрыНоменклатуры.Вставить("Цена", Элемент.ТекущиеДанные.Цена);
		СтруктураПараметрыНоменклатуры.Вставить("Валюта", Элемент.ТекущиеДанные.Валюта);
	КонецЕсли;
	
	ПараметрыПеретаскивания.Значение = СтруктураПараметрыНоменклатуры;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормыПодобраннаяНоменклатура

&НаКлиенте
Процедура ПодобраннаяНоменклатураПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа)

	Отказ = Истина;

КонецПроцедуры

&НаКлиенте
Процедура ПодобраннаяНоменклатураКоличествоПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ПодобраннаяНоменклатура.ТекущиеДанные;
	ТекущиеДанные.Сумма = ТекущиеДанные.Цена * ТекущиеДанные.Количество;

КонецПроцедуры

&НаКлиенте
Процедура ПодобраннаяНоменклатураЦенаПриИзменении(Элемент)

	ТекущиеДанные = Элементы.ПодобраннаяНоменклатура.ТекущиеДанные;
	ТекущиеДанные.Сумма = ТекущиеДанные.Цена * ТекущиеДанные.Количество;

КонецПроцедуры

&НаКлиенте
Процедура ПодобраннаяНоменклатураСуммаПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ПодобраннаяНоменклатура.ТекущиеДанные;
	Если ТекущиеДанные.Количество = 0 Тогда
		ТекущиеДанные.Цена = 0;
	Иначе
		ТекущиеДанные.Цена = ТекущиеДанные.Сумма / ТекущиеДанные.Количество;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобраннаяНоменклатураПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Структура") Тогда
		ПодобратьНоменклатуру(ПараметрыПеретаскивания.Значение);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПодобраннаяНоменклатураПроверкаПеретаскивания(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	Если ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("Структура") 
		Или ТипЗнч(ПараметрыПеретаскивания.Значение) = Тип("ДанныеФормыЭлементКоллекции") Тогда
		СтандартнаяОбработка = Ложь;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПеренестиВДокумент(Команда)

	ПеренестиВДокумент = Истина;
	Закрыть(КодВозвратаДиалога.OK);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройкиПодбора(Команда)

	ПараметрыФормы = Новый Структура("ЕстьЦена, ЕстьКоличество", ЕстьЦена, ЕстьКоличество);
	Результат = Неопределено;

	ОткрытьФорму("Обработка.уатПодборНоменклатуры.Форма.НастройкиПодбора", ПараметрыФормы, ЭтотОбъект,,,, Новый ОписаниеОповещения("ОткрытьФормуНастройкиПодбораЗавершение", ЭтотОбъект), РежимОткрытияОкнаФормы.БлокироватьВесьИнтерфейс);

КонецПроцедуры

&НаКлиенте
Процедура ОткрытьФормуНастройкиПодбораЗавершение(Результат1, ДополнительныеПараметры) Экспорт
    
    Результат = Результат1;
    Если Результат <> Неопределено Тогда
        ЗапрашиватьКоличество = Результат.ЗапрашиватьКоличество;
        ЗапрашиватьЦену       = Результат.ЗапрашиватьЦену;
    КонецЕсли;

КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаСервере
Процедура УправлениеСписком()

	ДатаЦены = ?(НЕ ЗначениеЗаполнено(ДатаРасчетов), ТекущаяДатаСеанса(), ДатаРасчетов);
	Если Не ЗначениеЗаполнено(ДатаРасчетов)
		Или РежимПолученияОстатков = ПредопределенноеЗначение("Перечисление.уатРежимПолученияОстатков.НаТекущуюДату") Тогда
		ДатаОстатки = Неопределено;
	Иначе
		ДатаОстатки = ДатаРасчетов;
	КонецЕсли;

	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(СписокНоменклатуры, "ТипЦен", ТипЦен, ЗначениеЗаполнено(ТипЦен));
	
	ИспользоватьОтборПоСкладу 		= Истина;
	ИспользоватьОтборПоСчетуНеГТД 	= Истина;

	СписокНоменклатуры.Параметры.УстановитьЗначениеПараметра("ДатаОстатки"  	, ДатаОстатки);
	СписокНоменклатуры.Параметры.УстановитьЗначениеПараметра("ДатаЦены"  	    , ДатаЦены);
	СписокНоменклатуры.Параметры.УстановитьЗначениеПараметра("Контрагент"  	    , Контрагент);
	УстановитьЗначениеПараметраПоказыватьТолькоОстаткиСпискаНоменклатуры();
	
	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(СписокНоменклатуры, "НоменклатураСсылка.Услуга",
		Услуги, ТипЗнч(Услуги) = Тип("Булево"));

КонецПроцедуры

&НаКлиенте
Процедура УстановитьОтборПоИерархииНоменклатуры(ГруппаНоменклатуры)

	ОтборыСписковКлиентСервер.ИзменитьЭлементОтбораСписка(СписокНоменклатуры, "НоменклатураСсылка",
		ГруппаНоменклатуры, ЗначениеЗаполнено(ГруппаНоменклатуры), ВидСравненияКомпоновкиДанных.ВИерархии);

КонецПроцедуры

&НаСервере
Функция ПоместитьПодобраннуюНоменклатуруВХранилище()

	ТаблицаНоменклатуры = Объект.ПодобраннаяНоменклатура.Выгрузить();

	АдресПодобраннойНоменклатурыВХранилище = ПоместитьВоВременноеХранилище(ТаблицаНоменклатуры, УникальныйИдентификатор);

	Возврат АдресПодобраннойНоменклатурыВХранилище;

КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьЦенуПослеПересчета(Знач Цена, Знач ВалютаНач, Знач ВалютаКон, Знач ДатаПересчета)

	КурсКратностьНач = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ВалютаНач, ДатаПересчета);
	КурсКратностьКон = уатОбщегоНазначенияТиповые.ПолучитьКурсВалюты(ВалютаКон, ДатаПересчета);

	Возврат уатОбщегоНазначенияТиповые.ПересчитатьИзВалютыВВалюту(Цена,
		ВалютаНач, ВалютаКон,
		КурсКратностьНач.Курс, КурсКратностьКон.Курс,
		КурсКратностьНач.Кратность, КурсКратностьКон.Кратность);

КонецФункции

&НаСервере
Процедура УстановитьЗначениеПараметраПоказыватьТолькоОстаткиСпискаНоменклатуры()
	
	ЗначениеПараметра = ПоказыватьТолькоОстатки И ПоказыватьОстатки;
	СписокНоменклатуры.Параметры.УстановитьЗначениеПараметра("ПоказыватьТолькоОстатки", ЗначениеПараметра);
	СписокНоменклатуры.Параметры.УстановитьЗначениеПараметра("ВестиСкладскойУчет",ВедетсяУчетПоСкладам);
	СписокНоменклатуры.Параметры.УстановитьЗначениеПараметра("Склад", Склад);
	СписокНоменклатуры.Параметры.УстановитьЗначениеПараметра("СкладСнабжения", СкладСнабжения);
	
КонецПроцедуры

&НаСервере
Функция ПриЗакрытииНаСервере()

	СтруктураВозврата = Новый Структура();

	ПараметрыЗакрытия = Новый Структура;
	ПараметрыЗакрытия.Вставить("ЗапрашиватьКоличество"     , ЗапрашиватьКоличество);
	ПараметрыЗакрытия.Вставить("ЗапрашиватьЦену"           , ЗапрашиватьЦену);
	Если Элементы.РежимПолученияОстатков.Доступность Тогда
		ПараметрыЗакрытия.Вставить("РежимПолученияОстатков", РежимПолученияОстатков);
	Иначе
		ПараметрыЗакрытия.Вставить("РежимПолученияОстатков", РежимПолученияОстатковПред);
	КонецЕсли;
	
	ОбщегоНазначенияВызовСервера.ХранилищеОбщихНастроекСохранить("уатПодборНоменклатуры", , ПараметрыЗакрытия);

	Если ПеренестиВДокумент Тогда
		АдресПодобраннойНоменклатурыВХранилище = ПоместитьПодобраннуюНоменклатуруВХранилище();
		СтруктураВозврата.Вставить("АдресПодобраннойНоменклатурыВХранилище", АдресПодобраннойНоменклатурыВХранилище);
	КонецЕсли;
	
	Возврат СтруктураВозврата;

КонецФункции

&НаКлиенте
Процедура УстановитьВидимость()
	Элементы.ПоказатьПодобранныеТовары.Видимость = Не ПоказыватьПодобранныеТовары;
	Элементы.СкрытьПодобранныеТовары.Видимость = ПоказыватьПодобранныеТовары;
	Элементы.ПодобраннаяНоменклатура.Видимость = ПоказыватьПодобранныеТовары;
	
	Элементы.ПоказатьДополнительнуюИнформацию.Видимость = Не ПоказыватьДополнительнуюИнформацию;
	Элементы.СкрытьДополнительнуюИнформацию.Видимость = ПоказыватьДополнительнуюИнформацию;
	Элементы.АналогиНоменклатуры.Видимость = ПоказыватьДополнительнуюИнформацию;
	
	Элементы.АналогиНоменклатурыКоличествоОстаток.Видимость = ПоказыватьОстатки;
	
	Элементы.АналогиНоменклатурыВалюта.Видимость = ПоказыватьЦены;
	Элементы.АналогиНоменклатурыЦена.Видимость = ПоказыватьЦены;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьАналогиНоменклатуры(ПараметрыПолученияАналогов)
	Если Не ТипЗнч(ПараметрыПолученияАналогов) = Тип("Структура") Тогда
		Результат = Новый Массив;
		Возврат Результат;
	КонецЕсли;
		
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	|	уатАналоги.Аналог КАК Аналог,
	|	уатАналоги.Аналог.Артикул КАК АналогАртикул,
	|	уатАналоги.Главный КАК Главный,
	|	""Прямой"" КАК ПрямойАналог
	|ПОМЕСТИТЬ втАналоги
	|ИЗ
	|	РегистрСведений.уатАналоги КАК уатАналоги
	|ГДЕ
	|	уатАналоги.Номенклатура = &Номенклатура
	|
	|ОБЪЕДИНИТЬ ВСЕ
	|
	|ВЫБРАТЬ
	|	уатАналоги.Номенклатура,
	|	уатАналоги.Номенклатура.Артикул,
	|	ЛОЖЬ,
	|	""Обратный""
	|ИЗ
	|	РегистрСведений.уатАналоги КАК уатАналоги
	|ГДЕ
	|	уатАналоги.Аналог = &Номенклатура
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////";

	Если ПараметрыПолученияАналогов.Свойство("ПолучатьЦены") Тогда
		Запрос.Текст = Запрос.Текст + "
		|	ВЫБРАТЬ
		|	уатЦеныНоменклатурыКонтрагентовСрезПоследних.Номенклатура КАК Номенклатура,
		|	уатЦеныНоменклатурыКонтрагентовСрезПоследних.Валюта КАК Валюта,
		|	уатЦеныНоменклатурыКонтрагентовСрезПоследних.Цена КАК Цена,
		|	ВЫБОР
		|		КОГДА уатЦеныНоменклатурыКонтрагентовСрезПоследних.Контрагент = &Контрагент
		|			ТОГДА 1
		|		КОГДА уатЦеныНоменклатурыКонтрагентовСрезПоследних.Контрагент = Значение(Справочник.Контрагенты.ПустаяСсылка)
		|			ТОГДА 2
		|		КОГДА уатЦеныНоменклатурыКонтрагентовСрезПоследних.Контрагент = Значение(Справочник.уатАЗС.ПустаяСсылка)
		|			ТОГДА 3
		|		ИНАЧЕ 4
		|	КОНЕЦ КАК Приоритет
		|ПОМЕСТИТЬ втЦены
		|ИЗ
		|	РегистрСведений.уатЦеныНоменклатурыКонтрагентов.СрезПоследних(
		|			&ДатаЦены,
		|			(Контрагент = &Контрагент
		|				ИЛИ Контрагент = Значение(Справочник.Контрагенты.ПустаяСсылка)
		|				ИЛИ Контрагент = Значение(Справочник.уатАЗС.ПустаяСсылка)
		|				ИЛИ Контрагент = НЕОПРЕДЕЛЕНО)
		|				И Номенклатура В
		|					(ВЫБРАТЬ
		|						втАналоги.Аналог
		|					ИЗ
		|						втАналоги КАК втАналоги)) КАК уатЦеныНоменклатурыКонтрагентовСрезПоследних
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втЦены.Номенклатура КАК Номенклатура,
		|	МИНИМУМ(втЦены.Приоритет) КАК Приоритет
		|ПОМЕСТИТЬ втПриоритеты
		|ИЗ
		|	втЦены КАК втЦены
		|
		|СГРУППИРОВАТЬ ПО
		|	втЦены.Номенклатура
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////
		|ВЫБРАТЬ
		|	втЦены.Номенклатура КАК Номенклатура,
		|	втЦены.Валюта КАК Валюта,
		|	втЦены.Цена КАК Цена,
		|	втПриоритеты.Приоритет КАК Приоритет
		|ПОМЕСТИТЬ втЦеныСПриоритетами
		|ИЗ
		|	втЦены КАК втЦены
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ втПриоритеты КАК втПриоритеты
		|		ПО втЦены.Номенклатура = втПриоритеты.Номенклатура
		|			И втЦены.Приоритет = втПриоритеты.Приоритет
		|;
		|
		|////////////////////////////////////////////////////////////////////////////////"
	КонецЕсли;
	
	Запрос.Текст = Запрос.Текст + "
	|ВЫБРАТЬ
	|	втАналоги.Аналог КАК Аналог,
	|	втАналоги.АналогАртикул КАК АналогАртикул,
	|	МАКСИМУМ(втАналоги.Главный) КАК Главный,";
	Если ПараметрыПолученияАналогов.Свойство("ПолучатьОстатки") Тогда
		Запрос.Текст = Запрос.Текст + "
		|	МАКСИМУМ(уатПартииТоваровНаСкладахОстатки.КоличествоОстаток) КАК КоличествоОстаток,";
	КонецЕсли;
	Если ПараметрыПолученияАналогов.Свойство("ПолучатьЦены") Тогда
		Запрос.Текст = Запрос.Текст + "
		|		МАКСИМУМ(ЕСТЬNULL(втЦеныСПриоритетами.Цена, 0)) КАК Цена,
		|		МАКСИМУМ(ЕСТЬNULL(втЦеныСПриоритетами.Валюта, НЕОПРЕДЕЛЕНО)) КАК Валюта,";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|	ВЫБОР
	|		КОГДА МАКСИМУМ(втАналоги.ПрямойАналог) <> МИНИМУМ(втАналоги.ПрямойАналог)
	|			ТОГДА ""Взаимный""
	|		ИНАЧЕ МАКСИМУМ(втАналоги.ПрямойАналог)
	|	КОНЕЦ КАК ПрямойАналог
	|ИЗ
	|	втАналоги КАК втАналоги";
	Если ПараметрыПолученияАналогов.Свойство("ПолучатьОстатки") Тогда
		Запрос.Текст = Запрос.Текст + "
		|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрНакопления.уатПартииТоваровНаСкладах.Остатки(
		|				&ДатаОстатки,
		|				Номенклатура В
		|					(ВЫБРАТЬ
		|						втАналоги.Аналог
		|					ИЗ
		|						втАналоги КАК втАналоги)
		|				И ВЫБОР
		|					КОГДА &Склад <> ЗНАЧЕНИЕ(Справочник.Склады.ПустаяСсылка)
		|						ТОГДА Склад = &Склад
		|					ИНАЧЕ ИСТИНА
		|				КОНЕЦ) КАК уатПартииТоваровНаСкладахОстатки
		|		ПО втАналоги.Аналог = уатПартииТоваровНаСкладахОстатки.Номенклатура";
	КонецЕсли;
	Если ПараметрыПолученияАналогов.Свойство("ПолучатьЦены") Тогда
		Запрос.Текст = Запрос.Текст + "
		|		ЛЕВОЕ СОЕДИНЕНИЕ втЦеныСПриоритетами КАК втЦеныСПриоритетами
		|		ПО втАналоги.Аналог = втЦеныСПриоритетами.Номенклатура";
	КонецЕсли;
	Запрос.Текст = Запрос.Текст + "
	|
	|СГРУППИРОВАТЬ ПО
	|	втАналоги.Аналог,
	|	втАналоги.АналогАртикул
	|	
	|УПОРЯДОЧИТЬ ПО
	|	Главный УБЫВ";
	Запрос.УстановитьПараметр("Номенклатура", ПараметрыПолученияАналогов.Номенклатура);
	Если ПараметрыПолученияАналогов.Свойство("ПолучатьОстатки") Тогда
		Запрос.УстановитьПараметр("ДатаОстатки", ПараметрыПолученияАналогов.ДатаОстатки);
	КонецЕсли;
	Если ПараметрыПолученияАналогов.Свойство("Склад") Тогда
		Запрос.УстановитьПараметр("Склад", ПараметрыПолученияАналогов.Склад);
	Иначе
		Запрос.УстановитьПараметр("Склад", Справочники.Склады.ПустаяСсылка());
	КонецЕсли;
	Если ПараметрыПолученияАналогов.Свойство("ПолучатьЦены") Тогда 
		ДатаЦены = ?(НЕ ЗначениеЗаполнено(ПараметрыПолученияАналогов.ДатаРасчетов), ТекущаяДатаСеанса(), ПараметрыПолученияАналогов.ДатаРасчетов);
		Запрос.УстановитьПараметр("ДатаЦены", ДатаЦены);
		Запрос.УстановитьПараметр("Контрагент", ПараметрыПолученияАналогов.Контрагент);
	КонецЕсли;
	тблАналоги = Запрос.Выполнить().Выгрузить();
	Результат = уатОбщегоНазначенияСервер.ПреобразоватьТаблицувМассивСтрок(тблАналоги);
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ПодобратьНоменклатуру(СтруктураПараметрыНоменклатуры)
	
	Количество = 1;
	
	Если ЗапрашиватьКоличество и ЕстьКоличество ИЛИ ЗапрашиватьЦену И ЕстьЦена Тогда
		ПараметрыФормы = Новый Структура;
		ПараметрыФормы.Вставить("Номенклатура"  , СтруктураПараметрыНоменклатуры.Номенклатура);
		ПараметрыФормы.Вставить("Цена"          , ?(СтруктураПараметрыНоменклатуры.Свойство("Цена"), СтруктураПараметрыНоменклатуры.Цена, 0));
		ПараметрыФормы.Вставить("Количество"    , 1);
		ПараметрыФормы.Вставить("Валюта"        , Валюта);
		ПараметрыФормы.Вставить("ЕстьЦена"      , ЗапрашиватьЦену И ЕстьЦена);
		ПараметрыФормы.Вставить("ЕстьКоличество", ЗапрашиватьКоличество И ЕстьКоличество);
		
		ОткрытьФорму("Обработка.уатПодборНоменклатуры.Форма.ФормаВводаЦенаКоличество", ПараметрыФормы, ЭтотОбъект,,,,
		Новый ОписаниеОповещения("ПодобратьНоменклатуруЗавершение", ЭтотОбъект,
		Новый Структура("СтруктураПараметрыНоменклатуры", СтруктураПараметрыНоменклатуры)), РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		Возврат;
	КонецЕсли;
	
	ПодобратьНоменклатуруФрагмент(Количество, СтруктураПараметрыНоменклатуры);
	
КонецПроцедуры

&НаКлиенте
Процедура ПодобратьНоменклатуруЗавершение(Результат, ДополнительныеПараметры) Экспорт
	
	Если Результат <> Неопределено Тогда
		ДополнительныеПараметры.СтруктураПараметрыНоменклатуры.Вставить("Цена", Результат.Цена);
		Количество = Результат.Количество;
	Иначе
		Возврат;
	КонецЕсли;
	
	ПодобратьНоменклатуруФрагмент(Количество, ДополнительныеПараметры.СтруктураПараметрыНоменклатуры);

КонецПроцедуры

&НаКлиенте
Процедура ПодобратьНоменклатуруФрагмент(Знач Количество, Знач СтруктураПараметрыНоменклатуры)
	
	Перем ПараметрыПоиска, РезультатПоиска, ТекущаяСтрока;
	
	Если СтруктураПараметрыНоменклатуры.Свойство("Цена") Тогда
		ПараметрыПоиска = Новый Структура("Номенклатура, Цена",
		СтруктураПараметрыНоменклатуры.Номенклатура, СтруктураПараметрыНоменклатуры.Цена);
	Иначе
		ПараметрыПоиска = Новый Структура("Номенклатура", СтруктураПараметрыНоменклатуры.Номенклатура);
	КонецЕсли;
	
	РезультатПоиска = Объект.ПодобраннаяНоменклатура.НайтиСтроки(ПараметрыПоиска);
	Если РезультатПоиска.Количество() = 0 Тогда
		ТекущаяСтрока = Объект.ПодобраннаяНоменклатура.Добавить();
		ЗаполнитьЗначенияСвойств(ТекущаяСтрока, СтруктураПараметрыНоменклатуры);
	Иначе
		ТекущаяСтрока = РезультатПоиска[0];
	КонецЕсли;
	
	ТекущаяСтрока.Количество = Количество + ТекущаяСтрока.Количество;
	
	Если СтруктураПараметрыНоменклатуры.Свойство("Цена") Тогда
		ТекущаяСтрока.Сумма = ТекущаяСтрока.Количество * ТекущаяСтрока.Цена;
	КонецЕсли;
	
	// Активизируем текущую строку табличной части
	Элементы.ПодобраннаяНоменклатура.ТекущаяСтрока = ТекущаяСтрока.ПолучитьИдентификатор();

КонецПроцедуры

&НаКлиенте
Функция ПолучитьСтруктуруПараметрыНоменклатуры(Элемент, ИмяПоляНоменклатуры)
	
	СтруктураПараметрыНоменклатуры = Неопределено;
	
	Если Элемент.ТекущиеДанные <> Неопределено Тогда
		СтруктураПараметрыНоменклатуры = Новый Структура;
		СтруктураПараметрыНоменклатуры.Вставить("Номенклатура", Элемент.ТекущиеДанные[ИмяПоляНоменклатуры]);
		Если Элемент.ТекущиеДанные.Свойство("Валюта") Тогда
			Если ЗначениеЗаполнено(Элемент.ТекущиеДанные.Валюта) Тогда
				СтруктураПараметрыНоменклатуры.Вставить("Валюта", Элемент.ТекущиеДанные.Валюта);
			Иначе
				СтруктураПараметрыНоменклатуры.Вставить("Валюта", ВалютаЦены);
			КонецЕсли;
		КонецЕсли;
		Если Элемент.ТекущиеДанные.Свойство("Цена") Тогда
			Если СтруктураПараметрыНоменклатуры.Свойство("Валюта")
				И ЗначениеЗаполнено(СтруктураПараметрыНоменклатуры.Валюта)
				И ЗначениеЗаполнено(Валюта)
				И СтруктураПараметрыНоменклатуры.Валюта <> Валюта Тогда
				Цена = ПолучитьЦенуПослеПересчета(Элемент.ТекущиеДанные.Цена,
				СтруктураПараметрыНоменклатуры.Валюта, Валюта, ДатаРасчетов);
				СтруктураПараметрыНоменклатуры.Вставить("Цена",   Цена);
				СтруктураПараметрыНоменклатуры.Вставить("Валюта", Валюта);
			Иначе
				СтруктураПараметрыНоменклатуры.Вставить("Цена", Элемент.ТекущиеДанные.Цена);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат СтруктураПараметрыНоменклатуры;
	
КонецФункции

#КонецОбласти

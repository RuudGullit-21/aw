
#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// начало блока стандартных операций
	ДопПараметрыОткрытие = Новый Структура("ИмяФормы", ИмяФормы);
	уатЗащищенныеФункцииСервер.уатОбработкаФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	// конец блока стандартных операций
	
	СуммаВключаетНДС = Истина;
	
	ОперативнаяФинСводкаПоЗаказамТипДиаграммы = "Гистограмма";
	ОбъемВыполненныхЗаказовТипДиаграммы       = "ГистограммаСНакоплением";
	
	ОперативнаяФинСводкаПоЗаказамПериод.ДатаНачала = НачалоМесяца(ТекущаяДата());
	ОперативнаяФинСводкаПоЗаказамПериод.ДатаОкончания = НачалоДня(ТекущаяДата());
	
	ОбъемВыполненныхЗаказовПериод.ДатаОкончания = НачалоДня(ТекущаяДата());
	ОбъемВыполненныхЗаказовПериод.ДатаНачала = '00010101' + (ОбъемВыполненныхЗаказовПериод.ДатаОкончания - '00010105');
	
	УстановитьНадписьОбъемВыполненныхЗаказовДетализация();
	УстановитьПериодОперФинСводкиПоЗаказам();
	УстановитьПериодОбъемаВыполненныхЗаказов();
	
	ОбновитьДанныеДиаграмм();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// начало блока стандартных операций
	уатЗащищенныеФункцииКлиент.уатОбработкаФормаПриОткрытии(Отказ, ДопПараметрыОткрытие);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	// конец блока стандартных операций

КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

#Область Общее

&НаКлиенте
Процедура ОрганизацияПриИзменении(Элемент)
	
	ОбновитьДанныеДиаграмм();
	
КонецПроцедуры

#КонецОбласти

#Область ОперативнаяФинансоваяСводкаПоЗаказам

&НаКлиенте
Процедура ГруппаПрочееОперФинСводкиПоЗаказамТипДиаграммыНажатие(Элемент)
	
	ДиалогВыбораТипаДиаграммы = Новый СписокЗначений();
	
	СформироватьСписокВыбораТипаДиаграммы(ДиалогВыбораТипаДиаграммы);
	
	ОповещениеОВыбореТипаДиаграммы = Новый ОписаниеОповещения("ГруппаПрочееОперФинСводкиПоЗаказамТипДиаграммыНажатиеПродолжение", ЭтотОбъект);
	
	ТекстНСТР = НСтр("en='Select chart type';ru='Выберите тип диаграммы'");
	ДиалогВыбораТипаДиаграммы.ПоказатьВыборЭлемента(ОповещениеОВыбореТипаДиаграммы, ТекстНСТР, ДиалогВыбораТипаДиаграммы.НайтиПоЗначению(ОперативнаяФинСводкаПоЗаказамТипДиаграммы));
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаПрочееОперФинСводкиПоЗаказамТипДиаграммыНажатиеПродолжение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ОперативнаяФинСводкаПоЗаказамТипДиаграммы = ВыбранныйЭлемент.Значение;
	
	ОбновитьДиаграммуОперФинСводкиПоЗаказам();
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаПрочееОперФинСводкиПоЗаказамПодробнееНажатие(Элемент)
	
	ОткрытьФорму("Отчет.уатРентабельностьЗаказовИТС_уэ.Форма",, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаПрочееОперФинСводкиПоЗаказамПериодНажатие(Элемент)
	
	ДиалогВыбораПериода = Новый ДиалогРедактированияСтандартногоПериода();
	ДиалогВыбораПериода.Период = ОперативнаяФинСводкаПоЗаказамПериод;
	
	ОписаниеОВыбореПериода = Новый ОписаниеОповещения("ГруппаПрочееОперФинСводкиПоЗаказамПериодНажатиеПродолжение", ЭтотОбъект);
	ДиалогВыбораПериода.Показать(ОписаниеОВыбореПериода);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаПрочееОперФинСводкиПоЗаказамПериодНажатиеПродолжение(Период, ДополнительныеПараметры) Экспорт
	
	Если Период = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ОперативнаяФинСводкаПоЗаказамПериод = Период;
	
	УстановитьПериодОперФинСводкиПоЗаказам();
	ОбновитьДиаграммуОперФинСводкиПоЗаказам();
	
КонецПроцедуры

#КонецОбласти

#Область ОбъемВыполненныхЗаказов

&НаКлиенте
Процедура ГруппаПрочееОбъемВыполненныхЗаказовПериодНажатие(Элемент)
	
	ОписаниеОВыбореДаты = Новый ОписаниеОповещения("ГруппаПрочееОбъемВыполненныхЗаказовПериодНажатиеПродолжение", ЭтотОбъект);
	ПоказатьВводДаты(ОписаниеОВыбореДаты, ОбъемВыполненныхЗаказовПериод.ДатаОкончания, НСтр("en='Generation date';ru='Дата формирования'"), ЧастиДаты.Дата);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаПрочееОбъемВыполненныхЗаказовПериодНажатиеПродолжение(Дата, ДополнительныеПараметры) Экспорт
	
	Если Дата = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ОбъемВыполненныхЗаказовПериод.ДатаНачала    = '00010101' + (Дата - '00010105');
	ОбъемВыполненныхЗаказовПериод.ДатаОкончания = Дата;
	
	УстановитьПериодОбъемаВыполненныхЗаказов();
	ОбновитьДиаграммуОбъемаВыполненныхЗаказов();
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаПрочееОбъемВыполненныхЗаказовТипДиаграммыНажатие(Элемент)
	
	ДиалогВыбораТипаДиаграммы = Новый СписокЗначений();
	
	СформироватьСписокВыбораТипаДиаграммы(ДиалогВыбораТипаДиаграммы);
	
	ОповещениеОВыбореТипаДиаграммы = Новый ОписаниеОповещения("ГруппаПрочееОбъемВыполненныхЗаказовТипДиаграммыНажатиеПродолжение", ЭтотОбъект);
	
	ТекстНСТР = НСтр("en='Select chart type';ru='Выберите тип диаграммы'");
	ДиалогВыбораТипаДиаграммы.ПоказатьВыборЭлемента(ОповещениеОВыбореТипаДиаграммы, ТекстНСТР, ДиалогВыбораТипаДиаграммы.НайтиПоЗначению(ОбъемВыполненныхЗаказовТипДиаграммы));
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаПрочееОбъемВыполненныхЗаказовТипДиаграммыНажатиеПродолжение(ВыбранныйЭлемент, ДополнительныеПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ОбъемВыполненныхЗаказовТипДиаграммы = ВыбранныйЭлемент.Значение;
	
	ОбновитьДиаграммуОбъемаВыполненныхЗаказов();
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаПрочееОбъемВыполненныхЗаказовПодробнееНажатие(Элемент)
	
	ОткрытьФорму("Отчет.уатСтатистикаВыполненияЗаказовНаТС_уэ.Форма",, ЭтотОбъект);
	
КонецПроцедуры

&НаКлиенте
Процедура ГруппаПрочееОбъемВыполненныхЗаказовДетализацияНажатие(Элемент)
	
	ОбъемВыполненныхЗаказовДеталиПоСтатусам = Не ОбъемВыполненныхЗаказовДеталиПоСтатусам;
	
	УстановитьНадписьОбъемВыполненныхЗаказовДетализация();
	
	ОбновитьДиаграммуОбъемаВыполненныхЗаказов();
	
КонецПроцедуры

#КонецОбласти

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура Обновить(Команда)
	
	ОбновитьДанныеДиаграмм();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройки(Команда)
	
	ПараметрыФормы = Новый Структура();
	ПараметрыФормы.Вставить("СуммаВключаетНДС", СуммаВключаетНДС);
	
	Оповещение = Новый ОписаниеОповещения("ПослеЗакрытияФормыНастроек", ЭтотОбъект);
	
	ОткрытьФорму("Обработка.уатМониторРуководителя_уэ.Форма.ФормаНастроек", ПараметрыФормы, ЭтотОбъект,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

#Область Общее

&НаКлиенте
Процедура СформироватьСписокВыбораТипаДиаграммы(СписокВыбораДиаграмм)
	
	Если СписокВыбораДиаграмм = Неопределено Тогда 
		СписокВыбораДиаграмм = Новый СписокЗначений();
	КонецЕсли;
	
	СписокВыбораДиаграмм.Добавить("Биржевая",                                       НСтр("en='Stock';ru='Биржевая'"));
	СписокВыбораДиаграмм.Добавить("БиржеваяСвеча",                                  НСтр("en='Stock candle';ru='Биржевая свеча'"));
	СписокВыбораДиаграмм.Добавить("ВогнутаяПоверхность",                            НСтр("en='Concave surface';ru='Вогнутая поверхность'"));
	СписокВыбораДиаграмм.Добавить("Водопад",                                        НСтр("en='Waterfall';ru='Водопад'"));
	СписокВыбораДиаграмм.Добавить("Воронка",                                        НСтр("en='Funnel';ru='Воронка'"));
	СписокВыбораДиаграмм.Добавить("ВоронкаНормированная",                           НСтр("en='Funnel normalized';ru='Воронка нормированная'"));
	СписокВыбораДиаграмм.Добавить("ВоронкаНормированнаяОбъемная",                   НСтр("en='Funnel normalize volume';ru='Воронка нормированная объемная'"));
	СписокВыбораДиаграмм.Добавить("ВоронкаОбъемная",                                НСтр("en='Funnel volume';ru='Воронка объемная'"));
	СписокВыбораДиаграмм.Добавить("ВыпуклаяПоверхность",                            НСтр("en='Convex surface';ru='Выпуклая поверхность'"));
	СписокВыбораДиаграмм.Добавить("Гистограмма",                                    НСтр("en='Column chart';ru='Гистограмма'"));
	СписокВыбораДиаграмм.Добавить("ГистограммаГоризонтальная",                      НСтр("en='Histogram horizontal';ru='Гистограмма горизонтальная'"));
	СписокВыбораДиаграмм.Добавить("ГистограммаГоризонтальнаяОбъемная",              НСтр("en='Horizontal histogram volume';ru='Гистограмма горизонтальная объемная'"));
	СписокВыбораДиаграмм.Добавить("ГистограммаНормированная",                       НСтр("en='Histogram normalized';ru='Гистограмма нормированная'"));
	СписокВыбораДиаграмм.Добавить("ГистограммаНормированнаяГоризонтальная",         НСтр("en='Histogram normalize horizontal';ru='Гистограмма нормированная горизонтальная'"));
	СписокВыбораДиаграмм.Добавить("ГистограммаНормированнаяГоризонтальнаяОбъемная", НСтр("en='Histogram normalize horizontal volume';ru='Гистограмма нормированная горизонтальная объемная'"));
	СписокВыбораДиаграмм.Добавить("ГистограммаНормированнаяОбъемная",               НСтр("en='Histogram normalize volume';ru='Гистограмма нормированная объемная'"));
	СписокВыбораДиаграмм.Добавить("ГистограммаОбъемная",                            НСтр("en='3D column chart';ru='Гистограмма объемная'"));
	СписокВыбораДиаграмм.Добавить("ГистограммаСНакоплением",                        НСтр("en='Stacked column chart';ru='Гистограмма с накоплением'"));
	СписокВыбораДиаграмм.Добавить("ГистограммаСНакоплениемГоризонтальная",          НСтр("en='Horizontal stacked column chart';ru='Гистограмма с накоплением горизонтальная'"));
	СписокВыбораДиаграмм.Добавить("ГистограммаСНакоплениемГоризонтальнаяОбъемная",  НСтр("en='Horizontal 3D stacked column chart';ru='Гистограмма с накоплением горизонтальная объемная'"));
	СписокВыбораДиаграмм.Добавить("ГистограммаСНакоплениемОбъемная",                НСтр("en='3D stacked column chart';ru='Гистограмма с накоплением объемная'"));
	СписокВыбораДиаграмм.Добавить("График",                                         НСтр("en='Schedule';ru='График'"));
	СписокВыбораДиаграмм.Добавить("ГрафикПоШагам",                                  НСтр("en='Step chart';ru='График по шагам'"));
	СписокВыбораДиаграмм.Добавить("ГрафикСНакоплением",                             НСтр("en='Stacked line';ru='График с накоплением'"));
	СписокВыбораДиаграмм.Добавить("ГрафикСОбластями",                               НСтр("en='Area schedule';ru='График с областями'"));
	СписокВыбораДиаграмм.Добавить("ГрафикСОбластямиИНакоплением",                   НСтр("en='Stacked area chart';ru='График с областями и накоплением'"));
	СписокВыбораДиаграмм.Добавить("ГрафикСОбластямиНормированный",                  НСтр("en='100% stacked area chart';ru='График с областями нормированный'"));
	СписокВыбораДиаграмм.Добавить("ЗатененнаяПоверхность",                          НСтр("en='Shaded surface';ru='Затененная поверхность'"));
	СписокВыбораДиаграмм.Добавить("Измерительная",                                  НСтр("en='Measuring';ru='Измерительная'"));
	СписокВыбораДиаграмм.Добавить("Изометрическая",                                 НСтр("en='Isometric';ru='Изометрическая'"));
	СписокВыбораДиаграмм.Добавить("ИзометрическаяЛента",                            НСтр("en='Isometric tape';ru='Изометрическая лента'"));
	СписокВыбораДиаграмм.Добавить("ИзометрическаяНепрерывная",                      НСтр("en='Isometric uninterrupted';ru='Изометрическая непрерывная'"));
	СписокВыбораДиаграмм.Добавить("ИзометрическаяПирамида",                         НСтр("en='Isometric pyramid';ru='Изометрическая пирамида'"));
	СписокВыбораДиаграмм.Добавить("КаркаснаяПоверхность",                           НСтр("en='Frame surface';ru='Каркасная поверхность'"));
	СписокВыбораДиаграмм.Добавить("Круговая",                                       НСтр("en='Circular';ru='Круговая'"));
	СписокВыбораДиаграмм.Добавить("КруговаяОбъемная",                               НСтр("en='Circular surround';ru='Круговая объемная'"));
	СписокВыбораДиаграмм.Добавить("Поверхность",                                    НСтр("en='Surface';ru='Поверхность'"));
	СписокВыбораДиаграмм.Добавить("РадарныйГрафик",                                 НСтр("en='Radar chart';ru='Радарный график'"));
	СписокВыбораДиаграмм.Добавить("РадарныйГрафикСНакоплением",                     НСтр("en='Stacked radar chart';ru='Радарный график с накоплением'"));
	СписокВыбораДиаграмм.Добавить("РадарныйГрафикСОбластями",                       НСтр("en='Radar area chart';ru='Радарный график с областями'"));
	СписокВыбораДиаграмм.Добавить("РадарныйГрафикСОбластямиИНакоплением",           НСтр("en='Stacked radar area chart';ru='Радарный график с областями и накоплением'"));
	СписокВыбораДиаграмм.Добавить("РадарныйГрафикСОбластямиНормированный",          НСтр("en='Normalized radar area chart';ru='Радарный график с областями нормированный'"));
	СписокВыбораДиаграмм.Добавить("Сотовая",                                        НСтр("en='Honeycomb';ru='Сотовая'"));
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеДиаграмм()
	
	ОбновитьДиаграммуОперФинСводкиПоЗаказам();
	ОбновитьДиаграммуОбъемаВыполненныхЗаказов();
	
КонецПроцедуры

&НаКлиенте
Процедура ПослеЗакрытияФормыНастроек(РезультатЗакрытия, ДополнительныеПараметры) Экспорт
	
	Если РезультатЗакрытия = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	РезультатЗакрытия.Свойство("СуммаВключаетНДС", СуммаВключаетНДС);
	
	ОбновитьДанныеДиаграмм();
	
КонецПроцедуры

#КонецОбласти

#Область ОперативнаяФинансоваяСводкаПоЗаказам

&НаСервере
Процедура УстановитьПериодОперФинСводкиПоЗаказам()
	
	Элементы.ГруппаПрочееОперФинСводкиПоЗаказамПериод.Заголовок = НСтр("en='From';ru='С'") + " "+Формат(ОперативнаяФинСводкаПоЗаказамПериод.ДатаНачала, "ДФ=dd.MM.yyyy; ДП=<нет>")+" " + НСтр("en='till';ru='по'") + " "+Формат(ОперативнаяФинСводкаПоЗаказамПериод.ДатаОкончания, "ДФ=dd.MM.yyyy; ДП=<нет>");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДиаграммуОперФинСводкиПоЗаказам()
	
	ОперативнаяФинСводкаПоЗаказам.Обновление = Ложь; 
	
	ОперативнаяФинСводкаПоЗаказам.Очистить();
	
	ОперативнаяФинСводкаПоЗаказам.ОтображатьЗаголовок = Ложь;
	ОперативнаяФинСводкаПоЗаказам.ОтображатьЛегенду   = Ложь;
	ОперативнаяФинСводкаПоЗаказам.ТипДиаграммы        = ТипДиаграммы[ОперативнаяФинСводкаПоЗаказамТипДиаграммы];
	ОперативнаяФинСводкаПоЗаказам.ВидПодписей         = ВидПодписейКДиаграмме.Значение;
	
	ОперативнаяФинСводкаПоЗаказам.КоличествоТочек = 3; 
	ОперативнаяФинСводкаПоЗаказам.Точки[0].Текст = НСтр("en='Incomes';ru='Доходы'");
	ОперативнаяФинСводкаПоЗаказам.Точки[1].Текст = НСтр("en='Expenses';ru='Расходы'");
	ОперативнаяФинСводкаПоЗаказам.Точки[2].Текст = НСтр("en='Profit';ru='Прибыль'"); 
	
	ОперативнаяФинСводкаПоЗаказам.КоличествоСерий = 3; 
	ОперативнаяФинСводкаПоЗаказам.Серии[0].Текст = НСтр("en='Company vehicles';ru='Собственные ТС'");
	ОперативнаяФинСводкаПоЗаказам.Серии[0].Цвет  = WebЦвета.СветлоСерый;
	ОперативнаяФинСводкаПоЗаказам.Серии[1].Текст = НСтр("en='External vehicles';ru='Привлеченные ТС'");
	ОперативнаяФинСводкаПоЗаказам.Серии[1].Цвет  = WebЦвета.Васильковый;
	ОперативнаяФинСводкаПоЗаказам.Серии[2].Текст = НСтр("en='Total';ru='Всего'");
	ОперативнаяФинСводкаПоЗаказам.Серии[2].Цвет  = WebЦвета.ТемноОранжевый;
	
	ОперативнаяФинСводкаПоЗаказамСобствТСВсего   = 0;
	ОперативнаяФинСводкаПоЗаказамСобствТСДоходы  = 0;
	ОперативнаяФинСводкаПоЗаказамСобствТСЗатраты = 0;
	ОперативнаяФинСводкаПоЗаказамСобствТСПрибыль = 0;
	
	ОперативнаяФинСводкаПоЗаказамПривлеченТСВсего   = 0;
	ОперативнаяФинСводкаПоЗаказамПривлеченТСДоходы  = 0;
	ОперативнаяФинСводкаПоЗаказамПривлеченТСЗатраты = 0;
	ОперативнаяФинСводкаПоЗаказамПривлеченТСПрибыль = 0;
	
	ОперативнаяФинСводкаПоЗаказамВсегоЗаказов = 0;
	ОперативнаяФинСводкаПоЗаказамВсегоДоходы  = 0;
	ОперативнаяФинСводкаПоЗаказамВсегоЗатраты = 0;
	ОперативнаяФинСводкаПоЗаказамВсегоПрибыль = 0;
	
	ТабДанных = ПолучитьДанныеОперФинСводкиПоЗаказам(Организация, ОперативнаяФинСводкаПоЗаказамПериод.ДатаНачала, ОперативнаяФинСводкаПоЗаказамПериод.ДатаОкончания);
	
	Для Каждого ТекСтрока Из ТабДанных.Строки Цикл 
		Если ТекСтрока.АналитикаТС = НСтр("en='External vehicles';ru='Привлеченные ТС'") Тогда 
			ОперативнаяФинСводкаПоЗаказамПривлеченТСВсего   = Окр(ТекСтрока.ВсегоЗаказов, 0, РежимОкругления.Окр15как20);
			ОперативнаяФинСводкаПоЗаказамПривлеченТСДоходы  = Окр(?(СуммаВключаетНДС, ТекСтрока.СуммаДоходов, ТекСтрока.СуммаДоходовБезНДС), 0, РежимОкругления.Окр15как20);
			ОперативнаяФинСводкаПоЗаказамПривлеченТСЗатраты = Окр(?(СуммаВключаетНДС, ТекСтрока.СуммаЗатрат, ТекСтрока.СуммаЗатратБезНДС), 0, РежимОкругления.Окр15как20);
			ОперативнаяФинСводкаПоЗаказамПривлеченТСПрибыль = Окр(?(СуммаВключаетНДС, ТекСтрока.Прибыль, ТекСтрока.ПрибыльБезНДС), 0, РежимОкругления.Окр15как20);
		ИначеЕсли ТекСтрока.АналитикаТС = НСтр("en='Company vehicles';ru='Собственные ТС'") Тогда 
			ОперативнаяФинСводкаПоЗаказамСобствТСВсего   = Окр(ТекСтрока.ВсегоЗаказов, 0, РежимОкругления.Окр15как20);
			ОперативнаяФинСводкаПоЗаказамСобствТСДоходы  = Окр(?(СуммаВключаетНДС, ТекСтрока.СуммаДоходов, ТекСтрока.СуммаДоходовБезНДС), 0, РежимОкругления.Окр15как20);
			ОперативнаяФинСводкаПоЗаказамСобствТСЗатраты = Окр(?(СуммаВключаетНДС, ТекСтрока.СуммаЗатрат, ТекСтрока.СуммаЗатратБезНДС), 0, РежимОкругления.Окр15как20);
			ОперативнаяФинСводкаПоЗаказамСобствТСПрибыль = Окр(?(СуммаВключаетНДС, ТекСтрока.Прибыль, ТекСтрока.ПрибыльБезНДС), 0, РежимОкругления.Окр15как20);
		КонецЕсли;
		ОперативнаяФинСводкаПоЗаказамВсегоЗаказов = ОперативнаяФинСводкаПоЗаказамВсегоЗаказов + Окр(ТекСтрока.ВсегоЗаказов, 0, РежимОкругления.Окр15как20);
		ОперативнаяФинСводкаПоЗаказамВсегоДоходы  = ОперативнаяФинСводкаПоЗаказамВсегоДоходы  + Окр(?(СуммаВключаетНДС, ТекСтрока.СуммаДоходов, ТекСтрока.СуммаДоходовБезНДС), 0, РежимОкругления.Окр15как20);
		ОперативнаяФинСводкаПоЗаказамВсегоЗатраты = ОперативнаяФинСводкаПоЗаказамВсегоЗатраты + Окр(?(СуммаВключаетНДС, ТекСтрока.СуммаЗатрат, ТекСтрока.СуммаЗатратБезНДС), 0, РежимОкругления.Окр15как20);
		ОперативнаяФинСводкаПоЗаказамВсегоПрибыль = ОперативнаяФинСводкаПоЗаказамВсегоПрибыль + Окр(?(СуммаВключаетНДС, ТекСтрока.Прибыль, ТекСтрока.ПрибыльБезНДС), 0, РежимОкругления.Окр15как20);
	КонецЦикла;
	
	ОперативнаяФинСводкаПоЗаказам.УстановитьЗначение(0, 0, ОперативнаяФинСводкаПоЗаказамСобствТСДоходы); 
	ОперативнаяФинСводкаПоЗаказам.УстановитьЗначение(1, 0, ОперативнаяФинСводкаПоЗаказамСобствТСЗатраты); 
	ОперативнаяФинСводкаПоЗаказам.УстановитьЗначение(2, 0, ОперативнаяФинСводкаПоЗаказамСобствТСПрибыль);
	
	ОперативнаяФинСводкаПоЗаказам.УстановитьЗначение(0, 1, ОперативнаяФинСводкаПоЗаказамПривлеченТСДоходы); 
	ОперативнаяФинСводкаПоЗаказам.УстановитьЗначение(1, 1, ОперативнаяФинСводкаПоЗаказамПривлеченТСЗатраты); 
	ОперативнаяФинСводкаПоЗаказам.УстановитьЗначение(2, 1, ОперативнаяФинСводкаПоЗаказамПривлеченТСПрибыль); 
	
	ОперативнаяФинСводкаПоЗаказам.УстановитьЗначение(0, 2, ОперативнаяФинСводкаПоЗаказамВсегоДоходы); 
	ОперативнаяФинСводкаПоЗаказам.УстановитьЗначение(1, 2, ОперативнаяФинСводкаПоЗаказамВсегоЗатраты); 
	ОперативнаяФинСводкаПоЗаказам.УстановитьЗначение(2, 2, ОперативнаяФинСводкаПоЗаказамВсегоПрибыль); 
	
	ОперативнаяФинСводкаПоЗаказам.Обновление = Истина;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеОперФинСводкиПоЗаказам(Знач Организация, Знач ДатаНачала, Знач ДатаОкончания)
	
	Возврат уатОбщегоНазначения_уэ.ПолучитьДанныеОРентабельностиЗаказовИТС(
		ДатаНачала,
		ДатаОкончания,
		Истина,
		Организация);
	
КонецФункции // ПолучитьДанныеОперФинСводкиПоЗаказам()

#КонецОбласти

#Область ОбъемВыполненныхЗаказов

&НаСервере
Процедура УстановитьНадписьОбъемВыполненныхЗаказовДетализация()
	
	Если ОбъемВыполненныхЗаказовДеталиПоСтатусам Тогда 
		Элементы.ГруппаПрочееОбъемВыполненныхЗаказовДетализация.Заголовок = НСтр("en='By conditions';ru='По состояниям'");
	Иначе 
		Элементы.ГруппаПрочееОбъемВыполненныхЗаказовДетализация.Заголовок = НСтр("en='By statuses';ru='По статусам'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьПериодОбъемаВыполненныхЗаказов()
	
	Элементы.ГруппаПрочееОбъемВыполненныхЗаказовПериод.Заголовок =  НСтр("en='From';ru='С'")+ " "+Формат(ОбъемВыполненныхЗаказовПериод.ДатаНачала, "ДФ=dd.MM.yyyy; ДП=<нет>")+" " + НСтр("en='till';ru='по'") + " "+Формат(ОбъемВыполненныхЗаказовПериод.ДатаОкончания, "ДФ=dd.MM.yyyy; ДП=<нет>");
	
	Элементы.ГруппаРасшифровкаОбъемВыполненныхЗаказовШапкаДата1.Заголовок = Формат(ОбъемВыполненныхЗаказовПериод.ДатаНачала, "ДФ=dd.MM; ДП=01.01");
	Элементы.ГруппаРасшифровкаОбъемВыполненныхЗаказовШапкаДата2.Заголовок = Формат(ОбъемВыполненныхЗаказовПериод.ДатаНачала + 1*86400, "ДФ=dd.MM; ДП=01.01");
	Элементы.ГруппаРасшифровкаОбъемВыполненныхЗаказовШапкаДата3.Заголовок = Формат(ОбъемВыполненныхЗаказовПериод.ДатаНачала + 2*86400, "ДФ=dd.MM; ДП=01.01");
	Элементы.ГруппаРасшифровкаОбъемВыполненныхЗаказовШапкаДата4.Заголовок = Формат(ОбъемВыполненныхЗаказовПериод.ДатаНачала + 3*86400, "ДФ=dd.MM; ДП=01.01");
	Элементы.ГруппаРасшифровкаОбъемВыполненныхЗаказовШапкаДата5.Заголовок = Формат(ОбъемВыполненныхЗаказовПериод.ДатаНачала + 4*86400, "ДФ=dd.MM; ДП=01.01");
	
КонецПроцедуры

&НаСервере
Процедура ОбновитьДиаграммуОбъемаВыполненныхЗаказов()
	
	ОбъемВыполненныхЗаказов.Обновление = Ложь; 
	
	ОбъемВыполненныхЗаказов.Очистить();
	
	ОбъемВыполненныхЗаказов.ОтображатьЗаголовок = Ложь;
	ОбъемВыполненныхЗаказов.ОтображатьЛегенду   = Ложь;
	ОбъемВыполненныхЗаказов.ТипДиаграммы        = ТипДиаграммы[ОбъемВыполненныхЗаказовТипДиаграммы];
	ОбъемВыполненныхЗаказов.ВидПодписей         = ВидПодписейКДиаграмме.Значение;
	
	мсвЭлементыКУдалению = Новый Массив();
	Для Каждого ТекРеквизит Из Элементы.ГруппаРасшифровкаОбъемВыполненныхЗаказовПоСтатусам.ПодчиненныеЭлементы Цикл 
		мсвЭлементыКУдалению.Добавить(ТекРеквизит);
	КонецЦикла;
	Для Каждого ТекЭлемент Из мсвЭлементыКУдалению Цикл 
		Элементы.Удалить(ТекЭлемент);
	КонецЦикла;
	
	ОбъемВыполненныхЗаказов.КоличествоТочек = 5; 
	ОбъемВыполненныхЗаказов.Точки[0].Текст = Формат(ОбъемВыполненныхЗаказовПериод.ДатаНачала, "ДФ=dd.MM; ДП=01.01");
	ОбъемВыполненныхЗаказов.Точки[1].Текст = Формат(ОбъемВыполненныхЗаказовПериод.ДатаНачала + 1*86400, "ДФ=dd.MM; ДП=01.01");
	ОбъемВыполненныхЗаказов.Точки[2].Текст = Формат(ОбъемВыполненныхЗаказовПериод.ДатаНачала + 2*86400, "ДФ=dd.MM; ДП=01.01");
	ОбъемВыполненныхЗаказов.Точки[3].Текст = Формат(ОбъемВыполненныхЗаказовПериод.ДатаНачала + 3*86400, "ДФ=dd.MM; ДП=01.01");
	ОбъемВыполненныхЗаказов.Точки[4].Текст = Формат(ОбъемВыполненныхЗаказовПериод.ДатаНачала + 4*86400, "ДФ=dd.MM; ДП=01.01");
	
	Если ОбъемВыполненныхЗаказовДеталиПоСтатусам Тогда 
		УстановитьДанныеДиаграммыОбъемаВыполненныхЗаказовПоСтатусам();
	Иначе 
		УстановитьДанныеДиаграммыОбъемаВыполненныхЗаказовПоСостояниям();
	КонецЕсли;
	
	ОбъемВыполненныхЗаказов.Обновление = Истина;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДанныеДиаграммыОбъемаВыполненныхЗаказовПоСтатусам()
	
	ТабДанных = ПолучитьДанныеПоОбъемуВыполненныхЗаказов(Организация, ОбъемВыполненныхЗаказовПериод.ДатаНачала, ОбъемВыполненныхЗаказовПериод.ДатаОкончания);
	ТабСтатусов = ТабДанных.Скопировать(, "Статус");
	ТабСтатусов.Свернуть("Статус");
	МассивСтатусов = ТабСтатусов.ВыгрузитьКолонку("Статус");
	
	ДанныеПостатусам = ПолучитьДанныеПоСтатусам(МассивСтатусов);
	
	ИтоговыеПоказатели = Новый Структура();
	ИтоговыеПоказатели.Вставить("Дата0", 0);
	ИтоговыеПоказатели.Вставить("Дата1", 0);
	ИтоговыеПоказатели.Вставить("Дата2", 0);
	ИтоговыеПоказатели.Вставить("Дата3", 0);
	ИтоговыеПоказатели.Вставить("Дата4", 0);
	
	ОбъемВыполненныхЗаказов.КоличествоСерий = МассивСтатусов.Количество();
	
	Для Сч = 0 По МассивСтатусов.Количество()-1 Цикл 
		ТекСтатус = МассивСтатусов[Сч];
		
		ЦветСтатуса = Новый Цвет();
		ХранилищеЦвета = ТекСтатус.ЦветФонаПоУмолчанию;
		Если ЗначениеЗаполнено(ХранилищеЦвета) Тогда 
			ДанныеЦвета = ХранилищеЦвета.Получить();
			Если Не ДанныеЦвета = Неопределено И ТипЗнч(ДанныеЦвета) = Тип("Цвет") Тогда 
				ЦветСтатуса = ДанныеЦвета;
			КонецЕсли;
		КонецЕсли;
		
		ОбъемВыполненныхЗаказов.Серии[Сч].Текст = ТекСтатус.Наименование;
		ОбъемВыполненныхЗаказов.Серии[Сч].Цвет  = ЦветСтатуса;
		
		ГруппаСтатуса = Элементы.Добавить(
			"ГруппаРасшифровкаОбъемВыполненныхЗаказовПоСтатусам" + Формат(Сч, "ЧН=0; ЧГ=0"),
			Тип("ГруппаФормы"), 
			Элементы.ГруппаРасшифровкаОбъемВыполненныхЗаказовПоСтатусам);
		ГруппаСтатуса.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаСтатуса.Отображение = ОтображениеОбычнойГруппы.Нет;
		ГруппаСтатуса.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		ГруппаСтатуса.ОтображатьЗаголовок = Ложь;
		ГруппаСтатуса.РастягиватьПоГоризонтали = Истина;
		
		ДекЦвет = Элементы.Добавить(
			"ГруппаРасшифровкаОбъемВыполненныхЗаказовПоСтатусам" + Формат(Сч, "ЧН=0; ЧГ=0") + "Цвет",
			Тип("ДекорацияФормы"),
			ГруппаСтатуса);
		ДекЦвет.Вид = ВидДекорацииФормы.Надпись;
		ДекЦвет.ЦветФона = ЦветСтатуса;
		ДекЦвет.Ширина = 2;
		ДекЦвет.РастягиватьПоГоризонтали = Ложь;
		ДекЦвет.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Лево;
		
		ДекНадпись = Элементы.Добавить(
			"ГруппаРасшифровкаОбъемВыполненныхЗаказовПоСтатусам" + Формат(Сч, "ЧН=0; ЧГ=0") + "Надпись",
			Тип("ДекорацияФормы"),
			ГруппаСтатуса);
		ДекНадпись.Вид = ВидДекорацииФормы.Надпись;
		ДекНадпись.Заголовок = ТекСтатус.Наименование;
		ДекНадпись.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.Подчеркивание, 1);
		ДекНадпись.РастягиватьПоГоризонтали = Ложь;
		ДекНадпись.Ширина = 14;
		ДекНадпись.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Лево;
		
		Для СчПериода = 0 По 4 Цикл 
			ТекДата = ОбъемВыполненныхЗаказовПериод.ДатаНачала + СчПериода*86400;
			
			НайдСтроки = ТабДанных.НайтиСтроки(Новый Структура("Дата, Статус", ТекДата, ТекСтатус));
			Если НайдСтроки.Количество() Тогда 
				Количество = НайдСтроки[0].Количество;
			Иначе 
				Количество = 0;
			КонецЕсли;
			
			Всего = ИтоговыеПоказатели["Дата"+Формат(СчПериода, "ЧН=0; ЧГ=0")];
			Всего = Всего + Количество;
			ИтоговыеПоказатели.Вставить("Дата"+Формат(СчПериода, "ЧН=0; ЧГ=0"), Всего);
			
			ОбъемВыполненныхЗаказов.УстановитьЗначение(СчПериода, Сч, Количество); 
			
			ДекЗначение = Элементы.Добавить(
				"ГруппаРасшифровкаОбъемВыполненныхЗаказовПоСтатусам" + Формат(Сч, "ЧН=0; ЧГ=0") + "Дата" + Формат(СчПериода, "ЧН=0; ЧГ=0"),
				Тип("ДекорацияФормы"),
				ГруппаСтатуса);
			ДекЗначение.Вид = ВидДекорацииФормы.Надпись;
			ДекЗначение.Заголовок = Формат(Количество, "ЧН=0; ЧГ=0");
			ДекЗначение.Ширина = 6;
			ДекЗначение.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.Подчеркивание, 1);
			ДекЗначение.РастягиватьПоГоризонтали = Ложь;
			ДекЗначение.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Центр;
		КонецЦикла;
	КонецЦикла;
	
	Если ИтоговыеПоказатели.Свойство("Дата0") Тогда 
		Элементы.ГруппаРасшифровкаОбъемВыполненныхЗаказовВсегоЗаказовДата1.Заголовок = Формат(ИтоговыеПоказатели.Дата0, "ЧН=0; ЧГ=0");
	Иначе 
		Элементы.ГруппаРасшифровкаОбъемВыполненныхЗаказовВсегоЗаказовДата1.Заголовок = Формат(0, "ЧН=0; ЧГ=0");
	КонецЕсли;
	Если ИтоговыеПоказатели.Свойство("Дата1") Тогда 
		Элементы.ГруппаРасшифровкаОбъемВыполненныхЗаказовВсегоЗаказовДата2.Заголовок = Формат(ИтоговыеПоказатели.Дата1, "ЧН=0; ЧГ=0");
	Иначе 
		Элементы.ГруппаРасшифровкаОбъемВыполненныхЗаказовВсегоЗаказовДата2.Заголовок = Формат(0, "ЧН=0; ЧГ=0");
	КонецЕсли;
	Если ИтоговыеПоказатели.Свойство("Дата2") Тогда 
		Элементы.ГруппаРасшифровкаОбъемВыполненныхЗаказовВсегоЗаказовДата3.Заголовок = Формат(ИтоговыеПоказатели.Дата2, "ЧН=0; ЧГ=0");
	Иначе 
		Элементы.ГруппаРасшифровкаОбъемВыполненныхЗаказовВсегоЗаказовДата3.Заголовок = Формат(0, "ЧН=0; ЧГ=0");
	КонецЕсли;
	Если ИтоговыеПоказатели.Свойство("Дата3") Тогда 
		Элементы.ГруппаРасшифровкаОбъемВыполненныхЗаказовВсегоЗаказовДата4.Заголовок = Формат(ИтоговыеПоказатели.Дата3, "ЧН=0; ЧГ=0");
	Иначе 
		Элементы.ГруппаРасшифровкаОбъемВыполненныхЗаказовВсегоЗаказовДата4.Заголовок = Формат(0, "ЧН=0; ЧГ=0");
	КонецЕсли;
	Если ИтоговыеПоказатели.Свойство("Дата4") Тогда 
		Элементы.ГруппаРасшифровкаОбъемВыполненныхЗаказовВсегоЗаказовДата5.Заголовок = Формат(ИтоговыеПоказатели.Дата4, "ЧН=0; ЧГ=0");
	Иначе 
		Элементы.ГруппаРасшифровкаОбъемВыполненныхЗаказовВсегоЗаказовДата5.Заголовок = Формат(0, "ЧН=0; ЧГ=0");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура УстановитьДанныеДиаграммыОбъемаВыполненныхЗаказовПоСостояниям()
	
	ТабДанных = ПолучитьДанныеПоСтатусамВыполненныхЗаказов(Организация, ОбъемВыполненныхЗаказовПериод.ДатаНачала, ОбъемВыполненныхЗаказовПериод.ДатаОкончания);
	
	ИтоговыеПоказатели = Новый Структура();
	ИтоговыеПоказатели.Вставить("Дата0", 0);
	ИтоговыеПоказатели.Вставить("Дата1", 0);
	ИтоговыеПоказатели.Вставить("Дата2", 0);
	ИтоговыеПоказатели.Вставить("Дата3", 0);
	ИтоговыеПоказатели.Вставить("Дата4", 0);
	
	ОбъемВыполненныхЗаказов.КоличествоСерий = 3;
	
	Для Сч = 0 По 2 Цикл 
		Если Сч = 0 Тогда 
			ТекСостояние = "Открыт";
			ОбъемВыполненныхЗаказов.Серии[Сч].Текст = НСтр("en='Open';ru='Открыт'");
			ОбъемВыполненныхЗаказов.Серии[Сч].Цвет  = WebЦвета.Желтый;
			
		ИначеЕсли Сч = 1 Тогда 
			ТекСостояние = "Частично выполнен";
			ОбъемВыполненныхЗаказов.Серии[Сч].Текст = НСтр("en='Partially completed';ru='Частично выполнен'");
			ОбъемВыполненныхЗаказов.Серии[Сч].Цвет  = WebЦвета.Серый;
			
		Иначе 
			ТекСостояние = "Выполнен";
			ОбъемВыполненныхЗаказов.Серии[Сч].Текст = НСтр("en='Completed';ru='Выполнен'");
			ОбъемВыполненныхЗаказов.Серии[Сч].Цвет  = WebЦвета.Кирпичный;
		КонецЕсли;
		
		ГруппаСтатуса = Элементы.Добавить(
			"ГруппаРасшифровкаОбъемВыполненныхЗаказовПоСтатусам" + Формат(Сч, "ЧН=0; ЧГ=0"),
			Тип("ГруппаФормы"), 
			Элементы.ГруппаРасшифровкаОбъемВыполненныхЗаказовПоСтатусам);
		ГруппаСтатуса.Вид = ВидГруппыФормы.ОбычнаяГруппа;
		ГруппаСтатуса.Отображение = ОтображениеОбычнойГруппы.Нет;
		ГруппаСтатуса.Группировка = ГруппировкаПодчиненныхЭлементовФормы.Горизонтальная;
		ГруппаСтатуса.ОтображатьЗаголовок = Ложь;
		ГруппаСтатуса.РастягиватьПоГоризонтали = Истина;
		
		ДекЦвет = Элементы.Добавить(
			"ГруппаРасшифровкаОбъемВыполненныхЗаказовПоСтатусам" + Формат(Сч, "ЧН=0; ЧГ=0") + "Цвет",
			Тип("ДекорацияФормы"),
			ГруппаСтатуса);
		ДекЦвет.Вид = ВидДекорацииФормы.Надпись;
		ДекЦвет.ЦветФона = ОбъемВыполненныхЗаказов.Серии[Сч].Цвет;
		ДекЦвет.Ширина = 2;
		ДекЦвет.РастягиватьПоГоризонтали = Ложь;
		ДекЦвет.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Лево;
		
		ДекНадпись = Элементы.Добавить(
			"ГруппаРасшифровкаОбъемВыполненныхЗаказовПоСтатусам" + Формат(Сч, "ЧН=0; ЧГ=0") + "Надпись",
			Тип("ДекорацияФормы"),
			ГруппаСтатуса);
		ДекНадпись.Вид = ВидДекорацииФормы.Надпись;
		ДекНадпись.Заголовок = ОбъемВыполненныхЗаказов.Серии[Сч].Текст;
		ДекНадпись.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.Подчеркивание, 1);
		ДекНадпись.РастягиватьПоГоризонтали = Ложь;
		ДекНадпись.Ширина = 14;
		ДекНадпись.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Лево;
		
		Для СчПериода = 0 По 4 Цикл 
			ТекДата = ОбъемВыполненныхЗаказовПериод.ДатаНачала + СчПериода*86400;
			
			НайдСтроки = ТабДанных.НайтиСтроки(Новый Структура("Дата, Состояние", ТекДата, ТекСостояние));
			Если НайдСтроки.Количество() Тогда 
				Количество = НайдСтроки[0].Количество;
			Иначе 
				Количество = 0;
			КонецЕсли;
			
			Всего = ИтоговыеПоказатели["Дата"+Формат(СчПериода, "ЧН=0; ЧГ=0")];
			Всего = Всего + Количество;
			ИтоговыеПоказатели.Вставить("Дата"+Формат(СчПериода, "ЧН=0; ЧГ=0"), Всего);
			
			ОбъемВыполненныхЗаказов.УстановитьЗначение(СчПериода, Сч, Количество); 
			
			ДекЗначение = Элементы.Добавить(
				"ГруппаРасшифровкаОбъемВыполненныхЗаказовПоСтатусам" + Формат(Сч, "ЧН=0; ЧГ=0") + "Дата" + Формат(СчПериода, "ЧН=0; ЧГ=0"),
				Тип("ДекорацияФормы"),
				ГруппаСтатуса);
			ДекЗначение.Вид = ВидДекорацииФормы.Надпись;
			ДекЗначение.Заголовок = Формат(Количество, "ЧН=0; ЧГ=0");
			ДекЗначение.Ширина = 6;
			ДекЗначение.Рамка = Новый Рамка(ТипРамкиЭлементаУправления.Подчеркивание, 1);
			ДекЗначение.РастягиватьПоГоризонтали = Ложь;
			ДекЗначение.ГоризонтальноеПоложение = ГоризонтальноеПоложениеЭлемента.Центр;
		КонецЦикла;
	КонецЦикла;
	
	Если ИтоговыеПоказатели.Свойство("Дата0") Тогда 
		Элементы.ГруппаРасшифровкаОбъемВыполненныхЗаказовВсегоЗаказовДата1.Заголовок = Формат(ИтоговыеПоказатели.Дата0, "ЧН=0; ЧГ=0");
	Иначе 
		Элементы.ГруппаРасшифровкаОбъемВыполненныхЗаказовВсегоЗаказовДата1.Заголовок = Формат(0, "ЧН=0; ЧГ=0");
	КонецЕсли;
	Если ИтоговыеПоказатели.Свойство("Дата1") Тогда 
		Элементы.ГруппаРасшифровкаОбъемВыполненныхЗаказовВсегоЗаказовДата2.Заголовок = Формат(ИтоговыеПоказатели.Дата1, "ЧН=0; ЧГ=0");
	Иначе 
		Элементы.ГруппаРасшифровкаОбъемВыполненныхЗаказовВсегоЗаказовДата2.Заголовок = Формат(0, "ЧН=0; ЧГ=0");
	КонецЕсли;
	Если ИтоговыеПоказатели.Свойство("Дата2") Тогда 
		Элементы.ГруппаРасшифровкаОбъемВыполненныхЗаказовВсегоЗаказовДата3.Заголовок = Формат(ИтоговыеПоказатели.Дата2, "ЧН=0; ЧГ=0");
	Иначе 
		Элементы.ГруппаРасшифровкаОбъемВыполненныхЗаказовВсегоЗаказовДата3.Заголовок = Формат(0, "ЧН=0; ЧГ=0");
	КонецЕсли;
	Если ИтоговыеПоказатели.Свойство("Дата3") Тогда 
		Элементы.ГруппаРасшифровкаОбъемВыполненныхЗаказовВсегоЗаказовДата4.Заголовок = Формат(ИтоговыеПоказатели.Дата3, "ЧН=0; ЧГ=0");
	Иначе 
		Элементы.ГруппаРасшифровкаОбъемВыполненныхЗаказовВсегоЗаказовДата4.Заголовок = Формат(0, "ЧН=0; ЧГ=0");
	КонецЕсли;
	Если ИтоговыеПоказатели.Свойство("Дата4") Тогда 
		Элементы.ГруппаРасшифровкаОбъемВыполненныхЗаказовВсегоЗаказовДата5.Заголовок = Формат(ИтоговыеПоказатели.Дата4, "ЧН=0; ЧГ=0");
	Иначе 
		Элементы.ГруппаРасшифровкаОбъемВыполненныхЗаказовВсегоЗаказовДата5.Заголовок = Формат(0, "ЧН=0; ЧГ=0");
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьДанныеПоСтатусамВыполненныхЗаказов(Знач Организация, Знач ДатаНачала, Знач ДатаОкончания)
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("ОтборПоОрганизации", ЗначениеЗаполнено(Организация));
	Запрос.УстановитьПараметр("Организация",        Организация);
	Запрос.УстановитьПараметр("ДатаНачала",         ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",      ДатаОкончания);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатЗаказГрузоотправителя.Ссылка КАК Ссылка,
	|	НАЧАЛОПЕРИОДА(уатЗаказГрузоотправителя.ОтправлениеС, ДЕНЬ) КАК Дата,
	|	1 КАК Количество,
	|	уатЗаказГрузоотправителя.Проведен КАК Проведен,
	|	уатЗаказГрузоотправителя.Мультимодальный КАК Мультимодальный,
	|	уатЗаказГрузоотправителя.ЭтоЭтап КАК ЭтоЭтап,
	|	уатЗаказГрузоотправителя.РодительскийЗаказ КАК РодительскийЗаказ
	|ПОМЕСТИТЬ ВРТ_Документы
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	|ГДЕ
	|	уатЗаказГрузоотправителя.ОтправлениеС <= &ДатаОкончания
	|	И уатЗаказГрузоотправителя.ОтправлениеПо >= &ДатаНачала
	|	И ВЫБОР
	|			КОГДА &ОтборПоОрганизации
	|				ТОГДА уатЗаказГрузоотправителя.Организация = &Организация
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И уатЗаказГрузоотправителя.Проведен
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТабСтатусов.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя,
	|	МАКСИМУМ(ТабСтатусов.ЕстьОстаток) КАК ЕстьОстаток,
	|	МАКСИМУМ(ТабСтатусов.ЕстьРасход) КАК ЕстьРасход
	|ПОМЕСТИТЬ ВТ_Состояния
	|ИЗ
	|	(ВЫБРАТЬ
	|		уатЗаказыГрузоотправителейОстатки.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя,
	|		уатЗаказыГрузоотправителейОстатки.КоличествоОстаток КАК ЕстьОстаток,
	|		NULL КАК ЕстьРасход
	|	ИЗ
	|		РегистрНакопления.уатЗаказыГрузоотправителей.Остатки КАК уатЗаказыГрузоотправителейОстатки
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		ВложенныйЗапрос.ЗаказГрузоотправителя,
	|		NULL,
	|		ВложенныйЗапрос.Количество
	|	ИЗ
	|		(ВЫБРАТЬ
	|			уатЗаказыГрузоотправителей.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя,
	|			СУММА(уатЗаказыГрузоотправителей.Количество) КАК Количество
	|		ИЗ
	|			РегистрНакопления.уатЗаказыГрузоотправителей КАК уатЗаказыГрузоотправителей
	|		ГДЕ
	|			уатЗаказыГрузоотправителей.ВидДвижения = ЗНАЧЕНИЕ(ВидДвиженияНакопления.Расход)
	|		
	|		СГРУППИРОВАТЬ ПО
	|			уатЗаказыГрузоотправителей.ЗаказГрузоотправителя) КАК ВложенныйЗапрос) КАК ТабСтатусов
	|
	|СГРУППИРОВАТЬ ПО
	|	ТабСтатусов.ЗаказГрузоотправителя
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатЭтапыМультимодальныхПеревозок_уэ.ЗаказГрузоотправителя КАК ЗаказГрузоотправителя,
	|	ВЫБОР
	|		КОГДА уатЭтапыМультимодальныхПеревозок_уэ.Этап.Проведен
	|				И ЕСТЬNULL(Состояния.ЕстьРасход, 0) > 0
	|				И ЕСТЬNULL(Состояния.ЕстьОстаток, 0) > 0
	|			ТОГДА ""Частично выполнен""
	|		КОГДА уатЭтапыМультимодальныхПеревозок_уэ.Этап.Проведен
	|					И Состояния.ЕстьОстаток ЕСТЬ NULL
	|				ИЛИ Состояния.ЕстьОстаток = 0
	|			ТОГДА ""Выполнен""
	|		КОГДА уатЭтапыМультимодальныхПеревозок_уэ.Этап.Проведен
	|			ТОГДА ""Открыт""
	|		ИНАЧЕ ""Новый""
	|	КОНЕЦ КАК Состояние
	|ПОМЕСТИТЬ ВТ_СтатусыРодительских
	|ИЗ
	|	РегистрСведений.уатЭтапыМультимодальныхПеревозок_уэ КАК уатЭтапыМультимодальныхПеревозок_уэ
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Состояния КАК Состояния
	|		ПО уатЭтапыМультимодальныхПеревозок_уэ.Этап = Состояния.ЗаказГрузоотправителя
	|ГДЕ
	|	уатЭтапыМультимодальныхПеревозок_уэ.ЗаказГрузоотправителя В
	|			(ВЫБРАТЬ
	|				ВРТ.Ссылка
	|			ИЗ
	|				ВРТ_Документы КАК ВРТ)
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	СУММА(ДокументуатЗаказГрузоотправителя.Количество) КАК Количество,
	|	ДокументуатЗаказГрузоотправителя.Дата КАК Дата,
	|	ВЫБОР
	|		КОГДА ДокументуатЗаказГрузоотправителя.Мультимодальный
	|				И НЕ ДокументуатЗаказГрузоотправителя.ЭтоЭтап
	|			ТОГДА ВЫБОР
	|					КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЕСТЬNULL(СостоянияЭтапов.Состояние, ""Новый"")) > 1
	|						ТОГДА ""Частично выполнен""
	|					ИНАЧЕ МАКСИМУМ(ЕСТЬNULL(СостоянияЭтапов.Состояние, ""Новый""))
	|				КОНЕЦ
	|		ИНАЧЕ ВЫБОР
	|				КОГДА ДокументуатЗаказГрузоотправителя.Проведен
	|						И ЕСТЬNULL(Состояния.ЕстьРасход, 0) > 0
	|						И ЕСТЬNULL(Состояния.ЕстьОстаток, 0) > 0
	|					ТОГДА ""Частично выполнен""
	|				КОГДА ДокументуатЗаказГрузоотправителя.Проведен
	|							И Состояния.ЕстьОстаток ЕСТЬ NULL
	|						ИЛИ Состояния.ЕстьОстаток = 0
	|					ТОГДА ""Выполнен""
	|				КОГДА ДокументуатЗаказГрузоотправителя.Проведен
	|					ТОГДА ""Открыт""
	|				ИНАЧЕ ""Новый""
	|			КОНЕЦ
	|	КОНЕЦ КАК Состояние
	|ИЗ
	|	ВРТ_Документы КАК ДокументуатЗаказГрузоотправителя
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_Состояния КАК Состояния
	|		ПО ДокументуатЗаказГрузоотправителя.Ссылка = Состояния.ЗаказГрузоотправителя
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВТ_СтатусыРодительских КАК СостоянияЭтапов
	|		ПО ДокументуатЗаказГрузоотправителя.Ссылка = СостоянияЭтапов.ЗаказГрузоотправителя
	|
	|СГРУППИРОВАТЬ ПО
	|	ДокументуатЗаказГрузоотправителя.Дата,
	|	ДокументуатЗаказГрузоотправителя.Мультимодальный,
	|	ДокументуатЗаказГрузоотправителя.ЭтоЭтап,
	|	Состояния.ЕстьРасход,
	|	Состояния.ЕстьОстаток,
	|	ДокументуатЗаказГрузоотправителя.Проведен";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьДанныеПоСтатусамВыполненныхЗаказов()

&НаСервереБезКонтекста
Функция ПолучитьДанныеПоОбъемуВыполненныхЗаказов(Знач Организация, Знач ДатаНачала, Знач ДатаОкончания)
	
	Запрос = Новый Запрос();
	
	Запрос.УстановитьПараметр("ОтборПоОрганизации", ЗначениеЗаполнено(Организация));
	Запрос.УстановитьПараметр("Организация",        Организация);
	Запрос.УстановитьПараметр("ДатаНачала",         ДатаНачала);
	Запрос.УстановитьПараметр("ДатаОкончания",      ДатаОкончания);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатЗаказГрузоотправителя.Ссылка КАК Ссылка,
	|	НАЧАЛОПЕРИОДА(уатЗаказГрузоотправителя.ОтправлениеС, ДЕНЬ) КАК ДатаОтправления,
	|	1 КАК КоличествоЗаказов
	|ПОМЕСТИТЬ ВРТ_Документы
	|ИЗ
	|	Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	|ГДЕ
	|	уатЗаказГрузоотправителя.ОтправлениеС <= &ДатаОкончания
	|	И уатЗаказГрузоотправителя.ОтправлениеПо >= &ДатаНачала
	|	И ВЫБОР
	|			КОГДА &ОтборПоОрганизации
	|				ТОГДА уатЗаказГрузоотправителя.Организация = &Организация
	|			ИНАЧЕ ИСТИНА
	|		КОНЕЦ
	|	И уатЗаказГрузоотправителя.Проведен
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Ссылка
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ РАЗЛИЧНЫЕ
	|	ТабЗаказы.Заказ КАК Заказ
	|ПОМЕСТИТЬ ВТ_ЗаказыДляСтатусов
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВРТ.Ссылка КАК Заказ
	|	ИЗ
	|		ВРТ_Документы КАК ВРТ
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		уатЭтапыМультимодальныхПеревозок_уэ.Этап
	|	ИЗ
	|		РегистрСведений.уатЭтапыМультимодальныхПеревозок_уэ КАК уатЭтапыМультимодальныхПеревозок_уэ
	|	ГДЕ
	|		уатЭтапыМультимодальныхПеревозок_уэ.ЗаказГрузоотправителя В
	|				(ВЫБРАТЬ
	|					ВРТ.Ссылка
	|				ИЗ
	|					ВРТ_Документы КАК ВРТ)) КАК ТабЗаказы
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Заказ
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТабСтатусы_осн.Заказ КАК Заказ,
	|	ВЫБОР
	|		КОГДА ТабСтатусы_осн.Заказ.Мультимодальный
	|				И НЕ ТабСтатусы_осн.Заказ.ЭтоЭтап
	|			ТОГДА ВЫБОР
	|					КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЕСТЬNULL(ТабСтатусы_доп.Статус, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый))) > 1
	|						ТОГДА ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Составной)
	|					ИНАЧЕ МАКСИМУМ(ЕСТЬNULL(ТабСтатусы_доп.Статус, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый)))
	|				КОНЕЦ
	|		ИНАЧЕ ТабСтатусы_осн.Статус
	|	КОНЕЦ КАК Статус
	|ПОМЕСТИТЬ ВРТ_Статусы
	|ИЗ
	|	(ВЫБРАТЬ
	|		ВРТ.Заказ КАК Заказ,
	|		ВЫБОР
	|			КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЕСТЬNULL(уатСтатусыГрузов_уэСрезПоследних.Статус, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый))) > 1
	|				ТОГДА ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Составной)
	|			ИНАЧЕ МАКСИМУМ(ЕСТЬNULL(уатСтатусыГрузов_уэСрезПоследних.Статус, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый)))
	|		КОНЕЦ КАК Статус
	|	ИЗ
	|		ВТ_ЗаказыДляСтатусов КАК ВРТ
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатСтатусыГрузов_уэ.СрезПоследних(
	|					,
	|					Заказ В
	|						(ВЫБРАТЬ
	|							ВТ_Заказы.Заказ
	|						ИЗ
	|							ВТ_ЗаказыДляСтатусов КАК ВТ_Заказы)) КАК уатСтатусыГрузов_уэСрезПоследних
	|			ПО ВРТ.Заказ = уатСтатусыГрузов_уэСрезПоследних.Заказ
	|	
	|	СГРУППИРОВАТЬ ПО
	|		ВРТ.Заказ) КАК ТабСтатусы_осн
	|		ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|			ВРТ.Заказ КАК Заказ,
	|			ВЫБОР
	|				КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЕСТЬNULL(уатСтатусыГрузов_уэСрезПоследних.Статус, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый))) > 1
	|					ТОГДА ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Составной)
	|				ИНАЧЕ МАКСИМУМ(ЕСТЬNULL(уатСтатусыГрузов_уэСрезПоследних.Статус, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый)))
	|			КОНЕЦ КАК Статус
	|		ИЗ
	|			ВТ_ЗаказыДляСтатусов КАК ВРТ
	|				ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатСтатусыГрузов_уэ.СрезПоследних(
	|						,
	|						Заказ В
	|							(ВЫБРАТЬ
	|								ВТ_Заказы.Заказ
	|							ИЗ
	|								ВТ_ЗаказыДляСтатусов КАК ВТ_Заказы)) КАК уатСтатусыГрузов_уэСрезПоследних
	|				ПО ВРТ.Заказ = уатСтатусыГрузов_уэСрезПоследних.Заказ
	|		
	|		СГРУППИРОВАТЬ ПО
	|			ВРТ.Заказ) КАК ТабСтатусы_доп
	|		ПО ТабСтатусы_осн.Заказ.Ссылка = ТабСтатусы_доп.Заказ.РодительскийЗаказ
	|
	|СГРУППИРОВАТЬ ПО
	|	ТабСтатусы_осн.Заказ,
	|	ТабСтатусы_осн.Статус,
	|	ТабСтатусы_осн.Заказ.Мультимодальный,
	|	ТабСтатусы_осн.Заказ.ЭтоЭтап
	|
	|ИНДЕКСИРОВАТЬ ПО
	|	Заказ,
	|	Статус
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ВРТ_Документы.ДатаОтправления КАК Дата,
	|	СУММА(ВРТ_Документы.КоличествоЗаказов) КАК Количество,
	|	ВРТ_Статусы.Статус КАК Статус
	|ИЗ
	|	ВРТ_Документы КАК ВРТ_Документы
	|		ЛЕВОЕ СОЕДИНЕНИЕ ВРТ_Статусы КАК ВРТ_Статусы
	|		ПО ВРТ_Документы.Ссылка = ВРТ_Статусы.Заказ
	|
	|СГРУППИРОВАТЬ ПО
	|	ВРТ_Документы.ДатаОтправления,
	|	ВРТ_Статусы.Статус";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьДанныеПоОбъемуВыполненныхЗаказов()

&НаСервереБезКонтекста
Функция ПолучитьДанныеПоСтатусам(Знач МассивСтатусов)
	
	Запрос = Новый Запрос();
	Запрос.УстановитьПараметр("мсвСсылок", МассивСтатусов);
	
	Запрос.Текст =
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатСтатусы_уэ.Ссылка,
	|	уатСтатусы_уэ.Наименование,
	|	уатСтатусы_уэ.ЦветФонаПоУмолчанию
	|ИЗ
	|	Справочник.уатСтатусы_уэ КАК уатСтатусы_уэ
	|ГДЕ
	|	уатСтатусы_уэ.Ссылка В(&мсвСсылок)";
	
	Возврат Запрос.Выполнить().Выгрузить();
	
КонецФункции // ПолучитьДанныеПоСтатусам()

#КонецОбласти

#КонецОбласти

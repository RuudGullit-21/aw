
#Область ПеременныеФормы

&НаКлиенте
Перем HTMLobj Экспорт;             // Html-объект схемы перевозки
&НаКлиенте
Перем ДанныеСтрокиТаблицыПунктов;  // Хранит данные строки ТЧ перед началом редактирования.

&НаКлиенте
Перем ДанныеСтрокиТаблицыВсеГрузы; // Хранит данные строки ТЧ перед началом редактирования.

#КонецОбласти

#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// начало блока стандартных операций
	ДопПараметрыОткрытие = Новый Структура("ИмяФормы", ИмяФормы);
	уатЗащищенныеФункцииСервер.уатОбработкаФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	// конец блока стандартных операций
	
	ВосстановитьНастройки();
	ЗагрузитьДанныеШапкиЗаказа(Параметры, Отказ);
	
	ПредставлениеЕдиницыИзмеренияВеса = уатОбщегоНазначенияПовтИсп.ПолучитьПредставлениеОсновнойЕдиницыИзмеренияВеса();
	Если ЗначениеЗаполнено(ПредставлениеЕдиницыИзмеренияВеса) Тогда
		Элементы.ТаблицаЭтаповВес.Заголовок        = НСтр("en='Weight, ';ru='Вес, '") + ПредставлениеЕдиницыИзмеренияВеса;
		Элементы.ТаблицаГрузыПоЭтапамВес.Заголовок = НСтр("en='Weight, ';ru='Вес, '") + ПредставлениеЕдиницыИзмеренияВеса;
		Элементы.ТаблицаВсеГрузыВес.Заголовок      = НСтр("en='Weight, ';ru='Вес, '") + ПредставлениеЕдиницыИзмеренияВеса;
	КонецЕсли;
	
	ПредставлениеЕдиницыИзмеренияОбъема = уатОбщегоНазначенияПовтИсп.ПолучитьПредставлениеОсновнойЕдиницыИзмеренияОбъема();
	Если ЗначениеЗаполнено(ПредставлениеЕдиницыИзмеренияОбъема) Тогда
		Элементы.ТаблицаЭтаповОбъем.Заголовок        = НСтр("en='Volume, ';ru='Объем, '") + ПредставлениеЕдиницыИзмеренияОбъема;
		Элементы.ТаблицаГрузыПоЭтапамОбъем.Заголовок = НСтр("en='Volume, ';ru='Объем, '") + ПредставлениеЕдиницыИзмеренияОбъема;
		Элементы.ТаблицаВсеГрузыОбъем.Заголовок      = НСтр("en='Volume, ';ru='Объем, '") + ПредставлениеЕдиницыИзмеренияОбъема;
	КонецЕсли;
	
	ИспользоватьРедакторЦепочкиДокументов = ПолучитьФункциональнуюОпцию("уатИспользоватьРедакторЦепочкиДокументов_уэ")
		И ПравоДоступа("Просмотр", Метаданные.Обработки.уатРедакторЦепочкиДокументов_уэ)
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// начало блока стандартных операций
	уатЗащищенныеФункцииКлиент.уатОбработкаФормаПриОткрытии(Отказ, ДопПараметрыОткрытие);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	// конец блока стандартных операций
	
	Если Не уатЭлектронныеКартыКлиент.ЭтоПлатформаСWebKit() Тогда 
		ТекстОшибки = НСтр("ru='Обработка ""Редактирование схемы перевозки"" поддерживается только при использовании Платформы 1С:Предприятие версии 8.3.14 и выше.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗаказНаТС) Тогда
		ЗагрузитьДанныеИзЗаказа();
	КонецЕсли;
	
	ЗагрузитьСкрипт();
	УстановитьВидимость();
	УстановитьЗаголовки();
	
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытием(Отказ, ЗавершениеРаботы, ТекстПредупреждения, СтандартнаяОбработка)
	
	Если ЗавершениеРаботы Или Не Модифицированность Тогда 
		ЗакрытьФорму = Истина;
		Возврат;
		
	ИначеЕсли ЗакрытьФорму = Неопределено Или ЗакрытьФорму = Ложь Тогда 
		ОписаниеОповещенияОЗакрытииФормы = Новый ОписаниеОповещения("ПередЗакрытиемПослеПодтверждения", ЭтотОбъект);
		ТекстВопроса = НСтр("en='Data has been changed. Save changes?';ru='Данные были изменены. Сохранить изменения?'");
		ПоказатьВопрос(ОписаниеОповещенияОЗакрытииФормы, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
		
		Отказ = Истина;
		СтандартнаяОбработка = Ложь;
		
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбработкаВыбора(ВыбранноеЗначение, ИсточникВыбора)
	Если ТипЗнч(ВыбранноеЗначение) = Тип("ДокументСсылка.уатЗаказГрузоотправителя") 
		И ЗначениеЗаполнено(ВыбранноеЗначение) Тогда
		ПараметрыЗаказа = Новый Структура("ЗаказНаТС", ВыбранноеЗначение);
		Отказ = Ложь;
		ЗагрузитьДанныеШапкиЗаказа(ПараметрыЗаказа, Отказ);
		Если Не Отказ Тогда
			ЗагрузитьДанныеИзЗаказа();
			ПередатьДанныеВСхему();
			УстановитьВидимость();
			УстановитьЗаголовки();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если ЗавершениеРаботы Тогда 
		Возврат;
	КонецЕсли;
	
	СохранитьНастройки();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура MapHTMLДокументСформирован(Элемент)
	Отказ = Ложь;
	ПроверитьРаботуСкрипта(Отказ);
	Если Не Отказ Тогда
		HTMLobj = Элементы.MapHTML.Документ.defaultView;
		ДобавитьОбработчик HTMLobj.onclick, Подключаемый_MapOnClick;
		ПередатьДанныеВСхему();
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_ТаблицаЭтапов

&НаКлиенте
Процедура ТаблицаЭтаповПриАктивизацииСтроки(Элемент)
	ТекДанные = Элементы.ТаблицаЭтапов.ТекущиеДанные;
	Если ТекДанные <> Неопределено Тогда
		idТекущегоЭтапа = ТекДанные.id;
		ОбновитьГрузыПоТекущемуЭтапу();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЭтаповПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	ТекущиеДанные = Элементы.ТаблицаЭтапов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		ТекущиеДанные = Элементы.ТаблицаЭтапов.ТекущиеДанные;
		Если Не ЗначениеЗаполнено(ТекущиеДанные.id) Или Копирование Тогда
			ТекущиеДанные.id = Новый УникальныйИдентификатор;
		КонецЕсли;
		Если ЗаказДетализацияЗакрытия = ПредопределенноеЗначение("Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам") Тогда
			ТекущиеДанные.ВесБрутто = ЗаказВесБрутто;
			ТекущиеДанные.Объем = ЗаказОбъем;
			ТекущиеДанные.КоличествоМест = ЗаказКоличествоМест;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЭтаповПередУдалением(Элемент, Отказ)
	ТекущиеДанные = Элементы.ТаблицаЭтапов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Удаление ребра со схемы
	ДанныеДляПередачи = Новый Структура("id");
	ДанныеДляПередачи.id = ТекущиеДанные.id;
	СформироватьСтрокуДляПередачиВСхему(ДанныеДляПередачи);
	HTMLobj = Элементы.MapHTML.Документ.defaultView;
	HTMLobj.removeEdgeFrom1C(ДанныеВСхему);
	
	// Удаление грузов, записанных на этап
	УдалитьГрузыПоЭтапу(ТекущиеДанные.id);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЭтаповАдресОтправленияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаЭтапов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ПунктОтправленияId = НайтиДобавитьПункт(ТекущиеДанные.ПунктОтправления);
	НайденныеСтроки = ТаблицаПунктов.НайтиСтроки(Новый Структура("id", ТекущиеДанные.ПунктОтправленияId));
	Если НайденныеСтроки.Количество() > 0 Тогда
		ПередатьДанныеПунктаВСхему(НайденныеСтроки[0]);
	КонецЕсли;
	
	// Пересчитываем время и расстояние на данном этапе
	Если ФлагМультимодальныйЗаказ Тогда
		ВремяВыезда = '00010101' + (ТекущиеДанные.ОтправлениеПлан - НачалоДня(ТекущиеДанные.ОтправлениеПлан));
		РасстояниеИВремя = РассчитатьВремяРасстояниеПоОдномуЭтапу(ТекущиеДанные.ПунктОтправления, ТекущиеДанные.ПунктНазначения, ВремяВыезда);
		ТекущиеДанные.Время = РасстояниеИВремя.Время;
		ТекущиеДанные.Расстояние = РасстояниеИВремя.Расстояние;
	ИначеЕсли ФлагFTLЗаказ Тогда
		ПересчитатьВремяРасстояниеМеждуПунктами();
	КонецЕсли;
		
	ОбновитьЭтапВСхеме(ТекущиеДанные);
		
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЭтаповАдресНазначенияПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаЭтапов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	ТекущиеДанные.ПунктНазначенияId = НайтиДобавитьПункт(ТекущиеДанные.ПунктНазначения);
	НайденныеСтроки = ТаблицаПунктов.НайтиСтроки(Новый Структура("id", ТекущиеДанные.ПунктНазначенияId));
	Если НайденныеСтроки.Количество() > 0 Тогда
		ПередатьДанныеПунктаВСхему(НайденныеСтроки[0]);
	КонецЕсли;
	
	// Пересчитываем время и расстояние на данном этапе
	Если ФлагМультимодальныйЗаказ Тогда
		ВремяВыезда = '00010101' + (ТекущиеДанные.ОтправлениеПлан - НачалоДня(ТекущиеДанные.ОтправлениеПлан));
		РасстояниеИВремя = РассчитатьВремяРасстояниеПоОдномуЭтапу(ТекущиеДанные.ПунктОтправления, ТекущиеДанные.ПунктНазначения, ВремяВыезда);
		ТекущиеДанные.Время = РасстояниеИВремя.Время;
		ТекущиеДанные.Расстояние = РасстояниеИВремя.Расстояние;
	ИначеЕсли ФлагFTLЗаказ Тогда
		ПересчитатьВремяРасстояниеМеждуПунктами();
	КонецЕсли;
	
	ОбновитьЭтапВСхеме(ТекущиеДанные);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЭтаповОтправлениеПланПриИзменении(Элемент)
	Если СтруктураНастроек.ПунктДатаОтправления Тогда
		ТекущиеДанные = Элементы.ТаблицаЭтапов.ТекущиеДанные;
		НайденныеСтроки = ТаблицаПунктов.НайтиСтроки(Новый Структура("id", ТекущиеДанные.ПунктОтправленияId));
		Если НайденныеСтроки.Количество() > 0 Тогда
			ПередатьДанныеПунктаВСхему(НайденныеСтроки[0]);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаЭтаповПрибытиеПланПриИзменении(Элемент)
	Если СтруктураНастроек.ПунктДатаПрибытия Тогда
		ТекущиеДанные = Элементы.ТаблицаЭтапов.ТекущиеДанные;
		НайденныеСтроки = ТаблицаПунктов.НайтиСтроки(Новый Структура("id", ТекущиеДанные.ПунктНазначенияId));
		Если НайденныеСтроки.Количество() > 0 Тогда
			ПередатьДанныеПунктаВСхему(НайденныеСтроки[0]);
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_ТаблицаПунктов

&НаКлиенте
Процедура ТаблицаПунктовПриИзменении(Элемент)
	ЗаполнитьНомераСтрокПунктов();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПунктовПередНачаломИзменения(Элемент, Отказ)
	Если ФлагFTLЗаказ 
		И (Элемент.ТекущийЭлемент = Элементы.ТаблицаПунктовПрибытиеПлан
		Или Элемент.ТекущийЭлемент = Элементы.ТаблицаПунктовУбытиеПлан) Тогда 
		ДанныеСтрокиТаблицыПунктов = Новый Структура();
		ДанныеСтрокиТаблицыПунктов.Вставить("ПрибытиеПлан", Элемент.ТекущиеДанные.ПрибытиеПлан);
		ДанныеСтрокиТаблицыПунктов.Вставить("УбытиеПлан", Элемент.ТекущиеДанные.УбытиеПлан);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПунктовПередУдалением(Элемент, Отказ)
	ТекущиеДанные = Элементы.ТаблицаПунктов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	// Удаление этапов, связанных с пунктом
	УдалитьЭтапыСвязанныеСПунктом(ТекущиеДанные.id);
	
	// Удаление пункта со схемы
	ДанныеДляПередачи = Новый Структура("id");
	ДанныеДляПередачи.id = ТекущиеДанные.id;
	СформироватьСтрокуДляПередачиВСхему(ДанныеДляПередачи);
	HTMLobj = Элементы.MapHTML.Документ.defaultView;
	HTMLobj.removePointFrom1C(ДанныеВСхему);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПунктовПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	
	ТекущиеДанные = Элементы.ТаблицаПунктов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если НоваяСтрока Тогда
		Если (Не ЗначениеЗаполнено(ТекущиеДанные.id) Или Копирование) Тогда
			ТекущиеДанные.id = Новый УникальныйИдентификатор;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТекущиеДанные.Пункт) И Не ЗначениеЗаполнено(ТекущиеДанные.type) Тогда
			ТекущиеДанные.type = ПолучитьТипПункта(ТекущиеДанные.Пункт, ТекущиеДанные.Операция);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПунктовПунктПриИзменении(Элемент)
	ТекущаяСтрока = Элементы.ТаблицаПунктов.ТекущаяСтрока;
	ТекущиеДанные = ТаблицаПунктов.НайтиПоИдентификатору(Элементы.ТаблицаПунктов.ТекущаяСтрока);
	Если ТекущиеДанные <> Неопределено Тогда
		ТекущиеДанные.type = ПолучитьТипПункта(ТекущиеДанные.Пункт, ТекущиеДанные.Операция);
		ТекущиеДанные.Стоянка    = ПолучитьВремяСтоянкиПоУмолчанию(ТекущиеДанные.Пункт);
		ТекущиеДанные.СтоянкаДоп = уатОбщегоНазначения.ПолучитьВремяДопСтонки(ТекущиеДанные.Пункт);
		Если ФлагFTLЗаказ Тогда
			ТекущиеДанные.Расстояние = 0;
			ТекущиеДанные.Время = 0;
			ТекКонтрагент = Неопределено;
			ВремяДоступности = уатОбщегоНазначения_проф.ПолучитьВремяДоступностиПункта(ТекущиеДанные.Пункт, Неопределено);
			мВремяС  = ВремяДоступности.ВремяДоступностиС;
			мВремяПо = ВремяДоступности.ВремяДоступностиПо;
			Если ТипЗнч(мВремяС) = Тип("Дата") Тогда
				мВремяС = мВремяС - Дата('00010101');
			КонецЕсли;
			Если ТипЗнч(мВремяПо) = Тип("Дата") Тогда
				мВремяПо = мВремяПо - Дата('00010101');
				мВремяПо = ?(ЗначениеЗаполнено(мВремяПо), мВремяПо, '00010101235900'-Дата('00010101'))
			КонецЕсли;
			ИндексСтроки = ТаблицаПунктов.Индекс(ТекущиеДанные);
			Если ЗначениеЗаполнено(ТекущиеДанные.ПрибытиеПлан) Тогда
				ТекущиеДанные.ОкноС  = НачалоДня(ТекущиеДанные.ПрибытиеПлан) + мВремяС;
				ТекущиеДанные.ОкноПо = НачалоДня(ТекущиеДанные.ПрибытиеПлан) + мВремяПо;
			Иначе
				ТекущиеДанные.ОкноС  = НачалоДня(ТекущаяДата()) + мВремяС;
				ТекущиеДанные.ОкноПо = НачалоДня(ТекущаяДата()) + мВремяПо;
			КонецЕсли;
			Если ИндексСтроки = 0 Тогда
				ТекущиеДанные.ПрибытиеПлан = ТекущиеДанные.ОкноС;
			Иначе
				ТаблицаПунктов[ИндексСтроки-1].Расстояние = 0;
				ТаблицаПунктов[ИндексСтроки-1].Время = 0;
			КонецЕсли;
			ПересчитатьВремяРасстояниеМеждуПунктами();
		КонецЕсли;
		
		ОбновитьПунктВТаблицеЭтапов(ТекущиеДанные.id, ТекущиеДанные.Пункт);
		ПередатьДанныеПунктаВСхему(ТекущиеДанные);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПунктовОперацияПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ТаблицаПунктов.ТекущиеДанные;
	ТекущиеДанные.type = ПолучитьТипПункта(ТекущиеДанные.Пункт, ТекущиеДанные.Операция);
	Если ТекущиеДанные <> Неопределено Тогда
		ПередатьДанныеПунктаВСхему(ТекущиеДанные);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПунктовПрибытиеПланПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ТаблицаПунктов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ДанныеСтрокиТаблицыПунктов = Неопределено И Не ТаблицаПунктов.Индекс(ТекущиеДанные) = 0 Тогда 
		ОжиданиеСек = ТекущиеДанные.ПрибытиеПлан - ДанныеСтрокиТаблицыПунктов.ПрибытиеПлан;
		ОжиданиеЧас = Цел(ОжиданиеСек / 3600);
		ОжиданиеСек = ОжиданиеСек - ОжиданиеЧас * 3600;
		ОжиданиеМин = Цел(ОжиданиеСек / 60);
		ОжиданиеСек = ОжиданиеСек - ОжиданиеМин * 60;
		Если ОжиданиеСек > 30 Тогда 
			ОжиданиеМин = ОжиданиеМин + 1;
		КонецЕсли;
		Если ОжиданиеМин > 59 Тогда 
			ОжиданиеМин = 0;
			ОжиданиеЧас = ОжиданиеЧас + 1;
		КонецЕсли;
		
		ТекущиеДанные.Ожидание = уатЗащищенныеФункцииСервер.СложитьВремя(
			ТекущиеДанные.Ожидание, 
			(ОжиданиеЧас + ОжиданиеМин / 100)
		);
	КонецЕсли;
	
	// Обновление временного окна прибытия в пункт. Выполняется только для той строки, в которой изменилось время,
	// в остальных строках будет выполнено в процедуре ПересчитатьВремяРасстояниеМеждуПунктамиСервер
	Если Не ДанныеСтрокиТаблицыПунктов = Неопределено Тогда
		СдвигОкна = НачалоДня(ТекущиеДанные.ПрибытиеПлан) - НачалоДня(ДанныеСтрокиТаблицыПунктов.ПрибытиеПлан);
		ТекущиеДанные.ОкноС  = ТекущиеДанные.ОкноС  + СдвигОкна;
		ТекущиеДанные.ОкноПо = ТекущиеДанные.ОкноПо + СдвигОкна;
	КонецЕсли;
	
	ПересчитатьВремяРасстояниеМеждуПунктами();
	
	ДанныеСтрокиТаблицыПунктов = Новый Структура();
	ДанныеСтрокиТаблицыПунктов.Вставить("ПрибытиеПлан", ТекущиеДанные.ПрибытиеПлан);
	ДанныеСтрокиТаблицыПунктов.Вставить("УбытиеПлан", ТекущиеДанные.УбытиеПлан);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПунктовУбытиеПланПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ТаблицаПунктов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если Не ДанныеСтрокиТаблицыПунктов = Неопределено Тогда
		ОжиданиеСек = ТекущиеДанные.УбытиеПлан - ДанныеСтрокиТаблицыПунктов.УбытиеПлан;
		
		Если ТаблицаПунктов.Индекс(ТекущиеДанные) = 0 Тогда 
			ТекущиеДанные.ПрибытиеПлан = ТекущиеДанные.ПрибытиеПлан + ОжиданиеСек;
			
		Иначе 
			ОжиданиеЧас = Цел(ОжиданиеСек / 3600);
			ОжиданиеСек = ОжиданиеСек - ОжиданиеЧас * 3600;
			ОжиданиеМин = Цел(ОжиданиеСек / 60);
			ОжиданиеСек = ОжиданиеСек - ОжиданиеМин * 60;
			Если ОжиданиеСек > 30 Тогда 
				ОжиданиеМин = ОжиданиеМин + 1;
			КонецЕсли;
			Если ОжиданиеМин > 59 Тогда 
				ОжиданиеМин = 0;
				ОжиданиеЧас = ОжиданиеЧас + 1;
			КонецЕсли;
			
			ТекущиеДанные.Ожидание = уатЗащищенныеФункцииСервер.СложитьВремя(
				ТекущиеДанные.Ожидание, 
				(ОжиданиеЧас + ОжиданиеМин / 100)
			);
		КонецЕсли;
		
		// Обновление временного окна прибытия в пункт. Выполняется только для той строки, в которой изменилось время,
		// в остальных строках будет выполнено в процедуре ПересчитатьВремяРасстояниеМеждуПунктамиСервер
		СдвигОкна = НачалоДня(ТекущиеДанные.УбытиеПлан) - НачалоДня(ДанныеСтрокиТаблицыПунктов.УбытиеПлан);
		ТекущиеДанные.ОкноС  = ТекущиеДанные.ОкноС  + СдвигОкна;
		ТекущиеДанные.ОкноПо = ТекущиеДанные.ОкноПо + СдвигОкна;
	КонецЕсли;
	
	ПересчитатьВремяРасстояниеМеждуПунктами();
	
	ДанныеСтрокиТаблицыПунктов = Новый Структура();
	ДанныеСтрокиТаблицыПунктов.Вставить("ПрибытиеПлан", ТекущиеДанные.ПрибытиеПлан);
	ДанныеСтрокиТаблицыПунктов.Вставить("УбытиеПлан", ТекущиеДанные.УбытиеПлан);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПунктовСтоянкаПриИзменении(Элемент)
		
	ТекущиеДанные = Элементы.ТаблицаПунктов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	уатЗащищенныеФункцииСервер.КонтрольВводаВремени(ТекущиеДанные.Стоянка);
	
	ПересчитатьВремяРасстояниеМеждуПунктами();
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаПунктовОжиданиеПриИзменении(Элемент)
	ТекущиеДанные = Элементы.ТаблицаПунктов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	уатЗащищенныеФункцииСервер.КонтрольВводаВремени(ТекущиеДанные.Ожидание);
	
	ПересчитатьВремяРасстояниеМеждуПунктами();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_ТаблицаВсеГрузы

&НаКлиенте
Процедура ТаблицаВсеГрузыПередНачаломИзменения(Элемент, Отказ)
	ДанныеСтрокиТаблицыВсеГрузы = Новый Структура();
	ДанныеСтрокиТаблицыВсеГрузы.Вставить("Количество", Элемент.ТекущиеДанные.Количество);
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВсеГрузыНачалоПеретаскивания(Элемент, ПараметрыПеретаскивания, Выполнение)
	
	СтрокиДляПеретаскивания = Новый Массив;
	Для Каждого ИдентификаторВыделеннойСтроки Из Элементы.ТаблицаВсеГрузы.ВыделенныеСтроки Цикл
		ТекСтрока = ТаблицаВсеГрузы.НайтиПоИдентификатору(ИдентификаторВыделеннойСтроки);
		Если ТекСтрока <> Неопределено 
			И Не ТекСтрока.флСтрокаВыбрана Тогда
			СтрокиДляПеретаскивания.Добавить(ТекСтрока);
		КонецЕсли;
	КонецЦикла;
	
	Для Каждого ТекСтрока Из ТаблицаВсеГрузы Цикл
		Если ТекСтрока.флСтрокаВыбрана Тогда
			СтрокиДляПеретаскивания.Добавить(ТекСтрока);
		КонецЕсли;
	КонецЦикла;
	
	ПараметрыПеретаскивания.Значение = СтрокиДляПеретаскивания;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВсеГрузыПриНачалеРедактирования(Элемент, НоваяСтрока, Копирование)
	Если НоваяСтрока Тогда
		ТекДанные = Элементы.ТаблицаВсеГрузы.ТекущиеДанные;
		ТекДанные.idГруза = Строка(Новый УникальныйИдентификатор);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВсеГрузыГрузПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаВсеГрузы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено
		ИЛИ НЕ ЗначениеЗаполнено(ТекущиеДанные.Груз) Тогда 
		Возврат;
	КонецЕсли;
	
	Если ЗаказДетализацияЗакрытия = ПредопределенноеЗначение("Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам") Тогда
		ГрузовоеМестоСтруктура = уатОбщегоНазначенияТиповые.ПолучитьЗначенияРеквизитов(ТекущиеДанные.Груз,
			"ВидУпаковки, ВесБрутто, КоличествоМест, Объем, Длина, 
			|Ширина, Высота, Стоимость, ТипКонтейнера, УникальноеГрузовоеМесто, Контейнер");
		
		ЗаполнитьЗначенияСвойств(ТекущиеДанные, ГрузовоеМестоСтруктура, "ВесБрутто, Объем, Длина, Ширина, Высота, Стоимость");
		Если ЗначениеЗаполнено(ТекущиеДанные.Груз) Тогда 
			Если ГрузовоеМестоСтруктура.Контейнер Тогда
				ТекущиеДанные.ЕдиницаИзмерения = ГрузовоеМестоСтруктура.ТипКонтейнера;
				ТекущиеДанные.Количество       = 1;
				ТекущиеДанные.КоличествоМест   = 1;
			Иначе
				ТекущиеДанные.ЕдиницаИзмерения = ГрузовоеМестоСтруктура.ВидУпаковки;
				ТекущиеДанные.Количество       = ГрузовоеМестоСтруктура.КоличествоМест;
				КоэффициентУпаковок            = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекущиеДанные.ЕдиницаИзмерения, "Коэффициент");
				ТекущиеДанные.КоличествоМест   = ?(КоэффициентУпаковок = 0, 0, ТекущиеДанные.Количество / КоэффициентУпаковок);
			КонецЕсли;
		КонецЕсли;
	ИначеЕсли ЗаказДетализацияЗакрытия = ПредопределенноеЗначение("Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам") Тогда
		ТекущиеДанные.ЕдиницаИзмерения = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(
			ТекущиеДанные.Груз,
			"ЕдиницаХраненияОстатков"
		);
		
		ВесОбъем = уатОбщегоНазначения.ПолучитьВесОбъемНоменклатуры(ТекущиеДанные.Груз, ТекущиеДанные.ЕдиницаИзмерения, ТекущиеДанные.Количество);
		ТекущиеДанные.ВесБрутто      = ВесОбъем.Вес;
		ТекущиеДанные.Объем          = ВесОбъем.Объем;
		ТекущиеДанные.КоличествоМест = ВесОбъем.КоличествоМест;
		
		ТекущиеДанные.СтавкаНДС = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(
			ТекущиеДанные.Груз,
			"СтавкаНДС"
		);
	КонецЕсли;
	
	ДанныеСтрокиТаблицыВсеГрузы = Новый Структура("Количество", ТекущиеДанные.Количество);
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВсеГрузыГрузНачалоВыбора(Элемент, ДанныеВыбора, СтандартнаяОбработка)
	
	СтандартнаяОбработка = Ложь;
	ТекДанные = Элементы.ТаблицаВсеГрузы.ТекущиеДанные;
	Если ТекДанные = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура("РежимВыбора, НачальноеЗначениеВыбора", Истина, ТекДанные.Груз);
	
	Если ЗаказДетализацияЗакрытия = ПредопределенноеЗначение("Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам") Тогда
		ФормаВыбора = ПолучитьФорму("Справочник.уатГрузовыеМеста_уэ.Форма.ФормаВыбора", ПараметрыФормы, Элемент);
		ФормаВыбора.Открыть();
	ИначеЕсли ЗаказДетализацияЗакрытия = ПредопределенноеЗначение("Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам") Тогда
		ФормаВыбора = ПолучитьФорму("РегистрСведений.уатНоменклатураГрузов.Форма.ФормаВыбора", ПараметрыФормы, Элемент);
		ФормаВыбора.Открыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаВсеГрузыКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаВсеГрузы.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если ДанныеСтрокиТаблицыВсеГрузы = Неопределено Или ДанныеСтрокиТаблицыВсеГрузы.Количество = 0 Тогда
		Коэффициент = 1;
	Иначе
		Коэффициент = ТекущиеДанные.Количество / ДанныеСтрокиТаблицыВсеГрузы.Количество; 
	КонецЕсли;
	
	Если ЗаказДетализацияЗакрытия = ПредопределенноеЗначение("Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам") Тогда
		ГрузовоеМестоСтруктура = уатОбщегоНазначенияТиповые.ПолучитьЗначенияРеквизитов(ТекущиеДанные.Груз, "ВесБрутто, Объем, Контейнер");
		
		Если ГрузовоеМестоСтруктура.Контейнер Тогда
			ТекущиеДанные.КоличествоМест = 1;
		Иначе
			КоэффициентУпаковок = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ТекущиеДанные.ЕдиницаИзмерения, "Коэффициент");
			Если КоэффициентУпаковок <> 0 Тогда
				ТекущиеДанные.КоличествоМест = ТекущиеДанные.Количество / КоэффициентУпаковок;
			КонецЕсли;
		КонецЕсли;
		ТекущиеДанные.ВесБрутто = ТекущиеДанные.Количество * ГрузовоеМестоСтруктура.ВесБрутто;
		ТекущиеДанные.Объем = ТекущиеДанные.Количество * ГрузовоеМестоСтруктура.Объем;
	ИначеЕсли ЗаказДетализацияЗакрытия = ПредопределенноеЗначение("Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам") Тогда
		ВесОбъем = уатОбщегоНазначения.ПолучитьВесОбъемНоменклатуры(ТекущиеДанные.Груз, ТекущиеДанные.ЕдиницаИзмерения, ТекущиеДанные.Количество);
		ТекущиеДанные.ВесБрутто      = ВесОбъем.Вес;
		ТекущиеДанные.Объем          = ВесОбъем.Объем;
		ТекущиеДанные.КоличествоМест = ВесОбъем.КоличествоМест;
	КонецЕсли;
	ТекущиеДанные.Стоимость      = ТекущиеДанные.Стоимость      * Коэффициент;
	ТекущиеДанные.ВесТары        = ТекущиеДанные.ВесТары        * Коэффициент;
	ТекущиеДанные.Сумма          = ТекущиеДанные.Сумма          * Коэффициент;
	ТекущиеДанные.СуммаНДС       = ТекущиеДанные.СуммаНДС       * Коэффициент;
	
	ДанныеСтрокиТаблицыВсеГрузы = Новый Структура("Количество", ТекущиеДанные.Количество);
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_ТаблицаГрузыПоЭтапам

&НаКлиенте
Процедура ТаблицаГрузыПоЭтапамПеретаскивание(Элемент, ПараметрыПеретаскивания, СтандартнаяОбработка, Строка, Поле)
	
	СтандартнаяОбработка = Ложь;
	Если Не ЗначениеЗаполнено(idТекущегоЭтапа) Тогда
		ТекстНСтр = НСтр("ru='Перетаскивание невозможно. Отрезок пути не выбран.';
							 |en='Error. Route section not chosen.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСтр);
		Возврат;
	КонецЕсли;
		
	Если ФлагFTLЗаказ Тогда
		НайденныеСтроки = ТаблицаЭтапов.НайтиСтроки(Новый Структура("id", idТекущегоЭтапа));
		Если НайденныеСтроки.Количество() > 0 Тогда
			СтрокаПунктПогрузка = Неопределено;
			СтрокаПунктРазгрузка = Неопределено;
			
			НайденныеСтрокиПунктов = ТаблицаПунктов.НайтиСтроки(Новый Структура("id", НайденныеСтроки[0].ПунктОтправленияId));
			Если НайденныеСтрокиПунктов.Количество() > 0 Тогда
				СтрокаПунктПогрузка = НайденныеСтрокиПунктов[0];
			КонецЕсли;
			
			НайденныеСтрокиПунктов = ТаблицаПунктов.НайтиСтроки(Новый Структура("id", НайденныеСтроки[0].ПунктНазначенияId));
			Если НайденныеСтрокиПунктов.Количество() > 0 Тогда
				СтрокаПунктРазгрузка = НайденныеСтрокиПунктов[0];
			КонецЕсли;
			
			ОтрезокПутиКорректен = (СтрокаПунктПогрузка <> Неопределено) И (СтрокаПунктРазгрузка <> Неопределено);
			
			Если ОтрезокПутиКорректен
				И СтрокаПунктПогрузка.Операция <> ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Погрузка")
				И СтрокаПунктПогрузка.Операция <> ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.ДополнительнаяПогрузка") Тогда
				ОтрезокПутиКорректен = Ложь;
			КонецЕсли;
			
			Если ОтрезокПутиКорректен
				И СтрокаПунктРазгрузка.Операция <> ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Разгрузка")
				И СтрокаПунктРазгрузка.Операция <> ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.ДополнительнаяРазгрузка") Тогда
				ОтрезокПутиКорректен = Ложь;
			КонецЕсли;
		Иначе
			ОтрезокПутиКорректен = Ложь;
		КонецЕсли;
		
		Если Не ОтрезокПутиКорректен Тогда
			ТекстНСтр = НСтр("ru='Перетаскивание возможно только на отрезки вида ""погрузка - разгрузка"". Воспользуйтесь командой ""Выбрать отрезок пути"".';
							 |en='Cargos can only be dragged on a route segment of a type ""loading - unloading"". Use command ""Set route segment"".'");
			ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСтр);
			Возврат;
		КонецЕсли;
		
		Для Каждого ТекСтрока Из ПараметрыПеретаскивания.Значение Цикл
			УдалитьГрузСоВсехЭтапов(ТекСтрока);
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из ПараметрыПеретаскивания.Значение Цикл
		ДобавитьГрузНаЭтап(ТекСтрока);
	КонецЦикла;
	
	Модифицированность = Истина;
	
	Если ФлагFTLЗаказ Тогда
		ОбновитьПоказателиВсехЭтапов();
	Иначе
		ОбновитьПоказателиТекущегоЭтапа();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаГрузыПоЭтапамПослеУдаления(Элемент)
	ОбновитьПоказателиТекущегоЭтапа();
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаГрузыПоЭтапамПередНачаломДобавления(Элемент, Отказ, Копирование, Родитель, Группа, Параметр)
	Отказ = Истина;
КонецПроцедуры

&НаКлиенте
Процедура ТаблицаГрузыПоЭтапамКоличествоПриИзменении(Элемент)
	
	ТекущиеДанные = Элементы.ТаблицаГрузыПоЭтапам.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		Возврат;
	КонецЕсли;
	НайденныеСтроки = ТаблицаВсеГрузы.НайтиСтроки(Новый Структура("Груз", ТекущиеДанные.Груз));
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	СтрокаВсеГрузы = НайденныеСтроки[0];
	
	Коэффициент = ?(СтрокаВсеГрузы.Количество = 0, 1, ТекущиеДанные.Количество / СтрокаВсеГрузы.Количество);
	ТекущиеДанные.ВесБрутто      = СтрокаВсеГрузы.ВесБрутто      * Коэффициент;
	ТекущиеДанные.Объем          = СтрокаВсеГрузы.Объем          * Коэффициент;
	ТекущиеДанные.КоличествоМест = СтрокаВсеГрузы.КоличествоМест * Коэффициент;
	
	ТекущиеДанные.Стоимость      = СтрокаВсеГрузы.Стоимость      * Коэффициент;
	ТекущиеДанные.ВесТары        = СтрокаВсеГрузы.ВесТары        * Коэффициент;
	ТекущиеДанные.Сумма          = СтрокаВсеГрузы.Сумма          * Коэффициент;
	ТекущиеДанные.СуммаНДС       = СтрокаВсеГрузы.СуммаНДС       * Коэффициент;
	
	ОбновитьПоказателиТекущегоЭтапа();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПередатьДанныеВСхему(Команда = Неопределено)
	
	// Пункты
	мсвПунктыНазначения = Новый Массив;
	Для Каждого ТекПункт Из ТаблицаПунктов Цикл
		СтруктураПункта = Новый Структура("id, label, type");
		СтруктураПункта.id = ТекПункт.id;
		СтруктураПункта.label = ПолучитьНадписьПункта(ТекПункт);
		Если ТекПункт.x <> 0 Или ТекПункт.y <> 0 Тогда
			СтруктураПункта.Вставить("x", ТекПункт.x);
			СтруктураПункта.Вставить("y", ТекПункт.y);
		КонецЕсли;
		СтруктураПункта.type = ТекПункт.type;
		мсвПунктыНазначения.Добавить(СтруктураПункта);
	КонецЦикла;
	
	// Этапы
	мсвЭтапы = Новый Массив;
	Для Каждого ТекСтрока Из ТаблицаЭтапов Цикл
		СтруктураЭтапа = Новый Структура("id, point_from_id, point_to_id, label");
		
		СтруктураЭтапа.label = ПолучитьНадписьЭтапа(ТекСтрока);
		СтруктураЭтапа.point_from_id = ТекСтрока.ПунктОтправленияId;
		СтруктураЭтапа.point_to_id = ТекСтрока.ПунктНазначенияId;
		Если Не ЗначениеЗаполнено(ТекСтрока.id) Тогда
			ТекСтрока.id = Новый УникальныйИдентификатор;
		КонецЕсли;
		СтруктураЭтапа.id = ТекСтрока.id;
		
		мсвЭтапы.Добавить(СтруктураЭтапа);
	КонецЦикла;
	
	locale = ?(ФлагFTLЗаказ, "FTL", "Multimodal");
	ДанныеДляПередачи = Новый Структура("points, stages, locale", мсвПунктыНазначения, мсвЭтапы, locale);
		
	СформироватьСтрокуДляПередачиВСхему(ДанныеДляПередачи);
	HTMLobj = Элементы.MapHTML.Документ.defaultView;
	HTMLobj.evalJSFunc(ДанныеВСхему);

КонецПроцедуры

&НаКлиенте
Процедура ПолучитьДанныеИзСхемы(Команда = Неопределено)
	HTMLobj = Элементы.MapHTML.Документ.defaultView;
	HTMLobj.finish();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьСкрипт(Команда = Неопределено)
	
	Если уатЭлектронныеКартыКлиент.ЭтоПлатформаСWebKit() Тогда 
		ЗагрузитьHTMLИзМакета("МакетСхема");
	Иначе
		ТекстОшибки = НСтр("ru='Обработка ""Редактирование схемы перевозки"" поддерживается только при использовании Платформы 1С:Предприятие версии 8.3.14 и выше.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОчиститьСхему(Команда = Неопределено)
	HTMLobj = Элементы.MapHTML.Документ.defaultView;
	HTMLobj.clearAllData();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзМаршрута(Команда)
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ЗагрузитьИзМаршрутаПослеВыбора", ЭтаФорма);
	ОткрытьФорму("Справочник.уатМаршруты.ФормаВыбора",,,,,, ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьЭтапы(Команда)
	
	ЗаписатьЭтапыКлиент();
	
КонецПроцедуры

// Элемент командной панели таблицы формы "Все грузы"
&НаКлиенте
Процедура ВсеГрузыОтметитьВсе(Команда)
	Для Каждого ТекСтрока Из ТаблицаВсеГрузы Цикл
		ТекСтрока.флСтрокаВыбрана = Истина;
	КонецЦикла;
КонецПроцедуры

// Элемент командной панели таблицы формы "Все грузы"
&НаКлиенте
Процедура ВсеГрузыСнятьВсе(Команда)
	Для Каждого ТекСтрока Из ТаблицаВсеГрузы Цикл
		ТекСтрока.флСтрокаВыбрана = Ложь;
	КонецЦикла;
КонецПроцедуры

// Элемент командной панели таблицы формы "Все грузы"
&НаКлиенте
Процедура ВсеГрузыВыбратьЭтап(Команда)
	
	флГрузВыбран = Ложь;
	Для Каждого ТекСтрока Из ТаблицаВсеГрузы Цикл
		Если ТекСтрока.флСтрокаВыбрана Тогда
			флГрузВыбран = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если Не флГрузВыбран Тогда
		ТекстНСТР = НСтр("en='No cargos selected.';ru='Не выбран ни один груз.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		Возврат;
	КонецЕсли;
	
	ВариантыОтрезков = ПолучитьВариантыОтрезков();
	Если ВариантыОтрезков.Количество() = 0 Тогда
		ТекстНСТР = НСтр("en='No stages found.';
			|ru='Не создан ни один этап.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		Возврат;
	КонецЕсли;
	
	СписокВыбораВарианта = Новый СписокЗначений();
	Для Каждого ТекВариант Из ВариантыОтрезков Цикл 
		СписокВыбораВарианта.Добавить(ТекВариант.Значение, ТекВариант.Представление);
	КонецЦикла;
	
	СписокВыбораВарианта.ПоказатьВыборЭлемента(
		Новый ОписаниеОповещения("ВсеГрузыВыбратьЭтапЗавершение", ЭтотОбъект),
	);
		
КонецПроцедуры

&НаКлиенте
Процедура ВсеГрузыВыбратьОтрезокПути(Команда)
	
	флГрузВыбран = Ложь;
	Для Каждого ТекСтрока Из ТаблицаВсеГрузы Цикл
		Если ТекСтрока.флСтрокаВыбрана Тогда
			флГрузВыбран = Истина;
			Прервать;
		КонецЕсли;
	КонецЦикла;
	Если Не флГрузВыбран Тогда
		ТекстНСТР = НСтр("en='No cargos selected.';ru='Не выбран ни один груз.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		Возврат;
	КонецЕсли;
	
	ВариантыОтрезков = ПолучитьВариантыОтрезков();
	Если ВариантыОтрезков.Количество() = 0 Тогда
		ТекстНСТР = НСтр("en='No applicable route segments found. Maybe destination points are not added, or operations in them not specified.';
			|ru='Нет подходящих отрезков пути. Возможно, не добавлены пункты назначения или не заполнены операции в пунктах.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		Возврат;
	КонецЕсли;
		
	СписокВыбораВарианта = Новый СписокЗначений();
	Для Каждого ТекВариант Из ВариантыОтрезков Цикл 
		СписокВыбораВарианта.Добавить(ТекВариант.Значение, ТекВариант.Представление);
	КонецЦикла;
	
	СписокВыбораВарианта.ПоказатьВыборЭлемента(
		Новый ОписаниеОповещения("ВсеГрузыДобавитьНаОтрезокПутиЗавершение", ЭтотОбъект),
	);
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗаказ(Команда)
	Если ЗначениеЗаполнено(ЗаказНаТС) Тогда
		Если Модифицированность Тогда
			ОписаниеОповещенияОЗакрытииФормы = Новый ОписаниеОповещения("ОткрытьЗаказПослеПодтверждения", ЭтотОбъект);
			ТекстВопроса = НСтр("en='Data has been changed. Save changes?';ru='Данные были изменены. Сохранить изменения?'");
			ПоказатьВопрос(ОписаниеОповещенияОЗакрытииФормы, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
		Иначе
			ОткрытьФорму("Документ.уатЗаказГрузоотправителя.ФормаОбъекта", Новый Структура("Ключ", ЗаказНаТС));
			Закрыть();
		КонецЕсли;
	Иначе
		ТекстНСТР = НСтр("en='Trucking order not created yet.';ru='Заказ на ТС еще не создан.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЭтап(Команда)
	ТекущиеДанные = Элементы.ТаблицаЭтапов.ТекущиеДанные;
	Если ТекущиеДанные = Неопределено Тогда
		ТекстНСТР = НСтр("en='Stage not selected.';ru='Этап не выбран.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		Возврат;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ТекущиеДанные.Заказ) Тогда
		Если Модифицированность Тогда
			ОписаниеОповещенияОЗакрытииФормы = Новый ОписаниеОповещения("ОткрытьЭтапПослеПодтверждения", ЭтотОбъект, ТекущиеДанные.Заказ);
			ТекстВопроса = НСтр("en='Data has been changed. Save changes?';ru='Данные были изменены. Сохранить изменения?'");
			ПоказатьВопрос(ОписаниеОповещенияОЗакрытииФормы, ТекстВопроса, РежимДиалогаВопрос.ДаНетОтмена);
		Иначе
			ОткрытьФорму("Документ.уатЗаказГрузоотправителя.ФормаОбъекта", Новый Структура("Ключ", ТекущиеДанные.Заказ));
		КонецЕсли;
	Иначе
		ТекстНСТР = НСтр("en='Stage not created yet.';ru='Этап еще не создан.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ПоказатьСкрытьИнструменты(Команда)
	Элементы.ФормаПоказатьСкрытьИнструменты.Пометка = Не Элементы.ФормаПоказатьСкрытьИнструменты.Пометка;
	
	ДанныеДляПередачи = Новый Структура("newState", Элементы.ФормаПоказатьСкрытьИнструменты.Пометка);
	СформироватьСтрокуДляПередачиВСхему(ДанныеДляПередачи);
	HTMLobj = Элементы.MapHTML.Документ.defaultView;
	HTMLobj.toggleNavigationButtons(ДанныеВСхему);
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьЗаказ(Команда)
	// Проверка необходимости сохранения текущего заказа
	Если Модифицированность Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("ЗагрузитьЗаказЗаписать", ЭтаФорма);
		ТекстНСтр = НСтр("ru = 'Текущий заказ изменен. Сохранить изменения?'; en = 'Current order is modified. Save changes?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстНСтр, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
	Иначе
		ЗагрузитьЗаказПослеЗаписиДокумента();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовыйЗаказ(Команда)
	// Проверка необходимости сохранения текущего заказа
	Если Модифицированность Тогда
		ОписаниеОповещения = Новый ОписаниеОповещения("СоздатьНовыйЗаказЗаписать", ЭтаФорма);
		ТекстНСтр = НСтр("ru = 'Текущий заказ изменен. Сохранить изменения?'; en = 'Current order is modified. Save changes?'");
		ПоказатьВопрос(ОписаниеОповещения, ТекстНСтр, РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
	Иначе
		СоздатьНовыйЗаказПослеЗаписиДокумента();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройки(Команда)
	
	Оповещение = Новый ОписаниеОповещения("ОткрытьНастройкиЗавершение", ЭтотОбъект);
	ОткрытьФорму("Обработка.уатРедактированиеСхемыПеревозки_уэ.Форма.ФормаНастроекРедактора",, ЭтотОбъект,,,, Оповещение);
	
КонецПроцедуры

// Элемент командной панели таблицы формы "Этапы"
&НаКлиенте
Процедура РазбитьНаЭтапы(Команда)
	
	Если ТаблицаЭтапов.Количество() Тогда
		ТекстНСтр = НСтр("ru='Будут удалены все существующие этапы. Продолжить?';
			|en='Existing stages will be marked for deletion. Continue?'");
		ОписаниеОповещенияОЗавершении = Новый ОписаниеОповещения("РазбитьНаЭтапыОтветНаВопросУдаленияЭтапов", ЭтаФорма);
		ПоказатьВопрос(ОписаниеОповещенияОЗавершении, ТекстНСтр, РежимДиалогаВопрос.ОКОтмена, , КодВозвратаДиалога.ОК);
	Иначе 
		РазбитьНаЭтапыЗавершение();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРедакторЦепочкиДокументов(Команда)
	Если Не ЗначениеЗаполнено(ЗаказНаТС) Тогда
		ТекстНСТР = НСтр("en='Trucking order not created yet.';ru='Заказ на ТС еще не создан.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
	ИначеЕсли Модифицированность Тогда
		ТекстВопроса = НСтр("ru='Перед выполнением операции Заказ будет записан. Продолжить?'");
		Оповещение = Новый ОписаниеОповещения("ОткрытьРедакторЦепочкиДокументовОтвет", ЭтотОбъект);
		ПоказатьВопрос(Оповещение, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
	Иначе
		ДопПараметры = Новый Структура("ЗаказНаТС", ЗаказНаТС);
		ОткрытьФорму("Обработка.уатРедакторЦепочкиДокументов_уэ.Форма.Форма", ДопПараметры, ЭтаФорма);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьВидимость()
	
	Элементы.ГруппаПункты.Видимость = ФлагFTLЗаказ;
	Элементы.ТаблицаЭтаповГруппаМультимодальныйЗаказ.Видимость = ФлагМультимодальныйЗаказ;
	Элементы.ТаблицаЭтаповОткрытьЭтап.Видимость = ФлагМультимодальныйЗаказ;
	Элементы.ТаблицаЭтаповРазбитьНаЭтапы.Видимость = ФлагМультимодальныйЗаказ;
	Элементы.ТаблицаВсеГрузыВыбратьОтрезокПути.Видимость = ФлагFTLЗаказ;
	Элементы.ТаблицаВсеГрузыВыбратьЭтап.Видимость = ФлагМультимодальныйЗаказ;
	
	Элементы.ОткрытьРедакторЦепочкиДокументов.Видимость = ФлагFTLЗаказ;
	
	Если ЗаказДетализацияЗакрытия = ПредопределенноеЗначение("Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам") Тогда
		Элементы.ГруппаВсеГрузы.Видимость = Ложь;
		Элементы.ГруппаГрузыПоЭтапу.Видимость = Ложь;
	Иначе
		Элементы.ГруппаВсеГрузы.Видимость = Истина;
		Элементы.ГруппаГрузыПоЭтапу.Видимость = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УстановитьЗаголовки()
	
	Если ФлагFTLЗаказ Тогда
		Элементы.ГруппаГрузыПоЭтапу.Заголовок = НСтр("ru='Грузы по текущему отрезку пути'; en='Cargo of current route section'");
		Элементы.ГруппаЭтапы.Заголовок = НСтр("ru='Отрезки пути'; en='Route sections'");
	Иначе
		Элементы.ГруппаГрузыПоЭтапу.Заголовок = НСтр("ru='Грузы по текущему этапу'; en='Cargo of current stage'");
		Элементы.ГруппаЭтапы.Заголовок = НСтр("ru='Этапы'; en='Stages'");
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьHTMLИзМакета(ИмяМакета)
	
	Обработка =  РеквизитФормыВЗначение("Объект");
	Макет = Обработка.ПолучитьМакет(ИмяМакета); 
	MapHTML = Макет.ПолучитьТекст();
	
	// Подставляем base64-текст иконок в html-документ
	СоответствиеМакетов = Новый Соответствие;
	СоответствиеМакетов.Вставить("garage.svg",                "уатКартинкаГараж");
	СоответствиеМакетов.Вставить("garage_load.svg",           "уатКартинкаГаражПогрузка");
	СоответствиеМакетов.Вставить("garage_unload.svg",         "уатКартинкаГаражРазгрузка");
	СоответствиеМакетов.Вставить("garage_load_unload.svg",    "уатКартинкаГаражПогрузкаРазгрузка");
	СоответствиеМакетов.Вставить("door.svg",                  "уатКартинкаКлиент");
	СоответствиеМакетов.Вставить("door_load.svg",             "уатКартинкаКлиентПогрузка");
	СоответствиеМакетов.Вставить("door_unload.svg",           "уатКартинкаКлиентРазгрузка");
	СоответствиеМакетов.Вставить("door_load_unload.svg",      "уатКартинкаКлиентПогрузкаРазгрузка");
	СоответствиеМакетов.Вставить("point.svg",                 "уатКартинкаПромежуточныйПункт");
	СоответствиеМакетов.Вставить("warehouse.svg",             "уатКартинкаСклад");
	СоответствиеМакетов.Вставить("warehouse_load.svg",        "уатКартинкаСкладПогрузка");
	СоответствиеМакетов.Вставить("warehouse_unload.svg",      "уатКартинкаСкладРазгрузка");
	СоответствиеМакетов.Вставить("warehouse_load_unload.svg", "уатКартинкаСкладПогрузкаРазгрузка");
	
	Для Каждого КлючИЗначение Из СоответствиеМакетов Цикл
		ТекМакет = ПолучитьОбщийМакет(КлючИЗначение.Значение);
		ТекстМакета = ТекМакет.ПолучитьТекст();
		ДвоичныеДанныеМакета = ПолучитьДвоичныеДанныеИзСтроки(ТекстМакета);
		СтрокаBASE64 = Base64Строка(ДвоичныеДанныеМакета); 
		
		ДанныеМаркера = "";
		Для Сч = 1 По СтрЧислоСтрок(СтрокаBASE64) Цикл
			ДанныеМаркера = ДанныеМаркера + СтрПолучитьСтроку(СтрокаBASE64, Сч);
		КонецЦикла;
		
		MapHTML = СтрЗаменить(MapHTML, КлючИЗначение.Ключ, "data:image/svg+xml;utf8;base64," + ДанныеМаркера);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура Подключаемый_MapOnClick(ДанныеСобытия)
	
	Попытка
		Если ДанныеСобытия.srcElement.id = "messageButton" Тогда 
			OnConsoleMessage(ДанныеСобытия.currentTarget.consoleMessage);
			ДанныеСобытия.currentTarget.consoleMessage = "";
		КонецЕсли;
	Исключение
		ТекстОшибки = ИнформацияОбОшибке().Описание + Символы.ПС
			+ ИнформацияОбОшибке().ИмяМодуля + " " + ИнформацияОбОшибке().НомерСтроки + Символы.ПС
			+ ИнформацияОбОшибке().ИсходнаяСтрока;
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстОшибки);
	КонецПопытки;
	
КонецПроцедуры

&НаКлиенте
Процедура OnConsoleMessage(Message) Экспорт
	
	ДанныеИзСхемы = Message;
	
	#Если ВебКлиент Тогда
		СтруктураСхемы = ПрочитатьJSONНаСервере(Message);
	#Иначе
		ЧтениеJSON = Новый ЧтениеJSON;
		ЧтениеJSON.УстановитьСтроку(Message);
		СтруктураСхемы = ПрочитатьJSON(ЧтениеJSON);
		ЧтениеJSON.Закрыть();
	#КонецЕсли
	
	Если СтруктураСхемы["event"] = "stages" Тогда
		// Загрузка схемы из скрипта
		stages = СтруктураСхемы["data"]["stages"];
		points = СтруктураСхемы["data"]["points"];
		ЗаполнитьПункты(points);
		ЗаполнитьЭтапы(stages);
	ИначеЕсли СтруктураСхемы["event"] = "DropEdge" Тогда
		// Получено сообщение об удалении этапа из скрипта
		НайденныеСтроки = ТаблицаЭтапов.НайтиСтроки(Новый Структура("id", СтруктураСхемы["data"]["id"]));
		Если НайденныеСтроки.Количество() > 0 Тогда
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				ТаблицаЭтапов.Удалить(НайденнаяСтрока);
			КонецЦикла;
			УдалитьГрузыПоЭтапу(СтруктураСхемы["data"]["id"]);
			Модифицированность = Истина;
		КонецЕсли;
	ИначеЕсли СтруктураСхемы["event"] = "DropPoint" Тогда
		// Получено сообщение об удалении пункта из скрипта
		
		// Удаление пункта из таблицы пунктов
		НайденныеСтроки = ТаблицаПунктов.НайтиСтроки(Новый Структура("id", СтруктураСхемы["data"]["id"]));
		Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
			ТаблицаПунктов.Удалить(НайденнаяСтрока);
			Модифицированность = Истина;
		КонецЦикла;
		
		// Удаление этапов, связанных с удаленным пунктом
		УдалитьЭтапыСвязанныеСПунктом(СтруктураСхемы["data"]["id"]);
		
	ИначеЕсли СтруктураСхемы["event"] = "point" Тогда
		// Получено сообщение о запросе на изменение пункта из схемы
		НайденныеСтроки = ТаблицаПунктов.НайтиСтроки(Новый Структура("id", СтруктураСхемы["data"]["id"]));
		Если НайденныеСтроки.Количество() > 0 Тогда
			СтрокаПункта = НайденныеСтроки[0];
		Иначе	
			СтрокаПункта = ТаблицаПунктов.Добавить();
			СтрокаПункта.id = СтруктураСхемы["data"]["id"];
			СтрокаПункта.type = "door";
			ЗаполнитьНомераСтрокПунктов();
		КонецЕсли;
		
		Элементы.ТаблицаПунктов.ТекущаяСтрока = СтрокаПункта.ПолучитьИдентификатор();
		ИзменитьПунктВСхеме(СтрокаПункта);
		
	ИначеЕсли СтруктураСхемы["event"] = "AddEdge" Тогда
		// Получено сообщение о добавлении этапа из схемы
		НайтиДобавитьЭтап(СтруктураСхемы["data"]);
		Модифицированность = Истина;
	ИначеЕсли СтруктураСхемы["event"] = "EditEdge" Тогда
		// Получено сообщение об изменении этапа (его начальных и конечных точек) из схемы
		НайтиДобавитьЭтап(СтруктураСхемы["data"]);
		Модифицированность = Истина;
	ИначеЕсли СтруктураСхемы["event"] = "SelectEdge" Тогда
		// Получено сообщение о выделении этапа из схемы
		Если СтруктураСхемы["data"]["id"] <> idТекущегоЭтапа Тогда
			НайденныеСтроки = ТаблицаЭтапов.НайтиСтроки(Новый Структура("id", СтруктураСхемы["data"]["id"]));
			Если НайденныеСтроки.Количество() > 0 Тогда
				Элементы.ТаблицаЭтапов.ТекущаяСтрока = НайденныеСтроки[0].ПолучитьИдентификатор();
			КонецЕсли;
		КонецЕсли;
	//Иначе
	//	Сообщить("Получено сообщение. " + Message);
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте 
Процедура ЗаполнитьЭтапы(СтруктураЭтапы)
	
	Для Каждого ТекЭтап Из СтруктураЭтапы Цикл
		
		НайденныеСтроки = ТаблицаЭтапов.НайтиСтроки(Новый Структура("id", ТекЭтап.id));
		Если НайденныеСтроки.Количество() > 0 Тогда
			НоваяСтрока = НайденныеСтроки[0];
		Иначе
			НоваяСтрока = ТаблицаЭтапов.Добавить();
			НоваяСтрока.id = ТекЭтап.id;
		КонецЕсли;
		
		НайденныеСтроки = ТаблицаПунктов.НайтиСтроки(Новый Структура("id", ТекЭтап.point_to_id));
		Если НайденныеСтроки.Количество() > 0 Тогда
			НоваяСтрока.ПунктНазначения = НайденныеСтроки[0].Пункт;
			НоваяСтрока.ПунктНазначенияId = НайденныеСтроки[0].id;
		КонецЕсли;
		
		НайденныеСтроки = ТаблицаПунктов.НайтиСтроки(Новый Структура("id", ТекЭтап.point_from_id));
		Если НайденныеСтроки.Количество() > 0 Тогда
			НоваяСтрока.ПунктОтправления = НайденныеСтроки[0].Пункт;
			НоваяСтрока.ПунктОтправленияId = НайденныеСтроки[0].id;
		КонецЕсли;
		
	КонецЦикла;
	
	Если ФлагМультимодальныйЗаказ Тогда
		РассчитатьВремяРасстояниеПоЭтапам();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте 
Процедура ЗаполнитьПункты(СтруктураПункты)
	
	// Надо удалить те пункты, которых нет в СтруктураПункты, остальные оставить
	Для Каждого ТекСтрока Из ТаблицаПунктов Цикл
		ТекСтрока.ПометкаУдаления = Истина;
	КонецЦикла;
	
	Для Каждого ТекПункт Из СтруктураПункты Цикл
		НайденныеСтроки = ТаблицаПунктов.НайтиСтроки(Новый Структура("id", ТекПункт.id));
		Если НайденныеСтроки.Количество() > 0 Тогда
			НоваяСтрока = НайденныеСтроки[0];
		Иначе
			// Пункт, добавленный пользователем в схеме и не привязанный ни к какому пункту 1С
			НоваяСтрока = ТаблицаПунктов.Добавить();
			НоваяСтрока.id = ТекПункт.id;
			НоваяСтрока.type = "door";
			//НоваяСтрока.Пункт = Справочники.уатПунктыНазначения.ПолучитьСсылку(Новый УникальныйИдентификатор(ТекПункт.id));
		КонецЕсли;
		НоваяСтрока.ПометкаУдаления = Ложь;
		НоваяСтрока.x = ТекПункт.x;
		НоваяСтрока.y = ТекПункт.y;
	КонецЦикла;
	
	// Надо удалить те пункты, которых нет в СтруктураПункты, остальные оставить
	Сч = ТаблицаПунктов.Количество();
	Пока Сч > 0 Цикл
		Сч = Сч - 1;
		Если ТаблицаПунктов[Сч].ПометкаУдаления Тогда
			ТаблицаПунктов.Удалить(Сч);
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Функция НайтиДобавитьПункт(ПунктНазначения, Операция = Неопределено, ПоложениеНаСхемеПоГоризонтали = 0, ПоложениеНаСхемеПоВертикали = 0)
	
	НайденныеСтроки = ТаблицаПунктов.НайтиСтроки(Новый Структура("Пункт", ПунктНазначения));
	Если НайденныеСтроки.Количество() = 0 Тогда
		ТекСтрокаПункта = ТаблицаПунктов.Добавить();
		ТекСтрокаПункта.Пункт = ПунктНазначения;
		ТекСтрокаПункта.type = ПолучитьТипПункта(ПунктНазначения);
		ТекСтрокаПункта.Стоянка    = ПолучитьВремяСтоянкиПоУмолчанию(ПунктНазначения);
		ТекСтрокаПункта.СтоянкаДоп = уатОбщегоНазначения.ПолучитьВремяДопСтонки(ТекСтрокаПункта.Пункт);
		ТекСтрокаПункта.x = ПоложениеНаСхемеПоГоризонтали;
		ТекСтрокаПункта.y = ПоложениеНаСхемеПоВертикали;
		
		ОкнаПункта = уатОбщегоНазначенияТиповые.ПолучитьЗначенияРеквизитов(ТекСтрокаПункта.Пункт, "ВремяДоступностиС, ВремяДоступностиПо"); 
		ТекСтрокаПункта.ОкноС = ОкнаПункта.ВремяДоступностиС;
		ТекСтрокаПункта.ОкноПо = ОкнаПункта.ВремяДоступностиПо;
		ЗаполнитьНомераСтрокПунктов();
	Иначе
		ТекСтрокаПункта = НайденныеСтроки[0];
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекСтрокаПункта.id) Тогда
		ТекСтрокаПункта.id = Новый УникальныйИдентификатор();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Операция) Тогда
		ТекСтрокаПункта.Операция = Операция;
	КонецЕсли;
	Возврат ТекСтрокаПункта.id;
	
КонецФункции

&НаСервере
Функция НайтиДобавитьПунктНаСервере(ПунктНазначения, Операция = Неопределено, ПоложениеНаСхемеПоГоризонтали = 0, ПоложениеНаСхемеПоВертикали = 0)
	
	НайденныеСтроки = ТаблицаПунктов.НайтиСтроки(Новый Структура("Пункт", ПунктНазначения));
	Если НайденныеСтроки.Количество() = 0 Тогда
		ТекСтрокаПункта = ТаблицаПунктов.Добавить();
		ТекСтрокаПункта.Пункт = ПунктНазначения;
		ТекСтрокаПункта.type = ПолучитьТипПункта(ПунктНазначения);
		ТекСтрокаПункта.Стоянка = ПолучитьВремяСтоянкиПоУмолчанию(ПунктНазначения);
		ТекСтрокаПункта.СтоянкаДоп = уатОбщегоНазначения.ПолучитьВремяДопСтонки(ТекСтрокаПункта.Пункт);
		ТекСтрокаПункта.x = ПоложениеНаСхемеПоГоризонтали;
		ТекСтрокаПункта.y = ПоложениеНаСхемеПоВертикали;
	Иначе
		ТекСтрокаПункта = НайденныеСтроки[0];
	КонецЕсли;
	
	Если Не ЗначениеЗаполнено(ТекСтрокаПункта.id) Тогда
		ТекСтрокаПункта.id = Новый УникальныйИдентификатор();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(Операция) Тогда
		ТекСтрокаПункта.Операция = Операция;
	КонецЕсли;
	Возврат ТекСтрокаПункта.id;
	
КонецФункции

&НаКлиенте
Процедура ИзменитьПунктВСхеме(СтрокаПункта)
	
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("ИзменитьПунктВСхемеПослеВыбора", ЭтаФорма, СтрокаПункта);
	ОткрытьФорму("Справочник.уатПунктыНазначения.ФормаВыбора",,,,,, ОповещениеОЗакрытии, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
	
КонецПроцедуры

&НаКлиенте
Процедура ИзменитьПунктВСхемеПослеВыбора(ВыбранныйПункт, СтрокаПункта) Экспорт
	
	Если ТипЗнч(ВыбранныйПункт) <> Тип("СправочникСсылка.уатПунктыНазначения") Тогда
		Возврат;
	КонецЕсли;
	              
	СтрокаПункта = СтрокаПункта;
	Если СтрокаПункта <> Неопределено Тогда
		СтрокаПункта.Пункт = ВыбранныйПункт;
		СтрокаПункта.type = ПолучитьТипПункта(ВыбранныйПункт, СтрокаПункта.Операция);
		СтрокаПункта.Стоянка = ПолучитьВремяСтоянкиПоУмолчанию(ВыбранныйПункт);
		СтрокаПункта.СтоянкаДоп = уатОбщегоНазначения.ПолучитьВремяДопСтонки(СтрокаПункта.Пункт);
		Если ФлагFTLЗаказ Тогда
			СтрокаПункта.Расстояние = 0;
			СтрокаПункта.Время = 0;
			ИндексСтроки = ТаблицаПунктов.Индекс(СтрокаПункта);
			Если ИндексСтроки > 0 Тогда
				ТаблицаПунктов[ИндексСтроки-1].Расстояние = 0;
				ТаблицаПунктов[ИндексСтроки-1].Время = 0;
			КонецЕсли;
			ПересчитатьВремяРасстояниеМеждуПунктами();
		КонецЕсли;
		ОбновитьПунктВТаблицеЭтапов(СтрокаПункта.id, СтрокаПункта.Пункт);
		ПередатьДанныеПунктаВСхему(СтрокаПункта);
		Модифицированность = Истина;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПунктВТаблицеЭтапов(ПунктId, НовыйПункт)
	Для Каждого ТекСтрока Из ТаблицаЭтапов Цикл
		ТребуетсяПересчитатьВремяРасстояние = Ложь;
		Если ТекСтрока.ПунктНазначенияId = ПунктId Тогда
			ТекСтрока.ПунктНазначения = НовыйПункт;
			ТекСтрока.Время = 0;
			ТекСтрока.Расстояние = 0;
		КонецЕсли;
		Если ТекСтрока.ПунктОтправленияId = ПунктId Тогда
			ТекСтрока.ПунктОтправления = НовыйПункт;
			ТекСтрока.Время = 0;
			ТекСтрока.Расстояние = 0;
		КонецЕсли;
	КонецЦикла;
	
	// Пересчитываем время и расстояние на этапах
	Если ФлагМультимодальныйЗаказ Тогда
		РассчитатьВремяРасстояниеПоЭтапам();
	КонецЕсли;	

КонецПроцедуры

&НаКлиенте
Процедура ПередатьДанныеПунктаВСхему(СтрокаПункта)
	ДанныеДляПередачи = Новый Структура("id, label, type");
	ДанныеДляПередачи.id    = СтрокаПункта.id;
	ДанныеДляПередачи.label = ПолучитьНадписьПункта(СтрокаПункта);
	ДанныеДляПередачи.type  = СтрокаПункта.type;
	
	СформироватьСтрокуДляПередачиВСхему(ДанныеДляПередачи);
	HTMLobj = Элементы.MapHTML.Документ.defaultView;
	HTMLobj.evalPoint(ДанныеВСхему);
КонецПроцедуры

&НаКлиенте
Процедура НайтиДобавитьЭтап(ДанныеЭтапа)
	
	НайденныеСтроки = ТаблицаЭтапов.НайтиСтроки(Новый Структура("id", ДанныеЭтапа.id));
	Если НайденныеСтроки.Количество() = 0 Тогда
		СтрокаЭтапа = ТаблицаЭтапов.Добавить();
		СтрокаЭтапа.id = ДанныеЭтапа.id;
	Иначе
		СтрокаЭтапа = НайденныеСтроки[0];
	КонецЕсли;
	
	НайденныеСтроки = ТаблицаПунктов.НайтиСтроки(Новый Структура("id", ДанныеЭтапа.fromId));
	Если НайденныеСтроки.Количество() > 0 Тогда
		СтрокаЭтапа.ПунктОтправления = НайденныеСтроки[0].Пункт;
		СтрокаЭтапа.ПунктОтправленияId = НайденныеСтроки[0].id;
	Иначе
		НоваяСтрокаПункта = ТаблицаПунктов.Добавить();
		НоваяСтрокаПункта.id = ДанныеЭтапа.fromId;
		СтрокаЭтапа.ПунктОтправленияId = НоваяСтрокаПункта.id;
		ЗаполнитьНомераСтрокПунктов();
	КонецЕсли;
	
	НайденныеСтроки = ТаблицаПунктов.НайтиСтроки(Новый Структура("id", ДанныеЭтапа.ToId));
	Если НайденныеСтроки.Количество() > 0 Тогда
		СтрокаЭтапа.ПунктНазначения = НайденныеСтроки[0].Пункт;
		СтрокаЭтапа.ПунктНазначенияId = НайденныеСтроки[0].id;
	Иначе
		НоваяСтрокаПункта = ТаблицаПунктов.Добавить();
		НоваяСтрокаПункта.id = ДанныеЭтапа.ToId;
		СтрокаЭтапа.ПунктНазначенияId = НоваяСтрокаПункта.id;
		ЗаполнитьНомераСтрокПунктов();
	КонецЕсли;
	
	Если ФлагМультимодальныйЗаказ Тогда
		ВремяРасстояние = РассчитатьВремяРасстояниеПоОдномуЭтапу(СтрокаЭтапа.ПунктОтправления, СтрокаЭтапа.ПунктНазначения);
		СтрокаЭтапа.Время = ВремяРасстояние.Время;
		СтрокаЭтапа.Расстояние = ВремяРасстояние.Расстояние;
	КонецЕсли;
	Если ФлагFTLЗаказ Тогда
		ПересчитатьВремяРасстояниеМеждуПунктами();
	КонецЕсли;
	
	Элементы.ТаблицаЭтапов.ТекущаяСтрока = СтрокаЭтапа.ПолучитьИдентификатор();
	
	ОбновитьПоказателиТекущегоЭтапа();
		
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзМаршрутаПослеВыбора(Результат, ДопПараметры) Экспорт
	
	Если Не ТипЗнч(Результат) = Тип("СправочникСсылка.уатМаршруты") 
		Или Не ЗначениеЗаполнено(Результат) Тогда
		Возврат;
	КонецЕсли;
	
	ЭтапыМаршрута = ПолучитьЭтапыМаршрута(Результат);
	ПредставлениеМаршрутаОднимПунктом = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Результат, "ПредставлениеМаршрутаОднимПунктом");
	
	ТаблицаЭтапов.Очистить();
	ТаблицаПунктов.Очистить();
	ТаблицаГрузыПоЭтапам.Очистить();
	
	Если ФлагFTLЗаказ Тогда
		ПредыдущийПункт = Неопределено;
		Для Сч = 0 По ЭтапыМаршрута.Количество()-1 Цикл
			
			Если ПредставлениеМаршрутаОднимПунктом Тогда
				
				НовыйПункт = ТаблицаПунктов.Добавить();
				НовыйПункт.id = Новый УникальныйИдентификатор;
				НовыйПункт.Пункт = ЭтапыМаршрута[Сч].ПунктОтправления;
				НовыйПункт.Операция = ЭтапыМаршрута[Сч].ТипТочкиМаршрута;
				НовыйПункт.Расстояние = ЭтапыМаршрута[Сч].Расстояние;
				НовыйПункт.Время = ЭтапыМаршрута[Сч].Время;
				
			Иначе
				
				Если ПредыдущийПункт <> ЭтапыМаршрута[Сч].ПунктОтправления Тогда
					НовыйПункт = ТаблицаПунктов.Добавить();
					НовыйПункт.id = Новый УникальныйИдентификатор;
					НовыйПункт.Пункт = ЭтапыМаршрута[Сч].ПунктОтправления;
					Если Сч = 0 Тогда
						НовыйПункт.Операция = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Погрузка");
					Иначе
						НовыйПункт.Операция = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.ПромежуточныйПункт");
					КонецЕсли;
					НовыйПункт.Расстояние = ЭтапыМаршрута[Сч].Расстояние;
					НовыйПункт.Время = ЭтапыМаршрута[Сч].Время;
				КонецЕсли;
				
				НовыйПункт = ТаблицаПунктов.Добавить();
				НовыйПункт.id = Новый УникальныйИдентификатор;
				НовыйПункт.Пункт = ЭтапыМаршрута[Сч].ПунктНазначения;
				Если Сч = ЭтапыМаршрута.Количество()-1 Тогда
					НовыйПункт.Операция = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Разгрузка");
					НовыйПункт.Расстояние = 0;
					НовыйПункт.Время = 0;
				Иначе
					НовыйПункт.Операция = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.ПромежуточныйПункт");
					НовыйПункт.Расстояние = ЭтапыМаршрута[Сч+1].Расстояние;
					НовыйПункт.Время = ЭтапыМаршрута[Сч+1].Время;
				КонецЕсли;
				
				ПредыдущийПункт = НовыйПункт.Пункт;
				
			КонецЕсли;
		КонецЦикла;
		
		ЗаполнитьТипыВсехПунктов();
		
		Для Сч = 1 По ТаблицаПунктов.Количество()-1 Цикл
			НовыйЭтап = ТаблицаЭтапов.Добавить();
			НовыйЭтап.id = Новый УникальныйИдентификатор;
			НовыйЭтап.ПунктОтправления = ТаблицаПунктов[Сч-1].Пункт;
			НовыйЭтап.ПунктОтправленияId = ТаблицаПунктов[Сч-1].Id;
			НовыйЭтап.ПунктНазначения = ТаблицаПунктов[Сч].Пункт;
			НовыйЭтап.ПунктНазначенияId = ТаблицаПунктов[Сч].Id;
		КонецЦикла;
		
		ПересчитатьВремяРасстояниеМеждуПунктами();
		ЗаполнитьНомераСтрокПунктов();
	Иначе	
		Для Сч = 0 По ЭтапыМаршрута.Количество()-1 Цикл
			
			Если ПредставлениеМаршрутаОднимПунктом Тогда
				Если Сч = 0 Тогда
					ПунктОтправления = ЭтапыМаршрута[Сч].ПунктОтправления;
					ПунктОтправленияId = НайтиДобавитьПункт(ЭтапыМаршрута[Сч].ПунктОтправления, ЭтапыМаршрута[Сч].ТипТочкиМаршрута);
					Продолжить;
				КонецЕсли;
				ПунктНазначения = ЭтапыМаршрута[Сч].ПунктОтправления;
				ПунктНазначенияId = НайтиДобавитьПункт(ЭтапыМаршрута[Сч].ПунктОтправления, ЭтапыМаршрута[Сч].ТипТочкиМаршрута);
				
				НовыйЭтап = ТаблицаЭтапов.Добавить();
				НовыйЭтап.id = Новый УникальныйИдентификатор;
				НовыйЭтап.ПунктОтправления = ПунктОтправления;
				НовыйЭтап.ПунктОтправленияId = ПунктОтправленияId;
				НовыйЭтап.ПунктНазначения = ПунктНазначения;
				НовыйЭтап.ПунктНазначенияId = ПунктНазначенияId;
				НовыйЭтап.Расстояние = ЭтапыМаршрута[Сч-1].Расстояние;
				НовыйЭтап.Время = ЭтапыМаршрута[Сч-1].Время;
				
				ПунктОтправления = ПунктНазначения;
				ПунктОтправленияId = ПунктНазначенияId;
			Иначе
				НовыйЭтап = ТаблицаЭтапов.Добавить();
				НовыйЭтап.id = Новый УникальныйИдентификатор;
				НовыйЭтап.ПунктОтправления = ЭтапыМаршрута[Сч].ПунктОтправления;
				НовыйЭтап.ПунктОтправленияId = НайтиДобавитьПункт(ЭтапыМаршрута[Сч].ПунктОтправления);
				НовыйЭтап.ПунктНазначения = ЭтапыМаршрута[Сч].ПунктНазначения;
				НовыйЭтап.ПунктНазначенияId =  НайтиДобавитьПункт(ЭтапыМаршрута[Сч].ПунктНазначения);
				НовыйЭтап.Расстояние = ЭтапыМаршрута[Сч].Расстояние;
				НовыйЭтап.Время = ЭтапыМаршрута[Сч].Время;
			КонецЕсли;
			
		КонецЦикла;
	КонецЕсли;
	
	ПередатьДанныеВСхему();
	ЗаказМаршрут = Результат;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьЭтапыМаршрута(Маршрут)
	ЭтапыМаршрута = Новый Массив;
	Для Каждого ТекЭтап Из Маршрут.Этапы Цикл
		СтруктураЭтапа = Новый Структура("Время, ПунктОтправления, ПунктНазначения, Расстояние, ТипТочкиМаршрута");
		СтруктураЭтапа.Время            = ТекЭтап.ВремяВПути;
		СтруктураЭтапа.Расстояние       = ТекЭтап.Расстояние;
		СтруктураЭтапа.ПунктОтправления = ТекЭтап.ПунктОтправления;
		СтруктураЭтапа.ПунктНазначения  = ТекЭтап.ПунктПрибытия;
		СтруктураЭтапа.ТипТочкиМаршрута = ТекЭтап.ТипТочиМаршрута;
		ЭтапыМаршрута.Добавить(СтруктураЭтапа);
	КонецЦикла;
	Возврат ЭтапыМаршрута;
КонецФункции

&НаСервереБезКонтекста
Функция ПолучитьВремяСтоянкиПоУмолчанию(ПунктСсылка)
	
	Возврат уатОбщегоНазначения.ПолучитьВремяСтоянкиПоУмолчанию(ПунктСсылка);
	
КонецФункции // ПолучитьВремяСтоянкиПоУмолчанию()

&НаКлиенте
Процедура ЗагрузитьДанныеИзЗаказа()
	
	Если ФлагFTLЗаказ Тогда
		ЗагрузитьИзFTLЗаказаНаСервере();
		ЗаполнитьНомераСтрокПунктов();
	ИначеЕсли ФлагМультимодальныйЗаказ Тогда
		ЗагрузитьИзМультимодальногоЗаказа();
	КонецЕсли;
	
	Модифицированность = Ложь;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьИзМультимодальногоЗаказа()
	
	ЗагрузитьИзМультимодальногоЗаказаНаСервере();
	
	Если ТаблицаЭтапов.Количество() = 0 Тогда
		Маршрут = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(ЗаказНаТС, "Маршрут");
		Если ЗначениеЗаполнено(Маршрут) Тогда
			ОписаниеОповещенияЗагрузитьИзМаршрута = Новый ОписаниеОповещения("ВопросЗагрузитьИзМаршрутаОтвет", ЭтотОбъект, Маршрут);
			ТекстНСтр = НСтр("ru = 'Получить этапы перевозки из маршрута?'; en = 'Get stages from route?'");
			ПоказатьВопрос(ОписаниеОповещенияЗагрузитьИзМаршрута, ТекстНСтр,РежимДиалогаВопрос.ДаНет,,КодВозвратаДиалога.Да);
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВопросЗагрузитьИзМаршрутаОтвет(Результат, Маршрут) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗагрузитьИзМаршрутаПослеВыбора(Маршрут, Неопределено);
	ИначеЕсли ЗначениеЗаполнено(ЗаказНаТС) Тогда
		// Добавим в таблицу пунктов пункты отправления и назначения родительского ММ заказа
		ПунктыРодительскогоЗаказа = уатОбщегоНазначенияТиповые.ПолучитьЗначенияРеквизитов(ЗаказНаТС, "АдресОтправления, АдресНазначения");
		НайтиДобавитьПункт(ПунктыРодительскогоЗаказа.АдресНазначения);
		НайтиДобавитьПункт(ПунктыРодительскогоЗаказа.АдресОтправления);
		ПередатьДанныеВСхему();
	КонецЕсли;
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьИзМультимодальногоЗаказаНаСервере()
	
	тблЗаказы = Новый ТаблицаЗначений;
	тблЗаказы.Колонки.Добавить("Заказ", Новый ОписаниеТипов("ДокументСсылка.уатЗаказГрузоотправителя"));
	тблЗаказы.Колонки.Добавить("id", Новый ОписаниеТипов("Строка"));
	НоваяСтрока = тблЗаказы.Добавить();
	НоваяСтрока.Заказ = ЗаказНаТС;
	НоваяСтрока.id = "";
	
	Запрос = Новый Запрос("ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатЭтапыМультимодальныхПеревозок_уэ.Этап КАК Этап,
	|	уатЭтапыМультимодальныхПеревозок_уэ.НомерЭтапа КАК НомерЭтапа,
	|	уатЭтапыМультимодальныхПеревозок_уэ.ДатаОтправленияПлан КАК ДатаОтправленияПлан,
	|	уатЭтапыМультимодальныхПеревозок_уэ.ДатаПрибытияПлан КАК ДатаПрибытияПлан,
	|	уатЗаказГрузоотправителя.АдресНазначения КАК АдресНазначения,
	|	уатЗаказГрузоотправителя.АдресОтправления КАК АдресОтправления,
	|	уатЗаказГрузоотправителя.ВесБрутто КАК ВесБрутто,
	|	уатЗаказГрузоотправителя.Объем КАК Объем,
	|	уатЗаказГрузоотправителя.КоличествоМест КАК КоличествоМест,
	|	уатЗаказГрузоотправителя.Время КАК Время,
	|	уатЗаказГрузоотправителя.Расстояние КАК Расстояние,
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЕСТЬNULL(уатСтатусыГрузов_уэСрезПоследних.Статус, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый))) > 1
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Составной)
	|		ИНАЧЕ МАКСИМУМ(ЕСТЬNULL(уатСтатусыГрузов_уэСрезПоследних.Статус, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый)))
	|	КОНЕЦ КАК Статус,
	|	уатЭтапыМультимодальныхПеревозок_уэ.Этап.Номер КАК ЭтапНомер,
	|	уатЭтапыМультимодальныхПеревозок_уэ.xПунктаОтправления КАК xПунктаОтправления,
	|	уатЭтапыМультимодальныхПеревозок_уэ.yПунктаОтправления КАК yПунктаОтправления,
	|	уатЭтапыМультимодальныхПеревозок_уэ.xПунктаНазначения КАК xПунктаНазначения,
	|	уатЭтапыМультимодальныхПеревозок_уэ.yПунктаНазначения КАК yПунктаНазначения
	|ИЗ
	|	РегистрСведений.уатЭтапыМультимодальныхПеревозок_уэ КАК уатЭтапыМультимодальныхПеревозок_уэ
	|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя КАК уатЗаказГрузоотправителя
	|		ПО уатЭтапыМультимодальныхПеревозок_уэ.Этап = уатЗаказГрузоотправителя.Ссылка
	|		ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.уатСтатусыГрузов_уэ.СрезПоследних КАК уатСтатусыГрузов_уэСрезПоследних
	|		ПО уатЭтапыМультимодальныхПеревозок_уэ.Этап = уатСтатусыГрузов_уэСрезПоследних.Заказ
	|ГДЕ
	|	уатЭтапыМультимодальныхПеревозок_уэ.ЗаказГрузоотправителя = &ЗаказГрузоотправителя
	|	И НЕ уатЭтапыМультимодальныхПеревозок_уэ.Этап.ПометкаУдаления
	|
	|СГРУППИРОВАТЬ ПО
	|	уатЭтапыМультимодальныхПеревозок_уэ.Этап,
	|	уатЭтапыМультимодальныхПеревозок_уэ.НомерЭтапа,
	|	уатЭтапыМультимодальныхПеревозок_уэ.ДатаОтправленияПлан,
	|	уатЭтапыМультимодальныхПеревозок_уэ.ДатаПрибытияПлан,
	|	уатЗаказГрузоотправителя.АдресНазначения,
	|	уатЗаказГрузоотправителя.АдресОтправления,
	|	уатЗаказГрузоотправителя.ВесБрутто,
	|	уатЗаказГрузоотправителя.Объем,
	|	уатЗаказГрузоотправителя.КоличествоМест,
	|	уатЗаказГрузоотправителя.Время,
	|	уатЗаказГрузоотправителя.Расстояние,
	|	уатЭтапыМультимодальныхПеревозок_уэ.Этап.Номер,
	|	уатЭтапыМультимодальныхПеревозок_уэ.xПунктаОтправления,
	|	уатЭтапыМультимодальныхПеревозок_уэ.yПунктаОтправления,
	|	уатЭтапыМультимодальныхПеревозок_уэ.xПунктаНазначения,
	|	уатЭтапыМультимодальныхПеревозок_уэ.yПунктаНазначения
	|
	|ИМЕЮЩИЕ
	|	ВЫБОР
	|		КОГДА КОЛИЧЕСТВО(РАЗЛИЧНЫЕ ЕСТЬNULL(уатСтатусыГрузов_уэСрезПоследних.Статус, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый))) > 1
	|			ТОГДА ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Составной)
	|		ИНАЧЕ МАКСИМУМ(ЕСТЬNULL(уатСтатусыГрузов_уэСрезПоследних.Статус, ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Новый)))
	|	КОНЕЦ <> ЗНАЧЕНИЕ(Справочник.уатСтатусы_уэ.Отклонен)
	|
	|УПОРЯДОЧИТЬ ПО
	|	НомерЭтапа");
	Запрос.УстановитьПараметр("ЗаказГрузоотправителя", ЗаказНаТС);
	Выборка = Запрос.Выполнить().Выбрать();
	
	ТаблицаЭтапов.Очистить();
	ТаблицаПунктов.Очистить();
	Пока Выборка.Следующий() Цикл
		
		ТекЭтап = ТаблицаЭтапов.Добавить();
		//ТекЭтап.НомерЭтапа = Выборка.ЭтапНомер;
		ТекЭтап.НомерЭтапа = ПрефиксацияОбъектовКлиентСервер.НомерНаПечать(Выборка.ЭтапНомер, Истина, Истина);
		ТекЭтап.id = Новый УникальныйИдентификатор;
		ТекЭтап.ПунктНазначения = Выборка.АдресНазначения;
		ТекЭтап.ПунктОтправления = Выборка.АдресОтправления;
		ТекЭтап.ПунктНазначенияId = НайтиДобавитьПунктНаСервере(ТекЭтап.ПунктНазначения,, Выборка.xПунктаНазначения, Выборка.yПунктаНазначения);
		ТекЭтап.ПунктОтправленияId = НайтиДобавитьПунктНаСервере(ТекЭтап.ПунктОтправления,, Выборка.xПунктаОтправления, Выборка.yПунктаОтправления);
		ТекЭтап.ВесБрутто = Выборка.ВесБрутто;
		ТекЭтап.Объем = Выборка.Объем;
		ТекЭтап.КоличествоМест = Выборка.КоличествоМест;
		ТекЭтап.ОтправлениеПлан = Выборка.ДатаОтправленияПлан;
		ТекЭтап.ПрибытиеПлан = Выборка.ДатаПрибытияПлан;
		ТекЭтап.Время = Выборка.Время;
		ТекЭтап.Расстояние = Выборка.Расстояние;
		ТекЭтап.Заказ = Выборка.Этап;
		
		НоваяСтрока = тблЗаказы.Добавить();
		НоваяСтрока.Заказ = ТекЭтап.Заказ;
		НоваяСтрока.id = ТекЭтап.id;
		
	КонецЦикла;
	
	// Заполнение грузов
	Если Не ЗаказДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам Тогда
		ЗаполнитьГрузыПоЗаказам(тблЗаказы);
	КонецЕсли;
	
	// Добавим в таблицу пунктов пункты отправления и назначения родительского ММ заказа
	ПунктыРодительскогоЗаказа = уатОбщегоНазначенияТиповые.ПолучитьЗначенияРеквизитов(ЗаказНаТС, "АдресОтправления, АдресНазначения");
	Если ТипЗнч(ПунктыРодительскогоЗаказа.АдресНазначения) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда
		НайтиДобавитьПунктНаСервере(ПунктыРодительскогоЗаказа.АдресНазначения);
	КонецЕсли;
	Если ТипЗнч(ПунктыРодительскогоЗаказа.АдресОтправления) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда
		НайтиДобавитьПунктНаСервере(ПунктыРодительскогоЗаказа.АдресОтправления);
	КонецЕсли;
	
КонецПроцедуры
	
&НаСервере
Процедура ЗагрузитьИзFTLЗаказаНаСервере()
	
	ТаблицаПунктов.Очистить();
	ТаблицаЭтапов.Очистить();
	
	// Заполнение пунктов
	Для Каждого ТекСтрока Из ЗаказНаТС.ПромежуточныеПункты Цикл
		НоваяСтрока = ТаблицаПунктов.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрока);
		НоваяСтрока.СтоянкаДоп = уатОбщегоНазначения.ПолучитьВремяДопСтонки(НоваяСтрока.Пункт);
		НоваяСтрока.Операция   = ТекСтрока.ТипТочкиМаршрута;
		НоваяСтрока.id = Новый УникальныйИдентификатор;
	КонецЦикла;
	ЗаполнитьТипыВсехПунктов();
	
	// Заполнение этапов по пунктам
	Для Сч = 1 По ТаблицаПунктов.Количество()-1 Цикл
		НоваяСтрока = ТаблицаЭтапов.Добавить();
		НоваяСтрока.НомерЭтапа = Сч;
		НоваяСтрока.ПунктОтправления = ТаблицаПунктов[Сч-1].Пункт;
		НоваяСтрока.ПунктОтправленияId = ТаблицаПунктов[Сч-1].id;
		НоваяСтрока.ПунктНазначения = ТаблицаПунктов[Сч].Пункт;
		НоваяСтрока.ПунктНазначенияId = ТаблицаПунктов[Сч].id;
	КонецЦикла;
	
	Если Не ЗаказДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам Тогда
		// Заполнение таблицы всех грузов
		тблЗаказы = Новый ТаблицаЗначений;
		тблЗаказы.Колонки.Добавить("Заказ", Новый ОписаниеТипов("ДокументСсылка.уатЗаказГрузоотправителя"));
		тблЗаказы.Колонки.Добавить("id", Новый ОписаниеТипов("Строка"));
		НоваяСтрока = тблЗаказы.Добавить();
		НоваяСтрока.Заказ = ЗаказНаТС;
		НоваяСтрока.id = "";
		ЗаполнитьГрузыПоЗаказам(тблЗаказы);
		
		// Заполнение таблицы грузов по этапам
		Для Каждого ТекСтрока Из ЗаказНаТС.ОтрезкиПути Цикл
			Если ТекСтрока.Груз > ТаблицаВсеГрузы.Количество() Тогда
				// Груз, удаленный из таблицы грузов в Заказе на ТС, для которого остались данные в таблице ОтрезкиПути
				Продолжить;
			ИначеЕсли ТекСтрока.Груз <= 0 Тогда
				// Некорректно заполненный номер груза
				Продолжить;
			КонецЕсли;
			
			НоваяСтрока = ТаблицаГрузыПоЭтапам.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрока, ТаблицаВсеГрузы[ТекСтрока.Груз-1]);
			
			// id этапа определяется по id этапа для записанных на него грузов
			НоваяСтрока.ЭтапId = ТекСтрока.id;
			СтрокаЭтапа = ТаблицаЭтапов[ТекСтрока.ПунктОтправления-1];
			СтрокаЭтапа.id = ТекСтрока.id;
			СтрокаЭтапа.ВесБрутто = СтрокаЭтапа.ВесБрутто + НоваяСтрока.ВесБрутто;
			СтрокаЭтапа.Объем = СтрокаЭтапа.Объем + НоваяСтрока.Объем;
			СтрокаЭтапа.КоличествоМест = СтрокаЭтапа.КоличествоМест + НоваяСтрока.КоличествоМест;
		КонецЦикла;
	Иначе
		Для Каждого ТекСтрока Из ТаблицаЭтапов Цикл
			ТекСтрока.ВесБрутто = ЗаказВесБрутто;
			ТекСтрока.Объем = ЗаказОбъем;
			ТекСтрока.КоличествоМест = ЗаказКоличествоМест;
		КонецЦикла;
	КонецЕсли;
	
	Для Каждого ТекСтрока Из ТаблицаЭтапов Цикл
		Если Не ЗначениеЗаполнено(ТекСтрока.id) Тогда
			ТекСтрока.id = Новый УникальныйИдентификатор;
		КонецЕсли;
	КонецЦикла;
	
КонецПроцедуры	

&НаСервере
Процедура ЗаполнитьГрузыПоЗаказам(тблЗаказы)
	
	ТаблицаВсеГрузы.Очистить();
	ТаблицаГрузыПоЭтапам.Очистить();
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	тблЗаказы.Заказ КАК Заказ,
	|	тблЗаказы.id КАК id
	|ПОМЕСТИТЬ втЗаказы
	|ИЗ
	|	&тблЗаказы КАК тблЗаказы
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|";
	Если ЗаказДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам Тогда
		Запрос.Текст = Запрос.Текст + "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатЗаказГрузоотправителяГрузовойСостав.ГрузовоеМесто КАК Груз,
		|	уатЗаказГрузоотправителяГрузовойСостав.ВидУпаковки КАК ЕдиницаИзмерения,
		|	уатЗаказГрузоотправителяГрузовойСостав.ВесБрутто КАК ВесБрутто,
		|	уатЗаказГрузоотправителяГрузовойСостав.Объем КАК Объем,
		|	уатЗаказГрузоотправителяГрузовойСостав.КоличествоМест КАК Количество,
		|	ВЫБОР
		|		КОГДА уатЗаказГрузоотправителяГрузовойСостав.ВидУпаковки.Коэффициент = 0
		|			ТОГДА уатЗаказГрузоотправителяГрузовойСостав.КоличествоМест
		|		ИНАЧЕ уатЗаказГрузоотправителяГрузовойСостав.КоличествоМест / уатЗаказГрузоотправителяГрузовойСостав.ВидУпаковки.Коэффициент
		|	КОНЕЦ КАК КоличествоМест,
		|	втЗаказы.id КАК ЭтапId,
		|	уатЗаказГрузоотправителяГрузовойСостав.Высота КАК Высота,
		|	уатЗаказГрузоотправителяГрузовойСостав.Длина КАК Длина,
		|	уатЗаказГрузоотправителяГрузовойСостав.Ширина КАК Ширина,
		|	уатЗаказГрузоотправителяГрузовойСостав.Стоимость КАК Стоимость,
		|	уатЗаказГрузоотправителяГрузовойСостав.ОписаниеГруза КАК ОписаниеГруза,
		|	уатЗаказГрузоотправителяГрузовойСостав.ВесТары КАК ВесТары,
		|	уатЗаказГрузоотправителяГрузовойСостав.НомерСтроки КАК idГруза
		|ИЗ
		|	втЗаказы КАК втЗаказы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя.ГрузовойСостав КАК уатЗаказГрузоотправителяГрузовойСостав
		|		ПО втЗаказы.Заказ = уатЗаказГрузоотправителяГрузовойСостав.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	idГруза";
	ИначеЕсли ЗаказДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам Тогда
		Запрос.Текст = Запрос.Текст + "ВЫБРАТЬ РАЗРЕШЕННЫЕ
		|	уатЗаказГрузоотправителяТовары.Номенклатура КАК Груз,
		|	уатЗаказГрузоотправителяТовары.ЕдиницаИзмерения КАК ЕдиницаИзмерения,
		|	уатЗаказГрузоотправителяТовары.ВесБрутто КАК ВесБрутто,
		|	уатЗаказГрузоотправителяТовары.Объем КАК Объем,
		|	уатЗаказГрузоотправителяТовары.Количество КАК Количество,
		|	уатЗаказГрузоотправителяТовары.КоличествоМест КАК КоличествоМест,
		|	втЗаказы.id КАК ЭтапId,
		|	уатЗаказГрузоотправителяТовары.Комментарий КАК Комментарий,
		|	уатЗаказГрузоотправителяТовары.Цена КАК Цена,
		|	уатЗаказГрузоотправителяТовары.Сумма КАК Сумма,
		|	уатЗаказГрузоотправителяТовары.СтавкаНДС КАК СтавкаНДС,
		|	уатЗаказГрузоотправителяТовары.СуммаНДС КАК СуммаНДС,
		|	уатЗаказГрузоотправителяТовары.ВесТары КАК ВесТары,
		|	уатЗаказГрузоотправителяТовары.НомерСтроки КАК idГруза
		|ИЗ
		|	втЗаказы КАК втЗаказы
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ Документ.уатЗаказГрузоотправителя.Товары КАК уатЗаказГрузоотправителяТовары
		|		ПО втЗаказы.Заказ = уатЗаказГрузоотправителяТовары.Ссылка
		|
		|УПОРЯДОЧИТЬ ПО
		|	idГруза";
	КонецЕсли;
	Запрос.УстановитьПараметр("тблЗаказы", тблЗаказы);
	Выборка = Запрос.Выполнить().Выбрать();
	
	Пока Выборка.Следующий() Цикл
		Если Выборка.ЭтапId = "" Тогда
			НоваяСтрока = ТаблицаВсеГрузы.Добавить();
		Иначе
			НоваяСтрока = ТаблицаГрузыПоЭтапам.Добавить();
		КонецЕсли;
		ЗаполнитьЗначенияСвойств(НоваяСтрока, Выборка);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьЭтапыКлиент(ЗадаватьВопросРедакторЦепочкиДокументов = Истина)
	
	ПолучитьДанныеИзСхемы();
	ПараметрыЗаписиЭтапов = Неопределено;
	
	// Порядок этапов для FTL заказов подчинен порядку пунктов
	Если ФлагFTLЗаказ Тогда
		СортироватьЭтапы();
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗаказНаТС) Тогда
		РеквизитыДокумента = уатОбщегоНазначенияТиповые.ПолучитьЗначенияРеквизитов(ЗаказНаТС, "АдресОтправления, АдресНазначения");
		ДопПараметры = Новый Структура("ПунктОтправления, ПунктНазначения", РеквизитыДокумента.АдресОтправления, РеквизитыДокумента.АдресНазначения);
	Иначе
		ДопПараметры = Новый Структура;
	КонецЕсли;
	флЭтапыКорректны = ПроверитьКорректностьЭтапов(ДопПараметры); 
	Если флЭтапыКорректны Тогда
		Если ФлагМультимодальныйЗаказ И ТаблицаЭтапов.Количество() > 0 Тогда
			// Надо сохранить новые пункты отправления и назначения для родительского ММ заказа
			ПараметрыЗаписиЭтапов = Новый Структура("ПунктОтправления, ПунктНазначения");
			ЗаполнитьЗначенияСвойств(ПараметрыЗаписиЭтапов, ДопПараметры);
		КонецЕсли;
	ИначеЕсли ФлагFTLЗаказ И ДопПараметры.Свойство("КорректнаяПоследовательностьПунктов") Тогда
		ДопПараметры.Вставить("ЗадаватьВопросРедакторЦепочкиДокументов", ЗадаватьВопросРедакторЦепочкиДокументов);
		ПараметрыЗаписиЭтапов = Новый Структура("ЗакрытьФорму", ЗакрытьФорму);
		ДопПараметры.Вставить("ПараметрыЗаписиЭтапов", ПараметрыЗаписиЭтапов);
		ОповещениеОЗавершении = Новый ОписаниеОповещения("ЗаписатьЭтапыКлиентПерестроениеFTLЗаказаОтвет", ЭтаФорма, ДопПараметры);
		ТекстВопроса = НСтр("ru = 'Для корректной записи заказа требуется изменить порядок прохождения пунктов в таблице ""Пункты назначения"". Продолжить?'");
		ПоказатьВопрос(ОповещениеОЗавершении, ТекстВопроса, РежимДиалогаВопрос.ОКОтмена);
		ЗакрытьФорму = Ложь;
		Возврат;
	ИначеЕсли ФлагFTLЗаказ Тогда
		ТекстНСтр = НСтр("ru='Невозможно сохранение нелинейной структуры этапов в качестве FTL заказа.';
						 |en='Cannot save non-linear stage stucture as FTL order.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСтр);
		ЗакрытьФорму = Ложь;
		Возврат;
	ИначеЕсли ФлагМультимодальныйЗаказ И ТаблицаЭтапов.Количество() > 0 Тогда
		// Надо сохранить новые пункты отправления и назначения для родительского ММ заказа
		ПараметрыЗаписиЭтапов = Новый Структура("ПунктОтправления, ПунктНазначения");
		ЗаполнитьЗначенияСвойств(ПараметрыЗаписиЭтапов, ДопПараметры);
		ТекстНСтр = НСтр("ru='Пункты отправления и назначения родительского ММ заказа заполнены автоматически и могут нуждаться в изменении.';
						|en='Arrival and departure points of parent order have been determined automaticaly and may need to be changed.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСтр);
	КонецЕсли;
	
	ЗаписатьЭтапыКлиентПослеПроверкиКорректности(ЗадаватьВопросРедакторЦепочкиДокументов, ПараметрыЗаписиЭтапов);
	
КонецПроцедуры

&НаСервере
Функция ЗаписатьЭтапыНаСервере(ПараметрыЗаписиЭтапов = Неопределено)
	
	ДокументыЗаписаныУспешно = Истина;
	
	Если Не ЗначениеЗаполнено(ПараметрыЗаписиЭтапов) Тогда
		ПараметрыЗаписиЭтапов = Новый Структура;
	КонецЕсли;
	
	Если ФлагМультимодальныйЗаказ Тогда
		
		// Создание родительского заказа и/или обновление его реквизитов
		Если Не ЗначениеЗаполнено(ЗаказНаТС) Тогда
			ЗаказОбъект = Документы.уатЗаказГрузоотправителя.СоздатьДокумент();
			ЗаполнитьЗначенияСвойств(ЗаказОбъект, ПрочиеПараметрыЗаказа);
			ЗаказОбъект.ДетализацияЗакрытия = ЗаказДетализацияЗакрытия;
			ЗаказОбъект.Маршрут = ЗаказМаршрут;
			ЗаказОбъект.Мультимодальный = Истина;
			Если ПараметрыЗаписиЭтапов.Свойство("ПунктНазначения") И ЗначениеЗаполнено(ПараметрыЗаписиЭтапов.ПунктНазначения) Тогда
				ЗаказОбъект.АдресНазначения = ПараметрыЗаписиЭтапов.ПунктНазначения;
				ЗаказОбъект.СтоянкаПунктНазначения = уатОбщегоНазначения.ПолучитьВремяСтоянкиПоУмолчанию(ЗаказОбъект.АдресНазначения);
			КонецЕсли;
			Если ПараметрыЗаписиЭтапов.Свойство("ПунктОтправления") И ЗначениеЗаполнено(ПараметрыЗаписиЭтапов.ПунктОтправления) Тогда
				ЗаказОбъект.АдресОтправления = ПараметрыЗаписиЭтапов.ПунктОтправления;
				ЗаказОбъект.СтоянкаПунктОтправления = уатОбщегоНазначения.ПолучитьВремяСтоянкиПоУмолчанию(ЗаказОбъект.АдресОтправления);
			КонецЕсли;
			
			// Временные окна для заказа в целом определяем с учетом плановых дат отправления/прибытия по этапам
			ОтправлениеПлан = Дата("39990101");
			ПрибытиеПлан = Дата("00010101");
			Для Каждого ТекЭтап Из ТаблицаЭтапов Цикл
				Если ЗначениеЗаполнено(ТекЭтап.ОтправлениеПлан) И ЗаказОбъект.АдресНазначения = ТекЭтап.ПунктНазначения Тогда
					ОтправлениеПлан = Мин(ОтправлениеПлан, ТекЭтап.ОтправлениеПлан);
				КонецЕсли;
				Если ЗначениеЗаполнено(ТекЭтап.ПрибытиеПлан) И ЗаказОбъект.АдресОтправления = ТекЭтап.ПунктОтправления Тогда
					ПрибытиеПлан = Макс(ПрибытиеПлан, ТекЭтап.ПрибытиеПлан);
				КонецЕсли;
			КонецЦикла;
			Если ОтправлениеПлан = Дата("39990101") Тогда
				ОтправлениеПлан = Дата("00010101");
			КонецЕсли;
			ПрибытиеПлан = Макс(ОтправлениеПлан, ПрибытиеПлан);
			ЗаказОбъект.УстановитьВременныеОкнаПоУмолчанию(ОтправлениеПлан, ПрибытиеПлан);
		Иначе
			ЗаказОбъект = ЗаказНаТС.ПолучитьОбъект();
			Если ПараметрыЗаписиЭтапов.Свойство("ПунктНазначения") И ЗначениеЗаполнено(ПараметрыЗаписиЭтапов.ПунктНазначения) Тогда
				ЗаказОбъект.АдресНазначения        = ПараметрыЗаписиЭтапов.ПунктНазначения;
				ЗаказОбъект.СтоянкаПунктНазначения = уатОбщегоНазначения.ПолучитьВремяСтоянкиПоУмолчанию(ЗаказОбъект.АдресНазначения);
			КонецЕсли;
			Если ПараметрыЗаписиЭтапов.Свойство("ПунктОтправления") И ЗначениеЗаполнено(ПараметрыЗаписиЭтапов.ПунктОтправления) Тогда
				ЗаказОбъект.АдресОтправления = ПараметрыЗаписиЭтапов.ПунктОтправления;
				ЗаказОбъект.СтоянкаПунктОтправления = уатОбщегоНазначения.ПолучитьВремяСтоянкиПоУмолчанию(ЗаказОбъект.АдресОтправления);
			КонецЕсли;
		КонецЕсли;
		
		// Перезапись грузов в уже созданном заказе - чтобы не было ошибки, если они были изменены из формы заказа.
		// Или просто запись грузов в новом заказе.
		ТаблицаГрузыЗаказа = Неопределено;
		Если ЗаказДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам Тогда
			ТаблицаГрузыЗаказа = ЗаказОбъект.ГрузовойСостав;
		ИначеЕсли ЗаказДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам Тогда
			ТаблицаГрузыЗаказа = ЗаказОбъект.Товары;
		КонецЕсли;
		Если ЗначениеЗаполнено(ТаблицаГрузыЗаказа) Тогда
			ТаблицаГрузыЗаказа.Очистить();
		КонецЕсли;
		Для Каждого ТекСтрокаГруза Из ТаблицаВсеГрузы Цикл
			НоваяСтрокаГруза = ТаблицаГрузыЗаказа.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаГруза, ТекСтрокаГруза);
			Если ЗаказДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам Тогда
				НоваяСтрокаГруза.ГрузовоеМесто = ТекСтрокаГруза.Груз;
				НоваяСтрокаГруза.ВидУпаковки = ТекСтрокаГруза.ЕдиницаИзмерения;
				НоваяСтрокаГруза.КоличествоМест = ТекСтрокаГруза.Количество;
			ИначеЕсли ЗаказДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам Тогда
				НоваяСтрокаГруза.Номенклатура = ТекСтрокаГруза.Груз;
			КонецЕсли;
		КонецЦикла;
		ЗаказОбъект.ВесБрутто = ТаблицаВсеГрузы.Итог("ВесБрутто");
		ЗаказОбъект.Объем = ТаблицаВсеГрузы.Итог("Объем");
		ЗаказОбъект.КоличествоМест = ТаблицаВсеГрузы.Итог("КоличествоМест");
		
		Если ЗаказОбъект.ПроверитьЗаполнение() Тогда
			ЗаказОбъект.Записать(РежимЗаписиДокумента.Проведение);
		ИначеЕсли ЗаказОбъект.Ссылка.Пустая() Или Не ЗаказОбъект.Проведен Тогда
			ЗаказОбъект.Записать(РежимЗаписиДокумента.Запись);
		Иначе
			ДокументыЗаписаныУспешно = Ложь;
		КонецЕсли;
		ЗаказНаТС = ЗаказОбъект.Ссылка;
		
		// Получаем уже созданные этапы
		НаборЗаписей = РегистрыСведений.уатЭтапыМультимодальныхПеревозок_уэ.СоздатьНаборЗаписей();
		НаборЗаписей.Отбор.ЗаказГрузоотправителя.Установить(ЗаказНаТС);
		НаборЗаписей.Прочитать();
		мсвЭтапыДляОтклонения = Новый Массив;
		Для Каждого ТекЗапись Из НаборЗаписей Цикл
			мсвЭтапыДляОтклонения.Добавить(ТекЗапись.Этап);
		КонецЦикла;
		
		// Создаем новые заказы и обновляем данные уже существующих
		Для Каждого ТекЭтап Из ТаблицаЭтапов Цикл
			флНовыйЭтап = Ложь;
			Если Не ЗначениеЗаполнено(ТекЭтап.Заказ) Тогда
				// Создается новый заказ
				флНовыйЭтап = Истина;
				ЭтапОбъект = Документы.уатЗаказГрузоотправителя.СоздатьДокумент();
				
				ЭтапОбъект.Дата                           = ТекущаяДата();
				ЭтапОбъект.Мультимодальный                = Истина;
				ЭтапОбъект.ЭтоЭтап                        = Истина;
				ЭтапОбъект.РодительскийЗаказ              = ЗаказНаТС.Ссылка;
				ЭтапОбъект.ДетализацияЗакрытия            = ЗаказНаТС.ДетализацияЗакрытия;
				ЭтапОбъект.Организация                    = ЗаказНаТС.Организация;
				ЭтапОбъект.Контрагент                     = ЗаказНаТС.Контрагент;
				ЭтапОбъект.ДоговорКонтрагента             = ЗаказНаТС.ДоговорКонтрагента;
				ЭтапОбъект.ВидДоставки                    = ЗаказНаТС.ВидДоставки;
				ЭтапОбъект.ВидПеревозки                   = ЗаказНаТС.ВидПеревозки;
				ЭтапОбъект.ТребованиеКТСТипТС             = ЗаказНаТС.ТребованиеКТСТипТС;
				ЭтапОбъект.ТребованиеКТС                  = ЗаказНаТС.ТребованиеКТС;
				ЭтапОбъект.СтоянкаПунктОтправления        = ЗаказНаТС.СтоянкаПунктОтправления;
				ЭтапОбъект.СтоянкаПунктНазначения         = ЗаказНаТС.СтоянкаПунктНазначения;
				ЭтапОбъект.Грузоотправитель               = ЗаказНаТС.Грузоотправитель;
				ЭтапОбъект.КонтактноеЛицоГрузоотправителя = ЗаказНаТС.КонтактноеЛицоГрузоотправителя;
				ЭтапОбъект.Грузополучатель                = ЗаказНаТС.Грузополучатель;
				ЭтапОбъект.КонтактноеЛицоГрузополучателя  = ЗаказНаТС.КонтактноеЛицоГрузополучателя;
				ЭтапОбъект.ОбъектСтроительства            = ЗаказНаТС.ОбъектСтроительства;
				ЭтапОбъект.НазваниеГруза                  = ЗаказНаТС.НазваниеГруза;
				ЭтапОбъект.ВидОперации                    = ЗаказНаТС.ВидОперации;
				ЭтапОбъект.Подразделение                  = ЗаказНаТС.Подразделение;
				ЭтапОбъект.Ответственный                  = ЗаказНаТС.Ответственный;
				
				ЭтапОбъект.ВалютаДокумента                = ЗаказНаТС.ВалютаДокумента;
				ЭтапОбъект.ВалютаТоваров                  = ЗаказНаТС.ВалютаТоваров;
				ЭтапОбъект.КратностьВзаиморасчетов        = ЗаказНаТС.КратностьВзаиморасчетов;
				ЭтапОбъект.КурсВзаиморасчетов             = ЗаказНаТС.КурсВзаиморасчетов;
				ЭтапОбъект.ДатаКурса                      = ЗаказНаТС.ДатаКурса;
				ЭтапОбъект.УчитыватьНДС                   = ЗаказНаТС.УчитыватьНДС;
				ЭтапОбъект.СуммаВключаетНДС               = ЗаказНаТС.СуммаВключаетНДС;

			Иначе
				// Обновляются данные существующего заказа
				ЭтапОбъект = ТекЭтап.Заказ.ПолучитьОбъект();
				
				ЭлементМассива = мсвЭтапыДляОтклонения.Найти(ТекЭтап.Заказ);
				Если ЭлементМассива <> Неопределено Тогда
					мсвЭтапыДляОтклонения.Удалить(ЭлементМассива);
				КонецЕсли;
			КонецЕсли;
			
			ЭтапОбъект.АдресОтправления = ТекЭтап.ПунктОтправления;
			ЭтапОбъект.АдресНазначения = ТекЭтап.ПунктНазначения;
			Если флНовыйЭтап Тогда
				ЭтапОбъект.УстановитьВременныеОкнаПоУмолчанию(ТекЭтап.ОтправлениеПлан, ТекЭтап.ПрибытиеПлан);
			КонецЕсли;
				
			ЭтапОбъект.Время = ТекЭтап.Время;
			ЭтапОбъект.Расстояние = ТекЭтап.Расстояние;
			ЭтапОбъект.ВесБрутто = ТекЭтап.ВесБрутто;
			ЭтапОбъект.Объем = ТекЭтап.Объем;
			ЭтапОбъект.КоличествоМест = ТекЭтап.КоличествоМест;
			
			ТаблицаГрузыЭтапа = Неопределено;
			Если ЗаказДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам Тогда
				ТаблицаГрузыЭтапа = ЭтапОбъект.ГрузовойСостав;
				НайденныеСтроки = ТаблицаГрузыПоЭтапам.НайтиСтроки(Новый Структура("ЭтапId", ТекЭтап.id));
				
				// Сначала вносим изменения по тем грузам, которые были записаны в документе-этапе
				Сч = ТаблицаГрузыЭтапа.Количество();
				Пока Сч > 0 Цикл
					Сч = Сч-1;
					ТекСтрокаГрузаЭтапа = ТаблицаГрузыЭтапа[Сч];
					ГрузНайден = Ложь;
					СчМассива = НайденныеСтроки.Количество();
					Пока СчМассива > 0 Цикл
						СчМассива = СчМассива-1;
						ТекСтрокаГруза = НайденныеСтроки[СчМассива];
						Если ТекСтрокаГрузаЭтапа.ГрузовоеМесто = ТекСтрокаГруза.Груз Тогда
							ГрузНайден = Истина;
							ТекСтрокаГрузаЭтапа.ВесБрутто = ТекСтрокаГруза.ВесБрутто;
							ТекСтрокаГрузаЭтапа.Объем = ТекСтрокаГруза.Объем;
							ТекСтрокаГрузаЭтапа.КоличествоМест = ТекСтрокаГруза.Количество;
							ТекСтрокаГрузаЭтапа.Стоимость = ТекСтрокаГруза.Стоимость;
							ТекСтрокаГрузаЭтапа.ВесТары = ТекСтрокаГруза.ВесТары;
							НайденныеСтроки.Удалить(СчМассива);
							Прервать;
						КонецЕсли;
					КонецЦикла;
					Если Не ГрузНайден Тогда
						ТаблицаГрузыЭтапа.Удалить(Сч);
					КонецЕсли;
				КонецЦикла;
				
				// Теперь записываем данные по тем грузам, которые добавлены на документ-этап из схемы
				Для Каждого ТекСтрокаГруза Из НайденныеСтроки Цикл
					НоваяСтрокаГруза = ТаблицаГрузыЭтапа.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаГруза, ТекСтрокаГруза);
					НоваяСтрокаГруза.ГрузовоеМесто = ТекСтрокаГруза.Груз;
					НоваяСтрокаГруза.ВидУпаковки = ТекСтрокаГруза.ЕдиницаИзмерения;
					НоваяСтрокаГруза.КоличествоМест = ТекСтрокаГруза.Количество;
				КонецЦикла;
				
			ИначеЕсли ЗаказДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам Тогда
				ТаблицаГрузыЭтапа = ЭтапОбъект.Товары;
				НайденныеСтроки = ТаблицаГрузыПоЭтапам.НайтиСтроки(Новый Структура("ЭтапId", ТекЭтап.id));
				
				// Сначала вносим изменения по тем грузам, которые были записаны в документе-этапе
				Сч = ТаблицаГрузыЭтапа.Количество();
				Пока Сч > 0 Цикл
					Сч = Сч-1;
					ТекСтрокаГрузаЭтапа = ТаблицаГрузыЭтапа[Сч];
					ГрузНайден = Ложь;
					СчМассива = НайденныеСтроки.Количество();
					Пока СчМассива > 0 Цикл
						СчМассива = СчМассива-1;
						ТекСтрокаГруза = НайденныеСтроки[СчМассива]; 
						Если ТекСтрокаГрузаЭтапа.Номенклатура = ТекСтрокаГруза.Груз Тогда
							ГрузНайден = Истина;
							ТекСтрокаГрузаЭтапа.ВесБрутто = ТекСтрокаГруза.ВесБрутто;
							ТекСтрокаГрузаЭтапа.Объем = ТекСтрокаГруза.Объем;
							ТекСтрокаГрузаЭтапа.Количество = ТекСтрокаГруза.Количество;
							ТекСтрокаГрузаЭтапа.КоличествоМест = ТекСтрокаГруза.КоличествоМест;
							ТекСтрокаГрузаЭтапа.Сумма = ТекСтрокаГруза.Сумма;
							ТекСтрокаГрузаЭтапа.СуммаНДС = ТекСтрокаГруза.СуммаНДС;
							ТекСтрокаГрузаЭтапа.ВесТары = ТекСтрокаГруза.ВесТары;
							НайденныеСтроки.Удалить(СчМассива);
						КонецЕсли;
					КонецЦикла;
					Если Не ГрузНайден Тогда
						ТаблицаГрузыЭтапа.Удалить(Сч);
					КонецЕсли;
				КонецЦикла;
				
				// Теперь записываем данные по тем грузам, которые добавлены на документ-этап из схемы
				Для Каждого ТекСтрокаГруза Из НайденныеСтроки Цикл
					НоваяСтрокаГруза = ТаблицаГрузыЭтапа.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрокаГруза, ТекСтрокаГруза);
					НоваяСтрокаГруза.Номенклатура = ТекСтрокаГруза.Груз;
				КонецЦикла;
			ИначеЕсли ЗаказДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам Тогда
				ЭтапОбъект.ГрузовойСостав.Очистить();
				Для Каждого ТекГруз Из ЗаказНаТС.ГрузовойСостав Цикл 
					НовГруз = ЭтапОбъект.ГрузовойСостав.Добавить();
					ЗаполнитьЗначенияСвойств(НовГруз, ТекГруз);
				КонецЦикла;
				ЭтапОбъект.Товары.Очистить();
				Для Каждого ТекТовар Из ЗаказНаТС.Товары Цикл 
					НовТовар = ЭтапОбъект.Товары.Добавить();
					ЗаполнитьЗначенияСвойств(НовТовар, ТекТовар);
				КонецЦикла;
				
			КонецЕсли;
			
			Если ЭтапОбъект.ПроверитьЗаполнение() Тогда
				ЭтапОбъект.Записать(РежимЗаписиДокумента.Проведение);
			ИначеЕсли ЭтапОбъект.Ссылка.Пустая() Или Не ЭтапОбъект.Проведен Тогда
				ЭтапОбъект.Записать(РежимЗаписиДокумента.Запись);
			Иначе
				ДокументыЗаписаныУспешно = Ложь;
			КонецЕсли;
			ТекЭтап.Заказ = ЭтапОбъект.Ссылка;
		КонецЦикла;
		
		// Обновляем данные регистра сведений уатЭтапыМультимодальныхПеревозок_уэ
		Для Каждого ТекЭтап Из ТаблицаЭтапов Цикл
			
			НаборЗаписей = РегистрыСведений.уатЭтапыМультимодальныхПеревозок_уэ.СоздатьНаборЗаписей();
			НаборЗаписей.Отбор.ЗаказГрузоотправителя.Установить(ЗаказНаТС);
			НаборЗаписей.Отбор.Этап.Установить(ТекЭтап.Заказ);
			НаборЗаписей.Прочитать();
			
			Если НаборЗаписей.Количество() Тогда 
				НаборЗаписей[0].НомерЭтапа          = ТаблицаЭтапов.Индекс(ТекЭтап) + 1;
				НаборЗаписей[0].ДатаОтправленияПлан = ТекЭтап.ОтправлениеПлан;
				НаборЗаписей[0].ДатаПрибытияПлан    = ТекЭтап.ПрибытиеПлан;
				
				// Запись координат на схеме для точек отправления и назначения каждого заказа
				СтруктураПоиска = Новый Структура("Пункт", ТекЭтап.ПунктОтправления);
				НайденныеСтроки = ТаблицаПунктов.НайтиСтроки(СтруктураПоиска);
				Если НайденныеСтроки.Количество() > 0 Тогда
					НаборЗаписей[0].xПунктаОтправления = НайденныеСтроки[0].x;
					НаборЗаписей[0].yПунктаОтправления = НайденныеСтроки[0].y;
				КонецЕсли;
				СтруктураПоиска.Пункт = ТекЭтап.ПунктНазначения;
				НайденныеСтроки = ТаблицаПунктов.НайтиСтроки(СтруктураПоиска);
				Если НайденныеСтроки.Количество() > 0 Тогда
					НаборЗаписей[0].xПунктаНазначения = НайденныеСтроки[0].x;
					НаборЗаписей[0].yПунктаНазначения = НайденныеСтроки[0].y;
				КонецЕсли;
				
				НаборЗаписей.Записать(Истина);
			КонецЕсли;
			
		КонецЦикла;
		
		// Отклоняем все существующие этапы, которых нет на схеме.
		Для Каждого ОтклоняемыйЭтап Из мсвЭтапыДляОтклонения Цикл
			Документы.уатЗаказГрузоотправителя.УстановитьСтатусЗаказа(ОтклоняемыйЭтап, Справочники.уатСтатусы_уэ.Отклонен);
		КонецЦикла;
		
	ИначеЕсли ФлагFTLЗаказ Тогда
		
		Если ЗначениеЗаполнено(ЗаказНаТС) Тогда
			ЗаказОбъект = ЗаказНаТС.ПолучитьОбъект();
		Иначе
			ЗаказОбъект = Документы.уатЗаказГрузоотправителя.СоздатьДокумент();
			ЗаполнитьЗначенияСвойств(ЗаказОбъект, ПрочиеПараметрыЗаказа);
			ЗаказОбъект.ДетализацияЗакрытия = ЗаказДетализацияЗакрытия;
			ЗаказОбъект.Маршрут = ЗаказМаршрут;
			ЗаказОбъект.Дата = ТекущаяДата();
			ЗаказОбъект.FTL = Истина;
		КонецЕсли;
		
		ЗаказОбъект.НеОткрыватьРедакторЦепочкиДокументов = НеОткрыватьРедакторЦепочкиДокументов;
		
		Если ТаблицаЭтапов.Количество() <> 0  Тогда
			ЗаказОбъект.СтоянкаПунктОтправления  = ТаблицаПунктов[0].Стоянка;
			ЗаказОбъект.СтоянкаПунктНазначения   = ТаблицаПунктов[ТаблицаПунктов.Количество()-1].Стоянка;
		КонецЕсли;

		// Перезапись грузов в уже созданном заказе - чтобы не было ошибки, если они были изменены.
		// Или просто запись грузов в новом заказе.
		ТаблицаГрузыЗаказа = Неопределено;
		Если ЗаказДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам Тогда
			ТаблицаГрузыЗаказа = ЗаказОбъект.ГрузовойСостав;
		ИначеЕсли ЗаказДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам Тогда
			ТаблицаГрузыЗаказа = ЗаказОбъект.Товары;
		КонецЕсли;
		Если ЗначениеЗаполнено(ТаблицаГрузыЗаказа) Тогда
			ТаблицаГрузыЗаказа.Очистить();
		КонецЕсли;
		Для Каждого ТекСтрокаГруза Из ТаблицаВсеГрузы Цикл
			НоваяСтрокаГруза = ТаблицаГрузыЗаказа.Добавить();
			ЗаполнитьЗначенияСвойств(НоваяСтрокаГруза, ТекСтрокаГруза);
			Если ЗаказДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоГрузовымМестам Тогда
				НоваяСтрокаГруза.ГрузовоеМесто = ТекСтрокаГруза.Груз;
				НоваяСтрокаГруза.ВидУпаковки = ТекСтрокаГруза.ЕдиницаИзмерения;
				НоваяСтрокаГруза.КоличествоМест = ТекСтрокаГруза.Количество;
			ИначеЕсли ЗаказДетализацияЗакрытия = Перечисления.уатДетализацияЗаказаГрузоотправителя_уэ.ПоТоварам Тогда
				НоваяСтрокаГруза.Номенклатура = ТекСтрокаГруза.Груз;
			КонецЕсли;
		КонецЦикла;
		
		// Обновление итоговых показателей
		ЗаказОбъект.Время = ЗаказВремя;
		ЗаказОбъект.Расстояние = ТаблицаПунктов.Итог("Расстояние");
		ЗаказОбъект.ВесБрутто = ТаблицаВсеГрузы.Итог("ВесБрутто");
		ЗаказОбъект.Объем = ТаблицаВсеГрузы.Итог("Объем");
		ЗаказОбъект.КоличествоМест = ТаблицаВсеГрузы.Итог("КоличествоМест");
				
		// Запись ТЧ ПромежуточныеПункты в заказе
		ЗаказОбъект.ПромежуточныеПункты.Очистить();
		Сч = 0;
		Для Каждого ТекСтрока Из ТаблицаЭтапов Цикл
			Если Сч = 0 Тогда
				СтруктураПоиска = Новый Структура("Пункт, id", ТекСтрока.ПунктОтправления, ТекСтрока.ПунктОтправленияId);
				НайденныеСтроки = ТаблицаПунктов.НайтиСтроки(СтруктураПоиска);
				Если НайденныеСтроки.Количество() > 0 Тогда
					НоваяСтрока = ЗаказОбъект.ПромежуточныеПункты.Добавить();
					ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденныеСтроки[0]);
					НоваяСтрока.ТипТочкиМаршрута = НайденныеСтроки[0].Операция;
					ЗаказОбъект.АдресОтправления = ТекСтрока.ПунктОтправления;
					// Координаты точки обнуляются для того, чтобы при повторном ее использовании точка не сливалась на схеме со своей копией
					НайденныеСтроки[0].x = 0;
					НайденныеСтроки[0].y = 0;
				КонецЕсли;
			КонецЕсли;
			
			СтруктураПоиска = Новый Структура("Пункт, id", ТекСтрока.ПунктНазначения, ТекСтрока.ПунктНазначенияId);
			НайденныеСтроки = ТаблицаПунктов.НайтиСтроки(СтруктураПоиска);
			Если НайденныеСтроки.Количество() > 0 Тогда
				НоваяСтрока = ЗаказОбъект.ПромежуточныеПункты.Добавить();
				ЗаполнитьЗначенияСвойств(НоваяСтрока, НайденныеСтроки[0]);
				НоваяСтрока.ТипТочкиМаршрута = НайденныеСтроки[0].Операция;
				Если Сч = ТаблицаЭтапов.Количество()-1 Тогда
					ЗаказОбъект.АдресНазначения = ТекСтрока.ПунктНазначения;
				КонецЕсли;
				// Координаты точки обнуляются для того, чтобы при повторном ее использовании точка не сливалась на схеме со своей копией
				НайденныеСтроки[0].x = 0;
				НайденныеСтроки[0].y = 0;
			КонецЕсли;
			Сч = Сч+1;
		КонецЦикла;
		
		// Добавляем распределение грузов по отрезкам пути
		ЗаказОбъект.ОтрезкиПути.Очистить();
		СоответствиеГрузов = Новый Соответствие;
		Для Сч = 0 По ТаблицаВсеГрузы.Количество()-1 Цикл
			СоответствиеГрузов.Вставить(ТаблицаВсеГрузы[Сч].idГруза, Сч+1);
		КонецЦикла;
		Для Сч = 0 По ТаблицаЭтапов.Количество()-1 Цикл
			НайденныеСтроки = ТаблицаГрузыПоЭтапам.НайтиСтроки(Новый Структура("ЭтапId", ТаблицаЭтапов[Сч].id));
			Для Каждого ТекСтрока Из НайденныеСтроки Цикл
				Если СоответствиеГрузов[ТекСтрока.idГруза] = Неопределено Тогда
					// Груз, удаленнеый из таблицы грузов по заказу
					Продолжить;
				КонецЕсли;
				НоваяСтрока = ЗаказОбъект.ОтрезкиПути.Добавить();
				НоваяСтрока.id = ТаблицаЭтапов[Сч].id;
				НоваяСтрока.Груз = СоответствиеГрузов[ТекСтрока.idГруза];
				НоваяСтрока.ПунктОтправления = Сч+1;
				НоваяСтрока.ПунктНазначения = Сч+2;
			КонецЦикла;
		КонецЦикла;
		
		// Запись документа
		Если ЗаказОбъект.ПроверитьЗаполнение() Тогда
			ЗаказОбъект.Записать(РежимЗаписиДокумента.Проведение);
		ИначеЕсли ЗаказОбъект.Ссылка.Пустая() Или Не ЗаказОбъект.Проведен Тогда
			ЗаказОбъект.Записать(РежимЗаписиДокумента.Запись);
		Иначе
			ДокументыЗаписаныУспешно = Ложь;
		КонецЕсли;
		ЗаказНаТС = ЗаказОбъект.Ссылка;
		
	КонецЕсли;
	
	Возврат ДокументыЗаписаныУспешно;
	
КонецФункции

&НаКлиенте
Процедура ОбновитьГрузыПоТекущемуЭтапу()
	СтруктураОтбораЭтапов = Новый ФиксированнаяСтруктура("ЭтапId", idТекущегоЭтапа);
	Элементы.ТаблицаГрузыПоЭтапам.ОтборСтрок = СтруктураОтбораЭтапов;
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПоказателиТекущегоЭтапа()
	ОбновитьПоказателиЭтапа(idТекущегоЭтапа);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПоказателиЭтапа(idЭтапа = Неопределено)
	
	Если Не ЗначениеЗаполнено(idЭтапа) Тогда
		idЭтапа = idТекущегоЭтапа;
	КонецЕсли;
	
	НайденныеСтроки = ТаблицаЭтапов.НайтиСтроки(Новый Структура("id", idЭтапа));
	Если НайденныеСтроки.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	ТекЭтап = НайденныеСтроки[0];
	
	Если ЗаказДетализацияЗакрытия = ПредопределенноеЗначение("Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам") Тогда
		ВесБрутто = ЗаказВесБрутто;
		Объем = ЗаказОбъем;
		КоличествоМест = ЗаказКоличествоМест;
	Иначе
		ВесБрутто = 0;
		Объем = 0;
		КоличествоМест = 0;
		НайденныеСтроки = ТаблицаГрузыПоЭтапам.НайтиСтроки(Новый Структура("ЭтапId", idЭтапа));
		Для Каждого ТекСтрока Из НайденныеСтроки Цикл
			ВесБрутто = ВесБрутто + ТекСтрока.ВесБрутто;
			Объем = Объем + ТекСтрока.Объем;
			КоличествоМест = КоличествоМест + ТекСтрока.КоличествоМест;
		КонецЦикла;
	КонецЕсли;
		
	// Обновляем данные в таблице
	ТекЭтап.ВесБрутто = ВесБрутто;
	ТекЭтап.Объем = Объем;
	ТекЭтап.КоличествоМест = КоличествоМест;
	
	// Передаем обновленные данные в скрипт
	ОбновитьЭтапВСхеме(ТекЭтап);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьПоказателиВсехЭтапов(ПередаватьДанныеВСхему = Истина)
	
	Для Каждого ТекСтрока Из ТаблицаЭтапов Цикл
		Если ЗаказДетализацияЗакрытия = ПредопределенноеЗначение("Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам") Тогда
			ТекСтрока.ВесБрутто = ЗаказВесБрутто;
			ТекСтрока.Объем = ЗаказОбъем;
			ТекСтрока.КоличествоМест = ЗаказКоличествоМест;
		Иначе
			ТекСтрока.ВесБрутто = 0;
			ТекСтрока.Объем = 0;
			ТекСтрока.КоличествоМест = 0;
			
			НайденныеСтроки = ТаблицаГрузыПоЭтапам.НайтиСтроки(Новый Структура("ЭтапId", ТекСтрока.id));
			Для Каждого НайденнаяСтрока Из НайденныеСтроки Цикл
				ТекСтрока.ВесБрутто = ТекСтрока.ВесБрутто + НайденнаяСтрока.ВесБрутто;
				ТекСтрока.Объем = ТекСтрока.Объем + НайденнаяСтрока.Объем;
				ТекСтрока.КоличествоМест = ТекСтрока.КоличествоМест + НайденнаяСтрока.КоличествоМест;
			КонецЦикла;
		КонецЕсли
	КонецЦикла;
	
	Если ПередаватьДанныеВСхему 
		И (СтруктураНастроек.ЭтапВес Или СтруктураНастроек.ЭтапОбъем Или СтруктураНастроек.ЭтапУпаковки) Тогда
		ОбновитьВсеЭтапыВСхеме();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьЭтапВСхеме(ДанныеЭтапа)
	ДанныеДляПередачи = Новый Структура("id, from, to, label");
	ДанныеДляПередачи.id       = ДанныеЭтапа.id;
	ДанныеДляПередачи.from     = ДанныеЭтапа.ПунктОтправленияId;
	ДанныеДляПередачи.to       = ДанныеЭтапа.ПунктНазначенияId;
	ДанныеДляПередачи.label    = ПолучитьНадписьЭтапа(ДанныеЭтапа);
	СформироватьСтрокуДляПередачиВСхему(ДанныеДляПередачи);
	HTMLobj = Элементы.MapHTML.Документ.defaultView;
	HTMLobj.evalEdge(ДанныеВСхему);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВсеЭтапыВСхеме()
	
	Если ТаблицаЭтапов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеЭтапов = Новый Массив(ТаблицаЭтапов.Количество());
	Сч = 0;
	Для Каждого ТекСтрокаЭтапа Из ТаблицаЭтапов Цикл
		ДанныеЭтапа = Новый Структура("id, from, to, label");
		ДанныеЭтапа.id       = ТекСтрокаЭтапа.id;
		ДанныеЭтапа.from     = ТекСтрокаЭтапа.ПунктОтправленияId;
		ДанныеЭтапа.to       = ТекСтрокаЭтапа.ПунктНазначенияId;
		ДанныеЭтапа.label    = ПолучитьНадписьЭтапа(ТекСтрокаЭтапа);
		ДанныеЭтапов[Сч] = ДанныеЭтапа;
		Сч = Сч+1;
	КонецЦикла;
	ДанныеДляПередачи = Новый Структура("edges", ДанныеЭтапов);
	СформироватьСтрокуДляПередачиВСхему(ДанныеДляПередачи);
	HTMLobj = Элементы.MapHTML.Документ.defaultView;
	HTMLobj.evalMultipleEdges(ДанныеВСхему);
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьВсеПунктыВСхеме()
	
	Если ТаблицаПунктов.Количество() = 0 Тогда
		Возврат;
	КонецЕсли;
	
	ДанныеПунктов = Новый Массив();
	Для Каждого ТекСтрокаПункта Из ТаблицаПунктов Цикл
		Если Не ЗначениеЗаполнено(ТекСтрокаПункта.Пункт) Тогда
			Продолжить;
		КонецЕсли;
		ДанныеПункта = Новый Структура("id, type, label");
		ДанныеПункта.id       = ТекСтрокаПункта.id;
		ДанныеПункта.type     = ТекСтрокаПункта.type;
		ДанныеПункта.label    = ПолучитьНадписьПункта(ТекСтрокаПункта);
		ДанныеПунктов.Добавить(ДанныеПункта);
	КонецЦикла;
	ДанныеДляПередачи = Новый Структура("points", ДанныеПунктов);
	СформироватьСтрокуДляПередачиВСхему(ДанныеДляПередачи);
	HTMLobj = Элементы.MapHTML.Документ.defaultView;
	HTMLobj.evalMultiplePoints(ДанныеВСхему);
	
КонецПроцедуры

&НаКлиенте
Функция ПроверитьКорректностьЭтапов(ДопПараметры)
	
	флДанныеКорректны = Истина;
	
	Если ФлагFTLЗаказ Тогда
		// Проверяем, что этапы в таблице этапов идут последовательно.
		// Этапы уже были отсортированы согласно порядку пунктов.
		Для Сч = 0 По ТаблицаЭтапов.Количество()-2 Цикл 
			ТекСтрока  = ТаблицаЭтапов[Сч];
			СледСтрока = ТаблицаЭтапов[Сч+1];
			Если Не ТекСтрока.ПунктНазначения = СледСтрока.ПунктОтправления Тогда 
				флДанныеКорректны = Ложь;
				Прервать;
			КонецЕсли;
		КонецЦикла;
		
		// Попытка изменения порядка пунктов для соответствия имеющимся этапам
		Если Не флДанныеКорректны Тогда
			
			ЧастотыПунктов.Очистить();
			Для Каждого ТекСтрока Из ТаблицаЭтапов Цикл
				НайденныеСтроки = ЧастотыПунктов.НайтиСтроки(Новый Структура("ИдентификаторПункта", ТекСтрока.ПунктОтправленияId));
				Если НайденныеСтроки.Количество() > 0 Тогда
					СтрокаТаблицыЧастот = НайденныеСтроки[0];
				Иначе
					СтрокаТаблицыЧастот = ЧастотыПунктов.Добавить();
					СтрокаТаблицыЧастот.ИдентификаторПункта   = ТекСтрока.ПунктОтправленияId;
					СтрокаТаблицыЧастот.Пункт                 = ТекСтрока.ПунктОтправления;
					СтрокаТаблицыЧастот.КоличествоОтправлений = 0;
					СтрокаТаблицыЧастот.КоличествоПрибытий    = 0;
				КонецЕсли;
				СтрокаТаблицыЧастот.КоличествоОтправлений = СтрокаТаблицыЧастот.КоличествоОтправлений + 1;
				
				НайденныеСтроки = ЧастотыПунктов.НайтиСтроки(Новый Структура("ИдентификаторПункта", ТекСтрока.ПунктНазначенияId));
				Если НайденныеСтроки.Количество() > 0 Тогда
					СтрокаТаблицыЧастот = НайденныеСтроки[0];
				Иначе
					СтрокаТаблицыЧастот = ЧастотыПунктов.Добавить();
					СтрокаТаблицыЧастот.ИдентификаторПункта   = ТекСтрока.ПунктНазначенияId;
					СтрокаТаблицыЧастот.Пункт                 = ТекСтрока.ПунктНазначения;
					СтрокаТаблицыЧастот.КоличествоОтправлений = 0;
					СтрокаТаблицыЧастот.КоличествоПрибытий    = 0;
				КонецЕсли;
				СтрокаТаблицыЧастот.КоличествоПрибытий = СтрокаТаблицыЧастот.КоличествоПрибытий + 1;
			КонецЦикла;
			
			// Анализ таблицы частот. Так как FTL маршруты линейны,
			// то должен быть ровно 1 пункт с 0 отправлений (конечный пункт) и ровно 1 пункт с 0 прибытий (начальный пункт).
			// Для всех остальных пунктов должно быть 1 отправление и 1 прибытие.
			флПерестроениеВозможно = Истина;
			ИдентификаторПунктаОтправления = Неопределено;
			ИдентификаторПунктаПрибытия = Неопределено;
			Для Каждого ТекСтрока Из ЧастотыПунктов Цикл
				Если ТекСтрока.КоличествоОтправлений = 1 И ТекСтрока.КоличествоПрибытий = 1 Тогда
					// Это корректный промежуточный пункт, ничего делать не надо
				ИначеЕсли ТекСтрока.КоличествоОтправлений = 0 И ТекСтрока.КоличествоПрибытий = 1
					И Не ЗначениеЗаполнено(ИдентификаторПунктаПрибытия) Тогда
					ИдентификаторПунктаПрибытия = ТекСтрока.ИдентификаторПункта;
				ИначеЕсли ТекСтрока.КоличествоОтправлений = 1 И ТекСтрока.КоличествоПрибытий = 0
					И Не ЗначениеЗаполнено(ИдентификаторПунктаОтправления) Тогда
					ИдентификаторПунктаОтправления = ТекСтрока.ИдентификаторПункта;
				Иначе
					// Нелинейный маршрут
					флПерестроениеВозможно = Ложь;
					Прервать;
				КонецЕсли;
			КонецЦикла;
			
			флПерестроениеВозможно = флПерестроениеВозможно
				И ЗначениеЗаполнено(ИдентификаторПунктаОтправления)
				И ЗначениеЗаполнено(ИдентификаторПунктаПрибытия);
			
			// Переупорядочиваем пункты в таблице пунктов так, чтобы они соответствовали существующим этапам.
			Если флПерестроениеВозможно Тогда
				ПоследовательностьПунктов = Новый Массив;
				ТекущийИдентификаторПункта = ИдентификаторПунктаОтправления;
				ПоследовательностьПунктов.Добавить(ТекущийИдентификаторПункта);
				Пока ТекущийИдентификаторПункта <> ИдентификаторПунктаПрибытия
					И ПоследовательностьПунктов.Количество() < ТаблицаПунктов.Количество() Цикл
					НайденныеСтроки = ТаблицаЭтапов.НайтиСтроки(Новый Структура("ПунктОтправленияId", ТекущийИдентификаторПункта));
					Если НайденныеСтроки.Количество() = 1 Тогда
						ТекущийИдентификаторПункта = НайденныеСтроки[0].ПунктНазначенияId;
						ПоследовательностьПунктов.Добавить(ТекущийИдентификаторПункта);
					Иначе
						// Не найден следующий пункт.
						Прервать;
					КонецЕсли;
				КонецЦикла;
				
				Если ПоследовательностьПунктов.Количество() = ТаблицаПунктов.Количество() Тогда
					ДопПараметры.Вставить("КорректнаяПоследовательностьПунктов", ПоследовательностьПунктов);
				КонецЕсли;
			КонецЕсли;
			
		КонецЕсли;
		
	ИначеЕсли ФлагМультимодальныйЗаказ Тогда
		// Для мультимодального заказа делаем более сложную проверку - определяем количество начальных и конечных пунктов.
		// Если их не ровно по 1, то невозможно определить пункты отправления и назначения автоматически.
		мсвНачальныеПункты = Новый Массив;
		мсвКонечныеПункты = Новый Массив;
		Для Каждого ТекСтрока Из ТаблицаЭтапов Цикл
			Если мсвНачальныеПункты.Найти(ТекСтрока.ПунктОтправления) = Неопределено Тогда
				мсвНачальныеПункты.Добавить(ТекСтрока.ПунктОтправления);
			КонецЕсли;
			Если мсвКонечныеПункты.Найти(ТекСтрока.ПунктНазначения) = Неопределено Тогда
				мсвКонечныеПункты.Добавить(ТекСтрока.ПунктНазначения);
			КонецЕсли;
		КонецЦикла;
		
		Для Каждого ТекСтрока Из ТаблицаЭтапов Цикл
			
			ИндексПункта = мсвНачальныеПункты.Найти(ТекСтрока.ПунктНазначения);
			Если ИндексПункта <> Неопределено Тогда
				мсвНачальныеПункты.Удалить(ИндексПункта);
			КонецЕсли;
			
			ИндексПункта = мсвКонечныеПункты.Найти(ТекСтрока.ПунктОтправления);
			Если ИндексПункта <> Неопределено Тогда
				мсвКонечныеПункты.Удалить(ИндексПункта);
			КонецЕсли;
			
		КонецЦикла;
		
		Если мсвНачальныеПункты.Количество() = 1 Тогда
			// Пункт отправления определяется однозначно
			ДопПараметры.Вставить("ПунктОтправления", мсвНачальныеПункты[0]);
		ИначеЕсли ДопПараметры.Свойство("ПунктОтправления") И мсвНачальныеПункты.Найти(ДопПараметры.ПунктОтправления) <> Неопределено Тогда
			// Ничего делать не нужно. Один из допустимых пунктов отправления уже указан в заказе
		ИначеЕсли мсвНачальныеПункты.Количество() > 0 Тогда
			// Пункт отправления выбирается произвольным образом
			ДопПараметры.Вставить("ПунктОтправления", мсвНачальныеПункты[0]);
			флДанныеКорректны = Ложь;
		Иначе
			// Пункт отправления не получается определить автоматически
			ДопПараметры.Вставить("ПунктОтправления", Неопределено);
			флДанныеКорректны = Ложь;
		КонецЕсли;
		
		Если мсвКонечныеПункты.Количество() = 1 Тогда
			// Пункт назначения определяется однозначно
			ДопПараметры.Вставить("ПунктНазначения", мсвКонечныеПункты[0]);
			ИначеЕсли ДопПараметры.Свойство("ПунктНазначения") И мсвКонечныеПункты.Найти(ДопПараметры.ПунктНазначения) <> Неопределено Тогда
			// Ничего делать не нужно. Один из допустимых пунктов назначения уже указан в заказе
		ИначеЕсли мсвКонечныеПункты.Количество() > 0 Тогда
			// Пункт назначения выбирается произвольным образом
			ДопПараметры.Вставить("ПунктНазначения", мсвКонечныеПункты[0]);
			флДанныеКорректны = Ложь;
		Иначе
			// Пункт назначения не получается определить автоматически
			ДопПараметры.Вставить("ПунктНазначения", Неопределено);
			флДанныеКорректны = Ложь;
		КонецЕсли;
		
	КонецЕсли;
	
	Возврат флДанныеКорректны;
	
КонецФункции

&НаКлиенте
Процедура ДобавитьГрузНаЭтап(ТекСтрокаГруза, idЭтапа = Неопределено)
	Если Не ЗначениеЗаполнено(idЭтапа) Тогда
		idЭтапа = idТекущегоЭтапа;
	КонецЕсли;
	
	ПараметрыПоиска = Новый Структура("ЭтапId, Груз, idГруза", idЭтапа, ТекСтрокаГруза.Груз, ТекСтрокаГруза.idГруза);
	НайденныеСтроки = ТаблицаГрузыПоЭтапам.НайтиСтроки(ПараметрыПоиска);
	Если НайденныеСтроки.Количество() > 0 Тогда
		НайденныеСтроки[0].Количество     = НайденныеСтроки[0].Количество     + ТекСтрокаГруза.Количество;
		НайденныеСтроки[0].ВесБрутто      = НайденныеСтроки[0].ВесБрутто      + ТекСтрокаГруза.ВесБрутто;
		НайденныеСтроки[0].Объем          = НайденныеСтроки[0].Объем          + ТекСтрокаГруза.Объем;
		НайденныеСтроки[0].КоличествоМест = НайденныеСтроки[0].КоличествоМест + ТекСтрокаГруза.КоличествоМест;
		
		НайденныеСтроки[0].Стоимость      = НайденныеСтроки[0].Стоимость      + ТекСтрокаГруза.Стоимость;
		НайденныеСтроки[0].ВесТары        = НайденныеСтроки[0].ВесТары        + ТекСтрокаГруза.ВесТары;
		НайденныеСтроки[0].Сумма          = НайденныеСтроки[0].Сумма          + ТекСтрокаГруза.Сумма;
		НайденныеСтроки[0].СуммаНДС       = НайденныеСтроки[0].СуммаНДС       + ТекСтрокаГруза.СуммаНДС;
	Иначе
		НоваяСтрока = ТаблицаГрузыПоЭтапам.Добавить();
		ЗаполнитьЗначенияСвойств(НоваяСтрока, ТекСтрокаГруза);
		НоваяСтрока.ЭтапId = idЭтапа;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьГрузСоВсехЭтапов(ТекСтрокаГруза)
	Сч = ТаблицаГрузыПоЭтапам.Количество();
	Пока Сч > 0 Цикл
		Сч = Сч-1;
		Если ТекСтрокаГруза.Груз = ТаблицаГрузыПоЭтапам[Сч].Груз
			И ТекСтрокаГруза.idГруза = ТаблицаГрузыПоЭтапам[Сч].idГруза Тогда
			ТаблицаГрузыПоЭтапам.Удалить(Сч);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПолучитьТипПункта(Пункт, Операция = Неопределено)
	
	Если Операция = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.ПромежуточныйПункт") Тогда
		ТипПункта = "point";
		Возврат ТипПункта;
	КонецЕсли;
	
	Если Пункт.Гараж Тогда
		ТипПункта = "garage";
	Иначе
		ТипПункта = "door";
	КонецЕсли;
	// если склад, то 
	// ТипПункта = "warehouse"
	
	Если Операция = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Погрузка")
		Или Операция = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.ДополнительнаяПогрузка") Тогда
		ТипПункта = ТипПункта + "_load";
	ИначеЕсли Операция = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Разгрузка")
		Или Операция = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.ДополнительнаяРазгрузка") Тогда
		ТипПункта = ТипПункта + "_unload";
	КонецЕсли;
	
	Возврат ТипПункта;
	
КонецФункции

&НаСервере
Процедура ЗаполнитьТипыВсехПунктов()
	Для Каждого ТекСтрока Из ТаблицаПунктов Цикл
		ТекСтрока.type = ПолучитьТипПункта(ТекСтрока.Пункт, ТекСтрока.Операция);
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура УдалитьГрузыПоЭтапу(ЭтапId)
	Сч = ТаблицаГрузыПоЭтапам.Количество();
	Пока Сч > 0 Цикл
		Сч = Сч-1;
		Если ТаблицаГрузыПоЭтапам[Сч].ЭтапId = ЭтапId Тогда
			ТаблицаГрузыПоЭтапам.Удалить(Сч);
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПересчитатьВремяРасстояниеМеждуПунктами()
	
	флВремяИспользуетсяВНадписях = СтруктураНастроек.ПунктДатаОтправления 
		Или СтруктураНастроек.ПунктДатаПрибытия
		Или СтруктураНастроек.ЭтапВремяВПути
		Или СтруктураНастроек.ЭтапДлительность;
	
	Если ФлагFTLЗаказ И флВремяИспользуетсяВНадписях Тогда
		
		мсвСтароеВремя = Новый Массив;
		Для Каждого ТекСтрока Из ТаблицаПунктов Цикл
			СтруктураВремя = Новый Структура("ПрибытиеПлан, УбытиеПлан", ТекСтрока.ПрибытиеПлан, ТекСтрока.УбытиеПлан);
			мсвСтароеВремя.Добавить(СтруктураВремя);
		КонецЦикла;
		
		ПересчитатьВремяРасстояниеМеждуПунктамиСервер();
		
		// Определяем, для каких пунктов изменились даты прибытия / убытия, чтобы для них сформировать новые надписи и передать их в скрипт
		ДанныеПунктов = Новый Массив;
		Для Сч = 0 По мсвСтароеВремя.Количество()-1 Цикл
			Если (СтруктураНастроек.ПунктДатаПрибытия И мсвСтароеВремя[Сч].ПрибытиеПлан <> ТаблицаПунктов[Сч].ПрибытиеПлан)
				Или (СтруктураНастроек.ПунктДатаОтправления И мсвСтароеВремя[Сч].УбытиеПлан <> ТаблицаПунктов[Сч].УбытиеПлан) Тогда
				
				ДанныеПункта       = Новый Структура("id, label, type");
				ДанныеПункта.id    = ТаблицаПунктов[Сч].id;
				ДанныеПункта.label = ПолучитьНадписьПункта(ТаблицаПунктов[Сч]);
				ДанныеПункта.type  = ТаблицаПунктов[Сч].type;
				ДанныеПунктов.Добавить(ДанныеПункта);
				
			КонецЕсли;
		КонецЦикла;
		
		Если ДанныеПунктов.Количество() > 0 Тогда
			ДанныеДляПередачи = Новый Структура("points", ДанныеПунктов);
			СформироватьСтрокуДляПередачиВСхему(ДанныеДляПередачи);
			HTMLobj = Элементы.MapHTML.Документ.defaultView;
			HTMLobj.evalMultiplePoints(ДанныеВСхему);
		КонецЕсли;
		
		// Обновление надписей на отрезках пути
		Если СтруктураНастроек.ЭтапВремяВПути Или СтруктураНастроек.ЭтапДлительность Тогда
			ОбновитьВсеЭтапыВСхеме();
		КонецЕсли;
		
	Иначе
		
		ПересчитатьВремяРасстояниеМеждуПунктамиСервер();
		
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура ПересчитатьВремяРасстояниеМеждуПунктамиСервер()
	
	мсвПункты = Новый Массив();
	Если ЗначениеЗаполнено(ЗаказНаТС) Тогда
		ОтправлениеС = ЗаказНаТС.ОтправлениеС;
	Иначе
		ОтправлениеС = НачалоДня(ТекущаяДата());
	КонецЕсли;
	ВремяОтправления = ОтправлениеС - НачалоДня(ОтправлениеС);
	
	Для Сч = 0 По ТаблицаПунктов.Количество()-2 Цикл 
		Пункт1 = ТаблицаПунктов[Сч].Пункт;
		Пункт2 = ТаблицаПунктов[(Сч+1)].Пункт;
		
		Если Не ЗначениеЗаполнено(Пункт1) Или Не ЗначениеЗаполнено(Пункт2) Тогда 
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТаблицаПунктов[Сч].Время) Или ЗначениеЗаполнено(ТаблицаПунктов[Сч].Расстояние) Тогда 
			Продолжить;
		КонецЕсли;
		
		// Используем закэшированную информацию о том, что расстояния равны 0, чтобы не пересчитывать ее
		СтруктураПоиска = Новый Структура("ПунктОтправления, ПунктНазначения", Пункт1, Пункт2);
		НайденныеСтроки = кэшНулевыеРасстоянияМеждуПунктами.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			Продолжить;
		КонецЕсли;
		
		мсвПункты.Добавить(Новый Структура("Пункт1, Лат1, Лон1, Пункт2, Лат2, Лон2, ИдентификаторСтрокиПункта, ВремяВыезда",
			Пункт1,,, Пункт2,,, Сч, '00010101' + ВремяОтправления));
	КонецЦикла;
	
	уатЗащищенныеФункцииСервер.РассчитатьТаблицуРасстояниеВремяМеждуПунктами(мсвПункты);
	
	Если Не мсвПункты.Количество() = 0 Тогда 
		Для Каждого ТекСтрока Из мсвПункты Цикл 
			ТаблицаПунктов[ТекСтрока.ИдентификаторСтрокиПункта].Время      = ТекСтрока.Время;
			ТаблицаПунктов[ТекСтрока.ИдентификаторСтрокиПункта].Расстояние = ТекСтрока.Расстояние;
			
			// кэшируем нулевые расстояния между пунктами, чтобы не пересчитывать их потом
			Если ТекСтрока.Время = 0 И ТекСтрока.Расстояние = 0 Тогда
				СтруктураПоиска = Новый Структура("ПунктОтправления, ПунктНазначения", ТекСтрока.Пункт1, ТекСтрока.Пункт2);
				НайденныеСтроки = кэшНулевыеРасстоянияМеждуПунктами.НайтиСтроки(СтруктураПоиска);
				Если НайденныеСтроки.Количество() = 0 Тогда
					НоваяСтрока = кэшНулевыеРасстоянияМеждуПунктами.Добавить();
					НоваяСтрока.ПунктОтправления = СтруктураПоиска.ПунктОтправления;
					НоваяСтрока.ПунктНазначения = СтруктураПоиска.ПунктНазначения;
				КонецЕсли;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	ТекВремя = '00010101';
	ПредПрибытиеПлан = '00010101';
	НакопленноеВремя = 0;
	Для СчСтрок = 0 По ТаблицаПунктов.Количество() - 1 Цикл 
		ТекСтрока = ТаблицаПунктов[СчСтрок];
		
		Если СчСтрок = 0 И ЗначениеЗаполнено(ТекСтрока.ПрибытиеПлан) Тогда
			ТекВремя = ТекСтрока.ПрибытиеПлан;
			ПредПрибытиеПлан = ТекВремя;
		ИначеЕсли СчСтрок = 0 Тогда
			ТекВремя = ОтправлениеС;
			ПредПрибытиеПлан = ОтправлениеС;
		Иначе 
			ТекВремя = уатЗащищенныеФункцииСервер.СложитьВремя(ТекВремя, ТекСтрока.Ожидание);
		КонецЕсли;
		
		// Заполнение временного окна прибытия в пункт
		Если ЗначениеЗаполнено(ТекСтрока.ПрибытиеПлан) Тогда
			СдвигОкна = НачалоДня(ТекВремя) - НачалоДня(ТекСтрока.ПрибытиеПлан);
		Иначе
			СдвигОкна = НачалоДня(ТекВремя) - НачалоДня(ТекСтрока.ОкноС);
		КонецЕсли;
		ТекСтрока.ОкноС  = ТекСтрока.ОкноС  + СдвигОкна;
		ТекСтрока.ОкноПо = ТекСтрока.ОкноПо + СдвигОкна;
		
		ТекСтрока.ПрибытиеПлан = ТекВремя;
		
		ТекВремя = уатЗащищенныеФункцииСервер.СложитьВремя(ТекВремя, ТекСтрока.Стоянка);
		
		Если ТипЗнч(ТекСтрока.Пункт) = Тип("СправочникСсылка.уатПунктыНазначения") Тогда 
			ТекВремя = уатЗащищенныеФункцииСервер.СложитьВремя(ТекВремя, уатОбщегоНазначения.ПолучитьВремяДопСтонки(ТекСтрока.Пункт));
		КонецЕсли;
		
		ТекСтрока.УбытиеПлан = ТекВремя;
		
		ТекВремя = уатЗащищенныеФункцииСервер.СложитьВремя(ТекВремя, ТекСтрока.Время);
		
		НакопленноеВремя = НакопленноеВремя + (ТекСтрока.ПрибытиеПлан - ПредПрибытиеПлан);
		ПредПрибытиеПлан = ТекСтрока.ПрибытиеПлан;
		ВремяВТекТочке   = НакопленноеВремя;
		
		ТекСтрока.Длительность = "";
		Если ВремяВТекТочке > 0 Тогда 
			чДней = Цел(ВремяВТекТочке / 86400);
			ВремяВТекТочке = ВремяВТекТочке - чДней * 86400;
			чЧас = Цел(ВремяВТекТочке / 3600);
			ВремяВТекТочке = ВремяВТекТочке - чЧас * 3600;
			чМин = Цел(ВремяВТекТочке / 60);
			ВремяВТекТочке = ВремяВТекТочке - чМин * 60;
			
			Если ВремяВТекТочке > 0 Тогда 
				чМин = чМин + 1;
			КонецЕсли;
			
			Если чМин > 59 Тогда 
				чМин = 0;
				чЧас = чЧас + 1;
			КонецЕсли;
			
			Если чЧас > 23 Тогда 
				чЧас = 0;
				чДней = чДней + 1;
			КонецЕсли;
			
			ТекСтрока.Длительность = "" 
				+ ?(чДней = 0, "", Строка(чДней) + " " + НСтр("ru='дн.';en='days.'") + " ")
				+ Формат(чЧас, "ЧЦ=2; ЧДЦ=; ЧН=00; ЧВН=; ЧГ=0") + ":"
				+ Формат(чМин, "ЧЦ=2; ЧДЦ=; ЧН=00; ЧВН=; ЧГ=0");
		КонецЕсли;
	КонецЦикла;
	
	ЗаказВремя = ВремяВТекТочке;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция РассчитатьВремяРасстояниеПоОдномуЭтапу(Пункт1, Пункт2, ВремяВыезда = '00010101')
	Результат = Новый Структура("Расстояние, Время", 0, 0);
	Если ЗначениеЗаполнено(Пункт1) И ЗначениеЗаполнено(Пункт2) Тогда
		мсвПункты = Новый Массив();
		мсвПункты.Добавить(Новый Структура("Пункт1, Лат1, Лон1, Пункт2, Лат2, Лон2, ИдентификаторСтрокиПункта, ВремяВыезда, Маршрут", 
		Пункт1,,, Пункт2,,,, ВремяВыезда));
		
		уатЗащищенныеФункцииСервер.РассчитатьТаблицуРасстояниеВремяМеждуПунктами(мсвПункты);
		
		Если мсвПункты.Количество() Тогда
			Результат.Расстояние = мсвПункты[0].Расстояние;
			Результат.Время = мсвПункты[0].Время;
		КонецЕсли;
	КонецЕсли;
	Возврат Результат;
КонецФункции

&НаСервере
Процедура РассчитатьВремяРасстояниеПоЭтапам()
	мсвПункты = Новый Массив();
	Если ЗначениеЗаполнено(ЗаказНаТС) Тогда
		ОтправлениеС = ЗаказНаТС.ОтправлениеС;
	Иначе
		ОтправлениеС = НачалоДня(ТекущаяДата());
	КонецЕсли;

	ВремяОтправления = ОтправлениеС - НачалоДня(ОтправлениеС);
	
	Для Сч = 0 По ТаблицаЭтапов.Количество()-1 Цикл 
		Пункт1 = ТаблицаЭтапов[Сч].ПунктОтправления;
		Пункт2 = ТаблицаЭтапов[Сч].ПунктНазначения;
		
		Если Не ЗначениеЗаполнено(Пункт1) Или Не ЗначениеЗаполнено(Пункт2) Тогда 
			Продолжить;
		КонецЕсли;
		
		Если ЗначениеЗаполнено(ТаблицаЭтапов[Сч].Время) Или ЗначениеЗаполнено(ТаблицаЭтапов[Сч].Расстояние) Тогда 
			Продолжить;
		КонецЕсли;
		
		мсвПункты.Добавить(Новый Структура("Пункт1, Лат1, Лон1, Пункт2, Лат2, Лон2, ИдентификаторСтрокиПункта, ВремяВыезда",
			Пункт1,,, Пункт2,,, Сч, '00010101' + ВремяОтправления));
	КонецЦикла;
	
	уатЗащищенныеФункцииСервер.РассчитатьТаблицуРасстояниеВремяМеждуПунктами(мсвПункты);
	
	Если Не мсвПункты.Количество() = 0 Тогда 
		Для Каждого ТекСтрока Из мсвПункты Цикл 
			ТаблицаЭтапов[ТекСтрока.ИдентификаторСтрокиПункта].Время      = ТекСтрока.Время;
			ТаблицаЭтапов[ТекСтрока.ИдентификаторСтрокиПункта].Расстояние = ТекСтрока.Расстояние;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьВариантыОтрезков()
	
	ВариантыОтрезков = Новый Массив();
	
	Если ФлагFTLЗаказ Тогда
		
		Для СчПогрузка = 0 По ТаблицаПунктов.Количество() - 1 Цикл 
			СтрокаПогрузка = ТаблицаПунктов[СчПогрузка];
			
			Если Не (СтрокаПогрузка.Операция = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Погрузка")
					Или СтрокаПогрузка.Операция = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.ДополнительнаяПогрузка")) Тогда 
				Продолжить;
			КонецЕсли;
			
			Для СчРазгрузка = (СчПогрузка + 1) По ТаблицаПунктов.Количество() - 1 Цикл 
				СтрокаРазгрузка = ТаблицаПунктов[СчРазгрузка];
				
				Если Не (СтрокаРазгрузка.Операция = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.Разгрузка")
						Или СтрокаРазгрузка.Операция = ПредопределенноеЗначение("Перечисление.уатТипыТочекМаршрута.ДополнительнаяРазгрузка")) Тогда 
					Продолжить;
				КонецЕсли;
				
				ВариантОтрезка = Новый Структура;
				ВариантОтрезка.Вставить("Значение", Строка(СчПогрузка+1) + " - " + Строка(СчРазгрузка+1));
				ПредставлениеОтрезка = уатОбщегоНазначения_проф.ПолучитьПредставлениеОтрезкаПути(
					СтрокаПогрузка.Пункт, СтрокаРазгрузка.Пункт, СчПогрузка+1, СчРазгрузка+1);
				ВариантОтрезка.Вставить("Представление", ПредставлениеОтрезка);
				ВариантыОтрезков.Добавить(ВариантОтрезка);
			КонецЦикла;
		КонецЦикла;
		
	ИначеЕсли ФлагМультимодальныйЗаказ Тогда
		
		Если ТаблицаЭтапов.Количество() > 1 Тогда
			ВариантОтрезка = Новый Структура;
			ВариантОтрезка.Вставить("Значение", "");
			ВариантОтрезка.Вставить("Представление", НСтр("ru='Добавить во все этапы'; en='Add to all stages'"));
			ВариантыОтрезков.Добавить(ВариантОтрезка);
		КонецЕсли;
		
		Для Сч = 0 По ТаблицаЭтапов.Количество()-1 Цикл
			
			ВариантОтрезка = Новый Структура;
			ВариантОтрезка.Вставить("Значение", Сч);
			ПредставлениеОтрезка = уатОбщегоНазначения_проф.ПолучитьПредставлениеОтрезкаПути(
				ТаблицаЭтапов[Сч].ПунктОтправления, ТаблицаЭтапов[Сч].ПунктНазначения);
			ВариантОтрезка.Вставить("Представление", ПредставлениеОтрезка);
			ВариантыОтрезков.Добавить(ВариантОтрезка);
			
		КонецЦикла;
		
	КонецЕсли;
	
	Возврат ВариантыОтрезков;
	
КонецФункции

&НаКлиенте
Процедура ВсеГрузыДобавитьНаОтрезокПутиЗавершение(ВыбранныйЭлемент, ДопПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ФлагFTLЗаказ Тогда
		Для Каждого ТекСтрокаГруза Из ТаблицаВсеГрузы Цикл
			Если Не ТекСтрокаГруза.флСтрокаВыбрана Тогда
				Продолжить;
			КонецЕсли;
			
			УдалитьГрузСоВсехЭтапов(ТекСтрокаГруза);
		КонецЦикла;
	КонецЕсли;
	
	// ВыбранныйЭлемент.Значение имеет вид "1 - 2"
	ПоложениеРазделителя = СтрНайти(ВыбранныйЭлемент.Значение, " - ");
	Если ПоложениеРазделителя > 0 Тогда
		От = Число(Лев(ВыбранныйЭлемент.Значение, ПоложениеРазделителя-1));
		До = Число(Сред(ВыбранныйЭлемент.Значение, ПоложениеРазделителя+2));
	Иначе
		Возврат;
	КонецЕсли;
	
	НомерПервогоЭтапа = ТаблицаЭтапов.Количество();
	СтруктураПоиска = Новый Структура("ПунктОтправленияId, ПунктНазначенияId");
	Для Сч = От По До-1 Цикл
		СтруктураПоиска.ПунктОтправленияId = ТаблицаПунктов[Сч-1].id;
		СтруктураПоиска.ПунктНазначенияId = ТаблицаПунктов[Сч].id;
		НайденныеСтроки = ТаблицаЭтапов.НайтиСтроки(СтруктураПоиска);
		Если НайденныеСтроки.Количество() > 0 Тогда
			idЭтапа = НайденныеСтроки[0].id;
			НомерПервогоЭтапа = Мин(НомерПервогоЭтапа, ТаблицаЭтапов.Индекс(НайденныеСтроки[0]));
		Иначе
			// создание этапа
			НовыйЭтап = ТаблицаЭтапов.Добавить();
			НовыйЭтап.id = Новый УникальныйИдентификатор;
			НовыйЭтап.ПунктОтправления = ТаблицаПунктов[Сч-1].Пункт;
			НовыйЭтап.ПунктОтправленияId = ТаблицаПунктов[Сч-1].id;
			НовыйЭтап.ПунктНазначения = ТаблицаПунктов[Сч].Пункт;
			НовыйЭтап.ПунктНазначенияId = ТаблицаПунктов[Сч].id;
			idЭтапа = НовыйЭтап.id;
			НомерПервогоЭтапа = Мин(НомерПервогоЭтапа, ТаблицаЭтапов.Индекс(НовыйЭтап));
		КонецЕсли;
		
		Для Каждого ТекСтрокаГруза Из ТаблицаВсеГрузы Цикл
			Если Не ТекСтрокаГруза.флСтрокаВыбрана Тогда
				Продолжить;
			КонецЕсли;
			
			ДобавитьГрузНаЭтап(ТекСтрокаГруза, idЭтапа);
		КонецЦикла;
	КонецЦикла;
	
	ОбновитьПоказателиВсехЭтапов();
	
	// Первый из этапов, на который добавлен груз, устанавливается активным
	Если НомерПервогоЭтапа < ТаблицаЭтапов.Количество() Тогда
		Элементы.ТаблицаЭтапов.ТекущаяСтрока = ТаблицаЭтапов[НомерПервогоЭтапа].ПолучитьИдентификатор();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ВсеГрузыВыбратьЭтапЗавершение(ВыбранныйЭлемент, ДопПараметры) Экспорт
	
	Если ВыбранныйЭлемент = Неопределено Тогда 
		Возврат;
	КонецЕсли;
	
	Если ВыбранныйЭлемент.Значение = "" Тогда
		// Добавление грузов на все этапы
		Для Каждого СтрокаЭтапа Из ТаблицаЭтапов Цикл
			idЭтапа = СтрокаЭтапа.id;
			
			Для Каждого ТекСтрокаГруза Из ТаблицаВсеГрузы Цикл
				Если Не ТекСтрокаГруза.флСтрокаВыбрана Тогда
					Продолжить;
				КонецЕсли;
				
				ДобавитьГрузНаЭтап(ТекСтрокаГруза, idЭтапа);
			КонецЦикла;
		КонецЦикла;
		
		// Первый из этапов, на который добавлен груз, устанавливается активным
		Элементы.ТаблицаЭтапов.ТекущаяСтрока = ТаблицаЭтапов[0].ПолучитьИдентификатор();
	Иначе
		// Добавление грузов на один этап
		НомерЭтапа = Число(ВыбранныйЭлемент.Значение);
		idЭтапа = ТаблицаЭтапов[НомерЭтапа].id;
		
		Для Каждого ТекСтрокаГруза Из ТаблицаВсеГрузы Цикл
			Если Не ТекСтрокаГруза.флСтрокаВыбрана Тогда
				Продолжить;
			КонецЕсли;
			
			ДобавитьГрузНаЭтап(ТекСтрокаГруза, idЭтапа);
		КонецЦикла;
		
		// Первый из этапов, на который добавлен груз, устанавливается активным
		Элементы.ТаблицаЭтапов.ТекущаяСтрока = ТаблицаЭтапов[НомерЭтапа].ПолучитьИдентификатор();
	КонецЕсли;
	
	ОбновитьПоказателиВсехЭтапов();
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьАдресСтрокой(Пункт)
	Если Не ЗначениеЗаполнено(Пункт) Тогда
		Возврат "";
	КонецЕсли;
	
	//ДанныеПункта = уатОбщегоНазначенияТиповые.ПолучитьЗначенияРеквизитов(Пункт, "ШифрПункта, Наименование");
	//Если ЗначениеЗаполнено(ДанныеПункта.ШифрПункта) Тогда
	//	Результат = ДанныеПункта.ШифрПункта;
	//Иначе
	//	Результат = ДанныеПункта.Наименование;
	//КонецЕсли;
	
	Если СтруктураНастроек.ПунктНаименование Тогда
		Результат = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Пункт, "Наименование");
	ИначеЕсли СтруктураНастроек.ПунктКраткоеНаименование Тогда
		Результат = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Пункт, "ШифрПункта");
	ИначеЕсли СтруктураНастроек.ПунктАдрес Тогда
		Результат = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Пункт, "Адрес");
	Иначе
		Результат = "";
	КонецЕсли;
	
	Возврат Результат;
КонецФункции

&НаКлиенте
Процедура ЗаполнитьНомераСтрокПунктов()
	Сч = 1;
	Для Каждого ТекСтрока Из ТаблицаПунктов Цикл
		ТекСтрока.НомерСтроки = Сч;
		Сч = Сч+1;
	КонецЦикла;
КонецПроцедуры

&НаКлиенте
Процедура ПередЗакрытиемПослеПодтверждения(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗакрытьФорму = Истина;
		ЗаписатьЭтапы(Неопределено);
		Если ЗакрытьФорму Тогда
			Закрыть();
		КонецЕсли;
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		ЗакрытьФорму = Истина;
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СформироватьСтрокуДляПередачиВСхему(ДанныеДляПередачи)
	#Если ВебКлиент Тогда
		ДанныеВСхему = ЗаписатьJSONНаСервере(ДанныеДляПередачи);
	#Иначе
		ЗаписьJSON = Новый ЗаписьJSON;
		ЗаписьJSON.УстановитьСтроку();
		ЗаписатьJSON(ЗаписьJSON, ДанныеДляПередачи);
		СтрокаДляПередачи = ЗаписьJSON.Закрыть();
		ДанныеВСхему = СтрокаДляПередачи;
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЗаказПослеПодтверждения(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаписатьЭтапы(Неопределено);
		ОткрытьФорму("Документ.уатЗаказГрузоотправителя.ФормаОбъекта", Новый Структура("Ключ", ЗаказНаТС));
		Закрыть();
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		ЗакрытьФорму = Истина;
		ОткрытьФорму("Документ.уатЗаказГрузоотправителя.ФормаОбъекта", Новый Структура("Ключ", ЗаказНаТС));
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьЭтапПослеПодтверждения(Результат, Этап) Экспорт
	
	Если ТипЗнч(Этап) <> Тип("ДокументСсылка.уатЗаказГрузоотправителя") Тогда
		Возврат;
	КонецЕсли;
	
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаписатьЭтапы(Неопределено);
		ОткрытьФорму("Документ.уатЗаказГрузоотправителя.ФормаОбъекта", Новый Структура("Ключ", Этап));
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		ОткрытьФорму("Документ.уатЗаказГрузоотправителя.ФормаОбъекта", Новый Структура("Ключ", Этап));
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура УдалитьЭтапыСвязанныеСПунктом(IdПункта)
	Сч = ТаблицаЭтапов.Количество();
	Пока Сч > 0 Цикл
		Сч = Сч-1;
		ТекЭтап = ТаблицаЭтапов[Сч];
		Если ТекЭтап.ПунктОтправленияId = IdПункта Или ТекЭтап.ПунктНазначенияId = IdПункта Тогда
			
			// Удаление ребра со схемы
			//ДанныеДляПередачи = Новый Структура("id");
			//ДанныеДляПередачи.id = ТекЭтап.id;
			//СформироватьСтрокуДляПередачиВСхему(ДанныеДляПередачи);
			//HTMLobj = Элементы.MapHTML.Документ.defaultView;
			//HTMLobj.removeEdgeFrom1C(ДанныеВСхему);
			
			// Удаление ребра из таблиц 1С
			УдалитьГрузыПоЭтапу(ТекЭтап.id);
			ТаблицаЭтапов.Удалить(Сч);
			Модифицированность = Истина;
			
		КонецЕсли;
	КонецЦикла;
КонецПроцедуры

&НаСервереБезКонтекста
Функция ПрочитатьJSONНаСервере(СтрокаJSON)
	ЧтениеJSON = Новый ЧтениеJSON;
	ЧтениеJSON.УстановитьСтроку(СтрокаJSON);
	СтруктураСхемы = ПрочитатьJSON(ЧтениеJSON);
	ЧтениеJSON.Закрыть();
	
	Возврат СтруктураСхемы;
КонецФункции

&НаСервереБезКонтекста
Функция ЗаписатьJSONНаСервере(ДанныеДляПередачи)
	ЗаписьJSON = Новый ЗаписьJSON;
	ЗаписьJSON.УстановитьСтроку();
	ЗаписатьJSON(ЗаписьJSON, ДанныеДляПередачи);
	СтрокаДляПередачи = ЗаписьJSON.Закрыть();
	ДанныеВСхему = СтрокаДляПередачи;
	
	Возврат СтрокаДляПередачи;
КонецФункции

&НаКлиенте
Процедура ПроверитьРаботуСкрипта(Отказ)
	#Если ВебКлиент Тогда
		Попытка
			HTMLobj = Элементы.MapHTML.Документ.defaultView;
			HTMLobj.runTest();
		Исключение
			Отказ = Истина;
			ТекстОшибки = НСтр("ru='Произошла ошибка инициализации редактора схемы перевозки. Возможно, используется неподдерживаемый браузер. Редактор будет закрыт.'");
			ОписаниеОповещения = Новый ОписаниеОповещения("ЗакрытьФорму", ЭтаФорма);
			ПоказатьПредупреждение(ОписаниеОповещения, ТекстОшибки);
		КонецПопытки;
	#КонецЕсли
КонецПроцедуры

&НаКлиенте
Процедура ЗакрытьФорму(ДопПараметры) Экспорт
	ЭтаФорма.Закрыть();
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьЗаказЗаписать(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаписатьЭтапы(Неопределено);
		ЗагрузитьЗаказПослеЗаписиДокумента();
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		ЗагрузитьЗаказПослеЗаписиДокумента();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ЗагрузитьЗаказПослеЗаписиДокумента()
	ФормаВыбора = ПолучитьФорму("Документ.уатЗаказГрузоотправителя.Форма.ФормаВыбора",, ЭтаФорма);
	ФормаВыбора.Параметры.РежимВыбора         = Истина;
	ФормаВыбора.ЗакрыватьПриВыборе            = Истина;
	ФормаВыбора.ЗакрыватьПриЗакрытииВладельца = Истина;
	ФормаВыбора.РежимОткрытияОкна             = РежимОткрытияОкнаФормы.БлокироватьОкноВладельца;
	
	ГруппаИли                  = ФормаВыбора.Список.Отбор.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных")); 
	ГруппаИли.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ГруппаИли.Использование    = Истина;
	ГруппаИли.ТипГруппы        = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИли;
	
	ГруппаFTLНеМультимодальный                  = ГруппаИли.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных")); 
	ГруппаFTLНеМультимодальный.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ГруппаFTLНеМультимодальный.Использование    = Истина;
	ГруппаFTLНеМультимодальный.ТипГруппы        = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ЭлементОтбора                  = ГруппаFTLНеМультимодальный.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("FTL");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение   = Истина;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.Использование    = Истина;
	
	ЭлементОтбора                  = ГруппаFTLНеМультимодальный.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("Мультимодальный");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение   = Ложь;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.Использование    = Истина;
	
	ГруппаМультимодальныйНеFTL                  = ГруппаИли.Элементы.Добавить(Тип("ГруппаЭлементовОтбораКомпоновкиДанных")); 
	ГруппаМультимодальныйНеFTL.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ГруппаМультимодальныйНеFTL.Использование    = Истина;
	ГруппаМультимодальныйНеFTL.ТипГруппы        = ТипГруппыЭлементовОтбораКомпоновкиДанных.ГруппаИ;
	
	ЭлементОтбора                  = ГруппаМультимодальныйНеFTL.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("Мультимодальный");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение   = Истина;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.Использование    = Истина;
	
	ЭлементОтбора                  = ГруппаМультимодальныйНеFTL.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("FTL");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение   = Ложь;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.Использование    = Истина;
	
	ЭлементОтбора                  = ГруппаМультимодальныйНеFTL.Элементы.Добавить(Тип("ЭлементОтбораКомпоновкиДанных"));
	ЭлементОтбора.ЛевоеЗначение    = Новый ПолеКомпоновкиДанных("ЭтоЭтап");
	ЭлементОтбора.ВидСравнения     = ВидСравненияКомпоновкиДанных.Равно;
	ЭлементОтбора.ПравоеЗначение   = Ложь;
	ЭлементОтбора.РежимОтображения = РежимОтображенияЭлементаНастройкиКомпоновкиДанных.Недоступный;
	ЭлементОтбора.Использование    = Истина;
	
	ФормаВыбора.Открыть();
	
КонецПроцедуры

&НаСервере
Процедура ЗагрузитьДанныеШапкиЗаказа(ПараметрыЗаказа, Отказ)
	
	Если ПараметрыЗаказа.Свойство("ЗаказНаТС") Тогда
		ЗаказНаТС = ПараметрыЗаказа.ЗаказНаТС;
	КонецЕсли;
	
	Если ЗначениеЗаполнено(ЗаказНаТС) Тогда
		РеквизитыШапки = уатОбщегоНазначенияТиповые.ПолучитьЗначенияРеквизитов(ЗаказНаТС, "FTL, Мультимодальный, ЭтоЭтап, 
			|ВесБрутто, Объем, КоличествоМест, ДетализацияЗакрытия, Номер, НеОткрыватьРедакторЦепочкиДокументов");
		ВременныйФлагFTLЗаказ = РеквизитыШапки.FTL;
		ВременныйФлагМультимодальныйЗаказ = РеквизитыШапки.Мультимодальный И Не РеквизитыШапки.ЭтоЭтап;
		ЗаказВесБрутто = РеквизитыШапки.ВесБрутто;
		ЗаказОбъем = РеквизитыШапки.Объем;
		ЗаказКоличествоМест = РеквизитыШапки.КоличествоМест;
		ЗаказДетализацияЗакрытия = РеквизитыШапки.ДетализацияЗакрытия;
		НеОткрыватьРедакторЦепочкиДокументов = РеквизитыШапки.НеОткрыватьРедакторЦепочкиДокументов;
	Иначе
		ВременныйФлагFTLЗаказ = ПараметрыЗаказа.ФлагFTLЗаказ;
		ВременныйФлагМультимодальныйЗаказ = ПараметрыЗаказа.ФлагМультимодальныйЗаказ;
	КонецЕсли;
	
	Если Не ВременныйФлагFTLЗаказ И Не ВременныйФлагМультимодальныйЗаказ Тогда
		ТекстНСТР = НСтр("en='Editor can only be opened for multimodal parent order or FTL order.';ru='Редактор схемы доступен только для родительского мультимодального заказа или для FTL заказа.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		Отказ = Истина;
		Возврат;
	ИначеЕсли ВременныйФлагFTLЗаказ И ВременныйФлагМультимодальныйЗаказ Тогда
		ТекстНСТР = НСтр("en='Editor cannot be opened for multimodal FTL order.';ru='Редактор схемы недоступен для мультимодальных FTL заказов.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		Отказ = Истина;
		Возврат;
	КонецЕсли;
	ФлагFTLЗаказ = ВременныйФлагFTLЗаказ;
	ФлагМультимодальныйЗаказ = ВременныйФлагМультимодальныйЗаказ;
	
	Если ПараметрыЗаказа.Свойство("ДетализацияЗакрытия") Тогда
		ЗаказДетализацияЗакрытия = ПараметрыЗаказа.ДетализацияЗакрытия;
	КонецЕсли;
	
	Если ПараметрыЗаказа.Свойство("ПрочиеПараметрыЗаказа") Тогда
		ПрочиеПараметрыЗаказа = ПараметрыЗаказа.ПрочиеПараметрыЗаказа;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовыйЗаказЗаписать(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.Да Тогда
		ЗаписатьЭтапы(Неопределено);
		СоздатьНовыйЗаказПослеЗаписиДокумента();
	ИначеЕсли Результат = КодВозвратаДиалога.Нет Тогда
		СоздатьНовыйЗаказПослеЗаписиДокумента();
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура СоздатьНовыйЗаказПослеЗаписиДокумента()
	
	ОткрытьФорму("Обработка.уатРедактированиеСхемыПеревозки_уэ.Форма.ФормаНачальнойСтраницы",,,,,,,РежимОткрытияОкнаФормы.Независимый);
	ЗакрытьФорму = Истина;
	ЭтаФорма.Закрыть();
	
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьНастройкиЗавершение(Результат, ДопПараметры) Экспорт
	
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		
		Если Не НадписиЭтаповПустые(СтруктураНастроек) И НадписиЭтаповПустые(Результат) Тогда
			// Для установки пустых надписей этапов, когда раньше были непустые,
			// необходимо обновить схему полностью (из-за ошибки библиотеки visjs скрипта)
			СтруктураНастроек = Результат;
			СохранитьНастройки();
			ПередатьДанныеВСхему();
		Иначе
			СтруктураНастроек = Результат;
			СохранитьНастройки();
			ОбновитьВсеЭтапыВСхеме();
			ОбновитьВсеПунктыВСхеме();
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция НадписиЭтаповПустые(Настройки)
	Результат = Не Настройки.ЭтапНомерЭтапа 
		И Не Настройки.ЭтапВес
		И Не Настройки.ЭтапОбъем
		И Не Настройки.ЭтапУпаковки
		И Не Настройки.ЭтапВремяВПути
		И Не Настройки.ЭтапДлительность;
	Возврат Результат;
КонецФункции

&НаСервере
Процедура СохранитьНастройки()
	
	Если Не ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда 
		Возврат;
	КонецЕсли;
	УстановитьПривилегированныйРежим(Истина);
	
	ХранилищеНастроекДанныхФорм.Сохранить(
		"Обработка.уатРедактированиеСхемыПеревозки_уэ.Форма.Форма",
		"уатРедактированиеСхемыПеревозки_уэ_Настройки", 
		СтруктураНастроек
	);
	
КонецПроцедуры

&НаСервере
Процедура ВосстановитьНастройки()
	
	Если ПравоДоступа("СохранениеДанныхПользователя", Метаданные) Тогда 
		СтруктураНастроек = ХранилищеНастроекДанныхФорм.Загрузить(
			"Обработка.уатРедактированиеСхемыПеревозки_уэ.Форма.Форма",
			"уатРедактированиеСхемыПеревозки_уэ_Настройки"
		);
	Иначе 
		СтруктураНастроек = Неопределено;
	КонецЕсли;
	
	СтруктураНастроекПоУмолчанию = Обработки.уатРедактированиеСхемыПеревозки_уэ.СтруктураНастроекПоУмолчанию();
	Если ТипЗнч(СтруктураНастроек) <> Тип("Структура") Тогда
		СтруктураНастроек = СтруктураНастроекПоУмолчанию;
	Иначе
		Для Каждого КлючИЗначение Из СтруктураНастроекПоУмолчанию Цикл
			Если Не СтруктураНастроек.Свойство(КлючИЗначение.Ключ) Тогда
				СтруктураНастроек.Вставить(КлючИЗначение.Ключ, КлючИЗначение.Значение);
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Функция ПолучитьНадписьЭтапа(СтрокаЭтапа)
	
	Надпись = "";
	
	Если СтруктураНастроек.ЭтапНомерЭтапа И ЗначениеЗаполнено(СтрокаЭтапа.НомерЭтапа) Тогда
		Надпись = Надпись + "№" + СтрокаЭтапа.НомерЭтапа;
	КонецЕсли;
	Если СтруктураНастроек.ЭтапВес Тогда
		Надпись = Надпись + ?(ЗначениеЗаполнено(Надпись), Символы.ПС, "") + Формат(СтрокаЭтапа.ВесБрутто, "ЧН=0; ЧГ=") + " " + ПредставлениеЕдиницыИзмеренияВеса;
	КонецЕсли;
	Если СтруктураНастроек.ЭтапОбъем Тогда
		Надпись = Надпись + ?(ЗначениеЗаполнено(Надпись), Символы.ПС, "") + Формат(СтрокаЭтапа.Объем, "ЧН=0; ЧГ=") + " " + ПредставлениеЕдиницыИзмеренияОбъема;
	КонецЕсли;
	Если СтруктураНастроек.ЭтапУпаковки Тогда
		Надпись = Надпись + ?(ЗначениеЗаполнено(Надпись), Символы.ПС, "") + Формат(СтрокаЭтапа.КоличествоМест, "ЧН=0; ЧГ=") + " м";
	КонецЕсли;
	
	Если ФлагМультимодальныйЗаказ 
		И (СтруктураНастроек.ЭтапВремяВПути Или СтруктураНастроек.ЭтапДлительность)
		И ЗначениеЗаполнено(СтрокаЭтапа.Время) Тогда
		Надпись = Надпись + ?(ЗначениеЗаполнено(Надпись), Символы.ПС, "") + ПолучитьПредставлениеВремениВПути(СтрокаЭтапа.Время);
	КонецЕсли;
	
	Если ФлагFTLЗаказ И СтруктураНастроек.ЭтапВремяВПути Тогда
		НайденныеСтроки = ТаблицаПунктов.НайтиСтроки(Новый Структура("id", СтрокаЭтапа.ПунктОтправленияId));
		Если НайденныеСтроки.Количество() > 0 И ЗначениеЗаполнено(НайденныеСтроки[0].Время) Тогда
			Надпись = Надпись + ?(ЗначениеЗаполнено(Надпись), Символы.ПС, "") + ПолучитьПредставлениеВремениВПути(НайденныеСтроки[0].Время);
		КонецЕсли;
	ИначеЕсли ФлагFTLЗаказ И СтруктураНастроек.ЭтапДлительность Тогда
		// Длительность и время в пути не должны отображаться одновременно
		НайденныеСтроки = ТаблицаПунктов.НайтиСтроки(Новый Структура("id", СтрокаЭтапа.ПунктНазначенияId));
		Если НайденныеСтроки.Количество() > 0 И ЗначениеЗаполнено(НайденныеСтроки[0].Длительность) Тогда
			Надпись = Надпись + ?(ЗначениеЗаполнено(Надпись), Символы.ПС, "") + НайденныеСтроки[0].Длительность;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Надпись;
	
КонецФункции

&НаКлиенте
Функция ПолучитьНадписьПункта(СтрокаПункта)
	
	Надпись = "";
	Если Не ЗначениеЗаполнено(СтрокаПункта.Пункт) Тогда
		Возврат Надпись;
	КонецЕсли;
	
	Если ФлагFTLЗаказ И СтруктураНастроек.ПунктНомерПункта Тогда
		Надпись = Надпись + "№" + СтрокаПункта.НомерСтроки;
	КонецЕсли;
	
	Надпись = Надпись + ?(ЗначениеЗаполнено(Надпись), " ", "") + ПолучитьАдресСтрокой(СтрокаПункта.Пункт);
	
	Если ФлагFTLЗаказ 
		И СтруктураНастроек.ПунктДатаПрибытия
		И ЗначениеЗаполнено(СтрокаПункта.ПрибытиеПлан) Тогда
		Надпись = Надпись + ?(ЗначениеЗаполнено(Надпись), Символы.ПС, "") + "приб. " + Формат(СтрокаПункта.ПрибытиеПлан, "ДФ='dd.MM.yy HH:mm'");
	ИначеЕсли ФлагМультимодальныйЗаказ И СтруктураНастроек.ПунктДатаПрибытия Тогда
		// В качестве даты прибытия выводится минимальная из дат прибытия в данный пункт по всем этапам
		НайденныеСтроки = ТаблицаЭтапов.НайтиСтроки(Новый Структура("ПунктНазначенияId", СтрокаПункта.id));
		Если НайденныеСтроки.Количество() > 0 Тогда
			ПрибытиеПлан = НайденныеСтроки[0].ПрибытиеПлан;
			Для Каждого ТекСтрока Из НайденныеСтроки Цикл
				Если ЗначениеЗаполнено(ТекСтрока.ПрибытиеПлан) И ТекСтрока.ПрибытиеПлан < ПрибытиеПлан
					Или Не ЗначениеЗаполнено(ПрибытиеПлан) Тогда
					ПрибытиеПлан = ТекСтрока.ПрибытиеПлан;
				КонецЕсли;
			КонецЦикла;
			Если ЗначениеЗаполнено(ПрибытиеПлан) Тогда
				Надпись = Надпись + ?(ЗначениеЗаполнено(Надпись), Символы.ПС, "") + "приб. " + Формат(ПрибытиеПлан, "ДФ='dd.MM.yy HH:mm'");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ФлагFTLЗаказ 
		И СтруктураНастроек.ПунктДатаОтправления 
		И ЗначениеЗаполнено(СтрокаПункта.УбытиеПлан) Тогда
		Надпись = Надпись + ?(ЗначениеЗаполнено(Надпись), Символы.ПС, "") + "отпр. " + Формат(СтрокаПункта.УбытиеПлан, "ДФ='dd.MM.yy HH:mm'");
	ИначеЕсли ФлагМультимодальныйЗаказ И СтруктураНастроек.ПунктДатаОтправления Тогда
		// В качестве даты отправления выводится минимальная из дат отправления из данного пункта по всем этапам
		НайденныеСтроки = ТаблицаЭтапов.НайтиСтроки(Новый Структура("ПунктОтправленияId", СтрокаПункта.id));
		Если НайденныеСтроки.Количество() > 0 Тогда
			УбытиеПлан = НайденныеСтроки[0].ОтправлениеПлан;
			Для Каждого ТекСтрока Из НайденныеСтроки Цикл
				Если ЗначениеЗаполнено(ТекСтрока.ОтправлениеПлан) И ТекСтрока.ОтправлениеПлан < УбытиеПлан 
					Или Не ЗначениеЗаполнено(УбытиеПлан) Тогда
					УбытиеПлан = ТекСтрока.ОтправлениеПлан;
				КонецЕсли;
			КонецЦикла;
			Если ЗначениеЗаполнено(УбытиеПлан) Тогда
				Надпись = Надпись + ?(ЗначениеЗаполнено(Надпись), Символы.ПС, "") + "отпр. " + Формат(УбытиеПлан, "ДФ='dd.MM.yy HH:mm'");
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Возврат Надпись;
	
КонецФункции

&НаКлиенте
Функция ПолучитьПредставлениеВремениВПути(ВремяВПути)
	// На вход получено время в формате "26.5", что означает 26 часов 50 минут
	Время = ВремяВПути;
	чДней = Цел(Время / 24);
	Время = Время - чДней * 24;
	чЧас = Цел(Время);
	Время = Время - чЧас;
	чМин = Цел(Время * 100);
	
	ПредставлениеВремени = "" 
		+ ?(чДней = 0, "", Строка(чДней) + " " + НСтр("ru='дн.';en='days.'") + " ")
		+ Формат(чЧас, "ЧЦ=2; ЧДЦ=; ЧН=00; ЧВН=; ЧГ=0") + ":"
		+ Формат(чМин, "ЧЦ=2; ЧДЦ=; ЧН=00; ЧВН=; ЧГ=0");
	Возврат ПредставлениеВремени;
КонецФункции

&НаКлиенте
Процедура РазбитьНаЭтапыОтветНаВопросУдаленияЭтапов(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Если Не РезультатВопроса = КодВозвратаДиалога.ОК Тогда 
		Возврат;
	КонецЕсли;
	
	ТаблицаЭтапов.Очистить();
	ТаблицаПунктов.Очистить();
	ТаблицаГрузыПоЭтапам.Очистить();
	ОчиститьСхему();
	
	РазбитьНаЭтапыЗавершение();
	
КонецПроцедуры

&НаКлиенте
Процедура РазбитьНаЭтапыЗавершение();
	
	ПараметрыОткрытия = Новый Структура;
	Если ЗначениеЗаполнено(ЗаказНаТС) Тогда
		РеквизитыЗаказа = уатОбщегоНазначенияТиповые.ПолучитьЗначенияРеквизитов(ЗаказНаТС, 
			"АдресОтправления, АдресНазначения");
		ПараметрыОткрытия.Вставить("АдресОтправления", РеквизитыЗаказа.АдресОтправления);
		ПараметрыОткрытия.Вставить("АдресНазначения",  РеквизитыЗаказа.АдресНазначения);
	КонецЕсли;
	ПараметрыОткрытия.Вставить("ИспользоватьВременныеОкна", Ложь);
	ОповещениеОЗакрытии = Новый ОписаниеОповещения("РазбитьНаЭтапыПослеРазбиения", ЭтаФорма);
	ОткрытьФорму("Документ.уатЗаказГрузоотправителя.Форма.ФормаРазбиенияНаЭтапы", ПараметрыОткрытия, ЭтаФорма, , , ,
		ОповещениеОЗакрытии ,РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
		
КонецПроцедуры

&НаКлиенте
Процедура РазбитьНаЭтапыПослеРазбиения(Результат, ДополнительныеПараметры) Экспорт
	
	// Создание новых этапов
	Если ТипЗнч(Результат) = Тип("Структура") 
		И Результат.Свойство("МассивЭтапов") Тогда
		Для Каждого ПараметрыЭтапа Из Результат.МассивЭтапов Цикл
			НовыйЭтап = ТаблицаЭтапов.Добавить();
			НовыйЭтап.id = Новый УникальныйИдентификатор;
			НовыйЭтап.ПунктОтправления = ПараметрыЭтапа.АдресОтправления;
			НовыйЭтап.ПунктНазначения = ПараметрыЭтапа.АдресНазначения;
			НовыйЭтап.ОтправлениеПлан = ПараметрыЭтапа.ДатаОтправленияПлан;
			НовыйЭтап.ПрибытиеПлан = ПараметрыЭтапа.ДатаПрибытияПлан;
			НовыйЭтап.ПунктОтправленияId = НайтиДобавитьПункт(НовыйЭтап.ПунктОтправления);
			НовыйЭтап.ПунктНазначенияId = НайтиДобавитьПункт(НовыйЭтап.ПунктНазначения);
			Если ЗаказДетализацияЗакрытия = ПредопределенноеЗначение("Перечисление.уатДетализацияЗаказаГрузоотправителя_уэ.ПоЗаказам") Тогда
				НовыйЭтап.ВесБрутто = ЗаказВесБрутто;
				НовыйЭтап.Объем = ЗаказОбъем;
				НовыйЭтап.КоличествоМест = ЗаказКоличествоМест;
			Иначе
				Для Каждого ТекСтрокаГруза Из ТаблицаВсеГрузы Цикл
					ДобавитьГрузНаЭтап(ТекСтрокаГруза, НовыйЭтап.id);
				КонецЦикла;
			КонецЕсли;
		КонецЦикла;
		РассчитатьВремяРасстояниеПоЭтапам();
		ПередаватьДанныеВСхему = Ложь;
		ОбновитьПоказателиВсехЭтапов(ПередаватьДанныеВСхему);
		ПередатьДанныеВСхему();
	Иначе
		Возврат;
	КонецЕсли;
	
КонецПроцедуры

&НаСервереБезКонтекста
Функция СтруктураДокументаПоСсылке(Ссылка)
	// Параметры, необходимые для работы редактора цепочки документов
	ДопПараметры = Новый Структура;
	ДопПараметры.Вставить("ЗаполнятьТЧОтрезкиПути", Истина);
	ДопПараметры.Вставить("ЗаполнятьВсеКолонкиТЧТовары", Истина);
	ДопПараметры.Вставить("ЗаполнятьВсеКолонкиТЧГрузовойСостав", Истина);
	Возврат уатОбщегоНазначенияКлиентСервер.СтруктураДокумента(Ссылка.ПолучитьОбъект(), "уатЗаказГрузоотправителя", ДопПараметры);
КонецФункции

&НаКлиенте
Процедура ОткрытьРедакторЦепочкиДокументовПродолжение(Результат, ДопПараметры) Экспорт
	Если ТипЗнч(Результат) = Тип("Структура") Тогда
		Если Результат.НеОткрыватьРедакторЦепочкиДокументов Тогда
			НеОткрыватьРедакторЦепочкиДокументов = Истина;
			Модифицированность = Истина;
			ДопПараметры.СтруктураДокументаНовая.НеОткрыватьРедакторЦепочкиДокументов = Истина;
		КонецЕсли;
		Если Результат.ОткрытьРедактор Тогда
			ПараметрыФормы = Новый Структура("СтруктураДокументаНовая, СтруктураДокументаСтарая");
			ЗаполнитьЗначенияСвойств(ПараметрыФормы, ДопПараметры);
			ОткрытьФорму("Обработка.уатРедакторЦепочкиДокументов_уэ.Форма.Форма", ПараметрыФормы, ЭтаФорма);
		КонецЕсли;
		Если ДопПараметры.Свойство("ЗакрытьФорму") И ДопПараметры.ЗакрытьФорму Тогда
			ЗакрытьФорму = Истина;
			ЭтаФорма.Закрыть();
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОткрытьРедакторЦепочкиДокументовОтвет(Результат, ДопПараметры) Экспорт
	
	Если Результат = КодВозвратаДиалога.ОК Тогда
		
		ЗадаватьВопросРедакторЦепочкиДокументов = Ложь;
		Если ЗначениеЗаполнено(ЗаказНаТС) Тогда
			СтруктураДокументаСтарая = СтруктураДокументаПоСсылке(ЗаказНаТС);
			
			ЗаписатьЭтапыКлиент(ЗадаватьВопросРедакторЦепочкиДокументов);
			
			СтруктураДокументаНовая = СтруктураДокументаПоСсылке(ЗаказНаТС);
			
			ДопПараметры = Новый Структура("СтруктураДокументаНовая, СтруктураДокументаСтарая", СтруктураДокументаНовая, СтруктураДокументаСтарая);
			ОткрытьФорму("Обработка.уатРедакторЦепочкиДокументов_уэ.Форма.Форма", ДопПараметры, ЭтаФорма);
		Иначе
			ЗаписатьЭтапыКлиент(ЗадаватьВопросРедакторЦепочкиДокументов);
			ДопПараметры = Новый Структура("ЗаказНаТС", ЗаказНаТС);
			ОткрытьФорму("Обработка.уатРедакторЦепочкиДокументов_уэ.Форма.Форма", ДопПараметры, ЭтаФорма);
		КонецЕсли;
		
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьЭтапыКлиентПослеПроверкиКорректности(ЗадаватьВопросРедакторЦепочкиДокументов, ПараметрыЗаписиЭтапов)
	
	Если ЗадаватьВопросРедакторЦепочкиДокументов И ИспользоватьРедакторЦепочкиДокументов
		И ЗначениеЗаполнено(ЗаказНаТС) И ФлагFTLЗаказ Тогда
		СтруктураДокументаСтарая = СтруктураДокументаПоСсылке(ЗаказНаТС);
	Иначе
		СтруктураДокументаСтарая = Неопределено;
	КонецЕсли;
	
	ДокументыЗаписаныУспешно = ЗаписатьЭтапыНаСервере(ПараметрыЗаписиЭтапов);
	Если ДокументыЗаписаныУспешно Тогда
		ИмяКлючевойОперации = "уатОперации.РедакторСхемыПеревозки.ЗаписьЗаказаНаТС";
		ЦентрМониторингаКлиент.ЗаписатьОперациюБизнесСтатистики(ИмяКлючевойОперации, 1);
		
		ЗагрузитьДанныеИзЗаказа();
		ПередатьДанныеВСхему();
		
		Если ЗадаватьВопросРедакторЦепочкиДокументов И ИспользоватьРедакторЦепочкиДокументов
			И СтруктураДокументаСтарая <> Неопределено Тогда
			СтруктураДокументаНовая = СтруктураДокументаПоСсылке(ЗаказНаТС);
			Если уатОбщегоНазначения_уэ.ТребуетсяОткрытьРедакторЦепочкиДокументов(СтруктураДокументаНовая, СтруктураДокументаСтарая) Тогда
				ДопПараметры = Новый Структура("СтруктураДокументаНовая, СтруктураДокументаСтарая, ЗакрытьФорму", СтруктураДокументаНовая, СтруктураДокументаСтарая, ЗакрытьФорму);
				ЗакрытьФорму = Ложь; // Перед закрытием формы нужно показать вопрос пользователю
				Оповещение = Новый ОписаниеОповещения("ОткрытьРедакторЦепочкиДокументовПродолжение", ЭтотОбъект, ДопПараметры);
				ОткрытьФорму("Документ.уатЗаказГрузоотправителя.Форма.ФормаВопросРедакторЦепочкиДокументов",
					Новый Структура("НеОткрыватьРедакторЦепочкиДокументов", НеОткрыватьРедакторЦепочкиДокументов),
					ЭтаФорма,,,, Оповещение, РежимОткрытияОкнаФормы.БлокироватьОкноВладельца);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
	
	Если ПараметрыЗаписиЭтапов.Свойство("ЗакрытьФорму") И ПараметрыЗаписиЭтапов.ЗакрытьФорму Тогда
		Закрыть();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура СортироватьЭтапы()
	СоответствиеНомеровПунктов = Новый Соответствие;
	Для Каждого ТекПункт Из ТаблицаПунктов Цикл
		СоответствиеНомеровПунктов.Вставить(ТекПункт.id, ТекПункт.НомерСтроки);
	КонецЦикла;
	Для Каждого ТекЭтап Из ТаблицаЭтапов Цикл
		ТекЭтап.НомерЭтапа = СоответствиеНомеровПунктов[ТекЭтап.ПунктОтправленияId];
	КонецЦикла;
	ТаблицаЭтапов.Сортировать("НомерЭтапа");
КонецПроцедуры

&НаКлиенте
Процедура ЗаписатьЭтапыКлиентПерестроениеFTLЗаказаОтвет(Результат, ДопПараметры) Экспорт
	Если Результат = КодВозвратаДиалога.ОК Тогда
		
		Для Каждого ТекСтрока Из ТаблицаПунктов Цикл
			ТекСтрока.НомерСтроки = ДопПараметры.КорректнаяПоследовательностьПунктов.Найти(ТекСтрока.id) + 1;
		КонецЦикла;
		ТаблицаПунктов.Сортировать("НомерСтроки");
		ЗаполнитьНомераСтрокПунктов(); // На всякий случай. Ничего не должно измениться.
		СортироватьЭтапы();
		ПересчитатьВремяРасстояниеМеждуПунктами();
		
		ЗаписатьЭтапыКлиентПослеПроверкиКорректности(ДопПараметры.ЗадаватьВопросРедакторЦепочкиДокументов,
			ДопПараметры.ПараметрыЗаписиЭтапов);
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
		
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	// начало блока стандартных операций
	ДопПараметрыОткрытие = Новый Структура("ИмяФормы", ИмяФормы);
	уатЗащищенныеФункцииСервер.уатОбработкаФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	// конец блока стандартных операций

	Если НЕ Параметры.Свойство("ДокументСсылка") Тогда
		Возврат;
	КонецЕсли;
	
	ДокументСсылка = Параметры.ДокументСсылка;
	КурсДокумента = Параметры.КурсДокумента;
	КратностьДокумента = Параметры.КратностьДокумента;
	ТипЗадолженности = Параметры.ТипЗадолженности;
	Контрагент = Параметры.Контрагент;
	БанковскийСчетКасса = Параметры.БанковскийСчетКасса;
	Организация = Параметры.Организация;
	ВалютаДокумента = Параметры.ВалютаДокумента;
	ДатаДок = Параметры.ДатаДок;
	СуммаДляПодбора = Параметры.СуммаДляПодбора;
	ПлатежПоСуммеВзаиморасчетов = Параметры.ПлатежПоСуммеВзаиморасчетов;
	ЕстьПодбор = Параметры.ЕстьПодбор;
	ЗакрыватьПриВыборе = Параметры.ЗакрыватьПриВыборе;
	
	Для Каждого ТекСтрока Из Параметры.РасшифровкаПлатежа Цикл
		НовСтрока = ДокументРасшифровкаПлатежа.Добавить();
		ЗаполнитьЗначенияСвойств(НовСтрока, ТекСтрока);
	КонецЦикла;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// начало блока стандартных операций
	уатЗащищенныеФункцииКлиент.уатОбработкаФормаПриОткрытии(Отказ, ДопПараметрыОткрытие);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	// конец блока стандартных операций
	
	// Если не установлено значения объекта редактируемого документа,
	// то форму обработки открывать не нужно.
	Если ДокументСсылка = Неопределено Тогда
		Отказ = Истина;
		ТекстНСТР = НСтр("en='Not specified the document to be processed! This processing is called from the form of the instrument.';ru='Не задан документ для обработки! Эта обработка вызывается из формы документа.'");
		ПоказатьПредупреждение(, ТекстНСТР);
		Возврат;
	КонецЕсли;
	
	Заголовок = ?(ТипЗадолженности=">0",НСтр("en='Accounts receivable';ru='Дебиторская'"),НСтр("en='Accounts payable';ru='Кредиторская'"))+" " + НСтр("en='debt. Selection for counterparty';ru='задолженность. Подбор для контрагента'") + " "+Контрагент;
	Элементы.РасшифровкаПлатежаСуммаПлатежа.Заголовок = СтрШаблон("Сумма платежа (%1)", ВалютаДокумента);
	
	СформироватьСписокДолгов();
	
	ОбновитьПредставлениеВалюты();
	
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовТаблицыФормы_РасшифровкаПлатежа

&НаКлиенте
Процедура РасшифровкаПлатежаВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	
	Перем КурсВзаиморасчетов,КратностьВзаиморасчетов,СуммаПлатежа,СуммаВзаиморасчетов;
	
	СтрокаДоговор = Элемент.ТекущиеДанные;
	
	//Если СтрокаДоговор.Валюта <> ВалютаДокумента Тогда
	//	ТекстНСТР = НСтр("en='Allowed selection of debt only in document currency';ru='Разрешен подбор задолженности только в валюте документа'");
	//	ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
	//	Возврат;
	//КонецЕсли;
		
	ДоговорКонтрагента      = СтрокаДоговор.ДоговорКонтрагента;
	Сделка                  = СтрокаДоговор.Сделка;
	КратностьВзаиморасчетов = СтрокаДоговор.КратностьВзаиморасчетов;
	
	СуммаПлатежа        = СтрокаДоговор.СуммаПлатежа;
	КурсВзаиморасчетов  = СтрокаДоговор.КурсВзаиморасчетов;
	СуммаВзаиморасчетов = СтрокаДоговор.СуммаВзаиморасчетов;
	
	СтруктураПодбора = Новый Структура;
	СтруктураПодбора.Вставить("ДоговорКонтрагента",      ДоговорКонтрагента);
	СтруктураПодбора.Вставить("Сделка",                  Сделка);
	СтруктураПодбора.Вставить("СуммаПлатежа",            СуммаПлатежа);
	СтруктураПодбора.Вставить("СуммаВзаиморасчетов",     СуммаВзаиморасчетов);
	СтруктураПодбора.Вставить("ВалютаВзаиморасчетов",    СтрокаДоговор.Валюта);
	СтруктураПодбора.Вставить("КурсВзаиморасчетов",      КурсВзаиморасчетов);
	СтруктураПодбора.Вставить("КратностьВзаиморасчетов", КратностьВзаиморасчетов);
	СтруктураПодбора.Вставить("ЕстьПодбор", ЕстьПодбор);
	Объект.РасшифровкаПлатежа.Удалить(СтрокаДоговор);
	ОповеститьОВыборе(СтруктураПодбора);
	
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

// Отбирает неоплаченные задолженности из сформированной таблицы для подбора.
//
&НаСервере
Процедура СформироватьСписокДолгов() 
	
	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ДокументСсылка", ДокументСсылка);
	СтруктураПараметров.Вставить("Организация", Организация);
	СтруктураПараметров.Вставить("Контрагент", Контрагент);
	СтруктураПараметров.Вставить("ВалютаДокумента", ВалютаДокумента);
	СтруктураПараметров.Вставить("КурсДокумента", КурсДокумента);
	СтруктураПараметров.Вставить("КратностьДокумента", КратностьДокумента);
	СтруктураПараметров.Вставить("ТипЗадолженности", ТипЗадолженности);
	СтруктураПараметров.Вставить("ДатаДок", ДатаДок);
	СтруктураПараметров.Вставить("ЕстьПодбор", ЕстьПодбор);
	СтруктураПараметров.Вставить("ДокументРасшифровкаПлатежа", ДокументРасшифровкаПлатежа.Выгрузить());
	
	ОбработкаОбъект = РеквизитФормыВЗначение("Объект");
	Обработки.уатПодборПараметровРасшифровкиПлатежа.СформироватьСписокДолгов(ОбработкаОбъект, СтруктураПараметров);
	ЗначениеВРеквизитФормы(ОбработкаОбъект, "Объект");
	
КонецПроцедуры // СформироватьСписокДолгов() 

&НаКлиенте
Процедура ОбновитьПредставлениеВалюты()
	
	Для Каждого ТекСтрока Из Объект.РасшифровкаПлатежа Цикл 
		ПредставлениеКурса = Формат(?(ТекСтрока.КратностьВзаиморасчетов=0, 0, ТекСтрока.КурсВзаиморасчетов / ТекСтрока.КратностьВзаиморасчетов), "ЧДЦ=4; ЧН=0,0000");
		ТекСтрока.ВалютаПредставление = "" + ТекСтрока.Валюта + " (" + ПредставлениеКурса + ")";
	КонецЦикла;
	
КонецПроцедуры

#КонецОбласти


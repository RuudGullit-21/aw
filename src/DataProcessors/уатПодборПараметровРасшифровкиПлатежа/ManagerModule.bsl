
#Область СлужебныеПроцедурыИФункции

Процедура СформироватьСписокДолгов(ОбработкаОбъект, СтруктураПараметров) Экспорт
	ДокументСсылка = СтруктураПараметров.ДокументСсылка;
	Организация = СтруктураПараметров.Организация;
	Контрагент = СтруктураПараметров.Контрагент;
	ВалютаДокумента = СтруктураПараметров.ВалютаДокумента;
	КурсДокумента = СтруктураПараметров.КурсДокумента;
	КратностьДокумента = СтруктураПараметров.КратностьДокумента;
	ТипЗадолженности = СтруктураПараметров.ТипЗадолженности;
	ДатаДок = СтруктураПараметров.ДатаДок;
	ЕстьПодбор = СтруктураПараметров.ЕстьПодбор;
	ДокументРасшифровкаПлатежа = СтруктураПараметров.ДокументРасшифровкаПлатежа;
		
	ТабРасшифровка = ОбработкаОбъект.РасшифровкаПлатежа.Выгрузить();
	ТабРасшифровка.Очистить();
	
	УстановитьПривилегированныйРежим(Истина);
	флЕС = Константы.уатКонфигурацияДляЕС.Получить();
	УстановитьПривилегированныйРежим(Ложь);
	
	// Из регистра "уатВзаиморасчетыСКонтрагентами" выбираем задолженности по договорам,
	// не ведущимся по расчетным документам
	
	Запрос = Новый Запрос(
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	РасчетыСКонтрагентамиОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	РасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ВедениеВзаиморасчетов КАК ВедениеВзаиморасчетов,
	|	РасчетыСКонтрагентамиОстатки.Сделка КАК Сделка,
	|	РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток КАК СуммаВзаиморасчетовОстаток,
	|	ВЫБОР
	|		КОГДА РасчетыСКонтрагентамиОстатки.Валюта = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|			ТОГДА РасчетыСКонтрагентамиОстатки.ДоговорКонтрагента.ВалютаВзаиморасчетов
	|		ИНАЧЕ РасчетыСКонтрагентамиОстатки.Валюта
	|	КОНЕЦ КАК ВалютаВзаиморасчетов
	|ПОМЕСТИТЬ ВзаиморасчетыОстатки
	|ИЗ
	|	РегистрНакопления.уатВзаиморасчетыСКонтрагентами.Остатки(
	|			,
	|			Контрагент = &Контрагент
	|				И (&Организация = НЕОПРЕДЕЛЕНО
	|					ИЛИ Организация = &Организация)
	|				И ДоговорКонтрагента.ВидДоговора = &ВидДоговора
	|				И &ОтборыПоДоговорам) КАК РасчетыСКонтрагентамиОстатки
	|;
	|
	|////////////////////////////////////////////////////////////////////////////////
	|ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	ТекущиеЗадолженности.ТипЗадолженности КАК ВидВзаиморасчетов,
	|	ТекущиеЗадолженности.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|	ТекущиеЗадолженности.ВалютаВзаиморасчетов КАК Валюта,
	|	ТекущиеЗадолженности.Сделка КАК Сделка,
	|	ТекущиеЗадолженности.ДатаВозникновения КАК ДатаВозникновения,
	|	МАКСИМУМ(ТекущиеЗадолженности.СуммаВзаиморасчетов) КАК СуммаВзаиморасчетов,
	|	ТекущиеЗадолженности.КурсВзаиморасчетов КАК КурсВзаиморасчетов,
	|	ТекущиеЗадолженности.КратностьВзаиморасчетов КАК КратностьВзаиморасчетов,
	|	МАКСИМУМ(ТекущиеЗадолженности.СуммаПлатежа) КАК СуммаПлатежа
	|ИЗ
	|	(ВЫБРАТЬ
	|		&ПараметрФактические КАК ТипЗадолженности,
	|		РасчетыСКонтрагентамиОстатки.ДоговорКонтрагента КАК ДоговорКонтрагента,
	|		РасчетыСКонтрагентамиОстатки.Сделка КАК Сделка,
	|		РасчетыСКонтрагентамиОстатки.Сделка.Дата КАК ДатаВозникновения,
	|		РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток * &ТипЗадолженностиМножитель КАК СуммаВзаиморасчетов,
	|		КурсыДоговоры.Курс КАК КурсВзаиморасчетов,
	|		КурсыДоговоры.Кратность КАК КратностьВзаиморасчетов,
	|		РасчетыСКонтрагентамиОстатки.ВалютаВзаиморасчетов КАК ВалютаВзаиморасчетов,
	|		ВЫРАЗИТЬ(ВЫБОР
	|				КОГДА РасчетыСКонтрагентамиОстатки.ВалютаВзаиморасчетов = &ВалютаДокумента
	|					ТОГДА РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток * &ТипЗадолженностиМножитель
	|				КОГДА НЕ РасчетыСКонтрагентамиОстатки.ВалютаВзаиморасчетов = &ВалютаДокумента
	|						И НЕ КурсыДоговоры.Курс = 0
	|						И НЕ &КурсДокумента = 0
	|					ТОГДА ВЫБОР
	|							КОГДА &флЕС
	|								ТОГДА РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток * &ТипЗадолженностиМножитель * &КурсДокумента * КурсыДоговоры.Кратность / (КурсыДоговоры.Курс * &КратностьДокумента)
	|							ИНАЧЕ РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток * &ТипЗадолженностиМножитель * КурсыДоговоры.Курс * &КратностьДокумента / (&КурсДокумента * КурсыДоговоры.Кратность)
	|						КОНЕЦ
	|				ИНАЧЕ 0
	|			КОНЕЦ КАК ЧИСЛО(15, 2)) КАК СуммаПлатежа,
	|		ЛОЖЬ КАК ДвиженияДокумента
	|	ИЗ
	|		ВзаиморасчетыОстатки КАК РасчетыСКонтрагентамиОстатки
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаПлатежа, ) КАК КурсыДоговоры
	|			ПО РасчетыСКонтрагентамиОстатки.ВалютаВзаиморасчетов = КурсыДоговоры.Валюта
	|	ГДЕ
	|		РасчетыСКонтрагентамиОстатки.ВедениеВзаиморасчетов <> ЗНАЧЕНИЕ(Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом)
	|		И &ТипЗадолженностиМножитель * РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток > 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		&ПараметрФактические,
	|		РасчетыСКонтрагентамиОстатки.ДоговорКонтрагента,
	|		РасчетыСКонтрагентамиОстатки.Сделка,
	|		ПоследнееДвижение.Период,
	|		РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток * &ТипЗадолженностиМножитель,
	|		КурсыДоговоры.Курс,
	|		КурсыДоговоры.Кратность,
	|		РасчетыСКонтрагентамиОстатки.ВалютаВзаиморасчетов,
	|		ВЫРАЗИТЬ(ВЫБОР
	|				КОГДА РасчетыСКонтрагентамиОстатки.ВалютаВзаиморасчетов = &ВалютаДокумента
	|					ТОГДА РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток * &ТипЗадолженностиМножитель
	|				КОГДА НЕ РасчетыСКонтрагентамиОстатки.ВалютаВзаиморасчетов = &ВалютаДокумента
	|						И НЕ КурсыДоговоры.Курс = 0
	|						И НЕ &КурсДокумента = 0
	|					ТОГДА ВЫБОР
	|							КОГДА &флЕС
	|								ТОГДА РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток * &ТипЗадолженностиМножитель * &КурсДокумента * КурсыДоговоры.Кратность / (КурсыДоговоры.Курс * &КратностьДокумента)
	|							ИНАЧЕ РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток * &ТипЗадолженностиМножитель * КурсыДоговоры.Курс * &КратностьДокумента / (&КурсДокумента * КурсыДоговоры.Кратность)
	|						КОНЕЦ
	|				ИНАЧЕ 0
	|			КОНЕЦ КАК ЧИСЛО(15, 2)),
	|		ЛОЖЬ
	|	ИЗ
	|		ВзаиморасчетыОстатки КАК РасчетыСКонтрагентамиОстатки
	|			ЛЕВОЕ СОЕДИНЕНИЕ РегистрСведений.КурсыВалют.СрезПоследних(&ДатаПлатежа, ) КАК КурсыДоговоры
	|			ПО РасчетыСКонтрагентамиОстатки.ВалютаВзаиморасчетов = КурсыДоговоры.Валюта
	|			ЛЕВОЕ СОЕДИНЕНИЕ (ВЫБРАТЬ
	|				МАКСИМУМ(РасчетыСКонтрагентами.Период) КАК Период,
	|				РасчетыСКонтрагентами.ДоговорКонтрагента КАК ДоговорКонтрагента
	|			ИЗ
	|				РегистрНакопления.уатВзаиморасчетыСКонтрагентами КАК РасчетыСКонтрагентами
	|			ГДЕ
	|				РасчетыСКонтрагентами.Активность = ИСТИНА
	|				И РасчетыСКонтрагентами.ВидДвижения = &ВидДвижения
	|			
	|			СГРУППИРОВАТЬ ПО
	|				РасчетыСКонтрагентами.ДоговорКонтрагента) КАК ПоследнееДвижение
	|			ПО РасчетыСКонтрагентамиОстатки.ДоговорКонтрагента = ПоследнееДвижение.ДоговорКонтрагента
	|	ГДЕ
	|		РасчетыСКонтрагентамиОстатки.ВедениеВзаиморасчетов = ЗНАЧЕНИЕ(Перечисление.ВедениеВзаиморасчетовПоДоговорам.ПоДоговоруВЦелом)
	|		И &ТипЗадолженностиМножитель * РасчетыСКонтрагентамиОстатки.СуммаВзаиморасчетовОстаток > 0
	|	
	|	ОБЪЕДИНИТЬ ВСЕ
	|	
	|	ВЫБРАТЬ
	|		&ПараметрДвижения,
	|		ТЧДокументаПлатежа.ДоговорКонтрагента,
	|		ТЧДокументаПлатежа.Сделка,
	|		ВЫБОР
	|			КОГДА НЕ ТЧДокументаПлатежа.Сделка = НЕОПРЕДЕЛЕНО
	|				ТОГДА ТЧДокументаПлатежа.Сделка.Дата
	|			ИНАЧЕ ТЧДокументаПлатежа.Ссылка.Дата
	|		КОНЕЦ,
	|		ТЧДокументаПлатежа.СуммаВзаиморасчетов,
	|		ТЧДокументаПлатежа.КурсВзаиморасчетов,
	|		ТЧДокументаПлатежа.КратностьВзаиморасчетов,
	|		ВЫБОР
	|			КОГДА ТЧДокументаПлатежа.ВалютаВзаиморасчетов = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
	|				ТОГДА ТЧДокументаПлатежа.ДоговорКонтрагента.ВалютаВзаиморасчетов
	|			ИНАЧЕ ТЧДокументаПлатежа.ВалютаВзаиморасчетов
	|		КОНЕЦ,
	|		ТЧДокументаПлатежа.СуммаПлатежа,
	|		ИСТИНА
	|	ИЗ
	|		Документ.уатПлатежноеПоручениеВходящее.РасшифровкаПлатежа КАК ТЧДокументаПлатежа
	|	ГДЕ
	|		&ДокументУказан
	|		И ТЧДокументаПлатежа.Ссылка = &Регистратор
	|		И ТЧДокументаПлатежа.Ссылка.Проведен) КАК ТекущиеЗадолженности
	|
	|СГРУППИРОВАТЬ ПО
	|	ТекущиеЗадолженности.ТипЗадолженности,
	|	ТекущиеЗадолженности.ДоговорКонтрагента,
	|	ТекущиеЗадолженности.ВалютаВзаиморасчетов,
	|	ТекущиеЗадолженности.Сделка,
	|	ТекущиеЗадолженности.КурсВзаиморасчетов,
	|	ТекущиеЗадолженности.КратностьВзаиморасчетов,
	|	ТекущиеЗадолженности.ДатаВозникновения");
	
	Запрос.Текст = Запрос.Текст + "
	|УПОРЯДОЧИТЬ ПО
	|	ДатаВозникновения " + ?(ОбработкаОбъект.СпособЗаполнения = "ФИФО", "Возр", "Убыв") + ",
	|	Сделка";
	
	Запрос.Текст = СтрЗаменить(Запрос.Текст, "уатПлатежноеПоручениеВходящее", ДокументСсылка.Метаданные().Имя);
	
	Если СтруктураПараметров.Свойство("ОтборыПоДоговорам") И СтруктураПараметров.ОтборыПоДоговорам.Количество() > 0 Тогда
		ИндексОтбора = 1;
		Для Каждого ТекОтбор Из СтруктураПараметров.ДопОтборы Цикл 
			ТекИмяПараметра  = "Значение" + Формат(ИндексОтбора, "ЧГ=");
			ДопСтрокаОтборов = ДопСтрокаОтборов + " И " + ПолучитьСтрокуОтбораПоДоговорам(ТекОтбор.ВидСравнения, "&" + ТекИмяПараметра, Строка(ТекОтбор.ЛевоеЗначение));
			
			Запрос.УстановитьПараметр(ТекИмяПараметра, ТекОтбор.ПравоеЗначение);
			
			ИндексОтбора = ИндексОтбора + 1;
		КонецЦикла;
		Запрос.Текст = СтрЗаменить(Запрос.Текст, "&ОтборыПоДоговорам", ДопСтрокаОтборов);
	КонецЕсли;
	
	Запрос.УстановитьПараметр("ПараметрФактические", "Фактические");
	Запрос.УстановитьПараметр("Организация"        , ?(ЗначениеЗаполнено(Организация), Организация, Неопределено));
	Запрос.УстановитьПараметр("Контрагент"         , Контрагент);
	Запрос.УстановитьПараметр("ВалютаДокумента"    , ВалютаДокумента);
	Запрос.УстановитьПараметр("КурсДокумента"      , КурсДокумента);
	Запрос.УстановитьПараметр("КратностьДокумента" , КратностьДокумента);
	Запрос.УстановитьПараметр("ВидДвижения"        , ?(ТипЗадолженности="<0", ВидДвиженияНакопления.Расход, ВидДвиженияНакопления.Приход));
	Запрос.УстановитьПараметр("ТипЗадолженностиМножитель", ?(ТипЗадолженности="<0", -1, 1));
	Запрос.УстановитьПараметр("ДатаПлатежа"        , ДатаДок);
	Запрос.УстановитьПараметр("Регистратор"        , ?(ДокументСсылка = Неопределено, Неопределено, ДокументСсылка.Ссылка));
	Запрос.УстановитьПараметр("ПараметрОперативные", "Оперативные");
	Запрос.УстановитьПараметр("ПараметрДвижения"   , "Текущий документ");
	Запрос.УстановитьПараметр("ДокументУказан"     , ЗначениеЗаполнено(ДокументСсылка));
	Если ТипЗнч(ДокументСсылка.Ссылка) = Тип("ДокументСсылка.уатПлатежноеПоручениеВходящее")
	 Или ТипЗнч(ДокументСсылка.Ссылка) = Тип("ДокументСсылка.уатПриходныйКассовыйОрдер") Тогда 
		мВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПокупателем;
	Иначе
		мВидДоговора = Перечисления.ВидыДоговоровКонтрагентов.СПоставщиком;
	КонецЕсли;
	Запрос.УстановитьПараметр("ВидДоговора"        , мВидДоговора);
	Запрос.УстановитьПараметр("флЕС"               , флЕС);
	Запрос.УстановитьПараметр("ОтборыПоДоговорам"  , Истина);
	
	Если ДокументСсылка.Метаданные().Имя = "уатЗаявкаНаРасходованиеДС" Тогда
		Запрос.Текст = СтрЗаменить(Запрос.Текст, 
			"ВЫБОР
			|			КОГДА ТЧДокументаПлатежа.ВалютаВзаиморасчетов = ЗНАЧЕНИЕ(Справочник.Валюты.ПустаяСсылка)
			|				ТОГДА ТЧДокументаПлатежа.ДоговорКонтрагента.ВалютаВзаиморасчетов
			|			ИНАЧЕ ТЧДокументаПлатежа.ВалютаВзаиморасчетов
			|		КОНЕЦ",
			"ТЧДокументаПлатежа.ДоговорКонтрагента.ВалютаВзаиморасчетов");
	КонецЕсли;
	
	ТабРезультат = Запрос.Выполнить().Выгрузить();
	
	Если ЕстьПодбор Тогда
		// убираем из таблицы значения, уже присутствующие в форме документа
		Для Каждого СтрокаДок Из ДокументРасшифровкаПлатежа Цикл
			
			МассивКУдалению = Новый Массив;
			
			СуммаПлатежаДок        = СтрокаДок.СуммаПлатежа;
			СуммаВзаиморасчетовДок = СтрокаДок.СуммаВзаиморасчетов;
			
			СтруктураПоиска=Новый Структура;
			СтруктураПоиска.Вставить("ДоговорКонтрагента", СтрокаДок.ДоговорКонтрагента);
			СтруктураПоиска.Вставить("Сделка"            , СтрокаДок.Сделка);
			
			МассивПодбора = ТабРезультат.НайтиСтроки(СтруктураПоиска);
			
			Для Индекс = 0 По МассивПодбора.Количество()-1 Цикл
				
				СтрокаПодбор = МассивПодбора[Индекс];
				
				Если СтрокаПодбор.СуммаПлатежа >= СуммаПлатежаДок И СтрокаПодбор.СуммаВзаиморасчетов >= СуммаВзаиморасчетовДок Тогда
					
					СтрокаПодбор.СуммаПлатежа        = СтрокаПодбор.СуммаПлатежа-СуммаПлатежаДок;
					СтрокаПодбор.СуммаВзаиморасчетов = СтрокаПодбор.СуммаВзаиморасчетов-СуммаВзаиморасчетовДок;
					
					СуммаПлатежаДок        = 0;
					СуммаВзаиморасчетовДок = 0;
					
				ИначеЕсли СтрокаПодбор.СуммаПлатежа>0 И СтрокаПодбор.СуммаВзаиморасчетов>0 Тогда
					
					СуммаСписанияПлатеж  = Мин(СуммаПлатежаДок,СтрокаПодбор.СуммаПлатежа);
					СуммаСписанияРасчеты = Мин(СуммаВзаиморасчетовДок,СтрокаПодбор.СуммаВзаиморасчетов);
					
					СтрокаПодбор.СуммаПлатежа        = СтрокаПодбор.СуммаПлатежа-СуммаСписанияПлатеж;
					СтрокаПодбор.СуммаВзаиморасчетов = СтрокаПодбор.СуммаВзаиморасчетов-СуммаСписанияРасчеты;
					
					СуммаПлатежаДок        = СуммаПлатежаДок-СуммаСписанияПлатеж;
					СуммаВзаиморасчетовДок = СуммаВзаиморасчетовДок-СуммаСписанияРасчеты;
					
				КонецЕсли;
				
				Если Не (СтрокаПодбор.СуммаВзаиморасчетов=0 Или СтрокаПодбор.СуммаПлатежа=0) Тогда
					Если КратностьДокумента=0 Тогда
						СтрокаПодбор.КурсВзаиморасчетов = 0;
					Иначе
						Если флЕС Тогда
							СтрокаПодбор.КурсВзаиморасчетов = Окр((СтрокаПодбор.СуммаПлатежа * КратностьДокумента
								/(СтрокаПодбор.СуммаВзаиморасчетов * КурсДокумента * СтрокаПодбор.КратностьВзаиморасчетов)), 4);
						Иначе 
							СтрокаПодбор.КурсВзаиморасчетов = Окр((СтрокаПодбор.СуммаПлатежа * КурсДокумента * СтрокаПодбор.КратностьВзаиморасчетов
								/(СтрокаПодбор.СуммаВзаиморасчетов * КратностьДокумента)), 4);
						КонецЕсли;
					КонецЕсли;
				Иначе
					
					МассивКУдалению.Добавить(СтрокаПодбор);
					
				КонецЕсли;
				
				Если СуммаПлатежаДок = 0 И СуммаВзаиморасчетовДок = 0 Тогда
					
					Прервать;
					
				КонецЕсли;
				
			КонецЦикла;
			
			Для Каждого Строка Из МассивКУдалению Цикл
				
				ТабРезультат.Удалить(Строка);
				
			КонецЦикла;
			
		КонецЦикла;
		
	КонецЕсли;
	
	уатОбщегоНазначенияТиповые.ЗагрузитьВТаблицуЗначений(ТабРезультат, ТабРасшифровка);
	
	ОбработкаОбъект.РасшифровкаПлатежа.Загрузить(ТабРасшифровка);
КонецПроцедуры

// Функция возвращает Строку Вида отбора для запроса
// 
// Параметры
// ВыбВидСравнения       - ВидСравнения
// ЗначениеОтбора        - Значение отбора запроса
// СтрокаПоляОтбора      - Строка, Аргумент запроса, т.е. то что должно быть написано до вида сравнения
// ЗначениеОтбораС       - Произвольный, значение отбора для видов сравнения, у которых необходимо 
//							указывать два значения, начальное значение
// ЗначениеОтбораПо      - Произвольный, значение отбора для видов сравнения, у которых необходимо
//							указывать два значения, конечное значение
// СамоЗначение          - Значение отбора запроса
// СамоЗначениеС         - Произвольный, значение отбора для видов сравнения, у которых необходимо 
//							указывать два значения, начальное значение
// СамоЗначениеПо        - Произвольный, значение отбора для видов сравнения, у которых необходимо
//							указывать два значения, начальное значение
//
// Возвращаемое значение 
//  Строка для запроса
//
Функция ПолучитьСтрокуОтбораПоДоговорам(ВыбВидСравнения, ЗначениеОтбора, СтрокаПоляОтбора, ЗначениеОтбораС = Неопределено, 
		ЗначениеОтбораПо = Неопределено, СамоЗначение = Неопределено, СамоЗначениеС = Неопределено, 
		СамоЗначениеПо = Неопределено)
	
	СтрокаВозврата = "";
	Если ВыбВидСравнения = ВидСравненияКомпоновкиДанных.Равно Тогда
		СтрокаВозврата = СтрокаПоляОтбора + Строка(" = " + ЗначениеОтбора);
	ИначеЕсли ВыбВидСравнения = ВидСравненияКомпоновкиДанных.НеРавно Тогда
		СтрокаВозврата = СтрокаПоляОтбора + Строка(" <> " + ЗначениеОтбора);
	ИначеЕсли ВыбВидСравнения = ВидСравненияКомпоновкиДанных.ВСписке Тогда
		СтрокаВозврата = СтрокаПоляОтбора + Строка(" В (" + ЗначениеОтбора+")");
	ИначеЕсли ВыбВидСравнения = ВидСравненияКомпоновкиДанных.ВСпискеПоИерархии 
		ИЛИ ВыбВидСравнения = ВидСравненияКомпоновкиДанных.ВИерархии Тогда
			СтрокаВозврата = СтрокаПоляОтбора + Строка(" В ИЕРАРХИИ(" + ЗначениеОтбора+")");
	ИначеЕсли ВыбВидСравнения = ВидСравненияКомпоновкиДанных.НеВСписке Тогда
		СтрокаВозврата = СтрокаПоляОтбора + Строка(" НЕ В (" + ЗначениеОтбора+")");
	ИначеЕсли ВыбВидСравнения = ВидСравненияКомпоновкиДанных.НеВСпискеПоИерархии 
		ИЛИ ВыбВидСравнения = ВидСравненияКомпоновкиДанных.НеВИерархии Тогда
			СтрокаВозврата = СтрокаПоляОтбора + Строка(" НЕ В ИЕРАРХИИ(" + ЗначениеОтбора+")");
	ИначеЕсли ВыбВидСравнения = ВидСравненияКомпоновкиДанных.Больше Тогда
		СтрокаВозврата = СтрокаПоляОтбора + Строка(" > " + ЗначениеОтбора);
	ИначеЕсли ВыбВидСравнения = ВидСравненияКомпоновкиДанных.БольшеИлиРавно Тогда
		СтрокаВозврата = СтрокаПоляОтбора + Строка(" >= " + ЗначениеОтбора);
	ИначеЕсли ВыбВидСравнения = ВидСравненияКомпоновкиДанных.Меньше Тогда
		Если НЕ (ТипЗнч(СамоЗначение) = Тип("Дата") И НЕ ЗначениеЗаполнено(СамоЗначение)) Тогда
			СтрокаВозврата = СтрокаПоляОтбора + Строка(" < " + ЗначениеОтбора);
		КонецЕсли; 
	ИначеЕсли ВыбВидСравнения = ВидСравненияКомпоновкиДанных.МеньшеИлиРавно Тогда
		Если НЕ (ТипЗнч(СамоЗначение) = Тип("Дата") И НЕ ЗначениеЗаполнено(СамоЗначение)) Тогда
			СтрокаВозврата = СтрокаПоляОтбора + Строка(" <= " + ЗначениеОтбора);
		КонецЕсли; 
	КонецЕсли;
	
	Возврат СтрокаВозврата;
	
КонецФункции // ПолучитьСтрокуОтбораПоДоговорам()

#КонецОбласти

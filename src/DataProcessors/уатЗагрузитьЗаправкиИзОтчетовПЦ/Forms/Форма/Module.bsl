
#Область ОписаниеПеременных

&НаКлиенте
Перем ФормаДлительнойОперации;

&НаКлиенте
Перем ПараметрыОбработчикаОжидания;

#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	// начало блока стандартных операций
	ДопПараметрыОткрытие = Новый Структура("ИмяФормы", ИмяФормы);
	уатЗащищенныеФункцииСервер.уатОбработкаФормаПриСозданииНаСервере(Отказ, СтандартнаяОбработка, ДопПараметрыОткрытие);
	Если Отказ тогда
		Возврат;
	КонецЕсли;
	// конец блока стандартных операций
	
	РежимРаботы = 0; // Создание новых документов
	
	// сформируем список ГСМ
	Запрос = Новый Запрос;
	Запрос.Текст = 
	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатНоменклатураГСМ.Номенклатура.Ссылка КАК ГСМ
	|ИЗ
	|	РегистрСведений.уатНоменклатураГСМ КАК уатНоменклатураГСМ
	|ГДЕ
	|	уатНоменклатураГСМ.ГруппаГСМ = &ГруппаГСМ";
	
	Запрос.УстановитьПараметр("ГруппаГСМ", Перечисления.уатГруппыГСМ.Топливо);
	Выборка = Запрос.Выполнить().Выбрать();
	
	СписокГСМ.Очистить();
	Пока Выборка.Следующий() Цикл
		СписокГСМ.Добавить(Выборка.ГСМ);
	КонецЦикла;
	
	// сформируем список ТК
	Запрос = Новый Запрос;
	Запрос.Текст = 
	
	"ВЫБРАТЬ РАЗРЕШЕННЫЕ
	|	уатПластиковыеКарты.Ссылка КАК Ссылка
	|ИЗ
	|	Справочник.уатПластиковыеКарты КАК уатПластиковыеКарты
	|ГДЕ
	|	НЕ уатПластиковыеКарты.ПометкаУдаления
	|			И уатПластиковыеКарты.Статус.Действует = ИСТИНА";
	Выборка = Запрос.Выполнить().Выбрать();
	
	СписокТК.Очистить();
	Пока Выборка.Следующий() Цикл
		СписокТК.Добавить(Выборка.Ссылка);
	КонецЦикла;

	Если уатОбщегоНазначенияПовтИсп.ВариантПоставкиСТД()
		ИЛИ НЕ ПолучитьФункциональнуюОпцию("уатИспользоватьТехнологическиеПутевыеЛисты") Тогда
		Элементы.ГруппаПредупреждениеТПЛ.Видимость = Ложь;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	// начало блока стандартных операций
	уатЗащищенныеФункцииКлиент.уатОбработкаФормаПриОткрытии(Отказ, ДопПараметрыОткрытие);
	Если Отказ Тогда
		Возврат;
	КонецЕсли;
	// конец блока стандартных операций
	
	ЗагрузитьНастройки();
	УстановитьВидимость();

КонецПроцедуры

&НаКлиенте
Процедура ПриЗакрытии(ЗавершениеРаботы)
	Если ЗавершениеРаботы Тогда
		Возврат;
	КонецЕсли;
	
	СохранитьНастройки();
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ВыполнитьОбработку(Команда)
	ПроверкаКорректности(Новый ОписаниеОповещения("ВыполнитьОбработкуЗавершение1", ЭтотОбъект));
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТКПоАЗС(Команда)
	ЗаполнитьТКПоОтбору(СписокТК, "КемВыдана", Объект.АЗС);
КонецПроцедуры

&НаКлиенте
Процедура ЗаполнитьТКПоКонтрагенту(Команда)
	ЗаполнитьТКПоОтбору(СписокТК, "КемВыдана", Объект.Контрагент);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработкуЗавершение1(Результат, ДополнительныеПараметры) Экспорт
	
	Если НЕ Результат Тогда
		Возврат;
	КонецЕсли;
	
	ОбработанныеДокументы.Очистить();
	ИнициализацияФормыДлительнойОперации();
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработкуЗавершение(РезультатВопроса, ДополнительныеПараметры) Экспорт
	
	Ответ = РезультатВопроса;
	флОткрытьФормы = Ответ = КодВозвратаДиалога.ОК;
	
	ВыполнитьОбработкуФрагмент(флОткрытьФормы);
	
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьОбработкуФрагмент(Знач флОткрытьФормы)
    
    Перем ТекСтрока;
    
    Если флОткрытьФормы Тогда
        Для Каждого ТекСтрока Из ОбработанныеДокументы Цикл
            Если ТипЗнч(ТекСтрока.Значение) = Тип("ДокументСсылка.уатЗаправкаГСМ")
                ИЛИ ТипЗнч(ТекСтрока.Значение) = Тип("ДокументСсылка.уатСливГСМ") Тогда
                ПоказатьЗначение(Неопределено, ТекСтрока.Значение);
            КонецЕсли;
        КонецЦикла;
    КонецЕсли;

КонецПроцедуры

&НаКлиенте
Процедура НастройкаПериода(Команда)
	ДиалогПериода = Новый ДиалогРедактированияСтандартногоПериода();
	ДиалогПериода.Период.ДатаНачала = Объект.ДатаНач;
	ДиалогПериода.Период.ДатаОкончания = Объект.ДатаКон;
	ДиалогПериода.Показать(Новый ОписаниеОповещения("НастройкаПериодаЗавершение", ЭтотОбъект));
КонецПроцедуры

&НаКлиенте
Процедура НастройкаПериодаЗавершение(Период, ДополнительныеПараметры) Экспорт
	
	Если Не Период = Неопределено Тогда
		Объект.ДатаНач = Период.ДатаНачала;
		Объект.ДатаКон = Период.ДатаОкончания;
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура АЗСПриИзменении(Элемент)
	
	Объект.Контрагент = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
	Если ЗначениеЗаполнено(Объект.АЗС) Тогда
		Объект.Контрагент = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.АЗС, "Контрагент_Склад");
		
		ЭтоАЗСсклад = (уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.АЗС, "ЭтоАЗССклад") = Истина);
		Если ЭтоАЗССклад Тогда
			Объект.Контрагент = ПредопределенноеЗначение("Справочник.Контрагенты.ПустаяСсылка");
		КонецЕсли;
		
	КонецЕсли;
	
	Элементы.ГруппаНастройкиОбмена.Доступность		 = Истина;
	Элементы.ГруппаПрофильОбмена.Видимость			 = Ложь;
	
	ПрофильОбменаСПЦ = уатОбщегоНазначенияТиповые.ПолучитьЗначениеРеквизита(Объект.АЗС, "ПрофильОбменаСПЦ");
	Если ЗначениеЗаполнено(Объект.АЗС)
		И ЗначениеЗаполнено(ПрофильОбменаСПЦ) Тогда
		
		Элементы.ГруппаНастройкиОбмена.Доступность		 = Ложь;
		Элементы.ГруппаПрофильОбмена.Видимость			 = Истина;
				
		стПрофильОбменаСПЦ = уатОбщегоНазначенияТиповые.ПолучитьЗначенияРеквизитов(ПрофильОбменаСПЦ, "ГлубинаПоискаПЛДоВыезда,ГлубинаПоискаПЛПослеВозвращения,ТолькоПроверенные,
		|ОбрабатыватьРассчитанныеПутевыеЛисты, ПересчитатьПутевыеЛисты,ПроводитьСозданныеЗаправкиГСМ,ОткрыватьФормыЗаписанныхЗаправок,
		|СоздаватьСливыДляОтрицательныхЗаправок,КомментироватьХодВыполнения,ПроверятьНаличееДублейПоСозданнымРанееДокументам,ЗаменятьАналогНаОсновноеТопливо");
		Элементы.ДекорацияПрофильОбмена.Заголовок		 = ПрофильОбменаСПЦ;
		
		Объект.ГлубинаПоискаПЛДоВыезда					 = стПрофильОбменаСПЦ.ГлубинаПоискаПЛДоВыезда;
		Объект.ГлубинаПоискаПЛПослеВозвращения			 = стПрофильОбменаСПЦ.ГлубинаПоискаПЛПослеВозвращения;
		Объект.ТолькоПроверенные						 = стПрофильОбменаСПЦ.ТолькоПроверенные;
		ОбрабатыватьРассчитанныеПутевыеЛисты			 = стПрофильОбменаСПЦ.ОбрабатыватьРассчитанныеПутевыеЛисты;
		ПересчитатьПутевыеЛисты							 = стПрофильОбменаСПЦ.ПересчитатьПутевыеЛисты;
		ПроводитьСозданныеЗаправкиГСМ					 = стПрофильОбменаСПЦ.ПроводитьСозданныеЗаправкиГСМ;
		ОткрыватьФормыЗаписанныхЗаправок				 = стПрофильОбменаСПЦ.ОткрыватьФормыЗаписанныхЗаправок;
		СоздаватьСливыДляОтрицательныхЗаправок			 = стПрофильОбменаСПЦ.СоздаватьСливыДляОтрицательныхЗаправок;
		КомментироватьХодВыполнения				         = стПрофильОбменаСПЦ.КомментироватьХодВыполнения;
		ПроверятьНаличееДублейПоСозданнымРанееДокументам = стПрофильОбменаСПЦ.ПроверятьНаличееДублейПоСозданнымРанееДокументам;
		ЗаменятьАналогНаОсновноеТопливо					 = стПрофильОбменаСПЦ.ЗаменятьАналогНаОсновноеТопливо;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПрофильОбменаНажатие(Элемент)
	Оповещение = Новый ОписаниеОповещения("ДекорацияПрофильОбменаНажатиеЗавершение", ЭтотОбъект);
	ОткрытьФорму("Справочник.уатПрофилиОбменаСВнешнимиСистемами.Форма.ФормаЭлемента",Новый Структура("Ключ, Режим", ПрофильОбменаСПЦ, 2),ЭтотОбъект,,,,Оповещение);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияПрофильОбменаНажатиеЗавершение(Результат, ДополнительныеПараметры) Экспорт
	АЗСПриИзменении(Неопределено);
КонецПроцедуры

&НаКлиенте
Процедура РежимРаботыПриИзменении(Элемент)
	УстановитьВидимость();
КонецПроцедуры

#КонецОбласти


#Область ОбработчикиСобытийЭлементовТаблицыФормыОбработанныеДокументы

&НаКлиенте
Процедура ОбработанныеДокументыВыбор(Элемент, ВыбраннаяСтрока, Поле, СтандартнаяОбработка)
	СтандартнаяОбработка = Ложь;
	ТекДок = Элементы.ОбработанныеДокументы.ТекущиеДанные.Значение;
	Если ЗначениеЗаполнено(ТекДок) Тогда
		ПоказатьЗначение(Неопределено, ТекДок);
	КонецЕсли;
КонецПроцедуры

&НаКлиенте
Процедура ОбработанныеДокументыПередНачаломИзменения(Элемент, Отказ)
	
	Отказ = Истина;
	ПоказатьЗначение(Неопределено, Элементы.ОбработанныеДокументы.ТекущиеДанные.Значение);
	
КонецПроцедуры

#КонецОбласти


#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьВидимость()
	Элементы.ПроверятьНаличееДублейПоСозданнымРанееДокументам.Видимость = РежимРаботы = 0;
	Элементы.ПроводитьСозданныеЗаправкиГСМ.Видимость                    = РежимРаботы = 0;
	Элементы.СоздаватьСливыДляОтрицательныхЗаправок.Видимость           = РежимРаботы = 0;
	Элементы.ЗаменятьАналогНаОсновноеТопливо.Видимость                  = РежимРаботы = 0;  
	Элементы.ОткрыватьФормыЗаписанныхЗаправок.Видимость                 = РежимРаботы = 0;
	Элементы.ОбрабатыватьРассчитанныеПутевыеЛисты.Видимость             = РежимРаботы = 0;
	Элементы.ПересчитатьПутевыеЛисты.Видимость                          = РежимРаботы = 0; 
	Элементы.КомментироватьХодВыполнения.Видимость                      = РежимРаботы = 0;
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаКорректности(Знач Оповещение)
	Если Объект.ДатаНач = '00010101' ИЛИ Объект.ДатаКон = '00010101' Тогда
		ПоказатьПредупреждение(Новый ОписаниеОповещения("ПроверкаКорректностиЗавершение", ЭтотОбъект, Новый Структура("Оповещение", Оповещение)), "Не указан период!");
		Возврат;
	КонецЕсли;
	
	Если Объект.ДатаНач > Объект.ДатаКон И Объект.ДатаКон <> '00010101' Тогда
		ПоказатьПредупреждение(Новый ОписаниеОповещения("ПроверкаКорректностиЗавершениеБольшеДатыконца", ЭтотОбъект, Новый Структура("Оповещение", Оповещение)), "Дата начала периода не может быть больше даты конца периода!");
		Возврат;
	КонецЕсли;
	
	Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(Объект.АЗС) Тогда
		Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(Объект.Контрагент) Тогда
			ПоказатьПредупреждение(Новый ОписаниеОповещения("ПроверкаКорректностиЗавершениеАЗС", ЭтотОбъект, Новый Структура("Оповещение", Оповещение)), "Не выбрана АЗС!");
			Возврат;
		КонецЕсли;
	КонецЕсли;
	
	Если уатОбщегоНазначения.уатЗначениеНеЗаполнено(Объект.Организация) Тогда
		ПоказатьПредупреждение(Новый ОписаниеОповещения("ПроверкаКорректностиЗавершениеОрганизация", ЭтотОбъект, Новый Структура("Оповещение", Оповещение)), "Не выбрана организация!");
		Возврат;
	КонецЕсли;
	
	флЕстьГСМ = Ложь;
	Для Каждого ТекЭлемент Из СписокГСМ Цикл
		флЕстьГСМ = флЕстьГСМ ИЛИ ТекЭлемент.Пометка;
	КонецЦикла;
	Если НЕ флЕстьГСМ Тогда
		ПоказатьПредупреждение(Новый ОписаниеОповещения("ПроверкаКорректностиЗавершениеГСМ", ЭтотОбъект, Новый Структура("Оповещение", Оповещение)), "Не выбраны виды ГСМ!");
		Возврат;
	КонецЕсли;
	
	ВыполнитьОбработкуОповещения(Оповещение, Истина);
	Возврат;
КонецПроцедуры

&НаКлиенте
Процедура ПроверкаКорректностиЗавершениеГСМ(ДополнительныеПараметры) Экспорт
    
    Оповещение = ДополнительныеПараметры.Оповещение;
    
    
    ВыполнитьОбработкуОповещения(Оповещение, Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ПроверкаКорректностиЗавершениеОрганизация(ДополнительныеПараметры) Экспорт
    
    Оповещение = ДополнительныеПараметры.Оповещение;
    
    
    ВыполнитьОбработкуОповещения(Оповещение, Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ПроверкаКорректностиЗавершениеАЗС(ДополнительныеПараметры) Экспорт
    
    Оповещение = ДополнительныеПараметры.Оповещение;
    
    
    ВыполнитьОбработкуОповещения(Оповещение, Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ПроверкаКорректностиЗавершениеБольшеДатыконца(ДополнительныеПараметры) Экспорт
    
    Оповещение = ДополнительныеПараметры.Оповещение;
    
    
    ВыполнитьОбработкуОповещения(Оповещение, Ложь);

КонецПроцедуры

&НаКлиенте
Процедура ПроверкаКорректностиЗавершение(ДополнительныеПараметры) Экспорт
    
    Оповещение = ДополнительныеПараметры.Оповещение;
    
    
    ВыполнитьОбработкуОповещения(Оповещение, Ложь);

КонецПроцедуры

&НаСервере
Процедура ЗагрузитьНастройки()
	
	СтруктураНастроек    = ХранилищеНастроекДанныхФорм.Загрузить("Обработка.уатЗагрузитьЗаправкиИзОтчетовПЦ.Форма.ОсновнаяФорма",
		"уатЗагрузитьЗаправкиИзОтчетовПЦ_ОбщиеНастройки");
	НастройкиНекорректны = (СтруктураНастроек = Неопределено Или ТипЗнч(СтруктураНастроек) <> Тип("Структура"));
		
	Если НастройкиНекорректны Или (Не СтруктураНастроек.Свойство("ДатаНач")) Тогда
		Объект.ДатаНач = Дата(1, 1, 1);
	Иначе
		Объект.ДатаНач = СтруктураНастроек.ДатаНач;
	КонецЕсли;
	
	Если НастройкиНекорректны Или (Не СтруктураНастроек.Свойство("ДатаКон")) Тогда
		Объект.ДатаНач = Дата(1, 1, 1);
	Иначе
		Объект.ДатаКон = СтруктураНастроек.ДатаКон;
	КонецЕсли;
		
	Если НастройкиНекорректны Или (Не СтруктураНастроек.Свойство("Организация")) Тогда
		Объект.Организация = Справочники.Организации.ПустаяСсылка();
	Иначе
		Объект.Организация = СтруктураНастроек.Организация;
	КонецЕсли;
	
	Если НастройкиНекорректны Или (Не СтруктураНастроек.Свойство("АЗС")) Тогда
		Объект.АЗС = Справочники.уатАЗС.ПустаяСсылка();
	Иначе
		Объект.АЗС = СтруктураНастроек.АЗС;
	КонецЕсли;
	
	Если НастройкиНекорректны Или (Не СтруктураНастроек.Свойство("Контрагент")) Тогда
		Объект.Контрагент = Справочники.Контрагенты.ПустаяСсылка();
	Иначе
		Объект.Контрагент = СтруктураНастроек.Контрагент;
	КонецЕсли;
	
	ПрофильОбменаСПЦ = Объект.АЗС.ПрофильОбменаСПЦ;
	Если ЗначениеЗаполнено(Объект.АЗС)
		И ЗначениеЗаполнено(ПрофильОбменаСПЦ) Тогда
		
		Элементы.ГруппаНастройкиОбмена.Доступность		 = Ложь;
		Элементы.ГруппаПрофильОбмена.Видимость			 = Истина;
		
		Элементы.ДекорацияПрофильОбмена.Заголовок		 = ПрофильОбменаСПЦ.Наименование;

		Объект.ГлубинаПоискаПЛДоВыезда					 = ПрофильОбменаСПЦ.ГлубинаПоискаПЛДоВыезда;
		Объект.ГлубинаПоискаПЛПослеВозвращения			 = ПрофильОбменаСПЦ.ГлубинаПоискаПЛПослеВозвращения;
		Объект.ТолькоПроверенные						 = ПрофильОбменаСПЦ.ТолькоПроверенные;
		ОбрабатыватьРассчитанныеПутевыеЛисты			 = ПрофильОбменаСПЦ.ОбрабатыватьРассчитанныеПутевыеЛисты;
		ПересчитатьПутевыеЛисты							 = ПрофильОбменаСПЦ.ПересчитатьПутевыеЛисты;
		ПроводитьСозданныеЗаправкиГСМ					 = ПрофильОбменаСПЦ.ПроводитьСозданныеЗаправкиГСМ;
		ОткрыватьФормыЗаписанныхЗаправок				 = ПрофильОбменаСПЦ.ОткрыватьФормыЗаписанныхЗаправок;
		СоздаватьСливыДляОтрицательныхЗаправок			 = ПрофильОбменаСПЦ.СоздаватьСливыДляОтрицательныхЗаправок;
		КомментироватьХодВыполнения				         = ПрофильОбменаСПЦ.КомментироватьХодВыполнения;
		ПроверятьНаличееДублейПоСозданнымРанееДокументам = ПрофильОбменаСПЦ.ПроверятьНаличееДублейПоСозданнымРанееДокументам;
		ЗаменятьАналогНаОсновноеТопливо					 = ПрофильОбменаСПЦ.ЗаменятьАналогНаОсновноеТопливо;
	Иначе
		Элементы.ГруппаНастройкиОбмена.Доступность		 = Истина;
		Элементы.ГруппаПрофильОбмена.Видимость			 = Ложь;
		
		Если НастройкиНекорректны Или (Не СтруктураНастроек.Свойство("ГлубинаПоискаПЛДоВыезда")) Тогда
			Объект.ГлубинаПоискаПЛДоВыезда = 0;
		Иначе
			Объект.ГлубинаПоискаПЛДоВыезда = СтруктураНастроек.ГлубинаПоискаПЛДоВыезда;
		КонецЕсли;
		
		Если НастройкиНекорректны Или (Не СтруктураНастроек.Свойство("ГлубинаПоискаПЛПослеВозвращения")) Тогда
			Объект.ГлубинаПоискаПЛПослеВозвращения = 0;
		Иначе
			Объект.ГлубинаПоискаПЛПослеВозвращения = СтруктураНастроек.ГлубинаПоискаПЛПослеВозвращения;
		КонецЕсли;
		
		Если НастройкиНекорректны Или (Не СтруктураНастроек.Свойство("ТолькоПроверенные")) Тогда
			Объект.ТолькоПроверенные = Ложь;
		Иначе
			Объект.ТолькоПроверенные = СтруктураНастроек.ТолькоПроверенные;
		КонецЕсли;
		
		Если НастройкиНекорректны Или (Не СтруктураНастроек.Свойство("ОбрабатыватьРассчитанныеПутевыеЛисты")) Тогда
			ОбрабатыватьРассчитанныеПутевыеЛисты = Ложь;
		Иначе
			ОбрабатыватьРассчитанныеПутевыеЛисты = СтруктураНастроек.ОбрабатыватьРассчитанныеПутевыеЛисты;
		КонецЕсли;
		Если НастройкиНекорректны Или (Не СтруктураНастроек.Свойство("ПересчитатьПутевыеЛисты")) Тогда
			ПересчитатьПутевыеЛисты = Ложь;
		Иначе
			ПересчитатьПутевыеЛисты = СтруктураНастроек.ПересчитатьПутевыеЛисты;
		КонецЕсли;
		Если НастройкиНекорректны Или (Не СтруктураНастроек.Свойство("ПроводитьСозданныеЗаправкиГСМ")) Тогда
			ПроводитьСозданныеЗаправкиГСМ = Ложь;
		Иначе
			ПроводитьСозданныеЗаправкиГСМ = СтруктураНастроек.ПроводитьСозданныеЗаправкиГСМ;
		КонецЕсли;
		Если НастройкиНекорректны Или (Не СтруктураНастроек.Свойство("ОткрыватьФормыЗаписанныхЗаправок")) Тогда
			ОткрыватьФормыЗаписанныхЗаправок = Ложь;
		Иначе
			ОткрыватьФормыЗаписанныхЗаправок = СтруктураНастроек.ОткрыватьФормыЗаписанныхЗаправок;
		КонецЕсли;
		Если НастройкиНекорректны Или (Не СтруктураНастроек.Свойство("СоздаватьСливыДляОтрицательныхЗаправок")) Тогда
			СоздаватьСливыДляОтрицательныхЗаправок = Ложь;
		Иначе
			СоздаватьСливыДляОтрицательныхЗаправок = СтруктураНастроек.СоздаватьСливыДляОтрицательныхЗаправок;
		КонецЕсли;
		Если НастройкиНекорректны Или (Не СтруктураНастроек.Свойство("КомментироватьХодВыполнения")) Тогда
			КомментироватьХодВыполнения = Ложь;
		Иначе
			КомментироватьХодВыполнения = СтруктураНастроек.КомментироватьХодВыполнения;
		КонецЕсли;
		
		Если НастройкиНекорректны Или (Не СтруктураНастроек.Свойство("ПроверятьНаличееДублейПоСозданнымРанееДокументам")) Тогда
			ПроверятьНаличееДублейПоСозданнымРанееДокументам = 0;
		Иначе
			ПроверятьНаличееДублейПоСозданнымРанееДокументам = СтруктураНастроек.ПроверятьНаличееДублейПоСозданнымРанееДокументам;
		КонецЕсли;
		
		Если НастройкиНекорректны Или (Не СтруктураНастроек.Свойство("ЗаменятьАналогНаОсновноеТопливо")) Тогда
			ЗаменятьАналогНаОсновноеТопливо = Ложь;
		Иначе
			ЗаменятьАналогНаОсновноеТопливо = СтруктураНастроек.ЗаменятьАналогНаОсновноеТопливо;
		КонецЕсли;
	КонецЕсли;
	
	Если НастройкиНекорректны Или (Не СтруктураНастроек.Свойство("СписокГСМ")) Тогда
		
	Иначе
		Для Каждого ТекГСМ Из СписокГСМ Цикл
			НайденноеГСМ = СтруктураНастроек.СписокГСМ.НайтиПоЗначению(ТекГСМ.Значение);
			Если НайденноеГСМ <> Неопределено Тогда
				ТекГСМ.Пометка = НайденноеГСМ.Пометка;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
	Если НастройкиНекорректны Или (Не СтруктураНастроек.Свойство("СписокТК")) Тогда
		
	Иначе
		Для Каждого ТекТК Из СписокТК Цикл
			НайденноеТК = СтруктураНастроек.СписокТК.НайтиПоЗначению(ТекТК.Значение);
			Если НайденноеТК <> Неопределено Тогда
				ТекТК.Пометка = НайденноеТК.Пометка;
			КонецЕсли;
		КонецЦикла;
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Процедура СохранитьНастройки()
	УстановитьПривилегированныйРежим(Истина);
	
	СтруктураНастроек = Новый Структура;
	СтруктураНастроек.Вставить("ТолькоПроверенные",                      Объект.ТолькоПроверенные);
	СтруктураНастроек.Вставить("ОбрабатыватьРассчитанныеПутевыеЛисты",   ОбрабатыватьРассчитанныеПутевыеЛисты);
	СтруктураНастроек.Вставить("ПересчитатьПутевыеЛисты",                ПересчитатьПутевыеЛисты);
	СтруктураНастроек.Вставить("ПроводитьСозданныеЗаправкиГСМ",          ПроводитьСозданныеЗаправкиГСМ);
	СтруктураНастроек.Вставить("ОткрыватьФормыЗаписанныхЗаправок",       ОткрыватьФормыЗаписанныхЗаправок);
	СтруктураНастроек.Вставить("СоздаватьСливыДляОтрицательныхЗаправок", СоздаватьСливыДляОтрицательныхЗаправок);
	СтруктураНастроек.Вставить("КомментироватьХодВыполнения",            КомментироватьХодВыполнения);
	СтруктураНастроек.Вставить("ДатаНач",                                Объект.ДатаНач);
	СтруктураНастроек.Вставить("ДатаКон",                                Объект.ДатаКон);
	СтруктураНастроек.Вставить("Организация",                            Объект.Организация);
	СтруктураНастроек.Вставить("Контрагент",                             Объект.Контрагент);
	СтруктураНастроек.Вставить("АЗС",                                    Объект.АЗС);
	СтруктураНастроек.Вставить("ГлубинаПоискаПЛДоВыезда",                Объект.ГлубинаПоискаПЛДоВыезда);
	СтруктураНастроек.Вставить("ГлубинаПоискаПЛПослеВозвращения",        Объект.ГлубинаПоискаПЛПослеВозвращения);
	СтруктураНастроек.Вставить("ЗаменятьАналогНаОсновноеТопливо",        ЗаменятьАналогНаОсновноеТопливо);
	СтруктураНастроек.Вставить("ПроверятьНаличееДублейПоСозданнымРанееДокументам", ПроверятьНаличееДублейПоСозданнымРанееДокументам);
	
	СтруктураНастроек.Вставить("СписокГСМ", СписокГСМ);
	СтруктураНастроек.Вставить("СписокТК",  СписокТК);
	
	ХранилищеНастроекДанныхФорм.Сохранить("Обработка.уатЗагрузитьЗаправкиИзОтчетовПЦ.Форма.ОсновнаяФорма",
		"уатЗагрузитьЗаправкиИзОтчетовПЦ_ОбщиеНастройки", СтруктураНастроек);
КонецПроцедуры

&НаСервереБезКонтекста
Процедура ЗаполнитьТКПоОтбору(Список, ВидОтбора, Отбор)
	Для Каждого ТекТК Из Список Цикл
		ТекТК.Пометка = ТекТК.Значение[ВидОтбора] = Отбор;
	КонецЦикла;
КонецПроцедуры


#Область ПроцедурыВыводаФормыДлительнойОперацииПриПроведении

&НаКлиенте
Процедура ИнициализацияФормыДлительнойОперации()
	
	ДлительнаяОперация = ВыполнениеОбработкиНаСервере();
	
	НастройкиОжидания = ДлительныеОперацииКлиент.ПараметрыОжидания(ЭтотОбъект);
	НастройкиОжидания.ВыводитьПрогрессВыполнения = Истина;

	Обработчик = Новый ОписаниеОповещения("ПроверитьВыполнениеЗадания", ЭтотОбъект);
	
	ДлительныеОперацииКлиент.ОжидатьЗавершение(ДлительнаяОперация, Обработчик, НастройкиОжидания);
	
КонецПроцедуры

&НаСервере
Функция ВыполнениеОбработкиНаСервере()
	
	Если ДлительнаяОперация <> Неопределено Тогда
		ДлительныеОперации.ОтменитьВыполнениеЗадания(ДлительнаяОперация.ИдентификаторЗадания);
	КонецЕсли;
	
	ОбработанныеДокументы.Очистить();
	КоличествоОбработанныхДокументов = 0;

	СтруктураПараметров = Новый Структура;
	СтруктураПараметров.Вставить("ИспользоватьДанныеПЦ",                             Истина);
	СтруктураПараметров.Вставить("РежимРаботы",                                      РежимРаботы);
	СтруктураПараметров.Вставить("АЗС",                                              Объект.АЗС);
	СтруктураПараметров.Вставить("Контрагент",                                       Объект.Контрагент);
	СтруктураПараметров.Вставить("Организация",                                      Объект.Организация);
	СтруктураПараметров.Вставить("ДатаНач",                                          Объект.ДатаНач);
	СтруктураПараметров.Вставить("ДатаКон",                                          Объект.ДатаКон);
	СтруктураПараметров.Вставить("ТолькоПроверенные",                                Объект.ТолькоПроверенные);
	СтруктураПараметров.Вставить("ГлубинаПоискаПЛДоВыезда",                          Объект.ГлубинаПоискаПЛДоВыезда);
	СтруктураПараметров.Вставить("ГлубинаПоискаПЛПослеВозвращения",                  Объект.ГлубинаПоискаПЛПослеВозвращения);
	СтруктураПараметров.Вставить("ЗаменятьАналогНаОсновноеТопливо",                  ЗаменятьАналогНаОсновноеТопливо);
	СтруктураПараметров.Вставить("ОбрабатыватьРассчитанныеПутевыеЛисты",             ОбрабатыватьРассчитанныеПутевыеЛисты);
	СтруктураПараметров.Вставить("ПересчитатьПутевыеЛисты",                          ПересчитатьПутевыеЛисты);
	СтруктураПараметров.Вставить("ПроверятьНаличееДублейПоСозданнымРанееДокументам", ПроверятьНаличееДублейПоСозданнымРанееДокументам);
	СтруктураПараметров.Вставить("ПроводитьСозданныеЗаправкиГСМ",                    ПроводитьСозданныеЗаправкиГСМ);
	СтруктураПараметров.Вставить("СоздаватьСливыДляОтрицательныхЗаправок",           СоздаватьСливыДляОтрицательныхЗаправок);
	СтруктураПараметров.Вставить("КомментироватьХодВыполнения",                      КомментироватьХодВыполнения);
	СтруктураПараметров.Вставить("ПрофильОбменаСПЦ",                                 ПрофильОбменаСПЦ);
	СтруктураПараметров.Вставить("Ответственный",                                    Пользователи.АвторизованныйПользователь());
	СтруктураПараметров.Вставить("ОсновнаяСтавкаНДС",                                уатОбщегоНазначенияПовтИсп.ПолучитьЗначениеПоУмолчаниюПользователя(
		СтруктураПараметров.Ответственный, "ОсновнаяСтавкаНДС"));
		
	мсвТК = Новый Массив;
	Для Каждого ТекСтрока Из СписокТК Цикл
		Если ТекСтрока.Пометка Тогда
			мсвТК.Добавить(ТекСтрока.Значение);
		КонецЕсли;
	КонецЦикла;
	СтруктураПараметров.Вставить("мсвТопливныеКарты", мсвТК);
	
	мсвГСМ = Новый Массив;
	Для Каждого ТекСтрока Из СписокГСМ Цикл
		Если ТекСтрока.Пометка Тогда
			мсвГСМ.Добавить(ТекСтрока.Значение);
		КонецЕсли;
	КонецЦикла;
	СтруктураПараметров.Вставить("мсвГСМ", мсвГСМ);
	
	ПараметрыВыполнения = ДлительныеОперации.ПараметрыВыполненияВФоне(Новый УникальныйИдентификатор);
	ПараметрыВыполнения.НаименованиеФоновогоЗадания = НСтр("ru = 'Загрузка заправок ГСМ по данным отчетов ПЦ'");
	ПараметрыВыполнения.ЗапуститьВФоне = Истина;
	
	Возврат ДлительныеОперации.ВыполнитьВФоне("уатЗагрузкаПЦ.СоздатьЗаправкиГСМпоДаннымПЦиССМ",
		СтруктураПараметров, ПараметрыВыполнения);
	
КонецФункции

&НаКлиенте
Процедура ПроверитьВыполнениеЗадания(Операция, ДополнительныеПараметры) Экспорт

	Если Операция = Неопределено Тогда
		Возврат;
	КонецЕсли;
	
	Если Операция.Статус = "Выполнено" Тогда
		ВывестиСообщенияПослеВыполнения(Операция.АдресРезультата);
		
		Если ОткрыватьФормыЗаписанныхЗаправок Тогда
			флОткрытьФормы = Истина;
			Если ОбработанныеДокументы.Количество() > 50 Тогда
				Ответ = Неопределено;
				
				ТекстНСТР = НСтр("en='Number of processed fuelings and drains exceeds 50! Open document forms?';ru='Количество обработанных заправок и сливов превышает 50! Открыть формы документов?'");
				ПоказатьВопрос(Новый ОписаниеОповещения("ВыполнитьОбработкуЗавершение", ЭтотОбъект), ТекстНСТР, РежимДиалогаВопрос.ОКОтмена);
				Возврат;
			КонецЕсли;
			
			ВыполнитьОбработкуФрагмент(флОткрытьФормы);
		КонецЕсли;
	Иначе
		ВызватьИсключение Операция.КраткоеПредставлениеОшибки;
	КонецЕсли;
	
КонецПроцедуры

// Действия после выполнения фонового задания
//
&НаКлиенте
Процедура ВывестиСообщенияПослеВыполнения(АдресРезультата)
	ДанныеФоновогоЗадания = ПолучитьИзВременногоХранилища(АдресРезультата);
	Если ТипЗнч(ДанныеФоновогоЗадания) = Тип("Структура") Тогда
		Если ДанныеФоновогоЗадания.Свойство("СообщенияОбОшибках") Тогда
			Для Каждого ТекСообщениеОшибка Из ДанныеФоновогоЗадания.СообщенияОбОшибках Цикл
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекСообщениеОшибка);
			КонецЦикла;
		КонецЕсли;
		Если ДанныеФоновогоЗадания.Свойство("ОбработанныеДокументы") Тогда
			мсвОбработанныеДокументы = ДанныеФоновогоЗадания.ОбработанныеДокументы;
			Если мсвОбработанныеДокументы.Количество() <> 0  Тогда
				Для Каждого ТекДокумент Из мсвОбработанныеДокументы Цикл
					НоваяСтрока = ОбработанныеДокументы.Добавить();
					НоваяСтрока.Значение = ТекДокумент;
				КонецЦикла;
				
				Элементы.ГруппаСтраницы.ТекущаяСтраница = Элементы.ГруппаОбработанныеДокументы;
				КоличествоОбработанныхДокументов = мсвОбработанныеДокументы.Количество();
				
				ТекстНСТР = НСтр("en='Created documents:';ru='Обработано документов:'")  + " " + КоличествоОбработанныхДокументов;
				ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
			КонецЕсли;
		КонецЕсли;
	КонецЕсли;
КонецПроцедуры

#КонецОбласти


#КонецОбласти


#Область ОбработчикиСобытийФормы

&НаСервере
Процедура ПриСозданииНаСервере(Отказ, СтандартнаяОбработка)
	
	Если Параметры.Свойство("АвтоТест") Тогда // Возврат при получении формы для анализа.
		Автотест = Истина;
		Возврат;
	КонецЕсли;
	
	УстановитьСтатусУчетныхЗаписей();
	
КонецПроцедуры

&НаКлиенте
Процедура ПриОткрытии(Отказ)
	
	Если Автотест Тогда // Возврат при получении формы для анализа.
		Возврат;
	КонецЕсли;
	
	УстановитьВидимость();
	ОбновитьДанныеРеглЗаданий();
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиСобытийЭлементовШапкиФормы

&НаКлиенте
Процедура НаборКонстантуатИспользоватьППРПриИзменении(Элемент)
	УстановитьВидимость();
	ОбновитьДанныеРеглЗаданий(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура НаборКонстантуатИспользоватьЛукойлПриИзменении(Элемент)
	УстановитьВидимость();
	ОбновитьДанныеРеглЗаданий(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура НаборКонстантуатИспользоватьРоснефтьПриИзменении(Элемент)
	УстановитьВидимость();
	ОбновитьДанныеРеглЗаданий(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура НаборКонстантуатИспользоватьГазпромнефтьПриИзменении(Элемент)
	УстановитьВидимость();
	ОбновитьДанныеРеглЗаданий(Ложь);
КонецПроцедуры

&НаКлиенте
Процедура ДекорацияОписаниеОбработкаНавигационнойСсылки(Элемент, НавигационнаяСсылкаФорматированнойСтроки, СтандартнаяОбработка)
	Если Модифицированность Тогда 
		ТекстНСТР = НСтр("ru='Необходимо записать изменения.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;

	Если НавигационнаяСсылкаФорматированнойСтроки = "e1cib/list/Справочник.уатПрофилиОбменаСВнешнимиСистемами" Тогда
		СтандартнаяОбработка = Ложь;
		ПараметрыВыбора      = Неопределено;
		
		ТекущаяСтраница = Элементы.СтраницыПЦ.ТекущаяСтраница;
		Если ТекущаяСтраница = Элементы.СтраницаГазпромнефть Тогда
			ЗначениеОтбора  = Новый Структура("ВнешняяСистема",
				ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.Газпромнефть"));
			ПараметрыВыбора = Новый Структура("Отбор", ЗначениеОтбора);
		ИначеЕсли ТекущаяСтраница = Элементы.СтраницаППР Тогда
			ЗначениеОтбора  = Новый Структура("ВнешняяСистема",
				ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.ППР"));
			ПараметрыВыбора = Новый Структура("Отбор", ЗначениеОтбора);
		ИначеЕсли ТекущаяСтраница = Элементы.СтраницаЛукойл Тогда
			ЗначениеОтбора  = Новый Структура("ВнешняяСистема",
				ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.ЛукойлЛИКАРД"));
			ПараметрыВыбора = Новый Структура("Отбор", ЗначениеОтбора);
		ИначеЕсли ТекущаяСтраница = Элементы.СтраницаРоснефть Тогда
			ЗначениеОтбора  = Новый Структура("ВнешняяСистема",
				ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.Роснефть"));
			ПараметрыВыбора = Новый Структура("Отбор", ЗначениеОтбора);
		КонецЕсли;
		ОткрытьФорму("Справочник.уатПрофилиОбменаСВнешнимиСистемами.Форма.ФормаСписка", ПараметрыВыбора); 
	КонецЕсли;
КонецПроцедуры

#КонецОбласти

#Область ОбработчикиКомандФормы

&НаКлиенте
Процедура ПерейтиКНастройке(Команда)
	
	ТекущаяСтраница = Элементы.СтраницыПЦ.ТекущаяСтраница;
	Если ТекущаяСтраница = Элементы.СтраницаГазпромнефть Тогда
		ЗначениеОтбора  = Новый Структура("ВнешняяСистема",
		ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.Газпромнефть"));
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаППР Тогда
		ЗначениеОтбора  = Новый Структура("ВнешняяСистема",
		ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.ППР"));
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаЛукойл Тогда
		ЗначениеОтбора  = Новый Структура("ВнешняяСистема",
		ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.ЛукойлЛИКАРД"));
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаРоснефть Тогда
		ЗначениеОтбора  = Новый Структура("ВнешняяСистема",
		ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.Роснефть"));
	КонецЕсли;

	ОповещениеОЗакрытии = Новый ОписаниеОповещения("НастроитьУчетнуюЗапись", ЭтотОбъект);
	ОткрытьФорму("Справочник.уатУчетныеЗаписиПЦ.Форма.ФормаЭлемента",ЗначениеОтбора,,,,,ОповещениеОЗакрытии);

КонецПроцедуры

&НаКлиенте
Процедура ПерейтиКСписку(Команда)
	СтандартнаяОбработка = Ложь;
	ПараметрыВыбора      = Неопределено;
	
	ТекущаяСтраница = Элементы.СтраницыПЦ.ТекущаяСтраница;
	Если ТекущаяСтраница = Элементы.СтраницаГазпромнефть Тогда
		ЗначениеОтбора  = Новый Структура("ВнешняяСистема",
		ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.Газпромнефть"));
		ПараметрыВыбора = Новый Структура("Отбор", ЗначениеОтбора);
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаППР Тогда
		ЗначениеОтбора  = Новый Структура("ВнешняяСистема",
		ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.ППР"));
		ПараметрыВыбора = Новый Структура("Отбор", ЗначениеОтбора);
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаЛукойл Тогда
		ЗначениеОтбора  = Новый Структура("ВнешняяСистема",
		ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.ЛукойлЛИКАРД"));
		ПараметрыВыбора = Новый Структура("Отбор", ЗначениеОтбора);
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаРоснефть Тогда
		ЗначениеОтбора  = Новый Структура("ВнешняяСистема",
		ПредопределенноеЗначение("Справочник.уатВнешниеСистемы.Роснефть"));
		ПараметрыВыбора = Новый Структура("Отбор", ЗначениеОтбора);
	КонецЕсли;
	ОткрытьФорму("Справочник.уатУчетныеЗаписиПЦ.ФормаСписка", ПараметрыВыбора); 

КонецПроцедуры

&НаКлиенте
Процедура НастроитьРегламентноеЗаданиеЗагрузка(Команда)
	ТекущаяСтраница = Элементы.СтраницыПЦ.ТекущаяСтраница;
	Если ТекущаяСтраница = Элементы.СтраницаГазпромнефть Тогда
		ИдентификаторРеглЗадания             = ЗагрузкаДанныхОтПоставщикаПЦГазпромнефть;
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаППР Тогда
		ИдентификаторРеглЗадания             = ЗагрузкаДанныхОтПоставщикаПЦППР;
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаЛукойл Тогда
		ИдентификаторРеглЗадания             = ЗагрузкаДанныхОтПоставщикаПЦЛукойл;
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаРоснефть Тогда
		ИдентификаторРеглЗадания             = ЗагрузкаДанныхОтПоставщикаПЦРоснефть;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Идентификатор", ИдентификаторРеглЗадания);
	ПараметрыФормы.Вставить("Действие",      "Изменить");

	ОткрытьФорму("Обработка.РегламентныеИФоновыеЗадания.Форма.РегламентноеЗадание", ПараметрыФормы, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура НастроитьРегламентноеЗаданиеОбновление(Команда)
	ТекущаяСтраница = Элементы.СтраницыПЦ.ТекущаяСтраница;
	Если ТекущаяСтраница = Элементы.СтраницаГазпромнефть Тогда
		ИдентификаторРеглЗадания             = ОбновлениеЗагруженныхДанныхОтПоставщикаПЦГазпромнефть;
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаППР Тогда
		ИдентификаторРеглЗадания             = ОбновлениеЗагруженныхДанныхОтПоставщикаПЦППР;
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаЛукойл Тогда
		ИдентификаторРеглЗадания             = ОбновлениеЗагруженныхДанныхОтПоставщикаПЦЛукойл;
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаРоснефть Тогда
		ИдентификаторРеглЗадания             = ОбновлениеЗагруженныхДанныхОтПоставщикаПЦРоснефть;
	КонецЕсли;
	
	ПараметрыФормы = Новый Структура;
	ПараметрыФормы.Вставить("Идентификатор", ИдентификаторРеглЗадания);
	ПараметрыФормы.Вставить("Действие",      "Изменить");

	ОткрытьФорму("Обработка.РегламентныеИФоновыеЗадания.Форма.РегламентноеЗадание", ПараметрыФормы, ЭтотОбъект);
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьСтатусРегламентногоЗадания(Команда)
	Попытка
	ОбновитьДанныеРеглЗаданий(Ложь);
	Исключение
	КонецПопытки;
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьРегламентноеЗаданиеЗагрузка(Команда)
	Если Модифицированность Тогда 
		ТекстНСТР = НСтр("ru='Необходимо записать изменения.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	ТекущаяСтраница = Элементы.СтраницыПЦ.ТекущаяСтраница;
	Если ТекущаяСтраница = Элементы.СтраницаГазпромнефть Тогда
		РеглЗадание             = ЗагрузкаДанныхОтПоставщикаПЦГазпромнефть;
		РеглЗаданиеНаименование = Нстр("ru = 'Загрузка данных от поставщика ПЦ Газпромнефть'");
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаППР Тогда
		РеглЗадание             = ЗагрузкаДанныхОтПоставщикаПЦППР;
		РеглЗаданиеНаименование = Нстр("ru = 'Загрузка данных от поставщика ПЦ ППР'");
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаЛукойл Тогда
		РеглЗадание             = ЗагрузкаДанныхОтПоставщикаПЦЛукойл;
		РеглЗаданиеНаименование = Нстр("ru = 'Загрузка данных от поставщика ПЦ Лукойл'");
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаРоснефть Тогда
		РеглЗадание             = ЗагрузкаДанныхОтПоставщикаПЦРоснефть;
		РеглЗаданиеНаименование = Нстр("ru = 'Загрузка данных от поставщика ПЦ Роснефть'");
	КонецЕсли;
	
	ВыполнитьРегламентноеЗаданиеВручную(РеглЗадание, РеглЗаданиеНаименование);
КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьРегламентноеЗаданиеОбновление(Команда)
	
	Если Модифицированность Тогда 
		ТекстНСТР = НСтр("ru='Необходимо записать изменения.'");
		ОбщегоНазначенияКлиентСервер.СообщитьПользователю(ТекстНСТР);
		СтандартнаяОбработка = Ложь;
		Возврат;
	КонецЕсли;
	
	ТекущаяСтраница = Элементы.СтраницыПЦ.ТекущаяСтраница;
	Если ТекущаяСтраница = Элементы.СтраницаГазпромнефть Тогда
		РеглЗадание             = ОбновлениеЗагруженныхДанныхОтПоставщикаПЦГазпромнефть;
		РеглЗаданиеНаименование = Нстр("ru = 'Обновление загруженных данных от поставщика ПЦ Газпромнефть'");
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаППР Тогда
		РеглЗадание             = ОбновлениеЗагруженныхДанныхОтПоставщикаПЦППР;
		РеглЗаданиеНаименование = Нстр("ru = 'Обновление загруженных данных от поставщика ПЦ ППР'");
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаЛукойл Тогда
		РеглЗадание             = ОбновлениеЗагруженныхДанныхОтПоставщикаПЦЛукойл;
		РеглЗаданиеНаименование = Нстр("ru = 'Обновление загруженных данных от поставщика ПЦ Лукойл'");
	ИначеЕсли ТекущаяСтраница = Элементы.СтраницаРоснефть Тогда
		РеглЗадание             = ОбновлениеЗагруженныхДанныхОтПоставщикаПЦРоснефть;
		РеглЗаданиеНаименование = Нстр("ru = 'Обновление загруженных данных от поставщика ПЦ Роснефть'");
	КонецЕсли;
	ВыполнитьРегламентноеЗаданиеВручную(РеглЗадание, РеглЗаданиеНаименование);
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

&НаКлиенте
Процедура УстановитьВидимость()
	
	Элементы.ПанельГазпромнефть.Видимость = НаборКонстант.уатИспользоватьПЦГазпромнефть;
	Элементы.ПанельППР.Видимость          = НаборКонстант.уатИспользоватьПЦППР;
	Элементы.ПанельЛукойл.Видимость       = НаборКонстант.уатИспользоватьПЦЛукойл;
	Элементы.ПанельРоснефть.Видимость     = НаборКонстант.уатИспользоватьПЦРоснефть;
	
	Элементы.СтраницаГазпромнефть.Картинка	 = ?(НаборКонстант.уатИспользоватьПЦГазпромнефть,
		БиблиотекаКартинок.уатИнтеграцияВключена, БиблиотекаКартинок.уатИнтеграцияВыключена);
	Элементы.СтраницаППР.Картинка			 = ?(НаборКонстант.уатИспользоватьПЦППР,
		БиблиотекаКартинок.уатИнтеграцияВключена, БиблиотекаКартинок.уатИнтеграцияВыключена);
	Элементы.СтраницаЛукойл.Картинка		 = ?(НаборКонстант.уатИспользоватьПЦЛукойл,
		БиблиотекаКартинок.уатИнтеграцияВключена, БиблиотекаКартинок.уатИнтеграцияВыключена);
	Элементы.СтраницаРоснефть.Картинка		 = ?(НаборКонстант.уатИспользоватьПЦРоснефть,
		БиблиотекаКартинок.уатИнтеграцияВключена, БиблиотекаКартинок.уатИнтеграцияВыключена);

КонецПроцедуры

&НаКлиенте
Процедура ВыполнитьРегламентноеЗаданиеВручную(РеглЗадание, РеглЗаданиеНаименование)
	МассивСообщенийОбОшибках = Новый Массив;
	
	ПараметрыВыполнения = ВыполнитьРегламентноеЗаданиеВручнуюНаСервере(РеглЗадание);
	Если ПараметрыВыполнения.ЗапускВыполнен Тогда
		
		ПоказатьОповещениеПользователя(
		НСтр("ru='Запущена процедура регламентного задания';en='Scheduled job is launched'"), ,
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(НСтр("en = '%1.
                                                                      |The procedure is run in background job%2'; ru = '%1.
                                                                      |Процедура запущена в фоновом задании %2'"),
		РеглЗаданиеНаименование,
		Строка(ПараметрыВыполнения.МоментЗапуска)),
		БиблиотекаКартинок.ВыполнитьРегламентноеЗаданиеВручную);
		
		ИдентификаторыФоновыхЗаданийПриРучномВыполнении.Добавить(
		ПараметрыВыполнения.ИдентификаторФоновогоЗадания,
		РеглЗаданиеНаименование);
		
		ПодключитьОбработчикОжидания(
		"СообщитьОбОкончанииРучногоВыполненияРегламентногоЗадания", 0.1, Истина);
	ИначеЕсли ПараметрыВыполнения.ПроцедураУжеВыполняется Тогда
		МассивСообщенийОбОшибках.Добавить(
		СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("en = 'Procedure of scheduled job ""%1"" is
              |already executed in background job ""%2"" started %3.'; ru = 'Процедура регламентного задания ""%1""
              |  уже выполняется в фоновом задании ""%2"", начатом %3.'"),
		РеглЗаданиеНаименование,
		ПараметрыВыполнения.ПредставлениеФоновогоЗадания,
		Строка(ПараметрыВыполнения.МоментЗапуска)));
	КонецЕсли;
	
	КоличествоОшибок = МассивСообщенийОбОшибках.Количество();
	Если КоличествоОшибок > 0 Тогда
		ЗаголовокТекстаПроОшибки = СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
		НСтр("ru='Задания выполнены с ошибками (%1 из %2)';en='Jobs are completed with errors (%1 out of %2)'"),
		Формат(КоличествоОшибок, "ЧГ="),
		Формат(1, "ЧГ="));
		
		ТекстВсехОшибок = Новый ТекстовыйДокумент;
		ТекстВсехОшибок.ДобавитьСтроку(ЗаголовокТекстаПроОшибки + ":");
		Для Каждого ТекстЭтойОшибки Из МассивСообщенийОбОшибках Цикл
			ТекстВсехОшибок.ДобавитьСтроку("");
			ТекстВсехОшибок.ДобавитьСтроку(ТекстЭтойОшибки);
		КонецЦикла;
		
		Если КоличествоОшибок > 5 Тогда
			Кнопки = Новый СписокЗначений;
			Кнопки.Добавить(1, НСтр("ru='Показать ошибки';en='Show errors'"));
			Кнопки.Добавить(КодВозвратаДиалога.Отмена);
			
			ПоказатьВопрос(
			Новый ОписаниеОповещения(
			"ВыполнитьРегламентноеЗаданиеВручнуюЗавершение", ЭтотОбъект, ТекстВсехОшибок),
			ЗаголовокТекстаПроОшибки, Кнопки);
		Иначе
			ПоказатьПредупреждение(, СокрЛП(ТекстВсехОшибок.ПолучитьТекст()));
		КонецЕсли;
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура ОбновитьДанныеРеглЗаданий(ОбновитьВсе = Истина)
	Попытка
		ОбновитьДанныеРеглЗаданийСервер(ОбновитьВсе);
	Исключение
	КонецПопытки;
КонецПроцедуры

&НаСервере
Процедура ОбновитьДанныеРеглЗаданийСервер(ОбновитьВсе = Истина)
	
	Если ОбновитьВсе Тогда
		ОбновитьГазпромнефть = НаборКонстант.уатИспользоватьПЦГазпромнефть;
		ОбновитьППР          = НаборКонстант.уатИспользоватьПЦППР;
		ОбновитьЛукойл       = НаборКонстант.уатИспользоватьПЦЛукойл;
		ОбновитьРоснефть     = НаборКонстант.уатИспользоватьПЦРоснефть;
	Иначе
		ОбновитьГазпромнефть = Ложь;
		ОбновитьППР          = Ложь;
		ОбновитьЛукойл       = Ложь;
		ОбновитьРоснефть     = Ложь;
	
		
		ТекущаяСтраница = Элементы.СтраницыПЦ.ТекущаяСтраница;
		Если ТекущаяСтраница = Элементы.СтраницаГазпромнефть Тогда
			ОбновитьГазпромнефть = НаборКонстант.уатИспользоватьПЦГазпромнефть;
		ИначеЕсли ТекущаяСтраница = Элементы.СтраницаППР Тогда
			ОбновитьППР          = НаборКонстант.уатИспользоватьПЦППР;
		ИначеЕсли ТекущаяСтраница = Элементы.СтраницаЛукойл Тогда
			ОбновитьЛукойл       = НаборКонстант.уатИспользоватьПЦЛукойл;
		ИначеЕсли ТекущаяСтраница = Элементы.СтраницаРоснефть Тогда
			ОбновитьРоснефть     = НаборКонстант.уатИспользоватьПЦРоснефть;
		КонецЕсли;
	КонецЕсли;
	
	ТипФоновоеЗадание		 = Тип("ФоновоеЗадание");
	ТипИнформацияОбОшибке	 = Тип("ИнформацияОбОшибке");

	Если ОбновитьГазпромнефть Тогда
		
		РеглЗаданиеЗагрузкаДанныхОтПоставщикаПЦГазпромнефть = РегламентныеЗаданияСервер.Задание(Метаданные.РегламентныеЗадания.уатЗагрузкаДанныхОтПоставщикаПЦГазпромнефть);
		ЗагрузкаДанныхОтПоставщикаПЦГазпромнефть = РеглЗаданиеЗагрузкаДанныхОтПоставщикаПЦГазпромнефть.УникальныйИдентификатор;
		
		РеглЗаданиеОбновлениеЗагруженныхДанныхОтПоставщикаПЦГазпромнефть = РегламентныеЗаданияСервер.Задание(Метаданные.РегламентныеЗадания.уатОбновлениеЗагруженныхДанныхОтПоставщикаПЦГазпромнефть);
		ОбновлениеЗагруженныхДанныхОтПоставщикаПЦГазпромнефть = РеглЗаданиеОбновлениеЗагруженныхДанныхОтПоставщикаПЦГазпромнефть.УникальныйИдентификатор;
		
		Подсказка =  НСтр("ru='Никогда не выполнялось';en='Never execute'");
		Если РеглЗаданиеЗагрузкаДанныхОтПоставщикаПЦГазпромнефть = Неопределено Тогда
			ПредставлениеРасписания = НСтр("ru='Регламентное задание не найдено';en='Scheduled job is not found'");
			РегламентноеЗадание_Использование = Ложь;
		Иначе
			ПоследнееФоновоеЗадание = РегламентныеЗаданияСлужебный.СвойстваФоновыхЗаданий(Новый Структура("ПолучитьПоследнееФоновоеЗаданиеРегламентногоЗадания,
			|ИдентификаторРегламентногоЗадания", Истина, ЗагрузкаДанныхОтПоставщикаПЦГазпромнефть));
			Подсказка = ?(РеглЗаданиеЗагрузкаДанныхОтПоставщикаПЦГазпромнефть.Использование, 
			НСтр("ru='Используется';en='Used'"), НСтр("ru='Не используется';en='Not used'"));
			Если ПоследнееФоновоеЗадание.Количество() > 0 Тогда
				Подсказка = Подсказка + ", " + Строка(ПоследнееФоновоеЗадание[0].Состояние)
				+ " " + Строка(?(Значениезаполнено(ПоследнееФоновоеЗадание[0].Конец), ПоследнееФоновоеЗадание[0].Конец, ""));
			КонецЕсли;
		КонецЕсли;
		
		Если Подсказка <> Элементы.Газпромнефть_НастроитьРегламентноеЗадание_Статус.Заголовок Тогда
			Элементы.Газпромнефть_НастроитьРегламентноеЗадание_Статус.Заголовок = Подсказка;
		КонецЕсли;
		
		Если РеглЗаданиеОбновлениеЗагруженныхДанныхОтПоставщикаПЦГазпромнефть = Неопределено Тогда
			ПредставлениеРасписания = НСтр("ru='Регламентное задание не найдено';en='Scheduled job is not found'");
			РегламентноеЗадание_Использование = Ложь;
		Иначе
			ПоследнееФоновоеЗадание = РегламентныеЗаданияСлужебный.СвойстваФоновыхЗаданий(Новый Структура("ПолучитьПоследнееФоновоеЗаданиеРегламентногоЗадания,
			|ИдентификаторРегламентногоЗадания", Истина, ОбновлениеЗагруженныхДанныхОтПоставщикаПЦГазпромнефть));
			Подсказка = ?(РеглЗаданиеОбновлениеЗагруженныхДанныхОтПоставщикаПЦГазпромнефть.Использование, 
			НСтр("ru='Используется';en='Used'"), НСтр("ru='Не используется';en='Not used'"));
			Если ПоследнееФоновоеЗадание.Количество() > 0 Тогда
				Подсказка = Подсказка + ", " + Строка(ПоследнееФоновоеЗадание[0].Состояние)
				+ " " + Строка(?(Значениезаполнено(ПоследнееФоновоеЗадание[0].Конец), ПоследнееФоновоеЗадание[0].Конец, ""));
			КонецЕсли;
		КонецЕсли;
		
		Если Подсказка <> Элементы.Газпромнефть_НастроитьРегламентноеЗадание_Статус1.Заголовок Тогда
			Элементы.Газпромнефть_НастроитьРегламентноеЗадание_Статус1.Заголовок = Подсказка;
		КонецЕсли;
	КонецЕсли;

	Если ОбновитьППР Тогда
		РеглЗаданиеЗагрузкаДанныхОтПоставщикаПЦППР = РегламентныеЗаданияСервер.Задание(Метаданные.РегламентныеЗадания.уатЗагрузкаДанныхОтПоставщикаПЦППР);
		ЗагрузкаДанныхОтПоставщикаПЦППР = РеглЗаданиеЗагрузкаДанныхОтПоставщикаПЦППР.УникальныйИдентификатор;
		
		РеглЗаданиеОбновлениеЗагруженныхДанныхОтПоставщикаПЦППР = РегламентныеЗаданияСервер.Задание(Метаданные.РегламентныеЗадания.уатОбновлениеЗагруженныхДанныхОтПоставщикаПЦППР);
		ОбновлениеЗагруженныхДанныхОтПоставщикаПЦППР = РеглЗаданиеОбновлениеЗагруженныхДанныхОтПоставщикаПЦППР.УникальныйИдентификатор;
		
		Если РеглЗаданиеЗагрузкаДанныхОтПоставщикаПЦППР = Неопределено Тогда
			ПредставлениеРасписания = НСтр("ru='Регламентное задание не найдено';en='Scheduled job is not found'");
			РегламентноеЗадание_Использование = Ложь;
		Иначе
			ПоследнееФоновоеЗадание = РегламентныеЗаданияСлужебный.СвойстваФоновыхЗаданий(Новый Структура("ПолучитьПоследнееФоновоеЗаданиеРегламентногоЗадания,
			|ИдентификаторРегламентногоЗадания", Истина, ЗагрузкаДанныхОтПоставщикаПЦППР));
			Подсказка = ?(РеглЗаданиеЗагрузкаДанныхОтПоставщикаПЦППР.Использование, 
			НСтр("ru='Используется';en='Used'"), НСтр("ru='Не используется';en='Not used'"));
			Если ПоследнееФоновоеЗадание.Количество() > 0 Тогда
				Подсказка = Подсказка + ", " + Строка(ПоследнееФоновоеЗадание[0].Состояние)
				+ " " + Строка(?(Значениезаполнено(ПоследнееФоновоеЗадание[0].Конец), ПоследнееФоновоеЗадание[0].Конец, ""));
			КонецЕсли;
			
		КонецЕсли;
		
		Если Подсказка <> Элементы.ППР_НастроитьРегламентноеЗадание_Статус.Заголовок Тогда
			Элементы.ППР_НастроитьРегламентноеЗадание_Статус.Заголовок = Подсказка;
		КонецЕсли;
		
		Если РеглЗаданиеОбновлениеЗагруженныхДанныхОтПоставщикаПЦППР = Неопределено Тогда
			ПредставлениеРасписания = НСтр("ru='Регламентное задание не найдено';en='Scheduled job is not found'");
			РегламентноеЗадание_Использование = Ложь;
		Иначе
			ПоследнееФоновоеЗадание = РегламентныеЗаданияСлужебный.СвойстваФоновыхЗаданий(Новый Структура("ПолучитьПоследнееФоновоеЗаданиеРегламентногоЗадания,
			|ИдентификаторРегламентногоЗадания", Истина, ОбновлениеЗагруженныхДанныхОтПоставщикаПЦППР));
			Подсказка = ?(РеглЗаданиеОбновлениеЗагруженныхДанныхОтПоставщикаПЦППР.Использование, 
			НСтр("ru='Используется';en='Used'"), НСтр("ru='Не используется';en='Not used'"));
			Если ПоследнееФоновоеЗадание.Количество() > 0 Тогда
				Подсказка = Подсказка + ", " + Строка(ПоследнееФоновоеЗадание[0].Состояние)
				+ " " + Строка(?(Значениезаполнено(ПоследнееФоновоеЗадание[0].Конец), ПоследнееФоновоеЗадание[0].Конец, ""));
				
			КонецЕсли;
		КонецЕсли;
		
		Если Подсказка <> Элементы.ППР_НастроитьРегламентноеЗадание_Статус1.Заголовок Тогда
			Элементы.ППР_НастроитьРегламентноеЗадание_Статус1.Заголовок = Подсказка;
		КонецЕсли;
		
	КонецЕсли;

	Если ОбновитьЛукойл Тогда
		РеглЗаданиеЗагрузкаДанныхОтПоставщикаПЦЛукойл = РегламентныеЗаданияСервер.Задание(Метаданные.РегламентныеЗадания.уатЗагрузкаДанныхОтПоставщикаПЦЛукойл);
		ЗагрузкаДанныхОтПоставщикаПЦЛукойл = РеглЗаданиеЗагрузкаДанныхОтПоставщикаПЦЛукойл.УникальныйИдентификатор;
		
		РеглЗаданиеОбновлениеЗагруженныхДанныхОтПоставщикаПЦЛукойл = РегламентныеЗаданияСервер.Задание(Метаданные.РегламентныеЗадания.уатОбновлениеЗагруженныхДанныхОтПоставщикаПЦЛукойл);
		ОбновлениеЗагруженныхДанныхОтПоставщикаПЦЛукойл = РеглЗаданиеОбновлениеЗагруженныхДанныхОтПоставщикаПЦЛукойл.УникальныйИдентификатор;
			
		Если РеглЗаданиеЗагрузкаДанныхОтПоставщикаПЦЛукойл = Неопределено Тогда
			ПредставлениеРасписания = НСтр("ru='Регламентное задание не найдено';en='Scheduled job is not found'");
			РегламентноеЗадание_Использование = Ложь;
		Иначе
			ПоследнееФоновоеЗадание = РегламентныеЗаданияСлужебный.СвойстваФоновыхЗаданий(Новый Структура("ПолучитьПоследнееФоновоеЗаданиеРегламентногоЗадания,
			|ИдентификаторРегламентногоЗадания", Истина, ЗагрузкаДанныхОтПоставщикаПЦЛукойл));
			Подсказка = ?(РеглЗаданиеЗагрузкаДанныхОтПоставщикаПЦЛукойл.Использование, 
			НСтр("ru='Используется';en='Used'"), НСтр("ru='Не используется';en='Not used'"));
			Если ПоследнееФоновоеЗадание.Количество() > 0 Тогда
				Подсказка = Подсказка + ", " + Строка(ПоследнееФоновоеЗадание[0].Состояние)
				+ " " + Строка(?(Значениезаполнено(ПоследнееФоновоеЗадание[0].Конец), ПоследнееФоновоеЗадание[0].Конец, ""));
			КонецЕсли;
			
		КонецЕсли;
		
		Если Подсказка <> Элементы.Лукойл_НастроитьРегламентноеЗадание_Статус.Заголовок Тогда
			Элементы.Лукойл_НастроитьРегламентноеЗадание_Статус.Заголовок = Подсказка;
		КонецЕсли;
			
		Если РеглЗаданиеОбновлениеЗагруженныхДанныхОтПоставщикаПЦЛукойл = Неопределено Тогда
			ПредставлениеРасписания = НСтр("ru='Регламентное задание не найдено';en='Scheduled job is not found'");
			РегламентноеЗадание_Использование = Ложь;
		Иначе
			ПоследнееФоновоеЗадание = РегламентныеЗаданияСлужебный.СвойстваФоновыхЗаданий(Новый Структура("ПолучитьПоследнееФоновоеЗаданиеРегламентногоЗадания,
			|ИдентификаторРегламентногоЗадания", Истина, ОбновлениеЗагруженныхДанныхОтПоставщикаПЦЛукойл));
			Подсказка = ?(РеглЗаданиеОбновлениеЗагруженныхДанныхОтПоставщикаПЦЛукойл.Использование, 
			НСтр("ru='Используется';en='Used'"), НСтр("ru='Не используется';en='Not used'"));
			Если ПоследнееФоновоеЗадание.Количество() > 0 Тогда
				Подсказка = Подсказка + ", " + Строка(ПоследнееФоновоеЗадание[0].Состояние)
				+ " " + Строка(?(Значениезаполнено(ПоследнееФоновоеЗадание[0].Конец), ПоследнееФоновоеЗадание[0].Конец, ""));
			КонецЕсли;
			
		КонецЕсли;
		
		Если Подсказка <> Элементы.Лукойл_НастроитьРегламентноеЗадание_Статус1.Заголовок Тогда
			Элементы.Лукойл_НастроитьРегламентноеЗадание_Статус1.Заголовок = Подсказка;
		КонецЕсли;
	КонецЕсли;
	
	Если ОбновитьРоснефть Тогда
		РеглЗаданиеЗагрузкаДанныхОтПоставщикаПЦРоснефть = РегламентныеЗаданияСервер.Задание(Метаданные.РегламентныеЗадания.уатЗагрузкаДанныхОтПоставщикаПЦРоснефть);
		ЗагрузкаДанныхОтПоставщикаПЦРоснефть = РеглЗаданиеЗагрузкаДанныхОтПоставщикаПЦРоснефть.УникальныйИдентификатор;
		
		РеглЗаданиеОбновлениеЗагруженныхДанныхОтПоставщикаПЦРоснефть = РегламентныеЗаданияСервер.Задание(Метаданные.РегламентныеЗадания.уатОбновлениеЗагруженныхДанныхОтПоставщикаПЦРоснефть);
		ОбновлениеЗагруженныхДанныхОтПоставщикаПЦРоснефть = РеглЗаданиеОбновлениеЗагруженныхДанныхОтПоставщикаПЦРоснефть.УникальныйИдентификатор;
		
		Если РеглЗаданиеЗагрузкаДанныхОтПоставщикаПЦРоснефть = Неопределено Тогда
			ПредставлениеРасписания = НСтр("ru='Регламентное задание не найдено';en='Scheduled job is not found'");
			РегламентноеЗадание_Использование = Ложь;
		Иначе
			ПоследнееФоновоеЗадание = РегламентныеЗаданияСлужебный.СвойстваФоновыхЗаданий(Новый Структура("ПолучитьПоследнееФоновоеЗаданиеРегламентногоЗадания,
			|ИдентификаторРегламентногоЗадания", Истина, ЗагрузкаДанныхОтПоставщикаПЦРоснефть));
			Подсказка = ?(РеглЗаданиеЗагрузкаДанныхОтПоставщикаПЦРоснефть.Использование, 
			НСтр("ru='Используется';en='Used'"), НСтр("ru='Не используется';en='Not used'"));
			Если ПоследнееФоновоеЗадание.Количество() > 0 Тогда
				Подсказка = Подсказка + ", " + Строка(ПоследнееФоновоеЗадание[0].Состояние)
				+ " " + Строка(?(Значениезаполнено(ПоследнееФоновоеЗадание[0].Конец), ПоследнееФоновоеЗадание[0].Конец, ""));
			КонецЕсли;
			
		КонецЕсли;
		
		Если Подсказка <> Элементы.Роснефть_НастроитьРегламентноеЗадание_Статус.Заголовок Тогда
			Элементы.Роснефть_НастроитьРегламентноеЗадание_Статус.Заголовок = Подсказка;
		КонецЕсли;
		
		Если РеглЗаданиеОбновлениеЗагруженныхДанныхОтПоставщикаПЦРоснефть = Неопределено Тогда
			ПредставлениеРасписания = НСтр("ru='Регламентное задание не найдено';en='Scheduled job is not found'");
			РегламентноеЗадание_Использование = Ложь;
		Иначе
			ПоследнееФоновоеЗадание = РегламентныеЗаданияСлужебный.СвойстваФоновыхЗаданий(Новый Структура("ПолучитьПоследнееФоновоеЗаданиеРегламентногоЗадания,
			|ИдентификаторРегламентногоЗадания", Истина, ОбновлениеЗагруженныхДанныхОтПоставщикаПЦРоснефть));
			Подсказка = ?(РеглЗаданиеОбновлениеЗагруженныхДанныхОтПоставщикаПЦРоснефть.Использование, 
			НСтр("ru='Используется';en='Used'"), НСтр("ru='Не используется';en='Not used'"));
			Если ПоследнееФоновоеЗадание.Количество() > 0 Тогда
				Подсказка = Подсказка + ", " + Строка(ПоследнееФоновоеЗадание[0].Состояние)
				+ " " + Строка(?(Значениезаполнено(ПоследнееФоновоеЗадание[0].Конец), ПоследнееФоновоеЗадание[0].Конец, ""));
			КонецЕсли;
			
		КонецЕсли;
		
		Если Подсказка <> Элементы.Роснефть_НастроитьРегламентноеЗадание_Статус1.Заголовок Тогда
			Элементы.Роснефть_НастроитьРегламентноеЗадание_Статус1.Заголовок = Подсказка;
		КонецЕсли;
	КонецЕсли;

КонецПроцедуры

&НаСервере
Функция ВыполнитьРегламентноеЗаданиеВручнуюНаСервере(Знач ИдентификаторРегламентногоЗадания)
	
	Результат = РегламентныеЗаданияСлужебный.ВыполнитьРегламентноеЗаданиеВручную(ИдентификаторРегламентногоЗадания);
	Возврат Результат;
	
КонецФункции

&НаКлиенте
Процедура СообщитьОбОкончанииРучногоВыполненияРегламентногоЗадания()
	
	ОповещенияОбОкончанииВыполнения = ОповещенияОбОкончанииВыполненияРегламентныхЗаданий();
	Для каждого Оповещение Из ОповещенияОбОкончанииВыполнения Цикл
		
		ПоказатьОповещениеПользователя(
			НСтр("ru='Выполнена процедура регламентного задания';en='Scheduled job procedure is executed'"),
			,
			СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
				НСтр("en = '%1. The procedure is completed in background job %2'; ru = '%1. Процедура завершена в фоновом задании %2'"),
				Оповещение.ПредставлениеРегламентногоЗадания,
				Строка(Оповещение.МоментОкончания)),
			БиблиотекаКартинок.ВыполнитьРегламентноеЗаданиеВручную);
		ОбновитьДанныеРеглЗаданий(Ложь);
	КонецЦикла;
	
	Если ИдентификаторыФоновыхЗаданийПриРучномВыполнении.Количество() > 0 Тогда
		
		ПодключитьОбработчикОжидания(
			"СообщитьОбОкончанииРучногоВыполненияРегламентногоЗадания", 2, Истина);
	КонецЕсли;
	
КонецПроцедуры

&НаСервере
Функция ОповещенияОбОкончанииВыполненияРегламентныхЗаданий()
	
	ОповещенияОбОкончанииВыполнения = Новый Массив;
	
	Если ИдентификаторыФоновыхЗаданийПриРучномВыполнении.Количество() > 0 Тогда
		Индекс = ИдентификаторыФоновыхЗаданийПриРучномВыполнении.Количество() - 1;
		
		УстановитьПривилегированныйРежим(Истина);
		Пока Индекс >= 0 Цикл
			
			НовыйУникальныйИдентификатор = Новый УникальныйИдентификатор(
				ИдентификаторыФоновыхЗаданийПриРучномВыполнении[Индекс].Значение);
			Отбор = Новый Структура;
			Отбор.Вставить("УникальныйИдентификатор", НовыйУникальныйИдентификатор);
			
			МассивФоновыхЗаданий = ФоновыеЗадания.ПолучитьФоновыеЗадания(Отбор);
			
			Если МассивФоновыхЗаданий.Количество() = 1 Тогда
				МоментОкончания = МассивФоновыхЗаданий[0].Конец;
				
				Если ЗначениеЗаполнено(МоментОкончания) Тогда
					
					ОповещенияОбОкончанииВыполнения.Добавить(
						Новый Структура(
							"ПредставлениеРегламентногоЗадания,
							|МоментОкончания",
							ИдентификаторыФоновыхЗаданийПриРучномВыполнении[Индекс].Представление,
							МоментОкончания));
					
					ИдентификаторыФоновыхЗаданийПриРучномВыполнении.Удалить(Индекс);
				КонецЕсли;
			Иначе
				ИдентификаторыФоновыхЗаданийПриРучномВыполнении.Удалить(Индекс);
			КонецЕсли;
			Индекс = Индекс - 1;
		КонецЦикла;
		УстановитьПривилегированныйРежим(Ложь);
	КонецЕсли;
	
	Возврат ОповещенияОбОкончанииВыполнения;
	
КонецФункции

&НаКлиенте
Процедура ВыполнитьРегламентноеЗаданиеВручнуюЗавершение(Ответ, ТекстВсехОшибок) Экспорт
	
	Если Ответ = 1 Тогда
		ТекстВсехОшибок.Показать();
	КонецЕсли;
	
КонецПроцедуры

&НаКлиенте
Процедура НастроитьУчетнуюЗапись(Результат, ДополнительныеПараметры) Экспорт
	
	УстановитьСтатусУчетныхЗаписей();
	
КонецПроцедуры

&НаСервере
Процедура УстановитьСтатусУчетныхЗаписей()
	
	УЗГазпромнефтьНастроена  = Ложь;
	УЗППРНастроена           = Ложь;
	УЗЛукойлНастроена        = Ложь;
	УЗРоснефтьНастроена      = Ложь;
	
	Запрос = Новый Запрос();
	Запрос.Текст = "ВЫБРАТЬ
	               |	уатУчетныеЗаписиПЦ.Ссылка КАК Ссылка,
	               |	уатУчетныеЗаписиПЦ.ВнешняяСистема КАК ВнешняяСистема
	               |ИЗ
	               |	Справочник.уатУчетныеЗаписиПЦ КАК уатУчетныеЗаписиПЦ
	               |ГДЕ
	               |	НЕ уатУчетныеЗаписиПЦ.ПометкаУдаления
	               |	И (ВЫРАЗИТЬ(уатУчетныеЗаписиПЦ.АдресСервиса КАК СТРОКА(100))) <> """"";
	Выборка = Запрос.Выполнить().Выбрать();
	Пока Выборка.Следующий() Цикл
		Если Выборка.ВнешняяСистема = Справочники.уатВнешниеСистемы.Газпромнефть Тогда
			УЗГазпромнефтьНастроена  = Истина;
		ИначеЕсли Выборка.ВнешняяСистема = Справочники.уатВнешниеСистемы.ППР Тогда
			УЗППРНастроена           = Истина;
		ИначеЕсли Выборка.ВнешняяСистема = Справочники.уатВнешниеСистемы.ЛукойлЛИКАРД Тогда
			УЗЛукойлНастроена        = Истина;
		ИначеЕсли Выборка.ВнешняяСистема = Справочники.уатВнешниеСистемы.Роснефть Тогда
			УЗРоснефтьНастроена      = Истина;
		КонецЕсли;
	КонецЦикла;
	
	Элементы.ГруппаПодсказкаГазпромнефтьУчетнаяЗаписьСтатус.ТекущаяСтраница = ?(УЗГазпромнефтьНастроена,
		Элементы.ГруппаПодсказкаГазпромнефтьУчетнаяЗаписьНастроена,
		Элементы.ГруппаПодсказкаГазпромнефтьУчетнаяЗаписьНеНастроена);
		
	Элементы.ГруппаПодсказкаППРУчетнаяЗаписьСтатус.ТекущаяСтраница = ?(УЗППРНастроена,
		Элементы.ГруппаПодсказкаППРУчетнаяЗаписьНастроена,
		Элементы.ГруппаПодсказкаППРУчетнаяЗаписьНеНастроена);
		
	Элементы.ГруппаПодсказкаЛукойлУчетнаяЗаписьСтатус.ТекущаяСтраница = ?(УЗЛукойлНастроена,
		Элементы.ГруппаПодсказкаЛукойлУчетнаяЗаписьНастроена,
		Элементы.ГруппаПодсказкаЛукойлУчетнаяЗаписьНеНастроена);
		
	Элементы.ГруппаПодсказкаРоснефтьУчетнаяЗаписьСтатус.ТекущаяСтраница = ?(УЗРоснефтьНастроена,
		Элементы.ГруппаПодсказкаРоснефтьУчетнаяЗаписьНастроена,
		Элементы.ГруппаПодсказкаРоснефтьУчетнаяЗаписьНеНастроена);

КонецПроцедуры

#КонецОбласти

